00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic031.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 31
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 A4 D6 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 3C B7 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 74 B4 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 44 A5 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 54 A7 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 AC A2 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 B8 0F 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 94 AE 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 20 41 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 D0 68 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 88 66 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 60 78 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 6C 49 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     DC E6 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     10 F8 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     E8 E5 05 F1 | 	add	objptr, ##41960
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     E8 E5 85 F1 | 	sub	objptr, ##41960
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     08 FB B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     5C 02 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     54 FC B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     18 FA B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     2C CC B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     E8 E5 05 F1 | 	add	objptr, ##41960
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     E8 E5 85 F1 | 	sub	objptr, ##41960
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     24 CA B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     C4 C9 B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F0 E5 05 F1 | 	add	objptr, ##41968
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     B2 E5 85 F1 | 	sub	objptr, ##41906
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     B4 E5 05 F1 | 	add	objptr, ##41908
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     B2 E5 85 F1 | 	sub	objptr, ##41906
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     54 C9 B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     24 E1 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F0 E5 05 F1 | 	add	objptr, ##41968
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F0 E5 85 F1 | 	sub	objptr, ##41968
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     40 E4 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     44 F7 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     98 FE B1 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     94 F8 B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     80 01 00 FF 
00ccc     26 49 06 F6 | 	mov	local22, ##@LR__5017
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     E8 C7 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     74 1D B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     84 FB B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     90 E8 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     C0 EA B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     D0 F5 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     24 FD B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     20 F7 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     84 C6 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     00 E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     F4 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     84 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     50 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     70 DF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     60 DF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     28 C5 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     D4 C4 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     A4 C4 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F0 E5 05 F1 | 	add	objptr, ##41968
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     B2 E5 85 F1 | 	sub	objptr, ##41906
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     B4 E5 05 F1 | 	add	objptr, ##41908
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     B2 E5 85 F1 | 	sub	objptr, ##41906
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     3C C4 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     0C DC B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F0 E5 05 F1 | 	add	objptr, ##41968
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F0 E5 85 F1 | 	sub	objptr, ##41968
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     E8 DC B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     24 C3 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     D0 C2 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     A0 C2 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F0 E5 05 F1 | 	add	objptr, ##41968
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     B2 E5 85 F1 | 	sub	objptr, ##41906
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     B4 E5 05 F1 | 	add	objptr, ##41908
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     B2 E5 85 F1 | 	sub	objptr, ##41906
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     38 C2 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     08 DA B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F0 E5 05 F1 | 	add	objptr, ##41968
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F0 E5 85 F1 | 	sub	objptr, ##41968
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     80 01 00 FF 
01328     27 49 06 F6 | 	mov	local22, ##@LR__5018
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 34 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1A 29 02 F6 | 	mov	local06, local12
01394     14 13 02 F6 | 	mov	arg01, local06
01398     30 DB B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 32 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 34 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1A 29 02 F6 | 	mov	local06, local12
013f4     14 13 02 F6 | 	mov	arg01, local06
013f8     D0 DA B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 32 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 28 E2 FA | 	rdword	local06, objptr
0140c     02 28 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 28 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 2C 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     16 2B 02 F6 | 	mov	local07, local08
01434     15 29 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 28 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 28 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 34 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1A 29 02 F6 | 	mov	local06, local12
01470     14 13 02 F6 | 	mov	arg01, local06
01474     24 DA B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 32 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 28 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     14 13 02 F6 | 	mov	arg01, local06
014d0     C8 D9 B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 32 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 28 02 FB | 	rdlong	local06, objptr
014e8     14 35 22 F6 | 	not	local12, local06
014ec     F2 34 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 34 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 28 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     14 C8 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 28 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     04 C8 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 24 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     D8 F5 B1 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     B0 F5 B1 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     88 F5 B1 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 1E 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 20 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     10 13 02 F6 | 	mov	arg01, local02
01650     E0 EA B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     10 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     30 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 22 02 F6 | 	mov	local03, result1
0166c     10 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     20 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 22 06 F1 | 	add	local03, ##49152
01680     0F 22 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     11 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     0F 23 02 F6 | 	mov	local03, local01
016a4     02 22 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 22 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     11 15 62 FC | 	wrlong	arg02, local03
016c0     0F 23 02 F6 | 	mov	local03, local01
016c4     02 22 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 22 02 F1 | 	add	local03, objptr
016d0     10 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     84 EA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     11 FB 61 FC | 	wrlong	result1, local03
016e4     01 1E 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 20 06 F1 | 	add	local02, #1
016ec     07 20 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 1E 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     0F 23 02 F6 | 	mov	local03, local01
01704     02 22 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 22 02 F1 | 	add	local03, objptr
01714     11 01 68 FC | 	wrlong	#0, local03
01718     0F 23 02 F6 | 	mov	local03, local01
0171c     02 22 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 22 02 F1 | 	add	local03, objptr
01728     11 01 68 FC | 	wrlong	#0, local03
0172c     01 1E 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     2F 4A 05 F6 | 	mov	COUNT_, #47
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     7C F0 07 F1 | 	add	ptra, ##636
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     E8 15 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     20 15 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 1E 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 20 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     10 23 02 F6 | 	mov	local03, local02
017c4     02 22 66 F0 | 	shl	local03, #2
017c8     A7 22 02 F1 | 	add	local03, fp
017cc     11 01 68 FC | 	wrlong	#0, local03
017d0     01 20 06 F1 | 	add	local02, #1
017d4     7E 20 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 20 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     10 25 02 F6 | 	mov	local04, local02
017f4     03 24 66 F0 | 	shl	local04, #3
017f8     F2 24 02 F1 | 	add	local04, objptr
017fc     80 01 00 FF 
01800     28 17 06 F6 | 	mov	arg03, ##@LR__5019
01804     12 17 62 FC | 	wrlong	arg03, local04
01808     10 25 02 F6 | 	mov	local04, local02
0180c     03 24 66 F0 | 	shl	local04, #3
01810     F2 26 02 F6 | 	mov	local05, objptr
01814     F2 24 02 F1 | 	add	local04, objptr
01818     00 28 06 F6 | 	mov	local06, #0
0181c     04 24 06 F1 | 	add	local04, #4
01820     12 01 68 FC | 	wrlong	#0, local04
01824     01 20 06 F1 | 	add	local02, #1
01828     7E 20 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     10 15 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     48 14 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     80 01 00 FF 
01860     29 25 06 F6 | 	mov	local04, ##@LR__5020
01864     1A 00 00 FF 
01868     D8 E5 05 F1 | 	add	objptr, ##13784
0186c     F2 24 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     D8 E5 85 F1 | 	sub	objptr, ##13784
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 2B 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     15 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 2A 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 2B 8A F1 | 	sub	local07, arg01 wz
0189c     51 00 00 FF 
018a0     F8 E5 05 F1 | 	add	objptr, ##41976
018a4     F2 2A 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     51 00 00 FF 
018ac     F8 E5 85 F1 | 	sub	objptr, ##41976
018b0     60 24 90 AD |  if_e	jmp	#LR__0198
018b4     00 2C 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 20 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 2B 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     15 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 2A 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 2B 82 F1 | 	sub	local07, arg01
018e8     15 2F 02 F6 | 	mov	local09, local07
018ec     01 2E 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     17 21 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     10 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     C8 10 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     80 01 00 FF 
01920     2A 15 06 F6 | 	mov	arg02, ##@LR__5021
01924     4C EF B1 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 2C 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     10 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     88 10 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     80 01 00 FF 
01960     2C 15 06 F6 | 	mov	arg02, ##@LR__5022
01964     0C EF B1 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 2C 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     10 25 02 F6 | 	mov	local04, local02
01978     03 24 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 26 02 F6 | 	mov	local05, objptr
01988     F2 24 02 F1 | 	add	local04, objptr
0198c     04 24 06 F1 | 	add	local04, #4
01990     12 2D 62 FC | 	wrlong	local08, local04
01994     01 20 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 20 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     10 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     18 10 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     80 01 00 FF 
019d0     2E 31 06 F6 | 	mov	local10, ##@LR__5023
019d4     18 15 02 F6 | 	mov	arg02, local10
019d8     98 EE B1 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     10 27 02 F6 | 	mov	local05, local02
019e8     03 26 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 28 02 F6 | 	mov	local06, objptr
019f8     F2 26 02 F1 | 	add	local05, objptr
019fc     04 26 06 F1 | 	add	local05, #4
01a00     13 33 02 FB | 	rdlong	local11, local05
01a04     04 26 86 F1 | 	sub	local05, #4
01a08     19 35 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     51 00 00 FF 
01a1c     F8 E5 05 F1 | 	add	objptr, ##41976
01a20     F2 36 02 FB | 	rdlong	local13, objptr
01a24     51 00 00 FF 
01a28     F8 E5 85 F1 | 	sub	objptr, ##41976
01a2c     1B 39 02 F6 | 	mov	local14, local13
01a30     1C 21 52 F2 | 	cmps	local02, local14 wc
01a34     01 20 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     51 00 00 FF 
01a40     F8 E5 05 F1 | 	add	objptr, ##41976
01a44     F2 24 02 FB | 	rdlong	local04, objptr
01a48     51 00 00 FF 
01a4c     F8 E5 85 F1 | 	sub	objptr, ##41976
01a50     12 21 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 28 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     14 13 02 F6 | 	mov	arg01, local06
01a70     09 2B 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     15 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 2A 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 2B 82 F1 | 	sub	local07, arg01
01a88     15 27 02 F6 | 	mov	local05, local07
01a8c     13 15 02 F6 | 	mov	arg02, local05
01a90     10 15 82 F1 | 	sub	arg02, local02
01a94     14 13 02 F6 | 	mov	arg01, local06
01a98     B4 0E B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     B4 12 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     EC 11 B2 FD | 	call	#__system__LTrim_S
01aac     51 00 00 FF 
01ab0     FC E5 05 F1 | 	add	objptr, ##41980
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E0 E5 85 F1 | 	sub	objptr, ##13792
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 20 86 F1 | 	sub	local02, #1
01ad0     10 15 02 F6 | 	mov	arg02, local02
01ad4     F0 0D B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     78 12 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     B0 11 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     80 01 00 FF 
01b04     30 25 06 F6 | 	mov	local04, ##@LR__5024
01b08     51 00 00 FF 
01b0c     FC E5 05 F1 | 	add	objptr, ##41980
01b10     F2 24 62 FC | 	wrlong	local04, objptr
01b14     51 00 00 FF 
01b18     FC E5 85 F1 | 	sub	objptr, ##41980
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 24 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     51 00 00 FF 
01b40     FC E5 05 F1 | 	add	objptr, ##41980
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     51 00 00 FF 
01b4c     FC E5 85 F1 | 	sub	objptr, ##41980
01b50     80 01 00 FF 
01b54     31 29 06 F6 | 	mov	local06, ##@LR__5025
01b58     14 15 02 F6 | 	mov	arg02, local06
01b5c     14 ED B1 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 24 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     51 00 00 FF 
01ba0     FC E5 05 F1 | 	add	objptr, ##41980
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     51 00 00 FF 
01bac     FC E5 85 F1 | 	sub	objptr, ##41980
01bb0     80 01 00 FF 
01bb4     32 15 06 F6 | 	mov	arg02, ##@LR__5026
01bb8     B8 EC B1 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 24 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 24 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     51 00 00 FF 
01bf8     FC E5 05 F1 | 	add	objptr, ##41980
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     51 00 00 FF 
01c04     FC E5 85 F1 | 	sub	objptr, ##41980
01c08     80 01 00 FF 
01c0c     33 15 06 F6 | 	mov	arg02, ##@LR__5027
01c10     60 EC B1 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 24 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 24 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     51 00 00 FF 
01c50     FC E5 05 F1 | 	add	objptr, ##41980
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     51 00 00 FF 
01c5c     FC E5 85 F1 | 	sub	objptr, ##41980
01c60     80 01 00 FF 
01c64     34 15 06 F6 | 	mov	arg02, ##@LR__5028
01c68     08 EC B1 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 20 06 F6 | 	mov	local02, #0
01c94     01 3A 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 20 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     10 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     24 0D B2 FD | 	call	#__system__Mid_S
01cbc     FD 3C 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     1E 13 02 F6 | 	mov	arg01, local16
01cc4     2C 28 B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     1D 23 02 F6 | 	mov	local03, local15
01cd4     02 22 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 22 02 F1 | 	add	local03, fp
01ce0     11 21 62 FC | 	wrlong	local02, local03
01ce4     01 3A 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     51 00 00 FF 
01cf0     F8 E5 05 F1 | 	add	objptr, ##41976
01cf4     F2 24 02 FB | 	rdlong	local04, objptr
01cf8     51 00 00 FF 
01cfc     F8 E5 85 F1 | 	sub	objptr, ##41976
01d00     12 21 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     1D 23 02 F6 | 	mov	local03, local15
01d0c     02 22 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 30 02 F6 | 	mov	local10, fp
01d18     A7 22 02 F1 | 	add	local03, fp
01d1c     11 21 62 FC | 	wrlong	local02, local03
01d20     00 3E 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 20 06 F6 | 	mov	local02, #0
01d28     1D 41 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     20 21 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     10 23 02 F6 | 	mov	local03, local02
01d3c     02 22 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 22 02 F1 | 	add	local03, fp
01d48     11 27 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     04 E4 05 F1 | 	add	objptr, ##41988
01d54     F2 26 62 FC | 	wrlong	local05, objptr
01d58     10 23 02 F6 | 	mov	local03, local02
01d5c     01 22 06 F1 | 	add	local03, #1
01d60     02 22 66 F0 | 	shl	local03, #2
01d64     A7 30 02 F6 | 	mov	local10, fp
01d68     A7 22 02 F1 | 	add	local03, fp
01d6c     11 27 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 26 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 24 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##41988
01d88     01 24 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     E8 E5 05 F1 | 	add	objptr, ##13800
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##41988
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     24 0C B2 FD | 	call	#__system__Mid_S
01dbc     FD 42 02 F6 | 	mov	local19, result1
01dc0     80 01 00 FF 
01dc4     35 15 06 F6 | 	mov	arg02, ##@LR__5029
01dc8     21 13 02 F6 | 	mov	arg01, local19
01dcc     A4 EA B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     1F 31 02 F6 | 	mov	local10, local17
01ddc     03 30 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 30 02 F1 | 	add	local10, objptr
01dec     18 43 62 FC | 	wrlong	local19, local10
01df0     01 3E 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     E8 E5 05 F1 | 	add	objptr, ##13800
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 32 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     04 E4 85 F1 | 	sub	objptr, ##41988
01e30     19 35 02 F6 | 	mov	local12, local11
01e34     1A 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     A0 0B B2 FD | 	call	#__system__Mid_S
01e40     FD 42 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     80 01 00 FF 
01e48     36 15 06 F6 | 	mov	arg02, ##@LR__5030
01e4c     21 13 02 F6 | 	mov	arg01, local19
01e50     20 EA B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     1F 31 02 F6 | 	mov	local10, local17
01e60     03 30 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 30 02 F1 | 	add	local10, objptr
01e70     18 43 62 FC | 	wrlong	local19, local10
01e74     01 3E 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 20 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 24 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 32 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     19 13 02 F6 | 	mov	arg01, local11
01ed0     24 46 B0 FD | 	call	#_isdec
01ed4     FD 34 02 F6 | 	mov	local12, result1
01ed8     1A 29 22 F6 | 	not	local06, local12
01edc     00 28 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     1F 21 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     10 27 02 F6 | 	mov	local05, local02
01ef8     01 26 86 F1 | 	sub	local05, #1
01efc     03 26 66 F0 | 	shl	local05, #3
01f00     F2 26 02 F1 | 	add	local05, objptr
01f04     13 25 02 FB | 	rdlong	local04, local05
01f08     10 29 02 F6 | 	mov	local06, local02
01f0c     01 28 86 F1 | 	sub	local06, #1
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     04 28 06 F1 | 	add	local06, #4
01f1c     14 23 02 FB | 	rdlong	local03, local06
01f20     10 29 02 F6 | 	mov	local06, local02
01f24     03 28 66 F0 | 	shl	local06, #3
01f28     F2 34 02 F6 | 	mov	local12, objptr
01f2c     F2 28 02 F1 | 	add	local06, objptr
01f30     14 25 62 FC | 	wrlong	local04, local06
01f34     10 33 02 F6 | 	mov	local11, local02
01f38     19 37 02 F6 | 	mov	local13, local11
01f3c     03 36 66 F0 | 	shl	local13, #3
01f40     F2 36 02 F1 | 	add	local13, objptr
01f44     04 36 06 F1 | 	add	local13, #4
01f48     1B 23 62 FC | 	wrlong	local03, local13
01f4c     01 20 86 F1 | 	sub	local02, #1
01f50     01 20 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     80 01 00 FF 
01f5c     37 25 06 F6 | 	mov	local04, ##@LR__5031
01f60     F2 24 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 3E 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 20 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     10 27 02 F6 | 	mov	local05, local02
01f78     03 26 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 26 02 F1 | 	add	local05, objptr
01f88     13 13 02 FB | 	rdlong	arg01, local05
01f8c     80 01 00 FF 
01f90     39 15 06 F6 | 	mov	arg02, ##@LR__5032
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     D4 E8 B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 20 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     10 45 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     10 31 02 F6 | 	mov	local10, local02
01fb4     01 30 06 F1 | 	add	local10, #1
01fb8     03 30 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 30 02 F1 | 	add	local10, objptr
01fc8     18 43 02 FB | 	rdlong	local19, local10
01fcc     22 31 02 F6 | 	mov	local10, local20
01fd0     03 30 66 F0 | 	shl	local10, #3
01fd4     F2 30 02 F1 | 	add	local10, objptr
01fd8     22 33 02 F6 | 	mov	local11, local20
01fdc     19 39 02 F6 | 	mov	local14, local11
01fe0     03 38 66 F0 | 	shl	local14, #3
01fe4     F2 38 02 F1 | 	add	local14, objptr
01fe8     1C 13 02 FB | 	rdlong	arg01, local14
01fec     21 35 02 F6 | 	mov	local12, local19
01ff0     1A 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     A8 E8 B1 FD | 	call	#__system___string_concat
02000     18 FB 61 FC | 	wrlong	result1, local10
02004     10 3B 02 F6 | 	mov	local15, local02
02008     01 3A 06 F1 | 	add	local15, #1
0200c     1F 47 02 F6 | 	mov	local21, local17
02010     01 46 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     23 3B 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     1D 27 02 F6 | 	mov	local05, local15
02024     01 26 06 F1 | 	add	local05, #1
02028     03 26 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 26 02 F1 | 	add	local05, objptr
02038     13 25 02 FB | 	rdlong	local04, local05
0203c     1D 29 02 F6 | 	mov	local06, local15
02040     01 28 06 F1 | 	add	local06, #1
02044     03 28 66 F0 | 	shl	local06, #3
02048     F2 28 02 F1 | 	add	local06, objptr
0204c     04 28 06 F1 | 	add	local06, #4
02050     14 23 02 FB | 	rdlong	local03, local06
02054     1D 29 02 F6 | 	mov	local06, local15
02058     03 28 66 F0 | 	shl	local06, #3
0205c     F2 34 02 F6 | 	mov	local12, objptr
02060     F2 28 02 F1 | 	add	local06, objptr
02064     14 25 62 FC | 	wrlong	local04, local06
02068     1D 33 02 F6 | 	mov	local11, local15
0206c     19 37 02 F6 | 	mov	local13, local11
02070     03 36 66 F0 | 	shl	local13, #3
02074     F2 36 02 F1 | 	add	local13, objptr
02078     04 36 06 F1 | 	add	local13, #4
0207c     1B 23 62 FC | 	wrlong	local03, local13
02080     01 3A 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 3E 86 F1 | 	sub	local17, #1
02094     80 01 00 FF 
02098     3B 15 06 F6 | 	mov	arg02, ##@LR__5033
0209c     21 13 02 F6 | 	mov	arg01, local19
020a0     D0 E7 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     80 01 00 FF 
020b4     3D 15 06 F6 | 	mov	arg02, ##@LR__5034
020b8     21 13 02 F6 | 	mov	arg01, local19
020bc     B4 E7 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 3E 06 51 |  if_ne	add	local17, #1
020c8     01 20 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     1F 21 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 20 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     10 27 02 F6 | 	mov	local05, local02
020dc     03 26 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 28 02 F6 | 	mov	local06, objptr
020ec     F2 26 02 F1 | 	add	local05, objptr
020f0     13 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     4C 08 B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     80 01 00 FF 
0210c     3F 15 06 F6 | 	mov	arg02, ##@LR__5035
02110     60 E7 B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     10 29 02 F6 | 	mov	local06, local02
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 34 02 F6 | 	mov	local12, objptr
02134     F2 28 02 F1 | 	add	local06, objptr
02138     14 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     7C 07 B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     80 01 00 FF 
02154     41 15 06 F6 | 	mov	arg02, ##@LR__5036
02158     18 E7 B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     10 31 02 F6 | 	mov	local10, local02
02168     03 30 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 30 02 F1 | 	add	local10, objptr
02178     10 39 02 F6 | 	mov	local14, local02
0217c     03 38 66 F0 | 	shl	local14, #3
02180     F2 38 02 F1 | 	add	local14, objptr
02184     1C 29 02 FB | 	rdlong	local06, local14
02188     10 37 02 F6 | 	mov	local13, local02
0218c     01 36 06 F1 | 	add	local13, #1
02190     03 36 66 F0 | 	shl	local13, #3
02194     F2 36 02 F1 | 	add	local13, objptr
02198     1B 35 02 FB | 	rdlong	local12, local13
0219c     10 49 02 F6 | 	mov	local22, local02
021a0     01 48 06 F1 | 	add	local22, #1
021a4     24 4B 02 F6 | 	mov	local23, local22
021a8     03 4A 66 F0 | 	shl	local23, #3
021ac     F2 4C 02 F6 | 	mov	local24, objptr
021b0     F2 4A 02 F1 | 	add	local23, objptr
021b4     25 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 2B 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 2A 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 2B 82 F1 | 	sub	local07, arg01
021d8     15 33 02 F6 | 	mov	local11, local07
021dc     01 32 86 F1 | 	sub	local11, #1
021e0     1A 13 02 F6 | 	mov	arg01, local12
021e4     19 15 02 F6 | 	mov	arg02, local11
021e8     64 07 B2 FD | 	call	#__system__Right_S
021ec     FD 34 02 F6 | 	mov	local12, result1
021f0     14 13 02 F6 | 	mov	arg01, local06
021f4     1A 15 02 F6 | 	mov	arg02, local12
021f8     AC E6 B1 FD | 	call	#__system___string_concat
021fc     FD 28 02 F6 | 	mov	local06, result1
02200     18 29 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     10 3B 02 F6 | 	mov	local15, local02
02208     01 3A 06 F1 | 	add	local15, #1
0220c     1F 4F 02 F6 | 	mov	local25, local17
02210     01 4E 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     27 3B 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     1D 27 02 F6 | 	mov	local05, local15
02224     01 26 06 F1 | 	add	local05, #1
02228     03 26 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 26 02 F1 | 	add	local05, objptr
02238     13 25 02 FB | 	rdlong	local04, local05
0223c     1D 29 02 F6 | 	mov	local06, local15
02240     01 28 06 F1 | 	add	local06, #1
02244     03 28 66 F0 | 	shl	local06, #3
02248     F2 28 02 F1 | 	add	local06, objptr
0224c     04 28 06 F1 | 	add	local06, #4
02250     14 23 02 FB | 	rdlong	local03, local06
02254     1D 29 02 F6 | 	mov	local06, local15
02258     03 28 66 F0 | 	shl	local06, #3
0225c     F2 34 02 F6 | 	mov	local12, objptr
02260     F2 28 02 F1 | 	add	local06, objptr
02264     14 25 62 FC | 	wrlong	local04, local06
02268     1D 33 02 F6 | 	mov	local11, local15
0226c     19 37 02 F6 | 	mov	local13, local11
02270     03 36 66 F0 | 	shl	local13, #3
02274     F2 36 02 F1 | 	add	local13, objptr
02278     04 36 06 F1 | 	add	local13, #4
0227c     1B 23 62 FC | 	wrlong	local03, local13
02280     01 3A 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 20 86 F1 | 	sub	local02, #1
02294     01 3E 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 20 06 F1 | 	add	local02, #1
0229c     1F 21 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 20 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     10 31 02 F6 | 	mov	local10, local02
022ac     03 30 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 30 02 F1 | 	add	local10, objptr
022bc     18 51 02 FB | 	rdlong	local26, local10
022c0     10 31 02 F6 | 	mov	local10, local02
022c4     01 30 06 F1 | 	add	local10, #1
022c8     03 30 66 F0 | 	shl	local10, #3
022cc     F2 30 02 F1 | 	add	local10, objptr
022d0     18 53 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     80 01 00 FF 
022d8     43 15 06 F6 | 	mov	arg02, ##@LR__5037
022dc     28 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     88 E5 B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     80 01 00 FF 
022f8     45 15 06 F6 | 	mov	arg02, ##@LR__5038
022fc     28 13 02 F6 | 	mov	arg01, local26
02300     70 E5 B1 FD | 	call	#__system___string_cmp
02304     FD 22 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     80 01 00 FF 
02310     47 29 06 F6 | 	mov	local06, ##@LR__5039
02314     28 13 02 F6 | 	mov	arg01, local26
02318     14 15 02 F6 | 	mov	arg02, local06
0231c     54 E5 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     80 01 00 FF 
0232c     49 35 06 F6 | 	mov	local12, ##@LR__5040
02330     28 13 02 F6 | 	mov	arg01, local26
02334     1A 15 02 F6 | 	mov	arg02, local12
02338     38 E5 B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     80 01 00 FF 
02348     4B 33 06 F6 | 	mov	local11, ##@LR__5041
0234c     19 35 02 F6 | 	mov	local12, local11
02350     28 13 02 F6 | 	mov	arg01, local26
02354     1A 15 02 F6 | 	mov	arg02, local12
02358     18 E5 B1 FD | 	call	#__system___string_cmp
0235c     FD 28 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     80 01 00 FF 
02368     4D 33 06 F6 | 	mov	local11, ##@LR__5042
0236c     28 13 02 F6 | 	mov	arg01, local26
02370     19 15 02 F6 | 	mov	arg02, local11
02374     FC E4 B1 FD | 	call	#__system___string_cmp
02378     FD 34 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     80 01 00 FF 
02384     4F 39 06 F6 | 	mov	local14, ##@LR__5043
02388     28 13 02 F6 | 	mov	arg01, local26
0238c     1C 15 02 F6 | 	mov	arg02, local14
02390     E0 E4 B1 FD | 	call	#__system___string_cmp
02394     FD 32 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     80 01 00 FF 
023a0     51 55 06 F6 | 	mov	local28, ##@LR__5044
023a4     2A 37 02 F6 | 	mov	local13, local28
023a8     29 13 02 F6 | 	mov	arg01, local27
023ac     1B 15 02 F6 | 	mov	arg02, local13
023b0     C0 E4 B1 FD | 	call	#__system___string_cmp
023b4     FD 38 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     80 01 00 FF 
023c0     53 55 06 F6 | 	mov	local28, ##@LR__5045
023c4     28 13 02 F6 | 	mov	arg01, local26
023c8     2A 15 02 F6 | 	mov	arg02, local28
023cc     A4 E4 B1 FD | 	call	#__system___string_cmp
023d0     FD 36 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     80 01 00 FF 
023dc     55 4B 06 F6 | 	mov	local23, ##@LR__5046
023e0     25 49 02 F6 | 	mov	local22, local23
023e4     29 13 02 F6 | 	mov	arg01, local27
023e8     24 15 02 F6 | 	mov	arg02, local22
023ec     84 E4 B1 FD | 	call	#__system___string_cmp
023f0     FD 54 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     80 01 00 FF 
023fc     57 4B 06 F6 | 	mov	local23, ##@LR__5047
02400     28 13 02 F6 | 	mov	arg01, local26
02404     25 15 02 F6 | 	mov	arg02, local23
02408     68 E4 B1 FD | 	call	#__system___string_cmp
0240c     FD 48 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     80 01 00 FF 
02418     59 57 06 F6 | 	mov	local29, ##@LR__5048
0241c     2B 4D 02 F6 | 	mov	local24, local29
02420     29 13 02 F6 | 	mov	arg01, local27
02424     26 15 02 F6 | 	mov	arg02, local24
02428     48 E4 B1 FD | 	call	#__system___string_cmp
0242c     FD 4A 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     80 01 00 FF 
02438     5B 59 06 F6 | 	mov	local30, ##@LR__5049
0243c     2C 57 02 F6 | 	mov	local29, local30
02440     28 13 02 F6 | 	mov	arg01, local26
02444     2B 15 02 F6 | 	mov	arg02, local29
02448     28 E4 B1 FD | 	call	#__system___string_cmp
0244c     FD 4C 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     80 01 00 FF 
02458     5D 5B 06 F6 | 	mov	local31, ##@LR__5050
0245c     2D 59 02 F6 | 	mov	local30, local31
02460     29 13 02 F6 | 	mov	arg01, local27
02464     2C 15 02 F6 | 	mov	arg02, local30
02468     08 E4 B1 FD | 	call	#__system___string_cmp
0246c     FD 56 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     10 31 02 F6 | 	mov	local10, local02
02478     03 30 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 30 02 F1 | 	add	local10, objptr
02488     29 35 02 F6 | 	mov	local12, local27
0248c     28 13 02 F6 | 	mov	arg01, local26
02490     1A 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     08 E4 B1 FD | 	call	#__system___string_concat
024a0     18 FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     10 3B 02 F6 | 	mov	local15, local02
024a8     01 3A 06 F1 | 	add	local15, #1
024ac     1F 5D 02 F6 | 	mov	local32, local17
024b0     01 5C 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     2E 3B 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     1D 27 02 F6 | 	mov	local05, local15
024c4     01 26 06 F1 | 	add	local05, #1
024c8     03 26 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 26 02 F1 | 	add	local05, objptr
024d8     13 25 02 FB | 	rdlong	local04, local05
024dc     1D 29 02 F6 | 	mov	local06, local15
024e0     01 28 06 F1 | 	add	local06, #1
024e4     03 28 66 F0 | 	shl	local06, #3
024e8     F2 28 02 F1 | 	add	local06, objptr
024ec     04 28 06 F1 | 	add	local06, #4
024f0     14 23 02 FB | 	rdlong	local03, local06
024f4     1D 29 02 F6 | 	mov	local06, local15
024f8     03 28 66 F0 | 	shl	local06, #3
024fc     F2 34 02 F6 | 	mov	local12, objptr
02500     F2 28 02 F1 | 	add	local06, objptr
02504     14 25 62 FC | 	wrlong	local04, local06
02508     1D 33 02 F6 | 	mov	local11, local15
0250c     19 39 02 F6 | 	mov	local14, local11
02510     1C 37 02 F6 | 	mov	local13, local14
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 54 02 F6 | 	mov	local28, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     04 36 06 F1 | 	add	local13, #4
02524     1B 23 62 FC | 	wrlong	local03, local13
02528     04 36 86 F1 | 	sub	local13, #4
0252c     01 3A 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 20 86 F1 | 	sub	local02, #1
02540     01 3E 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 20 06 F1 | 	add	local02, #1
02548     1F 21 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 20 06 F6 | 	mov	local02, #0
02554     1F 5F 02 F6 | 	mov	local33, local17
02558     01 5E 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     2F 21 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     10 31 02 F6 | 	mov	local10, local02
02568     03 30 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 30 02 F1 | 	add	local10, objptr
02578     10 35 02 F6 | 	mov	local12, local02
0257c     1A 33 02 F6 | 	mov	local11, local12
02580     19 39 02 F6 | 	mov	local14, local11
02584     03 38 66 F0 | 	shl	local14, #3
02588     F2 36 02 F6 | 	mov	local13, objptr
0258c     F2 38 02 F1 | 	add	local14, objptr
02590     1C 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     B8 07 B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     F0 06 B2 FD | 	call	#__system__LTrim_S
025a8     18 FB 61 FC | 	wrlong	result1, local10
025ac     01 20 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 20 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     10 27 02 F6 | 	mov	local05, local02
025c0     03 26 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 26 02 F1 | 	add	local05, objptr
025d0     13 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 2B 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 2A 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 2B 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     1F 25 02 F6 | 	mov	local04, local17
025f8     01 24 86 F1 | 	sub	local04, #1
025fc     12 21 0A F2 | 	cmp	local02, local04 wz
02600     01 3E 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     1F 25 02 F6 | 	mov	local04, local17
0260c     01 24 86 F1 | 	sub	local04, #1
02610     12 21 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     10 3B 02 F6 | 	mov	local15, local02
0261c     1F 61 02 F6 | 	mov	local34, local17
02620     01 60 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     30 3B 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     1D 27 02 F6 | 	mov	local05, local15
02630     01 26 06 F1 | 	add	local05, #1
02634     03 26 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 26 02 F1 | 	add	local05, objptr
02644     13 25 02 FB | 	rdlong	local04, local05
02648     1D 29 02 F6 | 	mov	local06, local15
0264c     01 28 06 F1 | 	add	local06, #1
02650     03 28 66 F0 | 	shl	local06, #3
02654     F2 28 02 F1 | 	add	local06, objptr
02658     04 28 06 F1 | 	add	local06, #4
0265c     14 23 02 FB | 	rdlong	local03, local06
02660     1D 31 02 F6 | 	mov	local10, local15
02664     18 29 02 F6 | 	mov	local06, local10
02668     03 28 66 F0 | 	shl	local06, #3
0266c     F2 34 02 F6 | 	mov	local12, objptr
02670     F2 28 02 F1 | 	add	local06, objptr
02674     14 25 62 FC | 	wrlong	local04, local06
02678     1D 33 02 F6 | 	mov	local11, local15
0267c     19 39 02 F6 | 	mov	local14, local11
02680     1C 37 02 F6 | 	mov	local13, local14
02684     03 36 66 F0 | 	shl	local13, #3
02688     F2 54 02 F6 | 	mov	local28, objptr
0268c     F2 36 02 F1 | 	add	local13, objptr
02690     04 36 06 F1 | 	add	local13, #4
02694     1B 23 62 FC | 	wrlong	local03, local13
02698     04 36 86 F1 | 	sub	local13, #4
0269c     01 3A 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 3E 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 20 56 F2 | 	cmps	local02, #1 wc
026b4     01 20 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 20 06 F1 | 	add	local02, #1
026bc     1F 25 02 F6 | 	mov	local04, local17
026c0     01 24 86 F1 | 	sub	local04, #1
026c4     12 21 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 3A 06 F6 | 	mov	local15, #0
026d0     1F 63 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     31 3B 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     1D 27 02 F6 | 	mov	local05, local15
026e0     03 26 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 26 02 F1 | 	add	local05, objptr
026f0     13 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     C4 01 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     80 01 00 FF 
0270c     5F 15 06 F6 | 	mov	arg02, ##@LR__5051
02710     60 E1 B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     1D 29 02 F6 | 	mov	local06, local15
02720     03 28 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 34 02 F6 | 	mov	local12, objptr
02730     F2 28 02 F1 | 	add	local06, objptr
02734     14 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     08 02 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     80 01 00 FF 
02750     61 15 06 F6 | 	mov	arg02, ##@LR__5052
02754     1C E1 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     1D 31 02 F6 | 	mov	local10, local15
02764     03 30 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 30 02 F1 | 	add	local10, objptr
02774     1D 33 02 F6 | 	mov	local11, local15
02778     19 39 02 F6 | 	mov	local14, local11
0277c     03 38 66 F0 | 	shl	local14, #3
02780     F2 36 02 F6 | 	mov	local13, objptr
02784     F2 38 02 F1 | 	add	local14, objptr
02788     1C 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     40 04 B2 FD | 	call	#__system__LCase_S
02798     18 FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 3A 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 20 06 F6 | 	mov	local02, #0
027a8     1F 65 02 F6 | 	mov	local36, local17
027ac     01 64 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     32 21 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     10 31 02 F6 | 	mov	local10, local02
027c0     03 30 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 30 02 F1 | 	add	local10, objptr
027d0     04 30 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     18 FF 6B FC | 	wrlong	##-1, local10
027dc     01 20 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     F4 3C B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 66 06 56 |  if_ne	mov	local37, #1
0280c     00 66 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     80 01 00 FF 
02828     63 15 06 F6 | 	mov	arg02, ##@LR__5053
0282c     44 E0 B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 66 06 A6 |  if_e	mov	local37, #1
02838     00 20 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     80 01 00 FF 
02858     68 15 06 F6 | 	mov	arg02, ##@LR__5054
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     0C E0 B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 20 06 F1 | 	add	local02, #1
02874     1F 21 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     1F 21 52 F2 | 	cmps	local02, local17 wc
02880     10 67 02 C6 |  if_b	mov	local37, local02
02884     01 66 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     33 29 02 F6 | 	mov	local06, local37
02894     03 28 66 F0 | 	shl	local06, #3
02898     F2 34 02 F6 | 	mov	local12, objptr
0289c     F2 28 02 F1 | 	add	local06, objptr
028a0     14 15 02 FB | 	rdlong	arg02, local06
028a4     80 01 00 FF 
028a8     6D 17 06 F6 | 	mov	arg03, ##@LR__5055
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     54 05 B2 FD | 	call	#__system__Instr
028bc     FD 68 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 68 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     33 27 02 F6 | 	mov	local05, local37
028cc     03 26 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 26 02 F1 | 	add	local05, objptr
028dc     13 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 2B 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     15 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 2A 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 2B 82 F1 | 	sub	local07, arg01
02900     15 69 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 3E 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     1F 21 02 F6 | 	mov	local02, local17
02910     33 6B 02 F6 | 	mov	local39, local37
02914     01 6A 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     10 27 02 F6 | 	mov	local05, local02
02928     01 26 86 F1 | 	sub	local05, #1
0292c     03 26 66 F0 | 	shl	local05, #3
02930     F2 26 02 F1 | 	add	local05, objptr
02934     13 25 02 FB | 	rdlong	local04, local05
02938     10 29 02 F6 | 	mov	local06, local02
0293c     01 28 86 F1 | 	sub	local06, #1
02940     03 28 66 F0 | 	shl	local06, #3
02944     F2 28 02 F1 | 	add	local06, objptr
02948     04 28 06 F1 | 	add	local06, #4
0294c     14 23 02 FB | 	rdlong	local03, local06
02950     10 29 02 F6 | 	mov	local06, local02
02954     03 28 66 F0 | 	shl	local06, #3
02958     F2 28 02 F1 | 	add	local06, objptr
0295c     14 25 62 FC | 	wrlong	local04, local06
02960     10 37 02 F6 | 	mov	local13, local02
02964     03 36 66 F0 | 	shl	local13, #3
02968     F2 36 02 F1 | 	add	local13, objptr
0296c     04 36 06 F1 | 	add	local13, #4
02970     1B 23 62 FC | 	wrlong	local03, local13
02974     01 20 86 F1 | 	sub	local02, #1
02978     35 21 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     33 31 02 F6 | 	mov	local10, local37
02984     01 30 06 F1 | 	add	local10, #1
02988     03 30 66 F0 | 	shl	local10, #3
0298c     F2 30 02 F1 | 	add	local10, objptr
02990     33 39 02 F6 | 	mov	local14, local37
02994     03 38 66 F0 | 	shl	local14, #3
02998     F2 38 02 F1 | 	add	local14, objptr
0299c     1C 29 02 FB | 	rdlong	local06, local14
029a0     33 55 02 F6 | 	mov	local28, local37
029a4     2A 49 02 F6 | 	mov	local22, local28
029a8     03 48 66 F0 | 	shl	local22, #3
029ac     F2 4A 02 F6 | 	mov	local23, objptr
029b0     F2 48 02 F1 | 	add	local22, objptr
029b4     24 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 2B 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 2A 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 2B 82 F1 | 	sub	local07, arg01
029d8     15 15 02 F6 | 	mov	arg02, local07
029dc     34 15 82 F1 | 	sub	arg02, local38
029e0     14 13 02 F6 | 	mov	arg01, local06
029e4     68 FF B1 FD | 	call	#__system__Right_S
029e8     18 FB 61 FC | 	wrlong	result1, local10
029ec     33 31 02 F6 | 	mov	local10, local37
029f0     03 30 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 30 02 F1 | 	add	local10, objptr
02a00     33 33 02 F6 | 	mov	local11, local37
02a04     19 39 02 F6 | 	mov	local14, local11
02a08     03 38 66 F0 | 	shl	local14, #3
02a0c     F2 36 02 F6 | 	mov	local13, objptr
02a10     F2 38 02 F1 | 	add	local14, objptr
02a14     1C 13 02 FB | 	rdlong	arg01, local14
02a18     34 35 02 F6 | 	mov	local12, local38
02a1c     1A 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     9C FE B1 FD | 	call	#__system__Left_S
02a2c     18 FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     33 27 02 F6 | 	mov	local05, local37
02a34     03 26 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 26 02 F1 | 	add	local05, objptr
02a44     13 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     70 FE B1 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     80 01 00 FF 
02a60     6F 15 06 F6 | 	mov	arg02, ##@LR__5056
02a64     0C DE B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     33 29 02 F6 | 	mov	local06, local37
02a74     03 28 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 34 02 F6 | 	mov	local12, objptr
02a84     F2 28 02 F1 | 	add	local06, objptr
02a88     14 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 2B 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 2A 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 2B 82 F1 | 	sub	local07, arg01
02aac     02 2A 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 3E 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     1F 21 02 F6 | 	mov	local02, local17
02abc     33 6D 02 F6 | 	mov	local40, local37
02ac0     01 6C 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     10 27 02 F6 | 	mov	local05, local02
02ad4     01 26 86 F1 | 	sub	local05, #1
02ad8     03 26 66 F0 | 	shl	local05, #3
02adc     F2 26 02 F1 | 	add	local05, objptr
02ae0     13 25 02 FB | 	rdlong	local04, local05
02ae4     10 29 02 F6 | 	mov	local06, local02
02ae8     01 28 86 F1 | 	sub	local06, #1
02aec     03 28 66 F0 | 	shl	local06, #3
02af0     F2 28 02 F1 | 	add	local06, objptr
02af4     04 28 06 F1 | 	add	local06, #4
02af8     14 23 02 FB | 	rdlong	local03, local06
02afc     10 29 02 F6 | 	mov	local06, local02
02b00     03 28 66 F0 | 	shl	local06, #3
02b04     F2 28 02 F1 | 	add	local06, objptr
02b08     14 25 62 FC | 	wrlong	local04, local06
02b0c     10 37 02 F6 | 	mov	local13, local02
02b10     03 36 66 F0 | 	shl	local13, #3
02b14     F2 36 02 F1 | 	add	local13, objptr
02b18     04 36 06 F1 | 	add	local13, #4
02b1c     1B 23 62 FC | 	wrlong	local03, local13
02b20     01 20 86 F1 | 	sub	local02, #1
02b24     36 21 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     33 31 02 F6 | 	mov	local10, local37
02b30     01 30 06 F1 | 	add	local10, #1
02b34     03 30 66 F0 | 	shl	local10, #3
02b38     F2 30 02 F1 | 	add	local10, objptr
02b3c     33 39 02 F6 | 	mov	local14, local37
02b40     03 38 66 F0 | 	shl	local14, #3
02b44     F2 38 02 F1 | 	add	local14, objptr
02b48     1C 29 02 FB | 	rdlong	local06, local14
02b4c     33 37 02 F6 | 	mov	local13, local37
02b50     1B 55 02 F6 | 	mov	local28, local13
02b54     2A 49 02 F6 | 	mov	local22, local28
02b58     03 48 66 F0 | 	shl	local22, #3
02b5c     F2 4A 02 F6 | 	mov	local23, objptr
02b60     F2 48 02 F1 | 	add	local22, objptr
02b64     24 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 2B 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     15 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 2A 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 2B 82 F1 | 	sub	local07, arg01
02b88     15 39 02 F6 | 	mov	local14, local07
02b8c     1C 33 02 F6 | 	mov	local11, local14
02b90     01 32 86 F1 | 	sub	local11, #1
02b94     19 35 02 F6 | 	mov	local12, local11
02b98     14 13 02 F6 | 	mov	arg01, local06
02b9c     1A 15 02 F6 | 	mov	arg02, local12
02ba0     AC FD B1 FD | 	call	#__system__Right_S
02ba4     18 FB 61 FC | 	wrlong	result1, local10
02ba8     33 31 02 F6 | 	mov	local10, local37
02bac     03 30 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 30 02 F1 | 	add	local10, objptr
02bbc     80 01 00 FF 
02bc0     71 29 06 F6 | 	mov	local06, ##@LR__5057
02bc4     18 29 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     33 31 02 F6 | 	mov	local10, local37
02bd4     03 30 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 30 02 F1 | 	add	local10, objptr
02be4     18 6F 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     80 01 00 FF 
02bec     73 15 06 F6 | 	mov	arg02, ##@LR__5058
02bf0     37 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     74 DC B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     80 01 00 FF 
02c0c     79 15 06 F6 | 	mov	arg02, ##@LR__5059
02c10     37 13 02 F6 | 	mov	arg01, local41
02c14     5C DC B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     80 01 00 FF 
02c24     80 15 06 F6 | 	mov	arg02, ##@LR__5060
02c28     37 13 02 F6 | 	mov	arg01, local41
02c2c     44 DC B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     33 27 02 F6 | 	mov	local05, local37
02c3c     01 26 06 F1 | 	add	local05, #1
02c40     03 26 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     13 13 02 FB | 	rdlong	arg01, local05
02c54     80 01 00 FF 
02c58     86 15 06 F6 | 	mov	arg02, ##@LR__5061
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     0C DC B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     33 31 02 F6 | 	mov	local10, local37
02c74     01 30 06 F1 | 	add	local10, #1
02c78     03 30 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 30 02 F1 | 	add	local10, objptr
02c88     80 01 00 FF 
02c8c     89 29 06 F6 | 	mov	local06, ##@LR__5062
02c90     18 29 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     33 27 02 F6 | 	mov	local05, local37
02cac     01 26 06 F1 | 	add	local05, #1
02cb0     03 26 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 26 02 F1 | 	add	local05, objptr
02cc0     13 13 02 FB | 	rdlong	arg01, local05
02cc4     80 01 00 FF 
02cc8     8B 15 06 F6 | 	mov	arg02, ##@LR__5063
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     9C DB B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     33 31 02 F6 | 	mov	local10, local37
02ce4     01 30 06 F1 | 	add	local10, #1
02ce8     03 30 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 30 02 F1 | 	add	local10, objptr
02cf8     80 01 00 FF 
02cfc     8F 29 06 F6 | 	mov	local06, ##@LR__5064
02d00     18 29 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     80 01 00 FF 
02d1c     91 15 06 F6 | 	mov	arg02, ##@LR__5065
02d20     37 13 02 F6 | 	mov	arg01, local41
02d24     4C DB B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     80 01 00 FF 
02d34     96 15 06 F6 | 	mov	arg02, ##@LR__5066
02d38     37 13 02 F6 | 	mov	arg01, local41
02d3c     34 DB B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     33 27 02 F6 | 	mov	local05, local37
02d4c     01 26 06 F1 | 	add	local05, #1
02d50     03 26 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 26 02 F1 | 	add	local05, objptr
02d60     13 13 02 FB | 	rdlong	arg01, local05
02d64     80 01 00 FF 
02d68     99 15 06 F6 | 	mov	arg02, ##@LR__5067
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     FC DA B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     33 31 02 F6 | 	mov	local10, local37
02d84     01 30 06 F1 | 	add	local10, #1
02d88     03 30 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 30 02 F1 | 	add	local10, objptr
02d98     80 01 00 FF 
02d9c     9F 29 06 F6 | 	mov	local06, ##@LR__5068
02da0     18 29 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     33 27 02 F6 | 	mov	local05, local37
02db0     01 26 06 F1 | 	add	local05, #1
02db4     03 26 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 26 02 F1 | 	add	local05, objptr
02dc4     13 13 02 FB | 	rdlong	arg01, local05
02dc8     80 01 00 FF 
02dcc     A1 15 06 F6 | 	mov	arg02, ##@LR__5069
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     98 DA B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     33 31 02 F6 | 	mov	local10, local37
02de8     01 30 06 F1 | 	add	local10, #1
02dec     03 30 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 30 02 F1 | 	add	local10, objptr
02dfc     80 01 00 FF 
02e00     AA 29 06 F6 | 	mov	local06, ##@LR__5070
02e04     18 29 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     33 27 02 F6 | 	mov	local05, local37
02e14     01 26 06 F1 | 	add	local05, #1
02e18     03 26 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 26 02 F1 | 	add	local05, objptr
02e28     13 13 02 FB | 	rdlong	arg01, local05
02e2c     80 01 00 FF 
02e30     AC 15 06 F6 | 	mov	arg02, ##@LR__5071
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     34 DA B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     33 31 02 F6 | 	mov	local10, local37
02e4c     01 30 06 F1 | 	add	local10, #1
02e50     03 30 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 30 02 F1 | 	add	local10, objptr
02e60     80 01 00 FF 
02e64     B5 29 06 F6 | 	mov	local06, ##@LR__5072
02e68     18 29 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     33 27 02 F6 | 	mov	local05, local37
02e78     01 26 06 F1 | 	add	local05, #1
02e7c     03 26 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 26 02 F1 | 	add	local05, objptr
02e8c     13 13 02 FB | 	rdlong	arg01, local05
02e90     80 01 00 FF 
02e94     B7 15 06 F6 | 	mov	arg02, ##@LR__5073
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     D0 D9 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     33 31 02 F6 | 	mov	local10, local37
02eb0     01 30 06 F1 | 	add	local10, #1
02eb4     03 30 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 30 02 F1 | 	add	local10, objptr
02ec4     80 01 00 FF 
02ec8     C0 29 06 F6 | 	mov	local06, ##@LR__5074
02ecc     18 29 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     33 27 02 F6 | 	mov	local05, local37
02edc     01 26 06 F1 | 	add	local05, #1
02ee0     03 26 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 26 02 F1 | 	add	local05, objptr
02ef0     13 13 02 FB | 	rdlong	arg01, local05
02ef4     80 01 00 FF 
02ef8     C2 15 06 F6 | 	mov	arg02, ##@LR__5075
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     6C D9 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     33 31 02 F6 | 	mov	local10, local37
02f14     01 30 06 F1 | 	add	local10, #1
02f18     03 30 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 30 02 F1 | 	add	local10, objptr
02f28     80 01 00 FF 
02f2c     C5 29 06 F6 | 	mov	local06, ##@LR__5076
02f30     18 29 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 20 06 F6 | 	mov	local02, #0
02f40     1F 71 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     38 21 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     10 31 02 F6 | 	mov	local10, local02
02f50     03 30 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 30 02 F1 | 	add	local10, objptr
02f60     10 33 02 F6 | 	mov	local11, local02
02f64     19 39 02 F6 | 	mov	local14, local11
02f68     1C 37 02 F6 | 	mov	local13, local14
02f6c     03 36 66 F0 | 	shl	local13, #3
02f70     F2 36 02 F1 | 	add	local13, objptr
02f74     1B 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     70 15 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 30 06 F1 | 	add	local10, #4
02f8c     18 FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     10 31 02 F6 | 	mov	local10, local02
02f94     03 30 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 30 02 F1 | 	add	local10, objptr
02fa4     04 30 06 F1 | 	add	local10, #4
02fa8     18 35 02 FB | 	rdlong	local12, local10
02fac     01 34 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     10 31 02 F6 | 	mov	local10, local02
02fc0     03 30 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 30 02 F1 | 	add	local10, objptr
02fd0     10 33 02 F6 | 	mov	local11, local02
02fd4     19 39 02 F6 | 	mov	local14, local11
02fd8     1C 37 02 F6 | 	mov	local13, local14
02fdc     03 36 66 F0 | 	shl	local13, #3
02fe0     F2 36 02 F1 | 	add	local13, objptr
02fe4     1B 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     4C 0D B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 30 06 F1 | 	add	local10, #4
02ffc     18 FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     10 31 02 F6 | 	mov	local10, local02
03004     03 30 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 30 02 F1 | 	add	local10, objptr
03014     04 30 06 F1 | 	add	local10, #4
03018     18 35 02 FB | 	rdlong	local12, local10
0301c     01 34 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     10 31 02 F6 | 	mov	local10, local02
03030     03 30 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 30 02 F1 | 	add	local10, objptr
03040     10 33 02 F6 | 	mov	local11, local02
03044     19 39 02 F6 | 	mov	local14, local11
03048     1C 37 02 F6 | 	mov	local13, local14
0304c     03 36 66 F0 | 	shl	local13, #3
03050     F2 36 02 F1 | 	add	local13, objptr
03054     1B 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     81 01 00 FF 
03064     9A 14 06 F6 | 	mov	arg02, ##@LR__5153
03068     08 D8 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 30 06 F1 | 	add	local10, #4
03080     18 FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     10 31 02 F6 | 	mov	local10, local02
03088     03 30 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 30 02 F1 | 	add	local10, objptr
03098     04 30 06 F1 | 	add	local10, #4
0309c     18 35 02 FB | 	rdlong	local12, local10
030a0     01 34 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     10 31 02 F6 | 	mov	local10, local02
030b4     03 30 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 30 02 F1 | 	add	local10, objptr
030c4     10 33 02 F6 | 	mov	local11, local02
030c8     19 39 02 F6 | 	mov	local14, local11
030cc     1C 37 02 F6 | 	mov	local13, local14
030d0     03 36 66 F0 | 	shl	local13, #3
030d4     F2 36 02 F1 | 	add	local13, objptr
030d8     1B 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     0C 16 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 30 06 F1 | 	add	local10, #4
030f0     18 FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     10 31 02 F6 | 	mov	local10, local02
030f8     03 30 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 30 02 F1 | 	add	local10, objptr
03108     04 30 06 F1 | 	add	local10, #4
0310c     18 35 02 FB | 	rdlong	local12, local10
03110     01 34 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     10 31 02 F6 | 	mov	local10, local02
03124     03 30 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 30 02 F1 | 	add	local10, objptr
03134     10 33 02 F6 | 	mov	local11, local02
03138     19 39 02 F6 | 	mov	local14, local11
0313c     1C 37 02 F6 | 	mov	local13, local14
03140     03 36 66 F0 | 	shl	local13, #3
03144     F2 54 02 F6 | 	mov	local28, objptr
03148     F2 36 02 F1 | 	add	local13, objptr
0314c     1B 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     F8 24 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 30 06 F1 | 	add	local10, #4
03164     18 FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     10 31 02 F6 | 	mov	local10, local02
0316c     03 30 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 30 02 F1 | 	add	local10, objptr
0317c     04 30 06 F1 | 	add	local10, #4
03180     18 35 02 FB | 	rdlong	local12, local10
03184     01 34 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     10 31 02 F6 | 	mov	local10, local02
03198     03 30 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 30 02 F1 | 	add	local10, objptr
031a8     10 33 02 F6 | 	mov	local11, local02
031ac     19 39 02 F6 | 	mov	local14, local11
031b0     03 38 66 F0 | 	shl	local14, #3
031b4     F2 36 02 F6 | 	mov	local13, objptr
031b8     F2 38 02 F1 | 	add	local14, objptr
031bc     1C 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     BC 0F B0 FD | 	call	#_isnotename
031cc     04 30 06 F1 | 	add	local10, #4
031d0     18 FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     10 31 02 F6 | 	mov	local10, local02
031d8     03 30 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 30 02 F1 | 	add	local10, objptr
031e8     04 30 06 F1 | 	add	local10, #4
031ec     18 29 02 FB | 	rdlong	local06, local10
031f0     01 28 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     10 27 02 F6 | 	mov	local05, local02
03204     03 26 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 26 02 F1 | 	add	local05, objptr
03214     04 26 06 F1 | 	add	local05, #4
03218     13 35 02 FB | 	rdlong	local12, local05
0321c     1A 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     F0 33 B0 FD | 	call	#_getnoteval
0322c     FD 72 02 F6 | 	mov	local43, result1
03230     10 31 02 F6 | 	mov	local10, local02
03234     03 30 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 30 02 F1 | 	add	local10, objptr
03244     39 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     6C F8 B1 FD | 	call	#__system__str_S
03254     18 FB 61 FC | 	wrlong	result1, local10
03258     10 25 02 F6 | 	mov	local04, local02
0325c     12 23 02 F6 | 	mov	local03, local04
03260     11 31 02 F6 | 	mov	local10, local03
03264     03 30 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 30 02 F1 | 	add	local10, objptr
03274     04 30 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     18 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     10 31 02 F6 | 	mov	local10, local02
03290     03 30 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 30 02 F1 | 	add	local10, objptr
032a0     10 39 02 F6 | 	mov	local14, local02
032a4     03 38 66 F0 | 	shl	local14, #3
032a8     F2 38 02 F1 | 	add	local14, objptr
032ac     1C 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     64 0D B0 FD | 	call	#_ischannel
032bc     04 30 06 F1 | 	add	local10, #4
032c0     18 FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     10 31 02 F6 | 	mov	local10, local02
032c8     03 30 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 30 02 F1 | 	add	local10, objptr
032d8     04 30 06 F1 | 	add	local10, #4
032dc     18 29 02 FB | 	rdlong	local06, local10
032e0     01 28 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     10 31 02 F6 | 	mov	local10, local02
032f4     03 30 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 30 02 F1 | 	add	local10, objptr
03304     10 33 02 F6 | 	mov	local11, local02
03308     19 39 02 F6 | 	mov	local14, local11
0330c     03 38 66 F0 | 	shl	local14, #3
03310     F2 36 02 F6 | 	mov	local13, objptr
03314     F2 38 02 F1 | 	add	local14, objptr
03318     1C 13 02 FB | 	rdlong	arg01, local14
0331c     01 34 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     20 F6 B1 FD | 	call	#__system__Right_S
03330     18 FB 61 FC | 	wrlong	result1, local10
03334     10 25 02 F6 | 	mov	local04, local02
03338     12 23 02 F6 | 	mov	local03, local04
0333c     11 31 02 F6 | 	mov	local10, local03
03340     03 30 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 30 02 F1 | 	add	local10, objptr
03350     04 30 06 F1 | 	add	local10, #4
03354     18 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     10 31 02 F6 | 	mov	local10, local02
03368     03 30 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 30 02 F1 | 	add	local10, objptr
03378     10 33 02 F6 | 	mov	local11, local02
0337c     19 39 02 F6 | 	mov	local14, local11
03380     03 38 66 F0 | 	shl	local14, #3
03384     F2 36 02 F6 | 	mov	local13, objptr
03388     F2 38 02 F1 | 	add	local14, objptr
0338c     1C 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     6C 0D B0 FD | 	call	#_isconstant
0339c     04 30 06 F1 | 	add	local10, #4
033a0     18 FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     10 31 02 F6 | 	mov	local10, local02
033a8     03 30 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 30 02 F1 | 	add	local10, objptr
033b8     04 30 06 F1 | 	add	local10, #4
033bc     18 35 02 FB | 	rdlong	local12, local10
033c0     01 34 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     10 31 02 F6 | 	mov	local10, local02
033d4     03 30 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 30 02 F1 | 	add	local10, objptr
033e4     10 35 02 F6 | 	mov	local12, local02
033e8     1A 33 02 F6 | 	mov	local11, local12
033ec     19 39 02 F6 | 	mov	local14, local11
033f0     03 38 66 F0 | 	shl	local14, #3
033f4     F2 36 02 F6 | 	mov	local13, objptr
033f8     F2 38 02 F1 | 	add	local14, objptr
033fc     04 38 06 F1 | 	add	local14, #4
03400     1C 13 02 FB | 	rdlong	arg01, local14
03404     04 38 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 74 C6 C9 |  if_b	decod	local44, #31
03418     00 74 06 36 |  if_ae	mov	local44, #0
0341c     DC FB B1 FD | 	call	#__system___float_fromuns
03420     3A FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     94 F6 B1 FD | 	call	#__system__str_S
0342c     18 FB 61 FC | 	wrlong	result1, local10
03430     10 25 02 F6 | 	mov	local04, local02
03434     12 23 02 F6 | 	mov	local03, local04
03438     11 31 02 F6 | 	mov	local10, local03
0343c     03 30 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 30 02 F1 | 	add	local10, objptr
0344c     04 30 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     18 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     10 27 02 F6 | 	mov	local05, local02
03468     03 26 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 26 02 F1 | 	add	local05, objptr
03478     13 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     E0 29 B0 FD | 	call	#_isnum
03488     FD 76 02 F6 | 	mov	local45, result1
0348c     10 27 02 F6 | 	mov	local05, local02
03490     03 26 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 26 02 F1 | 	add	local05, objptr
034a0     13 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     A4 2D B0 FD | 	call	#_isint
034b0     FD 78 02 F6 | 	mov	local46, result1
034b4     10 27 02 F6 | 	mov	local05, local02
034b8     03 26 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 26 02 F1 | 	add	local05, objptr
034c8     13 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     20 30 B0 FD | 	call	#_isdec
034d8     FD 7A 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 76 0E F2 | 	cmp	local45, #0 wz
034e0     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     10 25 02 F6 | 	mov	local04, local02
034f0     12 23 02 F6 | 	mov	local03, local04
034f4     11 31 02 F6 | 	mov	local10, local03
034f8     03 30 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 30 02 F1 | 	add	local10, objptr
03508     04 30 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     18 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 76 0E F2 | 	cmp	local45, #0 wz
03524     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03528     3D 25 22 56 |  if_ne	not	local04, local47
0352c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     10 25 02 F6 | 	mov	local04, local02
03538     12 23 02 F6 | 	mov	local03, local04
0353c     11 31 02 F6 | 	mov	local10, local03
03540     03 30 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 30 02 F1 | 	add	local10, objptr
03550     04 30 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     18 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 76 0E F2 | 	cmp	local45, #0 wz
0356c     3C 25 22 56 |  if_ne	not	local04, local46
03570     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03574     3D 23 22 56 |  if_ne	not	local03, local47
03578     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     10 25 02 F6 | 	mov	local04, local02
03584     12 23 02 F6 | 	mov	local03, local04
03588     11 31 02 F6 | 	mov	local10, local03
0358c     03 30 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 30 02 F1 | 	add	local10, objptr
0359c     04 30 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     18 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     10 27 02 F6 | 	mov	local05, local02
035b8     03 26 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 26 02 F1 | 	add	local05, objptr
035c8     13 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     E0 2F B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     10 31 02 F6 | 	mov	local10, local02
035e4     03 30 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 30 02 F1 | 	add	local10, objptr
035f4     04 30 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     18 07 68 FC | 	wrlong	##515, local10
03600     10 25 02 F6 | 	mov	local04, local02
03604     12 23 02 F6 | 	mov	local03, local04
03608     11 31 02 F6 | 	mov	local10, local03
0360c     03 30 66 F0 | 	shl	local10, #3
03610     F2 30 02 F1 | 	add	local10, objptr
03614     10 39 02 F6 | 	mov	local14, local02
03618     03 38 66 F0 | 	shl	local14, #3
0361c     F2 38 02 F1 | 	add	local14, objptr
03620     1C 29 02 FB | 	rdlong	local06, local14
03624     02 34 06 F6 | 	mov	local12, #2
03628     10 49 02 F6 | 	mov	local22, local02
0362c     24 4B 02 F6 | 	mov	local23, local22
03630     03 4A 66 F0 | 	shl	local23, #3
03634     F2 4C 02 F6 | 	mov	local24, objptr
03638     F2 4A 02 F1 | 	add	local23, objptr
0363c     25 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 2B 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     15 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 2A 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 2B 82 F1 | 	sub	local07, arg01
03660     15 37 02 F6 | 	mov	local13, local07
03664     1B 39 02 F6 | 	mov	local14, local13
03668     02 38 86 F1 | 	sub	local14, #2
0366c     1C 33 02 F6 | 	mov	local11, local14
03670     14 13 02 F6 | 	mov	arg01, local06
03674     1A 15 02 F6 | 	mov	arg02, local12
03678     19 17 02 F6 | 	mov	arg03, local11
0367c     60 F3 B1 FD | 	call	#__system__Mid_S
03680     18 FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     10 23 02 F6 | 	mov	local03, local02
0368c     11 27 02 F6 | 	mov	local05, local03
03690     03 26 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 26 02 F1 | 	add	local05, objptr
036a0     13 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     44 25 B0 FD | 	call	#_isname
036b0     FD 24 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     10 25 02 F6 | 	mov	local04, local02
036bc     12 23 02 F6 | 	mov	local03, local04
036c0     11 31 02 F6 | 	mov	local10, local03
036c4     03 30 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 30 02 F1 | 	add	local10, objptr
036d4     04 30 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     18 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 20 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     1F 31 02 F6 | 	mov	local10, local17
036f4     03 30 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 30 02 F1 | 	add	local10, objptr
03704     04 30 06 F1 | 	add	local10, #4
03708     18 FD 6B FC | 	wrlong	#510, local10
0370c     1F 31 02 F6 | 	mov	local10, local17
03710     03 30 66 F0 | 	shl	local10, #3
03714     F2 26 02 F6 | 	mov	local05, objptr
03718     F2 30 02 F1 | 	add	local10, objptr
0371c     80 01 00 FF 
03720     C7 29 06 F6 | 	mov	local06, ##@LR__5077
03724     18 29 62 FC | 	wrlong	local06, local10
03728     10 00 00 FF 
0372c     54 E4 05 F1 | 	add	objptr, ##8276
03730     F2 3E 62 FC | 	wrlong	local17, objptr
03734     45 00 00 FF 
03738     60 E4 85 F1 | 	sub	objptr, ##35424
0373c                 | ' 
0373c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0373c                 | ' 
0373c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0373c                 | '  
0373c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0373c     80 01 00 FF 
03740     C8 31 06 F6 | 	mov	local10, ##@LR__5078
03744     37 13 02 F6 | 	mov	arg01, local41
03748     18 15 02 F6 | 	mov	arg02, local10
0374c     24 D1 B1 FD | 	call	#__system___string_cmp
03750     00 FA 0D F2 | 	cmp	result1, #0 wz
03754     FC 00 90 AD |  if_e	jmp	#LR__0184
03758     80 01 00 FF 
0375c     CD 27 06 F6 | 	mov	local05, ##@LR__5079
03760     13 31 02 F6 | 	mov	local10, local05
03764     37 13 02 F6 | 	mov	arg01, local41
03768     18 15 02 F6 | 	mov	arg02, local10
0376c     04 D1 B1 FD | 	call	#__system___string_cmp
03770     00 FA 0D F2 | 	cmp	result1, #0 wz
03774     DC 00 90 AD |  if_e	jmp	#LR__0184
03778     80 01 00 FF 
0377c     D2 29 06 F6 | 	mov	local06, ##@LR__5080
03780     14 27 02 F6 | 	mov	local05, local06
03784     37 13 02 F6 | 	mov	arg01, local41
03788     13 15 02 F6 | 	mov	arg02, local05
0378c     E4 D0 B1 FD | 	call	#__system___string_cmp
03790     FD 30 0A F6 | 	mov	local10, result1 wz
03794     BC 00 90 AD |  if_e	jmp	#LR__0184
03798     80 01 00 FF 
0379c     D7 35 06 F6 | 	mov	local12, ##@LR__5081
037a0     1A 29 02 F6 | 	mov	local06, local12
037a4     37 13 02 F6 | 	mov	arg01, local41
037a8     14 15 02 F6 | 	mov	arg02, local06
037ac     C4 D0 B1 FD | 	call	#__system___string_cmp
037b0     FD 26 0A F6 | 	mov	local05, result1 wz
037b4     9C 00 90 AD |  if_e	jmp	#LR__0184
037b8     80 01 00 FF 
037bc     DB 33 06 F6 | 	mov	local11, ##@LR__5082
037c0     19 35 02 F6 | 	mov	local12, local11
037c4     37 13 02 F6 | 	mov	arg01, local41
037c8     1A 15 02 F6 | 	mov	arg02, local12
037cc     A4 D0 B1 FD | 	call	#__system___string_cmp
037d0     FD 28 0A F6 | 	mov	local06, result1 wz
037d4     7C 00 90 AD |  if_e	jmp	#LR__0184
037d8     80 01 00 FF 
037dc     DF 39 06 F6 | 	mov	local14, ##@LR__5083
037e0     1C 33 02 F6 | 	mov	local11, local14
037e4     37 13 02 F6 | 	mov	arg01, local41
037e8     19 15 02 F6 | 	mov	arg02, local11
037ec     84 D0 B1 FD | 	call	#__system___string_cmp
037f0     FD 34 0A F6 | 	mov	local12, result1 wz
037f4     5C 00 90 AD |  if_e	jmp	#LR__0184
037f8     80 01 00 FF 
037fc     E2 37 06 F6 | 	mov	local13, ##@LR__5084
03800     1B 39 02 F6 | 	mov	local14, local13
03804     37 13 02 F6 | 	mov	arg01, local41
03808     1C 15 02 F6 | 	mov	arg02, local14
0380c     64 D0 B1 FD | 	call	#__system___string_cmp
03810     FD 32 0A F6 | 	mov	local11, result1 wz
03814     3C 00 90 AD |  if_e	jmp	#LR__0184
03818     80 01 00 FF 
0381c     E6 37 06 F6 | 	mov	local13, ##@LR__5085
03820     37 13 02 F6 | 	mov	arg01, local41
03824     1B 15 02 F6 | 	mov	arg02, local13
03828     48 D0 B1 FD | 	call	#__system___string_cmp
0382c     FD 38 0A F6 | 	mov	local14, result1 wz
03830     20 00 90 AD |  if_e	jmp	#LR__0184
03834     80 01 00 FF 
03838     EC 49 06 F6 | 	mov	local22, ##@LR__5086
0383c     24 55 02 F6 | 	mov	local28, local22
03840     37 13 02 F6 | 	mov	arg01, local41
03844     2A 15 02 F6 | 	mov	arg02, local28
03848     28 D0 B1 FD | 	call	#__system___string_cmp
0384c     FD 36 0A F6 | 	mov	local13, result1 wz
03850     84 00 90 5D |  if_ne	jmp	#LR__0185
03854                 | LR__0184
03854     33 55 02 F6 | 	mov	local28, local37
03858     01 54 06 F1 | 	add	local28, #1
0385c     2A 49 02 F6 | 	mov	local22, local28
03860     24 4B 02 F6 | 	mov	local23, local22
03864     03 4A 66 F0 | 	shl	local23, #3
03868     35 00 00 FF 
0386c     0C E4 05 F1 | 	add	objptr, ##27148
03870     F2 4C 02 F6 | 	mov	local24, objptr
03874     F2 4A 02 F1 | 	add	local23, objptr
03878     04 4A 06 F1 | 	add	local23, #4
0387c     25 59 02 FB | 	rdlong	local30, local23
03880     04 4A 86 F1 | 	sub	local23, #4
03884     2C 57 02 F6 | 	mov	local29, local30
03888     01 00 00 FF 
0388c     04 56 0E F2 | 	cmp	local29, ##516 wz
03890     35 00 00 FF 
03894     0C E4 85 F1 | 	sub	objptr, ##27148
03898     3C 00 90 5D |  if_ne	jmp	#LR__0185
0389c     33 31 02 F6 | 	mov	local10, local37
038a0     01 30 06 F1 | 	add	local10, #1
038a4     03 30 66 F0 | 	shl	local10, #3
038a8     35 00 00 FF 
038ac     0C E4 05 F1 | 	add	objptr, ##27148
038b0     F2 26 02 F6 | 	mov	local05, objptr
038b4     F2 30 02 F1 | 	add	local10, objptr
038b8     01 00 00 FF 
038bc     03 28 06 F6 | 	mov	local06, ##515
038c0     04 30 06 F1 | 	add	local10, #4
038c4     01 00 80 FF 
038c8     18 07 68 FC | 	wrlong	##515, local10
038cc     04 30 86 F1 | 	sub	local10, #4
038d0     35 00 00 FF 
038d4     0C E4 85 F1 | 	sub	objptr, ##27148
038d8                 | LR__0185
038d8                 | ' 
038d8                 | ' ' determine a type of the line and compile it
038d8                 | ' 
038d8                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
038d8     35 00 00 FF 
038dc     0C E4 05 F1 | 	add	objptr, ##27148
038e0     F2 12 02 FB | 	rdlong	arg01, objptr
038e4     35 00 00 FF 
038e8     0C E4 85 F1 | 	sub	objptr, ##27148
038ec     08 2C B0 FD | 	call	#_isdec
038f0     00 FA 0D F2 | 	cmp	result1, #0 wz
038f4     30 00 90 AD |  if_e	jmp	#LR__0186
038f8     35 00 00 FF 
038fc     0C E4 05 F1 | 	add	objptr, ##27148
03900     F2 12 02 FB | 	rdlong	arg01, objptr
03904     35 00 00 FF 
03908     0C E4 85 F1 | 	sub	objptr, ##27148
0390c     00 14 06 F6 | 	mov	arg02, #0
03910     64 01 B2 FD | 	call	#__system____builtin_atoi
03914     51 00 00 FF 
03918     C4 E5 05 F1 | 	add	objptr, ##41924
0391c     F2 FA 61 FC | 	wrlong	result1, objptr
03920     51 00 00 FF 
03924     C4 E5 85 F1 | 	sub	objptr, ##41924
03928                 | LR__0186
03928                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03928     51 00 00 FF 
0392c     C4 E5 05 F1 | 	add	objptr, ##41924
03930     F2 24 02 FB | 	rdlong	local04, objptr
03934     51 00 00 FF 
03938     C4 E5 85 F1 | 	sub	objptr, ##41924
0393c     01 24 16 F2 | 	cmp	local04, #1 wc
03940     40 00 90 CD |  if_b	jmp	#LR__0187
03944     01 3E 0E F2 | 	cmp	local17, #1 wz
03948     37 00 00 AF 
0394c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03950     F2 26 02 AB |  if_e	rdlong	local05, objptr
03954     37 00 00 AF 
03958     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0395c     13 31 02 A6 |  if_e	mov	local10, local05
03960     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03964     1C 00 90 5D |  if_ne	jmp	#LR__0187
03968     51 00 00 FF 
0396c     C4 E5 05 F1 | 	add	objptr, ##41924
03970     F2 12 02 FB | 	rdlong	arg01, objptr
03974     51 00 00 FF 
03978     C4 E5 85 F1 | 	sub	objptr, ##41924
0397c     24 2D B0 FD | 	call	#_deleteline
03980     70 03 90 FD | 	jmp	#LR__0197
03984                 | LR__0187
03984                 | ' 
03984                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03984     37 00 00 FF 
03988     24 E4 05 F1 | 	add	objptr, ##28196
0398c     F2 24 0A FB | 	rdlong	local04, objptr wz
03990     37 00 00 FF 
03994     24 E4 85 F1 | 	sub	objptr, ##28196
03998     37 00 00 5F 
0399c     24 E4 05 51 |  if_ne	add	objptr, ##28196
039a0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039a4     37 00 00 5F 
039a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039ac     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
039b0     AC 00 90 5D |  if_ne	jmp	#LR__0189
039b4     35 00 00 FF 
039b8     20 E4 05 F1 | 	add	objptr, ##27168
039bc     F2 34 02 FB | 	rdlong	local12, objptr
039c0     35 00 00 FF 
039c4     20 E4 85 F1 | 	sub	objptr, ##27168
039c8     1B 34 0E F2 | 	cmp	local12, #27 wz
039cc     90 00 90 AD |  if_e	jmp	#LR__0189
039d0     51 00 00 FF 
039d4     C4 E5 05 F1 | 	add	objptr, ##41924
039d8     F2 12 02 FB | 	rdlong	arg01, objptr
039dc     1A 00 00 FF 
039e0     A0 E5 85 F1 | 	sub	objptr, ##13728
039e4     F2 16 02 FB | 	rdlong	arg03, objptr
039e8     37 00 00 FF 
039ec     24 E4 85 F1 | 	sub	objptr, ##28196
039f0     00 14 06 F6 | 	mov	arg02, #0
039f4     50 40 B0 FD | 	call	#_compile
039f8     FD 1E 0A F6 | 	mov	local01, result1 wz
039fc                 | '   err=compile(linenum,0,cont) 
039fc                 | '   if err<>0 then printerror(err): goto 101
039fc     0C 00 90 AD |  if_e	jmp	#LR__0188
03a00     0F 13 02 F6 | 	mov	arg01, local01
03a04     B4 98 B1 FD | 	call	#_printerror
03a08     08 03 90 FD | 	jmp	#LR__0198
03a0c                 | LR__0188
03a0c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03a0c     51 00 00 FF 
03a10     FC E5 05 F1 | 	add	objptr, ##41980
03a14     F2 12 02 FB | 	rdlong	arg01, objptr
03a18     51 00 00 FF 
03a1c     FC E5 85 F1 | 	sub	objptr, ##41980
03a20     80 01 00 FF 
03a24     EF 15 06 F6 | 	mov	arg02, ##@LR__5087
03a28     48 CE B1 FD | 	call	#__system___string_cmp
03a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a30     C0 02 90 AD |  if_e	jmp	#LR__0197
03a34     51 00 00 FF 
03a38     FC E5 05 F1 | 	add	objptr, ##41980
03a3c     F2 24 02 FB | 	rdlong	local04, objptr
03a40     1A 00 00 FF 
03a44     E0 E5 85 F1 | 	sub	objptr, ##13792
03a48     F2 24 62 FC | 	wrlong	local04, objptr
03a4c     08 E4 05 F1 | 	add	objptr, #8
03a50     F2 08 68 FC | 	wrlong	#4, objptr
03a54     37 00 00 FF 
03a58     24 E4 85 F1 | 	sub	objptr, ##28196
03a5c     54 DD 9F FD | 	jmp	#LR__0070
03a60                 | LR__0189
03a60                 | '       							
03a60                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03a60     37 00 00 FF 
03a64     24 E4 05 F1 | 	add	objptr, ##28196
03a68     F2 24 02 FB | 	rdlong	local04, objptr
03a6c     37 00 00 FF 
03a70     24 E4 85 F1 | 	sub	objptr, ##28196
03a74     01 24 0E F2 | 	cmp	local04, #1 wz
03a78     37 00 00 5F 
03a7c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a80     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a84     37 00 00 5F 
03a88     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a8c     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03a90     AC 00 90 5D |  if_ne	jmp	#LR__0191
03a94     35 00 00 FF 
03a98     18 E4 05 F1 | 	add	objptr, ##27160
03a9c     F2 34 02 FB | 	rdlong	local12, objptr
03aa0     35 00 00 FF 
03aa4     18 E4 85 F1 | 	sub	objptr, ##27160
03aa8     1B 34 0E F2 | 	cmp	local12, #27 wz
03aac     90 00 90 AD |  if_e	jmp	#LR__0191
03ab0     51 00 00 FF 
03ab4     C4 E5 05 F1 | 	add	objptr, ##41924
03ab8     F2 12 02 FB | 	rdlong	arg01, objptr
03abc     1A 00 00 FF 
03ac0     A0 E5 85 F1 | 	sub	objptr, ##13728
03ac4     F2 16 02 FB | 	rdlong	arg03, objptr
03ac8     37 00 00 FF 
03acc     24 E4 85 F1 | 	sub	objptr, ##28196
03ad0     00 14 06 F6 | 	mov	arg02, #0
03ad4     70 3F B0 FD | 	call	#_compile
03ad8     FD 1E 0A F6 | 	mov	local01, result1 wz
03adc                 | '   err=compile(linenum,0,cont) 
03adc                 | '   if err<>0 then printerror(err): goto 101
03adc     0C 00 90 AD |  if_e	jmp	#LR__0190
03ae0     0F 13 02 F6 | 	mov	arg01, local01
03ae4     D4 97 B1 FD | 	call	#_printerror
03ae8     28 02 90 FD | 	jmp	#LR__0198
03aec                 | LR__0190
03aec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03aec     51 00 00 FF 
03af0     FC E5 05 F1 | 	add	objptr, ##41980
03af4     F2 12 02 FB | 	rdlong	arg01, objptr
03af8     51 00 00 FF 
03afc     FC E5 85 F1 | 	sub	objptr, ##41980
03b00     80 01 00 FF 
03b04     F0 15 06 F6 | 	mov	arg02, ##@LR__5088
03b08     68 CD B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     E0 01 90 AD |  if_e	jmp	#LR__0197
03b14     51 00 00 FF 
03b18     FC E5 05 F1 | 	add	objptr, ##41980
03b1c     F2 24 02 FB | 	rdlong	local04, objptr
03b20     1A 00 00 FF 
03b24     E0 E5 85 F1 | 	sub	objptr, ##13792
03b28     F2 24 62 FC | 	wrlong	local04, objptr
03b2c     08 E4 05 F1 | 	add	objptr, #8
03b30     F2 08 68 FC | 	wrlong	#4, objptr
03b34     37 00 00 FF 
03b38     24 E4 85 F1 | 	sub	objptr, ##28196
03b3c     74 DC 9F FD | 	jmp	#LR__0070
03b40                 | LR__0191
03b40                 | ' 							 
03b40                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03b40     37 00 00 FF 
03b44     24 E4 05 F1 | 	add	objptr, ##28196
03b48     F2 24 0A FB | 	rdlong	local04, objptr wz
03b4c     37 00 00 FF 
03b50     24 E4 85 F1 | 	sub	objptr, ##28196
03b54     37 00 00 5F 
03b58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b5c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b60     37 00 00 5F 
03b64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b68     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03b6c     35 00 00 AF 
03b70     20 E4 05 A1 |  if_e	add	objptr, ##27168
03b74     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b78     35 00 00 AF 
03b7c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03b80     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b84     90 00 90 5D |  if_ne	jmp	#LR__0193
03b88     51 00 00 FF 
03b8c     C4 E5 05 F1 | 	add	objptr, ##41924
03b90     F2 12 02 FB | 	rdlong	arg01, objptr
03b94     1A 00 00 FF 
03b98     A0 E5 85 F1 | 	sub	objptr, ##13728
03b9c     F2 16 02 FB | 	rdlong	arg03, objptr
03ba0     37 00 00 FF 
03ba4     24 E4 85 F1 | 	sub	objptr, ##28196
03ba8     00 14 06 F6 | 	mov	arg02, #0
03bac     60 3F B0 FD | 	call	#_compile_assign
03bb0     FD 1E 0A F6 | 	mov	local01, result1 wz
03bb4                 | '   err=compile_assign(linenum,0,cont)
03bb4                 | '   if err<>0 then printerror(err): goto 101
03bb4     0C 00 90 AD |  if_e	jmp	#LR__0192
03bb8     0F 13 02 F6 | 	mov	arg01, local01
03bbc     FC 96 B1 FD | 	call	#_printerror
03bc0     50 01 90 FD | 	jmp	#LR__0198
03bc4                 | LR__0192
03bc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03bc4     51 00 00 FF 
03bc8     FC E5 05 F1 | 	add	objptr, ##41980
03bcc     F2 12 02 FB | 	rdlong	arg01, objptr
03bd0     51 00 00 FF 
03bd4     FC E5 85 F1 | 	sub	objptr, ##41980
03bd8     80 01 00 FF 
03bdc     F1 15 06 F6 | 	mov	arg02, ##@LR__5089
03be0     90 CC B1 FD | 	call	#__system___string_cmp
03be4     00 FA 0D F2 | 	cmp	result1, #0 wz
03be8     08 01 90 AD |  if_e	jmp	#LR__0197
03bec     51 00 00 FF 
03bf0     FC E5 05 F1 | 	add	objptr, ##41980
03bf4     F2 24 02 FB | 	rdlong	local04, objptr
03bf8     1A 00 00 FF 
03bfc     E0 E5 85 F1 | 	sub	objptr, ##13792
03c00     F2 24 62 FC | 	wrlong	local04, objptr
03c04     08 E4 05 F1 | 	add	objptr, #8
03c08     F2 08 68 FC | 	wrlong	#4, objptr
03c0c     37 00 00 FF 
03c10     24 E4 85 F1 | 	sub	objptr, ##28196
03c14     9C DB 9F FD | 	jmp	#LR__0070
03c18                 | LR__0193
03c18                 | '     							 
03c18                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03c18     37 00 00 FF 
03c1c     24 E4 05 F1 | 	add	objptr, ##28196
03c20     F2 24 02 FB | 	rdlong	local04, objptr
03c24     37 00 00 FF 
03c28     24 E4 85 F1 | 	sub	objptr, ##28196
03c2c     01 24 0E F2 | 	cmp	local04, #1 wz
03c30     37 00 00 5F 
03c34     24 E4 05 51 |  if_ne	add	objptr, ##28196
03c38     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03c3c     37 00 00 5F 
03c40     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03c44     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03c48     35 00 00 AF 
03c4c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03c50     F2 34 02 AB |  if_e	rdlong	local12, objptr
03c54     35 00 00 AF 
03c58     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03c5c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03c60     90 00 90 5D |  if_ne	jmp	#LR__0196
03c64     51 00 00 FF 
03c68     C4 E5 05 F1 | 	add	objptr, ##41924
03c6c     F2 12 02 FB | 	rdlong	arg01, objptr
03c70     1A 00 00 FF 
03c74     A0 E5 85 F1 | 	sub	objptr, ##13728
03c78     F2 16 02 FB | 	rdlong	arg03, objptr
03c7c     37 00 00 FF 
03c80     24 E4 85 F1 | 	sub	objptr, ##28196
03c84     00 14 06 F6 | 	mov	arg02, #0
03c88     84 3E B0 FD | 	call	#_compile_assign
03c8c     FD 1E 0A F6 | 	mov	local01, result1 wz
03c90                 | '   err=compile_assign(linenum,0,cont) 
03c90                 | '   if err<>0 then printerror(err): goto 101
03c90     0C 00 90 AD |  if_e	jmp	#LR__0194
03c94     0F 13 02 F6 | 	mov	arg01, local01
03c98     20 96 B1 FD | 	call	#_printerror
03c9c     74 00 90 FD | 	jmp	#LR__0198
03ca0                 | LR__0194
03ca0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03ca0     51 00 00 FF 
03ca4     FC E5 05 F1 | 	add	objptr, ##41980
03ca8     F2 12 02 FB | 	rdlong	arg01, objptr
03cac     51 00 00 FF 
03cb0     FC E5 85 F1 | 	sub	objptr, ##41980
03cb4     80 01 00 FF 
03cb8     F2 15 06 F6 | 	mov	arg02, ##@LR__5090
03cbc     B4 CB B1 FD | 	call	#__system___string_cmp
03cc0     00 FA 4D F2 | 	cmps	result1, #0 wz
03cc4     2C 00 90 AD |  if_e	jmp	#LR__0195
03cc8     51 00 00 FF 
03ccc     FC E5 05 F1 | 	add	objptr, ##41980
03cd0     F2 24 02 FB | 	rdlong	local04, objptr
03cd4     1A 00 00 FF 
03cd8     E0 E5 85 F1 | 	sub	objptr, ##13792
03cdc     F2 24 62 FC | 	wrlong	local04, objptr
03ce0     08 E4 05 F1 | 	add	objptr, #8
03ce4     F2 08 68 FC | 	wrlong	#4, objptr
03ce8     37 00 00 FF 
03cec     24 E4 85 F1 | 	sub	objptr, ##28196
03cf0     C0 DA 9F FD | 	jmp	#LR__0070
03cf4                 | LR__0195
03cf4                 | LR__0196
03cf4                 | LR__0197
03cf4                 | ' 
03cf4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03cf4     51 00 00 FF 
03cf8     C4 E5 05 F1 | 	add	objptr, ##41924
03cfc     F2 24 0A FB | 	rdlong	local04, objptr wz
03d00     51 00 00 FF 
03d04     C4 E5 85 F1 | 	sub	objptr, ##41924
03d08     28 00 90 5D |  if_ne	jmp	#LR__0199
03d0c     02 12 06 F6 | 	mov	arg01, #2
03d10     84 75 B0 FD | 	call	#_execute_line
03d14                 | LR__0198
03d14     80 01 00 FF 
03d18     F3 13 06 F6 | 	mov	arg01, ##@LR__5091
03d1c                 | ' 
03d1c                 | ' write(text)
03d1c     10 B6 B1 FD | 	call	#_hg010b_spin2_write
03d20                 | ' crlf
03d20     0C BB B1 FD | 	call	#_hg010b_spin2_crlf
03d24     80 01 00 FF 
03d28     F4 13 06 F6 | 	mov	arg01, ##@LR__5092
03d2c                 | ' 
03d2c                 | ' write(text)
03d2c     00 B6 B1 FD | 	call	#_hg010b_spin2_write
03d30                 | ' crlf
03d30     FC BA B1 FD | 	call	#_hg010b_spin2_crlf
03d34                 | LR__0199
03d34     A7 F0 03 F6 | 	mov	ptra, fp
03d38     B2 00 A0 FD | 	call	#popregs_
03d3c                 | _interpret_ret
03d3c     2D 00 64 FD | 	ret
03d40                 | 
03d40                 | ' 
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' '
03d40                 | ' '                          END OF TOKENIZER MAIN CODE
03d40                 | ' '
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' 
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' 
03d40                 | ' ' Check if the part is an operator, return a token or 0 if not found
03d40                 | ' 
03d40                 | ' function isoperator(s as string) as ubyte
03d40                 | _isoperator
03d40     01 4A 05 F6 | 	mov	COUNT_, #1
03d44     A8 00 A0 FD | 	call	#pushregs_
03d48                 | ' 
03d48                 | ' select case s
03d48     09 1F 02 F6 | 	mov	local01, arg01
03d4c     80 01 00 FF 
03d50     FA 15 06 F6 | 	mov	arg02, ##@LR__5093
03d54     0F 13 02 F6 | 	mov	arg01, local01
03d58     18 CB B1 FD | 	call	#__system___string_cmp
03d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d60     FC 01 90 AD |  if_e	jmp	#LR__0200
03d64     80 01 00 FF 
03d68     FC 15 06 F6 | 	mov	arg02, ##@LR__5094
03d6c     0F 13 02 F6 | 	mov	arg01, local01
03d70     00 CB B1 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     EC 01 90 AD |  if_e	jmp	#LR__0201
03d7c     80 01 00 FF 
03d80     FE 15 06 F6 | 	mov	arg02, ##@LR__5095
03d84     0F 13 02 F6 | 	mov	arg01, local01
03d88     E8 CA B1 FD | 	call	#__system___string_cmp
03d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d90     DC 01 90 AD |  if_e	jmp	#LR__0202
03d94     81 01 00 FF 
03d98     01 14 06 F6 | 	mov	arg02, ##@LR__5096
03d9c     0F 13 02 F6 | 	mov	arg01, local01
03da0     D0 CA B1 FD | 	call	#__system___string_cmp
03da4     00 FA 0D F2 | 	cmp	result1, #0 wz
03da8     CC 01 90 AD |  if_e	jmp	#LR__0203
03dac     81 01 00 FF 
03db0     05 14 06 F6 | 	mov	arg02, ##@LR__5097
03db4     0F 13 02 F6 | 	mov	arg01, local01
03db8     B8 CA B1 FD | 	call	#__system___string_cmp
03dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc0     BC 01 90 AD |  if_e	jmp	#LR__0204
03dc4     81 01 00 FF 
03dc8     07 14 06 F6 | 	mov	arg02, ##@LR__5098
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     A0 CA B1 FD | 	call	#__system___string_cmp
03dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd8     AC 01 90 AD |  if_e	jmp	#LR__0205
03ddc     81 01 00 FF 
03de0     09 14 06 F6 | 	mov	arg02, ##@LR__5099
03de4     0F 13 02 F6 | 	mov	arg01, local01
03de8     88 CA B1 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     9C 01 90 AD |  if_e	jmp	#LR__0206
03df4     81 01 00 FF 
03df8     0D 14 06 F6 | 	mov	arg02, ##@LR__5100
03dfc     0F 13 02 F6 | 	mov	arg01, local01
03e00     70 CA B1 FD | 	call	#__system___string_cmp
03e04     00 FA 0D F2 | 	cmp	result1, #0 wz
03e08     8C 01 90 AD |  if_e	jmp	#LR__0207
03e0c     81 01 00 FF 
03e10     11 14 06 F6 | 	mov	arg02, ##@LR__5101
03e14     0F 13 02 F6 | 	mov	arg01, local01
03e18     58 CA B1 FD | 	call	#__system___string_cmp
03e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e20     7C 01 90 AD |  if_e	jmp	#LR__0208
03e24     81 01 00 FF 
03e28     15 14 06 F6 | 	mov	arg02, ##@LR__5102
03e2c     0F 13 02 F6 | 	mov	arg01, local01
03e30     40 CA B1 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     6C 01 90 AD |  if_e	jmp	#LR__0209
03e3c     81 01 00 FF 
03e40     19 14 06 F6 | 	mov	arg02, ##@LR__5103
03e44     0F 13 02 F6 | 	mov	arg01, local01
03e48     28 CA B1 FD | 	call	#__system___string_cmp
03e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e50     5C 01 90 AD |  if_e	jmp	#LR__0210
03e54     81 01 00 FF 
03e58     1D 14 06 F6 | 	mov	arg02, ##@LR__5104
03e5c     0F 13 02 F6 | 	mov	arg01, local01
03e60     10 CA B1 FD | 	call	#__system___string_cmp
03e64     00 FA 0D F2 | 	cmp	result1, #0 wz
03e68     4C 01 90 AD |  if_e	jmp	#LR__0211
03e6c     81 01 00 FF 
03e70     1F 14 06 F6 | 	mov	arg02, ##@LR__5105
03e74     0F 13 02 F6 | 	mov	arg01, local01
03e78     F8 C9 B1 FD | 	call	#__system___string_cmp
03e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e80     3C 01 90 AD |  if_e	jmp	#LR__0212
03e84     81 01 00 FF 
03e88     23 14 06 F6 | 	mov	arg02, ##@LR__5106
03e8c     0F 13 02 F6 | 	mov	arg01, local01
03e90     E0 C9 B1 FD | 	call	#__system___string_cmp
03e94     00 FA 0D F2 | 	cmp	result1, #0 wz
03e98     2C 01 90 AD |  if_e	jmp	#LR__0213
03e9c     81 01 00 FF 
03ea0     25 14 06 F6 | 	mov	arg02, ##@LR__5107
03ea4     0F 13 02 F6 | 	mov	arg01, local01
03ea8     C8 C9 B1 FD | 	call	#__system___string_cmp
03eac     00 FA 0D F2 | 	cmp	result1, #0 wz
03eb0     1C 01 90 AD |  if_e	jmp	#LR__0214
03eb4     81 01 00 FF 
03eb8     27 14 06 F6 | 	mov	arg02, ##@LR__5108
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     B0 C9 B1 FD | 	call	#__system___string_cmp
03ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec8     0C 01 90 AD |  if_e	jmp	#LR__0215
03ecc     81 01 00 FF 
03ed0     2A 14 06 F6 | 	mov	arg02, ##@LR__5109
03ed4     0F 13 02 F6 | 	mov	arg01, local01
03ed8     98 C9 B1 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     FC 00 90 AD |  if_e	jmp	#LR__0216
03ee4     81 01 00 FF 
03ee8     2D 14 06 F6 | 	mov	arg02, ##@LR__5110
03eec     0F 13 02 F6 | 	mov	arg01, local01
03ef0     80 C9 B1 FD | 	call	#__system___string_cmp
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     EC 00 90 AD |  if_e	jmp	#LR__0217
03efc     81 01 00 FF 
03f00     2F 14 06 F6 | 	mov	arg02, ##@LR__5111
03f04     0F 13 02 F6 | 	mov	arg01, local01
03f08     68 C9 B1 FD | 	call	#__system___string_cmp
03f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f10     DC 00 90 AD |  if_e	jmp	#LR__0218
03f14     81 01 00 FF 
03f18     31 14 06 F6 | 	mov	arg02, ##@LR__5112
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     50 C9 B1 FD | 	call	#__system___string_cmp
03f24     00 FA 0D F2 | 	cmp	result1, #0 wz
03f28     CC 00 90 AD |  if_e	jmp	#LR__0219
03f2c     81 01 00 FF 
03f30     34 14 06 F6 | 	mov	arg02, ##@LR__5113
03f34     0F 13 02 F6 | 	mov	arg01, local01
03f38     38 C9 B1 FD | 	call	#__system___string_cmp
03f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f40     BC 00 90 AD |  if_e	jmp	#LR__0220
03f44     81 01 00 FF 
03f48     37 14 06 F6 | 	mov	arg02, ##@LR__5114
03f4c     0F 13 02 F6 | 	mov	arg01, local01
03f50     20 C9 B1 FD | 	call	#__system___string_cmp
03f54     00 FA 0D F2 | 	cmp	result1, #0 wz
03f58     AC 00 90 AD |  if_e	jmp	#LR__0221
03f5c     B0 00 90 FD | 	jmp	#LR__0222
03f60                 | LR__0200
03f60     01 FA 05 F6 | 	mov	result1, #1
03f64     AC 00 90 FD | 	jmp	#LR__0223
03f68                 | LR__0201
03f68     02 FA 05 F6 | 	mov	result1, #2
03f6c     A4 00 90 FD | 	jmp	#LR__0223
03f70                 | LR__0202
03f70     03 FA 05 F6 | 	mov	result1, #3
03f74     9C 00 90 FD | 	jmp	#LR__0223
03f78                 | LR__0203
03f78     04 FA 05 F6 | 	mov	result1, #4
03f7c     94 00 90 FD | 	jmp	#LR__0223
03f80                 | LR__0204
03f80     05 FA 05 F6 | 	mov	result1, #5
03f84     8C 00 90 FD | 	jmp	#LR__0223
03f88                 | LR__0205
03f88     06 FA 05 F6 | 	mov	result1, #6
03f8c     84 00 90 FD | 	jmp	#LR__0223
03f90                 | LR__0206
03f90     07 FA 05 F6 | 	mov	result1, #7
03f94     7C 00 90 FD | 	jmp	#LR__0223
03f98                 | LR__0207
03f98     08 FA 05 F6 | 	mov	result1, #8
03f9c     74 00 90 FD | 	jmp	#LR__0223
03fa0                 | LR__0208
03fa0     09 FA 05 F6 | 	mov	result1, #9
03fa4     6C 00 90 FD | 	jmp	#LR__0223
03fa8                 | LR__0209
03fa8     0A FA 05 F6 | 	mov	result1, #10
03fac     64 00 90 FD | 	jmp	#LR__0223
03fb0                 | LR__0210
03fb0     0B FA 05 F6 | 	mov	result1, #11
03fb4     5C 00 90 FD | 	jmp	#LR__0223
03fb8                 | LR__0211
03fb8     0C FA 05 F6 | 	mov	result1, #12
03fbc     54 00 90 FD | 	jmp	#LR__0223
03fc0                 | LR__0212
03fc0     0D FA 05 F6 | 	mov	result1, #13
03fc4     4C 00 90 FD | 	jmp	#LR__0223
03fc8                 | LR__0213
03fc8     0E FA 05 F6 | 	mov	result1, #14
03fcc     44 00 90 FD | 	jmp	#LR__0223
03fd0                 | LR__0214
03fd0     1B FA 05 F6 | 	mov	result1, #27
03fd4     3C 00 90 FD | 	jmp	#LR__0223
03fd8                 | LR__0215
03fd8     27 FA 05 F6 | 	mov	result1, #39
03fdc     34 00 90 FD | 	jmp	#LR__0223
03fe0                 | LR__0216
03fe0     26 FA 05 F6 | 	mov	result1, #38
03fe4     2C 00 90 FD | 	jmp	#LR__0223
03fe8                 | LR__0217
03fe8     10 FA 05 F6 | 	mov	result1, #16
03fec     24 00 90 FD | 	jmp	#LR__0223
03ff0                 | LR__0218
03ff0     0F FA 05 F6 | 	mov	result1, #15
03ff4     1C 00 90 FD | 	jmp	#LR__0223
03ff8                 | LR__0219
03ff8     2A FA 05 F6 | 	mov	result1, #42
03ffc     14 00 90 FD | 	jmp	#LR__0223
04000                 | LR__0220
04000     28 FA 05 F6 | 	mov	result1, #40
04004     0C 00 90 FD | 	jmp	#LR__0223
04008                 | LR__0221
04008     29 FA 05 F6 | 	mov	result1, #41
0400c     04 00 90 FD | 	jmp	#LR__0223
04010                 | LR__0222
04010     00 FA 05 F6 | 	mov	result1, #0
04014                 | LR__0223
04014     A7 F0 03 F6 | 	mov	ptra, fp
04018     B2 00 A0 FD | 	call	#popregs_
0401c                 | _isoperator_ret
0401c     2D 00 64 FD | 	ret
04020                 | 
04020                 | ' 
04020                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04020                 | ' 
04020                 | ' function ischannel(s as string) as ulong
04020                 | _ischannel
04020     02 4A 05 F6 | 	mov	COUNT_, #2
04024     A8 00 A0 FD | 	call	#pushregs_
04028                 | ' if left$(s,1)<>"#" then return 0
04028     09 1F 02 F6 | 	mov	local01, arg01
0402c     01 14 06 F6 | 	mov	arg02, #1
04030     94 E8 B1 FD | 	call	#__system__Left_S
04034     FD 12 02 F6 | 	mov	arg01, result1
04038     81 01 00 FF 
0403c     3A 14 06 F6 | 	mov	arg02, ##@LR__5115
04040     30 C8 B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     00 FA 05 56 |  if_ne	mov	result1, #0
0404c     AC 00 90 5D |  if_ne	jmp	#LR__0234
04050                 | ' if len(s)<>2 then return 0
04050     0F 13 02 F6 | 	mov	arg01, local01
04054     09 21 02 F6 | 	mov	local02, arg01
04058     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
0405c                 | LR__0230
0405c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04060     01 20 06 51 |  if_ne	add	local02, #1
04064     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
04068                 | LR__0231
04068     09 21 82 F1 | 	sub	local02, arg01
0406c     10 FB 01 F6 | 	mov	result1, local02
04070     02 FA 0D F2 | 	cmp	result1, #2 wz
04074     00 FA 05 56 |  if_ne	mov	result1, #0
04078     80 00 90 5D |  if_ne	jmp	#LR__0234
0407c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     01 14 06 F6 | 	mov	arg02, #1
04084     C8 E8 B1 FD | 	call	#__system__Right_S
04088     FD 12 02 F6 | 	mov	arg01, result1
0408c     81 01 00 FF 
04090     3C 14 06 F6 | 	mov	arg02, ##@LR__5116
04094     DC C7 B1 FD | 	call	#__system___string_cmp
04098     00 FA 55 F2 | 	cmps	result1, #0 wc
0409c     24 00 90 CD |  if_b	jmp	#LR__0232
040a0     0F 13 02 F6 | 	mov	arg01, local01
040a4     01 14 06 F6 | 	mov	arg02, #1
040a8     A4 E8 B1 FD | 	call	#__system__Right_S
040ac     FD 12 02 F6 | 	mov	arg01, result1
040b0     81 01 00 FF 
040b4     3E 14 06 F6 | 	mov	arg02, ##@LR__5117
040b8     B8 C7 B1 FD | 	call	#__system___string_cmp
040bc     01 FA 55 F2 | 	cmps	result1, #1 wc
040c0     08 00 90 CD |  if_b	jmp	#LR__0233
040c4                 | LR__0232
040c4     00 FA 05 F6 | 	mov	result1, #0
040c8     30 00 90 FD | 	jmp	#LR__0234
040cc                 | LR__0233
040cc                 | ' return token_channel+val(right$(s,1))
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     01 14 06 F6 | 	mov	arg02, #1
040d4     78 E8 B1 FD | 	call	#__system__Right_S
040d8     FD 12 02 F6 | 	mov	arg01, result1
040dc     2C FB B1 FD | 	call	#__system____builtin_atof
040e0     FD 14 02 F6 | 	mov	arg02, result1
040e4     00 18 21 FF 
040e8     00 12 06 F6 | 	mov	arg01, ##1110441984
040ec     40 EF B1 FD | 	call	#__system___float_add
040f0     FD 12 02 F6 | 	mov	arg01, result1
040f4     00 14 06 F6 | 	mov	arg02, #0
040f8     CC F7 B1 FD | 	call	#__system___float_tointeger
040fc                 | LR__0234
040fc     A7 F0 03 F6 | 	mov	ptra, fp
04100     B2 00 A0 FD | 	call	#popregs_
04104                 | _ischannel_ret
04104     2D 00 64 FD | 	ret
04108                 | 
04108                 | ' 
04108                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04108                 | ' ' todo: add spin2/pasm constants for pin control
04108                 | ' 
04108                 | ' function isconstant(s as string) as integer
04108                 | _isconstant
04108     01 4A 05 F6 | 	mov	COUNT_, #1
0410c     A8 00 A0 FD | 	call	#pushregs_
04110                 | ' 
04110                 | ' select case s
04110     09 1F 02 F6 | 	mov	local01, arg01
04114     81 01 00 FF 
04118     40 14 06 F6 | 	mov	arg02, ##@LR__5118
0411c     0F 13 02 F6 | 	mov	arg01, local01
04120     50 C7 B1 FD | 	call	#__system___string_cmp
04124     00 FA 0D F2 | 	cmp	result1, #0 wz
04128     34 00 90 AD |  if_e	jmp	#LR__0240
0412c     81 01 00 FF 
04130     46 14 06 F6 | 	mov	arg02, ##@LR__5119
04134     0F 13 02 F6 | 	mov	arg01, local01
04138     38 C7 B1 FD | 	call	#__system___string_cmp
0413c     00 FA 0D F2 | 	cmp	result1, #0 wz
04140     24 00 90 AD |  if_e	jmp	#LR__0241
04144     81 01 00 FF 
04148     4D 14 06 F6 | 	mov	arg02, ##@LR__5120
0414c     0F 13 02 F6 | 	mov	arg01, local01
04150     20 C7 B1 FD | 	call	#__system___string_cmp
04154     00 FA 0D F2 | 	cmp	result1, #0 wz
04158     14 00 90 AD |  if_e	jmp	#LR__0242
0415c     18 00 90 FD | 	jmp	#LR__0243
04160                 | LR__0240
04160     01 FA 05 F6 | 	mov	result1, #1
04164     14 00 90 FD | 	jmp	#LR__0244
04168                 | LR__0241
04168     02 FA 05 F6 | 	mov	result1, #2
0416c     0C 00 90 FD | 	jmp	#LR__0244
04170                 | LR__0242
04170     04 FA 05 F6 | 	mov	result1, #4
04174     04 00 90 FD | 	jmp	#LR__0244
04178                 | LR__0243
04178     00 FA 05 F6 | 	mov	result1, #0
0417c                 | LR__0244
0417c     A7 F0 03 F6 | 	mov	ptra, fp
04180     B2 00 A0 FD | 	call	#popregs_
04184                 | _isconstant_ret
04184     2D 00 64 FD | 	ret
04188                 | 
04188                 | ' 
04188                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04188                 | ' 
04188                 | ' function isnotename(s as string) as ulong
04188                 | _isnotename
04188     07 4A 05 F6 | 	mov	COUNT_, #7
0418c     A8 00 A0 FD | 	call	#pushregs_
04190                 | ' if left$(s,1)<>"#" then return 0
04190     09 1F 02 F6 | 	mov	local01, arg01
04194     01 14 06 F6 | 	mov	arg02, #1
04198     2C E7 B1 FD | 	call	#__system__Left_S
0419c     FD 12 02 F6 | 	mov	arg01, result1
041a0     81 01 00 FF 
041a4     55 14 06 F6 | 	mov	arg02, ##@LR__5121
041a8     C8 C6 B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     00 FA 05 56 |  if_ne	mov	result1, #0
041b4     30 03 90 5D |  if_ne	jmp	#LR__0273
041b8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
041b8     0F 13 02 F6 | 	mov	arg01, local01
041bc     03 14 06 F6 | 	mov	arg02, #3
041c0     01 16 06 F6 | 	mov	arg03, #1
041c4     18 E8 B1 FD | 	call	#__system__Mid_S
041c8     FD 12 02 F6 | 	mov	arg01, result1
041cc     81 01 00 FF 
041d0     57 14 06 F6 | 	mov	arg02, ##@LR__5122
041d4     9C C6 B1 FD | 	call	#__system___string_cmp
041d8     00 FA 0D F2 | 	cmp	result1, #0 wz
041dc     18 00 90 5D |  if_ne	jmp	#LR__0250
041e0     0F 13 02 F6 | 	mov	arg01, local01
041e4     02 14 06 F6 | 	mov	arg02, #2
041e8     02 16 06 F6 | 	mov	arg03, #2
041ec     F0 E7 B1 FD | 	call	#__system__Mid_S
041f0     FD 20 02 F6 | 	mov	local02, result1
041f4     14 00 90 FD | 	jmp	#LR__0251
041f8                 | LR__0250
041f8     0F 13 02 F6 | 	mov	arg01, local01
041fc     02 14 06 F6 | 	mov	arg02, #2
04200     01 16 06 F6 | 	mov	arg03, #1
04204     D8 E7 B1 FD | 	call	#__system__Mid_S
04208     FD 20 02 F6 | 	mov	local02, result1
0420c                 | LR__0251
0420c                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
0420c     0F 13 02 F6 | 	mov	arg01, local01
04210     09 23 02 F6 | 	mov	local03, arg01
04214     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04218                 | LR__0252
04218     11 FB C9 FA | 	rdbyte	result1, local03 wz
0421c     01 22 06 51 |  if_ne	add	local03, #1
04220     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
04224                 | LR__0253
04224     09 23 82 F1 | 	sub	local03, arg01
04228     11 15 02 F6 | 	mov	arg02, local03
0422c     01 14 86 F1 | 	sub	arg02, #1
04230     0F 13 02 F6 | 	mov	arg01, local01
04234     01 16 06 F6 | 	mov	arg03, #1
04238     A4 E7 B1 FD | 	call	#__system__Mid_S
0423c     FD 12 02 F6 | 	mov	arg01, result1
04240     81 01 00 FF 
04244     59 14 06 F6 | 	mov	arg02, ##@LR__5123
04248     28 C6 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     28 00 90 AD |  if_e	jmp	#LR__0254
04254     0F 13 02 F6 | 	mov	arg01, local01
04258     01 14 06 F6 | 	mov	arg02, #1
0425c     F0 E6 B1 FD | 	call	#__system__Right_S
04260     FD 12 02 F6 | 	mov	arg01, result1
04264     A4 F9 B1 FD | 	call	#__system____builtin_atof
04268     FD 12 02 F6 | 	mov	arg01, result1
0426c     00 14 06 F6 | 	mov	arg02, #0
04270     54 F6 B1 FD | 	call	#__system___float_tointeger
04274     FD 24 02 F6 | 	mov	local04, result1
04278     34 00 90 FD | 	jmp	#LR__0255
0427c                 | LR__0254
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     01 14 06 F6 | 	mov	arg02, #1
04284     C8 E6 B1 FD | 	call	#__system__Right_S
04288     FD 12 02 F6 | 	mov	arg01, result1
0428c     7C F9 B1 FD | 	call	#__system____builtin_atof
04290     FD 14 02 F6 | 	mov	arg02, result1
04294     00 C0 5F FF 
04298     00 12 06 F6 | 	mov	arg01, ##-1082130432
0429c     60 F1 B1 FD | 	call	#__system___float_mul
042a0     FD 12 02 F6 | 	mov	arg01, result1
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     1C F6 B1 FD | 	call	#__system___float_tointeger
042ac     FD 24 02 F6 | 	mov	local04, result1
042b0                 | LR__0255
042b0                 | ' 
042b0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
042b0     00 24 0E F2 | 	cmp	local04, #0 wz
042b4     24 00 90 5D |  if_ne	jmp	#LR__0256
042b8     0F 13 02 F6 | 	mov	arg01, local01
042bc     01 14 06 F6 | 	mov	arg02, #1
042c0     8C E6 B1 FD | 	call	#__system__Right_S
042c4     FD 12 02 F6 | 	mov	arg01, result1
042c8     81 01 00 FF 
042cc     5B 14 06 F6 | 	mov	arg02, ##@LR__5124
042d0     A0 C5 B1 FD | 	call	#__system___string_cmp
042d4     00 FA 0D F2 | 	cmp	result1, #0 wz
042d8     04 24 06 56 |  if_ne	mov	local04, #4
042dc                 | LR__0256
042dc                 | ' 
042dc                 | ' select case s1
042dc     10 27 02 F6 | 	mov	local05, local02
042e0     81 01 00 FF 
042e4     5D 14 06 F6 | 	mov	arg02, ##@LR__5125
042e8     13 13 02 F6 | 	mov	arg01, local05
042ec     84 C5 B1 FD | 	call	#__system___string_cmp
042f0     00 FA 0D F2 | 	cmp	result1, #0 wz
042f4     24 01 90 AD |  if_e	jmp	#LR__0257
042f8     81 01 00 FF 
042fc     5F 14 06 F6 | 	mov	arg02, ##@LR__5126
04300     13 13 02 F6 | 	mov	arg01, local05
04304     6C C5 B1 FD | 	call	#__system___string_cmp
04308     00 FA 0D F2 | 	cmp	result1, #0 wz
0430c     18 01 90 AD |  if_e	jmp	#LR__0258
04310     81 01 00 FF 
04314     62 14 06 F6 | 	mov	arg02, ##@LR__5127
04318     13 13 02 F6 | 	mov	arg01, local05
0431c     54 C5 B1 FD | 	call	#__system___string_cmp
04320     00 FA 0D F2 | 	cmp	result1, #0 wz
04324     0C 01 90 AD |  if_e	jmp	#LR__0259
04328     81 01 00 FF 
0432c     64 14 06 F6 | 	mov	arg02, ##@LR__5128
04330     13 13 02 F6 | 	mov	arg01, local05
04334     3C C5 B1 FD | 	call	#__system___string_cmp
04338     00 FA 0D F2 | 	cmp	result1, #0 wz
0433c     00 01 90 AD |  if_e	jmp	#LR__0260
04340     81 01 00 FF 
04344     67 14 06 F6 | 	mov	arg02, ##@LR__5129
04348     13 13 02 F6 | 	mov	arg01, local05
0434c     24 C5 B1 FD | 	call	#__system___string_cmp
04350     00 FA 0D F2 | 	cmp	result1, #0 wz
04354     F4 00 90 AD |  if_e	jmp	#LR__0261
04358     81 01 00 FF 
0435c     69 14 06 F6 | 	mov	arg02, ##@LR__5130
04360     13 13 02 F6 | 	mov	arg01, local05
04364     0C C5 B1 FD | 	call	#__system___string_cmp
04368     00 FA 0D F2 | 	cmp	result1, #0 wz
0436c     E8 00 90 AD |  if_e	jmp	#LR__0262
04370     81 01 00 FF 
04374     6B 14 06 F6 | 	mov	arg02, ##@LR__5131
04378     13 13 02 F6 | 	mov	arg01, local05
0437c     F4 C4 B1 FD | 	call	#__system___string_cmp
04380     00 FA 0D F2 | 	cmp	result1, #0 wz
04384     DC 00 90 AD |  if_e	jmp	#LR__0263
04388     81 01 00 FF 
0438c     6E 14 06 F6 | 	mov	arg02, ##@LR__5132
04390     13 13 02 F6 | 	mov	arg01, local05
04394     DC C4 B1 FD | 	call	#__system___string_cmp
04398     00 FA 0D F2 | 	cmp	result1, #0 wz
0439c     D0 00 90 AD |  if_e	jmp	#LR__0264
043a0     81 01 00 FF 
043a4     70 14 06 F6 | 	mov	arg02, ##@LR__5133
043a8     13 13 02 F6 | 	mov	arg01, local05
043ac     C4 C4 B1 FD | 	call	#__system___string_cmp
043b0     00 FA 0D F2 | 	cmp	result1, #0 wz
043b4     C4 00 90 AD |  if_e	jmp	#LR__0265
043b8     81 01 00 FF 
043bc     73 14 06 F6 | 	mov	arg02, ##@LR__5134
043c0     13 13 02 F6 | 	mov	arg01, local05
043c4     AC C4 B1 FD | 	call	#__system___string_cmp
043c8     00 FA 0D F2 | 	cmp	result1, #0 wz
043cc     B8 00 90 AD |  if_e	jmp	#LR__0266
043d0     81 01 00 FF 
043d4     75 14 06 F6 | 	mov	arg02, ##@LR__5135
043d8     13 13 02 F6 | 	mov	arg01, local05
043dc     94 C4 B1 FD | 	call	#__system___string_cmp
043e0     00 FA 0D F2 | 	cmp	result1, #0 wz
043e4     AC 00 90 AD |  if_e	jmp	#LR__0267
043e8     81 01 00 FF 
043ec     78 14 06 F6 | 	mov	arg02, ##@LR__5136
043f0     13 13 02 F6 | 	mov	arg01, local05
043f4     7C C4 B1 FD | 	call	#__system___string_cmp
043f8     00 FA 0D F2 | 	cmp	result1, #0 wz
043fc     A0 00 90 AD |  if_e	jmp	#LR__0268
04400     81 01 00 FF 
04404     7A 14 06 F6 | 	mov	arg02, ##@LR__5137
04408     13 13 02 F6 | 	mov	arg01, local05
0440c     64 C4 B1 FD | 	call	#__system___string_cmp
04410     00 FA 0D F2 | 	cmp	result1, #0 wz
04414     94 00 90 AD |  if_e	jmp	#LR__0269
04418     9C 00 90 FD | 	jmp	#LR__0270
0441c                 | LR__0257
0441c     01 00 00 FF 
04420     00 29 06 F6 | 	mov	local06, ##768
04424     98 00 90 FD | 	jmp	#LR__0271
04428                 | LR__0258
04428     01 00 00 FF 
0442c     01 29 06 F6 | 	mov	local06, ##769
04430     8C 00 90 FD | 	jmp	#LR__0271
04434                 | LR__0259
04434     01 00 00 FF 
04438     02 29 06 F6 | 	mov	local06, ##770
0443c     80 00 90 FD | 	jmp	#LR__0271
04440                 | LR__0260
04440     01 00 00 FF 
04444     03 29 06 F6 | 	mov	local06, ##771
04448     74 00 90 FD | 	jmp	#LR__0271
0444c                 | LR__0261
0444c     01 00 00 FF 
04450     04 29 06 F6 | 	mov	local06, ##772
04454     68 00 90 FD | 	jmp	#LR__0271
04458                 | LR__0262
04458     01 00 00 FF 
0445c     05 29 06 F6 | 	mov	local06, ##773
04460     5C 00 90 FD | 	jmp	#LR__0271
04464                 | LR__0263
04464     01 00 00 FF 
04468     06 29 06 F6 | 	mov	local06, ##774
0446c     50 00 90 FD | 	jmp	#LR__0271
04470                 | LR__0264
04470     01 00 00 FF 
04474     07 29 06 F6 | 	mov	local06, ##775
04478     44 00 90 FD | 	jmp	#LR__0271
0447c                 | LR__0265
0447c     01 00 00 FF 
04480     08 29 06 F6 | 	mov	local06, ##776
04484     38 00 90 FD | 	jmp	#LR__0271
04488                 | LR__0266
04488     01 00 00 FF 
0448c     09 29 06 F6 | 	mov	local06, ##777
04490     2C 00 90 FD | 	jmp	#LR__0271
04494                 | LR__0267
04494     01 00 00 FF 
04498     0A 29 06 F6 | 	mov	local06, ##778
0449c     20 00 90 FD | 	jmp	#LR__0271
044a0                 | LR__0268
044a0     01 00 00 FF 
044a4     0B 29 06 F6 | 	mov	local06, ##779
044a8     14 00 90 FD | 	jmp	#LR__0271
044ac                 | LR__0269
044ac     01 00 00 FF 
044b0     0B 29 06 F6 | 	mov	local06, ##779
044b4     08 00 90 FD | 	jmp	#LR__0271
044b8                 | LR__0270
044b8     00 FA 05 F6 | 	mov	result1, #0
044bc     28 00 90 FD | 	jmp	#LR__0273
044c0                 | LR__0271
044c0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
044c0     FF FF 7F FF 
044c4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
044c8     18 00 90 CD |  if_b	jmp	#LR__0272
044cc     0A 24 56 F2 | 	cmps	local04, #10 wc
044d0     12 2B 02 C6 |  if_b	mov	local07, local04
044d4     01 2A 66 C0 |  if_b	shl	local07, #1
044d8     12 2B 02 C1 |  if_b	add	local07, local04
044dc     02 2A 66 C0 |  if_b	shl	local07, #2
044e0     15 29 02 C1 |  if_b	add	local06, local07
044e4                 | LR__0272
044e4                 | ' return token
044e4     14 FB 01 F6 | 	mov	result1, local06
044e8                 | LR__0273
044e8     A7 F0 03 F6 | 	mov	ptra, fp
044ec     B2 00 A0 FD | 	call	#popregs_
044f0                 | _isnotename_ret
044f0     2D 00 64 FD | 	ret
044f4                 | 
044f4                 | ' 
044f4                 | ' ' Check if the part is a separator, return a token or 0 if not found
044f4                 | ' 
044f4                 | ' function isseparator(s as string) as ubyte
044f4                 | _isseparator
044f4     01 4A 05 F6 | 	mov	COUNT_, #1
044f8     A8 00 A0 FD | 	call	#pushregs_
044fc                 | ' 
044fc                 | ' select case s
044fc     09 1F 02 F6 | 	mov	local01, arg01
04500     81 01 00 FF 
04504     7C 14 06 F6 | 	mov	arg02, ##@LR__5138
04508     0F 13 02 F6 | 	mov	arg01, local01
0450c     64 C3 B1 FD | 	call	#__system___string_cmp
04510     00 FA 0D F2 | 	cmp	result1, #0 wz
04514     54 01 90 AD |  if_e	jmp	#LR__0280
04518     81 01 00 FF 
0451c     7E 14 06 F6 | 	mov	arg02, ##@LR__5139
04520     0F 13 02 F6 | 	mov	arg01, local01
04524     4C C3 B1 FD | 	call	#__system___string_cmp
04528     00 FA 0D F2 | 	cmp	result1, #0 wz
0452c     44 01 90 AD |  if_e	jmp	#LR__0281
04530     81 01 00 FF 
04534     80 14 06 F6 | 	mov	arg02, ##@LR__5140
04538     0F 13 02 F6 | 	mov	arg01, local01
0453c     34 C3 B1 FD | 	call	#__system___string_cmp
04540     00 FA 0D F2 | 	cmp	result1, #0 wz
04544     34 01 90 AD |  if_e	jmp	#LR__0282
04548     81 01 00 FF 
0454c     82 14 06 F6 | 	mov	arg02, ##@LR__5141
04550     0F 13 02 F6 | 	mov	arg01, local01
04554     1C C3 B1 FD | 	call	#__system___string_cmp
04558     00 FA 0D F2 | 	cmp	result1, #0 wz
0455c     24 01 90 AD |  if_e	jmp	#LR__0283
04560     81 01 00 FF 
04564     84 14 06 F6 | 	mov	arg02, ##@LR__5142
04568     0F 13 02 F6 | 	mov	arg01, local01
0456c     04 C3 B1 FD | 	call	#__system___string_cmp
04570     00 FA 0D F2 | 	cmp	result1, #0 wz
04574     14 01 90 AD |  if_e	jmp	#LR__0284
04578     81 01 00 FF 
0457c     86 14 06 F6 | 	mov	arg02, ##@LR__5143
04580     0F 13 02 F6 | 	mov	arg01, local01
04584     EC C2 B1 FD | 	call	#__system___string_cmp
04588     00 FA 0D F2 | 	cmp	result1, #0 wz
0458c     04 01 90 AD |  if_e	jmp	#LR__0285
04590     81 01 00 FF 
04594     88 14 06 F6 | 	mov	arg02, ##@LR__5144
04598     0F 13 02 F6 | 	mov	arg01, local01
0459c     D4 C2 B1 FD | 	call	#__system___string_cmp
045a0     00 FA 0D F2 | 	cmp	result1, #0 wz
045a4     F4 00 90 AD |  if_e	jmp	#LR__0286
045a8     81 01 00 FF 
045ac     8A 14 06 F6 | 	mov	arg02, ##@LR__5145
045b0     0F 13 02 F6 | 	mov	arg01, local01
045b4     BC C2 B1 FD | 	call	#__system___string_cmp
045b8     00 FA 0D F2 | 	cmp	result1, #0 wz
045bc     E4 00 90 AD |  if_e	jmp	#LR__0287
045c0     81 01 00 FF 
045c4     8C 14 06 F6 | 	mov	arg02, ##@LR__5146
045c8     0F 13 02 F6 | 	mov	arg01, local01
045cc     A4 C2 B1 FD | 	call	#__system___string_cmp
045d0     00 FA 0D F2 | 	cmp	result1, #0 wz
045d4     D4 00 90 AD |  if_e	jmp	#LR__0288
045d8     81 01 00 FF 
045dc     8E 14 06 F6 | 	mov	arg02, ##@LR__5147
045e0     0F 13 02 F6 | 	mov	arg01, local01
045e4     8C C2 B1 FD | 	call	#__system___string_cmp
045e8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ec     C4 00 90 AD |  if_e	jmp	#LR__0289
045f0     81 01 00 FF 
045f4     90 14 06 F6 | 	mov	arg02, ##@LR__5148
045f8     0F 13 02 F6 | 	mov	arg01, local01
045fc     74 C2 B1 FD | 	call	#__system___string_cmp
04600     00 FA 0D F2 | 	cmp	result1, #0 wz
04604     B4 00 90 AD |  if_e	jmp	#LR__0290
04608     81 01 00 FF 
0460c     92 14 06 F6 | 	mov	arg02, ##@LR__5149
04610     0F 13 02 F6 | 	mov	arg01, local01
04614     5C C2 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     A4 00 90 AD |  if_e	jmp	#LR__0291
04620     81 01 00 FF 
04624     94 14 06 F6 | 	mov	arg02, ##@LR__5150
04628     0F 13 02 F6 | 	mov	arg01, local01
0462c     44 C2 B1 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     94 00 90 AD |  if_e	jmp	#LR__0292
04638     81 01 00 FF 
0463c     96 14 06 F6 | 	mov	arg02, ##@LR__5151
04640     0F 13 02 F6 | 	mov	arg01, local01
04644     2C C2 B1 FD | 	call	#__system___string_cmp
04648     00 FA 0D F2 | 	cmp	result1, #0 wz
0464c     84 00 90 AD |  if_e	jmp	#LR__0293
04650     81 01 00 FF 
04654     98 14 06 F6 | 	mov	arg02, ##@LR__5152
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     14 C2 B1 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     74 00 90 AD |  if_e	jmp	#LR__0294
04668     78 00 90 FD | 	jmp	#LR__0295
0466c                 | LR__0280
0466c     01 FA 05 F6 | 	mov	result1, #1
04670     74 00 90 FD | 	jmp	#LR__0296
04674                 | LR__0281
04674     02 FA 05 F6 | 	mov	result1, #2
04678     6C 00 90 FD | 	jmp	#LR__0296
0467c                 | LR__0282
0467c     1B FA 05 F6 | 	mov	result1, #27
04680     64 00 90 FD | 	jmp	#LR__0296
04684                 | LR__0283
04684     11 FA 05 F6 | 	mov	result1, #17
04688     5C 00 90 FD | 	jmp	#LR__0296
0468c                 | LR__0284
0468c     05 FA 05 F6 | 	mov	result1, #5
04690     54 00 90 FD | 	jmp	#LR__0296
04694                 | LR__0285
04694     06 FA 05 F6 | 	mov	result1, #6
04698     4C 00 90 FD | 	jmp	#LR__0296
0469c                 | LR__0286
0469c     12 FA 05 F6 | 	mov	result1, #18
046a0     44 00 90 FD | 	jmp	#LR__0296
046a4                 | LR__0287
046a4     13 FA 05 F6 | 	mov	result1, #19
046a8     3C 00 90 FD | 	jmp	#LR__0296
046ac                 | LR__0288
046ac     0C FA 05 F6 | 	mov	result1, #12
046b0     34 00 90 FD | 	jmp	#LR__0296
046b4                 | LR__0289
046b4     14 FA 05 F6 | 	mov	result1, #20
046b8     2C 00 90 FD | 	jmp	#LR__0296
046bc                 | LR__0290
046bc     15 FA 05 F6 | 	mov	result1, #21
046c0     24 00 90 FD | 	jmp	#LR__0296
046c4                 | LR__0291
046c4     16 FA 05 F6 | 	mov	result1, #22
046c8     1C 00 90 FD | 	jmp	#LR__0296
046cc                 | LR__0292
046cc     FF FB 05 F6 | 	mov	result1, #511
046d0     14 00 90 FD | 	jmp	#LR__0296
046d4                 | LR__0293
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     0C 00 90 FD | 	jmp	#LR__0296
046dc                 | LR__0294
046dc     10 FA 05 F6 | 	mov	result1, #16
046e0     04 00 90 FD | 	jmp	#LR__0296
046e4                 | LR__0295
046e4     00 FA 05 F6 | 	mov	result1, #0
046e8                 | LR__0296
046e8     A7 F0 03 F6 | 	mov	ptra, fp
046ec     B2 00 A0 FD | 	call	#popregs_
046f0                 | _isseparator_ret
046f0     2D 00 64 FD | 	ret
046f4                 | 
046f4                 | ' 
046f4                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
046f4                 | ' 
046f4                 | ' function iscommand(s as string) as ubyte
046f4                 | _iscommand
046f4     01 4A 05 F6 | 	mov	COUNT_, #1
046f8     A8 00 A0 FD | 	call	#pushregs_
046fc                 | ' 
046fc                 | ' select case s
046fc     09 1F 02 F6 | 	mov	local01, arg01
04700     81 01 00 FF 
04704     9C 14 06 F6 | 	mov	arg02, ##@LR__5154
04708     0F 13 02 F6 | 	mov	arg01, local01
0470c     64 C1 B1 FD | 	call	#__system___string_cmp
04710     00 FA 0D F2 | 	cmp	result1, #0 wz
04714     5C 0B 90 AD |  if_e	jmp	#LR__0300
04718     81 01 00 FF 
0471c     A1 14 06 F6 | 	mov	arg02, ##@LR__5155
04720     0F 13 02 F6 | 	mov	arg01, local01
04724     4C C1 B1 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     4C 0B 90 AD |  if_e	jmp	#LR__0301
04730     81 01 00 FF 
04734     A4 14 06 F6 | 	mov	arg02, ##@LR__5156
04738     0F 13 02 F6 | 	mov	arg01, local01
0473c     34 C1 B1 FD | 	call	#__system___string_cmp
04740     00 FA 0D F2 | 	cmp	result1, #0 wz
04744     3C 0B 90 AD |  if_e	jmp	#LR__0302
04748     81 01 00 FF 
0474c     A8 14 06 F6 | 	mov	arg02, ##@LR__5157
04750     0F 13 02 F6 | 	mov	arg01, local01
04754     1C C1 B1 FD | 	call	#__system___string_cmp
04758     00 FA 0D F2 | 	cmp	result1, #0 wz
0475c     2C 0B 90 AD |  if_e	jmp	#LR__0303
04760     81 01 00 FF 
04764     AD 14 06 F6 | 	mov	arg02, ##@LR__5158
04768     0F 13 02 F6 | 	mov	arg01, local01
0476c     04 C1 B1 FD | 	call	#__system___string_cmp
04770     00 FA 0D F2 | 	cmp	result1, #0 wz
04774     1C 0B 90 AD |  if_e	jmp	#LR__0304
04778     81 01 00 FF 
0477c     B1 14 06 F6 | 	mov	arg02, ##@LR__5159
04780     0F 13 02 F6 | 	mov	arg01, local01
04784     EC C0 B1 FD | 	call	#__system___string_cmp
04788     00 FA 0D F2 | 	cmp	result1, #0 wz
0478c     0C 0B 90 AD |  if_e	jmp	#LR__0305
04790     81 01 00 FF 
04794     BC 14 06 F6 | 	mov	arg02, ##@LR__5160
04798     0F 13 02 F6 | 	mov	arg01, local01
0479c     D4 C0 B1 FD | 	call	#__system___string_cmp
047a0     00 FA 0D F2 | 	cmp	result1, #0 wz
047a4     FC 0A 90 AD |  if_e	jmp	#LR__0306
047a8     81 01 00 FF 
047ac     C0 14 06 F6 | 	mov	arg02, ##@LR__5161
047b0     0F 13 02 F6 | 	mov	arg01, local01
047b4     BC C0 B1 FD | 	call	#__system___string_cmp
047b8     00 FA 0D F2 | 	cmp	result1, #0 wz
047bc     EC 0A 90 AD |  if_e	jmp	#LR__0307
047c0     81 01 00 FF 
047c4     CA 14 06 F6 | 	mov	arg02, ##@LR__5162
047c8     0F 13 02 F6 | 	mov	arg01, local01
047cc     A4 C0 B1 FD | 	call	#__system___string_cmp
047d0     00 FA 0D F2 | 	cmp	result1, #0 wz
047d4     DC 0A 90 AD |  if_e	jmp	#LR__0308
047d8     81 01 00 FF 
047dc     CE 14 06 F6 | 	mov	arg02, ##@LR__5163
047e0     0F 13 02 F6 | 	mov	arg01, local01
047e4     8C C0 B1 FD | 	call	#__system___string_cmp
047e8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ec     CC 0A 90 AD |  if_e	jmp	#LR__0309
047f0     81 01 00 FF 
047f4     D8 14 06 F6 | 	mov	arg02, ##@LR__5164
047f8     0F 13 02 F6 | 	mov	arg01, local01
047fc     74 C0 B1 FD | 	call	#__system___string_cmp
04800     00 FA 0D F2 | 	cmp	result1, #0 wz
04804     BC 0A 90 AD |  if_e	jmp	#LR__0310
04808     81 01 00 FF 
0480c     DC 14 06 F6 | 	mov	arg02, ##@LR__5165
04810     0F 13 02 F6 | 	mov	arg01, local01
04814     5C C0 B1 FD | 	call	#__system___string_cmp
04818     00 FA 0D F2 | 	cmp	result1, #0 wz
0481c     AC 0A 90 AD |  if_e	jmp	#LR__0311
04820     81 01 00 FF 
04824     E7 14 06 F6 | 	mov	arg02, ##@LR__5166
04828     0F 13 02 F6 | 	mov	arg01, local01
0482c     44 C0 B1 FD | 	call	#__system___string_cmp
04830     00 FA 0D F2 | 	cmp	result1, #0 wz
04834     9C 0A 90 AD |  if_e	jmp	#LR__0312
04838     81 01 00 FF 
0483c     EB 14 06 F6 | 	mov	arg02, ##@LR__5167
04840     0F 13 02 F6 | 	mov	arg01, local01
04844     2C C0 B1 FD | 	call	#__system___string_cmp
04848     00 FA 0D F2 | 	cmp	result1, #0 wz
0484c     8C 0A 90 AD |  if_e	jmp	#LR__0313
04850     81 01 00 FF 
04854     F2 14 06 F6 | 	mov	arg02, ##@LR__5168
04858     0F 13 02 F6 | 	mov	arg01, local01
0485c     14 C0 B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     7C 0A 90 AD |  if_e	jmp	#LR__0314
04868     81 01 00 FF 
0486c     F6 14 06 F6 | 	mov	arg02, ##@LR__5169
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     FC BF B1 FD | 	call	#__system___string_cmp
04878     00 FA 0D F2 | 	cmp	result1, #0 wz
0487c     6C 0A 90 AD |  if_e	jmp	#LR__0315
04880     81 01 00 FF 
04884     FC 14 06 F6 | 	mov	arg02, ##@LR__5170
04888     0F 13 02 F6 | 	mov	arg01, local01
0488c     E4 BF B1 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     5C 0A 90 AD |  if_e	jmp	#LR__0316
04898     81 01 00 FF 
0489c     02 15 06 F6 | 	mov	arg02, ##@LR__5171
048a0     0F 13 02 F6 | 	mov	arg01, local01
048a4     CC BF B1 FD | 	call	#__system___string_cmp
048a8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ac     4C 0A 90 AD |  if_e	jmp	#LR__0317
048b0     81 01 00 FF 
048b4     06 15 06 F6 | 	mov	arg02, ##@LR__5172
048b8     0F 13 02 F6 | 	mov	arg01, local01
048bc     B4 BF B1 FD | 	call	#__system___string_cmp
048c0     00 FA 0D F2 | 	cmp	result1, #0 wz
048c4     3C 0A 90 AD |  if_e	jmp	#LR__0318
048c8     81 01 00 FF 
048cc     0C 15 06 F6 | 	mov	arg02, ##@LR__5173
048d0     0F 13 02 F6 | 	mov	arg01, local01
048d4     9C BF B1 FD | 	call	#__system___string_cmp
048d8     00 FA 0D F2 | 	cmp	result1, #0 wz
048dc     2C 0A 90 AD |  if_e	jmp	#LR__0319
048e0     81 01 00 FF 
048e4     0F 15 06 F6 | 	mov	arg02, ##@LR__5174
048e8     0F 13 02 F6 | 	mov	arg01, local01
048ec     84 BF B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     1C 0A 90 AD |  if_e	jmp	#LR__0320
048f8     81 01 00 FF 
048fc     15 15 06 F6 | 	mov	arg02, ##@LR__5175
04900     0F 13 02 F6 | 	mov	arg01, local01
04904     6C BF B1 FD | 	call	#__system___string_cmp
04908     00 FA 0D F2 | 	cmp	result1, #0 wz
0490c     0C 0A 90 AD |  if_e	jmp	#LR__0321
04910     81 01 00 FF 
04914     19 15 06 F6 | 	mov	arg02, ##@LR__5176
04918     0F 13 02 F6 | 	mov	arg01, local01
0491c     54 BF B1 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     FC 09 90 AD |  if_e	jmp	#LR__0322
04928     81 01 00 FF 
0492c     20 15 06 F6 | 	mov	arg02, ##@LR__5177
04930     0F 13 02 F6 | 	mov	arg01, local01
04934     3C BF B1 FD | 	call	#__system___string_cmp
04938     00 FA 0D F2 | 	cmp	result1, #0 wz
0493c     EC 09 90 AD |  if_e	jmp	#LR__0323
04940     81 01 00 FF 
04944     27 15 06 F6 | 	mov	arg02, ##@LR__5178
04948     0F 13 02 F6 | 	mov	arg01, local01
0494c     24 BF B1 FD | 	call	#__system___string_cmp
04950     00 FA 0D F2 | 	cmp	result1, #0 wz
04954     DC 09 90 AD |  if_e	jmp	#LR__0324
04958     81 01 00 FF 
0495c     2E 15 06 F6 | 	mov	arg02, ##@LR__5179
04960     0F 13 02 F6 | 	mov	arg01, local01
04964     0C BF B1 FD | 	call	#__system___string_cmp
04968     00 FA 0D F2 | 	cmp	result1, #0 wz
0496c     CC 09 90 AD |  if_e	jmp	#LR__0325
04970     81 01 00 FF 
04974     38 15 06 F6 | 	mov	arg02, ##@LR__5180
04978     0F 13 02 F6 | 	mov	arg01, local01
0497c     F4 BE B1 FD | 	call	#__system___string_cmp
04980     00 FA 0D F2 | 	cmp	result1, #0 wz
04984     BC 09 90 AD |  if_e	jmp	#LR__0326
04988     81 01 00 FF 
0498c     3C 15 06 F6 | 	mov	arg02, ##@LR__5181
04990     0F 13 02 F6 | 	mov	arg01, local01
04994     DC BE B1 FD | 	call	#__system___string_cmp
04998     00 FA 0D F2 | 	cmp	result1, #0 wz
0499c     AC 09 90 AD |  if_e	jmp	#LR__0327
049a0     81 01 00 FF 
049a4     40 15 06 F6 | 	mov	arg02, ##@LR__5182
049a8     0F 13 02 F6 | 	mov	arg01, local01
049ac     C4 BE B1 FD | 	call	#__system___string_cmp
049b0     00 FA 0D F2 | 	cmp	result1, #0 wz
049b4     9C 09 90 AD |  if_e	jmp	#LR__0328
049b8     81 01 00 FF 
049bc     44 15 06 F6 | 	mov	arg02, ##@LR__5183
049c0     0F 13 02 F6 | 	mov	arg01, local01
049c4     AC BE B1 FD | 	call	#__system___string_cmp
049c8     00 FA 0D F2 | 	cmp	result1, #0 wz
049cc     8C 09 90 AD |  if_e	jmp	#LR__0329
049d0     81 01 00 FF 
049d4     48 15 06 F6 | 	mov	arg02, ##@LR__5184
049d8     0F 13 02 F6 | 	mov	arg01, local01
049dc     94 BE B1 FD | 	call	#__system___string_cmp
049e0     00 FA 0D F2 | 	cmp	result1, #0 wz
049e4     7C 09 90 AD |  if_e	jmp	#LR__0330
049e8     81 01 00 FF 
049ec     4E 15 06 F6 | 	mov	arg02, ##@LR__5185
049f0     0F 13 02 F6 | 	mov	arg01, local01
049f4     7C BE B1 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     6C 09 90 AD |  if_e	jmp	#LR__0331
04a00     81 01 00 FF 
04a04     53 15 06 F6 | 	mov	arg02, ##@LR__5186
04a08     0F 13 02 F6 | 	mov	arg01, local01
04a0c     64 BE B1 FD | 	call	#__system___string_cmp
04a10     00 FA 0D F2 | 	cmp	result1, #0 wz
04a14     5C 09 90 AD |  if_e	jmp	#LR__0332
04a18     81 01 00 FF 
04a1c     57 15 06 F6 | 	mov	arg02, ##@LR__5187
04a20     0F 13 02 F6 | 	mov	arg01, local01
04a24     4C BE B1 FD | 	call	#__system___string_cmp
04a28     00 FA 0D F2 | 	cmp	result1, #0 wz
04a2c     4C 09 90 AD |  if_e	jmp	#LR__0333
04a30     81 01 00 FF 
04a34     5C 15 06 F6 | 	mov	arg02, ##@LR__5188
04a38     0F 13 02 F6 | 	mov	arg01, local01
04a3c     34 BE B1 FD | 	call	#__system___string_cmp
04a40     00 FA 0D F2 | 	cmp	result1, #0 wz
04a44     3C 09 90 AD |  if_e	jmp	#LR__0334
04a48     81 01 00 FF 
04a4c     60 15 06 F6 | 	mov	arg02, ##@LR__5189
04a50     0F 13 02 F6 | 	mov	arg01, local01
04a54     1C BE B1 FD | 	call	#__system___string_cmp
04a58     00 FA 0D F2 | 	cmp	result1, #0 wz
04a5c     2C 09 90 AD |  if_e	jmp	#LR__0335
04a60     81 01 00 FF 
04a64     66 15 06 F6 | 	mov	arg02, ##@LR__5190
04a68     0F 13 02 F6 | 	mov	arg01, local01
04a6c     04 BE B1 FD | 	call	#__system___string_cmp
04a70     00 FA 0D F2 | 	cmp	result1, #0 wz
04a74     1C 09 90 AD |  if_e	jmp	#LR__0336
04a78     81 01 00 FF 
04a7c     69 15 06 F6 | 	mov	arg02, ##@LR__5191
04a80     0F 13 02 F6 | 	mov	arg01, local01
04a84     EC BD B1 FD | 	call	#__system___string_cmp
04a88     00 FA 0D F2 | 	cmp	result1, #0 wz
04a8c     0C 09 90 AD |  if_e	jmp	#LR__0337
04a90     81 01 00 FF 
04a94     71 15 06 F6 | 	mov	arg02, ##@LR__5192
04a98     0F 13 02 F6 | 	mov	arg01, local01
04a9c     D4 BD B1 FD | 	call	#__system___string_cmp
04aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa4     FC 08 90 AD |  if_e	jmp	#LR__0338
04aa8     81 01 00 FF 
04aac     75 15 06 F6 | 	mov	arg02, ##@LR__5193
04ab0     0F 13 02 F6 | 	mov	arg01, local01
04ab4     BC BD B1 FD | 	call	#__system___string_cmp
04ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
04abc     EC 08 90 AD |  if_e	jmp	#LR__0339
04ac0     81 01 00 FF 
04ac4     7A 15 06 F6 | 	mov	arg02, ##@LR__5194
04ac8     0F 13 02 F6 | 	mov	arg01, local01
04acc     A4 BD B1 FD | 	call	#__system___string_cmp
04ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad4     DC 08 90 AD |  if_e	jmp	#LR__0340
04ad8     81 01 00 FF 
04adc     7E 15 06 F6 | 	mov	arg02, ##@LR__5195
04ae0     0F 13 02 F6 | 	mov	arg01, local01
04ae4     8C BD B1 FD | 	call	#__system___string_cmp
04ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
04aec     CC 08 90 AD |  if_e	jmp	#LR__0341
04af0     81 01 00 FF 
04af4     83 15 06 F6 | 	mov	arg02, ##@LR__5196
04af8     0F 13 02 F6 | 	mov	arg01, local01
04afc     74 BD B1 FD | 	call	#__system___string_cmp
04b00     00 FA 0D F2 | 	cmp	result1, #0 wz
04b04     BC 08 90 AD |  if_e	jmp	#LR__0342
04b08     81 01 00 FF 
04b0c     87 15 06 F6 | 	mov	arg02, ##@LR__5197
04b10     0F 13 02 F6 | 	mov	arg01, local01
04b14     5C BD B1 FD | 	call	#__system___string_cmp
04b18     00 FA 0D F2 | 	cmp	result1, #0 wz
04b1c     AC 08 90 AD |  if_e	jmp	#LR__0343
04b20     81 01 00 FF 
04b24     8A 15 06 F6 | 	mov	arg02, ##@LR__5198
04b28     0F 13 02 F6 | 	mov	arg01, local01
04b2c     44 BD B1 FD | 	call	#__system___string_cmp
04b30     00 FA 0D F2 | 	cmp	result1, #0 wz
04b34     9C 08 90 AD |  if_e	jmp	#LR__0344
04b38     81 01 00 FF 
04b3c     90 15 06 F6 | 	mov	arg02, ##@LR__5199
04b40     0F 13 02 F6 | 	mov	arg01, local01
04b44     2C BD B1 FD | 	call	#__system___string_cmp
04b48     00 FA 0D F2 | 	cmp	result1, #0 wz
04b4c     8C 08 90 AD |  if_e	jmp	#LR__0345
04b50     81 01 00 FF 
04b54     94 15 06 F6 | 	mov	arg02, ##@LR__5200
04b58     0F 13 02 F6 | 	mov	arg01, local01
04b5c     14 BD B1 FD | 	call	#__system___string_cmp
04b60     00 FA 0D F2 | 	cmp	result1, #0 wz
04b64     7C 08 90 AD |  if_e	jmp	#LR__0346
04b68     81 01 00 FF 
04b6c     98 15 06 F6 | 	mov	arg02, ##@LR__5201
04b70     0F 13 02 F6 | 	mov	arg01, local01
04b74     FC BC B1 FD | 	call	#__system___string_cmp
04b78     00 FA 0D F2 | 	cmp	result1, #0 wz
04b7c     6C 08 90 AD |  if_e	jmp	#LR__0347
04b80     81 01 00 FF 
04b84     9E 15 06 F6 | 	mov	arg02, ##@LR__5202
04b88     0F 13 02 F6 | 	mov	arg01, local01
04b8c     E4 BC B1 FD | 	call	#__system___string_cmp
04b90     00 FA 0D F2 | 	cmp	result1, #0 wz
04b94     5C 08 90 AD |  if_e	jmp	#LR__0348
04b98     81 01 00 FF 
04b9c     A3 15 06 F6 | 	mov	arg02, ##@LR__5203
04ba0     0F 13 02 F6 | 	mov	arg01, local01
04ba4     CC BC B1 FD | 	call	#__system___string_cmp
04ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bac     4C 08 90 AD |  if_e	jmp	#LR__0349
04bb0     81 01 00 FF 
04bb4     A6 15 06 F6 | 	mov	arg02, ##@LR__5204
04bb8     0F 13 02 F6 | 	mov	arg01, local01
04bbc     B4 BC B1 FD | 	call	#__system___string_cmp
04bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc4     3C 08 90 AD |  if_e	jmp	#LR__0350
04bc8     81 01 00 FF 
04bcc     A9 15 06 F6 | 	mov	arg02, ##@LR__5205
04bd0     0F 13 02 F6 | 	mov	arg01, local01
04bd4     9C BC B1 FD | 	call	#__system___string_cmp
04bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bdc     2C 08 90 AD |  if_e	jmp	#LR__0351
04be0     81 01 00 FF 
04be4     AD 15 06 F6 | 	mov	arg02, ##@LR__5206
04be8     0F 13 02 F6 | 	mov	arg01, local01
04bec     84 BC B1 FD | 	call	#__system___string_cmp
04bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf4     1C 08 90 AD |  if_e	jmp	#LR__0352
04bf8     81 01 00 FF 
04bfc     B0 15 06 F6 | 	mov	arg02, ##@LR__5207
04c00     0F 13 02 F6 | 	mov	arg01, local01
04c04     6C BC B1 FD | 	call	#__system___string_cmp
04c08     00 FA 0D F2 | 	cmp	result1, #0 wz
04c0c     0C 08 90 AD |  if_e	jmp	#LR__0353
04c10     81 01 00 FF 
04c14     B5 15 06 F6 | 	mov	arg02, ##@LR__5208
04c18     0F 13 02 F6 | 	mov	arg01, local01
04c1c     54 BC B1 FD | 	call	#__system___string_cmp
04c20     00 FA 0D F2 | 	cmp	result1, #0 wz
04c24     FC 07 90 AD |  if_e	jmp	#LR__0354
04c28     81 01 00 FF 
04c2c     B8 15 06 F6 | 	mov	arg02, ##@LR__5209
04c30     0F 13 02 F6 | 	mov	arg01, local01
04c34     3C BC B1 FD | 	call	#__system___string_cmp
04c38     00 FA 0D F2 | 	cmp	result1, #0 wz
04c3c     EC 07 90 AD |  if_e	jmp	#LR__0355
04c40     81 01 00 FF 
04c44     BD 15 06 F6 | 	mov	arg02, ##@LR__5210
04c48     0F 13 02 F6 | 	mov	arg01, local01
04c4c     24 BC B1 FD | 	call	#__system___string_cmp
04c50     00 FA 0D F2 | 	cmp	result1, #0 wz
04c54     DC 07 90 AD |  if_e	jmp	#LR__0356
04c58     81 01 00 FF 
04c5c     C1 15 06 F6 | 	mov	arg02, ##@LR__5211
04c60     0F 13 02 F6 | 	mov	arg01, local01
04c64     0C BC B1 FD | 	call	#__system___string_cmp
04c68     00 FA 0D F2 | 	cmp	result1, #0 wz
04c6c     CC 07 90 AD |  if_e	jmp	#LR__0357
04c70     81 01 00 FF 
04c74     C7 15 06 F6 | 	mov	arg02, ##@LR__5212
04c78     0F 13 02 F6 | 	mov	arg01, local01
04c7c     F4 BB B1 FD | 	call	#__system___string_cmp
04c80     00 FA 0D F2 | 	cmp	result1, #0 wz
04c84     BC 07 90 AD |  if_e	jmp	#LR__0358
04c88     81 01 00 FF 
04c8c     CC 15 06 F6 | 	mov	arg02, ##@LR__5213
04c90     0F 13 02 F6 | 	mov	arg01, local01
04c94     DC BB B1 FD | 	call	#__system___string_cmp
04c98     00 FA 0D F2 | 	cmp	result1, #0 wz
04c9c     AC 07 90 AD |  if_e	jmp	#LR__0359
04ca0     81 01 00 FF 
04ca4     CF 15 06 F6 | 	mov	arg02, ##@LR__5214
04ca8     0F 13 02 F6 | 	mov	arg01, local01
04cac     C4 BB B1 FD | 	call	#__system___string_cmp
04cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb4     9C 07 90 AD |  if_e	jmp	#LR__0360
04cb8     81 01 00 FF 
04cbc     D5 15 06 F6 | 	mov	arg02, ##@LR__5215
04cc0     0F 13 02 F6 | 	mov	arg01, local01
04cc4     AC BB B1 FD | 	call	#__system___string_cmp
04cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ccc     8C 07 90 AD |  if_e	jmp	#LR__0361
04cd0     81 01 00 FF 
04cd4     D9 15 06 F6 | 	mov	arg02, ##@LR__5216
04cd8     0F 13 02 F6 | 	mov	arg01, local01
04cdc     94 BB B1 FD | 	call	#__system___string_cmp
04ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce4     7C 07 90 AD |  if_e	jmp	#LR__0362
04ce8     81 01 00 FF 
04cec     DE 15 06 F6 | 	mov	arg02, ##@LR__5217
04cf0     0F 13 02 F6 | 	mov	arg01, local01
04cf4     7C BB B1 FD | 	call	#__system___string_cmp
04cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cfc     6C 07 90 AD |  if_e	jmp	#LR__0363
04d00     81 01 00 FF 
04d04     E1 15 06 F6 | 	mov	arg02, ##@LR__5218
04d08     0F 13 02 F6 | 	mov	arg01, local01
04d0c     64 BB B1 FD | 	call	#__system___string_cmp
04d10     00 FA 0D F2 | 	cmp	result1, #0 wz
04d14     5C 07 90 AD |  if_e	jmp	#LR__0364
04d18     81 01 00 FF 
04d1c     E6 15 06 F6 | 	mov	arg02, ##@LR__5219
04d20     0F 13 02 F6 | 	mov	arg01, local01
04d24     4C BB B1 FD | 	call	#__system___string_cmp
04d28     00 FA 0D F2 | 	cmp	result1, #0 wz
04d2c     4C 07 90 AD |  if_e	jmp	#LR__0365
04d30     81 01 00 FF 
04d34     EC 15 06 F6 | 	mov	arg02, ##@LR__5220
04d38     0F 13 02 F6 | 	mov	arg01, local01
04d3c     34 BB B1 FD | 	call	#__system___string_cmp
04d40     00 FA 0D F2 | 	cmp	result1, #0 wz
04d44     3C 07 90 AD |  if_e	jmp	#LR__0366
04d48     81 01 00 FF 
04d4c     F0 15 06 F6 | 	mov	arg02, ##@LR__5221
04d50     0F 13 02 F6 | 	mov	arg01, local01
04d54     1C BB B1 FD | 	call	#__system___string_cmp
04d58     00 FA 0D F2 | 	cmp	result1, #0 wz
04d5c     2C 07 90 AD |  if_e	jmp	#LR__0367
04d60     81 01 00 FF 
04d64     F9 15 06 F6 | 	mov	arg02, ##@LR__5222
04d68     0F 13 02 F6 | 	mov	arg01, local01
04d6c     04 BB B1 FD | 	call	#__system___string_cmp
04d70     00 FA 0D F2 | 	cmp	result1, #0 wz
04d74     1C 07 90 AD |  if_e	jmp	#LR__0368
04d78     81 01 00 FF 
04d7c     FF 15 06 F6 | 	mov	arg02, ##@LR__5223
04d80     0F 13 02 F6 | 	mov	arg01, local01
04d84     EC BA B1 FD | 	call	#__system___string_cmp
04d88     00 FA 0D F2 | 	cmp	result1, #0 wz
04d8c     0C 07 90 AD |  if_e	jmp	#LR__0369
04d90     82 01 00 FF 
04d94     05 14 06 F6 | 	mov	arg02, ##@LR__5224
04d98     0F 13 02 F6 | 	mov	arg01, local01
04d9c     D4 BA B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     FC 06 90 AD |  if_e	jmp	#LR__0370
04da8     82 01 00 FF 
04dac     0E 14 06 F6 | 	mov	arg02, ##@LR__5225
04db0     0F 13 02 F6 | 	mov	arg01, local01
04db4     BC BA B1 FD | 	call	#__system___string_cmp
04db8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dbc     EC 06 90 AD |  if_e	jmp	#LR__0371
04dc0     82 01 00 FF 
04dc4     18 14 06 F6 | 	mov	arg02, ##@LR__5226
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     A4 BA B1 FD | 	call	#__system___string_cmp
04dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd4     DC 06 90 AD |  if_e	jmp	#LR__0372
04dd8     82 01 00 FF 
04ddc     21 14 06 F6 | 	mov	arg02, ##@LR__5227
04de0     0F 13 02 F6 | 	mov	arg01, local01
04de4     8C BA B1 FD | 	call	#__system___string_cmp
04de8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dec     CC 06 90 AD |  if_e	jmp	#LR__0373
04df0     82 01 00 FF 
04df4     26 14 06 F6 | 	mov	arg02, ##@LR__5228
04df8     0F 13 02 F6 | 	mov	arg01, local01
04dfc     74 BA B1 FD | 	call	#__system___string_cmp
04e00     00 FA 0D F2 | 	cmp	result1, #0 wz
04e04     BC 06 90 AD |  if_e	jmp	#LR__0374
04e08     82 01 00 FF 
04e0c     29 14 06 F6 | 	mov	arg02, ##@LR__5229
04e10     0F 13 02 F6 | 	mov	arg01, local01
04e14     5C BA B1 FD | 	call	#__system___string_cmp
04e18     00 FA 0D F2 | 	cmp	result1, #0 wz
04e1c     AC 06 90 AD |  if_e	jmp	#LR__0375
04e20     82 01 00 FF 
04e24     2E 14 06 F6 | 	mov	arg02, ##@LR__5230
04e28     0F 13 02 F6 | 	mov	arg01, local01
04e2c     44 BA B1 FD | 	call	#__system___string_cmp
04e30     00 FA 0D F2 | 	cmp	result1, #0 wz
04e34     9C 06 90 AD |  if_e	jmp	#LR__0376
04e38     82 01 00 FF 
04e3c     32 14 06 F6 | 	mov	arg02, ##@LR__5231
04e40     0F 13 02 F6 | 	mov	arg01, local01
04e44     2C BA B1 FD | 	call	#__system___string_cmp
04e48     00 FA 0D F2 | 	cmp	result1, #0 wz
04e4c     8C 06 90 AD |  if_e	jmp	#LR__0377
04e50     82 01 00 FF 
04e54     37 14 06 F6 | 	mov	arg02, ##@LR__5232
04e58     0F 13 02 F6 | 	mov	arg01, local01
04e5c     14 BA B1 FD | 	call	#__system___string_cmp
04e60     00 FA 0D F2 | 	cmp	result1, #0 wz
04e64     7C 06 90 AD |  if_e	jmp	#LR__0378
04e68     82 01 00 FF 
04e6c     3B 14 06 F6 | 	mov	arg02, ##@LR__5233
04e70     0F 13 02 F6 | 	mov	arg01, local01
04e74     FC B9 B1 FD | 	call	#__system___string_cmp
04e78     00 FA 0D F2 | 	cmp	result1, #0 wz
04e7c     6C 06 90 AD |  if_e	jmp	#LR__0379
04e80     82 01 00 FF 
04e84     44 14 06 F6 | 	mov	arg02, ##@LR__5234
04e88     0F 13 02 F6 | 	mov	arg01, local01
04e8c     E4 B9 B1 FD | 	call	#__system___string_cmp
04e90     00 FA 0D F2 | 	cmp	result1, #0 wz
04e94     5C 06 90 AD |  if_e	jmp	#LR__0380
04e98     82 01 00 FF 
04e9c     49 14 06 F6 | 	mov	arg02, ##@LR__5235
04ea0     0F 13 02 F6 | 	mov	arg01, local01
04ea4     CC B9 B1 FD | 	call	#__system___string_cmp
04ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eac     4C 06 90 AD |  if_e	jmp	#LR__0381
04eb0     82 01 00 FF 
04eb4     4F 14 06 F6 | 	mov	arg02, ##@LR__5236
04eb8     0F 13 02 F6 | 	mov	arg01, local01
04ebc     B4 B9 B1 FD | 	call	#__system___string_cmp
04ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec4     3C 06 90 AD |  if_e	jmp	#LR__0382
04ec8     82 01 00 FF 
04ecc     51 14 06 F6 | 	mov	arg02, ##@LR__5237
04ed0     0F 13 02 F6 | 	mov	arg01, local01
04ed4     9C B9 B1 FD | 	call	#__system___string_cmp
04ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
04edc     2C 06 90 AD |  if_e	jmp	#LR__0383
04ee0     82 01 00 FF 
04ee4     55 14 06 F6 | 	mov	arg02, ##@LR__5238
04ee8     0F 13 02 F6 | 	mov	arg01, local01
04eec     84 B9 B1 FD | 	call	#__system___string_cmp
04ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef4     1C 06 90 AD |  if_e	jmp	#LR__0384
04ef8     82 01 00 FF 
04efc     59 14 06 F6 | 	mov	arg02, ##@LR__5239
04f00     0F 13 02 F6 | 	mov	arg01, local01
04f04     6C B9 B1 FD | 	call	#__system___string_cmp
04f08     00 FA 0D F2 | 	cmp	result1, #0 wz
04f0c     0C 06 90 AD |  if_e	jmp	#LR__0385
04f10     82 01 00 FF 
04f14     61 14 06 F6 | 	mov	arg02, ##@LR__5240
04f18     0F 13 02 F6 | 	mov	arg01, local01
04f1c     54 B9 B1 FD | 	call	#__system___string_cmp
04f20     00 FA 0D F2 | 	cmp	result1, #0 wz
04f24     FC 05 90 AD |  if_e	jmp	#LR__0386
04f28     82 01 00 FF 
04f2c     65 14 06 F6 | 	mov	arg02, ##@LR__5241
04f30     0F 13 02 F6 | 	mov	arg01, local01
04f34     3C B9 B1 FD | 	call	#__system___string_cmp
04f38     00 FA 0D F2 | 	cmp	result1, #0 wz
04f3c     EC 05 90 AD |  if_e	jmp	#LR__0387
04f40     82 01 00 FF 
04f44     67 14 06 F6 | 	mov	arg02, ##@LR__5242
04f48     0F 13 02 F6 | 	mov	arg01, local01
04f4c     24 B9 B1 FD | 	call	#__system___string_cmp
04f50     00 FA 0D F2 | 	cmp	result1, #0 wz
04f54     DC 05 90 AD |  if_e	jmp	#LR__0388
04f58     82 01 00 FF 
04f5c     6E 14 06 F6 | 	mov	arg02, ##@LR__5243
04f60     0F 13 02 F6 | 	mov	arg01, local01
04f64     0C B9 B1 FD | 	call	#__system___string_cmp
04f68     00 FA 0D F2 | 	cmp	result1, #0 wz
04f6c     CC 05 90 AD |  if_e	jmp	#LR__0389
04f70     82 01 00 FF 
04f74     72 14 06 F6 | 	mov	arg02, ##@LR__5244
04f78     0F 13 02 F6 | 	mov	arg01, local01
04f7c     F4 B8 B1 FD | 	call	#__system___string_cmp
04f80     00 FA 0D F2 | 	cmp	result1, #0 wz
04f84     BC 05 90 AD |  if_e	jmp	#LR__0390
04f88     82 01 00 FF 
04f8c     77 14 06 F6 | 	mov	arg02, ##@LR__5245
04f90     0F 13 02 F6 | 	mov	arg01, local01
04f94     DC B8 B1 FD | 	call	#__system___string_cmp
04f98     00 FA 0D F2 | 	cmp	result1, #0 wz
04f9c     AC 05 90 AD |  if_e	jmp	#LR__0391
04fa0     82 01 00 FF 
04fa4     7A 14 06 F6 | 	mov	arg02, ##@LR__5246
04fa8     0F 13 02 F6 | 	mov	arg01, local01
04fac     C4 B8 B1 FD | 	call	#__system___string_cmp
04fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb4     9C 05 90 AD |  if_e	jmp	#LR__0392
04fb8     82 01 00 FF 
04fbc     83 14 06 F6 | 	mov	arg02, ##@LR__5247
04fc0     0F 13 02 F6 | 	mov	arg01, local01
04fc4     AC B8 B1 FD | 	call	#__system___string_cmp
04fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fcc     8C 05 90 AD |  if_e	jmp	#LR__0393
04fd0     82 01 00 FF 
04fd4     87 14 06 F6 | 	mov	arg02, ##@LR__5248
04fd8     0F 13 02 F6 | 	mov	arg01, local01
04fdc     94 B8 B1 FD | 	call	#__system___string_cmp
04fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe4     7C 05 90 AD |  if_e	jmp	#LR__0394
04fe8     82 01 00 FF 
04fec     8E 14 06 F6 | 	mov	arg02, ##@LR__5249
04ff0     0F 13 02 F6 | 	mov	arg01, local01
04ff4     7C B8 B1 FD | 	call	#__system___string_cmp
04ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ffc     6C 05 90 AD |  if_e	jmp	#LR__0395
05000     82 01 00 FF 
05004     92 14 06 F6 | 	mov	arg02, ##@LR__5250
05008     0F 13 02 F6 | 	mov	arg01, local01
0500c     64 B8 B1 FD | 	call	#__system___string_cmp
05010     00 FA 0D F2 | 	cmp	result1, #0 wz
05014     5C 05 90 AD |  if_e	jmp	#LR__0396
05018     82 01 00 FF 
0501c     99 14 06 F6 | 	mov	arg02, ##@LR__5251
05020     0F 13 02 F6 | 	mov	arg01, local01
05024     4C B8 B1 FD | 	call	#__system___string_cmp
05028     00 FA 0D F2 | 	cmp	result1, #0 wz
0502c     4C 05 90 AD |  if_e	jmp	#LR__0397
05030     82 01 00 FF 
05034     9D 14 06 F6 | 	mov	arg02, ##@LR__5252
05038     0F 13 02 F6 | 	mov	arg01, local01
0503c     34 B8 B1 FD | 	call	#__system___string_cmp
05040     00 FA 0D F2 | 	cmp	result1, #0 wz
05044     3C 05 90 AD |  if_e	jmp	#LR__0398
05048     82 01 00 FF 
0504c     A4 14 06 F6 | 	mov	arg02, ##@LR__5253
05050     0F 13 02 F6 | 	mov	arg01, local01
05054     1C B8 B1 FD | 	call	#__system___string_cmp
05058     00 FA 0D F2 | 	cmp	result1, #0 wz
0505c     2C 05 90 AD |  if_e	jmp	#LR__0399
05060     82 01 00 FF 
05064     A7 14 06 F6 | 	mov	arg02, ##@LR__5254
05068     0F 13 02 F6 | 	mov	arg01, local01
0506c     04 B8 B1 FD | 	call	#__system___string_cmp
05070     00 FA 0D F2 | 	cmp	result1, #0 wz
05074     1C 05 90 AD |  if_e	jmp	#LR__0400
05078     82 01 00 FF 
0507c     B2 14 06 F6 | 	mov	arg02, ##@LR__5255
05080     0F 13 02 F6 | 	mov	arg01, local01
05084     EC B7 B1 FD | 	call	#__system___string_cmp
05088     00 FA 0D F2 | 	cmp	result1, #0 wz
0508c     0C 05 90 AD |  if_e	jmp	#LR__0401
05090     82 01 00 FF 
05094     B6 14 06 F6 | 	mov	arg02, ##@LR__5256
05098     0F 13 02 F6 | 	mov	arg01, local01
0509c     D4 B7 B1 FD | 	call	#__system___string_cmp
050a0     00 FA 0D F2 | 	cmp	result1, #0 wz
050a4     FC 04 90 AD |  if_e	jmp	#LR__0402
050a8     82 01 00 FF 
050ac     BD 14 06 F6 | 	mov	arg02, ##@LR__5257
050b0     0F 13 02 F6 | 	mov	arg01, local01
050b4     BC B7 B1 FD | 	call	#__system___string_cmp
050b8     00 FA 0D F2 | 	cmp	result1, #0 wz
050bc     EC 04 90 AD |  if_e	jmp	#LR__0403
050c0     82 01 00 FF 
050c4     C1 14 06 F6 | 	mov	arg02, ##@LR__5258
050c8     0F 13 02 F6 | 	mov	arg01, local01
050cc     A4 B7 B1 FD | 	call	#__system___string_cmp
050d0     00 FA 0D F2 | 	cmp	result1, #0 wz
050d4     DC 04 90 AD |  if_e	jmp	#LR__0404
050d8     82 01 00 FF 
050dc     C9 14 06 F6 | 	mov	arg02, ##@LR__5259
050e0     0F 13 02 F6 | 	mov	arg01, local01
050e4     8C B7 B1 FD | 	call	#__system___string_cmp
050e8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ec     CC 04 90 AD |  if_e	jmp	#LR__0405
050f0     82 01 00 FF 
050f4     CD 14 06 F6 | 	mov	arg02, ##@LR__5260
050f8     0F 13 02 F6 | 	mov	arg01, local01
050fc     74 B7 B1 FD | 	call	#__system___string_cmp
05100     00 FA 0D F2 | 	cmp	result1, #0 wz
05104     BC 04 90 AD |  if_e	jmp	#LR__0406
05108     82 01 00 FF 
0510c     D4 14 06 F6 | 	mov	arg02, ##@LR__5261
05110     0F 13 02 F6 | 	mov	arg01, local01
05114     5C B7 B1 FD | 	call	#__system___string_cmp
05118     00 FA 0D F2 | 	cmp	result1, #0 wz
0511c     AC 04 90 AD |  if_e	jmp	#LR__0407
05120     82 01 00 FF 
05124     DB 14 06 F6 | 	mov	arg02, ##@LR__5262
05128     0F 13 02 F6 | 	mov	arg01, local01
0512c     44 B7 B1 FD | 	call	#__system___string_cmp
05130     00 FA 0D F2 | 	cmp	result1, #0 wz
05134     9C 04 90 AD |  if_e	jmp	#LR__0408
05138     82 01 00 FF 
0513c     DF 14 06 F6 | 	mov	arg02, ##@LR__5263
05140     0F 13 02 F6 | 	mov	arg01, local01
05144     2C B7 B1 FD | 	call	#__system___string_cmp
05148     00 FA 0D F2 | 	cmp	result1, #0 wz
0514c     8C 04 90 AD |  if_e	jmp	#LR__0409
05150     82 01 00 FF 
05154     E5 14 06 F6 | 	mov	arg02, ##@LR__5264
05158     0F 13 02 F6 | 	mov	arg01, local01
0515c     14 B7 B1 FD | 	call	#__system___string_cmp
05160     00 FA 0D F2 | 	cmp	result1, #0 wz
05164     7C 04 90 AD |  if_e	jmp	#LR__0410
05168     82 01 00 FF 
0516c     E9 14 06 F6 | 	mov	arg02, ##@LR__5265
05170     0F 13 02 F6 | 	mov	arg01, local01
05174     FC B6 B1 FD | 	call	#__system___string_cmp
05178     00 FA 0D F2 | 	cmp	result1, #0 wz
0517c     6C 04 90 AD |  if_e	jmp	#LR__0411
05180     82 01 00 FF 
05184     F0 14 06 F6 | 	mov	arg02, ##@LR__5266
05188     0F 13 02 F6 | 	mov	arg01, local01
0518c     E4 B6 B1 FD | 	call	#__system___string_cmp
05190     00 FA 0D F2 | 	cmp	result1, #0 wz
05194     5C 04 90 AD |  if_e	jmp	#LR__0412
05198     82 01 00 FF 
0519c     F5 14 06 F6 | 	mov	arg02, ##@LR__5267
051a0     0F 13 02 F6 | 	mov	arg01, local01
051a4     CC B6 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     4C 04 90 AD |  if_e	jmp	#LR__0413
051b0     82 01 00 FF 
051b4     FA 14 06 F6 | 	mov	arg02, ##@LR__5268
051b8     0F 13 02 F6 | 	mov	arg01, local01
051bc     B4 B6 B1 FD | 	call	#__system___string_cmp
051c0     00 FA 0D F2 | 	cmp	result1, #0 wz
051c4     3C 04 90 AD |  if_e	jmp	#LR__0414
051c8     82 01 00 FF 
051cc     01 15 06 F6 | 	mov	arg02, ##@LR__5269
051d0     0F 13 02 F6 | 	mov	arg01, local01
051d4     9C B6 B1 FD | 	call	#__system___string_cmp
051d8     00 FA 0D F2 | 	cmp	result1, #0 wz
051dc     2C 04 90 AD |  if_e	jmp	#LR__0415
051e0     82 01 00 FF 
051e4     04 15 06 F6 | 	mov	arg02, ##@LR__5270
051e8     0F 13 02 F6 | 	mov	arg01, local01
051ec     84 B6 B1 FD | 	call	#__system___string_cmp
051f0     00 FA 0D F2 | 	cmp	result1, #0 wz
051f4     1C 04 90 AD |  if_e	jmp	#LR__0416
051f8     82 01 00 FF 
051fc     0E 15 06 F6 | 	mov	arg02, ##@LR__5271
05200     0F 13 02 F6 | 	mov	arg01, local01
05204     6C B6 B1 FD | 	call	#__system___string_cmp
05208     00 FA 0D F2 | 	cmp	result1, #0 wz
0520c     0C 04 90 AD |  if_e	jmp	#LR__0417
05210     82 01 00 FF 
05214     12 15 06 F6 | 	mov	arg02, ##@LR__5272
05218     0F 13 02 F6 | 	mov	arg01, local01
0521c     54 B6 B1 FD | 	call	#__system___string_cmp
05220     00 FA 0D F2 | 	cmp	result1, #0 wz
05224     FC 03 90 AD |  if_e	jmp	#LR__0418
05228     82 01 00 FF 
0522c     1A 15 06 F6 | 	mov	arg02, ##@LR__5273
05230     0F 13 02 F6 | 	mov	arg01, local01
05234     3C B6 B1 FD | 	call	#__system___string_cmp
05238     00 FA 0D F2 | 	cmp	result1, #0 wz
0523c     EC 03 90 AD |  if_e	jmp	#LR__0419
05240     82 01 00 FF 
05244     1E 15 06 F6 | 	mov	arg02, ##@LR__5274
05248     0F 13 02 F6 | 	mov	arg01, local01
0524c     24 B6 B1 FD | 	call	#__system___string_cmp
05250     00 FA 0D F2 | 	cmp	result1, #0 wz
05254     DC 03 90 AD |  if_e	jmp	#LR__0420
05258     82 01 00 FF 
0525c     24 15 06 F6 | 	mov	arg02, ##@LR__5275
05260     0F 13 02 F6 | 	mov	arg01, local01
05264     0C B6 B1 FD | 	call	#__system___string_cmp
05268     00 FA 0D F2 | 	cmp	result1, #0 wz
0526c     CC 03 90 AD |  if_e	jmp	#LR__0421
05270     D0 03 90 FD | 	jmp	#LR__0422
05274                 | LR__0300
05274     5C FA 05 F6 | 	mov	result1, #92
05278     CC 03 90 FD | 	jmp	#LR__0423
0527c                 | LR__0301
0527c     5C FA 05 F6 | 	mov	result1, #92
05280     C4 03 90 FD | 	jmp	#LR__0423
05284                 | LR__0302
05284     47 FA 05 F6 | 	mov	result1, #71
05288     BC 03 90 FD | 	jmp	#LR__0423
0528c                 | LR__0303
0528c     59 FA 05 F6 | 	mov	result1, #89
05290     B4 03 90 FD | 	jmp	#LR__0423
05294                 | LR__0304
05294     59 FA 05 F6 | 	mov	result1, #89
05298     AC 03 90 FD | 	jmp	#LR__0423
0529c                 | LR__0305
0529c     AE FA 05 F6 | 	mov	result1, #174
052a0     A4 03 90 FD | 	jmp	#LR__0423
052a4                 | LR__0306
052a4     AE FA 05 F6 | 	mov	result1, #174
052a8     9C 03 90 FD | 	jmp	#LR__0423
052ac                 | LR__0307
052ac     B1 FA 05 F6 | 	mov	result1, #177
052b0     94 03 90 FD | 	jmp	#LR__0423
052b4                 | LR__0308
052b4     B1 FA 05 F6 | 	mov	result1, #177
052b8     8C 03 90 FD | 	jmp	#LR__0423
052bc                 | LR__0309
052bc     AF FA 05 F6 | 	mov	result1, #175
052c0     84 03 90 FD | 	jmp	#LR__0423
052c4                 | LR__0310
052c4     AF FA 05 F6 | 	mov	result1, #175
052c8     7C 03 90 FD | 	jmp	#LR__0423
052cc                 | LR__0311
052cc     B0 FA 05 F6 | 	mov	result1, #176
052d0     74 03 90 FD | 	jmp	#LR__0423
052d4                 | LR__0312
052d4     B0 FA 05 F6 | 	mov	result1, #176
052d8     6C 03 90 FD | 	jmp	#LR__0423
052dc                 | LR__0313
052dc     45 FA 05 F6 | 	mov	result1, #69
052e0     64 03 90 FD | 	jmp	#LR__0423
052e4                 | LR__0314
052e4     45 FA 05 F6 | 	mov	result1, #69
052e8     5C 03 90 FD | 	jmp	#LR__0423
052ec                 | LR__0315
052ec     69 FA 05 F6 | 	mov	result1, #105
052f0     54 03 90 FD | 	jmp	#LR__0423
052f4                 | LR__0316
052f4     B4 FA 05 F6 | 	mov	result1, #180
052f8     4C 03 90 FD | 	jmp	#LR__0423
052fc                 | LR__0317
052fc     40 FA 05 F6 | 	mov	result1, #64
05300     44 03 90 FD | 	jmp	#LR__0423
05304                 | LR__0318
05304     49 FA 05 F6 | 	mov	result1, #73
05308     3C 03 90 FD | 	jmp	#LR__0423
0530c                 | LR__0319
0530c     49 FA 05 F6 | 	mov	result1, #73
05310     34 03 90 FD | 	jmp	#LR__0423
05314                 | LR__0320
05314     50 FA 05 F6 | 	mov	result1, #80
05318     2C 03 90 FD | 	jmp	#LR__0423
0531c                 | LR__0321
0531c     50 FA 05 F6 | 	mov	result1, #80
05320     24 03 90 FD | 	jmp	#LR__0423
05324                 | LR__0322
05324     68 FA 05 F6 | 	mov	result1, #104
05328     1C 03 90 FD | 	jmp	#LR__0423
0532c                 | LR__0323
0532c     73 FA 05 F6 | 	mov	result1, #115
05330     14 03 90 FD | 	jmp	#LR__0423
05334                 | LR__0324
05334     74 FA 05 F6 | 	mov	result1, #116
05338     0C 03 90 FD | 	jmp	#LR__0423
0533c                 | LR__0325
0533c     6C FA 05 F6 | 	mov	result1, #108
05340     04 03 90 FD | 	jmp	#LR__0423
05344                 | LR__0326
05344     6C FA 05 F6 | 	mov	result1, #108
05348     FC 02 90 FD | 	jmp	#LR__0423
0534c                 | LR__0327
0534c     89 FA 05 F6 | 	mov	result1, #137
05350     F4 02 90 FD | 	jmp	#LR__0423
05354                 | LR__0328
05354     72 FA 05 F6 | 	mov	result1, #114
05358     EC 02 90 FD | 	jmp	#LR__0423
0535c                 | LR__0329
0535c     5D FA 05 F6 | 	mov	result1, #93
05360     E4 02 90 FD | 	jmp	#LR__0423
05364                 | LR__0330
05364     96 FA 05 F6 | 	mov	result1, #150
05368     DC 02 90 FD | 	jmp	#LR__0423
0536c                 | LR__0331
0536c     43 FA 05 F6 | 	mov	result1, #67
05370     D4 02 90 FD | 	jmp	#LR__0423
05374                 | LR__0332
05374     43 FA 05 F6 | 	mov	result1, #67
05378     CC 02 90 FD | 	jmp	#LR__0423
0537c                 | LR__0333
0537c     5A FA 05 F6 | 	mov	result1, #90
05380     C4 02 90 FD | 	jmp	#LR__0423
05384                 | LR__0334
05384     AB FA 05 F6 | 	mov	result1, #171
05388     BC 02 90 FD | 	jmp	#LR__0423
0538c                 | LR__0335
0538c     BD FA 05 F6 | 	mov	result1, #189
05390     B4 02 90 FD | 	jmp	#LR__0423
05394                 | LR__0336
05394     BD FA 05 F6 | 	mov	result1, #189
05398     AC 02 90 FD | 	jmp	#LR__0423
0539c                 | LR__0337
0539c     46 FA 05 F6 | 	mov	result1, #70
053a0     A4 02 90 FD | 	jmp	#LR__0423
053a4                 | LR__0338
053a4     46 FA 05 F6 | 	mov	result1, #70
053a8     9C 02 90 FD | 	jmp	#LR__0423
053ac                 | LR__0339
053ac     71 FA 05 F6 | 	mov	result1, #113
053b0     94 02 90 FD | 	jmp	#LR__0423
053b4                 | LR__0340
053b4     71 FA 05 F6 | 	mov	result1, #113
053b8     8C 02 90 FD | 	jmp	#LR__0423
053bc                 | LR__0341
053bc     60 FA 05 F6 | 	mov	result1, #96
053c0     84 02 90 FD | 	jmp	#LR__0423
053c4                 | LR__0342
053c4     4A FA 05 F6 | 	mov	result1, #74
053c8     7C 02 90 FD | 	jmp	#LR__0423
053cc                 | LR__0343
053cc     4A FA 05 F6 | 	mov	result1, #74
053d0     74 02 90 FD | 	jmp	#LR__0423
053d4                 | LR__0344
053d4     48 FA 05 F6 | 	mov	result1, #72
053d8     6C 02 90 FD | 	jmp	#LR__0423
053dc                 | LR__0345
053dc     48 FA 05 F6 | 	mov	result1, #72
053e0     64 02 90 FD | 	jmp	#LR__0423
053e4                 | LR__0346
053e4     BB FA 05 F6 | 	mov	result1, #187
053e8     5C 02 90 FD | 	jmp	#LR__0423
053ec                 | LR__0347
053ec     A9 FA 05 F6 | 	mov	result1, #169
053f0     54 02 90 FD | 	jmp	#LR__0423
053f4                 | LR__0348
053f4     4E FA 05 F6 | 	mov	result1, #78
053f8     4C 02 90 FD | 	jmp	#LR__0423
053fc                 | LR__0349
053fc     4E FA 05 F6 | 	mov	result1, #78
05400     44 02 90 FD | 	jmp	#LR__0423
05404                 | LR__0350
05404     58 FA 05 F6 | 	mov	result1, #88
05408     3C 02 90 FD | 	jmp	#LR__0423
0540c                 | LR__0351
0540c     5F FA 05 F6 | 	mov	result1, #95
05410     34 02 90 FD | 	jmp	#LR__0423
05414                 | LR__0352
05414     5F FA 05 F6 | 	mov	result1, #95
05418     2C 02 90 FD | 	jmp	#LR__0423
0541c                 | LR__0353
0541c     4C FA 05 F6 | 	mov	result1, #76
05420     24 02 90 FD | 	jmp	#LR__0423
05424                 | LR__0354
05424     4C FA 05 F6 | 	mov	result1, #76
05428     1C 02 90 FD | 	jmp	#LR__0423
0542c                 | LR__0355
0542c     52 FA 05 F6 | 	mov	result1, #82
05430     14 02 90 FD | 	jmp	#LR__0423
05434                 | LR__0356
05434     52 FA 05 F6 | 	mov	result1, #82
05438     0C 02 90 FD | 	jmp	#LR__0423
0543c                 | LR__0357
0543c     97 FA 05 F6 | 	mov	result1, #151
05440     04 02 90 FD | 	jmp	#LR__0423
05444                 | LR__0358
05444     61 FA 05 F6 | 	mov	result1, #97
05448     FC 01 90 FD | 	jmp	#LR__0423
0544c                 | LR__0359
0544c     61 FA 05 F6 | 	mov	result1, #97
05450     F4 01 90 FD | 	jmp	#LR__0423
05454                 | LR__0360
05454     63 FA 05 F6 | 	mov	result1, #99
05458     EC 01 90 FD | 	jmp	#LR__0423
0545c                 | LR__0361
0545c     41 FA 05 F6 | 	mov	result1, #65
05460     E4 01 90 FD | 	jmp	#LR__0423
05464                 | LR__0362
05464     4B FA 05 F6 | 	mov	result1, #75
05468     DC 01 90 FD | 	jmp	#LR__0423
0546c                 | LR__0363
0546c     4B FA 05 F6 | 	mov	result1, #75
05470     D4 01 90 FD | 	jmp	#LR__0423
05474                 | LR__0364
05474     B3 FA 05 F6 | 	mov	result1, #179
05478     CC 01 90 FD | 	jmp	#LR__0423
0547c                 | LR__0365
0547c     5E FA 05 F6 | 	mov	result1, #94
05480     C4 01 90 FD | 	jmp	#LR__0423
05484                 | LR__0366
05484     5E FA 05 F6 | 	mov	result1, #94
05488     BC 01 90 FD | 	jmp	#LR__0423
0548c                 | LR__0367
0548c     7C FA 05 F6 | 	mov	result1, #124
05490     B4 01 90 FD | 	jmp	#LR__0423
05494                 | LR__0368
05494     7E FA 05 F6 | 	mov	result1, #126
05498     AC 01 90 FD | 	jmp	#LR__0423
0549c                 | LR__0369
0549c     7D FA 05 F6 | 	mov	result1, #125
054a0     A4 01 90 FD | 	jmp	#LR__0423
054a4                 | LR__0370
054a4     7F FA 05 F6 | 	mov	result1, #127
054a8     9C 01 90 FD | 	jmp	#LR__0423
054ac                 | LR__0371
054ac     80 FA 05 F6 | 	mov	result1, #128
054b0     94 01 90 FD | 	jmp	#LR__0423
054b4                 | LR__0372
054b4     55 FA 05 F6 | 	mov	result1, #85
054b8     8C 01 90 FD | 	jmp	#LR__0423
054bc                 | LR__0373
054bc     75 FA 05 F6 | 	mov	result1, #117
054c0     84 01 90 FD | 	jmp	#LR__0423
054c4                 | LR__0374
054c4     75 FA 05 F6 | 	mov	result1, #117
054c8     7C 01 90 FD | 	jmp	#LR__0423
054cc                 | LR__0375
054cc     42 FA 05 F6 | 	mov	result1, #66
054d0     74 01 90 FD | 	jmp	#LR__0423
054d4                 | LR__0376
054d4     42 FA 05 F6 | 	mov	result1, #66
054d8     6C 01 90 FD | 	jmp	#LR__0423
054dc                 | LR__0377
054dc     95 FA 05 F6 | 	mov	result1, #149
054e0     64 01 90 FD | 	jmp	#LR__0423
054e4                 | LR__0378
054e4     AC FA 05 F6 | 	mov	result1, #172
054e8     5C 01 90 FD | 	jmp	#LR__0423
054ec                 | LR__0379
054ec     81 FA 05 F6 | 	mov	result1, #129
054f0     54 01 90 FD | 	jmp	#LR__0423
054f4                 | LR__0380
054f4     81 FA 05 F6 | 	mov	result1, #129
054f8     4C 01 90 FD | 	jmp	#LR__0423
054fc                 | LR__0381
054fc     44 FA 05 F6 | 	mov	result1, #68
05500     44 01 90 FD | 	jmp	#LR__0423
05504                 | LR__0382
05504     44 FA 05 F6 | 	mov	result1, #68
05508     3C 01 90 FD | 	jmp	#LR__0423
0550c                 | LR__0383
0550c     BC FA 05 F6 | 	mov	result1, #188
05510     34 01 90 FD | 	jmp	#LR__0423
05514                 | LR__0384
05514     88 FA 05 F6 | 	mov	result1, #136
05518     2C 01 90 FD | 	jmp	#LR__0423
0551c                 | LR__0385
0551c     92 FA 05 F6 | 	mov	result1, #146
05520     24 01 90 FD | 	jmp	#LR__0423
05524                 | LR__0386
05524     BE FA 05 F6 | 	mov	result1, #190
05528     1C 01 90 FD | 	jmp	#LR__0423
0552c                 | LR__0387
0552c     BE FA 05 F6 | 	mov	result1, #190
05530     14 01 90 FD | 	jmp	#LR__0423
05534                 | LR__0388
05534     AA FA 05 F6 | 	mov	result1, #170
05538     0C 01 90 FD | 	jmp	#LR__0423
0553c                 | LR__0389
0553c     4D FA 05 F6 | 	mov	result1, #77
05540     04 01 90 FD | 	jmp	#LR__0423
05544                 | LR__0390
05544     51 FA 05 F6 | 	mov	result1, #81
05548     FC 00 90 FD | 	jmp	#LR__0423
0554c                 | LR__0391
0554c     51 FA 05 F6 | 	mov	result1, #81
05550     F4 00 90 FD | 	jmp	#LR__0423
05554                 | LR__0392
05554     8E FA 05 F6 | 	mov	result1, #142
05558     EC 00 90 FD | 	jmp	#LR__0423
0555c                 | LR__0393
0555c     8E FA 05 F6 | 	mov	result1, #142
05560     E4 00 90 FD | 	jmp	#LR__0423
05564                 | LR__0394
05564     90 FA 05 F6 | 	mov	result1, #144
05568     DC 00 90 FD | 	jmp	#LR__0423
0556c                 | LR__0395
0556c     90 FA 05 F6 | 	mov	result1, #144
05570     D4 00 90 FD | 	jmp	#LR__0423
05574                 | LR__0396
05574     8D FA 05 F6 | 	mov	result1, #141
05578     CC 00 90 FD | 	jmp	#LR__0423
0557c                 | LR__0397
0557c     8D FA 05 F6 | 	mov	result1, #141
05580     C4 00 90 FD | 	jmp	#LR__0423
05584                 | LR__0398
05584     8C FA 05 F6 | 	mov	result1, #140
05588     BC 00 90 FD | 	jmp	#LR__0423
0558c                 | LR__0399
0558c     8C FA 05 F6 | 	mov	result1, #140
05590     B4 00 90 FD | 	jmp	#LR__0423
05594                 | LR__0400
05594     91 FA 05 F6 | 	mov	result1, #145
05598     AC 00 90 FD | 	jmp	#LR__0423
0559c                 | LR__0401
0559c     91 FA 05 F6 | 	mov	result1, #145
055a0     A4 00 90 FD | 	jmp	#LR__0423
055a4                 | LR__0402
055a4     8B FA 05 F6 | 	mov	result1, #139
055a8     9C 00 90 FD | 	jmp	#LR__0423
055ac                 | LR__0403
055ac     8B FA 05 F6 | 	mov	result1, #139
055b0     94 00 90 FD | 	jmp	#LR__0423
055b4                 | LR__0404
055b4     8F FA 05 F6 | 	mov	result1, #143
055b8     8C 00 90 FD | 	jmp	#LR__0423
055bc                 | LR__0405
055bc     8F FA 05 F6 | 	mov	result1, #143
055c0     84 00 90 FD | 	jmp	#LR__0423
055c4                 | LR__0406
055c4     8F FA 05 F6 | 	mov	result1, #143
055c8     7C 00 90 FD | 	jmp	#LR__0423
055cc                 | LR__0407
055cc     B2 FA 05 F6 | 	mov	result1, #178
055d0     74 00 90 FD | 	jmp	#LR__0423
055d4                 | LR__0408
055d4     B2 FA 05 F6 | 	mov	result1, #178
055d8     6C 00 90 FD | 	jmp	#LR__0423
055dc                 | LR__0409
055dc     75 FA 05 F6 | 	mov	result1, #117
055e0     64 00 90 FD | 	jmp	#LR__0423
055e4                 | LR__0410
055e4     75 FA 05 F6 | 	mov	result1, #117
055e8     5C 00 90 FD | 	jmp	#LR__0423
055ec                 | LR__0411
055ec     6D FA 05 F6 | 	mov	result1, #109
055f0     54 00 90 FD | 	jmp	#LR__0423
055f4                 | LR__0412
055f4     6D FA 05 F6 | 	mov	result1, #109
055f8     4C 00 90 FD | 	jmp	#LR__0423
055fc                 | LR__0413
055fc     5B FA 05 F6 | 	mov	result1, #91
05600     44 00 90 FD | 	jmp	#LR__0423
05604                 | LR__0414
05604     56 FA 05 F6 | 	mov	result1, #86
05608     3C 00 90 FD | 	jmp	#LR__0423
0560c                 | LR__0415
0560c     56 FA 05 F6 | 	mov	result1, #86
05610     34 00 90 FD | 	jmp	#LR__0423
05614                 | LR__0416
05614     70 FA 05 F6 | 	mov	result1, #112
05618     2C 00 90 FD | 	jmp	#LR__0423
0561c                 | LR__0417
0561c     70 FA 05 F6 | 	mov	result1, #112
05620     24 00 90 FD | 	jmp	#LR__0423
05624                 | LR__0418
05624     57 FA 05 F6 | 	mov	result1, #87
05628     1C 00 90 FD | 	jmp	#LR__0423
0562c                 | LR__0419
0562c     57 FA 05 F6 | 	mov	result1, #87
05630     14 00 90 FD | 	jmp	#LR__0423
05634                 | LR__0420
05634     77 FA 05 F6 | 	mov	result1, #119
05638     0C 00 90 FD | 	jmp	#LR__0423
0563c                 | LR__0421
0563c     78 FA 05 F6 | 	mov	result1, #120
05640     04 00 90 FD | 	jmp	#LR__0423
05644                 | LR__0422
05644     00 FA 05 F6 | 	mov	result1, #0
05648                 | LR__0423
05648     A7 F0 03 F6 | 	mov	ptra, fp
0564c     B2 00 A0 FD | 	call	#popregs_
05650                 | _iscommand_ret
05650     2D 00 64 FD | 	ret
05654                 | 
05654                 | ' 
05654                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05654                 | ' 
05654                 | ' function isfunction(s as string) as ubyte
05654                 | _isfunction
05654     01 4A 05 F6 | 	mov	COUNT_, #1
05658     A8 00 A0 FD | 	call	#pushregs_
0565c                 | ' 
0565c                 | ' select case s
0565c     09 1F 02 F6 | 	mov	local01, arg01
05660     82 01 00 FF 
05664     2A 15 06 F6 | 	mov	arg02, ##@LR__5276
05668     0F 13 02 F6 | 	mov	arg01, local01
0566c     04 B2 B1 FD | 	call	#__system___string_cmp
05670     00 FA 0D F2 | 	cmp	result1, #0 wz
05674     0C 04 90 AD |  if_e	jmp	#LR__0430
05678     82 01 00 FF 
0567c     2E 15 06 F6 | 	mov	arg02, ##@LR__5277
05680     0F 13 02 F6 | 	mov	arg01, local01
05684     EC B1 B1 FD | 	call	#__system___string_cmp
05688     00 FA 0D F2 | 	cmp	result1, #0 wz
0568c     FC 03 90 AD |  if_e	jmp	#LR__0431
05690     82 01 00 FF 
05694     33 15 06 F6 | 	mov	arg02, ##@LR__5278
05698     0F 13 02 F6 | 	mov	arg01, local01
0569c     D4 B1 B1 FD | 	call	#__system___string_cmp
056a0     00 FA 0D F2 | 	cmp	result1, #0 wz
056a4     EC 03 90 AD |  if_e	jmp	#LR__0432
056a8     82 01 00 FF 
056ac     37 15 06 F6 | 	mov	arg02, ##@LR__5279
056b0     0F 13 02 F6 | 	mov	arg01, local01
056b4     BC B1 B1 FD | 	call	#__system___string_cmp
056b8     00 FA 0D F2 | 	cmp	result1, #0 wz
056bc     DC 03 90 AD |  if_e	jmp	#LR__0433
056c0     82 01 00 FF 
056c4     3C 15 06 F6 | 	mov	arg02, ##@LR__5280
056c8     0F 13 02 F6 | 	mov	arg01, local01
056cc     A4 B1 B1 FD | 	call	#__system___string_cmp
056d0     00 FA 0D F2 | 	cmp	result1, #0 wz
056d4     CC 03 90 AD |  if_e	jmp	#LR__0434
056d8     82 01 00 FF 
056dc     40 15 06 F6 | 	mov	arg02, ##@LR__5281
056e0     0F 13 02 F6 | 	mov	arg01, local01
056e4     8C B1 B1 FD | 	call	#__system___string_cmp
056e8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ec     BC 03 90 AD |  if_e	jmp	#LR__0435
056f0     82 01 00 FF 
056f4     45 15 06 F6 | 	mov	arg02, ##@LR__5282
056f8     0F 13 02 F6 | 	mov	arg01, local01
056fc     74 B1 B1 FD | 	call	#__system___string_cmp
05700     00 FA 0D F2 | 	cmp	result1, #0 wz
05704     AC 03 90 AD |  if_e	jmp	#LR__0436
05708     82 01 00 FF 
0570c     49 15 06 F6 | 	mov	arg02, ##@LR__5283
05710     0F 13 02 F6 | 	mov	arg01, local01
05714     5C B1 B1 FD | 	call	#__system___string_cmp
05718     00 FA 0D F2 | 	cmp	result1, #0 wz
0571c     9C 03 90 AD |  if_e	jmp	#LR__0437
05720     82 01 00 FF 
05724     4E 15 06 F6 | 	mov	arg02, ##@LR__5284
05728     0F 13 02 F6 | 	mov	arg01, local01
0572c     44 B1 B1 FD | 	call	#__system___string_cmp
05730     00 FA 0D F2 | 	cmp	result1, #0 wz
05734     8C 03 90 AD |  if_e	jmp	#LR__0438
05738     82 01 00 FF 
0573c     53 15 06 F6 | 	mov	arg02, ##@LR__5285
05740     0F 13 02 F6 | 	mov	arg01, local01
05744     2C B1 B1 FD | 	call	#__system___string_cmp
05748     00 FA 0D F2 | 	cmp	result1, #0 wz
0574c     7C 03 90 AD |  if_e	jmp	#LR__0439
05750     82 01 00 FF 
05754     57 15 06 F6 | 	mov	arg02, ##@LR__5286
05758     0F 13 02 F6 | 	mov	arg01, local01
0575c     14 B1 B1 FD | 	call	#__system___string_cmp
05760     00 FA 0D F2 | 	cmp	result1, #0 wz
05764     6C 03 90 AD |  if_e	jmp	#LR__0440
05768     82 01 00 FF 
0576c     5D 15 06 F6 | 	mov	arg02, ##@LR__5287
05770     0F 13 02 F6 | 	mov	arg01, local01
05774     FC B0 B1 FD | 	call	#__system___string_cmp
05778     00 FA 0D F2 | 	cmp	result1, #0 wz
0577c     5C 03 90 AD |  if_e	jmp	#LR__0441
05780     82 01 00 FF 
05784     61 15 06 F6 | 	mov	arg02, ##@LR__5288
05788     0F 13 02 F6 | 	mov	arg01, local01
0578c     E4 B0 B1 FD | 	call	#__system___string_cmp
05790     00 FA 0D F2 | 	cmp	result1, #0 wz
05794     4C 03 90 AD |  if_e	jmp	#LR__0442
05798     82 01 00 FF 
0579c     6A 15 06 F6 | 	mov	arg02, ##@LR__5289
057a0     0F 13 02 F6 | 	mov	arg01, local01
057a4     CC B0 B1 FD | 	call	#__system___string_cmp
057a8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ac     3C 03 90 AD |  if_e	jmp	#LR__0443
057b0     82 01 00 FF 
057b4     6E 15 06 F6 | 	mov	arg02, ##@LR__5290
057b8     0F 13 02 F6 | 	mov	arg01, local01
057bc     B4 B0 B1 FD | 	call	#__system___string_cmp
057c0     00 FA 0D F2 | 	cmp	result1, #0 wz
057c4     2C 03 90 AD |  if_e	jmp	#LR__0444
057c8     82 01 00 FF 
057cc     7C 15 06 F6 | 	mov	arg02, ##@LR__5291
057d0     0F 13 02 F6 | 	mov	arg01, local01
057d4     9C B0 B1 FD | 	call	#__system___string_cmp
057d8     00 FA 0D F2 | 	cmp	result1, #0 wz
057dc     1C 03 90 AD |  if_e	jmp	#LR__0445
057e0     82 01 00 FF 
057e4     89 15 06 F6 | 	mov	arg02, ##@LR__5292
057e8     0F 13 02 F6 | 	mov	arg01, local01
057ec     84 B0 B1 FD | 	call	#__system___string_cmp
057f0     00 FA 0D F2 | 	cmp	result1, #0 wz
057f4     0C 03 90 AD |  if_e	jmp	#LR__0446
057f8     82 01 00 FF 
057fc     91 15 06 F6 | 	mov	arg02, ##@LR__5293
05800     0F 13 02 F6 | 	mov	arg01, local01
05804     6C B0 B1 FD | 	call	#__system___string_cmp
05808     00 FA 0D F2 | 	cmp	result1, #0 wz
0580c     FC 02 90 AD |  if_e	jmp	#LR__0447
05810     82 01 00 FF 
05814     96 15 06 F6 | 	mov	arg02, ##@LR__5294
05818     0F 13 02 F6 | 	mov	arg01, local01
0581c     54 B0 B1 FD | 	call	#__system___string_cmp
05820     00 FA 0D F2 | 	cmp	result1, #0 wz
05824     EC 02 90 AD |  if_e	jmp	#LR__0448
05828     82 01 00 FF 
0582c     9D 15 06 F6 | 	mov	arg02, ##@LR__5295
05830     0F 13 02 F6 | 	mov	arg01, local01
05834     3C B0 B1 FD | 	call	#__system___string_cmp
05838     00 FA 0D F2 | 	cmp	result1, #0 wz
0583c     DC 02 90 AD |  if_e	jmp	#LR__0449
05840     82 01 00 FF 
05844     A1 15 06 F6 | 	mov	arg02, ##@LR__5296
05848     0F 13 02 F6 | 	mov	arg01, local01
0584c     24 B0 B1 FD | 	call	#__system___string_cmp
05850     00 FA 0D F2 | 	cmp	result1, #0 wz
05854     CC 02 90 AD |  if_e	jmp	#LR__0450
05858     82 01 00 FF 
0585c     A7 15 06 F6 | 	mov	arg02, ##@LR__5297
05860     0F 13 02 F6 | 	mov	arg01, local01
05864     0C B0 B1 FD | 	call	#__system___string_cmp
05868     00 FA 0D F2 | 	cmp	result1, #0 wz
0586c     BC 02 90 AD |  if_e	jmp	#LR__0451
05870     82 01 00 FF 
05874     AB 15 06 F6 | 	mov	arg02, ##@LR__5298
05878     0F 13 02 F6 | 	mov	arg01, local01
0587c     F4 AF B1 FD | 	call	#__system___string_cmp
05880     00 FA 0D F2 | 	cmp	result1, #0 wz
05884     AC 02 90 AD |  if_e	jmp	#LR__0452
05888     82 01 00 FF 
0588c     AF 15 06 F6 | 	mov	arg02, ##@LR__5299
05890     0F 13 02 F6 | 	mov	arg01, local01
05894     DC AF B1 FD | 	call	#__system___string_cmp
05898     00 FA 0D F2 | 	cmp	result1, #0 wz
0589c     9C 02 90 AD |  if_e	jmp	#LR__0453
058a0     82 01 00 FF 
058a4     B5 15 06 F6 | 	mov	arg02, ##@LR__5300
058a8     0F 13 02 F6 | 	mov	arg01, local01
058ac     C4 AF B1 FD | 	call	#__system___string_cmp
058b0     00 FA 0D F2 | 	cmp	result1, #0 wz
058b4     8C 02 90 AD |  if_e	jmp	#LR__0454
058b8     82 01 00 FF 
058bc     BA 15 06 F6 | 	mov	arg02, ##@LR__5301
058c0     0F 13 02 F6 | 	mov	arg01, local01
058c4     AC AF B1 FD | 	call	#__system___string_cmp
058c8     00 FA 0D F2 | 	cmp	result1, #0 wz
058cc     7C 02 90 AD |  if_e	jmp	#LR__0455
058d0     82 01 00 FF 
058d4     C1 15 06 F6 | 	mov	arg02, ##@LR__5302
058d8     0F 13 02 F6 | 	mov	arg01, local01
058dc     94 AF B1 FD | 	call	#__system___string_cmp
058e0     00 FA 0D F2 | 	cmp	result1, #0 wz
058e4     6C 02 90 AD |  if_e	jmp	#LR__0456
058e8     82 01 00 FF 
058ec     C8 15 06 F6 | 	mov	arg02, ##@LR__5303
058f0     0F 13 02 F6 | 	mov	arg01, local01
058f4     7C AF B1 FD | 	call	#__system___string_cmp
058f8     00 FA 0D F2 | 	cmp	result1, #0 wz
058fc     5C 02 90 AD |  if_e	jmp	#LR__0457
05900     82 01 00 FF 
05904     CF 15 06 F6 | 	mov	arg02, ##@LR__5304
05908     0F 13 02 F6 | 	mov	arg01, local01
0590c     64 AF B1 FD | 	call	#__system___string_cmp
05910     00 FA 0D F2 | 	cmp	result1, #0 wz
05914     4C 02 90 AD |  if_e	jmp	#LR__0458
05918     82 01 00 FF 
0591c     D6 15 06 F6 | 	mov	arg02, ##@LR__5305
05920     0F 13 02 F6 | 	mov	arg01, local01
05924     4C AF B1 FD | 	call	#__system___string_cmp
05928     00 FA 0D F2 | 	cmp	result1, #0 wz
0592c     3C 02 90 AD |  if_e	jmp	#LR__0459
05930     82 01 00 FF 
05934     DB 15 06 F6 | 	mov	arg02, ##@LR__5306
05938     0F 13 02 F6 | 	mov	arg01, local01
0593c     34 AF B1 FD | 	call	#__system___string_cmp
05940     00 FA 0D F2 | 	cmp	result1, #0 wz
05944     2C 02 90 AD |  if_e	jmp	#LR__0460
05948     82 01 00 FF 
0594c     E3 15 06 F6 | 	mov	arg02, ##@LR__5307
05950     0F 13 02 F6 | 	mov	arg01, local01
05954     1C AF B1 FD | 	call	#__system___string_cmp
05958     00 FA 0D F2 | 	cmp	result1, #0 wz
0595c     1C 02 90 AD |  if_e	jmp	#LR__0461
05960     82 01 00 FF 
05964     E9 15 06 F6 | 	mov	arg02, ##@LR__5308
05968     0F 13 02 F6 | 	mov	arg01, local01
0596c     04 AF B1 FD | 	call	#__system___string_cmp
05970     00 FA 0D F2 | 	cmp	result1, #0 wz
05974     0C 02 90 AD |  if_e	jmp	#LR__0462
05978     82 01 00 FF 
0597c     F0 15 06 F6 | 	mov	arg02, ##@LR__5309
05980     0F 13 02 F6 | 	mov	arg01, local01
05984     EC AE B1 FD | 	call	#__system___string_cmp
05988     00 FA 0D F2 | 	cmp	result1, #0 wz
0598c     FC 01 90 AD |  if_e	jmp	#LR__0463
05990     82 01 00 FF 
05994     F6 15 06 F6 | 	mov	arg02, ##@LR__5310
05998     0F 13 02 F6 | 	mov	arg01, local01
0599c     D4 AE B1 FD | 	call	#__system___string_cmp
059a0     00 FA 0D F2 | 	cmp	result1, #0 wz
059a4     EC 01 90 AD |  if_e	jmp	#LR__0464
059a8     82 01 00 FF 
059ac     FC 15 06 F6 | 	mov	arg02, ##@LR__5311
059b0     0F 13 02 F6 | 	mov	arg01, local01
059b4     BC AE B1 FD | 	call	#__system___string_cmp
059b8     00 FA 0D F2 | 	cmp	result1, #0 wz
059bc     DC 01 90 AD |  if_e	jmp	#LR__0465
059c0     83 01 00 FF 
059c4     00 14 06 F6 | 	mov	arg02, ##@LR__5312
059c8     0F 13 02 F6 | 	mov	arg01, local01
059cc     A4 AE B1 FD | 	call	#__system___string_cmp
059d0     00 FA 0D F2 | 	cmp	result1, #0 wz
059d4     CC 01 90 AD |  if_e	jmp	#LR__0466
059d8     83 01 00 FF 
059dc     04 14 06 F6 | 	mov	arg02, ##@LR__5313
059e0     0F 13 02 F6 | 	mov	arg01, local01
059e4     8C AE B1 FD | 	call	#__system___string_cmp
059e8     00 FA 0D F2 | 	cmp	result1, #0 wz
059ec     BC 01 90 AD |  if_e	jmp	#LR__0467
059f0     83 01 00 FF 
059f4     08 14 06 F6 | 	mov	arg02, ##@LR__5314
059f8     0F 13 02 F6 | 	mov	arg01, local01
059fc     74 AE B1 FD | 	call	#__system___string_cmp
05a00     00 FA 0D F2 | 	cmp	result1, #0 wz
05a04     AC 01 90 AD |  if_e	jmp	#LR__0468
05a08     83 01 00 FF 
05a0c     0E 14 06 F6 | 	mov	arg02, ##@LR__5315
05a10     0F 13 02 F6 | 	mov	arg01, local01
05a14     5C AE B1 FD | 	call	#__system___string_cmp
05a18     00 FA 0D F2 | 	cmp	result1, #0 wz
05a1c     9C 01 90 AD |  if_e	jmp	#LR__0469
05a20     83 01 00 FF 
05a24     14 14 06 F6 | 	mov	arg02, ##@LR__5316
05a28     0F 13 02 F6 | 	mov	arg01, local01
05a2c     44 AE B1 FD | 	call	#__system___string_cmp
05a30     00 FA 0D F2 | 	cmp	result1, #0 wz
05a34     8C 01 90 AD |  if_e	jmp	#LR__0470
05a38     83 01 00 FF 
05a3c     19 14 06 F6 | 	mov	arg02, ##@LR__5317
05a40     0F 13 02 F6 | 	mov	arg01, local01
05a44     2C AE B1 FD | 	call	#__system___string_cmp
05a48     00 FA 0D F2 | 	cmp	result1, #0 wz
05a4c     7C 01 90 AD |  if_e	jmp	#LR__0471
05a50     83 01 00 FF 
05a54     1D 14 06 F6 | 	mov	arg02, ##@LR__5318
05a58     0F 13 02 F6 | 	mov	arg01, local01
05a5c     14 AE B1 FD | 	call	#__system___string_cmp
05a60     00 FA 0D F2 | 	cmp	result1, #0 wz
05a64     6C 01 90 AD |  if_e	jmp	#LR__0472
05a68     83 01 00 FF 
05a6c     21 14 06 F6 | 	mov	arg02, ##@LR__5319
05a70     0F 13 02 F6 | 	mov	arg01, local01
05a74     FC AD B1 FD | 	call	#__system___string_cmp
05a78     00 FA 0D F2 | 	cmp	result1, #0 wz
05a7c     5C 01 90 AD |  if_e	jmp	#LR__0473
05a80     60 01 90 FD | 	jmp	#LR__0474
05a84                 | LR__0430
05a84     9E FA 05 F6 | 	mov	result1, #158
05a88     5C 01 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0431
05a8c     85 FA 05 F6 | 	mov	result1, #133
05a90     54 01 90 FD | 	jmp	#LR__0475
05a94                 | LR__0432
05a94     9B FA 05 F6 | 	mov	result1, #155
05a98     4C 01 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0433
05a9c     9B FA 05 F6 | 	mov	result1, #155
05aa0     44 01 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0434
05aa4     A7 FA 05 F6 | 	mov	result1, #167
05aa8     3C 01 90 FD | 	jmp	#LR__0475
05aac                 | LR__0435
05aac     84 FA 05 F6 | 	mov	result1, #132
05ab0     34 01 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0436
05ab4     86 FA 05 F6 | 	mov	result1, #134
05ab8     2C 01 90 FD | 	jmp	#LR__0475
05abc                 | LR__0437
05abc     A2 FA 05 F6 | 	mov	result1, #162
05ac0     24 01 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0438
05ac4     9F FA 05 F6 | 	mov	result1, #159
05ac8     1C 01 90 FD | 	jmp	#LR__0475
05acc                 | LR__0439
05acc     82 FA 05 F6 | 	mov	result1, #130
05ad0     14 01 90 FD | 	jmp	#LR__0475
05ad4                 | LR__0440
05ad4     99 FA 05 F6 | 	mov	result1, #153
05ad8     0C 01 90 FD | 	jmp	#LR__0475
05adc                 | LR__0441
05adc     9C FA 05 F6 | 	mov	result1, #156
05ae0     04 01 90 FD | 	jmp	#LR__0475
05ae4                 | LR__0442
05ae4     6F FA 05 F6 | 	mov	result1, #111
05ae8     FC 00 90 FD | 	jmp	#LR__0475
05aec                 | LR__0443
05aec     6F FA 05 F6 | 	mov	result1, #111
05af0     F4 00 90 FD | 	jmp	#LR__0475
05af4                 | LR__0444
05af4     93 FA 05 F6 | 	mov	result1, #147
05af8     EC 00 90 FD | 	jmp	#LR__0475
05afc                 | LR__0445
05afc     94 FA 05 F6 | 	mov	result1, #148
05b00     E4 00 90 FD | 	jmp	#LR__0475
05b04                 | LR__0446
05b04     62 FA 05 F6 | 	mov	result1, #98
05b08     DC 00 90 FD | 	jmp	#LR__0475
05b0c                 | LR__0447
05b0c     A3 FA 05 F6 | 	mov	result1, #163
05b10     D4 00 90 FD | 	jmp	#LR__0475
05b14                 | LR__0448
05b14     9D FA 05 F6 | 	mov	result1, #157
05b18     CC 00 90 FD | 	jmp	#LR__0475
05b1c                 | LR__0449
05b1c     8A FA 05 F6 | 	mov	result1, #138
05b20     C4 00 90 FD | 	jmp	#LR__0475
05b24                 | LR__0450
05b24     A4 FA 05 F6 | 	mov	result1, #164
05b28     BC 00 90 FD | 	jmp	#LR__0475
05b2c                 | LR__0451
05b2c     A8 FA 05 F6 | 	mov	result1, #168
05b30     B4 00 90 FD | 	jmp	#LR__0475
05b34                 | LR__0452
05b34     AD FA 05 F6 | 	mov	result1, #173
05b38     AC 00 90 FD | 	jmp	#LR__0475
05b3c                 | LR__0453
05b3c     9A FA 05 F6 | 	mov	result1, #154
05b40     A4 00 90 FD | 	jmp	#LR__0475
05b44                 | LR__0454
05b44     A6 FA 05 F6 | 	mov	result1, #166
05b48     9C 00 90 FD | 	jmp	#LR__0475
05b4c                 | LR__0455
05b4c     66 FA 05 F6 | 	mov	result1, #102
05b50     94 00 90 FD | 	jmp	#LR__0475
05b54                 | LR__0456
05b54     67 FA 05 F6 | 	mov	result1, #103
05b58     8C 00 90 FD | 	jmp	#LR__0475
05b5c                 | LR__0457
05b5c     64 FA 05 F6 | 	mov	result1, #100
05b60     84 00 90 FD | 	jmp	#LR__0475
05b64                 | LR__0458
05b64     65 FA 05 F6 | 	mov	result1, #101
05b68     7C 00 90 FD | 	jmp	#LR__0475
05b6c                 | LR__0459
05b6c     98 FA 05 F6 | 	mov	result1, #152
05b70     74 00 90 FD | 	jmp	#LR__0475
05b74                 | LR__0460
05b74     7B FA 05 F6 | 	mov	result1, #123
05b78     6C 00 90 FD | 	jmp	#LR__0475
05b7c                 | LR__0461
05b7c     76 FA 05 F6 | 	mov	result1, #118
05b80     64 00 90 FD | 	jmp	#LR__0475
05b84                 | LR__0462
05b84     A5 FA 05 F6 | 	mov	result1, #165
05b88     5C 00 90 FD | 	jmp	#LR__0475
05b8c                 | LR__0463
05b8c     7A FA 05 F6 | 	mov	result1, #122
05b90     54 00 90 FD | 	jmp	#LR__0475
05b94                 | LR__0464
05b94     BF FA 05 F6 | 	mov	result1, #191
05b98     4C 00 90 FD | 	jmp	#LR__0475
05b9c                 | LR__0465
05b9c     54 FA 05 F6 | 	mov	result1, #84
05ba0     44 00 90 FD | 	jmp	#LR__0475
05ba4                 | LR__0466
05ba4     6B FA 05 F6 | 	mov	result1, #107
05ba8     3C 00 90 FD | 	jmp	#LR__0475
05bac                 | LR__0467
05bac     87 FA 05 F6 | 	mov	result1, #135
05bb0     34 00 90 FD | 	jmp	#LR__0475
05bb4                 | LR__0468
05bb4     6A FA 05 F6 | 	mov	result1, #106
05bb8     2C 00 90 FD | 	jmp	#LR__0475
05bbc                 | LR__0469
05bbc     6E FA 05 F6 | 	mov	result1, #110
05bc0     24 00 90 FD | 	jmp	#LR__0475
05bc4                 | LR__0470
05bc4     A1 FA 05 F6 | 	mov	result1, #161
05bc8     1C 00 90 FD | 	jmp	#LR__0475
05bcc                 | LR__0471
05bcc     83 FA 05 F6 | 	mov	result1, #131
05bd0     14 00 90 FD | 	jmp	#LR__0475
05bd4                 | LR__0472
05bd4     A0 FA 05 F6 | 	mov	result1, #160
05bd8     0C 00 90 FD | 	jmp	#LR__0475
05bdc                 | LR__0473
05bdc     9B FA 05 F6 | 	mov	result1, #155
05be0     04 00 90 FD | 	jmp	#LR__0475
05be4                 | LR__0474
05be4     00 FA 05 F6 | 	mov	result1, #0
05be8                 | LR__0475
05be8     A7 F0 03 F6 | 	mov	ptra, fp
05bec     B2 00 A0 FD | 	call	#popregs_
05bf0                 | _isfunction_ret
05bf0     2D 00 64 FD | 	ret
05bf4                 | 
05bf4                 | ' 
05bf4                 | ' ' Check if the part is a name
05bf4                 | ' 
05bf4                 | ' function isname(s as string) as boolean
05bf4                 | _isname
05bf4     0D 4A 05 F6 | 	mov	COUNT_, #13
05bf8     A8 00 A0 FD | 	call	#pushregs_
05bfc     09 1F 02 F6 | 	mov	local01, arg01
05c00     09 21 02 F6 | 	mov	local02, arg01
05c04     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05c08                 | LR__0480
05c08     10 FB C9 FA | 	rdbyte	result1, local02 wz
05c0c     01 20 06 51 |  if_ne	add	local02, #1
05c10     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05c14                 | LR__0481
05c14     09 21 82 F1 | 	sub	local02, arg01
05c18     10 FB 01 F6 | 	mov	result1, local02
05c1c     FD 22 0A F6 | 	mov	local03, result1 wz
05c20     00 FA 05 A6 |  if_e	mov	result1, #0
05c24     34 02 90 AD |  if_e	jmp	#LR__0493
05c28     0F 13 02 F6 | 	mov	arg01, local01
05c2c     01 14 06 F6 | 	mov	arg02, #1
05c30     01 16 06 F6 | 	mov	arg03, #1
05c34     A8 CD B1 FD | 	call	#__system__Mid_S
05c38     FD 24 02 F6 | 	mov	local04, result1
05c3c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05c3c     83 01 00 FF 
05c40     28 14 06 F6 | 	mov	arg02, ##@LR__5320
05c44     12 13 02 F6 | 	mov	arg01, local04
05c48     28 AC B1 FD | 	call	#__system___string_cmp
05c4c     00 FA 55 F2 | 	cmps	result1, #0 wc
05c50     18 00 90 CD |  if_b	jmp	#LR__0482
05c54     83 01 00 FF 
05c58     2A 14 06 F6 | 	mov	arg02, ##@LR__5321
05c5c     12 13 02 F6 | 	mov	arg01, local04
05c60     10 AC B1 FD | 	call	#__system___string_cmp
05c64     01 FA 55 F2 | 	cmps	result1, #1 wc
05c68     1C 00 90 CD |  if_b	jmp	#LR__0483
05c6c                 | LR__0482
05c6c     83 01 00 FF 
05c70     2C 14 06 F6 | 	mov	arg02, ##@LR__5322
05c74     12 13 02 F6 | 	mov	arg01, local04
05c78     F8 AB B1 FD | 	call	#__system___string_cmp
05c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c80     00 FA 05 56 |  if_ne	mov	result1, #0
05c84     D4 01 90 5D |  if_ne	jmp	#LR__0493
05c88                 | LR__0483
05c88                 | ' if l>2 then 
05c88     03 22 56 F2 | 	cmps	local03, #3 wc
05c8c     C8 01 90 CD |  if_b	jmp	#LR__0492
05c90                 | '   for i=2 to l
05c90     02 26 06 F6 | 	mov	local05, #2
05c94     11 29 02 F6 | 	mov	local06, local03
05c98     01 28 06 F1 | 	add	local06, #1
05c9c                 | LR__0484
05c9c     14 27 52 F2 | 	cmps	local05, local06 wc
05ca0     B4 01 90 3D |  if_ae	jmp	#LR__0491
05ca4     0F 13 02 F6 | 	mov	arg01, local01
05ca8     13 15 02 F6 | 	mov	arg02, local05
05cac     01 16 06 F6 | 	mov	arg03, #1
05cb0     2C CD B1 FD | 	call	#__system__Mid_S
05cb4     FD 24 02 F6 | 	mov	local04, result1
05cb8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05cb8     11 27 52 F2 | 	cmps	local05, local03 wc
05cbc     9C 00 90 3D |  if_ae	jmp	#LR__0487
05cc0     83 01 00 FF 
05cc4     2E 14 06 F6 | 	mov	arg02, ##@LR__5323
05cc8     12 13 02 F6 | 	mov	arg01, local04
05ccc     A4 AB B1 FD | 	call	#__system___string_cmp
05cd0     00 FA 55 F2 | 	cmps	result1, #0 wc
05cd4     18 00 90 CD |  if_b	jmp	#LR__0485
05cd8     83 01 00 FF 
05cdc     30 14 06 F6 | 	mov	arg02, ##@LR__5324
05ce0     12 13 02 F6 | 	mov	arg01, local04
05ce4     8C AB B1 FD | 	call	#__system___string_cmp
05ce8     01 FA 55 F2 | 	cmps	result1, #1 wc
05cec     6C 00 90 CD |  if_b	jmp	#LR__0487
05cf0                 | LR__0485
05cf0     83 01 00 FF 
05cf4     32 14 06 F6 | 	mov	arg02, ##@LR__5325
05cf8     12 13 02 F6 | 	mov	arg01, local04
05cfc     74 AB B1 FD | 	call	#__system___string_cmp
05d00     00 FA 55 F2 | 	cmps	result1, #0 wc
05d04     18 00 90 CD |  if_b	jmp	#LR__0486
05d08     83 01 00 FF 
05d0c     34 14 06 F6 | 	mov	arg02, ##@LR__5326
05d10     12 13 02 F6 | 	mov	arg01, local04
05d14     5C AB B1 FD | 	call	#__system___string_cmp
05d18     01 FA 55 F2 | 	cmps	result1, #1 wc
05d1c     3C 00 90 CD |  if_b	jmp	#LR__0487
05d20                 | LR__0486
05d20     83 01 00 FF 
05d24     36 2A 06 F6 | 	mov	local07, ##@LR__5327
05d28     12 13 02 F6 | 	mov	arg01, local04
05d2c     15 15 02 F6 | 	mov	arg02, local07
05d30     40 AB B1 FD | 	call	#__system___string_cmp
05d34     00 FA 0D F2 | 	cmp	result1, #0 wz
05d38     20 00 90 AD |  if_e	jmp	#LR__0487
05d3c     83 01 00 FF 
05d40     38 2C 06 F6 | 	mov	local08, ##@LR__5328
05d44     12 13 02 F6 | 	mov	arg01, local04
05d48     16 15 02 F6 | 	mov	arg02, local08
05d4c     24 AB B1 FD | 	call	#__system___string_cmp
05d50     FD 2E 0A F6 | 	mov	local09, result1 wz
05d54     00 FA 05 56 |  if_ne	mov	result1, #0
05d58     00 01 90 5D |  if_ne	jmp	#LR__0493
05d5c                 | LR__0487
05d5c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05d5c     11 27 0A F2 | 	cmp	local05, local03 wz
05d60     EC 00 90 5D |  if_ne	jmp	#LR__0490
05d64     83 01 00 FF 
05d68     3A 30 06 F6 | 	mov	local10, ##@LR__5329
05d6c     12 13 02 F6 | 	mov	arg01, local04
05d70     18 15 02 F6 | 	mov	arg02, local10
05d74     FC AA B1 FD | 	call	#__system___string_cmp
05d78     FD 32 02 F6 | 	mov	local11, result1
05d7c     00 32 56 F2 | 	cmps	local11, #0 wc
05d80     1C 00 90 CD |  if_b	jmp	#LR__0488
05d84     83 01 00 FF 
05d88     3C 14 06 F6 | 	mov	arg02, ##@LR__5330
05d8c     12 13 02 F6 | 	mov	arg01, local04
05d90     E0 AA B1 FD | 	call	#__system___string_cmp
05d94     FD 30 02 F6 | 	mov	local10, result1
05d98     01 30 56 F2 | 	cmps	local10, #1 wc
05d9c     B0 00 90 CD |  if_b	jmp	#LR__0490
05da0                 | LR__0488
05da0     83 01 00 FF 
05da4     3E 14 06 F6 | 	mov	arg02, ##@LR__5331
05da8     12 13 02 F6 | 	mov	arg01, local04
05dac     C4 AA B1 FD | 	call	#__system___string_cmp
05db0     00 FA 55 F2 | 	cmps	result1, #0 wc
05db4     1C 00 90 CD |  if_b	jmp	#LR__0489
05db8     83 01 00 FF 
05dbc     40 2E 06 F6 | 	mov	local09, ##@LR__5332
05dc0     12 13 02 F6 | 	mov	arg01, local04
05dc4     17 15 02 F6 | 	mov	arg02, local09
05dc8     A8 AA B1 FD | 	call	#__system___string_cmp
05dcc     01 FA 55 F2 | 	cmps	result1, #1 wc
05dd0     7C 00 90 CD |  if_b	jmp	#LR__0490
05dd4                 | LR__0489
05dd4     83 01 00 FF 
05dd8     42 2E 06 F6 | 	mov	local09, ##@LR__5333
05ddc     12 13 02 F6 | 	mov	arg01, local04
05de0     17 15 02 F6 | 	mov	arg02, local09
05de4     8C AA B1 FD | 	call	#__system___string_cmp
05de8     00 FA 4D F2 | 	cmps	result1, #0 wz
05dec     60 00 90 AD |  if_e	jmp	#LR__0490
05df0     83 01 00 FF 
05df4     44 2C 06 F6 | 	mov	local08, ##@LR__5334
05df8     12 13 02 F6 | 	mov	arg01, local04
05dfc     16 15 02 F6 | 	mov	arg02, local08
05e00     70 AA B1 FD | 	call	#__system___string_cmp
05e04     FD 2E 0A F6 | 	mov	local09, result1 wz
05e08     44 00 90 AD |  if_e	jmp	#LR__0490
05e0c     83 01 00 FF 
05e10     46 34 06 F6 | 	mov	local12, ##@LR__5335
05e14     1A 2D 02 F6 | 	mov	local08, local12
05e18     12 13 02 F6 | 	mov	arg01, local04
05e1c     16 15 02 F6 | 	mov	arg02, local08
05e20     50 AA B1 FD | 	call	#__system___string_cmp
05e24     FD 2A 0A F6 | 	mov	local07, result1 wz
05e28     24 00 90 AD |  if_e	jmp	#LR__0490
05e2c     83 01 00 FF 
05e30     48 36 06 F6 | 	mov	local13, ##@LR__5336
05e34     1B 35 02 F6 | 	mov	local12, local13
05e38     12 13 02 F6 | 	mov	arg01, local04
05e3c     1A 15 02 F6 | 	mov	arg02, local12
05e40     30 AA B1 FD | 	call	#__system___string_cmp
05e44     FD 2C 0A F6 | 	mov	local08, result1 wz
05e48     00 FA 05 56 |  if_ne	mov	result1, #0
05e4c     0C 00 90 5D |  if_ne	jmp	#LR__0493
05e50                 | LR__0490
05e50     01 26 06 F1 | 	add	local05, #1
05e54     44 FE 9F FD | 	jmp	#LR__0484
05e58                 | LR__0491
05e58                 | LR__0492
05e58                 | ' return true
05e58     01 FA 65 F6 | 	neg	result1, #1
05e5c                 | LR__0493
05e5c     A7 F0 03 F6 | 	mov	ptra, fp
05e60     B2 00 A0 FD | 	call	#popregs_
05e64                 | _isname_ret
05e64     2D 00 64 FD | 	ret
05e68                 | 
05e68                 | ' 
05e68                 | ' ' Check if the part is a number.  
05e68                 | ' 
05e68                 | ' function isnum(s as string) as boolean 
05e68                 | _isnum
05e68     13 4A 05 F6 | 	mov	COUNT_, #19
05e6c     A8 00 A0 FD | 	call	#pushregs_
05e70     09 1F 02 F6 | 	mov	local01, arg01
05e74     00 20 06 F6 | 	mov	local02, #0
05e78     00 22 06 F6 | 	mov	local03, #0
05e7c     0F 13 02 F6 | 	mov	arg01, local01
05e80     09 25 02 F6 | 	mov	local04, arg01
05e84     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05e88                 | LR__0500
05e88     12 FB C9 FA | 	rdbyte	result1, local04 wz
05e8c     01 24 06 51 |  if_ne	add	local04, #1
05e90     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05e94                 | LR__0501
05e94     09 25 82 F1 | 	sub	local04, arg01
05e98     12 FB 01 F6 | 	mov	result1, local04
05e9c     FD 26 0A F6 | 	mov	local05, result1 wz
05ea0     00 FA 05 A6 |  if_e	mov	result1, #0
05ea4     A0 03 90 AD |  if_e	jmp	#LR__0516
05ea8     0F 13 02 F6 | 	mov	arg01, local01
05eac     01 14 06 F6 | 	mov	arg02, #1
05eb0     01 16 06 F6 | 	mov	arg03, #1
05eb4     28 CB B1 FD | 	call	#__system__Mid_S
05eb8     FD 28 02 F6 | 	mov	local06, result1
05ebc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05ebc     83 01 00 FF 
05ec0     4A 14 06 F6 | 	mov	arg02, ##@LR__5337
05ec4     14 13 02 F6 | 	mov	arg01, local06
05ec8     A8 A9 B1 FD | 	call	#__system___string_cmp
05ecc     00 FA 55 F2 | 	cmps	result1, #0 wc
05ed0     1C 00 90 CD |  if_b	jmp	#LR__0502
05ed4     83 01 00 FF 
05ed8     4C 2A 06 F6 | 	mov	local07, ##@LR__5338
05edc     14 13 02 F6 | 	mov	arg01, local06
05ee0     15 15 02 F6 | 	mov	arg02, local07
05ee4     8C A9 B1 FD | 	call	#__system___string_cmp
05ee8     01 FA 55 F2 | 	cmps	result1, #1 wc
05eec     84 00 90 CD |  if_b	jmp	#LR__0503
05ef0                 | LR__0502
05ef0     83 01 00 FF 
05ef4     4E 2C 06 F6 | 	mov	local08, ##@LR__5339
05ef8     16 2B 02 F6 | 	mov	local07, local08
05efc     14 13 02 F6 | 	mov	arg01, local06
05f00     15 15 02 F6 | 	mov	arg02, local07
05f04     6C A9 B1 FD | 	call	#__system___string_cmp
05f08     00 FA 0D F2 | 	cmp	result1, #0 wz
05f0c     64 00 90 AD |  if_e	jmp	#LR__0503
05f10     83 01 00 FF 
05f14     50 2E 06 F6 | 	mov	local09, ##@LR__5340
05f18     17 2D 02 F6 | 	mov	local08, local09
05f1c     14 13 02 F6 | 	mov	arg01, local06
05f20     16 15 02 F6 | 	mov	arg02, local08
05f24     4C A9 B1 FD | 	call	#__system___string_cmp
05f28     FD 2A 0A F6 | 	mov	local07, result1 wz
05f2c     44 00 90 AD |  if_e	jmp	#LR__0503
05f30     83 01 00 FF 
05f34     52 30 06 F6 | 	mov	local10, ##@LR__5341
05f38     18 2F 02 F6 | 	mov	local09, local10
05f3c     14 13 02 F6 | 	mov	arg01, local06
05f40     17 15 02 F6 | 	mov	arg02, local09
05f44     2C A9 B1 FD | 	call	#__system___string_cmp
05f48     FD 2C 0A F6 | 	mov	local08, result1 wz
05f4c     24 00 90 AD |  if_e	jmp	#LR__0503
05f50     83 01 00 FF 
05f54     54 32 06 F6 | 	mov	local11, ##@LR__5342
05f58     19 31 02 F6 | 	mov	local10, local11
05f5c     14 13 02 F6 | 	mov	arg01, local06
05f60     18 15 02 F6 | 	mov	arg02, local10
05f64     0C A9 B1 FD | 	call	#__system___string_cmp
05f68     FD 2E 0A F6 | 	mov	local09, result1 wz
05f6c     00 FA 05 56 |  if_ne	mov	result1, #0
05f70     D4 02 90 5D |  if_ne	jmp	#LR__0516
05f74                 | LR__0503
05f74                 | ' if m$="." then ds=1
05f74     83 01 00 FF 
05f78     56 14 06 F6 | 	mov	arg02, ##@LR__5343
05f7c     14 13 02 F6 | 	mov	arg01, local06
05f80     F0 A8 B1 FD | 	call	#__system___string_cmp
05f84     00 FA 0D F2 | 	cmp	result1, #0 wz
05f88     01 20 06 A6 |  if_e	mov	local02, #1
05f8c                 | ' if m$="$" then hex=1 else hex=0
05f8c     83 01 00 FF 
05f90     58 14 06 F6 | 	mov	arg02, ##@LR__5344
05f94     14 13 02 F6 | 	mov	arg01, local06
05f98     D8 A8 B1 FD | 	call	#__system___string_cmp
05f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa0     01 34 06 A6 |  if_e	mov	local12, #1
05fa4     00 34 06 56 |  if_ne	mov	local12, #0
05fa8                 | ' if m$="%" then bin=1 else bin=0
05fa8     83 01 00 FF 
05fac     5A 14 06 F6 | 	mov	arg02, ##@LR__5345
05fb0     14 13 02 F6 | 	mov	arg01, local06
05fb4     BC A8 B1 FD | 	call	#__system___string_cmp
05fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fbc     01 36 06 A6 |  if_e	mov	local13, #1
05fc0     00 36 06 56 |  if_ne	mov	local13, #0
05fc4                 | ' if l>1 then 
05fc4     02 26 56 F2 | 	cmps	local05, #2 wc
05fc8     78 02 90 CD |  if_b	jmp	#LR__0515
05fcc                 | '   for i=2 to l
05fcc     02 38 06 F6 | 	mov	local14, #2
05fd0     13 3B 02 F6 | 	mov	local15, local05
05fd4     01 3A 06 F1 | 	add	local15, #1
05fd8                 | LR__0504
05fd8     1D 39 52 F2 | 	cmps	local14, local15 wc
05fdc     64 02 90 3D |  if_ae	jmp	#LR__0514
05fe0     0F 13 02 F6 | 	mov	arg01, local01
05fe4     1C 15 02 F6 | 	mov	arg02, local14
05fe8     01 16 06 F6 | 	mov	arg03, #1
05fec     F0 C9 B1 FD | 	call	#__system__Mid_S
05ff0     FD 28 02 F6 | 	mov	local06, result1
05ff4     00 3C 06 F6 | 	mov	local16, #0
05ff8                 | '     m$=mid$(s,i,1) : b=false
05ff8                 | '     if m$>="0" andalso m$<="9" then b=true  
05ff8     83 01 00 FF 
05ffc     5C 14 06 F6 | 	mov	arg02, ##@LR__5346
06000     14 13 02 F6 | 	mov	arg01, local06
06004     6C A8 B1 FD | 	call	#__system___string_cmp
06008     00 FA 55 F2 | 	cmps	result1, #0 wc
0600c     1C 00 90 CD |  if_b	jmp	#LR__0505
06010     83 01 00 FF 
06014     5E 2A 06 F6 | 	mov	local07, ##@LR__5347
06018     14 13 02 F6 | 	mov	arg01, local06
0601c     15 15 02 F6 | 	mov	arg02, local07
06020     50 A8 B1 FD | 	call	#__system___string_cmp
06024     01 FA 55 F2 | 	cmps	result1, #1 wc
06028     01 3C 66 C6 |  if_b	neg	local16, #1
0602c                 | LR__0505
0602c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0602c     83 01 00 FF 
06030     60 14 06 F6 | 	mov	arg02, ##@LR__5348
06034     14 13 02 F6 | 	mov	arg01, local06
06038     38 A8 B1 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     7C 00 90 AD |  if_e	jmp	#LR__0506
06044     83 01 00 FF 
06048     62 2A 06 F6 | 	mov	local07, ##@LR__5349
0604c     14 13 02 F6 | 	mov	arg01, local06
06050     15 15 02 F6 | 	mov	arg02, local07
06054     1C A8 B1 FD | 	call	#__system___string_cmp
06058     00 FA 0D F2 | 	cmp	result1, #0 wz
0605c     60 00 90 AD |  if_e	jmp	#LR__0506
06060     83 01 00 FF 
06064     64 2C 06 F6 | 	mov	local08, ##@LR__5350
06068     16 2B 02 F6 | 	mov	local07, local08
0606c     14 13 02 F6 | 	mov	arg01, local06
06070     15 15 02 F6 | 	mov	arg02, local07
06074     FC A7 B1 FD | 	call	#__system___string_cmp
06078     00 FA 0D F2 | 	cmp	result1, #0 wz
0607c     40 00 90 AD |  if_e	jmp	#LR__0506
06080     83 01 00 FF 
06084     66 2E 06 F6 | 	mov	local09, ##@LR__5351
06088     17 2D 02 F6 | 	mov	local08, local09
0608c     14 13 02 F6 | 	mov	arg01, local06
06090     16 15 02 F6 | 	mov	arg02, local08
06094     DC A7 B1 FD | 	call	#__system___string_cmp
06098     FD 2A 0A F6 | 	mov	local07, result1 wz
0609c     20 00 90 AD |  if_e	jmp	#LR__0506
060a0     83 01 00 FF 
060a4     68 30 06 F6 | 	mov	local10, ##@LR__5352
060a8     18 2F 02 F6 | 	mov	local09, local10
060ac     14 13 02 F6 | 	mov	arg01, local06
060b0     17 15 02 F6 | 	mov	arg02, local09
060b4     BC A7 B1 FD | 	call	#__system___string_cmp
060b8     FD 2C 0A F6 | 	mov	local08, result1 wz
060bc     04 00 90 5D |  if_ne	jmp	#LR__0507
060c0                 | LR__0506
060c0     01 3C 66 F6 | 	neg	local16, #1
060c4                 | LR__0507
060c4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
060c4     01 34 0E F2 | 	cmp	local12, #1 wz
060c8     34 00 90 5D |  if_ne	jmp	#LR__0508
060cc     83 01 00 FF 
060d0     6A 14 06 F6 | 	mov	arg02, ##@LR__5353
060d4     14 13 02 F6 | 	mov	arg01, local06
060d8     98 A7 B1 FD | 	call	#__system___string_cmp
060dc     00 FA 55 F2 | 	cmps	result1, #0 wc
060e0     1C 00 90 CD |  if_b	jmp	#LR__0508
060e4     83 01 00 FF 
060e8     6C 2A 06 F6 | 	mov	local07, ##@LR__5354
060ec     14 13 02 F6 | 	mov	arg01, local06
060f0     15 15 02 F6 | 	mov	arg02, local07
060f4     7C A7 B1 FD | 	call	#__system___string_cmp
060f8     01 FA 55 F2 | 	cmps	result1, #1 wc
060fc     01 3C 66 C6 |  if_b	neg	local16, #1
06100                 | LR__0508
06100                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06100     01 36 0E F2 | 	cmp	local13, #1 wz
06104     58 00 90 5D |  if_ne	jmp	#LR__0510
06108     83 01 00 FF 
0610c     6E 14 06 F6 | 	mov	arg02, ##@LR__5355
06110     14 13 02 F6 | 	mov	arg01, local06
06114     5C A7 B1 FD | 	call	#__system___string_cmp
06118     00 FA 55 F2 | 	cmps	result1, #0 wc
0611c     1C 00 90 CD |  if_b	jmp	#LR__0509
06120     83 01 00 FF 
06124     70 2A 06 F6 | 	mov	local07, ##@LR__5356
06128     14 13 02 F6 | 	mov	arg01, local06
0612c     15 15 02 F6 | 	mov	arg02, local07
06130     40 A7 B1 FD | 	call	#__system___string_cmp
06134     01 FA 55 F2 | 	cmps	result1, #1 wc
06138     24 00 90 CD |  if_b	jmp	#LR__0510
0613c                 | LR__0509
0613c     83 01 00 FF 
06140     72 2C 06 F6 | 	mov	local08, ##@LR__5357
06144     16 2B 02 F6 | 	mov	local07, local08
06148     14 13 02 F6 | 	mov	arg01, local06
0614c     15 15 02 F6 | 	mov	arg02, local07
06150     20 A7 B1 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     00 FA 05 56 |  if_ne	mov	result1, #0
0615c     E8 00 90 5D |  if_ne	jmp	#LR__0516
06160                 | LR__0510
06160                 | '     if not b then return false
06160     1E 3D 22 F6 | 	not	local16, local16
06164     00 3C 0E F2 | 	cmp	local16, #0 wz
06168     00 FA 05 56 |  if_ne	mov	result1, #0
0616c     D8 00 90 5D |  if_ne	jmp	#LR__0516
06170                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06170     83 01 00 FF 
06174     74 14 06 F6 | 	mov	arg02, ##@LR__5358
06178     14 13 02 F6 | 	mov	arg01, local06
0617c     F4 A6 B1 FD | 	call	#__system___string_cmp
06180     00 FA 0D F2 | 	cmp	result1, #0 wz
06184     3C 00 90 5D |  if_ne	jmp	#LR__0511
06188     1C 15 02 F6 | 	mov	arg02, local14
0618c     01 14 86 F1 | 	sub	arg02, #1
06190     0F 13 02 F6 | 	mov	arg01, local01
06194     01 16 06 F6 | 	mov	arg03, #1
06198     44 C8 B1 FD | 	call	#__system__Mid_S
0619c     FD 12 02 F6 | 	mov	arg01, result1
061a0     34 CA B1 FD | 	call	#__system__LCase_S
061a4     FD 12 02 F6 | 	mov	arg01, result1
061a8     83 01 00 FF 
061ac     76 2A 06 F6 | 	mov	local07, ##@LR__5359
061b0     15 15 02 F6 | 	mov	arg02, local07
061b4     BC A6 B1 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     00 FA 05 56 |  if_ne	mov	result1, #0
061c0     84 00 90 5D |  if_ne	jmp	#LR__0516
061c4                 | LR__0511
061c4                 | '     if m$="." then ds+=1: if ds>1 then return false
061c4     83 01 00 FF 
061c8     78 14 06 F6 | 	mov	arg02, ##@LR__5360
061cc     14 13 02 F6 | 	mov	arg01, local06
061d0     A0 A6 B1 FD | 	call	#__system___string_cmp
061d4     00 FA 0D F2 | 	cmp	result1, #0 wz
061d8     01 20 06 A1 |  if_e	add	local02, #1
061dc     02 20 56 A2 |  if_e	cmps	local02, #2 wc
061e0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
061e4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
061e8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
061e8     83 01 00 FF 
061ec     7A 3E 06 F6 | 	mov	local17, ##@LR__5361
061f0     1F 41 02 F6 | 	mov	local18, local17
061f4     14 13 02 F6 | 	mov	arg01, local06
061f8     20 15 02 F6 | 	mov	arg02, local18
061fc     74 A6 B1 FD | 	call	#__system___string_cmp
06200     FD 42 0A F6 | 	mov	local19, result1 wz
06204     20 00 90 AD |  if_e	jmp	#LR__0512
06208     83 01 00 FF 
0620c     7C 2A 06 F6 | 	mov	local07, ##@LR__5362
06210     15 3F 02 F6 | 	mov	local17, local07
06214     14 13 02 F6 | 	mov	arg01, local06
06218     1F 15 02 F6 | 	mov	arg02, local17
0621c     54 A6 B1 FD | 	call	#__system___string_cmp
06220     FD 40 0A F6 | 	mov	local18, result1 wz
06224     14 00 90 5D |  if_ne	jmp	#LR__0513
06228                 | LR__0512
06228     01 22 06 F1 | 	add	local03, #1
0622c     00 34 0E F2 | 	cmp	local12, #0 wz
06230     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06234     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06238     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
0623c                 | LR__0513
0623c     01 38 06 F1 | 	add	local14, #1
06240     94 FD 9F FD | 	jmp	#LR__0504
06244                 | LR__0514
06244                 | LR__0515
06244                 | ' return true
06244     01 FA 65 F6 | 	neg	result1, #1
06248                 | LR__0516
06248     A7 F0 03 F6 | 	mov	ptra, fp
0624c     B2 00 A0 FD | 	call	#popregs_
06250                 | _isnum_ret
06250     2D 00 64 FD | 	ret
06254                 | 
06254                 | '   
06254                 | ' ' Check if the part is an integer number.    
06254                 | '   
06254                 | ' function isint(s as string) as boolean
06254                 | _isint
06254     0E 4A 05 F6 | 	mov	COUNT_, #14
06258     A8 00 A0 FD | 	call	#pushregs_
0625c     09 1F 02 F6 | 	mov	local01, arg01
06260     09 21 02 F6 | 	mov	local02, arg01
06264     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06268                 | LR__0520
06268     10 FB C9 FA | 	rdbyte	result1, local02 wz
0626c     01 20 06 51 |  if_ne	add	local02, #1
06270     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06274                 | LR__0521
06274     09 21 82 F1 | 	sub	local02, arg01
06278     10 FB 01 F6 | 	mov	result1, local02
0627c     FD 22 0A F6 | 	mov	local03, result1 wz
06280     00 FA 05 A6 |  if_e	mov	result1, #0
06284     64 02 90 AD |  if_e	jmp	#LR__0534
06288     0F 13 02 F6 | 	mov	arg01, local01
0628c     01 14 06 F6 | 	mov	arg02, #1
06290     01 16 06 F6 | 	mov	arg03, #1
06294     48 C7 B1 FD | 	call	#__system__Mid_S
06298     FD 24 02 F6 | 	mov	local04, result1
0629c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0629c     83 01 00 FF 
062a0     7E 14 06 F6 | 	mov	arg02, ##@LR__5363
062a4     12 13 02 F6 | 	mov	arg01, local04
062a8     C8 A5 B1 FD | 	call	#__system___string_cmp
062ac     00 FA 55 F2 | 	cmps	result1, #0 wc
062b0     1C 00 90 CD |  if_b	jmp	#LR__0522
062b4     83 01 00 FF 
062b8     80 26 06 F6 | 	mov	local05, ##@LR__5364
062bc     12 13 02 F6 | 	mov	arg01, local04
062c0     13 15 02 F6 | 	mov	arg02, local05
062c4     AC A5 B1 FD | 	call	#__system___string_cmp
062c8     01 FA 55 F2 | 	cmps	result1, #1 wc
062cc     64 00 90 CD |  if_b	jmp	#LR__0523
062d0                 | LR__0522
062d0     83 01 00 FF 
062d4     82 28 06 F6 | 	mov	local06, ##@LR__5365
062d8     14 27 02 F6 | 	mov	local05, local06
062dc     12 13 02 F6 | 	mov	arg01, local04
062e0     13 15 02 F6 | 	mov	arg02, local05
062e4     8C A5 B1 FD | 	call	#__system___string_cmp
062e8     00 FA 0D F2 | 	cmp	result1, #0 wz
062ec     44 00 90 AD |  if_e	jmp	#LR__0523
062f0     83 01 00 FF 
062f4     84 2A 06 F6 | 	mov	local07, ##@LR__5366
062f8     15 29 02 F6 | 	mov	local06, local07
062fc     12 13 02 F6 | 	mov	arg01, local04
06300     14 15 02 F6 | 	mov	arg02, local06
06304     6C A5 B1 FD | 	call	#__system___string_cmp
06308     FD 26 0A F6 | 	mov	local05, result1 wz
0630c     24 00 90 AD |  if_e	jmp	#LR__0523
06310     83 01 00 FF 
06314     86 2C 06 F6 | 	mov	local08, ##@LR__5367
06318     16 2B 02 F6 | 	mov	local07, local08
0631c     12 13 02 F6 | 	mov	arg01, local04
06320     15 15 02 F6 | 	mov	arg02, local07
06324     4C A5 B1 FD | 	call	#__system___string_cmp
06328     FD 28 0A F6 | 	mov	local06, result1 wz
0632c     00 FA 05 56 |  if_ne	mov	result1, #0
06330     B8 01 90 5D |  if_ne	jmp	#LR__0534
06334                 | LR__0523
06334                 | ' if m$="$" then hex=1 else hex=0
06334     83 01 00 FF 
06338     88 14 06 F6 | 	mov	arg02, ##@LR__5368
0633c     12 13 02 F6 | 	mov	arg01, local04
06340     30 A5 B1 FD | 	call	#__system___string_cmp
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     01 2E 06 A6 |  if_e	mov	local09, #1
0634c     00 2E 06 56 |  if_ne	mov	local09, #0
06350                 | ' if m$="%" then bin=1 else bin=0
06350     83 01 00 FF 
06354     8A 14 06 F6 | 	mov	arg02, ##@LR__5369
06358     12 13 02 F6 | 	mov	arg01, local04
0635c     14 A5 B1 FD | 	call	#__system___string_cmp
06360     00 FA 0D F2 | 	cmp	result1, #0 wz
06364     01 30 06 A6 |  if_e	mov	local10, #1
06368     00 30 06 56 |  if_ne	mov	local10, #0
0636c                 | ' if l>1 then 
0636c     02 22 56 F2 | 	cmps	local03, #2 wc
06370     74 01 90 CD |  if_b	jmp	#LR__0533
06374                 | '   for i=2 to l
06374     02 32 06 F6 | 	mov	local11, #2
06378     11 35 02 F6 | 	mov	local12, local03
0637c     01 34 06 F1 | 	add	local12, #1
06380                 | LR__0524
06380     1A 33 52 F2 | 	cmps	local11, local12 wc
06384     60 01 90 3D |  if_ae	jmp	#LR__0532
06388     0F 13 02 F6 | 	mov	arg01, local01
0638c     19 15 02 F6 | 	mov	arg02, local11
06390     01 16 06 F6 | 	mov	arg03, #1
06394     48 C6 B1 FD | 	call	#__system__Mid_S
06398     FD 24 02 F6 | 	mov	local04, result1
0639c                 | '     m$=mid$(s,i,1) 
0639c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0639c     00 2E 0E F2 | 	cmp	local09, #0 wz
063a0     50 00 90 5D |  if_ne	jmp	#LR__0526
063a4     83 01 00 FF 
063a8     8C 14 06 F6 | 	mov	arg02, ##@LR__5370
063ac     12 13 02 F6 | 	mov	arg01, local04
063b0     C0 A4 B1 FD | 	call	#__system___string_cmp
063b4     00 FA 55 F2 | 	cmps	result1, #0 wc
063b8     18 00 90 CD |  if_b	jmp	#LR__0525
063bc     83 01 00 FF 
063c0     8E 14 06 F6 | 	mov	arg02, ##@LR__5371
063c4     12 13 02 F6 | 	mov	arg01, local04
063c8     A8 A4 B1 FD | 	call	#__system___string_cmp
063cc     01 FA 55 F2 | 	cmps	result1, #1 wc
063d0     20 00 90 CD |  if_b	jmp	#LR__0526
063d4                 | LR__0525
063d4     83 01 00 FF 
063d8     90 28 06 F6 | 	mov	local06, ##@LR__5372
063dc     12 13 02 F6 | 	mov	arg01, local04
063e0     14 15 02 F6 | 	mov	arg02, local06
063e4     8C A4 B1 FD | 	call	#__system___string_cmp
063e8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ec     00 FA 05 56 |  if_ne	mov	result1, #0
063f0     F8 00 90 5D |  if_ne	jmp	#LR__0534
063f4                 | LR__0526
063f4                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
063f4     01 2E 0E F2 | 	cmp	local09, #1 wz
063f8     90 00 90 5D |  if_ne	jmp	#LR__0529
063fc     83 01 00 FF 
06400     92 14 06 F6 | 	mov	arg02, ##@LR__5373
06404     12 13 02 F6 | 	mov	arg01, local04
06408     68 A4 B1 FD | 	call	#__system___string_cmp
0640c     00 FA 55 F2 | 	cmps	result1, #0 wc
06410     1C 00 90 CD |  if_b	jmp	#LR__0527
06414     83 01 00 FF 
06418     94 14 06 F6 | 	mov	arg02, ##@LR__5374
0641c     12 13 02 F6 | 	mov	arg01, local04
06420     50 A4 B1 FD | 	call	#__system___string_cmp
06424     FD 36 02 F6 | 	mov	local13, result1
06428     01 36 56 F2 | 	cmps	local13, #1 wc
0642c     5C 00 90 CD |  if_b	jmp	#LR__0529
06430                 | LR__0527
06430     83 01 00 FF 
06434     96 26 06 F6 | 	mov	local05, ##@LR__5375
06438     12 13 02 F6 | 	mov	arg01, local04
0643c     13 15 02 F6 | 	mov	arg02, local05
06440     30 A4 B1 FD | 	call	#__system___string_cmp
06444     FD 38 02 F6 | 	mov	local14, result1
06448     00 38 56 F2 | 	cmps	local14, #0 wc
0644c     1C 00 90 CD |  if_b	jmp	#LR__0528
06450     83 01 00 FF 
06454     98 2A 06 F6 | 	mov	local07, ##@LR__5376
06458     12 13 02 F6 | 	mov	arg01, local04
0645c     15 15 02 F6 | 	mov	arg02, local07
06460     10 A4 B1 FD | 	call	#__system___string_cmp
06464     01 FA 55 F2 | 	cmps	result1, #1 wc
06468     20 00 90 CD |  if_b	jmp	#LR__0529
0646c                 | LR__0528
0646c     83 01 00 FF 
06470     9A 2C 06 F6 | 	mov	local08, ##@LR__5377
06474     12 13 02 F6 | 	mov	arg01, local04
06478     16 15 02 F6 | 	mov	arg02, local08
0647c     F4 A3 B1 FD | 	call	#__system___string_cmp
06480     00 FA 0D F2 | 	cmp	result1, #0 wz
06484     00 FA 05 56 |  if_ne	mov	result1, #0
06488     60 00 90 5D |  if_ne	jmp	#LR__0534
0648c                 | LR__0529
0648c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0648c     01 30 0E F2 | 	cmp	local10, #1 wz
06490     4C 00 90 5D |  if_ne	jmp	#LR__0531
06494     83 01 00 FF 
06498     9C 14 06 F6 | 	mov	arg02, ##@LR__5378
0649c     12 13 02 F6 | 	mov	arg01, local04
064a0     D0 A3 B1 FD | 	call	#__system___string_cmp
064a4     00 FA 55 F2 | 	cmps	result1, #0 wc
064a8     18 00 90 CD |  if_b	jmp	#LR__0530
064ac     83 01 00 FF 
064b0     9E 14 06 F6 | 	mov	arg02, ##@LR__5379
064b4     12 13 02 F6 | 	mov	arg01, local04
064b8     B8 A3 B1 FD | 	call	#__system___string_cmp
064bc     01 FA 55 F2 | 	cmps	result1, #1 wc
064c0     1C 00 90 CD |  if_b	jmp	#LR__0531
064c4                 | LR__0530
064c4     83 01 00 FF 
064c8     A0 14 06 F6 | 	mov	arg02, ##@LR__5380
064cc     12 13 02 F6 | 	mov	arg01, local04
064d0     A0 A3 B1 FD | 	call	#__system___string_cmp
064d4     00 FA 0D F2 | 	cmp	result1, #0 wz
064d8     00 FA 05 56 |  if_ne	mov	result1, #0
064dc     0C 00 90 5D |  if_ne	jmp	#LR__0534
064e0                 | LR__0531
064e0     01 32 06 F1 | 	add	local11, #1
064e4     98 FE 9F FD | 	jmp	#LR__0524
064e8                 | LR__0532
064e8                 | LR__0533
064e8                 | ' return true
064e8     01 FA 65 F6 | 	neg	result1, #1
064ec                 | LR__0534
064ec     A7 F0 03 F6 | 	mov	ptra, fp
064f0     B2 00 A0 FD | 	call	#popregs_
064f4                 | _isint_ret
064f4     2D 00 64 FD | 	ret
064f8                 | 
064f8                 | ' 
064f8                 | ' ' Check if the part is a positive decimal number.  
064f8                 | ' 
064f8                 | ' function isdec(s as string) as boolean
064f8                 | _isdec
064f8     05 4A 05 F6 | 	mov	COUNT_, #5
064fc     A8 00 A0 FD | 	call	#pushregs_
06500     09 1F 02 F6 | 	mov	local01, arg01
06504     09 21 02 F6 | 	mov	local02, arg01
06508     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0650c                 | LR__0540
0650c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06510     01 20 06 51 |  if_ne	add	local02, #1
06514     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06518                 | LR__0541
06518     09 21 82 F1 | 	sub	local02, arg01
0651c     10 FB 01 F6 | 	mov	result1, local02
06520     FD 20 0A F6 | 	mov	local02, result1 wz
06524     00 FA 05 A6 |  if_e	mov	result1, #0
06528     80 00 90 AD |  if_e	jmp	#LR__0546
0652c                 | ' for i=1 to l
0652c     01 22 06 F6 | 	mov	local03, #1
06530     10 25 02 F6 | 	mov	local04, local02
06534     01 24 06 F1 | 	add	local04, #1
06538                 | LR__0542
06538     12 23 52 F2 | 	cmps	local03, local04 wc
0653c     68 00 90 3D |  if_ae	jmp	#LR__0545
06540     0F 13 02 F6 | 	mov	arg01, local01
06544     11 15 02 F6 | 	mov	arg02, local03
06548     01 16 06 F6 | 	mov	arg03, #1
0654c     90 C4 B1 FD | 	call	#__system__Mid_S
06550     FD 26 02 F6 | 	mov	local05, result1
06554                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06554     83 01 00 FF 
06558     A2 14 06 F6 | 	mov	arg02, ##@LR__5381
0655c     13 13 02 F6 | 	mov	arg01, local05
06560     10 A3 B1 FD | 	call	#__system___string_cmp
06564     00 FA 55 F2 | 	cmps	result1, #0 wc
06568     18 00 90 CD |  if_b	jmp	#LR__0543
0656c     83 01 00 FF 
06570     A4 14 06 F6 | 	mov	arg02, ##@LR__5382
06574     13 13 02 F6 | 	mov	arg01, local05
06578     F8 A2 B1 FD | 	call	#__system___string_cmp
0657c     01 FA 55 F2 | 	cmps	result1, #1 wc
06580     1C 00 90 CD |  if_b	jmp	#LR__0544
06584                 | LR__0543
06584     83 01 00 FF 
06588     A6 14 06 F6 | 	mov	arg02, ##@LR__5383
0658c     13 13 02 F6 | 	mov	arg01, local05
06590     E0 A2 B1 FD | 	call	#__system___string_cmp
06594     00 FA 0D F2 | 	cmp	result1, #0 wz
06598     00 FA 05 56 |  if_ne	mov	result1, #0
0659c     0C 00 90 5D |  if_ne	jmp	#LR__0546
065a0                 | LR__0544
065a0     01 22 06 F1 | 	add	local03, #1
065a4     90 FF 9F FD | 	jmp	#LR__0542
065a8                 | LR__0545
065a8                 | ' return true
065a8     01 FA 65 F6 | 	neg	result1, #1
065ac                 | LR__0546
065ac     A7 F0 03 F6 | 	mov	ptra, fp
065b0     B2 00 A0 FD | 	call	#popregs_
065b4                 | _isdec_ret
065b4     2D 00 64 FD | 	ret
065b8                 | 
065b8                 | ' 
065b8                 | ' ' Check if the part is a string.  
065b8                 | ' 
065b8                 | ' function isstring(s as string) as boolean
065b8                 | _isstring
065b8     01 4A 05 F6 | 	mov	COUNT_, #1
065bc     A8 00 A0 FD | 	call	#pushregs_
065c0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
065c0     09 1F 02 F6 | 	mov	local01, arg01
065c4     01 14 06 F6 | 	mov	arg02, #1
065c8     FC C2 B1 FD | 	call	#__system__Left_S
065cc     FD 12 02 F6 | 	mov	arg01, result1
065d0     83 01 00 FF 
065d4     A8 14 06 F6 | 	mov	arg02, ##@LR__5384
065d8     98 A2 B1 FD | 	call	#__system___string_cmp
065dc     00 FA 4D F2 | 	cmps	result1, #0 wz
065e0     28 00 90 5D |  if_ne	jmp	#LR__0550
065e4     0F 13 02 F6 | 	mov	arg01, local01
065e8     01 14 06 F6 | 	mov	arg02, #1
065ec     60 C3 B1 FD | 	call	#__system__Right_S
065f0     FD 12 02 F6 | 	mov	arg01, result1
065f4     83 01 00 FF 
065f8     AA 14 06 F6 | 	mov	arg02, ##@LR__5385
065fc     74 A2 B1 FD | 	call	#__system___string_cmp
06600     00 FA 4D F2 | 	cmps	result1, #0 wz
06604     01 FA 65 A6 |  if_e	neg	result1, #1
06608     04 00 90 AD |  if_e	jmp	#LR__0551
0660c                 | LR__0550
0660c     00 FA 05 F6 | 	mov	result1, #0
06610                 | LR__0551
06610     A7 F0 03 F6 | 	mov	ptra, fp
06614     B2 00 A0 FD | 	call	#popregs_
06618                 | _isstring_ret
06618     2D 00 64 FD | 	ret
0661c                 | 
0661c                 | ' 
0661c                 | ' ' getnoteval. Returns the frequency of note token
0661c                 | ' 
0661c                 | ' function getnoteval(token) as single
0661c                 | _getnoteval
0661c     02 4A 05 F6 | 	mov	COUNT_, #2
06620     A8 00 A0 FD | 	call	#pushregs_
06624     01 00 00 FF 
06628     00 13 86 F1 | 	sub	arg01, ##768
0662c     09 15 52 F6 | 	abs	arg02, arg01 wc
06630     0C 14 16 FD | 	qdiv	arg02, #12
06634     14 00 00 FF 
06638     D8 E4 05 F1 | 	add	objptr, ##10456
0663c     19 14 62 FD | 	getqy	arg02
06640     0A 15 82 F6 | 	negc	arg02, arg02
06644     02 14 66 F0 | 	shl	arg02, #2
06648     F2 14 02 F1 | 	add	arg02, objptr
0664c     0A 1F 02 FB | 	rdlong	local01, arg02
06650     09 15 52 F6 | 	abs	arg02, arg01 wc
06654     0C 14 16 FD | 	qdiv	arg02, #12
06658     14 00 00 FF 
0665c     D8 E4 85 F1 | 	sub	objptr, ##10456
06660     01 12 06 F6 | 	mov	arg01, #1
06664                 | ' noteexp=1+(note/12) 
06664                 | ' return (2.0^noteexp)*notebase
06664     18 14 62 FD | 	getqx	arg02
06668     0A 13 82 F3 | 	sumc	arg01, arg02
0666c     09 13 52 F6 | 	abs	arg01, arg01 wc
06670     1F 20 C6 C9 |  if_b	decod	local02, #31
06674     00 20 06 36 |  if_ae	mov	local02, #0
06678     80 C9 B1 FD | 	call	#__system___float_fromuns
0667c     10 FB 61 F5 | 	xor	result1, local02
06680     FD 14 02 F6 | 	mov	arg02, result1
06684     1E 12 C6 F9 | 	decod	arg01, #30
06688     7C DC B1 FD | 	call	#__system____builtin_powf
0668c     FD 12 02 F6 | 	mov	arg01, result1
06690     0F 15 02 F6 | 	mov	arg02, local01
06694     68 CD B1 FD | 	call	#__system___float_mul
06698     A7 F0 03 F6 | 	mov	ptra, fp
0669c     B2 00 A0 FD | 	call	#popregs_
066a0                 | _getnoteval_ret
066a0     2D 00 64 FD | 	ret
066a4                 | 
066a4                 | ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' '
066a4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
066a4                 | ' '
066a4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
066a4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
066a4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
066a4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
066a4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
066a4                 | ' ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' ' Helper functions to manage program lines
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' 
066a4                 | ' '----- delete a line from a program
066a4                 | ' 
066a4                 | ' function deleteline(aline as ulong) as integer
066a4                 | _deleteline
066a4     02 4A 05 F6 | 	mov	COUNT_, #2
066a8     A8 00 A0 FD | 	call	#pushregs_
066ac     2C F0 07 F1 | 	add	ptra, #44
066b0     04 4E 05 F1 | 	add	fp, #4
066b4     A7 12 62 FC | 	wrlong	arg01, fp
066b8     4A 00 00 FF 
066bc     88 E4 05 F1 | 	add	objptr, ##38024
066c0     F2 1E 02 FB | 	rdlong	local01, objptr
066c4     0C 4E 05 F1 | 	add	fp, #12
066c8     A7 1E 62 FC | 	wrlong	local01, fp
066cc     10 4E 85 F1 | 	sub	fp, #16
066d0                 | ' 
066d0                 | ' searchptr=programstart
066d0                 | ' do
066d0     3E 00 00 FF 
066d4     BC E5 85 F1 | 	sub	objptr, ##32188
066d8                 | LR__0560
066d8     14 4E 05 F1 | 	add	fp, #20
066dc     A7 12 02 F6 | 	mov	arg01, fp
066e0     04 4E 85 F1 | 	sub	fp, #4
066e4     A7 14 02 FB | 	rdlong	arg02, fp
066e8     10 4E 85 F1 | 	sub	fp, #16
066ec     18 16 06 F6 | 	mov	arg03, #24
066f0     18 95 B1 FD | 	call	#_psram_spin2_read1
066f4     10 4E 05 F1 | 	add	fp, #16
066f8     A7 1E 02 FB | 	rdlong	local01, fp
066fc     08 4E 85 F1 | 	sub	fp, #8
06700     A7 1E 62 FC | 	wrlong	local01, fp
06704     20 4E 05 F1 | 	add	fp, #32
06708     A7 1E 02 FB | 	rdlong	local01, fp
0670c     18 4E 85 F1 | 	sub	fp, #24
06710     A7 1E 62 FC | 	wrlong	local01, fp
06714     04 4E 05 F1 | 	add	fp, #4
06718     A7 1E 02 FB | 	rdlong	local01, fp
0671c     10 4E 85 F1 | 	sub	fp, #16
06720     A7 16 02 FB | 	rdlong	arg03, fp
06724     04 4E 85 F1 | 	sub	fp, #4
06728     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0672c     28 4E 05 C1 |  if_b	add	fp, #40
06730     A7 20 02 CB |  if_b	rdlong	local02, fp
06734     28 4E 85 C1 |  if_b	sub	fp, #40
06738     FF FF 3F CF 
0673c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06740     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
06744     0B 00 00 FF 
06748     CC E4 85 F1 | 	sub	objptr, ##5836
0674c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
0674c     14 4E 05 F1 | 	add	fp, #20
06750     A7 1E 02 FB | 	rdlong	local01, fp
06754     10 4E 85 F1 | 	sub	fp, #16
06758     A7 20 02 FB | 	rdlong	local02, fp
0675c     04 4E 85 F1 | 	sub	fp, #4
06760     10 1F 0A F2 | 	cmp	local01, local02 wz
06764     01 FA 65 56 |  if_ne	neg	result1, #1
06768     34 02 90 5D |  if_ne	jmp	#LR__0565
0676c     08 4E 05 F1 | 	add	fp, #8
06770     A7 12 02 FB | 	rdlong	arg01, fp
06774     08 4E 85 F1 | 	sub	fp, #8
06778     01 14 66 F6 | 	neg	arg02, #1
0677c     A0 6C B1 FD | 	call	#_pslpoke
06780                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06780                 | ' 
06780                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06780     28 4E 05 F1 | 	add	fp, #40
06784     A7 1E 02 FB | 	rdlong	local01, fp
06788     28 4E 85 F1 | 	sub	fp, #40
0678c     FF FF 3F FF 
06790     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06794     24 4E 05 A1 |  if_e	add	fp, #36
06798     A7 20 02 AB |  if_e	rdlong	local02, fp
0679c     24 4E 85 A1 |  if_e	sub	fp, #36
067a0     FF FF 7F AF 
067a4     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
067a8     88 00 90 5D |  if_ne	jmp	#LR__0561
067ac     4A 00 00 FF 
067b0     88 E4 05 F1 | 	add	objptr, ##38024
067b4     00 04 80 FF 
067b8     F2 00 68 FC | 	wrlong	##524288, objptr
067bc     07 00 00 FF 
067c0     2C E4 85 F1 | 	sub	objptr, ##3628
067c4     00 04 80 FF 
067c8     F2 00 68 FC | 	wrlong	##524288, objptr
067cc     07 00 00 FF 
067d0     30 E4 05 F1 | 	add	objptr, ##3632
067d4     F2 00 68 FC | 	wrlong	#0, objptr
067d8     04 E4 05 F1 | 	add	objptr, #4
067dc     FF FF FF FF 
067e0     F2 FE 6B FC | 	wrlong	##-1, objptr
067e4     4A 00 00 FF 
067e8     90 E4 85 F1 | 	sub	objptr, ##38032
067ec     00 12 06 F6 | 	mov	arg01, #0
067f0     01 14 66 F6 | 	neg	arg02, #1
067f4     28 6C B1 FD | 	call	#_pslpoke
067f8     10 12 06 F6 | 	mov	arg01, #16
067fc     01 14 66 F6 | 	neg	arg02, #1
06800     1C 6C B1 FD | 	call	#_pslpoke
06804     14 12 06 F6 | 	mov	arg01, #20
06808     1E 14 CE F9 | 	bmask	arg02, #30
0680c     10 6C B1 FD | 	call	#_pslpoke
06810     50 00 00 FF 
06814     B8 E4 05 F1 | 	add	objptr, ##41144
06818     00 04 80 FF 
0681c     F2 00 68 FC | 	wrlong	##524288, objptr
06820     04 E4 05 F1 | 	add	objptr, #4
06824     00 04 80 FF 
06828     F2 00 68 FC | 	wrlong	##524288, objptr
0682c     50 00 00 FF 
06830     BC E4 85 F1 | 	sub	objptr, ##41148
06834                 | LR__0561
06834                 | ' 
06834                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06834     28 4E 05 F1 | 	add	fp, #40
06838     A7 1E 02 FB | 	rdlong	local01, fp
0683c     28 4E 85 F1 | 	sub	fp, #40
06840     FF FF 3F FF 
06844     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06848     74 00 90 5D |  if_ne	jmp	#LR__0562
0684c     24 4E 05 F1 | 	add	fp, #36
06850     A7 20 02 FB | 	rdlong	local02, fp
06854     24 4E 85 F1 | 	sub	fp, #36
06858     FF FF 7F FF 
0685c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06860     5C 00 90 AD |  if_e	jmp	#LR__0562
06864     24 4E 05 F1 | 	add	fp, #36
06868     A7 12 02 FB | 	rdlong	arg01, fp
0686c     24 4E 85 F1 | 	sub	fp, #36
06870     14 12 06 F1 | 	add	arg01, #20
06874     1E 14 CE F9 | 	bmask	arg02, #30
06878     A4 6B B1 FD | 	call	#_pslpoke
0687c     24 4E 05 F1 | 	add	fp, #36
06880     A7 1E 02 FB | 	rdlong	local01, fp
06884     4A 00 00 FF 
06888     90 E4 05 F1 | 	add	objptr, ##38032
0688c     F2 1E 62 FC | 	wrlong	local01, objptr
06890     4A 00 00 FF 
06894     90 E4 85 F1 | 	sub	objptr, ##38032
06898     A7 12 02 FB | 	rdlong	arg01, fp
0689c     24 4E 85 F1 | 	sub	fp, #36
068a0     AC 6C B1 FD | 	call	#_pslpeek
068a4     4A 00 00 FF 
068a8     8C E4 05 F1 | 	add	objptr, ##38028
068ac     F2 FA 61 FC | 	wrlong	result1, objptr
068b0     4A 00 00 FF 
068b4     8C E4 85 F1 | 	sub	objptr, ##38028
068b8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
068b8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
068b8                 | '   lastline=pslpeek(header(4))
068b8                 | '   return 0
068b8     00 FA 05 F6 | 	mov	result1, #0
068bc     E0 00 90 FD | 	jmp	#LR__0565
068c0                 | LR__0562
068c0                 | ' 
068c0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
068c0     28 4E 05 F1 | 	add	fp, #40
068c4     A7 1E 02 FB | 	rdlong	local01, fp
068c8     28 4E 85 F1 | 	sub	fp, #40
068cc     FF FF 3F FF 
068d0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
068d4     58 00 90 AD |  if_e	jmp	#LR__0563
068d8     24 4E 05 F1 | 	add	fp, #36
068dc     A7 20 02 FB | 	rdlong	local02, fp
068e0     24 4E 85 F1 | 	sub	fp, #36
068e4     FF FF 7F FF 
068e8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
068ec     40 00 90 5D |  if_ne	jmp	#LR__0563
068f0     28 4E 05 F1 | 	add	fp, #40
068f4     A7 12 02 FB | 	rdlong	arg01, fp
068f8     28 4E 85 F1 | 	sub	fp, #40
068fc     10 12 06 F1 | 	add	arg01, #16
06900     01 14 66 F6 | 	neg	arg02, #1
06904     18 6B B1 FD | 	call	#_pslpoke
06908     28 4E 05 F1 | 	add	fp, #40
0690c     A7 1E 02 FB | 	rdlong	local01, fp
06910     28 4E 85 F1 | 	sub	fp, #40
06914     4A 00 00 FF 
06918     88 E4 05 F1 | 	add	objptr, ##38024
0691c     F2 1E 62 FC | 	wrlong	local01, objptr
06920     4A 00 00 FF 
06924     88 E4 85 F1 | 	sub	objptr, ##38024
06928                 | ' '   print "deleted first line"
06928                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06928                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06928                 | '   return 0
06928     00 FA 05 F6 | 	mov	result1, #0
0692c     70 00 90 FD | 	jmp	#LR__0565
06930                 | LR__0563
06930                 | ' 
06930                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06930     28 4E 05 F1 | 	add	fp, #40
06934     A7 1E 02 FB | 	rdlong	local01, fp
06938     28 4E 85 F1 | 	sub	fp, #40
0693c     FF FF 3F FF 
06940     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06944     24 4E 05 51 |  if_ne	add	fp, #36
06948     A7 20 02 5B |  if_ne	rdlong	local02, fp
0694c     24 4E 85 51 |  if_ne	sub	fp, #36
06950     FF FF 7F 5F 
06954     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
06958     40 00 90 AD |  if_e	jmp	#LR__0564
0695c     28 4E 05 F1 | 	add	fp, #40
06960     A7 12 02 FB | 	rdlong	arg01, fp
06964     10 12 06 F1 | 	add	arg01, #16
06968     04 4E 85 F1 | 	sub	fp, #4
0696c     A7 14 02 FB | 	rdlong	arg02, fp
06970     24 4E 85 F1 | 	sub	fp, #36
06974     A8 6A B1 FD | 	call	#_pslpoke
06978     24 4E 05 F1 | 	add	fp, #36
0697c     A7 12 02 FB | 	rdlong	arg01, fp
06980     14 12 06 F1 | 	add	arg01, #20
06984     04 4E 05 F1 | 	add	fp, #4
06988     A7 14 02 FB | 	rdlong	arg02, fp
0698c     28 4E 85 F1 | 	sub	fp, #40
06990     8C 6A B1 FD | 	call	#_pslpoke
06994                 | '    pslpoke(header(5)+16,header(4))  
06994                 | '    pslpoke(header(4)+20, header(5))
06994                 | '    return 0
06994     00 FA 05 F6 | 	mov	result1, #0
06998     04 00 90 FD | 	jmp	#LR__0565
0699c                 | LR__0564
0699c     00 FA 05 F6 | 	mov	result1, #0
069a0                 | LR__0565
069a0     A7 F0 03 F6 | 	mov	ptra, fp
069a4     B2 00 A0 FD | 	call	#popregs_
069a8                 | _deleteline_ret
069a8     2D 00 64 FD | 	ret
069ac                 | 
069ac                 | ' 
069ac                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
069ac                 | ' 
069ac                 | ' sub save_line
069ac                 | _save_line
069ac     03 4A 05 F6 | 	mov	COUNT_, #3
069b0     A8 00 A0 FD | 	call	#pushregs_
069b4     4A 00 00 FF 
069b8     7C E4 05 F1 | 	add	objptr, ##38012
069bc     F2 16 02 FB | 	rdlong	arg03, objptr
069c0     01 16 06 F1 | 	add	arg03, #1
069c4     05 00 00 FF 
069c8     18 E4 85 F1 | 	sub	objptr, ##2584
069cc     F2 14 02 FB | 	rdlong	arg02, objptr
069d0     0B 15 02 FD | 	qmul	arg02, arg03
069d4     0E 00 00 FF 
069d8     44 E4 85 F1 | 	sub	objptr, ##7236
069dc     F2 12 02 FB | 	rdlong	arg01, objptr
069e0     37 00 00 FF 
069e4     20 E4 85 F1 | 	sub	objptr, ##28192
069e8     09 1F 02 F6 | 	mov	local01, arg01
069ec     18 20 62 FD | 	getqx	local02
069f0     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
069f4                 | LR__0570
069f4     0F FB C9 FA | 	rdbyte	result1, local01 wz
069f8     01 1E 06 51 |  if_ne	add	local01, #1
069fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06a00                 | LR__0571
06a00     09 1F 82 F1 | 	sub	local01, arg01
06a04     03 1E CE F7 | 	test	local01, #3 wz
06a08     02 1E 46 50 |  if_ne	shr	local01, #2
06a0c     01 1E 06 51 |  if_ne	add	local01, #1
06a10     02 1E 66 50 |  if_ne	shl	local01, #2
06a14     10 23 02 F6 | 	mov	local03, local02
06a18     0F 23 02 F1 | 	add	local03, local01
06a1c     43 00 00 FF 
06a20     5C E4 05 F1 | 	add	objptr, ##34396
06a24     F2 16 02 FB | 	rdlong	arg03, objptr
06a28     10 17 02 F1 | 	add	arg03, local02
06a2c     04 00 00 FF 
06a30     28 E4 05 F1 | 	add	objptr, ##2088
06a34     F2 16 62 FC | 	wrlong	arg03, objptr
06a38     04 E4 05 F1 | 	add	objptr, #4
06a3c     F2 1E 62 FC | 	wrlong	local01, objptr
06a40     0C E4 85 F1 | 	sub	objptr, #12
06a44     F2 12 02 F6 | 	mov	arg01, objptr
06a48     04 00 00 FF 
06a4c     20 E4 85 F1 | 	sub	objptr, ##2080
06a50     F2 14 02 FB | 	rdlong	arg02, objptr
06a54     10 17 02 F6 | 	mov	arg03, local02
06a58     37 00 00 FF 
06a5c     90 E5 85 F1 | 	sub	objptr, ##28560
06a60     44 92 B1 FD | 	call	#_psram_spin2_write
06a64     2B 00 00 FF 
06a68     54 E5 05 F1 | 	add	objptr, ##22356
06a6c     F2 12 02 FB | 	rdlong	arg01, objptr
06a70     0C 00 00 FF 
06a74     3C E4 05 F1 | 	add	objptr, ##6204
06a78     F2 14 02 FB | 	rdlong	arg02, objptr
06a7c     10 15 02 F1 | 	add	arg02, local02
06a80     0F 17 02 F6 | 	mov	arg03, local01
06a84     37 00 00 FF 
06a88     90 E5 85 F1 | 	sub	objptr, ##28560
06a8c     18 92 B1 FD | 	call	#_psram_spin2_write
06a90     37 00 00 FF 
06a94     90 E5 05 F1 | 	add	objptr, ##28560
06a98     F2 1E 02 FB | 	rdlong	local01, objptr
06a9c     11 1F 02 F1 | 	add	local01, local03
06aa0     F2 1E 62 FC | 	wrlong	local01, objptr
06aa4     43 00 00 FF 
06aa8     5C E4 85 F1 | 	sub	objptr, ##34396
06aac     A7 F0 03 F6 | 	mov	ptra, fp
06ab0     B2 00 A0 FD | 	call	#popregs_
06ab4                 | _save_line_ret
06ab4     2D 00 64 FD | 	ret
06ab8                 | 
06ab8                 | ' 
06ab8                 | ' '----- Insert a new line into the middle of the program
06ab8                 | ' 
06ab8                 | ' function insertline(aline as ulong) as integer
06ab8                 | _insertline
06ab8     02 4A 05 F6 | 	mov	COUNT_, #2
06abc     A8 00 A0 FD | 	call	#pushregs_
06ac0     28 F0 07 F1 | 	add	ptra, #40
06ac4     04 4E 05 F1 | 	add	fp, #4
06ac8     A7 12 62 FC | 	wrlong	arg01, fp
06acc     4A 00 00 FF 
06ad0     88 E4 05 F1 | 	add	objptr, ##38024
06ad4     F2 1E 02 FB | 	rdlong	local01, objptr
06ad8     04 4E 05 F1 | 	add	fp, #4
06adc     A7 1E 62 FC | 	wrlong	local01, fp
06ae0     08 4E 85 F1 | 	sub	fp, #8
06ae4                 | ' 
06ae4                 | ' do
06ae4     3E 00 00 FF 
06ae8     BC E5 85 F1 | 	sub	objptr, ##32188
06aec                 | LR__0580
06aec     10 4E 05 F1 | 	add	fp, #16
06af0     A7 12 02 F6 | 	mov	arg01, fp
06af4     08 4E 85 F1 | 	sub	fp, #8
06af8     A7 14 02 FB | 	rdlong	arg02, fp
06afc     08 4E 85 F1 | 	sub	fp, #8
06b00     18 16 06 F6 | 	mov	arg03, #24
06b04     04 91 B1 FD | 	call	#_psram_spin2_read1
06b08     08 4E 05 F1 | 	add	fp, #8
06b0c     A7 1E 02 FB | 	rdlong	local01, fp
06b10     04 4E 05 F1 | 	add	fp, #4
06b14     A7 1E 62 FC | 	wrlong	local01, fp
06b18     18 4E 05 F1 | 	add	fp, #24
06b1c     A7 1E 02 FB | 	rdlong	local01, fp
06b20     1C 4E 85 F1 | 	sub	fp, #28
06b24     A7 1E 62 FC | 	wrlong	local01, fp
06b28     08 4E 05 F1 | 	add	fp, #8
06b2c     A7 1E 02 FB | 	rdlong	local01, fp
06b30     0C 4E 85 F1 | 	sub	fp, #12
06b34     A7 16 02 FB | 	rdlong	arg03, fp
06b38     04 4E 85 F1 | 	sub	fp, #4
06b3c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b40     24 4E 05 C1 |  if_b	add	fp, #36
06b44     A7 20 02 CB |  if_b	rdlong	local02, fp
06b48     24 4E 85 C1 |  if_b	sub	fp, #36
06b4c     FF FF 3F CF 
06b50     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06b54     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06b58     0B 00 00 FF 
06b5c     CC E4 85 F1 | 	sub	objptr, ##5836
06b60                 | ' 
06b60                 | ' if header(0)=aline then return -1 				' delete it first
06b60     10 4E 05 F1 | 	add	fp, #16
06b64     A7 1E 02 FB | 	rdlong	local01, fp
06b68     0C 4E 85 F1 | 	sub	fp, #12
06b6c     A7 20 02 FB | 	rdlong	local02, fp
06b70     04 4E 85 F1 | 	sub	fp, #4
06b74     10 1F 0A F2 | 	cmp	local01, local02 wz
06b78     01 FA 65 A6 |  if_e	neg	result1, #1
06b7c     48 01 90 AD |  if_e	jmp	#LR__0583
06b80                 | ' if header(0)<aline then return -2 				' end of program reached
06b80     10 4E 05 F1 | 	add	fp, #16
06b84     A7 1E 02 FB | 	rdlong	local01, fp
06b88     0C 4E 85 F1 | 	sub	fp, #12
06b8c     A7 16 02 FB | 	rdlong	arg03, fp
06b90     04 4E 85 F1 | 	sub	fp, #4
06b94     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b98     02 FA 65 C6 |  if_b	neg	result1, #2
06b9c     28 01 90 CD |  if_b	jmp	#LR__0583
06ba0                 | ' 
06ba0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06ba0     20 4E 05 F1 | 	add	fp, #32
06ba4     A7 1E 02 FB | 	rdlong	local01, fp
06ba8     20 4E 85 F1 | 	sub	fp, #32
06bac     FF FF 7F FF 
06bb0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06bb4     78 00 90 5D |  if_ne	jmp	#LR__0581
06bb8     43 00 00 FF 
06bbc     5C E4 05 F1 | 	add	objptr, ##34396
06bc0     F2 1E 02 FB | 	rdlong	local01, objptr
06bc4     07 00 00 FF 
06bc8     2C E4 05 F1 | 	add	objptr, ##3628
06bcc     F2 1E 62 FC | 	wrlong	local01, objptr
06bd0     0C 4E 05 F1 | 	add	fp, #12
06bd4     A7 12 02 FB | 	rdlong	arg01, fp
06bd8     0C 4E 85 F1 | 	sub	fp, #12
06bdc     10 12 06 F1 | 	add	arg01, #16
06be0     07 00 00 FF 
06be4     2C E4 85 F1 | 	sub	objptr, ##3628
06be8     F2 14 02 FB | 	rdlong	arg02, objptr
06bec     43 00 00 FF 
06bf0     5C E4 85 F1 | 	sub	objptr, ##34396
06bf4     28 68 B1 FD | 	call	#_pslpoke
06bf8     47 00 00 FF 
06bfc     8C E4 05 F1 | 	add	objptr, ##36492
06c00     FF FF FF FF 
06c04     F2 FE 6B FC | 	wrlong	##-1, objptr
06c08     0C 4E 05 F1 | 	add	fp, #12
06c0c     A7 1E 02 FB | 	rdlong	local01, fp
06c10     0C 4E 85 F1 | 	sub	fp, #12
06c14     04 E4 05 F1 | 	add	objptr, #4
06c18     F2 1E 62 FC | 	wrlong	local01, objptr
06c1c     47 00 00 FF 
06c20     90 E4 85 F1 | 	sub	objptr, ##36496
06c24     84 FD BF FD | 	call	#_save_line
06c28                 | '   programstart=programptr
06c28                 | '   pslpoke(lineptr2+16,programptr)
06c28                 | '   ucompiledline(4)=$FFFF_FFFF
06c28                 | '   ucompiledline(5)=lineptr2
06c28                 | '   save_line
06c28                 | '   return 0
06c28     00 FA 05 F6 | 	mov	result1, #0
06c2c     98 00 90 FD | 	jmp	#LR__0583
06c30                 | LR__0581
06c30                 | ' 
06c30                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06c30     20 4E 05 F1 | 	add	fp, #32
06c34     A7 1E 02 FB | 	rdlong	local01, fp
06c38     20 4E 85 F1 | 	sub	fp, #32
06c3c     FF FF 7F FF 
06c40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06c44     7C 00 90 AD |  if_e	jmp	#LR__0582
06c48     20 4E 05 F1 | 	add	fp, #32
06c4c     A7 1E 02 FB | 	rdlong	local01, fp
06c50     47 00 00 FF 
06c54     8C E4 05 F1 | 	add	objptr, ##36492
06c58     F2 1E 62 FC | 	wrlong	local01, objptr
06c5c     14 4E 85 F1 | 	sub	fp, #20
06c60     A7 1E 02 FB | 	rdlong	local01, fp
06c64     04 E4 05 F1 | 	add	objptr, #4
06c68     F2 1E 62 FC | 	wrlong	local01, objptr
06c6c     A7 12 02 FB | 	rdlong	arg01, fp
06c70     0C 4E 85 F1 | 	sub	fp, #12
06c74     10 12 06 F1 | 	add	arg01, #16
06c78     04 00 00 FF 
06c7c     34 E4 85 F1 | 	sub	objptr, ##2100
06c80     F2 14 02 FB | 	rdlong	arg02, objptr
06c84     43 00 00 FF 
06c88     5C E4 85 F1 | 	sub	objptr, ##34396
06c8c     90 67 B1 FD | 	call	#_pslpoke
06c90     20 4E 05 F1 | 	add	fp, #32
06c94     A7 12 02 FB | 	rdlong	arg01, fp
06c98     20 4E 85 F1 | 	sub	fp, #32
06c9c     14 12 06 F1 | 	add	arg01, #20
06ca0     43 00 00 FF 
06ca4     5C E4 05 F1 | 	add	objptr, ##34396
06ca8     F2 14 02 FB | 	rdlong	arg02, objptr
06cac     43 00 00 FF 
06cb0     5C E4 85 F1 | 	sub	objptr, ##34396
06cb4     68 67 B1 FD | 	call	#_pslpoke
06cb8     F0 FC BF FD | 	call	#_save_line
06cbc                 | '   ucompiledline(4)=header(4)
06cbc                 | '   ucompiledline(5)=lineptr2
06cbc                 | '   pslpoke(lineptr2+16,programptr)
06cbc                 | '   pslpoke(header(4)+20,programptr)
06cbc                 | '   save_line
06cbc                 | '   return 0
06cbc     00 FA 05 F6 | 	mov	result1, #0
06cc0     04 00 90 FD | 	jmp	#LR__0583
06cc4                 | LR__0582
06cc4     00 FA 05 F6 | 	mov	result1, #0
06cc8                 | LR__0583
06cc8     A7 F0 03 F6 | 	mov	ptra, fp
06ccc     B2 00 A0 FD | 	call	#popregs_
06cd0                 | _insertline_ret
06cd0     2D 00 64 FD | 	ret
06cd4                 | 
06cd4                 | ' 
06cd4                 | ' '----- Adds a new line at the end of the program
06cd4                 | ' 
06cd4                 | ' sub add_line_at_end(aline) 
06cd4                 | _add_line_at_end
06cd4     4A 00 00 FF 
06cd8     8C E4 05 F1 | 	add	objptr, ##38028
06cdc     F2 12 62 FC | 	wrlong	arg01, objptr
06ce0     04 E4 05 F1 | 	add	objptr, #4
06ce4     F2 14 02 FB | 	rdlong	arg02, objptr
06ce8     03 00 00 FF 
06cec     04 E4 85 F1 | 	sub	objptr, ##1540
06cf0     F2 14 62 FC | 	wrlong	arg02, objptr
06cf4     03 00 00 FF 
06cf8     04 E4 05 F1 | 	add	objptr, ##1540
06cfc     F2 12 02 FB | 	rdlong	arg01, objptr
06d00     14 12 06 F1 | 	add	arg01, #20
06d04     07 00 00 FF 
06d08     34 E4 85 F1 | 	sub	objptr, ##3636
06d0c     F2 14 02 FB | 	rdlong	arg02, objptr
06d10     43 00 00 FF 
06d14     5C E4 85 F1 | 	sub	objptr, ##34396
06d18     04 67 B1 FD | 	call	#_pslpoke
06d1c     43 00 00 FF 
06d20     5C E4 05 F1 | 	add	objptr, ##34396
06d24     F2 14 02 FB | 	rdlong	arg02, objptr
06d28     07 00 00 FF 
06d2c     34 E4 05 F1 | 	add	objptr, ##3636
06d30     F2 14 62 FC | 	wrlong	arg02, objptr
06d34     03 00 00 FF 
06d38     00 E4 85 F1 | 	sub	objptr, ##1536
06d3c     FF FF BF FF 
06d40     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06d44                 | ' 
06d44                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06d44                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06d44     04 00 00 FF 
06d48     34 E4 85 F1 | 	sub	objptr, ##2100
06d4c     F2 14 02 FB | 	rdlong	arg02, objptr
06d50     43 00 00 FF 
06d54     5C E4 85 F1 | 	sub	objptr, ##34396
06d58     00 04 00 FF 
06d5c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06d60     47 00 00 AF 
06d64     8C E4 05 A1 |  if_e	add	objptr, ##36492
06d68     FF FF FF AF 
06d6c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06d70     47 00 00 AF 
06d74     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06d78     30 FC BF FD | 	call	#_save_line
06d7c     43 00 00 FF 
06d80     5C E4 05 F1 | 	add	objptr, ##34396
06d84     F2 12 02 FB | 	rdlong	arg01, objptr
06d88     43 00 00 FF 
06d8c     5C E4 85 F1 | 	sub	objptr, ##34396
06d90     01 14 66 F6 | 	neg	arg02, #1
06d94     88 66 B1 FD | 	call	#_pslpoke
06d98                 | _add_line_at_end_ret
06d98     2D 00 64 FD | 	ret
06d9c                 | 
06d9c                 | ' 
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' 
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' 
06d9c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
06d9c                 | ' 
06d9c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
06d9c                 | _compile_immediate
06d9c     0A 4A 05 F6 | 	mov	COUNT_, #10
06da0     A8 00 A0 FD | 	call	#pushregs_
06da4                 | _compile_immediate_enter
06da4     09 25 02 F6 | 	mov	local04, arg01
06da8     0A 27 02 F6 | 	mov	local05, arg02
06dac     00 28 06 F6 | 	mov	local06, #0
06db0     00 2A 06 F6 | 	mov	local07, #0
06db4     00 2C 06 F6 | 	mov	local08, #0
06db8                 | ' 
06db8                 | ' ' linetype=cont+1
06db8                 | ' ' 1 : this is the first part of the line that will continue
06db8                 | ' ' 2 - this is the continuation of the line
06db8                 | ' ' 3 - this is the last continued line
06db8                 | ' ' 4 - this is the one and only part
06db8                 | ' ' 5 - continued after if/else
06db8                 | ' 
06db8                 | ' err=0
06db8                 | ' cmd=0
06db8                 | ' vars=0
06db8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
06db8     02 24 0E F2 | 	cmp	local04, #2 wz
06dbc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06dc0     24 00 90 5D |  if_ne	jmp	#LR__0590
06dc4     35 00 00 FF 
06dc8     10 E4 05 F1 | 	add	objptr, ##27152
06dcc     F2 2A 02 FB | 	rdlong	local07, objptr
06dd0     01 2E 06 F6 | 	mov	local09, #1
06dd4     02 00 00 FF 
06dd8     34 E4 05 F1 | 	add	objptr, ##1076
06ddc     F2 02 68 FC | 	wrlong	#1, objptr
06de0     37 00 00 FF 
06de4     44 E4 85 F1 | 	sub	objptr, ##28228
06de8                 | LR__0590
06de8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06de8     04 24 0E F2 | 	cmp	local04, #4 wz
06dec     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06df0     30 00 90 5D |  if_ne	jmp	#LR__0591
06df4     35 00 00 FF 
06df8     18 E4 05 F1 | 	add	objptr, ##27160
06dfc     F2 2A 02 FB | 	rdlong	local07, objptr
06e00     02 2E 06 F6 | 	mov	local09, #2
06e04     02 00 00 FF 
06e08     2C E4 05 F1 | 	add	objptr, ##1068
06e0c     F2 04 68 FC | 	wrlong	#2, objptr
06e10     13 00 00 FF 
06e14     38 E4 05 F1 | 	add	objptr, ##9784
06e18     F2 04 68 FC | 	wrlong	#2, objptr
06e1c     4A 00 00 FF 
06e20     7C E4 85 F1 | 	sub	objptr, ##38012
06e24                 | LR__0591
06e24                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
06e24     05 24 0E F2 | 	cmp	local04, #5 wz
06e28     40 00 90 5D |  if_ne	jmp	#LR__0592
06e2c     37 00 00 FF 
06e30     44 E4 05 F1 | 	add	objptr, ##28228
06e34     F2 FC 01 FB | 	rdlong	result2, objptr
06e38     FE 2E 02 F6 | 	mov	local09, result2
06e3c     03 2E 66 F0 | 	shl	local09, #3
06e40     02 00 00 FF 
06e44     38 E4 85 F1 | 	sub	objptr, ##1080
06e48     F2 2E 02 F1 | 	add	local09, objptr
06e4c     04 2E 06 F1 | 	add	local09, #4
06e50     17 2B 02 FB | 	rdlong	local07, local09
06e54     01 FC 05 F1 | 	add	result2, #1
06e58     02 00 00 FF 
06e5c     38 E4 05 F1 | 	add	objptr, ##1080
06e60     F2 FC 61 FC | 	wrlong	result2, objptr
06e64     37 00 00 FF 
06e68     44 E4 85 F1 | 	sub	objptr, ##28228
06e6c                 | LR__0592
06e6c                 | ' 
06e6c                 | ' 'print  "In compile_immediate cmd=:", cmd
06e6c                 | ' 451 select case cmd
06e6c     5C 2A 0E F2 | 	cmp	local07, #92 wz
06e70     80 02 90 AD |  if_e	jmp	#LR__0593
06e74     47 2A 0E F2 | 	cmp	local07, #71 wz
06e78     84 02 90 AD |  if_e	jmp	#LR__0594
06e7c     59 2A 0E F2 | 	cmp	local07, #89 wz
06e80     8C 02 90 AD |  if_e	jmp	#LR__0595
06e84     45 2A 0E F2 | 	cmp	local07, #69 wz
06e88     94 02 90 AD |  if_e	jmp	#LR__0596
06e8c     69 2A 0E F2 | 	cmp	local07, #105 wz
06e90     9C 02 90 AD |  if_e	jmp	#LR__0597
06e94     40 2A 0E F2 | 	cmp	local07, #64 wz
06e98     28 06 90 AD |  if_e	jmp	#LR__0665
06e9c     B4 2A 0E F2 | 	cmp	local07, #180 wz
06ea0     98 02 90 AD |  if_e	jmp	#LR__0598
06ea4     49 2A 0E F2 | 	cmp	local07, #73 wz
06ea8     9C 02 90 AD |  if_e	jmp	#LR__0599
06eac     50 2A 0E F2 | 	cmp	local07, #80 wz
06eb0     A0 02 90 AD |  if_e	jmp	#LR__0600
06eb4     AE 2A 0E F2 | 	cmp	local07, #174 wz
06eb8     A8 02 90 AD |  if_e	jmp	#LR__0601
06ebc     B0 2A 0E F2 | 	cmp	local07, #176 wz
06ec0     AC 02 90 AD |  if_e	jmp	#LR__0602
06ec4     AF 2A 0E F2 | 	cmp	local07, #175 wz
06ec8     B0 02 90 AD |  if_e	jmp	#LR__0603
06ecc     B1 2A 0E F2 | 	cmp	local07, #177 wz
06ed0     B4 02 90 AD |  if_e	jmp	#LR__0604
06ed4     68 2A 0E F2 | 	cmp	local07, #104 wz
06ed8     B8 02 90 AD |  if_e	jmp	#LR__0605
06edc     74 2A 0E F2 | 	cmp	local07, #116 wz
06ee0     BC 02 90 AD |  if_e	jmp	#LR__0606
06ee4     73 2A 0E F2 | 	cmp	local07, #115 wz
06ee8     C4 02 90 AD |  if_e	jmp	#LR__0607
06eec     6C 2A 0E F2 | 	cmp	local07, #108 wz
06ef0     CC 02 90 AD |  if_e	jmp	#LR__0608
06ef4     89 2A 0E F2 | 	cmp	local07, #137 wz
06ef8     C8 05 90 AD |  if_e	jmp	#LR__0665
06efc     72 2A 0E F2 | 	cmp	local07, #114 wz
06f00     CC 02 90 AD |  if_e	jmp	#LR__0609
06f04     5D 2A 0E F2 | 	cmp	local07, #93 wz
06f08     D0 02 90 AD |  if_e	jmp	#LR__0610
06f0c     96 2A 0E F2 | 	cmp	local07, #150 wz
06f10     D8 02 90 AD |  if_e	jmp	#LR__0611
06f14     43 2A 0E F2 | 	cmp	local07, #67 wz
06f18     DC 02 90 AD |  if_e	jmp	#LR__0612
06f1c     5A 2A 0E F2 | 	cmp	local07, #90 wz
06f20     E4 02 90 AD |  if_e	jmp	#LR__0613
06f24     AB 2A 0E F2 | 	cmp	local07, #171 wz
06f28     98 05 90 AD |  if_e	jmp	#LR__0665
06f2c     BD 2A 0E F2 | 	cmp	local07, #189 wz
06f30     E4 02 90 AD |  if_e	jmp	#LR__0614
06f34     BB 2A 0E F2 | 	cmp	local07, #187 wz
06f38     EC 02 90 AD |  if_e	jmp	#LR__0615
06f3c     4E 2A 0E F2 | 	cmp	local07, #78 wz
06f40     F4 02 90 AD |  if_e	jmp	#LR__0616
06f44     A9 2A 0E F2 | 	cmp	local07, #169 wz
06f48     08 03 90 AD |  if_e	jmp	#LR__0618
06f4c     46 2A 0E F2 | 	cmp	local07, #70 wz
06f50     1C 03 90 AD |  if_e	jmp	#LR__0620
06f54     71 2A 0E F2 | 	cmp	local07, #113 wz
06f58     24 03 90 AD |  if_e	jmp	#LR__0621
06f5c     60 2A 0E F2 | 	cmp	local07, #96 wz
06f60     28 03 90 AD |  if_e	jmp	#LR__0622
06f64     4A 2A 0E F2 | 	cmp	local07, #74 wz
06f68     2C 03 90 AD |  if_e	jmp	#LR__0623
06f6c     48 2A 0E F2 | 	cmp	local07, #72 wz
06f70     30 03 90 AD |  if_e	jmp	#LR__0624
06f74     58 2A 0E F2 | 	cmp	local07, #88 wz
06f78     38 03 90 AD |  if_e	jmp	#LR__0625
06f7c     5F 2A 0E F2 | 	cmp	local07, #95 wz
06f80     40 03 90 AD |  if_e	jmp	#LR__0626
06f84     8A 2A 0E F2 | 	cmp	local07, #138 wz
06f88     44 03 90 AD |  if_e	jmp	#LR__0627
06f8c     4C 2A 0E F2 | 	cmp	local07, #76 wz
06f90     48 03 90 AD |  if_e	jmp	#LR__0628
06f94     52 2A 0E F2 | 	cmp	local07, #82 wz
06f98     50 03 90 AD |  if_e	jmp	#LR__0629
06f9c     97 2A 0E F2 | 	cmp	local07, #151 wz
06fa0     58 03 90 AD |  if_e	jmp	#LR__0630
06fa4     61 2A 0E F2 | 	cmp	local07, #97 wz
06fa8     5C 03 90 AD |  if_e	jmp	#LR__0631
06fac     63 2A 0E F2 | 	cmp	local07, #99 wz
06fb0     60 03 90 AD |  if_e	jmp	#LR__0632
06fb4     41 2A 0E F2 | 	cmp	local07, #65 wz
06fb8     08 05 90 AD |  if_e	jmp	#LR__0665
06fbc     4B 2A 0E F2 | 	cmp	local07, #75 wz
06fc0     5C 03 90 AD |  if_e	jmp	#LR__0633
06fc4     B3 2A 0E F2 | 	cmp	local07, #179 wz
06fc8     60 03 90 AD |  if_e	jmp	#LR__0634
06fcc     5E 2A 0E F2 | 	cmp	local07, #94 wz
06fd0     64 03 90 AD |  if_e	jmp	#LR__0635
06fd4     7C 2A 0E F2 | 	cmp	local07, #124 wz
06fd8     68 03 90 AD |  if_e	jmp	#LR__0636
06fdc     7D 2A 0E F2 | 	cmp	local07, #125 wz
06fe0     6C 03 90 AD |  if_e	jmp	#LR__0637
06fe4     7E 2A 0E F2 | 	cmp	local07, #126 wz
06fe8     70 03 90 AD |  if_e	jmp	#LR__0638
06fec     7F 2A 0E F2 | 	cmp	local07, #127 wz
06ff0     74 03 90 AD |  if_e	jmp	#LR__0639
06ff4     80 2A 0E F2 | 	cmp	local07, #128 wz
06ff8     78 03 90 AD |  if_e	jmp	#LR__0640
06ffc     55 2A 0E F2 | 	cmp	local07, #85 wz
07000     7C 03 90 AD |  if_e	jmp	#LR__0641
07004     75 2A 0E F2 | 	cmp	local07, #117 wz
07008     80 03 90 AD |  if_e	jmp	#LR__0642
0700c     42 2A 0E F2 | 	cmp	local07, #66 wz
07010     88 03 90 AD |  if_e	jmp	#LR__0643
07014     95 2A 0E F2 | 	cmp	local07, #149 wz
07018     90 03 90 AD |  if_e	jmp	#LR__0644
0701c     AC 2A 0E F2 | 	cmp	local07, #172 wz
07020     A0 04 90 AD |  if_e	jmp	#LR__0665
07024     81 2A 0E F2 | 	cmp	local07, #129 wz
07028     8C 03 90 AD |  if_e	jmp	#LR__0645
0702c     44 2A 0E F2 | 	cmp	local07, #68 wz
07030     90 03 90 AD |  if_e	jmp	#LR__0646
07034     BC 2A 0E F2 | 	cmp	local07, #188 wz
07038     94 03 90 AD |  if_e	jmp	#LR__0647
0703c     88 2A 0E F2 | 	cmp	local07, #136 wz
07040     80 04 90 AD |  if_e	jmp	#LR__0665
07044     92 2A 0E F2 | 	cmp	local07, #146 wz
07048     94 03 90 AD |  if_e	jmp	#LR__0648
0704c     BE 2A 0E F2 | 	cmp	local07, #190 wz
07050     2C 05 90 AD |  if_e	jmp	#LR__0666
07054     AA 2A 0E F2 | 	cmp	local07, #170 wz
07058     68 04 90 AD |  if_e	jmp	#LR__0665
0705c     4D 2A 0E F2 | 	cmp	local07, #77 wz
07060     88 03 90 AD |  if_e	jmp	#LR__0649
07064     51 2A 0E F2 | 	cmp	local07, #81 wz
07068     90 03 90 AD |  if_e	jmp	#LR__0650
0706c     8E 2A 0E F2 | 	cmp	local07, #142 wz
07070     98 03 90 AD |  if_e	jmp	#LR__0651
07074     90 2A 0E F2 | 	cmp	local07, #144 wz
07078     9C 03 90 AD |  if_e	jmp	#LR__0652
0707c     8D 2A 0E F2 | 	cmp	local07, #141 wz
07080     A0 03 90 AD |  if_e	jmp	#LR__0653
07084     8C 2A 0E F2 | 	cmp	local07, #140 wz
07088     A4 03 90 AD |  if_e	jmp	#LR__0654
0708c     91 2A 0E F2 | 	cmp	local07, #145 wz
07090     A8 03 90 AD |  if_e	jmp	#LR__0655
07094     8B 2A 0E F2 | 	cmp	local07, #139 wz
07098     AC 03 90 AD |  if_e	jmp	#LR__0656
0709c     8F 2A 0E F2 | 	cmp	local07, #143 wz
070a0     B0 03 90 AD |  if_e	jmp	#LR__0657
070a4     B2 2A 0E F2 | 	cmp	local07, #178 wz
070a8     B4 03 90 AD |  if_e	jmp	#LR__0658
070ac     6D 2A 0E F2 | 	cmp	local07, #109 wz
070b0     BC 03 90 AD |  if_e	jmp	#LR__0659
070b4     70 2A 0E F2 | 	cmp	local07, #112 wz
070b8     08 04 90 AD |  if_e	jmp	#LR__0665
070bc     56 2A 0E F2 | 	cmp	local07, #86 wz
070c0     B8 03 90 AD |  if_e	jmp	#LR__0660
070c4     57 2A 0E F2 | 	cmp	local07, #87 wz
070c8     F8 03 90 AD |  if_e	jmp	#LR__0665
070cc     79 2A 0E F2 | 	cmp	local07, #121 wz
070d0     B4 03 90 AD |  if_e	jmp	#LR__0661
070d4     77 2A 0E F2 | 	cmp	local07, #119 wz
070d8     B8 03 90 AD |  if_e	jmp	#LR__0662
070dc     78 2A 0E F2 | 	cmp	local07, #120 wz
070e0     BC 03 90 AD |  if_e	jmp	#LR__0663
070e4     01 00 00 FF 
070e8     04 2A 0E F2 | 	cmp	local07, ##516 wz
070ec     BC 03 90 AD |  if_e	jmp	#LR__0664
070f0     8C 04 90 FD | 	jmp	#LR__0666
070f4                 | LR__0593
070f4     D8 0A B0 FD | 	call	#_compile_fun_2p
070f8     FD 28 02 F6 | 	mov	local06, result1
070fc     C4 03 90 FD | 	jmp	#LR__0665
07100                 | LR__0594
07100     9C 0D B0 FD | 	call	#_compile_fun_varp
07104     FD 2C 02 F6 | 	mov	local08, result1
07108     FE 28 02 F6 | 	mov	local06, result2
0710c     B4 03 90 FD | 	jmp	#LR__0665
07110                 | LR__0595
07110     8C 0D B0 FD | 	call	#_compile_fun_varp
07114     FD 2C 02 F6 | 	mov	local08, result1
07118     FE 28 02 F6 | 	mov	local06, result2
0711c     A4 03 90 FD | 	jmp	#LR__0665
07120                 | LR__0596
07120     7C 0D B0 FD | 	call	#_compile_fun_varp
07124     FD 2C 02 F6 | 	mov	local08, result1
07128     FE 28 02 F6 | 	mov	local06, result2
0712c     94 03 90 FD | 	jmp	#LR__0665
07130                 | LR__0597
07130                 | ' return expr()
07130     4C 2A B0 FD | 	call	#_expr
07134     FD 28 02 F6 | 	mov	local06, result1
07138     88 03 90 FD | 	jmp	#LR__0665
0713c                 | LR__0598
0713c                 | ' return expr()
0713c     40 2A B0 FD | 	call	#_expr
07140     FD 28 02 F6 | 	mov	local06, result1
07144     7C 03 90 FD | 	jmp	#LR__0665
07148                 | LR__0599
07148                 | ' return expr()
07148     34 2A B0 FD | 	call	#_expr
0714c     FD 28 02 F6 | 	mov	local06, result1
07150     70 03 90 FD | 	jmp	#LR__0665
07154                 | LR__0600
07154     48 0D B0 FD | 	call	#_compile_fun_varp
07158     FD 2C 02 F6 | 	mov	local08, result1
0715c     FE 28 02 F6 | 	mov	local06, result2
07160     60 03 90 FD | 	jmp	#LR__0665
07164                 | LR__0601
07164     68 0A B0 FD | 	call	#_compile_fun_2p
07168     FD 28 02 F6 | 	mov	local06, result1
0716c     54 03 90 FD | 	jmp	#LR__0665
07170                 | LR__0602
07170     5C 0A B0 FD | 	call	#_compile_fun_2p
07174     FD 28 02 F6 | 	mov	local06, result1
07178     48 03 90 FD | 	jmp	#LR__0665
0717c                 | LR__0603
0717c     50 0A B0 FD | 	call	#_compile_fun_2p
07180     FD 28 02 F6 | 	mov	local06, result1
07184     3C 03 90 FD | 	jmp	#LR__0665
07188                 | LR__0604
07188     44 0A B0 FD | 	call	#_compile_fun_2p
0718c     FD 28 02 F6 | 	mov	local06, result1
07190     30 03 90 FD | 	jmp	#LR__0665
07194                 | LR__0605
07194                 | ' return expr()
07194     E8 29 B0 FD | 	call	#_expr
07198     FD 28 02 F6 | 	mov	local06, result1
0719c     24 03 90 FD | 	jmp	#LR__0665
071a0                 | LR__0606
071a0     FC 0C B0 FD | 	call	#_compile_fun_varp
071a4     FD 2C 02 F6 | 	mov	local08, result1
071a8     FE 28 02 F6 | 	mov	local06, result2
071ac     14 03 90 FD | 	jmp	#LR__0665
071b0                 | LR__0607
071b0     EC 0C B0 FD | 	call	#_compile_fun_varp
071b4     FD 2C 02 F6 | 	mov	local08, result1
071b8     FE 28 02 F6 | 	mov	local06, result2
071bc     04 03 90 FD | 	jmp	#LR__0665
071c0                 | LR__0608
071c0     DC 0C B0 FD | 	call	#_compile_fun_varp
071c4     FD 2C 02 F6 | 	mov	local08, result1
071c8     FE 28 02 F6 | 	mov	local06, result2
071cc     F4 02 90 FD | 	jmp	#LR__0665
071d0                 | LR__0609
071d0     A0 19 B0 FD | 	call	#_compile_dim
071d4     FD 28 02 F6 | 	mov	local06, result1
071d8     A4 03 90 FD | 	jmp	#LR__0666
071dc                 | LR__0610
071dc     C0 0C B0 FD | 	call	#_compile_fun_varp
071e0     FD 2C 02 F6 | 	mov	local08, result1
071e4     FE 28 02 F6 | 	mov	local06, result2
071e8     D8 02 90 FD | 	jmp	#LR__0665
071ec                 | LR__0611
071ec     E0 09 B0 FD | 	call	#_compile_fun_2p
071f0     FD 28 02 F6 | 	mov	local06, result1
071f4     CC 02 90 FD | 	jmp	#LR__0665
071f8                 | LR__0612
071f8     A4 0C B0 FD | 	call	#_compile_fun_varp
071fc     FD 2C 02 F6 | 	mov	local08, result1
07200     FE 28 02 F6 | 	mov	local06, result2
07204     BC 02 90 FD | 	jmp	#LR__0665
07208                 | LR__0613
07208     13 13 02 F6 | 	mov	arg01, local05
0720c     2C 18 B0 FD | 	call	#_compile_else
07210     FD 28 02 F6 | 	mov	local06, result1
07214     68 03 90 FD | 	jmp	#LR__0666
07218                 | LR__0614
07218     84 0C B0 FD | 	call	#_compile_fun_varp
0721c     FD 2C 02 F6 | 	mov	local08, result1
07220     FE 28 02 F6 | 	mov	local06, result2
07224     9C 02 90 FD | 	jmp	#LR__0665
07228                 | LR__0615
07228     74 0C B0 FD | 	call	#_compile_fun_varp
0722c     FD 2C 02 F6 | 	mov	local08, result1
07230     FE 28 02 F6 | 	mov	local06, result2
07234     8C 02 90 FD | 	jmp	#LR__0665
07238                 | LR__0616
07238     01 26 16 F2 | 	cmp	local05, #1 wc
0723c     08 00 90 CD |  if_b	jmp	#LR__0617
07240     4C 25 B0 FD | 	call	#_compile_goto
07244     38 03 90 FD | 	jmp	#LR__0666
07248                 | LR__0617
07248     19 12 06 F6 | 	mov	arg01, #25
0724c     6C 60 B1 FD | 	call	#_printerror
07250     2C 03 90 FD | 	jmp	#LR__0666
07254                 | LR__0618
07254     01 26 16 F2 | 	cmp	local05, #1 wc
07258     08 00 90 CD |  if_b	jmp	#LR__0619
0725c     CC 24 B0 FD | 	call	#_compile_gosub
07260     1C 03 90 FD | 	jmp	#LR__0666
07264                 | LR__0619
07264     19 12 06 F6 | 	mov	arg01, #25
07268     50 60 B1 FD | 	call	#_printerror
0726c     10 03 90 FD | 	jmp	#LR__0666
07270                 | LR__0620
07270     2C 0C B0 FD | 	call	#_compile_fun_varp
07274     FD 2C 02 F6 | 	mov	local08, result1
07278     FE 28 02 F6 | 	mov	local06, result2
0727c     44 02 90 FD | 	jmp	#LR__0665
07280                 | LR__0621
07280     C4 0A B0 FD | 	call	#_compile_fun_4p
07284     FD 28 02 F6 | 	mov	local06, result1
07288     38 02 90 FD | 	jmp	#LR__0665
0728c                 | LR__0622
0728c                 | ' return expr()
0728c     F0 28 B0 FD | 	call	#_expr
07290     FD 28 02 F6 | 	mov	local06, result1
07294     2C 02 90 FD | 	jmp	#LR__0665
07298                 | LR__0623
07298     B4 1F B0 FD | 	call	#_compile_for
0729c     FD 28 02 F6 | 	mov	local06, result1
072a0     DC 02 90 FD | 	jmp	#LR__0666
072a4                 | LR__0624
072a4     F8 0B B0 FD | 	call	#_compile_fun_varp
072a8     FD 2C 02 F6 | 	mov	local08, result1
072ac     FE 28 02 F6 | 	mov	local06, result2
072b0     10 02 90 FD | 	jmp	#LR__0665
072b4                 | LR__0625
072b4     13 13 02 F6 | 	mov	arg01, local05
072b8     F8 15 B0 FD | 	call	#_compile_if
072bc     FD 28 02 F6 | 	mov	local06, result1
072c0     BC 02 90 FD | 	jmp	#LR__0666
072c4                 | LR__0626
072c4                 | ' return expr()
072c4     B8 28 B0 FD | 	call	#_expr
072c8     FD 28 02 F6 | 	mov	local06, result1
072cc     F4 01 90 FD | 	jmp	#LR__0665
072d0                 | LR__0627
072d0                 | ' return expr()
072d0     AC 28 B0 FD | 	call	#_expr
072d4     FD 28 02 F6 | 	mov	local06, result1
072d8     E8 01 90 FD | 	jmp	#LR__0665
072dc                 | LR__0628
072dc     C0 0B B0 FD | 	call	#_compile_fun_varp
072e0     FD 2C 02 F6 | 	mov	local08, result1
072e4     FE 28 02 F6 | 	mov	local06, result2
072e8     D8 01 90 FD | 	jmp	#LR__0665
072ec                 | LR__0629
072ec     B0 0B B0 FD | 	call	#_compile_fun_varp
072f0     FD 2C 02 F6 | 	mov	local08, result1
072f4     FE 28 02 F6 | 	mov	local06, result2
072f8     C8 01 90 FD | 	jmp	#LR__0665
072fc                 | LR__0630
072fc     D0 08 B0 FD | 	call	#_compile_fun_2p
07300     FD 28 02 F6 | 	mov	local06, result1
07304     BC 01 90 FD | 	jmp	#LR__0665
07308                 | LR__0631
07308                 | ' return expr()
07308     74 28 B0 FD | 	call	#_expr
0730c     FD 28 02 F6 | 	mov	local06, result1
07310     B0 01 90 FD | 	jmp	#LR__0665
07314                 | LR__0632
07314                 | ' return expr()
07314     68 28 B0 FD | 	call	#_expr
07318     FD 28 02 F6 | 	mov	local06, result1
0731c     A4 01 90 FD | 	jmp	#LR__0665
07320                 | LR__0633
07320     70 22 B0 FD | 	call	#_compile_next
07324     FD 28 02 F6 | 	mov	local06, result1
07328     54 02 90 FD | 	jmp	#LR__0666
0732c                 | LR__0634
0732c     28 09 B0 FD | 	call	#_compile_fun_3p
07330     FD 28 02 F6 | 	mov	local06, result1
07334     8C 01 90 FD | 	jmp	#LR__0665
07338                 | LR__0635
07338                 | ' return expr()
07338     44 28 B0 FD | 	call	#_expr
0733c     FD 28 02 F6 | 	mov	local06, result1
07340     80 01 90 FD | 	jmp	#LR__0665
07344                 | LR__0636
07344                 | ' return expr()
07344     38 28 B0 FD | 	call	#_expr
07348     FD 28 02 F6 | 	mov	local06, result1
0734c     74 01 90 FD | 	jmp	#LR__0665
07350                 | LR__0637
07350                 | ' return expr()
07350     2C 28 B0 FD | 	call	#_expr
07354     FD 28 02 F6 | 	mov	local06, result1
07358     68 01 90 FD | 	jmp	#LR__0665
0735c                 | LR__0638
0735c                 | ' return expr()
0735c     20 28 B0 FD | 	call	#_expr
07360     FD 28 02 F6 | 	mov	local06, result1
07364     5C 01 90 FD | 	jmp	#LR__0665
07368                 | LR__0639
07368     DC 09 B0 FD | 	call	#_compile_fun_4p
0736c     FD 28 02 F6 | 	mov	local06, result1
07370     50 01 90 FD | 	jmp	#LR__0665
07374                 | LR__0640
07374                 | ' return expr()
07374     08 28 B0 FD | 	call	#_expr
07378     FD 28 02 F6 | 	mov	local06, result1
0737c     44 01 90 FD | 	jmp	#LR__0665
07380                 | LR__0641
07380     4C 08 B0 FD | 	call	#_compile_fun_2p
07384     FD 28 02 F6 | 	mov	local06, result1
07388     38 01 90 FD | 	jmp	#LR__0665
0738c                 | LR__0642
0738c     10 0B B0 FD | 	call	#_compile_fun_varp
07390     FD 2C 02 F6 | 	mov	local08, result1
07394     FE 28 02 F6 | 	mov	local06, result2
07398     28 01 90 FD | 	jmp	#LR__0665
0739c                 | LR__0643
0739c     00 0B B0 FD | 	call	#_compile_fun_varp
073a0     FD 2C 02 F6 | 	mov	local08, result1
073a4     FE 28 02 F6 | 	mov	local06, result2
073a8     18 01 90 FD | 	jmp	#LR__0665
073ac                 | LR__0644
073ac     20 08 B0 FD | 	call	#_compile_fun_2p
073b0     FD 28 02 F6 | 	mov	local06, result1
073b4     0C 01 90 FD | 	jmp	#LR__0665
073b8                 | LR__0645
073b8     14 08 B0 FD | 	call	#_compile_fun_2p
073bc     FD 28 02 F6 | 	mov	local06, result1
073c0     00 01 90 FD | 	jmp	#LR__0665
073c4                 | LR__0646
073c4     14 0E B0 FD | 	call	#_compile_print
073c8     FD 28 02 F6 | 	mov	local06, result1
073cc     B0 01 90 FD | 	jmp	#LR__0666
073d0                 | LR__0647
073d0     CC 0A B0 FD | 	call	#_compile_fun_varp
073d4     FD 2C 02 F6 | 	mov	local08, result1
073d8     FE 28 02 F6 | 	mov	local06, result2
073dc     E4 00 90 FD | 	jmp	#LR__0665
073e0                 | LR__0648
073e0                 | ' return expr()
073e0     9C 27 B0 FD | 	call	#_expr
073e4     FD 28 02 F6 | 	mov	local06, result1
073e8     D8 00 90 FD | 	jmp	#LR__0665
073ec                 | LR__0649
073ec     B0 0A B0 FD | 	call	#_compile_fun_varp
073f0     FD 2C 02 F6 | 	mov	local08, result1
073f4     FE 28 02 F6 | 	mov	local06, result2
073f8     C8 00 90 FD | 	jmp	#LR__0665
073fc                 | LR__0650
073fc     A0 0A B0 FD | 	call	#_compile_fun_varp
07400     FD 2C 02 F6 | 	mov	local08, result1
07404     FE 28 02 F6 | 	mov	local06, result2
07408     B8 00 90 FD | 	jmp	#LR__0665
0740c                 | LR__0651
0740c     C0 07 B0 FD | 	call	#_compile_fun_2p
07410     FD 28 02 F6 | 	mov	local06, result1
07414     AC 00 90 FD | 	jmp	#LR__0665
07418                 | LR__0652
07418     B4 07 B0 FD | 	call	#_compile_fun_2p
0741c     FD 28 02 F6 | 	mov	local06, result1
07420     A0 00 90 FD | 	jmp	#LR__0665
07424                 | LR__0653
07424     A8 07 B0 FD | 	call	#_compile_fun_2p
07428     FD 28 02 F6 | 	mov	local06, result1
0742c     94 00 90 FD | 	jmp	#LR__0665
07430                 | LR__0654
07430     9C 07 B0 FD | 	call	#_compile_fun_2p
07434     FD 28 02 F6 | 	mov	local06, result1
07438     88 00 90 FD | 	jmp	#LR__0665
0743c                 | LR__0655
0743c     90 07 B0 FD | 	call	#_compile_fun_2p
07440     FD 28 02 F6 | 	mov	local06, result1
07444     7C 00 90 FD | 	jmp	#LR__0665
07448                 | LR__0656
07448     84 07 B0 FD | 	call	#_compile_fun_2p
0744c     FD 28 02 F6 | 	mov	local06, result1
07450     70 00 90 FD | 	jmp	#LR__0665
07454                 | LR__0657
07454     78 07 B0 FD | 	call	#_compile_fun_2p
07458     FD 28 02 F6 | 	mov	local06, result1
0745c     64 00 90 FD | 	jmp	#LR__0665
07460                 | LR__0658
07460     3C 0A B0 FD | 	call	#_compile_fun_varp
07464     FD 2C 02 F6 | 	mov	local08, result1
07468     FE 28 02 F6 | 	mov	local06, result2
0746c     54 00 90 FD | 	jmp	#LR__0665
07470                 | LR__0659
07470     E4 07 B0 FD | 	call	#_compile_fun_3p
07474     FD 28 02 F6 | 	mov	local06, result1
07478     48 00 90 FD | 	jmp	#LR__0665
0747c                 | LR__0660
0747c                 | ' return expr()
0747c     00 27 B0 FD | 	call	#_expr
07480     FD 28 02 F6 | 	mov	local06, result1
07484     3C 00 90 FD | 	jmp	#LR__0665
07488                 | LR__0661
07488     44 07 B0 FD | 	call	#_compile_fun_2p
0748c     FD 28 02 F6 | 	mov	local06, result1
07490     30 00 90 FD | 	jmp	#LR__0665
07494                 | LR__0662
07494     38 07 B0 FD | 	call	#_compile_fun_2p
07498     FD 28 02 F6 | 	mov	local06, result1
0749c     24 00 90 FD | 	jmp	#LR__0665
074a0                 | LR__0663
074a0     2C 07 B0 FD | 	call	#_compile_fun_2p
074a4     FD 28 02 F6 | 	mov	local06, result1
074a8     18 00 90 FD | 	jmp	#LR__0665
074ac                 | LR__0664
074ac     CC 0A B0 FD | 	call	#_compile_array_assign
074b0     FD 28 02 F6 | 	mov	local06, result1
074b4     0E 28 0E F2 | 	cmp	local06, #14 wz
074b8     C4 00 90 5D |  if_ne	jmp	#LR__0666
074bc                 | ' return 23
074bc     17 28 06 F6 | 	mov	local06, #23
074c0     BC 00 90 FD | 	jmp	#LR__0666
074c4                 | ' return 23
074c4                 | LR__0665
074c4     15 23 02 F6 | 	mov	local03, local07
074c8     16 1F 02 F6 | 	mov	local01, local08
074cc     0F 2F 02 F6 | 	mov	local09, local01
074d0     10 31 02 F6 | 	mov	local10, local02
074d4     11 2B 02 F6 | 	mov	local07, local03
074d8     4A 00 00 FF 
074dc     7C E4 05 F1 | 	add	objptr, ##38012
074e0     F2 1E 02 FB | 	rdlong	local01, objptr
074e4     0F 2D 02 F6 | 	mov	local08, local01
074e8     01 2C 66 F0 | 	shl	local08, #1
074ec     0F 2D 02 F1 | 	add	local08, local01
074f0     02 2C 66 F0 | 	shl	local08, #2
074f4     03 00 00 FF 
074f8     00 E4 85 F1 | 	sub	objptr, ##1536
074fc     F2 2C 02 F1 | 	add	local08, objptr
07500     16 2F 62 FC | 	wrlong	local09, local08
07504     03 00 00 FF 
07508     00 E4 05 F1 | 	add	objptr, ##1536
0750c     F2 1E 02 FB | 	rdlong	local01, objptr
07510     0F 2F 02 F6 | 	mov	local09, local01
07514     01 2E 66 F0 | 	shl	local09, #1
07518     0F 2F 02 F1 | 	add	local09, local01
0751c     02 2E 66 F0 | 	shl	local09, #2
07520     03 00 00 FF 
07524     00 E4 85 F1 | 	sub	objptr, ##1536
07528     F2 2E 02 F1 | 	add	local09, objptr
0752c     04 2E 06 F1 | 	add	local09, #4
07530     17 31 62 FC | 	wrlong	local10, local09
07534     03 00 00 FF 
07538     00 E4 05 F1 | 	add	objptr, ##1536
0753c     F2 1E 02 FB | 	rdlong	local01, objptr
07540     0F 31 02 F6 | 	mov	local10, local01
07544     01 30 66 F0 | 	shl	local10, #1
07548     0F 31 02 F1 | 	add	local10, local01
0754c     02 30 66 F0 | 	shl	local10, #2
07550     03 00 00 FF 
07554     00 E4 85 F1 | 	sub	objptr, ##1536
07558     F2 30 02 F1 | 	add	local10, objptr
0755c     08 30 06 F1 | 	add	local10, #8
07560     18 2B 62 FC | 	wrlong	local07, local10
07564     03 00 00 FF 
07568     00 E4 05 F1 | 	add	objptr, ##1536
0756c     F2 2E 02 FB | 	rdlong	local09, objptr
07570     01 2E 06 F1 | 	add	local09, #1
07574     F2 2E 62 FC | 	wrlong	local09, objptr
07578     4A 00 00 FF 
0757c     7C E4 85 F1 | 	sub	objptr, ##38012
07580                 | LR__0666
07580                 | ' 
07580                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07580                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07580     03 24 0E F2 | 	cmp	local04, #3 wz
07584     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07588     38 00 90 5D |  if_ne	jmp	#LR__0667
0758c     4A 00 00 FF 
07590     7C E4 05 F1 | 	add	objptr, ##38012
07594     F2 30 02 FB | 	rdlong	local10, objptr
07598     18 1F 02 F6 | 	mov	local01, local10
0759c     01 1E 66 F0 | 	shl	local01, #1
075a0     18 1F 02 F1 | 	add	local01, local10
075a4     02 1E 66 F0 | 	shl	local01, #2
075a8     03 00 00 FF 
075ac     00 E4 85 F1 | 	sub	objptr, ##1536
075b0     F2 1E 02 F1 | 	add	local01, objptr
075b4     08 1E 06 F1 | 	add	local01, #8
075b8     0F FD 6B FC | 	wrlong	#510, local01
075bc     47 00 00 FF 
075c0     7C E4 85 F1 | 	sub	objptr, ##36476
075c4                 | LR__0667
075c4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
075c4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
075c4     4A 00 00 FF 
075c8     7C E4 05 F1 | 	add	objptr, ##38012
075cc     F2 1E 02 FB | 	rdlong	local01, objptr
075d0     4A 00 00 FF 
075d4     7C E4 85 F1 | 	sub	objptr, ##38012
075d8     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
075dc                 | LR__0668
075dc     0F 31 02 F6 | 	mov	local10, local01
075e0     01 30 66 F0 | 	shl	local10, #1
075e4     0F 31 02 F1 | 	add	local10, local01
075e8     02 30 66 F0 | 	shl	local10, #2
075ec     47 00 00 FF 
075f0     7C E4 05 F1 | 	add	objptr, ##36476
075f4     F2 30 02 F1 | 	add	local10, objptr
075f8     08 30 06 F1 | 	add	local10, #8
075fc     18 31 02 FB | 	rdlong	local10, local10
07600     9B 30 0E F2 | 	cmp	local10, #155 wz
07604     47 00 00 FF 
07608     7C E4 85 F1 | 	sub	objptr, ##36476
0760c     70 00 90 5D |  if_ne	jmp	#LR__0669
07610     0F 2F 02 F6 | 	mov	local09, local01
07614     01 2E 86 F1 | 	sub	local09, #1
07618     17 31 02 F6 | 	mov	local10, local09
0761c     01 30 66 F0 | 	shl	local10, #1
07620     17 31 02 F1 | 	add	local10, local09
07624     02 30 66 F0 | 	shl	local10, #2
07628     47 00 00 FF 
0762c     7C E4 05 F1 | 	add	objptr, ##36476
07630     F2 30 02 F1 | 	add	local10, objptr
07634     08 30 06 F1 | 	add	local10, #8
07638     18 31 02 FB | 	rdlong	local10, local10
0763c     11 30 0E F2 | 	cmp	local10, #17 wz
07640     47 00 00 FF 
07644     7C E4 85 F1 | 	sub	objptr, ##36476
07648     34 00 90 5D |  if_ne	jmp	#LR__0669
0764c     0F 2F 02 F6 | 	mov	local09, local01
07650     01 2E 86 F1 | 	sub	local09, #1
07654     17 31 02 F6 | 	mov	local10, local09
07658     01 30 66 F0 | 	shl	local10, #1
0765c     17 31 02 F1 | 	add	local10, local09
07660     02 30 66 F0 | 	shl	local10, #2
07664     47 00 00 FF 
07668     7C E4 05 F1 | 	add	objptr, ##36476
0766c     F2 30 02 F1 | 	add	local10, objptr
07670     08 30 06 F1 | 	add	local10, #8
07674     18 25 68 FC | 	wrlong	#18, local10
07678     47 00 00 FF 
0767c     7C E4 85 F1 | 	sub	objptr, ##36476
07680                 | LR__0669
07680     01 1E 86 F1 | 	sub	local01, #1
07684     01 1E 56 F2 | 	cmps	local01, #1 wc
07688     50 FF 9F 3D |  if_ae	jmp	#LR__0668
0768c                 | LR__0670
0768c                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0768c                 | ' return err
0768c     14 FB 01 F6 | 	mov	result1, local06
07690     A7 F0 03 F6 | 	mov	ptra, fp
07694     B2 00 A0 FD | 	call	#popregs_
07698                 | _compile_immediate_ret
07698     2D 00 64 FD | 	ret
0769c                 | 
0769c                 | ' 
0769c                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
0769c                 | ' 
0769c                 | ' function compile_immediate_assign(linetype as ulong) as ulong
0769c                 | _compile_immediate_assign
0769c     0C 4A 05 F6 | 	mov	COUNT_, #12
076a0     A8 00 A0 FD | 	call	#pushregs_
076a4     09 25 02 F6 | 	mov	local04, arg01
076a8     FF 22 06 F6 | 	mov	local03, #255
076ac     01 26 66 F6 | 	neg	local05, #1
076b0     00 28 06 F6 | 	mov	local06, #0
076b4                 | ' 
076b4                 | ' t1.result_type=result_error : t1.result.uresult=0
076b4                 | ' i=-1: j=-1 : err=0
076b4                 | ' 
076b4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
076b4     02 24 0E F2 | 	cmp	local04, #2 wz
076b8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
076bc     35 00 00 AF 
076c0     0C E4 05 A1 |  if_e	add	objptr, ##27148
076c4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
076c8     02 00 00 AF 
076cc     38 E4 05 A1 |  if_e	add	objptr, ##1080
076d0     F2 04 68 AC |  if_e	wrlong	#2, objptr
076d4     37 00 00 AF 
076d8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
076dc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
076dc     04 24 0E F2 | 	cmp	local04, #4 wz
076e0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
076e4     2C 00 90 5D |  if_ne	jmp	#LR__0680
076e8     35 00 00 FF 
076ec     14 E4 05 F1 | 	add	objptr, ##27156
076f0     F2 2A 02 FB | 	rdlong	local07, objptr
076f4     02 00 00 FF 
076f8     30 E4 05 F1 | 	add	objptr, ##1072
076fc     F2 06 68 FC | 	wrlong	#3, objptr
07700     13 00 00 FF 
07704     38 E4 05 F1 | 	add	objptr, ##9784
07708     F2 04 68 FC | 	wrlong	#2, objptr
0770c     4A 00 00 FF 
07710     7C E4 85 F1 | 	sub	objptr, ##38012
07714                 | LR__0680
07714                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07714     05 24 0E F2 | 	cmp	local04, #5 wz
07718     3C 00 90 5D |  if_ne	jmp	#LR__0681
0771c     37 00 00 FF 
07720     44 E4 05 F1 | 	add	objptr, ##28228
07724     F2 FA 01 FB | 	rdlong	result1, objptr
07728     FD 2A 02 F6 | 	mov	local07, result1
0772c     03 2A 66 F0 | 	shl	local07, #3
07730     02 00 00 FF 
07734     38 E4 85 F1 | 	sub	objptr, ##1080
07738     F2 2A 02 F1 | 	add	local07, objptr
0773c     15 2B 02 FB | 	rdlong	local07, local07
07740     02 FA 05 F1 | 	add	result1, #2
07744     02 00 00 FF 
07748     38 E4 05 F1 | 	add	objptr, ##1080
0774c     F2 FA 61 FC | 	wrlong	result1, objptr
07750     37 00 00 FF 
07754     44 E4 85 F1 | 	sub	objptr, ##28228
07758                 | LR__0681
07758     15 13 02 F6 | 	mov	arg01, local07
0775c     01 14 06 F6 | 	mov	arg02, #1
07760     EC B1 B1 FD | 	call	#__system__Right_S
07764     FD 2C 02 F6 | 	mov	local08, result1
07768     14 24 B0 FD | 	call	#_expr
0776c                 | ' 
0776c                 | ' suffix2$=right$(varname2$,1)
0776c                 | ' expr()
0776c                 | ' if varnum>0 then					' try to find a variable
0776c     35 00 00 FF 
07770     08 E4 05 F1 | 	add	objptr, ##27144
07774     F2 2E 02 FB | 	rdlong	local09, objptr
07778     35 00 00 FF 
0777c     08 E4 85 F1 | 	sub	objptr, ##27144
07780     01 2E 56 F2 | 	cmps	local09, #1 wc
07784     58 00 90 CD |  if_b	jmp	#LR__0684
07788                 | '   for i=0 to varnum-1
07788     00 30 06 F6 | 	mov	local10, #0
0778c     35 00 00 FF 
07790     08 E4 05 F1 | 	add	objptr, ##27144
07794     F2 32 02 FB | 	rdlong	local11, objptr
07798     35 00 00 FF 
0779c     08 E4 85 F1 | 	sub	objptr, ##27144
077a0                 | LR__0682
077a0     19 31 52 F2 | 	cmps	local10, local11 wc
077a4     38 00 90 3D |  if_ae	jmp	#LR__0683
077a8                 | '     if variables(i).name=varname2$ then j=i : exit
077a8     18 2F 02 F6 | 	mov	local09, local10
077ac     04 2E 66 F0 | 	shl	local09, #4
077b0     14 00 00 FF 
077b4     F8 E5 05 F1 | 	add	objptr, ##10744
077b8     F2 2E 02 F1 | 	add	local09, objptr
077bc     17 13 02 FB | 	rdlong	arg01, local09
077c0     15 15 02 F6 | 	mov	arg02, local07
077c4     14 00 00 FF 
077c8     F8 E5 85 F1 | 	sub	objptr, ##10744
077cc     A4 90 B1 FD | 	call	#__system___string_cmp
077d0     00 FA 0D F2 | 	cmp	result1, #0 wz
077d4     18 27 02 A6 |  if_e	mov	local05, local10
077d8     01 30 06 51 |  if_ne	add	local10, #1
077dc     C0 FF 9F 5D |  if_ne	jmp	#LR__0682
077e0                 | LR__0683
077e0                 | LR__0684
077e0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
077e0     FF FF 7F FF 
077e4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
077e8     60 00 90 5D |  if_ne	jmp	#LR__0685
077ec     35 00 00 FF 
077f0     08 E4 05 F1 | 	add	objptr, ##27144
077f4     F2 2E 02 FB | 	rdlong	local09, objptr
077f8     35 00 00 FF 
077fc     08 E4 85 F1 | 	sub	objptr, ##27144
07800     02 00 00 FF 
07804     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07808     40 00 90 3D |  if_ae	jmp	#LR__0685
0780c     35 00 00 FF 
07810     08 E4 05 F1 | 	add	objptr, ##27144
07814     F2 32 02 FB | 	rdlong	local11, objptr
07818     04 32 66 F0 | 	shl	local11, #4
0781c     20 00 00 FF 
07820     10 E4 85 F1 | 	sub	objptr, ##16400
07824     F2 32 02 F1 | 	add	local11, objptr
07828     19 2B 62 FC | 	wrlong	local07, local11
0782c     20 00 00 FF 
07830     10 E4 05 F1 | 	add	objptr, ##16400
07834     F2 2E 02 FB | 	rdlong	local09, objptr
07838     17 27 02 F6 | 	mov	local05, local09
0783c     01 2E 06 F1 | 	add	local09, #1
07840     F2 2E 62 FC | 	wrlong	local09, objptr
07844     35 00 00 FF 
07848     08 E4 85 F1 | 	sub	objptr, ##27144
0784c                 | LR__0685
0784c                 | ' if varnum>=maxvars then
0784c     35 00 00 FF 
07850     08 E4 05 F1 | 	add	objptr, ##27144
07854     F2 2E 02 FB | 	rdlong	local09, objptr
07858     35 00 00 FF 
0785c     08 E4 85 F1 | 	sub	objptr, ##27144
07860     02 00 00 FF 
07864     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07868     2D 28 06 36 |  if_ae	mov	local06, #45
0786c     C8 01 90 3D |  if_ae	jmp	#LR__0690
07870     13 1F 02 F6 | 	mov	local01, local05
07874     17 22 06 F6 | 	mov	local03, #23
07878     0F 2F 02 F6 | 	mov	local09, local01
0787c     10 35 02 F6 | 	mov	local12, local02
07880     11 1F 02 F6 | 	mov	local01, local03
07884     4A 00 00 FF 
07888     7C E4 05 F1 | 	add	objptr, ##38012
0788c     F2 32 02 FB | 	rdlong	local11, objptr
07890     19 31 02 F6 | 	mov	local10, local11
07894     01 30 66 F0 | 	shl	local10, #1
07898     19 31 02 F1 | 	add	local10, local11
0789c     02 30 66 F0 | 	shl	local10, #2
078a0     03 00 00 FF 
078a4     00 E4 85 F1 | 	sub	objptr, ##1536
078a8     F2 30 02 F1 | 	add	local10, objptr
078ac     18 2F 62 FC | 	wrlong	local09, local10
078b0     03 00 00 FF 
078b4     00 E4 05 F1 | 	add	objptr, ##1536
078b8     F2 2E 02 FB | 	rdlong	local09, objptr
078bc     17 33 02 F6 | 	mov	local11, local09
078c0     01 32 66 F0 | 	shl	local11, #1
078c4     17 33 02 F1 | 	add	local11, local09
078c8     02 32 66 F0 | 	shl	local11, #2
078cc     03 00 00 FF 
078d0     00 E4 85 F1 | 	sub	objptr, ##1536
078d4     F2 32 02 F1 | 	add	local11, objptr
078d8     04 32 06 F1 | 	add	local11, #4
078dc     19 35 62 FC | 	wrlong	local12, local11
078e0     03 00 00 FF 
078e4     00 E4 05 F1 | 	add	objptr, ##1536
078e8     F2 2E 02 FB | 	rdlong	local09, objptr
078ec     17 35 02 F6 | 	mov	local12, local09
078f0     01 34 66 F0 | 	shl	local12, #1
078f4     17 35 02 F1 | 	add	local12, local09
078f8     02 34 66 F0 | 	shl	local12, #2
078fc     03 00 00 FF 
07900     00 E4 85 F1 | 	sub	objptr, ##1536
07904     F2 34 02 F1 | 	add	local12, objptr
07908     08 34 06 F1 | 	add	local12, #8
0790c     1A 1F 62 FC | 	wrlong	local01, local12
07910     03 00 00 FF 
07914     00 E4 05 F1 | 	add	objptr, ##1536
07918     F2 2E 02 FB | 	rdlong	local09, objptr
0791c     01 2E 06 F1 | 	add	local09, #1
07920     F2 2E 62 FC | 	wrlong	local09, objptr
07924     4A 00 00 FF 
07928     7C E4 85 F1 | 	sub	objptr, ##38012
0792c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0792c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0792c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0792c     03 24 0E F2 | 	cmp	local04, #3 wz
07930     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07934     38 00 90 5D |  if_ne	jmp	#LR__0686
07938     4A 00 00 FF 
0793c     7C E4 05 F1 | 	add	objptr, ##38012
07940     F2 34 02 FB | 	rdlong	local12, objptr
07944     1A 1F 02 F6 | 	mov	local01, local12
07948     01 1E 66 F0 | 	shl	local01, #1
0794c     1A 1F 02 F1 | 	add	local01, local12
07950     02 1E 66 F0 | 	shl	local01, #2
07954     03 00 00 FF 
07958     00 E4 85 F1 | 	sub	objptr, ##1536
0795c     F2 1E 02 F1 | 	add	local01, objptr
07960     08 1E 06 F1 | 	add	local01, #8
07964     0F FD 6B FC | 	wrlong	#510, local01
07968     47 00 00 FF 
0796c     7C E4 85 F1 | 	sub	objptr, ##36476
07970                 | LR__0686
07970                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07970     4A 00 00 FF 
07974     7C E4 05 F1 | 	add	objptr, ##38012
07978     F2 30 02 FB | 	rdlong	local10, objptr
0797c     4A 00 00 FF 
07980     7C E4 85 F1 | 	sub	objptr, ##38012
07984     97 58 48 FB | 	callpa	#(@LR__0689-@LR__0687)>>2,fcache_load_ptr_
07988                 | LR__0687
07988     18 35 02 F6 | 	mov	local12, local10
0798c     01 34 66 F0 | 	shl	local12, #1
07990     18 35 02 F1 | 	add	local12, local10
07994     02 34 66 F0 | 	shl	local12, #2
07998     47 00 00 FF 
0799c     7C E4 05 F1 | 	add	objptr, ##36476
079a0     F2 34 02 F1 | 	add	local12, objptr
079a4     08 34 06 F1 | 	add	local12, #8
079a8     1A 35 02 FB | 	rdlong	local12, local12
079ac     9B 34 0E F2 | 	cmp	local12, #155 wz
079b0     47 00 00 FF 
079b4     7C E4 85 F1 | 	sub	objptr, ##36476
079b8     70 00 90 5D |  if_ne	jmp	#LR__0688
079bc     18 35 02 F6 | 	mov	local12, local10
079c0     01 34 86 F1 | 	sub	local12, #1
079c4     1A 1F 02 F6 | 	mov	local01, local12
079c8     01 1E 66 F0 | 	shl	local01, #1
079cc     1A 1F 02 F1 | 	add	local01, local12
079d0     02 1E 66 F0 | 	shl	local01, #2
079d4     47 00 00 FF 
079d8     7C E4 05 F1 | 	add	objptr, ##36476
079dc     F2 1E 02 F1 | 	add	local01, objptr
079e0     08 1E 06 F1 | 	add	local01, #8
079e4     0F 1F 02 FB | 	rdlong	local01, local01
079e8     11 1E 0E F2 | 	cmp	local01, #17 wz
079ec     47 00 00 FF 
079f0     7C E4 85 F1 | 	sub	objptr, ##36476
079f4     34 00 90 5D |  if_ne	jmp	#LR__0688
079f8     18 35 02 F6 | 	mov	local12, local10
079fc     01 34 86 F1 | 	sub	local12, #1
07a00     1A 1F 02 F6 | 	mov	local01, local12
07a04     01 1E 66 F0 | 	shl	local01, #1
07a08     1A 1F 02 F1 | 	add	local01, local12
07a0c     02 1E 66 F0 | 	shl	local01, #2
07a10     47 00 00 FF 
07a14     7C E4 05 F1 | 	add	objptr, ##36476
07a18     F2 1E 02 F1 | 	add	local01, objptr
07a1c     08 1E 06 F1 | 	add	local01, #8
07a20     0F 25 68 FC | 	wrlong	#18, local01
07a24     47 00 00 FF 
07a28     7C E4 85 F1 | 	sub	objptr, ##36476
07a2c                 | LR__0688
07a2c     01 30 86 F1 | 	sub	local10, #1
07a30     01 30 56 F2 | 	cmps	local10, #1 wc
07a34     50 FF 9F 3D |  if_ae	jmp	#LR__0687
07a38                 | LR__0689
07a38                 | LR__0690
07a38                 | ' return err
07a38     14 FB 01 F6 | 	mov	result1, local06
07a3c     A7 F0 03 F6 | 	mov	ptra, fp
07a40     B2 00 A0 FD | 	call	#popregs_
07a44                 | _compile_immediate_assign_ret
07a44     2D 00 64 FD | 	ret
07a48                 | 
07a48                 | ' 
07a48                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07a48                 | ' 
07a48                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07a48                 | _compile
07a48     03 4A 05 F6 | 	mov	COUNT_, #3
07a4c     A8 00 A0 FD | 	call	#pushregs_
07a50     09 1F 02 F6 | 	mov	local01, arg01
07a54     0B 21 02 F6 | 	mov	local02, arg03
07a58     47 00 00 FF 
07a5c     7C E4 05 F1 | 	add	objptr, ##36476
07a60     F2 1E 62 FC | 	wrlong	local01, objptr
07a64     04 E4 05 F1 | 	add	objptr, #4
07a68     F2 14 62 FC | 	wrlong	arg02, objptr
07a6c     47 00 00 FF 
07a70     80 E4 85 F1 | 	sub	objptr, ##36480
07a74     10 13 02 F6 | 	mov	arg01, local02
07a78     01 12 06 F1 | 	add	arg01, #1
07a7c     0F 15 02 F6 | 	mov	arg02, local01
07a80     18 F3 BF FD | 	call	#_compile_immediate
07a84     FD 22 0A F6 | 	mov	local03, result1 wz
07a88                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07a88                 | ' ucompiledline(0)=alinemajor
07a88                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07a88                 | ' 
07a88                 | ' ' cont: 
07a88                 | ' ' 0 - this is the first part of the line that will continue
07a88                 | ' ' 1 - this is the continuation of the line
07a88                 | ' ' 2 - this is the last continued line
07a88                 | ' ' 3 - this is the one and only part
07a88                 | ' 
07a88                 | ' err=compile_immediate(cont+1,alinemajor) 
07a88                 | ' if err=0 andalso alinemajor>0 then
07a88     74 00 90 5D |  if_ne	jmp	#LR__0705
07a8c     01 1E 16 F2 | 	cmp	local01, #1 wc
07a90     6C 00 90 CD |  if_b	jmp	#LR__0705
07a94                 | '   if cont=3 orelse cont=2 then 
07a94     03 20 0E F2 | 	cmp	local02, #3 wz
07a98     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07a9c     60 00 90 5D |  if_ne	jmp	#LR__0704
07aa0                 | '     if alinemajor >lastline then 
07aa0     4A 00 00 FF 
07aa4     8C E4 05 F1 | 	add	objptr, ##38028
07aa8     F2 14 02 FB | 	rdlong	arg02, objptr
07aac     4A 00 00 FF 
07ab0     8C E4 85 F1 | 	sub	objptr, ##38028
07ab4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ab8     0C 00 90 ED |  if_be	jmp	#LR__0700
07abc     0F 13 02 F6 | 	mov	arg01, local01
07ac0     10 F2 BF FD | 	call	#_add_line_at_end
07ac4     38 00 90 FD | 	jmp	#LR__0703
07ac8                 | LR__0700
07ac8     0F 13 02 F6 | 	mov	arg01, local01
07acc     D4 EB BF FD | 	call	#_deleteline
07ad0                 | '       deleteline(alinemajor)  
07ad0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07ad0     4A 00 00 FF 
07ad4     8C E4 05 F1 | 	add	objptr, ##38028
07ad8     F2 14 02 FB | 	rdlong	arg02, objptr
07adc     4A 00 00 FF 
07ae0     8C E4 85 F1 | 	sub	objptr, ##38028
07ae4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ae8     0C 00 90 ED |  if_be	jmp	#LR__0701
07aec     0F 13 02 F6 | 	mov	arg01, local01
07af0     E0 F1 BF FD | 	call	#_add_line_at_end
07af4     08 00 90 FD | 	jmp	#LR__0702
07af8                 | LR__0701
07af8     0F 13 02 F6 | 	mov	arg01, local01
07afc     B8 EF BF FD | 	call	#_insertline
07b00                 | LR__0702
07b00                 | LR__0703
07b00                 | LR__0704
07b00                 | LR__0705
07b00                 | ' return err
07b00     11 FB 01 F6 | 	mov	result1, local03
07b04     A7 F0 03 F6 | 	mov	ptra, fp
07b08     B2 00 A0 FD | 	call	#popregs_
07b0c                 | _compile_ret
07b0c     2D 00 64 FD | 	ret
07b10                 | 
07b10                 | ' 
07b10                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07b10                 | ' 
07b10                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07b10                 | _compile_assign
07b10     03 4A 05 F6 | 	mov	COUNT_, #3
07b14     A8 00 A0 FD | 	call	#pushregs_
07b18     09 1F 02 F6 | 	mov	local01, arg01
07b1c     0B 21 02 F6 | 	mov	local02, arg03
07b20     47 00 00 FF 
07b24     7C E4 05 F1 | 	add	objptr, ##36476
07b28     F2 1E 62 FC | 	wrlong	local01, objptr
07b2c     04 E4 05 F1 | 	add	objptr, #4
07b30     F2 14 62 FC | 	wrlong	arg02, objptr
07b34     47 00 00 FF 
07b38     80 E4 85 F1 | 	sub	objptr, ##36480
07b3c     10 13 02 F6 | 	mov	arg01, local02
07b40     01 12 06 F1 | 	add	arg01, #1
07b44     54 FB BF FD | 	call	#_compile_immediate_assign
07b48     FD 22 02 F6 | 	mov	local03, result1
07b4c                 | ' 
07b4c                 | ' ucompiledline(0)=alinemajor
07b4c                 | ' ucompiledline(1)=alineminor
07b4c                 | ' 
07b4c                 | ' err=compile_immediate_assign(cont+1) 
07b4c                 | ' if alinemajor>0 then
07b4c     01 1E 16 F2 | 	cmp	local01, #1 wc
07b50     6C 00 90 CD |  if_b	jmp	#LR__0715
07b54                 | '   if cont=3 orelse cont=2 then 
07b54     03 20 0E F2 | 	cmp	local02, #3 wz
07b58     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07b5c     60 00 90 5D |  if_ne	jmp	#LR__0714
07b60                 | '     if alinemajor >lastline then 
07b60     4A 00 00 FF 
07b64     8C E4 05 F1 | 	add	objptr, ##38028
07b68     F2 14 02 FB | 	rdlong	arg02, objptr
07b6c     4A 00 00 FF 
07b70     8C E4 85 F1 | 	sub	objptr, ##38028
07b74     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07b78     0C 00 90 ED |  if_be	jmp	#LR__0710
07b7c     0F 13 02 F6 | 	mov	arg01, local01
07b80     50 F1 BF FD | 	call	#_add_line_at_end
07b84     38 00 90 FD | 	jmp	#LR__0713
07b88                 | LR__0710
07b88     0F 13 02 F6 | 	mov	arg01, local01
07b8c     14 EB BF FD | 	call	#_deleteline
07b90                 | '       deleteline(alinemajor)  
07b90                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07b90     4A 00 00 FF 
07b94     8C E4 05 F1 | 	add	objptr, ##38028
07b98     F2 14 02 FB | 	rdlong	arg02, objptr
07b9c     4A 00 00 FF 
07ba0     8C E4 85 F1 | 	sub	objptr, ##38028
07ba4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ba8     0C 00 90 ED |  if_be	jmp	#LR__0711
07bac     0F 13 02 F6 | 	mov	arg01, local01
07bb0     20 F1 BF FD | 	call	#_add_line_at_end
07bb4     08 00 90 FD | 	jmp	#LR__0712
07bb8                 | LR__0711
07bb8     0F 13 02 F6 | 	mov	arg01, local01
07bbc     F8 EE BF FD | 	call	#_insertline
07bc0                 | LR__0712
07bc0                 | LR__0713
07bc0                 | LR__0714
07bc0                 | LR__0715
07bc0                 | ' return err
07bc0     11 FB 01 F6 | 	mov	result1, local03
07bc4     A7 F0 03 F6 | 	mov	ptra, fp
07bc8     B2 00 A0 FD | 	call	#popregs_
07bcc                 | _compile_assign_ret
07bcc     2D 00 64 FD | 	ret
07bd0                 | 
07bd0                 | ' 
07bd0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
07bd0                 | ' 
07bd0                 | ' function compile_fun_2p() as ulong
07bd0                 | _compile_fun_2p
07bd0     01 4A 05 F6 | 	mov	COUNT_, #1
07bd4     A8 00 A0 FD | 	call	#pushregs_
07bd8     A4 1F B0 FD | 	call	#_expr
07bdc     FD 1E 02 F6 | 	mov	local01, result1
07be0                 | ' err=expr() : if err>0 then return err
07be0     01 1E 16 F2 | 	cmp	local01, #1 wc
07be4     0F FB 01 36 |  if_ae	mov	result1, local01
07be8     60 00 90 3D |  if_ae	jmp	#LR__0720
07bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07bec     37 00 00 FF 
07bf0     44 E4 05 F1 | 	add	objptr, ##28228
07bf4     F2 1E 02 FB | 	rdlong	local01, objptr
07bf8     03 1E 66 F0 | 	shl	local01, #3
07bfc     02 00 00 FF 
07c00     38 E4 85 F1 | 	sub	objptr, ##1080
07c04     F2 1E 02 F1 | 	add	local01, objptr
07c08     04 1E 06 F1 | 	add	local01, #4
07c0c     0F 1F 02 FB | 	rdlong	local01, local01
07c10     11 1E 0E F2 | 	cmp	local01, #17 wz
07c14     35 00 00 FF 
07c18     0C E4 85 F1 | 	sub	objptr, ##27148
07c1c     15 FA 05 56 |  if_ne	mov	result1, #21
07c20     28 00 90 5D |  if_ne	jmp	#LR__0720
07c24     37 00 00 FF 
07c28     44 E4 05 F1 | 	add	objptr, ##28228
07c2c     F2 1E 02 FB | 	rdlong	local01, objptr
07c30     01 1E 06 F1 | 	add	local01, #1
07c34     F2 1E 62 FC | 	wrlong	local01, objptr
07c38     37 00 00 FF 
07c3c     44 E4 85 F1 | 	sub	objptr, ##28228
07c40     3C 1F B0 FD | 	call	#_expr
07c44                 | ' err=expr() : if err>0 then return err
07c44     01 FA 15 F2 | 	cmp	result1, #1 wc
07c48                 | ' return 0
07c48     00 FA 05 C6 |  if_b	mov	result1, #0
07c4c                 | LR__0720
07c4c     A7 F0 03 F6 | 	mov	ptra, fp
07c50     B2 00 A0 FD | 	call	#popregs_
07c54                 | _compile_fun_2p_ret
07c54     2D 00 64 FD | 	ret
07c58                 | 
07c58                 | ' 
07c58                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
07c58                 | ' 
07c58                 | ' function compile_fun_3p() as ulong
07c58                 | _compile_fun_3p
07c58     01 4A 05 F6 | 	mov	COUNT_, #1
07c5c     A8 00 A0 FD | 	call	#pushregs_
07c60     1C 1F B0 FD | 	call	#_expr
07c64     FD 1E 02 F6 | 	mov	local01, result1
07c68                 | ' err=expr() : if err>0 then return err
07c68     01 1E 16 F2 | 	cmp	local01, #1 wc
07c6c     0F FB 01 36 |  if_ae	mov	result1, local01
07c70     C8 00 90 3D |  if_ae	jmp	#LR__0730
07c74                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07c74     37 00 00 FF 
07c78     44 E4 05 F1 | 	add	objptr, ##28228
07c7c     F2 1E 02 FB | 	rdlong	local01, objptr
07c80     03 1E 66 F0 | 	shl	local01, #3
07c84     02 00 00 FF 
07c88     38 E4 85 F1 | 	sub	objptr, ##1080
07c8c     F2 1E 02 F1 | 	add	local01, objptr
07c90     04 1E 06 F1 | 	add	local01, #4
07c94     0F 1F 02 FB | 	rdlong	local01, local01
07c98     11 1E 0E F2 | 	cmp	local01, #17 wz
07c9c     35 00 00 FF 
07ca0     0C E4 85 F1 | 	sub	objptr, ##27148
07ca4     15 FA 05 56 |  if_ne	mov	result1, #21
07ca8     90 00 90 5D |  if_ne	jmp	#LR__0730
07cac     37 00 00 FF 
07cb0     44 E4 05 F1 | 	add	objptr, ##28228
07cb4     F2 1E 02 FB | 	rdlong	local01, objptr
07cb8     01 1E 06 F1 | 	add	local01, #1
07cbc     F2 1E 62 FC | 	wrlong	local01, objptr
07cc0     37 00 00 FF 
07cc4     44 E4 85 F1 | 	sub	objptr, ##28228
07cc8     B4 1E B0 FD | 	call	#_expr
07ccc     FD 1E 02 F6 | 	mov	local01, result1
07cd0                 | ' err=expr() : if err>0 then return err
07cd0     01 1E 16 F2 | 	cmp	local01, #1 wc
07cd4     0F FB 01 36 |  if_ae	mov	result1, local01
07cd8     60 00 90 3D |  if_ae	jmp	#LR__0730
07cdc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07cdc     37 00 00 FF 
07ce0     44 E4 05 F1 | 	add	objptr, ##28228
07ce4     F2 1E 02 FB | 	rdlong	local01, objptr
07ce8     03 1E 66 F0 | 	shl	local01, #3
07cec     02 00 00 FF 
07cf0     38 E4 85 F1 | 	sub	objptr, ##1080
07cf4     F2 1E 02 F1 | 	add	local01, objptr
07cf8     04 1E 06 F1 | 	add	local01, #4
07cfc     0F 1F 02 FB | 	rdlong	local01, local01
07d00     11 1E 0E F2 | 	cmp	local01, #17 wz
07d04     35 00 00 FF 
07d08     0C E4 85 F1 | 	sub	objptr, ##27148
07d0c     15 FA 05 56 |  if_ne	mov	result1, #21
07d10     28 00 90 5D |  if_ne	jmp	#LR__0730
07d14     37 00 00 FF 
07d18     44 E4 05 F1 | 	add	objptr, ##28228
07d1c     F2 1E 02 FB | 	rdlong	local01, objptr
07d20     01 1E 06 F1 | 	add	local01, #1
07d24     F2 1E 62 FC | 	wrlong	local01, objptr
07d28     37 00 00 FF 
07d2c     44 E4 85 F1 | 	sub	objptr, ##28228
07d30     4C 1E B0 FD | 	call	#_expr
07d34                 | ' err=expr() : if err>0 then return err
07d34     01 FA 15 F2 | 	cmp	result1, #1 wc
07d38                 | ' return 0
07d38     00 FA 05 C6 |  if_b	mov	result1, #0
07d3c                 | LR__0730
07d3c     A7 F0 03 F6 | 	mov	ptra, fp
07d40     B2 00 A0 FD | 	call	#popregs_
07d44                 | _compile_fun_3p_ret
07d44     2D 00 64 FD | 	ret
07d48                 | 
07d48                 | ' 
07d48                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
07d48                 | ' 
07d48                 | ' function compile_fun_4p() as ulong
07d48                 | _compile_fun_4p
07d48     01 4A 05 F6 | 	mov	COUNT_, #1
07d4c     A8 00 A0 FD | 	call	#pushregs_
07d50     2C 1E B0 FD | 	call	#_expr
07d54     FD 1E 02 F6 | 	mov	local01, result1
07d58                 | ' err=expr() : if err>0 then return err
07d58     01 1E 16 F2 | 	cmp	local01, #1 wc
07d5c     0F FB 01 36 |  if_ae	mov	result1, local01
07d60     30 01 90 3D |  if_ae	jmp	#LR__0740
07d64                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07d64     37 00 00 FF 
07d68     44 E4 05 F1 | 	add	objptr, ##28228
07d6c     F2 1E 02 FB | 	rdlong	local01, objptr
07d70     03 1E 66 F0 | 	shl	local01, #3
07d74     02 00 00 FF 
07d78     38 E4 85 F1 | 	sub	objptr, ##1080
07d7c     F2 1E 02 F1 | 	add	local01, objptr
07d80     04 1E 06 F1 | 	add	local01, #4
07d84     0F 1F 02 FB | 	rdlong	local01, local01
07d88     11 1E 0E F2 | 	cmp	local01, #17 wz
07d8c     35 00 00 FF 
07d90     0C E4 85 F1 | 	sub	objptr, ##27148
07d94     15 FA 05 56 |  if_ne	mov	result1, #21
07d98     F8 00 90 5D |  if_ne	jmp	#LR__0740
07d9c     37 00 00 FF 
07da0     44 E4 05 F1 | 	add	objptr, ##28228
07da4     F2 1E 02 FB | 	rdlong	local01, objptr
07da8     01 1E 06 F1 | 	add	local01, #1
07dac     F2 1E 62 FC | 	wrlong	local01, objptr
07db0     37 00 00 FF 
07db4     44 E4 85 F1 | 	sub	objptr, ##28228
07db8     C4 1D B0 FD | 	call	#_expr
07dbc     FD 1E 02 F6 | 	mov	local01, result1
07dc0                 | ' err=expr() : if err>0 then return err
07dc0     01 1E 16 F2 | 	cmp	local01, #1 wc
07dc4     0F FB 01 36 |  if_ae	mov	result1, local01
07dc8     C8 00 90 3D |  if_ae	jmp	#LR__0740
07dcc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07dcc     37 00 00 FF 
07dd0     44 E4 05 F1 | 	add	objptr, ##28228
07dd4     F2 1E 02 FB | 	rdlong	local01, objptr
07dd8     03 1E 66 F0 | 	shl	local01, #3
07ddc     02 00 00 FF 
07de0     38 E4 85 F1 | 	sub	objptr, ##1080
07de4     F2 1E 02 F1 | 	add	local01, objptr
07de8     04 1E 06 F1 | 	add	local01, #4
07dec     0F 1F 02 FB | 	rdlong	local01, local01
07df0     11 1E 0E F2 | 	cmp	local01, #17 wz
07df4     35 00 00 FF 
07df8     0C E4 85 F1 | 	sub	objptr, ##27148
07dfc     15 FA 05 56 |  if_ne	mov	result1, #21
07e00     90 00 90 5D |  if_ne	jmp	#LR__0740
07e04     37 00 00 FF 
07e08     44 E4 05 F1 | 	add	objptr, ##28228
07e0c     F2 1E 02 FB | 	rdlong	local01, objptr
07e10     01 1E 06 F1 | 	add	local01, #1
07e14     F2 1E 62 FC | 	wrlong	local01, objptr
07e18     37 00 00 FF 
07e1c     44 E4 85 F1 | 	sub	objptr, ##28228
07e20     5C 1D B0 FD | 	call	#_expr
07e24     FD 1E 02 F6 | 	mov	local01, result1
07e28                 | ' err=expr() : if err>0 then return err
07e28     01 1E 16 F2 | 	cmp	local01, #1 wc
07e2c     0F FB 01 36 |  if_ae	mov	result1, local01
07e30     60 00 90 3D |  if_ae	jmp	#LR__0740
07e34                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
07e34     37 00 00 FF 
07e38     44 E4 05 F1 | 	add	objptr, ##28228
07e3c     F2 1E 02 FB | 	rdlong	local01, objptr
07e40     03 1E 66 F0 | 	shl	local01, #3
07e44     02 00 00 FF 
07e48     38 E4 85 F1 | 	sub	objptr, ##1080
07e4c     F2 1E 02 F1 | 	add	local01, objptr
07e50     04 1E 06 F1 | 	add	local01, #4
07e54     0F 1F 02 FB | 	rdlong	local01, local01
07e58     11 1E 0E F2 | 	cmp	local01, #17 wz
07e5c     35 00 00 FF 
07e60     0C E4 85 F1 | 	sub	objptr, ##27148
07e64     15 FA 05 56 |  if_ne	mov	result1, #21
07e68     28 00 90 5D |  if_ne	jmp	#LR__0740
07e6c     37 00 00 FF 
07e70     44 E4 05 F1 | 	add	objptr, ##28228
07e74     F2 1E 02 FB | 	rdlong	local01, objptr
07e78     01 1E 06 F1 | 	add	local01, #1
07e7c     F2 1E 62 FC | 	wrlong	local01, objptr
07e80     37 00 00 FF 
07e84     44 E4 85 F1 | 	sub	objptr, ##28228
07e88     F4 1C B0 FD | 	call	#_expr
07e8c                 | ' err=expr() : if err>0 then return err
07e8c     01 FA 15 F2 | 	cmp	result1, #1 wc
07e90                 | ' return 0
07e90     00 FA 05 C6 |  if_b	mov	result1, #0
07e94                 | LR__0740
07e94     A7 F0 03 F6 | 	mov	ptra, fp
07e98     B2 00 A0 FD | 	call	#popregs_
07e9c                 | _compile_fun_4p_ret
07e9c     2D 00 64 FD | 	ret
07ea0                 | 
07ea0                 | ' 
07ea0                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
07ea0                 | ' 
07ea0                 | ' function compile_fun_varp() as ulong,ulong 
07ea0                 | _compile_fun_varp
07ea0     03 4A 05 F6 | 	mov	COUNT_, #3
07ea4     A8 00 A0 FD | 	call	#pushregs_
07ea8     00 1E 06 F6 | 	mov	local01, #0
07eac                 | ' 
07eac                 | ' i=0 : err=0
07eac                 | ' if lparts(ct).token<>token_end then
07eac     37 00 00 FF 
07eb0     44 E4 05 F1 | 	add	objptr, ##28228
07eb4     F2 20 02 FB | 	rdlong	local02, objptr
07eb8     03 20 66 F0 | 	shl	local02, #3
07ebc     02 00 00 FF 
07ec0     38 E4 85 F1 | 	sub	objptr, ##1080
07ec4     F2 20 02 F1 | 	add	local02, objptr
07ec8     04 20 06 F1 | 	add	local02, #4
07ecc     10 21 02 FB | 	rdlong	local02, local02
07ed0     FE 21 0E F2 | 	cmp	local02, #510 wz
07ed4     35 00 00 FF 
07ed8     0C E4 85 F1 | 	sub	objptr, ##27148
07edc     88 00 90 AD |  if_e	jmp	#LR__0751
07ee0                 | '   do
07ee0                 | LR__0750
07ee0     9C 1C B0 FD | 	call	#_expr
07ee4     01 1E 06 F1 | 	add	local01, #1
07ee8                 | '     expr()
07ee8                 | '     i+=1
07ee8                 | '     if lparts(ct).token=token_comma then ct+=1
07ee8     37 00 00 FF 
07eec     44 E4 05 F1 | 	add	objptr, ##28228
07ef0     F2 20 02 FB | 	rdlong	local02, objptr
07ef4     03 20 66 F0 | 	shl	local02, #3
07ef8     02 00 00 FF 
07efc     38 E4 85 F1 | 	sub	objptr, ##1080
07f00     F2 20 02 F1 | 	add	local02, objptr
07f04     04 20 06 F1 | 	add	local02, #4
07f08     10 21 02 FB | 	rdlong	local02, local02
07f0c     11 20 0E F2 | 	cmp	local02, #17 wz
07f10     35 00 00 FF 
07f14     0C E4 85 F1 | 	sub	objptr, ##27148
07f18     37 00 00 AF 
07f1c     44 E4 05 A1 |  if_e	add	objptr, ##28228
07f20     F2 22 02 AB |  if_e	rdlong	local03, objptr
07f24     01 22 06 A1 |  if_e	add	local03, #1
07f28     F2 22 62 AC |  if_e	wrlong	local03, objptr
07f2c     37 00 00 AF 
07f30     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07f34                 | '     if lparts(ct).token=token_end then exit loop
07f34     37 00 00 FF 
07f38     44 E4 05 F1 | 	add	objptr, ##28228
07f3c     F2 20 02 FB | 	rdlong	local02, objptr
07f40     03 20 66 F0 | 	shl	local02, #3
07f44     02 00 00 FF 
07f48     38 E4 85 F1 | 	sub	objptr, ##1080
07f4c     F2 20 02 F1 | 	add	local02, objptr
07f50     04 20 06 F1 | 	add	local02, #4
07f54     10 21 02 FB | 	rdlong	local02, local02
07f58     FE 21 0E F2 | 	cmp	local02, #510 wz
07f5c     35 00 00 FF 
07f60     0C E4 85 F1 | 	sub	objptr, ##27148
07f64     78 FF 9F 5D |  if_ne	jmp	#LR__0750
07f68                 | LR__0751
07f68                 | ' return i,err
07f68     0F FB 01 F6 | 	mov	result1, local01
07f6c     00 FC 05 F6 | 	mov	result2, #0
07f70     A7 F0 03 F6 | 	mov	ptra, fp
07f74     B2 00 A0 FD | 	call	#popregs_
07f78                 | _compile_fun_varp_ret
07f78     2D 00 64 FD | 	ret
07f7c                 | 
07f7c                 | ' 
07f7c                 | ' '----- compile assign to an array element
07f7c                 | ' 
07f7c                 | ' function compile_array_assign() as ulong 
07f7c                 | _compile_array_assign
07f7c     0B 4A 05 F6 | 	mov	COUNT_, #11
07f80     A8 00 A0 FD | 	call	#pushregs_
07f84     00 24 06 F6 | 	mov	local04, #0
07f88     00 26 06 F6 | 	mov	local05, #0
07f8c     37 00 00 FF 
07f90     44 E4 05 F1 | 	add	objptr, ##28228
07f94     F2 28 02 FB | 	rdlong	local06, objptr
07f98     14 FB 01 F6 | 	mov	result1, local06
07f9c     01 FA 85 F1 | 	sub	result1, #1
07fa0     03 FA 65 F0 | 	shl	result1, #3
07fa4     02 00 00 FF 
07fa8     38 E4 85 F1 | 	sub	objptr, ##1080
07fac     F2 FA 01 F1 | 	add	result1, objptr
07fb0     FD 2A 02 FB | 	rdlong	local07, result1
07fb4                 | ' numpar=0 : err=0
07fb4                 | ' varname$=lparts(ct-1).part$
07fb4                 | ' if lparts(ct).token=token_lpar then
07fb4     03 28 66 F0 | 	shl	local06, #3
07fb8     F2 28 02 F1 | 	add	local06, objptr
07fbc     04 28 06 F1 | 	add	local06, #4
07fc0     14 29 02 FB | 	rdlong	local06, local06
07fc4     15 28 0E F2 | 	cmp	local06, #21 wz
07fc8     35 00 00 FF 
07fcc     0C E4 85 F1 | 	sub	objptr, ##27148
07fd0     F4 01 90 5D |  if_ne	jmp	#LR__0764
07fd4     37 00 00 FF 
07fd8     44 E4 05 F1 | 	add	objptr, ##28228
07fdc     F2 2C 02 FB | 	rdlong	local08, objptr
07fe0     01 2C 06 F1 | 	add	local08, #1
07fe4     F2 2C 62 FC | 	wrlong	local08, objptr
07fe8     37 00 00 FF 
07fec     44 E4 85 F1 | 	sub	objptr, ##28228
07ff0                 | '   ct+=1 											' omit this lpar, this is for expr list
07ff0                 | '   do
07ff0                 | LR__0760
07ff0     8C 1B B0 FD | 	call	#_expr
07ff4     37 00 00 FF 
07ff8     44 E4 05 F1 | 	add	objptr, ##28228
07ffc     F2 28 02 FB | 	rdlong	local06, objptr
08000     01 28 06 F1 | 	add	local06, #1
08004     F2 28 62 FC | 	wrlong	local06, objptr
08008     01 24 06 F1 | 	add	local04, #1
0800c     01 28 86 F1 | 	sub	local06, #1
08010     03 28 66 F0 | 	shl	local06, #3
08014     02 00 00 FF 
08018     38 E4 85 F1 | 	sub	objptr, ##1080
0801c     F2 28 02 F1 | 	add	local06, objptr
08020     04 28 06 F1 | 	add	local06, #4
08024     14 2D 02 FB | 	rdlong	local08, local06
08028     14 2C 0E F2 | 	cmp	local08, #20 wz
0802c     35 00 00 FF 
08030     0C E4 85 F1 | 	sub	objptr, ##27148
08034     34 00 90 AD |  if_e	jmp	#LR__0761
08038     37 00 00 FF 
0803c     44 E4 05 F1 | 	add	objptr, ##28228
08040     F2 2C 02 FB | 	rdlong	local08, objptr
08044     03 2C 66 F0 | 	shl	local08, #3
08048     02 00 00 FF 
0804c     38 E4 85 F1 | 	sub	objptr, ##1080
08050     F2 2C 02 F1 | 	add	local08, objptr
08054     04 2C 06 F1 | 	add	local08, #4
08058     16 2D 02 FB | 	rdlong	local08, local08
0805c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08060     35 00 00 FF 
08064     0C E4 85 F1 | 	sub	objptr, ##27148
08068     84 FF 9F 5D |  if_ne	jmp	#LR__0760
0806c                 | LR__0761
0806c     37 00 00 FF 
08070     44 E4 05 F1 | 	add	objptr, ##28228
08074     F2 2C 02 FB | 	rdlong	local08, objptr
08078     01 2C 06 F1 | 	add	local08, #1
0807c     F2 2C 62 FC | 	wrlong	local08, objptr
08080     37 00 00 FF 
08084     44 E4 85 F1 | 	sub	objptr, ##28228
08088     F4 1A B0 FD | 	call	#_expr
0808c     01 2E 66 F6 | 	neg	local09, #1
08090     00 30 06 F6 | 	mov	local10, #0
08094                 | '   ct+=1 : expr()
08094                 | '   j=-1 : i=0 
08094                 | '   do 
08094                 | LR__0762
08094                 | '     if variables(i).name=varname$ then j=i: exit loop
08094     18 29 02 F6 | 	mov	local06, local10
08098     04 28 66 F0 | 	shl	local06, #4
0809c     14 00 00 FF 
080a0     F8 E5 05 F1 | 	add	objptr, ##10744
080a4     F2 28 02 F1 | 	add	local06, objptr
080a8     14 13 02 FB | 	rdlong	arg01, local06
080ac     15 15 02 F6 | 	mov	arg02, local07
080b0     14 00 00 FF 
080b4     F8 E5 85 F1 | 	sub	objptr, ##10744
080b8     B8 87 B1 FD | 	call	#__system___string_cmp
080bc     00 FA 0D F2 | 	cmp	result1, #0 wz
080c0     18 2F 02 A6 |  if_e	mov	local09, local10
080c4     20 00 90 AD |  if_e	jmp	#LR__0763
080c8     01 30 06 F1 | 	add	local10, #1
080cc     35 00 00 FF 
080d0     08 E4 05 F1 | 	add	objptr, ##27144
080d4     F2 2C 02 FB | 	rdlong	local08, objptr
080d8     35 00 00 FF 
080dc     08 E4 85 F1 | 	sub	objptr, ##27144
080e0     16 31 5A F2 | 	cmps	local10, local08 wcz
080e4     AC FF 9F ED |  if_be	jmp	#LR__0762
080e8                 | LR__0763
080e8     17 1F 02 F6 | 	mov	local01, local09
080ec     12 21 02 F6 | 	mov	local02, local04
080f0     17 22 06 F6 | 	mov	local03, #23
080f4     0F 2D 02 F6 | 	mov	local08, local01
080f8     10 33 02 F6 | 	mov	local11, local02
080fc     11 2B 02 F6 | 	mov	local07, local03
08100     4A 00 00 FF 
08104     7C E4 05 F1 | 	add	objptr, ##38012
08108     F2 1E 02 FB | 	rdlong	local01, objptr
0810c     0F 2F 02 F6 | 	mov	local09, local01
08110     01 2E 66 F0 | 	shl	local09, #1
08114     0F 2F 02 F1 | 	add	local09, local01
08118     02 2E 66 F0 | 	shl	local09, #2
0811c     03 00 00 FF 
08120     00 E4 85 F1 | 	sub	objptr, ##1536
08124     F2 2E 02 F1 | 	add	local09, objptr
08128     17 2D 62 FC | 	wrlong	local08, local09
0812c     03 00 00 FF 
08130     00 E4 05 F1 | 	add	objptr, ##1536
08134     F2 1E 02 FB | 	rdlong	local01, objptr
08138     0F 2F 02 F6 | 	mov	local09, local01
0813c     01 2E 66 F0 | 	shl	local09, #1
08140     0F 2F 02 F1 | 	add	local09, local01
08144     02 2E 66 F0 | 	shl	local09, #2
08148     03 00 00 FF 
0814c     00 E4 85 F1 | 	sub	objptr, ##1536
08150     F2 2E 02 F1 | 	add	local09, objptr
08154     04 2E 06 F1 | 	add	local09, #4
08158     17 33 62 FC | 	wrlong	local11, local09
0815c     03 00 00 FF 
08160     00 E4 05 F1 | 	add	objptr, ##1536
08164     F2 32 02 FB | 	rdlong	local11, objptr
08168     19 1F 02 F6 | 	mov	local01, local11
0816c     01 1E 66 F0 | 	shl	local01, #1
08170     19 1F 02 F1 | 	add	local01, local11
08174     02 1E 66 F0 | 	shl	local01, #2
08178     03 00 00 FF 
0817c     00 E4 85 F1 | 	sub	objptr, ##1536
08180     F2 1E 02 F1 | 	add	local01, objptr
08184     08 1E 06 F1 | 	add	local01, #8
08188     0F 2B 62 FC | 	wrlong	local07, local01
0818c     03 00 00 FF 
08190     00 E4 05 F1 | 	add	objptr, ##1536
08194     F2 2C 02 FB | 	rdlong	local08, objptr
08198     01 2C 06 F1 | 	add	local08, #1
0819c     F2 2C 62 FC | 	wrlong	local08, objptr
081a0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
081a0                 | '   if numpar>3 then err=45
081a0     04 24 16 F2 | 	cmp	local04, #4 wc
081a4     2D 26 06 36 |  if_ae	mov	local05, #45
081a8                 | '   if i>varnum then err=20
081a8     15 00 00 FF 
081ac     74 E4 85 F1 | 	sub	objptr, ##10868
081b0     F2 2C 02 FB | 	rdlong	local08, objptr
081b4     35 00 00 FF 
081b8     08 E4 85 F1 | 	sub	objptr, ##27144
081bc     16 31 5A F2 | 	cmps	local10, local08 wcz
081c0     14 26 06 16 |  if_a	mov	local05, #20
081c4     04 00 90 FD | 	jmp	#LR__0765
081c8                 | LR__0764
081c8     0E 26 06 F6 | 	mov	local05, #14
081cc                 | LR__0765
081cc                 | ' return err
081cc     13 FB 01 F6 | 	mov	result1, local05
081d0     A7 F0 03 F6 | 	mov	ptra, fp
081d4     B2 00 A0 FD | 	call	#popregs_
081d8                 | _compile_array_assign_ret
081d8     2D 00 64 FD | 	ret
081dc                 | 
081dc                 | ' 
081dc                 | ' '----- compile print command with its ";" and "," modifiers
081dc                 | ' 
081dc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
081dc                 | _compile_print
081dc     0B 4A 05 F6 | 	mov	COUNT_, #11
081e0     A8 00 A0 FD | 	call	#pushregs_
081e4     00 1E 06 F6 | 	mov	local01, #0
081e8     1D 22 06 F6 | 	mov	local03, #29
081ec                 | ' t1.result.uresult=0 : t1.result_type=result_uint
081ec                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
081ec     37 00 00 FF 
081f0     44 E4 05 F1 | 	add	objptr, ##28228
081f4     F2 24 02 FB | 	rdlong	local04, objptr
081f8     03 24 66 F0 | 	shl	local04, #3
081fc     02 00 00 FF 
08200     38 E4 85 F1 | 	sub	objptr, ##1080
08204     F2 24 02 F1 | 	add	local04, objptr
08208     04 24 06 F1 | 	add	local04, #4
0820c     12 25 02 FB | 	rdlong	local04, local04
08210     FE 25 0E F2 | 	cmp	local04, #510 wz
08214     35 00 00 FF 
08218     0C E4 85 F1 | 	sub	objptr, ##27148
0821c     68 01 90 5D |  if_ne	jmp	#LR__0770
08220     20 22 06 F6 | 	mov	local03, #32
08224     0F 27 02 F6 | 	mov	local05, local01
08228     10 29 02 F6 | 	mov	local06, local02
0822c     11 2B 02 F6 | 	mov	local07, local03
08230     4A 00 00 FF 
08234     7C E4 05 F1 | 	add	objptr, ##38012
08238     F2 2C 02 FB | 	rdlong	local08, objptr
0823c     16 2F 02 F6 | 	mov	local09, local08
08240     01 2E 66 F0 | 	shl	local09, #1
08244     16 2F 02 F1 | 	add	local09, local08
08248     02 2E 66 F0 | 	shl	local09, #2
0824c     03 00 00 FF 
08250     00 E4 85 F1 | 	sub	objptr, ##1536
08254     F2 2E 02 F1 | 	add	local09, objptr
08258     17 27 62 FC | 	wrlong	local05, local09
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 26 02 FB | 	rdlong	local05, objptr
08268     13 31 02 F6 | 	mov	local10, local05
0826c     01 30 66 F0 | 	shl	local10, #1
08270     13 31 02 F1 | 	add	local10, local05
08274     02 30 66 F0 | 	shl	local10, #2
08278     03 00 00 FF 
0827c     00 E4 85 F1 | 	sub	objptr, ##1536
08280     F2 30 02 F1 | 	add	local10, objptr
08284     04 30 06 F1 | 	add	local10, #4
08288     18 29 62 FC | 	wrlong	local06, local10
0828c     03 00 00 FF 
08290     00 E4 05 F1 | 	add	objptr, ##1536
08294     F2 26 02 FB | 	rdlong	local05, objptr
08298     13 33 02 F6 | 	mov	local11, local05
0829c     01 32 66 F0 | 	shl	local11, #1
082a0     13 33 02 F1 | 	add	local11, local05
082a4     02 32 66 F0 | 	shl	local11, #2
082a8     03 00 00 FF 
082ac     00 E4 85 F1 | 	sub	objptr, ##1536
082b0     F2 32 02 F1 | 	add	local11, objptr
082b4     08 32 06 F1 | 	add	local11, #8
082b8     19 2B 62 FC | 	wrlong	local07, local11
082bc     03 00 00 FF 
082c0     00 E4 05 F1 | 	add	objptr, ##1536
082c4     F2 26 02 FB | 	rdlong	local05, objptr
082c8     01 26 06 F1 | 	add	local05, #1
082cc     F2 26 62 FC | 	wrlong	local05, objptr
082d0     44 22 06 F6 | 	mov	local03, #68
082d4     0F 27 02 F6 | 	mov	local05, local01
082d8     10 29 02 F6 | 	mov	local06, local02
082dc     11 2B 02 F6 | 	mov	local07, local03
082e0     F2 2C 02 FB | 	rdlong	local08, objptr
082e4     16 2F 02 F6 | 	mov	local09, local08
082e8     01 2E 66 F0 | 	shl	local09, #1
082ec     16 2F 02 F1 | 	add	local09, local08
082f0     02 2E 66 F0 | 	shl	local09, #2
082f4     03 00 00 FF 
082f8     00 E4 85 F1 | 	sub	objptr, ##1536
082fc     F2 2E 02 F1 | 	add	local09, objptr
08300     17 27 62 FC | 	wrlong	local05, local09
08304     03 00 00 FF 
08308     00 E4 05 F1 | 	add	objptr, ##1536
0830c     F2 32 02 FB | 	rdlong	local11, objptr
08310     19 31 02 F6 | 	mov	local10, local11
08314     01 30 66 F0 | 	shl	local10, #1
08318     19 31 02 F1 | 	add	local10, local11
0831c     02 30 66 F0 | 	shl	local10, #2
08320     03 00 00 FF 
08324     00 E4 85 F1 | 	sub	objptr, ##1536
08328     F2 30 02 F1 | 	add	local10, objptr
0832c     04 30 06 F1 | 	add	local10, #4
08330     18 29 62 FC | 	wrlong	local06, local10
08334     03 00 00 FF 
08338     00 E4 05 F1 | 	add	objptr, ##1536
0833c     F2 30 02 FB | 	rdlong	local10, objptr
08340     18 33 02 F6 | 	mov	local11, local10
08344     01 32 66 F0 | 	shl	local11, #1
08348     18 33 02 F1 | 	add	local11, local10
0834c     02 32 66 F0 | 	shl	local11, #2
08350     03 00 00 FF 
08354     00 E4 85 F1 | 	sub	objptr, ##1536
08358     F2 32 02 F1 | 	add	local11, objptr
0835c     08 32 06 F1 | 	add	local11, #8
08360     19 2B 62 FC | 	wrlong	local07, local11
08364     03 00 00 FF 
08368     00 E4 05 F1 | 	add	objptr, ##1536
0836c     F2 26 02 FB | 	rdlong	local05, objptr
08370     01 26 06 F1 | 	add	local05, #1
08374     F2 26 62 FC | 	wrlong	local05, objptr
08378     4A 00 00 FF 
0837c     7C E4 85 F1 | 	sub	objptr, ##38012
08380     00 FA 05 F6 | 	mov	result1, #0
08384     20 05 90 FD | 	jmp	#LR__0777
08388                 | LR__0770
08388                 | ' do
08388                 | LR__0771
08388     F4 17 B0 FD | 	call	#_expr
0838c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0838c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0838c     37 00 00 FF 
08390     44 E4 05 F1 | 	add	objptr, ##28228
08394     F2 24 02 FB | 	rdlong	local04, objptr
08398     03 24 66 F0 | 	shl	local04, #3
0839c     02 00 00 FF 
083a0     38 E4 85 F1 | 	sub	objptr, ##1080
083a4     F2 24 02 F1 | 	add	local04, objptr
083a8     04 24 06 F1 | 	add	local04, #4
083ac     12 2D 02 FB | 	rdlong	local08, local04
083b0     11 2C 0E F2 | 	cmp	local08, #17 wz
083b4     35 00 00 FF 
083b8     0C E4 85 F1 | 	sub	objptr, ##27148
083bc     60 01 90 5D |  if_ne	jmp	#LR__0772
083c0     21 22 06 F6 | 	mov	local03, #33
083c4     0F 27 02 F6 | 	mov	local05, local01
083c8     10 29 02 F6 | 	mov	local06, local02
083cc     11 2B 02 F6 | 	mov	local07, local03
083d0     4A 00 00 FF 
083d4     7C E4 05 F1 | 	add	objptr, ##38012
083d8     F2 2C 02 FB | 	rdlong	local08, objptr
083dc     16 2F 02 F6 | 	mov	local09, local08
083e0     01 2E 66 F0 | 	shl	local09, #1
083e4     16 2F 02 F1 | 	add	local09, local08
083e8     02 2E 66 F0 | 	shl	local09, #2
083ec     03 00 00 FF 
083f0     00 E4 85 F1 | 	sub	objptr, ##1536
083f4     F2 2E 02 F1 | 	add	local09, objptr
083f8     17 27 62 FC | 	wrlong	local05, local09
083fc     03 00 00 FF 
08400     00 E4 05 F1 | 	add	objptr, ##1536
08404     F2 32 02 FB | 	rdlong	local11, objptr
08408     19 31 02 F6 | 	mov	local10, local11
0840c     01 30 66 F0 | 	shl	local10, #1
08410     19 31 02 F1 | 	add	local10, local11
08414     02 30 66 F0 | 	shl	local10, #2
08418     03 00 00 FF 
0841c     00 E4 85 F1 | 	sub	objptr, ##1536
08420     F2 30 02 F1 | 	add	local10, objptr
08424     04 30 06 F1 | 	add	local10, #4
08428     18 29 62 FC | 	wrlong	local06, local10
0842c     03 00 00 FF 
08430     00 E4 05 F1 | 	add	objptr, ##1536
08434     F2 26 02 FB | 	rdlong	local05, objptr
08438     13 33 02 F6 | 	mov	local11, local05
0843c     01 32 66 F0 | 	shl	local11, #1
08440     13 33 02 F1 | 	add	local11, local05
08444     02 32 66 F0 | 	shl	local11, #2
08448     03 00 00 FF 
0844c     00 E4 85 F1 | 	sub	objptr, ##1536
08450     F2 32 02 F1 | 	add	local11, objptr
08454     08 32 06 F1 | 	add	local11, #8
08458     19 2B 62 FC | 	wrlong	local07, local11
0845c     03 00 00 FF 
08460     00 E4 05 F1 | 	add	objptr, ##1536
08464     F2 26 02 FB | 	rdlong	local05, objptr
08468     01 26 06 F1 | 	add	local05, #1
0846c     F2 26 62 FC | 	wrlong	local05, objptr
08470     44 22 06 F6 | 	mov	local03, #68
08474     0F 27 02 F6 | 	mov	local05, local01
08478     10 29 02 F6 | 	mov	local06, local02
0847c     11 2B 02 F6 | 	mov	local07, local03
08480     F2 2C 02 FB | 	rdlong	local08, objptr
08484     16 2F 02 F6 | 	mov	local09, local08
08488     01 2E 66 F0 | 	shl	local09, #1
0848c     16 2F 02 F1 | 	add	local09, local08
08490     02 2E 66 F0 | 	shl	local09, #2
08494     03 00 00 FF 
08498     00 E4 85 F1 | 	sub	objptr, ##1536
0849c     F2 2E 02 F1 | 	add	local09, objptr
084a0     17 27 62 FC | 	wrlong	local05, local09
084a4     03 00 00 FF 
084a8     00 E4 05 F1 | 	add	objptr, ##1536
084ac     F2 32 02 FB | 	rdlong	local11, objptr
084b0     19 31 02 F6 | 	mov	local10, local11
084b4     01 30 66 F0 | 	shl	local10, #1
084b8     19 31 02 F1 | 	add	local10, local11
084bc     02 30 66 F0 | 	shl	local10, #2
084c0     03 00 00 FF 
084c4     00 E4 85 F1 | 	sub	objptr, ##1536
084c8     F2 30 02 F1 | 	add	local10, objptr
084cc     04 30 06 F1 | 	add	local10, #4
084d0     18 29 62 FC | 	wrlong	local06, local10
084d4     03 00 00 FF 
084d8     00 E4 05 F1 | 	add	objptr, ##1536
084dc     F2 30 02 FB | 	rdlong	local10, objptr
084e0     18 33 02 F6 | 	mov	local11, local10
084e4     01 32 66 F0 | 	shl	local11, #1
084e8     18 33 02 F1 | 	add	local11, local10
084ec     02 32 66 F0 | 	shl	local11, #2
084f0     03 00 00 FF 
084f4     00 E4 85 F1 | 	sub	objptr, ##1536
084f8     F2 32 02 F1 | 	add	local11, objptr
084fc     08 32 06 F1 | 	add	local11, #8
08500     19 2B 62 FC | 	wrlong	local07, local11
08504     03 00 00 FF 
08508     00 E4 05 F1 | 	add	objptr, ##1536
0850c     F2 26 02 FB | 	rdlong	local05, objptr
08510     01 26 06 F1 | 	add	local05, #1
08514     F2 26 62 FC | 	wrlong	local05, objptr
08518     4A 00 00 FF 
0851c     7C E4 85 F1 | 	sub	objptr, ##38012
08520                 | LR__0772
08520                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08520     37 00 00 FF 
08524     44 E4 05 F1 | 	add	objptr, ##28228
08528     F2 24 02 FB | 	rdlong	local04, objptr
0852c     03 24 66 F0 | 	shl	local04, #3
08530     02 00 00 FF 
08534     38 E4 85 F1 | 	sub	objptr, ##1080
08538     F2 24 02 F1 | 	add	local04, objptr
0853c     04 24 06 F1 | 	add	local04, #4
08540     12 2D 02 FB | 	rdlong	local08, local04
08544     12 2C 0E F2 | 	cmp	local08, #18 wz
08548     35 00 00 FF 
0854c     0C E4 85 F1 | 	sub	objptr, ##27148
08550     60 01 90 5D |  if_ne	jmp	#LR__0773
08554     22 22 06 F6 | 	mov	local03, #34
08558     0F 27 02 F6 | 	mov	local05, local01
0855c     10 29 02 F6 | 	mov	local06, local02
08560     11 2B 02 F6 | 	mov	local07, local03
08564     4A 00 00 FF 
08568     7C E4 05 F1 | 	add	objptr, ##38012
0856c     F2 2C 02 FB | 	rdlong	local08, objptr
08570     16 2F 02 F6 | 	mov	local09, local08
08574     01 2E 66 F0 | 	shl	local09, #1
08578     16 2F 02 F1 | 	add	local09, local08
0857c     02 2E 66 F0 | 	shl	local09, #2
08580     03 00 00 FF 
08584     00 E4 85 F1 | 	sub	objptr, ##1536
08588     F2 2E 02 F1 | 	add	local09, objptr
0858c     17 27 62 FC | 	wrlong	local05, local09
08590     03 00 00 FF 
08594     00 E4 05 F1 | 	add	objptr, ##1536
08598     F2 32 02 FB | 	rdlong	local11, objptr
0859c     19 31 02 F6 | 	mov	local10, local11
085a0     01 30 66 F0 | 	shl	local10, #1
085a4     19 31 02 F1 | 	add	local10, local11
085a8     02 30 66 F0 | 	shl	local10, #2
085ac     03 00 00 FF 
085b0     00 E4 85 F1 | 	sub	objptr, ##1536
085b4     F2 30 02 F1 | 	add	local10, objptr
085b8     04 30 06 F1 | 	add	local10, #4
085bc     18 29 62 FC | 	wrlong	local06, local10
085c0     03 00 00 FF 
085c4     00 E4 05 F1 | 	add	objptr, ##1536
085c8     F2 26 02 FB | 	rdlong	local05, objptr
085cc     13 33 02 F6 | 	mov	local11, local05
085d0     01 32 66 F0 | 	shl	local11, #1
085d4     13 33 02 F1 | 	add	local11, local05
085d8     02 32 66 F0 | 	shl	local11, #2
085dc     03 00 00 FF 
085e0     00 E4 85 F1 | 	sub	objptr, ##1536
085e4     F2 32 02 F1 | 	add	local11, objptr
085e8     08 32 06 F1 | 	add	local11, #8
085ec     19 2B 62 FC | 	wrlong	local07, local11
085f0     03 00 00 FF 
085f4     00 E4 05 F1 | 	add	objptr, ##1536
085f8     F2 26 02 FB | 	rdlong	local05, objptr
085fc     01 26 06 F1 | 	add	local05, #1
08600     F2 26 62 FC | 	wrlong	local05, objptr
08604     44 22 06 F6 | 	mov	local03, #68
08608     0F 27 02 F6 | 	mov	local05, local01
0860c     10 29 02 F6 | 	mov	local06, local02
08610     11 2B 02 F6 | 	mov	local07, local03
08614     F2 2C 02 FB | 	rdlong	local08, objptr
08618     16 2F 02 F6 | 	mov	local09, local08
0861c     01 2E 66 F0 | 	shl	local09, #1
08620     16 2F 02 F1 | 	add	local09, local08
08624     02 2E 66 F0 | 	shl	local09, #2
08628     03 00 00 FF 
0862c     00 E4 85 F1 | 	sub	objptr, ##1536
08630     F2 2E 02 F1 | 	add	local09, objptr
08634     17 27 62 FC | 	wrlong	local05, local09
08638     03 00 00 FF 
0863c     00 E4 05 F1 | 	add	objptr, ##1536
08640     F2 32 02 FB | 	rdlong	local11, objptr
08644     19 31 02 F6 | 	mov	local10, local11
08648     01 30 66 F0 | 	shl	local10, #1
0864c     19 31 02 F1 | 	add	local10, local11
08650     02 30 66 F0 | 	shl	local10, #2
08654     03 00 00 FF 
08658     00 E4 85 F1 | 	sub	objptr, ##1536
0865c     F2 30 02 F1 | 	add	local10, objptr
08660     04 30 06 F1 | 	add	local10, #4
08664     18 29 62 FC | 	wrlong	local06, local10
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 30 02 FB | 	rdlong	local10, objptr
08674     18 33 02 F6 | 	mov	local11, local10
08678     01 32 66 F0 | 	shl	local11, #1
0867c     18 33 02 F1 | 	add	local11, local10
08680     02 32 66 F0 | 	shl	local11, #2
08684     03 00 00 FF 
08688     00 E4 85 F1 | 	sub	objptr, ##1536
0868c     F2 32 02 F1 | 	add	local11, objptr
08690     08 32 06 F1 | 	add	local11, #8
08694     19 2B 62 FC | 	wrlong	local07, local11
08698     03 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##1536
086a0     F2 26 02 FB | 	rdlong	local05, objptr
086a4     01 26 06 F1 | 	add	local05, #1
086a8     F2 26 62 FC | 	wrlong	local05, objptr
086ac     4A 00 00 FF 
086b0     7C E4 85 F1 | 	sub	objptr, ##38012
086b4                 | LR__0773
086b4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
086b4     37 00 00 FF 
086b8     44 E4 05 F1 | 	add	objptr, ##28228
086bc     F2 24 02 FB | 	rdlong	local04, objptr
086c0     03 24 66 F0 | 	shl	local04, #3
086c4     02 00 00 FF 
086c8     38 E4 85 F1 | 	sub	objptr, ##1080
086cc     F2 24 02 F1 | 	add	local04, objptr
086d0     04 24 06 F1 | 	add	local04, #4
086d4     12 2D 02 FB | 	rdlong	local08, local04
086d8     FE 2D 0E F2 | 	cmp	local08, #510 wz
086dc     35 00 00 FF 
086e0     0C E4 85 F1 | 	sub	objptr, ##27148
086e4     B8 00 90 5D |  if_ne	jmp	#LR__0774
086e8     44 22 06 F6 | 	mov	local03, #68
086ec     0F 27 02 F6 | 	mov	local05, local01
086f0     10 29 02 F6 | 	mov	local06, local02
086f4     11 2B 02 F6 | 	mov	local07, local03
086f8     4A 00 00 FF 
086fc     7C E4 05 F1 | 	add	objptr, ##38012
08700     F2 2C 02 FB | 	rdlong	local08, objptr
08704     16 2F 02 F6 | 	mov	local09, local08
08708     01 2E 66 F0 | 	shl	local09, #1
0870c     16 2F 02 F1 | 	add	local09, local08
08710     02 2E 66 F0 | 	shl	local09, #2
08714     03 00 00 FF 
08718     00 E4 85 F1 | 	sub	objptr, ##1536
0871c     F2 2E 02 F1 | 	add	local09, objptr
08720     17 27 62 FC | 	wrlong	local05, local09
08724     03 00 00 FF 
08728     00 E4 05 F1 | 	add	objptr, ##1536
0872c     F2 32 02 FB | 	rdlong	local11, objptr
08730     19 31 02 F6 | 	mov	local10, local11
08734     01 30 66 F0 | 	shl	local10, #1
08738     19 31 02 F1 | 	add	local10, local11
0873c     02 30 66 F0 | 	shl	local10, #2
08740     03 00 00 FF 
08744     00 E4 85 F1 | 	sub	objptr, ##1536
08748     F2 30 02 F1 | 	add	local10, objptr
0874c     04 30 06 F1 | 	add	local10, #4
08750     18 29 62 FC | 	wrlong	local06, local10
08754     03 00 00 FF 
08758     00 E4 05 F1 | 	add	objptr, ##1536
0875c     F2 30 02 FB | 	rdlong	local10, objptr
08760     18 33 02 F6 | 	mov	local11, local10
08764     01 32 66 F0 | 	shl	local11, #1
08768     18 33 02 F1 | 	add	local11, local10
0876c     02 32 66 F0 | 	shl	local11, #2
08770     03 00 00 FF 
08774     00 E4 85 F1 | 	sub	objptr, ##1536
08778     F2 32 02 F1 | 	add	local11, objptr
0877c     08 32 06 F1 | 	add	local11, #8
08780     19 2B 62 FC | 	wrlong	local07, local11
08784     03 00 00 FF 
08788     00 E4 05 F1 | 	add	objptr, ##1536
0878c     F2 26 02 FB | 	rdlong	local05, objptr
08790     01 26 06 F1 | 	add	local05, #1
08794     F2 26 62 FC | 	wrlong	local05, objptr
08798     4A 00 00 FF 
0879c     7C E4 85 F1 | 	sub	objptr, ##38012
087a0                 | LR__0774
087a0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
087a0     37 00 00 FF 
087a4     44 E4 05 F1 | 	add	objptr, ##28228
087a8     F2 24 02 FB | 	rdlong	local04, objptr
087ac     03 24 66 F0 | 	shl	local04, #3
087b0     02 00 00 FF 
087b4     38 E4 85 F1 | 	sub	objptr, ##1080
087b8     F2 24 02 F1 | 	add	local04, objptr
087bc     04 24 06 F1 | 	add	local04, #4
087c0     12 2D 02 FB | 	rdlong	local08, local04
087c4     11 2C 0E F2 | 	cmp	local08, #17 wz
087c8     35 00 00 FF 
087cc     0C E4 85 F1 | 	sub	objptr, ##27148
087d0     6C 00 90 AD |  if_e	jmp	#LR__0775
087d4     37 00 00 FF 
087d8     44 E4 05 F1 | 	add	objptr, ##28228
087dc     F2 2C 02 FB | 	rdlong	local08, objptr
087e0     03 2C 66 F0 | 	shl	local08, #3
087e4     02 00 00 FF 
087e8     38 E4 85 F1 | 	sub	objptr, ##1080
087ec     F2 2C 02 F1 | 	add	local08, objptr
087f0     04 2C 06 F1 | 	add	local08, #4
087f4     16 2D 02 FB | 	rdlong	local08, local08
087f8     12 2C 0E F2 | 	cmp	local08, #18 wz
087fc     35 00 00 FF 
08800     0C E4 85 F1 | 	sub	objptr, ##27148
08804     38 00 90 AD |  if_e	jmp	#LR__0775
08808     37 00 00 FF 
0880c     44 E4 05 F1 | 	add	objptr, ##28228
08810     F2 32 02 FB | 	rdlong	local11, objptr
08814     03 32 66 F0 | 	shl	local11, #3
08818     02 00 00 FF 
0881c     38 E4 85 F1 | 	sub	objptr, ##1080
08820     F2 32 02 F1 | 	add	local11, objptr
08824     04 32 06 F1 | 	add	local11, #4
08828     19 33 02 FB | 	rdlong	local11, local11
0882c     FE 33 0E F2 | 	cmp	local11, #510 wz
08830     35 00 00 FF 
08834     0C E4 85 F1 | 	sub	objptr, ##27148
08838     16 FA 05 56 |  if_ne	mov	result1, #22
0883c     68 00 90 5D |  if_ne	jmp	#LR__0777
08840                 | LR__0775
08840     37 00 00 FF 
08844     44 E4 05 F1 | 	add	objptr, ##28228
08848     F2 24 02 FB | 	rdlong	local04, objptr
0884c     01 24 06 F1 | 	add	local04, #1
08850     F2 24 62 FC | 	wrlong	local04, objptr
08854     03 24 66 F0 | 	shl	local04, #3
08858     02 00 00 FF 
0885c     38 E4 85 F1 | 	sub	objptr, ##1080
08860     F2 24 02 F1 | 	add	local04, objptr
08864     04 24 06 F1 | 	add	local04, #4
08868     12 2D 02 FB | 	rdlong	local08, local04
0886c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08870     35 00 00 FF 
08874     0C E4 85 F1 | 	sub	objptr, ##27148
08878     28 00 90 AD |  if_e	jmp	#LR__0776
0887c     37 00 00 FF 
08880     44 E4 05 F1 | 	add	objptr, ##28228
08884     F2 32 02 FB | 	rdlong	local11, objptr
08888     0E 00 00 FF 
0888c     1C E4 05 F1 | 	add	objptr, ##7196
08890     F2 30 02 FB | 	rdlong	local10, objptr
08894     45 00 00 FF 
08898     60 E4 85 F1 | 	sub	objptr, ##35424
0889c     18 33 52 F2 | 	cmps	local11, local10 wc
088a0     E4 FA 9F CD |  if_b	jmp	#LR__0771
088a4                 | LR__0776
088a4                 | ' return 0
088a4     00 FA 05 F6 | 	mov	result1, #0
088a8                 | LR__0777
088a8     A7 F0 03 F6 | 	mov	ptra, fp
088ac     B2 00 A0 FD | 	call	#popregs_
088b0                 | _compile_print_ret
088b0     2D 00 64 FD | 	ret
088b4                 | 
088b4                 | ' 
088b4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
088b4                 | ' 
088b4                 | ' function compile_if(aline as ulong) as ulong  
088b4                 | _compile_if
088b4     09 4A 05 F6 | 	mov	COUNT_, #9
088b8     A8 00 A0 FD | 	call	#pushregs_
088bc                 | _compile_if_enter
088bc     09 25 02 F6 | 	mov	local04, arg01
088c0                 | ' return expr()
088c0     BC 12 B0 FD | 	call	#_expr
088c4     37 00 00 FF 
088c8     44 E4 05 F1 | 	add	objptr, ##28228
088cc     F2 14 02 FB | 	rdlong	arg02, objptr
088d0     0A 27 02 F6 | 	mov	local05, arg02
088d4     03 26 66 F0 | 	shl	local05, #3
088d8     02 00 00 FF 
088dc     38 E4 85 F1 | 	sub	objptr, ##1080
088e0     F2 26 02 F1 | 	add	local05, objptr
088e4     04 26 06 F1 | 	add	local05, #4
088e8     13 27 02 FB | 	rdlong	local05, local05
088ec     01 14 06 F1 | 	add	arg02, #1
088f0     02 00 00 FF 
088f4     38 E4 05 F1 | 	add	objptr, ##1080
088f8     F2 14 62 FC | 	wrlong	arg02, objptr
088fc     37 00 00 FF 
08900     44 E4 85 F1 | 	sub	objptr, ##28228
08904                 | ' 
08904                 | ' err=compile_fun_1p()
08904                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08904     5B 26 0E F2 | 	cmp	local05, #91 wz
08908     34 FA 05 56 |  if_ne	mov	result1, #52
0890c     20 01 90 5D |  if_ne	jmp	#LR__0782
08910     58 22 06 F6 | 	mov	local03, #88
08914     0F 29 02 F6 | 	mov	local06, local01
08918     10 2B 02 F6 | 	mov	local07, local02
0891c     11 15 02 F6 | 	mov	arg02, local03
08920     4A 00 00 FF 
08924     7C E4 05 F1 | 	add	objptr, ##38012
08928     F2 12 02 FB | 	rdlong	arg01, objptr
0892c     09 2D 02 F6 | 	mov	local08, arg01
08930     01 2C 66 F0 | 	shl	local08, #1
08934     09 2D 02 F1 | 	add	local08, arg01
08938     02 2C 66 F0 | 	shl	local08, #2
0893c     03 00 00 FF 
08940     00 E4 85 F1 | 	sub	objptr, ##1536
08944     F2 2C 02 F1 | 	add	local08, objptr
08948     16 29 62 FC | 	wrlong	local06, local08
0894c     03 00 00 FF 
08950     00 E4 05 F1 | 	add	objptr, ##1536
08954     F2 28 02 FB | 	rdlong	local06, objptr
08958     14 13 02 F6 | 	mov	arg01, local06
0895c     01 12 66 F0 | 	shl	arg01, #1
08960     14 13 02 F1 | 	add	arg01, local06
08964     02 12 66 F0 | 	shl	arg01, #2
08968     03 00 00 FF 
0896c     00 E4 85 F1 | 	sub	objptr, ##1536
08970     F2 12 02 F1 | 	add	arg01, objptr
08974     04 12 06 F1 | 	add	arg01, #4
08978     09 2B 62 FC | 	wrlong	local07, arg01
0897c     03 00 00 FF 
08980     00 E4 05 F1 | 	add	objptr, ##1536
08984     F2 28 02 FB | 	rdlong	local06, objptr
08988     14 13 02 F6 | 	mov	arg01, local06
0898c     01 12 66 F0 | 	shl	arg01, #1
08990     14 13 02 F1 | 	add	arg01, local06
08994     02 12 66 F0 | 	shl	arg01, #2
08998     03 00 00 FF 
0899c     00 E4 85 F1 | 	sub	objptr, ##1536
089a0     F2 12 02 F1 | 	add	arg01, objptr
089a4     08 12 06 F1 | 	add	arg01, #8
089a8     09 15 62 FC | 	wrlong	arg02, arg01
089ac     03 00 00 FF 
089b0     00 E4 05 F1 | 	add	objptr, ##1536
089b4     F2 28 02 FB | 	rdlong	local06, objptr
089b8     01 28 06 F1 | 	add	local06, #1
089bc     F2 28 62 FC | 	wrlong	local06, objptr
089c0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
089c0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
089c0     13 00 00 FF 
089c4     38 E4 85 F1 | 	sub	objptr, ##9784
089c8     F2 14 02 FB | 	rdlong	arg02, objptr
089cc     01 14 06 F1 | 	add	arg02, #1
089d0     03 14 66 F0 | 	shl	arg02, #3
089d4     02 00 00 FF 
089d8     38 E4 85 F1 | 	sub	objptr, ##1080
089dc     F2 14 02 F1 | 	add	arg02, objptr
089e0     0A 13 02 FB | 	rdlong	arg01, arg02
089e4     35 00 00 FF 
089e8     0C E4 85 F1 | 	sub	objptr, ##27148
089ec                 | ' 
089ec                 | ' select case s
089ec     81 01 00 FF 
089f0     9A 14 06 F6 | 	mov	arg02, ##@LR__5153
089f4     7C 7E B1 FD | 	call	#__system___string_cmp
089f8     00 FA 0D F2 | 	cmp	result1, #0 wz
089fc     1B FA 05 A6 |  if_e	mov	result1, #27
08a00     00 FA 05 56 |  if_ne	mov	result1, #0
08a04     00 FA 0D F2 | 	cmp	result1, #0 wz
08a08     10 00 90 AD |  if_e	jmp	#LR__0780
08a0c     05 12 06 F6 | 	mov	arg01, #5
08a10     88 EC BF FD | 	call	#_compile_immediate_assign
08a14     FD 2E 02 F6 | 	mov	local09, result1
08a18     10 00 90 FD | 	jmp	#LR__0781
08a1c                 | LR__0780
08a1c     05 12 06 F6 | 	mov	arg01, #5
08a20     12 15 02 F6 | 	mov	arg02, local04
08a24     74 E3 BF FD | 	call	#_compile_immediate
08a28     FD 2E 02 F6 | 	mov	local09, result1
08a2c                 | LR__0781
08a2c                 | ' return err
08a2c     17 FB 01 F6 | 	mov	result1, local09
08a30                 | LR__0782
08a30     A7 F0 03 F6 | 	mov	ptra, fp
08a34     B2 00 A0 FD | 	call	#popregs_
08a38                 | _compile_if_ret
08a38     2D 00 64 FD | 	ret
08a3c                 | 
08a3c                 | ' 
08a3c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08a3c                 | ' 
08a3c                 | ' function compile_else(aline as ulong) as ulong  
08a3c                 | _compile_else
08a3c     07 4A 05 F6 | 	mov	COUNT_, #7
08a40     A8 00 A0 FD | 	call	#pushregs_
08a44                 | _compile_else_enter
08a44     09 25 02 F6 | 	mov	local04, arg01
08a48     5A 22 06 F6 | 	mov	local03, #90
08a4c     0F 27 02 F6 | 	mov	local05, local01
08a50     10 29 02 F6 | 	mov	local06, local02
08a54     11 1F 02 F6 | 	mov	local01, local03
08a58     4A 00 00 FF 
08a5c     7C E4 05 F1 | 	add	objptr, ##38012
08a60     F2 14 02 FB | 	rdlong	arg02, objptr
08a64     0A 13 02 F6 | 	mov	arg01, arg02
08a68     01 12 66 F0 | 	shl	arg01, #1
08a6c     0A 13 02 F1 | 	add	arg01, arg02
08a70     02 12 66 F0 | 	shl	arg01, #2
08a74     03 00 00 FF 
08a78     00 E4 85 F1 | 	sub	objptr, ##1536
08a7c     F2 12 02 F1 | 	add	arg01, objptr
08a80     09 27 62 FC | 	wrlong	local05, arg01
08a84     03 00 00 FF 
08a88     00 E4 05 F1 | 	add	objptr, ##1536
08a8c     F2 26 02 FB | 	rdlong	local05, objptr
08a90     13 15 02 F6 | 	mov	arg02, local05
08a94     01 14 66 F0 | 	shl	arg02, #1
08a98     13 15 02 F1 | 	add	arg02, local05
08a9c     02 14 66 F0 | 	shl	arg02, #2
08aa0     03 00 00 FF 
08aa4     00 E4 85 F1 | 	sub	objptr, ##1536
08aa8     F2 14 02 F1 | 	add	arg02, objptr
08aac     04 14 06 F1 | 	add	arg02, #4
08ab0     0A 29 62 FC | 	wrlong	local06, arg02
08ab4     03 00 00 FF 
08ab8     00 E4 05 F1 | 	add	objptr, ##1536
08abc     F2 28 02 FB | 	rdlong	local06, objptr
08ac0     14 27 02 F6 | 	mov	local05, local06
08ac4     01 26 66 F0 | 	shl	local05, #1
08ac8     14 27 02 F1 | 	add	local05, local06
08acc     02 26 66 F0 | 	shl	local05, #2
08ad0     03 00 00 FF 
08ad4     00 E4 85 F1 | 	sub	objptr, ##1536
08ad8     F2 26 02 F1 | 	add	local05, objptr
08adc     08 26 06 F1 | 	add	local05, #8
08ae0     13 1F 62 FC | 	wrlong	local01, local05
08ae4     03 00 00 FF 
08ae8     00 E4 05 F1 | 	add	objptr, ##1536
08aec     F2 26 02 FB | 	rdlong	local05, objptr
08af0     01 26 06 F1 | 	add	local05, #1
08af4     F2 26 62 FC | 	wrlong	local05, objptr
08af8                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08af8                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08af8     13 00 00 FF 
08afc     38 E4 85 F1 | 	sub	objptr, ##9784
08b00     F2 28 02 FB | 	rdlong	local06, objptr
08b04     01 28 06 F1 | 	add	local06, #1
08b08     03 28 66 F0 | 	shl	local06, #3
08b0c     02 00 00 FF 
08b10     38 E4 85 F1 | 	sub	objptr, ##1080
08b14     F2 28 02 F1 | 	add	local06, objptr
08b18     14 13 02 FB | 	rdlong	arg01, local06
08b1c     35 00 00 FF 
08b20     0C E4 85 F1 | 	sub	objptr, ##27148
08b24                 | ' 
08b24                 | ' select case s
08b24     81 01 00 FF 
08b28     9A 14 06 F6 | 	mov	arg02, ##@LR__5153
08b2c     44 7D B1 FD | 	call	#__system___string_cmp
08b30     00 FA 0D F2 | 	cmp	result1, #0 wz
08b34     1B FA 05 A6 |  if_e	mov	result1, #27
08b38     00 FA 05 56 |  if_ne	mov	result1, #0
08b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
08b40     10 00 90 AD |  if_e	jmp	#LR__0790
08b44     05 12 06 F6 | 	mov	arg01, #5
08b48     50 EB BF FD | 	call	#_compile_immediate_assign
08b4c     FD 2A 02 F6 | 	mov	local07, result1
08b50     10 00 90 FD | 	jmp	#LR__0791
08b54                 | LR__0790
08b54     05 12 06 F6 | 	mov	arg01, #5
08b58     12 15 02 F6 | 	mov	arg02, local04
08b5c     3C E2 BF FD | 	call	#_compile_immediate
08b60     FD 2A 02 F6 | 	mov	local07, result1
08b64                 | LR__0791
08b64                 | ' return err
08b64     15 FB 01 F6 | 	mov	result1, local07
08b68     A7 F0 03 F6 | 	mov	ptra, fp
08b6c     B2 00 A0 FD | 	call	#popregs_
08b70                 | _compile_else_ret
08b70     2D 00 64 FD | 	ret
08b74                 | 
08b74                 | ' 
08b74                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
08b74                 | ' 
08b74                 | ' function compile_dim() as ulong  
08b74                 | _compile_dim
08b74     11 4A 05 F6 | 	mov	COUNT_, #17
08b78     A8 00 A0 FD | 	call	#pushregs_
08b7c     01 1E 06 F6 | 	mov	local01, #1
08b80     01 20 06 F6 | 	mov	local02, #1
08b84     01 22 06 F6 | 	mov	local03, #1
08b88                 | ' 
08b88                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08b88                 | ' if isname(lparts(ct).part$) then 
08b88     37 00 00 FF 
08b8c     44 E4 05 F1 | 	add	objptr, ##28228
08b90     F2 18 02 FB | 	rdlong	arg04, objptr
08b94     03 18 66 F0 | 	shl	arg04, #3
08b98     02 00 00 FF 
08b9c     38 E4 85 F1 | 	sub	objptr, ##1080
08ba0     F2 18 02 F1 | 	add	arg04, objptr
08ba4     0C 13 02 FB | 	rdlong	arg01, arg04
08ba8     35 00 00 FF 
08bac     0C E4 85 F1 | 	sub	objptr, ##27148
08bb0     40 D0 BF FD | 	call	#_isname
08bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
08bb8     80 05 90 AD |  if_e	jmp	#LR__0823
08bbc     37 00 00 FF 
08bc0     44 E4 05 F1 | 	add	objptr, ##28228
08bc4     F2 24 02 FB | 	rdlong	local04, objptr
08bc8     03 24 66 F0 | 	shl	local04, #3
08bcc     02 00 00 FF 
08bd0     38 E4 85 F1 | 	sub	objptr, ##1080
08bd4     F2 24 02 F1 | 	add	local04, objptr
08bd8     12 27 02 FB | 	rdlong	local05, local04
08bdc     01 28 66 F6 | 	neg	local06, #1
08be0                 | '   varname2$=lparts(ct).part$ 
08be0                 | '   j=-1
08be0                 | '   if varnum>0 then
08be0     04 E4 85 F1 | 	sub	objptr, #4
08be4     F2 2A 02 FB | 	rdlong	local07, objptr
08be8     35 00 00 FF 
08bec     08 E4 85 F1 | 	sub	objptr, ##27144
08bf0     01 2A 56 F2 | 	cmps	local07, #1 wc
08bf4     58 00 90 CD |  if_b	jmp	#LR__0802
08bf8                 | '     for i=0 to varnum-1
08bf8     00 2C 06 F6 | 	mov	local08, #0
08bfc     35 00 00 FF 
08c00     08 E4 05 F1 | 	add	objptr, ##27144
08c04     F2 2E 02 FB | 	rdlong	local09, objptr
08c08     35 00 00 FF 
08c0c     08 E4 85 F1 | 	sub	objptr, ##27144
08c10                 | LR__0800
08c10     17 2D 52 F2 | 	cmps	local08, local09 wc
08c14     38 00 90 3D |  if_ae	jmp	#LR__0801
08c18                 | '       if variables(i).name=varname2$ then j=i : exit
08c18     16 25 02 F6 | 	mov	local04, local08
08c1c     04 24 66 F0 | 	shl	local04, #4
08c20     14 00 00 FF 
08c24     F8 E5 05 F1 | 	add	objptr, ##10744
08c28     F2 24 02 F1 | 	add	local04, objptr
08c2c     12 13 02 FB | 	rdlong	arg01, local04
08c30     13 15 02 F6 | 	mov	arg02, local05
08c34     14 00 00 FF 
08c38     F8 E5 85 F1 | 	sub	objptr, ##10744
08c3c     34 7C B1 FD | 	call	#__system___string_cmp
08c40     00 FA 0D F2 | 	cmp	result1, #0 wz
08c44     16 29 02 A6 |  if_e	mov	local06, local08
08c48     01 2C 06 51 |  if_ne	add	local08, #1
08c4c     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08c50                 | LR__0801
08c50                 | LR__0802
08c50                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08c50     FF FF 7F FF 
08c54     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08c58     35 00 00 AF 
08c5c     08 E4 05 A1 |  if_e	add	objptr, ##27144
08c60     F2 28 02 AB |  if_e	rdlong	local06, objptr
08c64     35 00 00 AF 
08c68     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08c6c     78 00 90 AD |  if_e	jmp	#LR__0803
08c70     00 12 06 F6 | 	mov	arg01, #0
08c74     38 D6 B1 FD | 	call	#__system___getiolock_0541
08c78     FD 12 02 F6 | 	mov	arg01, result1
08c7c     CC 7B B1 FD | 	call	#__system___lockmem
08c80     83 01 00 FF 
08c84     AC 14 06 F6 | 	mov	arg02, ##@LR__5386
08c88     00 12 06 F6 | 	mov	arg01, #0
08c8c     00 16 06 F6 | 	mov	arg03, #0
08c90     AC 88 B1 FD | 	call	#__system___basic_print_string
08c94     51 00 00 FF 
08c98     C4 E5 05 F1 | 	add	objptr, ##41924
08c9c     F2 14 02 FB | 	rdlong	arg02, objptr
08ca0     51 00 00 FF 
08ca4     C4 E5 85 F1 | 	sub	objptr, ##41924
08ca8     00 12 06 F6 | 	mov	arg01, #0
08cac     00 16 06 F6 | 	mov	arg03, #0
08cb0     0A 18 06 F6 | 	mov	arg04, #10
08cb4     0C 89 B1 FD | 	call	#__system___basic_print_unsigned
08cb8     83 01 00 FF 
08cbc     BA 14 06 F6 | 	mov	arg02, ##@LR__5387
08cc0     00 12 06 F6 | 	mov	arg01, #0
08cc4     00 16 06 F6 | 	mov	arg03, #0
08cc8     74 88 B1 FD | 	call	#__system___basic_print_string
08ccc     00 12 06 F6 | 	mov	arg01, #0
08cd0     0A 14 06 F6 | 	mov	arg02, #10
08cd4     00 16 06 F6 | 	mov	arg03, #0
08cd8     0C 88 B1 FD | 	call	#__system___basic_print_char
08cdc     00 12 06 F6 | 	mov	arg01, #0
08ce0     CC D5 B1 FD | 	call	#__system___getiolock_0541
08ce4     FD 00 68 FC | 	wrlong	#0, result1
08ce8                 | LR__0803
08ce8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
08ce8     37 00 00 FF 
08cec     44 E4 05 F1 | 	add	objptr, ##28228
08cf0     F2 14 02 FB | 	rdlong	arg02, objptr
08cf4     01 14 06 F1 | 	add	arg02, #1
08cf8     03 14 66 F0 | 	shl	arg02, #3
08cfc     02 00 00 FF 
08d00     38 E4 85 F1 | 	sub	objptr, ##1080
08d04     F2 14 02 F1 | 	add	arg02, objptr
08d08     0A 13 02 FB | 	rdlong	arg01, arg02
08d0c     83 01 00 FF 
08d10     DB 14 06 F6 | 	mov	arg02, ##@LR__5388
08d14     35 00 00 FF 
08d18     0C E4 85 F1 | 	sub	objptr, ##27148
08d1c     54 7B B1 FD | 	call	#__system___string_cmp
08d20     00 FA 0D F2 | 	cmp	result1, #0 wz
08d24     44 00 90 AD |  if_e	jmp	#LR__0804
08d28     37 00 00 FF 
08d2c     44 E4 05 F1 | 	add	objptr, ##28228
08d30     F2 2E 02 FB | 	rdlong	local09, objptr
08d34     01 2E 06 F1 | 	add	local09, #1
08d38     03 2E 66 F0 | 	shl	local09, #3
08d3c     02 00 00 FF 
08d40     38 E4 85 F1 | 	sub	objptr, ##1080
08d44     F2 2E 02 F1 | 	add	local09, objptr
08d48     17 13 02 FB | 	rdlong	arg01, local09
08d4c     83 01 00 FF 
08d50     DD 14 06 F6 | 	mov	arg02, ##@LR__5389
08d54     35 00 00 FF 
08d58     0C E4 85 F1 | 	sub	objptr, ##27148
08d5c     14 7B B1 FD | 	call	#__system___string_cmp
08d60     00 FA 0D F2 | 	cmp	result1, #0 wz
08d64     2B FA 05 56 |  if_ne	mov	result1, #43
08d68     D8 04 90 5D |  if_ne	jmp	#LR__0825
08d6c                 | LR__0804
08d6c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
08d6c     37 00 00 FF 
08d70     44 E4 05 F1 | 	add	objptr, ##28228
08d74     F2 14 02 FB | 	rdlong	arg02, objptr
08d78     01 14 06 F1 | 	add	arg02, #1
08d7c     03 14 66 F0 | 	shl	arg02, #3
08d80     02 00 00 FF 
08d84     38 E4 85 F1 | 	sub	objptr, ##1080
08d88     F2 14 02 F1 | 	add	arg02, objptr
08d8c     0A 13 02 FB | 	rdlong	arg01, arg02
08d90     83 01 00 FF 
08d94     E0 14 06 F6 | 	mov	arg02, ##@LR__5390
08d98     35 00 00 FF 
08d9c     0C E4 85 F1 | 	sub	objptr, ##27148
08da0     D0 7A B1 FD | 	call	#__system___string_cmp
08da4     00 FA 0D F2 | 	cmp	result1, #0 wz
08da8     37 00 00 AF 
08dac     44 E4 05 A1 |  if_e	add	objptr, ##28228
08db0     F2 30 02 AB |  if_e	rdlong	local10, objptr
08db4     37 00 00 AF 
08db8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08dbc     01 30 06 A1 |  if_e	add	local10, #1
08dc0     5C 01 90 AD |  if_e	jmp	#LR__0809
08dc4     37 00 00 FF 
08dc8     44 E4 05 F1 | 	add	objptr, ##28228
08dcc     F2 30 02 FB | 	rdlong	local10, objptr
08dd0     37 00 00 FF 
08dd4     44 E4 85 F1 | 	sub	objptr, ##28228
08dd8     02 30 06 F1 | 	add	local10, #2
08ddc     00 32 06 F6 | 	mov	local11, #0
08de0                 | '   l=ct+2 : m=0 : do
08de0                 | LR__0805
08de0                 | '   if isdec(lparts(l).part$) then 
08de0     18 25 02 F6 | 	mov	local04, local10
08de4     03 24 66 F0 | 	shl	local04, #3
08de8     35 00 00 FF 
08dec     0C E4 05 F1 | 	add	objptr, ##27148
08df0     F2 24 02 F1 | 	add	local04, objptr
08df4     12 13 02 FB | 	rdlong	arg01, local04
08df8     35 00 00 FF 
08dfc     0C E4 85 F1 | 	sub	objptr, ##27148
08e00     F4 D6 BF FD | 	call	#_isdec
08e04     00 FA 0D F2 | 	cmp	result1, #0 wz
08e08     44 00 90 AD |  if_e	jmp	#LR__0806
08e0c     19 35 02 F6 | 	mov	local12, local11
08e10     0F 35 06 F1 | 	add	local12, #local01
08e14     18 2F 02 F6 | 	mov	local09, local10
08e18     03 2E 66 F0 | 	shl	local09, #3
08e1c     35 00 00 FF 
08e20     0C E4 05 F1 | 	add	objptr, ##27148
08e24     F2 2E 02 F1 | 	add	local09, objptr
08e28     17 13 02 FB | 	rdlong	arg01, local09
08e2c     00 14 06 F6 | 	mov	arg02, #0
08e30     35 00 00 FF 
08e34     0C E4 85 F1 | 	sub	objptr, ##27148
08e38     3C AC B1 FD | 	call	#__system____builtin_atoi
08e3c     FD 36 02 F6 | 	mov	local13, result1
08e40                 | 	'.live	local13
08e40                 | 	'.live	local12
08e40     00 34 8E F9 | 	altd	local12, #0
08e44     1B 35 02 F6 | 	mov	local12, local13
08e48     01 32 06 F1 | 	add	local11, #1
08e4c     08 00 90 FD | 	jmp	#LR__0807
08e50                 | LR__0806
08e50                 | '     return(17)
08e50     11 FA 05 F6 | 	mov	result1, #17
08e54     EC 03 90 FD | 	jmp	#LR__0825
08e58                 | LR__0807
08e58                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
08e58     18 25 02 F6 | 	mov	local04, local10
08e5c     01 24 06 F1 | 	add	local04, #1
08e60     03 24 66 F0 | 	shl	local04, #3
08e64     35 00 00 FF 
08e68     0C E4 05 F1 | 	add	objptr, ##27148
08e6c     F2 24 02 F1 | 	add	local04, objptr
08e70     12 13 02 FB | 	rdlong	arg01, local04
08e74     83 01 00 FF 
08e78     E3 14 06 F6 | 	mov	arg02, ##@LR__5391
08e7c     35 00 00 FF 
08e80     0C E4 85 F1 | 	sub	objptr, ##27148
08e84     EC 79 B1 FD | 	call	#__system___string_cmp
08e88     00 FA 0D F2 | 	cmp	result1, #0 wz
08e8c     3C 00 90 AD |  if_e	jmp	#LR__0808
08e90     18 37 02 F6 | 	mov	local13, local10
08e94     01 36 06 F1 | 	add	local13, #1
08e98     03 36 66 F0 | 	shl	local13, #3
08e9c     35 00 00 FF 
08ea0     0C E4 05 F1 | 	add	objptr, ##27148
08ea4     F2 36 02 F1 | 	add	local13, objptr
08ea8     1B 13 02 FB | 	rdlong	arg01, local13
08eac     83 01 00 FF 
08eb0     E5 14 06 F6 | 	mov	arg02, ##@LR__5392
08eb4     35 00 00 FF 
08eb8     0C E4 85 F1 | 	sub	objptr, ##27148
08ebc     B4 79 B1 FD | 	call	#__system___string_cmp
08ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ec4     2C FA 05 56 |  if_ne	mov	result1, #44
08ec8     78 03 90 5D |  if_ne	jmp	#LR__0825
08ecc                 | LR__0808
08ecc     02 30 06 F1 | 	add	local10, #2
08ed0     18 25 02 F6 | 	mov	local04, local10
08ed4     01 24 86 F1 | 	sub	local04, #1
08ed8     03 24 66 F0 | 	shl	local04, #3
08edc     35 00 00 FF 
08ee0     0C E4 05 F1 | 	add	objptr, ##27148
08ee4     F2 24 02 F1 | 	add	local04, objptr
08ee8     12 13 02 FB | 	rdlong	arg01, local04
08eec     83 01 00 FF 
08ef0     E7 14 06 F6 | 	mov	arg02, ##@LR__5393
08ef4     35 00 00 FF 
08ef8     0C E4 85 F1 | 	sub	objptr, ##27148
08efc     74 79 B1 FD | 	call	#__system___string_cmp
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08f08     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08f0c                 | '   if m>3 then return 45
08f0c     04 32 56 F2 | 	cmps	local11, #4 wc
08f10     2D FA 05 36 |  if_ae	mov	result1, #45
08f14     2C 03 90 3D |  if_ae	jmp	#LR__0825
08f18     00 39 06 F6 | 	mov	local14, #256
08f1c     0C 3A 06 F6 | 	mov	local15, #12
08f20                 | LR__0809
08f20                 | '   arraytype=array_no_type : esize=12
08f20                 | ' 1350 
08f20                 | '   if lparts(l).part$="as" then
08f20     18 25 02 F6 | 	mov	local04, local10
08f24     03 24 66 F0 | 	shl	local04, #3
08f28     35 00 00 FF 
08f2c     0C E4 05 F1 | 	add	objptr, ##27148
08f30     F2 24 02 F1 | 	add	local04, objptr
08f34     12 13 02 FB | 	rdlong	arg01, local04
08f38     83 01 00 FF 
08f3c     E9 14 06 F6 | 	mov	arg02, ##@LR__5394
08f40     35 00 00 FF 
08f44     0C E4 85 F1 | 	sub	objptr, ##27148
08f48     28 79 B1 FD | 	call	#__system___string_cmp
08f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f50     F0 01 90 5D |  if_ne	jmp	#LR__0824
08f54                 | '     select case lparts(l+1).part$
08f54     18 35 02 F6 | 	mov	local12, local10
08f58     01 34 06 F1 | 	add	local12, #1
08f5c     03 34 66 F0 | 	shl	local12, #3
08f60     35 00 00 FF 
08f64     0C E4 05 F1 | 	add	objptr, ##27148
08f68     F2 34 02 F1 | 	add	local12, objptr
08f6c     1A 3D 02 FB | 	rdlong	local16, local12
08f70     83 01 00 FF 
08f74     EC 14 06 F6 | 	mov	arg02, ##@LR__5395
08f78     1E 13 02 F6 | 	mov	arg01, local16
08f7c     35 00 00 FF 
08f80     0C E4 85 F1 | 	sub	objptr, ##27148
08f84     EC 78 B1 FD | 	call	#__system___string_cmp
08f88     00 FA 0D F2 | 	cmp	result1, #0 wz
08f8c     0C 01 90 AD |  if_e	jmp	#LR__0810
08f90     83 01 00 FF 
08f94     F1 14 06 F6 | 	mov	arg02, ##@LR__5396
08f98     1E 13 02 F6 | 	mov	arg01, local16
08f9c     D4 78 B1 FD | 	call	#__system___string_cmp
08fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
08fa4     00 01 90 AD |  if_e	jmp	#LR__0811
08fa8     83 01 00 FF 
08fac     F7 14 06 F6 | 	mov	arg02, ##@LR__5397
08fb0     1E 13 02 F6 | 	mov	arg01, local16
08fb4     BC 78 B1 FD | 	call	#__system___string_cmp
08fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fbc     F4 00 90 AD |  if_e	jmp	#LR__0812
08fc0     83 01 00 FF 
08fc4     FD 14 06 F6 | 	mov	arg02, ##@LR__5398
08fc8     1E 13 02 F6 | 	mov	arg01, local16
08fcc     A4 78 B1 FD | 	call	#__system___string_cmp
08fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
08fd4     E8 00 90 AD |  if_e	jmp	#LR__0813
08fd8     83 01 00 FF 
08fdc     04 15 06 F6 | 	mov	arg02, ##@LR__5399
08fe0     1E 13 02 F6 | 	mov	arg01, local16
08fe4     8C 78 B1 FD | 	call	#__system___string_cmp
08fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fec     DC 00 90 AD |  if_e	jmp	#LR__0814
08ff0     83 01 00 FF 
08ff4     09 15 06 F6 | 	mov	arg02, ##@LR__5400
08ff8     1E 13 02 F6 | 	mov	arg01, local16
08ffc     74 78 B1 FD | 	call	#__system___string_cmp
09000     00 FA 0D F2 | 	cmp	result1, #0 wz
09004     D0 00 90 AD |  if_e	jmp	#LR__0815
09008     83 01 00 FF 
0900c     11 15 06 F6 | 	mov	arg02, ##@LR__5401
09010     1E 13 02 F6 | 	mov	arg01, local16
09014     5C 78 B1 FD | 	call	#__system___string_cmp
09018     00 FA 0D F2 | 	cmp	result1, #0 wz
0901c     C4 00 90 AD |  if_e	jmp	#LR__0816
09020     83 01 00 FF 
09024     17 15 06 F6 | 	mov	arg02, ##@LR__5402
09028     1E 13 02 F6 | 	mov	arg01, local16
0902c     44 78 B1 FD | 	call	#__system___string_cmp
09030     00 FA 0D F2 | 	cmp	result1, #0 wz
09034     B8 00 90 AD |  if_e	jmp	#LR__0817
09038     83 01 00 FF 
0903c     1D 15 06 F6 | 	mov	arg02, ##@LR__5403
09040     1E 13 02 F6 | 	mov	arg01, local16
09044     2C 78 B1 FD | 	call	#__system___string_cmp
09048     00 FA 0D F2 | 	cmp	result1, #0 wz
0904c     AC 00 90 AD |  if_e	jmp	#LR__0818
09050     83 01 00 FF 
09054     24 15 06 F6 | 	mov	arg02, ##@LR__5404
09058     1E 13 02 F6 | 	mov	arg01, local16
0905c     14 78 B1 FD | 	call	#__system___string_cmp
09060     00 FA 0D F2 | 	cmp	result1, #0 wz
09064     A0 00 90 AD |  if_e	jmp	#LR__0819
09068     83 01 00 FF 
0906c     2B 15 06 F6 | 	mov	arg02, ##@LR__5405
09070     1E 13 02 F6 | 	mov	arg01, local16
09074     FC 77 B1 FD | 	call	#__system___string_cmp
09078     00 FA 0D F2 | 	cmp	result1, #0 wz
0907c     94 00 90 AD |  if_e	jmp	#LR__0820
09080     83 01 00 FF 
09084     32 15 06 F6 | 	mov	arg02, ##@LR__5406
09088     1E 13 02 F6 | 	mov	arg01, local16
0908c     E4 77 B1 FD | 	call	#__system___string_cmp
09090     00 FA 0D F2 | 	cmp	result1, #0 wz
09094     88 00 90 AD |  if_e	jmp	#LR__0821
09098     90 00 90 FD | 	jmp	#LR__0822
0909c                 | LR__0810
0909c     01 39 06 F6 | 	mov	local14, #257
090a0     01 3A 06 F6 | 	mov	local15, #1
090a4     9C 00 90 FD | 	jmp	#LR__0824
090a8                 | LR__0811
090a8     02 39 06 F6 | 	mov	local14, #258
090ac     01 3A 06 F6 | 	mov	local15, #1
090b0     90 00 90 FD | 	jmp	#LR__0824
090b4                 | LR__0812
090b4     03 39 06 F6 | 	mov	local14, #259
090b8     02 3A 06 F6 | 	mov	local15, #2
090bc     84 00 90 FD | 	jmp	#LR__0824
090c0                 | LR__0813
090c0     04 39 06 F6 | 	mov	local14, #260
090c4     02 3A 06 F6 | 	mov	local15, #2
090c8     78 00 90 FD | 	jmp	#LR__0824
090cc                 | LR__0814
090cc     05 39 06 F6 | 	mov	local14, #261
090d0     04 3A 06 F6 | 	mov	local15, #4
090d4     6C 00 90 FD | 	jmp	#LR__0824
090d8                 | LR__0815
090d8     05 39 06 F6 | 	mov	local14, #261
090dc     04 3A 06 F6 | 	mov	local15, #4
090e0     60 00 90 FD | 	jmp	#LR__0824
090e4                 | LR__0816
090e4     06 39 06 F6 | 	mov	local14, #262
090e8     04 3A 06 F6 | 	mov	local15, #4
090ec     54 00 90 FD | 	jmp	#LR__0824
090f0                 | LR__0817
090f0     07 39 06 F6 | 	mov	local14, #263
090f4     08 3A 06 F6 | 	mov	local15, #8
090f8     48 00 90 FD | 	jmp	#LR__0824
090fc                 | LR__0818
090fc     08 39 06 F6 | 	mov	local14, #264
09100     08 3A 06 F6 | 	mov	local15, #8
09104     3C 00 90 FD | 	jmp	#LR__0824
09108                 | LR__0819
09108     09 39 06 F6 | 	mov	local14, #265
0910c     04 3A 06 F6 | 	mov	local15, #4
09110     30 00 90 FD | 	jmp	#LR__0824
09114                 | LR__0820
09114     0A 39 06 F6 | 	mov	local14, #266
09118     08 3A 06 F6 | 	mov	local15, #8
0911c     24 00 90 FD | 	jmp	#LR__0824
09120                 | LR__0821
09120     0B 39 06 F6 | 	mov	local14, #267
09124     04 3A 06 F6 | 	mov	local15, #4
09128     18 00 90 FD | 	jmp	#LR__0824
0912c                 | LR__0822
0912c     2F 12 06 F6 | 	mov	arg01, #47
09130     88 41 B1 FD | 	call	#_printerror
09134     2F FA 05 F6 | 	mov	result1, #47
09138     08 01 90 FD | 	jmp	#LR__0825
0913c                 | LR__0823
0913c                 | '   return 46
0913c     2E FA 05 F6 | 	mov	result1, #46
09140     00 01 90 FD | 	jmp	#LR__0825
09144                 | LR__0824
09144     0F 3B 02 FD | 	qmul	local15, local01
09148     18 2A 62 FD | 	getqx	local07
0914c     10 2B 02 FD | 	qmul	local07, local02
09150     18 3C 62 FD | 	getqx	local16
09154     11 3D 02 FD | 	qmul	local16, local03
09158     51 00 00 FF 
0915c     AC E5 05 F1 | 	add	objptr, ##41900
09160     F2 3E 02 FB | 	rdlong	local17, objptr
09164     1C 15 02 F6 | 	mov	arg02, local14
09168     18 3C 62 FD | 	getqx	local16
0916c     1E 3F 82 F1 | 	sub	local17, local16
09170     10 3E 86 F1 | 	sub	local17, #16
09174     0F 3E 26 F5 | 	andn	local17, #15
09178     F2 3E 62 FC | 	wrlong	local17, objptr
0917c     51 00 00 FF 
09180     AC E5 85 F1 | 	sub	objptr, ##41900
09184     1F 13 02 F6 | 	mov	arg01, local17
09188     DC 42 B1 FD | 	call	#_psdpoke
0918c     1F 13 02 F6 | 	mov	arg01, local17
09190     02 12 06 F1 | 	add	arg01, #2
09194     1D 15 02 F6 | 	mov	arg02, local15
09198     CC 42 B1 FD | 	call	#_psdpoke
0919c     1F 13 02 F6 | 	mov	arg01, local17
091a0     04 12 06 F1 | 	add	arg01, #4
091a4     0F 15 02 F6 | 	mov	arg02, local01
091a8     74 42 B1 FD | 	call	#_pslpoke
091ac     1F 13 02 F6 | 	mov	arg01, local17
091b0     08 12 06 F1 | 	add	arg01, #8
091b4     10 15 02 F6 | 	mov	arg02, local02
091b8     64 42 B1 FD | 	call	#_pslpoke
091bc     1F 13 02 F6 | 	mov	arg01, local17
091c0     0C 12 06 F1 | 	add	arg01, #12
091c4     11 15 02 F6 | 	mov	arg02, local03
091c8     54 42 B1 FD | 	call	#_pslpoke
091cc     14 35 02 F6 | 	mov	local12, local06
091d0     04 34 66 F0 | 	shl	local12, #4
091d4     14 00 00 FF 
091d8     F8 E5 05 F1 | 	add	objptr, ##10744
091dc     F2 34 02 F1 | 	add	local12, objptr
091e0     1A 27 62 FC | 	wrlong	local05, local12
091e4     14 35 02 F6 | 	mov	local12, local06
091e8     04 34 66 F0 | 	shl	local12, #4
091ec     F2 34 02 F1 | 	add	local12, objptr
091f0     04 34 06 F1 | 	add	local12, #4
091f4     1A 3F 62 FC | 	wrlong	local17, local12
091f8     14 35 02 F6 | 	mov	local12, local06
091fc     04 34 66 F0 | 	shl	local12, #4
09200     F2 34 02 F1 | 	add	local12, objptr
09204     0C 34 06 F1 | 	add	local12, #12
09208     1A 39 62 FC | 	wrlong	local14, local12
0920c                 | ' memtop=arrayptr
0920c                 | ' psdpoke arrayptr,arraytype 
0920c                 | ' psdpoke arrayptr+2,esize 
0920c                 | ' pslpoke arrayptr+4,dims(0)
0920c                 | ' pslpoke arrayptr+8,dims(1)
0920c                 | ' pslpoke arrayptr+12,dims(2)
0920c                 | ' variables(j).name=varname2$
0920c                 | ' variables(j).value.uresult=arrayptr
0920c                 | ' variables(j).vartype=arraytype
0920c                 | ' if j=varnum then varnum+=1
0920c     20 00 00 FF 
09210     10 E4 05 F1 | 	add	objptr, ##16400
09214     F2 2A 02 FB | 	rdlong	local07, objptr
09218     35 00 00 FF 
0921c     08 E4 85 F1 | 	sub	objptr, ##27144
09220     15 29 0A F2 | 	cmp	local06, local07 wz
09224     35 00 00 AF 
09228     08 E4 05 A1 |  if_e	add	objptr, ##27144
0922c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
09230     01 2A 06 A1 |  if_e	add	local07, #1
09234     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09238     35 00 00 AF 
0923c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09240                 | ' return 0
09240     00 FA 05 F6 | 	mov	result1, #0
09244                 | LR__0825
09244     A7 F0 03 F6 | 	mov	ptra, fp
09248     B2 00 A0 FD | 	call	#popregs_
0924c                 | _compile_dim_ret
0924c     2D 00 64 FD | 	ret
09250                 | 
09250                 | ' 
09250                 | ' '----- compile 'for' command. 
09250                 | ' 
09250                 | ' function compile_for() as ulong  
09250                 | _compile_for
09250     05 4A 05 F6 | 	mov	COUNT_, #5
09254     A8 00 A0 FD | 	call	#pushregs_
09258                 | ' 
09258                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09258     37 00 00 FF 
0925c     44 E4 05 F1 | 	add	objptr, ##28228
09260     F2 14 02 FB | 	rdlong	arg02, objptr
09264     01 14 06 F1 | 	add	arg02, #1
09268     03 14 66 F0 | 	shl	arg02, #3
0926c     02 00 00 FF 
09270     38 E4 85 F1 | 	sub	objptr, ##1080
09274     F2 14 02 F1 | 	add	arg02, objptr
09278     0A 13 02 FB | 	rdlong	arg01, arg02
0927c     35 00 00 FF 
09280     0C E4 85 F1 | 	sub	objptr, ##27148
09284                 | ' 
09284                 | ' select case s
09284     81 01 00 FF 
09288     9A 14 06 F6 | 	mov	arg02, ##@LR__5153
0928c     E4 75 B1 FD | 	call	#__system___string_cmp
09290     00 FA 0D F2 | 	cmp	result1, #0 wz
09294     1B FA 05 A6 |  if_e	mov	result1, #27
09298     00 FA 05 56 |  if_ne	mov	result1, #0
0929c     00 FA 0D F2 | 	cmp	result1, #0 wz
092a0     0C 00 90 AD |  if_e	jmp	#LR__0830
092a4     05 12 06 F6 | 	mov	arg01, #5
092a8     F0 E3 BF FD | 	call	#_compile_immediate_assign
092ac     08 00 90 FD | 	jmp	#LR__0831
092b0                 | LR__0830
092b0     20 FA 05 F6 | 	mov	result1, #32
092b4     D0 02 90 FD | 	jmp	#LR__0835
092b8                 | LR__0831
092b8     4A 00 00 FF 
092bc     7C E4 05 F1 | 	add	objptr, ##38012
092c0     F2 14 02 FB | 	rdlong	arg02, objptr
092c4     0A 13 02 F6 | 	mov	arg01, arg02
092c8     01 12 86 F1 | 	sub	arg01, #1
092cc     09 25 02 F6 | 	mov	local04, arg01
092d0     01 24 66 F0 | 	shl	local04, #1
092d4     09 25 02 F1 | 	add	local04, arg01
092d8     02 24 66 F0 | 	shl	local04, #2
092dc     03 00 00 FF 
092e0     00 E4 85 F1 | 	sub	objptr, ##1536
092e4     F2 24 02 F1 | 	add	local04, objptr
092e8     12 1F 02 FB | 	rdlong	local01, local04
092ec     04 24 06 F1 | 	add	local04, #4
092f0     12 25 02 FB | 	rdlong	local04, local04
092f4     01 14 86 F1 | 	sub	arg02, #1
092f8     0A 13 02 F6 | 	mov	arg01, arg02
092fc     01 12 66 F0 | 	shl	arg01, #1
09300     0A 13 02 F1 | 	add	arg01, arg02
09304     02 12 66 F0 | 	shl	arg01, #2
09308     F2 12 02 F1 | 	add	arg01, objptr
0930c     08 12 06 F1 | 	add	arg01, #8
09310     09 15 02 FB | 	rdlong	arg02, arg01
09314     12 21 02 F6 | 	mov	local02, local04
09318     0A 23 02 F6 | 	mov	local03, arg02
0931c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0931c     17 22 0E F2 | 	cmp	local03, #23 wz
09320     47 00 00 FF 
09324     7C E4 85 F1 | 	sub	objptr, ##36476
09328     22 FA 05 56 |  if_ne	mov	result1, #34
0932c     58 02 90 5D |  if_ne	jmp	#LR__0835
09330     0F 27 02 F6 | 	mov	local05, local01
09334                 | ' varnum=t1.result.uresult
09334                 | ' if lparts(ct).part$<>"to" then return 33
09334     37 00 00 FF 
09338     44 E4 05 F1 | 	add	objptr, ##28228
0933c     F2 1E 02 FB | 	rdlong	local01, objptr
09340     03 1E 66 F0 | 	shl	local01, #3
09344     02 00 00 FF 
09348     38 E4 85 F1 | 	sub	objptr, ##1080
0934c     F2 1E 02 F1 | 	add	local01, objptr
09350     0F 13 02 FB | 	rdlong	arg01, local01
09354     83 01 00 FF 
09358     39 15 06 F6 | 	mov	arg02, ##@LR__5407
0935c     35 00 00 FF 
09360     0C E4 85 F1 | 	sub	objptr, ##27148
09364     0C 75 B1 FD | 	call	#__system___string_cmp
09368     00 FA 0D F2 | 	cmp	result1, #0 wz
0936c     21 FA 05 56 |  if_ne	mov	result1, #33
09370     14 02 90 5D |  if_ne	jmp	#LR__0835
09374     37 00 00 FF 
09378     44 E4 05 F1 | 	add	objptr, ##28228
0937c     F2 24 02 FB | 	rdlong	local04, objptr
09380     01 24 06 F1 | 	add	local04, #1
09384     F2 24 62 FC | 	wrlong	local04, objptr
09388     37 00 00 FF 
0938c     44 E4 85 F1 | 	sub	objptr, ##28228
09390     EC 07 B0 FD | 	call	#_expr
09394                 | ' ct+=1
09394                 | ' expr()  										' there is "to" value pushed on the stack
09394                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09394     37 00 00 FF 
09398     44 E4 05 F1 | 	add	objptr, ##28228
0939c     F2 24 02 FB | 	rdlong	local04, objptr
093a0     03 24 66 F0 | 	shl	local04, #3
093a4     02 00 00 FF 
093a8     38 E4 85 F1 | 	sub	objptr, ##1080
093ac     F2 24 02 F1 | 	add	local04, objptr
093b0     12 13 02 FB | 	rdlong	arg01, local04
093b4     83 01 00 FF 
093b8     3C 15 06 F6 | 	mov	arg02, ##@LR__5408
093bc     35 00 00 FF 
093c0     0C E4 85 F1 | 	sub	objptr, ##27148
093c4     AC 74 B1 FD | 	call	#__system___string_cmp
093c8     00 FA 0D F2 | 	cmp	result1, #0 wz
093cc     3C 00 90 AD |  if_e	jmp	#LR__0832
093d0     37 00 00 FF 
093d4     44 E4 05 F1 | 	add	objptr, ##28228
093d8     F2 24 02 FB | 	rdlong	local04, objptr
093dc     03 24 66 F0 | 	shl	local04, #3
093e0     02 00 00 FF 
093e4     38 E4 85 F1 | 	sub	objptr, ##1080
093e8     F2 24 02 F1 | 	add	local04, objptr
093ec     12 13 02 FB | 	rdlong	arg01, local04
093f0     83 01 00 FF 
093f4     41 15 06 F6 | 	mov	arg02, ##@LR__5409
093f8     35 00 00 FF 
093fc     0C E4 85 F1 | 	sub	objptr, ##27148
09400     70 74 B1 FD | 	call	#__system___string_cmp
09404     00 FA 0D F2 | 	cmp	result1, #0 wz
09408     24 00 90 5D |  if_ne	jmp	#LR__0833
0940c                 | LR__0832
0940c     37 00 00 FF 
09410     44 E4 05 F1 | 	add	objptr, ##28228
09414     F2 1E 02 FB | 	rdlong	local01, objptr
09418     01 1E 06 F1 | 	add	local01, #1
0941c     F2 1E 62 FC | 	wrlong	local01, objptr
09420     37 00 00 FF 
09424     44 E4 85 F1 | 	sub	objptr, ##28228
09428     54 07 B0 FD | 	call	#_expr
0942c     78 00 90 FD | 	jmp	#LR__0834
09430                 | LR__0833
09430     4A 00 00 FF 
09434     7C E4 05 F1 | 	add	objptr, ##38012
09438     F2 1E 02 FB | 	rdlong	local01, objptr
0943c     0F 25 02 F6 | 	mov	local04, local01
09440     01 24 66 F0 | 	shl	local04, #1
09444     0F 25 02 F1 | 	add	local04, local01
09448     02 24 66 F0 | 	shl	local04, #2
0944c     03 00 00 FF 
09450     00 E4 85 F1 | 	sub	objptr, ##1536
09454     F2 24 02 F1 | 	add	local04, objptr
09458     08 24 06 F1 | 	add	local04, #8
0945c     12 39 68 FC | 	wrlong	#28, local04
09460     03 00 00 FF 
09464     00 E4 05 F1 | 	add	objptr, ##1536
09468     F2 1E 02 FB | 	rdlong	local01, objptr
0946c     0F 25 02 F6 | 	mov	local04, local01
09470     01 24 66 F0 | 	shl	local04, #1
09474     0F 25 02 F1 | 	add	local04, local01
09478     02 24 66 F0 | 	shl	local04, #2
0947c     03 00 00 FF 
09480     00 E4 85 F1 | 	sub	objptr, ##1536
09484     F2 24 02 F1 | 	add	local04, objptr
09488     12 03 68 FC | 	wrlong	#1, local04
0948c     03 00 00 FF 
09490     00 E4 05 F1 | 	add	objptr, ##1536
09494     F2 1E 02 FB | 	rdlong	local01, objptr
09498     01 1E 06 F1 | 	add	local01, #1
0949c     F2 1E 62 FC | 	wrlong	local01, objptr
094a0     4A 00 00 FF 
094a4     7C E4 85 F1 | 	sub	objptr, ##38012
094a8                 | LR__0834
094a8     4A 00 00 FF 
094ac     7C E4 05 F1 | 	add	objptr, ##38012
094b0     F2 1E 02 FB | 	rdlong	local01, objptr
094b4     0F 25 02 F6 | 	mov	local04, local01
094b8     01 24 66 F0 | 	shl	local04, #1
094bc     0F 25 02 F1 | 	add	local04, local01
094c0     02 24 66 F0 | 	shl	local04, #2
094c4     03 00 00 FF 
094c8     00 E4 85 F1 | 	sub	objptr, ##1536
094cc     F2 24 02 F1 | 	add	local04, objptr
094d0     08 24 06 F1 | 	add	local04, #8
094d4     12 39 68 FC | 	wrlong	#28, local04
094d8     03 00 00 FF 
094dc     00 E4 05 F1 | 	add	objptr, ##1536
094e0     F2 1E 02 FB | 	rdlong	local01, objptr
094e4     0F 25 02 F6 | 	mov	local04, local01
094e8     01 24 66 F0 | 	shl	local04, #1
094ec     0F 25 02 F1 | 	add	local04, local01
094f0     02 24 66 F0 | 	shl	local04, #2
094f4     03 00 00 FF 
094f8     00 E4 85 F1 | 	sub	objptr, ##1536
094fc     F2 24 02 F1 | 	add	local04, objptr
09500     12 27 62 FC | 	wrlong	local05, local04
09504     03 00 00 FF 
09508     00 E4 05 F1 | 	add	objptr, ##1536
0950c     F2 26 02 FB | 	rdlong	local05, objptr
09510     01 26 06 F1 | 	add	local05, #1
09514     F2 26 62 FC | 	wrlong	local05, objptr
09518     13 1F 02 F6 | 	mov	local01, local05
0951c     01 1E 66 F0 | 	shl	local01, #1
09520     13 1F 02 F1 | 	add	local01, local05
09524     02 1E 66 F0 | 	shl	local01, #2
09528     03 00 00 FF 
0952c     00 E4 85 F1 | 	sub	objptr, ##1536
09530     F2 1E 02 F1 | 	add	local01, objptr
09534     08 1E 06 F1 | 	add	local01, #8
09538     0F 95 68 FC | 	wrlong	#74, local01
0953c     03 00 00 FF 
09540     00 E4 05 F1 | 	add	objptr, ##1536
09544     F2 26 02 FB | 	rdlong	local05, objptr
09548     13 1F 02 F6 | 	mov	local01, local05
0954c     01 1E 66 F0 | 	shl	local01, #1
09550     13 1F 02 F1 | 	add	local01, local05
09554     02 1E 66 F0 | 	shl	local01, #2
09558     03 00 00 FF 
0955c     00 E4 85 F1 | 	sub	objptr, ##1536
09560     F2 1E 02 F1 | 	add	local01, objptr
09564     0F 01 68 FC | 	wrlong	#0, local01
09568     03 00 00 FF 
0956c     00 E4 05 F1 | 	add	objptr, ##1536
09570     F2 26 02 FB | 	rdlong	local05, objptr
09574     01 26 06 F1 | 	add	local05, #1
09578     F2 26 62 FC | 	wrlong	local05, objptr
0957c     4A 00 00 FF 
09580     7C E4 85 F1 | 	sub	objptr, ##38012
09584                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09584                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09584                 | ' return 0
09584     00 FA 05 F6 | 	mov	result1, #0
09588                 | LR__0835
09588     A7 F0 03 F6 | 	mov	ptra, fp
0958c     B2 00 A0 FD | 	call	#popregs_
09590                 | _compile_for_ret
09590     2D 00 64 FD | 	ret
09594                 | 
09594                 | ' 
09594                 | ' '----- compile 'next' command. 
09594                 | ' 
09594                 | ' function compile_next() as ulong
09594                 | _compile_next
09594     04 4A 05 F6 | 	mov	COUNT_, #4
09598     A8 00 A0 FD | 	call	#pushregs_
0959c     37 00 00 FF 
095a0     44 E4 05 F1 | 	add	objptr, ##28228
095a4     F2 14 02 FB | 	rdlong	arg02, objptr
095a8     03 14 66 F0 | 	shl	arg02, #3
095ac     02 00 00 FF 
095b0     38 E4 85 F1 | 	sub	objptr, ##1080
095b4     F2 14 02 F1 | 	add	arg02, objptr
095b8     0A 1F 02 FB | 	rdlong	local01, arg02
095bc                 | ' 
095bc                 | ' varname$=lparts(ct).part$ 
095bc                 | ' if varnum=0 then return 35
095bc     04 E4 85 F1 | 	sub	objptr, #4
095c0     F2 14 0A FB | 	rdlong	arg02, objptr wz
095c4     35 00 00 FF 
095c8     08 E4 85 F1 | 	sub	objptr, ##27144
095cc     23 FA 05 A6 |  if_e	mov	result1, #35
095d0     4C 01 90 AD |  if_e	jmp	#LR__0842
095d4     01 20 66 F6 | 	neg	local02, #1
095d8                 | ' j=-1
095d8                 | ' for i=0 to varnum-1
095d8     00 22 06 F6 | 	mov	local03, #0
095dc     35 00 00 FF 
095e0     08 E4 05 F1 | 	add	objptr, ##27144
095e4     F2 24 02 FB | 	rdlong	local04, objptr
095e8     35 00 00 FF 
095ec     08 E4 85 F1 | 	sub	objptr, ##27144
095f0                 | LR__0840
095f0     12 23 12 F2 | 	cmp	local03, local04 wc
095f4     38 00 90 3D |  if_ae	jmp	#LR__0841
095f8                 | '   if variables(i).name=varname$ then j=i : exit
095f8     11 15 02 F6 | 	mov	arg02, local03
095fc     04 14 66 F0 | 	shl	arg02, #4
09600     14 00 00 FF 
09604     F8 E5 05 F1 | 	add	objptr, ##10744
09608     F2 14 02 F1 | 	add	arg02, objptr
0960c     0A 13 02 FB | 	rdlong	arg01, arg02
09610     0F 15 02 F6 | 	mov	arg02, local01
09614     14 00 00 FF 
09618     F8 E5 85 F1 | 	sub	objptr, ##10744
0961c     54 72 B1 FD | 	call	#__system___string_cmp
09620     00 FA 0D F2 | 	cmp	result1, #0 wz
09624     11 21 02 A6 |  if_e	mov	local02, local03
09628     01 22 06 51 |  if_ne	add	local03, #1
0962c     C0 FF 9F 5D |  if_ne	jmp	#LR__0840
09630                 | LR__0841
09630                 | ' if j=-1 then return 35
09630     FF FF 7F FF 
09634     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09638     23 FA 05 A6 |  if_e	mov	result1, #35
0963c     E0 00 90 AD |  if_e	jmp	#LR__0842
09640     4A 00 00 FF 
09644     7C E4 05 F1 | 	add	objptr, ##38012
09648     F2 24 02 FB | 	rdlong	local04, objptr
0964c     12 23 02 F6 | 	mov	local03, local04
09650     01 22 66 F0 | 	shl	local03, #1
09654     12 23 02 F1 | 	add	local03, local04
09658     02 22 66 F0 | 	shl	local03, #2
0965c     03 00 00 FF 
09660     00 E4 85 F1 | 	sub	objptr, ##1536
09664     F2 22 02 F1 | 	add	local03, objptr
09668     08 22 06 F1 | 	add	local03, #8
0966c     11 39 68 FC | 	wrlong	#28, local03
09670     03 00 00 FF 
09674     00 E4 05 F1 | 	add	objptr, ##1536
09678     F2 24 02 FB | 	rdlong	local04, objptr
0967c     12 23 02 F6 | 	mov	local03, local04
09680     01 22 66 F0 | 	shl	local03, #1
09684     12 23 02 F1 | 	add	local03, local04
09688     02 22 66 F0 | 	shl	local03, #2
0968c     03 00 00 FF 
09690     00 E4 85 F1 | 	sub	objptr, ##1536
09694     F2 22 02 F1 | 	add	local03, objptr
09698     11 21 62 FC | 	wrlong	local02, local03
0969c     03 00 00 FF 
096a0     00 E4 05 F1 | 	add	objptr, ##1536
096a4     F2 24 02 FB | 	rdlong	local04, objptr
096a8     01 24 06 F1 | 	add	local04, #1
096ac     F2 24 62 FC | 	wrlong	local04, objptr
096b0     12 23 02 F6 | 	mov	local03, local04
096b4     01 22 66 F0 | 	shl	local03, #1
096b8     12 23 02 F1 | 	add	local03, local04
096bc     02 22 66 F0 | 	shl	local03, #2
096c0     03 00 00 FF 
096c4     00 E4 85 F1 | 	sub	objptr, ##1536
096c8     F2 22 02 F1 | 	add	local03, objptr
096cc     08 22 06 F1 | 	add	local03, #8
096d0     11 97 68 FC | 	wrlong	#75, local03
096d4     03 00 00 FF 
096d8     00 E4 05 F1 | 	add	objptr, ##1536
096dc     F2 24 02 FB | 	rdlong	local04, objptr
096e0     12 23 02 F6 | 	mov	local03, local04
096e4     01 22 66 F0 | 	shl	local03, #1
096e8     12 23 02 F1 | 	add	local03, local04
096ec     02 22 66 F0 | 	shl	local03, #2
096f0     03 00 00 FF 
096f4     00 E4 85 F1 | 	sub	objptr, ##1536
096f8     F2 22 02 F1 | 	add	local03, objptr
096fc     11 01 68 FC | 	wrlong	#0, local03
09700     03 00 00 FF 
09704     00 E4 05 F1 | 	add	objptr, ##1536
09708     F2 24 02 FB | 	rdlong	local04, objptr
0970c     01 24 06 F1 | 	add	local04, #1
09710     F2 24 62 FC | 	wrlong	local04, objptr
09714     4A 00 00 FF 
09718     7C E4 85 F1 | 	sub	objptr, ##38012
0971c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0971c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0971c                 | ' return 0
0971c     00 FA 05 F6 | 	mov	result1, #0
09720                 | LR__0842
09720     A7 F0 03 F6 | 	mov	ptra, fp
09724     B2 00 A0 FD | 	call	#popregs_
09728                 | _compile_next_ret
09728     2D 00 64 FD | 	ret
0972c                 | 
0972c                 | ' 
0972c                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0972c                 | ' 
0972c                 | ' function compile_gosub() as ulong
0972c                 | _compile_gosub
0972c     02 4A 05 F6 | 	mov	COUNT_, #2
09730     A8 00 A0 FD | 	call	#pushregs_
09734     4A 00 00 FF 
09738     7C E4 05 F1 | 	add	objptr, ##38012
0973c     F2 1E 02 FB | 	rdlong	local01, objptr
09740     0F 21 02 F6 | 	mov	local02, local01
09744     01 20 66 F0 | 	shl	local02, #1
09748     0F 21 02 F1 | 	add	local02, local01
0974c     02 20 66 F0 | 	shl	local02, #2
09750     03 00 00 FF 
09754     00 E4 85 F1 | 	sub	objptr, ##1536
09758     F2 20 02 F1 | 	add	local02, objptr
0975c     08 20 06 F1 | 	add	local02, #8
09760     10 53 69 FC | 	wrlong	#169, local02
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 20 02 FB | 	rdlong	local02, objptr
09770     01 20 06 F1 | 	add	local02, #1
09774     F2 20 62 FC | 	wrlong	local02, objptr
09778     4A 00 00 FF 
0977c     7C E4 85 F1 | 	sub	objptr, ##38012
09780     0C 00 B0 FD | 	call	#_compile_goto
09784                 | ' compiledline(lineptr).result_type=token_gosub
09784                 | ' lineptr+=1
09784                 | ' err=compile_goto()
09784                 | ' return err
09784     A7 F0 03 F6 | 	mov	ptra, fp
09788     B2 00 A0 FD | 	call	#popregs_
0978c                 | _compile_gosub_ret
0978c     2D 00 64 FD | 	ret
09790                 | 
09790                 | ' 
09790                 | ' '----- compile 'goto' 
09790                 | ' 
09790                 | ' function compile_goto( ) as ulong
09790                 | _compile_goto
09790     03 4A 05 F6 | 	mov	COUNT_, #3
09794     A8 00 A0 FD | 	call	#pushregs_
09798     34 F0 07 F1 | 	add	ptra, #52
0979c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0979c     37 00 00 FF 
097a0     44 E4 05 F1 | 	add	objptr, ##28228
097a4     F2 16 02 FB | 	rdlong	arg03, objptr
097a8     03 16 66 F0 | 	shl	arg03, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 16 02 F1 | 	add	arg03, objptr
097b8     04 16 06 F1 | 	add	arg03, #4
097bc     0B 17 02 FB | 	rdlong	arg03, arg03
097c0     01 00 00 FF 
097c4     00 16 0E F2 | 	cmp	arg03, ##512 wz
097c8     35 00 00 FF 
097cc     0C E4 85 F1 | 	sub	objptr, ##27148
097d0     CC 02 90 5D |  if_ne	jmp	#LR__0855
097d4     37 00 00 FF 
097d8     44 E4 05 F1 | 	add	objptr, ##28228
097dc     F2 16 02 FB | 	rdlong	arg03, objptr
097e0     01 16 06 F1 | 	add	arg03, #1
097e4     03 16 66 F0 | 	shl	arg03, #3
097e8     02 00 00 FF 
097ec     38 E4 85 F1 | 	sub	objptr, ##1080
097f0     F2 16 02 F1 | 	add	arg03, objptr
097f4     04 16 06 F1 | 	add	arg03, #4
097f8     0B 17 02 FB | 	rdlong	arg03, arg03
097fc     FE 17 0E F2 | 	cmp	arg03, #510 wz
09800     35 00 00 FF 
09804     0C E4 85 F1 | 	sub	objptr, ##27148
09808     94 02 90 5D |  if_ne	jmp	#LR__0855
0980c     37 00 00 FF 
09810     44 E4 05 F1 | 	add	objptr, ##28228
09814     F2 16 02 FB | 	rdlong	arg03, objptr
09818     03 16 66 F0 | 	shl	arg03, #3
0981c     02 00 00 FF 
09820     38 E4 85 F1 | 	sub	objptr, ##1080
09824     F2 16 02 F1 | 	add	arg03, objptr
09828     0B 13 02 FB | 	rdlong	arg01, arg03
0982c     00 14 06 F6 | 	mov	arg02, #0
09830     35 00 00 FF 
09834     0C E4 85 F1 | 	sub	objptr, ##27148
09838     3C A2 B1 FD | 	call	#__system____builtin_atoi
0983c     04 4E 05 F1 | 	add	fp, #4
09840     A7 FA 61 FC | 	wrlong	result1, fp
09844     4A 00 00 FF 
09848     7C E4 05 F1 | 	add	objptr, ##38012
0984c     F2 1E 02 FB | 	rdlong	local01, objptr
09850     0F 21 02 F6 | 	mov	local02, local01
09854     01 20 66 F0 | 	shl	local02, #1
09858     0F 21 02 F1 | 	add	local02, local01
0985c     02 20 66 F0 | 	shl	local02, #2
09860     03 00 00 FF 
09864     00 E4 85 F1 | 	sub	objptr, ##1536
09868     F2 20 02 F1 | 	add	local02, objptr
0986c     08 20 06 F1 | 	add	local02, #8
09870     10 9D 68 FC | 	wrlong	#78, local02
09874     03 00 00 FF 
09878     0C E4 05 F1 | 	add	objptr, ##1548
0987c     F2 22 02 FB | 	rdlong	local03, objptr
09880     4A 00 00 FF 
09884     88 E4 85 F1 | 	sub	objptr, ##38024
09888     04 4E 05 F1 | 	add	fp, #4
0988c     A7 22 62 FC | 	wrlong	local03, fp
09890     08 4E 85 F1 | 	sub	fp, #8
09894                 | '   gotoline=val%(lparts(ct).part$) 
09894                 | '   compiledline(lineptr).result_type=token_fast_goto
09894                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09894                 | '   do
09894                 | LR__0850
09894     10 4E 05 F1 | 	add	fp, #16
09898     A7 12 02 F6 | 	mov	arg01, fp
0989c     08 4E 85 F1 | 	sub	fp, #8
098a0     A7 14 02 FB | 	rdlong	arg02, fp
098a4     08 4E 85 F1 | 	sub	fp, #8
098a8     18 16 06 F6 | 	mov	arg03, #24
098ac     0B 00 00 FF 
098b0     CC E4 05 F1 | 	add	objptr, ##5836
098b4     54 63 B1 FD | 	call	#_psram_spin2_read1
098b8     0B 00 00 FF 
098bc     CC E4 85 F1 | 	sub	objptr, ##5836
098c0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
098c0                 | '     if gotoheader(0)<>$FFFFFFFF then
098c0     10 4E 05 F1 | 	add	fp, #16
098c4     A7 22 02 FB | 	rdlong	local03, fp
098c8     10 4E 85 F1 | 	sub	fp, #16
098cc     FF FF 7F FF 
098d0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
098d4     24 00 90 AD |  if_e	jmp	#LR__0851
098d8     08 4E 05 F1 | 	add	fp, #8
098dc     A7 22 02 FB | 	rdlong	local03, fp
098e0     04 4E 05 F1 | 	add	fp, #4
098e4     A7 22 62 FC | 	wrlong	local03, fp
098e8     18 4E 05 F1 | 	add	fp, #24
098ec     A7 22 02 FB | 	rdlong	local03, fp
098f0     1C 4E 85 F1 | 	sub	fp, #28
098f4     A7 22 62 FC | 	wrlong	local03, fp
098f8     08 4E 85 F1 | 	sub	fp, #8
098fc                 | LR__0851
098fc     24 4E 05 F1 | 	add	fp, #36
09900     A7 22 02 FB | 	rdlong	local03, fp
09904     24 4E 85 F1 | 	sub	fp, #36
09908     FF FF 3F FF 
0990c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09910     10 4E 05 51 |  if_ne	add	fp, #16
09914     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09918     10 4E 85 51 |  if_ne	sub	fp, #16
0991c     FF FF 7F 5F 
09920     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09924     1C 00 90 AD |  if_e	jmp	#LR__0852
09928     10 4E 05 F1 | 	add	fp, #16
0992c     A7 22 02 FB | 	rdlong	local03, fp
09930     0C 4E 85 F1 | 	sub	fp, #12
09934     A7 20 02 FB | 	rdlong	local02, fp
09938     04 4E 85 F1 | 	sub	fp, #4
0993c     10 23 0A F2 | 	cmp	local03, local02 wz
09940     50 FF 9F 5D |  if_ne	jmp	#LR__0850
09944                 | LR__0852
09944                 | '   if gotoheader(0)=gotoline then
09944     10 4E 05 F1 | 	add	fp, #16
09948     A7 22 02 FB | 	rdlong	local03, fp
0994c     0C 4E 85 F1 | 	sub	fp, #12
09950     A7 1E 02 FB | 	rdlong	local01, fp
09954     04 4E 85 F1 | 	sub	fp, #4
09958     0F 23 0A F2 | 	cmp	local03, local01 wz
0995c     7C 00 90 5D |  if_ne	jmp	#LR__0853
09960     4A 00 00 FF 
09964     7C E4 05 F1 | 	add	objptr, ##38012
09968     F2 1E 02 FB | 	rdlong	local01, objptr
0996c     0F 21 02 F6 | 	mov	local02, local01
09970     01 20 66 F0 | 	shl	local02, #1
09974     0F 21 02 F1 | 	add	local02, local01
09978     02 20 66 F0 | 	shl	local02, #2
0997c     03 00 00 FF 
09980     00 E4 85 F1 | 	sub	objptr, ##1536
09984     F2 20 02 F1 | 	add	local02, objptr
09988     0C 4E 05 F1 | 	add	fp, #12
0998c     A7 22 02 FB | 	rdlong	local03, fp
09990     10 23 62 FC | 	wrlong	local03, local02
09994     03 00 00 FF 
09998     00 E4 05 F1 | 	add	objptr, ##1536
0999c     F2 1E 02 FB | 	rdlong	local01, objptr
099a0     0F 21 02 F6 | 	mov	local02, local01
099a4     01 20 66 F0 | 	shl	local02, #1
099a8     0F 21 02 F1 | 	add	local02, local01
099ac     02 20 66 F0 | 	shl	local02, #2
099b0     03 00 00 FF 
099b4     00 E4 85 F1 | 	sub	objptr, ##1536
099b8     F2 20 02 F1 | 	add	local02, objptr
099bc     08 4E 85 F1 | 	sub	fp, #8
099c0     A7 22 02 FB | 	rdlong	local03, fp
099c4     04 4E 85 F1 | 	sub	fp, #4
099c8     04 20 06 F1 | 	add	local02, #4
099cc     10 23 62 FC | 	wrlong	local03, local02
099d0     47 00 00 FF 
099d4     7C E4 85 F1 | 	sub	objptr, ##36476
099d8     A4 00 90 FD | 	jmp	#LR__0854
099dc                 | LR__0853
099dc     4A 00 00 FF 
099e0     7C E4 05 F1 | 	add	objptr, ##38012
099e4     F2 1E 02 FB | 	rdlong	local01, objptr
099e8     0F 21 02 F6 | 	mov	local02, local01
099ec     01 20 66 F0 | 	shl	local02, #1
099f0     0F 21 02 F1 | 	add	local02, local01
099f4     02 20 66 F0 | 	shl	local02, #2
099f8     03 00 00 FF 
099fc     00 E4 85 F1 | 	sub	objptr, ##1536
09a00     F2 20 02 F1 | 	add	local02, objptr
09a04     00 00 C0 FF 
09a08     10 01 68 FC | 	wrlong	##-2147483648, local02
09a0c     03 00 00 FF 
09a10     00 E4 05 F1 | 	add	objptr, ##1536
09a14     F2 1E 02 FB | 	rdlong	local01, objptr
09a18     0F 21 02 F6 | 	mov	local02, local01
09a1c     01 20 66 F0 | 	shl	local02, #1
09a20     0F 21 02 F1 | 	add	local02, local01
09a24     02 20 66 F0 | 	shl	local02, #2
09a28     03 00 00 FF 
09a2c     00 E4 85 F1 | 	sub	objptr, ##1536
09a30     F2 20 02 F1 | 	add	local02, objptr
09a34     04 4E 05 F1 | 	add	fp, #4
09a38     A7 22 02 FB | 	rdlong	local03, fp
09a3c     04 4E 85 F1 | 	sub	fp, #4
09a40     04 20 06 F1 | 	add	local02, #4
09a44     10 23 62 FC | 	wrlong	local03, local02
09a48     03 00 00 FF 
09a4c     00 E4 05 F1 | 	add	objptr, ##1536
09a50     F2 1E 02 FB | 	rdlong	local01, objptr
09a54     0F 21 02 F6 | 	mov	local02, local01
09a58     01 20 66 F0 | 	shl	local02, #1
09a5c     0F 21 02 F1 | 	add	local02, local01
09a60     02 20 66 F0 | 	shl	local02, #2
09a64     03 00 00 FF 
09a68     00 E4 85 F1 | 	sub	objptr, ##1536
09a6c     F2 20 02 F1 | 	add	local02, objptr
09a70     08 20 06 F1 | 	add	local02, #8
09a74     10 A7 68 FC | 	wrlong	#83, local02
09a78     47 00 00 FF 
09a7c     7C E4 85 F1 | 	sub	objptr, ##36476
09a80                 | LR__0854
09a80     4A 00 00 FF 
09a84     7C E4 05 F1 | 	add	objptr, ##38012
09a88     F2 22 02 FB | 	rdlong	local03, objptr
09a8c     01 22 06 F1 | 	add	local03, #1
09a90     F2 22 62 FC | 	wrlong	local03, objptr
09a94     4A 00 00 FF 
09a98     7C E4 85 F1 | 	sub	objptr, ##38012
09a9c     D0 00 90 FD | 	jmp	#LR__0856
09aa0                 | LR__0855
09aa0     DC 00 B0 FD | 	call	#_expr
09aa4     30 4E 05 F1 | 	add	fp, #48
09aa8     A7 9E 68 FC | 	wrlong	#79, fp
09aac     08 4E 85 F1 | 	sub	fp, #8
09ab0     A7 00 68 FC | 	wrlong	#0, fp
09ab4     04 4E 05 F1 | 	add	fp, #4
09ab8     A7 22 02 FB | 	rdlong	local03, fp
09abc     04 4E 05 F1 | 	add	fp, #4
09ac0     A7 1E 02 FB | 	rdlong	local01, fp
09ac4     30 4E 85 F1 | 	sub	fp, #48
09ac8     4A 00 00 FF 
09acc     7C E4 05 F1 | 	add	objptr, ##38012
09ad0     F2 20 02 FB | 	rdlong	local02, objptr
09ad4     10 17 02 F6 | 	mov	arg03, local02
09ad8     01 16 66 F0 | 	shl	arg03, #1
09adc     10 17 02 F1 | 	add	arg03, local02
09ae0     02 16 66 F0 | 	shl	arg03, #2
09ae4     03 00 00 FF 
09ae8     00 E4 85 F1 | 	sub	objptr, ##1536
09aec     F2 16 02 F1 | 	add	arg03, objptr
09af0     0B 01 68 FC | 	wrlong	#0, arg03
09af4     03 00 00 FF 
09af8     00 E4 05 F1 | 	add	objptr, ##1536
09afc     F2 20 02 FB | 	rdlong	local02, objptr
09b00     10 17 02 F6 | 	mov	arg03, local02
09b04     01 16 66 F0 | 	shl	arg03, #1
09b08     10 17 02 F1 | 	add	arg03, local02
09b0c     02 16 66 F0 | 	shl	arg03, #2
09b10     03 00 00 FF 
09b14     00 E4 85 F1 | 	sub	objptr, ##1536
09b18     F2 16 02 F1 | 	add	arg03, objptr
09b1c     04 16 06 F1 | 	add	arg03, #4
09b20     0B 23 62 FC | 	wrlong	local03, arg03
09b24     03 00 00 FF 
09b28     00 E4 05 F1 | 	add	objptr, ##1536
09b2c     F2 22 02 FB | 	rdlong	local03, objptr
09b30     11 21 02 F6 | 	mov	local02, local03
09b34     01 20 66 F0 | 	shl	local02, #1
09b38     11 21 02 F1 | 	add	local02, local03
09b3c     02 20 66 F0 | 	shl	local02, #2
09b40     03 00 00 FF 
09b44     00 E4 85 F1 | 	sub	objptr, ##1536
09b48     F2 20 02 F1 | 	add	local02, objptr
09b4c     08 20 06 F1 | 	add	local02, #8
09b50     10 1F 62 FC | 	wrlong	local01, local02
09b54     03 00 00 FF 
09b58     00 E4 05 F1 | 	add	objptr, ##1536
09b5c     F2 22 02 FB | 	rdlong	local03, objptr
09b60     01 22 06 F1 | 	add	local03, #1
09b64     F2 22 62 FC | 	wrlong	local03, objptr
09b68     4A 00 00 FF 
09b6c     7C E4 85 F1 | 	sub	objptr, ##38012
09b70                 | LR__0856
09b70                 | ' return 0
09b70     00 FA 05 F6 | 	mov	result1, #0
09b74     A7 F0 03 F6 | 	mov	ptra, fp
09b78     B2 00 A0 FD | 	call	#popregs_
09b7c                 | _compile_goto_ret
09b7c     2D 00 64 FD | 	ret
09b80                 | 
09b80                 | ' 
09b80                 | ' 
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' 
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' '
09b80                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09b80                 | ' '
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' 
09b80                 | ' function expr() as ulong 
09b80                 | _expr
09b80     07 4A 05 F6 | 	mov	COUNT_, #7
09b84     A8 00 A0 FD | 	call	#pushregs_
09b88                 | _expr_enter
09b88     37 00 00 FF 
09b8c     44 E4 05 F1 | 	add	objptr, ##28228
09b90     F2 24 02 FB | 	rdlong	local04, objptr
09b94     03 24 66 F0 | 	shl	local04, #3
09b98     02 00 00 FF 
09b9c     38 E4 85 F1 | 	sub	objptr, ##1080
09ba0     F2 24 02 F1 | 	add	local04, objptr
09ba4     04 24 06 F1 | 	add	local04, #4
09ba8     12 27 02 FB | 	rdlong	local05, local04
09bac                 | ' 
09bac                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09bac     FE 27 0E F2 | 	cmp	local05, #510 wz
09bb0     35 00 00 FF 
09bb4     0C E4 85 F1 | 	sub	objptr, ##27148
09bb8     C4 00 90 5D |  if_ne	jmp	#LR__0860
09bbc     1D 1E 06 F6 | 	mov	local01, #29
09bc0     FF 22 06 F6 | 	mov	local03, #255
09bc4     0F 29 02 F6 | 	mov	local06, local01
09bc8     10 2B 02 F6 | 	mov	local07, local02
09bcc     11 1F 02 F6 | 	mov	local01, local03
09bd0     4A 00 00 FF 
09bd4     7C E4 05 F1 | 	add	objptr, ##38012
09bd8     F2 26 02 FB | 	rdlong	local05, objptr
09bdc     13 25 02 F6 | 	mov	local04, local05
09be0     01 24 66 F0 | 	shl	local04, #1
09be4     13 25 02 F1 | 	add	local04, local05
09be8     02 24 66 F0 | 	shl	local04, #2
09bec     03 00 00 FF 
09bf0     00 E4 85 F1 | 	sub	objptr, ##1536
09bf4     F2 24 02 F1 | 	add	local04, objptr
09bf8     12 29 62 FC | 	wrlong	local06, local04
09bfc     03 00 00 FF 
09c00     00 E4 05 F1 | 	add	objptr, ##1536
09c04     F2 28 02 FB | 	rdlong	local06, objptr
09c08     14 27 02 F6 | 	mov	local05, local06
09c0c     01 26 66 F0 | 	shl	local05, #1
09c10     14 27 02 F1 | 	add	local05, local06
09c14     02 26 66 F0 | 	shl	local05, #2
09c18     03 00 00 FF 
09c1c     00 E4 85 F1 | 	sub	objptr, ##1536
09c20     F2 26 02 F1 | 	add	local05, objptr
09c24     04 26 06 F1 | 	add	local05, #4
09c28     13 2B 62 FC | 	wrlong	local07, local05
09c2c     03 00 00 FF 
09c30     00 E4 05 F1 | 	add	objptr, ##1536
09c34     F2 2A 02 FB | 	rdlong	local07, objptr
09c38     15 29 02 F6 | 	mov	local06, local07
09c3c     01 28 66 F0 | 	shl	local06, #1
09c40     15 29 02 F1 | 	add	local06, local07
09c44     02 28 66 F0 | 	shl	local06, #2
09c48     03 00 00 FF 
09c4c     00 E4 85 F1 | 	sub	objptr, ##1536
09c50     F2 28 02 F1 | 	add	local06, objptr
09c54     08 28 06 F1 | 	add	local06, #8
09c58     14 1F 62 FC | 	wrlong	local01, local06
09c5c     03 00 00 FF 
09c60     00 E4 05 F1 | 	add	objptr, ##1536
09c64     F2 28 02 FB | 	rdlong	local06, objptr
09c68     01 28 06 F1 | 	add	local06, #1
09c6c     F2 28 62 FC | 	wrlong	local06, objptr
09c70     4A 00 00 FF 
09c74     7C E4 85 F1 | 	sub	objptr, ##38012
09c78     1D FA 05 F6 | 	mov	result1, #29
09c7c     64 01 90 FD | 	jmp	#LR__0863
09c80                 | LR__0860
09c80     00 1E 06 F6 | 	mov	local01, #0
09c84     68 01 B0 FD | 	call	#_addsub
09c88                 | ' t3.result.uresult=0
09c88                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
09c88                 | ' if err>0 then return err
09c88     01 FA 15 F2 | 	cmp	result1, #1 wc
09c8c     54 01 90 3D |  if_ae	jmp	#LR__0863
09c90     37 00 00 FF 
09c94     44 E4 05 F1 | 	add	objptr, ##28228
09c98     F2 24 02 FB | 	rdlong	local04, objptr
09c9c     03 24 66 F0 | 	shl	local04, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 24 02 F1 | 	add	local04, objptr
09cac     04 24 06 F1 | 	add	local04, #4
09cb0     12 27 02 FB | 	rdlong	local05, local04
09cb4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
09cb4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09cb4     35 00 00 FF 
09cb8     0C E4 85 F1 | 	sub	objptr, ##27148
09cbc                 | LR__0861
09cbc     1B 26 0E F2 | 	cmp	local05, #27 wz
09cc0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09cc4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09cc8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09ccc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09cd0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09cd4     08 01 90 5D |  if_ne	jmp	#LR__0862
09cd8     37 00 00 FF 
09cdc     44 E4 05 F1 | 	add	objptr, ##28228
09ce0     F2 28 02 FB | 	rdlong	local06, objptr
09ce4     01 28 06 F1 | 	add	local06, #1
09ce8     F2 28 62 FC | 	wrlong	local06, objptr
09cec     37 00 00 FF 
09cf0     44 E4 85 F1 | 	sub	objptr, ##28228
09cf4     F8 00 B0 FD | 	call	#_addsub
09cf8                 | '   ct+=1
09cf8                 | '   err=addsub() : if err>0 then return err
09cf8     01 FA 15 F2 | 	cmp	result1, #1 wc
09cfc     E4 00 90 3D |  if_ae	jmp	#LR__0863
09d00     13 23 02 F6 | 	mov	local03, local05
09d04     0F 29 02 F6 | 	mov	local06, local01
09d08     10 2B 02 F6 | 	mov	local07, local02
09d0c     11 27 02 F6 | 	mov	local05, local03
09d10     4A 00 00 FF 
09d14     7C E4 05 F1 | 	add	objptr, ##38012
09d18     F2 24 02 FB | 	rdlong	local04, objptr
09d1c     12 FB 01 F6 | 	mov	result1, local04
09d20     01 FA 65 F0 | 	shl	result1, #1
09d24     12 FB 01 F1 | 	add	result1, local04
09d28     02 FA 65 F0 | 	shl	result1, #2
09d2c     03 00 00 FF 
09d30     00 E4 85 F1 | 	sub	objptr, ##1536
09d34     F2 FA 01 F1 | 	add	result1, objptr
09d38     FD 28 62 FC | 	wrlong	local06, result1
09d3c     03 00 00 FF 
09d40     00 E4 05 F1 | 	add	objptr, ##1536
09d44     F2 28 02 FB | 	rdlong	local06, objptr
09d48     14 25 02 F6 | 	mov	local04, local06
09d4c     01 24 66 F0 | 	shl	local04, #1
09d50     14 25 02 F1 | 	add	local04, local06
09d54     02 24 66 F0 | 	shl	local04, #2
09d58     03 00 00 FF 
09d5c     00 E4 85 F1 | 	sub	objptr, ##1536
09d60     F2 24 02 F1 | 	add	local04, objptr
09d64     04 24 06 F1 | 	add	local04, #4
09d68     12 2B 62 FC | 	wrlong	local07, local04
09d6c     03 00 00 FF 
09d70     00 E4 05 F1 | 	add	objptr, ##1536
09d74     F2 2A 02 FB | 	rdlong	local07, objptr
09d78     15 29 02 F6 | 	mov	local06, local07
09d7c     01 28 66 F0 | 	shl	local06, #1
09d80     15 29 02 F1 | 	add	local06, local07
09d84     02 28 66 F0 | 	shl	local06, #2
09d88     03 00 00 FF 
09d8c     00 E4 85 F1 | 	sub	objptr, ##1536
09d90     F2 28 02 F1 | 	add	local06, objptr
09d94     08 28 06 F1 | 	add	local06, #8
09d98     14 27 62 FC | 	wrlong	local05, local06
09d9c     03 00 00 FF 
09da0     00 E4 05 F1 | 	add	objptr, ##1536
09da4     F2 28 02 FB | 	rdlong	local06, objptr
09da8     01 28 06 F1 | 	add	local06, #1
09dac     F2 28 62 FC | 	wrlong	local06, objptr
09db0     13 00 00 FF 
09db4     38 E4 85 F1 | 	sub	objptr, ##9784
09db8     F2 24 02 FB | 	rdlong	local04, objptr
09dbc     03 24 66 F0 | 	shl	local04, #3
09dc0     02 00 00 FF 
09dc4     38 E4 85 F1 | 	sub	objptr, ##1080
09dc8     F2 24 02 F1 | 	add	local04, objptr
09dcc     04 24 06 F1 | 	add	local04, #4
09dd0     12 27 02 FB | 	rdlong	local05, local04
09dd4     35 00 00 FF 
09dd8     0C E4 85 F1 | 	sub	objptr, ##27148
09ddc     DC FE 9F FD | 	jmp	#LR__0861
09de0                 | LR__0862
09de0                 | ' return 0  
09de0     00 FA 05 F6 | 	mov	result1, #0
09de4                 | LR__0863
09de4     A7 F0 03 F6 | 	mov	ptra, fp
09de8     B2 00 A0 FD | 	call	#popregs_
09dec                 | _expr_ret
09dec     2D 00 64 FD | 	ret
09df0                 | 
09df0                 | ' 
09df0                 | ' ' Second level operators : add, sub, logic
09df0                 | ' 
09df0                 | ' function addsub() as ulong
09df0                 | _addsub
09df0     07 4A 05 F6 | 	mov	COUNT_, #7
09df4     A8 00 A0 FD | 	call	#pushregs_
09df8                 | _addsub_enter
09df8     00 1E 06 F6 | 	mov	local01, #0
09dfc     60 01 B0 FD | 	call	#_muldiv
09e00                 | ' 
09e00                 | ' t3.result.uresult=0
09e00                 | ' err=muldiv() : if err>0 then return err           			 
09e00     01 FA 15 F2 | 	cmp	result1, #1 wc
09e04     4C 01 90 3D |  if_ae	jmp	#LR__0872
09e08     37 00 00 FF 
09e0c     44 E4 05 F1 | 	add	objptr, ##28228
09e10     F2 24 02 FB | 	rdlong	local04, objptr
09e14     03 24 66 F0 | 	shl	local04, #3
09e18     02 00 00 FF 
09e1c     38 E4 85 F1 | 	sub	objptr, ##1080
09e20     F2 24 02 F1 | 	add	local04, objptr
09e24     04 24 06 F1 | 	add	local04, #4
09e28     12 27 02 FB | 	rdlong	local05, local04
09e2c                 | ' op = lparts(ct).token				 
09e2c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09e2c     35 00 00 FF 
09e30     0C E4 85 F1 | 	sub	objptr, ##27148
09e34                 | LR__0870
09e34     01 26 0E F2 | 	cmp	local05, #1 wz
09e38     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09e3c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09e40     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09e44     08 01 90 5D |  if_ne	jmp	#LR__0871
09e48     37 00 00 FF 
09e4c     44 E4 05 F1 | 	add	objptr, ##28228
09e50     F2 24 02 FB | 	rdlong	local04, objptr
09e54     01 24 06 F1 | 	add	local04, #1
09e58     F2 24 62 FC | 	wrlong	local04, objptr
09e5c     37 00 00 FF 
09e60     44 E4 85 F1 | 	sub	objptr, ##28228
09e64     F8 00 B0 FD | 	call	#_muldiv
09e68                 | '   ct+=1
09e68                 | '   err=muldiv() : if err>0 then return err   
09e68     01 FA 15 F2 | 	cmp	result1, #1 wc
09e6c     E4 00 90 3D |  if_ae	jmp	#LR__0872
09e70     13 23 02 F6 | 	mov	local03, local05
09e74     0F 29 02 F6 | 	mov	local06, local01
09e78     10 2B 02 F6 | 	mov	local07, local02
09e7c     11 27 02 F6 | 	mov	local05, local03
09e80     4A 00 00 FF 
09e84     7C E4 05 F1 | 	add	objptr, ##38012
09e88     F2 24 02 FB | 	rdlong	local04, objptr
09e8c     12 FB 01 F6 | 	mov	result1, local04
09e90     01 FA 65 F0 | 	shl	result1, #1
09e94     12 FB 01 F1 | 	add	result1, local04
09e98     02 FA 65 F0 | 	shl	result1, #2
09e9c     03 00 00 FF 
09ea0     00 E4 85 F1 | 	sub	objptr, ##1536
09ea4     F2 FA 01 F1 | 	add	result1, objptr
09ea8     FD 28 62 FC | 	wrlong	local06, result1
09eac     03 00 00 FF 
09eb0     00 E4 05 F1 | 	add	objptr, ##1536
09eb4     F2 28 02 FB | 	rdlong	local06, objptr
09eb8     14 25 02 F6 | 	mov	local04, local06
09ebc     01 24 66 F0 | 	shl	local04, #1
09ec0     14 25 02 F1 | 	add	local04, local06
09ec4     02 24 66 F0 | 	shl	local04, #2
09ec8     03 00 00 FF 
09ecc     00 E4 85 F1 | 	sub	objptr, ##1536
09ed0     F2 24 02 F1 | 	add	local04, objptr
09ed4     04 24 06 F1 | 	add	local04, #4
09ed8     12 2B 62 FC | 	wrlong	local07, local04
09edc     03 00 00 FF 
09ee0     00 E4 05 F1 | 	add	objptr, ##1536
09ee4     F2 2A 02 FB | 	rdlong	local07, objptr
09ee8     15 29 02 F6 | 	mov	local06, local07
09eec     01 28 66 F0 | 	shl	local06, #1
09ef0     15 29 02 F1 | 	add	local06, local07
09ef4     02 28 66 F0 | 	shl	local06, #2
09ef8     03 00 00 FF 
09efc     00 E4 85 F1 | 	sub	objptr, ##1536
09f00     F2 28 02 F1 | 	add	local06, objptr
09f04     08 28 06 F1 | 	add	local06, #8
09f08     14 27 62 FC | 	wrlong	local05, local06
09f0c     03 00 00 FF 
09f10     00 E4 05 F1 | 	add	objptr, ##1536
09f14     F2 28 02 FB | 	rdlong	local06, objptr
09f18     01 28 06 F1 | 	add	local06, #1
09f1c     F2 28 62 FC | 	wrlong	local06, objptr
09f20     13 00 00 FF 
09f24     38 E4 85 F1 | 	sub	objptr, ##9784
09f28     F2 24 02 FB | 	rdlong	local04, objptr
09f2c     03 24 66 F0 | 	shl	local04, #3
09f30     02 00 00 FF 
09f34     38 E4 85 F1 | 	sub	objptr, ##1080
09f38     F2 24 02 F1 | 	add	local04, objptr
09f3c     04 24 06 F1 | 	add	local04, #4
09f40     12 27 02 FB | 	rdlong	local05, local04
09f44     35 00 00 FF 
09f48     0C E4 85 F1 | 	sub	objptr, ##27148
09f4c     E4 FE 9F FD | 	jmp	#LR__0870
09f50                 | LR__0871
09f50                 | ' return 0
09f50     00 FA 05 F6 | 	mov	result1, #0
09f54                 | LR__0872
09f54     A7 F0 03 F6 | 	mov	ptra, fp
09f58     B2 00 A0 FD | 	call	#popregs_
09f5c                 | _addsub_ret
09f5c     2D 00 64 FD | 	ret
09f60                 | 
09f60                 | ' 
09f60                 | ' ' Third level operators : mul,div,shift,power
09f60                 | ' 
09f60                 | ' function muldiv() as ulong
09f60                 | _muldiv
09f60     07 4A 05 F6 | 	mov	COUNT_, #7
09f64     A8 00 A0 FD | 	call	#pushregs_
09f68                 | _muldiv_enter
09f68     00 1E 06 F6 | 	mov	local01, #0
09f6c     6C 01 B0 FD | 	call	#_getvalue
09f70                 | ' 
09f70                 | ' t3.result.uresult=0
09f70                 | ' err=getvalue() : if err>0 then return err     
09f70     01 FA 15 F2 | 	cmp	result1, #1 wc
09f74     58 01 90 3D |  if_ae	jmp	#LR__0882
09f78     37 00 00 FF 
09f7c     44 E4 05 F1 | 	add	objptr, ##28228
09f80     F2 24 02 FB | 	rdlong	local04, objptr
09f84     03 24 66 F0 | 	shl	local04, #3
09f88     02 00 00 FF 
09f8c     38 E4 85 F1 | 	sub	objptr, ##1080
09f90     F2 24 02 F1 | 	add	local04, objptr
09f94     04 24 06 F1 | 	add	local04, #4
09f98     12 27 02 FB | 	rdlong	local05, local04
09f9c                 | ' op = lparts(ct).token
09f9c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09f9c     35 00 00 FF 
09fa0     0C E4 85 F1 | 	sub	objptr, ##27148
09fa4                 | LR__0880
09fa4     05 26 0E F2 | 	cmp	local05, #5 wz
09fa8     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09fac     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09fb0     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09fb4     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09fb8     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09fbc     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09fc0     08 01 90 5D |  if_ne	jmp	#LR__0881
09fc4     37 00 00 FF 
09fc8     44 E4 05 F1 | 	add	objptr, ##28228
09fcc     F2 24 02 FB | 	rdlong	local04, objptr
09fd0     01 24 06 F1 | 	add	local04, #1
09fd4     F2 24 62 FC | 	wrlong	local04, objptr
09fd8     37 00 00 FF 
09fdc     44 E4 85 F1 | 	sub	objptr, ##28228
09fe0     F8 00 B0 FD | 	call	#_getvalue
09fe4                 | '   ct+=1
09fe4                 | '   err=getvalue() :if err>0 then return err   
09fe4     01 FA 15 F2 | 	cmp	result1, #1 wc
09fe8     E4 00 90 3D |  if_ae	jmp	#LR__0882
09fec     13 23 02 F6 | 	mov	local03, local05
09ff0     0F 29 02 F6 | 	mov	local06, local01
09ff4     10 2B 02 F6 | 	mov	local07, local02
09ff8     11 27 02 F6 | 	mov	local05, local03
09ffc     4A 00 00 FF 
0a000     7C E4 05 F1 | 	add	objptr, ##38012
0a004     F2 24 02 FB | 	rdlong	local04, objptr
0a008     12 FB 01 F6 | 	mov	result1, local04
0a00c     01 FA 65 F0 | 	shl	result1, #1
0a010     12 FB 01 F1 | 	add	result1, local04
0a014     02 FA 65 F0 | 	shl	result1, #2
0a018     03 00 00 FF 
0a01c     00 E4 85 F1 | 	sub	objptr, ##1536
0a020     F2 FA 01 F1 | 	add	result1, objptr
0a024     FD 28 62 FC | 	wrlong	local06, result1
0a028     03 00 00 FF 
0a02c     00 E4 05 F1 | 	add	objptr, ##1536
0a030     F2 28 02 FB | 	rdlong	local06, objptr
0a034     14 25 02 F6 | 	mov	local04, local06
0a038     01 24 66 F0 | 	shl	local04, #1
0a03c     14 25 02 F1 | 	add	local04, local06
0a040     02 24 66 F0 | 	shl	local04, #2
0a044     03 00 00 FF 
0a048     00 E4 85 F1 | 	sub	objptr, ##1536
0a04c     F2 24 02 F1 | 	add	local04, objptr
0a050     04 24 06 F1 | 	add	local04, #4
0a054     12 2B 62 FC | 	wrlong	local07, local04
0a058     03 00 00 FF 
0a05c     00 E4 05 F1 | 	add	objptr, ##1536
0a060     F2 2A 02 FB | 	rdlong	local07, objptr
0a064     15 29 02 F6 | 	mov	local06, local07
0a068     01 28 66 F0 | 	shl	local06, #1
0a06c     15 29 02 F1 | 	add	local06, local07
0a070     02 28 66 F0 | 	shl	local06, #2
0a074     03 00 00 FF 
0a078     00 E4 85 F1 | 	sub	objptr, ##1536
0a07c     F2 28 02 F1 | 	add	local06, objptr
0a080     08 28 06 F1 | 	add	local06, #8
0a084     14 27 62 FC | 	wrlong	local05, local06
0a088     03 00 00 FF 
0a08c     00 E4 05 F1 | 	add	objptr, ##1536
0a090     F2 28 02 FB | 	rdlong	local06, objptr
0a094     01 28 06 F1 | 	add	local06, #1
0a098     F2 28 62 FC | 	wrlong	local06, objptr
0a09c     13 00 00 FF 
0a0a0     38 E4 85 F1 | 	sub	objptr, ##9784
0a0a4     F2 24 02 FB | 	rdlong	local04, objptr
0a0a8     03 24 66 F0 | 	shl	local04, #3
0a0ac     02 00 00 FF 
0a0b0     38 E4 85 F1 | 	sub	objptr, ##1080
0a0b4     F2 24 02 F1 | 	add	local04, objptr
0a0b8     04 24 06 F1 | 	add	local04, #4
0a0bc     12 27 02 FB | 	rdlong	local05, local04
0a0c0     35 00 00 FF 
0a0c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0c8     D8 FE 9F FD | 	jmp	#LR__0880
0a0cc                 | LR__0881
0a0cc                 | ' return 0
0a0cc     00 FA 05 F6 | 	mov	result1, #0
0a0d0                 | LR__0882
0a0d0     A7 F0 03 F6 | 	mov	ptra, fp
0a0d4     B2 00 A0 FD | 	call	#popregs_
0a0d8                 | _muldiv_ret
0a0d8     2D 00 64 FD | 	ret
0a0dc                 | 
0a0dc                 | ' 
0a0dc                 | ' ' Get a value for operations
0a0dc                 | ' 
0a0dc                 | ' function getvalue()  as ulong
0a0dc                 | _getvalue
0a0dc     0B 4A 05 F6 | 	mov	COUNT_, #11
0a0e0     A8 00 A0 FD | 	call	#pushregs_
0a0e4                 | _getvalue_enter
0a0e4     01 24 06 F6 | 	mov	local04, #1
0a0e8     00 1E 06 F6 | 	mov	local01, #0
0a0ec     1D 22 06 F6 | 	mov	local03, #29
0a0f0     37 00 00 FF 
0a0f4     44 E4 05 F1 | 	add	objptr, ##28228
0a0f8     F2 16 02 FB | 	rdlong	arg03, objptr
0a0fc     03 16 66 F0 | 	shl	arg03, #3
0a100     02 00 00 FF 
0a104     38 E4 85 F1 | 	sub	objptr, ##1080
0a108     F2 16 02 F1 | 	add	arg03, objptr
0a10c     04 16 06 F1 | 	add	arg03, #4
0a110     0B 27 02 FB | 	rdlong	local05, arg03
0a114                 | ' 
0a114                 | ' m=1											' for negative numbers
0a114                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a114                 | ' op=lparts(ct).token
0a114                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a114     02 26 0E F2 | 	cmp	local05, #2 wz
0a118     35 00 00 FF 
0a11c     0C E4 85 F1 | 	sub	objptr, ##27148
0a120     38 00 90 5D |  if_ne	jmp	#LR__0890
0a124     01 24 66 F6 | 	neg	local04, #1
0a128     37 00 00 FF 
0a12c     44 E4 05 F1 | 	add	objptr, ##28228
0a130     F2 26 02 FB | 	rdlong	local05, objptr
0a134     01 26 06 F1 | 	add	local05, #1
0a138     F2 26 62 FC | 	wrlong	local05, objptr
0a13c     03 26 66 F0 | 	shl	local05, #3
0a140     02 00 00 FF 
0a144     38 E4 85 F1 | 	sub	objptr, ##1080
0a148     F2 26 02 F1 | 	add	local05, objptr
0a14c     04 26 06 F1 | 	add	local05, #4
0a150     13 27 02 FB | 	rdlong	local05, local05
0a154     35 00 00 FF 
0a158     0C E4 85 F1 | 	sub	objptr, ##27148
0a15c                 | LR__0890
0a15c                 | ' select case op
0a15c     01 00 00 FF 
0a160     00 26 0E F2 | 	cmp	local05, ##512 wz
0a164     44 00 90 AD |  if_e	jmp	#LR__0891
0a168     01 00 00 FF 
0a16c     01 26 0E F2 | 	cmp	local05, ##513 wz
0a170     90 01 90 AD |  if_e	jmp	#LR__0894
0a174     01 00 00 FF 
0a178     02 26 0E F2 | 	cmp	local05, ##514 wz
0a17c     44 04 90 AD |  if_e	jmp	#LR__0901
0a180     01 00 00 FF 
0a184     03 26 0E F2 | 	cmp	local05, ##515 wz
0a188     A8 05 90 AD |  if_e	jmp	#LR__0904
0a18c     2C 26 0E F2 | 	cmp	local05, #44 wz
0a190     78 07 90 AD |  if_e	jmp	#LR__0909
0a194     01 00 00 FF 
0a198     04 26 0E F2 | 	cmp	local05, ##516 wz
0a19c     70 08 90 AD |  if_e	jmp	#LR__0910
0a1a0     15 26 0E F2 | 	cmp	local05, #21 wz
0a1a4     98 08 90 AD |  if_e	jmp	#LR__0911
0a1a8     10 09 90 FD | 	jmp	#LR__0912
0a1ac                 | LR__0891
0a1ac                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a1ac     01 24 0E F2 | 	cmp	local04, #1 wz
0a1b0     3C 00 90 5D |  if_ne	jmp	#LR__0892
0a1b4     37 00 00 FF 
0a1b8     44 E4 05 F1 | 	add	objptr, ##28228
0a1bc     F2 26 02 FB | 	rdlong	local05, objptr
0a1c0     03 26 66 F0 | 	shl	local05, #3
0a1c4     02 00 00 FF 
0a1c8     38 E4 85 F1 | 	sub	objptr, ##1080
0a1cc     F2 26 02 F1 | 	add	local05, objptr
0a1d0     13 13 02 FB | 	rdlong	arg01, local05
0a1d4     00 14 06 F6 | 	mov	arg02, #0
0a1d8     35 00 00 FF 
0a1dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a1e0     94 98 B1 FD | 	call	#__system____builtin_atoi
0a1e4     FD 24 02 FD | 	qmul	local04, result1
0a1e8     18 1E 62 FD | 	getqx	local01
0a1ec     1C 22 06 F6 | 	mov	local03, #28
0a1f0                 | LR__0892
0a1f0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a1f0     FF FF 7F FF 
0a1f4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a1f8     3C 00 90 5D |  if_ne	jmp	#LR__0893
0a1fc     37 00 00 FF 
0a200     44 E4 05 F1 | 	add	objptr, ##28228
0a204     F2 26 02 FB | 	rdlong	local05, objptr
0a208     03 26 66 F0 | 	shl	local05, #3
0a20c     02 00 00 FF 
0a210     38 E4 85 F1 | 	sub	objptr, ##1080
0a214     F2 26 02 F1 | 	add	local05, objptr
0a218     13 13 02 FB | 	rdlong	arg01, local05
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     35 00 00 FF 
0a224     0C E4 85 F1 | 	sub	objptr, ##27148
0a228     4C 98 B1 FD | 	call	#__system____builtin_atoi
0a22c     FD 24 02 FD | 	qmul	local04, result1
0a230     18 1E 62 FD | 	getqx	local01
0a234     1C 22 06 F6 | 	mov	local03, #28
0a238                 | LR__0893
0a238     0F 29 02 F6 | 	mov	local06, local01
0a23c     10 2B 02 F6 | 	mov	local07, local02
0a240     11 27 02 F6 | 	mov	local05, local03
0a244     4A 00 00 FF 
0a248     7C E4 05 F1 | 	add	objptr, ##38012
0a24c     F2 1E 02 FB | 	rdlong	local01, objptr
0a250     0F 25 02 F6 | 	mov	local04, local01
0a254     01 24 66 F0 | 	shl	local04, #1
0a258     0F 25 02 F1 | 	add	local04, local01
0a25c     02 24 66 F0 | 	shl	local04, #2
0a260     03 00 00 FF 
0a264     00 E4 85 F1 | 	sub	objptr, ##1536
0a268     F2 24 02 F1 | 	add	local04, objptr
0a26c     12 29 62 FC | 	wrlong	local06, local04
0a270     03 00 00 FF 
0a274     00 E4 05 F1 | 	add	objptr, ##1536
0a278     F2 28 02 FB | 	rdlong	local06, objptr
0a27c     14 1F 02 F6 | 	mov	local01, local06
0a280     01 1E 66 F0 | 	shl	local01, #1
0a284     14 1F 02 F1 | 	add	local01, local06
0a288     02 1E 66 F0 | 	shl	local01, #2
0a28c     03 00 00 FF 
0a290     00 E4 85 F1 | 	sub	objptr, ##1536
0a294     F2 1E 02 F1 | 	add	local01, objptr
0a298     04 1E 06 F1 | 	add	local01, #4
0a29c     0F 2B 62 FC | 	wrlong	local07, local01
0a2a0     03 00 00 FF 
0a2a4     00 E4 05 F1 | 	add	objptr, ##1536
0a2a8     F2 2A 02 FB | 	rdlong	local07, objptr
0a2ac     15 29 02 F6 | 	mov	local06, local07
0a2b0     01 28 66 F0 | 	shl	local06, #1
0a2b4     15 29 02 F1 | 	add	local06, local07
0a2b8     02 28 66 F0 | 	shl	local06, #2
0a2bc     03 00 00 FF 
0a2c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2c4     F2 28 02 F1 | 	add	local06, objptr
0a2c8     08 28 06 F1 | 	add	local06, #8
0a2cc     14 27 62 FC | 	wrlong	local05, local06
0a2d0     03 00 00 FF 
0a2d4     00 E4 05 F1 | 	add	objptr, ##1536
0a2d8     F2 28 02 FB | 	rdlong	local06, objptr
0a2dc     01 28 06 F1 | 	add	local06, #1
0a2e0     F2 28 62 FC | 	wrlong	local06, objptr
0a2e4     13 00 00 FF 
0a2e8     38 E4 85 F1 | 	sub	objptr, ##9784
0a2ec     F2 28 02 FB | 	rdlong	local06, objptr
0a2f0     01 28 06 F1 | 	add	local06, #1
0a2f4     F2 28 62 FC | 	wrlong	local06, objptr
0a2f8     37 00 00 FF 
0a2fc     44 E4 85 F1 | 	sub	objptr, ##28228
0a300     E4 07 90 FD | 	jmp	#LR__0913
0a304                 | LR__0894
0a304                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a304     37 00 00 FF 
0a308     44 E4 05 F1 | 	add	objptr, ##28228
0a30c     F2 16 02 FB | 	rdlong	arg03, objptr
0a310     03 16 66 F0 | 	shl	arg03, #3
0a314     02 00 00 FF 
0a318     38 E4 85 F1 | 	sub	objptr, ##1080
0a31c     F2 16 02 F1 | 	add	arg03, objptr
0a320     0B 13 02 FB | 	rdlong	arg01, arg03
0a324     01 14 06 F6 | 	mov	arg02, #1
0a328     35 00 00 FF 
0a32c     0C E4 85 F1 | 	sub	objptr, ##27148
0a330     94 85 B1 FD | 	call	#__system__Left_S
0a334     FD 12 02 F6 | 	mov	arg01, result1
0a338     83 01 00 FF 
0a33c     44 15 06 F6 | 	mov	arg02, ##@LR__5410
0a340     30 65 B1 FD | 	call	#__system___string_cmp
0a344     00 FA 0D F2 | 	cmp	result1, #0 wz
0a348     94 00 90 5D |  if_ne	jmp	#LR__0897
0a34c     37 00 00 FF 
0a350     44 E4 05 F1 | 	add	objptr, ##28228
0a354     F2 2A 02 FB | 	rdlong	local07, objptr
0a358     15 29 02 F6 | 	mov	local06, local07
0a35c     03 28 66 F0 | 	shl	local06, #3
0a360     02 00 00 FF 
0a364     38 E4 85 F1 | 	sub	objptr, ##1080
0a368     F2 28 02 F1 | 	add	local06, objptr
0a36c     83 01 00 FF 
0a370     46 27 06 F6 | 	mov	local05, ##@LR__5411
0a374     03 2A 66 F0 | 	shl	local07, #3
0a378     F2 2A 02 F1 | 	add	local07, objptr
0a37c     15 2B 02 FB | 	rdlong	local07, local07
0a380     02 00 00 FF 
0a384     38 E4 05 F1 | 	add	objptr, ##1080
0a388     F2 1E 02 FB | 	rdlong	local01, objptr
0a38c     03 1E 66 F0 | 	shl	local01, #3
0a390     02 00 00 FF 
0a394     38 E4 85 F1 | 	sub	objptr, ##1080
0a398     F2 1E 02 F1 | 	add	local01, objptr
0a39c     0F 13 02 FB | 	rdlong	arg01, local01
0a3a0     35 00 00 FF 
0a3a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a3a8     09 2D 02 F6 | 	mov	local08, arg01
0a3ac     97 06 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0a3b0                 | LR__0895
0a3b0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a3b4     01 2C 06 51 |  if_ne	add	local08, #1
0a3b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0895
0a3bc                 | LR__0896
0a3bc     09 2D 82 F1 | 	sub	local08, arg01
0a3c0     16 15 02 F6 | 	mov	arg02, local08
0a3c4     01 14 86 F1 | 	sub	arg02, #1
0a3c8     15 13 02 F6 | 	mov	arg01, local07
0a3cc     80 85 B1 FD | 	call	#__system__Right_S
0a3d0     FD 14 02 F6 | 	mov	arg02, result1
0a3d4     13 13 02 F6 | 	mov	arg01, local05
0a3d8     CC 64 B1 FD | 	call	#__system___string_concat
0a3dc     14 FB 61 FC | 	wrlong	result1, local06
0a3e0                 | LR__0897
0a3e0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a3e0     37 00 00 FF 
0a3e4     44 E4 05 F1 | 	add	objptr, ##28228
0a3e8     F2 16 02 FB | 	rdlong	arg03, objptr
0a3ec     03 16 66 F0 | 	shl	arg03, #3
0a3f0     02 00 00 FF 
0a3f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a3f8     F2 16 02 F1 | 	add	arg03, objptr
0a3fc     0B 13 02 FB | 	rdlong	arg01, arg03
0a400     01 14 06 F6 | 	mov	arg02, #1
0a404     35 00 00 FF 
0a408     0C E4 85 F1 | 	sub	objptr, ##27148
0a40c     B8 84 B1 FD | 	call	#__system__Left_S
0a410     FD 12 02 F6 | 	mov	arg01, result1
0a414     83 01 00 FF 
0a418     49 15 06 F6 | 	mov	arg02, ##@LR__5412
0a41c     54 64 B1 FD | 	call	#__system___string_cmp
0a420     00 FA 0D F2 | 	cmp	result1, #0 wz
0a424     94 00 90 5D |  if_ne	jmp	#LR__0900
0a428     37 00 00 FF 
0a42c     44 E4 05 F1 | 	add	objptr, ##28228
0a430     F2 2A 02 FB | 	rdlong	local07, objptr
0a434     15 29 02 F6 | 	mov	local06, local07
0a438     03 28 66 F0 | 	shl	local06, #3
0a43c     02 00 00 FF 
0a440     38 E4 85 F1 | 	sub	objptr, ##1080
0a444     F2 28 02 F1 | 	add	local06, objptr
0a448     83 01 00 FF 
0a44c     4B 27 06 F6 | 	mov	local05, ##@LR__5413
0a450     03 2A 66 F0 | 	shl	local07, #3
0a454     F2 2A 02 F1 | 	add	local07, objptr
0a458     15 2B 02 FB | 	rdlong	local07, local07
0a45c     02 00 00 FF 
0a460     38 E4 05 F1 | 	add	objptr, ##1080
0a464     F2 1E 02 FB | 	rdlong	local01, objptr
0a468     03 1E 66 F0 | 	shl	local01, #3
0a46c     02 00 00 FF 
0a470     38 E4 85 F1 | 	sub	objptr, ##1080
0a474     F2 1E 02 F1 | 	add	local01, objptr
0a478     0F 13 02 FB | 	rdlong	arg01, local01
0a47c     35 00 00 FF 
0a480     0C E4 85 F1 | 	sub	objptr, ##27148
0a484     09 2D 02 F6 | 	mov	local08, arg01
0a488     97 06 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0a48c                 | LR__0898
0a48c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a490     01 2C 06 51 |  if_ne	add	local08, #1
0a494     F4 FF 9F 5D |  if_ne	jmp	#LR__0898
0a498                 | LR__0899
0a498     09 2D 82 F1 | 	sub	local08, arg01
0a49c     16 15 02 F6 | 	mov	arg02, local08
0a4a0     01 14 86 F1 | 	sub	arg02, #1
0a4a4     15 13 02 F6 | 	mov	arg01, local07
0a4a8     A4 84 B1 FD | 	call	#__system__Right_S
0a4ac     FD 14 02 F6 | 	mov	arg02, result1
0a4b0     13 13 02 F6 | 	mov	arg01, local05
0a4b4     F0 63 B1 FD | 	call	#__system___string_concat
0a4b8     14 FB 61 FC | 	wrlong	result1, local06
0a4bc                 | LR__0900
0a4bc     37 00 00 FF 
0a4c0     44 E4 05 F1 | 	add	objptr, ##28228
0a4c4     F2 28 02 FB | 	rdlong	local06, objptr
0a4c8     03 28 66 F0 | 	shl	local06, #3
0a4cc     02 00 00 FF 
0a4d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a4d4     F2 28 02 F1 | 	add	local06, objptr
0a4d8     14 13 02 FB | 	rdlong	arg01, local06
0a4dc     00 14 06 F6 | 	mov	arg02, #0
0a4e0     35 00 00 FF 
0a4e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4e8     8C 95 B1 FD | 	call	#__system____builtin_atoi
0a4ec     FD 24 02 FD | 	qmul	local04, result1
0a4f0     4A 00 00 FF 
0a4f4     7C E4 05 F1 | 	add	objptr, ##38012
0a4f8     F2 28 02 FB | 	rdlong	local06, objptr
0a4fc     14 2F 02 F6 | 	mov	local09, local06
0a500     01 2E 66 F0 | 	shl	local09, #1
0a504     14 2F 02 F1 | 	add	local09, local06
0a508     02 2E 66 F0 | 	shl	local09, #2
0a50c     03 00 00 FF 
0a510     00 E4 85 F1 | 	sub	objptr, ##1536
0a514     F2 2E 02 F1 | 	add	local09, objptr
0a518     03 00 00 FF 
0a51c     00 E4 05 F1 | 	add	objptr, ##1536
0a520     18 1E 62 FD | 	getqx	local01
0a524     1C 22 06 F6 | 	mov	local03, #28
0a528     0F 29 02 F6 | 	mov	local06, local01
0a52c     10 2B 02 F6 | 	mov	local07, local02
0a530     17 29 62 FC | 	wrlong	local06, local09
0a534     11 2F 02 F6 | 	mov	local09, local03
0a538     F2 28 02 FB | 	rdlong	local06, objptr
0a53c     14 27 02 F6 | 	mov	local05, local06
0a540     01 26 66 F0 | 	shl	local05, #1
0a544     14 27 02 F1 | 	add	local05, local06
0a548     02 26 66 F0 | 	shl	local05, #2
0a54c     03 00 00 FF 
0a550     00 E4 85 F1 | 	sub	objptr, ##1536
0a554     F2 26 02 F1 | 	add	local05, objptr
0a558     04 26 06 F1 | 	add	local05, #4
0a55c     13 2B 62 FC | 	wrlong	local07, local05
0a560     03 00 00 FF 
0a564     00 E4 05 F1 | 	add	objptr, ##1536
0a568     F2 2A 02 FB | 	rdlong	local07, objptr
0a56c     15 29 02 F6 | 	mov	local06, local07
0a570     01 28 66 F0 | 	shl	local06, #1
0a574     15 29 02 F1 | 	add	local06, local07
0a578     02 28 66 F0 | 	shl	local06, #2
0a57c     03 00 00 FF 
0a580     00 E4 85 F1 | 	sub	objptr, ##1536
0a584     F2 28 02 F1 | 	add	local06, objptr
0a588     08 28 06 F1 | 	add	local06, #8
0a58c     14 2F 62 FC | 	wrlong	local09, local06
0a590     03 00 00 FF 
0a594     00 E4 05 F1 | 	add	objptr, ##1536
0a598     F2 28 02 FB | 	rdlong	local06, objptr
0a59c     01 28 06 F1 | 	add	local06, #1
0a5a0     F2 28 62 FC | 	wrlong	local06, objptr
0a5a4     13 00 00 FF 
0a5a8     38 E4 85 F1 | 	sub	objptr, ##9784
0a5ac     F2 28 02 FB | 	rdlong	local06, objptr
0a5b0     01 28 06 F1 | 	add	local06, #1
0a5b4     F2 28 62 FC | 	wrlong	local06, objptr
0a5b8     37 00 00 FF 
0a5bc     44 E4 85 F1 | 	sub	objptr, ##28228
0a5c0     24 05 90 FD | 	jmp	#LR__0913
0a5c4                 | LR__0901
0a5c4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a5c4     01 24 0E F2 | 	cmp	local04, #1 wz
0a5c8     48 00 90 5D |  if_ne	jmp	#LR__0902
0a5cc     00 C0 1F FF 
0a5d0     00 28 06 F6 | 	mov	local06, ##1065353216
0a5d4     37 00 00 FF 
0a5d8     44 E4 05 F1 | 	add	objptr, ##28228
0a5dc     F2 2E 02 FB | 	rdlong	local09, objptr
0a5e0     03 2E 66 F0 | 	shl	local09, #3
0a5e4     02 00 00 FF 
0a5e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a5ec     F2 2E 02 F1 | 	add	local09, objptr
0a5f0     17 13 02 FB | 	rdlong	arg01, local09
0a5f4     35 00 00 FF 
0a5f8     0C E4 85 F1 | 	sub	objptr, ##27148
0a5fc     0C 96 B1 FD | 	call	#__system____builtin_atof
0a600     FD 14 02 F6 | 	mov	arg02, result1
0a604     14 13 02 F6 | 	mov	arg01, local06
0a608     F4 8D B1 FD | 	call	#__system___float_mul
0a60c     FD 1E 02 F6 | 	mov	local01, result1
0a610     1E 22 06 F6 | 	mov	local03, #30
0a614                 | LR__0902
0a614                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a614     FF FF 7F FF 
0a618     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a61c     48 00 90 5D |  if_ne	jmp	#LR__0903
0a620     00 C0 5F FF 
0a624     00 28 06 F6 | 	mov	local06, ##-1082130432
0a628     37 00 00 FF 
0a62c     44 E4 05 F1 | 	add	objptr, ##28228
0a630     F2 2E 02 FB | 	rdlong	local09, objptr
0a634     03 2E 66 F0 | 	shl	local09, #3
0a638     02 00 00 FF 
0a63c     38 E4 85 F1 | 	sub	objptr, ##1080
0a640     F2 2E 02 F1 | 	add	local09, objptr
0a644     17 13 02 FB | 	rdlong	arg01, local09
0a648     35 00 00 FF 
0a64c     0C E4 85 F1 | 	sub	objptr, ##27148
0a650     B8 95 B1 FD | 	call	#__system____builtin_atof
0a654     FD 14 02 F6 | 	mov	arg02, result1
0a658     14 13 02 F6 | 	mov	arg01, local06
0a65c     A0 8D B1 FD | 	call	#__system___float_mul
0a660     FD 1E 02 F6 | 	mov	local01, result1
0a664     1E 22 06 F6 | 	mov	local03, #30
0a668                 | LR__0903
0a668     0F 29 02 F6 | 	mov	local06, local01
0a66c     10 2B 02 F6 | 	mov	local07, local02
0a670     11 27 02 F6 | 	mov	local05, local03
0a674     4A 00 00 FF 
0a678     7C E4 05 F1 | 	add	objptr, ##38012
0a67c     F2 1E 02 FB | 	rdlong	local01, objptr
0a680     0F 2F 02 F6 | 	mov	local09, local01
0a684     01 2E 66 F0 | 	shl	local09, #1
0a688     0F 2F 02 F1 | 	add	local09, local01
0a68c     02 2E 66 F0 | 	shl	local09, #2
0a690     03 00 00 FF 
0a694     00 E4 85 F1 | 	sub	objptr, ##1536
0a698     F2 2E 02 F1 | 	add	local09, objptr
0a69c     17 29 62 FC | 	wrlong	local06, local09
0a6a0     03 00 00 FF 
0a6a4     00 E4 05 F1 | 	add	objptr, ##1536
0a6a8     F2 2E 02 FB | 	rdlong	local09, objptr
0a6ac     17 29 02 F6 | 	mov	local06, local09
0a6b0     01 28 66 F0 | 	shl	local06, #1
0a6b4     17 29 02 F1 | 	add	local06, local09
0a6b8     02 28 66 F0 | 	shl	local06, #2
0a6bc     03 00 00 FF 
0a6c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6c4     F2 28 02 F1 | 	add	local06, objptr
0a6c8     04 28 06 F1 | 	add	local06, #4
0a6cc     14 2B 62 FC | 	wrlong	local07, local06
0a6d0     03 00 00 FF 
0a6d4     00 E4 05 F1 | 	add	objptr, ##1536
0a6d8     F2 2E 02 FB | 	rdlong	local09, objptr
0a6dc     17 2B 02 F6 | 	mov	local07, local09
0a6e0     01 2A 66 F0 | 	shl	local07, #1
0a6e4     17 2B 02 F1 | 	add	local07, local09
0a6e8     02 2A 66 F0 | 	shl	local07, #2
0a6ec     03 00 00 FF 
0a6f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f4     F2 2A 02 F1 | 	add	local07, objptr
0a6f8     08 2A 06 F1 | 	add	local07, #8
0a6fc     15 27 62 FC | 	wrlong	local05, local07
0a700     03 00 00 FF 
0a704     00 E4 05 F1 | 	add	objptr, ##1536
0a708     F2 28 02 FB | 	rdlong	local06, objptr
0a70c     01 28 06 F1 | 	add	local06, #1
0a710     F2 28 62 FC | 	wrlong	local06, objptr
0a714     13 00 00 FF 
0a718     38 E4 85 F1 | 	sub	objptr, ##9784
0a71c     F2 28 02 FB | 	rdlong	local06, objptr
0a720     01 28 06 F1 | 	add	local06, #1
0a724     F2 28 62 FC | 	wrlong	local06, objptr
0a728     37 00 00 FF 
0a72c     44 E4 85 F1 | 	sub	objptr, ##28228
0a730     B4 03 90 FD | 	jmp	#LR__0913
0a734                 | LR__0904
0a734     37 00 00 FF 
0a738     44 E4 05 F1 | 	add	objptr, ##28228
0a73c     F2 16 02 FB | 	rdlong	arg03, objptr
0a740     03 16 66 F0 | 	shl	arg03, #3
0a744     02 00 00 FF 
0a748     38 E4 85 F1 | 	sub	objptr, ##1080
0a74c     F2 16 02 F1 | 	add	arg03, objptr
0a750     0B 13 02 FB | 	rdlong	arg01, arg03
0a754     35 00 00 FF 
0a758     0C E4 85 F1 | 	sub	objptr, ##27148
0a75c     09 2D 02 F6 | 	mov	local08, arg01
0a760     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a764                 | LR__0905
0a764     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a768     01 2C 06 51 |  if_ne	add	local08, #1
0a76c     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a770                 | LR__0906
0a770     09 2D 82 F1 | 	sub	local08, arg01
0a774     16 FB 01 F6 | 	mov	result1, local08
0a778     51 00 00 FF 
0a77c     F8 E5 05 F1 | 	add	objptr, ##41976
0a780     F2 FA 61 FC | 	wrlong	result1, objptr
0a784     4C E4 85 F1 | 	sub	objptr, #76
0a788     F2 12 02 FB | 	rdlong	arg01, objptr
0a78c     FD 12 82 F1 | 	sub	arg01, result1
0a790     04 12 86 F1 | 	sub	arg01, #4
0a794     03 12 26 F5 | 	andn	arg01, #3
0a798     F2 12 62 FC | 	wrlong	arg01, objptr
0a79c     4C E4 05 F1 | 	add	objptr, #76
0a7a0     F2 14 02 FB | 	rdlong	arg02, objptr
0a7a4     51 00 00 FF 
0a7a8     F8 E5 85 F1 | 	sub	objptr, ##41976
0a7ac     70 2C B1 FD | 	call	#_pslpoke
0a7b0                 | '     pslpoke memtop,l
0a7b0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a7b0     01 30 06 F6 | 	mov	local10, #1
0a7b4     51 00 00 FF 
0a7b8     F8 E5 05 F1 | 	add	objptr, ##41976
0a7bc     F2 32 02 FB | 	rdlong	local11, objptr
0a7c0     51 00 00 FF 
0a7c4     F8 E5 85 F1 | 	sub	objptr, ##41976
0a7c8     01 32 06 F1 | 	add	local11, #1
0a7cc                 | LR__0907
0a7cc     19 31 52 F2 | 	cmps	local10, local11 wc
0a7d0     5C 00 90 3D |  if_ae	jmp	#LR__0908
0a7d4     51 00 00 FF 
0a7d8     AC E5 05 F1 | 	add	objptr, ##41900
0a7dc     F2 2A 02 FB | 	rdlong	local07, objptr
0a7e0     03 2A 06 F1 | 	add	local07, #3
0a7e4     18 2B 02 F1 | 	add	local07, local10
0a7e8     1A 00 00 FF 
0a7ec     68 E5 85 F1 | 	sub	objptr, ##13672
0a7f0     F2 2E 02 FB | 	rdlong	local09, objptr
0a7f4     03 2E 66 F0 | 	shl	local09, #3
0a7f8     02 00 00 FF 
0a7fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a800     F2 2E 02 F1 | 	add	local09, objptr
0a804     17 13 02 FB | 	rdlong	arg01, local09
0a808     18 15 02 F6 | 	mov	arg02, local10
0a80c     01 16 06 F6 | 	mov	arg03, #1
0a810     35 00 00 FF 
0a814     0C E4 85 F1 | 	sub	objptr, ##27148
0a818     C4 81 B1 FD | 	call	#__system__Mid_S
0a81c     FD 14 C2 FA | 	rdbyte	arg02, result1
0a820     15 13 02 F6 | 	mov	arg01, local07
0a824     88 2C B1 FD | 	call	#_pspoke
0a828     01 30 06 F1 | 	add	local10, #1
0a82c     9C FF 9F FD | 	jmp	#LR__0907
0a830                 | LR__0908
0a830     51 00 00 FF 
0a834     AC E5 05 F1 | 	add	objptr, ##41900
0a838     F2 1E 02 FB | 	rdlong	local01, objptr
0a83c     2B 22 06 F6 | 	mov	local03, #43
0a840     0F 29 02 F6 | 	mov	local06, local01
0a844     10 2B 02 F6 | 	mov	local07, local02
0a848     11 33 02 F6 | 	mov	local11, local03
0a84c     07 00 00 FF 
0a850     30 E5 85 F1 | 	sub	objptr, ##3888
0a854     F2 30 02 FB | 	rdlong	local10, objptr
0a858     18 2F 02 F6 | 	mov	local09, local10
0a85c     01 2E 66 F0 | 	shl	local09, #1
0a860     18 2F 02 F1 | 	add	local09, local10
0a864     02 2E 66 F0 | 	shl	local09, #2
0a868     03 00 00 FF 
0a86c     00 E4 85 F1 | 	sub	objptr, ##1536
0a870     F2 2E 02 F1 | 	add	local09, objptr
0a874     17 29 62 FC | 	wrlong	local06, local09
0a878     03 00 00 FF 
0a87c     00 E4 05 F1 | 	add	objptr, ##1536
0a880     F2 30 02 FB | 	rdlong	local10, objptr
0a884     18 2F 02 F6 | 	mov	local09, local10
0a888     01 2E 66 F0 | 	shl	local09, #1
0a88c     18 2F 02 F1 | 	add	local09, local10
0a890     02 2E 66 F0 | 	shl	local09, #2
0a894     03 00 00 FF 
0a898     00 E4 85 F1 | 	sub	objptr, ##1536
0a89c     F2 2E 02 F1 | 	add	local09, objptr
0a8a0     04 2E 06 F1 | 	add	local09, #4
0a8a4     17 2B 62 FC | 	wrlong	local07, local09
0a8a8     03 00 00 FF 
0a8ac     00 E4 05 F1 | 	add	objptr, ##1536
0a8b0     F2 30 02 FB | 	rdlong	local10, objptr
0a8b4     18 2F 02 F6 | 	mov	local09, local10
0a8b8     01 2E 66 F0 | 	shl	local09, #1
0a8bc     18 2F 02 F1 | 	add	local09, local10
0a8c0     02 2E 66 F0 | 	shl	local09, #2
0a8c4     03 00 00 FF 
0a8c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a8cc     F2 2E 02 F1 | 	add	local09, objptr
0a8d0     08 2E 06 F1 | 	add	local09, #8
0a8d4     17 33 62 FC | 	wrlong	local11, local09
0a8d8     03 00 00 FF 
0a8dc     00 E4 05 F1 | 	add	objptr, ##1536
0a8e0     F2 28 02 FB | 	rdlong	local06, objptr
0a8e4     01 28 06 F1 | 	add	local06, #1
0a8e8     F2 28 62 FC | 	wrlong	local06, objptr
0a8ec     13 00 00 FF 
0a8f0     38 E4 85 F1 | 	sub	objptr, ##9784
0a8f4     F2 28 02 FB | 	rdlong	local06, objptr
0a8f8     01 28 06 F1 | 	add	local06, #1
0a8fc     F2 28 62 FC | 	wrlong	local06, objptr
0a900     37 00 00 FF 
0a904     44 E4 85 F1 | 	sub	objptr, ##28228
0a908     DC 01 90 FD | 	jmp	#LR__0913
0a90c                 | LR__0909
0a90c     2C 22 06 F6 | 	mov	local03, #44
0a910     37 00 00 FF 
0a914     44 E4 05 F1 | 	add	objptr, ##28228
0a918     F2 28 02 FB | 	rdlong	local06, objptr
0a91c     03 28 66 F0 | 	shl	local06, #3
0a920     02 00 00 FF 
0a924     38 E4 85 F1 | 	sub	objptr, ##1080
0a928     F2 28 02 F1 | 	add	local06, objptr
0a92c     14 13 02 FB | 	rdlong	arg01, local06
0a930     00 14 06 F6 | 	mov	arg02, #0
0a934     35 00 00 FF 
0a938     0C E4 85 F1 | 	sub	objptr, ##27148
0a93c     38 91 B1 FD | 	call	#__system____builtin_atoi
0a940     FD 1E 02 F6 | 	mov	local01, result1
0a944     0F 29 02 F6 | 	mov	local06, local01
0a948     10 2B 02 F6 | 	mov	local07, local02
0a94c     11 33 02 F6 | 	mov	local11, local03
0a950     4A 00 00 FF 
0a954     7C E4 05 F1 | 	add	objptr, ##38012
0a958     F2 30 02 FB | 	rdlong	local10, objptr
0a95c     18 2F 02 F6 | 	mov	local09, local10
0a960     01 2E 66 F0 | 	shl	local09, #1
0a964     18 2F 02 F1 | 	add	local09, local10
0a968     02 2E 66 F0 | 	shl	local09, #2
0a96c     03 00 00 FF 
0a970     00 E4 85 F1 | 	sub	objptr, ##1536
0a974     F2 2E 02 F1 | 	add	local09, objptr
0a978     17 29 62 FC | 	wrlong	local06, local09
0a97c     03 00 00 FF 
0a980     00 E4 05 F1 | 	add	objptr, ##1536
0a984     F2 30 02 FB | 	rdlong	local10, objptr
0a988     18 2F 02 F6 | 	mov	local09, local10
0a98c     01 2E 66 F0 | 	shl	local09, #1
0a990     18 2F 02 F1 | 	add	local09, local10
0a994     02 2E 66 F0 | 	shl	local09, #2
0a998     03 00 00 FF 
0a99c     00 E4 85 F1 | 	sub	objptr, ##1536
0a9a0     F2 2E 02 F1 | 	add	local09, objptr
0a9a4     04 2E 06 F1 | 	add	local09, #4
0a9a8     17 2B 62 FC | 	wrlong	local07, local09
0a9ac     03 00 00 FF 
0a9b0     00 E4 05 F1 | 	add	objptr, ##1536
0a9b4     F2 30 02 FB | 	rdlong	local10, objptr
0a9b8     18 2F 02 F6 | 	mov	local09, local10
0a9bc     01 2E 66 F0 | 	shl	local09, #1
0a9c0     18 2F 02 F1 | 	add	local09, local10
0a9c4     02 2E 66 F0 | 	shl	local09, #2
0a9c8     03 00 00 FF 
0a9cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a9d0     F2 2E 02 F1 | 	add	local09, objptr
0a9d4     08 2E 06 F1 | 	add	local09, #8
0a9d8     17 33 62 FC | 	wrlong	local11, local09
0a9dc     03 00 00 FF 
0a9e0     00 E4 05 F1 | 	add	objptr, ##1536
0a9e4     F2 28 02 FB | 	rdlong	local06, objptr
0a9e8     01 28 06 F1 | 	add	local06, #1
0a9ec     F2 28 62 FC | 	wrlong	local06, objptr
0a9f0     13 00 00 FF 
0a9f4     38 E4 85 F1 | 	sub	objptr, ##9784
0a9f8     F2 28 02 FB | 	rdlong	local06, objptr
0a9fc     01 28 06 F1 | 	add	local06, #1
0aa00     F2 28 62 FC | 	wrlong	local06, objptr
0aa04     37 00 00 FF 
0aa08     44 E4 85 F1 | 	sub	objptr, ##28228
0aa0c     D8 00 90 FD | 	jmp	#LR__0913
0aa10                 | LR__0910
0aa10     12 13 02 F6 | 	mov	arg01, local04
0aa14     24 04 B0 FD | 	call	#_getvar
0aa18     37 00 00 FF 
0aa1c     44 E4 05 F1 | 	add	objptr, ##28228
0aa20     F2 28 02 FB | 	rdlong	local06, objptr
0aa24     01 28 06 F1 | 	add	local06, #1
0aa28     F2 28 62 FC | 	wrlong	local06, objptr
0aa2c     37 00 00 FF 
0aa30     44 E4 85 F1 | 	sub	objptr, ##28228
0aa34                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0aa34     01 FA 55 F2 | 	cmps	result1, #1 wc
0aa38     B0 00 90 3D |  if_ae	jmp	#LR__0914
0aa3c     A8 00 90 FD | 	jmp	#LR__0913
0aa40                 | LR__0911
0aa40     37 00 00 FF 
0aa44     44 E4 05 F1 | 	add	objptr, ##28228
0aa48     F2 28 02 FB | 	rdlong	local06, objptr
0aa4c     01 28 06 F1 | 	add	local06, #1
0aa50     F2 28 62 FC | 	wrlong	local06, objptr
0aa54     37 00 00 FF 
0aa58     44 E4 85 F1 | 	sub	objptr, ##28228
0aa5c     20 F1 BF FD | 	call	#_expr
0aa60                 | '     ct+=1
0aa60                 | '     err=expr() : if err>0 then return err 
0aa60     01 FA 55 F2 | 	cmps	result1, #1 wc
0aa64     84 00 90 3D |  if_ae	jmp	#LR__0914
0aa68                 | '     if lparts(ct).token=token_rpar then ct+=1
0aa68     37 00 00 FF 
0aa6c     44 E4 05 F1 | 	add	objptr, ##28228
0aa70     F2 32 02 FB | 	rdlong	local11, objptr
0aa74     03 32 66 F0 | 	shl	local11, #3
0aa78     02 00 00 FF 
0aa7c     38 E4 85 F1 | 	sub	objptr, ##1080
0aa80     F2 32 02 F1 | 	add	local11, objptr
0aa84     04 32 06 F1 | 	add	local11, #4
0aa88     19 33 02 FB | 	rdlong	local11, local11
0aa8c     14 32 0E F2 | 	cmp	local11, #20 wz
0aa90     35 00 00 FF 
0aa94     0C E4 85 F1 | 	sub	objptr, ##27148
0aa98     4C 00 90 5D |  if_ne	jmp	#LR__0913
0aa9c     37 00 00 FF 
0aaa0     44 E4 05 F1 | 	add	objptr, ##28228
0aaa4     F2 28 02 FB | 	rdlong	local06, objptr
0aaa8     01 28 06 F1 | 	add	local06, #1
0aaac     F2 28 62 FC | 	wrlong	local06, objptr
0aab0     37 00 00 FF 
0aab4     44 E4 85 F1 | 	sub	objptr, ##28228
0aab8     2C 00 90 FD | 	jmp	#LR__0913
0aabc                 | LR__0912
0aabc     12 13 02 F6 | 	mov	arg01, local04
0aac0     34 00 B0 FD | 	call	#_getfun
0aac4     37 00 00 FF 
0aac8     44 E4 05 F1 | 	add	objptr, ##28228
0aacc     F2 28 02 FB | 	rdlong	local06, objptr
0aad0     01 28 06 F1 | 	add	local06, #1
0aad4     F2 28 62 FC | 	wrlong	local06, objptr
0aad8     37 00 00 FF 
0aadc     44 E4 85 F1 | 	sub	objptr, ##28228
0aae0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0aae0     01 FA 55 F2 | 	cmps	result1, #1 wc
0aae4     04 00 90 3D |  if_ae	jmp	#LR__0914
0aae8                 | LR__0913
0aae8                 | ' return 0  
0aae8     00 FA 05 F6 | 	mov	result1, #0
0aaec                 | LR__0914
0aaec     A7 F0 03 F6 | 	mov	ptra, fp
0aaf0     B2 00 A0 FD | 	call	#popregs_
0aaf4                 | _getvalue_ret
0aaf4     2D 00 64 FD | 	ret
0aaf8                 | 
0aaf8                 | ' 
0aaf8                 | ' ' Get a function result 
0aaf8                 | ' 
0aaf8                 | ' function getfun(m as integer) as ulong
0aaf8                 | _getfun
0aaf8     0F 4A 05 F6 | 	mov	COUNT_, #15
0aafc     A8 00 A0 FD | 	call	#pushregs_
0ab00                 | _getfun_enter
0ab00     09 25 02 F6 | 	mov	local04, arg01
0ab04     37 00 00 FF 
0ab08     44 E4 05 F1 | 	add	objptr, ##28228
0ab0c     F2 26 02 FB | 	rdlong	local05, objptr
0ab10     13 29 02 F6 | 	mov	local06, local05
0ab14     00 2A 06 F6 | 	mov	local07, #0
0ab18                 | ' oldct=ct
0ab18                 | ' numpar=0
0ab18                 | ' if lparts(ct+1).token=token_lpar then
0ab18     01 26 06 F1 | 	add	local05, #1
0ab1c     03 26 66 F0 | 	shl	local05, #3
0ab20     02 00 00 FF 
0ab24     38 E4 85 F1 | 	sub	objptr, ##1080
0ab28     F2 26 02 F1 | 	add	local05, objptr
0ab2c     04 26 06 F1 | 	add	local05, #4
0ab30     13 27 02 FB | 	rdlong	local05, local05
0ab34     15 26 0E F2 | 	cmp	local05, #21 wz
0ab38     35 00 00 FF 
0ab3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab40     54 01 90 5D |  if_ne	jmp	#LR__0924
0ab44     37 00 00 FF 
0ab48     44 E4 05 F1 | 	add	objptr, ##28228
0ab4c     F2 2C 02 FB | 	rdlong	local08, objptr
0ab50     01 2C 06 F1 | 	add	local08, #1
0ab54     F2 2C 62 FC | 	wrlong	local08, objptr
0ab58     37 00 00 FF 
0ab5c     44 E4 85 F1 | 	sub	objptr, ##28228
0ab60                 | '   ct+=1 											' omit this lpar, this is for expr list
0ab60                 | '   do
0ab60                 | LR__0920
0ab60     37 00 00 FF 
0ab64     44 E4 05 F1 | 	add	objptr, ##28228
0ab68     F2 26 02 FB | 	rdlong	local05, objptr
0ab6c     01 26 06 F1 | 	add	local05, #1
0ab70     F2 26 62 FC | 	wrlong	local05, objptr
0ab74                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ab74                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ab74     03 26 66 F0 | 	shl	local05, #3
0ab78     02 00 00 FF 
0ab7c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab80     F2 26 02 F1 | 	add	local05, objptr
0ab84     04 26 06 F1 | 	add	local05, #4
0ab88     13 2D 02 FB | 	rdlong	local08, local05
0ab8c     15 2C 0E F2 | 	cmp	local08, #21 wz
0ab90     35 00 00 FF 
0ab94     0C E4 85 F1 | 	sub	objptr, ##27148
0ab98     44 00 90 5D |  if_ne	jmp	#LR__0921
0ab9c     37 00 00 FF 
0aba0     44 E4 05 F1 | 	add	objptr, ##28228
0aba4     F2 2C 02 FB | 	rdlong	local08, objptr
0aba8     01 2C 06 F1 | 	add	local08, #1
0abac     F2 2C 62 FC | 	wrlong	local08, objptr
0abb0     37 00 00 FF 
0abb4     44 E4 85 F1 | 	sub	objptr, ##28228
0abb8     C4 EF BF FD | 	call	#_expr
0abbc     FD 2E 02 F6 | 	mov	local09, result1
0abc0     37 00 00 FF 
0abc4     44 E4 05 F1 | 	add	objptr, ##28228
0abc8     F2 2C 02 FB | 	rdlong	local08, objptr
0abcc     01 2C 06 F1 | 	add	local08, #1
0abd0     F2 2C 62 FC | 	wrlong	local08, objptr
0abd4     37 00 00 FF 
0abd8     44 E4 85 F1 | 	sub	objptr, ##28228
0abdc     08 00 90 FD | 	jmp	#LR__0922
0abe0                 | LR__0921
0abe0     9C EF BF FD | 	call	#_expr
0abe4     FD 2E 02 F6 | 	mov	local09, result1
0abe8                 | LR__0922
0abe8                 | '     if err>0 then return err
0abe8     01 2E 16 F2 | 	cmp	local09, #1 wc
0abec     17 FB 01 36 |  if_ae	mov	result1, local09
0abf0     3C 02 90 3D |  if_ae	jmp	#LR__0926
0abf4     01 2A 06 F1 | 	add	local07, #1
0abf8     37 00 00 FF 
0abfc     44 E4 05 F1 | 	add	objptr, ##28228
0ac00     F2 26 02 FB | 	rdlong	local05, objptr
0ac04     03 26 66 F0 | 	shl	local05, #3
0ac08     02 00 00 FF 
0ac0c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac10     F2 26 02 F1 | 	add	local05, objptr
0ac14     04 26 06 F1 | 	add	local05, #4
0ac18     13 2F 02 FB | 	rdlong	local09, local05
0ac1c     14 2E 0E F2 | 	cmp	local09, #20 wz
0ac20     35 00 00 FF 
0ac24     0C E4 85 F1 | 	sub	objptr, ##27148
0ac28     34 00 90 AD |  if_e	jmp	#LR__0923
0ac2c     37 00 00 FF 
0ac30     44 E4 05 F1 | 	add	objptr, ##28228
0ac34     F2 2E 02 FB | 	rdlong	local09, objptr
0ac38     03 2E 66 F0 | 	shl	local09, #3
0ac3c     02 00 00 FF 
0ac40     38 E4 85 F1 | 	sub	objptr, ##1080
0ac44     F2 2E 02 F1 | 	add	local09, objptr
0ac48     04 2E 06 F1 | 	add	local09, #4
0ac4c     17 2F 02 FB | 	rdlong	local09, local09
0ac50     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ac54     35 00 00 FF 
0ac58     0C E4 85 F1 | 	sub	objptr, ##27148
0ac5c     00 FF 9F 5D |  if_ne	jmp	#LR__0920
0ac60                 | LR__0923
0ac60                 | '   if lparts(ct).token=token_end then return 14
0ac60     37 00 00 FF 
0ac64     44 E4 05 F1 | 	add	objptr, ##28228
0ac68     F2 26 02 FB | 	rdlong	local05, objptr
0ac6c     03 26 66 F0 | 	shl	local05, #3
0ac70     02 00 00 FF 
0ac74     38 E4 85 F1 | 	sub	objptr, ##1080
0ac78     F2 26 02 F1 | 	add	local05, objptr
0ac7c     04 26 06 F1 | 	add	local05, #4
0ac80     13 2F 02 FB | 	rdlong	local09, local05
0ac84     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ac88     35 00 00 FF 
0ac8c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac90     0E FA 05 A6 |  if_e	mov	result1, #14
0ac94     98 01 90 AD |  if_e	jmp	#LR__0926
0ac98                 | LR__0924
0ac98     15 1F 02 F6 | 	mov	local01, local07
0ac9c     03 28 66 F0 | 	shl	local06, #3
0aca0     35 00 00 FF 
0aca4     0C E4 05 F1 | 	add	objptr, ##27148
0aca8     F2 28 02 F1 | 	add	local06, objptr
0acac     04 28 06 F1 | 	add	local06, #4
0acb0     14 23 02 FB | 	rdlong	local03, local06
0acb4     0F 2D 02 F6 | 	mov	local08, local01
0acb8     10 31 02 F6 | 	mov	local10, local02
0acbc     11 33 02 F6 | 	mov	local11, local03
0acc0     15 00 00 FF 
0acc4     70 E4 05 F1 | 	add	objptr, ##10864
0acc8     F2 34 02 FB | 	rdlong	local12, objptr
0accc     1A 37 02 F6 | 	mov	local13, local12
0acd0     01 36 66 F0 | 	shl	local13, #1
0acd4     1A 37 02 F1 | 	add	local13, local12
0acd8     02 36 66 F0 | 	shl	local13, #2
0acdc     03 00 00 FF 
0ace0     00 E4 85 F1 | 	sub	objptr, ##1536
0ace4     F2 36 02 F1 | 	add	local13, objptr
0ace8     1B 2D 62 FC | 	wrlong	local08, local13
0acec     03 00 00 FF 
0acf0     00 E4 05 F1 | 	add	objptr, ##1536
0acf4     F2 2C 02 FB | 	rdlong	local08, objptr
0acf8     16 39 02 F6 | 	mov	local14, local08
0acfc     01 38 66 F0 | 	shl	local14, #1
0ad00     16 39 02 F1 | 	add	local14, local08
0ad04     02 38 66 F0 | 	shl	local14, #2
0ad08     03 00 00 FF 
0ad0c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad10     F2 38 02 F1 | 	add	local14, objptr
0ad14     04 38 06 F1 | 	add	local14, #4
0ad18     1C 31 62 FC | 	wrlong	local10, local14
0ad1c     03 00 00 FF 
0ad20     00 E4 05 F1 | 	add	objptr, ##1536
0ad24     F2 2C 02 FB | 	rdlong	local08, objptr
0ad28     16 3B 02 F6 | 	mov	local15, local08
0ad2c     01 3A 66 F0 | 	shl	local15, #1
0ad30     16 3B 02 F1 | 	add	local15, local08
0ad34     02 3A 66 F0 | 	shl	local15, #2
0ad38     03 00 00 FF 
0ad3c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad40     F2 3A 02 F1 | 	add	local15, objptr
0ad44     08 3A 06 F1 | 	add	local15, #8
0ad48     1D 33 62 FC | 	wrlong	local11, local15
0ad4c     03 00 00 FF 
0ad50     00 E4 05 F1 | 	add	objptr, ##1536
0ad54     F2 2C 02 FB | 	rdlong	local08, objptr
0ad58     01 2C 06 F1 | 	add	local08, #1
0ad5c     F2 2C 62 FC | 	wrlong	local08, objptr
0ad60     4A 00 00 FF 
0ad64     7C E4 85 F1 | 	sub	objptr, ##38012
0ad68                 | ' t2.result.uresult=numpar
0ad68                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0ad68                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0ad68                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0ad68     FF FF 7F FF 
0ad6c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ad70     B8 00 90 5D |  if_ne	jmp	#LR__0925
0ad74     15 22 06 F6 | 	mov	local03, #21
0ad78     0F 2D 02 F6 | 	mov	local08, local01
0ad7c     10 31 02 F6 | 	mov	local10, local02
0ad80     11 33 02 F6 | 	mov	local11, local03
0ad84     4A 00 00 FF 
0ad88     7C E4 05 F1 | 	add	objptr, ##38012
0ad8c     F2 34 02 FB | 	rdlong	local12, objptr
0ad90     1A 37 02 F6 | 	mov	local13, local12
0ad94     01 36 66 F0 | 	shl	local13, #1
0ad98     1A 37 02 F1 | 	add	local13, local12
0ad9c     02 36 66 F0 | 	shl	local13, #2
0ada0     03 00 00 FF 
0ada4     00 E4 85 F1 | 	sub	objptr, ##1536
0ada8     F2 36 02 F1 | 	add	local13, objptr
0adac     1B 2D 62 FC | 	wrlong	local08, local13
0adb0     03 00 00 FF 
0adb4     00 E4 05 F1 | 	add	objptr, ##1536
0adb8     F2 3A 02 FB | 	rdlong	local15, objptr
0adbc     1D 39 02 F6 | 	mov	local14, local15
0adc0     01 38 66 F0 | 	shl	local14, #1
0adc4     1D 39 02 F1 | 	add	local14, local15
0adc8     02 38 66 F0 | 	shl	local14, #2
0adcc     03 00 00 FF 
0add0     00 E4 85 F1 | 	sub	objptr, ##1536
0add4     F2 38 02 F1 | 	add	local14, objptr
0add8     04 38 06 F1 | 	add	local14, #4
0addc     1C 31 62 FC | 	wrlong	local10, local14
0ade0     03 00 00 FF 
0ade4     00 E4 05 F1 | 	add	objptr, ##1536
0ade8     F2 38 02 FB | 	rdlong	local14, objptr
0adec     1C 3B 02 F6 | 	mov	local15, local14
0adf0     01 3A 66 F0 | 	shl	local15, #1
0adf4     1C 3B 02 F1 | 	add	local15, local14
0adf8     02 3A 66 F0 | 	shl	local15, #2
0adfc     03 00 00 FF 
0ae00     00 E4 85 F1 | 	sub	objptr, ##1536
0ae04     F2 3A 02 F1 | 	add	local15, objptr
0ae08     08 3A 06 F1 | 	add	local15, #8
0ae0c     1D 33 62 FC | 	wrlong	local11, local15
0ae10     03 00 00 FF 
0ae14     00 E4 05 F1 | 	add	objptr, ##1536
0ae18     F2 2C 02 FB | 	rdlong	local08, objptr
0ae1c     01 2C 06 F1 | 	add	local08, #1
0ae20     F2 2C 62 FC | 	wrlong	local08, objptr
0ae24     4A 00 00 FF 
0ae28     7C E4 85 F1 | 	sub	objptr, ##38012
0ae2c                 | LR__0925
0ae2c                 | ' return 0
0ae2c     00 FA 05 F6 | 	mov	result1, #0
0ae30                 | LR__0926
0ae30     A7 F0 03 F6 | 	mov	ptra, fp
0ae34     B2 00 A0 FD | 	call	#popregs_
0ae38                 | _getfun_ret
0ae38     2D 00 64 FD | 	ret
0ae3c                 | 
0ae3c                 | '   
0ae3c                 | '   
0ae3c                 | ' function getvar(m as integer) as ulong
0ae3c                 | _getvar
0ae3c     11 4A 05 F6 | 	mov	COUNT_, #17
0ae40     A8 00 A0 FD | 	call	#pushregs_
0ae44                 | _getvar_enter
0ae44     09 25 02 F6 | 	mov	local04, arg01
0ae48     37 00 00 FF 
0ae4c     44 E4 05 F1 | 	add	objptr, ##28228
0ae50     F2 26 02 FB | 	rdlong	local05, objptr
0ae54     03 26 66 F0 | 	shl	local05, #3
0ae58     02 00 00 FF 
0ae5c     38 E4 85 F1 | 	sub	objptr, ##1080
0ae60     F2 26 02 F1 | 	add	local05, objptr
0ae64     13 29 02 FB | 	rdlong	local06, local05
0ae68     01 2A 66 F6 | 	neg	local07, #1
0ae6c                 | ' 
0ae6c                 | ' varname$=lparts(ct).part$
0ae6c                 | ' j=-1
0ae6c                 | ' 
0ae6c                 | ' for i=0 to varnum-1
0ae6c     00 2C 06 F6 | 	mov	local08, #0
0ae70     04 E4 85 F1 | 	sub	objptr, #4
0ae74     F2 2E 02 FB | 	rdlong	local09, objptr
0ae78     35 00 00 FF 
0ae7c     08 E4 85 F1 | 	sub	objptr, ##27144
0ae80                 | LR__0930
0ae80     17 2D 52 F2 | 	cmps	local08, local09 wc
0ae84     38 00 90 3D |  if_ae	jmp	#LR__0931
0ae88                 | '   if variables(i).name=varname$ then j=i : exit
0ae88     16 27 02 F6 | 	mov	local05, local08
0ae8c     04 26 66 F0 | 	shl	local05, #4
0ae90     14 00 00 FF 
0ae94     F8 E5 05 F1 | 	add	objptr, ##10744
0ae98     F2 26 02 F1 | 	add	local05, objptr
0ae9c     13 13 02 FB | 	rdlong	arg01, local05
0aea0     14 15 02 F6 | 	mov	arg02, local06
0aea4     14 00 00 FF 
0aea8     F8 E5 85 F1 | 	sub	objptr, ##10744
0aeac     C4 59 B1 FD | 	call	#__system___string_cmp
0aeb0     00 FA 0D F2 | 	cmp	result1, #0 wz
0aeb4     16 2B 02 A6 |  if_e	mov	local07, local08
0aeb8     01 2C 06 51 |  if_ne	add	local08, #1
0aebc     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0aec0                 | LR__0931
0aec0                 | ' if  j=-1 andalso varnum<maxvars then   
0aec0     FF FF 7F FF 
0aec4     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0aec8     A8 00 90 5D |  if_ne	jmp	#LR__0932
0aecc     35 00 00 FF 
0aed0     08 E4 05 F1 | 	add	objptr, ##27144
0aed4     F2 2E 02 FB | 	rdlong	local09, objptr
0aed8     35 00 00 FF 
0aedc     08 E4 85 F1 | 	sub	objptr, ##27144
0aee0     02 00 00 FF 
0aee4     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0aee8     88 00 90 3D |  if_ae	jmp	#LR__0932
0aeec     35 00 00 FF 
0aef0     08 E4 05 F1 | 	add	objptr, ##27144
0aef4     F2 26 02 FB | 	rdlong	local05, objptr
0aef8     04 26 66 F0 | 	shl	local05, #4
0aefc     20 00 00 FF 
0af00     10 E4 85 F1 | 	sub	objptr, ##16400
0af04     F2 26 02 F1 | 	add	local05, objptr
0af08     13 29 62 FC | 	wrlong	local06, local05
0af0c     20 00 00 FF 
0af10     10 E4 05 F1 | 	add	objptr, ##16400
0af14     F2 26 02 FB | 	rdlong	local05, objptr
0af18     04 26 66 F0 | 	shl	local05, #4
0af1c     20 00 00 FF 
0af20     10 E4 85 F1 | 	sub	objptr, ##16400
0af24     F2 26 02 F1 | 	add	local05, objptr
0af28     04 26 06 F1 | 	add	local05, #4
0af2c     13 01 68 FC | 	wrlong	#0, local05
0af30     20 00 00 FF 
0af34     10 E4 05 F1 | 	add	objptr, ##16400
0af38     F2 26 02 FB | 	rdlong	local05, objptr
0af3c     04 26 66 F0 | 	shl	local05, #4
0af40     20 00 00 FF 
0af44     10 E4 85 F1 | 	sub	objptr, ##16400
0af48     F2 26 02 F1 | 	add	local05, objptr
0af4c     0C 26 06 F1 | 	add	local05, #12
0af50     13 39 68 FC | 	wrlong	#28, local05
0af54     20 00 00 FF 
0af58     10 E4 05 F1 | 	add	objptr, ##16400
0af5c     F2 2E 02 FB | 	rdlong	local09, objptr
0af60     17 2B 02 F6 | 	mov	local07, local09
0af64     01 2E 06 F1 | 	add	local09, #1
0af68     F2 2E 62 FC | 	wrlong	local09, objptr
0af6c     35 00 00 FF 
0af70     08 E4 85 F1 | 	sub	objptr, ##27144
0af74                 | LR__0932
0af74     00 2E 06 F6 | 	mov	local09, #0
0af78                 | ' numpar=0
0af78                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0af78     37 00 00 FF 
0af7c     44 E4 05 F1 | 	add	objptr, ##28228
0af80     F2 26 02 FB | 	rdlong	local05, objptr
0af84     01 26 06 F1 | 	add	local05, #1
0af88     03 26 66 F0 | 	shl	local05, #3
0af8c     02 00 00 FF 
0af90     38 E4 85 F1 | 	sub	objptr, ##1080
0af94     F2 26 02 F1 | 	add	local05, objptr
0af98     04 26 06 F1 | 	add	local05, #4
0af9c     13 2D 02 FB | 	rdlong	local08, local05
0afa0     15 2C 0E F2 | 	cmp	local08, #21 wz
0afa4     35 00 00 FF 
0afa8     0C E4 85 F1 | 	sub	objptr, ##27148
0afac     54 01 90 5D |  if_ne	jmp	#LR__0937
0afb0     37 00 00 FF 
0afb4     44 E4 05 F1 | 	add	objptr, ##28228
0afb8     F2 30 02 FB | 	rdlong	local10, objptr
0afbc     01 30 06 F1 | 	add	local10, #1
0afc0     F2 30 62 FC | 	wrlong	local10, objptr
0afc4     37 00 00 FF 
0afc8     44 E4 85 F1 | 	sub	objptr, ##28228
0afcc                 | '   ct+=1 											' omit this lpar, this is for expr list
0afcc                 | '   do
0afcc                 | LR__0933
0afcc     37 00 00 FF 
0afd0     44 E4 05 F1 | 	add	objptr, ##28228
0afd4     F2 26 02 FB | 	rdlong	local05, objptr
0afd8     01 26 06 F1 | 	add	local05, #1
0afdc     F2 26 62 FC | 	wrlong	local05, objptr
0afe0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0afe0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0afe0     03 26 66 F0 | 	shl	local05, #3
0afe4     02 00 00 FF 
0afe8     38 E4 85 F1 | 	sub	objptr, ##1080
0afec     F2 26 02 F1 | 	add	local05, objptr
0aff0     04 26 06 F1 | 	add	local05, #4
0aff4     13 31 02 FB | 	rdlong	local10, local05
0aff8     15 30 0E F2 | 	cmp	local10, #21 wz
0affc     35 00 00 FF 
0b000     0C E4 85 F1 | 	sub	objptr, ##27148
0b004     44 00 90 5D |  if_ne	jmp	#LR__0934
0b008     37 00 00 FF 
0b00c     44 E4 05 F1 | 	add	objptr, ##28228
0b010     F2 30 02 FB | 	rdlong	local10, objptr
0b014     01 30 06 F1 | 	add	local10, #1
0b018     F2 30 62 FC | 	wrlong	local10, objptr
0b01c     37 00 00 FF 
0b020     44 E4 85 F1 | 	sub	objptr, ##28228
0b024     58 EB BF FD | 	call	#_expr
0b028     FD 32 02 F6 | 	mov	local11, result1
0b02c     37 00 00 FF 
0b030     44 E4 05 F1 | 	add	objptr, ##28228
0b034     F2 30 02 FB | 	rdlong	local10, objptr
0b038     01 30 06 F1 | 	add	local10, #1
0b03c     F2 30 62 FC | 	wrlong	local10, objptr
0b040     37 00 00 FF 
0b044     44 E4 85 F1 | 	sub	objptr, ##28228
0b048     08 00 90 FD | 	jmp	#LR__0935
0b04c                 | LR__0934
0b04c     30 EB BF FD | 	call	#_expr
0b050     FD 32 02 F6 | 	mov	local11, result1
0b054                 | LR__0935
0b054                 | '     if err>0 then return err
0b054     01 32 56 F2 | 	cmps	local11, #1 wc
0b058     19 FB 01 36 |  if_ae	mov	result1, local11
0b05c     2C 02 90 3D |  if_ae	jmp	#LR__0939
0b060     01 2E 06 F1 | 	add	local09, #1
0b064     37 00 00 FF 
0b068     44 E4 05 F1 | 	add	objptr, ##28228
0b06c     F2 26 02 FB | 	rdlong	local05, objptr
0b070     03 26 66 F0 | 	shl	local05, #3
0b074     02 00 00 FF 
0b078     38 E4 85 F1 | 	sub	objptr, ##1080
0b07c     F2 26 02 F1 | 	add	local05, objptr
0b080     04 26 06 F1 | 	add	local05, #4
0b084     13 33 02 FB | 	rdlong	local11, local05
0b088     14 32 0E F2 | 	cmp	local11, #20 wz
0b08c     35 00 00 FF 
0b090     0C E4 85 F1 | 	sub	objptr, ##27148
0b094     34 00 90 AD |  if_e	jmp	#LR__0936
0b098     37 00 00 FF 
0b09c     44 E4 05 F1 | 	add	objptr, ##28228
0b0a0     F2 32 02 FB | 	rdlong	local11, objptr
0b0a4     03 32 66 F0 | 	shl	local11, #3
0b0a8     02 00 00 FF 
0b0ac     38 E4 85 F1 | 	sub	objptr, ##1080
0b0b0     F2 32 02 F1 | 	add	local11, objptr
0b0b4     04 32 06 F1 | 	add	local11, #4
0b0b8     19 33 02 FB | 	rdlong	local11, local11
0b0bc     FE 33 0E F2 | 	cmp	local11, #510 wz
0b0c0     35 00 00 FF 
0b0c4     0C E4 85 F1 | 	sub	objptr, ##27148
0b0c8     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0b0cc                 | LR__0936
0b0cc                 | '     if lparts(ct).token=token_end then return 14
0b0cc     37 00 00 FF 
0b0d0     44 E4 05 F1 | 	add	objptr, ##28228
0b0d4     F2 26 02 FB | 	rdlong	local05, objptr
0b0d8     03 26 66 F0 | 	shl	local05, #3
0b0dc     02 00 00 FF 
0b0e0     38 E4 85 F1 | 	sub	objptr, ##1080
0b0e4     F2 26 02 F1 | 	add	local05, objptr
0b0e8     04 26 06 F1 | 	add	local05, #4
0b0ec     13 33 02 FB | 	rdlong	local11, local05
0b0f0     FE 33 0E F2 | 	cmp	local11, #510 wz
0b0f4     35 00 00 FF 
0b0f8     0C E4 85 F1 | 	sub	objptr, ##27148
0b0fc     0E FA 05 A6 |  if_e	mov	result1, #14
0b100     88 01 90 AD |  if_e	jmp	#LR__0939
0b104                 | LR__0937
0b104     17 21 02 F6 | 	mov	local02, local09
0b108     11 22 06 F6 | 	mov	local03, #17
0b10c     15 1F 02 F6 | 	mov	local01, local07
0b110     0F 31 02 F6 | 	mov	local10, local01
0b114     10 35 02 F6 | 	mov	local12, local02
0b118     11 37 02 F6 | 	mov	local13, local03
0b11c     4A 00 00 FF 
0b120     7C E4 05 F1 | 	add	objptr, ##38012
0b124     F2 38 02 FB | 	rdlong	local14, objptr
0b128     1C 3B 02 F6 | 	mov	local15, local14
0b12c     01 3A 66 F0 | 	shl	local15, #1
0b130     1C 3B 02 F1 | 	add	local15, local14
0b134     02 3A 66 F0 | 	shl	local15, #2
0b138     03 00 00 FF 
0b13c     00 E4 85 F1 | 	sub	objptr, ##1536
0b140     F2 3A 02 F1 | 	add	local15, objptr
0b144     1D 31 62 FC | 	wrlong	local10, local15
0b148     03 00 00 FF 
0b14c     00 E4 05 F1 | 	add	objptr, ##1536
0b150     F2 30 02 FB | 	rdlong	local10, objptr
0b154     18 3D 02 F6 | 	mov	local16, local10
0b158     01 3C 66 F0 | 	shl	local16, #1
0b15c     18 3D 02 F1 | 	add	local16, local10
0b160     02 3C 66 F0 | 	shl	local16, #2
0b164     03 00 00 FF 
0b168     00 E4 85 F1 | 	sub	objptr, ##1536
0b16c     F2 3C 02 F1 | 	add	local16, objptr
0b170     04 3C 06 F1 | 	add	local16, #4
0b174     1E 35 62 FC | 	wrlong	local12, local16
0b178     03 00 00 FF 
0b17c     00 E4 05 F1 | 	add	objptr, ##1536
0b180     F2 30 02 FB | 	rdlong	local10, objptr
0b184     18 3F 02 F6 | 	mov	local17, local10
0b188     01 3E 66 F0 | 	shl	local17, #1
0b18c     18 3F 02 F1 | 	add	local17, local10
0b190     02 3E 66 F0 | 	shl	local17, #2
0b194     03 00 00 FF 
0b198     00 E4 85 F1 | 	sub	objptr, ##1536
0b19c     F2 3E 02 F1 | 	add	local17, objptr
0b1a0     08 3E 06 F1 | 	add	local17, #8
0b1a4     1F 37 62 FC | 	wrlong	local13, local17
0b1a8     03 00 00 FF 
0b1ac     00 E4 05 F1 | 	add	objptr, ##1536
0b1b0     F2 30 02 FB | 	rdlong	local10, objptr
0b1b4     01 30 06 F1 | 	add	local10, #1
0b1b8     F2 30 62 FC | 	wrlong	local10, objptr
0b1bc     4A 00 00 FF 
0b1c0     7C E4 85 F1 | 	sub	objptr, ##38012
0b1c4                 | ' t2.result.twowords(1)=numpar
0b1c4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b1c4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b1c4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b1c4     FF FF 7F FF 
0b1c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b1cc     B8 00 90 5D |  if_ne	jmp	#LR__0938
0b1d0     15 22 06 F6 | 	mov	local03, #21
0b1d4     0F 31 02 F6 | 	mov	local10, local01
0b1d8     10 35 02 F6 | 	mov	local12, local02
0b1dc     11 37 02 F6 | 	mov	local13, local03
0b1e0     4A 00 00 FF 
0b1e4     7C E4 05 F1 | 	add	objptr, ##38012
0b1e8     F2 38 02 FB | 	rdlong	local14, objptr
0b1ec     1C 3B 02 F6 | 	mov	local15, local14
0b1f0     01 3A 66 F0 | 	shl	local15, #1
0b1f4     1C 3B 02 F1 | 	add	local15, local14
0b1f8     02 3A 66 F0 | 	shl	local15, #2
0b1fc     03 00 00 FF 
0b200     00 E4 85 F1 | 	sub	objptr, ##1536
0b204     F2 3A 02 F1 | 	add	local15, objptr
0b208     1D 31 62 FC | 	wrlong	local10, local15
0b20c     03 00 00 FF 
0b210     00 E4 05 F1 | 	add	objptr, ##1536
0b214     F2 3E 02 FB | 	rdlong	local17, objptr
0b218     1F 3D 02 F6 | 	mov	local16, local17
0b21c     01 3C 66 F0 | 	shl	local16, #1
0b220     1F 3D 02 F1 | 	add	local16, local17
0b224     02 3C 66 F0 | 	shl	local16, #2
0b228     03 00 00 FF 
0b22c     00 E4 85 F1 | 	sub	objptr, ##1536
0b230     F2 3C 02 F1 | 	add	local16, objptr
0b234     04 3C 06 F1 | 	add	local16, #4
0b238     1E 35 62 FC | 	wrlong	local12, local16
0b23c     03 00 00 FF 
0b240     00 E4 05 F1 | 	add	objptr, ##1536
0b244     F2 3C 02 FB | 	rdlong	local16, objptr
0b248     1E 3F 02 F6 | 	mov	local17, local16
0b24c     01 3E 66 F0 | 	shl	local17, #1
0b250     1E 3F 02 F1 | 	add	local17, local16
0b254     02 3E 66 F0 | 	shl	local17, #2
0b258     03 00 00 FF 
0b25c     00 E4 85 F1 | 	sub	objptr, ##1536
0b260     F2 3E 02 F1 | 	add	local17, objptr
0b264     08 3E 06 F1 | 	add	local17, #8
0b268     1F 37 62 FC | 	wrlong	local13, local17
0b26c     03 00 00 FF 
0b270     00 E4 05 F1 | 	add	objptr, ##1536
0b274     F2 30 02 FB | 	rdlong	local10, objptr
0b278     01 30 06 F1 | 	add	local10, #1
0b27c     F2 30 62 FC | 	wrlong	local10, objptr
0b280     4A 00 00 FF 
0b284     7C E4 85 F1 | 	sub	objptr, ##38012
0b288                 | LR__0938
0b288                 | ' return 0
0b288     00 FA 05 F6 | 	mov	result1, #0
0b28c                 | LR__0939
0b28c     A7 F0 03 F6 | 	mov	ptra, fp
0b290     B2 00 A0 FD | 	call	#popregs_
0b294                 | _getvar_ret
0b294     2D 00 64 FD | 	ret
0b298                 | 
0b298                 | ' 
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' 
0b298                 | ' 
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' '                                                                                                                                       -
0b298                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b298                 | ' '                                                                                                                                       -
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' 
0b298                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b298                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' 
0b298                 | ' function execute_line (astart=0 as integer) as integer
0b298                 | _execute_line
0b298     04 4A 05 F6 | 	mov	COUNT_, #4
0b29c     A8 00 A0 FD | 	call	#pushregs_
0b2a0     50 00 00 FF 
0b2a4     BC E4 05 F1 | 	add	objptr, ##41148
0b2a8     F2 00 68 FC | 	wrlong	#0, objptr
0b2ac                 | ' 
0b2ac                 | ' runptr2=0
0b2ac                 | ' for lineptr_e=astart to lineptr-1
0b2ac     06 00 00 FF 
0b2b0     3C E4 85 F1 | 	sub	objptr, ##3132
0b2b4     F2 12 62 FC | 	wrlong	arg01, objptr
0b2b8     04 E4 85 F1 | 	sub	objptr, #4
0b2bc     F2 1E 02 FB | 	rdlong	local01, objptr
0b2c0     4A 00 00 FF 
0b2c4     7C E4 85 F1 | 	sub	objptr, ##38012
0b2c8                 | LR__0940
0b2c8     4A 00 00 FF 
0b2cc     80 E4 05 F1 | 	add	objptr, ##38016
0b2d0     F2 FA 01 FB | 	rdlong	result1, objptr
0b2d4     4A 00 00 FF 
0b2d8     80 E4 85 F1 | 	sub	objptr, ##38016
0b2dc     0F FB 51 F2 | 	cmps	result1, local01 wc
0b2e0     98 00 90 3D |  if_ae	jmp	#LR__0941
0b2e4     4A 00 00 FF 
0b2e8     80 E4 05 F1 | 	add	objptr, ##38016
0b2ec     F2 FA 01 FB | 	rdlong	result1, objptr
0b2f0     FD 20 02 F6 | 	mov	local02, result1
0b2f4     01 20 66 F0 | 	shl	local02, #1
0b2f8     FD 20 02 F1 | 	add	local02, result1
0b2fc     02 20 66 F0 | 	shl	local02, #2
0b300     03 00 00 FF 
0b304     04 E4 85 F1 | 	sub	objptr, ##1540
0b308     F2 20 02 F1 | 	add	local02, objptr
0b30c     08 20 06 F1 | 	add	local02, #8
0b310     10 21 02 FB | 	rdlong	local02, local02
0b314     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b318     02 20 66 F0 | 	shl	local02, #2
0b31c     04 00 00 FF 
0b320     1C E4 85 F1 | 	sub	objptr, ##2076
0b324     F2 20 02 F1 | 	add	local02, objptr
0b328     10 21 02 FB | 	rdlong	local02, local02
0b32c     10 23 02 F6 | 	mov	local03, local02
0b330     13 20 46 F7 | 	zerox	local02, #19
0b334     14 22 46 F0 | 	shr	local03, #20
0b338     02 22 66 F0 | 	shl	local03, #2
0b33c     ED 22 02 F1 | 	add	local03, __methods__
0b340     11 23 02 FB | 	rdlong	local03, local03
0b344     43 00 00 FF 
0b348     60 E4 85 F1 | 	sub	objptr, ##34400
0b34c     F2 24 02 F6 | 	mov	local04, objptr
0b350     10 E5 01 F6 | 	mov	objptr, local02
0b354     2D 22 62 FD | 	call	local03
0b358     12 E5 01 F6 | 	mov	objptr, local04
0b35c     4A 00 00 FF 
0b360     80 E4 05 F1 | 	add	objptr, ##38016
0b364     F2 24 02 FB | 	rdlong	local04, objptr
0b368     01 24 06 F1 | 	add	local04, #1
0b36c     F2 24 62 FC | 	wrlong	local04, objptr
0b370     4A 00 00 FF 
0b374     80 E4 85 F1 | 	sub	objptr, ##38016
0b378     4C FF 9F FD | 	jmp	#LR__0940
0b37c                 | LR__0941
0b37c                 | ' return runptr2
0b37c     50 00 00 FF 
0b380     BC E4 05 F1 | 	add	objptr, ##41148
0b384     F2 FA 01 FB | 	rdlong	result1, objptr
0b388     50 00 00 FF 
0b38c     BC E4 85 F1 | 	sub	objptr, ##41148
0b390     A7 F0 03 F6 | 	mov	ptra, fp
0b394     B2 00 A0 FD | 	call	#popregs_
0b398                 | _execute_line_ret
0b398     2D 00 64 FD | 	ret
0b39c                 | 
0b39c                 | ' 
0b39c                 | ' 
0b39c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b39c                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b39c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b39c                 | ' 
0b39c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b39c                 | ' 
0b39c                 | ' function pop() as expr_result
0b39c                 | _pop
0b39c                 | ' if stackpointer=0 then
0b39c     43 00 00 FF 
0b3a0     58 E4 05 F1 | 	add	objptr, ##34392
0b3a4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b3a8     43 00 00 FF 
0b3ac     58 E4 85 F1 | 	sub	objptr, ##34392
0b3b0     FF 04 06 A6 |  if_e	mov	_var03, #255
0b3b4     18 00 06 A6 |  if_e	mov	_var01, #24
0b3b8     68 00 90 AD |  if_e	jmp	#LR__0950
0b3bc     43 00 00 FF 
0b3c0     58 E4 05 F1 | 	add	objptr, ##34392
0b3c4     F2 FA 01 FB | 	rdlong	result1, objptr
0b3c8     01 FA 85 F1 | 	sub	result1, #1
0b3cc     F2 FA 61 FC | 	wrlong	result1, objptr
0b3d0     FD FE 01 F6 | 	mov	result3, result1
0b3d4     01 FE 65 F0 | 	shl	result3, #1
0b3d8     FD FE 01 F1 | 	add	result3, result1
0b3dc     02 FE 65 F0 | 	shl	result3, #2
0b3e0     0C 00 00 FF 
0b3e4     0C E4 85 F1 | 	sub	objptr, ##6156
0b3e8     F2 FE 01 F1 | 	add	result3, objptr
0b3ec     FF 00 02 FB | 	rdlong	_var01, result3
0b3f0     04 FE 05 F1 | 	add	result3, #4
0b3f4     FF FE 01 FB | 	rdlong	result3, result3
0b3f8     FD FC 01 F6 | 	mov	result2, result1
0b3fc     01 FC 65 F0 | 	shl	result2, #1
0b400     FD FC 01 F1 | 	add	result2, result1
0b404     02 FC 65 F0 | 	shl	result2, #2
0b408     F2 FC 01 F1 | 	add	result2, objptr
0b40c     08 FC 05 F1 | 	add	result2, #8
0b410     FE FA 01 FB | 	rdlong	result1, result2
0b414     FF 02 02 F6 | 	mov	_var02, result3
0b418     FD 04 02 F6 | 	mov	_var03, result1
0b41c     37 00 00 FF 
0b420     4C E4 85 F1 | 	sub	objptr, ##28236
0b424                 | LR__0950
0b424                 | ' return t1
0b424     01 FD 01 F6 | 	mov	result2, _var02
0b428     02 FF 01 F6 | 	mov	result3, _var03
0b42c     00 FB 01 F6 | 	mov	result1, _var01
0b430                 | _pop_ret
0b430     2D 00 64 FD | 	ret
0b434                 | 
0b434                 | ' 
0b434                 | ' sub push(t1 as expr_result )
0b434                 | _push
0b434                 | ' if stackpointer<maxstack then 
0b434     43 00 00 FF 
0b438     58 E4 05 F1 | 	add	objptr, ##34392
0b43c     F2 00 02 FB | 	rdlong	_var01, objptr
0b440     43 00 00 FF 
0b444     58 E4 85 F1 | 	sub	objptr, ##34392
0b448     01 00 00 FF 
0b44c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b450     BC 00 90 3D |  if_ae	jmp	#LR__0960
0b454     09 01 02 FB | 	rdlong	_var01, arg01
0b458     04 12 06 F1 | 	add	arg01, #4
0b45c     09 03 02 FB | 	rdlong	_var02, arg01
0b460     04 12 06 F1 | 	add	arg01, #4
0b464     09 13 02 FB | 	rdlong	arg01, arg01
0b468     43 00 00 FF 
0b46c     58 E4 05 F1 | 	add	objptr, ##34392
0b470     F2 04 02 FB | 	rdlong	_var03, objptr
0b474     02 07 02 F6 | 	mov	_var04, _var03
0b478     01 06 66 F0 | 	shl	_var04, #1
0b47c     02 07 02 F1 | 	add	_var04, _var03
0b480     02 06 66 F0 | 	shl	_var04, #2
0b484     0C 00 00 FF 
0b488     0C E4 85 F1 | 	sub	objptr, ##6156
0b48c     F2 06 02 F1 | 	add	_var04, objptr
0b490     03 01 62 FC | 	wrlong	_var01, _var04
0b494     0C 00 00 FF 
0b498     0C E4 05 F1 | 	add	objptr, ##6156
0b49c     F2 06 02 FB | 	rdlong	_var04, objptr
0b4a0     03 05 02 F6 | 	mov	_var03, _var04
0b4a4     01 04 66 F0 | 	shl	_var03, #1
0b4a8     03 05 02 F1 | 	add	_var03, _var04
0b4ac     02 04 66 F0 | 	shl	_var03, #2
0b4b0     0C 00 00 FF 
0b4b4     0C E4 85 F1 | 	sub	objptr, ##6156
0b4b8     F2 04 02 F1 | 	add	_var03, objptr
0b4bc     04 04 06 F1 | 	add	_var03, #4
0b4c0     02 03 62 FC | 	wrlong	_var02, _var03
0b4c4     0C 00 00 FF 
0b4c8     0C E4 05 F1 | 	add	objptr, ##6156
0b4cc     F2 06 02 FB | 	rdlong	_var04, objptr
0b4d0     03 05 02 F6 | 	mov	_var03, _var04
0b4d4     01 04 66 F0 | 	shl	_var03, #1
0b4d8     03 05 02 F1 | 	add	_var03, _var04
0b4dc     02 04 66 F0 | 	shl	_var03, #2
0b4e0     0C 00 00 FF 
0b4e4     0C E4 85 F1 | 	sub	objptr, ##6156
0b4e8     F2 04 02 F1 | 	add	_var03, objptr
0b4ec     08 04 06 F1 | 	add	_var03, #8
0b4f0     02 13 62 FC | 	wrlong	arg01, _var03
0b4f4     0C 00 00 FF 
0b4f8     0C E4 05 F1 | 	add	objptr, ##6156
0b4fc     F2 00 02 FB | 	rdlong	_var01, objptr
0b500     01 00 06 F1 | 	add	_var01, #1
0b504     F2 00 62 FC | 	wrlong	_var01, objptr
0b508     43 00 00 FF 
0b50c     58 E4 85 F1 | 	sub	objptr, ##34392
0b510                 | LR__0960
0b510                 | _push_ret
0b510     2D 00 64 FD | 	ret
0b514                 | 
0b514                 | ' 
0b514                 | ' ' -------------------------------- Runtime converting functions
0b514                 | ' 
0b514                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b514                 | ' 
0b514                 | ' function  convertstring(psaddr as ulong) as string
0b514                 | _convertstring
0b514     04 4A 05 F6 | 	mov	COUNT_, #4
0b518     A8 00 A0 FD | 	call	#pushregs_
0b51c     09 1F 02 F6 | 	mov	local01, arg01
0b520     2C 20 B1 FD | 	call	#_pslpeek
0b524     FD 20 02 F6 | 	mov	local02, result1
0b528     83 01 00 FF 
0b52c     4E 23 06 F6 | 	mov	local03, ##@LR__5414
0b530                 | ' l=pslpeek(psaddr)
0b530                 | ' s="" 
0b530                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b530     01 24 06 F6 | 	mov	local04, #1
0b534     01 20 06 F1 | 	add	local02, #1
0b538                 | LR__0970
0b538     10 25 52 F2 | 	cmps	local04, local02 wc
0b53c     30 00 90 3D |  if_ae	jmp	#LR__0971
0b540     0F 13 02 F6 | 	mov	arg01, local01
0b544     03 12 06 F1 | 	add	arg01, #3
0b548     12 13 02 F1 | 	add	arg01, local04
0b54c     A8 1F B1 FD | 	call	#_pspeek
0b550     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b554     34 75 B1 FD | 	call	#__system__Chr_S
0b558     FD 14 02 F6 | 	mov	arg02, result1
0b55c     11 13 02 F6 | 	mov	arg01, local03
0b560     44 53 B1 FD | 	call	#__system___string_concat
0b564     FD 22 02 F6 | 	mov	local03, result1
0b568     01 24 06 F1 | 	add	local04, #1
0b56c     C8 FF 9F FD | 	jmp	#LR__0970
0b570                 | LR__0971
0b570                 | ' return s
0b570     11 FB 01 F6 | 	mov	result1, local03
0b574     A7 F0 03 F6 | 	mov	ptra, fp
0b578     B2 00 A0 FD | 	call	#popregs_
0b57c                 | _convertstring_ret
0b57c     2D 00 64 FD | 	ret
0b580                 | 
0b580                 | ' 
0b580                 | ' ' converts a variable to an integer
0b580                 | ' 
0b580                 | ' function converttoint (t1 as expr_result) as integer 
0b580                 | _converttoint
0b580     02 4A 05 F6 | 	mov	COUNT_, #2
0b584     A8 00 A0 FD | 	call	#pushregs_
0b588     09 1F 02 F6 | 	mov	local01, arg01
0b58c                 | ' 
0b58c                 | ' select case t1.result_type
0b58c     08 1E 06 F1 | 	add	local01, #8
0b590     0F 21 02 FB | 	rdlong	local02, local01
0b594     08 1E 86 F1 | 	sub	local01, #8
0b598     1C 20 0E F2 | 	cmp	local02, #28 wz
0b59c     2C 00 90 AD |  if_e	jmp	#LR__0980
0b5a0     1D 20 0E F2 | 	cmp	local02, #29 wz
0b5a4     2C 00 90 AD |  if_e	jmp	#LR__0981
0b5a8     1E 20 0E F2 | 	cmp	local02, #30 wz
0b5ac     2C 00 90 AD |  if_e	jmp	#LR__0982
0b5b0     1F 20 0E F2 | 	cmp	local02, #31 wz
0b5b4     34 00 90 AD |  if_e	jmp	#LR__0983
0b5b8     2B 20 0E F2 | 	cmp	local02, #43 wz
0b5bc     44 00 90 AD |  if_e	jmp	#LR__0984
0b5c0     2C 20 0E F2 | 	cmp	local02, #44 wz
0b5c4     5C 00 90 AD |  if_e	jmp	#LR__0985
0b5c8     60 00 90 FD | 	jmp	#LR__0986
0b5cc                 | LR__0980
0b5cc     0F FB 01 FB | 	rdlong	result1, local01
0b5d0     5C 00 90 FD | 	jmp	#LR__0987
0b5d4                 | LR__0981
0b5d4     0F FB 01 FB | 	rdlong	result1, local01
0b5d8     54 00 90 FD | 	jmp	#LR__0987
0b5dc                 | LR__0982
0b5dc     0F 13 02 FB | 	rdlong	arg01, local01
0b5e0     01 14 06 F6 | 	mov	arg02, #1
0b5e4     E0 82 B1 FD | 	call	#__system___float_tointeger
0b5e8     44 00 90 FD | 	jmp	#LR__0987
0b5ec                 | LR__0983
0b5ec     0F 13 02 FB | 	rdlong	arg01, local01
0b5f0     18 86 B1 FD | 	call	#__system____builtin_atof
0b5f4     FD 12 02 F6 | 	mov	arg01, result1
0b5f8     01 14 06 F6 | 	mov	arg02, #1
0b5fc     C8 82 B1 FD | 	call	#__system___float_tointeger
0b600     2C 00 90 FD | 	jmp	#LR__0987
0b604                 | LR__0984
0b604     0F 13 02 FB | 	rdlong	arg01, local01
0b608     08 FF BF FD | 	call	#_convertstring
0b60c     FD 12 02 F6 | 	mov	arg01, result1
0b610     F8 85 B1 FD | 	call	#__system____builtin_atof
0b614     FD 12 02 F6 | 	mov	arg01, result1
0b618     01 14 06 F6 | 	mov	arg02, #1
0b61c     A8 82 B1 FD | 	call	#__system___float_tointeger
0b620     0C 00 90 FD | 	jmp	#LR__0987
0b624                 | LR__0985
0b624     0F FB 01 FB | 	rdlong	result1, local01
0b628     04 00 90 FD | 	jmp	#LR__0987
0b62c                 | LR__0986
0b62c     00 FA 05 F6 | 	mov	result1, #0
0b630                 | LR__0987
0b630     A7 F0 03 F6 | 	mov	ptra, fp
0b634     B2 00 A0 FD | 	call	#popregs_
0b638                 | _converttoint_ret
0b638     2D 00 64 FD | 	ret
0b63c                 | 
0b63c                 | ' 
0b63c                 | ' ' converts a variable to float
0b63c                 | ' 
0b63c                 | ' function converttofloat (t1 as expr_result) as single
0b63c                 | _converttofloat
0b63c     03 4A 05 F6 | 	mov	COUNT_, #3
0b640     A8 00 A0 FD | 	call	#pushregs_
0b644     09 1F 02 F6 | 	mov	local01, arg01
0b648                 | ' 
0b648                 | ' select case t1.result_type
0b648     08 1E 06 F1 | 	add	local01, #8
0b64c     0F 21 02 FB | 	rdlong	local02, local01
0b650     08 1E 86 F1 | 	sub	local01, #8
0b654     1C 20 0E F2 | 	cmp	local02, #28 wz
0b658     24 00 90 AD |  if_e	jmp	#LR__0990
0b65c     1D 20 0E F2 | 	cmp	local02, #29 wz
0b660     38 00 90 AD |  if_e	jmp	#LR__0991
0b664     1E 20 0E F2 | 	cmp	local02, #30 wz
0b668     3C 00 90 AD |  if_e	jmp	#LR__0992
0b66c     1F 20 0E F2 | 	cmp	local02, #31 wz
0b670     3C 00 90 AD |  if_e	jmp	#LR__0993
0b674     2B 20 0E F2 | 	cmp	local02, #43 wz
0b678     40 00 90 AD |  if_e	jmp	#LR__0994
0b67c     50 00 90 FD | 	jmp	#LR__0995
0b680                 | LR__0990
0b680     0F 13 02 FB | 	rdlong	arg01, local01
0b684     09 13 52 F6 | 	abs	arg01, arg01 wc
0b688     1F 22 C6 C9 |  if_b	decod	local03, #31
0b68c     00 22 06 36 |  if_ae	mov	local03, #0
0b690     68 79 B1 FD | 	call	#__system___float_fromuns
0b694     11 FB 61 F5 | 	xor	result1, local03
0b698     38 00 90 FD | 	jmp	#LR__0996
0b69c                 | LR__0991
0b69c     0F 13 02 FB | 	rdlong	arg01, local01
0b6a0     58 79 B1 FD | 	call	#__system___float_fromuns
0b6a4     2C 00 90 FD | 	jmp	#LR__0996
0b6a8                 | LR__0992
0b6a8     0F FB 01 FB | 	rdlong	result1, local01
0b6ac     24 00 90 FD | 	jmp	#LR__0996
0b6b0                 | LR__0993
0b6b0     0F 13 02 FB | 	rdlong	arg01, local01
0b6b4     54 85 B1 FD | 	call	#__system____builtin_atof
0b6b8     18 00 90 FD | 	jmp	#LR__0996
0b6bc                 | LR__0994
0b6bc     0F 13 02 FB | 	rdlong	arg01, local01
0b6c0     50 FE BF FD | 	call	#_convertstring
0b6c4     FD 12 02 F6 | 	mov	arg01, result1
0b6c8     40 85 B1 FD | 	call	#__system____builtin_atof
0b6cc     04 00 90 FD | 	jmp	#LR__0996
0b6d0                 | LR__0995
0b6d0     00 FA 05 F6 | 	mov	result1, #0
0b6d4                 | LR__0996
0b6d4     A7 F0 03 F6 | 	mov	ptra, fp
0b6d8     B2 00 A0 FD | 	call	#popregs_
0b6dc                 | _converttofloat_ret
0b6dc     2D 00 64 FD | 	ret
0b6e0                 | 
0b6e0                 | ' 
0b6e0                 | ' '----------------- End of converting 
0b6e0                 | ' 
0b6e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6e0                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0b6e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6e0                 | ' 
0b6e0                 | ' sub csave_block(address as ulong)
0b6e0                 | _csave_block
0b6e0     09 01 02 F6 | 	mov	_var01, arg01
0b6e4                 | ' 
0b6e4                 | ' for i=0 to 63 step 2
0b6e4     00 02 06 F6 | 	mov	_var02, #0
0b6e8                 | LR__1000
0b6e8                 | '   do: loop until lpeek(base+64*7)>32768
0b6e8     37 00 00 FF 
0b6ec     10 E4 05 F1 | 	add	objptr, ##28176
0b6f0     97 0C 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0b6f4                 | LR__1001
0b6f4     F2 12 02 FB | 	rdlong	arg01, objptr
0b6f8     C0 13 06 F1 | 	add	arg01, #448
0b6fc     09 FB 01 FB | 	rdlong	result1, arg01
0b700     40 00 00 FF 
0b704     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b708     E8 FF 9F CD |  if_b	jmp	#LR__1001
0b70c                 | LR__1002
0b70c     00 13 02 F6 | 	mov	arg01, _var01
0b710     01 05 02 F6 | 	mov	_var03, _var02
0b714     02 04 66 F0 | 	shl	_var03, #2
0b718     02 13 02 F1 | 	add	arg01, _var03
0b71c     09 07 02 FB | 	rdlong	_var04, arg01
0b720     1B 00 00 FF 
0b724     00 E4 05 F1 | 	add	objptr, ##13824
0b728     F2 06 62 FC | 	wrlong	_var04, objptr
0b72c     52 00 00 FF 
0b730     10 E4 85 F1 | 	sub	objptr, ##42000
0b734                 | '   q=lpeek(address+4*i)
0b734                 | '      for bit=0 to 31
0b734     00 08 06 F6 | 	mov	_var05, #0
0b738     97 84 48 FB | 	callpa	#(@LR__1007-@LR__1003)>>2,fcache_load_ptr_
0b73c                 | LR__1003
0b73c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0b73c     52 00 00 FF 
0b740     10 E4 05 F1 | 	add	objptr, ##42000
0b744     F2 06 02 FB | 	rdlong	_var04, objptr
0b748     52 00 00 FF 
0b74c     10 E4 85 F1 | 	sub	objptr, ##42000
0b750     04 05 C2 F9 | 	decod	_var03, _var05
0b754     02 07 CA F7 | 	test	_var04, _var03 wz
0b758     60 00 90 AD |  if_e	jmp	#LR__1004
0b75c     04 05 02 F6 | 	mov	_var03, _var05
0b760     02 04 66 F0 | 	shl	_var03, #2
0b764     4D 00 00 FF 
0b768     B4 E5 05 F1 | 	add	objptr, ##39860
0b76c     F2 04 02 F1 | 	add	_var03, objptr
0b770     02 FF 48 FC | 	wrbyte	#127, _var03
0b774     04 05 02 F6 | 	mov	_var03, _var05
0b778     02 04 66 F0 | 	shl	_var03, #2
0b77c     01 04 06 F1 | 	add	_var03, #1
0b780     F2 04 02 F1 | 	add	_var03, objptr
0b784     02 01 49 FC | 	wrbyte	#128, _var03
0b788     04 05 02 F6 | 	mov	_var03, _var05
0b78c     02 04 66 F0 | 	shl	_var03, #2
0b790     02 04 06 F1 | 	add	_var03, #2
0b794     F2 04 02 F1 | 	add	_var03, objptr
0b798     02 FF 48 FC | 	wrbyte	#127, _var03
0b79c     04 05 02 F6 | 	mov	_var03, _var05
0b7a0     02 04 66 F0 | 	shl	_var03, #2
0b7a4     03 04 06 F1 | 	add	_var03, #3
0b7a8     F2 04 02 F1 | 	add	_var03, objptr
0b7ac     02 01 49 FC | 	wrbyte	#128, _var03
0b7b0     4D 00 00 FF 
0b7b4     B4 E5 85 F1 | 	sub	objptr, ##39860
0b7b8     5C 00 90 FD | 	jmp	#LR__1005
0b7bc                 | LR__1004
0b7bc     04 05 02 F6 | 	mov	_var03, _var05
0b7c0     02 04 66 F0 | 	shl	_var03, #2
0b7c4     4D 00 00 FF 
0b7c8     B4 E5 05 F1 | 	add	objptr, ##39860
0b7cc     F2 04 02 F1 | 	add	_var03, objptr
0b7d0     02 01 49 FC | 	wrbyte	#128, _var03
0b7d4     04 05 02 F6 | 	mov	_var03, _var05
0b7d8     02 04 66 F0 | 	shl	_var03, #2
0b7dc     01 04 06 F1 | 	add	_var03, #1
0b7e0     F2 04 02 F1 | 	add	_var03, objptr
0b7e4     02 01 49 FC | 	wrbyte	#128, _var03
0b7e8     04 05 02 F6 | 	mov	_var03, _var05
0b7ec     02 04 66 F0 | 	shl	_var03, #2
0b7f0     02 04 06 F1 | 	add	_var03, #2
0b7f4     F2 04 02 F1 | 	add	_var03, objptr
0b7f8     02 FF 48 FC | 	wrbyte	#127, _var03
0b7fc     04 05 02 F6 | 	mov	_var03, _var05
0b800     02 04 66 F0 | 	shl	_var03, #2
0b804     03 04 06 F1 | 	add	_var03, #3
0b808     F2 04 02 F1 | 	add	_var03, objptr
0b80c     02 FF 48 FC | 	wrbyte	#127, _var03
0b810     4D 00 00 FF 
0b814     B4 E5 85 F1 | 	sub	objptr, ##39860
0b818                 | LR__1005
0b818     01 08 06 F1 | 	add	_var05, #1
0b81c     20 08 56 F2 | 	cmps	_var05, #32 wc
0b820     18 FF 9F CD |  if_b	jmp	#LR__1003
0b824                 | '   do: loop until lpeek(base+64*7)<32768
0b824     37 00 00 FF 
0b828     10 E4 05 F1 | 	add	objptr, ##28176
0b82c                 | LR__1006
0b82c     F2 12 02 FB | 	rdlong	arg01, objptr
0b830     C0 13 06 F1 | 	add	arg01, #448
0b834     09 FB 01 FB | 	rdlong	result1, arg01
0b838     40 00 00 FF 
0b83c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b840     E8 FF 9F 3D |  if_ae	jmp	#LR__1006
0b844                 | LR__1007
0b844     00 13 02 F6 | 	mov	arg01, _var01
0b848     04 12 06 F1 | 	add	arg01, #4
0b84c     01 05 02 F6 | 	mov	_var03, _var02
0b850     02 04 66 F0 | 	shl	_var03, #2
0b854     02 13 02 F1 | 	add	arg01, _var03
0b858     09 07 02 FB | 	rdlong	_var04, arg01
0b85c     1B 00 00 FF 
0b860     00 E4 05 F1 | 	add	objptr, ##13824
0b864     F2 06 62 FC | 	wrlong	_var04, objptr
0b868     52 00 00 FF 
0b86c     10 E4 85 F1 | 	sub	objptr, ##42000
0b870                 | '   q=lpeek(address+4+4*i)
0b870                 | '      for bit=0 to 31
0b870     00 08 06 F6 | 	mov	_var05, #0
0b874     97 94 48 FB | 	callpa	#(@LR__1011-@LR__1008)>>2,fcache_load_ptr_
0b878                 | LR__1008
0b878                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0b878     52 00 00 FF 
0b87c     10 E4 05 F1 | 	add	objptr, ##42000
0b880     F2 06 02 FB | 	rdlong	_var04, objptr
0b884     52 00 00 FF 
0b888     10 E4 85 F1 | 	sub	objptr, ##42000
0b88c     04 05 C2 F9 | 	decod	_var03, _var05
0b890     02 07 CA F7 | 	test	_var04, _var03 wz
0b894     80 00 90 AD |  if_e	jmp	#LR__1009
0b898     04 0B 02 F6 | 	mov	_var06, _var05
0b89c     02 0A 66 F0 | 	shl	_var06, #2
0b8a0     80 04 06 F6 | 	mov	_var03, #128
0b8a4     05 05 02 F1 | 	add	_var03, _var06
0b8a8     4D 00 00 FF 
0b8ac     B4 E5 05 F1 | 	add	objptr, ##39860
0b8b0     F2 04 02 F1 | 	add	_var03, objptr
0b8b4     02 FF 48 FC | 	wrbyte	#127, _var03
0b8b8     04 0B 02 F6 | 	mov	_var06, _var05
0b8bc     02 0A 66 F0 | 	shl	_var06, #2
0b8c0     80 04 06 F6 | 	mov	_var03, #128
0b8c4     05 05 02 F1 | 	add	_var03, _var06
0b8c8     01 04 06 F1 | 	add	_var03, #1
0b8cc     F2 04 02 F1 | 	add	_var03, objptr
0b8d0     02 01 49 FC | 	wrbyte	#128, _var03
0b8d4     04 0B 02 F6 | 	mov	_var06, _var05
0b8d8     02 0A 66 F0 | 	shl	_var06, #2
0b8dc     80 04 06 F6 | 	mov	_var03, #128
0b8e0     05 05 02 F1 | 	add	_var03, _var06
0b8e4     02 04 06 F1 | 	add	_var03, #2
0b8e8     F2 04 02 F1 | 	add	_var03, objptr
0b8ec     02 FF 48 FC | 	wrbyte	#127, _var03
0b8f0     04 0B 02 F6 | 	mov	_var06, _var05
0b8f4     02 0A 66 F0 | 	shl	_var06, #2
0b8f8     80 04 06 F6 | 	mov	_var03, #128
0b8fc     05 05 02 F1 | 	add	_var03, _var06
0b900     03 04 06 F1 | 	add	_var03, #3
0b904     F2 04 02 F1 | 	add	_var03, objptr
0b908     02 01 49 FC | 	wrbyte	#128, _var03
0b90c     4D 00 00 FF 
0b910     B4 E5 85 F1 | 	sub	objptr, ##39860
0b914     7C 00 90 FD | 	jmp	#LR__1010
0b918                 | LR__1009
0b918     04 0B 02 F6 | 	mov	_var06, _var05
0b91c     02 0A 66 F0 | 	shl	_var06, #2
0b920     80 04 06 F6 | 	mov	_var03, #128
0b924     05 05 02 F1 | 	add	_var03, _var06
0b928     4D 00 00 FF 
0b92c     B4 E5 05 F1 | 	add	objptr, ##39860
0b930     F2 04 02 F1 | 	add	_var03, objptr
0b934     02 01 49 FC | 	wrbyte	#128, _var03
0b938     04 0B 02 F6 | 	mov	_var06, _var05
0b93c     02 0A 66 F0 | 	shl	_var06, #2
0b940     80 04 06 F6 | 	mov	_var03, #128
0b944     05 05 02 F1 | 	add	_var03, _var06
0b948     01 04 06 F1 | 	add	_var03, #1
0b94c     F2 04 02 F1 | 	add	_var03, objptr
0b950     02 01 49 FC | 	wrbyte	#128, _var03
0b954     04 0B 02 F6 | 	mov	_var06, _var05
0b958     02 0A 66 F0 | 	shl	_var06, #2
0b95c     80 04 06 F6 | 	mov	_var03, #128
0b960     05 05 02 F1 | 	add	_var03, _var06
0b964     02 04 06 F1 | 	add	_var03, #2
0b968     F2 04 02 F1 | 	add	_var03, objptr
0b96c     02 FF 48 FC | 	wrbyte	#127, _var03
0b970     04 0B 02 F6 | 	mov	_var06, _var05
0b974     02 0A 66 F0 | 	shl	_var06, #2
0b978     80 04 06 F6 | 	mov	_var03, #128
0b97c     05 05 02 F1 | 	add	_var03, _var06
0b980     03 04 06 F1 | 	add	_var03, #3
0b984     F2 04 02 F1 | 	add	_var03, objptr
0b988     02 FF 48 FC | 	wrbyte	#127, _var03
0b98c     4D 00 00 FF 
0b990     B4 E5 85 F1 | 	sub	objptr, ##39860
0b994                 | LR__1010
0b994     01 08 06 F1 | 	add	_var05, #1
0b998     20 08 56 F2 | 	cmps	_var05, #32 wc
0b99c     D8 FE 9F CD |  if_b	jmp	#LR__1008
0b9a0                 | LR__1011
0b9a0     02 02 06 F1 | 	add	_var02, #2
0b9a4     40 02 56 F2 | 	cmps	_var02, #64 wc
0b9a8     3C FD 9F CD |  if_b	jmp	#LR__1000
0b9ac                 | ' do: loop until lpeek(base+64*7)>32768
0b9ac     37 00 00 FF 
0b9b0     10 E4 05 F1 | 	add	objptr, ##28176
0b9b4     97 84 48 FB | 	callpa	#(@LR__1020-@LR__1012)>>2,fcache_load_ptr_
0b9b8                 | LR__1012
0b9b8     F2 12 02 FB | 	rdlong	arg01, objptr
0b9bc     C0 13 06 F1 | 	add	arg01, #448
0b9c0     09 FB 01 FB | 	rdlong	result1, arg01
0b9c4     40 00 00 FF 
0b9c8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b9cc     E8 FF 9F CD |  if_b	jmp	#LR__1012
0b9d0     37 00 00 FF 
0b9d4     10 E4 85 F1 | 	sub	objptr, ##28176
0b9d8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b9d8     00 02 06 F6 | 	mov	_var02, #0
0b9dc                 | LR__1013
0b9dc     01 07 52 F6 | 	abs	_var04, _var02 wc
0b9e0     07 06 06 F5 | 	and	_var04, #7
0b9e4     03 07 82 F6 | 	negc	_var04, _var04
0b9e8     04 06 56 F2 | 	cmps	_var04, #4 wc
0b9ec     20 00 90 3D |  if_ae	jmp	#LR__1014
0b9f0     01 0B 02 F6 | 	mov	_var06, _var02
0b9f4     4D 00 00 FF 
0b9f8     B4 E5 05 F1 | 	add	objptr, ##39860
0b9fc     F2 0A 02 F1 | 	add	_var06, objptr
0ba00     05 FF 48 FC | 	wrbyte	#127, _var06
0ba04     4D 00 00 FF 
0ba08     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba0c     1C 00 90 FD | 	jmp	#LR__1015
0ba10                 | LR__1014
0ba10     01 0B 02 F6 | 	mov	_var06, _var02
0ba14     4D 00 00 FF 
0ba18     B4 E5 05 F1 | 	add	objptr, ##39860
0ba1c     F2 0A 02 F1 | 	add	_var06, objptr
0ba20     05 01 49 FC | 	wrbyte	#128, _var06
0ba24     4D 00 00 FF 
0ba28     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba2c                 | LR__1015
0ba2c     01 02 06 F1 | 	add	_var02, #1
0ba30     80 02 56 F2 | 	cmps	_var02, #128 wc
0ba34     A4 FF 9F CD |  if_b	jmp	#LR__1013
0ba38                 | ' 
0ba38                 | ' do: loop until lpeek(base+64*7)<32768
0ba38     37 00 00 FF 
0ba3c     10 E4 05 F1 | 	add	objptr, ##28176
0ba40                 | LR__1016
0ba40     F2 12 02 FB | 	rdlong	arg01, objptr
0ba44     C0 13 06 F1 | 	add	arg01, #448
0ba48     09 FB 01 FB | 	rdlong	result1, arg01
0ba4c     40 00 00 FF 
0ba50     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ba54     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0ba58     37 00 00 FF 
0ba5c     10 E4 85 F1 | 	sub	objptr, ##28176
0ba60                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ba60     80 02 06 F6 | 	mov	_var02, #128
0ba64                 | LR__1017
0ba64     01 07 52 F6 | 	abs	_var04, _var02 wc
0ba68     07 06 06 F5 | 	and	_var04, #7
0ba6c     03 07 82 F6 | 	negc	_var04, _var04
0ba70     04 06 56 F2 | 	cmps	_var04, #4 wc
0ba74     20 00 90 3D |  if_ae	jmp	#LR__1018
0ba78     01 0B 02 F6 | 	mov	_var06, _var02
0ba7c     4D 00 00 FF 
0ba80     B4 E5 05 F1 | 	add	objptr, ##39860
0ba84     F2 0A 02 F1 | 	add	_var06, objptr
0ba88     05 FF 48 FC | 	wrbyte	#127, _var06
0ba8c     4D 00 00 FF 
0ba90     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba94     1C 00 90 FD | 	jmp	#LR__1019
0ba98                 | LR__1018
0ba98     01 0B 02 F6 | 	mov	_var06, _var02
0ba9c     4D 00 00 FF 
0baa0     B4 E5 05 F1 | 	add	objptr, ##39860
0baa4     F2 0A 02 F1 | 	add	_var06, objptr
0baa8     05 01 49 FC | 	wrbyte	#128, _var06
0baac     4D 00 00 FF 
0bab0     B4 E5 85 F1 | 	sub	objptr, ##39860
0bab4                 | LR__1019
0bab4     01 02 06 F1 | 	add	_var02, #1
0bab8     00 03 16 F2 | 	cmp	_var02, #256 wc
0babc     A4 FF 9F CD |  if_b	jmp	#LR__1017
0bac0                 | LR__1020
0bac0                 | _csave_block_ret
0bac0     2D 00 64 FD | 	ret
0bac4                 | 
0bac4                 | ' 
0bac4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0bac4                 | _csave_addtoblock
0bac4     04 4A 05 F6 | 	mov	COUNT_, #4
0bac8     A8 00 A0 FD | 	call	#pushregs_
0bacc     09 1F 02 F6 | 	mov	local01, arg01
0bad0                 | ' 
0bad0                 | ' if force=0 then
0bad0     07 14 4E F7 | 	zerox	arg02, #7 wz
0bad4     78 00 90 5D |  if_ne	jmp	#LR__1030
0bad8     50 00 00 FF 
0badc     B4 E4 05 F1 | 	add	objptr, ##41140
0bae0     F2 14 02 FB | 	rdlong	arg02, objptr
0bae4     02 00 00 FF 
0bae8     00 E4 85 F1 | 	sub	objptr, ##1024
0baec     F2 14 02 F1 | 	add	arg02, objptr
0baf0     0A 1F 42 FC | 	wrbyte	local01, arg02
0baf4     02 00 00 FF 
0baf8     00 E4 05 F1 | 	add	objptr, ##1024
0bafc     F2 1E 02 FB | 	rdlong	local01, objptr
0bb00     01 1E 06 F1 | 	add	local01, #1
0bb04     F2 1E 62 FC | 	wrlong	local01, objptr
0bb08                 | '   block(blockptr)=d
0bb08                 | '   blockptr+=1
0bb08                 | '   if blockptr>=255 then
0bb08     50 00 00 FF 
0bb0c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb10     FF 1E 16 F2 | 	cmp	local01, #255 wc
0bb14     E4 00 90 CD |  if_b	jmp	#LR__1034
0bb18     4E 00 00 FF 
0bb1c     B4 E4 05 F1 | 	add	objptr, ##40116
0bb20     F2 12 02 F6 | 	mov	arg01, objptr
0bb24     4E 00 00 FF 
0bb28     B4 E4 85 F1 | 	sub	objptr, ##40116
0bb2c     B0 FB BF FD | 	call	#_csave_block
0bb30     50 00 00 FF 
0bb34     B4 E4 05 F1 | 	add	objptr, ##41140
0bb38     F2 00 68 FC | 	wrlong	#0, objptr
0bb3c     50 00 00 FF 
0bb40     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb44     2C 13 06 F6 | 	mov	arg01, #300
0bb48     F4 4F B1 FD | 	call	#__system___waitms
0bb4c     AC 00 90 FD | 	jmp	#LR__1034
0bb50                 | LR__1030
0bb50     50 00 00 FF 
0bb54     B4 E4 05 F1 | 	add	objptr, ##41140
0bb58     F2 20 02 FB | 	rdlong	local02, objptr
0bb5c     02 00 00 FF 
0bb60     00 E4 85 F1 | 	sub	objptr, ##1024
0bb64     F2 20 02 F1 | 	add	local02, objptr
0bb68     10 1F 42 FC | 	wrbyte	local01, local02
0bb6c                 | '   block(blockptr)=d
0bb6c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0bb6c     02 00 00 FF 
0bb70     00 E4 05 F1 | 	add	objptr, ##1024
0bb74     F2 22 02 FB | 	rdlong	local03, objptr
0bb78     50 00 00 FF 
0bb7c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb80     FF 22 16 F2 | 	cmp	local03, #255 wc
0bb84     40 00 90 3D |  if_ae	jmp	#LR__1033
0bb88     50 00 00 FF 
0bb8c     B4 E4 05 F1 | 	add	objptr, ##41140
0bb90     F2 24 02 FB | 	rdlong	local04, objptr
0bb94     50 00 00 FF 
0bb98     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb9c                 | LR__1031
0bb9c     00 25 56 F2 | 	cmps	local04, #256 wc
0bba0     24 00 90 3D |  if_ae	jmp	#LR__1032
0bba4     12 21 02 F6 | 	mov	local02, local04
0bba8     4E 00 00 FF 
0bbac     B4 E4 05 F1 | 	add	objptr, ##40116
0bbb0     F2 20 02 F1 | 	add	local02, objptr
0bbb4     10 01 48 FC | 	wrbyte	#0, local02
0bbb8     01 24 06 F1 | 	add	local04, #1
0bbbc     4E 00 00 FF 
0bbc0     B4 E4 85 F1 | 	sub	objptr, ##40116
0bbc4     D4 FF 9F FD | 	jmp	#LR__1031
0bbc8                 | LR__1032
0bbc8                 | LR__1033
0bbc8     4E 00 00 FF 
0bbcc     B4 E4 05 F1 | 	add	objptr, ##40116
0bbd0     F2 12 02 F6 | 	mov	arg01, objptr
0bbd4     4E 00 00 FF 
0bbd8     B4 E4 85 F1 | 	sub	objptr, ##40116
0bbdc     00 FB BF FD | 	call	#_csave_block
0bbe0     50 00 00 FF 
0bbe4     B4 E4 05 F1 | 	add	objptr, ##41140
0bbe8     F2 00 68 FC | 	wrlong	#0, objptr
0bbec     50 00 00 FF 
0bbf0     B4 E4 85 F1 | 	sub	objptr, ##41140
0bbf4     2C 13 06 F6 | 	mov	arg01, #300
0bbf8     44 4F B1 FD | 	call	#__system___waitms
0bbfc                 | LR__1034
0bbfc     A7 F0 03 F6 | 	mov	ptra, fp
0bc00     B2 00 A0 FD | 	call	#popregs_
0bc04                 | _csave_addtoblock_ret
0bc04     2D 00 64 FD | 	ret
0bc08                 | 
0bc08                 | ' 
0bc08                 | ' '----------------------- csave
0bc08                 | ' 
0bc08                 | ' sub test_csave
0bc08                 | _test_csave
0bc08     04 4A 05 F6 | 	mov	COUNT_, #4
0bc0c     A8 00 A0 FD | 	call	#pushregs_
0bc10     C0 F0 07 F1 | 	add	ptra, #192
0bc14                 | ' 'dim fileheader,savestart, saveptr as ulong
0bc14                 | ' 
0bc14                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0bc14     4A 00 00 FF 
0bc18     88 E4 05 F1 | 	add	objptr, ##38024
0bc1c     F2 12 02 FB | 	rdlong	arg01, objptr
0bc20     4A 00 00 FF 
0bc24     88 E4 85 F1 | 	sub	objptr, ##38024
0bc28     24 19 B1 FD | 	call	#_pslpeek
0bc2c     FF FF 7F FF 
0bc30     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0bc34     0C 00 90 5D |  if_ne	jmp	#LR__1040
0bc38     1B 12 06 F6 | 	mov	arg01, #27
0bc3c     7C 16 B1 FD | 	call	#_printerror
0bc40     1C 03 90 FD | 	jmp	#LR__1054
0bc44                 | LR__1040
0bc44     54 F7 BF FD | 	call	#_pop
0bc48     90 4E 05 F1 | 	add	fp, #144
0bc4c     A7 FA 61 FC | 	wrlong	result1, fp
0bc50     04 4E 05 F1 | 	add	fp, #4
0bc54     A7 FC 61 FC | 	wrlong	result2, fp
0bc58     04 4E 05 F1 | 	add	fp, #4
0bc5c     A7 FE 61 FC | 	wrlong	result3, fp
0bc60                 | ' t1=pop()
0bc60                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0bc60     98 4E 85 F1 | 	sub	fp, #152
0bc64     1F FE 0D F2 | 	cmp	result3, #31 wz
0bc68     24 00 90 AD |  if_e	jmp	#LR__1041
0bc6c     51 00 00 FF 
0bc70     D8 E5 05 F1 | 	add	objptr, ##41944
0bc74     F2 1C 02 FB | 	rdlong	arg06, objptr
0bc78     51 00 00 FF 
0bc7c     D8 E5 85 F1 | 	sub	objptr, ##41944
0bc80     8C 4E 05 F1 | 	add	fp, #140
0bc84     A7 1C 62 FC | 	wrlong	arg06, fp
0bc88     8C 4E 85 F1 | 	sub	fp, #140
0bc8c     14 00 90 FD | 	jmp	#LR__1042
0bc90                 | LR__1041
0bc90     90 4E 05 F1 | 	add	fp, #144
0bc94     A7 1C 02 FB | 	rdlong	arg06, fp
0bc98     04 4E 85 F1 | 	sub	fp, #4
0bc9c     A7 1C 62 FC | 	wrlong	arg06, fp
0bca0     8C 4E 85 F1 | 	sub	fp, #140
0bca4                 | LR__1042
0bca4                 | ' 
0bca4                 | ' ' prepare 1 kHz header wave
0bca4                 | ' 
0bca4                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bca4     A7 00 68 FC | 	wrlong	#0, fp
0bca8     97 34 48 FB | 	callpa	#(@LR__1046-@LR__1043)>>2,fcache_load_ptr_
0bcac                 | LR__1043
0bcac     A7 1C 02 FB | 	rdlong	arg06, fp
0bcb0     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0bcb4     07 1A 06 F5 | 	and	arg05, #7
0bcb8     0D 1B 82 F6 | 	negc	arg05, arg05
0bcbc     04 1A 56 F2 | 	cmps	arg05, #4 wc
0bcc0     20 00 90 3D |  if_ae	jmp	#LR__1044
0bcc4     A7 1A 02 FB | 	rdlong	arg05, fp
0bcc8     4D 00 00 FF 
0bccc     B4 E5 05 F1 | 	add	objptr, ##39860
0bcd0     F2 1A 02 F1 | 	add	arg05, objptr
0bcd4     0D FF 48 FC | 	wrbyte	#127, arg05
0bcd8     4D 00 00 FF 
0bcdc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bce0     1C 00 90 FD | 	jmp	#LR__1045
0bce4                 | LR__1044
0bce4     A7 1A 02 FB | 	rdlong	arg05, fp
0bce8     4D 00 00 FF 
0bcec     B4 E5 05 F1 | 	add	objptr, ##39860
0bcf0     F2 1A 02 F1 | 	add	arg05, objptr
0bcf4     0D 01 49 FC | 	wrbyte	#128, arg05
0bcf8     4D 00 00 FF 
0bcfc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd00                 | LR__1045
0bd00     A7 1A 02 FB | 	rdlong	arg05, fp
0bd04     01 1A 06 F1 | 	add	arg05, #1
0bd08     A7 1A 62 FC | 	wrlong	arg05, fp
0bd0c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0bd10     98 FF 9F CD |  if_b	jmp	#LR__1043
0bd14                 | LR__1046
0bd14     4D 00 00 FF 
0bd18     B4 E5 05 F1 | 	add	objptr, ##39860
0bd1c     F2 14 02 F6 | 	mov	arg02, objptr
0bd20     07 12 06 F6 | 	mov	arg01, #7
0bd24     0F 00 00 FF 
0bd28     40 17 06 F6 | 	mov	arg03, ##8000
0bd2c     0E 18 C6 F9 | 	decod	arg04, #14
0bd30     00 1B 06 F6 | 	mov	arg05, #256
0bd34     00 1C 06 F6 | 	mov	arg06, #0
0bd38     42 00 00 FF 
0bd3c     E8 E4 85 F1 | 	sub	objptr, ##34024
0bd40     64 47 B1 FD | 	call	#_audio096_spin2_play8
0bd44     0B 00 00 FF 
0bd48     CC E4 85 F1 | 	sub	objptr, ##5836
0bd4c     05 00 00 FF 
0bd50     B8 13 06 F6 | 	mov	arg01, ##3000
0bd54     E8 4D B1 FD | 	call	#__system___waitms
0bd58     50 00 00 FF 
0bd5c     B4 E4 05 F1 | 	add	objptr, ##41140
0bd60     F2 00 68 FC | 	wrlong	#0, objptr
0bd64     50 00 00 FF 
0bd68     B4 E4 85 F1 | 	sub	objptr, ##41140
0bd6c     72 12 06 F6 | 	mov	arg01, #114
0bd70     00 14 06 F6 | 	mov	arg02, #0
0bd74     4C FD BF FD | 	call	#_csave_addtoblock
0bd78     62 12 06 F6 | 	mov	arg01, #98
0bd7c     00 14 06 F6 | 	mov	arg02, #0
0bd80     40 FD BF FD | 	call	#_csave_addtoblock
0bd84     61 12 06 F6 | 	mov	arg01, #97
0bd88     00 14 06 F6 | 	mov	arg02, #0
0bd8c     34 FD BF FD | 	call	#_csave_addtoblock
0bd90     0D 12 06 F6 | 	mov	arg01, #13
0bd94     00 14 06 F6 | 	mov	arg02, #0
0bd98     28 FD BF FD | 	call	#_csave_addtoblock
0bd9c                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0bd9c                 | ' waitms 3000 
0bd9c                 | ' 
0bd9c                 | ' blockptr=0
0bd9c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0bd9c                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0bd9c     A7 02 68 FC | 	wrlong	#1, fp
0bda0     8C 4E 05 F1 | 	add	fp, #140
0bda4     A7 12 02 FB | 	rdlong	arg01, fp
0bda8     8C 4E 85 F1 | 	sub	fp, #140
0bdac     09 1F 02 F6 | 	mov	local01, arg01
0bdb0     97 06 48 FB | 	callpa	#(@LR__1048-@LR__1047)>>2,fcache_load_ptr_
0bdb4                 | LR__1047
0bdb4     0F FB C9 FA | 	rdbyte	result1, local01 wz
0bdb8     01 1E 06 51 |  if_ne	add	local01, #1
0bdbc     F4 FF 9F 5D |  if_ne	jmp	#LR__1047
0bdc0                 | LR__1048
0bdc0     09 1F 82 F1 | 	sub	local01, arg01
0bdc4     0F 21 02 F6 | 	mov	local02, local01
0bdc8     01 20 06 F1 | 	add	local02, #1
0bdcc                 | LR__1049
0bdcc     A7 1A 02 FB | 	rdlong	arg05, fp
0bdd0     10 1B 52 F2 | 	cmps	arg05, local02 wc
0bdd4     34 00 90 3D |  if_ae	jmp	#LR__1050
0bdd8     8C 4E 05 F1 | 	add	fp, #140
0bddc     A7 12 02 FB | 	rdlong	arg01, fp
0bde0     8C 4E 85 F1 | 	sub	fp, #140
0bde4     A7 14 02 FB | 	rdlong	arg02, fp
0bde8     01 16 06 F6 | 	mov	arg03, #1
0bdec     F0 6B B1 FD | 	call	#__system__Mid_S
0bdf0     FD 12 C2 FA | 	rdbyte	arg01, result1
0bdf4     00 14 06 F6 | 	mov	arg02, #0
0bdf8     C8 FC BF FD | 	call	#_csave_addtoblock
0bdfc     A7 1A 02 FB | 	rdlong	arg05, fp
0be00     01 1A 06 F1 | 	add	arg05, #1
0be04     A7 1A 62 FC | 	wrlong	arg05, fp
0be08     C0 FF 9F FD | 	jmp	#LR__1049
0be0c                 | LR__1050
0be0c     00 12 06 F6 | 	mov	arg01, #0
0be10     00 14 06 F6 | 	mov	arg02, #0
0be14     AC FC BF FD | 	call	#_csave_addtoblock
0be18     72 12 06 F6 | 	mov	arg01, #114
0be1c     00 14 06 F6 | 	mov	arg02, #0
0be20     A0 FC BF FD | 	call	#_csave_addtoblock
0be24     62 12 06 F6 | 	mov	arg01, #98
0be28     00 14 06 F6 | 	mov	arg02, #0
0be2c     94 FC BF FD | 	call	#_csave_addtoblock
0be30     73 12 06 F6 | 	mov	arg01, #115
0be34     00 14 06 F6 | 	mov	arg02, #0
0be38     88 FC BF FD | 	call	#_csave_addtoblock
0be3c     0D 12 06 F6 | 	mov	arg01, #13
0be40     00 14 06 F6 | 	mov	arg02, #0
0be44     7C FC BF FD | 	call	#_csave_addtoblock
0be48     4A 00 00 FF 
0be4c     88 E4 05 F1 | 	add	objptr, ##38024
0be50     F2 22 02 FB | 	rdlong	local03, objptr
0be54     4A 00 00 FF 
0be58     88 E4 85 F1 | 	sub	objptr, ##38024
0be5c     9C 4E 05 F1 | 	add	fp, #156
0be60     A7 22 62 FC | 	wrlong	local03, fp
0be64     9C 4E 85 F1 | 	sub	fp, #156
0be68                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0be68                 | ' 
0be68                 | ' saveptr=programstart
0be68                 | ' do
0be68                 | LR__1051
0be68     A0 4E 05 F1 | 	add	fp, #160
0be6c     A7 12 02 F6 | 	mov	arg01, fp
0be70     04 4E 85 F1 | 	sub	fp, #4
0be74     A7 14 02 FB | 	rdlong	arg02, fp
0be78     9C 4E 85 F1 | 	sub	fp, #156
0be7c     18 16 06 F6 | 	mov	arg03, #24
0be80     0B 00 00 FF 
0be84     CC E4 05 F1 | 	add	objptr, ##5836
0be88     80 3D B1 FD | 	call	#_psram_spin2_read1
0be8c     0C 4E 05 F1 | 	add	fp, #12
0be90     A7 12 02 F6 | 	mov	arg01, fp
0be94     9C 4E 05 F1 | 	add	fp, #156
0be98     A7 14 02 FB | 	rdlong	arg02, fp
0be9c     04 4E 05 F1 | 	add	fp, #4
0bea0     A7 16 02 FB | 	rdlong	arg03, fp
0bea4     AC 4E 85 F1 | 	sub	fp, #172
0bea8     60 3D B1 FD | 	call	#_psram_spin2_read1
0beac     0B 00 00 FF 
0beb0     CC E4 85 F1 | 	sub	objptr, ##5836
0beb4     AC 4E 05 F1 | 	add	fp, #172
0beb8     A7 12 02 FB | 	rdlong	arg01, fp
0bebc     AC 4E 85 F1 | 	sub	fp, #172
0bec0     00 14 06 F6 | 	mov	arg02, #0
0bec4     FC FB BF FD | 	call	#_csave_addtoblock
0bec8                 | ' 
0bec8                 | '   psram.read1(varptr(header(0)),saveptr,24)
0bec8                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0bec8                 | '   csave_addtoblock(header(3),0) ' that's always <255
0bec8                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0bec8     A7 00 68 FC | 	wrlong	#0, fp
0becc     AC 4E 05 F1 | 	add	fp, #172
0bed0     A7 24 02 FB | 	rdlong	local04, fp
0bed4     AC 4E 85 F1 | 	sub	fp, #172
0bed8                 | LR__1052
0bed8     A7 22 02 FB | 	rdlong	local03, fp
0bedc     12 23 52 F2 | 	cmps	local03, local04 wc
0bee0     2C 00 90 3D |  if_ae	jmp	#LR__1053
0bee4     A7 22 02 FB | 	rdlong	local03, fp
0bee8     0C 4E 05 F1 | 	add	fp, #12
0beec     A7 22 02 F1 | 	add	local03, fp
0bef0     11 13 C2 FA | 	rdbyte	arg01, local03
0bef4     00 14 06 F6 | 	mov	arg02, #0
0bef8     0C 4E 85 F1 | 	sub	fp, #12
0befc     C4 FB BF FD | 	call	#_csave_addtoblock
0bf00     A7 22 02 FB | 	rdlong	local03, fp
0bf04     01 22 06 F1 | 	add	local03, #1
0bf08     A7 22 62 FC | 	wrlong	local03, fp
0bf0c     C8 FF 9F FD | 	jmp	#LR__1052
0bf10                 | LR__1053
0bf10     B4 4E 05 F1 | 	add	fp, #180
0bf14     A7 22 02 FB | 	rdlong	local03, fp
0bf18     18 4E 85 F1 | 	sub	fp, #24
0bf1c     A7 22 62 FC | 	wrlong	local03, fp
0bf20     18 4E 05 F1 | 	add	fp, #24
0bf24     A7 22 02 FB | 	rdlong	local03, fp
0bf28     B4 4E 85 F1 | 	sub	fp, #180
0bf2c     FF FF 3F FF 
0bf30     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0bf34     30 FF 9F 5D |  if_ne	jmp	#LR__1051
0bf38     00 12 06 F6 | 	mov	arg01, #0
0bf3c     01 14 06 F6 | 	mov	arg02, #1
0bf40     80 FB BF FD | 	call	#_csave_addtoblock
0bf44     37 00 00 FF 
0bf48     10 E4 05 F1 | 	add	objptr, ##28176
0bf4c     F2 12 02 FB | 	rdlong	arg01, objptr
0bf50     37 00 00 FF 
0bf54     10 E4 85 F1 | 	sub	objptr, ##28176
0bf58     D4 13 06 F1 | 	add	arg01, #468
0bf5c     09 01 58 FC | 	wrword	#0, arg01
0bf60                 | LR__1054
0bf60     A7 F0 03 F6 | 	mov	ptra, fp
0bf64     B2 00 A0 FD | 	call	#popregs_
0bf68                 | _test_csave_ret
0bf68     2D 00 64 FD | 	ret
0bf6c                 | 
0bf6c                 | ' 
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' 
0bf6c                 | ' 
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' 
0bf6c                 | ' '-------------------- abs
0bf6c                 | ' 
0bf6c                 | ' sub do_abs
0bf6c                 | _do_abs
0bf6c     01 4A 05 F6 | 	mov	COUNT_, #1
0bf70     A8 00 A0 FD | 	call	#pushregs_
0bf74     0C F0 07 F1 | 	add	ptra, #12
0bf78     20 F4 BF FD | 	call	#_pop
0bf7c     FF 1E 02 F6 | 	mov	local01, result3
0bf80     A7 FA 61 FC | 	wrlong	result1, fp
0bf84     04 4E 05 F1 | 	add	fp, #4
0bf88     A7 FC 61 FC | 	wrlong	result2, fp
0bf8c     04 4E 05 F1 | 	add	fp, #4
0bf90     A7 1E 62 FC | 	wrlong	local01, fp
0bf94                 | ' 
0bf94                 | ' t1=pop()
0bf94                 | ' if t1.result_type=result_int then 
0bf94     08 4E 85 F1 | 	sub	fp, #8
0bf98     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bf9c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0bfa0     09 1F 42 A6 |  if_e	abs	local01, arg01
0bfa4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0bfa8     2C 00 90 AD |  if_e	jmp	#LR__1060
0bfac     08 4E 05 F1 | 	add	fp, #8
0bfb0     A7 1E 02 FB | 	rdlong	local01, fp
0bfb4     08 4E 85 F1 | 	sub	fp, #8
0bfb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bfbc     A7 FA 01 AB |  if_e	rdlong	result1, fp
0bfc0     1F FA 05 A4 |  if_e	bitl	result1, #31
0bfc4     A7 FA 61 AC |  if_e	wrlong	result1, fp
0bfc8     08 4E 05 51 |  if_ne	add	fp, #8
0bfcc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bfd0     08 4E 85 51 |  if_ne	sub	fp, #8
0bfd4     A7 50 68 5C |  if_ne	wrlong	#40, fp
0bfd8                 | LR__1060
0bfd8     A7 12 02 F6 | 	mov	arg01, fp
0bfdc     54 F4 BF FD | 	call	#_push
0bfe0     A7 F0 03 F6 | 	mov	ptra, fp
0bfe4     B2 00 A0 FD | 	call	#popregs_
0bfe8                 | _do_abs_ret
0bfe8     2D 00 64 FD | 	ret
0bfec                 | 
0bfec                 | ' 
0bfec                 | ' '-------------------- acos
0bfec                 | ' 
0bfec                 | ' sub do_acos
0bfec                 | _do_acos
0bfec     01 4A 05 F6 | 	mov	COUNT_, #1
0bff0     A8 00 A0 FD | 	call	#pushregs_
0bff4     10 F0 07 F1 | 	add	ptra, #16
0bff8     4A 00 00 FF 
0bffc     80 E4 05 F1 | 	add	objptr, ##38016
0c000     F2 1E 02 FB | 	rdlong	local01, objptr
0c004     0F 17 02 F6 | 	mov	arg03, local01
0c008     01 16 66 F0 | 	shl	arg03, #1
0c00c     0F 17 02 F1 | 	add	arg03, local01
0c010     02 16 66 F0 | 	shl	arg03, #2
0c014     03 00 00 FF 
0c018     04 E4 85 F1 | 	sub	objptr, ##1540
0c01c     F2 16 02 F1 | 	add	arg03, objptr
0c020     0B 17 02 FB | 	rdlong	arg03, arg03
0c024     0C 4E 05 F1 | 	add	fp, #12
0c028     A7 16 62 FC | 	wrlong	arg03, fp
0c02c                 | ' 
0c02c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c02c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c02c     0C 4E 85 F1 | 	sub	fp, #12
0c030     02 16 16 F2 | 	cmp	arg03, #2 wc
0c034     47 00 00 FF 
0c038     7C E4 85 F1 | 	sub	objptr, ##36476
0c03c     0C 4E 05 C1 |  if_b	add	fp, #12
0c040     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c044     0C 4E 85 C1 |  if_b	sub	fp, #12
0c048     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1070
0c04c     00 12 06 F6 | 	mov	arg01, #0
0c050     5C A2 B1 FD | 	call	#__system___getiolock_0541
0c054     FD 12 02 F6 | 	mov	arg01, result1
0c058     F0 47 B1 FD | 	call	#__system___lockmem
0c05c     83 01 00 FF 
0c060     4F 15 06 F6 | 	mov	arg02, ##@LR__5415
0c064     00 12 06 F6 | 	mov	arg01, #0
0c068     00 16 06 F6 | 	mov	arg03, #0
0c06c     D0 54 B1 FD | 	call	#__system___basic_print_string
0c070     00 12 06 F6 | 	mov	arg01, #0
0c074     38 A2 B1 FD | 	call	#__system___getiolock_0541
0c078     FD 00 68 FC | 	wrlong	#0, result1
0c07c     27 12 06 F6 | 	mov	arg01, #39
0c080     38 12 B1 FD | 	call	#_printerror
0c084     64 00 90 FD | 	jmp	#LR__1071
0c088                 | LR__1070
0c088     10 F3 BF FD | 	call	#_pop
0c08c     FF 1E 02 F6 | 	mov	local01, result3
0c090     A7 FA 61 FC | 	wrlong	result1, fp
0c094     04 4E 05 F1 | 	add	fp, #4
0c098     A7 FC 61 FC | 	wrlong	result2, fp
0c09c     04 4E 05 F1 | 	add	fp, #4
0c0a0     A7 1E 62 FC | 	wrlong	local01, fp
0c0a4     08 4E 85 F1 | 	sub	fp, #8
0c0a8     A7 12 02 F6 | 	mov	arg01, fp
0c0ac     8C F5 BF FD | 	call	#_converttofloat
0c0b0     FD 12 02 F6 | 	mov	arg01, result1
0c0b4     88 7E B1 FD | 	call	#__system____builtin_acosf
0c0b8     FD 12 02 F6 | 	mov	arg01, result1
0c0bc     51 00 00 FF 
0c0c0     C0 E5 05 F1 | 	add	objptr, ##41920
0c0c4     F2 14 02 FB | 	rdlong	arg02, objptr
0c0c8     51 00 00 FF 
0c0cc     C0 E5 85 F1 | 	sub	objptr, ##41920
0c0d0     2C 73 B1 FD | 	call	#__system___float_mul
0c0d4     A7 FA 61 FC | 	wrlong	result1, fp
0c0d8     08 4E 05 F1 | 	add	fp, #8
0c0dc     A7 3C 68 FC | 	wrlong	#30, fp
0c0e0     08 4E 85 F1 | 	sub	fp, #8
0c0e4     A7 12 02 F6 | 	mov	arg01, fp
0c0e8     48 F3 BF FD | 	call	#_push
0c0ec                 | LR__1071
0c0ec     A7 F0 03 F6 | 	mov	ptra, fp
0c0f0     B2 00 A0 FD | 	call	#popregs_
0c0f4                 | _do_acos_ret
0c0f4     2D 00 64 FD | 	ret
0c0f8                 | 
0c0f8                 | ' 
0c0f8                 | ' '-------------------- asc
0c0f8                 | ' 
0c0f8                 | ' sub do_asc
0c0f8                 | _do_asc
0c0f8     01 4A 05 F6 | 	mov	COUNT_, #1
0c0fc     A8 00 A0 FD | 	call	#pushregs_
0c100     14 F0 07 F1 | 	add	ptra, #20
0c104     4A 00 00 FF 
0c108     80 E4 05 F1 | 	add	objptr, ##38016
0c10c     F2 1E 02 FB | 	rdlong	local01, objptr
0c110     0F 17 02 F6 | 	mov	arg03, local01
0c114     01 16 66 F0 | 	shl	arg03, #1
0c118     0F 17 02 F1 | 	add	arg03, local01
0c11c     02 16 66 F0 | 	shl	arg03, #2
0c120     03 00 00 FF 
0c124     04 E4 85 F1 | 	sub	objptr, ##1540
0c128     F2 16 02 F1 | 	add	arg03, objptr
0c12c     0B 17 02 FB | 	rdlong	arg03, arg03
0c130     0C 4E 05 F1 | 	add	fp, #12
0c134     A7 16 62 FC | 	wrlong	arg03, fp
0c138                 | ' 
0c138                 | ' numpar=compiledline(lineptr_e).result.uresult
0c138                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c138     0C 4E 85 F1 | 	sub	fp, #12
0c13c     02 16 16 F2 | 	cmp	arg03, #2 wc
0c140     47 00 00 FF 
0c144     7C E4 85 F1 | 	sub	objptr, ##36476
0c148     0C 4E 05 C1 |  if_b	add	fp, #12
0c14c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c150     0C 4E 85 C1 |  if_b	sub	fp, #12
0c154     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c158     00 12 06 F6 | 	mov	arg01, #0
0c15c     50 A1 B1 FD | 	call	#__system___getiolock_0541
0c160     FD 12 02 F6 | 	mov	arg01, result1
0c164     E4 46 B1 FD | 	call	#__system___lockmem
0c168     83 01 00 FF 
0c16c     56 15 06 F6 | 	mov	arg02, ##@LR__5416
0c170     00 12 06 F6 | 	mov	arg01, #0
0c174     00 16 06 F6 | 	mov	arg03, #0
0c178     C4 53 B1 FD | 	call	#__system___basic_print_string
0c17c     00 12 06 F6 | 	mov	arg01, #0
0c180     2C A1 B1 FD | 	call	#__system___getiolock_0541
0c184     FD 00 68 FC | 	wrlong	#0, result1
0c188     27 12 06 F6 | 	mov	arg01, #39
0c18c     2C 11 B1 FD | 	call	#_printerror
0c190     B0 00 90 FD | 	jmp	#LR__1083
0c194                 | LR__1080
0c194     04 F2 BF FD | 	call	#_pop
0c198     FF 16 02 F6 | 	mov	arg03, result3
0c19c     A7 FA 61 FC | 	wrlong	result1, fp
0c1a0     04 4E 05 F1 | 	add	fp, #4
0c1a4     A7 FC 61 FC | 	wrlong	result2, fp
0c1a8     04 4E 05 F1 | 	add	fp, #4
0c1ac     A7 16 62 FC | 	wrlong	arg03, fp
0c1b0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c1b0     08 4E 85 F1 | 	sub	fp, #8
0c1b4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c1b8     18 00 90 5D |  if_ne	jmp	#LR__1081
0c1bc     A7 12 02 FB | 	rdlong	arg01, fp
0c1c0     50 F3 BF FD | 	call	#_convertstring
0c1c4     A7 FA 61 FC | 	wrlong	result1, fp
0c1c8     08 4E 05 F1 | 	add	fp, #8
0c1cc     A7 3E 68 FC | 	wrlong	#31, fp
0c1d0     08 4E 85 F1 | 	sub	fp, #8
0c1d4                 | LR__1081
0c1d4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c1d4     08 4E 05 F1 | 	add	fp, #8
0c1d8     A7 16 02 FB | 	rdlong	arg03, fp
0c1dc     08 4E 85 F1 | 	sub	fp, #8
0c1e0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c1e4     3C 00 90 AD |  if_e	jmp	#LR__1082
0c1e8     00 12 06 F6 | 	mov	arg01, #0
0c1ec     C0 A0 B1 FD | 	call	#__system___getiolock_0541
0c1f0     FD 12 02 F6 | 	mov	arg01, result1
0c1f4     54 46 B1 FD | 	call	#__system___lockmem
0c1f8     83 01 00 FF 
0c1fc     5C 15 06 F6 | 	mov	arg02, ##@LR__5417
0c200     00 12 06 F6 | 	mov	arg01, #0
0c204     00 16 06 F6 | 	mov	arg03, #0
0c208     34 53 B1 FD | 	call	#__system___basic_print_string
0c20c     00 12 06 F6 | 	mov	arg01, #0
0c210     9C A0 B1 FD | 	call	#__system___getiolock_0541
0c214     FD 00 68 FC | 	wrlong	#0, result1
0c218     0F 12 06 F6 | 	mov	arg01, #15
0c21c     9C 10 B1 FD | 	call	#_printerror
0c220     20 00 90 FD | 	jmp	#LR__1083
0c224                 | LR__1082
0c224     A7 1E 02 FB | 	rdlong	local01, fp
0c228     0F 1F C2 FA | 	rdbyte	local01, local01
0c22c     A7 1E 62 FC | 	wrlong	local01, fp
0c230     08 4E 05 F1 | 	add	fp, #8
0c234     A7 38 68 FC | 	wrlong	#28, fp
0c238     08 4E 85 F1 | 	sub	fp, #8
0c23c     A7 12 02 F6 | 	mov	arg01, fp
0c240     F0 F1 BF FD | 	call	#_push
0c244                 | LR__1083
0c244     A7 F0 03 F6 | 	mov	ptra, fp
0c248     B2 00 A0 FD | 	call	#popregs_
0c24c                 | _do_asc_ret
0c24c     2D 00 64 FD | 	ret
0c250                 | 
0c250                 | ' 
0c250                 | ' '-------------------- asin
0c250                 | ' 
0c250                 | ' sub do_asin
0c250                 | _do_asin
0c250     01 4A 05 F6 | 	mov	COUNT_, #1
0c254     A8 00 A0 FD | 	call	#pushregs_
0c258     10 F0 07 F1 | 	add	ptra, #16
0c25c     4A 00 00 FF 
0c260     80 E4 05 F1 | 	add	objptr, ##38016
0c264     F2 1E 02 FB | 	rdlong	local01, objptr
0c268     0F 17 02 F6 | 	mov	arg03, local01
0c26c     01 16 66 F0 | 	shl	arg03, #1
0c270     0F 17 02 F1 | 	add	arg03, local01
0c274     02 16 66 F0 | 	shl	arg03, #2
0c278     03 00 00 FF 
0c27c     04 E4 85 F1 | 	sub	objptr, ##1540
0c280     F2 16 02 F1 | 	add	arg03, objptr
0c284     0B 17 02 FB | 	rdlong	arg03, arg03
0c288     0C 4E 05 F1 | 	add	fp, #12
0c28c     A7 16 62 FC | 	wrlong	arg03, fp
0c290                 | ' 
0c290                 | ' numpar=compiledline(lineptr_e).result.uresult
0c290                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c290     0C 4E 85 F1 | 	sub	fp, #12
0c294     02 16 16 F2 | 	cmp	arg03, #2 wc
0c298     47 00 00 FF 
0c29c     7C E4 85 F1 | 	sub	objptr, ##36476
0c2a0     0C 4E 05 C1 |  if_b	add	fp, #12
0c2a4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c2a8     0C 4E 85 C1 |  if_b	sub	fp, #12
0c2ac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c2b0     00 12 06 F6 | 	mov	arg01, #0
0c2b4     F8 9F B1 FD | 	call	#__system___getiolock_0541
0c2b8     FD 12 02 F6 | 	mov	arg01, result1
0c2bc     8C 45 B1 FD | 	call	#__system___lockmem
0c2c0     83 01 00 FF 
0c2c4     62 15 06 F6 | 	mov	arg02, ##@LR__5418
0c2c8     00 12 06 F6 | 	mov	arg01, #0
0c2cc     00 16 06 F6 | 	mov	arg03, #0
0c2d0     6C 52 B1 FD | 	call	#__system___basic_print_string
0c2d4     00 12 06 F6 | 	mov	arg01, #0
0c2d8     D4 9F B1 FD | 	call	#__system___getiolock_0541
0c2dc     FD 00 68 FC | 	wrlong	#0, result1
0c2e0     27 12 06 F6 | 	mov	arg01, #39
0c2e4     D4 0F B1 FD | 	call	#_printerror
0c2e8     64 00 90 FD | 	jmp	#LR__1091
0c2ec                 | LR__1090
0c2ec     AC F0 BF FD | 	call	#_pop
0c2f0     FF 1E 02 F6 | 	mov	local01, result3
0c2f4     A7 FA 61 FC | 	wrlong	result1, fp
0c2f8     04 4E 05 F1 | 	add	fp, #4
0c2fc     A7 FC 61 FC | 	wrlong	result2, fp
0c300     04 4E 05 F1 | 	add	fp, #4
0c304     A7 1E 62 FC | 	wrlong	local01, fp
0c308     08 4E 85 F1 | 	sub	fp, #8
0c30c     A7 12 02 F6 | 	mov	arg01, fp
0c310     28 F3 BF FD | 	call	#_converttofloat
0c314     FD 12 02 F6 | 	mov	arg01, result1
0c318     D8 7B B1 FD | 	call	#__system____builtin_asinf
0c31c     FD 12 02 F6 | 	mov	arg01, result1
0c320     51 00 00 FF 
0c324     C0 E5 05 F1 | 	add	objptr, ##41920
0c328     F2 14 02 FB | 	rdlong	arg02, objptr
0c32c     51 00 00 FF 
0c330     C0 E5 85 F1 | 	sub	objptr, ##41920
0c334     C8 70 B1 FD | 	call	#__system___float_mul
0c338     A7 FA 61 FC | 	wrlong	result1, fp
0c33c     08 4E 05 F1 | 	add	fp, #8
0c340     A7 3C 68 FC | 	wrlong	#30, fp
0c344     08 4E 85 F1 | 	sub	fp, #8
0c348     A7 12 02 F6 | 	mov	arg01, fp
0c34c     E4 F0 BF FD | 	call	#_push
0c350                 | LR__1091
0c350     A7 F0 03 F6 | 	mov	ptra, fp
0c354     B2 00 A0 FD | 	call	#popregs_
0c358                 | _do_asin_ret
0c358     2D 00 64 FD | 	ret
0c35c                 | 
0c35c                 | ' 
0c35c                 | ' '-------------------- atn
0c35c                 | ' 
0c35c                 | ' sub do_atn
0c35c                 | _do_atn
0c35c     01 4A 05 F6 | 	mov	COUNT_, #1
0c360     A8 00 A0 FD | 	call	#pushregs_
0c364     10 F0 07 F1 | 	add	ptra, #16
0c368     4A 00 00 FF 
0c36c     80 E4 05 F1 | 	add	objptr, ##38016
0c370     F2 1E 02 FB | 	rdlong	local01, objptr
0c374     0F 17 02 F6 | 	mov	arg03, local01
0c378     01 16 66 F0 | 	shl	arg03, #1
0c37c     0F 17 02 F1 | 	add	arg03, local01
0c380     02 16 66 F0 | 	shl	arg03, #2
0c384     03 00 00 FF 
0c388     04 E4 85 F1 | 	sub	objptr, ##1540
0c38c     F2 16 02 F1 | 	add	arg03, objptr
0c390     0B 17 02 FB | 	rdlong	arg03, arg03
0c394     0C 4E 05 F1 | 	add	fp, #12
0c398     A7 16 62 FC | 	wrlong	arg03, fp
0c39c                 | ' 
0c39c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c39c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c39c     0C 4E 85 F1 | 	sub	fp, #12
0c3a0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c3a4     47 00 00 FF 
0c3a8     7C E4 85 F1 | 	sub	objptr, ##36476
0c3ac     0C 4E 05 C1 |  if_b	add	fp, #12
0c3b0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c3b4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c3b8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c3bc     00 12 06 F6 | 	mov	arg01, #0
0c3c0     EC 9E B1 FD | 	call	#__system___getiolock_0541
0c3c4     FD 12 02 F6 | 	mov	arg01, result1
0c3c8     80 44 B1 FD | 	call	#__system___lockmem
0c3cc     83 01 00 FF 
0c3d0     69 15 06 F6 | 	mov	arg02, ##@LR__5419
0c3d4     00 12 06 F6 | 	mov	arg01, #0
0c3d8     00 16 06 F6 | 	mov	arg03, #0
0c3dc     60 51 B1 FD | 	call	#__system___basic_print_string
0c3e0     00 12 06 F6 | 	mov	arg01, #0
0c3e4     C8 9E B1 FD | 	call	#__system___getiolock_0541
0c3e8     FD 00 68 FC | 	wrlong	#0, result1
0c3ec     27 12 06 F6 | 	mov	arg01, #39
0c3f0     C8 0E B1 FD | 	call	#_printerror
0c3f4     6C 00 90 FD | 	jmp	#LR__1101
0c3f8                 | LR__1100
0c3f8     A0 EF BF FD | 	call	#_pop
0c3fc     FF 1E 02 F6 | 	mov	local01, result3
0c400     A7 FA 61 FC | 	wrlong	result1, fp
0c404     04 4E 05 F1 | 	add	fp, #4
0c408     A7 FC 61 FC | 	wrlong	result2, fp
0c40c     04 4E 05 F1 | 	add	fp, #4
0c410     A7 1E 62 FC | 	wrlong	local01, fp
0c414     08 4E 85 F1 | 	sub	fp, #8
0c418     A7 12 02 F6 | 	mov	arg01, fp
0c41c     1C F2 BF FD | 	call	#_converttofloat
0c420     FD 12 02 F6 | 	mov	arg01, result1
0c424     00 C0 1F FF 
0c428     00 14 06 F6 | 	mov	arg02, ##1065353216
0c42c     5C 7B B1 FD | 	call	#__system____builtin_atan2f
0c430     FD 12 02 F6 | 	mov	arg01, result1
0c434     51 00 00 FF 
0c438     C0 E5 05 F1 | 	add	objptr, ##41920
0c43c     F2 14 02 FB | 	rdlong	arg02, objptr
0c440     51 00 00 FF 
0c444     C0 E5 85 F1 | 	sub	objptr, ##41920
0c448     B4 6F B1 FD | 	call	#__system___float_mul
0c44c     A7 FA 61 FC | 	wrlong	result1, fp
0c450     08 4E 05 F1 | 	add	fp, #8
0c454     A7 3C 68 FC | 	wrlong	#30, fp
0c458     08 4E 85 F1 | 	sub	fp, #8
0c45c     A7 12 02 F6 | 	mov	arg01, fp
0c460     D0 EF BF FD | 	call	#_push
0c464                 | LR__1101
0c464     A7 F0 03 F6 | 	mov	ptra, fp
0c468     B2 00 A0 FD | 	call	#popregs_
0c46c                 | _do_atn_ret
0c46c     2D 00 64 FD | 	ret
0c470                 | 
0c470                 | ' 
0c470                 | ' '-------------------- beep
0c470                 | ' 
0c470                 | ' sub do_beep
0c470                 | _do_beep
0c470     02 4A 05 F6 | 	mov	COUNT_, #2
0c474     A8 00 A0 FD | 	call	#pushregs_
0c478     20 F0 07 F1 | 	add	ptra, #32
0c47c     1C EF BF FD | 	call	#_pop
0c480     FD 1E 02 F6 | 	mov	local01, result1
0c484     FE 1C 02 F6 | 	mov	arg06, result2
0c488     FF 20 02 F6 | 	mov	local02, result3
0c48c     0C 4E 05 F1 | 	add	fp, #12
0c490     A7 1E 62 FC | 	wrlong	local01, fp
0c494     04 4E 05 F1 | 	add	fp, #4
0c498     A7 1C 62 FC | 	wrlong	arg06, fp
0c49c     04 4E 05 F1 | 	add	fp, #4
0c4a0     A7 20 62 FC | 	wrlong	local02, fp
0c4a4     14 4E 85 F1 | 	sub	fp, #20
0c4a8     F0 EE BF FD | 	call	#_pop
0c4ac     A7 FA 61 FC | 	wrlong	result1, fp
0c4b0     04 4E 05 F1 | 	add	fp, #4
0c4b4     A7 FC 61 FC | 	wrlong	result2, fp
0c4b8     04 4E 05 F1 | 	add	fp, #4
0c4bc     A7 FE 61 FC | 	wrlong	result3, fp
0c4c0                 | ' 
0c4c0                 | ' t2=pop()
0c4c0                 | ' t1=pop()
0c4c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c4c0     08 4E 85 F1 | 	sub	fp, #8
0c4c4     1C FE 0D F2 | 	cmp	result3, #28 wz
0c4c8     08 4E 05 51 |  if_ne	add	fp, #8
0c4cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c4d0     08 4E 85 51 |  if_ne	sub	fp, #8
0c4d4     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0c4d8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c4dc     18 4E 05 A1 |  if_e	add	fp, #24
0c4e0     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c4e4     18 4E 85 A1 |  if_e	sub	fp, #24
0c4e8     14 00 90 AD |  if_e	jmp	#LR__1110
0c4ec     A7 12 02 F6 | 	mov	arg01, fp
0c4f0     8C F0 BF FD | 	call	#_converttoint
0c4f4     18 4E 05 F1 | 	add	fp, #24
0c4f8     A7 FA 61 FC | 	wrlong	result1, fp
0c4fc     18 4E 85 F1 | 	sub	fp, #24
0c500                 | LR__1110
0c500     1C 4E 05 F1 | 	add	fp, #28
0c504     A7 FE 48 FC | 	wrbyte	#127, fp
0c508     01 4E 05 F1 | 	add	fp, #1
0c50c     A7 00 49 FC | 	wrbyte	#128, fp
0c510     01 4E 85 F1 | 	sub	fp, #1
0c514     A7 14 02 F6 | 	mov	arg02, fp
0c518     04 4E 85 F1 | 	sub	fp, #4
0c51c     A7 16 02 FB | 	rdlong	arg03, fp
0c520     18 4E 85 F1 | 	sub	fp, #24
0c524     01 16 66 F0 | 	shl	arg03, #1
0c528     07 12 06 F6 | 	mov	arg01, #7
0c52c     0E 18 C6 F9 | 	decod	arg04, #14
0c530     02 1A 06 F6 | 	mov	arg05, #2
0c534     00 1C 06 F6 | 	mov	arg06, #0
0c538     0B 00 00 FF 
0c53c     CC E4 05 F1 | 	add	objptr, ##5836
0c540     64 3F B1 FD | 	call	#_audio096_spin2_play8
0c544     0B 00 00 FF 
0c548     CC E4 85 F1 | 	sub	objptr, ##5836
0c54c     0C 4E 05 F1 | 	add	fp, #12
0c550     A7 12 02 F6 | 	mov	arg01, fp
0c554     0C 4E 85 F1 | 	sub	fp, #12
0c558     D8 EE BF FD | 	call	#_push
0c55c     44 A0 B0 FD | 	call	#_do_waitms
0c560     07 12 06 F6 | 	mov	arg01, #7
0c564     0B 00 00 FF 
0c568     CC E4 05 F1 | 	add	objptr, ##5836
0c56c     DC 3F B1 FD | 	call	#_audio096_spin2_stop
0c570     0B 00 00 FF 
0c574     CC E4 85 F1 | 	sub	objptr, ##5836
0c578     A7 F0 03 F6 | 	mov	ptra, fp
0c57c     B2 00 A0 FD | 	call	#popregs_
0c580                 | _do_beep_ret
0c580     2D 00 64 FD | 	ret
0c584                 | 
0c584                 | ' 
0c584                 | ' '-------------------- bin$
0c584                 | ' 
0c584                 | ' sub do_bin
0c584                 | _do_bin
0c584     01 4A 05 F6 | 	mov	COUNT_, #1
0c588     A8 00 A0 FD | 	call	#pushregs_
0c58c     18 F0 07 F1 | 	add	ptra, #24
0c590     4A 00 00 FF 
0c594     80 E4 05 F1 | 	add	objptr, ##38016
0c598     F2 1E 02 FB | 	rdlong	local01, objptr
0c59c     0F 17 02 F6 | 	mov	arg03, local01
0c5a0     01 16 66 F0 | 	shl	arg03, #1
0c5a4     0F 17 02 F1 | 	add	arg03, local01
0c5a8     02 16 66 F0 | 	shl	arg03, #2
0c5ac     03 00 00 FF 
0c5b0     04 E4 85 F1 | 	sub	objptr, ##1540
0c5b4     F2 16 02 F1 | 	add	arg03, objptr
0c5b8     0B 17 02 FB | 	rdlong	arg03, arg03
0c5bc     0C 4E 05 F1 | 	add	fp, #12
0c5c0     A7 16 62 FC | 	wrlong	arg03, fp
0c5c4                 | ' 
0c5c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5c4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0c5c4     0C 4E 85 F1 | 	sub	fp, #12
0c5c8     03 16 16 F2 | 	cmp	arg03, #3 wc
0c5cc     47 00 00 FF 
0c5d0     7C E4 85 F1 | 	sub	objptr, ##36476
0c5d4     0C 4E 05 C1 |  if_b	add	fp, #12
0c5d8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c5dc     0C 4E 85 C1 |  if_b	sub	fp, #12
0c5e0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0c5e4     00 12 06 F6 | 	mov	arg01, #0
0c5e8     C4 9C B1 FD | 	call	#__system___getiolock_0541
0c5ec     FD 12 02 F6 | 	mov	arg01, result1
0c5f0     58 42 B1 FD | 	call	#__system___lockmem
0c5f4     83 01 00 FF 
0c5f8     6F 15 06 F6 | 	mov	arg02, ##@LR__5420
0c5fc     00 12 06 F6 | 	mov	arg01, #0
0c600     00 16 06 F6 | 	mov	arg03, #0
0c604     38 4F B1 FD | 	call	#__system___basic_print_string
0c608     00 12 06 F6 | 	mov	arg01, #0
0c60c     A0 9C B1 FD | 	call	#__system___getiolock_0541
0c610     FD 00 68 FC | 	wrlong	#0, result1
0c614     27 12 06 F6 | 	mov	arg01, #39
0c618     A0 0C B1 FD | 	call	#_printerror
0c61c     B8 00 90 FD | 	jmp	#LR__1123
0c620                 | LR__1120
0c620                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0c620     0C 4E 05 F1 | 	add	fp, #12
0c624     A7 1E 02 FB | 	rdlong	local01, fp
0c628     0C 4E 85 F1 | 	sub	fp, #12
0c62c     02 1E 0E F2 | 	cmp	local01, #2 wz
0c630     38 00 90 5D |  if_ne	jmp	#LR__1121
0c634     64 ED BF FD | 	call	#_pop
0c638     FF 1E 02 F6 | 	mov	local01, result3
0c63c     A7 FA 61 FC | 	wrlong	result1, fp
0c640     04 4E 05 F1 | 	add	fp, #4
0c644     A7 FC 61 FC | 	wrlong	result2, fp
0c648     04 4E 05 F1 | 	add	fp, #4
0c64c     A7 1E 62 FC | 	wrlong	local01, fp
0c650     08 4E 85 F1 | 	sub	fp, #8
0c654     A7 12 02 F6 | 	mov	arg01, fp
0c658     24 EF BF FD | 	call	#_converttoint
0c65c     14 4E 05 F1 | 	add	fp, #20
0c660     A7 FA 61 FC | 	wrlong	result1, fp
0c664     14 4E 85 F1 | 	sub	fp, #20
0c668     0C 00 90 FD | 	jmp	#LR__1122
0c66c                 | LR__1121
0c66c     14 4E 05 F1 | 	add	fp, #20
0c670     A7 00 68 FC | 	wrlong	#0, fp
0c674     14 4E 85 F1 | 	sub	fp, #20
0c678                 | LR__1122
0c678     20 ED BF FD | 	call	#_pop
0c67c     FF 1E 02 F6 | 	mov	local01, result3
0c680     A7 FA 61 FC | 	wrlong	result1, fp
0c684     04 4E 05 F1 | 	add	fp, #4
0c688     A7 FC 61 FC | 	wrlong	result2, fp
0c68c     04 4E 05 F1 | 	add	fp, #4
0c690     A7 1E 62 FC | 	wrlong	local01, fp
0c694     08 4E 85 F1 | 	sub	fp, #8
0c698     A7 12 02 F6 | 	mov	arg01, fp
0c69c     E0 EE BF FD | 	call	#_converttoint
0c6a0     10 4E 05 F1 | 	add	fp, #16
0c6a4     A7 FA 61 FC | 	wrlong	result1, fp
0c6a8     FD 12 02 F6 | 	mov	arg01, result1
0c6ac     04 4E 05 F1 | 	add	fp, #4
0c6b0     A7 14 02 FB | 	rdlong	arg02, fp
0c6b4     14 4E 85 F1 | 	sub	fp, #20
0c6b8     02 16 06 F6 | 	mov	arg03, #2
0c6bc     5C 64 B1 FD | 	call	#__system__Number_S
0c6c0     A7 FA 61 FC | 	wrlong	result1, fp
0c6c4     08 4E 05 F1 | 	add	fp, #8
0c6c8     A7 3E 68 FC | 	wrlong	#31, fp
0c6cc     08 4E 85 F1 | 	sub	fp, #8
0c6d0     A7 12 02 F6 | 	mov	arg01, fp
0c6d4     5C ED BF FD | 	call	#_push
0c6d8                 | LR__1123
0c6d8     A7 F0 03 F6 | 	mov	ptra, fp
0c6dc     B2 00 A0 FD | 	call	#popregs_
0c6e0                 | _do_bin_ret
0c6e0     2D 00 64 FD | 	ret
0c6e4                 | 
0c6e4                 | ' 
0c6e4                 | ' '-------------------- box
0c6e4                 | ' 
0c6e4                 | ' sub do_box
0c6e4                 | _do_box
0c6e4     03 4A 05 F6 | 	mov	COUNT_, #3
0c6e8     A8 00 A0 FD | 	call	#pushregs_
0c6ec     30 F0 07 F1 | 	add	ptra, #48
0c6f0     A8 EC BF FD | 	call	#_pop
0c6f4     FD 1A 02 F6 | 	mov	arg05, result1
0c6f8     FE 18 02 F6 | 	mov	arg04, result2
0c6fc     FF 16 02 F6 | 	mov	arg03, result3
0c700     24 4E 05 F1 | 	add	fp, #36
0c704     A7 1A 62 FC | 	wrlong	arg05, fp
0c708     04 4E 05 F1 | 	add	fp, #4
0c70c     A7 18 62 FC | 	wrlong	arg04, fp
0c710     04 4E 05 F1 | 	add	fp, #4
0c714     A7 16 62 FC | 	wrlong	arg03, fp
0c718     2C 4E 85 F1 | 	sub	fp, #44
0c71c     7C EC BF FD | 	call	#_pop
0c720     FD 1A 02 F6 | 	mov	arg05, result1
0c724     FE 18 02 F6 | 	mov	arg04, result2
0c728     FF 16 02 F6 | 	mov	arg03, result3
0c72c     18 4E 05 F1 | 	add	fp, #24
0c730     A7 1A 62 FC | 	wrlong	arg05, fp
0c734     04 4E 05 F1 | 	add	fp, #4
0c738     A7 18 62 FC | 	wrlong	arg04, fp
0c73c     04 4E 05 F1 | 	add	fp, #4
0c740     A7 16 62 FC | 	wrlong	arg03, fp
0c744     20 4E 85 F1 | 	sub	fp, #32
0c748     50 EC BF FD | 	call	#_pop
0c74c     FD 1A 02 F6 | 	mov	arg05, result1
0c750     FE 18 02 F6 | 	mov	arg04, result2
0c754     FF 1E 02 F6 | 	mov	local01, result3
0c758     0C 4E 05 F1 | 	add	fp, #12
0c75c     A7 1A 62 FC | 	wrlong	arg05, fp
0c760     04 4E 05 F1 | 	add	fp, #4
0c764     A7 18 62 FC | 	wrlong	arg04, fp
0c768     04 4E 05 F1 | 	add	fp, #4
0c76c     A7 1E 62 FC | 	wrlong	local01, fp
0c770     14 4E 85 F1 | 	sub	fp, #20
0c774     24 EC BF FD | 	call	#_pop
0c778     A7 FA 61 FC | 	wrlong	result1, fp
0c77c     04 4E 05 F1 | 	add	fp, #4
0c780     A7 FC 61 FC | 	wrlong	result2, fp
0c784     04 4E 05 F1 | 	add	fp, #4
0c788     A7 FE 61 FC | 	wrlong	result3, fp
0c78c                 | ' 
0c78c                 | ' t4=pop()
0c78c                 | ' t3=pop()
0c78c                 | ' t2=pop()
0c78c                 | ' t1=pop()
0c78c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0c78c     FF 1A 02 F6 | 	mov	arg05, result3
0c790     08 4E 85 F1 | 	sub	fp, #8
0c794     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0c798     08 4E 05 51 |  if_ne	add	fp, #8
0c79c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c7a0     08 4E 85 51 |  if_ne	sub	fp, #8
0c7a4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0c7a8     A8 00 90 5D |  if_ne	jmp	#LR__1130
0c7ac     14 4E 05 F1 | 	add	fp, #20
0c7b0     A7 1E 02 FB | 	rdlong	local01, fp
0c7b4     14 4E 85 F1 | 	sub	fp, #20
0c7b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c7bc     14 4E 05 51 |  if_ne	add	fp, #20
0c7c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c7c4     14 4E 85 51 |  if_ne	sub	fp, #20
0c7c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c7cc     84 00 90 5D |  if_ne	jmp	#LR__1130
0c7d0     20 4E 05 F1 | 	add	fp, #32
0c7d4     A7 1E 02 FB | 	rdlong	local01, fp
0c7d8     20 4E 85 F1 | 	sub	fp, #32
0c7dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c7e0     20 4E 05 51 |  if_ne	add	fp, #32
0c7e4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c7e8     20 4E 85 51 |  if_ne	sub	fp, #32
0c7ec     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c7f0     60 00 90 5D |  if_ne	jmp	#LR__1130
0c7f4     2C 4E 05 F1 | 	add	fp, #44
0c7f8     A7 1E 02 FB | 	rdlong	local01, fp
0c7fc     2C 4E 85 F1 | 	sub	fp, #44
0c800     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c804     2C 4E 05 51 |  if_ne	add	fp, #44
0c808     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c80c     2C 4E 85 51 |  if_ne	sub	fp, #44
0c810     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c814     3C 00 90 5D |  if_ne	jmp	#LR__1130
0c818     A7 12 02 FB | 	rdlong	arg01, fp
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 14 02 FB | 	rdlong	arg02, fp
0c824     0C 4E 05 F1 | 	add	fp, #12
0c828     A7 16 02 FB | 	rdlong	arg03, fp
0c82c     0C 4E 05 F1 | 	add	fp, #12
0c830     A7 18 02 FB | 	rdlong	arg04, fp
0c834     24 4E 85 F1 | 	sub	fp, #36
0c838     37 00 00 FF 
0c83c     28 E4 05 F1 | 	add	objptr, ##28200
0c840     F2 1A 02 FB | 	rdlong	arg05, objptr
0c844     37 00 00 FF 
0c848     28 E4 85 F1 | 	sub	objptr, ##28200
0c84c     58 24 B1 FD | 	call	#_hg010b_spin2_box
0c850                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0c850     6C 00 90 FD | 	jmp	#LR__1131
0c854                 | LR__1130
0c854     A7 12 02 F6 | 	mov	arg01, fp
0c858     24 ED BF FD | 	call	#_converttoint
0c85c     FD 20 02 F6 | 	mov	local02, result1
0c860     0C 4E 05 F1 | 	add	fp, #12
0c864     A7 12 02 F6 | 	mov	arg01, fp
0c868     0C 4E 85 F1 | 	sub	fp, #12
0c86c     10 ED BF FD | 	call	#_converttoint
0c870     FD 22 02 F6 | 	mov	local03, result1
0c874     18 4E 05 F1 | 	add	fp, #24
0c878     A7 12 02 F6 | 	mov	arg01, fp
0c87c     18 4E 85 F1 | 	sub	fp, #24
0c880     FC EC BF FD | 	call	#_converttoint
0c884     FD 1E 02 F6 | 	mov	local01, result1
0c888     24 4E 05 F1 | 	add	fp, #36
0c88c     A7 12 02 F6 | 	mov	arg01, fp
0c890     24 4E 85 F1 | 	sub	fp, #36
0c894     E8 EC BF FD | 	call	#_converttoint
0c898     FD 18 02 F6 | 	mov	arg04, result1
0c89c     37 00 00 FF 
0c8a0     28 E4 05 F1 | 	add	objptr, ##28200
0c8a4     F2 1A 02 FB | 	rdlong	arg05, objptr
0c8a8     37 00 00 FF 
0c8ac     28 E4 85 F1 | 	sub	objptr, ##28200
0c8b0     10 13 02 F6 | 	mov	arg01, local02
0c8b4     11 15 02 F6 | 	mov	arg02, local03
0c8b8     0F 17 02 F6 | 	mov	arg03, local01
0c8bc     E8 23 B1 FD | 	call	#_hg010b_spin2_box
0c8c0                 | LR__1131
0c8c0     A7 F0 03 F6 | 	mov	ptra, fp
0c8c4     B2 00 A0 FD | 	call	#popregs_
0c8c8                 | _do_box_ret
0c8c8     2D 00 64 FD | 	ret
0c8cc                 | 
0c8cc                 | ' 
0c8cc                 | ' '-------------------- brun
0c8cc                 | ' 
0c8cc                 | ' sub do_brun
0c8cc                 | _do_brun
0c8cc     08 4A 05 F6 | 	mov	COUNT_, #8
0c8d0     A8 00 A0 FD | 	call	#pushregs_
0c8d4     C4 EA BF FD | 	call	#_pop
0c8d8     FE 1A 02 F6 | 	mov	arg05, result2
0c8dc     FF 18 02 F6 | 	mov	arg04, result3
0c8e0     FD 1E 02 F6 | 	mov	local01, result1
0c8e4     0D 21 02 F6 | 	mov	local02, arg05
0c8e8     0C 23 02 F6 | 	mov	local03, arg04
0c8ec                 | ' 
0c8ec                 | ' t1=pop() 
0c8ec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c8ec     2B 22 0E F2 | 	cmp	local03, #43 wz
0c8f0     10 00 90 5D |  if_ne	jmp	#LR__1140
0c8f4     0F 13 02 F6 | 	mov	arg01, local01
0c8f8     18 EC BF FD | 	call	#_convertstring
0c8fc     FD 1E 02 F6 | 	mov	local01, result1
0c900     1F 22 06 F6 | 	mov	local03, #31
0c904                 | LR__1140
0c904                 | ' if t1.result_type=result_string then
0c904     1F 22 0E F2 | 	cmp	local03, #31 wz
0c908     EC 01 90 5D |  if_ne	jmp	#LR__1144
0c90c     0F 25 02 F6 | 	mov	local04, local01
0c910                 | '   filename=t1.result.sresult
0c910                 | '   if left$(filename,1)="/" then 
0c910     12 13 02 F6 | 	mov	arg01, local04
0c914     01 14 06 F6 | 	mov	arg02, #1
0c918     AC 5F B1 FD | 	call	#__system__Left_S
0c91c     FD 12 02 F6 | 	mov	arg01, result1
0c920     83 01 00 FF 
0c924     76 15 06 F6 | 	mov	arg02, ##@LR__5421
0c928     48 3F B1 FD | 	call	#__system___string_cmp
0c92c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c930     12 27 02 A6 |  if_e	mov	local05, local04
0c934     14 00 90 AD |  if_e	jmp	#LR__1141
0c938     83 01 00 FF 
0c93c     78 13 06 F6 | 	mov	arg01, ##@LR__5422
0c940     12 15 02 F6 | 	mov	arg02, local04
0c944     60 3F B1 FD | 	call	#__system___string_concat
0c948     FD 26 02 F6 | 	mov	local05, result1
0c94c                 | LR__1141
0c94c                 | '   open fullfilename for input as #9
0c94c     09 12 06 F6 | 	mov	arg01, #9
0c950     13 15 02 F6 | 	mov	arg02, local05
0c954     00 16 06 F6 | 	mov	arg03, #0
0c958     F4 4A B1 FD | 	call	#__system___basic_open_string
0c95c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c960     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0c964     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c968     FD 28 0A F6 | 	mov	local06, result1 wz
0c96c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0c96c     8C 00 90 AD |  if_e	jmp	#LR__1142
0c970     00 12 06 F6 | 	mov	arg01, #0
0c974     38 99 B1 FD | 	call	#__system___getiolock_0541
0c978     FD 12 02 F6 | 	mov	arg01, result1
0c97c     CC 3E B1 FD | 	call	#__system___lockmem
0c980     83 01 00 FF 
0c984     81 15 06 F6 | 	mov	arg02, ##@LR__5423
0c988     00 12 06 F6 | 	mov	arg01, #0
0c98c     00 16 06 F6 | 	mov	arg03, #0
0c990     AC 4B B1 FD | 	call	#__system___basic_print_string
0c994     00 12 06 F6 | 	mov	arg01, #0
0c998     14 15 02 F6 | 	mov	arg02, local06
0c99c     00 16 06 F6 | 	mov	arg03, #0
0c9a0     0A 18 06 F6 | 	mov	arg04, #10
0c9a4     DC 4B B1 FD | 	call	#__system___basic_print_integer
0c9a8     83 01 00 FF 
0c9ac     8F 15 06 F6 | 	mov	arg02, ##@LR__5424
0c9b0     00 12 06 F6 | 	mov	arg01, #0
0c9b4     00 16 06 F6 | 	mov	arg03, #0
0c9b8     84 4B B1 FD | 	call	#__system___basic_print_string
0c9bc     14 13 02 F6 | 	mov	arg01, local06
0c9c0     50 65 B1 FD | 	call	#__system___strerror
0c9c4     FD 14 02 F6 | 	mov	arg02, result1
0c9c8     00 12 06 F6 | 	mov	arg01, #0
0c9cc     00 16 06 F6 | 	mov	arg03, #0
0c9d0     6C 4B B1 FD | 	call	#__system___basic_print_string
0c9d4     00 12 06 F6 | 	mov	arg01, #0
0c9d8     0A 14 06 F6 | 	mov	arg02, #10
0c9dc     00 16 06 F6 | 	mov	arg03, #0
0c9e0     04 4B B1 FD | 	call	#__system___basic_print_char
0c9e4     00 12 06 F6 | 	mov	arg01, #0
0c9e8     C4 98 B1 FD | 	call	#__system___getiolock_0541
0c9ec     FD 00 68 FC | 	wrlong	#0, result1
0c9f0     09 12 06 F6 | 	mov	arg01, #9
0c9f4     E8 8E B1 FD | 	call	#__system__close
0c9f8     FC 00 90 FD | 	jmp	#LR__1145
0c9fc                 | LR__1142
0c9fc     01 2A 06 F6 | 	mov	local07, #1
0ca00     00 2C 06 F6 | 	mov	local08, #0
0ca04                 | '   do
0ca04                 | LR__1143
0ca04                 | '     get #9,pos,block(0),1024,r : pos+=r	
0ca04     4E 00 00 FF 
0ca08     B4 E4 05 F1 | 	add	objptr, ##40116
0ca0c     F2 16 02 F6 | 	mov	arg03, objptr
0ca10     4E 00 00 FF 
0ca14     B4 E4 85 F1 | 	sub	objptr, ##40116
0ca18     09 12 06 F6 | 	mov	arg01, #9
0ca1c     15 15 02 F6 | 	mov	arg02, local07
0ca20     0A 18 C6 F9 | 	decod	arg04, #10
0ca24     01 1A 06 F6 | 	mov	arg05, #1
0ca28     90 4C B1 FD | 	call	#__system___basic_get
0ca2c     FD 28 02 F6 | 	mov	local06, result1
0ca30     FD 2A 02 F1 | 	add	local07, result1
0ca34     4E 00 00 FF 
0ca38     B4 E4 05 F1 | 	add	objptr, ##40116
0ca3c     F2 12 02 F6 | 	mov	arg01, objptr
0ca40     16 15 02 F6 | 	mov	arg02, local08
0ca44     0A 16 C6 F9 | 	decod	arg03, #10
0ca48     42 00 00 FF 
0ca4c     E8 E5 85 F1 | 	sub	objptr, ##34280
0ca50     54 32 B1 FD | 	call	#_psram_spin2_write
0ca54     0B 00 00 FF 
0ca58     CC E4 85 F1 | 	sub	objptr, ##5836
0ca5c     14 2D 02 F1 | 	add	local08, local06
0ca60     02 00 00 FF 
0ca64     00 28 0E F2 | 	cmp	local06, ##1024 wz
0ca68     E0 03 00 AF 
0ca6c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0ca70     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1143
0ca74     36 00 00 FF 
0ca78     FC E5 05 F1 | 	add	objptr, ##28156
0ca7c     F2 12 02 FB | 	rdlong	arg01, objptr
0ca80     03 12 62 FD | 	cogstop	arg01
0ca84     04 E4 05 F1 | 	add	objptr, #4
0ca88     F2 12 02 FB | 	rdlong	arg01, objptr
0ca8c     03 12 62 FD | 	cogstop	arg01
0ca90     04 E4 05 F1 | 	add	objptr, #4
0ca94     F2 12 02 FB | 	rdlong	arg01, objptr
0ca98     03 12 62 FD | 	cogstop	arg01
0ca9c     19 00 00 FF 
0caa0     14 E5 05 F1 | 	add	objptr, ##13076
0caa4     F2 12 02 FB | 	rdlong	arg01, objptr
0caa8     03 12 62 FD | 	cogstop	arg01
0caac     18 00 00 FF 
0cab0     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0cab4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0cab8     18 00 00 FF 
0cabc     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0cac0     19 00 00 FF 
0cac4     0C E5 85 F1 | 	sub	objptr, ##13068
0cac8     1E 2C 06 F6 | 	mov	local08, #30
0cacc     28 E4 61 FD | 	setq	objptr
0cad0     0A 2D F2 FC | 	coginit	local08, arg02 wc
0cad4     01 2C 66 C6 |  if_b	neg	local08, #1
0cad8     1B 00 00 FF 
0cadc     14 E4 05 F1 | 	add	objptr, ##13844
0cae0     F2 2C 62 FC | 	wrlong	local08, objptr
0cae4     52 00 00 FF 
0cae8     20 E4 85 F1 | 	sub	objptr, ##42016
0caec     00 12 06 F6 | 	mov	arg01, #0
0caf0     01 12 62 FD | 	cogid	arg01
0caf4     03 12 62 FD | 	cogstop	arg01
0caf8                 | LR__1144
0caf8                 | LR__1145
0caf8     A7 F0 03 F6 | 	mov	ptra, fp
0cafc     B2 00 A0 FD | 	call	#popregs_
0cb00                 | _do_brun_ret
0cb00     2D 00 64 FD | 	ret
0cb04                 | 
0cb04                 | ' 
0cb04                 | ' '-------------------- changefreq
0cb04                 | ' 
0cb04                 | ' sub do_changefreq
0cb04                 | _do_changefreq
0cb04     04 4A 05 F6 | 	mov	COUNT_, #4
0cb08     A8 00 A0 FD | 	call	#pushregs_
0cb0c     28 F0 07 F1 | 	add	ptra, #40
0cb10     88 E8 BF FD | 	call	#_pop
0cb14     FF 14 02 F6 | 	mov	arg02, result3
0cb18     A7 FA 61 FC | 	wrlong	result1, fp
0cb1c     04 4E 05 F1 | 	add	fp, #4
0cb20     A7 FC 61 FC | 	wrlong	result2, fp
0cb24     04 4E 05 F1 | 	add	fp, #4
0cb28     A7 14 62 FC | 	wrlong	arg02, fp
0cb2c     08 4E 85 F1 | 	sub	fp, #8
0cb30     A7 12 02 F6 | 	mov	arg01, fp
0cb34     04 EB BF FD | 	call	#_converttofloat
0cb38     24 4E 05 F1 | 	add	fp, #36
0cb3c     A7 FA 61 FC | 	wrlong	result1, fp
0cb40     24 4E 85 F1 | 	sub	fp, #36
0cb44     FD 14 02 F6 | 	mov	arg02, result1
0cb48     FC 16 20 FF 
0cb4c     54 12 06 F6 | 	mov	arg01, ##1076754516
0cb50     7C 78 B1 FD | 	call	#__system____builtin_logbase
0cb54     FD 1E 02 F6 | 	mov	local01, result1
0cb58     1E 14 C6 F9 | 	decod	arg02, #30
0cb5c     FC 16 20 FF 
0cb60     54 12 06 F6 | 	mov	arg01, ##1076754516
0cb64     68 78 B1 FD | 	call	#__system____builtin_logbase
0cb68     FD 14 02 F6 | 	mov	arg02, result1
0cb6c     0F 13 02 F6 | 	mov	arg01, local01
0cb70     90 6A B1 FD | 	call	#__system___float_div
0cb74     FD 12 02 F6 | 	mov	arg01, result1
0cb78     00 14 06 F6 | 	mov	arg02, #0
0cb7c     48 6D B1 FD | 	call	#__system___float_tointeger
0cb80     10 4E 05 F1 | 	add	fp, #16
0cb84     A7 FA 61 FC | 	wrlong	result1, fp
0cb88     1E 1E C6 F9 | 	decod	local01, #30
0cb8c     FD 12 02 F6 | 	mov	arg01, result1
0cb90     10 4E 85 F1 | 	sub	fp, #16
0cb94     05 12 06 F1 | 	add	arg01, #5
0cb98     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb9c     1F 20 C6 C9 |  if_b	decod	local02, #31
0cba0     00 20 06 36 |  if_ae	mov	local02, #0
0cba4     54 64 B1 FD | 	call	#__system___float_fromuns
0cba8     10 FB 61 F5 | 	xor	result1, local02
0cbac     FD 14 02 F6 | 	mov	arg02, result1
0cbb0     0F 13 02 F6 | 	mov	arg01, local01
0cbb4     50 77 B1 FD | 	call	#__system____builtin_powf
0cbb8     FD 12 02 F6 | 	mov	arg01, result1
0cbbc     01 14 06 F6 | 	mov	arg02, #1
0cbc0     04 6D B1 FD | 	call	#__system___float_tointeger
0cbc4     14 4E 05 F1 | 	add	fp, #20
0cbc8     A7 FA 61 FC | 	wrlong	result1, fp
0cbcc                 | ' skip=round(2^(lfreq+5))
0cbcc                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0cbcc     14 4E 85 F1 | 	sub	fp, #20
0cbd0     40 00 00 FF 
0cbd4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cbd8     30 00 90 CD |  if_b	jmp	#LR__1150
0cbdc     14 4E 05 F1 | 	add	fp, #20
0cbe0     A7 1E 02 FB | 	rdlong	local01, fp
0cbe4     0F 1F 52 F6 | 	abs	local01, local01 wc
0cbe8     0F 1E 46 F0 | 	shr	local01, #15
0cbec     0F 1F 82 F6 | 	negc	local01, local01
0cbf0     04 4E 05 F1 | 	add	fp, #4
0cbf4     A7 1E 62 FC | 	wrlong	local01, fp
0cbf8     04 4E 85 F1 | 	sub	fp, #4
0cbfc     40 00 80 FF 
0cc00     A7 00 68 FC | 	wrlong	##32768, fp
0cc04     14 4E 85 F1 | 	sub	fp, #20
0cc08     0C 00 90 FD | 	jmp	#LR__1151
0cc0c                 | LR__1150
0cc0c     18 4E 05 F1 | 	add	fp, #24
0cc10     A7 02 68 FC | 	wrlong	#1, fp
0cc14     18 4E 85 F1 | 	sub	fp, #24
0cc18                 | LR__1151
0cc18     24 4E 05 F1 | 	add	fp, #36
0cc1c     A7 14 02 FB | 	rdlong	arg02, fp
0cc20     24 4E 85 F1 | 	sub	fp, #36
0cc24     3E 2C 25 FF 
0cc28     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cc2c     D4 69 B1 FD | 	call	#__system___float_div
0cc30     FD 1E 02 F6 | 	mov	local01, result1
0cc34     18 4E 05 F1 | 	add	fp, #24
0cc38     A7 12 02 FB | 	rdlong	arg01, fp
0cc3c     18 4E 85 F1 | 	sub	fp, #24
0cc40     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc44     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc48     00 20 06 36 |  if_ae	mov	local02, #0
0cc4c     AC 63 B1 FD | 	call	#__system___float_fromuns
0cc50     10 FB 61 F5 | 	xor	result1, local02
0cc54     FD 22 02 F6 | 	mov	local03, result1
0cc58     1E 24 C6 F9 | 	decod	local04, #30
0cc5c     0D 12 06 F6 | 	mov	arg01, #13
0cc60     10 4E 05 F1 | 	add	fp, #16
0cc64     A7 14 02 FB | 	rdlong	arg02, fp
0cc68     10 4E 85 F1 | 	sub	fp, #16
0cc6c     0A 13 82 F1 | 	sub	arg01, arg02
0cc70     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc74     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc78     00 20 06 36 |  if_ae	mov	local02, #0
0cc7c     7C 63 B1 FD | 	call	#__system___float_fromuns
0cc80     10 FB 61 F5 | 	xor	result1, local02
0cc84     FD 14 02 F6 | 	mov	arg02, result1
0cc88     12 13 02 F6 | 	mov	arg01, local04
0cc8c     78 76 B1 FD | 	call	#__system____builtin_powf
0cc90     FD 14 02 F6 | 	mov	arg02, result1
0cc94     11 13 02 F6 | 	mov	arg01, local03
0cc98     64 67 B1 FD | 	call	#__system___float_mul
0cc9c     FD 14 02 F6 | 	mov	arg02, result1
0cca0     0F 13 02 F6 | 	mov	arg01, local01
0cca4     5C 69 B1 FD | 	call	#__system___float_div
0cca8     FD 12 02 F6 | 	mov	arg01, result1
0ccac     01 14 06 F6 | 	mov	arg02, #1
0ccb0     14 6C B1 FD | 	call	#__system___float_tointeger
0ccb4     FD 1E 02 F6 | 	mov	local01, result1
0ccb8     1C 4E 05 F1 | 	add	fp, #28
0ccbc     A7 1E 62 FC | 	wrlong	local01, fp
0ccc0     1C 4E 85 F1 | 	sub	fp, #28
0ccc4     D4 E6 BF FD | 	call	#_pop
0ccc8     FF 24 02 F6 | 	mov	local04, result3
0cccc     A7 FA 61 FC | 	wrlong	result1, fp
0ccd0     04 4E 05 F1 | 	add	fp, #4
0ccd4     A7 FC 61 FC | 	wrlong	result2, fp
0ccd8     04 4E 05 F1 | 	add	fp, #4
0ccdc     A7 24 62 FC | 	wrlong	local04, fp
0cce0     08 4E 85 F1 | 	sub	fp, #8
0cce4     A7 12 02 F6 | 	mov	arg01, fp
0cce8     94 E8 BF FD | 	call	#_converttoint
0ccec     FD 22 52 F6 | 	abs	local03, result1 wc
0ccf0     07 22 06 F5 | 	and	local03, #7
0ccf4     11 23 82 F6 | 	negc	local03, local03
0ccf8     0C 4E 05 F1 | 	add	fp, #12
0ccfc     A7 22 62 FC | 	wrlong	local03, fp
0cd00     08 4E 05 F1 | 	add	fp, #8
0cd04     A7 1E 02 FB | 	rdlong	local01, fp
0cd08     10 1E 66 F0 | 	shl	local01, #16
0cd0c     08 4E 05 F1 | 	add	fp, #8
0cd10     A7 24 02 FB | 	rdlong	local04, fp
0cd14     12 1F 02 F1 | 	add	local01, local04
0cd18     04 4E 05 F1 | 	add	fp, #4
0cd1c     A7 1E 62 FC | 	wrlong	local01, fp
0cd20                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0cd20     37 00 00 FF 
0cd24     10 E4 05 F1 | 	add	objptr, ##28176
0cd28     F2 12 02 FB | 	rdlong	arg01, objptr
0cd2c     37 00 00 FF 
0cd30     10 E4 85 F1 | 	sub	objptr, ##28176
0cd34     14 4E 85 F1 | 	sub	fp, #20
0cd38     A7 24 02 FB | 	rdlong	local04, fp
0cd3c     0C 4E 85 F1 | 	sub	fp, #12
0cd40     06 24 66 F0 | 	shl	local04, #6
0cd44     12 13 02 F1 | 	add	arg01, local04
0cd48     08 12 06 F1 | 	add	arg01, #8
0cd4c     09 FB 01 FB | 	rdlong	result1, arg01
0cd50     1B FA 2D F4 | 	testbn	result1, #27 wz
0cd54     3C 00 90 5D |  if_ne	jmp	#LR__1152
0cd58     37 00 00 FF 
0cd5c     10 E4 05 F1 | 	add	objptr, ##28176
0cd60     F2 12 02 FB | 	rdlong	arg01, objptr
0cd64     37 00 00 FF 
0cd68     10 E4 85 F1 | 	sub	objptr, ##28176
0cd6c     0C 4E 05 F1 | 	add	fp, #12
0cd70     A7 24 02 FB | 	rdlong	local04, fp
0cd74     06 24 66 F0 | 	shl	local04, #6
0cd78     12 13 02 F1 | 	add	arg01, local04
0cd7c     18 12 06 F1 | 	add	arg01, #24
0cd80     14 4E 05 F1 | 	add	fp, #20
0cd84     A7 14 02 FB | 	rdlong	arg02, fp
0cd88     20 4E 85 F1 | 	sub	fp, #32
0cd8c     09 15 62 FC | 	wrlong	arg02, arg01
0cd90     80 00 90 FD | 	jmp	#LR__1153
0cd94                 | LR__1152
0cd94     37 00 00 FF 
0cd98     10 E4 05 F1 | 	add	objptr, ##28176
0cd9c     F2 1E 02 FB | 	rdlong	local01, objptr
0cda0     37 00 00 FF 
0cda4     10 E4 85 F1 | 	sub	objptr, ##28176
0cda8     0C 4E 05 F1 | 	add	fp, #12
0cdac     A7 24 02 FB | 	rdlong	local04, fp
0cdb0     06 24 66 F0 | 	shl	local04, #6
0cdb4     12 1F 02 F1 | 	add	local01, local04
0cdb8     18 1E 06 F1 | 	add	local01, #24
0cdbc     18 4E 05 F1 | 	add	fp, #24
0cdc0     A7 14 02 FB | 	rdlong	arg02, fp
0cdc4     24 4E 85 F1 | 	sub	fp, #36
0cdc8     3E 2C 25 FF 
0cdcc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cdd0     30 68 B1 FD | 	call	#__system___float_div
0cdd4     FD 12 02 F6 | 	mov	arg01, result1
0cdd8     01 14 06 F6 | 	mov	arg02, #1
0cddc     E8 6A B1 FD | 	call	#__system___float_tointeger
0cde0     0F FB 51 FC | 	wrword	result1, local01
0cde4     37 00 00 FF 
0cde8     10 E4 05 F1 | 	add	objptr, ##28176
0cdec     F2 12 02 FB | 	rdlong	arg01, objptr
0cdf0     37 00 00 FF 
0cdf4     10 E4 85 F1 | 	sub	objptr, ##28176
0cdf8     0C 4E 05 F1 | 	add	fp, #12
0cdfc     A7 24 02 FB | 	rdlong	local04, fp
0ce00     0C 4E 85 F1 | 	sub	fp, #12
0ce04     06 24 66 F0 | 	shl	local04, #6
0ce08     12 13 02 F1 | 	add	arg01, local04
0ce0c     1A 12 06 F1 | 	add	arg01, #26
0ce10     09 01 5A FC | 	wrword	#256, arg01
0ce14                 | LR__1153
0ce14     A7 F0 03 F6 | 	mov	ptra, fp
0ce18     B2 00 A0 FD | 	call	#popregs_
0ce1c                 | _do_changefreq_ret
0ce1c     2D 00 64 FD | 	ret
0ce20                 | 
0ce20                 | ' 
0ce20                 | ' '-------------------- changepan
0ce20                 | ' 
0ce20                 | ' sub do_changepan
0ce20                 | _do_changepan
0ce20     01 4A 05 F6 | 	mov	COUNT_, #1
0ce24     A8 00 A0 FD | 	call	#pushregs_
0ce28     14 F0 07 F1 | 	add	ptra, #20
0ce2c     6C E5 BF FD | 	call	#_pop
0ce30     A7 FA 61 FC | 	wrlong	result1, fp
0ce34     04 4E 05 F1 | 	add	fp, #4
0ce38     A7 FC 61 FC | 	wrlong	result2, fp
0ce3c     04 4E 05 F1 | 	add	fp, #4
0ce40     A7 FE 61 FC | 	wrlong	result3, fp
0ce44     08 4E 85 F1 | 	sub	fp, #8
0ce48     00 00 23 FF 
0ce4c     00 1E 06 F6 | 	mov	local01, ##1174405120
0ce50     A7 12 02 F6 | 	mov	arg01, fp
0ce54     E4 E7 BF FD | 	call	#_converttofloat
0ce58     FD 14 02 F6 | 	mov	arg02, result1
0ce5c     0F 13 02 F6 | 	mov	arg01, local01
0ce60     9C 65 B1 FD | 	call	#__system___float_mul
0ce64     FD 12 02 F6 | 	mov	arg01, result1
0ce68     01 14 06 F6 | 	mov	arg02, #1
0ce6c     58 6A B1 FD | 	call	#__system___float_tointeger
0ce70     0D 1E C6 F9 | 	decod	local01, #13
0ce74     FD 1E 02 F1 | 	add	local01, result1
0ce78     10 4E 05 F1 | 	add	fp, #16
0ce7c     A7 1E 62 FC | 	wrlong	local01, fp
0ce80                 | ' 
0ce80                 | ' t1=pop()
0ce80                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ce80                 | ' if pan<0 then pan=0
0ce80     10 4E 85 F1 | 	sub	fp, #16
0ce84     00 1E 56 F2 | 	cmps	local01, #0 wc
0ce88     10 4E 05 C1 |  if_b	add	fp, #16
0ce8c     A7 00 68 CC |  if_b	wrlong	#0, fp
0ce90     10 4E 85 C1 |  if_b	sub	fp, #16
0ce94                 | ' if pan>16384 then pan=16384
0ce94     10 4E 05 F1 | 	add	fp, #16
0ce98     A7 1E 02 FB | 	rdlong	local01, fp
0ce9c     10 4E 85 F1 | 	sub	fp, #16
0cea0     20 00 00 FF 
0cea4     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0cea8     10 4E 05 31 |  if_ae	add	fp, #16
0ceac     20 00 80 3F 
0ceb0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ceb4     10 4E 85 31 |  if_ae	sub	fp, #16
0ceb8     E0 E4 BF FD | 	call	#_pop
0cebc     FF 1E 02 F6 | 	mov	local01, result3
0cec0     A7 FA 61 FC | 	wrlong	result1, fp
0cec4     04 4E 05 F1 | 	add	fp, #4
0cec8     A7 FC 61 FC | 	wrlong	result2, fp
0cecc     04 4E 05 F1 | 	add	fp, #4
0ced0     A7 1E 62 FC | 	wrlong	local01, fp
0ced4     08 4E 85 F1 | 	sub	fp, #8
0ced8     A7 12 02 F6 | 	mov	arg01, fp
0cedc     A0 E6 BF FD | 	call	#_converttoint
0cee0     FD 1E 52 F6 | 	abs	local01, result1 wc
0cee4     07 1E 06 F5 | 	and	local01, #7
0cee8     0F 1F 82 F6 | 	negc	local01, local01
0ceec     0C 4E 05 F1 | 	add	fp, #12
0cef0     A7 1E 62 FC | 	wrlong	local01, fp
0cef4     37 00 00 FF 
0cef8     10 E4 05 F1 | 	add	objptr, ##28176
0cefc     F2 12 02 FB | 	rdlong	arg01, objptr
0cf00     37 00 00 FF 
0cf04     10 E4 85 F1 | 	sub	objptr, ##28176
0cf08     06 1E 66 F0 | 	shl	local01, #6
0cf0c     0F 13 02 F1 | 	add	arg01, local01
0cf10     16 12 06 F1 | 	add	arg01, #22
0cf14     04 4E 05 F1 | 	add	fp, #4
0cf18     A7 14 02 FB | 	rdlong	arg02, fp
0cf1c     10 4E 85 F1 | 	sub	fp, #16
0cf20     09 15 52 FC | 	wrword	arg02, arg01
0cf24     A7 F0 03 F6 | 	mov	ptra, fp
0cf28     B2 00 A0 FD | 	call	#popregs_
0cf2c                 | _do_changepan_ret
0cf2c     2D 00 64 FD | 	ret
0cf30                 | 
0cf30                 | ' 
0cf30                 | ' '-------------------- changevol
0cf30                 | ' 
0cf30                 | ' sub do_changevol
0cf30                 | _do_changevol
0cf30     00 4A 05 F6 | 	mov	COUNT_, #0
0cf34     A8 00 A0 FD | 	call	#pushregs_
0cf38     14 F0 07 F1 | 	add	ptra, #20
0cf3c     5C E4 BF FD | 	call	#_pop
0cf40     FF 14 02 F6 | 	mov	arg02, result3
0cf44     A7 FA 61 FC | 	wrlong	result1, fp
0cf48     04 4E 05 F1 | 	add	fp, #4
0cf4c     A7 FC 61 FC | 	wrlong	result2, fp
0cf50     04 4E 05 F1 | 	add	fp, #4
0cf54     A7 14 62 FC | 	wrlong	arg02, fp
0cf58     08 4E 85 F1 | 	sub	fp, #8
0cf5c     A7 12 02 F6 | 	mov	arg01, fp
0cf60     D8 E6 BF FD | 	call	#_converttofloat
0cf64     FD 12 02 F6 | 	mov	arg01, result1
0cf68     00 3D 22 FF 
0cf6c     00 14 06 F6 | 	mov	arg02, ##1148846080
0cf70     8C 64 B1 FD | 	call	#__system___float_mul
0cf74     FD 12 02 F6 | 	mov	arg01, result1
0cf78     01 14 06 F6 | 	mov	arg02, #1
0cf7c     48 69 B1 FD | 	call	#__system___float_tointeger
0cf80     FD 14 52 F6 | 	abs	arg02, result1 wc
0cf84     0D 14 46 F7 | 	zerox	arg02, #13
0cf88     0A 15 82 F6 | 	negc	arg02, arg02
0cf8c     10 4E 05 F1 | 	add	fp, #16
0cf90     A7 14 62 FC | 	wrlong	arg02, fp
0cf94     10 4E 85 F1 | 	sub	fp, #16
0cf98     00 E4 BF FD | 	call	#_pop
0cf9c     FF 14 02 F6 | 	mov	arg02, result3
0cfa0     A7 FA 61 FC | 	wrlong	result1, fp
0cfa4     04 4E 05 F1 | 	add	fp, #4
0cfa8     A7 FC 61 FC | 	wrlong	result2, fp
0cfac     04 4E 05 F1 | 	add	fp, #4
0cfb0     A7 14 62 FC | 	wrlong	arg02, fp
0cfb4     08 4E 85 F1 | 	sub	fp, #8
0cfb8     A7 12 02 F6 | 	mov	arg01, fp
0cfbc     C0 E5 BF FD | 	call	#_converttoint
0cfc0     FD 14 52 F6 | 	abs	arg02, result1 wc
0cfc4     07 14 06 F5 | 	and	arg02, #7
0cfc8     0A 15 82 F6 | 	negc	arg02, arg02
0cfcc     0C 4E 05 F1 | 	add	fp, #12
0cfd0     A7 14 62 FC | 	wrlong	arg02, fp
0cfd4     37 00 00 FF 
0cfd8     10 E4 05 F1 | 	add	objptr, ##28176
0cfdc     F2 12 02 FB | 	rdlong	arg01, objptr
0cfe0     37 00 00 FF 
0cfe4     10 E4 85 F1 | 	sub	objptr, ##28176
0cfe8     06 14 66 F0 | 	shl	arg02, #6
0cfec     0A 13 02 F1 | 	add	arg01, arg02
0cff0     14 12 06 F1 | 	add	arg01, #20
0cff4     04 4E 05 F1 | 	add	fp, #4
0cff8     A7 14 02 FB | 	rdlong	arg02, fp
0cffc     10 4E 85 F1 | 	sub	fp, #16
0d000     09 15 52 FC | 	wrword	arg02, arg01
0d004     A7 F0 03 F6 | 	mov	ptra, fp
0d008     B2 00 A0 FD | 	call	#popregs_
0d00c                 | _do_changevol_ret
0d00c     2D 00 64 FD | 	ret
0d010                 | 
0d010                 | ' 
0d010                 | ' '-------------------- changewav
0d010                 | ' 
0d010                 | ' sub do_changewav
0d010                 | _do_changewav
0d010     00 4A 05 F6 | 	mov	COUNT_, #0
0d014     A8 00 A0 FD | 	call	#pushregs_
0d018     14 F0 07 F1 | 	add	ptra, #20
0d01c     7C E3 BF FD | 	call	#_pop
0d020     FF 14 02 F6 | 	mov	arg02, result3
0d024     A7 FA 61 FC | 	wrlong	result1, fp
0d028     04 4E 05 F1 | 	add	fp, #4
0d02c     A7 FC 61 FC | 	wrlong	result2, fp
0d030     04 4E 05 F1 | 	add	fp, #4
0d034     A7 14 62 FC | 	wrlong	arg02, fp
0d038     08 4E 85 F1 | 	sub	fp, #8
0d03c     A7 12 02 F6 | 	mov	arg01, fp
0d040     3C E5 BF FD | 	call	#_converttoint
0d044     10 4E 05 F1 | 	add	fp, #16
0d048     A7 FA 61 FC | 	wrlong	result1, fp
0d04c                 | ' 
0d04c                 | ' t1=pop()
0d04c                 | ' wave=converttoint(t1)
0d04c                 | ' if wave<0 then wave=0
0d04c     FD 14 02 F6 | 	mov	arg02, result1
0d050     10 4E 85 F1 | 	sub	fp, #16
0d054     00 14 56 F2 | 	cmps	arg02, #0 wc
0d058     10 4E 05 C1 |  if_b	add	fp, #16
0d05c     A7 00 68 CC |  if_b	wrlong	#0, fp
0d060     10 4E 85 C1 |  if_b	sub	fp, #16
0d064     34 E3 BF FD | 	call	#_pop
0d068     FF 14 02 F6 | 	mov	arg02, result3
0d06c     A7 FA 61 FC | 	wrlong	result1, fp
0d070     04 4E 05 F1 | 	add	fp, #4
0d074     A7 FC 61 FC | 	wrlong	result2, fp
0d078     04 4E 05 F1 | 	add	fp, #4
0d07c     A7 14 62 FC | 	wrlong	arg02, fp
0d080     08 4E 85 F1 | 	sub	fp, #8
0d084     A7 12 02 F6 | 	mov	arg01, fp
0d088     F4 E4 BF FD | 	call	#_converttoint
0d08c     FD 14 52 F6 | 	abs	arg02, result1 wc
0d090     07 14 06 F5 | 	and	arg02, #7
0d094     0A 15 82 F6 | 	negc	arg02, arg02
0d098     0C 4E 05 F1 | 	add	fp, #12
0d09c     A7 14 62 FC | 	wrlong	arg02, fp
0d0a0                 | ' if wave <32 then 
0d0a0     04 4E 05 F1 | 	add	fp, #4
0d0a4     A7 14 02 FB | 	rdlong	arg02, fp
0d0a8     10 4E 85 F1 | 	sub	fp, #16
0d0ac     20 14 56 F2 | 	cmps	arg02, #32 wc
0d0b0     48 00 90 3D |  if_ae	jmp	#LR__1160
0d0b4     37 00 00 FF 
0d0b8     10 E4 05 F1 | 	add	objptr, ##28176
0d0bc     F2 12 02 FB | 	rdlong	arg01, objptr
0d0c0     37 00 00 FF 
0d0c4     10 E4 85 F1 | 	sub	objptr, ##28176
0d0c8     0C 4E 05 F1 | 	add	fp, #12
0d0cc     A7 14 02 FB | 	rdlong	arg02, fp
0d0d0     06 14 66 F0 | 	shl	arg02, #6
0d0d4     0A 13 02 F1 | 	add	arg01, arg02
0d0d8     08 12 06 F1 | 	add	arg01, #8
0d0dc     04 4E 05 F1 | 	add	fp, #4
0d0e0     A7 14 02 FB | 	rdlong	arg02, fp
0d0e4     10 4E 85 F1 | 	sub	fp, #16
0d0e8     0B 14 66 F0 | 	shl	arg02, #11
0d0ec     00 00 40 FF 
0d0f0     00 14 06 F1 | 	add	arg02, ##-2147483648
0d0f4     09 15 62 FC | 	wrlong	arg02, arg01
0d0f8     34 00 90 FD | 	jmp	#LR__1161
0d0fc                 | LR__1160
0d0fc     37 00 00 FF 
0d100     10 E4 05 F1 | 	add	objptr, ##28176
0d104     F2 12 02 FB | 	rdlong	arg01, objptr
0d108     37 00 00 FF 
0d10c     10 E4 85 F1 | 	sub	objptr, ##28176
0d110     0C 4E 05 F1 | 	add	fp, #12
0d114     A7 14 02 FB | 	rdlong	arg02, fp
0d118     0C 4E 85 F1 | 	sub	fp, #12
0d11c     06 14 66 F0 | 	shl	arg02, #6
0d120     0A 13 02 F1 | 	add	arg01, arg02
0d124     08 12 06 F1 | 	add	arg01, #8
0d128     00 00 C4 FF 
0d12c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0d130                 | LR__1161
0d130     A7 F0 03 F6 | 	mov	ptra, fp
0d134     B2 00 A0 FD | 	call	#popregs_
0d138                 | _do_changewav_ret
0d138     2D 00 64 FD | 	ret
0d13c                 | 
0d13c                 | ' 
0d13c                 | ' '-------------------- chr$
0d13c                 | ' 
0d13c                 | ' sub do_chr
0d13c                 | _do_chr
0d13c     01 4A 05 F6 | 	mov	COUNT_, #1
0d140     A8 00 A0 FD | 	call	#pushregs_
0d144     14 F0 07 F1 | 	add	ptra, #20
0d148     4A 00 00 FF 
0d14c     80 E4 05 F1 | 	add	objptr, ##38016
0d150     F2 1E 02 FB | 	rdlong	local01, objptr
0d154     0F 17 02 F6 | 	mov	arg03, local01
0d158     01 16 66 F0 | 	shl	arg03, #1
0d15c     0F 17 02 F1 | 	add	arg03, local01
0d160     02 16 66 F0 | 	shl	arg03, #2
0d164     03 00 00 FF 
0d168     04 E4 85 F1 | 	sub	objptr, ##1540
0d16c     F2 16 02 F1 | 	add	arg03, objptr
0d170     0B 17 02 FB | 	rdlong	arg03, arg03
0d174     0C 4E 05 F1 | 	add	fp, #12
0d178     A7 16 62 FC | 	wrlong	arg03, fp
0d17c                 | ' 
0d17c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d17c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0d17c     0C 4E 85 F1 | 	sub	fp, #12
0d180     02 16 16 F2 | 	cmp	arg03, #2 wc
0d184     47 00 00 FF 
0d188     7C E4 85 F1 | 	sub	objptr, ##36476
0d18c     0C 4E 05 C1 |  if_b	add	fp, #12
0d190     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d194     0C 4E 85 C1 |  if_b	sub	fp, #12
0d198     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0d19c     00 12 06 F6 | 	mov	arg01, #0
0d1a0     0C 91 B1 FD | 	call	#__system___getiolock_0541
0d1a4     FD 12 02 F6 | 	mov	arg01, result1
0d1a8     A0 36 B1 FD | 	call	#__system___lockmem
0d1ac     83 01 00 FF 
0d1b0     92 15 06 F6 | 	mov	arg02, ##@LR__5425
0d1b4     00 12 06 F6 | 	mov	arg01, #0
0d1b8     00 16 06 F6 | 	mov	arg03, #0
0d1bc     80 43 B1 FD | 	call	#__system___basic_print_string
0d1c0     00 12 06 F6 | 	mov	arg01, #0
0d1c4     E8 90 B1 FD | 	call	#__system___getiolock_0541
0d1c8     FD 00 68 FC | 	wrlong	#0, result1
0d1cc     27 12 06 F6 | 	mov	arg01, #39
0d1d0     E8 00 B1 FD | 	call	#_printerror
0d1d4     54 00 90 FD | 	jmp	#LR__1171
0d1d8                 | LR__1170
0d1d8     C0 E1 BF FD | 	call	#_pop
0d1dc     FF 1E 02 F6 | 	mov	local01, result3
0d1e0     A7 FA 61 FC | 	wrlong	result1, fp
0d1e4     04 4E 05 F1 | 	add	fp, #4
0d1e8     A7 FC 61 FC | 	wrlong	result2, fp
0d1ec     04 4E 05 F1 | 	add	fp, #4
0d1f0     A7 1E 62 FC | 	wrlong	local01, fp
0d1f4     08 4E 85 F1 | 	sub	fp, #8
0d1f8     A7 12 02 F6 | 	mov	arg01, fp
0d1fc     80 E3 BF FD | 	call	#_converttoint
0d200     10 4E 05 F1 | 	add	fp, #16
0d204     A7 FA 61 FC | 	wrlong	result1, fp
0d208     FD 12 02 F6 | 	mov	arg01, result1
0d20c     10 4E 85 F1 | 	sub	fp, #16
0d210     78 58 B1 FD | 	call	#__system__Chr_S
0d214     A7 FA 61 FC | 	wrlong	result1, fp
0d218     08 4E 05 F1 | 	add	fp, #8
0d21c     A7 3E 68 FC | 	wrlong	#31, fp
0d220     08 4E 85 F1 | 	sub	fp, #8
0d224     A7 12 02 F6 | 	mov	arg01, fp
0d228     08 E2 BF FD | 	call	#_push
0d22c                 | LR__1171
0d22c     A7 F0 03 F6 | 	mov	ptra, fp
0d230     B2 00 A0 FD | 	call	#popregs_
0d234                 | _do_chr_ret
0d234     2D 00 64 FD | 	ret
0d238                 | 
0d238                 | ' 
0d238                 | ' '-------------------- circle
0d238                 | ' 
0d238                 | ' sub do_circle
0d238                 | _do_circle
0d238     02 4A 05 F6 | 	mov	COUNT_, #2
0d23c     A8 00 A0 FD | 	call	#pushregs_
0d240     24 F0 07 F1 | 	add	ptra, #36
0d244     54 E1 BF FD | 	call	#_pop
0d248     FD 18 02 F6 | 	mov	arg04, result1
0d24c     FE 16 02 F6 | 	mov	arg03, result2
0d250     FF 14 02 F6 | 	mov	arg02, result3
0d254     18 4E 05 F1 | 	add	fp, #24
0d258     A7 18 62 FC | 	wrlong	arg04, fp
0d25c     04 4E 05 F1 | 	add	fp, #4
0d260     A7 16 62 FC | 	wrlong	arg03, fp
0d264     04 4E 05 F1 | 	add	fp, #4
0d268     A7 14 62 FC | 	wrlong	arg02, fp
0d26c     20 4E 85 F1 | 	sub	fp, #32
0d270     28 E1 BF FD | 	call	#_pop
0d274     FD 18 02 F6 | 	mov	arg04, result1
0d278     FE 16 02 F6 | 	mov	arg03, result2
0d27c     FF 1E 02 F6 | 	mov	local01, result3
0d280     0C 4E 05 F1 | 	add	fp, #12
0d284     A7 18 62 FC | 	wrlong	arg04, fp
0d288     04 4E 05 F1 | 	add	fp, #4
0d28c     A7 16 62 FC | 	wrlong	arg03, fp
0d290     04 4E 05 F1 | 	add	fp, #4
0d294     A7 1E 62 FC | 	wrlong	local01, fp
0d298     14 4E 85 F1 | 	sub	fp, #20
0d29c     FC E0 BF FD | 	call	#_pop
0d2a0     A7 FA 61 FC | 	wrlong	result1, fp
0d2a4     04 4E 05 F1 | 	add	fp, #4
0d2a8     A7 FC 61 FC | 	wrlong	result2, fp
0d2ac     04 4E 05 F1 | 	add	fp, #4
0d2b0     A7 FE 61 FC | 	wrlong	result3, fp
0d2b4                 | ' 
0d2b4                 | ' t3=pop()
0d2b4                 | ' t2=pop()
0d2b4                 | ' t1=pop()
0d2b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0d2b4     FF 18 02 F6 | 	mov	arg04, result3
0d2b8     08 4E 85 F1 | 	sub	fp, #8
0d2bc     1C 18 0E F2 | 	cmp	arg04, #28 wz
0d2c0     08 4E 05 51 |  if_ne	add	fp, #8
0d2c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d2c8     08 4E 85 51 |  if_ne	sub	fp, #8
0d2cc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d2d0     7C 00 90 5D |  if_ne	jmp	#LR__1180
0d2d4     14 4E 05 F1 | 	add	fp, #20
0d2d8     A7 1E 02 FB | 	rdlong	local01, fp
0d2dc     14 4E 85 F1 | 	sub	fp, #20
0d2e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d2e4     14 4E 05 51 |  if_ne	add	fp, #20
0d2e8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d2ec     14 4E 85 51 |  if_ne	sub	fp, #20
0d2f0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d2f4     58 00 90 5D |  if_ne	jmp	#LR__1180
0d2f8     20 4E 05 F1 | 	add	fp, #32
0d2fc     A7 1E 02 FB | 	rdlong	local01, fp
0d300     20 4E 85 F1 | 	sub	fp, #32
0d304     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d308     20 4E 05 51 |  if_ne	add	fp, #32
0d30c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d310     20 4E 85 51 |  if_ne	sub	fp, #32
0d314     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d318     34 00 90 5D |  if_ne	jmp	#LR__1180
0d31c     A7 12 02 FB | 	rdlong	arg01, fp
0d320     0C 4E 05 F1 | 	add	fp, #12
0d324     A7 14 02 FB | 	rdlong	arg02, fp
0d328     0C 4E 05 F1 | 	add	fp, #12
0d32c     A7 16 02 FB | 	rdlong	arg03, fp
0d330     18 4E 85 F1 | 	sub	fp, #24
0d334     37 00 00 FF 
0d338     28 E4 05 F1 | 	add	objptr, ##28200
0d33c     F2 18 02 FB | 	rdlong	arg04, objptr
0d340     37 00 00 FF 
0d344     28 E4 85 F1 | 	sub	objptr, ##28200
0d348     90 17 B1 FD | 	call	#_hg010b_spin2_circle
0d34c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0d34c     54 00 90 FD | 	jmp	#LR__1181
0d350                 | LR__1180
0d350     A7 12 02 F6 | 	mov	arg01, fp
0d354     28 E2 BF FD | 	call	#_converttoint
0d358     FD 1E 02 F6 | 	mov	local01, result1
0d35c     0C 4E 05 F1 | 	add	fp, #12
0d360     A7 12 02 F6 | 	mov	arg01, fp
0d364     0C 4E 85 F1 | 	sub	fp, #12
0d368     14 E2 BF FD | 	call	#_converttoint
0d36c     FD 20 02 F6 | 	mov	local02, result1
0d370     18 4E 05 F1 | 	add	fp, #24
0d374     A7 12 02 F6 | 	mov	arg01, fp
0d378     18 4E 85 F1 | 	sub	fp, #24
0d37c     00 E2 BF FD | 	call	#_converttoint
0d380     FD 16 02 F6 | 	mov	arg03, result1
0d384     37 00 00 FF 
0d388     28 E4 05 F1 | 	add	objptr, ##28200
0d38c     F2 18 02 FB | 	rdlong	arg04, objptr
0d390     37 00 00 FF 
0d394     28 E4 85 F1 | 	sub	objptr, ##28200
0d398     0F 13 02 F6 | 	mov	arg01, local01
0d39c     10 15 02 F6 | 	mov	arg02, local02
0d3a0     38 17 B1 FD | 	call	#_hg010b_spin2_circle
0d3a4                 | LR__1181
0d3a4     A7 F0 03 F6 | 	mov	ptra, fp
0d3a8     B2 00 A0 FD | 	call	#popregs_
0d3ac                 | _do_circle_ret
0d3ac     2D 00 64 FD | 	ret
0d3b0                 | 
0d3b0                 | ' 
0d3b0                 | ' '-------------------- click
0d3b0                 | ' 
0d3b0                 | ' sub do_click
0d3b0                 | _do_click
0d3b0     E8 DF BF FD | 	call	#_pop
0d3b4     00 FA 4D F2 | 	cmps	result1, #0 wz
0d3b8                 | ' 
0d3b8                 | ' t1=pop()
0d3b8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0d3b8     50 00 00 AF 
0d3bc     14 E5 05 A1 |  if_e	add	objptr, ##41236
0d3c0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0d3c4     50 00 00 FF 
0d3c8     14 E5 C5 F3 | 	sumz	objptr, ##41236
0d3cc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0d3d0     50 00 00 5F 
0d3d4     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0d3d8                 | _do_click_ret
0d3d8     2D 00 64 FD | 	ret
0d3dc                 | 
0d3dc                 | ' 
0d3dc                 | ' '-------------------- close
0d3dc                 | ' 
0d3dc                 | ' sub do_close
0d3dc                 | _do_close
0d3dc     03 4A 05 F6 | 	mov	COUNT_, #3
0d3e0     A8 00 A0 FD | 	call	#pushregs_
0d3e4     B4 DF BF FD | 	call	#_pop
0d3e8     FD 1E 02 F6 | 	mov	local01, result1
0d3ec     FF 16 02 F6 | 	mov	arg03, result3
0d3f0     FE 20 02 F6 | 	mov	local02, result2
0d3f4     0B 23 02 F6 | 	mov	local03, arg03
0d3f8                 | ' 
0d3f8                 | ' numpar=compiledline(lineptr_e).result.uresult
0d3f8                 | ' t1=pop()
0d3f8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0d3f8     2C 22 0E F2 | 	cmp	local03, #44 wz
0d3fc     44 00 90 AD |  if_e	jmp	#LR__1190
0d400     00 12 06 F6 | 	mov	arg01, #0
0d404     A8 8E B1 FD | 	call	#__system___getiolock_0541
0d408     FD 12 02 F6 | 	mov	arg01, result1
0d40c     3C 34 B1 FD | 	call	#__system___lockmem
0d410     83 01 00 FF 
0d414     99 15 06 F6 | 	mov	arg02, ##@LR__5426
0d418     00 12 06 F6 | 	mov	arg01, #0
0d41c     00 16 06 F6 | 	mov	arg03, #0
0d420     1C 41 B1 FD | 	call	#__system___basic_print_string
0d424     00 12 06 F6 | 	mov	arg01, #0
0d428     0A 14 06 F6 | 	mov	arg02, #10
0d42c     00 16 06 F6 | 	mov	arg03, #0
0d430     B4 40 B1 FD | 	call	#__system___basic_print_char
0d434     00 12 06 F6 | 	mov	arg01, #0
0d438     74 8E B1 FD | 	call	#__system___getiolock_0541
0d43c     FD 00 68 FC | 	wrlong	#0, result1
0d440     08 00 90 FD | 	jmp	#LR__1191
0d444                 | LR__1190
0d444                 | ' channel  = t1.result.iresult
0d444                 | ' close #channel
0d444     0F 13 02 F6 | 	mov	arg01, local01
0d448     94 84 B1 FD | 	call	#__system__close
0d44c                 | LR__1191
0d44c     A7 F0 03 F6 | 	mov	ptra, fp
0d450     B2 00 A0 FD | 	call	#popregs_
0d454                 | _do_close_ret
0d454     2D 00 64 FD | 	ret
0d458                 | 
0d458                 | ' 
0d458                 | ' '-------------------- cls
0d458                 | ' 
0d458                 | ' sub do_cls
0d458                 | _do_cls
0d458     37 00 00 FF 
0d45c     3C E4 05 F1 | 	add	objptr, ##28220
0d460     F2 12 02 FB | 	rdlong	arg01, objptr
0d464     04 E4 85 F1 | 	sub	objptr, #4
0d468     F2 14 02 FB | 	rdlong	arg02, objptr
0d46c     37 00 00 FF 
0d470     38 E4 85 F1 | 	sub	objptr, ##28216
0d474     F8 1A B1 FD | 	call	#_hg010b_spin2_cls
0d478     37 00 00 FF 
0d47c     3C E4 05 F1 | 	add	objptr, ##28220
0d480     F2 14 02 FB | 	rdlong	arg02, objptr
0d484     14 E4 85 F1 | 	sub	objptr, #20
0d488     F2 14 62 FC | 	wrlong	arg02, objptr
0d48c     37 00 00 FF 
0d490     28 E4 85 F1 | 	sub	objptr, ##28200
0d494                 | _do_cls_ret
0d494     2D 00 64 FD | 	ret
0d498                 | 
0d498                 | ' 
0d498                 | ' '-------------------- color
0d498                 | ' 
0d498                 | ' sub do_color
0d498                 | _do_color
0d498     03 4A 05 F6 | 	mov	COUNT_, #3
0d49c     A8 00 A0 FD | 	call	#pushregs_
0d4a0     F8 DE BF FD | 	call	#_pop
0d4a4     FD 1E 02 F6 | 	mov	local01, result1
0d4a8     FE 20 02 F6 | 	mov	local02, result2
0d4ac     FF 22 02 F6 | 	mov	local03, result3
0d4b0     37 00 00 FF 
0d4b4     28 E4 05 F1 | 	add	objptr, ##28200
0d4b8     F2 1E 62 FC | 	wrlong	local01, objptr
0d4bc     37 00 00 FF 
0d4c0     28 E4 85 F1 | 	sub	objptr, ##28200
0d4c4     A7 F0 03 F6 | 	mov	ptra, fp
0d4c8     B2 00 A0 FD | 	call	#popregs_
0d4cc                 | _do_color_ret
0d4cc     2D 00 64 FD | 	ret
0d4d0                 | 
0d4d0                 | ' 
0d4d0                 | ' '-------------------- cos
0d4d0                 | ' 
0d4d0                 | ' sub do_cos
0d4d0                 | _do_cos
0d4d0     01 4A 05 F6 | 	mov	COUNT_, #1
0d4d4     A8 00 A0 FD | 	call	#pushregs_
0d4d8     10 F0 07 F1 | 	add	ptra, #16
0d4dc     4A 00 00 FF 
0d4e0     80 E4 05 F1 | 	add	objptr, ##38016
0d4e4     F2 1E 02 FB | 	rdlong	local01, objptr
0d4e8     0F 17 02 F6 | 	mov	arg03, local01
0d4ec     01 16 66 F0 | 	shl	arg03, #1
0d4f0     0F 17 02 F1 | 	add	arg03, local01
0d4f4     02 16 66 F0 | 	shl	arg03, #2
0d4f8     03 00 00 FF 
0d4fc     04 E4 85 F1 | 	sub	objptr, ##1540
0d500     F2 16 02 F1 | 	add	arg03, objptr
0d504     0B 17 02 FB | 	rdlong	arg03, arg03
0d508     0C 4E 05 F1 | 	add	fp, #12
0d50c     A7 16 62 FC | 	wrlong	arg03, fp
0d510                 | ' 
0d510                 | ' numpar=compiledline(lineptr_e).result.uresult
0d510                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0d510     0C 4E 85 F1 | 	sub	fp, #12
0d514     02 16 16 F2 | 	cmp	arg03, #2 wc
0d518     47 00 00 FF 
0d51c     7C E4 85 F1 | 	sub	objptr, ##36476
0d520     0C 4E 05 C1 |  if_b	add	fp, #12
0d524     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d528     0C 4E 85 C1 |  if_b	sub	fp, #12
0d52c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0d530     00 12 06 F6 | 	mov	arg01, #0
0d534     78 8D B1 FD | 	call	#__system___getiolock_0541
0d538     FD 12 02 F6 | 	mov	arg01, result1
0d53c     0C 33 B1 FD | 	call	#__system___lockmem
0d540     83 01 00 FF 
0d544     AB 15 06 F6 | 	mov	arg02, ##@LR__5427
0d548     00 12 06 F6 | 	mov	arg01, #0
0d54c     00 16 06 F6 | 	mov	arg03, #0
0d550     EC 3F B1 FD | 	call	#__system___basic_print_string
0d554     00 12 06 F6 | 	mov	arg01, #0
0d558     54 8D B1 FD | 	call	#__system___getiolock_0541
0d55c     FD 00 68 FC | 	wrlong	#0, result1
0d560     27 12 06 F6 | 	mov	arg01, #39
0d564     54 FD B0 FD | 	call	#_printerror
0d568     78 00 90 FD | 	jmp	#LR__1201
0d56c                 | LR__1200
0d56c     2C DE BF FD | 	call	#_pop
0d570     A7 FA 61 FC | 	wrlong	result1, fp
0d574     04 4E 05 F1 | 	add	fp, #4
0d578     A7 FC 61 FC | 	wrlong	result2, fp
0d57c     04 4E 05 F1 | 	add	fp, #4
0d580     A7 FE 61 FC | 	wrlong	result3, fp
0d584     08 4E 85 F1 | 	sub	fp, #8
0d588     51 00 00 FF 
0d58c     BC E5 05 F1 | 	add	objptr, ##41916
0d590     F2 1E 02 FB | 	rdlong	local01, objptr
0d594     51 00 00 FF 
0d598     BC E5 85 F1 | 	sub	objptr, ##41916
0d59c     A7 12 02 F6 | 	mov	arg01, fp
0d5a0     98 E0 BF FD | 	call	#_converttofloat
0d5a4     FD 14 02 F6 | 	mov	arg02, result1
0d5a8     0F 13 02 F6 | 	mov	arg01, local01
0d5ac     50 5E B1 FD | 	call	#__system___float_mul
0d5b0     FD 14 02 F6 | 	mov	arg02, result1
0d5b4     87 E4 1F FF 
0d5b8     DB 13 06 F6 | 	mov	arg01, ##1070141403
0d5bc     1F 14 E6 F4 | 	bitnot	arg02, #31
0d5c0     6C 5A B1 FD | 	call	#__system___float_add
0d5c4     FD 12 02 F6 | 	mov	arg01, result1
0d5c8     94 67 B1 FD | 	call	#__system____builtin_sinf
0d5cc     A7 FA 61 FC | 	wrlong	result1, fp
0d5d0     08 4E 05 F1 | 	add	fp, #8
0d5d4     A7 3C 68 FC | 	wrlong	#30, fp
0d5d8     08 4E 85 F1 | 	sub	fp, #8
0d5dc     A7 12 02 F6 | 	mov	arg01, fp
0d5e0     50 DE BF FD | 	call	#_push
0d5e4                 | LR__1201
0d5e4     A7 F0 03 F6 | 	mov	ptra, fp
0d5e8     B2 00 A0 FD | 	call	#popregs_
0d5ec                 | _do_cos_ret
0d5ec     2D 00 64 FD | 	ret
0d5f0                 | 
0d5f0                 | ' 
0d5f0                 | ' '-------------------- cursor
0d5f0                 | ' 
0d5f0                 | ' sub do_cursor
0d5f0                 | _do_cursor
0d5f0     A8 DD BF FD | 	call	#_pop
0d5f4     00 FA 4D F2 | 	cmps	result1, #0 wz
0d5f8                 | ' t1=pop()
0d5f8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0d5f8     14 00 90 5D |  if_ne	jmp	#LR__1210
0d5fc     11 12 06 F6 | 	mov	arg01, #17
0d600     00 14 06 F6 | 	mov	arg02, #0
0d604     00 16 06 F6 | 	mov	arg03, #0
0d608     44 0C B1 FD | 	call	#_hg010b_spin2_setspritesize
0d60c     10 00 90 FD | 	jmp	#LR__1211
0d610                 | LR__1210
0d610     11 12 06 F6 | 	mov	arg01, #17
0d614     08 14 06 F6 | 	mov	arg02, #8
0d618     10 16 06 F6 | 	mov	arg03, #16
0d61c     30 0C B1 FD | 	call	#_hg010b_spin2_setspritesize
0d620                 | LR__1211
0d620                 | _do_cursor_ret
0d620     2D 00 64 FD | 	ret
0d624                 | 
0d624                 | ' 
0d624                 | ' '-------------------- defenv
0d624                 | ' 
0d624                 | ' sub do_defenv
0d624                 | _do_defenv
0d624     08 4A 05 F6 | 	mov	COUNT_, #8
0d628     A8 00 A0 FD | 	call	#pushregs_
0d62c     58 F0 07 F1 | 	add	ptra, #88
0d630     4A 00 00 FF 
0d634     80 E4 05 F1 | 	add	objptr, ##38016
0d638     F2 1E 02 FB | 	rdlong	local01, objptr
0d63c     0F 1B 02 F6 | 	mov	arg05, local01
0d640     01 1A 66 F0 | 	shl	arg05, #1
0d644     0F 1B 02 F1 | 	add	arg05, local01
0d648     02 1A 66 F0 | 	shl	arg05, #2
0d64c     03 00 00 FF 
0d650     04 E4 85 F1 | 	sub	objptr, ##1540
0d654     F2 1A 02 F1 | 	add	arg05, objptr
0d658     0D 1B 02 FB | 	rdlong	arg05, arg05
0d65c     10 4E 05 F1 | 	add	fp, #16
0d660     A7 1A 62 FC | 	wrlong	arg05, fp
0d664                 | ' 
0d664                 | ' numpar=compiledline(lineptr_e).result.uresult
0d664                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0d664     10 4E 85 F1 | 	sub	fp, #16
0d668     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d66c     47 00 00 FF 
0d670     7C E4 85 F1 | 	sub	objptr, ##36476
0d674     10 4E 05 51 |  if_ne	add	fp, #16
0d678     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d67c     10 4E 85 51 |  if_ne	sub	fp, #16
0d680     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d684     8C 0A 90 5D |  if_ne	jmp	#LR__1241
0d688                 | ' 
0d688                 | ' if numpar=2 then						' env from .h2 or from a pointer
0d688     10 4E 05 F1 | 	add	fp, #16
0d68c     A7 1E 02 FB | 	rdlong	local01, fp
0d690     10 4E 85 F1 | 	sub	fp, #16
0d694     02 1E 0E F2 | 	cmp	local01, #2 wz
0d698     24 04 90 5D |  if_ne	jmp	#LR__1233
0d69c     FC DC BF FD | 	call	#_pop
0d6a0     FF 1A 02 F6 | 	mov	arg05, result3
0d6a4     40 4E 05 F1 | 	add	fp, #64
0d6a8     A7 FA 61 FC | 	wrlong	result1, fp
0d6ac     04 4E 05 F1 | 	add	fp, #4
0d6b0     A7 FC 61 FC | 	wrlong	result2, fp
0d6b4     04 4E 05 F1 | 	add	fp, #4
0d6b8     A7 1A 62 FC | 	wrlong	arg05, fp
0d6bc                 | '   t1=pop()
0d6bc                 | '   if t1.result_type=result_string2 then 
0d6bc     48 4E 85 F1 | 	sub	fp, #72
0d6c0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d6c4     20 00 90 5D |  if_ne	jmp	#LR__1220
0d6c8     40 4E 05 F1 | 	add	fp, #64
0d6cc     A7 12 02 FB | 	rdlong	arg01, fp
0d6d0     40 4E 85 F1 | 	sub	fp, #64
0d6d4     3C DE BF FD | 	call	#_convertstring
0d6d8     4C 4E 05 F1 | 	add	fp, #76
0d6dc     A7 FA 61 FC | 	wrlong	result1, fp
0d6e0     4C 4E 85 F1 | 	sub	fp, #76
0d6e4     58 00 90 FD | 	jmp	#LR__1223
0d6e8                 | LR__1220
0d6e8     48 4E 05 F1 | 	add	fp, #72
0d6ec     A7 1E 02 FB | 	rdlong	local01, fp
0d6f0     48 4E 85 F1 | 	sub	fp, #72
0d6f4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d6f8     18 00 90 5D |  if_ne	jmp	#LR__1221
0d6fc     40 4E 05 F1 | 	add	fp, #64
0d700     A7 1E 02 FB | 	rdlong	local01, fp
0d704     0C 4E 05 F1 | 	add	fp, #12
0d708     A7 1E 62 FC | 	wrlong	local01, fp
0d70c     4C 4E 85 F1 | 	sub	fp, #76
0d710     2C 00 90 FD | 	jmp	#LR__1222
0d714                 | LR__1221
0d714     83 01 00 FF 
0d718     B1 1F 06 F6 | 	mov	local01, ##@LR__5428
0d71c     4C 4E 05 F1 | 	add	fp, #76
0d720     A7 1E 62 FC | 	wrlong	local01, fp
0d724     0C 4E 85 F1 | 	sub	fp, #12
0d728     A7 12 02 F6 | 	mov	arg01, fp
0d72c     40 4E 85 F1 | 	sub	fp, #64
0d730     4C DE BF FD | 	call	#_converttoint
0d734     1C 4E 05 F1 | 	add	fp, #28
0d738     A7 FA 61 FC | 	wrlong	result1, fp
0d73c     1C 4E 85 F1 | 	sub	fp, #28
0d740                 | LR__1222
0d740                 | LR__1223
0d740                 | '   if s1<>"" then 
0d740     4C 4E 05 F1 | 	add	fp, #76
0d744     A7 12 02 FB | 	rdlong	arg01, fp
0d748     4C 4E 85 F1 | 	sub	fp, #76
0d74c     83 01 00 FF 
0d750     B2 15 06 F6 | 	mov	arg02, ##@LR__5429
0d754     1C 31 B1 FD | 	call	#__system___string_cmp
0d758     00 FA 0D F2 | 	cmp	result1, #0 wz
0d75c     24 02 90 AD |  if_e	jmp	#LR__1227
0d760     38 DC BF FD | 	call	#_pop
0d764     FF 1E 02 F6 | 	mov	local01, result3
0d768     40 4E 05 F1 | 	add	fp, #64
0d76c     A7 FA 61 FC | 	wrlong	result1, fp
0d770     04 4E 05 F1 | 	add	fp, #4
0d774     A7 FC 61 FC | 	wrlong	result2, fp
0d778     04 4E 05 F1 | 	add	fp, #4
0d77c     A7 1E 62 FC | 	wrlong	local01, fp
0d780     08 4E 85 F1 | 	sub	fp, #8
0d784     A7 12 02 F6 | 	mov	arg01, fp
0d788     40 4E 85 F1 | 	sub	fp, #64
0d78c     F0 DD BF FD | 	call	#_converttoint
0d790     18 4E 05 F1 | 	add	fp, #24
0d794     A7 FA 61 FC | 	wrlong	result1, fp
0d798     18 4E 85 F1 | 	sub	fp, #24
0d79c                 | '     t1=pop()
0d79c                 | '     channel=converttoint(t1) 
0d79c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d79c     09 12 06 F6 | 	mov	arg01, #9
0d7a0     3C 81 B1 FD | 	call	#__system__close
0d7a4     09 1E 06 F6 | 	mov	local01, #9
0d7a8     83 01 00 FF 
0d7ac     B3 13 06 F6 | 	mov	arg01, ##@LR__5430
0d7b0     4C 4E 05 F1 | 	add	fp, #76
0d7b4     A7 14 02 FB | 	rdlong	arg02, fp
0d7b8     4C 4E 85 F1 | 	sub	fp, #76
0d7bc     E8 30 B1 FD | 	call	#__system___string_concat
0d7c0     FD 14 02 F6 | 	mov	arg02, result1
0d7c4     0F 13 02 F6 | 	mov	arg01, local01
0d7c8     00 16 06 F6 | 	mov	arg03, #0
0d7cc     80 3C B1 FD | 	call	#__system___basic_open_string
0d7d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d7d4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d7d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d7dc     0C 4E 05 F1 | 	add	fp, #12
0d7e0     A7 FA 61 FC | 	wrlong	result1, fp
0d7e4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d7e4     0C 4E 85 F1 | 	sub	fp, #12
0d7e8     A0 00 90 AD |  if_e	jmp	#LR__1224
0d7ec     00 12 06 F6 | 	mov	arg01, #0
0d7f0     BC 8A B1 FD | 	call	#__system___getiolock_0541
0d7f4     FD 12 02 F6 | 	mov	arg01, result1
0d7f8     50 30 B1 FD | 	call	#__system___lockmem
0d7fc     83 01 00 FF 
0d800     C0 15 06 F6 | 	mov	arg02, ##@LR__5431
0d804     00 12 06 F6 | 	mov	arg01, #0
0d808     00 16 06 F6 | 	mov	arg03, #0
0d80c     30 3D B1 FD | 	call	#__system___basic_print_string
0d810     0C 4E 05 F1 | 	add	fp, #12
0d814     A7 14 02 FB | 	rdlong	arg02, fp
0d818     0C 4E 85 F1 | 	sub	fp, #12
0d81c     00 12 06 F6 | 	mov	arg01, #0
0d820     00 16 06 F6 | 	mov	arg03, #0
0d824     0A 18 06 F6 | 	mov	arg04, #10
0d828     58 3D B1 FD | 	call	#__system___basic_print_integer
0d82c     83 01 00 FF 
0d830     CE 15 06 F6 | 	mov	arg02, ##@LR__5432
0d834     00 12 06 F6 | 	mov	arg01, #0
0d838     00 16 06 F6 | 	mov	arg03, #0
0d83c     00 3D B1 FD | 	call	#__system___basic_print_string
0d840     00 1E 06 F6 | 	mov	local01, #0
0d844     0C 4E 05 F1 | 	add	fp, #12
0d848     A7 12 02 FB | 	rdlong	arg01, fp
0d84c     0C 4E 85 F1 | 	sub	fp, #12
0d850     C0 56 B1 FD | 	call	#__system___strerror
0d854     FD 14 02 F6 | 	mov	arg02, result1
0d858     0F 13 02 F6 | 	mov	arg01, local01
0d85c     00 16 06 F6 | 	mov	arg03, #0
0d860     DC 3C B1 FD | 	call	#__system___basic_print_string
0d864     00 12 06 F6 | 	mov	arg01, #0
0d868     0A 14 06 F6 | 	mov	arg02, #10
0d86c     00 16 06 F6 | 	mov	arg03, #0
0d870     74 3C B1 FD | 	call	#__system___basic_print_char
0d874     00 12 06 F6 | 	mov	arg01, #0
0d878     34 8A B1 FD | 	call	#__system___getiolock_0541
0d87c     FD 00 68 FC | 	wrlong	#0, result1
0d880     09 12 06 F6 | 	mov	arg01, #9
0d884     58 80 B1 FD | 	call	#__system__close
0d888     88 08 90 FD | 	jmp	#LR__1241
0d88c                 | LR__1224
0d88c                 | '     get #9,17,envbuf8(channel,0),256
0d88c     18 4E 05 F1 | 	add	fp, #24
0d890     A7 1A 02 FB | 	rdlong	arg05, fp
0d894     18 4E 85 F1 | 	sub	fp, #24
0d898     0D 17 02 F6 | 	mov	arg03, arg05
0d89c     09 16 66 F0 | 	shl	arg03, #9
0d8a0     0D 17 02 F1 | 	add	arg03, arg05
0d8a4     0C 00 00 FF 
0d8a8     D8 E4 05 F1 | 	add	objptr, ##6360
0d8ac     F2 16 02 F1 | 	add	arg03, objptr
0d8b0     09 12 06 F6 | 	mov	arg01, #9
0d8b4     11 14 06 F6 | 	mov	arg02, #17
0d8b8     00 19 06 F6 | 	mov	arg04, #256
0d8bc     01 1A 06 F6 | 	mov	arg05, #1
0d8c0     0C 00 00 FF 
0d8c4     D8 E4 85 F1 | 	sub	objptr, ##6360
0d8c8     F0 3D B1 FD | 	call	#__system___basic_get
0d8cc                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d8cc     14 4E 05 F1 | 	add	fp, #20
0d8d0     A7 FE 69 FC | 	wrlong	#255, fp
0d8d4     14 4E 85 F1 | 	sub	fp, #20
0d8d8     0C 00 00 FF 
0d8dc     D8 E4 05 F1 | 	add	objptr, ##6360
0d8e0     97 30 48 FB | 	callpa	#(@LR__1226-@LR__1225)>>2,fcache_load_ptr_
0d8e4                 | LR__1225
0d8e4     18 4E 05 F1 | 	add	fp, #24
0d8e8     A7 16 02 FB | 	rdlong	arg03, fp
0d8ec     0B 1F 02 F6 | 	mov	local01, arg03
0d8f0     09 1E 66 F0 | 	shl	local01, #9
0d8f4     F2 1E 02 F1 | 	add	local01, objptr
0d8f8     04 4E 85 F1 | 	sub	fp, #4
0d8fc     A7 1A 02 FB | 	rdlong	arg05, fp
0d900     0D 19 02 F6 | 	mov	arg04, arg05
0d904     01 18 66 F0 | 	shl	arg04, #1
0d908     0F 19 02 F1 | 	add	arg04, local01
0d90c     0B 1F 02 F6 | 	mov	local01, arg03
0d910     09 1E 66 F0 | 	shl	local01, #9
0d914     0B 1F 02 F1 | 	add	local01, arg03
0d918     F2 1E 02 F1 | 	add	local01, objptr
0d91c     0F 1B 02 F1 | 	add	arg05, local01
0d920     0D 1F C2 FA | 	rdbyte	local01, arg05
0d924     00 1F 06 FA | 	mul	local01, #256
0d928     0C 1F 52 FC | 	wrword	local01, arg04
0d92c     A7 1E 02 FB | 	rdlong	local01, fp
0d930     01 1E 86 F1 | 	sub	local01, #1
0d934     A7 1E 62 FC | 	wrlong	local01, fp
0d938     14 4E 85 F1 | 	sub	fp, #20
0d93c     00 1E 56 F2 | 	cmps	local01, #0 wc
0d940     A0 FF 9F 3D |  if_ae	jmp	#LR__1225
0d944                 | LR__1226
0d944     0C 00 00 FF 
0d948     D8 E4 85 F1 | 	sub	objptr, ##6360
0d94c                 | '     close #9
0d94c     09 12 06 F6 | 	mov	arg01, #9
0d950     8C 7F B1 FD | 	call	#__system__close
0d954     18 4E 05 F1 | 	add	fp, #24
0d958     A7 1E 02 FB | 	rdlong	local01, fp
0d95c     18 4E 85 F1 | 	sub	fp, #24
0d960     09 1E 66 F0 | 	shl	local01, #9
0d964     0C 00 00 FF 
0d968     D8 E4 05 F1 | 	add	objptr, ##6360
0d96c     F2 1E 02 F1 | 	add	local01, objptr
0d970     FE 1F 06 F1 | 	add	local01, #510
0d974     0F 01 58 FC | 	wrword	#0, local01
0d978                 | '     envbuf(channel,255)=0                                                              
0d978                 | '     return
0d978     0C 00 00 FF 
0d97c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d980     90 07 90 FD | 	jmp	#LR__1241
0d984                 | LR__1227
0d984                 | '     if wptr < $80000 then 
0d984     1C 4E 05 F1 | 	add	fp, #28
0d988     A7 20 02 FB | 	rdlong	local02, fp
0d98c     1C 4E 85 F1 | 	sub	fp, #28
0d990     00 04 00 FF 
0d994     00 20 56 F2 | 	cmps	local02, ##524288 wc
0d998     7C 00 90 3D |  if_ae	jmp	#LR__1230
0d99c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d99c     14 4E 05 F1 | 	add	fp, #20
0d9a0     A7 00 68 FC | 	wrlong	#0, fp
0d9a4     14 4E 85 F1 | 	sub	fp, #20
0d9a8     0C 00 00 FF 
0d9ac     D8 E4 05 F1 | 	add	objptr, ##6360
0d9b0     97 2C 48 FB | 	callpa	#(@LR__1229-@LR__1228)>>2,fcache_load_ptr_
0d9b4                 | LR__1228
0d9b4     18 4E 05 F1 | 	add	fp, #24
0d9b8     A7 20 02 FB | 	rdlong	local02, fp
0d9bc     09 20 66 F0 | 	shl	local02, #9
0d9c0     F2 20 02 F1 | 	add	local02, objptr
0d9c4     04 4E 85 F1 | 	sub	fp, #4
0d9c8     A7 1E 02 FB | 	rdlong	local01, fp
0d9cc     0F 1B 02 F6 | 	mov	arg05, local01
0d9d0     01 1A 66 F0 | 	shl	arg05, #1
0d9d4     10 1B 02 F1 | 	add	arg05, local02
0d9d8     08 4E 05 F1 | 	add	fp, #8
0d9dc     A7 12 02 FB | 	rdlong	arg01, fp
0d9e0     01 1E 66 F0 | 	shl	local01, #1
0d9e4     0F 13 02 F1 | 	add	arg01, local01
0d9e8     09 FB E1 FA | 	rdword	result1, arg01
0d9ec     0D FB 51 FC | 	wrword	result1, arg05
0d9f0     08 4E 85 F1 | 	sub	fp, #8
0d9f4     A7 20 02 FB | 	rdlong	local02, fp
0d9f8     01 20 06 F1 | 	add	local02, #1
0d9fc     A7 20 62 FC | 	wrlong	local02, fp
0da00     14 4E 85 F1 | 	sub	fp, #20
0da04     00 21 56 F2 | 	cmps	local02, #256 wc
0da08     A8 FF 9F CD |  if_b	jmp	#LR__1228
0da0c                 | LR__1229
0da0c     0C 00 00 FF 
0da10     D8 E4 85 F1 | 	sub	objptr, ##6360
0da14     78 00 90 FD | 	jmp	#LR__1232
0da18                 | LR__1230
0da18                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0da18     14 4E 05 F1 | 	add	fp, #20
0da1c     A7 00 68 FC | 	wrlong	#0, fp
0da20     14 4E 85 F1 | 	sub	fp, #20
0da24                 | LR__1231
0da24     18 4E 05 F1 | 	add	fp, #24
0da28     A7 20 02 FB | 	rdlong	local02, fp
0da2c     09 20 66 F0 | 	shl	local02, #9
0da30     0C 00 00 FF 
0da34     D8 E4 05 F1 | 	add	objptr, ##6360
0da38     F2 20 02 F1 | 	add	local02, objptr
0da3c     04 4E 85 F1 | 	sub	fp, #4
0da40     A7 1E 02 FB | 	rdlong	local01, fp
0da44     0F 23 02 F6 | 	mov	local03, local01
0da48     01 22 66 F0 | 	shl	local03, #1
0da4c     10 23 02 F1 | 	add	local03, local02
0da50     08 4E 05 F1 | 	add	fp, #8
0da54     A7 12 02 FB | 	rdlong	arg01, fp
0da58     1C 4E 85 F1 | 	sub	fp, #28
0da5c     01 1E 66 F0 | 	shl	local01, #1
0da60     0F 13 02 F1 | 	add	arg01, local01
0da64     0C 00 00 FF 
0da68     D8 E4 85 F1 | 	sub	objptr, ##6360
0da6c     38 FB B0 FD | 	call	#_psdpeek
0da70     11 FB 51 FC | 	wrword	result1, local03
0da74     14 4E 05 F1 | 	add	fp, #20
0da78     A7 22 02 FB | 	rdlong	local03, fp
0da7c     01 22 06 F1 | 	add	local03, #1
0da80     A7 22 62 FC | 	wrlong	local03, fp
0da84     14 4E 85 F1 | 	sub	fp, #20
0da88     00 23 56 F2 | 	cmps	local03, #256 wc
0da8c     94 FF 9F CD |  if_b	jmp	#LR__1231
0da90                 | LR__1232
0da90     18 4E 05 F1 | 	add	fp, #24
0da94     A7 22 02 FB | 	rdlong	local03, fp
0da98     18 4E 85 F1 | 	sub	fp, #24
0da9c     09 22 66 F0 | 	shl	local03, #9
0daa0     0C 00 00 FF 
0daa4     D8 E4 05 F1 | 	add	objptr, ##6360
0daa8     F2 22 02 F1 | 	add	local03, objptr
0daac     FE 23 06 F1 | 	add	local03, #510
0dab0     11 01 58 FC | 	wrword	#0, local03
0dab4                 | '     envbuf(channel,255)=0
0dab4                 | '     return   
0dab4     0C 00 00 FF 
0dab8     D8 E4 85 F1 | 	sub	objptr, ##6360
0dabc     54 06 90 FD | 	jmp	#LR__1241
0dac0                 | LR__1233
0dac0                 | ' 
0dac0                 | ' if numpar=5 then   						 'simple adsr
0dac0     10 4E 05 F1 | 	add	fp, #16
0dac4     A7 20 02 FB | 	rdlong	local02, fp
0dac8     10 4E 85 F1 | 	sub	fp, #16
0dacc     05 20 0E F2 | 	cmp	local02, #5 wz
0dad0     14 06 90 5D |  if_ne	jmp	#LR__1240
0dad4     C4 D8 BF FD | 	call	#_pop
0dad8     FF 1E 02 F6 | 	mov	local01, result3
0dadc     40 4E 05 F1 | 	add	fp, #64
0dae0     A7 FA 61 FC | 	wrlong	result1, fp
0dae4     04 4E 05 F1 | 	add	fp, #4
0dae8     A7 FC 61 FC | 	wrlong	result2, fp
0daec     04 4E 05 F1 | 	add	fp, #4
0daf0     A7 1E 62 FC | 	wrlong	local01, fp
0daf4     08 4E 85 F1 | 	sub	fp, #8
0daf8     A7 12 02 F6 | 	mov	arg01, fp
0dafc     40 4E 85 F1 | 	sub	fp, #64
0db00     38 DB BF FD | 	call	#_converttofloat
0db04     FD 20 02 F6 | 	mov	local02, result1
0db08     2C 4E 05 F1 | 	add	fp, #44
0db0c     A7 20 62 FC | 	wrlong	local02, fp
0db10     2C 4E 85 F1 | 	sub	fp, #44
0db14     84 D8 BF FD | 	call	#_pop
0db18     FF 1E 02 F6 | 	mov	local01, result3
0db1c     40 4E 05 F1 | 	add	fp, #64
0db20     A7 FA 61 FC | 	wrlong	result1, fp
0db24     04 4E 05 F1 | 	add	fp, #4
0db28     A7 FC 61 FC | 	wrlong	result2, fp
0db2c     04 4E 05 F1 | 	add	fp, #4
0db30     A7 1E 62 FC | 	wrlong	local01, fp
0db34     08 4E 85 F1 | 	sub	fp, #8
0db38     A7 12 02 F6 | 	mov	arg01, fp
0db3c     40 4E 85 F1 | 	sub	fp, #64
0db40     F8 DA BF FD | 	call	#_converttofloat
0db44     FD 20 02 F6 | 	mov	local02, result1
0db48     28 4E 05 F1 | 	add	fp, #40
0db4c     A7 20 62 FC | 	wrlong	local02, fp
0db50     28 4E 85 F1 | 	sub	fp, #40
0db54     44 D8 BF FD | 	call	#_pop
0db58     FF 1E 02 F6 | 	mov	local01, result3
0db5c     40 4E 05 F1 | 	add	fp, #64
0db60     A7 FA 61 FC | 	wrlong	result1, fp
0db64     04 4E 05 F1 | 	add	fp, #4
0db68     A7 FC 61 FC | 	wrlong	result2, fp
0db6c     04 4E 05 F1 | 	add	fp, #4
0db70     A7 1E 62 FC | 	wrlong	local01, fp
0db74     08 4E 85 F1 | 	sub	fp, #8
0db78     A7 12 02 F6 | 	mov	arg01, fp
0db7c     40 4E 85 F1 | 	sub	fp, #64
0db80     B8 DA BF FD | 	call	#_converttofloat
0db84     FD 20 02 F6 | 	mov	local02, result1
0db88     24 4E 05 F1 | 	add	fp, #36
0db8c     A7 20 62 FC | 	wrlong	local02, fp
0db90     24 4E 85 F1 | 	sub	fp, #36
0db94     04 D8 BF FD | 	call	#_pop
0db98     FF 1E 02 F6 | 	mov	local01, result3
0db9c     40 4E 05 F1 | 	add	fp, #64
0dba0     A7 FA 61 FC | 	wrlong	result1, fp
0dba4     04 4E 05 F1 | 	add	fp, #4
0dba8     A7 FC 61 FC | 	wrlong	result2, fp
0dbac     04 4E 05 F1 | 	add	fp, #4
0dbb0     A7 1E 62 FC | 	wrlong	local01, fp
0dbb4     08 4E 85 F1 | 	sub	fp, #8
0dbb8     A7 12 02 F6 | 	mov	arg01, fp
0dbbc     40 4E 85 F1 | 	sub	fp, #64
0dbc0     78 DA BF FD | 	call	#_converttofloat
0dbc4     FD 20 02 F6 | 	mov	local02, result1
0dbc8     20 4E 05 F1 | 	add	fp, #32
0dbcc     A7 20 62 FC | 	wrlong	local02, fp
0dbd0     20 4E 85 F1 | 	sub	fp, #32
0dbd4     C4 D7 BF FD | 	call	#_pop
0dbd8     FF 1E 02 F6 | 	mov	local01, result3
0dbdc     40 4E 05 F1 | 	add	fp, #64
0dbe0     A7 FA 61 FC | 	wrlong	result1, fp
0dbe4     04 4E 05 F1 | 	add	fp, #4
0dbe8     A7 FC 61 FC | 	wrlong	result2, fp
0dbec     04 4E 05 F1 | 	add	fp, #4
0dbf0     A7 1E 62 FC | 	wrlong	local01, fp
0dbf4     08 4E 85 F1 | 	sub	fp, #8
0dbf8     A7 12 02 F6 | 	mov	arg01, fp
0dbfc     40 4E 85 F1 | 	sub	fp, #64
0dc00     7C D9 BF FD | 	call	#_converttoint
0dc04     18 4E 05 F1 | 	add	fp, #24
0dc08     A7 FA 61 FC | 	wrlong	result1, fp
0dc0c                 | '   t1=pop() : rr=converttofloat(t1)
0dc0c                 | '   t1=pop() : ss=converttofloat(t1) 
0dc0c                 | '   t1=pop() : dd=converttofloat(t1)
0dc0c                 | '   t1=pop() : aa=converttofloat(t1)
0dc0c                 | '   t1=pop() : channel=converttoint(t1)
0dc0c                 | '   if ss<0.0 then ss=0.0 
0dc0c     10 4E 05 F1 | 	add	fp, #16
0dc10     A7 12 02 FB | 	rdlong	arg01, fp
0dc14     28 4E 85 F1 | 	sub	fp, #40
0dc18     00 14 06 F6 | 	mov	arg02, #0
0dc1c     01 16 06 F6 | 	mov	arg03, #1
0dc20     10 5C B1 FD | 	call	#__system___float_cmp
0dc24     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc28     28 4E 05 C1 |  if_b	add	fp, #40
0dc2c     A7 00 68 CC |  if_b	wrlong	#0, fp
0dc30     28 4E 85 C1 |  if_b	sub	fp, #40
0dc34                 | '   if ss>1.0 then ss=1.0
0dc34     28 4E 05 F1 | 	add	fp, #40
0dc38     A7 12 02 FB | 	rdlong	arg01, fp
0dc3c     28 4E 85 F1 | 	sub	fp, #40
0dc40     00 C0 1F FF 
0dc44     00 14 06 F6 | 	mov	arg02, ##1065353216
0dc48     01 16 66 F6 | 	neg	arg03, #1
0dc4c     E4 5B B1 FD | 	call	#__system___float_cmp
0dc50     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc54     28 4E 05 31 |  if_ae	add	fp, #40
0dc58     00 C0 9F 3F 
0dc5c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0dc60     28 4E 85 31 |  if_ae	sub	fp, #40
0dc64     20 4E 05 F1 | 	add	fp, #32
0dc68     A7 12 02 FB | 	rdlong	arg01, fp
0dc6c     04 4E 05 F1 | 	add	fp, #4
0dc70     A7 14 02 FB | 	rdlong	arg02, fp
0dc74     24 4E 85 F1 | 	sub	fp, #36
0dc78     B4 53 B1 FD | 	call	#__system___float_add
0dc7c     FD 12 02 F6 | 	mov	arg01, result1
0dc80     2C 4E 05 F1 | 	add	fp, #44
0dc84     A7 14 02 FB | 	rdlong	arg02, fp
0dc88     2C 4E 85 F1 | 	sub	fp, #44
0dc8c     A0 53 B1 FD | 	call	#__system___float_add
0dc90     30 4E 05 F1 | 	add	fp, #48
0dc94     A7 FA 61 FC | 	wrlong	result1, fp
0dc98     FD 14 02 F6 | 	mov	arg02, result1
0dc9c     30 4E 85 F1 | 	sub	fp, #48
0dca0     00 C0 21 FF 
0dca4     00 12 06 F6 | 	mov	arg01, ##1132462080
0dca8     58 59 B1 FD | 	call	#__system___float_div
0dcac     34 4E 05 F1 | 	add	fp, #52
0dcb0     A7 FA 61 FC | 	wrlong	result1, fp
0dcb4     14 4E 85 F1 | 	sub	fp, #20
0dcb8     A7 12 02 FB | 	rdlong	arg01, fp
0dcbc     FD 14 02 F6 | 	mov	arg02, result1
0dcc0     20 4E 85 F1 | 	sub	fp, #32
0dcc4     38 57 B1 FD | 	call	#__system___float_mul
0dcc8     FD 12 02 F6 | 	mov	arg01, result1
0dccc     01 14 06 F6 | 	mov	arg02, #1
0dcd0     F4 5B B1 FD | 	call	#__system___float_tointeger
0dcd4     A7 FA 61 FC | 	wrlong	result1, fp
0dcd8     24 4E 05 F1 | 	add	fp, #36
0dcdc     A7 12 02 FB | 	rdlong	arg01, fp
0dce0     10 4E 05 F1 | 	add	fp, #16
0dce4     A7 14 02 FB | 	rdlong	arg02, fp
0dce8     34 4E 85 F1 | 	sub	fp, #52
0dcec     10 57 B1 FD | 	call	#__system___float_mul
0dcf0     FD 12 02 F6 | 	mov	arg01, result1
0dcf4     01 14 06 F6 | 	mov	arg02, #1
0dcf8     CC 5B B1 FD | 	call	#__system___float_tointeger
0dcfc     04 4E 05 F1 | 	add	fp, #4
0dd00     A7 FA 61 FC | 	wrlong	result1, fp
0dd04     28 4E 05 F1 | 	add	fp, #40
0dd08     A7 12 02 FB | 	rdlong	arg01, fp
0dd0c     08 4E 05 F1 | 	add	fp, #8
0dd10     A7 14 02 FB | 	rdlong	arg02, fp
0dd14     34 4E 85 F1 | 	sub	fp, #52
0dd18     E4 56 B1 FD | 	call	#__system___float_mul
0dd1c     FD 12 02 F6 | 	mov	arg01, result1
0dd20     01 14 06 F6 | 	mov	arg02, #1
0dd24     A0 5B B1 FD | 	call	#__system___float_tointeger
0dd28     0C 4E 05 F1 | 	add	fp, #12
0dd2c     A7 FA 61 FC | 	wrlong	result1, fp
0dd30     0C 4E 85 F1 | 	sub	fp, #12
0dd34     F8 BF 23 FF 
0dd38     00 20 06 F6 | 	mov	local02, ##1199566848
0dd3c     A7 12 02 FB | 	rdlong	arg01, fp
0dd40     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd44     1F 24 C6 C9 |  if_b	decod	local04, #31
0dd48     00 24 06 36 |  if_ae	mov	local04, #0
0dd4c     AC 52 B1 FD | 	call	#__system___float_fromuns
0dd50     12 FB 61 F5 | 	xor	result1, local04
0dd54     FD 14 02 F6 | 	mov	arg02, result1
0dd58     10 13 02 F6 | 	mov	arg01, local02
0dd5c     A4 58 B1 FD | 	call	#__system___float_div
0dd60     38 4E 05 F1 | 	add	fp, #56
0dd64     A7 FA 61 FC | 	wrlong	result1, fp
0dd68     F8 BF 23 FF 
0dd6c     00 20 06 F6 | 	mov	local02, ##1199566848
0dd70     10 4E 85 F1 | 	sub	fp, #16
0dd74     A7 14 02 FB | 	rdlong	arg02, fp
0dd78     28 4E 85 F1 | 	sub	fp, #40
0dd7c     F8 BF 23 FF 
0dd80     00 12 06 F6 | 	mov	arg01, ##1199566848
0dd84     78 56 B1 FD | 	call	#__system___float_mul
0dd88     FD 14 02 F6 | 	mov	arg02, result1
0dd8c     10 13 02 F6 | 	mov	arg01, local02
0dd90     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd94     98 52 B1 FD | 	call	#__system___float_add
0dd98     FD 20 02 F6 | 	mov	local02, result1
0dd9c     04 4E 05 F1 | 	add	fp, #4
0dda0     A7 12 02 FB | 	rdlong	arg01, fp
0dda4     04 4E 85 F1 | 	sub	fp, #4
0dda8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddac     1F 24 C6 C9 |  if_b	decod	local04, #31
0ddb0     00 24 06 36 |  if_ae	mov	local04, #0
0ddb4     44 52 B1 FD | 	call	#__system___float_fromuns
0ddb8     12 FB 61 F5 | 	xor	result1, local04
0ddbc     FD 14 02 F6 | 	mov	arg02, result1
0ddc0     10 13 02 F6 | 	mov	arg01, local02
0ddc4     3C 58 B1 FD | 	call	#__system___float_div
0ddc8     24 4E 05 F1 | 	add	fp, #36
0ddcc     A7 FA 61 FC | 	wrlong	result1, fp
0ddd0     04 4E 05 F1 | 	add	fp, #4
0ddd4     A7 14 02 FB | 	rdlong	arg02, fp
0ddd8     28 4E 85 F1 | 	sub	fp, #40
0dddc     F8 BF 23 FF 
0dde0     00 12 06 F6 | 	mov	arg01, ##1199566848
0dde4     18 56 B1 FD | 	call	#__system___float_mul
0dde8     FD 20 02 F6 | 	mov	local02, result1
0ddec     0C 4E 05 F1 | 	add	fp, #12
0ddf0     A7 12 02 FB | 	rdlong	arg01, fp
0ddf4     0C 4E 85 F1 | 	sub	fp, #12
0ddf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddfc     1F 24 C6 C9 |  if_b	decod	local04, #31
0de00     00 24 06 36 |  if_ae	mov	local04, #0
0de04     F4 51 B1 FD | 	call	#__system___float_fromuns
0de08     12 FB 61 F5 | 	xor	result1, local04
0de0c     FD 14 02 F6 | 	mov	arg02, result1
0de10     10 13 02 F6 | 	mov	arg01, local02
0de14     EC 57 B1 FD | 	call	#__system___float_div
0de18     3C 4E 05 F1 | 	add	fp, #60
0de1c     A7 FA 61 FC | 	wrlong	result1, fp
0de20     24 4E 85 F1 | 	sub	fp, #36
0de24     A7 26 02 FB | 	rdlong	local05, fp
0de28     18 4E 85 F1 | 	sub	fp, #24
0de2c     01 26 66 F0 | 	shl	local05, #1
0de30     51 00 00 FF 
0de34     C8 E5 05 F1 | 	add	objptr, ##41928
0de38     F2 26 02 F1 | 	add	local05, objptr
0de3c     A7 28 02 FB | 	rdlong	local06, fp
0de40     04 4E 05 F1 | 	add	fp, #4
0de44     A7 22 02 FB | 	rdlong	local03, fp
0de48     11 29 02 F1 | 	add	local06, local03
0de4c     13 29 52 FC | 	wrword	local06, local05
0de50     1C 4E 05 F1 | 	add	fp, #28
0de54     A7 00 68 FC | 	wrlong	#0, fp
0de58                 | '   fulltime=aa+dd+rr
0de58                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0de58                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0de58                 | '   suspoints(channel)=a+d
0de58                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0de58     0C 4E 85 F1 | 	sub	fp, #12
0de5c     A7 00 68 FC | 	wrlong	#0, fp
0de60     14 4E 85 F1 | 	sub	fp, #20
0de64     A7 2A 02 FB | 	rdlong	local07, fp
0de68     51 00 00 FF 
0de6c     C8 E5 85 F1 | 	sub	objptr, ##41928
0de70                 | LR__1234
0de70     14 4E 05 F1 | 	add	fp, #20
0de74     A7 20 02 FB | 	rdlong	local02, fp
0de78     14 4E 85 F1 | 	sub	fp, #20
0de7c     15 21 52 F2 | 	cmps	local02, local07 wc
0de80     80 00 90 3D |  if_ae	jmp	#LR__1235
0de84     18 4E 05 F1 | 	add	fp, #24
0de88     A7 28 02 FB | 	rdlong	local06, fp
0de8c     09 28 66 F0 | 	shl	local06, #9
0de90     0C 00 00 FF 
0de94     D8 E4 05 F1 | 	add	objptr, ##6360
0de98     F2 28 02 F1 | 	add	local06, objptr
0de9c     04 4E 85 F1 | 	sub	fp, #4
0dea0     A7 26 02 FB | 	rdlong	local05, fp
0dea4     01 26 66 F0 | 	shl	local05, #1
0dea8     14 27 02 F1 | 	add	local05, local06
0deac     0C 4E 05 F1 | 	add	fp, #12
0deb0     A7 12 02 FB | 	rdlong	arg01, fp
0deb4     20 4E 85 F1 | 	sub	fp, #32
0deb8     0C 00 00 FF 
0debc     D8 E4 85 F1 | 	sub	objptr, ##6360
0dec0     01 14 06 F6 | 	mov	arg02, #1
0dec4     00 5A B1 FD | 	call	#__system___float_tointeger
0dec8     13 FB 51 FC | 	wrword	result1, local05
0decc     20 4E 05 F1 | 	add	fp, #32
0ded0     A7 12 02 FB | 	rdlong	arg01, fp
0ded4     18 4E 05 F1 | 	add	fp, #24
0ded8     A7 14 02 FB | 	rdlong	arg02, fp
0dedc     38 4E 85 F1 | 	sub	fp, #56
0dee0     4C 51 B1 FD | 	call	#__system___float_add
0dee4     20 4E 05 F1 | 	add	fp, #32
0dee8     A7 FA 61 FC | 	wrlong	result1, fp
0deec     0C 4E 85 F1 | 	sub	fp, #12
0def0     A7 28 02 FB | 	rdlong	local06, fp
0def4     01 28 06 F1 | 	add	local06, #1
0def8     A7 28 62 FC | 	wrlong	local06, fp
0defc     14 4E 85 F1 | 	sub	fp, #20
0df00     6C FF 9F FD | 	jmp	#LR__1234
0df04                 | LR__1235
0df04                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0df04     A7 20 02 FB | 	rdlong	local02, fp
0df08     14 4E 05 F1 | 	add	fp, #20
0df0c     A7 20 62 FC | 	wrlong	local02, fp
0df10     14 4E 85 F1 | 	sub	fp, #20
0df14     A7 2C 02 FB | 	rdlong	local08, fp
0df18     04 4E 05 F1 | 	add	fp, #4
0df1c     A7 20 02 FB | 	rdlong	local02, fp
0df20     04 4E 85 F1 | 	sub	fp, #4
0df24     10 2D 02 F1 | 	add	local08, local02
0df28                 | LR__1236
0df28     14 4E 05 F1 | 	add	fp, #20
0df2c     A7 20 02 FB | 	rdlong	local02, fp
0df30     14 4E 85 F1 | 	sub	fp, #20
0df34     16 21 52 F2 | 	cmps	local02, local08 wc
0df38     A8 00 90 3D |  if_ae	jmp	#LR__1237
0df3c     18 4E 05 F1 | 	add	fp, #24
0df40     A7 2A 02 FB | 	rdlong	local07, fp
0df44     09 2A 66 F0 | 	shl	local07, #9
0df48     0C 00 00 FF 
0df4c     D8 E4 05 F1 | 	add	objptr, ##6360
0df50     F2 2A 02 F1 | 	add	local07, objptr
0df54     04 4E 85 F1 | 	sub	fp, #4
0df58     A7 28 02 FB | 	rdlong	local06, fp
0df5c     01 28 66 F0 | 	shl	local06, #1
0df60     15 29 02 F1 | 	add	local06, local07
0df64     0C 4E 05 F1 | 	add	fp, #12
0df68     A7 12 02 FB | 	rdlong	arg01, fp
0df6c     20 4E 85 F1 | 	sub	fp, #32
0df70     0C 00 00 FF 
0df74     D8 E4 85 F1 | 	sub	objptr, ##6360
0df78     01 14 06 F6 | 	mov	arg02, #1
0df7c     48 59 B1 FD | 	call	#__system___float_tointeger
0df80     14 FB 51 FC | 	wrword	result1, local06
0df84     20 4E 05 F1 | 	add	fp, #32
0df88     A7 12 02 FB | 	rdlong	arg01, fp
0df8c     04 4E 05 F1 | 	add	fp, #4
0df90     A7 14 02 FB | 	rdlong	arg02, fp
0df94     24 4E 85 F1 | 	sub	fp, #36
0df98     1F 14 E6 F4 | 	bitnot	arg02, #31
0df9c     90 50 B1 FD | 	call	#__system___float_add
0dfa0     20 4E 05 F1 | 	add	fp, #32
0dfa4     A7 FA 61 FC | 	wrlong	result1, fp
0dfa8     20 4E 85 F1 | 	sub	fp, #32
0dfac     FD 12 02 F6 | 	mov	arg01, result1
0dfb0     00 14 06 F6 | 	mov	arg02, #0
0dfb4     01 16 06 F6 | 	mov	arg03, #1
0dfb8     78 58 B1 FD | 	call	#__system___float_cmp
0dfbc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfc0     20 4E 05 C1 |  if_b	add	fp, #32
0dfc4     A7 00 68 CC |  if_b	wrlong	#0, fp
0dfc8     20 4E 85 C1 |  if_b	sub	fp, #32
0dfcc     14 4E 05 F1 | 	add	fp, #20
0dfd0     A7 2A 02 FB | 	rdlong	local07, fp
0dfd4     01 2A 06 F1 | 	add	local07, #1
0dfd8     A7 2A 62 FC | 	wrlong	local07, fp
0dfdc     14 4E 85 F1 | 	sub	fp, #20
0dfe0     44 FF 9F FD | 	jmp	#LR__1236
0dfe4                 | LR__1237
0dfe4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0dfe4     A7 20 02 FB | 	rdlong	local02, fp
0dfe8     04 4E 05 F1 | 	add	fp, #4
0dfec     A7 2C 02 FB | 	rdlong	local08, fp
0dff0     16 21 02 F1 | 	add	local02, local08
0dff4     10 4E 05 F1 | 	add	fp, #16
0dff8     A7 20 62 FC | 	wrlong	local02, fp
0dffc     14 4E 85 F1 | 	sub	fp, #20
0e000                 | LR__1238
0e000     14 4E 05 F1 | 	add	fp, #20
0e004     A7 26 02 FB | 	rdlong	local05, fp
0e008     14 4E 85 F1 | 	sub	fp, #20
0e00c     00 27 56 F2 | 	cmps	local05, #256 wc
0e010     A8 00 90 3D |  if_ae	jmp	#LR__1239
0e014     18 4E 05 F1 | 	add	fp, #24
0e018     A7 2C 02 FB | 	rdlong	local08, fp
0e01c     09 2C 66 F0 | 	shl	local08, #9
0e020     0C 00 00 FF 
0e024     D8 E4 05 F1 | 	add	objptr, ##6360
0e028     F2 2C 02 F1 | 	add	local08, objptr
0e02c     04 4E 85 F1 | 	sub	fp, #4
0e030     A7 2A 02 FB | 	rdlong	local07, fp
0e034     01 2A 66 F0 | 	shl	local07, #1
0e038     16 2B 02 F1 | 	add	local07, local08
0e03c     0C 4E 05 F1 | 	add	fp, #12
0e040     A7 12 02 FB | 	rdlong	arg01, fp
0e044     20 4E 85 F1 | 	sub	fp, #32
0e048     0C 00 00 FF 
0e04c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e050     01 14 06 F6 | 	mov	arg02, #1
0e054     70 58 B1 FD | 	call	#__system___float_tointeger
0e058     15 FB 51 FC | 	wrword	result1, local07
0e05c     20 4E 05 F1 | 	add	fp, #32
0e060     A7 12 02 FB | 	rdlong	arg01, fp
0e064     1C 4E 05 F1 | 	add	fp, #28
0e068     A7 14 02 FB | 	rdlong	arg02, fp
0e06c     3C 4E 85 F1 | 	sub	fp, #60
0e070     1F 14 E6 F4 | 	bitnot	arg02, #31
0e074     B8 4F B1 FD | 	call	#__system___float_add
0e078     20 4E 05 F1 | 	add	fp, #32
0e07c     A7 FA 61 FC | 	wrlong	result1, fp
0e080     20 4E 85 F1 | 	sub	fp, #32
0e084     FD 12 02 F6 | 	mov	arg01, result1
0e088     00 14 06 F6 | 	mov	arg02, #0
0e08c     01 16 06 F6 | 	mov	arg03, #1
0e090     A0 57 B1 FD | 	call	#__system___float_cmp
0e094     00 FA 55 F2 | 	cmps	result1, #0 wc
0e098     20 4E 05 C1 |  if_b	add	fp, #32
0e09c     A7 00 68 CC |  if_b	wrlong	#0, fp
0e0a0     20 4E 85 C1 |  if_b	sub	fp, #32
0e0a4     14 4E 05 F1 | 	add	fp, #20
0e0a8     A7 2C 02 FB | 	rdlong	local08, fp
0e0ac     01 2C 06 F1 | 	add	local08, #1
0e0b0     A7 2C 62 FC | 	wrlong	local08, fp
0e0b4     14 4E 85 F1 | 	sub	fp, #20
0e0b8     44 FF 9F FD | 	jmp	#LR__1238
0e0bc                 | LR__1239
0e0bc     18 4E 05 F1 | 	add	fp, #24
0e0c0     A7 26 02 FB | 	rdlong	local05, fp
0e0c4     18 4E 85 F1 | 	sub	fp, #24
0e0c8     09 26 66 F0 | 	shl	local05, #9
0e0cc     0C 00 00 FF 
0e0d0     D8 E4 05 F1 | 	add	objptr, ##6360
0e0d4     F2 26 02 F1 | 	add	local05, objptr
0e0d8     FE 27 06 F1 | 	add	local05, #510
0e0dc     13 01 58 FC | 	wrword	#0, local05
0e0e0     0C 00 00 FF 
0e0e4     D8 E4 85 F1 | 	sub	objptr, ##6360
0e0e8                 | LR__1240
0e0e8     18 4E 05 F1 | 	add	fp, #24
0e0ec     A7 26 02 FB | 	rdlong	local05, fp
0e0f0     18 4E 85 F1 | 	sub	fp, #24
0e0f4     09 26 66 F0 | 	shl	local05, #9
0e0f8     0C 00 00 FF 
0e0fc     D8 E4 05 F1 | 	add	objptr, ##6360
0e100     F2 26 02 F1 | 	add	local05, objptr
0e104     FE 27 06 F1 | 	add	local05, #510
0e108     13 01 58 FC | 	wrword	#0, local05
0e10c     0C 00 00 FF 
0e110     D8 E4 85 F1 | 	sub	objptr, ##6360
0e114                 | LR__1241
0e114     A7 F0 03 F6 | 	mov	ptra, fp
0e118     B2 00 A0 FD | 	call	#popregs_
0e11c                 | _do_defenv_ret
0e11c     2D 00 64 FD | 	ret
0e120                 | 
0e120                 | ' 
0e120                 | ' '-------------------- defsnd
0e120                 | ' 
0e120                 | ' sub do_defsnd
0e120                 | _do_defsnd
0e120     04 4A 05 F6 | 	mov	COUNT_, #4
0e124     A8 00 A0 FD | 	call	#pushregs_
0e128     88 F0 07 F1 | 	add	ptra, #136
0e12c     4A 00 00 FF 
0e130     80 E4 05 F1 | 	add	objptr, ##38016
0e134     F2 1A 02 FB | 	rdlong	arg05, objptr
0e138     0D 19 02 F6 | 	mov	arg04, arg05
0e13c     01 18 66 F0 | 	shl	arg04, #1
0e140     0D 19 02 F1 | 	add	arg04, arg05
0e144     02 18 66 F0 | 	shl	arg04, #2
0e148     03 00 00 FF 
0e14c     04 E4 85 F1 | 	sub	objptr, ##1540
0e150     F2 18 02 F1 | 	add	arg04, objptr
0e154     0C 1B 02 FB | 	rdlong	arg05, arg04
0e158     A7 1A 62 FC | 	wrlong	arg05, fp
0e15c                 | ' 
0e15c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e15c                 | ' 
0e15c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0e15c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0e15c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0e15c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0e15c                 | ' 
0e15c                 | ' if numpar<2 then return
0e15c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0e160     47 00 00 FF 
0e164     7C E4 85 F1 | 	sub	objptr, ##36476
0e168     94 08 90 CD |  if_b	jmp	#LR__1273
0e16c                 | '  
0e16c                 | ' if numpar=2 then
0e16c     A7 1A 02 FB | 	rdlong	arg05, fp
0e170     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e174     A0 03 90 5D |  if_ne	jmp	#LR__1260
0e178     20 D2 BF FD | 	call	#_pop
0e17c     FF 1A 02 F6 | 	mov	arg05, result3
0e180     2C 4E 05 F1 | 	add	fp, #44
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 FC 61 FC | 	wrlong	result2, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 1A 62 FC | 	wrlong	arg05, fp
0e198                 | '   t1=pop()
0e198                 | '   if t1.result_type=result_string2 then 
0e198     34 4E 85 F1 | 	sub	fp, #52
0e19c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e1a0     20 00 90 5D |  if_ne	jmp	#LR__1250
0e1a4     2C 4E 05 F1 | 	add	fp, #44
0e1a8     A7 12 02 FB | 	rdlong	arg01, fp
0e1ac     2C 4E 85 F1 | 	sub	fp, #44
0e1b0     60 D3 BF FD | 	call	#_convertstring
0e1b4     38 4E 05 F1 | 	add	fp, #56
0e1b8     A7 FA 61 FC | 	wrlong	result1, fp
0e1bc     38 4E 85 F1 | 	sub	fp, #56
0e1c0     58 00 90 FD | 	jmp	#LR__1253
0e1c4                 | LR__1250
0e1c4     34 4E 05 F1 | 	add	fp, #52
0e1c8     A7 1A 02 FB | 	rdlong	arg05, fp
0e1cc     34 4E 85 F1 | 	sub	fp, #52
0e1d0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0e1d4     18 00 90 5D |  if_ne	jmp	#LR__1251
0e1d8     2C 4E 05 F1 | 	add	fp, #44
0e1dc     A7 1A 02 FB | 	rdlong	arg05, fp
0e1e0     0C 4E 05 F1 | 	add	fp, #12
0e1e4     A7 1A 62 FC | 	wrlong	arg05, fp
0e1e8     38 4E 85 F1 | 	sub	fp, #56
0e1ec     2C 00 90 FD | 	jmp	#LR__1252
0e1f0                 | LR__1251
0e1f0     83 01 00 FF 
0e1f4     D1 1B 06 F6 | 	mov	arg05, ##@LR__5433
0e1f8     38 4E 05 F1 | 	add	fp, #56
0e1fc     A7 1A 62 FC | 	wrlong	arg05, fp
0e200     0C 4E 85 F1 | 	sub	fp, #12
0e204     A7 12 02 F6 | 	mov	arg01, fp
0e208     2C 4E 85 F1 | 	sub	fp, #44
0e20c     70 D3 BF FD | 	call	#_converttoint
0e210     14 4E 05 F1 | 	add	fp, #20
0e214     A7 FA 61 FC | 	wrlong	result1, fp
0e218     14 4E 85 F1 | 	sub	fp, #20
0e21c                 | LR__1252
0e21c                 | LR__1253
0e21c                 | '   if s<>"" then 
0e21c     38 4E 05 F1 | 	add	fp, #56
0e220     A7 12 02 FB | 	rdlong	arg01, fp
0e224     38 4E 85 F1 | 	sub	fp, #56
0e228     83 01 00 FF 
0e22c     D2 15 06 F6 | 	mov	arg02, ##@LR__5434
0e230     40 26 B1 FD | 	call	#__system___string_cmp
0e234     00 FA 0D F2 | 	cmp	result1, #0 wz
0e238     E0 01 90 AD |  if_e	jmp	#LR__1256
0e23c     5C D1 BF FD | 	call	#_pop
0e240     FF 1A 02 F6 | 	mov	arg05, result3
0e244     2C 4E 05 F1 | 	add	fp, #44
0e248     A7 FA 61 FC | 	wrlong	result1, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 FC 61 FC | 	wrlong	result2, fp
0e254     04 4E 05 F1 | 	add	fp, #4
0e258     A7 1A 62 FC | 	wrlong	arg05, fp
0e25c     08 4E 85 F1 | 	sub	fp, #8
0e260     A7 12 02 F6 | 	mov	arg01, fp
0e264     2C 4E 85 F1 | 	sub	fp, #44
0e268     14 D3 BF FD | 	call	#_converttoint
0e26c     10 4E 05 F1 | 	add	fp, #16
0e270     A7 FA 61 FC | 	wrlong	result1, fp
0e274                 | '     t1=pop()
0e274                 | '     channel=converttoint(t1) : if channel>31 then return
0e274     FD 1A 02 F6 | 	mov	arg05, result1
0e278     10 4E 85 F1 | 	sub	fp, #16
0e27c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0e280     7C 07 90 3D |  if_ae	jmp	#LR__1273
0e284                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0e284     09 12 06 F6 | 	mov	arg01, #9
0e288     54 76 B1 FD | 	call	#__system__close
0e28c     09 1E 06 F6 | 	mov	local01, #9
0e290     83 01 00 FF 
0e294     D3 13 06 F6 | 	mov	arg01, ##@LR__5435
0e298     38 4E 05 F1 | 	add	fp, #56
0e29c     A7 14 02 FB | 	rdlong	arg02, fp
0e2a0     38 4E 85 F1 | 	sub	fp, #56
0e2a4     00 26 B1 FD | 	call	#__system___string_concat
0e2a8     FD 14 02 F6 | 	mov	arg02, result1
0e2ac     0F 13 02 F6 | 	mov	arg01, local01
0e2b0     00 16 06 F6 | 	mov	arg03, #0
0e2b4     98 31 B1 FD | 	call	#__system___basic_open_string
0e2b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e2bc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e2c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e2c4     52 00 00 FF 
0e2c8     18 E4 05 F1 | 	add	objptr, ##42008
0e2cc     F2 FA 61 FC | 	wrlong	result1, objptr
0e2d0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e2d0     52 00 00 FF 
0e2d4     18 E4 85 F1 | 	sub	objptr, ##42008
0e2d8     B0 00 90 AD |  if_e	jmp	#LR__1254
0e2dc     00 12 06 F6 | 	mov	arg01, #0
0e2e0     CC 7F B1 FD | 	call	#__system___getiolock_0541
0e2e4     FD 12 02 F6 | 	mov	arg01, result1
0e2e8     60 25 B1 FD | 	call	#__system___lockmem
0e2ec     83 01 00 FF 
0e2f0     E0 15 06 F6 | 	mov	arg02, ##@LR__5436
0e2f4     00 12 06 F6 | 	mov	arg01, #0
0e2f8     00 16 06 F6 | 	mov	arg03, #0
0e2fc     40 32 B1 FD | 	call	#__system___basic_print_string
0e300     52 00 00 FF 
0e304     18 E4 05 F1 | 	add	objptr, ##42008
0e308     F2 14 02 FB | 	rdlong	arg02, objptr
0e30c     52 00 00 FF 
0e310     18 E4 85 F1 | 	sub	objptr, ##42008
0e314     00 12 06 F6 | 	mov	arg01, #0
0e318     00 16 06 F6 | 	mov	arg03, #0
0e31c     0A 18 06 F6 | 	mov	arg04, #10
0e320     60 32 B1 FD | 	call	#__system___basic_print_integer
0e324     83 01 00 FF 
0e328     EE 15 06 F6 | 	mov	arg02, ##@LR__5437
0e32c     00 12 06 F6 | 	mov	arg01, #0
0e330     00 16 06 F6 | 	mov	arg03, #0
0e334     08 32 B1 FD | 	call	#__system___basic_print_string
0e338     00 1E 06 F6 | 	mov	local01, #0
0e33c     52 00 00 FF 
0e340     18 E4 05 F1 | 	add	objptr, ##42008
0e344     F2 12 02 FB | 	rdlong	arg01, objptr
0e348     52 00 00 FF 
0e34c     18 E4 85 F1 | 	sub	objptr, ##42008
0e350     C0 4B B1 FD | 	call	#__system___strerror
0e354     FD 14 02 F6 | 	mov	arg02, result1
0e358     0F 13 02 F6 | 	mov	arg01, local01
0e35c     00 16 06 F6 | 	mov	arg03, #0
0e360     DC 31 B1 FD | 	call	#__system___basic_print_string
0e364     00 12 06 F6 | 	mov	arg01, #0
0e368     0A 14 06 F6 | 	mov	arg02, #10
0e36c     00 16 06 F6 | 	mov	arg03, #0
0e370     74 31 B1 FD | 	call	#__system___basic_print_char
0e374     00 12 06 F6 | 	mov	arg01, #0
0e378     34 7F B1 FD | 	call	#__system___getiolock_0541
0e37c     FD 00 68 FC | 	wrlong	#0, result1
0e380     09 12 06 F6 | 	mov	arg01, #9
0e384     58 75 B1 FD | 	call	#__system__close
0e388     74 06 90 FD | 	jmp	#LR__1273
0e38c                 | LR__1254
0e38c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0e38c     04 4E 05 F1 | 	add	fp, #4
0e390     A7 00 68 FC | 	wrlong	#0, fp
0e394                 | LR__1255
0e394     A7 1E 02 FB | 	rdlong	local01, fp
0e398     01 1E 66 F0 | 	shl	local01, #1
0e39c     11 14 06 F6 | 	mov	arg02, #17
0e3a0     0F 15 02 F1 | 	add	arg02, local01
0e3a4     78 4E 05 F1 | 	add	fp, #120
0e3a8     A7 16 02 F6 | 	mov	arg03, fp
0e3ac     7C 4E 85 F1 | 	sub	fp, #124
0e3b0     09 12 06 F6 | 	mov	arg01, #9
0e3b4     01 18 06 F6 | 	mov	arg04, #1
0e3b8     02 1A 06 F6 | 	mov	arg05, #2
0e3bc     FC 32 B1 FD | 	call	#__system___basic_get
0e3c0     10 4E 05 F1 | 	add	fp, #16
0e3c4     A7 12 02 FB | 	rdlong	arg01, fp
0e3c8     0B 12 66 F0 | 	shl	arg01, #11
0e3cc     0C 4E 85 F1 | 	sub	fp, #12
0e3d0     A7 1E 02 FB | 	rdlong	local01, fp
0e3d4     01 1E 66 F0 | 	shl	local01, #1
0e3d8     0F 13 02 F1 | 	add	arg01, local01
0e3dc     78 4E 05 F1 | 	add	fp, #120
0e3e0     A7 14 E2 FA | 	rdword	arg02, fp
0e3e4     7C 4E 85 F1 | 	sub	fp, #124
0e3e8     0F 14 66 F7 | 	signx	arg02, #15
0e3ec     78 F0 B0 FD | 	call	#_psdpoke
0e3f0     04 4E 05 F1 | 	add	fp, #4
0e3f4     A7 1E 02 FB | 	rdlong	local01, fp
0e3f8     01 1E 06 F1 | 	add	local01, #1
0e3fc     A7 1E 62 FC | 	wrlong	local01, fp
0e400     02 00 00 FF 
0e404     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0e408     88 FF 9F CD |  if_b	jmp	#LR__1255
0e40c     04 4E 85 F1 | 	sub	fp, #4
0e410                 | '     close #9
0e410     09 12 06 F6 | 	mov	arg01, #9
0e414     C8 74 B1 FD | 	call	#__system__close
0e418                 | '     return
0e418     E4 05 90 FD | 	jmp	#LR__1273
0e41c                 | LR__1256
0e41c                 | '     if wptr < ($80000 - 2048) then 
0e41c     14 4E 05 F1 | 	add	fp, #20
0e420     A7 1E 02 FB | 	rdlong	local01, fp
0e424     14 4E 85 F1 | 	sub	fp, #20
0e428     FC 03 00 FF 
0e42c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0e430     70 00 90 3D |  if_ae	jmp	#LR__1258
0e434                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0e434     04 4E 05 F1 | 	add	fp, #4
0e438     A7 00 68 FC | 	wrlong	#0, fp
0e43c     04 4E 85 F1 | 	sub	fp, #4
0e440                 | LR__1257
0e440     10 4E 05 F1 | 	add	fp, #16
0e444     A7 1E 02 FB | 	rdlong	local01, fp
0e448     0B 1E 66 F0 | 	shl	local01, #11
0e44c     0C 4E 85 F1 | 	sub	fp, #12
0e450     A7 1A 02 FB | 	rdlong	arg05, fp
0e454     0D 19 02 F6 | 	mov	arg04, arg05
0e458     01 18 66 F0 | 	shl	arg04, #1
0e45c     0C 1F 02 F1 | 	add	local01, arg04
0e460     10 4E 05 F1 | 	add	fp, #16
0e464     A7 12 02 FB | 	rdlong	arg01, fp
0e468     14 4E 85 F1 | 	sub	fp, #20
0e46c     01 1A 66 F0 | 	shl	arg05, #1
0e470     0D 13 02 F1 | 	add	arg01, arg05
0e474     09 15 E2 FA | 	rdword	arg02, arg01
0e478     0F 13 02 F6 | 	mov	arg01, local01
0e47c     E8 EF B0 FD | 	call	#_psdpoke
0e480     04 4E 05 F1 | 	add	fp, #4
0e484     A7 1E 02 FB | 	rdlong	local01, fp
0e488     01 1E 06 F1 | 	add	local01, #1
0e48c     A7 1E 62 FC | 	wrlong	local01, fp
0e490     04 4E 85 F1 | 	sub	fp, #4
0e494     02 00 00 FF 
0e498     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e49c     A0 FF 9F CD |  if_b	jmp	#LR__1257
0e4a0     5C 05 90 FD | 	jmp	#LR__1273
0e4a4                 | LR__1258
0e4a4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0e4a4     04 4E 05 F1 | 	add	fp, #4
0e4a8     A7 00 68 FC | 	wrlong	#0, fp
0e4ac     04 4E 85 F1 | 	sub	fp, #4
0e4b0                 | LR__1259
0e4b0     10 4E 05 F1 | 	add	fp, #16
0e4b4     A7 1E 02 FB | 	rdlong	local01, fp
0e4b8     0B 1E 66 F0 | 	shl	local01, #11
0e4bc     0C 4E 85 F1 | 	sub	fp, #12
0e4c0     A7 1A 02 FB | 	rdlong	arg05, fp
0e4c4     0D 19 02 F6 | 	mov	arg04, arg05
0e4c8     01 18 66 F0 | 	shl	arg04, #1
0e4cc     0C 1F 02 F1 | 	add	local01, arg04
0e4d0     10 4E 05 F1 | 	add	fp, #16
0e4d4     A7 12 02 FB | 	rdlong	arg01, fp
0e4d8     14 4E 85 F1 | 	sub	fp, #20
0e4dc     01 1A 66 F0 | 	shl	arg05, #1
0e4e0     0D 13 02 F1 | 	add	arg01, arg05
0e4e4     C0 F0 B0 FD | 	call	#_psdpeek
0e4e8     FD 14 02 F6 | 	mov	arg02, result1
0e4ec     0F 13 02 F6 | 	mov	arg01, local01
0e4f0     74 EF B0 FD | 	call	#_psdpoke
0e4f4     04 4E 05 F1 | 	add	fp, #4
0e4f8     A7 1E 02 FB | 	rdlong	local01, fp
0e4fc     01 1E 06 F1 | 	add	local01, #1
0e500     A7 1E 62 FC | 	wrlong	local01, fp
0e504     04 4E 85 F1 | 	sub	fp, #4
0e508     02 00 00 FF 
0e50c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e510     9C FF 9F CD |  if_b	jmp	#LR__1259
0e514                 | '     return 
0e514     E8 04 90 FD | 	jmp	#LR__1273
0e518                 | '   return
0e518                 | LR__1260
0e518                 | ' for i=0 to 15 : harm(i)=0: next i  
0e518     04 4E 05 F1 | 	add	fp, #4
0e51c     A7 00 68 FC | 	wrlong	#0, fp
0e520     97 16 48 FB | 	callpa	#(@LR__1262-@LR__1261)>>2,fcache_load_ptr_
0e524                 | LR__1261
0e524     A7 1E 02 FB | 	rdlong	local01, fp
0e528     02 1E 66 F0 | 	shl	local01, #2
0e52c     38 4E 05 F1 | 	add	fp, #56
0e530     A7 1E 02 F1 | 	add	local01, fp
0e534     0F 01 68 FC | 	wrlong	#0, local01
0e538     38 4E 85 F1 | 	sub	fp, #56
0e53c     A7 1E 02 FB | 	rdlong	local01, fp
0e540     01 1E 06 F1 | 	add	local01, #1
0e544     A7 1E 62 FC | 	wrlong	local01, fp
0e548     10 1E 56 F2 | 	cmps	local01, #16 wc
0e54c     D4 FF 9F CD |  if_b	jmp	#LR__1261
0e550                 | LR__1262
0e550     04 4E 85 F1 | 	sub	fp, #4
0e554                 | ' for i=numpar to 2 step -1 
0e554     A7 1E 02 FB | 	rdlong	local01, fp
0e558     04 4E 05 F1 | 	add	fp, #4
0e55c     A7 1E 62 FC | 	wrlong	local01, fp
0e560     04 4E 85 F1 | 	sub	fp, #4
0e564                 | LR__1263
0e564     34 CE BF FD | 	call	#_pop
0e568     2C 4E 05 F1 | 	add	fp, #44
0e56c     A7 FA 61 FC | 	wrlong	result1, fp
0e570     04 4E 05 F1 | 	add	fp, #4
0e574     A7 FC 61 FC | 	wrlong	result2, fp
0e578     04 4E 05 F1 | 	add	fp, #4
0e57c     A7 FE 61 FC | 	wrlong	result3, fp
0e580     30 4E 85 F1 | 	sub	fp, #48
0e584     A7 1E 02 FB | 	rdlong	local01, fp
0e588     02 1E 86 F1 | 	sub	local01, #2
0e58c     02 1E 66 F0 | 	shl	local01, #2
0e590     38 4E 05 F1 | 	add	fp, #56
0e594     A7 1E 02 F1 | 	add	local01, fp
0e598     10 4E 85 F1 | 	sub	fp, #16
0e59c     A7 12 02 F6 | 	mov	arg01, fp
0e5a0     2C 4E 85 F1 | 	sub	fp, #44
0e5a4     94 D0 BF FD | 	call	#_converttofloat
0e5a8     0F FB 61 FC | 	wrlong	result1, local01
0e5ac     04 4E 05 F1 | 	add	fp, #4
0e5b0     A7 1E 02 FB | 	rdlong	local01, fp
0e5b4     01 1E 86 F1 | 	sub	local01, #1
0e5b8     A7 1E 62 FC | 	wrlong	local01, fp
0e5bc     04 4E 85 F1 | 	sub	fp, #4
0e5c0     02 1E 56 F2 | 	cmps	local01, #2 wc
0e5c4     9C FF 9F 3D |  if_ae	jmp	#LR__1263
0e5c8     D0 CD BF FD | 	call	#_pop
0e5cc     FF 1E 02 F6 | 	mov	local01, result3
0e5d0     2C 4E 05 F1 | 	add	fp, #44
0e5d4     A7 FA 61 FC | 	wrlong	result1, fp
0e5d8     04 4E 05 F1 | 	add	fp, #4
0e5dc     A7 FC 61 FC | 	wrlong	result2, fp
0e5e0     04 4E 05 F1 | 	add	fp, #4
0e5e4     A7 1E 62 FC | 	wrlong	local01, fp
0e5e8     08 4E 85 F1 | 	sub	fp, #8
0e5ec     A7 12 02 F6 | 	mov	arg01, fp
0e5f0     2C 4E 85 F1 | 	sub	fp, #44
0e5f4     88 CF BF FD | 	call	#_converttoint
0e5f8     10 4E 05 F1 | 	add	fp, #16
0e5fc     A7 FA 61 FC | 	wrlong	result1, fp
0e600                 | ' t1=pop()
0e600                 | ' channel=converttoint(t1) : : if channel>31 then return
0e600     FD 1E 02 F6 | 	mov	local01, result1
0e604     10 4E 85 F1 | 	sub	fp, #16
0e608     20 1E 56 F2 | 	cmps	local01, #32 wc
0e60c     F0 03 90 3D |  if_ae	jmp	#LR__1273
0e610     20 4E 05 F1 | 	add	fp, #32
0e614     A7 00 68 FC | 	wrlong	#0, fp
0e618                 | ' max=0
0e618                 | ' if harm(0)<0 then
0e618     1C 4E 05 F1 | 	add	fp, #28
0e61c     A7 12 02 FB | 	rdlong	arg01, fp
0e620     3C 4E 85 F1 | 	sub	fp, #60
0e624     00 14 06 F6 | 	mov	arg02, #0
0e628     01 16 06 F6 | 	mov	arg03, #1
0e62c     04 52 B1 FD | 	call	#__system___float_cmp
0e630     00 FA 55 F2 | 	cmps	result1, #0 wc
0e634     04 01 90 3D |  if_ae	jmp	#LR__1266
0e638     3C 4E 05 F1 | 	add	fp, #60
0e63c     A7 FA 01 FB | 	rdlong	result1, fp
0e640     1F FA 05 F4 | 	bitl	result1, #31
0e644     24 4E 85 F1 | 	sub	fp, #36
0e648     A7 FA 61 FC | 	wrlong	result1, fp
0e64c     28 4E 05 F1 | 	add	fp, #40
0e650     A7 FA 01 FB | 	rdlong	result1, fp
0e654     1F FA 05 F4 | 	bitl	result1, #31
0e658     24 4E 85 F1 | 	sub	fp, #36
0e65c     A7 FA 61 FC | 	wrlong	result1, fp
0e660     20 4E 05 F1 | 	add	fp, #32
0e664     00 C0 9F FF 
0e668     A7 00 68 FC | 	wrlong	##1065353216, fp
0e66c     24 4E 85 F1 | 	sub	fp, #36
0e670     A7 1E 02 FB | 	rdlong	local01, fp
0e674     28 4E 05 F1 | 	add	fp, #40
0e678     A7 1E 62 FC | 	wrlong	local01, fp
0e67c     24 4E 85 F1 | 	sub	fp, #36
0e680     A7 1E 02 FB | 	rdlong	local01, fp
0e684     28 4E 05 F1 | 	add	fp, #40
0e688     A7 1E 62 FC | 	wrlong	local01, fp
0e68c                 | '   harm(0)=1
0e68c                 | '   harm(1)=even
0e68c                 | '   harm(2)=odd
0e68c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0e68c     40 4E 85 F1 | 	sub	fp, #64
0e690     A7 06 68 FC | 	wrlong	#3, fp
0e694                 | LR__1264
0e694     A7 1A 02 FB | 	rdlong	arg05, fp
0e698     0D 21 02 F6 | 	mov	local02, arg05
0e69c     02 20 66 F0 | 	shl	local02, #2
0e6a0     38 4E 05 F1 | 	add	fp, #56
0e6a4     A7 20 02 F1 | 	add	local02, fp
0e6a8     02 1A 86 F1 | 	sub	arg05, #2
0e6ac     02 1A 66 F0 | 	shl	arg05, #2
0e6b0     A7 1A 02 F1 | 	add	arg05, fp
0e6b4     0D 13 02 FB | 	rdlong	arg01, arg05
0e6b8     24 4E 85 F1 | 	sub	fp, #36
0e6bc     A7 14 02 FB | 	rdlong	arg02, fp
0e6c0     18 4E 85 F1 | 	sub	fp, #24
0e6c4     38 4D B1 FD | 	call	#__system___float_mul
0e6c8     10 FB 61 FC | 	wrlong	result1, local02
0e6cc     04 4E 05 F1 | 	add	fp, #4
0e6d0     A7 22 02 FB | 	rdlong	local03, fp
0e6d4     02 22 06 F1 | 	add	local03, #2
0e6d8     A7 22 62 FC | 	wrlong	local03, fp
0e6dc     10 22 56 F2 | 	cmps	local03, #16 wc
0e6e0     B0 FF 9F CD |  if_b	jmp	#LR__1264
0e6e4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0e6e4     A7 08 68 FC | 	wrlong	#4, fp
0e6e8                 | LR__1265
0e6e8     A7 22 02 FB | 	rdlong	local03, fp
0e6ec     11 21 02 F6 | 	mov	local02, local03
0e6f0     02 20 66 F0 | 	shl	local02, #2
0e6f4     38 4E 05 F1 | 	add	fp, #56
0e6f8     A7 20 02 F1 | 	add	local02, fp
0e6fc     02 22 86 F1 | 	sub	local03, #2
0e700     02 22 66 F0 | 	shl	local03, #2
0e704     A7 22 02 F1 | 	add	local03, fp
0e708     11 13 02 FB | 	rdlong	arg01, local03
0e70c     20 4E 85 F1 | 	sub	fp, #32
0e710     A7 14 02 FB | 	rdlong	arg02, fp
0e714     1C 4E 85 F1 | 	sub	fp, #28
0e718     E4 4C B1 FD | 	call	#__system___float_mul
0e71c     10 FB 61 FC | 	wrlong	result1, local02
0e720     04 4E 05 F1 | 	add	fp, #4
0e724     A7 22 02 FB | 	rdlong	local03, fp
0e728     02 22 06 F1 | 	add	local03, #2
0e72c     A7 22 62 FC | 	wrlong	local03, fp
0e730     0F 22 56 F2 | 	cmps	local03, #15 wc
0e734     B0 FF 9F CD |  if_b	jmp	#LR__1265
0e738     04 4E 85 F1 | 	sub	fp, #4
0e73c                 | LR__1266
0e73c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e73c     3C 4E 05 F1 | 	add	fp, #60
0e740     A7 12 02 FB | 	rdlong	arg01, fp
0e744     3C 4E 85 F1 | 	sub	fp, #60
0e748     00 14 06 F6 | 	mov	arg02, #0
0e74c     01 16 66 F6 | 	neg	arg03, #1
0e750     E0 50 B1 FD | 	call	#__system___float_cmp
0e754     00 FA 55 F2 | 	cmps	result1, #0 wc
0e758     A4 02 90 CD |  if_b	jmp	#LR__1272
0e75c                 | '   for i=0 to 1023
0e75c     04 4E 05 F1 | 	add	fp, #4
0e760     A7 00 68 FC | 	wrlong	#0, fp
0e764     04 4E 85 F1 | 	sub	fp, #4
0e768                 | LR__1267
0e768     24 4E 05 F1 | 	add	fp, #36
0e76c     A7 00 68 FC | 	wrlong	#0, fp
0e770                 | '     spl=0
0e770                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e770     1C 4E 85 F1 | 	sub	fp, #28
0e774     A7 00 68 FC | 	wrlong	#0, fp
0e778                 | LR__1268
0e778     A7 20 02 FB | 	rdlong	local02, fp
0e77c     02 20 66 F0 | 	shl	local02, #2
0e780     34 4E 05 F1 | 	add	fp, #52
0e784     A7 20 02 F1 | 	add	local02, fp
0e788     10 23 02 FB | 	rdlong	local03, local02
0e78c     87 E4 1D FF 
0e790     DB 21 06 F6 | 	mov	local02, ##1003032539
0e794     38 4E 85 F1 | 	sub	fp, #56
0e798     A7 12 02 FB | 	rdlong	arg01, fp
0e79c     04 4E 85 F1 | 	sub	fp, #4
0e7a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7a4     1F 24 C6 C9 |  if_b	decod	local04, #31
0e7a8     00 24 06 36 |  if_ae	mov	local04, #0
0e7ac     4C 48 B1 FD | 	call	#__system___float_fromuns
0e7b0     12 FB 61 F5 | 	xor	result1, local04
0e7b4     FD 14 02 F6 | 	mov	arg02, result1
0e7b8     10 13 02 F6 | 	mov	arg01, local02
0e7bc     40 4C B1 FD | 	call	#__system___float_mul
0e7c0     FD 20 02 F6 | 	mov	local02, result1
0e7c4     08 4E 05 F1 | 	add	fp, #8
0e7c8     A7 12 02 FB | 	rdlong	arg01, fp
0e7cc     08 4E 85 F1 | 	sub	fp, #8
0e7d0     01 12 06 F1 | 	add	arg01, #1
0e7d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7d8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e7dc     00 24 06 36 |  if_ae	mov	local04, #0
0e7e0     18 48 B1 FD | 	call	#__system___float_fromuns
0e7e4     12 FB 61 F5 | 	xor	result1, local04
0e7e8     FD 14 02 F6 | 	mov	arg02, result1
0e7ec     10 13 02 F6 | 	mov	arg01, local02
0e7f0     0C 4C B1 FD | 	call	#__system___float_mul
0e7f4     FD 12 02 F6 | 	mov	arg01, result1
0e7f8     64 55 B1 FD | 	call	#__system____builtin_sinf
0e7fc     FD 14 02 F6 | 	mov	arg02, result1
0e800     11 13 02 F6 | 	mov	arg01, local03
0e804     F8 4B B1 FD | 	call	#__system___float_mul
0e808     FD 14 02 F6 | 	mov	arg02, result1
0e80c     24 4E 05 F1 | 	add	fp, #36
0e810     A7 12 02 FB | 	rdlong	arg01, fp
0e814     24 4E 85 F1 | 	sub	fp, #36
0e818     14 48 B1 FD | 	call	#__system___float_add
0e81c     24 4E 05 F1 | 	add	fp, #36
0e820     A7 FA 61 FC | 	wrlong	result1, fp
0e824     1C 4E 85 F1 | 	sub	fp, #28
0e828     A7 16 02 FB | 	rdlong	arg03, fp
0e82c     01 16 06 F1 | 	add	arg03, #1
0e830     A7 16 62 FC | 	wrlong	arg03, fp
0e834     10 16 56 F2 | 	cmps	arg03, #16 wc
0e838     3C FF 9F CD |  if_b	jmp	#LR__1268
0e83c                 | '     if abs(spl)>max then max=abs(spl)  
0e83c     1C 4E 05 F1 | 	add	fp, #28
0e840     A7 12 02 FB | 	rdlong	arg01, fp
0e844     1F 12 06 F4 | 	bitl	arg01, #31
0e848     04 4E 85 F1 | 	sub	fp, #4
0e84c     A7 14 02 FB | 	rdlong	arg02, fp
0e850     20 4E 85 F1 | 	sub	fp, #32
0e854     01 16 66 F6 | 	neg	arg03, #1
0e858     D8 4F B1 FD | 	call	#__system___float_cmp
0e85c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e860     18 00 90 CD |  if_b	jmp	#LR__1269
0e864     24 4E 05 F1 | 	add	fp, #36
0e868     A7 FA 01 FB | 	rdlong	result1, fp
0e86c     1F FA 05 F4 | 	bitl	result1, #31
0e870     04 4E 85 F1 | 	sub	fp, #4
0e874     A7 FA 61 FC | 	wrlong	result1, fp
0e878     20 4E 85 F1 | 	sub	fp, #32
0e87c                 | LR__1269
0e87c     04 4E 05 F1 | 	add	fp, #4
0e880     A7 22 02 FB | 	rdlong	local03, fp
0e884     01 22 06 F1 | 	add	local03, #1
0e888     A7 22 62 FC | 	wrlong	local03, fp
0e88c     04 4E 85 F1 | 	sub	fp, #4
0e890     02 00 00 FF 
0e894     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e898     CC FE 9F CD |  if_b	jmp	#LR__1267
0e89c                 | '   for i=0 to 1023
0e89c     04 4E 05 F1 | 	add	fp, #4
0e8a0     A7 00 68 FC | 	wrlong	#0, fp
0e8a4     04 4E 85 F1 | 	sub	fp, #4
0e8a8                 | LR__1270
0e8a8     24 4E 05 F1 | 	add	fp, #36
0e8ac     A7 00 68 FC | 	wrlong	#0, fp
0e8b0                 | '     spl=0
0e8b0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0e8b0     1C 4E 85 F1 | 	sub	fp, #28
0e8b4     A7 00 68 FC | 	wrlong	#0, fp
0e8b8                 | LR__1271
0e8b8     A7 22 02 FB | 	rdlong	local03, fp
0e8bc     02 22 66 F0 | 	shl	local03, #2
0e8c0     34 4E 05 F1 | 	add	fp, #52
0e8c4     A7 22 02 F1 | 	add	local03, fp
0e8c8     11 23 02 FB | 	rdlong	local03, local03
0e8cc     1C 4E 85 F1 | 	sub	fp, #28
0e8d0     A7 14 02 FB | 	rdlong	arg02, fp
0e8d4     20 4E 85 F1 | 	sub	fp, #32
0e8d8     58 7F 23 FF 
0e8dc     00 12 06 F6 | 	mov	arg01, ##1191096320
0e8e0     20 4D B1 FD | 	call	#__system___float_div
0e8e4     FD 14 02 F6 | 	mov	arg02, result1
0e8e8     11 13 02 F6 | 	mov	arg01, local03
0e8ec     10 4B B1 FD | 	call	#__system___float_mul
0e8f0     FD 22 02 F6 | 	mov	local03, result1
0e8f4     87 E4 1D FF 
0e8f8     DB 21 06 F6 | 	mov	local02, ##1003032539
0e8fc     04 4E 05 F1 | 	add	fp, #4
0e900     A7 12 02 FB | 	rdlong	arg01, fp
0e904     04 4E 85 F1 | 	sub	fp, #4
0e908     09 13 52 F6 | 	abs	arg01, arg01 wc
0e90c     1F 24 C6 C9 |  if_b	decod	local04, #31
0e910     00 24 06 36 |  if_ae	mov	local04, #0
0e914     E4 46 B1 FD | 	call	#__system___float_fromuns
0e918     12 FB 61 F5 | 	xor	result1, local04
0e91c     FD 14 02 F6 | 	mov	arg02, result1
0e920     10 13 02 F6 | 	mov	arg01, local02
0e924     D8 4A B1 FD | 	call	#__system___float_mul
0e928     FD 20 02 F6 | 	mov	local02, result1
0e92c     08 4E 05 F1 | 	add	fp, #8
0e930     A7 12 02 FB | 	rdlong	arg01, fp
0e934     08 4E 85 F1 | 	sub	fp, #8
0e938     01 12 06 F1 | 	add	arg01, #1
0e93c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e940     1F 24 C6 C9 |  if_b	decod	local04, #31
0e944     00 24 06 36 |  if_ae	mov	local04, #0
0e948     B0 46 B1 FD | 	call	#__system___float_fromuns
0e94c     12 FB 61 F5 | 	xor	result1, local04
0e950     FD 14 02 F6 | 	mov	arg02, result1
0e954     10 13 02 F6 | 	mov	arg01, local02
0e958     A4 4A B1 FD | 	call	#__system___float_mul
0e95c     FD 12 02 F6 | 	mov	arg01, result1
0e960     FC 53 B1 FD | 	call	#__system____builtin_sinf
0e964     FD 14 02 F6 | 	mov	arg02, result1
0e968     11 13 02 F6 | 	mov	arg01, local03
0e96c     90 4A B1 FD | 	call	#__system___float_mul
0e970     FD 14 02 F6 | 	mov	arg02, result1
0e974     24 4E 05 F1 | 	add	fp, #36
0e978     A7 12 02 FB | 	rdlong	arg01, fp
0e97c     24 4E 85 F1 | 	sub	fp, #36
0e980     AC 46 B1 FD | 	call	#__system___float_add
0e984     24 4E 05 F1 | 	add	fp, #36
0e988     A7 FA 61 FC | 	wrlong	result1, fp
0e98c     1C 4E 85 F1 | 	sub	fp, #28
0e990     A7 22 02 FB | 	rdlong	local03, fp
0e994     01 22 06 F1 | 	add	local03, #1
0e998     A7 22 62 FC | 	wrlong	local03, fp
0e99c     10 22 56 F2 | 	cmps	local03, #16 wc
0e9a0     14 FF 9F CD |  if_b	jmp	#LR__1271
0e9a4     08 4E 05 F1 | 	add	fp, #8
0e9a8     A7 22 02 FB | 	rdlong	local03, fp
0e9ac     0B 22 66 F0 | 	shl	local03, #11
0e9b0     0C 4E 85 F1 | 	sub	fp, #12
0e9b4     A7 20 02 FB | 	rdlong	local02, fp
0e9b8     01 20 66 F0 | 	shl	local02, #1
0e9bc     10 23 02 F1 | 	add	local03, local02
0e9c0     20 4E 05 F1 | 	add	fp, #32
0e9c4     A7 12 02 FB | 	rdlong	arg01, fp
0e9c8     24 4E 85 F1 | 	sub	fp, #36
0e9cc     01 14 06 F6 | 	mov	arg02, #1
0e9d0     F4 4E B1 FD | 	call	#__system___float_tointeger
0e9d4     FD 14 02 F6 | 	mov	arg02, result1
0e9d8     11 13 02 F6 | 	mov	arg01, local03
0e9dc     88 EA B0 FD | 	call	#_psdpoke
0e9e0     04 4E 05 F1 | 	add	fp, #4
0e9e4     A7 22 02 FB | 	rdlong	local03, fp
0e9e8     01 22 06 F1 | 	add	local03, #1
0e9ec     A7 22 62 FC | 	wrlong	local03, fp
0e9f0     04 4E 85 F1 | 	sub	fp, #4
0e9f4     02 00 00 FF 
0e9f8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e9fc     A8 FE 9F CD |  if_b	jmp	#LR__1270
0ea00                 | LR__1272
0ea00                 | LR__1273
0ea00     A7 F0 03 F6 | 	mov	ptra, fp
0ea04     B2 00 A0 FD | 	call	#popregs_
0ea08                 | _do_defsnd_ret
0ea08     2D 00 64 FD | 	ret
0ea0c                 | 
0ea0c                 | ' 
0ea0c                 | ' '-------------------- defsprite
0ea0c                 | ' 
0ea0c                 | ' sub do_defsprite
0ea0c                 | _do_defsprite
0ea0c     07 4A 05 F6 | 	mov	COUNT_, #7
0ea10     A8 00 A0 FD | 	call	#pushregs_
0ea14     60 F0 07 F1 | 	add	ptra, #96
0ea18     80 C9 BF FD | 	call	#_pop
0ea1c     FD 16 02 F6 | 	mov	arg03, result1
0ea20     FE 14 02 F6 | 	mov	arg02, result2
0ea24     FF 12 02 F6 | 	mov	arg01, result3
0ea28     30 4E 05 F1 | 	add	fp, #48
0ea2c     A7 16 62 FC | 	wrlong	arg03, fp
0ea30     04 4E 05 F1 | 	add	fp, #4
0ea34     A7 14 62 FC | 	wrlong	arg02, fp
0ea38     04 4E 05 F1 | 	add	fp, #4
0ea3c     A7 12 62 FC | 	wrlong	arg01, fp
0ea40     38 4E 85 F1 | 	sub	fp, #56
0ea44     54 C9 BF FD | 	call	#_pop
0ea48     FD 16 02 F6 | 	mov	arg03, result1
0ea4c     FE 14 02 F6 | 	mov	arg02, result2
0ea50     FF 12 02 F6 | 	mov	arg01, result3
0ea54     24 4E 05 F1 | 	add	fp, #36
0ea58     A7 16 62 FC | 	wrlong	arg03, fp
0ea5c     04 4E 05 F1 | 	add	fp, #4
0ea60     A7 14 62 FC | 	wrlong	arg02, fp
0ea64     04 4E 05 F1 | 	add	fp, #4
0ea68     A7 12 62 FC | 	wrlong	arg01, fp
0ea6c     2C 4E 85 F1 | 	sub	fp, #44
0ea70     28 C9 BF FD | 	call	#_pop
0ea74     FD 16 02 F6 | 	mov	arg03, result1
0ea78     FE 14 02 F6 | 	mov	arg02, result2
0ea7c     FF 12 02 F6 | 	mov	arg01, result3
0ea80     18 4E 05 F1 | 	add	fp, #24
0ea84     A7 16 62 FC | 	wrlong	arg03, fp
0ea88     04 4E 05 F1 | 	add	fp, #4
0ea8c     A7 14 62 FC | 	wrlong	arg02, fp
0ea90     04 4E 05 F1 | 	add	fp, #4
0ea94     A7 12 62 FC | 	wrlong	arg01, fp
0ea98     20 4E 85 F1 | 	sub	fp, #32
0ea9c     FC C8 BF FD | 	call	#_pop
0eaa0     FD 16 02 F6 | 	mov	arg03, result1
0eaa4     FE 14 02 F6 | 	mov	arg02, result2
0eaa8     FF 12 02 F6 | 	mov	arg01, result3
0eaac     0C 4E 05 F1 | 	add	fp, #12
0eab0     A7 16 62 FC | 	wrlong	arg03, fp
0eab4     04 4E 05 F1 | 	add	fp, #4
0eab8     A7 14 62 FC | 	wrlong	arg02, fp
0eabc     04 4E 05 F1 | 	add	fp, #4
0eac0     A7 12 62 FC | 	wrlong	arg01, fp
0eac4     14 4E 85 F1 | 	sub	fp, #20
0eac8     D0 C8 BF FD | 	call	#_pop
0eacc     FF 16 02 F6 | 	mov	arg03, result3
0ead0     A7 FA 61 FC | 	wrlong	result1, fp
0ead4     04 4E 05 F1 | 	add	fp, #4
0ead8     A7 FC 61 FC | 	wrlong	result2, fp
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 16 62 FC | 	wrlong	arg03, fp
0eae4     08 4E 85 F1 | 	sub	fp, #8
0eae8     A7 12 02 F6 | 	mov	arg01, fp
0eaec     90 CA BF FD | 	call	#_converttoint
0eaf0     3C 4E 05 F1 | 	add	fp, #60
0eaf4     A7 FA 61 FC | 	wrlong	result1, fp
0eaf8     30 4E 85 F1 | 	sub	fp, #48
0eafc     A7 12 02 F6 | 	mov	arg01, fp
0eb00     0C 4E 85 F1 | 	sub	fp, #12
0eb04     78 CA BF FD | 	call	#_converttoint
0eb08     40 4E 05 F1 | 	add	fp, #64
0eb0c     A7 FA 61 FC | 	wrlong	result1, fp
0eb10     28 4E 85 F1 | 	sub	fp, #40
0eb14     A7 12 02 F6 | 	mov	arg01, fp
0eb18     18 4E 85 F1 | 	sub	fp, #24
0eb1c     60 CA BF FD | 	call	#_converttoint
0eb20     44 4E 05 F1 | 	add	fp, #68
0eb24     A7 FA 61 FC | 	wrlong	result1, fp
0eb28     20 4E 85 F1 | 	sub	fp, #32
0eb2c     A7 12 02 F6 | 	mov	arg01, fp
0eb30     24 4E 85 F1 | 	sub	fp, #36
0eb34     48 CA BF FD | 	call	#_converttoint
0eb38     48 4E 05 F1 | 	add	fp, #72
0eb3c     A7 FA 61 FC | 	wrlong	result1, fp
0eb40     18 4E 85 F1 | 	sub	fp, #24
0eb44     A7 12 02 F6 | 	mov	arg01, fp
0eb48     30 4E 85 F1 | 	sub	fp, #48
0eb4c     30 CA BF FD | 	call	#_converttoint
0eb50     4C 4E 05 F1 | 	add	fp, #76
0eb54     A7 FA 61 FC | 	wrlong	result1, fp
0eb58                 | ' 
0eb58                 | ' t5=pop()
0eb58                 | ' t4=pop()
0eb58                 | ' t3=pop()
0eb58                 | ' t2=pop()
0eb58                 | ' t1=pop()
0eb58                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0eb58                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0eb58     10 4E 85 F1 | 	sub	fp, #16
0eb5c     A7 16 02 FB | 	rdlong	arg03, fp
0eb60     3C 4E 85 F1 | 	sub	fp, #60
0eb64     02 16 66 F0 | 	shl	arg03, #2
0eb68     51 00 00 FF 
0eb6c     68 E5 05 F1 | 	add	objptr, ##41832
0eb70     F2 16 02 F1 | 	add	arg03, objptr
0eb74     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0eb78     51 00 00 FF 
0eb7c     68 E5 85 F1 | 	sub	objptr, ##41832
0eb80     2C 00 90 AD |  if_e	jmp	#LR__1280
0eb84     3C 4E 05 F1 | 	add	fp, #60
0eb88     A7 16 02 FB | 	rdlong	arg03, fp
0eb8c     3C 4E 85 F1 | 	sub	fp, #60
0eb90     02 16 66 F0 | 	shl	arg03, #2
0eb94     51 00 00 FF 
0eb98     68 E5 05 F1 | 	add	objptr, ##41832
0eb9c     F2 16 02 F1 | 	add	arg03, objptr
0eba0     0B 13 02 FB | 	rdlong	arg01, arg03
0eba4     51 00 00 FF 
0eba8     68 E5 85 F1 | 	sub	objptr, ##41832
0ebac     B4 5C B1 FD | 	call	#__system___gc_free
0ebb0                 | LR__1280
0ebb0     3C 4E 05 F1 | 	add	fp, #60
0ebb4     A7 1E 02 FB | 	rdlong	local01, fp
0ebb8     0C 4E 05 F1 | 	add	fp, #12
0ebbc     A7 16 02 FB | 	rdlong	arg03, fp
0ebc0     04 4E 05 F1 | 	add	fp, #4
0ebc4     A7 14 02 FB | 	rdlong	arg02, fp
0ebc8     0A 17 02 FD | 	qmul	arg03, arg02
0ebcc     02 1E 66 F0 | 	shl	local01, #2
0ebd0     51 00 00 FF 
0ebd4     68 E5 05 F1 | 	add	objptr, ##41832
0ebd8     F2 1E 02 F1 | 	add	local01, objptr
0ebdc     4C 4E 85 F1 | 	sub	fp, #76
0ebe0     51 00 00 FF 
0ebe4     68 E5 85 F1 | 	sub	objptr, ##41832
0ebe8     18 12 62 FD | 	getqx	arg01
0ebec     38 5B B1 FD | 	call	#__system___gc_alloc_managed
0ebf0     0F FB 61 FC | 	wrlong	result1, local01
0ebf4                 | ' for y=a3 to a3+a5-1
0ebf4     44 4E 05 F1 | 	add	fp, #68
0ebf8     A7 20 02 FB | 	rdlong	local02, fp
0ebfc     0C 4E 05 F1 | 	add	fp, #12
0ec00     A7 20 62 FC | 	wrlong	local02, fp
0ec04     0C 4E 85 F1 | 	sub	fp, #12
0ec08     A7 22 02 FB | 	rdlong	local03, fp
0ec0c     08 4E 05 F1 | 	add	fp, #8
0ec10     A7 24 02 FB | 	rdlong	local04, fp
0ec14     4C 4E 85 F1 | 	sub	fp, #76
0ec18     12 23 02 F1 | 	add	local03, local04
0ec1c                 | LR__1281
0ec1c     50 4E 05 F1 | 	add	fp, #80
0ec20     A7 20 02 FB | 	rdlong	local02, fp
0ec24     50 4E 85 F1 | 	sub	fp, #80
0ec28     11 21 52 F2 | 	cmps	local02, local03 wc
0ec2c     F4 00 90 3D |  if_ae	jmp	#LR__1284
0ec30                 | '   for x=a2 to a4+a2-1
0ec30     40 4E 05 F1 | 	add	fp, #64
0ec34     A7 1E 02 FB | 	rdlong	local01, fp
0ec38     14 4E 05 F1 | 	add	fp, #20
0ec3c     A7 1E 62 FC | 	wrlong	local01, fp
0ec40     0C 4E 85 F1 | 	sub	fp, #12
0ec44     A7 26 02 FB | 	rdlong	local05, fp
0ec48     08 4E 85 F1 | 	sub	fp, #8
0ec4c     A7 28 02 FB | 	rdlong	local06, fp
0ec50     40 4E 85 F1 | 	sub	fp, #64
0ec54     14 27 02 F1 | 	add	local05, local06
0ec58                 | LR__1282
0ec58     54 4E 05 F1 | 	add	fp, #84
0ec5c     A7 1E 02 FB | 	rdlong	local01, fp
0ec60     54 4E 85 F1 | 	sub	fp, #84
0ec64     13 1F 52 F2 | 	cmps	local01, local05 wc
0ec68     A0 00 90 3D |  if_ae	jmp	#LR__1283
0ec6c     3C 4E 05 F1 | 	add	fp, #60
0ec70     A7 28 02 FB | 	rdlong	local06, fp
0ec74     18 4E 05 F1 | 	add	fp, #24
0ec78     A7 24 02 FB | 	rdlong	local04, fp
0ec7c     14 4E 85 F1 | 	sub	fp, #20
0ec80     A7 20 02 FB | 	rdlong	local02, fp
0ec84     10 4E 05 F1 | 	add	fp, #16
0ec88     A7 1E 02 FB | 	rdlong	local01, fp
0ec8c     0F 17 02 F6 | 	mov	arg03, local01
0ec90     0C 4E 85 F1 | 	sub	fp, #12
0ec94     A7 14 02 FB | 	rdlong	arg02, fp
0ec98     0A 17 82 F1 | 	sub	arg03, arg02
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 14 02 FB | 	rdlong	arg02, fp
0eca4     0A 17 02 FD | 	qmul	arg03, arg02
0eca8     02 28 66 F0 | 	shl	local06, #2
0ecac     51 00 00 FF 
0ecb0     68 E5 05 F1 | 	add	objptr, ##41832
0ecb4     F2 28 02 F1 | 	add	local06, objptr
0ecb8     14 29 02 FB | 	rdlong	local06, local06
0ecbc     12 2B 02 F6 | 	mov	local07, local04
0ecc0     10 2B 82 F1 | 	sub	local07, local02
0ecc4     51 00 00 FF 
0ecc8     68 E5 85 F1 | 	sub	objptr, ##41832
0eccc     F2 12 02 FB | 	rdlong	arg01, objptr
0ecd0     12 13 02 F1 | 	add	arg01, local04
0ecd4     48 4E 85 F1 | 	sub	fp, #72
0ecd8     0A 1E 66 F0 | 	shl	local01, #10
0ecdc     0F 13 02 F1 | 	add	arg01, local01
0ece0     18 24 62 FD | 	getqx	local04
0ece4     12 2B 02 F1 | 	add	local07, local04
0ece8     14 2B 02 F1 | 	add	local07, local06
0ecec     08 E8 B0 FD | 	call	#_pspeek
0ecf0     15 FB 41 FC | 	wrbyte	result1, local07
0ecf4     54 4E 05 F1 | 	add	fp, #84
0ecf8     A7 2A 02 FB | 	rdlong	local07, fp
0ecfc     01 2A 06 F1 | 	add	local07, #1
0ed00     A7 2A 62 FC | 	wrlong	local07, fp
0ed04     54 4E 85 F1 | 	sub	fp, #84
0ed08     4C FF 9F FD | 	jmp	#LR__1282
0ed0c                 | LR__1283
0ed0c     50 4E 05 F1 | 	add	fp, #80
0ed10     A7 2A 02 FB | 	rdlong	local07, fp
0ed14     01 2A 06 F1 | 	add	local07, #1
0ed18     A7 2A 62 FC | 	wrlong	local07, fp
0ed1c     50 4E 85 F1 | 	sub	fp, #80
0ed20     F8 FE 9F FD | 	jmp	#LR__1281
0ed24                 | LR__1284
0ed24     3C 4E 05 F1 | 	add	fp, #60
0ed28     A7 2A 02 FB | 	rdlong	local07, fp
0ed2c     15 13 02 F6 | 	mov	arg01, local07
0ed30     3C 4E 85 F1 | 	sub	fp, #60
0ed34     02 2A 66 F0 | 	shl	local07, #2
0ed38     51 00 00 FF 
0ed3c     68 E5 05 F1 | 	add	objptr, ##41832
0ed40     F2 2A 02 F1 | 	add	local07, objptr
0ed44     15 15 02 FB | 	rdlong	arg02, local07
0ed48     51 00 00 FF 
0ed4c     68 E5 85 F1 | 	sub	objptr, ##41832
0ed50     6C F4 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0ed54     3C 4E 05 F1 | 	add	fp, #60
0ed58     A7 12 02 FB | 	rdlong	arg01, fp
0ed5c     0C 4E 05 F1 | 	add	fp, #12
0ed60     A7 14 02 FB | 	rdlong	arg02, fp
0ed64     04 4E 05 F1 | 	add	fp, #4
0ed68     A7 16 02 FB | 	rdlong	arg03, fp
0ed6c     4C 4E 85 F1 | 	sub	fp, #76
0ed70     DC F4 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ed74     A7 F0 03 F6 | 	mov	ptra, fp
0ed78     B2 00 A0 FD | 	call	#popregs_
0ed7c                 | _do_defsprite_ret
0ed7c     2D 00 64 FD | 	ret
0ed80                 | 
0ed80                 | ' 
0ed80                 | ' '-------------------- deg
0ed80                 | ' 
0ed80                 | ' sub do_deg
0ed80                 | _do_deg
0ed80     51 00 00 FF 
0ed84     BC E5 05 F1 | 	add	objptr, ##41916
0ed88     7D 47 9E FF 
0ed8c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0ed90     04 E4 05 F1 | 	add	objptr, #4
0ed94     97 32 A1 FF 
0ed98     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0ed9c     51 00 00 FF 
0eda0     C0 E5 85 F1 | 	sub	objptr, ##41920
0eda4                 | _do_deg_ret
0eda4     2D 00 64 FD | 	ret
0eda8                 | 
0eda8                 | ' 
0eda8                 | ' '-------------------- dir
0eda8                 | ' 
0eda8                 | ' sub do_dir
0eda8                 | _do_dir
0eda8     13 4A 05 F6 | 	mov	COUNT_, #19
0edac     A8 00 A0 FD | 	call	#pushregs_
0edb0     01 00 00 FF 
0edb4     38 F0 07 F1 | 	add	ptra, ##568
0edb8     83 01 00 FF 
0edbc     F1 13 06 F6 | 	mov	arg01, ##@LR__5438
0edc0     14 21 B1 FD | 	call	#__system___chdir
0edc4                 | ' 
0edc4                 | ' chdir("/sd/bas")       ' set working directory - TODO allow to change it!
0edc4                 | ' print "Working directory: "; currentdir$ 
0edc4     00 12 06 F6 | 	mov	arg01, #0
0edc8     E4 74 B1 FD | 	call	#__system___getiolock_0541
0edcc     FD 12 02 F6 | 	mov	arg01, result1
0edd0     78 1A B1 FD | 	call	#__system___lockmem
0edd4     83 01 00 FF 
0edd8     F9 15 06 F6 | 	mov	arg02, ##@LR__5439
0eddc     00 12 06 F6 | 	mov	arg01, #0
0ede0     00 16 06 F6 | 	mov	arg03, #0
0ede4     58 27 B1 FD | 	call	#__system___basic_print_string
0ede8     4A 00 00 FF 
0edec     94 E4 05 F1 | 	add	objptr, ##38036
0edf0     F2 14 02 FB | 	rdlong	arg02, objptr
0edf4     4A 00 00 FF 
0edf8     94 E4 85 F1 | 	sub	objptr, ##38036
0edfc     00 12 06 F6 | 	mov	arg01, #0
0ee00     00 16 06 F6 | 	mov	arg03, #0
0ee04     38 27 B1 FD | 	call	#__system___basic_print_string
0ee08     00 12 06 F6 | 	mov	arg01, #0
0ee0c     0A 14 06 F6 | 	mov	arg02, #10
0ee10     00 16 06 F6 | 	mov	arg03, #0
0ee14     D0 26 B1 FD | 	call	#__system___basic_print_char
0ee18     01 1E 06 F6 | 	mov	local01, #1
0ee1c     00 12 06 F6 | 	mov	arg01, #0
0ee20     8C 74 B1 FD | 	call	#__system___getiolock_0541
0ee24     FD 00 68 FC | 	wrlong	#0, result1
0ee28     00 20 06 F6 | 	mov	local02, #0
0ee2c     00 22 06 F6 | 	mov	local03, #0
0ee30                 | ' px=0
0ee30                 | ' for i=0 to 127: filelist(i)="" : next i
0ee30     00 24 06 F6 | 	mov	local04, #0
0ee34     1C 4E 05 F1 | 	add	fp, #28
0ee38     97 12 48 FB | 	callpa	#(@LR__1291-@LR__1290)>>2,fcache_load_ptr_
0ee3c                 | LR__1290
0ee3c     12 27 02 F6 | 	mov	local05, local04
0ee40     02 26 66 F0 | 	shl	local05, #2
0ee44     A7 26 02 F1 | 	add	local05, fp
0ee48     84 01 00 FF 
0ee4c     0D 28 06 F6 | 	mov	local06, ##@LR__5440
0ee50     13 29 62 FC | 	wrlong	local06, local05
0ee54     01 24 06 F1 | 	add	local04, #1
0ee58     80 24 56 F2 | 	cmps	local04, #128 wc
0ee5c     DC FF 9F CD |  if_b	jmp	#LR__1290
0ee60                 | LR__1291
0ee60     1C 4E 85 F1 | 	sub	fp, #28
0ee64     84 01 00 FF 
0ee68     0E 12 06 F6 | 	mov	arg01, ##@LR__5441
0ee6c     10 14 06 F6 | 	mov	arg02, #16
0ee70     74 75 B1 FD | 	call	#__system___basic_dir
0ee74     FD 2A 02 F6 | 	mov	local07, result1
0ee78     00 2C 06 F6 | 	mov	local08, #0
0ee7c                 | ' filename=dir$("*", fbDirectory)
0ee7c                 | ' n=0
0ee7c                 | ' while filename <> "" andalso filename <> nil andalso n<128
0ee7c                 | LR__1292
0ee7c     84 01 00 FF 
0ee80     10 2E 06 F6 | 	mov	local09, ##@LR__5442
0ee84     15 13 02 F6 | 	mov	arg01, local07
0ee88     17 15 02 F6 | 	mov	arg02, local09
0ee8c     E4 19 B1 FD | 	call	#__system___string_cmp
0ee90     00 FA 0D F2 | 	cmp	result1, #0 wz
0ee94     68 00 90 AD |  if_e	jmp	#LR__1293
0ee98     00 2E 06 F6 | 	mov	local09, #0
0ee9c     15 13 02 F6 | 	mov	arg01, local07
0eea0     00 14 06 F6 | 	mov	arg02, #0
0eea4     CC 19 B1 FD | 	call	#__system___string_cmp
0eea8     00 FA 0D F2 | 	cmp	result1, #0 wz
0eeac     50 00 90 AD |  if_e	jmp	#LR__1293
0eeb0     80 2C 56 F2 | 	cmps	local08, #128 wc
0eeb4     48 00 90 3D |  if_ae	jmp	#LR__1293
0eeb8     84 01 00 FF 
0eebc     11 12 06 F6 | 	mov	arg01, ##@LR__5443
0eec0     15 15 02 F6 | 	mov	arg02, local07
0eec4     E0 19 B1 FD | 	call	#__system___string_concat
0eec8     FD 2A 02 F6 | 	mov	local07, result1
0eecc     16 27 02 F6 | 	mov	local05, local08
0eed0     02 26 66 F0 | 	shl	local05, #2
0eed4     1C 4E 05 F1 | 	add	fp, #28
0eed8     A7 26 02 F1 | 	add	local05, fp
0eedc     13 2B 62 FC | 	wrlong	local07, local05
0eee0     01 2C 06 F1 | 	add	local08, #1
0eee4     00 26 06 F6 | 	mov	local05, #0
0eee8     00 12 06 F6 | 	mov	arg01, #0
0eeec     00 14 06 F6 | 	mov	arg02, #0
0eef0     1C 4E 85 F1 | 	sub	fp, #28
0eef4     F0 74 B1 FD | 	call	#__system___basic_dir
0eef8     FD 2A 02 F6 | 	mov	local07, result1
0eefc     7C FF 9F FD | 	jmp	#LR__1292
0ef00                 | LR__1293
0ef00                 | ' for i=0 to n-1			' now sort this
0ef00     00 24 06 F6 | 	mov	local04, #0
0ef04     16 31 02 F6 | 	mov	local10, local08
0ef08                 | LR__1294
0ef08     18 25 52 F2 | 	cmps	local04, local10 wc
0ef0c     DC 00 90 3D |  if_ae	jmp	#LR__1298
0ef10     00 32 06 F6 | 	mov	local11, #0
0ef14                 | '   swapped=false
0ef14                 | '   for j=0 to n-i-2
0ef14     00 34 06 F6 | 	mov	local12, #0
0ef18     16 37 02 F6 | 	mov	local13, local08
0ef1c     12 37 82 F1 | 	sub	local13, local04
0ef20     01 36 86 F1 | 	sub	local13, #1
0ef24                 | LR__1295
0ef24     1B 35 52 F2 | 	cmps	local12, local13 wc
0ef28     B0 00 90 3D |  if_ae	jmp	#LR__1297
0ef2c                 | '     if filelist(j) > filelist(j+1) then
0ef2c     1A 2F 02 F6 | 	mov	local09, local12
0ef30     02 2E 66 F0 | 	shl	local09, #2
0ef34     1C 4E 05 F1 | 	add	fp, #28
0ef38     A7 2E 02 F1 | 	add	local09, fp
0ef3c     17 13 02 FB | 	rdlong	arg01, local09
0ef40     1A 2F 02 F6 | 	mov	local09, local12
0ef44     01 2E 06 F1 | 	add	local09, #1
0ef48     17 29 02 F6 | 	mov	local06, local09
0ef4c     02 28 66 F0 | 	shl	local06, #2
0ef50     A7 1E 02 F6 | 	mov	local01, fp
0ef54     A7 28 02 F1 | 	add	local06, fp
0ef58     14 27 02 FB | 	rdlong	local05, local06
0ef5c     13 15 02 F6 | 	mov	arg02, local05
0ef60     1C 4E 85 F1 | 	sub	fp, #28
0ef64     0C 19 B1 FD | 	call	#__system___string_cmp
0ef68     01 FA 55 F2 | 	cmps	result1, #1 wc
0ef6c     64 00 90 CD |  if_b	jmp	#LR__1296
0ef70     1A 2F 02 F6 | 	mov	local09, local12
0ef74     01 2E 06 F1 | 	add	local09, #1
0ef78     02 2E 66 F0 | 	shl	local09, #2
0ef7c     1C 4E 05 F1 | 	add	fp, #28
0ef80     A7 2E 02 F1 | 	add	local09, fp
0ef84     17 33 02 FB | 	rdlong	local11, local09
0ef88     1A 29 02 F6 | 	mov	local06, local12
0ef8c     02 28 66 F0 | 	shl	local06, #2
0ef90     A7 28 02 F1 | 	add	local06, fp
0ef94     14 27 02 FB | 	rdlong	local05, local06
0ef98     1A 2F 02 F6 | 	mov	local09, local12
0ef9c     17 29 02 F6 | 	mov	local06, local09
0efa0     02 28 66 F0 | 	shl	local06, #2
0efa4     A7 1E 02 F6 | 	mov	local01, fp
0efa8     A7 28 02 F1 | 	add	local06, fp
0efac     14 33 62 FC | 	wrlong	local11, local06
0efb0     1A 21 02 F6 | 	mov	local02, local12
0efb4     01 20 06 F1 | 	add	local02, #1
0efb8     10 39 02 F6 | 	mov	local14, local02
0efbc     02 38 66 F0 | 	shl	local14, #2
0efc0     A7 3A 02 F6 | 	mov	local15, fp
0efc4     A7 38 02 F1 | 	add	local14, fp
0efc8     1C 27 62 FC | 	wrlong	local05, local14
0efcc     01 32 66 F6 | 	neg	local11, #1
0efd0     1C 4E 85 F1 | 	sub	fp, #28
0efd4                 | LR__1296
0efd4     01 34 06 F1 | 	add	local12, #1
0efd8     48 FF 9F FD | 	jmp	#LR__1295
0efdc                 | LR__1297
0efdc                 | ' if not swapped then exit for
0efdc     19 3D 22 F6 | 	not	local16, local11
0efe0     00 3C 0E F2 | 	cmp	local16, #0 wz
0efe4     01 24 06 A1 |  if_e	add	local04, #1
0efe8     1C FF 9F AD |  if_e	jmp	#LR__1294
0efec                 | LR__1298
0efec                 | ' for i=0 to n-1
0efec     00 24 06 F6 | 	mov	local04, #0
0eff0     16 3F 02 F6 | 	mov	local17, local08
0eff4                 | LR__1299
0eff4     1F 25 52 F2 | 	cmps	local04, local17 wc
0eff8     94 00 90 3D |  if_ae	jmp	#LR__1301
0effc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0effc     00 12 06 F6 | 	mov	arg01, #0
0f000     AC 72 B1 FD | 	call	#__system___getiolock_0541
0f004     FD 12 02 F6 | 	mov	arg01, result1
0f008     40 18 B1 FD | 	call	#__system___lockmem
0f00c     12 21 02 F6 | 	mov	local02, local04
0f010     02 20 66 F0 | 	shl	local02, #2
0f014     1C 4E 05 F1 | 	add	fp, #28
0f018     A7 38 02 F6 | 	mov	local14, fp
0f01c     A7 20 02 F1 | 	add	local02, fp
0f020     10 15 02 FB | 	rdlong	arg02, local02
0f024     00 1E 06 F6 | 	mov	local01, #0
0f028     00 12 06 F6 | 	mov	arg01, #0
0f02c     00 16 06 F6 | 	mov	arg03, #0
0f030     1C 4E 85 F1 | 	sub	fp, #28
0f034     08 25 B1 FD | 	call	#__system___basic_print_string
0f038     00 12 06 F6 | 	mov	arg01, #0
0f03c     70 72 B1 FD | 	call	#__system___getiolock_0541
0f040     FD 00 68 FC | 	wrlong	#0, result1
0f044     40 22 06 F1 | 	add	local03, #64
0f048     11 13 02 F6 | 	mov	arg01, local03
0f04c     4C FE B0 FD | 	call	#_hg010b_spin2_setcursorx
0f050     00 23 56 F2 | 	cmps	local03, #256 wc
0f054     30 00 90 CD |  if_b	jmp	#LR__1300
0f058     00 22 06 F6 | 	mov	local03, #0
0f05c     00 12 06 F6 | 	mov	arg01, #0
0f060     4C 72 B1 FD | 	call	#__system___getiolock_0541
0f064     FD 12 02 F6 | 	mov	arg01, result1
0f068     E0 17 B1 FD | 	call	#__system___lockmem
0f06c     00 12 06 F6 | 	mov	arg01, #0
0f070     0A 14 06 F6 | 	mov	arg02, #10
0f074     00 16 06 F6 | 	mov	arg03, #0
0f078     6C 24 B1 FD | 	call	#__system___basic_print_char
0f07c     00 12 06 F6 | 	mov	arg01, #0
0f080     2C 72 B1 FD | 	call	#__system___getiolock_0541
0f084     FD 00 68 FC | 	wrlong	#0, result1
0f088                 | LR__1300
0f088     01 24 06 F1 | 	add	local04, #1
0f08c     64 FF 9F FD | 	jmp	#LR__1299
0f090                 | LR__1301
0f090                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f090     80 2C 56 F2 | 	cmps	local08, #128 wc
0f094     44 00 90 CD |  if_b	jmp	#LR__1302
0f098     00 12 06 F6 | 	mov	arg01, #0
0f09c     10 72 B1 FD | 	call	#__system___getiolock_0541
0f0a0     FD 12 02 F6 | 	mov	arg01, result1
0f0a4     A4 17 B1 FD | 	call	#__system___lockmem
0f0a8     84 01 00 FF 
0f0ac     18 14 06 F6 | 	mov	arg02, ##@LR__5444
0f0b0     00 12 06 F6 | 	mov	arg01, #0
0f0b4     00 16 06 F6 | 	mov	arg03, #0
0f0b8     84 24 B1 FD | 	call	#__system___basic_print_string
0f0bc     00 12 06 F6 | 	mov	arg01, #0
0f0c0     0A 14 06 F6 | 	mov	arg02, #10
0f0c4     00 16 06 F6 | 	mov	arg03, #0
0f0c8     1C 24 B1 FD | 	call	#__system___basic_print_char
0f0cc     00 12 06 F6 | 	mov	arg01, #0
0f0d0     DC 71 B1 FD | 	call	#__system___getiolock_0541
0f0d4     FD 00 68 FC | 	wrlong	#0, result1
0f0d8     00 1E 06 F6 | 	mov	local01, #0
0f0dc                 | LR__1302
0f0dc                 | ' print
0f0dc     00 12 06 F6 | 	mov	arg01, #0
0f0e0     CC 71 B1 FD | 	call	#__system___getiolock_0541
0f0e4     FD 12 02 F6 | 	mov	arg01, result1
0f0e8     60 17 B1 FD | 	call	#__system___lockmem
0f0ec     00 12 06 F6 | 	mov	arg01, #0
0f0f0     0A 14 06 F6 | 	mov	arg02, #10
0f0f4     00 16 06 F6 | 	mov	arg03, #0
0f0f8     EC 23 B1 FD | 	call	#__system___basic_print_char
0f0fc     00 12 06 F6 | 	mov	arg01, #0
0f100     AC 71 B1 FD | 	call	#__system___getiolock_0541
0f104     FD 00 68 FC | 	wrlong	#0, result1
0f108     00 28 06 F6 | 	mov	local06, #0
0f10c     00 2C 06 F6 | 	mov	local08, #0
0f110     00 22 06 F6 | 	mov	local03, #0
0f114                 | ' return cursor_y
0f114     3E E4 05 F1 | 	add	objptr, #62
0f118     F2 40 C2 FA | 	rdbyte	local18, objptr
0f11c     3E E4 85 F1 | 	sub	objptr, #62
0f120     84 01 00 FF 
0f124     4A 12 06 F6 | 	mov	arg01, ##@LR__5445
0f128     21 14 06 F6 | 	mov	arg02, #33
0f12c     B8 72 B1 FD | 	call	#__system___basic_dir
0f130     FD 2A 02 F6 | 	mov	local07, result1
0f134                 | ' n=0
0f134                 | ' px=0: py=v.getcursory()
0f134                 | ' filename = dir$("*", fbNormal )   
0f134                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0f134                 | LR__1303
0f134     84 01 00 FF 
0f138     4C 2E 06 F6 | 	mov	local09, ##@LR__5446
0f13c     15 13 02 F6 | 	mov	arg01, local07
0f140     17 15 02 F6 | 	mov	arg02, local09
0f144     2C 17 B1 FD | 	call	#__system___string_cmp
0f148     00 FA 0D F2 | 	cmp	result1, #0 wz
0f14c     54 00 90 AD |  if_e	jmp	#LR__1304
0f150     00 2E 06 F6 | 	mov	local09, #0
0f154     15 13 02 F6 | 	mov	arg01, local07
0f158     00 14 06 F6 | 	mov	arg02, #0
0f15c     14 17 B1 FD | 	call	#__system___string_cmp
0f160     00 FA 0D F2 | 	cmp	result1, #0 wz
0f164     3C 00 90 AD |  if_e	jmp	#LR__1304
0f168     80 2C 56 F2 | 	cmps	local08, #128 wc
0f16c     34 00 90 3D |  if_ae	jmp	#LR__1304
0f170     16 27 02 F6 | 	mov	local05, local08
0f174     02 26 66 F0 | 	shl	local05, #2
0f178     1C 4E 05 F1 | 	add	fp, #28
0f17c     A7 26 02 F1 | 	add	local05, fp
0f180     13 2B 62 FC | 	wrlong	local07, local05
0f184     01 2C 06 F1 | 	add	local08, #1
0f188     00 26 06 F6 | 	mov	local05, #0
0f18c     00 12 06 F6 | 	mov	arg01, #0
0f190     00 14 06 F6 | 	mov	arg02, #0
0f194     1C 4E 85 F1 | 	sub	fp, #28
0f198     4C 72 B1 FD | 	call	#__system___basic_dir
0f19c     FD 2A 02 F6 | 	mov	local07, result1
0f1a0     90 FF 9F FD | 	jmp	#LR__1303
0f1a4                 | LR__1304
0f1a4                 | ' for i =0 to n-1
0f1a4     00 24 06 F6 | 	mov	local04, #0
0f1a8                 | LR__1305
0f1a8     16 25 52 F2 | 	cmps	local04, local08 wc
0f1ac     D8 00 90 3D |  if_ae	jmp	#LR__1309
0f1b0     00 32 06 F6 | 	mov	local11, #0
0f1b4                 | '   swapped=false
0f1b4                 | '   for j=0 to n-i-2
0f1b4     00 34 06 F6 | 	mov	local12, #0
0f1b8     16 43 02 F6 | 	mov	local19, local08
0f1bc     12 43 82 F1 | 	sub	local19, local04
0f1c0     01 42 86 F1 | 	sub	local19, #1
0f1c4                 | LR__1306
0f1c4     21 35 52 F2 | 	cmps	local12, local19 wc
0f1c8     AC 00 90 3D |  if_ae	jmp	#LR__1308
0f1cc                 | '     if filelist(j) > filelist(j+1) then
0f1cc     1A 2F 02 F6 | 	mov	local09, local12
0f1d0     02 2E 66 F0 | 	shl	local09, #2
0f1d4     1C 4E 05 F1 | 	add	fp, #28
0f1d8     A7 2E 02 F1 | 	add	local09, fp
0f1dc     17 13 02 FB | 	rdlong	arg01, local09
0f1e0     1A 2F 02 F6 | 	mov	local09, local12
0f1e4     01 2E 06 F1 | 	add	local09, #1
0f1e8     17 29 02 F6 | 	mov	local06, local09
0f1ec     02 28 66 F0 | 	shl	local06, #2
0f1f0     A7 1E 02 F6 | 	mov	local01, fp
0f1f4     A7 28 02 F1 | 	add	local06, fp
0f1f8     14 27 02 FB | 	rdlong	local05, local06
0f1fc     13 15 02 F6 | 	mov	arg02, local05
0f200     1C 4E 85 F1 | 	sub	fp, #28
0f204     6C 16 B1 FD | 	call	#__system___string_cmp
0f208     01 FA 55 F2 | 	cmps	result1, #1 wc
0f20c     60 00 90 CD |  if_b	jmp	#LR__1307
0f210     1A 2F 02 F6 | 	mov	local09, local12
0f214     01 2E 06 F1 | 	add	local09, #1
0f218     02 2E 66 F0 | 	shl	local09, #2
0f21c     1C 4E 05 F1 | 	add	fp, #28
0f220     A7 2E 02 F1 | 	add	local09, fp
0f224     17 3D 02 FB | 	rdlong	local16, local09
0f228     1A 29 02 F6 | 	mov	local06, local12
0f22c     02 28 66 F0 | 	shl	local06, #2
0f230     A7 28 02 F1 | 	add	local06, fp
0f234     14 27 02 FB | 	rdlong	local05, local06
0f238     1A 2F 02 F6 | 	mov	local09, local12
0f23c     17 29 02 F6 | 	mov	local06, local09
0f240     02 28 66 F0 | 	shl	local06, #2
0f244     A7 1E 02 F6 | 	mov	local01, fp
0f248     A7 28 02 F1 | 	add	local06, fp
0f24c     14 3D 62 FC | 	wrlong	local16, local06
0f250     1A 39 02 F6 | 	mov	local14, local12
0f254     01 38 06 F1 | 	add	local14, #1
0f258     02 38 66 F0 | 	shl	local14, #2
0f25c     A7 3A 02 F6 | 	mov	local15, fp
0f260     A7 38 02 F1 | 	add	local14, fp
0f264     1C 27 62 FC | 	wrlong	local05, local14
0f268     01 32 66 F6 | 	neg	local11, #1
0f26c     1C 4E 85 F1 | 	sub	fp, #28
0f270                 | LR__1307
0f270     01 34 06 F1 | 	add	local12, #1
0f274     4C FF 9F FD | 	jmp	#LR__1306
0f278                 | LR__1308
0f278                 | ' if not swapped then exit for
0f278     19 3D 22 F6 | 	not	local16, local11
0f27c     00 3C 0E F2 | 	cmp	local16, #0 wz
0f280     01 24 06 A1 |  if_e	add	local04, #1
0f284     20 FF 9F AD |  if_e	jmp	#LR__1305
0f288                 | LR__1309
0f288                 | ' for i=0 to n-1
0f288     00 24 06 F6 | 	mov	local04, #0
0f28c                 | LR__1310
0f28c     16 25 52 F2 | 	cmps	local04, local08 wc
0f290     8C 00 90 3D |  if_ae	jmp	#LR__1312
0f294                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0f294     00 12 06 F6 | 	mov	arg01, #0
0f298     14 70 B1 FD | 	call	#__system___getiolock_0541
0f29c     FD 12 02 F6 | 	mov	arg01, result1
0f2a0     A8 15 B1 FD | 	call	#__system___lockmem
0f2a4     12 21 02 F6 | 	mov	local02, local04
0f2a8     02 20 66 F0 | 	shl	local02, #2
0f2ac     1C 4E 05 F1 | 	add	fp, #28
0f2b0     A7 20 02 F1 | 	add	local02, fp
0f2b4     10 15 02 FB | 	rdlong	arg02, local02
0f2b8     00 12 06 F6 | 	mov	arg01, #0
0f2bc     00 16 06 F6 | 	mov	arg03, #0
0f2c0     1C 4E 85 F1 | 	sub	fp, #28
0f2c4     78 22 B1 FD | 	call	#__system___basic_print_string
0f2c8     00 12 06 F6 | 	mov	arg01, #0
0f2cc     E0 6F B1 FD | 	call	#__system___getiolock_0541
0f2d0     FD 00 68 FC | 	wrlong	#0, result1
0f2d4     40 22 06 F1 | 	add	local03, #64
0f2d8     11 13 02 F6 | 	mov	arg01, local03
0f2dc     BC FB B0 FD | 	call	#_hg010b_spin2_setcursorx
0f2e0     00 23 56 F2 | 	cmps	local03, #256 wc
0f2e4     30 00 90 CD |  if_b	jmp	#LR__1311
0f2e8     00 22 06 F6 | 	mov	local03, #0
0f2ec     00 12 06 F6 | 	mov	arg01, #0
0f2f0     BC 6F B1 FD | 	call	#__system___getiolock_0541
0f2f4     FD 12 02 F6 | 	mov	arg01, result1
0f2f8     50 15 B1 FD | 	call	#__system___lockmem
0f2fc     00 12 06 F6 | 	mov	arg01, #0
0f300     0A 14 06 F6 | 	mov	arg02, #10
0f304     00 16 06 F6 | 	mov	arg03, #0
0f308     DC 21 B1 FD | 	call	#__system___basic_print_char
0f30c     00 12 06 F6 | 	mov	arg01, #0
0f310     9C 6F B1 FD | 	call	#__system___getiolock_0541
0f314     FD 00 68 FC | 	wrlong	#0, result1
0f318                 | LR__1311
0f318     01 24 06 F1 | 	add	local04, #1
0f31c     6C FF 9F FD | 	jmp	#LR__1310
0f320                 | LR__1312
0f320                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f320     80 2C 56 F2 | 	cmps	local08, #128 wc
0f324     40 00 90 CD |  if_b	jmp	#LR__1313
0f328     00 12 06 F6 | 	mov	arg01, #0
0f32c     80 6F B1 FD | 	call	#__system___getiolock_0541
0f330     FD 12 02 F6 | 	mov	arg01, result1
0f334     14 15 B1 FD | 	call	#__system___lockmem
0f338     84 01 00 FF 
0f33c     4D 14 06 F6 | 	mov	arg02, ##@LR__5447
0f340     00 12 06 F6 | 	mov	arg01, #0
0f344     00 16 06 F6 | 	mov	arg03, #0
0f348     F4 21 B1 FD | 	call	#__system___basic_print_string
0f34c     00 12 06 F6 | 	mov	arg01, #0
0f350     0A 14 06 F6 | 	mov	arg02, #10
0f354     00 16 06 F6 | 	mov	arg03, #0
0f358     8C 21 B1 FD | 	call	#__system___basic_print_char
0f35c     00 12 06 F6 | 	mov	arg01, #0
0f360     4C 6F B1 FD | 	call	#__system___getiolock_0541
0f364     FD 00 68 FC | 	wrlong	#0, result1
0f368                 | LR__1313
0f368                 | ' print
0f368     00 12 06 F6 | 	mov	arg01, #0
0f36c     40 6F B1 FD | 	call	#__system___getiolock_0541
0f370     FD 12 02 F6 | 	mov	arg01, result1
0f374     D4 14 B1 FD | 	call	#__system___lockmem
0f378     00 12 06 F6 | 	mov	arg01, #0
0f37c     0A 14 06 F6 | 	mov	arg02, #10
0f380     00 16 06 F6 | 	mov	arg03, #0
0f384     60 21 B1 FD | 	call	#__system___basic_print_char
0f388     00 12 06 F6 | 	mov	arg01, #0
0f38c     20 6F B1 FD | 	call	#__system___getiolock_0541
0f390     FD 00 68 FC | 	wrlong	#0, result1
0f394     A7 F0 03 F6 | 	mov	ptra, fp
0f398     B2 00 A0 FD | 	call	#popregs_
0f39c                 | _do_dir_ret
0f39c     2D 00 64 FD | 	ret
0f3a0                 | 
0f3a0                 | ' 
0f3a0                 | ' '-------------------- draw
0f3a0                 | ' 
0f3a0                 | ' sub do_draw
0f3a0                 | _do_draw
0f3a0     00 4A 05 F6 | 	mov	COUNT_, #0
0f3a4     A8 00 A0 FD | 	call	#pushregs_
0f3a8     20 F0 07 F1 | 	add	ptra, #32
0f3ac     EC BF BF FD | 	call	#_pop
0f3b0     FD 1A 02 F6 | 	mov	arg05, result1
0f3b4     FE 18 02 F6 | 	mov	arg04, result2
0f3b8     FF 16 02 F6 | 	mov	arg03, result3
0f3bc     0C 4E 05 F1 | 	add	fp, #12
0f3c0     A7 1A 62 FC | 	wrlong	arg05, fp
0f3c4     04 4E 05 F1 | 	add	fp, #4
0f3c8     A7 18 62 FC | 	wrlong	arg04, fp
0f3cc     04 4E 05 F1 | 	add	fp, #4
0f3d0     A7 16 62 FC | 	wrlong	arg03, fp
0f3d4     14 4E 85 F1 | 	sub	fp, #20
0f3d8     C0 BF BF FD | 	call	#_pop
0f3dc     FF 1A 02 F6 | 	mov	arg05, result3
0f3e0     A7 FA 61 FC | 	wrlong	result1, fp
0f3e4     04 4E 05 F1 | 	add	fp, #4
0f3e8     A7 FC 61 FC | 	wrlong	result2, fp
0f3ec     04 4E 05 F1 | 	add	fp, #4
0f3f0     A7 1A 62 FC | 	wrlong	arg05, fp
0f3f4     08 4E 85 F1 | 	sub	fp, #8
0f3f8     A7 12 02 F6 | 	mov	arg01, fp
0f3fc     80 C1 BF FD | 	call	#_converttoint
0f400     18 4E 05 F1 | 	add	fp, #24
0f404     A7 FA 61 FC | 	wrlong	result1, fp
0f408     0C 4E 85 F1 | 	sub	fp, #12
0f40c     A7 12 02 F6 | 	mov	arg01, fp
0f410     0C 4E 85 F1 | 	sub	fp, #12
0f414     68 C1 BF FD | 	call	#_converttoint
0f418     1C 4E 05 F1 | 	add	fp, #28
0f41c     A7 FA 61 FC | 	wrlong	result1, fp
0f420     37 00 00 FF 
0f424     2C E4 05 F1 | 	add	objptr, ##28204
0f428     F2 12 02 FB | 	rdlong	arg01, objptr
0f42c     04 E4 05 F1 | 	add	objptr, #4
0f430     F2 14 02 FB | 	rdlong	arg02, objptr
0f434     04 4E 85 F1 | 	sub	fp, #4
0f438     A7 16 02 FB | 	rdlong	arg03, fp
0f43c     FD 18 02 F6 | 	mov	arg04, result1
0f440     18 4E 85 F1 | 	sub	fp, #24
0f444     08 E4 85 F1 | 	sub	objptr, #8
0f448     F2 1A 02 FB | 	rdlong	arg05, objptr
0f44c     37 00 00 FF 
0f450     28 E4 85 F1 | 	sub	objptr, ##28200
0f454     F4 F0 B0 FD | 	call	#_hg010b_spin2_draw
0f458     18 4E 05 F1 | 	add	fp, #24
0f45c     A7 1A 02 FB | 	rdlong	arg05, fp
0f460     37 00 00 FF 
0f464     2C E4 05 F1 | 	add	objptr, ##28204
0f468     F2 1A 62 FC | 	wrlong	arg05, objptr
0f46c     04 4E 05 F1 | 	add	fp, #4
0f470     A7 1A 02 FB | 	rdlong	arg05, fp
0f474     1C 4E 85 F1 | 	sub	fp, #28
0f478     04 E4 05 F1 | 	add	objptr, #4
0f47c     F2 1A 62 FC | 	wrlong	arg05, objptr
0f480     37 00 00 FF 
0f484     30 E4 85 F1 | 	sub	objptr, ##28208
0f488     A7 F0 03 F6 | 	mov	ptra, fp
0f48c     B2 00 A0 FD | 	call	#popregs_
0f490                 | _do_draw_ret
0f490     2D 00 64 FD | 	ret
0f494                 | 
0f494                 | ' 
0f494                 | ' '-------------------- else
0f494                 | ' 
0f494                 | ' sub do_else
0f494                 | _do_else
0f494     4A 00 00 FF 
0f498     7C E4 05 F1 | 	add	objptr, ##38012
0f49c     F2 00 02 FB | 	rdlong	_var01, objptr
0f4a0     01 00 86 F1 | 	sub	_var01, #1
0f4a4     04 E4 05 F1 | 	add	objptr, #4
0f4a8     F2 00 62 FC | 	wrlong	_var01, objptr
0f4ac     4A 00 00 FF 
0f4b0     80 E4 85 F1 | 	sub	objptr, ##38016
0f4b4                 | _do_else_ret
0f4b4     2D 00 64 FD | 	ret
0f4b8                 | 
0f4b8                 | ' 
0f4b8                 | ' '-------------------- end
0f4b8                 | ' 
0f4b8                 | ' sub do_end
0f4b8                 | _do_end
0f4b8     4A 00 00 FF 
0f4bc     7C E4 05 F1 | 	add	objptr, ##38012
0f4c0     F2 00 02 FB | 	rdlong	_var01, objptr
0f4c4     01 00 86 F1 | 	sub	_var01, #1
0f4c8     04 E4 05 F1 | 	add	objptr, #4
0f4cc     F2 00 62 FC | 	wrlong	_var01, objptr
0f4d0     06 00 00 FF 
0f4d4     38 E4 05 F1 | 	add	objptr, ##3128
0f4d8     FF FF BF FF 
0f4dc     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0f4e0     50 00 00 FF 
0f4e4     B8 E4 85 F1 | 	sub	objptr, ##41144
0f4e8                 | _do_end_ret
0f4e8     2D 00 64 FD | 	ret
0f4ec                 | 
0f4ec                 | ' 
0f4ec                 | ' '-------------------- enter
0f4ec                 | ' 
0f4ec                 | ' sub do_enter
0f4ec                 | _do_enter
0f4ec     02 00 00 FF 
0f4f0     D2 12 06 F6 | 	mov	arg01, ##1234
0f4f4     48 21 B0 FD | 	call	#_do_load
0f4f8                 | _do_enter_ret
0f4f8     2D 00 64 FD | 	ret
0f4fc                 | 
0f4fc                 | ' 
0f4fc                 | ' '------------------- error processing
0f4fc                 | ' 
0f4fc                 | ' sub do_error
0f4fc                 | _do_error
0f4fc     01 4A 05 F6 | 	mov	COUNT_, #1
0f500     A8 00 A0 FD | 	call	#pushregs_
0f504     4A 00 00 FF 
0f508     80 E4 05 F1 | 	add	objptr, ##38016
0f50c     F2 18 02 FB | 	rdlong	arg04, objptr
0f510     0C 17 02 F6 | 	mov	arg03, arg04
0f514     01 16 66 F0 | 	shl	arg03, #1
0f518     0C 17 02 F1 | 	add	arg03, arg04
0f51c     02 16 66 F0 | 	shl	arg03, #2
0f520     03 00 00 FF 
0f524     04 E4 85 F1 | 	sub	objptr, ##1540
0f528     F2 16 02 F1 | 	add	arg03, objptr
0f52c     0B 1F 02 FB | 	rdlong	local01, arg03
0f530                 | ' r=compiledline(lineptr_e).result.uresult
0f530                 | ' print "Error ";r;": ";errors$(r)
0f530     00 12 06 F6 | 	mov	arg01, #0
0f534     47 00 00 FF 
0f538     7C E4 85 F1 | 	sub	objptr, ##36476
0f53c     70 6D B1 FD | 	call	#__system___getiolock_0541
0f540     FD 12 02 F6 | 	mov	arg01, result1
0f544     04 13 B1 FD | 	call	#__system___lockmem
0f548     84 01 00 FF 
0f54c     7F 14 06 F6 | 	mov	arg02, ##@LR__5448
0f550     00 12 06 F6 | 	mov	arg01, #0
0f554     00 16 06 F6 | 	mov	arg03, #0
0f558     E4 1F B1 FD | 	call	#__system___basic_print_string
0f55c     00 12 06 F6 | 	mov	arg01, #0
0f560     0F 15 02 F6 | 	mov	arg02, local01
0f564     00 16 06 F6 | 	mov	arg03, #0
0f568     0A 18 06 F6 | 	mov	arg04, #10
0f56c     54 20 B1 FD | 	call	#__system___basic_print_unsigned
0f570     84 01 00 FF 
0f574     86 14 06 F6 | 	mov	arg02, ##@LR__5449
0f578     00 12 06 F6 | 	mov	arg01, #0
0f57c     00 16 06 F6 | 	mov	arg03, #0
0f580     BC 1F B1 FD | 	call	#__system___basic_print_string
0f584     02 1E 66 F0 | 	shl	local01, #2
0f588     45 00 00 FF 
0f58c     7C E4 05 F1 | 	add	objptr, ##35452
0f590     F2 1E 02 F1 | 	add	local01, objptr
0f594     0F 15 02 FB | 	rdlong	arg02, local01
0f598     00 12 06 F6 | 	mov	arg01, #0
0f59c     00 16 06 F6 | 	mov	arg03, #0
0f5a0     45 00 00 FF 
0f5a4     7C E4 85 F1 | 	sub	objptr, ##35452
0f5a8     94 1F B1 FD | 	call	#__system___basic_print_string
0f5ac     00 12 06 F6 | 	mov	arg01, #0
0f5b0     0A 14 06 F6 | 	mov	arg02, #10
0f5b4     00 16 06 F6 | 	mov	arg03, #0
0f5b8     2C 1F B1 FD | 	call	#__system___basic_print_char
0f5bc     00 12 06 F6 | 	mov	arg01, #0
0f5c0     EC 6C B1 FD | 	call	#__system___getiolock_0541
0f5c4     FD 00 68 FC | 	wrlong	#0, result1
0f5c8     A7 F0 03 F6 | 	mov	ptra, fp
0f5cc     B2 00 A0 FD | 	call	#popregs_
0f5d0                 | _do_error_ret
0f5d0     2D 00 64 FD | 	ret
0f5d4                 | 
0f5d4                 | ' 
0f5d4                 | ' '-------------------- fcircle
0f5d4                 | ' 
0f5d4                 | ' sub do_fcircle
0f5d4                 | _do_fcircle
0f5d4     02 4A 05 F6 | 	mov	COUNT_, #2
0f5d8     A8 00 A0 FD | 	call	#pushregs_
0f5dc     24 F0 07 F1 | 	add	ptra, #36
0f5e0     B8 BD BF FD | 	call	#_pop
0f5e4     FD 14 02 F6 | 	mov	arg02, result1
0f5e8     FE 18 02 F6 | 	mov	arg04, result2
0f5ec     FF 16 02 F6 | 	mov	arg03, result3
0f5f0     18 4E 05 F1 | 	add	fp, #24
0f5f4     A7 14 62 FC | 	wrlong	arg02, fp
0f5f8     04 4E 05 F1 | 	add	fp, #4
0f5fc     A7 18 62 FC | 	wrlong	arg04, fp
0f600     04 4E 05 F1 | 	add	fp, #4
0f604     A7 16 62 FC | 	wrlong	arg03, fp
0f608     20 4E 85 F1 | 	sub	fp, #32
0f60c     8C BD BF FD | 	call	#_pop
0f610     FD 14 02 F6 | 	mov	arg02, result1
0f614     FE 18 02 F6 | 	mov	arg04, result2
0f618     FF 16 02 F6 | 	mov	arg03, result3
0f61c     0C 4E 05 F1 | 	add	fp, #12
0f620     A7 14 62 FC | 	wrlong	arg02, fp
0f624     04 4E 05 F1 | 	add	fp, #4
0f628     A7 18 62 FC | 	wrlong	arg04, fp
0f62c     04 4E 05 F1 | 	add	fp, #4
0f630     A7 16 62 FC | 	wrlong	arg03, fp
0f634     14 4E 85 F1 | 	sub	fp, #20
0f638     60 BD BF FD | 	call	#_pop
0f63c     FF 14 02 F6 | 	mov	arg02, result3
0f640     A7 FA 61 FC | 	wrlong	result1, fp
0f644     04 4E 05 F1 | 	add	fp, #4
0f648     A7 FC 61 FC | 	wrlong	result2, fp
0f64c     04 4E 05 F1 | 	add	fp, #4
0f650     A7 14 62 FC | 	wrlong	arg02, fp
0f654     08 4E 85 F1 | 	sub	fp, #8
0f658     A7 12 02 F6 | 	mov	arg01, fp
0f65c     20 BF BF FD | 	call	#_converttoint
0f660     FD 1E 02 F6 | 	mov	local01, result1
0f664     0C 4E 05 F1 | 	add	fp, #12
0f668     A7 12 02 F6 | 	mov	arg01, fp
0f66c     0C 4E 85 F1 | 	sub	fp, #12
0f670     0C BF BF FD | 	call	#_converttoint
0f674     FD 20 02 F6 | 	mov	local02, result1
0f678     18 4E 05 F1 | 	add	fp, #24
0f67c     A7 12 02 F6 | 	mov	arg01, fp
0f680     18 4E 85 F1 | 	sub	fp, #24
0f684     F8 BE BF FD | 	call	#_converttoint
0f688     FD 16 02 F6 | 	mov	arg03, result1
0f68c     37 00 00 FF 
0f690     28 E4 05 F1 | 	add	objptr, ##28200
0f694     F2 18 02 FB | 	rdlong	arg04, objptr
0f698     37 00 00 FF 
0f69c     28 E4 85 F1 | 	sub	objptr, ##28200
0f6a0     0F 13 02 F6 | 	mov	arg01, local01
0f6a4     10 15 02 F6 | 	mov	arg02, local02
0f6a8     24 F3 B0 FD | 	call	#_hg010b_spin2_fcircle
0f6ac     A7 F0 03 F6 | 	mov	ptra, fp
0f6b0     B2 00 A0 FD | 	call	#popregs_
0f6b4                 | _do_fcircle_ret
0f6b4     2D 00 64 FD | 	ret
0f6b8                 | 
0f6b8                 | ' 
0f6b8                 | ' '-------------------- fill
0f6b8                 | ' 
0f6b8                 | ' sub do_fill
0f6b8                 | _do_fill
0f6b8     03 4A 05 F6 | 	mov	COUNT_, #3
0f6bc     A8 00 A0 FD | 	call	#pushregs_
0f6c0     30 F0 07 F1 | 	add	ptra, #48
0f6c4     D4 BC BF FD | 	call	#_pop
0f6c8     FD 16 02 F6 | 	mov	arg03, result1
0f6cc     FE 14 02 F6 | 	mov	arg02, result2
0f6d0     FF 18 02 F6 | 	mov	arg04, result3
0f6d4     24 4E 05 F1 | 	add	fp, #36
0f6d8     A7 16 62 FC | 	wrlong	arg03, fp
0f6dc     04 4E 05 F1 | 	add	fp, #4
0f6e0     A7 14 62 FC | 	wrlong	arg02, fp
0f6e4     04 4E 05 F1 | 	add	fp, #4
0f6e8     A7 18 62 FC | 	wrlong	arg04, fp
0f6ec     2C 4E 85 F1 | 	sub	fp, #44
0f6f0     A8 BC BF FD | 	call	#_pop
0f6f4     FD 16 02 F6 | 	mov	arg03, result1
0f6f8     FE 14 02 F6 | 	mov	arg02, result2
0f6fc     FF 18 02 F6 | 	mov	arg04, result3
0f700     18 4E 05 F1 | 	add	fp, #24
0f704     A7 16 62 FC | 	wrlong	arg03, fp
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 14 62 FC | 	wrlong	arg02, fp
0f710     04 4E 05 F1 | 	add	fp, #4
0f714     A7 18 62 FC | 	wrlong	arg04, fp
0f718     20 4E 85 F1 | 	sub	fp, #32
0f71c     7C BC BF FD | 	call	#_pop
0f720     FD 16 02 F6 | 	mov	arg03, result1
0f724     FE 14 02 F6 | 	mov	arg02, result2
0f728     FF 18 02 F6 | 	mov	arg04, result3
0f72c     0C 4E 05 F1 | 	add	fp, #12
0f730     A7 16 62 FC | 	wrlong	arg03, fp
0f734     04 4E 05 F1 | 	add	fp, #4
0f738     A7 14 62 FC | 	wrlong	arg02, fp
0f73c     04 4E 05 F1 | 	add	fp, #4
0f740     A7 18 62 FC | 	wrlong	arg04, fp
0f744     14 4E 85 F1 | 	sub	fp, #20
0f748     50 BC BF FD | 	call	#_pop
0f74c     FF 16 02 F6 | 	mov	arg03, result3
0f750     A7 FA 61 FC | 	wrlong	result1, fp
0f754     04 4E 05 F1 | 	add	fp, #4
0f758     A7 FC 61 FC | 	wrlong	result2, fp
0f75c     04 4E 05 F1 | 	add	fp, #4
0f760     A7 16 62 FC | 	wrlong	arg03, fp
0f764     08 4E 85 F1 | 	sub	fp, #8
0f768     A7 12 02 F6 | 	mov	arg01, fp
0f76c     10 BE BF FD | 	call	#_converttoint
0f770     FD 1E 02 F6 | 	mov	local01, result1
0f774     0C 4E 05 F1 | 	add	fp, #12
0f778     A7 12 02 F6 | 	mov	arg01, fp
0f77c     0C 4E 85 F1 | 	sub	fp, #12
0f780     FC BD BF FD | 	call	#_converttoint
0f784     FD 20 02 F6 | 	mov	local02, result1
0f788     18 4E 05 F1 | 	add	fp, #24
0f78c     A7 12 02 F6 | 	mov	arg01, fp
0f790     18 4E 85 F1 | 	sub	fp, #24
0f794     E8 BD BF FD | 	call	#_converttoint
0f798     FD 22 02 F6 | 	mov	local03, result1
0f79c     24 4E 05 F1 | 	add	fp, #36
0f7a0     A7 12 02 F6 | 	mov	arg01, fp
0f7a4     24 4E 85 F1 | 	sub	fp, #36
0f7a8     D4 BD BF FD | 	call	#_converttoint
0f7ac     FD 18 02 F6 | 	mov	arg04, result1
0f7b0     0F 13 02 F6 | 	mov	arg01, local01
0f7b4     10 15 02 F6 | 	mov	arg02, local02
0f7b8     11 17 02 F6 | 	mov	arg03, local03
0f7bc     7C EF B0 FD | 	call	#_hg010b_spin2_fill
0f7c0     A7 F0 03 F6 | 	mov	ptra, fp
0f7c4     B2 00 A0 FD | 	call	#popregs_
0f7c8                 | _do_fill_ret
0f7c8     2D 00 64 FD | 	ret
0f7cc                 | 
0f7cc                 | ' 
0f7cc                 | ' '-------------------- for
0f7cc                 | ' 
0f7cc                 | ' sub do_for()
0f7cc                 | _do_for
0f7cc     01 4A 05 F6 | 	mov	COUNT_, #1
0f7d0     A8 00 A0 FD | 	call	#pushregs_
0f7d4     10 F0 07 F1 | 	add	ptra, #16
0f7d8     50 00 00 FF 
0f7dc     08 E5 05 F1 | 	add	objptr, ##41224
0f7e0     F2 12 02 FB | 	rdlong	arg01, objptr
0f7e4     01 12 06 F1 | 	add	arg01, #1
0f7e8     F2 12 62 FC | 	wrlong	arg01, objptr
0f7ec     50 00 00 FF 
0f7f0     08 E5 85 F1 | 	sub	objptr, ##41224
0f7f4     A4 BB BF FD | 	call	#_pop
0f7f8     A7 FA 61 FC | 	wrlong	result1, fp
0f7fc     04 4E 05 F1 | 	add	fp, #4
0f800     A7 FC 61 FC | 	wrlong	result2, fp
0f804     04 4E 05 F1 | 	add	fp, #4
0f808     A7 FE 61 FC | 	wrlong	result3, fp
0f80c     08 4E 85 F1 | 	sub	fp, #8
0f810     50 00 00 FF 
0f814     08 E5 05 F1 | 	add	objptr, ##41224
0f818     F2 12 02 FB | 	rdlong	arg01, objptr
0f81c     09 1F 02 F6 | 	mov	local01, arg01
0f820     02 1E 66 F0 | 	shl	local01, #2
0f824     09 1F 02 F1 | 	add	local01, arg01
0f828     02 1E 66 F0 | 	shl	local01, #2
0f82c     06 00 00 FF 
0f830     70 E4 85 F1 | 	sub	objptr, ##3184
0f834     F2 1E 02 F1 | 	add	local01, objptr
0f838     A7 12 02 FB | 	rdlong	arg01, fp
0f83c     08 1E 06 F1 | 	add	local01, #8
0f840     0F 13 62 FC | 	wrlong	arg01, local01
0f844     4A 00 00 FF 
0f848     98 E4 85 F1 | 	sub	objptr, ##38040
0f84c     4C BB BF FD | 	call	#_pop
0f850     A7 FA 61 FC | 	wrlong	result1, fp
0f854     04 4E 05 F1 | 	add	fp, #4
0f858     A7 FC 61 FC | 	wrlong	result2, fp
0f85c     04 4E 05 F1 | 	add	fp, #4
0f860     A7 FE 61 FC | 	wrlong	result3, fp
0f864     08 4E 85 F1 | 	sub	fp, #8
0f868     50 00 00 FF 
0f86c     08 E5 05 F1 | 	add	objptr, ##41224
0f870     F2 12 02 FB | 	rdlong	arg01, objptr
0f874     09 1F 02 F6 | 	mov	local01, arg01
0f878     02 1E 66 F0 | 	shl	local01, #2
0f87c     09 1F 02 F1 | 	add	local01, arg01
0f880     02 1E 66 F0 | 	shl	local01, #2
0f884     06 00 00 FF 
0f888     70 E4 85 F1 | 	sub	objptr, ##3184
0f88c     F2 1E 02 F1 | 	add	local01, objptr
0f890     A7 12 02 F6 | 	mov	arg01, fp
0f894     4A 00 00 FF 
0f898     98 E4 85 F1 | 	sub	objptr, ##38040
0f89c     E0 BC BF FD | 	call	#_converttoint
0f8a0     FD 12 02 F6 | 	mov	arg01, result1
0f8a4     0C 1E 06 F1 | 	add	local01, #12
0f8a8     0F 13 62 FC | 	wrlong	arg01, local01
0f8ac     EC BA BF FD | 	call	#_pop
0f8b0     A7 FA 61 FC | 	wrlong	result1, fp
0f8b4     04 4E 05 F1 | 	add	fp, #4
0f8b8     A7 FC 61 FC | 	wrlong	result2, fp
0f8bc     04 4E 05 F1 | 	add	fp, #4
0f8c0     A7 FE 61 FC | 	wrlong	result3, fp
0f8c4     08 4E 85 F1 | 	sub	fp, #8
0f8c8     50 00 00 FF 
0f8cc     08 E5 05 F1 | 	add	objptr, ##41224
0f8d0     F2 12 02 FB | 	rdlong	arg01, objptr
0f8d4     09 1F 02 F6 | 	mov	local01, arg01
0f8d8     02 1E 66 F0 | 	shl	local01, #2
0f8dc     09 1F 02 F1 | 	add	local01, arg01
0f8e0     02 1E 66 F0 | 	shl	local01, #2
0f8e4     06 00 00 FF 
0f8e8     70 E4 85 F1 | 	sub	objptr, ##3184
0f8ec     F2 1E 02 F1 | 	add	local01, objptr
0f8f0     A7 12 02 F6 | 	mov	arg01, fp
0f8f4     4A 00 00 FF 
0f8f8     98 E4 85 F1 | 	sub	objptr, ##38040
0f8fc     80 BC BF FD | 	call	#_converttoint
0f900     10 1E 06 F1 | 	add	local01, #16
0f904     0F FB 61 FC | 	wrlong	result1, local01
0f908                 | ' fortop+=1
0f908                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
0f908                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
0f908                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
0f908                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
0f908     4A 00 00 FF 
0f90c     80 E4 05 F1 | 	add	objptr, ##38016
0f910     F2 12 02 FB | 	rdlong	arg01, objptr
0f914     09 1F 02 F6 | 	mov	local01, arg01
0f918     01 1E 66 F0 | 	shl	local01, #1
0f91c     09 1F 02 F1 | 	add	local01, arg01
0f920     02 1E 66 F0 | 	shl	local01, #2
0f924     03 00 00 FF 
0f928     04 E4 85 F1 | 	sub	objptr, ##1540
0f92c     F2 1E 02 F1 | 	add	local01, objptr
0f930     08 1E 06 F1 | 	add	local01, #8
0f934     0F 1F 02 FB | 	rdlong	local01, local01
0f938     FE 1F 0E F2 | 	cmp	local01, #510 wz
0f93c     47 00 00 FF 
0f940     7C E4 85 F1 | 	sub	objptr, ##36476
0f944     70 00 90 5D |  if_ne	jmp	#LR__1320
0f948     50 00 00 FF 
0f94c     08 E5 05 F1 | 	add	objptr, ##41224
0f950     F2 12 02 FB | 	rdlong	arg01, objptr
0f954     09 1F 02 F6 | 	mov	local01, arg01
0f958     02 1E 66 F0 | 	shl	local01, #2
0f95c     09 1F 02 F1 | 	add	local01, arg01
0f960     02 1E 66 F0 | 	shl	local01, #2
0f964     06 00 00 FF 
0f968     70 E4 85 F1 | 	sub	objptr, ##3184
0f96c     F2 1E 02 F1 | 	add	local01, objptr
0f970     06 00 00 FF 
0f974     20 E4 05 F1 | 	add	objptr, ##3104
0f978     F2 12 02 FB | 	rdlong	arg01, objptr
0f97c     0F 13 62 FC | 	wrlong	arg01, local01
0f980     50 E4 05 F1 | 	add	objptr, #80
0f984     F2 12 02 FB | 	rdlong	arg01, objptr
0f988     09 1F 02 F6 | 	mov	local01, arg01
0f98c     02 1E 66 F0 | 	shl	local01, #2
0f990     09 1F 02 F1 | 	add	local01, arg01
0f994     02 1E 66 F0 | 	shl	local01, #2
0f998     06 00 00 FF 
0f99c     70 E4 85 F1 | 	sub	objptr, ##3184
0f9a0     F2 1E 02 F1 | 	add	local01, objptr
0f9a4     04 1E 06 F1 | 	add	local01, #4
0f9a8     0F 01 68 FC | 	wrlong	#0, local01
0f9ac     4A 00 00 FF 
0f9b0     98 E4 85 F1 | 	sub	objptr, ##38040
0f9b4     78 00 90 FD | 	jmp	#LR__1321
0f9b8                 | LR__1320
0f9b8     50 00 00 FF 
0f9bc     08 E5 05 F1 | 	add	objptr, ##41224
0f9c0     F2 12 02 FB | 	rdlong	arg01, objptr
0f9c4     09 1F 02 F6 | 	mov	local01, arg01
0f9c8     02 1E 66 F0 | 	shl	local01, #2
0f9cc     09 1F 02 F1 | 	add	local01, arg01
0f9d0     02 1E 66 F0 | 	shl	local01, #2
0f9d4     06 00 00 FF 
0f9d8     70 E4 85 F1 | 	sub	objptr, ##3184
0f9dc     F2 1E 02 F1 | 	add	local01, objptr
0f9e0     06 00 00 FF 
0f9e4     28 E4 05 F1 | 	add	objptr, ##3112
0f9e8     F2 12 02 FB | 	rdlong	arg01, objptr
0f9ec     0F 13 62 FC | 	wrlong	arg01, local01
0f9f0     48 E4 05 F1 | 	add	objptr, #72
0f9f4     F2 12 02 FB | 	rdlong	arg01, objptr
0f9f8     09 1F 02 F6 | 	mov	local01, arg01
0f9fc     02 1E 66 F0 | 	shl	local01, #2
0fa00     09 1F 02 F1 | 	add	local01, arg01
0fa04     02 1E 66 F0 | 	shl	local01, #2
0fa08     06 00 00 FF 
0fa0c     70 E4 85 F1 | 	sub	objptr, ##3184
0fa10     F2 1E 02 F1 | 	add	local01, objptr
0fa14     18 E4 85 F1 | 	sub	objptr, #24
0fa18     F2 12 02 FB | 	rdlong	arg01, objptr
0fa1c     4A 00 00 FF 
0fa20     80 E4 85 F1 | 	sub	objptr, ##38016
0fa24     01 12 06 F1 | 	add	arg01, #1
0fa28     04 1E 06 F1 | 	add	local01, #4
0fa2c     0F 13 62 FC | 	wrlong	arg01, local01
0fa30                 | LR__1321
0fa30     A7 F0 03 F6 | 	mov	ptra, fp
0fa34     B2 00 A0 FD | 	call	#popregs_
0fa38                 | _do_for_ret
0fa38     2D 00 64 FD | 	ret
0fa3c                 | 
0fa3c                 | ' 
0fa3c                 | ' '-------------------- frame
0fa3c                 | ' 
0fa3c                 | ' sub do_frame
0fa3c                 | _do_frame
0fa3c     03 4A 05 F6 | 	mov	COUNT_, #3
0fa40     A8 00 A0 FD | 	call	#pushregs_
0fa44     30 F0 07 F1 | 	add	ptra, #48
0fa48     50 B9 BF FD | 	call	#_pop
0fa4c     FD 16 02 F6 | 	mov	arg03, result1
0fa50     FE 14 02 F6 | 	mov	arg02, result2
0fa54     FF 1A 02 F6 | 	mov	arg05, result3
0fa58     24 4E 05 F1 | 	add	fp, #36
0fa5c     A7 16 62 FC | 	wrlong	arg03, fp
0fa60     04 4E 05 F1 | 	add	fp, #4
0fa64     A7 14 62 FC | 	wrlong	arg02, fp
0fa68     04 4E 05 F1 | 	add	fp, #4
0fa6c     A7 1A 62 FC | 	wrlong	arg05, fp
0fa70     2C 4E 85 F1 | 	sub	fp, #44
0fa74     24 B9 BF FD | 	call	#_pop
0fa78     FD 16 02 F6 | 	mov	arg03, result1
0fa7c     FE 14 02 F6 | 	mov	arg02, result2
0fa80     FF 1A 02 F6 | 	mov	arg05, result3
0fa84     18 4E 05 F1 | 	add	fp, #24
0fa88     A7 16 62 FC | 	wrlong	arg03, fp
0fa8c     04 4E 05 F1 | 	add	fp, #4
0fa90     A7 14 62 FC | 	wrlong	arg02, fp
0fa94     04 4E 05 F1 | 	add	fp, #4
0fa98     A7 1A 62 FC | 	wrlong	arg05, fp
0fa9c     20 4E 85 F1 | 	sub	fp, #32
0faa0     F8 B8 BF FD | 	call	#_pop
0faa4     FD 16 02 F6 | 	mov	arg03, result1
0faa8     FE 14 02 F6 | 	mov	arg02, result2
0faac     FF 1A 02 F6 | 	mov	arg05, result3
0fab0     0C 4E 05 F1 | 	add	fp, #12
0fab4     A7 16 62 FC | 	wrlong	arg03, fp
0fab8     04 4E 05 F1 | 	add	fp, #4
0fabc     A7 14 62 FC | 	wrlong	arg02, fp
0fac0     04 4E 05 F1 | 	add	fp, #4
0fac4     A7 1A 62 FC | 	wrlong	arg05, fp
0fac8     14 4E 85 F1 | 	sub	fp, #20
0facc     CC B8 BF FD | 	call	#_pop
0fad0     FF 16 02 F6 | 	mov	arg03, result3
0fad4     A7 FA 61 FC | 	wrlong	result1, fp
0fad8     04 4E 05 F1 | 	add	fp, #4
0fadc     A7 FC 61 FC | 	wrlong	result2, fp
0fae0     04 4E 05 F1 | 	add	fp, #4
0fae4     A7 16 62 FC | 	wrlong	arg03, fp
0fae8     08 4E 85 F1 | 	sub	fp, #8
0faec     A7 12 02 F6 | 	mov	arg01, fp
0faf0     8C BA BF FD | 	call	#_converttoint
0faf4     FD 1E 02 F6 | 	mov	local01, result1
0faf8     0C 4E 05 F1 | 	add	fp, #12
0fafc     A7 12 02 F6 | 	mov	arg01, fp
0fb00     0C 4E 85 F1 | 	sub	fp, #12
0fb04     78 BA BF FD | 	call	#_converttoint
0fb08     FD 20 02 F6 | 	mov	local02, result1
0fb0c     18 4E 05 F1 | 	add	fp, #24
0fb10     A7 12 02 F6 | 	mov	arg01, fp
0fb14     18 4E 85 F1 | 	sub	fp, #24
0fb18     64 BA BF FD | 	call	#_converttoint
0fb1c     FD 22 02 F6 | 	mov	local03, result1
0fb20     24 4E 05 F1 | 	add	fp, #36
0fb24     A7 12 02 F6 | 	mov	arg01, fp
0fb28     24 4E 85 F1 | 	sub	fp, #36
0fb2c     50 BA BF FD | 	call	#_converttoint
0fb30     FD 18 02 F6 | 	mov	arg04, result1
0fb34     37 00 00 FF 
0fb38     28 E4 05 F1 | 	add	objptr, ##28200
0fb3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fb40     37 00 00 FF 
0fb44     28 E4 85 F1 | 	sub	objptr, ##28200
0fb48     0F 13 02 F6 | 	mov	arg01, local01
0fb4c     10 15 02 F6 | 	mov	arg02, local02
0fb50     11 17 02 F6 | 	mov	arg03, local03
0fb54     D0 F0 B0 FD | 	call	#_hg010b_spin2_frame
0fb58     A7 F0 03 F6 | 	mov	ptra, fp
0fb5c     B2 00 A0 FD | 	call	#popregs_
0fb60                 | _do_frame_ret
0fb60     2D 00 64 FD | 	ret
0fb64                 | 
0fb64                 | ' 
0fb64                 | ' '-------------------- fre
0fb64                 | ' 
0fb64                 | ' sub do_fre
0fb64                 | _do_fre
0fb64     01 4A 05 F6 | 	mov	COUNT_, #1
0fb68     A8 00 A0 FD | 	call	#pushregs_
0fb6c     0C F0 07 F1 | 	add	ptra, #12
0fb70     51 00 00 FF 
0fb74     AC E5 05 F1 | 	add	objptr, ##41900
0fb78     F2 12 02 FB | 	rdlong	arg01, objptr
0fb7c     0E 00 00 FF 
0fb80     50 E5 85 F1 | 	sub	objptr, ##7504
0fb84     F2 1E 02 FB | 	rdlong	local01, objptr
0fb88     0F 13 82 F1 | 	sub	arg01, local01
0fb8c     0E 00 00 FF 
0fb90     BC E5 05 F1 | 	add	objptr, ##7612
0fb94     F2 12 62 FC | 	wrlong	arg01, objptr
0fb98     08 4E 05 F1 | 	add	fp, #8
0fb9c     A7 3A 68 FC | 	wrlong	#29, fp
0fba0     08 4E 85 F1 | 	sub	fp, #8
0fba4     F2 1E 02 FB | 	rdlong	local01, objptr
0fba8     52 00 00 FF 
0fbac     18 E4 85 F1 | 	sub	objptr, ##42008
0fbb0     A7 1E 62 FC | 	wrlong	local01, fp
0fbb4     A7 12 02 F6 | 	mov	arg01, fp
0fbb8     78 B8 BF FD | 	call	#_push
0fbbc     A7 F0 03 F6 | 	mov	ptra, fp
0fbc0     B2 00 A0 FD | 	call	#popregs_
0fbc4                 | _do_fre_ret
0fbc4     2D 00 64 FD | 	ret
0fbc8                 | 
0fbc8                 | ' 
0fbc8                 | ' '-------------------- get
0fbc8                 | ' 
0fbc8                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
0fbc8                 | _do_get
0fbc8     09 4A 05 F6 | 	mov	COUNT_, #9
0fbcc     A8 00 A0 FD | 	call	#pushregs_
0fbd0     40 F0 07 F1 | 	add	ptra, #64
0fbd4     4A 00 00 FF 
0fbd8     80 E4 05 F1 | 	add	objptr, ##38016
0fbdc     F2 1A 02 FB | 	rdlong	arg05, objptr
0fbe0     0D 19 02 F6 | 	mov	arg04, arg05
0fbe4     01 18 66 F0 | 	shl	arg04, #1
0fbe8     0D 19 02 F1 | 	add	arg04, arg05
0fbec     02 18 66 F0 | 	shl	arg04, #2
0fbf0     03 00 00 FF 
0fbf4     04 E4 85 F1 | 	sub	objptr, ##1540
0fbf8     F2 18 02 F1 | 	add	arg04, objptr
0fbfc     0C 1B 02 FB | 	rdlong	arg05, arg04
0fc00     A7 1A 62 FC | 	wrlong	arg05, fp
0fc04                 | ' 
0fc04                 | ' numpar=compiledline(lineptr_e).result.uresult
0fc04                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
0fc04     04 1A 0E F2 | 	cmp	arg05, #4 wz
0fc08     47 00 00 FF 
0fc0c     7C E4 85 F1 | 	sub	objptr, ##36476
0fc10     48 00 90 5D |  if_ne	jmp	#LR__1330
0fc14     84 B7 BF FD | 	call	#_pop
0fc18     FF 1A 02 F6 | 	mov	arg05, result3
0fc1c     1C 4E 05 F1 | 	add	fp, #28
0fc20     A7 FA 61 FC | 	wrlong	result1, fp
0fc24     04 4E 05 F1 | 	add	fp, #4
0fc28     A7 FC 61 FC | 	wrlong	result2, fp
0fc2c     04 4E 05 F1 | 	add	fp, #4
0fc30     A7 1A 62 FC | 	wrlong	arg05, fp
0fc34     08 4E 85 F1 | 	sub	fp, #8
0fc38     A7 12 02 F6 | 	mov	arg01, fp
0fc3c     1C 4E 85 F1 | 	sub	fp, #28
0fc40     3C B9 BF FD | 	call	#_converttoint
0fc44     52 00 00 FF 
0fc48     14 E4 05 F1 | 	add	objptr, ##42004
0fc4c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc50     52 00 00 FF 
0fc54     14 E4 85 F1 | 	sub	objptr, ##42004
0fc58     18 00 90 FD | 	jmp	#LR__1331
0fc5c                 | LR__1330
0fc5c     52 00 00 FF 
0fc60     14 E4 05 F1 | 	add	objptr, ##42004
0fc64     FF FF FF FF 
0fc68     F2 FE 6B FC | 	wrlong	##-1, objptr
0fc6c     52 00 00 FF 
0fc70     14 E4 85 F1 | 	sub	objptr, ##42004
0fc74                 | LR__1331
0fc74                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
0fc74     A7 16 02 FB | 	rdlong	arg03, fp
0fc78     03 16 56 F2 | 	cmps	arg03, #3 wc
0fc7c     40 00 90 CD |  if_b	jmp	#LR__1332
0fc80     18 B7 BF FD | 	call	#_pop
0fc84     FF 16 02 F6 | 	mov	arg03, result3
0fc88     1C 4E 05 F1 | 	add	fp, #28
0fc8c     A7 FA 61 FC | 	wrlong	result1, fp
0fc90     04 4E 05 F1 | 	add	fp, #4
0fc94     A7 FC 61 FC | 	wrlong	result2, fp
0fc98     04 4E 05 F1 | 	add	fp, #4
0fc9c     A7 16 62 FC | 	wrlong	arg03, fp
0fca0     08 4E 85 F1 | 	sub	fp, #8
0fca4     A7 12 02 F6 | 	mov	arg01, fp
0fca8     1C 4E 85 F1 | 	sub	fp, #28
0fcac     D0 B8 BF FD | 	call	#_converttoint
0fcb0     08 4E 05 F1 | 	add	fp, #8
0fcb4     A7 FA 61 FC | 	wrlong	result1, fp
0fcb8     08 4E 85 F1 | 	sub	fp, #8
0fcbc     0C 00 90 FD | 	jmp	#LR__1333
0fcc0                 | LR__1332
0fcc0     08 4E 05 F1 | 	add	fp, #8
0fcc4     A7 02 68 FC | 	wrlong	#1, fp
0fcc8     08 4E 85 F1 | 	sub	fp, #8
0fccc                 | LR__1333
0fccc                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
0fccc     A7 16 02 FB | 	rdlong	arg03, fp
0fcd0     02 16 56 F2 | 	cmps	arg03, #2 wc
0fcd4     3C 00 90 CD |  if_b	jmp	#LR__1334
0fcd8     C0 B6 BF FD | 	call	#_pop
0fcdc     FF 16 02 F6 | 	mov	arg03, result3
0fce0     1C 4E 05 F1 | 	add	fp, #28
0fce4     A7 FA 61 FC | 	wrlong	result1, fp
0fce8     04 4E 05 F1 | 	add	fp, #4
0fcec     A7 FC 61 FC | 	wrlong	result2, fp
0fcf0     04 4E 05 F1 | 	add	fp, #4
0fcf4     A7 16 62 FC | 	wrlong	arg03, fp
0fcf8     08 4E 85 F1 | 	sub	fp, #8
0fcfc     A7 12 02 F6 | 	mov	arg01, fp
0fd00     1C 4E 85 F1 | 	sub	fp, #28
0fd04     78 B8 BF FD | 	call	#_converttoint
0fd08     0C 4E 05 F1 | 	add	fp, #12
0fd0c     A7 FA 61 FC | 	wrlong	result1, fp
0fd10     0C 4E 85 F1 | 	sub	fp, #12
0fd14                 | LR__1334
0fd14     84 B6 BF FD | 	call	#_pop
0fd18     FF 16 02 F6 | 	mov	arg03, result3
0fd1c     1C 4E 05 F1 | 	add	fp, #28
0fd20     A7 FA 61 FC | 	wrlong	result1, fp
0fd24     04 4E 05 F1 | 	add	fp, #4
0fd28     A7 FC 61 FC | 	wrlong	result2, fp
0fd2c     04 4E 05 F1 | 	add	fp, #4
0fd30     A7 16 62 FC | 	wrlong	arg03, fp
0fd34     08 4E 85 F1 | 	sub	fp, #8
0fd38     A7 12 02 F6 | 	mov	arg01, fp
0fd3c     1C 4E 85 F1 | 	sub	fp, #28
0fd40     3C B8 BF FD | 	call	#_converttoint
0fd44     04 4E 05 F1 | 	add	fp, #4
0fd48     A7 FA 61 FC | 	wrlong	result1, fp
0fd4c     10 4E 05 F1 | 	add	fp, #16
0fd50     A7 16 02 FB | 	rdlong	arg03, fp
0fd54     14 4E 85 F1 | 	sub	fp, #20
0fd58     02 16 66 F0 | 	shl	arg03, #2
0fd5c     50 00 00 FF 
0fd60     C4 E4 05 F1 | 	add	objptr, ##41156
0fd64     F2 1E 02 F6 | 	mov	local01, objptr
0fd68     F2 16 02 F1 | 	add	arg03, objptr
0fd6c     0B 01 68 FC | 	wrlong	#0, arg03
0fd70                 | ' t1=pop() : channel=converttoint(t1)
0fd70                 | ' getres(j)=0
0fd70                 | ' if pos>=0 then
0fd70     01 00 00 FF 
0fd74     50 E5 05 F1 | 	add	objptr, ##848
0fd78     F2 20 02 FB | 	rdlong	local02, objptr
0fd7c     52 00 00 FF 
0fd80     14 E4 85 F1 | 	sub	objptr, ##42004
0fd84     00 20 56 F2 | 	cmps	local02, #0 wc
0fd88     F0 01 90 CD |  if_b	jmp	#LR__1341
0fd8c                 | '   for i=0 to  amount/1024
0fd8c     10 4E 05 F1 | 	add	fp, #16
0fd90     A7 00 68 FC | 	wrlong	#0, fp
0fd94     08 4E 85 F1 | 	sub	fp, #8
0fd98     A7 22 02 FB | 	rdlong	local03, fp
0fd9c     08 4E 85 F1 | 	sub	fp, #8
0fda0     11 25 52 F6 | 	abs	local04, local03 wc
0fda4     0A 24 46 F0 | 	shr	local04, #10
0fda8     12 25 82 F6 | 	negc	local04, local04
0fdac     01 24 06 F1 | 	add	local04, #1
0fdb0                 | LR__1335
0fdb0     10 4E 05 F1 | 	add	fp, #16
0fdb4     A7 22 02 FB | 	rdlong	local03, fp
0fdb8     10 4E 85 F1 | 	sub	fp, #16
0fdbc     12 23 52 F2 | 	cmps	local03, local04 wc
0fdc0     9C 03 90 3D |  if_ae	jmp	#LR__1349
0fdc4                 | '     get #channel,pos+1,block(0),amount,r
0fdc4     04 4E 05 F1 | 	add	fp, #4
0fdc8     A7 12 02 FB | 	rdlong	arg01, fp
0fdcc     52 00 00 FF 
0fdd0     14 E4 05 F1 | 	add	objptr, ##42004
0fdd4     F2 14 02 FB | 	rdlong	arg02, objptr
0fdd8     01 14 06 F1 | 	add	arg02, #1
0fddc     03 00 00 FF 
0fde0     60 E5 85 F1 | 	sub	objptr, ##1888
0fde4     F2 16 02 F6 | 	mov	arg03, objptr
0fde8     4E 00 00 FF 
0fdec     B4 E4 85 F1 | 	sub	objptr, ##40116
0fdf0     04 4E 05 F1 | 	add	fp, #4
0fdf4     A7 18 02 FB | 	rdlong	arg04, fp
0fdf8     08 4E 85 F1 | 	sub	fp, #8
0fdfc     01 1A 06 F6 | 	mov	arg05, #1
0fe00     B8 18 B1 FD | 	call	#__system___basic_get
0fe04     18 4E 05 F1 | 	add	fp, #24
0fe08     A7 FA 61 FC | 	wrlong	result1, fp
0fe0c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
0fe0c     0C 4E 85 F1 | 	sub	fp, #12
0fe10     A7 20 02 FB | 	rdlong	local02, fp
0fe14     0C 4E 85 F1 | 	sub	fp, #12
0fe18     00 04 00 FF 
0fe1c     00 20 56 F2 | 	cmps	local02, ##524288 wc
0fe20     7C 00 90 3D |  if_ae	jmp	#LR__1337
0fe24     14 4E 05 F1 | 	add	fp, #20
0fe28     A7 00 68 FC | 	wrlong	#0, fp
0fe2c     04 4E 05 F1 | 	add	fp, #4
0fe30     A7 26 02 FB | 	rdlong	local05, fp
0fe34     18 4E 85 F1 | 	sub	fp, #24
0fe38                 | LR__1336
0fe38     14 4E 05 F1 | 	add	fp, #20
0fe3c     A7 20 02 FB | 	rdlong	local02, fp
0fe40     14 4E 85 F1 | 	sub	fp, #20
0fe44     13 21 52 F2 | 	cmps	local02, local05 wc
0fe48     D8 00 90 3D |  if_ae	jmp	#LR__1340
0fe4c     0C 4E 05 F1 | 	add	fp, #12
0fe50     A7 12 02 FB | 	rdlong	arg01, fp
0fe54     04 4E 05 F1 | 	add	fp, #4
0fe58     A7 22 02 FB | 	rdlong	local03, fp
0fe5c     0A 22 66 F0 | 	shl	local03, #10
0fe60     11 13 02 F1 | 	add	arg01, local03
0fe64     04 4E 05 F1 | 	add	fp, #4
0fe68     A7 22 02 FB | 	rdlong	local03, fp
0fe6c     11 13 02 F1 | 	add	arg01, local03
0fe70     4E 00 00 FF 
0fe74     B4 E4 05 F1 | 	add	objptr, ##40116
0fe78     F2 22 02 F1 | 	add	local03, objptr
0fe7c     11 15 C2 FA | 	rdbyte	arg02, local03
0fe80     09 15 42 FC | 	wrbyte	arg02, arg01
0fe84     4E 00 00 FF 
0fe88     B4 E4 85 F1 | 	sub	objptr, ##40116
0fe8c     A7 22 02 FB | 	rdlong	local03, fp
0fe90     01 22 06 F1 | 	add	local03, #1
0fe94     A7 22 62 FC | 	wrlong	local03, fp
0fe98     14 4E 85 F1 | 	sub	fp, #20
0fe9c     98 FF 9F FD | 	jmp	#LR__1336
0fea0                 | LR__1337
0fea0     14 4E 05 F1 | 	add	fp, #20
0fea4     A7 00 68 FC | 	wrlong	#0, fp
0fea8     04 4E 05 F1 | 	add	fp, #4
0feac     A7 28 02 FB | 	rdlong	local06, fp
0feb0     18 4E 85 F1 | 	sub	fp, #24
0feb4                 | LR__1338
0feb4     14 4E 05 F1 | 	add	fp, #20
0feb8     A7 20 02 FB | 	rdlong	local02, fp
0febc     14 4E 85 F1 | 	sub	fp, #20
0fec0     14 21 52 F2 | 	cmps	local02, local06 wc
0fec4     5C 00 90 3D |  if_ae	jmp	#LR__1339
0fec8     0C 4E 05 F1 | 	add	fp, #12
0fecc     A7 12 02 FB | 	rdlong	arg01, fp
0fed0     04 4E 05 F1 | 	add	fp, #4
0fed4     A7 26 02 FB | 	rdlong	local05, fp
0fed8     0A 26 66 F0 | 	shl	local05, #10
0fedc     13 13 02 F1 | 	add	arg01, local05
0fee0     04 4E 05 F1 | 	add	fp, #4
0fee4     A7 26 02 FB | 	rdlong	local05, fp
0fee8     13 13 02 F1 | 	add	arg01, local05
0feec     14 4E 85 F1 | 	sub	fp, #20
0fef0     4E 00 00 FF 
0fef4     B4 E4 05 F1 | 	add	objptr, ##40116
0fef8     F2 26 02 F1 | 	add	local05, objptr
0fefc     13 15 C2 FA | 	rdbyte	arg02, local05
0ff00     4E 00 00 FF 
0ff04     B4 E4 85 F1 | 	sub	objptr, ##40116
0ff08     A4 D5 B0 FD | 	call	#_pspoke
0ff0c     14 4E 05 F1 | 	add	fp, #20
0ff10     A7 26 02 FB | 	rdlong	local05, fp
0ff14     01 26 06 F1 | 	add	local05, #1
0ff18     A7 26 62 FC | 	wrlong	local05, fp
0ff1c     14 4E 85 F1 | 	sub	fp, #20
0ff20     90 FF 9F FD | 	jmp	#LR__1338
0ff24                 | LR__1339
0ff24                 | LR__1340
0ff24     14 4E 05 F1 | 	add	fp, #20
0ff28     A7 28 02 FB | 	rdlong	local06, fp
0ff2c     14 23 02 F6 | 	mov	local03, local06
0ff30     02 22 66 F0 | 	shl	local03, #2
0ff34     50 00 00 FF 
0ff38     C4 E4 05 F1 | 	add	objptr, ##41156
0ff3c     F2 22 02 F1 | 	add	local03, objptr
0ff40     02 28 66 F0 | 	shl	local06, #2
0ff44     F2 28 02 F1 | 	add	local06, objptr
0ff48     14 29 02 FB | 	rdlong	local06, local06
0ff4c     04 4E 05 F1 | 	add	fp, #4
0ff50     A7 26 02 FB | 	rdlong	local05, fp
0ff54     13 29 02 F1 | 	add	local06, local05
0ff58     11 29 62 FC | 	wrlong	local06, local03
0ff5c     08 4E 85 F1 | 	sub	fp, #8
0ff60     A7 28 02 FB | 	rdlong	local06, fp
0ff64     01 28 06 F1 | 	add	local06, #1
0ff68     A7 28 62 FC | 	wrlong	local06, fp
0ff6c     10 4E 85 F1 | 	sub	fp, #16
0ff70     50 00 00 FF 
0ff74     C4 E4 85 F1 | 	sub	objptr, ##41156
0ff78     34 FE 9F FD | 	jmp	#LR__1335
0ff7c                 | LR__1341
0ff7c                 | '   for i=0 to  amount/1024
0ff7c     10 4E 05 F1 | 	add	fp, #16
0ff80     A7 00 68 FC | 	wrlong	#0, fp
0ff84     08 4E 85 F1 | 	sub	fp, #8
0ff88     A7 22 02 FB | 	rdlong	local03, fp
0ff8c     08 4E 85 F1 | 	sub	fp, #8
0ff90     11 2B 52 F6 | 	abs	local07, local03 wc
0ff94     0A 2A 46 F0 | 	shr	local07, #10
0ff98     15 2B 82 F6 | 	negc	local07, local07
0ff9c     01 2A 06 F1 | 	add	local07, #1
0ffa0                 | LR__1342
0ffa0     10 4E 05 F1 | 	add	fp, #16
0ffa4     A7 22 02 FB | 	rdlong	local03, fp
0ffa8     10 4E 85 F1 | 	sub	fp, #16
0ffac     15 23 52 F2 | 	cmps	local03, local07 wc
0ffb0     AC 01 90 3D |  if_ae	jmp	#LR__1348
0ffb4                 | '     get #channel,,block(0),amount,r
0ffb4     04 4E 05 F1 | 	add	fp, #4
0ffb8     A7 12 02 FB | 	rdlong	arg01, fp
0ffbc     4E 00 00 FF 
0ffc0     B4 E4 05 F1 | 	add	objptr, ##40116
0ffc4     F2 16 02 F6 | 	mov	arg03, objptr
0ffc8     4E 00 00 FF 
0ffcc     B4 E4 85 F1 | 	sub	objptr, ##40116
0ffd0     04 4E 05 F1 | 	add	fp, #4
0ffd4     A7 18 02 FB | 	rdlong	arg04, fp
0ffd8     08 4E 85 F1 | 	sub	fp, #8
0ffdc     00 14 06 F6 | 	mov	arg02, #0
0ffe0     01 1A 06 F6 | 	mov	arg05, #1
0ffe4     D4 16 B1 FD | 	call	#__system___basic_get
0ffe8     18 4E 05 F1 | 	add	fp, #24
0ffec     A7 FA 61 FC | 	wrlong	result1, fp
0fff0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
0fff0     0C 4E 85 F1 | 	sub	fp, #12
0fff4     A7 20 02 FB | 	rdlong	local02, fp
0fff8     0C 4E 85 F1 | 	sub	fp, #12
0fffc     00 04 00 FF 
10000     00 20 56 F2 | 	cmps	local02, ##524288 wc
10004     7C 00 90 3D |  if_ae	jmp	#LR__1344
10008     14 4E 05 F1 | 	add	fp, #20
1000c     A7 00 68 FC | 	wrlong	#0, fp
10010     04 4E 05 F1 | 	add	fp, #4
10014     A7 2C 02 FB | 	rdlong	local08, fp
10018     18 4E 85 F1 | 	sub	fp, #24
1001c                 | LR__1343
1001c     14 4E 05 F1 | 	add	fp, #20
10020     A7 20 02 FB | 	rdlong	local02, fp
10024     14 4E 85 F1 | 	sub	fp, #20
10028     16 21 52 F2 | 	cmps	local02, local08 wc
1002c     D8 00 90 3D |  if_ae	jmp	#LR__1347
10030     0C 4E 05 F1 | 	add	fp, #12
10034     A7 12 02 FB | 	rdlong	arg01, fp
10038     04 4E 05 F1 | 	add	fp, #4
1003c     A7 28 02 FB | 	rdlong	local06, fp
10040     0A 28 66 F0 | 	shl	local06, #10
10044     14 13 02 F1 | 	add	arg01, local06
10048     04 4E 05 F1 | 	add	fp, #4
1004c     A7 28 02 FB | 	rdlong	local06, fp
10050     14 13 02 F1 | 	add	arg01, local06
10054     4E 00 00 FF 
10058     B4 E4 05 F1 | 	add	objptr, ##40116
1005c     F2 28 02 F1 | 	add	local06, objptr
10060     14 15 C2 FA | 	rdbyte	arg02, local06
10064     09 15 42 FC | 	wrbyte	arg02, arg01
10068     4E 00 00 FF 
1006c     B4 E4 85 F1 | 	sub	objptr, ##40116
10070     A7 28 02 FB | 	rdlong	local06, fp
10074     01 28 06 F1 | 	add	local06, #1
10078     A7 28 62 FC | 	wrlong	local06, fp
1007c     14 4E 85 F1 | 	sub	fp, #20
10080     98 FF 9F FD | 	jmp	#LR__1343
10084                 | LR__1344
10084     14 4E 05 F1 | 	add	fp, #20
10088     A7 00 68 FC | 	wrlong	#0, fp
1008c     04 4E 05 F1 | 	add	fp, #4
10090     A7 2E 02 FB | 	rdlong	local09, fp
10094     18 4E 85 F1 | 	sub	fp, #24
10098                 | LR__1345
10098     14 4E 05 F1 | 	add	fp, #20
1009c     A7 20 02 FB | 	rdlong	local02, fp
100a0     14 4E 85 F1 | 	sub	fp, #20
100a4     17 21 52 F2 | 	cmps	local02, local09 wc
100a8     5C 00 90 3D |  if_ae	jmp	#LR__1346
100ac     0C 4E 05 F1 | 	add	fp, #12
100b0     A7 12 02 FB | 	rdlong	arg01, fp
100b4     04 4E 05 F1 | 	add	fp, #4
100b8     A7 2C 02 FB | 	rdlong	local08, fp
100bc     0A 2C 66 F0 | 	shl	local08, #10
100c0     16 13 02 F1 | 	add	arg01, local08
100c4     04 4E 05 F1 | 	add	fp, #4
100c8     A7 2C 02 FB | 	rdlong	local08, fp
100cc     16 13 02 F1 | 	add	arg01, local08
100d0     14 4E 85 F1 | 	sub	fp, #20
100d4     4E 00 00 FF 
100d8     B4 E4 05 F1 | 	add	objptr, ##40116
100dc     F2 2C 02 F1 | 	add	local08, objptr
100e0     16 15 C2 FA | 	rdbyte	arg02, local08
100e4     4E 00 00 FF 
100e8     B4 E4 85 F1 | 	sub	objptr, ##40116
100ec     C0 D3 B0 FD | 	call	#_pspoke
100f0     14 4E 05 F1 | 	add	fp, #20
100f4     A7 2C 02 FB | 	rdlong	local08, fp
100f8     01 2C 06 F1 | 	add	local08, #1
100fc     A7 2C 62 FC | 	wrlong	local08, fp
10100     14 4E 85 F1 | 	sub	fp, #20
10104     90 FF 9F FD | 	jmp	#LR__1345
10108                 | LR__1346
10108                 | LR__1347
10108     14 4E 05 F1 | 	add	fp, #20
1010c     A7 2E 02 FB | 	rdlong	local09, fp
10110     17 29 02 F6 | 	mov	local06, local09
10114     02 28 66 F0 | 	shl	local06, #2
10118     50 00 00 FF 
1011c     C4 E4 05 F1 | 	add	objptr, ##41156
10120     F2 28 02 F1 | 	add	local06, objptr
10124     02 2E 66 F0 | 	shl	local09, #2
10128     F2 2E 02 F1 | 	add	local09, objptr
1012c     17 2F 02 FB | 	rdlong	local09, local09
10130     04 4E 05 F1 | 	add	fp, #4
10134     A7 2C 02 FB | 	rdlong	local08, fp
10138     16 2F 02 F1 | 	add	local09, local08
1013c     14 2F 62 FC | 	wrlong	local09, local06
10140     08 4E 85 F1 | 	sub	fp, #8
10144     A7 2E 02 FB | 	rdlong	local09, fp
10148     01 2E 06 F1 | 	add	local09, #1
1014c     A7 2E 62 FC | 	wrlong	local09, fp
10150     10 4E 85 F1 | 	sub	fp, #16
10154     50 00 00 FF 
10158     C4 E4 85 F1 | 	sub	objptr, ##41156
1015c     40 FE 9F FD | 	jmp	#LR__1342
10160                 | LR__1348
10160                 | LR__1349
10160     A7 F0 03 F6 | 	mov	ptra, fp
10164     B2 00 A0 FD | 	call	#popregs_
10168                 | _do_get_ret
10168     2D 00 64 FD | 	ret
1016c                 | 
1016c                 | ' 
1016c                 | ' '-------------------- getenvsustain
1016c                 | ' 
1016c                 | ' sub do_getenvsustain
1016c                 | _do_getenvsustain
1016c     01 4A 05 F6 | 	mov	COUNT_, #1
10170     A8 00 A0 FD | 	call	#pushregs_
10174     10 F0 07 F1 | 	add	ptra, #16
10178     4A 00 00 FF 
1017c     80 E4 05 F1 | 	add	objptr, ##38016
10180     F2 1E 02 FB | 	rdlong	local01, objptr
10184     0F 17 02 F6 | 	mov	arg03, local01
10188     01 16 66 F0 | 	shl	arg03, #1
1018c     0F 17 02 F1 | 	add	arg03, local01
10190     02 16 66 F0 | 	shl	arg03, #2
10194     03 00 00 FF 
10198     04 E4 85 F1 | 	sub	objptr, ##1540
1019c     F2 16 02 F1 | 	add	arg03, objptr
101a0     0B 17 02 FB | 	rdlong	arg03, arg03
101a4     0C 4E 05 F1 | 	add	fp, #12
101a8     A7 16 62 FC | 	wrlong	arg03, fp
101ac                 | ' 
101ac                 | ' numpar=compiledline(lineptr_e).result.uresult
101ac                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
101ac     0C 4E 85 F1 | 	sub	fp, #12
101b0     02 16 16 F2 | 	cmp	arg03, #2 wc
101b4     47 00 00 FF 
101b8     7C E4 85 F1 | 	sub	objptr, ##36476
101bc     0C 4E 05 C1 |  if_b	add	fp, #12
101c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
101c4     0C 4E 85 C1 |  if_b	sub	fp, #12
101c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
101cc     00 12 06 F6 | 	mov	arg01, #0
101d0     DC 60 B1 FD | 	call	#__system___getiolock_0541
101d4     FD 12 02 F6 | 	mov	arg01, result1
101d8     70 06 B1 FD | 	call	#__system___lockmem
101dc     84 01 00 FF 
101e0     89 14 06 F6 | 	mov	arg02, ##@LR__5450
101e4     00 12 06 F6 | 	mov	arg01, #0
101e8     00 16 06 F6 | 	mov	arg03, #0
101ec     50 13 B1 FD | 	call	#__system___basic_print_string
101f0     00 12 06 F6 | 	mov	arg01, #0
101f4     B8 60 B1 FD | 	call	#__system___getiolock_0541
101f8     FD 00 68 FC | 	wrlong	#0, result1
101fc     27 12 06 F6 | 	mov	arg01, #39
10200     B8 D0 B0 FD | 	call	#_printerror
10204     64 00 90 FD | 	jmp	#LR__1351
10208                 | LR__1350
10208     90 B1 BF FD | 	call	#_pop
1020c     FD 1E 02 F6 | 	mov	local01, result1
10210     FE 16 02 F6 | 	mov	arg03, result2
10214     A7 1E 62 FC | 	wrlong	local01, fp
10218     04 4E 05 F1 | 	add	fp, #4
1021c     A7 16 62 FC | 	wrlong	arg03, fp
10220     04 4E 05 F1 | 	add	fp, #4
10224     A7 FE 61 FC | 	wrlong	result3, fp
10228     08 4E 85 F1 | 	sub	fp, #8
1022c     A7 12 02 F6 | 	mov	arg01, fp
10230     4C B3 BF FD | 	call	#_converttoint
10234     FD 1E 02 F6 | 	mov	local01, result1
10238     01 1E 66 F0 | 	shl	local01, #1
1023c     51 00 00 FF 
10240     C8 E5 05 F1 | 	add	objptr, ##41928
10244     F2 1E 02 F1 | 	add	local01, objptr
10248     0F 1F E2 FA | 	rdword	local01, local01
1024c     A7 1E 62 FC | 	wrlong	local01, fp
10250     08 4E 05 F1 | 	add	fp, #8
10254     A7 38 68 FC | 	wrlong	#28, fp
10258     08 4E 85 F1 | 	sub	fp, #8
1025c     A7 12 02 F6 | 	mov	arg01, fp
10260     51 00 00 FF 
10264     C8 E5 85 F1 | 	sub	objptr, ##41928
10268     C8 B1 BF FD | 	call	#_push
1026c                 | LR__1351
1026c     A7 F0 03 F6 | 	mov	ptra, fp
10270     B2 00 A0 FD | 	call	#popregs_
10274                 | _do_getenvsustain_ret
10274     2D 00 64 FD | 	ret
10278                 | 
10278                 | ' 
10278                 | ' '-------------------- getnotevalue
10278                 | ' 
10278                 | ' sub do_getnotevalue
10278                 | _do_getnotevalue
10278     01 4A 05 F6 | 	mov	COUNT_, #1
1027c     A8 00 A0 FD | 	call	#pushregs_
10280     1C F0 07 F1 | 	add	ptra, #28
10284     14 B1 BF FD | 	call	#_pop
10288     FF 14 02 F6 | 	mov	arg02, result3
1028c     10 4E 05 F1 | 	add	fp, #16
10290     A7 FA 61 FC | 	wrlong	result1, fp
10294     04 4E 05 F1 | 	add	fp, #4
10298     A7 FC 61 FC | 	wrlong	result2, fp
1029c     04 4E 05 F1 | 	add	fp, #4
102a0     A7 14 62 FC | 	wrlong	arg02, fp
102a4     08 4E 85 F1 | 	sub	fp, #8
102a8     A7 12 02 F6 | 	mov	arg01, fp
102ac     10 4E 85 F1 | 	sub	fp, #16
102b0     CC B2 BF FD | 	call	#_converttoint
102b4     FD 14 52 F6 | 	abs	arg02, result1 wc
102b8     0C 14 16 FD | 	qdiv	arg02, #12
102bc     0C 4E 05 F1 | 	add	fp, #12
102c0     A7 FA 61 FC | 	wrlong	result1, fp
102c4     14 00 00 FF 
102c8     D8 E4 05 F1 | 	add	objptr, ##10456
102cc     08 4E 85 F1 | 	sub	fp, #8
102d0     19 14 62 FD | 	getqy	arg02
102d4     0A 15 82 F6 | 	negc	arg02, arg02
102d8     02 14 66 F0 | 	shl	arg02, #2
102dc     F2 14 02 F1 | 	add	arg02, objptr
102e0     0A 15 02 FB | 	rdlong	arg02, arg02
102e4     A7 14 62 FC | 	wrlong	arg02, fp
102e8     08 4E 05 F1 | 	add	fp, #8
102ec     A7 14 02 FB | 	rdlong	arg02, fp
102f0     0A 15 52 F6 | 	abs	arg02, arg02 wc
102f4     0C 14 16 FD | 	qdiv	arg02, #12
102f8     0C 4E 85 F1 | 	sub	fp, #12
102fc     14 00 00 FF 
10300     D8 E4 85 F1 | 	sub	objptr, ##10456
10304     18 14 62 FD | 	getqx	arg02
10308     0A 13 82 F6 | 	negc	arg01, arg02
1030c     09 13 52 F6 | 	abs	arg01, arg01 wc
10310     1F 1E C6 C9 |  if_b	decod	local01, #31
10314     00 1E 06 36 |  if_ae	mov	local01, #0
10318     E0 2C B1 FD | 	call	#__system___float_fromuns
1031c     0F FB 61 F5 | 	xor	result1, local01
10320     08 4E 05 F1 | 	add	fp, #8
10324     A7 FA 61 FC | 	wrlong	result1, fp
10328     FD 14 02 F6 | 	mov	arg02, result1
1032c     08 4E 85 F1 | 	sub	fp, #8
10330     1E 12 C6 F9 | 	decod	arg01, #30
10334     D0 3F B1 FD | 	call	#__system____builtin_powf
10338     FD 12 02 F6 | 	mov	arg01, result1
1033c     04 4E 05 F1 | 	add	fp, #4
10340     A7 14 02 FB | 	rdlong	arg02, fp
10344     04 4E 85 F1 | 	sub	fp, #4
10348     B4 30 B1 FD | 	call	#__system___float_mul
1034c     A7 FA 61 FC | 	wrlong	result1, fp
10350     10 4E 05 F1 | 	add	fp, #16
10354     A7 FA 61 FC | 	wrlong	result1, fp
10358     08 4E 05 F1 | 	add	fp, #8
1035c     A7 3C 68 FC | 	wrlong	#30, fp
10360     08 4E 85 F1 | 	sub	fp, #8
10364     A7 12 02 F6 | 	mov	arg01, fp
10368     10 4E 85 F1 | 	sub	fp, #16
1036c     C4 B0 BF FD | 	call	#_push
10370     A7 F0 03 F6 | 	mov	ptra, fp
10374     B2 00 A0 FD | 	call	#popregs_
10378                 | _do_getnotevalue_ret
10378     2D 00 64 FD | 	ret
1037c                 | 
1037c                 | ' 
1037c                 | ' '-------------------- getpixel
1037c                 | ' 
1037c                 | ' sub do_getpixel
1037c                 | _do_getpixel
1037c     00 4A 05 F6 | 	mov	COUNT_, #0
10380     A8 00 A0 FD | 	call	#pushregs_
10384     24 F0 07 F1 | 	add	ptra, #36
10388     4A 00 00 FF 
1038c     80 E4 05 F1 | 	add	objptr, ##38016
10390     F2 16 02 FB | 	rdlong	arg03, objptr
10394     0B 15 02 F6 | 	mov	arg02, arg03
10398     01 14 66 F0 | 	shl	arg02, #1
1039c     0B 15 02 F1 | 	add	arg02, arg03
103a0     02 14 66 F0 | 	shl	arg02, #2
103a4     03 00 00 FF 
103a8     04 E4 85 F1 | 	sub	objptr, ##1540
103ac     F2 14 02 F1 | 	add	arg02, objptr
103b0     0A 17 02 FB | 	rdlong	arg03, arg02
103b4     18 4E 05 F1 | 	add	fp, #24
103b8     A7 16 62 FC | 	wrlong	arg03, fp
103bc                 | ' 
103bc                 | ' numpar=compiledline(lineptr_e).result.uresult
103bc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
103bc     18 4E 85 F1 | 	sub	fp, #24
103c0     02 16 0E F2 | 	cmp	arg03, #2 wz
103c4     47 00 00 FF 
103c8     7C E4 85 F1 | 	sub	objptr, ##36476
103cc     3C 00 90 AD |  if_e	jmp	#LR__1360
103d0     00 12 06 F6 | 	mov	arg01, #0
103d4     D8 5E B1 FD | 	call	#__system___getiolock_0541
103d8     FD 12 02 F6 | 	mov	arg01, result1
103dc     6C 04 B1 FD | 	call	#__system___lockmem
103e0     84 01 00 FF 
103e4     99 14 06 F6 | 	mov	arg02, ##@LR__5451
103e8     00 12 06 F6 | 	mov	arg01, #0
103ec     00 16 06 F6 | 	mov	arg03, #0
103f0     4C 11 B1 FD | 	call	#__system___basic_print_string
103f4     00 12 06 F6 | 	mov	arg01, #0
103f8     B4 5E B1 FD | 	call	#__system___getiolock_0541
103fc     FD 00 68 FC | 	wrlong	#0, result1
10400     27 12 06 F6 | 	mov	arg01, #39
10404     B4 CE B0 FD | 	call	#_printerror
10408     B4 00 90 FD | 	jmp	#LR__1361
1040c                 | LR__1360
1040c     8C AF BF FD | 	call	#_pop
10410     FD 16 02 F6 | 	mov	arg03, result1
10414     FE 14 02 F6 | 	mov	arg02, result2
10418     FF 12 02 F6 | 	mov	arg01, result3
1041c     0C 4E 05 F1 | 	add	fp, #12
10420     A7 16 62 FC | 	wrlong	arg03, fp
10424     04 4E 05 F1 | 	add	fp, #4
10428     A7 14 62 FC | 	wrlong	arg02, fp
1042c     04 4E 05 F1 | 	add	fp, #4
10430     A7 12 62 FC | 	wrlong	arg01, fp
10434     14 4E 85 F1 | 	sub	fp, #20
10438     60 AF BF FD | 	call	#_pop
1043c     FF 16 02 F6 | 	mov	arg03, result3
10440     A7 FA 61 FC | 	wrlong	result1, fp
10444     04 4E 05 F1 | 	add	fp, #4
10448     A7 FC 61 FC | 	wrlong	result2, fp
1044c     04 4E 05 F1 | 	add	fp, #4
10450     A7 16 62 FC | 	wrlong	arg03, fp
10454     08 4E 85 F1 | 	sub	fp, #8
10458     A7 12 02 F6 | 	mov	arg01, fp
1045c     20 B1 BF FD | 	call	#_converttoint
10460     1C 4E 05 F1 | 	add	fp, #28
10464     A7 FA 61 FC | 	wrlong	result1, fp
10468     10 4E 85 F1 | 	sub	fp, #16
1046c     A7 12 02 F6 | 	mov	arg01, fp
10470     0C 4E 85 F1 | 	sub	fp, #12
10474     08 B1 BF FD | 	call	#_converttoint
10478     FD 16 02 F6 | 	mov	arg03, result1
1047c     20 4E 05 F1 | 	add	fp, #32
10480     A7 16 62 FC | 	wrlong	arg03, fp
10484     F2 12 02 FB | 	rdlong	arg01, objptr
10488     04 4E 85 F1 | 	sub	fp, #4
1048c     A7 FE 01 FB | 	rdlong	result3, fp
10490     FF 12 02 F1 | 	add	arg01, result3
10494     1C 4E 85 F1 | 	sub	fp, #28
10498     0A 16 66 F0 | 	shl	arg03, #10
1049c     0B 13 02 F1 | 	add	arg01, arg03
104a0     54 D0 B0 FD | 	call	#_pspeek
104a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
104a8     A7 FA 61 FC | 	wrlong	result1, fp
104ac     08 4E 05 F1 | 	add	fp, #8
104b0     A7 3A 68 FC | 	wrlong	#29, fp
104b4     08 4E 85 F1 | 	sub	fp, #8
104b8     A7 12 02 F6 | 	mov	arg01, fp
104bc     74 AF BF FD | 	call	#_push
104c0                 | LR__1361
104c0     A7 F0 03 F6 | 	mov	ptra, fp
104c4     B2 00 A0 FD | 	call	#popregs_
104c8                 | _do_getpixel_ret
104c8     2D 00 64 FD | 	ret
104cc                 | 
104cc                 | ' 
104cc                 | ' '-------------------- gettime
104cc                 | ' 
104cc                 | ' sub do_gettime
104cc                 | _do_gettime
104cc     02 4A 05 F6 | 	mov	COUNT_, #2
104d0     A8 00 A0 FD | 	call	#pushregs_
104d4     14 F0 07 F1 | 	add	ptra, #20
104d8                 | ' 
104d8                 | ' const asm 
104d8     1A 1E 72 FD | 	getct	local01 wc
104dc     1A 20 62 FD | 	getct	local02
104e0                 | ' return hi1, lo1
104e0     10 FD 01 F6 | 	mov	result2, local02
104e4     A7 1E 62 FC | 	wrlong	local01, fp
104e8     04 4E 05 F1 | 	add	fp, #4
104ec     A7 FC 61 FC | 	wrlong	result2, fp
104f0     0C 4E 05 F1 | 	add	fp, #12
104f4     A7 3A 68 FC | 	wrlong	#29, fp
104f8     0C 4E 85 F1 | 	sub	fp, #12
104fc     A7 12 02 FB | 	rdlong	arg01, fp
10500     04 4E 05 F1 | 	add	fp, #4
10504     A7 12 62 FC | 	wrlong	arg01, fp
10508     08 4E 85 F1 | 	sub	fp, #8
1050c     A7 12 02 FB | 	rdlong	arg01, fp
10510     0C 4E 05 F1 | 	add	fp, #12
10514     A7 12 62 FC | 	wrlong	arg01, fp
10518     04 4E 85 F1 | 	sub	fp, #4
1051c     A7 12 02 F6 | 	mov	arg01, fp
10520     08 4E 85 F1 | 	sub	fp, #8
10524     0C AF BF FD | 	call	#_push
10528     A7 F0 03 F6 | 	mov	ptra, fp
1052c     B2 00 A0 FD | 	call	#popregs_
10530                 | _do_gettime_ret
10530     2D 00 64 FD | 	ret
10534                 | 
10534                 | ' 
10534                 | ' '-------------------- gosub
10534                 | ' 
10534                 | ' sub do_gosub()
10534                 | _do_gosub
10534     50 00 00 FF 
10538     0C E5 05 F1 | 	add	objptr, ##41228
1053c     F2 00 02 FB | 	rdlong	_var01, objptr
10540     01 00 06 F1 | 	add	_var01, #1
10544     F2 00 62 FC | 	wrlong	_var01, objptr
10548                 | ' gosubtop+=1
10548                 | ' if compiledline(lineptr_e+1).result_type=token_end then
10548     06 00 00 FF 
1054c     8C E4 85 F1 | 	sub	objptr, ##3212
10550     F2 00 02 FB | 	rdlong	_var01, objptr
10554     01 00 06 F1 | 	add	_var01, #1
10558     00 03 02 F6 | 	mov	_var02, _var01
1055c     01 02 66 F0 | 	shl	_var02, #1
10560     00 03 02 F1 | 	add	_var02, _var01
10564     02 02 66 F0 | 	shl	_var02, #2
10568     03 00 00 FF 
1056c     04 E4 85 F1 | 	sub	objptr, ##1540
10570     F2 02 02 F1 | 	add	_var02, objptr
10574     08 02 06 F1 | 	add	_var02, #8
10578     01 03 02 FB | 	rdlong	_var02, _var02
1057c     FE 03 0E F2 | 	cmp	_var02, #510 wz
10580     47 00 00 FF 
10584     7C E4 85 F1 | 	sub	objptr, ##36476
10588     58 00 90 5D |  if_ne	jmp	#LR__1370
1058c     50 00 00 FF 
10590     0C E5 05 F1 | 	add	objptr, ##41228
10594     F2 02 02 FB | 	rdlong	_var02, objptr
10598     03 02 66 F0 | 	shl	_var02, #3
1059c     03 00 00 FF 
105a0     60 E5 85 F1 | 	sub	objptr, ##1888
105a4     F2 02 02 F1 | 	add	_var02, objptr
105a8     03 00 00 FF 
105ac     0C E5 05 F1 | 	add	objptr, ##1804
105b0     F2 00 02 FB | 	rdlong	_var01, objptr
105b4     01 01 62 FC | 	wrlong	_var01, _var02
105b8     54 E4 05 F1 | 	add	objptr, #84
105bc     F2 02 02 FB | 	rdlong	_var02, objptr
105c0     03 02 66 F0 | 	shl	_var02, #3
105c4     03 00 00 FF 
105c8     60 E5 85 F1 | 	sub	objptr, ##1888
105cc     F2 02 02 F1 | 	add	_var02, objptr
105d0     04 02 06 F1 | 	add	_var02, #4
105d4     01 01 68 FC | 	wrlong	#0, _var02
105d8     4C 00 00 FF 
105dc     AC E5 85 F1 | 	sub	objptr, ##39340
105e0     64 00 90 FD | 	jmp	#LR__1371
105e4                 | LR__1370
105e4     50 00 00 FF 
105e8     0C E5 05 F1 | 	add	objptr, ##41228
105ec     F2 02 02 FB | 	rdlong	_var02, objptr
105f0     03 02 66 F0 | 	shl	_var02, #3
105f4     03 00 00 FF 
105f8     60 E5 85 F1 | 	sub	objptr, ##1888
105fc     F2 02 02 F1 | 	add	_var02, objptr
10600     03 00 00 FF 
10604     14 E5 05 F1 | 	add	objptr, ##1812
10608     F2 00 02 FB | 	rdlong	_var01, objptr
1060c     01 01 62 FC | 	wrlong	_var01, _var02
10610     4C E4 05 F1 | 	add	objptr, #76
10614     F2 02 02 FB | 	rdlong	_var02, objptr
10618     03 02 66 F0 | 	shl	_var02, #3
1061c     03 00 00 FF 
10620     60 E5 85 F1 | 	sub	objptr, ##1888
10624     F2 02 02 F1 | 	add	_var02, objptr
10628     02 00 00 FF 
1062c     2C E5 85 F1 | 	sub	objptr, ##1324
10630     F2 00 02 FB | 	rdlong	_var01, objptr
10634     4A 00 00 FF 
10638     80 E4 85 F1 | 	sub	objptr, ##38016
1063c     02 00 06 F1 | 	add	_var01, #2
10640     04 02 06 F1 | 	add	_var02, #4
10644     01 01 62 FC | 	wrlong	_var01, _var02
10648                 | LR__1371
10648                 | _do_gosub_ret
10648     2D 00 64 FD | 	ret
1064c                 | 
1064c                 | ' 
1064c                 | ' '--------------------- goto
1064c                 | ' 
1064c                 | ' '------- fast goto
1064c                 | ' 
1064c                 | ' sub do_fast_goto
1064c                 | _do_fast_goto
1064c     02 4A 05 F6 | 	mov	COUNT_, #2
10650     A8 00 A0 FD | 	call	#pushregs_
10654                 | _do_fast_goto_enter
10654     4A 00 00 FF 
10658     80 E4 05 F1 | 	add	objptr, ##38016
1065c     F2 12 02 FB | 	rdlong	arg01, objptr
10660     09 1F 02 F6 | 	mov	local01, arg01
10664     01 1E 66 F0 | 	shl	local01, #1
10668     09 1F 02 F1 | 	add	local01, arg01
1066c     02 1E 66 F0 | 	shl	local01, #2
10670     03 00 00 FF 
10674     04 E4 85 F1 | 	sub	objptr, ##1540
10678     F2 1E 02 F1 | 	add	local01, objptr
1067c     0F 21 02 FB | 	rdlong	local02, local01
10680     10 13 02 F6 | 	mov	arg01, local02
10684     47 00 00 FF 
10688     7C E4 85 F1 | 	sub	objptr, ##36476
1068c     C0 CE B0 FD | 	call	#_pslpeek
10690     FD 12 02 F6 | 	mov	arg01, result1
10694                 | ' 
10694                 | ' testptr=compiledline(lineptr_e).result.uresult
10694                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
10694                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
10694     4A 00 00 FF 
10698     80 E4 05 F1 | 	add	objptr, ##38016
1069c     F2 FA 01 FB | 	rdlong	result1, objptr
106a0     FD 1E 02 F6 | 	mov	local01, result1
106a4     01 1E 66 F0 | 	shl	local01, #1
106a8     FD 1E 02 F1 | 	add	local01, result1
106ac     02 1E 66 F0 | 	shl	local01, #2
106b0     03 00 00 FF 
106b4     04 E4 85 F1 | 	sub	objptr, ##1540
106b8     F2 1E 02 F1 | 	add	local01, objptr
106bc     04 1E 06 F1 | 	add	local01, #4
106c0     0F 1F 02 FB | 	rdlong	local01, local01
106c4     0F 13 0A F2 | 	cmp	arg01, local01 wz
106c8     47 00 00 FF 
106cc     7C E4 85 F1 | 	sub	objptr, ##36476
106d0     58 00 90 5D |  if_ne	jmp	#LR__1380
106d4     50 00 00 FF 
106d8     B8 E4 05 F1 | 	add	objptr, ##41144
106dc     F2 20 62 FC | 	wrlong	local02, objptr
106e0     06 00 00 FF 
106e4     3C E4 85 F1 | 	sub	objptr, ##3132
106e8     F2 20 02 FB | 	rdlong	local02, objptr
106ec     01 20 86 F1 | 	sub	local02, #1
106f0     04 E4 05 F1 | 	add	objptr, #4
106f4     F2 20 62 FC | 	wrlong	local02, objptr
106f8                 | '   runptr=testptr
106f8                 | '   lineptr_e=lineptr-1
106f8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
106f8     06 00 00 FF 
106fc     84 E4 05 F1 | 	add	objptr, ##3204
10700     F2 20 02 FB | 	rdlong	local02, objptr
10704     50 00 00 FF 
10708     04 E5 85 F1 | 	sub	objptr, ##41220
1070c     FF FF 3F FF 
10710     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10714     50 00 00 AF 
10718     04 E5 05 A1 |  if_e	add	objptr, ##41220
1071c     F2 00 68 AC |  if_e	wrlong	#0, objptr
10720     50 00 00 AF 
10724     04 E5 85 A1 |  if_e	sub	objptr, ##41220
10728     04 00 90 FD | 	jmp	#LR__1381
1072c                 | LR__1380
1072c     0C 00 B0 FD | 	call	#_do_find_goto
10730                 | LR__1381
10730     A7 F0 03 F6 | 	mov	ptra, fp
10734     B2 00 A0 FD | 	call	#popregs_
10738                 | _do_fast_goto_ret
10738     2D 00 64 FD | 	ret
1073c                 | 
1073c                 | ' 
1073c                 | ' '------- find goto  
1073c                 | ' 
1073c                 | ' sub do_find_goto
1073c                 | _do_find_goto
1073c     03 4A 05 F6 | 	mov	COUNT_, #3
10740     A8 00 A0 FD | 	call	#pushregs_
10744     24 F0 07 F1 | 	add	ptra, #36
10748                 | _do_find_goto_enter
10748     4A 00 00 FF 
1074c     80 E4 05 F1 | 	add	objptr, ##38016
10750     F2 1E 02 FB | 	rdlong	local01, objptr
10754     0F 21 02 F6 | 	mov	local02, local01
10758     01 20 66 F0 | 	shl	local02, #1
1075c     0F 21 02 F1 | 	add	local02, local01
10760     02 20 66 F0 | 	shl	local02, #2
10764     03 00 00 FF 
10768     04 E4 85 F1 | 	sub	objptr, ##1540
1076c     F2 20 02 F1 | 	add	local02, objptr
10770     04 20 06 F1 | 	add	local02, #4
10774     10 21 02 FB | 	rdlong	local02, local02
10778     A7 20 62 FC | 	wrlong	local02, fp
1077c     03 00 00 FF 
10780     0C E4 05 F1 | 	add	objptr, ##1548
10784     F2 22 02 FB | 	rdlong	local03, objptr
10788     4A 00 00 FF 
1078c     88 E4 85 F1 | 	sub	objptr, ##38024
10790     04 4E 05 F1 | 	add	fp, #4
10794     A7 22 62 FC | 	wrlong	local03, fp
10798     04 4E 85 F1 | 	sub	fp, #4
1079c                 | ' 
1079c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
1079c                 | ' gotoptr=programstart
1079c                 | ' do
1079c                 | LR__1390
1079c     0C 4E 05 F1 | 	add	fp, #12
107a0     A7 12 02 F6 | 	mov	arg01, fp
107a4     08 4E 85 F1 | 	sub	fp, #8
107a8     A7 14 02 FB | 	rdlong	arg02, fp
107ac     04 4E 85 F1 | 	sub	fp, #4
107b0     18 16 06 F6 | 	mov	arg03, #24
107b4     0B 00 00 FF 
107b8     CC E4 05 F1 | 	add	objptr, ##5836
107bc     4C F4 B0 FD | 	call	#_psram_spin2_read1
107c0     0B 00 00 FF 
107c4     CC E4 85 F1 | 	sub	objptr, ##5836
107c8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
107c8                 | '   if gotoheader(0)<>$FFFFFFFF then
107c8     0C 4E 05 F1 | 	add	fp, #12
107cc     A7 22 02 FB | 	rdlong	local03, fp
107d0     0C 4E 85 F1 | 	sub	fp, #12
107d4     FF FF 7F FF 
107d8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
107dc     24 00 90 AD |  if_e	jmp	#LR__1391
107e0     04 4E 05 F1 | 	add	fp, #4
107e4     A7 22 02 FB | 	rdlong	local03, fp
107e8     04 4E 05 F1 | 	add	fp, #4
107ec     A7 22 62 FC | 	wrlong	local03, fp
107f0     18 4E 05 F1 | 	add	fp, #24
107f4     A7 22 02 FB | 	rdlong	local03, fp
107f8     1C 4E 85 F1 | 	sub	fp, #28
107fc     A7 22 62 FC | 	wrlong	local03, fp
10800     04 4E 85 F1 | 	sub	fp, #4
10804                 | LR__1391
10804     20 4E 05 F1 | 	add	fp, #32
10808     A7 22 02 FB | 	rdlong	local03, fp
1080c     20 4E 85 F1 | 	sub	fp, #32
10810     FF FF 3F FF 
10814     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
10818     0C 4E 05 51 |  if_ne	add	fp, #12
1081c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10820     0C 4E 85 51 |  if_ne	sub	fp, #12
10824     FF FF 7F 5F 
10828     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
1082c     18 00 90 AD |  if_e	jmp	#LR__1392
10830     0C 4E 05 F1 | 	add	fp, #12
10834     A7 22 02 FB | 	rdlong	local03, fp
10838     0C 4E 85 F1 | 	sub	fp, #12
1083c     A7 20 02 FB | 	rdlong	local02, fp
10840     10 23 0A F2 | 	cmp	local03, local02 wz
10844     54 FF 9F 5D |  if_ne	jmp	#LR__1390
10848                 | LR__1392
10848                 | ' 
10848                 | ' if gotoheader(0)=gotoline then
10848     0C 4E 05 F1 | 	add	fp, #12
1084c     A7 22 02 FB | 	rdlong	local03, fp
10850     0C 4E 85 F1 | 	sub	fp, #12
10854     A7 1E 02 FB | 	rdlong	local01, fp
10858     0F 23 0A F2 | 	cmp	local03, local01 wz
1085c     D8 00 90 5D |  if_ne	jmp	#LR__1393
10860     4A 00 00 FF 
10864     80 E4 05 F1 | 	add	objptr, ##38016
10868     F2 1E 02 FB | 	rdlong	local01, objptr
1086c     0F 21 02 F6 | 	mov	local02, local01
10870     01 20 66 F0 | 	shl	local02, #1
10874     0F 21 02 F1 | 	add	local02, local01
10878     02 20 66 F0 | 	shl	local02, #2
1087c     03 00 00 FF 
10880     04 E4 85 F1 | 	sub	objptr, ##1540
10884     F2 20 02 F1 | 	add	local02, objptr
10888     08 4E 05 F1 | 	add	fp, #8
1088c     A7 22 02 FB | 	rdlong	local03, fp
10890     10 23 62 FC | 	wrlong	local03, local02
10894     03 00 00 FF 
10898     04 E4 05 F1 | 	add	objptr, ##1540
1089c     F2 1E 02 FB | 	rdlong	local01, objptr
108a0     0F 21 02 F6 | 	mov	local02, local01
108a4     01 20 66 F0 | 	shl	local02, #1
108a8     0F 21 02 F1 | 	add	local02, local01
108ac     02 20 66 F0 | 	shl	local02, #2
108b0     03 00 00 FF 
108b4     04 E4 85 F1 | 	sub	objptr, ##1540
108b8     F2 20 02 F1 | 	add	local02, objptr
108bc     08 20 06 F1 | 	add	local02, #8
108c0     10 9D 68 FC | 	wrlong	#78, local02
108c4     03 00 00 FF 
108c8     04 E4 05 F1 | 	add	objptr, ##1540
108cc     F2 20 02 FB | 	rdlong	local02, objptr
108d0     10 13 02 F6 | 	mov	arg01, local02
108d4     01 12 66 F0 | 	shl	arg01, #1
108d8     10 13 02 F1 | 	add	arg01, local02
108dc     02 12 66 F0 | 	shl	arg01, #2
108e0     03 00 00 FF 
108e4     04 E4 85 F1 | 	sub	objptr, ##1540
108e8     F2 12 02 F1 | 	add	arg01, objptr
108ec     09 00 00 FF 
108f0     44 E4 05 F1 | 	add	objptr, ##4676
108f4     F2 14 02 FB | 	rdlong	arg02, objptr
108f8     02 22 06 F6 | 	mov	local03, #2
108fc     10 23 02 F1 | 	add	local03, local02
10900     0B 00 00 FF 
10904     5C E4 85 F1 | 	sub	objptr, ##5724
10908     F2 16 02 FB | 	rdlong	arg03, objptr
1090c     0B 23 02 FD | 	qmul	local03, arg03
10910     08 4E 85 F1 | 	sub	fp, #8
10914     39 00 00 FF 
10918     98 E5 85 F1 | 	sub	objptr, ##29592
1091c     18 22 62 FD | 	getqx	local03
10920     11 15 02 F1 | 	add	arg02, local03
10924     80 F3 B0 FD | 	call	#_psram_spin2_write
10928     0B 00 00 FF 
1092c     CC E4 85 F1 | 	sub	objptr, ##5836
10930     18 FD BF FD | 	call	#_do_fast_goto
10934     08 00 90 FD | 	jmp	#LR__1394
10938                 | LR__1393
10938     26 12 06 F6 | 	mov	arg01, #38
1093c     7C C9 B0 FD | 	call	#_printerror
10940                 | LR__1394
10940     A7 F0 03 F6 | 	mov	ptra, fp
10944     B2 00 A0 FD | 	call	#popregs_
10948                 | _do_find_goto_ret
10948     2D 00 64 FD | 	ret
1094c                 | 
1094c                 | ' 
1094c                 | ' '------- slow goto  
1094c                 | ' 
1094c                 | ' sub do_slow_goto
1094c                 | _do_slow_goto
1094c     02 4A 05 F6 | 	mov	COUNT_, #2
10950     A8 00 A0 FD | 	call	#pushregs_
10954     30 F0 07 F1 | 	add	ptra, #48
10958     40 AA BF FD | 	call	#_pop
1095c     FF 1E 02 F6 | 	mov	local01, result3
10960     24 4E 05 F1 | 	add	fp, #36
10964     A7 FA 61 FC | 	wrlong	result1, fp
10968     04 4E 05 F1 | 	add	fp, #4
1096c     A7 FC 61 FC | 	wrlong	result2, fp
10970     04 4E 05 F1 | 	add	fp, #4
10974     A7 1E 62 FC | 	wrlong	local01, fp
10978     08 4E 85 F1 | 	sub	fp, #8
1097c     A7 12 02 F6 | 	mov	arg01, fp
10980     24 4E 85 F1 | 	sub	fp, #36
10984     F8 AB BF FD | 	call	#_converttoint
10988     A7 FA 61 FC | 	wrlong	result1, fp
1098c     4A 00 00 FF 
10990     88 E4 05 F1 | 	add	objptr, ##38024
10994     F2 20 02 FB | 	rdlong	local02, objptr
10998     4A 00 00 FF 
1099c     88 E4 85 F1 | 	sub	objptr, ##38024
109a0     04 4E 05 F1 | 	add	fp, #4
109a4     A7 20 62 FC | 	wrlong	local02, fp
109a8     04 4E 85 F1 | 	sub	fp, #4
109ac                 | ' 
109ac                 | ' t1=pop() : gotoline=converttoint(t1)
109ac                 | ' gotoptr=programstart
109ac                 | ' do
109ac                 | LR__1400
109ac     0C 4E 05 F1 | 	add	fp, #12
109b0     A7 12 02 F6 | 	mov	arg01, fp
109b4     08 4E 85 F1 | 	sub	fp, #8
109b8     A7 14 02 FB | 	rdlong	arg02, fp
109bc     04 4E 85 F1 | 	sub	fp, #4
109c0     18 16 06 F6 | 	mov	arg03, #24
109c4     0B 00 00 FF 
109c8     CC E4 05 F1 | 	add	objptr, ##5836
109cc     3C F2 B0 FD | 	call	#_psram_spin2_read1
109d0     0B 00 00 FF 
109d4     CC E4 85 F1 | 	sub	objptr, ##5836
109d8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
109d8                 | '   if gotoheader(0)<>$FFFFFFFF then
109d8     0C 4E 05 F1 | 	add	fp, #12
109dc     A7 20 02 FB | 	rdlong	local02, fp
109e0     0C 4E 85 F1 | 	sub	fp, #12
109e4     FF FF 7F FF 
109e8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
109ec     24 00 90 AD |  if_e	jmp	#LR__1401
109f0     04 4E 05 F1 | 	add	fp, #4
109f4     A7 20 02 FB | 	rdlong	local02, fp
109f8     04 4E 05 F1 | 	add	fp, #4
109fc     A7 20 62 FC | 	wrlong	local02, fp
10a00     18 4E 05 F1 | 	add	fp, #24
10a04     A7 20 02 FB | 	rdlong	local02, fp
10a08     1C 4E 85 F1 | 	sub	fp, #28
10a0c     A7 20 62 FC | 	wrlong	local02, fp
10a10     04 4E 85 F1 | 	sub	fp, #4
10a14                 | LR__1401
10a14     20 4E 05 F1 | 	add	fp, #32
10a18     A7 20 02 FB | 	rdlong	local02, fp
10a1c     20 4E 85 F1 | 	sub	fp, #32
10a20     FF FF 3F FF 
10a24     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10a28     0C 4E 05 51 |  if_ne	add	fp, #12
10a2c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10a30     0C 4E 85 51 |  if_ne	sub	fp, #12
10a34     FF FF 7F 5F 
10a38     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10a3c     18 00 90 AD |  if_e	jmp	#LR__1402
10a40     0C 4E 05 F1 | 	add	fp, #12
10a44     A7 20 02 FB | 	rdlong	local02, fp
10a48     0C 4E 85 F1 | 	sub	fp, #12
10a4c     A7 16 02 FB | 	rdlong	arg03, fp
10a50     0B 21 0A F2 | 	cmp	local02, arg03 wz
10a54     54 FF 9F 5D |  if_ne	jmp	#LR__1400
10a58                 | LR__1402
10a58                 | ' if gotoheader(0)=gotoline then  
10a58     0C 4E 05 F1 | 	add	fp, #12
10a5c     A7 20 02 FB | 	rdlong	local02, fp
10a60     0C 4E 85 F1 | 	sub	fp, #12
10a64     A7 1E 02 FB | 	rdlong	local01, fp
10a68     0F 21 0A F2 | 	cmp	local02, local01 wz
10a6c     60 00 90 5D |  if_ne	jmp	#LR__1403
10a70     08 4E 05 F1 | 	add	fp, #8
10a74     A7 20 02 FB | 	rdlong	local02, fp
10a78     08 4E 85 F1 | 	sub	fp, #8
10a7c     50 00 00 FF 
10a80     B8 E4 05 F1 | 	add	objptr, ##41144
10a84     F2 20 62 FC | 	wrlong	local02, objptr
10a88     06 00 00 FF 
10a8c     3C E4 85 F1 | 	sub	objptr, ##3132
10a90     F2 20 02 FB | 	rdlong	local02, objptr
10a94     01 20 86 F1 | 	sub	local02, #1
10a98     04 E4 05 F1 | 	add	objptr, #4
10a9c     F2 20 62 FC | 	wrlong	local02, objptr
10aa0                 | '    runptr=oldgotoptr
10aa0                 | '    lineptr_e=lineptr-1
10aa0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
10aa0     06 00 00 FF 
10aa4     84 E4 05 F1 | 	add	objptr, ##3204
10aa8     F2 20 02 FB | 	rdlong	local02, objptr
10aac     50 00 00 FF 
10ab0     04 E5 85 F1 | 	sub	objptr, ##41220
10ab4     FF FF 3F FF 
10ab8     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10abc     50 00 00 AF 
10ac0     04 E5 05 A1 |  if_e	add	objptr, ##41220
10ac4     F2 00 68 AC |  if_e	wrlong	#0, objptr
10ac8     50 00 00 AF 
10acc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
10ad0                 | LR__1403
10ad0     A7 F0 03 F6 | 	mov	ptra, fp
10ad4     B2 00 A0 FD | 	call	#popregs_
10ad8                 | _do_slow_goto_ret
10ad8     2D 00 64 FD | 	ret
10adc                 | 
10adc                 | ' 
10adc                 | ' ' ----------------  hex$
10adc                 | ' 
10adc                 | ' sub do_hex
10adc                 | _do_hex
10adc     01 4A 05 F6 | 	mov	COUNT_, #1
10ae0     A8 00 A0 FD | 	call	#pushregs_
10ae4     18 F0 07 F1 | 	add	ptra, #24
10ae8     4A 00 00 FF 
10aec     80 E4 05 F1 | 	add	objptr, ##38016
10af0     F2 1E 02 FB | 	rdlong	local01, objptr
10af4     0F 17 02 F6 | 	mov	arg03, local01
10af8     01 16 66 F0 | 	shl	arg03, #1
10afc     0F 17 02 F1 | 	add	arg03, local01
10b00     02 16 66 F0 | 	shl	arg03, #2
10b04     03 00 00 FF 
10b08     04 E4 85 F1 | 	sub	objptr, ##1540
10b0c     F2 16 02 F1 | 	add	arg03, objptr
10b10     0B 17 02 FB | 	rdlong	arg03, arg03
10b14     0C 4E 05 F1 | 	add	fp, #12
10b18     A7 16 62 FC | 	wrlong	arg03, fp
10b1c                 | ' 
10b1c                 | ' numpar=compiledline(lineptr_e).result.uresult
10b1c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
10b1c     0C 4E 85 F1 | 	sub	fp, #12
10b20     03 16 16 F2 | 	cmp	arg03, #3 wc
10b24     47 00 00 FF 
10b28     7C E4 85 F1 | 	sub	objptr, ##36476
10b2c     0C 4E 05 C1 |  if_b	add	fp, #12
10b30     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10b34     0C 4E 85 C1 |  if_b	sub	fp, #12
10b38     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
10b3c     00 12 06 F6 | 	mov	arg01, #0
10b40     6C 57 B1 FD | 	call	#__system___getiolock_0541
10b44     FD 12 02 F6 | 	mov	arg01, result1
10b48     00 FD B0 FD | 	call	#__system___lockmem
10b4c     84 01 00 FF 
10b50     A4 14 06 F6 | 	mov	arg02, ##@LR__5452
10b54     00 12 06 F6 | 	mov	arg01, #0
10b58     00 16 06 F6 | 	mov	arg03, #0
10b5c     E0 09 B1 FD | 	call	#__system___basic_print_string
10b60     00 12 06 F6 | 	mov	arg01, #0
10b64     48 57 B1 FD | 	call	#__system___getiolock_0541
10b68     FD 00 68 FC | 	wrlong	#0, result1
10b6c     27 12 06 F6 | 	mov	arg01, #39
10b70     48 C7 B0 FD | 	call	#_printerror
10b74     B8 00 90 FD | 	jmp	#LR__1413
10b78                 | LR__1410
10b78                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
10b78     0C 4E 05 F1 | 	add	fp, #12
10b7c     A7 1E 02 FB | 	rdlong	local01, fp
10b80     0C 4E 85 F1 | 	sub	fp, #12
10b84     02 1E 0E F2 | 	cmp	local01, #2 wz
10b88     38 00 90 5D |  if_ne	jmp	#LR__1411
10b8c     0C A8 BF FD | 	call	#_pop
10b90     FF 1E 02 F6 | 	mov	local01, result3
10b94     A7 FA 61 FC | 	wrlong	result1, fp
10b98     04 4E 05 F1 | 	add	fp, #4
10b9c     A7 FC 61 FC | 	wrlong	result2, fp
10ba0     04 4E 05 F1 | 	add	fp, #4
10ba4     A7 1E 62 FC | 	wrlong	local01, fp
10ba8     08 4E 85 F1 | 	sub	fp, #8
10bac     A7 12 02 F6 | 	mov	arg01, fp
10bb0     CC A9 BF FD | 	call	#_converttoint
10bb4     14 4E 05 F1 | 	add	fp, #20
10bb8     A7 FA 61 FC | 	wrlong	result1, fp
10bbc     14 4E 85 F1 | 	sub	fp, #20
10bc0     0C 00 90 FD | 	jmp	#LR__1412
10bc4                 | LR__1411
10bc4     14 4E 05 F1 | 	add	fp, #20
10bc8     A7 10 68 FC | 	wrlong	#8, fp
10bcc     14 4E 85 F1 | 	sub	fp, #20
10bd0                 | LR__1412
10bd0     C8 A7 BF FD | 	call	#_pop
10bd4     FF 1E 02 F6 | 	mov	local01, result3
10bd8     A7 FA 61 FC | 	wrlong	result1, fp
10bdc     04 4E 05 F1 | 	add	fp, #4
10be0     A7 FC 61 FC | 	wrlong	result2, fp
10be4     04 4E 05 F1 | 	add	fp, #4
10be8     A7 1E 62 FC | 	wrlong	local01, fp
10bec     08 4E 85 F1 | 	sub	fp, #8
10bf0     A7 12 02 F6 | 	mov	arg01, fp
10bf4     88 A9 BF FD | 	call	#_converttoint
10bf8     10 4E 05 F1 | 	add	fp, #16
10bfc     A7 FA 61 FC | 	wrlong	result1, fp
10c00     FD 12 02 F6 | 	mov	arg01, result1
10c04     04 4E 05 F1 | 	add	fp, #4
10c08     A7 14 02 FB | 	rdlong	arg02, fp
10c0c     14 4E 85 F1 | 	sub	fp, #20
10c10     10 16 06 F6 | 	mov	arg03, #16
10c14     04 1F B1 FD | 	call	#__system__Number_S
10c18     A7 FA 61 FC | 	wrlong	result1, fp
10c1c     08 4E 05 F1 | 	add	fp, #8
10c20     A7 3E 68 FC | 	wrlong	#31, fp
10c24     08 4E 85 F1 | 	sub	fp, #8
10c28     A7 12 02 F6 | 	mov	arg01, fp
10c2c     04 A8 BF FD | 	call	#_push
10c30                 | LR__1413
10c30     A7 F0 03 F6 | 	mov	ptra, fp
10c34     B2 00 A0 FD | 	call	#popregs_
10c38                 | _do_hex_ret
10c38     2D 00 64 FD | 	ret
10c3c                 | 
10c3c                 | ' 
10c3c                 | ' ' ----------------  if
10c3c                 | ' 
10c3c                 | ' sub do_if
10c3c                 | _do_if
10c3c     05 4A 05 F6 | 	mov	COUNT_, #5
10c40     A8 00 A0 FD | 	call	#pushregs_
10c44     54 A7 BF FD | 	call	#_pop
10c48     FD 1E 0A F6 | 	mov	local01, result1 wz
10c4c     FE 20 02 F6 | 	mov	local02, result2
10c50     FF 22 02 F6 | 	mov	local03, result3
10c54                 | ' t1=pop()
10c54                 | ' ' if uresult=0, jump over else
10c54                 | ' if t1.result.uresult = 0 then 
10c54     BC 00 90 5D |  if_ne	jmp	#LR__1422
10c58                 | '   for i=lineptr_e to lineptr-1
10c58     4A 00 00 FF 
10c5c     80 E4 05 F1 | 	add	objptr, ##38016
10c60     F2 24 02 FB | 	rdlong	local04, objptr
10c64     04 E4 85 F1 | 	sub	objptr, #4
10c68     F2 26 02 FB | 	rdlong	local05, objptr
10c6c     4A 00 00 FF 
10c70     7C E4 85 F1 | 	sub	objptr, ##38012
10c74                 | LR__1420
10c74     13 25 52 F2 | 	cmps	local04, local05 wc
10c78     78 00 90 3D |  if_ae	jmp	#LR__1421
10c7c     12 FF 01 F6 | 	mov	result3, local04
10c80     01 FE 65 F0 | 	shl	result3, #1
10c84     12 FF 01 F1 | 	add	result3, local04
10c88     02 FE 65 F0 | 	shl	result3, #2
10c8c     47 00 00 FF 
10c90     7C E4 05 F1 | 	add	objptr, ##36476
10c94     F2 FE 01 F1 | 	add	result3, objptr
10c98     FF 1E 02 FB | 	rdlong	local01, result3
10c9c     04 FE 05 F1 | 	add	result3, #4
10ca0     FF FC 01 FB | 	rdlong	result2, result3
10ca4     12 FF 01 F6 | 	mov	result3, local04
10ca8     01 FE 65 F0 | 	shl	result3, #1
10cac     12 FF 01 F1 | 	add	result3, local04
10cb0     02 FE 65 F0 | 	shl	result3, #2
10cb4     F2 FE 01 F1 | 	add	result3, objptr
10cb8     08 FE 05 F1 | 	add	result3, #8
10cbc     FF FE 01 FB | 	rdlong	result3, result3
10cc0     FE 20 02 F6 | 	mov	local02, result2
10cc4     FF 22 02 F6 | 	mov	local03, result3
10cc8                 | '     t1=compiledline(i)
10cc8                 | '     if t1.result_type=token_else then lineptr_e=i : return
10cc8     5A 22 0E F2 | 	cmp	local03, #90 wz
10ccc     47 00 00 FF 
10cd0     7C E4 85 F1 | 	sub	objptr, ##36476
10cd4     4A 00 00 AF 
10cd8     80 E4 05 A1 |  if_e	add	objptr, ##38016
10cdc     F2 24 62 AC |  if_e	wrlong	local04, objptr
10ce0     4A 00 00 AF 
10ce4     80 E4 85 A1 |  if_e	sub	objptr, ##38016
10ce8     28 00 90 AD |  if_e	jmp	#LR__1423
10cec     01 24 06 F1 | 	add	local04, #1
10cf0     80 FF 9F FD | 	jmp	#LR__1420
10cf4                 | LR__1421
10cf4     4A 00 00 FF 
10cf8     7C E4 05 F1 | 	add	objptr, ##38012
10cfc     F2 26 02 FB | 	rdlong	local05, objptr
10d00     01 26 86 F1 | 	sub	local05, #1
10d04     04 E4 05 F1 | 	add	objptr, #4
10d08     F2 26 62 FC | 	wrlong	local05, objptr
10d0c     4A 00 00 FF 
10d10     80 E4 85 F1 | 	sub	objptr, ##38016
10d14                 | LR__1422
10d14                 | LR__1423
10d14     A7 F0 03 F6 | 	mov	ptra, fp
10d18     B2 00 A0 FD | 	call	#popregs_
10d1c                 | _do_if_ret
10d1c     2D 00 64 FD | 	ret
10d20                 | 
10d20                 | ' 
10d20                 | ' ' ----------------  inkey$
10d20                 | ' 
10d20                 | ' sub do_inkey
10d20                 | _do_inkey
10d20     02 4A 05 F6 | 	mov	COUNT_, #2
10d24     A8 00 A0 FD | 	call	#pushregs_
10d28     0C F0 07 F1 | 	add	ptra, #12
10d2c     08 F3 B0 FD | 	call	#_usbnew_spin2_get_key
10d30     45 00 00 FF 
10d34     74 E4 05 F1 | 	add	objptr, ##35444
10d38     F2 FA 61 FC | 	wrlong	result1, objptr
10d3c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
10d3c     45 00 00 FF 
10d40     74 E4 85 F1 | 	sub	objptr, ##35444
10d44     00 FA 0D F2 | 	cmp	result1, #0 wz
10d48     94 00 90 AD |  if_e	jmp	#LR__1431
10d4c     45 00 00 FF 
10d50     74 E4 05 F1 | 	add	objptr, ##35444
10d54     F2 1C 02 FB | 	rdlong	arg06, objptr
10d58     45 00 00 FF 
10d5c     74 E4 85 F1 | 	sub	objptr, ##35444
10d60     00 00 40 FF 
10d64     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
10d68     45 00 00 CF 
10d6c     74 E4 05 C1 |  if_b	add	objptr, ##35444
10d70     F2 1E 02 CB |  if_b	rdlong	local01, objptr
10d74     45 00 00 CF 
10d78     74 E4 85 C1 |  if_b	sub	objptr, ##35444
10d7c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
10d80     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
10d84     58 00 90 3D |  if_ae	jmp	#LR__1431
10d88                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
10d88     50 00 00 FF 
10d8c     14 E5 05 F1 | 	add	objptr, ##41236
10d90     F2 1C 02 FB | 	rdlong	arg06, objptr
10d94     50 00 00 FF 
10d98     14 E5 85 F1 | 	sub	objptr, ##41236
10d9c     01 1C 0E F2 | 	cmp	arg06, #1 wz
10da0     3C 00 90 5D |  if_ne	jmp	#LR__1430
10da4     51 00 00 FF 
10da8     B8 E5 05 F1 | 	add	objptr, ##41912
10dac     F2 14 02 FB | 	rdlong	arg02, objptr
10db0     04 E4 85 F1 | 	sub	objptr, #4
10db4     F2 1A 02 FB | 	rdlong	arg05, objptr
10db8     07 12 06 F6 | 	mov	arg01, #7
10dbc     56 00 00 FF 
10dc0     44 16 06 F6 | 	mov	arg03, ##44100
10dc4     0C 18 C6 F9 | 	decod	arg04, #12
10dc8     01 1C 66 F6 | 	neg	arg06, #1
10dcc     46 00 00 FF 
10dd0     E8 E4 85 F1 | 	sub	objptr, ##36072
10dd4     04 F6 B0 FD | 	call	#_audio096_spin2_play
10dd8     0B 00 00 FF 
10ddc     CC E4 85 F1 | 	sub	objptr, ##5836
10de0                 | LR__1430
10de0                 | LR__1431
10de0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
10de0     45 00 00 FF 
10de4     74 E4 05 F1 | 	add	objptr, ##35444
10de8     F2 1C 0A FB | 	rdlong	arg06, objptr wz
10dec     45 00 00 FF 
10df0     74 E4 85 F1 | 	sub	objptr, ##35444
10df4     D4 01 90 AD |  if_e	jmp	#LR__1440
10df8     45 00 00 FF 
10dfc     74 E4 05 F1 | 	add	objptr, ##35444
10e00     F2 1C 02 FB | 	rdlong	arg06, objptr
10e04     45 00 00 FF 
10e08     74 E4 85 F1 | 	sub	objptr, ##35444
10e0c     00 00 40 FF 
10e10     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
10e14     45 00 00 CF 
10e18     74 E4 05 C1 |  if_b	add	objptr, ##35444
10e1c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
10e20     45 00 00 CF 
10e24     74 E4 85 C1 |  if_b	sub	objptr, ##35444
10e28     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
10e2c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
10e30     98 01 90 3D |  if_ae	jmp	#LR__1440
10e34                 | '   if leds and 2 = 2 then 
10e34     51 00 00 FF 
10e38     E8 E5 05 F1 | 	add	objptr, ##41960
10e3c     F2 1E 0A FB | 	rdlong	local01, objptr wz
10e40     51 00 00 FF 
10e44     E8 E5 85 F1 | 	sub	objptr, ##41960
10e48     58 01 90 AD |  if_e	jmp	#LR__1439
10e4c                 | '     if key>96 andalso key<123 then
10e4c     45 00 00 FF 
10e50     74 E4 05 F1 | 	add	objptr, ##35444
10e54     F2 1E 02 FB | 	rdlong	local01, objptr
10e58     45 00 00 FF 
10e5c     74 E4 85 F1 | 	sub	objptr, ##35444
10e60     61 1E 16 F2 | 	cmp	local01, #97 wc
10e64     3C 00 90 CD |  if_b	jmp	#LR__1432
10e68     45 00 00 FF 
10e6c     74 E4 05 F1 | 	add	objptr, ##35444
10e70     F2 1E 02 FB | 	rdlong	local01, objptr
10e74     45 00 00 FF 
10e78     74 E4 85 F1 | 	sub	objptr, ##35444
10e7c     7B 1E 16 F2 | 	cmp	local01, #123 wc
10e80     20 00 90 3D |  if_ae	jmp	#LR__1432
10e84     45 00 00 FF 
10e88     74 E4 05 F1 | 	add	objptr, ##35444
10e8c     F2 1E 02 FB | 	rdlong	local01, objptr
10e90     20 1E 86 F1 | 	sub	local01, #32
10e94     F2 1E 62 FC | 	wrlong	local01, objptr
10e98     45 00 00 FF 
10e9c     74 E4 85 F1 | 	sub	objptr, ##35444
10ea0     00 01 90 FD | 	jmp	#LR__1438
10ea4                 | LR__1432
10ea4     45 00 00 FF 
10ea8     74 E4 05 F1 | 	add	objptr, ##35444
10eac     F2 1E 02 FB | 	rdlong	local01, objptr
10eb0     45 00 00 FF 
10eb4     74 E4 85 F1 | 	sub	objptr, ##35444
10eb8     41 1E 16 F2 | 	cmp	local01, #65 wc
10ebc     3C 00 90 CD |  if_b	jmp	#LR__1433
10ec0     45 00 00 FF 
10ec4     74 E4 05 F1 | 	add	objptr, ##35444
10ec8     F2 1E 02 FB | 	rdlong	local01, objptr
10ecc     45 00 00 FF 
10ed0     74 E4 85 F1 | 	sub	objptr, ##35444
10ed4     5B 1E 16 F2 | 	cmp	local01, #91 wc
10ed8     20 00 90 3D |  if_ae	jmp	#LR__1433
10edc     45 00 00 FF 
10ee0     74 E4 05 F1 | 	add	objptr, ##35444
10ee4     F2 1E 02 FB | 	rdlong	local01, objptr
10ee8     20 1E 06 F1 | 	add	local01, #32
10eec     F2 1E 62 FC | 	wrlong	local01, objptr
10ef0     45 00 00 FF 
10ef4     74 E4 85 F1 | 	sub	objptr, ##35444
10ef8     A8 00 90 FD | 	jmp	#LR__1437
10efc                 | LR__1433
10efc     45 00 00 FF 
10f00     74 E4 05 F1 | 	add	objptr, ##35444
10f04     F2 1E 02 FB | 	rdlong	local01, objptr
10f08     45 00 00 FF 
10f0c     74 E4 85 F1 | 	sub	objptr, ##35444
10f10     17 1E 16 F2 | 	cmp	local01, #23 wc
10f14     3C 00 90 CD |  if_b	jmp	#LR__1434
10f18     45 00 00 FF 
10f1c     74 E4 05 F1 | 	add	objptr, ##35444
10f20     F2 1E 02 FB | 	rdlong	local01, objptr
10f24     45 00 00 FF 
10f28     74 E4 85 F1 | 	sub	objptr, ##35444
10f2c     20 1E 16 F2 | 	cmp	local01, #32 wc
10f30     20 00 90 3D |  if_ae	jmp	#LR__1434
10f34     45 00 00 FF 
10f38     74 E4 05 F1 | 	add	objptr, ##35444
10f3c     F2 1E 02 FB | 	rdlong	local01, objptr
10f40     09 1E 86 F1 | 	sub	local01, #9
10f44     F2 1E 62 FC | 	wrlong	local01, objptr
10f48     45 00 00 FF 
10f4c     74 E4 85 F1 | 	sub	objptr, ##35444
10f50     50 00 90 FD | 	jmp	#LR__1436
10f54                 | LR__1434
10f54     45 00 00 FF 
10f58     74 E4 05 F1 | 	add	objptr, ##35444
10f5c     F2 20 02 FB | 	rdlong	local02, objptr
10f60     45 00 00 FF 
10f64     74 E4 85 F1 | 	sub	objptr, ##35444
10f68     0E 20 16 F2 | 	cmp	local02, #14 wc
10f6c     34 00 90 CD |  if_b	jmp	#LR__1435
10f70     45 00 00 FF 
10f74     74 E4 05 F1 | 	add	objptr, ##35444
10f78     F2 1E 02 FB | 	rdlong	local01, objptr
10f7c     45 00 00 FF 
10f80     74 E4 85 F1 | 	sub	objptr, ##35444
10f84     17 1E 16 F2 | 	cmp	local01, #23 wc
10f88     51 00 00 CF 
10f8c     EC E5 05 C1 |  if_b	add	objptr, ##41964
10f90     F2 20 02 CB |  if_b	rdlong	local02, objptr
10f94     27 20 06 C1 |  if_b	add	local02, #39
10f98     F2 20 62 CC |  if_b	wrlong	local02, objptr
10f9c     51 00 00 CF 
10fa0     EC E5 85 C1 |  if_b	sub	objptr, ##41964
10fa4                 | LR__1435
10fa4                 | LR__1436
10fa4                 | LR__1437
10fa4                 | LR__1438
10fa4                 | LR__1439
10fa4     45 00 00 FF 
10fa8     74 E4 05 F1 | 	add	objptr, ##35444
10fac     F2 12 02 FB | 	rdlong	arg01, objptr
10fb0     45 00 00 FF 
10fb4     74 E4 85 F1 | 	sub	objptr, ##35444
10fb8     44 C6 B0 FD | 	call	#_scantochar
10fbc     FD 12 02 F6 | 	mov	arg01, result1
10fc0     C8 1A B1 FD | 	call	#__system__Chr_S
10fc4     A7 FA 61 FC | 	wrlong	result1, fp
10fc8     0C 00 90 FD | 	jmp	#LR__1441
10fcc                 | LR__1440
10fcc     84 01 00 FF 
10fd0     AB 20 06 F6 | 	mov	local02, ##@LR__5453
10fd4     A7 20 62 FC | 	wrlong	local02, fp
10fd8                 | LR__1441
10fd8     08 4E 05 F1 | 	add	fp, #8
10fdc     A7 3E 68 FC | 	wrlong	#31, fp
10fe0     08 4E 85 F1 | 	sub	fp, #8
10fe4     A7 12 02 F6 | 	mov	arg01, fp
10fe8     48 A4 BF FD | 	call	#_push
10fec     A7 F0 03 F6 | 	mov	ptra, fp
10ff0     B2 00 A0 FD | 	call	#popregs_
10ff4                 | _do_inkey_ret
10ff4     2D 00 64 FD | 	ret
10ff8                 | 
10ff8                 | ' 
10ff8                 | ' ' ----------------  int
10ff8                 | ' 
10ff8                 | ' sub do_int
10ff8                 | _do_int
10ff8     02 4A 05 F6 | 	mov	COUNT_, #2
10ffc     A8 00 A0 FD | 	call	#pushregs_
11000     10 F0 07 F1 | 	add	ptra, #16
11004     94 A3 BF FD | 	call	#_pop
11008     FE 1E 02 F6 | 	mov	local01, result2
1100c     FF 20 02 F6 | 	mov	local02, result3
11010     A7 FA 61 FC | 	wrlong	result1, fp
11014     04 4E 05 F1 | 	add	fp, #4
11018     A7 1E 62 FC | 	wrlong	local01, fp
1101c     04 4E 05 F1 | 	add	fp, #4
11020     A7 20 62 FC | 	wrlong	local02, fp
11024                 | ' 
11024                 | ' t1=pop()
11024                 | ' select case t1.result_type
11024     08 4E 85 F1 | 	sub	fp, #8
11028     1E 20 0E F2 | 	cmp	local02, #30 wz
1102c     14 00 90 AD |  if_e	jmp	#LR__1450
11030     1F 20 0E F2 | 	cmp	local02, #31 wz
11034     20 00 90 AD |  if_e	jmp	#LR__1451
11038     2B 20 0E F2 | 	cmp	local02, #43 wz
1103c     34 00 90 AD |  if_e	jmp	#LR__1452
11040     50 00 90 FD | 	jmp	#LR__1453
11044                 | LR__1450
11044     A7 12 02 FB | 	rdlong	arg01, fp
11048     00 14 06 F6 | 	mov	arg02, #0
1104c     78 28 B1 FD | 	call	#__system___float_tointeger
11050     A7 FA 61 FC | 	wrlong	result1, fp
11054     3C 00 90 FD | 	jmp	#LR__1453
11058                 | LR__1451
11058     A7 12 02 FB | 	rdlong	arg01, fp
1105c     AC 2B B1 FD | 	call	#__system____builtin_atof
11060     FD 12 02 F6 | 	mov	arg01, result1
11064     00 14 06 F6 | 	mov	arg02, #0
11068     5C 28 B1 FD | 	call	#__system___float_tointeger
1106c     A7 FA 61 FC | 	wrlong	result1, fp
11070     20 00 90 FD | 	jmp	#LR__1453
11074                 | LR__1452
11074     A7 12 02 FB | 	rdlong	arg01, fp
11078     98 A4 BF FD | 	call	#_convertstring
1107c     FD 12 02 F6 | 	mov	arg01, result1
11080     88 2B B1 FD | 	call	#__system____builtin_atof
11084     FD 12 02 F6 | 	mov	arg01, result1
11088     00 14 06 F6 | 	mov	arg02, #0
1108c     38 28 B1 FD | 	call	#__system___float_tointeger
11090     A7 FA 61 FC | 	wrlong	result1, fp
11094                 | LR__1453
11094     08 4E 05 F1 | 	add	fp, #8
11098     A7 38 68 FC | 	wrlong	#28, fp
1109c     08 4E 85 F1 | 	sub	fp, #8
110a0     A7 12 02 F6 | 	mov	arg01, fp
110a4     8C A3 BF FD | 	call	#_push
110a8     A7 F0 03 F6 | 	mov	ptra, fp
110ac     B2 00 A0 FD | 	call	#popregs_
110b0                 | _do_int_ret
110b0     2D 00 64 FD | 	ret
110b4                 | 
110b4                 | ' 
110b4                 | ' ' ----------------  left$
110b4                 | ' 
110b4                 | ' sub do_left
110b4                 | _do_left
110b4     00 4A 05 F6 | 	mov	COUNT_, #0
110b8     A8 00 A0 FD | 	call	#pushregs_
110bc     14 F0 07 F1 | 	add	ptra, #20
110c0     4A 00 00 FF 
110c4     80 E4 05 F1 | 	add	objptr, ##38016
110c8     F2 16 02 FB | 	rdlong	arg03, objptr
110cc     0B 15 02 F6 | 	mov	arg02, arg03
110d0     01 14 66 F0 | 	shl	arg02, #1
110d4     0B 15 02 F1 | 	add	arg02, arg03
110d8     02 14 66 F0 | 	shl	arg02, #2
110dc     03 00 00 FF 
110e0     04 E4 85 F1 | 	sub	objptr, ##1540
110e4     F2 14 02 F1 | 	add	arg02, objptr
110e8     0A 17 02 FB | 	rdlong	arg03, arg02
110ec     0C 4E 05 F1 | 	add	fp, #12
110f0     A7 16 62 FC | 	wrlong	arg03, fp
110f4                 | ' 
110f4                 | ' numpar=compiledline(lineptr_e).result.uresult
110f4                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
110f4     0C 4E 85 F1 | 	sub	fp, #12
110f8     02 16 0E F2 | 	cmp	arg03, #2 wz
110fc     47 00 00 FF 
11100     7C E4 85 F1 | 	sub	objptr, ##36476
11104     3C 00 90 AD |  if_e	jmp	#LR__1460
11108     00 12 06 F6 | 	mov	arg01, #0
1110c     A0 51 B1 FD | 	call	#__system___getiolock_0541
11110     FD 12 02 F6 | 	mov	arg01, result1
11114     34 F7 B0 FD | 	call	#__system___lockmem
11118     84 01 00 FF 
1111c     AC 14 06 F6 | 	mov	arg02, ##@LR__5454
11120     00 12 06 F6 | 	mov	arg01, #0
11124     00 16 06 F6 | 	mov	arg03, #0
11128     14 04 B1 FD | 	call	#__system___basic_print_string
1112c     00 12 06 F6 | 	mov	arg01, #0
11130     7C 51 B1 FD | 	call	#__system___getiolock_0541
11134     FD 00 68 FC | 	wrlong	#0, result1
11138     27 12 06 F6 | 	mov	arg01, #39
1113c     7C C1 B0 FD | 	call	#_printerror
11140     E8 00 90 FD | 	jmp	#LR__1463
11144                 | LR__1460
11144     54 A2 BF FD | 	call	#_pop
11148     FF 16 02 F6 | 	mov	arg03, result3
1114c     A7 FA 61 FC | 	wrlong	result1, fp
11150     04 4E 05 F1 | 	add	fp, #4
11154     A7 FC 61 FC | 	wrlong	result2, fp
11158     04 4E 05 F1 | 	add	fp, #4
1115c     A7 16 62 FC | 	wrlong	arg03, fp
11160     08 4E 85 F1 | 	sub	fp, #8
11164     A7 12 02 F6 | 	mov	arg01, fp
11168     14 A4 BF FD | 	call	#_converttoint
1116c     FD 16 02 F6 | 	mov	arg03, result1
11170     10 4E 05 F1 | 	add	fp, #16
11174     A7 16 62 FC | 	wrlong	arg03, fp
11178     10 4E 85 F1 | 	sub	fp, #16
1117c     1C A2 BF FD | 	call	#_pop
11180     FF 16 02 F6 | 	mov	arg03, result3
11184     A7 FA 61 FC | 	wrlong	result1, fp
11188     04 4E 05 F1 | 	add	fp, #4
1118c     A7 FC 61 FC | 	wrlong	result2, fp
11190     04 4E 05 F1 | 	add	fp, #4
11194     A7 16 62 FC | 	wrlong	arg03, fp
11198                 | ' t1=pop() : arg=converttoint(t1)
11198                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11198     08 4E 85 F1 | 	sub	fp, #8
1119c     2B 16 0E F2 | 	cmp	arg03, #43 wz
111a0     18 00 90 5D |  if_ne	jmp	#LR__1461
111a4     A7 12 02 FB | 	rdlong	arg01, fp
111a8     68 A3 BF FD | 	call	#_convertstring
111ac     A7 FA 61 FC | 	wrlong	result1, fp
111b0     08 4E 05 F1 | 	add	fp, #8
111b4     A7 3E 68 FC | 	wrlong	#31, fp
111b8     08 4E 85 F1 | 	sub	fp, #8
111bc                 | LR__1461
111bc                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
111bc     08 4E 05 F1 | 	add	fp, #8
111c0     A7 16 02 FB | 	rdlong	arg03, fp
111c4     08 4E 85 F1 | 	sub	fp, #8
111c8     1F 16 0E F2 | 	cmp	arg03, #31 wz
111cc     3C 00 90 AD |  if_e	jmp	#LR__1462
111d0     00 12 06 F6 | 	mov	arg01, #0
111d4     D8 50 B1 FD | 	call	#__system___getiolock_0541
111d8     FD 12 02 F6 | 	mov	arg01, result1
111dc     6C F6 B0 FD | 	call	#__system___lockmem
111e0     84 01 00 FF 
111e4     B4 14 06 F6 | 	mov	arg02, ##@LR__5455
111e8     00 12 06 F6 | 	mov	arg01, #0
111ec     00 16 06 F6 | 	mov	arg03, #0
111f0     4C 03 B1 FD | 	call	#__system___basic_print_string
111f4     00 12 06 F6 | 	mov	arg01, #0
111f8     B4 50 B1 FD | 	call	#__system___getiolock_0541
111fc     FD 00 68 FC | 	wrlong	#0, result1
11200     0F 12 06 F6 | 	mov	arg01, #15
11204     B4 C0 B0 FD | 	call	#_printerror
11208     20 00 90 FD | 	jmp	#LR__1463
1120c                 | LR__1462
1120c     A7 12 02 FB | 	rdlong	arg01, fp
11210     10 4E 05 F1 | 	add	fp, #16
11214     A7 14 02 FB | 	rdlong	arg02, fp
11218     10 4E 85 F1 | 	sub	fp, #16
1121c     A8 16 B1 FD | 	call	#__system__Left_S
11220     A7 FA 61 FC | 	wrlong	result1, fp
11224     A7 12 02 F6 | 	mov	arg01, fp
11228     08 A2 BF FD | 	call	#_push
1122c                 | LR__1463
1122c     A7 F0 03 F6 | 	mov	ptra, fp
11230     B2 00 A0 FD | 	call	#popregs_
11234                 | _do_left_ret
11234     2D 00 64 FD | 	ret
11238                 | 
11238                 | ' 
11238                 | ' ' ----------------  len
11238                 | ' 
11238                 | ' sub do_len
11238                 | _do_len
11238     02 4A 05 F6 | 	mov	COUNT_, #2
1123c     A8 00 A0 FD | 	call	#pushregs_
11240     14 F0 07 F1 | 	add	ptra, #20
11244     4A 00 00 FF 
11248     80 E4 05 F1 | 	add	objptr, ##38016
1124c     F2 1E 02 FB | 	rdlong	local01, objptr
11250     0F 17 02 F6 | 	mov	arg03, local01
11254     01 16 66 F0 | 	shl	arg03, #1
11258     0F 17 02 F1 | 	add	arg03, local01
1125c     02 16 66 F0 | 	shl	arg03, #2
11260     03 00 00 FF 
11264     04 E4 85 F1 | 	sub	objptr, ##1540
11268     F2 16 02 F1 | 	add	arg03, objptr
1126c     0B 17 02 FB | 	rdlong	arg03, arg03
11270     0C 4E 05 F1 | 	add	fp, #12
11274     A7 16 62 FC | 	wrlong	arg03, fp
11278                 | ' 
11278                 | ' numpar=compiledline(lineptr_e).result.uresult
11278                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
11278     0C 4E 85 F1 | 	sub	fp, #12
1127c     02 16 16 F2 | 	cmp	arg03, #2 wc
11280     47 00 00 FF 
11284     7C E4 85 F1 | 	sub	objptr, ##36476
11288     0C 4E 05 C1 |  if_b	add	fp, #12
1128c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11290     0C 4E 85 C1 |  if_b	sub	fp, #12
11294     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1470
11298     00 12 06 F6 | 	mov	arg01, #0
1129c     10 50 B1 FD | 	call	#__system___getiolock_0541
112a0     FD 12 02 F6 | 	mov	arg01, result1
112a4     A4 F5 B0 FD | 	call	#__system___lockmem
112a8     84 01 00 FF 
112ac     BC 14 06 F6 | 	mov	arg02, ##@LR__5456
112b0     00 12 06 F6 | 	mov	arg01, #0
112b4     00 16 06 F6 | 	mov	arg03, #0
112b8     84 02 B1 FD | 	call	#__system___basic_print_string
112bc     00 12 06 F6 | 	mov	arg01, #0
112c0     EC 4F B1 FD | 	call	#__system___getiolock_0541
112c4     FD 00 68 FC | 	wrlong	#0, result1
112c8     27 12 06 F6 | 	mov	arg01, #39
112cc     EC BF B0 FD | 	call	#_printerror
112d0     C4 00 90 FD | 	jmp	#LR__1475
112d4                 | LR__1470
112d4     C4 A0 BF FD | 	call	#_pop
112d8     FF 16 02 F6 | 	mov	arg03, result3
112dc     A7 FA 61 FC | 	wrlong	result1, fp
112e0     04 4E 05 F1 | 	add	fp, #4
112e4     A7 FC 61 FC | 	wrlong	result2, fp
112e8     04 4E 05 F1 | 	add	fp, #4
112ec     A7 16 62 FC | 	wrlong	arg03, fp
112f0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
112f0     08 4E 85 F1 | 	sub	fp, #8
112f4     2B 16 0E F2 | 	cmp	arg03, #43 wz
112f8     18 00 90 5D |  if_ne	jmp	#LR__1471
112fc     A7 12 02 FB | 	rdlong	arg01, fp
11300     10 A2 BF FD | 	call	#_convertstring
11304     A7 FA 61 FC | 	wrlong	result1, fp
11308     08 4E 05 F1 | 	add	fp, #8
1130c     A7 3E 68 FC | 	wrlong	#31, fp
11310     08 4E 85 F1 | 	sub	fp, #8
11314                 | LR__1471
11314                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
11314     08 4E 05 F1 | 	add	fp, #8
11318     A7 16 02 FB | 	rdlong	arg03, fp
1131c     08 4E 85 F1 | 	sub	fp, #8
11320     1F 16 0E F2 | 	cmp	arg03, #31 wz
11324     3C 00 90 AD |  if_e	jmp	#LR__1472
11328     00 12 06 F6 | 	mov	arg01, #0
1132c     80 4F B1 FD | 	call	#__system___getiolock_0541
11330     FD 12 02 F6 | 	mov	arg01, result1
11334     14 F5 B0 FD | 	call	#__system___lockmem
11338     84 01 00 FF 
1133c     C2 14 06 F6 | 	mov	arg02, ##@LR__5457
11340     00 12 06 F6 | 	mov	arg01, #0
11344     00 16 06 F6 | 	mov	arg03, #0
11348     F4 01 B1 FD | 	call	#__system___basic_print_string
1134c     00 12 06 F6 | 	mov	arg01, #0
11350     5C 4F B1 FD | 	call	#__system___getiolock_0541
11354     FD 00 68 FC | 	wrlong	#0, result1
11358     0F 12 06 F6 | 	mov	arg01, #15
1135c     5C BF B0 FD | 	call	#_printerror
11360     34 00 90 FD | 	jmp	#LR__1475
11364                 | LR__1472
11364     A7 12 02 FB | 	rdlong	arg01, fp
11368     09 21 02 F6 | 	mov	local02, arg01
1136c     97 06 48 FB | 	callpa	#(@LR__1474-@LR__1473)>>2,fcache_load_ptr_
11370                 | LR__1473
11370     10 FB C9 FA | 	rdbyte	result1, local02 wz
11374     01 20 06 51 |  if_ne	add	local02, #1
11378     F4 FF 9F 5D |  if_ne	jmp	#LR__1473
1137c                 | LR__1474
1137c     09 21 82 F1 | 	sub	local02, arg01
11380     A7 20 62 FC | 	wrlong	local02, fp
11384     08 4E 05 F1 | 	add	fp, #8
11388     A7 38 68 FC | 	wrlong	#28, fp
1138c     08 4E 85 F1 | 	sub	fp, #8
11390     A7 12 02 F6 | 	mov	arg01, fp
11394     9C A0 BF FD | 	call	#_push
11398                 | LR__1475
11398     A7 F0 03 F6 | 	mov	ptra, fp
1139c     B2 00 A0 FD | 	call	#popregs_
113a0                 | _do_len_ret
113a0     2D 00 64 FD | 	ret
113a4                 | 
113a4                 | ' 
113a4                 | ' ' ----------------  list
113a4                 | ' 
113a4                 | ' sub do_list
113a4                 | _do_list
113a4     02 4A 05 F6 | 	mov	COUNT_, #2
113a8     A8 00 A0 FD | 	call	#pushregs_
113ac     B8 F0 07 F1 | 	add	ptra, #184
113b0     04 4E 05 F1 | 	add	fp, #4
113b4     A7 00 68 FC | 	wrlong	#0, fp
113b8     04 4E 05 F1 | 	add	fp, #4
113bc     FF FF BF FF 
113c0     A7 FE 6B FC | 	wrlong	##2147483647, fp
113c4     08 4E 85 F1 | 	sub	fp, #8
113c8     4A 00 00 FF 
113cc     80 E4 05 F1 | 	add	objptr, ##38016
113d0     F2 1E 02 FB | 	rdlong	local01, objptr
113d4     0F 17 02 F6 | 	mov	arg03, local01
113d8     01 16 66 F0 | 	shl	arg03, #1
113dc     0F 17 02 F1 | 	add	arg03, local01
113e0     02 16 66 F0 | 	shl	arg03, #2
113e4     03 00 00 FF 
113e8     04 E4 85 F1 | 	sub	objptr, ##1540
113ec     F2 16 02 F1 | 	add	arg03, objptr
113f0     0B 17 02 FB | 	rdlong	arg03, arg03
113f4     A7 16 62 FC | 	wrlong	arg03, fp
113f8                 | ' 
113f8                 | ' startline=0 : endline=$7FFFFFFF
113f8                 | ' numpar=compiledline(lineptr_e).result.uresult
113f8                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
113f8     01 16 0E F2 | 	cmp	arg03, #1 wz
113fc     47 00 00 FF 
11400     7C E4 85 F1 | 	sub	objptr, ##36476
11404     3C 00 90 5D |  if_ne	jmp	#LR__1480
11408     90 9F BF FD | 	call	#_pop
1140c     FF 1E 02 F6 | 	mov	local01, result3
11410     0C 4E 05 F1 | 	add	fp, #12
11414     A7 FA 61 FC | 	wrlong	result1, fp
11418     04 4E 05 F1 | 	add	fp, #4
1141c     A7 FC 61 FC | 	wrlong	result2, fp
11420     04 4E 05 F1 | 	add	fp, #4
11424     A7 1E 62 FC | 	wrlong	local01, fp
11428     08 4E 85 F1 | 	sub	fp, #8
1142c     A7 12 02 F6 | 	mov	arg01, fp
11430     0C 4E 85 F1 | 	sub	fp, #12
11434     48 A1 BF FD | 	call	#_converttoint
11438     04 4E 05 F1 | 	add	fp, #4
1143c     A7 FA 61 FC | 	wrlong	result1, fp
11440     04 4E 85 F1 | 	sub	fp, #4
11444                 | LR__1480
11444                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
11444     A7 16 02 FB | 	rdlong	arg03, fp
11448     02 16 0E F2 | 	cmp	arg03, #2 wz
1144c     7C 00 90 5D |  if_ne	jmp	#LR__1481
11450     48 9F BF FD | 	call	#_pop
11454     FF 1E 02 F6 | 	mov	local01, result3
11458     0C 4E 05 F1 | 	add	fp, #12
1145c     A7 FA 61 FC | 	wrlong	result1, fp
11460     04 4E 05 F1 | 	add	fp, #4
11464     A7 FC 61 FC | 	wrlong	result2, fp
11468     04 4E 05 F1 | 	add	fp, #4
1146c     A7 1E 62 FC | 	wrlong	local01, fp
11470     08 4E 85 F1 | 	sub	fp, #8
11474     A7 12 02 F6 | 	mov	arg01, fp
11478     0C 4E 85 F1 | 	sub	fp, #12
1147c     00 A1 BF FD | 	call	#_converttoint
11480     FD 1E 02 F6 | 	mov	local01, result1
11484     08 4E 05 F1 | 	add	fp, #8
11488     A7 1E 62 FC | 	wrlong	local01, fp
1148c     08 4E 85 F1 | 	sub	fp, #8
11490     08 9F BF FD | 	call	#_pop
11494     FF 1E 02 F6 | 	mov	local01, result3
11498     0C 4E 05 F1 | 	add	fp, #12
1149c     A7 FA 61 FC | 	wrlong	result1, fp
114a0     04 4E 05 F1 | 	add	fp, #4
114a4     A7 FC 61 FC | 	wrlong	result2, fp
114a8     04 4E 05 F1 | 	add	fp, #4
114ac     A7 1E 62 FC | 	wrlong	local01, fp
114b0     08 4E 85 F1 | 	sub	fp, #8
114b4     A7 12 02 F6 | 	mov	arg01, fp
114b8     0C 4E 85 F1 | 	sub	fp, #12
114bc     C0 A0 BF FD | 	call	#_converttoint
114c0     04 4E 05 F1 | 	add	fp, #4
114c4     A7 FA 61 FC | 	wrlong	result1, fp
114c8     04 4E 85 F1 | 	sub	fp, #4
114cc                 | LR__1481
114cc                 | ' 
114cc                 | ' 
114cc                 | ' print
114cc     00 12 06 F6 | 	mov	arg01, #0
114d0     DC 4D B1 FD | 	call	#__system___getiolock_0541
114d4     FD 12 02 F6 | 	mov	arg01, result1
114d8     70 F3 B0 FD | 	call	#__system___lockmem
114dc     00 12 06 F6 | 	mov	arg01, #0
114e0     0A 14 06 F6 | 	mov	arg02, #10
114e4     00 16 06 F6 | 	mov	arg03, #0
114e8     FC FF B0 FD | 	call	#__system___basic_print_char
114ec     00 12 06 F6 | 	mov	arg01, #0
114f0     BC 4D B1 FD | 	call	#__system___getiolock_0541
114f4     FD 00 68 FC | 	wrlong	#0, result1
114f8     4A 00 00 FF 
114fc     88 E4 05 F1 | 	add	objptr, ##38024
11500     F2 20 02 FB | 	rdlong	local02, objptr
11504     07 00 00 FF 
11508     9C E5 05 F1 | 	add	objptr, ##3996
1150c     F2 20 62 FC | 	wrlong	local02, objptr
11510     52 00 00 FF 
11514     24 E4 85 F1 | 	sub	objptr, ##42020
11518                 | ' do 
11518                 | LR__1482
11518     20 4E 05 F1 | 	add	fp, #32
1151c     A7 12 02 F6 | 	mov	arg01, fp
11520     20 4E 85 F1 | 	sub	fp, #32
11524     52 00 00 FF 
11528     24 E4 05 F1 | 	add	objptr, ##42020
1152c     F2 14 02 FB | 	rdlong	arg02, objptr
11530     18 16 06 F6 | 	mov	arg03, #24
11534     46 00 00 FF 
11538     58 E5 85 F1 | 	sub	objptr, ##36184
1153c     CC E6 B0 FD | 	call	#_psram_spin2_read1
11540     0B 00 00 FF 
11544     CC E4 85 F1 | 	sub	objptr, ##5836
11548                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
11548                 | '   
11548                 | '   if header(0)<> $FFFFFFFF then
11548     20 4E 05 F1 | 	add	fp, #32
1154c     A7 20 02 FB | 	rdlong	local02, fp
11550     20 4E 85 F1 | 	sub	fp, #32
11554     FF FF 7F FF 
11558     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1155c     A8 00 90 AD |  if_e	jmp	#LR__1484
11560     38 4E 05 F1 | 	add	fp, #56
11564     3F 16 06 F6 | 	mov	arg03, #63
11568     28 16 62 FD | 	setq	arg03
1156c     A7 00 68 FC | 	wrlong	#0, fp
11570     A7 12 02 F6 | 	mov	arg01, fp
11574     10 4E 85 F1 | 	sub	fp, #16
11578     A7 14 02 FB | 	rdlong	arg02, fp
1157c     04 4E 05 F1 | 	add	fp, #4
11580     A7 16 02 FB | 	rdlong	arg03, fp
11584     2C 4E 85 F1 | 	sub	fp, #44
11588     0B 00 00 FF 
1158c     CC E4 05 F1 | 	add	objptr, ##5836
11590     78 E6 B0 FD | 	call	#_psram_spin2_read1
11594     0B 00 00 FF 
11598     CC E4 85 F1 | 	sub	objptr, ##5836
1159c                 | '     longfill(linebuf,0,64)
1159c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
1159c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
1159c     20 4E 05 F1 | 	add	fp, #32
115a0     A7 20 02 FB | 	rdlong	local02, fp
115a4     1C 4E 85 F1 | 	sub	fp, #28
115a8     A7 1E 02 FB | 	rdlong	local01, fp
115ac     04 4E 85 F1 | 	sub	fp, #4
115b0     0F 21 52 F2 | 	cmps	local02, local01 wc
115b4     30 00 90 CD |  if_b	jmp	#LR__1483
115b8     20 4E 05 F1 | 	add	fp, #32
115bc     A7 20 02 FB | 	rdlong	local02, fp
115c0     18 4E 85 F1 | 	sub	fp, #24
115c4     A7 16 02 FB | 	rdlong	arg03, fp
115c8     08 4E 85 F1 | 	sub	fp, #8
115cc     0B 21 5A F2 | 	cmps	local02, arg03 wcz
115d0     14 00 90 1D |  if_a	jmp	#LR__1483
115d4     38 4E 05 F1 | 	add	fp, #56
115d8     A7 12 02 F6 | 	mov	arg01, fp
115dc     38 4E 85 F1 | 	sub	fp, #56
115e0                 | ' 
115e0                 | ' write(text)
115e0     4C DD B0 FD | 	call	#_hg010b_spin2_write
115e4                 | ' crlf
115e4     48 E2 B0 FD | 	call	#_hg010b_spin2_crlf
115e8                 | LR__1483
115e8     34 4E 05 F1 | 	add	fp, #52
115ec     A7 20 02 FB | 	rdlong	local02, fp
115f0     34 4E 85 F1 | 	sub	fp, #52
115f4     52 00 00 FF 
115f8     24 E4 05 F1 | 	add	objptr, ##42020
115fc     F2 20 62 FC | 	wrlong	local02, objptr
11600     52 00 00 FF 
11604     24 E4 85 F1 | 	sub	objptr, ##42020
11608                 | LR__1484
11608     34 4E 05 F1 | 	add	fp, #52
1160c     A7 20 02 FB | 	rdlong	local02, fp
11610     34 4E 85 F1 | 	sub	fp, #52
11614     FF FF 3F FF 
11618     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1161c     20 4E 05 51 |  if_ne	add	fp, #32
11620     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11624     20 4E 85 51 |  if_ne	sub	fp, #32
11628     FF FF 7F 5F 
1162c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11630     E4 FE 9F 5D |  if_ne	jmp	#LR__1482
11634     A7 F0 03 F6 | 	mov	ptra, fp
11638     B2 00 A0 FD | 	call	#popregs_
1163c                 | _do_list_ret
1163c     2D 00 64 FD | 	ret
11640                 | 
11640                 | ' 
11640                 | ' '-------------------- load
11640                 | ' 
11640                 | ' sub do_load(amode=0 as integer)  
11640                 | _do_load
11640     01 4A 05 F6 | 	mov	COUNT_, #1
11644     A8 00 A0 FD | 	call	#pushregs_
11648     AC F0 07 F1 | 	add	ptra, #172
1164c     A7 12 62 FC | 	wrlong	arg01, fp
11650     4A 00 00 FF 
11654     80 E4 05 F1 | 	add	objptr, ##38016
11658     F2 14 02 FB | 	rdlong	arg02, objptr
1165c     0A 13 02 F6 | 	mov	arg01, arg02
11660     01 12 66 F0 | 	shl	arg01, #1
11664     0A 13 02 F1 | 	add	arg01, arg02
11668     02 12 66 F0 | 	shl	arg01, #2
1166c     03 00 00 FF 
11670     04 E4 85 F1 | 	sub	objptr, ##1540
11674     F2 12 02 F1 | 	add	arg01, objptr
11678     09 15 02 FB | 	rdlong	arg02, arg01
1167c     1C 4E 05 F1 | 	add	fp, #28
11680     A7 14 62 FC | 	wrlong	arg02, fp
11684     8C 4E 05 F1 | 	add	fp, #140
11688     A7 12 02 F6 | 	mov	arg01, fp
1168c     47 00 00 FF 
11690     7C E4 85 F1 | 	sub	objptr, ##36476
11694     80 4E 85 F1 | 	sub	fp, #128
11698     09 4F 61 FC | 	wrlong	fp, arg01
1169c                 | ' numpar=compiledline(lineptr_e).result.uresult
1169c                 | ' lpoke varptr(line2$),varptr(line2)
1169c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1169c     0C 4E 85 F1 | 	sub	fp, #12
116a0     A7 1E 02 FB | 	rdlong	local01, fp
116a4     1C 4E 85 F1 | 	sub	fp, #28
116a8     01 1E 56 F2 | 	cmps	local01, #1 wc
116ac     24 00 90 CD |  if_b	jmp	#LR__1490
116b0     E8 9C BF FD | 	call	#_pop
116b4     04 4E 05 F1 | 	add	fp, #4
116b8     A7 FA 61 FC | 	wrlong	result1, fp
116bc     04 4E 05 F1 | 	add	fp, #4
116c0     A7 FC 61 FC | 	wrlong	result2, fp
116c4     04 4E 05 F1 | 	add	fp, #4
116c8     A7 FE 61 FC | 	wrlong	result3, fp
116cc     0C 4E 85 F1 | 	sub	fp, #12
116d0     28 00 90 FD | 	jmp	#LR__1491
116d4                 | LR__1490
116d4     51 00 00 FF 
116d8     D8 E5 05 F1 | 	add	objptr, ##41944
116dc     F2 1E 02 FB | 	rdlong	local01, objptr
116e0     51 00 00 FF 
116e4     D8 E5 85 F1 | 	sub	objptr, ##41944
116e8     04 4E 05 F1 | 	add	fp, #4
116ec     A7 1E 62 FC | 	wrlong	local01, fp
116f0     08 4E 05 F1 | 	add	fp, #8
116f4     A7 3E 68 FC | 	wrlong	#31, fp
116f8     0C 4E 85 F1 | 	sub	fp, #12
116fc                 | LR__1491
116fc                 | ' 'print "popped "; t1.result.uresult, t1.result_type
116fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
116fc     0C 4E 05 F1 | 	add	fp, #12
11700     A7 1E 02 FB | 	rdlong	local01, fp
11704     0C 4E 85 F1 | 	sub	fp, #12
11708     2B 1E 0E F2 | 	cmp	local01, #43 wz
1170c     24 00 90 5D |  if_ne	jmp	#LR__1492
11710     04 4E 05 F1 | 	add	fp, #4
11714     A7 12 02 FB | 	rdlong	arg01, fp
11718     04 4E 85 F1 | 	sub	fp, #4
1171c     F4 9D BF FD | 	call	#_convertstring
11720     04 4E 05 F1 | 	add	fp, #4
11724     A7 FA 61 FC | 	wrlong	result1, fp
11728     08 4E 05 F1 | 	add	fp, #8
1172c     A7 3E 68 FC | 	wrlong	#31, fp
11730     0C 4E 85 F1 | 	sub	fp, #12
11734                 | LR__1492
11734                 | ' if t1.result_type=result_string then
11734     0C 4E 05 F1 | 	add	fp, #12
11738     A7 1E 02 FB | 	rdlong	local01, fp
1173c     0C 4E 85 F1 | 	sub	fp, #12
11740     1F 1E 0E F2 | 	cmp	local01, #31 wz
11744     E0 02 90 5D |  if_ne	jmp	#LR__1498
11748                 | '   if amode<>1234 then do_new
11748     A7 1E 02 FB | 	rdlong	local01, fp
1174c     02 00 00 FF 
11750     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
11754     A0 0B B0 5D |  if_ne	call	#_do_new
11758                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
11758     04 4E 05 F1 | 	add	fp, #4
1175c     A7 12 02 FB | 	rdlong	arg01, fp
11760     04 4E 85 F1 | 	sub	fp, #4
11764     84 01 00 FF 
11768     C8 14 06 F6 | 	mov	arg02, ##@LR__5458
1176c     04 F1 B0 FD | 	call	#__system___string_cmp
11770     00 FA 0D F2 | 	cmp	result1, #0 wz
11774     24 00 90 5D |  if_ne	jmp	#LR__1493
11778     51 00 00 FF 
1177c     D8 E5 05 F1 | 	add	objptr, ##41944
11780     F2 1E 02 FB | 	rdlong	local01, objptr
11784     51 00 00 FF 
11788     D8 E5 85 F1 | 	sub	objptr, ##41944
1178c     04 4E 05 F1 | 	add	fp, #4
11790     A7 1E 62 FC | 	wrlong	local01, fp
11794     04 4E 85 F1 | 	sub	fp, #4
11798     20 00 90 FD | 	jmp	#LR__1494
1179c                 | LR__1493
1179c     04 4E 05 F1 | 	add	fp, #4
117a0     A7 1E 02 FB | 	rdlong	local01, fp
117a4     04 4E 85 F1 | 	sub	fp, #4
117a8     51 00 00 FF 
117ac     D8 E5 05 F1 | 	add	objptr, ##41944
117b0     F2 1E 62 FC | 	wrlong	local01, objptr
117b4     51 00 00 FF 
117b8     D8 E5 85 F1 | 	sub	objptr, ##41944
117bc                 | LR__1494
117bc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
117bc     09 12 06 F6 | 	mov	arg01, #9
117c0     1C 41 B1 FD | 	call	#__system__close
117c4     09 1E 06 F6 | 	mov	local01, #9
117c8     4A 00 00 FF 
117cc     94 E4 05 F1 | 	add	objptr, ##38036
117d0     F2 12 02 FB | 	rdlong	arg01, objptr
117d4     4A 00 00 FF 
117d8     94 E4 85 F1 | 	sub	objptr, ##38036
117dc     84 01 00 FF 
117e0     C9 14 06 F6 | 	mov	arg02, ##@LR__5459
117e4     C0 F0 B0 FD | 	call	#__system___string_concat
117e8     FD 12 02 F6 | 	mov	arg01, result1
117ec     04 4E 05 F1 | 	add	fp, #4
117f0     A7 14 02 FB | 	rdlong	arg02, fp
117f4     04 4E 85 F1 | 	sub	fp, #4
117f8     AC F0 B0 FD | 	call	#__system___string_concat
117fc     FD 14 02 F6 | 	mov	arg02, result1
11800     0F 13 02 F6 | 	mov	arg01, local01
11804     00 16 06 F6 | 	mov	arg03, #0
11808     44 FC B0 FD | 	call	#__system___basic_open_string
1180c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11810     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11814     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11818     14 4E 05 F1 | 	add	fp, #20
1181c     A7 FA 61 FC | 	wrlong	result1, fp
11820                 | '   r=geterr() 
11820                 | '   if r then 
11820     14 4E 85 F1 | 	sub	fp, #20
11824     50 01 90 AD |  if_e	jmp	#LR__1496
11828                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
11828     09 12 06 F6 | 	mov	arg01, #9
1182c     B0 40 B1 FD | 	call	#__system__close
11830     09 1E 06 F6 | 	mov	local01, #9
11834     4A 00 00 FF 
11838     94 E4 05 F1 | 	add	objptr, ##38036
1183c     F2 12 02 FB | 	rdlong	arg01, objptr
11840     4A 00 00 FF 
11844     94 E4 85 F1 | 	sub	objptr, ##38036
11848     84 01 00 FF 
1184c     CB 14 06 F6 | 	mov	arg02, ##@LR__5460
11850     54 F0 B0 FD | 	call	#__system___string_concat
11854     FD 12 02 F6 | 	mov	arg01, result1
11858     04 4E 05 F1 | 	add	fp, #4
1185c     A7 14 02 FB | 	rdlong	arg02, fp
11860     04 4E 85 F1 | 	sub	fp, #4
11864     40 F0 B0 FD | 	call	#__system___string_concat
11868     FD 12 02 F6 | 	mov	arg01, result1
1186c     84 01 00 FF 
11870     CD 14 06 F6 | 	mov	arg02, ##@LR__5461
11874     30 F0 B0 FD | 	call	#__system___string_concat
11878     FD 14 02 F6 | 	mov	arg02, result1
1187c     0F 13 02 F6 | 	mov	arg01, local01
11880     00 16 06 F6 | 	mov	arg03, #0
11884     C8 FB B0 FD | 	call	#__system___basic_open_string
11888     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1188c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11890     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11894     14 4E 05 F1 | 	add	fp, #20
11898     A7 FA 61 FC | 	wrlong	result1, fp
1189c                 | '     r=geterr() 
1189c                 | '     if r then 
1189c     14 4E 85 F1 | 	sub	fp, #20
118a0     A0 00 90 AD |  if_e	jmp	#LR__1495
118a4                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
118a4     00 12 06 F6 | 	mov	arg01, #0
118a8     04 4A B1 FD | 	call	#__system___getiolock_0541
118ac     FD 12 02 F6 | 	mov	arg01, result1
118b0     98 EF B0 FD | 	call	#__system___lockmem
118b4     84 01 00 FF 
118b8     D2 14 06 F6 | 	mov	arg02, ##@LR__5462
118bc     00 12 06 F6 | 	mov	arg01, #0
118c0     00 16 06 F6 | 	mov	arg03, #0
118c4     78 FC B0 FD | 	call	#__system___basic_print_string
118c8     14 4E 05 F1 | 	add	fp, #20
118cc     A7 14 02 FB | 	rdlong	arg02, fp
118d0     14 4E 85 F1 | 	sub	fp, #20
118d4     00 12 06 F6 | 	mov	arg01, #0
118d8     00 16 06 F6 | 	mov	arg03, #0
118dc     0A 18 06 F6 | 	mov	arg04, #10
118e0     A0 FC B0 FD | 	call	#__system___basic_print_integer
118e4     84 01 00 FF 
118e8     E0 14 06 F6 | 	mov	arg02, ##@LR__5463
118ec     00 12 06 F6 | 	mov	arg01, #0
118f0     00 16 06 F6 | 	mov	arg03, #0
118f4     48 FC B0 FD | 	call	#__system___basic_print_string
118f8     00 1E 06 F6 | 	mov	local01, #0
118fc     14 4E 05 F1 | 	add	fp, #20
11900     A7 12 02 FB | 	rdlong	arg01, fp
11904     14 4E 85 F1 | 	sub	fp, #20
11908     08 16 B1 FD | 	call	#__system___strerror
1190c     FD 14 02 F6 | 	mov	arg02, result1
11910     0F 13 02 F6 | 	mov	arg01, local01
11914     00 16 06 F6 | 	mov	arg03, #0
11918     24 FC B0 FD | 	call	#__system___basic_print_string
1191c     00 12 06 F6 | 	mov	arg01, #0
11920     0A 14 06 F6 | 	mov	arg02, #10
11924     00 16 06 F6 | 	mov	arg03, #0
11928     BC FB B0 FD | 	call	#__system___basic_print_char
1192c     00 12 06 F6 | 	mov	arg01, #0
11930     7C 49 B1 FD | 	call	#__system___getiolock_0541
11934     FD 00 68 FC | 	wrlong	#0, result1
11938     09 12 06 F6 | 	mov	arg01, #9
1193c     A0 3F B1 FD | 	call	#__system__close
11940     7C 01 90 FD | 	jmp	#LR__1500
11944                 | LR__1495
11944     51 00 00 FF 
11948     D8 E5 05 F1 | 	add	objptr, ##41944
1194c     F2 12 02 FB | 	rdlong	arg01, objptr
11950     51 00 00 FF 
11954     D8 E5 85 F1 | 	sub	objptr, ##41944
11958     84 01 00 FF 
1195c     E3 14 06 F6 | 	mov	arg02, ##@LR__5464
11960     44 EF B0 FD | 	call	#__system___string_concat
11964     51 00 00 FF 
11968     D8 E5 05 F1 | 	add	objptr, ##41944
1196c     F2 FA 61 FC | 	wrlong	result1, objptr
11970     51 00 00 FF 
11974     D8 E5 85 F1 | 	sub	objptr, ##41944
11978                 | LR__1496
11978                 | '   close #9: open currentdir$+"/"+loadname for input as #9
11978     09 12 06 F6 | 	mov	arg01, #9
1197c     60 3F B1 FD | 	call	#__system__close
11980     09 1E 06 F6 | 	mov	local01, #9
11984     4A 00 00 FF 
11988     94 E4 05 F1 | 	add	objptr, ##38036
1198c     F2 12 02 FB | 	rdlong	arg01, objptr
11990     4A 00 00 FF 
11994     94 E4 85 F1 | 	sub	objptr, ##38036
11998     84 01 00 FF 
1199c     E8 14 06 F6 | 	mov	arg02, ##@LR__5465
119a0     04 EF B0 FD | 	call	#__system___string_concat
119a4     FD 12 02 F6 | 	mov	arg01, result1
119a8     51 00 00 FF 
119ac     D8 E5 05 F1 | 	add	objptr, ##41944
119b0     F2 14 02 FB | 	rdlong	arg02, objptr
119b4     51 00 00 FF 
119b8     D8 E5 85 F1 | 	sub	objptr, ##41944
119bc     E8 EE B0 FD | 	call	#__system___string_concat
119c0     FD 14 02 F6 | 	mov	arg02, result1
119c4     0F 13 02 F6 | 	mov	arg01, local01
119c8     00 16 06 F6 | 	mov	arg03, #0
119cc     80 FA B0 FD | 	call	#__system___basic_open_string
119d0                 | '   do
119d0                 | LR__1497
119d0     09 12 06 F6 | 	mov	arg01, #9
119d4     80 F0 B0 FD | 	call	#__system___basic_read_line
119d8     FD 1E 02 F6 | 	mov	local01, result1
119dc     37 00 00 FF 
119e0     1C E4 05 F1 | 	add	objptr, ##28188
119e4     F2 1E 62 FC | 	wrlong	local01, objptr
119e8     37 00 00 FF 
119ec     1C E4 85 F1 | 	sub	objptr, ##28188
119f0     54 FD BE FD | 	call	#_interpret
119f4     37 00 00 FF 
119f8     1C E4 05 F1 | 	add	objptr, ##28188
119fc     F2 12 02 FB | 	rdlong	arg01, objptr
11a00     37 00 00 FF 
11a04     1C E4 85 F1 | 	sub	objptr, ##28188
11a08     84 01 00 FF 
11a0c     EA 14 06 F6 | 	mov	arg02, ##@LR__5466
11a10     60 EE B0 FD | 	call	#__system___string_cmp
11a14     00 FA 0D F2 | 	cmp	result1, #0 wz
11a18     B4 FF 9F 5D |  if_ne	jmp	#LR__1497
11a1c                 | '   close #9   
11a1c     09 12 06 F6 | 	mov	arg01, #9
11a20     BC 3E B1 FD | 	call	#__system__close
11a24     08 00 90 FD | 	jmp	#LR__1499
11a28                 | LR__1498
11a28     1E 12 06 F6 | 	mov	arg01, #30
11a2c     8C B8 B0 FD | 	call	#_printerror
11a30                 | LR__1499
11a30                 | ' print "Loaded ";currentdir$+"/"+loadname
11a30     00 12 06 F6 | 	mov	arg01, #0
11a34     78 48 B1 FD | 	call	#__system___getiolock_0541
11a38     FD 12 02 F6 | 	mov	arg01, result1
11a3c     0C EE B0 FD | 	call	#__system___lockmem
11a40     84 01 00 FF 
11a44     EB 14 06 F6 | 	mov	arg02, ##@LR__5467
11a48     00 12 06 F6 | 	mov	arg01, #0
11a4c     00 16 06 F6 | 	mov	arg03, #0
11a50     EC FA B0 FD | 	call	#__system___basic_print_string
11a54     00 1E 06 F6 | 	mov	local01, #0
11a58     4A 00 00 FF 
11a5c     94 E4 05 F1 | 	add	objptr, ##38036
11a60     F2 12 02 FB | 	rdlong	arg01, objptr
11a64     4A 00 00 FF 
11a68     94 E4 85 F1 | 	sub	objptr, ##38036
11a6c     84 01 00 FF 
11a70     F3 14 06 F6 | 	mov	arg02, ##@LR__5468
11a74     30 EE B0 FD | 	call	#__system___string_concat
11a78     FD 12 02 F6 | 	mov	arg01, result1
11a7c     51 00 00 FF 
11a80     D8 E5 05 F1 | 	add	objptr, ##41944
11a84     F2 14 02 FB | 	rdlong	arg02, objptr
11a88     51 00 00 FF 
11a8c     D8 E5 85 F1 | 	sub	objptr, ##41944
11a90     14 EE B0 FD | 	call	#__system___string_concat
11a94     FD 14 02 F6 | 	mov	arg02, result1
11a98     0F 13 02 F6 | 	mov	arg01, local01
11a9c     00 16 06 F6 | 	mov	arg03, #0
11aa0     9C FA B0 FD | 	call	#__system___basic_print_string
11aa4     00 12 06 F6 | 	mov	arg01, #0
11aa8     0A 14 06 F6 | 	mov	arg02, #10
11aac     00 16 06 F6 | 	mov	arg03, #0
11ab0     34 FA B0 FD | 	call	#__system___basic_print_char
11ab4     00 12 06 F6 | 	mov	arg01, #0
11ab8     F4 47 B1 FD | 	call	#__system___getiolock_0541
11abc     FD 00 68 FC | 	wrlong	#0, result1
11ac0                 | LR__1500
11ac0     A7 F0 03 F6 | 	mov	ptra, fp
11ac4     B2 00 A0 FD | 	call	#popregs_
11ac8                 | _do_load_ret
11ac8     2D 00 64 FD | 	ret
11acc                 | 
11acc                 | ' 
11acc                 | ' '-------------------- log
11acc                 | ' 
11acc                 | ' sub do_log
11acc                 | _do_log
11acc     01 4A 05 F6 | 	mov	COUNT_, #1
11ad0     A8 00 A0 FD | 	call	#pushregs_
11ad4     14 F0 07 F1 | 	add	ptra, #20
11ad8     4A 00 00 FF 
11adc     80 E4 05 F1 | 	add	objptr, ##38016
11ae0     F2 1E 02 FB | 	rdlong	local01, objptr
11ae4     0F 17 02 F6 | 	mov	arg03, local01
11ae8     01 16 66 F0 | 	shl	arg03, #1
11aec     0F 17 02 F1 | 	add	arg03, local01
11af0     02 16 66 F0 | 	shl	arg03, #2
11af4     03 00 00 FF 
11af8     04 E4 85 F1 | 	sub	objptr, ##1540
11afc     F2 16 02 F1 | 	add	arg03, objptr
11b00     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11b04     0C 4E 05 F1 | 	add	fp, #12
11b08     A7 16 62 FC | 	wrlong	arg03, fp
11b0c                 | ' 
11b0c                 | ' numpar=compiledline(lineptr_e).result.uresult
11b0c                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
11b0c     0C 4E 85 F1 | 	sub	fp, #12
11b10     47 00 00 FF 
11b14     7C E4 85 F1 | 	sub	objptr, ##36476
11b18     0C 4E 05 51 |  if_ne	add	fp, #12
11b1c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11b20     0C 4E 85 51 |  if_ne	sub	fp, #12
11b24     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
11b28     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
11b2c     00 12 06 F6 | 	mov	arg01, #0
11b30     7C 47 B1 FD | 	call	#__system___getiolock_0541
11b34     FD 12 02 F6 | 	mov	arg01, result1
11b38     10 ED B0 FD | 	call	#__system___lockmem
11b3c     84 01 00 FF 
11b40     F5 14 06 F6 | 	mov	arg02, ##@LR__5469
11b44     00 12 06 F6 | 	mov	arg01, #0
11b48     00 16 06 F6 | 	mov	arg03, #0
11b4c     F0 F9 B0 FD | 	call	#__system___basic_print_string
11b50     00 12 06 F6 | 	mov	arg01, #0
11b54     58 47 B1 FD | 	call	#__system___getiolock_0541
11b58     FD 00 68 FC | 	wrlong	#0, result1
11b5c     27 12 06 F6 | 	mov	arg01, #39
11b60     58 B7 B0 FD | 	call	#_printerror
11b64     D0 00 90 FD | 	jmp	#LR__1513
11b68                 | LR__1510
11b68                 | ' if numpar=2 then 
11b68     0C 4E 05 F1 | 	add	fp, #12
11b6c     A7 1E 02 FB | 	rdlong	local01, fp
11b70     0C 4E 85 F1 | 	sub	fp, #12
11b74     02 1E 0E F2 | 	cmp	local01, #2 wz
11b78     48 00 90 5D |  if_ne	jmp	#LR__1511
11b7c     1C 98 BF FD | 	call	#_pop
11b80     FF 1E 02 F6 | 	mov	local01, result3
11b84     A7 FA 61 FC | 	wrlong	result1, fp
11b88     04 4E 05 F1 | 	add	fp, #4
11b8c     A7 FC 61 FC | 	wrlong	result2, fp
11b90     04 4E 05 F1 | 	add	fp, #4
11b94     A7 1E 62 FC | 	wrlong	local01, fp
11b98     08 4E 85 F1 | 	sub	fp, #8
11b9c     A7 12 02 F6 | 	mov	arg01, fp
11ba0     98 9A BF FD | 	call	#_converttofloat
11ba4     FD 14 02 F6 | 	mov	arg02, result1
11ba8     FC 16 20 FF 
11bac     54 12 06 F6 | 	mov	arg01, ##1076754516
11bb0     1C 28 B1 FD | 	call	#__system____builtin_logbase
11bb4     10 4E 05 F1 | 	add	fp, #16
11bb8     A7 FA 61 FC | 	wrlong	result1, fp
11bbc     10 4E 85 F1 | 	sub	fp, #16
11bc0     10 00 90 FD | 	jmp	#LR__1512
11bc4                 | LR__1511
11bc4     10 4E 05 F1 | 	add	fp, #16
11bc8     00 C0 9F FF 
11bcc     A7 00 68 FC | 	wrlong	##1065353216, fp
11bd0     10 4E 85 F1 | 	sub	fp, #16
11bd4                 | LR__1512
11bd4     C4 97 BF FD | 	call	#_pop
11bd8     FF 1E 02 F6 | 	mov	local01, result3
11bdc     A7 FA 61 FC | 	wrlong	result1, fp
11be0     04 4E 05 F1 | 	add	fp, #4
11be4     A7 FC 61 FC | 	wrlong	result2, fp
11be8     04 4E 05 F1 | 	add	fp, #4
11bec     A7 1E 62 FC | 	wrlong	local01, fp
11bf0     08 4E 85 F1 | 	sub	fp, #8
11bf4     A7 12 02 F6 | 	mov	arg01, fp
11bf8     40 9A BF FD | 	call	#_converttofloat
11bfc     FD 14 02 F6 | 	mov	arg02, result1
11c00     FC 16 20 FF 
11c04     54 12 06 F6 | 	mov	arg01, ##1076754516
11c08     C4 27 B1 FD | 	call	#__system____builtin_logbase
11c0c     FD 12 02 F6 | 	mov	arg01, result1
11c10     10 4E 05 F1 | 	add	fp, #16
11c14     A7 14 02 FB | 	rdlong	arg02, fp
11c18     10 4E 85 F1 | 	sub	fp, #16
11c1c     E4 19 B1 FD | 	call	#__system___float_div
11c20     A7 FA 61 FC | 	wrlong	result1, fp
11c24     08 4E 05 F1 | 	add	fp, #8
11c28     A7 3C 68 FC | 	wrlong	#30, fp
11c2c     08 4E 85 F1 | 	sub	fp, #8
11c30     A7 12 02 F6 | 	mov	arg01, fp
11c34     FC 97 BF FD | 	call	#_push
11c38                 | LR__1513
11c38     A7 F0 03 F6 | 	mov	ptra, fp
11c3c     B2 00 A0 FD | 	call	#popregs_
11c40                 | _do_log_ret
11c40     2D 00 64 FD | 	ret
11c44                 | 
11c44                 | ' 
11c44                 | ' '-------------------- mid$
11c44                 | ' 
11c44                 | ' sub do_mid
11c44                 | _do_mid
11c44     00 4A 05 F6 | 	mov	COUNT_, #0
11c48     A8 00 A0 FD | 	call	#pushregs_
11c4c     18 F0 07 F1 | 	add	ptra, #24
11c50     4A 00 00 FF 
11c54     80 E4 05 F1 | 	add	objptr, ##38016
11c58     F2 16 02 FB | 	rdlong	arg03, objptr
11c5c     0B 15 02 F6 | 	mov	arg02, arg03
11c60     01 14 66 F0 | 	shl	arg02, #1
11c64     0B 15 02 F1 | 	add	arg02, arg03
11c68     02 14 66 F0 | 	shl	arg02, #2
11c6c     03 00 00 FF 
11c70     04 E4 85 F1 | 	sub	objptr, ##1540
11c74     F2 14 02 F1 | 	add	arg02, objptr
11c78     0A 17 02 FB | 	rdlong	arg03, arg02
11c7c     0C 4E 05 F1 | 	add	fp, #12
11c80     A7 16 62 FC | 	wrlong	arg03, fp
11c84                 | ' 
11c84                 | ' numpar=compiledline(lineptr_e).result.uresult
11c84                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
11c84     0C 4E 85 F1 | 	sub	fp, #12
11c88     03 16 0E F2 | 	cmp	arg03, #3 wz
11c8c     47 00 00 FF 
11c90     7C E4 85 F1 | 	sub	objptr, ##36476
11c94     3C 00 90 AD |  if_e	jmp	#LR__1520
11c98     00 12 06 F6 | 	mov	arg01, #0
11c9c     10 46 B1 FD | 	call	#__system___getiolock_0541
11ca0     FD 12 02 F6 | 	mov	arg01, result1
11ca4     A4 EB B0 FD | 	call	#__system___lockmem
11ca8     84 01 00 FF 
11cac     FB 14 06 F6 | 	mov	arg02, ##@LR__5470
11cb0     00 12 06 F6 | 	mov	arg01, #0
11cb4     00 16 06 F6 | 	mov	arg03, #0
11cb8     84 F8 B0 FD | 	call	#__system___basic_print_string
11cbc     00 12 06 F6 | 	mov	arg01, #0
11cc0     EC 45 B1 FD | 	call	#__system___getiolock_0541
11cc4     FD 00 68 FC | 	wrlong	#0, result1
11cc8     27 12 06 F6 | 	mov	arg01, #39
11ccc     EC B5 B0 FD | 	call	#_printerror
11cd0     28 01 90 FD | 	jmp	#LR__1523
11cd4                 | LR__1520
11cd4     C4 96 BF FD | 	call	#_pop
11cd8     FF 16 02 F6 | 	mov	arg03, result3
11cdc     A7 FA 61 FC | 	wrlong	result1, fp
11ce0     04 4E 05 F1 | 	add	fp, #4
11ce4     A7 FC 61 FC | 	wrlong	result2, fp
11ce8     04 4E 05 F1 | 	add	fp, #4
11cec     A7 16 62 FC | 	wrlong	arg03, fp
11cf0     08 4E 85 F1 | 	sub	fp, #8
11cf4     A7 12 02 F6 | 	mov	arg01, fp
11cf8     84 98 BF FD | 	call	#_converttoint
11cfc     FD 16 02 F6 | 	mov	arg03, result1
11d00     14 4E 05 F1 | 	add	fp, #20
11d04     A7 16 62 FC | 	wrlong	arg03, fp
11d08     14 4E 85 F1 | 	sub	fp, #20
11d0c     8C 96 BF FD | 	call	#_pop
11d10     FF 16 02 F6 | 	mov	arg03, result3
11d14     A7 FA 61 FC | 	wrlong	result1, fp
11d18     04 4E 05 F1 | 	add	fp, #4
11d1c     A7 FC 61 FC | 	wrlong	result2, fp
11d20     04 4E 05 F1 | 	add	fp, #4
11d24     A7 16 62 FC | 	wrlong	arg03, fp
11d28     08 4E 85 F1 | 	sub	fp, #8
11d2c     A7 12 02 F6 | 	mov	arg01, fp
11d30     4C 98 BF FD | 	call	#_converttoint
11d34     FD 16 02 F6 | 	mov	arg03, result1
11d38     10 4E 05 F1 | 	add	fp, #16
11d3c     A7 16 62 FC | 	wrlong	arg03, fp
11d40     10 4E 85 F1 | 	sub	fp, #16
11d44     54 96 BF FD | 	call	#_pop
11d48     FF 16 02 F6 | 	mov	arg03, result3
11d4c     A7 FA 61 FC | 	wrlong	result1, fp
11d50     04 4E 05 F1 | 	add	fp, #4
11d54     A7 FC 61 FC | 	wrlong	result2, fp
11d58     04 4E 05 F1 | 	add	fp, #4
11d5c     A7 16 62 FC | 	wrlong	arg03, fp
11d60                 | ' t1=pop() : arg2=converttoint(t1)
11d60                 | ' t1=pop() : arg1=converttoint(t1)
11d60                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11d60     08 4E 85 F1 | 	sub	fp, #8
11d64     2B 16 0E F2 | 	cmp	arg03, #43 wz
11d68     18 00 90 5D |  if_ne	jmp	#LR__1521
11d6c     A7 12 02 FB | 	rdlong	arg01, fp
11d70     A0 97 BF FD | 	call	#_convertstring
11d74     A7 FA 61 FC | 	wrlong	result1, fp
11d78     08 4E 05 F1 | 	add	fp, #8
11d7c     A7 3E 68 FC | 	wrlong	#31, fp
11d80     08 4E 85 F1 | 	sub	fp, #8
11d84                 | LR__1521
11d84                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
11d84     08 4E 05 F1 | 	add	fp, #8
11d88     A7 16 02 FB | 	rdlong	arg03, fp
11d8c     08 4E 85 F1 | 	sub	fp, #8
11d90     1F 16 0E F2 | 	cmp	arg03, #31 wz
11d94     3C 00 90 AD |  if_e	jmp	#LR__1522
11d98     00 12 06 F6 | 	mov	arg01, #0
11d9c     10 45 B1 FD | 	call	#__system___getiolock_0541
11da0     FD 12 02 F6 | 	mov	arg01, result1
11da4     A4 EA B0 FD | 	call	#__system___lockmem
11da8     84 01 00 FF 
11dac     02 15 06 F6 | 	mov	arg02, ##@LR__5471
11db0     00 12 06 F6 | 	mov	arg01, #0
11db4     00 16 06 F6 | 	mov	arg03, #0
11db8     84 F7 B0 FD | 	call	#__system___basic_print_string
11dbc     00 12 06 F6 | 	mov	arg01, #0
11dc0     EC 44 B1 FD | 	call	#__system___getiolock_0541
11dc4     FD 00 68 FC | 	wrlong	#0, result1
11dc8     0F 12 06 F6 | 	mov	arg01, #15
11dcc     EC B4 B0 FD | 	call	#_printerror
11dd0     28 00 90 FD | 	jmp	#LR__1523
11dd4                 | LR__1522
11dd4     A7 12 02 FB | 	rdlong	arg01, fp
11dd8     10 4E 05 F1 | 	add	fp, #16
11ddc     A7 14 02 FB | 	rdlong	arg02, fp
11de0     04 4E 05 F1 | 	add	fp, #4
11de4     A7 16 02 FB | 	rdlong	arg03, fp
11de8     14 4E 85 F1 | 	sub	fp, #20
11dec     F0 0B B1 FD | 	call	#__system__Mid_S
11df0     A7 FA 61 FC | 	wrlong	result1, fp
11df4     A7 12 02 F6 | 	mov	arg01, fp
11df8     38 96 BF FD | 	call	#_push
11dfc                 | LR__1523
11dfc     A7 F0 03 F6 | 	mov	ptra, fp
11e00     B2 00 A0 FD | 	call	#popregs_
11e04                 | _do_mid_ret
11e04     2D 00 64 FD | 	ret
11e08                 | 
11e08                 | ' 
11e08                 | ' '-------------------- mode
11e08                 | ' 
11e08                 | ' sub do_mode
11e08                 | _do_mode
11e08     05 4A 05 F6 | 	mov	COUNT_, #5
11e0c     A8 00 A0 FD | 	call	#pushregs_
11e10     88 95 BF FD | 	call	#_pop
11e14     FD 1E 02 F6 | 	mov	local01, result1
11e18     FE 20 02 F6 | 	mov	local02, result2
11e1c     FF 22 02 F6 | 	mov	local03, result3
11e20                 | ' t1=pop() 
11e20                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11e20     1E 22 0E F2 | 	cmp	local03, #30 wz
11e24     10 00 90 5D |  if_ne	jmp	#LR__1530
11e28     0F 13 02 F6 | 	mov	arg01, local01
11e2c     00 14 06 F6 | 	mov	arg02, #0
11e30     94 1A B1 FD | 	call	#__system___float_tointeger
11e34     FD 1E 02 F6 | 	mov	local01, result1
11e38                 | LR__1530
11e38                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11e38     1F 22 0E F2 | 	cmp	local03, #31 wz
11e3c     18 00 90 5D |  if_ne	jmp	#LR__1531
11e40     0F 13 02 F6 | 	mov	arg01, local01
11e44     C4 1D B1 FD | 	call	#__system____builtin_atof
11e48     FD 12 02 F6 | 	mov	arg01, result1
11e4c     00 14 06 F6 | 	mov	arg02, #0
11e50     74 1A B1 FD | 	call	#__system___float_tointeger
11e54     FD 1E 02 F6 | 	mov	local01, result1
11e58                 | LR__1531
11e58                 | ' select case t1.result.iresult
11e58     0F 25 02 F6 | 	mov	local04, local01
11e5c     05 24 26 F3 | 	fle	local04, #5
11e60     30 24 62 FD | 	jmprel	local04
11e64                 | LR__1532
11e64     14 00 90 FD | 	jmp	#LR__1533
11e68     A8 00 90 FD | 	jmp	#LR__1534
11e6c     10 01 90 FD | 	jmp	#LR__1535
11e70     78 01 90 FD | 	jmp	#LR__1536
11e74     E0 01 90 FD | 	jmp	#LR__1537
11e78     70 02 90 FD | 	jmp	#LR__1538
11e7c                 | LR__1533
11e7c     37 00 00 FF 
11e80     40 E4 05 F1 | 	add	objptr, ##28224
11e84     F2 02 68 FC | 	wrlong	#1, objptr
11e88     04 E4 85 F1 | 	sub	objptr, #4
11e8c     F2 34 69 FC | 	wrlong	#154, objptr
11e90     19 00 00 FF 
11e94     D8 E4 05 F1 | 	add	objptr, ##13016
11e98     F2 02 68 FC | 	wrlong	#1, objptr
11e9c     19 00 00 FF 
11ea0     DC E4 85 F1 | 	sub	objptr, ##13020
11ea4     F2 26 69 FC | 	wrlong	#147, objptr
11ea8     37 00 00 FF 
11eac     38 E4 85 F1 | 	sub	objptr, ##28216
11eb0     04 12 06 F6 | 	mov	arg01, #4
11eb4     68 CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
11eb8     37 00 00 FF 
11ebc     3C E4 05 F1 | 	add	objptr, ##28220
11ec0     F2 12 02 FB | 	rdlong	arg01, objptr
11ec4     04 E4 85 F1 | 	sub	objptr, #4
11ec8     F2 14 02 FB | 	rdlong	arg02, objptr
11ecc                 | ' 
11ecc                 | ' write_color:=ff
11ecc     36 00 00 FF 
11ed0     F7 E5 85 F1 | 	sub	objptr, ##28151
11ed4     F2 12 62 FC | 	wrlong	arg01, objptr
11ed8                 | ' write_background:=bb
11ed8     04 E4 05 F1 | 	add	objptr, #4
11edc     F2 14 62 FC | 	wrlong	arg02, objptr
11ee0     01 00 00 FF 
11ee4     00 EA 05 F1 | 	add	ptr__dat__, ##512
11ee8     51 00 00 FF 
11eec     73 E5 05 F1 | 	add	objptr, ##41843
11ef0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
11ef4     04 E4 85 F1 | 	sub	objptr, #4
11ef8     03 00 80 FF 
11efc     F2 30 69 FC | 	wrlong	##1688, objptr
11f00     51 00 00 FF 
11f04     B4 E5 85 F1 | 	sub	objptr, ##41908
11f08     01 00 00 FF 
11f0c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
11f10     D8 01 90 FD | 	jmp	#LR__1538
11f14                 | LR__1534
11f14     37 00 00 FF 
11f18     40 E4 05 F1 | 	add	objptr, ##28224
11f1c     F2 00 68 FC | 	wrlong	#0, objptr
11f20     04 E4 85 F1 | 	sub	objptr, #4
11f24     F2 2E 68 FC | 	wrlong	#23, objptr
11f28     19 00 00 FF 
11f2c     D8 E4 05 F1 | 	add	objptr, ##13016
11f30     F2 00 68 FC | 	wrlong	#0, objptr
11f34     19 00 00 FF 
11f38     DC E4 85 F1 | 	sub	objptr, ##13020
11f3c     F2 00 68 FC | 	wrlong	#0, objptr
11f40     37 00 00 FF 
11f44     38 E4 85 F1 | 	sub	objptr, ##28216
11f48     00 12 06 F6 | 	mov	arg01, #0
11f4c     D0 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
11f50     37 00 00 FF 
11f54     3C E4 05 F1 | 	add	objptr, ##28220
11f58     F2 12 02 FB | 	rdlong	arg01, objptr
11f5c     04 E4 85 F1 | 	sub	objptr, #4
11f60     F2 14 02 FB | 	rdlong	arg02, objptr
11f64                 | ' 
11f64                 | ' write_color:=ff
11f64     36 00 00 FF 
11f68     F7 E5 85 F1 | 	sub	objptr, ##28151
11f6c     F2 12 62 FC | 	wrlong	arg01, objptr
11f70                 | ' write_background:=bb
11f70     04 E4 05 F1 | 	add	objptr, #4
11f74     F2 14 62 FC | 	wrlong	arg02, objptr
11f78     45 E4 85 F1 | 	sub	objptr, #69
11f7c     6C 01 90 FD | 	jmp	#LR__1538
11f80                 | LR__1535
11f80     37 00 00 FF 
11f84     40 E4 05 F1 | 	add	objptr, ##28224
11f88     F2 00 68 FC | 	wrlong	#0, objptr
11f8c     04 E4 85 F1 | 	sub	objptr, #4
11f90     F2 6A 69 FC | 	wrlong	#181, objptr
11f94     19 00 00 FF 
11f98     D8 E4 05 F1 | 	add	objptr, ##13016
11f9c     F2 00 68 FC | 	wrlong	#0, objptr
11fa0     19 00 00 FF 
11fa4     DC E4 85 F1 | 	sub	objptr, ##13020
11fa8     F2 00 68 FC | 	wrlong	#0, objptr
11fac     37 00 00 FF 
11fb0     38 E4 85 F1 | 	sub	objptr, ##28216
11fb4     00 12 06 F6 | 	mov	arg01, #0
11fb8     64 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
11fbc     37 00 00 FF 
11fc0     3C E4 05 F1 | 	add	objptr, ##28220
11fc4     F2 12 02 FB | 	rdlong	arg01, objptr
11fc8     04 E4 85 F1 | 	sub	objptr, #4
11fcc     F2 14 02 FB | 	rdlong	arg02, objptr
11fd0                 | ' 
11fd0                 | ' write_color:=ff
11fd0     36 00 00 FF 
11fd4     F7 E5 85 F1 | 	sub	objptr, ##28151
11fd8     F2 12 62 FC | 	wrlong	arg01, objptr
11fdc                 | ' write_background:=bb
11fdc     04 E4 05 F1 | 	add	objptr, #4
11fe0     F2 14 62 FC | 	wrlong	arg02, objptr
11fe4     45 E4 85 F1 | 	sub	objptr, #69
11fe8     00 01 90 FD | 	jmp	#LR__1538
11fec                 | LR__1536
11fec     37 00 00 FF 
11ff0     40 E4 05 F1 | 	add	objptr, ##28224
11ff4     F2 00 68 FC | 	wrlong	#0, objptr
11ff8     04 E4 85 F1 | 	sub	objptr, #4
11ffc     F2 1E 68 FC | 	wrlong	#15, objptr
12000     19 00 00 FF 
12004     D8 E4 05 F1 | 	add	objptr, ##13016
12008     F2 00 68 FC | 	wrlong	#0, objptr
1200c     19 00 00 FF 
12010     DC E4 85 F1 | 	sub	objptr, ##13020
12014     F2 00 68 FC | 	wrlong	#0, objptr
12018     37 00 00 FF 
1201c     38 E4 85 F1 | 	sub	objptr, ##28216
12020     00 12 06 F6 | 	mov	arg01, #0
12024     F8 CD B0 FD | 	call	#_hg010b_spin2_setfontfamily
12028     37 00 00 FF 
1202c     3C E4 05 F1 | 	add	objptr, ##28220
12030     F2 12 02 FB | 	rdlong	arg01, objptr
12034     04 E4 85 F1 | 	sub	objptr, #4
12038     F2 14 02 FB | 	rdlong	arg02, objptr
1203c                 | ' 
1203c                 | ' write_color:=ff
1203c     36 00 00 FF 
12040     F7 E5 85 F1 | 	sub	objptr, ##28151
12044     F2 12 62 FC | 	wrlong	arg01, objptr
12048                 | ' write_background:=bb
12048     04 E4 05 F1 | 	add	objptr, #4
1204c     F2 14 62 FC | 	wrlong	arg02, objptr
12050     45 E4 85 F1 | 	sub	objptr, #69
12054     94 00 90 FD | 	jmp	#LR__1538
12058                 | LR__1537
12058     37 00 00 FF 
1205c     40 E4 05 F1 | 	add	objptr, ##28224
12060     F2 02 68 FC | 	wrlong	#1, objptr
12064     04 E4 85 F1 | 	sub	objptr, #4
12068     F2 02 68 FC | 	wrlong	#1, objptr
1206c     19 00 00 FF 
12070     D8 E4 05 F1 | 	add	objptr, ##13016
12074     F2 02 68 FC | 	wrlong	#1, objptr
12078     19 00 00 FF 
1207c     DC E4 85 F1 | 	sub	objptr, ##13020
12080     F2 1C 68 FC | 	wrlong	#14, objptr
12084     37 00 00 FF 
12088     38 E4 85 F1 | 	sub	objptr, ##28216
1208c     04 12 06 F6 | 	mov	arg01, #4
12090     8C CD B0 FD | 	call	#_hg010b_spin2_setfontfamily
12094     37 00 00 FF 
12098     3C E4 05 F1 | 	add	objptr, ##28220
1209c     F2 12 02 FB | 	rdlong	arg01, objptr
120a0     04 E4 85 F1 | 	sub	objptr, #4
120a4     F2 14 02 FB | 	rdlong	arg02, objptr
120a8                 | ' 
120a8                 | ' write_color:=ff
120a8     36 00 00 FF 
120ac     F7 E5 85 F1 | 	sub	objptr, ##28151
120b0     F2 12 62 FC | 	wrlong	arg01, objptr
120b4                 | ' write_background:=bb
120b4     04 E4 05 F1 | 	add	objptr, #4
120b8     F2 14 62 FC | 	wrlong	arg02, objptr
120bc     07 00 00 FF 
120c0     82 EB 05 F1 | 	add	ptr__dat__, ##3970
120c4     51 00 00 FF 
120c8     73 E5 05 F1 | 	add	objptr, ##41843
120cc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
120d0     04 E4 85 F1 | 	sub	objptr, #4
120d4     03 00 80 FF 
120d8     F2 30 69 FC | 	wrlong	##1688, objptr
120dc     51 00 00 FF 
120e0     B4 E5 85 F1 | 	sub	objptr, ##41908
120e4     07 00 00 FF 
120e8     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
120ec                 | LR__1538
120ec     51 00 00 FF 
120f0     B0 E5 05 F1 | 	add	objptr, ##41904
120f4     F2 1E 62 FC | 	wrlong	local01, objptr
120f8     04 E4 85 F1 | 	sub	objptr, #4
120fc     F2 12 02 FB | 	rdlong	arg01, objptr
12100     0E 00 00 FF 
12104     50 E5 85 F1 | 	sub	objptr, ##7504
12108     F2 26 02 FB | 	rdlong	local05, objptr
1210c     43 00 00 FF 
12110     5C E4 85 F1 | 	sub	objptr, ##34396
12114     13 13 82 F1 | 	sub	arg01, local05
12118     00 14 06 F6 | 	mov	arg02, #0
1211c     0A 16 06 F6 | 	mov	arg03, #10
12120     F8 09 B1 FD | 	call	#__system__Number_S
12124     FD 12 02 F6 | 	mov	arg01, result1
12128     84 01 00 FF 
1212c     09 15 06 F6 | 	mov	arg02, ##@LR__5472
12130     74 E7 B0 FD | 	call	#__system___string_concat
12134     50 00 00 FF 
12138     10 E5 05 F1 | 	add	objptr, ##41232
1213c     F2 FA 61 FC | 	wrlong	result1, objptr
12140     19 00 00 FF 
12144     D4 E4 85 F1 | 	sub	objptr, ##13012
12148     F2 12 02 FB | 	rdlong	arg01, objptr
1214c     04 E4 85 F1 | 	sub	objptr, #4
12150     F2 14 02 FB | 	rdlong	arg02, objptr
12154     37 00 00 FF 
12158     38 E4 85 F1 | 	sub	objptr, ##28216
1215c     10 CE B0 FD | 	call	#_hg010b_spin2_cls
12160     84 01 00 FF 
12164     1B 13 06 F6 | 	mov	arg01, ##@LR__5473
12168                 | ' 
12168                 | ' write(text)
12168     C4 D1 B0 FD | 	call	#_hg010b_spin2_write
1216c                 | ' crlf
1216c     C0 D6 B0 FD | 	call	#_hg010b_spin2_crlf
12170     18 00 00 FF 
12174     40 EB 05 F1 | 	add	ptr__dat__, ##12608
12178     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1217c     18 00 00 FF 
12180     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
12184                 | ' 
12184                 | ' write(text)
12184     A8 D1 B0 FD | 	call	#_hg010b_spin2_write
12188                 | ' crlf
12188     A4 D6 B0 FD | 	call	#_hg010b_spin2_crlf
1218c     50 00 00 FF 
12190     10 E5 05 F1 | 	add	objptr, ##41232
12194     F2 12 02 FB | 	rdlong	arg01, objptr
12198     50 00 00 FF 
1219c     10 E5 85 F1 | 	sub	objptr, ##41232
121a0                 | ' 
121a0                 | ' write(text)
121a0     8C D1 B0 FD | 	call	#_hg010b_spin2_write
121a4                 | ' crlf
121a4     88 D6 B0 FD | 	call	#_hg010b_spin2_crlf
121a8     A7 F0 03 F6 | 	mov	ptra, fp
121ac     B2 00 A0 FD | 	call	#popregs_
121b0                 | _do_mode_ret
121b0     2D 00 64 FD | 	ret
121b4                 | 
121b4                 | ' 
121b4                 | ' '-------------------- mouse
121b4                 | ' 
121b4                 | ' sub do_mouse
121b4                 | _do_mouse
121b4     E4 91 BF FD | 	call	#_pop
121b8     00 FA 4D F2 | 	cmps	result1, #0 wz
121bc                 | ' 
121bc                 | ' t1=pop()
121bc                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
121bc     14 00 90 5D |  if_ne	jmp	#LR__1540
121c0     10 12 06 F6 | 	mov	arg01, #16
121c4     00 14 06 F6 | 	mov	arg02, #0
121c8     00 16 06 F6 | 	mov	arg03, #0
121cc     80 C0 B0 FD | 	call	#_hg010b_spin2_setspritesize
121d0     10 00 90 FD | 	jmp	#LR__1541
121d4                 | LR__1540
121d4     10 12 06 F6 | 	mov	arg01, #16
121d8     20 14 06 F6 | 	mov	arg02, #32
121dc     20 16 06 F6 | 	mov	arg03, #32
121e0     6C C0 B0 FD | 	call	#_hg010b_spin2_setspritesize
121e4                 | LR__1541
121e4                 | _do_mouse_ret
121e4     2D 00 64 FD | 	ret
121e8                 | 
121e8                 | ' 
121e8                 | ' '-------------------- mousek
121e8                 | ' 
121e8                 | ' sub do_mousek
121e8                 | _do_mousek
121e8     00 4A 05 F6 | 	mov	COUNT_, #0
121ec     A8 00 A0 FD | 	call	#pushregs_
121f0     0C F0 07 F1 | 	add	ptra, #12
121f4     08 4E 05 F1 | 	add	fp, #8
121f8     A7 3A 68 FC | 	wrlong	#29, fp
121fc     08 4E 85 F1 | 	sub	fp, #8
12200     51 00 00 FF 
12204     28 E5 05 F1 | 	add	objptr, ##41768
12208     F2 12 02 FB | 	rdlong	arg01, objptr
1220c     51 00 00 FF 
12210     28 E5 85 F1 | 	sub	objptr, ##41768
12214     A7 12 62 FC | 	wrlong	arg01, fp
12218     A7 12 02 F6 | 	mov	arg01, fp
1221c     14 92 BF FD | 	call	#_push
12220     A7 F0 03 F6 | 	mov	ptra, fp
12224     B2 00 A0 FD | 	call	#popregs_
12228                 | _do_mousek_ret
12228     2D 00 64 FD | 	ret
1222c                 | 
1222c                 | ' 
1222c                 | ' '-------------------- mousew
1222c                 | ' 
1222c                 | ' sub do_mousew
1222c                 | _do_mousew
1222c     00 4A 05 F6 | 	mov	COUNT_, #0
12230     A8 00 A0 FD | 	call	#pushregs_
12234     0C F0 07 F1 | 	add	ptra, #12
12238     08 4E 05 F1 | 	add	fp, #8
1223c     A7 38 68 FC | 	wrlong	#28, fp
12240     08 4E 85 F1 | 	sub	fp, #8
12244     51 00 00 FF 
12248     2C E5 05 F1 | 	add	objptr, ##41772
1224c     F2 12 02 FB | 	rdlong	arg01, objptr
12250     51 00 00 FF 
12254     2C E5 85 F1 | 	sub	objptr, ##41772
12258     A7 12 62 FC | 	wrlong	arg01, fp
1225c     A7 12 02 F6 | 	mov	arg01, fp
12260     D0 91 BF FD | 	call	#_push
12264     A7 F0 03 F6 | 	mov	ptra, fp
12268     B2 00 A0 FD | 	call	#popregs_
1226c                 | _do_mousew_ret
1226c     2D 00 64 FD | 	ret
12270                 | 
12270                 | ' 
12270                 | ' '-------------------- mousex
12270                 | ' 
12270                 | ' sub do_mousex
12270                 | _do_mousex
12270     00 4A 05 F6 | 	mov	COUNT_, #0
12274     A8 00 A0 FD | 	call	#pushregs_
12278     0C F0 07 F1 | 	add	ptra, #12
1227c     08 4E 05 F1 | 	add	fp, #8
12280     A7 3A 68 FC | 	wrlong	#29, fp
12284     08 4E 85 F1 | 	sub	fp, #8
12288     51 00 00 FF 
1228c     20 E5 05 F1 | 	add	objptr, ##41760
12290     F2 12 02 FB | 	rdlong	arg01, objptr
12294     51 00 00 FF 
12298     20 E5 85 F1 | 	sub	objptr, ##41760
1229c     A7 12 62 FC | 	wrlong	arg01, fp
122a0     A7 12 02 F6 | 	mov	arg01, fp
122a4     8C 91 BF FD | 	call	#_push
122a8     A7 F0 03 F6 | 	mov	ptra, fp
122ac     B2 00 A0 FD | 	call	#popregs_
122b0                 | _do_mousex_ret
122b0     2D 00 64 FD | 	ret
122b4                 | 
122b4                 | ' 
122b4                 | ' '-------------------- mousey
122b4                 | ' 
122b4                 | ' sub do_mousey
122b4                 | _do_mousey
122b4     00 4A 05 F6 | 	mov	COUNT_, #0
122b8     A8 00 A0 FD | 	call	#pushregs_
122bc     0C F0 07 F1 | 	add	ptra, #12
122c0     08 4E 05 F1 | 	add	fp, #8
122c4     A7 3A 68 FC | 	wrlong	#29, fp
122c8     08 4E 85 F1 | 	sub	fp, #8
122cc     51 00 00 FF 
122d0     24 E5 05 F1 | 	add	objptr, ##41764
122d4     F2 12 02 FB | 	rdlong	arg01, objptr
122d8     51 00 00 FF 
122dc     24 E5 85 F1 | 	sub	objptr, ##41764
122e0     A7 12 62 FC | 	wrlong	arg01, fp
122e4     A7 12 02 F6 | 	mov	arg01, fp
122e8     48 91 BF FD | 	call	#_push
122ec     A7 F0 03 F6 | 	mov	ptra, fp
122f0     B2 00 A0 FD | 	call	#popregs_
122f4                 | _do_mousey_ret
122f4     2D 00 64 FD | 	ret
122f8                 | 
122f8                 | ' 
122f8                 | ' '------------------ new
122f8                 | ' 
122f8                 | ' sub do_new
122f8                 | _do_new
122f8     03 4A 05 F6 | 	mov	COUNT_, #3
122fc     A8 00 A0 FD | 	call	#pushregs_
12300     13 12 C6 F9 | 	decod	arg01, #19
12304     01 14 66 F6 | 	neg	arg02, #1
12308     14 B1 B0 FD | 	call	#_pslpoke
1230c     35 00 00 FF 
12310     08 E4 05 F1 | 	add	objptr, ##27144
12314     F2 00 68 FC | 	wrlong	#0, objptr
12318                 | ' 
12318                 | ' pslpoke(memlo,$FFFFFFFF)
12318                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
12318     00 1E 06 F6 | 	mov	local01, #0
1231c     20 00 00 FF 
12320     10 E4 85 F1 | 	sub	objptr, ##16400
12324     97 1E 48 FB | 	callpa	#(@LR__1551-@LR__1550)>>2,fcache_load_ptr_
12328                 | LR__1550
12328     0F 17 02 F6 | 	mov	arg03, local01
1232c     04 16 66 F0 | 	shl	arg03, #4
12330     F2 16 02 F1 | 	add	arg03, objptr
12334     84 01 00 FF 
12338     1C 15 06 F6 | 	mov	arg02, ##@LR__5474
1233c     0B 15 62 FC | 	wrlong	arg02, arg03
12340     0F 21 02 F6 | 	mov	local02, local01
12344     04 20 66 F0 | 	shl	local02, #4
12348     F2 20 02 F1 | 	add	local02, objptr
1234c     0C 20 06 F1 | 	add	local02, #12
12350     10 01 68 FC | 	wrlong	#0, local02
12354     01 1E 06 F1 | 	add	local01, #1
12358     02 00 00 FF 
1235c     01 1E 56 F2 | 	cmps	local01, ##1025 wc
12360     C4 FF 9F CD |  if_b	jmp	#LR__1550
12364                 | LR__1551
12364     35 00 00 FF 
12368     90 E4 05 F1 | 	add	objptr, ##27280
1236c     00 04 80 FF 
12370     F2 00 68 FC | 	wrlong	##524288, objptr
12374     06 00 00 FF 
12378     30 E4 05 F1 | 	add	objptr, ##3120
1237c     00 04 80 FF 
12380     F2 00 68 FC | 	wrlong	##524288, objptr
12384     04 E4 05 F1 | 	add	objptr, #4
12388     00 04 80 FF 
1238c     F2 00 68 FC | 	wrlong	##524288, objptr
12390     0D 00 00 FF 
12394     64 E4 85 F1 | 	sub	objptr, ##6756
12398     F2 00 68 FC | 	wrlong	#0, objptr
1239c     07 00 00 FF 
123a0     24 E4 05 F1 | 	add	objptr, ##3620
123a4     F2 00 68 FC | 	wrlong	#0, objptr
123a8     07 00 00 FF 
123ac     20 E4 85 F1 | 	sub	objptr, ##3616
123b0     00 04 80 FF 
123b4     F2 00 68 FC | 	wrlong	##524288, objptr
123b8     07 00 00 FF 
123bc     30 E4 05 F1 | 	add	objptr, ##3632
123c0     F2 00 68 FC | 	wrlong	#0, objptr
123c4     04 E4 05 F1 | 	add	objptr, #4
123c8     FF FF FF FF 
123cc     F2 FE 6B FC | 	wrlong	##-1, objptr
123d0     06 00 00 FF 
123d4     78 E4 05 F1 | 	add	objptr, ##3192
123d8     F2 00 68 FC | 	wrlong	#0, objptr
123dc     04 E4 05 F1 | 	add	objptr, #4
123e0     F2 00 68 FC | 	wrlong	#0, objptr
123e4                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
123e4                 | ' stackpointer=0
123e4                 | ' lineptr=0 
123e4                 | ' programptr=memlo ': stringptr=0
123e4                 | ' 
123e4                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
123e4                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
123e4     00 1E 06 F6 | 	mov	local01, #0
123e8     06 00 00 FF 
123ec     74 E4 85 F1 | 	sub	objptr, ##3188
123f0     97 16 48 FB | 	callpa	#(@LR__1553-@LR__1552)>>2,fcache_load_ptr_
123f4                 | LR__1552
123f4     0F 21 02 F6 | 	mov	local02, local01
123f8     02 20 66 F0 | 	shl	local02, #2
123fc     0F 21 02 F1 | 	add	local02, local01
12400     02 20 66 F0 | 	shl	local02, #2
12404     F2 20 02 F1 | 	add	local02, objptr
12408     08 20 06 F1 | 	add	local02, #8
1240c     FF FF FF FF 
12410     10 FF 6B FC | 	wrlong	##-1, local02
12414     01 1E 06 F1 | 	add	local01, #1
12418     41 1E 56 F2 | 	cmps	local01, #65 wc
1241c     D4 FF 9F CD |  if_b	jmp	#LR__1552
12420                 | LR__1553
12420     4A 00 00 FF 
12424     98 E4 85 F1 | 	sub	objptr, ##38040
12428                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
12428     00 1E 06 F6 | 	mov	local01, #0
1242c                 | LR__1554
1242c     0F 21 02 F6 | 	mov	local02, local01
12430     02 20 66 F0 | 	shl	local02, #2
12434     51 00 00 FF 
12438     68 E5 05 F1 | 	add	objptr, ##41832
1243c     F2 20 02 F1 | 	add	local02, objptr
12440     10 23 0A FB | 	rdlong	local03, local02 wz
12444     51 00 00 FF 
12448     68 E5 85 F1 | 	sub	objptr, ##41832
1244c     34 00 90 AD |  if_e	jmp	#LR__1555
12450     0F 13 02 F6 | 	mov	arg01, local01
12454     00 14 06 F6 | 	mov	arg02, #0
12458     00 16 06 F6 | 	mov	arg03, #0
1245c     F0 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
12460     0F 21 02 F6 | 	mov	local02, local01
12464     02 20 66 F0 | 	shl	local02, #2
12468     51 00 00 FF 
1246c     68 E5 05 F1 | 	add	objptr, ##41832
12470     F2 20 02 F1 | 	add	local02, objptr
12474     10 13 02 FB | 	rdlong	arg01, local02
12478     51 00 00 FF 
1247c     68 E5 85 F1 | 	sub	objptr, ##41832
12480     E0 23 B1 FD | 	call	#__system___gc_free
12484                 | LR__1555
12484     01 1E 06 F1 | 	add	local01, #1
12488     10 1E 56 F2 | 	cmps	local01, #16 wc
1248c     9C FF 9F CD |  if_b	jmp	#LR__1554
12490     51 00 00 FF 
12494     BC E5 05 F1 | 	add	objptr, ##41916
12498     00 C0 9F FF 
1249c     F2 00 68 FC | 	wrlong	##1065353216, objptr
124a0     04 E4 05 F1 | 	add	objptr, #4
124a4     00 C0 9F FF 
124a8     F2 00 68 FC | 	wrlong	##1065353216, objptr
124ac     51 00 00 FF 
124b0     BC E5 85 F1 | 	sub	objptr, ##41916
124b4     F2 22 02 FB | 	rdlong	local03, objptr
124b8     51 00 00 FF 
124bc     A8 E5 05 F1 | 	add	objptr, ##41896
124c0     F2 22 62 FC | 	wrlong	local03, objptr
124c4     51 00 00 FF 
124c8     AC E5 85 F1 | 	sub	objptr, ##41900
124cc     11 12 06 F6 | 	mov	arg01, #17
124d0     08 14 06 F6 | 	mov	arg02, #8
124d4     10 16 06 F6 | 	mov	arg03, #16
124d8     74 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
124dc     10 12 06 F6 | 	mov	arg01, #16
124e0     20 14 06 F6 | 	mov	arg02, #32
124e4     20 16 06 F6 | 	mov	arg03, #32
124e8     64 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
124ec     84 01 00 FF 
124f0     1D 23 06 F6 | 	mov	local03, ##@LR__5475
124f4     51 00 00 FF 
124f8     D8 E5 05 F1 | 	add	objptr, ##41944
124fc     F2 22 62 FC | 	wrlong	local03, objptr
12500     51 00 00 FF 
12504     D8 E5 85 F1 | 	sub	objptr, ##41944
12508     D8 A1 B0 FD | 	call	#_init_audio
1250c     A7 F0 03 F6 | 	mov	ptra, fp
12510     B2 00 A0 FD | 	call	#popregs_
12514                 | _do_new_ret
12514     2D 00 64 FD | 	ret
12518                 | 
12518                 | ' 
12518                 | ' '-------------------- next
12518                 | ' 
12518                 | ' sub do_next()
12518                 | _do_next
12518     04 4A 05 F6 | 	mov	COUNT_, #4
1251c     A8 00 A0 FD | 	call	#pushregs_
12520     78 8E BF FD | 	call	#_pop
12524     FD 1E 02 F6 | 	mov	local01, result1
12528     FE 20 02 F6 | 	mov	local02, result2
1252c     FF 22 02 F6 | 	mov	local03, result3
12530                 | ' t1=pop() :varnum=t1.result.uresult
12530                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
12530     50 00 00 FF 
12534     08 E5 05 F1 | 	add	objptr, ##41224
12538     F2 12 02 FB | 	rdlong	arg01, objptr
1253c     09 15 02 F6 | 	mov	arg02, arg01
12540     02 14 66 F0 | 	shl	arg02, #2
12544     09 15 02 F1 | 	add	arg02, arg01
12548     02 14 66 F0 | 	shl	arg02, #2
1254c     06 00 00 FF 
12550     70 E4 85 F1 | 	sub	objptr, ##3184
12554     F2 14 02 F1 | 	add	arg02, objptr
12558     08 14 06 F1 | 	add	arg02, #8
1255c     0A 15 02 FB | 	rdlong	arg02, arg02
12560     0F 15 0A F2 | 	cmp	arg02, local01 wz
12564     4A 00 00 FF 
12568     98 E4 85 F1 | 	sub	objptr, ##38040
1256c     0C 00 90 AD |  if_e	jmp	#LR__1560
12570     25 12 06 F6 | 	mov	arg01, #37
12574     44 AD B0 FD | 	call	#_printerror
12578     54 03 90 FD | 	jmp	#LR__1567
1257c                 | LR__1560
1257c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
1257c     0F 15 02 F6 | 	mov	arg02, local01
12580     04 14 66 F0 | 	shl	arg02, #4
12584     14 00 00 FF 
12588     F8 E5 05 F1 | 	add	objptr, ##10744
1258c     F2 14 02 F1 | 	add	arg02, objptr
12590     0C 14 06 F1 | 	add	arg02, #12
12594     0A 15 02 FB | 	rdlong	arg02, arg02
12598     1E 14 0E F2 | 	cmp	arg02, #30 wz
1259c     14 00 00 FF 
125a0     F8 E5 85 F1 | 	sub	objptr, ##10744
125a4     54 00 90 5D |  if_ne	jmp	#LR__1561
125a8     0F 15 02 F6 | 	mov	arg02, local01
125ac     04 14 66 F0 | 	shl	arg02, #4
125b0     14 00 00 FF 
125b4     F8 E5 05 F1 | 	add	objptr, ##10744
125b8     F2 14 02 F1 | 	add	arg02, objptr
125bc     0C 14 06 F1 | 	add	arg02, #12
125c0     0A 39 68 FC | 	wrlong	#28, arg02
125c4     0F 25 02 F6 | 	mov	local04, local01
125c8     04 24 66 F0 | 	shl	local04, #4
125cc     F2 24 02 F1 | 	add	local04, objptr
125d0     0F 13 02 F6 | 	mov	arg01, local01
125d4     04 12 66 F0 | 	shl	arg01, #4
125d8     F2 12 02 F1 | 	add	arg01, objptr
125dc     04 12 06 F1 | 	add	arg01, #4
125e0     09 13 02 FB | 	rdlong	arg01, arg01
125e4     14 00 00 FF 
125e8     F8 E5 85 F1 | 	sub	objptr, ##10744
125ec     01 14 06 F6 | 	mov	arg02, #1
125f0     D4 12 B1 FD | 	call	#__system___float_tointeger
125f4     04 24 06 F1 | 	add	local04, #4
125f8     12 FB 61 FC | 	wrlong	result1, local04
125fc                 | LR__1561
125fc     50 00 00 FF 
12600     08 E5 05 F1 | 	add	objptr, ##41224
12604     F2 12 02 FB | 	rdlong	arg01, objptr
12608     09 25 02 F6 | 	mov	local04, arg01
1260c     02 24 66 F0 | 	shl	local04, #2
12610     09 25 02 F1 | 	add	local04, arg01
12614     02 24 66 F0 | 	shl	local04, #2
12618     06 00 00 FF 
1261c     70 E4 85 F1 | 	sub	objptr, ##3184
12620     F2 24 02 F1 | 	add	local04, objptr
12624     0C 24 06 F1 | 	add	local04, #12
12628     12 25 02 FB | 	rdlong	local04, local04
1262c     0F 13 02 F6 | 	mov	arg01, local01
12630     04 12 66 F0 | 	shl	arg01, #4
12634     35 00 00 FF 
12638     A0 E4 85 F1 | 	sub	objptr, ##27296
1263c     F2 12 02 F1 | 	add	arg01, objptr
12640     0F FF 01 F6 | 	mov	result3, local01
12644     04 FE 65 F0 | 	shl	result3, #4
12648     F2 FE 01 F1 | 	add	result3, objptr
1264c     04 FE 05 F1 | 	add	result3, #4
12650     FF FE 01 FB | 	rdlong	result3, result3
12654     12 FF 01 F1 | 	add	result3, local04
12658     04 12 06 F1 | 	add	arg01, #4
1265c     09 FF 61 FC | 	wrlong	result3, arg01
12660                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
12660                 | ' if fortable(fortop).stepval>=0 then
12660     3B 00 00 FF 
12664     10 E5 05 F1 | 	add	objptr, ##30480
12668     F2 12 02 FB | 	rdlong	arg01, objptr
1266c     09 25 02 F6 | 	mov	local04, arg01
12670     02 24 66 F0 | 	shl	local04, #2
12674     09 25 02 F1 | 	add	local04, arg01
12678     02 24 66 F0 | 	shl	local04, #2
1267c     06 00 00 FF 
12680     70 E4 85 F1 | 	sub	objptr, ##3184
12684     F2 24 02 F1 | 	add	local04, objptr
12688     0C 24 06 F1 | 	add	local04, #12
1268c     12 25 02 FB | 	rdlong	local04, local04
12690     00 24 56 F2 | 	cmps	local04, #0 wc
12694     4A 00 00 FF 
12698     98 E4 85 F1 | 	sub	objptr, ##38040
1269c     78 00 90 CD |  if_b	jmp	#LR__1562
126a0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
126a0     04 1E 66 F0 | 	shl	local01, #4
126a4     14 00 00 FF 
126a8     F8 E5 05 F1 | 	add	objptr, ##10744
126ac     F2 1E 02 F1 | 	add	local01, objptr
126b0     3B 00 00 FF 
126b4     10 E5 05 F1 | 	add	objptr, ##30480
126b8     F2 24 02 FB | 	rdlong	local04, objptr
126bc     12 13 02 F6 | 	mov	arg01, local04
126c0     02 12 66 F0 | 	shl	arg01, #2
126c4     12 13 02 F1 | 	add	arg01, local04
126c8     02 12 66 F0 | 	shl	arg01, #2
126cc     06 00 00 FF 
126d0     70 E4 85 F1 | 	sub	objptr, ##3184
126d4     F2 12 02 F1 | 	add	arg01, objptr
126d8     04 1E 06 F1 | 	add	local01, #4
126dc     0F 25 02 FB | 	rdlong	local04, local01
126e0     10 12 06 F1 | 	add	arg01, #16
126e4     09 13 02 FB | 	rdlong	arg01, arg01
126e8     09 25 5A F2 | 	cmps	local04, arg01 wcz
126ec     4A 00 00 FF 
126f0     98 E4 85 F1 | 	sub	objptr, ##38040
126f4     9C 00 90 ED |  if_be	jmp	#LR__1564
126f8     50 00 00 FF 
126fc     08 E5 05 F1 | 	add	objptr, ##41224
12700     F2 24 02 FB | 	rdlong	local04, objptr
12704     01 24 86 F1 | 	sub	local04, #1
12708     F2 24 62 FC | 	wrlong	local04, objptr
1270c     50 00 00 FF 
12710     08 E5 85 F1 | 	sub	objptr, ##41224
12714     B8 01 90 FD | 	jmp	#LR__1567
12718                 | LR__1562
12718                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
12718     0F 13 02 F6 | 	mov	arg01, local01
1271c     04 12 66 F0 | 	shl	arg01, #4
12720     14 00 00 FF 
12724     F8 E5 05 F1 | 	add	objptr, ##10744
12728     F2 12 02 F1 | 	add	arg01, objptr
1272c     3B 00 00 FF 
12730     10 E5 05 F1 | 	add	objptr, ##30480
12734     F2 24 02 FB | 	rdlong	local04, objptr
12738     12 1F 02 F6 | 	mov	local01, local04
1273c     02 1E 66 F0 | 	shl	local01, #2
12740     12 1F 02 F1 | 	add	local01, local04
12744     02 1E 66 F0 | 	shl	local01, #2
12748     06 00 00 FF 
1274c     70 E4 85 F1 | 	sub	objptr, ##3184
12750     F2 1E 02 F1 | 	add	local01, objptr
12754     04 12 06 F1 | 	add	arg01, #4
12758     09 13 02 FB | 	rdlong	arg01, arg01
1275c     10 1E 06 F1 | 	add	local01, #16
12760     0F 1F 02 FB | 	rdlong	local01, local01
12764     0F 13 52 F2 | 	cmps	arg01, local01 wc
12768     4A 00 00 FF 
1276c     98 E4 85 F1 | 	sub	objptr, ##38040
12770     20 00 90 3D |  if_ae	jmp	#LR__1563
12774     50 00 00 FF 
12778     08 E5 05 F1 | 	add	objptr, ##41224
1277c     F2 24 02 FB | 	rdlong	local04, objptr
12780     01 24 86 F1 | 	sub	local04, #1
12784     F2 24 62 FC | 	wrlong	local04, objptr
12788     50 00 00 FF 
1278c     08 E5 85 F1 | 	sub	objptr, ##41224
12790     3C 01 90 FD | 	jmp	#LR__1567
12794                 | LR__1563
12794                 | LR__1564
12794                 | ' ' if not returned, goto pointer 
12794                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
12794     50 00 00 FF 
12798     EC E4 05 F1 | 	add	objptr, ##41196
1279c     F2 24 02 FB | 	rdlong	local04, objptr
127a0     50 00 00 FF 
127a4     EC E4 85 F1 | 	sub	objptr, ##41196
127a8     01 24 16 F2 | 	cmp	local04, #1 wc
127ac     DC 00 90 CD |  if_b	jmp	#LR__1565
127b0     50 00 00 FF 
127b4     08 E5 05 F1 | 	add	objptr, ##41224
127b8     F2 1E 02 FB | 	rdlong	local01, objptr
127bc     0F 25 02 F6 | 	mov	local04, local01
127c0     02 24 66 F0 | 	shl	local04, #2
127c4     0F 25 02 F1 | 	add	local04, local01
127c8     02 24 66 F0 | 	shl	local04, #2
127cc     06 00 00 FF 
127d0     70 E4 85 F1 | 	sub	objptr, ##3184
127d4     F2 24 02 F1 | 	add	local04, objptr
127d8     06 00 00 FF 
127dc     20 E4 05 F1 | 	add	objptr, ##3104
127e0     F2 1E 02 FB | 	rdlong	local01, objptr
127e4     50 00 00 FF 
127e8     B8 E4 85 F1 | 	sub	objptr, ##41144
127ec     12 25 02 FB | 	rdlong	local04, local04
127f0     12 1F 0A F2 | 	cmp	local01, local04 wz
127f4     94 00 90 AD |  if_e	jmp	#LR__1565
127f8     50 00 00 FF 
127fc     08 E5 05 F1 | 	add	objptr, ##41224
12800     F2 1E 02 FB | 	rdlong	local01, objptr
12804     0F 25 02 F6 | 	mov	local04, local01
12808     02 24 66 F0 | 	shl	local04, #2
1280c     0F 25 02 F1 | 	add	local04, local01
12810     02 24 66 F0 | 	shl	local04, #2
12814     06 00 00 FF 
12818     70 E4 85 F1 | 	sub	objptr, ##3184
1281c     F2 24 02 F1 | 	add	local04, objptr
12820     12 25 02 FB | 	rdlong	local04, local04
12824     06 00 00 FF 
12828     20 E4 05 F1 | 	add	objptr, ##3104
1282c     F2 24 62 FC | 	wrlong	local04, objptr
12830     50 E4 05 F1 | 	add	objptr, #80
12834     F2 1E 02 FB | 	rdlong	local01, objptr
12838     0F 25 02 F6 | 	mov	local04, local01
1283c     02 24 66 F0 | 	shl	local04, #2
12840     0F 25 02 F1 | 	add	local04, local01
12844     02 24 66 F0 | 	shl	local04, #2
12848     06 00 00 FF 
1284c     70 E4 85 F1 | 	sub	objptr, ##3184
12850     F2 24 02 F1 | 	add	local04, objptr
12854     04 24 06 F1 | 	add	local04, #4
12858     12 25 02 FB | 	rdlong	local04, local04
1285c     06 00 00 FF 
12860     24 E4 05 F1 | 	add	objptr, ##3108
12864     F2 24 62 FC | 	wrlong	local04, objptr
12868     06 00 00 FF 
1286c     40 E4 85 F1 | 	sub	objptr, ##3136
12870     F2 24 02 FB | 	rdlong	local04, objptr
12874     01 24 86 F1 | 	sub	local04, #1
12878     04 E4 05 F1 | 	add	objptr, #4
1287c     F2 24 62 FC | 	wrlong	local04, objptr
12880     4A 00 00 FF 
12884     80 E4 85 F1 | 	sub	objptr, ##38016
12888     44 00 90 FD | 	jmp	#LR__1566
1288c                 | LR__1565
1288c     50 00 00 FF 
12890     08 E5 05 F1 | 	add	objptr, ##41224
12894     F2 24 02 FB | 	rdlong	local04, objptr
12898     12 1F 02 F6 | 	mov	local01, local04
1289c     02 1E 66 F0 | 	shl	local01, #2
128a0     12 1F 02 F1 | 	add	local01, local04
128a4     02 1E 66 F0 | 	shl	local01, #2
128a8     06 00 00 FF 
128ac     70 E4 85 F1 | 	sub	objptr, ##3184
128b0     F2 1E 02 F1 | 	add	local01, objptr
128b4     04 1E 06 F1 | 	add	local01, #4
128b8     0F 1F 02 FB | 	rdlong	local01, local01
128bc     01 1E 86 F1 | 	sub	local01, #1
128c0     18 E4 85 F1 | 	sub	objptr, #24
128c4     F2 1E 62 FC | 	wrlong	local01, objptr
128c8     4A 00 00 FF 
128cc     80 E4 85 F1 | 	sub	objptr, ##38016
128d0                 | LR__1566
128d0                 | LR__1567
128d0     A7 F0 03 F6 | 	mov	ptra, fp
128d4     B2 00 A0 FD | 	call	#popregs_
128d8                 | _do_next_ret
128d8     2D 00 64 FD | 	ret
128dc                 | 
128dc                 | ' 
128dc                 | ' '-------------------- no command (print "Unknown command")
128dc                 | ' 
128dc                 | ' sub do_no_command
128dc                 | _do_no_command
128dc     17 12 06 F6 | 	mov	arg01, #23
128e0     D8 A9 B0 FD | 	call	#_printerror
128e4                 | _do_no_command_ret
128e4     2D 00 64 FD | 	ret
128e8                 | 
128e8                 | ' 
128e8                 | ' '-------------------- nothing
128e8                 | ' 
128e8                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
128e8                 | _do_nothing
128e8                 | _do_nothing_ret
128e8     2D 00 64 FD | 	ret
128ec                 | 
128ec                 | ' 
128ec                 | ' '-------------------- open
128ec                 | ' 
128ec                 | ' sub do_open
128ec                 | _do_open
128ec     02 4A 05 F6 | 	mov	COUNT_, #2
128f0     A8 00 A0 FD | 	call	#pushregs_
128f4     20 F0 07 F1 | 	add	ptra, #32
128f8     4A 00 00 FF 
128fc     80 E4 05 F1 | 	add	objptr, ##38016
12900     F2 16 02 FB | 	rdlong	arg03, objptr
12904     0B 15 02 F6 | 	mov	arg02, arg03
12908     01 14 66 F0 | 	shl	arg02, #1
1290c     0B 15 02 F1 | 	add	arg02, arg03
12910     02 14 66 F0 | 	shl	arg02, #2
12914     03 00 00 FF 
12918     04 E4 85 F1 | 	sub	objptr, ##1540
1291c     F2 14 02 F1 | 	add	arg02, objptr
12920     0A 17 02 FB | 	rdlong	arg03, arg02
12924     10 4E 05 F1 | 	add	fp, #16
12928     A7 16 62 FC | 	wrlong	arg03, fp
1292c     10 4E 85 F1 | 	sub	fp, #16
12930     47 00 00 FF 
12934     7C E4 85 F1 | 	sub	objptr, ##36476
12938     60 8A BF FD | 	call	#_pop
1293c     FF 16 02 F6 | 	mov	arg03, result3
12940     A7 FA 61 FC | 	wrlong	result1, fp
12944     04 4E 05 F1 | 	add	fp, #4
12948     A7 FC 61 FC | 	wrlong	result2, fp
1294c     04 4E 05 F1 | 	add	fp, #4
12950     A7 16 62 FC | 	wrlong	arg03, fp
12954                 | ' 
12954                 | ' numpar=compiledline(lineptr_e).result.uresult
12954                 | ' 
12954                 | ' t1=pop()
12954                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12954     08 4E 85 F1 | 	sub	fp, #8
12958     2B 16 0E F2 | 	cmp	arg03, #43 wz
1295c     18 00 90 5D |  if_ne	jmp	#LR__1570
12960     A7 12 02 FB | 	rdlong	arg01, fp
12964     AC 8B BF FD | 	call	#_convertstring
12968     A7 FA 61 FC | 	wrlong	result1, fp
1296c     08 4E 05 F1 | 	add	fp, #8
12970     A7 3E 68 FC | 	wrlong	#31, fp
12974     08 4E 85 F1 | 	sub	fp, #8
12978                 | LR__1570
12978                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
12978     08 4E 05 F1 | 	add	fp, #8
1297c     A7 16 02 FB | 	rdlong	arg03, fp
12980     08 4E 85 F1 | 	sub	fp, #8
12984     1F 16 0E F2 | 	cmp	arg03, #31 wz
12988     44 00 90 AD |  if_e	jmp	#LR__1571
1298c     00 12 06 F6 | 	mov	arg01, #0
12990     1C 39 B1 FD | 	call	#__system___getiolock_0541
12994     FD 12 02 F6 | 	mov	arg01, result1
12998     B0 DE B0 FD | 	call	#__system___lockmem
1299c     84 01 00 FF 
129a0     28 15 06 F6 | 	mov	arg02, ##@LR__5476
129a4     00 12 06 F6 | 	mov	arg01, #0
129a8     00 16 06 F6 | 	mov	arg03, #0
129ac     90 EB B0 FD | 	call	#__system___basic_print_string
129b0     00 12 06 F6 | 	mov	arg01, #0
129b4     0A 14 06 F6 | 	mov	arg02, #10
129b8     00 16 06 F6 | 	mov	arg03, #0
129bc     28 EB B0 FD | 	call	#__system___basic_print_char
129c0     00 12 06 F6 | 	mov	arg01, #0
129c4     E8 38 B1 FD | 	call	#__system___getiolock_0541
129c8     FD 00 68 FC | 	wrlong	#0, result1
129cc     28 02 90 FD | 	jmp	#LR__1582
129d0                 | LR__1571
129d0     A7 16 02 FB | 	rdlong	arg03, fp
129d4     0C 4E 05 F1 | 	add	fp, #12
129d8     A7 16 62 FC | 	wrlong	arg03, fp
129dc     0C 4E 85 F1 | 	sub	fp, #12
129e0     B8 89 BF FD | 	call	#_pop
129e4     FF 16 02 F6 | 	mov	arg03, result3
129e8     A7 FA 61 FC | 	wrlong	result1, fp
129ec     04 4E 05 F1 | 	add	fp, #4
129f0     A7 FC 61 FC | 	wrlong	result2, fp
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 16 62 FC | 	wrlong	arg03, fp
129fc                 | ' filename=t1.result.sresult
129fc                 | ' t1=pop()
129fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
129fc     08 4E 85 F1 | 	sub	fp, #8
12a00     2B 16 0E F2 | 	cmp	arg03, #43 wz
12a04     18 00 90 5D |  if_ne	jmp	#LR__1572
12a08     A7 12 02 FB | 	rdlong	arg01, fp
12a0c     04 8B BF FD | 	call	#_convertstring
12a10     A7 FA 61 FC | 	wrlong	result1, fp
12a14     08 4E 05 F1 | 	add	fp, #8
12a18     A7 3E 68 FC | 	wrlong	#31, fp
12a1c     08 4E 85 F1 | 	sub	fp, #8
12a20                 | LR__1572
12a20     14 4E 05 F1 | 	add	fp, #20
12a24     A7 00 68 FC | 	wrlong	#0, fp
12a28                 | ' mode=0
12a28                 | ' if t1.result_type=result_string then
12a28     0C 4E 85 F1 | 	sub	fp, #12
12a2c     A7 14 02 FB | 	rdlong	arg02, fp
12a30     08 4E 85 F1 | 	sub	fp, #8
12a34     1F 14 0E F2 | 	cmp	arg02, #31 wz
12a38     64 00 90 5D |  if_ne	jmp	#LR__1573
12a3c                 | '   if t1.result.sresult="read" then mode=1
12a3c     A7 12 02 FB | 	rdlong	arg01, fp
12a40     84 01 00 FF 
12a44     3A 15 06 F6 | 	mov	arg02, ##@LR__5477
12a48     28 DE B0 FD | 	call	#__system___string_cmp
12a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
12a50     14 4E 05 A1 |  if_e	add	fp, #20
12a54     A7 02 68 AC |  if_e	wrlong	#1, fp
12a58     14 4E 85 A1 |  if_e	sub	fp, #20
12a5c                 | '   if t1.result.sresult="write" then mode=2
12a5c     A7 12 02 FB | 	rdlong	arg01, fp
12a60     84 01 00 FF 
12a64     3F 15 06 F6 | 	mov	arg02, ##@LR__5478
12a68     08 DE B0 FD | 	call	#__system___string_cmp
12a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
12a70     14 4E 05 A1 |  if_e	add	fp, #20
12a74     A7 04 68 AC |  if_e	wrlong	#2, fp
12a78     14 4E 85 A1 |  if_e	sub	fp, #20
12a7c                 | '   if t1.result.sresult="append" then mode=4
12a7c     A7 12 02 FB | 	rdlong	arg01, fp
12a80     84 01 00 FF 
12a84     45 15 06 F6 | 	mov	arg02, ##@LR__5479
12a88     E8 DD B0 FD | 	call	#__system___string_cmp
12a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
12a90     14 4E 05 A1 |  if_e	add	fp, #20
12a94     A7 08 68 AC |  if_e	wrlong	#4, fp
12a98     14 4E 85 A1 |  if_e	sub	fp, #20
12a9c     14 00 90 FD | 	jmp	#LR__1574
12aa0                 | LR__1573
12aa0     A7 12 02 F6 | 	mov	arg01, fp
12aa4     D8 8A BF FD | 	call	#_converttoint
12aa8     14 4E 05 F1 | 	add	fp, #20
12aac     A7 FA 61 FC | 	wrlong	result1, fp
12ab0     14 4E 85 F1 | 	sub	fp, #20
12ab4                 | LR__1574
12ab4     E4 88 BF FD | 	call	#_pop
12ab8     FF 16 02 F6 | 	mov	arg03, result3
12abc     A7 FA 61 FC | 	wrlong	result1, fp
12ac0     04 4E 05 F1 | 	add	fp, #4
12ac4     A7 FC 61 FC | 	wrlong	result2, fp
12ac8     04 4E 05 F1 | 	add	fp, #4
12acc     A7 16 62 FC | 	wrlong	arg03, fp
12ad0                 | ' t1=pop()
12ad0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
12ad0     08 4E 85 F1 | 	sub	fp, #8
12ad4     2C 16 0E F2 | 	cmp	arg03, #44 wz
12ad8     44 00 90 AD |  if_e	jmp	#LR__1575
12adc     00 12 06 F6 | 	mov	arg01, #0
12ae0     CC 37 B1 FD | 	call	#__system___getiolock_0541
12ae4     FD 12 02 F6 | 	mov	arg01, result1
12ae8     60 DD B0 FD | 	call	#__system___lockmem
12aec     84 01 00 FF 
12af0     4C 15 06 F6 | 	mov	arg02, ##@LR__5480
12af4     00 12 06 F6 | 	mov	arg01, #0
12af8     00 16 06 F6 | 	mov	arg03, #0
12afc     40 EA B0 FD | 	call	#__system___basic_print_string
12b00     00 12 06 F6 | 	mov	arg01, #0
12b04     0A 14 06 F6 | 	mov	arg02, #10
12b08     00 16 06 F6 | 	mov	arg03, #0
12b0c     D8 E9 B0 FD | 	call	#__system___basic_print_char
12b10     00 12 06 F6 | 	mov	arg01, #0
12b14     98 37 B1 FD | 	call	#__system___getiolock_0541
12b18     FD 00 68 FC | 	wrlong	#0, result1
12b1c     D8 00 90 FD | 	jmp	#LR__1582
12b20                 | LR__1575
12b20     A7 1E 02 FB | 	rdlong	local01, fp
12b24     18 4E 05 F1 | 	add	fp, #24
12b28     A7 1E 62 FC | 	wrlong	local01, fp
12b2c                 | ' channel  = t1.result.iresult
12b2c                 | ' select case  mode
12b2c     04 4E 85 F1 | 	sub	fp, #4
12b30     A7 20 02 FB | 	rdlong	local02, fp
12b34     14 4E 85 F1 | 	sub	fp, #20
12b38     01 20 86 F1 | 	sub	local02, #1
12b3c     04 20 26 F3 | 	fle	local02, #4
12b40     30 20 62 FD | 	jmprel	local02
12b44                 | LR__1576
12b44     10 00 90 FD | 	jmp	#LR__1577
12b48     2C 00 90 FD | 	jmp	#LR__1578
12b4c     68 00 90 FD | 	jmp	#LR__1580
12b50     44 00 90 FD | 	jmp	#LR__1579
12b54     60 00 90 FD | 	jmp	#LR__1580
12b58                 | LR__1577
12b58     18 4E 05 F1 | 	add	fp, #24
12b5c     A7 12 02 FB | 	rdlong	arg01, fp
12b60     0C 4E 85 F1 | 	sub	fp, #12
12b64     A7 14 02 FB | 	rdlong	arg02, fp
12b68     0C 4E 85 F1 | 	sub	fp, #12
12b6c     00 16 06 F6 | 	mov	arg03, #0
12b70     DC E8 B0 FD | 	call	#__system___basic_open_string
12b74     80 00 90 FD | 	jmp	#LR__1581
12b78                 | LR__1578
12b78     18 4E 05 F1 | 	add	fp, #24
12b7c     A7 12 02 FB | 	rdlong	arg01, fp
12b80     0C 4E 85 F1 | 	sub	fp, #12
12b84     A7 14 02 FB | 	rdlong	arg02, fp
12b88     0C 4E 85 F1 | 	sub	fp, #12
12b8c     0D 16 06 F6 | 	mov	arg03, #13
12b90     BC E8 B0 FD | 	call	#__system___basic_open_string
12b94     60 00 90 FD | 	jmp	#LR__1581
12b98                 | LR__1579
12b98     18 4E 05 F1 | 	add	fp, #24
12b9c     A7 12 02 FB | 	rdlong	arg01, fp
12ba0     0C 4E 85 F1 | 	sub	fp, #12
12ba4     A7 14 02 FB | 	rdlong	arg02, fp
12ba8     0C 4E 85 F1 | 	sub	fp, #12
12bac     25 16 06 F6 | 	mov	arg03, #37
12bb0     9C E8 B0 FD | 	call	#__system___basic_open_string
12bb4     40 00 90 FD | 	jmp	#LR__1581
12bb8                 | LR__1580
12bb8     00 12 06 F6 | 	mov	arg01, #0
12bbc     F0 36 B1 FD | 	call	#__system___getiolock_0541
12bc0     FD 12 02 F6 | 	mov	arg01, result1
12bc4     84 DC B0 FD | 	call	#__system___lockmem
12bc8     84 01 00 FF 
12bcc     5E 15 06 F6 | 	mov	arg02, ##@LR__5481
12bd0     00 12 06 F6 | 	mov	arg01, #0
12bd4     00 16 06 F6 | 	mov	arg03, #0
12bd8     64 E9 B0 FD | 	call	#__system___basic_print_string
12bdc     00 12 06 F6 | 	mov	arg01, #0
12be0     0A 14 06 F6 | 	mov	arg02, #10
12be4     00 16 06 F6 | 	mov	arg03, #0
12be8     FC E8 B0 FD | 	call	#__system___basic_print_char
12bec     00 12 06 F6 | 	mov	arg01, #0
12bf0     BC 36 B1 FD | 	call	#__system___getiolock_0541
12bf4     FD 00 68 FC | 	wrlong	#0, result1
12bf8                 | LR__1581
12bf8                 | LR__1582
12bf8     A7 F0 03 F6 | 	mov	ptra, fp
12bfc     B2 00 A0 FD | 	call	#popregs_
12c00                 | _do_open_ret
12c00     2D 00 64 FD | 	ret
12c04                 | 
12c04                 | ' 
12c04                 | ' '-------------------- paper
12c04                 | ' 
12c04                 | ' sub do_paper
12c04                 | _do_paper
12c04     03 4A 05 F6 | 	mov	COUNT_, #3
12c08     A8 00 A0 FD | 	call	#pushregs_
12c0c     8C 87 BF FD | 	call	#_pop
12c10     FD 1E 02 F6 | 	mov	local01, result1
12c14     FE 20 02 F6 | 	mov	local02, result2
12c18     FF 22 02 F6 | 	mov	local03, result3
12c1c                 | ' t1=pop() 
12c1c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12c1c     1E 22 0E F2 | 	cmp	local03, #30 wz
12c20     10 00 90 5D |  if_ne	jmp	#LR__1590
12c24     0F 13 02 F6 | 	mov	arg01, local01
12c28     00 14 06 F6 | 	mov	arg02, #0
12c2c     98 0C B1 FD | 	call	#__system___float_tointeger
12c30     FD 1E 02 F6 | 	mov	local01, result1
12c34                 | LR__1590
12c34                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12c34     1F 22 0E F2 | 	cmp	local03, #31 wz
12c38     18 00 90 5D |  if_ne	jmp	#LR__1591
12c3c     0F 13 02 F6 | 	mov	arg01, local01
12c40     C8 0F B1 FD | 	call	#__system____builtin_atof
12c44     FD 12 02 F6 | 	mov	arg01, result1
12c48     00 14 06 F6 | 	mov	arg02, #0
12c4c     78 0C B1 FD | 	call	#__system___float_tointeger
12c50     FD 1E 02 F6 | 	mov	local01, result1
12c54                 | LR__1591
12c54     37 00 00 FF 
12c58     38 E4 05 F1 | 	add	objptr, ##28216
12c5c     F2 1E 62 FC | 	wrlong	local01, objptr
12c60     04 E4 05 F1 | 	add	objptr, #4
12c64     F2 12 02 FB | 	rdlong	arg01, objptr
12c68                 | ' 
12c68                 | ' write_color:=ff
12c68     36 00 00 FF 
12c6c     FB E5 85 F1 | 	sub	objptr, ##28155
12c70     F2 12 62 FC | 	wrlong	arg01, objptr
12c74                 | ' write_background:=bb
12c74     04 E4 05 F1 | 	add	objptr, #4
12c78     F2 1E 62 FC | 	wrlong	local01, objptr
12c7c     45 E4 85 F1 | 	sub	objptr, #69
12c80     A7 F0 03 F6 | 	mov	ptra, fp
12c84     B2 00 A0 FD | 	call	#popregs_
12c88                 | _do_paper_ret
12c88     2D 00 64 FD | 	ret
12c8c                 | 
12c8c                 | ' 
12c8c                 | ' '-------------------- pinfloat
12c8c                 | ' 
12c8c                 | ' sub do_pinfloat
12c8c                 | _do_pinfloat
12c8c     00 4A 05 F6 | 	mov	COUNT_, #0
12c90     A8 00 A0 FD | 	call	#pushregs_
12c94     0C F0 07 F1 | 	add	ptra, #12
12c98     00 87 BF FD | 	call	#_pop
12c9c     A7 FA 61 FC | 	wrlong	result1, fp
12ca0     04 4E 05 F1 | 	add	fp, #4
12ca4     A7 FC 61 FC | 	wrlong	result2, fp
12ca8     04 4E 05 F1 | 	add	fp, #4
12cac     A7 FE 61 FC | 	wrlong	result3, fp
12cb0     08 4E 85 F1 | 	sub	fp, #8
12cb4     A7 12 02 F6 | 	mov	arg01, fp
12cb8     C4 88 BF FD | 	call	#_converttoint
12cbc     50 FA 61 FD | 	fltl	result1
12cc0     A7 F0 03 F6 | 	mov	ptra, fp
12cc4     B2 00 A0 FD | 	call	#popregs_
12cc8                 | _do_pinfloat_ret
12cc8     2D 00 64 FD | 	ret
12ccc                 | 
12ccc                 | ' 
12ccc                 | ' '-------------------- pinhi
12ccc                 | ' 
12ccc                 | ' sub do_pinhi
12ccc                 | _do_pinhi
12ccc     00 4A 05 F6 | 	mov	COUNT_, #0
12cd0     A8 00 A0 FD | 	call	#pushregs_
12cd4     0C F0 07 F1 | 	add	ptra, #12
12cd8     C0 86 BF FD | 	call	#_pop
12cdc     A7 FA 61 FC | 	wrlong	result1, fp
12ce0     04 4E 05 F1 | 	add	fp, #4
12ce4     A7 FC 61 FC | 	wrlong	result2, fp
12ce8     04 4E 05 F1 | 	add	fp, #4
12cec     A7 FE 61 FC | 	wrlong	result3, fp
12cf0     08 4E 85 F1 | 	sub	fp, #8
12cf4     A7 12 02 F6 | 	mov	arg01, fp
12cf8     84 88 BF FD | 	call	#_converttoint
12cfc     59 FA 61 FD | 	drvh	result1
12d00     A7 F0 03 F6 | 	mov	ptra, fp
12d04     B2 00 A0 FD | 	call	#popregs_
12d08                 | _do_pinhi_ret
12d08     2D 00 64 FD | 	ret
12d0c                 | 
12d0c                 | ' 
12d0c                 | ' '-------------------- pinlo
12d0c                 | ' 
12d0c                 | ' sub do_pinlo
12d0c                 | _do_pinlo
12d0c     00 4A 05 F6 | 	mov	COUNT_, #0
12d10     A8 00 A0 FD | 	call	#pushregs_
12d14     0C F0 07 F1 | 	add	ptra, #12
12d18     80 86 BF FD | 	call	#_pop
12d1c     A7 FA 61 FC | 	wrlong	result1, fp
12d20     04 4E 05 F1 | 	add	fp, #4
12d24     A7 FC 61 FC | 	wrlong	result2, fp
12d28     04 4E 05 F1 | 	add	fp, #4
12d2c     A7 FE 61 FC | 	wrlong	result3, fp
12d30     08 4E 85 F1 | 	sub	fp, #8
12d34     A7 12 02 F6 | 	mov	arg01, fp
12d38     44 88 BF FD | 	call	#_converttoint
12d3c     58 FA 61 FD | 	drvl	result1
12d40     A7 F0 03 F6 | 	mov	ptra, fp
12d44     B2 00 A0 FD | 	call	#popregs_
12d48                 | _do_pinlo_ret
12d48     2D 00 64 FD | 	ret
12d4c                 | 
12d4c                 | ' 
12d4c                 | ' '-------------------- pinread
12d4c                 | ' 
12d4c                 | ' sub do_pinread
12d4c                 | _do_pinread
12d4c     00 4A 05 F6 | 	mov	COUNT_, #0
12d50     A8 00 A0 FD | 	call	#pushregs_
12d54     0C F0 07 F1 | 	add	ptra, #12
12d58     40 86 BF FD | 	call	#_pop
12d5c     A7 FA 61 FC | 	wrlong	result1, fp
12d60     04 4E 05 F1 | 	add	fp, #4
12d64     A7 FC 61 FC | 	wrlong	result2, fp
12d68     04 4E 05 F1 | 	add	fp, #4
12d6c     A7 FE 61 FC | 	wrlong	result3, fp
12d70     08 4E 85 F1 | 	sub	fp, #8
12d74     A7 12 02 F6 | 	mov	arg01, fp
12d78     04 88 BF FD | 	call	#_converttoint
12d7c     FD 12 02 F6 | 	mov	arg01, result1
12d80     20 12 CE F7 | 	test	arg01, #32 wz
12d84     FF FB 01 56 |  if_ne	mov	result1, inb
12d88     FE FB 01 A6 |  if_e	mov	result1, ina
12d8c     09 FB 41 F0 | 	shr	result1, arg01
12d90     06 12 46 F0 | 	shr	arg01, #6
12d94     09 FB 41 F7 | 	zerox	result1, arg01
12d98     52 00 00 FF 
12d9c     18 E4 05 F1 | 	add	objptr, ##42008
12da0     F2 FA 61 FC | 	wrlong	result1, objptr
12da4     52 00 00 FF 
12da8     18 E4 85 F1 | 	sub	objptr, ##42008
12dac     08 4E 05 F1 | 	add	fp, #8
12db0     A7 3A 68 FC | 	wrlong	#29, fp
12db4     08 4E 85 F1 | 	sub	fp, #8
12db8     A7 08 68 FC | 	wrlong	#4, fp
12dbc     A7 12 02 F6 | 	mov	arg01, fp
12dc0     70 86 BF FD | 	call	#_push
12dc4     A7 F0 03 F6 | 	mov	ptra, fp
12dc8     B2 00 A0 FD | 	call	#popregs_
12dcc                 | _do_pinread_ret
12dcc     2D 00 64 FD | 	ret
12dd0                 | 
12dd0                 | ' 
12dd0                 | ' '-------------------- pinstart
12dd0                 | ' 
12dd0                 | ' sub do_pinstart
12dd0                 | _do_pinstart
12dd0     03 4A 05 F6 | 	mov	COUNT_, #3
12dd4     A8 00 A0 FD | 	call	#pushregs_
12dd8     30 F0 07 F1 | 	add	ptra, #48
12ddc     BC 85 BF FD | 	call	#_pop
12de0     FD 16 02 F6 | 	mov	arg03, result1
12de4     FE 14 02 F6 | 	mov	arg02, result2
12de8     FF 18 02 F6 | 	mov	arg04, result3
12dec     A7 16 62 FC | 	wrlong	arg03, fp
12df0     04 4E 05 F1 | 	add	fp, #4
12df4     A7 14 62 FC | 	wrlong	arg02, fp
12df8     04 4E 05 F1 | 	add	fp, #4
12dfc     A7 18 62 FC | 	wrlong	arg04, fp
12e00     08 4E 85 F1 | 	sub	fp, #8
12e04     94 85 BF FD | 	call	#_pop
12e08     FD 16 02 F6 | 	mov	arg03, result1
12e0c     FE 14 02 F6 | 	mov	arg02, result2
12e10     FF 18 02 F6 | 	mov	arg04, result3
12e14     0C 4E 05 F1 | 	add	fp, #12
12e18     A7 16 62 FC | 	wrlong	arg03, fp
12e1c     04 4E 05 F1 | 	add	fp, #4
12e20     A7 14 62 FC | 	wrlong	arg02, fp
12e24     04 4E 05 F1 | 	add	fp, #4
12e28     A7 18 62 FC | 	wrlong	arg04, fp
12e2c     14 4E 85 F1 | 	sub	fp, #20
12e30     68 85 BF FD | 	call	#_pop
12e34     FD 16 02 F6 | 	mov	arg03, result1
12e38     FE 14 02 F6 | 	mov	arg02, result2
12e3c     FF 18 02 F6 | 	mov	arg04, result3
12e40     18 4E 05 F1 | 	add	fp, #24
12e44     A7 16 62 FC | 	wrlong	arg03, fp
12e48     04 4E 05 F1 | 	add	fp, #4
12e4c     A7 14 62 FC | 	wrlong	arg02, fp
12e50     04 4E 05 F1 | 	add	fp, #4
12e54     A7 18 62 FC | 	wrlong	arg04, fp
12e58     20 4E 85 F1 | 	sub	fp, #32
12e5c     3C 85 BF FD | 	call	#_pop
12e60     FF 16 02 F6 | 	mov	arg03, result3
12e64     24 4E 05 F1 | 	add	fp, #36
12e68     A7 FA 61 FC | 	wrlong	result1, fp
12e6c     04 4E 05 F1 | 	add	fp, #4
12e70     A7 FC 61 FC | 	wrlong	result2, fp
12e74     04 4E 05 F1 | 	add	fp, #4
12e78     A7 16 62 FC | 	wrlong	arg03, fp
12e7c     08 4E 85 F1 | 	sub	fp, #8
12e80     A7 12 02 F6 | 	mov	arg01, fp
12e84     24 4E 85 F1 | 	sub	fp, #36
12e88     F4 86 BF FD | 	call	#_converttoint
12e8c     FD 1E 02 F6 | 	mov	local01, result1
12e90     18 4E 05 F1 | 	add	fp, #24
12e94     A7 12 02 F6 | 	mov	arg01, fp
12e98     18 4E 85 F1 | 	sub	fp, #24
12e9c     E0 86 BF FD | 	call	#_converttoint
12ea0     FD 20 02 F6 | 	mov	local02, result1
12ea4     0C 4E 05 F1 | 	add	fp, #12
12ea8     A7 12 02 F6 | 	mov	arg01, fp
12eac     0C 4E 85 F1 | 	sub	fp, #12
12eb0     CC 86 BF FD | 	call	#_converttoint
12eb4     FD 22 02 F6 | 	mov	local03, result1
12eb8     A7 12 02 F6 | 	mov	arg01, fp
12ebc     C0 86 BF FD | 	call	#_converttoint
12ec0     40 1E 62 FD | 	dirl	local01
12ec4     0F 21 02 FC | 	wrpin	local02, local01
12ec8     0F 23 12 FC | 	wxpin	local03, local01
12ecc     0F FB 21 FC | 	wypin	result1, local01
12ed0     41 1E 62 FD | 	dirh	local01
12ed4     A7 F0 03 F6 | 	mov	ptra, fp
12ed8     B2 00 A0 FD | 	call	#popregs_
12edc                 | _do_pinstart_ret
12edc     2D 00 64 FD | 	ret
12ee0                 | 
12ee0                 | ' 
12ee0                 | ' '-------------------- pintoggle
12ee0                 | ' 
12ee0                 | ' sub do_pintoggle
12ee0                 | _do_pintoggle
12ee0     00 4A 05 F6 | 	mov	COUNT_, #0
12ee4     A8 00 A0 FD | 	call	#pushregs_
12ee8     0C F0 07 F1 | 	add	ptra, #12
12eec     AC 84 BF FD | 	call	#_pop
12ef0     A7 FA 61 FC | 	wrlong	result1, fp
12ef4     04 4E 05 F1 | 	add	fp, #4
12ef8     A7 FC 61 FC | 	wrlong	result2, fp
12efc     04 4E 05 F1 | 	add	fp, #4
12f00     A7 FE 61 FC | 	wrlong	result3, fp
12f04     08 4E 85 F1 | 	sub	fp, #8
12f08     A7 12 02 F6 | 	mov	arg01, fp
12f0c     70 86 BF FD | 	call	#_converttoint
12f10     5F FA 61 FD | 	drvnot	result1
12f14     A7 F0 03 F6 | 	mov	ptra, fp
12f18     B2 00 A0 FD | 	call	#popregs_
12f1c                 | _do_pintoggle_ret
12f1c     2D 00 64 FD | 	ret
12f20                 | 
12f20                 | ' 
12f20                 | ' '-------------------- pinwrite
12f20                 | ' 
12f20                 | ' sub do_pinwrite
12f20                 | _do_pinwrite
12f20     01 4A 05 F6 | 	mov	COUNT_, #1
12f24     A8 00 A0 FD | 	call	#pushregs_
12f28     18 F0 07 F1 | 	add	ptra, #24
12f2c     6C 84 BF FD | 	call	#_pop
12f30     FD 14 02 F6 | 	mov	arg02, result1
12f34     FE 12 02 F6 | 	mov	arg01, result2
12f38     FF 1E 02 F6 | 	mov	local01, result3
12f3c     A7 14 62 FC | 	wrlong	arg02, fp
12f40     04 4E 05 F1 | 	add	fp, #4
12f44     A7 12 62 FC | 	wrlong	arg01, fp
12f48     04 4E 05 F1 | 	add	fp, #4
12f4c     A7 1E 62 FC | 	wrlong	local01, fp
12f50     08 4E 85 F1 | 	sub	fp, #8
12f54     44 84 BF FD | 	call	#_pop
12f58     FF 1E 02 F6 | 	mov	local01, result3
12f5c     0C 4E 05 F1 | 	add	fp, #12
12f60     A7 FA 61 FC | 	wrlong	result1, fp
12f64     04 4E 05 F1 | 	add	fp, #4
12f68     A7 FC 61 FC | 	wrlong	result2, fp
12f6c     04 4E 05 F1 | 	add	fp, #4
12f70     A7 1E 62 FC | 	wrlong	local01, fp
12f74     08 4E 85 F1 | 	sub	fp, #8
12f78     A7 12 02 F6 | 	mov	arg01, fp
12f7c     0C 4E 85 F1 | 	sub	fp, #12
12f80     FC 85 BF FD | 	call	#_converttoint
12f84     FD 1E 02 F6 | 	mov	local01, result1
12f88     A7 12 02 F6 | 	mov	arg01, fp
12f8c     F0 85 BF FD | 	call	#_converttoint
12f90     FD 14 02 F6 | 	mov	arg02, result1
12f94     0F 13 02 F6 | 	mov	arg01, local01
12f98     64 DA B0 FD | 	call	#__system___pinwrite
12f9c     A7 F0 03 F6 | 	mov	ptra, fp
12fa0     B2 00 A0 FD | 	call	#popregs_
12fa4                 | _do_pinwrite_ret
12fa4     2D 00 64 FD | 	ret
12fa8                 | 
12fa8                 | ' 
12fa8                 | ' '-------------------- play
12fa8                 | ' 
12fa8                 | ' sub do_play
12fa8                 | _do_play
12fa8     08 4A 05 F6 | 	mov	COUNT_, #8
12fac     A8 00 A0 FD | 	call	#pushregs_
12fb0     7C F0 07 F1 | 	add	ptra, #124
12fb4     68 4E 05 F1 | 	add	fp, #104
12fb8     77 CC A1 FF 
12fbc     A7 7C 6B FC | 	wrlong	##1134096318, fp
12fc0                 | ' speed_coeff=305.873
12fc0                 | ' 
12fc0                 | ' for i=0 to 8 : params(i)=-2.0 : next i
12fc0     64 4E 85 F1 | 	sub	fp, #100
12fc4     A7 00 68 FC | 	wrlong	#0, fp
12fc8     97 18 48 FB | 	callpa	#(@LR__1601-@LR__1600)>>2,fcache_load_ptr_
12fcc                 | LR__1600
12fcc     A7 16 02 FB | 	rdlong	arg03, fp
12fd0     02 16 66 F0 | 	shl	arg03, #2
12fd4     34 4E 05 F1 | 	add	fp, #52
12fd8     A7 16 02 F1 | 	add	arg03, fp
12fdc     00 00 E0 FF 
12fe0     0B 01 68 FC | 	wrlong	##-1073741824, arg03
12fe4     34 4E 85 F1 | 	sub	fp, #52
12fe8     A7 1E 02 FB | 	rdlong	local01, fp
12fec     01 1E 06 F1 | 	add	local01, #1
12ff0     A7 1E 62 FC | 	wrlong	local01, fp
12ff4     09 1E 56 F2 | 	cmps	local01, #9 wc
12ff8     D0 FF 9F CD |  if_b	jmp	#LR__1600
12ffc                 | LR__1601
12ffc     04 4E 85 F1 | 	sub	fp, #4
13000     4A 00 00 FF 
13004     80 E4 05 F1 | 	add	objptr, ##38016
13008     F2 20 02 FB | 	rdlong	local02, objptr
1300c     10 23 02 F6 | 	mov	local03, local02
13010     01 22 66 F0 | 	shl	local03, #1
13014     10 23 02 F1 | 	add	local03, local02
13018     02 22 66 F0 | 	shl	local03, #2
1301c     03 00 00 FF 
13020     04 E4 85 F1 | 	sub	objptr, ##1540
13024     F2 22 02 F1 | 	add	local03, objptr
13028     11 25 02 FB | 	rdlong	local04, local03
1302c     A7 24 62 FC | 	wrlong	local04, fp
13030                 | ' numpar=compiledline(lineptr_e).result.uresult
13030                 | ' for i=numpar to 1 step -1 
13030     04 4E 05 F1 | 	add	fp, #4
13034     A7 24 62 FC | 	wrlong	local04, fp
13038     04 4E 85 F1 | 	sub	fp, #4
1303c     47 00 00 FF 
13040     7C E4 85 F1 | 	sub	objptr, ##36476
13044                 | LR__1602
13044     54 83 BF FD | 	call	#_pop
13048     5C 4E 05 F1 | 	add	fp, #92
1304c     A7 FA 61 FC | 	wrlong	result1, fp
13050     04 4E 05 F1 | 	add	fp, #4
13054     A7 FC 61 FC | 	wrlong	result2, fp
13058     04 4E 05 F1 | 	add	fp, #4
1305c     A7 FE 61 FC | 	wrlong	result3, fp
13060     60 4E 85 F1 | 	sub	fp, #96
13064     A7 22 02 FB | 	rdlong	local03, fp
13068     01 22 86 F1 | 	sub	local03, #1
1306c     02 22 66 F0 | 	shl	local03, #2
13070     34 4E 05 F1 | 	add	fp, #52
13074     A7 22 02 F1 | 	add	local03, fp
13078     24 4E 05 F1 | 	add	fp, #36
1307c     A7 26 02 F6 | 	mov	local05, fp
13080     13 13 02 F6 | 	mov	arg01, local05
13084     5C 4E 85 F1 | 	sub	fp, #92
13088     B0 85 BF FD | 	call	#_converttofloat
1308c     11 FB 61 FC | 	wrlong	result1, local03
13090     04 4E 05 F1 | 	add	fp, #4
13094     A7 1E 02 FB | 	rdlong	local01, fp
13098     01 1E 86 F1 | 	sub	local01, #1
1309c     A7 1E 62 FC | 	wrlong	local01, fp
130a0     04 4E 85 F1 | 	sub	fp, #4
130a4     01 1E 56 F2 | 	cmps	local01, #1 wc
130a8     98 FF 9F 3D |  if_ae	jmp	#LR__1602
130ac                 | ' 
130ac                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
130ac     38 4E 05 F1 | 	add	fp, #56
130b0     A7 12 02 FB | 	rdlong	arg01, fp
130b4     38 4E 85 F1 | 	sub	fp, #56
130b8     00 14 06 F6 | 	mov	arg02, #0
130bc     01 16 06 F6 | 	mov	arg03, #1
130c0     70 07 B1 FD | 	call	#__system___float_cmp
130c4     00 FA 55 F2 | 	cmps	result1, #0 wc
130c8     0C 4E 05 C1 |  if_b	add	fp, #12
130cc     A7 00 68 CC |  if_b	wrlong	#0, fp
130d0     0C 4E 85 C1 |  if_b	sub	fp, #12
130d4     2C 00 90 CD |  if_b	jmp	#LR__1603
130d8     38 4E 05 F1 | 	add	fp, #56
130dc     A7 12 02 FB | 	rdlong	arg01, fp
130e0     38 4E 85 F1 | 	sub	fp, #56
130e4     01 14 06 F6 | 	mov	arg02, #1
130e8     DC 07 B1 FD | 	call	#__system___float_tointeger
130ec     FD 1E 52 F6 | 	abs	local01, result1 wc
130f0     07 1E 06 F5 | 	and	local01, #7
130f4     0F 1F 82 F6 | 	negc	local01, local01
130f8     0C 4E 05 F1 | 	add	fp, #12
130fc     A7 1E 62 FC | 	wrlong	local01, fp
13100     0C 4E 85 F1 | 	sub	fp, #12
13104                 | LR__1603
13104                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
13104     3C 4E 05 F1 | 	add	fp, #60
13108     A7 12 02 FB | 	rdlong	arg01, fp
1310c     3C 4E 85 F1 | 	sub	fp, #60
13110     00 14 06 F6 | 	mov	arg02, #0
13114     01 16 06 F6 | 	mov	arg03, #1
13118     18 07 B1 FD | 	call	#__system___float_cmp
1311c     00 FA 55 F2 | 	cmps	result1, #0 wc
13120     40 00 90 3D |  if_ae	jmp	#LR__1604
13124     0C 4E 05 F1 | 	add	fp, #12
13128     A7 20 02 FB | 	rdlong	local02, fp
1312c     10 23 02 F6 | 	mov	local03, local02
13130     01 22 66 F0 | 	shl	local03, #1
13134     10 23 02 F1 | 	add	local03, local02
13138     03 22 66 F0 | 	shl	local03, #3
1313c     14 00 00 FF 
13140     38 E5 05 F1 | 	add	objptr, ##10552
13144     F2 22 02 F1 | 	add	local03, objptr
13148     11 29 02 FB | 	rdlong	local06, local03
1314c     60 4E 05 F1 | 	add	fp, #96
13150     A7 28 62 FC | 	wrlong	local06, fp
13154     6C 4E 85 F1 | 	sub	fp, #108
13158     14 00 00 FF 
1315c     38 E5 85 F1 | 	sub	objptr, ##10552
13160     44 00 90 FD | 	jmp	#LR__1605
13164                 | LR__1604
13164     3C 4E 05 F1 | 	add	fp, #60
13168     A7 24 02 FB | 	rdlong	local04, fp
1316c     30 4E 05 F1 | 	add	fp, #48
13170     A7 24 62 FC | 	wrlong	local04, fp
13174     60 4E 85 F1 | 	sub	fp, #96
13178     A7 20 02 FB | 	rdlong	local02, fp
1317c     10 23 02 F6 | 	mov	local03, local02
13180     01 22 66 F0 | 	shl	local03, #1
13184     10 23 02 F1 | 	add	local03, local02
13188     03 22 66 F0 | 	shl	local03, #3
1318c     14 00 00 FF 
13190     38 E5 05 F1 | 	add	objptr, ##10552
13194     F2 22 02 F1 | 	add	local03, objptr
13198     0C 4E 85 F1 | 	sub	fp, #12
1319c     11 25 62 FC | 	wrlong	local04, local03
131a0     14 00 00 FF 
131a4     38 E5 85 F1 | 	sub	objptr, ##10552
131a8                 | LR__1605
131a8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
131a8     40 4E 05 F1 | 	add	fp, #64
131ac     A7 12 02 FB | 	rdlong	arg01, fp
131b0     40 4E 85 F1 | 	sub	fp, #64
131b4     00 14 06 F6 | 	mov	arg02, #0
131b8     01 16 06 F6 | 	mov	arg03, #1
131bc     74 06 B1 FD | 	call	#__system___float_cmp
131c0     00 FA 55 F2 | 	cmps	result1, #0 wc
131c4     24 00 90 CD |  if_b	jmp	#LR__1606
131c8     40 4E 05 F1 | 	add	fp, #64
131cc     A7 12 02 FB | 	rdlong	arg01, fp
131d0     40 4E 85 F1 | 	sub	fp, #64
131d4     20 0E 23 FF 
131d8     00 14 06 F6 | 	mov	arg02, ##1176256512
131dc     01 16 66 F6 | 	neg	arg03, #1
131e0     50 06 B1 FD | 	call	#__system___float_cmp
131e4     01 FA 55 F2 | 	cmps	result1, #1 wc
131e8     48 00 90 CD |  if_b	jmp	#LR__1607
131ec                 | LR__1606
131ec     0C 4E 05 F1 | 	add	fp, #12
131f0     A7 22 02 FB | 	rdlong	local03, fp
131f4     11 2B 02 F6 | 	mov	local07, local03
131f8     01 2A 66 F0 | 	shl	local07, #1
131fc     11 2B 02 F1 | 	add	local07, local03
13200     03 2A 66 F0 | 	shl	local07, #3
13204     14 00 00 FF 
13208     38 E5 05 F1 | 	add	objptr, ##10552
1320c     F2 2A 02 F1 | 	add	local07, objptr
13210     06 2A 06 F1 | 	add	local07, #6
13214     15 27 E2 FA | 	rdword	local05, local07
13218     13 25 32 F9 | 	getword	local04, local05, #0
1321c     1C 4E 05 F1 | 	add	fp, #28
13220     A7 24 62 FC | 	wrlong	local04, fp
13224     28 4E 85 F1 | 	sub	fp, #40
13228     14 00 00 FF 
1322c     38 E5 85 F1 | 	sub	objptr, ##10552
13230     54 00 90 FD | 	jmp	#LR__1608
13234                 | LR__1607
13234     40 4E 05 F1 | 	add	fp, #64
13238     A7 12 02 FB | 	rdlong	arg01, fp
1323c     40 4E 85 F1 | 	sub	fp, #64
13240     01 14 06 F6 | 	mov	arg02, #1
13244     80 06 B1 FD | 	call	#__system___float_tointeger
13248     28 4E 05 F1 | 	add	fp, #40
1324c     A7 FA 61 FC | 	wrlong	result1, fp
13250     1C 4E 85 F1 | 	sub	fp, #28
13254     A7 20 02 FB | 	rdlong	local02, fp
13258     10 23 02 F6 | 	mov	local03, local02
1325c     01 22 66 F0 | 	shl	local03, #1
13260     10 23 02 F1 | 	add	local03, local02
13264     03 22 66 F0 | 	shl	local03, #3
13268     14 00 00 FF 
1326c     38 E5 05 F1 | 	add	objptr, ##10552
13270     F2 22 02 F1 | 	add	local03, objptr
13274     0C 4E 85 F1 | 	sub	fp, #12
13278     06 22 06 F1 | 	add	local03, #6
1327c     11 FB 51 FC | 	wrword	result1, local03
13280     14 00 00 FF 
13284     38 E5 85 F1 | 	sub	objptr, ##10552
13288                 | LR__1608
13288                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
13288     44 4E 05 F1 | 	add	fp, #68
1328c     A7 12 02 FB | 	rdlong	arg01, fp
13290     44 4E 85 F1 | 	sub	fp, #68
13294     00 14 06 F6 | 	mov	arg02, #0
13298     01 16 06 F6 | 	mov	arg03, #1
1329c     94 05 B1 FD | 	call	#__system___float_cmp
132a0     00 FA 55 F2 | 	cmps	result1, #0 wc
132a4     24 00 90 CD |  if_b	jmp	#LR__1609
132a8     44 4E 05 F1 | 	add	fp, #68
132ac     A7 12 02 FB | 	rdlong	arg01, fp
132b0     44 4E 85 F1 | 	sub	fp, #68
132b4     89 C1 20 FF 
132b8     6F 14 06 F6 | 	mov	arg02, ##1099108975
132bc     01 16 66 F6 | 	neg	arg03, #1
132c0     70 05 B1 FD | 	call	#__system___float_cmp
132c4     01 FA 55 F2 | 	cmps	result1, #1 wc
132c8     44 00 90 CD |  if_b	jmp	#LR__1610
132cc                 | LR__1609
132cc     0C 4E 05 F1 | 	add	fp, #12
132d0     A7 20 02 FB | 	rdlong	local02, fp
132d4     10 23 02 F6 | 	mov	local03, local02
132d8     01 22 66 F0 | 	shl	local03, #1
132dc     10 23 02 F1 | 	add	local03, local02
132e0     03 22 66 F0 | 	shl	local03, #3
132e4     14 00 00 FF 
132e8     38 E5 05 F1 | 	add	objptr, ##10552
132ec     F2 22 02 F1 | 	add	local03, objptr
132f0     0C 22 06 F1 | 	add	local03, #12
132f4     11 29 02 FB | 	rdlong	local06, local03
132f8     68 4E 05 F1 | 	add	fp, #104
132fc     A7 28 62 FC | 	wrlong	local06, fp
13300     74 4E 85 F1 | 	sub	fp, #116
13304     14 00 00 FF 
13308     38 E5 85 F1 | 	sub	objptr, ##10552
1330c     48 00 90 FD | 	jmp	#LR__1611
13310                 | LR__1610
13310     44 4E 05 F1 | 	add	fp, #68
13314     A7 24 02 FB | 	rdlong	local04, fp
13318     30 4E 05 F1 | 	add	fp, #48
1331c     A7 24 62 FC | 	wrlong	local04, fp
13320     68 4E 85 F1 | 	sub	fp, #104
13324     A7 20 02 FB | 	rdlong	local02, fp
13328     10 23 02 F6 | 	mov	local03, local02
1332c     01 22 66 F0 | 	shl	local03, #1
13330     10 23 02 F1 | 	add	local03, local02
13334     03 22 66 F0 | 	shl	local03, #3
13338     14 00 00 FF 
1333c     38 E5 05 F1 | 	add	objptr, ##10552
13340     F2 22 02 F1 | 	add	local03, objptr
13344     0C 4E 85 F1 | 	sub	fp, #12
13348     0C 22 06 F1 | 	add	local03, #12
1334c     11 25 62 FC | 	wrlong	local04, local03
13350     14 00 00 FF 
13354     38 E5 85 F1 | 	sub	objptr, ##10552
13358                 | LR__1611
13358                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
13358     48 4E 05 F1 | 	add	fp, #72
1335c     A7 12 02 FB | 	rdlong	arg01, fp
13360     48 4E 85 F1 | 	sub	fp, #72
13364     00 14 06 F6 | 	mov	arg02, #0
13368     01 16 06 F6 | 	mov	arg03, #1
1336c     C4 04 B1 FD | 	call	#__system___float_cmp
13370     00 FA 55 F2 | 	cmps	result1, #0 wc
13374     24 00 90 CD |  if_b	jmp	#LR__1612
13378     48 4E 05 F1 | 	add	fp, #72
1337c     A7 12 02 FB | 	rdlong	arg01, fp
13380     48 4E 85 F1 | 	sub	fp, #72
13384     00 00 21 FF 
13388     00 14 06 F6 | 	mov	arg02, ##1107296256
1338c     01 16 66 F6 | 	neg	arg03, #1
13390     A0 04 B1 FD | 	call	#__system___float_cmp
13394     01 FA 55 F2 | 	cmps	result1, #1 wc
13398     48 00 90 CD |  if_b	jmp	#LR__1613
1339c                 | LR__1612
1339c     0C 4E 05 F1 | 	add	fp, #12
133a0     A7 22 02 FB | 	rdlong	local03, fp
133a4     11 2B 02 F6 | 	mov	local07, local03
133a8     01 2A 66 F0 | 	shl	local07, #1
133ac     11 2B 02 F1 | 	add	local07, local03
133b0     03 2A 66 F0 | 	shl	local07, #3
133b4     14 00 00 FF 
133b8     38 E5 05 F1 | 	add	objptr, ##10552
133bc     F2 2A 02 F1 | 	add	local07, objptr
133c0     04 2A 06 F1 | 	add	local07, #4
133c4     15 27 C2 FA | 	rdbyte	local05, local07
133c8     13 25 E2 F8 | 	getbyte	local04, local05, #0
133cc     14 4E 05 F1 | 	add	fp, #20
133d0     A7 24 62 FC | 	wrlong	local04, fp
133d4     20 4E 85 F1 | 	sub	fp, #32
133d8     14 00 00 FF 
133dc     38 E5 85 F1 | 	sub	objptr, ##10552
133e0     54 00 90 FD | 	jmp	#LR__1614
133e4                 | LR__1613
133e4     48 4E 05 F1 | 	add	fp, #72
133e8     A7 12 02 FB | 	rdlong	arg01, fp
133ec     48 4E 85 F1 | 	sub	fp, #72
133f0     01 14 06 F6 | 	mov	arg02, #1
133f4     D0 04 B1 FD | 	call	#__system___float_tointeger
133f8     20 4E 05 F1 | 	add	fp, #32
133fc     A7 FA 61 FC | 	wrlong	result1, fp
13400     14 4E 85 F1 | 	sub	fp, #20
13404     A7 20 02 FB | 	rdlong	local02, fp
13408     10 23 02 F6 | 	mov	local03, local02
1340c     01 22 66 F0 | 	shl	local03, #1
13410     10 23 02 F1 | 	add	local03, local02
13414     03 22 66 F0 | 	shl	local03, #3
13418     14 00 00 FF 
1341c     38 E5 05 F1 | 	add	objptr, ##10552
13420     F2 22 02 F1 | 	add	local03, objptr
13424     0C 4E 85 F1 | 	sub	fp, #12
13428     04 22 06 F1 | 	add	local03, #4
1342c     11 FB 41 FC | 	wrbyte	result1, local03
13430     14 00 00 FF 
13434     38 E5 85 F1 | 	sub	objptr, ##10552
13438                 | LR__1614
13438                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
13438     4C 4E 05 F1 | 	add	fp, #76
1343c     A7 12 02 FB | 	rdlong	arg01, fp
13440     4C 4E 85 F1 | 	sub	fp, #76
13444     00 14 06 F6 | 	mov	arg02, #0
13448     01 16 06 F6 | 	mov	arg03, #1
1344c     E4 03 B1 FD | 	call	#__system___float_cmp
13450     00 FA 55 F2 | 	cmps	result1, #0 wc
13454     24 00 90 CD |  if_b	jmp	#LR__1615
13458     4C 4E 05 F1 | 	add	fp, #76
1345c     A7 12 02 FB | 	rdlong	arg01, fp
13460     4C 4E 85 F1 | 	sub	fp, #76
13464     00 80 20 FF 
13468     00 14 06 F6 | 	mov	arg02, ##1090519040
1346c     01 16 66 F6 | 	neg	arg03, #1
13470     C0 03 B1 FD | 	call	#__system___float_cmp
13474     01 FA 55 F2 | 	cmps	result1, #1 wc
13478     48 00 90 CD |  if_b	jmp	#LR__1616
1347c                 | LR__1615
1347c     0C 4E 05 F1 | 	add	fp, #12
13480     A7 22 02 FB | 	rdlong	local03, fp
13484     11 2B 02 F6 | 	mov	local07, local03
13488     01 2A 66 F0 | 	shl	local07, #1
1348c     11 2B 02 F1 | 	add	local07, local03
13490     03 2A 66 F0 | 	shl	local07, #3
13494     14 00 00 FF 
13498     38 E5 05 F1 | 	add	objptr, ##10552
1349c     F2 2A 02 F1 | 	add	local07, objptr
134a0     05 2A 06 F1 | 	add	local07, #5
134a4     15 27 C2 FA | 	rdbyte	local05, local07
134a8     13 25 E2 F8 | 	getbyte	local04, local05, #0
134ac     18 4E 05 F1 | 	add	fp, #24
134b0     A7 24 62 FC | 	wrlong	local04, fp
134b4     24 4E 85 F1 | 	sub	fp, #36
134b8     14 00 00 FF 
134bc     38 E5 85 F1 | 	sub	objptr, ##10552
134c0     54 00 90 FD | 	jmp	#LR__1617
134c4                 | LR__1616
134c4     4C 4E 05 F1 | 	add	fp, #76
134c8     A7 12 02 FB | 	rdlong	arg01, fp
134cc     4C 4E 85 F1 | 	sub	fp, #76
134d0     01 14 06 F6 | 	mov	arg02, #1
134d4     F0 03 B1 FD | 	call	#__system___float_tointeger
134d8     24 4E 05 F1 | 	add	fp, #36
134dc     A7 FA 61 FC | 	wrlong	result1, fp
134e0     18 4E 85 F1 | 	sub	fp, #24
134e4     A7 20 02 FB | 	rdlong	local02, fp
134e8     10 23 02 F6 | 	mov	local03, local02
134ec     01 22 66 F0 | 	shl	local03, #1
134f0     10 23 02 F1 | 	add	local03, local02
134f4     03 22 66 F0 | 	shl	local03, #3
134f8     14 00 00 FF 
134fc     38 E5 05 F1 | 	add	objptr, ##10552
13500     F2 22 02 F1 | 	add	local03, objptr
13504     0C 4E 85 F1 | 	sub	fp, #12
13508     05 22 06 F1 | 	add	local03, #5
1350c     11 FB 41 FC | 	wrbyte	result1, local03
13510     14 00 00 FF 
13514     38 E5 85 F1 | 	sub	objptr, ##10552
13518                 | LR__1617
13518                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
13518     50 4E 05 F1 | 	add	fp, #80
1351c     A7 12 02 FB | 	rdlong	arg01, fp
13520     50 4E 85 F1 | 	sub	fp, #80
13524     00 14 06 F6 | 	mov	arg02, #0
13528     01 16 06 F6 | 	mov	arg03, #1
1352c     04 03 B1 FD | 	call	#__system___float_cmp
13530     00 FA 55 F2 | 	cmps	result1, #0 wc
13534     24 00 90 CD |  if_b	jmp	#LR__1618
13538     50 4E 05 F1 | 	add	fp, #80
1353c     A7 12 02 FB | 	rdlong	arg01, fp
13540     50 4E 85 F1 | 	sub	fp, #80
13544     00 3D 22 FF 
13548     00 14 06 F6 | 	mov	arg02, ##1148846080
1354c     01 16 66 F6 | 	neg	arg03, #1
13550     E0 02 B1 FD | 	call	#__system___float_cmp
13554     01 FA 55 F2 | 	cmps	result1, #1 wc
13558     44 00 90 CD |  if_b	jmp	#LR__1619
1355c                 | LR__1618
1355c     0C 4E 05 F1 | 	add	fp, #12
13560     A7 20 02 FB | 	rdlong	local02, fp
13564     10 23 02 F6 | 	mov	local03, local02
13568     01 22 66 F0 | 	shl	local03, #1
1356c     10 23 02 F1 | 	add	local03, local02
13570     03 22 66 F0 | 	shl	local03, #3
13574     14 00 00 FF 
13578     38 E5 05 F1 | 	add	objptr, ##10552
1357c     F2 22 02 F1 | 	add	local03, objptr
13580     08 22 06 F1 | 	add	local03, #8
13584     11 29 02 FB | 	rdlong	local06, local03
13588     6C 4E 05 F1 | 	add	fp, #108
1358c     A7 28 62 FC | 	wrlong	local06, fp
13590     78 4E 85 F1 | 	sub	fp, #120
13594     14 00 00 FF 
13598     38 E5 85 F1 | 	sub	objptr, ##10552
1359c     48 00 90 FD | 	jmp	#LR__1620
135a0                 | LR__1619
135a0     50 4E 05 F1 | 	add	fp, #80
135a4     A7 28 02 FB | 	rdlong	local06, fp
135a8     28 4E 05 F1 | 	add	fp, #40
135ac     A7 28 62 FC | 	wrlong	local06, fp
135b0     6C 4E 85 F1 | 	sub	fp, #108
135b4     A7 20 02 FB | 	rdlong	local02, fp
135b8     10 23 02 F6 | 	mov	local03, local02
135bc     01 22 66 F0 | 	shl	local03, #1
135c0     10 23 02 F1 | 	add	local03, local02
135c4     03 22 66 F0 | 	shl	local03, #3
135c8     14 00 00 FF 
135cc     38 E5 05 F1 | 	add	objptr, ##10552
135d0     F2 22 02 F1 | 	add	local03, objptr
135d4     0C 4E 85 F1 | 	sub	fp, #12
135d8     08 22 06 F1 | 	add	local03, #8
135dc     11 29 62 FC | 	wrlong	local06, local03
135e0     14 00 00 FF 
135e4     38 E5 85 F1 | 	sub	objptr, ##10552
135e8                 | LR__1620
135e8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
135e8     54 4E 05 F1 | 	add	fp, #84
135ec     A7 12 02 FB | 	rdlong	arg01, fp
135f0     54 4E 85 F1 | 	sub	fp, #84
135f4     00 C0 5F FF 
135f8     00 14 06 F6 | 	mov	arg02, ##-1082130432
135fc     01 16 06 F6 | 	mov	arg03, #1
13600     30 02 B1 FD | 	call	#__system___float_cmp
13604     00 FA 55 F2 | 	cmps	result1, #0 wc
13608     24 00 90 CD |  if_b	jmp	#LR__1621
1360c     54 4E 05 F1 | 	add	fp, #84
13610     A7 12 02 FB | 	rdlong	arg01, fp
13614     54 4E 85 F1 | 	sub	fp, #84
13618     00 C0 1F FF 
1361c     00 14 06 F6 | 	mov	arg02, ##1065353216
13620     01 16 66 F6 | 	neg	arg03, #1
13624     0C 02 B1 FD | 	call	#__system___float_cmp
13628     01 FA 55 F2 | 	cmps	result1, #1 wc
1362c     44 00 90 CD |  if_b	jmp	#LR__1622
13630                 | LR__1621
13630     0C 4E 05 F1 | 	add	fp, #12
13634     A7 20 02 FB | 	rdlong	local02, fp
13638     10 23 02 F6 | 	mov	local03, local02
1363c     01 22 66 F0 | 	shl	local03, #1
13640     10 23 02 F1 | 	add	local03, local02
13644     03 22 66 F0 | 	shl	local03, #3
13648     14 00 00 FF 
1364c     38 E5 05 F1 | 	add	objptr, ##10552
13650     F2 22 02 F1 | 	add	local03, objptr
13654     10 22 06 F1 | 	add	local03, #16
13658     11 29 02 FB | 	rdlong	local06, local03
1365c     64 4E 05 F1 | 	add	fp, #100
13660     A7 28 62 FC | 	wrlong	local06, fp
13664     70 4E 85 F1 | 	sub	fp, #112
13668     14 00 00 FF 
1366c     38 E5 85 F1 | 	sub	objptr, ##10552
13670     48 00 90 FD | 	jmp	#LR__1623
13674                 | LR__1622
13674     54 4E 05 F1 | 	add	fp, #84
13678     A7 28 02 FB | 	rdlong	local06, fp
1367c     1C 4E 05 F1 | 	add	fp, #28
13680     A7 28 62 FC | 	wrlong	local06, fp
13684     64 4E 85 F1 | 	sub	fp, #100
13688     A7 20 02 FB | 	rdlong	local02, fp
1368c     10 23 02 F6 | 	mov	local03, local02
13690     01 22 66 F0 | 	shl	local03, #1
13694     10 23 02 F1 | 	add	local03, local02
13698     03 22 66 F0 | 	shl	local03, #3
1369c     14 00 00 FF 
136a0     38 E5 05 F1 | 	add	objptr, ##10552
136a4     F2 22 02 F1 | 	add	local03, objptr
136a8     0C 4E 85 F1 | 	sub	fp, #12
136ac     10 22 06 F1 | 	add	local03, #16
136b0     11 29 62 FC | 	wrlong	local06, local03
136b4     14 00 00 FF 
136b8     38 E5 85 F1 | 	sub	objptr, ##10552
136bc                 | LR__1623
136bc                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
136bc     58 4E 05 F1 | 	add	fp, #88
136c0     A7 12 02 FB | 	rdlong	arg01, fp
136c4     58 4E 85 F1 | 	sub	fp, #88
136c8     00 14 06 F6 | 	mov	arg02, #0
136cc     01 16 06 F6 | 	mov	arg03, #1
136d0     60 01 B1 FD | 	call	#__system___float_cmp
136d4     00 FA 55 F2 | 	cmps	result1, #0 wc
136d8     24 00 90 CD |  if_b	jmp	#LR__1624
136dc     58 4E 05 F1 | 	add	fp, #88
136e0     A7 12 02 FB | 	rdlong	arg01, fp
136e4     58 4E 85 F1 | 	sub	fp, #88
136e8     80 BF 21 FF 
136ec     00 14 06 F6 | 	mov	arg02, ##1132396544
136f0     01 16 66 F6 | 	neg	arg03, #1
136f4     3C 01 B1 FD | 	call	#__system___float_cmp
136f8     01 FA 55 F2 | 	cmps	result1, #1 wc
136fc     44 00 90 CD |  if_b	jmp	#LR__1625
13700                 | LR__1624
13700     0C 4E 05 F1 | 	add	fp, #12
13704     A7 22 02 FB | 	rdlong	local03, fp
13708     11 2B 02 F6 | 	mov	local07, local03
1370c     01 2A 66 F0 | 	shl	local07, #1
13710     11 2B 02 F1 | 	add	local07, local03
13714     03 2A 66 F0 | 	shl	local07, #3
13718     14 00 00 FF 
1371c     38 E5 05 F1 | 	add	objptr, ##10552
13720     F2 2A 02 F1 | 	add	local07, objptr
13724     14 2A 06 F1 | 	add	local07, #20
13728     15 25 E2 FA | 	rdword	local04, local07
1372c     20 4E 05 F1 | 	add	fp, #32
13730     A7 24 62 FC | 	wrlong	local04, fp
13734     2C 4E 85 F1 | 	sub	fp, #44
13738     14 00 00 FF 
1373c     38 E5 85 F1 | 	sub	objptr, ##10552
13740     54 00 90 FD | 	jmp	#LR__1626
13744                 | LR__1625
13744     58 4E 05 F1 | 	add	fp, #88
13748     A7 12 02 FB | 	rdlong	arg01, fp
1374c     58 4E 85 F1 | 	sub	fp, #88
13750     01 14 06 F6 | 	mov	arg02, #1
13754     70 01 B1 FD | 	call	#__system___float_tointeger
13758     2C 4E 05 F1 | 	add	fp, #44
1375c     A7 FA 61 FC | 	wrlong	result1, fp
13760     20 4E 85 F1 | 	sub	fp, #32
13764     A7 20 02 FB | 	rdlong	local02, fp
13768     10 23 02 F6 | 	mov	local03, local02
1376c     01 22 66 F0 | 	shl	local03, #1
13770     10 23 02 F1 | 	add	local03, local02
13774     03 22 66 F0 | 	shl	local03, #3
13778     14 00 00 FF 
1377c     38 E5 05 F1 | 	add	objptr, ##10552
13780     F2 22 02 F1 | 	add	local03, objptr
13784     0C 4E 85 F1 | 	sub	fp, #12
13788     14 22 06 F1 | 	add	local03, #20
1378c     11 FB 51 FC | 	wrword	result1, local03
13790     14 00 00 FF 
13794     38 E5 85 F1 | 	sub	objptr, ##10552
13798                 | LR__1626
13798     6C 4E 05 F1 | 	add	fp, #108
1379c     A7 14 02 FB | 	rdlong	arg02, fp
137a0     6C 4E 85 F1 | 	sub	fp, #108
137a4     FC 16 20 FF 
137a8     54 12 06 F6 | 	mov	arg01, ##1076754516
137ac     20 0C B1 FD | 	call	#__system____builtin_logbase
137b0     FD 24 02 F6 | 	mov	local04, result1
137b4     1E 14 C6 F9 | 	decod	arg02, #30
137b8     FC 16 20 FF 
137bc     54 12 06 F6 | 	mov	arg01, ##1076754516
137c0     0C 0C B1 FD | 	call	#__system____builtin_logbase
137c4     FD 14 02 F6 | 	mov	arg02, result1
137c8     12 13 02 F6 | 	mov	arg01, local04
137cc     34 FE B0 FD | 	call	#__system___float_div
137d0     FD 12 02 F6 | 	mov	arg01, result1
137d4     00 14 06 F6 | 	mov	arg02, #0
137d8     EC 00 B1 FD | 	call	#__system___float_tointeger
137dc     30 4E 05 F1 | 	add	fp, #48
137e0     A7 FA 61 FC | 	wrlong	result1, fp
137e4     1E 24 C6 F9 | 	decod	local04, #30
137e8     FD 12 02 F6 | 	mov	arg01, result1
137ec     30 4E 85 F1 | 	sub	fp, #48
137f0     05 12 06 F1 | 	add	arg01, #5
137f4     09 13 52 F6 | 	abs	arg01, arg01 wc
137f8     1F 2C C6 C9 |  if_b	decod	local08, #31
137fc     00 2C 06 36 |  if_ae	mov	local08, #0
13800     F8 F7 B0 FD | 	call	#__system___float_fromuns
13804     16 FB 61 F5 | 	xor	result1, local08
13808     FD 14 02 F6 | 	mov	arg02, result1
1380c     12 13 02 F6 | 	mov	arg01, local04
13810     F4 0A B1 FD | 	call	#__system____builtin_powf
13814     FD 12 02 F6 | 	mov	arg01, result1
13818     01 14 06 F6 | 	mov	arg02, #1
1381c     A8 00 B1 FD | 	call	#__system___float_tointeger
13820     10 4E 05 F1 | 	add	fp, #16
13824     A7 FA 61 FC | 	wrlong	result1, fp
13828                 | ' skip=round(2^(lfreq+5))
13828                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
13828     10 4E 85 F1 | 	sub	fp, #16
1382c     40 00 00 FF 
13830     01 FA 55 F2 | 	cmps	result1, ##32769 wc
13834     30 00 90 CD |  if_b	jmp	#LR__1627
13838     10 4E 05 F1 | 	add	fp, #16
1383c     A7 1E 02 FB | 	rdlong	local01, fp
13840     0F 25 52 F6 | 	abs	local04, local01 wc
13844     0F 24 46 F0 | 	shr	local04, #15
13848     12 25 82 F6 | 	negc	local04, local04
1384c     0C 4E 85 F1 | 	sub	fp, #12
13850     A7 24 62 FC | 	wrlong	local04, fp
13854     0C 4E 05 F1 | 	add	fp, #12
13858     40 00 80 FF 
1385c     A7 00 68 FC | 	wrlong	##32768, fp
13860     10 4E 85 F1 | 	sub	fp, #16
13864     0C 00 90 FD | 	jmp	#LR__1628
13868                 | LR__1627
13868     04 4E 05 F1 | 	add	fp, #4
1386c     A7 02 68 FC | 	wrlong	#1, fp
13870     04 4E 85 F1 | 	sub	fp, #4
13874                 | LR__1628
13874     6C 4E 05 F1 | 	add	fp, #108
13878     A7 14 02 FB | 	rdlong	arg02, fp
1387c     6C 4E 85 F1 | 	sub	fp, #108
13880     3E 2C 25 FF 
13884     3C 12 06 F6 | 	mov	arg01, ##1247312956
13888     78 FD B0 FD | 	call	#__system___float_div
1388c     FD 24 02 F6 | 	mov	local04, result1
13890     04 4E 05 F1 | 	add	fp, #4
13894     A7 12 02 FB | 	rdlong	arg01, fp
13898     04 4E 85 F1 | 	sub	fp, #4
1389c     09 13 52 F6 | 	abs	arg01, arg01 wc
138a0     1F 2C C6 C9 |  if_b	decod	local08, #31
138a4     00 2C 06 36 |  if_ae	mov	local08, #0
138a8     50 F7 B0 FD | 	call	#__system___float_fromuns
138ac     16 FB 61 F5 | 	xor	result1, local08
138b0     FD 1E 02 F6 | 	mov	local01, result1
138b4     1E 20 C6 F9 | 	decod	local02, #30
138b8     0D 12 06 F6 | 	mov	arg01, #13
138bc     30 4E 05 F1 | 	add	fp, #48
138c0     A7 28 02 FB | 	rdlong	local06, fp
138c4     30 4E 85 F1 | 	sub	fp, #48
138c8     14 13 82 F1 | 	sub	arg01, local06
138cc     09 13 52 F6 | 	abs	arg01, arg01 wc
138d0     1F 2C C6 C9 |  if_b	decod	local08, #31
138d4     00 2C 06 36 |  if_ae	mov	local08, #0
138d8     20 F7 B0 FD | 	call	#__system___float_fromuns
138dc     16 FB 61 F5 | 	xor	result1, local08
138e0     FD 14 02 F6 | 	mov	arg02, result1
138e4     10 13 02 F6 | 	mov	arg01, local02
138e8     1C 0A B1 FD | 	call	#__system____builtin_powf
138ec     FD 14 02 F6 | 	mov	arg02, result1
138f0     0F 13 02 F6 | 	mov	arg01, local01
138f4     08 FB B0 FD | 	call	#__system___float_mul
138f8     FD 14 02 F6 | 	mov	arg02, result1
138fc     12 13 02 F6 | 	mov	arg01, local04
13900     00 FD B0 FD | 	call	#__system___float_div
13904     FD 12 02 F6 | 	mov	arg01, result1
13908     01 14 06 F6 | 	mov	arg02, #1
1390c     B8 FF B0 FD | 	call	#__system___float_tointeger
13910     34 4E 05 F1 | 	add	fp, #52
13914     A7 FA 61 FC | 	wrlong	result1, fp
13918     34 4E 05 F1 | 	add	fp, #52
1391c     A7 12 02 FB | 	rdlong	arg01, fp
13920     10 4E 05 F1 | 	add	fp, #16
13924     A7 14 02 FB | 	rdlong	arg02, fp
13928     78 4E 85 F1 | 	sub	fp, #120
1392c     D4 FC B0 FD | 	call	#__system___float_div
13930     FD 12 02 F6 | 	mov	arg01, result1
13934     01 14 06 F6 | 	mov	arg02, #1
13938     8C FF B0 FD | 	call	#__system___float_tointeger
1393c     FD 24 02 F6 | 	mov	local04, result1
13940     14 4E 05 F1 | 	add	fp, #20
13944     A7 24 62 FC | 	wrlong	local04, fp
13948     5C 4E 05 F1 | 	add	fp, #92
1394c     A7 14 02 FB | 	rdlong	arg02, fp
13950     70 4E 85 F1 | 	sub	fp, #112
13954     00 00 23 FF 
13958     00 12 06 F6 | 	mov	arg01, ##1174405120
1395c     A0 FA B0 FD | 	call	#__system___float_mul
13960     FD 12 02 F6 | 	mov	arg01, result1
13964     01 14 06 F6 | 	mov	arg02, #1
13968     5C FF B0 FD | 	call	#__system___float_tointeger
1396c     0D 24 C6 F9 | 	decod	local04, #13
13970     FD 24 02 F1 | 	add	local04, result1
13974     18 4E 05 F1 | 	add	fp, #24
13978     A7 24 62 FC | 	wrlong	local04, fp
1397c     5C 4E 05 F1 | 	add	fp, #92
13980     A7 14 02 FB | 	rdlong	arg02, fp
13984     74 4E 85 F1 | 	sub	fp, #116
13988     00 3D 22 FF 
1398c     00 12 06 F6 | 	mov	arg01, ##1148846080
13990     6C FA B0 FD | 	call	#__system___float_mul
13994     FD 12 02 F6 | 	mov	arg01, result1
13998     01 14 06 F6 | 	mov	arg02, #1
1399c     28 FF B0 FD | 	call	#__system___float_tointeger
139a0     1C 4E 05 F1 | 	add	fp, #28
139a4     A7 FA 61 FC | 	wrlong	result1, fp
139a8     37 00 00 FF 
139ac     10 E4 05 F1 | 	add	objptr, ##28176
139b0     F2 24 02 FB | 	rdlong	local04, objptr
139b4     37 00 00 FF 
139b8     10 E4 85 F1 | 	sub	objptr, ##28176
139bc     10 4E 85 F1 | 	sub	fp, #16
139c0     A7 20 02 FB | 	rdlong	local02, fp
139c4     06 20 66 F0 | 	shl	local02, #6
139c8     10 25 02 F1 | 	add	local04, local02
139cc     04 4E 85 F1 | 	sub	fp, #4
139d0     A7 24 62 FC | 	wrlong	local04, fp
139d4                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
139d4                 | ' speed=round(speed_coeff/slen)
139d4                 | ' ipan=8192+round(8192*pan)
139d4                 | ' ivol=round(1000.0*vol)
139d4                 | ' base2=base+64*channel
139d4                 | ' if wave <32 then 
139d4     18 4E 05 F1 | 	add	fp, #24
139d8     A7 24 02 FB | 	rdlong	local04, fp
139dc     20 4E 85 F1 | 	sub	fp, #32
139e0     20 24 56 F2 | 	cmps	local04, #32 wc
139e4     2C 00 90 3D |  if_ae	jmp	#LR__1629
139e8     08 4E 05 F1 | 	add	fp, #8
139ec     A7 12 02 FB | 	rdlong	arg01, fp
139f0     08 12 06 F1 | 	add	arg01, #8
139f4     18 4E 05 F1 | 	add	fp, #24
139f8     A7 14 02 FB | 	rdlong	arg02, fp
139fc     20 4E 85 F1 | 	sub	fp, #32
13a00     0B 14 66 F0 | 	shl	arg02, #11
13a04     00 00 60 FF 
13a08     00 14 06 F1 | 	add	arg02, ##-1073741824
13a0c     09 15 62 FC | 	wrlong	arg02, arg01
13a10     18 00 90 FD | 	jmp	#LR__1630
13a14                 | LR__1629
13a14     08 4E 05 F1 | 	add	fp, #8
13a18     A7 12 02 FB | 	rdlong	arg01, fp
13a1c     08 4E 85 F1 | 	sub	fp, #8
13a20     08 12 06 F1 | 	add	arg01, #8
13a24     00 00 E4 FF 
13a28     09 01 68 FC | 	wrlong	##-939524096, arg01
13a2c                 | LR__1630
13a2c     08 4E 05 F1 | 	add	fp, #8
13a30     A7 12 02 FB | 	rdlong	arg01, fp
13a34     10 12 06 F1 | 	add	arg01, #16
13a38     04 00 80 FF 
13a3c     09 01 68 FC | 	wrlong	##2048, arg01
13a40     A7 12 02 FB | 	rdlong	arg01, fp
13a44     0C 12 06 F1 | 	add	arg01, #12
13a48     09 01 68 FC | 	wrlong	#0, arg01
13a4c     A7 12 02 FB | 	rdlong	arg01, fp
13a50     14 12 06 F1 | 	add	arg01, #20
13a54     14 4E 05 F1 | 	add	fp, #20
13a58     A7 14 02 FB | 	rdlong	arg02, fp
13a5c     09 15 52 FC | 	wrword	arg02, arg01
13a60     14 4E 85 F1 | 	sub	fp, #20
13a64     A7 12 02 FB | 	rdlong	arg01, fp
13a68     16 12 06 F1 | 	add	arg01, #22
13a6c     10 4E 05 F1 | 	add	fp, #16
13a70     A7 14 02 FB | 	rdlong	arg02, fp
13a74     09 15 52 FC | 	wrword	arg02, arg01
13a78                 | ' lpoke base2+16,2048
13a78                 | ' lpoke base2+12,0
13a78                 | ' dpoke base2+20,ivol 
13a78                 | ' dpoke base2+22,ipan 
13a78                 | ' if wave<32 then
13a78     08 4E 05 F1 | 	add	fp, #8
13a7c     A7 24 02 FB | 	rdlong	local04, fp
13a80     20 4E 85 F1 | 	sub	fp, #32
13a84     20 24 56 F2 | 	cmps	local04, #32 wc
13a88     38 00 90 3D |  if_ae	jmp	#LR__1631
13a8c     08 4E 05 F1 | 	add	fp, #8
13a90     A7 12 02 FB | 	rdlong	arg01, fp
13a94     18 12 06 F1 | 	add	arg01, #24
13a98     2C 4E 05 F1 | 	add	fp, #44
13a9c     A7 14 02 FB | 	rdlong	arg02, fp
13aa0     09 15 52 FC | 	wrword	arg02, arg01
13aa4     2C 4E 85 F1 | 	sub	fp, #44
13aa8     A7 12 02 FB | 	rdlong	arg01, fp
13aac     1A 12 06 F1 | 	add	arg01, #26
13ab0     08 4E 05 F1 | 	add	fp, #8
13ab4     A7 14 02 FB | 	rdlong	arg02, fp
13ab8     10 4E 85 F1 | 	sub	fp, #16
13abc     09 15 52 FC | 	wrword	arg02, arg01
13ac0     48 00 90 FD | 	jmp	#LR__1632
13ac4                 | LR__1631
13ac4     08 4E 05 F1 | 	add	fp, #8
13ac8     A7 24 02 FB | 	rdlong	local04, fp
13acc     18 24 06 F1 | 	add	local04, #24
13ad0     64 4E 05 F1 | 	add	fp, #100
13ad4     A7 14 02 FB | 	rdlong	arg02, fp
13ad8     6C 4E 85 F1 | 	sub	fp, #108
13adc     3E 2C 25 FF 
13ae0     3C 12 06 F6 | 	mov	arg01, ##1247312956
13ae4     1C FB B0 FD | 	call	#__system___float_div
13ae8     FD 12 02 F6 | 	mov	arg01, result1
13aec     01 14 06 F6 | 	mov	arg02, #1
13af0     D4 FD B0 FD | 	call	#__system___float_tointeger
13af4     12 FB 51 FC | 	wrword	result1, local04
13af8     08 4E 05 F1 | 	add	fp, #8
13afc     A7 12 02 FB | 	rdlong	arg01, fp
13b00     08 4E 85 F1 | 	sub	fp, #8
13b04     1A 12 06 F1 | 	add	arg01, #26
13b08     09 01 5A FC | 	wrword	#256, arg01
13b0c                 | LR__1632
13b0c     08 4E 05 F1 | 	add	fp, #8
13b10     A7 12 02 FB | 	rdlong	arg01, fp
13b14     1C 12 06 F1 | 	add	arg01, #28
13b18     09 01 68 FC | 	wrlong	#0, arg01
13b1c     A7 12 02 FB | 	rdlong	arg01, fp
13b20     20 12 06 F1 | 	add	arg01, #32
13b24     09 01 68 FC | 	wrlong	#0, arg01
13b28                 | ' lpoke base2+28,$0000_0000
13b28                 | ' lpoke base2+32,0 
13b28                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
13b28     1C 4E 05 F1 | 	add	fp, #28
13b2c     A7 24 02 FB | 	rdlong	local04, fp
13b30     24 4E 85 F1 | 	sub	fp, #36
13b34     08 24 0E F2 | 	cmp	local04, #8 wz
13b38     18 00 90 5D |  if_ne	jmp	#LR__1633
13b3c     08 4E 05 F1 | 	add	fp, #8
13b40     A7 12 02 FB | 	rdlong	arg01, fp
13b44     08 4E 85 F1 | 	sub	fp, #8
13b48     24 12 06 F1 | 	add	arg01, #36
13b4c     09 01 68 FC | 	wrlong	#0, arg01
13b50     34 00 90 FD | 	jmp	#LR__1634
13b54                 | LR__1633
13b54     08 4E 05 F1 | 	add	fp, #8
13b58     A7 12 02 FB | 	rdlong	arg01, fp
13b5c     24 12 06 F1 | 	add	arg01, #36
13b60     1C 4E 05 F1 | 	add	fp, #28
13b64     A7 14 02 FB | 	rdlong	arg02, fp
13b68     24 4E 85 F1 | 	sub	fp, #36
13b6c     09 14 66 F0 | 	shl	arg02, #9
13b70     0C 00 00 FF 
13b74     D8 E4 05 F1 | 	add	objptr, ##6360
13b78     F2 14 02 F1 | 	add	arg02, objptr
13b7c     0C 00 00 FF 
13b80     D8 E4 85 F1 | 	sub	objptr, ##6360
13b84     09 15 62 FC | 	wrlong	arg02, arg01
13b88                 | LR__1634
13b88     08 4E 05 F1 | 	add	fp, #8
13b8c     A7 12 02 FB | 	rdlong	arg01, fp
13b90     28 12 06 F1 | 	add	arg01, #40
13b94     0C 4E 05 F1 | 	add	fp, #12
13b98     A7 14 02 FB | 	rdlong	arg02, fp
13b9c     09 15 62 FC | 	wrlong	arg02, arg01
13ba0     0C 4E 85 F1 | 	sub	fp, #12
13ba4     A7 12 02 FB | 	rdlong	arg01, fp
13ba8     2C 12 06 F1 | 	add	arg01, #44
13bac     24 4E 05 F1 | 	add	fp, #36
13bb0     A7 14 02 FB | 	rdlong	arg02, fp
13bb4     09 15 62 FC | 	wrlong	arg02, arg01
13bb8                 | ' lpoke base2+40,speed 
13bb8                 | ' lpoke base2+44,sus 
13bb8                 | ' if delay>0 then waitms(delay) 
13bb8     04 4E 85 F1 | 	sub	fp, #4
13bbc     A7 24 02 FB | 	rdlong	local04, fp
13bc0     28 4E 85 F1 | 	sub	fp, #40
13bc4     01 24 56 F2 | 	cmps	local04, #1 wc
13bc8     28 4E 05 31 |  if_ae	add	fp, #40
13bcc     A7 12 02 3B |  if_ae	rdlong	arg01, fp
13bd0     28 4E 85 31 |  if_ae	sub	fp, #40
13bd4     68 CF B0 3D |  if_ae	call	#__system___waitms
13bd8     A7 F0 03 F6 | 	mov	ptra, fp
13bdc     B2 00 A0 FD | 	call	#popregs_
13be0                 | _do_play_ret
13be0     2D 00 64 FD | 	ret
13be4                 | 
13be4                 | ' 
13be4                 | ' '-------------------- plot
13be4                 | ' 
13be4                 | ' sub do_plot
13be4                 | _do_plot
13be4     00 4A 05 F6 | 	mov	COUNT_, #0
13be8     A8 00 A0 FD | 	call	#pushregs_
13bec     20 F0 07 F1 | 	add	ptra, #32
13bf0     A8 77 BF FD | 	call	#_pop
13bf4     FD 16 02 F6 | 	mov	arg03, result1
13bf8     FE 14 02 F6 | 	mov	arg02, result2
13bfc     FF 12 02 F6 | 	mov	arg01, result3
13c00     0C 4E 05 F1 | 	add	fp, #12
13c04     A7 16 62 FC | 	wrlong	arg03, fp
13c08     04 4E 05 F1 | 	add	fp, #4
13c0c     A7 14 62 FC | 	wrlong	arg02, fp
13c10     04 4E 05 F1 | 	add	fp, #4
13c14     A7 12 62 FC | 	wrlong	arg01, fp
13c18     14 4E 85 F1 | 	sub	fp, #20
13c1c     7C 77 BF FD | 	call	#_pop
13c20     FF 16 02 F6 | 	mov	arg03, result3
13c24     A7 FA 61 FC | 	wrlong	result1, fp
13c28     04 4E 05 F1 | 	add	fp, #4
13c2c     A7 FC 61 FC | 	wrlong	result2, fp
13c30     04 4E 05 F1 | 	add	fp, #4
13c34     A7 16 62 FC | 	wrlong	arg03, fp
13c38     08 4E 85 F1 | 	sub	fp, #8
13c3c     A7 12 02 F6 | 	mov	arg01, fp
13c40     3C 79 BF FD | 	call	#_converttoint
13c44     18 4E 05 F1 | 	add	fp, #24
13c48     A7 FA 61 FC | 	wrlong	result1, fp
13c4c     0C 4E 85 F1 | 	sub	fp, #12
13c50     A7 12 02 F6 | 	mov	arg01, fp
13c54     0C 4E 85 F1 | 	sub	fp, #12
13c58     24 79 BF FD | 	call	#_converttoint
13c5c     1C 4E 05 F1 | 	add	fp, #28
13c60     A7 FA 61 FC | 	wrlong	result1, fp
13c64     04 4E 85 F1 | 	sub	fp, #4
13c68     A7 16 02 FB | 	rdlong	arg03, fp
13c6c     37 00 00 FF 
13c70     2C E4 05 F1 | 	add	objptr, ##28204
13c74     F2 16 62 FC | 	wrlong	arg03, objptr
13c78     04 4E 05 F1 | 	add	fp, #4
13c7c     A7 14 02 FB | 	rdlong	arg02, fp
13c80     1C 4E 85 F1 | 	sub	fp, #28
13c84     04 E4 05 F1 | 	add	objptr, #4
13c88     F2 14 62 FC | 	wrlong	arg02, objptr
13c8c     04 E4 85 F1 | 	sub	objptr, #4
13c90     F2 12 02 FB | 	rdlong	arg01, objptr
13c94     04 E4 85 F1 | 	sub	objptr, #4
13c98     F2 16 02 FB | 	rdlong	arg03, objptr
13c9c     37 00 00 FF 
13ca0     28 E4 85 F1 | 	sub	objptr, ##28200
13ca4     F4 A5 B0 FD | 	call	#_hg010b_spin2_putpixel
13ca8     A7 F0 03 F6 | 	mov	ptra, fp
13cac     B2 00 A0 FD | 	call	#popregs_
13cb0                 | _do_plot_ret
13cb0     2D 00 64 FD | 	ret
13cb4                 | 
13cb4                 | ' 
13cb4                 | ' '-------------------- pop
13cb4                 | ' 
13cb4                 | ' sub do_pop()
13cb4                 | _do_pop
13cb4                 | ' if gosubtop>0 then  gosubtop -=1 
13cb4     50 00 00 FF 
13cb8     0C E5 05 F1 | 	add	objptr, ##41228
13cbc     F2 00 02 FB | 	rdlong	_var01, objptr
13cc0     50 00 00 FF 
13cc4     0C E5 85 F1 | 	sub	objptr, ##41228
13cc8     01 00 56 F2 | 	cmps	_var01, #1 wc
13ccc     50 00 00 3F 
13cd0     0C E5 05 31 |  if_ae	add	objptr, ##41228
13cd4     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
13cd8     01 00 86 31 |  if_ae	sub	_var01, #1
13cdc     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
13ce0     50 00 00 3F 
13ce4     0C E5 85 31 |  if_ae	sub	objptr, ##41228
13ce8                 | _do_pop_ret
13ce8     2D 00 64 FD | 	ret
13cec                 | 
13cec                 | ' 
13cec                 | ' '-------------------- print
13cec                 | ' 
13cec                 | ' sub do_print  
13cec                 | _do_print
13cec     0B 4A 05 F6 | 	mov	COUNT_, #11
13cf0     A8 00 A0 FD | 	call	#pushregs_
13cf4     00 24 06 F6 | 	mov	local04, #0
13cf8     A0 76 BF FD | 	call	#_pop
13cfc     FD 26 02 F6 | 	mov	local05, result1
13d00     FE 28 02 F6 | 	mov	local06, result2
13d04     FF 2A 02 F6 | 	mov	local07, result3
13d08     13 1F 02 F6 | 	mov	local01, local05
13d0c     14 21 02 F6 | 	mov	local02, local06
13d10     15 23 02 F6 | 	mov	local03, local07
13d14                 | '  
13d14                 | ' r=0
13d14                 | ' t1=pop() 
13d14                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
13d14     21 22 0E F2 | 	cmp	local03, #33 wz
13d18     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
13d1c     20 00 90 5D |  if_ne	jmp	#LR__1640
13d20     11 25 02 F6 | 	mov	local04, local03
13d24     74 76 BF FD | 	call	#_pop
13d28     FD 26 02 F6 | 	mov	local05, result1
13d2c     FE 28 02 F6 | 	mov	local06, result2
13d30     FF 2A 02 F6 | 	mov	local07, result3
13d34     13 1F 02 F6 | 	mov	local01, local05
13d38     14 21 02 F6 | 	mov	local02, local06
13d3c     15 23 02 F6 | 	mov	local03, local07
13d40                 | LR__1640
13d40                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
13d40     20 22 0E F2 | 	cmp	local03, #32 wz
13d44     11 25 02 A6 |  if_e	mov	local04, local03
13d48                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
13d48     FF 22 0E F2 | 	cmp	local03, #255 wz
13d4c     0C 00 90 5D |  if_ne	jmp	#LR__1641
13d50     0F 13 02 F6 | 	mov	arg01, local01
13d54     64 95 B0 FD | 	call	#_printerror
13d58     D4 04 90 FD | 	jmp	#LR__1660
13d5c                 | LR__1641
13d5c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
13d5c     2B 22 0E F2 | 	cmp	local03, #43 wz
13d60     14 00 90 5D |  if_ne	jmp	#LR__1642
13d64     0F 13 02 F6 | 	mov	arg01, local01
13d68     A8 77 BF FD | 	call	#_convertstring
13d6c     FD 26 02 F6 | 	mov	local05, result1
13d70     13 1F 02 F6 | 	mov	local01, local05
13d74     1F 22 06 F6 | 	mov	local03, #31
13d78                 | LR__1642
13d78                 | ' 
13d78                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
13d78     2C 22 0E F2 | 	cmp	local03, #44 wz
13d7c     80 00 90 5D |  if_ne	jmp	#LR__1643
13d80     00 12 06 F6 | 	mov	arg01, #0
13d84     28 25 B1 FD | 	call	#__system___getiolock_0541
13d88     FD 12 02 F6 | 	mov	arg01, result1
13d8c     BC CA B0 FD | 	call	#__system___lockmem
13d90     84 01 00 FF 
13d94     71 15 06 F6 | 	mov	arg02, ##@LR__5482
13d98     00 12 06 F6 | 	mov	arg01, #0
13d9c     00 16 06 F6 | 	mov	arg03, #0
13da0     9C D7 B0 FD | 	call	#__system___basic_print_string
13da4     0A 2C 06 F6 | 	mov	local08, #10
13da8     00 12 06 F6 | 	mov	arg01, #0
13dac     0F 15 02 F6 | 	mov	arg02, local01
13db0     00 16 06 F6 | 	mov	arg03, #0
13db4     0A 18 06 F6 | 	mov	arg04, #10
13db8     C8 D7 B0 FD | 	call	#__system___basic_print_integer
13dbc     FD 2E 02 F6 | 	mov	local09, result1
13dc0     00 12 06 F6 | 	mov	arg01, #0
13dc4     0A 14 06 F6 | 	mov	arg02, #10
13dc8     00 16 06 F6 | 	mov	arg03, #0
13dcc     18 D7 B0 FD | 	call	#__system___basic_print_char
13dd0     01 30 06 F6 | 	mov	local10, #1
13dd4     00 12 06 F6 | 	mov	arg01, #0
13dd8     D4 24 B1 FD | 	call	#__system___getiolock_0541
13ddc     FD 00 68 FC | 	wrlong	#0, result1
13de0     00 32 06 F6 | 	mov	local11, #0
13de4     B4 75 BF FD | 	call	#_pop
13de8     FD 26 02 F6 | 	mov	local05, result1
13dec     FE 28 02 F6 | 	mov	local06, result2
13df0     FF 2A 02 F6 | 	mov	local07, result3
13df4     13 1F 02 F6 | 	mov	local01, local05
13df8     14 21 02 F6 | 	mov	local02, local06
13dfc     15 23 02 F6 | 	mov	local03, local07
13e00                 | LR__1643
13e00                 | ' 
13e00                 | ' if r=print_mod_comma  then
13e00     21 24 0E F2 | 	cmp	local04, #33 wz
13e04     AC 01 90 5D |  if_ne	jmp	#LR__1648
13e08                 | '   if t1.result_type=result_int then print t1.result.iresult,
13e08     1C 22 0E F2 | 	cmp	local03, #28 wz
13e0c     64 00 90 5D |  if_ne	jmp	#LR__1644
13e10     00 12 06 F6 | 	mov	arg01, #0
13e14     98 24 B1 FD | 	call	#__system___getiolock_0541
13e18     FD 12 02 F6 | 	mov	arg01, result1
13e1c     2C CA B0 FD | 	call	#__system___lockmem
13e20     00 28 06 F6 | 	mov	local06, #0
13e24     00 12 06 F6 | 	mov	arg01, #0
13e28     0F 15 02 F6 | 	mov	arg02, local01
13e2c     00 16 06 F6 | 	mov	arg03, #0
13e30     0A 18 06 F6 | 	mov	arg04, #10
13e34     4C D7 B0 FD | 	call	#__system___basic_print_integer
13e38     FD 2A 02 F6 | 	mov	local07, result1
13e3c     14 27 02 F6 | 	mov	local05, local06
13e40     15 27 02 F1 | 	add	local05, local07
13e44     00 32 06 F6 | 	mov	local11, #0
13e48     00 12 06 F6 | 	mov	arg01, #0
13e4c     09 14 06 F6 | 	mov	arg02, #9
13e50     00 16 06 F6 | 	mov	arg03, #0
13e54     90 D6 B0 FD | 	call	#__system___basic_print_char
13e58     FD 2E 02 F6 | 	mov	local09, result1
13e5c     FD 26 02 F1 | 	add	local05, result1
13e60     00 12 06 F6 | 	mov	arg01, #0
13e64     48 24 B1 FD | 	call	#__system___getiolock_0541
13e68     FD 00 68 FC | 	wrlong	#0, result1
13e6c     00 FA 05 F6 | 	mov	result1, #0
13e70     00 30 06 F6 | 	mov	local10, #0
13e74                 | LR__1644
13e74                 | '   if t1.result_type=result_uint then print t1.result.uresult,
13e74     1D 22 0E F2 | 	cmp	local03, #29 wz
13e78     64 00 90 5D |  if_ne	jmp	#LR__1645
13e7c     00 12 06 F6 | 	mov	arg01, #0
13e80     2C 24 B1 FD | 	call	#__system___getiolock_0541
13e84     FD 12 02 F6 | 	mov	arg01, result1
13e88     C0 C9 B0 FD | 	call	#__system___lockmem
13e8c     00 28 06 F6 | 	mov	local06, #0
13e90     00 12 06 F6 | 	mov	arg01, #0
13e94     0F 15 02 F6 | 	mov	arg02, local01
13e98     00 16 06 F6 | 	mov	arg03, #0
13e9c     0A 18 06 F6 | 	mov	arg04, #10
13ea0     20 D7 B0 FD | 	call	#__system___basic_print_unsigned
13ea4     FD 2A 02 F6 | 	mov	local07, result1
13ea8     14 27 02 F6 | 	mov	local05, local06
13eac     15 27 02 F1 | 	add	local05, local07
13eb0     00 32 06 F6 | 	mov	local11, #0
13eb4     00 12 06 F6 | 	mov	arg01, #0
13eb8     09 14 06 F6 | 	mov	arg02, #9
13ebc     00 16 06 F6 | 	mov	arg03, #0
13ec0     24 D6 B0 FD | 	call	#__system___basic_print_char
13ec4     FD 2E 02 F6 | 	mov	local09, result1
13ec8     FD 26 02 F1 | 	add	local05, result1
13ecc     00 12 06 F6 | 	mov	arg01, #0
13ed0     DC 23 B1 FD | 	call	#__system___getiolock_0541
13ed4     FD 00 68 FC | 	wrlong	#0, result1
13ed8     00 FA 05 F6 | 	mov	result1, #0
13edc     00 30 06 F6 | 	mov	local10, #0
13ee0                 | LR__1645
13ee0                 | '   if t1.result_type=result_float then print t1.result.fresult,
13ee0     1E 22 0E F2 | 	cmp	local03, #30 wz
13ee4     64 00 90 5D |  if_ne	jmp	#LR__1646
13ee8     00 12 06 F6 | 	mov	arg01, #0
13eec     C0 23 B1 FD | 	call	#__system___getiolock_0541
13ef0     FD 12 02 F6 | 	mov	arg01, result1
13ef4     54 C9 B0 FD | 	call	#__system___lockmem
13ef8     00 28 06 F6 | 	mov	local06, #0
13efc     00 12 06 F6 | 	mov	arg01, #0
13f00     0F 15 02 F6 | 	mov	arg02, local01
13f04     00 16 06 F6 | 	mov	arg03, #0
13f08     23 18 06 F6 | 	mov	arg04, #35
13f0c     08 FB B0 FD | 	call	#__system___basic_print_float
13f10     FD 2A 02 F6 | 	mov	local07, result1
13f14     14 27 02 F6 | 	mov	local05, local06
13f18     15 27 02 F1 | 	add	local05, local07
13f1c     00 32 06 F6 | 	mov	local11, #0
13f20     00 12 06 F6 | 	mov	arg01, #0
13f24     09 14 06 F6 | 	mov	arg02, #9
13f28     00 16 06 F6 | 	mov	arg03, #0
13f2c     B8 D5 B0 FD | 	call	#__system___basic_print_char
13f30     FD 2E 02 F6 | 	mov	local09, result1
13f34     FD 26 02 F1 | 	add	local05, result1
13f38     00 12 06 F6 | 	mov	arg01, #0
13f3c     70 23 B1 FD | 	call	#__system___getiolock_0541
13f40     FD 00 68 FC | 	wrlong	#0, result1
13f44     00 FA 05 F6 | 	mov	result1, #0
13f48     00 30 06 F6 | 	mov	local10, #0
13f4c                 | LR__1646
13f4c                 | '   if t1.result_type=result_string then print t1.result.sresult,
13f4c     1F 22 0E F2 | 	cmp	local03, #31 wz
13f50     60 00 90 5D |  if_ne	jmp	#LR__1647
13f54     00 12 06 F6 | 	mov	arg01, #0
13f58     54 23 B1 FD | 	call	#__system___getiolock_0541
13f5c     FD 12 02 F6 | 	mov	arg01, result1
13f60     E8 C8 B0 FD | 	call	#__system___lockmem
13f64     00 28 06 F6 | 	mov	local06, #0
13f68     00 12 06 F6 | 	mov	arg01, #0
13f6c     0F 15 02 F6 | 	mov	arg02, local01
13f70     00 16 06 F6 | 	mov	arg03, #0
13f74     C8 D5 B0 FD | 	call	#__system___basic_print_string
13f78     FD 2A 02 F6 | 	mov	local07, result1
13f7c     14 27 02 F6 | 	mov	local05, local06
13f80     15 27 02 F1 | 	add	local05, local07
13f84     00 32 06 F6 | 	mov	local11, #0
13f88     00 12 06 F6 | 	mov	arg01, #0
13f8c     09 14 06 F6 | 	mov	arg02, #9
13f90     00 16 06 F6 | 	mov	arg03, #0
13f94     50 D5 B0 FD | 	call	#__system___basic_print_char
13f98     FD 2E 02 F6 | 	mov	local09, result1
13f9c     FD 26 02 F1 | 	add	local05, result1
13fa0     00 12 06 F6 | 	mov	arg01, #0
13fa4     08 23 B1 FD | 	call	#__system___getiolock_0541
13fa8     FD 00 68 FC | 	wrlong	#0, result1
13fac     00 FA 05 F6 | 	mov	result1, #0
13fb0     00 30 06 F6 | 	mov	local10, #0
13fb4                 | LR__1647
13fb4                 | LR__1648
13fb4                 | ' if r=print_mod_semicolon then 
13fb4     22 24 0E F2 | 	cmp	local04, #34 wz
13fb8     1C 01 90 5D |  if_ne	jmp	#LR__1653
13fbc                 | '   if t1.result_type=result_int then print t1.result.iresult;
13fbc     1C 22 0E F2 | 	cmp	local03, #28 wz
13fc0     50 00 90 5D |  if_ne	jmp	#LR__1649
13fc4     00 12 06 F6 | 	mov	arg01, #0
13fc8     E4 22 B1 FD | 	call	#__system___getiolock_0541
13fcc     FD 12 02 F6 | 	mov	arg01, result1
13fd0     78 C8 B0 FD | 	call	#__system___lockmem
13fd4     00 28 06 F6 | 	mov	local06, #0
13fd8     00 30 06 F6 | 	mov	local10, #0
13fdc     0A 32 06 F6 | 	mov	local11, #10
13fe0     00 12 06 F6 | 	mov	arg01, #0
13fe4     0F 15 02 F6 | 	mov	arg02, local01
13fe8     00 16 06 F6 | 	mov	arg03, #0
13fec     0A 18 06 F6 | 	mov	arg04, #10
13ff0     90 D5 B0 FD | 	call	#__system___basic_print_integer
13ff4     FD 2A 02 F6 | 	mov	local07, result1
13ff8     14 27 02 F6 | 	mov	local05, local06
13ffc     15 27 02 F1 | 	add	local05, local07
14000     00 12 06 F6 | 	mov	arg01, #0
14004     A8 22 B1 FD | 	call	#__system___getiolock_0541
14008     FD 00 68 FC | 	wrlong	#0, result1
1400c     00 FA 05 F6 | 	mov	result1, #0
14010     00 2E 06 F6 | 	mov	local09, #0
14014                 | LR__1649
14014                 | '   if t1.result_type=result_uint then print t1.result.uresult;
14014     1D 22 0E F2 | 	cmp	local03, #29 wz
14018     50 00 90 5D |  if_ne	jmp	#LR__1650
1401c     00 12 06 F6 | 	mov	arg01, #0
14020     8C 22 B1 FD | 	call	#__system___getiolock_0541
14024     FD 12 02 F6 | 	mov	arg01, result1
14028     20 C8 B0 FD | 	call	#__system___lockmem
1402c     00 28 06 F6 | 	mov	local06, #0
14030     00 30 06 F6 | 	mov	local10, #0
14034     0A 32 06 F6 | 	mov	local11, #10
14038     00 12 06 F6 | 	mov	arg01, #0
1403c     0F 15 02 F6 | 	mov	arg02, local01
14040     00 16 06 F6 | 	mov	arg03, #0
14044     0A 18 06 F6 | 	mov	arg04, #10
14048     78 D5 B0 FD | 	call	#__system___basic_print_unsigned
1404c     FD 2A 02 F6 | 	mov	local07, result1
14050     14 27 02 F6 | 	mov	local05, local06
14054     15 27 02 F1 | 	add	local05, local07
14058     00 12 06 F6 | 	mov	arg01, #0
1405c     50 22 B1 FD | 	call	#__system___getiolock_0541
14060     FD 00 68 FC | 	wrlong	#0, result1
14064     00 FA 05 F6 | 	mov	result1, #0
14068     00 2E 06 F6 | 	mov	local09, #0
1406c                 | LR__1650
1406c                 | '   if t1.result_type=result_float then print t1.result.fresult;
1406c     1E 22 0E F2 | 	cmp	local03, #30 wz
14070     30 00 90 5D |  if_ne	jmp	#LR__1651
14074     00 12 06 F6 | 	mov	arg01, #0
14078     34 22 B1 FD | 	call	#__system___getiolock_0541
1407c     FD 12 02 F6 | 	mov	arg01, result1
14080     C8 C7 B0 FD | 	call	#__system___lockmem
14084     00 12 06 F6 | 	mov	arg01, #0
14088     0F 15 02 F6 | 	mov	arg02, local01
1408c     00 16 06 F6 | 	mov	arg03, #0
14090     23 18 06 F6 | 	mov	arg04, #35
14094     80 F9 B0 FD | 	call	#__system___basic_print_float
14098     00 12 06 F6 | 	mov	arg01, #0
1409c     10 22 B1 FD | 	call	#__system___getiolock_0541
140a0     FD 00 68 FC | 	wrlong	#0, result1
140a4                 | LR__1651
140a4                 | '   if t1.result_type=result_string then print t1.result.sresult;
140a4     1F 22 0E F2 | 	cmp	local03, #31 wz
140a8     2C 00 90 5D |  if_ne	jmp	#LR__1652
140ac     00 12 06 F6 | 	mov	arg01, #0
140b0     FC 21 B1 FD | 	call	#__system___getiolock_0541
140b4     FD 12 02 F6 | 	mov	arg01, result1
140b8     90 C7 B0 FD | 	call	#__system___lockmem
140bc     00 12 06 F6 | 	mov	arg01, #0
140c0     0F 15 02 F6 | 	mov	arg02, local01
140c4     00 16 06 F6 | 	mov	arg03, #0
140c8     74 D4 B0 FD | 	call	#__system___basic_print_string
140cc     00 12 06 F6 | 	mov	arg01, #0
140d0     DC 21 B1 FD | 	call	#__system___getiolock_0541
140d4     FD 00 68 FC | 	wrlong	#0, result1
140d8                 | LR__1652
140d8                 | LR__1653
140d8                 | ' if r=0 then 
140d8     00 24 0E F2 | 	cmp	local04, #0 wz
140dc     1C 01 90 5D |  if_ne	jmp	#LR__1658
140e0                 | '   if t1.result_type=result_int then print t1.result.iresult
140e0     1C 22 0E F2 | 	cmp	local03, #28 wz
140e4     40 00 90 5D |  if_ne	jmp	#LR__1654
140e8     00 12 06 F6 | 	mov	arg01, #0
140ec     C0 21 B1 FD | 	call	#__system___getiolock_0541
140f0     FD 12 02 F6 | 	mov	arg01, result1
140f4     54 C7 B0 FD | 	call	#__system___lockmem
140f8     00 12 06 F6 | 	mov	arg01, #0
140fc     0F 15 02 F6 | 	mov	arg02, local01
14100     00 16 06 F6 | 	mov	arg03, #0
14104     0A 18 06 F6 | 	mov	arg04, #10
14108     78 D4 B0 FD | 	call	#__system___basic_print_integer
1410c     00 12 06 F6 | 	mov	arg01, #0
14110     0A 14 06 F6 | 	mov	arg02, #10
14114     00 16 06 F6 | 	mov	arg03, #0
14118     CC D3 B0 FD | 	call	#__system___basic_print_char
1411c     00 12 06 F6 | 	mov	arg01, #0
14120     8C 21 B1 FD | 	call	#__system___getiolock_0541
14124     FD 00 68 FC | 	wrlong	#0, result1
14128                 | LR__1654
14128                 | '   if t1.result_type=result_uint then print t1.result.uresult
14128     1D 22 0E F2 | 	cmp	local03, #29 wz
1412c     40 00 90 5D |  if_ne	jmp	#LR__1655
14130     00 12 06 F6 | 	mov	arg01, #0
14134     78 21 B1 FD | 	call	#__system___getiolock_0541
14138     FD 12 02 F6 | 	mov	arg01, result1
1413c     0C C7 B0 FD | 	call	#__system___lockmem
14140     00 12 06 F6 | 	mov	arg01, #0
14144     0F 15 02 F6 | 	mov	arg02, local01
14148     00 16 06 F6 | 	mov	arg03, #0
1414c     0A 18 06 F6 | 	mov	arg04, #10
14150     70 D4 B0 FD | 	call	#__system___basic_print_unsigned
14154     00 12 06 F6 | 	mov	arg01, #0
14158     0A 14 06 F6 | 	mov	arg02, #10
1415c     00 16 06 F6 | 	mov	arg03, #0
14160     84 D3 B0 FD | 	call	#__system___basic_print_char
14164     00 12 06 F6 | 	mov	arg01, #0
14168     44 21 B1 FD | 	call	#__system___getiolock_0541
1416c     FD 00 68 FC | 	wrlong	#0, result1
14170                 | LR__1655
14170                 | '   if t1.result_type=result_float then print t1.result.fresult
14170     1E 22 0E F2 | 	cmp	local03, #30 wz
14174     40 00 90 5D |  if_ne	jmp	#LR__1656
14178     00 12 06 F6 | 	mov	arg01, #0
1417c     30 21 B1 FD | 	call	#__system___getiolock_0541
14180     FD 12 02 F6 | 	mov	arg01, result1
14184     C4 C6 B0 FD | 	call	#__system___lockmem
14188     00 12 06 F6 | 	mov	arg01, #0
1418c     0F 15 02 F6 | 	mov	arg02, local01
14190     00 16 06 F6 | 	mov	arg03, #0
14194     23 18 06 F6 | 	mov	arg04, #35
14198     7C F8 B0 FD | 	call	#__system___basic_print_float
1419c     00 12 06 F6 | 	mov	arg01, #0
141a0     0A 14 06 F6 | 	mov	arg02, #10
141a4     00 16 06 F6 | 	mov	arg03, #0
141a8     3C D3 B0 FD | 	call	#__system___basic_print_char
141ac     00 12 06 F6 | 	mov	arg01, #0
141b0     FC 20 B1 FD | 	call	#__system___getiolock_0541
141b4     FD 00 68 FC | 	wrlong	#0, result1
141b8                 | LR__1656
141b8                 | '   if t1.result_type=result_string then print t1.result.sresult
141b8     1F 22 0E F2 | 	cmp	local03, #31 wz
141bc     3C 00 90 5D |  if_ne	jmp	#LR__1657
141c0     00 12 06 F6 | 	mov	arg01, #0
141c4     E8 20 B1 FD | 	call	#__system___getiolock_0541
141c8     FD 12 02 F6 | 	mov	arg01, result1
141cc     7C C6 B0 FD | 	call	#__system___lockmem
141d0     00 12 06 F6 | 	mov	arg01, #0
141d4     0F 15 02 F6 | 	mov	arg02, local01
141d8     00 16 06 F6 | 	mov	arg03, #0
141dc     60 D3 B0 FD | 	call	#__system___basic_print_string
141e0     00 12 06 F6 | 	mov	arg01, #0
141e4     0A 14 06 F6 | 	mov	arg02, #10
141e8     00 16 06 F6 | 	mov	arg03, #0
141ec     F8 D2 B0 FD | 	call	#__system___basic_print_char
141f0     00 12 06 F6 | 	mov	arg01, #0
141f4     B8 20 B1 FD | 	call	#__system___getiolock_0541
141f8     FD 00 68 FC | 	wrlong	#0, result1
141fc                 | LR__1657
141fc                 | LR__1658
141fc                 | ' if r=print_mod_empty then print
141fc     20 24 0E F2 | 	cmp	local04, #32 wz
14200     2C 00 90 5D |  if_ne	jmp	#LR__1659
14204     00 12 06 F6 | 	mov	arg01, #0
14208     A4 20 B1 FD | 	call	#__system___getiolock_0541
1420c     FD 12 02 F6 | 	mov	arg01, result1
14210     38 C6 B0 FD | 	call	#__system___lockmem
14214     00 12 06 F6 | 	mov	arg01, #0
14218     0A 14 06 F6 | 	mov	arg02, #10
1421c     00 16 06 F6 | 	mov	arg03, #0
14220     C4 D2 B0 FD | 	call	#__system___basic_print_char
14224     00 12 06 F6 | 	mov	arg01, #0
14228     84 20 B1 FD | 	call	#__system___getiolock_0541
1422c     FD 00 68 FC | 	wrlong	#0, result1
14230                 | LR__1659
14230                 | LR__1660
14230     A7 F0 03 F6 | 	mov	ptra, fp
14234     B2 00 A0 FD | 	call	#popregs_
14238                 | _do_print_ret
14238     2D 00 64 FD | 	ret
1423c                 | 
1423c                 | ' 
1423c                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
1423c                 | ' 
1423c                 | ' sub do_push
1423c                 | _do_push
1423c                 | ' if stackpointer<maxstack then 
1423c     43 00 00 FF 
14240     58 E4 05 F1 | 	add	objptr, ##34392
14244     F2 00 02 FB | 	rdlong	_var01, objptr
14248     43 00 00 FF 
1424c     58 E4 85 F1 | 	sub	objptr, ##34392
14250     01 00 00 FF 
14254     00 00 56 F2 | 	cmps	_var01, ##512 wc
14258     F8 00 90 3D |  if_ae	jmp	#LR__1670
1425c     4A 00 00 FF 
14260     80 E4 05 F1 | 	add	objptr, ##38016
14264     F2 02 02 FB | 	rdlong	_var02, objptr
14268     01 05 02 F6 | 	mov	_var03, _var02
1426c     01 04 66 F0 | 	shl	_var03, #1
14270     01 05 02 F1 | 	add	_var03, _var02
14274     02 04 66 F0 | 	shl	_var03, #2
14278     03 00 00 FF 
1427c     04 E4 85 F1 | 	sub	objptr, ##1540
14280     F2 04 02 F1 | 	add	_var03, objptr
14284     02 01 02 FB | 	rdlong	_var01, _var03
14288     04 04 06 F1 | 	add	_var03, #4
1428c     02 07 02 FB | 	rdlong	_var04, _var03
14290     01 05 02 F6 | 	mov	_var03, _var02
14294     01 04 66 F0 | 	shl	_var03, #1
14298     01 05 02 F1 | 	add	_var03, _var02
1429c     02 04 66 F0 | 	shl	_var03, #2
142a0     F2 04 02 F1 | 	add	_var03, objptr
142a4     08 04 06 F1 | 	add	_var03, #8
142a8     02 03 02 FB | 	rdlong	_var02, _var03
142ac     04 00 00 FF 
142b0     24 E4 85 F1 | 	sub	objptr, ##2084
142b4     F2 04 02 FB | 	rdlong	_var03, objptr
142b8     02 09 02 F6 | 	mov	_var05, _var03
142bc     01 08 66 F0 | 	shl	_var05, #1
142c0     02 09 02 F1 | 	add	_var05, _var03
142c4     02 08 66 F0 | 	shl	_var05, #2
142c8     0C 00 00 FF 
142cc     0C E4 85 F1 | 	sub	objptr, ##6156
142d0     F2 08 02 F1 | 	add	_var05, objptr
142d4     04 01 62 FC | 	wrlong	_var01, _var05
142d8     0C 00 00 FF 
142dc     0C E4 05 F1 | 	add	objptr, ##6156
142e0     F2 08 02 FB | 	rdlong	_var05, objptr
142e4     04 05 02 F6 | 	mov	_var03, _var05
142e8     01 04 66 F0 | 	shl	_var03, #1
142ec     04 05 02 F1 | 	add	_var03, _var05
142f0     02 04 66 F0 | 	shl	_var03, #2
142f4     0C 00 00 FF 
142f8     0C E4 85 F1 | 	sub	objptr, ##6156
142fc     F2 04 02 F1 | 	add	_var03, objptr
14300     04 04 06 F1 | 	add	_var03, #4
14304     02 07 62 FC | 	wrlong	_var04, _var03
14308     0C 00 00 FF 
1430c     0C E4 05 F1 | 	add	objptr, ##6156
14310     F2 08 02 FB | 	rdlong	_var05, objptr
14314     04 07 02 F6 | 	mov	_var04, _var05
14318     01 06 66 F0 | 	shl	_var04, #1
1431c     04 07 02 F1 | 	add	_var04, _var05
14320     02 06 66 F0 | 	shl	_var04, #2
14324     0C 00 00 FF 
14328     0C E4 85 F1 | 	sub	objptr, ##6156
1432c     F2 06 02 F1 | 	add	_var04, objptr
14330     08 06 06 F1 | 	add	_var04, #8
14334     03 03 62 FC | 	wrlong	_var02, _var04
14338     0C 00 00 FF 
1433c     0C E4 05 F1 | 	add	objptr, ##6156
14340     F2 00 02 FB | 	rdlong	_var01, objptr
14344     01 00 06 F1 | 	add	_var01, #1
14348     F2 00 62 FC | 	wrlong	_var01, objptr
1434c     43 00 00 FF 
14350     58 E4 85 F1 | 	sub	objptr, ##34392
14354                 | LR__1670
14354                 | _do_push_ret
14354     2D 00 64 FD | 	ret
14358                 | 
14358                 | ' 
14358                 | ' '-------------------- put
14358                 | ' 
14358                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
14358                 | _do_put
14358     03 4A 05 F6 | 	mov	COUNT_, #3
1435c     A8 00 A0 FD | 	call	#pushregs_
14360     28 F0 07 F1 | 	add	ptra, #40
14364     4A 00 00 FF 
14368     80 E4 05 F1 | 	add	objptr, ##38016
1436c     F2 1A 02 FB | 	rdlong	arg05, objptr
14370     0D 19 02 F6 | 	mov	arg04, arg05
14374     01 18 66 F0 | 	shl	arg04, #1
14378     0D 19 02 F1 | 	add	arg04, arg05
1437c     02 18 66 F0 | 	shl	arg04, #2
14380     03 00 00 FF 
14384     04 E4 85 F1 | 	sub	objptr, ##1540
14388     F2 18 02 F1 | 	add	arg04, objptr
1438c     0C 1B 02 FB | 	rdlong	arg05, arg04
14390     A7 1A 62 FC | 	wrlong	arg05, fp
14394                 | ' 
14394                 | ' numpar=compiledline(lineptr_e).result.uresult
14394                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
14394     04 1A 0E F2 | 	cmp	arg05, #4 wz
14398     47 00 00 FF 
1439c     7C E4 85 F1 | 	sub	objptr, ##36476
143a0     48 00 90 5D |  if_ne	jmp	#LR__1680
143a4     F4 6F BF FD | 	call	#_pop
143a8     FF 1A 02 F6 | 	mov	arg05, result3
143ac     1C 4E 05 F1 | 	add	fp, #28
143b0     A7 FA 61 FC | 	wrlong	result1, fp
143b4     04 4E 05 F1 | 	add	fp, #4
143b8     A7 FC 61 FC | 	wrlong	result2, fp
143bc     04 4E 05 F1 | 	add	fp, #4
143c0     A7 1A 62 FC | 	wrlong	arg05, fp
143c4     08 4E 85 F1 | 	sub	fp, #8
143c8     A7 12 02 F6 | 	mov	arg01, fp
143cc     1C 4E 85 F1 | 	sub	fp, #28
143d0     AC 71 BF FD | 	call	#_converttoint
143d4     52 00 00 FF 
143d8     14 E4 05 F1 | 	add	objptr, ##42004
143dc     F2 FA 61 FC | 	wrlong	result1, objptr
143e0     52 00 00 FF 
143e4     14 E4 85 F1 | 	sub	objptr, ##42004
143e8     18 00 90 FD | 	jmp	#LR__1681
143ec                 | LR__1680
143ec     52 00 00 FF 
143f0     14 E4 05 F1 | 	add	objptr, ##42004
143f4     FF FF FF FF 
143f8     F2 FE 6B FC | 	wrlong	##-1, objptr
143fc     52 00 00 FF 
14400     14 E4 85 F1 | 	sub	objptr, ##42004
14404                 | LR__1681
14404                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
14404     A7 1A 02 FB | 	rdlong	arg05, fp
14408     03 1A 56 F2 | 	cmps	arg05, #3 wc
1440c     40 00 90 CD |  if_b	jmp	#LR__1682
14410     88 6F BF FD | 	call	#_pop
14414     FF 1A 02 F6 | 	mov	arg05, result3
14418     1C 4E 05 F1 | 	add	fp, #28
1441c     A7 FA 61 FC | 	wrlong	result1, fp
14420     04 4E 05 F1 | 	add	fp, #4
14424     A7 FC 61 FC | 	wrlong	result2, fp
14428     04 4E 05 F1 | 	add	fp, #4
1442c     A7 1A 62 FC | 	wrlong	arg05, fp
14430     08 4E 85 F1 | 	sub	fp, #8
14434     A7 12 02 F6 | 	mov	arg01, fp
14438     1C 4E 85 F1 | 	sub	fp, #28
1443c     40 71 BF FD | 	call	#_converttoint
14440     08 4E 05 F1 | 	add	fp, #8
14444     A7 FA 61 FC | 	wrlong	result1, fp
14448     08 4E 85 F1 | 	sub	fp, #8
1444c     0C 00 90 FD | 	jmp	#LR__1683
14450                 | LR__1682
14450     08 4E 05 F1 | 	add	fp, #8
14454     A7 02 68 FC | 	wrlong	#1, fp
14458     08 4E 85 F1 | 	sub	fp, #8
1445c                 | LR__1683
1445c                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1445c     A7 18 02 FB | 	rdlong	arg04, fp
14460     02 18 56 F2 | 	cmps	arg04, #2 wc
14464     3C 00 90 CD |  if_b	jmp	#LR__1684
14468     30 6F BF FD | 	call	#_pop
1446c     FF 18 02 F6 | 	mov	arg04, result3
14470     1C 4E 05 F1 | 	add	fp, #28
14474     A7 FA 61 FC | 	wrlong	result1, fp
14478     04 4E 05 F1 | 	add	fp, #4
1447c     A7 FC 61 FC | 	wrlong	result2, fp
14480     04 4E 05 F1 | 	add	fp, #4
14484     A7 18 62 FC | 	wrlong	arg04, fp
14488     08 4E 85 F1 | 	sub	fp, #8
1448c     A7 12 02 F6 | 	mov	arg01, fp
14490     1C 4E 85 F1 | 	sub	fp, #28
14494     E8 70 BF FD | 	call	#_converttoint
14498     0C 4E 05 F1 | 	add	fp, #12
1449c     A7 FA 61 FC | 	wrlong	result1, fp
144a0     0C 4E 85 F1 | 	sub	fp, #12
144a4                 | LR__1684
144a4     F4 6E BF FD | 	call	#_pop
144a8     FF 18 02 F6 | 	mov	arg04, result3
144ac     1C 4E 05 F1 | 	add	fp, #28
144b0     A7 FA 61 FC | 	wrlong	result1, fp
144b4     04 4E 05 F1 | 	add	fp, #4
144b8     A7 FC 61 FC | 	wrlong	result2, fp
144bc     04 4E 05 F1 | 	add	fp, #4
144c0     A7 18 62 FC | 	wrlong	arg04, fp
144c4     08 4E 85 F1 | 	sub	fp, #8
144c8     A7 12 02 F6 | 	mov	arg01, fp
144cc     1C 4E 85 F1 | 	sub	fp, #28
144d0     AC 70 BF FD | 	call	#_converttoint
144d4     04 4E 05 F1 | 	add	fp, #4
144d8     A7 FA 61 FC | 	wrlong	result1, fp
144dc     10 4E 05 F1 | 	add	fp, #16
144e0     A7 1E 02 FB | 	rdlong	local01, fp
144e4     14 4E 85 F1 | 	sub	fp, #20
144e8     02 1E 66 F0 | 	shl	local01, #2
144ec     50 00 00 FF 
144f0     C4 E4 05 F1 | 	add	objptr, ##41156
144f4     F2 1E 02 F1 | 	add	local01, objptr
144f8     0F 01 68 FC | 	wrlong	#0, local01
144fc                 | ' t1=pop() : channel=converttoint(t1)
144fc                 | ' getres(j)=0
144fc                 | ' if pos>=0 then
144fc     01 00 00 FF 
14500     50 E5 05 F1 | 	add	objptr, ##848
14504     F2 20 02 FB | 	rdlong	local02, objptr
14508     52 00 00 FF 
1450c     14 E4 85 F1 | 	sub	objptr, ##42004
14510     00 20 56 F2 | 	cmps	local02, #0 wc
14514     C0 01 90 CD |  if_b	jmp	#LR__1690
14518     10 4E 05 F1 | 	add	fp, #16
1451c     A7 00 68 FC | 	wrlong	#0, fp
14520     10 4E 85 F1 | 	sub	fp, #16
14524                 | '    i=0: do
14524                 | LR__1685
14524     14 4E 05 F1 | 	add	fp, #20
14528     A7 00 68 FC | 	wrlong	#0, fp
1452c     14 4E 85 F1 | 	sub	fp, #20
14530                 | '    j=0: do    
14530                 | LR__1686
14530                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
14530     0C 4E 05 F1 | 	add	fp, #12
14534     A7 20 02 FB | 	rdlong	local02, fp
14538     0C 4E 85 F1 | 	sub	fp, #12
1453c     00 04 00 FF 
14540     00 20 56 F2 | 	cmps	local02, ##524288 wc
14544     4C 00 90 3D |  if_ae	jmp	#LR__1687
14548     14 4E 05 F1 | 	add	fp, #20
1454c     A7 20 02 FB | 	rdlong	local02, fp
14550     10 1F 02 F6 | 	mov	local01, local02
14554     4E 00 00 FF 
14558     B4 E4 05 F1 | 	add	objptr, ##40116
1455c     F2 1E 02 F1 | 	add	local01, objptr
14560     08 4E 85 F1 | 	sub	fp, #8
14564     A7 12 02 FB | 	rdlong	arg01, fp
14568     04 4E 05 F1 | 	add	fp, #4
1456c     A7 18 02 FB | 	rdlong	arg04, fp
14570     0A 18 66 F0 | 	shl	arg04, #10
14574     0C 13 02 F1 | 	add	arg01, arg04
14578     10 4E 85 F1 | 	sub	fp, #16
1457c     10 13 02 F1 | 	add	arg01, local02
14580     09 FB C1 FA | 	rdbyte	result1, arg01
14584     4E 00 00 FF 
14588     B4 E4 85 F1 | 	sub	objptr, ##40116
1458c     0F FB 41 FC | 	wrbyte	result1, local01
14590     48 00 90 FD | 	jmp	#LR__1688
14594                 | LR__1687
14594     14 4E 05 F1 | 	add	fp, #20
14598     A7 20 02 FB | 	rdlong	local02, fp
1459c     10 1F 02 F6 | 	mov	local01, local02
145a0     4E 00 00 FF 
145a4     B4 E4 05 F1 | 	add	objptr, ##40116
145a8     F2 1E 02 F1 | 	add	local01, objptr
145ac     08 4E 85 F1 | 	sub	fp, #8
145b0     A7 12 02 FB | 	rdlong	arg01, fp
145b4     04 4E 05 F1 | 	add	fp, #4
145b8     A7 18 02 FB | 	rdlong	arg04, fp
145bc     0A 18 66 F0 | 	shl	arg04, #10
145c0     0C 13 02 F1 | 	add	arg01, arg04
145c4     10 4E 85 F1 | 	sub	fp, #16
145c8     10 13 02 F1 | 	add	arg01, local02
145cc     4E 00 00 FF 
145d0     B4 E4 85 F1 | 	sub	objptr, ##40116
145d4     20 8F B0 FD | 	call	#_pspeek
145d8     0F FB 41 FC | 	wrbyte	result1, local01
145dc                 | LR__1688
145dc     14 4E 05 F1 | 	add	fp, #20
145e0     A7 20 02 FB | 	rdlong	local02, fp
145e4     01 20 06 F1 | 	add	local02, #1
145e8     A7 20 62 FC | 	wrlong	local02, fp
145ec     14 4E 85 F1 | 	sub	fp, #20
145f0     02 00 00 FF 
145f4     00 20 56 F2 | 	cmps	local02, ##1024 wc
145f8     2C 00 90 3D |  if_ae	jmp	#LR__1689
145fc     10 4E 05 F1 | 	add	fp, #16
14600     A7 1E 02 FB | 	rdlong	local01, fp
14604     0A 1E 66 F0 | 	shl	local01, #10
14608     04 4E 05 F1 | 	add	fp, #4
1460c     A7 20 02 FB | 	rdlong	local02, fp
14610     10 1F 02 F1 | 	add	local01, local02
14614     0C 4E 85 F1 | 	sub	fp, #12
14618     A7 20 02 FB | 	rdlong	local02, fp
1461c     08 4E 85 F1 | 	sub	fp, #8
14620     10 1F 5A F2 | 	cmps	local01, local02 wcz
14624     08 FF 9F ED |  if_be	jmp	#LR__1686
14628                 | LR__1689
14628                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
14628     04 4E 05 F1 | 	add	fp, #4
1462c     A7 12 02 FB | 	rdlong	arg01, fp
14630     52 00 00 FF 
14634     14 E4 05 F1 | 	add	objptr, ##42004
14638     F2 14 02 FB | 	rdlong	arg02, objptr
1463c     01 14 06 F1 | 	add	arg02, #1
14640     03 00 00 FF 
14644     60 E5 85 F1 | 	sub	objptr, ##1888
14648     F2 16 02 F6 | 	mov	arg03, objptr
1464c     4E 00 00 FF 
14650     B4 E4 85 F1 | 	sub	objptr, ##40116
14654     04 4E 05 F1 | 	add	fp, #4
14658     A7 18 02 FB | 	rdlong	arg04, fp
1465c     08 4E 85 F1 | 	sub	fp, #8
14660     01 1A 06 F6 | 	mov	arg05, #1
14664     E8 CF B0 FD | 	call	#__system___basic_put
14668     18 4E 05 F1 | 	add	fp, #24
1466c     A7 FA 61 FC | 	wrlong	result1, fp
14670     14 4E 85 F1 | 	sub	fp, #20
14674     A7 1E 02 FB | 	rdlong	local01, fp
14678     02 1E 66 F0 | 	shl	local01, #2
1467c     50 00 00 FF 
14680     C4 E4 05 F1 | 	add	objptr, ##41156
14684     F2 1E 02 F1 | 	add	local01, objptr
14688     0F FB 61 FC | 	wrlong	result1, local01
1468c                 | '    if 1024*i+j>amount then exit loop
1468c     0C 4E 05 F1 | 	add	fp, #12
14690     A7 20 02 FB | 	rdlong	local02, fp
14694     0A 20 66 F0 | 	shl	local02, #10
14698     04 4E 05 F1 | 	add	fp, #4
1469c     A7 1E 02 FB | 	rdlong	local01, fp
146a0     0F 21 02 F1 | 	add	local02, local01
146a4     0C 4E 85 F1 | 	sub	fp, #12
146a8     A7 1E 02 FB | 	rdlong	local01, fp
146ac     08 4E 85 F1 | 	sub	fp, #8
146b0     0F 21 5A F2 | 	cmps	local02, local01 wcz
146b4     50 00 00 FF 
146b8     C4 E4 85 F1 | 	sub	objptr, ##41156
146bc     CC 01 90 1D |  if_a	jmp	#LR__1697
146c0     10 4E 05 F1 | 	add	fp, #16
146c4     A7 20 02 FB | 	rdlong	local02, fp
146c8     01 20 06 F1 | 	add	local02, #1
146cc     A7 20 62 FC | 	wrlong	local02, fp
146d0     10 4E 85 F1 | 	sub	fp, #16
146d4     4C FE 9F FD | 	jmp	#LR__1685
146d8                 | LR__1690
146d8     10 4E 05 F1 | 	add	fp, #16
146dc     A7 00 68 FC | 	wrlong	#0, fp
146e0     10 4E 85 F1 | 	sub	fp, #16
146e4                 | '    i=0: do
146e4                 | LR__1691
146e4     14 4E 05 F1 | 	add	fp, #20
146e8     A7 00 68 FC | 	wrlong	#0, fp
146ec     14 4E 85 F1 | 	sub	fp, #20
146f0                 | '    j=0: do  
146f0                 | LR__1692
146f0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
146f0     0C 4E 05 F1 | 	add	fp, #12
146f4     A7 20 02 FB | 	rdlong	local02, fp
146f8     0C 4E 85 F1 | 	sub	fp, #12
146fc     00 04 00 FF 
14700     00 20 56 F2 | 	cmps	local02, ##524288 wc
14704     4C 00 90 3D |  if_ae	jmp	#LR__1693
14708     14 4E 05 F1 | 	add	fp, #20
1470c     A7 20 02 FB | 	rdlong	local02, fp
14710     10 1F 02 F6 | 	mov	local01, local02
14714     4E 00 00 FF 
14718     B4 E4 05 F1 | 	add	objptr, ##40116
1471c     F2 1E 02 F1 | 	add	local01, objptr
14720     08 4E 85 F1 | 	sub	fp, #8
14724     A7 12 02 FB | 	rdlong	arg01, fp
14728     04 4E 05 F1 | 	add	fp, #4
1472c     A7 18 02 FB | 	rdlong	arg04, fp
14730     0A 18 66 F0 | 	shl	arg04, #10
14734     0C 13 02 F1 | 	add	arg01, arg04
14738     10 4E 85 F1 | 	sub	fp, #16
1473c     10 13 02 F1 | 	add	arg01, local02
14740     09 FB C1 FA | 	rdbyte	result1, arg01
14744     4E 00 00 FF 
14748     B4 E4 85 F1 | 	sub	objptr, ##40116
1474c     0F FB 41 FC | 	wrbyte	result1, local01
14750     48 00 90 FD | 	jmp	#LR__1694
14754                 | LR__1693
14754     14 4E 05 F1 | 	add	fp, #20
14758     A7 20 02 FB | 	rdlong	local02, fp
1475c     10 1F 02 F6 | 	mov	local01, local02
14760     4E 00 00 FF 
14764     B4 E4 05 F1 | 	add	objptr, ##40116
14768     F2 1E 02 F1 | 	add	local01, objptr
1476c     08 4E 85 F1 | 	sub	fp, #8
14770     A7 12 02 FB | 	rdlong	arg01, fp
14774     04 4E 05 F1 | 	add	fp, #4
14778     A7 18 02 FB | 	rdlong	arg04, fp
1477c     0A 18 66 F0 | 	shl	arg04, #10
14780     0C 13 02 F1 | 	add	arg01, arg04
14784     10 4E 85 F1 | 	sub	fp, #16
14788     10 13 02 F1 | 	add	arg01, local02
1478c     4E 00 00 FF 
14790     B4 E4 85 F1 | 	sub	objptr, ##40116
14794     60 8D B0 FD | 	call	#_pspeek
14798     0F FB 41 FC | 	wrbyte	result1, local01
1479c                 | LR__1694
1479c     14 4E 05 F1 | 	add	fp, #20
147a0     A7 20 02 FB | 	rdlong	local02, fp
147a4     01 20 06 F1 | 	add	local02, #1
147a8     A7 20 62 FC | 	wrlong	local02, fp
147ac     14 4E 85 F1 | 	sub	fp, #20
147b0     02 00 00 FF 
147b4     00 20 56 F2 | 	cmps	local02, ##1024 wc
147b8     2C 00 90 3D |  if_ae	jmp	#LR__1695
147bc     10 4E 05 F1 | 	add	fp, #16
147c0     A7 1E 02 FB | 	rdlong	local01, fp
147c4     0A 1E 66 F0 | 	shl	local01, #10
147c8     04 4E 05 F1 | 	add	fp, #4
147cc     A7 20 02 FB | 	rdlong	local02, fp
147d0     10 1F 02 F1 | 	add	local01, local02
147d4     0C 4E 85 F1 | 	sub	fp, #12
147d8     A7 20 02 FB | 	rdlong	local02, fp
147dc     08 4E 85 F1 | 	sub	fp, #8
147e0     10 1F 5A F2 | 	cmps	local01, local02 wcz
147e4     08 FF 9F ED |  if_be	jmp	#LR__1692
147e8                 | LR__1695
147e8                 | '    put #channel,,block(0),amount, r : getres(channel)=r
147e8     04 4E 05 F1 | 	add	fp, #4
147ec     A7 12 02 FB | 	rdlong	arg01, fp
147f0     4E 00 00 FF 
147f4     B4 E4 05 F1 | 	add	objptr, ##40116
147f8     F2 16 02 F6 | 	mov	arg03, objptr
147fc     4E 00 00 FF 
14800     B4 E4 85 F1 | 	sub	objptr, ##40116
14804     04 4E 05 F1 | 	add	fp, #4
14808     A7 18 02 FB | 	rdlong	arg04, fp
1480c     08 4E 85 F1 | 	sub	fp, #8
14810     00 14 06 F6 | 	mov	arg02, #0
14814     01 1A 06 F6 | 	mov	arg05, #1
14818     34 CE B0 FD | 	call	#__system___basic_put
1481c     18 4E 05 F1 | 	add	fp, #24
14820     A7 FA 61 FC | 	wrlong	result1, fp
14824     14 4E 85 F1 | 	sub	fp, #20
14828     A7 1E 02 FB | 	rdlong	local01, fp
1482c     02 1E 66 F0 | 	shl	local01, #2
14830     50 00 00 FF 
14834     C4 E4 05 F1 | 	add	objptr, ##41156
14838     F2 1E 02 F1 | 	add	local01, objptr
1483c     0F FB 61 FC | 	wrlong	result1, local01
14840                 | '    if 1024*i+j>amount then exit loop
14840     0C 4E 05 F1 | 	add	fp, #12
14844     A7 20 02 FB | 	rdlong	local02, fp
14848     0A 20 66 F0 | 	shl	local02, #10
1484c     04 4E 05 F1 | 	add	fp, #4
14850     A7 1E 02 FB | 	rdlong	local01, fp
14854     0F 21 02 F1 | 	add	local02, local01
14858     0C 4E 85 F1 | 	sub	fp, #12
1485c     A7 22 02 FB | 	rdlong	local03, fp
14860     08 4E 85 F1 | 	sub	fp, #8
14864     11 21 5A F2 | 	cmps	local02, local03 wcz
14868     50 00 00 FF 
1486c     C4 E4 85 F1 | 	sub	objptr, ##41156
14870     18 00 90 1D |  if_a	jmp	#LR__1696
14874     10 4E 05 F1 | 	add	fp, #16
14878     A7 20 02 FB | 	rdlong	local02, fp
1487c     01 20 06 F1 | 	add	local02, #1
14880     A7 20 62 FC | 	wrlong	local02, fp
14884     10 4E 85 F1 | 	sub	fp, #16
14888     58 FE 9F FD | 	jmp	#LR__1691
1488c                 | LR__1696
1488c                 | LR__1697
1488c     A7 F0 03 F6 | 	mov	ptra, fp
14890     B2 00 A0 FD | 	call	#popregs_
14894                 | _do_put_ret
14894     2D 00 64 FD | 	ret
14898                 | 
14898                 | ' 
14898                 | ' '-------------------- rad
14898                 | ' 
14898                 | ' sub do_rad
14898                 | _do_rad
14898     51 00 00 FF 
1489c     BC E5 05 F1 | 	add	objptr, ##41916
148a0     00 C0 9F FF 
148a4     F2 00 68 FC | 	wrlong	##1065353216, objptr
148a8     04 E4 05 F1 | 	add	objptr, #4
148ac     00 C0 9F FF 
148b0     F2 00 68 FC | 	wrlong	##1065353216, objptr
148b4     51 00 00 FF 
148b8     C0 E5 85 F1 | 	sub	objptr, ##41920
148bc                 | _do_rad_ret
148bc     2D 00 64 FD | 	ret
148c0                 | 
148c0                 | ' 
148c0                 | ' '-------------------- rdpin
148c0                 | ' 
148c0                 | ' sub do_rdpin
148c0                 | _do_rdpin
148c0     00 4A 05 F6 | 	mov	COUNT_, #0
148c4     A8 00 A0 FD | 	call	#pushregs_
148c8     0C F0 07 F1 | 	add	ptra, #12
148cc     CC 6A BF FD | 	call	#_pop
148d0     A7 FA 61 FC | 	wrlong	result1, fp
148d4     04 4E 05 F1 | 	add	fp, #4
148d8     A7 FC 61 FC | 	wrlong	result2, fp
148dc     04 4E 05 F1 | 	add	fp, #4
148e0     A7 FE 61 FC | 	wrlong	result3, fp
148e4     08 4E 85 F1 | 	sub	fp, #8
148e8     A7 12 02 F6 | 	mov	arg01, fp
148ec     90 6C BF FD | 	call	#_converttoint
148f0     FD FA 89 FA | 	rdpin	result1, result1
148f4     52 00 00 FF 
148f8     18 E4 05 F1 | 	add	objptr, ##42008
148fc     F2 FA 61 FC | 	wrlong	result1, objptr
14900     52 00 00 FF 
14904     18 E4 85 F1 | 	sub	objptr, ##42008
14908     08 4E 05 F1 | 	add	fp, #8
1490c     A7 3A 68 FC | 	wrlong	#29, fp
14910     08 4E 85 F1 | 	sub	fp, #8
14914     A7 08 68 FC | 	wrlong	#4, fp
14918     A7 12 02 F6 | 	mov	arg01, fp
1491c     14 6B BF FD | 	call	#_push
14920     A7 F0 03 F6 | 	mov	ptra, fp
14924     B2 00 A0 FD | 	call	#popregs_
14928                 | _do_rdpin_ret
14928     2D 00 64 FD | 	ret
1492c                 | 
1492c                 | ' 
1492c                 | ' '------------------- release
1492c                 | ' 
1492c                 | ' sub do_release
1492c                 | _do_release
1492c     00 4A 05 F6 | 	mov	COUNT_, #0
14930     A8 00 A0 FD | 	call	#pushregs_
14934     10 F0 07 F1 | 	add	ptra, #16
14938     60 6A BF FD | 	call	#_pop
1493c     FF 14 02 F6 | 	mov	arg02, result3
14940     A7 FA 61 FC | 	wrlong	result1, fp
14944     04 4E 05 F1 | 	add	fp, #4
14948     A7 FC 61 FC | 	wrlong	result2, fp
1494c     04 4E 05 F1 | 	add	fp, #4
14950     A7 14 62 FC | 	wrlong	arg02, fp
14954     08 4E 85 F1 | 	sub	fp, #8
14958     A7 12 02 F6 | 	mov	arg01, fp
1495c     20 6C BF FD | 	call	#_converttoint
14960     0C 4E 05 F1 | 	add	fp, #12
14964     A7 FA 61 FC | 	wrlong	result1, fp
14968                 | ' 
14968                 | ' t1=pop()
14968                 | ' channel=converttoint(t1)
14968                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
14968     0C 4E 85 F1 | 	sub	fp, #12
1496c     00 FA 55 F2 | 	cmps	result1, #0 wc
14970     44 00 90 CD |  if_b	jmp	#LR__1700
14974     0C 4E 05 F1 | 	add	fp, #12
14978     A7 14 02 FB | 	rdlong	arg02, fp
1497c     0C 4E 85 F1 | 	sub	fp, #12
14980     08 14 56 F2 | 	cmps	arg02, #8 wc
14984     30 00 90 3D |  if_ae	jmp	#LR__1700
14988     37 00 00 FF 
1498c     10 E4 05 F1 | 	add	objptr, ##28176
14990     F2 12 02 FB | 	rdlong	arg01, objptr
14994     37 00 00 FF 
14998     10 E4 85 F1 | 	sub	objptr, ##28176
1499c     0C 4E 05 F1 | 	add	fp, #12
149a0     A7 14 02 FB | 	rdlong	arg02, fp
149a4     0C 4E 85 F1 | 	sub	fp, #12
149a8     06 14 66 F0 | 	shl	arg02, #6
149ac     0A 13 02 F1 | 	add	arg01, arg02
149b0     2C 12 06 F1 | 	add	arg01, #44
149b4     09 FF 69 FC | 	wrlong	#255, arg01
149b8                 | LR__1700
149b8     A7 F0 03 F6 | 	mov	ptra, fp
149bc     B2 00 A0 FD | 	call	#popregs_
149c0                 | _do_release_ret
149c0     2D 00 64 FD | 	ret
149c4                 | 
149c4                 | ' 
149c4                 | ' '------------------- return
149c4                 | ' 
149c4                 | ' sub do_return()
149c4                 | _do_return
149c4                 | ' if gosubtop>0 then
149c4     50 00 00 FF 
149c8     0C E5 05 F1 | 	add	objptr, ##41228
149cc     F2 00 02 FB | 	rdlong	_var01, objptr
149d0     50 00 00 FF 
149d4     0C E5 85 F1 | 	sub	objptr, ##41228
149d8     01 00 56 F2 | 	cmps	_var01, #1 wc
149dc     8C 00 90 CD |  if_b	jmp	#LR__1710
149e0     50 00 00 FF 
149e4     0C E5 05 F1 | 	add	objptr, ##41228
149e8     F2 00 02 FB | 	rdlong	_var01, objptr
149ec     03 00 66 F0 | 	shl	_var01, #3
149f0     03 00 00 FF 
149f4     60 E5 85 F1 | 	sub	objptr, ##1888
149f8     F2 00 02 F1 | 	add	_var01, objptr
149fc     00 01 02 FB | 	rdlong	_var01, _var01
14a00     03 00 00 FF 
14a04     0C E5 05 F1 | 	add	objptr, ##1804
14a08     F2 00 62 FC | 	wrlong	_var01, objptr
14a0c     54 E4 05 F1 | 	add	objptr, #84
14a10     F2 00 02 FB | 	rdlong	_var01, objptr
14a14     03 00 66 F0 | 	shl	_var01, #3
14a18     03 00 00 FF 
14a1c     60 E5 85 F1 | 	sub	objptr, ##1888
14a20     F2 00 02 F1 | 	add	_var01, objptr
14a24     04 00 06 F1 | 	add	_var01, #4
14a28     00 01 02 FB | 	rdlong	_var01, _var01
14a2c     03 00 00 FF 
14a30     10 E5 05 F1 | 	add	objptr, ##1808
14a34     F2 00 62 FC | 	wrlong	_var01, objptr
14a38     06 00 00 FF 
14a3c     40 E4 85 F1 | 	sub	objptr, ##3136
14a40     F2 00 02 FB | 	rdlong	_var01, objptr
14a44     01 00 86 F1 | 	sub	_var01, #1
14a48     04 E4 05 F1 | 	add	objptr, #4
14a4c     F2 00 62 FC | 	wrlong	_var01, objptr
14a50     06 00 00 FF 
14a54     8C E4 05 F1 | 	add	objptr, ##3212
14a58     F2 00 02 FB | 	rdlong	_var01, objptr
14a5c     01 00 86 F1 | 	sub	_var01, #1
14a60     F2 00 62 FC | 	wrlong	_var01, objptr
14a64     50 00 00 FF 
14a68     0C E5 85 F1 | 	sub	objptr, ##41228
14a6c                 | LR__1710
14a6c                 | _do_return_ret
14a6c     2D 00 64 FD | 	ret
14a70                 | 
14a70                 | ' 
14a70                 | ' '------------------- right$
14a70                 | ' 
14a70                 | ' sub do_right
14a70                 | _do_right
14a70     00 4A 05 F6 | 	mov	COUNT_, #0
14a74     A8 00 A0 FD | 	call	#pushregs_
14a78     14 F0 07 F1 | 	add	ptra, #20
14a7c     4A 00 00 FF 
14a80     80 E4 05 F1 | 	add	objptr, ##38016
14a84     F2 16 02 FB | 	rdlong	arg03, objptr
14a88     0B 15 02 F6 | 	mov	arg02, arg03
14a8c     01 14 66 F0 | 	shl	arg02, #1
14a90     0B 15 02 F1 | 	add	arg02, arg03
14a94     02 14 66 F0 | 	shl	arg02, #2
14a98     03 00 00 FF 
14a9c     04 E4 85 F1 | 	sub	objptr, ##1540
14aa0     F2 14 02 F1 | 	add	arg02, objptr
14aa4     0A 17 02 FB | 	rdlong	arg03, arg02
14aa8     0C 4E 05 F1 | 	add	fp, #12
14aac     A7 16 62 FC | 	wrlong	arg03, fp
14ab0                 | ' 
14ab0                 | ' numpar=compiledline(lineptr_e).result.uresult
14ab0                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
14ab0     0C 4E 85 F1 | 	sub	fp, #12
14ab4     02 16 0E F2 | 	cmp	arg03, #2 wz
14ab8     47 00 00 FF 
14abc     7C E4 85 F1 | 	sub	objptr, ##36476
14ac0     3C 00 90 AD |  if_e	jmp	#LR__1720
14ac4     00 12 06 F6 | 	mov	arg01, #0
14ac8     E4 17 B1 FD | 	call	#__system___getiolock_0541
14acc     FD 12 02 F6 | 	mov	arg01, result1
14ad0     78 BD B0 FD | 	call	#__system___lockmem
14ad4     84 01 00 FF 
14ad8     98 15 06 F6 | 	mov	arg02, ##@LR__5483
14adc     00 12 06 F6 | 	mov	arg01, #0
14ae0     00 16 06 F6 | 	mov	arg03, #0
14ae4     58 CA B0 FD | 	call	#__system___basic_print_string
14ae8     00 12 06 F6 | 	mov	arg01, #0
14aec     C0 17 B1 FD | 	call	#__system___getiolock_0541
14af0     FD 00 68 FC | 	wrlong	#0, result1
14af4     27 12 06 F6 | 	mov	arg01, #39
14af8     C0 87 B0 FD | 	call	#_printerror
14afc     E8 00 90 FD | 	jmp	#LR__1723
14b00                 | LR__1720
14b00     98 68 BF FD | 	call	#_pop
14b04     FF 16 02 F6 | 	mov	arg03, result3
14b08     A7 FA 61 FC | 	wrlong	result1, fp
14b0c     04 4E 05 F1 | 	add	fp, #4
14b10     A7 FC 61 FC | 	wrlong	result2, fp
14b14     04 4E 05 F1 | 	add	fp, #4
14b18     A7 16 62 FC | 	wrlong	arg03, fp
14b1c     08 4E 85 F1 | 	sub	fp, #8
14b20     A7 12 02 F6 | 	mov	arg01, fp
14b24     58 6A BF FD | 	call	#_converttoint
14b28     FD 16 02 F6 | 	mov	arg03, result1
14b2c     10 4E 05 F1 | 	add	fp, #16
14b30     A7 16 62 FC | 	wrlong	arg03, fp
14b34     10 4E 85 F1 | 	sub	fp, #16
14b38     60 68 BF FD | 	call	#_pop
14b3c     FF 16 02 F6 | 	mov	arg03, result3
14b40     A7 FA 61 FC | 	wrlong	result1, fp
14b44     04 4E 05 F1 | 	add	fp, #4
14b48     A7 FC 61 FC | 	wrlong	result2, fp
14b4c     04 4E 05 F1 | 	add	fp, #4
14b50     A7 16 62 FC | 	wrlong	arg03, fp
14b54                 | ' t1=pop() : arg=converttoint(t1)
14b54                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14b54     08 4E 85 F1 | 	sub	fp, #8
14b58     2B 16 0E F2 | 	cmp	arg03, #43 wz
14b5c     18 00 90 5D |  if_ne	jmp	#LR__1721
14b60     A7 12 02 FB | 	rdlong	arg01, fp
14b64     AC 69 BF FD | 	call	#_convertstring
14b68     A7 FA 61 FC | 	wrlong	result1, fp
14b6c     08 4E 05 F1 | 	add	fp, #8
14b70     A7 3E 68 FC | 	wrlong	#31, fp
14b74     08 4E 85 F1 | 	sub	fp, #8
14b78                 | LR__1721
14b78                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
14b78     08 4E 05 F1 | 	add	fp, #8
14b7c     A7 16 02 FB | 	rdlong	arg03, fp
14b80     08 4E 85 F1 | 	sub	fp, #8
14b84     1F 16 0E F2 | 	cmp	arg03, #31 wz
14b88     3C 00 90 AD |  if_e	jmp	#LR__1722
14b8c     00 12 06 F6 | 	mov	arg01, #0
14b90     1C 17 B1 FD | 	call	#__system___getiolock_0541
14b94     FD 12 02 F6 | 	mov	arg01, result1
14b98     B0 BC B0 FD | 	call	#__system___lockmem
14b9c     84 01 00 FF 
14ba0     A1 15 06 F6 | 	mov	arg02, ##@LR__5484
14ba4     00 12 06 F6 | 	mov	arg01, #0
14ba8     00 16 06 F6 | 	mov	arg03, #0
14bac     90 C9 B0 FD | 	call	#__system___basic_print_string
14bb0     00 12 06 F6 | 	mov	arg01, #0
14bb4     F8 16 B1 FD | 	call	#__system___getiolock_0541
14bb8     FD 00 68 FC | 	wrlong	#0, result1
14bbc     0F 12 06 F6 | 	mov	arg01, #15
14bc0     F8 86 B0 FD | 	call	#_printerror
14bc4     20 00 90 FD | 	jmp	#LR__1723
14bc8                 | LR__1722
14bc8     A7 12 02 FB | 	rdlong	arg01, fp
14bcc     10 4E 05 F1 | 	add	fp, #16
14bd0     A7 14 02 FB | 	rdlong	arg02, fp
14bd4     10 4E 85 F1 | 	sub	fp, #16
14bd8     74 DD B0 FD | 	call	#__system__Right_S
14bdc     A7 FA 61 FC | 	wrlong	result1, fp
14be0     A7 12 02 F6 | 	mov	arg01, fp
14be4     4C 68 BF FD | 	call	#_push
14be8                 | LR__1723
14be8     A7 F0 03 F6 | 	mov	ptra, fp
14bec     B2 00 A0 FD | 	call	#popregs_
14bf0                 | _do_right_ret
14bf0     2D 00 64 FD | 	ret
14bf4                 | 
14bf4                 | ' 
14bf4                 | ' '------------------- rnd
14bf4                 | ' 
14bf4                 | ' sub do_rnd
14bf4                 | _do_rnd
14bf4     01 4A 05 F6 | 	mov	COUNT_, #1
14bf8     A8 00 A0 FD | 	call	#pushregs_
14bfc     10 F0 07 F1 | 	add	ptra, #16
14c00     4A 00 00 FF 
14c04     80 E4 05 F1 | 	add	objptr, ##38016
14c08     F2 1E 02 FB | 	rdlong	local01, objptr
14c0c     0F 17 02 F6 | 	mov	arg03, local01
14c10     01 16 66 F0 | 	shl	arg03, #1
14c14     0F 17 02 F1 | 	add	arg03, local01
14c18     02 16 66 F0 | 	shl	arg03, #2
14c1c     03 00 00 FF 
14c20     04 E4 85 F1 | 	sub	objptr, ##1540
14c24     F2 16 02 F1 | 	add	arg03, objptr
14c28     0B 17 02 FB | 	rdlong	arg03, arg03
14c2c     0C 4E 05 F1 | 	add	fp, #12
14c30     A7 16 62 FC | 	wrlong	arg03, fp
14c34                 | ' 
14c34                 | ' numpar=compiledline(lineptr_e).result.uresult
14c34                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
14c34     0C 4E 85 F1 | 	sub	fp, #12
14c38     02 16 16 F2 | 	cmp	arg03, #2 wc
14c3c     47 00 00 FF 
14c40     7C E4 85 F1 | 	sub	objptr, ##36476
14c44     3C 00 90 CD |  if_b	jmp	#LR__1730
14c48     00 12 06 F6 | 	mov	arg01, #0
14c4c     60 16 B1 FD | 	call	#__system___getiolock_0541
14c50     FD 12 02 F6 | 	mov	arg01, result1
14c54     F4 BB B0 FD | 	call	#__system___lockmem
14c58     84 01 00 FF 
14c5c     AA 15 06 F6 | 	mov	arg02, ##@LR__5485
14c60     00 12 06 F6 | 	mov	arg01, #0
14c64     00 16 06 F6 | 	mov	arg03, #0
14c68     D4 C8 B0 FD | 	call	#__system___basic_print_string
14c6c     00 12 06 F6 | 	mov	arg01, #0
14c70     3C 16 B1 FD | 	call	#__system___getiolock_0541
14c74     FD 00 68 FC | 	wrlong	#0, result1
14c78     27 12 06 F6 | 	mov	arg01, #39
14c7c     3C 86 B0 FD | 	call	#_printerror
14c80     2C 01 90 FD | 	jmp	#LR__1737
14c84                 | LR__1730
14c84                 | ' if numpar=0 then
14c84     0C 4E 05 F1 | 	add	fp, #12
14c88     A7 FE 09 FB | 	rdlong	result3, fp wz
14c8c     0C 4E 85 F1 | 	sub	fp, #12
14c90     20 00 90 5D |  if_ne	jmp	#LR__1731
14c94     08 4E 05 F1 | 	add	fp, #8
14c98     A7 3A 68 FC | 	wrlong	#29, fp
14c9c     08 4E 85 F1 | 	sub	fp, #8
14ca0     1B FA 61 FD | 	getrnd	result1
14ca4     A7 FA 61 FC | 	wrlong	result1, fp
14ca8     A7 12 02 F6 | 	mov	arg01, fp
14cac     84 67 BF FD | 	call	#_push
14cb0     FC 00 90 FD | 	jmp	#LR__1736
14cb4                 | LR__1731
14cb4     E4 66 BF FD | 	call	#_pop
14cb8     A7 FA 61 FC | 	wrlong	result1, fp
14cbc     04 4E 05 F1 | 	add	fp, #4
14cc0     A7 FC 61 FC | 	wrlong	result2, fp
14cc4     04 4E 05 F1 | 	add	fp, #4
14cc8     A7 FE 61 FC | 	wrlong	result3, fp
14ccc                 | '   t1=pop()
14ccc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
14ccc     08 4E 85 F1 | 	sub	fp, #8
14cd0     1C FE 0D F2 | 	cmp	result3, #28 wz
14cd4     08 4E 05 51 |  if_ne	add	fp, #8
14cd8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14cdc     08 4E 85 51 |  if_ne	sub	fp, #8
14ce0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14ce4     2C 00 90 5D |  if_ne	jmp	#LR__1732
14ce8     1B FA 61 FD | 	getrnd	result1
14cec     A7 1E 02 FB | 	rdlong	local01, fp
14cf0     0F FB 11 FD | 	qdiv	result1, local01
14cf4     A7 12 02 F6 | 	mov	arg01, fp
14cf8     19 1E 62 FD | 	getqy	local01
14cfc     A7 1E 62 FC | 	wrlong	local01, fp
14d00     08 4E 05 F1 | 	add	fp, #8
14d04     A7 3A 68 FC | 	wrlong	#29, fp
14d08     08 4E 85 F1 | 	sub	fp, #8
14d0c     24 67 BF FD | 	call	#_push
14d10     9C 00 90 FD | 	jmp	#LR__1735
14d14                 | LR__1732
14d14     08 4E 05 F1 | 	add	fp, #8
14d18     A7 1E 02 FB | 	rdlong	local01, fp
14d1c     08 4E 85 F1 | 	sub	fp, #8
14d20     1E 1E 0E F2 | 	cmp	local01, #30 wz
14d24     48 00 90 5D |  if_ne	jmp	#LR__1733
14d28     A7 12 02 FB | 	rdlong	arg01, fp
14d2c     00 C0 24 FF 
14d30     00 14 06 F6 | 	mov	arg02, ##1233125376
14d34     CC E8 B0 FD | 	call	#__system___float_div
14d38     FD 1E 02 F6 | 	mov	local01, result1
14d3c     1B 12 62 FD | 	getrnd	arg01
14d40     74 13 06 F4 | 	bitl	arg01, #372
14d44     B4 E2 B0 FD | 	call	#__system___float_fromuns
14d48     FD 14 02 F6 | 	mov	arg02, result1
14d4c     0F 13 02 F6 | 	mov	arg01, local01
14d50     AC E6 B0 FD | 	call	#__system___float_mul
14d54     A7 FA 61 FC | 	wrlong	result1, fp
14d58     08 4E 05 F1 | 	add	fp, #8
14d5c     A7 3C 68 FC | 	wrlong	#30, fp
14d60     08 4E 85 F1 | 	sub	fp, #8
14d64     A7 12 02 F6 | 	mov	arg01, fp
14d68     C8 66 BF FD | 	call	#_push
14d6c     40 00 90 FD | 	jmp	#LR__1734
14d70                 | LR__1733
14d70                 | '     print "rnd: "; : printerror(40) 
14d70     00 12 06 F6 | 	mov	arg01, #0
14d74     38 15 B1 FD | 	call	#__system___getiolock_0541
14d78     FD 12 02 F6 | 	mov	arg01, result1
14d7c     CC BA B0 FD | 	call	#__system___lockmem
14d80     84 01 00 FF 
14d84     B0 15 06 F6 | 	mov	arg02, ##@LR__5486
14d88     00 12 06 F6 | 	mov	arg01, #0
14d8c     00 16 06 F6 | 	mov	arg03, #0
14d90     AC C7 B0 FD | 	call	#__system___basic_print_string
14d94     00 12 06 F6 | 	mov	arg01, #0
14d98     14 15 B1 FD | 	call	#__system___getiolock_0541
14d9c     FD 00 68 FC | 	wrlong	#0, result1
14da0     28 12 06 F6 | 	mov	arg01, #40
14da4     14 85 B0 FD | 	call	#_printerror
14da8     A7 12 02 F6 | 	mov	arg01, fp
14dac     84 66 BF FD | 	call	#_push
14db0                 | LR__1734
14db0                 | LR__1735
14db0                 | LR__1736
14db0                 | LR__1737
14db0     A7 F0 03 F6 | 	mov	ptra, fp
14db4     B2 00 A0 FD | 	call	#popregs_
14db8                 | _do_rnd_ret
14db8     2D 00 64 FD | 	ret
14dbc                 | 
14dbc                 | ' 
14dbc                 | ' '-------------------- round
14dbc                 | ' 
14dbc                 | ' sub do_round
14dbc                 | _do_round
14dbc     00 4A 05 F6 | 	mov	COUNT_, #0
14dc0     A8 00 A0 FD | 	call	#pushregs_
14dc4     0C F0 07 F1 | 	add	ptra, #12
14dc8     D0 65 BF FD | 	call	#_pop
14dcc     A7 FA 61 FC | 	wrlong	result1, fp
14dd0     04 4E 05 F1 | 	add	fp, #4
14dd4     A7 FC 61 FC | 	wrlong	result2, fp
14dd8     04 4E 05 F1 | 	add	fp, #4
14ddc     A7 FE 61 FC | 	wrlong	result3, fp
14de0     08 4E 85 F1 | 	sub	fp, #8
14de4     A7 12 02 F6 | 	mov	arg01, fp
14de8     94 67 BF FD | 	call	#_converttoint
14dec     A7 FA 61 FC | 	wrlong	result1, fp
14df0     08 4E 05 F1 | 	add	fp, #8
14df4     A7 38 68 FC | 	wrlong	#28, fp
14df8     08 4E 85 F1 | 	sub	fp, #8
14dfc     A7 12 02 F6 | 	mov	arg01, fp
14e00     30 66 BF FD | 	call	#_push
14e04     A7 F0 03 F6 | 	mov	ptra, fp
14e08     B2 00 A0 FD | 	call	#popregs_
14e0c                 | _do_round_ret
14e0c     2D 00 64 FD | 	ret
14e10                 | 
14e10                 | ' 
14e10                 | ' '-------------------- rqpin
14e10                 | ' 
14e10                 | ' sub do_rqpin
14e10                 | _do_rqpin
14e10     00 4A 05 F6 | 	mov	COUNT_, #0
14e14     A8 00 A0 FD | 	call	#pushregs_
14e18     0C F0 07 F1 | 	add	ptra, #12
14e1c     7C 65 BF FD | 	call	#_pop
14e20     A7 FA 61 FC | 	wrlong	result1, fp
14e24     04 4E 05 F1 | 	add	fp, #4
14e28     A7 FC 61 FC | 	wrlong	result2, fp
14e2c     04 4E 05 F1 | 	add	fp, #4
14e30     A7 FE 61 FC | 	wrlong	result3, fp
14e34     08 4E 85 F1 | 	sub	fp, #8
14e38     A7 12 02 F6 | 	mov	arg01, fp
14e3c     40 67 BF FD | 	call	#_converttoint
14e40     FD 12 02 F6 | 	mov	arg01, result1
14e44     00 FA 05 F6 | 	mov	result1, #0
14e48     09 FB 81 FA | 	rqpin	result1, arg01
14e4c     52 00 00 FF 
14e50     18 E4 05 F1 | 	add	objptr, ##42008
14e54     F2 FA 61 FC | 	wrlong	result1, objptr
14e58     52 00 00 FF 
14e5c     18 E4 85 F1 | 	sub	objptr, ##42008
14e60     08 4E 05 F1 | 	add	fp, #8
14e64     A7 3A 68 FC | 	wrlong	#29, fp
14e68     08 4E 85 F1 | 	sub	fp, #8
14e6c     A7 08 68 FC | 	wrlong	#4, fp
14e70     A7 12 02 F6 | 	mov	arg01, fp
14e74     BC 65 BF FD | 	call	#_push
14e78     A7 F0 03 F6 | 	mov	ptra, fp
14e7c     B2 00 A0 FD | 	call	#popregs_
14e80                 | _do_rqpin_ret
14e80     2D 00 64 FD | 	ret
14e84                 | 
14e84                 | ' 
14e84                 | ' ' ------------------ run
14e84                 | ' 
14e84                 | ' sub do_run
14e84                 | _do_run
14e84     04 4A 05 F6 | 	mov	COUNT_, #4
14e88     A8 00 A0 FD | 	call	#pushregs_
14e8c     4A 00 00 FF 
14e90     80 E4 05 F1 | 	add	objptr, ##38016
14e94     F2 1E 02 FB | 	rdlong	local01, objptr
14e98     06 00 00 FF 
14e9c     38 E4 05 F1 | 	add	objptr, ##3128
14ea0     F2 20 02 FB | 	rdlong	local02, objptr
14ea4     04 E4 05 F1 | 	add	objptr, #4
14ea8     F2 22 02 FB | 	rdlong	local03, objptr
14eac     0F 19 02 F6 | 	mov	arg04, local01
14eb0     0C 17 02 F6 | 	mov	arg03, arg04
14eb4     01 16 66 F0 | 	shl	arg03, #1
14eb8     0C 17 02 F1 | 	add	arg03, arg04
14ebc     02 16 66 F0 | 	shl	arg03, #2
14ec0     09 00 00 FF 
14ec4     40 E4 85 F1 | 	sub	objptr, ##4672
14ec8     F2 16 02 F1 | 	add	arg03, objptr
14ecc     0B 15 02 FB | 	rdlong	arg02, arg03
14ed0                 | ' 
14ed0                 | ' r_lineptr_e=lineptr_e
14ed0                 | ' r_runptr=runptr
14ed0                 | ' r_runptr2=runptr2
14ed0                 | ' 
14ed0                 | ' numpar=compiledline(lineptr_e).result.uresult
14ed0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
14ed0     01 14 0E F2 | 	cmp	arg02, #1 wz
14ed4     47 00 00 FF 
14ed8     7C E4 85 F1 | 	sub	objptr, ##36476
14edc     00 12 06 A6 |  if_e	mov	arg01, #0
14ee0     5C C7 BF AD |  if_e	call	#_do_load
14ee4     4A 00 00 FF 
14ee8     88 E4 05 F1 | 	add	objptr, ##38024
14eec     F2 18 02 FB | 	rdlong	arg04, objptr
14ef0     06 00 00 FF 
14ef4     30 E4 05 F1 | 	add	objptr, ##3120
14ef8     F2 18 62 FC | 	wrlong	arg04, objptr
14efc     04 E4 05 F1 | 	add	objptr, #4
14f00     F2 00 68 FC | 	wrlong	#0, objptr
14f04     04 E4 05 F1 | 	add	objptr, #4
14f08     FF FF FF FF 
14f0c     F2 FE 6B FC | 	wrlong	##-1, objptr
14f10                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
14f10                 | ' if inrun>0 then 
14f10     2C E4 05 F1 | 	add	objptr, #44
14f14     F2 18 02 FB | 	rdlong	arg04, objptr
14f18     50 00 00 FF 
14f1c     EC E4 85 F1 | 	sub	objptr, ##41196
14f20     01 18 16 F2 | 	cmp	arg04, #1 wc
14f24     30 00 90 CD |  if_b	jmp	#LR__1740
14f28     50 00 00 FF 
14f2c     F0 E4 05 F1 | 	add	objptr, ##41200
14f30     F2 12 02 F6 | 	mov	arg01, objptr
14f34     38 E4 85 F1 | 	sub	objptr, #56
14f38     F2 14 02 FB | 	rdlong	arg02, objptr
14f3c     18 16 06 F6 | 	mov	arg03, #24
14f40     44 00 00 FF 
14f44     EC E5 85 F1 | 	sub	objptr, ##35308
14f48     C0 AC B0 FD | 	call	#_psram_spin2_read1
14f4c     0B 00 00 FF 
14f50     CC E4 85 F1 | 	sub	objptr, ##5836
14f54                 | '   psram.read1(varptr(runheader),runptr,24)  
14f54                 | '   return
14f54     D4 02 90 FD | 	jmp	#LR__1746
14f58                 | LR__1740
14f58     50 00 00 FF 
14f5c     EC E4 05 F1 | 	add	objptr, ##41196
14f60     F2 02 68 FC | 	wrlong	#1, objptr
14f64     04 E4 05 F1 | 	add	objptr, #4
14f68     F2 12 02 F6 | 	mov	arg01, objptr
14f6c     38 E4 85 F1 | 	sub	objptr, #56
14f70     F2 14 02 FB | 	rdlong	arg02, objptr
14f74     18 16 06 F6 | 	mov	arg03, #24
14f78     44 00 00 FF 
14f7c     EC E5 85 F1 | 	sub	objptr, ##35308
14f80     88 AC B0 FD | 	call	#_psram_spin2_read1
14f84                 | ' inrun=1
14f84                 | ' psram.read1(varptr(runheader),runptr,24) 
14f84                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
14f84     45 00 00 FF 
14f88     24 E4 05 F1 | 	add	objptr, ##35364
14f8c     F2 24 02 FB | 	rdlong	local04, objptr
14f90     50 00 00 FF 
14f94     F0 E4 85 F1 | 	sub	objptr, ##41200
14f98     FF FF 7F FF 
14f9c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
14fa0     50 00 00 AF 
14fa4     EC E4 05 A1 |  if_e	add	objptr, ##41196
14fa8     F2 00 68 AC |  if_e	wrlong	#0, objptr
14fac     50 00 00 AF 
14fb0     EC E4 85 A1 |  if_e	sub	objptr, ##41196
14fb4     74 02 90 AD |  if_e	jmp	#LR__1746
14fb8                 | ' do 
14fb8                 | LR__1741
14fb8                 | '   if runptr<>oldrunptr then
14fb8     50 00 00 FF 
14fbc     B8 E4 05 F1 | 	add	objptr, ##41144
14fc0     F2 24 02 FB | 	rdlong	local04, objptr
14fc4     08 E4 05 F1 | 	add	objptr, #8
14fc8     F2 18 02 FB | 	rdlong	arg04, objptr
14fcc     50 00 00 FF 
14fd0     C0 E4 85 F1 | 	sub	objptr, ##41152
14fd4     0C 25 0A F2 | 	cmp	local04, arg04 wz
14fd8     CC 00 90 AD |  if_e	jmp	#LR__1742
14fdc     50 00 00 FF 
14fe0     F0 E4 05 F1 | 	add	objptr, ##41200
14fe4     F2 12 02 F6 | 	mov	arg01, objptr
14fe8     38 E4 85 F1 | 	sub	objptr, #56
14fec     F2 14 02 FB | 	rdlong	arg02, objptr
14ff0     18 16 06 F6 | 	mov	arg03, #24
14ff4     44 00 00 FF 
14ff8     EC E5 85 F1 | 	sub	objptr, ##35308
14ffc     0C AC B0 FD | 	call	#_psram_spin2_read1
15000     3B 00 00 FF 
15004     B0 E5 05 F1 | 	add	objptr, ##30640
15008     F2 12 02 F6 | 	mov	arg01, objptr
1500c     09 00 00 FF 
15010     3C E4 05 F1 | 	add	objptr, ##4668
15014     F2 14 02 FB | 	rdlong	arg02, objptr
15018     0B 00 00 FF 
1501c     54 E4 85 F1 | 	sub	objptr, ##5716
15020     F2 24 02 FB | 	rdlong	local04, objptr
15024     01 24 66 F0 | 	shl	local04, #1
15028     12 15 02 F1 | 	add	arg02, local04
1502c     0B 00 00 FF 
15030     94 E4 05 F1 | 	add	objptr, ##5780
15034     F2 16 02 FB | 	rdlong	arg03, objptr
15038     40 E4 85 F1 | 	sub	objptr, #64
1503c     F2 24 02 FB | 	rdlong	local04, objptr
15040     12 17 82 F1 | 	sub	arg03, local04
15044     44 00 00 FF 
15048     EC E5 85 F1 | 	sub	objptr, ##35308
1504c     BC AB B0 FD | 	call	#_psram_spin2_read1
15050     45 00 00 FF 
15054     2C E4 05 F1 | 	add	objptr, ##35372
15058     F2 24 02 FB | 	rdlong	local04, objptr
1505c     40 E4 85 F1 | 	sub	objptr, #64
15060     F2 14 02 FB | 	rdlong	arg02, objptr
15064     0A 25 82 F1 | 	sub	local04, arg02
15068     0B 00 00 FF 
1506c     54 E4 85 F1 | 	sub	objptr, ##5716
15070     F2 14 02 FB | 	rdlong	arg02, objptr
15074     0A 25 12 FD | 	qdiv	local04, arg02
15078     05 00 00 FF 
1507c     18 E4 05 F1 | 	add	objptr, ##2584
15080     18 24 62 FD | 	getqx	local04
15084     03 24 86 F1 | 	sub	local04, #3
15088     F2 24 62 FC | 	wrlong	local04, objptr
1508c     06 00 00 FF 
15090     3C E4 05 F1 | 	add	objptr, ##3132
15094     F2 24 02 FB | 	rdlong	local04, objptr
15098     08 E4 05 F1 | 	add	objptr, #8
1509c     F2 24 62 FC | 	wrlong	local04, objptr
150a0     50 00 00 FF 
150a4     C0 E4 85 F1 | 	sub	objptr, ##41152
150a8                 | LR__1742
150a8     50 00 00 FF 
150ac     04 E5 05 F1 | 	add	objptr, ##41220
150b0     F2 24 02 FB | 	rdlong	local04, objptr
150b4     4C E4 85 F1 | 	sub	objptr, #76
150b8     F2 24 62 FC | 	wrlong	local04, objptr
150bc     04 E4 05 F1 | 	add	objptr, #4
150c0     F2 12 02 FB | 	rdlong	arg01, objptr
150c4     50 00 00 FF 
150c8     BC E4 85 F1 | 	sub	objptr, ##41148
150cc     C8 61 BF FD | 	call	#_execute_line
150d0     50 00 00 FF 
150d4     BC E4 05 F1 | 	add	objptr, ##41148
150d8     F2 FA 61 FC | 	wrlong	result1, objptr
150dc     04 E4 85 F1 | 	sub	objptr, #4
150e0     F2 24 02 FB | 	rdlong	local04, objptr
150e4     50 00 00 FF 
150e8     B8 E4 85 F1 | 	sub	objptr, ##41144
150ec     FF FF 3F FF 
150f0     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
150f4     30 00 90 AD |  if_e	jmp	#LR__1744
150f8     E0 12 06 F6 | 	mov	arg01, #224
150fc     9C AE B0 FD | 	call	#_usbnew_spin2_keystate
15100     00 FA 0D F2 | 	cmp	result1, #0 wz
15104     10 00 90 5D |  if_ne	jmp	#LR__1743
15108     E4 12 06 F6 | 	mov	arg01, #228
1510c     8C AE B0 FD | 	call	#_usbnew_spin2_keystate
15110     00 FA 0D F2 | 	cmp	result1, #0 wz
15114     A0 FE 9F AD |  if_e	jmp	#LR__1741
15118                 | LR__1743
15118     06 12 06 F6 | 	mov	arg01, #6
1511c     7C AE B0 FD | 	call	#_usbnew_spin2_keystate
15120     00 FA 0D F2 | 	cmp	result1, #0 wz
15124     90 FE 9F AD |  if_e	jmp	#LR__1741
15128                 | LR__1744
15128                 | '   ''do whatever kbm.peek_latest_key()=$106 
15128                 | ' if runptr<>$7FFF_FFFF then 
15128     50 00 00 FF 
1512c     B8 E4 05 F1 | 	add	objptr, ##41144
15130     F2 24 02 FB | 	rdlong	local04, objptr
15134     50 00 00 FF 
15138     B8 E4 85 F1 | 	sub	objptr, ##41144
1513c     FF FF 3F FF 
15140     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
15144     90 00 90 AD |  if_e	jmp	#LR__1745
15148                 | '   print: print "Stopped at line ";runheader(0) 
15148     00 12 06 F6 | 	mov	arg01, #0
1514c     60 11 B1 FD | 	call	#__system___getiolock_0541
15150     FD 12 02 F6 | 	mov	arg01, result1
15154     F4 B6 B0 FD | 	call	#__system___lockmem
15158     00 12 06 F6 | 	mov	arg01, #0
1515c     0A 14 06 F6 | 	mov	arg02, #10
15160     00 16 06 F6 | 	mov	arg03, #0
15164     80 C3 B0 FD | 	call	#__system___basic_print_char
15168     00 12 06 F6 | 	mov	arg01, #0
1516c     40 11 B1 FD | 	call	#__system___getiolock_0541
15170     FD 00 68 FC | 	wrlong	#0, result1
15174     00 12 06 F6 | 	mov	arg01, #0
15178     34 11 B1 FD | 	call	#__system___getiolock_0541
1517c     FD 12 02 F6 | 	mov	arg01, result1
15180     C8 B6 B0 FD | 	call	#__system___lockmem
15184     84 01 00 FF 
15188     B6 15 06 F6 | 	mov	arg02, ##@LR__5487
1518c     00 12 06 F6 | 	mov	arg01, #0
15190     00 16 06 F6 | 	mov	arg03, #0
15194     A8 C3 B0 FD | 	call	#__system___basic_print_string
15198     50 00 00 FF 
1519c     F0 E4 05 F1 | 	add	objptr, ##41200
151a0     F2 14 02 FB | 	rdlong	arg02, objptr
151a4     50 00 00 FF 
151a8     F0 E4 85 F1 | 	sub	objptr, ##41200
151ac     00 12 06 F6 | 	mov	arg01, #0
151b0     00 16 06 F6 | 	mov	arg03, #0
151b4     0A 18 06 F6 | 	mov	arg04, #10
151b8     08 C4 B0 FD | 	call	#__system___basic_print_unsigned
151bc     00 12 06 F6 | 	mov	arg01, #0
151c0     0A 14 06 F6 | 	mov	arg02, #10
151c4     00 16 06 F6 | 	mov	arg03, #0
151c8     1C C3 B0 FD | 	call	#__system___basic_print_char
151cc     00 12 06 F6 | 	mov	arg01, #0
151d0     DC 10 B1 FD | 	call	#__system___getiolock_0541
151d4     FD 00 68 FC | 	wrlong	#0, result1
151d8                 | LR__1745
151d8     50 00 00 FF 
151dc     EC E4 05 F1 | 	add	objptr, ##41196
151e0     F2 00 68 FC | 	wrlong	#0, objptr
151e4     06 00 00 FF 
151e8     6C E4 85 F1 | 	sub	objptr, ##3180
151ec     F2 1E 62 FC | 	wrlong	local01, objptr
151f0     06 00 00 FF 
151f4     38 E4 05 F1 | 	add	objptr, ##3128
151f8     F2 20 62 FC | 	wrlong	local02, objptr
151fc     04 E4 05 F1 | 	add	objptr, #4
15200     F2 22 62 FC | 	wrlong	local03, objptr
15204     50 00 00 FF 
15208     BC E4 85 F1 | 	sub	objptr, ##41148
1520c     11 12 06 F6 | 	mov	arg01, #17
15210     08 14 06 F6 | 	mov	arg02, #8
15214     10 16 06 F6 | 	mov	arg03, #16
15218     34 90 B0 FD | 	call	#_hg010b_spin2_setspritesize
1521c     10 12 06 F6 | 	mov	arg01, #16
15220     20 14 06 F6 | 	mov	arg02, #32
15224     20 16 06 F6 | 	mov	arg03, #32
15228     24 90 B0 FD | 	call	#_hg010b_spin2_setspritesize
1522c                 | LR__1746
1522c     A7 F0 03 F6 | 	mov	ptra, fp
15230     B2 00 A0 FD | 	call	#popregs_
15234                 | _do_run_ret
15234     2D 00 64 FD | 	ret
15238                 | 
15238                 | ' 
15238                 | ' ' ------------------ save
15238                 | ' 
15238                 | ' sub do_save                        
15238                 | _do_save
15238     04 4A 05 F6 | 	mov	COUNT_, #4
1523c     A8 00 A0 FD | 	call	#pushregs_
15240     B8 F0 07 F1 | 	add	ptra, #184
15244     4A 00 00 FF 
15248     80 E4 05 F1 | 	add	objptr, ##38016
1524c     F2 1E 02 FB | 	rdlong	local01, objptr
15250     0F 21 02 F6 | 	mov	local02, local01
15254     01 20 66 F0 | 	shl	local02, #1
15258     0F 21 02 F1 | 	add	local02, local01
1525c     02 20 66 F0 | 	shl	local02, #2
15260     03 00 00 FF 
15264     04 E4 85 F1 | 	sub	objptr, ##1540
15268     F2 20 02 F1 | 	add	local02, objptr
1526c     10 23 02 FB | 	rdlong	local03, local02
15270     10 4E 05 F1 | 	add	fp, #16
15274     A7 22 62 FC | 	wrlong	local03, fp
15278                 | ' 
15278                 | ' numpar=compiledline(lineptr_e).result.uresult
15278                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
15278     10 4E 85 F1 | 	sub	fp, #16
1527c     01 22 56 F2 | 	cmps	local03, #1 wc
15280     47 00 00 FF 
15284     7C E4 85 F1 | 	sub	objptr, ##36476
15288     20 00 90 CD |  if_b	jmp	#LR__1750
1528c     0C 61 BF FD | 	call	#_pop
15290     A7 FA 61 FC | 	wrlong	result1, fp
15294     04 4E 05 F1 | 	add	fp, #4
15298     A7 FC 61 FC | 	wrlong	result2, fp
1529c     04 4E 05 F1 | 	add	fp, #4
152a0     A7 FE 61 FC | 	wrlong	result3, fp
152a4     08 4E 85 F1 | 	sub	fp, #8
152a8     24 00 90 FD | 	jmp	#LR__1751
152ac                 | LR__1750
152ac     51 00 00 FF 
152b0     D8 E5 05 F1 | 	add	objptr, ##41944
152b4     F2 22 02 FB | 	rdlong	local03, objptr
152b8     51 00 00 FF 
152bc     D8 E5 85 F1 | 	sub	objptr, ##41944
152c0     A7 22 62 FC | 	wrlong	local03, fp
152c4     08 4E 05 F1 | 	add	fp, #8
152c8     A7 3E 68 FC | 	wrlong	#31, fp
152cc     08 4E 85 F1 | 	sub	fp, #8
152d0                 | LR__1751
152d0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
152d0     4A 00 00 FF 
152d4     88 E4 05 F1 | 	add	objptr, ##38024
152d8     F2 12 02 FB | 	rdlong	arg01, objptr
152dc     4A 00 00 FF 
152e0     88 E4 85 F1 | 	sub	objptr, ##38024
152e4     68 82 B0 FD | 	call	#_pslpeek
152e8     FF FF 7F FF 
152ec     FF FB 0D F2 | 	cmp	result1, ##-1 wz
152f0     0C 00 90 5D |  if_ne	jmp	#LR__1752
152f4     1B 12 06 F6 | 	mov	arg01, #27
152f8     C0 7F B0 FD | 	call	#_printerror
152fc     CC 02 90 FD | 	jmp	#LR__1758
15300                 | LR__1752
15300                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
15300     08 4E 05 F1 | 	add	fp, #8
15304     A7 22 02 FB | 	rdlong	local03, fp
15308     08 4E 85 F1 | 	sub	fp, #8
1530c     2B 22 0E F2 | 	cmp	local03, #43 wz
15310     18 00 90 5D |  if_ne	jmp	#LR__1753
15314     A7 12 02 FB | 	rdlong	arg01, fp
15318     F8 61 BF FD | 	call	#_convertstring
1531c     A7 FA 61 FC | 	wrlong	result1, fp
15320     08 4E 05 F1 | 	add	fp, #8
15324     A7 3E 68 FC | 	wrlong	#31, fp
15328     08 4E 85 F1 | 	sub	fp, #8
1532c                 | LR__1753
1532c                 | ' if t1.result_type=result_string then
1532c     08 4E 05 F1 | 	add	fp, #8
15330     A7 22 02 FB | 	rdlong	local03, fp
15334     08 4E 85 F1 | 	sub	fp, #8
15338     1F 22 0E F2 | 	cmp	local03, #31 wz
1533c     8C 02 90 5D |  if_ne	jmp	#LR__1757
15340                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15340     A7 12 02 FB | 	rdlong	arg01, fp
15344     84 01 00 FF 
15348     C7 15 06 F6 | 	mov	arg02, ##@LR__5488
1534c     24 B5 B0 FD | 	call	#__system___string_cmp
15350     00 FA 0D F2 | 	cmp	result1, #0 wz
15354     51 00 00 AF 
15358     D8 E5 05 A1 |  if_e	add	objptr, ##41944
1535c     F2 22 02 AB |  if_e	rdlong	local03, objptr
15360     A7 22 62 AC |  if_e	wrlong	local03, fp
15364     51 00 00 AF 
15368     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
1536c     A7 22 02 5B |  if_ne	rdlong	local03, fp
15370     51 00 00 5F 
15374     D8 E5 05 51 |  if_ne	add	objptr, ##41944
15378     F2 22 62 5C |  if_ne	wrlong	local03, objptr
1537c     51 00 00 5F 
15380     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
15384                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
15384     09 12 06 F6 | 	mov	arg01, #9
15388     54 05 B1 FD | 	call	#__system__close
1538c     09 22 06 F6 | 	mov	local03, #9
15390     4A 00 00 FF 
15394     94 E4 05 F1 | 	add	objptr, ##38036
15398     F2 12 02 FB | 	rdlong	arg01, objptr
1539c     4A 00 00 FF 
153a0     94 E4 85 F1 | 	sub	objptr, ##38036
153a4     84 01 00 FF 
153a8     C8 15 06 F6 | 	mov	arg02, ##@LR__5489
153ac     F8 B4 B0 FD | 	call	#__system___string_concat
153b0     FD 12 02 F6 | 	mov	arg01, result1
153b4     A7 14 02 FB | 	rdlong	arg02, fp
153b8     EC B4 B0 FD | 	call	#__system___string_concat
153bc     FD 14 02 F6 | 	mov	arg02, result1
153c0     11 13 02 F6 | 	mov	arg01, local03
153c4     0D 16 06 F6 | 	mov	arg03, #13
153c8     84 C0 B0 FD | 	call	#__system___basic_open_string
153cc     4A 00 00 FF 
153d0     88 E4 05 F1 | 	add	objptr, ##38024
153d4     F2 22 02 FB | 	rdlong	local03, objptr
153d8     4A 00 00 FF 
153dc     88 E4 85 F1 | 	sub	objptr, ##38024
153e0     B0 4E 05 F1 | 	add	fp, #176
153e4     A7 22 62 FC | 	wrlong	local03, fp
153e8     B0 4E 85 F1 | 	sub	fp, #176
153ec                 | '   saveptr=programstart
153ec                 | '   do
153ec                 | LR__1754
153ec     14 4E 05 F1 | 	add	fp, #20
153f0     A7 12 02 F6 | 	mov	arg01, fp
153f4     9C 4E 05 F1 | 	add	fp, #156
153f8     A7 14 02 FB | 	rdlong	arg02, fp
153fc     B0 4E 85 F1 | 	sub	fp, #176
15400     18 16 06 F6 | 	mov	arg03, #24
15404     0B 00 00 FF 
15408     CC E4 05 F1 | 	add	objptr, ##5836
1540c     FC A7 B0 FD | 	call	#_psram_spin2_read1
15410     2C 4E 05 F1 | 	add	fp, #44
15414     A7 12 02 F6 | 	mov	arg01, fp
15418     10 4E 85 F1 | 	sub	fp, #16
1541c     A7 14 02 FB | 	rdlong	arg02, fp
15420     04 4E 05 F1 | 	add	fp, #4
15424     A7 16 02 FB | 	rdlong	arg03, fp
15428     20 4E 85 F1 | 	sub	fp, #32
1542c     DC A7 B0 FD | 	call	#_psram_spin2_read1
15430     0B 00 00 FF 
15434     CC E4 85 F1 | 	sub	objptr, ##5836
15438     84 01 00 FF 
1543c     CA 23 06 F6 | 	mov	local03, ##@LR__5490
15440     AC 4E 05 F1 | 	add	fp, #172
15444     A7 22 62 FC | 	wrlong	local03, fp
15448                 | '     psram.read1(varptr(header(0)),saveptr,24)
15448                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
15448                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
15448     A0 4E 85 F1 | 	sub	fp, #160
1544c     A7 02 68 FC | 	wrlong	#1, fp
15450     14 4E 05 F1 | 	add	fp, #20
15454     A7 24 02 FB | 	rdlong	local04, fp
15458     20 4E 85 F1 | 	sub	fp, #32
1545c     01 24 06 F1 | 	add	local04, #1
15460                 | LR__1755
15460     0C 4E 05 F1 | 	add	fp, #12
15464     A7 22 02 FB | 	rdlong	local03, fp
15468     0C 4E 85 F1 | 	sub	fp, #12
1546c     12 23 52 F2 | 	cmps	local03, local04 wc
15470     54 00 90 3D |  if_ae	jmp	#LR__1756
15474     AC 4E 05 F1 | 	add	fp, #172
15478     A7 1E 02 FB | 	rdlong	local01, fp
1547c     A0 4E 85 F1 | 	sub	fp, #160
15480     A7 22 02 FB | 	rdlong	local03, fp
15484     01 22 86 F1 | 	sub	local03, #1
15488     20 4E 05 F1 | 	add	fp, #32
1548c     A7 22 02 F1 | 	add	local03, fp
15490     11 13 C2 FA | 	rdbyte	arg01, local03
15494     2C 4E 85 F1 | 	sub	fp, #44
15498     F0 D5 B0 FD | 	call	#__system__Chr_S
1549c     FD 14 02 F6 | 	mov	arg02, result1
154a0     0F 13 02 F6 | 	mov	arg01, local01
154a4     00 B4 B0 FD | 	call	#__system___string_concat
154a8     AC 4E 05 F1 | 	add	fp, #172
154ac     A7 FA 61 FC | 	wrlong	result1, fp
154b0     A0 4E 85 F1 | 	sub	fp, #160
154b4     A7 22 02 FB | 	rdlong	local03, fp
154b8     01 22 06 F1 | 	add	local03, #1
154bc     A7 22 62 FC | 	wrlong	local03, fp
154c0     0C 4E 85 F1 | 	sub	fp, #12
154c4     98 FF 9F FD | 	jmp	#LR__1755
154c8                 | LR__1756
154c8                 | '     print #9, saveline$
154c8     09 12 06 F6 | 	mov	arg01, #9
154cc     E0 0D B1 FD | 	call	#__system___getiolock_0541
154d0     FD 12 02 F6 | 	mov	arg01, result1
154d4     74 B3 B0 FD | 	call	#__system___lockmem
154d8     AC 4E 05 F1 | 	add	fp, #172
154dc     A7 14 02 FB | 	rdlong	arg02, fp
154e0     AC 4E 85 F1 | 	sub	fp, #172
154e4     09 12 06 F6 | 	mov	arg01, #9
154e8     00 16 06 F6 | 	mov	arg03, #0
154ec     50 C0 B0 FD | 	call	#__system___basic_print_string
154f0     09 12 06 F6 | 	mov	arg01, #9
154f4     0A 14 06 F6 | 	mov	arg02, #10
154f8     00 16 06 F6 | 	mov	arg03, #0
154fc     E8 BF B0 FD | 	call	#__system___basic_print_char
15500     09 12 06 F6 | 	mov	arg01, #9
15504     A8 0D B1 FD | 	call	#__system___getiolock_0541
15508     FD 00 68 FC | 	wrlong	#0, result1
1550c     28 4E 05 F1 | 	add	fp, #40
15510     A7 22 02 FB | 	rdlong	local03, fp
15514     88 4E 05 F1 | 	add	fp, #136
15518     A7 22 62 FC | 	wrlong	local03, fp
1551c     88 4E 85 F1 | 	sub	fp, #136
15520     A7 22 02 FB | 	rdlong	local03, fp
15524     28 4E 85 F1 | 	sub	fp, #40
15528     FF FF 3F FF 
1552c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
15530     B8 FE 9F 5D |  if_ne	jmp	#LR__1754
15534                 | '   close #9  
15534     09 12 06 F6 | 	mov	arg01, #9
15538     A4 03 B1 FD | 	call	#__system__close
1553c                 | '   print "Saved as ";currentdir$+"/"+loadname
1553c     00 12 06 F6 | 	mov	arg01, #0
15540     6C 0D B1 FD | 	call	#__system___getiolock_0541
15544     FD 12 02 F6 | 	mov	arg01, result1
15548     00 B3 B0 FD | 	call	#__system___lockmem
1554c     84 01 00 FF 
15550     CB 15 06 F6 | 	mov	arg02, ##@LR__5491
15554     00 12 06 F6 | 	mov	arg01, #0
15558     00 16 06 F6 | 	mov	arg03, #0
1555c     E0 BF B0 FD | 	call	#__system___basic_print_string
15560     00 20 06 F6 | 	mov	local02, #0
15564     4A 00 00 FF 
15568     94 E4 05 F1 | 	add	objptr, ##38036
1556c     F2 12 02 FB | 	rdlong	arg01, objptr
15570     4A 00 00 FF 
15574     94 E4 85 F1 | 	sub	objptr, ##38036
15578     84 01 00 FF 
1557c     D5 15 06 F6 | 	mov	arg02, ##@LR__5492
15580     24 B3 B0 FD | 	call	#__system___string_concat
15584     FD 12 02 F6 | 	mov	arg01, result1
15588     51 00 00 FF 
1558c     D8 E5 05 F1 | 	add	objptr, ##41944
15590     F2 14 02 FB | 	rdlong	arg02, objptr
15594     51 00 00 FF 
15598     D8 E5 85 F1 | 	sub	objptr, ##41944
1559c     08 B3 B0 FD | 	call	#__system___string_concat
155a0     FD 14 02 F6 | 	mov	arg02, result1
155a4     10 13 02 F6 | 	mov	arg01, local02
155a8     00 16 06 F6 | 	mov	arg03, #0
155ac     90 BF B0 FD | 	call	#__system___basic_print_string
155b0     00 12 06 F6 | 	mov	arg01, #0
155b4     0A 14 06 F6 | 	mov	arg02, #10
155b8     00 16 06 F6 | 	mov	arg03, #0
155bc     28 BF B0 FD | 	call	#__system___basic_print_char
155c0     00 12 06 F6 | 	mov	arg01, #0
155c4     E8 0C B1 FD | 	call	#__system___getiolock_0541
155c8     FD 00 68 FC | 	wrlong	#0, result1
155cc                 | LR__1757
155cc                 | LR__1758
155cc     A7 F0 03 F6 | 	mov	ptra, fp
155d0     B2 00 A0 FD | 	call	#popregs_
155d4                 | _do_save_ret
155d4     2D 00 64 FD | 	ret
155d8                 | 
155d8                 | ' 
155d8                 | ' ' ------------------ setdelay
155d8                 | ' 
155d8                 | ' sub do_setdelay
155d8                 | _do_setdelay
155d8     02 4A 05 F6 | 	mov	COUNT_, #2
155dc     A8 00 A0 FD | 	call	#pushregs_
155e0     18 F0 07 F1 | 	add	ptra, #24
155e4     B4 5D BF FD | 	call	#_pop
155e8     FD 12 02 F6 | 	mov	arg01, result1
155ec     FE 1E 02 F6 | 	mov	local01, result2
155f0     FF 20 02 F6 | 	mov	local02, result3
155f4     A7 12 62 FC | 	wrlong	arg01, fp
155f8     04 4E 05 F1 | 	add	fp, #4
155fc     A7 1E 62 FC | 	wrlong	local01, fp
15600     04 4E 05 F1 | 	add	fp, #4
15604     A7 20 62 FC | 	wrlong	local02, fp
15608     08 4E 85 F1 | 	sub	fp, #8
1560c     8C 5D BF FD | 	call	#_pop
15610     FD 20 02 F6 | 	mov	local02, result1
15614     0C 4E 05 F1 | 	add	fp, #12
15618     A7 20 62 FC | 	wrlong	local02, fp
1561c     04 4E 05 F1 | 	add	fp, #4
15620     A7 FC 61 FC | 	wrlong	result2, fp
15624     04 4E 05 F1 | 	add	fp, #4
15628     A7 FE 61 FC | 	wrlong	result3, fp
1562c     08 4E 85 F1 | 	sub	fp, #8
15630     A7 12 02 F6 | 	mov	arg01, fp
15634     0C 4E 85 F1 | 	sub	fp, #12
15638     44 5F BF FD | 	call	#_converttoint
1563c     FD 20 02 F6 | 	mov	local02, result1
15640     10 1F 02 F6 | 	mov	local01, local02
15644     01 1E 66 F0 | 	shl	local01, #1
15648     10 1F 02 F1 | 	add	local01, local02
1564c     03 1E 66 F0 | 	shl	local01, #3
15650     14 00 00 FF 
15654     38 E5 05 F1 | 	add	objptr, ##10552
15658     F2 1E 02 F1 | 	add	local01, objptr
1565c     A7 12 02 F6 | 	mov	arg01, fp
15660     14 00 00 FF 
15664     38 E5 85 F1 | 	sub	objptr, ##10552
15668     14 5F BF FD | 	call	#_converttoint
1566c     06 1E 06 F1 | 	add	local01, #6
15670     0F FB 51 FC | 	wrword	result1, local01
15674     A7 F0 03 F6 | 	mov	ptra, fp
15678     B2 00 A0 FD | 	call	#popregs_
1567c                 | _do_setdelay_ret
1567c     2D 00 64 FD | 	ret
15680                 | 
15680                 | ' 
15680                 | ' ' ------------------ setenv
15680                 | ' 
15680                 | ' sub do_setenv
15680                 | _do_setenv
15680     02 4A 05 F6 | 	mov	COUNT_, #2
15684     A8 00 A0 FD | 	call	#pushregs_
15688     18 F0 07 F1 | 	add	ptra, #24
1568c     0C 5D BF FD | 	call	#_pop
15690     FD 12 02 F6 | 	mov	arg01, result1
15694     FE 1E 02 F6 | 	mov	local01, result2
15698     FF 20 02 F6 | 	mov	local02, result3
1569c     A7 12 62 FC | 	wrlong	arg01, fp
156a0     04 4E 05 F1 | 	add	fp, #4
156a4     A7 1E 62 FC | 	wrlong	local01, fp
156a8     04 4E 05 F1 | 	add	fp, #4
156ac     A7 20 62 FC | 	wrlong	local02, fp
156b0     08 4E 85 F1 | 	sub	fp, #8
156b4     E4 5C BF FD | 	call	#_pop
156b8     FD 20 02 F6 | 	mov	local02, result1
156bc     0C 4E 05 F1 | 	add	fp, #12
156c0     A7 20 62 FC | 	wrlong	local02, fp
156c4     04 4E 05 F1 | 	add	fp, #4
156c8     A7 FC 61 FC | 	wrlong	result2, fp
156cc     04 4E 05 F1 | 	add	fp, #4
156d0     A7 FE 61 FC | 	wrlong	result3, fp
156d4     08 4E 85 F1 | 	sub	fp, #8
156d8     A7 12 02 F6 | 	mov	arg01, fp
156dc     0C 4E 85 F1 | 	sub	fp, #12
156e0     9C 5E BF FD | 	call	#_converttoint
156e4     FD 20 02 F6 | 	mov	local02, result1
156e8     10 1F 02 F6 | 	mov	local01, local02
156ec     01 1E 66 F0 | 	shl	local01, #1
156f0     10 1F 02 F1 | 	add	local01, local02
156f4     03 1E 66 F0 | 	shl	local01, #3
156f8     14 00 00 FF 
156fc     38 E5 05 F1 | 	add	objptr, ##10552
15700     F2 1E 02 F1 | 	add	local01, objptr
15704     A7 12 02 F6 | 	mov	arg01, fp
15708     14 00 00 FF 
1570c     38 E5 85 F1 | 	sub	objptr, ##10552
15710     6C 5E BF FD | 	call	#_converttoint
15714     05 1E 06 F1 | 	add	local01, #5
15718     0F FB 41 FC | 	wrbyte	result1, local01
1571c     A7 F0 03 F6 | 	mov	ptra, fp
15720     B2 00 A0 FD | 	call	#popregs_
15724                 | _do_setenv_ret
15724     2D 00 64 FD | 	ret
15728                 | 
15728                 | ' 
15728                 | ' ' ------------------ setlen
15728                 | ' 
15728                 | ' sub do_setlen
15728                 | _do_setlen
15728     02 4A 05 F6 | 	mov	COUNT_, #2
1572c     A8 00 A0 FD | 	call	#pushregs_
15730     18 F0 07 F1 | 	add	ptra, #24
15734     64 5C BF FD | 	call	#_pop
15738     FD 12 02 F6 | 	mov	arg01, result1
1573c     FE 1E 02 F6 | 	mov	local01, result2
15740     FF 20 02 F6 | 	mov	local02, result3
15744     A7 12 62 FC | 	wrlong	arg01, fp
15748     04 4E 05 F1 | 	add	fp, #4
1574c     A7 1E 62 FC | 	wrlong	local01, fp
15750     04 4E 05 F1 | 	add	fp, #4
15754     A7 20 62 FC | 	wrlong	local02, fp
15758     08 4E 85 F1 | 	sub	fp, #8
1575c     3C 5C BF FD | 	call	#_pop
15760     FD 20 02 F6 | 	mov	local02, result1
15764     0C 4E 05 F1 | 	add	fp, #12
15768     A7 20 62 FC | 	wrlong	local02, fp
1576c     04 4E 05 F1 | 	add	fp, #4
15770     A7 FC 61 FC | 	wrlong	result2, fp
15774     04 4E 05 F1 | 	add	fp, #4
15778     A7 FE 61 FC | 	wrlong	result3, fp
1577c     08 4E 85 F1 | 	sub	fp, #8
15780     A7 12 02 F6 | 	mov	arg01, fp
15784     0C 4E 85 F1 | 	sub	fp, #12
15788     F4 5D BF FD | 	call	#_converttoint
1578c     FD 20 02 F6 | 	mov	local02, result1
15790     10 1F 02 F6 | 	mov	local01, local02
15794     01 1E 66 F0 | 	shl	local01, #1
15798     10 1F 02 F1 | 	add	local01, local02
1579c     03 1E 66 F0 | 	shl	local01, #3
157a0     14 00 00 FF 
157a4     38 E5 05 F1 | 	add	objptr, ##10552
157a8     F2 1E 02 F1 | 	add	local01, objptr
157ac     A7 12 02 F6 | 	mov	arg01, fp
157b0     14 00 00 FF 
157b4     38 E5 85 F1 | 	sub	objptr, ##10552
157b8     80 5E BF FD | 	call	#_converttofloat
157bc     08 1E 06 F1 | 	add	local01, #8
157c0     0F FB 61 FC | 	wrlong	result1, local01
157c4     A7 F0 03 F6 | 	mov	ptra, fp
157c8     B2 00 A0 FD | 	call	#popregs_
157cc                 | _do_setlen_ret
157cc     2D 00 64 FD | 	ret
157d0                 | 
157d0                 | ' 
157d0                 | ' ' ------------------ setpan
157d0                 | ' 
157d0                 | ' sub do_setpan
157d0                 | _do_setpan
157d0     02 4A 05 F6 | 	mov	COUNT_, #2
157d4     A8 00 A0 FD | 	call	#pushregs_
157d8     18 F0 07 F1 | 	add	ptra, #24
157dc     BC 5B BF FD | 	call	#_pop
157e0     FD 12 02 F6 | 	mov	arg01, result1
157e4     FE 1E 02 F6 | 	mov	local01, result2
157e8     FF 20 02 F6 | 	mov	local02, result3
157ec     A7 12 62 FC | 	wrlong	arg01, fp
157f0     04 4E 05 F1 | 	add	fp, #4
157f4     A7 1E 62 FC | 	wrlong	local01, fp
157f8     04 4E 05 F1 | 	add	fp, #4
157fc     A7 20 62 FC | 	wrlong	local02, fp
15800     08 4E 85 F1 | 	sub	fp, #8
15804     94 5B BF FD | 	call	#_pop
15808     FD 20 02 F6 | 	mov	local02, result1
1580c     0C 4E 05 F1 | 	add	fp, #12
15810     A7 20 62 FC | 	wrlong	local02, fp
15814     04 4E 05 F1 | 	add	fp, #4
15818     A7 FC 61 FC | 	wrlong	result2, fp
1581c     04 4E 05 F1 | 	add	fp, #4
15820     A7 FE 61 FC | 	wrlong	result3, fp
15824     08 4E 85 F1 | 	sub	fp, #8
15828     A7 12 02 F6 | 	mov	arg01, fp
1582c     0C 4E 85 F1 | 	sub	fp, #12
15830     4C 5D BF FD | 	call	#_converttoint
15834     FD 20 02 F6 | 	mov	local02, result1
15838     10 1F 02 F6 | 	mov	local01, local02
1583c     01 1E 66 F0 | 	shl	local01, #1
15840     10 1F 02 F1 | 	add	local01, local02
15844     03 1E 66 F0 | 	shl	local01, #3
15848     14 00 00 FF 
1584c     38 E5 05 F1 | 	add	objptr, ##10552
15850     F2 1E 02 F1 | 	add	local01, objptr
15854     A7 12 02 F6 | 	mov	arg01, fp
15858     14 00 00 FF 
1585c     38 E5 85 F1 | 	sub	objptr, ##10552
15860     D8 5D BF FD | 	call	#_converttofloat
15864     10 1E 06 F1 | 	add	local01, #16
15868     0F FB 61 FC | 	wrlong	result1, local01
1586c     A7 F0 03 F6 | 	mov	ptra, fp
15870     B2 00 A0 FD | 	call	#popregs_
15874                 | _do_setpan_ret
15874     2D 00 64 FD | 	ret
15878                 | 
15878                 | ' 
15878                 | ' ' ------------------ setsustain
15878                 | ' 
15878                 | ' sub do_setsustain
15878                 | _do_setsustain
15878     02 4A 05 F6 | 	mov	COUNT_, #2
1587c     A8 00 A0 FD | 	call	#pushregs_
15880     18 F0 07 F1 | 	add	ptra, #24
15884     14 5B BF FD | 	call	#_pop
15888     FD 12 02 F6 | 	mov	arg01, result1
1588c     FE 1E 02 F6 | 	mov	local01, result2
15890     FF 20 02 F6 | 	mov	local02, result3
15894     A7 12 62 FC | 	wrlong	arg01, fp
15898     04 4E 05 F1 | 	add	fp, #4
1589c     A7 1E 62 FC | 	wrlong	local01, fp
158a0     04 4E 05 F1 | 	add	fp, #4
158a4     A7 20 62 FC | 	wrlong	local02, fp
158a8     08 4E 85 F1 | 	sub	fp, #8
158ac     EC 5A BF FD | 	call	#_pop
158b0     FD 20 02 F6 | 	mov	local02, result1
158b4     0C 4E 05 F1 | 	add	fp, #12
158b8     A7 20 62 FC | 	wrlong	local02, fp
158bc     04 4E 05 F1 | 	add	fp, #4
158c0     A7 FC 61 FC | 	wrlong	result2, fp
158c4     04 4E 05 F1 | 	add	fp, #4
158c8     A7 FE 61 FC | 	wrlong	result3, fp
158cc     08 4E 85 F1 | 	sub	fp, #8
158d0     A7 12 02 F6 | 	mov	arg01, fp
158d4     0C 4E 85 F1 | 	sub	fp, #12
158d8     A4 5C BF FD | 	call	#_converttoint
158dc     FD 20 02 F6 | 	mov	local02, result1
158e0     10 1F 02 F6 | 	mov	local01, local02
158e4     01 1E 66 F0 | 	shl	local01, #1
158e8     10 1F 02 F1 | 	add	local01, local02
158ec     03 1E 66 F0 | 	shl	local01, #3
158f0     14 00 00 FF 
158f4     38 E5 05 F1 | 	add	objptr, ##10552
158f8     F2 1E 02 F1 | 	add	local01, objptr
158fc     A7 12 02 F6 | 	mov	arg01, fp
15900     14 00 00 FF 
15904     38 E5 85 F1 | 	sub	objptr, ##10552
15908     74 5C BF FD | 	call	#_converttoint
1590c     14 1E 06 F1 | 	add	local01, #20
15910     0F FB 51 FC | 	wrword	result1, local01
15914     A7 F0 03 F6 | 	mov	ptra, fp
15918     B2 00 A0 FD | 	call	#popregs_
1591c                 | _do_setsustain_ret
1591c     2D 00 64 FD | 	ret
15920                 | 
15920                 | ' 
15920                 | ' ' ------------------ setvol
15920                 | ' 
15920                 | ' sub do_setvol
15920                 | _do_setvol
15920     02 4A 05 F6 | 	mov	COUNT_, #2
15924     A8 00 A0 FD | 	call	#pushregs_
15928     18 F0 07 F1 | 	add	ptra, #24
1592c     6C 5A BF FD | 	call	#_pop
15930     FD 12 02 F6 | 	mov	arg01, result1
15934     FE 1E 02 F6 | 	mov	local01, result2
15938     FF 20 02 F6 | 	mov	local02, result3
1593c     A7 12 62 FC | 	wrlong	arg01, fp
15940     04 4E 05 F1 | 	add	fp, #4
15944     A7 1E 62 FC | 	wrlong	local01, fp
15948     04 4E 05 F1 | 	add	fp, #4
1594c     A7 20 62 FC | 	wrlong	local02, fp
15950     08 4E 85 F1 | 	sub	fp, #8
15954     44 5A BF FD | 	call	#_pop
15958     FD 20 02 F6 | 	mov	local02, result1
1595c     0C 4E 05 F1 | 	add	fp, #12
15960     A7 20 62 FC | 	wrlong	local02, fp
15964     04 4E 05 F1 | 	add	fp, #4
15968     A7 FC 61 FC | 	wrlong	result2, fp
1596c     04 4E 05 F1 | 	add	fp, #4
15970     A7 FE 61 FC | 	wrlong	result3, fp
15974     08 4E 85 F1 | 	sub	fp, #8
15978     A7 12 02 F6 | 	mov	arg01, fp
1597c     0C 4E 85 F1 | 	sub	fp, #12
15980     FC 5B BF FD | 	call	#_converttoint
15984     FD 20 02 F6 | 	mov	local02, result1
15988     10 1F 02 F6 | 	mov	local01, local02
1598c     01 1E 66 F0 | 	shl	local01, #1
15990     10 1F 02 F1 | 	add	local01, local02
15994     03 1E 66 F0 | 	shl	local01, #3
15998     14 00 00 FF 
1599c     38 E5 05 F1 | 	add	objptr, ##10552
159a0     F2 1E 02 F1 | 	add	local01, objptr
159a4     A7 12 02 F6 | 	mov	arg01, fp
159a8     14 00 00 FF 
159ac     38 E5 85 F1 | 	sub	objptr, ##10552
159b0     88 5C BF FD | 	call	#_converttofloat
159b4     0C 1E 06 F1 | 	add	local01, #12
159b8     0F FB 61 FC | 	wrlong	result1, local01
159bc     A7 F0 03 F6 | 	mov	ptra, fp
159c0     B2 00 A0 FD | 	call	#popregs_
159c4                 | _do_setvol_ret
159c4     2D 00 64 FD | 	ret
159c8                 | 
159c8                 | ' 
159c8                 | ' ' ------------------ setwave
159c8                 | ' 
159c8                 | ' sub do_setwave
159c8                 | _do_setwave
159c8     02 4A 05 F6 | 	mov	COUNT_, #2
159cc     A8 00 A0 FD | 	call	#pushregs_
159d0     18 F0 07 F1 | 	add	ptra, #24
159d4     C4 59 BF FD | 	call	#_pop
159d8     FD 12 02 F6 | 	mov	arg01, result1
159dc     FE 1E 02 F6 | 	mov	local01, result2
159e0     FF 20 02 F6 | 	mov	local02, result3
159e4     A7 12 62 FC | 	wrlong	arg01, fp
159e8     04 4E 05 F1 | 	add	fp, #4
159ec     A7 1E 62 FC | 	wrlong	local01, fp
159f0     04 4E 05 F1 | 	add	fp, #4
159f4     A7 20 62 FC | 	wrlong	local02, fp
159f8     08 4E 85 F1 | 	sub	fp, #8
159fc     9C 59 BF FD | 	call	#_pop
15a00     FD 20 02 F6 | 	mov	local02, result1
15a04     0C 4E 05 F1 | 	add	fp, #12
15a08     A7 20 62 FC | 	wrlong	local02, fp
15a0c     04 4E 05 F1 | 	add	fp, #4
15a10     A7 FC 61 FC | 	wrlong	result2, fp
15a14     04 4E 05 F1 | 	add	fp, #4
15a18     A7 FE 61 FC | 	wrlong	result3, fp
15a1c     08 4E 85 F1 | 	sub	fp, #8
15a20     A7 12 02 F6 | 	mov	arg01, fp
15a24     0C 4E 85 F1 | 	sub	fp, #12
15a28     54 5B BF FD | 	call	#_converttoint
15a2c     FD 20 02 F6 | 	mov	local02, result1
15a30     10 1F 02 F6 | 	mov	local01, local02
15a34     01 1E 66 F0 | 	shl	local01, #1
15a38     10 1F 02 F1 | 	add	local01, local02
15a3c     03 1E 66 F0 | 	shl	local01, #3
15a40     14 00 00 FF 
15a44     38 E5 05 F1 | 	add	objptr, ##10552
15a48     F2 1E 02 F1 | 	add	local01, objptr
15a4c     A7 12 02 F6 | 	mov	arg01, fp
15a50     14 00 00 FF 
15a54     38 E5 85 F1 | 	sub	objptr, ##10552
15a58     24 5B BF FD | 	call	#_converttoint
15a5c     04 1E 06 F1 | 	add	local01, #4
15a60     0F FB 41 FC | 	wrbyte	result1, local01
15a64     A7 F0 03 F6 | 	mov	ptra, fp
15a68     B2 00 A0 FD | 	call	#popregs_
15a6c                 | _do_setwave_ret
15a6c     2D 00 64 FD | 	ret
15a70                 | 
15a70                 | ' 
15a70                 | ' ' ------------------ shutup
15a70                 | ' 
15a70                 | ' sub do_shutup
15a70                 | _do_shutup
15a70     03 4A 05 F6 | 	mov	COUNT_, #3
15a74     A8 00 A0 FD | 	call	#pushregs_
15a78     18 F0 07 F1 | 	add	ptra, #24
15a7c     4A 00 00 FF 
15a80     80 E4 05 F1 | 	add	objptr, ##38016
15a84     F2 1E 02 FB | 	rdlong	local01, objptr
15a88     0F 21 02 F6 | 	mov	local02, local01
15a8c     01 20 66 F0 | 	shl	local02, #1
15a90     0F 21 02 F1 | 	add	local02, local01
15a94     02 20 66 F0 | 	shl	local02, #2
15a98     03 00 00 FF 
15a9c     04 E4 85 F1 | 	sub	objptr, ##1540
15aa0     F2 20 02 F1 | 	add	local02, objptr
15aa4     10 23 0A FB | 	rdlong	local03, local02 wz
15aa8     14 4E 05 F1 | 	add	fp, #20
15aac     A7 22 62 FC | 	wrlong	local03, fp
15ab0                 | ' 
15ab0                 | ' numpar=compiledline(lineptr_e).result.uresult
15ab0                 | ' if numpar=0 then
15ab0     14 4E 85 F1 | 	sub	fp, #20
15ab4     47 00 00 FF 
15ab8     7C E4 85 F1 | 	sub	objptr, ##36476
15abc     50 00 90 5D |  if_ne	jmp	#LR__1762
15ac0                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
15ac0     10 4E 05 F1 | 	add	fp, #16
15ac4     A7 00 68 FC | 	wrlong	#0, fp
15ac8     37 00 00 FF 
15acc     10 E4 05 F1 | 	add	objptr, ##28176
15ad0     97 16 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
15ad4                 | LR__1760
15ad4     F2 12 02 FB | 	rdlong	arg01, objptr
15ad8     A7 22 02 FB | 	rdlong	local03, fp
15adc     06 22 66 F0 | 	shl	local03, #6
15ae0     11 13 02 F1 | 	add	arg01, local03
15ae4     14 12 06 F1 | 	add	arg01, #20
15ae8     09 01 58 FC | 	wrword	#0, arg01
15aec     A7 22 02 FB | 	rdlong	local03, fp
15af0     01 22 06 F1 | 	add	local03, #1
15af4     A7 22 62 FC | 	wrlong	local03, fp
15af8     08 22 56 F2 | 	cmps	local03, #8 wc
15afc     D4 FF 9F CD |  if_b	jmp	#LR__1760
15b00                 | LR__1761
15b00     37 00 00 FF 
15b04     10 E4 85 F1 | 	sub	objptr, ##28176
15b08     10 4E 85 F1 | 	sub	fp, #16
15b0c     64 00 90 FD | 	jmp	#LR__1763
15b10                 | LR__1762
15b10     88 58 BF FD | 	call	#_pop
15b14     FF 1E 02 F6 | 	mov	local01, result3
15b18     A7 FA 61 FC | 	wrlong	result1, fp
15b1c     04 4E 05 F1 | 	add	fp, #4
15b20     A7 FC 61 FC | 	wrlong	result2, fp
15b24     04 4E 05 F1 | 	add	fp, #4
15b28     A7 1E 62 FC | 	wrlong	local01, fp
15b2c     08 4E 85 F1 | 	sub	fp, #8
15b30     A7 12 02 F6 | 	mov	arg01, fp
15b34     48 5A BF FD | 	call	#_converttoint
15b38     FD 22 52 F6 | 	abs	local03, result1 wc
15b3c     07 22 06 F5 | 	and	local03, #7
15b40     11 21 82 F6 | 	negc	local02, local03
15b44     0C 4E 05 F1 | 	add	fp, #12
15b48     A7 20 62 FC | 	wrlong	local02, fp
15b4c     37 00 00 FF 
15b50     10 E4 05 F1 | 	add	objptr, ##28176
15b54     F2 12 02 FB | 	rdlong	arg01, objptr
15b58     37 00 00 FF 
15b5c     10 E4 85 F1 | 	sub	objptr, ##28176
15b60     0C 4E 85 F1 | 	sub	fp, #12
15b64     06 20 66 F0 | 	shl	local02, #6
15b68     10 13 02 F1 | 	add	arg01, local02
15b6c     14 12 06 F1 | 	add	arg01, #20
15b70     09 01 58 FC | 	wrword	#0, arg01
15b74                 | LR__1763
15b74     A7 F0 03 F6 | 	mov	ptra, fp
15b78     B2 00 A0 FD | 	call	#popregs_
15b7c                 | _do_shutup_ret
15b7c     2D 00 64 FD | 	ret
15b80                 | 
15b80                 | ' 
15b80                 | ' ' ------------------ sin
15b80                 | ' 
15b80                 | ' sub do_sin
15b80                 | _do_sin
15b80     01 4A 05 F6 | 	mov	COUNT_, #1
15b84     A8 00 A0 FD | 	call	#pushregs_
15b88     10 F0 07 F1 | 	add	ptra, #16
15b8c     4A 00 00 FF 
15b90     80 E4 05 F1 | 	add	objptr, ##38016
15b94     F2 1E 02 FB | 	rdlong	local01, objptr
15b98     0F 17 02 F6 | 	mov	arg03, local01
15b9c     01 16 66 F0 | 	shl	arg03, #1
15ba0     0F 17 02 F1 | 	add	arg03, local01
15ba4     02 16 66 F0 | 	shl	arg03, #2
15ba8     03 00 00 FF 
15bac     04 E4 85 F1 | 	sub	objptr, ##1540
15bb0     F2 16 02 F1 | 	add	arg03, objptr
15bb4     0B 17 02 FB | 	rdlong	arg03, arg03
15bb8     0C 4E 05 F1 | 	add	fp, #12
15bbc     A7 16 62 FC | 	wrlong	arg03, fp
15bc0                 | ' 
15bc0                 | ' numpar=compiledline(lineptr_e).result.uresult
15bc0                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
15bc0     0C 4E 85 F1 | 	sub	fp, #12
15bc4     02 16 16 F2 | 	cmp	arg03, #2 wc
15bc8     47 00 00 FF 
15bcc     7C E4 85 F1 | 	sub	objptr, ##36476
15bd0     0C 4E 05 C1 |  if_b	add	fp, #12
15bd4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15bd8     0C 4E 85 C1 |  if_b	sub	fp, #12
15bdc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15be0     00 12 06 F6 | 	mov	arg01, #0
15be4     C8 06 B1 FD | 	call	#__system___getiolock_0541
15be8     FD 12 02 F6 | 	mov	arg01, result1
15bec     5C AC B0 FD | 	call	#__system___lockmem
15bf0     84 01 00 FF 
15bf4     D7 15 06 F6 | 	mov	arg02, ##@LR__5493
15bf8     00 12 06 F6 | 	mov	arg01, #0
15bfc     00 16 06 F6 | 	mov	arg03, #0
15c00     3C B9 B0 FD | 	call	#__system___basic_print_string
15c04     00 12 06 F6 | 	mov	arg01, #0
15c08     A4 06 B1 FD | 	call	#__system___getiolock_0541
15c0c     FD 00 68 FC | 	wrlong	#0, result1
15c10     27 12 06 F6 | 	mov	arg01, #39
15c14     A4 76 B0 FD | 	call	#_printerror
15c18     64 00 90 FD | 	jmp	#LR__1771
15c1c                 | LR__1770
15c1c     7C 57 BF FD | 	call	#_pop
15c20     A7 FA 61 FC | 	wrlong	result1, fp
15c24     04 4E 05 F1 | 	add	fp, #4
15c28     A7 FC 61 FC | 	wrlong	result2, fp
15c2c     04 4E 05 F1 | 	add	fp, #4
15c30     A7 FE 61 FC | 	wrlong	result3, fp
15c34     08 4E 85 F1 | 	sub	fp, #8
15c38     51 00 00 FF 
15c3c     BC E5 05 F1 | 	add	objptr, ##41916
15c40     F2 1E 02 FB | 	rdlong	local01, objptr
15c44     51 00 00 FF 
15c48     BC E5 85 F1 | 	sub	objptr, ##41916
15c4c     A7 12 02 F6 | 	mov	arg01, fp
15c50     E8 59 BF FD | 	call	#_converttofloat
15c54     FD 14 02 F6 | 	mov	arg02, result1
15c58     0F 13 02 F6 | 	mov	arg01, local01
15c5c     A0 D7 B0 FD | 	call	#__system___float_mul
15c60     FD 12 02 F6 | 	mov	arg01, result1
15c64     F8 E0 B0 FD | 	call	#__system____builtin_sinf
15c68     A7 FA 61 FC | 	wrlong	result1, fp
15c6c     08 4E 05 F1 | 	add	fp, #8
15c70     A7 3C 68 FC | 	wrlong	#30, fp
15c74     08 4E 85 F1 | 	sub	fp, #8
15c78     A7 12 02 F6 | 	mov	arg01, fp
15c7c     B4 57 BF FD | 	call	#_push
15c80                 | LR__1771
15c80     A7 F0 03 F6 | 	mov	ptra, fp
15c84     B2 00 A0 FD | 	call	#popregs_
15c88                 | _do_sin_ret
15c88     2D 00 64 FD | 	ret
15c8c                 | 
15c8c                 | ' 
15c8c                 | ' ' ------------------ sprite
15c8c                 | ' 
15c8c                 | ' sub do_sprite
15c8c                 | _do_sprite
15c8c     00 4A 05 F6 | 	mov	COUNT_, #0
15c90     A8 00 A0 FD | 	call	#pushregs_
15c94     30 F0 07 F1 | 	add	ptra, #48
15c98     00 57 BF FD | 	call	#_pop
15c9c     FD 16 02 F6 | 	mov	arg03, result1
15ca0     FE 14 02 F6 | 	mov	arg02, result2
15ca4     FF 12 02 F6 | 	mov	arg01, result3
15ca8     18 4E 05 F1 | 	add	fp, #24
15cac     A7 16 62 FC | 	wrlong	arg03, fp
15cb0     04 4E 05 F1 | 	add	fp, #4
15cb4     A7 14 62 FC | 	wrlong	arg02, fp
15cb8     04 4E 05 F1 | 	add	fp, #4
15cbc     A7 12 62 FC | 	wrlong	arg01, fp
15cc0     20 4E 85 F1 | 	sub	fp, #32
15cc4     D4 56 BF FD | 	call	#_pop
15cc8     FD 16 02 F6 | 	mov	arg03, result1
15ccc     FE 14 02 F6 | 	mov	arg02, result2
15cd0     FF 12 02 F6 | 	mov	arg01, result3
15cd4     0C 4E 05 F1 | 	add	fp, #12
15cd8     A7 16 62 FC | 	wrlong	arg03, fp
15cdc     04 4E 05 F1 | 	add	fp, #4
15ce0     A7 14 62 FC | 	wrlong	arg02, fp
15ce4     04 4E 05 F1 | 	add	fp, #4
15ce8     A7 12 62 FC | 	wrlong	arg01, fp
15cec     14 4E 85 F1 | 	sub	fp, #20
15cf0     A8 56 BF FD | 	call	#_pop
15cf4     FF 16 02 F6 | 	mov	arg03, result3
15cf8     A7 FA 61 FC | 	wrlong	result1, fp
15cfc     04 4E 05 F1 | 	add	fp, #4
15d00     A7 FC 61 FC | 	wrlong	result2, fp
15d04     04 4E 05 F1 | 	add	fp, #4
15d08     A7 16 62 FC | 	wrlong	arg03, fp
15d0c     08 4E 85 F1 | 	sub	fp, #8
15d10     A7 12 02 F6 | 	mov	arg01, fp
15d14     68 58 BF FD | 	call	#_converttoint
15d18     24 4E 05 F1 | 	add	fp, #36
15d1c     A7 FA 61 FC | 	wrlong	result1, fp
15d20     18 4E 85 F1 | 	sub	fp, #24
15d24     A7 12 02 F6 | 	mov	arg01, fp
15d28     0C 4E 85 F1 | 	sub	fp, #12
15d2c     50 58 BF FD | 	call	#_converttoint
15d30     28 4E 05 F1 | 	add	fp, #40
15d34     A7 FA 61 FC | 	wrlong	result1, fp
15d38     10 4E 85 F1 | 	sub	fp, #16
15d3c     A7 12 02 F6 | 	mov	arg01, fp
15d40     18 4E 85 F1 | 	sub	fp, #24
15d44     38 58 BF FD | 	call	#_converttoint
15d48     2C 4E 05 F1 | 	add	fp, #44
15d4c     A7 FA 61 FC | 	wrlong	result1, fp
15d50     08 4E 85 F1 | 	sub	fp, #8
15d54     A7 12 02 FB | 	rdlong	arg01, fp
15d58     04 4E 05 F1 | 	add	fp, #4
15d5c     A7 14 02 FB | 	rdlong	arg02, fp
15d60     FD 16 02 F6 | 	mov	arg03, result1
15d64     28 4E 85 F1 | 	sub	fp, #40
15d68     7C 84 B0 FD | 	call	#_hg010b_spin2_setspritepos
15d6c     A7 F0 03 F6 | 	mov	ptra, fp
15d70     B2 00 A0 FD | 	call	#popregs_
15d74                 | _do_sprite_ret
15d74     2D 00 64 FD | 	ret
15d78                 | 
15d78                 | ' 
15d78                 | ' ' ------------------ sqr
15d78                 | ' 
15d78                 | ' sub do_sqr
15d78                 | _do_sqr
15d78     01 4A 05 F6 | 	mov	COUNT_, #1
15d7c     A8 00 A0 FD | 	call	#pushregs_
15d80     10 F0 07 F1 | 	add	ptra, #16
15d84     4A 00 00 FF 
15d88     80 E4 05 F1 | 	add	objptr, ##38016
15d8c     F2 1E 02 FB | 	rdlong	local01, objptr
15d90     0F 17 02 F6 | 	mov	arg03, local01
15d94     01 16 66 F0 | 	shl	arg03, #1
15d98     0F 17 02 F1 | 	add	arg03, local01
15d9c     02 16 66 F0 | 	shl	arg03, #2
15da0     03 00 00 FF 
15da4     04 E4 85 F1 | 	sub	objptr, ##1540
15da8     F2 16 02 F1 | 	add	arg03, objptr
15dac     0B 17 02 FB | 	rdlong	arg03, arg03
15db0     0C 4E 05 F1 | 	add	fp, #12
15db4     A7 16 62 FC | 	wrlong	arg03, fp
15db8                 | ' 
15db8                 | ' numpar=compiledline(lineptr_e).result.uresult
15db8                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
15db8     0C 4E 85 F1 | 	sub	fp, #12
15dbc     02 16 16 F2 | 	cmp	arg03, #2 wc
15dc0     47 00 00 FF 
15dc4     7C E4 85 F1 | 	sub	objptr, ##36476
15dc8     0C 4E 05 C1 |  if_b	add	fp, #12
15dcc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15dd0     0C 4E 85 C1 |  if_b	sub	fp, #12
15dd4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15dd8     00 12 06 F6 | 	mov	arg01, #0
15ddc     D0 04 B1 FD | 	call	#__system___getiolock_0541
15de0     FD 12 02 F6 | 	mov	arg01, result1
15de4     64 AA B0 FD | 	call	#__system___lockmem
15de8     84 01 00 FF 
15dec     DD 15 06 F6 | 	mov	arg02, ##@LR__5494
15df0     00 12 06 F6 | 	mov	arg01, #0
15df4     00 16 06 F6 | 	mov	arg03, #0
15df8     44 B7 B0 FD | 	call	#__system___basic_print_string
15dfc     00 12 06 F6 | 	mov	arg01, #0
15e00     AC 04 B1 FD | 	call	#__system___getiolock_0541
15e04     FD 00 68 FC | 	wrlong	#0, result1
15e08     27 12 06 F6 | 	mov	arg01, #39
15e0c     AC 74 B0 FD | 	call	#_printerror
15e10     48 00 90 FD | 	jmp	#LR__1781
15e14                 | LR__1780
15e14     84 55 BF FD | 	call	#_pop
15e18     FF 1E 02 F6 | 	mov	local01, result3
15e1c     A7 FA 61 FC | 	wrlong	result1, fp
15e20     04 4E 05 F1 | 	add	fp, #4
15e24     A7 FC 61 FC | 	wrlong	result2, fp
15e28     04 4E 05 F1 | 	add	fp, #4
15e2c     A7 1E 62 FC | 	wrlong	local01, fp
15e30     08 4E 85 F1 | 	sub	fp, #8
15e34     A7 12 02 F6 | 	mov	arg01, fp
15e38     00 58 BF FD | 	call	#_converttofloat
15e3c     FD 12 02 F6 | 	mov	arg01, result1
15e40     E4 D4 B0 FD | 	call	#__system___float_sqrt
15e44     A7 FA 61 FC | 	wrlong	result1, fp
15e48     08 4E 05 F1 | 	add	fp, #8
15e4c     A7 3C 68 FC | 	wrlong	#30, fp
15e50     08 4E 85 F1 | 	sub	fp, #8
15e54     A7 12 02 F6 | 	mov	arg01, fp
15e58     D8 55 BF FD | 	call	#_push
15e5c                 | LR__1781
15e5c     A7 F0 03 F6 | 	mov	ptra, fp
15e60     B2 00 A0 FD | 	call	#popregs_
15e64                 | _do_sqr_ret
15e64     2D 00 64 FD | 	ret
15e68                 | 
15e68                 | ' 
15e68                 | ' ' ------------------ stick
15e68                 | ' 
15e68                 | ' sub do_stick
15e68                 | _do_stick
15e68     01 4A 05 F6 | 	mov	COUNT_, #1
15e6c     A8 00 A0 FD | 	call	#pushregs_
15e70     10 F0 07 F1 | 	add	ptra, #16
15e74     4A 00 00 FF 
15e78     80 E4 05 F1 | 	add	objptr, ##38016
15e7c     F2 1E 02 FB | 	rdlong	local01, objptr
15e80     0F 17 02 F6 | 	mov	arg03, local01
15e84     01 16 66 F0 | 	shl	arg03, #1
15e88     0F 17 02 F1 | 	add	arg03, local01
15e8c     02 16 66 F0 | 	shl	arg03, #2
15e90     03 00 00 FF 
15e94     04 E4 85 F1 | 	sub	objptr, ##1540
15e98     F2 16 02 F1 | 	add	arg03, objptr
15e9c     0B 17 02 FB | 	rdlong	arg03, arg03
15ea0     0C 4E 05 F1 | 	add	fp, #12
15ea4     A7 16 62 FC | 	wrlong	arg03, fp
15ea8                 | ' 
15ea8                 | ' numpar=compiledline(lineptr_e).result.uresult
15ea8                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
15ea8     0C 4E 85 F1 | 	sub	fp, #12
15eac     02 16 16 F2 | 	cmp	arg03, #2 wc
15eb0     47 00 00 FF 
15eb4     7C E4 85 F1 | 	sub	objptr, ##36476
15eb8     3C 00 90 CD |  if_b	jmp	#LR__1790
15ebc     00 12 06 F6 | 	mov	arg01, #0
15ec0     EC 03 B1 FD | 	call	#__system___getiolock_0541
15ec4     FD 12 02 F6 | 	mov	arg01, result1
15ec8     80 A9 B0 FD | 	call	#__system___lockmem
15ecc     84 01 00 FF 
15ed0     E3 15 06 F6 | 	mov	arg02, ##@LR__5495
15ed4     00 12 06 F6 | 	mov	arg01, #0
15ed8     00 16 06 F6 | 	mov	arg03, #0
15edc     60 B6 B0 FD | 	call	#__system___basic_print_string
15ee0     00 12 06 F6 | 	mov	arg01, #0
15ee4     C8 03 B1 FD | 	call	#__system___getiolock_0541
15ee8     FD 00 68 FC | 	wrlong	#0, result1
15eec     27 12 06 F6 | 	mov	arg01, #39
15ef0     C8 73 B0 FD | 	call	#_printerror
15ef4     E8 00 90 FD | 	jmp	#LR__1794
15ef8                 | LR__1790
15ef8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
15ef8     0C 4E 05 F1 | 	add	fp, #12
15efc     A7 FE 09 FB | 	rdlong	result3, fp wz
15f00     0C 4E 85 F1 | 	sub	fp, #12
15f04     30 00 90 5D |  if_ne	jmp	#LR__1791
15f08     51 00 00 FF 
15f0c     30 E5 05 F1 | 	add	objptr, ##41776
15f10     F2 1E 02 FB | 	rdlong	local01, objptr
15f14     51 00 00 FF 
15f18     30 E5 85 F1 | 	sub	objptr, ##41776
15f1c     A7 1E 62 FC | 	wrlong	local01, fp
15f20     08 4E 05 F1 | 	add	fp, #8
15f24     A7 3A 68 FC | 	wrlong	#29, fp
15f28     08 4E 85 F1 | 	sub	fp, #8
15f2c     A7 12 02 F6 | 	mov	arg01, fp
15f30     00 55 BF FD | 	call	#_push
15f34     A8 00 90 FD | 	jmp	#LR__1794
15f38                 | LR__1791
15f38     60 54 BF FD | 	call	#_pop
15f3c     A7 FA 61 FC | 	wrlong	result1, fp
15f40     04 4E 05 F1 | 	add	fp, #4
15f44     A7 FC 61 FC | 	wrlong	result2, fp
15f48     04 4E 05 F1 | 	add	fp, #4
15f4c     A7 FE 61 FC | 	wrlong	result3, fp
15f50                 | ' t1=pop()
15f50                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f50     08 4E 85 F1 | 	sub	fp, #8
15f54     1C FE 0D F2 | 	cmp	result3, #28 wz
15f58     08 4E 05 51 |  if_ne	add	fp, #8
15f5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15f60     08 4E 85 51 |  if_ne	sub	fp, #8
15f64     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15f68     6C 00 90 5D |  if_ne	jmp	#LR__1793
15f6c     A7 1E 02 FB | 	rdlong	local01, fp
15f70     52 00 00 FF 
15f74     10 E4 05 F1 | 	add	objptr, ##42000
15f78     F2 1E 62 FC | 	wrlong	local01, objptr
15f7c                 | '   q=t1.result.uresult
15f7c                 | '   if q<7 then 
15f7c     52 00 00 FF 
15f80     10 E4 85 F1 | 	sub	objptr, ##42000
15f84     07 1E 56 F2 | 	cmps	local01, #7 wc
15f88     40 00 90 3D |  if_ae	jmp	#LR__1792
15f8c     52 00 00 FF 
15f90     10 E4 05 F1 | 	add	objptr, ##42000
15f94     F2 1E 02 FB | 	rdlong	local01, objptr
15f98     02 1E 66 F0 | 	shl	local01, #2
15f9c     E0 E4 85 F1 | 	sub	objptr, #224
15fa0     F2 1E 02 F1 | 	add	local01, objptr
15fa4     0F 1F 02 FB | 	rdlong	local01, local01
15fa8     A7 1E 62 FC | 	wrlong	local01, fp
15fac     08 4E 05 F1 | 	add	fp, #8
15fb0     A7 3A 68 FC | 	wrlong	#29, fp
15fb4     08 4E 85 F1 | 	sub	fp, #8
15fb8     A7 12 02 F6 | 	mov	arg01, fp
15fbc     51 00 00 FF 
15fc0     30 E5 85 F1 | 	sub	objptr, ##41776
15fc4     6C 54 BF FD | 	call	#_push
15fc8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
15fc8     14 00 90 FD | 	jmp	#LR__1794
15fcc                 | LR__1792
15fcc     29 12 06 F6 | 	mov	arg01, #41
15fd0     E8 72 B0 FD | 	call	#_printerror
15fd4                 | '      printerror(41) : return
15fd4     08 00 90 FD | 	jmp	#LR__1794
15fd8                 | LR__1793
15fd8     29 12 06 F6 | 	mov	arg01, #41
15fdc     DC 72 B0 FD | 	call	#_printerror
15fe0                 | LR__1794
15fe0     A7 F0 03 F6 | 	mov	ptra, fp
15fe4     B2 00 A0 FD | 	call	#popregs_
15fe8                 | _do_stick_ret
15fe8     2D 00 64 FD | 	ret
15fec                 | 
15fec                 | ' 
15fec                 | ' ' ------------------ strig
15fec                 | ' 
15fec                 | ' sub do_strig
15fec                 | _do_strig
15fec     01 4A 05 F6 | 	mov	COUNT_, #1
15ff0     A8 00 A0 FD | 	call	#pushregs_
15ff4     10 F0 07 F1 | 	add	ptra, #16
15ff8     4A 00 00 FF 
15ffc     80 E4 05 F1 | 	add	objptr, ##38016
16000     F2 1E 02 FB | 	rdlong	local01, objptr
16004     0F 17 02 F6 | 	mov	arg03, local01
16008     01 16 66 F0 | 	shl	arg03, #1
1600c     0F 17 02 F1 | 	add	arg03, local01
16010     02 16 66 F0 | 	shl	arg03, #2
16014     03 00 00 FF 
16018     04 E4 85 F1 | 	sub	objptr, ##1540
1601c     F2 16 02 F1 | 	add	arg03, objptr
16020     0B 17 02 FB | 	rdlong	arg03, arg03
16024     0C 4E 05 F1 | 	add	fp, #12
16028     A7 16 62 FC | 	wrlong	arg03, fp
1602c                 | ' 
1602c                 | ' numpar=compiledline(lineptr_e).result.uresult
1602c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1602c     0C 4E 85 F1 | 	sub	fp, #12
16030     02 16 16 F2 | 	cmp	arg03, #2 wc
16034     47 00 00 FF 
16038     7C E4 85 F1 | 	sub	objptr, ##36476
1603c     3C 00 90 CD |  if_b	jmp	#LR__1800
16040     00 12 06 F6 | 	mov	arg01, #0
16044     68 02 B1 FD | 	call	#__system___getiolock_0541
16048     FD 12 02 F6 | 	mov	arg01, result1
1604c     FC A7 B0 FD | 	call	#__system___lockmem
16050     84 01 00 FF 
16054     EB 15 06 F6 | 	mov	arg02, ##@LR__5496
16058     00 12 06 F6 | 	mov	arg01, #0
1605c     00 16 06 F6 | 	mov	arg03, #0
16060     DC B4 B0 FD | 	call	#__system___basic_print_string
16064     00 12 06 F6 | 	mov	arg01, #0
16068     44 02 B1 FD | 	call	#__system___getiolock_0541
1606c     FD 00 68 FC | 	wrlong	#0, result1
16070     27 12 06 F6 | 	mov	arg01, #39
16074     44 72 B0 FD | 	call	#_printerror
16078     E8 00 90 FD | 	jmp	#LR__1804
1607c                 | LR__1800
1607c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1607c     0C 4E 05 F1 | 	add	fp, #12
16080     A7 FE 09 FB | 	rdlong	result3, fp wz
16084     0C 4E 85 F1 | 	sub	fp, #12
16088     30 00 90 5D |  if_ne	jmp	#LR__1801
1608c     51 00 00 FF 
16090     4C E5 05 F1 | 	add	objptr, ##41804
16094     F2 1E 02 FB | 	rdlong	local01, objptr
16098     51 00 00 FF 
1609c     4C E5 85 F1 | 	sub	objptr, ##41804
160a0     A7 1E 62 FC | 	wrlong	local01, fp
160a4     08 4E 05 F1 | 	add	fp, #8
160a8     A7 3A 68 FC | 	wrlong	#29, fp
160ac     08 4E 85 F1 | 	sub	fp, #8
160b0     A7 12 02 F6 | 	mov	arg01, fp
160b4     7C 53 BF FD | 	call	#_push
160b8     A8 00 90 FD | 	jmp	#LR__1804
160bc                 | LR__1801
160bc     DC 52 BF FD | 	call	#_pop
160c0     A7 FA 61 FC | 	wrlong	result1, fp
160c4     04 4E 05 F1 | 	add	fp, #4
160c8     A7 FC 61 FC | 	wrlong	result2, fp
160cc     04 4E 05 F1 | 	add	fp, #4
160d0     A7 FE 61 FC | 	wrlong	result3, fp
160d4                 | ' t1=pop()
160d4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
160d4     08 4E 85 F1 | 	sub	fp, #8
160d8     1C FE 0D F2 | 	cmp	result3, #28 wz
160dc     08 4E 05 51 |  if_ne	add	fp, #8
160e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
160e4     08 4E 85 51 |  if_ne	sub	fp, #8
160e8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
160ec     6C 00 90 5D |  if_ne	jmp	#LR__1803
160f0     A7 1E 02 FB | 	rdlong	local01, fp
160f4     52 00 00 FF 
160f8     10 E4 05 F1 | 	add	objptr, ##42000
160fc     F2 1E 62 FC | 	wrlong	local01, objptr
16100                 | '   q=t1.result.uresult
16100                 | '   if q<7 then 
16100     52 00 00 FF 
16104     10 E4 85 F1 | 	sub	objptr, ##42000
16108     07 1E 56 F2 | 	cmps	local01, #7 wc
1610c     40 00 90 3D |  if_ae	jmp	#LR__1802
16110     52 00 00 FF 
16114     10 E4 05 F1 | 	add	objptr, ##42000
16118     F2 1E 02 FB | 	rdlong	local01, objptr
1611c     02 1E 66 F0 | 	shl	local01, #2
16120     C4 E4 85 F1 | 	sub	objptr, #196
16124     F2 1E 02 F1 | 	add	local01, objptr
16128     0F 1F 02 FB | 	rdlong	local01, local01
1612c     A7 1E 62 FC | 	wrlong	local01, fp
16130     08 4E 05 F1 | 	add	fp, #8
16134     A7 3A 68 FC | 	wrlong	#29, fp
16138     08 4E 85 F1 | 	sub	fp, #8
1613c     A7 12 02 F6 | 	mov	arg01, fp
16140     51 00 00 FF 
16144     4C E5 85 F1 | 	sub	objptr, ##41804
16148     E8 52 BF FD | 	call	#_push
1614c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1614c     14 00 90 FD | 	jmp	#LR__1804
16150                 | LR__1802
16150     29 12 06 F6 | 	mov	arg01, #41
16154     64 71 B0 FD | 	call	#_printerror
16158                 | '      printerror(41) : return
16158     08 00 90 FD | 	jmp	#LR__1804
1615c                 | LR__1803
1615c     29 12 06 F6 | 	mov	arg01, #41
16160     58 71 B0 FD | 	call	#_printerror
16164                 | LR__1804
16164     A7 F0 03 F6 | 	mov	ptra, fp
16168     B2 00 A0 FD | 	call	#popregs_
1616c                 | _do_strig_ret
1616c     2D 00 64 FD | 	ret
16170                 | 
16170                 | ' 
16170                 | ' ' ------------------ tan
16170                 | ' 
16170                 | ' sub do_tan
16170                 | _do_tan
16170     01 4A 05 F6 | 	mov	COUNT_, #1
16174     A8 00 A0 FD | 	call	#pushregs_
16178     10 F0 07 F1 | 	add	ptra, #16
1617c     4A 00 00 FF 
16180     80 E4 05 F1 | 	add	objptr, ##38016
16184     F2 1E 02 FB | 	rdlong	local01, objptr
16188     0F 17 02 F6 | 	mov	arg03, local01
1618c     01 16 66 F0 | 	shl	arg03, #1
16190     0F 17 02 F1 | 	add	arg03, local01
16194     02 16 66 F0 | 	shl	arg03, #2
16198     03 00 00 FF 
1619c     04 E4 85 F1 | 	sub	objptr, ##1540
161a0     F2 16 02 F1 | 	add	arg03, objptr
161a4     0B 17 02 FB | 	rdlong	arg03, arg03
161a8     0C 4E 05 F1 | 	add	fp, #12
161ac     A7 16 62 FC | 	wrlong	arg03, fp
161b0                 | ' 
161b0                 | ' numpar=compiledline(lineptr_e).result.uresult
161b0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
161b0     0C 4E 85 F1 | 	sub	fp, #12
161b4     02 16 16 F2 | 	cmp	arg03, #2 wc
161b8     47 00 00 FF 
161bc     7C E4 85 F1 | 	sub	objptr, ##36476
161c0     0C 4E 05 C1 |  if_b	add	fp, #12
161c4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
161c8     0C 4E 85 C1 |  if_b	sub	fp, #12
161cc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1810
161d0     00 12 06 F6 | 	mov	arg01, #0
161d4     D8 00 B1 FD | 	call	#__system___getiolock_0541
161d8     FD 12 02 F6 | 	mov	arg01, result1
161dc     6C A6 B0 FD | 	call	#__system___lockmem
161e0     84 01 00 FF 
161e4     F3 15 06 F6 | 	mov	arg02, ##@LR__5497
161e8     00 12 06 F6 | 	mov	arg01, #0
161ec     00 16 06 F6 | 	mov	arg03, #0
161f0     4C B3 B0 FD | 	call	#__system___basic_print_string
161f4     00 12 06 F6 | 	mov	arg01, #0
161f8     B4 00 B1 FD | 	call	#__system___getiolock_0541
161fc     FD 00 68 FC | 	wrlong	#0, result1
16200     27 12 06 F6 | 	mov	arg01, #39
16204     B4 70 B0 FD | 	call	#_printerror
16208     64 00 90 FD | 	jmp	#LR__1811
1620c                 | LR__1810
1620c     8C 51 BF FD | 	call	#_pop
16210     A7 FA 61 FC | 	wrlong	result1, fp
16214     04 4E 05 F1 | 	add	fp, #4
16218     A7 FC 61 FC | 	wrlong	result2, fp
1621c     04 4E 05 F1 | 	add	fp, #4
16220     A7 FE 61 FC | 	wrlong	result3, fp
16224     08 4E 85 F1 | 	sub	fp, #8
16228     51 00 00 FF 
1622c     BC E5 05 F1 | 	add	objptr, ##41916
16230     F2 1E 02 FB | 	rdlong	local01, objptr
16234     51 00 00 FF 
16238     BC E5 85 F1 | 	sub	objptr, ##41916
1623c     A7 12 02 F6 | 	mov	arg01, fp
16240     F8 53 BF FD | 	call	#_converttofloat
16244     FD 14 02 F6 | 	mov	arg02, result1
16248     0F 13 02 F6 | 	mov	arg01, local01
1624c     B0 D1 B0 FD | 	call	#__system___float_mul
16250     FD 12 02 F6 | 	mov	arg01, result1
16254     54 DC B0 FD | 	call	#__system____builtin_tanf
16258     A7 FA 61 FC | 	wrlong	result1, fp
1625c     08 4E 05 F1 | 	add	fp, #8
16260     A7 3C 68 FC | 	wrlong	#30, fp
16264     08 4E 85 F1 | 	sub	fp, #8
16268     A7 12 02 F6 | 	mov	arg01, fp
1626c     C4 51 BF FD | 	call	#_push
16270                 | LR__1811
16270     A7 F0 03 F6 | 	mov	ptra, fp
16274     B2 00 A0 FD | 	call	#popregs_
16278                 | _do_tan_ret
16278     2D 00 64 FD | 	ret
1627c                 | 
1627c                 | ' 
1627c                 | ' ' ------------------ val
1627c                 | ' 
1627c                 | ' sub do_val
1627c                 | _do_val
1627c     03 4A 05 F6 | 	mov	COUNT_, #3
16280     A8 00 A0 FD | 	call	#pushregs_
16284     20 F0 07 F1 | 	add	ptra, #32
16288     4A 00 00 FF 
1628c     80 E4 05 F1 | 	add	objptr, ##38016
16290     F2 16 02 FB | 	rdlong	arg03, objptr
16294     0B 1F 02 F6 | 	mov	local01, arg03
16298     01 1E 66 F0 | 	shl	local01, #1
1629c     0B 1F 02 F1 | 	add	local01, arg03
162a0     02 1E 66 F0 | 	shl	local01, #2
162a4     03 00 00 FF 
162a8     04 E4 85 F1 | 	sub	objptr, ##1540
162ac     F2 1E 02 F1 | 	add	local01, objptr
162b0     0F 17 02 FB | 	rdlong	arg03, local01
162b4     0C 4E 05 F1 | 	add	fp, #12
162b8     A7 16 62 FC | 	wrlong	arg03, fp
162bc                 | ' 
162bc                 | ' numpar=compiledline(lineptr_e).result.uresult
162bc                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
162bc     0C 4E 85 F1 | 	sub	fp, #12
162c0     02 16 16 F2 | 	cmp	arg03, #2 wc
162c4     47 00 00 FF 
162c8     7C E4 85 F1 | 	sub	objptr, ##36476
162cc     0C 4E 05 C1 |  if_b	add	fp, #12
162d0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
162d4     0C 4E 85 C1 |  if_b	sub	fp, #12
162d8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
162dc     00 12 06 F6 | 	mov	arg01, #0
162e0     CC FF B0 FD | 	call	#__system___getiolock_0541
162e4     FD 12 02 F6 | 	mov	arg01, result1
162e8     60 A5 B0 FD | 	call	#__system___lockmem
162ec     84 01 00 FF 
162f0     F9 15 06 F6 | 	mov	arg02, ##@LR__5498
162f4     00 12 06 F6 | 	mov	arg01, #0
162f8     00 16 06 F6 | 	mov	arg03, #0
162fc     40 B2 B0 FD | 	call	#__system___basic_print_string
16300     00 12 06 F6 | 	mov	arg01, #0
16304     A8 FF B0 FD | 	call	#__system___getiolock_0541
16308     FD 00 68 FC | 	wrlong	#0, result1
1630c     27 12 06 F6 | 	mov	arg01, #39
16310     A8 6F B0 FD | 	call	#_printerror
16314     5C 02 90 FD | 	jmp	#LR__1833
16318                 | LR__1820
16318     80 50 BF FD | 	call	#_pop
1631c     FF 16 02 F6 | 	mov	arg03, result3
16320     A7 FA 61 FC | 	wrlong	result1, fp
16324     04 4E 05 F1 | 	add	fp, #4
16328     A7 FC 61 FC | 	wrlong	result2, fp
1632c     04 4E 05 F1 | 	add	fp, #4
16330     A7 16 62 FC | 	wrlong	arg03, fp
16334                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16334     08 4E 85 F1 | 	sub	fp, #8
16338     2B 16 0E F2 | 	cmp	arg03, #43 wz
1633c     18 00 90 5D |  if_ne	jmp	#LR__1821
16340     A7 12 02 FB | 	rdlong	arg01, fp
16344     CC 51 BF FD | 	call	#_convertstring
16348     A7 FA 61 FC | 	wrlong	result1, fp
1634c     08 4E 05 F1 | 	add	fp, #8
16350     A7 3E 68 FC | 	wrlong	#31, fp
16354     08 4E 85 F1 | 	sub	fp, #8
16358                 | LR__1821
16358                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
16358     08 4E 05 F1 | 	add	fp, #8
1635c     A7 16 02 FB | 	rdlong	arg03, fp
16360     08 4E 85 F1 | 	sub	fp, #8
16364     1F 16 0E F2 | 	cmp	arg03, #31 wz
16368     3C 00 90 AD |  if_e	jmp	#LR__1822
1636c     00 12 06 F6 | 	mov	arg01, #0
16370     3C FF B0 FD | 	call	#__system___getiolock_0541
16374     FD 12 02 F6 | 	mov	arg01, result1
16378     D0 A4 B0 FD | 	call	#__system___lockmem
1637c     84 01 00 FF 
16380     FF 15 06 F6 | 	mov	arg02, ##@LR__5499
16384     00 12 06 F6 | 	mov	arg01, #0
16388     00 16 06 F6 | 	mov	arg03, #0
1638c     B0 B1 B0 FD | 	call	#__system___basic_print_string
16390     00 12 06 F6 | 	mov	arg01, #0
16394     18 FF B0 FD | 	call	#__system___getiolock_0541
16398     FD 00 68 FC | 	wrlong	#0, result1
1639c     0F 12 06 F6 | 	mov	arg01, #15
163a0     18 6F B0 FD | 	call	#_printerror
163a4     CC 01 90 FD | 	jmp	#LR__1833
163a8                 | LR__1822
163a8                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
163a8     A7 12 02 FB | 	rdlong	arg01, fp
163ac     01 14 06 F6 | 	mov	arg02, #1
163b0     14 C5 B0 FD | 	call	#__system__Left_S
163b4     FD 12 02 F6 | 	mov	arg01, result1
163b8     85 01 00 FF 
163bc     05 14 06 F6 | 	mov	arg02, ##@LR__5500
163c0     B0 A4 B0 FD | 	call	#__system___string_cmp
163c4     00 FA 0D F2 | 	cmp	result1, #0 wz
163c8     48 00 90 5D |  if_ne	jmp	#LR__1825
163cc     85 01 00 FF 
163d0     07 1E 06 F6 | 	mov	local01, ##@LR__5501
163d4     A7 16 02 FB | 	rdlong	arg03, fp
163d8     0B 13 02 F6 | 	mov	arg01, arg03
163dc     09 21 02 F6 | 	mov	local02, arg01
163e0     97 06 48 FB | 	callpa	#(@LR__1824-@LR__1823)>>2,fcache_load_ptr_
163e4                 | LR__1823
163e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
163e8     01 20 06 51 |  if_ne	add	local02, #1
163ec     F4 FF 9F 5D |  if_ne	jmp	#LR__1823
163f0                 | LR__1824
163f0     09 21 82 F1 | 	sub	local02, arg01
163f4     10 15 02 F6 | 	mov	arg02, local02
163f8     01 14 86 F1 | 	sub	arg02, #1
163fc     0B 13 02 F6 | 	mov	arg01, arg03
16400     4C C5 B0 FD | 	call	#__system__Right_S
16404     FD 14 02 F6 | 	mov	arg02, result1
16408     0F 13 02 F6 | 	mov	arg01, local01
1640c     98 A4 B0 FD | 	call	#__system___string_concat
16410     A7 FA 61 FC | 	wrlong	result1, fp
16414                 | LR__1825
16414                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16414     A7 12 02 FB | 	rdlong	arg01, fp
16418     01 14 06 F6 | 	mov	arg02, #1
1641c     A8 C4 B0 FD | 	call	#__system__Left_S
16420     FD 12 02 F6 | 	mov	arg01, result1
16424     85 01 00 FF 
16428     0A 14 06 F6 | 	mov	arg02, ##@LR__5502
1642c     44 A4 B0 FD | 	call	#__system___string_cmp
16430     00 FA 0D F2 | 	cmp	result1, #0 wz
16434     48 00 90 5D |  if_ne	jmp	#LR__1828
16438     85 01 00 FF 
1643c     0C 1E 06 F6 | 	mov	local01, ##@LR__5503
16440     A7 16 02 FB | 	rdlong	arg03, fp
16444     0B 13 02 F6 | 	mov	arg01, arg03
16448     09 21 02 F6 | 	mov	local02, arg01
1644c     97 06 48 FB | 	callpa	#(@LR__1827-@LR__1826)>>2,fcache_load_ptr_
16450                 | LR__1826
16450     10 FB C9 FA | 	rdbyte	result1, local02 wz
16454     01 20 06 51 |  if_ne	add	local02, #1
16458     F4 FF 9F 5D |  if_ne	jmp	#LR__1826
1645c                 | LR__1827
1645c     09 21 82 F1 | 	sub	local02, arg01
16460     10 15 02 F6 | 	mov	arg02, local02
16464     01 14 86 F1 | 	sub	arg02, #1
16468     0B 13 02 F6 | 	mov	arg01, arg03
1646c     E0 C4 B0 FD | 	call	#__system__Right_S
16470     FD 14 02 F6 | 	mov	arg02, result1
16474     0F 13 02 F6 | 	mov	arg01, local01
16478     2C A4 B0 FD | 	call	#__system___string_concat
1647c     A7 FA 61 FC | 	wrlong	result1, fp
16480                 | LR__1828
16480     A7 12 02 FB | 	rdlong	arg01, fp
16484     84 D7 B0 FD | 	call	#__system____builtin_atof
16488     1C 4E 05 F1 | 	add	fp, #28
1648c     A7 FA 61 FC | 	wrlong	result1, fp
16490     1C 4E 85 F1 | 	sub	fp, #28
16494     A7 12 02 FB | 	rdlong	arg01, fp
16498     00 14 06 F6 | 	mov	arg02, #0
1649c     D8 D5 B0 FD | 	call	#__system____builtin_atoi
164a0     18 4E 05 F1 | 	add	fp, #24
164a4     A7 FA 61 FC | 	wrlong	result1, fp
164a8                 | ' fval=val(t1.result.sresult)
164a8                 | ' ival=val%(t1.result.sresult)
164a8                 | ' if fval=ival then
164a8     04 4E 05 F1 | 	add	fp, #4
164ac     A7 1E 02 FB | 	rdlong	local01, fp
164b0     1C 4E 85 F1 | 	sub	fp, #28
164b4     FD 12 52 F6 | 	abs	arg01, result1 wc
164b8     1F 22 C6 C9 |  if_b	decod	local03, #31
164bc     00 22 06 36 |  if_ae	mov	local03, #0
164c0     38 CB B0 FD | 	call	#__system___float_fromuns
164c4     11 FB 61 F5 | 	xor	result1, local03
164c8     FD 14 02 F6 | 	mov	arg02, result1
164cc     0F 13 02 F6 | 	mov	arg01, local01
164d0     01 16 06 F6 | 	mov	arg03, #1
164d4     5C D3 B0 FD | 	call	#__system___float_cmp
164d8     00 FA 0D F2 | 	cmp	result1, #0 wz
164dc     20 00 90 5D |  if_ne	jmp	#LR__1829
164e0     18 4E 05 F1 | 	add	fp, #24
164e4     A7 1E 02 FB | 	rdlong	local01, fp
164e8     18 4E 85 F1 | 	sub	fp, #24
164ec     A7 1E 62 FC | 	wrlong	local01, fp
164f0     08 4E 05 F1 | 	add	fp, #8
164f4     A7 38 68 FC | 	wrlong	#28, fp
164f8     08 4E 85 F1 | 	sub	fp, #8
164fc     6C 00 90 FD | 	jmp	#LR__1832
16500                 | LR__1829
16500                 | '   if fval=0 andalso ival<>0 then
16500     1C 4E 05 F1 | 	add	fp, #28
16504     A7 12 02 FB | 	rdlong	arg01, fp
16508     1C 4E 85 F1 | 	sub	fp, #28
1650c     00 14 06 F6 | 	mov	arg02, #0
16510     01 16 06 F6 | 	mov	arg03, #1
16514     1C D3 B0 FD | 	call	#__system___float_cmp
16518     00 FA 0D F2 | 	cmp	result1, #0 wz
1651c     30 00 90 5D |  if_ne	jmp	#LR__1830
16520     18 4E 05 F1 | 	add	fp, #24
16524     A7 1E 0A FB | 	rdlong	local01, fp wz
16528     18 4E 85 F1 | 	sub	fp, #24
1652c     20 00 90 AD |  if_e	jmp	#LR__1830
16530     18 4E 05 F1 | 	add	fp, #24
16534     A7 1E 02 FB | 	rdlong	local01, fp
16538     18 4E 85 F1 | 	sub	fp, #24
1653c     A7 1E 62 FC | 	wrlong	local01, fp
16540     08 4E 05 F1 | 	add	fp, #8
16544     A7 38 68 FC | 	wrlong	#28, fp
16548     08 4E 85 F1 | 	sub	fp, #8
1654c     1C 00 90 FD | 	jmp	#LR__1831
16550                 | LR__1830
16550     1C 4E 05 F1 | 	add	fp, #28
16554     A7 1E 02 FB | 	rdlong	local01, fp
16558     1C 4E 85 F1 | 	sub	fp, #28
1655c     A7 1E 62 FC | 	wrlong	local01, fp
16560     08 4E 05 F1 | 	add	fp, #8
16564     A7 3C 68 FC | 	wrlong	#30, fp
16568     08 4E 85 F1 | 	sub	fp, #8
1656c                 | LR__1831
1656c                 | LR__1832
1656c     A7 12 02 F6 | 	mov	arg01, fp
16570     C0 4E BF FD | 	call	#_push
16574                 | LR__1833
16574     A7 F0 03 F6 | 	mov	ptra, fp
16578     B2 00 A0 FD | 	call	#popregs_
1657c                 | _do_val_ret
1657c     2D 00 64 FD | 	ret
16580                 | 
16580                 | ' 
16580                 | ' ' ------------------ waitclock
16580                 | ' 
16580                 | ' sub do_waitclock
16580                 | _do_waitclock
16580     51 00 00 FF 
16584     A8 E5 05 F1 | 	add	objptr, ##41896
16588     F2 00 02 FB | 	rdlong	_var01, objptr
1658c                 | ' c=hkcnt
1658c                 | ' do: loop until hkcnt<>c
1658c                 | LR__1840
1658c     F2 02 02 FB | 	rdlong	_var02, objptr
16590     00 03 0A F2 | 	cmp	_var02, _var01 wz
16594     F4 FF 9F AD |  if_e	jmp	#LR__1840
16598     51 00 00 FF 
1659c     A8 E5 85 F1 | 	sub	objptr, ##41896
165a0                 | _do_waitclock_ret
165a0     2D 00 64 FD | 	ret
165a4                 | 
165a4                 | ' 
165a4                 | ' ' ------------------ waitms
165a4                 | ' 
165a4                 | ' sub do_waitms
165a4                 | _do_waitms
165a4     01 4A 05 F6 | 	mov	COUNT_, #1
165a8     A8 00 A0 FD | 	call	#pushregs_
165ac     18 F0 07 F1 | 	add	ptra, #24
165b0     E8 4D BF FD | 	call	#_pop
165b4     A7 FA 61 FC | 	wrlong	result1, fp
165b8     04 4E 05 F1 | 	add	fp, #4
165bc     A7 FC 61 FC | 	wrlong	result2, fp
165c0     04 4E 05 F1 | 	add	fp, #4
165c4     A7 FE 61 FC | 	wrlong	result3, fp
165c8     08 4E 85 F1 | 	sub	fp, #8
165cc     A7 12 02 F6 | 	mov	arg01, fp
165d0     AC 4F BF FD | 	call	#_converttoint
165d4     0C 4E 05 F1 | 	add	fp, #12
165d8     A7 FA 61 FC | 	wrlong	result1, fp
165dc                 | ' 
165dc                 | ' t1=pop()  
165dc                 | ' t=converttoint(t1)
165dc                 | ' if t<0 then return
165dc     0C 4E 85 F1 | 	sub	fp, #12
165e0     00 FA 55 F2 | 	cmps	result1, #0 wc
165e4     E4 00 90 CD |  if_b	jmp	#LR__1856
165e8                 | ' if t < 1000 then 
165e8     0C 4E 05 F1 | 	add	fp, #12
165ec     A7 12 02 FB | 	rdlong	arg01, fp
165f0     0C 4E 85 F1 | 	sub	fp, #12
165f4     01 00 00 FF 
165f8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
165fc     14 00 90 3D |  if_ae	jmp	#LR__1850
16600     0C 4E 05 F1 | 	add	fp, #12
16604     A7 12 02 FB | 	rdlong	arg01, fp
16608     0C 4E 85 F1 | 	sub	fp, #12
1660c     30 A5 B0 FD | 	call	#__system___waitms
16610     B8 00 90 FD | 	jmp	#LR__1855
16614                 | LR__1850
16614     10 4E 05 F1 | 	add	fp, #16
16618     A7 02 68 FC | 	wrlong	#1, fp
1661c     04 4E 85 F1 | 	sub	fp, #4
16620     A7 12 02 FB | 	rdlong	arg01, fp
16624     09 13 52 F6 | 	abs	arg01, arg01 wc
16628     01 00 00 FF 
1662c     E8 13 16 FD | 	qdiv	arg01, ##1000
16630                 | '   for i=1 to t/1000
16630     0C 4E 85 F1 | 	sub	fp, #12
16634     18 1E 62 FD | 	getqx	local01
16638     0F 1F 82 F6 | 	negc	local01, local01
1663c     01 1E 06 F1 | 	add	local01, #1
16640                 | LR__1851
16640     10 4E 05 F1 | 	add	fp, #16
16644     A7 12 02 FB | 	rdlong	arg01, fp
16648     10 4E 85 F1 | 	sub	fp, #16
1664c     0F 13 52 F2 | 	cmps	arg01, local01 wc
16650     54 00 90 3D |  if_ae	jmp	#LR__1854
16654     01 00 00 FF 
16658     E8 13 06 F6 | 	mov	arg01, ##1000
1665c     E0 A4 B0 FD | 	call	#__system___waitms
16660                 | '     waitms(1000)
16660                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
16660     E0 12 06 F6 | 	mov	arg01, #224
16664     34 99 B0 FD | 	call	#_usbnew_spin2_keystate
16668     00 FA 0D F2 | 	cmp	result1, #0 wz
1666c     10 00 90 5D |  if_ne	jmp	#LR__1852
16670     E4 12 06 F6 | 	mov	arg01, #228
16674     24 99 B0 FD | 	call	#_usbnew_spin2_keystate
16678     00 FA 0D F2 | 	cmp	result1, #0 wz
1667c     10 00 90 AD |  if_e	jmp	#LR__1853
16680                 | LR__1852
16680     06 12 06 F6 | 	mov	arg01, #6
16684     14 99 B0 FD | 	call	#_usbnew_spin2_keystate
16688     00 FA 0D F2 | 	cmp	result1, #0 wz
1668c     3C 00 90 5D |  if_ne	jmp	#LR__1856
16690                 | LR__1853
16690     10 4E 05 F1 | 	add	fp, #16
16694     A7 12 02 FB | 	rdlong	arg01, fp
16698     01 12 06 F1 | 	add	arg01, #1
1669c     A7 12 62 FC | 	wrlong	arg01, fp
166a0     10 4E 85 F1 | 	sub	fp, #16
166a4     98 FF 9F FD | 	jmp	#LR__1851
166a8                 | LR__1854
166a8     0C 4E 05 F1 | 	add	fp, #12
166ac     A7 1E 02 FB | 	rdlong	local01, fp
166b0     0F 1F 52 F6 | 	abs	local01, local01 wc
166b4     01 00 00 FF 
166b8     E8 1F 16 FD | 	qdiv	local01, ##1000
166bc     0C 4E 85 F1 | 	sub	fp, #12
166c0     19 1E 62 FD | 	getqy	local01
166c4     0F 13 82 F6 | 	negc	arg01, local01
166c8     74 A4 B0 FD | 	call	#__system___waitms
166cc                 | LR__1855
166cc                 | LR__1856
166cc     A7 F0 03 F6 | 	mov	ptra, fp
166d0     B2 00 A0 FD | 	call	#popregs_
166d4                 | _do_waitms_ret
166d4     2D 00 64 FD | 	ret
166d8                 | 
166d8                 | ' 
166d8                 | ' ' ------------------ waitvbl
166d8                 | ' 
166d8                 | ' sub do_waitvbl
166d8                 | _do_waitvbl
166d8     01 12 06 F6 | 	mov	arg01, #1
166dc     20 88 B0 FD | 	call	#_hg010b_spin2_waitvbl
166e0                 | _do_waitvbl_ret
166e0     2D 00 64 FD | 	ret
166e4                 | 
166e4                 | ' 
166e4                 | ' ' ------------------ wrpin
166e4                 | ' 
166e4                 | ' sub do_wrpin
166e4                 | _do_wrpin
166e4     01 4A 05 F6 | 	mov	COUNT_, #1
166e8     A8 00 A0 FD | 	call	#pushregs_
166ec     18 F0 07 F1 | 	add	ptra, #24
166f0     A8 4C BF FD | 	call	#_pop
166f4     FD 14 02 F6 | 	mov	arg02, result1
166f8     FE 12 02 F6 | 	mov	arg01, result2
166fc     FF 1E 02 F6 | 	mov	local01, result3
16700     A7 14 62 FC | 	wrlong	arg02, fp
16704     04 4E 05 F1 | 	add	fp, #4
16708     A7 12 62 FC | 	wrlong	arg01, fp
1670c     04 4E 05 F1 | 	add	fp, #4
16710     A7 1E 62 FC | 	wrlong	local01, fp
16714     08 4E 85 F1 | 	sub	fp, #8
16718     80 4C BF FD | 	call	#_pop
1671c     FF 1E 02 F6 | 	mov	local01, result3
16720     0C 4E 05 F1 | 	add	fp, #12
16724     A7 FA 61 FC | 	wrlong	result1, fp
16728     04 4E 05 F1 | 	add	fp, #4
1672c     A7 FC 61 FC | 	wrlong	result2, fp
16730     04 4E 05 F1 | 	add	fp, #4
16734     A7 1E 62 FC | 	wrlong	local01, fp
16738     08 4E 85 F1 | 	sub	fp, #8
1673c     A7 12 02 F6 | 	mov	arg01, fp
16740     0C 4E 85 F1 | 	sub	fp, #12
16744     38 4E BF FD | 	call	#_converttoint
16748     FD 1E 02 F6 | 	mov	local01, result1
1674c     A7 12 02 F6 | 	mov	arg01, fp
16750     2C 4E BF FD | 	call	#_converttoint
16754     0F FB 01 FC | 	wrpin	result1, local01
16758     A7 F0 03 F6 | 	mov	ptra, fp
1675c     B2 00 A0 FD | 	call	#popregs_
16760                 | _do_wrpin_ret
16760     2D 00 64 FD | 	ret
16764                 | 
16764                 | ' 
16764                 | ' ' ------------------ wxpin
16764                 | ' 
16764                 | ' sub do_wxpin
16764                 | _do_wxpin
16764     01 4A 05 F6 | 	mov	COUNT_, #1
16768     A8 00 A0 FD | 	call	#pushregs_
1676c     18 F0 07 F1 | 	add	ptra, #24
16770     28 4C BF FD | 	call	#_pop
16774     FD 14 02 F6 | 	mov	arg02, result1
16778     FE 12 02 F6 | 	mov	arg01, result2
1677c     FF 1E 02 F6 | 	mov	local01, result3
16780     A7 14 62 FC | 	wrlong	arg02, fp
16784     04 4E 05 F1 | 	add	fp, #4
16788     A7 12 62 FC | 	wrlong	arg01, fp
1678c     04 4E 05 F1 | 	add	fp, #4
16790     A7 1E 62 FC | 	wrlong	local01, fp
16794     08 4E 85 F1 | 	sub	fp, #8
16798     00 4C BF FD | 	call	#_pop
1679c     FF 1E 02 F6 | 	mov	local01, result3
167a0     0C 4E 05 F1 | 	add	fp, #12
167a4     A7 FA 61 FC | 	wrlong	result1, fp
167a8     04 4E 05 F1 | 	add	fp, #4
167ac     A7 FC 61 FC | 	wrlong	result2, fp
167b0     04 4E 05 F1 | 	add	fp, #4
167b4     A7 1E 62 FC | 	wrlong	local01, fp
167b8     08 4E 85 F1 | 	sub	fp, #8
167bc     A7 12 02 F6 | 	mov	arg01, fp
167c0     0C 4E 85 F1 | 	sub	fp, #12
167c4     B8 4D BF FD | 	call	#_converttoint
167c8     FD 1E 02 F6 | 	mov	local01, result1
167cc     A7 12 02 F6 | 	mov	arg01, fp
167d0     AC 4D BF FD | 	call	#_converttoint
167d4     0F FB 11 FC | 	wxpin	result1, local01
167d8     A7 F0 03 F6 | 	mov	ptra, fp
167dc     B2 00 A0 FD | 	call	#popregs_
167e0                 | _do_wxpin_ret
167e0     2D 00 64 FD | 	ret
167e4                 | 
167e4                 | ' 
167e4                 | ' ' ------------------ wypin
167e4                 | ' 
167e4                 | ' sub do_wypin
167e4                 | _do_wypin
167e4     01 4A 05 F6 | 	mov	COUNT_, #1
167e8     A8 00 A0 FD | 	call	#pushregs_
167ec     18 F0 07 F1 | 	add	ptra, #24
167f0     A8 4B BF FD | 	call	#_pop
167f4     FD 14 02 F6 | 	mov	arg02, result1
167f8     FE 12 02 F6 | 	mov	arg01, result2
167fc     FF 1E 02 F6 | 	mov	local01, result3
16800     A7 14 62 FC | 	wrlong	arg02, fp
16804     04 4E 05 F1 | 	add	fp, #4
16808     A7 12 62 FC | 	wrlong	arg01, fp
1680c     04 4E 05 F1 | 	add	fp, #4
16810     A7 1E 62 FC | 	wrlong	local01, fp
16814     08 4E 85 F1 | 	sub	fp, #8
16818     80 4B BF FD | 	call	#_pop
1681c     FF 1E 02 F6 | 	mov	local01, result3
16820     0C 4E 05 F1 | 	add	fp, #12
16824     A7 FA 61 FC | 	wrlong	result1, fp
16828     04 4E 05 F1 | 	add	fp, #4
1682c     A7 FC 61 FC | 	wrlong	result2, fp
16830     04 4E 05 F1 | 	add	fp, #4
16834     A7 1E 62 FC | 	wrlong	local01, fp
16838     08 4E 85 F1 | 	sub	fp, #8
1683c     A7 12 02 F6 | 	mov	arg01, fp
16840     0C 4E 85 F1 | 	sub	fp, #12
16844     38 4D BF FD | 	call	#_converttoint
16848     FD 1E 02 F6 | 	mov	local01, result1
1684c     A7 12 02 F6 | 	mov	arg01, fp
16850     2C 4D BF FD | 	call	#_converttoint
16854     0F FB 21 FC | 	wypin	result1, local01
16858     A7 F0 03 F6 | 	mov	ptra, fp
1685c     B2 00 A0 FD | 	call	#popregs_
16860                 | _do_wypin_ret
16860     2D 00 64 FD | 	ret
16864                 | 
16864                 | ' 
16864                 | ' 
16864                 | ' 
16864                 | ' 
16864                 | ' 
16864                 | ' 
16864                 | ' 
16864                 | ' 
16864                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16864                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
16864                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16864                 | ' 
16864                 | ' 
16864                 | ' '------------------ Assign
16864                 | ' 
16864                 | ' sub do_assign
16864                 | _do_assign
16864     05 4A 05 F6 | 	mov	COUNT_, #5
16868     A8 00 A0 FD | 	call	#pushregs_
1686c     44 F0 07 F1 | 	add	ptra, #68
16870     4A 00 00 FF 
16874     80 E4 05 F1 | 	add	objptr, ##38016
16878     F2 16 02 FB | 	rdlong	arg03, objptr
1687c     0B 15 02 F6 | 	mov	arg02, arg03
16880     01 14 66 F0 | 	shl	arg02, #1
16884     0B 15 02 F1 | 	add	arg02, arg03
16888     02 14 66 F0 | 	shl	arg02, #2
1688c     03 00 00 FF 
16890     04 E4 85 F1 | 	sub	objptr, ##1540
16894     F2 14 02 F1 | 	add	arg02, objptr
16898     0A 15 02 FB | 	rdlong	arg02, arg02
1689c     18 4E 05 F1 | 	add	fp, #24
168a0     A7 14 62 FC | 	wrlong	arg02, fp
168a4                 | ' 
168a4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
168a4                 | ' if variables(varnum).vartype<array_no_type then 
168a4     18 4E 85 F1 | 	sub	fp, #24
168a8     04 14 66 F0 | 	shl	arg02, #4
168ac     32 00 00 FF 
168b0     84 E4 85 F1 | 	sub	objptr, ##25732
168b4     F2 14 02 F1 | 	add	arg02, objptr
168b8     0C 14 06 F1 | 	add	arg02, #12
168bc     0A 17 02 FB | 	rdlong	arg03, arg02
168c0     00 17 16 F2 | 	cmp	arg03, #256 wc
168c4     14 00 00 FF 
168c8     F8 E5 85 F1 | 	sub	objptr, ##10744
168cc     18 01 90 3D |  if_ae	jmp	#LR__1860
168d0     C8 4A BF FD | 	call	#_pop
168d4     A7 FA 61 FC | 	wrlong	result1, fp
168d8     04 4E 05 F1 | 	add	fp, #4
168dc     A7 FC 61 FC | 	wrlong	result2, fp
168e0     04 4E 05 F1 | 	add	fp, #4
168e4     A7 FE 61 FC | 	wrlong	result3, fp
168e8     08 4E 85 F1 | 	sub	fp, #8
168ec     A7 16 02 FB | 	rdlong	arg03, fp
168f0     04 4E 05 F1 | 	add	fp, #4
168f4     A7 14 02 FB | 	rdlong	arg02, fp
168f8     14 4E 05 F1 | 	add	fp, #20
168fc     A7 12 02 FB | 	rdlong	arg01, fp
16900     04 12 66 F0 | 	shl	arg01, #4
16904     14 00 00 FF 
16908     F8 E5 05 F1 | 	add	objptr, ##10744
1690c     F2 12 02 F1 | 	add	arg01, objptr
16910     04 12 06 F1 | 	add	arg01, #4
16914     09 17 62 FC | 	wrlong	arg03, arg01
16918     A7 16 02 FB | 	rdlong	arg03, fp
1691c     04 16 66 F0 | 	shl	arg03, #4
16920     F2 16 02 F1 | 	add	arg03, objptr
16924     08 16 06 F1 | 	add	arg03, #8
16928     0B 15 62 FC | 	wrlong	arg02, arg03
1692c     A7 16 02 FB | 	rdlong	arg03, fp
16930     04 16 66 F0 | 	shl	arg03, #4
16934     F2 16 02 F1 | 	add	arg03, objptr
16938     10 4E 85 F1 | 	sub	fp, #16
1693c     A7 14 02 FB | 	rdlong	arg02, fp
16940     0C 16 06 F1 | 	add	arg03, #12
16944     0B 15 62 FC | 	wrlong	arg02, arg03
16948                 | '   t1=pop() 
16948                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
16948                 | '   if variables(varnum).vartype<>result_string2 then return
16948     10 4E 05 F1 | 	add	fp, #16
1694c     A7 16 02 FB | 	rdlong	arg03, fp
16950     18 4E 85 F1 | 	sub	fp, #24
16954     04 16 66 F0 | 	shl	arg03, #4
16958     F2 16 02 F1 | 	add	arg03, objptr
1695c     0C 16 06 F1 | 	add	arg03, #12
16960     0B 17 02 FB | 	rdlong	arg03, arg03
16964     2B 16 0E F2 | 	cmp	arg03, #43 wz
16968     14 00 00 FF 
1696c     F8 E5 85 F1 | 	sub	objptr, ##10744
16970     E4 04 90 5D |  if_ne	jmp	#LR__1883
16974     18 4E 05 F1 | 	add	fp, #24
16978     A7 16 02 FB | 	rdlong	arg03, fp
1697c     0B 1F 02 F6 | 	mov	local01, arg03
16980     04 1E 66 F0 | 	shl	local01, #4
16984     14 00 00 FF 
16988     F8 E5 05 F1 | 	add	objptr, ##10744
1698c     F2 1E 02 F1 | 	add	local01, objptr
16990     18 4E 85 F1 | 	sub	fp, #24
16994     04 16 66 F0 | 	shl	arg03, #4
16998     F2 16 02 F1 | 	add	arg03, objptr
1699c     04 16 06 F1 | 	add	arg03, #4
169a0     0B 13 02 FB | 	rdlong	arg01, arg03
169a4     14 00 00 FF 
169a8     F8 E5 85 F1 | 	sub	objptr, ##10744
169ac     64 4B BF FD | 	call	#_convertstring
169b0     04 1E 06 F1 | 	add	local01, #4
169b4     0F FB 61 FC | 	wrlong	result1, local01
169b8     18 4E 05 F1 | 	add	fp, #24
169bc     A7 1E 02 FB | 	rdlong	local01, fp
169c0     18 4E 85 F1 | 	sub	fp, #24
169c4     04 1E 66 F0 | 	shl	local01, #4
169c8     14 00 00 FF 
169cc     F8 E5 05 F1 | 	add	objptr, ##10744
169d0     F2 1E 02 F1 | 	add	local01, objptr
169d4     0C 1E 06 F1 | 	add	local01, #12
169d8     0F 3F 68 FC | 	wrlong	#31, local01
169dc                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
169dc                 | '   variables(varnum).vartype=result_string
169dc                 | '   return
169dc     14 00 00 FF 
169e0     F8 E5 85 F1 | 	sub	objptr, ##10744
169e4     70 04 90 FD | 	jmp	#LR__1883
169e8                 | LR__1860
169e8                 | ' for i=0 to 2 : arrid(i)=0 : next i
169e8     1C 4E 05 F1 | 	add	fp, #28
169ec     A7 00 68 FC | 	wrlong	#0, fp
169f0     97 16 48 FB | 	callpa	#(@LR__1862-@LR__1861)>>2,fcache_load_ptr_
169f4                 | LR__1861
169f4     A7 1E 02 FB | 	rdlong	local01, fp
169f8     02 1E 66 F0 | 	shl	local01, #2
169fc     18 4E 05 F1 | 	add	fp, #24
16a00     A7 1E 02 F1 | 	add	local01, fp
16a04     0F 01 68 FC | 	wrlong	#0, local01
16a08     18 4E 85 F1 | 	sub	fp, #24
16a0c     A7 1E 02 FB | 	rdlong	local01, fp
16a10     01 1E 06 F1 | 	add	local01, #1
16a14     A7 1E 62 FC | 	wrlong	local01, fp
16a18     03 1E 16 F2 | 	cmp	local01, #3 wc
16a1c     D4 FF 9F CD |  if_b	jmp	#LR__1861
16a20                 | LR__1862
16a20     4A 00 00 FF 
16a24     80 E4 05 F1 | 	add	objptr, ##38016
16a28     F2 16 02 FB | 	rdlong	arg03, objptr
16a2c     0B 1F 02 F6 | 	mov	local01, arg03
16a30     01 1E 66 F0 | 	shl	local01, #1
16a34     0B 1F 02 F1 | 	add	local01, arg03
16a38     02 1E 66 F0 | 	shl	local01, #2
16a3c     03 00 00 FF 
16a40     04 E4 85 F1 | 	sub	objptr, ##1540
16a44     F2 1E 02 F1 | 	add	local01, objptr
16a48     04 1E 06 F1 | 	add	local01, #4
16a4c     0F 21 02 FB | 	rdlong	local02, local01
16a50     04 4E 05 F1 | 	add	fp, #4
16a54     A7 20 62 FC | 	wrlong	local02, fp
16a58     20 4E 85 F1 | 	sub	fp, #32
16a5c     47 00 00 FF 
16a60     7C E4 85 F1 | 	sub	objptr, ##36476
16a64     34 49 BF FD | 	call	#_pop
16a68     A7 FA 61 FC | 	wrlong	result1, fp
16a6c     04 4E 05 F1 | 	add	fp, #4
16a70     A7 FC 61 FC | 	wrlong	result2, fp
16a74     04 4E 05 F1 | 	add	fp, #4
16a78     A7 FE 61 FC | 	wrlong	result3, fp
16a7c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
16a7c                 | ' t1=pop() ' var value
16a7c                 | ' if numpar>0 then
16a7c     18 4E 05 F1 | 	add	fp, #24
16a80     A7 22 02 FB | 	rdlong	local03, fp
16a84     20 4E 85 F1 | 	sub	fp, #32
16a88     01 22 16 F2 | 	cmp	local03, #1 wc
16a8c     78 00 90 CD |  if_b	jmp	#LR__1865
16a90                 | '   for i=numpar to 1 step -1
16a90     20 4E 05 F1 | 	add	fp, #32
16a94     A7 24 0A FB | 	rdlong	local04, fp wz
16a98     04 4E 85 F1 | 	sub	fp, #4
16a9c     A7 24 62 FC | 	wrlong	local04, fp
16aa0     1C 4E 85 F1 | 	sub	fp, #28
16aa4     60 00 90 AD |  if_e	jmp	#LR__1864
16aa8                 | LR__1863
16aa8     F0 48 BF FD | 	call	#_pop
16aac     0C 4E 05 F1 | 	add	fp, #12
16ab0     A7 FA 61 FC | 	wrlong	result1, fp
16ab4     04 4E 05 F1 | 	add	fp, #4
16ab8     A7 FC 61 FC | 	wrlong	result2, fp
16abc     04 4E 05 F1 | 	add	fp, #4
16ac0     A7 FE 61 FC | 	wrlong	result3, fp
16ac4     08 4E 05 F1 | 	add	fp, #8
16ac8     A7 22 02 FB | 	rdlong	local03, fp
16acc     01 22 86 F1 | 	sub	local03, #1
16ad0     02 22 66 F0 | 	shl	local03, #2
16ad4     18 4E 05 F1 | 	add	fp, #24
16ad8     A7 22 02 F1 | 	add	local03, fp
16adc     28 4E 85 F1 | 	sub	fp, #40
16ae0     A7 12 02 F6 | 	mov	arg01, fp
16ae4     0C 4E 85 F1 | 	sub	fp, #12
16ae8     94 4A BF FD | 	call	#_converttoint
16aec     11 FB 61 FC | 	wrlong	result1, local03
16af0     1C 4E 05 F1 | 	add	fp, #28
16af4     A7 24 02 FB | 	rdlong	local04, fp
16af8     01 24 8E F1 | 	sub	local04, #1 wz
16afc     A7 24 62 FC | 	wrlong	local04, fp
16b00     1C 4E 85 F1 | 	sub	fp, #28
16b04     A0 FF 9F 5D |  if_ne	jmp	#LR__1863
16b08                 | LR__1864
16b08                 | LR__1865
16b08     18 4E 05 F1 | 	add	fp, #24
16b0c     A7 1E 02 FB | 	rdlong	local01, fp
16b10     04 1E 66 F0 | 	shl	local01, #4
16b14     14 00 00 FF 
16b18     F8 E5 05 F1 | 	add	objptr, ##10744
16b1c     F2 1E 02 F1 | 	add	local01, objptr
16b20     04 1E 06 F1 | 	add	local01, #4
16b24     0F 13 02 FB | 	rdlong	arg01, local01
16b28     0C 4E 05 F1 | 	add	fp, #12
16b2c     A7 12 62 FC | 	wrlong	arg01, fp
16b30     24 4E 85 F1 | 	sub	fp, #36
16b34     14 00 00 FF 
16b38     F8 E5 85 F1 | 	sub	objptr, ##10744
16b3c     10 6A B0 FD | 	call	#_pslpeek
16b40     FD 24 32 F9 | 	getword	local04, result1, #0
16b44     28 4E 05 F1 | 	add	fp, #40
16b48     A7 24 62 FC | 	wrlong	local04, fp
16b4c     04 4E 85 F1 | 	sub	fp, #4
16b50     A7 12 02 FB | 	rdlong	arg01, fp
16b54     24 4E 85 F1 | 	sub	fp, #36
16b58     02 12 06 F1 | 	add	arg01, #2
16b5c     98 69 B0 FD | 	call	#_pspeek
16b60     FD FA E1 F8 | 	getbyte	result1, result1, #0
16b64     2C 4E 05 F1 | 	add	fp, #44
16b68     A7 FA 61 FC | 	wrlong	result1, fp
16b6c                 | ' esize=pspeek(arrptr+2)
16b6c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
16b6c     08 4E 85 F1 | 	sub	fp, #8
16b70     A7 12 02 FB | 	rdlong	arg01, fp
16b74     24 4E 85 F1 | 	sub	fp, #36
16b78     04 12 06 F1 | 	add	arg01, #4
16b7c     D0 69 B0 FD | 	call	#_pslpeek
16b80     FD 24 02 F6 | 	mov	local04, result1
16b84     34 4E 05 F1 | 	add	fp, #52
16b88     A7 1E 02 FB | 	rdlong	local01, fp
16b8c     34 4E 85 F1 | 	sub	fp, #52
16b90     12 1F 12 F2 | 	cmp	local01, local04 wc
16b94     54 00 90 3D |  if_ae	jmp	#LR__1866
16b98     24 4E 05 F1 | 	add	fp, #36
16b9c     A7 12 02 FB | 	rdlong	arg01, fp
16ba0     24 4E 85 F1 | 	sub	fp, #36
16ba4     08 12 06 F1 | 	add	arg01, #8
16ba8     A4 69 B0 FD | 	call	#_pslpeek
16bac     FD 1E 02 F6 | 	mov	local01, result1
16bb0     38 4E 05 F1 | 	add	fp, #56
16bb4     A7 24 02 FB | 	rdlong	local04, fp
16bb8     38 4E 85 F1 | 	sub	fp, #56
16bbc     0F 25 12 F2 | 	cmp	local04, local01 wc
16bc0     28 00 90 3D |  if_ae	jmp	#LR__1866
16bc4     24 4E 05 F1 | 	add	fp, #36
16bc8     A7 12 02 FB | 	rdlong	arg01, fp
16bcc     24 4E 85 F1 | 	sub	fp, #36
16bd0     0C 12 06 F1 | 	add	arg01, #12
16bd4     78 69 B0 FD | 	call	#_pslpeek
16bd8     3C 4E 05 F1 | 	add	fp, #60
16bdc     A7 24 02 FB | 	rdlong	local04, fp
16be0     3C 4E 85 F1 | 	sub	fp, #60
16be4     FD 24 12 F2 | 	cmp	local04, result1 wc
16be8     0C 00 90 CD |  if_b	jmp	#LR__1867
16bec                 | LR__1866
16bec     31 12 06 F6 | 	mov	arg01, #49
16bf0     C8 66 B0 FD | 	call	#_printerror
16bf4     60 02 90 FD | 	jmp	#LR__1883
16bf8                 | LR__1867
16bf8     24 4E 05 F1 | 	add	fp, #36
16bfc     A7 12 02 FB | 	rdlong	arg01, fp
16c00     09 25 02 F6 | 	mov	local04, arg01
16c04     10 24 06 F1 | 	add	local04, #16
16c08     24 4E 85 F1 | 	sub	fp, #36
16c0c     04 12 06 F1 | 	add	arg01, #4
16c10     3C 69 B0 FD | 	call	#_pslpeek
16c14     FD 1E 02 F6 | 	mov	local01, result1
16c18     38 4E 05 F1 | 	add	fp, #56
16c1c     A7 20 02 FB | 	rdlong	local02, fp
16c20     10 1F 02 FD | 	qmul	local01, local02
16c24     04 4E 85 F1 | 	sub	fp, #4
16c28     A7 22 02 FB | 	rdlong	local03, fp
16c2c     10 4E 85 F1 | 	sub	fp, #16
16c30     A7 12 02 FB | 	rdlong	arg01, fp
16c34     24 4E 85 F1 | 	sub	fp, #36
16c38     08 12 06 F1 | 	add	arg01, #8
16c3c     18 20 62 FD | 	getqx	local02
16c40     10 23 02 F1 | 	add	local03, local02
16c44     08 69 B0 FD | 	call	#_pslpeek
16c48     FD 20 02 F6 | 	mov	local02, result1
16c4c     24 4E 05 F1 | 	add	fp, #36
16c50     A7 12 02 FB | 	rdlong	arg01, fp
16c54     24 4E 85 F1 | 	sub	fp, #36
16c58     04 12 06 F1 | 	add	arg01, #4
16c5c     F0 68 B0 FD | 	call	#_pslpeek
16c60     FD 20 02 FD | 	qmul	local02, result1
16c64     3C 4E 05 F1 | 	add	fp, #60
16c68     A7 20 02 FB | 	rdlong	local02, fp
16c6c     18 1E 62 FD | 	getqx	local01
16c70     10 1F 02 FD | 	qmul	local01, local02
16c74     10 4E 85 F1 | 	sub	fp, #16
16c78     A7 20 02 FB | 	rdlong	local02, fp
16c7c     18 1E 62 FD | 	getqx	local01
16c80     0F 23 02 F1 | 	add	local03, local01
16c84     11 21 02 FD | 	qmul	local02, local03
16c88     04 4E 05 F1 | 	add	fp, #4
16c8c                 | ' 
16c8c                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
16c8c                 | ' select case arrtype
16c8c     18 22 62 FD | 	getqx	local03
16c90     11 25 02 F1 | 	add	local04, local03
16c94     A7 24 62 FC | 	wrlong	local04, fp
16c98     08 4E 85 F1 | 	sub	fp, #8
16c9c     A7 26 02 FB | 	rdlong	local05, fp
16ca0     28 4E 85 F1 | 	sub	fp, #40
16ca4     00 27 86 F1 | 	sub	local05, #256
16ca8     0C 26 26 F3 | 	fle	local05, #12
16cac     30 26 62 FD | 	jmprel	local05
16cb0                 | LR__1868
16cb0     30 00 90 FD | 	jmp	#LR__1869
16cb4     58 00 90 FD | 	jmp	#LR__1870
16cb8     6C 00 90 FD | 	jmp	#LR__1871
16cbc     80 00 90 FD | 	jmp	#LR__1872
16cc0     B0 00 90 FD | 	jmp	#LR__1873
16cc4     E0 00 90 FD | 	jmp	#LR__1874
16cc8     F4 00 90 FD | 	jmp	#LR__1875
16ccc     08 01 90 FD | 	jmp	#LR__1876
16cd0     1C 01 90 FD | 	jmp	#LR__1877
16cd4     30 01 90 FD | 	jmp	#LR__1878
16cd8     44 01 90 FD | 	jmp	#LR__1879
16cdc     58 01 90 FD | 	jmp	#LR__1880
16ce0     6C 01 90 FD | 	jmp	#LR__1881
16ce4                 | LR__1869
16ce4     A7 12 02 F6 | 	mov	arg01, fp
16ce8     30 4E 05 F1 | 	add	fp, #48
16cec     A7 14 02 FB | 	rdlong	arg02, fp
16cf0     30 4E 85 F1 | 	sub	fp, #48
16cf4     0C 16 06 F6 | 	mov	arg03, #12
16cf8     0B 00 00 FF 
16cfc     CC E4 05 F1 | 	add	objptr, ##5836
16d00     A4 8F B0 FD | 	call	#_psram_spin2_write
16d04     0B 00 00 FF 
16d08     CC E4 85 F1 | 	sub	objptr, ##5836
16d0c     48 01 90 FD | 	jmp	#LR__1882
16d10                 | LR__1870
16d10     30 4E 05 F1 | 	add	fp, #48
16d14     A7 12 02 FB | 	rdlong	arg01, fp
16d18     30 4E 85 F1 | 	sub	fp, #48
16d1c     A7 14 02 FB | 	rdlong	arg02, fp
16d20     8C 67 B0 FD | 	call	#_pspoke
16d24     30 01 90 FD | 	jmp	#LR__1882
16d28                 | LR__1871
16d28     30 4E 05 F1 | 	add	fp, #48
16d2c     A7 12 02 FB | 	rdlong	arg01, fp
16d30     30 4E 85 F1 | 	sub	fp, #48
16d34     A7 14 02 FB | 	rdlong	arg02, fp
16d38     74 67 B0 FD | 	call	#_pspoke
16d3c     18 01 90 FD | 	jmp	#LR__1882
16d40                 | LR__1872
16d40     30 4E 05 F1 | 	add	fp, #48
16d44     A7 12 02 FB | 	rdlong	arg01, fp
16d48     30 4E 85 F1 | 	sub	fp, #48
16d4c     A7 14 02 FB | 	rdlong	arg02, fp
16d50     5C 67 B0 FD | 	call	#_pspoke
16d54     30 4E 05 F1 | 	add	fp, #48
16d58     A7 12 02 FB | 	rdlong	arg01, fp
16d5c     30 4E 85 F1 | 	sub	fp, #48
16d60     01 12 06 F1 | 	add	arg01, #1
16d64     A7 14 02 FB | 	rdlong	arg02, fp
16d68     08 14 46 F0 | 	shr	arg02, #8
16d6c     40 67 B0 FD | 	call	#_pspoke
16d70     E4 00 90 FD | 	jmp	#LR__1882
16d74                 | LR__1873
16d74     30 4E 05 F1 | 	add	fp, #48
16d78     A7 12 02 FB | 	rdlong	arg01, fp
16d7c     30 4E 85 F1 | 	sub	fp, #48
16d80     A7 14 02 FB | 	rdlong	arg02, fp
16d84     28 67 B0 FD | 	call	#_pspoke
16d88     30 4E 05 F1 | 	add	fp, #48
16d8c     A7 12 02 FB | 	rdlong	arg01, fp
16d90     30 4E 85 F1 | 	sub	fp, #48
16d94     01 12 06 F1 | 	add	arg01, #1
16d98     A7 14 02 FB | 	rdlong	arg02, fp
16d9c     08 14 46 F0 | 	shr	arg02, #8
16da0     0C 67 B0 FD | 	call	#_pspoke
16da4     B0 00 90 FD | 	jmp	#LR__1882
16da8                 | LR__1874
16da8     30 4E 05 F1 | 	add	fp, #48
16dac     A7 12 02 FB | 	rdlong	arg01, fp
16db0     30 4E 85 F1 | 	sub	fp, #48
16db4     A7 14 02 FB | 	rdlong	arg02, fp
16db8     64 66 B0 FD | 	call	#_pslpoke
16dbc     98 00 90 FD | 	jmp	#LR__1882
16dc0                 | LR__1875
16dc0     30 4E 05 F1 | 	add	fp, #48
16dc4     A7 12 02 FB | 	rdlong	arg01, fp
16dc8     30 4E 85 F1 | 	sub	fp, #48
16dcc     A7 14 02 FB | 	rdlong	arg02, fp
16dd0     4C 66 B0 FD | 	call	#_pslpoke
16dd4     80 00 90 FD | 	jmp	#LR__1882
16dd8                 | LR__1876
16dd8     30 4E 05 F1 | 	add	fp, #48
16ddc     A7 12 02 FB | 	rdlong	arg01, fp
16de0     30 4E 85 F1 | 	sub	fp, #48
16de4     A7 14 02 FB | 	rdlong	arg02, fp
16de8     34 66 B0 FD | 	call	#_pslpoke
16dec     68 00 90 FD | 	jmp	#LR__1882
16df0                 | LR__1877
16df0     30 4E 05 F1 | 	add	fp, #48
16df4     A7 12 02 FB | 	rdlong	arg01, fp
16df8     30 4E 85 F1 | 	sub	fp, #48
16dfc     A7 14 02 FB | 	rdlong	arg02, fp
16e00     1C 66 B0 FD | 	call	#_pslpoke
16e04     50 00 90 FD | 	jmp	#LR__1882
16e08                 | LR__1878
16e08     30 4E 05 F1 | 	add	fp, #48
16e0c     A7 12 02 FB | 	rdlong	arg01, fp
16e10     30 4E 85 F1 | 	sub	fp, #48
16e14     A7 14 02 FB | 	rdlong	arg02, fp
16e18     04 66 B0 FD | 	call	#_pslpoke
16e1c     38 00 90 FD | 	jmp	#LR__1882
16e20                 | LR__1879
16e20     30 4E 05 F1 | 	add	fp, #48
16e24     A7 12 02 FB | 	rdlong	arg01, fp
16e28     30 4E 85 F1 | 	sub	fp, #48
16e2c     A7 14 02 FB | 	rdlong	arg02, fp
16e30     EC 65 B0 FD | 	call	#_pslpoke
16e34     20 00 90 FD | 	jmp	#LR__1882
16e38                 | LR__1880
16e38     30 4E 05 F1 | 	add	fp, #48
16e3c     A7 12 02 FB | 	rdlong	arg01, fp
16e40     30 4E 85 F1 | 	sub	fp, #48
16e44     A7 14 02 FB | 	rdlong	arg02, fp
16e48     D4 65 B0 FD | 	call	#_pslpoke
16e4c     08 00 90 FD | 	jmp	#LR__1882
16e50                 | LR__1881
16e50     32 12 06 F6 | 	mov	arg01, #50
16e54     64 64 B0 FD | 	call	#_printerror
16e58                 | LR__1882
16e58                 | LR__1883
16e58     A7 F0 03 F6 | 	mov	ptra, fp
16e5c     B2 00 A0 FD | 	call	#popregs_
16e60                 | _do_assign_ret
16e60     2D 00 64 FD | 	ret
16e64                 | 
16e64                 | ' 
16e64                 | ' 
16e64                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
16e64                 | ' 
16e64                 | ' sub do_getvar
16e64                 | _do_getvar
16e64     04 4A 05 F6 | 	mov	COUNT_, #4
16e68     A8 00 A0 FD | 	call	#pushregs_
16e6c     3C F0 07 F1 | 	add	ptra, #60
16e70                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
16e70     4A 00 00 FF 
16e74     80 E4 05 F1 | 	add	objptr, ##38016
16e78     F2 1E 02 FB | 	rdlong	local01, objptr
16e7c     0F 17 02 F6 | 	mov	arg03, local01
16e80     01 16 66 F0 | 	shl	arg03, #1
16e84     0F 17 02 F1 | 	add	arg03, local01
16e88     02 16 66 F0 | 	shl	arg03, #2
16e8c     03 00 00 FF 
16e90     04 E4 85 F1 | 	sub	objptr, ##1540
16e94     F2 16 02 F1 | 	add	arg03, objptr
16e98     04 16 06 F1 | 	add	arg03, #4
16e9c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
16ea0     47 00 00 FF 
16ea4     7C E4 85 F1 | 	sub	objptr, ##36476
16ea8     C4 00 90 5D |  if_ne	jmp	#LR__1891
16eac     4A 00 00 FF 
16eb0     80 E4 05 F1 | 	add	objptr, ##38016
16eb4     F2 1E 02 FB | 	rdlong	local01, objptr
16eb8     0F 13 02 F6 | 	mov	arg01, local01
16ebc     01 12 66 F0 | 	shl	arg01, #1
16ec0     0F 13 02 F1 | 	add	arg01, local01
16ec4     02 12 66 F0 | 	shl	arg01, #2
16ec8     03 00 00 FF 
16ecc     04 E4 85 F1 | 	sub	objptr, ##1540
16ed0     F2 12 02 F1 | 	add	arg01, objptr
16ed4     09 1F 02 FB | 	rdlong	local01, arg01
16ed8     04 1E 66 F0 | 	shl	local01, #4
16edc     32 00 00 FF 
16ee0     84 E4 85 F1 | 	sub	objptr, ##25732
16ee4     F2 1E 02 F1 | 	add	local01, objptr
16ee8     04 1E 06 F1 | 	add	local01, #4
16eec     0F 13 02 FB | 	rdlong	arg01, local01
16ef0     04 1E 06 F1 | 	add	local01, #4
16ef4     0F 1F 02 FB | 	rdlong	local01, local01
16ef8     A7 12 62 FC | 	wrlong	arg01, fp
16efc     04 4E 05 F1 | 	add	fp, #4
16f00     A7 1E 62 FC | 	wrlong	local01, fp
16f04     35 00 00 FF 
16f08     88 E4 05 F1 | 	add	objptr, ##27272
16f0c     F2 1E 02 FB | 	rdlong	local01, objptr
16f10     0F 13 02 F6 | 	mov	arg01, local01
16f14     01 12 66 F0 | 	shl	arg01, #1
16f18     0F 13 02 F1 | 	add	arg01, local01
16f1c     02 12 66 F0 | 	shl	arg01, #2
16f20     03 00 00 FF 
16f24     04 E4 85 F1 | 	sub	objptr, ##1540
16f28     F2 12 02 F1 | 	add	arg01, objptr
16f2c     09 1F 02 FB | 	rdlong	local01, arg01
16f30     04 1E 66 F0 | 	shl	local01, #4
16f34     32 00 00 FF 
16f38     84 E4 85 F1 | 	sub	objptr, ##25732
16f3c     F2 1E 02 F1 | 	add	local01, objptr
16f40     0C 1E 06 F1 | 	add	local01, #12
16f44     0F 1F 02 FB | 	rdlong	local01, local01
16f48     04 4E 05 F1 | 	add	fp, #4
16f4c     A7 1E 62 FC | 	wrlong	local01, fp
16f50                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
16f50                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
16f50                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
16f50     08 4E 85 F1 | 	sub	fp, #8
16f54     00 1F 16 F2 | 	cmp	local01, #256 wc
16f58     14 00 00 FF 
16f5c     F8 E5 85 F1 | 	sub	objptr, ##10744
16f60     0C 00 90 3D |  if_ae	jmp	#LR__1890
16f64     A7 12 02 F6 | 	mov	arg01, fp
16f68     C8 44 BF FD | 	call	#_push
16f6c     A0 04 90 FD | 	jmp	#LR__1912
16f70                 | LR__1890
16f70                 | LR__1891
16f70     4A 00 00 FF 
16f74     80 E4 05 F1 | 	add	objptr, ##38016
16f78     F2 16 02 FB | 	rdlong	arg03, objptr
16f7c     0B 15 02 F6 | 	mov	arg02, arg03
16f80     01 14 66 F0 | 	shl	arg02, #1
16f84     0B 15 02 F1 | 	add	arg02, arg03
16f88     02 14 66 F0 | 	shl	arg02, #2
16f8c     03 00 00 FF 
16f90     04 E4 85 F1 | 	sub	objptr, ##1540
16f94     F2 14 02 F1 | 	add	arg02, objptr
16f98     0A 17 02 FB | 	rdlong	arg03, arg02
16f9c     04 16 66 F0 | 	shl	arg03, #4
16fa0     32 00 00 FF 
16fa4     84 E4 85 F1 | 	sub	objptr, ##25732
16fa8     F2 16 02 F1 | 	add	arg03, objptr
16fac     04 16 06 F1 | 	add	arg03, #4
16fb0     0B 13 02 FB | 	rdlong	arg01, arg03
16fb4     0C 4E 05 F1 | 	add	fp, #12
16fb8     A7 12 62 FC | 	wrlong	arg01, fp
16fbc     0C 4E 85 F1 | 	sub	fp, #12
16fc0     14 00 00 FF 
16fc4     F8 E5 85 F1 | 	sub	objptr, ##10744
16fc8     84 65 B0 FD | 	call	#_pslpeek
16fcc     FD FA 31 F9 | 	getword	result1, result1, #0
16fd0     10 4E 05 F1 | 	add	fp, #16
16fd4     A7 FA 61 FC | 	wrlong	result1, fp
16fd8     4A 00 00 FF 
16fdc     80 E4 05 F1 | 	add	objptr, ##38016
16fe0     F2 16 02 FB | 	rdlong	arg03, objptr
16fe4     0B 15 02 F6 | 	mov	arg02, arg03
16fe8     01 14 66 F0 | 	shl	arg02, #1
16fec     0B 15 02 F1 | 	add	arg02, arg03
16ff0     02 14 66 F0 | 	shl	arg02, #2
16ff4     03 00 00 FF 
16ff8     04 E4 85 F1 | 	sub	objptr, ##1540
16ffc     F2 14 02 F1 | 	add	arg02, objptr
17000     04 14 06 F1 | 	add	arg02, #4
17004     0A 17 02 FB | 	rdlong	arg03, arg02
17008     04 4E 05 F1 | 	add	fp, #4
1700c     A7 16 62 FC | 	wrlong	arg03, fp
17010     08 4E 85 F1 | 	sub	fp, #8
17014     A7 12 02 FB | 	rdlong	arg01, fp
17018     0C 4E 85 F1 | 	sub	fp, #12
1701c     02 12 06 F1 | 	add	arg01, #2
17020     47 00 00 FF 
17024     7C E4 85 F1 | 	sub	objptr, ##36476
17028     CC 64 B0 FD | 	call	#_pspeek
1702c     FD FA E1 F8 | 	getbyte	result1, result1, #0
17030     18 4E 05 F1 | 	add	fp, #24
17034     A7 FA 61 FC | 	wrlong	result1, fp
17038     0C 4E 85 F1 | 	sub	fp, #12
1703c     A7 12 02 FB | 	rdlong	arg01, fp
17040     0C 4E 85 F1 | 	sub	fp, #12
17044     04 12 06 F1 | 	add	arg01, #4
17048     04 65 B0 FD | 	call	#_pslpeek
1704c     1C 4E 05 F1 | 	add	fp, #28
17050     A7 FA 61 FC | 	wrlong	result1, fp
17054     10 4E 85 F1 | 	sub	fp, #16
17058     A7 12 02 FB | 	rdlong	arg01, fp
1705c     0C 4E 85 F1 | 	sub	fp, #12
17060     08 12 06 F1 | 	add	arg01, #8
17064     E8 64 B0 FD | 	call	#_pslpeek
17068     20 4E 05 F1 | 	add	fp, #32
1706c     A7 FA 61 FC | 	wrlong	result1, fp
17070     14 4E 85 F1 | 	sub	fp, #20
17074     A7 12 02 FB | 	rdlong	arg01, fp
17078     0C 4E 85 F1 | 	sub	fp, #12
1707c     0C 12 06 F1 | 	add	arg01, #12
17080     CC 64 B0 FD | 	call	#_pslpeek
17084     24 4E 05 F1 | 	add	fp, #36
17088     A7 FA 61 FC | 	wrlong	result1, fp
1708c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1708c                 | ' esize=pspeek(arrptr+2)
1708c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1708c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1708c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1708c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1708c     10 4E 85 F1 | 	sub	fp, #16
17090     A7 16 02 FB | 	rdlong	arg03, fp
17094     14 4E 85 F1 | 	sub	fp, #20
17098     03 16 16 F2 | 	cmp	arg03, #3 wc
1709c     38 00 90 CD |  if_b	jmp	#LR__1892
170a0     F8 42 BF FD | 	call	#_pop
170a4     FF 16 02 F6 | 	mov	arg03, result3
170a8     A7 FA 61 FC | 	wrlong	result1, fp
170ac     04 4E 05 F1 | 	add	fp, #4
170b0     A7 FC 61 FC | 	wrlong	result2, fp
170b4     04 4E 05 F1 | 	add	fp, #4
170b8     A7 16 62 FC | 	wrlong	arg03, fp
170bc     08 4E 85 F1 | 	sub	fp, #8
170c0     A7 12 02 F6 | 	mov	arg01, fp
170c4     B8 44 BF FD | 	call	#_converttoint
170c8     30 4E 05 F1 | 	add	fp, #48
170cc     A7 FA 61 FC | 	wrlong	result1, fp
170d0     30 4E 85 F1 | 	sub	fp, #48
170d4     0C 00 90 FD | 	jmp	#LR__1893
170d8                 | LR__1892
170d8     30 4E 05 F1 | 	add	fp, #48
170dc     A7 00 68 FC | 	wrlong	#0, fp
170e0     30 4E 85 F1 | 	sub	fp, #48
170e4                 | LR__1893
170e4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
170e4     14 4E 05 F1 | 	add	fp, #20
170e8     A7 16 02 FB | 	rdlong	arg03, fp
170ec     14 4E 85 F1 | 	sub	fp, #20
170f0     02 16 16 F2 | 	cmp	arg03, #2 wc
170f4     38 00 90 CD |  if_b	jmp	#LR__1894
170f8     A0 42 BF FD | 	call	#_pop
170fc     FF 16 02 F6 | 	mov	arg03, result3
17100     A7 FA 61 FC | 	wrlong	result1, fp
17104     04 4E 05 F1 | 	add	fp, #4
17108     A7 FC 61 FC | 	wrlong	result2, fp
1710c     04 4E 05 F1 | 	add	fp, #4
17110     A7 16 62 FC | 	wrlong	arg03, fp
17114     08 4E 85 F1 | 	sub	fp, #8
17118     A7 12 02 F6 | 	mov	arg01, fp
1711c     60 44 BF FD | 	call	#_converttoint
17120     2C 4E 05 F1 | 	add	fp, #44
17124     A7 FA 61 FC | 	wrlong	result1, fp
17128     2C 4E 85 F1 | 	sub	fp, #44
1712c     0C 00 90 FD | 	jmp	#LR__1895
17130                 | LR__1894
17130     2C 4E 05 F1 | 	add	fp, #44
17134     A7 00 68 FC | 	wrlong	#0, fp
17138     2C 4E 85 F1 | 	sub	fp, #44
1713c                 | LR__1895
1713c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1713c     14 4E 05 F1 | 	add	fp, #20
17140     A7 16 02 FB | 	rdlong	arg03, fp
17144     14 4E 85 F1 | 	sub	fp, #20
17148     01 16 16 F2 | 	cmp	arg03, #1 wc
1714c     38 00 90 CD |  if_b	jmp	#LR__1896
17150     48 42 BF FD | 	call	#_pop
17154     FF 16 02 F6 | 	mov	arg03, result3
17158     A7 FA 61 FC | 	wrlong	result1, fp
1715c     04 4E 05 F1 | 	add	fp, #4
17160     A7 FC 61 FC | 	wrlong	result2, fp
17164     04 4E 05 F1 | 	add	fp, #4
17168     A7 16 62 FC | 	wrlong	arg03, fp
1716c     08 4E 85 F1 | 	sub	fp, #8
17170     A7 12 02 F6 | 	mov	arg01, fp
17174     08 44 BF FD | 	call	#_converttoint
17178     28 4E 05 F1 | 	add	fp, #40
1717c     A7 FA 61 FC | 	wrlong	result1, fp
17180     28 4E 85 F1 | 	sub	fp, #40
17184     0C 00 90 FD | 	jmp	#LR__1897
17188                 | LR__1896
17188     28 4E 05 F1 | 	add	fp, #40
1718c     A7 00 68 FC | 	wrlong	#0, fp
17190     28 4E 85 F1 | 	sub	fp, #40
17194                 | LR__1897
17194     0C 4E 05 F1 | 	add	fp, #12
17198     A7 20 02 FB | 	rdlong	local02, fp
1719c     1C 4E 05 F1 | 	add	fp, #28
171a0     A7 22 02 FB | 	rdlong	local03, fp
171a4     04 4E 05 F1 | 	add	fp, #4
171a8     A7 FC 01 FB | 	rdlong	result2, fp
171ac     10 4E 85 F1 | 	sub	fp, #16
171b0     A7 FE 01 FB | 	rdlong	result3, fp
171b4     FF FC 01 FD | 	qmul	result2, result3
171b8     10 20 06 F1 | 	add	local02, #16
171bc     14 4E 05 F1 | 	add	fp, #20
171c0     A7 FC 01 FB | 	rdlong	result2, fp
171c4     18 FA 61 FD | 	getqx	result1
171c8     FF FC 01 FD | 	qmul	result2, result3
171cc     FD 22 02 F1 | 	add	local03, result1
171d0     10 4E 85 F1 | 	sub	fp, #16
171d4     A7 FE 01 FB | 	rdlong	result3, fp
171d8     18 FC 61 FD | 	getqx	result2
171dc     FF FC 01 FD | 	qmul	result2, result3
171e0     08 4E 85 F1 | 	sub	fp, #8
171e4     A7 FE 01 FB | 	rdlong	result3, fp
171e8     18 FC 61 FD | 	getqx	result2
171ec     FE 22 02 F1 | 	add	local03, result2
171f0     FF 22 02 FD | 	qmul	local03, result3
171f4     1C 4E 05 F1 | 	add	fp, #28
171f8                 | ' 
171f8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
171f8                 | ' 
171f8                 | ' select case vartype
171f8     18 FC 61 FD | 	getqx	result2
171fc     FE 20 02 F1 | 	add	local02, result2
17200     A7 20 62 FC | 	wrlong	local02, fp
17204     24 4E 85 F1 | 	sub	fp, #36
17208     A7 24 02 FB | 	rdlong	local04, fp
1720c     10 4E 85 F1 | 	sub	fp, #16
17210     00 25 86 F1 | 	sub	local04, #256
17214     0C 24 26 F3 | 	fle	local04, #12
17218     30 24 62 FD | 	jmprel	local04
1721c                 | LR__1898
1721c     30 00 90 FD | 	jmp	#LR__1899
17220     58 00 90 FD | 	jmp	#LR__1900
17224     8C 00 90 FD | 	jmp	#LR__1901
17228     AC 00 90 FD | 	jmp	#LR__1902
1722c     E8 00 90 FD | 	jmp	#LR__1903
17230     08 01 90 FD | 	jmp	#LR__1904
17234     24 01 90 FD | 	jmp	#LR__1905
17238     40 01 90 FD | 	jmp	#LR__1906
1723c     50 01 90 FD | 	jmp	#LR__1907
17240     60 01 90 FD | 	jmp	#LR__1908
17244     7C 01 90 FD | 	jmp	#LR__1909
17248     8C 01 90 FD | 	jmp	#LR__1910
1724c     B8 01 90 FD | 	jmp	#LR__1911
17250                 | LR__1899
17250     A7 12 02 F6 | 	mov	arg01, fp
17254     34 4E 05 F1 | 	add	fp, #52
17258     A7 14 02 FB | 	rdlong	arg02, fp
1725c     34 4E 85 F1 | 	sub	fp, #52
17260     0C 16 06 F6 | 	mov	arg03, #12
17264     0B 00 00 FF 
17268     CC E4 05 F1 | 	add	objptr, ##5836
1726c     9C 89 B0 FD | 	call	#_psram_spin2_read1
17270     0B 00 00 FF 
17274     CC E4 85 F1 | 	sub	objptr, ##5836
17278     8C 01 90 FD | 	jmp	#LR__1911
1727c                 | LR__1900
1727c     08 4E 05 F1 | 	add	fp, #8
17280     A7 38 68 FC | 	wrlong	#28, fp
17284     2C 4E 05 F1 | 	add	fp, #44
17288     A7 12 02 FB | 	rdlong	arg01, fp
1728c     34 4E 85 F1 | 	sub	fp, #52
17290     64 62 B0 FD | 	call	#_pspeek
17294     FD FA E1 F8 | 	getbyte	result1, result1, #0
17298     A7 FA 61 FC | 	wrlong	result1, fp
1729c     80 FA 15 F2 | 	cmp	result1, #128 wc
172a0     00 1F 66 36 |  if_ae	neg	local01, #256
172a4     A7 22 02 3B |  if_ae	rdlong	local03, fp
172a8     11 1F 42 35 |  if_ae	or	local01, local03
172ac     A7 1E 62 3C |  if_ae	wrlong	local01, fp
172b0     54 01 90 FD | 	jmp	#LR__1911
172b4                 | LR__1901
172b4     08 4E 05 F1 | 	add	fp, #8
172b8     A7 3A 68 FC | 	wrlong	#29, fp
172bc     2C 4E 05 F1 | 	add	fp, #44
172c0     A7 12 02 FB | 	rdlong	arg01, fp
172c4     34 4E 85 F1 | 	sub	fp, #52
172c8     2C 62 B0 FD | 	call	#_pspeek
172cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
172d0     A7 FA 61 FC | 	wrlong	result1, fp
172d4     30 01 90 FD | 	jmp	#LR__1911
172d8                 | LR__1902
172d8     08 4E 05 F1 | 	add	fp, #8
172dc     A7 38 68 FC | 	wrlong	#28, fp
172e0     2C 4E 05 F1 | 	add	fp, #44
172e4     A7 12 02 FB | 	rdlong	arg01, fp
172e8     34 4E 85 F1 | 	sub	fp, #52
172ec     60 62 B0 FD | 	call	#_pslpeek
172f0     FD FA 31 F9 | 	getword	result1, result1, #0
172f4     A7 FA 61 FC | 	wrlong	result1, fp
172f8     40 00 00 FF 
172fc     00 FA 15 F2 | 	cmp	result1, ##32768 wc
17300     FF 7F 00 3F 
17304     00 1F 06 36 |  if_ae	mov	local01, ##16776960
17308     A7 22 02 3B |  if_ae	rdlong	local03, fp
1730c     11 1F 42 35 |  if_ae	or	local01, local03
17310     A7 1E 62 3C |  if_ae	wrlong	local01, fp
17314     F0 00 90 FD | 	jmp	#LR__1911
17318                 | LR__1903
17318     08 4E 05 F1 | 	add	fp, #8
1731c     A7 3A 68 FC | 	wrlong	#29, fp
17320     2C 4E 05 F1 | 	add	fp, #44
17324     A7 12 02 FB | 	rdlong	arg01, fp
17328     34 4E 85 F1 | 	sub	fp, #52
1732c     20 62 B0 FD | 	call	#_pslpeek
17330     FD FA 31 F9 | 	getword	result1, result1, #0
17334     A7 FA 61 FC | 	wrlong	result1, fp
17338     CC 00 90 FD | 	jmp	#LR__1911
1733c                 | LR__1904
1733c     08 4E 05 F1 | 	add	fp, #8
17340     A7 38 68 FC | 	wrlong	#28, fp
17344     2C 4E 05 F1 | 	add	fp, #44
17348     A7 12 02 FB | 	rdlong	arg01, fp
1734c     34 4E 85 F1 | 	sub	fp, #52
17350     FC 61 B0 FD | 	call	#_pslpeek
17354     A7 FA 61 FC | 	wrlong	result1, fp
17358     AC 00 90 FD | 	jmp	#LR__1911
1735c                 | LR__1905
1735c     08 4E 05 F1 | 	add	fp, #8
17360     A7 3A 68 FC | 	wrlong	#29, fp
17364     2C 4E 05 F1 | 	add	fp, #44
17368     A7 12 02 FB | 	rdlong	arg01, fp
1736c     34 4E 85 F1 | 	sub	fp, #52
17370     DC 61 B0 FD | 	call	#_pslpeek
17374     A7 FA 61 FC | 	wrlong	result1, fp
17378     8C 00 90 FD | 	jmp	#LR__1911
1737c                 | LR__1906
1737c     08 4E 05 F1 | 	add	fp, #8
17380     A7 FE 69 FC | 	wrlong	#255, fp
17384     08 4E 85 F1 | 	sub	fp, #8
17388     A7 60 68 FC | 	wrlong	#48, fp
1738c     78 00 90 FD | 	jmp	#LR__1911
17390                 | LR__1907
17390     08 4E 05 F1 | 	add	fp, #8
17394     A7 FE 69 FC | 	wrlong	#255, fp
17398     08 4E 85 F1 | 	sub	fp, #8
1739c     A7 60 68 FC | 	wrlong	#48, fp
173a0     64 00 90 FD | 	jmp	#LR__1911
173a4                 | LR__1908
173a4     08 4E 05 F1 | 	add	fp, #8
173a8     A7 3C 68 FC | 	wrlong	#30, fp
173ac     2C 4E 05 F1 | 	add	fp, #44
173b0     A7 12 02 FB | 	rdlong	arg01, fp
173b4     34 4E 85 F1 | 	sub	fp, #52
173b8     94 61 B0 FD | 	call	#_pslpeek
173bc     A7 FA 61 FC | 	wrlong	result1, fp
173c0     44 00 90 FD | 	jmp	#LR__1911
173c4                 | LR__1909
173c4     08 4E 05 F1 | 	add	fp, #8
173c8     A7 FE 69 FC | 	wrlong	#255, fp
173cc     08 4E 85 F1 | 	sub	fp, #8
173d0     A7 60 68 FC | 	wrlong	#48, fp
173d4     30 00 90 FD | 	jmp	#LR__1911
173d8                 | LR__1910
173d8     08 4E 05 F1 | 	add	fp, #8
173dc     A7 3E 68 FC | 	wrlong	#31, fp
173e0     2C 4E 05 F1 | 	add	fp, #44
173e4     A7 12 02 FB | 	rdlong	arg01, fp
173e8     34 4E 85 F1 | 	sub	fp, #52
173ec     60 61 B0 FD | 	call	#_pslpeek
173f0     A7 FA 61 FC | 	wrlong	result1, fp
173f4     00 04 00 FF 
173f8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
173fc     08 4E 05 31 |  if_ae	add	fp, #8
17400     A7 56 68 3C |  if_ae	wrlong	#43, fp
17404     08 4E 85 31 |  if_ae	sub	fp, #8
17408                 | LR__1911
17408     A7 12 02 F6 | 	mov	arg01, fp
1740c     24 40 BF FD | 	call	#_push
17410                 | LR__1912
17410     A7 F0 03 F6 | 	mov	ptra, fp
17414     B2 00 A0 FD | 	call	#popregs_
17418                 | _do_getvar_ret
17418     2D 00 64 FD | 	ret
1741c                 | 
1741c                 | ' 
1741c                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1741c                 | ' 
1741c                 | ' sub do_getaddr
1741c                 | _do_getaddr
1741c     01 4A 05 F6 | 	mov	COUNT_, #1
17420     A8 00 A0 FD | 	call	#pushregs_
17424     38 F0 07 F1 | 	add	ptra, #56
17428                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
17428                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
17428     4A 00 00 FF 
1742c     80 E4 05 F1 | 	add	objptr, ##38016
17430     F2 12 02 FB | 	rdlong	arg01, objptr
17434     09 FD 01 F6 | 	mov	result2, arg01
17438     01 FC 65 F0 | 	shl	result2, #1
1743c     09 FD 01 F1 | 	add	result2, arg01
17440     02 FC 65 F0 | 	shl	result2, #2
17444     03 00 00 FF 
17448     04 E4 85 F1 | 	sub	objptr, ##1540
1744c     F2 FC 01 F1 | 	add	result2, objptr
17450     04 FC 05 F1 | 	add	result2, #4
17454     FE FC 09 FB | 	rdlong	result2, result2 wz
17458     47 00 00 FF 
1745c     7C E4 85 F1 | 	sub	objptr, ##36476
17460     C4 00 90 5D |  if_ne	jmp	#LR__1920
17464     4A 00 00 FF 
17468     80 E4 05 F1 | 	add	objptr, ##38016
1746c     F2 12 02 FB | 	rdlong	arg01, objptr
17470     09 FD 01 F6 | 	mov	result2, arg01
17474     01 FC 65 F0 | 	shl	result2, #1
17478     09 FD 01 F1 | 	add	result2, arg01
1747c     02 FC 65 F0 | 	shl	result2, #2
17480     03 00 00 FF 
17484     04 E4 85 F1 | 	sub	objptr, ##1540
17488     F2 FC 01 F1 | 	add	result2, objptr
1748c     FE 12 02 FB | 	rdlong	arg01, result2
17490     04 12 66 F0 | 	shl	arg01, #4
17494     32 00 00 FF 
17498     84 E4 85 F1 | 	sub	objptr, ##25732
1749c     F2 12 02 F1 | 	add	arg01, objptr
174a0     0C 12 06 F1 | 	add	arg01, #12
174a4     09 13 02 FB | 	rdlong	arg01, arg01
174a8     08 4E 05 F1 | 	add	fp, #8
174ac     A7 12 62 FC | 	wrlong	arg01, fp
174b0                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
174b0                 | '    if t1.result_type>=array_no_type then goto 2200
174b0     08 4E 85 F1 | 	sub	fp, #8
174b4     00 13 16 F2 | 	cmp	arg01, #256 wc
174b8     14 00 00 FF 
174bc     F8 E5 85 F1 | 	sub	objptr, ##10744
174c0     64 00 90 3D |  if_ae	jmp	#LR__1921
174c4     4A 00 00 FF 
174c8     80 E4 05 F1 | 	add	objptr, ##38016
174cc     F2 12 02 FB | 	rdlong	arg01, objptr
174d0     09 FB 01 F6 | 	mov	result1, arg01
174d4     01 FA 65 F0 | 	shl	result1, #1
174d8     09 FB 01 F1 | 	add	result1, arg01
174dc     02 FA 65 F0 | 	shl	result1, #2
174e0     03 00 00 FF 
174e4     04 E4 85 F1 | 	sub	objptr, ##1540
174e8     F2 FA 01 F1 | 	add	result1, objptr
174ec     FD FA 01 FB | 	rdlong	result1, result1
174f0     04 FA 65 F0 | 	shl	result1, #4
174f4     32 00 00 FF 
174f8     84 E4 85 F1 | 	sub	objptr, ##25732
174fc     F2 FA 01 F1 | 	add	result1, objptr
17500     04 FA 05 F1 | 	add	result1, #4
17504     14 00 00 FF 
17508     F8 E5 85 F1 | 	sub	objptr, ##10744
1750c     A7 FA 61 FC | 	wrlong	result1, fp
17510     08 4E 05 F1 | 	add	fp, #8
17514     A7 3A 68 FC | 	wrlong	#29, fp
17518     08 4E 85 F1 | 	sub	fp, #8
1751c     A7 12 02 F6 | 	mov	arg01, fp
17520     10 3F BF FD | 	call	#_push
17524                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
17524                 | '   t1.result_type=result_uint
17524                 | '   push t1 : return
17524     D8 02 90 FD | 	jmp	#LR__1930
17528                 | LR__1920
17528                 | LR__1921
17528     4A 00 00 FF 
1752c     80 E4 05 F1 | 	add	objptr, ##38016
17530     F2 FE 01 FB | 	rdlong	result3, objptr
17534     FF 12 02 F6 | 	mov	arg01, result3
17538     01 12 66 F0 | 	shl	arg01, #1
1753c     FF 12 02 F1 | 	add	arg01, result3
17540     02 12 66 F0 | 	shl	arg01, #2
17544     03 00 00 FF 
17548     04 E4 85 F1 | 	sub	objptr, ##1540
1754c     F2 12 02 F1 | 	add	arg01, objptr
17550     09 13 02 FB | 	rdlong	arg01, arg01
17554     04 12 66 F0 | 	shl	arg01, #4
17558     32 00 00 FF 
1755c     84 E4 85 F1 | 	sub	objptr, ##25732
17560     F2 12 02 F1 | 	add	arg01, objptr
17564     04 12 06 F1 | 	add	arg01, #4
17568     09 13 02 FB | 	rdlong	arg01, arg01
1756c     0C 4E 05 F1 | 	add	fp, #12
17570     A7 12 62 FC | 	wrlong	arg01, fp
17574     0C 4E 85 F1 | 	sub	fp, #12
17578     14 00 00 FF 
1757c     F8 E5 85 F1 | 	sub	objptr, ##10744
17580     CC 5F B0 FD | 	call	#_pslpeek
17584     FD FA 31 F9 | 	getword	result1, result1, #0
17588     10 4E 05 F1 | 	add	fp, #16
1758c     A7 FA 61 FC | 	wrlong	result1, fp
17590     4A 00 00 FF 
17594     80 E4 05 F1 | 	add	objptr, ##38016
17598     F2 FE 01 FB | 	rdlong	result3, objptr
1759c     FF 12 02 F6 | 	mov	arg01, result3
175a0     01 12 66 F0 | 	shl	arg01, #1
175a4     FF 12 02 F1 | 	add	arg01, result3
175a8     02 12 66 F0 | 	shl	arg01, #2
175ac     03 00 00 FF 
175b0     04 E4 85 F1 | 	sub	objptr, ##1540
175b4     F2 12 02 F1 | 	add	arg01, objptr
175b8     04 12 06 F1 | 	add	arg01, #4
175bc     09 13 02 FB | 	rdlong	arg01, arg01
175c0     04 4E 05 F1 | 	add	fp, #4
175c4     A7 12 62 FC | 	wrlong	arg01, fp
175c8     08 4E 85 F1 | 	sub	fp, #8
175cc     A7 12 02 FB | 	rdlong	arg01, fp
175d0     0C 4E 85 F1 | 	sub	fp, #12
175d4     02 12 06 F1 | 	add	arg01, #2
175d8     47 00 00 FF 
175dc     7C E4 85 F1 | 	sub	objptr, ##36476
175e0     14 5F B0 FD | 	call	#_pspeek
175e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
175e8     18 4E 05 F1 | 	add	fp, #24
175ec     A7 FA 61 FC | 	wrlong	result1, fp
175f0     0C 4E 85 F1 | 	sub	fp, #12
175f4     A7 12 02 FB | 	rdlong	arg01, fp
175f8     0C 4E 85 F1 | 	sub	fp, #12
175fc     04 12 06 F1 | 	add	arg01, #4
17600     4C 5F B0 FD | 	call	#_pslpeek
17604     1C 4E 05 F1 | 	add	fp, #28
17608     A7 FA 61 FC | 	wrlong	result1, fp
1760c     10 4E 85 F1 | 	sub	fp, #16
17610     A7 12 02 FB | 	rdlong	arg01, fp
17614     0C 4E 85 F1 | 	sub	fp, #12
17618     08 12 06 F1 | 	add	arg01, #8
1761c     30 5F B0 FD | 	call	#_pslpeek
17620     20 4E 05 F1 | 	add	fp, #32
17624     A7 FA 61 FC | 	wrlong	result1, fp
17628     14 4E 85 F1 | 	sub	fp, #20
1762c     A7 12 02 FB | 	rdlong	arg01, fp
17630     0C 4E 85 F1 | 	sub	fp, #12
17634     0C 12 06 F1 | 	add	arg01, #12
17638     14 5F B0 FD | 	call	#_pslpeek
1763c     24 4E 05 F1 | 	add	fp, #36
17640     A7 FA 61 FC | 	wrlong	result1, fp
17644                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
17644                 | ' esize=pspeek(arrptr+2)
17644                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
17644                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
17644                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
17644                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
17644     10 4E 85 F1 | 	sub	fp, #16
17648     A7 12 02 FB | 	rdlong	arg01, fp
1764c     14 4E 85 F1 | 	sub	fp, #20
17650     03 12 16 F2 | 	cmp	arg01, #3 wc
17654     34 00 90 CD |  if_b	jmp	#LR__1922
17658     40 3D BF FD | 	call	#_pop
1765c     A7 FA 61 FC | 	wrlong	result1, fp
17660     04 4E 05 F1 | 	add	fp, #4
17664     A7 FC 61 FC | 	wrlong	result2, fp
17668     04 4E 05 F1 | 	add	fp, #4
1766c     A7 FE 61 FC | 	wrlong	result3, fp
17670     08 4E 85 F1 | 	sub	fp, #8
17674     A7 12 02 F6 | 	mov	arg01, fp
17678     04 3F BF FD | 	call	#_converttoint
1767c     30 4E 05 F1 | 	add	fp, #48
17680     A7 FA 61 FC | 	wrlong	result1, fp
17684     30 4E 85 F1 | 	sub	fp, #48
17688     0C 00 90 FD | 	jmp	#LR__1923
1768c                 | LR__1922
1768c     30 4E 05 F1 | 	add	fp, #48
17690     A7 00 68 FC | 	wrlong	#0, fp
17694     30 4E 85 F1 | 	sub	fp, #48
17698                 | LR__1923
17698                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
17698     14 4E 05 F1 | 	add	fp, #20
1769c     A7 12 02 FB | 	rdlong	arg01, fp
176a0     14 4E 85 F1 | 	sub	fp, #20
176a4     02 12 16 F2 | 	cmp	arg01, #2 wc
176a8     34 00 90 CD |  if_b	jmp	#LR__1924
176ac     EC 3C BF FD | 	call	#_pop
176b0     A7 FA 61 FC | 	wrlong	result1, fp
176b4     04 4E 05 F1 | 	add	fp, #4
176b8     A7 FC 61 FC | 	wrlong	result2, fp
176bc     04 4E 05 F1 | 	add	fp, #4
176c0     A7 FE 61 FC | 	wrlong	result3, fp
176c4     08 4E 85 F1 | 	sub	fp, #8
176c8     A7 12 02 F6 | 	mov	arg01, fp
176cc     B0 3E BF FD | 	call	#_converttoint
176d0     2C 4E 05 F1 | 	add	fp, #44
176d4     A7 FA 61 FC | 	wrlong	result1, fp
176d8     2C 4E 85 F1 | 	sub	fp, #44
176dc     0C 00 90 FD | 	jmp	#LR__1925
176e0                 | LR__1924
176e0     2C 4E 05 F1 | 	add	fp, #44
176e4     A7 00 68 FC | 	wrlong	#0, fp
176e8     2C 4E 85 F1 | 	sub	fp, #44
176ec                 | LR__1925
176ec                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
176ec     14 4E 05 F1 | 	add	fp, #20
176f0     A7 12 02 FB | 	rdlong	arg01, fp
176f4     14 4E 85 F1 | 	sub	fp, #20
176f8     01 12 16 F2 | 	cmp	arg01, #1 wc
176fc     34 00 90 CD |  if_b	jmp	#LR__1926
17700     98 3C BF FD | 	call	#_pop
17704     A7 FA 61 FC | 	wrlong	result1, fp
17708     04 4E 05 F1 | 	add	fp, #4
1770c     A7 FC 61 FC | 	wrlong	result2, fp
17710     04 4E 05 F1 | 	add	fp, #4
17714     A7 FE 61 FC | 	wrlong	result3, fp
17718     08 4E 85 F1 | 	sub	fp, #8
1771c     A7 12 02 F6 | 	mov	arg01, fp
17720     5C 3E BF FD | 	call	#_converttoint
17724     28 4E 05 F1 | 	add	fp, #40
17728     A7 FA 61 FC | 	wrlong	result1, fp
1772c     28 4E 85 F1 | 	sub	fp, #40
17730     0C 00 90 FD | 	jmp	#LR__1927
17734                 | LR__1926
17734     28 4E 05 F1 | 	add	fp, #40
17738     A7 00 68 FC | 	wrlong	#0, fp
1773c     28 4E 85 F1 | 	sub	fp, #40
17740                 | LR__1927
17740                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
17740                 | ' if numpar>0 then
17740     14 4E 05 F1 | 	add	fp, #20
17744     A7 FE 01 FB | 	rdlong	result3, fp
17748     14 4E 85 F1 | 	sub	fp, #20
1774c     01 FE 15 F2 | 	cmp	result3, #1 wc
17750     8C 00 90 CD |  if_b	jmp	#LR__1928
17754     0C 4E 05 F1 | 	add	fp, #12
17758     A7 FC 01 FB | 	rdlong	result2, fp
1775c     1C 4E 05 F1 | 	add	fp, #28
17760     A7 FE 01 FB | 	rdlong	result3, fp
17764     04 4E 05 F1 | 	add	fp, #4
17768     A7 12 02 FB | 	rdlong	arg01, fp
1776c     10 4E 85 F1 | 	sub	fp, #16
17770     A7 FA 01 FB | 	rdlong	result1, fp
17774     FD 12 02 FD | 	qmul	arg01, result1
17778     10 FC 05 F1 | 	add	result2, #16
1777c     14 4E 05 F1 | 	add	fp, #20
17780     A7 1E 02 FB | 	rdlong	local01, fp
17784     18 12 62 FD | 	getqx	arg01
17788     FD 1E 02 FD | 	qmul	local01, result1
1778c     09 FF 01 F1 | 	add	result3, arg01
17790     10 4E 85 F1 | 	sub	fp, #16
17794     A7 1E 02 FB | 	rdlong	local01, fp
17798     18 FA 61 FD | 	getqx	result1
1779c     0F FB 01 FD | 	qmul	result1, local01
177a0     08 4E 85 F1 | 	sub	fp, #8
177a4     A7 1E 02 FB | 	rdlong	local01, fp
177a8     18 FA 61 FD | 	getqx	result1
177ac     FD FE 01 F1 | 	add	result3, result1
177b0     0F FF 01 FD | 	qmul	result3, local01
177b4     1C 4E 05 F1 | 	add	fp, #28
177b8     18 1E 62 FD | 	getqx	local01
177bc     0F FD 01 F1 | 	add	result2, local01
177c0     A7 FC 61 FC | 	wrlong	result2, fp
177c4     2C 4E 85 F1 | 	sub	fp, #44
177c8     A7 3A 68 FC | 	wrlong	#29, fp
177cc     2C 4E 05 F1 | 	add	fp, #44
177d0     A7 1E 02 FB | 	rdlong	local01, fp
177d4     34 4E 85 F1 | 	sub	fp, #52
177d8     A7 1E 62 FC | 	wrlong	local01, fp
177dc     18 00 90 FD | 	jmp	#LR__1929
177e0                 | LR__1928
177e0     08 4E 05 F1 | 	add	fp, #8
177e4     A7 3A 68 FC | 	wrlong	#29, fp
177e8     04 4E 05 F1 | 	add	fp, #4
177ec     A7 1E 02 FB | 	rdlong	local01, fp
177f0     0C 4E 85 F1 | 	sub	fp, #12
177f4     A7 1E 62 FC | 	wrlong	local01, fp
177f8                 | LR__1929
177f8     A7 12 02 F6 | 	mov	arg01, fp
177fc     34 3C BF FD | 	call	#_push
17800                 | LR__1930
17800     A7 F0 03 F6 | 	mov	ptra, fp
17804     B2 00 A0 FD | 	call	#popregs_
17808                 | _do_getaddr_ret
17808     2D 00 64 FD | 	ret
1780c                 | 
1780c                 | ' 
1780c                 | ' 
1780c                 | ' 
1780c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1780c                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1780c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1780c                 | ' 
1780c                 | ' '--------------------------------- AND 
1780c                 | ' 
1780c                 | ' sub do_and 
1780c                 | _do_and
1780c     03 4A 05 F6 | 	mov	COUNT_, #3
17810     A8 00 A0 FD | 	call	#pushregs_
17814     18 F0 07 F1 | 	add	ptra, #24
17818     80 3B BF FD | 	call	#_pop
1781c     FD 12 02 F6 | 	mov	arg01, result1
17820     FE 1E 02 F6 | 	mov	local01, result2
17824     FF 20 02 F6 | 	mov	local02, result3
17828     0C 4E 05 F1 | 	add	fp, #12
1782c     A7 12 62 FC | 	wrlong	arg01, fp
17830     04 4E 05 F1 | 	add	fp, #4
17834     A7 1E 62 FC | 	wrlong	local01, fp
17838     04 4E 05 F1 | 	add	fp, #4
1783c     A7 20 62 FC | 	wrlong	local02, fp
17840     14 4E 85 F1 | 	sub	fp, #20
17844     54 3B BF FD | 	call	#_pop
17848     FF 22 02 F6 | 	mov	local03, result3
1784c     A7 FA 61 FC | 	wrlong	result1, fp
17850     04 4E 05 F1 | 	add	fp, #4
17854     A7 FC 61 FC | 	wrlong	result2, fp
17858     04 4E 05 F1 | 	add	fp, #4
1785c     A7 22 62 FC | 	wrlong	local03, fp
17860                 | ' 
17860                 | ' t2=pop()
17860                 | ' t1=pop()
17860                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
17860     08 4E 85 F1 | 	sub	fp, #8
17864     1C 22 0E F2 | 	cmp	local03, #28 wz
17868     A7 22 02 AB |  if_e	rdlong	local03, fp
1786c     A7 22 62 AC |  if_e	wrlong	local03, fp
17870     08 4E 05 A1 |  if_e	add	fp, #8
17874     A7 3A 68 AC |  if_e	wrlong	#29, fp
17878     08 4E 85 A1 |  if_e	sub	fp, #8
1787c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1787c     14 4E 05 F1 | 	add	fp, #20
17880     A7 22 02 FB | 	rdlong	local03, fp
17884     14 4E 85 F1 | 	sub	fp, #20
17888     1C 22 0E F2 | 	cmp	local03, #28 wz
1788c     18 00 90 5D |  if_ne	jmp	#LR__1940
17890     0C 4E 05 F1 | 	add	fp, #12
17894     A7 22 02 FB | 	rdlong	local03, fp
17898     A7 22 62 FC | 	wrlong	local03, fp
1789c     08 4E 05 F1 | 	add	fp, #8
178a0     A7 3A 68 FC | 	wrlong	#29, fp
178a4     14 4E 85 F1 | 	sub	fp, #20
178a8                 | LR__1940
178a8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
178a8     08 4E 05 F1 | 	add	fp, #8
178ac     A7 22 02 FB | 	rdlong	local03, fp
178b0     08 4E 85 F1 | 	sub	fp, #8
178b4     1F 22 0E F2 | 	cmp	local03, #31 wz
178b8     14 4E 05 51 |  if_ne	add	fp, #20
178bc     A7 20 02 5B |  if_ne	rdlong	local02, fp
178c0     14 4E 85 51 |  if_ne	sub	fp, #20
178c4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
178c8     08 4E 05 51 |  if_ne	add	fp, #8
178cc     A7 22 02 5B |  if_ne	rdlong	local03, fp
178d0     08 4E 85 51 |  if_ne	sub	fp, #8
178d4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
178d8     14 4E 05 51 |  if_ne	add	fp, #20
178dc     14 4E 85 51 |  if_ne	sub	fp, #20
178e0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
178e4     A7 0C 68 AC |  if_e	wrlong	#6, fp
178e8     08 4E 05 A1 |  if_e	add	fp, #8
178ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
178f0     08 4E 85 A1 |  if_e	sub	fp, #8
178f4     18 00 90 AD |  if_e	jmp	#LR__1941
178f8     A7 22 02 FB | 	rdlong	local03, fp
178fc     0C 4E 05 F1 | 	add	fp, #12
17900     A7 1E 02 FB | 	rdlong	local01, fp
17904     0C 4E 85 F1 | 	sub	fp, #12
17908     0F 23 02 F5 | 	and	local03, local01
1790c     A7 22 62 FC | 	wrlong	local03, fp
17910                 | LR__1941
17910     A7 12 02 F6 | 	mov	arg01, fp
17914     1C 3B BF FD | 	call	#_push
17918     A7 F0 03 F6 | 	mov	ptra, fp
1791c     B2 00 A0 FD | 	call	#popregs_
17920                 | _do_and_ret
17920     2D 00 64 FD | 	ret
17924                 | 
17924                 | ' 
17924                 | ' '--------------------------------- DIV (integer divide)
17924                 | ' 
17924                 | ' sub do_div 
17924                 | _do_div
17924     01 4A 05 F6 | 	mov	COUNT_, #1
17928     A8 00 A0 FD | 	call	#pushregs_
1792c     18 F0 07 F1 | 	add	ptra, #24
17930     68 3A BF FD | 	call	#_pop
17934     FD 7E 02 F6 | 	mov	muldivb_, result1
17938     FE 7C 02 F6 | 	mov	muldiva_, result2
1793c     FF 1E 02 F6 | 	mov	local01, result3
17940     0C 4E 05 F1 | 	add	fp, #12
17944     A7 7E 62 FC | 	wrlong	muldivb_, fp
17948     04 4E 05 F1 | 	add	fp, #4
1794c     A7 7C 62 FC | 	wrlong	muldiva_, fp
17950     04 4E 05 F1 | 	add	fp, #4
17954     A7 1E 62 FC | 	wrlong	local01, fp
17958     14 4E 85 F1 | 	sub	fp, #20
1795c     3C 3A BF FD | 	call	#_pop
17960     A7 FA 61 FC | 	wrlong	result1, fp
17964     04 4E 05 F1 | 	add	fp, #4
17968     A7 FC 61 FC | 	wrlong	result2, fp
1796c     04 4E 05 F1 | 	add	fp, #4
17970     A7 FE 61 FC | 	wrlong	result3, fp
17974                 | ' 
17974                 | ' t2=pop()
17974                 | ' t1=pop()
17974                 | ' 
17974                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
17974     08 4E 85 F1 | 	sub	fp, #8
17978     1F FE 0D F2 | 	cmp	result3, #31 wz
1797c     14 4E 05 51 |  if_ne	add	fp, #20
17980     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17984     14 4E 85 51 |  if_ne	sub	fp, #20
17988     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1798c     A7 14 68 AC |  if_e	wrlong	#10, fp
17990     08 4E 05 A1 |  if_e	add	fp, #8
17994     A7 FE 69 AC |  if_e	wrlong	#255, fp
17998     08 4E 85 A1 |  if_e	sub	fp, #8
1799c     90 01 90 AD |  if_e	jmp	#LR__1956
179a0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
179a0     08 4E 05 F1 | 	add	fp, #8
179a4     A7 7E 02 FB | 	rdlong	muldivb_, fp
179a8     08 4E 85 F1 | 	sub	fp, #8
179ac     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
179b0     1C 00 90 5D |  if_ne	jmp	#LR__1950
179b4     08 4E 05 F1 | 	add	fp, #8
179b8     A7 38 68 FC | 	wrlong	#28, fp
179bc     08 4E 85 F1 | 	sub	fp, #8
179c0     A7 12 02 FB | 	rdlong	arg01, fp
179c4     00 14 06 F6 | 	mov	arg02, #0
179c8     FC BE B0 FD | 	call	#__system___float_tointeger
179cc     A7 FA 61 FC | 	wrlong	result1, fp
179d0                 | LR__1950
179d0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
179d0     14 4E 05 F1 | 	add	fp, #20
179d4     A7 7E 02 FB | 	rdlong	muldivb_, fp
179d8     14 4E 85 F1 | 	sub	fp, #20
179dc     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
179e0     28 00 90 5D |  if_ne	jmp	#LR__1951
179e4     14 4E 05 F1 | 	add	fp, #20
179e8     A7 38 68 FC | 	wrlong	#28, fp
179ec     08 4E 85 F1 | 	sub	fp, #8
179f0     A7 12 02 FB | 	rdlong	arg01, fp
179f4     0C 4E 85 F1 | 	sub	fp, #12
179f8     00 14 06 F6 | 	mov	arg02, #0
179fc     C8 BE B0 FD | 	call	#__system___float_tointeger
17a00     0C 4E 05 F1 | 	add	fp, #12
17a04     A7 FA 61 FC | 	wrlong	result1, fp
17a08     0C 4E 85 F1 | 	sub	fp, #12
17a0c                 | LR__1951
17a0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
17a0c     08 4E 05 F1 | 	add	fp, #8
17a10     A7 7E 02 FB | 	rdlong	muldivb_, fp
17a14     08 4E 85 F1 | 	sub	fp, #8
17a18     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
17a1c     14 4E 05 A1 |  if_e	add	fp, #20
17a20     A7 1E 02 AB |  if_e	rdlong	local01, fp
17a24     14 4E 85 A1 |  if_e	sub	fp, #20
17a28     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
17a2c     20 00 90 5D |  if_ne	jmp	#LR__1952
17a30     0C 4E 05 F1 | 	add	fp, #12
17a34     A7 1E 02 FB | 	rdlong	local01, fp
17a38     0C 4E 85 F1 | 	sub	fp, #12
17a3c     A7 7E 02 FB | 	rdlong	muldivb_, fp
17a40     0F 7F 12 FD | 	qdiv	muldivb_, local01
17a44     18 1E 62 FD | 	getqx	local01
17a48     A7 1E 62 FC | 	wrlong	local01, fp
17a4c     E0 00 90 FD | 	jmp	#LR__1956
17a50                 | LR__1952
17a50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
17a50     08 4E 05 F1 | 	add	fp, #8
17a54     A7 7E 02 FB | 	rdlong	muldivb_, fp
17a58     08 4E 85 F1 | 	sub	fp, #8
17a5c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
17a60     14 4E 05 A1 |  if_e	add	fp, #20
17a64     A7 1E 02 AB |  if_e	rdlong	local01, fp
17a68     14 4E 85 A1 |  if_e	sub	fp, #20
17a6c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
17a70     2C 00 90 5D |  if_ne	jmp	#LR__1953
17a74     0C 4E 05 F1 | 	add	fp, #12
17a78     A7 1E 02 FB | 	rdlong	local01, fp
17a7c     0C 4E 85 F1 | 	sub	fp, #12
17a80     A7 7E 02 FB | 	rdlong	muldivb_, fp
17a84     0F 7F 12 FD | 	qdiv	muldivb_, local01
17a88     18 1E 62 FD | 	getqx	local01
17a8c     A7 1E 62 FC | 	wrlong	local01, fp
17a90     08 4E 05 F1 | 	add	fp, #8
17a94     A7 38 68 FC | 	wrlong	#28, fp
17a98     08 4E 85 F1 | 	sub	fp, #8
17a9c     90 00 90 FD | 	jmp	#LR__1956
17aa0                 | LR__1953
17aa0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
17aa0     08 4E 05 F1 | 	add	fp, #8
17aa4     A7 7E 02 FB | 	rdlong	muldivb_, fp
17aa8     08 4E 85 F1 | 	sub	fp, #8
17aac     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
17ab0     14 4E 05 A1 |  if_e	add	fp, #20
17ab4     A7 1E 02 AB |  if_e	rdlong	local01, fp
17ab8     14 4E 85 A1 |  if_e	sub	fp, #20
17abc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
17ac0     1C 00 90 5D |  if_ne	jmp	#LR__1954
17ac4     A7 7C 02 FB | 	rdlong	muldiva_, fp
17ac8     0C 4E 05 F1 | 	add	fp, #12
17acc     A7 7E 02 FB | 	rdlong	muldivb_, fp
17ad0     0C 4E 85 F1 | 	sub	fp, #12
17ad4     BA 00 A0 FD | 	call	#divide_
17ad8     A7 7E 62 FC | 	wrlong	muldivb_, fp
17adc     50 00 90 FD | 	jmp	#LR__1956
17ae0                 | LR__1954
17ae0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
17ae0     08 4E 05 F1 | 	add	fp, #8
17ae4     A7 7E 02 FB | 	rdlong	muldivb_, fp
17ae8     08 4E 85 F1 | 	sub	fp, #8
17aec     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
17af0     14 4E 05 A1 |  if_e	add	fp, #20
17af4     A7 1E 02 AB |  if_e	rdlong	local01, fp
17af8     14 4E 85 A1 |  if_e	sub	fp, #20
17afc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
17b00     1C 00 90 5D |  if_ne	jmp	#LR__1955
17b04     A7 7C 02 FB | 	rdlong	muldiva_, fp
17b08     0C 4E 05 F1 | 	add	fp, #12
17b0c     A7 7E 02 FB | 	rdlong	muldivb_, fp
17b10     0C 4E 85 F1 | 	sub	fp, #12
17b14     BA 00 A0 FD | 	call	#divide_
17b18     A7 7E 62 FC | 	wrlong	muldivb_, fp
17b1c     10 00 90 FD | 	jmp	#LR__1956
17b20                 | LR__1955
17b20     A7 16 68 FC | 	wrlong	#11, fp
17b24     08 4E 05 F1 | 	add	fp, #8
17b28     A7 FE 69 FC | 	wrlong	#255, fp
17b2c     08 4E 85 F1 | 	sub	fp, #8
17b30                 | LR__1956
17b30     A7 12 02 F6 | 	mov	arg01, fp
17b34     FC 38 BF FD | 	call	#_push
17b38     A7 F0 03 F6 | 	mov	ptra, fp
17b3c     B2 00 A0 FD | 	call	#popregs_
17b40                 | _do_div_ret
17b40     2D 00 64 FD | 	ret
17b44                 | 
17b44                 | ' 
17b44                 | ' '--------------------------------- fdiv (/) - float divide
17b44                 | ' 
17b44                 | ' sub do_fdiv 
17b44                 | _do_fdiv
17b44     02 4A 05 F6 | 	mov	COUNT_, #2
17b48     A8 00 A0 FD | 	call	#pushregs_
17b4c     18 F0 07 F1 | 	add	ptra, #24
17b50     48 38 BF FD | 	call	#_pop
17b54     FD 14 02 F6 | 	mov	arg02, result1
17b58     FE 12 02 F6 | 	mov	arg01, result2
17b5c     FF 1E 02 F6 | 	mov	local01, result3
17b60     0C 4E 05 F1 | 	add	fp, #12
17b64     A7 14 62 FC | 	wrlong	arg02, fp
17b68     04 4E 05 F1 | 	add	fp, #4
17b6c     A7 12 62 FC | 	wrlong	arg01, fp
17b70     04 4E 05 F1 | 	add	fp, #4
17b74     A7 1E 62 FC | 	wrlong	local01, fp
17b78     14 4E 85 F1 | 	sub	fp, #20
17b7c     1C 38 BF FD | 	call	#_pop
17b80     A7 FA 61 FC | 	wrlong	result1, fp
17b84     04 4E 05 F1 | 	add	fp, #4
17b88     A7 FC 61 FC | 	wrlong	result2, fp
17b8c     04 4E 05 F1 | 	add	fp, #4
17b90     A7 FE 61 FC | 	wrlong	result3, fp
17b94                 | ' 
17b94                 | ' t2=pop()
17b94                 | ' t1=pop()
17b94                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
17b94     08 4E 85 F1 | 	sub	fp, #8
17b98     1F FE 0D F2 | 	cmp	result3, #31 wz
17b9c     14 4E 05 51 |  if_ne	add	fp, #20
17ba0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17ba4     14 4E 85 51 |  if_ne	sub	fp, #20
17ba8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
17bac     A7 14 68 AC |  if_e	wrlong	#10, fp
17bb0     08 4E 05 A1 |  if_e	add	fp, #8
17bb4     A7 FE 69 AC |  if_e	wrlong	#255, fp
17bb8     08 4E 85 A1 |  if_e	sub	fp, #8
17bbc     38 01 90 AD |  if_e	jmp	#LR__1965
17bc0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
17bc0     08 4E 05 F1 | 	add	fp, #8
17bc4     A7 14 02 FB | 	rdlong	arg02, fp
17bc8     08 4E 85 F1 | 	sub	fp, #8
17bcc     1C 14 0E F2 | 	cmp	arg02, #28 wz
17bd0     28 00 90 5D |  if_ne	jmp	#LR__1960
17bd4     08 4E 05 F1 | 	add	fp, #8
17bd8     A7 3C 68 FC | 	wrlong	#30, fp
17bdc     08 4E 85 F1 | 	sub	fp, #8
17be0     A7 12 02 FB | 	rdlong	arg01, fp
17be4     09 13 52 F6 | 	abs	arg01, arg01 wc
17be8     1F 20 C6 C9 |  if_b	decod	local02, #31
17bec     00 20 06 36 |  if_ae	mov	local02, #0
17bf0     08 B4 B0 FD | 	call	#__system___float_fromuns
17bf4     10 FB 61 F5 | 	xor	result1, local02
17bf8     A7 FA 61 FC | 	wrlong	result1, fp
17bfc                 | LR__1960
17bfc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
17bfc     08 4E 05 F1 | 	add	fp, #8
17c00     A7 14 02 FB | 	rdlong	arg02, fp
17c04     08 4E 85 F1 | 	sub	fp, #8
17c08     1D 14 0E F2 | 	cmp	arg02, #29 wz
17c0c     18 00 90 5D |  if_ne	jmp	#LR__1961
17c10     08 4E 05 F1 | 	add	fp, #8
17c14     A7 3C 68 FC | 	wrlong	#30, fp
17c18     08 4E 85 F1 | 	sub	fp, #8
17c1c     A7 12 02 FB | 	rdlong	arg01, fp
17c20     D8 B3 B0 FD | 	call	#__system___float_fromuns
17c24     A7 FA 61 FC | 	wrlong	result1, fp
17c28                 | LR__1961
17c28                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
17c28     14 4E 05 F1 | 	add	fp, #20
17c2c     A7 14 02 FB | 	rdlong	arg02, fp
17c30     14 4E 85 F1 | 	sub	fp, #20
17c34     1C 14 0E F2 | 	cmp	arg02, #28 wz
17c38     34 00 90 5D |  if_ne	jmp	#LR__1962
17c3c     14 4E 05 F1 | 	add	fp, #20
17c40     A7 3C 68 FC | 	wrlong	#30, fp
17c44     08 4E 85 F1 | 	sub	fp, #8
17c48     A7 12 02 FB | 	rdlong	arg01, fp
17c4c     0C 4E 85 F1 | 	sub	fp, #12
17c50     09 13 52 F6 | 	abs	arg01, arg01 wc
17c54     1F 20 C6 C9 |  if_b	decod	local02, #31
17c58     00 20 06 36 |  if_ae	mov	local02, #0
17c5c     9C B3 B0 FD | 	call	#__system___float_fromuns
17c60     10 FB 61 F5 | 	xor	result1, local02
17c64     0C 4E 05 F1 | 	add	fp, #12
17c68     A7 FA 61 FC | 	wrlong	result1, fp
17c6c     0C 4E 85 F1 | 	sub	fp, #12
17c70                 | LR__1962
17c70                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
17c70     14 4E 05 F1 | 	add	fp, #20
17c74     A7 14 02 FB | 	rdlong	arg02, fp
17c78     14 4E 85 F1 | 	sub	fp, #20
17c7c     1D 14 0E F2 | 	cmp	arg02, #29 wz
17c80     24 00 90 5D |  if_ne	jmp	#LR__1963
17c84     14 4E 05 F1 | 	add	fp, #20
17c88     A7 3C 68 FC | 	wrlong	#30, fp
17c8c     08 4E 85 F1 | 	sub	fp, #8
17c90     A7 12 02 FB | 	rdlong	arg01, fp
17c94     0C 4E 85 F1 | 	sub	fp, #12
17c98     60 B3 B0 FD | 	call	#__system___float_fromuns
17c9c     0C 4E 05 F1 | 	add	fp, #12
17ca0     A7 FA 61 FC | 	wrlong	result1, fp
17ca4     0C 4E 85 F1 | 	sub	fp, #12
17ca8                 | LR__1963
17ca8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
17ca8     08 4E 05 F1 | 	add	fp, #8
17cac     A7 14 02 FB | 	rdlong	arg02, fp
17cb0     08 4E 85 F1 | 	sub	fp, #8
17cb4     1E 14 0E F2 | 	cmp	arg02, #30 wz
17cb8     14 4E 05 A1 |  if_e	add	fp, #20
17cbc     A7 1E 02 AB |  if_e	rdlong	local01, fp
17cc0     14 4E 85 A1 |  if_e	sub	fp, #20
17cc4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
17cc8     1C 00 90 5D |  if_ne	jmp	#LR__1964
17ccc     A7 12 02 FB | 	rdlong	arg01, fp
17cd0     0C 4E 05 F1 | 	add	fp, #12
17cd4     A7 14 02 FB | 	rdlong	arg02, fp
17cd8     0C 4E 85 F1 | 	sub	fp, #12
17cdc     24 B9 B0 FD | 	call	#__system___float_div
17ce0     A7 FA 61 FC | 	wrlong	result1, fp
17ce4     10 00 90 FD | 	jmp	#LR__1965
17ce8                 | LR__1964
17ce8     A7 16 68 FC | 	wrlong	#11, fp
17cec     08 4E 05 F1 | 	add	fp, #8
17cf0     A7 FE 69 FC | 	wrlong	#255, fp
17cf4     08 4E 85 F1 | 	sub	fp, #8
17cf8                 | LR__1965
17cf8     A7 12 02 F6 | 	mov	arg01, fp
17cfc     34 37 BF FD | 	call	#_push
17d00     A7 F0 03 F6 | 	mov	ptra, fp
17d04     B2 00 A0 FD | 	call	#popregs_
17d08                 | _do_fdiv_ret
17d08     2D 00 64 FD | 	ret
17d0c                 | 
17d0c                 | ' 
17d0c                 | ' '--------------------------------- minus (-)
17d0c                 | ' 
17d0c                 | ' sub do_minus
17d0c                 | _do_minus
17d0c     05 4A 05 F6 | 	mov	COUNT_, #5
17d10     A8 00 A0 FD | 	call	#pushregs_
17d14     18 F0 07 F1 | 	add	ptra, #24
17d18     80 36 BF FD | 	call	#_pop
17d1c     FD 1E 02 F6 | 	mov	local01, result1
17d20     FE 20 02 F6 | 	mov	local02, result2
17d24     FF 22 02 F6 | 	mov	local03, result3
17d28     0C 4E 05 F1 | 	add	fp, #12
17d2c     A7 1E 62 FC | 	wrlong	local01, fp
17d30     04 4E 05 F1 | 	add	fp, #4
17d34     A7 20 62 FC | 	wrlong	local02, fp
17d38     04 4E 05 F1 | 	add	fp, #4
17d3c     A7 22 62 FC | 	wrlong	local03, fp
17d40     14 4E 85 F1 | 	sub	fp, #20
17d44     54 36 BF FD | 	call	#_pop
17d48     FF 22 02 F6 | 	mov	local03, result3
17d4c     A7 FA 61 FC | 	wrlong	result1, fp
17d50     04 4E 05 F1 | 	add	fp, #4
17d54     A7 FC 61 FC | 	wrlong	result2, fp
17d58     04 4E 05 F1 | 	add	fp, #4
17d5c     A7 22 62 FC | 	wrlong	local03, fp
17d60                 | ' 
17d60                 | ' t2=pop()
17d60                 | ' t1=pop()
17d60                 | ' 
17d60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
17d60     08 4E 85 F1 | 	sub	fp, #8
17d64     1D 22 0E F2 | 	cmp	local03, #29 wz
17d68     14 4E 05 A1 |  if_e	add	fp, #20
17d6c     A7 24 02 AB |  if_e	rdlong	local04, fp
17d70     14 4E 85 A1 |  if_e	sub	fp, #20
17d74     12 23 02 A6 |  if_e	mov	local03, local04
17d78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17d7c     5C 00 90 5D |  if_ne	jmp	#LR__1971
17d80                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
17d80     0C 4E 05 F1 | 	add	fp, #12
17d84     A7 1E 02 FB | 	rdlong	local01, fp
17d88     0C 4E 85 F1 | 	sub	fp, #12
17d8c     A7 22 02 FB | 	rdlong	local03, fp
17d90     11 1F 12 F2 | 	cmp	local01, local03 wc
17d94     1C 00 90 3D |  if_ae	jmp	#LR__1970
17d98     A7 1E 02 FB | 	rdlong	local01, fp
17d9c     0C 4E 05 F1 | 	add	fp, #12
17da0     A7 20 02 FB | 	rdlong	local02, fp
17da4     0C 4E 85 F1 | 	sub	fp, #12
17da8     10 1F 82 F1 | 	sub	local01, local02
17dac     A7 1E 62 FC | 	wrlong	local01, fp
17db0     F4 02 90 FD | 	jmp	#LR__1980
17db4                 | LR__1970
17db4     A7 1E 02 FB | 	rdlong	local01, fp
17db8     0C 4E 05 F1 | 	add	fp, #12
17dbc     A7 20 02 FB | 	rdlong	local02, fp
17dc0     0C 4E 85 F1 | 	sub	fp, #12
17dc4     10 1F 82 F1 | 	sub	local01, local02
17dc8     A7 1E 62 FC | 	wrlong	local01, fp
17dcc     08 4E 05 F1 | 	add	fp, #8
17dd0     A7 38 68 FC | 	wrlong	#28, fp
17dd4     08 4E 85 F1 | 	sub	fp, #8
17dd8     CC 02 90 FD | 	jmp	#LR__1980
17ddc                 | LR__1971
17ddc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
17ddc     08 4E 05 F1 | 	add	fp, #8
17de0     A7 1E 02 FB | 	rdlong	local01, fp
17de4     08 4E 85 F1 | 	sub	fp, #8
17de8     1D 1E 0E F2 | 	cmp	local01, #29 wz
17dec     14 4E 05 A1 |  if_e	add	fp, #20
17df0     A7 24 02 AB |  if_e	rdlong	local04, fp
17df4     14 4E 85 A1 |  if_e	sub	fp, #20
17df8     12 23 02 A6 |  if_e	mov	local03, local04
17dfc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
17e00     28 00 90 5D |  if_ne	jmp	#LR__1972
17e04     A7 1E 02 FB | 	rdlong	local01, fp
17e08     0C 4E 05 F1 | 	add	fp, #12
17e0c     A7 20 02 FB | 	rdlong	local02, fp
17e10     0C 4E 85 F1 | 	sub	fp, #12
17e14     10 1F 82 F1 | 	sub	local01, local02
17e18     A7 1E 62 FC | 	wrlong	local01, fp
17e1c     08 4E 05 F1 | 	add	fp, #8
17e20     A7 38 68 FC | 	wrlong	#28, fp
17e24     08 4E 85 F1 | 	sub	fp, #8
17e28     7C 02 90 FD | 	jmp	#LR__1980
17e2c                 | LR__1972
17e2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
17e2c     08 4E 05 F1 | 	add	fp, #8
17e30     A7 1E 02 FB | 	rdlong	local01, fp
17e34     08 4E 85 F1 | 	sub	fp, #8
17e38     1D 1E 0E F2 | 	cmp	local01, #29 wz
17e3c     14 4E 05 A1 |  if_e	add	fp, #20
17e40     A7 24 02 AB |  if_e	rdlong	local04, fp
17e44     14 4E 85 A1 |  if_e	sub	fp, #20
17e48     12 23 02 A6 |  if_e	mov	local03, local04
17e4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
17e50     34 00 90 5D |  if_ne	jmp	#LR__1973
17e54     A7 12 02 FB | 	rdlong	arg01, fp
17e58     A0 B1 B0 FD | 	call	#__system___float_fromuns
17e5c     FD 12 02 F6 | 	mov	arg01, result1
17e60     0C 4E 05 F1 | 	add	fp, #12
17e64     A7 14 02 FB | 	rdlong	arg02, fp
17e68     0C 4E 85 F1 | 	sub	fp, #12
17e6c     1F 14 E6 F4 | 	bitnot	arg02, #31
17e70     BC B1 B0 FD | 	call	#__system___float_add
17e74     A7 FA 61 FC | 	wrlong	result1, fp
17e78     08 4E 05 F1 | 	add	fp, #8
17e7c     A7 3C 68 FC | 	wrlong	#30, fp
17e80     08 4E 85 F1 | 	sub	fp, #8
17e84     20 02 90 FD | 	jmp	#LR__1980
17e88                 | LR__1973
17e88                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
17e88     08 4E 05 F1 | 	add	fp, #8
17e8c     A7 1E 02 FB | 	rdlong	local01, fp
17e90     08 4E 85 F1 | 	sub	fp, #8
17e94     1C 1E 0E F2 | 	cmp	local01, #28 wz
17e98     14 4E 05 A1 |  if_e	add	fp, #20
17e9c     A7 24 02 AB |  if_e	rdlong	local04, fp
17ea0     14 4E 85 A1 |  if_e	sub	fp, #20
17ea4     12 23 02 A6 |  if_e	mov	local03, local04
17ea8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17eac     1C 00 90 5D |  if_ne	jmp	#LR__1974
17eb0     A7 1E 02 FB | 	rdlong	local01, fp
17eb4     0C 4E 05 F1 | 	add	fp, #12
17eb8     A7 20 02 FB | 	rdlong	local02, fp
17ebc     0C 4E 85 F1 | 	sub	fp, #12
17ec0     10 1F 82 F1 | 	sub	local01, local02
17ec4     A7 1E 62 FC | 	wrlong	local01, fp
17ec8     DC 01 90 FD | 	jmp	#LR__1980
17ecc                 | LR__1974
17ecc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
17ecc     08 4E 05 F1 | 	add	fp, #8
17ed0     A7 1E 02 FB | 	rdlong	local01, fp
17ed4     08 4E 85 F1 | 	sub	fp, #8
17ed8     1C 1E 0E F2 | 	cmp	local01, #28 wz
17edc     14 4E 05 A1 |  if_e	add	fp, #20
17ee0     A7 24 02 AB |  if_e	rdlong	local04, fp
17ee4     14 4E 85 A1 |  if_e	sub	fp, #20
17ee8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
17eec     1C 00 90 5D |  if_ne	jmp	#LR__1975
17ef0     A7 1E 02 FB | 	rdlong	local01, fp
17ef4     0C 4E 05 F1 | 	add	fp, #12
17ef8     A7 20 02 FB | 	rdlong	local02, fp
17efc     0C 4E 85 F1 | 	sub	fp, #12
17f00     10 1F 82 F1 | 	sub	local01, local02
17f04     A7 1E 62 FC | 	wrlong	local01, fp
17f08     9C 01 90 FD | 	jmp	#LR__1980
17f0c                 | LR__1975
17f0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
17f0c     08 4E 05 F1 | 	add	fp, #8
17f10     A7 1E 02 FB | 	rdlong	local01, fp
17f14     08 4E 85 F1 | 	sub	fp, #8
17f18     1C 1E 0E F2 | 	cmp	local01, #28 wz
17f1c     14 4E 05 A1 |  if_e	add	fp, #20
17f20     A7 22 02 AB |  if_e	rdlong	local03, fp
17f24     14 4E 85 A1 |  if_e	sub	fp, #20
17f28     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
17f2c     44 00 90 5D |  if_ne	jmp	#LR__1976
17f30     A7 12 02 FB | 	rdlong	arg01, fp
17f34     09 13 52 F6 | 	abs	arg01, arg01 wc
17f38     1F 26 C6 C9 |  if_b	decod	local05, #31
17f3c     00 26 06 36 |  if_ae	mov	local05, #0
17f40     B8 B0 B0 FD | 	call	#__system___float_fromuns
17f44     13 FB 61 F5 | 	xor	result1, local05
17f48     FD 12 02 F6 | 	mov	arg01, result1
17f4c     0C 4E 05 F1 | 	add	fp, #12
17f50     A7 14 02 FB | 	rdlong	arg02, fp
17f54     0C 4E 85 F1 | 	sub	fp, #12
17f58     1F 14 E6 F4 | 	bitnot	arg02, #31
17f5c     D0 B0 B0 FD | 	call	#__system___float_add
17f60     A7 FA 61 FC | 	wrlong	result1, fp
17f64     08 4E 05 F1 | 	add	fp, #8
17f68     A7 3C 68 FC | 	wrlong	#30, fp
17f6c     08 4E 85 F1 | 	sub	fp, #8
17f70     34 01 90 FD | 	jmp	#LR__1980
17f74                 | LR__1976
17f74                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
17f74     08 4E 05 F1 | 	add	fp, #8
17f78     A7 1E 02 FB | 	rdlong	local01, fp
17f7c     08 4E 85 F1 | 	sub	fp, #8
17f80     1E 1E 0E F2 | 	cmp	local01, #30 wz
17f84     14 4E 05 A1 |  if_e	add	fp, #20
17f88     A7 22 02 AB |  if_e	rdlong	local03, fp
17f8c     14 4E 85 A1 |  if_e	sub	fp, #20
17f90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17f94     2C 00 90 5D |  if_ne	jmp	#LR__1977
17f98     A7 1E 02 FB | 	rdlong	local01, fp
17f9c     0C 4E 05 F1 | 	add	fp, #12
17fa0     A7 12 02 FB | 	rdlong	arg01, fp
17fa4     0C 4E 85 F1 | 	sub	fp, #12
17fa8     50 B0 B0 FD | 	call	#__system___float_fromuns
17fac     FD 14 02 F6 | 	mov	arg02, result1
17fb0     0F 13 02 F6 | 	mov	arg01, local01
17fb4     1F 14 E6 F4 | 	bitnot	arg02, #31
17fb8     74 B0 B0 FD | 	call	#__system___float_add
17fbc     A7 FA 61 FC | 	wrlong	result1, fp
17fc0     E4 00 90 FD | 	jmp	#LR__1980
17fc4                 | LR__1977
17fc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
17fc4     08 4E 05 F1 | 	add	fp, #8
17fc8     A7 1E 02 FB | 	rdlong	local01, fp
17fcc     08 4E 85 F1 | 	sub	fp, #8
17fd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
17fd4     14 4E 05 A1 |  if_e	add	fp, #20
17fd8     A7 22 02 AB |  if_e	rdlong	local03, fp
17fdc     14 4E 85 A1 |  if_e	sub	fp, #20
17fe0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
17fe4     3C 00 90 5D |  if_ne	jmp	#LR__1978
17fe8     A7 1E 02 FB | 	rdlong	local01, fp
17fec     0C 4E 05 F1 | 	add	fp, #12
17ff0     A7 12 02 FB | 	rdlong	arg01, fp
17ff4     0C 4E 85 F1 | 	sub	fp, #12
17ff8     09 13 52 F6 | 	abs	arg01, arg01 wc
17ffc     1F 26 C6 C9 |  if_b	decod	local05, #31
18000     00 26 06 36 |  if_ae	mov	local05, #0
18004     F4 AF B0 FD | 	call	#__system___float_fromuns
18008     13 FB 61 F5 | 	xor	result1, local05
1800c     FD 14 02 F6 | 	mov	arg02, result1
18010     0F 13 02 F6 | 	mov	arg01, local01
18014     1F 14 E6 F4 | 	bitnot	arg02, #31
18018     14 B0 B0 FD | 	call	#__system___float_add
1801c     A7 FA 61 FC | 	wrlong	result1, fp
18020     84 00 90 FD | 	jmp	#LR__1980
18024                 | LR__1978
18024                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
18024     08 4E 05 F1 | 	add	fp, #8
18028     A7 1E 02 FB | 	rdlong	local01, fp
1802c     08 4E 85 F1 | 	sub	fp, #8
18030     1E 1E 0E F2 | 	cmp	local01, #30 wz
18034     14 4E 05 A1 |  if_e	add	fp, #20
18038     A7 22 02 AB |  if_e	rdlong	local03, fp
1803c     14 4E 85 A1 |  if_e	sub	fp, #20
18040     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18044     20 00 90 5D |  if_ne	jmp	#LR__1979
18048     A7 12 02 FB | 	rdlong	arg01, fp
1804c     0C 4E 05 F1 | 	add	fp, #12
18050     A7 14 02 FB | 	rdlong	arg02, fp
18054     0C 4E 85 F1 | 	sub	fp, #12
18058     1F 14 E6 F4 | 	bitnot	arg02, #31
1805c     D0 AF B0 FD | 	call	#__system___float_add
18060     A7 FA 61 FC | 	wrlong	result1, fp
18064     40 00 90 FD | 	jmp	#LR__1980
18068                 | LR__1979
18068                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
18068     08 4E 05 F1 | 	add	fp, #8
1806c     A7 1E 02 FB | 	rdlong	local01, fp
18070     08 4E 85 F1 | 	sub	fp, #8
18074     1F 1E 0E F2 | 	cmp	local01, #31 wz
18078     14 4E 05 51 |  if_ne	add	fp, #20
1807c     A7 22 02 5B |  if_ne	rdlong	local03, fp
18080     14 4E 85 51 |  if_ne	sub	fp, #20
18084     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
18088     A7 06 68 AC |  if_e	wrlong	#3, fp
1808c     08 4E 05 A1 |  if_e	add	fp, #8
18090     A7 FE 69 AC |  if_e	wrlong	#255, fp
18094     08 4E 85 A1 |  if_e	sub	fp, #8
18098     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1809c     08 4E 05 51 |  if_ne	add	fp, #8
180a0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
180a4     08 4E 85 51 |  if_ne	sub	fp, #8
180a8                 | LR__1980
180a8     A7 12 02 F6 | 	mov	arg01, fp
180ac     84 33 BF FD | 	call	#_push
180b0     A7 F0 03 F6 | 	mov	ptra, fp
180b4     B2 00 A0 FD | 	call	#popregs_
180b8                 | _do_minus_ret
180b8     2D 00 64 FD | 	ret
180bc                 | 
180bc                 | ' 
180bc                 | ' '--------------------------------- negative (-), one argument negative
180bc                 | ' 
180bc                 | ' sub do_negative
180bc                 | _do_negative
180bc     02 4A 05 F6 | 	mov	COUNT_, #2
180c0     A8 00 A0 FD | 	call	#pushregs_
180c4     0C F0 07 F1 | 	add	ptra, #12
180c8     D0 32 BF FD | 	call	#_pop
180cc     FF 1E 02 F6 | 	mov	local01, result3
180d0     A7 FA 61 FC | 	wrlong	result1, fp
180d4     04 4E 05 F1 | 	add	fp, #4
180d8     A7 FC 61 FC | 	wrlong	result2, fp
180dc     04 4E 05 F1 | 	add	fp, #4
180e0     A7 1E 62 FC | 	wrlong	local01, fp
180e4                 | ' t1=pop()
180e4                 | ' if t1.result_type=result_int then 
180e4     08 4E 85 F1 | 	sub	fp, #8
180e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
180ec     A7 20 02 AB |  if_e	rdlong	local02, fp
180f0     10 1F 62 A6 |  if_e	neg	local01, local02
180f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
180f8     5C 00 90 AD |  if_e	jmp	#LR__1992
180fc     08 4E 05 F1 | 	add	fp, #8
18100     A7 1E 02 FB | 	rdlong	local01, fp
18104     08 4E 85 F1 | 	sub	fp, #8
18108     1D 1E 0E F2 | 	cmp	local01, #29 wz
1810c     1C 00 90 5D |  if_ne	jmp	#LR__1990
18110     A7 20 02 FB | 	rdlong	local02, fp
18114     10 1F 62 F6 | 	neg	local01, local02
18118     A7 1E 62 FC | 	wrlong	local01, fp
1811c     08 4E 05 F1 | 	add	fp, #8
18120     A7 38 68 FC | 	wrlong	#28, fp
18124     08 4E 85 F1 | 	sub	fp, #8
18128     2C 00 90 FD | 	jmp	#LR__1991
1812c                 | LR__1990
1812c     08 4E 05 F1 | 	add	fp, #8
18130     A7 1E 02 FB | 	rdlong	local01, fp
18134     08 4E 85 F1 | 	sub	fp, #8
18138     1E 1E 0E F2 | 	cmp	local01, #30 wz
1813c     A7 FA 01 AB |  if_e	rdlong	result1, fp
18140     1F FA E5 A4 |  if_e	bitnot	result1, #31
18144     A7 FA 61 AC |  if_e	wrlong	result1, fp
18148     08 4E 05 51 |  if_ne	add	fp, #8
1814c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18150     08 4E 85 51 |  if_ne	sub	fp, #8
18154     A7 50 68 5C |  if_ne	wrlong	#40, fp
18158                 | LR__1991
18158                 | LR__1992
18158     A7 12 02 F6 | 	mov	arg01, fp
1815c     D4 32 BF FD | 	call	#_push
18160     A7 F0 03 F6 | 	mov	ptra, fp
18164     B2 00 A0 FD | 	call	#popregs_
18168                 | _do_negative_ret
18168     2D 00 64 FD | 	ret
1816c                 | 
1816c                 | ' 
1816c                 | ' '--------------------------------- MOD (modulo)
1816c                 | ' 
1816c                 | ' sub do_mod 
1816c                 | _do_mod
1816c     01 4A 05 F6 | 	mov	COUNT_, #1
18170     A8 00 A0 FD | 	call	#pushregs_
18174     18 F0 07 F1 | 	add	ptra, #24
18178     20 32 BF FD | 	call	#_pop
1817c     FD 7E 02 F6 | 	mov	muldivb_, result1
18180     FE 7C 02 F6 | 	mov	muldiva_, result2
18184     FF 1E 02 F6 | 	mov	local01, result3
18188     0C 4E 05 F1 | 	add	fp, #12
1818c     A7 7E 62 FC | 	wrlong	muldivb_, fp
18190     04 4E 05 F1 | 	add	fp, #4
18194     A7 7C 62 FC | 	wrlong	muldiva_, fp
18198     04 4E 05 F1 | 	add	fp, #4
1819c     A7 1E 62 FC | 	wrlong	local01, fp
181a0     14 4E 85 F1 | 	sub	fp, #20
181a4     F4 31 BF FD | 	call	#_pop
181a8     A7 FA 61 FC | 	wrlong	result1, fp
181ac     04 4E 05 F1 | 	add	fp, #4
181b0     A7 FC 61 FC | 	wrlong	result2, fp
181b4     04 4E 05 F1 | 	add	fp, #4
181b8     A7 FE 61 FC | 	wrlong	result3, fp
181bc                 | ' 
181bc                 | ' t2=pop()
181bc                 | ' t1=pop()
181bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
181bc     08 4E 85 F1 | 	sub	fp, #8
181c0     1F FE 0D F2 | 	cmp	result3, #31 wz
181c4     14 4E 05 51 |  if_ne	add	fp, #20
181c8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
181cc     14 4E 85 51 |  if_ne	sub	fp, #20
181d0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
181d4     A7 14 68 AC |  if_e	wrlong	#10, fp
181d8     08 4E 05 A1 |  if_e	add	fp, #8
181dc     A7 FE 69 AC |  if_e	wrlong	#255, fp
181e0     08 4E 85 A1 |  if_e	sub	fp, #8
181e4     90 01 90 AD |  if_e	jmp	#LR__2006
181e8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
181e8     08 4E 05 F1 | 	add	fp, #8
181ec     A7 7E 02 FB | 	rdlong	muldivb_, fp
181f0     08 4E 85 F1 | 	sub	fp, #8
181f4     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
181f8     1C 00 90 5D |  if_ne	jmp	#LR__2000
181fc     08 4E 05 F1 | 	add	fp, #8
18200     A7 38 68 FC | 	wrlong	#28, fp
18204     08 4E 85 F1 | 	sub	fp, #8
18208     A7 12 02 FB | 	rdlong	arg01, fp
1820c     00 14 06 F6 | 	mov	arg02, #0
18210     B4 B6 B0 FD | 	call	#__system___float_tointeger
18214     A7 FA 61 FC | 	wrlong	result1, fp
18218                 | LR__2000
18218                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
18218     14 4E 05 F1 | 	add	fp, #20
1821c     A7 7E 02 FB | 	rdlong	muldivb_, fp
18220     14 4E 85 F1 | 	sub	fp, #20
18224     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
18228     28 00 90 5D |  if_ne	jmp	#LR__2001
1822c     14 4E 05 F1 | 	add	fp, #20
18230     A7 38 68 FC | 	wrlong	#28, fp
18234     08 4E 85 F1 | 	sub	fp, #8
18238     A7 12 02 FB | 	rdlong	arg01, fp
1823c     0C 4E 85 F1 | 	sub	fp, #12
18240     00 14 06 F6 | 	mov	arg02, #0
18244     80 B6 B0 FD | 	call	#__system___float_tointeger
18248     0C 4E 05 F1 | 	add	fp, #12
1824c     A7 FA 61 FC | 	wrlong	result1, fp
18250     0C 4E 85 F1 | 	sub	fp, #12
18254                 | LR__2001
18254                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
18254     08 4E 05 F1 | 	add	fp, #8
18258     A7 7E 02 FB | 	rdlong	muldivb_, fp
1825c     08 4E 85 F1 | 	sub	fp, #8
18260     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
18264     14 4E 05 A1 |  if_e	add	fp, #20
18268     A7 1E 02 AB |  if_e	rdlong	local01, fp
1826c     14 4E 85 A1 |  if_e	sub	fp, #20
18270     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18274     20 00 90 5D |  if_ne	jmp	#LR__2002
18278     0C 4E 05 F1 | 	add	fp, #12
1827c     A7 1E 02 FB | 	rdlong	local01, fp
18280     0C 4E 85 F1 | 	sub	fp, #12
18284     A7 7E 02 FB | 	rdlong	muldivb_, fp
18288     0F 7F 12 FD | 	qdiv	muldivb_, local01
1828c     19 1E 62 FD | 	getqy	local01
18290     A7 1E 62 FC | 	wrlong	local01, fp
18294     E0 00 90 FD | 	jmp	#LR__2006
18298                 | LR__2002
18298                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
18298     08 4E 05 F1 | 	add	fp, #8
1829c     A7 7E 02 FB | 	rdlong	muldivb_, fp
182a0     08 4E 85 F1 | 	sub	fp, #8
182a4     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
182a8     14 4E 05 A1 |  if_e	add	fp, #20
182ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
182b0     14 4E 85 A1 |  if_e	sub	fp, #20
182b4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
182b8     2C 00 90 5D |  if_ne	jmp	#LR__2003
182bc     0C 4E 05 F1 | 	add	fp, #12
182c0     A7 1E 02 FB | 	rdlong	local01, fp
182c4     0C 4E 85 F1 | 	sub	fp, #12
182c8     A7 7E 02 FB | 	rdlong	muldivb_, fp
182cc     0F 7F 12 FD | 	qdiv	muldivb_, local01
182d0     19 1E 62 FD | 	getqy	local01
182d4     A7 1E 62 FC | 	wrlong	local01, fp
182d8     08 4E 05 F1 | 	add	fp, #8
182dc     A7 38 68 FC | 	wrlong	#28, fp
182e0     08 4E 85 F1 | 	sub	fp, #8
182e4     90 00 90 FD | 	jmp	#LR__2006
182e8                 | LR__2003
182e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
182e8     08 4E 05 F1 | 	add	fp, #8
182ec     A7 7E 02 FB | 	rdlong	muldivb_, fp
182f0     08 4E 85 F1 | 	sub	fp, #8
182f4     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
182f8     14 4E 05 A1 |  if_e	add	fp, #20
182fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
18300     14 4E 85 A1 |  if_e	sub	fp, #20
18304     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18308     1C 00 90 5D |  if_ne	jmp	#LR__2004
1830c     A7 7C 02 FB | 	rdlong	muldiva_, fp
18310     0C 4E 05 F1 | 	add	fp, #12
18314     A7 7E 02 FB | 	rdlong	muldivb_, fp
18318     0C 4E 85 F1 | 	sub	fp, #12
1831c     BA 00 A0 FD | 	call	#divide_
18320     A7 7C 62 FC | 	wrlong	muldiva_, fp
18324     50 00 90 FD | 	jmp	#LR__2006
18328                 | LR__2004
18328                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
18328     08 4E 05 F1 | 	add	fp, #8
1832c     A7 7E 02 FB | 	rdlong	muldivb_, fp
18330     08 4E 85 F1 | 	sub	fp, #8
18334     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
18338     14 4E 05 A1 |  if_e	add	fp, #20
1833c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18340     14 4E 85 A1 |  if_e	sub	fp, #20
18344     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18348     1C 00 90 5D |  if_ne	jmp	#LR__2005
1834c     A7 7C 02 FB | 	rdlong	muldiva_, fp
18350     0C 4E 05 F1 | 	add	fp, #12
18354     A7 7E 02 FB | 	rdlong	muldivb_, fp
18358     0C 4E 85 F1 | 	sub	fp, #12
1835c     BA 00 A0 FD | 	call	#divide_
18360     A7 7C 62 FC | 	wrlong	muldiva_, fp
18364     10 00 90 FD | 	jmp	#LR__2006
18368                 | LR__2005
18368     A7 16 68 FC | 	wrlong	#11, fp
1836c     08 4E 05 F1 | 	add	fp, #8
18370     A7 FE 69 FC | 	wrlong	#255, fp
18374     08 4E 85 F1 | 	sub	fp, #8
18378                 | LR__2006
18378     A7 12 02 F6 | 	mov	arg01, fp
1837c     B4 30 BF FD | 	call	#_push
18380     A7 F0 03 F6 | 	mov	ptra, fp
18384     B2 00 A0 FD | 	call	#popregs_
18388                 | _do_mod_ret
18388     2D 00 64 FD | 	ret
1838c                 | 
1838c                 | ' 
1838c                 | ' '--------------------------------- mul (*)
1838c                 | ' 
1838c                 | ' sub do_mul
1838c                 | _do_mul
1838c     05 4A 05 F6 | 	mov	COUNT_, #5
18390     A8 00 A0 FD | 	call	#pushregs_
18394     18 F0 07 F1 | 	add	ptra, #24
18398     00 30 BF FD | 	call	#_pop
1839c     FD 1E 02 F6 | 	mov	local01, result1
183a0     FE 20 02 F6 | 	mov	local02, result2
183a4     FF 22 02 F6 | 	mov	local03, result3
183a8     0C 4E 05 F1 | 	add	fp, #12
183ac     A7 1E 62 FC | 	wrlong	local01, fp
183b0     04 4E 05 F1 | 	add	fp, #4
183b4     A7 20 62 FC | 	wrlong	local02, fp
183b8     04 4E 05 F1 | 	add	fp, #4
183bc     A7 22 62 FC | 	wrlong	local03, fp
183c0     14 4E 85 F1 | 	sub	fp, #20
183c4     D4 2F BF FD | 	call	#_pop
183c8     FF 22 02 F6 | 	mov	local03, result3
183cc     A7 FA 61 FC | 	wrlong	result1, fp
183d0     04 4E 05 F1 | 	add	fp, #4
183d4     A7 FC 61 FC | 	wrlong	result2, fp
183d8     04 4E 05 F1 | 	add	fp, #4
183dc     A7 22 62 FC | 	wrlong	local03, fp
183e0                 | ' 
183e0                 | ' t2=pop()
183e0                 | ' t1=pop()
183e0                 | ' 
183e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
183e0     08 4E 85 F1 | 	sub	fp, #8
183e4     1D 22 0E F2 | 	cmp	local03, #29 wz
183e8     14 4E 05 A1 |  if_e	add	fp, #20
183ec     A7 24 02 AB |  if_e	rdlong	local04, fp
183f0     14 4E 85 A1 |  if_e	sub	fp, #20
183f4     12 23 02 A6 |  if_e	mov	local03, local04
183f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
183fc     20 00 90 5D |  if_ne	jmp	#LR__2010
18400     A7 20 02 FB | 	rdlong	local02, fp
18404     0C 4E 05 F1 | 	add	fp, #12
18408     A7 22 02 FB | 	rdlong	local03, fp
1840c     11 21 02 FD | 	qmul	local02, local03
18410     0C 4E 85 F1 | 	sub	fp, #12
18414     18 1E 62 FD | 	getqx	local01
18418     A7 1E 62 FC | 	wrlong	local01, fp
1841c     C4 02 90 FD | 	jmp	#LR__2019
18420                 | LR__2010
18420                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
18420     08 4E 05 F1 | 	add	fp, #8
18424     A7 1E 02 FB | 	rdlong	local01, fp
18428     08 4E 85 F1 | 	sub	fp, #8
1842c     1D 1E 0E F2 | 	cmp	local01, #29 wz
18430     14 4E 05 A1 |  if_e	add	fp, #20
18434     A7 24 02 AB |  if_e	rdlong	local04, fp
18438     14 4E 85 A1 |  if_e	sub	fp, #20
1843c     12 23 02 A6 |  if_e	mov	local03, local04
18440     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18444     2C 00 90 5D |  if_ne	jmp	#LR__2011
18448     A7 20 02 FB | 	rdlong	local02, fp
1844c     0C 4E 05 F1 | 	add	fp, #12
18450     A7 22 02 FB | 	rdlong	local03, fp
18454     11 21 02 FD | 	qmul	local02, local03
18458     0C 4E 85 F1 | 	sub	fp, #12
1845c     18 1E 62 FD | 	getqx	local01
18460     A7 1E 62 FC | 	wrlong	local01, fp
18464     08 4E 05 F1 | 	add	fp, #8
18468     A7 38 68 FC | 	wrlong	#28, fp
1846c     08 4E 85 F1 | 	sub	fp, #8
18470     70 02 90 FD | 	jmp	#LR__2019
18474                 | LR__2011
18474                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
18474     08 4E 05 F1 | 	add	fp, #8
18478     A7 1E 02 FB | 	rdlong	local01, fp
1847c     08 4E 85 F1 | 	sub	fp, #8
18480     1D 1E 0E F2 | 	cmp	local01, #29 wz
18484     14 4E 05 A1 |  if_e	add	fp, #20
18488     A7 24 02 AB |  if_e	rdlong	local04, fp
1848c     14 4E 85 A1 |  if_e	sub	fp, #20
18490     12 23 02 A6 |  if_e	mov	local03, local04
18494     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18498     30 00 90 5D |  if_ne	jmp	#LR__2012
1849c     A7 12 02 FB | 	rdlong	arg01, fp
184a0     58 AB B0 FD | 	call	#__system___float_fromuns
184a4     FD 12 02 F6 | 	mov	arg01, result1
184a8     0C 4E 05 F1 | 	add	fp, #12
184ac     A7 14 02 FB | 	rdlong	arg02, fp
184b0     0C 4E 85 F1 | 	sub	fp, #12
184b4     48 AF B0 FD | 	call	#__system___float_mul
184b8     A7 FA 61 FC | 	wrlong	result1, fp
184bc     08 4E 05 F1 | 	add	fp, #8
184c0     A7 3C 68 FC | 	wrlong	#30, fp
184c4     08 4E 85 F1 | 	sub	fp, #8
184c8     18 02 90 FD | 	jmp	#LR__2019
184cc                 | LR__2012
184cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
184cc     08 4E 05 F1 | 	add	fp, #8
184d0     A7 1E 02 FB | 	rdlong	local01, fp
184d4     08 4E 85 F1 | 	sub	fp, #8
184d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
184dc     14 4E 05 A1 |  if_e	add	fp, #20
184e0     A7 24 02 AB |  if_e	rdlong	local04, fp
184e4     14 4E 85 A1 |  if_e	sub	fp, #20
184e8     12 23 02 A6 |  if_e	mov	local03, local04
184ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
184f0     20 00 90 5D |  if_ne	jmp	#LR__2013
184f4     A7 20 02 FB | 	rdlong	local02, fp
184f8     0C 4E 05 F1 | 	add	fp, #12
184fc     A7 22 02 FB | 	rdlong	local03, fp
18500     11 21 02 FD | 	qmul	local02, local03
18504     0C 4E 85 F1 | 	sub	fp, #12
18508     18 1E 62 FD | 	getqx	local01
1850c     A7 1E 62 FC | 	wrlong	local01, fp
18510     D0 01 90 FD | 	jmp	#LR__2019
18514                 | LR__2013
18514                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
18514     08 4E 05 F1 | 	add	fp, #8
18518     A7 1E 02 FB | 	rdlong	local01, fp
1851c     08 4E 85 F1 | 	sub	fp, #8
18520     1C 1E 0E F2 | 	cmp	local01, #28 wz
18524     14 4E 05 A1 |  if_e	add	fp, #20
18528     A7 24 02 AB |  if_e	rdlong	local04, fp
1852c     14 4E 85 A1 |  if_e	sub	fp, #20
18530     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
18534     20 00 90 5D |  if_ne	jmp	#LR__2014
18538     A7 20 02 FB | 	rdlong	local02, fp
1853c     0C 4E 05 F1 | 	add	fp, #12
18540     A7 22 02 FB | 	rdlong	local03, fp
18544     11 21 02 FD | 	qmul	local02, local03
18548     0C 4E 85 F1 | 	sub	fp, #12
1854c     18 1E 62 FD | 	getqx	local01
18550     A7 1E 62 FC | 	wrlong	local01, fp
18554     8C 01 90 FD | 	jmp	#LR__2019
18558                 | LR__2014
18558                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
18558     08 4E 05 F1 | 	add	fp, #8
1855c     A7 1E 02 FB | 	rdlong	local01, fp
18560     08 4E 85 F1 | 	sub	fp, #8
18564     1C 1E 0E F2 | 	cmp	local01, #28 wz
18568     14 4E 05 A1 |  if_e	add	fp, #20
1856c     A7 22 02 AB |  if_e	rdlong	local03, fp
18570     14 4E 85 A1 |  if_e	sub	fp, #20
18574     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18578     40 00 90 5D |  if_ne	jmp	#LR__2015
1857c     A7 12 02 FB | 	rdlong	arg01, fp
18580     09 13 52 F6 | 	abs	arg01, arg01 wc
18584     1F 26 C6 C9 |  if_b	decod	local05, #31
18588     00 26 06 36 |  if_ae	mov	local05, #0
1858c     6C AA B0 FD | 	call	#__system___float_fromuns
18590     13 FB 61 F5 | 	xor	result1, local05
18594     FD 12 02 F6 | 	mov	arg01, result1
18598     0C 4E 05 F1 | 	add	fp, #12
1859c     A7 14 02 FB | 	rdlong	arg02, fp
185a0     0C 4E 85 F1 | 	sub	fp, #12
185a4     58 AE B0 FD | 	call	#__system___float_mul
185a8     A7 FA 61 FC | 	wrlong	result1, fp
185ac     08 4E 05 F1 | 	add	fp, #8
185b0     A7 3C 68 FC | 	wrlong	#30, fp
185b4     08 4E 85 F1 | 	sub	fp, #8
185b8     28 01 90 FD | 	jmp	#LR__2019
185bc                 | LR__2015
185bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
185bc     08 4E 05 F1 | 	add	fp, #8
185c0     A7 1E 02 FB | 	rdlong	local01, fp
185c4     08 4E 85 F1 | 	sub	fp, #8
185c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
185cc     14 4E 05 A1 |  if_e	add	fp, #20
185d0     A7 22 02 AB |  if_e	rdlong	local03, fp
185d4     14 4E 85 A1 |  if_e	sub	fp, #20
185d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
185dc     28 00 90 5D |  if_ne	jmp	#LR__2016
185e0     A7 1E 02 FB | 	rdlong	local01, fp
185e4     0C 4E 05 F1 | 	add	fp, #12
185e8     A7 12 02 FB | 	rdlong	arg01, fp
185ec     0C 4E 85 F1 | 	sub	fp, #12
185f0     08 AA B0 FD | 	call	#__system___float_fromuns
185f4     FD 14 02 F6 | 	mov	arg02, result1
185f8     0F 13 02 F6 | 	mov	arg01, local01
185fc     00 AE B0 FD | 	call	#__system___float_mul
18600     A7 FA 61 FC | 	wrlong	result1, fp
18604     DC 00 90 FD | 	jmp	#LR__2019
18608                 | LR__2016
18608                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
18608     08 4E 05 F1 | 	add	fp, #8
1860c     A7 1E 02 FB | 	rdlong	local01, fp
18610     08 4E 85 F1 | 	sub	fp, #8
18614     1E 1E 0E F2 | 	cmp	local01, #30 wz
18618     14 4E 05 A1 |  if_e	add	fp, #20
1861c     A7 22 02 AB |  if_e	rdlong	local03, fp
18620     14 4E 85 A1 |  if_e	sub	fp, #20
18624     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18628     38 00 90 5D |  if_ne	jmp	#LR__2017
1862c     A7 1E 02 FB | 	rdlong	local01, fp
18630     0C 4E 05 F1 | 	add	fp, #12
18634     A7 12 02 FB | 	rdlong	arg01, fp
18638     0C 4E 85 F1 | 	sub	fp, #12
1863c     09 13 52 F6 | 	abs	arg01, arg01 wc
18640     1F 26 C6 C9 |  if_b	decod	local05, #31
18644     00 26 06 36 |  if_ae	mov	local05, #0
18648     B0 A9 B0 FD | 	call	#__system___float_fromuns
1864c     13 FB 61 F5 | 	xor	result1, local05
18650     FD 14 02 F6 | 	mov	arg02, result1
18654     0F 13 02 F6 | 	mov	arg01, local01
18658     A4 AD B0 FD | 	call	#__system___float_mul
1865c     A7 FA 61 FC | 	wrlong	result1, fp
18660     80 00 90 FD | 	jmp	#LR__2019
18664                 | LR__2017
18664                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
18664     08 4E 05 F1 | 	add	fp, #8
18668     A7 1E 02 FB | 	rdlong	local01, fp
1866c     08 4E 85 F1 | 	sub	fp, #8
18670     1E 1E 0E F2 | 	cmp	local01, #30 wz
18674     14 4E 05 A1 |  if_e	add	fp, #20
18678     A7 22 02 AB |  if_e	rdlong	local03, fp
1867c     14 4E 85 A1 |  if_e	sub	fp, #20
18680     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18684     1C 00 90 5D |  if_ne	jmp	#LR__2018
18688     A7 12 02 FB | 	rdlong	arg01, fp
1868c     0C 4E 05 F1 | 	add	fp, #12
18690     A7 14 02 FB | 	rdlong	arg02, fp
18694     0C 4E 85 F1 | 	sub	fp, #12
18698     64 AD B0 FD | 	call	#__system___float_mul
1869c     A7 FA 61 FC | 	wrlong	result1, fp
186a0     40 00 90 FD | 	jmp	#LR__2019
186a4                 | LR__2018
186a4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
186a4     08 4E 05 F1 | 	add	fp, #8
186a8     A7 1E 02 FB | 	rdlong	local01, fp
186ac     08 4E 85 F1 | 	sub	fp, #8
186b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
186b4     14 4E 05 51 |  if_ne	add	fp, #20
186b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
186bc     14 4E 85 51 |  if_ne	sub	fp, #20
186c0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
186c4     A7 10 68 AC |  if_e	wrlong	#8, fp
186c8     08 4E 05 A1 |  if_e	add	fp, #8
186cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
186d0     08 4E 85 A1 |  if_e	sub	fp, #8
186d4     A7 12 68 5C |  if_ne	wrlong	#9, fp
186d8     08 4E 05 51 |  if_ne	add	fp, #8
186dc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
186e0     08 4E 85 51 |  if_ne	sub	fp, #8
186e4                 | LR__2019
186e4     A7 12 02 F6 | 	mov	arg01, fp
186e8     48 2D BF FD | 	call	#_push
186ec     A7 F0 03 F6 | 	mov	ptra, fp
186f0     B2 00 A0 FD | 	call	#popregs_
186f4                 | _do_mul_ret
186f4     2D 00 64 FD | 	ret
186f8                 | 
186f8                 | ' 
186f8                 | ' '--------------------------------- OR
186f8                 | ' 
186f8                 | ' sub do_or 
186f8                 | _do_or
186f8     03 4A 05 F6 | 	mov	COUNT_, #3
186fc     A8 00 A0 FD | 	call	#pushregs_
18700     18 F0 07 F1 | 	add	ptra, #24
18704     94 2C BF FD | 	call	#_pop
18708     FD 12 02 F6 | 	mov	arg01, result1
1870c     FE 1E 02 F6 | 	mov	local01, result2
18710     FF 20 02 F6 | 	mov	local02, result3
18714     0C 4E 05 F1 | 	add	fp, #12
18718     A7 12 62 FC | 	wrlong	arg01, fp
1871c     04 4E 05 F1 | 	add	fp, #4
18720     A7 1E 62 FC | 	wrlong	local01, fp
18724     04 4E 05 F1 | 	add	fp, #4
18728     A7 20 62 FC | 	wrlong	local02, fp
1872c     14 4E 85 F1 | 	sub	fp, #20
18730     68 2C BF FD | 	call	#_pop
18734     FF 22 02 F6 | 	mov	local03, result3
18738     A7 FA 61 FC | 	wrlong	result1, fp
1873c     04 4E 05 F1 | 	add	fp, #4
18740     A7 FC 61 FC | 	wrlong	result2, fp
18744     04 4E 05 F1 | 	add	fp, #4
18748     A7 22 62 FC | 	wrlong	local03, fp
1874c                 | ' 
1874c                 | ' t2=pop()
1874c                 | ' t1=pop()
1874c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1874c     08 4E 85 F1 | 	sub	fp, #8
18750     1C 22 0E F2 | 	cmp	local03, #28 wz
18754     A7 22 02 AB |  if_e	rdlong	local03, fp
18758     A7 22 62 AC |  if_e	wrlong	local03, fp
1875c     08 4E 05 A1 |  if_e	add	fp, #8
18760     A7 3A 68 AC |  if_e	wrlong	#29, fp
18764     08 4E 85 A1 |  if_e	sub	fp, #8
18768                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18768     14 4E 05 F1 | 	add	fp, #20
1876c     A7 22 02 FB | 	rdlong	local03, fp
18770     14 4E 85 F1 | 	sub	fp, #20
18774     1C 22 0E F2 | 	cmp	local03, #28 wz
18778     18 00 90 5D |  if_ne	jmp	#LR__2020
1877c     0C 4E 05 F1 | 	add	fp, #12
18780     A7 22 02 FB | 	rdlong	local03, fp
18784     A7 22 62 FC | 	wrlong	local03, fp
18788     08 4E 05 F1 | 	add	fp, #8
1878c     A7 3A 68 FC | 	wrlong	#29, fp
18790     14 4E 85 F1 | 	sub	fp, #20
18794                 | LR__2020
18794                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
18794     08 4E 05 F1 | 	add	fp, #8
18798     A7 22 02 FB | 	rdlong	local03, fp
1879c     08 4E 85 F1 | 	sub	fp, #8
187a0     1F 22 0E F2 | 	cmp	local03, #31 wz
187a4     14 4E 05 51 |  if_ne	add	fp, #20
187a8     A7 20 02 5B |  if_ne	rdlong	local02, fp
187ac     14 4E 85 51 |  if_ne	sub	fp, #20
187b0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
187b4     08 4E 05 51 |  if_ne	add	fp, #8
187b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
187bc     08 4E 85 51 |  if_ne	sub	fp, #8
187c0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
187c4     14 4E 05 51 |  if_ne	add	fp, #20
187c8     14 4E 85 51 |  if_ne	sub	fp, #20
187cc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
187d0     A7 0C 68 AC |  if_e	wrlong	#6, fp
187d4     08 4E 05 A1 |  if_e	add	fp, #8
187d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
187dc     08 4E 85 A1 |  if_e	sub	fp, #8
187e0     18 00 90 AD |  if_e	jmp	#LR__2021
187e4     A7 22 02 FB | 	rdlong	local03, fp
187e8     0C 4E 05 F1 | 	add	fp, #12
187ec     A7 1E 02 FB | 	rdlong	local01, fp
187f0     0C 4E 85 F1 | 	sub	fp, #12
187f4     0F 23 42 F5 | 	or	local03, local01
187f8     A7 22 62 FC | 	wrlong	local03, fp
187fc                 | LR__2021
187fc     A7 12 02 F6 | 	mov	arg01, fp
18800     30 2C BF FD | 	call	#_push
18804     A7 F0 03 F6 | 	mov	ptra, fp
18808     B2 00 A0 FD | 	call	#popregs_
1880c                 | _do_or_ret
1880c     2D 00 64 FD | 	ret
18810                 | 
18810                 | ' 
18810                 | ' '--------------------------------- plus (+)
18810                 | ' 
18810                 | ' sub do_plus 
18810                 | _do_plus
18810     05 4A 05 F6 | 	mov	COUNT_, #5
18814     A8 00 A0 FD | 	call	#pushregs_
18818     18 F0 07 F1 | 	add	ptra, #24
1881c     7C 2B BF FD | 	call	#_pop
18820     FD 1E 02 F6 | 	mov	local01, result1
18824     FE 20 02 F6 | 	mov	local02, result2
18828     FF 22 02 F6 | 	mov	local03, result3
1882c     0C 4E 05 F1 | 	add	fp, #12
18830     A7 1E 62 FC | 	wrlong	local01, fp
18834     04 4E 05 F1 | 	add	fp, #4
18838     A7 20 62 FC | 	wrlong	local02, fp
1883c     04 4E 05 F1 | 	add	fp, #4
18840     A7 22 62 FC | 	wrlong	local03, fp
18844     14 4E 85 F1 | 	sub	fp, #20
18848     50 2B BF FD | 	call	#_pop
1884c     FF 22 02 F6 | 	mov	local03, result3
18850     A7 FA 61 FC | 	wrlong	result1, fp
18854     04 4E 05 F1 | 	add	fp, #4
18858     A7 FC 61 FC | 	wrlong	result2, fp
1885c     04 4E 05 F1 | 	add	fp, #4
18860     A7 22 62 FC | 	wrlong	local03, fp
18864                 | ' 
18864                 | ' t2=pop()
18864                 | ' t1=pop()
18864                 | ' 
18864                 | ' 
18864                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
18864     08 4E 85 F1 | 	sub	fp, #8
18868     1D 22 0E F2 | 	cmp	local03, #29 wz
1886c     14 4E 05 A1 |  if_e	add	fp, #20
18870     A7 24 02 AB |  if_e	rdlong	local04, fp
18874     14 4E 85 A1 |  if_e	sub	fp, #20
18878     12 23 02 A6 |  if_e	mov	local03, local04
1887c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18880     1C 00 90 5D |  if_ne	jmp	#LR__2030
18884     A7 1E 02 FB | 	rdlong	local01, fp
18888     0C 4E 05 F1 | 	add	fp, #12
1888c     A7 20 02 FB | 	rdlong	local02, fp
18890     0C 4E 85 F1 | 	sub	fp, #12
18894     10 1F 02 F1 | 	add	local01, local02
18898     A7 1E 62 FC | 	wrlong	local01, fp
1889c     48 04 90 FD | 	jmp	#LR__2045
188a0                 | LR__2030
188a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
188a0     08 4E 05 F1 | 	add	fp, #8
188a4     A7 1E 02 FB | 	rdlong	local01, fp
188a8     08 4E 85 F1 | 	sub	fp, #8
188ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
188b0     14 4E 05 A1 |  if_e	add	fp, #20
188b4     A7 24 02 AB |  if_e	rdlong	local04, fp
188b8     14 4E 85 A1 |  if_e	sub	fp, #20
188bc     12 23 02 A6 |  if_e	mov	local03, local04
188c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
188c4     28 00 90 5D |  if_ne	jmp	#LR__2031
188c8     A7 1E 02 FB | 	rdlong	local01, fp
188cc     0C 4E 05 F1 | 	add	fp, #12
188d0     A7 20 02 FB | 	rdlong	local02, fp
188d4     0C 4E 85 F1 | 	sub	fp, #12
188d8     10 1F 02 F1 | 	add	local01, local02
188dc     A7 1E 62 FC | 	wrlong	local01, fp
188e0     08 4E 05 F1 | 	add	fp, #8
188e4     A7 38 68 FC | 	wrlong	#28, fp
188e8     08 4E 85 F1 | 	sub	fp, #8
188ec     F8 03 90 FD | 	jmp	#LR__2045
188f0                 | LR__2031
188f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
188f0     08 4E 05 F1 | 	add	fp, #8
188f4     A7 1E 02 FB | 	rdlong	local01, fp
188f8     08 4E 85 F1 | 	sub	fp, #8
188fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
18900     14 4E 05 A1 |  if_e	add	fp, #20
18904     A7 24 02 AB |  if_e	rdlong	local04, fp
18908     14 4E 85 A1 |  if_e	sub	fp, #20
1890c     12 23 02 A6 |  if_e	mov	local03, local04
18910     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18914     30 00 90 5D |  if_ne	jmp	#LR__2032
18918     A7 12 02 FB | 	rdlong	arg01, fp
1891c     DC A6 B0 FD | 	call	#__system___float_fromuns
18920     FD 12 02 F6 | 	mov	arg01, result1
18924     0C 4E 05 F1 | 	add	fp, #12
18928     A7 14 02 FB | 	rdlong	arg02, fp
1892c     0C 4E 85 F1 | 	sub	fp, #12
18930     FC A6 B0 FD | 	call	#__system___float_add
18934     A7 FA 61 FC | 	wrlong	result1, fp
18938     08 4E 05 F1 | 	add	fp, #8
1893c     A7 3C 68 FC | 	wrlong	#30, fp
18940     08 4E 85 F1 | 	sub	fp, #8
18944     A0 03 90 FD | 	jmp	#LR__2045
18948                 | LR__2032
18948                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
18948     08 4E 05 F1 | 	add	fp, #8
1894c     A7 1E 02 FB | 	rdlong	local01, fp
18950     08 4E 85 F1 | 	sub	fp, #8
18954     1C 1E 0E F2 | 	cmp	local01, #28 wz
18958     14 4E 05 A1 |  if_e	add	fp, #20
1895c     A7 24 02 AB |  if_e	rdlong	local04, fp
18960     14 4E 85 A1 |  if_e	sub	fp, #20
18964     12 23 02 A6 |  if_e	mov	local03, local04
18968     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1896c     1C 00 90 5D |  if_ne	jmp	#LR__2033
18970     A7 1E 02 FB | 	rdlong	local01, fp
18974     0C 4E 05 F1 | 	add	fp, #12
18978     A7 20 02 FB | 	rdlong	local02, fp
1897c     0C 4E 85 F1 | 	sub	fp, #12
18980     10 1F 02 F1 | 	add	local01, local02
18984     A7 1E 62 FC | 	wrlong	local01, fp
18988     5C 03 90 FD | 	jmp	#LR__2045
1898c                 | LR__2033
1898c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1898c     08 4E 05 F1 | 	add	fp, #8
18990     A7 1E 02 FB | 	rdlong	local01, fp
18994     08 4E 85 F1 | 	sub	fp, #8
18998     1C 1E 0E F2 | 	cmp	local01, #28 wz
1899c     14 4E 05 A1 |  if_e	add	fp, #20
189a0     A7 24 02 AB |  if_e	rdlong	local04, fp
189a4     14 4E 85 A1 |  if_e	sub	fp, #20
189a8     12 23 02 A6 |  if_e	mov	local03, local04
189ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
189b0     1C 00 90 5D |  if_ne	jmp	#LR__2034
189b4     A7 1E 02 FB | 	rdlong	local01, fp
189b8     0C 4E 05 F1 | 	add	fp, #12
189bc     A7 20 02 FB | 	rdlong	local02, fp
189c0     0C 4E 85 F1 | 	sub	fp, #12
189c4     10 1F 02 F1 | 	add	local01, local02
189c8     A7 1E 62 FC | 	wrlong	local01, fp
189cc     18 03 90 FD | 	jmp	#LR__2045
189d0                 | LR__2034
189d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
189d0     08 4E 05 F1 | 	add	fp, #8
189d4     A7 1E 02 FB | 	rdlong	local01, fp
189d8     08 4E 85 F1 | 	sub	fp, #8
189dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
189e0     14 4E 05 A1 |  if_e	add	fp, #20
189e4     A7 24 02 AB |  if_e	rdlong	local04, fp
189e8     14 4E 85 A1 |  if_e	sub	fp, #20
189ec     12 23 02 A6 |  if_e	mov	local03, local04
189f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
189f4     40 00 90 5D |  if_ne	jmp	#LR__2035
189f8     A7 12 02 FB | 	rdlong	arg01, fp
189fc     09 13 52 F6 | 	abs	arg01, arg01 wc
18a00     1F 26 C6 C9 |  if_b	decod	local05, #31
18a04     00 26 06 36 |  if_ae	mov	local05, #0
18a08     F0 A5 B0 FD | 	call	#__system___float_fromuns
18a0c     13 FB 61 F5 | 	xor	result1, local05
18a10     FD 12 02 F6 | 	mov	arg01, result1
18a14     0C 4E 05 F1 | 	add	fp, #12
18a18     A7 14 02 FB | 	rdlong	arg02, fp
18a1c     0C 4E 85 F1 | 	sub	fp, #12
18a20     0C A6 B0 FD | 	call	#__system___float_add
18a24     A7 FA 61 FC | 	wrlong	result1, fp
18a28     08 4E 05 F1 | 	add	fp, #8
18a2c     A7 3C 68 FC | 	wrlong	#30, fp
18a30     08 4E 85 F1 | 	sub	fp, #8
18a34     B0 02 90 FD | 	jmp	#LR__2045
18a38                 | LR__2035
18a38                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
18a38     08 4E 05 F1 | 	add	fp, #8
18a3c     A7 1E 02 FB | 	rdlong	local01, fp
18a40     08 4E 85 F1 | 	sub	fp, #8
18a44     1E 1E 0E F2 | 	cmp	local01, #30 wz
18a48     14 4E 05 A1 |  if_e	add	fp, #20
18a4c     A7 24 02 AB |  if_e	rdlong	local04, fp
18a50     14 4E 85 A1 |  if_e	sub	fp, #20
18a54     12 23 02 A6 |  if_e	mov	local03, local04
18a58     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18a5c     28 00 90 5D |  if_ne	jmp	#LR__2036
18a60     A7 1E 02 FB | 	rdlong	local01, fp
18a64     0C 4E 05 F1 | 	add	fp, #12
18a68     A7 12 02 FB | 	rdlong	arg01, fp
18a6c     0C 4E 85 F1 | 	sub	fp, #12
18a70     88 A5 B0 FD | 	call	#__system___float_fromuns
18a74     FD 14 02 F6 | 	mov	arg02, result1
18a78     0F 13 02 F6 | 	mov	arg01, local01
18a7c     B0 A5 B0 FD | 	call	#__system___float_add
18a80     A7 FA 61 FC | 	wrlong	result1, fp
18a84     60 02 90 FD | 	jmp	#LR__2045
18a88                 | LR__2036
18a88                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
18a88     08 4E 05 F1 | 	add	fp, #8
18a8c     A7 1E 02 FB | 	rdlong	local01, fp
18a90     08 4E 85 F1 | 	sub	fp, #8
18a94     1E 1E 0E F2 | 	cmp	local01, #30 wz
18a98     14 4E 05 A1 |  if_e	add	fp, #20
18a9c     A7 24 02 AB |  if_e	rdlong	local04, fp
18aa0     14 4E 85 A1 |  if_e	sub	fp, #20
18aa4     12 23 02 A6 |  if_e	mov	local03, local04
18aa8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18aac     38 00 90 5D |  if_ne	jmp	#LR__2037
18ab0     A7 1E 02 FB | 	rdlong	local01, fp
18ab4     0C 4E 05 F1 | 	add	fp, #12
18ab8     A7 12 02 FB | 	rdlong	arg01, fp
18abc     0C 4E 85 F1 | 	sub	fp, #12
18ac0     09 13 52 F6 | 	abs	arg01, arg01 wc
18ac4     1F 26 C6 C9 |  if_b	decod	local05, #31
18ac8     00 26 06 36 |  if_ae	mov	local05, #0
18acc     2C A5 B0 FD | 	call	#__system___float_fromuns
18ad0     13 FB 61 F5 | 	xor	result1, local05
18ad4     FD 14 02 F6 | 	mov	arg02, result1
18ad8     0F 13 02 F6 | 	mov	arg01, local01
18adc     50 A5 B0 FD | 	call	#__system___float_add
18ae0     A7 FA 61 FC | 	wrlong	result1, fp
18ae4     00 02 90 FD | 	jmp	#LR__2045
18ae8                 | LR__2037
18ae8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
18ae8     08 4E 05 F1 | 	add	fp, #8
18aec     A7 1E 02 FB | 	rdlong	local01, fp
18af0     08 4E 85 F1 | 	sub	fp, #8
18af4     1E 1E 0E F2 | 	cmp	local01, #30 wz
18af8     14 4E 05 A1 |  if_e	add	fp, #20
18afc     A7 24 02 AB |  if_e	rdlong	local04, fp
18b00     14 4E 85 A1 |  if_e	sub	fp, #20
18b04     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
18b08     1C 00 90 5D |  if_ne	jmp	#LR__2038
18b0c     A7 12 02 FB | 	rdlong	arg01, fp
18b10     0C 4E 05 F1 | 	add	fp, #12
18b14     A7 14 02 FB | 	rdlong	arg02, fp
18b18     0C 4E 85 F1 | 	sub	fp, #12
18b1c     10 A5 B0 FD | 	call	#__system___float_add
18b20     A7 FA 61 FC | 	wrlong	result1, fp
18b24     C0 01 90 FD | 	jmp	#LR__2045
18b28                 | LR__2038
18b28                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
18b28     08 4E 05 F1 | 	add	fp, #8
18b2c     A7 1E 02 FB | 	rdlong	local01, fp
18b30     08 4E 85 F1 | 	sub	fp, #8
18b34     1F 1E 0E F2 | 	cmp	local01, #31 wz
18b38     24 00 90 5D |  if_ne	jmp	#LR__2039
18b3c     14 4E 05 F1 | 	add	fp, #20
18b40     A7 22 02 FB | 	rdlong	local03, fp
18b44     14 4E 85 F1 | 	sub	fp, #20
18b48     1F 22 0E F2 | 	cmp	local03, #31 wz
18b4c     A7 04 68 5C |  if_ne	wrlong	#2, fp
18b50     08 4E 05 51 |  if_ne	add	fp, #8
18b54     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18b58     08 4E 85 51 |  if_ne	sub	fp, #8
18b5c     88 01 90 5D |  if_ne	jmp	#LR__2045
18b60                 | LR__2039
18b60                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
18b60     14 4E 05 F1 | 	add	fp, #20
18b64     A7 1E 02 FB | 	rdlong	local01, fp
18b68     14 4E 85 F1 | 	sub	fp, #20
18b6c     1F 1E 0E F2 | 	cmp	local01, #31 wz
18b70     24 00 90 5D |  if_ne	jmp	#LR__2040
18b74     08 4E 05 F1 | 	add	fp, #8
18b78     A7 22 02 FB | 	rdlong	local03, fp
18b7c     08 4E 85 F1 | 	sub	fp, #8
18b80     1F 22 0E F2 | 	cmp	local03, #31 wz
18b84     A7 04 68 5C |  if_ne	wrlong	#2, fp
18b88     08 4E 05 51 |  if_ne	add	fp, #8
18b8c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18b90     08 4E 85 51 |  if_ne	sub	fp, #8
18b94     50 01 90 5D |  if_ne	jmp	#LR__2045
18b98                 | LR__2040
18b98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
18b98     08 4E 05 F1 | 	add	fp, #8
18b9c     A7 1E 02 FB | 	rdlong	local01, fp
18ba0     08 4E 85 F1 | 	sub	fp, #8
18ba4     1F 1E 0E F2 | 	cmp	local01, #31 wz
18ba8     14 4E 05 A1 |  if_e	add	fp, #20
18bac     A7 22 02 AB |  if_e	rdlong	local03, fp
18bb0     14 4E 85 A1 |  if_e	sub	fp, #20
18bb4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18bb8     1C 00 90 5D |  if_ne	jmp	#LR__2041
18bbc     A7 12 02 FB | 	rdlong	arg01, fp
18bc0     0C 4E 05 F1 | 	add	fp, #12
18bc4     A7 14 02 FB | 	rdlong	arg02, fp
18bc8     0C 4E 85 F1 | 	sub	fp, #12
18bcc     D8 7C B0 FD | 	call	#__system___string_concat
18bd0     A7 FA 61 FC | 	wrlong	result1, fp
18bd4     10 01 90 FD | 	jmp	#LR__2045
18bd8                 | LR__2041
18bd8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
18bd8     08 4E 05 F1 | 	add	fp, #8
18bdc     A7 1E 02 FB | 	rdlong	local01, fp
18be0     08 4E 85 F1 | 	sub	fp, #8
18be4     2B 1E 0E F2 | 	cmp	local01, #43 wz
18be8     14 4E 05 A1 |  if_e	add	fp, #20
18bec     A7 22 02 AB |  if_e	rdlong	local03, fp
18bf0     14 4E 85 A1 |  if_e	sub	fp, #20
18bf4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18bf8     30 00 90 5D |  if_ne	jmp	#LR__2042
18bfc     A7 12 02 FB | 	rdlong	arg01, fp
18c00     10 29 BF FD | 	call	#_convertstring
18c04     FD 12 02 F6 | 	mov	arg01, result1
18c08     0C 4E 05 F1 | 	add	fp, #12
18c0c     A7 14 02 FB | 	rdlong	arg02, fp
18c10     0C 4E 85 F1 | 	sub	fp, #12
18c14     90 7C B0 FD | 	call	#__system___string_concat
18c18     A7 FA 61 FC | 	wrlong	result1, fp
18c1c     08 4E 05 F1 | 	add	fp, #8
18c20     A7 3E 68 FC | 	wrlong	#31, fp
18c24     08 4E 85 F1 | 	sub	fp, #8
18c28     BC 00 90 FD | 	jmp	#LR__2045
18c2c                 | LR__2042
18c2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
18c2c     08 4E 05 F1 | 	add	fp, #8
18c30     A7 1E 02 FB | 	rdlong	local01, fp
18c34     08 4E 85 F1 | 	sub	fp, #8
18c38     1F 1E 0E F2 | 	cmp	local01, #31 wz
18c3c     14 4E 05 A1 |  if_e	add	fp, #20
18c40     A7 22 02 AB |  if_e	rdlong	local03, fp
18c44     14 4E 85 A1 |  if_e	sub	fp, #20
18c48     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18c4c     28 00 90 5D |  if_ne	jmp	#LR__2043
18c50     A7 1E 02 FB | 	rdlong	local01, fp
18c54     0C 4E 05 F1 | 	add	fp, #12
18c58     A7 12 02 FB | 	rdlong	arg01, fp
18c5c     0C 4E 85 F1 | 	sub	fp, #12
18c60     B0 28 BF FD | 	call	#_convertstring
18c64     FD 14 02 F6 | 	mov	arg02, result1
18c68     0F 13 02 F6 | 	mov	arg01, local01
18c6c     38 7C B0 FD | 	call	#__system___string_concat
18c70     A7 FA 61 FC | 	wrlong	result1, fp
18c74     70 00 90 FD | 	jmp	#LR__2045
18c78                 | LR__2043
18c78                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
18c78     08 4E 05 F1 | 	add	fp, #8
18c7c     A7 1E 02 FB | 	rdlong	local01, fp
18c80     08 4E 85 F1 | 	sub	fp, #8
18c84     2B 1E 0E F2 | 	cmp	local01, #43 wz
18c88     14 4E 05 A1 |  if_e	add	fp, #20
18c8c     A7 22 02 AB |  if_e	rdlong	local03, fp
18c90     14 4E 85 A1 |  if_e	sub	fp, #20
18c94     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18c98     3C 00 90 5D |  if_ne	jmp	#LR__2044
18c9c     A7 12 02 FB | 	rdlong	arg01, fp
18ca0     70 28 BF FD | 	call	#_convertstring
18ca4     FD 1E 02 F6 | 	mov	local01, result1
18ca8     0C 4E 05 F1 | 	add	fp, #12
18cac     A7 12 02 FB | 	rdlong	arg01, fp
18cb0     0C 4E 85 F1 | 	sub	fp, #12
18cb4     5C 28 BF FD | 	call	#_convertstring
18cb8     FD 14 02 F6 | 	mov	arg02, result1
18cbc     0F 13 02 F6 | 	mov	arg01, local01
18cc0     E4 7B B0 FD | 	call	#__system___string_concat
18cc4     A7 FA 61 FC | 	wrlong	result1, fp
18cc8     08 4E 05 F1 | 	add	fp, #8
18ccc     A7 3E 68 FC | 	wrlong	#31, fp
18cd0     08 4E 85 F1 | 	sub	fp, #8
18cd4     10 00 90 FD | 	jmp	#LR__2045
18cd8                 | LR__2044
18cd8     A7 08 68 FC | 	wrlong	#4, fp
18cdc     08 4E 05 F1 | 	add	fp, #8
18ce0     A7 FE 69 FC | 	wrlong	#255, fp
18ce4     08 4E 85 F1 | 	sub	fp, #8
18ce8                 | LR__2045
18ce8     A7 12 02 F6 | 	mov	arg01, fp
18cec     44 27 BF FD | 	call	#_push
18cf0     A7 F0 03 F6 | 	mov	ptra, fp
18cf4     B2 00 A0 FD | 	call	#popregs_
18cf8                 | _do_plus_ret
18cf8     2D 00 64 FD | 	ret
18cfc                 | 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' 
18cfc                 | ' sub do_shl 
18cfc                 | _do_shl
18cfc     03 4A 05 F6 | 	mov	COUNT_, #3
18d00     A8 00 A0 FD | 	call	#pushregs_
18d04     18 F0 07 F1 | 	add	ptra, #24
18d08     90 26 BF FD | 	call	#_pop
18d0c     FD 12 02 F6 | 	mov	arg01, result1
18d10     FE 1E 02 F6 | 	mov	local01, result2
18d14     FF 20 02 F6 | 	mov	local02, result3
18d18     0C 4E 05 F1 | 	add	fp, #12
18d1c     A7 12 62 FC | 	wrlong	arg01, fp
18d20     04 4E 05 F1 | 	add	fp, #4
18d24     A7 1E 62 FC | 	wrlong	local01, fp
18d28     04 4E 05 F1 | 	add	fp, #4
18d2c     A7 20 62 FC | 	wrlong	local02, fp
18d30     14 4E 85 F1 | 	sub	fp, #20
18d34     64 26 BF FD | 	call	#_pop
18d38     FF 22 02 F6 | 	mov	local03, result3
18d3c     A7 FA 61 FC | 	wrlong	result1, fp
18d40     04 4E 05 F1 | 	add	fp, #4
18d44     A7 FC 61 FC | 	wrlong	result2, fp
18d48     04 4E 05 F1 | 	add	fp, #4
18d4c     A7 22 62 FC | 	wrlong	local03, fp
18d50                 | ' 
18d50                 | ' t2=pop()
18d50                 | ' t1=pop()
18d50                 | ' 
18d50                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18d50     08 4E 85 F1 | 	sub	fp, #8
18d54     1C 22 0E F2 | 	cmp	local03, #28 wz
18d58     A7 22 02 AB |  if_e	rdlong	local03, fp
18d5c     A7 22 62 AC |  if_e	wrlong	local03, fp
18d60     08 4E 05 A1 |  if_e	add	fp, #8
18d64     A7 3A 68 AC |  if_e	wrlong	#29, fp
18d68     08 4E 85 A1 |  if_e	sub	fp, #8
18d6c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18d6c     14 4E 05 F1 | 	add	fp, #20
18d70     A7 22 02 FB | 	rdlong	local03, fp
18d74     14 4E 85 F1 | 	sub	fp, #20
18d78     1C 22 0E F2 | 	cmp	local03, #28 wz
18d7c     18 00 90 5D |  if_ne	jmp	#LR__2050
18d80     0C 4E 05 F1 | 	add	fp, #12
18d84     A7 22 02 FB | 	rdlong	local03, fp
18d88     A7 22 62 FC | 	wrlong	local03, fp
18d8c     08 4E 05 F1 | 	add	fp, #8
18d90     A7 3A 68 FC | 	wrlong	#29, fp
18d94     14 4E 85 F1 | 	sub	fp, #20
18d98                 | LR__2050
18d98                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
18d98     08 4E 05 F1 | 	add	fp, #8
18d9c     A7 22 02 FB | 	rdlong	local03, fp
18da0     08 4E 85 F1 | 	sub	fp, #8
18da4     1F 22 0E F2 | 	cmp	local03, #31 wz
18da8     14 4E 05 51 |  if_ne	add	fp, #20
18dac     A7 20 02 5B |  if_ne	rdlong	local02, fp
18db0     14 4E 85 51 |  if_ne	sub	fp, #20
18db4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
18db8     08 4E 05 51 |  if_ne	add	fp, #8
18dbc     A7 22 02 5B |  if_ne	rdlong	local03, fp
18dc0     08 4E 85 51 |  if_ne	sub	fp, #8
18dc4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
18dc8     14 4E 05 51 |  if_ne	add	fp, #20
18dcc     14 4E 85 51 |  if_ne	sub	fp, #20
18dd0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
18dd4     A7 0C 68 AC |  if_e	wrlong	#6, fp
18dd8     08 4E 05 A1 |  if_e	add	fp, #8
18ddc     A7 FE 69 AC |  if_e	wrlong	#255, fp
18de0     08 4E 85 A1 |  if_e	sub	fp, #8
18de4     18 00 90 AD |  if_e	jmp	#LR__2051
18de8     A7 22 02 FB | 	rdlong	local03, fp
18dec     0C 4E 05 F1 | 	add	fp, #12
18df0     A7 1E 02 FB | 	rdlong	local01, fp
18df4     0C 4E 85 F1 | 	sub	fp, #12
18df8     0F 23 62 F0 | 	shl	local03, local01
18dfc     A7 22 62 FC | 	wrlong	local03, fp
18e00                 | LR__2051
18e00     A7 12 02 F6 | 	mov	arg01, fp
18e04     2C 26 BF FD | 	call	#_push
18e08     A7 F0 03 F6 | 	mov	ptra, fp
18e0c     B2 00 A0 FD | 	call	#popregs_
18e10                 | _do_shl_ret
18e10     2D 00 64 FD | 	ret
18e14                 | 
18e14                 | ' 
18e14                 | ' sub do_shr 
18e14                 | _do_shr
18e14     03 4A 05 F6 | 	mov	COUNT_, #3
18e18     A8 00 A0 FD | 	call	#pushregs_
18e1c     18 F0 07 F1 | 	add	ptra, #24
18e20     78 25 BF FD | 	call	#_pop
18e24     FD 12 02 F6 | 	mov	arg01, result1
18e28     FE 1E 02 F6 | 	mov	local01, result2
18e2c     FF 20 02 F6 | 	mov	local02, result3
18e30     0C 4E 05 F1 | 	add	fp, #12
18e34     A7 12 62 FC | 	wrlong	arg01, fp
18e38     04 4E 05 F1 | 	add	fp, #4
18e3c     A7 1E 62 FC | 	wrlong	local01, fp
18e40     04 4E 05 F1 | 	add	fp, #4
18e44     A7 20 62 FC | 	wrlong	local02, fp
18e48     14 4E 85 F1 | 	sub	fp, #20
18e4c     4C 25 BF FD | 	call	#_pop
18e50     FF 22 02 F6 | 	mov	local03, result3
18e54     A7 FA 61 FC | 	wrlong	result1, fp
18e58     04 4E 05 F1 | 	add	fp, #4
18e5c     A7 FC 61 FC | 	wrlong	result2, fp
18e60     04 4E 05 F1 | 	add	fp, #4
18e64     A7 22 62 FC | 	wrlong	local03, fp
18e68                 | ' t2=pop()
18e68                 | ' t1=pop()
18e68                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18e68     08 4E 85 F1 | 	sub	fp, #8
18e6c     1C 22 0E F2 | 	cmp	local03, #28 wz
18e70     A7 22 02 AB |  if_e	rdlong	local03, fp
18e74     A7 22 62 AC |  if_e	wrlong	local03, fp
18e78     08 4E 05 A1 |  if_e	add	fp, #8
18e7c     A7 3A 68 AC |  if_e	wrlong	#29, fp
18e80     08 4E 85 A1 |  if_e	sub	fp, #8
18e84                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18e84     14 4E 05 F1 | 	add	fp, #20
18e88     A7 22 02 FB | 	rdlong	local03, fp
18e8c     14 4E 85 F1 | 	sub	fp, #20
18e90     1C 22 0E F2 | 	cmp	local03, #28 wz
18e94     18 00 90 5D |  if_ne	jmp	#LR__2060
18e98     0C 4E 05 F1 | 	add	fp, #12
18e9c     A7 22 02 FB | 	rdlong	local03, fp
18ea0     A7 22 62 FC | 	wrlong	local03, fp
18ea4     08 4E 05 F1 | 	add	fp, #8
18ea8     A7 3A 68 FC | 	wrlong	#29, fp
18eac     14 4E 85 F1 | 	sub	fp, #20
18eb0                 | LR__2060
18eb0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
18eb0     08 4E 05 F1 | 	add	fp, #8
18eb4     A7 22 02 FB | 	rdlong	local03, fp
18eb8     08 4E 85 F1 | 	sub	fp, #8
18ebc     1F 22 0E F2 | 	cmp	local03, #31 wz
18ec0     14 4E 05 51 |  if_ne	add	fp, #20
18ec4     A7 20 02 5B |  if_ne	rdlong	local02, fp
18ec8     14 4E 85 51 |  if_ne	sub	fp, #20
18ecc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
18ed0     08 4E 05 51 |  if_ne	add	fp, #8
18ed4     A7 22 02 5B |  if_ne	rdlong	local03, fp
18ed8     08 4E 85 51 |  if_ne	sub	fp, #8
18edc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
18ee0     14 4E 05 51 |  if_ne	add	fp, #20
18ee4     14 4E 85 51 |  if_ne	sub	fp, #20
18ee8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
18eec     A7 0C 68 AC |  if_e	wrlong	#6, fp
18ef0     08 4E 05 A1 |  if_e	add	fp, #8
18ef4     A7 FE 69 AC |  if_e	wrlong	#255, fp
18ef8     08 4E 85 A1 |  if_e	sub	fp, #8
18efc     18 00 90 AD |  if_e	jmp	#LR__2061
18f00     A7 22 02 FB | 	rdlong	local03, fp
18f04     0C 4E 05 F1 | 	add	fp, #12
18f08     A7 1E 02 FB | 	rdlong	local01, fp
18f0c     0C 4E 85 F1 | 	sub	fp, #12
18f10     0F 23 42 F0 | 	shr	local03, local01
18f14     A7 22 62 FC | 	wrlong	local03, fp
18f18                 | LR__2061
18f18     A7 12 02 F6 | 	mov	arg01, fp
18f1c     14 25 BF FD | 	call	#_push
18f20     A7 F0 03 F6 | 	mov	ptra, fp
18f24     B2 00 A0 FD | 	call	#popregs_
18f28                 | _do_shr_ret
18f28     2D 00 64 FD | 	ret
18f2c                 | 
18f2c                 | ' 
18f2c                 | ' sub do_power 
18f2c                 | _do_power
18f2c     02 4A 05 F6 | 	mov	COUNT_, #2
18f30     A8 00 A0 FD | 	call	#pushregs_
18f34     18 F0 07 F1 | 	add	ptra, #24
18f38     60 24 BF FD | 	call	#_pop
18f3c     FD 14 02 F6 | 	mov	arg02, result1
18f40     FE 12 02 F6 | 	mov	arg01, result2
18f44     FF 1E 02 F6 | 	mov	local01, result3
18f48     0C 4E 05 F1 | 	add	fp, #12
18f4c     A7 14 62 FC | 	wrlong	arg02, fp
18f50     04 4E 05 F1 | 	add	fp, #4
18f54     A7 12 62 FC | 	wrlong	arg01, fp
18f58     04 4E 05 F1 | 	add	fp, #4
18f5c     A7 1E 62 FC | 	wrlong	local01, fp
18f60     14 4E 85 F1 | 	sub	fp, #20
18f64     34 24 BF FD | 	call	#_pop
18f68     A7 FA 61 FC | 	wrlong	result1, fp
18f6c     04 4E 05 F1 | 	add	fp, #4
18f70     A7 FC 61 FC | 	wrlong	result2, fp
18f74     04 4E 05 F1 | 	add	fp, #4
18f78     A7 FE 61 FC | 	wrlong	result3, fp
18f7c                 | ' t2=pop()
18f7c                 | ' t1=pop()
18f7c                 | ' 
18f7c                 | ' 
18f7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
18f7c     08 4E 85 F1 | 	sub	fp, #8
18f80     1F FE 0D F2 | 	cmp	result3, #31 wz
18f84     14 4E 05 51 |  if_ne	add	fp, #20
18f88     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18f8c     14 4E 85 51 |  if_ne	sub	fp, #20
18f90     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
18f94     A7 18 68 AC |  if_e	wrlong	#12, fp
18f98     08 4E 05 A1 |  if_e	add	fp, #8
18f9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
18fa0     08 4E 85 A1 |  if_e	sub	fp, #8
18fa4     38 01 90 AD |  if_e	jmp	#LR__2075
18fa8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
18fa8     08 4E 05 F1 | 	add	fp, #8
18fac     A7 14 02 FB | 	rdlong	arg02, fp
18fb0     08 4E 85 F1 | 	sub	fp, #8
18fb4     1C 14 0E F2 | 	cmp	arg02, #28 wz
18fb8     28 00 90 5D |  if_ne	jmp	#LR__2070
18fbc     08 4E 05 F1 | 	add	fp, #8
18fc0     A7 3C 68 FC | 	wrlong	#30, fp
18fc4     08 4E 85 F1 | 	sub	fp, #8
18fc8     A7 12 02 FB | 	rdlong	arg01, fp
18fcc     09 13 52 F6 | 	abs	arg01, arg01 wc
18fd0     1F 20 C6 C9 |  if_b	decod	local02, #31
18fd4     00 20 06 36 |  if_ae	mov	local02, #0
18fd8     20 A0 B0 FD | 	call	#__system___float_fromuns
18fdc     10 FB 61 F5 | 	xor	result1, local02
18fe0     A7 FA 61 FC | 	wrlong	result1, fp
18fe4                 | LR__2070
18fe4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
18fe4     08 4E 05 F1 | 	add	fp, #8
18fe8     A7 14 02 FB | 	rdlong	arg02, fp
18fec     08 4E 85 F1 | 	sub	fp, #8
18ff0     1D 14 0E F2 | 	cmp	arg02, #29 wz
18ff4     18 00 90 5D |  if_ne	jmp	#LR__2071
18ff8     08 4E 05 F1 | 	add	fp, #8
18ffc     A7 3C 68 FC | 	wrlong	#30, fp
19000     08 4E 85 F1 | 	sub	fp, #8
19004     A7 12 02 FB | 	rdlong	arg01, fp
19008     F0 9F B0 FD | 	call	#__system___float_fromuns
1900c     A7 FA 61 FC | 	wrlong	result1, fp
19010                 | LR__2071
19010                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
19010     14 4E 05 F1 | 	add	fp, #20
19014     A7 14 02 FB | 	rdlong	arg02, fp
19018     14 4E 85 F1 | 	sub	fp, #20
1901c     1C 14 0E F2 | 	cmp	arg02, #28 wz
19020     34 00 90 5D |  if_ne	jmp	#LR__2072
19024     14 4E 05 F1 | 	add	fp, #20
19028     A7 3C 68 FC | 	wrlong	#30, fp
1902c     08 4E 85 F1 | 	sub	fp, #8
19030     A7 12 02 FB | 	rdlong	arg01, fp
19034     0C 4E 85 F1 | 	sub	fp, #12
19038     09 13 52 F6 | 	abs	arg01, arg01 wc
1903c     1F 20 C6 C9 |  if_b	decod	local02, #31
19040     00 20 06 36 |  if_ae	mov	local02, #0
19044     B4 9F B0 FD | 	call	#__system___float_fromuns
19048     10 FB 61 F5 | 	xor	result1, local02
1904c     0C 4E 05 F1 | 	add	fp, #12
19050     A7 FA 61 FC | 	wrlong	result1, fp
19054     0C 4E 85 F1 | 	sub	fp, #12
19058                 | LR__2072
19058                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
19058     14 4E 05 F1 | 	add	fp, #20
1905c     A7 14 02 FB | 	rdlong	arg02, fp
19060     14 4E 85 F1 | 	sub	fp, #20
19064     1D 14 0E F2 | 	cmp	arg02, #29 wz
19068     24 00 90 5D |  if_ne	jmp	#LR__2073
1906c     14 4E 05 F1 | 	add	fp, #20
19070     A7 3C 68 FC | 	wrlong	#30, fp
19074     08 4E 85 F1 | 	sub	fp, #8
19078     A7 12 02 FB | 	rdlong	arg01, fp
1907c     0C 4E 85 F1 | 	sub	fp, #12
19080     78 9F B0 FD | 	call	#__system___float_fromuns
19084     0C 4E 05 F1 | 	add	fp, #12
19088     A7 FA 61 FC | 	wrlong	result1, fp
1908c     0C 4E 85 F1 | 	sub	fp, #12
19090                 | LR__2073
19090                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
19090     08 4E 05 F1 | 	add	fp, #8
19094     A7 14 02 FB | 	rdlong	arg02, fp
19098     08 4E 85 F1 | 	sub	fp, #8
1909c     1E 14 0E F2 | 	cmp	arg02, #30 wz
190a0     14 4E 05 A1 |  if_e	add	fp, #20
190a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
190a8     14 4E 85 A1 |  if_e	sub	fp, #20
190ac     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
190b0     1C 00 90 5D |  if_ne	jmp	#LR__2074
190b4     A7 12 02 FB | 	rdlong	arg01, fp
190b8     0C 4E 05 F1 | 	add	fp, #12
190bc     A7 14 02 FB | 	rdlong	arg02, fp
190c0     0C 4E 85 F1 | 	sub	fp, #12
190c4     40 B2 B0 FD | 	call	#__system____builtin_powf
190c8     A7 FA 61 FC | 	wrlong	result1, fp
190cc     10 00 90 FD | 	jmp	#LR__2075
190d0                 | LR__2074
190d0     A7 1A 68 FC | 	wrlong	#13, fp
190d4     08 4E 05 F1 | 	add	fp, #8
190d8     A7 FE 69 FC | 	wrlong	#255, fp
190dc     08 4E 85 F1 | 	sub	fp, #8
190e0                 | LR__2075
190e0     A7 12 02 F6 | 	mov	arg01, fp
190e4     4C 23 BF FD | 	call	#_push
190e8     A7 F0 03 F6 | 	mov	ptra, fp
190ec     B2 00 A0 FD | 	call	#popregs_
190f0                 | _do_power_ret
190f0     2D 00 64 FD | 	ret
190f4                 | 
190f4                 | ' 
190f4                 | ' 
190f4                 | ' sub do_eq
190f4                 | _do_eq
190f4     05 4A 05 F6 | 	mov	COUNT_, #5
190f8     A8 00 A0 FD | 	call	#pushregs_
190fc     18 F0 07 F1 | 	add	ptra, #24
19100     98 22 BF FD | 	call	#_pop
19104     FD 1E 02 F6 | 	mov	local01, result1
19108     FE 20 02 F6 | 	mov	local02, result2
1910c     FF 22 02 F6 | 	mov	local03, result3
19110     0C 4E 05 F1 | 	add	fp, #12
19114     A7 1E 62 FC | 	wrlong	local01, fp
19118     04 4E 05 F1 | 	add	fp, #4
1911c     A7 20 62 FC | 	wrlong	local02, fp
19120     04 4E 05 F1 | 	add	fp, #4
19124     A7 22 62 FC | 	wrlong	local03, fp
19128     14 4E 85 F1 | 	sub	fp, #20
1912c     6C 22 BF FD | 	call	#_pop
19130     FF 22 02 F6 | 	mov	local03, result3
19134     A7 FA 61 FC | 	wrlong	result1, fp
19138     04 4E 05 F1 | 	add	fp, #4
1913c     A7 FC 61 FC | 	wrlong	result2, fp
19140     04 4E 05 F1 | 	add	fp, #4
19144     A7 22 62 FC | 	wrlong	local03, fp
19148                 | ' t2=pop()
19148                 | ' t1=pop()
19148                 | ' 
19148                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
19148     08 4E 85 F1 | 	sub	fp, #8
1914c     1F 22 0E F2 | 	cmp	local03, #31 wz
19150     14 4E 05 A1 |  if_e	add	fp, #20
19154     A7 24 02 AB |  if_e	rdlong	local04, fp
19158     14 4E 85 A1 |  if_e	sub	fp, #20
1915c     12 23 02 A6 |  if_e	mov	local03, local04
19160     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19164     28 00 90 5D |  if_ne	jmp	#LR__2080
19168     00 1E 06 F6 | 	mov	local01, #0
1916c     A7 12 02 FB | 	rdlong	arg01, fp
19170     0C 4E 05 F1 | 	add	fp, #12
19174     A7 14 02 FB | 	rdlong	arg02, fp
19178     0C 4E 85 F1 | 	sub	fp, #12
1917c     F4 76 B0 FD | 	call	#__system___string_cmp
19180     00 FA 0D F2 | 	cmp	result1, #0 wz
19184     00 1E 26 A6 |  if_e	not	local01, #0
19188     A7 1E 62 FC | 	wrlong	local01, fp
1918c     1C 04 90 FD | 	jmp	#LR__2093
19190                 | LR__2080
19190                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
19190     08 4E 05 F1 | 	add	fp, #8
19194     A7 1E 02 FB | 	rdlong	local01, fp
19198     08 4E 85 F1 | 	sub	fp, #8
1919c     1E 1E 0E F2 | 	cmp	local01, #30 wz
191a0     14 4E 05 A1 |  if_e	add	fp, #20
191a4     A7 24 02 AB |  if_e	rdlong	local04, fp
191a8     14 4E 85 A1 |  if_e	sub	fp, #20
191ac     12 23 02 A6 |  if_e	mov	local03, local04
191b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
191b4     2C 00 90 5D |  if_ne	jmp	#LR__2081
191b8     00 1E 06 F6 | 	mov	local01, #0
191bc     A7 12 02 FB | 	rdlong	arg01, fp
191c0     0C 4E 05 F1 | 	add	fp, #12
191c4     A7 14 02 FB | 	rdlong	arg02, fp
191c8     0C 4E 85 F1 | 	sub	fp, #12
191cc     01 16 06 F6 | 	mov	arg03, #1
191d0     60 A6 B0 FD | 	call	#__system___float_cmp
191d4     00 FA 0D F2 | 	cmp	result1, #0 wz
191d8     00 1E 26 A6 |  if_e	not	local01, #0
191dc     A7 1E 62 FC | 	wrlong	local01, fp
191e0     C8 03 90 FD | 	jmp	#LR__2093
191e4                 | LR__2081
191e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
191e4     08 4E 05 F1 | 	add	fp, #8
191e8     A7 1E 02 FB | 	rdlong	local01, fp
191ec     08 4E 85 F1 | 	sub	fp, #8
191f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
191f4     14 4E 05 A1 |  if_e	add	fp, #20
191f8     A7 24 02 AB |  if_e	rdlong	local04, fp
191fc     14 4E 85 A1 |  if_e	sub	fp, #20
19200     12 23 02 A6 |  if_e	mov	local03, local04
19204     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19208     48 00 90 5D |  if_ne	jmp	#LR__2082
1920c     00 1E 06 F6 | 	mov	local01, #0
19210     A7 20 02 FB | 	rdlong	local02, fp
19214     0C 4E 05 F1 | 	add	fp, #12
19218     A7 12 02 FB | 	rdlong	arg01, fp
1921c     0C 4E 85 F1 | 	sub	fp, #12
19220     09 13 52 F6 | 	abs	arg01, arg01 wc
19224     1F 26 C6 C9 |  if_b	decod	local05, #31
19228     00 26 06 36 |  if_ae	mov	local05, #0
1922c     CC 9D B0 FD | 	call	#__system___float_fromuns
19230     13 FB 61 F5 | 	xor	result1, local05
19234     FD 14 02 F6 | 	mov	arg02, result1
19238     10 13 02 F6 | 	mov	arg01, local02
1923c     01 16 06 F6 | 	mov	arg03, #1
19240     F0 A5 B0 FD | 	call	#__system___float_cmp
19244     00 FA 0D F2 | 	cmp	result1, #0 wz
19248     00 1E 26 A6 |  if_e	not	local01, #0
1924c     A7 1E 62 FC | 	wrlong	local01, fp
19250     58 03 90 FD | 	jmp	#LR__2093
19254                 | LR__2082
19254                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
19254     08 4E 05 F1 | 	add	fp, #8
19258     A7 1E 02 FB | 	rdlong	local01, fp
1925c     08 4E 85 F1 | 	sub	fp, #8
19260     1E 1E 0E F2 | 	cmp	local01, #30 wz
19264     14 4E 05 A1 |  if_e	add	fp, #20
19268     A7 24 02 AB |  if_e	rdlong	local04, fp
1926c     14 4E 85 A1 |  if_e	sub	fp, #20
19270     12 23 02 A6 |  if_e	mov	local03, local04
19274     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19278     38 00 90 5D |  if_ne	jmp	#LR__2083
1927c     00 1E 06 F6 | 	mov	local01, #0
19280     A7 20 02 FB | 	rdlong	local02, fp
19284     0C 4E 05 F1 | 	add	fp, #12
19288     A7 12 02 FB | 	rdlong	arg01, fp
1928c     0C 4E 85 F1 | 	sub	fp, #12
19290     68 9D B0 FD | 	call	#__system___float_fromuns
19294     FD 14 02 F6 | 	mov	arg02, result1
19298     10 13 02 F6 | 	mov	arg01, local02
1929c     01 16 06 F6 | 	mov	arg03, #1
192a0     90 A5 B0 FD | 	call	#__system___float_cmp
192a4     00 FA 0D F2 | 	cmp	result1, #0 wz
192a8     00 1E 26 A6 |  if_e	not	local01, #0
192ac     A7 1E 62 FC | 	wrlong	local01, fp
192b0     F8 02 90 FD | 	jmp	#LR__2093
192b4                 | LR__2083
192b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
192b4     08 4E 05 F1 | 	add	fp, #8
192b8     A7 1E 02 FB | 	rdlong	local01, fp
192bc     08 4E 85 F1 | 	sub	fp, #8
192c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
192c4     14 4E 05 A1 |  if_e	add	fp, #20
192c8     A7 24 02 AB |  if_e	rdlong	local04, fp
192cc     14 4E 85 A1 |  if_e	sub	fp, #20
192d0     12 23 02 A6 |  if_e	mov	local03, local04
192d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
192d8     44 00 90 5D |  if_ne	jmp	#LR__2084
192dc     00 1E 06 F6 | 	mov	local01, #0
192e0     A7 12 02 FB | 	rdlong	arg01, fp
192e4     09 13 52 F6 | 	abs	arg01, arg01 wc
192e8     1F 26 C6 C9 |  if_b	decod	local05, #31
192ec     00 26 06 36 |  if_ae	mov	local05, #0
192f0     08 9D B0 FD | 	call	#__system___float_fromuns
192f4     13 FB 61 F5 | 	xor	result1, local05
192f8     FD 12 02 F6 | 	mov	arg01, result1
192fc     0C 4E 05 F1 | 	add	fp, #12
19300     A7 14 02 FB | 	rdlong	arg02, fp
19304     0C 4E 85 F1 | 	sub	fp, #12
19308     01 16 06 F6 | 	mov	arg03, #1
1930c     24 A5 B0 FD | 	call	#__system___float_cmp
19310     00 FA 0D F2 | 	cmp	result1, #0 wz
19314     00 1E 26 A6 |  if_e	not	local01, #0
19318     A7 1E 62 FC | 	wrlong	local01, fp
1931c     8C 02 90 FD | 	jmp	#LR__2093
19320                 | LR__2084
19320                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
19320     08 4E 05 F1 | 	add	fp, #8
19324     A7 1E 02 FB | 	rdlong	local01, fp
19328     08 4E 85 F1 | 	sub	fp, #8
1932c     1C 1E 0E F2 | 	cmp	local01, #28 wz
19330     14 4E 05 A1 |  if_e	add	fp, #20
19334     A7 24 02 AB |  if_e	rdlong	local04, fp
19338     14 4E 85 A1 |  if_e	sub	fp, #20
1933c     12 23 02 A6 |  if_e	mov	local03, local04
19340     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19344     24 00 90 5D |  if_ne	jmp	#LR__2085
19348     00 1E 06 F6 | 	mov	local01, #0
1934c     A7 20 02 FB | 	rdlong	local02, fp
19350     0C 4E 05 F1 | 	add	fp, #12
19354     A7 22 02 FB | 	rdlong	local03, fp
19358     0C 4E 85 F1 | 	sub	fp, #12
1935c     11 21 0A F2 | 	cmp	local02, local03 wz
19360     01 1E 66 A6 |  if_e	neg	local01, #1
19364     A7 1E 62 FC | 	wrlong	local01, fp
19368     40 02 90 FD | 	jmp	#LR__2093
1936c                 | LR__2085
1936c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1936c     08 4E 05 F1 | 	add	fp, #8
19370     A7 1E 02 FB | 	rdlong	local01, fp
19374     08 4E 85 F1 | 	sub	fp, #8
19378     1C 1E 0E F2 | 	cmp	local01, #28 wz
1937c     14 4E 05 A1 |  if_e	add	fp, #20
19380     A7 24 02 AB |  if_e	rdlong	local04, fp
19384     14 4E 85 A1 |  if_e	sub	fp, #20
19388     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1938c     24 00 90 5D |  if_ne	jmp	#LR__2086
19390     00 1E 06 F6 | 	mov	local01, #0
19394     A7 20 02 FB | 	rdlong	local02, fp
19398     0C 4E 05 F1 | 	add	fp, #12
1939c     A7 22 02 FB | 	rdlong	local03, fp
193a0     0C 4E 85 F1 | 	sub	fp, #12
193a4     11 21 0A F2 | 	cmp	local02, local03 wz
193a8     01 1E 66 A6 |  if_e	neg	local01, #1
193ac     A7 1E 62 FC | 	wrlong	local01, fp
193b0     F8 01 90 FD | 	jmp	#LR__2093
193b4                 | LR__2086
193b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
193b4     08 4E 05 F1 | 	add	fp, #8
193b8     A7 1E 02 FB | 	rdlong	local01, fp
193bc     08 4E 85 F1 | 	sub	fp, #8
193c0     1D 1E 0E F2 | 	cmp	local01, #29 wz
193c4     14 4E 05 A1 |  if_e	add	fp, #20
193c8     A7 22 02 AB |  if_e	rdlong	local03, fp
193cc     14 4E 85 A1 |  if_e	sub	fp, #20
193d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
193d4     34 00 90 5D |  if_ne	jmp	#LR__2087
193d8     00 1E 06 F6 | 	mov	local01, #0
193dc     A7 12 02 FB | 	rdlong	arg01, fp
193e0     18 9C B0 FD | 	call	#__system___float_fromuns
193e4     FD 12 02 F6 | 	mov	arg01, result1
193e8     0C 4E 05 F1 | 	add	fp, #12
193ec     A7 14 02 FB | 	rdlong	arg02, fp
193f0     0C 4E 85 F1 | 	sub	fp, #12
193f4     01 16 06 F6 | 	mov	arg03, #1
193f8     38 A4 B0 FD | 	call	#__system___float_cmp
193fc     00 FA 0D F2 | 	cmp	result1, #0 wz
19400     00 1E 26 A6 |  if_e	not	local01, #0
19404     A7 1E 62 FC | 	wrlong	local01, fp
19408     A0 01 90 FD | 	jmp	#LR__2093
1940c                 | LR__2087
1940c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1940c     08 4E 05 F1 | 	add	fp, #8
19410     A7 1E 02 FB | 	rdlong	local01, fp
19414     08 4E 85 F1 | 	sub	fp, #8
19418     1D 1E 0E F2 | 	cmp	local01, #29 wz
1941c     14 4E 05 A1 |  if_e	add	fp, #20
19420     A7 22 02 AB |  if_e	rdlong	local03, fp
19424     14 4E 85 A1 |  if_e	sub	fp, #20
19428     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1942c     24 00 90 5D |  if_ne	jmp	#LR__2088
19430     00 1E 06 F6 | 	mov	local01, #0
19434     A7 20 02 FB | 	rdlong	local02, fp
19438     0C 4E 05 F1 | 	add	fp, #12
1943c     A7 22 02 FB | 	rdlong	local03, fp
19440     0C 4E 85 F1 | 	sub	fp, #12
19444     11 21 0A F2 | 	cmp	local02, local03 wz
19448     01 1E 66 A6 |  if_e	neg	local01, #1
1944c     A7 1E 62 FC | 	wrlong	local01, fp
19450     58 01 90 FD | 	jmp	#LR__2093
19454                 | LR__2088
19454                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
19454     08 4E 05 F1 | 	add	fp, #8
19458     A7 1E 02 FB | 	rdlong	local01, fp
1945c     08 4E 85 F1 | 	sub	fp, #8
19460     1D 1E 0E F2 | 	cmp	local01, #29 wz
19464     14 4E 05 A1 |  if_e	add	fp, #20
19468     A7 22 02 AB |  if_e	rdlong	local03, fp
1946c     14 4E 85 A1 |  if_e	sub	fp, #20
19470     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19474     24 00 90 5D |  if_ne	jmp	#LR__2089
19478     00 1E 06 F6 | 	mov	local01, #0
1947c     A7 20 02 FB | 	rdlong	local02, fp
19480     0C 4E 05 F1 | 	add	fp, #12
19484     A7 22 02 FB | 	rdlong	local03, fp
19488     0C 4E 85 F1 | 	sub	fp, #12
1948c     11 21 0A F2 | 	cmp	local02, local03 wz
19490     01 1E 66 A6 |  if_e	neg	local01, #1
19494     A7 1E 62 FC | 	wrlong	local01, fp
19498     10 01 90 FD | 	jmp	#LR__2093
1949c                 | LR__2089
1949c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1949c     08 4E 05 F1 | 	add	fp, #8
194a0     A7 1E 02 FB | 	rdlong	local01, fp
194a4     08 4E 85 F1 | 	sub	fp, #8
194a8     2B 1E 0E F2 | 	cmp	local01, #43 wz
194ac     14 4E 05 A1 |  if_e	add	fp, #20
194b0     A7 22 02 AB |  if_e	rdlong	local03, fp
194b4     14 4E 85 A1 |  if_e	sub	fp, #20
194b8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
194bc     30 00 90 5D |  if_ne	jmp	#LR__2090
194c0     00 1E 06 F6 | 	mov	local01, #0
194c4     A7 12 02 FB | 	rdlong	arg01, fp
194c8     48 20 BF FD | 	call	#_convertstring
194cc     FD 12 02 F6 | 	mov	arg01, result1
194d0     0C 4E 05 F1 | 	add	fp, #12
194d4     A7 14 02 FB | 	rdlong	arg02, fp
194d8     0C 4E 85 F1 | 	sub	fp, #12
194dc     94 73 B0 FD | 	call	#__system___string_cmp
194e0     00 FA 0D F2 | 	cmp	result1, #0 wz
194e4     00 1E 26 A6 |  if_e	not	local01, #0
194e8     A7 1E 62 FC | 	wrlong	local01, fp
194ec     BC 00 90 FD | 	jmp	#LR__2093
194f0                 | LR__2090
194f0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
194f0     08 4E 05 F1 | 	add	fp, #8
194f4     A7 1E 02 FB | 	rdlong	local01, fp
194f8     08 4E 85 F1 | 	sub	fp, #8
194fc     1F 1E 0E F2 | 	cmp	local01, #31 wz
19500     14 4E 05 A1 |  if_e	add	fp, #20
19504     A7 22 02 AB |  if_e	rdlong	local03, fp
19508     14 4E 85 A1 |  if_e	sub	fp, #20
1950c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19510     34 00 90 5D |  if_ne	jmp	#LR__2091
19514     00 1E 06 F6 | 	mov	local01, #0
19518     A7 20 02 FB | 	rdlong	local02, fp
1951c     0C 4E 05 F1 | 	add	fp, #12
19520     A7 12 02 FB | 	rdlong	arg01, fp
19524     0C 4E 85 F1 | 	sub	fp, #12
19528     E8 1F BF FD | 	call	#_convertstring
1952c     FD 14 02 F6 | 	mov	arg02, result1
19530     10 13 02 F6 | 	mov	arg01, local02
19534     3C 73 B0 FD | 	call	#__system___string_cmp
19538     00 FA 0D F2 | 	cmp	result1, #0 wz
1953c     00 1E 26 A6 |  if_e	not	local01, #0
19540     A7 1E 62 FC | 	wrlong	local01, fp
19544     64 00 90 FD | 	jmp	#LR__2093
19548                 | LR__2091
19548                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
19548     08 4E 05 F1 | 	add	fp, #8
1954c     A7 1E 02 FB | 	rdlong	local01, fp
19550     08 4E 85 F1 | 	sub	fp, #8
19554     2B 1E 0E F2 | 	cmp	local01, #43 wz
19558     14 4E 05 A1 |  if_e	add	fp, #20
1955c     A7 22 02 AB |  if_e	rdlong	local03, fp
19560     14 4E 85 A1 |  if_e	sub	fp, #20
19564     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19568     3C 00 90 5D |  if_ne	jmp	#LR__2092
1956c     00 1E 06 F6 | 	mov	local01, #0
19570     A7 12 02 FB | 	rdlong	arg01, fp
19574     9C 1F BF FD | 	call	#_convertstring
19578     FD 20 02 F6 | 	mov	local02, result1
1957c     0C 4E 05 F1 | 	add	fp, #12
19580     A7 12 02 FB | 	rdlong	arg01, fp
19584     0C 4E 85 F1 | 	sub	fp, #12
19588     88 1F BF FD | 	call	#_convertstring
1958c     FD 14 02 F6 | 	mov	arg02, result1
19590     10 13 02 F6 | 	mov	arg01, local02
19594     DC 72 B0 FD | 	call	#__system___string_cmp
19598     00 FA 0D F2 | 	cmp	result1, #0 wz
1959c     00 1E 26 A6 |  if_e	not	local01, #0
195a0     A7 1E 62 FC | 	wrlong	local01, fp
195a4     04 00 90 FD | 	jmp	#LR__2093
195a8                 | LR__2092
195a8     A7 00 68 FC | 	wrlong	#0, fp
195ac                 | LR__2093
195ac     08 4E 05 F1 | 	add	fp, #8
195b0     A7 38 68 FC | 	wrlong	#28, fp
195b4     08 4E 85 F1 | 	sub	fp, #8
195b8     A7 12 02 F6 | 	mov	arg01, fp
195bc     74 1E BF FD | 	call	#_push
195c0     A7 F0 03 F6 | 	mov	ptra, fp
195c4     B2 00 A0 FD | 	call	#popregs_
195c8                 | _do_eq_ret
195c8     2D 00 64 FD | 	ret
195cc                 | 
195cc                 | ' 
195cc                 | ' sub do_gt
195cc                 | _do_gt
195cc     05 4A 05 F6 | 	mov	COUNT_, #5
195d0     A8 00 A0 FD | 	call	#pushregs_
195d4     18 F0 07 F1 | 	add	ptra, #24
195d8     C0 1D BF FD | 	call	#_pop
195dc     FD 1E 02 F6 | 	mov	local01, result1
195e0     FE 20 02 F6 | 	mov	local02, result2
195e4     FF 22 02 F6 | 	mov	local03, result3
195e8     0C 4E 05 F1 | 	add	fp, #12
195ec     A7 1E 62 FC | 	wrlong	local01, fp
195f0     04 4E 05 F1 | 	add	fp, #4
195f4     A7 20 62 FC | 	wrlong	local02, fp
195f8     04 4E 05 F1 | 	add	fp, #4
195fc     A7 22 62 FC | 	wrlong	local03, fp
19600     14 4E 85 F1 | 	sub	fp, #20
19604     94 1D BF FD | 	call	#_pop
19608     FF 22 02 F6 | 	mov	local03, result3
1960c     A7 FA 61 FC | 	wrlong	result1, fp
19610     04 4E 05 F1 | 	add	fp, #4
19614     A7 FC 61 FC | 	wrlong	result2, fp
19618     04 4E 05 F1 | 	add	fp, #4
1961c     A7 22 62 FC | 	wrlong	local03, fp
19620                 | ' t2=pop()
19620                 | ' t1=pop()
19620                 | ' 
19620                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
19620     08 4E 85 F1 | 	sub	fp, #8
19624     1F 22 0E F2 | 	cmp	local03, #31 wz
19628     14 4E 05 A1 |  if_e	add	fp, #20
1962c     A7 24 02 AB |  if_e	rdlong	local04, fp
19630     14 4E 85 A1 |  if_e	sub	fp, #20
19634     12 23 02 A6 |  if_e	mov	local03, local04
19638     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1963c     28 00 90 5D |  if_ne	jmp	#LR__2100
19640     00 1E 06 F6 | 	mov	local01, #0
19644     A7 12 02 FB | 	rdlong	arg01, fp
19648     0C 4E 05 F1 | 	add	fp, #12
1964c     A7 14 02 FB | 	rdlong	arg02, fp
19650     0C 4E 85 F1 | 	sub	fp, #12
19654     1C 72 B0 FD | 	call	#__system___string_cmp
19658     01 FA 55 F2 | 	cmps	result1, #1 wc
1965c     00 1E 26 36 |  if_ae	not	local01, #0
19660     A7 1E 62 FC | 	wrlong	local01, fp
19664     1C 04 90 FD | 	jmp	#LR__2113
19668                 | LR__2100
19668                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
19668     08 4E 05 F1 | 	add	fp, #8
1966c     A7 1E 02 FB | 	rdlong	local01, fp
19670     08 4E 85 F1 | 	sub	fp, #8
19674     1E 1E 0E F2 | 	cmp	local01, #30 wz
19678     14 4E 05 A1 |  if_e	add	fp, #20
1967c     A7 24 02 AB |  if_e	rdlong	local04, fp
19680     14 4E 85 A1 |  if_e	sub	fp, #20
19684     12 23 02 A6 |  if_e	mov	local03, local04
19688     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1968c     2C 00 90 5D |  if_ne	jmp	#LR__2101
19690     00 1E 06 F6 | 	mov	local01, #0
19694     A7 12 02 FB | 	rdlong	arg01, fp
19698     0C 4E 05 F1 | 	add	fp, #12
1969c     A7 14 02 FB | 	rdlong	arg02, fp
196a0     0C 4E 85 F1 | 	sub	fp, #12
196a4     01 16 66 F6 | 	neg	arg03, #1
196a8     88 A1 B0 FD | 	call	#__system___float_cmp
196ac     01 FA 55 F2 | 	cmps	result1, #1 wc
196b0     00 1E 26 36 |  if_ae	not	local01, #0
196b4     A7 1E 62 FC | 	wrlong	local01, fp
196b8     C8 03 90 FD | 	jmp	#LR__2113
196bc                 | LR__2101
196bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
196bc     08 4E 05 F1 | 	add	fp, #8
196c0     A7 1E 02 FB | 	rdlong	local01, fp
196c4     08 4E 85 F1 | 	sub	fp, #8
196c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
196cc     14 4E 05 A1 |  if_e	add	fp, #20
196d0     A7 24 02 AB |  if_e	rdlong	local04, fp
196d4     14 4E 85 A1 |  if_e	sub	fp, #20
196d8     12 23 02 A6 |  if_e	mov	local03, local04
196dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
196e0     48 00 90 5D |  if_ne	jmp	#LR__2102
196e4     00 1E 06 F6 | 	mov	local01, #0
196e8     A7 20 02 FB | 	rdlong	local02, fp
196ec     0C 4E 05 F1 | 	add	fp, #12
196f0     A7 12 02 FB | 	rdlong	arg01, fp
196f4     0C 4E 85 F1 | 	sub	fp, #12
196f8     09 13 52 F6 | 	abs	arg01, arg01 wc
196fc     1F 26 C6 C9 |  if_b	decod	local05, #31
19700     00 26 06 36 |  if_ae	mov	local05, #0
19704     F4 98 B0 FD | 	call	#__system___float_fromuns
19708     13 FB 61 F5 | 	xor	result1, local05
1970c     FD 14 02 F6 | 	mov	arg02, result1
19710     10 13 02 F6 | 	mov	arg01, local02
19714     01 16 66 F6 | 	neg	arg03, #1
19718     18 A1 B0 FD | 	call	#__system___float_cmp
1971c     01 FA 55 F2 | 	cmps	result1, #1 wc
19720     00 1E 26 36 |  if_ae	not	local01, #0
19724     A7 1E 62 FC | 	wrlong	local01, fp
19728     58 03 90 FD | 	jmp	#LR__2113
1972c                 | LR__2102
1972c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1972c     08 4E 05 F1 | 	add	fp, #8
19730     A7 1E 02 FB | 	rdlong	local01, fp
19734     08 4E 85 F1 | 	sub	fp, #8
19738     1E 1E 0E F2 | 	cmp	local01, #30 wz
1973c     14 4E 05 A1 |  if_e	add	fp, #20
19740     A7 24 02 AB |  if_e	rdlong	local04, fp
19744     14 4E 85 A1 |  if_e	sub	fp, #20
19748     12 23 02 A6 |  if_e	mov	local03, local04
1974c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19750     38 00 90 5D |  if_ne	jmp	#LR__2103
19754     00 1E 06 F6 | 	mov	local01, #0
19758     A7 20 02 FB | 	rdlong	local02, fp
1975c     0C 4E 05 F1 | 	add	fp, #12
19760     A7 12 02 FB | 	rdlong	arg01, fp
19764     0C 4E 85 F1 | 	sub	fp, #12
19768     90 98 B0 FD | 	call	#__system___float_fromuns
1976c     FD 14 02 F6 | 	mov	arg02, result1
19770     10 13 02 F6 | 	mov	arg01, local02
19774     01 16 66 F6 | 	neg	arg03, #1
19778     B8 A0 B0 FD | 	call	#__system___float_cmp
1977c     01 FA 55 F2 | 	cmps	result1, #1 wc
19780     00 1E 26 36 |  if_ae	not	local01, #0
19784     A7 1E 62 FC | 	wrlong	local01, fp
19788     F8 02 90 FD | 	jmp	#LR__2113
1978c                 | LR__2103
1978c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1978c     08 4E 05 F1 | 	add	fp, #8
19790     A7 1E 02 FB | 	rdlong	local01, fp
19794     08 4E 85 F1 | 	sub	fp, #8
19798     1C 1E 0E F2 | 	cmp	local01, #28 wz
1979c     14 4E 05 A1 |  if_e	add	fp, #20
197a0     A7 24 02 AB |  if_e	rdlong	local04, fp
197a4     14 4E 85 A1 |  if_e	sub	fp, #20
197a8     12 23 02 A6 |  if_e	mov	local03, local04
197ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
197b0     44 00 90 5D |  if_ne	jmp	#LR__2104
197b4     00 1E 06 F6 | 	mov	local01, #0
197b8     A7 12 02 FB | 	rdlong	arg01, fp
197bc     09 13 52 F6 | 	abs	arg01, arg01 wc
197c0     1F 26 C6 C9 |  if_b	decod	local05, #31
197c4     00 26 06 36 |  if_ae	mov	local05, #0
197c8     30 98 B0 FD | 	call	#__system___float_fromuns
197cc     13 FB 61 F5 | 	xor	result1, local05
197d0     FD 12 02 F6 | 	mov	arg01, result1
197d4     0C 4E 05 F1 | 	add	fp, #12
197d8     A7 14 02 FB | 	rdlong	arg02, fp
197dc     0C 4E 85 F1 | 	sub	fp, #12
197e0     01 16 66 F6 | 	neg	arg03, #1
197e4     4C A0 B0 FD | 	call	#__system___float_cmp
197e8     01 FA 55 F2 | 	cmps	result1, #1 wc
197ec     00 1E 26 36 |  if_ae	not	local01, #0
197f0     A7 1E 62 FC | 	wrlong	local01, fp
197f4     8C 02 90 FD | 	jmp	#LR__2113
197f8                 | LR__2104
197f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
197f8     08 4E 05 F1 | 	add	fp, #8
197fc     A7 1E 02 FB | 	rdlong	local01, fp
19800     08 4E 85 F1 | 	sub	fp, #8
19804     1C 1E 0E F2 | 	cmp	local01, #28 wz
19808     14 4E 05 A1 |  if_e	add	fp, #20
1980c     A7 24 02 AB |  if_e	rdlong	local04, fp
19810     14 4E 85 A1 |  if_e	sub	fp, #20
19814     12 23 02 A6 |  if_e	mov	local03, local04
19818     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1981c     24 00 90 5D |  if_ne	jmp	#LR__2105
19820     00 1E 06 F6 | 	mov	local01, #0
19824     A7 20 02 FB | 	rdlong	local02, fp
19828     0C 4E 05 F1 | 	add	fp, #12
1982c     A7 22 02 FB | 	rdlong	local03, fp
19830     0C 4E 85 F1 | 	sub	fp, #12
19834     11 21 5A F2 | 	cmps	local02, local03 wcz
19838     01 1E 66 16 |  if_a	neg	local01, #1
1983c     A7 1E 62 FC | 	wrlong	local01, fp
19840     40 02 90 FD | 	jmp	#LR__2113
19844                 | LR__2105
19844                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
19844     08 4E 05 F1 | 	add	fp, #8
19848     A7 1E 02 FB | 	rdlong	local01, fp
1984c     08 4E 85 F1 | 	sub	fp, #8
19850     1C 1E 0E F2 | 	cmp	local01, #28 wz
19854     14 4E 05 A1 |  if_e	add	fp, #20
19858     A7 24 02 AB |  if_e	rdlong	local04, fp
1985c     14 4E 85 A1 |  if_e	sub	fp, #20
19860     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19864     24 00 90 5D |  if_ne	jmp	#LR__2106
19868     00 1E 06 F6 | 	mov	local01, #0
1986c     A7 20 02 FB | 	rdlong	local02, fp
19870     0C 4E 05 F1 | 	add	fp, #12
19874     A7 22 02 FB | 	rdlong	local03, fp
19878     0C 4E 85 F1 | 	sub	fp, #12
1987c     11 21 5A F2 | 	cmps	local02, local03 wcz
19880     01 1E 66 16 |  if_a	neg	local01, #1
19884     A7 1E 62 FC | 	wrlong	local01, fp
19888     F8 01 90 FD | 	jmp	#LR__2113
1988c                 | LR__2106
1988c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1988c     08 4E 05 F1 | 	add	fp, #8
19890     A7 1E 02 FB | 	rdlong	local01, fp
19894     08 4E 85 F1 | 	sub	fp, #8
19898     1D 1E 0E F2 | 	cmp	local01, #29 wz
1989c     14 4E 05 A1 |  if_e	add	fp, #20
198a0     A7 22 02 AB |  if_e	rdlong	local03, fp
198a4     14 4E 85 A1 |  if_e	sub	fp, #20
198a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
198ac     34 00 90 5D |  if_ne	jmp	#LR__2107
198b0     00 1E 06 F6 | 	mov	local01, #0
198b4     A7 12 02 FB | 	rdlong	arg01, fp
198b8     40 97 B0 FD | 	call	#__system___float_fromuns
198bc     FD 12 02 F6 | 	mov	arg01, result1
198c0     0C 4E 05 F1 | 	add	fp, #12
198c4     A7 14 02 FB | 	rdlong	arg02, fp
198c8     0C 4E 85 F1 | 	sub	fp, #12
198cc     01 16 66 F6 | 	neg	arg03, #1
198d0     60 9F B0 FD | 	call	#__system___float_cmp
198d4     01 FA 55 F2 | 	cmps	result1, #1 wc
198d8     00 1E 26 36 |  if_ae	not	local01, #0
198dc     A7 1E 62 FC | 	wrlong	local01, fp
198e0     A0 01 90 FD | 	jmp	#LR__2113
198e4                 | LR__2107
198e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
198e4     08 4E 05 F1 | 	add	fp, #8
198e8     A7 1E 02 FB | 	rdlong	local01, fp
198ec     08 4E 85 F1 | 	sub	fp, #8
198f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
198f4     14 4E 05 A1 |  if_e	add	fp, #20
198f8     A7 22 02 AB |  if_e	rdlong	local03, fp
198fc     14 4E 85 A1 |  if_e	sub	fp, #20
19900     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19904     24 00 90 5D |  if_ne	jmp	#LR__2108
19908     00 1E 06 F6 | 	mov	local01, #0
1990c     A7 20 02 FB | 	rdlong	local02, fp
19910     0C 4E 05 F1 | 	add	fp, #12
19914     A7 22 02 FB | 	rdlong	local03, fp
19918     0C 4E 85 F1 | 	sub	fp, #12
1991c     11 21 5A F2 | 	cmps	local02, local03 wcz
19920     01 1E 66 16 |  if_a	neg	local01, #1
19924     A7 1E 62 FC | 	wrlong	local01, fp
19928     58 01 90 FD | 	jmp	#LR__2113
1992c                 | LR__2108
1992c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1992c     08 4E 05 F1 | 	add	fp, #8
19930     A7 1E 02 FB | 	rdlong	local01, fp
19934     08 4E 85 F1 | 	sub	fp, #8
19938     1D 1E 0E F2 | 	cmp	local01, #29 wz
1993c     14 4E 05 A1 |  if_e	add	fp, #20
19940     A7 22 02 AB |  if_e	rdlong	local03, fp
19944     14 4E 85 A1 |  if_e	sub	fp, #20
19948     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1994c     24 00 90 5D |  if_ne	jmp	#LR__2109
19950     00 1E 06 F6 | 	mov	local01, #0
19954     A7 20 02 FB | 	rdlong	local02, fp
19958     0C 4E 05 F1 | 	add	fp, #12
1995c     A7 22 02 FB | 	rdlong	local03, fp
19960     0C 4E 85 F1 | 	sub	fp, #12
19964     11 21 1A F2 | 	cmp	local02, local03 wcz
19968     01 1E 66 16 |  if_a	neg	local01, #1
1996c     A7 1E 62 FC | 	wrlong	local01, fp
19970     10 01 90 FD | 	jmp	#LR__2113
19974                 | LR__2109
19974                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
19974     08 4E 05 F1 | 	add	fp, #8
19978     A7 1E 02 FB | 	rdlong	local01, fp
1997c     08 4E 85 F1 | 	sub	fp, #8
19980     2B 1E 0E F2 | 	cmp	local01, #43 wz
19984     14 4E 05 A1 |  if_e	add	fp, #20
19988     A7 22 02 AB |  if_e	rdlong	local03, fp
1998c     14 4E 85 A1 |  if_e	sub	fp, #20
19990     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19994     30 00 90 5D |  if_ne	jmp	#LR__2110
19998     00 1E 06 F6 | 	mov	local01, #0
1999c     A7 12 02 FB | 	rdlong	arg01, fp
199a0     70 1B BF FD | 	call	#_convertstring
199a4     FD 12 02 F6 | 	mov	arg01, result1
199a8     0C 4E 05 F1 | 	add	fp, #12
199ac     A7 14 02 FB | 	rdlong	arg02, fp
199b0     0C 4E 85 F1 | 	sub	fp, #12
199b4     BC 6E B0 FD | 	call	#__system___string_cmp
199b8     01 FA 55 F2 | 	cmps	result1, #1 wc
199bc     00 1E 26 36 |  if_ae	not	local01, #0
199c0     A7 1E 62 FC | 	wrlong	local01, fp
199c4     BC 00 90 FD | 	jmp	#LR__2113
199c8                 | LR__2110
199c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
199c8     08 4E 05 F1 | 	add	fp, #8
199cc     A7 1E 02 FB | 	rdlong	local01, fp
199d0     08 4E 85 F1 | 	sub	fp, #8
199d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
199d8     14 4E 05 A1 |  if_e	add	fp, #20
199dc     A7 22 02 AB |  if_e	rdlong	local03, fp
199e0     14 4E 85 A1 |  if_e	sub	fp, #20
199e4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
199e8     34 00 90 5D |  if_ne	jmp	#LR__2111
199ec     00 1E 06 F6 | 	mov	local01, #0
199f0     A7 20 02 FB | 	rdlong	local02, fp
199f4     0C 4E 05 F1 | 	add	fp, #12
199f8     A7 12 02 FB | 	rdlong	arg01, fp
199fc     0C 4E 85 F1 | 	sub	fp, #12
19a00     10 1B BF FD | 	call	#_convertstring
19a04     FD 14 02 F6 | 	mov	arg02, result1
19a08     10 13 02 F6 | 	mov	arg01, local02
19a0c     64 6E B0 FD | 	call	#__system___string_cmp
19a10     01 FA 55 F2 | 	cmps	result1, #1 wc
19a14     00 1E 26 36 |  if_ae	not	local01, #0
19a18     A7 1E 62 FC | 	wrlong	local01, fp
19a1c     64 00 90 FD | 	jmp	#LR__2113
19a20                 | LR__2111
19a20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
19a20     08 4E 05 F1 | 	add	fp, #8
19a24     A7 1E 02 FB | 	rdlong	local01, fp
19a28     08 4E 85 F1 | 	sub	fp, #8
19a2c     2B 1E 0E F2 | 	cmp	local01, #43 wz
19a30     14 4E 05 A1 |  if_e	add	fp, #20
19a34     A7 22 02 AB |  if_e	rdlong	local03, fp
19a38     14 4E 85 A1 |  if_e	sub	fp, #20
19a3c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19a40     3C 00 90 5D |  if_ne	jmp	#LR__2112
19a44     00 1E 06 F6 | 	mov	local01, #0
19a48     A7 12 02 FB | 	rdlong	arg01, fp
19a4c     C4 1A BF FD | 	call	#_convertstring
19a50     FD 20 02 F6 | 	mov	local02, result1
19a54     0C 4E 05 F1 | 	add	fp, #12
19a58     A7 12 02 FB | 	rdlong	arg01, fp
19a5c     0C 4E 85 F1 | 	sub	fp, #12
19a60     B0 1A BF FD | 	call	#_convertstring
19a64     FD 14 02 F6 | 	mov	arg02, result1
19a68     10 13 02 F6 | 	mov	arg01, local02
19a6c     04 6E B0 FD | 	call	#__system___string_cmp
19a70     01 FA 55 F2 | 	cmps	result1, #1 wc
19a74     00 1E 26 36 |  if_ae	not	local01, #0
19a78     A7 1E 62 FC | 	wrlong	local01, fp
19a7c     04 00 90 FD | 	jmp	#LR__2113
19a80                 | LR__2112
19a80     A7 00 68 FC | 	wrlong	#0, fp
19a84                 | LR__2113
19a84     08 4E 05 F1 | 	add	fp, #8
19a88     A7 38 68 FC | 	wrlong	#28, fp
19a8c     08 4E 85 F1 | 	sub	fp, #8
19a90     A7 12 02 F6 | 	mov	arg01, fp
19a94     9C 19 BF FD | 	call	#_push
19a98     A7 F0 03 F6 | 	mov	ptra, fp
19a9c     B2 00 A0 FD | 	call	#popregs_
19aa0                 | _do_gt_ret
19aa0     2D 00 64 FD | 	ret
19aa4                 | 
19aa4                 | ' 
19aa4                 | ' sub do_lt
19aa4                 | _do_lt
19aa4     05 4A 05 F6 | 	mov	COUNT_, #5
19aa8     A8 00 A0 FD | 	call	#pushregs_
19aac     18 F0 07 F1 | 	add	ptra, #24
19ab0     E8 18 BF FD | 	call	#_pop
19ab4     FD 1E 02 F6 | 	mov	local01, result1
19ab8     FE 20 02 F6 | 	mov	local02, result2
19abc     FF 22 02 F6 | 	mov	local03, result3
19ac0     0C 4E 05 F1 | 	add	fp, #12
19ac4     A7 1E 62 FC | 	wrlong	local01, fp
19ac8     04 4E 05 F1 | 	add	fp, #4
19acc     A7 20 62 FC | 	wrlong	local02, fp
19ad0     04 4E 05 F1 | 	add	fp, #4
19ad4     A7 22 62 FC | 	wrlong	local03, fp
19ad8     14 4E 85 F1 | 	sub	fp, #20
19adc     BC 18 BF FD | 	call	#_pop
19ae0     FF 22 02 F6 | 	mov	local03, result3
19ae4     A7 FA 61 FC | 	wrlong	result1, fp
19ae8     04 4E 05 F1 | 	add	fp, #4
19aec     A7 FC 61 FC | 	wrlong	result2, fp
19af0     04 4E 05 F1 | 	add	fp, #4
19af4     A7 22 62 FC | 	wrlong	local03, fp
19af8                 | ' t2=pop()
19af8                 | ' t1=pop()
19af8                 | ' 
19af8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
19af8     08 4E 85 F1 | 	sub	fp, #8
19afc     1F 22 0E F2 | 	cmp	local03, #31 wz
19b00     14 4E 05 A1 |  if_e	add	fp, #20
19b04     A7 24 02 AB |  if_e	rdlong	local04, fp
19b08     14 4E 85 A1 |  if_e	sub	fp, #20
19b0c     12 23 02 A6 |  if_e	mov	local03, local04
19b10     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19b14     28 00 90 5D |  if_ne	jmp	#LR__2120
19b18     00 1E 06 F6 | 	mov	local01, #0
19b1c     A7 12 02 FB | 	rdlong	arg01, fp
19b20     0C 4E 05 F1 | 	add	fp, #12
19b24     A7 14 02 FB | 	rdlong	arg02, fp
19b28     0C 4E 85 F1 | 	sub	fp, #12
19b2c     44 6D B0 FD | 	call	#__system___string_cmp
19b30     00 FA 55 F2 | 	cmps	result1, #0 wc
19b34     00 1E 26 C6 |  if_b	not	local01, #0
19b38     A7 1E 62 FC | 	wrlong	local01, fp
19b3c     0C 04 90 FD | 	jmp	#LR__2133
19b40                 | LR__2120
19b40                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
19b40     08 4E 05 F1 | 	add	fp, #8
19b44     A7 1E 02 FB | 	rdlong	local01, fp
19b48     08 4E 85 F1 | 	sub	fp, #8
19b4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19b50     14 4E 05 A1 |  if_e	add	fp, #20
19b54     A7 24 02 AB |  if_e	rdlong	local04, fp
19b58     14 4E 85 A1 |  if_e	sub	fp, #20
19b5c     12 23 02 A6 |  if_e	mov	local03, local04
19b60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19b64     2C 00 90 5D |  if_ne	jmp	#LR__2121
19b68     00 1E 06 F6 | 	mov	local01, #0
19b6c     A7 12 02 FB | 	rdlong	arg01, fp
19b70     0C 4E 05 F1 | 	add	fp, #12
19b74     A7 14 02 FB | 	rdlong	arg02, fp
19b78     0C 4E 85 F1 | 	sub	fp, #12
19b7c     01 16 06 F6 | 	mov	arg03, #1
19b80     B0 9C B0 FD | 	call	#__system___float_cmp
19b84     00 FA 55 F2 | 	cmps	result1, #0 wc
19b88     00 1E 26 C6 |  if_b	not	local01, #0
19b8c     A7 1E 62 FC | 	wrlong	local01, fp
19b90     B8 03 90 FD | 	jmp	#LR__2133
19b94                 | LR__2121
19b94                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
19b94     08 4E 05 F1 | 	add	fp, #8
19b98     A7 1E 02 FB | 	rdlong	local01, fp
19b9c     08 4E 85 F1 | 	sub	fp, #8
19ba0     1E 1E 0E F2 | 	cmp	local01, #30 wz
19ba4     14 4E 05 A1 |  if_e	add	fp, #20
19ba8     A7 24 02 AB |  if_e	rdlong	local04, fp
19bac     14 4E 85 A1 |  if_e	sub	fp, #20
19bb0     12 23 02 A6 |  if_e	mov	local03, local04
19bb4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19bb8     48 00 90 5D |  if_ne	jmp	#LR__2122
19bbc     00 1E 06 F6 | 	mov	local01, #0
19bc0     A7 20 02 FB | 	rdlong	local02, fp
19bc4     0C 4E 05 F1 | 	add	fp, #12
19bc8     A7 12 02 FB | 	rdlong	arg01, fp
19bcc     0C 4E 85 F1 | 	sub	fp, #12
19bd0     09 13 52 F6 | 	abs	arg01, arg01 wc
19bd4     1F 26 C6 C9 |  if_b	decod	local05, #31
19bd8     00 26 06 36 |  if_ae	mov	local05, #0
19bdc     1C 94 B0 FD | 	call	#__system___float_fromuns
19be0     13 FB 61 F5 | 	xor	result1, local05
19be4     FD 14 02 F6 | 	mov	arg02, result1
19be8     10 13 02 F6 | 	mov	arg01, local02
19bec     01 16 06 F6 | 	mov	arg03, #1
19bf0     40 9C B0 FD | 	call	#__system___float_cmp
19bf4     00 FA 55 F2 | 	cmps	result1, #0 wc
19bf8     00 1E 26 C6 |  if_b	not	local01, #0
19bfc     A7 1E 62 FC | 	wrlong	local01, fp
19c00     48 03 90 FD | 	jmp	#LR__2133
19c04                 | LR__2122
19c04                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
19c04     08 4E 05 F1 | 	add	fp, #8
19c08     A7 1E 02 FB | 	rdlong	local01, fp
19c0c     08 4E 85 F1 | 	sub	fp, #8
19c10     1E 1E 0E F2 | 	cmp	local01, #30 wz
19c14     14 4E 05 A1 |  if_e	add	fp, #20
19c18     A7 24 02 AB |  if_e	rdlong	local04, fp
19c1c     14 4E 85 A1 |  if_e	sub	fp, #20
19c20     12 23 02 A6 |  if_e	mov	local03, local04
19c24     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19c28     38 00 90 5D |  if_ne	jmp	#LR__2123
19c2c     00 1E 06 F6 | 	mov	local01, #0
19c30     A7 20 02 FB | 	rdlong	local02, fp
19c34     0C 4E 05 F1 | 	add	fp, #12
19c38     A7 12 02 FB | 	rdlong	arg01, fp
19c3c     0C 4E 85 F1 | 	sub	fp, #12
19c40     B8 93 B0 FD | 	call	#__system___float_fromuns
19c44     FD 14 02 F6 | 	mov	arg02, result1
19c48     10 13 02 F6 | 	mov	arg01, local02
19c4c     01 16 06 F6 | 	mov	arg03, #1
19c50     E0 9B B0 FD | 	call	#__system___float_cmp
19c54     00 FA 55 F2 | 	cmps	result1, #0 wc
19c58     00 1E 26 C6 |  if_b	not	local01, #0
19c5c     A7 1E 62 FC | 	wrlong	local01, fp
19c60     E8 02 90 FD | 	jmp	#LR__2133
19c64                 | LR__2123
19c64                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
19c64     08 4E 05 F1 | 	add	fp, #8
19c68     A7 1E 02 FB | 	rdlong	local01, fp
19c6c     08 4E 85 F1 | 	sub	fp, #8
19c70     1C 1E 0E F2 | 	cmp	local01, #28 wz
19c74     14 4E 05 A1 |  if_e	add	fp, #20
19c78     A7 24 02 AB |  if_e	rdlong	local04, fp
19c7c     14 4E 85 A1 |  if_e	sub	fp, #20
19c80     12 23 02 A6 |  if_e	mov	local03, local04
19c84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19c88     44 00 90 5D |  if_ne	jmp	#LR__2124
19c8c     00 1E 06 F6 | 	mov	local01, #0
19c90     A7 12 02 FB | 	rdlong	arg01, fp
19c94     09 13 52 F6 | 	abs	arg01, arg01 wc
19c98     1F 26 C6 C9 |  if_b	decod	local05, #31
19c9c     00 26 06 36 |  if_ae	mov	local05, #0
19ca0     58 93 B0 FD | 	call	#__system___float_fromuns
19ca4     13 FB 61 F5 | 	xor	result1, local05
19ca8     FD 12 02 F6 | 	mov	arg01, result1
19cac     0C 4E 05 F1 | 	add	fp, #12
19cb0     A7 14 02 FB | 	rdlong	arg02, fp
19cb4     0C 4E 85 F1 | 	sub	fp, #12
19cb8     01 16 06 F6 | 	mov	arg03, #1
19cbc     74 9B B0 FD | 	call	#__system___float_cmp
19cc0     00 FA 55 F2 | 	cmps	result1, #0 wc
19cc4     00 1E 26 C6 |  if_b	not	local01, #0
19cc8     A7 1E 62 FC | 	wrlong	local01, fp
19ccc     7C 02 90 FD | 	jmp	#LR__2133
19cd0                 | LR__2124
19cd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
19cd0     08 4E 05 F1 | 	add	fp, #8
19cd4     A7 1E 02 FB | 	rdlong	local01, fp
19cd8     08 4E 85 F1 | 	sub	fp, #8
19cdc     1C 1E 0E F2 | 	cmp	local01, #28 wz
19ce0     14 4E 05 A1 |  if_e	add	fp, #20
19ce4     A7 24 02 AB |  if_e	rdlong	local04, fp
19ce8     14 4E 85 A1 |  if_e	sub	fp, #20
19cec     12 23 02 A6 |  if_e	mov	local03, local04
19cf0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19cf4     20 00 90 5D |  if_ne	jmp	#LR__2125
19cf8     A7 20 02 FB | 	rdlong	local02, fp
19cfc     0C 4E 05 F1 | 	add	fp, #12
19d00     A7 22 02 FB | 	rdlong	local03, fp
19d04     0C 4E 85 F1 | 	sub	fp, #12
19d08     11 21 52 F2 | 	cmps	local02, local03 wc
19d0c     0F 1F A2 F1 | 	subx	local01, local01
19d10     A7 1E 62 FC | 	wrlong	local01, fp
19d14     34 02 90 FD | 	jmp	#LR__2133
19d18                 | LR__2125
19d18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
19d18     08 4E 05 F1 | 	add	fp, #8
19d1c     A7 1E 02 FB | 	rdlong	local01, fp
19d20     08 4E 85 F1 | 	sub	fp, #8
19d24     1C 1E 0E F2 | 	cmp	local01, #28 wz
19d28     14 4E 05 A1 |  if_e	add	fp, #20
19d2c     A7 24 02 AB |  if_e	rdlong	local04, fp
19d30     14 4E 85 A1 |  if_e	sub	fp, #20
19d34     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19d38     20 00 90 5D |  if_ne	jmp	#LR__2126
19d3c     A7 20 02 FB | 	rdlong	local02, fp
19d40     0C 4E 05 F1 | 	add	fp, #12
19d44     A7 22 02 FB | 	rdlong	local03, fp
19d48     0C 4E 85 F1 | 	sub	fp, #12
19d4c     11 21 52 F2 | 	cmps	local02, local03 wc
19d50     0F 1F A2 F1 | 	subx	local01, local01
19d54     A7 1E 62 FC | 	wrlong	local01, fp
19d58     F0 01 90 FD | 	jmp	#LR__2133
19d5c                 | LR__2126
19d5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
19d5c     08 4E 05 F1 | 	add	fp, #8
19d60     A7 1E 02 FB | 	rdlong	local01, fp
19d64     08 4E 85 F1 | 	sub	fp, #8
19d68     1D 1E 0E F2 | 	cmp	local01, #29 wz
19d6c     14 4E 05 A1 |  if_e	add	fp, #20
19d70     A7 22 02 AB |  if_e	rdlong	local03, fp
19d74     14 4E 85 A1 |  if_e	sub	fp, #20
19d78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19d7c     34 00 90 5D |  if_ne	jmp	#LR__2127
19d80     00 1E 06 F6 | 	mov	local01, #0
19d84     A7 12 02 FB | 	rdlong	arg01, fp
19d88     70 92 B0 FD | 	call	#__system___float_fromuns
19d8c     FD 12 02 F6 | 	mov	arg01, result1
19d90     0C 4E 05 F1 | 	add	fp, #12
19d94     A7 14 02 FB | 	rdlong	arg02, fp
19d98     0C 4E 85 F1 | 	sub	fp, #12
19d9c     01 16 06 F6 | 	mov	arg03, #1
19da0     90 9A B0 FD | 	call	#__system___float_cmp
19da4     00 FA 55 F2 | 	cmps	result1, #0 wc
19da8     00 1E 26 C6 |  if_b	not	local01, #0
19dac     A7 1E 62 FC | 	wrlong	local01, fp
19db0     98 01 90 FD | 	jmp	#LR__2133
19db4                 | LR__2127
19db4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
19db4     08 4E 05 F1 | 	add	fp, #8
19db8     A7 1E 02 FB | 	rdlong	local01, fp
19dbc     08 4E 85 F1 | 	sub	fp, #8
19dc0     1D 1E 0E F2 | 	cmp	local01, #29 wz
19dc4     14 4E 05 A1 |  if_e	add	fp, #20
19dc8     A7 22 02 AB |  if_e	rdlong	local03, fp
19dcc     14 4E 85 A1 |  if_e	sub	fp, #20
19dd0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19dd4     20 00 90 5D |  if_ne	jmp	#LR__2128
19dd8     A7 20 02 FB | 	rdlong	local02, fp
19ddc     0C 4E 05 F1 | 	add	fp, #12
19de0     A7 22 02 FB | 	rdlong	local03, fp
19de4     0C 4E 85 F1 | 	sub	fp, #12
19de8     11 21 52 F2 | 	cmps	local02, local03 wc
19dec     0F 1F A2 F1 | 	subx	local01, local01
19df0     A7 1E 62 FC | 	wrlong	local01, fp
19df4     54 01 90 FD | 	jmp	#LR__2133
19df8                 | LR__2128
19df8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
19df8     08 4E 05 F1 | 	add	fp, #8
19dfc     A7 1E 02 FB | 	rdlong	local01, fp
19e00     08 4E 85 F1 | 	sub	fp, #8
19e04     1D 1E 0E F2 | 	cmp	local01, #29 wz
19e08     14 4E 05 A1 |  if_e	add	fp, #20
19e0c     A7 22 02 AB |  if_e	rdlong	local03, fp
19e10     14 4E 85 A1 |  if_e	sub	fp, #20
19e14     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19e18     20 00 90 5D |  if_ne	jmp	#LR__2129
19e1c     A7 20 02 FB | 	rdlong	local02, fp
19e20     0C 4E 05 F1 | 	add	fp, #12
19e24     A7 22 02 FB | 	rdlong	local03, fp
19e28     0C 4E 85 F1 | 	sub	fp, #12
19e2c     11 21 12 F2 | 	cmp	local02, local03 wc
19e30     0F 1F A2 F1 | 	subx	local01, local01
19e34     A7 1E 62 FC | 	wrlong	local01, fp
19e38     10 01 90 FD | 	jmp	#LR__2133
19e3c                 | LR__2129
19e3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
19e3c     08 4E 05 F1 | 	add	fp, #8
19e40     A7 1E 02 FB | 	rdlong	local01, fp
19e44     08 4E 85 F1 | 	sub	fp, #8
19e48     2B 1E 0E F2 | 	cmp	local01, #43 wz
19e4c     14 4E 05 A1 |  if_e	add	fp, #20
19e50     A7 22 02 AB |  if_e	rdlong	local03, fp
19e54     14 4E 85 A1 |  if_e	sub	fp, #20
19e58     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19e5c     30 00 90 5D |  if_ne	jmp	#LR__2130
19e60     00 1E 06 F6 | 	mov	local01, #0
19e64     A7 12 02 FB | 	rdlong	arg01, fp
19e68     A8 16 BF FD | 	call	#_convertstring
19e6c     FD 12 02 F6 | 	mov	arg01, result1
19e70     0C 4E 05 F1 | 	add	fp, #12
19e74     A7 14 02 FB | 	rdlong	arg02, fp
19e78     0C 4E 85 F1 | 	sub	fp, #12
19e7c     F4 69 B0 FD | 	call	#__system___string_cmp
19e80     00 FA 55 F2 | 	cmps	result1, #0 wc
19e84     00 1E 26 C6 |  if_b	not	local01, #0
19e88     A7 1E 62 FC | 	wrlong	local01, fp
19e8c     BC 00 90 FD | 	jmp	#LR__2133
19e90                 | LR__2130
19e90                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
19e90     08 4E 05 F1 | 	add	fp, #8
19e94     A7 1E 02 FB | 	rdlong	local01, fp
19e98     08 4E 85 F1 | 	sub	fp, #8
19e9c     1F 1E 0E F2 | 	cmp	local01, #31 wz
19ea0     14 4E 05 A1 |  if_e	add	fp, #20
19ea4     A7 22 02 AB |  if_e	rdlong	local03, fp
19ea8     14 4E 85 A1 |  if_e	sub	fp, #20
19eac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19eb0     34 00 90 5D |  if_ne	jmp	#LR__2131
19eb4     00 1E 06 F6 | 	mov	local01, #0
19eb8     A7 20 02 FB | 	rdlong	local02, fp
19ebc     0C 4E 05 F1 | 	add	fp, #12
19ec0     A7 12 02 FB | 	rdlong	arg01, fp
19ec4     0C 4E 85 F1 | 	sub	fp, #12
19ec8     48 16 BF FD | 	call	#_convertstring
19ecc     FD 14 02 F6 | 	mov	arg02, result1
19ed0     10 13 02 F6 | 	mov	arg01, local02
19ed4     9C 69 B0 FD | 	call	#__system___string_cmp
19ed8     00 FA 55 F2 | 	cmps	result1, #0 wc
19edc     00 1E 26 C6 |  if_b	not	local01, #0
19ee0     A7 1E 62 FC | 	wrlong	local01, fp
19ee4     64 00 90 FD | 	jmp	#LR__2133
19ee8                 | LR__2131
19ee8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
19ee8     08 4E 05 F1 | 	add	fp, #8
19eec     A7 1E 02 FB | 	rdlong	local01, fp
19ef0     08 4E 85 F1 | 	sub	fp, #8
19ef4     2B 1E 0E F2 | 	cmp	local01, #43 wz
19ef8     14 4E 05 A1 |  if_e	add	fp, #20
19efc     A7 22 02 AB |  if_e	rdlong	local03, fp
19f00     14 4E 85 A1 |  if_e	sub	fp, #20
19f04     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19f08     3C 00 90 5D |  if_ne	jmp	#LR__2132
19f0c     00 1E 06 F6 | 	mov	local01, #0
19f10     A7 12 02 FB | 	rdlong	arg01, fp
19f14     FC 15 BF FD | 	call	#_convertstring
19f18     FD 20 02 F6 | 	mov	local02, result1
19f1c     0C 4E 05 F1 | 	add	fp, #12
19f20     A7 12 02 FB | 	rdlong	arg01, fp
19f24     0C 4E 85 F1 | 	sub	fp, #12
19f28     E8 15 BF FD | 	call	#_convertstring
19f2c     FD 14 02 F6 | 	mov	arg02, result1
19f30     10 13 02 F6 | 	mov	arg01, local02
19f34     3C 69 B0 FD | 	call	#__system___string_cmp
19f38     00 FA 55 F2 | 	cmps	result1, #0 wc
19f3c     00 1E 26 C6 |  if_b	not	local01, #0
19f40     A7 1E 62 FC | 	wrlong	local01, fp
19f44     04 00 90 FD | 	jmp	#LR__2133
19f48                 | LR__2132
19f48     A7 00 68 FC | 	wrlong	#0, fp
19f4c                 | LR__2133
19f4c     08 4E 05 F1 | 	add	fp, #8
19f50     A7 38 68 FC | 	wrlong	#28, fp
19f54     08 4E 85 F1 | 	sub	fp, #8
19f58     A7 12 02 F6 | 	mov	arg01, fp
19f5c     D4 14 BF FD | 	call	#_push
19f60     A7 F0 03 F6 | 	mov	ptra, fp
19f64     B2 00 A0 FD | 	call	#popregs_
19f68                 | _do_lt_ret
19f68     2D 00 64 FD | 	ret
19f6c                 | 
19f6c                 | ' 
19f6c                 | ' sub do_ge
19f6c                 | _do_ge
19f6c     05 4A 05 F6 | 	mov	COUNT_, #5
19f70     A8 00 A0 FD | 	call	#pushregs_
19f74     18 F0 07 F1 | 	add	ptra, #24
19f78     20 14 BF FD | 	call	#_pop
19f7c     FD 1E 02 F6 | 	mov	local01, result1
19f80     FE 20 02 F6 | 	mov	local02, result2
19f84     FF 22 02 F6 | 	mov	local03, result3
19f88     0C 4E 05 F1 | 	add	fp, #12
19f8c     A7 1E 62 FC | 	wrlong	local01, fp
19f90     04 4E 05 F1 | 	add	fp, #4
19f94     A7 20 62 FC | 	wrlong	local02, fp
19f98     04 4E 05 F1 | 	add	fp, #4
19f9c     A7 22 62 FC | 	wrlong	local03, fp
19fa0     14 4E 85 F1 | 	sub	fp, #20
19fa4     F4 13 BF FD | 	call	#_pop
19fa8     FF 22 02 F6 | 	mov	local03, result3
19fac     A7 FA 61 FC | 	wrlong	result1, fp
19fb0     04 4E 05 F1 | 	add	fp, #4
19fb4     A7 FC 61 FC | 	wrlong	result2, fp
19fb8     04 4E 05 F1 | 	add	fp, #4
19fbc     A7 22 62 FC | 	wrlong	local03, fp
19fc0                 | ' t2=pop()
19fc0                 | ' t1=pop()
19fc0                 | ' 
19fc0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
19fc0     08 4E 85 F1 | 	sub	fp, #8
19fc4     1F 22 0E F2 | 	cmp	local03, #31 wz
19fc8     14 4E 05 A1 |  if_e	add	fp, #20
19fcc     A7 24 02 AB |  if_e	rdlong	local04, fp
19fd0     14 4E 85 A1 |  if_e	sub	fp, #20
19fd4     12 23 02 A6 |  if_e	mov	local03, local04
19fd8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19fdc     28 00 90 5D |  if_ne	jmp	#LR__2140
19fe0     00 1E 06 F6 | 	mov	local01, #0
19fe4     A7 12 02 FB | 	rdlong	arg01, fp
19fe8     0C 4E 05 F1 | 	add	fp, #12
19fec     A7 14 02 FB | 	rdlong	arg02, fp
19ff0     0C 4E 85 F1 | 	sub	fp, #12
19ff4     7C 68 B0 FD | 	call	#__system___string_cmp
19ff8     00 FA 55 F2 | 	cmps	result1, #0 wc
19ffc     00 1E 26 36 |  if_ae	not	local01, #0
1a000     A7 1E 62 FC | 	wrlong	local01, fp
1a004     1C 04 90 FD | 	jmp	#LR__2153
1a008                 | LR__2140
1a008                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1a008     08 4E 05 F1 | 	add	fp, #8
1a00c     A7 1E 02 FB | 	rdlong	local01, fp
1a010     08 4E 85 F1 | 	sub	fp, #8
1a014     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a018     14 4E 05 A1 |  if_e	add	fp, #20
1a01c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a020     14 4E 85 A1 |  if_e	sub	fp, #20
1a024     12 23 02 A6 |  if_e	mov	local03, local04
1a028     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a02c     2C 00 90 5D |  if_ne	jmp	#LR__2141
1a030     00 1E 06 F6 | 	mov	local01, #0
1a034     A7 12 02 FB | 	rdlong	arg01, fp
1a038     0C 4E 05 F1 | 	add	fp, #12
1a03c     A7 14 02 FB | 	rdlong	arg02, fp
1a040     0C 4E 85 F1 | 	sub	fp, #12
1a044     01 16 66 F6 | 	neg	arg03, #1
1a048     E8 97 B0 FD | 	call	#__system___float_cmp
1a04c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a050     00 1E 26 36 |  if_ae	not	local01, #0
1a054     A7 1E 62 FC | 	wrlong	local01, fp
1a058     C8 03 90 FD | 	jmp	#LR__2153
1a05c                 | LR__2141
1a05c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1a05c     08 4E 05 F1 | 	add	fp, #8
1a060     A7 1E 02 FB | 	rdlong	local01, fp
1a064     08 4E 85 F1 | 	sub	fp, #8
1a068     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a06c     14 4E 05 A1 |  if_e	add	fp, #20
1a070     A7 24 02 AB |  if_e	rdlong	local04, fp
1a074     14 4E 85 A1 |  if_e	sub	fp, #20
1a078     12 23 02 A6 |  if_e	mov	local03, local04
1a07c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a080     48 00 90 5D |  if_ne	jmp	#LR__2142
1a084     00 1E 06 F6 | 	mov	local01, #0
1a088     A7 20 02 FB | 	rdlong	local02, fp
1a08c     0C 4E 05 F1 | 	add	fp, #12
1a090     A7 12 02 FB | 	rdlong	arg01, fp
1a094     0C 4E 85 F1 | 	sub	fp, #12
1a098     09 13 52 F6 | 	abs	arg01, arg01 wc
1a09c     1F 26 C6 C9 |  if_b	decod	local05, #31
1a0a0     00 26 06 36 |  if_ae	mov	local05, #0
1a0a4     54 8F B0 FD | 	call	#__system___float_fromuns
1a0a8     13 FB 61 F5 | 	xor	result1, local05
1a0ac     FD 14 02 F6 | 	mov	arg02, result1
1a0b0     10 13 02 F6 | 	mov	arg01, local02
1a0b4     01 16 66 F6 | 	neg	arg03, #1
1a0b8     78 97 B0 FD | 	call	#__system___float_cmp
1a0bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1a0c0     00 1E 26 36 |  if_ae	not	local01, #0
1a0c4     A7 1E 62 FC | 	wrlong	local01, fp
1a0c8     58 03 90 FD | 	jmp	#LR__2153
1a0cc                 | LR__2142
1a0cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1a0cc     08 4E 05 F1 | 	add	fp, #8
1a0d0     A7 1E 02 FB | 	rdlong	local01, fp
1a0d4     08 4E 85 F1 | 	sub	fp, #8
1a0d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a0dc     14 4E 05 A1 |  if_e	add	fp, #20
1a0e0     A7 24 02 AB |  if_e	rdlong	local04, fp
1a0e4     14 4E 85 A1 |  if_e	sub	fp, #20
1a0e8     12 23 02 A6 |  if_e	mov	local03, local04
1a0ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a0f0     38 00 90 5D |  if_ne	jmp	#LR__2143
1a0f4     00 1E 06 F6 | 	mov	local01, #0
1a0f8     A7 20 02 FB | 	rdlong	local02, fp
1a0fc     0C 4E 05 F1 | 	add	fp, #12
1a100     A7 12 02 FB | 	rdlong	arg01, fp
1a104     0C 4E 85 F1 | 	sub	fp, #12
1a108     F0 8E B0 FD | 	call	#__system___float_fromuns
1a10c     FD 14 02 F6 | 	mov	arg02, result1
1a110     10 13 02 F6 | 	mov	arg01, local02
1a114     01 16 66 F6 | 	neg	arg03, #1
1a118     18 97 B0 FD | 	call	#__system___float_cmp
1a11c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a120     00 1E 26 36 |  if_ae	not	local01, #0
1a124     A7 1E 62 FC | 	wrlong	local01, fp
1a128     F8 02 90 FD | 	jmp	#LR__2153
1a12c                 | LR__2143
1a12c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1a12c     08 4E 05 F1 | 	add	fp, #8
1a130     A7 1E 02 FB | 	rdlong	local01, fp
1a134     08 4E 85 F1 | 	sub	fp, #8
1a138     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a13c     14 4E 05 A1 |  if_e	add	fp, #20
1a140     A7 24 02 AB |  if_e	rdlong	local04, fp
1a144     14 4E 85 A1 |  if_e	sub	fp, #20
1a148     12 23 02 A6 |  if_e	mov	local03, local04
1a14c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a150     44 00 90 5D |  if_ne	jmp	#LR__2144
1a154     00 1E 06 F6 | 	mov	local01, #0
1a158     A7 12 02 FB | 	rdlong	arg01, fp
1a15c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a160     1F 26 C6 C9 |  if_b	decod	local05, #31
1a164     00 26 06 36 |  if_ae	mov	local05, #0
1a168     90 8E B0 FD | 	call	#__system___float_fromuns
1a16c     13 FB 61 F5 | 	xor	result1, local05
1a170     FD 12 02 F6 | 	mov	arg01, result1
1a174     0C 4E 05 F1 | 	add	fp, #12
1a178     A7 14 02 FB | 	rdlong	arg02, fp
1a17c     0C 4E 85 F1 | 	sub	fp, #12
1a180     01 16 66 F6 | 	neg	arg03, #1
1a184     AC 96 B0 FD | 	call	#__system___float_cmp
1a188     00 FA 55 F2 | 	cmps	result1, #0 wc
1a18c     00 1E 26 36 |  if_ae	not	local01, #0
1a190     A7 1E 62 FC | 	wrlong	local01, fp
1a194     8C 02 90 FD | 	jmp	#LR__2153
1a198                 | LR__2144
1a198                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1a198     08 4E 05 F1 | 	add	fp, #8
1a19c     A7 1E 02 FB | 	rdlong	local01, fp
1a1a0     08 4E 85 F1 | 	sub	fp, #8
1a1a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a1a8     14 4E 05 A1 |  if_e	add	fp, #20
1a1ac     A7 24 02 AB |  if_e	rdlong	local04, fp
1a1b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a1b4     12 23 02 A6 |  if_e	mov	local03, local04
1a1b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a1bc     24 00 90 5D |  if_ne	jmp	#LR__2145
1a1c0     00 1E 06 F6 | 	mov	local01, #0
1a1c4     A7 20 02 FB | 	rdlong	local02, fp
1a1c8     0C 4E 05 F1 | 	add	fp, #12
1a1cc     A7 22 02 FB | 	rdlong	local03, fp
1a1d0     0C 4E 85 F1 | 	sub	fp, #12
1a1d4     11 21 52 F2 | 	cmps	local02, local03 wc
1a1d8     01 1E 66 36 |  if_ae	neg	local01, #1
1a1dc     A7 1E 62 FC | 	wrlong	local01, fp
1a1e0     40 02 90 FD | 	jmp	#LR__2153
1a1e4                 | LR__2145
1a1e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1a1e4     08 4E 05 F1 | 	add	fp, #8
1a1e8     A7 1E 02 FB | 	rdlong	local01, fp
1a1ec     08 4E 85 F1 | 	sub	fp, #8
1a1f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a1f4     14 4E 05 A1 |  if_e	add	fp, #20
1a1f8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a1fc     14 4E 85 A1 |  if_e	sub	fp, #20
1a200     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a204     24 00 90 5D |  if_ne	jmp	#LR__2146
1a208     00 1E 06 F6 | 	mov	local01, #0
1a20c     A7 20 02 FB | 	rdlong	local02, fp
1a210     0C 4E 05 F1 | 	add	fp, #12
1a214     A7 22 02 FB | 	rdlong	local03, fp
1a218     0C 4E 85 F1 | 	sub	fp, #12
1a21c     11 21 52 F2 | 	cmps	local02, local03 wc
1a220     01 1E 66 36 |  if_ae	neg	local01, #1
1a224     A7 1E 62 FC | 	wrlong	local01, fp
1a228     F8 01 90 FD | 	jmp	#LR__2153
1a22c                 | LR__2146
1a22c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1a22c     08 4E 05 F1 | 	add	fp, #8
1a230     A7 1E 02 FB | 	rdlong	local01, fp
1a234     08 4E 85 F1 | 	sub	fp, #8
1a238     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a23c     14 4E 05 A1 |  if_e	add	fp, #20
1a240     A7 22 02 AB |  if_e	rdlong	local03, fp
1a244     14 4E 85 A1 |  if_e	sub	fp, #20
1a248     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a24c     34 00 90 5D |  if_ne	jmp	#LR__2147
1a250     00 1E 06 F6 | 	mov	local01, #0
1a254     A7 12 02 FB | 	rdlong	arg01, fp
1a258     A0 8D B0 FD | 	call	#__system___float_fromuns
1a25c     FD 12 02 F6 | 	mov	arg01, result1
1a260     0C 4E 05 F1 | 	add	fp, #12
1a264     A7 14 02 FB | 	rdlong	arg02, fp
1a268     0C 4E 85 F1 | 	sub	fp, #12
1a26c     01 16 66 F6 | 	neg	arg03, #1
1a270     C0 95 B0 FD | 	call	#__system___float_cmp
1a274     00 FA 55 F2 | 	cmps	result1, #0 wc
1a278     00 1E 26 36 |  if_ae	not	local01, #0
1a27c     A7 1E 62 FC | 	wrlong	local01, fp
1a280     A0 01 90 FD | 	jmp	#LR__2153
1a284                 | LR__2147
1a284                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1a284     08 4E 05 F1 | 	add	fp, #8
1a288     A7 1E 02 FB | 	rdlong	local01, fp
1a28c     08 4E 85 F1 | 	sub	fp, #8
1a290     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a294     14 4E 05 A1 |  if_e	add	fp, #20
1a298     A7 22 02 AB |  if_e	rdlong	local03, fp
1a29c     14 4E 85 A1 |  if_e	sub	fp, #20
1a2a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a2a4     24 00 90 5D |  if_ne	jmp	#LR__2148
1a2a8     00 1E 06 F6 | 	mov	local01, #0
1a2ac     A7 20 02 FB | 	rdlong	local02, fp
1a2b0     0C 4E 05 F1 | 	add	fp, #12
1a2b4     A7 22 02 FB | 	rdlong	local03, fp
1a2b8     0C 4E 85 F1 | 	sub	fp, #12
1a2bc     11 21 52 F2 | 	cmps	local02, local03 wc
1a2c0     01 1E 66 36 |  if_ae	neg	local01, #1
1a2c4     A7 1E 62 FC | 	wrlong	local01, fp
1a2c8     58 01 90 FD | 	jmp	#LR__2153
1a2cc                 | LR__2148
1a2cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1a2cc     08 4E 05 F1 | 	add	fp, #8
1a2d0     A7 1E 02 FB | 	rdlong	local01, fp
1a2d4     08 4E 85 F1 | 	sub	fp, #8
1a2d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a2dc     14 4E 05 A1 |  if_e	add	fp, #20
1a2e0     A7 22 02 AB |  if_e	rdlong	local03, fp
1a2e4     14 4E 85 A1 |  if_e	sub	fp, #20
1a2e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a2ec     24 00 90 5D |  if_ne	jmp	#LR__2149
1a2f0     00 1E 06 F6 | 	mov	local01, #0
1a2f4     A7 20 02 FB | 	rdlong	local02, fp
1a2f8     0C 4E 05 F1 | 	add	fp, #12
1a2fc     A7 22 02 FB | 	rdlong	local03, fp
1a300     0C 4E 85 F1 | 	sub	fp, #12
1a304     11 21 12 F2 | 	cmp	local02, local03 wc
1a308     01 1E 66 36 |  if_ae	neg	local01, #1
1a30c     A7 1E 62 FC | 	wrlong	local01, fp
1a310     10 01 90 FD | 	jmp	#LR__2153
1a314                 | LR__2149
1a314                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1a314     08 4E 05 F1 | 	add	fp, #8
1a318     A7 1E 02 FB | 	rdlong	local01, fp
1a31c     08 4E 85 F1 | 	sub	fp, #8
1a320     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a324     14 4E 05 A1 |  if_e	add	fp, #20
1a328     A7 22 02 AB |  if_e	rdlong	local03, fp
1a32c     14 4E 85 A1 |  if_e	sub	fp, #20
1a330     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a334     30 00 90 5D |  if_ne	jmp	#LR__2150
1a338     00 1E 06 F6 | 	mov	local01, #0
1a33c     A7 12 02 FB | 	rdlong	arg01, fp
1a340     D0 11 BF FD | 	call	#_convertstring
1a344     FD 12 02 F6 | 	mov	arg01, result1
1a348     0C 4E 05 F1 | 	add	fp, #12
1a34c     A7 14 02 FB | 	rdlong	arg02, fp
1a350     0C 4E 85 F1 | 	sub	fp, #12
1a354     1C 65 B0 FD | 	call	#__system___string_cmp
1a358     00 FA 55 F2 | 	cmps	result1, #0 wc
1a35c     00 1E 26 36 |  if_ae	not	local01, #0
1a360     A7 1E 62 FC | 	wrlong	local01, fp
1a364     BC 00 90 FD | 	jmp	#LR__2153
1a368                 | LR__2150
1a368                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1a368     08 4E 05 F1 | 	add	fp, #8
1a36c     A7 1E 02 FB | 	rdlong	local01, fp
1a370     08 4E 85 F1 | 	sub	fp, #8
1a374     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a378     14 4E 05 A1 |  if_e	add	fp, #20
1a37c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a380     14 4E 85 A1 |  if_e	sub	fp, #20
1a384     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a388     34 00 90 5D |  if_ne	jmp	#LR__2151
1a38c     00 1E 06 F6 | 	mov	local01, #0
1a390     A7 20 02 FB | 	rdlong	local02, fp
1a394     0C 4E 05 F1 | 	add	fp, #12
1a398     A7 12 02 FB | 	rdlong	arg01, fp
1a39c     0C 4E 85 F1 | 	sub	fp, #12
1a3a0     70 11 BF FD | 	call	#_convertstring
1a3a4     FD 14 02 F6 | 	mov	arg02, result1
1a3a8     10 13 02 F6 | 	mov	arg01, local02
1a3ac     C4 64 B0 FD | 	call	#__system___string_cmp
1a3b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a3b4     00 1E 26 36 |  if_ae	not	local01, #0
1a3b8     A7 1E 62 FC | 	wrlong	local01, fp
1a3bc     64 00 90 FD | 	jmp	#LR__2153
1a3c0                 | LR__2151
1a3c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1a3c0     08 4E 05 F1 | 	add	fp, #8
1a3c4     A7 1E 02 FB | 	rdlong	local01, fp
1a3c8     08 4E 85 F1 | 	sub	fp, #8
1a3cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a3d0     14 4E 05 A1 |  if_e	add	fp, #20
1a3d4     A7 22 02 AB |  if_e	rdlong	local03, fp
1a3d8     14 4E 85 A1 |  if_e	sub	fp, #20
1a3dc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a3e0     3C 00 90 5D |  if_ne	jmp	#LR__2152
1a3e4     00 1E 06 F6 | 	mov	local01, #0
1a3e8     A7 12 02 FB | 	rdlong	arg01, fp
1a3ec     24 11 BF FD | 	call	#_convertstring
1a3f0     FD 20 02 F6 | 	mov	local02, result1
1a3f4     0C 4E 05 F1 | 	add	fp, #12
1a3f8     A7 12 02 FB | 	rdlong	arg01, fp
1a3fc     0C 4E 85 F1 | 	sub	fp, #12
1a400     10 11 BF FD | 	call	#_convertstring
1a404     FD 14 02 F6 | 	mov	arg02, result1
1a408     10 13 02 F6 | 	mov	arg01, local02
1a40c     64 64 B0 FD | 	call	#__system___string_cmp
1a410     00 FA 55 F2 | 	cmps	result1, #0 wc
1a414     00 1E 26 36 |  if_ae	not	local01, #0
1a418     A7 1E 62 FC | 	wrlong	local01, fp
1a41c     04 00 90 FD | 	jmp	#LR__2153
1a420                 | LR__2152
1a420     A7 00 68 FC | 	wrlong	#0, fp
1a424                 | LR__2153
1a424     08 4E 05 F1 | 	add	fp, #8
1a428     A7 38 68 FC | 	wrlong	#28, fp
1a42c     08 4E 85 F1 | 	sub	fp, #8
1a430     A7 12 02 F6 | 	mov	arg01, fp
1a434     FC 0F BF FD | 	call	#_push
1a438     A7 F0 03 F6 | 	mov	ptra, fp
1a43c     B2 00 A0 FD | 	call	#popregs_
1a440                 | _do_ge_ret
1a440     2D 00 64 FD | 	ret
1a444                 | 
1a444                 | ' 
1a444                 | ' sub do_le
1a444                 | _do_le
1a444     05 4A 05 F6 | 	mov	COUNT_, #5
1a448     A8 00 A0 FD | 	call	#pushregs_
1a44c     18 F0 07 F1 | 	add	ptra, #24
1a450     48 0F BF FD | 	call	#_pop
1a454     FD 1E 02 F6 | 	mov	local01, result1
1a458     FE 20 02 F6 | 	mov	local02, result2
1a45c     FF 22 02 F6 | 	mov	local03, result3
1a460     0C 4E 05 F1 | 	add	fp, #12
1a464     A7 1E 62 FC | 	wrlong	local01, fp
1a468     04 4E 05 F1 | 	add	fp, #4
1a46c     A7 20 62 FC | 	wrlong	local02, fp
1a470     04 4E 05 F1 | 	add	fp, #4
1a474     A7 22 62 FC | 	wrlong	local03, fp
1a478     14 4E 85 F1 | 	sub	fp, #20
1a47c     1C 0F BF FD | 	call	#_pop
1a480     FF 22 02 F6 | 	mov	local03, result3
1a484     A7 FA 61 FC | 	wrlong	result1, fp
1a488     04 4E 05 F1 | 	add	fp, #4
1a48c     A7 FC 61 FC | 	wrlong	result2, fp
1a490     04 4E 05 F1 | 	add	fp, #4
1a494     A7 22 62 FC | 	wrlong	local03, fp
1a498                 | ' t2=pop()
1a498                 | ' t1=pop()
1a498                 | ' 
1a498                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1a498     08 4E 85 F1 | 	sub	fp, #8
1a49c     1F 22 0E F2 | 	cmp	local03, #31 wz
1a4a0     14 4E 05 A1 |  if_e	add	fp, #20
1a4a4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a4a8     14 4E 85 A1 |  if_e	sub	fp, #20
1a4ac     12 23 02 A6 |  if_e	mov	local03, local04
1a4b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a4b4     28 00 90 5D |  if_ne	jmp	#LR__2160
1a4b8     00 1E 06 F6 | 	mov	local01, #0
1a4bc     A7 12 02 FB | 	rdlong	arg01, fp
1a4c0     0C 4E 05 F1 | 	add	fp, #12
1a4c4     A7 14 02 FB | 	rdlong	arg02, fp
1a4c8     0C 4E 85 F1 | 	sub	fp, #12
1a4cc     A4 63 B0 FD | 	call	#__system___string_cmp
1a4d0     01 FA 55 F2 | 	cmps	result1, #1 wc
1a4d4     00 1E 26 C6 |  if_b	not	local01, #0
1a4d8     A7 1E 62 FC | 	wrlong	local01, fp
1a4dc     1C 04 90 FD | 	jmp	#LR__2173
1a4e0                 | LR__2160
1a4e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1a4e0     08 4E 05 F1 | 	add	fp, #8
1a4e4     A7 1E 02 FB | 	rdlong	local01, fp
1a4e8     08 4E 85 F1 | 	sub	fp, #8
1a4ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a4f0     14 4E 05 A1 |  if_e	add	fp, #20
1a4f4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a4f8     14 4E 85 A1 |  if_e	sub	fp, #20
1a4fc     12 23 02 A6 |  if_e	mov	local03, local04
1a500     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a504     2C 00 90 5D |  if_ne	jmp	#LR__2161
1a508     00 1E 06 F6 | 	mov	local01, #0
1a50c     A7 12 02 FB | 	rdlong	arg01, fp
1a510     0C 4E 05 F1 | 	add	fp, #12
1a514     A7 14 02 FB | 	rdlong	arg02, fp
1a518     0C 4E 85 F1 | 	sub	fp, #12
1a51c     01 16 06 F6 | 	mov	arg03, #1
1a520     10 93 B0 FD | 	call	#__system___float_cmp
1a524     01 FA 55 F2 | 	cmps	result1, #1 wc
1a528     00 1E 26 C6 |  if_b	not	local01, #0
1a52c     A7 1E 62 FC | 	wrlong	local01, fp
1a530     C8 03 90 FD | 	jmp	#LR__2173
1a534                 | LR__2161
1a534                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1a534     08 4E 05 F1 | 	add	fp, #8
1a538     A7 1E 02 FB | 	rdlong	local01, fp
1a53c     08 4E 85 F1 | 	sub	fp, #8
1a540     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a544     14 4E 05 A1 |  if_e	add	fp, #20
1a548     A7 24 02 AB |  if_e	rdlong	local04, fp
1a54c     14 4E 85 A1 |  if_e	sub	fp, #20
1a550     12 23 02 A6 |  if_e	mov	local03, local04
1a554     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a558     48 00 90 5D |  if_ne	jmp	#LR__2162
1a55c     00 1E 06 F6 | 	mov	local01, #0
1a560     A7 20 02 FB | 	rdlong	local02, fp
1a564     0C 4E 05 F1 | 	add	fp, #12
1a568     A7 12 02 FB | 	rdlong	arg01, fp
1a56c     0C 4E 85 F1 | 	sub	fp, #12
1a570     09 13 52 F6 | 	abs	arg01, arg01 wc
1a574     1F 26 C6 C9 |  if_b	decod	local05, #31
1a578     00 26 06 36 |  if_ae	mov	local05, #0
1a57c     7C 8A B0 FD | 	call	#__system___float_fromuns
1a580     13 FB 61 F5 | 	xor	result1, local05
1a584     FD 14 02 F6 | 	mov	arg02, result1
1a588     10 13 02 F6 | 	mov	arg01, local02
1a58c     01 16 06 F6 | 	mov	arg03, #1
1a590     A0 92 B0 FD | 	call	#__system___float_cmp
1a594     01 FA 55 F2 | 	cmps	result1, #1 wc
1a598     00 1E 26 C6 |  if_b	not	local01, #0
1a59c     A7 1E 62 FC | 	wrlong	local01, fp
1a5a0     58 03 90 FD | 	jmp	#LR__2173
1a5a4                 | LR__2162
1a5a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1a5a4     08 4E 05 F1 | 	add	fp, #8
1a5a8     A7 1E 02 FB | 	rdlong	local01, fp
1a5ac     08 4E 85 F1 | 	sub	fp, #8
1a5b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a5b4     14 4E 05 A1 |  if_e	add	fp, #20
1a5b8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a5bc     14 4E 85 A1 |  if_e	sub	fp, #20
1a5c0     12 23 02 A6 |  if_e	mov	local03, local04
1a5c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a5c8     38 00 90 5D |  if_ne	jmp	#LR__2163
1a5cc     00 1E 06 F6 | 	mov	local01, #0
1a5d0     A7 20 02 FB | 	rdlong	local02, fp
1a5d4     0C 4E 05 F1 | 	add	fp, #12
1a5d8     A7 12 02 FB | 	rdlong	arg01, fp
1a5dc     0C 4E 85 F1 | 	sub	fp, #12
1a5e0     18 8A B0 FD | 	call	#__system___float_fromuns
1a5e4     FD 14 02 F6 | 	mov	arg02, result1
1a5e8     10 13 02 F6 | 	mov	arg01, local02
1a5ec     01 16 06 F6 | 	mov	arg03, #1
1a5f0     40 92 B0 FD | 	call	#__system___float_cmp
1a5f4     01 FA 55 F2 | 	cmps	result1, #1 wc
1a5f8     00 1E 26 C6 |  if_b	not	local01, #0
1a5fc     A7 1E 62 FC | 	wrlong	local01, fp
1a600     F8 02 90 FD | 	jmp	#LR__2173
1a604                 | LR__2163
1a604                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1a604     08 4E 05 F1 | 	add	fp, #8
1a608     A7 1E 02 FB | 	rdlong	local01, fp
1a60c     08 4E 85 F1 | 	sub	fp, #8
1a610     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a614     14 4E 05 A1 |  if_e	add	fp, #20
1a618     A7 24 02 AB |  if_e	rdlong	local04, fp
1a61c     14 4E 85 A1 |  if_e	sub	fp, #20
1a620     12 23 02 A6 |  if_e	mov	local03, local04
1a624     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a628     44 00 90 5D |  if_ne	jmp	#LR__2164
1a62c     00 1E 06 F6 | 	mov	local01, #0
1a630     A7 12 02 FB | 	rdlong	arg01, fp
1a634     09 13 52 F6 | 	abs	arg01, arg01 wc
1a638     1F 26 C6 C9 |  if_b	decod	local05, #31
1a63c     00 26 06 36 |  if_ae	mov	local05, #0
1a640     B8 89 B0 FD | 	call	#__system___float_fromuns
1a644     13 FB 61 F5 | 	xor	result1, local05
1a648     FD 12 02 F6 | 	mov	arg01, result1
1a64c     0C 4E 05 F1 | 	add	fp, #12
1a650     A7 14 02 FB | 	rdlong	arg02, fp
1a654     0C 4E 85 F1 | 	sub	fp, #12
1a658     01 16 06 F6 | 	mov	arg03, #1
1a65c     D4 91 B0 FD | 	call	#__system___float_cmp
1a660     01 FA 55 F2 | 	cmps	result1, #1 wc
1a664     00 1E 26 C6 |  if_b	not	local01, #0
1a668     A7 1E 62 FC | 	wrlong	local01, fp
1a66c     8C 02 90 FD | 	jmp	#LR__2173
1a670                 | LR__2164
1a670                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1a670     08 4E 05 F1 | 	add	fp, #8
1a674     A7 1E 02 FB | 	rdlong	local01, fp
1a678     08 4E 85 F1 | 	sub	fp, #8
1a67c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a680     14 4E 05 A1 |  if_e	add	fp, #20
1a684     A7 24 02 AB |  if_e	rdlong	local04, fp
1a688     14 4E 85 A1 |  if_e	sub	fp, #20
1a68c     12 23 02 A6 |  if_e	mov	local03, local04
1a690     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a694     24 00 90 5D |  if_ne	jmp	#LR__2165
1a698     00 1E 06 F6 | 	mov	local01, #0
1a69c     A7 20 02 FB | 	rdlong	local02, fp
1a6a0     0C 4E 05 F1 | 	add	fp, #12
1a6a4     A7 22 02 FB | 	rdlong	local03, fp
1a6a8     0C 4E 85 F1 | 	sub	fp, #12
1a6ac     11 21 5A F2 | 	cmps	local02, local03 wcz
1a6b0     01 1E 66 E6 |  if_be	neg	local01, #1
1a6b4     A7 1E 62 FC | 	wrlong	local01, fp
1a6b8     40 02 90 FD | 	jmp	#LR__2173
1a6bc                 | LR__2165
1a6bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1a6bc     08 4E 05 F1 | 	add	fp, #8
1a6c0     A7 1E 02 FB | 	rdlong	local01, fp
1a6c4     08 4E 85 F1 | 	sub	fp, #8
1a6c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a6cc     14 4E 05 A1 |  if_e	add	fp, #20
1a6d0     A7 24 02 AB |  if_e	rdlong	local04, fp
1a6d4     14 4E 85 A1 |  if_e	sub	fp, #20
1a6d8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a6dc     24 00 90 5D |  if_ne	jmp	#LR__2166
1a6e0     00 1E 06 F6 | 	mov	local01, #0
1a6e4     A7 20 02 FB | 	rdlong	local02, fp
1a6e8     0C 4E 05 F1 | 	add	fp, #12
1a6ec     A7 22 02 FB | 	rdlong	local03, fp
1a6f0     0C 4E 85 F1 | 	sub	fp, #12
1a6f4     11 21 5A F2 | 	cmps	local02, local03 wcz
1a6f8     01 1E 66 E6 |  if_be	neg	local01, #1
1a6fc     A7 1E 62 FC | 	wrlong	local01, fp
1a700     F8 01 90 FD | 	jmp	#LR__2173
1a704                 | LR__2166
1a704                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1a704     08 4E 05 F1 | 	add	fp, #8
1a708     A7 1E 02 FB | 	rdlong	local01, fp
1a70c     08 4E 85 F1 | 	sub	fp, #8
1a710     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a714     14 4E 05 A1 |  if_e	add	fp, #20
1a718     A7 22 02 AB |  if_e	rdlong	local03, fp
1a71c     14 4E 85 A1 |  if_e	sub	fp, #20
1a720     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a724     34 00 90 5D |  if_ne	jmp	#LR__2167
1a728     00 1E 06 F6 | 	mov	local01, #0
1a72c     A7 12 02 FB | 	rdlong	arg01, fp
1a730     C8 88 B0 FD | 	call	#__system___float_fromuns
1a734     FD 12 02 F6 | 	mov	arg01, result1
1a738     0C 4E 05 F1 | 	add	fp, #12
1a73c     A7 14 02 FB | 	rdlong	arg02, fp
1a740     0C 4E 85 F1 | 	sub	fp, #12
1a744     01 16 06 F6 | 	mov	arg03, #1
1a748     E8 90 B0 FD | 	call	#__system___float_cmp
1a74c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a750     00 1E 26 C6 |  if_b	not	local01, #0
1a754     A7 1E 62 FC | 	wrlong	local01, fp
1a758     A0 01 90 FD | 	jmp	#LR__2173
1a75c                 | LR__2167
1a75c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1a75c     08 4E 05 F1 | 	add	fp, #8
1a760     A7 1E 02 FB | 	rdlong	local01, fp
1a764     08 4E 85 F1 | 	sub	fp, #8
1a768     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a76c     14 4E 05 A1 |  if_e	add	fp, #20
1a770     A7 22 02 AB |  if_e	rdlong	local03, fp
1a774     14 4E 85 A1 |  if_e	sub	fp, #20
1a778     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a77c     24 00 90 5D |  if_ne	jmp	#LR__2168
1a780     00 1E 06 F6 | 	mov	local01, #0
1a784     A7 20 02 FB | 	rdlong	local02, fp
1a788     0C 4E 05 F1 | 	add	fp, #12
1a78c     A7 22 02 FB | 	rdlong	local03, fp
1a790     0C 4E 85 F1 | 	sub	fp, #12
1a794     11 21 5A F2 | 	cmps	local02, local03 wcz
1a798     01 1E 66 E6 |  if_be	neg	local01, #1
1a79c     A7 1E 62 FC | 	wrlong	local01, fp
1a7a0     58 01 90 FD | 	jmp	#LR__2173
1a7a4                 | LR__2168
1a7a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1a7a4     08 4E 05 F1 | 	add	fp, #8
1a7a8     A7 1E 02 FB | 	rdlong	local01, fp
1a7ac     08 4E 85 F1 | 	sub	fp, #8
1a7b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a7b4     14 4E 05 A1 |  if_e	add	fp, #20
1a7b8     A7 22 02 AB |  if_e	rdlong	local03, fp
1a7bc     14 4E 85 A1 |  if_e	sub	fp, #20
1a7c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a7c4     24 00 90 5D |  if_ne	jmp	#LR__2169
1a7c8     00 1E 06 F6 | 	mov	local01, #0
1a7cc     A7 20 02 FB | 	rdlong	local02, fp
1a7d0     0C 4E 05 F1 | 	add	fp, #12
1a7d4     A7 22 02 FB | 	rdlong	local03, fp
1a7d8     0C 4E 85 F1 | 	sub	fp, #12
1a7dc     11 21 1A F2 | 	cmp	local02, local03 wcz
1a7e0     01 1E 66 E6 |  if_be	neg	local01, #1
1a7e4     A7 1E 62 FC | 	wrlong	local01, fp
1a7e8     10 01 90 FD | 	jmp	#LR__2173
1a7ec                 | LR__2169
1a7ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1a7ec     08 4E 05 F1 | 	add	fp, #8
1a7f0     A7 1E 02 FB | 	rdlong	local01, fp
1a7f4     08 4E 85 F1 | 	sub	fp, #8
1a7f8     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a7fc     14 4E 05 A1 |  if_e	add	fp, #20
1a800     A7 22 02 AB |  if_e	rdlong	local03, fp
1a804     14 4E 85 A1 |  if_e	sub	fp, #20
1a808     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a80c     30 00 90 5D |  if_ne	jmp	#LR__2170
1a810     00 1E 06 F6 | 	mov	local01, #0
1a814     A7 12 02 FB | 	rdlong	arg01, fp
1a818     F8 0C BF FD | 	call	#_convertstring
1a81c     FD 12 02 F6 | 	mov	arg01, result1
1a820     0C 4E 05 F1 | 	add	fp, #12
1a824     A7 14 02 FB | 	rdlong	arg02, fp
1a828     0C 4E 85 F1 | 	sub	fp, #12
1a82c     44 60 B0 FD | 	call	#__system___string_cmp
1a830     01 FA 55 F2 | 	cmps	result1, #1 wc
1a834     00 1E 26 C6 |  if_b	not	local01, #0
1a838     A7 1E 62 FC | 	wrlong	local01, fp
1a83c     BC 00 90 FD | 	jmp	#LR__2173
1a840                 | LR__2170
1a840                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1a840     08 4E 05 F1 | 	add	fp, #8
1a844     A7 1E 02 FB | 	rdlong	local01, fp
1a848     08 4E 85 F1 | 	sub	fp, #8
1a84c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a850     14 4E 05 A1 |  if_e	add	fp, #20
1a854     A7 22 02 AB |  if_e	rdlong	local03, fp
1a858     14 4E 85 A1 |  if_e	sub	fp, #20
1a85c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a860     34 00 90 5D |  if_ne	jmp	#LR__2171
1a864     00 1E 06 F6 | 	mov	local01, #0
1a868     A7 20 02 FB | 	rdlong	local02, fp
1a86c     0C 4E 05 F1 | 	add	fp, #12
1a870     A7 12 02 FB | 	rdlong	arg01, fp
1a874     0C 4E 85 F1 | 	sub	fp, #12
1a878     98 0C BF FD | 	call	#_convertstring
1a87c     FD 14 02 F6 | 	mov	arg02, result1
1a880     10 13 02 F6 | 	mov	arg01, local02
1a884     EC 5F B0 FD | 	call	#__system___string_cmp
1a888     01 FA 55 F2 | 	cmps	result1, #1 wc
1a88c     00 1E 26 C6 |  if_b	not	local01, #0
1a890     A7 1E 62 FC | 	wrlong	local01, fp
1a894     64 00 90 FD | 	jmp	#LR__2173
1a898                 | LR__2171
1a898                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1a898     08 4E 05 F1 | 	add	fp, #8
1a89c     A7 1E 02 FB | 	rdlong	local01, fp
1a8a0     08 4E 85 F1 | 	sub	fp, #8
1a8a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a8a8     14 4E 05 A1 |  if_e	add	fp, #20
1a8ac     A7 22 02 AB |  if_e	rdlong	local03, fp
1a8b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a8b4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a8b8     3C 00 90 5D |  if_ne	jmp	#LR__2172
1a8bc     00 1E 06 F6 | 	mov	local01, #0
1a8c0     A7 12 02 FB | 	rdlong	arg01, fp
1a8c4     4C 0C BF FD | 	call	#_convertstring
1a8c8     FD 20 02 F6 | 	mov	local02, result1
1a8cc     0C 4E 05 F1 | 	add	fp, #12
1a8d0     A7 12 02 FB | 	rdlong	arg01, fp
1a8d4     0C 4E 85 F1 | 	sub	fp, #12
1a8d8     38 0C BF FD | 	call	#_convertstring
1a8dc     FD 14 02 F6 | 	mov	arg02, result1
1a8e0     10 13 02 F6 | 	mov	arg01, local02
1a8e4     8C 5F B0 FD | 	call	#__system___string_cmp
1a8e8     01 FA 55 F2 | 	cmps	result1, #1 wc
1a8ec     00 1E 26 C6 |  if_b	not	local01, #0
1a8f0     A7 1E 62 FC | 	wrlong	local01, fp
1a8f4     04 00 90 FD | 	jmp	#LR__2173
1a8f8                 | LR__2172
1a8f8     A7 00 68 FC | 	wrlong	#0, fp
1a8fc                 | LR__2173
1a8fc     08 4E 05 F1 | 	add	fp, #8
1a900     A7 38 68 FC | 	wrlong	#28, fp
1a904     08 4E 85 F1 | 	sub	fp, #8
1a908     A7 12 02 F6 | 	mov	arg01, fp
1a90c     24 0B BF FD | 	call	#_push
1a910     A7 F0 03 F6 | 	mov	ptra, fp
1a914     B2 00 A0 FD | 	call	#popregs_
1a918                 | _do_le_ret
1a918     2D 00 64 FD | 	ret
1a91c                 | 
1a91c                 | ' 
1a91c                 | ' 
1a91c                 | ' sub do_ne
1a91c                 | _do_ne
1a91c     05 4A 05 F6 | 	mov	COUNT_, #5
1a920     A8 00 A0 FD | 	call	#pushregs_
1a924     18 F0 07 F1 | 	add	ptra, #24
1a928     70 0A BF FD | 	call	#_pop
1a92c     FD 1E 02 F6 | 	mov	local01, result1
1a930     FE 20 02 F6 | 	mov	local02, result2
1a934     FF 22 02 F6 | 	mov	local03, result3
1a938     0C 4E 05 F1 | 	add	fp, #12
1a93c     A7 1E 62 FC | 	wrlong	local01, fp
1a940     04 4E 05 F1 | 	add	fp, #4
1a944     A7 20 62 FC | 	wrlong	local02, fp
1a948     04 4E 05 F1 | 	add	fp, #4
1a94c     A7 22 62 FC | 	wrlong	local03, fp
1a950     14 4E 85 F1 | 	sub	fp, #20
1a954     44 0A BF FD | 	call	#_pop
1a958     FF 22 02 F6 | 	mov	local03, result3
1a95c     A7 FA 61 FC | 	wrlong	result1, fp
1a960     04 4E 05 F1 | 	add	fp, #4
1a964     A7 FC 61 FC | 	wrlong	result2, fp
1a968     04 4E 05 F1 | 	add	fp, #4
1a96c     A7 22 62 FC | 	wrlong	local03, fp
1a970                 | ' t2=pop()
1a970                 | ' t1=pop()
1a970                 | ' 
1a970                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1a970     08 4E 85 F1 | 	sub	fp, #8
1a974     1F 22 0E F2 | 	cmp	local03, #31 wz
1a978     14 4E 05 A1 |  if_e	add	fp, #20
1a97c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a980     14 4E 85 A1 |  if_e	sub	fp, #20
1a984     12 23 02 A6 |  if_e	mov	local03, local04
1a988     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a98c     28 00 90 5D |  if_ne	jmp	#LR__2180
1a990     00 1E 06 F6 | 	mov	local01, #0
1a994     A7 12 02 FB | 	rdlong	arg01, fp
1a998     0C 4E 05 F1 | 	add	fp, #12
1a99c     A7 14 02 FB | 	rdlong	arg02, fp
1a9a0     0C 4E 85 F1 | 	sub	fp, #12
1a9a4     CC 5E B0 FD | 	call	#__system___string_cmp
1a9a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9ac     00 1E 26 56 |  if_ne	not	local01, #0
1a9b0     A7 1E 62 FC | 	wrlong	local01, fp
1a9b4     1C 04 90 FD | 	jmp	#LR__2193
1a9b8                 | LR__2180
1a9b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1a9b8     08 4E 05 F1 | 	add	fp, #8
1a9bc     A7 1E 02 FB | 	rdlong	local01, fp
1a9c0     08 4E 85 F1 | 	sub	fp, #8
1a9c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a9c8     14 4E 05 A1 |  if_e	add	fp, #20
1a9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
1a9d0     14 4E 85 A1 |  if_e	sub	fp, #20
1a9d4     12 23 02 A6 |  if_e	mov	local03, local04
1a9d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a9dc     2C 00 90 5D |  if_ne	jmp	#LR__2181
1a9e0     00 1E 06 F6 | 	mov	local01, #0
1a9e4     A7 12 02 FB | 	rdlong	arg01, fp
1a9e8     0C 4E 05 F1 | 	add	fp, #12
1a9ec     A7 14 02 FB | 	rdlong	arg02, fp
1a9f0     0C 4E 85 F1 | 	sub	fp, #12
1a9f4     01 16 06 F6 | 	mov	arg03, #1
1a9f8     38 8E B0 FD | 	call	#__system___float_cmp
1a9fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa00     00 1E 26 56 |  if_ne	not	local01, #0
1aa04     A7 1E 62 FC | 	wrlong	local01, fp
1aa08     C8 03 90 FD | 	jmp	#LR__2193
1aa0c                 | LR__2181
1aa0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1aa0c     08 4E 05 F1 | 	add	fp, #8
1aa10     A7 1E 02 FB | 	rdlong	local01, fp
1aa14     08 4E 85 F1 | 	sub	fp, #8
1aa18     1E 1E 0E F2 | 	cmp	local01, #30 wz
1aa1c     14 4E 05 A1 |  if_e	add	fp, #20
1aa20     A7 24 02 AB |  if_e	rdlong	local04, fp
1aa24     14 4E 85 A1 |  if_e	sub	fp, #20
1aa28     12 23 02 A6 |  if_e	mov	local03, local04
1aa2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1aa30     48 00 90 5D |  if_ne	jmp	#LR__2182
1aa34     00 1E 06 F6 | 	mov	local01, #0
1aa38     A7 20 02 FB | 	rdlong	local02, fp
1aa3c     0C 4E 05 F1 | 	add	fp, #12
1aa40     A7 12 02 FB | 	rdlong	arg01, fp
1aa44     0C 4E 85 F1 | 	sub	fp, #12
1aa48     09 13 52 F6 | 	abs	arg01, arg01 wc
1aa4c     1F 26 C6 C9 |  if_b	decod	local05, #31
1aa50     00 26 06 36 |  if_ae	mov	local05, #0
1aa54     A4 85 B0 FD | 	call	#__system___float_fromuns
1aa58     13 FB 61 F5 | 	xor	result1, local05
1aa5c     FD 14 02 F6 | 	mov	arg02, result1
1aa60     10 13 02 F6 | 	mov	arg01, local02
1aa64     01 16 06 F6 | 	mov	arg03, #1
1aa68     C8 8D B0 FD | 	call	#__system___float_cmp
1aa6c     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa70     00 1E 26 56 |  if_ne	not	local01, #0
1aa74     A7 1E 62 FC | 	wrlong	local01, fp
1aa78     58 03 90 FD | 	jmp	#LR__2193
1aa7c                 | LR__2182
1aa7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1aa7c     08 4E 05 F1 | 	add	fp, #8
1aa80     A7 1E 02 FB | 	rdlong	local01, fp
1aa84     08 4E 85 F1 | 	sub	fp, #8
1aa88     1E 1E 0E F2 | 	cmp	local01, #30 wz
1aa8c     14 4E 05 A1 |  if_e	add	fp, #20
1aa90     A7 24 02 AB |  if_e	rdlong	local04, fp
1aa94     14 4E 85 A1 |  if_e	sub	fp, #20
1aa98     12 23 02 A6 |  if_e	mov	local03, local04
1aa9c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1aaa0     38 00 90 5D |  if_ne	jmp	#LR__2183
1aaa4     00 1E 06 F6 | 	mov	local01, #0
1aaa8     A7 20 02 FB | 	rdlong	local02, fp
1aaac     0C 4E 05 F1 | 	add	fp, #12
1aab0     A7 12 02 FB | 	rdlong	arg01, fp
1aab4     0C 4E 85 F1 | 	sub	fp, #12
1aab8     40 85 B0 FD | 	call	#__system___float_fromuns
1aabc     FD 14 02 F6 | 	mov	arg02, result1
1aac0     10 13 02 F6 | 	mov	arg01, local02
1aac4     01 16 06 F6 | 	mov	arg03, #1
1aac8     68 8D B0 FD | 	call	#__system___float_cmp
1aacc     00 FA 0D F2 | 	cmp	result1, #0 wz
1aad0     00 1E 26 56 |  if_ne	not	local01, #0
1aad4     A7 1E 62 FC | 	wrlong	local01, fp
1aad8     F8 02 90 FD | 	jmp	#LR__2193
1aadc                 | LR__2183
1aadc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1aadc     08 4E 05 F1 | 	add	fp, #8
1aae0     A7 1E 02 FB | 	rdlong	local01, fp
1aae4     08 4E 85 F1 | 	sub	fp, #8
1aae8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1aaec     14 4E 05 A1 |  if_e	add	fp, #20
1aaf0     A7 24 02 AB |  if_e	rdlong	local04, fp
1aaf4     14 4E 85 A1 |  if_e	sub	fp, #20
1aaf8     12 23 02 A6 |  if_e	mov	local03, local04
1aafc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ab00     44 00 90 5D |  if_ne	jmp	#LR__2184
1ab04     00 1E 06 F6 | 	mov	local01, #0
1ab08     A7 12 02 FB | 	rdlong	arg01, fp
1ab0c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ab10     1F 26 C6 C9 |  if_b	decod	local05, #31
1ab14     00 26 06 36 |  if_ae	mov	local05, #0
1ab18     E0 84 B0 FD | 	call	#__system___float_fromuns
1ab1c     13 FB 61 F5 | 	xor	result1, local05
1ab20     FD 12 02 F6 | 	mov	arg01, result1
1ab24     0C 4E 05 F1 | 	add	fp, #12
1ab28     A7 14 02 FB | 	rdlong	arg02, fp
1ab2c     0C 4E 85 F1 | 	sub	fp, #12
1ab30     01 16 06 F6 | 	mov	arg03, #1
1ab34     FC 8C B0 FD | 	call	#__system___float_cmp
1ab38     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab3c     00 1E 26 56 |  if_ne	not	local01, #0
1ab40     A7 1E 62 FC | 	wrlong	local01, fp
1ab44     8C 02 90 FD | 	jmp	#LR__2193
1ab48                 | LR__2184
1ab48                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1ab48     08 4E 05 F1 | 	add	fp, #8
1ab4c     A7 1E 02 FB | 	rdlong	local01, fp
1ab50     08 4E 85 F1 | 	sub	fp, #8
1ab54     1C 1E 0E F2 | 	cmp	local01, #28 wz
1ab58     14 4E 05 A1 |  if_e	add	fp, #20
1ab5c     A7 24 02 AB |  if_e	rdlong	local04, fp
1ab60     14 4E 85 A1 |  if_e	sub	fp, #20
1ab64     12 23 02 A6 |  if_e	mov	local03, local04
1ab68     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1ab6c     24 00 90 5D |  if_ne	jmp	#LR__2185
1ab70     00 1E 06 F6 | 	mov	local01, #0
1ab74     A7 20 02 FB | 	rdlong	local02, fp
1ab78     0C 4E 05 F1 | 	add	fp, #12
1ab7c     A7 22 02 FB | 	rdlong	local03, fp
1ab80     0C 4E 85 F1 | 	sub	fp, #12
1ab84     11 21 0A F2 | 	cmp	local02, local03 wz
1ab88     01 1E 66 56 |  if_ne	neg	local01, #1
1ab8c     A7 1E 62 FC | 	wrlong	local01, fp
1ab90     40 02 90 FD | 	jmp	#LR__2193
1ab94                 | LR__2185
1ab94                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1ab94     08 4E 05 F1 | 	add	fp, #8
1ab98     A7 1E 02 FB | 	rdlong	local01, fp
1ab9c     08 4E 85 F1 | 	sub	fp, #8
1aba0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1aba4     14 4E 05 A1 |  if_e	add	fp, #20
1aba8     A7 24 02 AB |  if_e	rdlong	local04, fp
1abac     14 4E 85 A1 |  if_e	sub	fp, #20
1abb0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1abb4     24 00 90 5D |  if_ne	jmp	#LR__2186
1abb8     00 1E 06 F6 | 	mov	local01, #0
1abbc     A7 20 02 FB | 	rdlong	local02, fp
1abc0     0C 4E 05 F1 | 	add	fp, #12
1abc4     A7 22 02 FB | 	rdlong	local03, fp
1abc8     0C 4E 85 F1 | 	sub	fp, #12
1abcc     11 21 0A F2 | 	cmp	local02, local03 wz
1abd0     01 1E 66 56 |  if_ne	neg	local01, #1
1abd4     A7 1E 62 FC | 	wrlong	local01, fp
1abd8     F8 01 90 FD | 	jmp	#LR__2193
1abdc                 | LR__2186
1abdc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1abdc     08 4E 05 F1 | 	add	fp, #8
1abe0     A7 1E 02 FB | 	rdlong	local01, fp
1abe4     08 4E 85 F1 | 	sub	fp, #8
1abe8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1abec     14 4E 05 A1 |  if_e	add	fp, #20
1abf0     A7 22 02 AB |  if_e	rdlong	local03, fp
1abf4     14 4E 85 A1 |  if_e	sub	fp, #20
1abf8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1abfc     34 00 90 5D |  if_ne	jmp	#LR__2187
1ac00     00 1E 06 F6 | 	mov	local01, #0
1ac04     A7 12 02 FB | 	rdlong	arg01, fp
1ac08     F0 83 B0 FD | 	call	#__system___float_fromuns
1ac0c     FD 12 02 F6 | 	mov	arg01, result1
1ac10     0C 4E 05 F1 | 	add	fp, #12
1ac14     A7 14 02 FB | 	rdlong	arg02, fp
1ac18     0C 4E 85 F1 | 	sub	fp, #12
1ac1c     01 16 06 F6 | 	mov	arg03, #1
1ac20     10 8C B0 FD | 	call	#__system___float_cmp
1ac24     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac28     00 1E 26 56 |  if_ne	not	local01, #0
1ac2c     A7 1E 62 FC | 	wrlong	local01, fp
1ac30     A0 01 90 FD | 	jmp	#LR__2193
1ac34                 | LR__2187
1ac34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1ac34     08 4E 05 F1 | 	add	fp, #8
1ac38     A7 1E 02 FB | 	rdlong	local01, fp
1ac3c     08 4E 85 F1 | 	sub	fp, #8
1ac40     1D 1E 0E F2 | 	cmp	local01, #29 wz
1ac44     14 4E 05 A1 |  if_e	add	fp, #20
1ac48     A7 22 02 AB |  if_e	rdlong	local03, fp
1ac4c     14 4E 85 A1 |  if_e	sub	fp, #20
1ac50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1ac54     24 00 90 5D |  if_ne	jmp	#LR__2188
1ac58     00 1E 06 F6 | 	mov	local01, #0
1ac5c     A7 20 02 FB | 	rdlong	local02, fp
1ac60     0C 4E 05 F1 | 	add	fp, #12
1ac64     A7 22 02 FB | 	rdlong	local03, fp
1ac68     0C 4E 85 F1 | 	sub	fp, #12
1ac6c     11 21 0A F2 | 	cmp	local02, local03 wz
1ac70     01 1E 66 56 |  if_ne	neg	local01, #1
1ac74     A7 1E 62 FC | 	wrlong	local01, fp
1ac78     58 01 90 FD | 	jmp	#LR__2193
1ac7c                 | LR__2188
1ac7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1ac7c     08 4E 05 F1 | 	add	fp, #8
1ac80     A7 1E 02 FB | 	rdlong	local01, fp
1ac84     08 4E 85 F1 | 	sub	fp, #8
1ac88     1D 1E 0E F2 | 	cmp	local01, #29 wz
1ac8c     14 4E 05 A1 |  if_e	add	fp, #20
1ac90     A7 22 02 AB |  if_e	rdlong	local03, fp
1ac94     14 4E 85 A1 |  if_e	sub	fp, #20
1ac98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ac9c     24 00 90 5D |  if_ne	jmp	#LR__2189
1aca0     00 1E 06 F6 | 	mov	local01, #0
1aca4     A7 20 02 FB | 	rdlong	local02, fp
1aca8     0C 4E 05 F1 | 	add	fp, #12
1acac     A7 22 02 FB | 	rdlong	local03, fp
1acb0     0C 4E 85 F1 | 	sub	fp, #12
1acb4     11 21 0A F2 | 	cmp	local02, local03 wz
1acb8     01 1E 66 56 |  if_ne	neg	local01, #1
1acbc     A7 1E 62 FC | 	wrlong	local01, fp
1acc0     10 01 90 FD | 	jmp	#LR__2193
1acc4                 | LR__2189
1acc4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1acc4     08 4E 05 F1 | 	add	fp, #8
1acc8     A7 1E 02 FB | 	rdlong	local01, fp
1accc     08 4E 85 F1 | 	sub	fp, #8
1acd0     2B 1E 0E F2 | 	cmp	local01, #43 wz
1acd4     14 4E 05 A1 |  if_e	add	fp, #20
1acd8     A7 22 02 AB |  if_e	rdlong	local03, fp
1acdc     14 4E 85 A1 |  if_e	sub	fp, #20
1ace0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1ace4     30 00 90 5D |  if_ne	jmp	#LR__2190
1ace8     00 1E 06 F6 | 	mov	local01, #0
1acec     A7 12 02 FB | 	rdlong	arg01, fp
1acf0     20 08 BF FD | 	call	#_convertstring
1acf4     FD 12 02 F6 | 	mov	arg01, result1
1acf8     0C 4E 05 F1 | 	add	fp, #12
1acfc     A7 14 02 FB | 	rdlong	arg02, fp
1ad00     0C 4E 85 F1 | 	sub	fp, #12
1ad04     6C 5B B0 FD | 	call	#__system___string_cmp
1ad08     00 FA 0D F2 | 	cmp	result1, #0 wz
1ad0c     00 1E 26 56 |  if_ne	not	local01, #0
1ad10     A7 1E 62 FC | 	wrlong	local01, fp
1ad14     BC 00 90 FD | 	jmp	#LR__2193
1ad18                 | LR__2190
1ad18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1ad18     08 4E 05 F1 | 	add	fp, #8
1ad1c     A7 1E 02 FB | 	rdlong	local01, fp
1ad20     08 4E 85 F1 | 	sub	fp, #8
1ad24     1F 1E 0E F2 | 	cmp	local01, #31 wz
1ad28     14 4E 05 A1 |  if_e	add	fp, #20
1ad2c     A7 22 02 AB |  if_e	rdlong	local03, fp
1ad30     14 4E 85 A1 |  if_e	sub	fp, #20
1ad34     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1ad38     34 00 90 5D |  if_ne	jmp	#LR__2191
1ad3c     00 1E 06 F6 | 	mov	local01, #0
1ad40     A7 20 02 FB | 	rdlong	local02, fp
1ad44     0C 4E 05 F1 | 	add	fp, #12
1ad48     A7 12 02 FB | 	rdlong	arg01, fp
1ad4c     0C 4E 85 F1 | 	sub	fp, #12
1ad50     C0 07 BF FD | 	call	#_convertstring
1ad54     FD 14 02 F6 | 	mov	arg02, result1
1ad58     10 13 02 F6 | 	mov	arg01, local02
1ad5c     14 5B B0 FD | 	call	#__system___string_cmp
1ad60     00 FA 0D F2 | 	cmp	result1, #0 wz
1ad64     00 1E 26 56 |  if_ne	not	local01, #0
1ad68     A7 1E 62 FC | 	wrlong	local01, fp
1ad6c     64 00 90 FD | 	jmp	#LR__2193
1ad70                 | LR__2191
1ad70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1ad70     08 4E 05 F1 | 	add	fp, #8
1ad74     A7 1E 02 FB | 	rdlong	local01, fp
1ad78     08 4E 85 F1 | 	sub	fp, #8
1ad7c     2B 1E 0E F2 | 	cmp	local01, #43 wz
1ad80     14 4E 05 A1 |  if_e	add	fp, #20
1ad84     A7 22 02 AB |  if_e	rdlong	local03, fp
1ad88     14 4E 85 A1 |  if_e	sub	fp, #20
1ad8c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1ad90     3C 00 90 5D |  if_ne	jmp	#LR__2192
1ad94     00 1E 06 F6 | 	mov	local01, #0
1ad98     A7 12 02 FB | 	rdlong	arg01, fp
1ad9c     74 07 BF FD | 	call	#_convertstring
1ada0     FD 20 02 F6 | 	mov	local02, result1
1ada4     0C 4E 05 F1 | 	add	fp, #12
1ada8     A7 12 02 FB | 	rdlong	arg01, fp
1adac     0C 4E 85 F1 | 	sub	fp, #12
1adb0     60 07 BF FD | 	call	#_convertstring
1adb4     FD 14 02 F6 | 	mov	arg02, result1
1adb8     10 13 02 F6 | 	mov	arg01, local02
1adbc     B4 5A B0 FD | 	call	#__system___string_cmp
1adc0     00 FA 0D F2 | 	cmp	result1, #0 wz
1adc4     00 1E 26 56 |  if_ne	not	local01, #0
1adc8     A7 1E 62 FC | 	wrlong	local01, fp
1adcc     04 00 90 FD | 	jmp	#LR__2193
1add0                 | LR__2192
1add0     A7 00 68 FC | 	wrlong	#0, fp
1add4                 | LR__2193
1add4     08 4E 05 F1 | 	add	fp, #8
1add8     A7 38 68 FC | 	wrlong	#28, fp
1addc     08 4E 85 F1 | 	sub	fp, #8
1ade0     A7 12 02 F6 | 	mov	arg01, fp
1ade4     4C 06 BF FD | 	call	#_push
1ade8     A7 F0 03 F6 | 	mov	ptra, fp
1adec     B2 00 A0 FD | 	call	#popregs_
1adf0                 | _do_ne_ret
1adf0     2D 00 64 FD | 	ret
1adf4                 | 
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' ' -------------------------- Draw a frane
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' 
1adf4                 | ' sub do_ink
1adf4                 | _do_ink
1adf4     03 4A 05 F6 | 	mov	COUNT_, #3
1adf8     A8 00 A0 FD | 	call	#pushregs_
1adfc     9C 05 BF FD | 	call	#_pop
1ae00     FD 1E 02 F6 | 	mov	local01, result1
1ae04     FE 20 02 F6 | 	mov	local02, result2
1ae08     FF 22 02 F6 | 	mov	local03, result3
1ae0c                 | ' t1=pop() 
1ae0c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1ae0c     1E 22 0E F2 | 	cmp	local03, #30 wz
1ae10     10 00 90 5D |  if_ne	jmp	#LR__2200
1ae14     0F 13 02 F6 | 	mov	arg01, local01
1ae18     00 14 06 F6 | 	mov	arg02, #0
1ae1c     A8 8A B0 FD | 	call	#__system___float_tointeger
1ae20     FD 1E 02 F6 | 	mov	local01, result1
1ae24                 | LR__2200
1ae24                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1ae24     1F 22 0E F2 | 	cmp	local03, #31 wz
1ae28     18 00 90 5D |  if_ne	jmp	#LR__2201
1ae2c     0F 13 02 F6 | 	mov	arg01, local01
1ae30     D8 8D B0 FD | 	call	#__system____builtin_atof
1ae34     FD 12 02 F6 | 	mov	arg01, result1
1ae38     00 14 06 F6 | 	mov	arg02, #0
1ae3c     88 8A B0 FD | 	call	#__system___float_tointeger
1ae40     FD 1E 02 F6 | 	mov	local01, result1
1ae44                 | LR__2201
1ae44     37 00 00 FF 
1ae48     3C E4 05 F1 | 	add	objptr, ##28220
1ae4c     F2 1E 62 FC | 	wrlong	local01, objptr
1ae50     04 E4 85 F1 | 	sub	objptr, #4
1ae54     F2 14 02 FB | 	rdlong	arg02, objptr
1ae58                 | ' 
1ae58                 | ' write_color:=ff
1ae58     36 00 00 FF 
1ae5c     F7 E5 85 F1 | 	sub	objptr, ##28151
1ae60     F2 1E 62 FC | 	wrlong	local01, objptr
1ae64                 | ' write_background:=bb
1ae64     04 E4 05 F1 | 	add	objptr, #4
1ae68     F2 14 62 FC | 	wrlong	arg02, objptr
1ae6c     36 00 00 FF 
1ae70     F7 E5 05 F1 | 	add	objptr, ##28151
1ae74     F2 12 02 FB | 	rdlong	arg01, objptr
1ae78     37 00 00 FF 
1ae7c     3C E4 85 F1 | 	sub	objptr, ##28220
1ae80     58 2F B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1ae84     A7 F0 03 F6 | 	mov	ptra, fp
1ae88     B2 00 A0 FD | 	call	#popregs_
1ae8c                 | _do_ink_ret
1ae8c     2D 00 64 FD | 	ret
1ae90                 | 
1ae90                 | ' 
1ae90                 | ' 
1ae90                 | ' sub do_font
1ae90                 | _do_font
1ae90     03 4A 05 F6 | 	mov	COUNT_, #3
1ae94     A8 00 A0 FD | 	call	#pushregs_
1ae98     00 05 BF FD | 	call	#_pop
1ae9c     FD 1E 02 F6 | 	mov	local01, result1
1aea0     FE 20 02 F6 | 	mov	local02, result2
1aea4     FF 22 02 F6 | 	mov	local03, result3
1aea8                 | ' t1=pop() 
1aea8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1aea8     1E 22 0E F2 | 	cmp	local03, #30 wz
1aeac     10 00 90 5D |  if_ne	jmp	#LR__2210
1aeb0     0F 13 02 F6 | 	mov	arg01, local01
1aeb4     00 14 06 F6 | 	mov	arg02, #0
1aeb8     0C 8A B0 FD | 	call	#__system___float_tointeger
1aebc     FD 1E 02 F6 | 	mov	local01, result1
1aec0                 | LR__2210
1aec0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1aec0     1F 22 0E F2 | 	cmp	local03, #31 wz
1aec4     18 00 90 5D |  if_ne	jmp	#LR__2211
1aec8     0F 13 02 F6 | 	mov	arg01, local01
1aecc     3C 8D B0 FD | 	call	#__system____builtin_atof
1aed0     FD 12 02 F6 | 	mov	arg01, result1
1aed4     00 14 06 F6 | 	mov	arg02, #0
1aed8     EC 89 B0 FD | 	call	#__system___float_tointeger
1aedc     FD 1E 02 F6 | 	mov	local01, result1
1aee0                 | LR__2211
1aee0     37 00 00 FF 
1aee4     40 E4 05 F1 | 	add	objptr, ##28224
1aee8     F2 1E 62 FC | 	wrlong	local01, objptr
1aeec     37 00 00 FF 
1aef0     40 E4 85 F1 | 	sub	objptr, ##28224
1aef4     02 1E 66 F0 | 	shl	local01, #2
1aef8     0F 13 02 F6 | 	mov	arg01, local01
1aefc     20 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
1af00     A7 F0 03 F6 | 	mov	ptra, fp
1af04     B2 00 A0 FD | 	call	#popregs_
1af08                 | _do_font_ret
1af08     2D 00 64 FD | 	ret
1af0c                 | 
1af0c                 | ' 
1af0c                 | ' 
1af0c                 | ' 
1af0c                 | ' 
1af0c                 | ' sub do_position
1af0c                 | _do_position
1af0c     01 4A 05 F6 | 	mov	COUNT_, #1
1af10     A8 00 A0 FD | 	call	#pushregs_
1af14     18 F0 07 F1 | 	add	ptra, #24
1af18     80 04 BF FD | 	call	#_pop
1af1c     FD 14 02 F6 | 	mov	arg02, result1
1af20     FE 12 02 F6 | 	mov	arg01, result2
1af24     FF 1E 02 F6 | 	mov	local01, result3
1af28     A7 14 62 FC | 	wrlong	arg02, fp
1af2c     04 4E 05 F1 | 	add	fp, #4
1af30     A7 12 62 FC | 	wrlong	arg01, fp
1af34     04 4E 05 F1 | 	add	fp, #4
1af38     A7 1E 62 FC | 	wrlong	local01, fp
1af3c     08 4E 85 F1 | 	sub	fp, #8
1af40     58 04 BF FD | 	call	#_pop
1af44     FF 1E 02 F6 | 	mov	local01, result3
1af48     0C 4E 05 F1 | 	add	fp, #12
1af4c     A7 FA 61 FC | 	wrlong	result1, fp
1af50     04 4E 05 F1 | 	add	fp, #4
1af54     A7 FC 61 FC | 	wrlong	result2, fp
1af58     04 4E 05 F1 | 	add	fp, #4
1af5c     A7 1E 62 FC | 	wrlong	local01, fp
1af60     08 4E 85 F1 | 	sub	fp, #8
1af64     A7 12 02 F6 | 	mov	arg01, fp
1af68     0C 4E 85 F1 | 	sub	fp, #12
1af6c     10 06 BF FD | 	call	#_converttoint
1af70     FD 1E 02 F6 | 	mov	local01, result1
1af74     A7 12 02 F6 | 	mov	arg01, fp
1af78     04 06 BF FD | 	call	#_converttoint
1af7c     FD 14 02 F6 | 	mov	arg02, result1
1af80     0F 13 02 F6 | 	mov	arg01, local01
1af84     D8 3E B0 FD | 	call	#_hg010b_spin2_setcursorpos
1af88     A7 F0 03 F6 | 	mov	ptra, fp
1af8c     B2 00 A0 FD | 	call	#popregs_
1af90                 | _do_position_ret
1af90     2D 00 64 FD | 	ret
1af94                 | 
1af94                 | ' 
1af94                 | ' sub do_poke
1af94                 | _do_poke
1af94     01 4A 05 F6 | 	mov	COUNT_, #1
1af98     A8 00 A0 FD | 	call	#pushregs_
1af9c     20 F0 07 F1 | 	add	ptra, #32
1afa0     F8 03 BF FD | 	call	#_pop
1afa4     FD 14 02 F6 | 	mov	arg02, result1
1afa8     FE 12 02 F6 | 	mov	arg01, result2
1afac     FF 1E 02 F6 | 	mov	local01, result3
1afb0     A7 14 62 FC | 	wrlong	arg02, fp
1afb4     04 4E 05 F1 | 	add	fp, #4
1afb8     A7 12 62 FC | 	wrlong	arg01, fp
1afbc     04 4E 05 F1 | 	add	fp, #4
1afc0     A7 1E 62 FC | 	wrlong	local01, fp
1afc4     08 4E 85 F1 | 	sub	fp, #8
1afc8     D0 03 BF FD | 	call	#_pop
1afcc     FF 1E 02 F6 | 	mov	local01, result3
1afd0     0C 4E 05 F1 | 	add	fp, #12
1afd4     A7 FA 61 FC | 	wrlong	result1, fp
1afd8     04 4E 05 F1 | 	add	fp, #4
1afdc     A7 FC 61 FC | 	wrlong	result2, fp
1afe0     04 4E 05 F1 | 	add	fp, #4
1afe4     A7 1E 62 FC | 	wrlong	local01, fp
1afe8     08 4E 85 F1 | 	sub	fp, #8
1afec     A7 12 02 F6 | 	mov	arg01, fp
1aff0     0C 4E 85 F1 | 	sub	fp, #12
1aff4     88 05 BF FD | 	call	#_converttoint
1aff8     18 4E 05 F1 | 	add	fp, #24
1affc     A7 FA 61 FC | 	wrlong	result1, fp
1b000     18 4E 85 F1 | 	sub	fp, #24
1b004     A7 12 02 F6 | 	mov	arg01, fp
1b008     74 05 BF FD | 	call	#_converttoint
1b00c     1C 4E 05 F1 | 	add	fp, #28
1b010     A7 FA 61 FC | 	wrlong	result1, fp
1b014                 | ' t1=pop() 'value
1b014                 | ' t2=pop() 
1b014                 | ' a=converttoint(t2) : v=converttoint(t1)
1b014                 | ' if a<$80000 then poke a,v else pspoke a,v
1b014     04 4E 85 F1 | 	sub	fp, #4
1b018     A7 1E 02 FB | 	rdlong	local01, fp
1b01c     18 4E 85 F1 | 	sub	fp, #24
1b020     00 04 00 FF 
1b024     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1b028     1C 00 90 3D |  if_ae	jmp	#LR__2220
1b02c     18 4E 05 F1 | 	add	fp, #24
1b030     A7 12 02 FB | 	rdlong	arg01, fp
1b034     04 4E 05 F1 | 	add	fp, #4
1b038     A7 14 02 FB | 	rdlong	arg02, fp
1b03c     1C 4E 85 F1 | 	sub	fp, #28
1b040     09 15 42 FC | 	wrbyte	arg02, arg01
1b044     18 00 90 FD | 	jmp	#LR__2221
1b048                 | LR__2220
1b048     18 4E 05 F1 | 	add	fp, #24
1b04c     A7 12 02 FB | 	rdlong	arg01, fp
1b050     04 4E 05 F1 | 	add	fp, #4
1b054     A7 14 02 FB | 	rdlong	arg02, fp
1b058     1C 4E 85 F1 | 	sub	fp, #28
1b05c     50 24 B0 FD | 	call	#_pspoke
1b060                 | LR__2221
1b060     A7 F0 03 F6 | 	mov	ptra, fp
1b064     B2 00 A0 FD | 	call	#popregs_
1b068                 | _do_poke_ret
1b068     2D 00 64 FD | 	ret
1b06c                 | 
1b06c                 | ' 
1b06c                 | ' sub do_dpoke
1b06c                 | _do_dpoke
1b06c     01 4A 05 F6 | 	mov	COUNT_, #1
1b070     A8 00 A0 FD | 	call	#pushregs_
1b074     20 F0 07 F1 | 	add	ptra, #32
1b078     20 03 BF FD | 	call	#_pop
1b07c     FD 14 02 F6 | 	mov	arg02, result1
1b080     FE 12 02 F6 | 	mov	arg01, result2
1b084     FF 1E 02 F6 | 	mov	local01, result3
1b088     A7 14 62 FC | 	wrlong	arg02, fp
1b08c     04 4E 05 F1 | 	add	fp, #4
1b090     A7 12 62 FC | 	wrlong	arg01, fp
1b094     04 4E 05 F1 | 	add	fp, #4
1b098     A7 1E 62 FC | 	wrlong	local01, fp
1b09c     08 4E 85 F1 | 	sub	fp, #8
1b0a0     F8 02 BF FD | 	call	#_pop
1b0a4     FF 1E 02 F6 | 	mov	local01, result3
1b0a8     0C 4E 05 F1 | 	add	fp, #12
1b0ac     A7 FA 61 FC | 	wrlong	result1, fp
1b0b0     04 4E 05 F1 | 	add	fp, #4
1b0b4     A7 FC 61 FC | 	wrlong	result2, fp
1b0b8     04 4E 05 F1 | 	add	fp, #4
1b0bc     A7 1E 62 FC | 	wrlong	local01, fp
1b0c0     08 4E 85 F1 | 	sub	fp, #8
1b0c4     A7 12 02 F6 | 	mov	arg01, fp
1b0c8     0C 4E 85 F1 | 	sub	fp, #12
1b0cc     B0 04 BF FD | 	call	#_converttoint
1b0d0     18 4E 05 F1 | 	add	fp, #24
1b0d4     A7 FA 61 FC | 	wrlong	result1, fp
1b0d8     18 4E 85 F1 | 	sub	fp, #24
1b0dc     A7 12 02 F6 | 	mov	arg01, fp
1b0e0     9C 04 BF FD | 	call	#_converttoint
1b0e4     1C 4E 05 F1 | 	add	fp, #28
1b0e8     A7 FA 61 FC | 	wrlong	result1, fp
1b0ec                 | ' t1=pop() 'value
1b0ec                 | ' t2=pop() 
1b0ec                 | ' a=converttoint(t2) : v=converttoint(t1)
1b0ec                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1b0ec     04 4E 85 F1 | 	sub	fp, #4
1b0f0     A7 1E 02 FB | 	rdlong	local01, fp
1b0f4     18 4E 85 F1 | 	sub	fp, #24
1b0f8     00 04 00 FF 
1b0fc     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1b100     1C 00 90 3D |  if_ae	jmp	#LR__2230
1b104     18 4E 05 F1 | 	add	fp, #24
1b108     A7 12 02 FB | 	rdlong	arg01, fp
1b10c     04 4E 05 F1 | 	add	fp, #4
1b110     A7 14 02 FB | 	rdlong	arg02, fp
1b114     1C 4E 85 F1 | 	sub	fp, #28
1b118     09 15 52 FC | 	wrword	arg02, arg01
1b11c     18 00 90 FD | 	jmp	#LR__2231
1b120                 | LR__2230
1b120     18 4E 05 F1 | 	add	fp, #24
1b124     A7 12 02 FB | 	rdlong	arg01, fp
1b128     04 4E 05 F1 | 	add	fp, #4
1b12c     A7 14 02 FB | 	rdlong	arg02, fp
1b130     1C 4E 85 F1 | 	sub	fp, #28
1b134     30 23 B0 FD | 	call	#_psdpoke
1b138                 | LR__2231
1b138     A7 F0 03 F6 | 	mov	ptra, fp
1b13c     B2 00 A0 FD | 	call	#popregs_
1b140                 | _do_dpoke_ret
1b140     2D 00 64 FD | 	ret
1b144                 | 
1b144                 | ' 
1b144                 | ' sub do_lpoke
1b144                 | _do_lpoke
1b144     01 4A 05 F6 | 	mov	COUNT_, #1
1b148     A8 00 A0 FD | 	call	#pushregs_
1b14c     20 F0 07 F1 | 	add	ptra, #32
1b150     48 02 BF FD | 	call	#_pop
1b154     FD 14 02 F6 | 	mov	arg02, result1
1b158     FE 12 02 F6 | 	mov	arg01, result2
1b15c     FF 1E 02 F6 | 	mov	local01, result3
1b160     A7 14 62 FC | 	wrlong	arg02, fp
1b164     04 4E 05 F1 | 	add	fp, #4
1b168     A7 12 62 FC | 	wrlong	arg01, fp
1b16c     04 4E 05 F1 | 	add	fp, #4
1b170     A7 1E 62 FC | 	wrlong	local01, fp
1b174     08 4E 85 F1 | 	sub	fp, #8
1b178     20 02 BF FD | 	call	#_pop
1b17c     FF 1E 02 F6 | 	mov	local01, result3
1b180     0C 4E 05 F1 | 	add	fp, #12
1b184     A7 FA 61 FC | 	wrlong	result1, fp
1b188     04 4E 05 F1 | 	add	fp, #4
1b18c     A7 FC 61 FC | 	wrlong	result2, fp
1b190     04 4E 05 F1 | 	add	fp, #4
1b194     A7 1E 62 FC | 	wrlong	local01, fp
1b198     08 4E 85 F1 | 	sub	fp, #8
1b19c     A7 12 02 F6 | 	mov	arg01, fp
1b1a0     0C 4E 85 F1 | 	sub	fp, #12
1b1a4     D8 03 BF FD | 	call	#_converttoint
1b1a8     18 4E 05 F1 | 	add	fp, #24
1b1ac     A7 FA 61 FC | 	wrlong	result1, fp
1b1b0     18 4E 85 F1 | 	sub	fp, #24
1b1b4     A7 12 02 F6 | 	mov	arg01, fp
1b1b8     C4 03 BF FD | 	call	#_converttoint
1b1bc     1C 4E 05 F1 | 	add	fp, #28
1b1c0     A7 FA 61 FC | 	wrlong	result1, fp
1b1c4                 | ' t1=pop() 'value
1b1c4                 | ' t2=pop() 
1b1c4                 | ' a=converttoint(t2) : v=converttoint(t1)
1b1c4                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1b1c4     04 4E 85 F1 | 	sub	fp, #4
1b1c8     A7 1E 02 FB | 	rdlong	local01, fp
1b1cc     18 4E 85 F1 | 	sub	fp, #24
1b1d0     00 04 00 FF 
1b1d4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1b1d8     1C 00 90 3D |  if_ae	jmp	#LR__2240
1b1dc     18 4E 05 F1 | 	add	fp, #24
1b1e0     A7 12 02 FB | 	rdlong	arg01, fp
1b1e4     04 4E 05 F1 | 	add	fp, #4
1b1e8     A7 14 02 FB | 	rdlong	arg02, fp
1b1ec     1C 4E 85 F1 | 	sub	fp, #28
1b1f0     09 15 62 FC | 	wrlong	arg02, arg01
1b1f4     18 00 90 FD | 	jmp	#LR__2241
1b1f8                 | LR__2240
1b1f8     18 4E 05 F1 | 	add	fp, #24
1b1fc     A7 12 02 FB | 	rdlong	arg01, fp
1b200     04 4E 05 F1 | 	add	fp, #4
1b204     A7 14 02 FB | 	rdlong	arg02, fp
1b208     1C 4E 85 F1 | 	sub	fp, #28
1b20c     10 22 B0 FD | 	call	#_pslpoke
1b210                 | LR__2241
1b210     A7 F0 03 F6 | 	mov	ptra, fp
1b214     B2 00 A0 FD | 	call	#popregs_
1b218                 | _do_lpoke_ret
1b218     2D 00 64 FD | 	ret
1b21c                 | 
1b21c                 | ' 
1b21c                 | ' sub do_peek
1b21c                 | _do_peek
1b21c     00 4A 05 F6 | 	mov	COUNT_, #0
1b220     A8 00 A0 FD | 	call	#pushregs_
1b224     14 F0 07 F1 | 	add	ptra, #20
1b228     70 01 BF FD | 	call	#_pop
1b22c     A7 FA 61 FC | 	wrlong	result1, fp
1b230     04 4E 05 F1 | 	add	fp, #4
1b234     A7 FC 61 FC | 	wrlong	result2, fp
1b238     04 4E 05 F1 | 	add	fp, #4
1b23c     A7 FE 61 FC | 	wrlong	result3, fp
1b240     08 4E 85 F1 | 	sub	fp, #8
1b244     A7 12 02 F6 | 	mov	arg01, fp
1b248     34 03 BF FD | 	call	#_converttoint
1b24c     0C 4E 05 F1 | 	add	fp, #12
1b250     A7 FA 61 FC | 	wrlong	result1, fp
1b254                 | ' t1=pop()
1b254                 | ' a=converttoint(t1)
1b254                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1b254     0C 4E 85 F1 | 	sub	fp, #12
1b258     00 04 00 FF 
1b25c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1b260     1C 00 90 3D |  if_ae	jmp	#LR__2250
1b264     0C 4E 05 F1 | 	add	fp, #12
1b268     A7 12 02 FB | 	rdlong	arg01, fp
1b26c     09 FB C1 FA | 	rdbyte	result1, arg01
1b270     04 4E 05 F1 | 	add	fp, #4
1b274     A7 FA 61 FC | 	wrlong	result1, fp
1b278     10 4E 85 F1 | 	sub	fp, #16
1b27c     20 00 90 FD | 	jmp	#LR__2251
1b280                 | LR__2250
1b280     0C 4E 05 F1 | 	add	fp, #12
1b284     A7 12 02 FB | 	rdlong	arg01, fp
1b288     0C 4E 85 F1 | 	sub	fp, #12
1b28c     68 22 B0 FD | 	call	#_pspeek
1b290     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b294     10 4E 05 F1 | 	add	fp, #16
1b298     A7 FA 61 FC | 	wrlong	result1, fp
1b29c     10 4E 85 F1 | 	sub	fp, #16
1b2a0                 | LR__2251
1b2a0     08 4E 05 F1 | 	add	fp, #8
1b2a4     A7 3A 68 FC | 	wrlong	#29, fp
1b2a8     08 4E 05 F1 | 	add	fp, #8
1b2ac     A7 12 02 FB | 	rdlong	arg01, fp
1b2b0     10 4E 85 F1 | 	sub	fp, #16
1b2b4     A7 12 62 FC | 	wrlong	arg01, fp
1b2b8     A7 12 02 F6 | 	mov	arg01, fp
1b2bc     74 01 BF FD | 	call	#_push
1b2c0     A7 F0 03 F6 | 	mov	ptra, fp
1b2c4     B2 00 A0 FD | 	call	#popregs_
1b2c8                 | _do_peek_ret
1b2c8     2D 00 64 FD | 	ret
1b2cc                 | 
1b2cc                 | ' 
1b2cc                 | ' sub do_dpeek
1b2cc                 | _do_dpeek
1b2cc     00 4A 05 F6 | 	mov	COUNT_, #0
1b2d0     A8 00 A0 FD | 	call	#pushregs_
1b2d4     14 F0 07 F1 | 	add	ptra, #20
1b2d8     C0 00 BF FD | 	call	#_pop
1b2dc     A7 FA 61 FC | 	wrlong	result1, fp
1b2e0     04 4E 05 F1 | 	add	fp, #4
1b2e4     A7 FC 61 FC | 	wrlong	result2, fp
1b2e8     04 4E 05 F1 | 	add	fp, #4
1b2ec     A7 FE 61 FC | 	wrlong	result3, fp
1b2f0     08 4E 85 F1 | 	sub	fp, #8
1b2f4     A7 12 02 F6 | 	mov	arg01, fp
1b2f8     84 02 BF FD | 	call	#_converttoint
1b2fc     0C 4E 05 F1 | 	add	fp, #12
1b300     A7 FA 61 FC | 	wrlong	result1, fp
1b304                 | ' t1=pop()
1b304                 | ' a=converttoint(t1)
1b304                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1b304     0C 4E 85 F1 | 	sub	fp, #12
1b308     00 04 00 FF 
1b30c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1b310     1C 00 90 3D |  if_ae	jmp	#LR__2260
1b314     0C 4E 05 F1 | 	add	fp, #12
1b318     A7 12 02 FB | 	rdlong	arg01, fp
1b31c     09 FB E1 FA | 	rdword	result1, arg01
1b320     04 4E 05 F1 | 	add	fp, #4
1b324     A7 FA 61 FC | 	wrlong	result1, fp
1b328     10 4E 85 F1 | 	sub	fp, #16
1b32c     1C 00 90 FD | 	jmp	#LR__2261
1b330                 | LR__2260
1b330     0C 4E 05 F1 | 	add	fp, #12
1b334     A7 12 02 FB | 	rdlong	arg01, fp
1b338     0C 4E 85 F1 | 	sub	fp, #12
1b33c     68 22 B0 FD | 	call	#_psdpeek
1b340     10 4E 05 F1 | 	add	fp, #16
1b344     A7 FA 61 FC | 	wrlong	result1, fp
1b348     10 4E 85 F1 | 	sub	fp, #16
1b34c                 | LR__2261
1b34c     08 4E 05 F1 | 	add	fp, #8
1b350     A7 3A 68 FC | 	wrlong	#29, fp
1b354     08 4E 05 F1 | 	add	fp, #8
1b358     A7 12 02 FB | 	rdlong	arg01, fp
1b35c     10 4E 85 F1 | 	sub	fp, #16
1b360     A7 12 62 FC | 	wrlong	arg01, fp
1b364     A7 12 02 F6 | 	mov	arg01, fp
1b368     C8 00 BF FD | 	call	#_push
1b36c     A7 F0 03 F6 | 	mov	ptra, fp
1b370     B2 00 A0 FD | 	call	#popregs_
1b374                 | _do_dpeek_ret
1b374     2D 00 64 FD | 	ret
1b378                 | 
1b378                 | ' 
1b378                 | ' 
1b378                 | ' sub do_lpeek
1b378                 | _do_lpeek
1b378     00 4A 05 F6 | 	mov	COUNT_, #0
1b37c     A8 00 A0 FD | 	call	#pushregs_
1b380     14 F0 07 F1 | 	add	ptra, #20
1b384     14 00 BF FD | 	call	#_pop
1b388     A7 FA 61 FC | 	wrlong	result1, fp
1b38c     04 4E 05 F1 | 	add	fp, #4
1b390     A7 FC 61 FC | 	wrlong	result2, fp
1b394     04 4E 05 F1 | 	add	fp, #4
1b398     A7 FE 61 FC | 	wrlong	result3, fp
1b39c     08 4E 85 F1 | 	sub	fp, #8
1b3a0     A7 12 02 F6 | 	mov	arg01, fp
1b3a4     D8 01 BF FD | 	call	#_converttoint
1b3a8     0C 4E 05 F1 | 	add	fp, #12
1b3ac     A7 FA 61 FC | 	wrlong	result1, fp
1b3b0                 | ' t1=pop()
1b3b0                 | ' a=converttoint(t1)
1b3b0                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1b3b0     0C 4E 85 F1 | 	sub	fp, #12
1b3b4     00 04 00 FF 
1b3b8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1b3bc     1C 00 90 3D |  if_ae	jmp	#LR__2270
1b3c0     0C 4E 05 F1 | 	add	fp, #12
1b3c4     A7 12 02 FB | 	rdlong	arg01, fp
1b3c8     09 FB 01 FB | 	rdlong	result1, arg01
1b3cc     04 4E 05 F1 | 	add	fp, #4
1b3d0     A7 FA 61 FC | 	wrlong	result1, fp
1b3d4     10 4E 85 F1 | 	sub	fp, #16
1b3d8     1C 00 90 FD | 	jmp	#LR__2271
1b3dc                 | LR__2270
1b3dc     0C 4E 05 F1 | 	add	fp, #12
1b3e0     A7 12 02 FB | 	rdlong	arg01, fp
1b3e4     0C 4E 85 F1 | 	sub	fp, #12
1b3e8     64 21 B0 FD | 	call	#_pslpeek
1b3ec     10 4E 05 F1 | 	add	fp, #16
1b3f0     A7 FA 61 FC | 	wrlong	result1, fp
1b3f4     10 4E 85 F1 | 	sub	fp, #16
1b3f8                 | LR__2271
1b3f8     08 4E 05 F1 | 	add	fp, #8
1b3fc     A7 3A 68 FC | 	wrlong	#29, fp
1b400     08 4E 05 F1 | 	add	fp, #8
1b404     A7 12 02 FB | 	rdlong	arg01, fp
1b408     10 4E 85 F1 | 	sub	fp, #16
1b40c     A7 12 62 FC | 	wrlong	arg01, fp
1b410     A7 12 02 F6 | 	mov	arg01, fp
1b414     1C 00 BF FD | 	call	#_push
1b418     A7 F0 03 F6 | 	mov	ptra, fp
1b41c     B2 00 A0 FD | 	call	#popregs_
1b420                 | _do_lpeek_ret
1b420     2D 00 64 FD | 	ret
1b424                 | 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' 
1b424                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b424                 | ' 
1b424                 | ' ''----------------------------------------------------------------------------------------------------
1b424                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1b424                 | ' ''----------------------------------------------------------------------------------------------------
1b424                 | ' 
1b424                 | ' ''--------------------------- Command function pointers
1b424                 | ' 
1b424                 | ' sub init_commands
1b424                 | _init_commands
1b424                 | ' 
1b424                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b424     00 00 06 F6 | 	mov	_var01, #0
1b428     97 16 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
1b42c                 | LR__2280
1b42c     00 FB 01 F6 | 	mov	result1, _var01
1b430     02 FA 65 F0 | 	shl	result1, #2
1b434     43 00 00 FF 
1b438     60 E4 05 F1 | 	add	objptr, ##34400
1b43c     F2 FA 01 F1 | 	add	result1, objptr
1b440     43 00 00 FF 
1b444     60 E4 85 F1 | 	sub	objptr, ##34400
1b448     FD E4 61 FC | 	wrlong	objptr, result1
1b44c     01 00 06 F1 | 	add	_var01, #1
1b450     00 01 56 F2 | 	cmps	_var01, #256 wc
1b454     D4 FF 9F CD |  if_b	jmp	#LR__2280
1b458                 | LR__2281
1b458     F2 FA 01 F6 | 	mov	result1, objptr
1b45c     14 FA 25 F4 | 	bith	result1, #20
1b460     43 00 00 FF 
1b464     64 E4 05 F1 | 	add	objptr, ##34404
1b468     F2 FA 61 FC | 	wrlong	result1, objptr
1b46c     43 00 00 FF 
1b470     64 E4 85 F1 | 	sub	objptr, ##34404
1b474     F2 FA 01 F6 | 	mov	result1, objptr
1b478     15 FA 25 F4 | 	bith	result1, #21
1b47c     43 00 00 FF 
1b480     68 E4 05 F1 | 	add	objptr, ##34408
1b484     F2 FA 61 FC | 	wrlong	result1, objptr
1b488     43 00 00 FF 
1b48c     68 E4 85 F1 | 	sub	objptr, ##34408
1b490     F2 FA 01 F6 | 	mov	result1, objptr
1b494     34 FA 25 F4 | 	bith	result1, #52
1b498     43 00 00 FF 
1b49c     6C E4 05 F1 | 	add	objptr, ##34412
1b4a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b4a4     43 00 00 FF 
1b4a8     6C E4 85 F1 | 	sub	objptr, ##34412
1b4ac     F2 FA 01 F6 | 	mov	result1, objptr
1b4b0     16 FA 25 F4 | 	bith	result1, #22
1b4b4     43 00 00 FF 
1b4b8     74 E4 05 F1 | 	add	objptr, ##34420
1b4bc     F2 FA 61 FC | 	wrlong	result1, objptr
1b4c0     43 00 00 FF 
1b4c4     74 E4 85 F1 | 	sub	objptr, ##34420
1b4c8     F2 FA 01 F6 | 	mov	result1, objptr
1b4cc     00 28 00 FF 
1b4d0     00 FA 45 F5 | 	or	result1, ##5242880
1b4d4     43 00 00 FF 
1b4d8     78 E4 05 F1 | 	add	objptr, ##34424
1b4dc     F2 FA 61 FC | 	wrlong	result1, objptr
1b4e0     43 00 00 FF 
1b4e4     78 E4 85 F1 | 	sub	objptr, ##34424
1b4e8     F2 FA 01 F6 | 	mov	result1, objptr
1b4ec     35 FA 25 F4 | 	bith	result1, #53
1b4f0     43 00 00 FF 
1b4f4     7C E4 05 F1 | 	add	objptr, ##34428
1b4f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b4fc     43 00 00 FF 
1b500     7C E4 85 F1 | 	sub	objptr, ##34428
1b504     F2 FA 01 F6 | 	mov	result1, objptr
1b508     54 FA 25 F4 | 	bith	result1, #84
1b50c     43 00 00 FF 
1b510     80 E4 05 F1 | 	add	objptr, ##34432
1b514     F2 FA 61 FC | 	wrlong	result1, objptr
1b518     43 00 00 FF 
1b51c     80 E4 85 F1 | 	sub	objptr, ##34432
1b520     F2 FA 01 F6 | 	mov	result1, objptr
1b524     17 FA 25 F4 | 	bith	result1, #23
1b528     43 00 00 FF 
1b52c     84 E4 05 F1 | 	add	objptr, ##34436
1b530     F2 FA 61 FC | 	wrlong	result1, objptr
1b534     43 00 00 FF 
1b538     84 E4 85 F1 | 	sub	objptr, ##34436
1b53c     F2 FA 01 F6 | 	mov	result1, objptr
1b540     00 48 00 FF 
1b544     00 FA 45 F5 | 	or	result1, ##9437184
1b548     43 00 00 FF 
1b54c     88 E4 05 F1 | 	add	objptr, ##34440
1b550     F2 FA 61 FC | 	wrlong	result1, objptr
1b554     43 00 00 FF 
1b558     88 E4 85 F1 | 	sub	objptr, ##34440
1b55c     F2 FA 01 F6 | 	mov	result1, objptr
1b560     00 50 00 FF 
1b564     00 FA 45 F5 | 	or	result1, ##10485760
1b568     43 00 00 FF 
1b56c     8C E4 05 F1 | 	add	objptr, ##34444
1b570     F2 FA 61 FC | 	wrlong	result1, objptr
1b574     43 00 00 FF 
1b578     8C E4 85 F1 | 	sub	objptr, ##34444
1b57c     F2 FA 01 F6 | 	mov	result1, objptr
1b580     00 58 00 FF 
1b584     00 FA 45 F5 | 	or	result1, ##11534336
1b588     43 00 00 FF 
1b58c     90 E4 05 F1 | 	add	objptr, ##34448
1b590     F2 FA 61 FC | 	wrlong	result1, objptr
1b594     43 00 00 FF 
1b598     90 E4 85 F1 | 	sub	objptr, ##34448
1b59c     F2 FA 01 F6 | 	mov	result1, objptr
1b5a0     36 FA 25 F4 | 	bith	result1, #54
1b5a4     43 00 00 FF 
1b5a8     A4 E4 05 F1 | 	add	objptr, ##34468
1b5ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b5b0     43 00 00 FF 
1b5b4     A4 E4 85 F1 | 	sub	objptr, ##34468
1b5b8     F2 FA 01 F6 | 	mov	result1, objptr
1b5bc     00 68 00 FF 
1b5c0     00 FA 45 F5 | 	or	result1, ##13631488
1b5c4     43 00 00 FF 
1b5c8     D4 E4 05 F1 | 	add	objptr, ##34516
1b5cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b5d0     43 00 00 FF 
1b5d4     D4 E4 85 F1 | 	sub	objptr, ##34516
1b5d8     F2 FA 01 F6 | 	mov	result1, objptr
1b5dc     00 68 00 FF 
1b5e0     00 FA 45 F5 | 	or	result1, ##13631488
1b5e4     43 00 00 FF 
1b5e8     D0 E4 05 F1 | 	add	objptr, ##34512
1b5ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b5f0     43 00 00 FF 
1b5f4     D0 E4 85 F1 | 	sub	objptr, ##34512
1b5f8     F2 FA 01 F6 | 	mov	result1, objptr
1b5fc     00 68 00 FF 
1b600     00 FA 45 F5 | 	or	result1, ##13631488
1b604     43 00 00 FF 
1b608     D8 E4 05 F1 | 	add	objptr, ##34520
1b60c     F2 FA 61 FC | 	wrlong	result1, objptr
1b610     43 00 00 FF 
1b614     D8 E4 85 F1 | 	sub	objptr, ##34520
1b618     F2 FA 01 F6 | 	mov	result1, objptr
1b61c     00 68 00 FF 
1b620     00 FA 45 F5 | 	or	result1, ##13631488
1b624     43 00 00 FF 
1b628     DC E4 05 F1 | 	add	objptr, ##34524
1b62c     F2 FA 61 FC | 	wrlong	result1, objptr
1b630     43 00 00 FF 
1b634     DC E4 85 F1 | 	sub	objptr, ##34524
1b638     F2 FA 01 F6 | 	mov	result1, objptr
1b63c     00 68 00 FF 
1b640     00 FA 45 F5 | 	or	result1, ##13631488
1b644     43 00 00 FF 
1b648     0C E5 05 F1 | 	add	objptr, ##34572
1b64c     F2 FA 61 FC | 	wrlong	result1, objptr
1b650     43 00 00 FF 
1b654     0C E5 85 F1 | 	sub	objptr, ##34572
1b658     F2 FA 01 F6 | 	mov	result1, objptr
1b65c     55 FA 25 F4 | 	bith	result1, #85
1b660     43 00 00 FF 
1b664     BC E4 05 F1 | 	add	objptr, ##34492
1b668     F2 FA 61 FC | 	wrlong	result1, objptr
1b66c     43 00 00 FF 
1b670     BC E4 85 F1 | 	sub	objptr, ##34492
1b674     F2 FA 01 F6 | 	mov	result1, objptr
1b678     00 68 00 FF 
1b67c     00 FA 45 F5 | 	or	result1, ##13631488
1b680     43 00 00 FF 
1b684     10 E5 05 F1 | 	add	objptr, ##34576
1b688     F2 FA 61 FC | 	wrlong	result1, objptr
1b68c     43 00 00 FF 
1b690     10 E5 85 F1 | 	sub	objptr, ##34576
1b694     F2 FA 01 F6 | 	mov	result1, objptr
1b698     00 68 00 FF 
1b69c     00 FA 45 F5 | 	or	result1, ##13631488
1b6a0     43 00 00 FF 
1b6a4     E0 E4 05 F1 | 	add	objptr, ##34528
1b6a8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6ac     43 00 00 FF 
1b6b0     E0 E4 85 F1 | 	sub	objptr, ##34528
1b6b4     F2 FA 01 F6 | 	mov	result1, objptr
1b6b8     00 68 00 FF 
1b6bc     00 FA 45 F5 | 	or	result1, ##13631488
1b6c0     43 00 00 FF 
1b6c4     E4 E4 05 F1 | 	add	objptr, ##34532
1b6c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6cc     43 00 00 FF 
1b6d0     E4 E4 85 F1 | 	sub	objptr, ##34532
1b6d4     F2 FA 01 F6 | 	mov	result1, objptr
1b6d8     00 68 00 FF 
1b6dc     00 FA 45 F5 | 	or	result1, ##13631488
1b6e0     43 00 00 FF 
1b6e4     E8 E4 05 F1 | 	add	objptr, ##34536
1b6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6ec     43 00 00 FF 
1b6f0     E8 E4 85 F1 | 	sub	objptr, ##34536
1b6f4     F2 FA 01 F6 | 	mov	result1, objptr
1b6f8     74 FA 25 F4 | 	bith	result1, #116
1b6fc     43 00 00 FF 
1b700     60 E5 05 F1 | 	add	objptr, ##34656
1b704     F2 FA 61 FC | 	wrlong	result1, objptr
1b708     43 00 00 FF 
1b70c     60 E5 85 F1 | 	sub	objptr, ##34656
1b710     F2 FA 01 F6 | 	mov	result1, objptr
1b714     18 FA 25 F4 | 	bith	result1, #24
1b718     43 00 00 FF 
1b71c     64 E5 05 F1 | 	add	objptr, ##34660
1b720     F2 FA 61 FC | 	wrlong	result1, objptr
1b724     43 00 00 FF 
1b728     64 E5 85 F1 | 	sub	objptr, ##34660
1b72c     F2 FA 01 F6 | 	mov	result1, objptr
1b730     00 88 00 FF 
1b734     00 FA 45 F5 | 	or	result1, ##17825792
1b738     43 00 00 FF 
1b73c     68 E5 05 F1 | 	add	objptr, ##34664
1b740     F2 FA 61 FC | 	wrlong	result1, objptr
1b744     43 00 00 FF 
1b748     68 E5 85 F1 | 	sub	objptr, ##34664
1b74c     F2 FA 01 F6 | 	mov	result1, objptr
1b750     00 90 00 FF 
1b754     00 FA 45 F5 | 	or	result1, ##18874368
1b758     43 00 00 FF 
1b75c     6C E5 05 F1 | 	add	objptr, ##34668
1b760     F2 FA 61 FC | 	wrlong	result1, objptr
1b764     43 00 00 FF 
1b768     6C E5 85 F1 | 	sub	objptr, ##34668
1b76c     F2 FA 01 F6 | 	mov	result1, objptr
1b770     00 98 00 FF 
1b774     00 FA 45 F5 | 	or	result1, ##19922944
1b778     43 00 00 FF 
1b77c     70 E5 05 F1 | 	add	objptr, ##34672
1b780     F2 FA 61 FC | 	wrlong	result1, objptr
1b784     43 00 00 FF 
1b788     70 E5 85 F1 | 	sub	objptr, ##34672
1b78c     F2 FA 01 F6 | 	mov	result1, objptr
1b790     00 A0 00 FF 
1b794     00 FA 45 F5 | 	or	result1, ##20971520
1b798     43 00 00 FF 
1b79c     74 E5 05 F1 | 	add	objptr, ##34676
1b7a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7a4     43 00 00 FF 
1b7a8     74 E5 85 F1 | 	sub	objptr, ##34676
1b7ac     F2 FA 01 F6 | 	mov	result1, objptr
1b7b0     00 A8 00 FF 
1b7b4     00 FA 45 F5 | 	or	result1, ##22020096
1b7b8     43 00 00 FF 
1b7bc     78 E5 05 F1 | 	add	objptr, ##34680
1b7c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7c4     43 00 00 FF 
1b7c8     78 E5 85 F1 | 	sub	objptr, ##34680
1b7cc     F2 FA 01 F6 | 	mov	result1, objptr
1b7d0     00 B0 00 FF 
1b7d4     00 FA 45 F5 | 	or	result1, ##23068672
1b7d8     43 00 00 FF 
1b7dc     7C E5 05 F1 | 	add	objptr, ##34684
1b7e0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7e4     43 00 00 FF 
1b7e8     7C E5 85 F1 | 	sub	objptr, ##34684
1b7ec     F2 FA 01 F6 | 	mov	result1, objptr
1b7f0     00 B8 00 FF 
1b7f4     00 FA 45 F5 | 	or	result1, ##24117248
1b7f8     43 00 00 FF 
1b7fc     80 E5 05 F1 | 	add	objptr, ##34688
1b800     F2 FA 61 FC | 	wrlong	result1, objptr
1b804     43 00 00 FF 
1b808     80 E5 85 F1 | 	sub	objptr, ##34688
1b80c     F2 FA 01 F6 | 	mov	result1, objptr
1b810     37 FA 25 F4 | 	bith	result1, #55
1b814     43 00 00 FF 
1b818     84 E5 05 F1 | 	add	objptr, ##34692
1b81c     F2 FA 61 FC | 	wrlong	result1, objptr
1b820     43 00 00 FF 
1b824     84 E5 85 F1 | 	sub	objptr, ##34692
1b828     F2 FA 01 F6 | 	mov	result1, objptr
1b82c     00 C8 00 FF 
1b830     00 FA 45 F5 | 	or	result1, ##26214400
1b834     43 00 00 FF 
1b838     88 E5 05 F1 | 	add	objptr, ##34696
1b83c     F2 FA 61 FC | 	wrlong	result1, objptr
1b840     43 00 00 FF 
1b844     88 E5 85 F1 | 	sub	objptr, ##34696
1b848     F2 FA 01 F6 | 	mov	result1, objptr
1b84c     00 D0 00 FF 
1b850     00 FA 45 F5 | 	or	result1, ##27262976
1b854     43 00 00 FF 
1b858     8C E5 05 F1 | 	add	objptr, ##34700
1b85c     F2 FA 61 FC | 	wrlong	result1, objptr
1b860     43 00 00 FF 
1b864     8C E5 85 F1 | 	sub	objptr, ##34700
1b868     F2 FA 01 F6 | 	mov	result1, objptr
1b86c     00 D8 00 FF 
1b870     00 FA 45 F5 | 	or	result1, ##28311552
1b874     43 00 00 FF 
1b878     90 E5 05 F1 | 	add	objptr, ##34704
1b87c     F2 FA 61 FC | 	wrlong	result1, objptr
1b880     43 00 00 FF 
1b884     90 E5 85 F1 | 	sub	objptr, ##34704
1b888     F2 FA 01 F6 | 	mov	result1, objptr
1b88c     56 FA 25 F4 | 	bith	result1, #86
1b890     43 00 00 FF 
1b894     94 E5 05 F1 | 	add	objptr, ##34708
1b898     F2 FA 61 FC | 	wrlong	result1, objptr
1b89c     43 00 00 FF 
1b8a0     94 E5 85 F1 | 	sub	objptr, ##34708
1b8a4     F2 FA 01 F6 | 	mov	result1, objptr
1b8a8     00 E8 00 FF 
1b8ac     00 FA 45 F5 | 	or	result1, ##30408704
1b8b0     45 00 00 FF 
1b8b4     5C E4 05 F1 | 	add	objptr, ##35420
1b8b8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8bc     45 00 00 FF 
1b8c0     5C E4 85 F1 | 	sub	objptr, ##35420
1b8c4     F2 FA 01 F6 | 	mov	result1, objptr
1b8c8     75 FA 25 F4 | 	bith	result1, #117
1b8cc     43 00 00 FF 
1b8d0     98 E5 05 F1 | 	add	objptr, ##34712
1b8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8d8     43 00 00 FF 
1b8dc     98 E5 85 F1 | 	sub	objptr, ##34712
1b8e0     F2 FA 01 F6 | 	mov	result1, objptr
1b8e4     94 FA 25 F4 | 	bith	result1, #148
1b8e8     43 00 00 FF 
1b8ec     AC E5 05 F1 | 	add	objptr, ##34732
1b8f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8f4     43 00 00 FF 
1b8f8     AC E5 85 F1 | 	sub	objptr, ##34732
1b8fc     F2 FA 01 F6 | 	mov	result1, objptr
1b900     19 FA 25 F4 | 	bith	result1, #25
1b904     43 00 00 FF 
1b908     9C E5 05 F1 | 	add	objptr, ##34716
1b90c     F2 FA 61 FC | 	wrlong	result1, objptr
1b910     43 00 00 FF 
1b914     9C E5 85 F1 | 	sub	objptr, ##34716
1b918     F2 FA 01 F6 | 	mov	result1, objptr
1b91c     00 08 01 FF 
1b920     00 FA 45 F5 | 	or	result1, ##34603008
1b924     43 00 00 FF 
1b928     B8 E4 05 F1 | 	add	objptr, ##34488
1b92c     F2 FA 61 FC | 	wrlong	result1, objptr
1b930     43 00 00 FF 
1b934     B8 E4 85 F1 | 	sub	objptr, ##34488
1b938     F2 FA 01 F6 | 	mov	result1, objptr
1b93c     00 10 01 FF 
1b940     00 FA 45 F5 | 	or	result1, ##35651584
1b944     43 00 00 FF 
1b948     A0 E5 05 F1 | 	add	objptr, ##34720
1b94c     F2 FA 61 FC | 	wrlong	result1, objptr
1b950     43 00 00 FF 
1b954     A0 E5 85 F1 | 	sub	objptr, ##34720
1b958     F2 FA 01 F6 | 	mov	result1, objptr
1b95c     00 18 01 FF 
1b960     00 FA 45 F5 | 	or	result1, ##36700160
1b964     43 00 00 FF 
1b968     A4 E5 05 F1 | 	add	objptr, ##34724
1b96c     F2 FA 61 FC | 	wrlong	result1, objptr
1b970     43 00 00 FF 
1b974     A4 E5 85 F1 | 	sub	objptr, ##34724
1b978     F2 FA 01 F6 | 	mov	result1, objptr
1b97c     00 20 01 FF 
1b980     00 FA 45 F5 | 	or	result1, ##37748736
1b984     43 00 00 FF 
1b988     A8 E5 05 F1 | 	add	objptr, ##34728
1b98c     F2 FA 61 FC | 	wrlong	result1, objptr
1b990     43 00 00 FF 
1b994     A8 E5 85 F1 | 	sub	objptr, ##34728
1b998     F2 FA 01 F6 | 	mov	result1, objptr
1b99c     00 28 01 FF 
1b9a0     00 FA 45 F5 | 	or	result1, ##38797312
1b9a4     43 00 00 FF 
1b9a8     B4 E5 05 F1 | 	add	objptr, ##34740
1b9ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b9b0     43 00 00 FF 
1b9b4     B4 E5 85 F1 | 	sub	objptr, ##34740
1b9b8     F2 FA 01 F6 | 	mov	result1, objptr
1b9bc     00 30 01 FF 
1b9c0     00 FA 45 F5 | 	or	result1, ##39845888
1b9c4     43 00 00 FF 
1b9c8     B8 E5 05 F1 | 	add	objptr, ##34744
1b9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b9d0     43 00 00 FF 
1b9d4     B8 E5 85 F1 | 	sub	objptr, ##34744
1b9d8     F2 FA 01 F6 | 	mov	result1, objptr
1b9dc     00 38 01 FF 
1b9e0     00 FA 45 F5 | 	or	result1, ##40894464
1b9e4     43 00 00 FF 
1b9e8     BC E5 05 F1 | 	add	objptr, ##34748
1b9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b9f0     43 00 00 FF 
1b9f4     BC E5 85 F1 | 	sub	objptr, ##34748
1b9f8     F2 FA 01 F6 | 	mov	result1, objptr
1b9fc     00 40 01 FF 
1ba00     00 FA 45 F5 | 	or	result1, ##41943040
1ba04     43 00 00 FF 
1ba08     C0 E5 05 F1 | 	add	objptr, ##34752
1ba0c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba10     43 00 00 FF 
1ba14     C0 E5 85 F1 | 	sub	objptr, ##34752
1ba18     F2 FA 01 F6 | 	mov	result1, objptr
1ba1c     00 48 01 FF 
1ba20     00 FA 45 F5 | 	or	result1, ##42991616
1ba24     43 00 00 FF 
1ba28     C8 E5 05 F1 | 	add	objptr, ##34760
1ba2c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba30     43 00 00 FF 
1ba34     C8 E5 85 F1 | 	sub	objptr, ##34760
1ba38     F2 FA 01 F6 | 	mov	result1, objptr
1ba3c     00 08 01 FF 
1ba40     00 FA 45 F5 | 	or	result1, ##34603008
1ba44     43 00 00 FF 
1ba48     CC E5 05 F1 | 	add	objptr, ##34764
1ba4c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba50     43 00 00 FF 
1ba54     CC E5 85 F1 | 	sub	objptr, ##34764
1ba58     F2 FA 01 F6 | 	mov	result1, objptr
1ba5c     00 50 01 FF 
1ba60     00 FA 45 F5 | 	or	result1, ##44040192
1ba64     43 00 00 FF 
1ba68     CC E4 05 F1 | 	add	objptr, ##34508
1ba6c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba70     43 00 00 FF 
1ba74     CC E4 85 F1 | 	sub	objptr, ##34508
1ba78     F2 FA 01 F6 | 	mov	result1, objptr
1ba7c     00 58 01 FF 
1ba80     00 FA 45 F5 | 	or	result1, ##45088768
1ba84     43 00 00 FF 
1ba88     FC E4 05 F1 | 	add	objptr, ##34556
1ba8c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba90     43 00 00 FF 
1ba94     FC E4 85 F1 | 	sub	objptr, ##34556
1ba98     F2 FA 01 F6 | 	mov	result1, objptr
1ba9c     00 60 01 FF 
1baa0     00 FA 45 F5 | 	or	result1, ##46137344
1baa4     43 00 00 FF 
1baa8     F8 E4 05 F1 | 	add	objptr, ##34552
1baac     F2 FA 61 FC | 	wrlong	result1, objptr
1bab0     43 00 00 FF 
1bab4     F8 E4 85 F1 | 	sub	objptr, ##34552
1bab8     F2 FA 01 F6 | 	mov	result1, objptr
1babc     00 68 01 FF 
1bac0     00 FA 45 F5 | 	or	result1, ##47185920
1bac4     43 00 00 FF 
1bac8     9C E4 05 F1 | 	add	objptr, ##34460
1bacc     F2 FA 61 FC | 	wrlong	result1, objptr
1bad0     43 00 00 FF 
1bad4     9C E4 85 F1 | 	sub	objptr, ##34460
1bad8     F2 FA 01 F6 | 	mov	result1, objptr
1badc     00 70 01 FF 
1bae0     00 FA 45 F5 | 	or	result1, ##48234496
1bae4     43 00 00 FF 
1bae8     A0 E4 05 F1 | 	add	objptr, ##34464
1baec     F2 FA 61 FC | 	wrlong	result1, objptr
1baf0     43 00 00 FF 
1baf4     A0 E4 85 F1 | 	sub	objptr, ##34464
1baf8     F2 FA 01 F6 | 	mov	result1, objptr
1bafc     00 78 01 FF 
1bb00     00 FA 45 F5 | 	or	result1, ##49283072
1bb04     43 00 00 FF 
1bb08     08 E5 05 F1 | 	add	objptr, ##34568
1bb0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb10     43 00 00 FF 
1bb14     08 E5 85 F1 | 	sub	objptr, ##34568
1bb18     F2 FA 01 F6 | 	mov	result1, objptr
1bb1c     38 FA 25 F4 | 	bith	result1, #56
1bb20     43 00 00 FF 
1bb24     B0 E5 05 F1 | 	add	objptr, ##34736
1bb28     F2 FA 61 FC | 	wrlong	result1, objptr
1bb2c     43 00 00 FF 
1bb30     B0 E5 85 F1 | 	sub	objptr, ##34736
1bb34     F2 FA 01 F6 | 	mov	result1, objptr
1bb38     00 88 01 FF 
1bb3c     00 FA 45 F5 | 	or	result1, ##51380224
1bb40     43 00 00 FF 
1bb44     C4 E5 05 F1 | 	add	objptr, ##34756
1bb48     F2 FA 61 FC | 	wrlong	result1, objptr
1bb4c     43 00 00 FF 
1bb50     C4 E5 85 F1 | 	sub	objptr, ##34756
1bb54     F2 FA 01 F6 | 	mov	result1, objptr
1bb58     00 90 01 FF 
1bb5c     00 FA 45 F5 | 	or	result1, ##52428800
1bb60     43 00 00 FF 
1bb64     D0 E5 05 F1 | 	add	objptr, ##34768
1bb68     F2 FA 61 FC | 	wrlong	result1, objptr
1bb6c     43 00 00 FF 
1bb70     D0 E5 85 F1 | 	sub	objptr, ##34768
1bb74     F2 FA 01 F6 | 	mov	result1, objptr
1bb78     00 98 01 FF 
1bb7c     00 FA 45 F5 | 	or	result1, ##53477376
1bb80     43 00 00 FF 
1bb84     D4 E5 05 F1 | 	add	objptr, ##34772
1bb88     F2 FA 61 FC | 	wrlong	result1, objptr
1bb8c     43 00 00 FF 
1bb90     D4 E5 85 F1 | 	sub	objptr, ##34772
1bb94     F2 FA 01 F6 | 	mov	result1, objptr
1bb98     00 A0 01 FF 
1bb9c     00 FA 45 F5 | 	or	result1, ##54525952
1bba0     43 00 00 FF 
1bba4     D8 E5 05 F1 | 	add	objptr, ##34776
1bba8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbac     43 00 00 FF 
1bbb0     D8 E5 85 F1 | 	sub	objptr, ##34776
1bbb4     F2 FA 01 F6 | 	mov	result1, objptr
1bbb8     00 A8 01 FF 
1bbbc     00 FA 45 F5 | 	or	result1, ##55574528
1bbc0     43 00 00 FF 
1bbc4     DC E5 05 F1 | 	add	objptr, ##34780
1bbc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbcc     43 00 00 FF 
1bbd0     DC E5 85 F1 | 	sub	objptr, ##34780
1bbd4     F2 FA 01 F6 | 	mov	result1, objptr
1bbd8     00 B0 01 FF 
1bbdc     00 FA 45 F5 | 	or	result1, ##56623104
1bbe0     43 00 00 FF 
1bbe4     E0 E5 05 F1 | 	add	objptr, ##34784
1bbe8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbec     43 00 00 FF 
1bbf0     E0 E5 85 F1 | 	sub	objptr, ##34784
1bbf4     F2 FA 01 F6 | 	mov	result1, objptr
1bbf8     00 B8 01 FF 
1bbfc     00 FA 45 F5 | 	or	result1, ##57671680
1bc00     43 00 00 FF 
1bc04     E4 E5 05 F1 | 	add	objptr, ##34788
1bc08     F2 FA 61 FC | 	wrlong	result1, objptr
1bc0c     43 00 00 FF 
1bc10     E4 E5 85 F1 | 	sub	objptr, ##34788
1bc14     F2 FA 01 F6 | 	mov	result1, objptr
1bc18     94 FA 25 F4 | 	bith	result1, #148
1bc1c     43 00 00 FF 
1bc20     AC E5 05 F1 | 	add	objptr, ##34732
1bc24     F2 FA 61 FC | 	wrlong	result1, objptr
1bc28     43 00 00 FF 
1bc2c     AC E5 85 F1 | 	sub	objptr, ##34732
1bc30     F2 FA 01 F6 | 	mov	result1, objptr
1bc34     57 FA 25 F4 | 	bith	result1, #87
1bc38     43 00 00 FF 
1bc3c     EC E5 05 F1 | 	add	objptr, ##34796
1bc40     F2 FA 61 FC | 	wrlong	result1, objptr
1bc44     43 00 00 FF 
1bc48     EC E5 85 F1 | 	sub	objptr, ##34796
1bc4c     F2 FA 01 F6 | 	mov	result1, objptr
1bc50     00 C8 01 FF 
1bc54     00 FA 45 F5 | 	or	result1, ##59768832
1bc58     43 00 00 FF 
1bc5c     E8 E5 05 F1 | 	add	objptr, ##34792
1bc60     F2 FA 61 FC | 	wrlong	result1, objptr
1bc64     43 00 00 FF 
1bc68     E8 E5 85 F1 | 	sub	objptr, ##34792
1bc6c     F2 FA 01 F6 | 	mov	result1, objptr
1bc70     00 D0 01 FF 
1bc74     00 FA 45 F5 | 	or	result1, ##60817408
1bc78     44 00 00 FF 
1bc7c     00 E4 05 F1 | 	add	objptr, ##34816
1bc80     F2 FA 61 FC | 	wrlong	result1, objptr
1bc84     44 00 00 FF 
1bc88     00 E4 85 F1 | 	sub	objptr, ##34816
1bc8c     F2 FA 01 F6 | 	mov	result1, objptr
1bc90     00 D8 01 FF 
1bc94     00 FA 45 F5 | 	or	result1, ##61865984
1bc98     44 00 00 FF 
1bc9c     04 E4 05 F1 | 	add	objptr, ##34820
1bca0     F2 FA 61 FC | 	wrlong	result1, objptr
1bca4     44 00 00 FF 
1bca8     04 E4 85 F1 | 	sub	objptr, ##34820
1bcac     F2 FA 01 F6 | 	mov	result1, objptr
1bcb0     76 FA 25 F4 | 	bith	result1, #118
1bcb4     43 00 00 FF 
1bcb8     F0 E5 05 F1 | 	add	objptr, ##34800
1bcbc     F2 FA 61 FC | 	wrlong	result1, objptr
1bcc0     43 00 00 FF 
1bcc4     F0 E5 85 F1 | 	sub	objptr, ##34800
1bcc8     F2 FA 01 F6 | 	mov	result1, objptr
1bccc     00 E8 01 FF 
1bcd0     00 FA 45 F5 | 	or	result1, ##63963136
1bcd4     43 00 00 FF 
1bcd8     F4 E5 05 F1 | 	add	objptr, ##34804
1bcdc     F2 FA 61 FC | 	wrlong	result1, objptr
1bce0     43 00 00 FF 
1bce4     F4 E5 85 F1 | 	sub	objptr, ##34804
1bce8     F2 FA 01 F6 | 	mov	result1, objptr
1bcec     95 FA 25 F4 | 	bith	result1, #149
1bcf0     43 00 00 FF 
1bcf4     F8 E5 05 F1 | 	add	objptr, ##34808
1bcf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcfc     43 00 00 FF 
1bd00     F8 E5 85 F1 | 	sub	objptr, ##34808
1bd04     F2 FA 01 F6 | 	mov	result1, objptr
1bd08     B4 FA 25 F4 | 	bith	result1, #180
1bd0c     43 00 00 FF 
1bd10     FC E5 05 F1 | 	add	objptr, ##34812
1bd14     F2 FA 61 FC | 	wrlong	result1, objptr
1bd18     43 00 00 FF 
1bd1c     FC E5 85 F1 | 	sub	objptr, ##34812
1bd20     F2 FA 01 F6 | 	mov	result1, objptr
1bd24     1A FA 25 F4 | 	bith	result1, #26
1bd28     44 00 00 FF 
1bd2c     0C E4 05 F1 | 	add	objptr, ##34828
1bd30     F2 FA 61 FC | 	wrlong	result1, objptr
1bd34     44 00 00 FF 
1bd38     0C E4 85 F1 | 	sub	objptr, ##34828
1bd3c     F2 FA 01 F6 | 	mov	result1, objptr
1bd40     00 08 02 FF 
1bd44     00 FA 45 F5 | 	or	result1, ##68157440
1bd48     44 00 00 FF 
1bd4c     08 E4 05 F1 | 	add	objptr, ##34824
1bd50     F2 FA 61 FC | 	wrlong	result1, objptr
1bd54     44 00 00 FF 
1bd58     08 E4 85 F1 | 	sub	objptr, ##34824
1bd5c     F2 FA 01 F6 | 	mov	result1, objptr
1bd60     00 10 02 FF 
1bd64     00 FA 45 F5 | 	or	result1, ##69206016
1bd68     44 00 00 FF 
1bd6c     18 E4 05 F1 | 	add	objptr, ##34840
1bd70     F2 FA 61 FC | 	wrlong	result1, objptr
1bd74     44 00 00 FF 
1bd78     18 E4 85 F1 | 	sub	objptr, ##34840
1bd7c     F2 FA 01 F6 | 	mov	result1, objptr
1bd80     00 18 02 FF 
1bd84     00 FA 45 F5 | 	or	result1, ##70254592
1bd88     44 00 00 FF 
1bd8c     14 E4 05 F1 | 	add	objptr, ##34836
1bd90     F2 FA 61 FC | 	wrlong	result1, objptr
1bd94     44 00 00 FF 
1bd98     14 E4 85 F1 | 	sub	objptr, ##34836
1bd9c     F2 FA 01 F6 | 	mov	result1, objptr
1bda0     00 20 02 FF 
1bda4     00 FA 45 F5 | 	or	result1, ##71303168
1bda8     44 00 00 FF 
1bdac     10 E4 05 F1 | 	add	objptr, ##34832
1bdb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdb4     44 00 00 FF 
1bdb8     10 E4 85 F1 | 	sub	objptr, ##34832
1bdbc     F2 FA 01 F6 | 	mov	result1, objptr
1bdc0     00 28 02 FF 
1bdc4     00 FA 45 F5 | 	or	result1, ##72351744
1bdc8     44 00 00 FF 
1bdcc     1C E4 05 F1 | 	add	objptr, ##34844
1bdd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdd4     44 00 00 FF 
1bdd8     1C E4 85 F1 | 	sub	objptr, ##34844
1bddc     F2 FA 01 F6 | 	mov	result1, objptr
1bde0     00 30 02 FF 
1bde4     00 FA 45 F5 | 	or	result1, ##73400320
1bde8     44 00 00 FF 
1bdec     20 E4 05 F1 | 	add	objptr, ##34848
1bdf0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdf4     44 00 00 FF 
1bdf8     20 E4 85 F1 | 	sub	objptr, ##34848
1bdfc     F2 FA 01 F6 | 	mov	result1, objptr
1be00     00 38 02 FF 
1be04     00 FA 45 F5 | 	or	result1, ##74448896
1be08     43 00 00 FF 
1be0c     B4 E4 05 F1 | 	add	objptr, ##34484
1be10     F2 FA 61 FC | 	wrlong	result1, objptr
1be14     43 00 00 FF 
1be18     B4 E4 85 F1 | 	sub	objptr, ##34484
1be1c     F2 FA 01 F6 | 	mov	result1, objptr
1be20     00 40 02 FF 
1be24     00 FA 45 F5 | 	or	result1, ##75497472
1be28     44 00 00 FF 
1be2c     38 E4 05 F1 | 	add	objptr, ##34872
1be30     F2 FA 61 FC | 	wrlong	result1, objptr
1be34     44 00 00 FF 
1be38     38 E4 85 F1 | 	sub	objptr, ##34872
1be3c     F2 FA 01 F6 | 	mov	result1, objptr
1be40     00 48 02 FF 
1be44     00 FA 45 F5 | 	or	result1, ##76546048
1be48     44 00 00 FF 
1be4c     48 E4 05 F1 | 	add	objptr, ##34888
1be50     F2 FA 61 FC | 	wrlong	result1, objptr
1be54     44 00 00 FF 
1be58     48 E4 85 F1 | 	sub	objptr, ##34888
1be5c     F2 FA 01 F6 | 	mov	result1, objptr
1be60     00 50 02 FF 
1be64     00 FA 45 F5 | 	or	result1, ##77594624
1be68     44 00 00 FF 
1be6c     4C E4 05 F1 | 	add	objptr, ##34892
1be70     F2 FA 61 FC | 	wrlong	result1, objptr
1be74     44 00 00 FF 
1be78     4C E4 85 F1 | 	sub	objptr, ##34892
1be7c     F2 FA 01 F6 | 	mov	result1, objptr
1be80     00 58 02 FF 
1be84     00 FA 45 F5 | 	or	result1, ##78643200
1be88     44 00 00 FF 
1be8c     44 E4 05 F1 | 	add	objptr, ##34884
1be90     F2 FA 61 FC | 	wrlong	result1, objptr
1be94     44 00 00 FF 
1be98     44 E4 85 F1 | 	sub	objptr, ##34884
1be9c     F2 FA 01 F6 | 	mov	result1, objptr
1bea0     00 60 02 FF 
1bea4     00 FA 45 F5 | 	or	result1, ##79691776
1bea8     44 00 00 FF 
1beac     3C E4 05 F1 | 	add	objptr, ##34876
1beb0     F2 FA 61 FC | 	wrlong	result1, objptr
1beb4     44 00 00 FF 
1beb8     3C E4 85 F1 | 	sub	objptr, ##34876
1bebc     F2 FA 01 F6 | 	mov	result1, objptr
1bec0     00 68 02 FF 
1bec4     00 FA 45 F5 | 	or	result1, ##80740352
1bec8     44 00 00 FF 
1becc     40 E4 05 F1 | 	add	objptr, ##34880
1bed0     F2 FA 61 FC | 	wrlong	result1, objptr
1bed4     44 00 00 FF 
1bed8     40 E4 85 F1 | 	sub	objptr, ##34880
1bedc     F2 FA 01 F6 | 	mov	result1, objptr
1bee0     00 70 02 FF 
1bee4     00 FA 45 F5 | 	or	result1, ##81788928
1bee8     44 00 00 FF 
1beec     50 E4 05 F1 | 	add	objptr, ##34896
1bef0     F2 FA 61 FC | 	wrlong	result1, objptr
1bef4     44 00 00 FF 
1bef8     50 E4 85 F1 | 	sub	objptr, ##34896
1befc     F2 FA 01 F6 | 	mov	result1, objptr
1bf00     00 78 02 FF 
1bf04     00 FA 45 F5 | 	or	result1, ##82837504
1bf08     44 00 00 FF 
1bf0c     54 E4 05 F1 | 	add	objptr, ##34900
1bf10     F2 FA 61 FC | 	wrlong	result1, objptr
1bf14     44 00 00 FF 
1bf18     54 E4 85 F1 | 	sub	objptr, ##34900
1bf1c     F2 FA 01 F6 | 	mov	result1, objptr
1bf20     00 80 02 FF 
1bf24     00 FA 45 F5 | 	or	result1, ##83886080
1bf28     44 00 00 FF 
1bf2c     58 E4 05 F1 | 	add	objptr, ##34904
1bf30     F2 FA 61 FC | 	wrlong	result1, objptr
1bf34     44 00 00 FF 
1bf38     58 E4 85 F1 | 	sub	objptr, ##34904
1bf3c     F2 FA 01 F6 | 	mov	result1, objptr
1bf40     00 88 02 FF 
1bf44     00 FA 45 F5 | 	or	result1, ##84934656
1bf48     44 00 00 FF 
1bf4c     5C E4 05 F1 | 	add	objptr, ##34908
1bf50     F2 FA 61 FC | 	wrlong	result1, objptr
1bf54     44 00 00 FF 
1bf58     5C E4 85 F1 | 	sub	objptr, ##34908
1bf5c     F2 FA 01 F6 | 	mov	result1, objptr
1bf60     00 90 02 FF 
1bf64     00 FA 45 F5 | 	or	result1, ##85983232
1bf68     44 00 00 FF 
1bf6c     60 E4 05 F1 | 	add	objptr, ##34912
1bf70     F2 FA 61 FC | 	wrlong	result1, objptr
1bf74     44 00 00 FF 
1bf78     60 E4 85 F1 | 	sub	objptr, ##34912
1bf7c     F2 FA 01 F6 | 	mov	result1, objptr
1bf80     00 98 02 FF 
1bf84     00 FA 45 F5 | 	or	result1, ##87031808
1bf88     44 00 00 FF 
1bf8c     64 E4 05 F1 | 	add	objptr, ##34916
1bf90     F2 FA 61 FC | 	wrlong	result1, objptr
1bf94     44 00 00 FF 
1bf98     64 E4 85 F1 | 	sub	objptr, ##34916
1bf9c     F2 FA 01 F6 | 	mov	result1, objptr
1bfa0     00 A0 02 FF 
1bfa4     00 FA 45 F5 | 	or	result1, ##88080384
1bfa8     44 00 00 FF 
1bfac     68 E4 05 F1 | 	add	objptr, ##34920
1bfb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfb4     44 00 00 FF 
1bfb8     68 E4 85 F1 | 	sub	objptr, ##34920
1bfbc     F2 FA 01 F6 | 	mov	result1, objptr
1bfc0     00 A8 02 FF 
1bfc4     00 FA 45 F5 | 	or	result1, ##89128960
1bfc8     44 00 00 FF 
1bfcc     6C E4 05 F1 | 	add	objptr, ##34924
1bfd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfd4     44 00 00 FF 
1bfd8     6C E4 85 F1 | 	sub	objptr, ##34924
1bfdc     F2 FA 01 F6 | 	mov	result1, objptr
1bfe0     00 B0 02 FF 
1bfe4     00 FA 45 F5 | 	or	result1, ##90177536
1bfe8     44 00 00 FF 
1bfec     78 E4 05 F1 | 	add	objptr, ##34936
1bff0     F2 FA 61 FC | 	wrlong	result1, objptr
1bff4     44 00 00 FF 
1bff8     78 E4 85 F1 | 	sub	objptr, ##34936
1bffc     F2 FA 01 F6 | 	mov	result1, objptr
1c000     00 B8 02 FF 
1c004     00 FA 45 F5 | 	or	result1, ##91226112
1c008     44 00 00 FF 
1c00c     70 E4 05 F1 | 	add	objptr, ##34928
1c010     F2 FA 61 FC | 	wrlong	result1, objptr
1c014     44 00 00 FF 
1c018     70 E4 85 F1 | 	sub	objptr, ##34928
1c01c     F2 FA 01 F6 | 	mov	result1, objptr
1c020     00 C0 02 FF 
1c024     00 FA 45 F5 | 	or	result1, ##92274688
1c028     44 00 00 FF 
1c02c     74 E4 05 F1 | 	add	objptr, ##34932
1c030     F2 FA 61 FC | 	wrlong	result1, objptr
1c034     44 00 00 FF 
1c038     74 E4 85 F1 | 	sub	objptr, ##34932
1c03c     F2 FA 01 F6 | 	mov	result1, objptr
1c040     00 C8 02 FF 
1c044     00 FA 45 F5 | 	or	result1, ##93323264
1c048     44 00 00 FF 
1c04c     7C E4 05 F1 | 	add	objptr, ##34940
1c050     F2 FA 61 FC | 	wrlong	result1, objptr
1c054     44 00 00 FF 
1c058     7C E4 85 F1 | 	sub	objptr, ##34940
1c05c     F2 FA 01 F6 | 	mov	result1, objptr
1c060     00 D0 02 FF 
1c064     00 FA 45 F5 | 	or	result1, ##94371840
1c068     44 00 00 FF 
1c06c     24 E4 05 F1 | 	add	objptr, ##34852
1c070     F2 FA 61 FC | 	wrlong	result1, objptr
1c074     44 00 00 FF 
1c078     24 E4 85 F1 | 	sub	objptr, ##34852
1c07c     F2 FA 01 F6 | 	mov	result1, objptr
1c080     00 D8 02 FF 
1c084     00 FA 45 F5 | 	or	result1, ##95420416
1c088     44 00 00 FF 
1c08c     2C E4 05 F1 | 	add	objptr, ##34860
1c090     F2 FA 61 FC | 	wrlong	result1, objptr
1c094     44 00 00 FF 
1c098     2C E4 85 F1 | 	sub	objptr, ##34860
1c09c     F2 FA 01 F6 | 	mov	result1, objptr
1c0a0     00 E0 02 FF 
1c0a4     00 FA 45 F5 | 	or	result1, ##96468992
1c0a8     44 00 00 FF 
1c0ac     30 E4 05 F1 | 	add	objptr, ##34864
1c0b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0b4     44 00 00 FF 
1c0b8     30 E4 85 F1 | 	sub	objptr, ##34864
1c0bc     F2 FA 01 F6 | 	mov	result1, objptr
1c0c0     00 E8 02 FF 
1c0c4     00 FA 45 F5 | 	or	result1, ##97517568
1c0c8     44 00 00 FF 
1c0cc     80 E4 05 F1 | 	add	objptr, ##34944
1c0d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0d4     44 00 00 FF 
1c0d8     80 E4 85 F1 | 	sub	objptr, ##34944
1c0dc     F2 FA 01 F6 | 	mov	result1, objptr
1c0e0     00 F0 02 FF 
1c0e4     00 FA 45 F5 | 	or	result1, ##98566144
1c0e8     44 00 00 FF 
1c0ec     84 E4 05 F1 | 	add	objptr, ##34948
1c0f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0f4     44 00 00 FF 
1c0f8     84 E4 85 F1 | 	sub	objptr, ##34948
1c0fc     F2 FA 01 F6 | 	mov	result1, objptr
1c100     00 F8 02 FF 
1c104     00 FA 45 F5 | 	or	result1, ##99614720
1c108     44 00 00 FF 
1c10c     88 E4 05 F1 | 	add	objptr, ##34952
1c110     F2 FA 61 FC | 	wrlong	result1, objptr
1c114     44 00 00 FF 
1c118     88 E4 85 F1 | 	sub	objptr, ##34952
1c11c     F2 FA 01 F6 | 	mov	result1, objptr
1c120     39 FA 25 F4 | 	bith	result1, #57
1c124     44 00 00 FF 
1c128     34 E4 05 F1 | 	add	objptr, ##34868
1c12c     F2 FA 61 FC | 	wrlong	result1, objptr
1c130     44 00 00 FF 
1c134     34 E4 85 F1 | 	sub	objptr, ##34868
1c138     F2 FA 01 F6 | 	mov	result1, objptr
1c13c     00 08 03 FF 
1c140     00 FA 45 F5 | 	or	result1, ##101711872
1c144     44 00 00 FF 
1c148     98 E4 05 F1 | 	add	objptr, ##34968
1c14c     F2 FA 61 FC | 	wrlong	result1, objptr
1c150     44 00 00 FF 
1c154     98 E4 85 F1 | 	sub	objptr, ##34968
1c158     F2 FA 01 F6 | 	mov	result1, objptr
1c15c     00 10 03 FF 
1c160     00 FA 45 F5 | 	or	result1, ##102760448
1c164     44 00 00 FF 
1c168     A0 E4 05 F1 | 	add	objptr, ##34976
1c16c     F2 FA 61 FC | 	wrlong	result1, objptr
1c170     44 00 00 FF 
1c174     A0 E4 85 F1 | 	sub	objptr, ##34976
1c178     F2 FA 01 F6 | 	mov	result1, objptr
1c17c     00 18 03 FF 
1c180     00 FA 45 F5 | 	or	result1, ##103809024
1c184     44 00 00 FF 
1c188     94 E4 05 F1 | 	add	objptr, ##34964
1c18c     F2 FA 61 FC | 	wrlong	result1, objptr
1c190     44 00 00 FF 
1c194     94 E4 85 F1 | 	sub	objptr, ##34964
1c198     F2 FA 01 F6 | 	mov	result1, objptr
1c19c     00 20 03 FF 
1c1a0     00 FA 45 F5 | 	or	result1, ##104857600
1c1a4     44 00 00 FF 
1c1a8     90 E4 05 F1 | 	add	objptr, ##34960
1c1ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b0     44 00 00 FF 
1c1b4     90 E4 85 F1 | 	sub	objptr, ##34960
1c1b8     F2 FA 01 F6 | 	mov	result1, objptr
1c1bc     00 28 03 FF 
1c1c0     00 FA 45 F5 | 	or	result1, ##105906176
1c1c4     44 00 00 FF 
1c1c8     8C E4 05 F1 | 	add	objptr, ##34956
1c1cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d0     44 00 00 FF 
1c1d4     8C E4 85 F1 | 	sub	objptr, ##34956
1c1d8     F2 FA 01 F6 | 	mov	result1, objptr
1c1dc     00 30 03 FF 
1c1e0     00 FA 45 F5 | 	or	result1, ##106954752
1c1e4     44 00 00 FF 
1c1e8     9C E4 05 F1 | 	add	objptr, ##34972
1c1ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f0     44 00 00 FF 
1c1f4     9C E4 85 F1 | 	sub	objptr, ##34972
1c1f8     F2 FA 01 F6 | 	mov	result1, objptr
1c1fc     00 38 03 FF 
1c200     00 FA 45 F5 | 	or	result1, ##108003328
1c204     44 00 00 FF 
1c208     A4 E4 05 F1 | 	add	objptr, ##34980
1c20c     F2 FA 61 FC | 	wrlong	result1, objptr
1c210     44 00 00 FF 
1c214     A4 E4 85 F1 | 	sub	objptr, ##34980
1c218     F2 FA 01 F6 | 	mov	result1, objptr
1c21c     00 40 03 FF 
1c220     00 FA 45 F5 | 	or	result1, ##109051904
1c224     44 00 00 FF 
1c228     A8 E4 05 F1 | 	add	objptr, ##34984
1c22c     F2 FA 61 FC | 	wrlong	result1, objptr
1c230     44 00 00 FF 
1c234     A8 E4 85 F1 | 	sub	objptr, ##34984
1c238     F2 FA 01 F6 | 	mov	result1, objptr
1c23c     00 48 03 FF 
1c240     00 FA 45 F5 | 	or	result1, ##110100480
1c244     44 00 00 FF 
1c248     AC E4 05 F1 | 	add	objptr, ##34988
1c24c     F2 FA 61 FC | 	wrlong	result1, objptr
1c250     44 00 00 FF 
1c254     AC E4 85 F1 | 	sub	objptr, ##34988
1c258     F2 FA 01 F6 | 	mov	result1, objptr
1c25c     00 50 03 FF 
1c260     00 FA 45 F5 | 	or	result1, ##111149056
1c264     44 00 00 FF 
1c268     B4 E4 05 F1 | 	add	objptr, ##34996
1c26c     F2 FA 61 FC | 	wrlong	result1, objptr
1c270     44 00 00 FF 
1c274     B4 E4 85 F1 | 	sub	objptr, ##34996
1c278     F2 FA 01 F6 | 	mov	result1, objptr
1c27c     00 58 03 FF 
1c280     00 FA 45 F5 | 	or	result1, ##112197632
1c284     44 00 00 FF 
1c288     B8 E4 05 F1 | 	add	objptr, ##35000
1c28c     F2 FA 61 FC | 	wrlong	result1, objptr
1c290     44 00 00 FF 
1c294     B8 E4 85 F1 | 	sub	objptr, ##35000
1c298     F2 FA 01 F6 | 	mov	result1, objptr
1c29c     00 60 03 FF 
1c2a0     00 FA 45 F5 | 	or	result1, ##113246208
1c2a4     44 00 00 FF 
1c2a8     BC E4 05 F1 | 	add	objptr, ##35004
1c2ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c2b0     44 00 00 FF 
1c2b4     BC E4 85 F1 | 	sub	objptr, ##35004
1c2b8     F2 FA 01 F6 | 	mov	result1, objptr
1c2bc     00 68 03 FF 
1c2c0     00 FA 45 F5 | 	or	result1, ##114294784
1c2c4     44 00 00 FF 
1c2c8     C0 E4 05 F1 | 	add	objptr, ##35008
1c2cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c2d0     44 00 00 FF 
1c2d4     C0 E4 85 F1 | 	sub	objptr, ##35008
1c2d8     F2 FA 01 F6 | 	mov	result1, objptr
1c2dc     00 70 03 FF 
1c2e0     00 FA 45 F5 | 	or	result1, ##115343360
1c2e4     44 00 00 FF 
1c2e8     C4 E4 05 F1 | 	add	objptr, ##35012
1c2ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c2f0     44 00 00 FF 
1c2f4     C4 E4 85 F1 | 	sub	objptr, ##35012
1c2f8     F2 FA 01 F6 | 	mov	result1, objptr
1c2fc     00 78 03 FF 
1c300     00 FA 45 F5 | 	or	result1, ##116391936
1c304     44 00 00 FF 
1c308     C8 E4 05 F1 | 	add	objptr, ##35016
1c30c     F2 FA 61 FC | 	wrlong	result1, objptr
1c310     44 00 00 FF 
1c314     C8 E4 85 F1 | 	sub	objptr, ##35016
1c318     F2 FA 01 F6 | 	mov	result1, objptr
1c31c     00 08 01 FF 
1c320     00 FA 45 F5 | 	or	result1, ##34603008
1c324     44 00 00 FF 
1c328     CC E4 05 F1 | 	add	objptr, ##35020
1c32c     F2 FA 61 FC | 	wrlong	result1, objptr
1c330     44 00 00 FF 
1c334     CC E4 85 F1 | 	sub	objptr, ##35020
1c338     F2 FA 01 F6 | 	mov	result1, objptr
1c33c     58 FA 25 F4 | 	bith	result1, #88
1c340     44 00 00 FF 
1c344     D0 E4 05 F1 | 	add	objptr, ##35024
1c348     F2 FA 61 FC | 	wrlong	result1, objptr
1c34c     44 00 00 FF 
1c350     D0 E4 85 F1 | 	sub	objptr, ##35024
1c354     F2 FA 01 F6 | 	mov	result1, objptr
1c358     00 88 03 FF 
1c35c     00 FA 45 F5 | 	or	result1, ##118489088
1c360     44 00 00 FF 
1c364     B0 E4 05 F1 | 	add	objptr, ##34992
1c368     F2 FA 61 FC | 	wrlong	result1, objptr
1c36c     44 00 00 FF 
1c370     B0 E4 85 F1 | 	sub	objptr, ##34992
1c374     F2 FA 01 F6 | 	mov	result1, objptr
1c378     00 90 03 FF 
1c37c     00 FA 45 F5 | 	or	result1, ##119537664
1c380     43 00 00 FF 
1c384     A8 E4 05 F1 | 	add	objptr, ##34472
1c388     F2 FA 61 FC | 	wrlong	result1, objptr
1c38c     43 00 00 FF 
1c390     A8 E4 85 F1 | 	sub	objptr, ##34472
1c394     F2 FA 01 F6 | 	mov	result1, objptr
1c398     00 98 03 FF 
1c39c     00 FA 45 F5 | 	or	result1, ##120586240
1c3a0     44 00 00 FF 
1c3a4     D4 E4 05 F1 | 	add	objptr, ##35028
1c3a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3ac     44 00 00 FF 
1c3b0     D4 E4 85 F1 | 	sub	objptr, ##35028
1c3b4     F2 FA 01 F6 | 	mov	result1, objptr
1c3b8     00 A0 03 FF 
1c3bc     00 FA 45 F5 | 	or	result1, ##121634816
1c3c0     44 00 00 FF 
1c3c4     D8 E4 05 F1 | 	add	objptr, ##35032
1c3c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3cc     44 00 00 FF 
1c3d0     D8 E4 85 F1 | 	sub	objptr, ##35032
1c3d4     F2 FA 01 F6 | 	mov	result1, objptr
1c3d8     00 A8 03 FF 
1c3dc     00 FA 45 F5 | 	or	result1, ##122683392
1c3e0     44 00 00 FF 
1c3e4     EC E4 05 F1 | 	add	objptr, ##35052
1c3e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3ec     44 00 00 FF 
1c3f0     EC E4 85 F1 | 	sub	objptr, ##35052
1c3f4     F2 FA 01 F6 | 	mov	result1, objptr
1c3f8     00 B0 03 FF 
1c3fc     00 FA 45 F5 | 	or	result1, ##123731968
1c400     44 00 00 FF 
1c404     E8 E4 05 F1 | 	add	objptr, ##35048
1c408     F2 FA 61 FC | 	wrlong	result1, objptr
1c40c     44 00 00 FF 
1c410     E8 E4 85 F1 | 	sub	objptr, ##35048
1c414     F2 FA 01 F6 | 	mov	result1, objptr
1c418     00 B8 03 FF 
1c41c     00 FA 45 F5 | 	or	result1, ##124780544
1c420     44 00 00 FF 
1c424     E0 E4 05 F1 | 	add	objptr, ##35040
1c428     F2 FA 61 FC | 	wrlong	result1, objptr
1c42c     44 00 00 FF 
1c430     E0 E4 85 F1 | 	sub	objptr, ##35040
1c434     F2 FA 01 F6 | 	mov	result1, objptr
1c438     77 FA 25 F4 | 	bith	result1, #119
1c43c     44 00 00 FF 
1c440     DC E4 05 F1 | 	add	objptr, ##35036
1c444     F2 FA 61 FC | 	wrlong	result1, objptr
1c448     44 00 00 FF 
1c44c     DC E4 85 F1 | 	sub	objptr, ##35036
1c450     F2 FA 01 F6 | 	mov	result1, objptr
1c454     00 C8 03 FF 
1c458     00 FA 45 F5 | 	or	result1, ##126877696
1c45c     44 00 00 FF 
1c460     FC E4 05 F1 | 	add	objptr, ##35068
1c464     F2 FA 61 FC | 	wrlong	result1, objptr
1c468     44 00 00 FF 
1c46c     FC E4 85 F1 | 	sub	objptr, ##35068
1c470     F2 FA 01 F6 | 	mov	result1, objptr
1c474     00 D0 03 FF 
1c478     00 FA 45 F5 | 	or	result1, ##127926272
1c47c     44 00 00 FF 
1c480     F0 E4 05 F1 | 	add	objptr, ##35056
1c484     F2 FA 61 FC | 	wrlong	result1, objptr
1c488     44 00 00 FF 
1c48c     F0 E4 85 F1 | 	sub	objptr, ##35056
1c490     F2 FA 01 F6 | 	mov	result1, objptr
1c494     00 D8 03 FF 
1c498     00 FA 45 F5 | 	or	result1, ##128974848
1c49c     44 00 00 FF 
1c4a0     F4 E4 05 F1 | 	add	objptr, ##35060
1c4a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4a8     44 00 00 FF 
1c4ac     F4 E4 85 F1 | 	sub	objptr, ##35060
1c4b0     F2 FA 01 F6 | 	mov	result1, objptr
1c4b4     96 FA 25 F4 | 	bith	result1, #150
1c4b8     44 00 00 FF 
1c4bc     F8 E4 05 F1 | 	add	objptr, ##35064
1c4c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c4c4     44 00 00 FF 
1c4c8     F8 E4 85 F1 | 	sub	objptr, ##35064
1c4cc     F2 FA 01 F6 | 	mov	result1, objptr
1c4d0     00 E8 03 FF 
1c4d4     00 FA 45 F5 | 	or	result1, ##131072000
1c4d8     44 00 00 FF 
1c4dc     00 E5 05 F1 | 	add	objptr, ##35072
1c4e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c4e4     44 00 00 FF 
1c4e8     00 E5 85 F1 | 	sub	objptr, ##35072
1c4ec     F2 FA 01 F6 | 	mov	result1, objptr
1c4f0     B5 FA 25 F4 | 	bith	result1, #181
1c4f4     44 00 00 FF 
1c4f8     04 E5 05 F1 | 	add	objptr, ##35076
1c4fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c500     44 00 00 FF 
1c504     04 E5 85 F1 | 	sub	objptr, ##35076
1c508     F2 FA 01 F6 | 	mov	result1, objptr
1c50c     D4 FA 25 F4 | 	bith	result1, #212
1c510     44 00 00 FF 
1c514     08 E5 05 F1 | 	add	objptr, ##35080
1c518     F2 FA 61 FC | 	wrlong	result1, objptr
1c51c     44 00 00 FF 
1c520     08 E5 85 F1 | 	sub	objptr, ##35080
1c524     F2 FA 01 F6 | 	mov	result1, objptr
1c528     1B FA 25 F4 | 	bith	result1, #27
1c52c     44 00 00 FF 
1c530     0C E5 05 F1 | 	add	objptr, ##35084
1c534     F2 FA 61 FC | 	wrlong	result1, objptr
1c538     44 00 00 FF 
1c53c     0C E5 85 F1 | 	sub	objptr, ##35084
1c540     F2 FA 01 F6 | 	mov	result1, objptr
1c544     00 08 04 FF 
1c548     00 FA 45 F5 | 	or	result1, ##135266304
1c54c     44 00 00 FF 
1c550     10 E5 05 F1 | 	add	objptr, ##35088
1c554     F2 FA 61 FC | 	wrlong	result1, objptr
1c558     44 00 00 FF 
1c55c     10 E5 85 F1 | 	sub	objptr, ##35088
1c560     F2 FA 01 F6 | 	mov	result1, objptr
1c564     00 10 04 FF 
1c568     00 FA 45 F5 | 	or	result1, ##136314880
1c56c     44 00 00 FF 
1c570     14 E5 05 F1 | 	add	objptr, ##35092
1c574     F2 FA 61 FC | 	wrlong	result1, objptr
1c578     44 00 00 FF 
1c57c     14 E5 85 F1 | 	sub	objptr, ##35092
1c580     F2 FA 01 F6 | 	mov	result1, objptr
1c584     00 18 04 FF 
1c588     00 FA 45 F5 | 	or	result1, ##137363456
1c58c     44 00 00 FF 
1c590     1C E5 05 F1 | 	add	objptr, ##35100
1c594     F2 FA 61 FC | 	wrlong	result1, objptr
1c598     44 00 00 FF 
1c59c     1C E5 85 F1 | 	sub	objptr, ##35100
1c5a0     F2 FA 01 F6 | 	mov	result1, objptr
1c5a4     00 20 04 FF 
1c5a8     00 FA 45 F5 | 	or	result1, ##138412032
1c5ac     44 00 00 FF 
1c5b0     20 E5 05 F1 | 	add	objptr, ##35104
1c5b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b8     44 00 00 FF 
1c5bc     20 E5 85 F1 | 	sub	objptr, ##35104
1c5c0     F2 FA 01 F6 | 	mov	result1, objptr
1c5c4     00 28 04 FF 
1c5c8     00 FA 45 F5 | 	or	result1, ##139460608
1c5cc     44 00 00 FF 
1c5d0     24 E5 05 F1 | 	add	objptr, ##35108
1c5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5d8     44 00 00 FF 
1c5dc     24 E5 85 F1 | 	sub	objptr, ##35108
1c5e0     F2 FA 01 F6 | 	mov	result1, objptr
1c5e4     00 30 04 FF 
1c5e8     00 FA 45 F5 | 	or	result1, ##140509184
1c5ec     44 00 00 FF 
1c5f0     18 E5 05 F1 | 	add	objptr, ##35096
1c5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5f8     44 00 00 FF 
1c5fc     18 E5 85 F1 | 	sub	objptr, ##35096
1c600     F2 FA 01 F6 | 	mov	result1, objptr
1c604     00 38 04 FF 
1c608     00 FA 45 F5 | 	or	result1, ##141557760
1c60c     44 00 00 FF 
1c610     28 E5 05 F1 | 	add	objptr, ##35112
1c614     F2 FA 61 FC | 	wrlong	result1, objptr
1c618     44 00 00 FF 
1c61c     28 E5 85 F1 | 	sub	objptr, ##35112
1c620     F2 FA 01 F6 | 	mov	result1, objptr
1c624     00 40 04 FF 
1c628     00 FA 45 F5 | 	or	result1, ##142606336
1c62c     44 00 00 FF 
1c630     5C E5 05 F1 | 	add	objptr, ##35164
1c634     F2 FA 61 FC | 	wrlong	result1, objptr
1c638     44 00 00 FF 
1c63c     5C E5 85 F1 | 	sub	objptr, ##35164
1c640     F2 FA 01 F6 | 	mov	result1, objptr
1c644     00 48 04 FF 
1c648     00 FA 45 F5 | 	or	result1, ##143654912
1c64c     44 00 00 FF 
1c650     54 E5 05 F1 | 	add	objptr, ##35156
1c654     F2 FA 61 FC | 	wrlong	result1, objptr
1c658     44 00 00 FF 
1c65c     54 E5 85 F1 | 	sub	objptr, ##35156
1c660     F2 FA 01 F6 | 	mov	result1, objptr
1c664     00 50 04 FF 
1c668     00 FA 45 F5 | 	or	result1, ##144703488
1c66c     44 00 00 FF 
1c670     2C E5 05 F1 | 	add	objptr, ##35116
1c674     F2 FA 61 FC | 	wrlong	result1, objptr
1c678     44 00 00 FF 
1c67c     2C E5 85 F1 | 	sub	objptr, ##35116
1c680     F2 FA 01 F6 | 	mov	result1, objptr
1c684     00 58 04 FF 
1c688     00 FA 45 F5 | 	or	result1, ##145752064
1c68c     44 00 00 FF 
1c690     30 E5 05 F1 | 	add	objptr, ##35120
1c694     F2 FA 61 FC | 	wrlong	result1, objptr
1c698     44 00 00 FF 
1c69c     30 E5 85 F1 | 	sub	objptr, ##35120
1c6a0     F2 FA 01 F6 | 	mov	result1, objptr
1c6a4     00 60 04 FF 
1c6a8     00 FA 45 F5 | 	or	result1, ##146800640
1c6ac     44 00 00 FF 
1c6b0     4C E5 05 F1 | 	add	objptr, ##35148
1c6b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b8     44 00 00 FF 
1c6bc     4C E5 85 F1 | 	sub	objptr, ##35148
1c6c0     F2 FA 01 F6 | 	mov	result1, objptr
1c6c4     00 68 04 FF 
1c6c8     00 FA 45 F5 | 	or	result1, ##147849216
1c6cc     44 00 00 FF 
1c6d0     50 E5 05 F1 | 	add	objptr, ##35152
1c6d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d8     44 00 00 FF 
1c6dc     50 E5 85 F1 | 	sub	objptr, ##35152
1c6e0                 | _init_commands_ret
1c6e0     2D 00 64 FD | 	ret
1c6e4                 | 
1c6e4                 | ' 
1c6e4                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1c6e4                 | ' 
1c6e4                 | ' sub init_audio
1c6e4                 | _init_audio
1c6e4     06 4A 05 F6 | 	mov	COUNT_, #6
1c6e8     A8 00 A0 FD | 	call	#pushregs_
1c6ec     00 C0 1F FF 
1c6f0     00 1E 06 F6 | 	mov	local01, ##1065353216
1c6f4                 | ' 
1c6f4                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c6f4     00 20 06 F6 | 	mov	local02, #0
1c6f8                 | LR__2290
1c6f8     10 23 02 F6 | 	mov	local03, local02
1c6fc     01 22 66 F0 | 	shl	local03, #1
1c700     58 7F 23 FF 
1c704     00 24 06 F6 | 	mov	local04, ##1191096320
1c708     10 13 52 F6 | 	abs	arg01, local02 wc
1c70c     1F 26 C6 C9 |  if_b	decod	local05, #31
1c710     00 26 06 36 |  if_ae	mov	local05, #0
1c714     E4 68 B0 FD | 	call	#__system___float_fromuns
1c718     13 FB 61 F5 | 	xor	result1, local05
1c71c     FD 12 02 F6 | 	mov	arg01, result1
1c720     87 24 20 FF 
1c724     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c728     D4 6C B0 FD | 	call	#__system___float_mul
1c72c     FD 12 02 F6 | 	mov	arg01, result1
1c730     00 00 22 FF 
1c734     00 14 06 F6 | 	mov	arg02, ##1140850688
1c738     C8 6E B0 FD | 	call	#__system___float_div
1c73c     FD 12 02 F6 | 	mov	arg01, result1
1c740     1C 76 B0 FD | 	call	#__system____builtin_sinf
1c744     FD 14 02 F6 | 	mov	arg02, result1
1c748     12 13 02 F6 | 	mov	arg01, local04
1c74c     B0 6C B0 FD | 	call	#__system___float_mul
1c750     FD 12 02 F6 | 	mov	arg01, result1
1c754     01 14 06 F6 | 	mov	arg02, #1
1c758     6C 71 B0 FD | 	call	#__system___float_tointeger
1c75c     FD 14 02 F6 | 	mov	arg02, result1
1c760     11 13 02 F6 | 	mov	arg01, local03
1c764     00 0D B0 FD | 	call	#_psdpoke
1c768     01 20 06 F1 | 	add	local02, #1
1c76c     02 00 00 FF 
1c770     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c774     80 FF 9F CD |  if_b	jmp	#LR__2290
1c778                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c778     00 20 06 F6 | 	mov	local02, #0
1c77c                 | LR__2291
1c77c     10 15 02 F6 | 	mov	arg02, local02
1c780     01 14 66 F0 | 	shl	arg02, #1
1c784     0B 12 C6 F9 | 	decod	arg01, #11
1c788     0A 13 02 F1 | 	add	arg01, arg02
1c78c     10 25 02 F6 | 	mov	local04, local02
1c790     07 24 66 F0 | 	shl	local04, #7
1c794     10 25 82 F1 | 	sub	local04, local02
1c798     C0 FF 7F FF 
1c79c     00 15 06 F6 | 	mov	arg02, ##-32512
1c7a0     12 15 02 F1 | 	add	arg02, local04
1c7a4     C0 0C B0 FD | 	call	#_psdpoke
1c7a8     09 24 C6 F9 | 	decod	local04, #9
1c7ac     10 25 02 F1 | 	add	local04, local02
1c7b0     01 24 66 F0 | 	shl	local04, #1
1c7b4     0B 12 C6 F9 | 	decod	arg01, #11
1c7b8     12 13 02 F1 | 	add	arg01, local04
1c7bc     10 27 02 F6 | 	mov	local05, local02
1c7c0     07 26 66 F0 | 	shl	local05, #7
1c7c4     10 27 82 F1 | 	sub	local05, local02
1c7c8     3F 00 00 FF 
1c7cc     00 15 06 F6 | 	mov	arg02, ##32512
1c7d0     13 15 82 F1 | 	sub	arg02, local05
1c7d4     90 0C B0 FD | 	call	#_psdpoke
1c7d8     01 20 06 F1 | 	add	local02, #1
1c7dc     01 00 00 FF 
1c7e0     00 20 56 F2 | 	cmps	local02, ##512 wc
1c7e4     94 FF 9F CD |  if_b	jmp	#LR__2291
1c7e8                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c7e8     00 20 06 F6 | 	mov	local02, #0
1c7ec                 | LR__2292
1c7ec     10 27 02 F6 | 	mov	local05, local02
1c7f0     01 26 66 F0 | 	shl	local05, #1
1c7f4     0C 12 C6 F9 | 	decod	arg01, #12
1c7f8     13 13 02 F1 | 	add	arg01, local05
1c7fc     10 27 02 F6 | 	mov	local05, local02
1c800     06 26 66 F0 | 	shl	local05, #6
1c804     10 27 82 F1 | 	sub	local05, local02
1c808     C1 FF 7F FF 
1c80c     00 14 06 F6 | 	mov	arg02, ##-32256
1c810     13 15 02 F1 | 	add	arg02, local05
1c814     50 0C B0 FD | 	call	#_psdpoke
1c818     01 20 06 F1 | 	add	local02, #1
1c81c     02 00 00 FF 
1c820     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c824     C4 FF 9F CD |  if_b	jmp	#LR__2292
1c828                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1c828     00 20 06 F6 | 	mov	local02, #0
1c82c                 | LR__2293
1c82c     10 27 02 F6 | 	mov	local05, local02
1c830     01 26 66 F0 | 	shl	local05, #1
1c834     0C 00 00 FF 
1c838     00 12 06 F6 | 	mov	arg01, ##6144
1c83c     13 13 02 F1 | 	add	arg01, local05
1c840     C0 FF 7F FF 
1c844     A8 14 06 F6 | 	mov	arg02, ##-32600
1c848     1C 0C B0 FD | 	call	#_psdpoke
1c84c     01 20 06 F1 | 	add	local02, #1
1c850     80 20 56 F2 | 	cmps	local02, #128 wc
1c854     D4 FF 9F CD |  if_b	jmp	#LR__2293
1c858     80 20 06 F6 | 	mov	local02, #128
1c85c                 | LR__2294
1c85c     10 27 02 F6 | 	mov	local05, local02
1c860     01 26 66 F0 | 	shl	local05, #1
1c864     0C 00 00 FF 
1c868     00 12 06 F6 | 	mov	arg01, ##6144
1c86c     13 13 02 F1 | 	add	arg01, local05
1c870     3F 00 00 FF 
1c874     58 15 06 F6 | 	mov	arg02, ##32600
1c878     EC 0B B0 FD | 	call	#_psdpoke
1c87c     01 20 06 F1 | 	add	local02, #1
1c880     02 00 00 FF 
1c884     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c888     D0 FF 9F CD |  if_b	jmp	#LR__2294
1c88c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1c88c     00 20 06 F6 | 	mov	local02, #0
1c890                 | LR__2295
1c890     10 27 02 F6 | 	mov	local05, local02
1c894     01 26 66 F0 | 	shl	local05, #1
1c898     0D 12 C6 F9 | 	decod	arg01, #13
1c89c     13 13 02 F1 | 	add	arg01, local05
1c8a0     C0 FF 7F FF 
1c8a4     A8 14 06 F6 | 	mov	arg02, ##-32600
1c8a8     BC 0B B0 FD | 	call	#_psdpoke
1c8ac     01 20 06 F1 | 	add	local02, #1
1c8b0     01 00 00 FF 
1c8b4     00 20 56 F2 | 	cmps	local02, ##512 wc
1c8b8     D4 FF 9F CD |  if_b	jmp	#LR__2295
1c8bc     09 20 C6 F9 | 	decod	local02, #9
1c8c0                 | LR__2296
1c8c0     10 27 02 F6 | 	mov	local05, local02
1c8c4     01 26 66 F0 | 	shl	local05, #1
1c8c8     0D 12 C6 F9 | 	decod	arg01, #13
1c8cc     13 13 02 F1 | 	add	arg01, local05
1c8d0     3F 00 00 FF 
1c8d4     58 15 06 F6 | 	mov	arg02, ##32600
1c8d8     8C 0B B0 FD | 	call	#_psdpoke
1c8dc     01 20 06 F1 | 	add	local02, #1
1c8e0     02 00 00 FF 
1c8e4     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c8e8     D4 FF 9F CD |  if_b	jmp	#LR__2296
1c8ec                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1c8ec     00 20 06 F6 | 	mov	local02, #0
1c8f0                 | LR__2297
1c8f0     10 27 02 F6 | 	mov	local05, local02
1c8f4     01 26 66 F0 | 	shl	local05, #1
1c8f8     14 00 00 FF 
1c8fc     00 12 06 F6 | 	mov	arg01, ##10240
1c900     13 13 02 F1 | 	add	arg01, local05
1c904     C0 FF 7F FF 
1c908     A8 14 06 F6 | 	mov	arg02, ##-32600
1c90c     58 0B B0 FD | 	call	#_psdpoke
1c910     01 20 06 F1 | 	add	local02, #1
1c914     00 21 56 F2 | 	cmps	local02, #256 wc
1c918     D4 FF 9F CD |  if_b	jmp	#LR__2297
1c91c     00 21 06 F6 | 	mov	local02, #256
1c920                 | LR__2298
1c920     10 27 02 F6 | 	mov	local05, local02
1c924     01 26 66 F0 | 	shl	local05, #1
1c928     14 00 00 FF 
1c92c     00 12 06 F6 | 	mov	arg01, ##10240
1c930     13 13 02 F1 | 	add	arg01, local05
1c934     3F 00 00 FF 
1c938     58 15 06 F6 | 	mov	arg02, ##32600
1c93c     28 0B B0 FD | 	call	#_psdpoke
1c940     01 20 06 F1 | 	add	local02, #1
1c944     02 00 00 FF 
1c948     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c94c     D0 FF 9F CD |  if_b	jmp	#LR__2298
1c950                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1c950     18 00 00 FF 
1c954     00 20 06 F6 | 	mov	local02, ##12288
1c958                 | LR__2299
1c958     10 13 02 F6 | 	mov	arg01, local02
1c95c     00 14 06 F6 | 	mov	arg02, #0
1c960     BC 0A B0 FD | 	call	#_pslpoke
1c964     04 20 06 F1 | 	add	local02, #4
1c968     77 00 00 FF 
1c96c     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1c970     E4 FF 9F CD |  if_b	jmp	#LR__2299
1c974                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c974     00 20 06 F6 | 	mov	local02, #0
1c978                 | LR__2300
1c978     10 27 02 F6 | 	mov	local05, local02
1c97c     01 26 66 F0 | 	shl	local05, #1
1c980     78 00 00 FF 
1c984     00 22 06 F6 | 	mov	local03, ##61440
1c988     13 23 02 F1 | 	add	local03, local05
1c98c     12 00 00 FF 
1c990     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1c994     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1c998     12 00 00 FF 
1c99c     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1c9a0     10 12 06 F1 | 	add	arg01, #16
1c9a4     10 15 02 F6 | 	mov	arg02, local02
1c9a8     01 14 66 F0 | 	shl	arg02, #1
1c9ac     0A 13 02 F1 | 	add	arg01, arg02
1c9b0     09 15 E2 FA | 	rdword	arg02, arg01
1c9b4     11 13 02 F6 | 	mov	arg01, local03
1c9b8     AC 0A B0 FD | 	call	#_psdpoke
1c9bc     01 20 06 F1 | 	add	local02, #1
1c9c0     02 00 00 FF 
1c9c4     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c9c8     AC FF 9F CD |  if_b	jmp	#LR__2300
1c9cc                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c9cc     00 20 06 F6 | 	mov	local02, #0
1c9d0                 | LR__2301
1c9d0     10 27 02 F6 | 	mov	local05, local02
1c9d4     01 26 66 F0 | 	shl	local05, #1
1c9d8     7C 00 00 FF 
1c9dc     00 22 06 F6 | 	mov	local03, ##63488
1c9e0     13 23 02 F1 | 	add	local03, local05
1c9e4     0E 00 00 FF 
1c9e8     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1c9ec     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1c9f0     0E 00 00 FF 
1c9f4     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1c9f8     10 12 06 F1 | 	add	arg01, #16
1c9fc     10 15 02 F6 | 	mov	arg02, local02
1ca00     01 14 66 F0 | 	shl	arg02, #1
1ca04     0A 13 02 F1 | 	add	arg01, arg02
1ca08     09 15 E2 FA | 	rdword	arg02, arg01
1ca0c     11 13 02 F6 | 	mov	arg01, local03
1ca10     54 0A B0 FD | 	call	#_psdpoke
1ca14     01 20 06 F1 | 	add	local02, #1
1ca18     02 00 00 FF 
1ca1c     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca20     AC FF 9F CD |  if_b	jmp	#LR__2301
1ca24                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1ca24     00 20 06 F6 | 	mov	local02, #0
1ca28     0C 00 00 FF 
1ca2c     D8 E4 05 F1 | 	add	objptr, ##6360
1ca30     97 18 48 FB | 	callpa	#(@LR__2303-@LR__2302)>>2,fcache_load_ptr_
1ca34                 | LR__2302
1ca34     10 27 02 F6 | 	mov	local05, local02
1ca38     01 26 66 F0 | 	shl	local05, #1
1ca3c     F2 26 02 F1 | 	add	local05, objptr
1ca40     10 23 02 F6 | 	mov	local03, local02
1ca44     08 22 66 F0 | 	shl	local03, #8
1ca48     7F 00 00 FF 
1ca4c     00 29 06 F6 | 	mov	local06, ##65280
1ca50     11 29 82 F1 | 	sub	local06, local03
1ca54     13 29 52 FC | 	wrword	local06, local05
1ca58     01 20 06 F1 | 	add	local02, #1
1ca5c     00 21 56 F2 | 	cmps	local02, #256 wc
1ca60     D0 FF 9F CD |  if_b	jmp	#LR__2302
1ca64                 | LR__2303
1ca64     0C 00 00 FF 
1ca68     D8 E4 85 F1 | 	sub	objptr, ##6360
1ca6c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1ca6c     00 20 06 F6 | 	mov	local02, #0
1ca70                 | LR__2304
1ca70     10 27 02 F6 | 	mov	local05, local02
1ca74     01 26 66 F0 | 	shl	local05, #1
1ca78     0D 00 00 FF 
1ca7c     D8 E4 05 F1 | 	add	objptr, ##6872
1ca80     F2 26 02 F1 | 	add	local05, objptr
1ca84     80 BF 23 FF 
1ca88     00 12 06 F6 | 	mov	arg01, ##1199505408
1ca8c     0F 15 02 F6 | 	mov	arg02, local01
1ca90     0D 00 00 FF 
1ca94     D8 E4 85 F1 | 	sub	objptr, ##6872
1ca98     64 69 B0 FD | 	call	#__system___float_mul
1ca9c     FD 12 02 F6 | 	mov	arg01, result1
1caa0     01 14 06 F6 | 	mov	arg02, #1
1caa4     20 6E B0 FD | 	call	#__system___float_tointeger
1caa8     13 FB 51 FC | 	wrword	result1, local05
1caac     0F 13 02 F6 | 	mov	arg01, local01
1cab0     CC BC 1F FF 
1cab4     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cab8     44 69 B0 FD | 	call	#__system___float_mul
1cabc     FD 1E 02 F6 | 	mov	local01, result1
1cac0     01 20 06 F1 | 	add	local02, #1
1cac4     00 21 56 F2 | 	cmps	local02, #256 wc
1cac8     A4 FF 9F CD |  if_b	jmp	#LR__2304
1cacc     0E 00 00 FF 
1cad0     D6 E4 05 F1 | 	add	objptr, ##7382
1cad4     F2 00 58 FC | 	wrword	#0, objptr
1cad8                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cad8     00 20 06 F6 | 	mov	local02, #0
1cadc     02 E4 05 F1 | 	add	objptr, #2
1cae0     97 10 48 FB | 	callpa	#(@LR__2306-@LR__2305)>>2,fcache_load_ptr_
1cae4                 | LR__2305
1cae4     10 27 02 F6 | 	mov	local05, local02
1cae8     01 26 66 F0 | 	shl	local05, #1
1caec     F2 26 02 F1 | 	add	local05, objptr
1caf0     7F 00 80 FF 
1caf4     13 01 5A FC | 	wrword	##65280, local05
1caf8     01 20 06 F1 | 	add	local02, #1
1cafc     FF 20 56 F2 | 	cmps	local02, #255 wc
1cb00     E0 FF 9F CD |  if_b	jmp	#LR__2305
1cb04                 | LR__2306
1cb04     FE E5 05 F1 | 	add	objptr, #510
1cb08     F2 00 58 FC | 	wrword	#0, objptr
1cb0c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cb0c     00 20 06 F6 | 	mov	local02, #0
1cb10     02 E4 05 F1 | 	add	objptr, #2
1cb14     97 52 48 FB | 	callpa	#(@LR__2311-@LR__2307)>>2,fcache_load_ptr_
1cb18                 | LR__2307
1cb18     10 27 02 F6 | 	mov	local05, local02
1cb1c     01 26 66 F0 | 	shl	local05, #1
1cb20     F2 26 02 F1 | 	add	local05, objptr
1cb24     10 29 02 F6 | 	mov	local06, local02
1cb28     0C 28 66 F0 | 	shl	local06, #12
1cb2c     13 29 52 FC | 	wrword	local06, local05
1cb30     01 20 06 F1 | 	add	local02, #1
1cb34     10 20 56 F2 | 	cmps	local02, #16 wc
1cb38     DC FF 9F CD |  if_b	jmp	#LR__2307
1cb3c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cb3c     10 20 06 F6 | 	mov	local02, #16
1cb40                 | LR__2308
1cb40     10 27 02 F6 | 	mov	local05, local02
1cb44     01 26 66 F0 | 	shl	local05, #1
1cb48     F2 26 02 F1 | 	add	local05, objptr
1cb4c     7F 00 80 FF 
1cb50     13 01 5A FC | 	wrword	##65280, local05
1cb54     01 20 06 F1 | 	add	local02, #1
1cb58     F0 20 16 F2 | 	cmp	local02, #240 wc
1cb5c     E0 FF 9F CD |  if_b	jmp	#LR__2308
1cb60                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cb60     F0 20 06 F6 | 	mov	local02, #240
1cb64                 | LR__2309
1cb64     10 27 02 F6 | 	mov	local05, local02
1cb68     01 26 66 F0 | 	shl	local05, #1
1cb6c     F2 26 02 F1 | 	add	local05, objptr
1cb70     FF 22 06 F6 | 	mov	local03, #255
1cb74     10 23 82 F1 | 	sub	local03, local02
1cb78     0C 22 66 F0 | 	shl	local03, #12
1cb7c     13 23 52 FC | 	wrword	local03, local05
1cb80     01 20 06 F1 | 	add	local02, #1
1cb84     00 21 16 F2 | 	cmp	local02, #256 wc
1cb88     D8 FF 9F CD |  if_b	jmp	#LR__2309
1cb8c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cb8c     00 20 06 F6 | 	mov	local02, #0
1cb90     01 00 00 FF 
1cb94     00 E4 05 F1 | 	add	objptr, ##512
1cb98                 | LR__2310
1cb98     10 27 02 F6 | 	mov	local05, local02
1cb9c     01 26 66 F0 | 	shl	local05, #1
1cba0     F2 26 02 F1 | 	add	local05, objptr
1cba4     10 29 02 F6 | 	mov	local06, local02
1cba8     08 28 66 F0 | 	shl	local06, #8
1cbac     13 29 52 FC | 	wrword	local06, local05
1cbb0     01 20 06 F1 | 	add	local02, #1
1cbb4     00 21 56 F2 | 	cmps	local02, #256 wc
1cbb8     DC FF 9F CD |  if_b	jmp	#LR__2310
1cbbc                 | LR__2311
1cbbc     FE E5 05 F1 | 	add	objptr, #510
1cbc0     F2 00 58 FC | 	wrword	#0, objptr
1cbc4                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cbc4     00 20 06 F6 | 	mov	local02, #0
1cbc8     02 E4 05 F1 | 	add	objptr, #2
1cbcc     97 6A 48 FB | 	callpa	#(@LR__2316-@LR__2312)>>2,fcache_load_ptr_
1cbd0                 | LR__2312
1cbd0     10 27 02 F6 | 	mov	local05, local02
1cbd4     01 26 66 F0 | 	shl	local05, #1
1cbd8     F2 26 02 F1 | 	add	local05, objptr
1cbdc     10 29 02 F6 | 	mov	local06, local02
1cbe0     04 28 66 F0 | 	shl	local06, #4
1cbe4     10 29 02 F1 | 	add	local06, local02
1cbe8     04 28 66 F0 | 	shl	local06, #4
1cbec     13 29 52 FC | 	wrword	local06, local05
1cbf0     01 20 06 F1 | 	add	local02, #1
1cbf4     F0 20 56 F2 | 	cmps	local02, #240 wc
1cbf8     D4 FF 9F CD |  if_b	jmp	#LR__2312
1cbfc     F0 20 06 F6 | 	mov	local02, #240
1cc00                 | LR__2313
1cc00     10 27 02 F6 | 	mov	local05, local02
1cc04     01 26 66 F0 | 	shl	local05, #1
1cc08     F2 26 02 F1 | 	add	local05, objptr
1cc0c     FF 22 06 F6 | 	mov	local03, #255
1cc10     10 23 82 F1 | 	sub	local03, local02
1cc14     0C 22 66 F0 | 	shl	local03, #12
1cc18     13 23 52 FC | 	wrword	local03, local05
1cc1c     01 20 06 F1 | 	add	local02, #1
1cc20     00 21 16 F2 | 	cmp	local02, #256 wc
1cc24     D8 FF 9F CD |  if_b	jmp	#LR__2313
1cc28                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1cc28     00 20 06 F6 | 	mov	local02, #0
1cc2c     01 00 00 FF 
1cc30     00 E4 05 F1 | 	add	objptr, ##512
1cc34                 | LR__2314
1cc34     10 27 02 F6 | 	mov	local05, local02
1cc38     01 26 66 F0 | 	shl	local05, #1
1cc3c     F2 26 02 F1 | 	add	local05, objptr
1cc40     10 29 02 F6 | 	mov	local06, local02
1cc44     09 28 66 F0 | 	shl	local06, #9
1cc48     13 29 52 FC | 	wrword	local06, local05
1cc4c     FF 26 06 F6 | 	mov	local05, #255
1cc50     10 27 82 F1 | 	sub	local05, local02
1cc54     01 26 66 F0 | 	shl	local05, #1
1cc58     F2 26 02 F1 | 	add	local05, objptr
1cc5c     10 29 02 F6 | 	mov	local06, local02
1cc60     09 28 66 F0 | 	shl	local06, #9
1cc64     13 29 52 FC | 	wrword	local06, local05
1cc68     01 20 06 F1 | 	add	local02, #1
1cc6c     80 20 56 F2 | 	cmps	local02, #128 wc
1cc70     C0 FF 9F CD |  if_b	jmp	#LR__2314
1cc74                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cc74     00 20 06 F6 | 	mov	local02, #0
1cc78     01 00 00 FF 
1cc7c     00 E4 05 F1 | 	add	objptr, ##512
1cc80                 | LR__2315
1cc80     10 27 02 F6 | 	mov	local05, local02
1cc84     01 26 66 F0 | 	shl	local05, #1
1cc88     F2 26 02 F1 | 	add	local05, objptr
1cc8c     10 29 02 F6 | 	mov	local06, local02
1cc90     0D 28 66 F0 | 	shl	local06, #13
1cc94     13 29 52 FC | 	wrword	local06, local05
1cc98     01 20 06 F1 | 	add	local02, #1
1cc9c     08 20 56 F2 | 	cmps	local02, #8 wc
1cca0     DC FF 9F CD |  if_b	jmp	#LR__2315
1cca4                 | LR__2316
1cca4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cca4     08 20 06 F6 | 	mov	local02, #8
1cca8     97 42 48 FB | 	callpa	#(@LR__2320-@LR__2317)>>2,fcache_load_ptr_
1ccac                 | LR__2317
1ccac     10 27 02 F6 | 	mov	local05, local02
1ccb0     01 26 66 F0 | 	shl	local05, #1
1ccb4     F2 26 02 F1 | 	add	local05, objptr
1ccb8     10 1F 02 F6 | 	mov	local01, local02
1ccbc     08 1E 86 F1 | 	sub	local01, #8
1ccc0     0B 1E 66 F0 | 	shl	local01, #11
1ccc4     7F 00 00 FF 
1ccc8     00 29 06 F6 | 	mov	local06, ##65280
1cccc     0F 29 82 F1 | 	sub	local06, local01
1ccd0     13 29 52 FC | 	wrword	local06, local05
1ccd4     01 20 06 F1 | 	add	local02, #1
1ccd8     18 20 16 F2 | 	cmp	local02, #24 wc
1ccdc     CC FF 9F CD |  if_b	jmp	#LR__2317
1cce0                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cce0     18 20 06 F6 | 	mov	local02, #24
1cce4                 | LR__2318
1cce4     10 27 02 F6 | 	mov	local05, local02
1cce8     01 26 66 F0 | 	shl	local05, #1
1ccec     F2 26 02 F1 | 	add	local05, objptr
1ccf0     40 00 80 FF 
1ccf4     13 01 58 FC | 	wrword	##32768, local05
1ccf8     01 20 06 F1 | 	add	local02, #1
1ccfc     81 20 16 F2 | 	cmp	local02, #129 wc
1cd00     E0 FF 9F CD |  if_b	jmp	#LR__2318
1cd04                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cd04     81 20 06 F6 | 	mov	local02, #129
1cd08                 | LR__2319
1cd08     10 27 02 F6 | 	mov	local05, local02
1cd0c     01 26 66 F0 | 	shl	local05, #1
1cd10     F2 26 02 F1 | 	add	local05, objptr
1cd14     FF 22 06 F6 | 	mov	local03, #255
1cd18     10 23 82 F1 | 	sub	local03, local02
1cd1c     08 22 66 F0 | 	shl	local03, #8
1cd20     13 23 52 FC | 	wrword	local03, local05
1cd24     01 20 06 F1 | 	add	local02, #1
1cd28     00 21 16 F2 | 	cmp	local02, #256 wc
1cd2c     D8 FF 9F CD |  if_b	jmp	#LR__2319
1cd30                 | LR__2320
1cd30     3E 00 00 FF 
1cd34     FE E4 05 F1 | 	add	objptr, ##31998
1cd38     F2 00 59 FC | 	wrword	#128, objptr
1cd3c     51 00 00 FF 
1cd40     D6 E5 85 F1 | 	sub	objptr, ##41942
1cd44                 | ' for i=0 to 7
1cd44     00 20 06 F6 | 	mov	local02, #0
1cd48     97 8E 48 FB | 	callpa	#(@LR__2322-@LR__2321)>>2,fcache_load_ptr_
1cd4c                 | LR__2321
1cd4c     10 27 02 F6 | 	mov	local05, local02
1cd50     01 26 66 F0 | 	shl	local05, #1
1cd54     10 27 02 F1 | 	add	local05, local02
1cd58     03 26 66 F0 | 	shl	local05, #3
1cd5c     14 00 00 FF 
1cd60     38 E5 05 F1 | 	add	objptr, ##10552
1cd64     F2 26 02 F1 | 	add	local05, objptr
1cd68     00 EE A1 FF 
1cd6c     13 01 68 FC | 	wrlong	##1138491392, local05
1cd70     10 27 02 F6 | 	mov	local05, local02
1cd74     01 26 66 F0 | 	shl	local05, #1
1cd78     10 27 02 F1 | 	add	local05, local02
1cd7c     03 26 66 F0 | 	shl	local05, #3
1cd80     F2 26 02 F1 | 	add	local05, objptr
1cd84     04 26 06 F1 | 	add	local05, #4
1cd88     13 21 42 FC | 	wrbyte	local02, local05
1cd8c     10 27 02 F6 | 	mov	local05, local02
1cd90     01 26 66 F0 | 	shl	local05, #1
1cd94     10 27 02 F1 | 	add	local05, local02
1cd98     03 26 66 F0 | 	shl	local05, #3
1cd9c     F2 26 02 F1 | 	add	local05, objptr
1cda0     05 26 06 F1 | 	add	local05, #5
1cda4     13 21 42 FC | 	wrbyte	local02, local05
1cda8     10 27 02 F6 | 	mov	local05, local02
1cdac     01 26 66 F0 | 	shl	local05, #1
1cdb0     10 27 02 F1 | 	add	local05, local02
1cdb4     03 26 66 F0 | 	shl	local05, #3
1cdb8     F2 26 02 F1 | 	add	local05, objptr
1cdbc     06 26 06 F1 | 	add	local05, #6
1cdc0     13 01 58 FC | 	wrword	#0, local05
1cdc4     10 27 02 F6 | 	mov	local05, local02
1cdc8     01 26 66 F0 | 	shl	local05, #1
1cdcc     10 27 02 F1 | 	add	local05, local02
1cdd0     03 26 66 F0 | 	shl	local05, #3
1cdd4     F2 26 02 F1 | 	add	local05, objptr
1cdd8     08 26 06 F1 | 	add	local05, #8
1cddc     00 C0 9F FF 
1cde0     13 01 68 FC | 	wrlong	##1065353216, local05
1cde4     10 27 02 F6 | 	mov	local05, local02
1cde8     01 26 66 F0 | 	shl	local05, #1
1cdec     10 27 02 F1 | 	add	local05, local02
1cdf0     03 26 66 F0 | 	shl	local05, #3
1cdf4     F2 26 02 F1 | 	add	local05, objptr
1cdf8     0C 26 06 F1 | 	add	local05, #12
1cdfc     00 40 A0 FF 
1ce00     13 01 68 FC | 	wrlong	##1082130432, local05
1ce04     10 27 02 F6 | 	mov	local05, local02
1ce08     01 26 66 F0 | 	shl	local05, #1
1ce0c     10 27 02 F1 | 	add	local05, local02
1ce10     03 26 66 F0 | 	shl	local05, #3
1ce14     F2 26 02 F1 | 	add	local05, objptr
1ce18     10 26 06 F1 | 	add	local05, #16
1ce1c     13 01 68 FC | 	wrlong	#0, local05
1ce20     10 27 02 F6 | 	mov	local05, local02
1ce24     01 26 66 F0 | 	shl	local05, #1
1ce28     10 27 02 F1 | 	add	local05, local02
1ce2c     03 26 66 F0 | 	shl	local05, #3
1ce30     F2 26 02 F1 | 	add	local05, objptr
1ce34     14 26 06 F1 | 	add	local05, #20
1ce38     13 FF 59 FC | 	wrword	#255, local05
1ce3c     10 27 02 F6 | 	mov	local05, local02
1ce40     01 26 66 F0 | 	shl	local05, #1
1ce44     3D 00 00 FF 
1ce48     90 E4 05 F1 | 	add	objptr, ##31376
1ce4c     F2 26 02 F1 | 	add	local05, objptr
1ce50     13 FF 59 FC | 	wrword	#255, local05
1ce54     01 20 06 F1 | 	add	local02, #1
1ce58     08 20 56 F2 | 	cmps	local02, #8 wc
1ce5c     51 00 00 FF 
1ce60     C8 E5 85 F1 | 	sub	objptr, ##41928
1ce64     E4 FE 9F CD |  if_b	jmp	#LR__2321
1ce68                 | LR__2322
1ce68     00 6E 20 FF 
1ce6c     00 28 06 F6 | 	mov	local06, ##1088159744
1ce70                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1ce70     03 26 06 F6 | 	mov	local05, #3
1ce74                 | LR__2323
1ce74     14 13 02 F6 | 	mov	arg01, local06
1ce78     CE C3 1F FF 
1ce7c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ce80     7C 65 B0 FD | 	call	#__system___float_mul
1ce84     FD 28 02 F6 | 	mov	local06, result1
1ce88     FA 27 6E FB | 	djnz	local05, #LR__2323
1ce8c     00 20 06 F6 | 	mov	local02, #0
1ce90                 | LR__2324
1ce90     10 25 02 F6 | 	mov	local04, local02
1ce94     02 24 66 F0 | 	shl	local04, #2
1ce98     14 00 00 FF 
1ce9c     D8 E4 05 F1 | 	add	objptr, ##10456
1cea0     F2 24 02 F1 | 	add	local04, objptr
1cea4     12 29 62 FC | 	wrlong	local06, local04
1cea8     14 13 02 F6 | 	mov	arg01, local06
1ceac     CE C3 1F FF 
1ceb0     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ceb4     14 00 00 FF 
1ceb8     D8 E4 85 F1 | 	sub	objptr, ##10456
1cebc     40 65 B0 FD | 	call	#__system___float_mul
1cec0     FD 28 02 F6 | 	mov	local06, result1
1cec4     01 20 06 F1 | 	add	local02, #1
1cec8     0C 20 56 F2 | 	cmps	local02, #12 wc
1cecc     C0 FF 9F CD |  if_b	jmp	#LR__2324
1ced0     14 00 00 FF 
1ced4     08 E5 05 F1 | 	add	objptr, ##10504
1ced8     F2 50 6B FC | 	wrlong	#424, objptr
1cedc     04 E4 05 F1 | 	add	objptr, #4
1cee0     F2 20 6B FC | 	wrlong	#400, objptr
1cee4     04 E4 05 F1 | 	add	objptr, #4
1cee8     F2 F2 6A FC | 	wrlong	#377, objptr
1ceec     04 E4 05 F1 | 	add	objptr, #4
1cef0     F2 C8 6A FC | 	wrlong	#356, objptr
1cef4     04 E4 05 F1 | 	add	objptr, #4
1cef8     F2 A0 6A FC | 	wrlong	#336, objptr
1cefc     04 E4 05 F1 | 	add	objptr, #4
1cf00     F2 7A 6A FC | 	wrlong	#317, objptr
1cf04     04 E4 05 F1 | 	add	objptr, #4
1cf08     F2 58 6A FC | 	wrlong	#300, objptr
1cf0c     04 E4 05 F1 | 	add	objptr, #4
1cf10     F2 36 6A FC | 	wrlong	#283, objptr
1cf14     04 E4 05 F1 | 	add	objptr, #4
1cf18     F2 16 6A FC | 	wrlong	#267, objptr
1cf1c     04 E4 05 F1 | 	add	objptr, #4
1cf20     F2 F8 69 FC | 	wrlong	#252, objptr
1cf24     04 E4 05 F1 | 	add	objptr, #4
1cf28     F2 DC 69 FC | 	wrlong	#238, objptr
1cf2c     04 E4 05 F1 | 	add	objptr, #4
1cf30     F2 C0 69 FC | 	wrlong	#224, objptr
1cf34     3D 00 00 FF 
1cf38     A2 E4 05 F1 | 	add	objptr, ##31394
1cf3c     F2 00 59 FC | 	wrword	#128, objptr
1cf40     02 E4 85 F1 | 	sub	objptr, #2
1cf44     F2 00 59 FC | 	wrword	#128, objptr
1cf48     51 00 00 FF 
1cf4c     D4 E5 85 F1 | 	sub	objptr, ##41940
1cf50     A7 F0 03 F6 | 	mov	ptra, fp
1cf54     B2 00 A0 FD | 	call	#popregs_
1cf58                 | _init_audio_ret
1cf58     2D 00 64 FD | 	ret
1cf5c                 | 
1cf5c                 | ' 
1cf5c                 | ' '------------------- Error messages
1cf5c                 | ' 
1cf5c                 | ' sub init_error_strings
1cf5c                 | _init_error_strings
1cf5c     85 01 00 FF 
1cf60     0F 00 06 F6 | 	mov	_var01, ##@LR__5504
1cf64     45 00 00 FF 
1cf68     7C E4 05 F1 | 	add	objptr, ##35452
1cf6c     F2 00 62 FC | 	wrlong	_var01, objptr
1cf70     85 01 00 FF 
1cf74     10 00 06 F6 | 	mov	_var01, ##@LR__5505
1cf78     04 E4 05 F1 | 	add	objptr, #4
1cf7c     F2 00 62 FC | 	wrlong	_var01, objptr
1cf80     85 01 00 FF 
1cf84     35 00 06 F6 | 	mov	_var01, ##@LR__5506
1cf88     04 E4 05 F1 | 	add	objptr, #4
1cf8c     F2 00 62 FC | 	wrlong	_var01, objptr
1cf90     85 01 00 FF 
1cf94     56 00 06 F6 | 	mov	_var01, ##@LR__5507
1cf98     04 E4 05 F1 | 	add	objptr, #4
1cf9c     F2 00 62 FC | 	wrlong	_var01, objptr
1cfa0     85 01 00 FF 
1cfa4     70 00 06 F6 | 	mov	_var01, ##@LR__5508
1cfa8     04 E4 05 F1 | 	add	objptr, #4
1cfac     F2 00 62 FC | 	wrlong	_var01, objptr
1cfb0     85 01 00 FF 
1cfb4     8C 00 06 F6 | 	mov	_var01, ##@LR__5509
1cfb8     04 E4 05 F1 | 	add	objptr, #4
1cfbc     F2 00 62 FC | 	wrlong	_var01, objptr
1cfc0     85 01 00 FF 
1cfc4     AE 00 06 F6 | 	mov	_var01, ##@LR__5510
1cfc8     04 E4 05 F1 | 	add	objptr, #4
1cfcc     F2 00 62 FC | 	wrlong	_var01, objptr
1cfd0     85 01 00 FF 
1cfd4     DC 00 06 F6 | 	mov	_var01, ##@LR__5511
1cfd8     04 E4 05 F1 | 	add	objptr, #4
1cfdc     F2 00 62 FC | 	wrlong	_var01, objptr
1cfe0     85 01 00 FF 
1cfe4     07 01 06 F6 | 	mov	_var01, ##@LR__5512
1cfe8     04 E4 05 F1 | 	add	objptr, #4
1cfec     F2 00 62 FC | 	wrlong	_var01, objptr
1cff0     85 01 00 FF 
1cff4     20 01 06 F6 | 	mov	_var01, ##@LR__5513
1cff8     04 E4 05 F1 | 	add	objptr, #4
1cffc     F2 00 62 FC | 	wrlong	_var01, objptr
1d000     85 01 00 FF 
1d004     41 01 06 F6 | 	mov	_var01, ##@LR__5514
1d008     04 E4 05 F1 | 	add	objptr, #4
1d00c     F2 00 62 FC | 	wrlong	_var01, objptr
1d010     85 01 00 FF 
1d014     58 01 06 F6 | 	mov	_var01, ##@LR__5515
1d018     04 E4 05 F1 | 	add	objptr, #4
1d01c     F2 00 62 FC | 	wrlong	_var01, objptr
1d020     85 01 00 FF 
1d024     76 01 06 F6 | 	mov	_var01, ##@LR__5516
1d028     04 E4 05 F1 | 	add	objptr, #4
1d02c     F2 00 62 FC | 	wrlong	_var01, objptr
1d030     85 01 00 FF 
1d034     9A 01 06 F6 | 	mov	_var01, ##@LR__5517
1d038     04 E4 05 F1 | 	add	objptr, #4
1d03c     F2 00 62 FC | 	wrlong	_var01, objptr
1d040     85 01 00 FF 
1d044     C1 01 06 F6 | 	mov	_var01, ##@LR__5518
1d048     04 E4 05 F1 | 	add	objptr, #4
1d04c     F2 00 62 FC | 	wrlong	_var01, objptr
1d050     85 01 00 FF 
1d054     DD 01 06 F6 | 	mov	_var01, ##@LR__5519
1d058     04 E4 05 F1 | 	add	objptr, #4
1d05c     F2 00 62 FC | 	wrlong	_var01, objptr
1d060     85 01 00 FF 
1d064     EE 01 06 F6 | 	mov	_var01, ##@LR__5520
1d068     04 E4 05 F1 | 	add	objptr, #4
1d06c     F2 00 62 FC | 	wrlong	_var01, objptr
1d070     85 01 00 FF 
1d074     FE 01 06 F6 | 	mov	_var01, ##@LR__5521
1d078     04 E4 05 F1 | 	add	objptr, #4
1d07c     F2 00 62 FC | 	wrlong	_var01, objptr
1d080     86 01 00 FF 
1d084     19 00 06 F6 | 	mov	_var01, ##@LR__5522
1d088     04 E4 05 F1 | 	add	objptr, #4
1d08c     F2 00 62 FC | 	wrlong	_var01, objptr
1d090     86 01 00 FF 
1d094     2B 00 06 F6 | 	mov	_var01, ##@LR__5523
1d098     04 E4 05 F1 | 	add	objptr, #4
1d09c     F2 00 62 FC | 	wrlong	_var01, objptr
1d0a0     86 01 00 FF 
1d0a4     43 00 06 F6 | 	mov	_var01, ##@LR__5524
1d0a8     04 E4 05 F1 | 	add	objptr, #4
1d0ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d0b0     86 01 00 FF 
1d0b4     57 00 06 F6 | 	mov	_var01, ##@LR__5525
1d0b8     04 E4 05 F1 | 	add	objptr, #4
1d0bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d0c0     86 01 00 FF 
1d0c4     67 00 06 F6 | 	mov	_var01, ##@LR__5526
1d0c8     04 E4 05 F1 | 	add	objptr, #4
1d0cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d0d0     86 01 00 FF 
1d0d4     84 00 06 F6 | 	mov	_var01, ##@LR__5527
1d0d8     04 E4 05 F1 | 	add	objptr, #4
1d0dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d0e0     86 01 00 FF 
1d0e4     95 00 06 F6 | 	mov	_var01, ##@LR__5528
1d0e8     04 E4 05 F1 | 	add	objptr, #4
1d0ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d0f0     86 01 00 FF 
1d0f4     A6 00 06 F6 | 	mov	_var01, ##@LR__5529
1d0f8     04 E4 05 F1 | 	add	objptr, #4
1d0fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d100     86 01 00 FF 
1d104     DA 00 06 F6 | 	mov	_var01, ##@LR__5530
1d108     04 E4 05 F1 | 	add	objptr, #4
1d10c     F2 00 62 FC | 	wrlong	_var01, objptr
1d110     86 01 00 FF 
1d114     F6 00 06 F6 | 	mov	_var01, ##@LR__5531
1d118     04 E4 05 F1 | 	add	objptr, #4
1d11c     F2 00 62 FC | 	wrlong	_var01, objptr
1d120     86 01 00 FF 
1d124     0C 01 06 F6 | 	mov	_var01, ##@LR__5532
1d128     04 E4 05 F1 | 	add	objptr, #4
1d12c     F2 00 62 FC | 	wrlong	_var01, objptr
1d130     86 01 00 FF 
1d134     19 01 06 F6 | 	mov	_var01, ##@LR__5533
1d138     04 E4 05 F1 | 	add	objptr, #4
1d13c     F2 00 62 FC | 	wrlong	_var01, objptr
1d140     86 01 00 FF 
1d144     2B 01 06 F6 | 	mov	_var01, ##@LR__5534
1d148     04 E4 05 F1 | 	add	objptr, #4
1d14c     F2 00 62 FC | 	wrlong	_var01, objptr
1d150     86 01 00 FF 
1d154     3C 01 06 F6 | 	mov	_var01, ##@LR__5535
1d158     04 E4 05 F1 | 	add	objptr, #4
1d15c     F2 00 62 FC | 	wrlong	_var01, objptr
1d160     86 01 00 FF 
1d164     58 01 06 F6 | 	mov	_var01, ##@LR__5536
1d168     04 E4 05 F1 | 	add	objptr, #4
1d16c     F2 00 62 FC | 	wrlong	_var01, objptr
1d170     86 01 00 FF 
1d174     69 01 06 F6 | 	mov	_var01, ##@LR__5537
1d178     04 E4 05 F1 | 	add	objptr, #4
1d17c     F2 00 62 FC | 	wrlong	_var01, objptr
1d180     86 01 00 FF 
1d184     78 01 06 F6 | 	mov	_var01, ##@LR__5538
1d188     04 E4 05 F1 | 	add	objptr, #4
1d18c     F2 00 62 FC | 	wrlong	_var01, objptr
1d190     86 01 00 FF 
1d194     93 01 06 F6 | 	mov	_var01, ##@LR__5539
1d198     04 E4 05 F1 | 	add	objptr, #4
1d19c     F2 00 62 FC | 	wrlong	_var01, objptr
1d1a0     86 01 00 FF 
1d1a4     C7 01 06 F6 | 	mov	_var01, ##@LR__5540
1d1a8     04 E4 05 F1 | 	add	objptr, #4
1d1ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d1b0     86 01 00 FF 
1d1b4     E0 01 06 F6 | 	mov	_var01, ##@LR__5541
1d1b8     04 E4 05 F1 | 	add	objptr, #4
1d1bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d1c0     86 01 00 FF 
1d1c4     FC 01 06 F6 | 	mov	_var01, ##@LR__5542
1d1c8     04 E4 05 F1 | 	add	objptr, #4
1d1cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d0     87 01 00 FF 
1d1d4     1A 00 06 F6 | 	mov	_var01, ##@LR__5543
1d1d8     04 E4 05 F1 | 	add	objptr, #4
1d1dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e0     87 01 00 FF 
1d1e4     33 00 06 F6 | 	mov	_var01, ##@LR__5544
1d1e8     04 E4 05 F1 | 	add	objptr, #4
1d1ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f0     87 01 00 FF 
1d1f4     52 00 06 F6 | 	mov	_var01, ##@LR__5545
1d1f8     04 E4 05 F1 | 	add	objptr, #4
1d1fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d200     87 01 00 FF 
1d204     61 00 06 F6 | 	mov	_var01, ##@LR__5546
1d208     04 E4 05 F1 | 	add	objptr, #4
1d20c     F2 00 62 FC | 	wrlong	_var01, objptr
1d210     87 01 00 FF 
1d214     8F 00 06 F6 | 	mov	_var01, ##@LR__5547
1d218     04 E4 05 F1 | 	add	objptr, #4
1d21c     F2 00 62 FC | 	wrlong	_var01, objptr
1d220     87 01 00 FF 
1d224     9D 00 06 F6 | 	mov	_var01, ##@LR__5548
1d228     04 E4 05 F1 | 	add	objptr, #4
1d22c     F2 00 62 FC | 	wrlong	_var01, objptr
1d230     87 01 00 FF 
1d234     B2 00 06 F6 | 	mov	_var01, ##@LR__5549
1d238     04 E4 05 F1 | 	add	objptr, #4
1d23c     F2 00 62 FC | 	wrlong	_var01, objptr
1d240     87 01 00 FF 
1d244     D6 00 06 F6 | 	mov	_var01, ##@LR__5550
1d248     04 E4 05 F1 | 	add	objptr, #4
1d24c     F2 00 62 FC | 	wrlong	_var01, objptr
1d250     87 01 00 FF 
1d254     ED 00 06 F6 | 	mov	_var01, ##@LR__5551
1d258     04 E4 05 F1 | 	add	objptr, #4
1d25c     F2 00 62 FC | 	wrlong	_var01, objptr
1d260     87 01 00 FF 
1d264     00 01 06 F6 | 	mov	_var01, ##@LR__5552
1d268     04 E4 05 F1 | 	add	objptr, #4
1d26c     F2 00 62 FC | 	wrlong	_var01, objptr
1d270     87 01 00 FF 
1d274     17 01 06 F6 | 	mov	_var01, ##@LR__5553
1d278     04 E4 05 F1 | 	add	objptr, #4
1d27c     F2 00 62 FC | 	wrlong	_var01, objptr
1d280     87 01 00 FF 
1d284     30 01 06 F6 | 	mov	_var01, ##@LR__5554
1d288     04 E4 05 F1 | 	add	objptr, #4
1d28c     F2 00 62 FC | 	wrlong	_var01, objptr
1d290     87 01 00 FF 
1d294     52 01 06 F6 | 	mov	_var01, ##@LR__5555
1d298     04 E4 05 F1 | 	add	objptr, #4
1d29c     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a0     87 01 00 FF 
1d2a4     65 01 06 F6 | 	mov	_var01, ##@LR__5556
1d2a8     04 E4 05 F1 | 	add	objptr, #4
1d2ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b0     45 00 00 FF 
1d2b4     4C E5 85 F1 | 	sub	objptr, ##35660
1d2b8                 | _init_error_strings_ret
1d2b8     2D 00 64 FD | 	ret
1d2bc                 | 
1d2bc                 | '         
1d2bc                 | ' sub printerror(err as integer)
1d2bc                 | _printerror
1d2bc     01 4A 05 F6 | 	mov	COUNT_, #1
1d2c0     A8 00 A0 FD | 	call	#pushregs_
1d2c4     09 1F 02 F6 | 	mov	local01, arg01
1d2c8     87 01 00 FF 
1d2cc     75 13 06 F6 | 	mov	arg01, ##@LR__5557
1d2d0     5C 20 B0 FD | 	call	#_hg010b_spin2_write
1d2d4     0F 13 02 F6 | 	mov	arg01, local01
1d2d8     F8 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1d2dc     FD 12 02 F6 | 	mov	arg01, result1
1d2e0     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1d2e4     87 01 00 FF 
1d2e8     7C 13 06 F6 | 	mov	arg01, ##@LR__5558
1d2ec     40 20 B0 FD | 	call	#_hg010b_spin2_write
1d2f0     02 1E 66 F0 | 	shl	local01, #2
1d2f4     45 00 00 FF 
1d2f8     7C E4 05 F1 | 	add	objptr, ##35452
1d2fc     F2 1E 02 F1 | 	add	local01, objptr
1d300     0F 13 02 FB | 	rdlong	arg01, local01
1d304     45 00 00 FF 
1d308     7C E4 85 F1 | 	sub	objptr, ##35452
1d30c                 | ' 
1d30c                 | ' write(text)
1d30c     20 20 B0 FD | 	call	#_hg010b_spin2_write
1d310                 | ' crlf
1d310     1C 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d314     A7 F0 03 F6 | 	mov	ptra, fp
1d318     B2 00 A0 FD | 	call	#popregs_
1d31c                 | _printerror_ret
1d31c     2D 00 64 FD | 	ret
1d320                 | 
1d320                 | ' 
1d320                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d320                 | ' 
1d320                 | ' sub startpsram
1d320                 | _startpsram
1d320     00 12 06 F6 | 	mov	arg01, #0
1d324     0A 14 C6 F9 | 	decod	arg02, #10
1d328     0B 16 06 F6 | 	mov	arg03, #11
1d32c     07 18 06 F6 | 	mov	arg04, #7
1d330     0B 00 00 FF 
1d334     CC E4 05 F1 | 	add	objptr, ##5836
1d338     A4 26 B0 FD | 	call	#_psram_spin2_startx
1d33c     2B 00 00 FF 
1d340     3C E5 05 F1 | 	add	objptr, ##22332
1d344     F2 FA 61 FC | 	wrlong	result1, objptr
1d348                 | '     return $7FF00 + cog*12
1d348     0C E4 05 F1 | 	add	objptr, #12
1d34c     FF 03 80 FF 
1d350     F2 00 6A FC | 	wrlong	##524032, objptr
1d354     37 00 00 FF 
1d358     14 E4 85 F1 | 	sub	objptr, ##28180
1d35c                 | _startpsram_ret
1d35c     2D 00 64 FD | 	ret
1d360                 | 
1d360                 | ' 
1d360                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d360                 | _startvideo
1d360     01 4A 05 F6 | 	mov	COUNT_, #1
1d364     A8 00 A0 FD | 	call	#pushregs_
1d368     37 00 00 FF 
1d36c     14 E4 05 F1 | 	add	objptr, ##28180
1d370     F2 18 02 FB | 	rdlong	arg04, objptr
1d374     37 00 00 FF 
1d378     14 E4 85 F1 | 	sub	objptr, ##28180
1d37c     0A 13 02 F6 | 	mov	arg01, arg02
1d380     0C 15 02 F6 | 	mov	arg02, arg04
1d384     A0 07 B0 FD | 	call	#_hg010b_spin2_start
1d388     37 00 00 FF 
1d38c     00 E4 05 F1 | 	add	objptr, ##28160
1d390     F2 FA 61 FC | 	wrlong	result1, objptr
1d394                 | ' 
1d394                 | ' videocog=v.start(pin,mbox)
1d394                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d394     00 1E 06 F6 | 	mov	local01, #0
1d398     2B 00 00 FF 
1d39c     34 E5 85 F1 | 	sub	objptr, ##22324
1d3a0                 | LR__2330
1d3a0     0F 13 02 F6 | 	mov	arg01, local01
1d3a4     00 28 00 FF 
1d3a8     00 14 06 F6 | 	mov	arg02, ##5242880
1d3ac     88 2A B0 FD | 	call	#_psram_spin2_setQos
1d3b0     01 1E 06 F1 | 	add	local01, #1
1d3b4     08 1E 56 F2 | 	cmps	local01, #8 wc
1d3b8     E4 FF 9F CD |  if_b	jmp	#LR__2330
1d3bc     2B 00 00 FF 
1d3c0     34 E5 05 F1 | 	add	objptr, ##22324
1d3c4     F2 12 02 FB | 	rdlong	arg01, objptr
1d3c8     7A 00 02 FF 
1d3cc     00 14 06 F6 | 	mov	arg02, ##67171328
1d3d0     2B 00 00 FF 
1d3d4     34 E5 85 F1 | 	sub	objptr, ##22324
1d3d8     5C 2A B0 FD | 	call	#_psram_spin2_setQos
1d3dc     0B 00 00 FF 
1d3e0     CC E4 85 F1 | 	sub	objptr, ##5836
1d3e4                 | ' psram.setQoS(videocog, $0400f400) 
1d3e4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d3e4     F2 14 02 F6 | 	mov	arg02, objptr
1d3e8     00 70 04 FF 
1d3ec     00 14 46 F5 | 	or	arg02, ##148897792
1d3f0     00 16 06 F6 | 	mov	arg03, #0
1d3f4     00 18 06 F6 | 	mov	arg04, #0
1d3f8     00 12 06 F6 | 	mov	arg01, #0
1d3fc     F4 3E B0 FD | 	call	#__system___basic_open
1d400                 | ' return videocog
1d400     37 00 00 FF 
1d404     00 E4 05 F1 | 	add	objptr, ##28160
1d408     F2 FA 01 FB | 	rdlong	result1, objptr
1d40c     37 00 00 FF 
1d410     00 E4 85 F1 | 	sub	objptr, ##28160
1d414     A7 F0 03 F6 | 	mov	ptra, fp
1d418     B2 00 A0 FD | 	call	#popregs_
1d41c                 | _startvideo_ret
1d41c     2D 00 64 FD | 	ret
1d420                 | 
1d420                 | ' 
1d420                 | ' 
1d420                 | ' 
1d420                 | ' '' ------------------------------- Convenient psram peek/poke
1d420                 | ' 
1d420                 | ' sub pslpoke(addr as ulong,value as ulong)
1d420                 | _pslpoke
1d420     00 4A 05 F6 | 	mov	COUNT_, #0
1d424     A8 00 A0 FD | 	call	#pushregs_
1d428     08 F0 07 F1 | 	add	ptra, #8
1d42c     A7 12 62 FC | 	wrlong	arg01, fp
1d430     04 4E 05 F1 | 	add	fp, #4
1d434     A7 14 62 FC | 	wrlong	arg02, fp
1d438     A7 12 02 F6 | 	mov	arg01, fp
1d43c     04 4E 85 F1 | 	sub	fp, #4
1d440     A7 14 02 FB | 	rdlong	arg02, fp
1d444     04 16 06 F6 | 	mov	arg03, #4
1d448     0B 00 00 FF 
1d44c     CC E4 05 F1 | 	add	objptr, ##5836
1d450     54 28 B0 FD | 	call	#_psram_spin2_write
1d454     0B 00 00 FF 
1d458     CC E4 85 F1 | 	sub	objptr, ##5836
1d45c     A7 F0 03 F6 | 	mov	ptra, fp
1d460     B2 00 A0 FD | 	call	#popregs_
1d464                 | _pslpoke_ret
1d464     2D 00 64 FD | 	ret
1d468                 | 
1d468                 | ' 
1d468                 | ' sub psdpoke(addr as ulong,value as ulong)
1d468                 | _psdpoke
1d468     00 4A 05 F6 | 	mov	COUNT_, #0
1d46c     A8 00 A0 FD | 	call	#pushregs_
1d470     08 F0 07 F1 | 	add	ptra, #8
1d474     A7 12 62 FC | 	wrlong	arg01, fp
1d478     04 4E 05 F1 | 	add	fp, #4
1d47c     A7 14 62 FC | 	wrlong	arg02, fp
1d480     A7 12 02 F6 | 	mov	arg01, fp
1d484     04 4E 85 F1 | 	sub	fp, #4
1d488     A7 14 02 FB | 	rdlong	arg02, fp
1d48c     02 16 06 F6 | 	mov	arg03, #2
1d490     0B 00 00 FF 
1d494     CC E4 05 F1 | 	add	objptr, ##5836
1d498     0C 28 B0 FD | 	call	#_psram_spin2_write
1d49c     0B 00 00 FF 
1d4a0     CC E4 85 F1 | 	sub	objptr, ##5836
1d4a4     A7 F0 03 F6 | 	mov	ptra, fp
1d4a8     B2 00 A0 FD | 	call	#popregs_
1d4ac                 | _psdpoke_ret
1d4ac     2D 00 64 FD | 	ret
1d4b0                 | 
1d4b0                 | ' 
1d4b0                 | ' sub pspoke(addr as ulong,value as ulong)
1d4b0                 | _pspoke
1d4b0     00 4A 05 F6 | 	mov	COUNT_, #0
1d4b4     A8 00 A0 FD | 	call	#pushregs_
1d4b8     08 F0 07 F1 | 	add	ptra, #8
1d4bc     A7 12 62 FC | 	wrlong	arg01, fp
1d4c0     04 4E 05 F1 | 	add	fp, #4
1d4c4     A7 14 62 FC | 	wrlong	arg02, fp
1d4c8     A7 12 02 F6 | 	mov	arg01, fp
1d4cc     04 4E 85 F1 | 	sub	fp, #4
1d4d0     A7 14 02 FB | 	rdlong	arg02, fp
1d4d4     01 16 06 F6 | 	mov	arg03, #1
1d4d8     0B 00 00 FF 
1d4dc     CC E4 05 F1 | 	add	objptr, ##5836
1d4e0     C4 27 B0 FD | 	call	#_psram_spin2_write
1d4e4     0B 00 00 FF 
1d4e8     CC E4 85 F1 | 	sub	objptr, ##5836
1d4ec     A7 F0 03 F6 | 	mov	ptra, fp
1d4f0     B2 00 A0 FD | 	call	#popregs_
1d4f4                 | _pspoke_ret
1d4f4     2D 00 64 FD | 	ret
1d4f8                 | 
1d4f8                 | ' 
1d4f8                 | ' function pspeek(adr as ulong) as ubyte
1d4f8                 | _pspeek
1d4f8     00 4A 05 F6 | 	mov	COUNT_, #0
1d4fc     A8 00 A0 FD | 	call	#pushregs_
1d500     0C F0 07 F1 | 	add	ptra, #12
1d504     04 4E 05 F1 | 	add	fp, #4
1d508     A7 12 62 FC | 	wrlong	arg01, fp
1d50c     04 4E 05 F1 | 	add	fp, #4
1d510     A7 12 02 F6 | 	mov	arg01, fp
1d514     04 4E 85 F1 | 	sub	fp, #4
1d518     A7 14 02 FB | 	rdlong	arg02, fp
1d51c     04 4E 85 F1 | 	sub	fp, #4
1d520     01 16 06 F6 | 	mov	arg03, #1
1d524     0B 00 00 FF 
1d528     CC E4 05 F1 | 	add	objptr, ##5836
1d52c     DC 26 B0 FD | 	call	#_psram_spin2_read1
1d530     0B 00 00 FF 
1d534     CC E4 85 F1 | 	sub	objptr, ##5836
1d538                 | ' psram.read1(varptr(res),adr,1)
1d538                 | ' return res
1d538     08 4E 05 F1 | 	add	fp, #8
1d53c     A7 FA C1 FA | 	rdbyte	result1, fp
1d540     08 4E 85 F1 | 	sub	fp, #8
1d544     A7 F0 03 F6 | 	mov	ptra, fp
1d548     B2 00 A0 FD | 	call	#popregs_
1d54c                 | _pspeek_ret
1d54c     2D 00 64 FD | 	ret
1d550                 | 
1d550                 | ' 
1d550                 | ' function pslpeek(adr as ulong) as ulong
1d550                 | _pslpeek
1d550     00 4A 05 F6 | 	mov	COUNT_, #0
1d554     A8 00 A0 FD | 	call	#pushregs_
1d558     0C F0 07 F1 | 	add	ptra, #12
1d55c     04 4E 05 F1 | 	add	fp, #4
1d560     A7 12 62 FC | 	wrlong	arg01, fp
1d564     04 4E 05 F1 | 	add	fp, #4
1d568     A7 12 02 F6 | 	mov	arg01, fp
1d56c     04 4E 85 F1 | 	sub	fp, #4
1d570     A7 14 02 FB | 	rdlong	arg02, fp
1d574     04 4E 85 F1 | 	sub	fp, #4
1d578     04 16 06 F6 | 	mov	arg03, #4
1d57c     0B 00 00 FF 
1d580     CC E4 05 F1 | 	add	objptr, ##5836
1d584     84 26 B0 FD | 	call	#_psram_spin2_read1
1d588     0B 00 00 FF 
1d58c     CC E4 85 F1 | 	sub	objptr, ##5836
1d590                 | ' psram.read1(varptr(res),adr,4)
1d590                 | ' return res
1d590     08 4E 05 F1 | 	add	fp, #8
1d594     A7 FA 01 FB | 	rdlong	result1, fp
1d598     08 4E 85 F1 | 	sub	fp, #8
1d59c     A7 F0 03 F6 | 	mov	ptra, fp
1d5a0     B2 00 A0 FD | 	call	#popregs_
1d5a4                 | _pslpeek_ret
1d5a4     2D 00 64 FD | 	ret
1d5a8                 | 
1d5a8                 | ' 
1d5a8                 | ' function psdpeek(adr as ulong) as ulong
1d5a8                 | _psdpeek
1d5a8     00 4A 05 F6 | 	mov	COUNT_, #0
1d5ac     A8 00 A0 FD | 	call	#pushregs_
1d5b0     0C F0 07 F1 | 	add	ptra, #12
1d5b4     04 4E 05 F1 | 	add	fp, #4
1d5b8     A7 12 62 FC | 	wrlong	arg01, fp
1d5bc     04 4E 05 F1 | 	add	fp, #4
1d5c0     A7 12 02 F6 | 	mov	arg01, fp
1d5c4     04 4E 85 F1 | 	sub	fp, #4
1d5c8     A7 14 02 FB | 	rdlong	arg02, fp
1d5cc     04 4E 85 F1 | 	sub	fp, #4
1d5d0     02 16 06 F6 | 	mov	arg03, #2
1d5d4     0B 00 00 FF 
1d5d8     CC E4 05 F1 | 	add	objptr, ##5836
1d5dc     2C 26 B0 FD | 	call	#_psram_spin2_read1
1d5e0     0B 00 00 FF 
1d5e4     CC E4 85 F1 | 	sub	objptr, ##5836
1d5e8                 | ' psram.read1(varptr(res),adr,2)
1d5e8                 | ' return res
1d5e8     08 4E 05 F1 | 	add	fp, #8
1d5ec     A7 FA E1 FA | 	rdword	result1, fp
1d5f0     08 4E 85 F1 | 	sub	fp, #8
1d5f4     A7 F0 03 F6 | 	mov	ptra, fp
1d5f8     B2 00 A0 FD | 	call	#popregs_
1d5fc                 | _psdpeek_ret
1d5fc     2D 00 64 FD | 	ret
1d600                 | 
1d600                 | ' 
1d600                 | ' '' ------------------------------- USB keyboard scan to char translator
1d600                 | ' 
1d600                 | ' function scantochar(key)
1d600                 | _scantochar
1d600                 | ' 
1d600                 | ' select case (key shr 8) and 255
1d600     09 01 02 F6 | 	mov	_var01, arg01
1d604     08 00 C6 F0 | 	sar	_var01, #8
1d608     FF 00 0E F5 | 	and	_var01, #255 wz
1d60c     24 00 90 AD |  if_e	jmp	#LR__2340
1d610     02 00 0E F2 | 	cmp	_var01, #2 wz
1d614     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d618     30 00 90 AD |  if_e	jmp	#LR__2341
1d61c     40 00 0E F2 | 	cmp	_var01, #64 wz
1d620     44 00 90 AD |  if_e	jmp	#LR__2342
1d624     42 00 0E F2 | 	cmp	_var01, #66 wz
1d628     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d62c     70 00 90 5D |  if_ne	jmp	#LR__2344
1d630     50 00 90 FD | 	jmp	#LR__2343
1d634                 | LR__2340
1d634     09 FB 01 F6 | 	mov	result1, arg01
1d638     7F FA 05 F5 | 	and	result1, #127
1d63c     02 FA 65 F0 | 	shl	result1, #2
1d640     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d644     FD FA C1 FA | 	rdbyte	result1, result1
1d648     54 00 90 FD | 	jmp	#_scantochar_ret
1d64c                 | LR__2341
1d64c     09 FB 01 F6 | 	mov	result1, arg01
1d650     7F FA 05 F5 | 	and	result1, #127
1d654     02 FA 65 F0 | 	shl	result1, #2
1d658     01 FA 05 F1 | 	add	result1, #1
1d65c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d660     FD FA C1 FA | 	rdbyte	result1, result1
1d664     38 00 90 FD | 	jmp	#_scantochar_ret
1d668                 | LR__2342
1d668     09 FB 01 F6 | 	mov	result1, arg01
1d66c     7F FA 05 F5 | 	and	result1, #127
1d670     02 FA 65 F0 | 	shl	result1, #2
1d674     02 FA 05 F1 | 	add	result1, #2
1d678     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d67c     FD FA C1 FA | 	rdbyte	result1, result1
1d680     1C 00 90 FD | 	jmp	#_scantochar_ret
1d684                 | LR__2343
1d684     09 FB 01 F6 | 	mov	result1, arg01
1d688     7F FA 05 F5 | 	and	result1, #127
1d68c     02 FA 65 F0 | 	shl	result1, #2
1d690     03 FA 05 F1 | 	add	result1, #3
1d694     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d698     FD FA C1 FA | 	rdbyte	result1, result1
1d69c     00 00 90 FD | 	jmp	#_scantochar_ret
1d6a0                 | LR__2344
1d6a0                 | _scantochar_ret
1d6a0     2D 00 64 FD | 	ret
1d6a4                 | 
1d6a4                 | _program
1d6a4     01 4A 05 F6 | 	mov	COUNT_, #1
1d6a8     A8 00 A0 FD | 	call	#pushregs_
1d6ac     70 FC BF FD | 	call	#_startpsram
1d6b0     40 12 06 F6 | 	mov	arg01, #64
1d6b4     00 14 06 F6 | 	mov	arg02, #0
1d6b8     00 16 06 F6 | 	mov	arg03, #0
1d6bc     A0 FC BF FD | 	call	#_startvideo
1d6c0     37 00 00 FF 
1d6c4     14 E4 05 F1 | 	add	objptr, ##28180
1d6c8     F2 12 02 FB | 	rdlong	arg01, objptr
1d6cc     00 14 06 F6 | 	mov	arg02, #0
1d6d0     FB 03 00 FF 
1d6d4     00 17 06 F6 | 	mov	arg03, ##521984
1d6d8     2B 00 00 FF 
1d6dc     48 E5 85 F1 | 	sub	objptr, ##22344
1d6e0     04 2B B0 FD | 	call	#_audio096_spin2_start
1d6e4     FE 16 02 F6 | 	mov	arg03, result2
1d6e8     2B 00 00 FF 
1d6ec     30 E5 05 F1 | 	add	objptr, ##22320
1d6f0     F2 FA 61 FC | 	wrlong	result1, objptr
1d6f4     14 E4 05 F1 | 	add	objptr, #20
1d6f8     F2 16 62 FC | 	wrlong	arg03, objptr
1d6fc     37 00 00 FF 
1d700     10 E4 85 F1 | 	sub	objptr, ##28176
1d704     32 12 06 F6 | 	mov	arg01, #50
1d708     34 34 B0 FD | 	call	#__system___waitms
1d70c     37 00 00 FF 
1d710     10 E4 05 F1 | 	add	objptr, ##28176
1d714     F2 12 02 FB | 	rdlong	arg01, objptr
1d718     37 00 00 FF 
1d71c     10 E4 85 F1 | 	sub	objptr, ##28176
1d720     14 12 06 F1 | 	add	arg01, #20
1d724     20 00 80 FF 
1d728     09 01 58 FC | 	wrword	##16384, arg01
1d72c     10 28 B0 FD | 	call	#_usbnew_spin2_start
1d730     37 00 00 FF 
1d734     04 E4 05 F1 | 	add	objptr, ##28164
1d738     F2 FA 61 FC | 	wrlong	result1, objptr
1d73c                 | '   mouse_limits[0] := xlim
1d73c     0F 00 00 FF 
1d740     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d744     01 00 80 FF 
1d748     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d74c                 | '   mouse_limits[1] := ylim
1d74c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d750     01 00 80 FF 
1d754     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d758     36 00 00 FF 
1d75c     F3 E4 85 F1 | 	sub	objptr, ##27891
1d760     F2 12 02 F6 | 	mov	arg01, objptr
1d764     11 E5 85 F1 | 	sub	objptr, #273
1d768     C4 12 06 F1 | 	add	arg01, #196
1d76c                 | '   mouse_outptr := ptr
1d76c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d770     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d774     0F 00 00 FF 
1d778     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d77c     16 00 00 FF 
1d780     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1d784     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d788     16 00 00 FF 
1d78c     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1d790     10 12 06 F6 | 	mov	arg01, #16
1d794     28 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d798     10 12 06 F6 | 	mov	arg01, #16
1d79c     20 14 06 F6 | 	mov	arg02, #32
1d7a0     20 16 06 F6 | 	mov	arg03, #32
1d7a4     A8 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d7a8     09 12 C6 F9 | 	decod	arg01, #9
1d7ac     2C 15 06 F6 | 	mov	arg02, #300
1d7b0     E4 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d7b4     F2 16 02 F6 | 	mov	arg03, objptr
1d7b8     50 00 00 FF 
1d7bc     1C E5 05 F1 | 	add	objptr, ##41244
1d7c0     F2 14 02 F6 | 	mov	arg02, objptr
1d7c4     0A 17 62 FC | 	wrlong	arg03, arg02
1d7c8     04 14 06 F1 | 	add	arg02, #4
1d7cc     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1d7d0     EF 14 02 F6 | 	mov	arg02, entryptr__
1d7d4     1E FA 05 F6 | 	mov	result1, #30
1d7d8     28 E4 61 FD | 	setq	objptr
1d7dc     0A FB F1 FC | 	coginit	result1, arg02 wc
1d7e0     01 FA 65 C6 |  if_b	neg	result1, #1
1d7e4     04 E4 85 F1 | 	sub	objptr, #4
1d7e8     F2 FA 61 FC | 	wrlong	result1, objptr
1d7ec     01 00 00 FF 
1d7f0     90 E4 05 F1 | 	add	objptr, ##656
1d7f4     F2 00 68 FC | 	wrlong	#0, objptr
1d7f8     1A 00 00 FF 
1d7fc     74 E5 85 F1 | 	sub	objptr, ##13684
1d800     F2 04 68 FC | 	wrlong	#2, objptr
1d804     04 E4 05 F1 | 	add	objptr, #4
1d808     F2 26 69 FC | 	wrlong	#147, objptr
1d80c     04 E4 05 F1 | 	add	objptr, #4
1d810     F2 34 69 FC | 	wrlong	#154, objptr
1d814     04 E4 05 F1 | 	add	objptr, #4
1d818     F2 08 68 FC | 	wrlong	#4, objptr
1d81c     04 E4 85 F1 | 	sub	objptr, #4
1d820     F2 16 02 FB | 	rdlong	arg03, objptr
1d824     14 E4 85 F1 | 	sub	objptr, #20
1d828     F2 16 62 FC | 	wrlong	arg03, objptr
1d82c     04 E4 05 F1 | 	add	objptr, #4
1d830     F2 00 68 FC | 	wrlong	#0, objptr
1d834     04 E4 05 F1 | 	add	objptr, #4
1d838     F2 00 68 FC | 	wrlong	#0, objptr
1d83c     19 00 00 FF 
1d840     E4 E4 05 F1 | 	add	objptr, ##13028
1d844     F2 02 68 FC | 	wrlong	#1, objptr
1d848     01 00 00 FF 
1d84c     9C E4 05 F1 | 	add	objptr, ##668
1d850     F2 00 68 FC | 	wrlong	#0, objptr
1d854     01 00 00 FF 
1d858     00 EA 05 F1 | 	add	ptr__dat__, ##512
1d85c     08 E4 05 F1 | 	add	objptr, #8
1d860     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1d864     04 E4 85 F1 | 	sub	objptr, #4
1d868     03 00 80 FF 
1d86c     F2 3C 69 FC | 	wrlong	##1694, objptr
1d870     0C 00 00 FF 
1d874     50 E5 85 F1 | 	sub	objptr, ##6480
1d878     F2 18 68 FC | 	wrlong	#12, objptr
1d87c     45 00 00 FF 
1d880     64 E4 85 F1 | 	sub	objptr, ##35428
1d884     01 00 00 FF 
1d888     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1d88c     94 DB BF FD | 	call	#_init_commands
1d890     C8 F6 BF FD | 	call	#_init_error_strings
1d894     4C EE BF FD | 	call	#_init_audio
1d898     5C 4A BF FD | 	call	#_do_new
1d89c     37 00 00 FF 
1d8a0     3C E4 05 F1 | 	add	objptr, ##28220
1d8a4     F2 12 02 FB | 	rdlong	arg01, objptr
1d8a8     04 E4 85 F1 | 	sub	objptr, #4
1d8ac     F2 14 02 FB | 	rdlong	arg02, objptr
1d8b0     37 00 00 FF 
1d8b4     38 E4 85 F1 | 	sub	objptr, ##28216
1d8b8     B4 16 B0 FD | 	call	#_hg010b_spin2_cls
1d8bc     37 00 00 FF 
1d8c0     40 E4 05 F1 | 	add	objptr, ##28224
1d8c4     F2 12 02 FB | 	rdlong	arg01, objptr
1d8c8     37 00 00 FF 
1d8cc     40 E4 85 F1 | 	sub	objptr, ##28224
1d8d0     4C 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1d8d4                 | ' 
1d8d4                 | ' leading_spaces:=amount
1d8d4     01 00 00 FF 
1d8d8     B6 E4 05 F1 | 	add	objptr, ##694
1d8dc     F2 04 68 FC | 	wrlong	#2, objptr
1d8e0     01 00 00 FF 
1d8e4     B6 E4 85 F1 | 	sub	objptr, ##694
1d8e8     87 01 00 FF 
1d8ec     7F 1F 06 F6 | 	mov	local01, ##@LR__5559
1d8f0     3D 12 06 F6 | 	mov	arg01, #61
1d8f4     3C 14 06 F6 | 	mov	arg02, #60
1d8f8     3B 16 06 F6 | 	mov	arg03, #59
1d8fc     3A 18 06 F6 | 	mov	arg04, #58
1d900     08 7A B0 FD | 	call	#__system___vfs_open_sdcardx
1d904     FD 14 02 F6 | 	mov	arg02, result1
1d908     0F 13 02 F6 | 	mov	arg01, local01
1d90c     08 33 B0 FD | 	call	#__system___mount
1d910     87 01 00 FF 
1d914     83 13 06 F6 | 	mov	arg01, ##@LR__5560
1d918     BC 35 B0 FD | 	call	#__system___chdir
1d91c     87 01 00 FF 
1d920     8B 1F 06 F6 | 	mov	local01, ##@LR__5561
1d924     4A 00 00 FF 
1d928     94 E4 05 F1 | 	add	objptr, ##38036
1d92c     F2 1E 62 FC | 	wrlong	local01, objptr
1d930     13 00 00 FF 
1d934     60 E4 85 F1 | 	sub	objptr, ##9824
1d938     F2 12 02 FB | 	rdlong	arg01, objptr
1d93c     37 00 00 FF 
1d940     34 E4 85 F1 | 	sub	objptr, ##28212
1d944     01 12 66 F0 | 	shl	arg01, #1
1d948     01 14 06 F6 | 	mov	arg02, #1
1d94c     10 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1d950                 | ' init_commands
1d950                 | ' init_error_strings
1d950                 | ' init_audio
1d950                 | ' do_new
1d950                 | ' cls(ink, paper)
1d950                 | ' v.setfontfamily(font) 				' use ST Mono font
1d950                 | ' v.setleadingspaces(2)
1d950                 | ' mount "/sd", _vfs_open_sdcard()
1d950                 | ' chdir "/sd/bas"
1d950                 | ' currentdir$="/sd/bas"
1d950                 | ' position 2*editor_spaces,1 : print ver$
1d950     00 12 06 F6 | 	mov	arg01, #0
1d954     58 89 B0 FD | 	call	#__system___getiolock_0541
1d958     FD 12 02 F6 | 	mov	arg01, result1
1d95c     EC 2E B0 FD | 	call	#__system___lockmem
1d960     18 00 00 FF 
1d964     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1d968     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1d96c     18 00 00 FF 
1d970     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1d974     00 12 06 F6 | 	mov	arg01, #0
1d978     00 16 06 F6 | 	mov	arg03, #0
1d97c     C0 3B B0 FD | 	call	#__system___basic_print_string
1d980     00 12 06 F6 | 	mov	arg01, #0
1d984     0A 14 06 F6 | 	mov	arg02, #10
1d988     00 16 06 F6 | 	mov	arg03, #0
1d98c     58 3B B0 FD | 	call	#__system___basic_print_char
1d990     00 12 06 F6 | 	mov	arg01, #0
1d994     18 89 B0 FD | 	call	#__system___getiolock_0541
1d998     FD 00 68 FC | 	wrlong	#0, result1
1d99c     51 00 00 FF 
1d9a0     AC E5 05 F1 | 	add	objptr, ##41900
1d9a4     F2 12 02 FB | 	rdlong	arg01, objptr
1d9a8     0E 00 00 FF 
1d9ac     50 E5 85 F1 | 	sub	objptr, ##7504
1d9b0     F2 1E 02 FB | 	rdlong	local01, objptr
1d9b4     43 00 00 FF 
1d9b8     5C E4 85 F1 | 	sub	objptr, ##34396
1d9bc     0F 13 82 F1 | 	sub	arg01, local01
1d9c0     00 14 06 F6 | 	mov	arg02, #0
1d9c4     0A 16 06 F6 | 	mov	arg03, #10
1d9c8     50 51 B0 FD | 	call	#__system__Number_S
1d9cc     FD 12 02 F6 | 	mov	arg01, result1
1d9d0     87 01 00 FF 
1d9d4     93 15 06 F6 | 	mov	arg02, ##@LR__5562
1d9d8     CC 2E B0 FD | 	call	#__system___string_concat
1d9dc     FD 1E 02 F6 | 	mov	local01, result1
1d9e0     50 00 00 FF 
1d9e4     10 E5 05 F1 | 	add	objptr, ##41232
1d9e8     F2 1E 62 FC | 	wrlong	local01, objptr
1d9ec     50 00 00 FF 
1d9f0     10 E5 85 F1 | 	sub	objptr, ##41232
1d9f4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1d9f4     00 12 06 F6 | 	mov	arg01, #0
1d9f8     B4 88 B0 FD | 	call	#__system___getiolock_0541
1d9fc     FD 12 02 F6 | 	mov	arg01, result1
1da00     48 2E B0 FD | 	call	#__system___lockmem
1da04     50 00 00 FF 
1da08     10 E5 05 F1 | 	add	objptr, ##41232
1da0c     F2 14 02 FB | 	rdlong	arg02, objptr
1da10     50 00 00 FF 
1da14     10 E5 85 F1 | 	sub	objptr, ##41232
1da18     00 12 06 F6 | 	mov	arg01, #0
1da1c     00 16 06 F6 | 	mov	arg03, #0
1da20     1C 3B B0 FD | 	call	#__system___basic_print_string
1da24     00 12 06 F6 | 	mov	arg01, #0
1da28     0A 14 06 F6 | 	mov	arg02, #10
1da2c     00 16 06 F6 | 	mov	arg03, #0
1da30     B4 3A B0 FD | 	call	#__system___basic_print_char
1da34     00 12 06 F6 | 	mov	arg01, #0
1da38     74 88 B0 FD | 	call	#__system___getiolock_0541
1da3c     FD 00 68 FC | 	wrlong	#0, result1
1da40     37 00 00 FF 
1da44     34 E4 05 F1 | 	add	objptr, ##28212
1da48     F2 12 02 FB | 	rdlong	arg01, objptr
1da4c     37 00 00 FF 
1da50     34 E4 85 F1 | 	sub	objptr, ##28212
1da54     01 12 66 F0 | 	shl	arg01, #1
1da58     04 14 06 F6 | 	mov	arg02, #4
1da5c     00 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1da60                 | ' position 2*editor_spaces,4 : print "Ready"
1da60     00 12 06 F6 | 	mov	arg01, #0
1da64     48 88 B0 FD | 	call	#__system___getiolock_0541
1da68     FD 12 02 F6 | 	mov	arg01, result1
1da6c     DC 2D B0 FD | 	call	#__system___lockmem
1da70     87 01 00 FF 
1da74     A5 15 06 F6 | 	mov	arg02, ##@LR__5563
1da78     00 12 06 F6 | 	mov	arg01, #0
1da7c     00 16 06 F6 | 	mov	arg03, #0
1da80     BC 3A B0 FD | 	call	#__system___basic_print_string
1da84     00 12 06 F6 | 	mov	arg01, #0
1da88     0A 14 06 F6 | 	mov	arg02, #10
1da8c     00 16 06 F6 | 	mov	arg03, #0
1da90     54 3A B0 FD | 	call	#__system___basic_print_char
1da94     00 12 06 F6 | 	mov	arg01, #0
1da98     14 88 B0 FD | 	call	#__system___getiolock_0541
1da9c     FD 00 68 FC | 	wrlong	#0, result1
1daa0     00 14 06 F6 | 	mov	arg02, #0
1daa4     01 14 D6 F7 | 	test	arg02, #1 wc
1daa8     5A 4C 64 FD | 	drvc	#38
1daac     01 14 D6 F7 | 	test	arg02, #1 wc
1dab0     5A 4E 64 FD | 	drvc	#39
1dab4     87 01 00 FF 
1dab8     AB 1F 06 F6 | 	mov	local01, ##@LR__5564
1dabc     51 00 00 FF 
1dac0     D8 E5 05 F1 | 	add	objptr, ##41944
1dac4     F2 1E 62 FC | 	wrlong	local01, objptr
1dac8     04 E4 05 F1 | 	add	objptr, #4
1dacc     FF FF FF FF 
1dad0     F2 FE 6B FC | 	wrlong	##-1, objptr
1dad4     51 00 00 FF 
1dad8     DC E5 85 F1 | 	sub	objptr, ##41948
1dadc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dadc                 | ' loadname="noname.bas"
1dadc                 | ' do_insert=-1
1dadc                 | ' 
1dadc                 | ' '-------------------------------------------------------------------------------------------------------- 
1dadc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dadc                 | ' '--------------------------------------------------------------------------------------------------------
1dadc                 | ' 
1dadc                 | ' do
1dadc                 | LR__2350
1dadc     24 2D BE FD | 	call	#_edit
1dae0     FD 1E 02 F6 | 	mov	local01, result1
1dae4     37 00 00 FF 
1dae8     1C E4 05 F1 | 	add	objptr, ##28188
1daec     F2 1E 62 FC | 	wrlong	local01, objptr
1daf0     37 00 00 FF 
1daf4     1C E4 85 F1 | 	sub	objptr, ##28188
1daf8     4C 3C BE FD | 	call	#_interpret
1dafc     87 01 00 FF 
1db00     B6 1F 06 F6 | 	mov	local01, ##@LR__5565
1db04     37 00 00 FF 
1db08     1C E4 05 F1 | 	add	objptr, ##28188
1db0c     F2 1E 62 FC | 	wrlong	local01, objptr
1db10     37 00 00 FF 
1db14     1C E4 85 F1 | 	sub	objptr, ##28188
1db18     C0 FF 9F FD | 	jmp	#LR__2350
1db1c     A7 F0 03 F6 | 	mov	ptra, fp
1db20     B2 00 A0 FD | 	call	#popregs_
1db24                 | _program_ret
1db24     2D 00 64 FD | 	ret
1db28                 | 
1db28                 | ' '' this is not a main program.
1db28                 | ' 
1db28                 | ' '****************************************************************************************************************
1db28                 | ' '                                                                                                             	*
1db28                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1db28                 | ' '                                                                                                            	*
1db28                 | ' ' base - HDMI base pin												*
1db28                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1db28                 | ' '														*
1db28                 | ' '														*
1db28                 | ' '****************************************************************************************************************
1db28                 | ' 
1db28                 | ' pub start(base,mb):result |i
1db28                 | _hg010b_spin2_start
1db28                 | ' 
1db28                 | ' '--------------------------- initialize pointers and variables
1db28                 | ' 
1db28                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1db28     34 E4 05 F1 | 	add	objptr, #52
1db2c     F2 FA 01 F6 | 	mov	result1, objptr
1db30     28 E4 85 F1 | 	sub	objptr, #40
1db34     F2 FA 61 FC | 	wrlong	result1, objptr
1db38                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1db38                 | ' hdmibase:=base							' HDMI base pin, 8*n
1db38     18 E4 05 F1 | 	add	objptr, #24
1db3c     F2 12 62 FC | 	wrlong	arg01, objptr
1db40                 | ' mailbox_ptr:=mb		
1db40     04 E4 05 F1 | 	add	objptr, #4
1db44     F2 14 62 FC | 	wrlong	arg02, objptr
1db48                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1db48     C1 E5 05 F1 | 	add	objptr, #449
1db4c     F2 14 62 FC | 	wrlong	arg02, objptr
1db50                 | ' sprite_ptr:=@spr1ptr
1db50     D8 E4 85 F1 | 	sub	objptr, #216
1db54     F2 FA 01 F6 | 	mov	result1, objptr
1db58     E5 E4 85 F1 | 	sub	objptr, #229
1db5c     F2 FA 61 FC | 	wrlong	result1, objptr
1db60                 | ' 
1db60                 | ' 		'
1db60                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1db60     E5 E4 05 F1 | 	add	objptr, #229
1db64     F2 FA 01 FB | 	rdlong	result1, objptr
1db68     D0 FA 05 F1 | 	add	result1, #208
1db6c     FD 10 58 FC | 	wrword	#8, result1
1db70                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1db70     F2 16 02 FB | 	rdlong	arg03, objptr
1db74     D2 16 06 F1 | 	add	arg03, #210
1db78     0B 21 58 FC | 	wrword	#16, arg03
1db7c                 | ' leading_spaces:=0				'
1db7c     A5 E5 05 F1 | 	add	objptr, #421
1db80     F2 00 68 FC | 	wrlong	#0, objptr
1db84                 | ' 
1db84                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1db84     99 E4 85 F1 | 	sub	objptr, #153
1db88     00 00 A0 FF 
1db8c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1db90                 | ' emptydl[1]:=0
1db90     04 E4 05 F1 | 	add	objptr, #4
1db94     F2 00 68 FC | 	wrlong	#0, objptr
1db98                 | ' 
1db98                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1db98                 | ' 
1db98                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1db98     28 E5 85 F1 | 	sub	objptr, #296
1db9c     F2 02 68 FC | 	wrlong	#1, objptr
1dba0                 | ' if s_debug<>0
1dba0                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1dba0     20 00 80 FF 
1dba4     F2 00 68 FC | 	wrlong	##16384, objptr
1dba8     F9 E4 85 F1 | 	sub	objptr, #249
1dbac                 | ' setmode()							' set the mode, see below
1dbac     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1dbb0                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1dbb0     49 E4 05 F1 | 	add	objptr, #73
1dbb4     F2 FA 01 F6 | 	mov	result1, objptr
1dbb8     35 E4 85 F1 | 	sub	objptr, #53
1dbbc     F2 FA 61 FC | 	wrlong	result1, objptr
1dbc0                 | ' cursor_ptr:=@cursor_x						
1dbc0     28 E4 05 F1 | 	add	objptr, #40
1dbc4     F2 16 02 F6 | 	mov	arg03, objptr
1dbc8     2C E4 85 F1 | 	sub	objptr, #44
1dbcc     F2 16 62 FC | 	wrlong	arg03, objptr
1dbd0                 | ' fontnum:=0  							' start with a PC type font 
1dbd0     55 E4 05 F1 | 	add	objptr, #85
1dbd4     F2 00 68 FC | 	wrlong	#0, objptr
1dbd8                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dbd8     1C E4 05 F1 | 	add	objptr, #28
1dbdc     F2 12 02 F6 | 	mov	arg01, objptr
1dbe0     81 E4 85 F1 | 	sub	objptr, #129
1dbe4     10 00 00 FF 
1dbe8     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1dbec     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dbf0     10 00 00 FF 
1dbf4     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1dbf8     10 16 06 F6 | 	mov	arg03, #16
1dbfc     6C 2B B0 FD | 	call	#__system____builtin_memmove
1dc00                 | ' leading_spaces:=0
1dc00     01 00 00 FF 
1dc04     B6 E4 05 F1 | 	add	objptr, ##694
1dc08     F2 00 68 FC | 	wrlong	#0, objptr
1dc0c     01 00 00 FF 
1dc10     B6 E4 85 F1 | 	sub	objptr, ##694
1dc14                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dc14                 | ' 
1dc14                 | ' initcursor(154)
1dc14     9A 12 06 F6 | 	mov	arg01, #154
1dc18     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1dc1c                 | ' 
1dc1c                 | ' '---------------------------- start the cog
1dc1c                 | ' 
1dc1c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1dc1c     10 00 00 FF 
1dc20     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dc24     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dc28     10 00 00 FF 
1dc2c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1dc30     14 E4 05 F1 | 	add	objptr, #20
1dc34     10 FA 05 F6 | 	mov	result1, #16
1dc38     28 E4 61 FD | 	setq	objptr
1dc3c     0A FB F1 FC | 	coginit	result1, arg02 wc
1dc40     01 FA 65 C6 |  if_b	neg	result1, #1
1dc44     1C E4 05 F1 | 	add	objptr, #28
1dc48     F2 FA 61 FC | 	wrlong	result1, objptr
1dc4c     30 E4 85 F1 | 	sub	objptr, #48
1dc50                 | ' waitms(40)							' wait for stabilize
1dc50     28 12 06 F6 | 	mov	arg01, #40
1dc54     E8 2E B0 FD | 	call	#__system___waitms
1dc58                 | ' return cog							' return the driver's cog #
1dc58     30 E4 05 F1 | 	add	objptr, #48
1dc5c     F2 FA 01 FB | 	rdlong	result1, objptr
1dc60     30 E4 85 F1 | 	sub	objptr, #48
1dc64                 | _hg010b_spin2_start_ret
1dc64     2D 00 64 FD | 	ret
1dc68                 | 
1dc68                 | ' 
1dc68                 | ' 
1dc68                 | ' '**************************************************************************************************************** 
1dc68                 | ' '                                                                                                             	*
1dc68                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1dc68                 | ' '  Mode number - see start() above or bits below								*
1dc68                 | ' '                                                                                                             	*
1dc68                 | ' '****************************************************************************************************************
1dc68                 | ' 
1dc68                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dc68                 | ' pub initcursor(color) |i
1dc68                 | _hg010b_spin2_initcursor
1dc68     03 4A 05 F6 | 	mov	COUNT_, #3
1dc6c     A8 00 A0 FD | 	call	#pushregs_
1dc70     09 1F 02 F6 | 	mov	local01, arg01
1dc74                 | ' 
1dc74                 | ' cursor_x:=0							' place the cursor at 0:0
1dc74     3C E4 05 F1 | 	add	objptr, #60
1dc78     F2 00 58 FC | 	wrword	#0, objptr
1dc7c                 | ' cursor_y:=0
1dc7c     02 E4 05 F1 | 	add	objptr, #2
1dc80     F2 00 48 FC | 	wrbyte	#0, objptr
1dc84                 | ' repeat i from 0 to 111
1dc84     00 20 06 F6 | 	mov	local02, #0
1dc88     F8 E5 05 F1 | 	add	objptr, #504
1dc8c     97 1A 48 FB | 	callpa	#(@LR__2362-@LR__2360)>>2,fcache_load_ptr_
1dc90                 | LR__2360
1dc90                 | '   cursor[i]:=0
1dc90     10 23 02 F6 | 	mov	local03, local02
1dc94     F2 22 02 F1 | 	add	local03, objptr
1dc98     11 01 48 FC | 	wrbyte	#0, local03
1dc9c     01 20 06 F1 | 	add	local02, #1
1dca0     70 20 56 F2 | 	cmps	local02, #112 wc
1dca4     E8 FF 9F CD |  if_b	jmp	#LR__2360
1dca8                 | ' repeat i from 112 to 127
1dca8     70 20 06 F6 | 	mov	local02, #112
1dcac                 | LR__2361
1dcac                 | '   cursor[i]:=color  
1dcac     10 23 02 F6 | 	mov	local03, local02
1dcb0     F2 22 02 F1 | 	add	local03, objptr
1dcb4     11 1F 42 FC | 	wrbyte	local01, local03
1dcb8     01 20 06 F1 | 	add	local02, #1
1dcbc     80 20 16 F2 | 	cmp	local02, #128 wc
1dcc0     E8 FF 9F CD |  if_b	jmp	#LR__2361
1dcc4                 | LR__2362
1dcc4                 | ' 'repeat i from 0 to 127
1dcc4                 | ' '  if ((i/8)//2)
1dcc4                 | ' '    cursor[i]:=15
1dcc4                 | ' '  else
1dcc4                 | ' '    cursor[i]:=0
1dcc4                 | ' '  if i>=120    
1dcc4                 | ' '    cursor[i]:=40
1dcc4                 | ' setspriteptr(17,@cursor)
1dcc4     F2 14 02 F6 | 	mov	arg02, objptr
1dcc8     01 00 00 FF 
1dccc     36 E4 85 F1 | 	sub	objptr, ##566
1dcd0     11 12 06 F6 | 	mov	arg01, #17
1dcd4     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1dcd8                 | ' setspritesize(17,8,16)
1dcd8     11 12 06 F6 | 	mov	arg01, #17
1dcdc     08 14 06 F6 | 	mov	arg02, #8
1dce0     10 16 06 F6 | 	mov	arg03, #16
1dce4     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1dce8                 | ' setspritepos(17,0,0)
1dce8     11 12 06 F6 | 	mov	arg01, #17
1dcec     00 14 06 F6 | 	mov	arg02, #0
1dcf0     00 16 06 F6 | 	mov	arg03, #0
1dcf4     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1dcf8                 | ' cursorshape:=14
1dcf8     0B 00 00 FF 
1dcfc     C6 E4 05 F1 | 	add	objptr, ##5830
1dd00     F2 1C 68 FC | 	wrlong	#14, objptr
1dd04                 | ' cursorcolor:=color
1dd04     04 E4 85 F1 | 	sub	objptr, #4
1dd08     F2 1E 62 FC | 	wrlong	local01, objptr
1dd0c     0B 00 00 FF 
1dd10     C2 E4 85 F1 | 	sub	objptr, ##5826
1dd14     A7 F0 03 F6 | 	mov	ptra, fp
1dd18     B2 00 A0 FD | 	call	#popregs_
1dd1c                 | _hg010b_spin2_initcursor_ret
1dd1c     2D 00 64 FD | 	ret
1dd20                 | 
1dd20                 | ' 
1dd20                 | ' pub setcursorshape(shape) | i
1dd20                 | _hg010b_spin2_setcursorshape
1dd20                 | ' 
1dd20                 | ' cursorshape:=shape
1dd20     0B 00 00 FF 
1dd24     C6 E4 05 F1 | 	add	objptr, ##5830
1dd28     F2 12 62 FC | 	wrlong	arg01, objptr
1dd2c                 | ' repeat i from 0 to (8*cursorshape)-1
1dd2c     00 00 06 F6 | 	mov	_var01, #0
1dd30     09 03 02 F6 | 	mov	_var02, arg01
1dd34     03 02 66 F0 | 	shl	_var02, #3
1dd38     01 02 86 F1 | 	sub	_var02, #1
1dd3c     00 02 56 F2 | 	cmps	_var02, #0 wc
1dd40     01 04 86 F6 | 	negc	_var03, #1
1dd44     02 07 02 F6 | 	mov	_var04, _var03
1dd48     02 03 02 F1 | 	add	_var02, _var03
1dd4c     0A 00 00 FF 
1dd50     90 E4 85 F1 | 	sub	objptr, ##5264
1dd54     97 0C 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1dd58                 | LR__2370
1dd58                 | '   cursor[i]:=0
1dd58     00 05 02 F6 | 	mov	_var03, _var01
1dd5c     F2 04 02 F1 | 	add	_var03, objptr
1dd60     02 01 48 FC | 	wrbyte	#0, _var03
1dd64     03 01 02 F1 | 	add	_var01, _var04
1dd68     01 01 0A F2 | 	cmp	_var01, _var02 wz
1dd6c     E8 FF 9F 5D |  if_ne	jmp	#LR__2370
1dd70                 | LR__2371
1dd70                 | ' repeat i from 8*cursorshape to 127
1dd70     0A 00 00 FF 
1dd74     90 E4 05 F1 | 	add	objptr, ##5264
1dd78     F2 06 02 FB | 	rdlong	_var04, objptr
1dd7c     03 01 02 F6 | 	mov	_var01, _var04
1dd80     03 00 66 F0 | 	shl	_var01, #3
1dd84     0B 00 00 FF 
1dd88     C6 E4 85 F1 | 	sub	objptr, ##5830
1dd8c     03 06 66 F0 | 	shl	_var04, #3
1dd90     80 06 56 F2 | 	cmps	_var04, #128 wc
1dd94     01 04 A6 F6 | 	negnc	_var03, #1
1dd98     7F 02 06 F6 | 	mov	_var02, #127
1dd9c     02 03 02 F1 | 	add	_var02, _var03
1dda0     97 1A 48 FB | 	callpa	#(@LR__2373-@LR__2372)>>2,fcache_load_ptr_
1dda4                 | LR__2372
1dda4                 | '   cursor[i]:=cursorcolor
1dda4     00 07 02 F6 | 	mov	_var04, _var01
1dda8     01 00 00 FF 
1ddac     36 E4 05 F1 | 	add	objptr, ##566
1ddb0     F2 06 02 F1 | 	add	_var04, objptr
1ddb4     0A 00 00 FF 
1ddb8     8C E4 05 F1 | 	add	objptr, ##5260
1ddbc     F2 12 02 FB | 	rdlong	arg01, objptr
1ddc0     0B 00 00 FF 
1ddc4     C2 E4 85 F1 | 	sub	objptr, ##5826
1ddc8     03 13 42 FC | 	wrbyte	arg01, _var04
1ddcc     02 01 02 F1 | 	add	_var01, _var03
1ddd0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ddd4     CC FF 9F 5D |  if_ne	jmp	#LR__2372
1ddd8                 | LR__2373
1ddd8                 | _hg010b_spin2_setcursorshape_ret
1ddd8     2D 00 64 FD | 	ret
1dddc                 | 
1dddc                 | ' 
1dddc                 | ' pub setcursorcolor(color) | i
1dddc                 | _hg010b_spin2_setcursorcolor
1dddc                 | ' 
1dddc                 | ' cursorcolor:=color
1dddc     0B 00 00 FF 
1dde0     C2 E4 05 F1 | 	add	objptr, ##5826
1dde4     F2 12 62 FC | 	wrlong	arg01, objptr
1dde8                 | ' repeat i from 0 to (8*cursorshape)-1
1dde8     00 12 06 F6 | 	mov	arg01, #0
1ddec     04 E4 05 F1 | 	add	objptr, #4
1ddf0     F2 00 02 FB | 	rdlong	_var01, objptr
1ddf4     03 00 66 F0 | 	shl	_var01, #3
1ddf8     01 00 86 F1 | 	sub	_var01, #1
1ddfc     00 00 56 F2 | 	cmps	_var01, #0 wc
1de00     01 02 86 F6 | 	negc	_var02, #1
1de04     01 05 02 F6 | 	mov	_var03, _var02
1de08     01 01 02 F1 | 	add	_var01, _var02
1de0c     0A 00 00 FF 
1de10     90 E4 85 F1 | 	sub	objptr, ##5264
1de14     97 0C 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1de18                 | LR__2380
1de18                 | '   cursor[i]:=0
1de18     09 03 02 F6 | 	mov	_var02, arg01
1de1c     F2 02 02 F1 | 	add	_var02, objptr
1de20     01 01 48 FC | 	wrbyte	#0, _var02
1de24     02 13 02 F1 | 	add	arg01, _var03
1de28     00 13 0A F2 | 	cmp	arg01, _var01 wz
1de2c     E8 FF 9F 5D |  if_ne	jmp	#LR__2380
1de30                 | LR__2381
1de30                 | ' repeat i from 8*cursorshape to 127
1de30     0A 00 00 FF 
1de34     90 E4 05 F1 | 	add	objptr, ##5264
1de38     F2 04 02 FB | 	rdlong	_var03, objptr
1de3c     02 13 02 F6 | 	mov	arg01, _var03
1de40     03 12 66 F0 | 	shl	arg01, #3
1de44     0B 00 00 FF 
1de48     C6 E4 85 F1 | 	sub	objptr, ##5830
1de4c     03 04 66 F0 | 	shl	_var03, #3
1de50     80 04 56 F2 | 	cmps	_var03, #128 wc
1de54     01 02 A6 F6 | 	negnc	_var02, #1
1de58     7F 00 06 F6 | 	mov	_var01, #127
1de5c     01 01 02 F1 | 	add	_var01, _var02
1de60     97 1A 48 FB | 	callpa	#(@LR__2383-@LR__2382)>>2,fcache_load_ptr_
1de64                 | LR__2382
1de64                 | '   cursor[i]:=cursorcolor
1de64     09 05 02 F6 | 	mov	_var03, arg01
1de68     01 00 00 FF 
1de6c     36 E4 05 F1 | 	add	objptr, ##566
1de70     F2 04 02 F1 | 	add	_var03, objptr
1de74     0A 00 00 FF 
1de78     8C E4 05 F1 | 	add	objptr, ##5260
1de7c     F2 06 02 FB | 	rdlong	_var04, objptr
1de80     0B 00 00 FF 
1de84     C2 E4 85 F1 | 	sub	objptr, ##5826
1de88     02 07 42 FC | 	wrbyte	_var04, _var03
1de8c     01 13 02 F1 | 	add	arg01, _var02
1de90     00 13 0A F2 | 	cmp	arg01, _var01 wz
1de94     CC FF 9F 5D |  if_ne	jmp	#LR__2382
1de98                 | LR__2383
1de98                 | _hg010b_spin2_setcursorcolor_ret
1de98     2D 00 64 FD | 	ret
1de9c                 | 
1de9c                 | '   
1de9c                 | '   
1de9c                 | '   
1de9c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1de9c                 | _hg010b_spin2_setmode
1de9c     02 4A 05 F6 | 	mov	COUNT_, #2
1dea0     A8 00 A0 FD | 	call	#pushregs_
1dea4                 | ' 
1dea4                 | ' 
1dea4                 | ' dl_ptr:=@emptydl[0]
1dea4     01 00 00 FF 
1dea8     1D E4 05 F1 | 	add	objptr, ##541
1deac     F2 1A 02 F6 | 	mov	arg05, objptr
1deb0     FD E5 85 F1 | 	sub	objptr, #509
1deb4     F2 1A 62 FC | 	wrlong	arg05, objptr
1deb8                 | ' 
1deb8                 | ' if cog>0 
1deb8     10 E4 05 F1 | 	add	objptr, #16
1debc     F2 1A 02 FB | 	rdlong	arg05, objptr
1dec0     30 E4 85 F1 | 	sub	objptr, #48
1dec4     01 1A 56 F2 | 	cmps	arg05, #1 wc
1dec8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1dec8     01 12 06 36 |  if_ae	mov	arg01, #1
1decc     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1ded0                 | ' xres:=1024
1ded0     01 00 00 FF 
1ded4     26 E4 05 F1 | 	add	objptr, ##550
1ded8     02 00 80 FF 
1dedc     F2 00 68 FC | 	wrlong	##1024, objptr
1dee0                 | ' yres:=600
1dee0     04 E4 05 F1 | 	add	objptr, #4
1dee4     01 00 80 FF 
1dee8     F2 B0 68 FC | 	wrlong	##600, objptr
1deec                 | ' ppl:=(timings[3])
1deec     10 00 00 FF 
1def0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1def4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1def8     51 E5 85 F1 | 	sub	objptr, #337
1defc     F2 1A 62 FC | 	wrlong	arg05, objptr
1df00                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1df00     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1df04     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1df08     01 1E 66 F0 | 	shl	local01, #1
1df0c     80 E4 85 F1 | 	sub	objptr, #128
1df10     F2 1E 62 FC | 	wrlong	local01, objptr
1df14                 | ' cpl1:=cpl '' todo remove
1df14     04 E4 05 F1 | 	add	objptr, #4
1df18     F2 1E 62 FC | 	wrlong	local01, objptr
1df1c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1df1c     02 00 00 FF 
1df20     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1df24     41 E4 85 F1 | 	sub	objptr, #65
1df28     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1df2c                 | ' repeat i from 0 to 3
1df2c     00 20 06 F6 | 	mov	local02, #0
1df30     02 00 00 FF 
1df34     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1df38     08 E4 05 F1 | 	add	objptr, #8
1df3c     97 20 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1df40                 | LR__2390
1df40                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1df40     10 1F 02 F6 | 	mov	local01, local02
1df44     02 1E 66 F0 | 	shl	local01, #2
1df48     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1df4c     F2 1A 02 FB | 	rdlong	arg05, objptr
1df50     11 1A 66 F0 | 	shl	arg05, #17
1df54     0F 1F 02 FB | 	rdlong	local01, local01
1df58     0D 1F 02 F1 | 	add	local01, arg05
1df5c     80 40 38 FF 
1df60     00 1E 06 F1 | 	add	local01, ##1887502336
1df64     10 1B 02 F6 | 	mov	arg05, local02
1df68     02 1A 66 F0 | 	shl	arg05, #2
1df6c     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1df70     0D 1F 62 FC | 	wrlong	local01, arg05
1df74     01 20 06 F1 | 	add	local02, #1
1df78     04 20 56 F2 | 	cmps	local02, #4 wc
1df7c     C0 FF 9F CD |  if_b	jmp	#LR__2390
1df80                 | LR__2391
1df80     24 E4 85 F1 | 	sub	objptr, #36
1df84                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1df84     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1df88     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1df8c     14 1E 66 FC | 	wrlong	local01, #20
1df90                 | ' hubset(timings[10])
1df90     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1df94     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1df98     10 00 00 FF 
1df9c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1dfa0     00 12 62 FD | 	hubset	arg01
1dfa4                 | ' waitms(1)                                                   	' wait for stabilization
1dfa4     01 12 06 F6 | 	mov	arg01, #1
1dfa8     94 2B B0 FD | 	call	#__system___waitms
1dfac     10 00 00 FF 
1dfb0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1dfb4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1dfb8     61 E4 05 F1 | 	add	objptr, #97
1dfbc     F2 20 62 FC | 	wrlong	local02, objptr
1dfc0     10 1F 52 F6 | 	abs	local01, local02 wc
1dfc4     04 1E 46 F0 | 	shr	local01, #4
1dfc8     0F 1F 82 F6 | 	negc	local01, local01
1dfcc     9C E4 05 F1 | 	add	objptr, #156
1dfd0     F2 1E 62 FC | 	wrlong	local01, objptr
1dfd4     A4 E4 85 F1 | 	sub	objptr, #164
1dfd8     F2 20 02 FB | 	rdlong	local02, objptr
1dfdc     08 E4 05 F1 | 	add	objptr, #8
1dfe0     F2 1E 02 FB | 	rdlong	local01, objptr
1dfe4     0F 21 02 FD | 	qmul	local02, local01
1dfe8                 | ' lines:=timings[11]
1dfe8                 | ' t_lines:=lines/16
1dfe8                 | ' buflen:=cpl*lines						' framebuffer length in longs
1dfe8     29 E4 85 F1 | 	sub	objptr, #41
1dfec     19 1E C6 F9 | 	decod	local01, #25
1dff0     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1dff4     18 20 62 FD | 	getqx	local02
1dff8     F2 20 62 FC | 	wrlong	local02, objptr
1dffc     38 E4 85 F1 | 	sub	objptr, #56
1e000     02 20 66 F0 | 	shl	local02, #2
1e004     10 1F 82 F1 | 	sub	local01, local02
1e008     F2 1E 62 FC | 	wrlong	local01, objptr
1e00c     FD E4 05 F1 | 	add	objptr, #253
1e010     F2 20 02 FB | 	rdlong	local02, objptr
1e014     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e018     0D 21 02 FD | 	qmul	local02, arg05
1e01c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e01c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e01c     F9 E4 85 F1 | 	sub	objptr, #249
1e020                 | ' mode_ptr:=@timings						' set pointers to timings
1e020     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e024                 | ' graphmode:=1024+512+192+48							' det global variable
1e024                 | ' makedl(graphmode)							' make a DL for the mode
1e024     03 00 00 FF 
1e028     F0 12 06 F6 | 	mov	arg01, ##1776
1e02c     18 20 62 FD | 	getqx	local02
1e030     10 1F 82 F1 | 	sub	local01, local02
1e034     F2 1E 62 FC | 	wrlong	local01, objptr
1e038     14 E4 05 F1 | 	add	objptr, #20
1e03c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e040     79 E4 05 F1 | 	add	objptr, #121
1e044     03 00 80 FF 
1e048     F2 E0 69 FC | 	wrlong	##1776, objptr
1e04c     91 E4 85 F1 | 	sub	objptr, #145
1e050     10 00 00 FF 
1e054     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e058     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e05c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e05c     F2 1E 02 FB | 	rdlong	local01, objptr
1e060     DD E4 05 F1 | 	add	objptr, #221
1e064     F2 1E 62 FC | 	wrlong	local01, objptr
1e068                 | ' s_font_ptr:=font_ptr
1e068     D5 E4 85 F1 | 	sub	objptr, #213
1e06c     F2 1E 02 FB | 	rdlong	local01, objptr
1e070     D9 E4 05 F1 | 	add	objptr, #217
1e074     F2 1E 62 FC | 	wrlong	local01, objptr
1e078                 | ' s_lines:=lines
1e078     80 E4 85 F1 | 	sub	objptr, #128
1e07c     F2 1E 02 FB | 	rdlong	local01, objptr
1e080     84 E4 05 F1 | 	add	objptr, #132
1e084     F2 1E 62 FC | 	wrlong	local01, objptr
1e088                 | ' s_buflen:=buflen
1e088     AD E4 85 F1 | 	sub	objptr, #173
1e08c     F2 1E 02 FB | 	rdlong	local01, objptr
1e090     B5 E4 05 F1 | 	add	objptr, #181
1e094     F2 1E 62 FC | 	wrlong	local01, objptr
1e098                 | ' s_cpl:=cpl
1e098     94 E4 85 F1 | 	sub	objptr, #148
1e09c     F2 1E 02 FB | 	rdlong	local01, objptr
1e0a0     90 E4 05 F1 | 	add	objptr, #144
1e0a4     F2 1E 62 FC | 	wrlong	local01, objptr
1e0a8                 | ' s_cpl1:=cpl
1e0a8     90 E4 85 F1 | 	sub	objptr, #144
1e0ac     F2 1E 02 FB | 	rdlong	local01, objptr
1e0b0     98 E4 05 F1 | 	add	objptr, #152
1e0b4     F2 1E 62 FC | 	wrlong	local01, objptr
1e0b8                 | ' st_lines:=t_lines
1e0b8     0C E4 05 F1 | 	add	objptr, #12
1e0bc     F2 1E 02 FB | 	rdlong	local01, objptr
1e0c0     04 E4 05 F1 | 	add	objptr, #4
1e0c4     F2 1E 62 FC | 	wrlong	local01, objptr
1e0c8                 | ' ppl:=ppl/xzoom  
1e0c8     28 E4 85 F1 | 	sub	objptr, #40
1e0cc     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e0d0     2C E4 05 F1 | 	add	objptr, #44
1e0d4     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e0d8     05 E5 85 F1 | 	sub	objptr, #261
1e0dc     BA 00 A0 FD | 	call	#divide_
1e0e0     D9 E4 05 F1 | 	add	objptr, #217
1e0e4     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e0e8                 | ' s_ppl:=ppl
1e0e8     1C E4 05 F1 | 	add	objptr, #28
1e0ec     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e0f0     F5 E4 85 F1 | 	sub	objptr, #245
1e0f4                 | ' waitms(20)							' wait 
1e0f4     14 12 06 F6 | 	mov	arg01, #20
1e0f8     44 2A B0 FD | 	call	#__system___waitms
1e0fc                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e0fc     04 E4 05 F1 | 	add	objptr, #4
1e100     F2 12 02 FB | 	rdlong	arg01, objptr
1e104     04 E4 85 F1 | 	sub	objptr, #4
1e108     F2 16 02 FB | 	rdlong	arg03, objptr
1e10c     09 17 82 F1 | 	sub	arg03, arg01
1e110     20 14 06 F6 | 	mov	arg02, #32
1e114     00 18 06 F6 | 	mov	arg04, #0
1e118     01 1A 06 F6 | 	mov	arg05, #1
1e11c     0B 00 00 FF 
1e120     CC E4 05 F1 | 	add	objptr, ##5836
1e124     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e128     0B 00 00 FF 
1e12c     CC E4 85 F1 | 	sub	objptr, ##5836
1e130     A7 F0 03 F6 | 	mov	ptra, fp
1e134     B2 00 A0 FD | 	call	#popregs_
1e138                 | _hg010b_spin2_setmode_ret
1e138     2D 00 64 FD | 	ret
1e13c                 | 
1e13c                 | ' 
1e13c                 | ' '****************************************************************************************************************
1e13c                 | ' '                                                                                                             	*
1e13c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e13c                 | ' '                                                                                                             	*
1e13c                 | ' '****************************************************************************************************************
1e13c                 | ' 
1e13c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e13c                 | _hg010b_spin2_makedl
1e13c                 | ' 
1e13c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e13c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e13c                 | ' repeat i from 0 to 11                                                           ' clear DL
1e13c     00 00 06 F6 | 	mov	_var01, #0
1e140     ED E5 05 F1 | 	add	objptr, #493
1e144     97 0E 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1e148                 | LR__2400
1e148                 | '   displaylist[i]:=0 
1e148     00 03 02 F6 | 	mov	_var02, _var01
1e14c     02 02 66 F0 | 	shl	_var02, #2
1e150     F2 02 02 F1 | 	add	_var02, objptr
1e154     01 01 68 FC | 	wrlong	#0, _var02
1e158     01 00 06 F1 | 	add	_var01, #1
1e15c     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e160     E4 FF 9F CD |  if_b	jmp	#LR__2400
1e164                 | LR__2401
1e164                 | '                         ' 
1e164                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e164     8C E5 85 F1 | 	sub	objptr, #396
1e168     F2 02 02 FB | 	rdlong	_var02, objptr
1e16c     14 02 66 F0 | 	shl	_var02, #20
1e170     01 02 06 F1 | 	add	_var02, #1
1e174     04 E4 85 F1 | 	sub	objptr, #4
1e178     F2 00 02 FB | 	rdlong	_var01, objptr
1e17c     02 00 66 F0 | 	shl	_var01, #2
1e180     04 00 66 F0 | 	shl	_var01, #4
1e184     00 03 02 F1 | 	add	_var02, _var01
1e188     90 E5 05 F1 | 	add	objptr, #400
1e18c     F2 02 62 FC | 	wrlong	_var02, objptr
1e190     ED E5 85 F1 | 	sub	objptr, #493
1e194                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e194     F2 02 02 FB | 	rdlong	_var02, objptr
1e198     04 02 66 F0 | 	shl	_var02, #4
1e19c     02 02 06 F1 | 	add	_var02, #2
1e1a0     F1 E5 05 F1 | 	add	objptr, #497
1e1a4     F2 02 62 FC | 	wrlong	_var02, objptr
1e1a8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e1a8     04 E4 85 F1 | 	sub	objptr, #4
1e1ac     F2 02 02 F6 | 	mov	_var02, objptr
1e1b0     CD E5 85 F1 | 	sub	objptr, #461
1e1b4     F2 02 62 FC | 	wrlong	_var02, objptr
1e1b8     20 E4 85 F1 | 	sub	objptr, #32
1e1bc                 | _hg010b_spin2_makedl_ret
1e1bc     2D 00 64 FD | 	ret
1e1c0                 | 
1e1c0                 | ' 
1e1c0                 | ' 
1e1c0                 | ' '****************************************************************************************************************
1e1c0                 | ' '                                                                        					*
1e1c0                 | ' '  Graphic primitives                                                    					*
1e1c0                 | ' '                                                                        					*
1e1c0                 | ' '****************************************************************************************************************
1e1c0                 | ' 
1e1c0                 | ' pub setspriteptr(num,ptr)
1e1c0                 | _hg010b_spin2_setspriteptr
1e1c0                 | ' long[@spr1ptr+12*num]:=ptr
1e1c0     11 E5 05 F1 | 	add	objptr, #273
1e1c4     F2 00 02 F6 | 	mov	_var01, objptr
1e1c8     09 03 02 F6 | 	mov	_var02, arg01
1e1cc     01 02 66 F0 | 	shl	_var02, #1
1e1d0     09 03 02 F1 | 	add	_var02, arg01
1e1d4     02 02 66 F0 | 	shl	_var02, #2
1e1d8     01 01 02 F1 | 	add	_var01, _var02
1e1dc     00 15 62 FC | 	wrlong	arg02, _var01
1e1e0     11 E5 85 F1 | 	sub	objptr, #273
1e1e4                 | _hg010b_spin2_setspriteptr_ret
1e1e4     2D 00 64 FD | 	ret
1e1e8                 | 
1e1e8                 | ' 
1e1e8                 | ' pub setspritepos(num,x,y)
1e1e8                 | _hg010b_spin2_setspritepos
1e1e8                 | ' if y>601
1e1e8     01 00 00 FF 
1e1ec     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e1f0                 | '   y:=601
1e1f0     01 00 00 3F 
1e1f4     59 16 06 36 |  if_ae	mov	arg03, ##601
1e1f8                 | ' if x>1024
1e1f8     02 00 00 FF 
1e1fc     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e200                 | '   x:=1024
1e200     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e204                 | ' word[@spr1ptr+12*num+4]:=x
1e204     11 E5 05 F1 | 	add	objptr, #273
1e208     F2 00 02 F6 | 	mov	_var01, objptr
1e20c     09 03 02 F6 | 	mov	_var02, arg01
1e210     01 02 66 F0 | 	shl	_var02, #1
1e214     09 03 02 F1 | 	add	_var02, arg01
1e218     02 02 66 F0 | 	shl	_var02, #2
1e21c     01 01 02 F1 | 	add	_var01, _var02
1e220     04 00 06 F1 | 	add	_var01, #4
1e224     00 15 52 FC | 	wrword	arg02, _var01
1e228                 | ' word[@spr1ptr+12*num+6]:=y
1e228     F2 00 02 F6 | 	mov	_var01, objptr
1e22c     09 03 02 F6 | 	mov	_var02, arg01
1e230     01 02 66 F0 | 	shl	_var02, #1
1e234     09 03 02 F1 | 	add	_var02, arg01
1e238     02 02 66 F0 | 	shl	_var02, #2
1e23c     01 01 02 F1 | 	add	_var01, _var02
1e240     06 00 06 F1 | 	add	_var01, #6
1e244     00 17 52 FC | 	wrword	arg03, _var01
1e248     11 E5 85 F1 | 	sub	objptr, #273
1e24c                 | _hg010b_spin2_setspritepos_ret
1e24c     2D 00 64 FD | 	ret
1e250                 | 
1e250                 | ' 
1e250                 | ' pub setspritesize(num,w,h)
1e250                 | _hg010b_spin2_setspritesize
1e250                 | ' word[@spr1ptr+12*num+8]:=w
1e250     11 E5 05 F1 | 	add	objptr, #273
1e254     F2 00 02 F6 | 	mov	_var01, objptr
1e258     09 03 02 F6 | 	mov	_var02, arg01
1e25c     01 02 66 F0 | 	shl	_var02, #1
1e260     09 03 02 F1 | 	add	_var02, arg01
1e264     02 02 66 F0 | 	shl	_var02, #2
1e268     01 01 02 F1 | 	add	_var01, _var02
1e26c     08 00 06 F1 | 	add	_var01, #8
1e270     00 15 52 FC | 	wrword	arg02, _var01
1e274                 | ' word[@spr1ptr+12*num+10]:=h
1e274     F2 00 02 F6 | 	mov	_var01, objptr
1e278     09 03 02 F6 | 	mov	_var02, arg01
1e27c     01 02 66 F0 | 	shl	_var02, #1
1e280     09 03 02 F1 | 	add	_var02, arg01
1e284     02 02 66 F0 | 	shl	_var02, #2
1e288     01 01 02 F1 | 	add	_var01, _var02
1e28c     0A 00 06 F1 | 	add	_var01, #10
1e290     00 17 52 FC | 	wrword	arg03, _var01
1e294     11 E5 85 F1 | 	sub	objptr, #273
1e298                 | _hg010b_spin2_setspritesize_ret
1e298     2D 00 64 FD | 	ret
1e29c                 | 
1e29c                 | ' 
1e29c                 | ' 
1e29c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e29c                 | ' 
1e29c                 | ' 
1e29c                 | ' pub putpixel(x,y,c)
1e29c                 | _hg010b_spin2_putpixel
1e29c     04 4A 05 F6 | 	mov	COUNT_, #4
1e2a0     A8 00 A0 FD | 	call	#pushregs_
1e2a4     09 1F 02 F6 | 	mov	local01, arg01
1e2a8                 | ' 
1e2a8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e2a8     00 20 06 F6 | 	mov	local02, #0
1e2ac     00 1E 56 F2 | 	cmps	local01, #0 wc
1e2b0     01 20 66 36 |  if_ae	neg	local02, #1
1e2b4     E9 E4 05 F1 | 	add	objptr, #233
1e2b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e2bc     02 1A 66 F0 | 	shl	arg05, #2
1e2c0     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e2c4     11 23 A2 F1 | 	subx	local03, local03
1e2c8     11 21 02 F5 | 	and	local02, local03
1e2cc     00 22 06 F6 | 	mov	local03, #0
1e2d0     00 14 56 F2 | 	cmps	arg02, #0 wc
1e2d4     01 22 66 36 |  if_ae	neg	local03, #1
1e2d8     11 21 02 F5 | 	and	local02, local03
1e2dc     04 E4 85 F1 | 	sub	objptr, #4
1e2e0     F2 22 02 FB | 	rdlong	local03, objptr
1e2e4     E5 E4 85 F1 | 	sub	objptr, #229
1e2e8     11 15 52 F2 | 	cmps	arg02, local03 wc
1e2ec     12 25 A2 F1 | 	subx	local04, local04
1e2f0     12 21 CA F7 | 	test	local02, local04 wz
1e2f4     48 00 90 AD |  if_e	jmp	#LR__2410
1e2f8     DD E4 05 F1 | 	add	objptr, #221
1e2fc     F2 12 02 FB | 	rdlong	arg01, objptr
1e300     14 E4 05 F1 | 	add	objptr, #20
1e304     F2 24 02 FB | 	rdlong	local04, objptr
1e308     02 24 66 F0 | 	shl	local04, #2
1e30c     0A 25 02 FD | 	qmul	local04, arg02
1e310                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e310     0B 15 02 F6 | 	mov	arg02, arg03
1e314     01 16 06 F6 | 	mov	arg03, #1
1e318     00 18 06 F6 | 	mov	arg04, #0
1e31c     01 1A 06 F6 | 	mov	arg05, #1
1e320     0A 00 00 FF 
1e324     DB E5 05 F1 | 	add	objptr, ##5595
1e328     18 24 62 FD | 	getqx	local04
1e32c     0F 25 02 F1 | 	add	local04, local01
1e330     12 13 02 F1 | 	add	arg01, local04
1e334     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e338     0B 00 00 FF 
1e33c     CC E4 85 F1 | 	sub	objptr, ##5836
1e340                 | LR__2410
1e340     A7 F0 03 F6 | 	mov	ptra, fp
1e344     B2 00 A0 FD | 	call	#popregs_
1e348                 | _hg010b_spin2_putpixel_ret
1e348     2D 00 64 FD | 	ret
1e34c                 | 
1e34c                 | ' 
1e34c                 | ' pub putpixel2(x,y,c)
1e34c                 | _hg010b_spin2_putpixel2
1e34c     02 4A 05 F6 | 	mov	COUNT_, #2
1e350     A8 00 A0 FD | 	call	#pushregs_
1e354     DD E4 05 F1 | 	add	objptr, #221
1e358     F2 1E 02 FB | 	rdlong	local01, objptr
1e35c     14 E4 05 F1 | 	add	objptr, #20
1e360     F2 1A 02 FB | 	rdlong	arg05, objptr
1e364     02 1A 66 F0 | 	shl	arg05, #2
1e368     0A 1B 02 FD | 	qmul	arg05, arg02
1e36c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e36c     0B 15 02 F6 | 	mov	arg02, arg03
1e370     01 16 06 F6 | 	mov	arg03, #1
1e374     00 18 06 F6 | 	mov	arg04, #0
1e378     01 1A 06 F6 | 	mov	arg05, #1
1e37c     0A 00 00 FF 
1e380     DB E5 05 F1 | 	add	objptr, ##5595
1e384     18 20 62 FD | 	getqx	local02
1e388     09 21 02 F1 | 	add	local02, arg01
1e38c     10 1F 02 F1 | 	add	local01, local02
1e390     0F 13 02 F6 | 	mov	arg01, local01
1e394     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e398     0B 00 00 FF 
1e39c     CC E4 85 F1 | 	sub	objptr, ##5836
1e3a0     A7 F0 03 F6 | 	mov	ptra, fp
1e3a4     B2 00 A0 FD | 	call	#popregs_
1e3a8                 | _hg010b_spin2_putpixel2_ret
1e3a8     2D 00 64 FD | 	ret
1e3ac                 | 
1e3ac                 | ' 
1e3ac                 | ' pub getpixel2(x,y): c 
1e3ac                 | _hg010b_spin2_getpixel2
1e3ac     02 4A 05 F6 | 	mov	COUNT_, #2
1e3b0     A8 00 A0 FD | 	call	#pushregs_
1e3b4     0C F0 07 F1 | 	add	ptra, #12
1e3b8     04 4E 05 F1 | 	add	fp, #4
1e3bc     A7 12 62 FC | 	wrlong	arg01, fp
1e3c0     04 4E 05 F1 | 	add	fp, #4
1e3c4     A7 14 62 FC | 	wrlong	arg02, fp
1e3c8     08 4E 85 F1 | 	sub	fp, #8
1e3cc     A7 00 68 FC | 	wrlong	#0, fp
1e3d0     A7 12 02 F6 | 	mov	arg01, fp
1e3d4     DD E4 05 F1 | 	add	objptr, #221
1e3d8     F2 14 02 FB | 	rdlong	arg02, objptr
1e3dc     14 E4 05 F1 | 	add	objptr, #20
1e3e0     F2 16 02 FB | 	rdlong	arg03, objptr
1e3e4     02 16 66 F0 | 	shl	arg03, #2
1e3e8     08 4E 05 F1 | 	add	fp, #8
1e3ec     A7 FA 01 FB | 	rdlong	result1, fp
1e3f0     FD 16 02 FD | 	qmul	arg03, result1
1e3f4                 | ' 
1e3f4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e3f4     04 4E 85 F1 | 	sub	fp, #4
1e3f8     A7 1E 02 FB | 	rdlong	local01, fp
1e3fc     04 4E 85 F1 | 	sub	fp, #4
1e400     01 16 06 F6 | 	mov	arg03, #1
1e404     0A 00 00 FF 
1e408     DB E5 05 F1 | 	add	objptr, ##5595
1e40c     18 20 62 FD | 	getqx	local02
1e410     0F 21 02 F1 | 	add	local02, local01
1e414     10 15 02 F1 | 	add	arg02, local02
1e418     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e41c     0B 00 00 FF 
1e420     CC E4 85 F1 | 	sub	objptr, ##5836
1e424                 | ' return c
1e424     A7 FA 01 FB | 	rdlong	result1, fp
1e428     A7 F0 03 F6 | 	mov	ptra, fp
1e42c     B2 00 A0 FD | 	call	#popregs_
1e430                 | _hg010b_spin2_getpixel2_ret
1e430     2D 00 64 FD | 	ret
1e434                 | 
1e434                 | '   
1e434                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e434                 | ' 
1e434                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e434                 | _hg010b_spin2_fastline
1e434     02 4A 05 F6 | 	mov	COUNT_, #2
1e438     A8 00 A0 FD | 	call	#pushregs_
1e43c     09 1F 02 F6 | 	mov	local01, arg01
1e440     0A 21 02 F6 | 	mov	local02, arg02
1e444                 | ' 
1e444                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e444     00 16 56 F2 | 	cmps	arg03, #0 wc
1e448     F4 00 90 CD |  if_b	jmp	#LR__2420
1e44c     01 00 00 FF 
1e450     2A E4 05 F1 | 	add	objptr, ##554
1e454     F2 1A 02 FB | 	rdlong	arg05, objptr
1e458     01 00 00 FF 
1e45c     2A E4 85 F1 | 	sub	objptr, ##554
1e460     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e464     D8 00 90 3D |  if_ae	jmp	#LR__2420
1e468     00 1E 56 F2 | 	cmps	local01, #0 wc
1e46c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e470     CC 00 90 CD |  if_b	jmp	#LR__2420
1e474     01 00 00 FF 
1e478     26 E4 05 F1 | 	add	objptr, ##550
1e47c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e480     01 00 00 FF 
1e484     26 E4 85 F1 | 	sub	objptr, ##550
1e488     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e48c     01 00 00 1F 
1e490     26 E4 05 11 |  if_a	add	objptr, ##550
1e494     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e498     01 00 00 1F 
1e49c     26 E4 85 11 |  if_a	sub	objptr, ##550
1e4a0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e4a4                 | '   return
1e4a4     98 00 90 1D |  if_a	jmp	#LR__2420
1e4a8     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e4ac     0F 1B 02 16 |  if_a	mov	arg05, local01
1e4b0     10 1F 02 16 |  if_a	mov	local01, local02
1e4b4     0D 21 02 16 |  if_a	mov	local02, arg05
1e4b8     00 1E 56 F2 | 	cmps	local01, #0 wc
1e4bc     00 1E 06 C6 |  if_b	mov	local01, #0
1e4c0     01 00 00 FF 
1e4c4     26 E4 05 F1 | 	add	objptr, ##550
1e4c8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e4cc     01 00 00 FF 
1e4d0     26 E4 85 F1 | 	sub	objptr, ##550
1e4d4     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e4d8     01 00 00 3F 
1e4dc     26 E4 05 31 |  if_ae	add	objptr, ##550
1e4e0     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e4e4     01 00 00 3F 
1e4e8     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e4ec     DD E4 05 F1 | 	add	objptr, #221
1e4f0     F2 12 02 FB | 	rdlong	arg01, objptr
1e4f4     14 E4 05 F1 | 	add	objptr, #20
1e4f8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e4fc     02 1A 66 F0 | 	shl	arg05, #2
1e500     0B 1B 02 FD | 	qmul	arg05, arg03
1e504                 | ' if x1>x2
1e504                 | '   x1,x2:=x2,x1
1e504                 | ' if x1<0 
1e504                 | '   x1:=0
1e504                 | ' if x2>=xres
1e504                 | '   x2:=xres-1  
1e504     01 20 86 31 |  if_ae	sub	local02, #1
1e508                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e508     01 16 06 F6 | 	mov	arg03, #1
1e50c     10 17 02 F1 | 	add	arg03, local02
1e510     0F 17 82 F1 | 	sub	arg03, local01
1e514     0C 15 02 F6 | 	mov	arg02, arg04
1e518     00 18 06 F6 | 	mov	arg04, #0
1e51c     01 1A 06 F6 | 	mov	arg05, #1
1e520     0A 00 00 FF 
1e524     DB E5 05 F1 | 	add	objptr, ##5595
1e528     18 20 62 FD | 	getqx	local02
1e52c     0F 21 02 F1 | 	add	local02, local01
1e530     10 13 02 F1 | 	add	arg01, local02
1e534     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e538     0B 00 00 FF 
1e53c     CC E4 85 F1 | 	sub	objptr, ##5836
1e540                 | LR__2420
1e540     A7 F0 03 F6 | 	mov	ptra, fp
1e544     B2 00 A0 FD | 	call	#popregs_
1e548                 | _hg010b_spin2_fastline_ret
1e548     2D 00 64 FD | 	ret
1e54c                 | 
1e54c                 | ' 
1e54c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e54c                 | _hg010b_spin2_draw
1e54c     0E 4A 05 F6 | 	mov	COUNT_, #14
1e550     A8 00 A0 FD | 	call	#pushregs_
1e554     09 1F 02 F6 | 	mov	local01, arg01
1e558     0A 21 02 F6 | 	mov	local02, arg02
1e55c     0B 23 02 F6 | 	mov	local03, arg03
1e560     0C 25 02 F6 | 	mov	local04, arg04
1e564     0D 27 02 F6 | 	mov	local05, arg05
1e568                 | ' 
1e568                 | ' if (y1==y2)
1e568     12 21 0A F2 | 	cmp	local02, local04 wz
1e56c     18 00 90 5D |  if_ne	jmp	#LR__2430
1e570                 | '   fastline(x1,x2,y1,c)
1e570     0F 13 02 F6 | 	mov	arg01, local01
1e574     11 15 02 F6 | 	mov	arg02, local03
1e578     10 17 02 F6 | 	mov	arg03, local02
1e57c     13 19 02 F6 | 	mov	arg04, local05
1e580     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e584     F8 00 90 FD | 	jmp	#LR__2436
1e588                 | LR__2430
1e588                 | ' else  
1e588                 | '   x:=x1
1e588     0F 29 02 F6 | 	mov	local06, local01
1e58c                 | '   y:=y1
1e58c     10 2B 02 F6 | 	mov	local07, local02
1e590                 | ' 
1e590                 | '   if (x1<x2) 
1e590     11 1F 52 F2 | 	cmps	local01, local03 wc
1e594                 | '     xi:=1
1e594     01 2C 06 C6 |  if_b	mov	local08, #1
1e598                 | '     dx:=x2-x1
1e598     11 2F 02 C6 |  if_b	mov	local09, local03
1e59c     0F 2F 82 C1 |  if_b	sub	local09, local01
1e5a0                 | '   else
1e5a0                 | '     xi:=-1
1e5a0     01 2C 66 36 |  if_ae	neg	local08, #1
1e5a4                 | '     dx:=x1-x2
1e5a4     11 1F 82 31 |  if_ae	sub	local01, local03
1e5a8     0F 2F 02 36 |  if_ae	mov	local09, local01
1e5ac                 | '   
1e5ac                 | '   if (y1<y2) 
1e5ac     12 21 52 F2 | 	cmps	local02, local04 wc
1e5b0                 | '     yi:=1
1e5b0     01 30 06 C6 |  if_b	mov	local10, #1
1e5b4                 | '     dy:=y2-y1
1e5b4     12 33 02 C6 |  if_b	mov	local11, local04
1e5b8     10 33 82 C1 |  if_b	sub	local11, local02
1e5bc                 | '   else
1e5bc                 | '     yi:=-1
1e5bc     01 30 66 36 |  if_ae	neg	local10, #1
1e5c0                 | '     dy:=y1-y2
1e5c0     12 21 82 31 |  if_ae	sub	local02, local04
1e5c4     10 33 02 36 |  if_ae	mov	local11, local02
1e5c8                 | ' 
1e5c8                 | '   putpixel(x,y,c)
1e5c8     13 17 02 F6 | 	mov	arg03, local05
1e5cc     14 13 02 F6 | 	mov	arg01, local06
1e5d0     15 15 02 F6 | 	mov	arg02, local07
1e5d4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e5d8                 | ' 
1e5d8                 | '   if (dx>dy)
1e5d8     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e5dc     50 00 90 ED |  if_be	jmp	#LR__2432
1e5e0                 | '     ai:=(dy-dx)*2
1e5e0     19 35 02 F6 | 	mov	local12, local11
1e5e4     17 35 82 F1 | 	sub	local12, local09
1e5e8     01 34 66 F0 | 	shl	local12, #1
1e5ec                 | '     bi:=dy*2
1e5ec     01 32 66 F0 | 	shl	local11, #1
1e5f0     19 37 02 F6 | 	mov	local13, local11
1e5f4                 | '     d:= bi-dx
1e5f4     1B 39 02 F6 | 	mov	local14, local13
1e5f8     17 39 82 F1 | 	sub	local14, local09
1e5fc                 | '     repeat while (x<>x2) 
1e5fc                 | LR__2431
1e5fc     11 29 0A F2 | 	cmp	local06, local03 wz
1e600     7C 00 90 AD |  if_e	jmp	#LR__2435
1e604                 | '       if (d>=0) 
1e604     00 38 56 F2 | 	cmps	local14, #0 wc
1e608                 | '         x+=xi
1e608     16 29 02 31 |  if_ae	add	local06, local08
1e60c                 | '         y+=yi
1e60c     18 2B 02 31 |  if_ae	add	local07, local10
1e610                 | '         d+=ai
1e610     1A 39 02 31 |  if_ae	add	local14, local12
1e614                 | '       else
1e614                 | '         d+=bi
1e614     1B 39 02 C1 |  if_b	add	local14, local13
1e618                 | '         x+=xi
1e618     16 29 02 C1 |  if_b	add	local06, local08
1e61c                 | '       putpixel(x,y,c)
1e61c     14 13 02 F6 | 	mov	arg01, local06
1e620     15 15 02 F6 | 	mov	arg02, local07
1e624     13 17 02 F6 | 	mov	arg03, local05
1e628     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e62c     CC FF 9F FD | 	jmp	#LR__2431
1e630                 | LR__2432
1e630                 | '   else
1e630                 | '     ai:=(dx-dy)*2
1e630     17 35 02 F6 | 	mov	local12, local09
1e634     19 35 82 F1 | 	sub	local12, local11
1e638     01 34 66 F0 | 	shl	local12, #1
1e63c                 | '     bi:=dx*2
1e63c     01 2E 66 F0 | 	shl	local09, #1
1e640     17 37 02 F6 | 	mov	local13, local09
1e644                 | '     d:=bi-dy
1e644     1B 39 02 F6 | 	mov	local14, local13
1e648     19 39 82 F1 | 	sub	local14, local11
1e64c                 | '     repeat while (y<>y2)
1e64c                 | LR__2433
1e64c     12 2B 0A F2 | 	cmp	local07, local04 wz
1e650     2C 00 90 AD |  if_e	jmp	#LR__2434
1e654                 | '       if (d>=0)
1e654     00 38 56 F2 | 	cmps	local14, #0 wc
1e658                 | '         x+=xi
1e658     16 29 02 31 |  if_ae	add	local06, local08
1e65c                 | '         y+=yi
1e65c     18 2B 02 31 |  if_ae	add	local07, local10
1e660                 | '         d+=ai
1e660     1A 39 02 31 |  if_ae	add	local14, local12
1e664                 | '       else
1e664                 | '         d+=bi
1e664     1B 39 02 C1 |  if_b	add	local14, local13
1e668                 | '         y+=yi
1e668     18 2B 02 C1 |  if_b	add	local07, local10
1e66c                 | '       putpixel(x, y,c)
1e66c     14 13 02 F6 | 	mov	arg01, local06
1e670     15 15 02 F6 | 	mov	arg02, local07
1e674     13 17 02 F6 | 	mov	arg03, local05
1e678     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e67c     CC FF 9F FD | 	jmp	#LR__2433
1e680                 | LR__2434
1e680                 | LR__2435
1e680                 | LR__2436
1e680     A7 F0 03 F6 | 	mov	ptra, fp
1e684     B2 00 A0 FD | 	call	#popregs_
1e688                 | _hg010b_spin2_draw_ret
1e688     2D 00 64 FD | 	ret
1e68c                 | 
1e68c                 | '  
1e68c                 | ' pub fillpush(val) 
1e68c                 | _hg010b_spin2_fillpush
1e68c                 | ' fillstack[fillptr]:=val
1e68c     0B 00 00 FF 
1e690     BA E4 05 F1 | 	add	objptr, ##5818
1e694     F2 00 02 FB | 	rdlong	_var01, objptr
1e698     02 00 66 F0 | 	shl	_var01, #2
1e69c     0A 00 00 FF 
1e6a0     00 E4 85 F1 | 	sub	objptr, ##5120
1e6a4     F2 00 02 F1 | 	add	_var01, objptr
1e6a8     00 13 62 FC | 	wrlong	arg01, _var01
1e6ac                 | ' fillptr+=1   
1e6ac     0A 00 00 FF 
1e6b0     00 E4 05 F1 | 	add	objptr, ##5120
1e6b4     F2 00 02 FB | 	rdlong	_var01, objptr
1e6b8     01 00 06 F1 | 	add	_var01, #1
1e6bc     F2 00 62 FC | 	wrlong	_var01, objptr
1e6c0     0B 00 00 FF 
1e6c4     BA E4 85 F1 | 	sub	objptr, ##5818
1e6c8                 | _hg010b_spin2_fillpush_ret
1e6c8     2D 00 64 FD | 	ret
1e6cc                 | 
1e6cc                 | ' 
1e6cc                 | '     
1e6cc                 | ' pub fillpop() : val
1e6cc                 | _hg010b_spin2_fillpop
1e6cc                 | ' 
1e6cc                 | ' fillptr-=1
1e6cc     0B 00 00 FF 
1e6d0     BA E4 05 F1 | 	add	objptr, ##5818
1e6d4     F2 FA 01 FB | 	rdlong	result1, objptr
1e6d8     01 FA 85 F1 | 	sub	result1, #1
1e6dc     F2 FA 61 FC | 	wrlong	result1, objptr
1e6e0                 | ' if fillptr<0
1e6e0     0B 00 00 FF 
1e6e4     BA E4 85 F1 | 	sub	objptr, ##5818
1e6e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e6ec                 | '   fillptr:=0
1e6ec     0B 00 00 CF 
1e6f0     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e6f4     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e6f8     0B 00 00 CF 
1e6fc     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e700                 | '   val:=-12345
1e700     E7 FF 7F CF 
1e704     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e708     28 00 90 CD |  if_b	jmp	#LR__2440
1e70c                 | ' else 
1e70c                 | '   val:=fillstack[fillptr]
1e70c     0B 00 00 FF 
1e710     BA E4 05 F1 | 	add	objptr, ##5818
1e714     F2 00 02 FB | 	rdlong	_var01, objptr
1e718     02 00 66 F0 | 	shl	_var01, #2
1e71c     0A 00 00 FF 
1e720     00 E4 85 F1 | 	sub	objptr, ##5120
1e724     F2 00 02 F1 | 	add	_var01, objptr
1e728     00 01 02 FB | 	rdlong	_var01, _var01
1e72c     01 00 00 FF 
1e730     BA E4 85 F1 | 	sub	objptr, ##698
1e734                 | LR__2440
1e734                 | ' return val
1e734     00 FB 01 F6 | 	mov	result1, _var01
1e738                 | _hg010b_spin2_fillpop_ret
1e738     2D 00 64 FD | 	ret
1e73c                 | 
1e73c                 | ' 
1e73c                 | '       
1e73c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e73c                 | _hg010b_spin2_fill
1e73c     0B 4A 05 F6 | 	mov	COUNT_, #11
1e740     A8 00 A0 FD | 	call	#pushregs_
1e744                 | ' 
1e744                 | ' newcolor:=newcolor & 255
1e744     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e748                 | ' oldcolor:=oldcolor & 255
1e748     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e74c                 | ' 
1e74c                 | ' if (oldcolor == newcolor) 
1e74c     0F 21 0A F2 | 	cmp	local02, local01 wz
1e750                 | '   return
1e750     70 02 90 AD |  if_e	jmp	#LR__2459
1e754                 | ' 
1e754                 | ' fillptr:=0
1e754     0B 00 00 FF 
1e758     BA E4 05 F1 | 	add	objptr, ##5818
1e75c     F2 00 68 FC | 	wrlong	#0, objptr
1e760                 | ' fillmax:=0
1e760     04 E4 05 F1 | 	add	objptr, #4
1e764     F2 00 68 FC | 	wrlong	#0, objptr
1e768     0B 00 00 FF 
1e76c     BE E4 85 F1 | 	sub	objptr, ##5822
1e770                 | ' fillpush(x)
1e770     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e774                 | ' fillpush(y)
1e774     0A 13 02 F6 | 	mov	arg01, arg02
1e778     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e77c                 | ' y:=fillpop()
1e77c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e780     FD 22 02 F6 | 	mov	local03, result1
1e784                 | ' x:=fillpop()
1e784     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e788     FD 24 02 F6 | 	mov	local04, result1
1e78c                 | ' 'pinhigh(38)
1e78c                 | ' repeat while (x>-1)       
1e78c                 | LR__2450
1e78c     00 24 56 F2 | 	cmps	local04, #0 wc
1e790     30 02 90 CD |  if_b	jmp	#LR__2458
1e794                 | '  ' pintoggle(39)
1e794                 | '   x1 := x
1e794     12 27 02 F6 | 	mov	local05, local04
1e798                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e798                 | LR__2451
1e798     00 28 06 F6 | 	mov	local06, #0
1e79c     00 2A 06 F6 | 	mov	local07, #0
1e7a0     00 26 56 F2 | 	cmps	local05, #0 wc
1e7a4     01 2A 66 36 |  if_ae	neg	local07, #1
1e7a8     00 2A 0E F2 | 	cmp	local07, #0 wz
1e7ac     00 28 26 56 |  if_ne	not	local06, #0
1e7b0     00 2C 06 F6 | 	mov	local08, #0
1e7b4     00 2E 06 F6 | 	mov	local09, #0
1e7b8     11 15 02 F6 | 	mov	arg02, local03
1e7bc     13 13 02 F6 | 	mov	arg01, local05
1e7c0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e7c4     10 FB 09 F2 | 	cmp	result1, local02 wz
1e7c8     00 2E 26 A6 |  if_e	not	local09, #0
1e7cc     00 2E 0E F2 | 	cmp	local09, #0 wz
1e7d0     00 2C 26 56 |  if_ne	not	local08, #0
1e7d4     16 29 CA F7 | 	test	local06, local08 wz
1e7d8                 | '     x1--
1e7d8     01 26 86 51 |  if_ne	sub	local05, #1
1e7dc     B8 FF 9F 5D |  if_ne	jmp	#LR__2451
1e7e0                 | '   x1++
1e7e0     01 26 06 F1 | 	add	local05, #1
1e7e4                 | '   spanabove := 0
1e7e4     00 30 06 F6 | 	mov	local10, #0
1e7e8                 | '   spanbelow := 0
1e7e8     00 32 06 F6 | 	mov	local11, #0
1e7ec                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1e7ec                 | LR__2452
1e7ec     00 28 06 F6 | 	mov	local06, #0
1e7f0     02 00 00 FF 
1e7f4     00 26 56 F2 | 	cmps	local05, ##1024 wc
1e7f8     00 28 26 C6 |  if_b	not	local06, #0
1e7fc     00 2C 06 F6 | 	mov	local08, #0
1e800     00 2E 06 F6 | 	mov	local09, #0
1e804     11 15 02 F6 | 	mov	arg02, local03
1e808     13 13 02 F6 | 	mov	arg01, local05
1e80c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e810     10 FB 09 F2 | 	cmp	result1, local02 wz
1e814     00 2E 26 A6 |  if_e	not	local09, #0
1e818     00 2E 0E F2 | 	cmp	local09, #0 wz
1e81c     00 2C 26 56 |  if_ne	not	local08, #0
1e820     16 29 CA F7 | 	test	local06, local08 wz
1e824     88 01 90 AD |  if_e	jmp	#LR__2457
1e828                 | '     putpixel2 (x1,y, newcolor & 255)
1e828     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1e82c     13 13 02 F6 | 	mov	arg01, local05
1e830     11 15 02 F6 | 	mov	arg02, local03
1e834     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1e838                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1e838     00 28 06 F6 | 	mov	local06, #0
1e83c     00 2A 06 F6 | 	mov	local07, #0
1e840     00 30 0E F2 | 	cmp	local10, #0 wz
1e844     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1e848     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1e84c     00 2A 0E F2 | 	cmp	local07, #0 wz
1e850     00 28 26 56 |  if_ne	not	local06, #0
1e854     00 2C 06 F6 | 	mov	local08, #0
1e858     00 2E 06 F6 | 	mov	local09, #0
1e85c     11 15 02 F6 | 	mov	arg02, local03
1e860     01 14 86 F1 | 	sub	arg02, #1
1e864     13 13 02 F6 | 	mov	arg01, local05
1e868     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e86c     10 FB 09 F2 | 	cmp	result1, local02 wz
1e870     00 2E 26 A6 |  if_e	not	local09, #0
1e874     00 2E 0E F2 | 	cmp	local09, #0 wz
1e878     00 2C 26 56 |  if_ne	not	local08, #0
1e87c     16 29 CA F7 | 	test	local06, local08 wz
1e880     1C 00 90 AD |  if_e	jmp	#LR__2453
1e884                 | '       fillpush(x1)
1e884     13 13 02 F6 | 	mov	arg01, local05
1e888     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1e88c                 | '       fillpush(y-1)
1e88c     11 13 02 F6 | 	mov	arg01, local03
1e890     01 12 86 F1 | 	sub	arg01, #1
1e894     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e898                 | '       spanabove := 1 
1e898     01 30 06 F6 | 	mov	local10, #1
1e89c     4C 00 90 FD | 	jmp	#LR__2454
1e8a0                 | LR__2453
1e8a0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1e8a0     00 28 06 F6 | 	mov	local06, #0
1e8a4     00 2A 06 F6 | 	mov	local07, #0
1e8a8     00 30 0E F2 | 	cmp	local10, #0 wz
1e8ac     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1e8b0     01 2A 66 16 |  if_a	neg	local07, #1
1e8b4     00 2A 0E F2 | 	cmp	local07, #0 wz
1e8b8     00 28 26 56 |  if_ne	not	local06, #0
1e8bc     00 2C 06 F6 | 	mov	local08, #0
1e8c0     00 2E 06 F6 | 	mov	local09, #0
1e8c4     11 15 02 F6 | 	mov	arg02, local03
1e8c8     01 14 86 F1 | 	sub	arg02, #1
1e8cc     13 13 02 F6 | 	mov	arg01, local05
1e8d0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e8d4     10 FB 09 F2 | 	cmp	result1, local02 wz
1e8d8     00 2E 26 56 |  if_ne	not	local09, #0
1e8dc     00 2E 0E F2 | 	cmp	local09, #0 wz
1e8e0     00 2C 26 56 |  if_ne	not	local08, #0
1e8e4     16 29 CA F7 | 	test	local06, local08 wz
1e8e8                 | '       spanabove := 0 
1e8e8     00 30 06 56 |  if_ne	mov	local10, #0
1e8ec                 | LR__2454
1e8ec                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1e8ec     00 28 06 F6 | 	mov	local06, #0
1e8f0     00 2A 06 F6 | 	mov	local07, #0
1e8f4     00 32 0E F2 | 	cmp	local11, #0 wz
1e8f8     01 00 00 AF 
1e8fc     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1e900     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1e904     00 2A 0E F2 | 	cmp	local07, #0 wz
1e908     00 28 26 56 |  if_ne	not	local06, #0
1e90c     00 2C 06 F6 | 	mov	local08, #0
1e910     00 2E 06 F6 | 	mov	local09, #0
1e914     11 15 02 F6 | 	mov	arg02, local03
1e918     01 14 06 F1 | 	add	arg02, #1
1e91c     13 13 02 F6 | 	mov	arg01, local05
1e920     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e924     10 FB 09 F2 | 	cmp	result1, local02 wz
1e928     00 2E 26 A6 |  if_e	not	local09, #0
1e92c     00 2E 0E F2 | 	cmp	local09, #0 wz
1e930     00 2C 26 56 |  if_ne	not	local08, #0
1e934     16 29 CA F7 | 	test	local06, local08 wz
1e938     1C 00 90 AD |  if_e	jmp	#LR__2455
1e93c                 | '       fillpush(x1)
1e93c     13 13 02 F6 | 	mov	arg01, local05
1e940     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e944                 | '       fillpush(y + 1)
1e944     11 13 02 F6 | 	mov	arg01, local03
1e948     01 12 06 F1 | 	add	arg01, #1
1e94c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1e950                 | '       spanBelow := 1
1e950     01 32 06 F6 | 	mov	local11, #1
1e954     50 00 90 FD | 	jmp	#LR__2456
1e958                 | LR__2455
1e958                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1e958     00 28 06 F6 | 	mov	local06, #0
1e95c     00 2A 06 F6 | 	mov	local07, #0
1e960     00 32 0E F2 | 	cmp	local11, #0 wz
1e964     01 00 00 5F 
1e968     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1e96c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1e970     00 2A 0E F2 | 	cmp	local07, #0 wz
1e974     00 28 26 56 |  if_ne	not	local06, #0
1e978     00 2C 06 F6 | 	mov	local08, #0
1e97c     00 2E 06 F6 | 	mov	local09, #0
1e980     11 15 02 F6 | 	mov	arg02, local03
1e984     01 14 06 F1 | 	add	arg02, #1
1e988     13 13 02 F6 | 	mov	arg01, local05
1e98c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e990     10 FB 09 F2 | 	cmp	result1, local02 wz
1e994     00 2E 26 56 |  if_ne	not	local09, #0
1e998     00 2E 0E F2 | 	cmp	local09, #0 wz
1e99c     00 2C 26 56 |  if_ne	not	local08, #0
1e9a0     16 29 CA F7 | 	test	local06, local08 wz
1e9a4                 | '       spanbelow := 0
1e9a4     00 32 06 56 |  if_ne	mov	local11, #0
1e9a8                 | LR__2456
1e9a8                 | '     x1++
1e9a8     01 26 06 F1 | 	add	local05, #1
1e9ac     3C FE 9F FD | 	jmp	#LR__2452
1e9b0                 | LR__2457
1e9b0                 | '   y:=fillpop()
1e9b0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1e9b4     FD 22 02 F6 | 	mov	local03, result1
1e9b8                 | '   x:=fillpop()
1e9b8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1e9bc     FD 24 02 F6 | 	mov	local04, result1
1e9c0     C8 FD 9F FD | 	jmp	#LR__2450
1e9c4                 | LR__2458
1e9c4                 | LR__2459
1e9c4     A7 F0 03 F6 | 	mov	ptra, fp
1e9c8     B2 00 A0 FD | 	call	#popregs_
1e9cc                 | _hg010b_spin2_fill_ret
1e9cc     2D 00 64 FD | 	ret
1e9d0                 | 
1e9d0                 | ' 'pinlow(38)    
1e9d0                 | ' 
1e9d0                 | ' '-- A filled circle -----------------------------------------------------
1e9d0                 | ' 
1e9d0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1e9d0                 | _hg010b_spin2_fcircle
1e9d0     08 4A 05 F6 | 	mov	COUNT_, #8
1e9d4     A8 00 A0 FD | 	call	#pushregs_
1e9d8     0B 1F 02 F6 | 	mov	local01, arg03
1e9dc     FF FF 7F FF 
1e9e0     FE 1F 06 FD | 	qmul	local01, ##-2
1e9e4     09 21 02 F6 | 	mov	local02, arg01
1e9e8     0A 23 02 F6 | 	mov	local03, arg02
1e9ec     0C 25 02 F6 | 	mov	local04, arg04
1e9f0                 | ' 
1e9f0                 | ' d:=5-4*r
1e9f0     0F 19 02 F6 | 	mov	arg04, local01
1e9f4     02 18 66 F0 | 	shl	arg04, #2
1e9f8     05 26 06 F6 | 	mov	local05, #5
1e9fc     0C 27 82 F1 | 	sub	local05, arg04
1ea00                 | ' x:=0
1ea00     00 28 06 F6 | 	mov	local06, #0
1ea04                 | ' y:=r
1ea04                 | ' da:=(-2*r+5)*4
1ea04                 | ' db:=3*4
1ea04     0C 2A 06 F6 | 	mov	local07, #12
1ea08                 | ' repeat while (x<=y) 
1ea08     18 2C 62 FD | 	getqx	local08
1ea0c     05 2C 06 F1 | 	add	local08, #5
1ea10     02 2C 66 F0 | 	shl	local08, #2
1ea14                 | LR__2460
1ea14     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ea18     B4 00 90 1D |  if_a	jmp	#LR__2462
1ea1c                 | '   fastline(x0-x,x0+x,y0-y,c)
1ea1c     10 13 02 F6 | 	mov	arg01, local02
1ea20     14 13 82 F1 | 	sub	arg01, local06
1ea24     10 15 02 F6 | 	mov	arg02, local02
1ea28     14 15 02 F1 | 	add	arg02, local06
1ea2c     11 17 02 F6 | 	mov	arg03, local03
1ea30     0F 17 82 F1 | 	sub	arg03, local01
1ea34     12 19 02 F6 | 	mov	arg04, local04
1ea38     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea3c                 | '   fastline(x0-x,x0+x,y0+y,c)
1ea3c     10 13 02 F6 | 	mov	arg01, local02
1ea40     14 13 82 F1 | 	sub	arg01, local06
1ea44     10 15 02 F6 | 	mov	arg02, local02
1ea48     14 15 02 F1 | 	add	arg02, local06
1ea4c     11 17 02 F6 | 	mov	arg03, local03
1ea50     0F 17 02 F1 | 	add	arg03, local01
1ea54     12 19 02 F6 | 	mov	arg04, local04
1ea58     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea5c                 | '   fastline(x0-y,x0+y,y0-x,c)
1ea5c     10 13 02 F6 | 	mov	arg01, local02
1ea60     0F 13 82 F1 | 	sub	arg01, local01
1ea64     10 15 02 F6 | 	mov	arg02, local02
1ea68     0F 15 02 F1 | 	add	arg02, local01
1ea6c     11 17 02 F6 | 	mov	arg03, local03
1ea70     14 17 82 F1 | 	sub	arg03, local06
1ea74     12 19 02 F6 | 	mov	arg04, local04
1ea78     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea7c                 | '   fastline(x0-y,x0+y,y0+x,c)
1ea7c     10 13 02 F6 | 	mov	arg01, local02
1ea80     0F 13 82 F1 | 	sub	arg01, local01
1ea84     10 15 02 F6 | 	mov	arg02, local02
1ea88     0F 15 02 F1 | 	add	arg02, local01
1ea8c     11 17 02 F6 | 	mov	arg03, local03
1ea90     14 17 02 F1 | 	add	arg03, local06
1ea94     12 19 02 F6 | 	mov	arg04, local04
1ea98     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea9c                 | '   if d>0 
1ea9c     01 26 56 F2 | 	cmps	local05, #1 wc
1eaa0     18 00 90 CD |  if_b	jmp	#LR__2461
1eaa4                 | '     d+=da
1eaa4     16 27 02 F1 | 	add	local05, local08
1eaa8                 | '     y-=1
1eaa8     01 1E 86 F1 | 	sub	local01, #1
1eaac                 | '     x+=1
1eaac     01 28 06 F1 | 	add	local06, #1
1eab0                 | '     da+=4*4
1eab0     10 2C 06 F1 | 	add	local08, #16
1eab4                 | '     db+=2*4
1eab4     08 2A 06 F1 | 	add	local07, #8
1eab8     58 FF 9F FD | 	jmp	#LR__2460
1eabc                 | LR__2461
1eabc                 | '   else
1eabc                 | '     d+=db
1eabc     15 27 02 F1 | 	add	local05, local07
1eac0                 | '     x+=1
1eac0     01 28 06 F1 | 	add	local06, #1
1eac4                 | '     da+=2*4
1eac4     08 2C 06 F1 | 	add	local08, #8
1eac8                 | '     db+=2*4
1eac8     08 2A 06 F1 | 	add	local07, #8
1eacc     44 FF 9F FD | 	jmp	#LR__2460
1ead0                 | LR__2462
1ead0     A7 F0 03 F6 | 	mov	ptra, fp
1ead4     B2 00 A0 FD | 	call	#popregs_
1ead8                 | _hg010b_spin2_fcircle_ret
1ead8     2D 00 64 FD | 	ret
1eadc                 | 
1eadc                 | '  
1eadc                 | ' '-- A circle ------------------------------------------------------------ 
1eadc                 | '  
1eadc                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1eadc                 | _hg010b_spin2_circle
1eadc     08 4A 05 F6 | 	mov	COUNT_, #8
1eae0     A8 00 A0 FD | 	call	#pushregs_
1eae4     0B 1F 02 F6 | 	mov	local01, arg03
1eae8     FF FF 7F FF 
1eaec     FE 1F 06 FD | 	qmul	local01, ##-2
1eaf0     09 21 02 F6 | 	mov	local02, arg01
1eaf4     0A 23 02 F6 | 	mov	local03, arg02
1eaf8     0C 25 02 F6 | 	mov	local04, arg04
1eafc                 | ' 
1eafc                 | '  
1eafc                 | ' d:=5-4*r
1eafc     0F 19 02 F6 | 	mov	arg04, local01
1eb00     02 18 66 F0 | 	shl	arg04, #2
1eb04     05 26 06 F6 | 	mov	local05, #5
1eb08     0C 27 82 F1 | 	sub	local05, arg04
1eb0c                 | ' x:=0
1eb0c     00 28 06 F6 | 	mov	local06, #0
1eb10                 | ' y:=r
1eb10                 | ' da:=(-2*r+5)*4
1eb10                 | ' db:=3*4
1eb10     0C 2A 06 F6 | 	mov	local07, #12
1eb14                 | ' repeat while (x<=y) 
1eb14     18 2C 62 FD | 	getqx	local08
1eb18     05 2C 06 F1 | 	add	local08, #5
1eb1c     02 2C 66 F0 | 	shl	local08, #2
1eb20                 | LR__2470
1eb20     0F 29 5A F2 | 	cmps	local06, local01 wcz
1eb24     F4 00 90 1D |  if_a	jmp	#LR__2472
1eb28                 | '   putpixel(x0-x,y0-y,c)
1eb28     10 13 02 F6 | 	mov	arg01, local02
1eb2c     14 13 82 F1 | 	sub	arg01, local06
1eb30     11 15 02 F6 | 	mov	arg02, local03
1eb34     0F 15 82 F1 | 	sub	arg02, local01
1eb38     12 17 02 F6 | 	mov	arg03, local04
1eb3c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb40                 | '   putpixel(x0-x,y0+y,c)
1eb40     10 13 02 F6 | 	mov	arg01, local02
1eb44     14 13 82 F1 | 	sub	arg01, local06
1eb48     11 15 02 F6 | 	mov	arg02, local03
1eb4c     0F 15 02 F1 | 	add	arg02, local01
1eb50     12 17 02 F6 | 	mov	arg03, local04
1eb54     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb58                 | '   putpixel(x0+x,y0-y,c)
1eb58     10 13 02 F6 | 	mov	arg01, local02
1eb5c     14 13 02 F1 | 	add	arg01, local06
1eb60     11 15 02 F6 | 	mov	arg02, local03
1eb64     0F 15 82 F1 | 	sub	arg02, local01
1eb68     12 17 02 F6 | 	mov	arg03, local04
1eb6c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb70                 | '   putpixel(x0+x,y0+y,c)
1eb70     10 13 02 F6 | 	mov	arg01, local02
1eb74     14 13 02 F1 | 	add	arg01, local06
1eb78     11 15 02 F6 | 	mov	arg02, local03
1eb7c     0F 15 02 F1 | 	add	arg02, local01
1eb80     12 17 02 F6 | 	mov	arg03, local04
1eb84     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb88                 | '   putpixel(x0-y,y0-x,c)
1eb88     10 13 02 F6 | 	mov	arg01, local02
1eb8c     0F 13 82 F1 | 	sub	arg01, local01
1eb90     11 15 02 F6 | 	mov	arg02, local03
1eb94     14 15 82 F1 | 	sub	arg02, local06
1eb98     12 17 02 F6 | 	mov	arg03, local04
1eb9c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eba0                 | '   putpixel(x0-y,y0+x,c)
1eba0     10 13 02 F6 | 	mov	arg01, local02
1eba4     0F 13 82 F1 | 	sub	arg01, local01
1eba8     11 15 02 F6 | 	mov	arg02, local03
1ebac     14 15 02 F1 | 	add	arg02, local06
1ebb0     12 17 02 F6 | 	mov	arg03, local04
1ebb4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebb8                 | '   putpixel(x0+y,y0-x,c)
1ebb8     10 13 02 F6 | 	mov	arg01, local02
1ebbc     0F 13 02 F1 | 	add	arg01, local01
1ebc0     11 15 02 F6 | 	mov	arg02, local03
1ebc4     14 15 82 F1 | 	sub	arg02, local06
1ebc8     12 17 02 F6 | 	mov	arg03, local04
1ebcc     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebd0                 | '   putpixel(x0+y,y0+x,c)
1ebd0     10 13 02 F6 | 	mov	arg01, local02
1ebd4     0F 13 02 F1 | 	add	arg01, local01
1ebd8     11 15 02 F6 | 	mov	arg02, local03
1ebdc     14 15 02 F1 | 	add	arg02, local06
1ebe0     12 17 02 F6 | 	mov	arg03, local04
1ebe4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebe8                 | '   if d>0 
1ebe8     01 26 56 F2 | 	cmps	local05, #1 wc
1ebec     18 00 90 CD |  if_b	jmp	#LR__2471
1ebf0                 | '     d+=da
1ebf0     16 27 02 F1 | 	add	local05, local08
1ebf4                 | '     y-=1
1ebf4     01 1E 86 F1 | 	sub	local01, #1
1ebf8                 | '     x+=1
1ebf8     01 28 06 F1 | 	add	local06, #1
1ebfc                 | '     da+=4*4
1ebfc     10 2C 06 F1 | 	add	local08, #16
1ec00                 | '     db+=2*4
1ec00     08 2A 06 F1 | 	add	local07, #8
1ec04     18 FF 9F FD | 	jmp	#LR__2470
1ec08                 | LR__2471
1ec08                 | '   else
1ec08                 | '     d+=db
1ec08     15 27 02 F1 | 	add	local05, local07
1ec0c                 | '     x+=1
1ec0c     01 28 06 F1 | 	add	local06, #1
1ec10                 | '     da+=2*4
1ec10     08 2C 06 F1 | 	add	local08, #8
1ec14                 | '     db+=2*4
1ec14     08 2A 06 F1 | 	add	local07, #8
1ec18     04 FF 9F FD | 	jmp	#LR__2470
1ec1c                 | LR__2472
1ec1c     A7 F0 03 F6 | 	mov	ptra, fp
1ec20     B2 00 A0 FD | 	call	#popregs_
1ec24                 | _hg010b_spin2_circle_ret
1ec24     2D 00 64 FD | 	ret
1ec28                 | 
1ec28                 | '     
1ec28                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ec28                 | ' 
1ec28                 | ' pub frame(x1,y1,x2,y2,c)
1ec28                 | _hg010b_spin2_frame
1ec28     05 4A 05 F6 | 	mov	COUNT_, #5
1ec2c     A8 00 A0 FD | 	call	#pushregs_
1ec30     09 1F 02 F6 | 	mov	local01, arg01
1ec34     0A 21 02 F6 | 	mov	local02, arg02
1ec38     0B 23 02 F6 | 	mov	local03, arg03
1ec3c     0C 25 02 F6 | 	mov	local04, arg04
1ec40     0D 27 02 F6 | 	mov	local05, arg05
1ec44                 | ' 
1ec44                 | ' fastline(x1,x2,y1,c)
1ec44     0F 13 02 F6 | 	mov	arg01, local01
1ec48     11 15 02 F6 | 	mov	arg02, local03
1ec4c     10 17 02 F6 | 	mov	arg03, local02
1ec50     13 19 02 F6 | 	mov	arg04, local05
1ec54     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ec58                 | ' fastline(x1,x2,y2,c)
1ec58     0F 13 02 F6 | 	mov	arg01, local01
1ec5c     11 15 02 F6 | 	mov	arg02, local03
1ec60     12 17 02 F6 | 	mov	arg03, local04
1ec64     13 19 02 F6 | 	mov	arg04, local05
1ec68     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ec6c                 | ' line(x1,y1,x1,y2,c)
1ec6c     0F 13 02 F6 | 	mov	arg01, local01
1ec70     10 15 02 F6 | 	mov	arg02, local02
1ec74     0F 17 02 F6 | 	mov	arg03, local01
1ec78     12 19 02 F6 | 	mov	arg04, local04
1ec7c     13 1B 02 F6 | 	mov	arg05, local05
1ec80                 | ' draw(x1,y1,x2,y2,c)
1ec80     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ec84                 | ' line(x2,y1,x2,y2,c)
1ec84     11 13 02 F6 | 	mov	arg01, local03
1ec88     10 15 02 F6 | 	mov	arg02, local02
1ec8c     11 17 02 F6 | 	mov	arg03, local03
1ec90     12 19 02 F6 | 	mov	arg04, local04
1ec94     13 1B 02 F6 | 	mov	arg05, local05
1ec98                 | ' draw(x1,y1,x2,y2,c)
1ec98     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ec9c     A7 F0 03 F6 | 	mov	ptra, fp
1eca0     B2 00 A0 FD | 	call	#popregs_
1eca4                 | _hg010b_spin2_frame_ret
1eca4     2D 00 64 FD | 	ret
1eca8                 | 
1eca8                 | ' 
1eca8                 | ' '-- A box (a filled rectangle) ----------------------------------------
1eca8                 | ' 
1eca8                 | ' pub box(x1,y1,x2,y2,c) |yy
1eca8                 | _hg010b_spin2_box
1eca8     06 4A 05 F6 | 	mov	COUNT_, #6
1ecac     A8 00 A0 FD | 	call	#pushregs_
1ecb0     09 1F 02 F6 | 	mov	local01, arg01
1ecb4     0A 21 02 F6 | 	mov	local02, arg02
1ecb8     0B 23 02 F6 | 	mov	local03, arg03
1ecbc     0C 25 02 F6 | 	mov	local04, arg04
1ecc0     0D 27 02 F6 | 	mov	local05, arg05
1ecc4                 | ' 
1ecc4                 | ' repeat yy from y1 to y2
1ecc4     10 25 52 F2 | 	cmps	local04, local02 wc
1ecc8     01 28 86 F6 | 	negc	local06, #1
1eccc     14 25 02 F1 | 	add	local04, local06
1ecd0                 | LR__2480
1ecd0                 | '   fastline(x1,x2,yy,c)
1ecd0     0F 13 02 F6 | 	mov	arg01, local01
1ecd4     11 15 02 F6 | 	mov	arg02, local03
1ecd8     13 19 02 F6 | 	mov	arg04, local05
1ecdc     10 17 02 F6 | 	mov	arg03, local02
1ece0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ece4     14 21 02 F1 | 	add	local02, local06
1ece8     12 21 0A F2 | 	cmp	local02, local04 wz
1ecec     E0 FF 9F 5D |  if_ne	jmp	#LR__2480
1ecf0     A7 F0 03 F6 | 	mov	ptra, fp
1ecf4     B2 00 A0 FD | 	call	#popregs_
1ecf8                 | _hg010b_spin2_box_ret
1ecf8     2D 00 64 FD | 	ret
1ecfc                 | 
1ecfc                 | '       
1ecfc                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ecfc                 | _hg010b_spin2_putcharxycgf
1ecfc                 | ' 
1ecfc                 | '  
1ecfc                 | ' repeat yy from 0 to 15
1ecfc     00 00 06 F6 | 	mov	_var01, #0
1ed00     97 8C 48 FB | 	callpa	#(@LR__2492-@LR__2490)>>2,fcache_load_ptr_
1ed04                 | LR__2490
1ed04                 | ' 
1ed04                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ed04     95 E4 05 F1 | 	add	objptr, #149
1ed08     F2 02 02 FB | 	rdlong	_var02, objptr
1ed0c     0A 02 66 F0 | 	shl	_var02, #10
1ed10     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ed14     01 05 02 F1 | 	add	_var03, _var02
1ed18     0B 03 02 F6 | 	mov	_var02, arg03
1ed1c     04 02 66 F0 | 	shl	_var02, #4
1ed20     01 05 02 F1 | 	add	_var03, _var02
1ed24     00 05 02 F1 | 	add	_var03, _var01
1ed28     02 05 C2 FA | 	rdbyte	_var03, _var03
1ed2c                 | '   asm
1ed2c     00 04 0E F4 | 	testb	_var03, #0 wz
1ed30     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ed34     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ed38     01 04 0E F4 | 	testb	_var03, #1 wz
1ed3c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ed40     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ed44     02 04 0E F4 | 	testb	_var03, #2 wz
1ed48     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ed4c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ed50     03 04 0E F4 | 	testb	_var03, #3 wz
1ed54     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ed58     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ed5c     04 04 0E F4 | 	testb	_var03, #4 wz
1ed60     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ed64     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ed68     05 04 0E F4 | 	testb	_var03, #5 wz
1ed6c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ed70     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ed74     06 04 0E F4 | 	testb	_var03, #6 wz
1ed78     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ed7c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ed80     07 04 0E F4 | 	testb	_var03, #7 wz
1ed84     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ed88     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ed8c                 | '   
1ed8c                 | '   ccc[0]:=c1
1ed8c     99 E5 05 F1 | 	add	objptr, #409
1ed90     F2 06 62 FC | 	wrlong	_var04, objptr
1ed94                 | '   ccc[1]:=c2 
1ed94     04 E4 05 F1 | 	add	objptr, #4
1ed98     F2 08 62 FC | 	wrlong	_var05, objptr
1ed9c                 | '   long[mailbox0][2]:=8
1ed9c     49 E4 85 F1 | 	sub	objptr, #73
1eda0     F2 04 02 FB | 	rdlong	_var03, objptr
1eda4     08 04 06 F1 | 	add	_var03, #8
1eda8     02 11 68 FC | 	wrlong	#8, _var03
1edac                 | '   long[mailbox0][1]:=@ccc
1edac     45 E4 05 F1 | 	add	objptr, #69
1edb0     F2 04 02 F6 | 	mov	_var03, objptr
1edb4     45 E4 85 F1 | 	sub	objptr, #69
1edb8     F2 02 02 FB | 	rdlong	_var02, objptr
1edbc     04 02 06 F1 | 	add	_var02, #4
1edc0     01 05 62 FC | 	wrlong	_var03, _var02
1edc4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1edc4     0C E5 85 F1 | 	sub	objptr, #268
1edc8     F2 04 02 FB | 	rdlong	_var03, objptr
1edcc     0A 03 02 F6 | 	mov	_var02, arg02
1edd0     00 03 02 F1 | 	add	_var02, _var01
1edd4     0A 02 66 F0 | 	shl	_var02, #10
1edd8     09 0B 02 F6 | 	mov	_var06, arg01
1eddc     02 0A 66 F0 | 	shl	_var06, #2
1ede0     05 03 02 F1 | 	add	_var02, _var06
1ede4     01 05 02 F1 | 	add	_var03, _var02
1ede8     00 00 78 FF 
1edec     00 04 06 F1 | 	add	_var03, ##-268435456
1edf0     0C E5 05 F1 | 	add	objptr, #268
1edf4     F2 0A 02 FB | 	rdlong	_var06, objptr
1edf8     05 05 62 FC | 	wrlong	_var03, _var06
1edfc                 | '   repeat
1edfc                 | LR__2491
1edfc     F2 04 02 FB | 	rdlong	_var03, objptr
1ee00     02 03 02 FB | 	rdlong	_var02, _var03
1ee04     00 02 56 F2 | 	cmps	_var02, #0 wc
1ee08     F0 FF 9F CD |  if_b	jmp	#LR__2491
1ee0c     E9 E5 85 F1 | 	sub	objptr, #489
1ee10     01 00 06 F1 | 	add	_var01, #1
1ee14     10 00 56 F2 | 	cmps	_var01, #16 wc
1ee18     E8 FE 9F CD |  if_b	jmp	#LR__2490
1ee1c                 | LR__2492
1ee1c                 | _hg010b_spin2_putcharxycgf_ret
1ee1c     2D 00 64 FD | 	ret
1ee20                 | 
1ee20                 | ' 
1ee20                 | ' 
1ee20                 | ' '**********************************************************************r***
1ee20                 | ' '                                                                        *
1ee20                 | ' ' Font related functions                                                 *
1ee20                 | ' '                                                                        *
1ee20                 | ' '*************************************************************************
1ee20                 | ' 
1ee20                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ee20                 | ' 
1ee20                 | ' pub setfontfamily(afontnum)
1ee20                 | _hg010b_spin2_setfontfamily
1ee20                 | ' 
1ee20                 | ' font_family:=afontnum
1ee20     95 E4 05 F1 | 	add	objptr, #149
1ee24     F2 12 62 FC | 	wrlong	arg01, objptr
1ee28     95 E4 85 F1 | 	sub	objptr, #149
1ee2c                 | ' 'if afontnum==8
1ee2c                 | ' '  font_ptr:=@amiga_font
1ee2c                 | ' 
1ee2c                 | ' if afontnum==4
1ee2c     04 12 0E F2 | 	cmp	arg01, #4 wz
1ee30                 | '   font_ptr:=@st_font
1ee30     08 00 00 AF 
1ee34     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ee38     08 E4 05 A1 |  if_e	add	objptr, #8
1ee3c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ee40     08 E4 85 A1 |  if_e	sub	objptr, #8
1ee44     08 00 00 AF 
1ee48     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ee4c                 | ' if afontnum==0
1ee4c     00 12 0E F2 | 	cmp	arg01, #0 wz
1ee50                 | '   font_ptr:=@vga_font
1ee50     08 E4 05 A1 |  if_e	add	objptr, #8
1ee54     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ee58     08 E4 85 A1 |  if_e	sub	objptr, #8
1ee5c                 | _hg010b_spin2_setfontfamily_ret
1ee5c     2D 00 64 FD | 	ret
1ee60                 | 
1ee60                 | ' 
1ee60                 | ' '*************************************************************************
1ee60                 | ' '                                                                        *
1ee60                 | ' '  Cursor functions                                                      *
1ee60                 | ' '                                                                        *
1ee60                 | ' '*************************************************************************
1ee60                 | ' 
1ee60                 | ' 
1ee60                 | ' pub setcursorpos(x,y)
1ee60                 | _hg010b_spin2_setcursorpos
1ee60                 | ' 
1ee60                 | ' ''---------- Set the (x,y) position of cursor
1ee60                 | ' 
1ee60                 | ' cursor_x:=x
1ee60     3C E4 05 F1 | 	add	objptr, #60
1ee64     F2 12 52 FC | 	wrword	arg01, objptr
1ee68                 | ' cursor_y:=y
1ee68     02 E4 05 F1 | 	add	objptr, #2
1ee6c     F2 14 42 FC | 	wrbyte	arg02, objptr
1ee70                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ee70     02 E4 85 F1 | 	sub	objptr, #2
1ee74     F2 14 E2 FA | 	rdword	arg02, objptr
1ee78     02 14 66 F0 | 	shl	arg02, #2
1ee7c     02 E4 05 F1 | 	add	objptr, #2
1ee80     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ee84     3E E4 85 F1 | 	sub	objptr, #62
1ee88     04 16 66 F0 | 	shl	arg03, #4
1ee8c     04 16 06 F1 | 	add	arg03, #4
1ee90     11 12 06 F6 | 	mov	arg01, #17
1ee94     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ee98                 | _hg010b_spin2_setcursorpos_ret
1ee98     2D 00 64 FD | 	ret
1ee9c                 | 
1ee9c                 | ' 
1ee9c                 | ' pub setcursorx(x)
1ee9c                 | _hg010b_spin2_setcursorx
1ee9c                 | ' cursor_x:=x
1ee9c     3C E4 05 F1 | 	add	objptr, #60
1eea0     F2 12 52 FC | 	wrword	arg01, objptr
1eea4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1eea4     F2 14 E2 FA | 	rdword	arg02, objptr
1eea8     02 14 66 F0 | 	shl	arg02, #2
1eeac     02 E4 05 F1 | 	add	objptr, #2
1eeb0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1eeb4     3E E4 85 F1 | 	sub	objptr, #62
1eeb8     04 16 66 F0 | 	shl	arg03, #4
1eebc     04 16 06 F1 | 	add	arg03, #4
1eec0     11 12 06 F6 | 	mov	arg01, #17
1eec4     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1eec8                 | _hg010b_spin2_setcursorx_ret
1eec8     2D 00 64 FD | 	ret
1eecc                 | 
1eecc                 | ' 
1eecc                 | ' pub setcursory(y) 
1eecc                 | _hg010b_spin2_setcursory
1eecc                 | ' cursor_y:=y
1eecc     3E E4 05 F1 | 	add	objptr, #62
1eed0     F2 12 42 FC | 	wrbyte	arg01, objptr
1eed4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1eed4     02 E4 85 F1 | 	sub	objptr, #2
1eed8     F2 14 E2 FA | 	rdword	arg02, objptr
1eedc     02 14 66 F0 | 	shl	arg02, #2
1eee0     02 E4 05 F1 | 	add	objptr, #2
1eee4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1eee8     3E E4 85 F1 | 	sub	objptr, #62
1eeec     04 16 66 F0 | 	shl	arg03, #4
1eef0     04 16 06 F1 | 	add	arg03, #4
1eef4     11 12 06 F6 | 	mov	arg01, #17
1eef8     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1eefc                 | _hg010b_spin2_setcursory_ret
1eefc     2D 00 64 FD | 	ret
1ef00                 | 
1ef00                 | ' 
1ef00                 | ' '*************************************************************************
1ef00                 | ' '                                                                        *
1ef00                 | ' '  VBlank functions                                                      *
1ef00                 | ' '                                                                        *
1ef00                 | ' '*************************************************************************
1ef00                 | ' 
1ef00                 | ' pub waitvbl(amount) | i
1ef00                 | _hg010b_spin2_waitvbl
1ef00     03 4A 05 F6 | 	mov	COUNT_, #3
1ef04     A8 00 A0 FD | 	call	#pushregs_
1ef08     09 1F 02 F6 | 	mov	local01, arg01
1ef0c                 | ' 
1ef0c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1ef0c                 | ' 
1ef0c                 | ' repeat i from 1 to amount
1ef0c     01 20 06 F6 | 	mov	local02, #1
1ef10     01 1E 56 F2 | 	cmps	local01, #1 wc
1ef14     01 22 86 F6 | 	negc	local03, #1
1ef18     11 1F 02 F1 | 	add	local01, local03
1ef1c                 | LR__2500
1ef1c                 | '   repeat until vblank==0
1ef1c                 | LR__2501
1ef1c     49 E4 05 F1 | 	add	objptr, #73
1ef20     F2 12 0A FB | 	rdlong	arg01, objptr wz
1ef24     49 E4 85 F1 | 	sub	objptr, #73
1ef28     0C 00 90 AD |  if_e	jmp	#LR__2502
1ef2c                 | '     waitus(100)
1ef2c     64 12 06 F6 | 	mov	arg01, #100
1ef30     78 1C B0 FD | 	call	#__system___waitus
1ef34     E4 FF 9F FD | 	jmp	#LR__2501
1ef38                 | LR__2502
1ef38                 | '   repeat until vblank==1
1ef38                 | LR__2503
1ef38     49 E4 05 F1 | 	add	objptr, #73
1ef3c     F2 12 02 FB | 	rdlong	arg01, objptr
1ef40     49 E4 85 F1 | 	sub	objptr, #73
1ef44     01 12 0E F2 | 	cmp	arg01, #1 wz
1ef48     0C 00 90 AD |  if_e	jmp	#LR__2504
1ef4c                 | '     waitus(100)
1ef4c     64 12 06 F6 | 	mov	arg01, #100
1ef50     58 1C B0 FD | 	call	#__system___waitus
1ef54     E0 FF 9F FD | 	jmp	#LR__2503
1ef58                 | LR__2504
1ef58     11 21 02 F1 | 	add	local02, local03
1ef5c     0F 21 0A F2 | 	cmp	local02, local01 wz
1ef60     B8 FF 9F 5D |  if_ne	jmp	#LR__2500
1ef64     A7 F0 03 F6 | 	mov	ptra, fp
1ef68     B2 00 A0 FD | 	call	#popregs_
1ef6c                 | _hg010b_spin2_waitvbl_ret
1ef6c     2D 00 64 FD | 	ret
1ef70                 | 
1ef70                 | ' 
1ef70                 | ' 
1ef70                 | ' pub cls(fc,bc)   :c,i
1ef70                 | _hg010b_spin2_cls
1ef70     02 4A 05 F6 | 	mov	COUNT_, #2
1ef74     A8 00 A0 FD | 	call	#pushregs_
1ef78     09 1F 02 F6 | 	mov	local01, arg01
1ef7c     0A 21 02 F6 | 	mov	local02, arg02
1ef80                 | ' 
1ef80                 | ' c:=bc
1ef80                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1ef80     DD E4 05 F1 | 	add	objptr, #221
1ef84     F2 12 02 FB | 	rdlong	arg01, objptr
1ef88     A5 E4 85 F1 | 	sub	objptr, #165
1ef8c     F2 16 02 FB | 	rdlong	arg03, objptr
1ef90     02 16 66 F0 | 	shl	arg03, #2
1ef94     10 15 02 F6 | 	mov	arg02, local02
1ef98     00 18 06 F6 | 	mov	arg04, #0
1ef9c     01 1A 06 F6 | 	mov	arg05, #1
1efa0     0B 00 00 FF 
1efa4     94 E4 05 F1 | 	add	objptr, ##5780
1efa8     98 0D B0 FD | 	call	#_psram_spin2_fill
1efac                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1efac     0B 00 00 FF 
1efb0     C8 E4 85 F1 | 	sub	objptr, ##5832
1efb4     F2 12 02 FB | 	rdlong	arg01, objptr
1efb8     04 E4 85 F1 | 	sub	objptr, #4
1efbc     F2 16 02 FB | 	rdlong	arg03, objptr
1efc0     09 17 82 F1 | 	sub	arg03, arg01
1efc4     20 14 06 F6 | 	mov	arg02, #32
1efc8     00 18 06 F6 | 	mov	arg04, #0
1efcc     01 1A 06 F6 | 	mov	arg05, #1
1efd0     0B 00 00 FF 
1efd4     CC E4 05 F1 | 	add	objptr, ##5836
1efd8     68 0D B0 FD | 	call	#_psram_spin2_fill
1efdc                 | ' setwritecolors(fc,bc)
1efdc                 | ' 
1efdc                 | ' write_color:=ff
1efdc     0B 00 00 FF 
1efe0     8B E4 85 F1 | 	sub	objptr, ##5771
1efe4     F2 1E 62 FC | 	wrlong	local01, objptr
1efe8                 | ' write_background:=bb
1efe8     04 E4 05 F1 | 	add	objptr, #4
1efec     F2 20 62 FC | 	wrlong	local02, objptr
1eff0                 | ' cursor_x:=0
1eff0     09 E4 85 F1 | 	sub	objptr, #9
1eff4     F2 00 58 FC | 	wrword	#0, objptr
1eff8                 | ' cursor_y:=0
1eff8     02 E4 05 F1 | 	add	objptr, #2
1effc     F2 00 48 FC | 	wrbyte	#0, objptr
1f000                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f000     02 E4 85 F1 | 	sub	objptr, #2
1f004     F2 14 E2 FA | 	rdword	arg02, objptr
1f008     02 14 66 F0 | 	shl	arg02, #2
1f00c     02 E4 05 F1 | 	add	objptr, #2
1f010     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f014     3E E4 85 F1 | 	sub	objptr, #62
1f018     04 16 66 F0 | 	shl	arg03, #4
1f01c     04 16 06 F1 | 	add	arg03, #4
1f020     11 12 06 F6 | 	mov	arg01, #17
1f024     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f028                 | ' setcursorcolor(fc)
1f028     0F 13 02 F6 | 	mov	arg01, local01
1f02c     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f030     10 FB 01 F6 | 	mov	result1, local02
1f034     00 FC 05 F6 | 	mov	result2, #0
1f038     A7 F0 03 F6 | 	mov	ptra, fp
1f03c     B2 00 A0 FD | 	call	#popregs_
1f040                 | _hg010b_spin2_cls_ret
1f040     2D 00 64 FD | 	ret
1f044                 | 
1f044                 | ' 
1f044                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f044                 | ' 
1f044                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f044                 | _hg010b_spin2_putchar
1f044     02 4A 05 F6 | 	mov	COUNT_, #2
1f048     A8 00 A0 FD | 	call	#pushregs_
1f04c     09 1F 02 F6 | 	mov	local01, arg01
1f050                 | ' 
1f050                 | ' if achar==10
1f050     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f054                 | '   crlf()
1f054     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f058                 | ' if achar==9
1f058     09 1E 0E F2 | 	cmp	local01, #9 wz
1f05c     18 00 90 5D |  if_ne	jmp	#LR__2510
1f060                 | '   cursor_x:=(cursor_x& %11110000)+16
1f060     3C E4 05 F1 | 	add	objptr, #60
1f064     F2 16 E2 FA | 	rdword	arg03, objptr
1f068     F0 16 06 F5 | 	and	arg03, #240
1f06c     10 16 06 F1 | 	add	arg03, #16
1f070     F2 16 52 FC | 	wrword	arg03, objptr
1f074     3C E4 85 F1 | 	sub	objptr, #60
1f078                 | LR__2510
1f078                 | '   
1f078                 | ' if (achar<>9) && (achar<>10) 
1f078     09 1E 0E F2 | 	cmp	local01, #9 wz
1f07c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f080     A8 00 90 AD |  if_e	jmp	#LR__2511
1f084                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f084     3C E4 05 F1 | 	add	objptr, #60
1f088     F2 12 E2 FA | 	rdword	arg01, objptr
1f08c     02 E4 05 F1 | 	add	objptr, #2
1f090     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f094     04 14 66 F0 | 	shl	arg02, #4
1f098     04 14 06 F1 | 	add	arg02, #4
1f09c     03 E4 05 F1 | 	add	objptr, #3
1f0a0     F2 18 02 FB | 	rdlong	arg04, objptr
1f0a4     04 E4 05 F1 | 	add	objptr, #4
1f0a8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f0ac     45 E4 85 F1 | 	sub	objptr, #69
1f0b0     0F 17 02 F6 | 	mov	arg03, local01
1f0b4     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f0b8     04 E4 05 F1 | 	add	objptr, #4
1f0bc     F2 12 02 FB | 	rdlong	arg01, objptr
1f0c0     10 00 00 FF 
1f0c4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f0c8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f0cc     3A E4 05 F1 | 	add	objptr, #58
1f0d0     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f0d4     0D 17 02 FD | 	qmul	arg03, arg05
1f0d8                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f0d8     10 00 00 FF 
1f0dc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f0e0     02 E4 85 F1 | 	sub	objptr, #2
1f0e4     F2 20 E2 FA | 	rdword	local02, objptr
1f0e8     01 20 46 F0 | 	shr	local02, #1
1f0ec     0F 15 02 F6 | 	mov	arg02, local01
1f0f0     01 16 06 F6 | 	mov	arg03, #1
1f0f4     00 18 06 F6 | 	mov	arg04, #0
1f0f8     01 1A 06 F6 | 	mov	arg05, #1
1f0fc     0B 00 00 FF 
1f100     90 E4 05 F1 | 	add	objptr, ##5776
1f104     18 1E 62 FD | 	getqx	local01
1f108     10 1F 02 F1 | 	add	local01, local02
1f10c     0F 13 02 F1 | 	add	arg01, local01
1f110     30 0C B0 FD | 	call	#_psram_spin2_fill
1f114                 | '   cursor_x+=2
1f114     0B 00 00 FF 
1f118     90 E4 85 F1 | 	sub	objptr, ##5776
1f11c     F2 20 E2 FA | 	rdword	local02, objptr
1f120     02 20 06 F1 | 	add	local02, #2
1f124     F2 20 52 FC | 	wrword	local02, objptr
1f128     3C E4 85 F1 | 	sub	objptr, #60
1f12c                 | LR__2511
1f12c                 | ' 
1f12c                 | ' if cursor_x>=256
1f12c     3C E4 05 F1 | 	add	objptr, #60
1f130     F2 20 E2 FA | 	rdword	local02, objptr
1f134     3C E4 85 F1 | 	sub	objptr, #60
1f138     00 21 56 F2 | 	cmps	local02, #256 wc
1f13c     64 00 90 CD |  if_b	jmp	#LR__2513
1f140                 | '   cursor_x:=0
1f140     3C E4 05 F1 | 	add	objptr, #60
1f144     F2 00 58 FC | 	wrword	#0, objptr
1f148                 | '   cursor_y+=1
1f148     02 E4 05 F1 | 	add	objptr, #2
1f14c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f150     01 20 06 F1 | 	add	local02, #1
1f154     F2 20 42 FC | 	wrbyte	local02, objptr
1f158                 | '   if cursor_y>st_lines-1
1f158     C3 E4 05 F1 | 	add	objptr, #195
1f15c     F2 20 02 FB | 	rdlong	local02, objptr
1f160     01 20 86 F1 | 	sub	local02, #1
1f164     C3 E4 85 F1 | 	sub	objptr, #195
1f168     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f16c     3E E4 85 F1 | 	sub	objptr, #62
1f170     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f174     2C 00 90 ED |  if_be	jmp	#LR__2512
1f178                 | '     scrollup2()
1f178     00 12 06 F6 | 	mov	arg01, #0
1f17c     01 00 00 FF 
1f180     58 14 06 F6 | 	mov	arg02, ##600
1f184     10 16 06 F6 | 	mov	arg03, #16
1f188     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f18c                 | '     cursor_y:=st_lines-1
1f18c     01 E5 05 F1 | 	add	objptr, #257
1f190     F2 20 02 FB | 	rdlong	local02, objptr
1f194     01 20 86 F1 | 	sub	local02, #1
1f198     C3 E4 85 F1 | 	sub	objptr, #195
1f19c     F2 20 42 FC | 	wrbyte	local02, objptr
1f1a0     3E E4 85 F1 | 	sub	objptr, #62
1f1a4                 | LR__2512
1f1a4                 | LR__2513
1f1a4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f1a4     3C E4 05 F1 | 	add	objptr, #60
1f1a8     F2 14 E2 FA | 	rdword	arg02, objptr
1f1ac     02 14 66 F0 | 	shl	arg02, #2
1f1b0     02 E4 05 F1 | 	add	objptr, #2
1f1b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f1b8     3E E4 85 F1 | 	sub	objptr, #62
1f1bc     04 16 66 F0 | 	shl	arg03, #4
1f1c0     04 16 06 F1 | 	add	arg03, #4
1f1c4     11 12 06 F6 | 	mov	arg01, #17
1f1c8     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f1cc     A7 F0 03 F6 | 	mov	ptra, fp
1f1d0     B2 00 A0 FD | 	call	#popregs_
1f1d4                 | _hg010b_spin2_putchar_ret
1f1d4     2D 00 64 FD | 	ret
1f1d8                 | 
1f1d8                 | '     
1f1d8                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f1d8                 | ' 
1f1d8                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f1d8                 | _hg010b_spin2_putchar2
1f1d8     02 4A 05 F6 | 	mov	COUNT_, #2
1f1dc     A8 00 A0 FD | 	call	#pushregs_
1f1e0     09 1F 02 F6 | 	mov	local01, arg01
1f1e4                 | ' 
1f1e4                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f1e4     3C E4 05 F1 | 	add	objptr, #60
1f1e8     F2 12 E2 FA | 	rdword	arg01, objptr
1f1ec     02 E4 05 F1 | 	add	objptr, #2
1f1f0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f1f4     04 14 66 F0 | 	shl	arg02, #4
1f1f8     04 14 06 F1 | 	add	arg02, #4
1f1fc     03 E4 05 F1 | 	add	objptr, #3
1f200     F2 18 02 FB | 	rdlong	arg04, objptr
1f204     04 E4 05 F1 | 	add	objptr, #4
1f208     F2 1A 02 FB | 	rdlong	arg05, objptr
1f20c     45 E4 85 F1 | 	sub	objptr, #69
1f210     0F 17 02 F6 | 	mov	arg03, local01
1f214     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f218     04 E4 05 F1 | 	add	objptr, #4
1f21c     F2 12 02 FB | 	rdlong	arg01, objptr
1f220     10 00 00 FF 
1f224     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f228     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f22c     3A E4 05 F1 | 	add	objptr, #58
1f230     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f234     0D 17 02 FD | 	qmul	arg03, arg05
1f238                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f238     10 00 00 FF 
1f23c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f240     02 E4 85 F1 | 	sub	objptr, #2
1f244     F2 20 E2 FA | 	rdword	local02, objptr
1f248     01 20 46 F0 | 	shr	local02, #1
1f24c     0F 15 02 F6 | 	mov	arg02, local01
1f250     01 16 06 F6 | 	mov	arg03, #1
1f254     00 18 06 F6 | 	mov	arg04, #0
1f258     01 1A 06 F6 | 	mov	arg05, #1
1f25c     0B 00 00 FF 
1f260     90 E4 05 F1 | 	add	objptr, ##5776
1f264     18 1E 62 FD | 	getqx	local01
1f268     10 1F 02 F1 | 	add	local01, local02
1f26c     0F 13 02 F1 | 	add	arg01, local01
1f270     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f274                 | ' 
1f274                 | ' cursor_x+=2
1f274     0B 00 00 FF 
1f278     90 E4 85 F1 | 	sub	objptr, ##5776
1f27c     F2 20 E2 FA | 	rdword	local02, objptr
1f280     02 20 06 F1 | 	add	local02, #2
1f284     F2 20 52 FC | 	wrword	local02, objptr
1f288                 | ' if cursor_x>=256
1f288     F2 20 E2 FA | 	rdword	local02, objptr
1f28c     3C E4 85 F1 | 	sub	objptr, #60
1f290     00 21 56 F2 | 	cmps	local02, #256 wc
1f294     64 00 90 CD |  if_b	jmp	#LR__2521
1f298                 | '   cursor_x:=0
1f298     3C E4 05 F1 | 	add	objptr, #60
1f29c     F2 00 58 FC | 	wrword	#0, objptr
1f2a0                 | '   cursor_y+=1
1f2a0     02 E4 05 F1 | 	add	objptr, #2
1f2a4     F2 20 C2 FA | 	rdbyte	local02, objptr
1f2a8     01 20 06 F1 | 	add	local02, #1
1f2ac     F2 20 42 FC | 	wrbyte	local02, objptr
1f2b0                 | '   if cursor_y>st_lines-1
1f2b0     C3 E4 05 F1 | 	add	objptr, #195
1f2b4     F2 20 02 FB | 	rdlong	local02, objptr
1f2b8     01 20 86 F1 | 	sub	local02, #1
1f2bc     C3 E4 85 F1 | 	sub	objptr, #195
1f2c0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2c4     3E E4 85 F1 | 	sub	objptr, #62
1f2c8     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f2cc     2C 00 90 ED |  if_be	jmp	#LR__2520
1f2d0                 | '     scrollup2()
1f2d0     00 12 06 F6 | 	mov	arg01, #0
1f2d4     01 00 00 FF 
1f2d8     58 14 06 F6 | 	mov	arg02, ##600
1f2dc     10 16 06 F6 | 	mov	arg03, #16
1f2e0     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f2e4                 | '     cursor_y:=st_lines-1
1f2e4     01 E5 05 F1 | 	add	objptr, #257
1f2e8     F2 20 02 FB | 	rdlong	local02, objptr
1f2ec     01 20 86 F1 | 	sub	local02, #1
1f2f0     C3 E4 85 F1 | 	sub	objptr, #195
1f2f4     F2 20 42 FC | 	wrbyte	local02, objptr
1f2f8     3E E4 85 F1 | 	sub	objptr, #62
1f2fc                 | LR__2520
1f2fc                 | LR__2521
1f2fc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f2fc     3C E4 05 F1 | 	add	objptr, #60
1f300     F2 14 E2 FA | 	rdword	arg02, objptr
1f304     02 14 66 F0 | 	shl	arg02, #2
1f308     02 E4 05 F1 | 	add	objptr, #2
1f30c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f310     3E E4 85 F1 | 	sub	objptr, #62
1f314     04 16 66 F0 | 	shl	arg03, #4
1f318     04 16 06 F1 | 	add	arg03, #4
1f31c     11 12 06 F6 | 	mov	arg01, #17
1f320     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f324     A7 F0 03 F6 | 	mov	ptra, fp
1f328     B2 00 A0 FD | 	call	#popregs_
1f32c                 | _hg010b_spin2_putchar2_ret
1f32c     2D 00 64 FD | 	ret
1f330                 | 
1f330                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f330                 | ' 
1f330                 | ' pub write(text) | iii,c,ncx,ncy
1f330                 | _hg010b_spin2_write
1f330     04 4A 05 F6 | 	mov	COUNT_, #4
1f334     A8 00 A0 FD | 	call	#pushregs_
1f338     09 1F 02 F6 | 	mov	local01, arg01
1f33c                 | ' 
1f33c                 | ' repeat iii from 0 to strsize(text)-1
1f33c     00 20 06 F6 | 	mov	local02, #0
1f340     0F 13 02 F6 | 	mov	arg01, local01
1f344     09 23 02 F6 | 	mov	local03, arg01
1f348     97 06 48 FB | 	callpa	#(@LR__2531-@LR__2530)>>2,fcache_load_ptr_
1f34c                 | LR__2530
1f34c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f350     01 22 06 51 |  if_ne	add	local03, #1
1f354     F4 FF 9F 5D |  if_ne	jmp	#LR__2530
1f358                 | LR__2531
1f358     09 23 82 F1 | 	sub	local03, arg01
1f35c     01 22 86 F1 | 	sub	local03, #1
1f360     00 22 56 F2 | 	cmps	local03, #0 wc
1f364     01 24 86 F6 | 	negc	local04, #1
1f368     12 23 02 F1 | 	add	local03, local04
1f36c                 | LR__2532
1f36c                 | '   putchar2(byte[text+iii])
1f36c     0F 13 02 F6 | 	mov	arg01, local01
1f370     10 13 02 F1 | 	add	arg01, local02
1f374     09 13 C2 FA | 	rdbyte	arg01, arg01
1f378     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f37c     12 21 02 F1 | 	add	local02, local04
1f380     11 21 0A F2 | 	cmp	local02, local03 wz
1f384     E4 FF 9F 5D |  if_ne	jmp	#LR__2532
1f388     A7 F0 03 F6 | 	mov	ptra, fp
1f38c     B2 00 A0 FD | 	call	#popregs_
1f390                 | _hg010b_spin2_write_ret
1f390     2D 00 64 FD | 	ret
1f394                 | 
1f394                 | '    
1f394                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f394                 | ' 
1f394                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f394                 | _hg010b_spin2_scrollup2
1f394     03 4A 05 F6 | 	mov	COUNT_, #3
1f398     A8 00 A0 FD | 	call	#pushregs_
1f39c                 | ' 	
1f39c                 | ' repeat i from 4 to 579 
1f39c     04 1E 06 F6 | 	mov	local01, #4
1f3a0                 | LR__2540
1f3a0     F9 E4 05 F1 | 	add	objptr, #249
1f3a4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3a8     1C E4 85 F1 | 	sub	objptr, #28
1f3ac     F2 14 02 FB | 	rdlong	arg02, objptr
1f3b0     0F 19 02 F6 | 	mov	arg04, local01
1f3b4     10 18 06 F1 | 	add	arg04, #16
1f3b8     02 18 66 F0 | 	shl	arg04, #2
1f3bc     14 E4 05 F1 | 	add	objptr, #20
1f3c0     F2 16 02 FB | 	rdlong	arg03, objptr
1f3c4     0B 19 02 FD | 	qmul	arg04, arg03
1f3c8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f3c8     F6 03 00 FF 
1f3cc     00 12 06 F6 | 	mov	arg01, ##519168
1f3d0     0D 13 82 F1 | 	sub	arg01, arg05
1f3d4     02 16 66 F0 | 	shl	arg03, #2
1f3d8     0A 00 00 FF 
1f3dc     DB E5 05 F1 | 	add	objptr, ##5595
1f3e0     18 1A 62 FD | 	getqx	arg05
1f3e4     0D 15 02 F1 | 	add	arg02, arg05
1f3e8     20 08 B0 FD | 	call	#_psram_spin2_read1
1f3ec     0A 00 00 FF 
1f3f0     D3 E5 85 F1 | 	sub	objptr, ##5587
1f3f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3f8     1C E4 85 F1 | 	sub	objptr, #28
1f3fc     F2 14 02 FB | 	rdlong	arg02, objptr
1f400     0F 19 02 F6 | 	mov	arg04, local01
1f404     02 18 66 F0 | 	shl	arg04, #2
1f408     14 E4 05 F1 | 	add	objptr, #20
1f40c     F2 16 02 FB | 	rdlong	arg03, objptr
1f410     0B 19 02 FD | 	qmul	arg04, arg03
1f414                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f414     F6 03 00 FF 
1f418     00 12 06 F6 | 	mov	arg01, ##519168
1f41c     0D 13 82 F1 | 	sub	arg01, arg05
1f420     02 16 66 F0 | 	shl	arg03, #2
1f424     0A 00 00 FF 
1f428     DB E5 05 F1 | 	add	objptr, ##5595
1f42c     18 1A 62 FD | 	getqx	arg05
1f430     0D 15 02 F1 | 	add	arg02, arg05
1f434     70 08 B0 FD | 	call	#_psram_spin2_write
1f438     0B 00 00 FF 
1f43c     CC E4 85 F1 | 	sub	objptr, ##5836
1f440     01 1E 06 F1 | 	add	local01, #1
1f444     01 00 00 FF 
1f448     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f44c     50 FF 9F CD |  if_b	jmp	#LR__2540
1f450                 | ' 
1f450                 | ' repeat i from 580 to 599
1f450     01 00 00 FF 
1f454     44 1E 06 F6 | 	mov	local01, ##580
1f458                 | LR__2541
1f458                 | '    fastline(0,1023,i,write_background)   
1f458     45 E4 05 F1 | 	add	objptr, #69
1f45c     F2 18 02 FB | 	rdlong	arg04, objptr
1f460     45 E4 85 F1 | 	sub	objptr, #69
1f464     00 12 06 F6 | 	mov	arg01, #0
1f468     09 14 CE F9 | 	bmask	arg02, #9
1f46c     0F 17 02 F6 | 	mov	arg03, local01
1f470     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f474     01 1E 06 F1 | 	add	local01, #1
1f478     01 00 00 FF 
1f47c     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f480     D4 FF 9F CD |  if_b	jmp	#LR__2541
1f484                 | ' repeat i from 0 to 3
1f484     00 1E 06 F6 | 	mov	local01, #0
1f488                 | LR__2542
1f488                 | '    fastline(0,1023,i,write_background)      
1f488     45 E4 05 F1 | 	add	objptr, #69
1f48c     F2 18 02 FB | 	rdlong	arg04, objptr
1f490     45 E4 85 F1 | 	sub	objptr, #69
1f494     00 12 06 F6 | 	mov	arg01, #0
1f498     09 14 CE F9 | 	bmask	arg02, #9
1f49c     0F 17 02 F6 | 	mov	arg03, local01
1f4a0     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f4a4     01 1E 06 F1 | 	add	local01, #1
1f4a8     04 1E 56 F2 | 	cmps	local01, #4 wc
1f4ac     D8 FF 9F CD |  if_b	jmp	#LR__2542
1f4b0                 | ' 
1f4b0                 | ' repeat i from 0 to 35
1f4b0     00 1E 06 F6 | 	mov	local01, #0
1f4b4                 | LR__2543
1f4b4     0F 1B 02 F6 | 	mov	arg05, local01
1f4b8     01 1A 06 F1 | 	add	arg05, #1
1f4bc     10 00 00 FF 
1f4c0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f4c4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f4c8     0B 1B 02 FD | 	qmul	arg05, arg03
1f4cc                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f4cc     F6 03 00 FF 
1f4d0     00 12 06 F6 | 	mov	arg01, ##519168
1f4d4     F9 E4 05 F1 | 	add	objptr, #249
1f4d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4dc     0D 13 82 F1 | 	sub	arg01, arg05
1f4e0     F5 E4 85 F1 | 	sub	objptr, #245
1f4e4     F2 14 02 FB | 	rdlong	arg02, objptr
1f4e8     10 00 00 FF 
1f4ec     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f4f0     0B 00 00 FF 
1f4f4     C8 E4 05 F1 | 	add	objptr, ##5832
1f4f8     18 1A 62 FD | 	getqx	arg05
1f4fc     0D 15 02 F1 | 	add	arg02, arg05
1f500     08 07 B0 FD | 	call	#_psram_spin2_read1
1f504     10 00 00 FF 
1f508     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f50c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f510     0B 1F 02 FD | 	qmul	local01, arg03
1f514                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f514     F6 03 00 FF 
1f518     00 12 06 F6 | 	mov	arg01, ##519168
1f51c     0A 00 00 FF 
1f520     D3 E5 85 F1 | 	sub	objptr, ##5587
1f524     F2 1A 02 FB | 	rdlong	arg05, objptr
1f528     0D 13 82 F1 | 	sub	arg01, arg05
1f52c     F5 E4 85 F1 | 	sub	objptr, #245
1f530     F2 14 02 FB | 	rdlong	arg02, objptr
1f534     10 00 00 FF 
1f538     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f53c     0B 00 00 FF 
1f540     C8 E4 05 F1 | 	add	objptr, ##5832
1f544     18 1A 62 FD | 	getqx	arg05
1f548     0D 15 02 F1 | 	add	arg02, arg05
1f54c     58 07 B0 FD | 	call	#_psram_spin2_write
1f550     0B 00 00 FF 
1f554     CC E4 85 F1 | 	sub	objptr, ##5836
1f558     01 1E 06 F1 | 	add	local01, #1
1f55c     24 1E 56 F2 | 	cmps	local01, #36 wc
1f560     50 FF 9F CD |  if_b	jmp	#LR__2543
1f564                 | ' repeat i from 0 to timings[7]-1
1f564     00 1E 06 F6 | 	mov	local01, #0
1f568     10 00 00 FF 
1f56c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f570     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f574     10 00 00 FF 
1f578     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f57c     01 20 86 F1 | 	sub	local02, #1
1f580     00 20 56 F2 | 	cmps	local02, #0 wc
1f584     01 22 86 F6 | 	negc	local03, #1
1f588     11 21 02 F1 | 	add	local02, local03
1f58c                 | LR__2544
1f58c                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f58c     04 E4 05 F1 | 	add	objptr, #4
1f590     F2 12 02 FB | 	rdlong	arg01, objptr
1f594     10 00 00 FF 
1f598     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f59c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f5a0     10 00 00 FF 
1f5a4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f5a8     0D 19 02 F6 | 	mov	arg04, arg05
1f5ac     03 18 66 F0 | 	shl	arg04, #3
1f5b0     0D 19 02 F1 | 	add	arg04, arg05
1f5b4     02 18 66 F0 | 	shl	arg04, #2
1f5b8     0F 19 02 F1 | 	add	arg04, local01
1f5bc     0C 13 02 F1 | 	add	arg01, arg04
1f5c0     20 14 06 F6 | 	mov	arg02, #32
1f5c4     01 16 06 F6 | 	mov	arg03, #1
1f5c8     00 18 06 F6 | 	mov	arg04, #0
1f5cc     01 1A 06 F6 | 	mov	arg05, #1
1f5d0     0B 00 00 FF 
1f5d4     C8 E4 05 F1 | 	add	objptr, ##5832
1f5d8     68 07 B0 FD | 	call	#_psram_spin2_fill
1f5dc     0B 00 00 FF 
1f5e0     CC E4 85 F1 | 	sub	objptr, ##5836
1f5e4     11 1F 02 F1 | 	add	local01, local03
1f5e8     10 1F 0A F2 | 	cmp	local01, local02 wz
1f5ec     9C FF 9F 5D |  if_ne	jmp	#LR__2544
1f5f0     A7 F0 03 F6 | 	mov	ptra, fp
1f5f4     B2 00 A0 FD | 	call	#popregs_
1f5f8                 | _hg010b_spin2_scrollup2_ret
1f5f8     2D 00 64 FD | 	ret
1f5fc                 | 
1f5fc                 | '  
1f5fc                 | ' ''----------- Scroll the screen one line down 
1f5fc                 | ' 
1f5fc                 | ' pub scrolldown(start=0) | i
1f5fc                 | _hg010b_spin2_scrolldown
1f5fc     05 4A 05 F6 | 	mov	COUNT_, #5
1f600     A8 00 A0 FD | 	call	#pushregs_
1f604     09 1F 02 F6 | 	mov	local01, arg01
1f608                 | ' 
1f608                 | ' repeat i from 579 to (start*16)+4
1f608     01 00 00 FF 
1f60c     43 20 06 F6 | 	mov	local02, ##579
1f610     0F 23 02 F6 | 	mov	local03, local01
1f614     04 22 66 F0 | 	shl	local03, #4
1f618     04 22 06 F1 | 	add	local03, #4
1f61c     01 00 00 FF 
1f620     43 22 56 F2 | 	cmps	local03, ##579 wc
1f624     01 24 86 F6 | 	negc	local04, #1
1f628     12 27 02 F6 | 	mov	local05, local04
1f62c     12 23 02 F1 | 	add	local03, local04
1f630                 | LR__2550
1f630     F9 E4 05 F1 | 	add	objptr, #249
1f634     F2 24 02 FB | 	rdlong	local04, objptr
1f638     1C E4 85 F1 | 	sub	objptr, #28
1f63c     F2 14 02 FB | 	rdlong	arg02, objptr
1f640     10 1B 02 F6 | 	mov	arg05, local02
1f644     02 1A 66 F0 | 	shl	arg05, #2
1f648     14 E4 05 F1 | 	add	objptr, #20
1f64c     F2 16 02 FB | 	rdlong	arg03, objptr
1f650     0B 1B 02 FD | 	qmul	arg05, arg03
1f654                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f654     F6 03 00 FF 
1f658     00 12 06 F6 | 	mov	arg01, ##519168
1f65c     12 13 82 F1 | 	sub	arg01, local04
1f660     02 16 66 F0 | 	shl	arg03, #2
1f664     0A 00 00 FF 
1f668     DB E5 05 F1 | 	add	objptr, ##5595
1f66c     18 24 62 FD | 	getqx	local04
1f670     12 15 02 F1 | 	add	arg02, local04
1f674     94 05 B0 FD | 	call	#_psram_spin2_read1
1f678     0A 00 00 FF 
1f67c     D3 E5 85 F1 | 	sub	objptr, ##5587
1f680     F2 24 02 FB | 	rdlong	local04, objptr
1f684     1C E4 85 F1 | 	sub	objptr, #28
1f688     F2 14 02 FB | 	rdlong	arg02, objptr
1f68c     10 1B 02 F6 | 	mov	arg05, local02
1f690     10 1A 06 F1 | 	add	arg05, #16
1f694     02 1A 66 F0 | 	shl	arg05, #2
1f698     14 E4 05 F1 | 	add	objptr, #20
1f69c     F2 16 02 FB | 	rdlong	arg03, objptr
1f6a0     0B 1B 02 FD | 	qmul	arg05, arg03
1f6a4                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f6a4     F6 03 00 FF 
1f6a8     00 12 06 F6 | 	mov	arg01, ##519168
1f6ac     12 13 82 F1 | 	sub	arg01, local04
1f6b0     02 16 66 F0 | 	shl	arg03, #2
1f6b4     0A 00 00 FF 
1f6b8     DB E5 05 F1 | 	add	objptr, ##5595
1f6bc     18 24 62 FD | 	getqx	local04
1f6c0     12 15 02 F1 | 	add	arg02, local04
1f6c4     E0 05 B0 FD | 	call	#_psram_spin2_write
1f6c8     0B 00 00 FF 
1f6cc     CC E4 85 F1 | 	sub	objptr, ##5836
1f6d0     13 21 02 F1 | 	add	local02, local05
1f6d4     11 21 0A F2 | 	cmp	local02, local03 wz
1f6d8     54 FF 9F 5D |  if_ne	jmp	#LR__2550
1f6dc                 | ' 
1f6dc                 | ' repeat i from (start*16)+4 to (start*16)+19
1f6dc     0F 21 02 F6 | 	mov	local02, local01
1f6e0     04 20 66 F0 | 	shl	local02, #4
1f6e4     04 20 06 F1 | 	add	local02, #4
1f6e8     0F 27 02 F6 | 	mov	local05, local01
1f6ec     04 26 66 F0 | 	shl	local05, #4
1f6f0     13 26 06 F1 | 	add	local05, #19
1f6f4     0F 25 02 F6 | 	mov	local04, local01
1f6f8     04 24 66 F0 | 	shl	local04, #4
1f6fc     04 24 06 F1 | 	add	local04, #4
1f700     12 27 52 F2 | 	cmps	local05, local04 wc
1f704     01 24 86 F6 | 	negc	local04, #1
1f708     12 23 02 F6 | 	mov	local03, local04
1f70c     12 27 02 F1 | 	add	local05, local04
1f710                 | LR__2551
1f710                 | '    fastline(0,1023,i,write_background)    
1f710     45 E4 05 F1 | 	add	objptr, #69
1f714     F2 18 02 FB | 	rdlong	arg04, objptr
1f718     45 E4 85 F1 | 	sub	objptr, #69
1f71c     00 12 06 F6 | 	mov	arg01, #0
1f720     09 14 CE F9 | 	bmask	arg02, #9
1f724     10 17 02 F6 | 	mov	arg03, local02
1f728     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f72c     11 21 02 F1 | 	add	local02, local03
1f730     13 21 0A F2 | 	cmp	local02, local05 wz
1f734     D8 FF 9F 5D |  if_ne	jmp	#LR__2551
1f738                 | '    
1f738                 | ' repeat i from 35 to start
1f738     23 20 06 F6 | 	mov	local02, #35
1f73c     23 1E 56 F2 | 	cmps	local01, #35 wc
1f740     01 24 86 F6 | 	negc	local04, #1
1f744     0F 27 02 F6 | 	mov	local05, local01
1f748     12 27 02 F1 | 	add	local05, local04
1f74c                 | LR__2552
1f74c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f74c     F6 03 00 FF 
1f750     00 12 06 F6 | 	mov	arg01, ##519168
1f754     F9 E4 05 F1 | 	add	objptr, #249
1f758     F2 22 02 FB | 	rdlong	local03, objptr
1f75c     11 13 82 F1 | 	sub	arg01, local03
1f760     F5 E4 85 F1 | 	sub	objptr, #245
1f764     F2 14 02 FB | 	rdlong	arg02, objptr
1f768     10 23 02 F6 | 	mov	local03, local02
1f76c     07 22 66 F0 | 	shl	local03, #7
1f770     11 15 02 F1 | 	add	arg02, local03
1f774     80 16 06 F6 | 	mov	arg03, #128
1f778     0B 00 00 FF 
1f77c     C8 E4 05 F1 | 	add	objptr, ##5832
1f780     88 04 B0 FD | 	call	#_psram_spin2_read1
1f784                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1f784     F6 03 00 FF 
1f788     00 12 06 F6 | 	mov	arg01, ##519168
1f78c     0A 00 00 FF 
1f790     D3 E5 85 F1 | 	sub	objptr, ##5587
1f794     F2 22 02 FB | 	rdlong	local03, objptr
1f798     11 13 82 F1 | 	sub	arg01, local03
1f79c     F5 E4 85 F1 | 	sub	objptr, #245
1f7a0     F2 14 02 FB | 	rdlong	arg02, objptr
1f7a4     10 23 02 F6 | 	mov	local03, local02
1f7a8     01 22 06 F1 | 	add	local03, #1
1f7ac     07 22 66 F0 | 	shl	local03, #7
1f7b0     11 15 02 F1 | 	add	arg02, local03
1f7b4     80 16 06 F6 | 	mov	arg03, #128
1f7b8     0B 00 00 FF 
1f7bc     C8 E4 05 F1 | 	add	objptr, ##5832
1f7c0     E4 04 B0 FD | 	call	#_psram_spin2_write
1f7c4     0B 00 00 FF 
1f7c8     CC E4 85 F1 | 	sub	objptr, ##5836
1f7cc     12 21 02 F1 | 	add	local02, local04
1f7d0     13 21 0A F2 | 	cmp	local02, local05 wz
1f7d4     74 FF 9F 5D |  if_ne	jmp	#LR__2552
1f7d8                 | ' repeat i from 0 to 127
1f7d8     00 20 06 F6 | 	mov	local02, #0
1f7dc                 | LR__2553
1f7dc                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1f7dc     04 E4 05 F1 | 	add	objptr, #4
1f7e0     F2 12 02 FB | 	rdlong	arg01, objptr
1f7e4     0F 27 02 F6 | 	mov	local05, local01
1f7e8     07 26 66 F0 | 	shl	local05, #7
1f7ec     13 13 02 F1 | 	add	arg01, local05
1f7f0     10 13 02 F1 | 	add	arg01, local02
1f7f4     20 14 06 F6 | 	mov	arg02, #32
1f7f8     01 16 06 F6 | 	mov	arg03, #1
1f7fc     00 18 06 F6 | 	mov	arg04, #0
1f800     01 1A 06 F6 | 	mov	arg05, #1
1f804     0B 00 00 FF 
1f808     C8 E4 05 F1 | 	add	objptr, ##5832
1f80c     34 05 B0 FD | 	call	#_psram_spin2_fill
1f810     0B 00 00 FF 
1f814     CC E4 85 F1 | 	sub	objptr, ##5836
1f818     01 20 06 F1 | 	add	local02, #1
1f81c     80 20 56 F2 | 	cmps	local02, #128 wc
1f820     B8 FF 9F CD |  if_b	jmp	#LR__2553
1f824     A7 F0 03 F6 | 	mov	ptra, fp
1f828     B2 00 A0 FD | 	call	#popregs_
1f82c                 | _hg010b_spin2_scrolldown_ret
1f82c     2D 00 64 FD | 	ret
1f830                 | 
1f830                 | ' 
1f830                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1f830                 | ' 
1f830                 | ' pub crlf()
1f830                 | _hg010b_spin2_crlf
1f830                 | ' 
1f830                 | ' cursor_x:=leading_spaces*2
1f830     01 00 00 FF 
1f834     B6 E4 05 F1 | 	add	objptr, ##694
1f838     F2 16 02 FB | 	rdlong	arg03, objptr
1f83c     01 16 66 F0 | 	shl	arg03, #1
1f840     01 00 00 FF 
1f844     7A E4 85 F1 | 	sub	objptr, ##634
1f848     F2 16 52 FC | 	wrword	arg03, objptr
1f84c                 | ' cursor_y+=1
1f84c     02 E4 05 F1 | 	add	objptr, #2
1f850     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f854     01 16 06 F1 | 	add	arg03, #1
1f858     F2 16 42 FC | 	wrbyte	arg03, objptr
1f85c                 | ' if cursor_y>st_lines-1
1f85c     C3 E4 05 F1 | 	add	objptr, #195
1f860     F2 16 02 FB | 	rdlong	arg03, objptr
1f864     01 16 86 F1 | 	sub	arg03, #1
1f868     C3 E4 85 F1 | 	sub	objptr, #195
1f86c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f870     3E E4 85 F1 | 	sub	objptr, #62
1f874     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1f878     2C 00 90 ED |  if_be	jmp	#LR__2560
1f87c                 | '   scrollup2()
1f87c     00 12 06 F6 | 	mov	arg01, #0
1f880     01 00 00 FF 
1f884     58 14 06 F6 | 	mov	arg02, ##600
1f888     10 16 06 F6 | 	mov	arg03, #16
1f88c     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1f890                 | '   cursor_y:=st_lines-1
1f890     01 E5 05 F1 | 	add	objptr, #257
1f894     F2 16 02 FB | 	rdlong	arg03, objptr
1f898     01 16 86 F1 | 	sub	arg03, #1
1f89c     C3 E4 85 F1 | 	sub	objptr, #195
1f8a0     F2 16 42 FC | 	wrbyte	arg03, objptr
1f8a4     3E E4 85 F1 | 	sub	objptr, #62
1f8a8                 | LR__2560
1f8a8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1f8a8     3C E4 05 F1 | 	add	objptr, #60
1f8ac     F2 14 E2 FA | 	rdword	arg02, objptr
1f8b0     02 14 66 F0 | 	shl	arg02, #2
1f8b4     02 E4 05 F1 | 	add	objptr, #2
1f8b8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f8bc     3E E4 85 F1 | 	sub	objptr, #62
1f8c0     04 16 66 F0 | 	shl	arg03, #4
1f8c4     04 16 06 F1 | 	add	arg03, #4
1f8c8     11 12 06 F6 | 	mov	arg01, #17
1f8cc     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1f8d0                 | _hg010b_spin2_crlf_ret
1f8d0     2D 00 64 FD | 	ret
1f8d4                 | 
1f8d4                 | ' 
1f8d4                 | ' 
1f8d4                 | ' '*************************************************************************
1f8d4                 | ' '                                                                        *
1f8d4                 | ' '  Conversions                                                           *
1f8d4                 | ' '                                                                        *
1f8d4                 | ' '*************************************************************************
1f8d4                 | ' 
1f8d4                 | ' ''---------- Convert a integer to dec string, return a pointer
1f8d4                 | ' 
1f8d4                 | ' pub inttostr(i):result |q,pos,k,j
1f8d4                 | _hg010b_spin2_inttostr
1f8d4     03 4A 05 F6 | 	mov	COUNT_, #3
1f8d8     A8 00 A0 FD | 	call	#pushregs_
1f8dc     09 1F 0A F6 | 	mov	local01, arg01 wz
1f8e0                 | ' 
1f8e0                 | ' j:=i
1f8e0                 | ' pos:=10
1f8e0     0A 20 06 F6 | 	mov	local02, #10
1f8e4                 | ' k:=0
1f8e4     00 22 06 F6 | 	mov	local03, #0
1f8e8                 | ' 
1f8e8                 | ' if (j==0)
1f8e8     18 00 90 5D |  if_ne	jmp	#LR__2570
1f8ec                 | '   n_string[0]:=48
1f8ec     4D E4 05 F1 | 	add	objptr, #77
1f8f0     F2 60 48 FC | 	wrbyte	#48, objptr
1f8f4                 | '   n_string[1]:=0
1f8f4     01 E4 05 F1 | 	add	objptr, #1
1f8f8     F2 00 48 FC | 	wrbyte	#0, objptr
1f8fc     4E E4 85 F1 | 	sub	objptr, #78
1f900     C4 00 90 FD | 	jmp	#LR__2577
1f904                 | LR__2570
1f904                 | ' 
1f904                 | ' else
1f904                 | '   if (j<0)
1f904     0F 1F 52 F6 | 	abs	local01, local01 wc
1f908                 | '     j:=0-j
1f908                 | '     k:=45
1f908     2D 22 06 C6 |  if_b	mov	local03, #45
1f90c                 | ' 
1f90c                 | '   n_string[11]:=0
1f90c     58 E4 05 F1 | 	add	objptr, #88
1f910     F2 00 48 FC | 	wrbyte	#0, objptr
1f914     58 E4 85 F1 | 	sub	objptr, #88
1f918     97 24 48 FB | 	callpa	#(@LR__2572-@LR__2571)>>2,fcache_load_ptr_
1f91c                 | '   repeat while (pos>-1)
1f91c                 | LR__2571
1f91c     00 20 56 F2 | 	cmps	local02, #0 wc
1f920     40 00 90 CD |  if_b	jmp	#LR__2573
1f924     0F FB 51 F6 | 	abs	result1, local01 wc
1f928     0A FA 15 FD | 	qdiv	result1, #10
1f92c                 | '     q:=j//10
1f92c     19 FA 61 FD | 	getqy	result1
1f930     FD FA 81 F6 | 	negc	result1, result1
1f934     0F 1F 52 F6 | 	abs	local01, local01 wc
1f938     0A 1E 16 FD | 	qdiv	local01, #10
1f93c                 | '     q:=48+q
1f93c     30 FA 05 F1 | 	add	result1, #48
1f940                 | '     n_string[pos]:=q
1f940     10 1F 02 F6 | 	mov	local01, local02
1f944     4D E4 05 F1 | 	add	objptr, #77
1f948     F2 1E 02 F1 | 	add	local01, objptr
1f94c     0F FB 41 FC | 	wrbyte	result1, local01
1f950                 | '     j:=j/10
1f950     4D E4 85 F1 | 	sub	objptr, #77
1f954                 | '     pos-=1
1f954     01 20 86 F1 | 	sub	local02, #1
1f958     18 1E 62 FD | 	getqx	local01
1f95c     0F 1F 82 F6 | 	negc	local01, local01
1f960     B8 FF 9F FD | 	jmp	#LR__2571
1f964                 | LR__2572
1f964                 | LR__2573
1f964                 | '   repeat while n_string[0]==48
1f964                 | LR__2574
1f964     4D E4 05 F1 | 	add	objptr, #77
1f968     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f96c     4D E4 85 F1 | 	sub	objptr, #77
1f970     30 16 0E F2 | 	cmp	arg03, #48 wz
1f974     20 00 90 5D |  if_ne	jmp	#LR__2575
1f978                 | '     bytemove(@n_string,@n_string+1,12)
1f978     4D E4 05 F1 | 	add	objptr, #77
1f97c     F2 12 02 F6 | 	mov	arg01, objptr
1f980     F2 14 02 F6 | 	mov	arg02, objptr
1f984     4D E4 85 F1 | 	sub	objptr, #77
1f988     01 14 06 F1 | 	add	arg02, #1
1f98c     0C 16 06 F6 | 	mov	arg03, #12
1f990     D8 0D B0 FD | 	call	#__system____builtin_memmove
1f994     CC FF 9F FD | 	jmp	#LR__2574
1f998                 | LR__2575
1f998                 | ' 
1f998                 | '   if k==45
1f998     2D 22 0E F2 | 	cmp	local03, #45 wz
1f99c     28 00 90 5D |  if_ne	jmp	#LR__2576
1f9a0                 | '      bytemove(@n_string+1,@n_string,12)
1f9a0     4D E4 05 F1 | 	add	objptr, #77
1f9a4     F2 12 02 F6 | 	mov	arg01, objptr
1f9a8     01 12 06 F1 | 	add	arg01, #1
1f9ac     F2 14 02 F6 | 	mov	arg02, objptr
1f9b0     4D E4 85 F1 | 	sub	objptr, #77
1f9b4     0C 16 06 F6 | 	mov	arg03, #12
1f9b8     B0 0D B0 FD | 	call	#__system____builtin_memmove
1f9bc                 | '      n_string[0]:=k
1f9bc     4D E4 05 F1 | 	add	objptr, #77
1f9c0     F2 22 42 FC | 	wrbyte	local03, objptr
1f9c4     4D E4 85 F1 | 	sub	objptr, #77
1f9c8                 | LR__2576
1f9c8                 | LR__2577
1f9c8                 | ' 
1f9c8                 | ' q:=@n_string
1f9c8     4D E4 05 F1 | 	add	objptr, #77
1f9cc     F2 FA 01 F6 | 	mov	result1, objptr
1f9d0     4D E4 85 F1 | 	sub	objptr, #77
1f9d4                 | ' return q
1f9d4     A7 F0 03 F6 | 	mov	ptra, fp
1f9d8     B2 00 A0 FD | 	call	#popregs_
1f9dc                 | _hg010b_spin2_inttostr_ret
1f9dc     2D 00 64 FD | 	ret
1f9e0                 | 
1f9e0                 | ' 
1f9e0                 | ' '..............................................................................
1f9e0                 | ' 
1f9e0                 | ' {{
1f9e0                 | ' }}
1f9e0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1f9e0                 | _psram_spin2_startx
1f9e0     04 4A 05 F6 | 	mov	COUNT_, #4
1f9e4     A8 00 A0 FD | 	call	#pushregs_
1f9e8     09 1F 02 F6 | 	mov	local01, arg01
1f9ec     0B 21 02 F6 | 	mov	local02, arg03
1f9f0     0C 23 02 F6 | 	mov	local03, arg04
1f9f4                 | '     stop() ' restart driver if required
1f9f4     54 01 B0 FD | 	call	#_psram_spin2_stop
1f9f8     00 1E 0E F2 | 	cmp	local01, #0 wz
1f9fc     14 1E 06 AB |  if_e	rdlong	local01, #20
1fa00     0F 15 52 F6 | 	abs	arg02, local01 wc
1fa04     A1 07 00 FF 
1fa08     40 14 16 FD | 	qdiv	arg02, ##1000000
1fa0c                 | ' 
1fa0c                 | '     ' use current frequency if none specified
1fa0c                 | ' 
1fa0c                 | '     if freq == 0 
1fa0c                 | '         freq := clkfreq 
1fa0c                 | ' 
1fa0c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fa0c                 | ' 
1fa0c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fa0c                 | '     if burst < 0
1fa0c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fa0c     18 14 62 FD | 	getqx	arg02
1fa10     0A 19 82 F6 | 	negc	arg04, arg02
1fa14     03 18 66 F0 | 	shl	arg04, #3
1fa18     84 18 86 F1 | 	sub	arg04, #132
1fa1c     04 18 46 F0 | 	shr	arg04, #4
1fa20     04 18 66 F0 | 	shl	arg04, #4
1fa24     00 18 56 F2 | 	cmps	arg04, #0 wc
1fa28     0E FA 65 C6 |  if_b	neg	result1, #14
1fa2c     10 01 90 CD |  if_b	jmp	#LR__2583
1fa30                 | ' 
1fa30                 | '     ' compute the input delay
1fa30                 | ' 
1fa30                 | '     if delay <= 0
1fa30     01 20 56 F2 | 	cmps	local02, #1 wc
1fa34     10 00 90 3D |  if_ae	jmp	#LR__2580
1fa38                 | '         delay := lookupDelay(freq)
1fa38     0F 13 02 F6 | 	mov	arg01, local01
1fa3c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fa40     FD 20 02 F6 | 	mov	local02, result1
1fa44     04 00 90 FD | 	jmp	#LR__2581
1fa48                 | LR__2580
1fa48                 | '     else
1fa48                 | '         delay <#= $f ' limit to 15
1fa48     0F 20 66 F3 | 	fles	local02, #15
1fa4c                 | LR__2581
1fa4c                 | ' 
1fa4c                 | '     ' create our lock
1fa4c                 | ' 
1fa4c                 | '     driverlock := LOCKNEW()  
1fa4c     00 FA 05 F6 | 	mov	result1, #0
1fa50     04 FA 61 FD | 	locknew	result1
1fa54     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fa58     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fa5c                 | '     if driverlock == -1
1fa5c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fa60     FF FF 7F FF 
1fa64     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fa68                 | '         return ERR_NO_LOCK
1fa68     1A FA 65 A6 |  if_e	neg	result1, #26
1fa6c     D0 00 90 AD |  if_e	jmp	#LR__2583
1fa70                 | ' 
1fa70                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fa70                 | ' 
1fa70                 | '     long[@startupData][0]:=clkfreq
1fa70     14 1E 06 FB | 	rdlong	local01, #20
1fa74     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fa78     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fa7c                 | ' '    long[@startupData][1]:=$1000_0000
1fa7c                 | '     long[@startupData][5]:=@deviceData
1fa7c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fa80     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fa84     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fa88     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fa8c     14 14 06 F1 | 	add	arg02, #20
1fa90     0A 1F 62 FC | 	wrlong	local01, arg02
1fa94                 | '     long[@startupData][6]:=@qosData
1fa94     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fa98     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fa9c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1faa0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1faa4     18 14 06 F1 | 	add	arg02, #24
1faa8     0A 1F 62 FC | 	wrlong	local01, arg02
1faac                 | '     long[@startupData][7]:=$7FF00
1faac     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fab0     1C 1E 06 F1 | 	add	local01, #28
1fab4     FF 03 80 FF 
1fab8     0F 01 6A FC | 	wrlong	##524032, local01
1fabc                 | ' 
1fabc                 | '     ' setup some default bank and QoS parameter values
1fabc                 | ' 
1fabc                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fabc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fac0     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fac4     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fac8     10 18 66 F0 | 	shl	arg04, #16
1facc     0C 20 66 F0 | 	shl	local02, #12
1fad0     10 19 42 F5 | 	or	arg04, local02
1fad4     18 18 46 F5 | 	or	arg04, #24
1fad8     0C 15 02 F6 | 	mov	arg02, arg04
1fadc     02 16 06 F6 | 	mov	arg03, #2
1fae0     A0 00 A0 FD | 	call	#\builtin_longfill_
1fae4                 | '     longfill(@qosData, $FFFF0000, 8)
1fae4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fae8     07 16 06 F6 | 	mov	arg03, #7
1faec     28 16 62 FD | 	setq	arg03
1faf0     80 FF FF FF 
1faf4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1faf8                 | ' 
1faf8                 | '     ' get the address of the PSRAM memory driver so we can start it
1faf8                 | ' 
1faf8                 | '     driverAddr:= driver.getDriverAddr()
1faf8                 | '     return @driver_start
1faf8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fafc     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fb00     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fb04                 | ' 
1fb04                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fb04                 | ' 
1fb04                 | '     if desiredcog < 0
1fb04     00 22 56 F2 | 	cmps	local03, #0 wc
1fb08                 | '         desiredcog := NEWCOG
1fb08     10 22 06 C6 |  if_b	mov	local03, #16
1fb0c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fb0c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fb10     11 25 02 F6 | 	mov	local04, local03
1fb14     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fb18     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fb1c     01 24 66 C6 |  if_b	neg	local04, #1
1fb20     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fb24     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fb28                 | '     repeat until long[@startupData] == 0 
1fb28     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fb2c                 | LR__2582
1fb2c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fb30     F8 FF 9F 5D |  if_ne	jmp	#LR__2582
1fb34                 | ' 
1fb34                 | '     return drivercog
1fb34     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fb38     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fb3c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb40                 | LR__2583
1fb40     A7 F0 03 F6 | 	mov	ptra, fp
1fb44     B2 00 A0 FD | 	call	#popregs_
1fb48                 | _psram_spin2_startx_ret
1fb48     2D 00 64 FD | 	ret
1fb4c                 | 
1fb4c                 | ' 
1fb4c                 | ' '..............................................................................
1fb4c                 | ' 
1fb4c                 | ' {{
1fb4c                 | ' }}
1fb4c                 | ' PUB stop() : i
1fb4c                 | _psram_spin2_stop
1fb4c     00 00 06 F6 | 	mov	_var01, #0
1fb50                 | '     if drivercog <> -1
1fb50     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fb54     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fb58     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb5c     FF FF 7F FF 
1fb60     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fb64     70 00 90 AD |  if_e	jmp	#LR__2593
1fb68                 | '         cogstop(drivercog) ' a rather brutal stop
1fb68     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fb6c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fb70     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb74     03 12 62 FD | 	cogstop	arg01
1fb78     97 26 48 FB | 	callpa	#(@LR__2592-@LR__2590)>>2,fcache_load_ptr_
1fb7c                 | '         repeat i from 0 to 7
1fb7c                 | LR__2590
1fb7c                 | '             if long[$7FF00][i*3] < 0
1fb7c     00 FB 01 F6 | 	mov	result1, _var01
1fb80     01 FA 65 F0 | 	shl	result1, #1
1fb84     00 FB 01 F1 | 	add	result1, _var01
1fb88     02 FA 65 F0 | 	shl	result1, #2
1fb8c     FF 03 00 FF 
1fb90     00 FB 05 F1 | 	add	result1, ##524032
1fb94     FD FA 01 FB | 	rdlong	result1, result1
1fb98     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb9c     1C 00 90 3D |  if_ae	jmp	#LR__2591
1fba0                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fba0     00 FB 01 F6 | 	mov	result1, _var01
1fba4     01 FA 65 F0 | 	shl	result1, #1
1fba8     00 FB 01 F1 | 	add	result1, _var01
1fbac     02 FA 65 F0 | 	shl	result1, #2
1fbb0     FF 03 00 FF 
1fbb4     00 FB 05 F1 | 	add	result1, ##524032
1fbb8     FD 20 68 FC | 	wrlong	#16, result1
1fbbc                 | LR__2591
1fbbc     01 00 06 F1 | 	add	_var01, #1
1fbc0     08 00 56 F2 | 	cmps	_var01, #8 wc
1fbc4     B4 FF 9F CD |  if_b	jmp	#LR__2590
1fbc8                 | LR__2592
1fbc8                 | '         drivercog := -1
1fbc8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fbcc     FF FF FF FF 
1fbd0     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fbd4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fbd8                 | LR__2593
1fbd8                 | '     if driverlock <> -1
1fbd8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fbdc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fbe0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fbe4     FF FF 7F FF 
1fbe8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fbec                 | '         LOCKRET(driverlock)
1fbec     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fbf0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fbf4     05 12 62 5D |  if_ne	lockret	arg01
1fbf8                 | '         driverlock := -1
1fbf8     FF FF FF 5F 
1fbfc     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fc00     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fc04     00 FB 01 F6 | 	mov	result1, _var01
1fc08                 | _psram_spin2_stop_ret
1fc08     2D 00 64 FD | 	ret
1fc0c                 | 
1fc0c                 | ' 
1fc0c                 | ' '..............................................................................
1fc0c                 | ' 
1fc0c                 | ' {{
1fc0c                 | ' }}
1fc0c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fc0c                 | _psram_spin2_read1
1fc0c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fc0c                 | '     if drivercog == -1 ' driver must be running
1fc0c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc10     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fc14     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc18     FF FF 7F FF 
1fc1c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fc20                 | '         return ERR_INACTIVE
1fc20     0F FA 65 A6 |  if_e	neg	result1, #15
1fc24     7C 00 90 AD |  if_e	jmp	#LR__2601
1fc28                 | '     if count == 0 ' don't even bother reading
1fc28     00 16 0E F2 | 	cmp	arg03, #0 wz
1fc2c                 | '         return 0
1fc2c     00 FA 05 A6 |  if_e	mov	result1, #0
1fc30     70 00 90 AD |  if_e	jmp	#LR__2601
1fc34                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fc34     00 FA 05 F6 | 	mov	result1, #0
1fc38     01 FA 61 FD | 	cogid	result1
1fc3c     FD 00 02 F6 | 	mov	_var01, result1
1fc40     01 00 66 F0 | 	shl	_var01, #1
1fc44     FD 00 02 F1 | 	add	_var01, result1
1fc48     02 00 66 F0 | 	shl	_var01, #2
1fc4c     FF 03 00 FF 
1fc50     00 03 06 F6 | 	mov	_var02, ##524032
1fc54     00 03 02 F1 | 	add	_var02, _var01
1fc58                 | '     if long[mailbox] < 0
1fc58     01 01 02 FB | 	rdlong	_var01, _var02
1fc5c     00 00 56 F2 | 	cmps	_var01, #0 wc
1fc60                 | '         return ERR_MAILBOX_BUSY
1fc60     1C FA 65 C6 |  if_b	neg	result1, #28
1fc64     3C 00 90 CD |  if_b	jmp	#LR__2601
1fc68                 | '     long[mailbox][2] := count
1fc68     08 02 06 F1 | 	add	_var02, #8
1fc6c     01 17 62 FC | 	wrlong	arg03, _var02
1fc70                 | '     long[mailbox][1] := dstHubAddr
1fc70     04 02 86 F1 | 	sub	_var02, #4
1fc74     01 13 62 FC | 	wrlong	arg01, _var02
1fc78     04 02 86 F1 | 	sub	_var02, #4
1fc7c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fc7c     0A 05 02 F6 | 	mov	_var03, arg02
1fc80     D9 04 06 F4 | 	bitl	_var03, #217
1fc84     00 00 58 FF 
1fc88     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fc8c     02 01 02 F1 | 	add	_var01, _var03
1fc90     01 01 62 FC | 	wrlong	_var01, _var02
1fc94                 | '     repeat
1fc94                 | LR__2600
1fc94                 | '         result := long[mailbox]    
1fc94     01 05 02 FB | 	rdlong	_var03, _var02
1fc98     00 04 56 F2 | 	cmps	_var03, #0 wc
1fc9c     F4 FF 9F CD |  if_b	jmp	#LR__2600
1fca0                 | '     while result < 0   
1fca0                 | '     return -result                       'return success or error
1fca0     02 FB 61 F6 | 	neg	result1, _var03
1fca4                 | LR__2601
1fca4                 | _psram_spin2_read1_ret
1fca4     2D 00 64 FD | 	ret
1fca8                 | 
1fca8                 | ' 
1fca8                 | ' '..............................................................................
1fca8                 | ' 
1fca8                 | ' {{
1fca8                 | ' }}
1fca8                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fca8                 | _psram_spin2_write
1fca8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fca8                 | '     if drivercog == -1 ' driver must be running
1fca8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fcac     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fcb0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fcb4     FF FF 7F FF 
1fcb8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fcbc                 | '         return ERR_INACTIVE
1fcbc     0F FA 65 A6 |  if_e	neg	result1, #15
1fcc0     7C 00 90 AD |  if_e	jmp	#LR__2611
1fcc4                 | '     if count == 0 ' don't even bother writing
1fcc4     00 16 0E F2 | 	cmp	arg03, #0 wz
1fcc8                 | '         return 0
1fcc8     00 FA 05 A6 |  if_e	mov	result1, #0
1fccc     70 00 90 AD |  if_e	jmp	#LR__2611
1fcd0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fcd0     00 FA 05 F6 | 	mov	result1, #0
1fcd4     01 FA 61 FD | 	cogid	result1
1fcd8     FD 00 02 F6 | 	mov	_var01, result1
1fcdc     01 00 66 F0 | 	shl	_var01, #1
1fce0     FD 00 02 F1 | 	add	_var01, result1
1fce4     02 00 66 F0 | 	shl	_var01, #2
1fce8     FF 03 00 FF 
1fcec     00 03 06 F6 | 	mov	_var02, ##524032
1fcf0     00 03 02 F1 | 	add	_var02, _var01
1fcf4                 | '     if long[mailbox] < 0
1fcf4     01 01 02 FB | 	rdlong	_var01, _var02
1fcf8     00 00 56 F2 | 	cmps	_var01, #0 wc
1fcfc                 | '         return ERR_MAILBOX_BUSY
1fcfc     1C FA 65 C6 |  if_b	neg	result1, #28
1fd00     3C 00 90 CD |  if_b	jmp	#LR__2611
1fd04                 | '     long[mailbox][2] := count
1fd04     08 02 06 F1 | 	add	_var02, #8
1fd08     01 17 62 FC | 	wrlong	arg03, _var02
1fd0c                 | '     long[mailbox][1] := srcHubAddr
1fd0c     04 02 86 F1 | 	sub	_var02, #4
1fd10     01 13 62 FC | 	wrlong	arg01, _var02
1fd14     04 02 86 F1 | 	sub	_var02, #4
1fd18                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fd18     0A 05 02 F6 | 	mov	_var03, arg02
1fd1c     D9 04 06 F4 | 	bitl	_var03, #217
1fd20     00 00 78 FF 
1fd24     00 00 06 F6 | 	mov	_var01, ##-268435456
1fd28     02 01 02 F1 | 	add	_var01, _var03
1fd2c     01 01 62 FC | 	wrlong	_var01, _var02
1fd30                 | '     repeat
1fd30                 | LR__2610
1fd30                 | '         result := long[mailbox]    
1fd30     01 05 02 FB | 	rdlong	_var03, _var02
1fd34     00 04 56 F2 | 	cmps	_var03, #0 wc
1fd38     F4 FF 9F CD |  if_b	jmp	#LR__2610
1fd3c                 | '     while result < 0   
1fd3c                 | '     return -result                       'return success or error
1fd3c     02 FB 61 F6 | 	neg	result1, _var03
1fd40                 | LR__2611
1fd40                 | _psram_spin2_write_ret
1fd40     2D 00 64 FD | 	ret
1fd44                 | 
1fd44                 | ' 
1fd44                 | ' ' generalized fill
1fd44                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fd44                 | _psram_spin2_fill
1fd44     09 01 02 F6 | 	mov	_var01, arg01
1fd48     0A 03 02 F6 | 	mov	_var02, arg02
1fd4c     0B 05 02 F6 | 	mov	_var03, arg03
1fd50     0D 07 02 F6 | 	mov	_var04, arg05
1fd54                 | '     case datasize 
1fd54     01 06 86 F1 | 	sub	_var04, #1
1fd58     04 06 26 F3 | 	fle	_var04, #4
1fd5c     30 06 62 FD | 	jmprel	_var04
1fd60                 | LR__2620
1fd60     10 00 90 FD | 	jmp	#LR__2621
1fd64     18 00 90 FD | 	jmp	#LR__2622
1fd68     2C 00 90 FD | 	jmp	#LR__2624
1fd6c     1C 00 90 FD | 	jmp	#LR__2623
1fd70     24 00 90 FD | 	jmp	#LR__2624
1fd74                 | LR__2621
1fd74                 | '         1: req := driver.R_WRITEBYTE
1fd74     00 00 60 FF 
1fd78     00 08 06 F6 | 	mov	_var05, ##-1073741824
1fd7c     20 00 90 FD | 	jmp	#LR__2625
1fd80                 | LR__2622
1fd80                 | '         2: req := driver.R_WRITEWORD
1fd80     00 00 68 FF 
1fd84     00 08 06 F6 | 	mov	_var05, ##-805306368
1fd88     14 00 90 FD | 	jmp	#LR__2625
1fd8c                 | LR__2623
1fd8c                 | '         4: req := driver.R_WRITELONG
1fd8c     00 00 70 FF 
1fd90     00 08 06 F6 | 	mov	_var05, ##-536870912
1fd94     08 00 90 FD | 	jmp	#LR__2625
1fd98                 | LR__2624
1fd98                 | '         other : return ERR_INVALID
1fd98     06 FA 65 F6 | 	neg	result1, #6
1fd9c     94 00 90 FD | 	jmp	#LR__2627
1fda0                 | LR__2625
1fda0                 | '     if count == 0   ' nothing to do
1fda0     00 04 0E F2 | 	cmp	_var03, #0 wz
1fda4                 | '         return 0
1fda4     00 FA 05 A6 |  if_e	mov	result1, #0
1fda8     88 00 90 AD |  if_e	jmp	#LR__2627
1fdac                 | '     if drivercog == -1
1fdac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fdb0     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1fdb4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fdb8     FF FF 7F FF 
1fdbc     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1fdc0                 | '         return ERR_INACTIVE
1fdc0     0F FA 65 A6 |  if_e	neg	result1, #15
1fdc4     6C 00 90 AD |  if_e	jmp	#LR__2627
1fdc8                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1fdc8     00 FA 05 F6 | 	mov	result1, #0
1fdcc     01 FA 61 FD | 	cogid	result1
1fdd0     FD 06 02 F6 | 	mov	_var04, result1
1fdd4     01 06 66 F0 | 	shl	_var04, #1
1fdd8     FD 06 02 F1 | 	add	_var04, result1
1fddc     02 06 66 F0 | 	shl	_var04, #2
1fde0     FF 03 00 FF 
1fde4     00 0B 06 F6 | 	mov	_var06, ##524032
1fde8     03 0B 02 F1 | 	add	_var06, _var04
1fdec                 | '     if long[mailbox] < 0
1fdec     05 07 02 FB | 	rdlong	_var04, _var06
1fdf0     00 06 56 F2 | 	cmps	_var04, #0 wc
1fdf4                 | '         return ERR_MAILBOX_BUSY
1fdf4     1C FA 65 C6 |  if_b	neg	result1, #28
1fdf8     38 00 90 CD |  if_b	jmp	#LR__2627
1fdfc                 | '     long[mailbox][2] := count
1fdfc     08 0A 06 F1 | 	add	_var06, #8
1fe00     05 05 62 FC | 	wrlong	_var03, _var06
1fe04                 | '     long[mailbox][1] := pattern
1fe04     04 0A 86 F1 | 	sub	_var06, #4
1fe08     05 03 62 FC | 	wrlong	_var02, _var06
1fe0c     04 0A 86 F1 | 	sub	_var06, #4
1fe10                 | '     long[mailbox] := req + (addr & $1ffffff)
1fe10     04 0D 02 F6 | 	mov	_var07, _var05
1fe14     00 0F 02 F6 | 	mov	_var08, _var01
1fe18     D9 0E 06 F4 | 	bitl	_var08, #217
1fe1c     07 0D 02 F1 | 	add	_var07, _var08
1fe20     05 0D 62 FC | 	wrlong	_var07, _var06
1fe24                 | '     repeat
1fe24                 | LR__2626
1fe24                 | '         r := long[mailbox]
1fe24     05 0F 02 FB | 	rdlong	_var08, _var06
1fe28     00 0E 56 F2 | 	cmps	_var08, #0 wc
1fe2c     F4 FF 9F CD |  if_b	jmp	#LR__2626
1fe30                 | '     while r < 0
1fe30                 | '     return -r                  ' return 0 for success or negated error code
1fe30     07 FB 61 F6 | 	neg	result1, _var08
1fe34                 | LR__2627
1fe34                 | _psram_spin2_fill_ret
1fe34     2D 00 64 FD | 	ret
1fe38                 | 
1fe38                 | ' 
1fe38                 | ' '..............................................................................
1fe38                 | ' 
1fe38                 | ' {{
1fe38                 | ' }}
1fe38                 | ' PUB setQos(cog, qos) : result | mailbox
1fe38                 | _psram_spin2_setQos
1fe38     09 01 02 F6 | 	mov	_var01, arg01
1fe3c                 | '     if drivercog == -1 ' driver must be running
1fe3c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe40     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fe44     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe48     FF FF 7F FF 
1fe4c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fe50                 | '         return ERR_INACTIVE
1fe50     0F FA 65 A6 |  if_e	neg	result1, #15
1fe54     9C 00 90 AD |  if_e	jmp	#LR__2634
1fe58                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1fe58     00 00 56 F2 | 	cmps	_var01, #0 wc
1fe5c     08 00 90 CD |  if_b	jmp	#LR__2630
1fe60     08 00 56 F2 | 	cmps	_var01, #8 wc
1fe64     08 00 90 CD |  if_b	jmp	#LR__2631
1fe68                 | LR__2630
1fe68                 | '         return ERR_INVALID
1fe68     06 FA 65 F6 | 	neg	result1, #6
1fe6c     84 00 90 FD | 	jmp	#LR__2634
1fe70                 | LR__2631
1fe70                 | '     long[@qosData][cog] := qos & !$1ff
1fe70     FF 15 26 F5 | 	andn	arg02, #511
1fe74     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fe78     02 00 66 F0 | 	shl	_var01, #2
1fe7c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1fe80     00 15 62 FC | 	wrlong	arg02, _var01
1fe84                 | '     mailbox := $7FF00 + drivercog*12
1fe84     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1fe88     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1fe8c     02 07 02 F6 | 	mov	_var04, _var03
1fe90     01 06 66 F0 | 	shl	_var04, #1
1fe94     02 07 02 F1 | 	add	_var04, _var03
1fe98     02 06 66 F0 | 	shl	_var04, #2
1fe9c     FF 03 00 FF 
1fea0     00 09 06 F6 | 	mov	_var05, ##524032
1fea4     03 09 02 F1 | 	add	_var05, _var04
1fea8                 | '     repeat until LOCKTRY(driverlock)
1fea8     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1feac                 | LR__2632
1feac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1feb0     06 12 72 FD | 	locktry	arg01 wc
1feb4     F4 FF 9F 3D |  if_ae	jmp	#LR__2632
1feb8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1febc                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1febc     00 06 06 F6 | 	mov	_var04, #0
1fec0     01 06 62 FD | 	cogid	_var04
1fec4     00 00 78 FF 
1fec8     00 02 06 F6 | 	mov	_var02, ##-268435456
1fecc     03 03 02 F1 | 	add	_var02, _var04
1fed0     04 03 62 FC | 	wrlong	_var02, _var05
1fed4                 | '     repeat while long[mailbox] < 0
1fed4                 | LR__2633
1fed4     04 03 02 FB | 	rdlong	_var02, _var05
1fed8     00 02 56 F2 | 	cmps	_var02, #0 wc
1fedc     F4 FF 9F CD |  if_b	jmp	#LR__2633
1fee0                 | '     LOCKREL(driverlock)
1fee0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fee4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fee8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1feec     07 12 72 FD | 	lockrel	arg01 wc
1fef0     00 FA 05 F6 | 	mov	result1, #0
1fef4                 | LR__2634
1fef4                 | _psram_spin2_setQos_ret
1fef4     2D 00 64 FD | 	ret
1fef8                 | 
1fef8                 | ' 
1fef8                 | ' '..............................................................................
1fef8                 | ' 
1fef8                 | ' {{
1fef8                 | ' }}
1fef8                 | ' PRI lookupDelay(freq) : delay | profile
1fef8                 | _psram_spin2_lookupDelay
1fef8                 | '     profile := @delayTable
1fef8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1fefc     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1ff00                 | '     delay := long[profile][0]
1ff00     00 03 02 FB | 	rdlong	_var02, _var01
1ff04                 | '     repeat while long[profile][1] 
1ff04     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1ff08     97 16 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1ff0c                 | LR__2640
1ff0c     04 00 06 F1 | 	add	_var01, #4
1ff10     00 FB 09 FB | 	rdlong	result1, _var01 wz
1ff14     04 00 86 F1 | 	sub	_var01, #4
1ff18     1C 00 90 AD |  if_e	jmp	#LR__2642
1ff1c                 | '         if freq +< long[profile][1] 
1ff1c     04 00 06 F1 | 	add	_var01, #4
1ff20     00 FB 01 FB | 	rdlong	result1, _var01
1ff24     04 00 86 F1 | 	sub	_var01, #4
1ff28     FD 12 12 F2 | 	cmp	arg01, result1 wc
1ff2c                 | '             quit
1ff2c                 | '         profile += 4
1ff2c     04 00 06 31 |  if_ae	add	_var01, #4
1ff30                 | '         delay++
1ff30     01 02 06 31 |  if_ae	add	_var02, #1
1ff34     D4 FF 9F 3D |  if_ae	jmp	#LR__2640
1ff38                 | LR__2641
1ff38                 | LR__2642
1ff38     01 FB 01 F6 | 	mov	result1, _var02
1ff3c                 | _psram_spin2_lookupDelay_ret
1ff3c     2D 00 64 FD | 	ret
1ff40                 | 
1ff40                 | ' 
1ff40                 | ' PUB start() : r
1ff40                 | _usbnew_spin2_start
1ff40     00 00 06 F6 | 	mov	_var01, #0
1ff44                 | '   ifnot driver_cog
1ff44     15 00 00 FF 
1ff48     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1ff4c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1ff50     15 00 00 FF 
1ff54     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1ff58     38 00 90 5D |  if_ne	jmp	#LR__2650
1ff5c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1ff5c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1ff60     10 00 06 F6 | 	mov	_var01, #16
1ff64     00 16 06 F6 | 	mov	arg03, #0
1ff68     28 16 62 FD | 	setq	arg03
1ff6c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1ff70     01 00 66 C6 |  if_b	neg	_var01, #1
1ff74                 | '     if r >= 0
1ff74     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff78                 | '       driver_cog := r+1
1ff78     00 03 02 36 |  if_ae	mov	_var02, _var01
1ff7c     01 02 06 31 |  if_ae	add	_var02, #1
1ff80     15 00 00 3F 
1ff84     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1ff88     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1ff8c     15 00 00 3F 
1ff90     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1ff94                 | LR__2650
1ff94     00 FB 01 F6 | 	mov	result1, _var01
1ff98                 | _usbnew_spin2_start_ret
1ff98     2D 00 64 FD | 	ret
1ff9c                 | 
1ff9c                 | '     '' (Always enabled)
1ff9c                 | ' 
1ff9c                 | ' '' Get current pressed state of a keyboard key
1ff9c                 | ' PUB keystate(key) : r | buf[2],tmp
1ff9c                 | _usbnew_spin2_keystate
1ff9c     00 04 06 F6 | 	mov	_var03, #0
1ffa0                 | '   if key >= $E0 && key < $E8
1ffa0     E0 12 56 F2 | 	cmps	arg01, #224 wc
1ffa4     34 00 90 CD |  if_b	jmp	#LR__2660
1ffa8     E8 12 56 F2 | 	cmps	arg01, #232 wc
1ffac     2C 00 90 3D |  if_ae	jmp	#LR__2660
1ffb0                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1ffb0     00 FA 05 F6 | 	mov	result1, #0
1ffb4     13 00 00 FF 
1ffb8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ffbc     09 07 02 F6 | 	mov	_var04, arg01
1ffc0     E0 06 86 F1 | 	sub	_var04, #224
1ffc4     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1ffc8     03 09 4A F0 | 	shr	_var05, _var04 wz
1ffcc     13 00 00 FF 
1ffd0     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1ffd4     01 FA 65 56 |  if_ne	neg	result1, #1
1ffd8     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1ffdc                 | LR__2660
1ffdc                 | '   else
1ffdc                 | '     '' Do this in inline ASM to ensure atomicity
1ffdc                 | '     tmp := @hkbd_report
1ffdc     13 00 00 FF 
1ffe0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ffe4     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1ffe8                 | '     org
1ffe8     13 00 00 FF 
1ffec     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1fff0     97 1E 48 FB | 	callpa	#(@LR__2662-@LR__2661)>>2,fcache_load_ptr_
1fff4                 | LR__2661
1fff4 000             | 	org	0
1fff4 000 28 02 64 FD | 	setq	#1
1fff8 001 04 01 02 FB | 	rdlong	_var01, _var05
1fffc 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
20000 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
20004 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
20008 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2000c 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20010 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20014 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20018 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2001c 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20020 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20024 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20028 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2002c 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20030 00f             | LR__2662
20030                 | 	orgh
20030     02 FB 01 F6 | 	mov	result1, _var03
20034                 | _usbnew_spin2_keystate_ret
20034     2D 00 64 FD | 	ret
20038                 | 
20038                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20038                 | ' 
20038                 | ' '' Return key event from buffer if there is one
20038                 | ' PUB get_key() : r | tail
20038                 | _usbnew_spin2_get_key
20038                 | '   tail := keyq_tail
20038     0F 00 00 FF 
2003c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20040     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20044                 | '   if keyq_head == tail
20044     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20048     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
2004c     0F 00 00 FF 
20050     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20054     00 03 0A F2 | 	cmp	_var02, _var01 wz
20058                 | '     return 0 ' No event
20058     00 FA 05 A6 |  if_e	mov	result1, #0
2005c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20060                 | '   r := keyq_data[tail]
20060     00 03 02 F6 | 	mov	_var02, _var01
20064     02 02 66 F0 | 	shl	_var02, #2
20068     0F 00 00 FF 
2006c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20070     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20074     01 FB 01 FB | 	rdlong	result1, _var02
20078                 | '   if ++tail == KEYQUEUE_SIZE
20078     01 00 06 F1 | 	add	_var01, #1
2007c     80 00 0E F2 | 	cmp	_var01, #128 wz
20080                 | '     tail := 0
20080     00 00 06 A6 |  if_e	mov	_var01, #0
20084                 | '   keyq_tail := tail
20084     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20088     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
2008c     0F 00 00 FF 
20090     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20094                 | _usbnew_spin2_get_key_ret
20094     2D 00 64 FD | 	ret
20098                 | 
20098                 | ' 
20098                 | ' '' Emulate mouse movement
20098                 | ' PUB mouse_move(x,y)
20098                 | _usbnew_spin2_mouse_move
20098     02 4A 05 F6 | 	mov	COUNT_, #2
2009c     A8 00 A0 FD | 	call	#pushregs_
200a0     09 1F 02 F6 | 	mov	local01, arg01
200a4     0A 21 02 F6 | 	mov	local02, arg02
200a8                 | '   mouse_lock := 1
200a8     14 00 00 FF 
200ac     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
200b0     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
200b4     14 00 00 FF 
200b8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
200bc                 | '   waitus(2) ' hope driver is now done
200bc     02 12 06 F6 | 	mov	arg01, #2
200c0     E8 0A B0 FD | 	call	#__system___waitus
200c4                 | '   mouse_xacc := x
200c4     14 00 00 FF 
200c8     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
200cc     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
200d0                 | '   mouse_yacc := y
200d0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
200d4     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
200d8                 | '   if mouse_outptr
200d8     04 00 00 FF 
200dc     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
200e0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
200e4     0F 00 00 FF 
200e8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
200ec     24 00 90 AD |  if_e	jmp	#LR__2670
200f0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
200f0     10 20 66 F0 | 	shl	local02, #16
200f4     0F 1F 32 F9 | 	getword	local01, local01, #0
200f8     0F 21 42 F5 | 	or	local02, local01
200fc     0F 00 00 FF 
20100     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
20104     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
20108     0F 00 00 FF 
2010c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20110     0F 21 62 FC | 	wrlong	local02, local01
20114                 | LR__2670
20114                 | '   mouse_lock := 0
20114     14 00 00 FF 
20118     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
2011c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20120     14 00 00 FF 
20124     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20128     A7 F0 03 F6 | 	mov	ptra, fp
2012c     B2 00 A0 FD | 	call	#popregs_
20130                 | _usbnew_spin2_mouse_move_ret
20130     2D 00 64 FD | 	ret
20134                 | 
20134                 | '     '' Set HAVE_HIDPAD to enable.
20134                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20134                 | ' 
20134                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20134                 | ' PUB hidpad_id(dev) : r
20134                 | _usbnew_spin2_hidpad_id
20134                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20134     13 00 00 FF 
20138     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2013c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20140     09 01 02 F6 | 	mov	_var01, arg01
20144     03 00 66 F0 | 	shl	_var01, #3
20148     09 01 82 F1 | 	sub	_var01, arg01
2014c     02 00 66 F0 | 	shl	_var01, #2
20150     00 FB 01 F1 | 	add	result1, _var01
20154     FD FA 01 FB | 	rdlong	result1, result1
20158     13 00 00 FF 
2015c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20160                 | _usbnew_spin2_hidpad_id_ret
20160     2D 00 64 FD | 	ret
20164                 | 
20164                 | ' 
20164                 | ' '' Get all button states for a device
20164                 | ' PUB hidpad_buttons(dev) : r 
20164                 | _usbnew_spin2_hidpad_buttons
20164                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20164     13 00 00 FF 
20168     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2016c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20170     09 01 02 F6 | 	mov	_var01, arg01
20174     03 00 66 F0 | 	shl	_var01, #3
20178     09 01 82 F1 | 	sub	_var01, arg01
2017c     02 00 66 F0 | 	shl	_var01, #2
20180     00 FB 01 F1 | 	add	result1, _var01
20184     14 FA 05 F1 | 	add	result1, #20
20188     FD FA 01 FB | 	rdlong	result1, result1
2018c     13 00 00 FF 
20190     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20194                 | _usbnew_spin2_hidpad_buttons_ret
20194     2D 00 64 FD | 	ret
20198                 | 
20198                 | ' 
20198                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20198                 | ' PUB hidpad_axis(dev,axnum) : r
20198                 | _usbnew_spin2_hidpad_axis
20198                 | '   if axnum +>= 6
20198     06 14 16 F2 | 	cmp	arg02, #6 wc
2019c                 | '     return 0
2019c     00 FA 05 36 |  if_ae	mov	result1, #0
201a0     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
201a4                 | '   else 
201a4                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
201a4     13 00 00 FF 
201a8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
201ac     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
201b0     09 01 02 F6 | 	mov	_var01, arg01
201b4     03 00 66 F0 | 	shl	_var01, #3
201b8     09 01 82 F1 | 	sub	_var01, arg01
201bc     02 00 66 F0 | 	shl	_var01, #2
201c0     00 FB 01 F1 | 	add	result1, _var01
201c4     04 00 06 F6 | 	mov	_var01, #4
201c8     0A 01 02 F1 | 	add	_var01, arg02
201cc     01 00 66 F0 | 	shl	_var01, #1
201d0     FD 00 02 F1 | 	add	_var01, result1
201d4     00 FB E1 FA | 	rdword	result1, _var01
201d8     0F FA 65 F7 | 	signx	result1, #15
201dc     13 00 00 FF 
201e0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
201e4                 | _usbnew_spin2_hidpad_axis_ret
201e4     2D 00 64 FD | 	ret
201e8                 | 
201e8                 | ' 
201e8                 | ' 
201e8                 | ' '--------------------------------------------------------------
201e8                 | ' '---------- Init the variables, start the cog. ----------------
201e8                 | ' '--------------------------------------------------------------
201e8                 | ' 
201e8                 | ' pub start(mbox,scope,cache) :cog,base | iii
201e8                 | _audio096_spin2_start
201e8     04 4A 05 F6 | 	mov	COUNT_, #4
201ec     A8 00 A0 FD | 	call	#pushregs_
201f0     09 1F 02 F6 | 	mov	local01, arg01
201f4                 | ' 
201f4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
201f4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
201f4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
201f4                 | ' 
201f4                 | ' mailboxaddr:=mbox 
201f4     F2 1E 62 FC | 	wrlong	local01, objptr
201f8                 | ' scope_ptr:=scope
201f8     04 E4 05 F1 | 	add	objptr, #4
201fc     F2 14 62 FC | 	wrlong	arg02, objptr
20200                 | ' cache_ptr:=cache
20200     04 E4 05 F1 | 	add	objptr, #4
20204     F2 16 62 FC | 	wrlong	arg03, objptr
20208                 | ' base:=@channel1[0]
20208     04 E4 05 F1 | 	add	objptr, #4
2020c     F2 20 02 F6 | 	mov	local02, objptr
20210                 | ' long[$40]:=mbox
20210     40 1E 66 FC | 	wrlong	local01, #64
20214                 | ' repeat iii from 0 to 7
20214     00 22 06 F6 | 	mov	local03, #0
20218     02 00 00 FF 
2021c     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20220     0C E4 85 F1 | 	sub	objptr, #12
20224     97 BC 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
20228                 | LR__2680
20228                 | '   long[base+64*iii]:=0
20228     10 1F 02 F6 | 	mov	local01, local02
2022c     11 FD 01 F6 | 	mov	result2, local03
20230     06 FC 65 F0 | 	shl	result2, #6
20234     FE 1E 02 F1 | 	add	local01, result2
20238     0F 01 68 FC | 	wrlong	#0, local01
2023c                 | '   long[base+64*iii+4]:=0
2023c     10 1F 02 F6 | 	mov	local01, local02
20240     11 FD 01 F6 | 	mov	result2, local03
20244     06 FC 65 F0 | 	shl	result2, #6
20248     FE 1E 02 F1 | 	add	local01, result2
2024c     04 1E 06 F1 | 	add	local01, #4
20250     0F 01 68 FC | 	wrlong	#0, local01
20254                 | '   long[base+64*iii+12]:=0
20254     10 25 02 F6 | 	mov	local04, local02
20258     11 1F 02 F6 | 	mov	local01, local03
2025c     06 1E 66 F0 | 	shl	local01, #6
20260     0F 25 02 F1 | 	add	local04, local01
20264     0C 24 06 F1 | 	add	local04, #12
20268     12 01 68 FC | 	wrlong	#0, local04
2026c                 | '   long[base+64*iii+16]:=2 
2026c     10 25 02 F6 | 	mov	local04, local02
20270     11 1F 02 F6 | 	mov	local01, local03
20274     06 1E 66 F0 | 	shl	local01, #6
20278     0F 25 02 F1 | 	add	local04, local01
2027c     10 24 06 F1 | 	add	local04, #16
20280     12 05 68 FC | 	wrlong	#2, local04
20284                 | '   word[base+64*iii+20]:=0
20284     10 25 02 F6 | 	mov	local04, local02
20288     11 1F 02 F6 | 	mov	local01, local03
2028c     06 1E 66 F0 | 	shl	local01, #6
20290     0F 25 02 F1 | 	add	local04, local01
20294     14 24 06 F1 | 	add	local04, #20
20298     12 01 58 FC | 	wrword	#0, local04
2029c                 | '   word[base+64*iii+22]:=8192
2029c     10 25 02 F6 | 	mov	local04, local02
202a0     11 1F 02 F6 | 	mov	local01, local03
202a4     06 1E 66 F0 | 	shl	local01, #6
202a8     0F 25 02 F1 | 	add	local04, local01
202ac     16 24 06 F1 | 	add	local04, #22
202b0     10 00 80 FF 
202b4     12 01 58 FC | 	wrword	##8192, local04
202b8                 | '   word[base+64*iii+24]:=4000+2*iii
202b8     11 25 02 F6 | 	mov	local04, local03
202bc     01 24 66 F0 | 	shl	local04, #1
202c0     07 00 00 FF 
202c4     A0 1F 06 F6 | 	mov	local01, ##4000
202c8     12 1F 02 F1 | 	add	local01, local04
202cc     10 25 02 F6 | 	mov	local04, local02
202d0     11 FD 01 F6 | 	mov	result2, local03
202d4     06 FC 65 F0 | 	shl	result2, #6
202d8     FE 24 02 F1 | 	add	local04, result2
202dc     18 24 06 F1 | 	add	local04, #24
202e0     12 1F 52 FC | 	wrword	local01, local04
202e4                 | '   word[base+64*iii+26]:=2
202e4     10 25 02 F6 | 	mov	local04, local02
202e8     11 1F 02 F6 | 	mov	local01, local03
202ec     06 1E 66 F0 | 	shl	local01, #6
202f0     0F 25 02 F1 | 	add	local04, local01
202f4     1A 24 06 F1 | 	add	local04, #26
202f8     12 05 58 FC | 	wrword	#2, local04
202fc                 | '   long [base+64*iii+8]:=@null | $C0000000
202fc     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
20300     3E 1E 26 F4 | 	bith	local01, #62
20304     10 25 02 F6 | 	mov	local04, local02
20308     11 17 02 F6 | 	mov	arg03, local03
2030c     06 16 66 F0 | 	shl	arg03, #6
20310     0B 25 02 F1 | 	add	local04, arg03
20314     08 24 06 F1 | 	add	local04, #8
20318     12 1F 62 FC | 	wrlong	local01, local04
2031c                 | '   long[base+64*iii+32]:=0
2031c     10 25 02 F6 | 	mov	local04, local02
20320     11 1F 02 F6 | 	mov	local01, local03
20324     06 1E 66 F0 | 	shl	local01, #6
20328     0F 25 02 F1 | 	add	local04, local01
2032c     20 24 06 F1 | 	add	local04, #32
20330     12 01 68 FC | 	wrlong	#0, local04
20334                 | '   long[base+64*iii+36]:=0
20334     10 25 02 F6 | 	mov	local04, local02
20338     11 1F 02 F6 | 	mov	local01, local03
2033c     06 1E 66 F0 | 	shl	local01, #6
20340     0F 25 02 F1 | 	add	local04, local01
20344     24 24 06 F1 | 	add	local04, #36
20348     12 01 68 FC | 	wrlong	#0, local04
2034c                 | '   long[base+64*iii+40]:=0
2034c     10 25 02 F6 | 	mov	local04, local02
20350     11 1F 02 F6 | 	mov	local01, local03
20354     06 1E 66 F0 | 	shl	local01, #6
20358     0F 25 02 F1 | 	add	local04, local01
2035c     28 24 06 F1 | 	add	local04, #40
20360     12 01 68 FC | 	wrlong	#0, local04
20364                 | '   long[base+64*iii+44]:=0
20364     10 25 02 F6 | 	mov	local04, local02
20368     11 1F 02 F6 | 	mov	local01, local03
2036c     06 1E 66 F0 | 	shl	local01, #6
20370     0F 25 02 F1 | 	add	local04, local01
20374     2C 24 06 F1 | 	add	local04, #44
20378     12 01 68 FC | 	wrlong	#0, local04
2037c                 | '   long[base+64*iii+28]:=0
2037c     10 25 02 F6 | 	mov	local04, local02
20380     11 1F 02 F6 | 	mov	local01, local03
20384     06 1E 66 F0 | 	shl	local01, #6
20388     0F 25 02 F1 | 	add	local04, local01
2038c     1C 24 06 F1 | 	add	local04, #28
20390     12 01 68 FC | 	wrlong	#0, local04
20394     01 22 06 F1 | 	add	local03, #1
20398     08 22 56 F2 | 	cmps	local03, #8 wc
2039c     88 FE 9F CD |  if_b	jmp	#LR__2680
203a0                 | LR__2681
203a0     02 00 00 FF 
203a4     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
203a8                 | '   
203a8                 | ' cog:=coginit(16,@audio,@mailboxaddr)
203a8     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
203ac     F2 16 02 F6 | 	mov	arg03, objptr
203b0     10 24 06 F6 | 	mov	local04, #16
203b4     28 16 62 FD | 	setq	arg03
203b8     0A 25 F2 FC | 	coginit	local04, arg02 wc
203bc     01 24 66 C6 |  if_b	neg	local04, #1
203c0                 | ' waitms(100)
203c0     64 12 06 F6 | 	mov	arg01, #100
203c4     78 07 B0 FD | 	call	#__system___waitms
203c8                 | ' return cog,base
203c8     10 FD 01 F6 | 	mov	result2, local02
203cc     12 FB 01 F6 | 	mov	result1, local04
203d0     A7 F0 03 F6 | 	mov	ptra, fp
203d4     B2 00 A0 FD | 	call	#popregs_
203d8                 | _audio096_spin2_start_ret
203d8     2D 00 64 FD | 	ret
203dc                 | 
203dc                 | ' 
203dc                 | ' ' a simple play procedure to not poke everything. 
203dc                 | ' 
203dc                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
203dc                 | _audio096_spin2_play
203dc     0C E4 05 F1 | 	add	objptr, #12
203e0     F2 00 02 F6 | 	mov	_var01, objptr
203e4     06 12 66 F0 | 	shl	arg01, #6
203e8     09 01 02 F1 | 	add	_var01, arg01
203ec     00 13 02 F6 | 	mov	arg01, _var01
203f0     0C 12 06 F1 | 	add	arg01, #12
203f4     09 1B 62 FC | 	wrlong	arg05, arg01
203f8     00 1C 56 F2 | 	cmps	arg06, #0 wc
203fc     00 13 02 36 |  if_ae	mov	arg01, _var01
20400     10 12 06 31 |  if_ae	add	arg01, #16
20404     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
20408     02 1A 06 C1 |  if_b	add	arg05, #2
2040c     00 13 02 C6 |  if_b	mov	arg01, _var01
20410     10 12 06 C1 |  if_b	add	arg01, #16
20414     09 1B 62 CC |  if_b	wrlong	arg05, arg01
20418     0B 13 52 F6 | 	abs	arg01, arg03 wc
2041c     0F 1B 80 FF 
20420     09 1F 1A FD | 	qdiv	##3546895, arg01
20424                 | ' 
20424                 | ' base2:=@channel1[0]+64*channel
20424                 | ' 
20424                 | ' 
20424                 | ' long[base2+12]:= len
20424                 | ' if loop >=0 
20424                 | '   long[base2+16]:= loop
20424     0C E4 85 F1 | 	sub	objptr, #12
20428                 | ' else
20428                 | '   long[base2+16]:= len+2
20428                 | ' word[base2+20]:=vol
20428     00 13 02 F6 | 	mov	arg01, _var01
2042c     14 12 06 F1 | 	add	arg01, #20
20430     09 19 52 FC | 	wrword	arg04, arg01
20434                 | ' word[base2+24]:= 3546895/splfreq 
20434     00 19 02 F6 | 	mov	arg04, _var01
20438     18 18 06 F1 | 	add	arg04, #24
2043c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2043c                 | ' long[base2+28]:=$40000000    
2043c                 | ' long[base2+32]:=0    
2043c                 | ' long[base2+36]:=0    
2043c                 | ' long[base2+40]:=0    
2043c                 | ' long[base2+44]:=0    
2043c                 | ' long[base2+8]:=sample+$C0000000     
2043c     00 00 60 FF 
20440     00 14 06 F1 | 	add	arg02, ##-1073741824
20444     18 12 62 FD | 	getqx	arg01
20448     09 13 82 F6 | 	negc	arg01, arg01
2044c     0C 13 52 FC | 	wrword	arg01, arg04
20450     00 13 02 F6 | 	mov	arg01, _var01
20454     1A 12 06 F1 | 	add	arg01, #26
20458     09 01 5A FC | 	wrword	#256, arg01
2045c     00 13 02 F6 | 	mov	arg01, _var01
20460     1C 12 06 F1 | 	add	arg01, #28
20464     00 00 A0 FF 
20468     09 01 68 FC | 	wrlong	##1073741824, arg01
2046c     00 13 02 F6 | 	mov	arg01, _var01
20470     20 12 06 F1 | 	add	arg01, #32
20474     09 01 68 FC | 	wrlong	#0, arg01
20478     00 13 02 F6 | 	mov	arg01, _var01
2047c     24 12 06 F1 | 	add	arg01, #36
20480     09 01 68 FC | 	wrlong	#0, arg01
20484     00 13 02 F6 | 	mov	arg01, _var01
20488     28 12 06 F1 | 	add	arg01, #40
2048c     09 01 68 FC | 	wrlong	#0, arg01
20490     00 13 02 F6 | 	mov	arg01, _var01
20494     2C 12 06 F1 | 	add	arg01, #44
20498     09 01 68 FC | 	wrlong	#0, arg01
2049c     08 00 06 F1 | 	add	_var01, #8
204a0     00 15 62 FC | 	wrlong	arg02, _var01
204a4                 | _audio096_spin2_play_ret
204a4     2D 00 64 FD | 	ret
204a8                 | 
204a8                 | ' 
204a8                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
204a8                 | _audio096_spin2_play8
204a8                 | ' 
204a8                 | ' base2:=@channel1[0]+64*channel
204a8     0C E4 05 F1 | 	add	objptr, #12
204ac     F2 00 02 F6 | 	mov	_var01, objptr
204b0     06 12 66 F0 | 	shl	arg01, #6
204b4     09 01 02 F1 | 	add	_var01, arg01
204b8                 | ' long[base2]:=0
204b8     00 01 68 FC | 	wrlong	#0, _var01
204bc                 | ' long[base2+8]:=sample+$40000000 
204bc     00 00 20 FF 
204c0     00 14 06 F1 | 	add	arg02, ##1073741824
204c4     00 13 02 F6 | 	mov	arg01, _var01
204c8     08 12 06 F1 | 	add	arg01, #8
204cc     09 15 62 FC | 	wrlong	arg02, arg01
204d0                 | ' if loop>=0
204d0     00 1C 56 F2 | 	cmps	arg06, #0 wc
204d4     0C E4 85 F1 | 	sub	objptr, #12
204d8     1C 00 90 CD |  if_b	jmp	#LR__2690
204dc                 | '   long[base2+12]:=loop
204dc     00 15 02 F6 | 	mov	arg02, _var01
204e0     0C 14 06 F1 | 	add	arg02, #12
204e4     0A 1D 62 FC | 	wrlong	arg06, arg02
204e8                 | '   long[base2+16]:= len
204e8     00 1D 02 F6 | 	mov	arg06, _var01
204ec     10 1C 06 F1 | 	add	arg06, #16
204f0     0E 1B 62 FC | 	wrlong	arg05, arg06
204f4     1C 00 90 FD | 	jmp	#LR__2691
204f8                 | LR__2690
204f8                 | ' else
204f8                 | '   long[base2+12]:= len
204f8     00 1D 02 F6 | 	mov	arg06, _var01
204fc     0C 1C 06 F1 | 	add	arg06, #12
20500     0E 1B 62 FC | 	wrlong	arg05, arg06
20504                 | '   long[base2+16]:= len+1
20504     01 1A 06 F1 | 	add	arg05, #1
20508     00 13 02 F6 | 	mov	arg01, _var01
2050c     10 12 06 F1 | 	add	arg01, #16
20510     09 1B 62 FC | 	wrlong	arg05, arg01
20514                 | LR__2691
20514     0B 17 52 F6 | 	abs	arg03, arg03 wc
20518     0F 1B 80 FF 
2051c     0B 1F 1A FD | 	qdiv	##3546895, arg03
20520                 | ' word[base2+20]:=vol
20520     00 17 02 F6 | 	mov	arg03, _var01
20524     14 16 06 F1 | 	add	arg03, #20
20528     0B 19 52 FC | 	wrword	arg04, arg03
2052c                 | ' word[base2+24]:= 3546895 /splfreq 
2052c     00 13 02 F6 | 	mov	arg01, _var01
20530     18 12 06 F1 | 	add	arg01, #24
20534                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20534     1A 00 06 F1 | 	add	_var01, #26
20538     18 18 62 FD | 	getqx	arg04
2053c     0C 19 82 F6 | 	negc	arg04, arg04
20540     09 19 52 FC | 	wrword	arg04, arg01
20544     00 01 5A FC | 	wrword	#256, _var01
20548                 | _audio096_spin2_play8_ret
20548     2D 00 64 FD | 	ret
2054c                 | 
2054c                 | ' 'long[base2+28]:=$40000000
2054c                 | ' 
2054c                 | '     
2054c                 | ' pub stop(channel) 'silence it
2054c                 | _audio096_spin2_stop
2054c                 | ' 
2054c                 | ' word[@channel1[0]+64*channel+20]:=0
2054c     0C E4 05 F1 | 	add	objptr, #12
20550     F2 00 02 F6 | 	mov	_var01, objptr
20554     09 03 02 F6 | 	mov	_var02, arg01
20558     06 02 66 F0 | 	shl	_var02, #6
2055c     01 01 02 F1 | 	add	_var01, _var02
20560     14 00 06 F1 | 	add	_var01, #20
20564     00 01 58 FC | 	wrword	#0, _var01
20568                 | ' word[@channel1[0]+64*channel+20]:=0
20568     F2 00 02 F6 | 	mov	_var01, objptr
2056c     06 12 66 F0 | 	shl	arg01, #6
20570     09 01 02 F1 | 	add	_var01, arg01
20574     14 00 06 F1 | 	add	_var01, #20
20578     00 01 58 FC | 	wrword	#0, _var01
2057c     0C E4 85 F1 | 	sub	objptr, #12
20580                 | _audio096_spin2_stop_ret
20580     2D 00 64 FD | 	ret
20584                 | hubexit
20584     81 00 80 FD | 	jmp	#cogexit
20588                 | 
20588                 | __system___setbaud
20588     14 7C 06 FB | 	rdlong	muldiva_, #20
2058c     09 7F 02 F6 | 	mov	muldivb_, arg01
20590     BA 00 A0 FD | 	call	#divide_
20594     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
20598                 | LR__2700
20598     3E FA 9D FA | 	rdpin	result1, #62 wc
2059c     FE FC A1 F1 | 	subx	result2, result2
205a0     F4 FF 9F CD |  if_b	jmp	#LR__2700
205a4                 | LR__2701
205a4     40 7C 64 FD | 	dirl	#62
205a8     40 7E 64 FD | 	dirl	#63
205ac     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
205b0     10 7E 66 F0 | 	shl	muldivb_, #16
205b4     07 14 06 F6 | 	mov	arg02, #7
205b8     3F 15 02 F1 | 	add	arg02, muldivb_
205bc     3E F8 0C FC | 	wrpin	#124, #62
205c0     3E 14 16 FC | 	wxpin	arg02, #62
205c4     3F 7C 0C FC | 	wrpin	#62, #63
205c8     14 14 06 F1 | 	add	arg02, #20
205cc     3F 14 16 FC | 	wxpin	arg02, #63
205d0     41 7C 64 FD | 	dirh	#62
205d4     41 7E 64 FD | 	dirh	#63
205d8                 | __system___setbaud_ret
205d8     2D 00 64 FD | 	ret
205dc                 | 
205dc                 | __system___txraw
205dc     01 4A 05 F6 | 	mov	COUNT_, #1
205e0     A8 00 A0 FD | 	call	#pushregs_
205e4     09 1F 02 F6 | 	mov	local01, arg01
205e8     97 06 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
205ec                 | LR__2710
205ec     3E FA 9D FA | 	rdpin	result1, #62 wc
205f0     FE FC A1 F1 | 	subx	result2, result2
205f4     F4 FF 9F CD |  if_b	jmp	#LR__2710
205f8                 | LR__2711
205f8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
205fc     C2 01 00 AF 
20600     00 12 06 A6 |  if_e	mov	arg01, ##230400
20604     80 FF BF AD |  if_e	call	#__system___setbaud
20608     58 7C 64 FD | 	drvl	#62
2060c     3E 1E 26 FC | 	wypin	local01, #62
20610     01 FA 05 F6 | 	mov	result1, #1
20614     A7 F0 03 F6 | 	mov	ptra, fp
20618     B2 00 A0 FD | 	call	#popregs_
2061c                 | __system___txraw_ret
2061c     2D 00 64 FD | 	ret
20620                 | 
20620                 | __system___rxraw
20620     0D 4A 05 F6 | 	mov	COUNT_, #13
20624     A8 00 A0 FD | 	call	#pushregs_
20628     09 1F 02 F6 | 	mov	local01, arg01
2062c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20630     C2 01 00 AF 
20634     00 12 06 A6 |  if_e	mov	arg01, ##230400
20638     4C FF BF AD |  if_e	call	#__system___setbaud
2063c     00 1E 0E F2 | 	cmp	local01, #0 wz
20640     20 00 90 AD |  if_e	jmp	#LR__2720
20644     14 22 06 FB | 	rdlong	local03, #20
20648     0A 22 46 F0 | 	shr	local03, #10
2064c     11 1F 02 FD | 	qmul	local01, local03
20650     1A FA 61 FD | 	getct	result1
20654     18 24 62 FD | 	getqx	local04
20658     12 FB 01 F1 | 	add	result1, local04
2065c     FD 26 02 F6 | 	mov	local05, result1
20660     04 00 90 FD | 	jmp	#LR__2721
20664                 | LR__2720
20664     00 26 06 F6 | 	mov	local05, #0
20668                 | LR__2721
20668     01 28 66 F6 | 	neg	local06, #1
2066c     3F 2A 06 F6 | 	mov	local07, #63
20670     00 2C 06 F6 | 	mov	local08, #0
20674     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20678     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
2067c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20680                 | LR__2722
20680     08 2E 16 F4 | 	testb	local09, #8 wc
20684     09 2E 76 F4 | 	testbn	local09, #9 andc
20688     0A 2E 46 F0 | 	shr	local09, #10
2068c     01 2C 06 C6 |  if_b	mov	local08, #1
20690     40 7E 6C 3D |  if_ae	testp	#63 wz
20694     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20698     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
2069c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
206a0                 | LR__2723
206a0     00 20 06 F6 | 	mov	local02, #0
206a4     00 2C 0E F2 | 	cmp	local08, #0 wz
206a8     01 20 66 56 |  if_ne	neg	local02, #1
206ac     00 30 06 F6 | 	mov	local10, #0
206b0     00 22 06 F6 | 	mov	local03, #0
206b4     00 1E 0E F2 | 	cmp	local01, #0 wz
206b8     01 22 66 56 |  if_ne	neg	local03, #1
206bc     00 24 06 F6 | 	mov	local04, #0
206c0     00 32 06 F6 | 	mov	local11, #0
206c4     13 35 02 F6 | 	mov	local12, local05
206c8     1A FA 61 FD | 	getct	result1
206cc     FD 36 02 F6 | 	mov	local13, result1
206d0     1B 35 82 F1 | 	sub	local12, local13
206d4     00 34 56 F2 | 	cmps	local12, #0 wc
206d8     00 32 26 C6 |  if_b	not	local11, #0
206dc     00 32 0E F2 | 	cmp	local11, #0 wz
206e0     00 24 26 56 |  if_ne	not	local04, #0
206e4     12 23 CA F7 | 	test	local03, local04 wz
206e8     00 30 26 56 |  if_ne	not	local10, #0
206ec     18 21 4A F5 | 	or	local02, local10 wz
206f0     8C FF 9F AD |  if_e	jmp	#LR__2722
206f4     00 2C 0E F2 | 	cmp	local08, #0 wz
206f8     17 29 02 56 |  if_ne	mov	local06, local09
206fc     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
20700     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20704     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
20708     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2070c     14 FB 01 F6 | 	mov	result1, local06
20710     A7 F0 03 F6 | 	mov	ptra, fp
20714     B2 00 A0 FD | 	call	#popregs_
20718                 | __system___rxraw_ret
20718     2D 00 64 FD | 	ret
2071c                 | 
2071c                 | __system___getus
2071c     1A FC 71 FD | 	getct	result2 wc
20720     1A 00 62 FD | 	getct	_var01
20724     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20728     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
2072c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20730     20 00 90 5D |  if_ne	jmp	#LR__2730
20734     14 02 06 FB | 	rdlong	_var02, #20
20738     A1 07 00 FF 
2073c     40 02 16 FD | 	qdiv	_var02, ##1000000
20740     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20744     18 FA 61 FD | 	getqx	result1
20748     FD 02 02 F6 | 	mov	_var02, result1
2074c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20750     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20754                 | LR__2730
20754     01 FD 11 FD | 	qdiv	result2, _var02
20758     19 FC 61 FD | 	getqy	result2
2075c     28 FC 61 FD | 	setq	result2
20760     01 01 12 FD | 	qdiv	_var01, _var02
20764     18 FA 61 FD | 	getqx	result1
20768                 | __system___getus_ret
20768     2D 00 64 FD | 	ret
2076c                 | 
2076c                 | __system____builtin_memmove
2076c     09 01 02 F6 | 	mov	_var01, arg01
20770     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20774     10 00 90 CD |  if_b	jmp	#LR__2740
20778     0A 03 02 F6 | 	mov	_var02, arg02
2077c     0B 03 02 F1 | 	add	_var02, arg03
20780     01 13 52 F2 | 	cmps	arg01, _var02 wc
20784     48 00 90 CD |  if_b	jmp	#LR__2746
20788                 | LR__2740
20788     0B 05 02 F6 | 	mov	_var03, arg03
2078c     02 04 4E F0 | 	shr	_var03, #2 wz
20790     18 00 90 AD |  if_e	jmp	#LR__2745
20794     97 0A 48 FB | 	callpa	#(@LR__2743-@LR__2741)>>2,fcache_load_ptr_
20798                 | LR__2741
20798     02 09 D8 FC | 	rep	@LR__2744, _var03
2079c                 | LR__2742
2079c     0A 05 02 FB | 	rdlong	_var03, arg02
207a0     09 05 62 FC | 	wrlong	_var03, arg01
207a4     04 12 06 F1 | 	add	arg01, #4
207a8     04 14 06 F1 | 	add	arg02, #4
207ac                 | LR__2743
207ac                 | LR__2744
207ac                 | LR__2745
207ac     02 16 CE F7 | 	test	arg03, #2 wz
207b0     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
207b4     09 03 52 5C |  if_ne	wrword	_var02, arg01
207b8     02 12 06 51 |  if_ne	add	arg01, #2
207bc     02 14 06 51 |  if_ne	add	arg02, #2
207c0     01 16 CE F7 | 	test	arg03, #1 wz
207c4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
207c8     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
207cc     28 00 90 FD | 	jmp	#LR__2752
207d0                 | LR__2746
207d0     0B 13 02 F1 | 	add	arg01, arg03
207d4     0B 15 02 F1 | 	add	arg02, arg03
207d8     0B 07 0A F6 | 	mov	_var04, arg03 wz
207dc     18 00 90 AD |  if_e	jmp	#LR__2751
207e0     97 0A 48 FB | 	callpa	#(@LR__2749-@LR__2747)>>2,fcache_load_ptr_
207e4                 | LR__2747
207e4     03 09 D8 FC | 	rep	@LR__2750, _var04
207e8                 | LR__2748
207e8     01 12 86 F1 | 	sub	arg01, #1
207ec     01 14 86 F1 | 	sub	arg02, #1
207f0     0A 03 C2 FA | 	rdbyte	_var02, arg02
207f4     09 03 42 FC | 	wrbyte	_var02, arg01
207f8                 | LR__2749
207f8                 | LR__2750
207f8                 | LR__2751
207f8                 | LR__2752
207f8     00 FB 01 F6 | 	mov	result1, _var01
207fc                 | __system____builtin_memmove_ret
207fc     2D 00 64 FD | 	ret
20800                 | 
20800                 | __system____builtin_strcpy
20800     09 01 02 F6 | 	mov	_var01, arg01
20804     97 0A 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
20808                 | LR__2760
20808     0A FB C9 FA | 	rdbyte	result1, arg02 wz
2080c     09 FB 41 FC | 	wrbyte	result1, arg01
20810     01 14 06 F1 | 	add	arg02, #1
20814     01 12 06 F1 | 	add	arg01, #1
20818     EC FF 9F 5D |  if_ne	jmp	#LR__2760
2081c                 | LR__2761
2081c     00 FB 01 F6 | 	mov	result1, _var01
20820                 | __system____builtin_strcpy_ret
20820     2D 00 64 FD | 	ret
20824                 | 
20824                 | __system____topofstack
20824     00 4A 05 F6 | 	mov	COUNT_, #0
20828     A8 00 A0 FD | 	call	#pushregs_
2082c     08 F0 07 F1 | 	add	ptra, #8
20830     04 4E 05 F1 | 	add	fp, #4
20834     A7 12 62 FC | 	wrlong	arg01, fp
20838     A7 FA 01 F6 | 	mov	result1, fp
2083c     04 4E 85 F1 | 	sub	fp, #4
20840     A7 F0 03 F6 | 	mov	ptra, fp
20844     B2 00 A0 FD | 	call	#popregs_
20848                 | __system____topofstack_ret
20848     2D 00 64 FD | 	ret
2084c                 | 
2084c                 | __system___lockmem
2084c     00 FA 05 F6 | 	mov	result1, #0
20850     01 FA 61 FD | 	cogid	result1
20854     00 FB 05 F1 | 	add	result1, #256
20858                 | LR__2770
20858     09 01 0A FB | 	rdlong	_var01, arg01 wz
2085c     09 FB 61 AC |  if_e	wrlong	result1, arg01
20860     09 01 02 AB |  if_e	rdlong	_var01, arg01
20864     09 01 02 AB |  if_e	rdlong	_var01, arg01
20868     FD 00 0A F2 | 	cmp	_var01, result1 wz
2086c     E8 FF 9F 5D |  if_ne	jmp	#LR__2770
20870                 | __system___lockmem_ret
20870     2D 00 64 FD | 	ret
20874                 | 
20874                 | __system___string_cmp
20874     97 14 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
20878                 | LR__2780
20878     09 01 C2 FA | 	rdbyte	_var01, arg01
2087c     0A 03 C2 FA | 	rdbyte	_var02, arg02
20880     00 05 02 F6 | 	mov	_var03, _var01
20884     01 05 8A F1 | 	sub	_var03, _var02 wz
20888     01 12 06 F1 | 	add	arg01, #1
2088c     01 14 06 F1 | 	add	arg02, #1
20890     0C 00 90 5D |  if_ne	jmp	#LR__2782
20894     00 00 0E F2 | 	cmp	_var01, #0 wz
20898     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
2089c     D8 FF 9F 5D |  if_ne	jmp	#LR__2780
208a0                 | LR__2781
208a0                 | LR__2782
208a0     02 FB 01 F6 | 	mov	result1, _var03
208a4                 | __system___string_cmp_ret
208a4     2D 00 64 FD | 	ret
208a8                 | 
208a8                 | __system___string_concat
208a8     05 4A 05 F6 | 	mov	COUNT_, #5
208ac     A8 00 A0 FD | 	call	#pushregs_
208b0     09 1F 02 F6 | 	mov	local01, arg01
208b4     0A 21 02 F6 | 	mov	local02, arg02
208b8     0F 13 02 F6 | 	mov	arg01, local01
208bc     09 23 02 F6 | 	mov	local03, arg01
208c0     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
208c4                 | LR__2790
208c4     11 FB C9 FA | 	rdbyte	result1, local03 wz
208c8     01 22 06 51 |  if_ne	add	local03, #1
208cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
208d0                 | LR__2791
208d0     09 23 82 F1 | 	sub	local03, arg01
208d4     11 25 02 F6 | 	mov	local04, local03
208d8     10 13 02 F6 | 	mov	arg01, local02
208dc     09 23 02 F6 | 	mov	local03, arg01
208e0     97 06 48 FB | 	callpa	#(@LR__2793-@LR__2792)>>2,fcache_load_ptr_
208e4                 | LR__2792
208e4     11 FB C9 FA | 	rdbyte	result1, local03 wz
208e8     01 22 06 51 |  if_ne	add	local03, #1
208ec     F4 FF 9F 5D |  if_ne	jmp	#LR__2792
208f0                 | LR__2793
208f0     09 23 82 F1 | 	sub	local03, arg01
208f4     12 13 02 F6 | 	mov	arg01, local04
208f8     11 13 02 F1 | 	add	arg01, local03
208fc     01 12 06 F1 | 	add	arg01, #1
20900     24 3E B0 FD | 	call	#__system___gc_alloc_managed
20904     FD 26 0A F6 | 	mov	local05, result1 wz
20908     28 00 90 AD |  if_e	jmp	#LR__2794
2090c     13 13 02 F6 | 	mov	arg01, local05
20910     0F 15 02 F6 | 	mov	arg02, local01
20914     12 17 02 F6 | 	mov	arg03, local04
20918     50 FE BF FD | 	call	#__system____builtin_memmove
2091c     13 13 02 F6 | 	mov	arg01, local05
20920     12 13 02 F1 | 	add	arg01, local04
20924     01 22 06 F1 | 	add	local03, #1
20928     10 15 02 F6 | 	mov	arg02, local02
2092c     11 17 02 F6 | 	mov	arg03, local03
20930     38 FE BF FD | 	call	#__system____builtin_memmove
20934                 | LR__2794
20934     13 FB 01 F6 | 	mov	result1, local05
20938     A7 F0 03 F6 | 	mov	ptra, fp
2093c     B2 00 A0 FD | 	call	#popregs_
20940                 | __system___string_concat_ret
20940     2D 00 64 FD | 	ret
20944                 | 
20944                 | __system___tx
20944     02 4A 05 F6 | 	mov	COUNT_, #2
20948     A8 00 A0 FD | 	call	#pushregs_
2094c     09 1F 02 F6 | 	mov	local01, arg01
20950     0A 1E 0E F2 | 	cmp	local01, #10 wz
20954     18 00 90 5D |  if_ne	jmp	#LR__2800
20958     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2095c     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20960     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20964     02 20 CE F7 | 	test	local02, #2 wz
20968     0D 12 06 56 |  if_ne	mov	arg01, #13
2096c     6C FC BF 5D |  if_ne	call	#__system___txraw
20970                 | LR__2800
20970     0F 13 02 F6 | 	mov	arg01, local01
20974     64 FC BF FD | 	call	#__system___txraw
20978     A7 F0 03 F6 | 	mov	ptra, fp
2097c     B2 00 A0 FD | 	call	#popregs_
20980                 | __system___tx_ret
20980     2D 00 64 FD | 	ret
20984                 | 
20984                 | __system___rx
20984     01 4A 05 F6 | 	mov	COUNT_, #1
20988     A8 00 A0 FD | 	call	#pushregs_
2098c                 | LR__2810
2098c     00 12 06 F6 | 	mov	arg01, #0
20990     8C FC BF FD | 	call	#__system___rxraw
20994     FD 1E 02 F6 | 	mov	local01, result1
20998     FF FF 7F FF 
2099c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
209a0     E8 FF 9F AD |  if_e	jmp	#LR__2810
209a4     0D 1E 0E F2 | 	cmp	local01, #13 wz
209a8     14 00 90 5D |  if_ne	jmp	#LR__2811
209ac     08 E6 05 F1 | 	add	ptr___system__dat__, #8
209b0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
209b4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
209b8     02 FA CD F7 | 	test	result1, #2 wz
209bc     0A 1E 06 56 |  if_ne	mov	local01, #10
209c0                 | LR__2811
209c0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
209c4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
209c8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
209cc     01 12 CE F7 | 	test	arg01, #1 wz
209d0     1C 00 90 AD |  if_e	jmp	#LR__2814
209d4     7F 1E 0E F2 | 	cmp	local01, #127 wz
209d8     0C 00 90 5D |  if_ne	jmp	#LR__2812
209dc     08 12 06 F6 | 	mov	arg01, #8
209e0     60 FF BF FD | 	call	#__system___tx
209e4     08 00 90 FD | 	jmp	#LR__2813
209e8                 | LR__2812
209e8     0F 13 02 F6 | 	mov	arg01, local01
209ec     54 FF BF FD | 	call	#__system___tx
209f0                 | LR__2813
209f0                 | LR__2814
209f0     0F FB 01 F6 | 	mov	result1, local01
209f4     A7 F0 03 F6 | 	mov	ptra, fp
209f8     B2 00 A0 FD | 	call	#popregs_
209fc                 | __system___rx_ret
209fc     2D 00 64 FD | 	ret
20a00                 | 
20a00                 | __system___pinwrite
20a00     09 01 02 F6 | 	mov	_var01, arg01
20a04     1F 00 06 F5 | 	and	_var01, #31
20a08     20 12 CE F7 | 	test	arg01, #32 wz
20a0c     06 12 46 F0 | 	shr	arg01, #6
20a10     09 13 CA F9 | 	bmask	arg01, arg01
20a14     00 13 62 F0 | 	shl	arg01, _var01
20a18     00 15 62 F0 | 	shl	arg02, _var01
20a1c     1C 00 90 AD |  if_e	jmp	#LR__2820
20a20     09 F7 43 F5 | 	or	dirb, arg01
20a24     FD 01 02 F6 | 	mov	_var01, outb
20a28     09 01 22 F5 | 	andn	_var01, arg01
20a2c     09 15 02 F5 | 	and	arg02, arg01
20a30     0A 01 42 F5 | 	or	_var01, arg02
20a34     00 FB 03 F6 | 	mov	outb, _var01
20a38     18 00 90 FD | 	jmp	#LR__2821
20a3c                 | LR__2820
20a3c     09 F5 43 F5 | 	or	dira, arg01
20a40     FC 01 02 F6 | 	mov	_var01, outa
20a44     09 01 22 F5 | 	andn	_var01, arg01
20a48     09 15 02 F5 | 	and	arg02, arg01
20a4c     0A 01 42 F5 | 	or	_var01, arg02
20a50     00 F9 03 F6 | 	mov	outa, _var01
20a54                 | LR__2821
20a54                 | __system___pinwrite_ret
20a54     2D 00 64 FD | 	ret
20a58                 | 
20a58                 | __system___basic_read_line
20a58     06 4A 05 F6 | 	mov	COUNT_, #6
20a5c     A8 00 A0 FD | 	call	#pushregs_
20a60     09 1F 02 F6 | 	mov	local01, arg01
20a64     00 20 06 F6 | 	mov	local02, #0
20a68     18 22 06 F6 | 	mov	local03, #24
20a6c     00 24 06 F6 | 	mov	local04, #0
20a70     18 12 06 F6 | 	mov	arg01, #24
20a74     B0 3C B0 FD | 	call	#__system___gc_alloc_managed
20a78     FD 26 0A F6 | 	mov	local05, result1 wz
20a7c     13 FB 01 A6 |  if_e	mov	result1, local05
20a80     B0 00 90 AD |  if_e	jmp	#LR__2833
20a84                 | LR__2830
20a84     0F 13 02 F6 | 	mov	arg01, local01
20a88     78 0B B0 FD | 	call	#__system___basic_get_char
20a8c     FD 28 02 F6 | 	mov	local06, result1
20a90     01 28 56 F2 | 	cmps	local06, #1 wc
20a94     8C 00 90 CD |  if_b	jmp	#LR__2832
20a98     0A 28 0E F2 | 	cmp	local06, #10 wz
20a9c     10 00 90 5D |  if_ne	jmp	#LR__2831
20aa0     00 24 0E F2 | 	cmp	local04, #0 wz
20aa4     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20aa8     01 20 86 11 |  if_a	sub	local02, #1
20aac     74 00 90 FD | 	jmp	#LR__2832
20ab0                 | LR__2831
20ab0     0D 28 0E F2 | 	cmp	local06, #13 wz
20ab4     01 24 06 A6 |  if_e	mov	local04, #1
20ab8     00 24 06 56 |  if_ne	mov	local04, #0
20abc     08 28 0E F2 | 	cmp	local06, #8 wz
20ac0     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20ac4     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20ac8     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20acc     B4 FF 9F AD |  if_e	jmp	#LR__2830
20ad0     13 17 02 F6 | 	mov	arg03, local05
20ad4     10 17 02 F1 | 	add	arg03, local02
20ad8     0B 29 42 FC | 	wrbyte	local06, arg03
20adc     01 20 06 F1 | 	add	local02, #1
20ae0     11 21 0A F2 | 	cmp	local02, local03 wz
20ae4     9C FF 9F 5D |  if_ne	jmp	#LR__2830
20ae8     11 13 02 F6 | 	mov	arg01, local03
20aec     20 12 06 F1 | 	add	arg01, #32
20af0     34 3C B0 FD | 	call	#__system___gc_alloc_managed
20af4     FD 28 0A F6 | 	mov	local06, result1 wz
20af8     14 FB 01 A6 |  if_e	mov	result1, local06
20afc     34 00 90 AD |  if_e	jmp	#LR__2833
20b00     14 13 02 F6 | 	mov	arg01, local06
20b04     13 15 02 F6 | 	mov	arg02, local05
20b08     11 17 02 F6 | 	mov	arg03, local03
20b0c     5C FC BF FD | 	call	#__system____builtin_memmove
20b10     20 22 06 F1 | 	add	local03, #32
20b14     13 13 02 F6 | 	mov	arg01, local05
20b18     48 3D B0 FD | 	call	#__system___gc_free
20b1c     14 27 02 F6 | 	mov	local05, local06
20b20     60 FF 9F FD | 	jmp	#LR__2830
20b24                 | LR__2832
20b24     13 29 02 F6 | 	mov	local06, local05
20b28     10 29 02 F1 | 	add	local06, local02
20b2c     14 01 48 FC | 	wrbyte	#0, local06
20b30     13 FB 01 F6 | 	mov	result1, local05
20b34                 | LR__2833
20b34     A7 F0 03 F6 | 	mov	ptra, fp
20b38     B2 00 A0 FD | 	call	#popregs_
20b3c                 | __system___basic_read_line_ret
20b3c     2D 00 64 FD | 	ret
20b40                 | 
20b40                 | __system___waitms
20b40     09 01 02 F6 | 	mov	_var01, arg01
20b44     1A 02 62 FD | 	getct	_var02
20b48     14 04 06 FB | 	rdlong	_var03, #20
20b4c     97 14 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
20b50                 | LR__2840
20b50     01 00 00 FF 
20b54     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20b58     1C 00 90 CD |  if_b	jmp	#LR__2842
20b5c     02 03 02 F1 | 	add	_var02, _var03
20b60     01 13 02 F6 | 	mov	arg01, _var02
20b64     00 12 66 FA | 	addct1	arg01, #0
20b68     24 22 60 FD | 	waitct1
20b6c     01 00 00 FF 
20b70     E8 01 86 F1 | 	sub	_var01, ##1000
20b74     D8 FF 9F FD | 	jmp	#LR__2840
20b78                 | LR__2841
20b78                 | LR__2842
20b78     01 00 56 F2 | 	cmps	_var01, #1 wc
20b7c     28 00 90 CD |  if_b	jmp	#LR__2843
20b80     02 01 02 FD | 	qmul	_var01, _var03
20b84     01 00 00 FF 
20b88     E8 17 06 F6 | 	mov	arg03, ##1000
20b8c     19 FA 61 FD | 	getqy	result1
20b90     18 12 62 FD | 	getqx	arg01
20b94     28 FA 61 FD | 	setq	result1
20b98     0B 13 12 FD | 	qdiv	arg01, arg03
20b9c     18 12 62 FD | 	getqx	arg01
20ba0     01 13 62 FA | 	addct1	arg01, _var02
20ba4     24 22 60 FD | 	waitct1
20ba8                 | LR__2843
20ba8                 | __system___waitms_ret
20ba8     2D 00 64 FD | 	ret
20bac                 | 
20bac                 | __system___waitus
20bac     09 01 02 F6 | 	mov	_var01, arg01
20bb0     1A 02 62 FD | 	getct	_var02
20bb4     14 04 06 FB | 	rdlong	_var03, #20
20bb8     97 14 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
20bbc                 | LR__2850
20bbc     A1 07 00 FF 
20bc0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20bc4     1C 00 90 CD |  if_b	jmp	#LR__2852
20bc8     02 03 02 F1 | 	add	_var02, _var03
20bcc     01 13 02 F6 | 	mov	arg01, _var02
20bd0     00 12 66 FA | 	addct1	arg01, #0
20bd4     24 22 60 FD | 	waitct1
20bd8     A1 07 00 FF 
20bdc     40 00 86 F1 | 	sub	_var01, ##1000000
20be0     D8 FF 9F FD | 	jmp	#LR__2850
20be4                 | LR__2851
20be4                 | LR__2852
20be4     01 00 56 F2 | 	cmps	_var01, #1 wc
20be8     28 00 90 CD |  if_b	jmp	#LR__2853
20bec     02 01 02 FD | 	qmul	_var01, _var03
20bf0     A1 07 00 FF 
20bf4     40 16 06 F6 | 	mov	arg03, ##1000000
20bf8     19 FA 61 FD | 	getqy	result1
20bfc     18 12 62 FD | 	getqx	arg01
20c00     28 FA 61 FD | 	setq	result1
20c04     0B 13 12 FD | 	qdiv	arg01, arg03
20c08     18 FA 61 FD | 	getqx	result1
20c0c     FD 02 62 FA | 	addct1	_var02, result1
20c10     24 22 60 FD | 	waitct1
20c14                 | LR__2853
20c14                 | __system___waitus_ret
20c14     2D 00 64 FD | 	ret
20c18                 | 
20c18                 | __system___mount
20c18     0B 4A 05 F6 | 	mov	COUNT_, #11
20c1c     A8 00 A0 FD | 	call	#pushregs_
20c20     09 1F 02 F6 | 	mov	local01, arg01
20c24     0A 21 0A F6 | 	mov	local02, arg02 wz
20c28     01 22 66 F6 | 	neg	local03, #1
20c2c     01 FA 65 A6 |  if_e	neg	result1, #1
20c30     98 02 90 AD |  if_e	jmp	#LR__2875
20c34     0F FB C1 FA | 	rdbyte	result1, local01
20c38     2F FA 0D F2 | 	cmp	result1, #47 wz
20c3c     28 00 90 5D |  if_ne	jmp	#LR__2862
20c40     0F 13 02 F6 | 	mov	arg01, local01
20c44     09 25 02 F6 | 	mov	local04, arg01
20c48     97 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
20c4c                 | LR__2860
20c4c     12 FB C9 FA | 	rdbyte	result1, local04 wz
20c50     01 24 06 51 |  if_ne	add	local04, #1
20c54     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
20c58                 | LR__2861
20c58     09 25 82 F1 | 	sub	local04, arg01
20c5c     12 FB 01 F6 | 	mov	result1, local04
20c60     10 FA 55 F2 | 	cmps	result1, #16 wc
20c64     14 00 90 CD |  if_b	jmp	#LR__2863
20c68                 | LR__2862
20c68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20c6c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20c70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20c74     01 FA 65 F6 | 	neg	result1, #1
20c78     50 02 90 FD | 	jmp	#LR__2875
20c7c                 | LR__2863
20c7c     00 26 06 F6 | 	mov	local05, #0
20c80                 | LR__2864
20c80     04 26 56 F2 | 	cmps	local05, #4 wc
20c84     B0 00 90 3D |  if_ae	jmp	#LR__2869
20c88     13 13 02 F6 | 	mov	arg01, local05
20c8c     02 12 66 F0 | 	shl	arg01, #2
20c90     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20c94     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20c98     09 FB 09 FB | 	rdlong	result1, arg01 wz
20c9c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ca0     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20ca4     13 23 02 86 |  if_c_and_z	mov	local03, local05
20ca8     84 00 90 8D |  if_c_and_z	jmp	#LR__2868
20cac     13 13 02 F6 | 	mov	arg01, local05
20cb0     02 12 66 F0 | 	shl	arg01, #2
20cb4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20cb8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20cbc     09 13 02 FB | 	rdlong	arg01, arg01
20cc0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20cc4     09 25 02 F6 | 	mov	local04, arg01
20cc8     97 06 48 FB | 	callpa	#(@LR__2866-@LR__2865)>>2,fcache_load_ptr_
20ccc                 | LR__2865
20ccc     12 FB C9 FA | 	rdbyte	result1, local04 wz
20cd0     01 24 06 51 |  if_ne	add	local04, #1
20cd4     F4 FF 9F 5D |  if_ne	jmp	#LR__2865
20cd8                 | LR__2866
20cd8     09 25 82 F1 | 	sub	local04, arg01
20cdc     12 29 02 F6 | 	mov	local06, local04
20ce0     14 13 02 F6 | 	mov	arg01, local06
20ce4     0F 13 02 F1 | 	add	arg01, local01
20ce8     09 FB C1 FA | 	rdbyte	result1, arg01
20cec     2F FA 0D F2 | 	cmp	result1, #47 wz
20cf0     14 2B 02 56 |  if_ne	mov	local07, local06
20cf4     0F 2B 02 51 |  if_ne	add	local07, local01
20cf8     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20cfc     30 00 90 5D |  if_ne	jmp	#LR__2867
20d00     13 17 02 F6 | 	mov	arg03, local05
20d04     02 16 66 F0 | 	shl	arg03, #2
20d08     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20d0c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20d10     0B 15 02 FB | 	rdlong	arg02, arg03
20d14     0F 13 02 F6 | 	mov	arg01, local01
20d18     14 17 02 F6 | 	mov	arg03, local06
20d1c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20d20     84 4E B0 FD | 	call	#__system__strncmp
20d24     00 FA 0D F2 | 	cmp	result1, #0 wz
20d28     13 23 02 A6 |  if_e	mov	local03, local05
20d2c     08 00 90 AD |  if_e	jmp	#LR__2869
20d30                 | LR__2867
20d30                 | LR__2868
20d30     01 26 06 F1 | 	add	local05, #1
20d34     48 FF 9F FD | 	jmp	#LR__2864
20d38                 | LR__2869
20d38     FF FF 7F FF 
20d3c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20d40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20d44     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20d48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20d4c     01 FA 65 A6 |  if_e	neg	result1, #1
20d50     78 01 90 AD |  if_e	jmp	#LR__2875
20d54     11 27 02 F6 | 	mov	local05, local03
20d58     13 2B 02 F6 | 	mov	local07, local05
20d5c     02 2A 66 F0 | 	shl	local07, #2
20d60     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20d64     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20d68     15 29 0A FB | 	rdlong	local06, local07 wz
20d6c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20d70     58 00 90 AD |  if_e	jmp	#LR__2870
20d74     4C 28 06 F1 | 	add	local06, #76
20d78     14 2B 0A FB | 	rdlong	local07, local06 wz
20d7c     4C 28 86 F1 | 	sub	local06, #76
20d80     48 00 90 AD |  if_e	jmp	#LR__2870
20d84     4C 28 06 F1 | 	add	local06, #76
20d88     14 2B 02 FB | 	rdlong	local07, local06
20d8c     15 23 02 F6 | 	mov	local03, local07
20d90     13 2A 46 F7 | 	zerox	local07, #19
20d94     14 22 46 F0 | 	shr	local03, #20
20d98     02 22 66 F0 | 	shl	local03, #2
20d9c     ED 22 02 F1 | 	add	local03, __methods__
20da0     11 23 02 FB | 	rdlong	local03, local03
20da4     13 29 02 F6 | 	mov	local06, local05
20da8     02 28 66 F0 | 	shl	local06, #2
20dac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20db0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20db4     14 13 02 FB | 	rdlong	arg01, local06
20db8     F2 28 02 F6 | 	mov	local06, objptr
20dbc     15 E5 01 F6 | 	mov	objptr, local07
20dc0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20dc4     2D 22 62 FD | 	call	local03
20dc8     14 E5 01 F6 | 	mov	objptr, local06
20dcc                 | LR__2870
20dcc     13 2D 02 F6 | 	mov	local08, local05
20dd0     02 2C 66 F0 | 	shl	local08, #2
20dd4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20dd8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20ddc     16 21 62 FC | 	wrlong	local02, local08
20de0     00 20 0E F2 | 	cmp	local02, #0 wz
20de4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20de8     18 00 90 5D |  if_ne	jmp	#LR__2871
20dec     02 26 66 F0 | 	shl	local05, #2
20df0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20df4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20df8     13 01 68 FC | 	wrlong	#0, local05
20dfc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20e00     C4 00 90 FD | 	jmp	#LR__2874
20e04                 | LR__2871
20e04     13 2F 02 F6 | 	mov	local09, local05
20e08     04 2E 66 F0 | 	shl	local09, #4
20e0c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20e10     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20e14     17 13 02 F6 | 	mov	arg01, local09
20e18     0F 15 02 F6 | 	mov	arg02, local01
20e1c     10 16 06 F6 | 	mov	arg03, #16
20e20     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20e24     D4 4C B0 FD | 	call	#__system__strncpy
20e28     48 20 06 F1 | 	add	local02, #72
20e2c     10 2D 0A FB | 	rdlong	local08, local02 wz
20e30     48 20 86 F1 | 	sub	local02, #72
20e34     7C 00 90 AD |  if_e	jmp	#LR__2873
20e38     48 20 06 F1 | 	add	local02, #72
20e3c     10 2D 02 FB | 	rdlong	local08, local02
20e40     16 31 02 F6 | 	mov	local10, local08
20e44     13 2C 46 F7 | 	zerox	local08, #19
20e48     14 30 46 F0 | 	shr	local10, #20
20e4c     02 30 66 F0 | 	shl	local10, #2
20e50     ED 30 02 F1 | 	add	local10, __methods__
20e54     18 31 02 FB | 	rdlong	local10, local10
20e58     17 13 02 F6 | 	mov	arg01, local09
20e5c     F2 32 02 F6 | 	mov	local11, objptr
20e60     16 E5 01 F6 | 	mov	objptr, local08
20e64     2D 30 62 FD | 	call	local10
20e68     19 E5 01 F6 | 	mov	objptr, local11
20e6c     FD 12 0A F6 | 	mov	arg01, result1 wz
20e70     40 00 90 AD |  if_e	jmp	#LR__2872
20e74     13 2D 02 F6 | 	mov	local08, local05
20e78     02 2C 66 F0 | 	shl	local08, #2
20e7c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20e80     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20e84     16 01 68 FC | 	wrlong	#0, local08
20e88     02 26 66 F0 | 	shl	local05, #2
20e8c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20e90     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20e94     13 01 68 FC | 	wrlong	#0, local05
20e98     09 13 6A F6 | 	neg	arg01, arg01 wz
20e9c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
20ea0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20ea4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20ea8     01 FA 65 56 |  if_ne	neg	result1, #1
20eac     00 FA 05 A6 |  if_e	mov	result1, #0
20eb0     18 00 90 FD | 	jmp	#LR__2875
20eb4                 | LR__2872
20eb4                 | LR__2873
20eb4     02 26 66 F0 | 	shl	local05, #2
20eb8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ebc     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20ec0     13 2F 62 FC | 	wrlong	local09, local05
20ec4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ec8                 | LR__2874
20ec8     00 FA 05 F6 | 	mov	result1, #0
20ecc                 | LR__2875
20ecc     A7 F0 03 F6 | 	mov	ptra, fp
20ed0     B2 00 A0 FD | 	call	#popregs_
20ed4                 | __system___mount_ret
20ed4     2D 00 64 FD | 	ret
20ed8                 | 
20ed8                 | __system___chdir
20ed8     00 4A 05 F6 | 	mov	COUNT_, #0
20edc     A8 00 A0 FD | 	call	#pushregs_
20ee0     40 F0 07 F1 | 	add	ptra, #64
20ee4     04 4E 05 F1 | 	add	fp, #4
20ee8     A7 12 62 FC | 	wrlong	arg01, fp
20eec     04 4E 05 F1 | 	add	fp, #4
20ef0     A7 14 02 F6 | 	mov	arg02, fp
20ef4     08 4E 85 F1 | 	sub	fp, #8
20ef8     A4 48 B0 FD | 	call	#__system__stat
20efc     3C 4E 05 F1 | 	add	fp, #60
20f00     A7 FA 61 FC | 	wrlong	result1, fp
20f04     3C 4E 85 F1 | 	sub	fp, #60
20f08     00 FA 0D F2 | 	cmp	result1, #0 wz
20f0c     3C 4E 05 51 |  if_ne	add	fp, #60
20f10     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20f14     3C 4E 85 51 |  if_ne	sub	fp, #60
20f18     BC 00 90 5D |  if_ne	jmp	#LR__2882
20f1c     10 4E 05 F1 | 	add	fp, #16
20f20     A7 12 02 FB | 	rdlong	arg01, fp
20f24     10 4E 85 F1 | 	sub	fp, #16
20f28     78 00 00 FF 
20f2c     00 12 06 F5 | 	and	arg01, ##61440
20f30     08 00 00 FF 
20f34     00 12 0E F2 | 	cmp	arg01, ##4096 wz
20f38     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
20f3c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
20f40     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
20f44     01 FA 65 56 |  if_ne	neg	result1, #1
20f48     8C 00 90 5D |  if_ne	jmp	#LR__2882
20f4c     04 4E 05 F1 | 	add	fp, #4
20f50     A7 16 02 FB | 	rdlong	arg03, fp
20f54     04 4E 85 F1 | 	sub	fp, #4
20f58     0B 17 C2 FA | 	rdbyte	arg03, arg03
20f5c     2F 16 0E F2 | 	cmp	arg03, #47 wz
20f60     24 00 90 5D |  if_ne	jmp	#LR__2880
20f64     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20f68     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f6c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20f70     04 4E 05 F1 | 	add	fp, #4
20f74     A7 14 02 FB | 	rdlong	arg02, fp
20f78     04 4E 85 F1 | 	sub	fp, #4
20f7c     00 17 06 F6 | 	mov	arg03, #256
20f80     78 4B B0 FD | 	call	#__system__strncpy
20f84     4C 00 90 FD | 	jmp	#LR__2881
20f88                 | LR__2880
20f88     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20f8c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f90     38 4E 05 F1 | 	add	fp, #56
20f94     A7 12 62 FC | 	wrlong	arg01, fp
20f98     38 4E 85 F1 | 	sub	fp, #56
20f9c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
20fa0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
20fa4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20fa8     00 17 06 F6 | 	mov	arg03, #256
20fac     4C 4B B0 FD | 	call	#__system__strncpy
20fb0     38 4E 05 F1 | 	add	fp, #56
20fb4     A7 12 02 FB | 	rdlong	arg01, fp
20fb8     34 4E 85 F1 | 	sub	fp, #52
20fbc     A7 14 02 FB | 	rdlong	arg02, fp
20fc0     04 4E 85 F1 | 	sub	fp, #4
20fc4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20fc8     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
20fcc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20fd0     10 00 B0 FD | 	call	#__system____getvfsforfile
20fd4                 | LR__2881
20fd4     00 FA 05 F6 | 	mov	result1, #0
20fd8                 | LR__2882
20fd8     A7 F0 03 F6 | 	mov	ptra, fp
20fdc     B2 00 A0 FD | 	call	#popregs_
20fe0                 | __system___chdir_ret
20fe0     2D 00 64 FD | 	ret
20fe4                 | 
20fe4                 | __system____getvfsforfile
20fe4     0E 4A 05 F6 | 	mov	COUNT_, #14
20fe8     A8 00 A0 FD | 	call	#pushregs_
20fec     09 1F 02 F6 | 	mov	local01, arg01
20ff0     0A 21 02 F6 | 	mov	local02, arg02
20ff4     0B 23 02 F6 | 	mov	local03, arg03
20ff8     97 10 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20ffc                 | LR__2890
20ffc     10 FB C1 FA | 	rdbyte	result1, local02
21000     2F FA 0D F2 | 	cmp	result1, #47 wz
21004     01 20 06 A1 |  if_e	add	local02, #1
21008     10 25 C2 AA |  if_e	rdbyte	local04, local02
2100c     01 20 86 A1 |  if_e	sub	local02, #1
21010     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
21014     01 20 06 A1 |  if_e	add	local02, #1
21018     E0 FF 9F AD |  if_e	jmp	#LR__2890
2101c                 | LR__2891
2101c     10 25 C2 FA | 	rdbyte	local04, local02
21020     2F 24 0E F2 | 	cmp	local04, #47 wz
21024     14 00 90 5D |  if_ne	jmp	#LR__2892
21028     0F 13 02 F6 | 	mov	arg01, local01
2102c     10 15 02 F6 | 	mov	arg02, local02
21030     00 17 06 F6 | 	mov	arg03, #256
21034     C4 4A B0 FD | 	call	#__system__strncpy
21038     7C 00 90 FD | 	jmp	#LR__2894
2103c                 | LR__2892
2103c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21040     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21044     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21048     0F 13 02 F6 | 	mov	arg01, local01
2104c     00 17 06 F6 | 	mov	arg03, #256
21050     A8 4A B0 FD | 	call	#__system__strncpy
21054     10 25 CA FA | 	rdbyte	local04, local02 wz
21058     5C 00 90 AD |  if_e	jmp	#LR__2893
2105c     10 25 C2 FA | 	rdbyte	local04, local02
21060     2E 24 0E F2 | 	cmp	local04, #46 wz
21064     01 20 06 A1 |  if_e	add	local02, #1
21068     10 27 C2 AA |  if_e	rdbyte	local05, local02
2106c     01 20 86 A1 |  if_e	sub	local02, #1
21070     13 29 02 A6 |  if_e	mov	local06, local05
21074     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21078     3C 00 90 AD |  if_e	jmp	#LR__2893
2107c     0F 27 C2 FA | 	rdbyte	local05, local01
21080     2F 26 0E F2 | 	cmp	local05, #47 wz
21084     01 1E 06 A1 |  if_e	add	local01, #1
21088     0F 25 C2 AA |  if_e	rdbyte	local04, local01
2108c     01 1E 86 A1 |  if_e	sub	local01, #1
21090     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21094     80 01 00 5F 
21098     94 14 06 56 |  if_ne	mov	arg02, ##@LR__4990
2109c     0F 13 02 56 |  if_ne	mov	arg01, local01
210a0     00 17 06 56 |  if_ne	mov	arg03, #256
210a4     A0 4A B0 5D |  if_ne	call	#__system__strncat
210a8     0F 13 02 F6 | 	mov	arg01, local01
210ac     10 15 02 F6 | 	mov	arg02, local02
210b0     00 17 06 F6 | 	mov	arg03, #256
210b4     90 4A B0 FD | 	call	#__system__strncat
210b8                 | LR__2893
210b8                 | LR__2894
210b8     0F 13 02 F6 | 	mov	arg01, local01
210bc     48 4C B0 FD | 	call	#__system___normalizeName
210c0     0F 25 CA FA | 	rdbyte	local04, local01 wz
210c4     1C 00 90 AD |  if_e	jmp	#LR__2895
210c8     0F 25 C2 FA | 	rdbyte	local04, local01
210cc     2F 24 0E F2 | 	cmp	local04, #47 wz
210d0     01 1E 06 A1 |  if_e	add	local01, #1
210d4     0F 29 C2 AA |  if_e	rdbyte	local06, local01
210d8     01 1E 86 A1 |  if_e	sub	local01, #1
210dc     00 28 4E A2 |  if_e	cmps	local06, #0 wz
210e0     18 00 90 5D |  if_ne	jmp	#LR__2896
210e4                 | LR__2895
210e4     01 00 00 FF 
210e8     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
210ec     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
210f0     01 00 00 FF 
210f4     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
210f8     EC 01 90 FD | 	jmp	#LR__2910
210fc                 | LR__2896
210fc     00 2A 06 F6 | 	mov	local07, #0
21100                 | LR__2897
21100     04 2A 56 F2 | 	cmps	local07, #4 wc
21104     CC 01 90 3D |  if_ae	jmp	#LR__2909
21108     15 29 02 F6 | 	mov	local06, local07
2110c     02 28 66 F0 | 	shl	local06, #2
21110     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21114     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21118     14 29 0A FB | 	rdlong	local06, local06 wz
2111c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21120     A8 01 90 AD |  if_e	jmp	#LR__2908
21124     15 25 02 F6 | 	mov	local04, local07
21128     02 24 66 F0 | 	shl	local04, #2
2112c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21130     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21134     12 13 02 FB | 	rdlong	arg01, local04
21138     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2113c     09 2D 02 F6 | 	mov	local08, arg01
21140     97 06 48 FB | 	callpa	#(@LR__2899-@LR__2898)>>2,fcache_load_ptr_
21144                 | LR__2898
21144     16 FB C9 FA | 	rdbyte	result1, local08 wz
21148     01 2C 06 51 |  if_ne	add	local08, #1
2114c     F4 FF 9F 5D |  if_ne	jmp	#LR__2898
21150                 | LR__2899
21150     09 2D 82 F1 | 	sub	local08, arg01
21154     16 2F 02 F6 | 	mov	local09, local08
21158     17 25 02 F6 | 	mov	local04, local09
2115c     0F 25 02 F1 | 	add	local04, local01
21160     12 29 C2 FA | 	rdbyte	local06, local04
21164     2F 28 0E F2 | 	cmp	local06, #47 wz
21168     17 31 02 56 |  if_ne	mov	local10, local09
2116c     0F 31 02 51 |  if_ne	add	local10, local01
21170     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21174     54 01 90 5D |  if_ne	jmp	#LR__2907
21178     15 17 02 F6 | 	mov	arg03, local07
2117c     02 16 66 F0 | 	shl	arg03, #2
21180     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21184     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21188     0B 15 02 FB | 	rdlong	arg02, arg03
2118c     17 17 02 F6 | 	mov	arg03, local09
21190     0F 13 02 F6 | 	mov	arg01, local01
21194     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21198     0C 4A B0 FD | 	call	#__system__strncmp
2119c     00 FA 4D F2 | 	cmps	result1, #0 wz
211a0     28 01 90 5D |  if_ne	jmp	#LR__2907
211a4     15 33 02 F6 | 	mov	local11, local07
211a8     02 32 66 F0 | 	shl	local11, #2
211ac     74 E6 05 F1 | 	add	ptr___system__dat__, #116
211b0     F3 32 02 F1 | 	add	local11, ptr___system__dat__
211b4     19 35 02 FB | 	rdlong	local12, local11
211b8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
211bc     97 22 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
211c0                 | LR__2900
211c0     17 29 02 F6 | 	mov	local06, local09
211c4     01 28 06 F1 | 	add	local06, #1
211c8     0F 29 02 F1 | 	add	local06, local01
211cc     14 33 C2 FA | 	rdbyte	local11, local06
211d0     2E 32 0E F2 | 	cmp	local11, #46 wz
211d4     2C 00 90 5D |  if_ne	jmp	#LR__2902
211d8     17 33 02 F6 | 	mov	local11, local09
211dc     02 32 06 F1 | 	add	local11, #2
211e0     0F 33 02 F1 | 	add	local11, local01
211e4     19 31 C2 FA | 	rdbyte	local10, local11
211e8     2F 30 0E F2 | 	cmp	local10, #47 wz
211ec     17 37 02 56 |  if_ne	mov	local13, local09
211f0     02 36 06 51 |  if_ne	add	local13, #2
211f4     0F 37 02 51 |  if_ne	add	local13, local01
211f8     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
211fc     01 2E 06 A1 |  if_e	add	local09, #1
21200     BC FF 9F AD |  if_e	jmp	#LR__2900
21204                 | LR__2901
21204                 | LR__2902
21204     00 22 0E F2 | 	cmp	local03, #0 wz
21208     11 13 02 56 |  if_ne	mov	arg01, local03
2120c     0F 15 02 56 |  if_ne	mov	arg02, local01
21210     00 17 06 56 |  if_ne	mov	arg03, #256
21214     E4 48 B0 5D |  if_ne	call	#__system__strncpy
21218     0F 15 02 F6 | 	mov	arg02, local01
2121c     17 15 02 F1 | 	add	arg02, local09
21220     01 14 06 F1 | 	add	arg02, #1
21224     0F 13 02 F6 | 	mov	arg01, local01
21228     D4 F5 BF FD | 	call	#__system____builtin_strcpy
2122c     0F 13 02 F6 | 	mov	arg01, local01
21230     09 2D 02 F6 | 	mov	local08, arg01
21234     97 06 48 FB | 	callpa	#(@LR__2904-@LR__2903)>>2,fcache_load_ptr_
21238                 | LR__2903
21238     16 FB C9 FA | 	rdbyte	result1, local08 wz
2123c     01 2C 06 51 |  if_ne	add	local08, #1
21240     F4 FF 9F 5D |  if_ne	jmp	#LR__2903
21244                 | LR__2904
21244     09 2D 82 F1 | 	sub	local08, arg01
21248     16 2F 02 F6 | 	mov	local09, local08
2124c                 | LR__2905
2124c     01 2E 56 F2 | 	cmps	local09, #1 wc
21250     70 00 90 CD |  if_b	jmp	#LR__2906
21254     17 25 02 F6 | 	mov	local04, local09
21258     0F 25 02 F1 | 	add	local04, local01
2125c     12 33 C2 FA | 	rdbyte	local11, local04
21260     2F 32 0E F2 | 	cmp	local11, #47 wz
21264     17 33 02 A6 |  if_e	mov	local11, local09
21268     0F 33 02 A1 |  if_e	add	local11, local01
2126c     19 01 48 AC |  if_e	wrbyte	#0, local11
21270     01 2E 86 A1 |  if_e	sub	local09, #1
21274     D4 FF 9F AD |  if_e	jmp	#LR__2905
21278     17 25 02 F6 | 	mov	local04, local09
2127c     0F 25 02 F1 | 	add	local04, local01
21280     12 33 C2 FA | 	rdbyte	local11, local04
21284     2E 32 0E F2 | 	cmp	local11, #46 wz
21288     38 00 90 5D |  if_ne	jmp	#LR__2906
2128c     02 2E 56 F2 | 	cmps	local09, #2 wc
21290     30 00 90 CD |  if_b	jmp	#LR__2906
21294     17 39 02 F6 | 	mov	local14, local09
21298     01 38 86 F1 | 	sub	local14, #1
2129c     0F 39 02 F1 | 	add	local14, local01
212a0     1C 27 C2 FA | 	rdbyte	local05, local14
212a4     2F 26 0E F2 | 	cmp	local05, #47 wz
212a8     18 00 90 5D |  if_ne	jmp	#LR__2906
212ac     17 25 02 F6 | 	mov	local04, local09
212b0     01 24 86 F1 | 	sub	local04, #1
212b4     0F 25 02 F1 | 	add	local04, local01
212b8     12 01 48 FC | 	wrbyte	#0, local04
212bc     02 2E 86 F1 | 	sub	local09, #2
212c0     88 FF 9F FD | 	jmp	#LR__2905
212c4                 | LR__2906
212c4     1A FB 01 F6 | 	mov	result1, local12
212c8     1C 00 90 FD | 	jmp	#LR__2910
212cc                 | LR__2907
212cc                 | LR__2908
212cc     01 2A 06 F1 | 	add	local07, #1
212d0     2C FE 9F FD | 	jmp	#LR__2897
212d4                 | LR__2909
212d4     03 00 00 FF 
212d8     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
212dc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
212e0     03 00 00 FF 
212e4     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
212e8                 | LR__2910
212e8     A7 F0 03 F6 | 	mov	ptra, fp
212ec     B2 00 A0 FD | 	call	#popregs_
212f0                 | __system____getvfsforfile_ret
212f0     2D 00 64 FD | 	ret
212f4                 | 
212f4                 | __system___basic_open
212f4     05 4A 05 F6 | 	mov	COUNT_, #5
212f8     A8 00 A0 FD | 	call	#pushregs_
212fc     0A 1F 02 F6 | 	mov	local01, arg02
21300     0B 21 02 F6 | 	mov	local02, arg03
21304     0C 23 02 F6 | 	mov	local03, arg04
21308     00 24 06 F6 | 	mov	local04, #0
2130c     C4 47 B0 FD | 	call	#__system____getftab
21310     FD 26 0A F6 | 	mov	local05, result1 wz
21314     18 00 90 5D |  if_ne	jmp	#LR__2920
21318     EE 12 02 F6 | 	mov	arg01, abortchain
2131c     0C 14 06 F6 | 	mov	arg02, #12
21320     01 16 06 F6 | 	mov	arg03, #1
21324     DA 00 A0 FD | 	call	#__longjmp
21328     01 FA 65 F6 | 	neg	result1, #1
2132c     14 01 90 FD | 	jmp	#LR__2929
21330                 | LR__2920
21330     08 26 06 F1 | 	add	local05, #8
21334     13 FB 09 FB | 	rdlong	result1, local05 wz
21338     08 26 86 F1 | 	sub	local05, #8
2133c     13 13 02 56 |  if_ne	mov	arg01, local05
21340     E4 3E B0 5D |  if_ne	call	#__system___closeraw
21344     00 1E 0E F2 | 	cmp	local01, #0 wz
21348     00 20 0E A2 |  if_e	cmp	local02, #0 wz
2134c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21350     3C 00 90 AD |  if_e	jmp	#LR__2922
21354     0C 12 06 F6 | 	mov	arg01, #12
21358     CC 33 B0 FD | 	call	#__system___gc_alloc_managed
2135c     FD 24 0A F6 | 	mov	local04, result1 wz
21360     18 00 90 5D |  if_ne	jmp	#LR__2921
21364     EE 12 02 F6 | 	mov	arg01, abortchain
21368     07 14 06 F6 | 	mov	arg02, #7
2136c     01 16 06 F6 | 	mov	arg03, #1
21370     DA 00 A0 FD | 	call	#__longjmp
21374     01 FA 65 F6 | 	neg	result1, #1
21378     C8 00 90 FD | 	jmp	#LR__2929
2137c                 | LR__2921
2137c     12 01 68 FC | 	wrlong	#0, local04
21380     04 24 06 F1 | 	add	local04, #4
21384     12 01 68 FC | 	wrlong	#0, local04
21388     04 24 86 F1 | 	sub	local04, #4
2138c     13 25 62 FC | 	wrlong	local04, local05
21390                 | LR__2922
21390     00 1E 0E F2 | 	cmp	local01, #0 wz
21394     20 00 90 AD |  if_e	jmp	#LR__2923
21398     12 1F 62 FC | 	wrlong	local01, local04
2139c     12 FB 01 F6 | 	mov	result1, local04
213a0     00 78 04 FF 
213a4     00 FA 45 F5 | 	or	result1, ##149946368
213a8     1C 26 06 F1 | 	add	local05, #28
213ac     13 FB 61 FC | 	wrlong	result1, local05
213b0     1C 26 86 F1 | 	sub	local05, #28
213b4     0C 00 90 FD | 	jmp	#LR__2924
213b8                 | LR__2923
213b8     1C 26 06 F1 | 	add	local05, #28
213bc     13 01 68 FC | 	wrlong	#0, local05
213c0     1C 26 86 F1 | 	sub	local05, #28
213c4                 | LR__2924
213c4     00 20 0E F2 | 	cmp	local02, #0 wz
213c8     28 00 90 AD |  if_e	jmp	#LR__2925
213cc     04 24 06 F1 | 	add	local04, #4
213d0     12 21 62 FC | 	wrlong	local02, local04
213d4     04 24 86 F1 | 	sub	local04, #4
213d8     12 FB 01 F6 | 	mov	result1, local04
213dc     00 80 04 FF 
213e0     00 FA 45 F5 | 	or	result1, ##150994944
213e4     20 26 06 F1 | 	add	local05, #32
213e8     13 FB 61 FC | 	wrlong	result1, local05
213ec     20 26 86 F1 | 	sub	local05, #32
213f0     0C 00 90 FD | 	jmp	#LR__2926
213f4                 | LR__2925
213f4     20 26 06 F1 | 	add	local05, #32
213f8     13 01 68 FC | 	wrlong	#0, local05
213fc     20 26 86 F1 | 	sub	local05, #32
21400                 | LR__2926
21400     00 22 0E F2 | 	cmp	local03, #0 wz
21404     24 00 90 AD |  if_e	jmp	#LR__2927
21408     08 24 06 F1 | 	add	local04, #8
2140c     12 23 62 FC | 	wrlong	local03, local04
21410     08 24 86 F1 | 	sub	local04, #8
21414     00 88 04 FF 
21418     00 24 46 F5 | 	or	local04, ##152043520
2141c     24 26 06 F1 | 	add	local05, #36
21420     13 25 62 FC | 	wrlong	local04, local05
21424     24 26 86 F1 | 	sub	local05, #36
21428     0C 00 90 FD | 	jmp	#LR__2928
2142c                 | LR__2927
2142c     24 26 06 F1 | 	add	local05, #36
21430     13 01 68 FC | 	wrlong	#0, local05
21434     24 26 86 F1 | 	sub	local05, #36
21438                 | LR__2928
21438     08 26 06 F1 | 	add	local05, #8
2143c     13 0F 68 FC | 	wrlong	#7, local05
21440     00 FA 05 F6 | 	mov	result1, #0
21444                 | LR__2929
21444     A7 F0 03 F6 | 	mov	ptra, fp
21448     B2 00 A0 FD | 	call	#popregs_
2144c                 | __system___basic_open_ret
2144c     2D 00 64 FD | 	ret
21450                 | 
21450                 | __system___basic_open_string
21450     04 4A 05 F6 | 	mov	COUNT_, #4
21454     A8 00 A0 FD | 	call	#pushregs_
21458     0A 1F 02 F6 | 	mov	local01, arg02
2145c     0B 21 02 F6 | 	mov	local02, arg03
21460     70 46 B0 FD | 	call	#__system____getftab
21464     FD 22 0A F6 | 	mov	local03, result1 wz
21468     18 00 90 5D |  if_ne	jmp	#LR__2930
2146c     EE 12 02 F6 | 	mov	arg01, abortchain
21470     0C 14 06 F6 | 	mov	arg02, #12
21474     01 16 06 F6 | 	mov	arg03, #1
21478     DA 00 A0 FD | 	call	#__longjmp
2147c     01 FA 65 F6 | 	neg	result1, #1
21480     58 00 90 FD | 	jmp	#LR__2932
21484                 | LR__2930
21484     08 22 06 F1 | 	add	local03, #8
21488     11 19 0A FB | 	rdlong	arg04, local03 wz
2148c     08 22 86 F1 | 	sub	local03, #8
21490     11 13 02 56 |  if_ne	mov	arg01, local03
21494     90 3D B0 5D |  if_ne	call	#__system___closeraw
21498     0F 15 02 F6 | 	mov	arg02, local01
2149c     10 17 02 F6 | 	mov	arg03, local02
214a0     11 13 02 F6 | 	mov	arg01, local03
214a4     B6 19 06 F6 | 	mov	arg04, #438
214a8     78 3A B0 FD | 	call	#__system___openraw
214ac     FD 24 02 F6 | 	mov	local04, result1
214b0     00 24 56 F2 | 	cmps	local04, #0 wc
214b4     20 00 90 3D |  if_ae	jmp	#LR__2931
214b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
214bc     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
214c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
214c4     EE 12 02 F6 | 	mov	arg01, abortchain
214c8     01 16 06 F6 | 	mov	arg03, #1
214cc     DA 00 A0 FD | 	call	#__longjmp
214d0     01 FA 65 F6 | 	neg	result1, #1
214d4     04 00 90 FD | 	jmp	#LR__2932
214d8                 | LR__2931
214d8     12 FB 01 F6 | 	mov	result1, local04
214dc                 | LR__2932
214dc     A7 F0 03 F6 | 	mov	ptra, fp
214e0     B2 00 A0 FD | 	call	#popregs_
214e4                 | __system___basic_open_string_ret
214e4     2D 00 64 FD | 	ret
214e8                 | 
214e8                 | __system___basic_print_char
214e8     03 4A 05 F6 | 	mov	COUNT_, #3
214ec     A8 00 A0 FD | 	call	#pushregs_
214f0     0A 1F 02 F6 | 	mov	local01, arg02
214f4     30 4D B0 FD | 	call	#__system___gettxfunc
214f8     FD 20 0A F6 | 	mov	local02, result1 wz
214fc     00 FA 05 A6 |  if_e	mov	result1, #0
21500     30 00 90 AD |  if_e	jmp	#LR__2940
21504     10 23 02 F6 | 	mov	local03, local02
21508     13 20 46 F7 | 	zerox	local02, #19
2150c     14 22 46 F0 | 	shr	local03, #20
21510     02 22 66 F0 | 	shl	local03, #2
21514     ED 22 02 F1 | 	add	local03, __methods__
21518     11 23 02 FB | 	rdlong	local03, local03
2151c     0F 13 02 F6 | 	mov	arg01, local01
21520     F2 1E 02 F6 | 	mov	local01, objptr
21524     10 E5 01 F6 | 	mov	objptr, local02
21528     2D 22 62 FD | 	call	local03
2152c     0F E5 01 F6 | 	mov	objptr, local01
21530     01 FA 05 F6 | 	mov	result1, #1
21534                 | LR__2940
21534     A7 F0 03 F6 | 	mov	ptra, fp
21538     B2 00 A0 FD | 	call	#popregs_
2153c                 | __system___basic_print_char_ret
2153c     2D 00 64 FD | 	ret
21540                 | 
21540                 | __system___basic_print_string
21540     03 4A 05 F6 | 	mov	COUNT_, #3
21544     A8 00 A0 FD | 	call	#pushregs_
21548     0A 1F 02 F6 | 	mov	local01, arg02
2154c     0B 21 02 F6 | 	mov	local02, arg03
21550     D4 4C B0 FD | 	call	#__system___gettxfunc
21554     FD 22 0A F6 | 	mov	local03, result1 wz
21558     00 FA 05 A6 |  if_e	mov	result1, #0
2155c     18 00 90 AD |  if_e	jmp	#LR__2950
21560     00 1E 0E F2 | 	cmp	local01, #0 wz
21564     00 FA 05 A6 |  if_e	mov	result1, #0
21568     11 13 02 56 |  if_ne	mov	arg01, local03
2156c     10 15 02 56 |  if_ne	mov	arg02, local02
21570     0F 17 02 56 |  if_ne	mov	arg03, local01
21574     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21578                 | LR__2950
21578     A7 F0 03 F6 | 	mov	ptra, fp
2157c     B2 00 A0 FD | 	call	#popregs_
21580                 | __system___basic_print_string_ret
21580     2D 00 64 FD | 	ret
21584                 | 
21584                 | __system___basic_print_integer
21584     04 4A 05 F6 | 	mov	COUNT_, #4
21588     A8 00 A0 FD | 	call	#pushregs_
2158c     0A 1F 02 F6 | 	mov	local01, arg02
21590     0B 21 02 F6 | 	mov	local02, arg03
21594     0C 23 02 F6 | 	mov	local03, arg04
21598     8C 4C B0 FD | 	call	#__system___gettxfunc
2159c     FD 24 0A F6 | 	mov	local04, result1 wz
215a0     00 FA 05 A6 |  if_e	mov	result1, #0
215a4     12 13 02 56 |  if_ne	mov	arg01, local04
215a8     10 15 02 56 |  if_ne	mov	arg02, local02
215ac     0F 17 02 56 |  if_ne	mov	arg03, local01
215b0     11 19 02 56 |  if_ne	mov	arg04, local03
215b4     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
215b8     A7 F0 03 F6 | 	mov	ptra, fp
215bc     B2 00 A0 FD | 	call	#popregs_
215c0                 | __system___basic_print_integer_ret
215c0     2D 00 64 FD | 	ret
215c4                 | 
215c4                 | __system___basic_print_unsigned
215c4     03 4A 05 F6 | 	mov	COUNT_, #3
215c8     A8 00 A0 FD | 	call	#pushregs_
215cc     0A 1F 02 F6 | 	mov	local01, arg02
215d0     0B 21 02 F6 | 	mov	local02, arg03
215d4     0C 23 02 F6 | 	mov	local03, arg04
215d8     4C 4C B0 FD | 	call	#__system___gettxfunc
215dc     FD 12 0A F6 | 	mov	arg01, result1 wz
215e0     00 FA 05 A6 |  if_e	mov	result1, #0
215e4     3A 20 26 54 |  if_ne	bith	local02, #58
215e8     10 15 02 56 |  if_ne	mov	arg02, local02
215ec     0F 17 02 56 |  if_ne	mov	arg03, local01
215f0     11 19 02 56 |  if_ne	mov	arg04, local03
215f4     74 02 B0 5D |  if_ne	call	#__system___fmtnum
215f8     A7 F0 03 F6 | 	mov	ptra, fp
215fc     B2 00 A0 FD | 	call	#popregs_
21600                 | __system___basic_print_unsigned_ret
21600     2D 00 64 FD | 	ret
21604                 | 
21604                 | __system___basic_get_char
21604     03 4A 05 F6 | 	mov	COUNT_, #3
21608     A8 00 A0 FD | 	call	#pushregs_
2160c     5C 4C B0 FD | 	call	#__system___getrxfunc
21610     FD 1E 0A F6 | 	mov	local01, result1 wz
21614     01 FA 65 A6 |  if_e	neg	result1, #1
21618     28 00 90 AD |  if_e	jmp	#LR__2960
2161c     0F 21 02 F6 | 	mov	local02, local01
21620     13 1E 46 F7 | 	zerox	local01, #19
21624     14 20 46 F0 | 	shr	local02, #20
21628     02 20 66 F0 | 	shl	local02, #2
2162c     ED 20 02 F1 | 	add	local02, __methods__
21630     10 21 02 FB | 	rdlong	local02, local02
21634     F2 22 02 F6 | 	mov	local03, objptr
21638     0F E5 01 F6 | 	mov	objptr, local01
2163c     2D 20 62 FD | 	call	local02
21640     11 E5 01 F6 | 	mov	objptr, local03
21644                 | LR__2960
21644     A7 F0 03 F6 | 	mov	ptra, fp
21648     B2 00 A0 FD | 	call	#popregs_
2164c                 | __system___basic_get_char_ret
2164c     2D 00 64 FD | 	ret
21650                 | 
21650                 | __system___basic_put
21650     04 4A 05 F6 | 	mov	COUNT_, #4
21654     A8 00 A0 FD | 	call	#pushregs_
21658     0D 1F 02 F6 | 	mov	local01, arg05
2165c     0F 19 02 FD | 	qmul	arg04, local01
21660     09 21 02 F6 | 	mov	local02, arg01
21664     0B 23 02 F6 | 	mov	local03, arg03
21668     00 14 0E F2 | 	cmp	arg02, #0 wz
2166c     01 14 86 51 |  if_ne	sub	arg02, #1
21670     10 13 02 56 |  if_ne	mov	arg01, local02
21674     00 16 06 56 |  if_ne	mov	arg03, #0
21678     18 24 62 FD | 	getqx	local04
2167c     9C 42 B0 5D |  if_ne	call	#__system__lseek
21680     11 15 02 F6 | 	mov	arg02, local03
21684     12 17 02 F6 | 	mov	arg03, local04
21688     10 13 02 F6 | 	mov	arg01, local02
2168c     D8 41 B0 FD | 	call	#__system__write
21690     FD 24 02 F6 | 	mov	local04, result1
21694     01 24 56 F2 | 	cmps	local04, #1 wc
21698     10 00 90 CD |  if_b	jmp	#LR__2970
2169c     12 7D 02 F6 | 	mov	muldiva_, local04
216a0     0F 7F 02 F6 | 	mov	muldivb_, local01
216a4     BA 00 A0 FD | 	call	#divide_
216a8     3F 25 02 F6 | 	mov	local04, muldivb_
216ac                 | LR__2970
216ac     12 FB 01 F6 | 	mov	result1, local04
216b0     A7 F0 03 F6 | 	mov	ptra, fp
216b4     B2 00 A0 FD | 	call	#popregs_
216b8                 | __system___basic_put_ret
216b8     2D 00 64 FD | 	ret
216bc                 | 
216bc                 | __system___basic_get
216bc     04 4A 05 F6 | 	mov	COUNT_, #4
216c0     A8 00 A0 FD | 	call	#pushregs_
216c4     0D 1F 02 F6 | 	mov	local01, arg05
216c8     0F 19 02 FD | 	qmul	arg04, local01
216cc     09 21 02 F6 | 	mov	local02, arg01
216d0     0B 23 02 F6 | 	mov	local03, arg03
216d4     00 14 0E F2 | 	cmp	arg02, #0 wz
216d8     01 14 86 51 |  if_ne	sub	arg02, #1
216dc     10 13 02 56 |  if_ne	mov	arg01, local02
216e0     00 16 06 56 |  if_ne	mov	arg03, #0
216e4     18 24 62 FD | 	getqx	local04
216e8     30 42 B0 5D |  if_ne	call	#__system__lseek
216ec     11 15 02 F6 | 	mov	arg02, local03
216f0     12 17 02 F6 | 	mov	arg03, local04
216f4     10 13 02 F6 | 	mov	arg01, local02
216f8     A8 41 B0 FD | 	call	#__system__read
216fc     FD 24 02 F6 | 	mov	local04, result1
21700     01 24 56 F2 | 	cmps	local04, #1 wc
21704     10 00 90 CD |  if_b	jmp	#LR__2980
21708     12 7D 02 F6 | 	mov	muldiva_, local04
2170c     0F 7F 02 F6 | 	mov	muldivb_, local01
21710     BA 00 A0 FD | 	call	#divide_
21714     3F 25 02 F6 | 	mov	local04, muldivb_
21718                 | LR__2980
21718     12 FB 01 F6 | 	mov	result1, local04
2171c     A7 F0 03 F6 | 	mov	ptra, fp
21720     B2 00 A0 FD | 	call	#popregs_
21724                 | __system___basic_get_ret
21724     2D 00 64 FD | 	ret
21728                 | 
21728                 | __system___fmtchar
21728     00 4A 05 F6 | 	mov	COUNT_, #0
2172c     A8 00 A0 FD | 	call	#pushregs_
21730     10 F0 07 F1 | 	add	ptra, #16
21734     04 4E 05 F1 | 	add	fp, #4
21738     A7 12 62 FC | 	wrlong	arg01, fp
2173c     04 4E 05 F1 | 	add	fp, #4
21740     A7 14 62 FC | 	wrlong	arg02, fp
21744     04 4E 05 F1 | 	add	fp, #4
21748     A7 16 62 FC | 	wrlong	arg03, fp
2174c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21750     A7 16 62 FC | 	wrlong	arg03, fp
21754     08 4E 85 F1 | 	sub	fp, #8
21758     A7 12 02 FB | 	rdlong	arg01, fp
2175c     04 4E 05 F1 | 	add	fp, #4
21760     A7 14 02 FB | 	rdlong	arg02, fp
21764     04 4E 05 F1 | 	add	fp, #4
21768     A7 16 02 F6 | 	mov	arg03, fp
2176c     0C 4E 85 F1 | 	sub	fp, #12
21770     0C 00 B0 FD | 	call	#__system___fmtstr
21774     A7 F0 03 F6 | 	mov	ptra, fp
21778     B2 00 A0 FD | 	call	#popregs_
2177c                 | __system___fmtchar_ret
2177c     2D 00 64 FD | 	ret
21780                 | 
21780                 | __system___fmtstr
21780     09 4A 05 F6 | 	mov	COUNT_, #9
21784     A8 00 A0 FD | 	call	#pushregs_
21788     09 1F 02 F6 | 	mov	local01, arg01
2178c     0A 21 02 F6 | 	mov	local02, arg02
21790     0B 23 02 F6 | 	mov	local03, arg03
21794     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21798     11 13 02 F6 | 	mov	arg01, local03
2179c     09 25 02 F6 | 	mov	local04, arg01
217a0     97 06 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
217a4                 | LR__2990
217a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
217a8     01 24 06 51 |  if_ne	add	local04, #1
217ac     F4 FF 9F 5D |  if_ne	jmp	#LR__2990
217b0                 | LR__2991
217b0     09 25 82 F1 | 	sub	local04, arg01
217b4     00 18 0E F2 | 	cmp	arg04, #0 wz
217b8     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
217bc     10 15 02 F6 | 	mov	arg02, local02
217c0     12 17 02 F6 | 	mov	arg03, local04
217c4     0F 13 02 F6 | 	mov	arg01, local01
217c8     02 18 06 F6 | 	mov	arg04, #2
217cc     F8 46 B0 FD | 	call	#__system___fmtpad
217d0     FD 26 02 F6 | 	mov	local05, result1
217d4     00 26 56 F2 | 	cmps	local05, #0 wc
217d8     13 FB 01 C6 |  if_b	mov	result1, local05
217dc     80 00 90 CD |  if_b	jmp	#LR__2994
217e0     01 24 56 F2 | 	cmps	local04, #1 wc
217e4     50 00 90 CD |  if_b	jmp	#LR__2993
217e8     12 29 02 F6 | 	mov	local06, local04
217ec                 | LR__2992
217ec     0F 2B 02 F6 | 	mov	local07, local01
217f0     0F 2D 02 F6 | 	mov	local08, local01
217f4     13 2A 46 F7 | 	zerox	local07, #19
217f8     14 2C 46 F0 | 	shr	local08, #20
217fc     02 2C 66 F0 | 	shl	local08, #2
21800     ED 2C 02 F1 | 	add	local08, __methods__
21804     16 2D 02 FB | 	rdlong	local08, local08
21808     11 13 C2 FA | 	rdbyte	arg01, local03
2180c     F2 2E 02 F6 | 	mov	local09, objptr
21810     15 E5 01 F6 | 	mov	objptr, local07
21814     01 22 06 F1 | 	add	local03, #1
21818     2D 2C 62 FD | 	call	local08
2181c     17 E5 01 F6 | 	mov	objptr, local09
21820     FD 2E 02 F6 | 	mov	local09, result1
21824     00 2E 56 F2 | 	cmps	local09, #0 wc
21828     17 FB 01 C6 |  if_b	mov	result1, local09
2182c     30 00 90 CD |  if_b	jmp	#LR__2994
21830     17 27 02 F1 | 	add	local05, local09
21834     ED 29 6E FB | 	djnz	local06, #LR__2992
21838                 | LR__2993
21838     10 15 02 F6 | 	mov	arg02, local02
2183c     12 17 02 F6 | 	mov	arg03, local04
21840     0F 13 02 F6 | 	mov	arg01, local01
21844     01 18 06 F6 | 	mov	arg04, #1
21848     7C 46 B0 FD | 	call	#__system___fmtpad
2184c     FD 2E 02 F6 | 	mov	local09, result1
21850     00 2E 56 F2 | 	cmps	local09, #0 wc
21854     17 FB 01 C6 |  if_b	mov	result1, local09
21858     17 27 02 31 |  if_ae	add	local05, local09
2185c     13 FB 01 36 |  if_ae	mov	result1, local05
21860                 | LR__2994
21860     A7 F0 03 F6 | 	mov	ptra, fp
21864     B2 00 A0 FD | 	call	#popregs_
21868                 | __system___fmtstr_ret
21868     2D 00 64 FD | 	ret
2186c                 | 
2186c                 | __system___fmtnum
2186c     0B 4A 05 F6 | 	mov	COUNT_, #11
21870     A8 00 A0 FD | 	call	#pushregs_
21874     09 1F 02 F6 | 	mov	local01, arg01
21878     0A 21 02 F6 | 	mov	local02, arg02
2187c     0B 23 02 F6 | 	mov	local03, arg03
21880     0C 25 02 F6 | 	mov	local04, arg04
21884     F8 27 02 F6 | 	mov	local05, ptra
21888     13 29 02 F6 | 	mov	local06, local05
2188c     00 2A 06 F6 | 	mov	local07, #0
21890     10 2D 02 F6 | 	mov	local08, local02
21894     10 2C 46 F0 | 	shr	local08, #16
21898     3F 2C 06 F5 | 	and	local08, #63
2189c     10 2F E2 F8 | 	getbyte	local09, local02, #0
218a0     10 31 02 F6 | 	mov	local10, local02
218a4     1A 30 46 F0 | 	shr	local10, #26
218a8     03 30 06 F5 | 	and	local10, #3
218ac     18 33 02 F6 | 	mov	local11, local10
218b0     01 2C 56 F2 | 	cmps	local08, #1 wc
218b4     44 F0 07 F1 | 	add	ptra, #68
218b8     01 2C 86 31 |  if_ae	sub	local08, #1
218bc     41 2E 56 F2 | 	cmps	local09, #65 wc
218c0     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
218c4     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
218c8     03 32 0E F2 | 	cmp	local11, #3 wz
218cc     00 32 06 A6 |  if_e	mov	local11, #0
218d0     00 22 56 52 |  if_ne	cmps	local03, #0 wc
218d4     04 32 06 46 |  if_c_and_nz	mov	local11, #4
218d8     11 23 62 46 |  if_c_and_nz	neg	local03, local03
218dc     00 32 0E F2 | 	cmp	local11, #0 wz
218e0     4C 00 90 AD |  if_e	jmp	#LR__3003
218e4     01 2A 06 F6 | 	mov	local07, #1
218e8     17 2D 0A F2 | 	cmp	local08, local09 wz
218ec     18 00 90 5D |  if_ne	jmp	#LR__3001
218f0     05 2C 6E FB | 	djnz	local08, #LR__3000
218f4     0F 13 02 F6 | 	mov	arg01, local01
218f8     10 15 02 F6 | 	mov	arg02, local02
218fc     23 16 06 F6 | 	mov	arg03, #35
21900     24 FE BF FD | 	call	#__system___fmtchar
21904     88 00 90 FD | 	jmp	#LR__3007
21908                 | LR__3000
21908                 | LR__3001
21908     02 32 0E F2 | 	cmp	local11, #2 wz
2190c     14 31 02 A6 |  if_e	mov	local10, local06
21910     01 28 06 A1 |  if_e	add	local06, #1
21914     18 41 48 AC |  if_e	wrbyte	#32, local10
21918     14 00 90 AD |  if_e	jmp	#LR__3002
2191c     04 32 0E F2 | 	cmp	local11, #4 wz
21920     14 5B 48 AC |  if_e	wrbyte	#45, local06
21924     01 28 06 A1 |  if_e	add	local06, #1
21928     14 57 48 5C |  if_ne	wrbyte	#43, local06
2192c     01 28 06 51 |  if_ne	add	local06, #1
21930                 | LR__3002
21930                 | LR__3003
21930     14 13 02 F6 | 	mov	arg01, local06
21934     11 15 02 F6 | 	mov	arg02, local03
21938     12 17 02 F6 | 	mov	arg03, local04
2193c     16 19 02 F6 | 	mov	arg04, local08
21940     00 1A 06 F6 | 	mov	arg05, #0
21944     1D 20 2E F4 | 	testbn	local02, #29 wz
21948     01 1A 06 56 |  if_ne	mov	arg05, #1
2194c     40 46 B0 FD | 	call	#__system___uitoa
21950     FD 2A 02 F1 | 	add	local07, result1
21954     17 2B 5A F2 | 	cmps	local07, local09 wcz
21958     24 00 90 ED |  if_be	jmp	#LR__3006
2195c     97 0E 48 FB | 	callpa	#(@LR__3005-@LR__3004)>>2,fcache_load_ptr_
21960                 | LR__3004
21960     17 31 02 F6 | 	mov	local10, local09
21964     01 30 56 F2 | 	cmps	local10, #1 wc
21968     01 2E 86 F1 | 	sub	local09, #1
2196c     14 31 02 36 |  if_ae	mov	local10, local06
21970     01 28 06 31 |  if_ae	add	local06, #1
21974     18 47 48 3C |  if_ae	wrbyte	#35, local10
21978     E4 FF 9F 3D |  if_ae	jmp	#LR__3004
2197c                 | LR__3005
2197c     14 01 48 FC | 	wrbyte	#0, local06
21980                 | LR__3006
21980     0F 13 02 F6 | 	mov	arg01, local01
21984     10 15 02 F6 | 	mov	arg02, local02
21988     13 17 02 F6 | 	mov	arg03, local05
2198c     F0 FD BF FD | 	call	#__system___fmtstr
21990                 | LR__3007
21990     A7 F0 03 F6 | 	mov	ptra, fp
21994     B2 00 A0 FD | 	call	#popregs_
21998                 | __system___fmtnum_ret
21998     2D 00 64 FD | 	ret
2199c                 | 
2199c                 | __system___fmtfloat
2199c     10 4A 05 F6 | 	mov	COUNT_, #16
219a0     A8 00 A0 FD | 	call	#pushregs_
219a4     24 F1 07 F1 | 	add	ptra, #292
219a8     04 4E 05 F1 | 	add	fp, #4
219ac     A7 12 62 FC | 	wrlong	arg01, fp
219b0     04 4E 05 F1 | 	add	fp, #4
219b4     A7 14 62 FC | 	wrlong	arg02, fp
219b8     04 4E 05 F1 | 	add	fp, #4
219bc     A7 16 62 FC | 	wrlong	arg03, fp
219c0     04 4E 05 F1 | 	add	fp, #4
219c4     A7 18 62 FC | 	wrlong	arg04, fp
219c8     0C 4E 05 F1 | 	add	fp, #12
219cc     A7 14 68 FC | 	wrlong	#10, fp
219d0     08 4E 05 F1 | 	add	fp, #8
219d4     A7 00 68 FC | 	wrlong	#0, fp
219d8     08 4E 05 F1 | 	add	fp, #8
219dc     A7 00 68 FC | 	wrlong	#0, fp
219e0     08 4E 05 F1 | 	add	fp, #8
219e4     A7 00 68 FC | 	wrlong	#0, fp
219e8     04 4E 05 F1 | 	add	fp, #4
219ec     A7 04 68 FC | 	wrlong	#2, fp
219f0     04 4E 05 F1 | 	add	fp, #4
219f4     A7 00 68 FC | 	wrlong	#0, fp
219f8     04 4E 05 F1 | 	add	fp, #4
219fc     A7 00 68 FC | 	wrlong	#0, fp
21a00     04 4E 05 F1 | 	add	fp, #4
21a04     A7 00 68 FC | 	wrlong	#0, fp
21a08     04 4E 05 F1 | 	add	fp, #4
21a0c     A7 00 68 FC | 	wrlong	#0, fp
21a10     18 4E 05 F1 | 	add	fp, #24
21a14     A7 00 68 FC | 	wrlong	#0, fp
21a18     68 4E 05 F1 | 	add	fp, #104
21a1c     A7 1E 02 F6 | 	mov	local01, fp
21a20     08 4E 85 F1 | 	sub	fp, #8
21a24     A7 1E 62 FC | 	wrlong	local01, fp
21a28     04 4E 05 F1 | 	add	fp, #4
21a2c     A7 1E 62 FC | 	wrlong	local01, fp
21a30     BC 4E 85 F1 | 	sub	fp, #188
21a34     A7 1E 02 FB | 	rdlong	local01, fp
21a38     10 1E 46 F0 | 	shr	local01, #16
21a3c     3F 1E 06 F5 | 	and	local01, #63
21a40     B0 4E 05 F1 | 	add	fp, #176
21a44     A7 1E 62 FC | 	wrlong	local01, fp
21a48     B0 4E 85 F1 | 	sub	fp, #176
21a4c     A7 1E 02 FB | 	rdlong	local01, fp
21a50     1C 1E 46 F0 | 	shr	local01, #28
21a54     01 1E 06 F5 | 	and	local01, #1
21a58     08 4F 05 F1 | 	add	fp, #264
21a5c     A7 1E 62 FC | 	wrlong	local01, fp
21a60     58 4E 85 F1 | 	sub	fp, #88
21a64     A7 1E 0A FB | 	rdlong	local01, fp wz
21a68     B8 4E 85 F1 | 	sub	fp, #184
21a6c     3C 00 90 5D |  if_ne	jmp	#LR__3011
21a70     10 4E 05 F1 | 	add	fp, #16
21a74     A7 1E 02 FB | 	rdlong	local01, fp
21a78     10 4E 85 F1 | 	sub	fp, #16
21a7c     61 1E 0E F2 | 	cmp	local01, #97 wz
21a80     18 00 90 5D |  if_ne	jmp	#LR__3010
21a84     B8 4E 05 F1 | 	add	fp, #184
21a88     A7 1A 68 FC | 	wrlong	#13, fp
21a8c     84 4E 85 F1 | 	sub	fp, #132
21a90     A7 02 68 FC | 	wrlong	#1, fp
21a94     34 4E 85 F1 | 	sub	fp, #52
21a98     24 00 90 FD | 	jmp	#LR__3012
21a9c                 | LR__3010
21a9c     B8 4E 05 F1 | 	add	fp, #184
21aa0     A7 0C 68 FC | 	wrlong	#6, fp
21aa4     B8 4E 85 F1 | 	sub	fp, #184
21aa8     14 00 90 FD | 	jmp	#LR__3012
21aac                 | LR__3011
21aac     B8 4E 05 F1 | 	add	fp, #184
21ab0     A7 1E 02 FB | 	rdlong	local01, fp
21ab4     01 1E 86 F1 | 	sub	local01, #1
21ab8     A7 1E 62 FC | 	wrlong	local01, fp
21abc     B8 4E 85 F1 | 	sub	fp, #184
21ac0                 | LR__3012
21ac0     08 4E 05 F1 | 	add	fp, #8
21ac4     A7 1E 02 FB | 	rdlong	local01, fp
21ac8     16 1E 46 F0 | 	shr	local01, #22
21acc     03 1E 06 F5 | 	and	local01, #3
21ad0     04 4F 05 F1 | 	add	fp, #260
21ad4     A7 1E 62 FC | 	wrlong	local01, fp
21ad8     04 4F 85 F1 | 	sub	fp, #260
21adc     A7 1E 02 FB | 	rdlong	local01, fp
21ae0     1D 1E 46 F0 | 	shr	local01, #29
21ae4     01 1E 06 F5 | 	and	local01, #1
21ae8     B4 4E 05 F1 | 	add	fp, #180
21aec     A7 1E 62 FC | 	wrlong	local01, fp
21af0     B4 4E 85 F1 | 	sub	fp, #180
21af4     A7 1E 02 FB | 	rdlong	local01, fp
21af8     0F 1F EA F8 | 	getbyte	local01, local01, #1
21afc     60 4E 05 F1 | 	add	fp, #96
21b00     A7 1E 62 FC | 	wrlong	local01, fp
21b04     60 4E 85 F1 | 	sub	fp, #96
21b08     A7 1E 02 FB | 	rdlong	local01, fp
21b0c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21b10     64 4E 05 F1 | 	add	fp, #100
21b14     A7 1E 62 FC | 	wrlong	local01, fp
21b18     00 1E 06 F6 | 	mov	local01, #0
21b1c     5C 4E 85 F1 | 	sub	fp, #92
21b20     A7 1A 02 FB | 	rdlong	arg05, fp
21b24     65 1A 0E F2 | 	cmp	arg05, #101 wz
21b28     01 1E 06 A6 |  if_e	mov	local01, #1
21b2c     14 4E 05 F1 | 	add	fp, #20
21b30     A7 1E 62 FC | 	wrlong	local01, fp
21b34     98 4E 05 F1 | 	add	fp, #152
21b38     A7 20 0A FB | 	rdlong	local02, fp wz
21b3c     45 1E 06 56 |  if_ne	mov	local01, #69
21b40     65 1E 06 A6 |  if_e	mov	local01, #101
21b44     8C 4E 85 F1 | 	sub	fp, #140
21b48     A7 1E 62 FC | 	wrlong	local01, fp
21b4c     20 4E 85 F1 | 	sub	fp, #32
21b50     A7 1E 02 FB | 	rdlong	local01, fp
21b54     10 4E 85 F1 | 	sub	fp, #16
21b58     61 1E 0E F2 | 	cmp	local01, #97 wz
21b5c     4C 00 90 5D |  if_ne	jmp	#LR__3013
21b60     24 4E 05 F1 | 	add	fp, #36
21b64     A7 02 68 FC | 	wrlong	#1, fp
21b68     98 4E 05 F1 | 	add	fp, #152
21b6c     A7 20 0A FB | 	rdlong	local02, fp wz
21b70     50 1E 06 56 |  if_ne	mov	local01, #80
21b74     70 1E 06 A6 |  if_e	mov	local01, #112
21b78     8C 4E 85 F1 | 	sub	fp, #140
21b7c     A7 1E 62 FC | 	wrlong	local01, fp
21b80     14 4E 85 F1 | 	sub	fp, #20
21b84     A7 04 68 FC | 	wrlong	#2, fp
21b88     1C 4E 05 F1 | 	add	fp, #28
21b8c     A7 02 68 FC | 	wrlong	#1, fp
21b90     84 4E 05 F1 | 	add	fp, #132
21b94     A7 20 0A FB | 	rdlong	local02, fp wz
21b98     58 1E 06 56 |  if_ne	mov	local01, #88
21b9c     78 1E 06 A6 |  if_e	mov	local01, #120
21ba0     7C 4E 85 F1 | 	sub	fp, #124
21ba4     A7 1E 62 FC | 	wrlong	local01, fp
21ba8     40 4E 85 F1 | 	sub	fp, #64
21bac                 | LR__3013
21bac     10 4E 05 F1 | 	add	fp, #16
21bb0     A7 1E 02 FB | 	rdlong	local01, fp
21bb4     10 4E 85 F1 | 	sub	fp, #16
21bb8     23 1E 0E F2 | 	cmp	local01, #35 wz
21bbc     3C 00 90 5D |  if_ne	jmp	#LR__3016
21bc0     48 4E 05 F1 | 	add	fp, #72
21bc4     A7 02 68 FC | 	wrlong	#1, fp
21bc8     C8 4E 05 F1 | 	add	fp, #200
21bcc     A7 1E 0A FB | 	rdlong	local01, fp wz
21bd0     10 4F 85 F1 | 	sub	fp, #272
21bd4     18 00 90 AD |  if_e	jmp	#LR__3014
21bd8     10 4E 05 F1 | 	add	fp, #16
21bdc     A7 CC 68 FC | 	wrlong	#102, fp
21be0     00 4F 05 F1 | 	add	fp, #256
21be4     A7 00 68 FC | 	wrlong	#0, fp
21be8     10 4F 85 F1 | 	sub	fp, #272
21bec     0C 00 90 FD | 	jmp	#LR__3015
21bf0                 | LR__3014
21bf0     10 4F 05 F1 | 	add	fp, #272
21bf4     A7 02 68 FC | 	wrlong	#1, fp
21bf8     10 4F 85 F1 | 	sub	fp, #272
21bfc                 | LR__3015
21bfc                 | LR__3016
21bfc     08 4E 05 F1 | 	add	fp, #8
21c00     A7 1E 02 FB | 	rdlong	local01, fp
21c04     1A 1E 46 F0 | 	shr	local01, #26
21c08     03 1E 06 F5 | 	and	local01, #3
21c0c     5C 4E 05 F1 | 	add	fp, #92
21c10     A7 1E 62 FC | 	wrlong	local01, fp
21c14     58 4E 85 F1 | 	sub	fp, #88
21c18     A7 FA 01 FB | 	rdlong	result1, fp
21c1c     0C 4E 85 F1 | 	sub	fp, #12
21c20     1F FA 4D F0 | 	shr	result1, #31 wz
21c24     20 00 90 AD |  if_e	jmp	#LR__3017
21c28     2C 4E 05 F1 | 	add	fp, #44
21c2c     A7 5A 68 FC | 	wrlong	#45, fp
21c30     20 4E 85 F1 | 	sub	fp, #32
21c34     A7 FA 01 FB | 	rdlong	result1, fp
21c38     1F FA E5 F4 | 	bitnot	result1, #31
21c3c     A7 FA 61 FC | 	wrlong	result1, fp
21c40     0C 4E 85 F1 | 	sub	fp, #12
21c44     3C 00 90 FD | 	jmp	#LR__3019
21c48                 | LR__3017
21c48     64 4E 05 F1 | 	add	fp, #100
21c4c     A7 1E 02 FB | 	rdlong	local01, fp
21c50     64 4E 85 F1 | 	sub	fp, #100
21c54     01 1E 0E F2 | 	cmp	local01, #1 wz
21c58     2C 4E 05 A1 |  if_e	add	fp, #44
21c5c     A7 56 68 AC |  if_e	wrlong	#43, fp
21c60     2C 4E 85 A1 |  if_e	sub	fp, #44
21c64     1C 00 90 AD |  if_e	jmp	#LR__3018
21c68     64 4E 05 F1 | 	add	fp, #100
21c6c     A7 1E 02 FB | 	rdlong	local01, fp
21c70     64 4E 85 F1 | 	sub	fp, #100
21c74     02 1E 0E F2 | 	cmp	local01, #2 wz
21c78     2C 4E 05 A1 |  if_e	add	fp, #44
21c7c     A7 40 68 AC |  if_e	wrlong	#32, fp
21c80     2C 4E 85 A1 |  if_e	sub	fp, #44
21c84                 | LR__3018
21c84                 | LR__3019
21c84     08 4E 05 F1 | 	add	fp, #8
21c88     A7 1E 02 FB | 	rdlong	local01, fp
21c8c     18 1E 46 F0 | 	shr	local01, #24
21c90     03 1E 06 F5 | 	and	local01, #3
21c94     3C 4E 05 F1 | 	add	fp, #60
21c98     A7 1E 62 FC | 	wrlong	local01, fp
21c9c     00 1E 06 F6 | 	mov	local01, #0
21ca0     18 4E 85 F1 | 	sub	fp, #24
21ca4     A7 22 0A FB | 	rdlong	local03, fp wz
21ca8     2C 4E 85 F1 | 	sub	fp, #44
21cac     18 00 90 5D |  if_ne	jmp	#LR__3020
21cb0     1C 4E 05 F1 | 	add	fp, #28
21cb4     A7 24 02 FB | 	rdlong	local04, fp
21cb8     1C 4E 85 F1 | 	sub	fp, #28
21cbc     12 27 02 F6 | 	mov	local05, local04
21cc0     0A 26 0E F2 | 	cmp	local05, #10 wz
21cc4     04 00 90 AD |  if_e	jmp	#LR__3021
21cc8                 | LR__3020
21cc8     01 1E 66 F5 | 	xor	local01, #1
21ccc                 | LR__3021
21ccc     3C 4E 05 F1 | 	add	fp, #60
21cd0     A7 1E 62 FC | 	wrlong	local01, fp
21cd4     3C 4E 85 F1 | 	sub	fp, #60
21cd8     00 1E 0E F2 | 	cmp	local01, #0 wz
21cdc     0C 01 90 AD |  if_e	jmp	#LR__3023
21ce0     44 4E 05 F1 | 	add	fp, #68
21ce4     A7 26 02 FB | 	rdlong	local05, fp
21ce8     44 4E 85 F1 | 	sub	fp, #68
21cec     13 23 02 F6 | 	mov	local03, local05
21cf0     02 22 0E F2 | 	cmp	local03, #2 wz
21cf4     F4 00 90 5D |  if_ne	jmp	#LR__3023
21cf8     0C 4F 05 F1 | 	add	fp, #268
21cfc     A7 28 02 FB | 	rdlong	local06, fp
21d00     0C 4F 85 F1 | 	sub	fp, #268
21d04     14 25 02 F6 | 	mov	local04, local06
21d08     02 24 0E F2 | 	cmp	local04, #2 wz
21d0c     DC 00 90 AD |  if_e	jmp	#LR__3023
21d10     C0 4E 05 F1 | 	add	fp, #192
21d14     A7 12 02 FB | 	rdlong	arg01, fp
21d18     94 4E 85 F1 | 	sub	fp, #148
21d1c     A7 14 02 FB | 	rdlong	arg02, fp
21d20     14 4E 05 F1 | 	add	fp, #20
21d24     A7 16 02 FB | 	rdlong	arg03, fp
21d28     40 4E 85 F1 | 	sub	fp, #64
21d2c     C8 44 B0 FD | 	call	#__system__emitsign_0501
21d30     14 4F 05 F1 | 	add	fp, #276
21d34     A7 FA 61 FC | 	wrlong	result1, fp
21d38     14 4F 85 F1 | 	sub	fp, #276
21d3c     00 FA 55 F2 | 	cmps	result1, #0 wc
21d40     14 4F 05 C1 |  if_b	add	fp, #276
21d44     A7 FA 01 CB |  if_b	rdlong	result1, fp
21d48     14 4F 85 C1 |  if_b	sub	fp, #276
21d4c     6C 0B 90 CD |  if_b	jmp	#LR__3073
21d50     C0 4E 05 F1 | 	add	fp, #192
21d54     A7 1E 02 FB | 	rdlong	local01, fp
21d58     54 4E 05 F1 | 	add	fp, #84
21d5c     A7 26 02 FB | 	rdlong	local05, fp
21d60     13 23 02 F6 | 	mov	local03, local05
21d64     13 1F 02 F1 | 	add	local01, local05
21d68     54 4E 85 F1 | 	sub	fp, #84
21d6c     A7 1E 62 FC | 	wrlong	local01, fp
21d70     58 4E 85 F1 | 	sub	fp, #88
21d74     A7 1E 0A FB | 	rdlong	local01, fp wz
21d78     68 4E 85 F1 | 	sub	fp, #104
21d7c     60 00 90 AD |  if_e	jmp	#LR__3022
21d80     68 4E 05 F1 | 	add	fp, #104
21d84     A7 1E 02 FB | 	rdlong	local01, fp
21d88     AC 4E 05 F1 | 	add	fp, #172
21d8c     A7 22 02 FB | 	rdlong	local03, fp
21d90     11 1F 82 F1 | 	sub	local01, local03
21d94     AC 4E 85 F1 | 	sub	fp, #172
21d98     A7 1E 62 FC | 	wrlong	local01, fp
21d9c     68 4E 85 F1 | 	sub	fp, #104
21da0     00 1E 56 F2 | 	cmps	local01, #0 wc
21da4     68 4E 05 C1 |  if_b	add	fp, #104
21da8     A7 00 68 CC |  if_b	wrlong	#0, fp
21dac     68 4E 85 C1 |  if_b	sub	fp, #104
21db0     08 4E 05 F1 | 	add	fp, #8
21db4     A7 1E 02 FB | 	rdlong	local01, fp
21db8     E8 1E 06 F4 | 	bitl	local01, #232
21dbc     A7 1E 62 FC | 	wrlong	local01, fp
21dc0     60 4E 05 F1 | 	add	fp, #96
21dc4     A7 26 02 FB | 	rdlong	local05, fp
21dc8     13 23 02 F6 | 	mov	local03, local05
21dcc     08 22 66 F0 | 	shl	local03, #8
21dd0     11 1F 42 F5 | 	or	local01, local03
21dd4     60 4E 85 F1 | 	sub	fp, #96
21dd8     A7 1E 62 FC | 	wrlong	local01, fp
21ddc     08 4E 85 F1 | 	sub	fp, #8
21de0                 | LR__3022
21de0     3C 4E 05 F1 | 	add	fp, #60
21de4     A7 00 68 FC | 	wrlong	#0, fp
21de8     3C 4E 85 F1 | 	sub	fp, #60
21dec                 | LR__3023
21dec     0C 4E 05 F1 | 	add	fp, #12
21df0     A7 12 02 FB | 	rdlong	arg01, fp
21df4     0C 4E 85 F1 | 	sub	fp, #12
21df8     28 1F B0 FD | 	call	#__system____builtin_ilogb
21dfc     FF FF 3F FF 
21e00     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21e04     50 00 90 5D |  if_ne	jmp	#LR__3025
21e08     2C 4E 05 F1 | 	add	fp, #44
21e0c     A7 1E 0A FB | 	rdlong	local01, fp wz
21e10     2C 4E 85 F1 | 	sub	fp, #44
21e14     24 00 90 AD |  if_e	jmp	#LR__3024
21e18     C0 4E 05 F1 | 	add	fp, #192
21e1c     A7 20 02 FB | 	rdlong	local02, fp
21e20     10 23 02 F6 | 	mov	local03, local02
21e24     01 22 06 F1 | 	add	local03, #1
21e28     A7 22 62 FC | 	wrlong	local03, fp
21e2c     94 4E 85 F1 | 	sub	fp, #148
21e30     A7 24 02 FB | 	rdlong	local04, fp
21e34     2C 4E 85 F1 | 	sub	fp, #44
21e38     10 25 42 FC | 	wrbyte	local04, local02
21e3c                 | LR__3024
21e3c     C0 4E 05 F1 | 	add	fp, #192
21e40     A7 12 02 FB | 	rdlong	arg01, fp
21e44     C0 4E 85 F1 | 	sub	fp, #192
21e48     80 01 00 FF 
21e4c     96 14 06 F6 | 	mov	arg02, ##@LR__4991
21e50     AC E9 BF FD | 	call	#__system____builtin_strcpy
21e54     A4 08 90 FD | 	jmp	#LR__3061
21e58                 | LR__3025
21e58     0C 4E 05 F1 | 	add	fp, #12
21e5c     A7 20 02 FB | 	rdlong	local02, fp
21e60     0C 4E 85 F1 | 	sub	fp, #12
21e64     10 13 02 F6 | 	mov	arg01, local02
21e68     B8 1E B0 FD | 	call	#__system____builtin_ilogb
21e6c     00 00 40 FF 
21e70     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
21e74     50 00 90 5D |  if_ne	jmp	#LR__3027
21e78     2C 4E 05 F1 | 	add	fp, #44
21e7c     A7 1E 0A FB | 	rdlong	local01, fp wz
21e80     2C 4E 85 F1 | 	sub	fp, #44
21e84     24 00 90 AD |  if_e	jmp	#LR__3026
21e88     C0 4E 05 F1 | 	add	fp, #192
21e8c     A7 20 02 FB | 	rdlong	local02, fp
21e90     10 23 02 F6 | 	mov	local03, local02
21e94     01 22 06 F1 | 	add	local03, #1
21e98     A7 22 62 FC | 	wrlong	local03, fp
21e9c     94 4E 85 F1 | 	sub	fp, #148
21ea0     A7 24 02 FB | 	rdlong	local04, fp
21ea4     2C 4E 85 F1 | 	sub	fp, #44
21ea8     10 25 42 FC | 	wrbyte	local04, local02
21eac                 | LR__3026
21eac     C0 4E 05 F1 | 	add	fp, #192
21eb0     A7 12 02 FB | 	rdlong	arg01, fp
21eb4     C0 4E 85 F1 | 	sub	fp, #192
21eb8     80 01 00 FF 
21ebc     9A 14 06 F6 | 	mov	arg02, ##@LR__4992
21ec0     3C E9 BF FD | 	call	#__system____builtin_strcpy
21ec4     34 08 90 FD | 	jmp	#LR__3061
21ec8                 | LR__3027
21ec8     10 4E 05 F1 | 	add	fp, #16
21ecc     A7 1E 02 FB | 	rdlong	local01, fp
21ed0     10 4E 85 F1 | 	sub	fp, #16
21ed4     67 1E 0E F2 | 	cmp	local01, #103 wz
21ed8     10 4E 05 51 |  if_ne	add	fp, #16
21edc     A7 22 02 5B |  if_ne	rdlong	local03, fp
21ee0     10 4E 85 51 |  if_ne	sub	fp, #16
21ee4     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
21ee8     94 01 90 5D |  if_ne	jmp	#LR__3032
21eec     0C 4E 05 F1 | 	add	fp, #12
21ef0     A7 12 02 FB | 	rdlong	arg01, fp
21ef4     08 4E 05 F1 | 	add	fp, #8
21ef8     A7 14 02 F6 | 	mov	arg02, fp
21efc     0C 4E 05 F1 | 	add	fp, #12
21f00     A7 16 02 F6 | 	mov	arg03, fp
21f04     98 4E 05 F1 | 	add	fp, #152
21f08     A7 18 02 FB | 	rdlong	arg04, fp
21f0c     9C 4E 85 F1 | 	sub	fp, #156
21f10     A7 1A 02 FB | 	rdlong	arg05, fp
21f14     1C 4E 85 F1 | 	sub	fp, #28
21f18     E8 40 B0 FD | 	call	#__system__disassemble_0499
21f1c     10 4E 05 F1 | 	add	fp, #16
21f20     A7 1E 02 FB | 	rdlong	local01, fp
21f24     10 4E 85 F1 | 	sub	fp, #16
21f28     23 1E 0E F2 | 	cmp	local01, #35 wz
21f2c     A0 00 90 5D |  if_ne	jmp	#LR__3029
21f30     20 4E 05 F1 | 	add	fp, #32
21f34     A7 1E 02 FB | 	rdlong	local01, fp
21f38     98 4E 05 F1 | 	add	fp, #152
21f3c     A7 22 02 FB | 	rdlong	local03, fp
21f40     B8 4E 85 F1 | 	sub	fp, #184
21f44     11 1F 5A F2 | 	cmps	local01, local03 wcz
21f48     24 4E 05 11 |  if_a	add	fp, #36
21f4c     A7 02 68 1C |  if_a	wrlong	#1, fp
21f50     24 4E 85 11 |  if_a	sub	fp, #36
21f54     A4 01 90 1D |  if_a	jmp	#LR__3035
21f58     20 4E 05 F1 | 	add	fp, #32
21f5c     A7 1E 02 FB | 	rdlong	local01, fp
21f60     20 4E 85 F1 | 	sub	fp, #32
21f64     00 1E 56 F2 | 	cmps	local01, #0 wc
21f68     2C 00 90 3D |  if_ae	jmp	#LR__3028
21f6c     B8 4E 05 F1 | 	add	fp, #184
21f70     A7 1E 02 FB | 	rdlong	local01, fp
21f74     0F 1F 62 F6 | 	neg	local01, local01
21f78     98 4E 85 F1 | 	sub	fp, #152
21f7c     A7 22 02 FB | 	rdlong	local03, fp
21f80     20 4E 85 F1 | 	sub	fp, #32
21f84     0F 23 5A F2 | 	cmps	local03, local01 wcz
21f88     24 4E 05 E1 |  if_be	add	fp, #36
21f8c     A7 02 68 EC |  if_be	wrlong	#1, fp
21f90     24 4E 85 E1 |  if_be	sub	fp, #36
21f94     64 01 90 FD | 	jmp	#LR__3035
21f98                 | LR__3028
21f98     20 4E 05 F1 | 	add	fp, #32
21f9c     A7 1E 02 FB | 	rdlong	local01, fp
21fa0     20 4E 85 F1 | 	sub	fp, #32
21fa4     01 1E 56 F2 | 	cmps	local01, #1 wc
21fa8     50 01 90 CD |  if_b	jmp	#LR__3035
21fac     B8 4E 05 F1 | 	add	fp, #184
21fb0     A7 1E 02 FB | 	rdlong	local01, fp
21fb4     98 4E 85 F1 | 	sub	fp, #152
21fb8     A7 22 02 FB | 	rdlong	local03, fp
21fbc     11 1F 82 F1 | 	sub	local01, local03
21fc0     98 4E 05 F1 | 	add	fp, #152
21fc4     A7 1E 62 FC | 	wrlong	local01, fp
21fc8     B8 4E 85 F1 | 	sub	fp, #184
21fcc     2C 01 90 FD | 	jmp	#LR__3035
21fd0                 | LR__3029
21fd0     00 1E 06 F6 | 	mov	local01, #0
21fd4     08 4E 05 F1 | 	add	fp, #8
21fd8     A7 20 02 FB | 	rdlong	local02, fp
21fdc     1C 20 46 F0 | 	shr	local02, #28
21fe0     01 20 0E F5 | 	and	local02, #1 wz
21fe4     01 1E 06 A6 |  if_e	mov	local01, #1
21fe8     2C 4E 05 F1 | 	add	fp, #44
21fec     A7 1E 62 FC | 	wrlong	local01, fp
21ff0     14 4E 85 F1 | 	sub	fp, #20
21ff4     A7 1E 02 FB | 	rdlong	local01, fp
21ff8     98 4E 05 F1 | 	add	fp, #152
21ffc     A7 22 02 FB | 	rdlong	local03, fp
22000     B8 4E 85 F1 | 	sub	fp, #184
22004     11 1F 52 F2 | 	cmps	local01, local03 wc
22008     18 00 90 3D |  if_ae	jmp	#LR__3030
2200c     20 4E 05 F1 | 	add	fp, #32
22010     A7 24 02 FB | 	rdlong	local04, fp
22014     20 4E 85 F1 | 	sub	fp, #32
22018     FF FF 7F FF 
2201c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22020     10 00 90 3D |  if_ae	jmp	#LR__3031
22024                 | LR__3030
22024     24 4E 05 F1 | 	add	fp, #36
22028     A7 02 68 FC | 	wrlong	#1, fp
2202c     24 4E 85 F1 | 	sub	fp, #36
22030     C8 00 90 FD | 	jmp	#LR__3035
22034                 | LR__3031
22034     B8 4E 05 F1 | 	add	fp, #184
22038     A7 24 02 FB | 	rdlong	local04, fp
2203c     98 4E 85 F1 | 	sub	fp, #152
22040     A7 22 02 FB | 	rdlong	local03, fp
22044     11 25 82 F1 | 	sub	local04, local03
22048     98 4E 05 F1 | 	add	fp, #152
2204c     A7 24 62 FC | 	wrlong	local04, fp
22050     AC 4E 85 F1 | 	sub	fp, #172
22054     A7 12 02 FB | 	rdlong	arg01, fp
22058     08 4E 05 F1 | 	add	fp, #8
2205c     A7 14 02 F6 | 	mov	arg02, fp
22060     0C 4E 05 F1 | 	add	fp, #12
22064     A7 16 02 F6 | 	mov	arg03, fp
22068     12 19 62 F6 | 	neg	arg04, local04
2206c     04 4E 85 F1 | 	sub	fp, #4
22070     A7 1A 02 FB | 	rdlong	arg05, fp
22074     1C 4E 85 F1 | 	sub	fp, #28
22078     88 3F B0 FD | 	call	#__system__disassemble_0499
2207c     7C 00 90 FD | 	jmp	#LR__3035
22080                 | LR__3032
22080     24 4E 05 F1 | 	add	fp, #36
22084     A7 1E 0A FB | 	rdlong	local01, fp wz
22088     24 4E 85 F1 | 	sub	fp, #36
2208c     34 00 90 AD |  if_e	jmp	#LR__3033
22090     0C 4E 05 F1 | 	add	fp, #12
22094     A7 12 02 FB | 	rdlong	arg01, fp
22098     08 4E 05 F1 | 	add	fp, #8
2209c     A7 14 02 F6 | 	mov	arg02, fp
220a0     0C 4E 05 F1 | 	add	fp, #12
220a4     A7 16 02 F6 | 	mov	arg03, fp
220a8     98 4E 05 F1 | 	add	fp, #152
220ac     A7 18 02 FB | 	rdlong	arg04, fp
220b0     9C 4E 85 F1 | 	sub	fp, #156
220b4     A7 1A 02 FB | 	rdlong	arg05, fp
220b8     1C 4E 85 F1 | 	sub	fp, #28
220bc     44 3F B0 FD | 	call	#__system__disassemble_0499
220c0     38 00 90 FD | 	jmp	#LR__3034
220c4                 | LR__3033
220c4     0C 4E 05 F1 | 	add	fp, #12
220c8     A7 12 02 FB | 	rdlong	arg01, fp
220cc     08 4E 05 F1 | 	add	fp, #8
220d0     A7 14 02 F6 | 	mov	arg02, fp
220d4     0C 4E 05 F1 | 	add	fp, #12
220d8     A7 16 02 F6 | 	mov	arg03, fp
220dc     98 4E 05 F1 | 	add	fp, #152
220e0     A7 24 02 FB | 	rdlong	local04, fp
220e4     01 24 06 F1 | 	add	local04, #1
220e8     12 19 62 F6 | 	neg	arg04, local04
220ec     9C 4E 85 F1 | 	sub	fp, #156
220f0     A7 1A 02 FB | 	rdlong	arg05, fp
220f4     1C 4E 85 F1 | 	sub	fp, #28
220f8     08 3F B0 FD | 	call	#__system__disassemble_0499
220fc                 | LR__3034
220fc                 | LR__3035
220fc     1C 4E 05 F1 | 	add	fp, #28
22100     A7 1E 02 FB | 	rdlong	local01, fp
22104     1C 4E 85 F1 | 	sub	fp, #28
22108     02 1E 0E F2 | 	cmp	local01, #2 wz
2210c     4C 00 90 5D |  if_ne	jmp	#LR__3038
22110     1C 4E 05 F1 | 	add	fp, #28
22114     A7 20 68 FC | 	wrlong	#16, fp
22118     1C 4E 85 F1 | 	sub	fp, #28
2211c                 | LR__3036
2211c     14 4E 05 F1 | 	add	fp, #20
22120     A7 1E 0A FB | 	rdlong	local01, fp wz
22124     14 4E 85 F1 | 	sub	fp, #20
22128     30 00 90 AD |  if_e	jmp	#LR__3037
2212c     14 4E 05 F1 | 	add	fp, #20
22130     A7 22 02 FB | 	rdlong	local03, fp
22134     14 4E 85 F1 | 	sub	fp, #20
22138     00 80 00 FF 
2213c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22140     18 00 90 3D |  if_ae	jmp	#LR__3037
22144     14 4E 05 F1 | 	add	fp, #20
22148     A7 1E 02 FB | 	rdlong	local01, fp
2214c     01 1E 66 F0 | 	shl	local01, #1
22150     A7 1E 62 FC | 	wrlong	local01, fp
22154     14 4E 85 F1 | 	sub	fp, #20
22158     C0 FF 9F FD | 	jmp	#LR__3036
2215c                 | LR__3037
2215c                 | LR__3038
2215c     70 4E 05 F1 | 	add	fp, #112
22160     A7 12 02 F6 | 	mov	arg01, fp
22164     5C 4E 85 F1 | 	sub	fp, #92
22168     A7 14 02 FB | 	rdlong	arg02, fp
2216c     08 4E 05 F1 | 	add	fp, #8
22170     A7 16 02 FB | 	rdlong	arg03, fp
22174     A0 4E 05 F1 | 	add	fp, #160
22178     A7 1A 02 FB | 	rdlong	arg05, fp
2217c     BC 4E 85 F1 | 	sub	fp, #188
22180     01 18 06 F6 | 	mov	arg04, #1
22184     08 3E B0 FD | 	call	#__system___uitoa
22188     58 4E 05 F1 | 	add	fp, #88
2218c     A7 FA 61 FC | 	wrlong	result1, fp
22190     38 4E 85 F1 | 	sub	fp, #56
22194     A7 1E 02 FB | 	rdlong	local01, fp
22198     20 4E 85 F1 | 	sub	fp, #32
2219c     00 1E 56 F2 | 	cmps	local01, #0 wc
221a0     50 00 90 3D |  if_ae	jmp	#LR__3039
221a4     60 4E 05 F1 | 	add	fp, #96
221a8     A7 5A 68 FC | 	wrlong	#45, fp
221ac     50 4E 05 F1 | 	add	fp, #80
221b0     A7 12 02 F6 | 	mov	arg01, fp
221b4     90 4E 85 F1 | 	sub	fp, #144
221b8     A7 22 02 FB | 	rdlong	local03, fp
221bc     11 15 62 F6 | 	neg	arg02, local03
221c0     18 4E 05 F1 | 	add	fp, #24
221c4     A7 18 02 FB | 	rdlong	arg04, fp
221c8     84 4E 05 F1 | 	add	fp, #132
221cc     A7 28 02 FB | 	rdlong	local06, fp
221d0     BC 4E 85 F1 | 	sub	fp, #188
221d4     14 25 02 F6 | 	mov	local04, local06
221d8     0A 16 06 F6 | 	mov	arg03, #10
221dc     12 1B 02 F6 | 	mov	arg05, local04
221e0     AC 3D B0 FD | 	call	#__system___uitoa
221e4     5C 4E 05 F1 | 	add	fp, #92
221e8     A7 FA 61 FC | 	wrlong	result1, fp
221ec     5C 4E 85 F1 | 	sub	fp, #92
221f0     48 00 90 FD | 	jmp	#LR__3040
221f4                 | LR__3039
221f4     60 4E 05 F1 | 	add	fp, #96
221f8     A7 56 68 FC | 	wrlong	#43, fp
221fc     50 4E 05 F1 | 	add	fp, #80
22200     A7 12 02 F6 | 	mov	arg01, fp
22204     90 4E 85 F1 | 	sub	fp, #144
22208     A7 14 02 FB | 	rdlong	arg02, fp
2220c     18 4E 05 F1 | 	add	fp, #24
22210     A7 18 02 FB | 	rdlong	arg04, fp
22214     84 4E 05 F1 | 	add	fp, #132
22218     A7 28 02 FB | 	rdlong	local06, fp
2221c     BC 4E 85 F1 | 	sub	fp, #188
22220     14 25 02 F6 | 	mov	local04, local06
22224     0A 16 06 F6 | 	mov	arg03, #10
22228     12 1B 02 F6 | 	mov	arg05, local04
2222c     60 3D B0 FD | 	call	#__system___uitoa
22230     5C 4E 05 F1 | 	add	fp, #92
22234     A7 FA 61 FC | 	wrlong	result1, fp
22238     5C 4E 85 F1 | 	sub	fp, #92
2223c                 | LR__3040
2223c     24 4E 05 F1 | 	add	fp, #36
22240     A7 1E 0A FB | 	rdlong	local01, fp wz
22244     24 4E 85 F1 | 	sub	fp, #36
22248     2C 00 90 AD |  if_e	jmp	#LR__3041
2224c     50 4E 05 F1 | 	add	fp, #80
22250     A7 00 68 FC | 	wrlong	#0, fp
22254     04 4E 85 F1 | 	sub	fp, #4
22258     A7 00 68 FC | 	wrlong	#0, fp
2225c     6C 4E 05 F1 | 	add	fp, #108
22260     A7 1E 02 FB | 	rdlong	local01, fp
22264     01 1E 06 F1 | 	add	local01, #1
22268     64 4E 85 F1 | 	sub	fp, #100
2226c     A7 1E 62 FC | 	wrlong	local01, fp
22270     54 4E 85 F1 | 	sub	fp, #84
22274     88 00 90 FD | 	jmp	#LR__3044
22278                 | LR__3041
22278     20 4E 05 F1 | 	add	fp, #32
2227c     A7 1E 02 FB | 	rdlong	local01, fp
22280     20 4E 85 F1 | 	sub	fp, #32
22284     00 1E 56 F2 | 	cmps	local01, #0 wc
22288     40 00 90 3D |  if_ae	jmp	#LR__3042
2228c     20 4E 05 F1 | 	add	fp, #32
22290     A7 20 02 FB | 	rdlong	local02, fp
22294     30 4E 05 F1 | 	add	fp, #48
22298     A7 20 62 FC | 	wrlong	local02, fp
2229c     04 4E 85 F1 | 	sub	fp, #4
222a0     A7 20 62 FC | 	wrlong	local02, fp
222a4     2C 4E 85 F1 | 	sub	fp, #44
222a8     A7 1E 02 FB | 	rdlong	local01, fp
222ac     98 4E 05 F1 | 	add	fp, #152
222b0     A7 22 02 FB | 	rdlong	local03, fp
222b4     11 1F 02 F1 | 	add	local01, local03
222b8     01 1E 06 F1 | 	add	local01, #1
222bc     64 4E 85 F1 | 	sub	fp, #100
222c0     A7 1E 62 FC | 	wrlong	local01, fp
222c4     54 4E 85 F1 | 	sub	fp, #84
222c8     34 00 90 FD | 	jmp	#LR__3043
222cc                 | LR__3042
222cc     4C 4E 05 F1 | 	add	fp, #76
222d0     A7 00 68 FC | 	wrlong	#0, fp
222d4     2C 4E 85 F1 | 	sub	fp, #44
222d8     A7 1E 02 FB | 	rdlong	local01, fp
222dc     30 4E 05 F1 | 	add	fp, #48
222e0     A7 1E 62 FC | 	wrlong	local01, fp
222e4     68 4E 05 F1 | 	add	fp, #104
222e8     A7 22 02 FB | 	rdlong	local03, fp
222ec     11 1F 02 F1 | 	add	local01, local03
222f0     01 1E 06 F1 | 	add	local01, #1
222f4     64 4E 85 F1 | 	sub	fp, #100
222f8     A7 1E 62 FC | 	wrlong	local01, fp
222fc     54 4E 85 F1 | 	sub	fp, #84
22300                 | LR__3043
22300                 | LR__3044
22300     54 4E 05 F1 | 	add	fp, #84
22304     A7 1E 02 FB | 	rdlong	local01, fp
22308     08 4E 85 F1 | 	sub	fp, #8
2230c     A7 22 02 FB | 	rdlong	local03, fp
22310     11 1F 82 F1 | 	sub	local01, local03
22314     01 1E 06 F1 | 	add	local01, #1
22318     24 4E 85 F1 | 	sub	fp, #36
2231c     A7 1E 62 FC | 	wrlong	local01, fp
22320     04 4E 05 F1 | 	add	fp, #4
22324     A7 1E 0A FB | 	rdlong	local01, fp wz
22328     2C 4E 85 F1 | 	sub	fp, #44
2232c     28 4E 05 51 |  if_ne	add	fp, #40
22330     A7 22 02 5B |  if_ne	rdlong	local03, fp
22334     01 22 06 51 |  if_ne	add	local03, #1
22338     A7 22 62 5C |  if_ne	wrlong	local03, fp
2233c     28 4E 85 51 |  if_ne	sub	fp, #40
22340     1C 4E 05 F1 | 	add	fp, #28
22344     A7 1E 02 FB | 	rdlong	local01, fp
22348     1C 4E 85 F1 | 	sub	fp, #28
2234c     10 1E 0E F2 | 	cmp	local01, #16 wz
22350     28 4E 05 A1 |  if_e	add	fp, #40
22354     A7 1E 02 AB |  if_e	rdlong	local01, fp
22358     02 1E 06 A1 |  if_e	add	local01, #2
2235c     A7 1E 62 AC |  if_e	wrlong	local01, fp
22360     28 4E 85 A1 |  if_e	sub	fp, #40
22364     24 4E 05 F1 | 	add	fp, #36
22368     A7 1E 0A FB | 	rdlong	local01, fp wz
2236c     24 4E 85 F1 | 	sub	fp, #36
22370     28 00 90 AD |  if_e	jmp	#LR__3045
22374     28 4E 05 F1 | 	add	fp, #40
22378     A7 1E 02 FB | 	rdlong	local01, fp
2237c     02 22 06 F6 | 	mov	local03, #2
22380     34 4E 05 F1 | 	add	fp, #52
22384     A7 26 02 FB | 	rdlong	local05, fp
22388     13 23 02 F1 | 	add	local03, local05
2238c     11 1F 02 F1 | 	add	local01, local03
22390     34 4E 85 F1 | 	sub	fp, #52
22394     A7 1E 62 FC | 	wrlong	local01, fp
22398     28 4E 85 F1 | 	sub	fp, #40
2239c                 | LR__3045
2239c     28 4E 05 F1 | 	add	fp, #40
223a0     A7 1E 02 FB | 	rdlong	local01, fp
223a4     28 4E 85 F1 | 	sub	fp, #40
223a8     41 1E 56 F2 | 	cmps	local01, #65 wc
223ac     01 FA 65 36 |  if_ae	neg	result1, #1
223b0     08 05 90 3D |  if_ae	jmp	#LR__3073
223b4     3C 4E 05 F1 | 	add	fp, #60
223b8     A7 1E 0A FB | 	rdlong	local01, fp wz
223bc     3C 4E 85 F1 | 	sub	fp, #60
223c0     60 00 90 AD |  if_e	jmp	#LR__3046
223c4     C0 4E 05 F1 | 	add	fp, #192
223c8     A7 12 02 FB | 	rdlong	arg01, fp
223cc     94 4E 85 F1 | 	sub	fp, #148
223d0     A7 14 02 FB | 	rdlong	arg02, fp
223d4     14 4E 05 F1 | 	add	fp, #20
223d8     A7 16 02 FB | 	rdlong	arg03, fp
223dc     40 4E 85 F1 | 	sub	fp, #64
223e0     14 3E B0 FD | 	call	#__system__emitsign_0501
223e4     18 4F 05 F1 | 	add	fp, #280
223e8     A7 FA 61 FC | 	wrlong	result1, fp
223ec     18 4F 85 F1 | 	sub	fp, #280
223f0     00 FA 55 F2 | 	cmps	result1, #0 wc
223f4     18 4F 05 C1 |  if_b	add	fp, #280
223f8     A7 FA 01 CB |  if_b	rdlong	result1, fp
223fc     18 4F 85 C1 |  if_b	sub	fp, #280
22400     B8 04 90 CD |  if_b	jmp	#LR__3073
22404     C0 4E 05 F1 | 	add	fp, #192
22408     A7 1E 02 FB | 	rdlong	local01, fp
2240c     58 4E 05 F1 | 	add	fp, #88
22410     A7 22 02 FB | 	rdlong	local03, fp
22414     11 1F 02 F1 | 	add	local01, local03
22418     58 4E 85 F1 | 	sub	fp, #88
2241c     A7 1E 62 FC | 	wrlong	local01, fp
22420     C0 4E 85 F1 | 	sub	fp, #192
22424                 | LR__3046
22424     4C 4E 05 F1 | 	add	fp, #76
22428     A7 1E 02 FB | 	rdlong	local01, fp
2242c     34 4E 85 F1 | 	sub	fp, #52
22430     A7 1E 62 FC | 	wrlong	local01, fp
22434     18 4E 85 F1 | 	sub	fp, #24
22438     97 9E 48 FB | 	callpa	#(@LR__3052-@LR__3047)>>2,fcache_load_ptr_
2243c                 | LR__3047
2243c     18 4E 05 F1 | 	add	fp, #24
22440     A7 20 02 FB | 	rdlong	local02, fp
22444     3C 4E 05 F1 | 	add	fp, #60
22448     A7 26 02 FB | 	rdlong	local05, fp
2244c     54 4E 85 F1 | 	sub	fp, #84
22450     13 21 52 F2 | 	cmps	local02, local05 wc
22454     20 01 90 3D |  if_ae	jmp	#LR__3053
22458     18 4E 05 F1 | 	add	fp, #24
2245c     A7 28 02 FB | 	rdlong	local06, fp
22460     18 4E 85 F1 | 	sub	fp, #24
22464     00 28 56 F2 | 	cmps	local06, #0 wc
22468     58 00 90 CD |  if_b	jmp	#LR__3048
2246c     18 4E 05 F1 | 	add	fp, #24
22470     A7 28 02 FB | 	rdlong	local06, fp
22474     40 4E 05 F1 | 	add	fp, #64
22478     A7 2A 02 FB | 	rdlong	local07, fp
2247c     58 4E 85 F1 | 	sub	fp, #88
22480     15 29 52 F2 | 	cmps	local06, local07 wc
22484     3C 00 90 3D |  if_ae	jmp	#LR__3048
22488     C0 4E 05 F1 | 	add	fp, #192
2248c     A7 2C 02 FB | 	rdlong	local08, fp
22490     16 2B 02 F6 | 	mov	local07, local08
22494     01 2A 06 F1 | 	add	local07, #1
22498     A7 2A 62 FC | 	wrlong	local07, fp
2249c     A8 4E 85 F1 | 	sub	fp, #168
224a0     A7 2A 02 FB | 	rdlong	local07, fp
224a4     15 2F 02 F6 | 	mov	local09, local07
224a8     58 4E 05 F1 | 	add	fp, #88
224ac     A7 30 02 F6 | 	mov	local10, fp
224b0     A7 2E 02 F1 | 	add	local09, fp
224b4     17 33 C2 FA | 	rdbyte	local11, local09
224b8     16 33 42 FC | 	wrbyte	local11, local08
224bc     70 4E 85 F1 | 	sub	fp, #112
224c0     20 00 90 FD | 	jmp	#LR__3049
224c4                 | LR__3048
224c4     C0 4E 05 F1 | 	add	fp, #192
224c8     A7 2C 02 FB | 	rdlong	local08, fp
224cc     16 2F 02 F6 | 	mov	local09, local08
224d0     01 2E 06 F1 | 	add	local09, #1
224d4     A7 2E 62 FC | 	wrlong	local09, fp
224d8     C0 4E 85 F1 | 	sub	fp, #192
224dc     30 2E 06 F6 | 	mov	local09, #48
224e0     16 61 48 FC | 	wrbyte	#48, local08
224e4                 | LR__3049
224e4     18 4E 05 F1 | 	add	fp, #24
224e8     A7 28 02 FB | 	rdlong	local06, fp
224ec     38 4E 05 F1 | 	add	fp, #56
224f0     A7 34 02 FB | 	rdlong	local12, fp
224f4     50 4E 85 F1 | 	sub	fp, #80
224f8     1A 29 0A F2 | 	cmp	local06, local12 wz
224fc     5C 00 90 5D |  if_ne	jmp	#LR__3051
22500     10 4F 05 F1 | 	add	fp, #272
22504     A7 2A 02 FB | 	rdlong	local07, fp
22508     10 4F 85 F1 | 	sub	fp, #272
2250c     15 2F 0A F6 | 	mov	local09, local07 wz
22510     28 00 90 5D |  if_ne	jmp	#LR__3050
22514     54 4E 05 F1 | 	add	fp, #84
22518     A7 32 02 FB | 	rdlong	local11, fp
2251c     19 31 02 F6 | 	mov	local10, local11
22520     01 30 86 F1 | 	sub	local10, #1
22524     3C 4E 85 F1 | 	sub	fp, #60
22528     A7 36 02 FB | 	rdlong	local13, fp
2252c     18 4E 85 F1 | 	sub	fp, #24
22530     1B 39 02 F6 | 	mov	local14, local13
22534     18 39 52 F2 | 	cmps	local14, local10 wc
22538     20 00 90 3D |  if_ae	jmp	#LR__3051
2253c                 | LR__3050
2253c     C0 4E 05 F1 | 	add	fp, #192
22540     A7 2C 02 FB | 	rdlong	local08, fp
22544     16 35 02 F6 | 	mov	local12, local08
22548     01 34 06 F1 | 	add	local12, #1
2254c     A7 34 62 FC | 	wrlong	local12, fp
22550     C0 4E 85 F1 | 	sub	fp, #192
22554     2E 2E 06 F6 | 	mov	local09, #46
22558     16 5D 48 FC | 	wrbyte	#46, local08
2255c                 | LR__3051
2255c     18 4E 05 F1 | 	add	fp, #24
22560     A7 3A 02 FB | 	rdlong	local15, fp
22564     1D 35 02 F6 | 	mov	local12, local15
22568     01 34 06 F1 | 	add	local12, #1
2256c     A7 34 62 FC | 	wrlong	local12, fp
22570     18 4E 85 F1 | 	sub	fp, #24
22574     C4 FE 9F FD | 	jmp	#LR__3047
22578                 | LR__3052
22578                 | LR__3053
22578     34 4E 05 F1 | 	add	fp, #52
2257c     A7 1E 0A FB | 	rdlong	local01, fp wz
22580     34 4E 85 F1 | 	sub	fp, #52
22584     A0 00 90 AD |  if_e	jmp	#LR__3057
22588     C0 4E 05 F1 | 	add	fp, #192
2258c     A7 1E 02 FB | 	rdlong	local01, fp
22590     01 1E 86 F1 | 	sub	local01, #1
22594     A7 1E 62 FC | 	wrlong	local01, fp
22598     C0 4E 85 F1 | 	sub	fp, #192
2259c     97 26 48 FB | 	callpa	#(@LR__3055-@LR__3054)>>2,fcache_load_ptr_
225a0                 | LR__3054
225a0     C0 4E 05 F1 | 	add	fp, #192
225a4     A7 1E 02 FB | 	rdlong	local01, fp
225a8     04 4E 05 F1 | 	add	fp, #4
225ac     A7 22 02 FB | 	rdlong	local03, fp
225b0     C4 4E 85 F1 | 	sub	fp, #196
225b4     11 1F 5A F2 | 	cmps	local01, local03 wcz
225b8     30 00 90 ED |  if_be	jmp	#LR__3056
225bc     C0 4E 05 F1 | 	add	fp, #192
225c0     A7 28 02 FB | 	rdlong	local06, fp
225c4     C0 4E 85 F1 | 	sub	fp, #192
225c8     14 25 C2 FA | 	rdbyte	local04, local06
225cc     30 24 0E F2 | 	cmp	local04, #48 wz
225d0     18 00 90 5D |  if_ne	jmp	#LR__3056
225d4     C0 4E 05 F1 | 	add	fp, #192
225d8     A7 1E 02 FB | 	rdlong	local01, fp
225dc     01 1E 86 F1 | 	sub	local01, #1
225e0     A7 1E 62 FC | 	wrlong	local01, fp
225e4     C0 4E 85 F1 | 	sub	fp, #192
225e8     B4 FF 9F FD | 	jmp	#LR__3054
225ec                 | LR__3055
225ec                 | LR__3056
225ec     C0 4E 05 F1 | 	add	fp, #192
225f0     A7 20 02 FB | 	rdlong	local02, fp
225f4     C0 4E 85 F1 | 	sub	fp, #192
225f8     10 1F C2 FA | 	rdbyte	local01, local02
225fc     2E 1E 0E F2 | 	cmp	local01, #46 wz
22600     C0 4E 05 A1 |  if_e	add	fp, #192
22604     A7 1E 02 AB |  if_e	rdlong	local01, fp
22608     01 1E 86 A1 |  if_e	sub	local01, #1
2260c     A7 1E 62 AC |  if_e	wrlong	local01, fp
22610     C0 4E 85 A1 |  if_e	sub	fp, #192
22614     C0 4E 05 F1 | 	add	fp, #192
22618     A7 22 02 FB | 	rdlong	local03, fp
2261c     01 22 06 F1 | 	add	local03, #1
22620     A7 22 62 FC | 	wrlong	local03, fp
22624     C0 4E 85 F1 | 	sub	fp, #192
22628                 | LR__3057
22628     24 4E 05 F1 | 	add	fp, #36
2262c     A7 1E 0A FB | 	rdlong	local01, fp wz
22630     24 4E 85 F1 | 	sub	fp, #36
22634     B4 00 90 AD |  if_e	jmp	#LR__3060
22638     C0 4E 05 F1 | 	add	fp, #192
2263c     A7 20 02 FB | 	rdlong	local02, fp
22640     10 23 02 F6 | 	mov	local03, local02
22644     01 22 06 F1 | 	add	local03, #1
22648     A7 22 62 FC | 	wrlong	local03, fp
2264c     90 4E 85 F1 | 	sub	fp, #144
22650     A7 24 02 FB | 	rdlong	local04, fp
22654     10 25 42 FC | 	wrbyte	local04, local02
22658     90 4E 05 F1 | 	add	fp, #144
2265c     A7 20 02 FB | 	rdlong	local02, fp
22660     10 23 02 F6 | 	mov	local03, local02
22664     01 22 06 F1 | 	add	local03, #1
22668     A7 22 62 FC | 	wrlong	local03, fp
2266c     60 4E 85 F1 | 	sub	fp, #96
22670     A7 24 02 FB | 	rdlong	local04, fp
22674     10 25 42 FC | 	wrbyte	local04, local02
22678     48 4E 85 F1 | 	sub	fp, #72
2267c     A7 00 68 FC | 	wrlong	#0, fp
22680     18 4E 85 F1 | 	sub	fp, #24
22684                 | LR__3058
22684     18 4E 05 F1 | 	add	fp, #24
22688     A7 20 02 FB | 	rdlong	local02, fp
2268c     44 4E 05 F1 | 	add	fp, #68
22690     A7 26 02 FB | 	rdlong	local05, fp
22694     5C 4E 85 F1 | 	sub	fp, #92
22698     13 21 52 F2 | 	cmps	local02, local05 wc
2269c     4C 00 90 3D |  if_ae	jmp	#LR__3059
226a0     C0 4E 05 F1 | 	add	fp, #192
226a4     A7 2C 02 FB | 	rdlong	local08, fp
226a8     16 35 02 F6 | 	mov	local12, local08
226ac     01 34 06 F1 | 	add	local12, #1
226b0     A7 34 62 FC | 	wrlong	local12, fp
226b4     A8 4E 85 F1 | 	sub	fp, #168
226b8     A7 2A 02 FB | 	rdlong	local07, fp
226bc     15 2F 02 F6 | 	mov	local09, local07
226c0     98 4E 05 F1 | 	add	fp, #152
226c4     A7 30 02 F6 | 	mov	local10, fp
226c8     A7 2E 02 F1 | 	add	local09, fp
226cc     17 33 C2 FA | 	rdbyte	local11, local09
226d0     16 33 42 FC | 	wrbyte	local11, local08
226d4     98 4E 85 F1 | 	sub	fp, #152
226d8     A7 34 02 FB | 	rdlong	local12, fp
226dc     01 34 06 F1 | 	add	local12, #1
226e0     A7 34 62 FC | 	wrlong	local12, fp
226e4     18 4E 85 F1 | 	sub	fp, #24
226e8     98 FF 9F FD | 	jmp	#LR__3058
226ec                 | LR__3059
226ec                 | LR__3060
226ec     C0 4E 05 F1 | 	add	fp, #192
226f0     A7 1E 02 FB | 	rdlong	local01, fp
226f4     C0 4E 85 F1 | 	sub	fp, #192
226f8     0F 01 48 FC | 	wrbyte	#0, local01
226fc                 | LR__3061
226fc     6C 4E 05 F1 | 	add	fp, #108
22700     A7 1E 0A FB | 	rdlong	local01, fp wz
22704     6C 4E 85 F1 | 	sub	fp, #108
22708     90 01 90 AD |  if_e	jmp	#LR__3072
2270c     48 4E 05 F1 | 	add	fp, #72
22710     A7 22 0A FB | 	rdlong	local03, fp wz
22714     48 4E 85 F1 | 	sub	fp, #72
22718     80 01 90 AD |  if_e	jmp	#LR__3072
2271c     C4 4E 05 F1 | 	add	fp, #196
22720     A7 12 02 FB | 	rdlong	arg01, fp
22724     C4 4E 85 F1 | 	sub	fp, #196
22728     09 3D 02 F6 | 	mov	local16, arg01
2272c     97 06 48 FB | 	callpa	#(@LR__3063-@LR__3062)>>2,fcache_load_ptr_
22730                 | LR__3062
22730     1E FB C9 FA | 	rdbyte	result1, local16 wz
22734     01 3C 06 51 |  if_ne	add	local16, #1
22738     F4 FF 9F 5D |  if_ne	jmp	#LR__3062
2273c                 | LR__3063
2273c     09 3D 82 F1 | 	sub	local16, arg01
22740     1E 25 02 F6 | 	mov	local04, local16
22744     6C 4E 05 F1 | 	add	fp, #108
22748     A7 28 02 FB | 	rdlong	local06, fp
2274c     6C 4E 85 F1 | 	sub	fp, #108
22750     14 25 5A F2 | 	cmps	local04, local06 wcz
22754     44 01 90 ED |  if_be	jmp	#LR__3072
22758     C4 4E 05 F1 | 	add	fp, #196
2275c     A7 1E 02 FB | 	rdlong	local01, fp
22760     5C 4E 05 F1 | 	add	fp, #92
22764     A7 1E 62 FC | 	wrlong	local01, fp
22768     FC 4E 85 F1 | 	sub	fp, #252
2276c     A7 1E 0A FB | 	rdlong	local01, fp wz
22770     24 4E 85 F1 | 	sub	fp, #36
22774     20 00 90 AD |  if_e	jmp	#LR__3064
22778     B8 4E 05 F1 | 	add	fp, #184
2277c     A7 00 68 FC | 	wrlong	#0, fp
22780     4C 4E 85 F1 | 	sub	fp, #76
22784     A7 1E 02 FB | 	rdlong	local01, fp
22788     B0 4E 05 F1 | 	add	fp, #176
2278c     A7 1E 62 FC | 	wrlong	local01, fp
22790     1C 4F 85 F1 | 	sub	fp, #284
22794     24 00 90 FD | 	jmp	#LR__3065
22798                 | LR__3064
22798     6C 4E 05 F1 | 	add	fp, #108
2279c     A7 1E 02 FB | 	rdlong	local01, fp
227a0     01 1E 86 F1 | 	sub	local01, #1
227a4     4C 4E 05 F1 | 	add	fp, #76
227a8     A7 22 02 FB | 	rdlong	local03, fp
227ac     11 1F 82 F1 | 	sub	local01, local03
227b0     64 4E 05 F1 | 	add	fp, #100
227b4     A7 1E 62 FC | 	wrlong	local01, fp
227b8     1C 4F 85 F1 | 	sub	fp, #284
227bc                 | LR__3065
227bc     97 20 48 FB | 	callpa	#(@LR__3067-@LR__3066)>>2,fcache_load_ptr_
227c0                 | LR__3066
227c0     1C 4F 05 F1 | 	add	fp, #284
227c4     A7 1E 0A FB | 	rdlong	local01, fp wz
227c8     1C 4F 85 F1 | 	sub	fp, #284
227cc     30 00 90 AD |  if_e	jmp	#LR__3068
227d0     20 4F 05 F1 | 	add	fp, #288
227d4     A7 20 02 FB | 	rdlong	local02, fp
227d8     10 23 02 F6 | 	mov	local03, local02
227dc     01 22 06 F1 | 	add	local03, #1
227e0     A7 22 62 FC | 	wrlong	local03, fp
227e4     10 55 48 FC | 	wrbyte	#42, local02
227e8     04 4E 85 F1 | 	sub	fp, #4
227ec     A7 1E 02 FB | 	rdlong	local01, fp
227f0     01 1E 86 F1 | 	sub	local01, #1
227f4     A7 1E 62 FC | 	wrlong	local01, fp
227f8     1C 4F 85 F1 | 	sub	fp, #284
227fc     C0 FF 9F FD | 	jmp	#LR__3066
22800                 | LR__3067
22800                 | LR__3068
22800     B8 4E 05 F1 | 	add	fp, #184
22804     A7 1E 0A FB | 	rdlong	local01, fp wz
22808     B8 4E 85 F1 | 	sub	fp, #184
2280c     70 00 90 AD |  if_e	jmp	#LR__3071
22810     20 4F 05 F1 | 	add	fp, #288
22814     A7 20 02 FB | 	rdlong	local02, fp
22818     10 23 02 F6 | 	mov	local03, local02
2281c     01 22 06 F1 | 	add	local03, #1
22820     A7 22 62 FC | 	wrlong	local03, fp
22824     10 5D 48 FC | 	wrbyte	#46, local02
22828     04 4E 85 F1 | 	sub	fp, #4
2282c     A7 00 68 FC | 	wrlong	#0, fp
22830     1C 4F 85 F1 | 	sub	fp, #284
22834                 | LR__3069
22834     1C 4F 05 F1 | 	add	fp, #284
22838     A7 20 02 FB | 	rdlong	local02, fp
2283c     64 4E 85 F1 | 	sub	fp, #100
22840     A7 26 02 FB | 	rdlong	local05, fp
22844     B8 4E 85 F1 | 	sub	fp, #184
22848     13 21 52 F2 | 	cmps	local02, local05 wc
2284c     30 00 90 3D |  if_ae	jmp	#LR__3070
22850     20 4F 05 F1 | 	add	fp, #288
22854     A7 2C 02 FB | 	rdlong	local08, fp
22858     16 35 02 F6 | 	mov	local12, local08
2285c     01 34 06 F1 | 	add	local12, #1
22860     A7 34 62 FC | 	wrlong	local12, fp
22864     16 55 48 FC | 	wrbyte	#42, local08
22868     04 4E 85 F1 | 	sub	fp, #4
2286c     A7 34 02 FB | 	rdlong	local12, fp
22870     01 34 06 F1 | 	add	local12, #1
22874     A7 34 62 FC | 	wrlong	local12, fp
22878     1C 4F 85 F1 | 	sub	fp, #284
2287c     B4 FF 9F FD | 	jmp	#LR__3069
22880                 | LR__3070
22880                 | LR__3071
22880     20 4F 05 F1 | 	add	fp, #288
22884     A7 20 02 FB | 	rdlong	local02, fp
22888     10 23 02 F6 | 	mov	local03, local02
2288c     01 22 06 F1 | 	add	local03, #1
22890     A7 22 62 FC | 	wrlong	local03, fp
22894     20 4F 85 F1 | 	sub	fp, #288
22898     10 01 48 FC | 	wrbyte	#0, local02
2289c                 | LR__3072
2289c     04 4E 05 F1 | 	add	fp, #4
228a0     A7 12 02 FB | 	rdlong	arg01, fp
228a4     04 4E 05 F1 | 	add	fp, #4
228a8     A7 14 02 FB | 	rdlong	arg02, fp
228ac     BC 4E 05 F1 | 	add	fp, #188
228b0     A7 16 02 FB | 	rdlong	arg03, fp
228b4     C4 4E 85 F1 | 	sub	fp, #196
228b8     C4 EE BF FD | 	call	#__system___fmtstr
228bc                 | LR__3073
228bc     A7 F0 03 F6 | 	mov	ptra, fp
228c0     B2 00 A0 FD | 	call	#popregs_
228c4                 | __system___fmtfloat_ret
228c4     2D 00 64 FD | 	ret
228c8                 | 
228c8                 | __system__Left_S
228c8     04 4A 05 F6 | 	mov	COUNT_, #4
228cc     A8 00 A0 FD | 	call	#pushregs_
228d0     09 1F 02 F6 | 	mov	local01, arg01
228d4     0A 21 02 F6 | 	mov	local02, arg02
228d8     01 20 56 F2 | 	cmps	local02, #1 wc
228dc     80 01 00 CF 
228e0     9E FA 05 C6 |  if_b	mov	result1, ##@LR__4993
228e4     5C 00 90 CD |  if_b	jmp	#LR__3083
228e8     0F 13 02 F6 | 	mov	arg01, local01
228ec     09 23 02 F6 | 	mov	local03, arg01
228f0     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
228f4                 | LR__3080
228f4     11 FB C9 FA | 	rdbyte	result1, local03 wz
228f8     01 22 06 51 |  if_ne	add	local03, #1
228fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3080
22900                 | LR__3081
22900     09 23 82 F1 | 	sub	local03, arg01
22904     11 FB 01 F6 | 	mov	result1, local03
22908     10 FB 59 F2 | 	cmps	result1, local02 wcz
2290c     0F FB 01 E6 |  if_be	mov	result1, local01
22910     30 00 90 ED |  if_be	jmp	#LR__3083
22914     10 13 02 F6 | 	mov	arg01, local02
22918     02 12 06 F1 | 	add	arg01, #2
2291c     08 1E B0 FD | 	call	#__system___gc_alloc_managed
22920     FD 24 0A F6 | 	mov	local04, result1 wz
22924     18 00 90 AD |  if_e	jmp	#LR__3082
22928     12 13 02 F6 | 	mov	arg01, local04
2292c     0F 15 02 F6 | 	mov	arg02, local01
22930     10 17 02 F6 | 	mov	arg03, local02
22934     34 DE BF FD | 	call	#__system____builtin_memmove
22938     12 21 02 F1 | 	add	local02, local04
2293c     10 01 48 FC | 	wrbyte	#0, local02
22940                 | LR__3082
22940     12 FB 01 F6 | 	mov	result1, local04
22944                 | LR__3083
22944     A7 F0 03 F6 | 	mov	ptra, fp
22948     B2 00 A0 FD | 	call	#popregs_
2294c                 | __system__Left_S_ret
2294c     2D 00 64 FD | 	ret
22950                 | 
22950                 | __system__Right_S
22950     05 4A 05 F6 | 	mov	COUNT_, #5
22954     A8 00 A0 FD | 	call	#pushregs_
22958     09 1F 02 F6 | 	mov	local01, arg01
2295c     0A 21 02 F6 | 	mov	local02, arg02
22960     01 20 56 F2 | 	cmps	local02, #1 wc
22964     80 01 00 CF 
22968     9F FA 05 C6 |  if_b	mov	result1, ##@LR__4994
2296c     64 00 90 CD |  if_b	jmp	#LR__3093
22970     0F 13 02 F6 | 	mov	arg01, local01
22974     09 23 02 F6 | 	mov	local03, arg01
22978     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
2297c                 | LR__3090
2297c     11 FB C9 FA | 	rdbyte	result1, local03 wz
22980     01 22 06 51 |  if_ne	add	local03, #1
22984     F4 FF 9F 5D |  if_ne	jmp	#LR__3090
22988                 | LR__3091
22988     09 23 82 F1 | 	sub	local03, arg01
2298c     11 FB 01 F6 | 	mov	result1, local03
22990     FD 24 02 F6 | 	mov	local04, result1
22994     10 25 5A F2 | 	cmps	local04, local02 wcz
22998     0F FB 01 E6 |  if_be	mov	result1, local01
2299c     34 00 90 ED |  if_be	jmp	#LR__3093
229a0     10 13 02 F6 | 	mov	arg01, local02
229a4     02 12 06 F1 | 	add	arg01, #2
229a8     7C 1D B0 FD | 	call	#__system___gc_alloc_managed
229ac     FD 26 0A F6 | 	mov	local05, result1 wz
229b0     1C 00 90 AD |  if_e	jmp	#LR__3092
229b4     10 25 82 F1 | 	sub	local04, local02
229b8     0F 25 02 F1 | 	add	local04, local01
229bc     01 20 06 F1 | 	add	local02, #1
229c0     13 13 02 F6 | 	mov	arg01, local05
229c4     12 15 02 F6 | 	mov	arg02, local04
229c8     10 17 02 F6 | 	mov	arg03, local02
229cc     9C DD BF FD | 	call	#__system____builtin_memmove
229d0                 | LR__3092
229d0     13 FB 01 F6 | 	mov	result1, local05
229d4                 | LR__3093
229d4     A7 F0 03 F6 | 	mov	ptra, fp
229d8     B2 00 A0 FD | 	call	#popregs_
229dc                 | __system__Right_S_ret
229dc     2D 00 64 FD | 	ret
229e0                 | 
229e0                 | __system__Mid_S
229e0     05 4A 05 F6 | 	mov	COUNT_, #5
229e4     A8 00 A0 FD | 	call	#pushregs_
229e8     09 1F 02 F6 | 	mov	local01, arg01
229ec     0A 21 02 F6 | 	mov	local02, arg02
229f0     01 16 56 F2 | 	cmps	arg03, #1 wc
229f4     80 01 00 CF 
229f8     A0 FA 05 C6 |  if_b	mov	result1, ##@LR__4995
229fc     80 00 90 CD |  if_b	jmp	#LR__3103
22a00     01 20 86 F1 | 	sub	local02, #1
22a04     00 20 56 F3 | 	fges	local02, #0 wc
22a08     0F 13 02 F6 | 	mov	arg01, local01
22a0c     09 23 02 F6 | 	mov	local03, arg01
22a10     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
22a14                 | LR__3100
22a14     11 FB C9 FA | 	rdbyte	result1, local03 wz
22a18     01 22 06 51 |  if_ne	add	local03, #1
22a1c     F4 FF 9F 5D |  if_ne	jmp	#LR__3100
22a20                 | LR__3101
22a20     09 23 82 F1 | 	sub	local03, arg01
22a24     11 FB 01 F6 | 	mov	result1, local03
22a28     FD 14 02 F6 | 	mov	arg02, result1
22a2c     10 15 52 F2 | 	cmps	arg02, local02 wc
22a30     80 01 00 CF 
22a34     A1 FA 05 C6 |  if_b	mov	result1, ##@LR__4996
22a38     44 00 90 CD |  if_b	jmp	#LR__3103
22a3c     0A 25 02 F6 | 	mov	local04, arg02
22a40     10 25 82 F1 | 	sub	local04, local02
22a44     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22a48     0B 25 02 16 |  if_a	mov	local04, arg03
22a4c     12 13 02 F6 | 	mov	arg01, local04
22a50     02 12 06 F1 | 	add	arg01, #2
22a54     D0 1C B0 FD | 	call	#__system___gc_alloc_managed
22a58     FD 26 0A F6 | 	mov	local05, result1 wz
22a5c     1C 00 90 AD |  if_e	jmp	#LR__3102
22a60     0F 21 02 F1 | 	add	local02, local01
22a64     13 13 02 F6 | 	mov	arg01, local05
22a68     10 15 02 F6 | 	mov	arg02, local02
22a6c     12 17 02 F6 | 	mov	arg03, local04
22a70     F8 DC BF FD | 	call	#__system____builtin_memmove
22a74     13 25 02 F1 | 	add	local04, local05
22a78     12 01 48 FC | 	wrbyte	#0, local04
22a7c                 | LR__3102
22a7c     13 FB 01 F6 | 	mov	result1, local05
22a80                 | LR__3103
22a80     A7 F0 03 F6 | 	mov	ptra, fp
22a84     B2 00 A0 FD | 	call	#popregs_
22a88                 | __system__Mid_S_ret
22a88     2D 00 64 FD | 	ret
22a8c                 | 
22a8c                 | __system__Chr_S
22a8c     01 4A 05 F6 | 	mov	COUNT_, #1
22a90     A8 00 A0 FD | 	call	#pushregs_
22a94     09 1F 02 F6 | 	mov	local01, arg01
22a98     03 12 06 F6 | 	mov	arg01, #3
22a9c     88 1C B0 FD | 	call	#__system___gc_alloc_managed
22aa0     00 FA 4D F2 | 	cmps	result1, #0 wz
22aa4     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22aa8     01 FA 05 51 |  if_ne	add	result1, #1
22aac     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22ab0     01 FA 85 51 |  if_ne	sub	result1, #1
22ab4     A7 F0 03 F6 | 	mov	ptra, fp
22ab8     B2 00 A0 FD | 	call	#popregs_
22abc                 | __system__Chr_S_ret
22abc     2D 00 64 FD | 	ret
22ac0                 | 
22ac0                 | __system__str_S
22ac0     02 4A 05 F6 | 	mov	COUNT_, #2
22ac4     A8 00 A0 FD | 	call	#pushregs_
22ac8     09 1F 02 F6 | 	mov	local01, arg01
22acc     10 12 06 F6 | 	mov	arg01, #16
22ad0     54 1C B0 FD | 	call	#__system___gc_alloc_managed
22ad4     FD 20 0A F6 | 	mov	local02, result1 wz
22ad8     30 00 90 AD |  if_e	jmp	#LR__3110
22adc     F8 13 02 F6 | 	mov	arg01, ptra
22ae0     08 F0 07 F1 | 	add	ptra, #8
22ae4     09 21 62 FC | 	wrlong	local02, arg01
22ae8     04 12 06 F1 | 	add	arg01, #4
22aec     09 01 68 FC | 	wrlong	#0, arg01
22af0     04 12 86 F1 | 	sub	arg01, #4
22af4     00 A0 04 FF 
22af8     00 12 46 F5 | 	or	arg01, ##155189248
22afc     00 14 06 F6 | 	mov	arg02, #0
22b00     0F 17 02 F6 | 	mov	arg03, local01
22b04     67 18 06 F6 | 	mov	arg04, #103
22b08     90 EE BF FD | 	call	#__system___fmtfloat
22b0c                 | LR__3110
22b0c     10 FB 01 F6 | 	mov	result1, local02
22b10     A7 F0 03 F6 | 	mov	ptra, fp
22b14     B2 00 A0 FD | 	call	#popregs_
22b18                 | __system__str_S_ret
22b18     2D 00 64 FD | 	ret
22b1c                 | 
22b1c                 | __system__Number_S
22b1c     08 4A 05 F6 | 	mov	COUNT_, #8
22b20     A8 00 A0 FD | 	call	#pushregs_
22b24     09 1F 02 F6 | 	mov	local01, arg01
22b28     0A 21 0A F6 | 	mov	local02, arg02 wz
22b2c     0B 23 02 F6 | 	mov	local03, arg03
22b30     3C 00 90 5D |  if_ne	jmp	#LR__3122
22b34     01 20 06 F6 | 	mov	local02, #1
22b38     11 25 02 F6 | 	mov	local04, local03
22b3c     01 26 06 F6 | 	mov	local05, #1
22b40     97 16 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22b44                 | LR__3120
22b44     00 28 06 F6 | 	mov	local06, #0
22b48     0F 25 1A F2 | 	cmp	local04, local01 wcz
22b4c     01 28 66 E6 |  if_be	neg	local06, #1
22b50     12 27 12 F2 | 	cmp	local05, local04 wc
22b54     15 2B A2 F1 | 	subx	local07, local07
22b58     15 29 CA F7 | 	test	local06, local07 wz
22b5c     11 25 02 5D |  if_ne	qmul	local04, local03
22b60     12 27 02 56 |  if_ne	mov	local05, local04
22b64     01 20 06 51 |  if_ne	add	local02, #1
22b68     18 24 62 5D |  if_ne	getqx	local04
22b6c     D4 FF 9F 5D |  if_ne	jmp	#LR__3120
22b70                 | LR__3121
22b70                 | LR__3122
22b70     20 20 36 F3 | 	fle	local02, #32 wc
22b74     10 13 02 F6 | 	mov	arg01, local02
22b78     02 12 06 F1 | 	add	arg01, #2
22b7c     A8 1B B0 FD | 	call	#__system___gc_alloc_managed
22b80     FD 28 02 F6 | 	mov	local06, result1
22b84     10 2B 02 F6 | 	mov	local07, local02
22b88     14 2B 02 F1 | 	add	local07, local06
22b8c     15 01 48 FC | 	wrbyte	#0, local07
22b90     97 1A 48 FB | 	callpa	#(@LR__3124-@LR__3123)>>2,fcache_load_ptr_
22b94                 | LR__3123
22b94     01 20 16 F2 | 	cmp	local02, #1 wc
22b98     2C 00 90 CD |  if_b	jmp	#LR__3125
22b9c     11 1F 12 FD | 	qdiv	local01, local03
22ba0     01 20 86 F1 | 	sub	local02, #1
22ba4     10 2B 02 F6 | 	mov	local07, local02
22ba8     14 2B 02 F1 | 	add	local07, local06
22bac     19 2C 62 FD | 	getqy	local08
22bb0     0A 2C 16 F2 | 	cmp	local08, #10 wc
22bb4     30 2C 06 C1 |  if_b	add	local08, #48
22bb8     37 2C 06 31 |  if_ae	add	local08, #55
22bbc     15 2D 42 FC | 	wrbyte	local08, local07
22bc0     18 1E 62 FD | 	getqx	local01
22bc4     CC FF 9F FD | 	jmp	#LR__3123
22bc8                 | LR__3124
22bc8                 | LR__3125
22bc8     14 FB 01 F6 | 	mov	result1, local06
22bcc     A7 F0 03 F6 | 	mov	ptra, fp
22bd0     B2 00 A0 FD | 	call	#popregs_
22bd4                 | __system__Number_S_ret
22bd4     2D 00 64 FD | 	ret
22bd8                 | 
22bd8                 | __system__LCase_S
22bd8     07 4A 05 F6 | 	mov	COUNT_, #7
22bdc     A8 00 A0 FD | 	call	#pushregs_
22be0     09 1F 02 F6 | 	mov	local01, arg01
22be4     09 21 02 F6 | 	mov	local02, arg01
22be8     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22bec                 | LR__3130
22bec     10 FB C9 FA | 	rdbyte	result1, local02 wz
22bf0     01 20 06 51 |  if_ne	add	local02, #1
22bf4     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22bf8                 | LR__3131
22bf8     09 21 82 F1 | 	sub	local02, arg01
22bfc     10 FB 01 F6 | 	mov	result1, local02
22c00     FD 20 0A F6 | 	mov	local02, result1 wz
22c04     80 01 00 AF 
22c08     A2 FA 05 A6 |  if_e	mov	result1, ##@LR__4997
22c0c     7C 00 90 AD |  if_e	jmp	#LR__3137
22c10     10 13 02 F6 | 	mov	arg01, local02
22c14     02 12 06 F1 | 	add	arg01, #2
22c18     0C 1B B0 FD | 	call	#__system___gc_alloc_managed
22c1c     FD 22 0A F6 | 	mov	local03, result1 wz
22c20     64 00 90 AD |  if_e	jmp	#LR__3136
22c24     01 24 66 F6 | 	neg	local04, #1
22c28     97 26 48 FB | 	callpa	#(@LR__3135-@LR__3132)>>2,fcache_load_ptr_
22c2c                 | LR__3132
22c2c     01 24 06 F1 | 	add	local04, #1
22c30     12 27 02 F6 | 	mov	local05, local04
22c34     0F 27 02 F1 | 	add	local05, local01
22c38     13 29 C2 FA | 	rdbyte	local06, local05
22c3c     41 28 56 F2 | 	cmps	local06, #65 wc
22c40     18 00 90 CD |  if_b	jmp	#LR__3133
22c44     5B 28 56 F2 | 	cmps	local06, #91 wc
22c48     12 2B 02 C6 |  if_b	mov	local07, local04
22c4c     11 2B 02 C1 |  if_b	add	local07, local03
22c50     20 28 06 C1 |  if_b	add	local06, #32
22c54     15 29 42 CC |  if_b	wrbyte	local06, local07
22c58     0C 00 90 CD |  if_b	jmp	#LR__3134
22c5c                 | LR__3133
22c5c     12 2B 02 F6 | 	mov	local07, local04
22c60     11 2B 02 F1 | 	add	local07, local03
22c64     15 29 42 FC | 	wrbyte	local06, local07
22c68                 | LR__3134
22c68     10 29 02 F6 | 	mov	local06, local02
22c6c     01 28 86 F1 | 	sub	local06, #1
22c70     14 25 0A F2 | 	cmp	local04, local06 wz
22c74     B4 FF 9F 5D |  if_ne	jmp	#LR__3132
22c78                 | LR__3135
22c78     11 21 02 F1 | 	add	local02, local03
22c7c     10 01 48 FC | 	wrbyte	#0, local02
22c80     11 FB 01 F6 | 	mov	result1, local03
22c84     04 00 90 FD | 	jmp	#LR__3137
22c88                 | LR__3136
22c88     11 FB 01 F6 | 	mov	result1, local03
22c8c                 | LR__3137
22c8c     A7 F0 03 F6 | 	mov	ptra, fp
22c90     B2 00 A0 FD | 	call	#popregs_
22c94                 | __system__LCase_S_ret
22c94     2D 00 64 FD | 	ret
22c98                 | 
22c98                 | __system__LTrim_S
22c98     05 4A 05 F6 | 	mov	COUNT_, #5
22c9c     A8 00 A0 FD | 	call	#pushregs_
22ca0     09 1F 02 F6 | 	mov	local01, arg01
22ca4     09 21 02 F6 | 	mov	local02, arg01
22ca8     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
22cac                 | LR__3140
22cac     10 FB C9 FA | 	rdbyte	result1, local02 wz
22cb0     01 20 06 51 |  if_ne	add	local02, #1
22cb4     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
22cb8                 | LR__3141
22cb8     09 21 82 F1 | 	sub	local02, arg01
22cbc     10 FB 01 F6 | 	mov	result1, local02
22cc0     FD 20 0A F6 | 	mov	local02, result1 wz
22cc4     80 01 00 AF 
22cc8     A3 FA 05 A6 |  if_e	mov	result1, ##@LR__4998
22ccc     7C 00 90 AD |  if_e	jmp	#LR__3146
22cd0     00 22 06 F6 | 	mov	local03, #0
22cd4     10 25 02 F6 | 	mov	local04, local02
22cd8                 | LR__3142
22cd8     12 23 52 F2 | 	cmps	local03, local04 wc
22cdc     68 00 90 3D |  if_ae	jmp	#LR__3145
22ce0     11 17 02 F6 | 	mov	arg03, local03
22ce4     0F 17 02 F1 | 	add	arg03, local01
22ce8     0B 17 C2 FA | 	rdbyte	arg03, arg03
22cec     20 16 0E F2 | 	cmp	arg03, #32 wz
22cf0     4C 00 90 AD |  if_e	jmp	#LR__3144
22cf4     10 13 02 F6 | 	mov	arg01, local02
22cf8     11 13 82 F1 | 	sub	arg01, local03
22cfc     02 12 06 F1 | 	add	arg01, #2
22d00     24 1A B0 FD | 	call	#__system___gc_alloc_managed
22d04     FD 26 0A F6 | 	mov	local05, result1 wz
22d08     2C 00 90 AD |  if_e	jmp	#LR__3143
22d0c     11 15 02 F6 | 	mov	arg02, local03
22d10     0F 15 02 F1 | 	add	arg02, local01
22d14     10 17 02 F6 | 	mov	arg03, local02
22d18     11 17 82 F1 | 	sub	arg03, local03
22d1c     13 13 02 F6 | 	mov	arg01, local05
22d20     48 DA BF FD | 	call	#__system____builtin_memmove
22d24     11 21 82 F1 | 	sub	local02, local03
22d28     13 21 02 F1 | 	add	local02, local05
22d2c     10 01 48 FC | 	wrbyte	#0, local02
22d30     13 FB 01 F6 | 	mov	result1, local05
22d34     14 00 90 FD | 	jmp	#LR__3146
22d38                 | LR__3143
22d38     13 FB 01 F6 | 	mov	result1, local05
22d3c     0C 00 90 FD | 	jmp	#LR__3146
22d40                 | LR__3144
22d40     01 22 06 F1 | 	add	local03, #1
22d44     90 FF 9F FD | 	jmp	#LR__3142
22d48                 | LR__3145
22d48     0F FB 01 F6 | 	mov	result1, local01
22d4c                 | LR__3146
22d4c     A7 F0 03 F6 | 	mov	ptra, fp
22d50     B2 00 A0 FD | 	call	#popregs_
22d54                 | __system__LTrim_S_ret
22d54     2D 00 64 FD | 	ret
22d58                 | 
22d58                 | __system__RTrim_S
22d58     04 4A 05 F6 | 	mov	COUNT_, #4
22d5c     A8 00 A0 FD | 	call	#pushregs_
22d60     09 1F 02 F6 | 	mov	local01, arg01
22d64     09 21 02 F6 | 	mov	local02, arg01
22d68     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22d6c                 | LR__3150
22d6c     10 FB C9 FA | 	rdbyte	result1, local02 wz
22d70     01 20 06 51 |  if_ne	add	local02, #1
22d74     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
22d78                 | LR__3151
22d78     09 21 82 F1 | 	sub	local02, arg01
22d7c     10 FB 01 F6 | 	mov	result1, local02
22d80     FD 20 0A F6 | 	mov	local02, result1 wz
22d84     80 01 00 AF 
22d88     A4 FA 05 A6 |  if_e	mov	result1, ##@LR__4999
22d8c     74 00 90 AD |  if_e	jmp	#LR__3155
22d90     10 23 02 F6 | 	mov	local03, local02
22d94     01 22 86 F1 | 	sub	local03, #1
22d98                 | LR__3152
22d98     11 15 02 F6 | 	mov	arg02, local03
22d9c     0F 15 02 F1 | 	add	arg02, local01
22da0     0A 21 C2 FA | 	rdbyte	local02, arg02
22da4     20 20 0E F2 | 	cmp	local02, #32 wz
22da8     44 00 90 AD |  if_e	jmp	#LR__3154
22dac     11 13 02 F6 | 	mov	arg01, local03
22db0     02 12 06 F1 | 	add	arg01, #2
22db4     70 19 B0 FD | 	call	#__system___gc_alloc_managed
22db8     FD 24 0A F6 | 	mov	local04, result1 wz
22dbc     28 00 90 AD |  if_e	jmp	#LR__3153
22dc0     11 17 02 F6 | 	mov	arg03, local03
22dc4     01 16 06 F1 | 	add	arg03, #1
22dc8     12 13 02 F6 | 	mov	arg01, local04
22dcc     0F 15 02 F6 | 	mov	arg02, local01
22dd0     98 D9 BF FD | 	call	#__system____builtin_memmove
22dd4     01 22 06 F1 | 	add	local03, #1
22dd8     12 23 02 F1 | 	add	local03, local04
22ddc     11 01 48 FC | 	wrbyte	#0, local03
22de0     12 FB 01 F6 | 	mov	result1, local04
22de4     1C 00 90 FD | 	jmp	#LR__3155
22de8                 | LR__3153
22de8     12 FB 01 F6 | 	mov	result1, local04
22dec     14 00 90 FD | 	jmp	#LR__3155
22df0                 | LR__3154
22df0     01 22 86 F1 | 	sub	local03, #1
22df4     00 22 56 F2 | 	cmps	local03, #0 wc
22df8     9C FF 9F 3D |  if_ae	jmp	#LR__3152
22dfc     80 01 00 FF 
22e00     A5 FA 05 F6 | 	mov	result1, ##@LR__5000
22e04                 | LR__3155
22e04     A7 F0 03 F6 | 	mov	ptra, fp
22e08     B2 00 A0 FD | 	call	#popregs_
22e0c                 | __system__RTrim_S_ret
22e0c     2D 00 64 FD | 	ret
22e10                 | 
22e10                 | __system__Instr
22e10     07 4A 05 F6 | 	mov	COUNT_, #7
22e14     A8 00 A0 FD | 	call	#pushregs_
22e18     09 1F 02 F6 | 	mov	local01, arg01
22e1c     0A 21 02 F6 | 	mov	local02, arg02
22e20     0B 23 02 F6 | 	mov	local03, arg03
22e24     11 13 02 F6 | 	mov	arg01, local03
22e28     09 25 02 F6 | 	mov	local04, arg01
22e2c     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22e30                 | LR__3160
22e30     12 FB C9 FA | 	rdbyte	result1, local04 wz
22e34     01 24 06 51 |  if_ne	add	local04, #1
22e38     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22e3c                 | LR__3161
22e3c     09 25 82 F1 | 	sub	local04, arg01
22e40     12 27 02 F6 | 	mov	local05, local04
22e44     10 13 02 F6 | 	mov	arg01, local02
22e48     09 25 02 F6 | 	mov	local04, arg01
22e4c     97 06 48 FB | 	callpa	#(@LR__3163-@LR__3162)>>2,fcache_load_ptr_
22e50                 | LR__3162
22e50     12 FB C9 FA | 	rdbyte	result1, local04 wz
22e54     01 24 06 51 |  if_ne	add	local04, #1
22e58     F4 FF 9F 5D |  if_ne	jmp	#LR__3162
22e5c                 | LR__3163
22e5c     09 25 82 F1 | 	sub	local04, arg01
22e60     12 FB 01 F6 | 	mov	result1, local04
22e64     FD 18 0A F6 | 	mov	arg04, result1 wz
22e68     00 FA 05 A6 |  if_e	mov	result1, #0
22e6c     98 00 90 AD |  if_e	jmp	#LR__3167
22e70     00 26 0E F2 | 	cmp	local05, #0 wz
22e74     00 FA 05 A6 |  if_e	mov	result1, #0
22e78     8C 00 90 AD |  if_e	jmp	#LR__3167
22e7c     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
22e80     00 FA 05 16 |  if_a	mov	result1, #0
22e84     80 00 90 1D |  if_a	jmp	#LR__3167
22e88     01 1E 56 F2 | 	cmps	local01, #1 wc
22e8c     01 1E 06 C6 |  if_b	mov	local01, #1
22e90     11 29 C2 FA | 	rdbyte	local06, local03
22e94     01 26 0E F2 | 	cmp	local05, #1 wz
22e98     18 00 90 5D |  if_ne	jmp	#LR__3164
22e9c     10 13 02 F6 | 	mov	arg01, local02
22ea0     14 15 02 F6 | 	mov	arg02, local06
22ea4     0F 17 02 F6 | 	mov	arg03, local01
22ea8     00 18 06 F6 | 	mov	arg04, #0
22eac     50 34 B0 FD | 	call	#__system____ScanForChar
22eb0     54 00 90 FD | 	jmp	#LR__3167
22eb4                 | LR__3164
22eb4     0F 2B 02 F6 | 	mov	local07, local01
22eb8                 | LR__3165
22eb8     10 13 02 F6 | 	mov	arg01, local02
22ebc     14 15 02 F6 | 	mov	arg02, local06
22ec0     15 17 02 F6 | 	mov	arg03, local07
22ec4     00 18 06 F6 | 	mov	arg04, #0
22ec8     34 34 B0 FD | 	call	#__system____ScanForChar
22ecc     FD 2A 0A F6 | 	mov	local07, result1 wz
22ed0     30 00 90 AD |  if_e	jmp	#LR__3166
22ed4     13 17 02 F6 | 	mov	arg03, local05
22ed8     10 13 02 F6 | 	mov	arg01, local02
22edc     15 15 02 F6 | 	mov	arg02, local07
22ee0     FC FA BF FD | 	call	#__system__Mid_S
22ee4     FD 12 02 F6 | 	mov	arg01, result1
22ee8     11 15 02 F6 | 	mov	arg02, local03
22eec     84 D9 BF FD | 	call	#__system___string_cmp
22ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
22ef4     15 FB 01 A6 |  if_e	mov	result1, local07
22ef8     0C 00 90 AD |  if_e	jmp	#LR__3167
22efc     13 2B 02 F1 | 	add	local07, local05
22f00     B4 FF 9F FD | 	jmp	#LR__3165
22f04                 | LR__3166
22f04     00 FA 05 F6 | 	mov	result1, #0
22f08                 | LR__3167
22f08     A7 F0 03 F6 | 	mov	ptra, fp
22f0c     B2 00 A0 FD | 	call	#popregs_
22f10                 | __system__Instr_ret
22f10     2D 00 64 FD | 	ret
22f14                 | 
22f14                 | __system___strerror
22f14     00 12 56 F2 | 	cmps	arg01, #0 wc
22f18     08 00 90 CD |  if_b	jmp	#LR__3170
22f1c     1A 12 56 F2 | 	cmps	arg01, #26 wc
22f20     04 00 90 CD |  if_b	jmp	#LR__3171
22f24                 | LR__3170
22f24     19 12 06 F6 | 	mov	arg01, #25
22f28                 | LR__3171
22f28     02 12 66 F0 | 	shl	arg01, #2
22f2c     01 00 00 FF 
22f30     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
22f34     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22f38     09 FB 01 FB | 	rdlong	result1, arg01
22f3c     01 00 00 FF 
22f40     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
22f44                 | __system___strerror_ret
22f44     2D 00 64 FD | 	ret
22f48                 | 
22f48                 | __system___int64_shl
22f48     20 16 CE F7 | 	test	arg03, #32 wz
22f4c     09 15 02 56 |  if_ne	mov	arg02, arg01
22f50     00 12 06 56 |  if_ne	mov	arg01, #0
22f54     1F 16 CE F7 | 	test	arg03, #31 wz
22f58     18 00 90 AD |  if_e	jmp	#LR__3180
22f5c     0B 15 62 F0 | 	shl	arg02, arg03
22f60     09 FB 01 F6 | 	mov	result1, arg01
22f64     0B FD 61 F6 | 	neg	result2, arg03
22f68     FE FA 41 F0 | 	shr	result1, result2
22f6c     FD 14 42 F5 | 	or	arg02, result1
22f70     0B 13 62 F0 | 	shl	arg01, arg03
22f74                 | LR__3180
22f74     0A FD 01 F6 | 	mov	result2, arg02
22f78     09 FB 01 F6 | 	mov	result1, arg01
22f7c                 | __system___int64_shl_ret
22f7c     2D 00 64 FD | 	ret
22f80                 | 
22f80                 | __system___usepins
22f80     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22f84     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22f88     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
22f8c     00 13 CA F7 | 	test	arg01, _var01 wz
22f90     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
22f94     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
22f98     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
22f9c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
22fa0     00 FA 05 56 |  if_ne	mov	result1, #0
22fa4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
22fa8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22fac     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22fb0     09 03 42 F5 | 	or	_var02, arg01
22fb4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22fb8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fbc     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22fc0     0A 03 42 F5 | 	or	_var02, arg02
22fc4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22fc8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22fcc     01 FA 65 F6 | 	neg	result1, #1
22fd0                 | __system___usepins_ret
22fd0     2D 00 64 FD | 	ret
22fd4                 | 
22fd4                 | __system___freepins
22fd4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22fd8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22fdc     09 01 22 F5 | 	andn	_var01, arg01
22fe0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22fe4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fe8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22fec     0A 01 22 F5 | 	andn	_var01, arg02
22ff0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22ff4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22ff8                 | __system___freepins_ret
22ff8     2D 00 64 FD | 	ret
22ffc                 | 
22ffc                 | __system___float_fromuns
22ffc     09 17 0A F6 | 	mov	arg03, arg01 wz
23000     0B FB 01 A6 |  if_e	mov	result1, arg03
23004     24 00 90 AD |  if_e	jmp	#LR__3190
23008     0B 15 92 F7 | 	encod	arg02, arg03 wc
2300c     01 14 06 C1 |  if_b	add	arg02, #1
23010     01 14 86 F1 | 	sub	arg02, #1
23014     1F 12 06 F6 | 	mov	arg01, #31
23018     0A 13 82 F1 | 	sub	arg01, arg02
2301c     09 17 62 F0 | 	shl	arg03, arg01
23020     02 16 46 F0 | 	shr	arg03, #2
23024     00 12 06 F6 | 	mov	arg01, #0
23028     4C 09 B0 FD | 	call	#__system___float_Pack
2302c                 | LR__3190
2302c                 | __system___float_fromuns_ret
2302c     2D 00 64 FD | 	ret
23030                 | 
23030                 | __system___float_add
23030     0F 4A 05 F6 | 	mov	COUNT_, #15
23034     A8 00 A0 FD | 	call	#pushregs_
23038     09 1F 02 F6 | 	mov	local01, arg01
2303c     0A 21 02 F6 | 	mov	local02, arg02
23040     00 22 06 F6 | 	mov	local03, #0
23044     0F 25 02 F6 | 	mov	local04, local01
23048     12 27 02 F6 | 	mov	local05, local04
2304c     16 26 46 F7 | 	zerox	local05, #22
23050     12 29 02 F6 | 	mov	local06, local04
23054     01 28 66 F0 | 	shl	local06, #1
23058     18 28 46 F0 | 	shr	local06, #24
2305c     1F 24 46 F0 | 	shr	local04, #31
23060     10 13 02 F6 | 	mov	arg01, local02
23064     09 FB 01 F6 | 	mov	result1, arg01
23068     FD 2A 02 F6 | 	mov	local07, result1
2306c     15 2D 02 F6 | 	mov	local08, local07
23070     16 2C 46 F7 | 	zerox	local08, #22
23074     15 2F 02 F6 | 	mov	local09, local07
23078     01 2E 66 F0 | 	shl	local09, #1
2307c     18 2E 46 F0 | 	shr	local09, #24
23080     17 31 02 F6 | 	mov	local10, local09
23084     1F 2A 46 F0 | 	shr	local07, #31
23088     00 32 06 F6 | 	mov	local11, #0
2308c     00 34 06 F6 | 	mov	local12, #0
23090     18 29 12 F2 | 	cmp	local06, local10 wc
23094     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23098     2C 00 90 1D |  if_a	jmp	#LR__3200
2309c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
230a0     24 00 90 3D |  if_ae	jmp	#LR__3200
230a4     13 37 02 F6 | 	mov	local13, local05
230a8     16 27 02 F6 | 	mov	local05, local08
230ac     1B 2D 02 F6 | 	mov	local08, local13
230b0     14 37 02 F6 | 	mov	local13, local06
230b4     18 29 02 F6 | 	mov	local06, local10
230b8     1B 31 02 F6 | 	mov	local10, local13
230bc     12 37 02 F6 | 	mov	local13, local04
230c0     15 25 02 F6 | 	mov	local04, local07
230c4     1B 2B 02 F6 | 	mov	local07, local13
230c8                 | LR__3200
230c8     FF 28 0E F2 | 	cmp	local06, #255 wz
230cc     70 01 90 AD |  if_e	jmp	#LR__3215
230d0     00 28 0E F2 | 	cmp	local06, #0 wz
230d4     AC 01 90 AD |  if_e	jmp	#LR__3217
230d8     17 26 26 F4 | 	bith	local05, #23
230dc                 | LR__3201
230dc     00 30 0E F2 | 	cmp	local10, #0 wz
230e0     F0 01 90 AD |  if_e	jmp	#LR__3221
230e4     17 2C 26 F4 | 	bith	local08, #23
230e8                 | LR__3202
230e8     7F 28 86 F1 | 	sub	local06, #127
230ec     7F 30 86 F1 | 	sub	local10, #127
230f0     14 39 02 F6 | 	mov	local14, local06
230f4     18 39 82 F1 | 	sub	local14, local10
230f8     97 14 48 FB | 	callpa	#(@LR__3204-@LR__3203)>>2,fcache_load_ptr_
230fc                 | LR__3203
230fc     20 38 56 F2 | 	cmps	local14, #32 wc
23100     20 00 90 CD |  if_b	jmp	#LR__3205
23104     16 2F 02 F6 | 	mov	local09, local08
23108     00 32 0E F2 | 	cmp	local11, #0 wz
2310c     6F 32 62 FD | 	wrnz	local11
23110     19 2F 42 F5 | 	or	local09, local11
23114     17 33 02 F6 | 	mov	local11, local09
23118     00 2C 06 F6 | 	mov	local08, #0
2311c     20 38 86 F1 | 	sub	local14, #32
23120     D8 FF 9F FD | 	jmp	#LR__3203
23124                 | LR__3204
23124                 | LR__3205
23124     00 38 0E F2 | 	cmp	local14, #0 wz
23128     38 00 90 AD |  if_e	jmp	#LR__3206
2312c     16 37 02 F6 | 	mov	local13, local08
23130     20 30 06 F6 | 	mov	local10, #32
23134     1C 31 82 F1 | 	sub	local10, local14
23138     18 37 62 F0 | 	shl	local13, local10
2313c     19 31 02 F6 | 	mov	local10, local11
23140     20 2E 06 F6 | 	mov	local09, #32
23144     1C 2F 82 F1 | 	sub	local09, local14
23148     17 31 6A F0 | 	shl	local10, local09 wz
2314c     1C 33 42 F0 | 	shr	local11, local14
23150     1C 2D 42 F0 | 	shr	local08, local14
23154     1B 33 42 F5 | 	or	local11, local13
23158     00 3A 06 F6 | 	mov	local15, #0
2315c     01 3A 06 56 |  if_ne	mov	local15, #1
23160     1D 33 42 F5 | 	or	local11, local15
23164                 | LR__3206
23164     12 3B 02 F6 | 	mov	local15, local04
23168     15 3B 62 F5 | 	xor	local15, local07
2316c     01 3A CE F7 | 	test	local15, #1 wz
23170     18 00 90 AD |  if_e	jmp	#LR__3207
23174     16 2D 22 F6 | 	not	local08, local08
23178     19 33 22 F6 | 	not	local11, local11
2317c     01 32 0E F1 | 	add	local11, #1 wz
23180     00 3A 06 F6 | 	mov	local15, #0
23184     01 3A 06 A6 |  if_e	mov	local15, #1
23188     1D 2D 02 F1 | 	add	local08, local15
2318c                 | LR__3207
2318c     19 35 12 F1 | 	add	local12, local11 wc
23190     16 27 22 F1 | 	addx	local05, local08
23194     00 26 56 F2 | 	cmps	local05, #0 wc
23198     1C 00 90 3D |  if_ae	jmp	#LR__3208
2319c     01 24 66 F5 | 	xor	local04, #1
231a0     13 27 22 F6 | 	not	local05, local05
231a4     1A 35 22 F6 | 	not	local12, local12
231a8     01 34 0E F1 | 	add	local12, #1 wz
231ac     00 3A 06 F6 | 	mov	local15, #0
231b0     01 3A 06 A6 |  if_e	mov	local15, #1
231b4     1D 27 02 F1 | 	add	local05, local15
231b8                 | LR__3208
231b8     00 80 00 FF 
231bc     00 26 16 F2 | 	cmp	local05, ##16777216 wc
231c0     28 00 90 CD |  if_b	jmp	#LR__3209
231c4     01 28 06 F1 | 	add	local06, #1
231c8     1A 39 02 F6 | 	mov	local14, local12
231cc     01 38 06 F5 | 	and	local14, #1
231d0     01 34 46 F0 | 	shr	local12, #1
231d4     13 3B 02 F6 | 	mov	local15, local05
231d8     1F 3A 66 F0 | 	shl	local15, #31
231dc     1D 35 42 F5 | 	or	local12, local15
231e0     1C 35 42 F5 | 	or	local12, local14
231e4     01 26 46 F0 | 	shr	local05, #1
231e8     3C 00 90 FD | 	jmp	#LR__3214
231ec                 | LR__3209
231ec     00 40 00 FF 
231f0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
231f4     30 00 90 3D |  if_ae	jmp	#LR__3213
231f8     00 26 0E F2 | 	cmp	local05, #0 wz
231fc     00 34 0E A2 |  if_e	cmp	local12, #0 wz
23200     08 24 46 A5 |  if_e	or	local04, #8
23204     01 24 26 A5 |  if_e	andn	local04, #1
23208     1C 00 90 AD |  if_e	jmp	#LR__3212
2320c                 | LR__3210
2320c     00 40 00 FF 
23210     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23214     10 00 90 3D |  if_ae	jmp	#LR__3211
23218     1A 35 12 F1 | 	add	local12, local12 wc
2321c     13 27 22 F1 | 	addx	local05, local05
23220     01 28 86 F1 | 	sub	local06, #1
23224     E4 FF 9F FD | 	jmp	#LR__3210
23228                 | LR__3211
23228                 | LR__3212
23228                 | LR__3213
23228                 | LR__3214
23228     13 13 02 F6 | 	mov	arg01, local05
2322c     1A 15 02 F6 | 	mov	arg02, local12
23230     14 17 02 F6 | 	mov	arg03, local06
23234     12 19 02 F6 | 	mov	arg04, local04
23238     08 35 B0 FD | 	call	#__system__pack_0607
2323c     DC 00 90 FD | 	jmp	#LR__3225
23240                 | LR__3215
23240     FF 30 0E F2 | 	cmp	local10, #255 wz
23244     10 00 90 5D |  if_ne	jmp	#LR__3216
23248     12 2B 0A F2 | 	cmp	local07, local04 wz
2324c     00 F8 3F 5F 
23250     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23254     C4 00 90 5D |  if_ne	jmp	#LR__3225
23258                 | LR__3216
23258     00 26 0E F2 | 	cmp	local05, #0 wz
2325c     00 F8 3F 5F 
23260     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23264     B4 00 90 5D |  if_ne	jmp	#LR__3225
23268     1A 15 02 F6 | 	mov	arg02, local12
2326c     14 17 02 F6 | 	mov	arg03, local06
23270     12 19 02 F6 | 	mov	arg04, local04
23274     02 18 46 F5 | 	or	arg04, #2
23278     13 13 02 F6 | 	mov	arg01, local05
2327c     C4 34 B0 FD | 	call	#__system__pack_0607
23280     98 00 90 FD | 	jmp	#LR__3225
23284                 | LR__3217
23284     00 26 0E F2 | 	cmp	local05, #0 wz
23288     28 00 90 AD |  if_e	jmp	#LR__3220
2328c     01 26 66 F0 | 	shl	local05, #1
23290     97 0E 48 FB | 	callpa	#(@LR__3219-@LR__3218)>>2,fcache_load_ptr_
23294                 | LR__3218
23294     00 40 00 FF 
23298     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2329c     14 3B 02 C6 |  if_b	mov	local15, local06
232a0     01 3A 86 C1 |  if_b	sub	local15, #1
232a4     1D 29 02 C6 |  if_b	mov	local06, local15
232a8     01 26 66 C0 |  if_b	shl	local05, #1
232ac     E4 FF 9F CD |  if_b	jmp	#LR__3218
232b0                 | LR__3219
232b0     28 FE 9F FD | 	jmp	#LR__3201
232b4                 | LR__3220
232b4     15 25 02 F5 | 	and	local04, local07
232b8     12 19 02 F6 | 	mov	arg04, local04
232bc     08 18 46 F5 | 	or	arg04, #8
232c0     00 12 06 F6 | 	mov	arg01, #0
232c4     00 14 06 F6 | 	mov	arg02, #0
232c8     00 16 06 F6 | 	mov	arg03, #0
232cc     74 34 B0 FD | 	call	#__system__pack_0607
232d0     48 00 90 FD | 	jmp	#LR__3225
232d4                 | LR__3221
232d4     00 2C 0E F2 | 	cmp	local08, #0 wz
232d8     28 00 90 AD |  if_e	jmp	#LR__3224
232dc     01 2C 66 F0 | 	shl	local08, #1
232e0     97 0E 48 FB | 	callpa	#(@LR__3223-@LR__3222)>>2,fcache_load_ptr_
232e4                 | LR__3222
232e4     00 40 00 FF 
232e8     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
232ec     18 3B 02 C6 |  if_b	mov	local15, local10
232f0     01 3A 86 C1 |  if_b	sub	local15, #1
232f4     1D 31 02 C6 |  if_b	mov	local10, local15
232f8     01 2C 66 C0 |  if_b	shl	local08, #1
232fc     E4 FF 9F CD |  if_b	jmp	#LR__3222
23300                 | LR__3223
23300     E4 FD 9F FD | 	jmp	#LR__3202
23304                 | LR__3224
23304     7F 28 86 F1 | 	sub	local06, #127
23308     13 13 02 F6 | 	mov	arg01, local05
2330c     1A 15 02 F6 | 	mov	arg02, local12
23310     14 17 02 F6 | 	mov	arg03, local06
23314     12 19 02 F6 | 	mov	arg04, local04
23318     28 34 B0 FD | 	call	#__system__pack_0607
2331c                 | LR__3225
2331c     A7 F0 03 F6 | 	mov	ptra, fp
23320     B2 00 A0 FD | 	call	#popregs_
23324                 | __system___float_add_ret
23324     2D 00 64 FD | 	ret
23328                 | 
23328                 | __system___float_sqrt
23328     04 4A 05 F6 | 	mov	COUNT_, #4
2332c     A8 00 A0 FD | 	call	#pushregs_
23330     09 1F 02 F6 | 	mov	local01, arg01
23334     09 FB 01 F6 | 	mov	result1, arg01
23338     FD 20 02 F6 | 	mov	local02, result1
2333c     10 23 02 F6 | 	mov	local03, local02
23340     16 22 46 F7 | 	zerox	local03, #22
23344     10 25 02 F6 | 	mov	local04, local02
23348     01 24 66 F0 | 	shl	local04, #1
2334c     18 24 4E F0 | 	shr	local04, #24 wz
23350     1F 20 46 F0 | 	shr	local02, #31
23354     70 00 90 AD |  if_e	jmp	#LR__3231
23358     17 22 26 F4 | 	bith	local03, #23
2335c                 | LR__3230
2335c     00 20 0E F2 | 	cmp	local02, #0 wz
23360     00 F8 3F 5F 
23364     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23368     88 00 90 5D |  if_ne	jmp	#LR__3234
2336c     FF 24 0E F2 | 	cmp	local04, #255 wz
23370     0F FB 01 A6 |  if_e	mov	result1, local01
23374     7C 00 90 AD |  if_e	jmp	#LR__3234
23378     7F 24 86 F1 | 	sub	local04, #127
2337c     01 24 CE F7 | 	test	local04, #1 wz
23380     01 22 66 50 |  if_ne	shl	local03, #1
23384     05 22 66 F0 | 	shl	local03, #5
23388     11 01 38 FD | 	qsqrt	#0, local03
2338c     01 24 86 51 |  if_ne	sub	local04, #1
23390     12 25 52 F6 | 	abs	local04, local04 wc
23394     01 24 46 F0 | 	shr	local04, #1
23398     12 17 82 F6 | 	negc	arg03, local04
2339c     10 19 02 F6 | 	mov	arg04, local02
233a0     18 12 62 FD | 	getqx	arg01
233a4     09 15 02 F6 | 	mov	arg02, arg01
233a8     19 14 66 F0 | 	shl	arg02, #25
233ac     07 12 46 F0 | 	shr	arg01, #7
233b0     00 80 00 FF 
233b4     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
233b8     01 16 06 31 |  if_ae	add	arg03, #1
233bc     01 12 46 30 |  if_ae	shr	arg01, #1
233c0     80 33 B0 FD | 	call	#__system__pack_0607
233c4     2C 00 90 FD | 	jmp	#LR__3234
233c8                 | LR__3231
233c8     00 22 0E F2 | 	cmp	local03, #0 wz
233cc     0F FB 01 A6 |  if_e	mov	result1, local01
233d0     20 00 90 AD |  if_e	jmp	#LR__3234
233d4     01 22 66 F0 | 	shl	local03, #1
233d8     97 0A 48 FB | 	callpa	#(@LR__3233-@LR__3232)>>2,fcache_load_ptr_
233dc                 | LR__3232
233dc     00 40 00 FF 
233e0     00 22 16 F2 | 	cmp	local03, ##8388608 wc
233e4     01 24 86 C1 |  if_b	sub	local04, #1
233e8     01 22 66 C0 |  if_b	shl	local03, #1
233ec     EC FF 9F CD |  if_b	jmp	#LR__3232
233f0                 | LR__3233
233f0     68 FF 9F FD | 	jmp	#LR__3230
233f4                 | LR__3234
233f4     A7 F0 03 F6 | 	mov	ptra, fp
233f8     B2 00 A0 FD | 	call	#popregs_
233fc                 | __system___float_sqrt_ret
233fc     2D 00 64 FD | 	ret
23400                 | 
23400                 | __system___float_mul
23400     0B 4A 05 F6 | 	mov	COUNT_, #11
23404     A8 00 A0 FD | 	call	#pushregs_
23408     09 1F 02 F6 | 	mov	local01, arg01
2340c     0A 21 02 F6 | 	mov	local02, arg02
23410     0F 23 02 F6 | 	mov	local03, local01
23414     11 25 02 F6 | 	mov	local04, local03
23418     16 24 46 F7 | 	zerox	local04, #22
2341c     11 27 02 F6 | 	mov	local05, local03
23420     01 26 66 F0 | 	shl	local05, #1
23424     18 26 46 F0 | 	shr	local05, #24
23428     1F 22 46 F0 | 	shr	local03, #31
2342c     10 FB 01 F6 | 	mov	result1, local02
23430     FD 28 02 F6 | 	mov	local06, result1
23434     14 2B 02 F6 | 	mov	local07, local06
23438     16 2A 46 F7 | 	zerox	local07, #22
2343c     14 2D 02 F6 | 	mov	local08, local06
23440     01 2C 66 F0 | 	shl	local08, #1
23444     18 2C 46 F0 | 	shr	local08, #24
23448     1F 28 46 F0 | 	shr	local06, #31
2344c     14 23 62 F5 | 	xor	local03, local06
23450     FF 26 0E F2 | 	cmp	local05, #255 wz
23454     90 00 90 AD |  if_e	jmp	#LR__3243
23458     FF 2C 0E F2 | 	cmp	local08, #255 wz
2345c     D8 00 90 AD |  if_e	jmp	#LR__3245
23460     00 26 0E F2 | 	cmp	local05, #0 wz
23464     0C 01 90 AD |  if_e	jmp	#LR__3246
23468     17 24 26 F4 | 	bith	local04, #23
2346c                 | LR__3240
2346c     00 2C 0E F2 | 	cmp	local08, #0 wz
23470     44 01 90 AD |  if_e	jmp	#LR__3250
23474     17 2A 26 F4 | 	bith	local07, #23
23478                 | LR__3241
23478     12 21 02 F6 | 	mov	local02, local04
2347c     04 20 66 F0 | 	shl	local02, #4
23480     15 29 02 F6 | 	mov	local06, local07
23484     05 28 66 F0 | 	shl	local06, #5
23488     14 21 02 FD | 	qmul	local02, local06
2348c     16 27 02 F1 | 	add	local05, local08
23490     FE 26 86 F1 | 	sub	local05, #254
23494     13 2F 02 F6 | 	mov	local09, local05
23498     04 24 66 F0 | 	shl	local04, #4
2349c     05 2A 66 F0 | 	shl	local07, #5
234a0     18 30 62 FD | 	getqx	local10
234a4     15 25 02 FD | 	qmul	local04, local07
234a8     19 32 62 FD | 	getqy	local11
234ac     00 80 00 FF 
234b0     00 32 16 F2 | 	cmp	local11, ##16777216 wc
234b4     18 00 90 CD |  if_b	jmp	#LR__3242
234b8     01 2E 06 F1 | 	add	local09, #1
234bc     01 30 46 F0 | 	shr	local10, #1
234c0     19 2D 02 F6 | 	mov	local08, local11
234c4     1F 2C 66 F0 | 	shl	local08, #31
234c8     16 31 42 F5 | 	or	local10, local08
234cc     01 32 46 F0 | 	shr	local11, #1
234d0                 | LR__3242
234d0     19 13 02 F6 | 	mov	arg01, local11
234d4     18 15 02 F6 | 	mov	arg02, local10
234d8     17 17 02 F6 | 	mov	arg03, local09
234dc     11 19 02 F6 | 	mov	arg04, local03
234e0     60 32 B0 FD | 	call	#__system__pack_0607
234e4     10 01 90 FD | 	jmp	#LR__3254
234e8                 | LR__3243
234e8     00 24 0E F2 | 	cmp	local04, #0 wz
234ec     0F FB 01 56 |  if_ne	mov	result1, local01
234f0     04 01 90 5D |  if_ne	jmp	#LR__3254
234f4     FF 2C 56 F2 | 	cmps	local08, #255 wc
234f8     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
234fc     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
23500     18 00 90 4D |  if_c_and_nz	jmp	#LR__3244
23504     00 F8 3F CF 
23508     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2350c     E8 00 90 CD |  if_b	jmp	#LR__3254
23510     00 2A 0E F2 | 	cmp	local07, #0 wz
23514     10 FB 01 56 |  if_ne	mov	result1, local02
23518     DC 00 90 5D |  if_ne	jmp	#LR__3254
2351c                 | LR__3244
2351c     02 22 46 F5 | 	or	local03, #2
23520     00 12 06 F6 | 	mov	arg01, #0
23524     00 14 06 F6 | 	mov	arg02, #0
23528     13 17 02 F6 | 	mov	arg03, local05
2352c     11 19 02 F6 | 	mov	arg04, local03
23530     10 32 B0 FD | 	call	#__system__pack_0607
23534     C0 00 90 FD | 	jmp	#LR__3254
23538                 | LR__3245
23538     00 26 0E F2 | 	cmp	local05, #0 wz
2353c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23540     00 F8 3F AF 
23544     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23548     AC 00 90 AD |  if_e	jmp	#LR__3254
2354c     00 2A 0E F2 | 	cmp	local07, #0 wz
23550     10 FB 01 56 |  if_ne	mov	result1, local02
23554     A0 00 90 5D |  if_ne	jmp	#LR__3254
23558     16 17 02 F6 | 	mov	arg03, local08
2355c     11 19 02 F6 | 	mov	arg04, local03
23560     02 18 46 F5 | 	or	arg04, #2
23564     00 12 06 F6 | 	mov	arg01, #0
23568     00 14 06 F6 | 	mov	arg02, #0
2356c     D4 31 B0 FD | 	call	#__system__pack_0607
23570     84 00 90 FD | 	jmp	#LR__3254
23574                 | LR__3246
23574     00 24 0E F2 | 	cmp	local04, #0 wz
23578     20 00 90 AD |  if_e	jmp	#LR__3249
2357c     01 24 66 F0 | 	shl	local04, #1
23580     97 0A 48 FB | 	callpa	#(@LR__3248-@LR__3247)>>2,fcache_load_ptr_
23584                 | LR__3247
23584     00 40 00 FF 
23588     00 24 16 F2 | 	cmp	local04, ##8388608 wc
2358c     01 26 86 C1 |  if_b	sub	local05, #1
23590     01 24 66 C0 |  if_b	shl	local04, #1
23594     EC FF 9F CD |  if_b	jmp	#LR__3247
23598                 | LR__3248
23598     D0 FE 9F FD | 	jmp	#LR__3240
2359c                 | LR__3249
2359c     08 22 46 F5 | 	or	local03, #8
235a0     00 12 06 F6 | 	mov	arg01, #0
235a4     00 14 06 F6 | 	mov	arg02, #0
235a8     00 16 06 F6 | 	mov	arg03, #0
235ac     11 19 02 F6 | 	mov	arg04, local03
235b0     90 31 B0 FD | 	call	#__system__pack_0607
235b4     40 00 90 FD | 	jmp	#LR__3254
235b8                 | LR__3250
235b8     00 2A 0E F2 | 	cmp	local07, #0 wz
235bc     20 00 90 AD |  if_e	jmp	#LR__3253
235c0     01 2A 66 F0 | 	shl	local07, #1
235c4     97 0A 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
235c8                 | LR__3251
235c8     00 40 00 FF 
235cc     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
235d0     01 2C 86 C1 |  if_b	sub	local08, #1
235d4     01 2A 66 C0 |  if_b	shl	local07, #1
235d8     EC FF 9F CD |  if_b	jmp	#LR__3251
235dc                 | LR__3252
235dc     98 FE 9F FD | 	jmp	#LR__3241
235e0                 | LR__3253
235e0     08 22 46 F5 | 	or	local03, #8
235e4     00 12 06 F6 | 	mov	arg01, #0
235e8     00 14 06 F6 | 	mov	arg02, #0
235ec     00 16 06 F6 | 	mov	arg03, #0
235f0     11 19 02 F6 | 	mov	arg04, local03
235f4     4C 31 B0 FD | 	call	#__system__pack_0607
235f8                 | LR__3254
235f8     A7 F0 03 F6 | 	mov	ptra, fp
235fc     B2 00 A0 FD | 	call	#popregs_
23600                 | __system___float_mul_ret
23600     2D 00 64 FD | 	ret
23604                 | 
23604                 | __system___float_div
23604     0E 4A 05 F6 | 	mov	COUNT_, #14
23608     A8 00 A0 FD | 	call	#pushregs_
2360c     09 23 02 F6 | 	mov	local03, arg01
23610     0A 25 02 F6 | 	mov	local04, arg02
23614     11 27 02 F6 | 	mov	local05, local03
23618     13 29 02 F6 | 	mov	local06, local05
2361c     16 28 46 F7 | 	zerox	local06, #22
23620     13 2B 02 F6 | 	mov	local07, local05
23624     01 2A 66 F0 | 	shl	local07, #1
23628     18 2A 46 F0 | 	shr	local07, #24
2362c     1F 26 46 F0 | 	shr	local05, #31
23630     12 FB 01 F6 | 	mov	result1, local04
23634     FD 2C 02 F6 | 	mov	local08, result1
23638     16 2F 02 F6 | 	mov	local09, local08
2363c     16 2E 46 F7 | 	zerox	local09, #22
23640     16 31 02 F6 | 	mov	local10, local08
23644     01 30 66 F0 | 	shl	local10, #1
23648     18 30 46 F0 | 	shr	local10, #24
2364c     1F 2C 46 F0 | 	shr	local08, #31
23650     16 27 62 F5 | 	xor	local05, local08
23654     FF 2A 0E F2 | 	cmp	local07, #255 wz
23658     D4 00 90 AD |  if_e	jmp	#LR__3265
2365c     FF 30 0E F2 | 	cmp	local10, #255 wz
23660     04 01 90 AD |  if_e	jmp	#LR__3266
23664     00 2A 0E F2 | 	cmp	local07, #0 wz
23668     24 01 90 AD |  if_e	jmp	#LR__3267
2366c     17 28 26 F4 | 	bith	local06, #23
23670                 | LR__3260
23670     00 30 0E F2 | 	cmp	local10, #0 wz
23674     70 01 90 AD |  if_e	jmp	#LR__3271
23678     17 2E 26 F4 | 	bith	local09, #23
2367c                 | LR__3261
2367c     18 2B 82 F1 | 	sub	local07, local10
23680     15 33 02 F6 | 	mov	local11, local07
23684     14 13 02 F6 | 	mov	arg01, local06
23688     02 12 46 F0 | 	shr	arg01, #2
2368c     1E 28 66 F0 | 	shl	local06, #30
23690     14 15 02 F6 | 	mov	arg02, local06
23694     17 17 02 F6 | 	mov	arg03, local09
23698     28 12 62 FD | 	setq	arg01
2369c     0B 15 12 FD | 	qdiv	arg02, arg03
236a0     00 34 06 F6 | 	mov	local12, #0
236a4     18 1E 62 FD | 	getqx	local01
236a8     19 FC 61 FD | 	getqy	result2
236ac     FE 20 02 F6 | 	mov	local02, result2
236b0     0F 37 02 F6 | 	mov	local13, local01
236b4     00 20 4E F2 | 	cmps	local02, #0 wz
236b8     1B 39 02 F6 | 	mov	local14, local13
236bc     19 38 66 F0 | 	shl	local14, #25
236c0     01 34 06 56 |  if_ne	mov	local12, #1
236c4     1A 39 42 F5 | 	or	local14, local12
236c8     07 36 46 F0 | 	shr	local13, #7
236cc     00 80 00 FF 
236d0     00 36 16 F2 | 	cmp	local13, ##16777216 wc
236d4     1C 00 90 CD |  if_b	jmp	#LR__3262
236d8     01 32 06 F1 | 	add	local11, #1
236dc     01 38 46 F0 | 	shr	local14, #1
236e0     1B 35 02 F6 | 	mov	local12, local13
236e4     1F 34 66 F0 | 	shl	local12, #31
236e8     1A 39 42 F5 | 	or	local14, local12
236ec     01 36 46 F0 | 	shr	local13, #1
236f0     24 00 90 FD | 	jmp	#LR__3264
236f4                 | LR__3262
236f4     00 40 00 FF 
236f8     00 36 16 F2 | 	cmp	local13, ##8388608 wc
236fc     18 00 90 3D |  if_ae	jmp	#LR__3263
23700     01 32 86 F1 | 	sub	local11, #1
23704     01 36 66 F0 | 	shl	local13, #1
23708     1C 35 02 F6 | 	mov	local12, local14
2370c     1F 34 46 F0 | 	shr	local12, #31
23710     1A 37 42 F5 | 	or	local13, local12
23714     01 38 66 F0 | 	shl	local14, #1
23718                 | LR__3263
23718                 | LR__3264
23718     1B 13 02 F6 | 	mov	arg01, local13
2371c     1C 15 02 F6 | 	mov	arg02, local14
23720     19 17 02 F6 | 	mov	arg03, local11
23724     13 19 02 F6 | 	mov	arg04, local05
23728     18 30 B0 FD | 	call	#__system__pack_0607
2372c     F8 00 90 FD | 	jmp	#LR__3275
23730                 | LR__3265
23730     00 28 0E F2 | 	cmp	local06, #0 wz
23734     11 FB 01 56 |  if_ne	mov	result1, local03
23738     EC 00 90 5D |  if_ne	jmp	#LR__3275
2373c     FF 30 0E F2 | 	cmp	local10, #255 wz
23740     00 F8 3F AF 
23744     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23748     DC 00 90 AD |  if_e	jmp	#LR__3275
2374c     02 26 46 F5 | 	or	local05, #2
23750     00 12 06 F6 | 	mov	arg01, #0
23754     00 14 06 F6 | 	mov	arg02, #0
23758     15 17 02 F6 | 	mov	arg03, local07
2375c     13 19 02 F6 | 	mov	arg04, local05
23760     E0 2F B0 FD | 	call	#__system__pack_0607
23764     C0 00 90 FD | 	jmp	#LR__3275
23768                 | LR__3266
23768     00 2E 0E F2 | 	cmp	local09, #0 wz
2376c     12 FB 01 56 |  if_ne	mov	result1, local04
23770     B4 00 90 5D |  if_ne	jmp	#LR__3275
23774     13 19 02 F6 | 	mov	arg04, local05
23778     08 18 46 F5 | 	or	arg04, #8
2377c     00 12 06 F6 | 	mov	arg01, #0
23780     00 14 06 F6 | 	mov	arg02, #0
23784     00 16 06 F6 | 	mov	arg03, #0
23788     B8 2F B0 FD | 	call	#__system__pack_0607
2378c     98 00 90 FD | 	jmp	#LR__3275
23790                 | LR__3267
23790     00 28 0E F2 | 	cmp	local06, #0 wz
23794     20 00 90 AD |  if_e	jmp	#LR__3270
23798     01 28 66 F0 | 	shl	local06, #1
2379c     97 0A 48 FB | 	callpa	#(@LR__3269-@LR__3268)>>2,fcache_load_ptr_
237a0                 | LR__3268
237a0     00 40 00 FF 
237a4     00 28 16 F2 | 	cmp	local06, ##8388608 wc
237a8     01 2A 86 C1 |  if_b	sub	local07, #1
237ac     01 28 66 C0 |  if_b	shl	local06, #1
237b0     EC FF 9F CD |  if_b	jmp	#LR__3268
237b4                 | LR__3269
237b4     B8 FE 9F FD | 	jmp	#LR__3260
237b8                 | LR__3270
237b8     00 30 0E F2 | 	cmp	local10, #0 wz
237bc     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
237c0     00 F8 3F AF 
237c4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
237c8     5C 00 90 AD |  if_e	jmp	#LR__3275
237cc     13 19 02 F6 | 	mov	arg04, local05
237d0     08 18 46 F5 | 	or	arg04, #8
237d4     00 12 06 F6 | 	mov	arg01, #0
237d8     00 14 06 F6 | 	mov	arg02, #0
237dc     00 16 06 F6 | 	mov	arg03, #0
237e0     60 2F B0 FD | 	call	#__system__pack_0607
237e4     40 00 90 FD | 	jmp	#LR__3275
237e8                 | LR__3271
237e8     00 2E 0E F2 | 	cmp	local09, #0 wz
237ec     20 00 90 AD |  if_e	jmp	#LR__3274
237f0     01 2E 66 F0 | 	shl	local09, #1
237f4     97 0A 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
237f8                 | LR__3272
237f8     00 40 00 FF 
237fc     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
23800     01 30 86 C1 |  if_b	sub	local10, #1
23804     01 2E 66 C0 |  if_b	shl	local09, #1
23808     EC FF 9F CD |  if_b	jmp	#LR__3272
2380c                 | LR__3273
2380c     6C FE 9F FD | 	jmp	#LR__3261
23810                 | LR__3274
23810     02 26 46 F5 | 	or	local05, #2
23814     00 12 06 F6 | 	mov	arg01, #0
23818     00 14 06 F6 | 	mov	arg02, #0
2381c     00 16 06 F6 | 	mov	arg03, #0
23820     13 19 02 F6 | 	mov	arg04, local05
23824     1C 2F B0 FD | 	call	#__system__pack_0607
23828                 | LR__3275
23828     A7 F0 03 F6 | 	mov	ptra, fp
2382c     B2 00 A0 FD | 	call	#popregs_
23830                 | __system___float_div_ret
23830     2D 00 64 FD | 	ret
23834                 | 
23834                 | __system___float_cmp
23834     00 C0 3F FF 
23838     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2383c     00 C0 3F CF 
23840     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23844     0B FB 01 36 |  if_ae	mov	result1, arg03
23848     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2384c     00 C0 7F FF 
23850     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23854     00 C0 7F CF 
23858     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2385c     0B FB 01 36 |  if_ae	mov	result1, arg03
23860     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23864     00 12 56 F2 | 	cmps	arg01, #0 wc
23868     2C 00 90 3D |  if_ae	jmp	#LR__3280
2386c     00 14 56 F2 | 	cmps	arg02, #0 wc
23870     0A FB 01 C6 |  if_b	mov	result1, arg02
23874     09 FB 81 C1 |  if_b	sub	result1, arg01
23878     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2387c     00 14 0E F2 | 	cmp	arg02, #0 wz
23880     00 00 40 AF 
23884     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23888     00 FA 05 A6 |  if_e	mov	result1, #0
2388c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23890     01 FA 65 F6 | 	neg	result1, #1
23894     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23898                 | LR__3280
23898     00 14 56 F2 | 	cmps	arg02, #0 wc
2389c     1C 00 90 3D |  if_ae	jmp	#LR__3281
238a0     00 12 0E F2 | 	cmp	arg01, #0 wz
238a4     00 00 40 AF 
238a8     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
238ac     00 FA 05 A6 |  if_e	mov	result1, #0
238b0     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
238b4     01 FA 05 F6 | 	mov	result1, #1
238b8     08 00 90 FD | 	jmp	#__system___float_cmp_ret
238bc                 | LR__3281
238bc     0A 13 82 F1 | 	sub	arg01, arg02
238c0     09 FB 01 F6 | 	mov	result1, arg01
238c4                 | __system___float_cmp_ret
238c4     2D 00 64 FD | 	ret
238c8                 | 
238c8                 | __system___float_tointeger
238c8     02 4A 05 F6 | 	mov	COUNT_, #2
238cc     A8 00 A0 FD | 	call	#pushregs_
238d0     50 00 B0 FD | 	call	#__system___float_Unpack
238d4     FF FF 7F FF 
238d8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
238dc     34 00 90 CD |  if_b	jmp	#LR__3290
238e0     1F FC 55 F2 | 	cmps	result2, #31 wc
238e4     2C 00 90 3D |  if_ae	jmp	#LR__3290
238e8     02 FE 65 F0 | 	shl	result3, #2
238ec     1E 1E 06 F6 | 	mov	local01, #30
238f0     FE 1E 82 F1 | 	sub	local01, result2
238f4     0F FF 41 F0 | 	shr	result3, local01
238f8     FF 20 02 F6 | 	mov	local02, result3
238fc     0A 21 02 F1 | 	add	local02, arg02
23900     01 20 46 F0 | 	shr	local02, #1
23904     00 FA 0D F2 | 	cmp	result1, #0 wz
23908     10 21 62 56 |  if_ne	neg	local02, local02
2390c     10 FB 01 F6 | 	mov	result1, local02
23910     04 00 90 FD | 	jmp	#LR__3291
23914                 | LR__3290
23914     00 FA 05 F6 | 	mov	result1, #0
23918                 | LR__3291
23918     A7 F0 03 F6 | 	mov	ptra, fp
2391c     B2 00 A0 FD | 	call	#popregs_
23920                 | __system___float_tointeger_ret
23920     2D 00 64 FD | 	ret
23924                 | 
23924                 | __system___float_Unpack
23924     09 01 02 F6 | 	mov	_var01, arg01
23928     1F 00 46 F0 | 	shr	_var01, #31
2392c     09 03 02 F6 | 	mov	_var02, arg01
23930     01 02 66 F0 | 	shl	_var02, #1
23934     18 02 4E F0 | 	shr	_var02, #24 wz
23938     17 13 06 F4 | 	bitl	arg01, #279
2393c     06 12 66 50 |  if_ne	shl	arg01, #6
23940     1D 12 26 54 |  if_ne	bith	arg01, #29
23944     1C 00 90 5D |  if_ne	jmp	#LR__3300
23948     09 05 92 F7 | 	encod	_var03, arg01 wc
2394c     01 04 06 C1 |  if_b	add	_var03, #1
23950     17 04 86 F1 | 	sub	_var03, #23
23954     02 03 02 F6 | 	mov	_var02, _var03
23958     07 FC 05 F6 | 	mov	result2, #7
2395c     02 FD 81 F1 | 	sub	result2, _var03
23960     FE 12 62 F0 | 	shl	arg01, result2
23964                 | LR__3300
23964     7F 02 86 F1 | 	sub	_var02, #127
23968     09 FF 01 F6 | 	mov	result3, arg01
2396c     00 FB 01 F6 | 	mov	result1, _var01
23970     01 FD 01 F6 | 	mov	result2, _var02
23974                 | __system___float_Unpack_ret
23974     2D 00 64 FD | 	ret
23978                 | 
23978                 | __system___float_Pack
23978     00 00 06 F6 | 	mov	_var01, #0
2397c     00 16 0E F2 | 	cmp	arg03, #0 wz
23980     8C 00 90 AD |  if_e	jmp	#LR__3311
23984     0B 03 92 F7 | 	encod	_var02, arg03 wc
23988     01 02 06 C1 |  if_b	add	_var02, #1
2398c     21 00 06 F6 | 	mov	_var01, #33
23990     01 01 82 F1 | 	sub	_var01, _var02
23994     00 17 62 F0 | 	shl	arg03, _var01
23998     03 02 06 F6 | 	mov	_var02, #3
2399c     00 03 82 F1 | 	sub	_var02, _var01
239a0     01 15 02 F1 | 	add	arg02, _var02
239a4     0A 05 02 F6 | 	mov	_var03, arg02
239a8     00 17 06 F1 | 	add	arg03, #256
239ac     0B 03 02 F6 | 	mov	_var02, arg03
239b0     FF 02 2E F5 | 	andn	_var02, #255 wz
239b4     01 04 06 A1 |  if_e	add	_var03, #1
239b8     7F 04 06 F1 | 	add	_var03, #127
239bc     FF FF 7F FF 
239c0     E9 05 46 F3 | 	fges	_var03, ##-23
239c4     FF 04 66 F3 | 	fles	_var03, #255
239c8     01 04 56 F2 | 	cmps	_var03, #1 wc
239cc     1C 00 90 3D |  if_ae	jmp	#LR__3310
239d0     01 16 46 F0 | 	shr	arg03, #1
239d4     1F 02 C6 F9 | 	decod	_var02, #31
239d8     0B 03 02 F1 | 	add	_var02, arg03
239dc     02 05 62 F6 | 	neg	_var03, _var03
239e0     02 03 42 F0 | 	shr	_var02, _var03
239e4     01 17 02 F6 | 	mov	arg03, _var02
239e8     00 04 06 F6 | 	mov	_var03, #0
239ec                 | LR__3310
239ec     09 FB 01 F6 | 	mov	result1, arg01
239f0     1F FA 65 F0 | 	shl	result1, #31
239f4     02 03 02 F6 | 	mov	_var02, _var03
239f8     17 02 66 F0 | 	shl	_var02, #23
239fc     01 FB 41 F5 | 	or	result1, _var02
23a00     0B 07 02 F6 | 	mov	_var04, arg03
23a04     09 06 46 F0 | 	shr	_var04, #9
23a08     03 FB 41 F5 | 	or	result1, _var04
23a0c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23a10                 | LR__3311
23a10     00 FB 01 F6 | 	mov	result1, _var01
23a14                 | __system___float_Pack_ret
23a14     2D 00 64 FD | 	ret
23a18                 | 
23a18                 | __system___basic_print_float
23a18     05 4A 05 F6 | 	mov	COUNT_, #5
23a1c     A8 00 A0 FD | 	call	#pushregs_
23a20     09 1F 02 F6 | 	mov	local01, arg01
23a24     0A 21 02 F6 | 	mov	local02, arg02
23a28     0B 23 0A F6 | 	mov	local03, arg03 wz
23a2c     0C 25 02 F6 | 	mov	local04, arg04
23a30     14 00 90 5D |  if_ne	jmp	#LR__3320
23a34     23 24 0E F2 | 	cmp	local04, #35 wz
23a38     80 02 10 AF 
23a3c     00 26 06 A6 |  if_e	mov	local05, ##537198592
23a40     1D 26 C6 59 |  if_ne	decod	local05, #29
23a44     13 23 02 F6 | 	mov	local03, local05
23a48                 | LR__3320
23a48     0F 13 02 F6 | 	mov	arg01, local01
23a4c     D8 27 B0 FD | 	call	#__system___gettxfunc
23a50     FD 26 0A F6 | 	mov	local05, result1 wz
23a54     00 FA 05 A6 |  if_e	mov	result1, #0
23a58     13 13 02 56 |  if_ne	mov	arg01, local05
23a5c     11 15 02 56 |  if_ne	mov	arg02, local03
23a60     10 17 02 56 |  if_ne	mov	arg03, local02
23a64     12 19 02 56 |  if_ne	mov	arg04, local04
23a68     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23a6c     A7 F0 03 F6 | 	mov	ptra, fp
23a70     B2 00 A0 FD | 	call	#popregs_
23a74                 | __system___basic_print_float_ret
23a74     2D 00 64 FD | 	ret
23a78                 | 
23a78                 | __system____builtin_atoi
23a78     07 4A 05 F6 | 	mov	COUNT_, #7
23a7c     A8 00 A0 FD | 	call	#pushregs_
23a80                 | __system____builtin_atoi_enter
23a80     09 1F 02 F6 | 	mov	local01, arg01
23a84     0A 21 02 F6 | 	mov	local02, arg02
23a88     00 22 06 F6 | 	mov	local03, #0
23a8c     00 24 06 F6 | 	mov	local04, #0
23a90     00 26 06 F6 | 	mov	local05, #0
23a94     97 1C 48 FB | 	callpa	#(@LR__3332-@LR__3330)>>2,fcache_load_ptr_
23a98                 | LR__3330
23a98     0F 29 C2 FA | 	rdbyte	local06, local01
23a9c     20 28 0E F2 | 	cmp	local06, #32 wz
23aa0     01 1E 06 A1 |  if_e	add	local01, #1
23aa4     F0 FF 9F AD |  if_e	jmp	#LR__3330
23aa8     0F 2B C2 FA | 	rdbyte	local07, local01
23aac                 | LR__3331
23aac     2D 2A 0E F2 | 	cmp	local07, #45 wz
23ab0     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23ab4     18 00 90 5D |  if_ne	jmp	#LR__3333
23ab8     01 1E 06 F1 | 	add	local01, #1
23abc     2D 2A 0E F2 | 	cmp	local07, #45 wz
23ac0     01 28 06 A6 |  if_e	mov	local06, #1
23ac4     14 27 C2 A2 |  if_e	subr	local05, local06
23ac8     0F 2B C2 FA | 	rdbyte	local07, local01
23acc     DC FF 9F FD | 	jmp	#LR__3331
23ad0                 | LR__3332
23ad0                 | LR__3333
23ad0     00 20 0E F2 | 	cmp	local02, #0 wz
23ad4     1C 00 90 5D |  if_ne	jmp	#LR__3335
23ad8     24 2A 0E F2 | 	cmp	local07, #36 wz
23adc     10 20 06 A6 |  if_e	mov	local02, #16
23ae0     01 1E 06 A1 |  if_e	add	local01, #1
23ae4     0C 00 90 AD |  if_e	jmp	#LR__3334
23ae8     25 2A 0E F2 | 	cmp	local07, #37 wz
23aec     02 20 06 A6 |  if_e	mov	local02, #2
23af0     01 1E 06 A1 |  if_e	add	local01, #1
23af4                 | LR__3334
23af4                 | LR__3335
23af4     97 48 48 FB | 	callpa	#(@LR__3343-@LR__3336)>>2,fcache_load_ptr_
23af8                 | LR__3336
23af8                 | LR__3337
23af8     0F 2B C2 FA | 	rdbyte	local07, local01
23afc     5F 2A 0E F2 | 	cmp	local07, #95 wz
23b00     01 1E 06 F1 | 	add	local01, #1
23b04     F0 FF 9F AD |  if_e	jmp	#LR__3337
23b08     30 2A 0E F2 | 	cmp	local07, #48 wz
23b0c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23b10     00 24 06 A6 |  if_e	mov	local04, #0
23b14     60 00 90 AD |  if_e	jmp	#LR__3342
23b18     31 2A 56 F2 | 	cmps	local07, #49 wc
23b1c     18 00 90 CD |  if_b	jmp	#LR__3338
23b20     3A 2A 56 F2 | 	cmps	local07, #58 wc
23b24     15 25 02 C6 |  if_b	mov	local04, local07
23b28     30 24 86 C1 |  if_b	sub	local04, #48
23b2c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23b30     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23b34     40 00 90 CD |  if_b	jmp	#LR__3341
23b38                 | LR__3338
23b38     0B 20 56 F2 | 	cmps	local02, #11 wc
23b3c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23b40     14 00 90 CD |  if_b	jmp	#LR__3339
23b44     67 2A 56 F2 | 	cmps	local07, #103 wc
23b48     61 2A 86 C1 |  if_b	sub	local07, #97
23b4c     0A 24 06 C6 |  if_b	mov	local04, #10
23b50     15 25 02 C1 |  if_b	add	local04, local07
23b54     20 00 90 CD |  if_b	jmp	#LR__3340
23b58                 | LR__3339
23b58     0B 20 56 F2 | 	cmps	local02, #11 wc
23b5c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23b60     24 00 90 CD |  if_b	jmp	#LR__3344
23b64     47 2A 56 F2 | 	cmps	local07, #71 wc
23b68     41 2A 86 C1 |  if_b	sub	local07, #65
23b6c     0A 24 06 C6 |  if_b	mov	local04, #10
23b70     15 25 02 C1 |  if_b	add	local04, local07
23b74     10 00 90 3D |  if_ae	jmp	#LR__3344
23b78                 | LR__3340
23b78                 | LR__3341
23b78                 | LR__3342
23b78     11 21 02 FD | 	qmul	local02, local03
23b7c     18 22 62 FD | 	getqx	local03
23b80     12 23 02 F1 | 	add	local03, local04
23b84     70 FF 9F FD | 	jmp	#LR__3336
23b88                 | LR__3343
23b88                 | LR__3344
23b88     00 20 0E F2 | 	cmp	local02, #0 wz
23b8c     64 00 90 5D |  if_ne	jmp	#LR__3350
23b90     78 2A 0E F2 | 	cmp	local07, #120 wz
23b94     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23b98     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23b9c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23ba0     14 00 90 5D |  if_ne	jmp	#LR__3345
23ba4     0F 13 02 F6 | 	mov	arg01, local01
23ba8     10 14 06 F6 | 	mov	arg02, #16
23bac     C8 FE BF FD | 	call	#__system____builtin_atoi
23bb0     FD 22 02 F6 | 	mov	local03, result1
23bb4     3C 00 90 FD | 	jmp	#LR__3349
23bb8                 | LR__3345
23bb8     62 2A 0E F2 | 	cmp	local07, #98 wz
23bbc     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23bc0     14 00 90 5D |  if_ne	jmp	#LR__3346
23bc4     0F 13 02 F6 | 	mov	arg01, local01
23bc8     02 14 06 F6 | 	mov	arg02, #2
23bcc     A8 FE BF FD | 	call	#__system____builtin_atoi
23bd0     FD 22 02 F6 | 	mov	local03, result1
23bd4     1C 00 90 FD | 	jmp	#LR__3348
23bd8                 | LR__3346
23bd8     6F 2A 0E F2 | 	cmp	local07, #111 wz
23bdc     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23be0     10 00 90 5D |  if_ne	jmp	#LR__3347
23be4     0F 13 02 F6 | 	mov	arg01, local01
23be8     08 14 06 F6 | 	mov	arg02, #8
23bec     88 FE BF FD | 	call	#__system____builtin_atoi
23bf0     FD 22 02 F6 | 	mov	local03, result1
23bf4                 | LR__3347
23bf4                 | LR__3348
23bf4                 | LR__3349
23bf4                 | LR__3350
23bf4     00 26 0E F2 | 	cmp	local05, #0 wz
23bf8     11 23 62 56 |  if_ne	neg	local03, local03
23bfc     11 FB 01 F6 | 	mov	result1, local03
23c00     A7 F0 03 F6 | 	mov	ptra, fp
23c04     B2 00 A0 FD | 	call	#popregs_
23c08                 | __system____builtin_atoi_ret
23c08     2D 00 64 FD | 	ret
23c0c                 | 
23c0c                 | __system____builtin_atof
23c0c     07 4A 05 F6 | 	mov	COUNT_, #7
23c10     A8 00 A0 FD | 	call	#pushregs_
23c14     09 1F 02 F6 | 	mov	local01, arg01
23c18     00 20 06 F6 | 	mov	local02, #0
23c1c     00 22 06 F6 | 	mov	local03, #0
23c20     00 24 06 F6 | 	mov	local04, #0
23c24     00 26 06 F6 | 	mov	local05, #0
23c28     97 08 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
23c2c                 | LR__3360
23c2c     0F 17 C2 FA | 	rdbyte	arg03, local01
23c30     20 16 0E F2 | 	cmp	arg03, #32 wz
23c34     01 1E 06 A1 |  if_e	add	local01, #1
23c38     F0 FF 9F AD |  if_e	jmp	#LR__3360
23c3c                 | LR__3361
23c3c     0F 29 C2 FA | 	rdbyte	local06, local01
23c40                 | LR__3362
23c40     2B 28 0E F2 | 	cmp	local06, #43 wz
23c44     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23c48     14 00 90 5D |  if_ne	jmp	#LR__3363
23c4c     2D 28 0E F2 | 	cmp	local06, #45 wz
23c50     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23c54     01 1E 06 F1 | 	add	local01, #1
23c58     0F 29 C2 FA | 	rdbyte	local06, local01
23c5c     E0 FF 9F FD | 	jmp	#LR__3362
23c60                 | LR__3363
23c60                 | LR__3364
23c60     97 08 48 FB | 	callpa	#(@LR__3366-@LR__3365)>>2,fcache_load_ptr_
23c64                 | LR__3365
23c64     0F 29 C2 FA | 	rdbyte	local06, local01
23c68     5F 28 0E F2 | 	cmp	local06, #95 wz
23c6c     01 1E 06 F1 | 	add	local01, #1
23c70     F0 FF 9F AD |  if_e	jmp	#LR__3365
23c74                 | LR__3366
23c74     00 28 0E F2 | 	cmp	local06, #0 wz
23c78     5C 00 90 AD |  if_e	jmp	#LR__3368
23c7c     30 28 56 F2 | 	cmps	local06, #48 wc
23c80     44 00 90 CD |  if_b	jmp	#LR__3367
23c84     3A 28 56 F2 | 	cmps	local06, #58 wc
23c88     3C 00 90 3D |  if_ae	jmp	#LR__3367
23c8c     10 13 02 F6 | 	mov	arg01, local02
23c90     00 90 20 FF 
23c94     00 14 06 F6 | 	mov	arg02, ##1092616192
23c98     64 F7 BF FD | 	call	#__system___float_mul
23c9c     FD 20 02 F6 | 	mov	local02, result1
23ca0     30 28 86 F1 | 	sub	local06, #48
23ca4     14 13 02 F6 | 	mov	arg01, local06
23ca8     50 F3 BF FD | 	call	#__system___float_fromuns
23cac     FD 14 02 F6 | 	mov	arg02, result1
23cb0     10 13 02 F6 | 	mov	arg01, local02
23cb4     78 F3 BF FD | 	call	#__system___float_add
23cb8     FD 20 02 F6 | 	mov	local02, result1
23cbc     00 26 0E F2 | 	cmp	local05, #0 wz
23cc0     01 22 86 51 |  if_ne	sub	local03, #1
23cc4     98 FF 9F FD | 	jmp	#LR__3364
23cc8                 | LR__3367
23cc8     2E 28 0E F2 | 	cmp	local06, #46 wz
23ccc     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23cd0     01 26 06 A6 |  if_e	mov	local05, #1
23cd4     88 FF 9F AD |  if_e	jmp	#LR__3364
23cd8                 | LR__3368
23cd8     45 28 0E F2 | 	cmp	local06, #69 wz
23cdc     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23ce0     18 00 90 5D |  if_ne	jmp	#LR__3369
23ce4     0F 13 02 F6 | 	mov	arg01, local01
23ce8     00 14 06 F6 | 	mov	arg02, #0
23cec     88 FD BF FD | 	call	#__system____builtin_atoi
23cf0     11 FB 01 F1 | 	add	result1, local03
23cf4     FD 2A 02 F6 | 	mov	local07, result1
23cf8     04 00 90 FD | 	jmp	#LR__3370
23cfc                 | LR__3369
23cfc     11 2B 02 F6 | 	mov	local07, local03
23d00                 | LR__3370
23d00     15 17 02 F6 | 	mov	arg03, local07
23d04     10 13 02 F6 | 	mov	arg01, local02
23d08     00 90 20 FF 
23d0c     00 14 06 F6 | 	mov	arg02, ##1092616192
23d10     F4 06 B0 FD | 	call	#__system___float_pow_n
23d14     12 FB 61 F5 | 	xor	result1, local04
23d18     A7 F0 03 F6 | 	mov	ptra, fp
23d1c     B2 00 A0 FD | 	call	#popregs_
23d20                 | __system____builtin_atof_ret
23d20     2D 00 64 FD | 	ret
23d24                 | 
23d24                 | __system____builtin_ilogb
23d24     FC FB BF FD | 	call	#__system___float_Unpack
23d28     00 FE 0D F2 | 	cmp	result3, #0 wz
23d2c     00 00 40 AF 
23d30     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23d34     24 00 90 AD |  if_e	jmp	#LR__3381
23d38     80 FC 0D F2 | 	cmp	result2, #128 wz
23d3c     18 00 90 5D |  if_ne	jmp	#LR__3380
23d40     00 00 10 FF 
23d44     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23d48     1E FA CD A9 |  if_e	bmask	result1, #30
23d4c     0C 00 90 AD |  if_e	jmp	#LR__3381
23d50     1F FA C5 F9 | 	decod	result1, #31
23d54     04 00 90 FD | 	jmp	#LR__3381
23d58                 | LR__3380
23d58     FE FA 01 F6 | 	mov	result1, result2
23d5c                 | LR__3381
23d5c                 | __system____builtin_ilogb_ret
23d5c     2D 00 64 FD | 	ret
23d60                 | 
23d60                 | __system____builtin_sinf
23d60     03 4A 05 F6 | 	mov	COUNT_, #3
23d64     A8 00 A0 FD | 	call	#pushregs_
23d68     09 1F 02 F6 | 	mov	local01, arg01
23d6c     87 64 20 FF 
23d70     DB 15 06 F6 | 	mov	arg02, ##1086918619
23d74     8C F8 BF FD | 	call	#__system___float_div
23d78     FD 12 02 F6 | 	mov	arg01, result1
23d7c     00 14 06 F6 | 	mov	arg02, #0
23d80     44 FB BF FD | 	call	#__system___float_tointeger
23d84     FD 16 0A F6 | 	mov	arg03, result1 wz
23d88     44 00 90 AD |  if_e	jmp	#LR__3390
23d8c     0B 13 52 F6 | 	abs	arg01, arg03 wc
23d90     1F 20 C6 C9 |  if_b	decod	local02, #31
23d94     00 20 06 36 |  if_ae	mov	local02, #0
23d98     60 F2 BF FD | 	call	#__system___float_fromuns
23d9c     10 FB 61 F5 | 	xor	result1, local02
23da0     FD 12 02 F6 | 	mov	arg01, result1
23da4     1E 14 C6 F9 | 	decod	arg02, #30
23da8     54 F6 BF FD | 	call	#__system___float_mul
23dac     FD 12 02 F6 | 	mov	arg01, result1
23db0     87 24 20 FF 
23db4     DB 15 06 F6 | 	mov	arg02, ##1078530011
23db8     44 F6 BF FD | 	call	#__system___float_mul
23dbc     FD 14 02 F6 | 	mov	arg02, result1
23dc0     0F 13 02 F6 | 	mov	arg01, local01
23dc4     1F 14 E6 F4 | 	bitnot	arg02, #31
23dc8     64 F2 BF FD | 	call	#__system___float_add
23dcc     FD 1E 02 F6 | 	mov	local01, result1
23dd0                 | LR__3390
23dd0     0F 13 02 F6 | 	mov	arg01, local01
23dd4     66 E6 1E FF 
23dd8     CD 14 06 F6 | 	mov	arg02, ##1036831949
23ddc     01 16 06 F6 | 	mov	arg03, #1
23de0     50 FA BF FD | 	call	#__system___float_cmp
23de4     00 FA 55 F2 | 	cmps	result1, #0 wc
23de8     5C 00 90 3D |  if_ae	jmp	#LR__3391
23dec     0F 13 02 F6 | 	mov	arg01, local01
23df0     66 E6 5E FF 
23df4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23df8     01 16 66 F6 | 	neg	arg03, #1
23dfc     34 FA BF FD | 	call	#__system___float_cmp
23e00     01 FA 55 F2 | 	cmps	result1, #1 wc
23e04     40 00 90 CD |  if_b	jmp	#LR__3391
23e08     0F 13 02 F6 | 	mov	arg01, local01
23e0c     0F 15 02 F6 | 	mov	arg02, local01
23e10     EC F5 BF FD | 	call	#__system___float_mul
23e14     FD 12 02 F6 | 	mov	arg01, result1
23e18     0F 15 02 F6 | 	mov	arg02, local01
23e1c     E0 F5 BF FD | 	call	#__system___float_mul
23e20     FD 12 02 F6 | 	mov	arg01, result1
23e24     00 60 20 FF 
23e28     00 14 06 F6 | 	mov	arg02, ##1086324736
23e2c     D4 F7 BF FD | 	call	#__system___float_div
23e30     FD 14 02 F6 | 	mov	arg02, result1
23e34     0F 13 02 F6 | 	mov	arg01, local01
23e38     1F 14 E6 F4 | 	bitnot	arg02, #31
23e3c     F0 F1 BF FD | 	call	#__system___float_add
23e40     FD 22 02 F6 | 	mov	local03, result1
23e44     54 00 90 FD | 	jmp	#LR__3392
23e48                 | LR__3391
23e48     0F 13 02 F6 | 	mov	arg01, local01
23e4c     7C 91 26 FF 
23e50     83 15 06 F6 | 	mov	arg02, ##1294137731
23e54     A8 F5 BF FD | 	call	#__system___float_mul
23e58     FD 12 02 F6 | 	mov	arg01, result1
23e5c     00 14 06 F6 | 	mov	arg02, #0
23e60     64 FA BF FD | 	call	#__system___float_tointeger
23e64     02 FA 65 F0 | 	shl	result1, #2
23e68     00 00 A0 FF 
23e6c     FD 00 48 FD | 	qrotate	##1073741824, result1
23e70     19 12 62 FD | 	getqy	arg01
23e74     09 13 52 F6 | 	abs	arg01, arg01 wc
23e78     1F 20 C6 C9 |  if_b	decod	local02, #31
23e7c     00 20 06 36 |  if_ae	mov	local02, #0
23e80     78 F1 BF FD | 	call	#__system___float_fromuns
23e84     10 FB 61 F5 | 	xor	result1, local02
23e88     FD 12 02 F6 | 	mov	arg01, result1
23e8c     00 40 27 FF 
23e90     00 14 06 F6 | 	mov	arg02, ##1317011456
23e94     6C F7 BF FD | 	call	#__system___float_div
23e98     FD 22 02 F6 | 	mov	local03, result1
23e9c                 | LR__3392
23e9c     11 FB 01 F6 | 	mov	result1, local03
23ea0     A7 F0 03 F6 | 	mov	ptra, fp
23ea4     B2 00 A0 FD | 	call	#popregs_
23ea8                 | __system____builtin_sinf_ret
23ea8     2D 00 64 FD | 	ret
23eac                 | 
23eac                 | __system____builtin_tanf
23eac     02 4A 05 F6 | 	mov	COUNT_, #2
23eb0     A8 00 A0 FD | 	call	#pushregs_
23eb4     09 1F 02 F6 | 	mov	local01, arg01
23eb8     A4 FE BF FD | 	call	#__system____builtin_sinf
23ebc     FD 20 02 F6 | 	mov	local02, result1
23ec0     0F 15 02 F6 | 	mov	arg02, local01
23ec4     87 E4 1F FF 
23ec8     DB 13 06 F6 | 	mov	arg01, ##1070141403
23ecc     1F 14 E6 F4 | 	bitnot	arg02, #31
23ed0     5C F1 BF FD | 	call	#__system___float_add
23ed4     FD 12 02 F6 | 	mov	arg01, result1
23ed8     84 FE BF FD | 	call	#__system____builtin_sinf
23edc     FD 14 02 F6 | 	mov	arg02, result1
23ee0     10 13 02 F6 | 	mov	arg01, local02
23ee4     1C F7 BF FD | 	call	#__system___float_div
23ee8     A7 F0 03 F6 | 	mov	ptra, fp
23eec     B2 00 A0 FD | 	call	#popregs_
23ef0                 | __system____builtin_tanf_ret
23ef0     2D 00 64 FD | 	ret
23ef4                 | 
23ef4                 | __system____builtin_asinf
23ef4     01 4A 05 F6 | 	mov	COUNT_, #1
23ef8     A8 00 A0 FD | 	call	#pushregs_
23efc     09 1F 02 F6 | 	mov	local01, arg01
23f00     0F 15 02 F6 | 	mov	arg02, local01
23f04     0F 13 02 F6 | 	mov	arg01, local01
23f08     F4 F4 BF FD | 	call	#__system___float_mul
23f0c     FD 14 02 F6 | 	mov	arg02, result1
23f10     00 C0 1F FF 
23f14     00 12 06 F6 | 	mov	arg01, ##1065353216
23f18     1F 14 E6 F4 | 	bitnot	arg02, #31
23f1c     10 F1 BF FD | 	call	#__system___float_add
23f20     FD 12 02 F6 | 	mov	arg01, result1
23f24     00 F4 BF FD | 	call	#__system___float_sqrt
23f28     FD 14 02 F6 | 	mov	arg02, result1
23f2c     0F 13 02 F6 | 	mov	arg01, local01
23f30     58 00 B0 FD | 	call	#__system____builtin_atan2f
23f34     A7 F0 03 F6 | 	mov	ptra, fp
23f38     B2 00 A0 FD | 	call	#popregs_
23f3c                 | __system____builtin_asinf_ret
23f3c     2D 00 64 FD | 	ret
23f40                 | 
23f40                 | __system____builtin_acosf
23f40     01 4A 05 F6 | 	mov	COUNT_, #1
23f44     A8 00 A0 FD | 	call	#pushregs_
23f48     09 1F 02 F6 | 	mov	local01, arg01
23f4c     0F 15 02 F6 | 	mov	arg02, local01
23f50     0F 13 02 F6 | 	mov	arg01, local01
23f54     A8 F4 BF FD | 	call	#__system___float_mul
23f58     FD 14 02 F6 | 	mov	arg02, result1
23f5c     00 C0 1F FF 
23f60     00 12 06 F6 | 	mov	arg01, ##1065353216
23f64     1F 14 E6 F4 | 	bitnot	arg02, #31
23f68     C4 F0 BF FD | 	call	#__system___float_add
23f6c     FD 12 02 F6 | 	mov	arg01, result1
23f70     B4 F3 BF FD | 	call	#__system___float_sqrt
23f74     FD 12 02 F6 | 	mov	arg01, result1
23f78     0F 15 02 F6 | 	mov	arg02, local01
23f7c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
23f80     A7 F0 03 F6 | 	mov	ptra, fp
23f84     B2 00 A0 FD | 	call	#popregs_
23f88                 | __system____builtin_acosf_ret
23f88     2D 00 64 FD | 	ret
23f8c                 | 
23f8c                 | __system____builtin_atan2f
23f8c     04 4A 05 F6 | 	mov	COUNT_, #4
23f90     A8 00 A0 FD | 	call	#pushregs_
23f94     09 1F 02 F6 | 	mov	local01, arg01
23f98     0A 21 02 F6 | 	mov	local02, arg02
23f9c     0F 13 02 F6 | 	mov	arg01, local01
23fa0     00 14 06 F6 | 	mov	arg02, #0
23fa4     01 16 06 F6 | 	mov	arg03, #1
23fa8     88 F8 BF FD | 	call	#__system___float_cmp
23fac     00 FA 0D F2 | 	cmp	result1, #0 wz
23fb0     28 00 90 5D |  if_ne	jmp	#LR__3400
23fb4     10 13 02 F6 | 	mov	arg01, local02
23fb8     00 14 06 F6 | 	mov	arg02, #0
23fbc     01 16 06 F6 | 	mov	arg03, #1
23fc0     70 F8 BF FD | 	call	#__system___float_cmp
23fc4     00 FA 55 F2 | 	cmps	result1, #0 wc
23fc8     87 24 60 CF 
23fcc     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
23fd0     DC 00 90 CD |  if_b	jmp	#LR__3401
23fd4     00 FA 05 F6 | 	mov	result1, #0
23fd8     D4 00 90 FD | 	jmp	#LR__3401
23fdc                 | LR__3400
23fdc     10 13 02 F6 | 	mov	arg01, local02
23fe0     10 15 02 F6 | 	mov	arg02, local02
23fe4     18 F4 BF FD | 	call	#__system___float_mul
23fe8     FD 22 02 F6 | 	mov	local03, result1
23fec     0F 13 02 F6 | 	mov	arg01, local01
23ff0     0F 15 02 F6 | 	mov	arg02, local01
23ff4     08 F4 BF FD | 	call	#__system___float_mul
23ff8     FD 14 02 F6 | 	mov	arg02, result1
23ffc     11 13 02 F6 | 	mov	arg01, local03
24000     2C F0 BF FD | 	call	#__system___float_add
24004     FD 12 02 F6 | 	mov	arg01, result1
24008     1C F3 BF FD | 	call	#__system___float_sqrt
2400c     FD 22 02 F6 | 	mov	local03, result1
24010     10 13 02 F6 | 	mov	arg01, local02
24014     11 15 02 F6 | 	mov	arg02, local03
24018     E8 F5 BF FD | 	call	#__system___float_div
2401c     FD 20 02 F6 | 	mov	local02, result1
24020     0F 13 02 F6 | 	mov	arg01, local01
24024     11 15 02 F6 | 	mov	arg02, local03
24028     D8 F5 BF FD | 	call	#__system___float_div
2402c     FD 1E 02 F6 | 	mov	local01, result1
24030     00 40 27 FF 
24034     00 12 06 F6 | 	mov	arg01, ##1317011456
24038     10 15 02 F6 | 	mov	arg02, local02
2403c     C0 F3 BF FD | 	call	#__system___float_mul
24040     FD 12 02 F6 | 	mov	arg01, result1
24044     00 14 06 F6 | 	mov	arg02, #0
24048     7C F8 BF FD | 	call	#__system___float_tointeger
2404c     FD 22 02 F6 | 	mov	local03, result1
24050     00 40 27 FF 
24054     00 12 06 F6 | 	mov	arg01, ##1317011456
24058     0F 15 02 F6 | 	mov	arg02, local01
2405c     A0 F3 BF FD | 	call	#__system___float_mul
24060     FD 12 02 F6 | 	mov	arg01, result1
24064     00 14 06 F6 | 	mov	arg02, #0
24068     5C F8 BF FD | 	call	#__system___float_tointeger
2406c     FD 22 52 FD | 	qvector	local03, result1
24070     87 24 20 FF 
24074     DB 23 06 F6 | 	mov	local03, ##1078530011
24078     19 12 62 FD | 	getqy	arg01
2407c     01 12 C6 F0 | 	sar	arg01, #1
24080     09 13 52 F6 | 	abs	arg01, arg01 wc
24084     1F 24 C6 C9 |  if_b	decod	local04, #31
24088     00 24 06 36 |  if_ae	mov	local04, #0
2408c     6C EF BF FD | 	call	#__system___float_fromuns
24090     12 FB 61 F5 | 	xor	result1, local04
24094     FD 12 02 F6 | 	mov	arg01, result1
24098     00 40 27 FF 
2409c     00 14 06 F6 | 	mov	arg02, ##1317011456
240a0     60 F5 BF FD | 	call	#__system___float_div
240a4     FD 14 02 F6 | 	mov	arg02, result1
240a8     11 13 02 F6 | 	mov	arg01, local03
240ac     50 F3 BF FD | 	call	#__system___float_mul
240b0                 | LR__3401
240b0     A7 F0 03 F6 | 	mov	ptra, fp
240b4     B2 00 A0 FD | 	call	#popregs_
240b8                 | __system____builtin_atan2f_ret
240b8     2D 00 64 FD | 	ret
240bc                 | 
240bc                 | __system____builtin_exp2f
240bc     04 4A 05 F6 | 	mov	COUNT_, #4
240c0     A8 00 A0 FD | 	call	#pushregs_
240c4     09 1F 02 F6 | 	mov	local01, arg01
240c8     00 7F 21 FF 
240cc     00 14 06 F6 | 	mov	arg02, ##1123942400
240d0     01 16 66 F6 | 	neg	arg03, #1
240d4     5C F7 BF FD | 	call	#__system___float_cmp
240d8     00 FA 55 F2 | 	cmps	result1, #0 wc
240dc     00 C0 3F 3F 
240e0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
240e4     DC 00 90 3D |  if_ae	jmp	#LR__3411
240e8     0F 13 02 F6 | 	mov	arg01, local01
240ec     00 7F 61 FF 
240f0     00 14 06 F6 | 	mov	arg02, ##-1023541248
240f4     01 16 06 F6 | 	mov	arg03, #1
240f8     38 F7 BF FD | 	call	#__system___float_cmp
240fc     00 FA 55 F2 | 	cmps	result1, #0 wc
24100     00 FA 05 C6 |  if_b	mov	result1, #0
24104     BC 00 90 CD |  if_b	jmp	#LR__3411
24108     0F 13 02 F6 | 	mov	arg01, local01
2410c     00 14 06 F6 | 	mov	arg02, #0
24110     B4 F7 BF FD | 	call	#__system___float_tointeger
24114     FD 20 02 F6 | 	mov	local02, result1
24118     10 13 52 F6 | 	abs	arg01, local02 wc
2411c     1F 22 C6 C9 |  if_b	decod	local03, #31
24120     00 22 06 36 |  if_ae	mov	local03, #0
24124     D4 EE BF FD | 	call	#__system___float_fromuns
24128     11 FB 61 F5 | 	xor	result1, local03
2412c     FD 14 02 F6 | 	mov	arg02, result1
24130     0F 13 02 F6 | 	mov	arg01, local01
24134     1F 14 E6 F4 | 	bitnot	arg02, #31
24138     F4 EE BF FD | 	call	#__system___float_add
2413c     FD 24 02 F6 | 	mov	local04, result1
24140     12 13 02 F6 | 	mov	arg01, local04
24144     00 14 06 F6 | 	mov	arg02, #0
24148     01 16 06 F6 | 	mov	arg03, #1
2414c     E4 F6 BF FD | 	call	#__system___float_cmp
24150     00 FA 55 F2 | 	cmps	result1, #0 wc
24154     18 00 90 3D |  if_ae	jmp	#LR__3410
24158     12 13 02 F6 | 	mov	arg01, local04
2415c     00 C0 1F FF 
24160     00 14 06 F6 | 	mov	arg02, ##1065353216
24164     C8 EE BF FD | 	call	#__system___float_add
24168     FD 24 02 F6 | 	mov	local04, result1
2416c     01 20 86 F1 | 	sub	local02, #1
24170                 | LR__3410
24170     7F 20 06 F1 | 	add	local02, #127
24174     17 20 66 F0 | 	shl	local02, #23
24178     12 13 02 F6 | 	mov	arg01, local04
2417c     00 80 26 FF 
24180     00 14 06 F6 | 	mov	arg02, ##1291845632
24184     78 F2 BF FD | 	call	#__system___float_mul
24188     FD 12 02 F6 | 	mov	arg01, result1
2418c     00 14 06 F6 | 	mov	arg02, #0
24190     34 F7 BF FD | 	call	#__system___float_tointeger
24194     FD 24 0A F6 | 	mov	local04, result1 wz
24198     10 FB 01 A6 |  if_e	mov	result1, local02
2419c     24 00 90 AD |  if_e	jmp	#LR__3411
241a0     3E 24 26 F4 | 	bith	local04, #62
241a4     0F 24 62 FD | 	qexp	local04
241a8     10 13 02 F6 | 	mov	arg01, local02
241ac     18 14 62 FD | 	getqx	arg02
241b0     01 14 06 F1 | 	add	arg02, #1
241b4     01 14 46 F0 | 	shr	arg02, #1
241b8     00 80 1F FF 
241bc     00 14 06 F1 | 	add	arg02, ##1056964608
241c0     3C F2 BF FD | 	call	#__system___float_mul
241c4                 | LR__3411
241c4     A7 F0 03 F6 | 	mov	ptra, fp
241c8     B2 00 A0 FD | 	call	#popregs_
241cc                 | __system____builtin_exp2f_ret
241cc     2D 00 64 FD | 	ret
241d0                 | 
241d0                 | __system____builtin_log2f
241d0     06 4A 05 F6 | 	mov	COUNT_, #6
241d4     A8 00 A0 FD | 	call	#pushregs_
241d8     09 1F 02 F6 | 	mov	local01, arg01
241dc     09 21 0A F6 | 	mov	local02, arg01 wz
241e0     00 00 40 5F 
241e4     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
241e8     00 40 00 AF 
241ec     00 FA 65 A6 |  if_e	neg	result1, ##8388608
241f0     08 01 90 AD |  if_e	jmp	#LR__3424
241f4     00 20 56 F2 | 	cmps	local02, #0 wc
241f8     00 E0 3F CF 
241fc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24200     F8 00 90 CD |  if_b	jmp	#LR__3424
24204     0F 13 02 F6 | 	mov	arg01, local01
24208     00 90 20 FF 
2420c     00 14 06 F6 | 	mov	arg02, ##1092616192
24210     01 16 06 F6 | 	mov	arg03, #1
24214     1C F6 BF FD | 	call	#__system___float_cmp
24218     00 FA 0D F2 | 	cmp	result1, #0 wz
2421c     4D 2A 20 AF 
24220     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
24224     D4 00 90 AD |  if_e	jmp	#LR__3424
24228     0F 13 02 F6 | 	mov	arg01, local01
2422c     FC 16 20 FF 
24230     54 14 06 F6 | 	mov	arg02, ##1076754516
24234     01 16 06 F6 | 	mov	arg03, #1
24238     F8 F5 BF FD | 	call	#__system___float_cmp
2423c     00 FA 0D F2 | 	cmp	result1, #0 wz
24240     55 DC 1F AF 
24244     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24248     B0 00 90 AD |  if_e	jmp	#LR__3424
2424c     10 23 02 F6 | 	mov	local03, local02
24250     17 22 46 F0 | 	shr	local03, #23
24254     11 23 E2 F8 | 	getbyte	local03, local03, #0
24258     17 21 06 F4 | 	bitl	local02, #279
2425c     10 25 02 F6 | 	mov	local04, local02
24260     FF 22 0E F2 | 	cmp	local03, #255 wz
24264     1C 00 90 5D |  if_ne	jmp	#LR__3420
24268     00 24 0E F2 | 	cmp	local04, #0 wz
2426c     00 C0 3F 5F 
24270     00 26 06 56 |  if_ne	mov	local05, ##2139095040
24274     00 E0 3F AF 
24278     00 26 06 A6 |  if_e	mov	local05, ##2143289344
2427c     13 FB 01 F6 | 	mov	result1, local05
24280     78 00 90 FD | 	jmp	#LR__3424
24284                 | LR__3420
24284     00 22 0E F2 | 	cmp	local03, #0 wz
24288     17 24 26 54 |  if_ne	bith	local04, #23
2428c     7F 22 86 51 |  if_ne	sub	local03, #127
24290     28 00 90 5D |  if_ne	jmp	#LR__3423
24294     00 24 0E F2 | 	cmp	local04, #0 wz
24298     00 40 00 AF 
2429c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
242a0     58 00 90 AD |  if_e	jmp	#LR__3424
242a4     7E 22 66 F6 | 	neg	local03, #126
242a8     97 08 48 FB | 	callpa	#(@LR__3422-@LR__3421)>>2,fcache_load_ptr_
242ac                 | LR__3421
242ac     17 24 2E F4 | 	testbn	local04, #23 wz
242b0     01 24 66 A0 |  if_e	shl	local04, #1
242b4     01 22 06 A1 |  if_e	add	local03, #1
242b8     F0 FF 9F AD |  if_e	jmp	#LR__3421
242bc                 | LR__3422
242bc                 | LR__3423
242bc     0E 24 62 FD | 	qlog	local04
242c0     01 22 86 F1 | 	sub	local03, #1
242c4     11 13 52 F6 | 	abs	arg01, local03 wc
242c8     1F 28 C6 C9 |  if_b	decod	local06, #31
242cc     00 28 06 36 |  if_ae	mov	local06, #0
242d0     18 26 62 FD | 	getqx	local05
242d4     9B 26 06 F4 | 	bitl	local05, #155
242d8     08 26 06 F1 | 	add	local05, #8
242dc     04 26 46 F0 | 	shr	local05, #4
242e0     00 C0 1F FF 
242e4     00 26 06 F1 | 	add	local05, ##1065353216
242e8     10 ED BF FD | 	call	#__system___float_fromuns
242ec     14 FB 61 F5 | 	xor	result1, local06
242f0     FD 14 02 F6 | 	mov	arg02, result1
242f4     13 13 02 F6 | 	mov	arg01, local05
242f8     34 ED BF FD | 	call	#__system___float_add
242fc                 | LR__3424
242fc     A7 F0 03 F6 | 	mov	ptra, fp
24300     B2 00 A0 FD | 	call	#popregs_
24304                 | __system____builtin_log2f_ret
24304     2D 00 64 FD | 	ret
24308                 | 
24308                 | __system____builtin_powf
24308     04 4A 05 F6 | 	mov	COUNT_, #4
2430c     A8 00 A0 FD | 	call	#pushregs_
24310     09 1F 02 F6 | 	mov	local01, arg01
24314     0A 21 02 F6 | 	mov	local02, arg02
24318     10 13 02 F6 | 	mov	arg01, local02
2431c     00 14 06 F6 | 	mov	arg02, #0
24320     A4 F5 BF FD | 	call	#__system___float_tointeger
24324     FD 22 02 F6 | 	mov	local03, result1
24328     11 13 52 F6 | 	abs	arg01, local03 wc
2432c     1F 24 C6 C9 |  if_b	decod	local04, #31
24330     00 24 06 36 |  if_ae	mov	local04, #0
24334     C4 EC BF FD | 	call	#__system___float_fromuns
24338     12 FB 61 F5 | 	xor	result1, local04
2433c     FD 12 02 F6 | 	mov	arg01, result1
24340     10 15 02 F6 | 	mov	arg02, local02
24344     01 16 06 F6 | 	mov	arg03, #1
24348     E8 F4 BF FD | 	call	#__system___float_cmp
2434c     00 FA 0D F2 | 	cmp	result1, #0 wz
24350     18 00 90 5D |  if_ne	jmp	#LR__3430
24354     00 C0 1F FF 
24358     00 12 06 F6 | 	mov	arg01, ##1065353216
2435c     0F 15 02 F6 | 	mov	arg02, local01
24360     11 17 02 F6 | 	mov	arg03, local03
24364     A0 00 B0 FD | 	call	#__system___float_pow_n
24368     58 00 90 FD | 	jmp	#LR__3431
2436c                 | LR__3430
2436c     0F 13 02 F6 | 	mov	arg01, local01
24370     00 14 06 F6 | 	mov	arg02, #0
24374     01 16 06 F6 | 	mov	arg03, #1
24378     B8 F4 BF FD | 	call	#__system___float_cmp
2437c     00 FA 55 F2 | 	cmps	result1, #0 wc
24380     00 E0 3F CF 
24384     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24388     38 00 90 CD |  if_b	jmp	#LR__3431
2438c     0F 13 02 F6 | 	mov	arg01, local01
24390     00 14 06 F6 | 	mov	arg02, #0
24394     01 16 06 F6 | 	mov	arg03, #1
24398     98 F4 BF FD | 	call	#__system___float_cmp
2439c     00 FA 0D F2 | 	cmp	result1, #0 wz
243a0     00 FA 05 A6 |  if_e	mov	result1, #0
243a4     1C 00 90 AD |  if_e	jmp	#LR__3431
243a8     0F 13 02 F6 | 	mov	arg01, local01
243ac     20 FE BF FD | 	call	#__system____builtin_log2f
243b0     FD 12 02 F6 | 	mov	arg01, result1
243b4     10 15 02 F6 | 	mov	arg02, local02
243b8     44 F0 BF FD | 	call	#__system___float_mul
243bc     FD 12 02 F6 | 	mov	arg01, result1
243c0     F8 FC BF FD | 	call	#__system____builtin_exp2f
243c4                 | LR__3431
243c4     A7 F0 03 F6 | 	mov	ptra, fp
243c8     B2 00 A0 FD | 	call	#popregs_
243cc                 | __system____builtin_powf_ret
243cc     2D 00 64 FD | 	ret
243d0                 | 
243d0                 | __system____builtin_logbase
243d0     02 4A 05 F6 | 	mov	COUNT_, #2
243d4     A8 00 A0 FD | 	call	#pushregs_
243d8     09 1F 02 F6 | 	mov	local01, arg01
243dc     0A 13 02 F6 | 	mov	arg01, arg02
243e0     EC FD BF FD | 	call	#__system____builtin_log2f
243e4     FD 20 02 F6 | 	mov	local02, result1
243e8     0F 13 02 F6 | 	mov	arg01, local01
243ec     E0 FD BF FD | 	call	#__system____builtin_log2f
243f0     FD 14 02 F6 | 	mov	arg02, result1
243f4     10 13 02 F6 | 	mov	arg01, local02
243f8     08 F2 BF FD | 	call	#__system___float_div
243fc     A7 F0 03 F6 | 	mov	ptra, fp
24400     B2 00 A0 FD | 	call	#popregs_
24404                 | __system____builtin_logbase_ret
24404     2D 00 64 FD | 	ret
24408                 | 
24408                 | __system___float_pow_n
24408     05 4A 05 F6 | 	mov	COUNT_, #5
2440c     A8 00 A0 FD | 	call	#pushregs_
24410     09 1F 02 F6 | 	mov	local01, arg01
24414     0A 21 02 F6 | 	mov	local02, arg02
24418     0B 23 02 F6 | 	mov	local03, arg03
2441c     00 22 56 F2 | 	cmps	local03, #0 wc
24420     18 00 90 3D |  if_ae	jmp	#LR__3440
24424     01 24 06 F6 | 	mov	local04, #1
24428     11 23 62 F6 | 	neg	local03, local03
2442c     00 22 56 F2 | 	cmps	local03, #0 wc
24430     00 FA 05 C6 |  if_b	mov	result1, #0
24434     94 00 90 CD |  if_b	jmp	#LR__3448
24438     04 00 90 FD | 	jmp	#LR__3441
2443c                 | LR__3440
2443c     00 24 06 F6 | 	mov	local04, #0
24440                 | LR__3441
24440     00 C0 1F FF 
24444     00 26 06 F6 | 	mov	local05, ##1065353216
24448                 | LR__3442
24448     01 22 56 F2 | 	cmps	local03, #1 wc
2444c     30 00 90 CD |  if_b	jmp	#LR__3444
24450     01 22 CE F7 | 	test	local03, #1 wz
24454     10 00 90 AD |  if_e	jmp	#LR__3443
24458     13 13 02 F6 | 	mov	arg01, local05
2445c     10 15 02 F6 | 	mov	arg02, local02
24460     9C EF BF FD | 	call	#__system___float_mul
24464     FD 26 02 F6 | 	mov	local05, result1
24468                 | LR__3443
24468     01 22 C6 F0 | 	sar	local03, #1
2446c     10 13 02 F6 | 	mov	arg01, local02
24470     10 15 02 F6 | 	mov	arg02, local02
24474     88 EF BF FD | 	call	#__system___float_mul
24478     FD 20 02 F6 | 	mov	local02, result1
2447c     C8 FF 9F FD | 	jmp	#LR__3442
24480                 | LR__3444
24480     00 24 0E F2 | 	cmp	local04, #0 wz
24484     14 00 90 AD |  if_e	jmp	#LR__3445
24488     0F 13 02 F6 | 	mov	arg01, local01
2448c     13 15 02 F6 | 	mov	arg02, local05
24490     70 F1 BF FD | 	call	#__system___float_div
24494     FD 26 02 F6 | 	mov	local05, result1
24498     2C 00 90 FD | 	jmp	#LR__3447
2449c                 | LR__3445
2449c     0F 13 02 F6 | 	mov	arg01, local01
244a0     00 C0 1F FF 
244a4     00 14 06 F6 | 	mov	arg02, ##1065353216
244a8     01 16 06 F6 | 	mov	arg03, #1
244ac     84 F3 BF FD | 	call	#__system___float_cmp
244b0     00 FA 0D F2 | 	cmp	result1, #0 wz
244b4     10 00 90 AD |  if_e	jmp	#LR__3446
244b8     0F 13 02 F6 | 	mov	arg01, local01
244bc     13 15 02 F6 | 	mov	arg02, local05
244c0     3C EF BF FD | 	call	#__system___float_mul
244c4     FD 26 02 F6 | 	mov	local05, result1
244c8                 | LR__3446
244c8                 | LR__3447
244c8     13 FB 01 F6 | 	mov	result1, local05
244cc                 | LR__3448
244cc     A7 F0 03 F6 | 	mov	ptra, fp
244d0     B2 00 A0 FD | 	call	#popregs_
244d4                 | __system___float_pow_n_ret
244d4     2D 00 64 FD | 	ret
244d8                 | 
244d8                 | __system___gc_ptrs
244d8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
244dc     00 03 02 F6 | 	mov	_var02, _var01
244e0     76 01 00 FF 
244e4     F8 03 06 F1 | 	add	_var02, ##191992
244e8     00 FD 09 FB | 	rdlong	result2, _var01 wz
244ec     74 00 90 5D |  if_ne	jmp	#LR__3450
244f0     01 FD 01 F6 | 	mov	result2, _var02
244f4     00 FD 81 F1 | 	sub	result2, _var01
244f8     00 03 58 FC | 	wrword	#1, _var01
244fc     00 FB 01 F6 | 	mov	result1, _var01
24500     02 FA 05 F1 | 	add	result1, #2
24504     36 00 80 FF 
24508     FD 20 59 FC | 	wrword	##27792, result1
2450c     00 FB 01 F6 | 	mov	result1, _var01
24510     04 FA 05 F1 | 	add	result1, #4
24514     FD 00 58 FC | 	wrword	#0, result1
24518     00 FB 01 F6 | 	mov	result1, _var01
2451c     06 FA 05 F1 | 	add	result1, #6
24520     FD 02 58 FC | 	wrword	#1, result1
24524     10 00 06 F1 | 	add	_var01, #16
24528     FE FC 51 F6 | 	abs	result2, result2 wc
2452c     04 FC 45 F0 | 	shr	result2, #4
24530     FE FC 81 F6 | 	negc	result2, result2
24534     00 FD 51 FC | 	wrword	result2, _var01
24538     00 FD 01 F6 | 	mov	result2, _var01
2453c     02 FC 05 F1 | 	add	result2, #2
24540     36 00 80 FF 
24544     FE 1E 59 FC | 	wrword	##27791, result2
24548     00 FD 01 F6 | 	mov	result2, _var01
2454c     04 FC 05 F1 | 	add	result2, #4
24550     FE 00 58 FC | 	wrword	#0, result2
24554     00 FD 01 F6 | 	mov	result2, _var01
24558     06 FC 05 F1 | 	add	result2, #6
2455c     FE 00 58 FC | 	wrword	#0, result2
24560     10 00 86 F1 | 	sub	_var01, #16
24564                 | LR__3450
24564     00 FB 01 F6 | 	mov	result1, _var01
24568     01 FD 01 F6 | 	mov	result2, _var02
2456c                 | __system___gc_ptrs_ret
2456c     2D 00 64 FD | 	ret
24570                 | 
24570                 | __system___gc_tryalloc
24570     0B 4A 05 F6 | 	mov	COUNT_, #11
24574     A8 00 A0 FD | 	call	#pushregs_
24578     09 1F 02 F6 | 	mov	local01, arg01
2457c     0A 21 02 F6 | 	mov	local02, arg02
24580     54 FF BF FD | 	call	#__system___gc_ptrs
24584     FD 22 02 F6 | 	mov	local03, result1
24588     FE 24 02 F6 | 	mov	local04, result2
2458c     11 27 02 F6 | 	mov	local05, local03
24590     00 28 06 F6 | 	mov	local06, #0
24594     97 1E 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
24598                 | LR__3460
24598     13 2B 02 F6 | 	mov	local07, local05
2459c     06 26 06 F1 | 	add	local05, #6
245a0     13 15 EA FA | 	rdword	arg02, local05 wz
245a4     11 13 02 F6 | 	mov	arg01, local03
245a8     00 FA 05 A6 |  if_e	mov	result1, #0
245ac     04 14 66 50 |  if_ne	shl	arg02, #4
245b0     0A 13 02 51 |  if_ne	add	arg01, arg02
245b4     09 FB 01 56 |  if_ne	mov	result1, arg01
245b8     FD 26 0A F6 | 	mov	local05, result1 wz
245bc     13 29 E2 5A |  if_ne	rdword	local06, local05
245c0     00 26 0E F2 | 	cmp	local05, #0 wz
245c4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
245c8     08 00 90 1D |  if_a	jmp	#LR__3462
245cc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
245d0     C4 FF 9F 1D |  if_a	jmp	#LR__3460
245d4                 | LR__3461
245d4                 | LR__3462
245d4     00 26 0E F2 | 	cmp	local05, #0 wz
245d8     13 FB 01 A6 |  if_e	mov	result1, local05
245dc     3C 01 90 AD |  if_e	jmp	#LR__3465
245e0     13 FD 01 F6 | 	mov	result2, local05
245e4     06 FC 05 F1 | 	add	result2, #6
245e8     FE 2C E2 FA | 	rdword	local08, result2
245ec     14 1F 52 F2 | 	cmps	local01, local06 wc
245f0     C0 00 90 3D |  if_ae	jmp	#LR__3464
245f4     13 1F 52 FC | 	wrword	local01, local05
245f8     13 13 02 F6 | 	mov	arg01, local05
245fc     0F 2D 02 F6 | 	mov	local08, local01
24600     04 2C 66 F0 | 	shl	local08, #4
24604     16 13 02 F1 | 	add	arg01, local08
24608     0F 29 82 F1 | 	sub	local06, local01
2460c     09 29 52 FC | 	wrword	local06, arg01
24610     09 2D 02 F6 | 	mov	local08, arg01
24614     02 2C 06 F1 | 	add	local08, #2
24618     36 00 80 FF 
2461c     16 1F 59 FC | 	wrword	##27791, local08
24620     13 15 0A F6 | 	mov	arg02, local05 wz
24624     00 FA 05 A6 |  if_e	mov	result1, #0
24628     11 15 82 51 |  if_ne	sub	arg02, local03
2462c     04 14 46 50 |  if_ne	shr	arg02, #4
24630     0A FB 01 56 |  if_ne	mov	result1, arg02
24634     09 2D 02 F6 | 	mov	local08, arg01
24638     04 2C 06 F1 | 	add	local08, #4
2463c     16 FB 51 FC | 	wrword	result1, local08
24640     13 2D 02 F6 | 	mov	local08, local05
24644     06 2C 06 F1 | 	add	local08, #6
24648     09 15 02 F6 | 	mov	arg02, arg01
2464c     16 2D E2 FA | 	rdword	local08, local08
24650     06 14 06 F1 | 	add	arg02, #6
24654     0A 2D 52 FC | 	wrword	local08, arg02
24658     09 2F 02 F6 | 	mov	local09, arg01
2465c     17 15 0A F6 | 	mov	arg02, local09 wz
24660     00 FA 05 A6 |  if_e	mov	result1, #0
24664     11 15 82 51 |  if_ne	sub	arg02, local03
24668     04 14 46 50 |  if_ne	shr	arg02, #4
2466c     0A FB 01 56 |  if_ne	mov	result1, arg02
24670     FD 2C 02 F6 | 	mov	local08, result1
24674     09 31 EA FA | 	rdword	local10, arg01 wz
24678     00 FA 05 A6 |  if_e	mov	result1, #0
2467c     04 30 66 50 |  if_ne	shl	local10, #4
24680     18 13 02 51 |  if_ne	add	arg01, local10
24684     09 FB 01 56 |  if_ne	mov	result1, arg01
24688     FD 32 0A F6 | 	mov	local11, result1 wz
2468c     24 00 90 AD |  if_e	jmp	#LR__3463
24690     12 33 52 F2 | 	cmps	local11, local04 wc
24694     1C 00 90 3D |  if_ae	jmp	#LR__3463
24698     17 15 0A F6 | 	mov	arg02, local09 wz
2469c     00 FA 05 A6 |  if_e	mov	result1, #0
246a0     11 15 82 51 |  if_ne	sub	arg02, local03
246a4     04 14 46 50 |  if_ne	shr	arg02, #4
246a8     0A FB 01 56 |  if_ne	mov	result1, arg02
246ac     04 32 06 F1 | 	add	local11, #4
246b0     19 FB 51 FC | 	wrword	result1, local11
246b4                 | LR__3463
246b4                 | LR__3464
246b4     06 2A 06 F1 | 	add	local07, #6
246b8     15 2D 52 FC | 	wrword	local08, local07
246bc     36 00 00 FF 
246c0     80 2E 06 F6 | 	mov	local09, ##27776
246c4     10 2F 42 F5 | 	or	local09, local02
246c8     00 FA 05 F6 | 	mov	result1, #0
246cc     01 FA 61 FD | 	cogid	result1
246d0     FD 2E 42 F5 | 	or	local09, result1
246d4     13 33 02 F6 | 	mov	local11, local05
246d8     02 32 06 F1 | 	add	local11, #2
246dc     19 2F 52 FC | 	wrword	local09, local11
246e0     11 2F 02 F6 | 	mov	local09, local03
246e4     08 2E 06 F1 | 	add	local09, #8
246e8     13 33 02 F6 | 	mov	local11, local05
246ec     17 2F E2 FA | 	rdword	local09, local09
246f0     06 32 06 F1 | 	add	local11, #6
246f4     19 2F 52 FC | 	wrword	local09, local11
246f8     13 15 0A F6 | 	mov	arg02, local05 wz
246fc     00 FA 05 A6 |  if_e	mov	result1, #0
24700     11 15 82 51 |  if_ne	sub	arg02, local03
24704     04 14 46 50 |  if_ne	shr	arg02, #4
24708     0A FB 01 56 |  if_ne	mov	result1, arg02
2470c     08 22 06 F1 | 	add	local03, #8
24710     11 FB 51 FC | 	wrword	result1, local03
24714     08 26 06 F1 | 	add	local05, #8
24718     13 FB 01 F6 | 	mov	result1, local05
2471c                 | LR__3465
2471c     A7 F0 03 F6 | 	mov	ptra, fp
24720     B2 00 A0 FD | 	call	#popregs_
24724                 | __system___gc_tryalloc_ret
24724     2D 00 64 FD | 	ret
24728                 | 
24728                 | __system___gc_alloc_managed
24728     01 4A 05 F6 | 	mov	COUNT_, #1
2472c     A8 00 A0 FD | 	call	#pushregs_
24730     09 1F 02 F6 | 	mov	local01, arg01
24734     00 14 06 F6 | 	mov	arg02, #0
24738     1C 00 B0 FD | 	call	#__system___gc_doalloc
2473c     FD 14 0A F6 | 	mov	arg02, result1 wz
24740     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
24744     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24748     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2474c     A7 F0 03 F6 | 	mov	ptra, fp
24750     B2 00 A0 FD | 	call	#popregs_
24754                 | __system___gc_alloc_managed_ret
24754     2D 00 64 FD | 	ret
24758                 | 
24758                 | __system___gc_doalloc
24758     06 4A 05 F6 | 	mov	COUNT_, #6
2475c     A8 00 A0 FD | 	call	#pushregs_
24760     09 1F 0A F6 | 	mov	local01, arg01 wz
24764     0A 21 02 F6 | 	mov	local02, arg02
24768     00 FA 05 A6 |  if_e	mov	result1, #0
2476c     8C 00 90 AD |  if_e	jmp	#LR__3477
24770     17 1E 06 F1 | 	add	local01, #23
24774     0F 1E 26 F5 | 	andn	local01, #15
24778     04 1E 46 F0 | 	shr	local01, #4
2477c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24780     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24784     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24788     C0 C0 BF FD | 	call	#__system___lockmem
2478c     0F 13 02 F6 | 	mov	arg01, local01
24790     10 15 02 F6 | 	mov	arg02, local02
24794     D8 FD BF FD | 	call	#__system___gc_tryalloc
24798     FD 22 0A F6 | 	mov	local03, result1 wz
2479c     14 00 90 5D |  if_ne	jmp	#LR__3470
247a0     70 03 B0 FD | 	call	#__system___gc_docollect
247a4     0F 13 02 F6 | 	mov	arg01, local01
247a8     10 15 02 F6 | 	mov	arg02, local02
247ac     C0 FD BF FD | 	call	#__system___gc_tryalloc
247b0     FD 22 02 F6 | 	mov	local03, result1
247b4                 | LR__3470
247b4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
247b8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
247bc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
247c0     09 01 68 FC | 	wrlong	#0, arg01
247c4     00 22 0E F2 | 	cmp	local03, #0 wz
247c8     2C 00 90 AD |  if_e	jmp	#LR__3476
247cc     04 1E 66 F0 | 	shl	local01, #4
247d0     08 1E 86 F1 | 	sub	local01, #8
247d4     0F 25 52 F6 | 	abs	local04, local01 wc
247d8     02 24 46 F0 | 	shr	local04, #2
247dc     12 27 8A F6 | 	negc	local05, local04 wz
247e0     11 29 02 F6 | 	mov	local06, local03
247e4     10 00 90 AD |  if_e	jmp	#LR__3475
247e8     97 06 48 FB | 	callpa	#(@LR__3473-@LR__3471)>>2,fcache_load_ptr_
247ec                 | LR__3471
247ec     13 05 D8 FC | 	rep	@LR__3474, local05
247f0                 | LR__3472
247f0     14 01 68 FC | 	wrlong	#0, local06
247f4     04 28 06 F1 | 	add	local06, #4
247f8                 | LR__3473
247f8                 | LR__3474
247f8                 | LR__3475
247f8                 | LR__3476
247f8     11 FB 01 F6 | 	mov	result1, local03
247fc                 | LR__3477
247fc     A7 F0 03 F6 | 	mov	ptra, fp
24800     B2 00 A0 FD | 	call	#popregs_
24804                 | __system___gc_doalloc_ret
24804     2D 00 64 FD | 	ret
24808                 | 
24808                 | __system___gc_isvalidptr
24808     F8 16 06 F4 | 	bitl	arg03, #248
2480c     08 16 86 F1 | 	sub	arg03, #8
24810     09 17 52 F2 | 	cmps	arg03, arg01 wc
24814     08 00 90 CD |  if_b	jmp	#LR__3480
24818     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2481c     08 00 90 CD |  if_b	jmp	#LR__3481
24820                 | LR__3480
24820     00 FA 05 F6 | 	mov	result1, #0
24824     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24828                 | LR__3481
24828     0B 01 02 F6 | 	mov	_var01, arg03
2482c     09 01 62 F5 | 	xor	_var01, arg01
24830     0F 00 CE F7 | 	test	_var01, #15 wz
24834     00 FA 05 56 |  if_ne	mov	result1, #0
24838     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2483c     0B 01 02 F6 | 	mov	_var01, arg03
24840     02 00 06 F1 | 	add	_var01, #2
24844     00 01 E2 FA | 	rdword	_var01, _var01
24848     7F 00 00 FF 
2484c     C0 01 06 F5 | 	and	_var01, ##65472
24850     36 00 00 FF 
24854     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24858     00 FA 05 56 |  if_ne	mov	result1, #0
2485c     0B FB 01 A6 |  if_e	mov	result1, arg03
24860                 | __system___gc_isvalidptr_ret
24860     2D 00 64 FD | 	ret
24864                 | 
24864                 | __system___gc_free
24864     09 17 02 F6 | 	mov	arg03, arg01
24868     6C FC BF FD | 	call	#__system___gc_ptrs
2486c     FD 12 02 F6 | 	mov	arg01, result1
24870     FE 14 02 F6 | 	mov	arg02, result2
24874     90 FF BF FD | 	call	#__system___gc_isvalidptr
24878     FD 14 0A F6 | 	mov	arg02, result1 wz
2487c     28 00 90 AD |  if_e	jmp	#LR__3490
24880     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24884     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24888     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2488c     BC BF BF FD | 	call	#__system___lockmem
24890     0A 13 02 F6 | 	mov	arg01, arg02
24894     14 00 B0 FD | 	call	#__system___gc_dofree
24898     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2489c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
248a0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
248a4     09 01 68 FC | 	wrlong	#0, arg01
248a8                 | LR__3490
248a8                 | __system___gc_free_ret
248a8     2D 00 64 FD | 	ret
248ac                 | 
248ac                 | __system___gc_dofree
248ac     06 4A 05 F6 | 	mov	COUNT_, #6
248b0     A8 00 A0 FD | 	call	#pushregs_
248b4     09 1F 02 F6 | 	mov	local01, arg01
248b8     1C FC BF FD | 	call	#__system___gc_ptrs
248bc     FD 20 02 F6 | 	mov	local02, result1
248c0     FE 22 02 F6 | 	mov	local03, result2
248c4     0F 15 02 F6 | 	mov	arg02, local01
248c8     02 14 06 F1 | 	add	arg02, #2
248cc     36 00 80 FF 
248d0     0A 1F 59 FC | 	wrword	##27791, arg02
248d4     0F 25 02 F6 | 	mov	local04, local01
248d8     0F 13 02 F6 | 	mov	arg01, local01
248dc     09 27 EA FA | 	rdword	local05, arg01 wz
248e0     00 FA 05 A6 |  if_e	mov	result1, #0
248e4     04 26 66 50 |  if_ne	shl	local05, #4
248e8     13 13 02 51 |  if_ne	add	arg01, local05
248ec     09 FB 01 56 |  if_ne	mov	result1, arg01
248f0     FD 28 02 F6 | 	mov	local06, result1
248f4     97 24 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
248f8                 | LR__3500
248f8     04 24 06 F1 | 	add	local04, #4
248fc     12 15 EA FA | 	rdword	arg02, local04 wz
24900     10 13 02 F6 | 	mov	arg01, local02
24904     00 FA 05 A6 |  if_e	mov	result1, #0
24908     04 14 66 50 |  if_ne	shl	arg02, #4
2490c     0A 13 02 51 |  if_ne	add	arg01, arg02
24910     09 FB 01 56 |  if_ne	mov	result1, arg01
24914     FD 24 0A F6 | 	mov	local04, result1 wz
24918     24 00 90 AD |  if_e	jmp	#LR__3502
2491c     12 13 02 F6 | 	mov	arg01, local04
24920     00 FA 05 F6 | 	mov	result1, #0
24924     02 12 06 F1 | 	add	arg01, #2
24928     09 13 E2 FA | 	rdword	arg01, arg01
2492c     36 00 00 FF 
24930     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24934     01 FA 65 A6 |  if_e	neg	result1, #1
24938     00 FA 0D F2 | 	cmp	result1, #0 wz
2493c     B8 FF 9F AD |  if_e	jmp	#LR__3500
24940                 | LR__3501
24940                 | LR__3502
24940     00 24 0E F2 | 	cmp	local04, #0 wz
24944     10 25 02 A6 |  if_e	mov	local04, local02
24948     12 15 02 F6 | 	mov	arg02, local04
2494c     06 14 06 F1 | 	add	arg02, #6
24950     0F 13 02 F6 | 	mov	arg01, local01
24954     0A 15 E2 FA | 	rdword	arg02, arg02
24958     06 12 06 F1 | 	add	arg01, #6
2495c     09 15 52 FC | 	wrword	arg02, arg01
24960     0F 15 0A F6 | 	mov	arg02, local01 wz
24964     00 FA 05 A6 |  if_e	mov	result1, #0
24968     10 15 82 51 |  if_ne	sub	arg02, local02
2496c     04 14 46 50 |  if_ne	shr	arg02, #4
24970     0A FB 01 56 |  if_ne	mov	result1, arg02
24974     12 15 02 F6 | 	mov	arg02, local04
24978     06 14 06 F1 | 	add	arg02, #6
2497c     0A FB 51 FC | 	wrword	result1, arg02
24980     10 25 0A F2 | 	cmp	local04, local02 wz
24984     A4 00 90 AD |  if_e	jmp	#LR__3505
24988     12 13 02 F6 | 	mov	arg01, local04
2498c     09 27 EA FA | 	rdword	local05, arg01 wz
24990     00 FA 05 A6 |  if_e	mov	result1, #0
24994     04 26 66 50 |  if_ne	shl	local05, #4
24998     13 13 02 51 |  if_ne	add	arg01, local05
2499c     09 FB 01 56 |  if_ne	mov	result1, arg01
249a0     0F FB 09 F2 | 	cmp	result1, local01 wz
249a4     84 00 90 5D |  if_ne	jmp	#LR__3504
249a8     12 29 E2 FA | 	rdword	local06, local04
249ac     0F 15 E2 FA | 	rdword	arg02, local01
249b0     0A 29 02 F1 | 	add	local06, arg02
249b4     12 29 52 FC | 	wrword	local06, local04
249b8     0F 29 02 F6 | 	mov	local06, local01
249bc     02 28 06 F1 | 	add	local06, #2
249c0     14 01 58 FC | 	wrword	#0, local06
249c4     0F 13 02 F6 | 	mov	arg01, local01
249c8     09 27 EA FA | 	rdword	local05, arg01 wz
249cc     00 FA 05 A6 |  if_e	mov	result1, #0
249d0     04 26 66 50 |  if_ne	shl	local05, #4
249d4     13 13 02 51 |  if_ne	add	arg01, local05
249d8     09 FB 01 56 |  if_ne	mov	result1, arg01
249dc     FD 28 02 F6 | 	mov	local06, result1
249e0     11 29 52 F2 | 	cmps	local06, local03 wc
249e4     20 00 90 3D |  if_ae	jmp	#LR__3503
249e8     12 15 0A F6 | 	mov	arg02, local04 wz
249ec     00 FA 05 A6 |  if_e	mov	result1, #0
249f0     10 15 82 51 |  if_ne	sub	arg02, local02
249f4     04 14 46 50 |  if_ne	shr	arg02, #4
249f8     0A FB 01 56 |  if_ne	mov	result1, arg02
249fc     14 15 02 F6 | 	mov	arg02, local06
24a00     04 14 06 F1 | 	add	arg02, #4
24a04     0A FB 51 FC | 	wrword	result1, arg02
24a08                 | LR__3503
24a08     0F 15 02 F6 | 	mov	arg02, local01
24a0c     06 14 06 F1 | 	add	arg02, #6
24a10     12 FD 01 F6 | 	mov	result2, local04
24a14     0A 15 E2 FA | 	rdword	arg02, arg02
24a18     06 FC 05 F1 | 	add	result2, #6
24a1c     FE 14 52 FC | 	wrword	arg02, result2
24a20     06 1E 06 F1 | 	add	local01, #6
24a24     0F 01 58 FC | 	wrword	#0, local01
24a28     12 1F 02 F6 | 	mov	local01, local04
24a2c                 | LR__3504
24a2c                 | LR__3505
24a2c     0F 13 02 F6 | 	mov	arg01, local01
24a30     09 27 EA FA | 	rdword	local05, arg01 wz
24a34     00 FA 05 A6 |  if_e	mov	result1, #0
24a38     04 26 66 50 |  if_ne	shl	local05, #4
24a3c     13 13 02 51 |  if_ne	add	arg01, local05
24a40     09 FB 01 56 |  if_ne	mov	result1, arg01
24a44     FD 14 0A F6 | 	mov	arg02, result1 wz
24a48     B8 00 90 AD |  if_e	jmp	#LR__3507
24a4c     11 15 52 F2 | 	cmps	arg02, local03 wc
24a50     B0 00 90 3D |  if_ae	jmp	#LR__3507
24a54     0A 13 02 F6 | 	mov	arg01, arg02
24a58     00 FA 05 F6 | 	mov	result1, #0
24a5c     02 12 06 F1 | 	add	arg01, #2
24a60     09 13 E2 FA | 	rdword	arg01, arg01
24a64     36 00 00 FF 
24a68     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24a6c     01 FA 65 A6 |  if_e	neg	result1, #1
24a70     00 FA 0D F2 | 	cmp	result1, #0 wz
24a74     8C 00 90 AD |  if_e	jmp	#LR__3507
24a78     0F 25 02 F6 | 	mov	local04, local01
24a7c     12 29 E2 FA | 	rdword	local06, local04
24a80     0A 13 02 F6 | 	mov	arg01, arg02
24a84     09 1F E2 FA | 	rdword	local01, arg01
24a88     0F 29 02 F1 | 	add	local06, local01
24a8c     12 29 52 FC | 	wrword	local06, local04
24a90     09 29 02 F6 | 	mov	local06, arg01
24a94     06 28 06 F1 | 	add	local06, #6
24a98     12 1F 02 F6 | 	mov	local01, local04
24a9c     14 29 E2 FA | 	rdword	local06, local06
24aa0     06 1E 06 F1 | 	add	local01, #6
24aa4     0F 29 52 FC | 	wrword	local06, local01
24aa8     09 29 02 F6 | 	mov	local06, arg01
24aac     02 28 06 F1 | 	add	local06, #2
24ab0     14 55 59 FC | 	wrword	#170, local06
24ab4     09 29 02 F6 | 	mov	local06, arg01
24ab8     06 28 06 F1 | 	add	local06, #6
24abc     14 01 58 FC | 	wrword	#0, local06
24ac0     09 27 EA FA | 	rdword	local05, arg01 wz
24ac4     00 FA 05 A6 |  if_e	mov	result1, #0
24ac8     04 26 66 50 |  if_ne	shl	local05, #4
24acc     13 13 02 51 |  if_ne	add	arg01, local05
24ad0     09 FB 01 56 |  if_ne	mov	result1, arg01
24ad4     FD 28 0A F6 | 	mov	local06, result1 wz
24ad8     28 00 90 AD |  if_e	jmp	#LR__3506
24adc     11 29 52 F2 | 	cmps	local06, local03 wc
24ae0     20 00 90 3D |  if_ae	jmp	#LR__3506
24ae4     12 15 0A F6 | 	mov	arg02, local04 wz
24ae8     00 FA 05 A6 |  if_e	mov	result1, #0
24aec     10 15 82 51 |  if_ne	sub	arg02, local02
24af0     04 14 46 50 |  if_ne	shr	arg02, #4
24af4     0A FB 01 56 |  if_ne	mov	result1, arg02
24af8     14 25 02 F6 | 	mov	local04, local06
24afc     04 24 06 F1 | 	add	local04, #4
24b00     12 FB 51 FC | 	wrword	result1, local04
24b04                 | LR__3506
24b04                 | LR__3507
24b04     14 FB 01 F6 | 	mov	result1, local06
24b08     A7 F0 03 F6 | 	mov	ptra, fp
24b0c     B2 00 A0 FD | 	call	#popregs_
24b10                 | __system___gc_dofree_ret
24b10     2D 00 64 FD | 	ret
24b14                 | 
24b14                 | __system___gc_docollect
24b14     05 4A 05 F6 | 	mov	COUNT_, #5
24b18     A8 00 A0 FD | 	call	#pushregs_
24b1c     B8 F9 BF FD | 	call	#__system___gc_ptrs
24b20     FE 1E 02 F6 | 	mov	local01, result2
24b24     FD 20 02 F6 | 	mov	local02, result1
24b28     10 13 02 F6 | 	mov	arg01, local02
24b2c     09 23 EA FA | 	rdword	local03, arg01 wz
24b30     00 FA 05 A6 |  if_e	mov	result1, #0
24b34     04 22 66 50 |  if_ne	shl	local03, #4
24b38     11 13 02 51 |  if_ne	add	arg01, local03
24b3c     09 FB 01 56 |  if_ne	mov	result1, arg01
24b40     FD 24 0A F6 | 	mov	local04, result1 wz
24b44     00 FA 05 F6 | 	mov	result1, #0
24b48     01 FA 61 FD | 	cogid	result1
24b4c     FD 26 02 F6 | 	mov	local05, result1
24b50     48 00 90 AD |  if_e	jmp	#LR__3512
24b54     97 22 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
24b58                 | LR__3510
24b58     0F 25 52 F2 | 	cmps	local04, local01 wc
24b5c     3C 00 90 3D |  if_ae	jmp	#LR__3512
24b60     12 15 02 F6 | 	mov	arg02, local04
24b64     02 14 06 F1 | 	add	arg02, #2
24b68     0A 15 E2 FA | 	rdword	arg02, arg02
24b6c     20 14 26 F5 | 	andn	arg02, #32
24b70     12 13 02 F6 | 	mov	arg01, local04
24b74     02 12 06 F1 | 	add	arg01, #2
24b78     09 15 52 FC | 	wrword	arg02, arg01
24b7c     12 13 02 F6 | 	mov	arg01, local04
24b80     09 23 EA FA | 	rdword	local03, arg01 wz
24b84     00 FA 05 A6 |  if_e	mov	result1, #0
24b88     04 22 66 50 |  if_ne	shl	local03, #4
24b8c     11 13 02 51 |  if_ne	add	arg01, local03
24b90     09 FB 01 56 |  if_ne	mov	result1, arg01
24b94     FD 24 0A F6 | 	mov	local04, result1 wz
24b98     BC FF 9F 5D |  if_ne	jmp	#LR__3510
24b9c                 | LR__3511
24b9c                 | LR__3512
24b9c     00 22 06 F6 | 	mov	local03, #0
24ba0     00 12 06 F6 | 	mov	arg01, #0
24ba4     7C BC BF FD | 	call	#__system____topofstack
24ba8     FD 14 02 F6 | 	mov	arg02, result1
24bac     11 13 02 F6 | 	mov	arg01, local03
24bb0     90 00 B0 FD | 	call	#__system___gc_markhub
24bb4     1C 01 B0 FD | 	call	#__system___gc_markcog
24bb8     10 13 02 F6 | 	mov	arg01, local02
24bbc     09 23 EA FA | 	rdword	local03, arg01 wz
24bc0     00 FA 05 A6 |  if_e	mov	result1, #0
24bc4     04 22 66 50 |  if_ne	shl	local03, #4
24bc8     11 13 02 51 |  if_ne	add	arg01, local03
24bcc     09 FB 01 56 |  if_ne	mov	result1, arg01
24bd0     FD 20 0A F6 | 	mov	local02, result1 wz
24bd4     60 00 90 AD |  if_e	jmp	#LR__3516
24bd8                 | LR__3513
24bd8     10 25 02 F6 | 	mov	local04, local02
24bdc     12 13 02 F6 | 	mov	arg01, local04
24be0     09 23 EA FA | 	rdword	local03, arg01 wz
24be4     00 FA 05 A6 |  if_e	mov	result1, #0
24be8     04 22 66 50 |  if_ne	shl	local03, #4
24bec     11 13 02 51 |  if_ne	add	arg01, local03
24bf0     09 FB 01 56 |  if_ne	mov	result1, arg01
24bf4     FD 20 02 F6 | 	mov	local02, result1
24bf8     12 15 02 F6 | 	mov	arg02, local04
24bfc     02 14 06 F1 | 	add	arg02, #2
24c00     0A 15 E2 FA | 	rdword	arg02, arg02
24c04     20 14 CE F7 | 	test	arg02, #32 wz
24c08     10 14 CE A7 |  if_e	test	arg02, #16 wz
24c0c     1C 00 90 5D |  if_ne	jmp	#LR__3515
24c10     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24c14     13 15 0A F2 | 	cmp	arg02, local05 wz
24c18     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24c1c     0C 00 90 5D |  if_ne	jmp	#LR__3514
24c20     12 13 02 F6 | 	mov	arg01, local04
24c24     84 FC BF FD | 	call	#__system___gc_dofree
24c28     FD 20 02 F6 | 	mov	local02, result1
24c2c                 | LR__3514
24c2c                 | LR__3515
24c2c     00 20 0E F2 | 	cmp	local02, #0 wz
24c30     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24c34     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3513
24c38                 | LR__3516
24c38     A7 F0 03 F6 | 	mov	ptra, fp
24c3c     B2 00 A0 FD | 	call	#popregs_
24c40                 | __system___gc_docollect_ret
24c40     2D 00 64 FD | 	ret
24c44                 | 
24c44                 | __system___gc_markhub
24c44     04 4A 05 F6 | 	mov	COUNT_, #4
24c48     A8 00 A0 FD | 	call	#pushregs_
24c4c     09 1F 02 F6 | 	mov	local01, arg01
24c50     0A 21 02 F6 | 	mov	local02, arg02
24c54     80 F8 BF FD | 	call	#__system___gc_ptrs
24c58     FD 22 02 F6 | 	mov	local03, result1
24c5c     FE 24 02 F6 | 	mov	local04, result2
24c60                 | LR__3520
24c60     10 1F 52 F2 | 	cmps	local01, local02 wc
24c64     60 00 90 3D |  if_ae	jmp	#LR__3521
24c68     0F 17 02 FB | 	rdlong	arg03, local01
24c6c     04 1E 06 F1 | 	add	local01, #4
24c70     12 15 02 F6 | 	mov	arg02, local04
24c74     11 13 02 F6 | 	mov	arg01, local03
24c78     8C FB BF FD | 	call	#__system___gc_isvalidptr
24c7c     FD 16 0A F6 | 	mov	arg03, result1 wz
24c80     DC FF 9F AD |  if_e	jmp	#LR__3520
24c84     0B 13 02 F6 | 	mov	arg01, arg03
24c88     00 FA 05 F6 | 	mov	result1, #0
24c8c     02 12 06 F1 | 	add	arg01, #2
24c90     09 13 E2 FA | 	rdword	arg01, arg01
24c94     36 00 00 FF 
24c98     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24c9c     01 FA 65 A6 |  if_e	neg	result1, #1
24ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
24ca4     B8 FF 9F 5D |  if_ne	jmp	#LR__3520
24ca8     0B FD 01 F6 | 	mov	result2, arg03
24cac     02 FC 05 F1 | 	add	result2, #2
24cb0     FE FC E1 FA | 	rdword	result2, result2
24cb4     0F FC 25 F5 | 	andn	result2, #15
24cb8     2E FC 45 F5 | 	or	result2, #46
24cbc     02 16 06 F1 | 	add	arg03, #2
24cc0     0B FD 51 FC | 	wrword	result2, arg03
24cc4     98 FF 9F FD | 	jmp	#LR__3520
24cc8                 | LR__3521
24cc8     A7 F0 03 F6 | 	mov	ptra, fp
24ccc     B2 00 A0 FD | 	call	#popregs_
24cd0                 | __system___gc_markhub_ret
24cd0     2D 00 64 FD | 	ret
24cd4                 | 
24cd4                 | __system___gc_markcog
24cd4     04 4A 05 F6 | 	mov	COUNT_, #4
24cd8     A8 00 A0 FD | 	call	#pushregs_
24cdc     F8 F7 BF FD | 	call	#__system___gc_ptrs
24ce0     FD 1E 02 F6 | 	mov	local01, result1
24ce4     FE 20 02 F6 | 	mov	local02, result2
24ce8     EF 23 06 F6 | 	mov	local03, #495
24cec                 | LR__3530
24cec                 | 	'.live	local03
24cec     00 22 96 F9 | 	alts	local03, #0
24cf0     11 25 02 F6 | 	mov	local04, local03
24cf4     0F 13 02 F6 | 	mov	arg01, local01
24cf8     10 15 02 F6 | 	mov	arg02, local02
24cfc     12 17 02 F6 | 	mov	arg03, local04
24d00     04 FB BF FD | 	call	#__system___gc_isvalidptr
24d04     00 FA 0D F2 | 	cmp	result1, #0 wz
24d08     18 00 90 AD |  if_e	jmp	#LR__3531
24d0c     FD 24 02 F6 | 	mov	local04, result1
24d10     02 24 06 F1 | 	add	local04, #2
24d14     12 25 E2 FA | 	rdword	local04, local04
24d18     20 24 46 F5 | 	or	local04, #32
24d1c     02 FA 05 F1 | 	add	result1, #2
24d20     FD 24 52 FC | 	wrword	local04, result1
24d24                 | LR__3531
24d24     01 22 86 F1 | 	sub	local03, #1
24d28     00 22 56 F2 | 	cmps	local03, #0 wc
24d2c     BC FF 9F 3D |  if_ae	jmp	#LR__3530
24d30     A7 F0 03 F6 | 	mov	ptra, fp
24d34     B2 00 A0 FD | 	call	#popregs_
24d38                 | __system___gc_markcog_ret
24d38     2D 00 64 FD | 	ret
24d3c                 | 
24d3c                 | __system__opendir
24d3c     06 4A 05 F6 | 	mov	COUNT_, #6
24d40     A8 00 A0 FD | 	call	#pushregs_
24d44     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24d48     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24d4c     09 15 02 F6 | 	mov	arg02, arg01
24d50     0F 13 02 F6 | 	mov	arg01, local01
24d54     00 16 06 F6 | 	mov	arg03, #0
24d58     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24d5c     84 C2 BF FD | 	call	#__system____getvfsforfile
24d60     FD 20 0A F6 | 	mov	local02, result1 wz
24d64     10 00 90 AD |  if_e	jmp	#LR__3540
24d68     28 20 06 F1 | 	add	local02, #40
24d6c     10 17 0A FB | 	rdlong	arg03, local02 wz
24d70     28 20 86 F1 | 	sub	local02, #40
24d74     14 00 90 5D |  if_ne	jmp	#LR__3541
24d78                 | LR__3540
24d78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24d7c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24d80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24d84     00 FA 05 F6 | 	mov	result1, #0
24d88     90 00 90 FD | 	jmp	#LR__3543
24d8c                 | LR__3541
24d8c     5C 12 06 F6 | 	mov	arg01, #92
24d90     10 14 06 F6 | 	mov	arg02, #16
24d94     C0 F9 BF FD | 	call	#__system___gc_doalloc
24d98     FD 22 0A F6 | 	mov	local03, result1 wz
24d9c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24da0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24da4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24da8     00 FA 05 A6 |  if_e	mov	result1, #0
24dac     6C 00 90 AD |  if_e	jmp	#LR__3543
24db0     28 20 06 F1 | 	add	local02, #40
24db4     10 25 02 FB | 	rdlong	local04, local02
24db8     12 27 02 F6 | 	mov	local05, local04
24dbc     28 20 86 F1 | 	sub	local02, #40
24dc0     13 26 46 F7 | 	zerox	local05, #19
24dc4     14 24 46 F0 | 	shr	local04, #20
24dc8     02 24 66 F0 | 	shl	local04, #2
24dcc     ED 24 02 F1 | 	add	local04, __methods__
24dd0     12 25 02 FB | 	rdlong	local04, local04
24dd4     11 13 02 F6 | 	mov	arg01, local03
24dd8     0F 15 02 F6 | 	mov	arg02, local01
24ddc     F2 28 02 F6 | 	mov	local06, objptr
24de0     13 E5 01 F6 | 	mov	objptr, local05
24de4     2D 24 62 FD | 	call	local04
24de8     14 E5 01 F6 | 	mov	objptr, local06
24dec     FD 16 0A F6 | 	mov	arg03, result1 wz
24df0     20 00 90 AD |  if_e	jmp	#LR__3542
24df4     00 16 4E F2 | 	cmps	arg03, #0 wz
24df8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24dfc     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24e00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e04     11 13 02 F6 | 	mov	arg01, local03
24e08     58 FA BF FD | 	call	#__system___gc_free
24e0c     00 FA 05 F6 | 	mov	result1, #0
24e10     08 00 90 FD | 	jmp	#LR__3543
24e14                 | LR__3542
24e14     11 21 62 FC | 	wrlong	local02, local03
24e18     11 FB 01 F6 | 	mov	result1, local03
24e1c                 | LR__3543
24e1c     A7 F0 03 F6 | 	mov	ptra, fp
24e20     B2 00 A0 FD | 	call	#popregs_
24e24                 | __system__opendir_ret
24e24     2D 00 64 FD | 	ret
24e28                 | 
24e28                 | __system__closedir
24e28     04 4A 05 F6 | 	mov	COUNT_, #4
24e2c     A8 00 A0 FD | 	call	#pushregs_
24e30     09 1F 02 F6 | 	mov	local01, arg01
24e34     0F 13 02 FB | 	rdlong	arg01, local01
24e38     2C 12 06 F1 | 	add	arg01, #44
24e3c     09 21 02 FB | 	rdlong	local02, arg01
24e40     10 23 02 F6 | 	mov	local03, local02
24e44     13 22 46 F7 | 	zerox	local03, #19
24e48     14 20 46 F0 | 	shr	local02, #20
24e4c     02 20 66 F0 | 	shl	local02, #2
24e50     ED 20 02 F1 | 	add	local02, __methods__
24e54     10 21 02 FB | 	rdlong	local02, local02
24e58     0F 13 02 F6 | 	mov	arg01, local01
24e5c     F2 24 02 F6 | 	mov	local04, objptr
24e60     11 E5 01 F6 | 	mov	objptr, local03
24e64     2D 20 62 FD | 	call	local02
24e68     12 E5 01 F6 | 	mov	objptr, local04
24e6c     FD 24 02 F6 | 	mov	local04, result1
24e70     0F 13 02 F6 | 	mov	arg01, local01
24e74     EC F9 BF FD | 	call	#__system___gc_free
24e78     00 24 4E F2 | 	cmps	local04, #0 wz
24e7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e80     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
24e84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e88     01 FA 65 56 |  if_ne	neg	result1, #1
24e8c     00 FA 05 A6 |  if_e	mov	result1, #0
24e90     A7 F0 03 F6 | 	mov	ptra, fp
24e94     B2 00 A0 FD | 	call	#popregs_
24e98                 | __system__closedir_ret
24e98     2D 00 64 FD | 	ret
24e9c                 | 
24e9c                 | __system__readdir
24e9c     04 4A 05 F6 | 	mov	COUNT_, #4
24ea0     A8 00 A0 FD | 	call	#pushregs_
24ea4     09 15 0A FB | 	rdlong	arg02, arg01 wz
24ea8     08 12 06 F1 | 	add	arg01, #8
24eac     09 1F 02 F6 | 	mov	local01, arg01
24eb0     08 12 86 F1 | 	sub	arg01, #8
24eb4     00 FA 05 A6 |  if_e	mov	result1, #0
24eb8     5C 00 90 AD |  if_e	jmp	#LR__3551
24ebc     30 14 06 F1 | 	add	arg02, #48
24ec0     0A 21 02 FB | 	rdlong	local02, arg02
24ec4     10 23 02 F6 | 	mov	local03, local02
24ec8     13 22 46 F7 | 	zerox	local03, #19
24ecc     14 20 46 F0 | 	shr	local02, #20
24ed0     02 20 66 F0 | 	shl	local02, #2
24ed4     ED 20 02 F1 | 	add	local02, __methods__
24ed8     10 21 02 FB | 	rdlong	local02, local02
24edc     0F 15 02 F6 | 	mov	arg02, local01
24ee0     F2 24 02 F6 | 	mov	local04, objptr
24ee4     11 E5 01 F6 | 	mov	objptr, local03
24ee8     2D 20 62 FD | 	call	local02
24eec     12 E5 01 F6 | 	mov	objptr, local04
24ef0     00 FA 4D F2 | 	cmps	result1, #0 wz
24ef4     1C 00 90 AD |  if_e	jmp	#LR__3550
24ef8     01 FA 55 F2 | 	cmps	result1, #1 wc
24efc     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
24f00     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24f04     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
24f08     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24f0c     00 FA 05 F6 | 	mov	result1, #0
24f10     04 00 90 FD | 	jmp	#LR__3551
24f14                 | LR__3550
24f14     0F FB 01 F6 | 	mov	result1, local01
24f18                 | LR__3551
24f18     A7 F0 03 F6 | 	mov	ptra, fp
24f1c     B2 00 A0 FD | 	call	#popregs_
24f20                 | __system__readdir_ret
24f20     2D 00 64 FD | 	ret
24f24                 | 
24f24                 | __system___openraw
24f24     15 4A 05 F6 | 	mov	COUNT_, #21
24f28     A8 00 A0 FD | 	call	#pushregs_
24f2c     09 1F 02 F6 | 	mov	local01, arg01
24f30     0A 21 02 F6 | 	mov	local02, arg02
24f34     0B 23 02 F6 | 	mov	local03, arg03
24f38     0C 25 02 F6 | 	mov	local04, arg04
24f3c     04 26 06 F6 | 	mov	local05, #4
24f40     0F 29 02 F6 | 	mov	local06, local01
24f44     00 2A 06 F6 | 	mov	local07, #0
24f48     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24f4c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
24f50     16 13 02 F6 | 	mov	arg01, local08
24f54     10 15 02 F6 | 	mov	arg02, local02
24f58     00 16 06 F6 | 	mov	arg03, #0
24f5c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24f60     80 C0 BF FD | 	call	#__system____getvfsforfile
24f64     FD 2E 0A F6 | 	mov	local09, result1 wz
24f68     10 00 90 AD |  if_e	jmp	#LR__3560
24f6c     20 2E 06 F1 | 	add	local09, #32
24f70     17 FB 09 FB | 	rdlong	result1, local09 wz
24f74     20 2E 86 F1 | 	sub	local09, #32
24f78     14 00 90 5D |  if_ne	jmp	#LR__3561
24f7c                 | LR__3560
24f7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f80     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24f84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f88     01 FA 65 F6 | 	neg	result1, #1
24f8c     8C 02 90 FD | 	jmp	#LR__3574
24f90                 | LR__3561
24f90     14 13 02 F6 | 	mov	arg01, local06
24f94     00 14 06 F6 | 	mov	arg02, #0
24f98     34 16 06 F6 | 	mov	arg03, #52
24f9c     09 31 02 F6 | 	mov	local10, arg01
24fa0     98 00 A0 FD | 	call	#\builtin_bytefill_
24fa4     20 2E 06 F1 | 	add	local09, #32
24fa8     17 33 02 FB | 	rdlong	local11, local09
24fac     19 35 02 F6 | 	mov	local12, local11
24fb0     19 37 02 F6 | 	mov	local13, local11
24fb4     20 2E 86 F1 | 	sub	local09, #32
24fb8     1B 39 02 F6 | 	mov	local14, local13
24fbc     13 34 46 F7 | 	zerox	local12, #19
24fc0     14 38 46 F0 | 	shr	local14, #20
24fc4     02 38 66 F0 | 	shl	local14, #2
24fc8     ED 38 02 F1 | 	add	local14, __methods__
24fcc     1C 39 02 FB | 	rdlong	local14, local14
24fd0     14 3B 02 F6 | 	mov	local15, local06
24fd4     16 3D 02 F6 | 	mov	local16, local08
24fd8     11 3F 02 F6 | 	mov	local17, local03
24fdc     1D 13 02 F6 | 	mov	arg01, local15
24fe0     1E 15 02 F6 | 	mov	arg02, local16
24fe4     1F 17 02 F6 | 	mov	arg03, local17
24fe8     F2 40 02 F6 | 	mov	local18, objptr
24fec     1A E5 01 F6 | 	mov	objptr, local12
24ff0     2D 38 62 FD | 	call	local14
24ff4     20 E5 01 F6 | 	mov	objptr, local18
24ff8     FD 42 0A F6 | 	mov	local19, result1 wz
24ffc     04 22 CE 57 |  if_ne	test	local03, #4 wz
25000     58 00 90 AD |  if_e	jmp	#LR__3562
25004     24 2E 06 F1 | 	add	local09, #36
25008     17 33 02 FB | 	rdlong	local11, local09
2500c     19 35 02 F6 | 	mov	local12, local11
25010     19 37 02 F6 | 	mov	local13, local11
25014     24 2E 86 F1 | 	sub	local09, #36
25018     1B 39 02 F6 | 	mov	local14, local13
2501c     13 34 46 F7 | 	zerox	local12, #19
25020     14 38 46 F0 | 	shr	local14, #20
25024     02 38 66 F0 | 	shl	local14, #2
25028     ED 38 02 F1 | 	add	local14, __methods__
2502c     1C 39 02 FB | 	rdlong	local14, local14
25030     14 3B 02 F6 | 	mov	local15, local06
25034     16 3D 02 F6 | 	mov	local16, local08
25038     12 3F 02 F6 | 	mov	local17, local04
2503c     1D 13 02 F6 | 	mov	arg01, local15
25040     1E 15 02 F6 | 	mov	arg02, local16
25044     1F 17 02 F6 | 	mov	arg03, local17
25048     F2 40 02 F6 | 	mov	local18, objptr
2504c     1A E5 01 F6 | 	mov	objptr, local12
25050     2D 38 62 FD | 	call	local14
25054     20 E5 01 F6 | 	mov	objptr, local18
25058     FD 42 02 F6 | 	mov	local19, result1
2505c                 | LR__3562
2505c     00 42 0E F2 | 	cmp	local19, #0 wz
25060     8C 01 90 5D |  if_ne	jmp	#LR__3572
25064     11 45 02 F6 | 	mov	local20, local03
25068     03 44 0E F5 | 	and	local20, #3 wz
2506c     02 26 46 55 |  if_ne	or	local05, #2
25070     01 44 0E F2 | 	cmp	local20, #1 wz
25074     01 26 46 55 |  if_ne	or	local05, #1
25078     20 22 CE F7 | 	test	local03, #32 wz
2507c     C0 26 46 55 |  if_ne	or	local05, #192
25080     08 28 06 F1 | 	add	local06, #8
25084     14 27 62 FC | 	wrlong	local05, local06
25088     0C 28 06 F1 | 	add	local06, #12
2508c     14 47 0A FB | 	rdlong	local21, local06 wz
25090     14 28 86 F1 | 	sub	local06, #20
25094     18 00 90 5D |  if_ne	jmp	#LR__3563
25098     04 2E 06 F1 | 	add	local09, #4
2509c     17 47 02 FB | 	rdlong	local21, local09
250a0     04 2E 86 F1 | 	sub	local09, #4
250a4     14 28 06 F1 | 	add	local06, #20
250a8     14 47 62 FC | 	wrlong	local21, local06
250ac     14 28 86 F1 | 	sub	local06, #20
250b0                 | LR__3563
250b0     18 28 06 F1 | 	add	local06, #24
250b4     14 47 0A FB | 	rdlong	local21, local06 wz
250b8     18 28 86 F1 | 	sub	local06, #24
250bc     18 00 90 5D |  if_ne	jmp	#LR__3564
250c0     08 2E 06 F1 | 	add	local09, #8
250c4     17 47 02 FB | 	rdlong	local21, local09
250c8     08 2E 86 F1 | 	sub	local09, #8
250cc     18 28 06 F1 | 	add	local06, #24
250d0     14 47 62 FC | 	wrlong	local21, local06
250d4     18 28 86 F1 | 	sub	local06, #24
250d8                 | LR__3564
250d8     24 28 06 F1 | 	add	local06, #36
250dc     14 47 0A FB | 	rdlong	local21, local06 wz
250e0     24 28 86 F1 | 	sub	local06, #36
250e4     17 47 02 AB |  if_e	rdlong	local21, local09
250e8     24 28 06 A1 |  if_e	add	local06, #36
250ec     14 47 62 AC |  if_e	wrlong	local21, local06
250f0     24 28 86 A1 |  if_e	sub	local06, #36
250f4     28 28 06 F1 | 	add	local06, #40
250f8     14 47 0A FB | 	rdlong	local21, local06 wz
250fc     28 28 86 F1 | 	sub	local06, #40
25100     18 00 90 5D |  if_ne	jmp	#LR__3565
25104     10 2E 06 F1 | 	add	local09, #16
25108     17 47 02 FB | 	rdlong	local21, local09
2510c     10 2E 86 F1 | 	sub	local09, #16
25110     28 28 06 F1 | 	add	local06, #40
25114     14 47 62 FC | 	wrlong	local21, local06
25118     28 28 86 F1 | 	sub	local06, #40
2511c                 | LR__3565
2511c     30 28 06 F1 | 	add	local06, #48
25120     14 47 0A FB | 	rdlong	local21, local06 wz
25124     30 28 86 F1 | 	sub	local06, #48
25128     18 00 90 5D |  if_ne	jmp	#LR__3566
2512c     0C 2E 06 F1 | 	add	local09, #12
25130     17 47 02 FB | 	rdlong	local21, local09
25134     0C 2E 86 F1 | 	sub	local09, #12
25138     30 28 06 F1 | 	add	local06, #48
2513c     14 47 62 FC | 	wrlong	local21, local06
25140     30 28 86 F1 | 	sub	local06, #48
25144                 | LR__3566
25144     1C 28 06 F1 | 	add	local06, #28
25148     14 47 0A FB | 	rdlong	local21, local06 wz
2514c     1C 28 86 F1 | 	sub	local06, #28
25150     1C 00 90 5D |  if_ne	jmp	#LR__3567
25154     01 2A 06 F6 | 	mov	local07, #1
25158     F2 12 02 F6 | 	mov	arg01, objptr
2515c     00 C8 04 FF 
25160     00 12 46 F5 | 	or	arg01, ##160432128
25164     1C 28 06 F1 | 	add	local06, #28
25168     14 13 62 FC | 	wrlong	arg01, local06
2516c     1C 28 86 F1 | 	sub	local06, #28
25170                 | LR__3567
25170     20 28 06 F1 | 	add	local06, #32
25174     14 47 0A FB | 	rdlong	local21, local06 wz
25178     20 28 86 F1 | 	sub	local06, #32
2517c     1C 00 90 5D |  if_ne	jmp	#LR__3568
25180     01 2A 06 F6 | 	mov	local07, #1
25184     F2 12 02 F6 | 	mov	arg01, objptr
25188     00 D0 04 FF 
2518c     00 12 46 F5 | 	or	arg01, ##161480704
25190     20 28 06 F1 | 	add	local06, #32
25194     14 13 62 FC | 	wrlong	arg01, local06
25198     20 28 86 F1 | 	sub	local06, #32
2519c                 | LR__3568
2519c     2C 28 06 F1 | 	add	local06, #44
251a0     14 47 0A FB | 	rdlong	local21, local06 wz
251a4     2C 28 86 F1 | 	sub	local06, #44
251a8     44 00 90 5D |  if_ne	jmp	#LR__3571
251ac     14 2E 06 F1 | 	add	local09, #20
251b0     17 47 0A FB | 	rdlong	local21, local09 wz
251b4     14 2E 86 F1 | 	sub	local09, #20
251b8     18 00 90 AD |  if_e	jmp	#LR__3569
251bc     14 2E 06 F1 | 	add	local09, #20
251c0     17 47 02 FB | 	rdlong	local21, local09
251c4     2C 28 06 F1 | 	add	local06, #44
251c8     14 47 62 FC | 	wrlong	local21, local06
251cc     2C 28 86 F1 | 	sub	local06, #44
251d0     1C 00 90 FD | 	jmp	#LR__3570
251d4                 | LR__3569
251d4     01 2A 06 F6 | 	mov	local07, #1
251d8     F2 12 02 F6 | 	mov	arg01, objptr
251dc     00 D8 04 FF 
251e0     00 12 46 F5 | 	or	arg01, ##162529280
251e4     2C 28 06 F1 | 	add	local06, #44
251e8     14 13 62 FC | 	wrlong	arg01, local06
251ec     2C 28 86 F1 | 	sub	local06, #44
251f0                 | LR__3570
251f0                 | LR__3571
251f0                 | LR__3572
251f0     00 2A 0E F2 | 	cmp	local07, #0 wz
251f4     14 13 02 56 |  if_ne	mov	arg01, local06
251f8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
251fc     00 42 0E F2 | 	cmp	local19, #0 wz
25200     00 12 06 A6 |  if_e	mov	arg01, #0
25204     10 00 90 5D |  if_ne	jmp	#LR__3573
25208     00 12 4E F2 | 	cmps	arg01, #0 wz
2520c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25210     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25214     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25218                 | LR__3573
25218     21 FB 01 F6 | 	mov	result1, local19
2521c                 | LR__3574
2521c     A7 F0 03 F6 | 	mov	ptra, fp
25220     B2 00 A0 FD | 	call	#popregs_
25224                 | __system___openraw_ret
25224     2D 00 64 FD | 	ret
25228                 | 
25228                 | __system___closeraw
25228     05 4A 05 F6 | 	mov	COUNT_, #5
2522c     A8 00 A0 FD | 	call	#pushregs_
25230     09 1F 02 F6 | 	mov	local01, arg01
25234     00 20 06 F6 | 	mov	local02, #0
25238     08 1E 06 F1 | 	add	local01, #8
2523c     0F FB 09 FB | 	rdlong	result1, local01 wz
25240     08 1E 86 F1 | 	sub	local01, #8
25244     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25248     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2524c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25250     01 FA 65 A6 |  if_e	neg	result1, #1
25254     A8 00 90 AD |  if_e	jmp	#LR__3582
25258     2C 1E 06 F1 | 	add	local01, #44
2525c     0F FB 09 FB | 	rdlong	result1, local01 wz
25260     2C 1E 86 F1 | 	sub	local01, #44
25264     38 00 90 AD |  if_e	jmp	#LR__3580
25268     2C 1E 06 F1 | 	add	local01, #44
2526c     0F 23 02 FB | 	rdlong	local03, local01
25270     11 25 02 F6 | 	mov	local04, local03
25274     2C 1E 86 F1 | 	sub	local01, #44
25278     13 24 46 F7 | 	zerox	local04, #19
2527c     14 22 46 F0 | 	shr	local03, #20
25280     02 22 66 F0 | 	shl	local03, #2
25284     ED 22 02 F1 | 	add	local03, __methods__
25288     11 23 02 FB | 	rdlong	local03, local03
2528c     0F 13 02 F6 | 	mov	arg01, local01
25290     F2 26 02 F6 | 	mov	local05, objptr
25294     12 E5 01 F6 | 	mov	objptr, local04
25298     2D 22 62 FD | 	call	local03
2529c     13 E5 01 F6 | 	mov	objptr, local05
252a0                 | LR__3580
252a0     24 1E 06 F1 | 	add	local01, #36
252a4     0F 27 0A FB | 	rdlong	local05, local01 wz
252a8     24 1E 86 F1 | 	sub	local01, #36
252ac     3C 00 90 AD |  if_e	jmp	#LR__3581
252b0     24 1E 06 F1 | 	add	local01, #36
252b4     0F 23 02 FB | 	rdlong	local03, local01
252b8     11 25 02 F6 | 	mov	local04, local03
252bc     24 1E 86 F1 | 	sub	local01, #36
252c0     13 24 46 F7 | 	zerox	local04, #19
252c4     14 22 46 F0 | 	shr	local03, #20
252c8     02 22 66 F0 | 	shl	local03, #2
252cc     ED 22 02 F1 | 	add	local03, __methods__
252d0     11 23 02 FB | 	rdlong	local03, local03
252d4     0F 13 02 F6 | 	mov	arg01, local01
252d8     F2 26 02 F6 | 	mov	local05, objptr
252dc     12 E5 01 F6 | 	mov	objptr, local04
252e0     2D 22 62 FD | 	call	local03
252e4     13 E5 01 F6 | 	mov	objptr, local05
252e8     FD 20 02 F6 | 	mov	local02, result1
252ec                 | LR__3581
252ec     0F 13 02 F6 | 	mov	arg01, local01
252f0     00 14 06 F6 | 	mov	arg02, #0
252f4     34 16 06 F6 | 	mov	arg03, #52
252f8     98 00 A0 FD | 	call	#\builtin_bytefill_
252fc     10 FB 01 F6 | 	mov	result1, local02
25300                 | LR__3582
25300     A7 F0 03 F6 | 	mov	ptra, fp
25304     B2 00 A0 FD | 	call	#popregs_
25308                 | __system___closeraw_ret
25308     2D 00 64 FD | 	ret
2530c                 | 
2530c                 | __system___vfs_open_sdcardx
2530c     0B 4A 05 F6 | 	mov	COUNT_, #11
25310     A8 00 A0 FD | 	call	#pushregs_
25314     09 23 02 F6 | 	mov	local03, arg01
25318     0A 25 02 F6 | 	mov	local04, arg02
2531c     0B 27 02 F6 | 	mov	local05, arg03
25320     0C 29 02 F6 | 	mov	local06, arg04
25324     01 00 00 FF 
25328     24 12 06 F6 | 	mov	arg01, ##548
2532c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
25330     FD 2A 02 F6 | 	mov	local07, result1
25334     01 00 00 FF 
25338     34 12 06 F6 | 	mov	arg01, ##564
2533c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
25340     FD 2C 02 F6 | 	mov	local08, result1
25344     11 19 02 F6 | 	mov	arg04, local03
25348     1F 18 C6 F0 | 	sar	arg04, #31
2534c     11 17 02 F6 | 	mov	arg03, local03
25350     01 12 06 F6 | 	mov	arg01, #1
25354     00 14 06 F6 | 	mov	arg02, #0
25358     EC DB BF FD | 	call	#__system___int64_shl
2535c     FD 1E 02 F6 | 	mov	local01, result1
25360     FE 2E 02 F6 | 	mov	local09, result2
25364     12 19 02 F6 | 	mov	arg04, local04
25368     1F 18 C6 F0 | 	sar	arg04, #31
2536c     12 17 02 F6 | 	mov	arg03, local04
25370     01 12 06 F6 | 	mov	arg01, #1
25374     00 14 06 F6 | 	mov	arg02, #0
25378     CC DB BF FD | 	call	#__system___int64_shl
2537c     FD 1E 42 F5 | 	or	local01, result1
25380     FE 2E 42 F5 | 	or	local09, result2
25384     13 19 02 F6 | 	mov	arg04, local05
25388     1F 18 C6 F0 | 	sar	arg04, #31
2538c     13 17 02 F6 | 	mov	arg03, local05
25390     01 12 06 F6 | 	mov	arg01, #1
25394     00 14 06 F6 | 	mov	arg02, #0
25398     AC DB BF FD | 	call	#__system___int64_shl
2539c     FD 1E 42 F5 | 	or	local01, result1
253a0     FE 2E 42 F5 | 	or	local09, result2
253a4     14 19 02 F6 | 	mov	arg04, local06
253a8     1F 18 C6 F0 | 	sar	arg04, #31
253ac     14 17 02 F6 | 	mov	arg03, local06
253b0     01 12 06 F6 | 	mov	arg01, #1
253b4     00 14 06 F6 | 	mov	arg02, #0
253b8     8C DB BF FD | 	call	#__system___int64_shl
253bc     17 15 02 F6 | 	mov	arg02, local09
253c0     FD 1E 42 F5 | 	or	local01, result1
253c4     0A FD 41 F5 | 	or	result2, arg02
253c8     FE 20 02 F6 | 	mov	local02, result2
253cc     0F 13 02 F6 | 	mov	arg01, local01
253d0     10 15 02 F6 | 	mov	arg02, local02
253d4     A8 DB BF FD | 	call	#__system___usepins
253d8     00 FA 0D F2 | 	cmp	result1, #0 wz
253dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
253e0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
253e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
253e8     00 FA 05 A6 |  if_e	mov	result1, #0
253ec     B4 00 90 AD |  if_e	jmp	#LR__3592
253f0     0F 31 02 F6 | 	mov	local10, local01
253f4     10 2F 02 F6 | 	mov	local09, local02
253f8     01 00 00 FF 
253fc     08 2A 06 F1 | 	add	local07, ##520
25400     15 31 62 FC | 	wrlong	local10, local07
25404     04 2A 06 F1 | 	add	local07, #4
25408     15 2F 62 FC | 	wrlong	local09, local07
2540c     01 00 00 FF 
25410     0C 2A 86 F1 | 	sub	local07, ##524
25414     14 1B 02 F6 | 	mov	arg05, local06
25418     00 12 06 F6 | 	mov	arg01, #0
2541c     11 15 02 F6 | 	mov	arg02, local03
25420     12 17 02 F6 | 	mov	arg03, local04
25424     13 19 02 F6 | 	mov	arg04, local05
25428     F2 30 02 F6 | 	mov	local10, objptr
2542c     15 E5 01 F6 | 	mov	objptr, local07
25430     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
25434     18 E5 01 F6 | 	mov	objptr, local10
25438     FD 32 0A F6 | 	mov	local11, result1 wz
2543c     24 00 90 5D |  if_ne	jmp	#LR__3590
25440     80 01 00 FF 
25444     FE 14 06 F6 | 	mov	arg02, ##@LR__5007
25448     16 13 02 F6 | 	mov	arg01, local08
2544c     00 16 06 F6 | 	mov	arg03, #0
25450     F2 32 02 F6 | 	mov	local11, objptr
25454     15 E5 01 F6 | 	mov	objptr, local07
25458     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2545c     19 E5 01 F6 | 	mov	objptr, local11
25460     FD 32 02 F6 | 	mov	local11, result1
25464                 | LR__3590
25464     00 32 0E F2 | 	cmp	local11, #0 wz
25468     24 00 90 AD |  if_e	jmp	#LR__3591
2546c     0F 13 02 F6 | 	mov	arg01, local01
25470     10 15 02 F6 | 	mov	arg02, local02
25474     5C DB BF FD | 	call	#__system___freepins
25478     19 13 6A F6 | 	neg	arg01, local11 wz
2547c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25480     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25484     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25488     00 FA 05 F6 | 	mov	result1, #0
2548c     14 00 90 FD | 	jmp	#LR__3592
25490                 | LR__3591
25490     15 13 02 F6 | 	mov	arg01, local07
25494     F2 32 02 F6 | 	mov	local11, objptr
25498     15 E5 01 F6 | 	mov	objptr, local07
2549c     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
254a0     19 E5 01 F6 | 	mov	objptr, local11
254a4                 | LR__3592
254a4     A7 F0 03 F6 | 	mov	ptra, fp
254a8     B2 00 A0 FD | 	call	#popregs_
254ac                 | __system___vfs_open_sdcardx_ret
254ac     2D 00 64 FD | 	ret
254b0                 | 
254b0                 | __system____default_getc
254b0     03 4A 05 F6 | 	mov	COUNT_, #3
254b4     A8 00 A0 FD | 	call	#pushregs_
254b8     09 1F 02 F6 | 	mov	local01, arg01
254bc     0F 21 02 FB | 	rdlong	local02, local01
254c0     08 20 06 F1 | 	add	local02, #8
254c4     10 23 02 FB | 	rdlong	local03, local02
254c8     02 22 CE F7 | 	test	local03, #2 wz
254cc     0F 13 02 56 |  if_ne	mov	arg01, local01
254d0     00 01 B0 5D |  if_ne	call	#__system____default_flush
254d4     10 23 02 FB | 	rdlong	local03, local02
254d8     01 22 46 F5 | 	or	local03, #1
254dc     10 23 62 FC | 	wrlong	local03, local02
254e0     08 20 86 F1 | 	sub	local02, #8
254e4     10 23 0A FB | 	rdlong	local03, local02 wz
254e8     0C 00 90 5D |  if_ne	jmp	#LR__3600
254ec     0F 13 02 F6 | 	mov	arg01, local01
254f0     68 18 B0 FD | 	call	#__system____default_filbuf
254f4     FD 22 02 F6 | 	mov	local03, result1
254f8                 | LR__3600
254f8     01 22 56 F2 | 	cmps	local03, #1 wc
254fc     01 FA 65 C6 |  if_b	neg	result1, #1
25500     1C 00 90 CD |  if_b	jmp	#LR__3601
25504     01 22 86 F1 | 	sub	local03, #1
25508     10 23 62 FC | 	wrlong	local03, local02
2550c     04 20 06 F1 | 	add	local02, #4
25510     10 23 02 FB | 	rdlong	local03, local02
25514     11 FB C1 FA | 	rdbyte	result1, local03
25518     01 22 06 F1 | 	add	local03, #1
2551c     10 23 62 FC | 	wrlong	local03, local02
25520                 | LR__3601
25520     A7 F0 03 F6 | 	mov	ptra, fp
25524     B2 00 A0 FD | 	call	#popregs_
25528                 | __system____default_getc_ret
25528     2D 00 64 FD | 	ret
2552c                 | 
2552c                 | __system____default_putc
2552c     06 4A 05 F6 | 	mov	COUNT_, #6
25530     A8 00 A0 FD | 	call	#pushregs_
25534     09 1F 02 F6 | 	mov	local01, arg01
25538     0A 21 02 F6 | 	mov	local02, arg02
2553c     10 23 02 FB | 	rdlong	local03, local02
25540     08 22 06 F1 | 	add	local03, #8
25544     11 FB 01 FB | 	rdlong	result1, local03
25548     01 FA CD F7 | 	test	result1, #1 wz
2554c     10 13 02 56 |  if_ne	mov	arg01, local02
25550     80 00 B0 5D |  if_ne	call	#__system____default_flush
25554     11 25 02 FB | 	rdlong	local04, local03
25558     02 24 46 F5 | 	or	local04, #2
2555c     11 25 62 FC | 	wrlong	local04, local03
25560     08 22 86 F1 | 	sub	local03, #8
25564     11 27 02 FB | 	rdlong	local05, local03
25568     10 22 06 F1 | 	add	local03, #16
2556c     11 15 02 FB | 	rdlong	arg02, local03
25570     10 22 86 F1 | 	sub	local03, #16
25574     13 FB 01 F6 | 	mov	result1, local05
25578     0A FB 01 F1 | 	add	result1, arg02
2557c     FD 1E 42 FC | 	wrbyte	local01, result1
25580     0F 1F E2 F8 | 	getbyte	local01, local01, #0
25584     01 26 06 F1 | 	add	local05, #1
25588     11 27 62 FC | 	wrlong	local05, local03
2558c     06 20 06 F1 | 	add	local02, #6
25590     10 29 EA FA | 	rdword	local06, local02 wz
25594     06 20 86 F1 | 	sub	local02, #6
25598     0C 22 06 51 |  if_ne	add	local03, #12
2559c     11 25 02 5B |  if_ne	rdlong	local04, local03
255a0     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
255a4     0C 00 90 AD |  if_e	jmp	#LR__3610
255a8     0A 1E 0E F2 | 	cmp	local01, #10 wz
255ac     01 28 0E A2 |  if_e	cmp	local06, #1 wz
255b0     10 00 90 5D |  if_ne	jmp	#LR__3611
255b4                 | LR__3610
255b4     10 13 02 F6 | 	mov	arg01, local02
255b8     18 00 B0 FD | 	call	#__system____default_flush
255bc     00 FA 0D F2 | 	cmp	result1, #0 wz
255c0     01 1E 66 56 |  if_ne	neg	local01, #1
255c4                 | LR__3611
255c4     0F FB 01 F6 | 	mov	result1, local01
255c8     A7 F0 03 F6 | 	mov	ptra, fp
255cc     B2 00 A0 FD | 	call	#popregs_
255d0                 | __system____default_putc_ret
255d0     2D 00 64 FD | 	ret
255d4                 | 
255d4                 | __system____default_flush
255d4     06 4A 05 F6 | 	mov	COUNT_, #6
255d8     A8 00 A0 FD | 	call	#pushregs_
255dc     09 1F 02 F6 | 	mov	local01, arg01
255e0     0F 21 02 FB | 	rdlong	local02, local01
255e4     10 23 02 FB | 	rdlong	local03, local02
255e8     08 20 06 F1 | 	add	local02, #8
255ec     10 FB 01 FB | 	rdlong	result1, local02
255f0     08 20 86 F1 | 	sub	local02, #8
255f4     02 FA CD F7 | 	test	result1, #2 wz
255f8     D0 00 90 AD |  if_e	jmp	#LR__3622
255fc     01 22 56 F2 | 	cmps	local03, #1 wc
25600     20 01 90 CD |  if_b	jmp	#LR__3624
25604     08 1E 06 F1 | 	add	local01, #8
25608     0F FB 01 FB | 	rdlong	result1, local01
2560c     08 1E 86 F1 | 	sub	local01, #8
25610     40 FA CD F7 | 	test	result1, #64 wz
25614     68 00 90 AD |  if_e	jmp	#LR__3621
25618     08 1E 06 F1 | 	add	local01, #8
2561c     0F 17 02 FB | 	rdlong	arg03, local01
25620     08 1E 86 F1 | 	sub	local01, #8
25624     80 16 CE F7 | 	test	arg03, #128 wz
25628     54 00 90 AD |  if_e	jmp	#LR__3620
2562c     30 1E 06 F1 | 	add	local01, #48
25630     0F 25 02 FB | 	rdlong	local04, local01
25634     12 27 02 F6 | 	mov	local05, local04
25638     30 1E 86 F1 | 	sub	local01, #48
2563c     13 26 46 F7 | 	zerox	local05, #19
25640     14 24 46 F0 | 	shr	local04, #20
25644     02 24 66 F0 | 	shl	local04, #2
25648     ED 24 02 F1 | 	add	local04, __methods__
2564c     12 25 02 FB | 	rdlong	local04, local04
25650     0F 13 02 F6 | 	mov	arg01, local01
25654     00 14 06 F6 | 	mov	arg02, #0
25658     02 16 06 F6 | 	mov	arg03, #2
2565c     F2 28 02 F6 | 	mov	local06, objptr
25660     13 E5 01 F6 | 	mov	objptr, local05
25664     2D 24 62 FD | 	call	local04
25668     14 E5 01 F6 | 	mov	objptr, local06
2566c     08 1E 06 F1 | 	add	local01, #8
25670     0F 29 02 FB | 	rdlong	local06, local01
25674     80 28 26 F5 | 	andn	local06, #128
25678     0F 29 62 FC | 	wrlong	local06, local01
2567c     08 1E 86 F1 | 	sub	local01, #8
25680                 | LR__3620
25680                 | LR__3621
25680     18 1E 06 F1 | 	add	local01, #24
25684     0F 25 02 FB | 	rdlong	local04, local01
25688     12 27 02 F6 | 	mov	local05, local04
2568c     18 1E 86 F1 | 	sub	local01, #24
25690     13 26 46 F7 | 	zerox	local05, #19
25694     14 24 46 F0 | 	shr	local04, #20
25698     02 24 66 F0 | 	shl	local04, #2
2569c     ED 24 02 F1 | 	add	local04, __methods__
256a0     12 25 02 FB | 	rdlong	local04, local04
256a4     10 20 06 F1 | 	add	local02, #16
256a8     10 15 02 FB | 	rdlong	arg02, local02
256ac     10 20 86 F1 | 	sub	local02, #16
256b0     0F 13 02 F6 | 	mov	arg01, local01
256b4     11 17 02 F6 | 	mov	arg03, local03
256b8     F2 28 02 F6 | 	mov	local06, objptr
256bc     13 E5 01 F6 | 	mov	objptr, local05
256c0     2D 24 62 FD | 	call	local04
256c4     14 E5 01 F6 | 	mov	objptr, local06
256c8     58 00 90 FD | 	jmp	#LR__3624
256cc                 | LR__3622
256cc     08 20 06 F1 | 	add	local02, #8
256d0     10 29 02 FB | 	rdlong	local06, local02
256d4     08 20 86 F1 | 	sub	local02, #8
256d8     01 28 CE F7 | 	test	local06, #1 wz
256dc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
256e0     40 00 90 AD |  if_e	jmp	#LR__3623
256e4     30 1E 06 F1 | 	add	local01, #48
256e8     0F 25 02 FB | 	rdlong	local04, local01
256ec     12 27 02 F6 | 	mov	local05, local04
256f0     30 1E 86 F1 | 	sub	local01, #48
256f4     13 26 46 F7 | 	zerox	local05, #19
256f8     14 24 46 F0 | 	shr	local04, #20
256fc     02 24 66 F0 | 	shl	local04, #2
25700     ED 24 02 F1 | 	add	local04, __methods__
25704     12 25 02 FB | 	rdlong	local04, local04
25708     0F 13 02 F6 | 	mov	arg01, local01
2570c     11 15 62 F6 | 	neg	arg02, local03
25710     01 16 06 F6 | 	mov	arg03, #1
25714     F2 28 02 F6 | 	mov	local06, objptr
25718     13 E5 01 F6 | 	mov	objptr, local05
2571c     2D 24 62 FD | 	call	local04
25720     14 E5 01 F6 | 	mov	objptr, local06
25724                 | LR__3623
25724                 | LR__3624
25724     10 01 68 FC | 	wrlong	#0, local02
25728     04 20 06 F1 | 	add	local02, #4
2572c     10 01 68 FC | 	wrlong	#0, local02
25730     04 20 06 F1 | 	add	local02, #4
25734     10 01 68 FC | 	wrlong	#0, local02
25738     00 FA 05 F6 | 	mov	result1, #0
2573c     A7 F0 03 F6 | 	mov	ptra, fp
25740     B2 00 A0 FD | 	call	#popregs_
25744                 | __system____default_flush_ret
25744     2D 00 64 FD | 	ret
25748                 | 
25748                 | __system____default_buffer_init
25748     02 4A 05 F6 | 	mov	COUNT_, #2
2574c     A8 00 A0 FD | 	call	#pushregs_
25750     09 1F 02 F6 | 	mov	local01, arg01
25754     0F 21 02 FB | 	rdlong	local02, local01
25758     0F 13 02 F6 | 	mov	arg01, local01
2575c     34 03 B0 FD | 	call	#__system___isatty
25760     00 FA 0D F2 | 	cmp	result1, #0 wz
25764     06 1E 06 51 |  if_ne	add	local01, #6
25768     0F 0B 58 5C |  if_ne	wrword	#5, local01
2576c     06 1E 06 A1 |  if_e	add	local01, #6
25770     0F 0D 58 AC |  if_e	wrword	#6, local01
25774     14 20 06 F1 | 	add	local02, #20
25778     10 1F 02 F6 | 	mov	local01, local02
2577c     04 20 86 F1 | 	sub	local02, #4
25780     10 1F 62 FC | 	wrlong	local01, local02
25784     04 20 86 F1 | 	sub	local02, #4
25788     02 00 80 FF 
2578c     10 01 68 FC | 	wrlong	##1024, local02
25790     00 FA 05 F6 | 	mov	result1, #0
25794     A7 F0 03 F6 | 	mov	ptra, fp
25798     B2 00 A0 FD | 	call	#popregs_
2579c                 | __system____default_buffer_init_ret
2579c     2D 00 64 FD | 	ret
257a0                 | 
257a0                 | __system__stat
257a0     04 4A 05 F6 | 	mov	COUNT_, #4
257a4     A8 00 A0 FD | 	call	#pushregs_
257a8     0A 1F 02 F6 | 	mov	local01, arg02
257ac     84 E7 05 F1 | 	add	ptr___system__dat__, #388
257b0     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
257b4     09 15 02 F6 | 	mov	arg02, arg01
257b8     10 13 02 F6 | 	mov	arg01, local02
257bc     00 16 06 F6 | 	mov	arg03, #0
257c0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
257c4     1C B8 BF FD | 	call	#__system____getvfsforfile
257c8     FD 22 0A F6 | 	mov	local03, result1 wz
257cc     10 00 90 AD |  if_e	jmp	#LR__3630
257d0     34 22 06 F1 | 	add	local03, #52
257d4     11 17 0A FB | 	rdlong	arg03, local03 wz
257d8     34 22 86 F1 | 	sub	local03, #52
257dc     14 00 90 5D |  if_ne	jmp	#LR__3631
257e0                 | LR__3630
257e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
257e4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
257e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
257ec     01 FA 65 F6 | 	neg	result1, #1
257f0     68 00 90 FD | 	jmp	#LR__3632
257f4                 | LR__3631
257f4     0F 13 02 F6 | 	mov	arg01, local01
257f8     00 14 06 F6 | 	mov	arg02, #0
257fc     30 16 06 F6 | 	mov	arg03, #48
25800     09 25 02 F6 | 	mov	local04, arg01
25804     98 00 A0 FD | 	call	#\builtin_bytefill_
25808     12 FB 01 F6 | 	mov	result1, local04
2580c     10 13 CA FA | 	rdbyte	arg01, local02 wz
25810     08 1E 06 A1 |  if_e	add	local01, #8
25814     08 00 80 AF 
25818     0F FF 6B AC |  if_e	wrlong	##4607, local01
2581c     00 FA 05 A6 |  if_e	mov	result1, #0
25820     38 00 90 AD |  if_e	jmp	#LR__3632
25824     34 22 06 F1 | 	add	local03, #52
25828     11 23 02 FB | 	rdlong	local03, local03
2582c     11 25 02 F6 | 	mov	local04, local03
25830     13 22 46 F7 | 	zerox	local03, #19
25834     14 24 46 F0 | 	shr	local04, #20
25838     02 24 66 F0 | 	shl	local04, #2
2583c     ED 24 02 F1 | 	add	local04, __methods__
25840     12 25 02 FB | 	rdlong	local04, local04
25844     10 13 02 F6 | 	mov	arg01, local02
25848     0F 15 02 F6 | 	mov	arg02, local01
2584c     F2 20 02 F6 | 	mov	local02, objptr
25850     11 E5 01 F6 | 	mov	objptr, local03
25854     2D 24 62 FD | 	call	local04
25858     10 E5 01 F6 | 	mov	objptr, local02
2585c                 | LR__3632
2585c     A7 F0 03 F6 | 	mov	ptra, fp
25860     B2 00 A0 FD | 	call	#popregs_
25864                 | __system__stat_ret
25864     2D 00 64 FD | 	ret
25868                 | 
25868                 | __system__write
25868     0A 12 16 F2 | 	cmp	arg01, #10 wc
2586c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25870     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25874     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25878     01 FA 65 36 |  if_ae	neg	result1, #1
2587c     20 00 90 3D |  if_ae	jmp	#LR__3640
25880     34 12 06 FD | 	qmul	arg01, #52
25884     02 00 00 FF 
25888     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
2588c     18 12 62 FD | 	getqx	arg01
25890     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25894     02 00 00 FF 
25898     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
2589c     0C 10 B0 FD | 	call	#__system___vfswrite
258a0                 | LR__3640
258a0                 | __system__write_ret
258a0     2D 00 64 FD | 	ret
258a4                 | 
258a4                 | __system__read
258a4     0A 12 16 F2 | 	cmp	arg01, #10 wc
258a8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
258ac     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
258b0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
258b4     01 FA 65 36 |  if_ae	neg	result1, #1
258b8     20 00 90 3D |  if_ae	jmp	#LR__3650
258bc     34 12 06 FD | 	qmul	arg01, #52
258c0     02 00 00 FF 
258c4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
258c8     18 12 62 FD | 	getqx	arg01
258cc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
258d0     02 00 00 FF 
258d4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
258d8     98 11 B0 FD | 	call	#__system___vfsread
258dc                 | LR__3650
258dc                 | __system__read_ret
258dc     2D 00 64 FD | 	ret
258e0                 | 
258e0                 | __system__close
258e0     0A 12 16 F2 | 	cmp	arg01, #10 wc
258e4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
258e8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
258ec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
258f0     01 FA 65 36 |  if_ae	neg	result1, #1
258f4     20 00 90 3D |  if_ae	jmp	#LR__3660
258f8     34 12 06 FD | 	qmul	arg01, #52
258fc     02 00 00 FF 
25900     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25904     18 12 62 FD | 	getqx	arg01
25908     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2590c     02 00 00 FF 
25910     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25914     10 F9 BF FD | 	call	#__system___closeraw
25918                 | LR__3660
25918                 | __system__close_ret
25918     2D 00 64 FD | 	ret
2591c                 | 
2591c                 | __system__lseek
2591c     06 4A 05 F6 | 	mov	COUNT_, #6
25920     A8 00 A0 FD | 	call	#pushregs_
25924     0A 12 16 F2 | 	cmp	arg01, #10 wc
25928     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2592c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25930     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25934     01 FA 65 36 |  if_ae	neg	result1, #1
25938     C4 00 90 3D |  if_ae	jmp	#LR__3671
2593c     34 12 06 FD | 	qmul	arg01, #52
25940     02 00 00 FF 
25944     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25948     18 1E 62 FD | 	getqx	local01
2594c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25950     30 1E 06 F1 | 	add	local01, #48
25954     0F 13 0A FB | 	rdlong	arg01, local01 wz
25958     30 1E 86 F1 | 	sub	local01, #48
2595c     02 00 00 FF 
25960     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25964     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25968     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2596c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25970     01 FA 65 A6 |  if_e	neg	result1, #1
25974     88 00 90 AD |  if_e	jmp	#LR__3671
25978     08 1E 06 F1 | 	add	local01, #8
2597c     0F 21 02 FB | 	rdlong	local02, local01
25980     08 1E 86 F1 | 	sub	local01, #8
25984     40 20 CE F7 | 	test	local02, #64 wz
25988     08 1E 06 51 |  if_ne	add	local01, #8
2598c     0F 21 02 5B |  if_ne	rdlong	local02, local01
25990     80 20 46 55 |  if_ne	or	local02, #128
25994     0F 21 62 5C |  if_ne	wrlong	local02, local01
25998     08 1E 86 51 |  if_ne	sub	local01, #8
2599c     30 1E 06 F1 | 	add	local01, #48
259a0     0F 23 02 FB | 	rdlong	local03, local01
259a4     11 25 02 F6 | 	mov	local04, local03
259a8     30 1E 86 F1 | 	sub	local01, #48
259ac     13 24 46 F7 | 	zerox	local04, #19
259b0     14 22 46 F0 | 	shr	local03, #20
259b4     02 22 66 F0 | 	shl	local03, #2
259b8     ED 22 02 F1 | 	add	local03, __methods__
259bc     11 23 02 FB | 	rdlong	local03, local03
259c0     0F 13 02 F6 | 	mov	arg01, local01
259c4     F2 26 02 F6 | 	mov	local05, objptr
259c8     12 E5 01 F6 | 	mov	objptr, local04
259cc     2D 22 62 FD | 	call	local03
259d0     13 E5 01 F6 | 	mov	objptr, local05
259d4     FD 28 02 F6 | 	mov	local06, result1
259d8     00 28 56 F2 | 	cmps	local06, #0 wc
259dc     1C 00 90 3D |  if_ae	jmp	#LR__3670
259e0     14 13 6A F6 | 	neg	arg01, local06 wz
259e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
259e8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
259ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
259f0     01 FA 65 56 |  if_ne	neg	result1, #1
259f4     00 FA 05 A6 |  if_e	mov	result1, #0
259f8     04 00 90 FD | 	jmp	#LR__3671
259fc                 | LR__3670
259fc     14 FB 01 F6 | 	mov	result1, local06
25a00                 | LR__3671
25a00     A7 F0 03 F6 | 	mov	ptra, fp
25a04     B2 00 A0 FD | 	call	#popregs_
25a08                 | __system__lseek_ret
25a08     2D 00 64 FD | 	ret
25a0c                 | 
25a0c                 | __system___ioctl
25a0c     03 4A 05 F6 | 	mov	COUNT_, #3
25a10     A8 00 A0 FD | 	call	#pushregs_
25a14     00 12 4E F2 | 	cmps	arg01, #0 wz
25a18     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25a1c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25a20     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25a24     01 FA 65 A6 |  if_e	neg	result1, #1
25a28     5C 00 90 AD |  if_e	jmp	#LR__3681
25a2c     28 12 06 F1 | 	add	arg01, #40
25a30     09 1F 02 FB | 	rdlong	local01, arg01
25a34     0F 21 02 F6 | 	mov	local02, local01
25a38     28 12 86 F1 | 	sub	arg01, #40
25a3c     13 20 46 F7 | 	zerox	local02, #19
25a40     14 1E 46 F0 | 	shr	local01, #20
25a44     02 1E 66 F0 | 	shl	local01, #2
25a48     ED 1E 02 F1 | 	add	local01, __methods__
25a4c     0F 1F 02 FB | 	rdlong	local01, local01
25a50     F2 22 02 F6 | 	mov	local03, objptr
25a54     10 E5 01 F6 | 	mov	objptr, local02
25a58     2D 1E 62 FD | 	call	local01
25a5c     11 E5 01 F6 | 	mov	objptr, local03
25a60     FD 12 0A F6 | 	mov	arg01, result1 wz
25a64     1C 00 90 AD |  if_e	jmp	#LR__3680
25a68     00 12 4E F2 | 	cmps	arg01, #0 wz
25a6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25a70     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25a74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25a78     01 FA 65 56 |  if_ne	neg	result1, #1
25a7c     00 FA 05 A6 |  if_e	mov	result1, #0
25a80     04 00 90 FD | 	jmp	#LR__3681
25a84                 | LR__3680
25a84     00 FA 05 F6 | 	mov	result1, #0
25a88                 | LR__3681
25a88     A7 F0 03 F6 | 	mov	ptra, fp
25a8c     B2 00 A0 FD | 	call	#popregs_
25a90                 | __system___ioctl_ret
25a90     2D 00 64 FD | 	ret
25a94                 | 
25a94                 | __system___isatty
25a94     00 4A 05 F6 | 	mov	COUNT_, #0
25a98     A8 00 A0 FD | 	call	#pushregs_
25a9c     0C F0 07 F1 | 	add	ptra, #12
25aa0     04 4E 05 F1 | 	add	fp, #4
25aa4     A7 12 62 FC | 	wrlong	arg01, fp
25aa8     04 4E 05 F1 | 	add	fp, #4
25aac     A7 16 02 F6 | 	mov	arg03, fp
25ab0     08 4E 85 F1 | 	sub	fp, #8
25ab4     00 15 06 F6 | 	mov	arg02, #256
25ab8     50 FF BF FD | 	call	#__system___ioctl
25abc     00 FA 0D F2 | 	cmp	result1, #0 wz
25ac0     01 FA 05 A6 |  if_e	mov	result1, #1
25ac4     00 FA 05 56 |  if_ne	mov	result1, #0
25ac8     A7 F0 03 F6 | 	mov	ptra, fp
25acc     B2 00 A0 FD | 	call	#popregs_
25ad0                 | __system___isatty_ret
25ad0     2D 00 64 FD | 	ret
25ad4                 | 
25ad4                 | __system____getftab
25ad4     0A 12 16 F2 | 	cmp	arg01, #10 wc
25ad8     34 12 06 CD |  if_b	qmul	arg01, #52
25adc     00 FA 05 36 |  if_ae	mov	result1, #0
25ae0     02 00 00 CF 
25ae4     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25ae8     18 FA 61 CD |  if_b	getqx	result1
25aec     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25af0     02 00 00 CF 
25af4     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25af8                 | __system____getftab_ret
25af8     2D 00 64 FD | 	ret
25afc                 | 
25afc                 | __system__strncpy
25afc     09 01 02 F6 | 	mov	_var01, arg01
25b00                 | LR__3690
25b00     01 16 86 F1 | 	sub	arg03, #1
25b04     00 16 56 F2 | 	cmps	arg03, #0 wc
25b08     18 00 90 CD |  if_b	jmp	#LR__3691
25b0c     0A FB C1 FA | 	rdbyte	result1, arg02
25b10     00 FB 41 FC | 	wrbyte	result1, _var01
25b14     01 14 06 F1 | 	add	arg02, #1
25b18     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25b1c     01 00 06 F1 | 	add	_var01, #1
25b20     DC FF 9F 5D |  if_ne	jmp	#LR__3690
25b24                 | LR__3691
25b24     97 0C 48 FB | 	callpa	#(@LR__3693-@LR__3692)>>2,fcache_load_ptr_
25b28                 | LR__3692
25b28     01 16 86 F1 | 	sub	arg03, #1
25b2c     00 16 56 F2 | 	cmps	arg03, #0 wc
25b30     00 03 02 36 |  if_ae	mov	_var02, _var01
25b34     01 00 06 31 |  if_ae	add	_var01, #1
25b38     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25b3c     E8 FF 9F 3D |  if_ae	jmp	#LR__3692
25b40                 | LR__3693
25b40     09 FB 01 F6 | 	mov	result1, arg01
25b44                 | __system__strncpy_ret
25b44     2D 00 64 FD | 	ret
25b48                 | 
25b48                 | __system__strncat
25b48     00 14 4E F2 | 	cmps	arg02, #0 wz
25b4c     50 00 90 AD |  if_e	jmp	#LR__3704
25b50     01 16 16 F2 | 	cmp	arg03, #1 wc
25b54     48 00 90 CD |  if_b	jmp	#LR__3704
25b58     09 01 02 F6 | 	mov	_var01, arg01
25b5c     97 1E 48 FB | 	callpa	#(@LR__3702-@LR__3700)>>2,fcache_load_ptr_
25b60                 | LR__3700
25b60     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25b64     01 00 06 51 |  if_ne	add	_var01, #1
25b68     F4 FF 9F 5D |  if_ne	jmp	#LR__3700
25b6c     0B 03 02 F6 | 	mov	_var02, arg03
25b70                 | LR__3701
25b70     0A 05 C2 FA | 	rdbyte	_var03, arg02
25b74     02 07 02 F6 | 	mov	_var04, _var03
25b78     07 06 4E F7 | 	zerox	_var04, #7 wz
25b7c     01 14 06 F1 | 	add	arg02, #1
25b80     18 00 90 AD |  if_e	jmp	#LR__3703
25b84     01 02 86 F1 | 	sub	_var02, #1
25b88     00 02 56 F2 | 	cmps	_var02, #0 wc
25b8c     00 07 02 36 |  if_ae	mov	_var04, _var01
25b90     01 00 06 31 |  if_ae	add	_var01, #1
25b94     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25b98     D4 FF 9F 3D |  if_ae	jmp	#LR__3701
25b9c                 | LR__3702
25b9c                 | LR__3703
25b9c     00 01 48 FC | 	wrbyte	#0, _var01
25ba0                 | LR__3704
25ba0     09 FB 01 F6 | 	mov	result1, arg01
25ba4                 | __system__strncat_ret
25ba4     2D 00 64 FD | 	ret
25ba8                 | 
25ba8                 | __system__strncmp
25ba8     09 01 0A F6 | 	mov	_var01, arg01 wz
25bac     14 00 90 5D |  if_ne	jmp	#LR__3710
25bb0     00 14 0E F2 | 	cmp	arg02, #0 wz
25bb4     01 02 66 56 |  if_ne	neg	_var02, #1
25bb8     00 02 06 A6 |  if_e	mov	_var02, #0
25bbc     01 FB 01 F6 | 	mov	result1, _var02
25bc0     74 00 90 FD | 	jmp	#__system__strncmp_ret
25bc4                 | LR__3710
25bc4     00 14 0E F2 | 	cmp	arg02, #0 wz
25bc8     01 FA 05 A6 |  if_e	mov	result1, #1
25bcc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25bd0     0B 05 02 F6 | 	mov	_var03, arg03
25bd4     97 16 48 FB | 	callpa	#(@LR__3712-@LR__3711)>>2,fcache_load_ptr_
25bd8                 | LR__3711
25bd8     00 07 C2 FA | 	rdbyte	_var04, _var01
25bdc     0A 09 02 F6 | 	mov	_var05, arg02
25be0     04 0B C2 FA | 	rdbyte	_var06, _var05
25be4     01 04 86 F1 | 	sub	_var03, #1
25be8     00 04 56 F2 | 	cmps	_var03, #0 wc
25bec     01 00 06 F1 | 	add	_var01, #1
25bf0     01 14 06 F1 | 	add	arg02, #1
25bf4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25bf8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3713
25bfc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25c00     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3711
25c04                 | LR__3712
25c04                 | LR__3713
25c04     00 04 56 F2 | 	cmps	_var03, #0 wc
25c08     00 FA 05 C6 |  if_b	mov	result1, #0
25c0c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25c10     05 07 0A F2 | 	cmp	_var04, _var06 wz
25c14     00 FA 05 A6 |  if_e	mov	result1, #0
25c18     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25c1c     00 06 0E F2 | 	cmp	_var04, #0 wz
25c20     01 FA 65 A6 |  if_e	neg	result1, #1
25c24     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25c28     00 0A 0E F2 | 	cmp	_var06, #0 wz
25c2c     01 FA 05 A6 |  if_e	mov	result1, #1
25c30     03 FB 01 56 |  if_ne	mov	result1, _var04
25c34     05 FB 81 51 |  if_ne	sub	result1, _var06
25c38                 | __system__strncmp_ret
25c38     2D 00 64 FD | 	ret
25c3c                 | 
25c3c                 | __system____root_opendir
25c3c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25c40     04 12 06 F1 | 	add	arg01, #4
25c44     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25c48     00 FA 05 F6 | 	mov	result1, #0
25c4c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25c50                 | __system____root_opendir_ret
25c50     2D 00 64 FD | 	ret
25c54                 | 
25c54                 | __system____root_readdir
25c54     03 4A 05 F6 | 	mov	COUNT_, #3
25c58     A8 00 A0 FD | 	call	#pushregs_
25c5c     09 1F 02 F6 | 	mov	local01, arg01
25c60     0A 21 02 F6 | 	mov	local02, arg02
25c64     04 1E 06 F1 | 	add	local01, #4
25c68     0F 23 02 FB | 	rdlong	local03, local01
25c6c     04 1E 86 F1 | 	sub	local01, #4
25c70                 | LR__3720
25c70     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25c74     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25c78     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25c7c     01 FA 65 A6 |  if_e	neg	result1, #1
25c80     48 00 90 AD |  if_e	jmp	#LR__3721
25c84     11 17 0A FB | 	rdlong	arg03, local03 wz
25c88     04 22 06 A1 |  if_e	add	local03, #4
25c8c     E0 FF 9F AD |  if_e	jmp	#LR__3720
25c90     11 15 02 FB | 	rdlong	arg02, local03
25c94     01 14 06 F1 | 	add	arg02, #1
25c98     10 13 02 F6 | 	mov	arg01, local02
25c9c     40 16 06 F6 | 	mov	arg03, #64
25ca0     58 FE BF FD | 	call	#__system__strncpy
25ca4     50 20 06 F1 | 	add	local02, #80
25ca8     10 03 48 FC | 	wrbyte	#1, local02
25cac     08 20 86 F1 | 	sub	local02, #8
25cb0     10 01 68 FC | 	wrlong	#0, local02
25cb4     04 20 06 F1 | 	add	local02, #4
25cb8     10 01 68 FC | 	wrlong	#0, local02
25cbc     04 22 06 F1 | 	add	local03, #4
25cc0     04 1E 06 F1 | 	add	local01, #4
25cc4     0F 23 62 FC | 	wrlong	local03, local01
25cc8     00 FA 05 F6 | 	mov	result1, #0
25ccc                 | LR__3721
25ccc     A7 F0 03 F6 | 	mov	ptra, fp
25cd0     B2 00 A0 FD | 	call	#popregs_
25cd4                 | __system____root_readdir_ret
25cd4     2D 00 64 FD | 	ret
25cd8                 | 
25cd8                 | __system____root_closedir
25cd8     00 FA 05 F6 | 	mov	result1, #0
25cdc                 | __system____root_closedir_ret
25cdc     2D 00 64 FD | 	ret
25ce0                 | 
25ce0                 | __system____root_stat
25ce0     0A 01 02 F6 | 	mov	_var01, arg02
25ce4     00 13 02 F6 | 	mov	arg01, _var01
25ce8     00 14 06 F6 | 	mov	arg02, #0
25cec     30 16 06 F6 | 	mov	arg03, #48
25cf0     98 00 A0 FD | 	call	#\builtin_bytefill_
25cf4     08 00 06 F1 | 	add	_var01, #8
25cf8     08 00 80 FF 
25cfc     00 FF 6B FC | 	wrlong	##4607, _var01
25d00     00 FA 05 F6 | 	mov	result1, #0
25d04                 | __system____root_stat_ret
25d04     2D 00 64 FD | 	ret
25d08                 | 
25d08                 | __system___normalizeName
25d08     00 00 06 F6 | 	mov	_var01, #0
25d0c     09 03 02 F6 | 	mov	_var02, arg01
25d10     01 05 02 F6 | 	mov	_var03, _var02
25d14                 | LR__3730
25d14     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25d18     5C 01 90 AD |  if_e	jmp	#LR__3749
25d1c     00 00 0E F2 | 	cmp	_var01, #0 wz
25d20     02 07 02 56 |  if_ne	mov	_var04, _var03
25d24     01 04 06 51 |  if_ne	add	_var03, #1
25d28     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25d2c     00 00 06 56 |  if_ne	mov	_var01, #0
25d30     01 07 C2 FA | 	rdbyte	_var04, _var02
25d34     2E 06 0E F2 | 	cmp	_var04, #46 wz
25d38     D8 00 90 5D |  if_ne	jmp	#LR__3742
25d3c     01 02 06 F1 | 	add	_var02, #1
25d40     01 07 C2 FA | 	rdbyte	_var04, _var02
25d44     01 02 86 F1 | 	sub	_var02, #1
25d48     2F 06 0E F2 | 	cmp	_var04, #47 wz
25d4c     18 00 90 AD |  if_e	jmp	#LR__3731
25d50     01 02 06 F1 | 	add	_var02, #1
25d54     01 09 C2 FA | 	rdbyte	_var05, _var02
25d58     01 02 86 F1 | 	sub	_var02, #1
25d5c     04 0B 02 F6 | 	mov	_var06, _var05
25d60     07 0A 4E F7 | 	zerox	_var06, #7 wz
25d64     10 00 90 5D |  if_ne	jmp	#LR__3732
25d68                 | LR__3731
25d68     01 0D 02 F6 | 	mov	_var07, _var02
25d6c     01 0C 06 F1 | 	add	_var07, #1
25d70     06 03 02 F6 | 	mov	_var02, _var07
25d74     E0 00 90 FD | 	jmp	#LR__3746
25d78                 | LR__3732
25d78     01 02 06 F1 | 	add	_var02, #1
25d7c     01 0D C2 FA | 	rdbyte	_var07, _var02
25d80     01 02 86 F1 | 	sub	_var02, #1
25d84     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25d88     2E 06 0E F2 | 	cmp	_var04, #46 wz
25d8c     84 00 90 5D |  if_ne	jmp	#LR__3741
25d90     02 02 06 F1 | 	add	_var02, #2
25d94     01 0D C2 FA | 	rdbyte	_var07, _var02
25d98     02 02 86 F1 | 	sub	_var02, #2
25d9c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25da0     2F 06 0E F2 | 	cmp	_var04, #47 wz
25da4     18 00 90 AD |  if_e	jmp	#LR__3733
25da8     02 02 06 F1 | 	add	_var02, #2
25dac     01 09 C2 FA | 	rdbyte	_var05, _var02
25db0     02 02 86 F1 | 	sub	_var02, #2
25db4     04 0B 02 F6 | 	mov	_var06, _var05
25db8     07 0A 4E F7 | 	zerox	_var06, #7 wz
25dbc     54 00 90 5D |  if_ne	jmp	#LR__3740
25dc0                 | LR__3733
25dc0     02 02 06 F1 | 	add	_var02, #2
25dc4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25dc8     40 00 90 ED |  if_be	jmp	#LR__3739
25dcc     02 0F 02 F6 | 	mov	_var08, _var03
25dd0     01 0E 86 F1 | 	sub	_var08, #1
25dd4                 | LR__3734
25dd4     07 07 C2 FA | 	rdbyte	_var04, _var08
25dd8     2F 06 0E F2 | 	cmp	_var04, #47 wz
25ddc     0C 00 90 5D |  if_ne	jmp	#LR__3735
25de0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25de4     01 0E 86 11 |  if_a	sub	_var08, #1
25de8     E8 FF 9F 1D |  if_a	jmp	#LR__3734
25dec                 | LR__3735
25dec     97 0C 48 FB | 	callpa	#(@LR__3737-@LR__3736)>>2,fcache_load_ptr_
25df0                 | LR__3736
25df0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25df4     10 00 90 ED |  if_be	jmp	#LR__3738
25df8     07 07 C2 FA | 	rdbyte	_var04, _var08
25dfc     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e00     01 0E 86 51 |  if_ne	sub	_var08, #1
25e04     E8 FF 9F 5D |  if_ne	jmp	#LR__3736
25e08                 | LR__3737
25e08                 | LR__3738
25e08     07 05 02 F6 | 	mov	_var03, _var08
25e0c                 | LR__3739
25e0c     01 00 06 F6 | 	mov	_var01, #1
25e10     44 00 90 FD | 	jmp	#LR__3746
25e14                 | LR__3740
25e14                 | LR__3741
25e14                 | LR__3742
25e14     97 18 48 FB | 	callpa	#(@LR__3744-@LR__3743)>>2,fcache_load_ptr_
25e18                 | LR__3743
25e18     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25e1c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25e20     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25e24     20 00 90 AD |  if_e	jmp	#LR__3745
25e28     01 0B 02 F6 | 	mov	_var06, _var02
25e2c     01 09 02 F6 | 	mov	_var05, _var02
25e30     01 08 06 F1 | 	add	_var05, #1
25e34     05 11 C2 FA | 	rdbyte	_var09, _var06
25e38     04 03 02 F6 | 	mov	_var02, _var05
25e3c     02 11 42 FC | 	wrbyte	_var09, _var03
25e40     01 04 06 F1 | 	add	_var03, #1
25e44     D0 FF 9F FD | 	jmp	#LR__3743
25e48                 | LR__3744
25e48                 | LR__3745
25e48     01 07 C2 FA | 	rdbyte	_var04, _var02
25e4c     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e50     C0 FE 9F 5D |  if_ne	jmp	#LR__3730
25e54     01 00 06 F6 | 	mov	_var01, #1
25e58                 | LR__3746
25e58     97 0C 48 FB | 	callpa	#(@LR__3748-@LR__3747)>>2,fcache_load_ptr_
25e5c                 | LR__3747
25e5c     01 07 C2 FA | 	rdbyte	_var04, _var02
25e60     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e64     01 0D 02 A6 |  if_e	mov	_var07, _var02
25e68     01 0C 06 A1 |  if_e	add	_var07, #1
25e6c     06 03 02 A6 |  if_e	mov	_var02, _var07
25e70     E8 FF 9F AD |  if_e	jmp	#LR__3747
25e74                 | LR__3748
25e74     9C FE 9F FD | 	jmp	#LR__3730
25e78                 | LR__3749
25e78     02 01 48 FC | 	wrbyte	#0, _var03
25e7c                 | __system___normalizeName_ret
25e7c     2D 00 64 FD | 	ret
25e80                 | 
25e80                 | __system___strrev
25e80     09 01 CA FA | 	rdbyte	_var01, arg01 wz
25e84     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
25e88     09 03 02 F6 | 	mov	_var02, arg01
25e8c     97 1A 48 FB | 	callpa	#(@LR__3752-@LR__3750)>>2,fcache_load_ptr_
25e90                 | LR__3750
25e90     01 01 CA FA | 	rdbyte	_var01, _var02 wz
25e94     01 02 06 51 |  if_ne	add	_var02, #1
25e98     F4 FF 9F 5D |  if_ne	jmp	#LR__3750
25e9c     01 02 86 F1 | 	sub	_var02, #1
25ea0                 | LR__3751
25ea0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
25ea4     1C 00 90 ED |  if_be	jmp	#LR__3753
25ea8     09 01 C2 FA | 	rdbyte	_var01, arg01
25eac     01 05 C2 FA | 	rdbyte	_var03, _var02
25eb0     09 05 42 FC | 	wrbyte	_var03, arg01
25eb4     01 01 42 FC | 	wrbyte	_var01, _var02
25eb8     01 12 06 F1 | 	add	arg01, #1
25ebc     01 02 86 F1 | 	sub	_var02, #1
25ec0     DC FF 9F FD | 	jmp	#LR__3751
25ec4                 | LR__3752
25ec4                 | LR__3753
25ec4                 | __system___strrev_ret
25ec4     2D 00 64 FD | 	ret
25ec8                 | 
25ec8                 | __system___fmtpad
25ec8     06 4A 05 F6 | 	mov	COUNT_, #6
25ecc     A8 00 A0 FD | 	call	#pushregs_
25ed0     09 1F 02 F6 | 	mov	local01, arg01
25ed4     0A 21 02 F6 | 	mov	local02, arg02
25ed8     0B 23 02 F6 | 	mov	local03, arg03
25edc     10 13 EA F8 | 	getbyte	arg01, local02, #1
25ee0     16 20 46 F0 | 	shr	local02, #22
25ee4     03 20 0E F5 | 	and	local02, #3 wz
25ee8     00 24 06 F6 | 	mov	local04, #0
25eec     01 20 06 A6 |  if_e	mov	local02, #1
25ef0     0C 21 CA F7 | 	test	local02, arg04 wz
25ef4     00 FA 05 A6 |  if_e	mov	result1, #0
25ef8     88 00 90 AD |  if_e	jmp	#LR__3763
25efc     09 23 C2 F2 | 	subr	local03, arg01
25f00     01 22 56 F2 | 	cmps	local03, #1 wc
25f04     00 FA 05 C6 |  if_b	mov	result1, #0
25f08     78 00 90 CD |  if_b	jmp	#LR__3763
25f0c     03 20 0E F2 | 	cmp	local02, #3 wz
25f10     18 00 90 5D |  if_ne	jmp	#LR__3760
25f14     01 18 0E F2 | 	cmp	arg04, #1 wz
25f18     6E 20 62 FD | 	wrz	local02
25f1c     10 23 02 F1 | 	add	local03, local02
25f20     11 23 52 F6 | 	abs	local03, local03 wc
25f24     01 22 46 F0 | 	shr	local03, #1
25f28     11 23 82 F6 | 	negc	local03, local03
25f2c                 | LR__3760
25f2c     01 22 56 F2 | 	cmps	local03, #1 wc
25f30     4C 00 90 CD |  if_b	jmp	#LR__3762
25f34     11 27 02 F6 | 	mov	local05, local03
25f38                 | LR__3761
25f38     0F 21 02 F6 | 	mov	local02, local01
25f3c     0F 29 02 F6 | 	mov	local06, local01
25f40     13 20 46 F7 | 	zerox	local02, #19
25f44     14 28 46 F0 | 	shr	local06, #20
25f48     02 28 66 F0 | 	shl	local06, #2
25f4c     ED 28 02 F1 | 	add	local06, __methods__
25f50     14 29 02 FB | 	rdlong	local06, local06
25f54     20 12 06 F6 | 	mov	arg01, #32
25f58     F2 22 02 F6 | 	mov	local03, objptr
25f5c     10 E5 01 F6 | 	mov	objptr, local02
25f60     2D 28 62 FD | 	call	local06
25f64     11 E5 01 F6 | 	mov	objptr, local03
25f68     FD 28 02 F6 | 	mov	local06, result1
25f6c     00 28 56 F2 | 	cmps	local06, #0 wc
25f70     14 FB 01 C6 |  if_b	mov	result1, local06
25f74     0C 00 90 CD |  if_b	jmp	#LR__3763
25f78     14 25 02 F1 | 	add	local04, local06
25f7c     EE 27 6E FB | 	djnz	local05, #LR__3761
25f80                 | LR__3762
25f80     12 FB 01 F6 | 	mov	result1, local04
25f84                 | LR__3763
25f84     A7 F0 03 F6 | 	mov	ptra, fp
25f88     B2 00 A0 FD | 	call	#popregs_
25f8c                 | __system___fmtpad_ret
25f8c     2D 00 64 FD | 	ret
25f90                 | 
25f90                 | __system___uitoa
25f90     04 4A 05 F6 | 	mov	COUNT_, #4
25f94     A8 00 A0 FD | 	call	#pushregs_
25f98     09 1F 02 F6 | 	mov	local01, arg01
25f9c     00 1A 4E F2 | 	cmps	arg05, #0 wz
25fa0     0F 1B 02 F6 | 	mov	arg05, local01
25fa4     00 20 06 F6 | 	mov	local02, #0
25fa8     37 22 06 56 |  if_ne	mov	local03, #55
25fac     57 22 06 A6 |  if_e	mov	local03, #87
25fb0                 | LR__3770
25fb0     0B 15 12 FD | 	qdiv	arg02, arg03
25fb4     19 24 62 FD | 	getqy	local04
25fb8     0B 15 12 FD | 	qdiv	arg02, arg03
25fbc     0A 24 16 F2 | 	cmp	local04, #10 wc
25fc0     30 24 06 C1 |  if_b	add	local04, #48
25fc4     11 25 02 31 |  if_ae	add	local04, local03
25fc8     0D 25 42 FC | 	wrbyte	local04, arg05
25fcc     01 1A 06 F1 | 	add	arg05, #1
25fd0     01 20 06 F1 | 	add	local02, #1
25fd4     18 14 62 FD | 	getqx	arg02
25fd8     00 14 0E F2 | 	cmp	arg02, #0 wz
25fdc     D0 FF 9F 5D |  if_ne	jmp	#LR__3770
25fe0     0C 21 12 F2 | 	cmp	local02, arg04 wc
25fe4     C8 FF 9F CD |  if_b	jmp	#LR__3770
25fe8     0D 01 48 FC | 	wrbyte	#0, arg05
25fec     0F 13 02 F6 | 	mov	arg01, local01
25ff0     8C FE BF FD | 	call	#__system___strrev
25ff4     10 FB 01 F6 | 	mov	result1, local02
25ff8     A7 F0 03 F6 | 	mov	ptra, fp
25ffc     B2 00 A0 FD | 	call	#popregs_
26000                 | __system___uitoa_ret
26000     2D 00 64 FD | 	ret
26004                 | 
26004                 | __system__disassemble_0499
26004     10 4A 05 F6 | 	mov	COUNT_, #16
26008     A8 00 A0 FD | 	call	#pushregs_
2600c     09 1F 02 F6 | 	mov	local01, arg01
26010     0A 21 02 F6 | 	mov	local02, arg02
26014     0B 23 02 F6 | 	mov	local03, arg03
26018     0C 25 02 F6 | 	mov	local04, arg04
2601c     0D 27 02 F6 | 	mov	local05, arg05
26020     13 13 52 F6 | 	abs	arg01, local05 wc
26024     1F 28 C6 C9 |  if_b	decod	local06, #31
26028     00 28 06 36 |  if_ae	mov	local06, #0
2602c     CC CF BF FD | 	call	#__system___float_fromuns
26030     14 FB 61 F5 | 	xor	result1, local06
26034     FD 2A 02 F6 | 	mov	local07, result1
26038     00 2C 06 F6 | 	mov	local08, #0
2603c     0F 13 02 F6 | 	mov	arg01, local01
26040     00 14 06 F6 | 	mov	arg02, #0
26044     01 16 06 F6 | 	mov	arg03, #1
26048     E8 D7 BF FD | 	call	#__system___float_cmp
2604c     00 FA 0D F2 | 	cmp	result1, #0 wz
26050     00 2E 06 A6 |  if_e	mov	local09, #0
26054     10 01 68 AC |  if_e	wrlong	#0, local02
26058     11 2F 62 AC |  if_e	wrlong	local09, local03
2605c     8C 01 90 AD |  if_e	jmp	#LR__3792
26060     0F 13 02 F6 | 	mov	arg01, local01
26064     BC DC BF FD | 	call	#__system____builtin_ilogb
26068     FD 30 02 F6 | 	mov	local10, result1
2606c     0A 26 0E F2 | 	cmp	local05, #10 wz
26070     24 00 90 5D |  if_ne	jmp	#LR__3780
26074     18 2F 02 F6 | 	mov	local09, local10
26078     01 2E 66 F0 | 	shl	local09, #1
2607c     18 2F 02 F1 | 	add	local09, local10
26080     17 31 52 F6 | 	abs	local10, local09 wc
26084     0A 30 16 FD | 	qdiv	local10, #10
26088     09 32 06 F6 | 	mov	local11, #9
2608c     18 30 62 FD | 	getqx	local10
26090     18 31 82 F6 | 	negc	local10, local10
26094     04 00 90 FD | 	jmp	#LR__3781
26098                 | LR__3780
26098     18 32 06 F6 | 	mov	local11, #24
2609c                 | LR__3781
2609c                 | LR__3782
2609c     08 2C 56 F2 | 	cmps	local08, #8 wc
260a0     01 2C 06 F1 | 	add	local08, #1
260a4     60 00 90 3D |  if_ae	jmp	#LR__3783
260a8     00 C0 1F FF 
260ac     00 12 06 F6 | 	mov	arg01, ##1065353216
260b0     15 15 02 F6 | 	mov	arg02, local07
260b4     18 17 02 F6 | 	mov	arg03, local10
260b8     4C E3 BF FD | 	call	#__system___float_pow_n
260bc     FD 14 02 F6 | 	mov	arg02, result1
260c0     0F 13 02 F6 | 	mov	arg01, local01
260c4     3C D5 BF FD | 	call	#__system___float_div
260c8     FD 34 02 F6 | 	mov	local12, result1
260cc     1A 13 02 F6 | 	mov	arg01, local12
260d0     00 C0 1F FF 
260d4     00 14 06 F6 | 	mov	arg02, ##1065353216
260d8     01 16 06 F6 | 	mov	arg03, #1
260dc     54 D7 BF FD | 	call	#__system___float_cmp
260e0     00 FA 55 F2 | 	cmps	result1, #0 wc
260e4     01 30 86 C1 |  if_b	sub	local10, #1
260e8     B0 FF 9F CD |  if_b	jmp	#LR__3782
260ec     15 15 02 F6 | 	mov	arg02, local07
260f0     1A 13 02 F6 | 	mov	arg01, local12
260f4     01 16 66 F6 | 	neg	arg03, #1
260f8     38 D7 BF FD | 	call	#__system___float_cmp
260fc     00 FA 55 F2 | 	cmps	result1, #0 wc
26100     01 30 06 31 |  if_ae	add	local10, #1
26104     94 FF 9F 3D |  if_ae	jmp	#LR__3782
26108                 | LR__3783
26108     1A 13 02 F6 | 	mov	arg01, local12
2610c     14 DC BF FD | 	call	#__system____builtin_ilogb
26110     FD 36 02 F6 | 	mov	local13, result1
26114     1A 39 02 F6 | 	mov	local14, local12
26118     17 39 06 F4 | 	bitl	local14, #279
2611c     17 38 26 F4 | 	bith	local14, #23
26120     1B 39 62 F0 | 	shl	local14, local13
26124     02 26 0E F2 | 	cmp	local05, #2 wz
26128     02 24 66 A0 |  if_e	shl	local04, #2
2612c     00 3A 06 F6 | 	mov	local15, #0
26130     00 24 56 F2 | 	cmps	local04, #0 wc
26134     10 00 90 3D |  if_ae	jmp	#LR__3784
26138     18 25 C2 F2 | 	subr	local04, local10
2613c     00 24 56 F2 | 	cmps	local04, #0 wc
26140     A0 00 90 CD |  if_b	jmp	#LR__3791
26144     04 00 90 FD | 	jmp	#LR__3785
26148                 | LR__3784
26148     01 24 06 F1 | 	add	local04, #1
2614c                 | LR__3785
2614c     19 25 7A F3 | 	fles	local04, local11 wcz
26150     01 3C 06 F6 | 	mov	local16, #1
26154     97 22 48 FB | 	callpa	#(@LR__3787-@LR__3786)>>2,fcache_load_ptr_
26158                 | LR__3786
26158     00 40 00 FF 
2615c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26160     38 00 90 3D |  if_ae	jmp	#LR__3788
26164     01 24 56 F2 | 	cmps	local04, #1 wc
26168     01 24 86 F1 | 	sub	local04, #1
2616c     2C 00 90 CD |  if_b	jmp	#LR__3788
26170     13 3B 02 FD | 	qmul	local15, local05
26174     1C 37 02 F6 | 	mov	local13, local14
26178     17 36 46 F0 | 	shr	local13, #23
2617c     17 39 06 F4 | 	bitl	local14, #279
26180     18 3A 62 FD | 	getqx	local15
26184     13 3D 02 FD | 	qmul	local16, local05
26188     18 3C 62 FD | 	getqx	local16
2618c     13 39 02 FD | 	qmul	local14, local05
26190     1B 3B 02 F1 | 	add	local15, local13
26194     18 38 62 FD | 	getqx	local14
26198     BC FF 9F FD | 	jmp	#LR__3786
2619c                 | LR__3787
2619c                 | LR__3788
2619c     13 2F 02 F6 | 	mov	local09, local05
261a0     17 2E 66 F0 | 	shl	local09, #23
261a4     17 37 52 F6 | 	abs	local13, local09 wc
261a8     01 36 46 F0 | 	shr	local13, #1
261ac     1B 37 82 F6 | 	negc	local13, local13
261b0     1B 39 1A F2 | 	cmp	local14, local13 wcz
261b4     20 00 90 1D |  if_a	jmp	#LR__3789
261b8     17 26 66 F0 | 	shl	local05, #23
261bc     13 37 52 F6 | 	abs	local13, local05 wc
261c0     01 36 46 F0 | 	shr	local13, #1
261c4     1B 37 82 F6 | 	negc	local13, local13
261c8     1B 39 0A F2 | 	cmp	local14, local13 wz
261cc     14 00 90 5D |  if_ne	jmp	#LR__3790
261d0     01 3A CE F7 | 	test	local15, #1 wz
261d4     0C 00 90 AD |  if_e	jmp	#LR__3790
261d8                 | LR__3789
261d8     01 3A 06 F1 | 	add	local15, #1
261dc     1E 3B 0A F2 | 	cmp	local15, local16 wz
261e0     01 30 06 A1 |  if_e	add	local10, #1
261e4                 | LR__3790
261e4                 | LR__3791
261e4     10 3B 62 FC | 	wrlong	local15, local02
261e8     11 31 62 FC | 	wrlong	local10, local03
261ec                 | LR__3792
261ec     A7 F0 03 F6 | 	mov	ptra, fp
261f0     B2 00 A0 FD | 	call	#popregs_
261f4                 | __system__disassemble_0499_ret
261f4     2D 00 64 FD | 	ret
261f8                 | 
261f8                 | __system__emitsign_0501
261f8     00 FA 05 F6 | 	mov	result1, #0
261fc     00 14 0E F2 | 	cmp	arg02, #0 wz
26200     09 01 02 56 |  if_ne	mov	_var01, arg01
26204     01 12 06 51 |  if_ne	add	arg01, #1
26208     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2620c     01 FA 05 56 |  if_ne	mov	result1, #1
26210     00 16 0E F2 | 	cmp	arg03, #0 wz
26214     09 61 48 5C |  if_ne	wrbyte	#48, arg01
26218     01 12 06 51 |  if_ne	add	arg01, #1
2621c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
26220     02 FA 05 51 |  if_ne	add	result1, #2
26224                 | __system__emitsign_0501_ret
26224     2D 00 64 FD | 	ret
26228                 | 
26228                 | __system___gettxfunc
26228     01 4A 05 F6 | 	mov	COUNT_, #1
2622c     A8 00 A0 FD | 	call	#pushregs_
26230     A0 F8 BF FD | 	call	#__system____getftab
26234     FD 1E 0A F6 | 	mov	local01, result1 wz
26238     10 00 90 AD |  if_e	jmp	#LR__3800
2623c     08 1E 06 F1 | 	add	local01, #8
26240     0F 15 0A FB | 	rdlong	arg02, local01 wz
26244     08 1E 86 F1 | 	sub	local01, #8
26248     08 00 90 5D |  if_ne	jmp	#LR__3801
2624c                 | LR__3800
2624c     00 FA 05 F6 | 	mov	result1, #0
26250     0C 00 90 FD | 	jmp	#LR__3802
26254                 | LR__3801
26254     00 90 04 FF 
26258     00 1E 46 F5 | 	or	local01, ##153092096
2625c     0F FB 01 F6 | 	mov	result1, local01
26260                 | LR__3802
26260     A7 F0 03 F6 | 	mov	ptra, fp
26264     B2 00 A0 FD | 	call	#popregs_
26268                 | __system___gettxfunc_ret
26268     2D 00 64 FD | 	ret
2626c                 | 
2626c                 | __system___getrxfunc
2626c     01 4A 05 F6 | 	mov	COUNT_, #1
26270     A8 00 A0 FD | 	call	#pushregs_
26274     5C F8 BF FD | 	call	#__system____getftab
26278     FD 1E 0A F6 | 	mov	local01, result1 wz
2627c     10 00 90 AD |  if_e	jmp	#LR__3810
26280     08 1E 06 F1 | 	add	local01, #8
26284     0F 15 0A FB | 	rdlong	arg02, local01 wz
26288     08 1E 86 F1 | 	sub	local01, #8
2628c     08 00 90 5D |  if_ne	jmp	#LR__3811
26290                 | LR__3810
26290     00 FA 05 F6 | 	mov	result1, #0
26294     0C 00 90 FD | 	jmp	#LR__3812
26298                 | LR__3811
26298     00 98 04 FF 
2629c     00 1E 46 F5 | 	or	local01, ##154140672
262a0     0F FB 01 F6 | 	mov	result1, local01
262a4                 | LR__3812
262a4     A7 F0 03 F6 | 	mov	ptra, fp
262a8     B2 00 A0 FD | 	call	#popregs_
262ac                 | __system___getrxfunc_ret
262ac     2D 00 64 FD | 	ret
262b0                 | 
262b0                 | __system___getiolock_0541
262b0     01 4A 05 F6 | 	mov	COUNT_, #1
262b4     A8 00 A0 FD | 	call	#pushregs_
262b8     18 F8 BF FD | 	call	#__system____getftab
262bc     FD 1E 0A F6 | 	mov	local01, result1 wz
262c0     10 00 90 AD |  if_e	jmp	#LR__3820
262c4     08 1E 06 F1 | 	add	local01, #8
262c8     0F FB 09 FB | 	rdlong	result1, local01 wz
262cc     08 1E 86 F1 | 	sub	local01, #8
262d0     18 00 90 5D |  if_ne	jmp	#LR__3821
262d4                 | LR__3820
262d4     01 00 00 FF 
262d8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
262dc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
262e0     01 00 00 FF 
262e4     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
262e8     08 00 90 FD | 	jmp	#LR__3822
262ec                 | LR__3821
262ec     0C 1E 06 F1 | 	add	local01, #12
262f0     0F FB 01 F6 | 	mov	result1, local01
262f4                 | LR__3822
262f4     A7 F0 03 F6 | 	mov	ptra, fp
262f8     B2 00 A0 FD | 	call	#popregs_
262fc                 | __system___getiolock_0541_ret
262fc     2D 00 64 FD | 	ret
26300                 | 
26300                 | __system____ScanForChar
26300     09 01 02 F6 | 	mov	_var01, arg01
26304     09 03 02 F6 | 	mov	_var02, arg01
26308     97 06 48 FB | 	callpa	#(@LR__3831-@LR__3830)>>2,fcache_load_ptr_
2630c                 | LR__3830
2630c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
26310     01 02 06 51 |  if_ne	add	_var02, #1
26314     F4 FF 9F 5D |  if_ne	jmp	#LR__3830
26318                 | LR__3831
26318     09 03 82 F1 | 	sub	_var02, arg01
2631c     01 FB 01 F6 | 	mov	result1, _var02
26320     FD 12 0A F6 | 	mov	arg01, result1 wz
26324     00 FA 05 A6 |  if_e	mov	result1, #0
26328     B8 00 90 AD |  if_e	jmp	#LR__3838
2632c     0A 05 02 F6 | 	mov	_var03, arg02
26330     07 04 4E F7 | 	zerox	_var03, #7 wz
26334     00 FA 05 A6 |  if_e	mov	result1, #0
26338     A8 00 90 AD |  if_e	jmp	#LR__3838
2633c     01 16 16 F2 | 	cmp	arg03, #1 wc
26340     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
26344     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26348     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2634c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3838
26350     09 17 1A F2 | 	cmp	arg03, arg01 wcz
26354     10 00 90 ED |  if_be	jmp	#LR__3832
26358     00 18 0E F2 | 	cmp	arg04, #0 wz
2635c     00 FA 05 A6 |  if_e	mov	result1, #0
26360     80 00 90 AD |  if_e	jmp	#LR__3838
26364     09 17 02 F6 | 	mov	arg03, arg01
26368                 | LR__3832
26368     01 16 86 F1 | 	sub	arg03, #1
2636c     00 18 0E F2 | 	cmp	arg04, #0 wz
26370     38 00 90 5D |  if_ne	jmp	#LR__3834
26374     0B 07 02 F6 | 	mov	_var04, arg03
26378     09 09 02 F6 | 	mov	_var05, arg01
2637c                 | LR__3833
2637c     04 07 12 F2 | 	cmp	_var04, _var05 wc
26380     5C 00 90 3D |  if_ae	jmp	#LR__3837
26384     03 05 02 F6 | 	mov	_var03, _var04
26388     00 05 02 F1 | 	add	_var03, _var01
2638c     02 05 C2 FA | 	rdbyte	_var03, _var03
26390     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
26394     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26398     01 06 06 A1 |  if_e	add	_var04, #1
2639c     03 FB 01 A6 |  if_e	mov	result1, _var04
263a0     40 00 90 AD |  if_e	jmp	#LR__3838
263a4     01 06 06 F1 | 	add	_var04, #1
263a8     D0 FF 9F FD | 	jmp	#LR__3833
263ac                 | LR__3834
263ac     0B 07 02 F6 | 	mov	_var04, arg03
263b0                 | LR__3835
263b0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
263b4     28 00 90 1D |  if_a	jmp	#LR__3836
263b8     03 09 02 F6 | 	mov	_var05, _var04
263bc     00 09 02 F1 | 	add	_var05, _var01
263c0     04 05 C2 FA | 	rdbyte	_var03, _var05
263c4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
263c8     04 05 0A F2 | 	cmp	_var03, _var05 wz
263cc     01 06 06 A1 |  if_e	add	_var04, #1
263d0     03 FB 01 A6 |  if_e	mov	result1, _var04
263d4     0C 00 90 AD |  if_e	jmp	#LR__3838
263d8     01 06 86 F1 | 	sub	_var04, #1
263dc     D0 FF 9F FD | 	jmp	#LR__3835
263e0                 | LR__3836
263e0                 | LR__3837
263e0     00 FA 05 F6 | 	mov	result1, #0
263e4                 | LR__3838
263e4                 | __system____ScanForChar_ret
263e4     2D 00 64 FD | 	ret
263e8                 | 
263e8                 | __system___basic_dir
263e8     05 4A 05 F6 | 	mov	COUNT_, #5
263ec     A8 00 A0 FD | 	call	#pushregs_
263f0     4C F0 07 F1 | 	add	ptra, #76
263f4     04 4E 05 F1 | 	add	fp, #4
263f8     A7 12 62 FC | 	wrlong	arg01, fp
263fc     04 4E 05 F1 | 	add	fp, #4
26400     A7 14 62 FC | 	wrlong	arg02, fp
26404     04 4E 85 F1 | 	sub	fp, #4
26408     A7 14 0A FB | 	rdlong	arg02, fp wz
2640c     04 4E 85 F1 | 	sub	fp, #4
26410     04 4E 05 51 |  if_ne	add	fp, #4
26414     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26418     04 4E 85 51 |  if_ne	sub	fp, #4
2641c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
26420     70 00 90 AD |  if_e	jmp	#LR__3840
26424     03 00 00 FF 
26428     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2642c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26430     03 00 00 FF 
26434     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26438     03 00 00 5F 
2643c     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
26440     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
26444     03 00 00 5F 
26448     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
2644c     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26450     80 01 00 FF 
26454     00 13 06 F6 | 	mov	arg01, ##@LR__5008
26458     E0 E8 BF FD | 	call	#__system__opendir
2645c     03 00 00 FF 
26460     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26464     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26468     08 4E 05 F1 | 	add	fp, #8
2646c     A7 20 02 FB | 	rdlong	local02, fp
26470     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26474     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26478     04 4E 85 F1 | 	sub	fp, #4
2647c     A7 20 02 FB | 	rdlong	local02, fp
26480     04 4E 85 F1 | 	sub	fp, #4
26484     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26488     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2648c     03 00 00 FF 
26490     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26494                 | LR__3840
26494     03 00 00 FF 
26498     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2649c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
264a0     03 00 00 FF 
264a4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264a8     80 01 00 AF 
264ac     02 FB 05 A6 |  if_e	mov	result1, ##@LR__5009
264b0     84 02 90 AD |  if_e	jmp	#LR__3853
264b4                 | LR__3841
264b4     03 00 00 FF 
264b8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264bc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
264c0     03 00 00 FF 
264c4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264c8     D0 E9 BF FD | 	call	#__system__readdir
264cc     0C 4E 05 F1 | 	add	fp, #12
264d0     A7 FA 61 FC | 	wrlong	result1, fp
264d4     0C 4E 85 F1 | 	sub	fp, #12
264d8     00 FA 0D F2 | 	cmp	result1, #0 wz
264dc     38 00 90 5D |  if_ne	jmp	#LR__3842
264e0     03 00 00 FF 
264e4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264e8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
264ec     03 00 00 FF 
264f0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264f4     30 E9 BF FD | 	call	#__system__closedir
264f8     03 00 00 FF 
264fc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26500     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
26504     03 00 00 FF 
26508     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2650c     80 01 00 FF 
26510     04 FB 05 F6 | 	mov	result1, ##@LR__5010
26514     20 02 90 FD | 	jmp	#LR__3853
26518                 | LR__3842
26518     0C 4E 05 F1 | 	add	fp, #12
2651c     A7 12 02 FB | 	rdlong	arg01, fp
26520     0C 4E 85 F1 | 	sub	fp, #12
26524     03 00 00 FF 
26528     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2652c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
26530     03 00 00 FF 
26534     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26538     10 09 B0 FD | 	call	#__system___pat_match
2653c     00 FA 0D F2 | 	cmp	result1, #0 wz
26540     70 FF 9F AD |  if_e	jmp	#LR__3841
26544     03 00 00 FF 
26548     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2654c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26550     03 00 00 FF 
26554     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26558     78 01 90 AD |  if_e	jmp	#LR__3849
2655c     0C 4E 05 F1 | 	add	fp, #12
26560     A7 12 02 FB | 	rdlong	arg01, fp
26564     04 4E 05 F1 | 	add	fp, #4
26568     A7 14 02 F6 | 	mov	arg02, fp
2656c     10 4E 85 F1 | 	sub	fp, #16
26570     2C F2 BF FD | 	call	#__system__stat
26574     40 4E 05 F1 | 	add	fp, #64
26578     A7 FA 61 FC | 	wrlong	result1, fp
2657c     40 4E 85 F1 | 	sub	fp, #64
26580     00 FA 0D F2 | 	cmp	result1, #0 wz
26584     80 01 00 5F 
26588     06 FB 05 56 |  if_ne	mov	result1, ##@LR__5011
2658c     A8 01 90 5D |  if_ne	jmp	#LR__3853
26590     18 4E 05 F1 | 	add	fp, #24
26594     A7 20 02 FB | 	rdlong	local02, fp
26598     78 00 00 FF 
2659c     00 20 06 F5 | 	and	local02, ##61440
265a0     2C 4E 05 F1 | 	add	fp, #44
265a4     A7 20 62 FC | 	wrlong	local02, fp
265a8     38 4E 85 F1 | 	sub	fp, #56
265ac     A7 20 02 FB | 	rdlong	local02, fp
265b0     0C 4E 85 F1 | 	sub	fp, #12
265b4     10 21 C2 FA | 	rdbyte	local02, local02
265b8     2E 20 0E F2 | 	cmp	local02, #46 wz
265bc     08 4E 05 A1 |  if_e	add	fp, #8
265c0     A7 04 68 AC |  if_e	wrlong	#2, fp
265c4     08 4E C5 F3 | 	sumz	fp, #8
265c8     A7 00 68 5C |  if_ne	wrlong	#0, fp
265cc     08 4E 85 51 |  if_ne	sub	fp, #8
265d0     44 4E 05 F1 | 	add	fp, #68
265d4     A7 20 02 FB | 	rdlong	local02, fp
265d8     44 4E 85 F1 | 	sub	fp, #68
265dc     08 00 00 FF 
265e0     00 20 0E F2 | 	cmp	local02, ##4096 wz
265e4     18 00 90 5D |  if_ne	jmp	#LR__3843
265e8     08 4E 05 F1 | 	add	fp, #8
265ec     A7 20 02 FB | 	rdlong	local02, fp
265f0     10 20 46 F5 | 	or	local02, #16
265f4     A7 20 62 FC | 	wrlong	local02, fp
265f8     08 4E 85 F1 | 	sub	fp, #8
265fc     AC 00 90 FD | 	jmp	#LR__3848
26600                 | LR__3843
26600     44 4E 05 F1 | 	add	fp, #68
26604     A7 20 02 FB | 	rdlong	local02, fp
26608     44 4E 85 F1 | 	sub	fp, #68
2660c     10 00 00 FF 
26610     00 20 0E F2 | 	cmp	local02, ##8192 wz
26614     44 4E 05 51 |  if_ne	add	fp, #68
26618     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2661c     44 4E 85 51 |  if_ne	sub	fp, #68
26620     18 00 00 5F 
26624     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
26628     44 4E 05 51 |  if_ne	add	fp, #68
2662c     0F 23 02 56 |  if_ne	mov	local03, local01
26630     44 4E 85 51 |  if_ne	sub	fp, #68
26634     20 00 00 5F 
26638     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
2663c     18 00 90 5D |  if_ne	jmp	#LR__3844
26640     08 4E 05 F1 | 	add	fp, #8
26644     A7 20 02 FB | 	rdlong	local02, fp
26648     04 20 46 F5 | 	or	local02, #4
2664c     A7 20 62 FC | 	wrlong	local02, fp
26650     08 4E 85 F1 | 	sub	fp, #8
26654     54 00 90 FD | 	jmp	#LR__3847
26658                 | LR__3844
26658     18 4E 05 F1 | 	add	fp, #24
2665c     A7 20 02 FB | 	rdlong	local02, fp
26660     18 4E 85 F1 | 	sub	fp, #24
26664     92 20 CE F7 | 	test	local02, #146 wz
26668     18 00 90 5D |  if_ne	jmp	#LR__3845
2666c     08 4E 05 F1 | 	add	fp, #8
26670     A7 20 02 FB | 	rdlong	local02, fp
26674     01 20 46 F5 | 	or	local02, #1
26678     A7 20 62 FC | 	wrlong	local02, fp
2667c     08 4E 85 F1 | 	sub	fp, #8
26680     28 00 90 FD | 	jmp	#LR__3846
26684                 | LR__3845
26684     44 4E 05 F1 | 	add	fp, #68
26688     A7 24 02 FB | 	rdlong	local04, fp
2668c     44 4E 85 F1 | 	sub	fp, #68
26690     08 00 00 FF 
26694     00 24 0E F2 | 	cmp	local04, ##4096 wz
26698     08 4E 05 51 |  if_ne	add	fp, #8
2669c     A7 24 02 5B |  if_ne	rdlong	local04, fp
266a0     20 24 46 55 |  if_ne	or	local04, #32
266a4     A7 24 62 5C |  if_ne	wrlong	local04, fp
266a8     08 4E 85 51 |  if_ne	sub	fp, #8
266ac                 | LR__3846
266ac                 | LR__3847
266ac                 | LR__3848
266ac     08 4E 05 F1 | 	add	fp, #8
266b0     A7 24 02 FB | 	rdlong	local04, fp
266b4     08 4E 85 F1 | 	sub	fp, #8
266b8     03 00 00 FF 
266bc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
266c0     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
266c4     03 00 00 FF 
266c8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
266cc     0F 25 CA F7 | 	test	local04, local01 wz
266d0     E0 FD 9F AD |  if_e	jmp	#LR__3841
266d4                 | LR__3849
266d4     0C 4E 05 F1 | 	add	fp, #12
266d8     A7 12 02 FB | 	rdlong	arg01, fp
266dc     0C 4E 85 F1 | 	sub	fp, #12
266e0     09 27 02 F6 | 	mov	local05, arg01
266e4     97 06 48 FB | 	callpa	#(@LR__3851-@LR__3850)>>2,fcache_load_ptr_
266e8                 | LR__3850
266e8     13 FB C9 FA | 	rdbyte	result1, local05 wz
266ec     01 26 06 51 |  if_ne	add	local05, #1
266f0     F4 FF 9F 5D |  if_ne	jmp	#LR__3850
266f4                 | LR__3851
266f4     13 13 C2 F2 | 	subr	arg01, local05
266f8     01 12 06 F1 | 	add	arg01, #1
266fc     28 E0 BF FD | 	call	#__system___gc_alloc_managed
26700     48 4E 05 F1 | 	add	fp, #72
26704     A7 FA 61 FC | 	wrlong	result1, fp
26708     48 4E 85 F1 | 	sub	fp, #72
2670c     00 FA 0D F2 | 	cmp	result1, #0 wz
26710     18 00 90 AD |  if_e	jmp	#LR__3852
26714     48 4E 05 F1 | 	add	fp, #72
26718     A7 12 02 FB | 	rdlong	arg01, fp
2671c     3C 4E 85 F1 | 	sub	fp, #60
26720     A7 14 02 FB | 	rdlong	arg02, fp
26724     0C 4E 85 F1 | 	sub	fp, #12
26728     D4 A0 BF FD | 	call	#__system____builtin_strcpy
2672c                 | LR__3852
2672c     48 4E 05 F1 | 	add	fp, #72
26730     A7 FA 01 FB | 	rdlong	result1, fp
26734     48 4E 85 F1 | 	sub	fp, #72
26738                 | LR__3853
26738     A7 F0 03 F6 | 	mov	ptra, fp
2673c     B2 00 A0 FD | 	call	#popregs_
26740                 | __system___basic_dir_ret
26740     2D 00 64 FD | 	ret
26744                 | 
26744                 | __system__pack_0607
26744     09 01 02 F6 | 	mov	_var01, arg01
26748     7F 16 06 F1 | 	add	arg03, #127
2674c     04 18 CE F7 | 	test	arg04, #4 wz
26750     10 00 90 AD |  if_e	jmp	#LR__3860
26754     00 00 0E F2 | 	cmp	_var01, #0 wz
26758     16 00 C6 A9 |  if_e	decod	_var01, #22
2675c     F7 00 26 F4 | 	bith	_var01, #247
26760     B4 00 90 FD | 	jmp	#LR__3869
26764                 | LR__3860
26764     02 18 CE F7 | 	test	arg04, #2 wz
26768     00 C0 3F 5F 
2676c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26770     00 14 06 56 |  if_ne	mov	arg02, #0
26774     A0 00 90 5D |  if_ne	jmp	#LR__3868
26778     08 18 CE F7 | 	test	arg04, #8 wz
2677c     00 00 06 56 |  if_ne	mov	_var01, #0
26780     94 00 90 5D |  if_ne	jmp	#LR__3867
26784     FF 16 56 F2 | 	cmps	arg03, #255 wc
26788     00 C0 3F 3F 
2678c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26790     00 14 06 36 |  if_ae	mov	arg02, #0
26794     80 00 90 3D |  if_ae	jmp	#LR__3866
26798     01 16 56 F2 | 	cmps	arg03, #1 wc
2679c     6C 00 90 3D |  if_ae	jmp	#LR__3864
267a0     01 14 46 F0 | 	shr	arg02, #1
267a4     00 03 02 F6 | 	mov	_var02, _var01
267a8     01 02 06 F5 | 	and	_var02, #1
267ac     1F 02 66 F0 | 	shl	_var02, #31
267b0     01 15 42 F5 | 	or	arg02, _var02
267b4     01 00 46 F0 | 	shr	_var01, #1
267b8     97 1E 48 FB | 	callpa	#(@LR__3862-@LR__3861)>>2,fcache_load_ptr_
267bc                 | LR__3861
267bc     00 16 56 F2 | 	cmps	arg03, #0 wc
267c0     34 00 90 3D |  if_ae	jmp	#LR__3863
267c4     00 00 0E F2 | 	cmp	_var01, #0 wz
267c8     2C 00 90 AD |  if_e	jmp	#LR__3863
267cc     0A 13 02 F6 | 	mov	arg01, arg02
267d0     01 12 06 F5 | 	and	arg01, #1
267d4     01 16 06 F1 | 	add	arg03, #1
267d8     01 14 46 F0 | 	shr	arg02, #1
267dc     00 03 02 F6 | 	mov	_var02, _var01
267e0     01 02 06 F5 | 	and	_var02, #1
267e4     1F 02 66 F0 | 	shl	_var02, #31
267e8     01 15 42 F5 | 	or	arg02, _var02
267ec     09 15 42 F5 | 	or	arg02, arg01
267f0     01 00 46 F0 | 	shr	_var01, #1
267f4     C4 FF 9F FD | 	jmp	#LR__3861
267f8                 | LR__3862
267f8                 | LR__3863
267f8     00 16 56 F2 | 	cmps	arg03, #0 wc
267fc     18 00 90 3D |  if_ae	jmp	#LR__3865
26800     00 14 0E F2 | 	cmp	arg02, #0 wz
26804     6F 14 62 FD | 	wrnz	arg02
26808     0C 00 90 FD | 	jmp	#LR__3865
2680c                 | LR__3864
2680c     17 01 06 F4 | 	bitl	_var01, #279
26810     17 16 66 F0 | 	shl	arg03, #23
26814     0B 01 42 F5 | 	or	_var01, arg03
26818                 | LR__3865
26818                 | LR__3866
26818                 | LR__3867
26818                 | LR__3868
26818                 | LR__3869
26818     01 00 CE F7 | 	test	_var01, #1 wz
2681c     01 14 46 55 |  if_ne	or	arg02, #1
26820     0A 17 02 F6 | 	mov	arg03, arg02
26824     00 02 06 F6 | 	mov	_var02, #0
26828     FF FF 3F FF 
2682c     FF 15 06 F1 | 	add	arg02, ##2147483647
26830     0B 15 12 F2 | 	cmp	arg02, arg03 wc
26834     01 02 06 C6 |  if_b	mov	_var02, #1
26838     01 01 02 F1 | 	add	_var01, _var02
2683c     01 18 CE F7 | 	test	arg04, #1 wz
26840     1F 00 26 54 |  if_ne	bith	_var01, #31
26844     00 FB 01 F6 | 	mov	result1, _var01
26848                 | __system__pack_0607_ret
26848     2D 00 64 FD | 	ret
2684c                 | 
2684c                 | __system___rxtxioctl_0697
2684c     00 15 0E F2 | 	cmp	arg02, #256 wz
26850     0C 00 90 AD |  if_e	jmp	#LR__3870
26854     01 15 0E F2 | 	cmp	arg02, #257 wz
26858     1C 00 90 AD |  if_e	jmp	#LR__3871
2685c     30 00 90 FD | 	jmp	#LR__3872
26860                 | LR__3870
26860     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26864     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26868     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2686c     0B FB 61 FC | 	wrlong	result1, arg03
26870     00 FA 05 F6 | 	mov	result1, #0
26874     28 00 90 FD | 	jmp	#LR__3873
26878                 | LR__3871
26878     0B 13 02 FB | 	rdlong	arg01, arg03
2687c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26880     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26884     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26888     00 FA 05 F6 | 	mov	result1, #0
2688c     10 00 90 FD | 	jmp	#LR__3873
26890                 | LR__3872
26890     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26894     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26898     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2689c     01 FA 65 F6 | 	neg	result1, #1
268a0                 | LR__3873
268a0                 | __system___rxtxioctl_0697_ret
268a0     2D 00 64 FD | 	ret
268a4                 | 
268a4                 | __system____dummy_flush_0698
268a4     00 FA 05 F6 | 	mov	result1, #0
268a8                 | __system____dummy_flush_0698_ret
268a8     2D 00 64 FD | 	ret
268ac                 | 
268ac                 | __system___vfswrite
268ac     09 4A 05 F6 | 	mov	COUNT_, #9
268b0     A8 00 A0 FD | 	call	#pushregs_
268b4     09 1F 02 F6 | 	mov	local01, arg01
268b8     0A 21 02 F6 | 	mov	local02, arg02
268bc     0B 23 02 F6 | 	mov	local03, arg03
268c0     10 25 02 F6 | 	mov	local04, local02
268c4     08 1E 06 F1 | 	add	local01, #8
268c8     0F 13 02 FB | 	rdlong	arg01, local01
268cc     08 1E 86 F1 | 	sub	local01, #8
268d0     02 12 CE F7 | 	test	arg01, #2 wz
268d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
268d8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
268dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
268e0     01 FA 65 A6 |  if_e	neg	result1, #1
268e4     80 01 90 AD |  if_e	jmp	#LR__3886
268e8     08 1E 06 F1 | 	add	local01, #8
268ec     0F FB 01 FB | 	rdlong	result1, local01
268f0     08 1E 86 F1 | 	sub	local01, #8
268f4     40 FA CD F7 | 	test	result1, #64 wz
268f8     68 00 90 AD |  if_e	jmp	#LR__3881
268fc     08 1E 06 F1 | 	add	local01, #8
26900     0F 15 02 FB | 	rdlong	arg02, local01
26904     08 1E 86 F1 | 	sub	local01, #8
26908     80 14 CE F7 | 	test	arg02, #128 wz
2690c     54 00 90 AD |  if_e	jmp	#LR__3880
26910     30 1E 06 F1 | 	add	local01, #48
26914     0F 27 02 FB | 	rdlong	local05, local01
26918     13 29 02 F6 | 	mov	local06, local05
2691c     30 1E 86 F1 | 	sub	local01, #48
26920     13 28 46 F7 | 	zerox	local06, #19
26924     14 26 46 F0 | 	shr	local05, #20
26928     02 26 66 F0 | 	shl	local05, #2
2692c     ED 26 02 F1 | 	add	local05, __methods__
26930     13 27 02 FB | 	rdlong	local05, local05
26934     0F 13 02 F6 | 	mov	arg01, local01
26938     00 14 06 F6 | 	mov	arg02, #0
2693c     02 16 06 F6 | 	mov	arg03, #2
26940     F2 2A 02 F6 | 	mov	local07, objptr
26944     14 E5 01 F6 | 	mov	objptr, local06
26948     2D 26 62 FD | 	call	local05
2694c     15 E5 01 F6 | 	mov	objptr, local07
26950     08 1E 06 F1 | 	add	local01, #8
26954     0F 2B 02 FB | 	rdlong	local07, local01
26958     80 2A 26 F5 | 	andn	local07, #128
2695c     0F 2B 62 FC | 	wrlong	local07, local01
26960     08 1E 86 F1 | 	sub	local01, #8
26964                 | LR__3880
26964                 | LR__3881
26964     18 1E 06 F1 | 	add	local01, #24
26968     0F 2B 0A FB | 	rdlong	local07, local01 wz
2696c     18 1E 86 F1 | 	sub	local01, #24
26970     80 00 90 AD |  if_e	jmp	#LR__3883
26974     18 1E 06 F1 | 	add	local01, #24
26978     0F 27 02 FB | 	rdlong	local05, local01
2697c     13 29 02 F6 | 	mov	local06, local05
26980     18 1E 86 F1 | 	sub	local01, #24
26984     13 28 46 F7 | 	zerox	local06, #19
26988     14 26 46 F0 | 	shr	local05, #20
2698c     02 26 66 F0 | 	shl	local05, #2
26990     ED 26 02 F1 | 	add	local05, __methods__
26994     13 27 02 FB | 	rdlong	local05, local05
26998     10 15 02 F6 | 	mov	arg02, local02
2699c     11 17 02 F6 | 	mov	arg03, local03
269a0     0F 13 02 F6 | 	mov	arg01, local01
269a4     F2 2A 02 F6 | 	mov	local07, objptr
269a8     14 E5 01 F6 | 	mov	objptr, local06
269ac     2D 26 62 FD | 	call	local05
269b0     15 E5 01 F6 | 	mov	objptr, local07
269b4     FD 2C 02 F6 | 	mov	local08, result1
269b8     00 2C 56 F2 | 	cmps	local08, #0 wc
269bc     2C 00 90 3D |  if_ae	jmp	#LR__3882
269c0     08 1E 06 F1 | 	add	local01, #8
269c4     0F 2B 02 FB | 	rdlong	local07, local01
269c8     20 2A 46 F5 | 	or	local07, #32
269cc     0F 2B 62 FC | 	wrlong	local07, local01
269d0     00 2C 4E F2 | 	cmps	local08, #0 wz
269d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
269d8     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
269dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
269e0     01 FA 65 56 |  if_ne	neg	result1, #1
269e4     00 FA 05 A6 |  if_e	mov	result1, #0
269e8     7C 00 90 FD | 	jmp	#LR__3886
269ec                 | LR__3882
269ec     16 FB 01 F6 | 	mov	result1, local08
269f0     74 00 90 FD | 	jmp	#LR__3886
269f4                 | LR__3883
269f4     1C 1E 06 F1 | 	add	local01, #28
269f8     0F 2F 0A FB | 	rdlong	local09, local01 wz
269fc     1C 1E 86 F1 | 	sub	local01, #28
26a00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26a04     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26a08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a0c     01 FA 65 A6 |  if_e	neg	result1, #1
26a10     54 00 90 AD |  if_e	jmp	#LR__3886
26a14     00 2C 06 F6 | 	mov	local08, #0
26a18                 | LR__3884
26a18     01 22 16 F2 | 	cmp	local03, #1 wc
26a1c     44 00 90 CD |  if_b	jmp	#LR__3885
26a20     17 29 02 F6 | 	mov	local06, local09
26a24     17 27 02 F6 | 	mov	local05, local09
26a28     13 28 46 F7 | 	zerox	local06, #19
26a2c     14 26 46 F0 | 	shr	local05, #20
26a30     02 26 66 F0 | 	shl	local05, #2
26a34     ED 26 02 F1 | 	add	local05, __methods__
26a38     13 27 02 FB | 	rdlong	local05, local05
26a3c     12 13 C2 FA | 	rdbyte	arg01, local04
26a40     0F 15 02 F6 | 	mov	arg02, local01
26a44     F2 2A 02 F6 | 	mov	local07, objptr
26a48     14 E5 01 F6 | 	mov	objptr, local06
26a4c     01 24 06 F1 | 	add	local04, #1
26a50     2D 26 62 FD | 	call	local05
26a54     15 E5 01 F6 | 	mov	objptr, local07
26a58     FD 2C 02 F1 | 	add	local08, result1
26a5c     01 22 86 F1 | 	sub	local03, #1
26a60     B4 FF 9F FD | 	jmp	#LR__3884
26a64                 | LR__3885
26a64     16 FB 01 F6 | 	mov	result1, local08
26a68                 | LR__3886
26a68     A7 F0 03 F6 | 	mov	ptra, fp
26a6c     B2 00 A0 FD | 	call	#popregs_
26a70                 | __system___vfswrite_ret
26a70     2D 00 64 FD | 	ret
26a74                 | 
26a74                 | __system___vfsread
26a74     03 4A 05 F6 | 	mov	COUNT_, #3
26a78     A8 00 A0 FD | 	call	#pushregs_
26a7c     28 F0 07 F1 | 	add	ptra, #40
26a80     04 4E 05 F1 | 	add	fp, #4
26a84     A7 12 62 FC | 	wrlong	arg01, fp
26a88     04 4E 05 F1 | 	add	fp, #4
26a8c     A7 14 62 FC | 	wrlong	arg02, fp
26a90     04 4E 05 F1 | 	add	fp, #4
26a94     A7 16 62 FC | 	wrlong	arg03, fp
26a98     04 4E 85 F1 | 	sub	fp, #4
26a9c     A7 FA 01 FB | 	rdlong	result1, fp
26aa0     14 4E 05 F1 | 	add	fp, #20
26aa4     A7 FA 61 FC | 	wrlong	result1, fp
26aa8     04 4E 05 F1 | 	add	fp, #4
26aac     A7 00 68 FC | 	wrlong	#0, fp
26ab0     1C 4E 85 F1 | 	sub	fp, #28
26ab4     A7 12 02 FB | 	rdlong	arg01, fp
26ab8     04 4E 85 F1 | 	sub	fp, #4
26abc     08 12 06 F1 | 	add	arg01, #8
26ac0     09 FB 01 FB | 	rdlong	result1, arg01
26ac4     01 FA CD F7 | 	test	result1, #1 wz
26ac8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26acc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26ad0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26ad4     01 FA 65 A6 |  if_e	neg	result1, #1
26ad8     74 02 90 AD |  if_e	jmp	#LR__3896
26adc     04 4E 05 F1 | 	add	fp, #4
26ae0     A7 12 02 FB | 	rdlong	arg01, fp
26ae4     04 4E 85 F1 | 	sub	fp, #4
26ae8     14 12 06 F1 | 	add	arg01, #20
26aec     09 FB 09 FB | 	rdlong	result1, arg01 wz
26af0     B8 00 90 AD |  if_e	jmp	#LR__3891
26af4     04 4E 05 F1 | 	add	fp, #4
26af8     A7 12 02 FB | 	rdlong	arg01, fp
26afc     09 17 02 F6 | 	mov	arg03, arg01
26b00     14 16 06 F1 | 	add	arg03, #20
26b04     0B 1F 02 FB | 	rdlong	local01, arg03
26b08     0F 21 02 F6 | 	mov	local02, local01
26b0c     13 1E 46 F7 | 	zerox	local01, #19
26b10     14 20 46 F0 | 	shr	local02, #20
26b14     02 20 66 F0 | 	shl	local02, #2
26b18     ED 20 02 F1 | 	add	local02, __methods__
26b1c     10 21 02 FB | 	rdlong	local02, local02
26b20     04 4E 05 F1 | 	add	fp, #4
26b24     A7 14 02 FB | 	rdlong	arg02, fp
26b28     04 4E 05 F1 | 	add	fp, #4
26b2c     A7 16 02 FB | 	rdlong	arg03, fp
26b30     0C 4E 85 F1 | 	sub	fp, #12
26b34     F2 22 02 F6 | 	mov	local03, objptr
26b38     0F E5 01 F6 | 	mov	objptr, local01
26b3c     2D 20 62 FD | 	call	local02
26b40     11 E5 01 F6 | 	mov	objptr, local03
26b44     10 4E 05 F1 | 	add	fp, #16
26b48     A7 FA 61 FC | 	wrlong	result1, fp
26b4c     10 4E 85 F1 | 	sub	fp, #16
26b50     00 FA 55 F2 | 	cmps	result1, #0 wc
26b54     44 00 90 3D |  if_ae	jmp	#LR__3890
26b58     04 4E 05 F1 | 	add	fp, #4
26b5c     A7 22 02 FB | 	rdlong	local03, fp
26b60     11 1F 02 F6 | 	mov	local01, local03
26b64     08 22 06 F1 | 	add	local03, #8
26b68     11 21 02 FB | 	rdlong	local02, local03
26b6c     20 20 46 F5 | 	or	local02, #32
26b70     08 1E 06 F1 | 	add	local01, #8
26b74     0F 21 62 FC | 	wrlong	local02, local01
26b78     0C 4E 05 F1 | 	add	fp, #12
26b7c     A7 12 0A FB | 	rdlong	arg01, fp wz
26b80     10 4E 85 F1 | 	sub	fp, #16
26b84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b88     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26b8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b90     01 FA 65 56 |  if_ne	neg	result1, #1
26b94     00 FA 05 A6 |  if_e	mov	result1, #0
26b98     B4 01 90 FD | 	jmp	#LR__3896
26b9c                 | LR__3890
26b9c     10 4E 05 F1 | 	add	fp, #16
26ba0     A7 FA 01 FB | 	rdlong	result1, fp
26ba4     10 4E 85 F1 | 	sub	fp, #16
26ba8     A4 01 90 FD | 	jmp	#LR__3896
26bac                 | LR__3891
26bac     04 4E 05 F1 | 	add	fp, #4
26bb0     A7 12 02 FB | 	rdlong	arg01, fp
26bb4     20 12 06 F1 | 	add	arg01, #32
26bb8     09 13 0A FB | 	rdlong	arg01, arg01 wz
26bbc     14 4E 05 F1 | 	add	fp, #20
26bc0     A7 12 62 FC | 	wrlong	arg01, fp
26bc4     18 4E 85 F1 | 	sub	fp, #24
26bc8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26bcc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26bd0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26bd4     01 FA 65 A6 |  if_e	neg	result1, #1
26bd8     74 01 90 AD |  if_e	jmp	#LR__3896
26bdc     04 4E 05 F1 | 	add	fp, #4
26be0     A7 22 02 FB | 	rdlong	local03, fp
26be4     04 4E 85 F1 | 	sub	fp, #4
26be8     28 22 06 F1 | 	add	local03, #40
26bec     11 21 0A FB | 	rdlong	local02, local03 wz
26bf0     7C 00 90 AD |  if_e	jmp	#LR__3893
26bf4     04 4E 05 F1 | 	add	fp, #4
26bf8     A7 12 02 FB | 	rdlong	arg01, fp
26bfc     09 23 02 F6 | 	mov	local03, arg01
26c00     28 22 06 F1 | 	add	local03, #40
26c04     11 1F 02 FB | 	rdlong	local01, local03
26c08     0F 21 02 F6 | 	mov	local02, local01
26c0c     13 1E 46 F7 | 	zerox	local01, #19
26c10     14 20 46 F0 | 	shr	local02, #20
26c14     02 20 66 F0 | 	shl	local02, #2
26c18     ED 20 02 F1 | 	add	local02, __methods__
26c1c     10 21 02 FB | 	rdlong	local02, local02
26c20     20 4E 05 F1 | 	add	fp, #32
26c24     A7 16 02 F6 | 	mov	arg03, fp
26c28     24 4E 85 F1 | 	sub	fp, #36
26c2c     00 15 06 F6 | 	mov	arg02, #256
26c30     F2 22 02 F6 | 	mov	local03, objptr
26c34     0F E5 01 F6 | 	mov	objptr, local01
26c38     2D 20 62 FD | 	call	local02
26c3c     11 E5 01 F6 | 	mov	objptr, local03
26c40     10 4E 05 F1 | 	add	fp, #16
26c44     A7 FA 61 FC | 	wrlong	result1, fp
26c48     00 FA 4D F2 | 	cmps	result1, #0 wz
26c4c     10 4E 85 F1 | 	sub	fp, #16
26c50     1C 00 90 5D |  if_ne	jmp	#LR__3892
26c54     24 4E 05 F1 | 	add	fp, #36
26c58     A7 20 02 FB | 	rdlong	local02, fp
26c5c     24 4E 85 F1 | 	sub	fp, #36
26c60     02 20 CE F7 | 	test	local02, #2 wz
26c64     20 4E 05 51 |  if_ne	add	fp, #32
26c68     A7 02 68 5C |  if_ne	wrlong	#1, fp
26c6c     20 4E 85 51 |  if_ne	sub	fp, #32
26c70                 | LR__3892
26c70                 | LR__3893
26c70     10 4E 05 F1 | 	add	fp, #16
26c74     A7 00 68 FC | 	wrlong	#0, fp
26c78     10 4E 85 F1 | 	sub	fp, #16
26c7c                 | LR__3894
26c7c     0C 4E 05 F1 | 	add	fp, #12
26c80     A7 22 02 FB | 	rdlong	local03, fp
26c84     0C 4E 85 F1 | 	sub	fp, #12
26c88     01 22 16 F2 | 	cmp	local03, #1 wc
26c8c     B4 00 90 CD |  if_b	jmp	#LR__3895
26c90     18 4E 05 F1 | 	add	fp, #24
26c94     A7 20 02 FB | 	rdlong	local02, fp
26c98     10 23 02 F6 | 	mov	local03, local02
26c9c     13 22 46 F7 | 	zerox	local03, #19
26ca0     14 20 46 F0 | 	shr	local02, #20
26ca4     02 20 66 F0 | 	shl	local02, #2
26ca8     ED 20 02 F1 | 	add	local02, __methods__
26cac     10 21 02 FB | 	rdlong	local02, local02
26cb0     14 4E 85 F1 | 	sub	fp, #20
26cb4     A7 12 02 FB | 	rdlong	arg01, fp
26cb8     04 4E 85 F1 | 	sub	fp, #4
26cbc     F2 1E 02 F6 | 	mov	local01, objptr
26cc0     11 E5 01 F6 | 	mov	objptr, local03
26cc4     2D 20 62 FD | 	call	local02
26cc8     0F E5 01 F6 | 	mov	objptr, local01
26ccc     14 4E 05 F1 | 	add	fp, #20
26cd0     A7 FA 61 FC | 	wrlong	result1, fp
26cd4     14 4E 85 F1 | 	sub	fp, #20
26cd8     00 FA 55 F2 | 	cmps	result1, #0 wc
26cdc     64 00 90 CD |  if_b	jmp	#LR__3895
26ce0     1C 4E 05 F1 | 	add	fp, #28
26ce4     A7 22 02 FB | 	rdlong	local03, fp
26ce8     11 21 02 F6 | 	mov	local02, local03
26cec     01 20 06 F1 | 	add	local02, #1
26cf0     A7 20 62 FC | 	wrlong	local02, fp
26cf4     08 4E 85 F1 | 	sub	fp, #8
26cf8     A7 20 02 FB | 	rdlong	local02, fp
26cfc     11 21 42 FC | 	wrbyte	local02, local03
26d00     04 4E 85 F1 | 	sub	fp, #4
26d04     A7 22 02 FB | 	rdlong	local03, fp
26d08     01 22 06 F1 | 	add	local03, #1
26d0c     A7 22 62 FC | 	wrlong	local03, fp
26d10     04 4E 85 F1 | 	sub	fp, #4
26d14     A7 22 02 FB | 	rdlong	local03, fp
26d18     01 22 86 F1 | 	sub	local03, #1
26d1c     A7 22 62 FC | 	wrlong	local03, fp
26d20     14 4E 05 F1 | 	add	fp, #20
26d24     A7 22 0A FB | 	rdlong	local03, fp wz
26d28     20 4E 85 F1 | 	sub	fp, #32
26d2c     4C FF 9F AD |  if_e	jmp	#LR__3894
26d30     14 4E 05 F1 | 	add	fp, #20
26d34     A7 20 02 FB | 	rdlong	local02, fp
26d38     14 4E 85 F1 | 	sub	fp, #20
26d3c     0A 20 0E F2 | 	cmp	local02, #10 wz
26d40     38 FF 9F 5D |  if_ne	jmp	#LR__3894
26d44                 | LR__3895
26d44     10 4E 05 F1 | 	add	fp, #16
26d48     A7 FA 01 FB | 	rdlong	result1, fp
26d4c     10 4E 85 F1 | 	sub	fp, #16
26d50                 | LR__3896
26d50     A7 F0 03 F6 | 	mov	ptra, fp
26d54     B2 00 A0 FD | 	call	#popregs_
26d58                 | __system___vfsread_ret
26d58     2D 00 64 FD | 	ret
26d5c                 | 
26d5c                 | __system____default_filbuf
26d5c     04 4A 05 F6 | 	mov	COUNT_, #4
26d60     A8 00 A0 FD | 	call	#pushregs_
26d64     09 1F 02 F6 | 	mov	local01, arg01
26d68     0F 21 02 FB | 	rdlong	local02, local01
26d6c     0C 20 06 F1 | 	add	local02, #12
26d70     10 FB 09 FB | 	rdlong	result1, local02 wz
26d74     0C 20 86 F1 | 	sub	local02, #12
26d78     20 00 90 5D |  if_ne	jmp	#LR__3900
26d7c     14 20 06 F1 | 	add	local02, #20
26d80     10 FB 01 F6 | 	mov	result1, local02
26d84     04 20 86 F1 | 	sub	local02, #4
26d88     10 FB 61 FC | 	wrlong	result1, local02
26d8c     04 20 86 F1 | 	sub	local02, #4
26d90     02 00 80 FF 
26d94     10 01 68 FC | 	wrlong	##1024, local02
26d98     0C 20 86 F1 | 	sub	local02, #12
26d9c                 | LR__3900
26d9c     14 1E 06 F1 | 	add	local01, #20
26da0     0F 23 02 FB | 	rdlong	local03, local01
26da4     11 25 02 F6 | 	mov	local04, local03
26da8     14 1E 86 F1 | 	sub	local01, #20
26dac     13 24 46 F7 | 	zerox	local04, #19
26db0     14 22 46 F0 | 	shr	local03, #20
26db4     02 22 66 F0 | 	shl	local03, #2
26db8     ED 22 02 F1 | 	add	local03, __methods__
26dbc     11 23 02 FB | 	rdlong	local03, local03
26dc0     10 20 06 F1 | 	add	local02, #16
26dc4     10 15 02 FB | 	rdlong	arg02, local02
26dc8     04 20 86 F1 | 	sub	local02, #4
26dcc     10 17 02 FB | 	rdlong	arg03, local02
26dd0     0C 20 86 F1 | 	sub	local02, #12
26dd4     0F 13 02 F6 | 	mov	arg01, local01
26dd8     F2 1E 02 F6 | 	mov	local01, objptr
26ddc     12 E5 01 F6 | 	mov	objptr, local04
26de0     2D 22 62 FD | 	call	local03
26de4     0F E5 01 F6 | 	mov	objptr, local01
26de8     FD 24 02 F6 | 	mov	local04, result1
26dec     00 24 56 F2 | 	cmps	local04, #0 wc
26df0     01 FA 65 C6 |  if_b	neg	result1, #1
26df4     28 00 90 CD |  if_b	jmp	#LR__3901
26df8     10 25 62 FC | 	wrlong	local04, local02
26dfc     10 20 06 F1 | 	add	local02, #16
26e00     10 23 02 FB | 	rdlong	local03, local02
26e04     0C 20 86 F1 | 	sub	local02, #12
26e08     10 23 62 FC | 	wrlong	local03, local02
26e0c     04 20 06 F1 | 	add	local02, #4
26e10     10 23 02 FB | 	rdlong	local03, local02
26e14     01 22 46 F5 | 	or	local03, #1
26e18     10 23 62 FC | 	wrlong	local03, local02
26e1c     12 FB 01 F6 | 	mov	result1, local04
26e20                 | LR__3901
26e20     A7 F0 03 F6 | 	mov	ptra, fp
26e24     B2 00 A0 FD | 	call	#popregs_
26e28                 | __system____default_filbuf_ret
26e28     2D 00 64 FD | 	ret
26e2c                 | 
26e2c                 | __system__getlower_1083
26e2c     41 12 56 F2 | 	cmps	arg01, #65 wc
26e30     10 00 90 CD |  if_b	jmp	#LR__3910
26e34     5B 12 56 F2 | 	cmps	arg01, #91 wc
26e38     09 FB 01 C6 |  if_b	mov	result1, arg01
26e3c     20 FA 05 C1 |  if_b	add	result1, #32
26e40     04 00 90 CD |  if_b	jmp	#__system__getlower_1083_ret
26e44                 | LR__3910
26e44     09 FB 01 F6 | 	mov	result1, arg01
26e48                 | __system__getlower_1083_ret
26e48     2D 00 64 FD | 	ret
26e4c                 | 
26e4c                 | __system___pat_match
26e4c     08 4A 05 F6 | 	mov	COUNT_, #8
26e50     A8 00 A0 FD | 	call	#pushregs_
26e54     09 1F 02 F6 | 	mov	local01, arg01
26e58                 | LR__3920
26e58     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
26e5c     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
26e60     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
26e64     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
26e68     2C 00 90 AD |  if_e	jmp	#LR__3921
26e6c     0A 13 C2 FA | 	rdbyte	arg01, arg02
26e70     B8 FF BF FD | 	call	#__system__getlower_1083
26e74     FD 22 02 F6 | 	mov	local03, result1
26e78     0F 13 C2 FA | 	rdbyte	arg01, local01
26e7c     AC FF BF FD | 	call	#__system__getlower_1083
26e80     11 FB 09 F2 | 	cmp	result1, local03 wz
26e84     00 FA 05 56 |  if_ne	mov	result1, #0
26e88     FC 00 90 5D |  if_ne	jmp	#LR__3929
26e8c     01 1E 06 F1 | 	add	local01, #1
26e90     01 14 06 F1 | 	add	arg02, #1
26e94     C0 FF 9F FD | 	jmp	#LR__3920
26e98                 | LR__3921
26e98     0A 23 C2 FA | 	rdbyte	local03, arg02
26e9c     2A 22 0E F2 | 	cmp	local03, #42 wz
26ea0     D4 00 90 5D |  if_ne	jmp	#LR__3928
26ea4     01 14 06 F1 | 	add	arg02, #1
26ea8     0A 21 C2 FA | 	rdbyte	local02, arg02
26eac     01 14 86 F1 | 	sub	arg02, #1
26eb0     2E 20 0E F2 | 	cmp	local02, #46 wz
26eb4     28 00 90 5D |  if_ne	jmp	#LR__3922
26eb8     02 14 06 F1 | 	add	arg02, #2
26ebc     0A 21 C2 FA | 	rdbyte	local02, arg02
26ec0     02 14 86 F1 | 	sub	arg02, #2
26ec4     2A 20 0E F2 | 	cmp	local02, #42 wz
26ec8     03 14 06 A1 |  if_e	add	arg02, #3
26ecc     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
26ed0     03 14 86 A1 |  if_e	sub	arg02, #3
26ed4     12 27 0A A6 |  if_e	mov	local05, local04 wz
26ed8     01 FA 05 A6 |  if_e	mov	result1, #1
26edc     A8 00 90 AD |  if_e	jmp	#LR__3929
26ee0                 | LR__3922
26ee0     01 14 06 F1 | 	add	arg02, #1
26ee4     00 28 06 F6 | 	mov	local06, #0
26ee8     97 1E 48 FB | 	callpa	#(@LR__3925-@LR__3923)>>2,fcache_load_ptr_
26eec                 | LR__3923
26eec     14 2B 02 F6 | 	mov	local07, local06
26ef0     0A 2B 02 F1 | 	add	local07, arg02
26ef4     15 2B CA FA | 	rdbyte	local07, local07 wz
26ef8     14 27 02 56 |  if_ne	mov	local05, local06
26efc     01 26 06 51 |  if_ne	add	local05, #1
26f00     13 29 02 56 |  if_ne	mov	local06, local05
26f04     E4 FF 9F 5D |  if_ne	jmp	#LR__3923
26f08     00 2C 06 F6 | 	mov	local08, #0
26f0c                 | LR__3924
26f0c     16 2B 02 F6 | 	mov	local07, local08
26f10     0F 2B 02 F1 | 	add	local07, local01
26f14     15 2B CA FA | 	rdbyte	local07, local07 wz
26f18     16 27 02 56 |  if_ne	mov	local05, local08
26f1c     01 26 06 51 |  if_ne	add	local05, #1
26f20     13 2D 02 56 |  if_ne	mov	local08, local05
26f24     E4 FF 9F 5D |  if_ne	jmp	#LR__3924
26f28                 | LR__3925
26f28     14 2D 52 F2 | 	cmps	local08, local06 wc
26f2c     00 FA 05 C6 |  if_b	mov	result1, #0
26f30     54 00 90 CD |  if_b	jmp	#LR__3929
26f34     16 21 02 F6 | 	mov	local02, local08
26f38     14 21 82 F1 | 	sub	local02, local06
26f3c     10 1F 02 F1 | 	add	local01, local02
26f40                 | LR__3926
26f40     01 28 56 F2 | 	cmps	local06, #1 wc
26f44     30 00 90 CD |  if_b	jmp	#LR__3927
26f48     0F 13 C2 FA | 	rdbyte	arg01, local01
26f4c     DC FE BF FD | 	call	#__system__getlower_1083
26f50     FD 2C 02 F6 | 	mov	local08, result1
26f54     0A 13 C2 FA | 	rdbyte	arg01, arg02
26f58     D0 FE BF FD | 	call	#__system__getlower_1083
26f5c     FD 2C 0A F2 | 	cmp	local08, result1 wz
26f60     00 FA 05 56 |  if_ne	mov	result1, #0
26f64     20 00 90 5D |  if_ne	jmp	#LR__3929
26f68     01 1E 06 F1 | 	add	local01, #1
26f6c     01 14 06 F1 | 	add	arg02, #1
26f70     01 28 86 F1 | 	sub	local06, #1
26f74     C8 FF 9F FD | 	jmp	#LR__3926
26f78                 | LR__3927
26f78                 | LR__3928
26f78     0A 2D CA FA | 	rdbyte	local08, arg02 wz
26f7c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
26f80     01 FA 05 A6 |  if_e	mov	result1, #1
26f84     00 FA 05 56 |  if_ne	mov	result1, #0
26f88                 | LR__3929
26f88     A7 F0 03 F6 | 	mov	ptra, fp
26f8c     B2 00 A0 FD | 	call	#popregs_
26f90                 | __system___pat_match_ret
26f90     2D 00 64 FD | 	ret
26f94                 | 
26f94                 | _fatfs_cc_ff_uni2oem
26f94     00 00 06 F6 | 	mov	_var01, #0
26f98     80 12 16 F2 | 	cmp	arg01, #128 wc
26f9c     09 01 02 C6 |  if_b	mov	_var01, arg01
26fa0     58 00 90 CD |  if_b	jmp	#LR__3934
26fa4     80 00 00 FF 
26fa8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
26fac     4C 00 90 3D |  if_ae	jmp	#LR__3933
26fb0     0A FB 31 F9 | 	getword	result1, arg02, #0
26fb4     01 00 00 FF 
26fb8     52 FB 0D F2 | 	cmp	result1, ##850 wz
26fbc     3C 00 90 5D |  if_ne	jmp	#LR__3933
26fc0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
26fc0     00 00 06 F6 | 	mov	_var01, #0
26fc4     97 14 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
26fc8                 | LR__3930
26fc8     00 FB 31 F9 | 	getword	result1, _var01, #0
26fcc     80 FA 15 F2 | 	cmp	result1, #128 wc
26fd0     1C 00 90 3D |  if_ae	jmp	#LR__3932
26fd4     00 FB 31 F9 | 	getword	result1, _var01, #0
26fd8     01 FA 65 F0 | 	shl	result1, #1
26fdc     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
26fe0     FD FA E1 FA | 	rdword	result1, result1
26fe4     FD 12 0A F2 | 	cmp	arg01, result1 wz
26fe8     01 00 06 51 |  if_ne	add	_var01, #1
26fec     D8 FF 9F 5D |  if_ne	jmp	#LR__3930
26ff0                 | LR__3931
26ff0                 | LR__3932
26ff0     00 01 32 F9 | 	getword	_var01, _var01, #0
26ff4     80 00 06 F1 | 	add	_var01, #128
26ff8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
26ffc                 | LR__3933
26ffc                 | LR__3934
26ffc                 | ' 			c = (c + 0x80) & 0xFF;
26ffc                 | ' 		}
26ffc                 | ' 	}
26ffc                 | ' 
26ffc                 | ' 	return c;
26ffc     00 FB 01 F6 | 	mov	result1, _var01
27000                 | _fatfs_cc_ff_uni2oem_ret
27000     2D 00 64 FD | 	ret
27004                 | 
27004                 | _fatfs_cc_ff_oem2uni
27004     00 00 06 F6 | 	mov	_var01, #0
27008     09 FB 31 F9 | 	getword	result1, arg01, #0
2700c     80 FA 15 F2 | 	cmp	result1, #128 wc
27010     09 01 02 C6 |  if_b	mov	_var01, arg01
27014     2C 00 90 CD |  if_b	jmp	#LR__3941
27018     0A 15 32 F9 | 	getword	arg02, arg02, #0
2701c     01 00 00 FF 
27020     52 15 0E F2 | 	cmp	arg02, ##850 wz
27024     1C 00 90 5D |  if_ne	jmp	#LR__3940
27028     09 FB 31 F9 | 	getword	result1, arg01, #0
2702c     00 FB 15 F2 | 	cmp	result1, #256 wc
27030     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
27034     80 12 86 C1 |  if_b	sub	arg01, #128
27038     01 12 66 C0 |  if_b	shl	arg01, #1
2703c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
27040     09 01 E2 CA |  if_b	rdword	_var01, arg01
27044                 | LR__3940
27044                 | LR__3941
27044                 | ' 		}
27044                 | ' 	}
27044                 | ' 
27044                 | ' 	return c;
27044     00 FB 01 F6 | 	mov	result1, _var01
27048                 | _fatfs_cc_ff_oem2uni_ret
27048     2D 00 64 FD | 	ret
2704c                 | 
2704c                 | _fatfs_cc_ff_wtoupper
2704c     09 01 02 F6 | 	mov	_var01, arg01
27050     80 00 00 FF 
27054     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27058     60 01 90 3D |  if_ae	jmp	#LR__3963
2705c     00 03 02 F6 | 	mov	_var02, _var01
27060     01 01 32 F9 | 	getword	_var01, _var02, #0
27064     08 00 00 FF 
27068     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2706c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27070     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
27074     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27078     01 00 00 3F 
2707c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27080     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
27084     01 00 00 3F 
27088     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2708c     02 07 02 F6 | 	mov	_var04, _var03
27090                 | ' 		uc = (WORD)uni;
27090                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27090                 | ' 		for (;;) {
27090                 | LR__3950
27090     03 09 E2 FA | 	rdword	_var05, _var04
27094     04 05 02 F6 | 	mov	_var03, _var05
27098     0F 04 4E F7 | 	zerox	_var03, #15 wz
2709c     02 06 06 F1 | 	add	_var04, #2
270a0     14 01 90 AD |  if_e	jmp	#LR__3962
270a4     01 05 32 F9 | 	getword	_var03, _var02, #0
270a8     04 01 32 F9 | 	getword	_var01, _var05, #0
270ac     00 05 12 F2 | 	cmp	_var03, _var01 wc
270b0     04 01 90 CD |  if_b	jmp	#LR__3962
270b4     03 0B E2 FA | 	rdword	_var06, _var04
270b8     05 0D 32 F9 | 	getword	_var07, _var06, #0
270bc     08 0C 46 F0 | 	shr	_var07, #8
270c0     05 0B 32 F9 | 	getword	_var06, _var06, #0
270c4     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
270c8     01 05 32 F9 | 	getword	_var03, _var02, #0
270cc     04 0F 32 F9 | 	getword	_var08, _var05, #0
270d0     05 01 32 F9 | 	getword	_var01, _var06, #0
270d4     00 0F 02 F1 | 	add	_var08, _var01
270d8     07 05 52 F2 | 	cmps	_var03, _var08 wc
270dc     02 06 06 F1 | 	add	_var04, #2
270e0     C4 00 90 3D |  if_ae	jmp	#LR__3961
270e4                 | ' 				switch (cmd) {
270e4     06 11 32 F9 | 	getword	_var09, _var07, #0
270e8     09 10 26 F3 | 	fle	_var09, #9
270ec     30 10 62 FD | 	jmprel	_var09
270f0                 | LR__3951
270f0     24 00 90 FD | 	jmp	#LR__3952
270f4     3C 00 90 FD | 	jmp	#LR__3953
270f8     54 00 90 FD | 	jmp	#LR__3954
270fc     5C 00 90 FD | 	jmp	#LR__3955
27100     64 00 90 FD | 	jmp	#LR__3956
27104     6C 00 90 FD | 	jmp	#LR__3957
27108     74 00 90 FD | 	jmp	#LR__3958
2710c     7C 00 90 FD | 	jmp	#LR__3959
27110     84 00 90 FD | 	jmp	#LR__3960
27114     A0 00 90 FD | 	jmp	#LR__3962
27118                 | LR__3952
27118     01 03 32 F9 | 	getword	_var02, _var02, #0
2711c     04 09 32 F9 | 	getword	_var05, _var05, #0
27120     04 03 82 F1 | 	sub	_var02, _var05
27124     01 02 66 F0 | 	shl	_var02, #1
27128     03 03 02 F1 | 	add	_var02, _var04
2712c     01 03 E2 FA | 	rdword	_var02, _var02
27130     84 00 90 FD | 	jmp	#LR__3962
27134                 | LR__3953
27134     01 05 32 F9 | 	getword	_var03, _var02, #0
27138     01 03 32 F9 | 	getword	_var02, _var02, #0
2713c     04 09 32 F9 | 	getword	_var05, _var05, #0
27140     04 03 82 F1 | 	sub	_var02, _var05
27144     01 02 06 F5 | 	and	_var02, #1
27148     02 03 C2 F2 | 	subr	_var02, _var03
2714c     68 00 90 FD | 	jmp	#LR__3962
27150                 | LR__3954
27150     01 03 32 F9 | 	getword	_var02, _var02, #0
27154     10 02 86 F1 | 	sub	_var02, #16
27158     5C 00 90 FD | 	jmp	#LR__3962
2715c                 | LR__3955
2715c     01 03 32 F9 | 	getword	_var02, _var02, #0
27160     20 02 86 F1 | 	sub	_var02, #32
27164     50 00 90 FD | 	jmp	#LR__3962
27168                 | LR__3956
27168     01 03 32 F9 | 	getword	_var02, _var02, #0
2716c     30 02 86 F1 | 	sub	_var02, #48
27170     44 00 90 FD | 	jmp	#LR__3962
27174                 | LR__3957
27174     01 03 32 F9 | 	getword	_var02, _var02, #0
27178     1A 02 86 F1 | 	sub	_var02, #26
2717c     38 00 90 FD | 	jmp	#LR__3962
27180                 | LR__3958
27180     01 03 32 F9 | 	getword	_var02, _var02, #0
27184     08 02 06 F1 | 	add	_var02, #8
27188     2C 00 90 FD | 	jmp	#LR__3962
2718c                 | LR__3959
2718c     01 03 32 F9 | 	getword	_var02, _var02, #0
27190     50 02 86 F1 | 	sub	_var02, #80
27194     20 00 90 FD | 	jmp	#LR__3962
27198                 | LR__3960
27198     01 03 32 F9 | 	getword	_var02, _var02, #0
2719c     0E 00 00 FF 
271a0     60 02 86 F1 | 	sub	_var02, ##7264
271a4                 | ' 				}
271a4                 | ' 				break;
271a4     10 00 90 FD | 	jmp	#LR__3962
271a8                 | LR__3961
271a8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
271ac     02 0A 06 AA |  if_e	mul	_var06, #2
271b0     05 07 02 A1 |  if_e	add	_var04, _var06
271b4     D8 FE 9F FD | 	jmp	#LR__3950
271b8                 | LR__3962
271b8     01 01 32 F9 | 	getword	_var01, _var02, #0
271bc                 | LR__3963
271bc                 | ' 		}
271bc                 | ' 		uni = uc;
271bc                 | ' 	}
271bc                 | ' 
271bc                 | ' 	return uni;
271bc     00 FB 01 F6 | 	mov	result1, _var01
271c0                 | _fatfs_cc_ff_wtoupper_ret
271c0     2D 00 64 FD | 	ret
271c4                 | 
271c4                 | _fatfs_cc_strncpy
271c4     09 01 02 F6 | 	mov	_var01, arg01
271c8     97 12 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
271cc                 | ' 
271cc                 | ' 	dscan = dst;
271cc                 | ' 	sscan = src;
271cc                 | ' 	count = n;
271cc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
271cc                 | LR__3970
271cc     01 16 86 F1 | 	sub	arg03, #1
271d0     00 16 56 F2 | 	cmps	arg03, #0 wc
271d4     18 00 90 CD |  if_b	jmp	#LR__3972
271d8     0A FB C1 FA | 	rdbyte	result1, arg02
271dc     00 FB 41 FC | 	wrbyte	result1, _var01
271e0     01 14 06 F1 | 	add	arg02, #1
271e4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
271e8                 | ' 		continue;
271e8     01 00 06 F1 | 	add	_var01, #1
271ec     DC FF 9F 5D |  if_ne	jmp	#LR__3970
271f0                 | LR__3971
271f0                 | LR__3972
271f0     97 0C 48 FB | 	callpa	#(@LR__3974-@LR__3973)>>2,fcache_load_ptr_
271f4                 | ' 	while (--count >= 0)
271f4                 | LR__3973
271f4     01 16 86 F1 | 	sub	arg03, #1
271f8     00 16 56 F2 | 	cmps	arg03, #0 wc
271fc     00 03 02 36 |  if_ae	mov	_var02, _var01
27200     01 00 06 31 |  if_ae	add	_var01, #1
27204     01 01 48 3C |  if_ae	wrbyte	#0, _var02
27208     E8 FF 9F 3D |  if_ae	jmp	#LR__3973
2720c                 | LR__3974
2720c                 | ' 		*dscan++ = '\0';
2720c                 | ' 	return(dst);
2720c     09 FB 01 F6 | 	mov	result1, arg01
27210                 | _fatfs_cc_strncpy_ret
27210     2D 00 64 FD | 	ret
27214                 | 
27214                 | _fatfs_cc_memcmp
27214                 | ' 	for (n = size; n > 0; n--)
27214     00 16 0E F2 | 	cmp	arg03, #0 wz
27218     28 00 90 AD |  if_e	jmp	#LR__3981
2721c                 | LR__3980
2721c     09 01 C2 FA | 	rdbyte	_var01, arg01
27220     0A 03 C2 FA | 	rdbyte	_var02, arg02
27224     01 01 0A F2 | 	cmp	_var01, _var02 wz
27228     01 12 06 A1 |  if_e	add	arg01, #1
2722c     01 14 06 A1 |  if_e	add	arg02, #1
27230                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
27230     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
27234     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
27238     01 FB 81 51 |  if_ne	sub	result1, _var02
2723c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
27240     F6 17 6E FB | 	djnz	arg03, #LR__3980
27244                 | LR__3981
27244                 | ' 
27244                 | ' 	return(0);
27244     00 FA 05 F6 | 	mov	result1, #0
27248                 | _fatfs_cc_memcmp_ret
27248     2D 00 64 FD | 	ret
2724c                 | 
2724c                 | _fatfs_cc_strncmp
2724c     09 01 0A F6 | 	mov	_var01, arg01 wz
27250     14 00 90 5D |  if_ne	jmp	#LR__3990
27254                 | ' 		return scan2 ? -1 : 0;
27254     00 14 0E F2 | 	cmp	arg02, #0 wz
27258     01 02 66 56 |  if_ne	neg	_var02, #1
2725c     00 02 06 A6 |  if_e	mov	_var02, #0
27260     01 FB 01 F6 | 	mov	result1, _var02
27264     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27268                 | LR__3990
27268     00 14 0E F2 | 	cmp	arg02, #0 wz
2726c     01 FA 05 A6 |  if_e	mov	result1, #1
27270     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27274     0B 05 02 F6 | 	mov	_var03, arg03
27278     97 16 48 FB | 	callpa	#(@LR__3992-@LR__3991)>>2,fcache_load_ptr_
2727c                 | ' 	count = n;
2727c                 | ' 	do {
2727c                 | LR__3991
2727c     00 07 C2 FA | 	rdbyte	_var04, _var01
27280     0A 09 02 F6 | 	mov	_var05, arg02
27284     04 0B C2 FA | 	rdbyte	_var06, _var05
27288     01 04 86 F1 | 	sub	_var03, #1
2728c     00 04 56 F2 | 	cmps	_var03, #0 wc
27290     01 00 06 F1 | 	add	_var01, #1
27294     01 14 06 F1 | 	add	arg02, #1
27298     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2729c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3993
272a0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
272a4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3991
272a8                 | LR__3992
272a8                 | LR__3993
272a8     00 04 56 F2 | 	cmps	_var03, #0 wc
272ac                 | ' 		return(0);
272ac     00 FA 05 C6 |  if_b	mov	result1, #0
272b0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
272b4     05 07 0A F2 | 	cmp	_var04, _var06 wz
272b8                 | ' 		return(0);
272b8     00 FA 05 A6 |  if_e	mov	result1, #0
272bc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
272c0     00 06 0E F2 | 	cmp	_var04, #0 wz
272c4                 | ' 		return(-1);
272c4     01 FA 65 A6 |  if_e	neg	result1, #1
272c8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
272cc     00 0A 0E F2 | 	cmp	_var06, #0 wz
272d0                 | ' 		return(1);
272d0     01 FA 05 A6 |  if_e	mov	result1, #1
272d4                 | ' 		return(c1 - c2);
272d4     03 FB 01 56 |  if_ne	mov	result1, _var04
272d8     05 FB 81 51 |  if_ne	sub	result1, _var06
272dc                 | _fatfs_cc_strncmp_ret
272dc     2D 00 64 FD | 	ret
272e0                 | 
272e0                 | _fatfs_cc_strchr
272e0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
272e0                 | ' 	while ((c = *s++) != (char) charwanted)
272e0                 | LR__4000
272e0     09 01 02 F6 | 	mov	_var01, arg01
272e4     00 03 C2 FA | 	rdbyte	_var02, _var01
272e8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
272ec     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
272f0     03 05 0A F2 | 	cmp	_var03, _var04 wz
272f4     01 12 06 F1 | 	add	arg01, #1
272f8     14 00 90 AD |  if_e	jmp	#LR__4001
272fc     01 05 02 F6 | 	mov	_var03, _var02
27300     07 04 4E F7 | 	zerox	_var03, #7 wz
27304     00 FA 05 A6 |  if_e	mov	result1, #0
27308     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2730c     D0 FF 9F FD | 	jmp	#LR__4000
27310                 | LR__4001
27310                 | ' 	return((char *)--s);
27310     01 12 86 F1 | 	sub	arg01, #1
27314     09 FB 01 F6 | 	mov	result1, arg01
27318                 | _fatfs_cc_strchr_ret
27318     2D 00 64 FD | 	ret
2731c                 | 
2731c                 | _fatfs_cc_disk_initialize
2731c     04 4A 05 F6 | 	mov	COUNT_, #4
27320     A8 00 A0 FD | 	call	#pushregs_
27324     40 F0 07 F1 | 	add	ptra, #64
27328     04 4E 05 F1 | 	add	fp, #4
2732c     A7 12 42 FC | 	wrbyte	arg01, fp
27330     01 00 00 FF 
27334     14 E4 05 F1 | 	add	objptr, ##532
27338     F2 18 02 FB | 	rdlong	arg04, objptr
2733c     2C 4E 05 F1 | 	add	fp, #44
27340     A7 18 62 FC | 	wrlong	arg04, fp
27344     04 E4 85 F1 | 	sub	objptr, #4
27348     F2 18 02 FB | 	rdlong	arg04, objptr
2734c     04 4E 05 F1 | 	add	fp, #4
27350     A7 18 62 FC | 	wrlong	arg04, fp
27354     08 E4 05 F1 | 	add	objptr, #8
27358     F2 18 02 FB | 	rdlong	arg04, objptr
2735c     04 4E 05 F1 | 	add	fp, #4
27360     A7 18 62 FC | 	wrlong	arg04, fp
27364     04 E4 05 F1 | 	add	objptr, #4
27368     F2 18 02 FB | 	rdlong	arg04, objptr
2736c     04 4E 05 F1 | 	add	fp, #4
27370     A7 18 62 FC | 	wrlong	arg04, fp
27374     04 E4 05 F1 | 	add	objptr, #4
27378     F2 02 48 FC | 	wrbyte	#1, objptr
2737c     01 00 00 FF 
27380     20 E4 85 F1 | 	sub	objptr, ##544
27384     38 4E 85 F1 | 	sub	fp, #56
27388     A7 18 CA FA | 	rdbyte	arg04, fp wz
2738c     04 4E 85 F1 | 	sub	fp, #4
27390                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27390                 | '             return RES_NOTRDY;
27390     03 FA 05 56 |  if_ne	mov	result1, #3
27394     D8 05 90 5D |  if_ne	jmp	#LR__4028
27398     13 00 00 FF 
2739c     10 13 06 F6 | 	mov	arg01, ##10000
273a0     08 98 BF FD | 	call	#__system___waitus
273a4     30 4E 05 F1 | 	add	fp, #48
273a8     A7 12 02 FB | 	rdlong	arg01, fp
273ac     09 01 08 FC | 	wrpin	#0, arg01
273b0     04 4E 05 F1 | 	add	fp, #4
273b4     A7 12 02 FB | 	rdlong	arg01, fp
273b8     09 01 08 FC | 	wrpin	#0, arg01
273bc     04 4E 05 F1 | 	add	fp, #4
273c0     A7 12 02 FB | 	rdlong	arg01, fp
273c4     09 01 08 FC | 	wrpin	#0, arg01
273c8     04 4E 05 F1 | 	add	fp, #4
273cc     A7 12 02 FB | 	rdlong	arg01, fp
273d0     09 00 80 FF 
273d4     09 01 08 FC | 	wrpin	##4608, arg01
273d8     0C 4E 85 F1 | 	sub	fp, #12
273dc     A7 12 02 FB | 	rdlong	arg01, fp
273e0     59 12 62 FD | 	drvh	arg01
273e4     04 4E 05 F1 | 	add	fp, #4
273e8     A7 12 02 FB | 	rdlong	arg01, fp
273ec     59 12 62 FD | 	drvh	arg01
273f0     04 4E 05 F1 | 	add	fp, #4
273f4     A7 12 02 FB | 	rdlong	arg01, fp
273f8     59 12 62 FD | 	drvh	arg01
273fc     04 4E 05 F1 | 	add	fp, #4
27400     A7 12 02 FB | 	rdlong	arg01, fp
27404     59 12 62 FD | 	drvh	arg01
27408     20 4E 85 F1 | 	sub	fp, #32
2740c     00 04 80 FF 
27410     A7 20 68 FC | 	wrlong	##524304, fp
27414     04 4E 05 F1 | 	add	fp, #4
27418     20 03 80 FF 
2741c     A7 90 68 FC | 	wrlong	##409672, fp
27420     14 4E 05 F1 | 	add	fp, #20
27424     A7 1E 02 FB | 	rdlong	local01, fp
27428     18 4E 85 F1 | 	sub	fp, #24
2742c     A7 16 02 FB | 	rdlong	arg03, fp
27430     40 1E 62 FD | 	dirl	local01
27434     A0 03 80 FF 
27438     0F 91 08 FC | 	wrpin	##475208, local01
2743c     0F 17 12 FC | 	wxpin	arg03, local01
27440     0F 01 28 FC | 	wypin	#0, local01
27444     41 1E 62 FD | 	dirh	local01
27448     1C 4E 05 F1 | 	add	fp, #28
2744c     A7 20 02 FB | 	rdlong	local02, fp
27450     10 1F 82 F1 | 	sub	local01, local02
27454     07 1E 06 F5 | 	and	local01, #7
27458     18 1E 66 F0 | 	shl	local01, #24
2745c     78 14 06 F6 | 	mov	arg02, #120
27460     0F 15 42 F5 | 	or	arg02, local01
27464     14 4E 85 F1 | 	sub	fp, #20
27468     A7 14 62 FC | 	wrlong	arg02, fp
2746c     14 4E 05 F1 | 	add	fp, #20
27470     A7 12 02 FB | 	rdlong	arg01, fp
27474     10 14 26 F4 | 	bith	arg02, #16
27478     40 12 62 FD | 	dirl	arg01
2747c     09 15 02 FC | 	wrpin	arg02, arg01
27480     09 3F 18 FC | 	wxpin	#31, arg01
27484     FF FF FF FF 
27488     09 FF 2B FC | 	wypin	##-1, arg01
2748c     41 12 62 FD | 	dirh	arg01
27490     04 4E 85 F1 | 	sub	fp, #4
27494     A7 14 02 FB | 	rdlong	arg02, fp
27498     08 4E 05 F1 | 	add	fp, #8
2749c     A7 22 02 FB | 	rdlong	local03, fp
274a0     11 15 82 F1 | 	sub	arg02, local03
274a4     07 14 06 F5 | 	and	arg02, #7
274a8     18 14 66 F0 | 	shl	arg02, #24
274ac     14 4E 85 F1 | 	sub	fp, #20
274b0     A7 14 62 FC | 	wrlong	arg02, fp
274b4     29 00 00 FF 
274b8     7A 14 46 F5 | 	or	arg02, ##21114
274bc     A7 14 62 FC | 	wrlong	arg02, fp
274c0     14 4E 05 F1 | 	add	fp, #20
274c4     A7 12 02 FB | 	rdlong	arg01, fp
274c8     40 12 62 FD | 	dirl	arg01
274cc     09 15 02 FC | 	wrpin	arg02, arg01
274d0     09 4F 18 FC | 	wxpin	#39, arg01
274d4     09 01 28 FC | 	wypin	#0, arg01
274d8     41 12 62 FD | 	dirh	arg01
274dc     28 4E 85 F1 | 	sub	fp, #40
274e0     A7 12 02 F6 | 	mov	arg01, fp
274e4     14 4E 85 F1 | 	sub	fp, #20
274e8     0A 14 06 F6 | 	mov	arg02, #10
274ec     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
274f0     00 12 06 F6 | 	mov	arg01, #0
274f4     00 14 06 F6 | 	mov	arg02, #0
274f8     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
274fc     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1127
27500     64 12 06 F6 | 	mov	arg01, #100
27504     A4 96 BF FD | 	call	#__system___waitus
27508     14 4E 05 F1 | 	add	fp, #20
2750c     A7 12 02 F6 | 	mov	arg01, fp
27510     14 4E 85 F1 | 	sub	fp, #20
27514     0A 14 06 F6 | 	mov	arg02, #10
27518     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2751c     0C 4E 05 F1 | 	add	fp, #12
27520     A7 00 48 FC | 	wrbyte	#0, fp
27524     0C 4E 85 F1 | 	sub	fp, #12
27528     00 12 06 F6 | 	mov	arg01, #0
2752c     00 14 06 F6 | 	mov	arg02, #0
27530     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27534     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
27538     01 18 0E F2 | 	cmp	arg04, #1 wz
2753c     B8 03 90 5D |  if_ne	jmp	#LR__4027
27540     08 12 06 F6 | 	mov	arg01, #8
27544     AA 15 06 F6 | 	mov	arg02, #426
27548     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
2754c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27550     01 FA 0D F2 | 	cmp	result1, #1 wz
27554     98 01 90 5D |  if_ne	jmp	#LR__4013
27558     14 4E 05 F1 | 	add	fp, #20
2755c     A7 12 02 F6 | 	mov	arg01, fp
27560     14 4E 85 F1 | 	sub	fp, #20
27564     04 14 06 F6 | 	mov	arg02, #4
27568     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2756c     16 4E 05 F1 | 	add	fp, #22
27570     A7 24 C2 FA | 	rdbyte	local04, fp
27574     16 4E 85 F1 | 	sub	fp, #22
27578     01 24 0E F2 | 	cmp	local04, #1 wz
2757c     17 4E 05 A1 |  if_e	add	fp, #23
27580     A7 22 C2 AA |  if_e	rdbyte	local03, fp
27584     17 4E 85 A1 |  if_e	sub	fp, #23
27588     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
2758c     68 03 90 5D |  if_ne	jmp	#LR__4026
27590                 | ' 				for (tmr = 1000; tmr; tmr--) {
27590     18 4E 05 F1 | 	add	fp, #24
27594     01 00 80 FF 
27598     A7 D0 6B FC | 	wrlong	##1000, fp
2759c     18 4E 85 F1 | 	sub	fp, #24
275a0                 | LR__4010
275a0     18 4E 05 F1 | 	add	fp, #24
275a4     A7 1E 0A FB | 	rdlong	local01, fp wz
275a8     18 4E 85 F1 | 	sub	fp, #24
275ac     3C 00 90 AD |  if_e	jmp	#LR__4011
275b0     A9 12 06 F6 | 	mov	arg01, #169
275b4     1E 14 C6 F9 | 	decod	arg02, #30
275b8     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
275bc     FD 24 02 F6 | 	mov	local04, result1
275c0     07 24 4E F7 | 	zerox	local04, #7 wz
275c4     24 00 90 AD |  if_e	jmp	#LR__4011
275c8     01 00 00 FF 
275cc     E8 13 06 F6 | 	mov	arg01, ##1000
275d0     D8 95 BF FD | 	call	#__system___waitus
275d4     18 4E 05 F1 | 	add	fp, #24
275d8     A7 24 02 FB | 	rdlong	local04, fp
275dc     01 24 86 F1 | 	sub	local04, #1
275e0     A7 24 62 FC | 	wrlong	local04, fp
275e4     18 4E 85 F1 | 	sub	fp, #24
275e8     B4 FF 9F FD | 	jmp	#LR__4010
275ec                 | LR__4011
275ec     18 4E 05 F1 | 	add	fp, #24
275f0     A7 24 0A FB | 	rdlong	local04, fp wz
275f4     18 4E 85 F1 | 	sub	fp, #24
275f8     4C 00 90 AD |  if_e	jmp	#LR__4012
275fc     3A 12 06 F6 | 	mov	arg01, #58
27600     00 14 06 F6 | 	mov	arg02, #0
27604     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27608     FD 22 02 F6 | 	mov	local03, result1
2760c     07 22 4E F7 | 	zerox	local03, #7 wz
27610     34 00 90 5D |  if_ne	jmp	#LR__4012
27614     14 4E 05 F1 | 	add	fp, #20
27618     A7 12 02 F6 | 	mov	arg01, fp
2761c     14 4E 85 F1 | 	sub	fp, #20
27620     04 14 06 F6 | 	mov	arg02, #4
27624     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
27628     14 4E 05 F1 | 	add	fp, #20
2762c     A7 1E C2 FA | 	rdbyte	local01, fp
27630     40 1E CE F7 | 	test	local01, #64 wz
27634     0C 24 06 56 |  if_ne	mov	local04, #12
27638     04 24 06 A6 |  if_e	mov	local04, #4
2763c     08 4E 85 F1 | 	sub	fp, #8
27640     A7 24 42 FC | 	wrbyte	local04, fp
27644     0C 4E 85 F1 | 	sub	fp, #12
27648                 | LR__4012
27648     14 24 06 FB | 	rdlong	local04, #20
2764c     18 4E 05 F1 | 	add	fp, #24
27650     A7 24 62 FC | 	wrlong	local04, fp
27654     0C 4E 05 F1 | 	add	fp, #12
27658     A7 24 02 FB | 	rdlong	local04, fp
2765c     1B 24 26 F4 | 	bith	local04, #27
27660     A7 24 62 FC | 	wrlong	local04, fp
27664     0C 4E 85 F1 | 	sub	fp, #12
27668     A7 24 02 FB | 	rdlong	local04, fp
2766c     18 4E 85 F1 | 	sub	fp, #24
27670     68 78 04 FF 
27674     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27678     1C 4E 05 C1 |  if_b	add	fp, #28
2767c     00 01 80 CF 
27680     A7 08 68 CC |  if_b	wrlong	##131076, fp
27684     1C 4E 85 C1 |  if_b	sub	fp, #28
27688     6C 02 90 CD |  if_b	jmp	#LR__4026
2768c     18 4E 05 F1 | 	add	fp, #24
27690     A7 24 02 FB | 	rdlong	local04, fp
27694     18 4E 85 F1 | 	sub	fp, #24
27698     E1 F5 05 FF 
2769c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
276a0     1C 4E 05 C1 |  if_b	add	fp, #28
276a4     00 01 80 CF 
276a8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
276ac     1C 4E 85 C1 |  if_b	sub	fp, #28
276b0     44 02 90 CD |  if_b	jmp	#LR__4026
276b4     18 4E 05 F1 | 	add	fp, #24
276b8     A7 24 02 FB | 	rdlong	local04, fp
276bc     18 4E 85 F1 | 	sub	fp, #24
276c0     3B 58 08 FF 
276c4     01 24 16 F2 | 	cmp	local04, ##280000001 wc
276c8     1C 4E 05 C1 |  if_b	add	fp, #28
276cc     00 01 80 CF 
276d0     A7 0C 68 CC |  if_b	wrlong	##131078, fp
276d4     1C 4E 85 C1 |  if_b	sub	fp, #28
276d8     1C 02 90 CD |  if_b	jmp	#LR__4026
276dc     1C 4E 05 F1 | 	add	fp, #28
276e0     80 01 80 FF 
276e4     A7 10 68 FC | 	wrlong	##196616, fp
276e8     1C 4E 85 F1 | 	sub	fp, #28
276ec     08 02 90 FD | 	jmp	#LR__4026
276f0                 | LR__4013
276f0     A9 12 06 F6 | 	mov	arg01, #169
276f4     00 14 06 F6 | 	mov	arg02, #0
276f8     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
276fc     FD 24 E2 F8 | 	getbyte	local04, result1, #0
27700     02 24 16 F2 | 	cmp	local04, #2 wc
27704     18 00 90 3D |  if_ae	jmp	#LR__4014
27708     0C 4E 05 F1 | 	add	fp, #12
2770c     A7 04 48 FC | 	wrbyte	#2, fp
27710     04 4E 05 F1 | 	add	fp, #4
27714     A7 52 49 FC | 	wrbyte	#169, fp
27718     10 4E 85 F1 | 	sub	fp, #16
2771c     14 00 90 FD | 	jmp	#LR__4015
27720                 | LR__4014
27720     0C 4E 05 F1 | 	add	fp, #12
27724     A7 02 48 FC | 	wrbyte	#1, fp
27728     04 4E 05 F1 | 	add	fp, #4
2772c     A7 02 48 FC | 	wrbyte	#1, fp
27730     10 4E 85 F1 | 	sub	fp, #16
27734                 | LR__4015
27734                 | ' 				ty =  0x01 ; cmd =  (1) ;
27734                 | ' 			}
27734                 | ' 			for (tmr = 1000; tmr; tmr--) {
27734     18 4E 05 F1 | 	add	fp, #24
27738     01 00 80 FF 
2773c     A7 D0 6B FC | 	wrlong	##1000, fp
27740     18 4E 85 F1 | 	sub	fp, #24
27744                 | LR__4016
27744     18 4E 05 F1 | 	add	fp, #24
27748     A7 22 0A FB | 	rdlong	local03, fp wz
2774c     18 4E 85 F1 | 	sub	fp, #24
27750     44 00 90 AD |  if_e	jmp	#LR__4017
27754     10 4E 05 F1 | 	add	fp, #16
27758     A7 12 C2 FA | 	rdbyte	arg01, fp
2775c     10 4E 85 F1 | 	sub	fp, #16
27760     00 14 06 F6 | 	mov	arg02, #0
27764     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27768     FD 24 02 F6 | 	mov	local04, result1
2776c     07 24 4E F7 | 	zerox	local04, #7 wz
27770     24 00 90 AD |  if_e	jmp	#LR__4017
27774     01 00 00 FF 
27778     E8 13 06 F6 | 	mov	arg01, ##1000
2777c     2C 94 BF FD | 	call	#__system___waitus
27780     18 4E 05 F1 | 	add	fp, #24
27784     A7 24 02 FB | 	rdlong	local04, fp
27788     01 24 86 F1 | 	sub	local04, #1
2778c     A7 24 62 FC | 	wrlong	local04, fp
27790     18 4E 85 F1 | 	sub	fp, #24
27794     AC FF 9F FD | 	jmp	#LR__4016
27798                 | LR__4017
27798     18 4E 05 F1 | 	add	fp, #24
2779c     A7 24 0A FB | 	rdlong	local04, fp wz
277a0     18 4E 85 F1 | 	sub	fp, #24
277a4     14 00 90 AD |  if_e	jmp	#LR__4018
277a8     10 12 06 F6 | 	mov	arg01, #16
277ac     09 14 C6 F9 | 	decod	arg02, #9
277b0     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
277b4     07 FA 4D F7 | 	zerox	result1, #7 wz
277b8     0C 00 90 AD |  if_e	jmp	#LR__4019
277bc                 | LR__4018
277bc     0C 4E 05 F1 | 	add	fp, #12
277c0     A7 00 48 FC | 	wrbyte	#0, fp
277c4     0C 4E 85 F1 | 	sub	fp, #12
277c8                 | LR__4019
277c8     14 24 06 FB | 	rdlong	local04, #20
277cc     18 4E 05 F1 | 	add	fp, #24
277d0     A7 24 62 FC | 	wrlong	local04, fp
277d4     18 4E 85 F1 | 	sub	fp, #24
277d8     F0 FA 02 FF 
277dc     01 25 16 F2 | 	cmp	local04, ##100000001 wc
277e0     18 00 90 3D |  if_ae	jmp	#LR__4020
277e4     24 4E 05 F1 | 	add	fp, #36
277e8     A7 24 02 FB | 	rdlong	local04, fp
277ec     1B 24 26 F4 | 	bith	local04, #27
277f0     A7 24 62 FC | 	wrlong	local04, fp
277f4     24 4E 85 F1 | 	sub	fp, #36
277f8     2C 00 90 FD | 	jmp	#LR__4021
277fc                 | LR__4020
277fc     18 4E 05 F1 | 	add	fp, #24
27800     A7 24 02 FB | 	rdlong	local04, fp
27804     18 4E 85 F1 | 	sub	fp, #24
27808     E1 F5 05 FF 
2780c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27810     24 4E 05 C1 |  if_b	add	fp, #36
27814     A7 24 02 CB |  if_b	rdlong	local04, fp
27818     80 00 04 CF 
2781c     00 24 46 C5 |  if_b	or	local04, ##134283264
27820     A7 24 62 CC |  if_b	wrlong	local04, fp
27824     24 4E 85 C1 |  if_b	sub	fp, #36
27828                 | LR__4021
27828     18 4E 05 F1 | 	add	fp, #24
2782c     A7 24 02 FB | 	rdlong	local04, fp
27830     18 4E 85 F1 | 	sub	fp, #24
27834     F0 FA 02 FF 
27838     01 25 16 F2 | 	cmp	local04, ##100000001 wc
2783c     1C 4E 05 C1 |  if_b	add	fp, #28
27840     00 01 80 CF 
27844     A7 08 68 CC |  if_b	wrlong	##131076, fp
27848     1C 4E 85 C1 |  if_b	sub	fp, #28
2784c     A8 00 90 CD |  if_b	jmp	#LR__4025
27850     18 4E 05 F1 | 	add	fp, #24
27854     A7 24 02 FB | 	rdlong	local04, fp
27858     18 4E 85 F1 | 	sub	fp, #24
2785c     68 78 04 FF 
27860     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27864     1C 4E 05 C1 |  if_b	add	fp, #28
27868     80 01 80 CF 
2786c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27870     1C 4E 85 C1 |  if_b	sub	fp, #28
27874     80 00 90 CD |  if_b	jmp	#LR__4024
27878     18 4E 05 F1 | 	add	fp, #24
2787c     A7 24 02 FB | 	rdlong	local04, fp
27880     18 4E 85 F1 | 	sub	fp, #24
27884     E1 F5 05 FF 
27888     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2788c     1C 4E 05 C1 |  if_b	add	fp, #28
27890     00 02 80 CF 
27894     A7 10 68 CC |  if_b	wrlong	##262152, fp
27898     1C 4E 85 C1 |  if_b	sub	fp, #28
2789c     58 00 90 CD |  if_b	jmp	#LR__4023
278a0     18 4E 05 F1 | 	add	fp, #24
278a4     A7 24 02 FB | 	rdlong	local04, fp
278a8     18 4E 85 F1 | 	sub	fp, #24
278ac     59 73 07 FF 
278b0     81 24 16 F2 | 	cmp	local04, ##250000001 wc
278b4     1C 4E 05 C1 |  if_b	add	fp, #28
278b8     80 02 80 CF 
278bc     A7 14 68 CC |  if_b	wrlong	##327690, fp
278c0     1C 4E 85 C1 |  if_b	sub	fp, #28
278c4     30 00 90 CD |  if_b	jmp	#LR__4022
278c8     18 4E 05 F1 | 	add	fp, #24
278cc     A7 24 02 FB | 	rdlong	local04, fp
278d0     18 4E 85 F1 | 	sub	fp, #24
278d4     D1 F0 08 FF 
278d8     01 25 16 F2 | 	cmp	local04, ##300000001 wc
278dc     1C 4E 05 C1 |  if_b	add	fp, #28
278e0     00 03 80 CF 
278e4     A7 18 68 CC |  if_b	wrlong	##393228, fp
278e8     1C 4E 85 F3 | 	sumc	fp, #28
278ec     80 03 80 3F 
278f0     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
278f4     1C 4E 85 31 |  if_ae	sub	fp, #28
278f8                 | LR__4022
278f8                 | LR__4023
278f8                 | LR__4024
278f8                 | LR__4025
278f8                 | LR__4026
278f8                 | LR__4027
278f8     0C 4E 05 F1 | 	add	fp, #12
278fc     A7 24 C2 FA | 	rdbyte	local04, fp
27900     01 00 00 FF 
27904     21 E4 05 F1 | 	add	objptr, ##545
27908     F2 24 42 FC | 	wrbyte	local04, objptr
2790c     A7 1E CA FA | 	rdbyte	local01, fp wz
27910     00 24 06 56 |  if_ne	mov	local04, #0
27914     01 24 06 A6 |  if_e	mov	local04, #1
27918     20 4E 05 F1 | 	add	fp, #32
2791c     A7 24 42 FC | 	wrbyte	local04, fp
27920     A7 24 C2 FA | 	rdbyte	local04, fp
27924     2C 4E 85 F1 | 	sub	fp, #44
27928     01 E4 85 F1 | 	sub	objptr, #1
2792c     F2 24 42 FC | 	wrbyte	local04, objptr
27930     01 00 00 FF 
27934     20 E4 85 F1 | 	sub	objptr, ##544
27938     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1127
2793c     34 4E 05 F1 | 	add	fp, #52
27940     A7 12 02 FB | 	rdlong	arg01, fp
27944     18 4E 85 F1 | 	sub	fp, #24
27948     A7 14 02 FB | 	rdlong	arg02, fp
2794c     09 15 12 FC | 	wxpin	arg02, arg01
27950     1C 4E 05 F1 | 	add	fp, #28
27954     A7 12 02 FB | 	rdlong	arg01, fp
27958     14 4E 85 F1 | 	sub	fp, #20
2795c     A7 14 02 FB | 	rdlong	arg02, fp
27960     09 15 02 FC | 	wrpin	arg02, arg01
27964                 | ' 
27964                 | ' 		}
27964                 | ' 	}
27964                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27964                 | ' 	CardType = ty;
27964                 | ' 	s = ty ? 0 :  0x01 ;
27964                 | ' 	Stat = s;
27964                 | ' 
27964                 | ' 	deselect();
27964                 | ' 
27964                 | ' 
27964                 | ' 	_wxpin( PIN_CLK, ck_div );
27964                 | ' 	_wrpin( PIN_DI, spm_tx );
27964                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27964                 | ' 	return s;
27964     08 4E 05 F1 | 	add	fp, #8
27968     A7 FA C1 FA | 	rdbyte	result1, fp
2796c     2C 4E 85 F1 | 	sub	fp, #44
27970                 | LR__4028
27970     A7 F0 03 F6 | 	mov	ptra, fp
27974     B2 00 A0 FD | 	call	#popregs_
27978                 | _fatfs_cc_disk_initialize_ret
27978     2D 00 64 FD | 	ret
2797c                 | 
2797c                 | _fatfs_cc_disk_read
2797c     05 4A 05 F6 | 	mov	COUNT_, #5
27980     A8 00 A0 FD | 	call	#pushregs_
27984     0A 1F 02 F6 | 	mov	local01, arg02
27988     0B 21 02 F6 | 	mov	local02, arg03
2798c     0C 23 02 F6 | 	mov	local03, arg04
27990     00 12 0E F2 | 	cmp	arg01, #0 wz
27994     01 FA 05 56 |  if_ne	mov	result1, #1
27998                 | ' 
27998                 | ' 	return Stat;
27998     01 00 00 AF 
2799c     20 E4 05 A1 |  if_e	add	objptr, ##544
279a0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
279a4     01 00 00 AF 
279a8     20 E4 85 A1 |  if_e	sub	objptr, ##544
279ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
279b0     01 FA CD F7 | 	test	result1, #1 wz
279b4     03 FA 05 56 |  if_ne	mov	result1, #3
279b8     84 00 90 5D |  if_ne	jmp	#LR__4032
279bc     01 00 00 FF 
279c0     21 E4 05 F1 | 	add	objptr, ##545
279c4     F2 24 C2 FA | 	rdbyte	local04, objptr
279c8     01 00 00 FF 
279cc     21 E4 85 F1 | 	sub	objptr, ##545
279d0     08 24 CE F7 | 	test	local04, #8 wz
279d4     09 20 66 A0 |  if_e	shl	local02, #9
279d8     02 22 16 F2 | 	cmp	local03, #2 wc
279dc     12 24 06 36 |  if_ae	mov	local04, #18
279e0     11 24 06 C6 |  if_b	mov	local04, #17
279e4     10 15 02 F6 | 	mov	arg02, local02
279e8     12 13 02 F6 | 	mov	arg01, local04
279ec     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1141
279f0     FD 26 02 F6 | 	mov	local05, result1
279f4     07 26 4E F7 | 	zerox	local05, #7 wz
279f8     30 00 90 5D |  if_ne	jmp	#LR__4031
279fc                 | ' 		do {
279fc                 | LR__4030
279fc     0F 13 02 F6 | 	mov	arg01, local01
27a00     09 14 C6 F9 | 	decod	arg02, #9
27a04     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1135
27a08     00 FA 0D F2 | 	cmp	result1, #0 wz
27a0c     01 00 00 5F 
27a10     00 1E 06 51 |  if_ne	add	local01, ##512
27a14     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4030
27a18     12 25 E2 F8 | 	getbyte	local04, local04, #0
27a1c     12 24 0E F2 | 	cmp	local04, #18 wz
27a20     0C 12 06 A6 |  if_e	mov	arg01, #12
27a24     00 14 06 A6 |  if_e	mov	arg02, #0
27a28     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1141
27a2c                 | LR__4031
27a2c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1127
27a30                 | ' 	}
27a30                 | ' 	deselect();
27a30                 | ' 
27a30                 | ' 	return count ? RES_ERROR : RES_OK;
27a30     00 22 0E F2 | 	cmp	local03, #0 wz
27a34     01 26 06 56 |  if_ne	mov	local05, #1
27a38     00 26 06 A6 |  if_e	mov	local05, #0
27a3c     13 FB 01 F6 | 	mov	result1, local05
27a40                 | LR__4032
27a40     A7 F0 03 F6 | 	mov	ptra, fp
27a44     B2 00 A0 FD | 	call	#popregs_
27a48                 | _fatfs_cc_disk_read_ret
27a48     2D 00 64 FD | 	ret
27a4c                 | 
27a4c                 | _fatfs_cc_disk_write
27a4c     04 4A 05 F6 | 	mov	COUNT_, #4
27a50     A8 00 A0 FD | 	call	#pushregs_
27a54     0A 1F 02 F6 | 	mov	local01, arg02
27a58     0C 21 02 F6 | 	mov	local02, arg04
27a5c     0B 23 02 F6 | 	mov	local03, arg03
27a60     00 12 0E F2 | 	cmp	arg01, #0 wz
27a64     01 FA 05 56 |  if_ne	mov	result1, #1
27a68                 | ' 
27a68                 | ' 	return Stat;
27a68     01 00 00 AF 
27a6c     20 E4 05 A1 |  if_e	add	objptr, ##544
27a70     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27a74     01 00 00 AF 
27a78     20 E4 85 A1 |  if_e	sub	objptr, ##544
27a7c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27a80     01 FA CD F7 | 	test	result1, #1 wz
27a84     03 FA 05 56 |  if_ne	mov	result1, #3
27a88     D4 00 90 5D |  if_ne	jmp	#LR__4044
27a8c     01 00 00 FF 
27a90     21 E4 05 F1 | 	add	objptr, ##545
27a94     F2 16 C2 FA | 	rdbyte	arg03, objptr
27a98     01 00 00 FF 
27a9c     21 E4 85 F1 | 	sub	objptr, ##545
27aa0     08 16 CE F7 | 	test	arg03, #8 wz
27aa4     09 22 66 A0 |  if_e	shl	local03, #9
27aa8     01 20 0E F2 | 	cmp	local02, #1 wz
27aac     30 00 90 5D |  if_ne	jmp	#LR__4040
27ab0     18 12 06 F6 | 	mov	arg01, #24
27ab4     11 15 02 F6 | 	mov	arg02, local03
27ab8     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27abc     FD 24 02 F6 | 	mov	local04, result1
27ac0     07 24 4E F7 | 	zerox	local04, #7 wz
27ac4     84 00 90 5D |  if_ne	jmp	#LR__4043
27ac8     0F 13 02 F6 | 	mov	arg01, local01
27acc     FE 14 06 F6 | 	mov	arg02, #254
27ad0     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1137
27ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
27ad8     00 20 06 56 |  if_ne	mov	local02, #0
27adc     6C 00 90 FD | 	jmp	#LR__4043
27ae0                 | LR__4040
27ae0     01 00 00 FF 
27ae4     21 E4 05 F1 | 	add	objptr, ##545
27ae8     F2 24 C2 FA | 	rdbyte	local04, objptr
27aec     01 00 00 FF 
27af0     21 E4 85 F1 | 	sub	objptr, ##545
27af4     06 24 CE F7 | 	test	local04, #6 wz
27af8     97 12 06 56 |  if_ne	mov	arg01, #151
27afc     10 15 02 56 |  if_ne	mov	arg02, local02
27b00     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1141
27b04     11 15 02 F6 | 	mov	arg02, local03
27b08     19 12 06 F6 | 	mov	arg01, #25
27b0c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27b10     FD 24 02 F6 | 	mov	local04, result1
27b14     07 24 4E F7 | 	zerox	local04, #7 wz
27b18     30 00 90 5D |  if_ne	jmp	#LR__4042
27b1c                 | ' 			do {
27b1c                 | LR__4041
27b1c     0F 13 02 F6 | 	mov	arg01, local01
27b20     FC 14 06 F6 | 	mov	arg02, #252
27b24     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1137
27b28     00 FA 0D F2 | 	cmp	result1, #0 wz
27b2c     01 00 00 5F 
27b30     00 1E 06 51 |  if_ne	add	local01, ##512
27b34     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4041
27b38     00 12 06 F6 | 	mov	arg01, #0
27b3c     FD 14 06 F6 | 	mov	arg02, #253
27b40     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1137
27b44     00 FA 0D F2 | 	cmp	result1, #0 wz
27b48     01 20 06 A6 |  if_e	mov	local02, #1
27b4c                 | LR__4042
27b4c                 | LR__4043
27b4c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1127
27b50                 | ' 				count = 1;
27b50                 | ' 		}
27b50                 | ' 	}
27b50                 | ' 	deselect();
27b50                 | ' 
27b50                 | ' 	return count ? RES_ERROR : RES_OK;
27b50     00 20 0E F2 | 	cmp	local02, #0 wz
27b54     01 24 06 56 |  if_ne	mov	local04, #1
27b58     00 24 06 A6 |  if_e	mov	local04, #0
27b5c     12 FB 01 F6 | 	mov	result1, local04
27b60                 | LR__4044
27b60     A7 F0 03 F6 | 	mov	ptra, fp
27b64     B2 00 A0 FD | 	call	#popregs_
27b68                 | _fatfs_cc_disk_write_ret
27b68     2D 00 64 FD | 	ret
27b6c                 | 
27b6c                 | _fatfs_cc_disk_ioctl
27b6c     01 4A 05 F6 | 	mov	COUNT_, #1
27b70     A8 00 A0 FD | 	call	#pushregs_
27b74     30 F0 07 F1 | 	add	ptra, #48
27b78     04 4E 05 F1 | 	add	fp, #4
27b7c     A7 12 42 FC | 	wrbyte	arg01, fp
27b80     04 4E 05 F1 | 	add	fp, #4
27b84     A7 14 42 FC | 	wrbyte	arg02, fp
27b88     04 4E 05 F1 | 	add	fp, #4
27b8c     A7 16 62 FC | 	wrlong	arg03, fp
27b90     08 4E 85 F1 | 	sub	fp, #8
27b94     A7 12 CA FA | 	rdbyte	arg01, fp wz
27b98     04 4E 85 F1 | 	sub	fp, #4
27b9c     01 FA 05 56 |  if_ne	mov	result1, #1
27ba0                 | ' 
27ba0                 | ' 	return Stat;
27ba0     01 00 00 AF 
27ba4     20 E4 05 A1 |  if_e	add	objptr, ##544
27ba8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27bac     01 00 00 AF 
27bb0     20 E4 85 A1 |  if_e	sub	objptr, ##544
27bb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
27bb8     01 FA CD F7 | 	test	result1, #1 wz
27bbc     03 FA 05 56 |  if_ne	mov	result1, #3
27bc0     E4 01 90 5D |  if_ne	jmp	#LR__4058
27bc4     10 4E 05 F1 | 	add	fp, #16
27bc8     A7 02 68 FC | 	wrlong	#1, fp
27bcc                 | ' 
27bcc                 | ' 	res = RES_ERROR;
27bcc                 | ' 	switch (ctrl) {
27bcc     08 4E 85 F1 | 	sub	fp, #8
27bd0     A7 1E C2 FA | 	rdbyte	local01, fp
27bd4     08 4E 85 F1 | 	sub	fp, #8
27bd8     04 1E 26 F3 | 	fle	local01, #4
27bdc     30 1E 62 FD | 	jmprel	local01
27be0                 | LR__4050
27be0     10 00 90 FD | 	jmp	#LR__4051
27be4     24 00 90 FD | 	jmp	#LR__4052
27be8     A0 01 90 FD | 	jmp	#LR__4056
27bec     80 01 90 FD | 	jmp	#LR__4055
27bf0     98 01 90 FD | 	jmp	#LR__4056
27bf4                 | LR__4051
27bf4     B4 79 B0 FD | 	call	#_fatfs_cc_select_1131
27bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
27bfc     10 4E 05 51 |  if_ne	add	fp, #16
27c00     A7 00 68 5C |  if_ne	wrlong	#0, fp
27c04     10 4E 85 51 |  if_ne	sub	fp, #16
27c08                 | ' 			break;
27c08     8C 01 90 FD | 	jmp	#LR__4057
27c0c                 | LR__4052
27c0c     09 12 06 F6 | 	mov	arg01, #9
27c10     00 14 06 F6 | 	mov	arg02, #0
27c14     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27c18     FD 1E 02 F6 | 	mov	local01, result1
27c1c     07 1E 4E F7 | 	zerox	local01, #7 wz
27c20     74 01 90 5D |  if_ne	jmp	#LR__4057
27c24     18 4E 05 F1 | 	add	fp, #24
27c28     A7 12 02 F6 | 	mov	arg01, fp
27c2c     18 4E 85 F1 | 	sub	fp, #24
27c30     10 14 06 F6 | 	mov	arg02, #16
27c34     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1135
27c38     00 FA 0D F2 | 	cmp	result1, #0 wz
27c3c     58 01 90 AD |  if_e	jmp	#LR__4057
27c40     18 4E 05 F1 | 	add	fp, #24
27c44     A7 1E C2 FA | 	rdbyte	local01, fp
27c48     18 4E 85 F1 | 	sub	fp, #24
27c4c     06 1E 46 F0 | 	shr	local01, #6
27c50     01 1E 0E F2 | 	cmp	local01, #1 wz
27c54     5C 00 90 5D |  if_ne	jmp	#LR__4053
27c58     21 4E 05 F1 | 	add	fp, #33
27c5c     A7 1E C2 FA | 	rdbyte	local01, fp
27c60     01 4E 85 F1 | 	sub	fp, #1
27c64     A7 FA C1 FA | 	rdbyte	result1, fp
27c68     FD FA 31 F9 | 	getword	result1, result1, #0
27c6c     08 FA 65 F0 | 	shl	result1, #8
27c70     FD 1E 02 F1 | 	add	local01, result1
27c74     01 4E 85 F1 | 	sub	fp, #1
27c78     A7 FA C1 FA | 	rdbyte	result1, fp
27c7c     3F FA 05 F5 | 	and	result1, #63
27c80     10 FA 65 F0 | 	shl	result1, #16
27c84     FD 1E 02 F1 | 	add	local01, result1
27c88     01 1E 06 F1 | 	add	local01, #1
27c8c     09 4E 05 F1 | 	add	fp, #9
27c90     A7 1E 62 FC | 	wrlong	local01, fp
27c94     1C 4E 85 F1 | 	sub	fp, #28
27c98     A7 1E 02 FB | 	rdlong	local01, fp
27c9c     1C 4E 05 F1 | 	add	fp, #28
27ca0     A7 FA 01 FB | 	rdlong	result1, fp
27ca4     28 4E 85 F1 | 	sub	fp, #40
27ca8     0A FA 65 F0 | 	shl	result1, #10
27cac     0F FB 61 FC | 	wrlong	result1, local01
27cb0     AC 00 90 FD | 	jmp	#LR__4054
27cb4                 | LR__4053
27cb4     1D 4E 05 F1 | 	add	fp, #29
27cb8     A7 1E C2 FA | 	rdbyte	local01, fp
27cbc     0F 1F 42 F8 | 	getnib	local01, local01, #0
27cc0     05 4E 05 F1 | 	add	fp, #5
27cc4     A7 FA C1 FA | 	rdbyte	result1, fp
27cc8     80 FA 05 F5 | 	and	result1, #128
27ccc     07 FA C5 F0 | 	sar	result1, #7
27cd0     FD 1E 02 F1 | 	add	local01, result1
27cd4     01 4E 85 F1 | 	sub	fp, #1
27cd8     A7 FA C1 FA | 	rdbyte	result1, fp
27cdc     03 FA 05 F5 | 	and	result1, #3
27ce0     01 FA 65 F0 | 	shl	result1, #1
27ce4     FD 1E 02 F1 | 	add	local01, result1
27ce8     02 1E 06 F1 | 	add	local01, #2
27cec     0D 4E 85 F1 | 	sub	fp, #13
27cf0     A7 1E 42 FC | 	wrbyte	local01, fp
27cf4     0C 4E 05 F1 | 	add	fp, #12
27cf8     A7 1E C2 FA | 	rdbyte	local01, fp
27cfc     06 1E 46 F0 | 	shr	local01, #6
27d00     01 4E 85 F1 | 	sub	fp, #1
27d04     A7 FA C1 FA | 	rdbyte	result1, fp
27d08     FD FA 31 F9 | 	getword	result1, result1, #0
27d0c     02 FA 65 F0 | 	shl	result1, #2
27d10     FD 1E 02 F1 | 	add	local01, result1
27d14     01 4E 85 F1 | 	sub	fp, #1
27d18     A7 FA C1 FA | 	rdbyte	result1, fp
27d1c     03 FA 05 F5 | 	and	result1, #3
27d20     FD FA 31 F9 | 	getword	result1, result1, #0
27d24     0A FA 65 F0 | 	shl	result1, #10
27d28     FD 1E 02 F1 | 	add	local01, result1
27d2c     01 1E 06 F1 | 	add	local01, #1
27d30     0A 4E 05 F1 | 	add	fp, #10
27d34     A7 1E 62 FC | 	wrlong	local01, fp
27d38     1C 4E 85 F1 | 	sub	fp, #28
27d3c     A7 1E 02 FB | 	rdlong	local01, fp
27d40     1C 4E 05 F1 | 	add	fp, #28
27d44     A7 FA 01 FB | 	rdlong	result1, fp
27d48     14 4E 85 F1 | 	sub	fp, #20
27d4c     A7 16 C2 FA | 	rdbyte	arg03, fp
27d50     14 4E 85 F1 | 	sub	fp, #20
27d54     09 16 86 F1 | 	sub	arg03, #9
27d58     0B FB 61 F0 | 	shl	result1, arg03
27d5c     0F FB 61 FC | 	wrlong	result1, local01
27d60                 | LR__4054
27d60     10 4E 05 F1 | 	add	fp, #16
27d64     A7 00 68 FC | 	wrlong	#0, fp
27d68     10 4E 85 F1 | 	sub	fp, #16
27d6c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27d6c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27d6c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27d6c                 | ' 				}
27d6c                 | ' 				res = RES_OK;
27d6c                 | ' 			}
27d6c                 | ' 			break;
27d6c     28 00 90 FD | 	jmp	#LR__4057
27d70                 | LR__4055
27d70     0C 4E 05 F1 | 	add	fp, #12
27d74     A7 1E 02 FB | 	rdlong	local01, fp
27d78     0F 01 69 FC | 	wrlong	#128, local01
27d7c     04 4E 05 F1 | 	add	fp, #4
27d80     A7 00 68 FC | 	wrlong	#0, fp
27d84     10 4E 85 F1 | 	sub	fp, #16
27d88                 | ' 			*(DWORD*)buff = 128;
27d88                 | ' 			res = RES_OK;
27d88                 | ' 			break;
27d88     0C 00 90 FD | 	jmp	#LR__4057
27d8c                 | LR__4056
27d8c     10 4E 05 F1 | 	add	fp, #16
27d90     A7 08 68 FC | 	wrlong	#4, fp
27d94     10 4E 85 F1 | 	sub	fp, #16
27d98                 | LR__4057
27d98     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1127
27d9c                 | ' 			res = RES_PARERR;
27d9c                 | ' 	}
27d9c                 | ' 
27d9c                 | ' 	deselect();
27d9c                 | ' 
27d9c                 | ' 	return res;
27d9c     10 4E 05 F1 | 	add	fp, #16
27da0     A7 FA 01 FB | 	rdlong	result1, fp
27da4     10 4E 85 F1 | 	sub	fp, #16
27da8                 | LR__4058
27da8     A7 F0 03 F6 | 	mov	ptra, fp
27dac     B2 00 A0 FD | 	call	#popregs_
27db0                 | _fatfs_cc_disk_ioctl_ret
27db0     2D 00 64 FD | 	ret
27db4                 | 
27db4                 | _fatfs_cc_disk_setpins
27db4     00 12 0E F2 | 	cmp	arg01, #0 wz
27db8     01 FA 65 56 |  if_ne	neg	result1, #1
27dbc     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27dc0     01 00 00 FF 
27dc4     10 E4 05 F1 | 	add	objptr, ##528
27dc8     F2 14 62 FC | 	wrlong	arg02, objptr
27dcc     04 E4 05 F1 | 	add	objptr, #4
27dd0     F2 16 62 FC | 	wrlong	arg03, objptr
27dd4     04 E4 05 F1 | 	add	objptr, #4
27dd8     F2 18 62 FC | 	wrlong	arg04, objptr
27ddc     04 E4 05 F1 | 	add	objptr, #4
27de0     F2 1A 62 FC | 	wrlong	arg05, objptr
27de4     01 00 00 FF 
27de8     1C E4 85 F1 | 	sub	objptr, ##540
27dec     00 FA 05 F6 | 	mov	result1, #0
27df0                 | _fatfs_cc_disk_setpins_ret
27df0     2D 00 64 FD | 	ret
27df4                 | 
27df4                 | _fatfs_cc_tchar2uni
27df4     09 01 02 FB | 	rdlong	_var01, arg01
27df8     00 03 02 F6 | 	mov	_var02, _var01
27dfc     01 00 06 F1 | 	add	_var01, #1
27e00     00 05 02 F6 | 	mov	_var03, _var01
27e04     01 07 C2 FA | 	rdbyte	_var04, _var02
27e08     80 06 CE F7 | 	test	_var04, #128 wz
27e0c     E8 00 90 AD |  if_e	jmp	#LR__4067
27e10     03 09 02 F6 | 	mov	_var05, _var04
27e14     E0 08 06 F5 | 	and	_var05, #224
27e18     C0 08 0E F2 | 	cmp	_var05, #192 wz
27e1c     1F 06 06 A5 |  if_e	and	_var04, #31
27e20     01 0A 06 A6 |  if_e	mov	_var06, #1
27e24     34 00 90 AD |  if_e	jmp	#LR__4061
27e28     03 09 02 F6 | 	mov	_var05, _var04
27e2c     F0 08 06 F5 | 	and	_var05, #240
27e30     E0 08 0E F2 | 	cmp	_var05, #224 wz
27e34     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27e38     02 0A 06 A6 |  if_e	mov	_var06, #2
27e3c     1C 00 90 AD |  if_e	jmp	#LR__4060
27e40     03 09 02 F6 | 	mov	_var05, _var04
27e44     F8 08 06 F5 | 	and	_var05, #248
27e48     F0 08 0E F2 | 	cmp	_var05, #240 wz
27e4c     07 06 06 A5 |  if_e	and	_var04, #7
27e50     03 0A 06 A6 |  if_e	mov	_var06, #3
27e54                 | ' 			return 0xFFFFFFFF;
27e54     01 FA 65 56 |  if_ne	neg	result1, #1
27e58     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27e5c                 | LR__4060
27e5c                 | LR__4061
27e5c                 | ' 		}
27e5c                 | ' 		do {
27e5c                 | LR__4062
27e5c     02 0D C2 FA | 	rdbyte	_var07, _var03
27e60     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
27e64     C0 08 06 F5 | 	and	_var05, #192
27e68     80 08 0E F2 | 	cmp	_var05, #128 wz
27e6c     01 04 06 F1 | 	add	_var03, #1
27e70     01 FA 65 56 |  if_ne	neg	result1, #1
27e74     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27e78     06 06 66 F0 | 	shl	_var04, #6
27e7c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
27e80     3F 02 06 F5 | 	and	_var02, #63
27e84     01 07 42 F5 | 	or	_var04, _var02
27e88     F4 0B 6E FB | 	djnz	_var06, #LR__4062
27e8c     80 06 16 F2 | 	cmp	_var04, #128 wc
27e90     24 00 90 CD |  if_b	jmp	#LR__4064
27e94     6C 00 00 FF 
27e98     00 06 16 F2 | 	cmp	_var04, ##55296 wc
27e9c     0C 00 90 CD |  if_b	jmp	#LR__4063
27ea0     70 00 00 FF 
27ea4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
27ea8     0C 00 90 CD |  if_b	jmp	#LR__4064
27eac                 | LR__4063
27eac     80 08 00 FF 
27eb0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
27eb4     08 00 90 CD |  if_b	jmp	#LR__4065
27eb8                 | LR__4064
27eb8     01 FA 65 F6 | 	neg	result1, #1
27ebc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
27ec0                 | LR__4065
27ec0     80 00 00 FF 
27ec4     00 06 16 F2 | 	cmp	_var04, ##65536 wc
27ec8     2C 00 90 CD |  if_b	jmp	#LR__4066
27ecc     03 03 02 F6 | 	mov	_var02, _var04
27ed0     80 00 00 FF 
27ed4     00 02 86 F1 | 	sub	_var02, ##65536
27ed8     06 02 66 F0 | 	shl	_var02, #6
27edc     80 FF 01 FF 
27ee0     00 02 06 F5 | 	and	_var02, ##67043328
27ee4     6E 00 6C FF 
27ee8     00 08 06 F6 | 	mov	_var05, ##-671032320
27eec     01 09 42 F5 | 	or	_var05, _var02
27ef0     09 06 46 F7 | 	zerox	_var04, #9
27ef4     04 07 42 F5 | 	or	_var04, _var05
27ef8                 | LR__4066
27ef8                 | LR__4067
27ef8     09 05 62 FC | 	wrlong	_var03, arg01
27efc                 | ' 	}
27efc                 | ' #line 811 "ff.c"
27efc                 | ' 	*str = p;
27efc                 | ' 	return uc;
27efc     03 FB 01 F6 | 	mov	result1, _var04
27f00                 | _fatfs_cc_tchar2uni_ret
27f00     2D 00 64 FD | 	ret
27f04                 | 
27f04                 | _fatfs_cc_put_utf
27f04     80 12 16 F2 | 	cmp	arg01, #128 wc
27f08     18 00 90 3D |  if_ae	jmp	#LR__4070
27f0c     01 16 16 F2 | 	cmp	arg03, #1 wc
27f10     00 FA 05 C6 |  if_b	mov	result1, #0
27f14     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27f18     0A 13 42 FC | 	wrbyte	arg01, arg02
27f1c                 | ' 		*buf = (TCHAR)chr;
27f1c                 | ' 		return 1;
27f1c     01 FA 05 F6 | 	mov	result1, #1
27f20     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f24                 | LR__4070
27f24     04 00 00 FF 
27f28     00 12 16 F2 | 	cmp	arg01, ##2048 wc
27f2c     40 00 90 3D |  if_ae	jmp	#LR__4071
27f30     02 16 16 F2 | 	cmp	arg03, #2 wc
27f34     00 FA 05 C6 |  if_b	mov	result1, #0
27f38     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27f3c     09 FB 01 F6 | 	mov	result1, arg01
27f40     06 FA 45 F0 | 	shr	result1, #6
27f44     1F FA 05 F5 | 	and	result1, #31
27f48     C0 16 06 F6 | 	mov	arg03, #192
27f4c     FD 16 42 F5 | 	or	arg03, result1
27f50     0A 17 42 FC | 	wrbyte	arg03, arg02
27f54     01 14 06 F1 | 	add	arg02, #1
27f58     3F 12 06 F5 | 	and	arg01, #63
27f5c     80 FA 05 F6 | 	mov	result1, #128
27f60     09 FB 41 F5 | 	or	result1, arg01
27f64     0A FB 41 FC | 	wrbyte	result1, arg02
27f68                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
27f68                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27f68                 | ' 		return 2;
27f68     02 FA 05 F6 | 	mov	result1, #2
27f6c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f70                 | LR__4071
27f70     80 00 00 FF 
27f74     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27f78     70 00 90 3D |  if_ae	jmp	#LR__4074
27f7c     03 16 16 F2 | 	cmp	arg03, #3 wc
27f80     18 00 90 CD |  if_b	jmp	#LR__4072
27f84     6C 00 00 FF 
27f88     00 12 16 F2 | 	cmp	arg01, ##55296 wc
27f8c     14 00 90 CD |  if_b	jmp	#LR__4073
27f90     70 00 00 FF 
27f94     00 12 16 F2 | 	cmp	arg01, ##57344 wc
27f98     08 00 90 3D |  if_ae	jmp	#LR__4073
27f9c                 | LR__4072
27f9c     00 FA 05 F6 | 	mov	result1, #0
27fa0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27fa4                 | LR__4073
27fa4     09 FB 59 F8 | 	getnib	result1, arg01, #3
27fa8     E0 16 06 F6 | 	mov	arg03, #224
27fac     FD 16 42 F5 | 	or	arg03, result1
27fb0     0A 17 42 FC | 	wrbyte	arg03, arg02
27fb4     01 14 06 F1 | 	add	arg02, #1
27fb8     09 FB 01 F6 | 	mov	result1, arg01
27fbc     06 FA 45 F0 | 	shr	result1, #6
27fc0     3F FA 05 F5 | 	and	result1, #63
27fc4     80 16 06 F6 | 	mov	arg03, #128
27fc8     FD 16 42 F5 | 	or	arg03, result1
27fcc     0A 17 42 FC | 	wrbyte	arg03, arg02
27fd0     01 14 06 F1 | 	add	arg02, #1
27fd4     3F 12 06 F5 | 	and	arg01, #63
27fd8     80 FA 05 F6 | 	mov	result1, #128
27fdc     09 FB 41 F5 | 	or	result1, arg01
27fe0     0A FB 41 FC | 	wrbyte	result1, arg02
27fe4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
27fe4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
27fe4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27fe4                 | ' 		return 3;
27fe4     03 FA 05 F6 | 	mov	result1, #3
27fe8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27fec                 | LR__4074
27fec     04 16 16 F2 | 	cmp	arg03, #4 wc
27ff0     00 FA 05 C6 |  if_b	mov	result1, #0
27ff4     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27ff8     09 01 02 F6 | 	mov	_var01, arg01
27ffc     E0 01 06 F4 | 	bitl	_var01, #480
28000     00 00 6C FF 
28004     00 00 86 F1 | 	sub	_var01, ##-671088640
28008     06 00 46 F0 | 	shr	_var01, #6
2800c     09 13 32 F9 | 	getword	arg01, arg01, #0
28010     6E 00 00 FF 
28014     00 12 86 F1 | 	sub	arg01, ##56320
28018     00 08 00 FF 
2801c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
28020     02 00 00 CF 
28024     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
28028     00 FA 05 36 |  if_ae	mov	result1, #0
2802c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
28030     09 01 42 F5 | 	or	_var01, arg01
28034     80 00 00 FF 
28038     00 00 06 F1 | 	add	_var01, ##65536
2803c     00 FB 01 F6 | 	mov	result1, _var01
28040     12 FA 45 F0 | 	shr	result1, #18
28044     07 FA 05 F5 | 	and	result1, #7
28048     F0 16 06 F6 | 	mov	arg03, #240
2804c     FD 16 42 F5 | 	or	arg03, result1
28050     0A 17 42 FC | 	wrbyte	arg03, arg02
28054     01 14 06 F1 | 	add	arg02, #1
28058     00 FB 01 F6 | 	mov	result1, _var01
2805c     0C FA 45 F0 | 	shr	result1, #12
28060     3F FA 05 F5 | 	and	result1, #63
28064     80 16 06 F6 | 	mov	arg03, #128
28068     FD 16 42 F5 | 	or	arg03, result1
2806c     0A 17 42 FC | 	wrbyte	arg03, arg02
28070     01 14 06 F1 | 	add	arg02, #1
28074     00 FB 01 F6 | 	mov	result1, _var01
28078     06 FA 45 F0 | 	shr	result1, #6
2807c     3F FA 05 F5 | 	and	result1, #63
28080     80 16 06 F6 | 	mov	arg03, #128
28084     FD 16 42 F5 | 	or	arg03, result1
28088     0A 17 42 FC | 	wrbyte	arg03, arg02
2808c     01 14 06 F1 | 	add	arg02, #1
28090     3F 00 06 F5 | 	and	_var01, #63
28094     80 FA 05 F6 | 	mov	result1, #128
28098     00 FB 41 F5 | 	or	result1, _var01
2809c     0A FB 41 FC | 	wrbyte	result1, arg02
280a0                 | ' 	chr = (hc | chr) + 0x10000;
280a0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
280a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
280a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
280a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
280a0                 | ' 	return 4;
280a0     04 FA 05 F6 | 	mov	result1, #4
280a4                 | _fatfs_cc_put_utf_ret
280a4     2D 00 64 FD | 	ret
280a8                 | 
280a8                 | _fatfs_cc_sync_window
280a8     02 4A 05 F6 | 	mov	COUNT_, #2
280ac     A8 00 A0 FD | 	call	#pushregs_
280b0     09 1F 02 F6 | 	mov	local01, arg01
280b4     00 20 06 F6 | 	mov	local02, #0
280b8     03 1E 06 F1 | 	add	local01, #3
280bc     0F FB C9 FA | 	rdbyte	result1, local01 wz
280c0     03 1E 86 F1 | 	sub	local01, #3
280c4     A4 00 90 AD |  if_e	jmp	#LR__4082
280c8     01 1E 06 F1 | 	add	local01, #1
280cc     0F 13 C2 FA | 	rdbyte	arg01, local01
280d0     33 1E 06 F1 | 	add	local01, #51
280d4     0F 15 02 F6 | 	mov	arg02, local01
280d8     04 1E 86 F1 | 	sub	local01, #4
280dc     0F 17 02 FB | 	rdlong	arg03, local01
280e0     30 1E 86 F1 | 	sub	local01, #48
280e4     01 18 06 F6 | 	mov	arg04, #1
280e8     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
280ec     00 FA 0D F2 | 	cmp	result1, #0 wz
280f0     74 00 90 5D |  if_ne	jmp	#LR__4080
280f4     03 1E 06 F1 | 	add	local01, #3
280f8     0F 01 48 FC | 	wrbyte	#0, local01
280fc     2D 1E 06 F1 | 	add	local01, #45
28100     0F FB 01 FB | 	rdlong	result1, local01
28104     0C 1E 86 F1 | 	sub	local01, #12
28108     0F 19 02 FB | 	rdlong	arg04, local01
2810c     0C FB 81 F1 | 	sub	result1, arg04
28110     08 1E 86 F1 | 	sub	local01, #8
28114     0F 19 02 FB | 	rdlong	arg04, local01
28118     1C 1E 86 F1 | 	sub	local01, #28
2811c     0C FB 11 F2 | 	cmp	result1, arg04 wc
28120     48 00 90 3D |  if_ae	jmp	#LR__4081
28124     02 1E 06 F1 | 	add	local01, #2
28128     0F 19 C2 FA | 	rdbyte	arg04, local01
2812c     02 1E 86 F1 | 	sub	local01, #2
28130     02 18 0E F2 | 	cmp	arg04, #2 wz
28134     34 00 90 5D |  if_ne	jmp	#LR__4081
28138     01 1E 06 F1 | 	add	local01, #1
2813c     0F 13 C2 FA | 	rdbyte	arg01, local01
28140     33 1E 06 F1 | 	add	local01, #51
28144     0F 15 02 F6 | 	mov	arg02, local01
28148     04 1E 86 F1 | 	sub	local01, #4
2814c     0F 17 02 FB | 	rdlong	arg03, local01
28150     14 1E 86 F1 | 	sub	local01, #20
28154     0F 1F 02 FB | 	rdlong	local01, local01
28158     0F 17 02 F1 | 	add	arg03, local01
2815c     01 18 06 F6 | 	mov	arg04, #1
28160     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
28164     04 00 90 FD | 	jmp	#LR__4081
28168                 | LR__4080
28168     01 20 06 F6 | 	mov	local02, #1
2816c                 | LR__4081
2816c                 | LR__4082
2816c                 | ' 			res = FR_DISK_ERR;
2816c                 | ' 		}
2816c                 | ' 	}
2816c                 | ' 	return res;
2816c     10 FB 01 F6 | 	mov	result1, local02
28170     A7 F0 03 F6 | 	mov	ptra, fp
28174     B2 00 A0 FD | 	call	#popregs_
28178                 | _fatfs_cc_sync_window_ret
28178     2D 00 64 FD | 	ret
2817c                 | 
2817c                 | _fatfs_cc_move_window
2817c     03 4A 05 F6 | 	mov	COUNT_, #3
28180     A8 00 A0 FD | 	call	#pushregs_
28184     09 1F 02 F6 | 	mov	local01, arg01
28188     0A 21 02 F6 | 	mov	local02, arg02
2818c     00 22 06 F6 | 	mov	local03, #0
28190     30 1E 06 F1 | 	add	local01, #48
28194     0F 19 02 FB | 	rdlong	arg04, local01
28198     30 1E 86 F1 | 	sub	local01, #48
2819c     0C 21 0A F2 | 	cmp	local02, arg04 wz
281a0     40 00 90 AD |  if_e	jmp	#LR__4091
281a4     0F 13 02 F6 | 	mov	arg01, local01
281a8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
281ac     FD 22 0A F6 | 	mov	local03, result1 wz
281b0     30 00 90 5D |  if_ne	jmp	#LR__4090
281b4     01 1E 06 F1 | 	add	local01, #1
281b8     0F 13 C2 FA | 	rdbyte	arg01, local01
281bc     33 1E 06 F1 | 	add	local01, #51
281c0     0F 15 02 F6 | 	mov	arg02, local01
281c4     10 17 02 F6 | 	mov	arg03, local02
281c8     01 18 06 F6 | 	mov	arg04, #1
281cc     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
281d0     00 FA 0D F2 | 	cmp	result1, #0 wz
281d4     01 20 66 56 |  if_ne	neg	local02, #1
281d8     01 22 06 56 |  if_ne	mov	local03, #1
281dc     04 1E 86 F1 | 	sub	local01, #4
281e0     0F 21 62 FC | 	wrlong	local02, local01
281e4                 | LR__4090
281e4                 | LR__4091
281e4                 | ' 				sect = (LBA_t)0 - 1;
281e4                 | ' 				res = FR_DISK_ERR;
281e4                 | ' 			}
281e4                 | ' 			fs->winsect = sect;
281e4                 | ' 		}
281e4                 | ' 	}
281e4                 | ' 	return res;
281e4     11 FB 01 F6 | 	mov	result1, local03
281e8     A7 F0 03 F6 | 	mov	ptra, fp
281ec     B2 00 A0 FD | 	call	#popregs_
281f0                 | _fatfs_cc_move_window_ret
281f0     2D 00 64 FD | 	ret
281f4                 | 
281f4                 | _fatfs_cc_sync_fs
281f4     02 4A 05 F6 | 	mov	COUNT_, #2
281f8     A8 00 A0 FD | 	call	#pushregs_
281fc     09 1F 02 F6 | 	mov	local01, arg01
28200     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
28204     FD 20 0A F6 | 	mov	local02, result1 wz
28208     D8 00 90 5D |  if_ne	jmp	#LR__4101
2820c     0F 19 C2 FA | 	rdbyte	arg04, local01
28210     03 18 0E F2 | 	cmp	arg04, #3 wz
28214     04 1E 06 A1 |  if_e	add	local01, #4
28218     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
2821c     04 1E 86 A1 |  if_e	sub	local01, #4
28220     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
28224     A0 00 90 5D |  if_ne	jmp	#LR__4100
28228     34 1E 06 F1 | 	add	local01, #52
2822c     0F 13 02 F6 | 	mov	arg01, local01
28230     00 14 06 F6 | 	mov	arg02, #0
28234     09 16 C6 F9 | 	decod	arg03, #9
28238     98 00 A0 FD | 	call	#\builtin_bytefill_
2823c     0F 13 02 F6 | 	mov	arg01, local01
28240     FE 13 06 F1 | 	add	arg01, #510
28244     55 00 80 FF 
28248     09 AB 58 FC | 	wrword	##43605, arg01
2824c     A9 B0 A0 FF 
28250     0F A5 68 FC | 	wrlong	##1096897106, local01
28254     0F 13 02 F6 | 	mov	arg01, local01
28258     E4 13 06 F1 | 	add	arg01, #484
2825c     B9 A0 B0 FF 
28260     09 E5 68 FC | 	wrlong	##1631679090, arg01
28264     0F 13 02 F6 | 	mov	arg01, local01
28268     E8 13 06 F1 | 	add	arg01, #488
2826c     20 1E 86 F1 | 	sub	local01, #32
28270     0F 15 02 FB | 	rdlong	arg02, local01
28274     09 15 62 FC | 	wrlong	arg02, arg01
28278     20 1E 06 F1 | 	add	local01, #32
2827c     0F 13 02 F6 | 	mov	arg01, local01
28280     EC 13 06 F1 | 	add	arg01, #492
28284     24 1E 86 F1 | 	sub	local01, #36
28288     0F 15 02 FB | 	rdlong	arg02, local01
2828c     09 15 62 FC | 	wrlong	arg02, arg01
28290     10 1E 06 F1 | 	add	local01, #16
28294     0F 17 02 FB | 	rdlong	arg03, local01
28298     01 16 06 F1 | 	add	arg03, #1
2829c     10 1E 06 F1 | 	add	local01, #16
282a0     0F 17 62 FC | 	wrlong	arg03, local01
282a4     2F 1E 86 F1 | 	sub	local01, #47
282a8     0F 13 C2 FA | 	rdbyte	arg01, local01
282ac     33 1E 06 F1 | 	add	local01, #51
282b0     0F 15 02 F6 | 	mov	arg02, local01
282b4     01 18 06 F6 | 	mov	arg04, #1
282b8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
282bc     30 1E 86 F1 | 	sub	local01, #48
282c0     0F 01 48 FC | 	wrbyte	#0, local01
282c4     04 1E 86 F1 | 	sub	local01, #4
282c8                 | LR__4100
282c8     01 1E 06 F1 | 	add	local01, #1
282cc     0F 13 C2 FA | 	rdbyte	arg01, local01
282d0     00 14 06 F6 | 	mov	arg02, #0
282d4     00 16 06 F6 | 	mov	arg03, #0
282d8     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
282dc     00 FA 0D F2 | 	cmp	result1, #0 wz
282e0     01 20 06 56 |  if_ne	mov	local02, #1
282e4                 | LR__4101
282e4                 | ' 	}
282e4                 | ' 
282e4                 | ' 	return res;
282e4     10 FB 01 F6 | 	mov	result1, local02
282e8     A7 F0 03 F6 | 	mov	ptra, fp
282ec     B2 00 A0 FD | 	call	#popregs_
282f0                 | _fatfs_cc_sync_fs_ret
282f0     2D 00 64 FD | 	ret
282f4                 | 
282f4                 | _fatfs_cc_clst2sect
282f4     02 14 86 F1 | 	sub	arg02, #2
282f8     18 12 06 F1 | 	add	arg01, #24
282fc     09 01 02 FB | 	rdlong	_var01, arg01
28300     18 12 86 F1 | 	sub	arg01, #24
28304     02 00 86 F1 | 	sub	_var01, #2
28308     00 15 12 F2 | 	cmp	arg02, _var01 wc
2830c     00 FA 05 36 |  if_ae	mov	result1, #0
28310     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
28314     0A 12 06 F1 | 	add	arg01, #10
28318     09 01 E2 FA | 	rdword	_var01, arg01
2831c     0A 01 02 FD | 	qmul	_var01, arg02
28320                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
28320     22 12 06 F1 | 	add	arg01, #34
28324     09 FB 01 FB | 	rdlong	result1, arg01
28328     18 00 62 FD | 	getqx	_var01
2832c     00 FB 01 F1 | 	add	result1, _var01
28330                 | _fatfs_cc_clst2sect_ret
28330     2D 00 64 FD | 	ret
28334                 | 
28334                 | _fatfs_cc_get_fat
28334     07 4A 05 F6 | 	mov	COUNT_, #7
28338     A8 00 A0 FD | 	call	#pushregs_
2833c     0A 1F 02 F6 | 	mov	local01, arg02
28340     09 21 02 FB | 	rdlong	local02, arg01
28344     02 1E 16 F2 | 	cmp	local01, #2 wc
28348     14 00 90 CD |  if_b	jmp	#LR__4110
2834c     18 20 06 F1 | 	add	local02, #24
28350     10 23 02 FB | 	rdlong	local03, local02
28354     18 20 86 F1 | 	sub	local02, #24
28358     11 1F 12 F2 | 	cmp	local01, local03 wc
2835c     08 00 90 CD |  if_b	jmp	#LR__4111
28360                 | LR__4110
28360     01 24 06 F6 | 	mov	local04, #1
28364     60 01 90 FD | 	jmp	#LR__4118
28368                 | LR__4111
28368     01 24 66 F6 | 	neg	local04, #1
2836c                 | ' 		val = 0xFFFFFFFF;
2836c                 | ' 
2836c                 | ' 		switch (fs->fs_type) {
2836c     10 27 C2 FA | 	rdbyte	local05, local02
28370     01 26 86 F1 | 	sub	local05, #1
28374     03 26 26 F3 | 	fle	local05, #3
28378     30 26 62 FD | 	jmprel	local05
2837c                 | LR__4112
2837c     0C 00 90 FD | 	jmp	#LR__4113
28380     B8 00 90 FD | 	jmp	#LR__4114
28384     F8 00 90 FD | 	jmp	#LR__4115
28388     38 01 90 FD | 	jmp	#LR__4116
2838c                 | LR__4113
2838c     0F 27 02 F6 | 	mov	local05, local01
28390     0F 13 02 F6 | 	mov	arg01, local01
28394     01 12 46 F0 | 	shr	arg01, #1
28398     09 27 02 F1 | 	add	local05, arg01
2839c     10 13 02 F6 | 	mov	arg01, local02
283a0     13 29 02 F6 | 	mov	local06, local05
283a4     09 28 46 F0 | 	shr	local06, #9
283a8     24 20 06 F1 | 	add	local02, #36
283ac     10 15 02 FB | 	rdlong	arg02, local02
283b0     24 20 86 F1 | 	sub	local02, #36
283b4     14 15 02 F1 | 	add	arg02, local06
283b8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
283bc     00 FA 0D F2 | 	cmp	result1, #0 wz
283c0     04 01 90 5D |  if_ne	jmp	#LR__4117
283c4     13 29 02 F6 | 	mov	local06, local05
283c8     FF 29 06 F5 | 	and	local06, #511
283cc     34 20 06 F1 | 	add	local02, #52
283d0     10 29 02 F1 | 	add	local06, local02
283d4     14 2B C2 FA | 	rdbyte	local07, local06
283d8     34 20 86 F1 | 	sub	local02, #52
283dc     10 13 02 F6 | 	mov	arg01, local02
283e0     01 26 06 F1 | 	add	local05, #1
283e4     13 29 02 F6 | 	mov	local06, local05
283e8     09 28 46 F0 | 	shr	local06, #9
283ec     24 20 06 F1 | 	add	local02, #36
283f0     10 15 02 FB | 	rdlong	arg02, local02
283f4     24 20 86 F1 | 	sub	local02, #36
283f8     14 15 02 F1 | 	add	arg02, local06
283fc     7C FD BF FD | 	call	#_fatfs_cc_move_window
28400     00 FA 0D F2 | 	cmp	result1, #0 wz
28404     C0 00 90 5D |  if_ne	jmp	#LR__4117
28408     FF 27 06 F5 | 	and	local05, #511
2840c     34 20 06 F1 | 	add	local02, #52
28410     10 27 02 F1 | 	add	local05, local02
28414     13 29 C2 FA | 	rdbyte	local06, local05
28418     08 28 66 F0 | 	shl	local06, #8
2841c     14 2B 42 F5 | 	or	local07, local06
28420     01 1E CE F7 | 	test	local01, #1 wz
28424     04 2A 46 50 |  if_ne	shr	local07, #4
28428     15 23 02 56 |  if_ne	mov	local03, local07
2842c     0B 2A 46 A7 |  if_e	zerox	local07, #11
28430     15 23 02 A6 |  if_e	mov	local03, local07
28434     11 25 02 F6 | 	mov	local04, local03
28438                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
28438                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
28438                 | ' 			break;
28438     8C 00 90 FD | 	jmp	#LR__4117
2843c                 | LR__4114
2843c     10 13 02 F6 | 	mov	arg01, local02
28440     0F 29 02 F6 | 	mov	local06, local01
28444     08 28 46 F0 | 	shr	local06, #8
28448     24 20 06 F1 | 	add	local02, #36
2844c     10 15 02 FB | 	rdlong	arg02, local02
28450     24 20 86 F1 | 	sub	local02, #36
28454     14 15 02 F1 | 	add	arg02, local06
28458     20 FD BF FD | 	call	#_fatfs_cc_move_window
2845c     00 FA 0D F2 | 	cmp	result1, #0 wz
28460     64 00 90 5D |  if_ne	jmp	#LR__4117
28464     34 20 06 F1 | 	add	local02, #52
28468     01 1E 66 F0 | 	shl	local01, #1
2846c     FF 1F 06 F5 | 	and	local01, #511
28470     0F 21 02 F1 | 	add	local02, local01
28474                 | ' {
28474                 | ' 
28474                 | ' 	return *((WORD*)ptr);
28474     10 FB E1 FA | 	rdword	result1, local02
28478     FD 24 32 F9 | 	getword	local04, result1, #0
2847c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2847c                 | ' 			break;
2847c     48 00 90 FD | 	jmp	#LR__4117
28480                 | LR__4115
28480     10 13 02 F6 | 	mov	arg01, local02
28484     0F 29 02 F6 | 	mov	local06, local01
28488     07 28 46 F0 | 	shr	local06, #7
2848c     24 20 06 F1 | 	add	local02, #36
28490     10 15 02 FB | 	rdlong	arg02, local02
28494     24 20 86 F1 | 	sub	local02, #36
28498     14 15 02 F1 | 	add	arg02, local06
2849c     DC FC BF FD | 	call	#_fatfs_cc_move_window
284a0     00 FA 0D F2 | 	cmp	result1, #0 wz
284a4     20 00 90 5D |  if_ne	jmp	#LR__4117
284a8     34 20 06 F1 | 	add	local02, #52
284ac     02 1E 66 F0 | 	shl	local01, #2
284b0     FF 1F 06 F5 | 	and	local01, #511
284b4     0F 21 02 F1 | 	add	local02, local01
284b8                 | ' {
284b8                 | ' 
284b8                 | ' 	return *((DWORD*)ptr);
284b8     10 25 02 FB | 	rdlong	local04, local02
284bc     7C 24 06 F4 | 	bitl	local04, #124
284c0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
284c0                 | ' 			break;
284c0     04 00 90 FD | 	jmp	#LR__4117
284c4                 | LR__4116
284c4     01 24 06 F6 | 	mov	local04, #1
284c8                 | LR__4117
284c8                 | LR__4118
284c8                 | ' 			val = 1;
284c8                 | ' 		}
284c8                 | ' 	}
284c8                 | ' 
284c8                 | ' 	return val;
284c8     12 FB 01 F6 | 	mov	result1, local04
284cc     A7 F0 03 F6 | 	mov	ptra, fp
284d0     B2 00 A0 FD | 	call	#popregs_
284d4                 | _fatfs_cc_get_fat_ret
284d4     2D 00 64 FD | 	ret
284d8                 | 
284d8                 | _fatfs_cc_put_fat
284d8     08 4A 05 F6 | 	mov	COUNT_, #8
284dc     A8 00 A0 FD | 	call	#pushregs_
284e0     09 1F 02 F6 | 	mov	local01, arg01
284e4     0A 21 02 F6 | 	mov	local02, arg02
284e8     0B 23 02 F6 | 	mov	local03, arg03
284ec     02 24 06 F6 | 	mov	local04, #2
284f0     02 20 16 F2 | 	cmp	local02, #2 wc
284f4     E0 01 90 CD |  if_b	jmp	#LR__4127
284f8     18 1E 06 F1 | 	add	local01, #24
284fc     0F 27 02 FB | 	rdlong	local05, local01
28500     18 1E 86 F1 | 	sub	local01, #24
28504     13 21 12 F2 | 	cmp	local02, local05 wc
28508     CC 01 90 3D |  if_ae	jmp	#LR__4127
2850c                 | ' 		switch (fs->fs_type) {
2850c     0F 29 C2 FA | 	rdbyte	local06, local01
28510     01 28 86 F1 | 	sub	local06, #1
28514     03 28 26 F3 | 	fle	local06, #3
28518     30 28 62 FD | 	jmprel	local06
2851c                 | LR__4120
2851c     0C 00 90 FD | 	jmp	#LR__4121
28520     F8 00 90 FD | 	jmp	#LR__4124
28524     40 01 90 FD | 	jmp	#LR__4125
28528     AC 01 90 FD | 	jmp	#LR__4126
2852c                 | LR__4121
2852c     10 2B 02 F6 | 	mov	local07, local02
28530     10 27 02 F6 | 	mov	local05, local02
28534     01 26 46 F0 | 	shr	local05, #1
28538     13 2B 02 F1 | 	add	local07, local05
2853c     0F 13 02 F6 | 	mov	arg01, local01
28540     15 29 02 F6 | 	mov	local06, local07
28544     09 28 46 F0 | 	shr	local06, #9
28548     24 1E 06 F1 | 	add	local01, #36
2854c     0F 15 02 FB | 	rdlong	arg02, local01
28550     24 1E 86 F1 | 	sub	local01, #36
28554     14 15 02 F1 | 	add	arg02, local06
28558     20 FC BF FD | 	call	#_fatfs_cc_move_window
2855c     FD 24 0A F6 | 	mov	local04, result1 wz
28560     74 01 90 5D |  if_ne	jmp	#LR__4126
28564     34 1E 06 F1 | 	add	local01, #52
28568     0F 2D 02 F6 | 	mov	local08, local01
2856c     15 27 02 F6 | 	mov	local05, local07
28570     FF 27 06 F5 | 	and	local05, #511
28574     13 2D 02 F1 | 	add	local08, local05
28578     01 20 CE F7 | 	test	local02, #1 wz
2857c     34 1E 86 F1 | 	sub	local01, #52
28580     01 2A 06 F1 | 	add	local07, #1
28584     18 00 90 AD |  if_e	jmp	#LR__4122
28588     16 27 C2 FA | 	rdbyte	local05, local08
2858c     13 27 42 F8 | 	getnib	local05, local05, #0
28590     11 29 E2 F8 | 	getbyte	local06, local03, #0
28594     04 28 66 F0 | 	shl	local06, #4
28598     14 27 42 F5 | 	or	local05, local06
2859c     04 00 90 FD | 	jmp	#LR__4123
285a0                 | LR__4122
285a0     11 27 02 F6 | 	mov	local05, local03
285a4                 | LR__4123
285a4     16 27 42 FC | 	wrbyte	local05, local08
285a8     03 1E 06 F1 | 	add	local01, #3
285ac     0F 03 48 FC | 	wrbyte	#1, local01
285b0     03 1E 86 F1 | 	sub	local01, #3
285b4     0F 13 02 F6 | 	mov	arg01, local01
285b8     15 2D 02 F6 | 	mov	local08, local07
285bc     09 2C 46 F0 | 	shr	local08, #9
285c0     24 1E 06 F1 | 	add	local01, #36
285c4     0F 15 02 FB | 	rdlong	arg02, local01
285c8     24 1E 86 F1 | 	sub	local01, #36
285cc     16 15 02 F1 | 	add	arg02, local08
285d0     A8 FB BF FD | 	call	#_fatfs_cc_move_window
285d4     FD 24 0A F6 | 	mov	local04, result1 wz
285d8     FC 00 90 5D |  if_ne	jmp	#LR__4126
285dc     34 1E 06 F1 | 	add	local01, #52
285e0     0F 2D 02 F6 | 	mov	local08, local01
285e4     FF 2B 06 F5 | 	and	local07, #511
285e8     15 2D 02 F1 | 	add	local08, local07
285ec     01 20 CE F7 | 	test	local02, #1 wz
285f0     04 22 46 50 |  if_ne	shr	local03, #4
285f4     11 27 02 56 |  if_ne	mov	local05, local03
285f8     16 27 C2 AA |  if_e	rdbyte	local05, local08
285fc     F0 26 06 A5 |  if_e	and	local05, #240
28600     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
28604     11 23 42 A8 |  if_e	getnib	local03, local03, #0
28608     11 27 42 A5 |  if_e	or	local05, local03
2860c     16 27 42 FC | 	wrbyte	local05, local08
28610     31 1E 86 F1 | 	sub	local01, #49
28614     0F 03 48 FC | 	wrbyte	#1, local01
28618                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
28618                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
28618                 | ' 			fs->wflag = 1;
28618                 | ' 			break;
28618     BC 00 90 FD | 	jmp	#LR__4126
2861c                 | LR__4124
2861c     0F 13 02 F6 | 	mov	arg01, local01
28620     10 2D 02 F6 | 	mov	local08, local02
28624     08 2C 46 F0 | 	shr	local08, #8
28628     24 1E 06 F1 | 	add	local01, #36
2862c     0F 15 02 FB | 	rdlong	arg02, local01
28630     24 1E 86 F1 | 	sub	local01, #36
28634     16 15 02 F1 | 	add	arg02, local08
28638     40 FB BF FD | 	call	#_fatfs_cc_move_window
2863c     FD 24 0A F6 | 	mov	local04, result1 wz
28640     94 00 90 5D |  if_ne	jmp	#LR__4126
28644     34 1E 06 F1 | 	add	local01, #52
28648     0F 13 02 F6 | 	mov	arg01, local01
2864c     01 20 66 F0 | 	shl	local02, #1
28650     FF 21 06 F5 | 	and	local02, #511
28654     10 13 02 F1 | 	add	arg01, local02
28658     09 23 52 FC | 	wrword	local03, arg01
2865c     31 1E 86 F1 | 	sub	local01, #49
28660     0F 03 48 FC | 	wrbyte	#1, local01
28664                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
28664                 | ' 			fs->wflag = 1;
28664                 | ' 			break;
28664     70 00 90 FD | 	jmp	#LR__4126
28668                 | LR__4125
28668     0F 13 02 F6 | 	mov	arg01, local01
2866c     10 2D 02 F6 | 	mov	local08, local02
28670     07 2C 46 F0 | 	shr	local08, #7
28674     24 1E 06 F1 | 	add	local01, #36
28678     0F 15 02 FB | 	rdlong	arg02, local01
2867c     24 1E 86 F1 | 	sub	local01, #36
28680     16 15 02 F1 | 	add	arg02, local08
28684     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28688     FD 24 0A F6 | 	mov	local04, result1 wz
2868c     48 00 90 5D |  if_ne	jmp	#LR__4126
28690     7C 22 06 F4 | 	bitl	local03, #124
28694     34 1E 06 F1 | 	add	local01, #52
28698     10 2D 02 F6 | 	mov	local08, local02
2869c     02 2C 66 F0 | 	shl	local08, #2
286a0     FF 2D 06 F5 | 	and	local08, #511
286a4     0F 13 02 F6 | 	mov	arg01, local01
286a8     16 13 02 F1 | 	add	arg01, local08
286ac                 | ' {
286ac                 | ' 
286ac                 | ' 	return *((DWORD*)ptr);
286ac     09 2D 02 FB | 	rdlong	local08, arg01
286b0     00 00 78 FF 
286b4     00 2C 06 F5 | 	and	local08, ##-268435456
286b8     16 23 42 F5 | 	or	local03, local08
286bc     0F 13 02 F6 | 	mov	arg01, local01
286c0     02 20 66 F0 | 	shl	local02, #2
286c4     FF 21 06 F5 | 	and	local02, #511
286c8     10 13 02 F1 | 	add	arg01, local02
286cc     09 23 62 FC | 	wrlong	local03, arg01
286d0     31 1E 86 F1 | 	sub	local01, #49
286d4     0F 03 48 FC | 	wrbyte	#1, local01
286d8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
286d8                 | ' 			}
286d8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
286d8                 | ' 			fs->wflag = 1;
286d8                 | ' 			break;
286d8                 | LR__4126
286d8                 | LR__4127
286d8                 | ' 		}
286d8                 | ' 	}
286d8                 | ' 	return res;
286d8     12 FB 01 F6 | 	mov	result1, local04
286dc     A7 F0 03 F6 | 	mov	ptra, fp
286e0     B2 00 A0 FD | 	call	#popregs_
286e4                 | _fatfs_cc_put_fat_ret
286e4     2D 00 64 FD | 	ret
286e8                 | 
286e8                 | _fatfs_cc_remove_chain
286e8     05 4A 05 F6 | 	mov	COUNT_, #5
286ec     A8 00 A0 FD | 	call	#pushregs_
286f0     09 1F 02 F6 | 	mov	local01, arg01
286f4     0A 21 02 F6 | 	mov	local02, arg02
286f8     0B 23 02 F6 | 	mov	local03, arg03
286fc     0F 25 02 FB | 	rdlong	local04, local01
28700     02 20 16 F2 | 	cmp	local02, #2 wc
28704     14 00 90 CD |  if_b	jmp	#LR__4130
28708     18 24 06 F1 | 	add	local04, #24
2870c     12 FB 01 FB | 	rdlong	result1, local04
28710     18 24 86 F1 | 	sub	local04, #24
28714     FD 20 12 F2 | 	cmp	local02, result1 wc
28718     08 00 90 CD |  if_b	jmp	#LR__4131
2871c                 | LR__4130
2871c     02 FA 05 F6 | 	mov	result1, #2
28720     CC 00 90 FD | 	jmp	#LR__4136
28724                 | LR__4131
28724     00 22 0E F2 | 	cmp	local03, #0 wz
28728     18 00 90 AD |  if_e	jmp	#LR__4132
2872c     11 15 02 F6 | 	mov	arg02, local03
28730     12 13 02 F6 | 	mov	arg01, local04
28734     01 16 66 F6 | 	neg	arg03, #1
28738     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2873c     00 FA 0D F2 | 	cmp	result1, #0 wz
28740     AC 00 90 5D |  if_ne	jmp	#LR__4136
28744                 | LR__4132
28744                 | ' 	}
28744                 | ' 
28744                 | ' 
28744                 | ' 	do {
28744                 | LR__4133
28744     10 15 02 F6 | 	mov	arg02, local02
28748     0F 13 02 F6 | 	mov	arg01, local01
2874c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28750     FD 26 0A F6 | 	mov	local05, result1 wz
28754     94 00 90 AD |  if_e	jmp	#LR__4135
28758     01 26 0E F2 | 	cmp	local05, #1 wz
2875c     02 FA 05 A6 |  if_e	mov	result1, #2
28760     8C 00 90 AD |  if_e	jmp	#LR__4136
28764     FF FF 7F FF 
28768     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2876c     01 FA 05 A6 |  if_e	mov	result1, #1
28770     7C 00 90 AD |  if_e	jmp	#LR__4136
28774     10 15 02 F6 | 	mov	arg02, local02
28778     12 13 02 F6 | 	mov	arg01, local04
2877c     00 16 06 F6 | 	mov	arg03, #0
28780     54 FD BF FD | 	call	#_fatfs_cc_put_fat
28784     FD 22 0A F6 | 	mov	local03, result1 wz
28788     11 FB 01 56 |  if_ne	mov	result1, local03
2878c     60 00 90 5D |  if_ne	jmp	#LR__4136
28790     18 24 06 F1 | 	add	local04, #24
28794     12 23 02 FB | 	rdlong	local03, local04
28798     02 22 86 F1 | 	sub	local03, #2
2879c     04 24 86 F1 | 	sub	local04, #4
287a0     12 21 02 FB | 	rdlong	local02, local04
287a4     14 24 86 F1 | 	sub	local04, #20
287a8     11 21 12 F2 | 	cmp	local02, local03 wc
287ac     24 00 90 3D |  if_ae	jmp	#LR__4134
287b0     14 24 06 F1 | 	add	local04, #20
287b4     12 23 02 FB | 	rdlong	local03, local04
287b8     01 22 06 F1 | 	add	local03, #1
287bc     12 23 62 FC | 	wrlong	local03, local04
287c0     10 24 86 F1 | 	sub	local04, #16
287c4     12 23 C2 FA | 	rdbyte	local03, local04
287c8     01 22 46 F5 | 	or	local03, #1
287cc     12 23 42 FC | 	wrbyte	local03, local04
287d0     04 24 86 F1 | 	sub	local04, #4
287d4                 | LR__4134
287d4     13 21 02 F6 | 	mov	local02, local05
287d8     18 24 06 F1 | 	add	local04, #24
287dc     12 27 02 FB | 	rdlong	local05, local04
287e0     18 24 86 F1 | 	sub	local04, #24
287e4     13 21 12 F2 | 	cmp	local02, local05 wc
287e8     58 FF 9F CD |  if_b	jmp	#LR__4133
287ec                 | LR__4135
287ec                 | ' #line 1500 "ff.c"
287ec                 | ' 	return FR_OK;
287ec     00 FA 05 F6 | 	mov	result1, #0
287f0                 | LR__4136
287f0     A7 F0 03 F6 | 	mov	ptra, fp
287f4     B2 00 A0 FD | 	call	#popregs_
287f8                 | _fatfs_cc_remove_chain_ret
287f8     2D 00 64 FD | 	ret
287fc                 | 
287fc                 | _fatfs_cc_create_chain
287fc     09 4A 05 F6 | 	mov	COUNT_, #9
28800     A8 00 A0 FD | 	call	#pushregs_
28804     09 1F 02 F6 | 	mov	local01, arg01
28808     0A 21 0A F6 | 	mov	local02, arg02 wz
2880c     0F 23 02 FB | 	rdlong	local03, local01
28810     28 00 90 5D |  if_ne	jmp	#LR__4140
28814     10 22 06 F1 | 	add	local03, #16
28818     11 25 0A FB | 	rdlong	local04, local03 wz
2881c     10 22 86 F1 | 	sub	local03, #16
28820     18 22 06 51 |  if_ne	add	local03, #24
28824     11 27 02 5B |  if_ne	rdlong	local05, local03
28828     18 22 86 51 |  if_ne	sub	local03, #24
2882c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28830     50 00 90 4D |  if_c_and_nz	jmp	#LR__4141
28834     01 24 06 F6 | 	mov	local04, #1
28838     48 00 90 FD | 	jmp	#LR__4141
2883c                 | LR__4140
2883c     10 15 02 F6 | 	mov	arg02, local02
28840     0F 13 02 F6 | 	mov	arg01, local01
28844     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28848     FD 24 02 F6 | 	mov	local04, result1
2884c     02 24 16 F2 | 	cmp	local04, #2 wc
28850     01 FA 05 C6 |  if_b	mov	result1, #1
28854     BC 01 90 CD |  if_b	jmp	#LR__4151
28858     FF FF 7F FF 
2885c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28860     12 FB 01 A6 |  if_e	mov	result1, local04
28864     AC 01 90 AD |  if_e	jmp	#LR__4151
28868     18 22 06 F1 | 	add	local03, #24
2886c     11 27 02 FB | 	rdlong	local05, local03
28870     18 22 86 F1 | 	sub	local03, #24
28874     13 25 12 F2 | 	cmp	local04, local05 wc
28878     12 FB 01 C6 |  if_b	mov	result1, local04
2887c     94 01 90 CD |  if_b	jmp	#LR__4151
28880     10 25 02 F6 | 	mov	local04, local02
28884                 | LR__4141
28884     14 22 06 F1 | 	add	local03, #20
28888     11 27 0A FB | 	rdlong	local05, local03 wz
2888c     14 22 86 F1 | 	sub	local03, #20
28890     00 FA 05 A6 |  if_e	mov	result1, #0
28894     7C 01 90 AD |  if_e	jmp	#LR__4151
28898     00 28 06 F6 | 	mov	local06, #0
2889c     10 25 0A F2 | 	cmp	local04, local02 wz
288a0     74 00 90 5D |  if_ne	jmp	#LR__4144
288a4     12 29 02 F6 | 	mov	local06, local04
288a8     01 28 06 F1 | 	add	local06, #1
288ac     18 22 06 F1 | 	add	local03, #24
288b0     11 27 02 FB | 	rdlong	local05, local03
288b4     18 22 86 F1 | 	sub	local03, #24
288b8     13 29 12 F2 | 	cmp	local06, local05 wc
288bc     02 28 06 36 |  if_ae	mov	local06, #2
288c0     14 15 02 F6 | 	mov	arg02, local06
288c4     0F 13 02 F6 | 	mov	arg01, local01
288c8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
288cc     FD 26 02 F6 | 	mov	local05, result1
288d0     01 26 0E F2 | 	cmp	local05, #1 wz
288d4     FF FF 7F 5F 
288d8     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
288dc     13 FB 01 A6 |  if_e	mov	result1, local05
288e0     30 01 90 AD |  if_e	jmp	#LR__4151
288e4     00 26 0E F2 | 	cmp	local05, #0 wz
288e8     2C 00 90 AD |  if_e	jmp	#LR__4143
288ec     10 22 06 F1 | 	add	local03, #16
288f0     11 2B 02 FB | 	rdlong	local07, local03
288f4     10 22 86 F1 | 	sub	local03, #16
288f8     02 2A 16 F2 | 	cmp	local07, #2 wc
288fc     14 00 90 CD |  if_b	jmp	#LR__4142
28900     18 22 06 F1 | 	add	local03, #24
28904     11 27 02 FB | 	rdlong	local05, local03
28908     18 22 86 F1 | 	sub	local03, #24
2890c     13 2B 12 F2 | 	cmp	local07, local05 wc
28910     15 25 02 C6 |  if_b	mov	local04, local07
28914                 | LR__4142
28914     00 28 06 F6 | 	mov	local06, #0
28918                 | LR__4143
28918                 | LR__4144
28918     00 28 0E F2 | 	cmp	local06, #0 wz
2891c     60 00 90 5D |  if_ne	jmp	#LR__4147
28920     12 29 02 F6 | 	mov	local06, local04
28924                 | ' 			ncl = scl;
28924                 | ' 			for (;;) {
28924                 | LR__4145
28924     01 28 06 F1 | 	add	local06, #1
28928     18 22 06 F1 | 	add	local03, #24
2892c     11 27 02 FB | 	rdlong	local05, local03
28930     18 22 86 F1 | 	sub	local03, #24
28934     13 29 12 F2 | 	cmp	local06, local05 wc
28938     02 28 06 36 |  if_ae	mov	local06, #2
2893c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28940     00 FA 05 16 |  if_a	mov	result1, #0
28944     CC 00 90 1D |  if_a	jmp	#LR__4151
28948     14 15 02 F6 | 	mov	arg02, local06
2894c     0F 13 02 F6 | 	mov	arg01, local01
28950     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28954     FD 2A 0A F6 | 	mov	local07, result1 wz
28958     24 00 90 AD |  if_e	jmp	#LR__4146
2895c     01 2A 0E F2 | 	cmp	local07, #1 wz
28960     FF FF 7F 5F 
28964     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28968     15 FB 01 A6 |  if_e	mov	result1, local07
2896c     A4 00 90 AD |  if_e	jmp	#LR__4151
28970     12 29 0A F2 | 	cmp	local06, local04 wz
28974     00 FA 05 A6 |  if_e	mov	result1, #0
28978     98 00 90 AD |  if_e	jmp	#LR__4151
2897c     A4 FF 9F FD | 	jmp	#LR__4145
28980                 | LR__4146
28980                 | LR__4147
28980     11 13 02 F6 | 	mov	arg01, local03
28984     14 15 02 F6 | 	mov	arg02, local06
28988     01 16 66 F6 | 	neg	arg03, #1
2898c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28990     FD 2C 0A F6 | 	mov	local08, result1 wz
28994     1C 00 90 5D |  if_ne	jmp	#LR__4148
28998     00 20 0E F2 | 	cmp	local02, #0 wz
2899c     14 00 90 AD |  if_e	jmp	#LR__4148
289a0     11 13 02 F6 | 	mov	arg01, local03
289a4     10 15 02 F6 | 	mov	arg02, local02
289a8     14 17 02 F6 | 	mov	arg03, local06
289ac     28 FB BF FD | 	call	#_fatfs_cc_put_fat
289b0     FD 2C 02 F6 | 	mov	local08, result1
289b4                 | LR__4148
289b4     00 2C 0E F2 | 	cmp	local08, #0 wz
289b8     4C 00 90 5D |  if_ne	jmp	#LR__4149
289bc     10 22 06 F1 | 	add	local03, #16
289c0     11 29 62 FC | 	wrlong	local06, local03
289c4     08 22 06 F1 | 	add	local03, #8
289c8     11 27 02 FB | 	rdlong	local05, local03
289cc     02 26 86 F1 | 	sub	local05, #2
289d0     04 22 86 F1 | 	sub	local03, #4
289d4     11 2F 02 FB | 	rdlong	local09, local03
289d8     14 22 86 F1 | 	sub	local03, #20
289dc     13 2F 1A F2 | 	cmp	local09, local05 wcz
289e0     14 22 06 E1 |  if_be	add	local03, #20
289e4     11 2F 02 EB |  if_be	rdlong	local09, local03
289e8     01 2E 86 E1 |  if_be	sub	local09, #1
289ec     11 2F 62 EC |  if_be	wrlong	local09, local03
289f0     14 22 86 E1 |  if_be	sub	local03, #20
289f4     04 22 06 F1 | 	add	local03, #4
289f8     11 27 C2 FA | 	rdbyte	local05, local03
289fc     01 26 46 F5 | 	or	local05, #1
28a00     11 27 42 FC | 	wrbyte	local05, local03
28a04     08 00 90 FD | 	jmp	#LR__4150
28a08                 | LR__4149
28a08     01 2C 0E F2 | 	cmp	local08, #1 wz
28a0c     01 28 C6 F6 | 	negz	local06, #1
28a10                 | LR__4150
28a10                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28a10                 | ' 	}
28a10                 | ' 
28a10                 | ' 	return ncl;
28a10     14 FB 01 F6 | 	mov	result1, local06
28a14                 | LR__4151
28a14     A7 F0 03 F6 | 	mov	ptra, fp
28a18     B2 00 A0 FD | 	call	#popregs_
28a1c                 | _fatfs_cc_create_chain_ret
28a1c     2D 00 64 FD | 	ret
28a20                 | 
28a20                 | _fatfs_cc_dir_clear
28a20     06 4A 05 F6 | 	mov	COUNT_, #6
28a24     A8 00 A0 FD | 	call	#pushregs_
28a28     09 1F 02 F6 | 	mov	local01, arg01
28a2c     0A 21 02 F6 | 	mov	local02, arg02
28a30     0F 13 02 F6 | 	mov	arg01, local01
28a34     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28a38     00 FA 0D F2 | 	cmp	result1, #0 wz
28a3c     01 FA 05 56 |  if_ne	mov	result1, #1
28a40     90 00 90 5D |  if_ne	jmp	#LR__4162
28a44     0F 13 02 F6 | 	mov	arg01, local01
28a48     10 15 02 F6 | 	mov	arg02, local02
28a4c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28a50     FD 22 02 F6 | 	mov	local03, result1
28a54     30 1E 06 F1 | 	add	local01, #48
28a58     0F 23 62 FC | 	wrlong	local03, local01
28a5c     04 1E 06 F1 | 	add	local01, #4
28a60     0F 13 02 F6 | 	mov	arg01, local01
28a64     00 14 06 F6 | 	mov	arg02, #0
28a68     09 16 C6 F9 | 	decod	arg03, #9
28a6c     98 00 A0 FD | 	call	#\builtin_bytefill_
28a70     0F 25 02 F6 | 	mov	local04, local01
28a74                 | ' #line 1667 "ff.c"
28a74                 | ' 	{
28a74                 | ' 		ibuf = fs->win; szb = 1;
28a74                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28a74     00 26 06 F6 | 	mov	local05, #0
28a78     34 1E 86 F1 | 	sub	local01, #52
28a7c                 | LR__4160
28a7c     0A 1E 06 F1 | 	add	local01, #10
28a80     0F 29 E2 FA | 	rdword	local06, local01
28a84     0A 1E 86 F1 | 	sub	local01, #10
28a88     14 27 12 F2 | 	cmp	local05, local06 wc
28a8c     2C 00 90 3D |  if_ae	jmp	#LR__4161
28a90     01 1E 06 F1 | 	add	local01, #1
28a94     0F 13 C2 FA | 	rdbyte	arg01, local01
28a98     01 1E 86 F1 | 	sub	local01, #1
28a9c     12 15 02 F6 | 	mov	arg02, local04
28aa0     11 17 02 F6 | 	mov	arg03, local03
28aa4     13 17 02 F1 | 	add	arg03, local05
28aa8     01 18 06 F6 | 	mov	arg04, #1
28aac     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
28ab4     01 26 06 A1 |  if_e	add	local05, #1
28ab8     C0 FF 9F AD |  if_e	jmp	#LR__4160
28abc                 | LR__4161
28abc                 | ' 	}
28abc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28abc     0A 1E 06 F1 | 	add	local01, #10
28ac0     0F 25 E2 FA | 	rdword	local04, local01
28ac4     12 27 0A F2 | 	cmp	local05, local04 wz
28ac8     00 28 06 A6 |  if_e	mov	local06, #0
28acc     01 28 06 56 |  if_ne	mov	local06, #1
28ad0     14 FB 01 F6 | 	mov	result1, local06
28ad4                 | LR__4162
28ad4     A7 F0 03 F6 | 	mov	ptra, fp
28ad8     B2 00 A0 FD | 	call	#popregs_
28adc                 | _fatfs_cc_dir_clear_ret
28adc     2D 00 64 FD | 	ret
28ae0                 | 
28ae0                 | _fatfs_cc_dir_sdi
28ae0     06 4A 05 F6 | 	mov	COUNT_, #6
28ae4     A8 00 A0 FD | 	call	#pushregs_
28ae8     09 1F 02 F6 | 	mov	local01, arg01
28aec     0A 21 02 F6 | 	mov	local02, arg02
28af0     0F 23 02 FB | 	rdlong	local03, local01
28af4     00 10 00 FF 
28af8     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28afc     1F 20 CE C7 |  if_b	test	local02, #31 wz
28b00                 | ' 		return FR_INT_ERR;
28b00     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28b04     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4176
28b08     10 1E 06 F1 | 	add	local01, #16
28b0c     0F 21 62 FC | 	wrlong	local02, local01
28b10     08 1E 86 F1 | 	sub	local01, #8
28b14     0F 25 0A FB | 	rdlong	local04, local01 wz
28b18     08 1E 86 F1 | 	sub	local01, #8
28b1c     11 27 C2 AA |  if_e	rdbyte	local05, local03
28b20     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28b24     28 22 06 21 |  if_nc_and_z	add	local03, #40
28b28     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28b2c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28b30     00 24 0E F2 | 	cmp	local04, #0 wz
28b34     3C 00 90 5D |  if_ne	jmp	#LR__4170
28b38     10 27 02 F6 | 	mov	local05, local02
28b3c     05 26 46 F0 | 	shr	local05, #5
28b40     08 22 06 F1 | 	add	local03, #8
28b44     11 15 E2 FA | 	rdword	arg02, local03
28b48     08 22 86 F1 | 	sub	local03, #8
28b4c     0A 27 12 F2 | 	cmp	local05, arg02 wc
28b50     02 FA 05 36 |  if_ae	mov	result1, #2
28b54     E4 00 90 3D |  if_ae	jmp	#LR__4176
28b58     28 22 06 F1 | 	add	local03, #40
28b5c     11 27 02 FB | 	rdlong	local05, local03
28b60     28 22 86 F1 | 	sub	local03, #40
28b64     18 1E 06 F1 | 	add	local01, #24
28b68     0F 27 62 FC | 	wrlong	local05, local01
28b6c     18 1E 86 F1 | 	sub	local01, #24
28b70     7C 00 90 FD | 	jmp	#LR__4175
28b74                 | LR__4170
28b74     0A 22 06 F1 | 	add	local03, #10
28b78     11 29 E2 FA | 	rdword	local06, local03
28b7c     0A 22 86 F1 | 	sub	local03, #10
28b80     09 28 66 F0 | 	shl	local06, #9
28b84                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28b84                 | ' 		while (ofs >= csz) {
28b84                 | LR__4171
28b84     14 21 12 F2 | 	cmp	local02, local06 wc
28b88     4C 00 90 CD |  if_b	jmp	#LR__4174
28b8c     0F 13 02 F6 | 	mov	arg01, local01
28b90     12 15 02 F6 | 	mov	arg02, local04
28b94     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28b98     FD 24 02 F6 | 	mov	local04, result1
28b9c     FF FF 7F FF 
28ba0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28ba4     01 FA 05 A6 |  if_e	mov	result1, #1
28ba8     90 00 90 AD |  if_e	jmp	#LR__4176
28bac     02 24 16 F2 | 	cmp	local04, #2 wc
28bb0     14 00 90 CD |  if_b	jmp	#LR__4172
28bb4     18 22 06 F1 | 	add	local03, #24
28bb8     11 27 02 FB | 	rdlong	local05, local03
28bbc     18 22 86 F1 | 	sub	local03, #24
28bc0     13 25 12 F2 | 	cmp	local04, local05 wc
28bc4     08 00 90 CD |  if_b	jmp	#LR__4173
28bc8                 | LR__4172
28bc8     02 FA 05 F6 | 	mov	result1, #2
28bcc     6C 00 90 FD | 	jmp	#LR__4176
28bd0                 | LR__4173
28bd0     14 21 82 F1 | 	sub	local02, local06
28bd4     AC FF 9F FD | 	jmp	#LR__4171
28bd8                 | LR__4174
28bd8     11 13 02 F6 | 	mov	arg01, local03
28bdc     12 15 02 F6 | 	mov	arg02, local04
28be0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28be4     18 1E 06 F1 | 	add	local01, #24
28be8     0F FB 61 FC | 	wrlong	result1, local01
28bec     18 1E 86 F1 | 	sub	local01, #24
28bf0                 | LR__4175
28bf0     14 1E 06 F1 | 	add	local01, #20
28bf4     0F 25 62 FC | 	wrlong	local04, local01
28bf8     04 1E 06 F1 | 	add	local01, #4
28bfc     0F 27 0A FB | 	rdlong	local05, local01 wz
28c00     18 1E 86 F1 | 	sub	local01, #24
28c04     02 FA 05 A6 |  if_e	mov	result1, #2
28c08     30 00 90 AD |  if_e	jmp	#LR__4176
28c0c     10 29 02 F6 | 	mov	local06, local02
28c10     09 28 46 F0 | 	shr	local06, #9
28c14     18 1E 06 F1 | 	add	local01, #24
28c18     0F 27 02 FB | 	rdlong	local05, local01
28c1c     14 27 02 F1 | 	add	local05, local06
28c20     0F 27 62 FC | 	wrlong	local05, local01
28c24     34 22 06 F1 | 	add	local03, #52
28c28     FF 21 06 F5 | 	and	local02, #511
28c2c     10 23 02 F1 | 	add	local03, local02
28c30     04 1E 06 F1 | 	add	local01, #4
28c34     0F 23 62 FC | 	wrlong	local03, local01
28c38                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28c38                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28c38                 | ' 
28c38                 | ' 	return FR_OK;
28c38     00 FA 05 F6 | 	mov	result1, #0
28c3c                 | LR__4176
28c3c     A7 F0 03 F6 | 	mov	ptra, fp
28c40     B2 00 A0 FD | 	call	#popregs_
28c44                 | _fatfs_cc_dir_sdi_ret
28c44     2D 00 64 FD | 	ret
28c48                 | 
28c48                 | _fatfs_cc_dir_next
28c48     05 4A 05 F6 | 	mov	COUNT_, #5
28c4c     A8 00 A0 FD | 	call	#pushregs_
28c50     09 1F 02 F6 | 	mov	local01, arg01
28c54     0A 21 02 F6 | 	mov	local02, arg02
28c58     0F 23 02 FB | 	rdlong	local03, local01
28c5c     10 1E 06 F1 | 	add	local01, #16
28c60     0F 25 02 FB | 	rdlong	local04, local01
28c64     10 1E 86 F1 | 	sub	local01, #16
28c68     20 24 06 F1 | 	add	local04, #32
28c6c     00 10 00 FF 
28c70     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28c74     18 1E 06 31 |  if_ae	add	local01, #24
28c78     0F 01 68 3C |  if_ae	wrlong	#0, local01
28c7c     18 1E 86 31 |  if_ae	sub	local01, #24
28c80     18 1E 06 F1 | 	add	local01, #24
28c84     0F 15 0A FB | 	rdlong	arg02, local01 wz
28c88     18 1E 86 F1 | 	sub	local01, #24
28c8c     04 FA 05 A6 |  if_e	mov	result1, #4
28c90     64 01 90 AD |  if_e	jmp	#LR__4185
28c94     FF 25 CE F7 | 	test	local04, #511 wz
28c98     3C 01 90 5D |  if_ne	jmp	#LR__4184
28c9c     18 1E 06 F1 | 	add	local01, #24
28ca0     0F 15 02 FB | 	rdlong	arg02, local01
28ca4     01 14 06 F1 | 	add	arg02, #1
28ca8     0F 15 62 FC | 	wrlong	arg02, local01
28cac     04 1E 86 F1 | 	sub	local01, #4
28cb0     0F 15 0A FB | 	rdlong	arg02, local01 wz
28cb4     14 1E 86 F1 | 	sub	local01, #20
28cb8     2C 00 90 5D |  if_ne	jmp	#LR__4180
28cbc     12 15 02 F6 | 	mov	arg02, local04
28cc0     05 14 46 F0 | 	shr	arg02, #5
28cc4     08 22 06 F1 | 	add	local03, #8
28cc8     11 21 E2 FA | 	rdword	local02, local03
28ccc     08 22 86 F1 | 	sub	local03, #8
28cd0     10 15 12 F2 | 	cmp	arg02, local02 wc
28cd4     18 1E 06 31 |  if_ae	add	local01, #24
28cd8     0F 01 68 3C |  if_ae	wrlong	#0, local01
28cdc                 | ' 				dp->sect = 0; return FR_NO_FILE;
28cdc     04 FA 05 36 |  if_ae	mov	result1, #4
28ce0     14 01 90 3D |  if_ae	jmp	#LR__4185
28ce4     F0 00 90 FD | 	jmp	#LR__4183
28ce8                 | LR__4180
28ce8     12 13 02 F6 | 	mov	arg01, local04
28cec     09 12 46 F0 | 	shr	arg01, #9
28cf0     0A 22 06 F1 | 	add	local03, #10
28cf4     11 15 E2 FA | 	rdword	arg02, local03
28cf8     0A 22 86 F1 | 	sub	local03, #10
28cfc     01 14 86 F1 | 	sub	arg02, #1
28d00     0A 13 CA F7 | 	test	arg01, arg02 wz
28d04     D0 00 90 5D |  if_ne	jmp	#LR__4182
28d08     0F 13 02 F6 | 	mov	arg01, local01
28d0c     14 1E 06 F1 | 	add	local01, #20
28d10     0F 15 02 FB | 	rdlong	arg02, local01
28d14     14 1E 86 F1 | 	sub	local01, #20
28d18     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28d1c     FD 26 02 F6 | 	mov	local05, result1
28d20     02 26 16 F2 | 	cmp	local05, #2 wc
28d24     02 FA 05 C6 |  if_b	mov	result1, #2
28d28     CC 00 90 CD |  if_b	jmp	#LR__4185
28d2c     FF FF 7F FF 
28d30     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28d34     01 FA 05 A6 |  if_e	mov	result1, #1
28d38     BC 00 90 AD |  if_e	jmp	#LR__4185
28d3c     18 22 06 F1 | 	add	local03, #24
28d40     11 15 02 FB | 	rdlong	arg02, local03
28d44     18 22 86 F1 | 	sub	local03, #24
28d48     0A 27 12 F2 | 	cmp	local05, arg02 wc
28d4c     68 00 90 CD |  if_b	jmp	#LR__4181
28d50     00 20 0E F2 | 	cmp	local02, #0 wz
28d54     18 1E 06 A1 |  if_e	add	local01, #24
28d58     0F 01 68 AC |  if_e	wrlong	#0, local01
28d5c                 | ' 						dp->sect = 0; return FR_NO_FILE;
28d5c     04 FA 05 A6 |  if_e	mov	result1, #4
28d60     94 00 90 AD |  if_e	jmp	#LR__4185
28d64     0F 13 02 F6 | 	mov	arg01, local01
28d68     14 1E 06 F1 | 	add	local01, #20
28d6c     0F 15 02 FB | 	rdlong	arg02, local01
28d70     14 1E 86 F1 | 	sub	local01, #20
28d74     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28d78     FD 26 0A F6 | 	mov	local05, result1 wz
28d7c     07 FA 05 A6 |  if_e	mov	result1, #7
28d80     74 00 90 AD |  if_e	jmp	#LR__4185
28d84     01 26 0E F2 | 	cmp	local05, #1 wz
28d88     02 FA 05 A6 |  if_e	mov	result1, #2
28d8c     68 00 90 AD |  if_e	jmp	#LR__4185
28d90     FF FF 7F FF 
28d94     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28d98     01 FA 05 A6 |  if_e	mov	result1, #1
28d9c     58 00 90 AD |  if_e	jmp	#LR__4185
28da0     13 15 02 F6 | 	mov	arg02, local05
28da4     11 13 02 F6 | 	mov	arg01, local03
28da8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28dac     00 FA 0D F2 | 	cmp	result1, #0 wz
28db0     01 FA 05 56 |  if_ne	mov	result1, #1
28db4     40 00 90 5D |  if_ne	jmp	#LR__4185
28db8                 | LR__4181
28db8     14 1E 06 F1 | 	add	local01, #20
28dbc     0F 27 62 FC | 	wrlong	local05, local01
28dc0     11 13 02 F6 | 	mov	arg01, local03
28dc4     13 15 02 F6 | 	mov	arg02, local05
28dc8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28dcc     04 1E 06 F1 | 	add	local01, #4
28dd0     0F FB 61 FC | 	wrlong	result1, local01
28dd4     18 1E 86 F1 | 	sub	local01, #24
28dd8                 | LR__4182
28dd8                 | LR__4183
28dd8                 | LR__4184
28dd8     10 1E 06 F1 | 	add	local01, #16
28ddc     0F 25 62 FC | 	wrlong	local04, local01
28de0     34 22 06 F1 | 	add	local03, #52
28de4     FF 25 06 F5 | 	and	local04, #511
28de8     12 23 02 F1 | 	add	local03, local04
28dec     0C 1E 06 F1 | 	add	local01, #12
28df0     0F 23 62 FC | 	wrlong	local03, local01
28df4                 | ' #line 1771 "ff.c"
28df4                 | ' 				}
28df4                 | ' 				dp->clust = clst;
28df4                 | ' 				dp->sect = clst2sect(fs, clst);
28df4                 | ' 			}
28df4                 | ' 		}
28df4                 | ' 	}
28df4                 | ' 	dp->dptr = ofs;
28df4                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28df4                 | ' 
28df4                 | ' 	return FR_OK;
28df4     00 FA 05 F6 | 	mov	result1, #0
28df8                 | LR__4185
28df8     A7 F0 03 F6 | 	mov	ptra, fp
28dfc     B2 00 A0 FD | 	call	#popregs_
28e00                 | _fatfs_cc_dir_next_ret
28e00     2D 00 64 FD | 	ret
28e04                 | 
28e04                 | _fatfs_cc_dir_alloc
28e04     08 4A 05 F6 | 	mov	COUNT_, #8
28e08     A8 00 A0 FD | 	call	#pushregs_
28e0c     09 1F 02 F6 | 	mov	local01, arg01
28e10     0A 21 02 F6 | 	mov	local02, arg02
28e14     0F 23 02 FB | 	rdlong	local03, local01
28e18     0F 13 02 F6 | 	mov	arg01, local01
28e1c     00 14 06 F6 | 	mov	arg02, #0
28e20     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28e24     FD 24 0A F6 | 	mov	local04, result1 wz
28e28     70 00 90 5D |  if_ne	jmp	#LR__4194
28e2c     00 26 06 F6 | 	mov	local05, #0
28e30                 | ' 		n = 0;
28e30                 | ' 		do {
28e30                 | LR__4190
28e30     18 1E 06 F1 | 	add	local01, #24
28e34     0F 15 02 FB | 	rdlong	arg02, local01
28e38     18 1E 86 F1 | 	sub	local01, #24
28e3c     11 13 02 F6 | 	mov	arg01, local03
28e40     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28e44     FD 24 0A F6 | 	mov	local04, result1 wz
28e48     50 00 90 5D |  if_ne	jmp	#LR__4193
28e4c     1C 1E 06 F1 | 	add	local01, #28
28e50     0F 29 02 FB | 	rdlong	local06, local01
28e54     1C 1E 86 F1 | 	sub	local01, #28
28e58     14 29 C2 FA | 	rdbyte	local06, local06
28e5c     E5 28 0E F2 | 	cmp	local06, #229 wz
28e60     1C 1E 06 51 |  if_ne	add	local01, #28
28e64     0F 2B 02 5B |  if_ne	rdlong	local07, local01
28e68     1C 1E 86 51 |  if_ne	sub	local01, #28
28e6c     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
28e70     10 00 90 5D |  if_ne	jmp	#LR__4191
28e74     01 26 06 F1 | 	add	local05, #1
28e78     10 27 0A F2 | 	cmp	local05, local02 wz
28e7c     1C 00 90 AD |  if_e	jmp	#LR__4193
28e80     04 00 90 FD | 	jmp	#LR__4192
28e84                 | LR__4191
28e84     00 26 06 F6 | 	mov	local05, #0
28e88                 | LR__4192
28e88     0F 13 02 F6 | 	mov	arg01, local01
28e8c     01 14 06 F6 | 	mov	arg02, #1
28e90     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
28e94     FD 24 0A F6 | 	mov	local04, result1 wz
28e98     94 FF 9F AD |  if_e	jmp	#LR__4190
28e9c                 | LR__4193
28e9c                 | LR__4194
28e9c     04 24 0E F2 | 	cmp	local04, #4 wz
28ea0     07 24 06 A6 |  if_e	mov	local04, #7
28ea4                 | ' 	return res;
28ea4     12 FB 01 F6 | 	mov	result1, local04
28ea8     A7 F0 03 F6 | 	mov	ptra, fp
28eac     B2 00 A0 FD | 	call	#popregs_
28eb0                 | _fatfs_cc_dir_alloc_ret
28eb0     2D 00 64 FD | 	ret
28eb4                 | 
28eb4                 | _fatfs_cc_ld_clust
28eb4     09 01 02 F6 | 	mov	_var01, arg01
28eb8     0A 13 02 F6 | 	mov	arg01, arg02
28ebc     1A 12 06 F1 | 	add	arg01, #26
28ec0                 | ' {
28ec0                 | ' 
28ec0                 | ' 	return *((WORD*)ptr);
28ec0     09 FB E1 FA | 	rdword	result1, arg01
28ec4     FD 12 32 F9 | 	getword	arg01, result1, #0
28ec8     00 01 C2 FA | 	rdbyte	_var01, _var01
28ecc     03 00 0E F2 | 	cmp	_var01, #3 wz
28ed0     14 14 06 A1 |  if_e	add	arg02, #20
28ed4                 | ' {
28ed4                 | ' 
28ed4                 | ' 	return *((WORD*)ptr);
28ed4     0A FB E1 AA |  if_e	rdword	result1, arg02
28ed8     10 FA 65 A0 |  if_e	shl	result1, #16
28edc     FD 12 42 A5 |  if_e	or	arg01, result1
28ee0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
28ee0                 | ' 	}
28ee0                 | ' 
28ee0                 | ' 	return cl;
28ee0     09 FB 01 F6 | 	mov	result1, arg01
28ee4                 | _fatfs_cc_ld_clust_ret
28ee4     2D 00 64 FD | 	ret
28ee8                 | 
28ee8                 | _fatfs_cc_st_clust
28ee8     09 01 02 F6 | 	mov	_var01, arg01
28eec     0A 13 02 F6 | 	mov	arg01, arg02
28ef0     1A 12 06 F1 | 	add	arg01, #26
28ef4     09 17 52 FC | 	wrword	arg03, arg01
28ef8     00 01 C2 FA | 	rdbyte	_var01, _var01
28efc     03 00 0E F2 | 	cmp	_var01, #3 wz
28f00     14 14 06 A1 |  if_e	add	arg02, #20
28f04     10 16 46 A0 |  if_e	shr	arg03, #16
28f08     0A 17 52 AC |  if_e	wrword	arg03, arg02
28f0c                 | _fatfs_cc_st_clust_ret
28f0c     2D 00 64 FD | 	ret
28f10                 | 
28f10                 | _fatfs_cc_cmp_lfn
28f10     07 4A 05 F6 | 	mov	COUNT_, #7
28f14     A8 00 A0 FD | 	call	#pushregs_
28f18     09 1F 02 F6 | 	mov	local01, arg01
28f1c     0A 13 02 F6 | 	mov	arg01, arg02
28f20     1A 12 06 F1 | 	add	arg01, #26
28f24                 | ' {
28f24                 | ' 
28f24                 | ' 	return *((WORD*)ptr);
28f24     09 FB E9 FA | 	rdword	result1, arg01 wz
28f28     00 FA 05 56 |  if_ne	mov	result1, #0
28f2c     E0 00 90 5D |  if_ne	jmp	#LR__4206
28f30     0A 21 C2 FA | 	rdbyte	local02, arg02
28f34     3F 20 06 F5 | 	and	local02, #63
28f38     01 20 86 F1 | 	sub	local02, #1
28f3c     0D 20 06 FD | 	qmul	local02, #13
28f40                 | ' 
28f40                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
28f40                 | ' 
28f40                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
28f40     01 22 06 F6 | 	mov	local03, #1
28f44     00 24 06 F6 | 	mov	local04, #0
28f48     18 26 62 FD | 	getqx	local05
28f4c                 | LR__4200
28f4c     0D 24 16 F2 | 	cmp	local04, #13 wc
28f50     9C 00 90 3D |  if_ae	jmp	#LR__4205
28f54     0A 13 02 F6 | 	mov	arg01, arg02
28f58     12 21 02 F6 | 	mov	local02, local04
28f5c     01 00 00 FF 
28f60     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
28f64     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
28f68     10 21 C2 FA | 	rdbyte	local02, local02
28f6c     01 20 06 FA | 	mul	local02, #1
28f70     10 13 02 F1 | 	add	arg01, local02
28f74     01 00 00 FF 
28f78     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
28f7c                 | ' {
28f7c                 | ' 
28f7c                 | ' 	return *((WORD*)ptr);
28f7c     09 FB E1 FA | 	rdword	result1, arg01
28f80     FD 28 02 F6 | 	mov	local06, result1
28f84     11 21 02 F6 | 	mov	local02, local03
28f88     0F 20 4E F7 | 	zerox	local02, #15 wz
28f8c     44 00 90 AD |  if_e	jmp	#LR__4203
28f90     00 27 16 F2 | 	cmp	local05, #256 wc
28f94     2C 00 90 3D |  if_ae	jmp	#LR__4201
28f98     14 13 32 F9 | 	getword	arg01, local06, #0
28f9c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28fa0     FD 20 02 F6 | 	mov	local02, result1
28fa4     13 23 02 F6 | 	mov	local03, local05
28fa8     01 22 66 F0 | 	shl	local03, #1
28fac     0F 23 02 F1 | 	add	local03, local01
28fb0     11 13 E2 FA | 	rdword	arg01, local03
28fb4     01 26 06 F1 | 	add	local05, #1
28fb8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28fbc     FD 20 0A F2 | 	cmp	local02, result1 wz
28fc0     08 00 90 AD |  if_e	jmp	#LR__4202
28fc4                 | LR__4201
28fc4                 | ' 				return 0;
28fc4     00 FA 05 F6 | 	mov	result1, #0
28fc8     44 00 90 FD | 	jmp	#LR__4206
28fcc                 | LR__4202
28fcc     14 23 02 F6 | 	mov	local03, local06
28fd0     14 00 90 FD | 	jmp	#LR__4204
28fd4                 | LR__4203
28fd4     14 29 32 F9 | 	getword	local06, local06, #0
28fd8     7F 00 00 FF 
28fdc     FF 29 0E F2 | 	cmp	local06, ##65535 wz
28fe0     00 FA 05 56 |  if_ne	mov	result1, #0
28fe4     28 00 90 5D |  if_ne	jmp	#LR__4206
28fe8                 | LR__4204
28fe8     01 24 06 F1 | 	add	local04, #1
28fec     5C FF 9F FD | 	jmp	#LR__4200
28ff0                 | LR__4205
28ff0     0A 21 C2 FA | 	rdbyte	local02, arg02
28ff4     40 20 CE F7 | 	test	local02, #64 wz
28ff8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
28ffc     01 26 66 50 |  if_ne	shl	local05, #1
29000     0F 27 02 51 |  if_ne	add	local05, local01
29004     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
29008     00 FA 05 56 |  if_ne	mov	result1, #0
2900c                 | ' 
2900c                 | ' 	return 1;
2900c     01 FA 05 A6 |  if_e	mov	result1, #1
29010                 | LR__4206
29010     A7 F0 03 F6 | 	mov	ptra, fp
29014     B2 00 A0 FD | 	call	#popregs_
29018                 | _fatfs_cc_cmp_lfn_ret
29018     2D 00 64 FD | 	ret
2901c                 | 
2901c                 | _fatfs_cc_pick_lfn
2901c     09 01 02 F6 | 	mov	_var01, arg01
29020     0A 13 02 F6 | 	mov	arg01, arg02
29024     1A 12 06 F1 | 	add	arg01, #26
29028                 | ' {
29028                 | ' 
29028                 | ' 	return *((WORD*)ptr);
29028     09 FB E9 FA | 	rdword	result1, arg01 wz
2902c     00 FA 05 56 |  if_ne	mov	result1, #0
29030     D4 00 90 5D |  if_ne	jmp	#LR__4215
29034     0A 03 C2 FA | 	rdbyte	_var02, arg02
29038     40 02 26 F5 | 	andn	_var02, #64
2903c     01 02 86 F1 | 	sub	_var02, #1
29040     0D 02 06 FD | 	qmul	_var02, #13
29044                 | ' 
29044                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
29044                 | ' 
29044                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29044     01 04 06 F6 | 	mov	_var03, #1
29048     00 06 06 F6 | 	mov	_var04, #0
2904c     18 08 62 FD | 	getqx	_var05
29050                 | LR__4210
29050     0D 06 16 F2 | 	cmp	_var04, #13 wc
29054     80 00 90 3D |  if_ae	jmp	#LR__4213
29058     0A 13 02 F6 | 	mov	arg01, arg02
2905c     03 03 02 F6 | 	mov	_var02, _var04
29060     01 00 00 FF 
29064     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29068     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2906c     01 03 C2 FA | 	rdbyte	_var02, _var02
29070     01 02 06 FA | 	mul	_var02, #1
29074     01 13 02 F1 | 	add	arg01, _var02
29078     01 00 00 FF 
2907c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29080                 | ' {
29080                 | ' 
29080                 | ' 	return *((WORD*)ptr);
29080     09 FB E1 FA | 	rdword	result1, arg01
29084     FD 0A 02 F6 | 	mov	_var06, result1
29088     02 03 02 F6 | 	mov	_var02, _var03
2908c     0F 02 4E F7 | 	zerox	_var02, #15 wz
29090     28 00 90 AD |  if_e	jmp	#LR__4211
29094     00 09 16 F2 | 	cmp	_var05, #256 wc
29098     00 FA 05 36 |  if_ae	mov	result1, #0
2909c     68 00 90 3D |  if_ae	jmp	#LR__4215
290a0     04 03 02 F6 | 	mov	_var02, _var05
290a4     01 02 66 F0 | 	shl	_var02, #1
290a8     00 03 02 F1 | 	add	_var02, _var01
290ac     05 05 02 F6 | 	mov	_var03, _var06
290b0     01 05 52 FC | 	wrword	_var03, _var02
290b4     01 08 06 F1 | 	add	_var05, #1
290b8     14 00 90 FD | 	jmp	#LR__4212
290bc                 | LR__4211
290bc     05 0B 32 F9 | 	getword	_var06, _var06, #0
290c0     7F 00 00 FF 
290c4     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
290c8     00 FA 05 56 |  if_ne	mov	result1, #0
290cc     38 00 90 5D |  if_ne	jmp	#LR__4215
290d0                 | LR__4212
290d0     01 06 06 F1 | 	add	_var04, #1
290d4     78 FF 9F FD | 	jmp	#LR__4210
290d8                 | LR__4213
290d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
290dc     40 02 CE F7 | 	test	_var02, #64 wz
290e0     02 0D 02 56 |  if_ne	mov	_var07, _var03
290e4     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
290e8     18 00 90 AD |  if_e	jmp	#LR__4214
290ec     00 09 16 F2 | 	cmp	_var05, #256 wc
290f0     00 FA 05 36 |  if_ae	mov	result1, #0
290f4     10 00 90 3D |  if_ae	jmp	#LR__4215
290f8     01 08 66 F0 | 	shl	_var05, #1
290fc     00 09 02 F1 | 	add	_var05, _var01
29100     04 01 58 FC | 	wrword	#0, _var05
29104                 | LR__4214
29104                 | ' 		lfnbuf[i] = 0;
29104                 | ' 	}
29104                 | ' 
29104                 | ' 	return 1;
29104     01 FA 05 F6 | 	mov	result1, #1
29108                 | LR__4215
29108                 | _fatfs_cc_pick_lfn_ret
29108     2D 00 64 FD | 	ret
2910c                 | 
2910c                 | _fatfs_cc_put_lfn
2910c     0D 14 06 F1 | 	add	arg02, #13
29110     0A 19 42 FC | 	wrbyte	arg04, arg02
29114     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
29118     01 18 86 F1 | 	sub	arg04, #1
2911c     0D 18 06 FD | 	qmul	arg04, #13
29120     09 01 02 F6 | 	mov	_var01, arg01
29124     02 14 86 F1 | 	sub	arg02, #2
29128     0A 1F 48 FC | 	wrbyte	#15, arg02
2912c     01 14 06 F1 | 	add	arg02, #1
29130     0A 01 48 FC | 	wrbyte	#0, arg02
29134     0C 14 86 F1 | 	sub	arg02, #12
29138     0A 13 02 F6 | 	mov	arg01, arg02
2913c     1A 12 06 F1 | 	add	arg01, #26
29140     09 01 58 FC | 	wrword	#0, arg01
29144     00 02 06 F6 | 	mov	_var02, #0
29148     00 04 06 F6 | 	mov	_var03, #0
2914c                 | ' 	BYTE* dir,
2914c                 | ' 	BYTE ord,
2914c                 | ' 	BYTE sum
2914c                 | ' )
2914c                 | ' {
2914c                 | ' 	UINT i, s;
2914c                 | ' 	WCHAR wc;
2914c                 | ' 
2914c                 | ' 
2914c                 | ' 	dir[ 13 ] = sum;
2914c                 | ' 	dir[ 11 ] =  0x0F ;
2914c                 | ' 	dir[ 12 ] = 0;
2914c                 | ' 	st_word(dir +  26 , 0);
2914c                 | ' 
2914c                 | ' 	i = (ord - 1) * 13;
2914c                 | ' 	s = wc = 0;
2914c                 | ' 	do {
2914c     01 00 00 FF 
29150     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29154     18 06 62 FD | 	getqx	_var04
29158     97 2A 48 FB | 	callpa	#(@LR__4221-@LR__4220)>>2,fcache_load_ptr_
2915c                 | LR__4220
2915c     01 19 32 F9 | 	getword	arg04, _var02, #0
29160     7F 00 00 FF 
29164     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29168     03 13 02 56 |  if_ne	mov	arg01, _var04
2916c     01 06 06 51 |  if_ne	add	_var04, #1
29170     01 12 66 50 |  if_ne	shl	arg01, #1
29174     00 13 02 51 |  if_ne	add	arg01, _var01
29178     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2917c     0A 13 02 F6 | 	mov	arg01, arg02
29180     02 19 02 F6 | 	mov	arg04, _var03
29184     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29188     0C 19 C2 FA | 	rdbyte	arg04, arg04
2918c     01 18 06 FA | 	mul	arg04, #1
29190     0C 13 02 F1 | 	add	arg01, arg04
29194     09 03 52 FC | 	wrword	_var02, arg01
29198     01 19 02 F6 | 	mov	arg04, _var02
2919c     0F 18 4E F7 | 	zerox	arg04, #15 wz
291a0     0F 02 CE A9 |  if_e	bmask	_var02, #15
291a4     01 04 06 F1 | 	add	_var03, #1
291a8     0D 04 16 F2 | 	cmp	_var03, #13 wc
291ac     AC FF 9F CD |  if_b	jmp	#LR__4220
291b0                 | LR__4221
291b0     01 00 00 FF 
291b4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
291b8     01 03 32 F9 | 	getword	_var02, _var02, #0
291bc     7F 00 00 FF 
291c0     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
291c4     01 06 66 50 |  if_ne	shl	_var04, #1
291c8     00 07 02 51 |  if_ne	add	_var04, _var01
291cc     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
291d0     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
291d4     40 16 46 A5 |  if_e	or	arg03, #64
291d8     0A 17 42 FC | 	wrbyte	arg03, arg02
291dc                 | _fatfs_cc_put_lfn_ret
291dc     2D 00 64 FD | 	ret
291e0                 | 
291e0                 | _fatfs_cc_gen_numname
291e0     08 4A 05 F6 | 	mov	COUNT_, #8
291e4     A8 00 A0 FD | 	call	#pushregs_
291e8     2C F0 07 F1 | 	add	ptra, #44
291ec     09 1F 02 F6 | 	mov	local01, arg01
291f0     0A 21 02 F6 | 	mov	local02, arg02
291f4     0B 23 02 F6 | 	mov	local03, arg03
291f8     0C 25 02 F6 | 	mov	local04, arg04
291fc     0F 13 02 F6 | 	mov	arg01, local01
29200     10 15 02 F6 | 	mov	arg02, local02
29204     0B 16 06 F6 | 	mov	arg03, #11
29208     60 75 BF FD | 	call	#__system____builtin_memmove
2920c     06 24 16 F2 | 	cmp	local04, #6 wc
29210     48 00 90 CD |  if_b	jmp	#LR__4235
29214     12 27 02 F6 | 	mov	local05, local04
29218     97 1E 48 FB | 	callpa	#(@LR__4233-@LR__4230)>>2,fcache_load_ptr_
2921c                 | ' 		sreg = seq;
2921c                 | ' 		while (*lfn) {
2921c                 | LR__4230
2921c     11 29 EA FA | 	rdword	local06, local03 wz
29220     34 00 90 AD |  if_e	jmp	#LR__4234
29224     11 2B E2 FA | 	rdword	local07, local03
29228                 | ' 			wc = *lfn++;
29228                 | ' 			for (i = 0; i < 16; i++) {
29228     02 22 06 F1 | 	add	local03, #2
2922c     10 12 DC FC | 	rep	@LR__4232, #16
29230                 | LR__4231
29230     01 26 66 F0 | 	shl	local05, #1
29234     15 29 32 F9 | 	getword	local06, local07, #0
29238     01 28 06 F5 | 	and	local06, #1
2923c     14 27 02 F1 | 	add	local05, local06
29240     15 2B 32 F9 | 	getword	local07, local07, #0
29244     01 2A 46 F0 | 	shr	local07, #1
29248     10 26 2E F4 | 	testbn	local05, #16 wz
2924c     88 00 00 5F 
29250     21 26 66 55 |  if_ne	xor	local05, ##69665
29254                 | LR__4232
29254     C4 FF 9F FD | 	jmp	#LR__4230
29258                 | LR__4233
29258                 | LR__4234
29258     13 25 02 F6 | 	mov	local04, local05
2925c                 | LR__4235
2925c     07 2A 06 F6 | 	mov	local07, #7
29260                 | ' 			}
29260                 | ' 		}
29260                 | ' 		seq = (UINT)sreg;
29260                 | ' 	}
29260                 | ' 
29260                 | ' 
29260                 | ' 	i = 7;
29260                 | ' 	do {
29260     10 4E 05 F1 | 	add	fp, #16
29264     97 1A 48 FB | 	callpa	#(@LR__4237-@LR__4236)>>2,fcache_load_ptr_
29268                 | LR__4236
29268     12 27 42 F8 | 	getnib	local05, local04, #0
2926c     30 26 06 F1 | 	add	local05, #48
29270     04 24 46 F0 | 	shr	local04, #4
29274     13 29 E2 F8 | 	getbyte	local06, local05, #0
29278     3A 28 16 F2 | 	cmp	local06, #58 wc
2927c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29280     07 26 06 31 |  if_ae	add	local05, #7
29284     15 29 02 F6 | 	mov	local06, local07
29288     01 2A 8E F1 | 	sub	local07, #1 wz
2928c     A7 28 02 F1 | 	add	local06, fp
29290     14 27 42 FC | 	wrbyte	local05, local06
29294     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29298     CC FF 9F 5D |  if_ne	jmp	#LR__4236
2929c                 | LR__4237
2929c     15 29 02 F6 | 	mov	local06, local07
292a0     A7 28 02 F1 | 	add	local06, fp
292a4     14 FD 48 FC | 	wrbyte	#126, local06
292a8                 | ' 	ns[i] = '~';
292a8                 | ' 
292a8                 | ' 
292a8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
292a8     00 26 06 F6 | 	mov	local05, #0
292ac     10 4E 85 F1 | 	sub	fp, #16
292b0     97 2A 48 FB | 	callpa	#(@LR__4240-@LR__4238)>>2,fcache_load_ptr_
292b4                 | LR__4238
292b4     15 27 12 F2 | 	cmp	local05, local07 wc
292b8     4C 00 90 3D |  if_ae	jmp	#LR__4241
292bc     13 29 02 F6 | 	mov	local06, local05
292c0     0F 29 02 F1 | 	add	local06, local01
292c4     14 29 C2 FA | 	rdbyte	local06, local06
292c8     20 28 0E F2 | 	cmp	local06, #32 wz
292cc     38 00 90 AD |  if_e	jmp	#LR__4241
292d0     13 13 02 F6 | 	mov	arg01, local05
292d4     0F 13 02 F1 | 	add	arg01, local01
292d8     09 13 CA FA | 	rdbyte	arg01, arg01 wz
292dc     00 FA 05 56 |  if_ne	mov	result1, #0
292e0                 | ' 
292e0                 | ' 	return 0;
292e0     00 FA 05 A6 |  if_e	mov	result1, #0
292e4     00 FA 0D F2 | 	cmp	result1, #0 wz
292e8     14 00 90 AD |  if_e	jmp	#LR__4239
292ec     15 29 02 F6 | 	mov	local06, local07
292f0     01 28 86 F1 | 	sub	local06, #1
292f4     14 27 0A F2 | 	cmp	local05, local06 wz
292f8     0C 00 90 AD |  if_e	jmp	#LR__4241
292fc     01 26 06 F1 | 	add	local05, #1
29300                 | LR__4239
29300     01 26 06 F1 | 	add	local05, #1
29304     AC FF 9F FD | 	jmp	#LR__4238
29308                 | LR__4240
29308                 | LR__4241
29308     97 20 48 FB | 	callpa	#(@LR__4245-@LR__4242)>>2,fcache_load_ptr_
2930c                 | ' 			j++;
2930c                 | ' 		}
2930c                 | ' 	}
2930c                 | ' 	do {
2930c                 | LR__4242
2930c     13 29 02 F6 | 	mov	local06, local05
29310     0F 29 02 F1 | 	add	local06, local01
29314     08 2A 16 F2 | 	cmp	local07, #8 wc
29318     01 26 06 F1 | 	add	local05, #1
2931c     1C 00 90 3D |  if_ae	jmp	#LR__4243
29320     15 25 02 F6 | 	mov	local04, local07
29324     10 4E 05 F1 | 	add	fp, #16
29328     A7 24 02 F1 | 	add	local04, fp
2932c     12 2D C2 FA | 	rdbyte	local08, local04
29330     01 2A 06 F1 | 	add	local07, #1
29334     10 4E 85 F1 | 	sub	fp, #16
29338     04 00 90 FD | 	jmp	#LR__4244
2933c                 | LR__4243
2933c     20 2C 06 F6 | 	mov	local08, #32
29340                 | LR__4244
29340     14 2D 42 FC | 	wrbyte	local08, local06
29344     08 26 16 F2 | 	cmp	local05, #8 wc
29348     C0 FF 9F CD |  if_b	jmp	#LR__4242
2934c                 | LR__4245
2934c     A7 F0 03 F6 | 	mov	ptra, fp
29350     B2 00 A0 FD | 	call	#popregs_
29354                 | _fatfs_cc_gen_numname_ret
29354     2D 00 64 FD | 	ret
29358                 | 
29358                 | _fatfs_cc_sum_sfn
29358     00 00 06 F6 | 	mov	_var01, #0
2935c                 | ' )
2935c                 | ' {
2935c                 | ' 	BYTE sum = 0;
2935c                 | ' 	UINT n = 11;
2935c                 | ' 
2935c                 | ' 	do {
2935c     97 12 48 FB | 	callpa	#(@LR__4252-@LR__4250)>>2,fcache_load_ptr_
29360                 | LR__4250
29360     0B 10 DC FC | 	rep	@LR__4253, #11
29364                 | LR__4251
29364     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29368     01 FA 45 F0 | 	shr	result1, #1
2936c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29370     07 00 66 F0 | 	shl	_var01, #7
29374     00 FB 01 F1 | 	add	result1, _var01
29378     09 01 C2 FA | 	rdbyte	_var01, arg01
2937c     FD 00 02 F1 | 	add	_var01, result1
29380     01 12 06 F1 | 	add	arg01, #1
29384                 | LR__4252
29384                 | LR__4253
29384                 | ' 	return sum;
29384     00 FB 01 F6 | 	mov	result1, _var01
29388                 | _fatfs_cc_sum_sfn_ret
29388     2D 00 64 FD | 	ret
2938c                 | 
2938c                 | _fatfs_cc_dir_read
2938c     0C 4A 05 F6 | 	mov	COUNT_, #12
29390     A8 00 A0 FD | 	call	#pushregs_
29394     09 1F 02 F6 | 	mov	local01, arg01
29398     0A 21 02 F6 | 	mov	local02, arg02
2939c     04 22 06 F6 | 	mov	local03, #4
293a0     0F 25 02 FB | 	rdlong	local04, local01
293a4     FF 26 06 F6 | 	mov	local05, #255
293a8     FF 28 06 F6 | 	mov	local06, #255
293ac                 | ' )
293ac                 | ' {
293ac                 | ' 	FRESULT res = FR_NO_FILE;
293ac                 | ' 	FATFS *fs = dp->obj.fs;
293ac                 | ' 	BYTE attr, b;
293ac                 | ' 
293ac                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
293ac                 | ' 
293ac                 | ' 
293ac                 | ' 	while (dp->sect) {
293ac                 | LR__4260
293ac     18 1E 06 F1 | 	add	local01, #24
293b0     0F FB 09 FB | 	rdlong	result1, local01 wz
293b4     18 1E 86 F1 | 	sub	local01, #24
293b8     AC 01 90 AD |  if_e	jmp	#LR__4270
293bc     18 1E 06 F1 | 	add	local01, #24
293c0     0F 15 02 FB | 	rdlong	arg02, local01
293c4     18 1E 86 F1 | 	sub	local01, #24
293c8     12 13 02 F6 | 	mov	arg01, local04
293cc     AC ED BF FD | 	call	#_fatfs_cc_move_window
293d0     FD 22 0A F6 | 	mov	local03, result1 wz
293d4     90 01 90 5D |  if_ne	jmp	#LR__4270
293d8     1C 1E 06 F1 | 	add	local01, #28
293dc     0F FB 01 FB | 	rdlong	result1, local01
293e0     1C 1E 86 F1 | 	sub	local01, #28
293e4     FD 2A C2 FA | 	rdbyte	local07, result1
293e8     15 FB 01 F6 | 	mov	result1, local07
293ec     07 FA 4D F7 | 	zerox	result1, #7 wz
293f0     04 22 06 A6 |  if_e	mov	local03, #4
293f4                 | ' 			res = FR_NO_FILE; break;
293f4     70 01 90 AD |  if_e	jmp	#LR__4270
293f8     1C 1E 06 F1 | 	add	local01, #28
293fc     0F 2D 02 FB | 	rdlong	local08, local01
29400     0B 2C 06 F1 | 	add	local08, #11
29404     16 2F C2 FA | 	rdbyte	local09, local08
29408     3F 2E 06 F5 | 	and	local09, #63
2940c     16 1E 86 F1 | 	sub	local01, #22
29410     0F 2F 42 FC | 	wrbyte	local09, local01
29414     06 1E 86 F1 | 	sub	local01, #6
29418     15 FB E1 F8 | 	getbyte	result1, local07, #0
2941c     E5 FA 0D F2 | 	cmp	result1, #229 wz
29420     15 2D 02 56 |  if_ne	mov	local08, local07
29424     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
29428     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
2942c     1C 00 90 AD |  if_e	jmp	#LR__4261
29430     00 30 06 F6 | 	mov	local10, #0
29434     17 2D E2 F8 | 	getbyte	local08, local09, #0
29438     20 2C 26 F5 | 	andn	local08, #32
2943c     08 2C 0E F2 | 	cmp	local08, #8 wz
29440     01 30 06 A6 |  if_e	mov	local10, #1
29444     10 31 0A F2 | 	cmp	local10, local02 wz
29448     08 00 90 AD |  if_e	jmp	#LR__4262
2944c                 | LR__4261
2944c     FF 26 06 F6 | 	mov	local05, #255
29450     00 01 90 FD | 	jmp	#LR__4269
29454                 | LR__4262
29454     17 2F E2 F8 | 	getbyte	local09, local09, #0
29458     0F 2E 0E F2 | 	cmp	local09, #15 wz
2945c     B4 00 90 5D |  if_ne	jmp	#LR__4266
29460     15 33 E2 F8 | 	getbyte	local11, local07, #0
29464     40 32 CE F7 | 	test	local11, #64 wz
29468     30 00 90 AD |  if_e	jmp	#LR__4263
2946c     1C 1E 06 F1 | 	add	local01, #28
29470     0F 33 02 FB | 	rdlong	local11, local01
29474     0D 32 06 F1 | 	add	local11, #13
29478     19 29 C2 FA | 	rdbyte	local06, local11
2947c     15 2B E2 F8 | 	getbyte	local07, local07, #0
29480     BF 2A 06 F5 | 	and	local07, #191
29484     15 27 02 F6 | 	mov	local05, local07
29488     0C 1E 86 F1 | 	sub	local01, #12
2948c     0F 33 02 FB | 	rdlong	local11, local01
29490     1C 1E 06 F1 | 	add	local01, #28
29494     0F 33 62 FC | 	wrlong	local11, local01
29498     2C 1E 86 F1 | 	sub	local01, #44
2949c                 | LR__4263
2949c     15 2D E2 F8 | 	getbyte	local08, local07, #0
294a0     13 31 E2 F8 | 	getbyte	local10, local05, #0
294a4     18 2D 0A F2 | 	cmp	local08, local10 wz
294a8     5C 00 90 5D |  if_ne	jmp	#LR__4264
294ac     14 31 E2 F8 | 	getbyte	local10, local06, #0
294b0     1C 1E 06 F1 | 	add	local01, #28
294b4     0F 2F 02 FB | 	rdlong	local09, local01
294b8     1C 1E 86 F1 | 	sub	local01, #28
294bc     0D 2E 06 F1 | 	add	local09, #13
294c0     17 2D C2 FA | 	rdbyte	local08, local09
294c4     16 2F E2 F8 | 	getbyte	local09, local08, #0
294c8     17 31 0A F2 | 	cmp	local10, local09 wz
294cc     38 00 90 5D |  if_ne	jmp	#LR__4264
294d0     0C 24 06 F1 | 	add	local04, #12
294d4     12 13 02 FB | 	rdlong	arg01, local04
294d8     0C 24 86 F1 | 	sub	local04, #12
294dc     1C 1E 06 F1 | 	add	local01, #28
294e0     0F 35 02 FB | 	rdlong	local12, local01
294e4     1C 1E 86 F1 | 	sub	local01, #28
294e8     1A 15 02 F6 | 	mov	arg02, local12
294ec     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
294f0     00 FA 4D F2 | 	cmps	result1, #0 wz
294f4     13 35 02 56 |  if_ne	mov	local12, local05
294f8     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
294fc     01 34 86 51 |  if_ne	sub	local12, #1
29500     1A 33 02 56 |  if_ne	mov	local11, local12
29504     04 00 90 5D |  if_ne	jmp	#LR__4265
29508                 | LR__4264
29508     FF 32 06 F6 | 	mov	local11, #255
2950c                 | LR__4265
2950c     19 27 02 F6 | 	mov	local05, local11
29510     40 00 90 FD | 	jmp	#LR__4268
29514                 | LR__4266
29514     13 33 02 F6 | 	mov	local11, local05
29518     07 32 4E F7 | 	zerox	local11, #7 wz
2951c     20 00 90 5D |  if_ne	jmp	#LR__4267
29520     14 29 E2 F8 | 	getbyte	local06, local06, #0
29524     1C 1E 06 F1 | 	add	local01, #28
29528     0F 13 02 FB | 	rdlong	arg01, local01
2952c     1C 1E 86 F1 | 	sub	local01, #28
29530     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
29534     FD FA E1 F8 | 	getbyte	result1, result1, #0
29538     FD 28 0A F2 | 	cmp	local06, result1 wz
2953c     28 00 90 AD |  if_e	jmp	#LR__4270
29540                 | LR__4267
29540     2C 1E 06 F1 | 	add	local01, #44
29544     FF FF FF FF 
29548     0F FF 6B FC | 	wrlong	##-1, local01
2954c     2C 1E 86 F1 | 	sub	local01, #44
29550                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29550                 | ' 					}
29550                 | ' 					break;
29550     14 00 90 FD | 	jmp	#LR__4270
29554                 | LR__4268
29554                 | LR__4269
29554     0F 13 02 F6 | 	mov	arg01, local01
29558     00 14 06 F6 | 	mov	arg02, #0
2955c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29560     FD 22 0A F6 | 	mov	local03, result1 wz
29564     44 FE 9F AD |  if_e	jmp	#LR__4260
29568                 | LR__4270
29568     00 22 0E F2 | 	cmp	local03, #0 wz
2956c     18 1E 06 51 |  if_ne	add	local01, #24
29570     0F 01 68 5C |  if_ne	wrlong	#0, local01
29574                 | ' 	return res;
29574     11 FB 01 F6 | 	mov	result1, local03
29578     A7 F0 03 F6 | 	mov	ptra, fp
2957c     B2 00 A0 FD | 	call	#popregs_
29580                 | _fatfs_cc_dir_read_ret
29580     2D 00 64 FD | 	ret
29584                 | 
29584                 | _fatfs_cc_dir_find
29584     0B 4A 05 F6 | 	mov	COUNT_, #11
29588     A8 00 A0 FD | 	call	#pushregs_
2958c     09 1F 02 F6 | 	mov	local01, arg01
29590     0F 21 02 FB | 	rdlong	local02, local01
29594     0F 13 02 F6 | 	mov	arg01, local01
29598     00 14 06 F6 | 	mov	arg02, #0
2959c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
295a0     00 FA 0D F2 | 	cmp	result1, #0 wz
295a4     18 02 90 5D |  if_ne	jmp	#LR__4292
295a8     FF 22 06 F6 | 	mov	local03, #255
295ac     FF 24 06 F6 | 	mov	local04, #255
295b0     2C 1E 06 F1 | 	add	local01, #44
295b4     FF FF FF FF 
295b8     0F FF 6B FC | 	wrlong	##-1, local01
295bc     2C 1E 86 F1 | 	sub	local01, #44
295c0                 | ' #line 2404 "ff.c"
295c0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
295c0                 | ' 
295c0                 | ' 	do {
295c0                 | LR__4280
295c0     18 1E 06 F1 | 	add	local01, #24
295c4     0F 15 02 FB | 	rdlong	arg02, local01
295c8     18 1E 86 F1 | 	sub	local01, #24
295cc     10 13 02 F6 | 	mov	arg01, local02
295d0     A8 EB BF FD | 	call	#_fatfs_cc_move_window
295d4     FD 26 0A F6 | 	mov	local05, result1 wz
295d8     E0 01 90 5D |  if_ne	jmp	#LR__4291
295dc     1C 1E 06 F1 | 	add	local01, #28
295e0     0F 17 02 FB | 	rdlong	arg03, local01
295e4     1C 1E 86 F1 | 	sub	local01, #28
295e8     0B 29 C2 FA | 	rdbyte	local06, arg03
295ec     14 17 02 F6 | 	mov	arg03, local06
295f0     07 16 4E F7 | 	zerox	arg03, #7 wz
295f4     04 26 06 A6 |  if_e	mov	local05, #4
295f8     C0 01 90 AD |  if_e	jmp	#LR__4291
295fc     1C 1E 06 F1 | 	add	local01, #28
29600     0F 2B 02 FB | 	rdlong	local07, local01
29604     15 17 02 F6 | 	mov	arg03, local07
29608     0B 16 06 F1 | 	add	arg03, #11
2960c     0B 2D C2 FA | 	rdbyte	local08, arg03
29610     3F 2C 06 F5 | 	and	local08, #63
29614     16 1E 86 F1 | 	sub	local01, #22
29618     0F 2D 42 FC | 	wrbyte	local08, local01
2961c     06 1E 86 F1 | 	sub	local01, #6
29620     14 17 E2 F8 | 	getbyte	arg03, local06, #0
29624     E5 16 0E F2 | 	cmp	arg03, #229 wz
29628     18 00 90 AD |  if_e	jmp	#LR__4281
2962c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
29630     08 16 CE F7 | 	test	arg03, #8 wz
29634     16 2B 02 56 |  if_ne	mov	local07, local08
29638     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
2963c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
29640     18 00 90 AD |  if_e	jmp	#LR__4282
29644                 | LR__4281
29644     FF 24 06 F6 | 	mov	local04, #255
29648     2C 1E 06 F1 | 	add	local01, #44
2964c     FF FF FF FF 
29650     0F FF 6B FC | 	wrlong	##-1, local01
29654     2C 1E 86 F1 | 	sub	local01, #44
29658     4C 01 90 FD | 	jmp	#LR__4290
2965c                 | LR__4282
2965c     16 2D E2 F8 | 	getbyte	local08, local08, #0
29660     0F 2C 0E F2 | 	cmp	local08, #15 wz
29664     C8 00 90 5D |  if_ne	jmp	#LR__4286
29668     2B 1E 06 F1 | 	add	local01, #43
2966c     0F 2D C2 FA | 	rdbyte	local08, local01
29670     2B 1E 86 F1 | 	sub	local01, #43
29674     40 2C CE F7 | 	test	local08, #64 wz
29678     2C 01 90 5D |  if_ne	jmp	#LR__4289
2967c     14 2F E2 F8 | 	getbyte	local09, local06, #0
29680     40 2E CE F7 | 	test	local09, #64 wz
29684     30 00 90 AD |  if_e	jmp	#LR__4283
29688     1C 1E 06 F1 | 	add	local01, #28
2968c     0F 2F 02 FB | 	rdlong	local09, local01
29690     0D 2E 06 F1 | 	add	local09, #13
29694     17 23 C2 FA | 	rdbyte	local03, local09
29698     14 29 E2 F8 | 	getbyte	local06, local06, #0
2969c     BF 28 06 F5 | 	and	local06, #191
296a0     14 25 02 F6 | 	mov	local04, local06
296a4     0C 1E 86 F1 | 	sub	local01, #12
296a8     0F 2F 02 FB | 	rdlong	local09, local01
296ac     1C 1E 06 F1 | 	add	local01, #28
296b0     0F 2F 62 FC | 	wrlong	local09, local01
296b4     2C 1E 86 F1 | 	sub	local01, #44
296b8                 | LR__4283
296b8     14 31 E2 F8 | 	getbyte	local10, local06, #0
296bc     12 2B E2 F8 | 	getbyte	local07, local04, #0
296c0     15 31 0A F2 | 	cmp	local10, local07 wz
296c4     5C 00 90 5D |  if_ne	jmp	#LR__4284
296c8     11 2D E2 F8 | 	getbyte	local08, local03, #0
296cc     1C 1E 06 F1 | 	add	local01, #28
296d0     0F 2B 02 FB | 	rdlong	local07, local01
296d4     1C 1E 86 F1 | 	sub	local01, #28
296d8     0D 2A 06 F1 | 	add	local07, #13
296dc     15 29 C2 FA | 	rdbyte	local06, local07
296e0     14 2B E2 F8 | 	getbyte	local07, local06, #0
296e4     15 2D 0A F2 | 	cmp	local08, local07 wz
296e8     38 00 90 5D |  if_ne	jmp	#LR__4284
296ec     0C 20 06 F1 | 	add	local02, #12
296f0     10 13 02 FB | 	rdlong	arg01, local02
296f4     0C 20 86 F1 | 	sub	local02, #12
296f8     1C 1E 06 F1 | 	add	local01, #28
296fc     0F 33 02 FB | 	rdlong	local11, local01
29700     1C 1E 86 F1 | 	sub	local01, #28
29704     19 15 02 F6 | 	mov	arg02, local11
29708     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2970c     00 FA 4D F2 | 	cmps	result1, #0 wz
29710     12 33 02 56 |  if_ne	mov	local11, local04
29714     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
29718     01 32 86 51 |  if_ne	sub	local11, #1
2971c     19 2F 02 56 |  if_ne	mov	local09, local11
29720     04 00 90 5D |  if_ne	jmp	#LR__4285
29724                 | LR__4284
29724     FF 2E 06 F6 | 	mov	local09, #255
29728                 | LR__4285
29728     17 25 02 F6 | 	mov	local04, local09
2972c     78 00 90 FD | 	jmp	#LR__4289
29730                 | LR__4286
29730     12 2F 02 F6 | 	mov	local09, local04
29734     07 2E 4E F7 | 	zerox	local09, #7 wz
29738     20 00 90 5D |  if_ne	jmp	#LR__4287
2973c     11 31 E2 F8 | 	getbyte	local10, local03, #0
29740     1C 1E 06 F1 | 	add	local01, #28
29744     0F 13 02 FB | 	rdlong	arg01, local01
29748     1C 1E 86 F1 | 	sub	local01, #28
2974c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29750     FD FA E1 F8 | 	getbyte	result1, result1, #0
29754     FD 30 0A F2 | 	cmp	local10, result1 wz
29758     60 00 90 AD |  if_e	jmp	#LR__4291
2975c                 | LR__4287
2975c     2B 1E 06 F1 | 	add	local01, #43
29760     0F 2F C2 FA | 	rdbyte	local09, local01
29764     2B 1E 86 F1 | 	sub	local01, #43
29768     01 2E CE F7 | 	test	local09, #1 wz
2976c     24 00 90 5D |  if_ne	jmp	#LR__4288
29770     1C 1E 06 F1 | 	add	local01, #28
29774     0F 13 02 FB | 	rdlong	arg01, local01
29778     04 1E 06 F1 | 	add	local01, #4
2977c     0F 15 02 F6 | 	mov	arg02, local01
29780     20 1E 86 F1 | 	sub	local01, #32
29784     0B 16 06 F6 | 	mov	arg03, #11
29788     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2978c     00 FA 0D F2 | 	cmp	result1, #0 wz
29790     28 00 90 AD |  if_e	jmp	#LR__4291
29794                 | LR__4288
29794     FF 24 06 F6 | 	mov	local04, #255
29798     2C 1E 06 F1 | 	add	local01, #44
2979c     FF FF FF FF 
297a0     0F FF 6B FC | 	wrlong	##-1, local01
297a4     2C 1E 86 F1 | 	sub	local01, #44
297a8                 | LR__4289
297a8                 | LR__4290
297a8     0F 13 02 F6 | 	mov	arg01, local01
297ac     00 14 06 F6 | 	mov	arg02, #0
297b0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
297b4     FD 26 0A F6 | 	mov	local05, result1 wz
297b8     04 FE 9F AD |  if_e	jmp	#LR__4280
297bc                 | LR__4291
297bc                 | ' 
297bc                 | ' 	return res;
297bc     13 FB 01 F6 | 	mov	result1, local05
297c0                 | LR__4292
297c0     A7 F0 03 F6 | 	mov	ptra, fp
297c4     B2 00 A0 FD | 	call	#popregs_
297c8                 | _fatfs_cc_dir_find_ret
297c8     2D 00 64 FD | 	ret
297cc                 | 
297cc                 | _fatfs_cc_dir_register
297cc     0A 4A 05 F6 | 	mov	COUNT_, #10
297d0     A8 00 A0 FD | 	call	#pushregs_
297d4     2C F0 07 F1 | 	add	ptra, #44
297d8     04 4E 05 F1 | 	add	fp, #4
297dc     A7 12 62 FC | 	wrlong	arg01, fp
297e0     09 1F 02 FB | 	rdlong	local01, arg01
297e4     08 4E 05 F1 | 	add	fp, #8
297e8     A7 1E 62 FC | 	wrlong	local01, fp
297ec     08 4E 85 F1 | 	sub	fp, #8
297f0     A7 20 02 FB | 	rdlong	local02, fp
297f4     04 4E 85 F1 | 	sub	fp, #4
297f8     2B 20 06 F1 | 	add	local02, #43
297fc     10 21 C2 FA | 	rdbyte	local02, local02
29800     A0 20 CE F7 | 	test	local02, #160 wz
29804     06 FA 05 56 |  if_ne	mov	result1, #6
29808     F8 03 90 5D |  if_ne	jmp	#LR__4315
2980c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2980c     14 4E 05 F1 | 	add	fp, #20
29810     A7 00 68 FC | 	wrlong	#0, fp
29814     14 4E 85 F1 | 	sub	fp, #20
29818     97 28 48 FB | 	callpa	#(@LR__4301-@LR__4300)>>2,fcache_load_ptr_
2981c                 | LR__4300
2981c     0C 4E 05 F1 | 	add	fp, #12
29820     A7 20 02 FB | 	rdlong	local02, fp
29824     0C 20 06 F1 | 	add	local02, #12
29828     10 23 02 FB | 	rdlong	local03, local02
2982c     08 4E 05 F1 | 	add	fp, #8
29830     A7 24 02 FB | 	rdlong	local04, fp
29834     14 4E 85 F1 | 	sub	fp, #20
29838     01 24 66 F0 | 	shl	local04, #1
2983c     11 25 02 F1 | 	add	local04, local03
29840     12 21 EA FA | 	rdword	local02, local04 wz
29844     24 00 90 AD |  if_e	jmp	#LR__4302
29848     14 4E 05 F1 | 	add	fp, #20
2984c     A7 26 02 FB | 	rdlong	local05, fp
29850     13 29 02 F6 | 	mov	local06, local05
29854     13 2B 02 F6 | 	mov	local07, local05
29858     15 2D 02 F6 | 	mov	local08, local07
2985c     01 2C 06 F1 | 	add	local08, #1
29860     A7 2C 62 FC | 	wrlong	local08, fp
29864     14 4E 85 F1 | 	sub	fp, #20
29868     B0 FF 9F FD | 	jmp	#LR__4300
2986c                 | LR__4301
2986c                 | LR__4302
2986c     1C 4E 05 F1 | 	add	fp, #28
29870     A7 12 02 F6 | 	mov	arg01, fp
29874     18 4E 85 F1 | 	sub	fp, #24
29878     A7 14 02 FB | 	rdlong	arg02, fp
2987c     04 4E 85 F1 | 	sub	fp, #4
29880     20 14 06 F1 | 	add	arg02, #32
29884     0C 16 06 F6 | 	mov	arg03, #12
29888     E0 6E BF FD | 	call	#__system____builtin_memmove
2988c     27 4E 05 F1 | 	add	fp, #39
29890     A7 2E C2 FA | 	rdbyte	local09, fp
29894     27 4E 85 F1 | 	sub	fp, #39
29898     01 2E CE F7 | 	test	local09, #1 wz
2989c     F4 00 90 AD |  if_e	jmp	#LR__4305
298a0     04 4E 05 F1 | 	add	fp, #4
298a4     A7 30 02 FB | 	rdlong	local10, fp
298a8     2B 30 06 F1 | 	add	local10, #43
298ac     18 81 48 FC | 	wrbyte	#64, local10
298b0                 | ' 		dp->fn[ 11 ] =  0x40 ;
298b0                 | ' 		for (n = 1; n < 100; n++) {
298b0     0C 4E 05 F1 | 	add	fp, #12
298b4     A7 02 68 FC | 	wrlong	#1, fp
298b8     10 4E 85 F1 | 	sub	fp, #16
298bc                 | LR__4303
298bc     10 4E 05 F1 | 	add	fp, #16
298c0     A7 20 02 FB | 	rdlong	local02, fp
298c4     10 4E 85 F1 | 	sub	fp, #16
298c8     64 20 16 F2 | 	cmp	local02, #100 wc
298cc     70 00 90 3D |  if_ae	jmp	#LR__4304
298d0     04 4E 05 F1 | 	add	fp, #4
298d4     A7 12 02 FB | 	rdlong	arg01, fp
298d8     20 12 06 F1 | 	add	arg01, #32
298dc     18 4E 05 F1 | 	add	fp, #24
298e0     A7 14 02 F6 | 	mov	arg02, fp
298e4     10 4E 85 F1 | 	sub	fp, #16
298e8     A7 30 02 FB | 	rdlong	local10, fp
298ec     0C 30 06 F1 | 	add	local10, #12
298f0     18 17 02 FB | 	rdlong	arg03, local10
298f4     04 4E 05 F1 | 	add	fp, #4
298f8     A7 18 02 FB | 	rdlong	arg04, fp
298fc     10 4E 85 F1 | 	sub	fp, #16
29900     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
29904     04 4E 05 F1 | 	add	fp, #4
29908     A7 12 02 FB | 	rdlong	arg01, fp
2990c     04 4E 85 F1 | 	sub	fp, #4
29910     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29914     08 4E 05 F1 | 	add	fp, #8
29918     A7 FA 61 FC | 	wrlong	result1, fp
2991c     00 FA 4D F2 | 	cmps	result1, #0 wz
29920     08 4E 85 F1 | 	sub	fp, #8
29924     18 00 90 5D |  if_ne	jmp	#LR__4304
29928     10 4E 05 F1 | 	add	fp, #16
2992c     A7 30 02 FB | 	rdlong	local10, fp
29930     01 30 06 F1 | 	add	local10, #1
29934     A7 30 62 FC | 	wrlong	local10, fp
29938     10 4E 85 F1 | 	sub	fp, #16
2993c     7C FF 9F FD | 	jmp	#LR__4303
29940                 | LR__4304
29940     10 4E 05 F1 | 	add	fp, #16
29944     A7 30 02 FB | 	rdlong	local10, fp
29948     10 4E 85 F1 | 	sub	fp, #16
2994c     64 30 0E F2 | 	cmp	local10, #100 wz
29950     07 FA 05 A6 |  if_e	mov	result1, #7
29954     AC 02 90 AD |  if_e	jmp	#LR__4315
29958     08 4E 05 F1 | 	add	fp, #8
2995c     A7 30 02 FB | 	rdlong	local10, fp
29960     08 4E 85 F1 | 	sub	fp, #8
29964     04 30 0E F2 | 	cmp	local10, #4 wz
29968     08 4E 05 51 |  if_ne	add	fp, #8
2996c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29970     08 4E 85 51 |  if_ne	sub	fp, #8
29974     8C 02 90 5D |  if_ne	jmp	#LR__4315
29978     04 4E 05 F1 | 	add	fp, #4
2997c     A7 30 02 FB | 	rdlong	local10, fp
29980     23 4E 05 F1 | 	add	fp, #35
29984     A7 1E C2 FA | 	rdbyte	local01, fp
29988     27 4E 85 F1 | 	sub	fp, #39
2998c     2B 30 06 F1 | 	add	local10, #43
29990     18 1F 42 FC | 	wrbyte	local01, local10
29994                 | LR__4305
29994     27 4E 05 F1 | 	add	fp, #39
29998     A7 20 C2 FA | 	rdbyte	local02, fp
2999c     27 4E 85 F1 | 	sub	fp, #39
299a0     02 20 CE F7 | 	test	local02, #2 wz
299a4     20 00 90 AD |  if_e	jmp	#LR__4306
299a8     14 4E 05 F1 | 	add	fp, #20
299ac     A7 30 02 FB | 	rdlong	local10, fp
299b0     0C 30 06 F1 | 	add	local10, #12
299b4     0D 30 16 FD | 	qdiv	local10, #13
299b8     14 4E 85 F1 | 	sub	fp, #20
299bc     18 30 62 FD | 	getqx	local10
299c0     01 30 06 F1 | 	add	local10, #1
299c4     04 00 90 FD | 	jmp	#LR__4307
299c8                 | LR__4306
299c8     01 30 06 F6 | 	mov	local10, #1
299cc                 | LR__4307
299cc     18 4E 05 F1 | 	add	fp, #24
299d0     A7 30 62 FC | 	wrlong	local10, fp
299d4     14 4E 85 F1 | 	sub	fp, #20
299d8     A7 12 02 FB | 	rdlong	arg01, fp
299dc     18 15 02 F6 | 	mov	arg02, local10
299e0     04 4E 85 F1 | 	sub	fp, #4
299e4     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
299e8     08 4E 05 F1 | 	add	fp, #8
299ec     A7 FA 61 FC | 	wrlong	result1, fp
299f0     08 4E 85 F1 | 	sub	fp, #8
299f4     00 FA 0D F2 | 	cmp	result1, #0 wz
299f8     38 01 90 5D |  if_ne	jmp	#LR__4312
299fc     18 4E 05 F1 | 	add	fp, #24
29a00     A7 30 02 FB | 	rdlong	local10, fp
29a04     01 30 8E F1 | 	sub	local10, #1 wz
29a08     A7 30 62 FC | 	wrlong	local10, fp
29a0c     18 4E 85 F1 | 	sub	fp, #24
29a10     20 01 90 AD |  if_e	jmp	#LR__4312
29a14     04 4E 05 F1 | 	add	fp, #4
29a18     A7 30 02 FB | 	rdlong	local10, fp
29a1c     18 13 02 F6 | 	mov	arg01, local10
29a20     14 4E 05 F1 | 	add	fp, #20
29a24     A7 18 02 FB | 	rdlong	arg04, fp
29a28     18 4E 85 F1 | 	sub	fp, #24
29a2c     05 18 66 F0 | 	shl	arg04, #5
29a30     10 30 06 F1 | 	add	local10, #16
29a34     18 15 02 FB | 	rdlong	arg02, local10
29a38     0C 15 82 F1 | 	sub	arg02, arg04
29a3c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29a40     08 4E 05 F1 | 	add	fp, #8
29a44     A7 FA 61 FC | 	wrlong	result1, fp
29a48     08 4E 85 F1 | 	sub	fp, #8
29a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
29a50     E0 00 90 5D |  if_ne	jmp	#LR__4311
29a54     04 4E 05 F1 | 	add	fp, #4
29a58     A7 12 02 FB | 	rdlong	arg01, fp
29a5c     04 4E 85 F1 | 	sub	fp, #4
29a60     20 12 06 F1 | 	add	arg01, #32
29a64     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29a68     FD 30 02 F6 | 	mov	local10, result1
29a6c     28 4E 05 F1 | 	add	fp, #40
29a70     A7 30 42 FC | 	wrbyte	local10, fp
29a74     28 4E 85 F1 | 	sub	fp, #40
29a78                 | ' 			sum = sum_sfn(dp->fn);
29a78                 | ' 			do {
29a78                 | LR__4308
29a78     0C 4E 05 F1 | 	add	fp, #12
29a7c     A7 12 02 FB | 	rdlong	arg01, fp
29a80     08 4E 85 F1 | 	sub	fp, #8
29a84     A7 1E 02 FB | 	rdlong	local01, fp
29a88     04 4E 85 F1 | 	sub	fp, #4
29a8c     18 1E 06 F1 | 	add	local01, #24
29a90     0F 15 02 FB | 	rdlong	arg02, local01
29a94     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29a98     08 4E 05 F1 | 	add	fp, #8
29a9c     A7 FA 61 FC | 	wrlong	result1, fp
29aa0     00 FA 4D F2 | 	cmps	result1, #0 wz
29aa4     08 4E 85 F1 | 	sub	fp, #8
29aa8     88 00 90 5D |  if_ne	jmp	#LR__4310
29aac     0C 4E 05 F1 | 	add	fp, #12
29ab0     A7 20 02 FB | 	rdlong	local02, fp
29ab4     0C 20 06 F1 | 	add	local02, #12
29ab8     10 13 02 FB | 	rdlong	arg01, local02
29abc     08 4E 85 F1 | 	sub	fp, #8
29ac0     A7 1E 02 FB | 	rdlong	local01, fp
29ac4     1C 1E 06 F1 | 	add	local01, #28
29ac8     0F 15 02 FB | 	rdlong	arg02, local01
29acc     14 4E 05 F1 | 	add	fp, #20
29ad0     A7 16 02 FB | 	rdlong	arg03, fp
29ad4     10 4E 05 F1 | 	add	fp, #16
29ad8     A7 18 C2 FA | 	rdbyte	arg04, fp
29adc     28 4E 85 F1 | 	sub	fp, #40
29ae0     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29ae4     0C 4E 05 F1 | 	add	fp, #12
29ae8     A7 30 02 FB | 	rdlong	local10, fp
29aec     03 30 06 F1 | 	add	local10, #3
29af0     18 03 48 FC | 	wrbyte	#1, local10
29af4     08 4E 85 F1 | 	sub	fp, #8
29af8     A7 12 02 FB | 	rdlong	arg01, fp
29afc     04 4E 85 F1 | 	sub	fp, #4
29b00     00 14 06 F6 | 	mov	arg02, #0
29b04     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29b08     08 4E 05 F1 | 	add	fp, #8
29b0c     A7 FA 61 FC | 	wrlong	result1, fp
29b10     00 FA 4D F2 | 	cmps	result1, #0 wz
29b14     08 4E 85 F1 | 	sub	fp, #8
29b18     18 00 90 5D |  if_ne	jmp	#LR__4309
29b1c     18 4E 05 F1 | 	add	fp, #24
29b20     A7 30 02 FB | 	rdlong	local10, fp
29b24     01 30 8E F1 | 	sub	local10, #1 wz
29b28     A7 30 62 FC | 	wrlong	local10, fp
29b2c     18 4E 85 F1 | 	sub	fp, #24
29b30     44 FF 9F 5D |  if_ne	jmp	#LR__4308
29b34                 | LR__4309
29b34                 | LR__4310
29b34                 | LR__4311
29b34                 | LR__4312
29b34     08 4E 05 F1 | 	add	fp, #8
29b38     A7 30 0A FB | 	rdlong	local10, fp wz
29b3c     08 4E 85 F1 | 	sub	fp, #8
29b40     B4 00 90 5D |  if_ne	jmp	#LR__4314
29b44     0C 4E 05 F1 | 	add	fp, #12
29b48     A7 12 02 FB | 	rdlong	arg01, fp
29b4c     08 4E 85 F1 | 	sub	fp, #8
29b50     A7 1E 02 FB | 	rdlong	local01, fp
29b54     04 4E 85 F1 | 	sub	fp, #4
29b58     18 1E 06 F1 | 	add	local01, #24
29b5c     0F 15 02 FB | 	rdlong	arg02, local01
29b60     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29b64     08 4E 05 F1 | 	add	fp, #8
29b68     A7 FA 61 FC | 	wrlong	result1, fp
29b6c     08 4E 85 F1 | 	sub	fp, #8
29b70     00 FA 0D F2 | 	cmp	result1, #0 wz
29b74     80 00 90 5D |  if_ne	jmp	#LR__4313
29b78     04 4E 05 F1 | 	add	fp, #4
29b7c     A7 20 02 FB | 	rdlong	local02, fp
29b80     04 4E 85 F1 | 	sub	fp, #4
29b84     1C 20 06 F1 | 	add	local02, #28
29b88     10 13 02 FB | 	rdlong	arg01, local02
29b8c     00 14 06 F6 | 	mov	arg02, #0
29b90     20 16 06 F6 | 	mov	arg03, #32
29b94     98 00 A0 FD | 	call	#\builtin_bytefill_
29b98     04 4E 05 F1 | 	add	fp, #4
29b9c     A7 14 02 FB | 	rdlong	arg02, fp
29ba0     0A 1F 02 F6 | 	mov	local01, arg02
29ba4     1C 1E 06 F1 | 	add	local01, #28
29ba8     0F 13 02 FB | 	rdlong	arg01, local01
29bac     04 4E 85 F1 | 	sub	fp, #4
29bb0     20 14 06 F1 | 	add	arg02, #32
29bb4     0B 16 06 F6 | 	mov	arg03, #11
29bb8     B0 6B BF FD | 	call	#__system____builtin_memmove
29bbc     04 4E 05 F1 | 	add	fp, #4
29bc0     A7 2E 02 FB | 	rdlong	local09, fp
29bc4     17 31 02 F6 | 	mov	local10, local09
29bc8     1C 30 06 F1 | 	add	local10, #28
29bcc     18 1F 02 FB | 	rdlong	local01, local10
29bd0     2B 2E 06 F1 | 	add	local09, #43
29bd4     17 31 C2 FA | 	rdbyte	local10, local09
29bd8     18 30 06 F5 | 	and	local10, #24
29bdc     0C 1E 06 F1 | 	add	local01, #12
29be0     0F 31 42 FC | 	wrbyte	local10, local01
29be4     08 4E 05 F1 | 	add	fp, #8
29be8     A7 30 02 FB | 	rdlong	local10, fp
29bec     0C 4E 85 F1 | 	sub	fp, #12
29bf0     03 30 06 F1 | 	add	local10, #3
29bf4     18 03 48 FC | 	wrbyte	#1, local10
29bf8                 | LR__4313
29bf8                 | LR__4314
29bf8                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29bf8                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29bf8                 | ' 
29bf8                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29bf8                 | ' 
29bf8                 | ' 			fs->wflag = 1;
29bf8                 | ' 		}
29bf8                 | ' 	}
29bf8                 | ' 
29bf8                 | ' 	return res;
29bf8     08 4E 05 F1 | 	add	fp, #8
29bfc     A7 FA 01 FB | 	rdlong	result1, fp
29c00     08 4E 85 F1 | 	sub	fp, #8
29c04                 | LR__4315
29c04     A7 F0 03 F6 | 	mov	ptra, fp
29c08     B2 00 A0 FD | 	call	#popregs_
29c0c                 | _fatfs_cc_dir_register_ret
29c0c     2D 00 64 FD | 	ret
29c10                 | 
29c10                 | _fatfs_cc_dir_remove
29c10     05 4A 05 F6 | 	mov	COUNT_, #5
29c14     A8 00 A0 FD | 	call	#pushregs_
29c18     09 1F 02 F6 | 	mov	local01, arg01
29c1c     0F 21 02 FB | 	rdlong	local02, local01
29c20     10 1E 06 F1 | 	add	local01, #16
29c24     0F 23 02 FB | 	rdlong	local03, local01
29c28     1C 1E 06 F1 | 	add	local01, #28
29c2c     0F 15 02 FB | 	rdlong	arg02, local01
29c30     2C 1E 86 F1 | 	sub	local01, #44
29c34     FF FF 7F FF 
29c38     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29c3c     00 24 06 A6 |  if_e	mov	local04, #0
29c40     18 00 90 AD |  if_e	jmp	#LR__4320
29c44     0F 13 02 F6 | 	mov	arg01, local01
29c48     2C 1E 06 F1 | 	add	local01, #44
29c4c     0F 15 02 FB | 	rdlong	arg02, local01
29c50     2C 1E 86 F1 | 	sub	local01, #44
29c54     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29c58     FD 24 02 F6 | 	mov	local04, result1
29c5c                 | LR__4320
29c5c     12 27 0A F6 | 	mov	local05, local04 wz
29c60     64 00 90 5D |  if_ne	jmp	#LR__4323
29c64                 | ' 		do {
29c64                 | LR__4321
29c64     18 1E 06 F1 | 	add	local01, #24
29c68     0F 15 02 FB | 	rdlong	arg02, local01
29c6c     18 1E 86 F1 | 	sub	local01, #24
29c70     10 13 02 F6 | 	mov	arg01, local02
29c74     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29c78     FD 26 0A F6 | 	mov	local05, result1 wz
29c7c     40 00 90 5D |  if_ne	jmp	#LR__4322
29c80     1C 1E 06 F1 | 	add	local01, #28
29c84     0F 25 02 FB | 	rdlong	local04, local01
29c88     12 CB 49 FC | 	wrbyte	#229, local04
29c8c     03 20 06 F1 | 	add	local02, #3
29c90     10 03 48 FC | 	wrbyte	#1, local02
29c94     03 20 86 F1 | 	sub	local02, #3
29c98     0C 1E 86 F1 | 	sub	local01, #12
29c9c     0F 25 02 FB | 	rdlong	local04, local01
29ca0     10 1E 86 F1 | 	sub	local01, #16
29ca4     11 25 12 F2 | 	cmp	local04, local03 wc
29ca8     14 00 90 3D |  if_ae	jmp	#LR__4322
29cac     0F 13 02 F6 | 	mov	arg01, local01
29cb0     00 14 06 F6 | 	mov	arg02, #0
29cb4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29cb8     FD 26 0A F6 | 	mov	local05, result1 wz
29cbc     A4 FF 9F AD |  if_e	jmp	#LR__4321
29cc0                 | LR__4322
29cc0     04 26 0E F2 | 	cmp	local05, #4 wz
29cc4     02 26 06 A6 |  if_e	mov	local05, #2
29cc8                 | LR__4323
29cc8                 | ' 	}
29cc8                 | ' #line 2590 "ff.c"
29cc8                 | ' 	return res;
29cc8     13 FB 01 F6 | 	mov	result1, local05
29ccc     A7 F0 03 F6 | 	mov	ptra, fp
29cd0     B2 00 A0 FD | 	call	#popregs_
29cd4                 | _fatfs_cc_dir_remove_ret
29cd4     2D 00 64 FD | 	ret
29cd8                 | 
29cd8                 | _fatfs_cc_get_fileinfo
29cd8     0F 4A 05 F6 | 	mov	COUNT_, #15
29cdc     A8 00 A0 FD | 	call	#pushregs_
29ce0     09 1F 02 F6 | 	mov	local01, arg01
29ce4     0A 21 02 F6 | 	mov	local02, arg02
29ce8     0F 23 02 FB | 	rdlong	local03, local01
29cec     1C 20 06 F1 | 	add	local02, #28
29cf0     10 01 48 FC | 	wrbyte	#0, local02
29cf4     1C 20 86 F1 | 	sub	local02, #28
29cf8     18 1E 06 F1 | 	add	local01, #24
29cfc     0F 25 0A FB | 	rdlong	local04, local01 wz
29d00     18 1E 86 F1 | 	sub	local01, #24
29d04     90 03 90 AD |  if_e	jmp	#LR__4344
29d08     2C 1E 06 F1 | 	add	local01, #44
29d0c     0F 25 02 FB | 	rdlong	local04, local01
29d10     2C 1E 86 F1 | 	sub	local01, #44
29d14     FF FF 7F FF 
29d18     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29d1c     D8 00 90 AD |  if_e	jmp	#LR__4333
29d20     00 26 06 F6 | 	mov	local05, #0
29d24     00 28 06 F6 | 	mov	local06, #0
29d28     00 2A 06 F6 | 	mov	local07, #0
29d2c                 | ' 			si = di = 0;
29d2c                 | ' 			hs = 0;
29d2c                 | ' 			while (fs->lfnbuf[si] != 0) {
29d2c                 | LR__4330
29d2c     0C 22 06 F1 | 	add	local03, #12
29d30     11 25 02 FB | 	rdlong	local04, local03
29d34     0C 22 86 F1 | 	sub	local03, #12
29d38     14 2D 02 F6 | 	mov	local08, local06
29d3c     01 2C 66 F0 | 	shl	local08, #1
29d40     12 2D 02 F1 | 	add	local08, local04
29d44     16 25 EA FA | 	rdword	local04, local08 wz
29d48     90 00 90 AD |  if_e	jmp	#LR__4332
29d4c     0C 22 06 F1 | 	add	local03, #12
29d50     11 2F 02 FB | 	rdlong	local09, local03
29d54     0C 22 86 F1 | 	sub	local03, #12
29d58     14 31 02 F6 | 	mov	local10, local06
29d5c     01 30 66 F0 | 	shl	local10, #1
29d60     17 31 02 F1 | 	add	local10, local09
29d64     18 33 E2 FA | 	rdword	local11, local10
29d68     15 25 02 F6 | 	mov	local04, local07
29d6c     0F 24 4E F7 | 	zerox	local04, #15 wz
29d70     01 28 06 F1 | 	add	local06, #1
29d74     24 00 90 5D |  if_ne	jmp	#LR__4331
29d78     19 35 32 F9 | 	getword	local12, local11, #0
29d7c     6C 00 00 FF 
29d80     00 34 16 F2 | 	cmp	local12, ##55296 wc
29d84     14 00 90 CD |  if_b	jmp	#LR__4331
29d88     19 37 32 F9 | 	getword	local13, local11, #0
29d8c     70 00 00 FF 
29d90     00 36 16 F2 | 	cmp	local13, ##57344 wc
29d94     19 2B 02 C6 |  if_b	mov	local07, local11
29d98                 | ' 					hs = wc; continue;
29d98     90 FF 9F CD |  if_b	jmp	#LR__4330
29d9c                 | LR__4331
29d9c     15 13 32 F9 | 	getword	arg01, local07, #0
29da0     10 12 66 F0 | 	shl	arg01, #16
29da4     19 33 32 F9 | 	getword	local11, local11, #0
29da8     19 13 42 F5 | 	or	arg01, local11
29dac     13 15 02 F6 | 	mov	arg02, local05
29db0     1C 20 06 F1 | 	add	local02, #28
29db4     10 15 02 F1 | 	add	arg02, local02
29db8     FF 16 06 F6 | 	mov	arg03, #255
29dbc     13 17 82 F1 | 	sub	arg03, local05
29dc0     1C 20 86 F1 | 	sub	local02, #28
29dc4     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29dc8     FD 38 0A F6 | 	mov	local14, result1 wz
29dcc     00 26 06 A6 |  if_e	mov	local05, #0
29dd0     1C 27 02 51 |  if_ne	add	local05, local14
29dd4     00 2A 06 56 |  if_ne	mov	local07, #0
29dd8     50 FF 9F 5D |  if_ne	jmp	#LR__4330
29ddc                 | LR__4332
29ddc     15 25 02 F6 | 	mov	local04, local07
29de0     0F 24 4E F7 | 	zerox	local04, #15 wz
29de4     00 26 06 56 |  if_ne	mov	local05, #0
29de8     1C 20 06 F1 | 	add	local02, #28
29dec     10 27 02 F1 | 	add	local05, local02
29df0     13 01 48 FC | 	wrbyte	#0, local05
29df4     1C 20 86 F1 | 	sub	local02, #28
29df8                 | LR__4333
29df8     00 26 06 F6 | 	mov	local05, #0
29dfc     00 28 06 F6 | 	mov	local06, #0
29e00                 | ' 			fno->fname[di] = 0;
29e00                 | ' 		}
29e00                 | ' 	}
29e00                 | ' 
29e00                 | ' 	si = di = 0;
29e00                 | ' 	while (si < 11) {
29e00                 | LR__4334
29e00     0B 28 16 F2 | 	cmp	local06, #11 wc
29e04     20 01 90 3D |  if_ae	jmp	#LR__4337
29e08     1C 1E 06 F1 | 	add	local01, #28
29e0c     0F 2F 02 FB | 	rdlong	local09, local01
29e10     1C 1E 86 F1 | 	sub	local01, #28
29e14     14 31 02 F6 | 	mov	local10, local06
29e18     17 31 02 F1 | 	add	local10, local09
29e1c     18 33 C2 FA | 	rdbyte	local11, local10
29e20     19 25 32 F9 | 	getword	local04, local11, #0
29e24     20 24 0E F2 | 	cmp	local04, #32 wz
29e28     01 28 06 F1 | 	add	local06, #1
29e2c     D0 FF 9F AD |  if_e	jmp	#LR__4334
29e30     19 25 32 F9 | 	getword	local04, local11, #0
29e34     05 24 0E F2 | 	cmp	local04, #5 wz
29e38     E5 32 06 A6 |  if_e	mov	local11, #229
29e3c     09 28 0E F2 | 	cmp	local06, #9 wz
29e40     20 00 90 5D |  if_ne	jmp	#LR__4335
29e44     0C 26 16 F2 | 	cmp	local05, #12 wc
29e48     18 00 90 3D |  if_ae	jmp	#LR__4335
29e4c     13 37 02 F6 | 	mov	local13, local05
29e50     0C 20 06 F1 | 	add	local02, #12
29e54     10 37 02 F1 | 	add	local13, local02
29e58     1B 5D 48 FC | 	wrbyte	#46, local13
29e5c     01 26 06 F1 | 	add	local05, #1
29e60     0C 20 86 F1 | 	sub	local02, #12
29e64                 | LR__4335
29e64     19 13 32 F9 | 	getword	arg01, local11, #0
29e68     07 12 4E F7 | 	zerox	arg01, #7 wz
29e6c     00 FA 05 56 |  if_ne	mov	result1, #0
29e70                 | ' 
29e70                 | ' 	return 0;
29e70     00 FA 05 A6 |  if_e	mov	result1, #0
29e74     00 FA 0D F2 | 	cmp	result1, #0 wz
29e78     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
29e7c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
29e80     50 00 90 AD |  if_e	jmp	#LR__4336
29e84     1C 1E 06 F1 | 	add	local01, #28
29e88     0F 31 02 FB | 	rdlong	local10, local01
29e8c     1C 1E 86 F1 | 	sub	local01, #28
29e90     14 2D 02 F6 | 	mov	local08, local06
29e94     18 2D 02 F1 | 	add	local08, local10
29e98     16 13 CA FA | 	rdbyte	arg01, local08 wz
29e9c     00 FA 05 56 |  if_ne	mov	result1, #0
29ea0                 | ' 
29ea0                 | ' 	return 0;
29ea0     00 FA 05 A6 |  if_e	mov	result1, #0
29ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
29ea8     28 00 90 AD |  if_e	jmp	#LR__4336
29eac     19 33 32 F9 | 	getword	local11, local11, #0
29eb0     08 32 66 F0 | 	shl	local11, #8
29eb4     1C 1E 06 F1 | 	add	local01, #28
29eb8     0F 39 02 FB | 	rdlong	local14, local01
29ebc     1C 1E 86 F1 | 	sub	local01, #28
29ec0     14 2F 02 F6 | 	mov	local09, local06
29ec4     1C 2F 02 F1 | 	add	local09, local14
29ec8     17 35 C2 FA | 	rdbyte	local12, local09
29ecc     1A 33 42 F5 | 	or	local11, local12
29ed0     01 28 06 F1 | 	add	local06, #1
29ed4                 | LR__4336
29ed4     19 13 02 F6 | 	mov	arg01, local11
29ed8     01 00 00 FF 
29edc     52 15 06 F6 | 	mov	arg02, ##850
29ee0     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
29ee4     FD 32 02 F6 | 	mov	local11, result1
29ee8     19 25 02 F6 | 	mov	local04, local11
29eec     0F 24 4E F7 | 	zerox	local04, #15 wz
29ef0     00 26 06 A6 |  if_e	mov	local05, #0
29ef4     30 00 90 AD |  if_e	jmp	#LR__4337
29ef8     19 13 32 F9 | 	getword	arg01, local11, #0
29efc     13 15 02 F6 | 	mov	arg02, local05
29f00     0C 20 06 F1 | 	add	local02, #12
29f04     10 15 02 F1 | 	add	arg02, local02
29f08     0C 16 06 F6 | 	mov	arg03, #12
29f0c     13 17 82 F1 | 	sub	arg03, local05
29f10     0C 20 86 F1 | 	sub	local02, #12
29f14     EC DF BF FD | 	call	#_fatfs_cc_put_utf
29f18     FD 38 0A F6 | 	mov	local14, result1 wz
29f1c     00 26 06 A6 |  if_e	mov	local05, #0
29f20     1C 27 02 51 |  if_ne	add	local05, local14
29f24     D8 FE 9F 5D |  if_ne	jmp	#LR__4334
29f28                 | LR__4337
29f28     13 25 02 F6 | 	mov	local04, local05
29f2c     0C 20 06 F1 | 	add	local02, #12
29f30     10 25 02 F1 | 	add	local04, local02
29f34     12 01 48 FC | 	wrbyte	#0, local04
29f38     10 20 06 F1 | 	add	local02, #16
29f3c     10 25 CA FA | 	rdbyte	local04, local02 wz
29f40     1C 20 86 F1 | 	sub	local02, #28
29f44     F8 00 90 5D |  if_ne	jmp	#LR__4343
29f48     00 26 0E F2 | 	cmp	local05, #0 wz
29f4c     1C 00 90 5D |  if_ne	jmp	#LR__4338
29f50     13 37 02 F6 | 	mov	local13, local05
29f54     1C 20 06 F1 | 	add	local02, #28
29f58     10 37 02 F1 | 	add	local13, local02
29f5c     1B 7F 48 FC | 	wrbyte	#63, local13
29f60     01 26 06 F1 | 	add	local05, #1
29f64     1C 20 86 F1 | 	sub	local02, #28
29f68     A4 00 90 FD | 	jmp	#LR__4342
29f6c                 | LR__4338
29f6c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
29f6c     00 26 06 F6 | 	mov	local05, #0
29f70     00 28 06 F6 | 	mov	local06, #0
29f74     08 3A 06 F6 | 	mov	local15, #8
29f78                 | LR__4339
29f78     14 25 02 F6 | 	mov	local04, local06
29f7c     0C 20 06 F1 | 	add	local02, #12
29f80     10 25 02 F1 | 	add	local04, local02
29f84     12 37 CA FA | 	rdbyte	local13, local04 wz
29f88     0C 20 86 F1 | 	sub	local02, #12
29f8c     80 00 90 AD |  if_e	jmp	#LR__4341
29f90     14 2D 02 F6 | 	mov	local08, local06
29f94     0C 20 06 F1 | 	add	local02, #12
29f98     10 2D 02 F1 | 	add	local08, local02
29f9c     16 33 C2 FA | 	rdbyte	local11, local08
29fa0     19 39 32 F9 | 	getword	local14, local11, #0
29fa4     2E 38 0E F2 | 	cmp	local14, #46 wz
29fa8     0C 20 86 F1 | 	sub	local02, #12
29fac     10 3A 06 A6 |  if_e	mov	local15, #16
29fb0     19 39 32 F9 | 	getword	local14, local11, #0
29fb4     41 38 16 F2 | 	cmp	local14, #65 wc
29fb8     30 00 90 CD |  if_b	jmp	#LR__4340
29fbc     19 2D 32 F9 | 	getword	local08, local11, #0
29fc0     5B 2C 16 F2 | 	cmp	local08, #91 wc
29fc4     24 00 90 3D |  if_ae	jmp	#LR__4340
29fc8     1C 1E 06 F1 | 	add	local01, #28
29fcc     0F 2F 02 FB | 	rdlong	local09, local01
29fd0     1C 1E 86 F1 | 	sub	local01, #28
29fd4     0C 2E 06 F1 | 	add	local09, #12
29fd8     17 31 C2 FA | 	rdbyte	local10, local09
29fdc     1D 39 E2 F8 | 	getbyte	local14, local15, #0
29fe0     1C 31 CA F7 | 	test	local10, local14 wz
29fe4     19 33 32 59 |  if_ne	getword	local11, local11, #0
29fe8     20 32 06 51 |  if_ne	add	local11, #32
29fec                 | LR__4340
29fec     13 39 02 F6 | 	mov	local14, local05
29ff0     1C 20 06 F1 | 	add	local02, #28
29ff4     10 39 02 F1 | 	add	local14, local02
29ff8     19 33 32 F9 | 	getword	local11, local11, #0
29ffc     1C 33 42 FC | 	wrbyte	local11, local14
2a000     01 28 06 F1 | 	add	local06, #1
2a004     01 26 06 F1 | 	add	local05, #1
2a008     1C 20 86 F1 | 	sub	local02, #28
2a00c     68 FF 9F FD | 	jmp	#LR__4339
2a010                 | LR__4341
2a010                 | LR__4342
2a010     1C 20 06 F1 | 	add	local02, #28
2a014     10 27 02 F1 | 	add	local05, local02
2a018     13 01 48 FC | 	wrbyte	#0, local05
2a01c     1C 1E 06 F1 | 	add	local01, #28
2a020     0F 25 02 FB | 	rdlong	local04, local01
2a024     1C 1E 86 F1 | 	sub	local01, #28
2a028     0C 24 06 F1 | 	add	local04, #12
2a02c     12 37 CA FA | 	rdbyte	local13, local04 wz
2a030     1C 20 86 F1 | 	sub	local02, #28
2a034     0C 20 06 A1 |  if_e	add	local02, #12
2a038     10 01 48 AC |  if_e	wrbyte	#0, local02
2a03c     0C 20 86 A1 |  if_e	sub	local02, #12
2a040                 | LR__4343
2a040     1C 1E 06 F1 | 	add	local01, #28
2a044     0F 35 02 FB | 	rdlong	local12, local01
2a048     0B 34 06 F1 | 	add	local12, #11
2a04c     1A 25 C2 FA | 	rdbyte	local04, local12
2a050     3F 24 06 F5 | 	and	local04, #63
2a054     08 20 06 F1 | 	add	local02, #8
2a058     10 25 42 FC | 	wrbyte	local04, local02
2a05c     08 20 86 F1 | 	sub	local02, #8
2a060     0F 13 02 FB | 	rdlong	arg01, local01
2a064     1C 12 06 F1 | 	add	arg01, #28
2a068                 | ' {
2a068                 | ' 
2a068                 | ' 	return *((DWORD*)ptr);
2a068     09 FB 01 FB | 	rdlong	result1, arg01
2a06c     10 FB 61 FC | 	wrlong	result1, local02
2a070     0F 13 02 FB | 	rdlong	arg01, local01
2a074     16 12 06 F1 | 	add	arg01, #22
2a078                 | ' {
2a078                 | ' 
2a078                 | ' 	return *((WORD*)ptr);
2a078     09 FB E1 FA | 	rdword	result1, arg01
2a07c     06 20 06 F1 | 	add	local02, #6
2a080     10 FB 51 FC | 	wrword	result1, local02
2a084     0F 13 02 FB | 	rdlong	arg01, local01
2a088     18 12 06 F1 | 	add	arg01, #24
2a08c                 | ' {
2a08c                 | ' 
2a08c                 | ' 	return *((WORD*)ptr);
2a08c     09 FB E1 FA | 	rdword	result1, arg01
2a090     02 20 86 F1 | 	sub	local02, #2
2a094     10 FB 51 FC | 	wrword	result1, local02
2a098                 | LR__4344
2a098     A7 F0 03 F6 | 	mov	ptra, fp
2a09c     B2 00 A0 FD | 	call	#popregs_
2a0a0                 | _fatfs_cc_get_fileinfo_ret
2a0a0     2D 00 64 FD | 	ret
2a0a4                 | 
2a0a4                 | _fatfs_cc_create_name
2a0a4     0D 4A 05 F6 | 	mov	COUNT_, #13
2a0a8     A8 00 A0 FD | 	call	#pushregs_
2a0ac     34 F0 07 F1 | 	add	ptra, #52
2a0b0     04 4E 05 F1 | 	add	fp, #4
2a0b4     A7 12 62 FC | 	wrlong	arg01, fp
2a0b8     04 4E 05 F1 | 	add	fp, #4
2a0bc     A7 14 62 FC | 	wrlong	arg02, fp
2a0c0     0A FB 01 FB | 	rdlong	result1, arg02
2a0c4     28 4E 05 F1 | 	add	fp, #40
2a0c8     A7 FA 61 FC | 	wrlong	result1, fp
2a0cc     2C 4E 85 F1 | 	sub	fp, #44
2a0d0     A7 FA 01 FB | 	rdlong	result1, fp
2a0d4     FD 1E 02 FB | 	rdlong	local01, result1
2a0d8     0C 1E 06 F1 | 	add	local01, #12
2a0dc     0F 21 02 FB | 	rdlong	local02, local01
2a0e0     14 4E 05 F1 | 	add	fp, #20
2a0e4     A7 20 62 FC | 	wrlong	local02, fp
2a0e8     14 4E 05 F1 | 	add	fp, #20
2a0ec     A7 00 68 FC | 	wrlong	#0, fp
2a0f0     2C 4E 85 F1 | 	sub	fp, #44
2a0f4                 | ' 
2a0f4                 | ' 
2a0f4                 | ' 
2a0f4                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a0f4                 | ' 	for (;;) {
2a0f4                 | LR__4350
2a0f4     30 4E 05 F1 | 	add	fp, #48
2a0f8     A7 12 02 F6 | 	mov	arg01, fp
2a0fc     30 4E 85 F1 | 	sub	fp, #48
2a100     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a104     1C 4E 05 F1 | 	add	fp, #28
2a108     A7 FA 61 FC | 	wrlong	result1, fp
2a10c     1C 4E 85 F1 | 	sub	fp, #28
2a110     FF FF 7F FF 
2a114     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a118     06 FA 05 A6 |  if_e	mov	result1, #6
2a11c     74 08 90 AD |  if_e	jmp	#LR__4390
2a120     1C 4E 05 F1 | 	add	fp, #28
2a124     A7 1E 02 FB | 	rdlong	local01, fp
2a128     1C 4E 85 F1 | 	sub	fp, #28
2a12c     80 00 00 FF 
2a130     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a134     3C 00 90 CD |  if_b	jmp	#LR__4351
2a138     18 4E 05 F1 | 	add	fp, #24
2a13c     A7 22 02 FB | 	rdlong	local03, fp
2a140     14 4E 05 F1 | 	add	fp, #20
2a144     A7 1E 02 FB | 	rdlong	local01, fp
2a148     0F 25 02 F6 | 	mov	local04, local01
2a14c     01 24 06 F1 | 	add	local04, #1
2a150     A7 24 62 FC | 	wrlong	local04, fp
2a154     01 1E 66 F0 | 	shl	local01, #1
2a158     11 1F 02 F1 | 	add	local01, local03
2a15c     10 4E 85 F1 | 	sub	fp, #16
2a160     A7 26 02 FB | 	rdlong	local05, fp
2a164     1C 4E 85 F1 | 	sub	fp, #28
2a168     13 29 02 F6 | 	mov	local06, local05
2a16c     10 28 46 F0 | 	shr	local06, #16
2a170     0F 29 52 FC | 	wrword	local06, local01
2a174                 | LR__4351
2a174     1C 4E 05 F1 | 	add	fp, #28
2a178     A7 1E 02 FB | 	rdlong	local01, fp
2a17c     08 4E 85 F1 | 	sub	fp, #8
2a180     A7 1E 52 FC | 	wrword	local01, fp
2a184     A7 1E E2 FA | 	rdword	local01, fp
2a188     14 4E 85 F1 | 	sub	fp, #20
2a18c     20 1E 16 F2 | 	cmp	local01, #32 wc
2a190     B0 00 90 CD |  if_b	jmp	#LR__4353
2a194     14 4E 05 F1 | 	add	fp, #20
2a198     A7 1E E2 FA | 	rdword	local01, fp
2a19c     14 4E 85 F1 | 	sub	fp, #20
2a1a0     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a1a4     14 4E 05 51 |  if_ne	add	fp, #20
2a1a8     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a1ac     14 4E 85 51 |  if_ne	sub	fp, #20
2a1b0     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a1b4     8C 00 90 AD |  if_e	jmp	#LR__4353
2a1b8     14 4E 05 F1 | 	add	fp, #20
2a1bc     A7 12 E2 FA | 	rdword	arg01, fp
2a1c0     14 4E 85 F1 | 	sub	fp, #20
2a1c4     80 12 16 F2 | 	cmp	arg01, #128 wc
2a1c8     24 00 90 3D |  if_ae	jmp	#LR__4352
2a1cc     80 01 00 FF 
2a1d0     08 13 06 F6 | 	mov	arg01, ##@LR__5012
2a1d4     14 4E 05 F1 | 	add	fp, #20
2a1d8     A7 14 E2 FA | 	rdword	arg02, fp
2a1dc     14 4E 85 F1 | 	sub	fp, #20
2a1e0     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1e8     06 FA 05 56 |  if_ne	mov	result1, #6
2a1ec     A4 07 90 5D |  if_ne	jmp	#LR__4390
2a1f0                 | LR__4352
2a1f0     2C 4E 05 F1 | 	add	fp, #44
2a1f4     A7 28 02 FB | 	rdlong	local06, fp
2a1f8     2C 4E 85 F1 | 	sub	fp, #44
2a1fc     FF 28 16 F2 | 	cmp	local06, #255 wc
2a200     06 FA 05 36 |  if_ae	mov	result1, #6
2a204     8C 07 90 3D |  if_ae	jmp	#LR__4390
2a208     18 4E 05 F1 | 	add	fp, #24
2a20c     A7 22 02 FB | 	rdlong	local03, fp
2a210     14 4E 05 F1 | 	add	fp, #20
2a214     A7 20 02 FB | 	rdlong	local02, fp
2a218     10 25 02 F6 | 	mov	local04, local02
2a21c     01 24 06 F1 | 	add	local04, #1
2a220     A7 24 62 FC | 	wrlong	local04, fp
2a224     10 1F 02 F6 | 	mov	local01, local02
2a228     01 1E 66 F0 | 	shl	local01, #1
2a22c     11 1F 02 F1 | 	add	local01, local03
2a230     18 4E 85 F1 | 	sub	fp, #24
2a234     A7 28 E2 FA | 	rdword	local06, fp
2a238     14 4E 85 F1 | 	sub	fp, #20
2a23c     0F 29 52 FC | 	wrword	local06, local01
2a240     B0 FE 9F FD | 	jmp	#LR__4350
2a244                 | LR__4353
2a244     14 4E 05 F1 | 	add	fp, #20
2a248     A7 2A E2 FA | 	rdword	local07, fp
2a24c     14 4E 85 F1 | 	sub	fp, #20
2a250     20 2A 16 F2 | 	cmp	local07, #32 wc
2a254     10 4E 05 C1 |  if_b	add	fp, #16
2a258     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a25c     10 4E 85 C1 |  if_b	sub	fp, #16
2a260     74 00 90 CD |  if_b	jmp	#LR__4358
2a264     97 24 48 FB | 	callpa	#(@LR__4356-@LR__4354)>>2,fcache_load_ptr_
2a268                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a268                 | LR__4354
2a268     30 4E 05 F1 | 	add	fp, #48
2a26c     A7 24 02 FB | 	rdlong	local04, fp
2a270     30 4E 85 F1 | 	sub	fp, #48
2a274     12 2B C2 FA | 	rdbyte	local07, local04
2a278     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a27c     18 00 90 AD |  if_e	jmp	#LR__4355
2a280     30 4E 05 F1 | 	add	fp, #48
2a284     A7 24 02 FB | 	rdlong	local04, fp
2a288     30 4E 85 F1 | 	sub	fp, #48
2a28c     12 21 C2 FA | 	rdbyte	local02, local04
2a290     5C 20 0E F2 | 	cmp	local02, #92 wz
2a294     18 00 90 5D |  if_ne	jmp	#LR__4357
2a298                 | LR__4355
2a298     30 4E 05 F1 | 	add	fp, #48
2a29c     A7 1E 02 FB | 	rdlong	local01, fp
2a2a0     01 1E 06 F1 | 	add	local01, #1
2a2a4     A7 1E 62 FC | 	wrlong	local01, fp
2a2a8     30 4E 85 F1 | 	sub	fp, #48
2a2ac     B8 FF 9F FD | 	jmp	#LR__4354
2a2b0                 | LR__4356
2a2b0                 | LR__4357
2a2b0     10 4E 05 F1 | 	add	fp, #16
2a2b4     A7 00 48 FC | 	wrbyte	#0, fp
2a2b8     20 4E 05 F1 | 	add	fp, #32
2a2bc     A7 28 02 FB | 	rdlong	local06, fp
2a2c0     30 4E 85 F1 | 	sub	fp, #48
2a2c4     14 2B C2 FA | 	rdbyte	local07, local06
2a2c8     20 2A 16 F2 | 	cmp	local07, #32 wc
2a2cc     10 4E 05 C1 |  if_b	add	fp, #16
2a2d0     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a2d4     10 4E 85 C1 |  if_b	sub	fp, #16
2a2d8                 | LR__4358
2a2d8     08 4E 05 F1 | 	add	fp, #8
2a2dc     A7 2A 02 FB | 	rdlong	local07, fp
2a2e0     28 4E 05 F1 | 	add	fp, #40
2a2e4     A7 1E 02 FB | 	rdlong	local01, fp
2a2e8     30 4E 85 F1 | 	sub	fp, #48
2a2ec     15 1F 62 FC | 	wrlong	local01, local07
2a2f0     97 38 48 FB | 	callpa	#(@LR__4360-@LR__4359)>>2,fcache_load_ptr_
2a2f4                 | ' 	}
2a2f4                 | ' 	*path = p;
2a2f4                 | ' #line 2862 "ff.c"
2a2f4                 | ' 	while (di) {
2a2f4                 | LR__4359
2a2f4     2C 4E 05 F1 | 	add	fp, #44
2a2f8     A7 2A 0A FB | 	rdlong	local07, fp wz
2a2fc     2C 4E 85 F1 | 	sub	fp, #44
2a300     60 00 90 AD |  if_e	jmp	#LR__4361
2a304     18 4E 05 F1 | 	add	fp, #24
2a308     A7 28 02 FB | 	rdlong	local06, fp
2a30c     14 4E 05 F1 | 	add	fp, #20
2a310     A7 24 02 FB | 	rdlong	local04, fp
2a314     01 24 86 F1 | 	sub	local04, #1
2a318     01 24 66 F0 | 	shl	local04, #1
2a31c     14 25 02 F1 | 	add	local04, local06
2a320     12 29 E2 FA | 	rdword	local06, local04
2a324     18 4E 85 F1 | 	sub	fp, #24
2a328     A7 28 52 FC | 	wrword	local06, fp
2a32c     A7 2A E2 FA | 	rdword	local07, fp
2a330     14 4E 85 F1 | 	sub	fp, #20
2a334     20 2A 0E F2 | 	cmp	local07, #32 wz
2a338     14 4E 05 51 |  if_ne	add	fp, #20
2a33c     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a340     14 4E 85 51 |  if_ne	sub	fp, #20
2a344     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a348     18 00 90 5D |  if_ne	jmp	#LR__4361
2a34c     2C 4E 05 F1 | 	add	fp, #44
2a350     A7 1E 02 FB | 	rdlong	local01, fp
2a354     01 1E 86 F1 | 	sub	local01, #1
2a358     A7 1E 62 FC | 	wrlong	local01, fp
2a35c     2C 4E 85 F1 | 	sub	fp, #44
2a360     90 FF 9F FD | 	jmp	#LR__4359
2a364                 | LR__4360
2a364                 | LR__4361
2a364     18 4E 05 F1 | 	add	fp, #24
2a368     A7 2C 02 FB | 	rdlong	local08, fp
2a36c     14 4E 05 F1 | 	add	fp, #20
2a370     A7 24 02 FB | 	rdlong	local04, fp
2a374     01 24 66 F0 | 	shl	local04, #1
2a378     16 25 02 F1 | 	add	local04, local08
2a37c     12 01 58 FC | 	wrword	#0, local04
2a380     A7 2A 0A FB | 	rdlong	local07, fp wz
2a384     2C 4E 85 F1 | 	sub	fp, #44
2a388     06 FA 05 A6 |  if_e	mov	result1, #6
2a38c     04 06 90 AD |  if_e	jmp	#LR__4390
2a390                 | ' 
2a390                 | ' 
2a390                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a390     28 4E 05 F1 | 	add	fp, #40
2a394     A7 00 68 FC | 	wrlong	#0, fp
2a398     28 4E 85 F1 | 	sub	fp, #40
2a39c     97 22 48 FB | 	callpa	#(@LR__4363-@LR__4362)>>2,fcache_load_ptr_
2a3a0                 | LR__4362
2a3a0     18 4E 05 F1 | 	add	fp, #24
2a3a4     A7 2E 02 FB | 	rdlong	local09, fp
2a3a8     10 4E 05 F1 | 	add	fp, #16
2a3ac     A7 30 02 FB | 	rdlong	local10, fp
2a3b0     28 4E 85 F1 | 	sub	fp, #40
2a3b4     01 30 66 F0 | 	shl	local10, #1
2a3b8     17 31 02 F1 | 	add	local10, local09
2a3bc     18 33 E2 FA | 	rdword	local11, local10
2a3c0     20 32 0E F2 | 	cmp	local11, #32 wz
2a3c4     1C 00 90 5D |  if_ne	jmp	#LR__4364
2a3c8     28 4E 05 F1 | 	add	fp, #40
2a3cc     A7 34 02 FB | 	rdlong	local12, fp
2a3d0     1A 27 02 F6 | 	mov	local05, local12
2a3d4     01 26 06 F1 | 	add	local05, #1
2a3d8     A7 26 62 FC | 	wrlong	local05, fp
2a3dc     28 4E 85 F1 | 	sub	fp, #40
2a3e0     BC FF 9F FD | 	jmp	#LR__4362
2a3e4                 | LR__4363
2a3e4                 | LR__4364
2a3e4     28 4E 05 F1 | 	add	fp, #40
2a3e8     A7 2A 02 FB | 	rdlong	local07, fp
2a3ec     28 4E 85 F1 | 	sub	fp, #40
2a3f0     01 2A 16 F2 | 	cmp	local07, #1 wc
2a3f4     28 00 90 3D |  if_ae	jmp	#LR__4365
2a3f8     18 4E 05 F1 | 	add	fp, #24
2a3fc     A7 22 02 FB | 	rdlong	local03, fp
2a400     10 4E 05 F1 | 	add	fp, #16
2a404     A7 2E 02 FB | 	rdlong	local09, fp
2a408     28 4E 85 F1 | 	sub	fp, #40
2a40c     01 2E 66 F0 | 	shl	local09, #1
2a410     11 2F 02 F1 | 	add	local09, local03
2a414     17 1F E2 FA | 	rdword	local01, local09
2a418     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a41c     14 00 90 5D |  if_ne	jmp	#LR__4366
2a420                 | LR__4365
2a420     10 4E 05 F1 | 	add	fp, #16
2a424     A7 2A C2 FA | 	rdbyte	local07, fp
2a428     03 2A 46 F5 | 	or	local07, #3
2a42c     A7 2A 42 FC | 	wrbyte	local07, fp
2a430     10 4E 85 F1 | 	sub	fp, #16
2a434                 | LR__4366
2a434     97 2C 48 FB | 	callpa	#(@LR__4368-@LR__4367)>>2,fcache_load_ptr_
2a438                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a438                 | LR__4367
2a438     2C 4E 05 F1 | 	add	fp, #44
2a43c     A7 2A 02 FB | 	rdlong	local07, fp
2a440     2C 4E 85 F1 | 	sub	fp, #44
2a444     01 2A 16 F2 | 	cmp	local07, #1 wc
2a448     44 00 90 CD |  if_b	jmp	#LR__4369
2a44c     18 4E 05 F1 | 	add	fp, #24
2a450     A7 28 02 FB | 	rdlong	local06, fp
2a454     14 4E 05 F1 | 	add	fp, #20
2a458     A7 22 02 FB | 	rdlong	local03, fp
2a45c     2C 4E 85 F1 | 	sub	fp, #44
2a460     01 22 86 F1 | 	sub	local03, #1
2a464     01 22 66 F0 | 	shl	local03, #1
2a468     14 23 02 F1 | 	add	local03, local06
2a46c     11 1F E2 FA | 	rdword	local01, local03
2a470     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a474     18 00 90 AD |  if_e	jmp	#LR__4369
2a478     2C 4E 05 F1 | 	add	fp, #44
2a47c     A7 1E 02 FB | 	rdlong	local01, fp
2a480     01 1E 86 F1 | 	sub	local01, #1
2a484     A7 1E 62 FC | 	wrlong	local01, fp
2a488     2C 4E 85 F1 | 	sub	fp, #44
2a48c     A8 FF 9F FD | 	jmp	#LR__4367
2a490                 | LR__4368
2a490                 | LR__4369
2a490     04 4E 05 F1 | 	add	fp, #4
2a494     A7 12 02 FB | 	rdlong	arg01, fp
2a498     04 4E 85 F1 | 	sub	fp, #4
2a49c     20 12 06 F1 | 	add	arg01, #32
2a4a0     20 14 06 F6 | 	mov	arg02, #32
2a4a4     0B 16 06 F6 | 	mov	arg03, #11
2a4a8     09 37 02 F6 | 	mov	local13, arg01
2a4ac     98 00 A0 FD | 	call	#\builtin_bytefill_
2a4b0     1B FB 01 F6 | 	mov	result1, local13
2a4b4     0C 4E 05 F1 | 	add	fp, #12
2a4b8     A7 00 48 FC | 	wrbyte	#0, fp
2a4bc     A7 2A C2 FA | 	rdbyte	local07, fp
2a4c0     14 4E 05 F1 | 	add	fp, #20
2a4c4     A7 2A 62 FC | 	wrlong	local07, fp
2a4c8     04 4E 05 F1 | 	add	fp, #4
2a4cc     A7 10 68 FC | 	wrlong	#8, fp
2a4d0     24 4E 85 F1 | 	sub	fp, #36
2a4d4                 | ' 
2a4d4                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a4d4                 | ' 	i = b = 0; ni = 8;
2a4d4                 | ' 	for (;;) {
2a4d4                 | LR__4370
2a4d4     18 4E 05 F1 | 	add	fp, #24
2a4d8     A7 22 02 FB | 	rdlong	local03, fp
2a4dc     10 4E 05 F1 | 	add	fp, #16
2a4e0     A7 2E 02 FB | 	rdlong	local09, fp
2a4e4     17 25 02 F6 | 	mov	local04, local09
2a4e8     01 24 06 F1 | 	add	local04, #1
2a4ec     A7 24 62 FC | 	wrlong	local04, fp
2a4f0     01 2E 66 F0 | 	shl	local09, #1
2a4f4     11 2F 02 F1 | 	add	local09, local03
2a4f8     17 29 E2 FA | 	rdword	local06, local09
2a4fc     14 4E 85 F1 | 	sub	fp, #20
2a500     A7 28 52 FC | 	wrword	local06, fp
2a504     A7 2A EA FA | 	rdword	local07, fp wz
2a508     14 4E 85 F1 | 	sub	fp, #20
2a50c     74 03 90 AD |  if_e	jmp	#LR__4386
2a510     14 4E 05 F1 | 	add	fp, #20
2a514     A7 2A E2 FA | 	rdword	local07, fp
2a518     14 4E 85 F1 | 	sub	fp, #20
2a51c     20 2A 0E F2 | 	cmp	local07, #32 wz
2a520     30 00 90 AD |  if_e	jmp	#LR__4371
2a524     14 4E 05 F1 | 	add	fp, #20
2a528     A7 1E E2 FA | 	rdword	local01, fp
2a52c     14 4E 85 F1 | 	sub	fp, #20
2a530     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a534     34 00 90 5D |  if_ne	jmp	#LR__4372
2a538     28 4E 05 F1 | 	add	fp, #40
2a53c     A7 24 02 FB | 	rdlong	local04, fp
2a540     04 4E 05 F1 | 	add	fp, #4
2a544     A7 30 02 FB | 	rdlong	local10, fp
2a548     2C 4E 85 F1 | 	sub	fp, #44
2a54c     18 25 0A F2 | 	cmp	local04, local10 wz
2a550     18 00 90 AD |  if_e	jmp	#LR__4372
2a554                 | LR__4371
2a554     10 4E 05 F1 | 	add	fp, #16
2a558     A7 2A C2 FA | 	rdbyte	local07, fp
2a55c     03 2A 46 F5 | 	or	local07, #3
2a560     A7 2A 42 FC | 	wrbyte	local07, fp
2a564     10 4E 85 F1 | 	sub	fp, #16
2a568                 | ' 			cf |=  0x01  |  0x02 ;
2a568                 | ' 			continue;
2a568     68 FF 9F FD | 	jmp	#LR__4370
2a56c                 | LR__4372
2a56c     20 4E 05 F1 | 	add	fp, #32
2a570     A7 2A 02 FB | 	rdlong	local07, fp
2a574     04 4E 05 F1 | 	add	fp, #4
2a578     A7 1E 02 FB | 	rdlong	local01, fp
2a57c     24 4E 85 F1 | 	sub	fp, #36
2a580     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a584     1C 00 90 3D |  if_ae	jmp	#LR__4373
2a588     28 4E 05 F1 | 	add	fp, #40
2a58c     A7 2C 02 FB | 	rdlong	local08, fp
2a590     04 4E 05 F1 | 	add	fp, #4
2a594     A7 30 02 FB | 	rdlong	local10, fp
2a598     2C 4E 85 F1 | 	sub	fp, #44
2a59c     18 2D 0A F2 | 	cmp	local08, local10 wz
2a5a0     B0 00 90 5D |  if_ne	jmp	#LR__4375
2a5a4                 | LR__4373
2a5a4     24 4E 05 F1 | 	add	fp, #36
2a5a8     A7 2A 02 FB | 	rdlong	local07, fp
2a5ac     24 4E 85 F1 | 	sub	fp, #36
2a5b0     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a5b4     18 00 90 5D |  if_ne	jmp	#LR__4374
2a5b8     10 4E 05 F1 | 	add	fp, #16
2a5bc     A7 2A C2 FA | 	rdbyte	local07, fp
2a5c0     03 2A 46 F5 | 	or	local07, #3
2a5c4     A7 2A 42 FC | 	wrbyte	local07, fp
2a5c8     10 4E 85 F1 | 	sub	fp, #16
2a5cc                 | ' 				cf |=  0x01  |  0x02 ;
2a5cc                 | ' 				break;
2a5cc     B4 02 90 FD | 	jmp	#LR__4386
2a5d0                 | LR__4374
2a5d0     28 4E 05 F1 | 	add	fp, #40
2a5d4     A7 2A 02 FB | 	rdlong	local07, fp
2a5d8     04 4E 05 F1 | 	add	fp, #4
2a5dc     A7 1E 02 FB | 	rdlong	local01, fp
2a5e0     2C 4E 85 F1 | 	sub	fp, #44
2a5e4     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a5e8     10 4E 05 51 |  if_ne	add	fp, #16
2a5ec     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a5f0     03 2A 46 55 |  if_ne	or	local07, #3
2a5f4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a5f8     10 4E 85 51 |  if_ne	sub	fp, #16
2a5fc     28 4E 05 F1 | 	add	fp, #40
2a600     A7 2A 02 FB | 	rdlong	local07, fp
2a604     04 4E 05 F1 | 	add	fp, #4
2a608     A7 20 02 FB | 	rdlong	local02, fp
2a60c     2C 4E 85 F1 | 	sub	fp, #44
2a610     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a614     6C 02 90 1D |  if_a	jmp	#LR__4386
2a618     2C 4E 05 F1 | 	add	fp, #44
2a61c     A7 2A 02 FB | 	rdlong	local07, fp
2a620     04 4E 85 F1 | 	sub	fp, #4
2a624     A7 2A 62 FC | 	wrlong	local07, fp
2a628     08 4E 85 F1 | 	sub	fp, #8
2a62c     A7 10 68 FC | 	wrlong	#8, fp
2a630     04 4E 05 F1 | 	add	fp, #4
2a634     A7 16 68 FC | 	wrlong	#11, fp
2a638     18 4E 85 F1 | 	sub	fp, #24
2a63c     A7 32 C2 FA | 	rdbyte	local11, fp
2a640     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a644     02 2A 66 F0 | 	shl	local07, #2
2a648     A7 2A 42 FC | 	wrbyte	local07, fp
2a64c     0C 4E 85 F1 | 	sub	fp, #12
2a650                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a650                 | ' 			continue;
2a650     80 FE 9F FD | 	jmp	#LR__4370
2a654                 | LR__4375
2a654     14 4E 05 F1 | 	add	fp, #20
2a658     A7 2A E2 FA | 	rdword	local07, fp
2a65c     14 4E 85 F1 | 	sub	fp, #20
2a660     80 2A 16 F2 | 	cmp	local07, #128 wc
2a664     6C 00 90 CD |  if_b	jmp	#LR__4377
2a668     10 4E 05 F1 | 	add	fp, #16
2a66c     A7 2A C2 FA | 	rdbyte	local07, fp
2a670     02 2A 46 F5 | 	or	local07, #2
2a674     A7 2A 42 FC | 	wrbyte	local07, fp
2a678     04 4E 05 F1 | 	add	fp, #4
2a67c     A7 12 E2 FA | 	rdword	arg01, fp
2a680     14 4E 85 F1 | 	sub	fp, #20
2a684     01 00 00 FF 
2a688     52 15 06 F6 | 	mov	arg02, ##850
2a68c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a690     14 4E 05 F1 | 	add	fp, #20
2a694     A7 FA 51 FC | 	wrword	result1, fp
2a698     A7 2A E2 FA | 	rdword	local07, fp
2a69c     14 4E 85 F1 | 	sub	fp, #20
2a6a0     80 2A CE F7 | 	test	local07, #128 wz
2a6a4     2C 00 90 AD |  if_e	jmp	#LR__4376
2a6a8     14 4E 05 F1 | 	add	fp, #20
2a6ac     A7 20 E2 FA | 	rdword	local02, fp
2a6b0     7F 20 06 F5 | 	and	local02, #127
2a6b4     01 00 00 FF 
2a6b8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a6bc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a6c0     10 2B C2 FA | 	rdbyte	local07, local02
2a6c4     A7 2A 52 FC | 	wrword	local07, fp
2a6c8     14 4E 85 F1 | 	sub	fp, #20
2a6cc     01 00 00 FF 
2a6d0     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a6d4                 | LR__4376
2a6d4                 | LR__4377
2a6d4     14 4E 05 F1 | 	add	fp, #20
2a6d8     A7 2A E2 FA | 	rdword	local07, fp
2a6dc     14 4E 85 F1 | 	sub	fp, #20
2a6e0     00 2B 16 F2 | 	cmp	local07, #256 wc
2a6e4     88 00 90 CD |  if_b	jmp	#LR__4379
2a6e8     24 4E 05 F1 | 	add	fp, #36
2a6ec     A7 2A 02 FB | 	rdlong	local07, fp
2a6f0     01 2A 86 F1 | 	sub	local07, #1
2a6f4     04 4E 85 F1 | 	sub	fp, #4
2a6f8     A7 20 02 FB | 	rdlong	local02, fp
2a6fc     20 4E 85 F1 | 	sub	fp, #32
2a700     15 21 12 F2 | 	cmp	local02, local07 wc
2a704     2C 00 90 CD |  if_b	jmp	#LR__4378
2a708     10 4E 05 F1 | 	add	fp, #16
2a70c     A7 32 C2 FA | 	rdbyte	local11, fp
2a710     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a714     03 2A 46 F5 | 	or	local07, #3
2a718     A7 2A 42 FC | 	wrbyte	local07, fp
2a71c     14 4E 05 F1 | 	add	fp, #20
2a720     A7 2A 02 FB | 	rdlong	local07, fp
2a724     04 4E 85 F1 | 	sub	fp, #4
2a728     A7 2A 62 FC | 	wrlong	local07, fp
2a72c     20 4E 85 F1 | 	sub	fp, #32
2a730                 | ' 				cf |=  0x01  |  0x02 ;
2a730                 | ' 				i = ni; continue;
2a730     A0 FD 9F FD | 	jmp	#LR__4370
2a734                 | LR__4378
2a734     04 4E 05 F1 | 	add	fp, #4
2a738     A7 2E 02 FB | 	rdlong	local09, fp
2a73c     1C 4E 05 F1 | 	add	fp, #28
2a740     A7 30 02 FB | 	rdlong	local10, fp
2a744     18 25 02 F6 | 	mov	local04, local10
2a748     01 24 06 F1 | 	add	local04, #1
2a74c     A7 24 62 FC | 	wrlong	local04, fp
2a750     20 2E 06 F1 | 	add	local09, #32
2a754     17 31 02 F1 | 	add	local10, local09
2a758     0C 4E 85 F1 | 	sub	fp, #12
2a75c     A7 22 E2 FA | 	rdword	local03, fp
2a760     14 4E 85 F1 | 	sub	fp, #20
2a764     08 22 46 F0 | 	shr	local03, #8
2a768     18 23 42 FC | 	wrbyte	local03, local10
2a76c     D4 00 90 FD | 	jmp	#LR__4385
2a770                 | LR__4379
2a770     14 4E 05 F1 | 	add	fp, #20
2a774     A7 2A EA FA | 	rdword	local07, fp wz
2a778     14 4E 85 F1 | 	sub	fp, #20
2a77c     20 00 90 AD |  if_e	jmp	#LR__4380
2a780     80 01 00 FF 
2a784     11 13 06 F6 | 	mov	arg01, ##@LR__5013
2a788     14 4E 05 F1 | 	add	fp, #20
2a78c     A7 14 E2 FA | 	rdword	arg02, fp
2a790     14 4E 85 F1 | 	sub	fp, #20
2a794     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a798     00 FA 0D F2 | 	cmp	result1, #0 wz
2a79c     20 00 90 AD |  if_e	jmp	#LR__4381
2a7a0                 | LR__4380
2a7a0     14 4E 05 F1 | 	add	fp, #20
2a7a4     A7 BE 58 FC | 	wrword	#95, fp
2a7a8     04 4E 85 F1 | 	sub	fp, #4
2a7ac     A7 2A C2 FA | 	rdbyte	local07, fp
2a7b0     03 2A 46 F5 | 	or	local07, #3
2a7b4     A7 2A 42 FC | 	wrbyte	local07, fp
2a7b8     10 4E 85 F1 | 	sub	fp, #16
2a7bc     84 00 90 FD | 	jmp	#LR__4384
2a7c0                 | LR__4381
2a7c0     14 4E 05 F1 | 	add	fp, #20
2a7c4     A7 2A E2 FA | 	rdword	local07, fp
2a7c8     14 4E 85 F1 | 	sub	fp, #20
2a7cc     41 2A 16 F2 | 	cmp	local07, #65 wc
2a7d0     24 00 90 CD |  if_b	jmp	#LR__4382
2a7d4     14 4E 05 F1 | 	add	fp, #20
2a7d8     A7 1E E2 FA | 	rdword	local01, fp
2a7dc     14 4E 85 F1 | 	sub	fp, #20
2a7e0     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a7e4     0C 4E 05 C1 |  if_b	add	fp, #12
2a7e8     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a7ec     02 2A 46 C5 |  if_b	or	local07, #2
2a7f0     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a7f4     0C 4E 85 C1 |  if_b	sub	fp, #12
2a7f8                 | LR__4382
2a7f8     14 4E 05 F1 | 	add	fp, #20
2a7fc     A7 2A E2 FA | 	rdword	local07, fp
2a800     14 4E 85 F1 | 	sub	fp, #20
2a804     61 2A 16 F2 | 	cmp	local07, #97 wc
2a808     38 00 90 CD |  if_b	jmp	#LR__4383
2a80c     14 4E 05 F1 | 	add	fp, #20
2a810     A7 1E E2 FA | 	rdword	local01, fp
2a814     14 4E 85 F1 | 	sub	fp, #20
2a818     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a81c     24 00 90 3D |  if_ae	jmp	#LR__4383
2a820     0C 4E 05 F1 | 	add	fp, #12
2a824     A7 2A C2 FA | 	rdbyte	local07, fp
2a828     01 2A 46 F5 | 	or	local07, #1
2a82c     A7 2A 42 FC | 	wrbyte	local07, fp
2a830     08 4E 05 F1 | 	add	fp, #8
2a834     A7 2A E2 FA | 	rdword	local07, fp
2a838     20 2A 86 F1 | 	sub	local07, #32
2a83c     A7 2A 52 FC | 	wrword	local07, fp
2a840     14 4E 85 F1 | 	sub	fp, #20
2a844                 | LR__4383
2a844                 | LR__4384
2a844                 | LR__4385
2a844     04 4E 05 F1 | 	add	fp, #4
2a848     A7 32 02 FB | 	rdlong	local11, fp
2a84c     19 2F 02 F6 | 	mov	local09, local11
2a850     1C 4E 05 F1 | 	add	fp, #28
2a854     A7 20 02 FB | 	rdlong	local02, fp
2a858     10 25 02 F6 | 	mov	local04, local02
2a85c     01 24 06 F1 | 	add	local04, #1
2a860     A7 24 62 FC | 	wrlong	local04, fp
2a864     10 31 02 F6 | 	mov	local10, local02
2a868     20 2E 06 F1 | 	add	local09, #32
2a86c     17 31 02 F1 | 	add	local10, local09
2a870     0C 4E 85 F1 | 	sub	fp, #12
2a874     A7 22 E2 FA | 	rdword	local03, fp
2a878     14 4E 85 F1 | 	sub	fp, #20
2a87c     18 23 42 FC | 	wrbyte	local03, local10
2a880     50 FC 9F FD | 	jmp	#LR__4370
2a884                 | LR__4386
2a884     04 4E 05 F1 | 	add	fp, #4
2a888     A7 32 02 FB | 	rdlong	local11, fp
2a88c     04 4E 85 F1 | 	sub	fp, #4
2a890     20 32 06 F1 | 	add	local11, #32
2a894     19 2B C2 FA | 	rdbyte	local07, local11
2a898     E5 2A 0E F2 | 	cmp	local07, #229 wz
2a89c     04 4E 05 A1 |  if_e	add	fp, #4
2a8a0     A7 2A 02 AB |  if_e	rdlong	local07, fp
2a8a4     04 4E 85 A1 |  if_e	sub	fp, #4
2a8a8     20 2A 06 A1 |  if_e	add	local07, #32
2a8ac     15 0B 48 AC |  if_e	wrbyte	#5, local07
2a8b0     24 4E 05 F1 | 	add	fp, #36
2a8b4     A7 2A 02 FB | 	rdlong	local07, fp
2a8b8     24 4E 85 F1 | 	sub	fp, #36
2a8bc     08 2A 0E F2 | 	cmp	local07, #8 wz
2a8c0     0C 4E 05 A1 |  if_e	add	fp, #12
2a8c4     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2a8c8     02 2A 66 A0 |  if_e	shl	local07, #2
2a8cc     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2a8d0     0C 4E 85 A1 |  if_e	sub	fp, #12
2a8d4     0C 4E 05 F1 | 	add	fp, #12
2a8d8     A7 2A C2 FA | 	rdbyte	local07, fp
2a8dc     0C 4E 85 F1 | 	sub	fp, #12
2a8e0     0C 2A 06 F5 | 	and	local07, #12
2a8e4     0C 2A 0E F2 | 	cmp	local07, #12 wz
2a8e8     18 00 90 AD |  if_e	jmp	#LR__4387
2a8ec     0C 4E 05 F1 | 	add	fp, #12
2a8f0     A7 1E C2 FA | 	rdbyte	local01, fp
2a8f4     0C 4E 85 F1 | 	sub	fp, #12
2a8f8     03 1E 06 F5 | 	and	local01, #3
2a8fc     03 1E 0E F2 | 	cmp	local01, #3 wz
2a900     14 00 90 5D |  if_ne	jmp	#LR__4388
2a904                 | LR__4387
2a904     10 4E 05 F1 | 	add	fp, #16
2a908     A7 2A C2 FA | 	rdbyte	local07, fp
2a90c     02 2A 46 F5 | 	or	local07, #2
2a910     A7 2A 42 FC | 	wrbyte	local07, fp
2a914     10 4E 85 F1 | 	sub	fp, #16
2a918                 | LR__4388
2a918     10 4E 05 F1 | 	add	fp, #16
2a91c     A7 2A C2 FA | 	rdbyte	local07, fp
2a920     10 4E 85 F1 | 	sub	fp, #16
2a924     02 2A CE F7 | 	test	local07, #2 wz
2a928     48 00 90 5D |  if_ne	jmp	#LR__4389
2a92c     0C 4E 05 F1 | 	add	fp, #12
2a930     A7 2A C2 FA | 	rdbyte	local07, fp
2a934     0C 4E 85 F1 | 	sub	fp, #12
2a938     01 2A CE F7 | 	test	local07, #1 wz
2a93c     10 4E 05 51 |  if_ne	add	fp, #16
2a940     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a944     10 2A 46 55 |  if_ne	or	local07, #16
2a948     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a94c     10 4E 85 51 |  if_ne	sub	fp, #16
2a950     0C 4E 05 F1 | 	add	fp, #12
2a954     A7 2A C2 FA | 	rdbyte	local07, fp
2a958     0C 4E 85 F1 | 	sub	fp, #12
2a95c     04 2A CE F7 | 	test	local07, #4 wz
2a960     10 4E 05 51 |  if_ne	add	fp, #16
2a964     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a968     08 2A 46 55 |  if_ne	or	local07, #8
2a96c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a970     10 4E 85 51 |  if_ne	sub	fp, #16
2a974                 | LR__4389
2a974     04 4E 05 F1 | 	add	fp, #4
2a978     A7 2A 02 FB | 	rdlong	local07, fp
2a97c     0C 4E 05 F1 | 	add	fp, #12
2a980     A7 1E C2 FA | 	rdbyte	local01, fp
2a984     10 4E 85 F1 | 	sub	fp, #16
2a988     2B 2A 06 F1 | 	add	local07, #43
2a98c     15 1F 42 FC | 	wrbyte	local01, local07
2a990                 | ' 	}
2a990                 | ' 
2a990                 | ' 	dp->fn[ 11 ] = cf;
2a990                 | ' 
2a990                 | ' 	return FR_OK;
2a990     00 FA 05 F6 | 	mov	result1, #0
2a994                 | LR__4390
2a994     A7 F0 03 F6 | 	mov	ptra, fp
2a998     B2 00 A0 FD | 	call	#popregs_
2a99c                 | _fatfs_cc_create_name_ret
2a99c     2D 00 64 FD | 	ret
2a9a0                 | 
2a9a0                 | _fatfs_cc_follow_path
2a9a0     02 4A 05 F6 | 	mov	COUNT_, #2
2a9a4     A8 00 A0 FD | 	call	#pushregs_
2a9a8     18 F0 07 F1 | 	add	ptra, #24
2a9ac     04 4E 05 F1 | 	add	fp, #4
2a9b0     A7 12 62 FC | 	wrlong	arg01, fp
2a9b4     04 4E 05 F1 | 	add	fp, #4
2a9b8     A7 14 62 FC | 	wrlong	arg02, fp
2a9bc     04 4E 85 F1 | 	sub	fp, #4
2a9c0     A7 FA 01 FB | 	rdlong	result1, fp
2a9c4     FD 1E 02 FB | 	rdlong	local01, result1
2a9c8     10 4E 05 F1 | 	add	fp, #16
2a9cc     A7 1E 62 FC | 	wrlong	local01, fp
2a9d0     14 4E 85 F1 | 	sub	fp, #20
2a9d4     97 24 48 FB | 	callpa	#(@LR__4402-@LR__4400)>>2,fcache_load_ptr_
2a9d8                 | ' )
2a9d8                 | ' {
2a9d8                 | ' 	FRESULT res;
2a9d8                 | ' 	BYTE ns;
2a9d8                 | ' 	FATFS *fs = dp->obj.fs;
2a9d8                 | ' #line 3034 "ff.c"
2a9d8                 | ' 	{
2a9d8                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2a9d8                 | LR__4400
2a9d8     08 4E 05 F1 | 	add	fp, #8
2a9dc     A7 1E 02 FB | 	rdlong	local01, fp
2a9e0     08 4E 85 F1 | 	sub	fp, #8
2a9e4     0F 1F C2 FA | 	rdbyte	local01, local01
2a9e8     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a9ec     18 00 90 AD |  if_e	jmp	#LR__4401
2a9f0     08 4E 05 F1 | 	add	fp, #8
2a9f4     A7 1E 02 FB | 	rdlong	local01, fp
2a9f8     08 4E 85 F1 | 	sub	fp, #8
2a9fc     0F 1F C2 FA | 	rdbyte	local01, local01
2aa00     5C 1E 0E F2 | 	cmp	local01, #92 wz
2aa04     18 00 90 5D |  if_ne	jmp	#LR__4403
2aa08                 | LR__4401
2aa08     08 4E 05 F1 | 	add	fp, #8
2aa0c     A7 1E 02 FB | 	rdlong	local01, fp
2aa10     01 1E 06 F1 | 	add	local01, #1
2aa14     A7 1E 62 FC | 	wrlong	local01, fp
2aa18     08 4E 85 F1 | 	sub	fp, #8
2aa1c     B8 FF 9F FD | 	jmp	#LR__4400
2aa20                 | LR__4402
2aa20                 | LR__4403
2aa20     04 4E 05 F1 | 	add	fp, #4
2aa24     A7 1E 02 FB | 	rdlong	local01, fp
2aa28     08 1E 06 F1 | 	add	local01, #8
2aa2c     0F 01 68 FC | 	wrlong	#0, local01
2aa30     04 4E 05 F1 | 	add	fp, #4
2aa34     A7 1E 02 FB | 	rdlong	local01, fp
2aa38     08 4E 85 F1 | 	sub	fp, #8
2aa3c     0F 1F C2 FA | 	rdbyte	local01, local01
2aa40     20 1E 16 F2 | 	cmp	local01, #32 wc
2aa44     30 00 90 3D |  if_ae	jmp	#LR__4404
2aa48     04 4E 05 F1 | 	add	fp, #4
2aa4c     A7 1E 02 FB | 	rdlong	local01, fp
2aa50     2B 1E 06 F1 | 	add	local01, #43
2aa54     0F 01 49 FC | 	wrbyte	#128, local01
2aa58     A7 12 02 FB | 	rdlong	arg01, fp
2aa5c     04 4E 85 F1 | 	sub	fp, #4
2aa60     00 14 06 F6 | 	mov	arg02, #0
2aa64     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2aa68     0C 4E 05 F1 | 	add	fp, #12
2aa6c     A7 FA 61 FC | 	wrlong	result1, fp
2aa70     0C 4E 85 F1 | 	sub	fp, #12
2aa74     1C 01 90 FD | 	jmp	#LR__4408
2aa78                 | LR__4404
2aa78                 | ' 		for (;;) {
2aa78                 | LR__4405
2aa78     04 4E 05 F1 | 	add	fp, #4
2aa7c     A7 12 02 FB | 	rdlong	arg01, fp
2aa80     04 4E 05 F1 | 	add	fp, #4
2aa84     A7 14 02 F6 | 	mov	arg02, fp
2aa88     08 4E 85 F1 | 	sub	fp, #8
2aa8c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2aa90     0C 4E 05 F1 | 	add	fp, #12
2aa94     A7 FA 61 FC | 	wrlong	result1, fp
2aa98     00 FA 4D F2 | 	cmps	result1, #0 wz
2aa9c     0C 4E 85 F1 | 	sub	fp, #12
2aaa0     F0 00 90 5D |  if_ne	jmp	#LR__4407
2aaa4     04 4E 05 F1 | 	add	fp, #4
2aaa8     A7 12 02 FB | 	rdlong	arg01, fp
2aaac     04 4E 85 F1 | 	sub	fp, #4
2aab0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2aab4     0C 4E 05 F1 | 	add	fp, #12
2aab8     A7 FA 61 FC | 	wrlong	result1, fp
2aabc     08 4E 85 F1 | 	sub	fp, #8
2aac0     A7 1E 02 FB | 	rdlong	local01, fp
2aac4     2B 1E 06 F1 | 	add	local01, #43
2aac8     0F 1F C2 FA | 	rdbyte	local01, local01
2aacc     0C 4E 05 F1 | 	add	fp, #12
2aad0     A7 1E 42 FC | 	wrbyte	local01, fp
2aad4     04 4E 85 F1 | 	sub	fp, #4
2aad8     A7 1E 0A FB | 	rdlong	local01, fp wz
2aadc     0C 4E 85 F1 | 	sub	fp, #12
2aae0     34 00 90 AD |  if_e	jmp	#LR__4406
2aae4     0C 4E 05 F1 | 	add	fp, #12
2aae8     A7 1E 02 FB | 	rdlong	local01, fp
2aaec     0C 4E 85 F1 | 	sub	fp, #12
2aaf0     04 1E 0E F2 | 	cmp	local01, #4 wz
2aaf4     9C 00 90 5D |  if_ne	jmp	#LR__4407
2aaf8     10 4E 05 F1 | 	add	fp, #16
2aafc     A7 1E C2 FA | 	rdbyte	local01, fp
2ab00     10 4E 85 F1 | 	sub	fp, #16
2ab04     04 1E CE F7 | 	test	local01, #4 wz
2ab08     0C 4E 05 A1 |  if_e	add	fp, #12
2ab0c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ab10     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab14                 | ' 					}
2ab14                 | ' 				}
2ab14                 | ' 				break;
2ab14     7C 00 90 FD | 	jmp	#LR__4407
2ab18                 | LR__4406
2ab18     10 4E 05 F1 | 	add	fp, #16
2ab1c     A7 1E C2 FA | 	rdbyte	local01, fp
2ab20     10 4E 85 F1 | 	sub	fp, #16
2ab24     04 1E CE F7 | 	test	local01, #4 wz
2ab28     68 00 90 5D |  if_ne	jmp	#LR__4407
2ab2c     04 4E 05 F1 | 	add	fp, #4
2ab30     A7 1E 02 FB | 	rdlong	local01, fp
2ab34     04 4E 85 F1 | 	sub	fp, #4
2ab38     06 1E 06 F1 | 	add	local01, #6
2ab3c     0F 1F C2 FA | 	rdbyte	local01, local01
2ab40     10 1E CE F7 | 	test	local01, #16 wz
2ab44     0C 4E 05 A1 |  if_e	add	fp, #12
2ab48     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ab4c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab50                 | ' 				res = FR_NO_PATH; break;
2ab50     40 00 90 AD |  if_e	jmp	#LR__4407
2ab54     04 4E 05 F1 | 	add	fp, #4
2ab58     A7 20 02 FB | 	rdlong	local02, fp
2ab5c     10 1F 02 F6 | 	mov	local01, local02
2ab60     10 4E 05 F1 | 	add	fp, #16
2ab64     A7 14 02 FB | 	rdlong	arg02, fp
2ab68     0A 13 02 F6 | 	mov	arg01, arg02
2ab6c     34 14 06 F1 | 	add	arg02, #52
2ab70     14 4E 85 F1 | 	sub	fp, #20
2ab74     10 20 06 F1 | 	add	local02, #16
2ab78     10 21 02 FB | 	rdlong	local02, local02
2ab7c     FF 21 06 F5 | 	and	local02, #511
2ab80     10 15 02 F1 | 	add	arg02, local02
2ab84     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ab88     08 1E 06 F1 | 	add	local01, #8
2ab8c     0F FB 61 FC | 	wrlong	result1, local01
2ab90     E4 FE 9F FD | 	jmp	#LR__4405
2ab94                 | LR__4407
2ab94                 | LR__4408
2ab94                 | ' 			}
2ab94                 | ' #line 3090 "ff.c"
2ab94                 | ' 			{
2ab94                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ab94                 | ' 			}
2ab94                 | ' 		}
2ab94                 | ' 	}
2ab94                 | ' 
2ab94                 | ' 	return res;
2ab94     0C 4E 05 F1 | 	add	fp, #12
2ab98     A7 FA 01 FB | 	rdlong	result1, fp
2ab9c     0C 4E 85 F1 | 	sub	fp, #12
2aba0     A7 F0 03 F6 | 	mov	ptra, fp
2aba4     B2 00 A0 FD | 	call	#popregs_
2aba8                 | _fatfs_cc_follow_path_ret
2aba8     2D 00 64 FD | 	ret
2abac                 | 
2abac                 | _fatfs_cc_get_ldnumber
2abac     01 00 66 F6 | 	neg	_var01, #1
2abb0     09 03 0A FB | 	rdlong	_var02, arg01 wz
2abb4     01 05 02 F6 | 	mov	_var03, _var02
2abb8     01 FA 65 A6 |  if_e	neg	result1, #1
2abbc     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2abc0     97 10 48 FB | 	callpa	#(@LR__4411-@LR__4410)>>2,fcache_load_ptr_
2abc4                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2abc4                 | LR__4410
2abc4     02 07 C2 FA | 	rdbyte	_var04, _var03
2abc8     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2abcc     20 FA 15 F2 | 	cmp	result1, #32 wc
2abd0     01 04 06 F1 | 	add	_var03, #1
2abd4     03 09 02 36 |  if_ae	mov	_var05, _var04
2abd8     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2abdc     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2abe0     E0 FF 9F 1D |  if_a	jmp	#LR__4410
2abe4                 | LR__4411
2abe4     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2abe8     3A 06 0E F2 | 	cmp	_var04, #58 wz
2abec     40 00 90 5D |  if_ne	jmp	#LR__4413
2abf0     01 0A 06 F6 | 	mov	_var06, #1
2abf4     01 09 C2 FA | 	rdbyte	_var05, _var02
2abf8     30 08 16 F2 | 	cmp	_var05, #48 wc
2abfc     1C 00 90 CD |  if_b	jmp	#LR__4412
2ac00     01 09 C2 FA | 	rdbyte	_var05, _var02
2ac04     3A 08 16 F2 | 	cmp	_var05, #58 wc
2ac08     01 0D 02 C6 |  if_b	mov	_var07, _var02
2ac0c     02 0C 06 C1 |  if_b	add	_var07, #2
2ac10     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ac14     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2ac18     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2ac1c                 | LR__4412
2ac1c     01 0A 56 F2 | 	cmps	_var06, #1 wc
2ac20     05 01 02 C6 |  if_b	mov	_var01, _var06
2ac24     09 05 62 CC |  if_b	wrlong	_var03, arg01
2ac28                 | ' 			vol = i;
2ac28                 | ' 			*path = tt;
2ac28                 | ' 		}
2ac28                 | ' 		return vol;
2ac28     00 FB 01 F6 | 	mov	result1, _var01
2ac2c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ac30                 | LR__4413
2ac30                 | ' 	}
2ac30                 | ' #line 3170 "ff.c"
2ac30                 | ' 	vol = 0;
2ac30                 | ' 
2ac30                 | ' 	return vol;
2ac30     00 FA 05 F6 | 	mov	result1, #0
2ac34                 | _fatfs_cc_get_ldnumber_ret
2ac34     2D 00 64 FD | 	ret
2ac38                 | 
2ac38                 | _fatfs_cc_check_fs
2ac38     04 4A 05 F6 | 	mov	COUNT_, #4
2ac3c     A8 00 A0 FD | 	call	#pushregs_
2ac40     09 1F 02 F6 | 	mov	local01, arg01
2ac44     03 1E 06 F1 | 	add	local01, #3
2ac48     0F 01 48 FC | 	wrbyte	#0, local01
2ac4c     2D 1E 06 F1 | 	add	local01, #45
2ac50     FF FF FF FF 
2ac54     0F FF 6B FC | 	wrlong	##-1, local01
2ac58     30 1E 86 F1 | 	sub	local01, #48
2ac5c     0F 13 02 F6 | 	mov	arg01, local01
2ac60     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ac64     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac68     04 FA 05 56 |  if_ne	mov	result1, #4
2ac6c     94 01 90 5D |  if_ne	jmp	#LR__4424
2ac70     34 1E 06 F1 | 	add	local01, #52
2ac74     0F 13 02 F6 | 	mov	arg01, local01
2ac78     FE 13 06 F1 | 	add	arg01, #510
2ac7c                 | ' {
2ac7c                 | ' 
2ac7c                 | ' 	return *((WORD*)ptr);
2ac7c     09 21 E2 FA | 	rdword	local02, arg01
2ac80     0F 23 C2 FA | 	rdbyte	local03, local01
2ac84     34 1E 86 F1 | 	sub	local01, #52
2ac88     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ac8c     EB 24 0E F2 | 	cmp	local04, #235 wz
2ac90     11 17 02 56 |  if_ne	mov	arg03, local03
2ac94     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ac98     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2ac9c     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2aca0     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2aca4     44 01 90 5D |  if_ne	jmp	#LR__4423
2aca8     10 25 32 F9 | 	getword	local04, local02, #0
2acac     55 00 00 FF 
2acb0     55 24 0E F2 | 	cmp	local04, ##43605 wz
2acb4     2C 00 90 5D |  if_ne	jmp	#LR__4420
2acb8     34 1E 06 F1 | 	add	local01, #52
2acbc     0F 13 02 F6 | 	mov	arg01, local01
2acc0     34 1E 86 F1 | 	sub	local01, #52
2acc4     52 12 06 F1 | 	add	arg01, #82
2acc8     80 01 00 FF 
2accc     18 15 06 F6 | 	mov	arg02, ##@LR__5014
2acd0     08 16 06 F6 | 	mov	arg03, #8
2acd4     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2acd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2acdc                 | ' 			return 0;
2acdc     00 FA 05 A6 |  if_e	mov	result1, #0
2ace0     20 01 90 AD |  if_e	jmp	#LR__4424
2ace4                 | LR__4420
2ace4     34 1E 06 F1 | 	add	local01, #52
2ace8     0F 13 02 F6 | 	mov	arg01, local01
2acec     0B 12 06 F1 | 	add	arg01, #11
2acf0                 | ' {
2acf0                 | ' 
2acf0                 | ' 	return *((WORD*)ptr);
2acf0     09 FB E1 FA | 	rdword	result1, arg01
2acf4     0D 1E 06 F1 | 	add	local01, #13
2acf8     0F 23 C2 FA | 	rdbyte	local03, local01
2acfc     41 1E 86 F1 | 	sub	local01, #65
2ad00     FD 24 32 F9 | 	getword	local04, result1, #0
2ad04     FD 14 32 F9 | 	getword	arg02, result1, #0
2ad08     01 14 86 F1 | 	sub	arg02, #1
2ad0c     0A 25 CA F7 | 	test	local04, arg02 wz
2ad10     D8 00 90 5D |  if_ne	jmp	#LR__4422
2ad14     FD 14 32 F9 | 	getword	arg02, result1, #0
2ad18     01 00 00 FF 
2ad1c     00 14 16 F2 | 	cmp	arg02, ##512 wc
2ad20     C8 00 90 CD |  if_b	jmp	#LR__4422
2ad24     FD 14 32 F9 | 	getword	arg02, result1, #0
2ad28     01 00 00 FF 
2ad2c     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ad30     B8 00 90 3D |  if_ae	jmp	#LR__4422
2ad34     11 13 02 F6 | 	mov	arg01, local03
2ad38     07 12 4E F7 | 	zerox	arg01, #7 wz
2ad3c     AC 00 90 AD |  if_e	jmp	#LR__4422
2ad40     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2ad44     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ad48     01 22 86 F1 | 	sub	local03, #1
2ad4c     11 13 CA F7 | 	test	arg01, local03 wz
2ad50     98 00 90 5D |  if_ne	jmp	#LR__4422
2ad54     34 1E 06 F1 | 	add	local01, #52
2ad58     0F 13 02 F6 | 	mov	arg01, local01
2ad5c     34 1E 86 F1 | 	sub	local01, #52
2ad60     0E 12 06 F1 | 	add	arg01, #14
2ad64                 | ' {
2ad64                 | ' 
2ad64                 | ' 	return *((WORD*)ptr);
2ad64     09 FB E9 FA | 	rdword	result1, arg01 wz
2ad68     80 00 90 AD |  if_e	jmp	#LR__4422
2ad6c     44 1E 06 F1 | 	add	local01, #68
2ad70     0F 13 C2 FA | 	rdbyte	arg01, local01
2ad74     44 1E 86 F1 | 	sub	local01, #68
2ad78     01 12 86 F1 | 	sub	arg01, #1
2ad7c     02 12 16 F2 | 	cmp	arg01, #2 wc
2ad80     68 00 90 3D |  if_ae	jmp	#LR__4422
2ad84     34 1E 06 F1 | 	add	local01, #52
2ad88     0F 13 02 F6 | 	mov	arg01, local01
2ad8c     34 1E 86 F1 | 	sub	local01, #52
2ad90     11 12 06 F1 | 	add	arg01, #17
2ad94                 | ' {
2ad94                 | ' 
2ad94                 | ' 	return *((WORD*)ptr);
2ad94     09 FB E9 FA | 	rdword	result1, arg01 wz
2ad98     50 00 90 AD |  if_e	jmp	#LR__4422
2ad9c     34 1E 06 F1 | 	add	local01, #52
2ada0     0F 13 02 F6 | 	mov	arg01, local01
2ada4     34 1E 86 F1 | 	sub	local01, #52
2ada8     13 12 06 F1 | 	add	arg01, #19
2adac                 | ' {
2adac                 | ' 
2adac                 | ' 	return *((WORD*)ptr);
2adac     09 FB E1 FA | 	rdword	result1, arg01
2adb0     FD 22 32 F9 | 	getword	local03, result1, #0
2adb4     80 22 16 F2 | 	cmp	local03, #128 wc
2adb8     20 00 90 3D |  if_ae	jmp	#LR__4421
2adbc     34 1E 06 F1 | 	add	local01, #52
2adc0     0F 13 02 F6 | 	mov	arg01, local01
2adc4     34 1E 86 F1 | 	sub	local01, #52
2adc8     20 12 06 F1 | 	add	arg01, #32
2adcc                 | ' {
2adcc                 | ' 
2adcc                 | ' 	return *((DWORD*)ptr);
2adcc     09 FB 01 FB | 	rdlong	result1, arg01
2add0     80 00 00 FF 
2add4     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2add8     10 00 90 CD |  if_b	jmp	#LR__4422
2addc                 | LR__4421
2addc     4A 1E 06 F1 | 	add	local01, #74
2ade0                 | ' {
2ade0                 | ' 
2ade0                 | ' 	return *((WORD*)ptr);
2ade0     0F FB E9 FA | 	rdword	result1, local01 wz
2ade4                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2ade4                 | ' 			&& ld_word(fs->win +  14 ) != 0
2ade4                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2ade4                 | ' 			&& ld_word(fs->win +  17 ) != 0
2ade4                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2ade4                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2ade4                 | ' 				return 0;
2ade4     00 FA 05 56 |  if_ne	mov	result1, #0
2ade8     18 00 90 5D |  if_ne	jmp	#LR__4424
2adec                 | LR__4422
2adec                 | LR__4423
2adec                 | ' 		}
2adec                 | ' 	}
2adec                 | ' 	return sign == 0xAA55 ? 2 : 3;
2adec     10 23 32 F9 | 	getword	local03, local02, #0
2adf0     55 00 00 FF 
2adf4     55 22 0E F2 | 	cmp	local03, ##43605 wz
2adf8     02 24 06 A6 |  if_e	mov	local04, #2
2adfc     03 24 06 56 |  if_ne	mov	local04, #3
2ae00     12 FB 01 F6 | 	mov	result1, local04
2ae04                 | LR__4424
2ae04     A7 F0 03 F6 | 	mov	ptra, fp
2ae08     B2 00 A0 FD | 	call	#popregs_
2ae0c                 | _fatfs_cc_check_fs_ret
2ae0c     2D 00 64 FD | 	ret
2ae10                 | 
2ae10                 | _fatfs_cc_find_volume
2ae10     05 4A 05 F6 | 	mov	COUNT_, #5
2ae14     A8 00 A0 FD | 	call	#pushregs_
2ae18     24 F0 07 F1 | 	add	ptra, #36
2ae1c     09 1F 02 F6 | 	mov	local01, arg01
2ae20     0A 21 02 F6 | 	mov	local02, arg02
2ae24     0F 13 02 F6 | 	mov	arg01, local01
2ae28     00 14 06 F6 | 	mov	arg02, #0
2ae2c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2ae30     02 FA 0D F2 | 	cmp	result1, #2 wz
2ae34     0C 00 90 AD |  if_e	jmp	#LR__4430
2ae38     03 FA 15 F2 | 	cmp	result1, #3 wc
2ae3c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2ae40     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4438
2ae44                 | LR__4430
2ae44                 | ' 	for (i = 0; i < 4; i++) {
2ae44     00 22 06 F6 | 	mov	local03, #0
2ae48     97 26 48 FB | 	callpa	#(@LR__4432-@LR__4431)>>2,fcache_load_ptr_
2ae4c                 | LR__4431
2ae4c     04 22 16 F2 | 	cmp	local03, #4 wc
2ae50     44 00 90 3D |  if_ae	jmp	#LR__4433
2ae54     11 25 02 F6 | 	mov	local04, local03
2ae58     02 24 66 F0 | 	shl	local04, #2
2ae5c     14 4E 05 F1 | 	add	fp, #20
2ae60     A7 24 02 F1 | 	add	local04, fp
2ae64     34 1E 06 F1 | 	add	local01, #52
2ae68     0F 13 02 F6 | 	mov	arg01, local01
2ae6c     34 1E 86 F1 | 	sub	local01, #52
2ae70     BE 13 06 F1 | 	add	arg01, #446
2ae74     11 15 02 F6 | 	mov	arg02, local03
2ae78     04 14 66 F0 | 	shl	arg02, #4
2ae7c     0A 13 02 F1 | 	add	arg01, arg02
2ae80     08 12 06 F1 | 	add	arg01, #8
2ae84                 | ' {
2ae84                 | ' 
2ae84                 | ' 	return *((DWORD*)ptr);
2ae84     09 FB 01 FB | 	rdlong	result1, arg01
2ae88     14 4E 85 F1 | 	sub	fp, #20
2ae8c     12 FB 61 FC | 	wrlong	result1, local04
2ae90     01 22 06 F1 | 	add	local03, #1
2ae94     B4 FF 9F FD | 	jmp	#LR__4431
2ae98                 | LR__4432
2ae98                 | LR__4433
2ae98     00 20 0E F2 | 	cmp	local02, #0 wz
2ae9c     10 25 02 56 |  if_ne	mov	local04, local02
2aea0     01 24 86 51 |  if_ne	sub	local04, #1
2aea4     00 24 06 A6 |  if_e	mov	local04, #0
2aea8     12 23 02 F6 | 	mov	local03, local04
2aeac                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2aeac                 | ' 	}
2aeac                 | ' 	i = part ? part - 1 : 0;
2aeac                 | ' 	do {
2aeac                 | LR__4434
2aeac     11 25 02 F6 | 	mov	local04, local03
2aeb0     02 24 66 F0 | 	shl	local04, #2
2aeb4     14 4E 05 F1 | 	add	fp, #20
2aeb8     A7 24 02 F1 | 	add	local04, fp
2aebc     12 25 0A FB | 	rdlong	local04, local04 wz
2aec0     14 4E 85 F1 | 	sub	fp, #20
2aec4     28 00 90 AD |  if_e	jmp	#LR__4435
2aec8     11 25 02 F6 | 	mov	local04, local03
2aecc     02 24 66 F0 | 	shl	local04, #2
2aed0     14 4E 05 F1 | 	add	fp, #20
2aed4     A7 24 02 F1 | 	add	local04, fp
2aed8     12 15 02 FB | 	rdlong	arg02, local04
2aedc     0F 13 02 F6 | 	mov	arg01, local01
2aee0     14 4E 85 F1 | 	sub	fp, #20
2aee4     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2aee8     FD 24 02 F6 | 	mov	local04, result1
2aeec     04 00 90 FD | 	jmp	#LR__4436
2aef0                 | LR__4435
2aef0     03 24 06 F6 | 	mov	local04, #3
2aef4                 | LR__4436
2aef4     12 27 02 F6 | 	mov	local05, local04
2aef8     00 20 0E F2 | 	cmp	local02, #0 wz
2aefc     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2af00     0C 00 90 8D |  if_c_and_z	jmp	#LR__4437
2af04     01 22 06 A1 |  if_e	add	local03, #1
2af08     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2af0c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4434
2af10                 | LR__4437
2af10                 | ' 	return fmt;
2af10     13 FB 01 F6 | 	mov	result1, local05
2af14                 | LR__4438
2af14     A7 F0 03 F6 | 	mov	ptra, fp
2af18     B2 00 A0 FD | 	call	#popregs_
2af1c                 | _fatfs_cc_find_volume_ret
2af1c     2D 00 64 FD | 	ret
2af20                 | 
2af20                 | _fatfs_cc_mount_volume
2af20     0B 4A 05 F6 | 	mov	COUNT_, #11
2af24     A8 00 A0 FD | 	call	#pushregs_
2af28     0A 1F 02 F6 | 	mov	local01, arg02
2af2c     0B 21 02 F6 | 	mov	local02, arg03
2af30     0F 01 68 FC | 	wrlong	#0, local01
2af34     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2af38     FD 22 02 F6 | 	mov	local03, result1
2af3c     00 22 56 F2 | 	cmps	local03, #0 wc
2af40     0B FA 05 C6 |  if_b	mov	result1, #11
2af44     3C 05 90 CD |  if_b	jmp	#LR__4450
2af48     11 17 02 F6 | 	mov	arg03, local03
2af4c     02 16 66 F0 | 	shl	arg03, #2
2af50     F2 16 02 F1 | 	add	arg03, objptr
2af54     0B 25 0A FB | 	rdlong	local04, arg03 wz
2af58     0C FA 05 A6 |  if_e	mov	result1, #12
2af5c     24 05 90 AD |  if_e	jmp	#LR__4450
2af60     0F 25 62 FC | 	wrlong	local04, local01
2af64     10 21 E2 F8 | 	getbyte	local02, local02, #0
2af68     FE 20 06 F5 | 	and	local02, #254
2af6c     12 17 CA FA | 	rdbyte	arg03, local04 wz
2af70     4C 00 90 AD |  if_e	jmp	#LR__4441
2af74     01 24 06 F1 | 	add	local04, #1
2af78     12 13 CA FA | 	rdbyte	arg01, local04 wz
2af7c     01 24 86 F1 | 	sub	local04, #1
2af80     01 FA 05 56 |  if_ne	mov	result1, #1
2af84                 | ' 
2af84                 | ' 	return Stat;
2af84     01 00 00 AF 
2af88     20 E4 05 A1 |  if_e	add	objptr, ##544
2af8c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2af90     01 00 00 AF 
2af94     20 E4 85 A1 |  if_e	sub	objptr, ##544
2af98     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2af9c     01 16 CE F7 | 	test	arg03, #1 wz
2afa0     1C 00 90 5D |  if_ne	jmp	#LR__4440
2afa4     00 20 0E F2 | 	cmp	local02, #0 wz
2afa8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2afac     04 FA CD 57 |  if_ne	test	result1, #4 wz
2afb0                 | ' 				return FR_WRITE_PROTECTED;
2afb0     0A FA 05 56 |  if_ne	mov	result1, #10
2afb4     CC 04 90 5D |  if_ne	jmp	#LR__4450
2afb8                 | ' 			}
2afb8                 | ' 			return FR_OK;
2afb8     00 FA 05 F6 | 	mov	result1, #0
2afbc     C4 04 90 FD | 	jmp	#LR__4450
2afc0                 | LR__4440
2afc0                 | LR__4441
2afc0     12 01 48 FC | 	wrbyte	#0, local04
2afc4     01 24 06 F1 | 	add	local04, #1
2afc8     12 23 42 FC | 	wrbyte	local03, local04
2afcc     12 13 C2 FA | 	rdbyte	arg01, local04
2afd0     01 24 86 F1 | 	sub	local04, #1
2afd4     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2afd8     FD 16 02 F6 | 	mov	arg03, result1
2afdc     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2afe0     01 26 CE F7 | 	test	local05, #1 wz
2afe4                 | ' 		return FR_NOT_READY;
2afe4     03 FA 05 56 |  if_ne	mov	result1, #3
2afe8     98 04 90 5D |  if_ne	jmp	#LR__4450
2afec     00 20 0E F2 | 	cmp	local02, #0 wz
2aff0     0B 27 02 56 |  if_ne	mov	local05, arg03
2aff4     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2aff8     04 26 CE 57 |  if_ne	test	local05, #4 wz
2affc                 | ' 		return FR_WRITE_PROTECTED;
2affc     0A FA 05 56 |  if_ne	mov	result1, #10
2b000     80 04 90 5D |  if_ne	jmp	#LR__4450
2b004     12 13 02 F6 | 	mov	arg01, local04
2b008     00 14 06 F6 | 	mov	arg02, #0
2b00c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b010     FD 12 02 F6 | 	mov	arg01, result1
2b014     04 12 0E F2 | 	cmp	arg01, #4 wz
2b018     01 FA 05 A6 |  if_e	mov	result1, #1
2b01c     64 04 90 AD |  if_e	jmp	#LR__4450
2b020     02 12 16 F2 | 	cmp	arg01, #2 wc
2b024     0D FA 05 36 |  if_ae	mov	result1, #13
2b028     58 04 90 3D |  if_ae	jmp	#LR__4450
2b02c     30 24 06 F1 | 	add	local04, #48
2b030     12 29 02 FB | 	rdlong	local06, local04
2b034     04 24 06 F1 | 	add	local04, #4
2b038     12 13 02 F6 | 	mov	arg01, local04
2b03c     34 24 86 F1 | 	sub	local04, #52
2b040     0B 12 06 F1 | 	add	arg01, #11
2b044                 | ' {
2b044                 | ' 
2b044                 | ' 	return *((WORD*)ptr);
2b044     09 FB E1 FA | 	rdword	result1, arg01
2b048     01 00 00 FF 
2b04c     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b050     0D FA 05 56 |  if_ne	mov	result1, #13
2b054     2C 04 90 5D |  if_ne	jmp	#LR__4450
2b058     34 24 06 F1 | 	add	local04, #52
2b05c     12 13 02 F6 | 	mov	arg01, local04
2b060     34 24 86 F1 | 	sub	local04, #52
2b064     16 12 06 F1 | 	add	arg01, #22
2b068                 | ' {
2b068                 | ' 
2b068                 | ' 	return *((WORD*)ptr);
2b068     09 FB E1 FA | 	rdword	result1, arg01
2b06c     FD 2A 0A F6 | 	mov	local07, result1 wz
2b070     18 00 90 5D |  if_ne	jmp	#LR__4442
2b074     34 24 06 F1 | 	add	local04, #52
2b078     12 13 02 F6 | 	mov	arg01, local04
2b07c     34 24 86 F1 | 	sub	local04, #52
2b080     24 12 06 F1 | 	add	arg01, #36
2b084                 | ' {
2b084                 | ' 
2b084                 | ' 	return *((DWORD*)ptr);
2b084     09 FB 01 FB | 	rdlong	result1, arg01
2b088     FD 2A 02 F6 | 	mov	local07, result1
2b08c                 | LR__4442
2b08c     1C 24 06 F1 | 	add	local04, #28
2b090     12 2B 62 FC | 	wrlong	local07, local04
2b094     28 24 06 F1 | 	add	local04, #40
2b098     12 27 C2 FA | 	rdbyte	local05, local04
2b09c     42 24 86 F1 | 	sub	local04, #66
2b0a0     12 27 42 FC | 	wrbyte	local05, local04
2b0a4     12 27 C2 FA | 	rdbyte	local05, local04
2b0a8     02 24 86 F1 | 	sub	local04, #2
2b0ac     01 26 0E F2 | 	cmp	local05, #1 wz
2b0b0     02 24 06 51 |  if_ne	add	local04, #2
2b0b4     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b0b8     02 24 86 51 |  if_ne	sub	local04, #2
2b0bc     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b0c0     0D FA 05 56 |  if_ne	mov	result1, #13
2b0c4     BC 03 90 5D |  if_ne	jmp	#LR__4450
2b0c8     02 24 06 F1 | 	add	local04, #2
2b0cc     12 27 C2 FA | 	rdbyte	local05, local04
2b0d0     13 2B 02 FD | 	qmul	local07, local05
2b0d4     3F 24 06 F1 | 	add	local04, #63
2b0d8     12 27 C2 FA | 	rdbyte	local05, local04
2b0dc     37 24 86 F1 | 	sub	local04, #55
2b0e0     12 27 52 FC | 	wrword	local05, local04
2b0e4     12 27 EA FA | 	rdword	local05, local04 wz
2b0e8     0A 24 86 F1 | 	sub	local04, #10
2b0ec     18 2A 62 FD | 	getqx	local07
2b0f0     20 00 90 AD |  if_e	jmp	#LR__4443
2b0f4     0A 24 06 F1 | 	add	local04, #10
2b0f8     12 27 E2 FA | 	rdword	local05, local04
2b0fc     13 23 32 F9 | 	getword	local03, local05, #0
2b100     0A 24 86 F1 | 	sub	local04, #10
2b104     13 27 32 F9 | 	getword	local05, local05, #0
2b108     01 26 86 F1 | 	sub	local05, #1
2b10c     13 23 CA F7 | 	test	local03, local05 wz
2b110     08 00 90 AD |  if_e	jmp	#LR__4444
2b114                 | LR__4443
2b114     0D FA 05 F6 | 	mov	result1, #13
2b118     68 03 90 FD | 	jmp	#LR__4450
2b11c                 | LR__4444
2b11c     34 24 06 F1 | 	add	local04, #52
2b120     12 13 02 F6 | 	mov	arg01, local04
2b124     11 12 06 F1 | 	add	arg01, #17
2b128                 | ' {
2b128                 | ' 
2b128                 | ' 	return *((WORD*)ptr);
2b128     09 FB E1 FA | 	rdword	result1, arg01
2b12c     2C 24 86 F1 | 	sub	local04, #44
2b130     12 FB 51 FC | 	wrword	result1, local04
2b134     12 27 E2 FA | 	rdword	local05, local04
2b138     08 24 86 F1 | 	sub	local04, #8
2b13c     13 13 52 F6 | 	abs	arg01, local05 wc
2b140     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b144     09 13 8A F6 | 	negc	arg01, arg01 wz
2b148     0D FA 05 56 |  if_ne	mov	result1, #13
2b14c     34 03 90 5D |  if_ne	jmp	#LR__4450
2b150     34 24 06 F1 | 	add	local04, #52
2b154     12 13 02 F6 | 	mov	arg01, local04
2b158     34 24 86 F1 | 	sub	local04, #52
2b15c     13 12 06 F1 | 	add	arg01, #19
2b160                 | ' {
2b160                 | ' 
2b160                 | ' 	return *((WORD*)ptr);
2b160     09 FB E1 FA | 	rdword	result1, arg01
2b164     FD 2C 0A F6 | 	mov	local08, result1 wz
2b168     34 24 06 A1 |  if_e	add	local04, #52
2b16c     12 13 02 A6 |  if_e	mov	arg01, local04
2b170     34 24 86 A1 |  if_e	sub	local04, #52
2b174     20 12 06 A1 |  if_e	add	arg01, #32
2b178                 | ' {
2b178                 | ' 
2b178                 | ' 	return *((DWORD*)ptr);
2b178     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b17c     34 24 06 F1 | 	add	local04, #52
2b180     12 13 02 F6 | 	mov	arg01, local04
2b184     34 24 86 F1 | 	sub	local04, #52
2b188     0E 12 06 F1 | 	add	arg01, #14
2b18c                 | ' {
2b18c                 | ' 
2b18c                 | ' 	return *((WORD*)ptr);
2b18c     09 FB E1 FA | 	rdword	result1, arg01
2b190     FD 12 02 F6 | 	mov	arg01, result1
2b194     09 27 02 F6 | 	mov	local05, arg01
2b198     0F 26 4E F7 | 	zerox	local05, #15 wz
2b19c     0D FA 05 A6 |  if_e	mov	result1, #13
2b1a0     E0 02 90 AD |  if_e	jmp	#LR__4450
2b1a4     09 2F 32 F9 | 	getword	local09, arg01, #0
2b1a8     15 2F 02 F1 | 	add	local09, local07
2b1ac     08 24 06 F1 | 	add	local04, #8
2b1b0     12 27 E2 FA | 	rdword	local05, local04
2b1b4     08 24 86 F1 | 	sub	local04, #8
2b1b8     13 27 52 F6 | 	abs	local05, local05 wc
2b1bc     04 26 46 F0 | 	shr	local05, #4
2b1c0     13 2F 82 F3 | 	sumc	local09, local05
2b1c4     17 2D 12 F2 | 	cmp	local08, local09 wc
2b1c8     0D FA 05 C6 |  if_b	mov	result1, #13
2b1cc     B4 02 90 CD |  if_b	jmp	#LR__4450
2b1d0     17 2D 82 F1 | 	sub	local08, local09
2b1d4     0A 24 06 F1 | 	add	local04, #10
2b1d8     12 27 E2 FA | 	rdword	local05, local04
2b1dc     13 2D 12 FD | 	qdiv	local08, local05
2b1e0     0A 24 86 F1 | 	sub	local04, #10
2b1e4     18 26 62 FD | 	getqx	local05
2b1e8     00 26 0E F2 | 	cmp	local05, #0 wz
2b1ec     0D FA 05 A6 |  if_e	mov	result1, #13
2b1f0     90 02 90 AD |  if_e	jmp	#LR__4450
2b1f4     00 30 06 F6 | 	mov	local10, #0
2b1f8     FF FF 07 FF 
2b1fc     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b200     03 30 06 C6 |  if_b	mov	local10, #3
2b204     7F 00 00 FF 
2b208     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b20c     02 30 06 C6 |  if_b	mov	local10, #2
2b210     07 00 00 FF 
2b214     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b218     01 30 06 C6 |  if_b	mov	local10, #1
2b21c     00 30 0E F2 | 	cmp	local10, #0 wz
2b220     0D FA 05 A6 |  if_e	mov	result1, #13
2b224     5C 02 90 AD |  if_e	jmp	#LR__4450
2b228     02 26 06 F1 | 	add	local05, #2
2b22c     18 24 06 F1 | 	add	local04, #24
2b230     12 27 62 FC | 	wrlong	local05, local04
2b234     08 24 06 F1 | 	add	local04, #8
2b238     12 29 62 FC | 	wrlong	local06, local04
2b23c     14 27 02 F6 | 	mov	local05, local06
2b240     09 13 32 F9 | 	getword	arg01, arg01, #0
2b244     09 27 02 F1 | 	add	local05, arg01
2b248     04 24 06 F1 | 	add	local04, #4
2b24c     12 27 62 FC | 	wrlong	local05, local04
2b250     14 27 02 F6 | 	mov	local05, local06
2b254     17 27 02 F1 | 	add	local05, local09
2b258     08 24 06 F1 | 	add	local04, #8
2b25c     12 27 62 FC | 	wrlong	local05, local04
2b260     2C 24 86 F1 | 	sub	local04, #44
2b264     03 30 0E F2 | 	cmp	local10, #3 wz
2b268     5C 00 90 5D |  if_ne	jmp	#LR__4445
2b26c     34 24 06 F1 | 	add	local04, #52
2b270     12 13 02 F6 | 	mov	arg01, local04
2b274     34 24 86 F1 | 	sub	local04, #52
2b278     2A 12 06 F1 | 	add	arg01, #42
2b27c                 | ' {
2b27c                 | ' 
2b27c                 | ' 	return *((WORD*)ptr);
2b27c     09 FB E9 FA | 	rdword	result1, arg01 wz
2b280     0D FA 05 56 |  if_ne	mov	result1, #13
2b284     FC 01 90 5D |  if_ne	jmp	#LR__4450
2b288     08 24 06 F1 | 	add	local04, #8
2b28c     12 27 EA FA | 	rdword	local05, local04 wz
2b290     08 24 86 F1 | 	sub	local04, #8
2b294     0D FA 05 56 |  if_ne	mov	result1, #13
2b298     E8 01 90 5D |  if_ne	jmp	#LR__4450
2b29c     34 24 06 F1 | 	add	local04, #52
2b2a0     12 13 02 F6 | 	mov	arg01, local04
2b2a4     2C 12 06 F1 | 	add	arg01, #44
2b2a8                 | ' {
2b2a8                 | ' 
2b2a8                 | ' 	return *((DWORD*)ptr);
2b2a8     09 FB 01 FB | 	rdlong	result1, arg01
2b2ac     0C 24 86 F1 | 	sub	local04, #12
2b2b0     12 FB 61 FC | 	wrlong	result1, local04
2b2b4     10 24 86 F1 | 	sub	local04, #16
2b2b8     12 33 02 FB | 	rdlong	local11, local04
2b2bc     18 24 86 F1 | 	sub	local04, #24
2b2c0     02 32 66 F0 | 	shl	local11, #2
2b2c4     6C 00 90 FD | 	jmp	#LR__4447
2b2c8                 | LR__4445
2b2c8     08 24 06 F1 | 	add	local04, #8
2b2cc     12 27 EA FA | 	rdword	local05, local04 wz
2b2d0     08 24 86 F1 | 	sub	local04, #8
2b2d4     0D FA 05 A6 |  if_e	mov	result1, #13
2b2d8     A8 01 90 AD |  if_e	jmp	#LR__4450
2b2dc     24 24 06 F1 | 	add	local04, #36
2b2e0     12 27 02 FB | 	rdlong	local05, local04
2b2e4     15 27 02 F1 | 	add	local05, local07
2b2e8     04 24 06 F1 | 	add	local04, #4
2b2ec     12 27 62 FC | 	wrlong	local05, local04
2b2f0     28 24 86 F1 | 	sub	local04, #40
2b2f4     02 30 0E F2 | 	cmp	local10, #2 wz
2b2f8     18 24 06 A1 |  if_e	add	local04, #24
2b2fc     12 27 02 AB |  if_e	rdlong	local05, local04
2b300     18 24 86 A1 |  if_e	sub	local04, #24
2b304     01 26 66 A0 |  if_e	shl	local05, #1
2b308     24 00 90 AD |  if_e	jmp	#LR__4446
2b30c     18 24 06 F1 | 	add	local04, #24
2b310     12 33 02 FB | 	rdlong	local11, local04
2b314     19 27 02 F6 | 	mov	local05, local11
2b318     01 26 66 F0 | 	shl	local05, #1
2b31c     19 27 02 F1 | 	add	local05, local11
2b320     01 26 46 F0 | 	shr	local05, #1
2b324     18 24 86 F1 | 	sub	local04, #24
2b328     01 32 06 F5 | 	and	local11, #1
2b32c     19 27 02 F1 | 	add	local05, local11
2b330                 | LR__4446
2b330     13 33 02 F6 | 	mov	local11, local05
2b334                 | LR__4447
2b334     FF 33 06 F1 | 	add	local11, #511
2b338     09 32 46 F0 | 	shr	local11, #9
2b33c     1C 24 06 F1 | 	add	local04, #28
2b340     12 17 02 FB | 	rdlong	arg03, local04
2b344     1C 24 86 F1 | 	sub	local04, #28
2b348     19 17 12 F2 | 	cmp	arg03, local11 wc
2b34c     0D FA 05 C6 |  if_b	mov	result1, #13
2b350     30 01 90 CD |  if_b	jmp	#LR__4450
2b354     14 24 06 F1 | 	add	local04, #20
2b358     FF FF FF FF 
2b35c     12 FF 6B FC | 	wrlong	##-1, local04
2b360     04 24 86 F1 | 	sub	local04, #4
2b364     FF FF FF FF 
2b368     12 FF 6B FC | 	wrlong	##-1, local04
2b36c     0C 24 86 F1 | 	sub	local04, #12
2b370     12 01 49 FC | 	wrbyte	#128, local04
2b374     04 24 86 F1 | 	sub	local04, #4
2b378     03 30 0E F2 | 	cmp	local10, #3 wz
2b37c     D0 00 90 5D |  if_ne	jmp	#LR__4449
2b380     34 24 06 F1 | 	add	local04, #52
2b384     12 13 02 F6 | 	mov	arg01, local04
2b388     34 24 86 F1 | 	sub	local04, #52
2b38c     30 12 06 F1 | 	add	arg01, #48
2b390                 | ' {
2b390                 | ' 
2b390                 | ' 	return *((WORD*)ptr);
2b390     09 FB E1 FA | 	rdword	result1, arg01
2b394     FD 26 32 F9 | 	getword	local05, result1, #0
2b398     01 26 0E F2 | 	cmp	local05, #1 wz
2b39c     B0 00 90 5D |  if_ne	jmp	#LR__4449
2b3a0     01 28 06 F1 | 	add	local06, #1
2b3a4     12 13 02 F6 | 	mov	arg01, local04
2b3a8     14 15 02 F6 | 	mov	arg02, local06
2b3ac     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b3b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b3b4     98 00 90 5D |  if_ne	jmp	#LR__4449
2b3b8     04 24 06 F1 | 	add	local04, #4
2b3bc     12 01 48 FC | 	wrbyte	#0, local04
2b3c0     30 24 06 F1 | 	add	local04, #48
2b3c4     12 13 02 F6 | 	mov	arg01, local04
2b3c8     34 24 86 F1 | 	sub	local04, #52
2b3cc     FE 13 06 F1 | 	add	arg01, #510
2b3d0                 | ' {
2b3d0                 | ' 
2b3d0                 | ' 	return *((WORD*)ptr);
2b3d0     09 FB E1 FA | 	rdword	result1, arg01
2b3d4     FD 26 32 F9 | 	getword	local05, result1, #0
2b3d8     55 00 00 FF 
2b3dc     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b3e0     34 24 06 A1 |  if_e	add	local04, #52
2b3e4     12 13 02 A6 |  if_e	mov	arg01, local04
2b3e8     34 24 86 A1 |  if_e	sub	local04, #52
2b3ec                 | ' {
2b3ec                 | ' 
2b3ec                 | ' 	return *((DWORD*)ptr);
2b3ec     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b3f0     A9 B0 20 AF 
2b3f4     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b3f8     54 00 90 5D |  if_ne	jmp	#LR__4448
2b3fc     34 24 06 F1 | 	add	local04, #52
2b400     12 13 02 F6 | 	mov	arg01, local04
2b404     34 24 86 F1 | 	sub	local04, #52
2b408     E4 13 06 F1 | 	add	arg01, #484
2b40c                 | ' {
2b40c                 | ' 
2b40c                 | ' 	return *((DWORD*)ptr);
2b40c     09 FB 01 FB | 	rdlong	result1, arg01
2b410     B9 A0 30 FF 
2b414     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b418     34 00 90 5D |  if_ne	jmp	#LR__4448
2b41c     34 24 06 F1 | 	add	local04, #52
2b420     12 13 02 F6 | 	mov	arg01, local04
2b424     E8 13 06 F1 | 	add	arg01, #488
2b428                 | ' {
2b428                 | ' 
2b428                 | ' 	return *((DWORD*)ptr);
2b428     09 FB 01 FB | 	rdlong	result1, arg01
2b42c     20 24 86 F1 | 	sub	local04, #32
2b430     12 FB 61 FC | 	wrlong	result1, local04
2b434     20 24 06 F1 | 	add	local04, #32
2b438     12 13 02 F6 | 	mov	arg01, local04
2b43c     EC 13 06 F1 | 	add	arg01, #492
2b440                 | ' {
2b440                 | ' 
2b440                 | ' 	return *((DWORD*)ptr);
2b440     09 FB 01 FB | 	rdlong	result1, arg01
2b444     24 24 86 F1 | 	sub	local04, #36
2b448     12 FB 61 FC | 	wrlong	result1, local04
2b44c     10 24 86 F1 | 	sub	local04, #16
2b450                 | LR__4448
2b450                 | LR__4449
2b450     12 31 42 FC | 	wrbyte	local10, local04
2b454     04 E4 05 F1 | 	add	objptr, #4
2b458     F2 26 E2 FA | 	rdword	local05, objptr
2b45c     01 26 06 F1 | 	add	local05, #1
2b460     F2 26 52 FC | 	wrword	local05, objptr
2b464     F2 32 E2 FA | 	rdword	local11, objptr
2b468     06 24 06 F1 | 	add	local04, #6
2b46c     12 33 52 FC | 	wrword	local11, local04
2b470     04 E4 05 F1 | 	add	objptr, #4
2b474     06 24 06 F1 | 	add	local04, #6
2b478     12 E5 61 FC | 	wrlong	objptr, local04
2b47c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b47c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b47c                 | ' 			{
2b47c                 | ' 
2b47c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b47c                 | ' 
2b47c                 | ' 
2b47c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b47c                 | ' 
2b47c                 | ' 			}
2b47c                 | ' 		}
2b47c                 | ' 
2b47c                 | ' 
2b47c                 | ' 	}
2b47c                 | ' 
2b47c                 | ' 	fs->fs_type = (BYTE)fmt;
2b47c                 | ' 	fs->id = ++Fsid;
2b47c                 | ' 
2b47c                 | ' 	fs->lfnbuf = LfnBuf;
2b47c                 | ' #line 3567 "ff.c"
2b47c                 | ' 	return FR_OK;
2b47c     00 FA 05 F6 | 	mov	result1, #0
2b480     08 E4 85 F1 | 	sub	objptr, #8
2b484                 | LR__4450
2b484     A7 F0 03 F6 | 	mov	ptra, fp
2b488     B2 00 A0 FD | 	call	#popregs_
2b48c                 | _fatfs_cc_mount_volume_ret
2b48c     2D 00 64 FD | 	ret
2b490                 | 
2b490                 | _fatfs_cc_validate
2b490     09 01 0A F6 | 	mov	_var01, arg01 wz
2b494     09 02 06 F6 | 	mov	_var02, #9
2b498     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b49c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b4a0     50 00 90 AD |  if_e	jmp	#LR__4460
2b4a4     04 00 06 F1 | 	add	_var01, #4
2b4a8     00 07 E2 FA | 	rdword	_var04, _var01
2b4ac     04 00 86 F1 | 	sub	_var01, #4
2b4b0     00 13 02 FB | 	rdlong	arg01, _var01
2b4b4     06 12 06 F1 | 	add	arg01, #6
2b4b8     09 FB E1 FA | 	rdword	result1, arg01
2b4bc     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b4c0     30 00 90 5D |  if_ne	jmp	#LR__4460
2b4c4     00 07 02 FB | 	rdlong	_var04, _var01
2b4c8     01 06 06 F1 | 	add	_var04, #1
2b4cc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b4d0     01 FA 05 56 |  if_ne	mov	result1, #1
2b4d4                 | ' 
2b4d4                 | ' 	return Stat;
2b4d4     01 00 00 AF 
2b4d8     20 E4 05 A1 |  if_e	add	objptr, ##544
2b4dc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b4e0     01 00 00 AF 
2b4e4     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b4e8     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b4ec     01 04 CE F7 | 	test	_var03, #1 wz
2b4f0     00 02 06 A6 |  if_e	mov	_var02, #0
2b4f4                 | LR__4460
2b4f4     00 02 0E F2 | 	cmp	_var02, #0 wz
2b4f8     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b4fc     00 04 06 56 |  if_ne	mov	_var03, #0
2b500     0A 05 62 FC | 	wrlong	_var03, arg02
2b504                 | ' 			res = FR_OK;
2b504                 | ' 		}
2b504                 | ' 
2b504                 | ' 	}
2b504                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b504                 | ' 	return res;
2b504     01 FB 01 F6 | 	mov	result1, _var02
2b508                 | _fatfs_cc_validate_ret
2b508     2D 00 64 FD | 	ret
2b50c                 | 
2b50c                 | _fatfs_cc_f_mount
2b50c     01 4A 05 F6 | 	mov	COUNT_, #1
2b510     A8 00 A0 FD | 	call	#pushregs_
2b514     20 F0 07 F1 | 	add	ptra, #32
2b518     04 4E 05 F1 | 	add	fp, #4
2b51c     A7 12 62 FC | 	wrlong	arg01, fp
2b520     04 4E 05 F1 | 	add	fp, #4
2b524     A7 14 62 FC | 	wrlong	arg02, fp
2b528     04 4E 05 F1 | 	add	fp, #4
2b52c     A7 16 42 FC | 	wrbyte	arg03, fp
2b530     04 4E 85 F1 | 	sub	fp, #4
2b534     A7 16 02 FB | 	rdlong	arg03, fp
2b538     14 4E 05 F1 | 	add	fp, #20
2b53c     A7 16 62 FC | 	wrlong	arg03, fp
2b540     A7 12 02 F6 | 	mov	arg01, fp
2b544     1C 4E 85 F1 | 	sub	fp, #28
2b548     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b54c     14 4E 05 F1 | 	add	fp, #20
2b550     A7 FA 61 FC | 	wrlong	result1, fp
2b554     14 4E 85 F1 | 	sub	fp, #20
2b558     00 FA 55 F2 | 	cmps	result1, #0 wc
2b55c     0B FA 05 C6 |  if_b	mov	result1, #11
2b560     C0 00 90 CD |  if_b	jmp	#LR__4471
2b564     14 4E 05 F1 | 	add	fp, #20
2b568     A7 16 02 FB | 	rdlong	arg03, fp
2b56c     02 16 66 F0 | 	shl	arg03, #2
2b570     F2 16 02 F1 | 	add	arg03, objptr
2b574     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b578     04 4E 85 F1 | 	sub	fp, #4
2b57c     A7 16 62 FC | 	wrlong	arg03, fp
2b580     10 4E 85 F1 | 	sub	fp, #16
2b584     28 00 90 AD |  if_e	jmp	#LR__4470
2b588     10 4E 05 F1 | 	add	fp, #16
2b58c     A7 16 02 FB | 	rdlong	arg03, fp
2b590     10 4E 85 F1 | 	sub	fp, #16
2b594     01 16 06 F1 | 	add	arg03, #1
2b598     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b59c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b5a0     10 4E 05 F1 | 	add	fp, #16
2b5a4     A7 16 02 FB | 	rdlong	arg03, fp
2b5a8     10 4E 85 F1 | 	sub	fp, #16
2b5ac     0B 01 48 FC | 	wrbyte	#0, arg03
2b5b0                 | LR__4470
2b5b0     04 4E 05 F1 | 	add	fp, #4
2b5b4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b5b8     04 4E 85 F1 | 	sub	fp, #4
2b5bc     04 4E 05 51 |  if_ne	add	fp, #4
2b5c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b5c4     04 4E 85 51 |  if_ne	sub	fp, #4
2b5c8     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b5cc     14 4E 05 F1 | 	add	fp, #20
2b5d0     A7 1E 02 FB | 	rdlong	local01, fp
2b5d4     02 1E 66 F0 | 	shl	local01, #2
2b5d8     F2 1E 02 F1 | 	add	local01, objptr
2b5dc     10 4E 85 F1 | 	sub	fp, #16
2b5e0     A7 16 02 FB | 	rdlong	arg03, fp
2b5e4     0F 17 62 FC | 	wrlong	arg03, local01
2b5e8     08 4E 05 F1 | 	add	fp, #8
2b5ec     A7 1E CA FA | 	rdbyte	local01, fp wz
2b5f0     0C 4E 85 F1 | 	sub	fp, #12
2b5f4     00 FA 05 A6 |  if_e	mov	result1, #0
2b5f8     28 00 90 AD |  if_e	jmp	#LR__4471
2b5fc     08 4E 05 F1 | 	add	fp, #8
2b600     A7 12 02 F6 | 	mov	arg01, fp
2b604     04 4E 85 F1 | 	sub	fp, #4
2b608     A7 14 02 F6 | 	mov	arg02, fp
2b60c     04 4E 85 F1 | 	sub	fp, #4
2b610     00 16 06 F6 | 	mov	arg03, #0
2b614     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b618     18 4E 05 F1 | 	add	fp, #24
2b61c     A7 FA 61 FC | 	wrlong	result1, fp
2b620                 | ' 
2b620                 | ' 	res = mount_volume(&path, &fs, 0);
2b620                 | ' 	return res ;
2b620     18 4E 85 F1 | 	sub	fp, #24
2b624                 | LR__4471
2b624     A7 F0 03 F6 | 	mov	ptra, fp
2b628     B2 00 A0 FD | 	call	#popregs_
2b62c                 | _fatfs_cc_f_mount_ret
2b62c     2D 00 64 FD | 	ret
2b630                 | 
2b630                 | _fatfs_cc_f_open
2b630     02 4A 05 F6 | 	mov	COUNT_, #2
2b634     A8 00 A0 FD | 	call	#pushregs_
2b638     60 F0 07 F1 | 	add	ptra, #96
2b63c     04 4E 05 F1 | 	add	fp, #4
2b640     A7 12 62 FC | 	wrlong	arg01, fp
2b644     04 4E 05 F1 | 	add	fp, #4
2b648     A7 14 62 FC | 	wrlong	arg02, fp
2b64c     04 4E 05 F1 | 	add	fp, #4
2b650     A7 16 42 FC | 	wrbyte	arg03, fp
2b654     08 4E 85 F1 | 	sub	fp, #8
2b658     A7 18 0A FB | 	rdlong	arg04, fp wz
2b65c     04 4E 85 F1 | 	sub	fp, #4
2b660     09 FA 05 A6 |  if_e	mov	result1, #9
2b664     98 06 90 AD |  if_e	jmp	#LR__4497
2b668     0C 4E 05 F1 | 	add	fp, #12
2b66c     A7 18 C2 FA | 	rdbyte	arg04, fp
2b670     3F 18 06 F5 | 	and	arg04, #63
2b674     A7 18 42 FC | 	wrbyte	arg04, fp
2b678     04 4E 85 F1 | 	sub	fp, #4
2b67c     A7 12 02 F6 | 	mov	arg01, fp
2b680     3C 4E 05 F1 | 	add	fp, #60
2b684     A7 14 02 F6 | 	mov	arg02, fp
2b688     38 4E 85 F1 | 	sub	fp, #56
2b68c     A7 16 C2 FA | 	rdbyte	arg03, fp
2b690     0C 4E 85 F1 | 	sub	fp, #12
2b694     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b698     10 4E 05 F1 | 	add	fp, #16
2b69c     A7 FA 61 FC | 	wrlong	result1, fp
2b6a0     10 4E 85 F1 | 	sub	fp, #16
2b6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b6a8     2C 06 90 5D |  if_ne	jmp	#LR__4496
2b6ac     44 4E 05 F1 | 	add	fp, #68
2b6b0     A7 18 02 FB | 	rdlong	arg04, fp
2b6b4     30 4E 85 F1 | 	sub	fp, #48
2b6b8     A7 18 62 FC | 	wrlong	arg04, fp
2b6bc     A7 12 02 F6 | 	mov	arg01, fp
2b6c0     0C 4E 85 F1 | 	sub	fp, #12
2b6c4     A7 1E 02 FB | 	rdlong	local01, fp
2b6c8     08 4E 85 F1 | 	sub	fp, #8
2b6cc     0F 15 02 F6 | 	mov	arg02, local01
2b6d0     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b6d4     10 4E 05 F1 | 	add	fp, #16
2b6d8     A7 FA 61 FC | 	wrlong	result1, fp
2b6dc     10 4E 85 F1 | 	sub	fp, #16
2b6e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b6e4     1C 00 90 5D |  if_ne	jmp	#LR__4480
2b6e8     3F 4E 05 F1 | 	add	fp, #63
2b6ec     A7 18 C2 FA | 	rdbyte	arg04, fp
2b6f0     3F 4E 85 F1 | 	sub	fp, #63
2b6f4     80 18 CE F7 | 	test	arg04, #128 wz
2b6f8     10 4E 05 51 |  if_ne	add	fp, #16
2b6fc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b700     10 4E 85 51 |  if_ne	sub	fp, #16
2b704                 | LR__4480
2b704     0C 4E 05 F1 | 	add	fp, #12
2b708     A7 18 C2 FA | 	rdbyte	arg04, fp
2b70c     0C 4E 85 F1 | 	sub	fp, #12
2b710     1C 18 CE F7 | 	test	arg04, #28 wz
2b714     F0 01 90 AD |  if_e	jmp	#LR__4485
2b718     10 4E 05 F1 | 	add	fp, #16
2b71c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b720     10 4E 85 F1 | 	sub	fp, #16
2b724     48 00 90 AD |  if_e	jmp	#LR__4482
2b728     10 4E 05 F1 | 	add	fp, #16
2b72c     A7 18 02 FB | 	rdlong	arg04, fp
2b730     10 4E 85 F1 | 	sub	fp, #16
2b734     04 18 0E F2 | 	cmp	arg04, #4 wz
2b738     1C 00 90 5D |  if_ne	jmp	#LR__4481
2b73c     14 4E 05 F1 | 	add	fp, #20
2b740     A7 12 02 F6 | 	mov	arg01, fp
2b744     14 4E 85 F1 | 	sub	fp, #20
2b748     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b74c     10 4E 05 F1 | 	add	fp, #16
2b750     A7 FA 61 FC | 	wrlong	result1, fp
2b754     10 4E 85 F1 | 	sub	fp, #16
2b758                 | LR__4481
2b758     0C 4E 05 F1 | 	add	fp, #12
2b75c     A7 1E C2 FA | 	rdbyte	local01, fp
2b760     08 1E 46 F5 | 	or	local01, #8
2b764     A7 1E 42 FC | 	wrbyte	local01, fp
2b768     0C 4E 85 F1 | 	sub	fp, #12
2b76c     3C 00 90 FD | 	jmp	#LR__4484
2b770                 | LR__4482
2b770     1A 4E 05 F1 | 	add	fp, #26
2b774     A7 1E C2 FA | 	rdbyte	local01, fp
2b778     1A 4E 85 F1 | 	sub	fp, #26
2b77c     11 1E CE F7 | 	test	local01, #17 wz
2b780     10 4E 05 51 |  if_ne	add	fp, #16
2b784     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b788     10 4E 85 51 |  if_ne	sub	fp, #16
2b78c     1C 00 90 5D |  if_ne	jmp	#LR__4483
2b790     0C 4E 05 F1 | 	add	fp, #12
2b794     A7 1E C2 FA | 	rdbyte	local01, fp
2b798     0C 4E 85 F1 | 	sub	fp, #12
2b79c     04 1E CE F7 | 	test	local01, #4 wz
2b7a0     10 4E 05 51 |  if_ne	add	fp, #16
2b7a4     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b7a8     10 4E 85 51 |  if_ne	sub	fp, #16
2b7ac                 | LR__4483
2b7ac                 | LR__4484
2b7ac     10 4E 05 F1 | 	add	fp, #16
2b7b0     A7 1E 0A FB | 	rdlong	local01, fp wz
2b7b4     10 4E 85 F1 | 	sub	fp, #16
2b7b8     A8 01 90 5D |  if_ne	jmp	#LR__4488
2b7bc     0C 4E 05 F1 | 	add	fp, #12
2b7c0     A7 1E C2 FA | 	rdbyte	local01, fp
2b7c4     0C 4E 85 F1 | 	sub	fp, #12
2b7c8     08 1E CE F7 | 	test	local01, #8 wz
2b7cc     94 01 90 AD |  if_e	jmp	#LR__4488
2b7d0     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b7d4     54 4E 05 F1 | 	add	fp, #84
2b7d8     A7 FA 61 FC | 	wrlong	result1, fp
2b7dc     24 4E 85 F1 | 	sub	fp, #36
2b7e0     A7 12 02 FB | 	rdlong	arg01, fp
2b7e4     0E 12 06 F1 | 	add	arg01, #14
2b7e8     09 FB 61 FC | 	wrlong	result1, arg01
2b7ec     A7 12 02 FB | 	rdlong	arg01, fp
2b7f0     16 12 06 F1 | 	add	arg01, #22
2b7f4     24 4E 05 F1 | 	add	fp, #36
2b7f8     A7 14 02 FB | 	rdlong	arg02, fp
2b7fc     09 15 62 FC | 	wrlong	arg02, arg01
2b800     10 4E 85 F1 | 	sub	fp, #16
2b804     A7 12 02 FB | 	rdlong	arg01, fp
2b808     14 4E 85 F1 | 	sub	fp, #20
2b80c     A7 14 02 FB | 	rdlong	arg02, fp
2b810     30 4E 85 F1 | 	sub	fp, #48
2b814     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b818     48 4E 05 F1 | 	add	fp, #72
2b81c     A7 FA 61 FC | 	wrlong	result1, fp
2b820     18 4E 85 F1 | 	sub	fp, #24
2b824     A7 1E 02 FB | 	rdlong	local01, fp
2b828     0B 1E 06 F1 | 	add	local01, #11
2b82c     0F 41 48 FC | 	wrbyte	#32, local01
2b830     14 4E 05 F1 | 	add	fp, #20
2b834     A7 12 02 FB | 	rdlong	arg01, fp
2b838     14 4E 85 F1 | 	sub	fp, #20
2b83c     A7 14 02 FB | 	rdlong	arg02, fp
2b840     30 4E 85 F1 | 	sub	fp, #48
2b844     00 16 06 F6 | 	mov	arg03, #0
2b848     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b84c     30 4E 05 F1 | 	add	fp, #48
2b850     A7 12 02 FB | 	rdlong	arg01, fp
2b854     1C 12 06 F1 | 	add	arg01, #28
2b858     09 01 68 FC | 	wrlong	#0, arg01
2b85c     14 4E 05 F1 | 	add	fp, #20
2b860     A7 1E 02 FB | 	rdlong	local01, fp
2b864     03 1E 06 F1 | 	add	local01, #3
2b868     0F 03 48 FC | 	wrbyte	#1, local01
2b86c     04 4E 05 F1 | 	add	fp, #4
2b870     A7 1E 0A FB | 	rdlong	local01, fp wz
2b874     48 4E 85 F1 | 	sub	fp, #72
2b878     E8 00 90 AD |  if_e	jmp	#LR__4488
2b87c     44 4E 05 F1 | 	add	fp, #68
2b880     A7 1E 02 FB | 	rdlong	local01, fp
2b884     30 1E 06 F1 | 	add	local01, #48
2b888     0F 1F 02 FB | 	rdlong	local01, local01
2b88c     14 4E 05 F1 | 	add	fp, #20
2b890     A7 1E 62 FC | 	wrlong	local01, fp
2b894     44 4E 85 F1 | 	sub	fp, #68
2b898     A7 12 02 F6 | 	mov	arg01, fp
2b89c     34 4E 05 F1 | 	add	fp, #52
2b8a0     A7 14 02 FB | 	rdlong	arg02, fp
2b8a4     48 4E 85 F1 | 	sub	fp, #72
2b8a8     00 16 06 F6 | 	mov	arg03, #0
2b8ac     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2b8b0     10 4E 05 F1 | 	add	fp, #16
2b8b4     A7 FA 61 FC | 	wrlong	result1, fp
2b8b8     10 4E 85 F1 | 	sub	fp, #16
2b8bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8c0     A0 00 90 5D |  if_ne	jmp	#LR__4488
2b8c4     44 4E 05 F1 | 	add	fp, #68
2b8c8     A7 12 02 FB | 	rdlong	arg01, fp
2b8cc     14 4E 05 F1 | 	add	fp, #20
2b8d0     A7 14 02 FB | 	rdlong	arg02, fp
2b8d4     58 4E 85 F1 | 	sub	fp, #88
2b8d8     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2b8dc     10 4E 05 F1 | 	add	fp, #16
2b8e0     A7 FA 61 FC | 	wrlong	result1, fp
2b8e4     34 4E 05 F1 | 	add	fp, #52
2b8e8     A7 18 02 FB | 	rdlong	arg04, fp
2b8ec     04 4E 05 F1 | 	add	fp, #4
2b8f0     A7 1E 02 FB | 	rdlong	local01, fp
2b8f4     48 4E 85 F1 | 	sub	fp, #72
2b8f8     01 1E 86 F1 | 	sub	local01, #1
2b8fc     10 18 06 F1 | 	add	arg04, #16
2b900     0C 1F 62 FC | 	wrlong	local01, arg04
2b904     5C 00 90 FD | 	jmp	#LR__4488
2b908                 | LR__4485
2b908     10 4E 05 F1 | 	add	fp, #16
2b90c     A7 18 0A FB | 	rdlong	arg04, fp wz
2b910     10 4E 85 F1 | 	sub	fp, #16
2b914     4C 00 90 5D |  if_ne	jmp	#LR__4487
2b918     1A 4E 05 F1 | 	add	fp, #26
2b91c     A7 18 C2 FA | 	rdbyte	arg04, fp
2b920     1A 4E 85 F1 | 	sub	fp, #26
2b924     10 18 CE F7 | 	test	arg04, #16 wz
2b928     10 4E 05 51 |  if_ne	add	fp, #16
2b92c     A7 08 68 5C |  if_ne	wrlong	#4, fp
2b930     10 4E 85 51 |  if_ne	sub	fp, #16
2b934     2C 00 90 5D |  if_ne	jmp	#LR__4486
2b938     0C 4E 05 F1 | 	add	fp, #12
2b93c     A7 18 C2 FA | 	rdbyte	arg04, fp
2b940     0C 4E 85 F1 | 	sub	fp, #12
2b944     02 18 CE F7 | 	test	arg04, #2 wz
2b948     1A 4E 05 51 |  if_ne	add	fp, #26
2b94c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2b950     1A 4E 85 51 |  if_ne	sub	fp, #26
2b954     01 1E CE 57 |  if_ne	test	local01, #1 wz
2b958     10 4E 05 51 |  if_ne	add	fp, #16
2b95c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b960     10 4E 85 51 |  if_ne	sub	fp, #16
2b964                 | LR__4486
2b964                 | LR__4487
2b964                 | LR__4488
2b964     10 4E 05 F1 | 	add	fp, #16
2b968     A7 1E 0A FB | 	rdlong	local01, fp wz
2b96c     10 4E 85 F1 | 	sub	fp, #16
2b970     60 00 90 5D |  if_ne	jmp	#LR__4489
2b974     0C 4E 05 F1 | 	add	fp, #12
2b978     A7 20 C2 FA | 	rdbyte	local02, fp
2b97c     0C 4E 85 F1 | 	sub	fp, #12
2b980     08 20 CE F7 | 	test	local02, #8 wz
2b984     0C 4E 05 51 |  if_ne	add	fp, #12
2b988     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2b98c     40 20 46 55 |  if_ne	or	local02, #64
2b990     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2b994     0C 4E 85 51 |  if_ne	sub	fp, #12
2b998     04 4E 05 F1 | 	add	fp, #4
2b99c     A7 20 02 FB | 	rdlong	local02, fp
2b9a0     40 4E 05 F1 | 	add	fp, #64
2b9a4     A7 1E 02 FB | 	rdlong	local01, fp
2b9a8     30 1E 06 F1 | 	add	local01, #48
2b9ac     0F 1F 02 FB | 	rdlong	local01, local01
2b9b0     20 20 06 F1 | 	add	local02, #32
2b9b4     10 1F 62 FC | 	wrlong	local01, local02
2b9b8     40 4E 85 F1 | 	sub	fp, #64
2b9bc     A7 20 02 FB | 	rdlong	local02, fp
2b9c0     2C 4E 05 F1 | 	add	fp, #44
2b9c4     A7 1E 02 FB | 	rdlong	local01, fp
2b9c8     30 4E 85 F1 | 	sub	fp, #48
2b9cc     24 20 06 F1 | 	add	local02, #36
2b9d0     10 1F 62 FC | 	wrlong	local01, local02
2b9d4                 | LR__4489
2b9d4     10 4E 05 F1 | 	add	fp, #16
2b9d8     A7 20 0A FB | 	rdlong	local02, fp wz
2b9dc     10 4E 85 F1 | 	sub	fp, #16
2b9e0     F4 02 90 5D |  if_ne	jmp	#LR__4495
2b9e4     04 4E 05 F1 | 	add	fp, #4
2b9e8     A7 20 02 FB | 	rdlong	local02, fp
2b9ec     40 4E 05 F1 | 	add	fp, #64
2b9f0     A7 12 02 FB | 	rdlong	arg01, fp
2b9f4     14 4E 85 F1 | 	sub	fp, #20
2b9f8     A7 14 02 FB | 	rdlong	arg02, fp
2b9fc     30 4E 85 F1 | 	sub	fp, #48
2ba00     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2ba04     08 20 06 F1 | 	add	local02, #8
2ba08     10 FB 61 FC | 	wrlong	result1, local02
2ba0c     04 4E 05 F1 | 	add	fp, #4
2ba10     A7 20 02 FB | 	rdlong	local02, fp
2ba14     2C 4E 05 F1 | 	add	fp, #44
2ba18     A7 12 02 FB | 	rdlong	arg01, fp
2ba1c     1C 12 06 F1 | 	add	arg01, #28
2ba20                 | ' {
2ba20                 | ' 
2ba20                 | ' 	return *((DWORD*)ptr);
2ba20     09 FB 01 FB | 	rdlong	result1, arg01
2ba24     0C 20 06 F1 | 	add	local02, #12
2ba28     10 FB 61 FC | 	wrlong	result1, local02
2ba2c     2C 4E 85 F1 | 	sub	fp, #44
2ba30     A7 20 02 FB | 	rdlong	local02, fp
2ba34     40 4E 05 F1 | 	add	fp, #64
2ba38     A7 1E 02 FB | 	rdlong	local01, fp
2ba3c     10 1F 62 FC | 	wrlong	local01, local02
2ba40     40 4E 85 F1 | 	sub	fp, #64
2ba44     A7 20 02 FB | 	rdlong	local02, fp
2ba48     40 4E 05 F1 | 	add	fp, #64
2ba4c     A7 1E 02 FB | 	rdlong	local01, fp
2ba50     06 1E 06 F1 | 	add	local01, #6
2ba54     0F 1F E2 FA | 	rdword	local01, local01
2ba58     04 20 06 F1 | 	add	local02, #4
2ba5c     10 1F 52 FC | 	wrword	local01, local02
2ba60     40 4E 85 F1 | 	sub	fp, #64
2ba64     A7 20 02 FB | 	rdlong	local02, fp
2ba68     08 4E 05 F1 | 	add	fp, #8
2ba6c     A7 1E C2 FA | 	rdbyte	local01, fp
2ba70     10 20 06 F1 | 	add	local02, #16
2ba74     10 1F 42 FC | 	wrbyte	local01, local02
2ba78     08 4E 85 F1 | 	sub	fp, #8
2ba7c     A7 20 02 FB | 	rdlong	local02, fp
2ba80     11 20 06 F1 | 	add	local02, #17
2ba84     10 01 48 FC | 	wrbyte	#0, local02
2ba88     A7 20 02 FB | 	rdlong	local02, fp
2ba8c     1C 20 06 F1 | 	add	local02, #28
2ba90     10 01 68 FC | 	wrlong	#0, local02
2ba94     A7 20 02 FB | 	rdlong	local02, fp
2ba98     14 20 06 F1 | 	add	local02, #20
2ba9c     10 01 68 FC | 	wrlong	#0, local02
2baa0     A7 12 02 FB | 	rdlong	arg01, fp
2baa4     04 4E 85 F1 | 	sub	fp, #4
2baa8     28 12 06 F1 | 	add	arg01, #40
2baac     00 14 06 F6 | 	mov	arg02, #0
2bab0     09 16 C6 F9 | 	decod	arg03, #9
2bab4     98 00 A0 FD | 	call	#\builtin_bytefill_
2bab8     0C 4E 05 F1 | 	add	fp, #12
2babc     A7 20 C2 FA | 	rdbyte	local02, fp
2bac0     0C 4E 85 F1 | 	sub	fp, #12
2bac4     20 20 CE F7 | 	test	local02, #32 wz
2bac8     0C 02 90 AD |  if_e	jmp	#LR__4494
2bacc     04 4E 05 F1 | 	add	fp, #4
2bad0     A7 1E 02 FB | 	rdlong	local01, fp
2bad4     04 4E 85 F1 | 	sub	fp, #4
2bad8     0C 1E 06 F1 | 	add	local01, #12
2badc     0F 21 02 FB | 	rdlong	local02, local01
2bae0     01 20 16 F2 | 	cmp	local02, #1 wc
2bae4     F0 01 90 CD |  if_b	jmp	#LR__4494
2bae8     04 4E 05 F1 | 	add	fp, #4
2baec     A7 1E 02 FB | 	rdlong	local01, fp
2baf0     0F 21 02 F6 | 	mov	local02, local01
2baf4     0C 1E 06 F1 | 	add	local01, #12
2baf8     0F 1F 02 FB | 	rdlong	local01, local01
2bafc     14 20 06 F1 | 	add	local02, #20
2bb00     10 1F 62 FC | 	wrlong	local01, local02
2bb04     40 4E 05 F1 | 	add	fp, #64
2bb08     A7 20 02 FB | 	rdlong	local02, fp
2bb0c     0A 20 06 F1 | 	add	local02, #10
2bb10     10 21 E2 FA | 	rdword	local02, local02
2bb14     09 20 66 F0 | 	shl	local02, #9
2bb18     08 4E 05 F1 | 	add	fp, #8
2bb1c     A7 20 62 FC | 	wrlong	local02, fp
2bb20     48 4E 85 F1 | 	sub	fp, #72
2bb24     A7 20 02 FB | 	rdlong	local02, fp
2bb28     08 20 06 F1 | 	add	local02, #8
2bb2c     10 1F 02 FB | 	rdlong	local01, local02
2bb30     4C 4E 05 F1 | 	add	fp, #76
2bb34     A7 1E 62 FC | 	wrlong	local01, fp
2bb38                 | ' 				fp->fptr = fp->obj.objsize;
2bb38                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bb38                 | ' 				clst = fp->obj.sclust;
2bb38                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bb38     4C 4E 85 F1 | 	sub	fp, #76
2bb3c     A7 20 02 FB | 	rdlong	local02, fp
2bb40     0C 20 06 F1 | 	add	local02, #12
2bb44     10 1F 02 FB | 	rdlong	local01, local02
2bb48     58 4E 05 F1 | 	add	fp, #88
2bb4c     A7 1E 62 FC | 	wrlong	local01, fp
2bb50     5C 4E 85 F1 | 	sub	fp, #92
2bb54                 | LR__4490
2bb54     10 4E 05 F1 | 	add	fp, #16
2bb58     A7 20 0A FB | 	rdlong	local02, fp wz
2bb5c     10 4E 85 F1 | 	sub	fp, #16
2bb60     94 00 90 5D |  if_ne	jmp	#LR__4491
2bb64     5C 4E 05 F1 | 	add	fp, #92
2bb68     A7 20 02 FB | 	rdlong	local02, fp
2bb6c     10 4E 85 F1 | 	sub	fp, #16
2bb70     A7 1E 02 FB | 	rdlong	local01, fp
2bb74     4C 4E 85 F1 | 	sub	fp, #76
2bb78     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bb7c     78 00 90 ED |  if_be	jmp	#LR__4491
2bb80     04 4E 05 F1 | 	add	fp, #4
2bb84     A7 12 02 FB | 	rdlong	arg01, fp
2bb88     4C 4E 05 F1 | 	add	fp, #76
2bb8c     A7 14 02 FB | 	rdlong	arg02, fp
2bb90     50 4E 85 F1 | 	sub	fp, #80
2bb94     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bb98     50 4E 05 F1 | 	add	fp, #80
2bb9c     A7 FA 61 FC | 	wrlong	result1, fp
2bba0     50 4E 85 F1 | 	sub	fp, #80
2bba4     02 FA 15 F2 | 	cmp	result1, #2 wc
2bba8     10 4E 05 C1 |  if_b	add	fp, #16
2bbac     A7 04 68 CC |  if_b	wrlong	#2, fp
2bbb0     10 4E 85 C1 |  if_b	sub	fp, #16
2bbb4     50 4E 05 F1 | 	add	fp, #80
2bbb8     A7 20 02 FB | 	rdlong	local02, fp
2bbbc     50 4E 85 F1 | 	sub	fp, #80
2bbc0     FF FF 7F FF 
2bbc4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bbc8     10 4E 05 A1 |  if_e	add	fp, #16
2bbcc     A7 02 68 AC |  if_e	wrlong	#1, fp
2bbd0     10 4E 85 A1 |  if_e	sub	fp, #16
2bbd4     5C 4E 05 F1 | 	add	fp, #92
2bbd8     A7 20 02 FB | 	rdlong	local02, fp
2bbdc     10 4E 85 F1 | 	sub	fp, #16
2bbe0     A7 1E 02 FB | 	rdlong	local01, fp
2bbe4     0F 21 82 F1 | 	sub	local02, local01
2bbe8     10 4E 05 F1 | 	add	fp, #16
2bbec     A7 20 62 FC | 	wrlong	local02, fp
2bbf0     5C 4E 85 F1 | 	sub	fp, #92
2bbf4     5C FF 9F FD | 	jmp	#LR__4490
2bbf8                 | LR__4491
2bbf8     04 4E 05 F1 | 	add	fp, #4
2bbfc     A7 20 02 FB | 	rdlong	local02, fp
2bc00     4C 4E 05 F1 | 	add	fp, #76
2bc04     A7 1E 02 FB | 	rdlong	local01, fp
2bc08     18 20 06 F1 | 	add	local02, #24
2bc0c     10 1F 62 FC | 	wrlong	local01, local02
2bc10     40 4E 85 F1 | 	sub	fp, #64
2bc14     A7 20 0A FB | 	rdlong	local02, fp wz
2bc18     10 4E 85 F1 | 	sub	fp, #16
2bc1c     B8 00 90 5D |  if_ne	jmp	#LR__4493
2bc20     5C 4E 05 F1 | 	add	fp, #92
2bc24     A7 1E 02 FB | 	rdlong	local01, fp
2bc28     5C 4E 85 F1 | 	sub	fp, #92
2bc2c     FF 1F CE F7 | 	test	local01, #511 wz
2bc30     A4 00 90 AD |  if_e	jmp	#LR__4493
2bc34     44 4E 05 F1 | 	add	fp, #68
2bc38     A7 12 02 FB | 	rdlong	arg01, fp
2bc3c     0C 4E 05 F1 | 	add	fp, #12
2bc40     A7 14 02 FB | 	rdlong	arg02, fp
2bc44     50 4E 85 F1 | 	sub	fp, #80
2bc48     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bc4c     58 4E 05 F1 | 	add	fp, #88
2bc50     A7 FA 61 FC | 	wrlong	result1, fp
2bc54     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc58     58 4E 85 F1 | 	sub	fp, #88
2bc5c     10 4E 05 A1 |  if_e	add	fp, #16
2bc60     A7 04 68 AC |  if_e	wrlong	#2, fp
2bc64     10 4E 85 A1 |  if_e	sub	fp, #16
2bc68     6C 00 90 AD |  if_e	jmp	#LR__4492
2bc6c     04 4E 05 F1 | 	add	fp, #4
2bc70     A7 20 02 FB | 	rdlong	local02, fp
2bc74     54 4E 05 F1 | 	add	fp, #84
2bc78     A7 1E 02 FB | 	rdlong	local01, fp
2bc7c     04 4E 05 F1 | 	add	fp, #4
2bc80     A7 18 02 FB | 	rdlong	arg04, fp
2bc84     09 18 46 F0 | 	shr	arg04, #9
2bc88     0C 1F 02 F1 | 	add	local01, arg04
2bc8c     1C 20 06 F1 | 	add	local02, #28
2bc90     10 1F 62 FC | 	wrlong	local01, local02
2bc94     18 4E 85 F1 | 	sub	fp, #24
2bc98     A7 20 02 FB | 	rdlong	local02, fp
2bc9c     01 20 06 F1 | 	add	local02, #1
2bca0     10 13 C2 FA | 	rdbyte	arg01, local02
2bca4     40 4E 85 F1 | 	sub	fp, #64
2bca8     A7 20 02 FB | 	rdlong	local02, fp
2bcac     10 15 02 F6 | 	mov	arg02, local02
2bcb0     28 14 06 F1 | 	add	arg02, #40
2bcb4     04 4E 85 F1 | 	sub	fp, #4
2bcb8     1C 20 06 F1 | 	add	local02, #28
2bcbc     10 17 02 FB | 	rdlong	arg03, local02
2bcc0     01 18 06 F6 | 	mov	arg04, #1
2bcc4     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bcc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bccc     10 4E 05 51 |  if_ne	add	fp, #16
2bcd0     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bcd4     10 4E 85 51 |  if_ne	sub	fp, #16
2bcd8                 | LR__4492
2bcd8                 | LR__4493
2bcd8                 | LR__4494
2bcd8                 | LR__4495
2bcd8                 | LR__4496
2bcd8     10 4E 05 F1 | 	add	fp, #16
2bcdc     A7 20 0A FB | 	rdlong	local02, fp wz
2bce0     10 4E 85 F1 | 	sub	fp, #16
2bce4     04 4E 05 51 |  if_ne	add	fp, #4
2bce8     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bcec     04 4E 85 51 |  if_ne	sub	fp, #4
2bcf0     10 01 68 5C |  if_ne	wrlong	#0, local02
2bcf4                 | ' 
2bcf4                 | ' 	return res ;
2bcf4     10 4E 05 F1 | 	add	fp, #16
2bcf8     A7 FA 01 FB | 	rdlong	result1, fp
2bcfc     10 4E 85 F1 | 	sub	fp, #16
2bd00                 | LR__4497
2bd00     A7 F0 03 F6 | 	mov	ptra, fp
2bd04     B2 00 A0 FD | 	call	#popregs_
2bd08                 | _fatfs_cc_f_open_ret
2bd08     2D 00 64 FD | 	ret
2bd0c                 | 
2bd0c                 | _fatfs_cc_f_read
2bd0c     0E 4A 05 F6 | 	mov	COUNT_, #14
2bd10     A8 00 A0 FD | 	call	#pushregs_
2bd14     38 F0 07 F1 | 	add	ptra, #56
2bd18     04 4E 05 F1 | 	add	fp, #4
2bd1c     A7 12 62 FC | 	wrlong	arg01, fp
2bd20     04 4E 05 F1 | 	add	fp, #4
2bd24     A7 14 62 FC | 	wrlong	arg02, fp
2bd28     04 4E 05 F1 | 	add	fp, #4
2bd2c     A7 16 62 FC | 	wrlong	arg03, fp
2bd30     04 4E 05 F1 | 	add	fp, #4
2bd34     A7 18 62 FC | 	wrlong	arg04, fp
2bd38     08 4E 85 F1 | 	sub	fp, #8
2bd3c     A7 FA 01 FB | 	rdlong	result1, fp
2bd40     2C 4E 05 F1 | 	add	fp, #44
2bd44     A7 FA 61 FC | 	wrlong	result1, fp
2bd48     24 4E 85 F1 | 	sub	fp, #36
2bd4c     A7 FA 01 FB | 	rdlong	result1, fp
2bd50     FD 00 68 FC | 	wrlong	#0, result1
2bd54     0C 4E 85 F1 | 	sub	fp, #12
2bd58     A7 12 02 FB | 	rdlong	arg01, fp
2bd5c     14 4E 05 F1 | 	add	fp, #20
2bd60     A7 14 02 F6 | 	mov	arg02, fp
2bd64     18 4E 85 F1 | 	sub	fp, #24
2bd68     24 F7 BF FD | 	call	#_fatfs_cc_validate
2bd6c     14 4E 05 F1 | 	add	fp, #20
2bd70     A7 FA 61 FC | 	wrlong	result1, fp
2bd74     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd78     14 4E 85 F1 | 	sub	fp, #20
2bd7c     20 00 90 5D |  if_ne	jmp	#LR__4500
2bd80     04 4E 05 F1 | 	add	fp, #4
2bd84     A7 14 02 FB | 	rdlong	arg02, fp
2bd88     11 14 06 F1 | 	add	arg02, #17
2bd8c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2bd90     10 4E 05 F1 | 	add	fp, #16
2bd94     A7 14 62 FC | 	wrlong	arg02, fp
2bd98     14 4E 85 F1 | 	sub	fp, #20
2bd9c     10 00 90 AD |  if_e	jmp	#LR__4501
2bda0                 | LR__4500
2bda0     14 4E 05 F1 | 	add	fp, #20
2bda4     A7 FA 01 FB | 	rdlong	result1, fp
2bda8     14 4E 85 F1 | 	sub	fp, #20
2bdac     EC 05 90 FD | 	jmp	#LR__4520
2bdb0                 | LR__4501
2bdb0     04 4E 05 F1 | 	add	fp, #4
2bdb4     A7 18 02 FB | 	rdlong	arg04, fp
2bdb8     04 4E 85 F1 | 	sub	fp, #4
2bdbc     10 18 06 F1 | 	add	arg04, #16
2bdc0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bdc4     01 18 CE F7 | 	test	arg04, #1 wz
2bdc8     07 FA 05 A6 |  if_e	mov	result1, #7
2bdcc     CC 05 90 AD |  if_e	jmp	#LR__4520
2bdd0     04 4E 05 F1 | 	add	fp, #4
2bdd4     A7 1E 02 FB | 	rdlong	local01, fp
2bdd8     0F 21 02 F6 | 	mov	local02, local01
2bddc     0C 20 06 F1 | 	add	local02, #12
2bde0     10 23 02 FB | 	rdlong	local03, local02
2bde4     14 1E 06 F1 | 	add	local01, #20
2bde8     0F 1F 02 FB | 	rdlong	local01, local01
2bdec     0F 23 82 F1 | 	sub	local03, local01
2bdf0     20 4E 05 F1 | 	add	fp, #32
2bdf4     A7 22 62 FC | 	wrlong	local03, fp
2bdf8     18 4E 85 F1 | 	sub	fp, #24
2bdfc     A7 24 02 FB | 	rdlong	local04, fp
2be00     0C 4E 85 F1 | 	sub	fp, #12
2be04     11 25 1A F2 | 	cmp	local04, local03 wcz
2be08     24 4E 05 11 |  if_a	add	fp, #36
2be0c     A7 24 02 1B |  if_a	rdlong	local04, fp
2be10     18 4E 85 11 |  if_a	sub	fp, #24
2be14     A7 24 62 1C |  if_a	wrlong	local04, fp
2be18     0C 4E 85 11 |  if_a	sub	fp, #12
2be1c                 | ' 
2be1c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2be1c                 | LR__4502
2be1c     0C 4E 05 F1 | 	add	fp, #12
2be20     A7 20 02 FB | 	rdlong	local02, fp
2be24     0C 4E 85 F1 | 	sub	fp, #12
2be28     10 25 02 F6 | 	mov	local04, local02
2be2c     01 24 16 F2 | 	cmp	local04, #1 wc
2be30     64 05 90 CD |  if_b	jmp	#LR__4519
2be34     04 4E 05 F1 | 	add	fp, #4
2be38     A7 22 02 FB | 	rdlong	local03, fp
2be3c     04 4E 85 F1 | 	sub	fp, #4
2be40     14 22 06 F1 | 	add	local03, #20
2be44     11 23 02 FB | 	rdlong	local03, local03
2be48     FF 23 CE F7 | 	test	local03, #511 wz
2be4c     3C 04 90 5D |  if_ne	jmp	#LR__4517
2be50     04 4E 05 F1 | 	add	fp, #4
2be54     A7 1E 02 FB | 	rdlong	local01, fp
2be58     14 1E 06 F1 | 	add	local01, #20
2be5c     0F 23 02 FB | 	rdlong	local03, local01
2be60     09 22 46 F0 | 	shr	local03, #9
2be64     14 4E 05 F1 | 	add	fp, #20
2be68     A7 26 02 FB | 	rdlong	local05, fp
2be6c     13 29 02 F6 | 	mov	local06, local05
2be70     0A 28 06 F1 | 	add	local06, #10
2be74     14 2B E2 FA | 	rdword	local07, local06
2be78     0A 28 86 F1 | 	sub	local06, #10
2be7c     15 2D 32 F9 | 	getword	local08, local07, #0
2be80     01 2C 86 F1 | 	sub	local08, #1
2be84     16 23 0A F5 | 	and	local03, local08 wz
2be88     18 4E 05 F1 | 	add	fp, #24
2be8c     A7 22 62 FC | 	wrlong	local03, fp
2be90     30 4E 85 F1 | 	sub	fp, #48
2be94     E0 00 90 5D |  if_ne	jmp	#LR__4507
2be98     04 4E 05 F1 | 	add	fp, #4
2be9c     A7 22 02 FB | 	rdlong	local03, fp
2bea0     04 4E 85 F1 | 	sub	fp, #4
2bea4     14 22 06 F1 | 	add	local03, #20
2bea8     11 23 0A FB | 	rdlong	local03, local03 wz
2beac     20 00 90 5D |  if_ne	jmp	#LR__4503
2beb0     04 4E 05 F1 | 	add	fp, #4
2beb4     A7 22 02 FB | 	rdlong	local03, fp
2beb8     08 22 06 F1 | 	add	local03, #8
2bebc     11 23 02 FB | 	rdlong	local03, local03
2bec0     18 4E 05 F1 | 	add	fp, #24
2bec4     A7 22 62 FC | 	wrlong	local03, fp
2bec8     1C 4E 85 F1 | 	sub	fp, #28
2becc     28 00 90 FD | 	jmp	#LR__4504
2bed0                 | LR__4503
2bed0     04 4E 05 F1 | 	add	fp, #4
2bed4     A7 2C 02 FB | 	rdlong	local08, fp
2bed8     16 13 02 F6 | 	mov	arg01, local08
2bedc     04 4E 85 F1 | 	sub	fp, #4
2bee0     18 2C 06 F1 | 	add	local08, #24
2bee4     16 15 02 FB | 	rdlong	arg02, local08
2bee8     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2beec     1C 4E 05 F1 | 	add	fp, #28
2bef0     A7 FA 61 FC | 	wrlong	result1, fp
2bef4     1C 4E 85 F1 | 	sub	fp, #28
2bef8                 | LR__4504
2bef8     1C 4E 05 F1 | 	add	fp, #28
2befc     A7 22 02 FB | 	rdlong	local03, fp
2bf00     1C 4E 85 F1 | 	sub	fp, #28
2bf04     02 22 16 F2 | 	cmp	local03, #2 wc
2bf08     1C 00 90 3D |  if_ae	jmp	#LR__4505
2bf0c     04 4E 05 F1 | 	add	fp, #4
2bf10     A7 22 02 FB | 	rdlong	local03, fp
2bf14     04 4E 85 F1 | 	sub	fp, #4
2bf18     11 22 06 F1 | 	add	local03, #17
2bf1c     11 05 48 FC | 	wrbyte	#2, local03
2bf20     02 FA 05 F6 | 	mov	result1, #2
2bf24     74 04 90 FD | 	jmp	#LR__4520
2bf28                 | LR__4505
2bf28     1C 4E 05 F1 | 	add	fp, #28
2bf2c     A7 22 02 FB | 	rdlong	local03, fp
2bf30     1C 4E 85 F1 | 	sub	fp, #28
2bf34     FF FF 7F FF 
2bf38     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2bf3c     1C 00 90 5D |  if_ne	jmp	#LR__4506
2bf40     04 4E 05 F1 | 	add	fp, #4
2bf44     A7 22 02 FB | 	rdlong	local03, fp
2bf48     04 4E 85 F1 | 	sub	fp, #4
2bf4c     11 22 06 F1 | 	add	local03, #17
2bf50     11 03 48 FC | 	wrbyte	#1, local03
2bf54     01 FA 05 F6 | 	mov	result1, #1
2bf58     40 04 90 FD | 	jmp	#LR__4520
2bf5c                 | LR__4506
2bf5c     04 4E 05 F1 | 	add	fp, #4
2bf60     A7 22 02 FB | 	rdlong	local03, fp
2bf64     18 4E 05 F1 | 	add	fp, #24
2bf68     A7 2C 02 FB | 	rdlong	local08, fp
2bf6c     1C 4E 85 F1 | 	sub	fp, #28
2bf70     18 22 06 F1 | 	add	local03, #24
2bf74     11 2D 62 FC | 	wrlong	local08, local03
2bf78                 | LR__4507
2bf78     18 4E 05 F1 | 	add	fp, #24
2bf7c     A7 12 02 FB | 	rdlong	arg01, fp
2bf80     14 4E 85 F1 | 	sub	fp, #20
2bf84     A7 22 02 FB | 	rdlong	local03, fp
2bf88     04 4E 85 F1 | 	sub	fp, #4
2bf8c     18 22 06 F1 | 	add	local03, #24
2bf90     11 15 02 FB | 	rdlong	arg02, local03
2bf94     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2bf98     20 4E 05 F1 | 	add	fp, #32
2bf9c     A7 FA 61 FC | 	wrlong	result1, fp
2bfa0     20 4E 85 F1 | 	sub	fp, #32
2bfa4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bfa8     1C 00 90 5D |  if_ne	jmp	#LR__4508
2bfac     04 4E 05 F1 | 	add	fp, #4
2bfb0     A7 22 02 FB | 	rdlong	local03, fp
2bfb4     04 4E 85 F1 | 	sub	fp, #4
2bfb8     11 22 06 F1 | 	add	local03, #17
2bfbc     11 05 48 FC | 	wrbyte	#2, local03
2bfc0     02 FA 05 F6 | 	mov	result1, #2
2bfc4     D4 03 90 FD | 	jmp	#LR__4520
2bfc8                 | LR__4508
2bfc8     20 4E 05 F1 | 	add	fp, #32
2bfcc     A7 22 02 FB | 	rdlong	local03, fp
2bfd0     10 4E 05 F1 | 	add	fp, #16
2bfd4     A7 2C 02 FB | 	rdlong	local08, fp
2bfd8     16 23 02 F1 | 	add	local03, local08
2bfdc     10 4E 85 F1 | 	sub	fp, #16
2bfe0     A7 22 62 FC | 	wrlong	local03, fp
2bfe4     14 4E 85 F1 | 	sub	fp, #20
2bfe8     A7 22 02 FB | 	rdlong	local03, fp
2bfec     09 22 46 F0 | 	shr	local03, #9
2bff0     20 4E 05 F1 | 	add	fp, #32
2bff4     A7 22 62 FC | 	wrlong	local03, fp
2bff8     2C 4E 85 F1 | 	sub	fp, #44
2bffc     01 22 16 F2 | 	cmp	local03, #1 wc
2c000     5C 01 90 CD |  if_b	jmp	#LR__4512
2c004     30 4E 05 F1 | 	add	fp, #48
2c008     A7 22 02 FB | 	rdlong	local03, fp
2c00c     04 4E 85 F1 | 	sub	fp, #4
2c010     A7 2C 02 FB | 	rdlong	local08, fp
2c014     16 23 02 F1 | 	add	local03, local08
2c018     14 4E 85 F1 | 	sub	fp, #20
2c01c     A7 2C 02 FB | 	rdlong	local08, fp
2c020     18 4E 85 F1 | 	sub	fp, #24
2c024     0A 2C 06 F1 | 	add	local08, #10
2c028     16 2D E2 FA | 	rdword	local08, local08
2c02c     16 23 1A F2 | 	cmp	local03, local08 wcz
2c030     28 00 90 ED |  if_be	jmp	#LR__4509
2c034     18 4E 05 F1 | 	add	fp, #24
2c038     A7 1E 02 FB | 	rdlong	local01, fp
2c03c     0A 1E 06 F1 | 	add	local01, #10
2c040     0F 23 E2 FA | 	rdword	local03, local01
2c044     18 4E 05 F1 | 	add	fp, #24
2c048     A7 2C 02 FB | 	rdlong	local08, fp
2c04c     16 23 82 F1 | 	sub	local03, local08
2c050     04 4E 85 F1 | 	sub	fp, #4
2c054     A7 22 62 FC | 	wrlong	local03, fp
2c058     2C 4E 85 F1 | 	sub	fp, #44
2c05c                 | LR__4509
2c05c     18 4E 05 F1 | 	add	fp, #24
2c060     A7 1E 02 FB | 	rdlong	local01, fp
2c064     01 1E 06 F1 | 	add	local01, #1
2c068     0F 13 C2 FA | 	rdbyte	arg01, local01
2c06c     1C 4E 05 F1 | 	add	fp, #28
2c070     A7 14 02 FB | 	rdlong	arg02, fp
2c074     14 4E 85 F1 | 	sub	fp, #20
2c078     A7 16 02 FB | 	rdlong	arg03, fp
2c07c     0C 4E 05 F1 | 	add	fp, #12
2c080     A7 18 02 FB | 	rdlong	arg04, fp
2c084     2C 4E 85 F1 | 	sub	fp, #44
2c088     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c08c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c090     1C 00 90 AD |  if_e	jmp	#LR__4510
2c094     04 4E 05 F1 | 	add	fp, #4
2c098     A7 22 02 FB | 	rdlong	local03, fp
2c09c     04 4E 85 F1 | 	sub	fp, #4
2c0a0     11 22 06 F1 | 	add	local03, #17
2c0a4     11 03 48 FC | 	wrbyte	#1, local03
2c0a8     01 FA 05 F6 | 	mov	result1, #1
2c0ac     EC 02 90 FD | 	jmp	#LR__4520
2c0b0                 | LR__4510
2c0b0     04 4E 05 F1 | 	add	fp, #4
2c0b4     A7 1E 02 FB | 	rdlong	local01, fp
2c0b8     04 4E 85 F1 | 	sub	fp, #4
2c0bc     10 1E 06 F1 | 	add	local01, #16
2c0c0     0F 23 C2 FA | 	rdbyte	local03, local01
2c0c4     80 22 CE F7 | 	test	local03, #128 wz
2c0c8     78 00 90 AD |  if_e	jmp	#LR__4511
2c0cc     04 4E 05 F1 | 	add	fp, #4
2c0d0     A7 2C 02 FB | 	rdlong	local08, fp
2c0d4     1C 2C 06 F1 | 	add	local08, #28
2c0d8     16 2D 02 FB | 	rdlong	local08, local08
2c0dc     1C 4E 05 F1 | 	add	fp, #28
2c0e0     A7 2E 02 FB | 	rdlong	local09, fp
2c0e4     17 2D 82 F1 | 	sub	local08, local09
2c0e8     0C 4E 05 F1 | 	add	fp, #12
2c0ec     A7 30 02 FB | 	rdlong	local10, fp
2c0f0     2C 4E 85 F1 | 	sub	fp, #44
2c0f4     18 33 02 F6 | 	mov	local11, local10
2c0f8     19 2D 12 F2 | 	cmp	local08, local11 wc
2c0fc     44 00 90 3D |  if_ae	jmp	#LR__4511
2c100     34 4E 05 F1 | 	add	fp, #52
2c104     A7 12 02 FB | 	rdlong	arg01, fp
2c108     30 4E 85 F1 | 	sub	fp, #48
2c10c     A7 14 02 FB | 	rdlong	arg02, fp
2c110     0A 33 02 F6 | 	mov	local11, arg02
2c114     1C 32 06 F1 | 	add	local11, #28
2c118     19 2F 02 FB | 	rdlong	local09, local11
2c11c     1C 4E 05 F1 | 	add	fp, #28
2c120     A7 26 02 FB | 	rdlong	local05, fp
2c124     13 2F 82 F1 | 	sub	local09, local05
2c128     09 2E 66 F0 | 	shl	local09, #9
2c12c     17 33 02 F6 | 	mov	local11, local09
2c130     17 13 02 F1 | 	add	arg01, local09
2c134     20 4E 85 F1 | 	sub	fp, #32
2c138     28 14 06 F1 | 	add	arg02, #40
2c13c     09 16 C6 F9 | 	decod	arg03, #9
2c140     28 46 BF FD | 	call	#__system____builtin_memmove
2c144                 | LR__4511
2c144     2C 4E 05 F1 | 	add	fp, #44
2c148     A7 22 02 FB | 	rdlong	local03, fp
2c14c     09 22 66 F0 | 	shl	local03, #9
2c150     04 4E 85 F1 | 	sub	fp, #4
2c154     A7 22 62 FC | 	wrlong	local03, fp
2c158     28 4E 85 F1 | 	sub	fp, #40
2c15c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c15c                 | ' 				}
2c15c                 | ' 
2c15c                 | ' 
2c15c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c15c                 | ' 				continue;
2c15c     B4 01 90 FD | 	jmp	#LR__4518
2c160                 | LR__4512
2c160     04 4E 05 F1 | 	add	fp, #4
2c164     A7 22 02 FB | 	rdlong	local03, fp
2c168     1C 22 06 F1 | 	add	local03, #28
2c16c     11 23 02 FB | 	rdlong	local03, local03
2c170     1C 4E 05 F1 | 	add	fp, #28
2c174     A7 1E 02 FB | 	rdlong	local01, fp
2c178     20 4E 85 F1 | 	sub	fp, #32
2c17c     0F 23 0A F2 | 	cmp	local03, local01 wz
2c180     EC 00 90 AD |  if_e	jmp	#LR__4516
2c184     04 4E 05 F1 | 	add	fp, #4
2c188     A7 1E 02 FB | 	rdlong	local01, fp
2c18c     04 4E 85 F1 | 	sub	fp, #4
2c190     10 1E 06 F1 | 	add	local01, #16
2c194     0F 23 C2 FA | 	rdbyte	local03, local01
2c198     80 22 CE F7 | 	test	local03, #128 wz
2c19c     7C 00 90 AD |  if_e	jmp	#LR__4514
2c1a0     18 4E 05 F1 | 	add	fp, #24
2c1a4     A7 1E 02 FB | 	rdlong	local01, fp
2c1a8     01 1E 06 F1 | 	add	local01, #1
2c1ac     0F 13 C2 FA | 	rdbyte	arg01, local01
2c1b0     14 4E 85 F1 | 	sub	fp, #20
2c1b4     A7 22 02 FB | 	rdlong	local03, fp
2c1b8     11 15 02 F6 | 	mov	arg02, local03
2c1bc     28 14 06 F1 | 	add	arg02, #40
2c1c0     04 4E 85 F1 | 	sub	fp, #4
2c1c4     1C 22 06 F1 | 	add	local03, #28
2c1c8     11 17 02 FB | 	rdlong	arg03, local03
2c1cc     01 18 06 F6 | 	mov	arg04, #1
2c1d0     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1d8     1C 00 90 AD |  if_e	jmp	#LR__4513
2c1dc     04 4E 05 F1 | 	add	fp, #4
2c1e0     A7 22 02 FB | 	rdlong	local03, fp
2c1e4     04 4E 85 F1 | 	sub	fp, #4
2c1e8     11 22 06 F1 | 	add	local03, #17
2c1ec     11 03 48 FC | 	wrbyte	#1, local03
2c1f0     01 FA 05 F6 | 	mov	result1, #1
2c1f4     A4 01 90 FD | 	jmp	#LR__4520
2c1f8                 | LR__4513
2c1f8     04 4E 05 F1 | 	add	fp, #4
2c1fc     A7 32 02 FB | 	rdlong	local11, fp
2c200     19 23 02 F6 | 	mov	local03, local11
2c204     04 4E 85 F1 | 	sub	fp, #4
2c208     10 32 06 F1 | 	add	local11, #16
2c20c     19 33 C2 FA | 	rdbyte	local11, local11
2c210     7F 32 06 F5 | 	and	local11, #127
2c214     10 22 06 F1 | 	add	local03, #16
2c218     11 33 42 FC | 	wrbyte	local11, local03
2c21c                 | LR__4514
2c21c     18 4E 05 F1 | 	add	fp, #24
2c220     A7 1E 02 FB | 	rdlong	local01, fp
2c224     01 1E 06 F1 | 	add	local01, #1
2c228     0F 13 C2 FA | 	rdbyte	arg01, local01
2c22c     14 4E 85 F1 | 	sub	fp, #20
2c230     A7 14 02 FB | 	rdlong	arg02, fp
2c234     28 14 06 F1 | 	add	arg02, #40
2c238     1C 4E 05 F1 | 	add	fp, #28
2c23c     A7 16 02 FB | 	rdlong	arg03, fp
2c240     20 4E 85 F1 | 	sub	fp, #32
2c244     01 18 06 F6 | 	mov	arg04, #1
2c248     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c24c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c250     1C 00 90 AD |  if_e	jmp	#LR__4515
2c254     04 4E 05 F1 | 	add	fp, #4
2c258     A7 22 02 FB | 	rdlong	local03, fp
2c25c     04 4E 85 F1 | 	sub	fp, #4
2c260     11 22 06 F1 | 	add	local03, #17
2c264     11 03 48 FC | 	wrbyte	#1, local03
2c268     01 FA 05 F6 | 	mov	result1, #1
2c26c     2C 01 90 FD | 	jmp	#LR__4520
2c270                 | LR__4515
2c270                 | LR__4516
2c270     04 4E 05 F1 | 	add	fp, #4
2c274     A7 22 02 FB | 	rdlong	local03, fp
2c278     1C 4E 05 F1 | 	add	fp, #28
2c27c     A7 32 02 FB | 	rdlong	local11, fp
2c280     20 4E 85 F1 | 	sub	fp, #32
2c284     1C 22 06 F1 | 	add	local03, #28
2c288     11 33 62 FC | 	wrlong	local11, local03
2c28c                 | LR__4517
2c28c     04 4E 05 F1 | 	add	fp, #4
2c290     A7 1E 02 FB | 	rdlong	local01, fp
2c294     14 1E 06 F1 | 	add	local01, #20
2c298     0F 33 02 FB | 	rdlong	local11, local01
2c29c     FF 33 06 F5 | 	and	local11, #511
2c2a0     09 22 C6 F9 | 	decod	local03, #9
2c2a4     19 23 82 F1 | 	sub	local03, local11
2c2a8     24 4E 05 F1 | 	add	fp, #36
2c2ac     A7 22 62 FC | 	wrlong	local03, fp
2c2b0     1C 4E 85 F1 | 	sub	fp, #28
2c2b4     A7 32 02 FB | 	rdlong	local11, fp
2c2b8     0C 4E 85 F1 | 	sub	fp, #12
2c2bc     19 23 1A F2 | 	cmp	local03, local11 wcz
2c2c0     0C 4E 05 11 |  if_a	add	fp, #12
2c2c4     A7 22 02 1B |  if_a	rdlong	local03, fp
2c2c8     1C 4E 05 11 |  if_a	add	fp, #28
2c2cc     A7 22 62 1C |  if_a	wrlong	local03, fp
2c2d0     28 4E 85 11 |  if_a	sub	fp, #40
2c2d4     34 4E 05 F1 | 	add	fp, #52
2c2d8     A7 12 02 FB | 	rdlong	arg01, fp
2c2dc     30 4E 85 F1 | 	sub	fp, #48
2c2e0     A7 28 02 FB | 	rdlong	local06, fp
2c2e4     14 15 02 F6 | 	mov	arg02, local06
2c2e8     28 14 06 F1 | 	add	arg02, #40
2c2ec     14 28 06 F1 | 	add	local06, #20
2c2f0     14 33 02 FB | 	rdlong	local11, local06
2c2f4     19 2F 02 F6 | 	mov	local09, local11
2c2f8     17 31 02 F6 | 	mov	local10, local09
2c2fc     FF 31 06 F5 | 	and	local10, #511
2c300     18 15 02 F1 | 	add	arg02, local10
2c304     24 4E 05 F1 | 	add	fp, #36
2c308     A7 16 02 FB | 	rdlong	arg03, fp
2c30c     28 4E 85 F1 | 	sub	fp, #40
2c310     58 44 BF FD | 	call	#__system____builtin_memmove
2c314                 | LR__4518
2c314     0C 4E 05 F1 | 	add	fp, #12
2c318     A7 22 02 FB | 	rdlong	local03, fp
2c31c     1C 4E 05 F1 | 	add	fp, #28
2c320     A7 2C 02 FB | 	rdlong	local08, fp
2c324     16 23 82 F1 | 	sub	local03, local08
2c328     1C 4E 85 F1 | 	sub	fp, #28
2c32c     A7 22 62 FC | 	wrlong	local03, fp
2c330     04 4E 05 F1 | 	add	fp, #4
2c334     A7 1E 02 FB | 	rdlong	local01, fp
2c338     0F 2B 02 FB | 	rdlong	local07, local01
2c33c     18 4E 05 F1 | 	add	fp, #24
2c340     A7 2C 02 FB | 	rdlong	local08, fp
2c344     16 2B 02 F1 | 	add	local07, local08
2c348     0F 2B 62 FC | 	wrlong	local07, local01
2c34c     0C 4E 05 F1 | 	add	fp, #12
2c350     A7 22 02 FB | 	rdlong	local03, fp
2c354     0C 4E 85 F1 | 	sub	fp, #12
2c358     A7 34 02 FB | 	rdlong	local12, fp
2c35c     1A 23 02 F1 | 	add	local03, local12
2c360     0C 4E 05 F1 | 	add	fp, #12
2c364     A7 22 62 FC | 	wrlong	local03, fp
2c368     30 4E 85 F1 | 	sub	fp, #48
2c36c     A7 36 02 FB | 	rdlong	local13, fp
2c370     1B 23 02 F6 | 	mov	local03, local13
2c374     14 36 06 F1 | 	add	local13, #20
2c378     1B 39 02 FB | 	rdlong	local14, local13
2c37c     24 4E 05 F1 | 	add	fp, #36
2c380     A7 28 02 FB | 	rdlong	local06, fp
2c384     28 4E 85 F1 | 	sub	fp, #40
2c388     14 39 02 F1 | 	add	local14, local06
2c38c     14 22 06 F1 | 	add	local03, #20
2c390     11 39 62 FC | 	wrlong	local14, local03
2c394     84 FA 9F FD | 	jmp	#LR__4502
2c398                 | LR__4519
2c398                 | ' 
2c398                 | ' 
2c398                 | ' 
2c398                 | ' 
2c398                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c398                 | ' 
2c398                 | ' 	}
2c398                 | ' 
2c398                 | ' 	return FR_OK ;
2c398     00 FA 05 F6 | 	mov	result1, #0
2c39c                 | LR__4520
2c39c     A7 F0 03 F6 | 	mov	ptra, fp
2c3a0     B2 00 A0 FD | 	call	#popregs_
2c3a4                 | _fatfs_cc_f_read_ret
2c3a4     2D 00 64 FD | 	ret
2c3a8                 | 
2c3a8                 | _fatfs_cc_f_write
2c3a8     15 4A 05 F6 | 	mov	COUNT_, #21
2c3ac     A8 00 A0 FD | 	call	#pushregs_
2c3b0     34 F0 07 F1 | 	add	ptra, #52
2c3b4     04 4E 05 F1 | 	add	fp, #4
2c3b8     A7 12 62 FC | 	wrlong	arg01, fp
2c3bc     04 4E 05 F1 | 	add	fp, #4
2c3c0     A7 14 62 FC | 	wrlong	arg02, fp
2c3c4     04 4E 05 F1 | 	add	fp, #4
2c3c8     A7 16 62 FC | 	wrlong	arg03, fp
2c3cc     04 4E 05 F1 | 	add	fp, #4
2c3d0     A7 18 62 FC | 	wrlong	arg04, fp
2c3d4     08 4E 85 F1 | 	sub	fp, #8
2c3d8     A7 FA 01 FB | 	rdlong	result1, fp
2c3dc     28 4E 05 F1 | 	add	fp, #40
2c3e0     A7 FA 61 FC | 	wrlong	result1, fp
2c3e4     20 4E 85 F1 | 	sub	fp, #32
2c3e8     A7 FA 01 FB | 	rdlong	result1, fp
2c3ec     FD 00 68 FC | 	wrlong	#0, result1
2c3f0     0C 4E 85 F1 | 	sub	fp, #12
2c3f4     A7 12 02 FB | 	rdlong	arg01, fp
2c3f8     14 4E 05 F1 | 	add	fp, #20
2c3fc     A7 14 02 F6 | 	mov	arg02, fp
2c400     18 4E 85 F1 | 	sub	fp, #24
2c404     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c408     14 4E 05 F1 | 	add	fp, #20
2c40c     A7 FA 61 FC | 	wrlong	result1, fp
2c410     00 FA 4D F2 | 	cmps	result1, #0 wz
2c414     14 4E 85 F1 | 	sub	fp, #20
2c418     20 00 90 5D |  if_ne	jmp	#LR__4530
2c41c     04 4E 05 F1 | 	add	fp, #4
2c420     A7 14 02 FB | 	rdlong	arg02, fp
2c424     11 14 06 F1 | 	add	arg02, #17
2c428     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c42c     10 4E 05 F1 | 	add	fp, #16
2c430     A7 14 62 FC | 	wrlong	arg02, fp
2c434     14 4E 85 F1 | 	sub	fp, #20
2c438     10 00 90 AD |  if_e	jmp	#LR__4531
2c43c                 | LR__4530
2c43c     14 4E 05 F1 | 	add	fp, #20
2c440     A7 FA 01 FB | 	rdlong	result1, fp
2c444     14 4E 85 F1 | 	sub	fp, #20
2c448     44 07 90 FD | 	jmp	#LR__4553
2c44c                 | LR__4531
2c44c     04 4E 05 F1 | 	add	fp, #4
2c450     A7 14 02 FB | 	rdlong	arg02, fp
2c454     04 4E 85 F1 | 	sub	fp, #4
2c458     10 14 06 F1 | 	add	arg02, #16
2c45c     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c460     02 14 CE F7 | 	test	arg02, #2 wz
2c464     07 FA 05 A6 |  if_e	mov	result1, #7
2c468     24 07 90 AD |  if_e	jmp	#LR__4553
2c46c     04 4E 05 F1 | 	add	fp, #4
2c470     A7 14 02 FB | 	rdlong	arg02, fp
2c474     0A 13 02 F6 | 	mov	arg01, arg02
2c478     14 12 06 F1 | 	add	arg01, #20
2c47c     09 13 02 FB | 	rdlong	arg01, arg01
2c480     08 4E 05 F1 | 	add	fp, #8
2c484     A7 FA 01 FB | 	rdlong	result1, fp
2c488     FD 12 02 F1 | 	add	arg01, result1
2c48c     0C 4E 85 F1 | 	sub	fp, #12
2c490     14 14 06 F1 | 	add	arg02, #20
2c494     0A FB 01 FB | 	rdlong	result1, arg02
2c498     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c49c     24 00 90 3D |  if_ae	jmp	#LR__4532
2c4a0     04 4E 05 F1 | 	add	fp, #4
2c4a4     A7 14 02 FB | 	rdlong	arg02, fp
2c4a8     01 FA 65 F6 | 	neg	result1, #1
2c4ac     14 14 06 F1 | 	add	arg02, #20
2c4b0     0A 15 02 FB | 	rdlong	arg02, arg02
2c4b4     0A FB 81 F1 | 	sub	result1, arg02
2c4b8     08 4E 05 F1 | 	add	fp, #8
2c4bc     A7 FA 61 FC | 	wrlong	result1, fp
2c4c0     0C 4E 85 F1 | 	sub	fp, #12
2c4c4                 | LR__4532
2c4c4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c4c4                 | ' 	}
2c4c4                 | ' 
2c4c4                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c4c4                 | LR__4533
2c4c4     0C 4E 05 F1 | 	add	fp, #12
2c4c8     A7 FA 01 FB | 	rdlong	result1, fp
2c4cc     0C 4E 85 F1 | 	sub	fp, #12
2c4d0     01 FA 15 F2 | 	cmp	result1, #1 wc
2c4d4     90 06 90 CD |  if_b	jmp	#LR__4552
2c4d8     04 4E 05 F1 | 	add	fp, #4
2c4dc     A7 FA 01 FB | 	rdlong	result1, fp
2c4e0     04 4E 85 F1 | 	sub	fp, #4
2c4e4     14 FA 05 F1 | 	add	result1, #20
2c4e8     FD FA 01 FB | 	rdlong	result1, result1
2c4ec     FF FB CD F7 | 	test	result1, #511 wz
2c4f0     D8 04 90 5D |  if_ne	jmp	#LR__4548
2c4f4     04 4E 05 F1 | 	add	fp, #4
2c4f8     A7 FA 01 FB | 	rdlong	result1, fp
2c4fc     14 FA 05 F1 | 	add	result1, #20
2c500     FD FA 01 FB | 	rdlong	result1, result1
2c504     09 FA 45 F0 | 	shr	result1, #9
2c508     14 4E 05 F1 | 	add	fp, #20
2c50c     A7 14 02 FB | 	rdlong	arg02, fp
2c510     0A 14 06 F1 | 	add	arg02, #10
2c514     0A 19 E2 FA | 	rdword	arg04, arg02
2c518     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c51c     01 14 86 F1 | 	sub	arg02, #1
2c520     0A FB 09 F5 | 	and	result1, arg02 wz
2c524     14 4E 05 F1 | 	add	fp, #20
2c528     A7 FA 61 FC | 	wrlong	result1, fp
2c52c     2C 4E 85 F1 | 	sub	fp, #44
2c530     44 01 90 5D |  if_ne	jmp	#LR__4539
2c534     04 4E 05 F1 | 	add	fp, #4
2c538     A7 FA 01 FB | 	rdlong	result1, fp
2c53c     04 4E 85 F1 | 	sub	fp, #4
2c540     14 FA 05 F1 | 	add	result1, #20
2c544     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c548     44 00 90 5D |  if_ne	jmp	#LR__4534
2c54c     04 4E 05 F1 | 	add	fp, #4
2c550     A7 14 02 FB | 	rdlong	arg02, fp
2c554     08 14 06 F1 | 	add	arg02, #8
2c558     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c55c     18 4E 05 F1 | 	add	fp, #24
2c560     A7 14 62 FC | 	wrlong	arg02, fp
2c564     1C 4E 85 F1 | 	sub	fp, #28
2c568     4C 00 90 5D |  if_ne	jmp	#LR__4535
2c56c     04 4E 05 F1 | 	add	fp, #4
2c570     A7 12 02 FB | 	rdlong	arg01, fp
2c574     04 4E 85 F1 | 	sub	fp, #4
2c578     00 14 06 F6 | 	mov	arg02, #0
2c57c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c580     1C 4E 05 F1 | 	add	fp, #28
2c584     A7 FA 61 FC | 	wrlong	result1, fp
2c588     1C 4E 85 F1 | 	sub	fp, #28
2c58c     28 00 90 FD | 	jmp	#LR__4535
2c590                 | LR__4534
2c590     04 4E 05 F1 | 	add	fp, #4
2c594     A7 18 02 FB | 	rdlong	arg04, fp
2c598     0C 13 02 F6 | 	mov	arg01, arg04
2c59c     04 4E 85 F1 | 	sub	fp, #4
2c5a0     18 18 06 F1 | 	add	arg04, #24
2c5a4     0C 15 02 FB | 	rdlong	arg02, arg04
2c5a8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c5ac     1C 4E 05 F1 | 	add	fp, #28
2c5b0     A7 FA 61 FC | 	wrlong	result1, fp
2c5b4     1C 4E 85 F1 | 	sub	fp, #28
2c5b8                 | LR__4535
2c5b8     1C 4E 05 F1 | 	add	fp, #28
2c5bc     A7 FA 09 FB | 	rdlong	result1, fp wz
2c5c0     1C 4E 85 F1 | 	sub	fp, #28
2c5c4     A0 05 90 AD |  if_e	jmp	#LR__4552
2c5c8     1C 4E 05 F1 | 	add	fp, #28
2c5cc     A7 FA 01 FB | 	rdlong	result1, fp
2c5d0     1C 4E 85 F1 | 	sub	fp, #28
2c5d4     01 FA 0D F2 | 	cmp	result1, #1 wz
2c5d8     1C 00 90 5D |  if_ne	jmp	#LR__4536
2c5dc     04 4E 05 F1 | 	add	fp, #4
2c5e0     A7 FA 01 FB | 	rdlong	result1, fp
2c5e4     04 4E 85 F1 | 	sub	fp, #4
2c5e8     11 FA 05 F1 | 	add	result1, #17
2c5ec     FD 04 48 FC | 	wrbyte	#2, result1
2c5f0     02 FA 05 F6 | 	mov	result1, #2
2c5f4     98 05 90 FD | 	jmp	#LR__4553
2c5f8                 | LR__4536
2c5f8     1C 4E 05 F1 | 	add	fp, #28
2c5fc     A7 FA 01 FB | 	rdlong	result1, fp
2c600     1C 4E 85 F1 | 	sub	fp, #28
2c604     FF FF 7F FF 
2c608     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c60c     1C 00 90 5D |  if_ne	jmp	#LR__4537
2c610     04 4E 05 F1 | 	add	fp, #4
2c614     A7 FA 01 FB | 	rdlong	result1, fp
2c618     04 4E 85 F1 | 	sub	fp, #4
2c61c     11 FA 05 F1 | 	add	result1, #17
2c620     FD 02 48 FC | 	wrbyte	#1, result1
2c624     01 FA 05 F6 | 	mov	result1, #1
2c628     64 05 90 FD | 	jmp	#LR__4553
2c62c                 | LR__4537
2c62c     04 4E 05 F1 | 	add	fp, #4
2c630     A7 FA 01 FB | 	rdlong	result1, fp
2c634     18 4E 05 F1 | 	add	fp, #24
2c638     A7 18 02 FB | 	rdlong	arg04, fp
2c63c     18 FA 05 F1 | 	add	result1, #24
2c640     FD 18 62 FC | 	wrlong	arg04, result1
2c644     18 4E 85 F1 | 	sub	fp, #24
2c648     A7 FA 01 FB | 	rdlong	result1, fp
2c64c     04 4E 85 F1 | 	sub	fp, #4
2c650     08 FA 05 F1 | 	add	result1, #8
2c654     FD FA 09 FB | 	rdlong	result1, result1 wz
2c658     1C 00 90 5D |  if_ne	jmp	#LR__4538
2c65c     04 4E 05 F1 | 	add	fp, #4
2c660     A7 18 02 FB | 	rdlong	arg04, fp
2c664     18 4E 05 F1 | 	add	fp, #24
2c668     A7 FA 01 FB | 	rdlong	result1, fp
2c66c     1C 4E 85 F1 | 	sub	fp, #28
2c670     08 18 06 F1 | 	add	arg04, #8
2c674     0C FB 61 FC | 	wrlong	result1, arg04
2c678                 | LR__4538
2c678                 | LR__4539
2c678     04 4E 05 F1 | 	add	fp, #4
2c67c     A7 18 02 FB | 	rdlong	arg04, fp
2c680     04 4E 85 F1 | 	sub	fp, #4
2c684     10 18 06 F1 | 	add	arg04, #16
2c688     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c68c     80 18 CE F7 | 	test	arg04, #128 wz
2c690     7C 00 90 AD |  if_e	jmp	#LR__4541
2c694     18 4E 05 F1 | 	add	fp, #24
2c698     A7 18 02 FB | 	rdlong	arg04, fp
2c69c     01 18 06 F1 | 	add	arg04, #1
2c6a0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c6a4     14 4E 85 F1 | 	sub	fp, #20
2c6a8     A7 18 02 FB | 	rdlong	arg04, fp
2c6ac     0C 15 02 F6 | 	mov	arg02, arg04
2c6b0     28 14 06 F1 | 	add	arg02, #40
2c6b4     04 4E 85 F1 | 	sub	fp, #4
2c6b8     1C 18 06 F1 | 	add	arg04, #28
2c6bc     0C 17 02 FB | 	rdlong	arg03, arg04
2c6c0     01 18 06 F6 | 	mov	arg04, #1
2c6c4     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c6c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6cc     1C 00 90 AD |  if_e	jmp	#LR__4540
2c6d0     04 4E 05 F1 | 	add	fp, #4
2c6d4     A7 FA 01 FB | 	rdlong	result1, fp
2c6d8     04 4E 85 F1 | 	sub	fp, #4
2c6dc     11 FA 05 F1 | 	add	result1, #17
2c6e0     FD 02 48 FC | 	wrbyte	#1, result1
2c6e4     01 FA 05 F6 | 	mov	result1, #1
2c6e8     A4 04 90 FD | 	jmp	#LR__4553
2c6ec                 | LR__4540
2c6ec     04 4E 05 F1 | 	add	fp, #4
2c6f0     A7 18 02 FB | 	rdlong	arg04, fp
2c6f4     0C FB 01 F6 | 	mov	result1, arg04
2c6f8     04 4E 85 F1 | 	sub	fp, #4
2c6fc     10 18 06 F1 | 	add	arg04, #16
2c700     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c704     7F 18 06 F5 | 	and	arg04, #127
2c708     10 FA 05 F1 | 	add	result1, #16
2c70c     FD 18 42 FC | 	wrbyte	arg04, result1
2c710                 | LR__4541
2c710     18 4E 05 F1 | 	add	fp, #24
2c714     A7 12 02 FB | 	rdlong	arg01, fp
2c718     14 4E 85 F1 | 	sub	fp, #20
2c71c     A7 14 02 FB | 	rdlong	arg02, fp
2c720     04 4E 85 F1 | 	sub	fp, #4
2c724     18 14 06 F1 | 	add	arg02, #24
2c728     0A 15 02 FB | 	rdlong	arg02, arg02
2c72c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c730     20 4E 05 F1 | 	add	fp, #32
2c734     A7 FA 61 FC | 	wrlong	result1, fp
2c738     20 4E 85 F1 | 	sub	fp, #32
2c73c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c740     1C 00 90 5D |  if_ne	jmp	#LR__4542
2c744     04 4E 05 F1 | 	add	fp, #4
2c748     A7 FA 01 FB | 	rdlong	result1, fp
2c74c     04 4E 85 F1 | 	sub	fp, #4
2c750     11 FA 05 F1 | 	add	result1, #17
2c754     FD 04 48 FC | 	wrbyte	#2, result1
2c758     02 FA 05 F6 | 	mov	result1, #2
2c75c     30 04 90 FD | 	jmp	#LR__4553
2c760                 | LR__4542
2c760     20 4E 05 F1 | 	add	fp, #32
2c764     A7 FA 01 FB | 	rdlong	result1, fp
2c768     0C 4E 05 F1 | 	add	fp, #12
2c76c     A7 1E 02 FB | 	rdlong	local01, fp
2c770     0F FB 01 F1 | 	add	result1, local01
2c774     0C 4E 85 F1 | 	sub	fp, #12
2c778     A7 FA 61 FC | 	wrlong	result1, fp
2c77c     14 4E 85 F1 | 	sub	fp, #20
2c780     A7 FA 01 FB | 	rdlong	result1, fp
2c784     09 FA 45 F0 | 	shr	result1, #9
2c788     1C 4E 05 F1 | 	add	fp, #28
2c78c     A7 FA 61 FC | 	wrlong	result1, fp
2c790     28 4E 85 F1 | 	sub	fp, #40
2c794     01 FA 15 F2 | 	cmp	result1, #1 wc
2c798     60 01 90 CD |  if_b	jmp	#LR__4546
2c79c     2C 4E 05 F1 | 	add	fp, #44
2c7a0     A7 FA 01 FB | 	rdlong	result1, fp
2c7a4     04 4E 85 F1 | 	sub	fp, #4
2c7a8     A7 18 02 FB | 	rdlong	arg04, fp
2c7ac     0C FB 01 F1 | 	add	result1, arg04
2c7b0     10 4E 85 F1 | 	sub	fp, #16
2c7b4     A7 18 02 FB | 	rdlong	arg04, fp
2c7b8     18 4E 85 F1 | 	sub	fp, #24
2c7bc     0A 18 06 F1 | 	add	arg04, #10
2c7c0     0C 19 E2 FA | 	rdword	arg04, arg04
2c7c4     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c7c8     28 00 90 ED |  if_be	jmp	#LR__4543
2c7cc     18 4E 05 F1 | 	add	fp, #24
2c7d0     A7 FA 01 FB | 	rdlong	result1, fp
2c7d4     0A FA 05 F1 | 	add	result1, #10
2c7d8     FD FA E1 FA | 	rdword	result1, result1
2c7dc     14 4E 05 F1 | 	add	fp, #20
2c7e0     A7 18 02 FB | 	rdlong	arg04, fp
2c7e4     0C FB 81 F1 | 	sub	result1, arg04
2c7e8     04 4E 85 F1 | 	sub	fp, #4
2c7ec     A7 FA 61 FC | 	wrlong	result1, fp
2c7f0     28 4E 85 F1 | 	sub	fp, #40
2c7f4                 | LR__4543
2c7f4     18 4E 05 F1 | 	add	fp, #24
2c7f8     A7 18 02 FB | 	rdlong	arg04, fp
2c7fc     01 18 06 F1 | 	add	arg04, #1
2c800     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c804     18 4E 05 F1 | 	add	fp, #24
2c808     A7 14 02 FB | 	rdlong	arg02, fp
2c80c     10 4E 85 F1 | 	sub	fp, #16
2c810     A7 16 02 FB | 	rdlong	arg03, fp
2c814     08 4E 05 F1 | 	add	fp, #8
2c818     A7 18 02 FB | 	rdlong	arg04, fp
2c81c     28 4E 85 F1 | 	sub	fp, #40
2c820     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c824     00 FA 0D F2 | 	cmp	result1, #0 wz
2c828     1C 00 90 AD |  if_e	jmp	#LR__4544
2c82c     04 4E 05 F1 | 	add	fp, #4
2c830     A7 1E 02 FB | 	rdlong	local01, fp
2c834     04 4E 85 F1 | 	sub	fp, #4
2c838     11 1E 06 F1 | 	add	local01, #17
2c83c     0F 03 48 FC | 	wrbyte	#1, local01
2c840     01 FA 05 F6 | 	mov	result1, #1
2c844     48 03 90 FD | 	jmp	#LR__4553
2c848                 | LR__4544
2c848     04 4E 05 F1 | 	add	fp, #4
2c84c     A7 FA 01 FB | 	rdlong	result1, fp
2c850     1C FA 05 F1 | 	add	result1, #28
2c854     FD FA 01 FB | 	rdlong	result1, result1
2c858     1C 4E 05 F1 | 	add	fp, #28
2c85c     A7 20 02 FB | 	rdlong	local02, fp
2c860     10 FB 81 F1 | 	sub	result1, local02
2c864     08 4E 05 F1 | 	add	fp, #8
2c868     A7 18 02 FB | 	rdlong	arg04, fp
2c86c     28 4E 85 F1 | 	sub	fp, #40
2c870     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c874     68 00 90 3D |  if_ae	jmp	#LR__4545
2c878     04 4E 05 F1 | 	add	fp, #4
2c87c     A7 12 02 FB | 	rdlong	arg01, fp
2c880     28 12 06 F1 | 	add	arg01, #40
2c884     2C 4E 05 F1 | 	add	fp, #44
2c888     A7 14 02 FB | 	rdlong	arg02, fp
2c88c     2C 4E 85 F1 | 	sub	fp, #44
2c890     A7 FA 01 FB | 	rdlong	result1, fp
2c894     1C FA 05 F1 | 	add	result1, #28
2c898     FD 22 02 FB | 	rdlong	local03, result1
2c89c     1C 4E 05 F1 | 	add	fp, #28
2c8a0     A7 18 02 FB | 	rdlong	arg04, fp
2c8a4     20 4E 85 F1 | 	sub	fp, #32
2c8a8     0C 23 82 F1 | 	sub	local03, arg04
2c8ac     09 22 66 F0 | 	shl	local03, #9
2c8b0     11 15 02 F1 | 	add	arg02, local03
2c8b4     09 16 C6 F9 | 	decod	arg03, #9
2c8b8     B0 3E BF FD | 	call	#__system____builtin_memmove
2c8bc     04 4E 05 F1 | 	add	fp, #4
2c8c0     A7 18 02 FB | 	rdlong	arg04, fp
2c8c4     0C FB 01 F6 | 	mov	result1, arg04
2c8c8     04 4E 85 F1 | 	sub	fp, #4
2c8cc     10 18 06 F1 | 	add	arg04, #16
2c8d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c8d4     7F 18 06 F5 | 	and	arg04, #127
2c8d8     10 FA 05 F1 | 	add	result1, #16
2c8dc     FD 18 42 FC | 	wrbyte	arg04, result1
2c8e0                 | LR__4545
2c8e0     28 4E 05 F1 | 	add	fp, #40
2c8e4     A7 FA 01 FB | 	rdlong	result1, fp
2c8e8     09 FA 65 F0 | 	shl	result1, #9
2c8ec     04 4E 85 F1 | 	sub	fp, #4
2c8f0     A7 FA 61 FC | 	wrlong	result1, fp
2c8f4     24 4E 85 F1 | 	sub	fp, #36
2c8f8                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2c8f8                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2c8f8                 | ' 				}
2c8f8                 | ' 
2c8f8                 | ' 
2c8f8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2c8f8                 | ' 				continue;
2c8f8     74 01 90 FD | 	jmp	#LR__4549
2c8fc                 | LR__4546
2c8fc     04 4E 05 F1 | 	add	fp, #4
2c900     A7 20 02 FB | 	rdlong	local02, fp
2c904     1C 20 06 F1 | 	add	local02, #28
2c908     10 FB 01 FB | 	rdlong	result1, local02
2c90c     1C 4E 05 F1 | 	add	fp, #28
2c910     A7 20 02 FB | 	rdlong	local02, fp
2c914     20 4E 85 F1 | 	sub	fp, #32
2c918     10 FB 09 F2 | 	cmp	result1, local02 wz
2c91c     90 00 90 AD |  if_e	jmp	#LR__4547
2c920     04 4E 05 F1 | 	add	fp, #4
2c924     A7 FA 01 FB | 	rdlong	result1, fp
2c928     FD 22 02 F6 | 	mov	local03, result1
2c92c     04 4E 85 F1 | 	sub	fp, #4
2c930     14 22 06 F1 | 	add	local03, #20
2c934     11 23 02 FB | 	rdlong	local03, local03
2c938     0C FA 05 F1 | 	add	result1, #12
2c93c     FD 24 02 FB | 	rdlong	local04, result1
2c940     12 27 02 F6 | 	mov	local05, local04
2c944     13 23 12 F2 | 	cmp	local03, local05 wc
2c948     64 00 90 3D |  if_ae	jmp	#LR__4547
2c94c     18 4E 05 F1 | 	add	fp, #24
2c950     A7 18 02 FB | 	rdlong	arg04, fp
2c954     01 18 06 F1 | 	add	arg04, #1
2c958     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c95c     14 4E 85 F1 | 	sub	fp, #20
2c960     A7 28 02 FB | 	rdlong	local06, fp
2c964     28 28 06 F1 | 	add	local06, #40
2c968     14 2B 02 F6 | 	mov	local07, local06
2c96c     1C 4E 05 F1 | 	add	fp, #28
2c970     A7 2C 02 FB | 	rdlong	local08, fp
2c974     20 4E 85 F1 | 	sub	fp, #32
2c978     01 2E 06 F6 | 	mov	local09, #1
2c97c     15 15 02 F6 | 	mov	arg02, local07
2c980     16 17 02 F6 | 	mov	arg03, local08
2c984     01 18 06 F6 | 	mov	arg04, #1
2c988     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2c98c     FD 30 0A F6 | 	mov	local10, result1 wz
2c990     1C 00 90 AD |  if_e	jmp	#LR__4547
2c994     04 4E 05 F1 | 	add	fp, #4
2c998     A7 30 02 FB | 	rdlong	local10, fp
2c99c     04 4E 85 F1 | 	sub	fp, #4
2c9a0     11 30 06 F1 | 	add	local10, #17
2c9a4     18 03 48 FC | 	wrbyte	#1, local10
2c9a8                 | ' 				fp->fptr < fp->obj.objsize &&
2c9a8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2c9a8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2c9a8     01 FA 05 F6 | 	mov	result1, #1
2c9ac     E0 01 90 FD | 	jmp	#LR__4553
2c9b0                 | LR__4547
2c9b0     04 4E 05 F1 | 	add	fp, #4
2c9b4     A7 18 02 FB | 	rdlong	arg04, fp
2c9b8     1C 4E 05 F1 | 	add	fp, #28
2c9bc     A7 FA 01 FB | 	rdlong	result1, fp
2c9c0     20 4E 85 F1 | 	sub	fp, #32
2c9c4     1C 18 06 F1 | 	add	arg04, #28
2c9c8     0C FB 61 FC | 	wrlong	result1, arg04
2c9cc                 | LR__4548
2c9cc     04 4E 05 F1 | 	add	fp, #4
2c9d0     A7 FA 01 FB | 	rdlong	result1, fp
2c9d4     14 FA 05 F1 | 	add	result1, #20
2c9d8     FD FA 01 FB | 	rdlong	result1, result1
2c9dc     FF FB 05 F5 | 	and	result1, #511
2c9e0     09 32 C6 F9 | 	decod	local11, #9
2c9e4     FD 32 82 F1 | 	sub	local11, result1
2c9e8     20 4E 05 F1 | 	add	fp, #32
2c9ec     A7 32 62 FC | 	wrlong	local11, fp
2c9f0     18 4E 85 F1 | 	sub	fp, #24
2c9f4     A7 FA 01 FB | 	rdlong	result1, fp
2c9f8     0C 4E 85 F1 | 	sub	fp, #12
2c9fc     FD 32 1A F2 | 	cmp	local11, result1 wcz
2ca00     0C 4E 05 11 |  if_a	add	fp, #12
2ca04     A7 32 02 1B |  if_a	rdlong	local11, fp
2ca08     18 4E 05 11 |  if_a	add	fp, #24
2ca0c     A7 32 62 1C |  if_a	wrlong	local11, fp
2ca10     24 4E 85 11 |  if_a	sub	fp, #36
2ca14     04 4E 05 F1 | 	add	fp, #4
2ca18     A7 32 02 FB | 	rdlong	local11, fp
2ca1c     19 13 02 F6 | 	mov	arg01, local11
2ca20     28 12 06 F1 | 	add	arg01, #40
2ca24     14 32 06 F1 | 	add	local11, #20
2ca28     19 33 02 FB | 	rdlong	local11, local11
2ca2c     FF 33 06 F5 | 	and	local11, #511
2ca30     19 13 02 F1 | 	add	arg01, local11
2ca34     2C 4E 05 F1 | 	add	fp, #44
2ca38     A7 14 02 FB | 	rdlong	arg02, fp
2ca3c     0C 4E 85 F1 | 	sub	fp, #12
2ca40     A7 16 02 FB | 	rdlong	arg03, fp
2ca44     24 4E 85 F1 | 	sub	fp, #36
2ca48     20 3D BF FD | 	call	#__system____builtin_memmove
2ca4c     04 4E 05 F1 | 	add	fp, #4
2ca50     A7 FA 01 FB | 	rdlong	result1, fp
2ca54     FD 32 02 F6 | 	mov	local11, result1
2ca58     04 4E 85 F1 | 	sub	fp, #4
2ca5c     10 FA 05 F1 | 	add	result1, #16
2ca60     FD FA C1 FA | 	rdbyte	result1, result1
2ca64     80 FA 45 F5 | 	or	result1, #128
2ca68     10 32 06 F1 | 	add	local11, #16
2ca6c     19 FB 41 FC | 	wrbyte	result1, local11
2ca70                 | LR__4549
2ca70     0C 4E 05 F1 | 	add	fp, #12
2ca74     A7 32 02 FB | 	rdlong	local11, fp
2ca78     18 4E 05 F1 | 	add	fp, #24
2ca7c     A7 FA 01 FB | 	rdlong	result1, fp
2ca80     FD 32 82 F1 | 	sub	local11, result1
2ca84     18 4E 85 F1 | 	sub	fp, #24
2ca88     A7 32 62 FC | 	wrlong	local11, fp
2ca8c     04 4E 05 F1 | 	add	fp, #4
2ca90     A7 34 02 FB | 	rdlong	local12, fp
2ca94     1A 33 02 FB | 	rdlong	local11, local12
2ca98     14 4E 05 F1 | 	add	fp, #20
2ca9c     A7 36 02 FB | 	rdlong	local13, fp
2caa0     1B 33 02 F1 | 	add	local11, local13
2caa4     1A 33 62 FC | 	wrlong	local11, local12
2caa8     0C 4E 05 F1 | 	add	fp, #12
2caac     A7 32 02 FB | 	rdlong	local11, fp
2cab0     0C 4E 85 F1 | 	sub	fp, #12
2cab4     A7 38 02 FB | 	rdlong	local14, fp
2cab8     1C 33 02 F1 | 	add	local11, local14
2cabc     0C 4E 05 F1 | 	add	fp, #12
2cac0     A7 32 62 FC | 	wrlong	local11, fp
2cac4     2C 4E 85 F1 | 	sub	fp, #44
2cac8     A7 3A 02 FB | 	rdlong	local15, fp
2cacc     1D 33 02 F6 | 	mov	local11, local15
2cad0     14 3A 06 F1 | 	add	local15, #20
2cad4     1D 3B 02 FB | 	rdlong	local15, local15
2cad8     20 4E 05 F1 | 	add	fp, #32
2cadc     A7 3C 02 FB | 	rdlong	local16, fp
2cae0     1E 3B 02 F1 | 	add	local15, local16
2cae4     14 32 06 F1 | 	add	local11, #20
2cae8     19 3B 62 FC | 	wrlong	local15, local11
2caec     20 4E 85 F1 | 	sub	fp, #32
2caf0     A7 3E 02 FB | 	rdlong	local17, fp
2caf4     1F 33 02 F6 | 	mov	local11, local17
2caf8     1F 41 02 F6 | 	mov	local18, local17
2cafc     04 4E 85 F1 | 	sub	fp, #4
2cb00     14 3E 06 F1 | 	add	local17, #20
2cb04     1F 43 02 FB | 	rdlong	local19, local17
2cb08     0C 40 06 F1 | 	add	local18, #12
2cb0c     20 45 02 FB | 	rdlong	local20, local18
2cb10     22 43 1A F2 | 	cmp	local19, local20 wcz
2cb14     24 00 90 ED |  if_be	jmp	#LR__4550
2cb18     04 4E 05 F1 | 	add	fp, #4
2cb1c     A7 26 02 FB | 	rdlong	local05, fp
2cb20     04 4E 85 F1 | 	sub	fp, #4
2cb24     13 23 02 F6 | 	mov	local03, local05
2cb28     14 22 06 F1 | 	add	local03, #20
2cb2c     11 25 02 FB | 	rdlong	local04, local03
2cb30     14 22 86 F1 | 	sub	local03, #20
2cb34     12 47 02 F6 | 	mov	local21, local04
2cb38     20 00 90 FD | 	jmp	#LR__4551
2cb3c                 | LR__4550
2cb3c     04 4E 05 F1 | 	add	fp, #4
2cb40     A7 2A 02 FB | 	rdlong	local07, fp
2cb44     04 4E 85 F1 | 	sub	fp, #4
2cb48     15 31 02 F6 | 	mov	local10, local07
2cb4c     0C 30 06 F1 | 	add	local10, #12
2cb50     18 2D 02 FB | 	rdlong	local08, local10
2cb54     0C 30 86 F1 | 	sub	local10, #12
2cb58     16 47 02 F6 | 	mov	local21, local08
2cb5c                 | LR__4551
2cb5c     0C 32 06 F1 | 	add	local11, #12
2cb60     19 47 62 FC | 	wrlong	local21, local11
2cb64     5C F9 9F FD | 	jmp	#LR__4533
2cb68                 | LR__4552
2cb68     04 4E 05 F1 | 	add	fp, #4
2cb6c     A7 34 02 FB | 	rdlong	local12, fp
2cb70     1A 1F 02 F6 | 	mov	local01, local12
2cb74     04 4E 85 F1 | 	sub	fp, #4
2cb78     10 34 06 F1 | 	add	local12, #16
2cb7c     1A 33 C2 FA | 	rdbyte	local11, local12
2cb80     40 32 46 F5 | 	or	local11, #64
2cb84     10 1E 06 F1 | 	add	local01, #16
2cb88     0F 33 42 FC | 	wrbyte	local11, local01
2cb8c                 | ' 
2cb8c                 | ' 
2cb8c                 | ' 
2cb8c                 | ' 
2cb8c                 | ' 
2cb8c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cb8c                 | ' 		fp->flag |=  0x80 ;
2cb8c                 | ' 
2cb8c                 | ' 	}
2cb8c                 | ' 
2cb8c                 | ' 	fp->flag |=  0x40 ;
2cb8c                 | ' 
2cb8c                 | ' 	return FR_OK ;
2cb8c     00 FA 05 F6 | 	mov	result1, #0
2cb90                 | LR__4553
2cb90     A7 F0 03 F6 | 	mov	ptra, fp
2cb94     B2 00 A0 FD | 	call	#popregs_
2cb98                 | _fatfs_cc_f_write_ret
2cb98     2D 00 64 FD | 	ret
2cb9c                 | 
2cb9c                 | _fatfs_cc_f_sync
2cb9c     00 4A 05 F6 | 	mov	COUNT_, #0
2cba0     A8 00 A0 FD | 	call	#pushregs_
2cba4     18 F0 07 F1 | 	add	ptra, #24
2cba8     04 4E 05 F1 | 	add	fp, #4
2cbac     A7 12 62 FC | 	wrlong	arg01, fp
2cbb0     08 4E 05 F1 | 	add	fp, #8
2cbb4     A7 14 02 F6 | 	mov	arg02, fp
2cbb8     0C 4E 85 F1 | 	sub	fp, #12
2cbbc     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2cbc0     08 4E 05 F1 | 	add	fp, #8
2cbc4     A7 FA 61 FC | 	wrlong	result1, fp
2cbc8     08 4E 85 F1 | 	sub	fp, #8
2cbcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbd0     C0 01 90 5D |  if_ne	jmp	#LR__4563
2cbd4     04 4E 05 F1 | 	add	fp, #4
2cbd8     A7 18 02 FB | 	rdlong	arg04, fp
2cbdc     04 4E 85 F1 | 	sub	fp, #4
2cbe0     10 18 06 F1 | 	add	arg04, #16
2cbe4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cbe8     40 18 CE F7 | 	test	arg04, #64 wz
2cbec     A4 01 90 AD |  if_e	jmp	#LR__4562
2cbf0     04 4E 05 F1 | 	add	fp, #4
2cbf4     A7 18 02 FB | 	rdlong	arg04, fp
2cbf8     04 4E 85 F1 | 	sub	fp, #4
2cbfc     10 18 06 F1 | 	add	arg04, #16
2cc00     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cc04     80 18 CE F7 | 	test	arg04, #128 wz
2cc08     64 00 90 AD |  if_e	jmp	#LR__4560
2cc0c     0C 4E 05 F1 | 	add	fp, #12
2cc10     A7 18 02 FB | 	rdlong	arg04, fp
2cc14     01 18 06 F1 | 	add	arg04, #1
2cc18     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cc1c     08 4E 85 F1 | 	sub	fp, #8
2cc20     A7 18 02 FB | 	rdlong	arg04, fp
2cc24     0C 15 02 F6 | 	mov	arg02, arg04
2cc28     28 14 06 F1 | 	add	arg02, #40
2cc2c     04 4E 85 F1 | 	sub	fp, #4
2cc30     1C 18 06 F1 | 	add	arg04, #28
2cc34     0C 17 02 FB | 	rdlong	arg03, arg04
2cc38     01 18 06 F6 | 	mov	arg04, #1
2cc3c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2cc40     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc44     01 FA 05 56 |  if_ne	mov	result1, #1
2cc48     54 01 90 5D |  if_ne	jmp	#LR__4564
2cc4c     04 4E 05 F1 | 	add	fp, #4
2cc50     A7 18 02 FB | 	rdlong	arg04, fp
2cc54     0C 17 02 F6 | 	mov	arg03, arg04
2cc58     04 4E 85 F1 | 	sub	fp, #4
2cc5c     10 18 06 F1 | 	add	arg04, #16
2cc60     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cc64     7F 18 06 F5 | 	and	arg04, #127
2cc68     10 16 06 F1 | 	add	arg03, #16
2cc6c     0B 19 42 FC | 	wrbyte	arg04, arg03
2cc70                 | LR__4560
2cc70     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cc74     10 4E 05 F1 | 	add	fp, #16
2cc78     A7 FA 61 FC | 	wrlong	result1, fp
2cc7c     04 4E 85 F1 | 	sub	fp, #4
2cc80     A7 12 02 FB | 	rdlong	arg01, fp
2cc84     08 4E 85 F1 | 	sub	fp, #8
2cc88     A7 18 02 FB | 	rdlong	arg04, fp
2cc8c     04 4E 85 F1 | 	sub	fp, #4
2cc90     20 18 06 F1 | 	add	arg04, #32
2cc94     0C 15 02 FB | 	rdlong	arg02, arg04
2cc98     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cc9c     08 4E 05 F1 | 	add	fp, #8
2cca0     A7 FA 61 FC | 	wrlong	result1, fp
2cca4     08 4E 85 F1 | 	sub	fp, #8
2cca8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ccac     E4 00 90 5D |  if_ne	jmp	#LR__4561
2ccb0     04 4E 05 F1 | 	add	fp, #4
2ccb4     A7 18 02 FB | 	rdlong	arg04, fp
2ccb8     24 18 06 F1 | 	add	arg04, #36
2ccbc     0C 19 02 FB | 	rdlong	arg04, arg04
2ccc0     10 4E 05 F1 | 	add	fp, #16
2ccc4     A7 18 62 FC | 	wrlong	arg04, fp
2ccc8     0C 17 02 F6 | 	mov	arg03, arg04
2cccc     0B 16 06 F1 | 	add	arg03, #11
2ccd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ccd4     20 16 46 F5 | 	or	arg03, #32
2ccd8     0B 18 06 F1 | 	add	arg04, #11
2ccdc     0C 17 42 FC | 	wrbyte	arg03, arg04
2cce0     10 4E 85 F1 | 	sub	fp, #16
2cce4     A7 18 02 FB | 	rdlong	arg04, fp
2cce8     0C 13 02 FB | 	rdlong	arg01, arg04
2ccec     10 4E 05 F1 | 	add	fp, #16
2ccf0     A7 14 02 FB | 	rdlong	arg02, fp
2ccf4     14 4E 85 F1 | 	sub	fp, #20
2ccf8     08 18 06 F1 | 	add	arg04, #8
2ccfc     0C 17 02 FB | 	rdlong	arg03, arg04
2cd00     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cd04     14 4E 05 F1 | 	add	fp, #20
2cd08     A7 12 02 FB | 	rdlong	arg01, fp
2cd0c     1C 12 06 F1 | 	add	arg01, #28
2cd10     10 4E 85 F1 | 	sub	fp, #16
2cd14     A7 18 02 FB | 	rdlong	arg04, fp
2cd18     0C 18 06 F1 | 	add	arg04, #12
2cd1c     0C 15 02 FB | 	rdlong	arg02, arg04
2cd20     09 15 62 FC | 	wrlong	arg02, arg01
2cd24     10 4E 05 F1 | 	add	fp, #16
2cd28     A7 12 02 FB | 	rdlong	arg01, fp
2cd2c     16 12 06 F1 | 	add	arg01, #22
2cd30     04 4E 85 F1 | 	sub	fp, #4
2cd34     A7 14 02 FB | 	rdlong	arg02, fp
2cd38     09 15 62 FC | 	wrlong	arg02, arg01
2cd3c     04 4E 05 F1 | 	add	fp, #4
2cd40     A7 12 02 FB | 	rdlong	arg01, fp
2cd44     12 12 06 F1 | 	add	arg01, #18
2cd48     09 01 58 FC | 	wrword	#0, arg01
2cd4c     08 4E 85 F1 | 	sub	fp, #8
2cd50     A7 18 02 FB | 	rdlong	arg04, fp
2cd54     03 18 06 F1 | 	add	arg04, #3
2cd58     0C 03 48 FC | 	wrbyte	#1, arg04
2cd5c     A7 12 02 FB | 	rdlong	arg01, fp
2cd60     0C 4E 85 F1 | 	sub	fp, #12
2cd64     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2cd68     08 4E 05 F1 | 	add	fp, #8
2cd6c     A7 FA 61 FC | 	wrlong	result1, fp
2cd70     04 4E 85 F1 | 	sub	fp, #4
2cd74     A7 18 02 FB | 	rdlong	arg04, fp
2cd78     0C 17 02 F6 | 	mov	arg03, arg04
2cd7c     04 4E 85 F1 | 	sub	fp, #4
2cd80     10 18 06 F1 | 	add	arg04, #16
2cd84     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd88     BF 18 06 F5 | 	and	arg04, #191
2cd8c     10 16 06 F1 | 	add	arg03, #16
2cd90     0B 19 42 FC | 	wrbyte	arg04, arg03
2cd94                 | LR__4561
2cd94                 | LR__4562
2cd94                 | LR__4563
2cd94                 | ' 					dir = fp->dir_ptr;
2cd94                 | ' 					dir[ 11 ] |=  0x20 ;
2cd94                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2cd94                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2cd94                 | ' 					st_dword(dir +  22 , tm);
2cd94                 | ' 					st_word(dir +  18 , 0);
2cd94                 | ' 					fs->wflag = 1;
2cd94                 | ' 					res = sync_fs(fs);
2cd94                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2cd94                 | ' 				}
2cd94                 | ' 			}
2cd94                 | ' 		}
2cd94                 | ' 	}
2cd94                 | ' 
2cd94                 | ' 	return res ;
2cd94     08 4E 05 F1 | 	add	fp, #8
2cd98     A7 FA 01 FB | 	rdlong	result1, fp
2cd9c     08 4E 85 F1 | 	sub	fp, #8
2cda0                 | LR__4564
2cda0     A7 F0 03 F6 | 	mov	ptra, fp
2cda4     B2 00 A0 FD | 	call	#popregs_
2cda8                 | _fatfs_cc_f_sync_ret
2cda8     2D 00 64 FD | 	ret
2cdac                 | 
2cdac                 | _fatfs_cc_f_close
2cdac     01 4A 05 F6 | 	mov	COUNT_, #1
2cdb0     A8 00 A0 FD | 	call	#pushregs_
2cdb4     10 F0 07 F1 | 	add	ptra, #16
2cdb8     04 4E 05 F1 | 	add	fp, #4
2cdbc     A7 12 62 FC | 	wrlong	arg01, fp
2cdc0     04 4E 85 F1 | 	sub	fp, #4
2cdc4     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2cdc8     08 4E 05 F1 | 	add	fp, #8
2cdcc     A7 FA 61 FC | 	wrlong	result1, fp
2cdd0     08 4E 85 F1 | 	sub	fp, #8
2cdd4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdd8     38 00 90 5D |  if_ne	jmp	#LR__4570
2cddc     04 4E 05 F1 | 	add	fp, #4
2cde0     A7 12 02 FB | 	rdlong	arg01, fp
2cde4     08 4E 05 F1 | 	add	fp, #8
2cde8     A7 14 02 F6 | 	mov	arg02, fp
2cdec     0C 4E 85 F1 | 	sub	fp, #12
2cdf0     9C E6 BF FD | 	call	#_fatfs_cc_validate
2cdf4     08 4E 05 F1 | 	add	fp, #8
2cdf8     A7 FA 61 FC | 	wrlong	result1, fp
2cdfc     08 4E 85 F1 | 	sub	fp, #8
2ce00     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce04     04 4E 05 A1 |  if_e	add	fp, #4
2ce08     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ce0c     04 4E 85 A1 |  if_e	sub	fp, #4
2ce10     0F 01 68 AC |  if_e	wrlong	#0, local01
2ce14                 | LR__4570
2ce14                 | ' 
2ce14                 | ' 
2ce14                 | ' 
2ce14                 | ' 
2ce14                 | ' 			fp->obj.fs = 0;
2ce14                 | ' #line 4192 "ff.c"
2ce14                 | ' 		}
2ce14                 | ' 	}
2ce14                 | ' 	return res;
2ce14     08 4E 05 F1 | 	add	fp, #8
2ce18     A7 FA 01 FB | 	rdlong	result1, fp
2ce1c     08 4E 85 F1 | 	sub	fp, #8
2ce20     A7 F0 03 F6 | 	mov	ptra, fp
2ce24     B2 00 A0 FD | 	call	#popregs_
2ce28                 | _fatfs_cc_f_close_ret
2ce28     2D 00 64 FD | 	ret
2ce2c                 | 
2ce2c                 | _fatfs_cc_f_lseek
2ce2c     00 4A 05 F6 | 	mov	COUNT_, #0
2ce30     A8 00 A0 FD | 	call	#pushregs_
2ce34     24 F0 07 F1 | 	add	ptra, #36
2ce38     04 4E 05 F1 | 	add	fp, #4
2ce3c     A7 12 62 FC | 	wrlong	arg01, fp
2ce40     04 4E 05 F1 | 	add	fp, #4
2ce44     A7 14 62 FC | 	wrlong	arg02, fp
2ce48     04 4E 85 F1 | 	sub	fp, #4
2ce4c     A7 12 02 FB | 	rdlong	arg01, fp
2ce50     0C 4E 05 F1 | 	add	fp, #12
2ce54     A7 14 02 F6 | 	mov	arg02, fp
2ce58     10 4E 85 F1 | 	sub	fp, #16
2ce5c     30 E6 BF FD | 	call	#_fatfs_cc_validate
2ce60     0C 4E 05 F1 | 	add	fp, #12
2ce64     A7 FA 61 FC | 	wrlong	result1, fp
2ce68     0C 4E 85 F1 | 	sub	fp, #12
2ce6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce70     1C 00 90 5D |  if_ne	jmp	#LR__4580
2ce74     04 4E 05 F1 | 	add	fp, #4
2ce78     A7 18 02 FB | 	rdlong	arg04, fp
2ce7c     11 18 06 F1 | 	add	arg04, #17
2ce80     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce84     08 4E 05 F1 | 	add	fp, #8
2ce88     A7 18 62 FC | 	wrlong	arg04, fp
2ce8c     0C 4E 85 F1 | 	sub	fp, #12
2ce90                 | LR__4580
2ce90     0C 4E 05 F1 | 	add	fp, #12
2ce94     A7 18 0A FB | 	rdlong	arg04, fp wz
2ce98     0C 4E 85 F1 | 	sub	fp, #12
2ce9c     0C 4E 05 51 |  if_ne	add	fp, #12
2cea0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2cea4     0C 4E 85 51 |  if_ne	sub	fp, #12
2cea8     40 06 90 5D |  if_ne	jmp	#LR__4603
2ceac     04 4E 05 F1 | 	add	fp, #4
2ceb0     A7 18 02 FB | 	rdlong	arg04, fp
2ceb4     04 4E 05 F1 | 	add	fp, #4
2ceb8     A7 16 02 FB | 	rdlong	arg03, fp
2cebc     08 4E 85 F1 | 	sub	fp, #8
2cec0     0C 18 06 F1 | 	add	arg04, #12
2cec4     0C 19 02 FB | 	rdlong	arg04, arg04
2cec8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2cecc     3C 00 90 ED |  if_be	jmp	#LR__4581
2ced0     04 4E 05 F1 | 	add	fp, #4
2ced4     A7 16 02 FB | 	rdlong	arg03, fp
2ced8     04 4E 85 F1 | 	sub	fp, #4
2cedc     10 16 06 F1 | 	add	arg03, #16
2cee0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cee4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2cee8     02 16 CE F7 | 	test	arg03, #2 wz
2ceec     1C 00 90 5D |  if_ne	jmp	#LR__4581
2cef0     04 4E 05 F1 | 	add	fp, #4
2cef4     A7 16 02 FB | 	rdlong	arg03, fp
2cef8     0C 16 06 F1 | 	add	arg03, #12
2cefc     0B 17 02 FB | 	rdlong	arg03, arg03
2cf00     04 4E 05 F1 | 	add	fp, #4
2cf04     A7 16 62 FC | 	wrlong	arg03, fp
2cf08     08 4E 85 F1 | 	sub	fp, #8
2cf0c                 | LR__4581
2cf0c     04 4E 05 F1 | 	add	fp, #4
2cf10     A7 16 02 FB | 	rdlong	arg03, fp
2cf14     14 16 06 F1 | 	add	arg03, #20
2cf18     0B 17 02 FB | 	rdlong	arg03, arg03
2cf1c     1C 4E 05 F1 | 	add	fp, #28
2cf20     A7 16 62 FC | 	wrlong	arg03, fp
2cf24     1C 4E 85 F1 | 	sub	fp, #28
2cf28     A7 16 02 FB | 	rdlong	arg03, fp
2cf2c     18 4E 05 F1 | 	add	fp, #24
2cf30     A7 00 68 FC | 	wrlong	#0, fp
2cf34     14 16 06 F1 | 	add	arg03, #20
2cf38     0B 01 68 FC | 	wrlong	#0, arg03
2cf3c     14 4E 85 F1 | 	sub	fp, #20
2cf40     A7 16 02 FB | 	rdlong	arg03, fp
2cf44     08 4E 85 F1 | 	sub	fp, #8
2cf48     01 16 16 F2 | 	cmp	arg03, #1 wc
2cf4c     E4 03 90 CD |  if_b	jmp	#LR__4597
2cf50     10 4E 05 F1 | 	add	fp, #16
2cf54     A7 16 02 FB | 	rdlong	arg03, fp
2cf58     0A 16 06 F1 | 	add	arg03, #10
2cf5c     0B 19 E2 FA | 	rdword	arg04, arg03
2cf60     09 18 66 F0 | 	shl	arg04, #9
2cf64     08 4E 05 F1 | 	add	fp, #8
2cf68     A7 18 62 FC | 	wrlong	arg04, fp
2cf6c     08 4E 05 F1 | 	add	fp, #8
2cf70     A7 18 02 FB | 	rdlong	arg04, fp
2cf74     20 4E 85 F1 | 	sub	fp, #32
2cf78     01 18 16 F2 | 	cmp	arg04, #1 wc
2cf7c     AC 00 90 CD |  if_b	jmp	#LR__4582
2cf80     08 4E 05 F1 | 	add	fp, #8
2cf84     A7 18 02 FB | 	rdlong	arg04, fp
2cf88     01 18 86 F1 | 	sub	arg04, #1
2cf8c     10 4E 05 F1 | 	add	fp, #16
2cf90     A7 16 02 FB | 	rdlong	arg03, fp
2cf94     0B 19 12 FD | 	qdiv	arg04, arg03
2cf98     08 4E 05 F1 | 	add	fp, #8
2cf9c     A7 FA 01 FB | 	rdlong	result1, fp
2cfa0     01 FA 85 F1 | 	sub	result1, #1
2cfa4     18 18 62 FD | 	getqx	arg04
2cfa8     0B FB 11 FD | 	qdiv	result1, arg03
2cfac     20 4E 85 F1 | 	sub	fp, #32
2cfb0     18 16 62 FD | 	getqx	arg03
2cfb4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2cfb8     70 00 90 CD |  if_b	jmp	#LR__4582
2cfbc     04 4E 05 F1 | 	add	fp, #4
2cfc0     A7 16 02 FB | 	rdlong	arg03, fp
2cfc4     1C 4E 05 F1 | 	add	fp, #28
2cfc8     A7 FA 01 FB | 	rdlong	result1, fp
2cfcc     01 FA 85 F1 | 	sub	result1, #1
2cfd0     08 4E 85 F1 | 	sub	fp, #8
2cfd4     A7 18 02 FB | 	rdlong	arg04, fp
2cfd8     01 18 86 F1 | 	sub	arg04, #1
2cfdc     0C FB 21 F5 | 	andn	result1, arg04
2cfe0     14 16 06 F1 | 	add	arg03, #20
2cfe4     0B FB 61 FC | 	wrlong	result1, arg03
2cfe8     10 4E 85 F1 | 	sub	fp, #16
2cfec     A7 16 02 FB | 	rdlong	arg03, fp
2cff0     04 4E 85 F1 | 	sub	fp, #4
2cff4     A7 18 02 FB | 	rdlong	arg04, fp
2cff8     14 18 06 F1 | 	add	arg04, #20
2cffc     0C 19 02 FB | 	rdlong	arg04, arg04
2d000     0C 17 82 F1 | 	sub	arg03, arg04
2d004     04 4E 05 F1 | 	add	fp, #4
2d008     A7 16 62 FC | 	wrlong	arg03, fp
2d00c     04 4E 85 F1 | 	sub	fp, #4
2d010     A7 16 02 FB | 	rdlong	arg03, fp
2d014     18 16 06 F1 | 	add	arg03, #24
2d018     0B 17 02 FB | 	rdlong	arg03, arg03
2d01c     10 4E 05 F1 | 	add	fp, #16
2d020     A7 16 62 FC | 	wrlong	arg03, fp
2d024     14 4E 85 F1 | 	sub	fp, #20
2d028     D0 00 90 FD | 	jmp	#LR__4586
2d02c                 | LR__4582
2d02c     04 4E 05 F1 | 	add	fp, #4
2d030     A7 16 02 FB | 	rdlong	arg03, fp
2d034     08 16 06 F1 | 	add	arg03, #8
2d038     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d03c     10 4E 05 F1 | 	add	fp, #16
2d040     A7 16 62 FC | 	wrlong	arg03, fp
2d044     14 4E 85 F1 | 	sub	fp, #20
2d048     94 00 90 5D |  if_ne	jmp	#LR__4585
2d04c     04 4E 05 F1 | 	add	fp, #4
2d050     A7 12 02 FB | 	rdlong	arg01, fp
2d054     04 4E 85 F1 | 	sub	fp, #4
2d058     00 14 06 F6 | 	mov	arg02, #0
2d05c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d060     14 4E 05 F1 | 	add	fp, #20
2d064     A7 FA 61 FC | 	wrlong	result1, fp
2d068     14 4E 85 F1 | 	sub	fp, #20
2d06c     01 FA 0D F2 | 	cmp	result1, #1 wz
2d070     1C 00 90 5D |  if_ne	jmp	#LR__4583
2d074     04 4E 05 F1 | 	add	fp, #4
2d078     A7 16 02 FB | 	rdlong	arg03, fp
2d07c     04 4E 85 F1 | 	sub	fp, #4
2d080     11 16 06 F1 | 	add	arg03, #17
2d084     0B 05 48 FC | 	wrbyte	#2, arg03
2d088     02 FA 05 F6 | 	mov	result1, #2
2d08c     5C 04 90 FD | 	jmp	#LR__4603
2d090                 | LR__4583
2d090     14 4E 05 F1 | 	add	fp, #20
2d094     A7 FA 01 FB | 	rdlong	result1, fp
2d098     14 4E 85 F1 | 	sub	fp, #20
2d09c     FF FF 7F FF 
2d0a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d0a4     1C 00 90 5D |  if_ne	jmp	#LR__4584
2d0a8     04 4E 05 F1 | 	add	fp, #4
2d0ac     A7 16 02 FB | 	rdlong	arg03, fp
2d0b0     04 4E 85 F1 | 	sub	fp, #4
2d0b4     11 16 06 F1 | 	add	arg03, #17
2d0b8     0B 03 48 FC | 	wrbyte	#1, arg03
2d0bc     01 FA 05 F6 | 	mov	result1, #1
2d0c0     28 04 90 FD | 	jmp	#LR__4603
2d0c4                 | LR__4584
2d0c4     04 4E 05 F1 | 	add	fp, #4
2d0c8     A7 16 02 FB | 	rdlong	arg03, fp
2d0cc     10 4E 05 F1 | 	add	fp, #16
2d0d0     A7 18 02 FB | 	rdlong	arg04, fp
2d0d4     14 4E 85 F1 | 	sub	fp, #20
2d0d8     08 16 06 F1 | 	add	arg03, #8
2d0dc     0B 19 62 FC | 	wrlong	arg04, arg03
2d0e0                 | LR__4585
2d0e0     04 4E 05 F1 | 	add	fp, #4
2d0e4     A7 16 02 FB | 	rdlong	arg03, fp
2d0e8     10 4E 05 F1 | 	add	fp, #16
2d0ec     A7 18 02 FB | 	rdlong	arg04, fp
2d0f0     14 4E 85 F1 | 	sub	fp, #20
2d0f4     18 16 06 F1 | 	add	arg03, #24
2d0f8     0B 19 62 FC | 	wrlong	arg04, arg03
2d0fc                 | LR__4586
2d0fc     14 4E 05 F1 | 	add	fp, #20
2d100     A7 16 0A FB | 	rdlong	arg03, fp wz
2d104     14 4E 85 F1 | 	sub	fp, #20
2d108     28 02 90 AD |  if_e	jmp	#LR__4596
2d10c                 | ' 				while (ofs > bcs) {
2d10c                 | LR__4587
2d10c     08 4E 05 F1 | 	add	fp, #8
2d110     A7 18 02 FB | 	rdlong	arg04, fp
2d114     10 4E 05 F1 | 	add	fp, #16
2d118     A7 16 02 FB | 	rdlong	arg03, fp
2d11c     18 4E 85 F1 | 	sub	fp, #24
2d120     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d124     68 01 90 ED |  if_be	jmp	#LR__4593
2d128     08 4E 05 F1 | 	add	fp, #8
2d12c     A7 18 02 FB | 	rdlong	arg04, fp
2d130     10 4E 05 F1 | 	add	fp, #16
2d134     A7 16 02 FB | 	rdlong	arg03, fp
2d138     0B 19 82 F1 | 	sub	arg04, arg03
2d13c     10 4E 85 F1 | 	sub	fp, #16
2d140     A7 18 62 FC | 	wrlong	arg04, fp
2d144     04 4E 85 F1 | 	sub	fp, #4
2d148     A7 18 02 FB | 	rdlong	arg04, fp
2d14c     0C FB 01 F6 | 	mov	result1, arg04
2d150     14 18 06 F1 | 	add	arg04, #20
2d154     0C 19 02 FB | 	rdlong	arg04, arg04
2d158     14 4E 05 F1 | 	add	fp, #20
2d15c     A7 16 02 FB | 	rdlong	arg03, fp
2d160     0B 19 02 F1 | 	add	arg04, arg03
2d164     14 FA 05 F1 | 	add	result1, #20
2d168     FD 18 62 FC | 	wrlong	arg04, result1
2d16c     14 4E 85 F1 | 	sub	fp, #20
2d170     A7 16 02 FB | 	rdlong	arg03, fp
2d174     04 4E 85 F1 | 	sub	fp, #4
2d178     10 16 06 F1 | 	add	arg03, #16
2d17c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d180     02 16 CE F7 | 	test	arg03, #2 wz
2d184     3C 00 90 AD |  if_e	jmp	#LR__4588
2d188     04 4E 05 F1 | 	add	fp, #4
2d18c     A7 12 02 FB | 	rdlong	arg01, fp
2d190     10 4E 05 F1 | 	add	fp, #16
2d194     A7 14 02 FB | 	rdlong	arg02, fp
2d198     14 4E 85 F1 | 	sub	fp, #20
2d19c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d1a0     14 4E 05 F1 | 	add	fp, #20
2d1a4     A7 FA 61 FC | 	wrlong	result1, fp
2d1a8     00 FA 4D F2 | 	cmps	result1, #0 wz
2d1ac     14 4E 85 F1 | 	sub	fp, #20
2d1b0     08 4E 05 A1 |  if_e	add	fp, #8
2d1b4     A7 00 68 AC |  if_e	wrlong	#0, fp
2d1b8     08 4E 85 A1 |  if_e	sub	fp, #8
2d1bc                 | ' 							ofs = 0; break;
2d1bc     D0 00 90 AD |  if_e	jmp	#LR__4593
2d1c0     24 00 90 FD | 	jmp	#LR__4589
2d1c4                 | LR__4588
2d1c4     04 4E 05 F1 | 	add	fp, #4
2d1c8     A7 12 02 FB | 	rdlong	arg01, fp
2d1cc     10 4E 05 F1 | 	add	fp, #16
2d1d0     A7 14 02 FB | 	rdlong	arg02, fp
2d1d4     14 4E 85 F1 | 	sub	fp, #20
2d1d8     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d1dc     14 4E 05 F1 | 	add	fp, #20
2d1e0     A7 FA 61 FC | 	wrlong	result1, fp
2d1e4     14 4E 85 F1 | 	sub	fp, #20
2d1e8                 | LR__4589
2d1e8     14 4E 05 F1 | 	add	fp, #20
2d1ec     A7 16 02 FB | 	rdlong	arg03, fp
2d1f0     14 4E 85 F1 | 	sub	fp, #20
2d1f4     FF FF 7F FF 
2d1f8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d1fc     1C 00 90 5D |  if_ne	jmp	#LR__4590
2d200     04 4E 05 F1 | 	add	fp, #4
2d204     A7 16 02 FB | 	rdlong	arg03, fp
2d208     04 4E 85 F1 | 	sub	fp, #4
2d20c     11 16 06 F1 | 	add	arg03, #17
2d210     0B 03 48 FC | 	wrbyte	#1, arg03
2d214     01 FA 05 F6 | 	mov	result1, #1
2d218     D0 02 90 FD | 	jmp	#LR__4603
2d21c                 | LR__4590
2d21c     14 4E 05 F1 | 	add	fp, #20
2d220     A7 16 02 FB | 	rdlong	arg03, fp
2d224     14 4E 85 F1 | 	sub	fp, #20
2d228     02 16 16 F2 | 	cmp	arg03, #2 wc
2d22c     24 00 90 CD |  if_b	jmp	#LR__4591
2d230     10 4E 05 F1 | 	add	fp, #16
2d234     A7 18 02 FB | 	rdlong	arg04, fp
2d238     04 4E 05 F1 | 	add	fp, #4
2d23c     A7 16 02 FB | 	rdlong	arg03, fp
2d240     14 4E 85 F1 | 	sub	fp, #20
2d244     18 18 06 F1 | 	add	arg04, #24
2d248     0C 19 02 FB | 	rdlong	arg04, arg04
2d24c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d250     1C 00 90 CD |  if_b	jmp	#LR__4592
2d254                 | LR__4591
2d254     04 4E 05 F1 | 	add	fp, #4
2d258     A7 16 02 FB | 	rdlong	arg03, fp
2d25c     04 4E 85 F1 | 	sub	fp, #4
2d260     11 16 06 F1 | 	add	arg03, #17
2d264     0B 05 48 FC | 	wrbyte	#2, arg03
2d268     02 FA 05 F6 | 	mov	result1, #2
2d26c     7C 02 90 FD | 	jmp	#LR__4603
2d270                 | LR__4592
2d270     04 4E 05 F1 | 	add	fp, #4
2d274     A7 18 02 FB | 	rdlong	arg04, fp
2d278     10 4E 05 F1 | 	add	fp, #16
2d27c     A7 16 02 FB | 	rdlong	arg03, fp
2d280     14 4E 85 F1 | 	sub	fp, #20
2d284     18 18 06 F1 | 	add	arg04, #24
2d288     0C 17 62 FC | 	wrlong	arg03, arg04
2d28c     7C FE 9F FD | 	jmp	#LR__4587
2d290                 | LR__4593
2d290     04 4E 05 F1 | 	add	fp, #4
2d294     A7 16 02 FB | 	rdlong	arg03, fp
2d298     0B 13 02 F6 | 	mov	arg01, arg03
2d29c     14 16 06 F1 | 	add	arg03, #20
2d2a0     0B 15 02 FB | 	rdlong	arg02, arg03
2d2a4     04 4E 05 F1 | 	add	fp, #4
2d2a8     A7 16 02 FB | 	rdlong	arg03, fp
2d2ac     0B 15 02 F1 | 	add	arg02, arg03
2d2b0     14 12 06 F1 | 	add	arg01, #20
2d2b4     09 15 62 FC | 	wrlong	arg02, arg01
2d2b8     A7 16 02 FB | 	rdlong	arg03, fp
2d2bc     08 4E 85 F1 | 	sub	fp, #8
2d2c0     FF 17 CE F7 | 	test	arg03, #511 wz
2d2c4     6C 00 90 AD |  if_e	jmp	#LR__4595
2d2c8     10 4E 05 F1 | 	add	fp, #16
2d2cc     A7 12 02 FB | 	rdlong	arg01, fp
2d2d0     04 4E 05 F1 | 	add	fp, #4
2d2d4     A7 14 02 FB | 	rdlong	arg02, fp
2d2d8     14 4E 85 F1 | 	sub	fp, #20
2d2dc     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d2e0     1C 4E 05 F1 | 	add	fp, #28
2d2e4     A7 FA 61 FC | 	wrlong	result1, fp
2d2e8     1C 4E 85 F1 | 	sub	fp, #28
2d2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2f0     1C 00 90 5D |  if_ne	jmp	#LR__4594
2d2f4     04 4E 05 F1 | 	add	fp, #4
2d2f8     A7 16 02 FB | 	rdlong	arg03, fp
2d2fc     04 4E 85 F1 | 	sub	fp, #4
2d300     11 16 06 F1 | 	add	arg03, #17
2d304     0B 05 48 FC | 	wrbyte	#2, arg03
2d308     02 FA 05 F6 | 	mov	result1, #2
2d30c     DC 01 90 FD | 	jmp	#LR__4603
2d310                 | LR__4594
2d310     1C 4E 05 F1 | 	add	fp, #28
2d314     A7 18 02 FB | 	rdlong	arg04, fp
2d318     14 4E 85 F1 | 	sub	fp, #20
2d31c     A7 16 02 FB | 	rdlong	arg03, fp
2d320     09 16 46 F0 | 	shr	arg03, #9
2d324     0B 19 02 F1 | 	add	arg04, arg03
2d328     14 4E 05 F1 | 	add	fp, #20
2d32c     A7 18 62 FC | 	wrlong	arg04, fp
2d330     1C 4E 85 F1 | 	sub	fp, #28
2d334                 | LR__4595
2d334                 | LR__4596
2d334                 | LR__4597
2d334     04 4E 05 F1 | 	add	fp, #4
2d338     A7 18 02 FB | 	rdlong	arg04, fp
2d33c     0C 17 02 F6 | 	mov	arg03, arg04
2d340     04 4E 85 F1 | 	sub	fp, #4
2d344     14 16 06 F1 | 	add	arg03, #20
2d348     0B 17 02 FB | 	rdlong	arg03, arg03
2d34c     0C 18 06 F1 | 	add	arg04, #12
2d350     0C 19 02 FB | 	rdlong	arg04, arg04
2d354     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d358     3C 00 90 ED |  if_be	jmp	#LR__4598
2d35c     04 4E 05 F1 | 	add	fp, #4
2d360     A7 18 02 FB | 	rdlong	arg04, fp
2d364     0C 17 02 F6 | 	mov	arg03, arg04
2d368     14 18 06 F1 | 	add	arg04, #20
2d36c     0C 19 02 FB | 	rdlong	arg04, arg04
2d370     0C 16 06 F1 | 	add	arg03, #12
2d374     0B 19 62 FC | 	wrlong	arg04, arg03
2d378     A7 18 02 FB | 	rdlong	arg04, fp
2d37c     0C 17 02 F6 | 	mov	arg03, arg04
2d380     04 4E 85 F1 | 	sub	fp, #4
2d384     10 18 06 F1 | 	add	arg04, #16
2d388     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d38c     40 18 46 F5 | 	or	arg04, #64
2d390     10 16 06 F1 | 	add	arg03, #16
2d394     0B 19 42 FC | 	wrbyte	arg04, arg03
2d398                 | LR__4598
2d398     04 4E 05 F1 | 	add	fp, #4
2d39c     A7 16 02 FB | 	rdlong	arg03, fp
2d3a0     04 4E 85 F1 | 	sub	fp, #4
2d3a4     14 16 06 F1 | 	add	arg03, #20
2d3a8     0B 17 02 FB | 	rdlong	arg03, arg03
2d3ac     FF 17 CE F7 | 	test	arg03, #511 wz
2d3b0     2C 01 90 AD |  if_e	jmp	#LR__4602
2d3b4     04 4E 05 F1 | 	add	fp, #4
2d3b8     A7 18 02 FB | 	rdlong	arg04, fp
2d3bc     18 4E 05 F1 | 	add	fp, #24
2d3c0     A7 16 02 FB | 	rdlong	arg03, fp
2d3c4     1C 4E 85 F1 | 	sub	fp, #28
2d3c8     1C 18 06 F1 | 	add	arg04, #28
2d3cc     0C 19 02 FB | 	rdlong	arg04, arg04
2d3d0     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d3d4     08 01 90 AD |  if_e	jmp	#LR__4602
2d3d8     04 4E 05 F1 | 	add	fp, #4
2d3dc     A7 16 02 FB | 	rdlong	arg03, fp
2d3e0     04 4E 85 F1 | 	sub	fp, #4
2d3e4     10 16 06 F1 | 	add	arg03, #16
2d3e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d3ec     80 16 CE F7 | 	test	arg03, #128 wz
2d3f0     7C 00 90 AD |  if_e	jmp	#LR__4600
2d3f4     10 4E 05 F1 | 	add	fp, #16
2d3f8     A7 16 02 FB | 	rdlong	arg03, fp
2d3fc     01 16 06 F1 | 	add	arg03, #1
2d400     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d404     0C 4E 85 F1 | 	sub	fp, #12
2d408     A7 16 02 FB | 	rdlong	arg03, fp
2d40c     0B 15 02 F6 | 	mov	arg02, arg03
2d410     28 14 06 F1 | 	add	arg02, #40
2d414     04 4E 85 F1 | 	sub	fp, #4
2d418     1C 16 06 F1 | 	add	arg03, #28
2d41c     0B 17 02 FB | 	rdlong	arg03, arg03
2d420     01 18 06 F6 | 	mov	arg04, #1
2d424     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d428     00 FA 0D F2 | 	cmp	result1, #0 wz
2d42c     1C 00 90 AD |  if_e	jmp	#LR__4599
2d430     04 4E 05 F1 | 	add	fp, #4
2d434     A7 16 02 FB | 	rdlong	arg03, fp
2d438     04 4E 85 F1 | 	sub	fp, #4
2d43c     11 16 06 F1 | 	add	arg03, #17
2d440     0B 03 48 FC | 	wrbyte	#1, arg03
2d444     01 FA 05 F6 | 	mov	result1, #1
2d448     A0 00 90 FD | 	jmp	#LR__4603
2d44c                 | LR__4599
2d44c     04 4E 05 F1 | 	add	fp, #4
2d450     A7 18 02 FB | 	rdlong	arg04, fp
2d454     0C 17 02 F6 | 	mov	arg03, arg04
2d458     04 4E 85 F1 | 	sub	fp, #4
2d45c     10 18 06 F1 | 	add	arg04, #16
2d460     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d464     7F 18 06 F5 | 	and	arg04, #127
2d468     10 16 06 F1 | 	add	arg03, #16
2d46c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d470                 | LR__4600
2d470     10 4E 05 F1 | 	add	fp, #16
2d474     A7 16 02 FB | 	rdlong	arg03, fp
2d478     01 16 06 F1 | 	add	arg03, #1
2d47c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d480     0C 4E 85 F1 | 	sub	fp, #12
2d484     A7 14 02 FB | 	rdlong	arg02, fp
2d488     28 14 06 F1 | 	add	arg02, #40
2d48c     18 4E 05 F1 | 	add	fp, #24
2d490     A7 16 02 FB | 	rdlong	arg03, fp
2d494     1C 4E 85 F1 | 	sub	fp, #28
2d498     01 18 06 F6 | 	mov	arg04, #1
2d49c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d4a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4a4     1C 00 90 AD |  if_e	jmp	#LR__4601
2d4a8     04 4E 05 F1 | 	add	fp, #4
2d4ac     A7 16 02 FB | 	rdlong	arg03, fp
2d4b0     04 4E 85 F1 | 	sub	fp, #4
2d4b4     11 16 06 F1 | 	add	arg03, #17
2d4b8     0B 03 48 FC | 	wrbyte	#1, arg03
2d4bc     01 FA 05 F6 | 	mov	result1, #1
2d4c0     28 00 90 FD | 	jmp	#LR__4603
2d4c4                 | LR__4601
2d4c4     04 4E 05 F1 | 	add	fp, #4
2d4c8     A7 18 02 FB | 	rdlong	arg04, fp
2d4cc     18 4E 05 F1 | 	add	fp, #24
2d4d0     A7 16 02 FB | 	rdlong	arg03, fp
2d4d4     1C 4E 85 F1 | 	sub	fp, #28
2d4d8     1C 18 06 F1 | 	add	arg04, #28
2d4dc     0C 17 62 FC | 	wrlong	arg03, arg04
2d4e0                 | LR__4602
2d4e0                 | ' 
2d4e0                 | ' 			fp->sect = nsect;
2d4e0                 | ' 		}
2d4e0                 | ' 	}
2d4e0                 | ' 
2d4e0                 | ' 	return res ;
2d4e0     0C 4E 05 F1 | 	add	fp, #12
2d4e4     A7 FA 01 FB | 	rdlong	result1, fp
2d4e8     0C 4E 85 F1 | 	sub	fp, #12
2d4ec                 | LR__4603
2d4ec     A7 F0 03 F6 | 	mov	ptra, fp
2d4f0     B2 00 A0 FD | 	call	#popregs_
2d4f4                 | _fatfs_cc_f_lseek_ret
2d4f4     2D 00 64 FD | 	ret
2d4f8                 | 
2d4f8                 | _fatfs_cc_f_opendir
2d4f8     01 4A 05 F6 | 	mov	COUNT_, #1
2d4fc     A8 00 A0 FD | 	call	#pushregs_
2d500     14 F0 07 F1 | 	add	ptra, #20
2d504     04 4E 05 F1 | 	add	fp, #4
2d508     A7 12 62 FC | 	wrlong	arg01, fp
2d50c     04 4E 05 F1 | 	add	fp, #4
2d510     A7 14 62 FC | 	wrlong	arg02, fp
2d514     04 4E 85 F1 | 	sub	fp, #4
2d518     A7 16 0A FB | 	rdlong	arg03, fp wz
2d51c     04 4E 85 F1 | 	sub	fp, #4
2d520     09 FA 05 A6 |  if_e	mov	result1, #9
2d524     78 01 90 AD |  if_e	jmp	#LR__4616
2d528     08 4E 05 F1 | 	add	fp, #8
2d52c     A7 12 02 F6 | 	mov	arg01, fp
2d530     08 4E 05 F1 | 	add	fp, #8
2d534     A7 14 02 F6 | 	mov	arg02, fp
2d538     10 4E 85 F1 | 	sub	fp, #16
2d53c     00 16 06 F6 | 	mov	arg03, #0
2d540     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d544     0C 4E 05 F1 | 	add	fp, #12
2d548     A7 FA 61 FC | 	wrlong	result1, fp
2d54c     0C 4E 85 F1 | 	sub	fp, #12
2d550     00 FA 0D F2 | 	cmp	result1, #0 wz
2d554     20 01 90 5D |  if_ne	jmp	#LR__4615
2d558     04 4E 05 F1 | 	add	fp, #4
2d55c     A7 16 02 FB | 	rdlong	arg03, fp
2d560     0C 4E 05 F1 | 	add	fp, #12
2d564     A7 FA 01 FB | 	rdlong	result1, fp
2d568     0B FB 61 FC | 	wrlong	result1, arg03
2d56c     0C 4E 85 F1 | 	sub	fp, #12
2d570     A7 12 02 FB | 	rdlong	arg01, fp
2d574     04 4E 05 F1 | 	add	fp, #4
2d578     A7 14 02 FB | 	rdlong	arg02, fp
2d57c     08 4E 85 F1 | 	sub	fp, #8
2d580     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d584     0C 4E 05 F1 | 	add	fp, #12
2d588     A7 FA 61 FC | 	wrlong	result1, fp
2d58c     0C 4E 85 F1 | 	sub	fp, #12
2d590     00 FA 0D F2 | 	cmp	result1, #0 wz
2d594     C4 00 90 5D |  if_ne	jmp	#LR__4614
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 16 02 FB | 	rdlong	arg03, fp
2d5a0     04 4E 85 F1 | 	sub	fp, #4
2d5a4     2B 16 06 F1 | 	add	arg03, #43
2d5a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d5ac     80 16 CE F7 | 	test	arg03, #128 wz
2d5b0     58 00 90 5D |  if_ne	jmp	#LR__4612
2d5b4     04 4E 05 F1 | 	add	fp, #4
2d5b8     A7 16 02 FB | 	rdlong	arg03, fp
2d5bc     04 4E 85 F1 | 	sub	fp, #4
2d5c0     06 16 06 F1 | 	add	arg03, #6
2d5c4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d5c8     10 16 CE F7 | 	test	arg03, #16 wz
2d5cc     30 00 90 AD |  if_e	jmp	#LR__4610
2d5d0     04 4E 05 F1 | 	add	fp, #4
2d5d4     A7 16 02 FB | 	rdlong	arg03, fp
2d5d8     0B 1F 02 F6 | 	mov	local01, arg03
2d5dc     0C 4E 05 F1 | 	add	fp, #12
2d5e0     A7 12 02 FB | 	rdlong	arg01, fp
2d5e4     10 4E 85 F1 | 	sub	fp, #16
2d5e8     1C 16 06 F1 | 	add	arg03, #28
2d5ec     0B 15 02 FB | 	rdlong	arg02, arg03
2d5f0     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d5f4     08 1E 06 F1 | 	add	local01, #8
2d5f8     0F FB 61 FC | 	wrlong	result1, local01
2d5fc     0C 00 90 FD | 	jmp	#LR__4611
2d600                 | LR__4610
2d600     0C 4E 05 F1 | 	add	fp, #12
2d604     A7 0A 68 FC | 	wrlong	#5, fp
2d608     0C 4E 85 F1 | 	sub	fp, #12
2d60c                 | LR__4611
2d60c                 | LR__4612
2d60c     0C 4E 05 F1 | 	add	fp, #12
2d610     A7 1E 0A FB | 	rdlong	local01, fp wz
2d614     0C 4E 85 F1 | 	sub	fp, #12
2d618     40 00 90 5D |  if_ne	jmp	#LR__4613
2d61c     04 4E 05 F1 | 	add	fp, #4
2d620     A7 1E 02 FB | 	rdlong	local01, fp
2d624     0C 4E 05 F1 | 	add	fp, #12
2d628     A7 16 02 FB | 	rdlong	arg03, fp
2d62c     06 16 06 F1 | 	add	arg03, #6
2d630     0B 17 E2 FA | 	rdword	arg03, arg03
2d634     04 1E 06 F1 | 	add	local01, #4
2d638     0F 17 52 FC | 	wrword	arg03, local01
2d63c     0C 4E 85 F1 | 	sub	fp, #12
2d640     A7 12 02 FB | 	rdlong	arg01, fp
2d644     04 4E 85 F1 | 	sub	fp, #4
2d648     00 14 06 F6 | 	mov	arg02, #0
2d64c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d650     0C 4E 05 F1 | 	add	fp, #12
2d654     A7 FA 61 FC | 	wrlong	result1, fp
2d658     0C 4E 85 F1 | 	sub	fp, #12
2d65c                 | LR__4613
2d65c                 | LR__4614
2d65c     0C 4E 05 F1 | 	add	fp, #12
2d660     A7 1E 02 FB | 	rdlong	local01, fp
2d664     0C 4E 85 F1 | 	sub	fp, #12
2d668     04 1E 0E F2 | 	cmp	local01, #4 wz
2d66c     0C 4E 05 A1 |  if_e	add	fp, #12
2d670     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d674     0C 4E 85 A1 |  if_e	sub	fp, #12
2d678                 | LR__4615
2d678     0C 4E 05 F1 | 	add	fp, #12
2d67c     A7 1E 0A FB | 	rdlong	local01, fp wz
2d680     0C 4E 85 F1 | 	sub	fp, #12
2d684     04 4E 05 51 |  if_ne	add	fp, #4
2d688     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d68c     04 4E 85 51 |  if_ne	sub	fp, #4
2d690     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d694                 | ' 
2d694                 | ' 	return res ;
2d694     0C 4E 05 F1 | 	add	fp, #12
2d698     A7 FA 01 FB | 	rdlong	result1, fp
2d69c     0C 4E 85 F1 | 	sub	fp, #12
2d6a0                 | LR__4616
2d6a0     A7 F0 03 F6 | 	mov	ptra, fp
2d6a4     B2 00 A0 FD | 	call	#popregs_
2d6a8                 | _fatfs_cc_f_opendir_ret
2d6a8     2D 00 64 FD | 	ret
2d6ac                 | 
2d6ac                 | _fatfs_cc_f_closedir
2d6ac     00 4A 05 F6 | 	mov	COUNT_, #0
2d6b0     A8 00 A0 FD | 	call	#pushregs_
2d6b4     10 F0 07 F1 | 	add	ptra, #16
2d6b8     04 4E 05 F1 | 	add	fp, #4
2d6bc     A7 12 62 FC | 	wrlong	arg01, fp
2d6c0     08 4E 05 F1 | 	add	fp, #8
2d6c4     A7 14 02 F6 | 	mov	arg02, fp
2d6c8     0C 4E 85 F1 | 	sub	fp, #12
2d6cc     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d6d0     08 4E 05 F1 | 	add	fp, #8
2d6d4     A7 FA 61 FC | 	wrlong	result1, fp
2d6d8     08 4E 85 F1 | 	sub	fp, #8
2d6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6e0     04 4E 05 A1 |  if_e	add	fp, #4
2d6e4     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d6e8     04 4E 85 A1 |  if_e	sub	fp, #4
2d6ec     FD 00 68 AC |  if_e	wrlong	#0, result1
2d6f0                 | ' 
2d6f0                 | ' 
2d6f0                 | ' 
2d6f0                 | ' 
2d6f0                 | ' 		dp->obj.fs = 0;
2d6f0                 | ' #line 4633 "ff.c"
2d6f0                 | ' 	}
2d6f0                 | ' 	return res;
2d6f0     08 4E 05 F1 | 	add	fp, #8
2d6f4     A7 FA 01 FB | 	rdlong	result1, fp
2d6f8     08 4E 85 F1 | 	sub	fp, #8
2d6fc     A7 F0 03 F6 | 	mov	ptra, fp
2d700     B2 00 A0 FD | 	call	#popregs_
2d704                 | _fatfs_cc_f_closedir_ret
2d704     2D 00 64 FD | 	ret
2d708                 | 
2d708                 | _fatfs_cc_f_readdir
2d708     00 4A 05 F6 | 	mov	COUNT_, #0
2d70c     A8 00 A0 FD | 	call	#pushregs_
2d710     14 F0 07 F1 | 	add	ptra, #20
2d714     04 4E 05 F1 | 	add	fp, #4
2d718     A7 12 62 FC | 	wrlong	arg01, fp
2d71c     04 4E 05 F1 | 	add	fp, #4
2d720     A7 14 62 FC | 	wrlong	arg02, fp
2d724     04 4E 85 F1 | 	sub	fp, #4
2d728     A7 12 02 FB | 	rdlong	arg01, fp
2d72c     0C 4E 05 F1 | 	add	fp, #12
2d730     A7 14 02 F6 | 	mov	arg02, fp
2d734     10 4E 85 F1 | 	sub	fp, #16
2d738     54 DD BF FD | 	call	#_fatfs_cc_validate
2d73c     0C 4E 05 F1 | 	add	fp, #12
2d740     A7 FA 61 FC | 	wrlong	result1, fp
2d744     0C 4E 85 F1 | 	sub	fp, #12
2d748     00 FA 0D F2 | 	cmp	result1, #0 wz
2d74c     BC 00 90 5D |  if_ne	jmp	#LR__4623
2d750     08 4E 05 F1 | 	add	fp, #8
2d754     A7 FA 09 FB | 	rdlong	result1, fp wz
2d758     08 4E 85 F1 | 	sub	fp, #8
2d75c     24 00 90 5D |  if_ne	jmp	#LR__4620
2d760     04 4E 05 F1 | 	add	fp, #4
2d764     A7 12 02 FB | 	rdlong	arg01, fp
2d768     04 4E 85 F1 | 	sub	fp, #4
2d76c     00 14 06 F6 | 	mov	arg02, #0
2d770     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d774     0C 4E 05 F1 | 	add	fp, #12
2d778     A7 FA 61 FC | 	wrlong	result1, fp
2d77c     0C 4E 85 F1 | 	sub	fp, #12
2d780     88 00 90 FD | 	jmp	#LR__4622
2d784                 | LR__4620
2d784     04 4E 05 F1 | 	add	fp, #4
2d788     A7 12 02 FB | 	rdlong	arg01, fp
2d78c     04 4E 85 F1 | 	sub	fp, #4
2d790     00 14 06 F6 | 	mov	arg02, #0
2d794     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d798     0C 4E 05 F1 | 	add	fp, #12
2d79c     A7 FA 61 FC | 	wrlong	result1, fp
2d7a0     0C 4E 85 F1 | 	sub	fp, #12
2d7a4     04 FA 0D F2 | 	cmp	result1, #4 wz
2d7a8     0C 4E 05 A1 |  if_e	add	fp, #12
2d7ac     A7 00 68 AC |  if_e	wrlong	#0, fp
2d7b0     0C 4E 85 A1 |  if_e	sub	fp, #12
2d7b4     0C 4E 05 F1 | 	add	fp, #12
2d7b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2d7bc     0C 4E 85 F1 | 	sub	fp, #12
2d7c0     48 00 90 5D |  if_ne	jmp	#LR__4621
2d7c4     04 4E 05 F1 | 	add	fp, #4
2d7c8     A7 12 02 FB | 	rdlong	arg01, fp
2d7cc     04 4E 05 F1 | 	add	fp, #4
2d7d0     A7 14 02 FB | 	rdlong	arg02, fp
2d7d4     08 4E 85 F1 | 	sub	fp, #8
2d7d8     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d7dc     04 4E 05 F1 | 	add	fp, #4
2d7e0     A7 12 02 FB | 	rdlong	arg01, fp
2d7e4     04 4E 85 F1 | 	sub	fp, #4
2d7e8     00 14 06 F6 | 	mov	arg02, #0
2d7ec     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d7f0     0C 4E 05 F1 | 	add	fp, #12
2d7f4     A7 FA 61 FC | 	wrlong	result1, fp
2d7f8     0C 4E 85 F1 | 	sub	fp, #12
2d7fc     04 FA 0D F2 | 	cmp	result1, #4 wz
2d800     0C 4E 05 A1 |  if_e	add	fp, #12
2d804     A7 00 68 AC |  if_e	wrlong	#0, fp
2d808     0C 4E 85 A1 |  if_e	sub	fp, #12
2d80c                 | LR__4621
2d80c                 | LR__4622
2d80c                 | LR__4623
2d80c                 | ' 			}
2d80c                 | ' 			;
2d80c                 | ' 		}
2d80c                 | ' 	}
2d80c                 | ' 	return res ;
2d80c     0C 4E 05 F1 | 	add	fp, #12
2d810     A7 FA 01 FB | 	rdlong	result1, fp
2d814     0C 4E 85 F1 | 	sub	fp, #12
2d818     A7 F0 03 F6 | 	mov	ptra, fp
2d81c     B2 00 A0 FD | 	call	#popregs_
2d820                 | _fatfs_cc_f_readdir_ret
2d820     2D 00 64 FD | 	ret
2d824                 | 
2d824                 | _fatfs_cc_f_stat
2d824     00 4A 05 F6 | 	mov	COUNT_, #0
2d828     A8 00 A0 FD | 	call	#pushregs_
2d82c     40 F0 07 F1 | 	add	ptra, #64
2d830     04 4E 05 F1 | 	add	fp, #4
2d834     A7 12 62 FC | 	wrlong	arg01, fp
2d838     04 4E 05 F1 | 	add	fp, #4
2d83c     A7 14 62 FC | 	wrlong	arg02, fp
2d840     04 4E 85 F1 | 	sub	fp, #4
2d844     A7 12 02 F6 | 	mov	arg01, fp
2d848     0C 4E 05 F1 | 	add	fp, #12
2d84c     A7 14 02 F6 | 	mov	arg02, fp
2d850     10 4E 85 F1 | 	sub	fp, #16
2d854     00 16 06 F6 | 	mov	arg03, #0
2d858     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2d85c     0C 4E 05 F1 | 	add	fp, #12
2d860     A7 FA 61 FC | 	wrlong	result1, fp
2d864     0C 4E 85 F1 | 	sub	fp, #12
2d868     00 FA 0D F2 | 	cmp	result1, #0 wz
2d86c     74 00 90 5D |  if_ne	jmp	#LR__4633
2d870     10 4E 05 F1 | 	add	fp, #16
2d874     A7 12 02 F6 | 	mov	arg01, fp
2d878     0C 4E 85 F1 | 	sub	fp, #12
2d87c     A7 14 02 FB | 	rdlong	arg02, fp
2d880     04 4E 85 F1 | 	sub	fp, #4
2d884     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2d888     0C 4E 05 F1 | 	add	fp, #12
2d88c     A7 FA 61 FC | 	wrlong	result1, fp
2d890     0C 4E 85 F1 | 	sub	fp, #12
2d894     00 FA 0D F2 | 	cmp	result1, #0 wz
2d898     48 00 90 5D |  if_ne	jmp	#LR__4632
2d89c     3B 4E 05 F1 | 	add	fp, #59
2d8a0     A7 FA C1 FA | 	rdbyte	result1, fp
2d8a4     3B 4E 85 F1 | 	sub	fp, #59
2d8a8     80 FA CD F7 | 	test	result1, #128 wz
2d8ac     0C 4E 05 51 |  if_ne	add	fp, #12
2d8b0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d8b4     0C 4E 85 51 |  if_ne	sub	fp, #12
2d8b8     28 00 90 5D |  if_ne	jmp	#LR__4631
2d8bc     08 4E 05 F1 | 	add	fp, #8
2d8c0     A7 FA 09 FB | 	rdlong	result1, fp wz
2d8c4     08 4E 85 F1 | 	sub	fp, #8
2d8c8     18 00 90 AD |  if_e	jmp	#LR__4630
2d8cc     10 4E 05 F1 | 	add	fp, #16
2d8d0     A7 12 02 F6 | 	mov	arg01, fp
2d8d4     08 4E 85 F1 | 	sub	fp, #8
2d8d8     A7 14 02 FB | 	rdlong	arg02, fp
2d8dc     08 4E 85 F1 | 	sub	fp, #8
2d8e0     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d8e4                 | LR__4630
2d8e4                 | LR__4631
2d8e4                 | LR__4632
2d8e4                 | LR__4633
2d8e4                 | ' 			}
2d8e4                 | ' 		}
2d8e4                 | ' 		;
2d8e4                 | ' 	}
2d8e4                 | ' 
2d8e4                 | ' 	return res ;
2d8e4     0C 4E 05 F1 | 	add	fp, #12
2d8e8     A7 FA 01 FB | 	rdlong	result1, fp
2d8ec     0C 4E 85 F1 | 	sub	fp, #12
2d8f0     A7 F0 03 F6 | 	mov	ptra, fp
2d8f4     B2 00 A0 FD | 	call	#popregs_
2d8f8                 | _fatfs_cc_f_stat_ret
2d8f8     2D 00 64 FD | 	ret
2d8fc                 | 
2d8fc                 | _fatfs_cc_f_unlink
2d8fc     00 4A 05 F6 | 	mov	COUNT_, #0
2d900     A8 00 A0 FD | 	call	#pushregs_
2d904     74 F0 07 F1 | 	add	ptra, #116
2d908     04 4E 05 F1 | 	add	fp, #4
2d90c     A7 12 62 FC | 	wrlong	arg01, fp
2d910     68 4E 05 F1 | 	add	fp, #104
2d914     A7 00 68 FC | 	wrlong	#0, fp
2d918     68 4E 85 F1 | 	sub	fp, #104
2d91c     A7 12 02 F6 | 	mov	arg01, fp
2d920     6C 4E 05 F1 | 	add	fp, #108
2d924     A7 14 02 F6 | 	mov	arg02, fp
2d928     70 4E 85 F1 | 	sub	fp, #112
2d92c     02 16 06 F6 | 	mov	arg03, #2
2d930     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2d934     08 4E 05 F1 | 	add	fp, #8
2d938     A7 FA 61 FC | 	wrlong	result1, fp
2d93c     08 4E 85 F1 | 	sub	fp, #8
2d940     00 FA 0D F2 | 	cmp	result1, #0 wz
2d944     E4 01 90 5D |  if_ne	jmp	#LR__4648
2d948     70 4E 05 F1 | 	add	fp, #112
2d94c     A7 16 02 FB | 	rdlong	arg03, fp
2d950     64 4E 85 F1 | 	sub	fp, #100
2d954     A7 16 62 FC | 	wrlong	arg03, fp
2d958     A7 12 02 F6 | 	mov	arg01, fp
2d95c     08 4E 85 F1 | 	sub	fp, #8
2d960     A7 14 02 FB | 	rdlong	arg02, fp
2d964     04 4E 85 F1 | 	sub	fp, #4
2d968     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2d96c     08 4E 05 F1 | 	add	fp, #8
2d970     A7 FA 61 FC | 	wrlong	result1, fp
2d974     00 FA 4D F2 | 	cmps	result1, #0 wz
2d978     08 4E 85 F1 | 	sub	fp, #8
2d97c     AC 01 90 5D |  if_ne	jmp	#LR__4647
2d980     37 4E 05 F1 | 	add	fp, #55
2d984     A7 FA C1 FA | 	rdbyte	result1, fp
2d988     37 4E 85 F1 | 	sub	fp, #55
2d98c     80 FA CD F7 | 	test	result1, #128 wz
2d990     08 4E 05 51 |  if_ne	add	fp, #8
2d994     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d998     08 4E 85 51 |  if_ne	sub	fp, #8
2d99c     1C 00 90 5D |  if_ne	jmp	#LR__4640
2d9a0     12 4E 05 F1 | 	add	fp, #18
2d9a4     A7 FA C1 FA | 	rdbyte	result1, fp
2d9a8     12 4E 85 F1 | 	sub	fp, #18
2d9ac     01 FA CD F7 | 	test	result1, #1 wz
2d9b0     08 4E 05 51 |  if_ne	add	fp, #8
2d9b4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2d9b8     08 4E 85 51 |  if_ne	sub	fp, #8
2d9bc                 | LR__4640
2d9bc     08 4E 05 F1 | 	add	fp, #8
2d9c0     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9c4     08 4E 85 F1 | 	sub	fp, #8
2d9c8     C8 00 90 5D |  if_ne	jmp	#LR__4643
2d9cc     70 4E 05 F1 | 	add	fp, #112
2d9d0     A7 12 02 FB | 	rdlong	arg01, fp
2d9d4     48 4E 85 F1 | 	sub	fp, #72
2d9d8     A7 14 02 FB | 	rdlong	arg02, fp
2d9dc     28 4E 85 F1 | 	sub	fp, #40
2d9e0     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2d9e4     6C 4E 05 F1 | 	add	fp, #108
2d9e8     A7 FA 61 FC | 	wrlong	result1, fp
2d9ec     5A 4E 85 F1 | 	sub	fp, #90
2d9f0     A7 FA C1 FA | 	rdbyte	result1, fp
2d9f4     12 4E 85 F1 | 	sub	fp, #18
2d9f8     10 FA CD F7 | 	test	result1, #16 wz
2d9fc     94 00 90 AD |  if_e	jmp	#LR__4642
2da00     70 4E 05 F1 | 	add	fp, #112
2da04     A7 FA 01 FB | 	rdlong	result1, fp
2da08     34 4E 85 F1 | 	sub	fp, #52
2da0c     A7 FA 61 FC | 	wrlong	result1, fp
2da10     30 4E 05 F1 | 	add	fp, #48
2da14     A7 16 02 FB | 	rdlong	arg03, fp
2da18     28 4E 85 F1 | 	sub	fp, #40
2da1c     A7 16 62 FC | 	wrlong	arg03, fp
2da20     08 4E 85 F1 | 	sub	fp, #8
2da24     A7 12 02 F6 | 	mov	arg01, fp
2da28     3C 4E 85 F1 | 	sub	fp, #60
2da2c     00 14 06 F6 | 	mov	arg02, #0
2da30     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2da34     08 4E 05 F1 | 	add	fp, #8
2da38     A7 FA 61 FC | 	wrlong	result1, fp
2da3c     08 4E 85 F1 | 	sub	fp, #8
2da40     00 FA 0D F2 | 	cmp	result1, #0 wz
2da44     4C 00 90 5D |  if_ne	jmp	#LR__4641
2da48     3C 4E 05 F1 | 	add	fp, #60
2da4c     A7 12 02 F6 | 	mov	arg01, fp
2da50     3C 4E 85 F1 | 	sub	fp, #60
2da54     00 14 06 F6 | 	mov	arg02, #0
2da58     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2da5c     08 4E 05 F1 | 	add	fp, #8
2da60     A7 FA 61 FC | 	wrlong	result1, fp
2da64     00 FA 4D F2 | 	cmps	result1, #0 wz
2da68     08 4E 85 F1 | 	sub	fp, #8
2da6c     08 4E 05 A1 |  if_e	add	fp, #8
2da70     A7 0E 68 AC |  if_e	wrlong	#7, fp
2da74     08 4E 85 A1 |  if_e	sub	fp, #8
2da78     08 4E 05 F1 | 	add	fp, #8
2da7c     A7 FA 01 FB | 	rdlong	result1, fp
2da80     08 4E 85 F1 | 	sub	fp, #8
2da84     04 FA 0D F2 | 	cmp	result1, #4 wz
2da88     08 4E 05 A1 |  if_e	add	fp, #8
2da8c     A7 00 68 AC |  if_e	wrlong	#0, fp
2da90     08 4E 85 A1 |  if_e	sub	fp, #8
2da94                 | LR__4641
2da94                 | LR__4642
2da94                 | LR__4643
2da94     08 4E 05 F1 | 	add	fp, #8
2da98     A7 FA 09 FB | 	rdlong	result1, fp wz
2da9c     08 4E 85 F1 | 	sub	fp, #8
2daa0     88 00 90 5D |  if_ne	jmp	#LR__4646
2daa4     0C 4E 05 F1 | 	add	fp, #12
2daa8     A7 12 02 F6 | 	mov	arg01, fp
2daac     0C 4E 85 F1 | 	sub	fp, #12
2dab0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2dab4     08 4E 05 F1 | 	add	fp, #8
2dab8     A7 FA 61 FC | 	wrlong	result1, fp
2dabc     08 4E 85 F1 | 	sub	fp, #8
2dac0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dac4     38 00 90 5D |  if_ne	jmp	#LR__4644
2dac8     6C 4E 05 F1 | 	add	fp, #108
2dacc     A7 FA 09 FB | 	rdlong	result1, fp wz
2dad0     6C 4E 85 F1 | 	sub	fp, #108
2dad4     28 00 90 AD |  if_e	jmp	#LR__4644
2dad8     0C 4E 05 F1 | 	add	fp, #12
2dadc     A7 12 02 F6 | 	mov	arg01, fp
2dae0     60 4E 05 F1 | 	add	fp, #96
2dae4     A7 14 02 FB | 	rdlong	arg02, fp
2dae8     6C 4E 85 F1 | 	sub	fp, #108
2daec     00 16 06 F6 | 	mov	arg03, #0
2daf0     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2daf4     08 4E 05 F1 | 	add	fp, #8
2daf8     A7 FA 61 FC | 	wrlong	result1, fp
2dafc     08 4E 85 F1 | 	sub	fp, #8
2db00                 | LR__4644
2db00     08 4E 05 F1 | 	add	fp, #8
2db04     A7 FA 09 FB | 	rdlong	result1, fp wz
2db08     08 4E 85 F1 | 	sub	fp, #8
2db0c     1C 00 90 5D |  if_ne	jmp	#LR__4645
2db10     70 4E 05 F1 | 	add	fp, #112
2db14     A7 12 02 FB | 	rdlong	arg01, fp
2db18     70 4E 85 F1 | 	sub	fp, #112
2db1c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2db20     08 4E 05 F1 | 	add	fp, #8
2db24     A7 FA 61 FC | 	wrlong	result1, fp
2db28     08 4E 85 F1 | 	sub	fp, #8
2db2c                 | LR__4645
2db2c                 | LR__4646
2db2c                 | LR__4647
2db2c                 | LR__4648
2db2c                 | ' 			}
2db2c                 | ' 		}
2db2c                 | ' 		;
2db2c                 | ' 	}
2db2c                 | ' 
2db2c                 | ' 	return res ;
2db2c     08 4E 05 F1 | 	add	fp, #8
2db30     A7 FA 01 FB | 	rdlong	result1, fp
2db34     08 4E 85 F1 | 	sub	fp, #8
2db38     A7 F0 03 F6 | 	mov	ptra, fp
2db3c     B2 00 A0 FD | 	call	#popregs_
2db40                 | _fatfs_cc_f_unlink_ret
2db40     2D 00 64 FD | 	ret
2db44                 | 
2db44                 | _fatfs_cc_f_mkdir
2db44     00 4A 05 F6 | 	mov	COUNT_, #0
2db48     A8 00 A0 FD | 	call	#pushregs_
2db4c     5C F0 07 F1 | 	add	ptra, #92
2db50     04 4E 05 F1 | 	add	fp, #4
2db54     A7 12 62 FC | 	wrlong	arg01, fp
2db58     A7 12 02 F6 | 	mov	arg01, fp
2db5c     48 4E 05 F1 | 	add	fp, #72
2db60     A7 14 02 F6 | 	mov	arg02, fp
2db64     4C 4E 85 F1 | 	sub	fp, #76
2db68     02 16 06 F6 | 	mov	arg03, #2
2db6c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2db70     08 4E 05 F1 | 	add	fp, #8
2db74     A7 FA 61 FC | 	wrlong	result1, fp
2db78     08 4E 85 F1 | 	sub	fp, #8
2db7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db80     C4 02 90 5D |  if_ne	jmp	#LR__4655
2db84     4C 4E 05 F1 | 	add	fp, #76
2db88     A7 16 02 FB | 	rdlong	arg03, fp
2db8c     40 4E 85 F1 | 	sub	fp, #64
2db90     A7 16 62 FC | 	wrlong	arg03, fp
2db94     A7 12 02 F6 | 	mov	arg01, fp
2db98     08 4E 85 F1 | 	sub	fp, #8
2db9c     A7 14 02 FB | 	rdlong	arg02, fp
2dba0     04 4E 85 F1 | 	sub	fp, #4
2dba4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2dba8     08 4E 05 F1 | 	add	fp, #8
2dbac     A7 FA 61 FC | 	wrlong	result1, fp
2dbb0     00 FA 4D F2 | 	cmps	result1, #0 wz
2dbb4     08 4E 85 F1 | 	sub	fp, #8
2dbb8     08 4E 05 A1 |  if_e	add	fp, #8
2dbbc     A7 10 68 AC |  if_e	wrlong	#8, fp
2dbc0     08 4E 85 A1 |  if_e	sub	fp, #8
2dbc4     08 4E 05 F1 | 	add	fp, #8
2dbc8     A7 FA 01 FB | 	rdlong	result1, fp
2dbcc     08 4E 85 F1 | 	sub	fp, #8
2dbd0     04 FA 0D F2 | 	cmp	result1, #4 wz
2dbd4     70 02 90 5D |  if_ne	jmp	#LR__4654
2dbd8     4C 4E 05 F1 | 	add	fp, #76
2dbdc     A7 16 02 FB | 	rdlong	arg03, fp
2dbe0     10 4E 85 F1 | 	sub	fp, #16
2dbe4     A7 16 62 FC | 	wrlong	arg03, fp
2dbe8     A7 12 02 F6 | 	mov	arg01, fp
2dbec     3C 4E 85 F1 | 	sub	fp, #60
2dbf0     00 14 06 F6 | 	mov	arg02, #0
2dbf4     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dbf8     50 4E 05 F1 | 	add	fp, #80
2dbfc     A7 FA 61 FC | 	wrlong	result1, fp
2dc00     48 4E 85 F1 | 	sub	fp, #72
2dc04     A7 00 68 FC | 	wrlong	#0, fp
2dc08     48 4E 05 F1 | 	add	fp, #72
2dc0c     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc10     50 4E 85 F1 | 	sub	fp, #80
2dc14     08 4E 05 A1 |  if_e	add	fp, #8
2dc18     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dc1c     08 4E 85 A1 |  if_e	sub	fp, #8
2dc20     50 4E 05 F1 | 	add	fp, #80
2dc24     A7 FA 01 FB | 	rdlong	result1, fp
2dc28     50 4E 85 F1 | 	sub	fp, #80
2dc2c     01 FA 0D F2 | 	cmp	result1, #1 wz
2dc30     08 4E 05 A1 |  if_e	add	fp, #8
2dc34     A7 04 68 AC |  if_e	wrlong	#2, fp
2dc38     08 4E 85 A1 |  if_e	sub	fp, #8
2dc3c     50 4E 05 F1 | 	add	fp, #80
2dc40     A7 16 02 FB | 	rdlong	arg03, fp
2dc44     50 4E 85 F1 | 	sub	fp, #80
2dc48     FF FF 7F FF 
2dc4c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2dc50     08 4E 05 A1 |  if_e	add	fp, #8
2dc54     A7 02 68 AC |  if_e	wrlong	#1, fp
2dc58     08 4E 85 A1 |  if_e	sub	fp, #8
2dc5c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2dc60     58 4E 05 F1 | 	add	fp, #88
2dc64     A7 FA 61 FC | 	wrlong	result1, fp
2dc68     50 4E 85 F1 | 	sub	fp, #80
2dc6c     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc70     08 4E 85 F1 | 	sub	fp, #8
2dc74     1C 01 90 5D |  if_ne	jmp	#LR__4651
2dc78     4C 4E 05 F1 | 	add	fp, #76
2dc7c     A7 12 02 FB | 	rdlong	arg01, fp
2dc80     04 4E 05 F1 | 	add	fp, #4
2dc84     A7 14 02 FB | 	rdlong	arg02, fp
2dc88     50 4E 85 F1 | 	sub	fp, #80
2dc8c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2dc90     08 4E 05 F1 | 	add	fp, #8
2dc94     A7 FA 61 FC | 	wrlong	result1, fp
2dc98     00 FA 4D F2 | 	cmps	result1, #0 wz
2dc9c     08 4E 85 F1 | 	sub	fp, #8
2dca0     F0 00 90 5D |  if_ne	jmp	#LR__4650
2dca4     4C 4E 05 F1 | 	add	fp, #76
2dca8     A7 12 02 FB | 	rdlong	arg01, fp
2dcac     4C 4E 85 F1 | 	sub	fp, #76
2dcb0     34 12 06 F1 | 	add	arg01, #52
2dcb4     20 14 06 F6 | 	mov	arg02, #32
2dcb8     0B 16 06 F6 | 	mov	arg03, #11
2dcbc     98 00 A0 FD | 	call	#\builtin_bytefill_
2dcc0     4C 4E 05 F1 | 	add	fp, #76
2dcc4     A7 FA 01 FB | 	rdlong	result1, fp
2dcc8     34 FA 05 F1 | 	add	result1, #52
2dccc     FD 5C 48 FC | 	wrbyte	#46, result1
2dcd0     A7 16 02 FB | 	rdlong	arg03, fp
2dcd4     3F 16 06 F1 | 	add	arg03, #63
2dcd8     0B 21 48 FC | 	wrbyte	#16, arg03
2dcdc     A7 12 02 FB | 	rdlong	arg01, fp
2dce0     4A 12 06 F1 | 	add	arg01, #74
2dce4     0C 4E 05 F1 | 	add	fp, #12
2dce8     A7 14 02 FB | 	rdlong	arg02, fp
2dcec     09 15 62 FC | 	wrlong	arg02, arg01
2dcf0     0C 4E 85 F1 | 	sub	fp, #12
2dcf4     A7 14 02 FB | 	rdlong	arg02, fp
2dcf8     0A 13 02 F6 | 	mov	arg01, arg02
2dcfc     34 14 06 F1 | 	add	arg02, #52
2dd00     04 4E 05 F1 | 	add	fp, #4
2dd04     A7 16 02 FB | 	rdlong	arg03, fp
2dd08     50 4E 85 F1 | 	sub	fp, #80
2dd0c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dd10     4C 4E 05 F1 | 	add	fp, #76
2dd14     A7 14 02 FB | 	rdlong	arg02, fp
2dd18     0A 13 02 F6 | 	mov	arg01, arg02
2dd1c     54 12 06 F1 | 	add	arg01, #84
2dd20     4C 4E 85 F1 | 	sub	fp, #76
2dd24     34 14 06 F1 | 	add	arg02, #52
2dd28     20 16 06 F6 | 	mov	arg03, #32
2dd2c     3C 2A BF FD | 	call	#__system____builtin_memmove
2dd30     4C 4E 05 F1 | 	add	fp, #76
2dd34     A7 16 02 FB | 	rdlong	arg03, fp
2dd38     55 16 06 F1 | 	add	arg03, #85
2dd3c     0B 5D 48 FC | 	wrbyte	#46, arg03
2dd40     38 4E 85 F1 | 	sub	fp, #56
2dd44     A7 16 02 FB | 	rdlong	arg03, fp
2dd48     40 4E 05 F1 | 	add	fp, #64
2dd4c     A7 16 62 FC | 	wrlong	arg03, fp
2dd50     08 4E 85 F1 | 	sub	fp, #8
2dd54     A7 14 02 FB | 	rdlong	arg02, fp
2dd58     0A 13 02 F6 | 	mov	arg01, arg02
2dd5c     54 14 06 F1 | 	add	arg02, #84
2dd60     4C 4E 85 F1 | 	sub	fp, #76
2dd64     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dd68     4C 4E 05 F1 | 	add	fp, #76
2dd6c     A7 16 02 FB | 	rdlong	arg03, fp
2dd70     03 16 06 F1 | 	add	arg03, #3
2dd74     0B 03 48 FC | 	wrbyte	#1, arg03
2dd78     40 4E 85 F1 | 	sub	fp, #64
2dd7c     A7 12 02 F6 | 	mov	arg01, fp
2dd80     0C 4E 85 F1 | 	sub	fp, #12
2dd84     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2dd88     08 4E 05 F1 | 	add	fp, #8
2dd8c     A7 FA 61 FC | 	wrlong	result1, fp
2dd90     08 4E 85 F1 | 	sub	fp, #8
2dd94                 | LR__4650
2dd94                 | LR__4651
2dd94     08 4E 05 F1 | 	add	fp, #8
2dd98     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd9c     08 4E 85 F1 | 	sub	fp, #8
2dda0     88 00 90 5D |  if_ne	jmp	#LR__4652
2dda4     28 4E 05 F1 | 	add	fp, #40
2dda8     A7 12 02 FB | 	rdlong	arg01, fp
2ddac     16 12 06 F1 | 	add	arg01, #22
2ddb0     30 4E 05 F1 | 	add	fp, #48
2ddb4     A7 14 02 FB | 	rdlong	arg02, fp
2ddb8     09 15 62 FC | 	wrlong	arg02, arg01
2ddbc     0C 4E 85 F1 | 	sub	fp, #12
2ddc0     A7 12 02 FB | 	rdlong	arg01, fp
2ddc4     24 4E 85 F1 | 	sub	fp, #36
2ddc8     A7 14 02 FB | 	rdlong	arg02, fp
2ddcc     28 4E 05 F1 | 	add	fp, #40
2ddd0     A7 16 02 FB | 	rdlong	arg03, fp
2ddd4     50 4E 85 F1 | 	sub	fp, #80
2ddd8     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2dddc     28 4E 05 F1 | 	add	fp, #40
2dde0     A7 FA 01 FB | 	rdlong	result1, fp
2dde4     0B FA 05 F1 | 	add	result1, #11
2dde8     FD 20 48 FC | 	wrbyte	#16, result1
2ddec     24 4E 05 F1 | 	add	fp, #36
2ddf0     A7 FA 01 FB | 	rdlong	result1, fp
2ddf4     03 FA 05 F1 | 	add	result1, #3
2ddf8     FD 02 48 FC | 	wrbyte	#1, result1
2ddfc     44 4E 85 F1 | 	sub	fp, #68
2de00     A7 FA 09 FB | 	rdlong	result1, fp wz
2de04     08 4E 85 F1 | 	sub	fp, #8
2de08     3C 00 90 5D |  if_ne	jmp	#LR__4653
2de0c     4C 4E 05 F1 | 	add	fp, #76
2de10     A7 12 02 FB | 	rdlong	arg01, fp
2de14     4C 4E 85 F1 | 	sub	fp, #76
2de18     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2de1c     08 4E 05 F1 | 	add	fp, #8
2de20     A7 FA 61 FC | 	wrlong	result1, fp
2de24     08 4E 85 F1 | 	sub	fp, #8
2de28     1C 00 90 FD | 	jmp	#LR__4653
2de2c                 | LR__4652
2de2c     3C 4E 05 F1 | 	add	fp, #60
2de30     A7 12 02 F6 | 	mov	arg01, fp
2de34     14 4E 05 F1 | 	add	fp, #20
2de38     A7 14 02 FB | 	rdlong	arg02, fp
2de3c     50 4E 85 F1 | 	sub	fp, #80
2de40     00 16 06 F6 | 	mov	arg03, #0
2de44     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2de48                 | LR__4653
2de48                 | LR__4654
2de48                 | LR__4655
2de48                 | ' 				remove_chain(&sobj, dcl, 0);
2de48                 | ' 			}
2de48                 | ' 		}
2de48                 | ' 		;
2de48                 | ' 	}
2de48                 | ' 
2de48                 | ' 	return res ;
2de48     08 4E 05 F1 | 	add	fp, #8
2de4c     A7 FA 01 FB | 	rdlong	result1, fp
2de50     08 4E 85 F1 | 	sub	fp, #8
2de54     A7 F0 03 F6 | 	mov	ptra, fp
2de58     B2 00 A0 FD | 	call	#popregs_
2de5c                 | _fatfs_cc_f_mkdir_ret
2de5c     2D 00 64 FD | 	ret
2de60                 | 
2de60                 | _fatfs_cc_f_rename
2de60     01 4A 05 F6 | 	mov	COUNT_, #1
2de64     A8 00 A0 FD | 	call	#pushregs_
2de68     9C F0 07 F1 | 	add	ptra, #156
2de6c     04 4E 05 F1 | 	add	fp, #4
2de70     A7 12 62 FC | 	wrlong	arg01, fp
2de74     04 4E 05 F1 | 	add	fp, #4
2de78     A7 14 62 FC | 	wrlong	arg02, fp
2de7c     A7 12 02 F6 | 	mov	arg01, fp
2de80     08 4E 85 F1 | 	sub	fp, #8
2de84     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2de88     04 4E 05 F1 | 	add	fp, #4
2de8c     A7 12 02 F6 | 	mov	arg01, fp
2de90     6C 4E 05 F1 | 	add	fp, #108
2de94     A7 14 02 F6 | 	mov	arg02, fp
2de98     70 4E 85 F1 | 	sub	fp, #112
2de9c     02 16 06 F6 | 	mov	arg03, #2
2dea0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2dea4     0C 4E 05 F1 | 	add	fp, #12
2dea8     A7 FA 61 FC | 	wrlong	result1, fp
2deac     0C 4E 85 F1 | 	sub	fp, #12
2deb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2deb4     44 03 90 5D |  if_ne	jmp	#LR__4673
2deb8     70 4E 05 F1 | 	add	fp, #112
2debc     A7 16 02 FB | 	rdlong	arg03, fp
2dec0     60 4E 85 F1 | 	sub	fp, #96
2dec4     A7 16 62 FC | 	wrlong	arg03, fp
2dec8     A7 12 02 F6 | 	mov	arg01, fp
2decc     0C 4E 85 F1 | 	sub	fp, #12
2ded0     A7 14 02 FB | 	rdlong	arg02, fp
2ded4     04 4E 85 F1 | 	sub	fp, #4
2ded8     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2dedc     0C 4E 05 F1 | 	add	fp, #12
2dee0     A7 FA 61 FC | 	wrlong	result1, fp
2dee4     00 FA 4D F2 | 	cmps	result1, #0 wz
2dee8     0C 4E 85 F1 | 	sub	fp, #12
2deec     1C 00 90 5D |  if_ne	jmp	#LR__4660
2def0     3B 4E 05 F1 | 	add	fp, #59
2def4     A7 FA C1 FA | 	rdbyte	result1, fp
2def8     3B 4E 85 F1 | 	sub	fp, #59
2defc     A0 FA CD F7 | 	test	result1, #160 wz
2df00     0C 4E 05 51 |  if_ne	add	fp, #12
2df04     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2df08     0C 4E 85 51 |  if_ne	sub	fp, #12
2df0c                 | LR__4660
2df0c     0C 4E 05 F1 | 	add	fp, #12
2df10     A7 1E 0A FB | 	rdlong	local01, fp wz
2df14     0C 4E 85 F1 | 	sub	fp, #12
2df18     E0 02 90 5D |  if_ne	jmp	#LR__4672
2df1c     74 4E 05 F1 | 	add	fp, #116
2df20     A7 12 02 F6 | 	mov	arg01, fp
2df24     48 4E 85 F1 | 	sub	fp, #72
2df28     A7 14 02 FB | 	rdlong	arg02, fp
2df2c     2C 4E 85 F1 | 	sub	fp, #44
2df30     20 16 06 F6 | 	mov	arg03, #32
2df34     34 28 BF FD | 	call	#__system____builtin_memmove
2df38     40 4E 05 F1 | 	add	fp, #64
2df3c     A7 12 02 F6 | 	mov	arg01, fp
2df40     30 4E 85 F1 | 	sub	fp, #48
2df44     A7 14 02 F6 | 	mov	arg02, fp
2df48     10 4E 85 F1 | 	sub	fp, #16
2df4c     30 16 06 F6 | 	mov	arg03, #48
2df50     18 28 BF FD | 	call	#__system____builtin_memmove
2df54     40 4E 05 F1 | 	add	fp, #64
2df58     A7 12 02 F6 | 	mov	arg01, fp
2df5c     38 4E 85 F1 | 	sub	fp, #56
2df60     A7 14 02 FB | 	rdlong	arg02, fp
2df64     08 4E 85 F1 | 	sub	fp, #8
2df68     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2df6c     0C 4E 05 F1 | 	add	fp, #12
2df70     A7 FA 61 FC | 	wrlong	result1, fp
2df74     0C 4E 85 F1 | 	sub	fp, #12
2df78     00 FA 0D F2 | 	cmp	result1, #0 wz
2df7c     4C 00 90 5D |  if_ne	jmp	#LR__4663
2df80     48 4E 05 F1 | 	add	fp, #72
2df84     A7 FA 01 FB | 	rdlong	result1, fp
2df88     30 4E 85 F1 | 	sub	fp, #48
2df8c     A7 16 02 FB | 	rdlong	arg03, fp
2df90     18 4E 85 F1 | 	sub	fp, #24
2df94     0B FB 09 F2 | 	cmp	result1, arg03 wz
2df98     20 00 90 5D |  if_ne	jmp	#LR__4661
2df9c     50 4E 05 F1 | 	add	fp, #80
2dfa0     A7 FA 01 FB | 	rdlong	result1, fp
2dfa4     30 4E 85 F1 | 	sub	fp, #48
2dfa8     A7 16 02 FB | 	rdlong	arg03, fp
2dfac     20 4E 85 F1 | 	sub	fp, #32
2dfb0     0B FB 09 F2 | 	cmp	result1, arg03 wz
2dfb4     04 1E 06 A6 |  if_e	mov	local01, #4
2dfb8     04 00 90 AD |  if_e	jmp	#LR__4662
2dfbc                 | LR__4661
2dfbc     08 1E 06 F6 | 	mov	local01, #8
2dfc0                 | LR__4662
2dfc0     0C 4E 05 F1 | 	add	fp, #12
2dfc4     A7 1E 62 FC | 	wrlong	local01, fp
2dfc8     0C 4E 85 F1 | 	sub	fp, #12
2dfcc                 | LR__4663
2dfcc     0C 4E 05 F1 | 	add	fp, #12
2dfd0     A7 1E 02 FB | 	rdlong	local01, fp
2dfd4     0C 4E 85 F1 | 	sub	fp, #12
2dfd8     04 1E 0E F2 | 	cmp	local01, #4 wz
2dfdc     CC 01 90 5D |  if_ne	jmp	#LR__4669
2dfe0     40 4E 05 F1 | 	add	fp, #64
2dfe4     A7 12 02 F6 | 	mov	arg01, fp
2dfe8     40 4E 85 F1 | 	sub	fp, #64
2dfec     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2dff0     0C 4E 05 F1 | 	add	fp, #12
2dff4     A7 FA 61 FC | 	wrlong	result1, fp
2dff8     0C 4E 85 F1 | 	sub	fp, #12
2dffc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e000     A8 01 90 5D |  if_ne	jmp	#LR__4668
2e004     5C 4E 05 F1 | 	add	fp, #92
2e008     A7 12 02 FB | 	rdlong	arg01, fp
2e00c     38 4E 05 F1 | 	add	fp, #56
2e010     A7 12 62 FC | 	wrlong	arg01, fp
2e014     0D 12 06 F1 | 	add	arg01, #13
2e018     20 4E 85 F1 | 	sub	fp, #32
2e01c     A7 14 02 F6 | 	mov	arg02, fp
2e020     74 4E 85 F1 | 	sub	fp, #116
2e024     0D 14 06 F1 | 	add	arg02, #13
2e028     13 16 06 F6 | 	mov	arg03, #19
2e02c     3C 27 BF FD | 	call	#__system____builtin_memmove
2e030     94 4E 05 F1 | 	add	fp, #148
2e034     A7 1E 02 FB | 	rdlong	local01, fp
2e038     15 4E 85 F1 | 	sub	fp, #21
2e03c     A7 FA C1 FA | 	rdbyte	result1, fp
2e040     0B 1E 06 F1 | 	add	local01, #11
2e044     0F FB 41 FC | 	wrbyte	result1, local01
2e048     15 4E 05 F1 | 	add	fp, #21
2e04c     A7 1E 02 FB | 	rdlong	local01, fp
2e050     94 4E 85 F1 | 	sub	fp, #148
2e054     0B 1E 06 F1 | 	add	local01, #11
2e058     0F 1F C2 FA | 	rdbyte	local01, local01
2e05c     10 1E CE F7 | 	test	local01, #16 wz
2e060     24 00 90 5D |  if_ne	jmp	#LR__4664
2e064     94 4E 05 F1 | 	add	fp, #148
2e068     A7 FA 01 FB | 	rdlong	result1, fp
2e06c     FD 1E 02 F6 | 	mov	local01, result1
2e070     94 4E 85 F1 | 	sub	fp, #148
2e074     0B FA 05 F1 | 	add	result1, #11
2e078     FD FA C1 FA | 	rdbyte	result1, result1
2e07c     20 FA 45 F5 | 	or	result1, #32
2e080     0B 1E 06 F1 | 	add	local01, #11
2e084     0F FB 41 FC | 	wrbyte	result1, local01
2e088                 | LR__4664
2e088     70 4E 05 F1 | 	add	fp, #112
2e08c     A7 1E 02 FB | 	rdlong	local01, fp
2e090     03 1E 06 F1 | 	add	local01, #3
2e094     0F 03 48 FC | 	wrbyte	#1, local01
2e098     24 4E 05 F1 | 	add	fp, #36
2e09c     A7 1E 02 FB | 	rdlong	local01, fp
2e0a0     94 4E 85 F1 | 	sub	fp, #148
2e0a4     0B 1E 06 F1 | 	add	local01, #11
2e0a8     0F 1F C2 FA | 	rdbyte	local01, local01
2e0ac     10 1E CE F7 | 	test	local01, #16 wz
2e0b0     F8 00 90 AD |  if_e	jmp	#LR__4667
2e0b4     18 4E 05 F1 | 	add	fp, #24
2e0b8     A7 16 02 FB | 	rdlong	arg03, fp
2e0bc     30 4E 05 F1 | 	add	fp, #48
2e0c0     A7 1E 02 FB | 	rdlong	local01, fp
2e0c4     48 4E 85 F1 | 	sub	fp, #72
2e0c8     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e0cc     DC 00 90 AD |  if_e	jmp	#LR__4667
2e0d0     70 4E 05 F1 | 	add	fp, #112
2e0d4     A7 12 02 FB | 	rdlong	arg01, fp
2e0d8     09 1F 02 F6 | 	mov	local01, arg01
2e0dc     24 4E 05 F1 | 	add	fp, #36
2e0e0     A7 14 02 FB | 	rdlong	arg02, fp
2e0e4     94 4E 85 F1 | 	sub	fp, #148
2e0e8     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e0ec     FD 14 02 F6 | 	mov	arg02, result1
2e0f0     0F 13 02 F6 | 	mov	arg01, local01
2e0f4     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e0f8     98 4E 05 F1 | 	add	fp, #152
2e0fc     A7 FA 61 FC | 	wrlong	result1, fp
2e100     00 FA 4D F2 | 	cmps	result1, #0 wz
2e104     98 4E 85 F1 | 	sub	fp, #152
2e108     0C 4E 05 A1 |  if_e	add	fp, #12
2e10c     A7 04 68 AC |  if_e	wrlong	#2, fp
2e110     0C 4E 85 A1 |  if_e	sub	fp, #12
2e114     94 00 90 AD |  if_e	jmp	#LR__4666
2e118     70 4E 05 F1 | 	add	fp, #112
2e11c     A7 12 02 FB | 	rdlong	arg01, fp
2e120     28 4E 05 F1 | 	add	fp, #40
2e124     A7 14 02 FB | 	rdlong	arg02, fp
2e128     98 4E 85 F1 | 	sub	fp, #152
2e12c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e130     0C 4E 05 F1 | 	add	fp, #12
2e134     A7 FA 61 FC | 	wrlong	result1, fp
2e138     64 4E 05 F1 | 	add	fp, #100
2e13c     A7 1E 02 FB | 	rdlong	local01, fp
2e140     54 1E 06 F1 | 	add	local01, #84
2e144     24 4E 05 F1 | 	add	fp, #36
2e148     A7 1E 62 FC | 	wrlong	local01, fp
2e14c     88 4E 85 F1 | 	sub	fp, #136
2e150     A7 1E 0A FB | 	rdlong	local01, fp wz
2e154     0C 4E 85 F1 | 	sub	fp, #12
2e158     50 00 90 5D |  if_ne	jmp	#LR__4665
2e15c     94 4E 05 F1 | 	add	fp, #148
2e160     A7 1E 02 FB | 	rdlong	local01, fp
2e164     94 4E 85 F1 | 	sub	fp, #148
2e168     01 1E 06 F1 | 	add	local01, #1
2e16c     0F 1F C2 FA | 	rdbyte	local01, local01
2e170     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e174     34 00 90 5D |  if_ne	jmp	#LR__4665
2e178     70 4E 05 F1 | 	add	fp, #112
2e17c     A7 12 02 FB | 	rdlong	arg01, fp
2e180     24 4E 05 F1 | 	add	fp, #36
2e184     A7 14 02 FB | 	rdlong	arg02, fp
2e188     4C 4E 85 F1 | 	sub	fp, #76
2e18c     A7 16 02 FB | 	rdlong	arg03, fp
2e190     48 4E 85 F1 | 	sub	fp, #72
2e194     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e198     70 4E 05 F1 | 	add	fp, #112
2e19c     A7 1E 02 FB | 	rdlong	local01, fp
2e1a0     70 4E 85 F1 | 	sub	fp, #112
2e1a4     03 1E 06 F1 | 	add	local01, #3
2e1a8     0F 03 48 FC | 	wrbyte	#1, local01
2e1ac                 | LR__4665
2e1ac                 | LR__4666
2e1ac                 | LR__4667
2e1ac                 | LR__4668
2e1ac                 | LR__4669
2e1ac     0C 4E 05 F1 | 	add	fp, #12
2e1b0     A7 1E 0A FB | 	rdlong	local01, fp wz
2e1b4     0C 4E 85 F1 | 	sub	fp, #12
2e1b8     40 00 90 5D |  if_ne	jmp	#LR__4671
2e1bc     10 4E 05 F1 | 	add	fp, #16
2e1c0     A7 12 02 F6 | 	mov	arg01, fp
2e1c4     10 4E 85 F1 | 	sub	fp, #16
2e1c8     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e1cc     0C 4E 05 F1 | 	add	fp, #12
2e1d0     A7 FA 61 FC | 	wrlong	result1, fp
2e1d4     0C 4E 85 F1 | 	sub	fp, #12
2e1d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1dc     1C 00 90 5D |  if_ne	jmp	#LR__4670
2e1e0     70 4E 05 F1 | 	add	fp, #112
2e1e4     A7 12 02 FB | 	rdlong	arg01, fp
2e1e8     70 4E 85 F1 | 	sub	fp, #112
2e1ec     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e1f0     0C 4E 05 F1 | 	add	fp, #12
2e1f4     A7 FA 61 FC | 	wrlong	result1, fp
2e1f8     0C 4E 85 F1 | 	sub	fp, #12
2e1fc                 | LR__4670
2e1fc                 | LR__4671
2e1fc                 | LR__4672
2e1fc                 | LR__4673
2e1fc                 | ' 					res = sync_fs(fs);
2e1fc                 | ' 				}
2e1fc                 | ' 			}
2e1fc                 | ' 
2e1fc                 | ' 		}
2e1fc                 | ' 		;
2e1fc                 | ' 	}
2e1fc                 | ' 
2e1fc                 | ' 	return res ;
2e1fc     0C 4E 05 F1 | 	add	fp, #12
2e200     A7 FA 01 FB | 	rdlong	result1, fp
2e204     0C 4E 85 F1 | 	sub	fp, #12
2e208     A7 F0 03 F6 | 	mov	ptra, fp
2e20c     B2 00 A0 FD | 	call	#popregs_
2e210                 | _fatfs_cc_f_rename_ret
2e210     2D 00 64 FD | 	ret
2e214                 | 
2e214                 | _fatfs_cc_time
2e214     00 4A 05 F6 | 	mov	COUNT_, #0
2e218     A8 00 A0 FD | 	call	#pushregs_
2e21c     14 F0 07 F1 | 	add	ptra, #20
2e220     04 4E 05 F1 | 	add	fp, #4
2e224     A7 12 62 FC | 	wrlong	arg01, fp
2e228     04 4E 05 F1 | 	add	fp, #4
2e22c     A7 12 02 F6 | 	mov	arg01, fp
2e230     08 4E 85 F1 | 	sub	fp, #8
2e234     00 14 06 F6 | 	mov	arg02, #0
2e238     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e23c     08 4E 05 F1 | 	add	fp, #8
2e240     A7 FA 01 FB | 	rdlong	result1, fp
2e244     08 4E 05 F1 | 	add	fp, #8
2e248     A7 FA 61 FC | 	wrlong	result1, fp
2e24c     0C 4E 85 F1 | 	sub	fp, #12
2e250     A7 FA 09 FB | 	rdlong	result1, fp wz
2e254     04 4E 85 F1 | 	sub	fp, #4
2e258     18 00 90 AD |  if_e	jmp	#LR__4680
2e25c     04 4E 05 F1 | 	add	fp, #4
2e260     A7 FA 01 FB | 	rdlong	result1, fp
2e264     0C 4E 05 F1 | 	add	fp, #12
2e268     A7 14 02 FB | 	rdlong	arg02, fp
2e26c     10 4E 85 F1 | 	sub	fp, #16
2e270     FD 14 62 FC | 	wrlong	arg02, result1
2e274                 | LR__4680
2e274                 | '         *tp = now;
2e274                 | '     return now;
2e274     10 4E 05 F1 | 	add	fp, #16
2e278     A7 FA 01 FB | 	rdlong	result1, fp
2e27c     10 4E 85 F1 | 	sub	fp, #16
2e280     A7 F0 03 F6 | 	mov	ptra, fp
2e284     B2 00 A0 FD | 	call	#popregs_
2e288                 | _fatfs_cc_time_ret
2e288     2D 00 64 FD | 	ret
2e28c                 | 
2e28c                 | _fatfs_cc_mktime
2e28c     06 4A 05 F6 | 	mov	COUNT_, #6
2e290     A8 00 A0 FD | 	call	#pushregs_
2e294     09 1F 02 F6 | 	mov	local01, arg01
2e298     14 1E 06 F1 | 	add	local01, #20
2e29c     0F 13 02 FB | 	rdlong	arg01, local01
2e2a0     14 1E 86 F1 | 	sub	local01, #20
2e2a4     46 12 56 F2 | 	cmps	arg01, #70 wc
2e2a8                 | '                 return (time_t) -1;
2e2a8     01 FA 65 C6 |  if_b	neg	result1, #1
2e2ac     7C 01 90 CD |  if_b	jmp	#LR__4694
2e2b0     03 00 00 FF 
2e2b4     6C 21 06 F6 | 	mov	local02, ##1900
2e2b8     14 1E 06 F1 | 	add	local01, #20
2e2bc     0F FB 01 FB | 	rdlong	result1, local01
2e2c0     FD 20 02 F1 | 	add	local02, result1
2e2c4     08 1E 86 F1 | 	sub	local01, #8
2e2c8     0F 23 02 FB | 	rdlong	local03, local01
2e2cc     01 22 86 F1 | 	sub	local03, #1
2e2d0     04 1E 06 F1 | 	add	local01, #4
2e2d4     0F 13 02 FB | 	rdlong	arg01, local01
2e2d8     10 1E 86 F1 | 	sub	local01, #16
2e2dc     02 12 66 F0 | 	shl	arg01, #2
2e2e0     02 00 00 FF 
2e2e4     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e2e8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e2ec     09 FB 01 FB | 	rdlong	result1, arg01
2e2f0     FD 22 02 F1 | 	add	local03, result1
2e2f4     10 13 02 F6 | 	mov	arg01, local02
2e2f8     02 00 00 FF 
2e2fc     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e300     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e304     00 FA 0D F2 | 	cmp	result1, #0 wz
2e308     1C 00 90 AD |  if_e	jmp	#LR__4690
2e30c     00 24 06 F6 | 	mov	local04, #0
2e310     10 1E 06 F1 | 	add	local01, #16
2e314     0F FB 01 FB | 	rdlong	result1, local01
2e318     10 1E 86 F1 | 	sub	local01, #16
2e31c     02 FA 55 F2 | 	cmps	result1, #2 wc
2e320     01 24 06 36 |  if_ae	mov	local04, #1
2e324     04 00 90 FD | 	jmp	#LR__4691
2e328                 | LR__4690
2e328     00 24 06 F6 | 	mov	local04, #0
2e32c                 | LR__4691
2e32c     04 1E 06 F1 | 	add	local01, #4
2e330     0F FB 01 FB | 	rdlong	result1, local01
2e334     04 1E 86 F1 | 	sub	local01, #4
2e338     0F 27 02 FB | 	rdlong	local05, local01
2e33c     08 1E 06 F1 | 	add	local01, #8
2e340     0F 13 02 FB | 	rdlong	arg01, local01
2e344     07 00 00 FF 
2e348     10 12 06 FD | 	qmul	arg01, ##3600
2e34c     12 23 02 F1 | 	add	local03, local04
2e350     FD 24 02 F6 | 	mov	local04, result1
2e354     04 24 66 F0 | 	shl	local04, #4
2e358     FD 24 82 F1 | 	sub	local04, result1
2e35c     02 24 66 F0 | 	shl	local04, #2
2e360     12 27 02 F1 | 	add	local05, local04
2e364     08 1E 86 F1 | 	sub	local01, #8
2e368     18 24 62 FD | 	getqx	local04
2e36c     A8 00 00 FF 
2e370     80 23 06 FD | 	qmul	local03, ##86400
2e374     12 27 02 F1 | 	add	local05, local04
2e378     10 23 02 F6 | 	mov	local03, local02
2e37c     03 00 00 FF 
2e380     B2 23 86 F1 | 	sub	local03, ##1970
2e384     18 24 62 FD | 	getqx	local04
2e388     99 F0 00 FF 
2e38c     80 23 06 FD | 	qmul	local03, ##31536000
2e390     12 27 02 F1 | 	add	local05, local04
2e394     10 23 02 F6 | 	mov	local03, local02
2e398     03 00 00 FF 
2e39c     B1 23 86 F1 | 	sub	local03, ##1969
2e3a0     11 29 52 F6 | 	abs	local06, local03 wc
2e3a4     02 28 46 F0 | 	shr	local06, #2
2e3a8     14 29 82 F6 | 	negc	local06, local06
2e3ac     03 00 00 FF 
2e3b0     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e3b4     18 24 62 FD | 	getqx	local04
2e3b8     12 27 02 F1 | 	add	local05, local04
2e3bc     18 00 90 CD |  if_b	jmp	#LR__4692
2e3c0     03 00 00 FF 
2e3c4     D0 21 86 F1 | 	sub	local02, ##2000
2e3c8     10 25 52 F6 | 	abs	local04, local02 wc
2e3cc     64 24 16 FD | 	qdiv	local04, #100
2e3d0     18 24 62 FD | 	getqx	local04
2e3d4     12 29 A2 F3 | 	sumnc	local06, local04
2e3d8                 | LR__4692
2e3d8     A8 00 00 FF 
2e3dc     80 29 06 FD | 	qmul	local06, ##86400
2e3e0     18 28 62 FD | 	getqx	local06
2e3e4     14 27 02 F1 | 	add	local05, local06
2e3e8     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e3ec     02 00 00 FF 
2e3f0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e3f4     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e3f8     14 27 02 F1 | 	add	local05, local06
2e3fc     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e400     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e404     02 00 00 FF 
2e408     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e40c     01 22 0E F2 | 	cmp	local03, #1 wz
2e410     14 00 90 5D |  if_ne	jmp	#LR__4693
2e414     0F 13 02 F6 | 	mov	arg01, local01
2e418     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e41c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e420     07 00 00 5F 
2e424     10 26 86 51 |  if_ne	sub	local05, ##3600
2e428                 | LR__4693
2e428                 | '                 s -=  (3600L) ;
2e428                 | ' 
2e428                 | '         return s;
2e428     13 FB 01 F6 | 	mov	result1, local05
2e42c                 | LR__4694
2e42c     A7 F0 03 F6 | 	mov	ptra, fp
2e430     B2 00 A0 FD | 	call	#popregs_
2e434                 | _fatfs_cc_mktime_ret
2e434     2D 00 64 FD | 	ret
2e438                 | 
2e438                 | _fatfs_cc__gmtime_r
2e438     03 4A 05 F6 | 	mov	COUNT_, #3
2e43c     A8 00 A0 FD | 	call	#pushregs_
2e440     09 1F 02 FB | 	rdlong	local01, arg01
2e444     A8 00 00 FF 
2e448     80 1F 16 FD | 	qdiv	local01, ##86400
2e44c     18 FA 61 FD | 	getqx	result1
2e450     04 FA 05 F1 | 	add	result1, #4
2e454     07 FA 15 FD | 	qdiv	result1, #7
2e458     18 14 06 F1 | 	add	arg02, #24
2e45c     D1 7F 27 FF 
2e460     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e464     D1 7F 27 3F 
2e468     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e46c     03 00 00 3F 
2e470     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e474     03 00 00 CF 
2e478     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e47c                 | ' 	  year = 1970;
2e47c                 | ' 	}
2e47c                 | ' 
2e47c                 | ' 	for(;;) {
2e47c     19 FA 61 FD | 	getqy	result1
2e480     0A FB 61 FC | 	wrlong	result1, arg02
2e484     18 14 86 F1 | 	sub	arg02, #24
2e488                 | LR__4700
2e488     10 13 02 F6 | 	mov	arg01, local02
2e48c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e490     00 FA 0D F2 | 	cmp	result1, #0 wz
2e494     42 F1 00 5F 
2e498     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e49c     99 F0 00 AF 
2e4a0     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e4a4     11 1F 12 F2 | 	cmp	local01, local03 wc
2e4a8                 | ' 	    break;
2e4a8     01 20 06 31 |  if_ae	add	local02, #1
2e4ac     11 1F 82 31 |  if_ae	sub	local01, local03
2e4b0     D4 FF 9F 3D |  if_ae	jmp	#LR__4700
2e4b4     A8 00 00 FF 
2e4b8     80 1F 16 FD | 	qdiv	local01, ##86400
2e4bc     10 23 02 F6 | 	mov	local03, local02
2e4c0     03 00 00 FF 
2e4c4     6C 23 86 F1 | 	sub	local03, ##1900
2e4c8     14 14 06 F1 | 	add	arg02, #20
2e4cc     0A 23 62 FC | 	wrlong	local03, arg02
2e4d0     08 14 06 F1 | 	add	arg02, #8
2e4d4     10 13 02 F6 | 	mov	arg01, local02
2e4d8     18 20 62 FD | 	getqx	local02
2e4dc     0A 21 62 FC | 	wrlong	local02, arg02
2e4e0     1C 14 86 F1 | 	sub	arg02, #28
2e4e4     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4ec     1D 22 06 56 |  if_ne	mov	local03, #29
2e4f0     1C 22 06 A6 |  if_e	mov	local03, #28
2e4f4     02 00 00 FF 
2e4f8     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e4fc     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e500     02 00 00 FF 
2e504     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e508                 | ' 
2e508                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e508                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e508     00 12 06 F6 | 	mov	arg01, #0
2e50c     97 2A 48 FB | 	callpa	#(@LR__4702-@LR__4701)>>2,fcache_load_ptr_
2e510                 | LR__4701
2e510     09 23 02 F6 | 	mov	local03, arg01
2e514     02 22 66 F0 | 	shl	local03, #2
2e518     02 00 00 FF 
2e51c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e520     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e524     11 23 02 FB | 	rdlong	local03, local03
2e528     11 21 52 F2 | 	cmps	local02, local03 wc
2e52c     02 00 00 FF 
2e530     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e534     2C 00 90 CD |  if_b	jmp	#LR__4703
2e538     09 23 02 F6 | 	mov	local03, arg01
2e53c     02 22 66 F0 | 	shl	local03, #2
2e540     02 00 00 FF 
2e544     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e548     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e54c     11 23 02 FB | 	rdlong	local03, local03
2e550     11 21 82 F1 | 	sub	local02, local03
2e554     01 12 06 F1 | 	add	arg01, #1
2e558     02 00 00 FF 
2e55c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e560     AC FF 9F FD | 	jmp	#LR__4701
2e564                 | LR__4702
2e564                 | LR__4703
2e564     A8 00 00 FF 
2e568     80 1F 16 FD | 	qdiv	local01, ##86400
2e56c     10 14 06 F1 | 	add	arg02, #16
2e570     0A 13 62 FC | 	wrlong	arg01, arg02
2e574     01 20 06 F1 | 	add	local02, #1
2e578     04 14 86 F1 | 	sub	arg02, #4
2e57c     0A 21 62 FC | 	wrlong	local02, arg02
2e580     19 1E 62 FD | 	getqy	local01
2e584     07 00 00 FF 
2e588     10 1E 16 FD | 	qdiv	local01, ##3600
2e58c     18 22 62 FD | 	getqx	local03
2e590     07 00 00 FF 
2e594     10 1E 16 FD | 	qdiv	local01, ##3600
2e598     04 14 86 F1 | 	sub	arg02, #4
2e59c     0A 23 62 FC | 	wrlong	local03, arg02
2e5a0     19 1E 62 FD | 	getqy	local01
2e5a4     3C 1E 16 FD | 	qdiv	local01, #60
2e5a8     18 22 62 FD | 	getqx	local03
2e5ac     3C 1E 16 FD | 	qdiv	local01, #60
2e5b0     04 14 86 F1 | 	sub	arg02, #4
2e5b4     0A 23 62 FC | 	wrlong	local03, arg02
2e5b8     04 14 86 F1 | 	sub	arg02, #4
2e5bc                 | '         stm->tm_isdst = 0;
2e5bc                 | ' 
2e5bc                 | ' ;
2e5bc                 | '         return stm;
2e5bc     0A FB 01 F6 | 	mov	result1, arg02
2e5c0     19 22 62 FD | 	getqy	local03
2e5c4     0A 23 62 FC | 	wrlong	local03, arg02
2e5c8     20 14 06 F1 | 	add	arg02, #32
2e5cc     0A 01 68 FC | 	wrlong	#0, arg02
2e5d0     A7 F0 03 F6 | 	mov	ptra, fp
2e5d4     B2 00 A0 FD | 	call	#popregs_
2e5d8                 | _fatfs_cc__gmtime_r_ret
2e5d8     2D 00 64 FD | 	ret
2e5dc                 | 
2e5dc                 | _fatfs_cc__tzset
2e5dc     80 01 00 FF 
2e5e0     21 13 06 F6 | 	mov	arg01, ##@LR__5015
2e5e4     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e5e8     FD 12 02 F6 | 	mov	arg01, result1
2e5ec     02 00 00 FF 
2e5f0     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e5f4     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e5f8     02 00 00 FF 
2e5fc     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e600     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e604     02 00 00 FF 
2e608     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e60c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e610     02 00 00 FF 
2e614     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e618                 | _fatfs_cc__tzset_ret
2e618     2D 00 64 FD | 	ret
2e61c                 | 
2e61c                 | _fatfs_cc_getenv
2e61c     06 4A 05 F6 | 	mov	COUNT_, #6
2e620     A8 00 A0 FD | 	call	#pushregs_
2e624     09 1F 02 F6 | 	mov	local01, arg01
2e628     09 21 02 F6 | 	mov	local02, arg01
2e62c     97 06 48 FB | 	callpa	#(@LR__4711-@LR__4710)>>2,fcache_load_ptr_
2e630                 | LR__4710
2e630     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e634     01 20 06 51 |  if_ne	add	local02, #1
2e638     F4 FF 9F 5D |  if_ne	jmp	#LR__4710
2e63c                 | LR__4711
2e63c     09 21 82 F1 | 	sub	local02, arg01
2e640     10 FB 01 F6 | 	mov	result1, local02
2e644     02 00 00 FF 
2e648     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e64c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e650     02 00 00 FF 
2e654     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e658                 | '             return 0;
2e658     00 FA 05 A6 |  if_e	mov	result1, #0
2e65c     5C 00 90 AD |  if_e	jmp	#LR__4714
2e660                 | ' 
2e660                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e660     02 00 00 FF 
2e664     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e668     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e66c     02 00 00 FF 
2e670     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e674                 | LR__4712
2e674     11 25 0A FB | 	rdlong	local04, local03 wz
2e678     3C 00 90 AD |  if_e	jmp	#LR__4713
2e67c     12 13 02 F6 | 	mov	arg01, local04
2e680     0F 15 02 F6 | 	mov	arg02, local01
2e684     10 17 02 F6 | 	mov	arg03, local02
2e688     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e68c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e690     10 27 02 A6 |  if_e	mov	local05, local02
2e694     12 27 02 A1 |  if_e	add	local05, local04
2e698     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e69c     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e6a0                 | ' 			return name+len+1;
2e6a0     10 25 02 A1 |  if_e	add	local04, local02
2e6a4     01 24 06 A1 |  if_e	add	local04, #1
2e6a8     12 FB 01 A6 |  if_e	mov	result1, local04
2e6ac     0C 00 90 AD |  if_e	jmp	#LR__4714
2e6b0     04 22 06 F1 | 	add	local03, #4
2e6b4     BC FF 9F FD | 	jmp	#LR__4712
2e6b8                 | LR__4713
2e6b8                 | ' 	}
2e6b8                 | ' 	return 0;
2e6b8     00 FA 05 F6 | 	mov	result1, #0
2e6bc                 | LR__4714
2e6bc     A7 F0 03 F6 | 	mov	ptra, fp
2e6c0     B2 00 A0 FD | 	call	#popregs_
2e6c4                 | _fatfs_cc_getenv_ret
2e6c4     2D 00 64 FD | 	ret
2e6c8                 | 
2e6c8                 | _fatfs_cc__get_fattime
2e6c8     00 4A 05 F6 | 	mov	COUNT_, #0
2e6cc     A8 00 A0 FD | 	call	#pushregs_
2e6d0     34 F0 07 F1 | 	add	ptra, #52
2e6d4     00 12 06 F6 | 	mov	arg01, #0
2e6d8     38 FB BF FD | 	call	#_fatfs_cc_time
2e6dc     04 4E 05 F1 | 	add	fp, #4
2e6e0     A7 FA 61 FC | 	wrlong	result1, fp
2e6e4     A7 12 02 F6 | 	mov	arg01, fp
2e6e8     0C 4E 05 F1 | 	add	fp, #12
2e6ec     A7 14 02 F6 | 	mov	arg02, fp
2e6f0     10 4E 85 F1 | 	sub	fp, #16
2e6f4     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e6f8     24 4E 05 F1 | 	add	fp, #36
2e6fc     A7 14 02 FB | 	rdlong	arg02, fp
2e700     50 14 86 F1 | 	sub	arg02, #80
2e704     09 14 66 F0 | 	shl	arg02, #9
2e708     04 4E 85 F1 | 	sub	fp, #4
2e70c     A7 FA 01 FB | 	rdlong	result1, fp
2e710     01 FA 05 F1 | 	add	result1, #1
2e714     05 FA 65 F0 | 	shl	result1, #5
2e718     FD 14 42 F5 | 	or	arg02, result1
2e71c     04 4E 85 F1 | 	sub	fp, #4
2e720     A7 FA 01 FB | 	rdlong	result1, fp
2e724     FD 14 42 F5 | 	or	arg02, result1
2e728     14 4E 85 F1 | 	sub	fp, #20
2e72c     A7 14 62 FC | 	wrlong	arg02, fp
2e730     10 4E 05 F1 | 	add	fp, #16
2e734     A7 14 02 FB | 	rdlong	arg02, fp
2e738     0B 14 66 F0 | 	shl	arg02, #11
2e73c     04 4E 85 F1 | 	sub	fp, #4
2e740     A7 FA 01 FB | 	rdlong	result1, fp
2e744     05 FA 65 F0 | 	shl	result1, #5
2e748     FD 14 42 F5 | 	or	arg02, result1
2e74c     04 4E 85 F1 | 	sub	fp, #4
2e750     A7 FA 01 FB | 	rdlong	result1, fp
2e754     FD 14 42 F5 | 	or	arg02, result1
2e758     04 4E 85 F1 | 	sub	fp, #4
2e75c     A7 14 62 FC | 	wrlong	arg02, fp
2e760                 | ' 
2e760                 | '     now = time(0);
2e760                 | '     _gmtime_r (&now, &date);
2e760                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e760                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e760                 | '     return (ffdate << 16) | fftime;
2e760     04 4E 85 F1 | 	sub	fp, #4
2e764     A7 FA 01 FB | 	rdlong	result1, fp
2e768     10 FA 65 F0 | 	shl	result1, #16
2e76c     08 4E 85 F1 | 	sub	fp, #8
2e770     0A FB 41 F5 | 	or	result1, arg02
2e774     A7 F0 03 F6 | 	mov	ptra, fp
2e778     B2 00 A0 FD | 	call	#popregs_
2e77c                 | _fatfs_cc__get_fattime_ret
2e77c     2D 00 64 FD | 	ret
2e780                 | 
2e780                 | _fatfs_cc_unixtime_0961
2e780     00 4A 05 F6 | 	mov	COUNT_, #0
2e784     A8 00 A0 FD | 	call	#pushregs_
2e788     34 F0 07 F1 | 	add	ptra, #52
2e78c     04 4E 05 F1 | 	add	fp, #4
2e790     A7 12 62 FC | 	wrlong	arg01, fp
2e794     04 4E 05 F1 | 	add	fp, #4
2e798     A7 14 62 FC | 	wrlong	arg02, fp
2e79c     04 4E 85 F1 | 	sub	fp, #4
2e7a0     A7 14 02 FB | 	rdlong	arg02, fp
2e7a4     09 14 46 F0 | 	shr	arg02, #9
2e7a8     7F 14 06 F5 | 	and	arg02, #127
2e7ac     50 FA 05 F6 | 	mov	result1, #80
2e7b0     0A FB 01 F1 | 	add	result1, arg02
2e7b4     20 4E 05 F1 | 	add	fp, #32
2e7b8     A7 FA 61 FC | 	wrlong	result1, fp
2e7bc     20 4E 85 F1 | 	sub	fp, #32
2e7c0     A7 FA 01 FB | 	rdlong	result1, fp
2e7c4     05 FA 45 F0 | 	shr	result1, #5
2e7c8     FD FA 41 F8 | 	getnib	result1, result1, #0
2e7cc     01 FA 85 F1 | 	sub	result1, #1
2e7d0     1C 4E 05 F1 | 	add	fp, #28
2e7d4     A7 FA 61 FC | 	wrlong	result1, fp
2e7d8     1C 4E 85 F1 | 	sub	fp, #28
2e7dc     A7 FA 01 FB | 	rdlong	result1, fp
2e7e0     1F FA 05 F5 | 	and	result1, #31
2e7e4     18 4E 05 F1 | 	add	fp, #24
2e7e8     A7 FA 61 FC | 	wrlong	result1, fp
2e7ec     14 4E 85 F1 | 	sub	fp, #20
2e7f0     A7 FA 01 FB | 	rdlong	result1, fp
2e7f4     0B FA 45 F0 | 	shr	result1, #11
2e7f8     1F FA 05 F5 | 	and	result1, #31
2e7fc     10 4E 05 F1 | 	add	fp, #16
2e800     A7 FA 61 FC | 	wrlong	result1, fp
2e804     10 4E 85 F1 | 	sub	fp, #16
2e808     A7 FA 01 FB | 	rdlong	result1, fp
2e80c     05 FA 45 F0 | 	shr	result1, #5
2e810     3F FA 05 F5 | 	and	result1, #63
2e814     0C 4E 05 F1 | 	add	fp, #12
2e818     A7 FA 61 FC | 	wrlong	result1, fp
2e81c     0C 4E 85 F1 | 	sub	fp, #12
2e820     A7 14 02 FB | 	rdlong	arg02, fp
2e824     1F 14 06 F5 | 	and	arg02, #31
2e828     01 14 66 F0 | 	shl	arg02, #1
2e82c     08 4E 05 F1 | 	add	fp, #8
2e830     A7 14 62 FC | 	wrlong	arg02, fp
2e834     A7 12 02 F6 | 	mov	arg01, fp
2e838     10 4E 85 F1 | 	sub	fp, #16
2e83c     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e840     0C 4E 05 F1 | 	add	fp, #12
2e844     A7 FA 61 FC | 	wrlong	result1, fp
2e848                 | ' 
2e848                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e848                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e848                 | '     date.tm_mday = (dosdate & 0x1f);
2e848                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e848                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e848                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e848                 | ' 
2e848                 | '     t = mktime(&date);
2e848                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e848                 | '     return t;
2e848     0C 4E 85 F1 | 	sub	fp, #12
2e84c     A7 F0 03 F6 | 	mov	ptra, fp
2e850     B2 00 A0 FD | 	call	#popregs_
2e854                 | _fatfs_cc_unixtime_0961_ret
2e854     2D 00 64 FD | 	ret
2e858                 | 
2e858                 | _fatfs_cc__set_dos_error_0963
2e858     09 01 02 F6 | 	mov	_var01, arg01
2e85c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e85c                 | '     switch (derr) {
2e85c     14 00 26 F3 | 	fle	_var01, #20
2e860     30 00 62 FD | 	jmprel	_var01
2e864                 | LR__4720
2e864     50 00 90 FD | 	jmp	#LR__4721
2e868     84 00 90 FD | 	jmp	#LR__4735
2e86c     80 00 90 FD | 	jmp	#LR__4736
2e870     7C 00 90 FD | 	jmp	#LR__4737
2e874     48 00 90 FD | 	jmp	#LR__4722
2e878     44 00 90 FD | 	jmp	#LR__4723
2e87c     40 00 90 FD | 	jmp	#LR__4724
2e880     44 00 90 FD | 	jmp	#LR__4725
2e884     48 00 90 FD | 	jmp	#LR__4727
2e888     54 00 90 FD | 	jmp	#LR__4730
2e88c     38 00 90 FD | 	jmp	#LR__4726
2e890     4C 00 90 FD | 	jmp	#LR__4731
2e894     48 00 90 FD | 	jmp	#LR__4732
2e898     44 00 90 FD | 	jmp	#LR__4733
2e89c     50 00 90 FD | 	jmp	#LR__4738
2e8a0     4C 00 90 FD | 	jmp	#LR__4738
2e8a4     48 00 90 FD | 	jmp	#LR__4738
2e8a8     2C 00 90 FD | 	jmp	#LR__4728
2e8ac     38 00 90 FD | 	jmp	#LR__4734
2e8b0     2C 00 90 FD | 	jmp	#LR__4729
2e8b4     38 00 90 FD | 	jmp	#LR__4738
2e8b8                 | LR__4721
2e8b8     00 02 06 F6 | 	mov	_var02, #0
2e8bc                 | '         r = 0;
2e8bc                 | '         break;
2e8bc     34 00 90 FD | 	jmp	#LR__4739
2e8c0                 | LR__4722
2e8c0                 | LR__4723
2e8c0                 | LR__4724
2e8c0     04 02 06 F6 | 	mov	_var02, #4
2e8c4                 | '         r =  4 ;
2e8c4                 | '         break;
2e8c4     2C 00 90 FD | 	jmp	#LR__4739
2e8c8                 | LR__4725
2e8c8                 | LR__4726
2e8c8     06 02 06 F6 | 	mov	_var02, #6
2e8cc                 | '         r =  6 ;
2e8cc                 | '         break;
2e8cc     24 00 90 FD | 	jmp	#LR__4739
2e8d0                 | LR__4727
2e8d0     09 02 06 F6 | 	mov	_var02, #9
2e8d4                 | '         r =  9 ;
2e8d4                 | '         break;
2e8d4     1C 00 90 FD | 	jmp	#LR__4739
2e8d8                 | LR__4728
2e8d8     07 02 06 F6 | 	mov	_var02, #7
2e8dc                 | '         r =  7 ;
2e8dc                 | '         break;
2e8dc     14 00 90 FD | 	jmp	#LR__4739
2e8e0                 | LR__4729
2e8e0                 | LR__4730
2e8e0                 | LR__4731
2e8e0                 | LR__4732
2e8e0                 | LR__4733
2e8e0     0A 02 06 F6 | 	mov	_var02, #10
2e8e4                 | '         r =  10 ;
2e8e4                 | '         break;
2e8e4     0C 00 90 FD | 	jmp	#LR__4739
2e8e8                 | LR__4734
2e8e8     0B 02 06 F6 | 	mov	_var02, #11
2e8ec                 | '         r =  11 ;
2e8ec                 | '         break;
2e8ec     04 00 90 FD | 	jmp	#LR__4739
2e8f0                 | LR__4735
2e8f0                 | LR__4736
2e8f0                 | LR__4737
2e8f0                 | LR__4738
2e8f0     0C 02 06 F6 | 	mov	_var02, #12
2e8f4                 | '         r =  12 ;
2e8f4                 | '         break;
2e8f4                 | LR__4739
2e8f4                 | '     }
2e8f4                 | '     return _seterror(r);
2e8f4     00 02 4E F2 | 	cmps	_var02, #0 wz
2e8f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e8fc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2e900     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e904     01 FA 65 56 |  if_ne	neg	result1, #1
2e908     00 FA 05 A6 |  if_e	mov	result1, #0
2e90c                 | _fatfs_cc__set_dos_error_0963_ret
2e90c     2D 00 64 FD | 	ret
2e910                 | 
2e910                 | _fatfs_cc_v_creat
2e910     04 4A 05 F6 | 	mov	COUNT_, #4
2e914     A8 00 A0 FD | 	call	#pushregs_
2e918     09 1F 02 F6 | 	mov	local01, arg01
2e91c     0A 21 02 F6 | 	mov	local02, arg02
2e920     03 00 00 FF 
2e924     3C 12 06 F6 | 	mov	arg01, ##1596
2e928                 | '     return _gc_alloc(size);
2e928     10 14 06 F6 | 	mov	arg02, #16
2e92c     28 5E BF FD | 	call	#__system___gc_doalloc
2e930     FD 22 0A F6 | 	mov	local03, result1 wz
2e934                 | '       return _seterror( 7 );
2e934     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e938     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2e93c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e940     01 FA 65 A6 |  if_e	neg	result1, #1
2e944     58 00 90 AD |  if_e	jmp	#LR__4741
2e948     11 13 02 F6 | 	mov	arg01, local03
2e94c     00 14 06 F6 | 	mov	arg02, #0
2e950     03 00 00 FF 
2e954     3C 16 06 F6 | 	mov	arg03, ##1596
2e958     98 00 A0 FD | 	call	#\builtin_bytefill_
2e95c     02 00 00 FF 
2e960     14 22 06 F1 | 	add	local03, ##1044
2e964     11 13 02 F6 | 	mov	arg01, local03
2e968     02 00 00 FF 
2e96c     14 22 86 F1 | 	sub	local03, ##1044
2e970     10 15 02 F6 | 	mov	arg02, local02
2e974     07 16 06 F6 | 	mov	arg03, #7
2e978     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2e97c     FD 24 0A F6 | 	mov	local04, result1 wz
2e980     14 00 90 AD |  if_e	jmp	#LR__4740
2e984     11 13 02 F6 | 	mov	arg01, local03
2e988                 | '     return _gc_free(ptr);
2e988     D8 5E BF FD | 	call	#__system___gc_free
2e98c                 | '     free(f);
2e98c                 | '     return _set_dos_error(r);
2e98c     12 13 02 F6 | 	mov	arg01, local04
2e990     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2e994     08 00 90 FD | 	jmp	#LR__4741
2e998                 | LR__4740
2e998     0F 23 62 FC | 	wrlong	local03, local01
2e99c                 | '   }
2e99c                 | '   fil->vfsdata = f;
2e99c                 | '   return 0;
2e99c     00 FA 05 F6 | 	mov	result1, #0
2e9a0                 | LR__4741
2e9a0     A7 F0 03 F6 | 	mov	ptra, fp
2e9a4     B2 00 A0 FD | 	call	#popregs_
2e9a8                 | _fatfs_cc_v_creat_ret
2e9a8     2D 00 64 FD | 	ret
2e9ac                 | 
2e9ac                 | _fatfs_cc_v_close
2e9ac     02 4A 05 F6 | 	mov	COUNT_, #2
2e9b0     A8 00 A0 FD | 	call	#pushregs_
2e9b4     09 1F 02 FB | 	rdlong	local01, arg01
2e9b8     02 00 00 FF 
2e9bc     14 1E 06 F1 | 	add	local01, ##1044
2e9c0     0F 13 02 F6 | 	mov	arg01, local01
2e9c4     02 00 00 FF 
2e9c8     14 1E 86 F1 | 	sub	local01, ##1044
2e9cc     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2e9d0     FD 20 02 F6 | 	mov	local02, result1
2e9d4     0F 13 02 F6 | 	mov	arg01, local01
2e9d8                 | '     return _gc_free(ptr);
2e9d8     88 5E BF FD | 	call	#__system___gc_free
2e9dc                 | '     FAT_FIL *f = fil->vfsdata;
2e9dc                 | '     r=f_close(&f->fil);
2e9dc                 | '     free(f);
2e9dc                 | '     return _set_dos_error(r);
2e9dc     10 13 02 F6 | 	mov	arg01, local02
2e9e0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2e9e4     A7 F0 03 F6 | 	mov	ptra, fp
2e9e8     B2 00 A0 FD | 	call	#popregs_
2e9ec                 | _fatfs_cc_v_close_ret
2e9ec     2D 00 64 FD | 	ret
2e9f0                 | 
2e9f0                 | _fatfs_cc_v_opendir
2e9f0     04 4A 05 F6 | 	mov	COUNT_, #4
2e9f4     A8 00 A0 FD | 	call	#pushregs_
2e9f8     09 1F 02 F6 | 	mov	local01, arg01
2e9fc     0A 21 02 F6 | 	mov	local02, arg02
2ea00     30 12 06 F6 | 	mov	arg01, #48
2ea04                 | '     return _gc_alloc(size);
2ea04     10 14 06 F6 | 	mov	arg02, #16
2ea08     4C 5D BF FD | 	call	#__system___gc_doalloc
2ea0c     FD 22 0A F6 | 	mov	local03, result1 wz
2ea10                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ea10                 | '       return _seterror( 7 );
2ea10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ea14     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ea18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ea1c     01 FA 65 A6 |  if_e	neg	result1, #1
2ea20     34 00 90 AD |  if_e	jmp	#LR__4751
2ea24     10 15 02 F6 | 	mov	arg02, local02
2ea28     11 13 02 F6 | 	mov	arg01, local03
2ea2c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ea30     FD 24 0A F6 | 	mov	local04, result1 wz
2ea34     14 00 90 AD |  if_e	jmp	#LR__4750
2ea38     11 13 02 F6 | 	mov	arg01, local03
2ea3c                 | '     return _gc_free(ptr);
2ea3c     24 5E BF FD | 	call	#__system___gc_free
2ea40                 | '         free(f);
2ea40                 | '         return _set_dos_error(r);
2ea40     12 13 02 F6 | 	mov	arg01, local04
2ea44     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2ea48     0C 00 90 FD | 	jmp	#LR__4751
2ea4c                 | LR__4750
2ea4c     04 1E 06 F1 | 	add	local01, #4
2ea50     0F 23 62 FC | 	wrlong	local03, local01
2ea54                 | '     }
2ea54                 | '     dir->vfsdata = f;
2ea54                 | '     return 0;
2ea54     00 FA 05 F6 | 	mov	result1, #0
2ea58                 | LR__4751
2ea58     A7 F0 03 F6 | 	mov	ptra, fp
2ea5c     B2 00 A0 FD | 	call	#popregs_
2ea60                 | _fatfs_cc_v_opendir_ret
2ea60     2D 00 64 FD | 	ret
2ea64                 | 
2ea64                 | _fatfs_cc_v_closedir
2ea64     02 4A 05 F6 | 	mov	COUNT_, #2
2ea68     A8 00 A0 FD | 	call	#pushregs_
2ea6c     04 12 06 F1 | 	add	arg01, #4
2ea70     09 1F 02 FB | 	rdlong	local01, arg01
2ea74     0F 13 02 F6 | 	mov	arg01, local01
2ea78     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ea7c     FD 20 02 F6 | 	mov	local02, result1
2ea80     0F 13 02 F6 | 	mov	arg01, local01
2ea84                 | '     return _gc_free(ptr);
2ea84     DC 5D BF FD | 	call	#__system___gc_free
2ea88     00 20 0E F2 | 	cmp	local02, #0 wz
2ea8c     10 13 02 56 |  if_ne	mov	arg01, local02
2ea90     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0963
2ea94                 | '     return r;
2ea94     10 FB 01 F6 | 	mov	result1, local02
2ea98     A7 F0 03 F6 | 	mov	ptra, fp
2ea9c     B2 00 A0 FD | 	call	#popregs_
2eaa0                 | _fatfs_cc_v_closedir_ret
2eaa0     2D 00 64 FD | 	ret
2eaa4                 | 
2eaa4                 | _fatfs_cc_v_readdir
2eaa4     01 4A 05 F6 | 	mov	COUNT_, #1
2eaa8     A8 00 A0 FD | 	call	#pushregs_
2eaac     2C F1 07 F1 | 	add	ptra, #300
2eab0     04 4E 05 F1 | 	add	fp, #4
2eab4     A7 12 62 FC | 	wrlong	arg01, fp
2eab8     04 4E 05 F1 | 	add	fp, #4
2eabc     A7 14 62 FC | 	wrlong	arg02, fp
2eac0     04 4E 85 F1 | 	sub	fp, #4
2eac4     A7 16 02 FB | 	rdlong	arg03, fp
2eac8     04 16 06 F1 | 	add	arg03, #4
2eacc     0B 13 02 FB | 	rdlong	arg01, arg03
2ead0     08 4E 05 F1 | 	add	fp, #8
2ead4     A7 14 02 F6 | 	mov	arg02, fp
2ead8     0C 4E 85 F1 | 	sub	fp, #12
2eadc     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2eae0     28 4F 05 F1 | 	add	fp, #296
2eae4     A7 FA 61 FC | 	wrlong	result1, fp
2eae8     28 4F 85 F1 | 	sub	fp, #296
2eaec     00 FA 0D F2 | 	cmp	result1, #0 wz
2eaf0     14 00 90 AD |  if_e	jmp	#LR__4760
2eaf4                 | '         return _set_dos_error(r);
2eaf4     28 4F 05 F1 | 	add	fp, #296
2eaf8     A7 12 02 FB | 	rdlong	arg01, fp
2eafc     28 4F 85 F1 | 	sub	fp, #296
2eb00     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2eb04     C4 00 90 FD | 	jmp	#LR__4763
2eb08                 | LR__4760
2eb08     28 4E 05 F1 | 	add	fp, #40
2eb0c     A7 16 CA FA | 	rdbyte	arg03, fp wz
2eb10     28 4E 85 F1 | 	sub	fp, #40
2eb14                 | '         return -1;
2eb14     01 FA 65 A6 |  if_e	neg	result1, #1
2eb18     B0 00 90 AD |  if_e	jmp	#LR__4763
2eb1c     08 4E 05 F1 | 	add	fp, #8
2eb20     A7 12 02 FB | 	rdlong	arg01, fp
2eb24     20 4E 05 F1 | 	add	fp, #32
2eb28     A7 14 02 F6 | 	mov	arg02, fp
2eb2c     28 4E 85 F1 | 	sub	fp, #40
2eb30     3F 16 06 F6 | 	mov	arg03, #63
2eb34     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2eb38     08 4E 05 F1 | 	add	fp, #8
2eb3c     A7 16 02 FB | 	rdlong	arg03, fp
2eb40     3F 16 06 F1 | 	add	arg03, #63
2eb44     0B 01 48 FC | 	wrbyte	#0, arg03
2eb48     0C 4E 05 F1 | 	add	fp, #12
2eb4c     A7 16 C2 FA | 	rdbyte	arg03, fp
2eb50     14 4E 85 F1 | 	sub	fp, #20
2eb54     10 16 CE F7 | 	test	arg03, #16 wz
2eb58     18 00 90 AD |  if_e	jmp	#LR__4761
2eb5c     08 4E 05 F1 | 	add	fp, #8
2eb60     A7 16 02 FB | 	rdlong	arg03, fp
2eb64     08 4E 85 F1 | 	sub	fp, #8
2eb68     50 16 06 F1 | 	add	arg03, #80
2eb6c     0B 03 48 FC | 	wrbyte	#1, arg03
2eb70     14 00 90 FD | 	jmp	#LR__4762
2eb74                 | LR__4761
2eb74     08 4E 05 F1 | 	add	fp, #8
2eb78     A7 16 02 FB | 	rdlong	arg03, fp
2eb7c     08 4E 85 F1 | 	sub	fp, #8
2eb80     50 16 06 F1 | 	add	arg03, #80
2eb84     0B 01 48 FC | 	wrbyte	#0, arg03
2eb88                 | LR__4762
2eb88     08 4E 05 F1 | 	add	fp, #8
2eb8c     A7 16 02 FB | 	rdlong	arg03, fp
2eb90     04 4E 05 F1 | 	add	fp, #4
2eb94     A7 14 02 FB | 	rdlong	arg02, fp
2eb98     48 16 06 F1 | 	add	arg03, #72
2eb9c     0B 15 62 FC | 	wrlong	arg02, arg03
2eba0     04 4E 85 F1 | 	sub	fp, #4
2eba4     A7 1E 02 FB | 	rdlong	local01, fp
2eba8     08 4E 05 F1 | 	add	fp, #8
2ebac     A7 12 E2 FA | 	rdword	arg01, fp
2ebb0     02 4E 05 F1 | 	add	fp, #2
2ebb4     A7 14 E2 FA | 	rdword	arg02, fp
2ebb8     12 4E 85 F1 | 	sub	fp, #18
2ebbc     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0961
2ebc0     4C 1E 06 F1 | 	add	local01, #76
2ebc4     0F FB 61 FC | 	wrlong	result1, local01
2ebc8                 | '         ent->d_type =  (0) ;
2ebc8                 | '     }
2ebc8                 | '     ent->d_size = finfo.fsize;
2ebc8                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ebc8                 | '     return 0;
2ebc8     00 FA 05 F6 | 	mov	result1, #0
2ebcc                 | LR__4763
2ebcc     A7 F0 03 F6 | 	mov	ptra, fp
2ebd0     B2 00 A0 FD | 	call	#popregs_
2ebd4                 | _fatfs_cc_v_readdir_ret
2ebd4     2D 00 64 FD | 	ret
2ebd8                 | 
2ebd8                 | _fatfs_cc_v_stat
2ebd8     03 4A 05 F6 | 	mov	COUNT_, #3
2ebdc     A8 00 A0 FD | 	call	#pushregs_
2ebe0     30 F1 07 F1 | 	add	ptra, #304
2ebe4     04 4E 05 F1 | 	add	fp, #4
2ebe8     A7 12 62 FC | 	wrlong	arg01, fp
2ebec     04 4E 05 F1 | 	add	fp, #4
2ebf0     A7 14 62 FC | 	wrlong	arg02, fp
2ebf4     08 4E 85 F1 | 	sub	fp, #8
2ebf8     0A 13 02 F6 | 	mov	arg01, arg02
2ebfc     00 14 06 F6 | 	mov	arg02, #0
2ec00     30 16 06 F6 | 	mov	arg03, #48
2ec04     98 00 A0 FD | 	call	#\builtin_bytefill_
2ec08     04 4E 05 F1 | 	add	fp, #4
2ec0c     A7 FA 01 FB | 	rdlong	result1, fp
2ec10     04 4E 85 F1 | 	sub	fp, #4
2ec14     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ec18     2C 00 90 AD |  if_e	jmp	#LR__4770
2ec1c     04 4E 05 F1 | 	add	fp, #4
2ec20     A7 FA 01 FB | 	rdlong	result1, fp
2ec24     04 4E 85 F1 | 	sub	fp, #4
2ec28     FD FA C1 FA | 	rdbyte	result1, result1
2ec2c     2E FA 0D F2 | 	cmp	result1, #46 wz
2ec30     04 4E 05 A1 |  if_e	add	fp, #4
2ec34     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ec38     04 4E 85 A1 |  if_e	sub	fp, #4
2ec3c     01 1E 06 A1 |  if_e	add	local01, #1
2ec40     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ec44     18 00 90 5D |  if_ne	jmp	#LR__4771
2ec48                 | LR__4770
2ec48     18 4E 05 F1 | 	add	fp, #24
2ec4c     A7 20 48 FC | 	wrbyte	#16, fp
2ec50     0C 4E 85 F1 | 	sub	fp, #12
2ec54     A7 00 68 FC | 	wrlong	#0, fp
2ec58     0C 4E 85 F1 | 	sub	fp, #12
2ec5c     24 00 90 FD | 	jmp	#LR__4772
2ec60                 | LR__4771
2ec60     04 4E 05 F1 | 	add	fp, #4
2ec64     A7 12 02 FB | 	rdlong	arg01, fp
2ec68     0C 4E 05 F1 | 	add	fp, #12
2ec6c     A7 14 02 F6 | 	mov	arg02, fp
2ec70     10 4E 85 F1 | 	sub	fp, #16
2ec74     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ec78     0C 4E 05 F1 | 	add	fp, #12
2ec7c     A7 FA 61 FC | 	wrlong	result1, fp
2ec80     0C 4E 85 F1 | 	sub	fp, #12
2ec84                 | LR__4772
2ec84     0C 4E 05 F1 | 	add	fp, #12
2ec88     A7 20 0A FB | 	rdlong	local02, fp wz
2ec8c     0C 4E 85 F1 | 	sub	fp, #12
2ec90     14 00 90 AD |  if_e	jmp	#LR__4773
2ec94                 | '         return _set_dos_error(r);
2ec94     0C 4E 05 F1 | 	add	fp, #12
2ec98     A7 12 02 FB | 	rdlong	arg01, fp
2ec9c     0C 4E 85 F1 | 	sub	fp, #12
2eca0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2eca4     14 01 90 FD | 	jmp	#LR__4774
2eca8                 | LR__4773
2eca8     2C 4F 05 F1 | 	add	fp, #300
2ecac     A7 48 6A FC | 	wrlong	#292, fp
2ecb0     14 4F 85 F1 | 	sub	fp, #276
2ecb4     A7 22 C2 FA | 	rdbyte	local03, fp
2ecb8     18 4E 85 F1 | 	sub	fp, #24
2ecbc     01 22 CE F7 | 	test	local03, #1 wz
2ecc0     2C 4F 05 A1 |  if_e	add	fp, #300
2ecc4     A7 22 02 AB |  if_e	rdlong	local03, fp
2ecc8     92 22 46 A5 |  if_e	or	local03, #146
2eccc     A7 22 62 AC |  if_e	wrlong	local03, fp
2ecd0     2C 4F 85 A1 |  if_e	sub	fp, #300
2ecd4     18 4E 05 F1 | 	add	fp, #24
2ecd8     A7 22 C2 FA | 	rdbyte	local03, fp
2ecdc     18 4E 85 F1 | 	sub	fp, #24
2ece0     10 22 CE F7 | 	test	local03, #16 wz
2ece4     2C 4F 05 51 |  if_ne	add	fp, #300
2ece8     A7 22 02 5B |  if_ne	rdlong	local03, fp
2ecec     08 00 00 5F 
2ecf0     49 22 46 55 |  if_ne	or	local03, ##4169
2ecf4     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ecf8     2C 4F 85 51 |  if_ne	sub	fp, #300
2ecfc     08 4E 05 F1 | 	add	fp, #8
2ed00     A7 22 02 FB | 	rdlong	local03, fp
2ed04     24 4F 05 F1 | 	add	fp, #292
2ed08     A7 20 02 FB | 	rdlong	local02, fp
2ed0c     08 22 06 F1 | 	add	local03, #8
2ed10     11 21 62 FC | 	wrlong	local02, local03
2ed14     24 4F 85 F1 | 	sub	fp, #292
2ed18     A7 22 02 FB | 	rdlong	local03, fp
2ed1c     0C 22 06 F1 | 	add	local03, #12
2ed20     11 03 68 FC | 	wrlong	#1, local03
2ed24     A7 22 02 FB | 	rdlong	local03, fp
2ed28     08 4E 05 F1 | 	add	fp, #8
2ed2c     A7 20 02 FB | 	rdlong	local02, fp
2ed30     18 22 06 F1 | 	add	local03, #24
2ed34     11 21 62 FC | 	wrlong	local02, local03
2ed38     08 4E 85 F1 | 	sub	fp, #8
2ed3c     A7 22 02 FB | 	rdlong	local03, fp
2ed40     1C 22 06 F1 | 	add	local03, #28
2ed44     01 00 80 FF 
2ed48     11 01 68 FC | 	wrlong	##512, local03
2ed4c     A7 20 02 FB | 	rdlong	local02, fp
2ed50     10 23 02 F6 | 	mov	local03, local02
2ed54     18 20 06 F1 | 	add	local02, #24
2ed58     10 21 02 FB | 	rdlong	local02, local02
2ed5c     FF 21 06 F1 | 	add	local02, #511
2ed60     10 21 52 F6 | 	abs	local02, local02 wc
2ed64     09 20 46 F0 | 	shr	local02, #9
2ed68     10 21 82 F6 | 	negc	local02, local02
2ed6c     20 22 06 F1 | 	add	local03, #32
2ed70     11 21 62 FC | 	wrlong	local02, local03
2ed74     A7 20 02 FB | 	rdlong	local02, fp
2ed78     10 23 02 F6 | 	mov	local03, local02
2ed7c     10 1F 02 F6 | 	mov	local01, local02
2ed80     0C 4E 05 F1 | 	add	fp, #12
2ed84     A7 12 E2 FA | 	rdword	arg01, fp
2ed88     02 4E 05 F1 | 	add	fp, #2
2ed8c     A7 14 E2 FA | 	rdword	arg02, fp
2ed90     16 4E 85 F1 | 	sub	fp, #22
2ed94     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0961
2ed98     2C 1E 06 F1 | 	add	local01, #44
2ed9c     0F FB 61 FC | 	wrlong	result1, local01
2eda0     28 20 06 F1 | 	add	local02, #40
2eda4     10 FB 61 FC | 	wrlong	result1, local02
2eda8     24 22 06 F1 | 	add	local03, #36
2edac     11 FB 61 FC | 	wrlong	result1, local03
2edb0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2edb0                 | '     }
2edb0                 | '     buf->st_mode = mode;
2edb0                 | '     buf->st_nlink = 1;
2edb0                 | '     buf->st_size = finfo.fsize;
2edb0                 | '     buf->st_blksize = 512;
2edb0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2edb0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2edb0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2edb0                 | '     return r;
2edb0     0C 4E 05 F1 | 	add	fp, #12
2edb4     A7 FA 01 FB | 	rdlong	result1, fp
2edb8     0C 4E 85 F1 | 	sub	fp, #12
2edbc                 | LR__4774
2edbc     A7 F0 03 F6 | 	mov	ptra, fp
2edc0     B2 00 A0 FD | 	call	#popregs_
2edc4                 | _fatfs_cc_v_stat_ret
2edc4     2D 00 64 FD | 	ret
2edc8                 | 
2edc8                 | _fatfs_cc_v_read
2edc8     00 4A 05 F6 | 	mov	COUNT_, #0
2edcc     A8 00 A0 FD | 	call	#pushregs_
2edd0     1C F0 07 F1 | 	add	ptra, #28
2edd4     04 4E 05 F1 | 	add	fp, #4
2edd8     A7 12 62 FC | 	wrlong	arg01, fp
2eddc     04 4E 05 F1 | 	add	fp, #4
2ede0     A7 14 62 FC | 	wrlong	arg02, fp
2ede4     04 4E 05 F1 | 	add	fp, #4
2ede8     A7 16 62 FC | 	wrlong	arg03, fp
2edec     08 4E 85 F1 | 	sub	fp, #8
2edf0     A7 12 02 FB | 	rdlong	arg01, fp
2edf4     09 13 0A FB | 	rdlong	arg01, arg01 wz
2edf8     0C 4E 05 F1 | 	add	fp, #12
2edfc     A7 12 62 FC | 	wrlong	arg01, fp
2ee00     10 4E 85 F1 | 	sub	fp, #16
2ee04                 | '         return _seterror( 5 );
2ee04     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ee08     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ee0c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ee10     01 FA 65 A6 |  if_e	neg	result1, #1
2ee14     B8 00 90 AD |  if_e	jmp	#LR__4782
2ee18     10 4E 05 F1 | 	add	fp, #16
2ee1c     A7 12 02 FB | 	rdlong	arg01, fp
2ee20     02 00 00 FF 
2ee24     14 12 06 F1 | 	add	arg01, ##1044
2ee28     08 4E 85 F1 | 	sub	fp, #8
2ee2c     A7 14 02 FB | 	rdlong	arg02, fp
2ee30     04 4E 05 F1 | 	add	fp, #4
2ee34     A7 16 02 FB | 	rdlong	arg03, fp
2ee38     0C 4E 05 F1 | 	add	fp, #12
2ee3c     A7 18 02 F6 | 	mov	arg04, fp
2ee40     18 4E 85 F1 | 	sub	fp, #24
2ee44     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ee48     14 4E 05 F1 | 	add	fp, #20
2ee4c     A7 FA 61 FC | 	wrlong	result1, fp
2ee50     14 4E 85 F1 | 	sub	fp, #20
2ee54     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee58     34 00 90 AD |  if_e	jmp	#LR__4780
2ee5c     04 4E 05 F1 | 	add	fp, #4
2ee60     A7 18 02 FB | 	rdlong	arg04, fp
2ee64     0C 17 02 F6 | 	mov	arg03, arg04
2ee68     08 18 06 F1 | 	add	arg04, #8
2ee6c     0C 19 02 FB | 	rdlong	arg04, arg04
2ee70     20 18 46 F5 | 	or	arg04, #32
2ee74     08 16 06 F1 | 	add	arg03, #8
2ee78     0B 19 62 FC | 	wrlong	arg04, arg03
2ee7c                 | '         fil->state |=  (0x20) ;
2ee7c                 | '         return _set_dos_error(r);
2ee7c     10 4E 05 F1 | 	add	fp, #16
2ee80     A7 12 02 FB | 	rdlong	arg01, fp
2ee84     14 4E 85 F1 | 	sub	fp, #20
2ee88     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2ee8c     40 00 90 FD | 	jmp	#LR__4782
2ee90                 | LR__4780
2ee90     18 4E 05 F1 | 	add	fp, #24
2ee94     A7 FA 09 FB | 	rdlong	result1, fp wz
2ee98     18 4E 85 F1 | 	sub	fp, #24
2ee9c     24 00 90 5D |  if_ne	jmp	#LR__4781
2eea0     04 4E 05 F1 | 	add	fp, #4
2eea4     A7 FA 01 FB | 	rdlong	result1, fp
2eea8     FD 18 02 F6 | 	mov	arg04, result1
2eeac     04 4E 85 F1 | 	sub	fp, #4
2eeb0     08 FA 05 F1 | 	add	result1, #8
2eeb4     FD FA 01 FB | 	rdlong	result1, result1
2eeb8     10 FA 45 F5 | 	or	result1, #16
2eebc     08 18 06 F1 | 	add	arg04, #8
2eec0     0C FB 61 FC | 	wrlong	result1, arg04
2eec4                 | LR__4781
2eec4                 | '         fil->state |=  (0x10) ;
2eec4                 | '     }
2eec4                 | '     return x;
2eec4     18 4E 05 F1 | 	add	fp, #24
2eec8     A7 FA 01 FB | 	rdlong	result1, fp
2eecc     18 4E 85 F1 | 	sub	fp, #24
2eed0                 | LR__4782
2eed0     A7 F0 03 F6 | 	mov	ptra, fp
2eed4     B2 00 A0 FD | 	call	#popregs_
2eed8                 | _fatfs_cc_v_read_ret
2eed8     2D 00 64 FD | 	ret
2eedc                 | 
2eedc                 | _fatfs_cc_v_write
2eedc     00 4A 05 F6 | 	mov	COUNT_, #0
2eee0     A8 00 A0 FD | 	call	#pushregs_
2eee4     1C F0 07 F1 | 	add	ptra, #28
2eee8     04 4E 05 F1 | 	add	fp, #4
2eeec     A7 12 62 FC | 	wrlong	arg01, fp
2eef0     04 4E 05 F1 | 	add	fp, #4
2eef4     A7 14 62 FC | 	wrlong	arg02, fp
2eef8     04 4E 05 F1 | 	add	fp, #4
2eefc     A7 16 62 FC | 	wrlong	arg03, fp
2ef00     08 4E 85 F1 | 	sub	fp, #8
2ef04     A7 12 02 FB | 	rdlong	arg01, fp
2ef08     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ef0c     0C 4E 05 F1 | 	add	fp, #12
2ef10     A7 12 62 FC | 	wrlong	arg01, fp
2ef14     10 4E 85 F1 | 	sub	fp, #16
2ef18                 | '         return _seterror( 5 );
2ef18     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ef1c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ef20     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ef24     01 FA 65 A6 |  if_e	neg	result1, #1
2ef28     84 00 90 AD |  if_e	jmp	#LR__4791
2ef2c     10 4E 05 F1 | 	add	fp, #16
2ef30     A7 12 02 FB | 	rdlong	arg01, fp
2ef34     02 00 00 FF 
2ef38     14 12 06 F1 | 	add	arg01, ##1044
2ef3c     08 4E 85 F1 | 	sub	fp, #8
2ef40     A7 14 02 FB | 	rdlong	arg02, fp
2ef44     04 4E 05 F1 | 	add	fp, #4
2ef48     A7 16 02 FB | 	rdlong	arg03, fp
2ef4c     0C 4E 05 F1 | 	add	fp, #12
2ef50     A7 18 02 F6 | 	mov	arg04, fp
2ef54     18 4E 85 F1 | 	sub	fp, #24
2ef58     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2ef5c     14 4E 05 F1 | 	add	fp, #20
2ef60     A7 FA 61 FC | 	wrlong	result1, fp
2ef64     14 4E 85 F1 | 	sub	fp, #20
2ef68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef6c     34 00 90 AD |  if_e	jmp	#LR__4790
2ef70     04 4E 05 F1 | 	add	fp, #4
2ef74     A7 18 02 FB | 	rdlong	arg04, fp
2ef78     0C 17 02 F6 | 	mov	arg03, arg04
2ef7c     08 18 06 F1 | 	add	arg04, #8
2ef80     0C 19 02 FB | 	rdlong	arg04, arg04
2ef84     20 18 46 F5 | 	or	arg04, #32
2ef88     08 16 06 F1 | 	add	arg03, #8
2ef8c     0B 19 62 FC | 	wrlong	arg04, arg03
2ef90                 | '         fil->state |=  (0x20) ;
2ef90                 | '         return _set_dos_error(r);
2ef90     10 4E 05 F1 | 	add	fp, #16
2ef94     A7 12 02 FB | 	rdlong	arg01, fp
2ef98     14 4E 85 F1 | 	sub	fp, #20
2ef9c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2efa0     0C 00 90 FD | 	jmp	#LR__4791
2efa4                 | LR__4790
2efa4                 | '     }
2efa4                 | '     return x;
2efa4     18 4E 05 F1 | 	add	fp, #24
2efa8     A7 FA 01 FB | 	rdlong	result1, fp
2efac     18 4E 85 F1 | 	sub	fp, #24
2efb0                 | LR__4791
2efb0     A7 F0 03 F6 | 	mov	ptra, fp
2efb4     B2 00 A0 FD | 	call	#popregs_
2efb8                 | _fatfs_cc_v_write_ret
2efb8     2D 00 64 FD | 	ret
2efbc                 | 
2efbc                 | _fatfs_cc_v_lseek
2efbc     04 4A 05 F6 | 	mov	COUNT_, #4
2efc0     A8 00 A0 FD | 	call	#pushregs_
2efc4     0A 1F 02 F6 | 	mov	local01, arg02
2efc8     0B 21 02 F6 | 	mov	local02, arg03
2efcc     09 23 02 FB | 	rdlong	local03, arg01
2efd0     02 00 00 FF 
2efd4     14 22 0E F1 | 	add	local03, ##1044 wz
2efd8                 | '         return _seterror( 5 );
2efd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2efdc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2efe0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2efe4     01 FA 65 A6 |  if_e	neg	result1, #1
2efe8     4C 00 90 AD |  if_e	jmp	#LR__4802
2efec     00 20 0E F2 | 	cmp	local02, #0 wz
2eff0     24 00 90 AD |  if_e	jmp	#LR__4800
2eff4     01 20 0E F2 | 	cmp	local02, #1 wz
2eff8     14 22 06 A1 |  if_e	add	local03, #20
2effc     11 25 02 AB |  if_e	rdlong	local04, local03
2f000     14 22 86 A1 |  if_e	sub	local03, #20
2f004     12 1F 02 A1 |  if_e	add	local01, local04
2f008     0C 22 06 51 |  if_ne	add	local03, #12
2f00c     11 25 02 5B |  if_ne	rdlong	local04, local03
2f010     0C 22 86 51 |  if_ne	sub	local03, #12
2f014     12 1F 02 51 |  if_ne	add	local01, local04
2f018                 | LR__4800
2f018     0F 15 02 F6 | 	mov	arg02, local01
2f01c     11 13 02 F6 | 	mov	arg01, local03
2f020     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f024     FD 12 0A F6 | 	mov	arg01, result1 wz
2f028     08 00 90 AD |  if_e	jmp	#LR__4801
2f02c                 | '         return _set_dos_error(result);
2f02c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f030     04 00 90 FD | 	jmp	#LR__4802
2f034                 | LR__4801
2f034                 | '     }
2f034                 | '     return offset;
2f034     0F FB 01 F6 | 	mov	result1, local01
2f038                 | LR__4802
2f038     A7 F0 03 F6 | 	mov	ptra, fp
2f03c     B2 00 A0 FD | 	call	#popregs_
2f040                 | _fatfs_cc_v_lseek_ret
2f040     2D 00 64 FD | 	ret
2f044                 | 
2f044                 | _fatfs_cc_v_ioctl
2f044                 | ' {
2f044                 | '     return _seterror( 10 );
2f044     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f048     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f04c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f050     01 FA 65 F6 | 	neg	result1, #1
2f054                 | _fatfs_cc_v_ioctl_ret
2f054     2D 00 64 FD | 	ret
2f058                 | 
2f058                 | _fatfs_cc_v_mkdir
2f058     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f05c     FD 12 02 F6 | 	mov	arg01, result1
2f060                 | ' 
2f060                 | '     r = f_mkdir(name);
2f060                 | '     return _set_dos_error(r);
2f060     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f064                 | _fatfs_cc_v_mkdir_ret
2f064     2D 00 64 FD | 	ret
2f068                 | 
2f068                 | _fatfs_cc_v_remove
2f068     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f06c     FD 12 02 F6 | 	mov	arg01, result1
2f070                 | ' 
2f070                 | '     r = f_unlink(name);
2f070                 | '     return _set_dos_error(r);
2f070     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f074                 | _fatfs_cc_v_remove_ret
2f074     2D 00 64 FD | 	ret
2f078                 | 
2f078                 | _fatfs_cc_v_rmdir
2f078     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f07c     FD 12 02 F6 | 	mov	arg01, result1
2f080                 | ' 
2f080                 | '     r = f_unlink(name);
2f080                 | '     return _set_dos_error(r);
2f080     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f084                 | _fatfs_cc_v_rmdir_ret
2f084     2D 00 64 FD | 	ret
2f088                 | 
2f088                 | _fatfs_cc_v_rename
2f088     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f08c     FD 12 02 F6 | 	mov	arg01, result1
2f090                 | '     return _set_dos_error(r);
2f090     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f094                 | _fatfs_cc_v_rename_ret
2f094     2D 00 64 FD | 	ret
2f098                 | 
2f098                 | _fatfs_cc_v_open
2f098     07 4A 05 F6 | 	mov	COUNT_, #7
2f09c     A8 00 A0 FD | 	call	#pushregs_
2f0a0     09 1F 02 F6 | 	mov	local01, arg01
2f0a4     0A 21 02 F6 | 	mov	local02, arg02
2f0a8     0B 23 02 F6 | 	mov	local03, arg03
2f0ac     03 00 00 FF 
2f0b0     3C 12 06 F6 | 	mov	arg01, ##1596
2f0b4                 | '     return _gc_alloc(size);
2f0b4     10 14 06 F6 | 	mov	arg02, #16
2f0b8     9C 56 BF FD | 	call	#__system___gc_doalloc
2f0bc     FD 24 0A F6 | 	mov	local04, result1 wz
2f0c0                 | '       return _seterror( 7 );
2f0c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f0c4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f0c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f0cc     01 FA 65 A6 |  if_e	neg	result1, #1
2f0d0     98 00 90 AD |  if_e	jmp	#LR__4816
2f0d4     12 13 02 F6 | 	mov	arg01, local04
2f0d8     00 14 06 F6 | 	mov	arg02, #0
2f0dc     03 00 00 FF 
2f0e0     3C 16 06 F6 | 	mov	arg03, ##1596
2f0e4     98 00 A0 FD | 	call	#\builtin_bytefill_
2f0e8                 | '   switch (flags & 3) {
2f0e8     11 27 02 F6 | 	mov	local05, local03
2f0ec     03 26 0E F5 | 	and	local05, #3 wz
2f0f0     0C 00 90 AD |  if_e	jmp	#LR__4810
2f0f4     01 26 0E F2 | 	cmp	local05, #1 wz
2f0f8     0C 00 90 AD |  if_e	jmp	#LR__4811
2f0fc     10 00 90 FD | 	jmp	#LR__4812
2f100                 | LR__4810
2f100     01 28 06 F6 | 	mov	local06, #1
2f104                 | '       fs_flags =  0x01 ;
2f104                 | '       break;
2f104     0C 00 90 FD | 	jmp	#LR__4813
2f108                 | LR__4811
2f108     02 28 06 F6 | 	mov	local06, #2
2f10c                 | '       fs_flags =  0x02 ;
2f10c                 | '       break;
2f10c     04 00 90 FD | 	jmp	#LR__4813
2f110                 | LR__4812
2f110     03 28 06 F6 | 	mov	local06, #3
2f114                 | '       fs_flags =  0x01  |  0x02 ;
2f114                 | '       break;
2f114                 | LR__4813
2f114     08 22 CE F7 | 	test	local03, #8 wz
2f118     18 28 46 55 |  if_ne	or	local06, #24
2f11c     08 00 90 5D |  if_ne	jmp	#LR__4814
2f120     20 22 CE F7 | 	test	local03, #32 wz
2f124     30 28 46 55 |  if_ne	or	local06, #48
2f128                 | LR__4814
2f128     02 00 00 FF 
2f12c     14 24 06 F1 | 	add	local04, ##1044
2f130     12 13 02 F6 | 	mov	arg01, local04
2f134     02 00 00 FF 
2f138     14 24 86 F1 | 	sub	local04, ##1044
2f13c     10 15 02 F6 | 	mov	arg02, local02
2f140     14 17 02 F6 | 	mov	arg03, local06
2f144     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f148     FD 2A 0A F6 | 	mov	local07, result1 wz
2f14c     14 00 90 AD |  if_e	jmp	#LR__4815
2f150     12 13 02 F6 | 	mov	arg01, local04
2f154                 | '     return _gc_free(ptr);
2f154     0C 57 BF FD | 	call	#__system___gc_free
2f158                 | '     free(f);
2f158                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f158                 | '     return _set_dos_error(r);
2f158     15 13 02 F6 | 	mov	arg01, local07
2f15c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f160     08 00 90 FD | 	jmp	#LR__4816
2f164                 | LR__4815
2f164     0F 25 62 FC | 	wrlong	local04, local01
2f168                 | '   }
2f168                 | '   fil->vfsdata = f;
2f168                 | '   return 0;
2f168     00 FA 05 F6 | 	mov	result1, #0
2f16c                 | LR__4816
2f16c     A7 F0 03 F6 | 	mov	ptra, fp
2f170     B2 00 A0 FD | 	call	#popregs_
2f174                 | _fatfs_cc_v_open_ret
2f174     2D 00 64 FD | 	ret
2f178                 | 
2f178                 | _fatfs_cc_v_flush
2f178     09 13 02 FB | 	rdlong	arg01, arg01
2f17c     02 00 00 FF 
2f180     14 12 0E F1 | 	add	arg01, ##1044 wz
2f184                 | '         return _seterror( 5 );
2f184     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f188     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f18c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f190     01 FA 65 A6 |  if_e	neg	result1, #1
2f194     0C 00 90 AD |  if_e	jmp	#LR__4820
2f198     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f19c     FD 12 02 F6 | 	mov	arg01, result1
2f1a0                 | '     }
2f1a0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f1a0                 | '     result = f_sync(f);
2f1a0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f1a0                 | '     return _set_dos_error(result);
2f1a0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f1a4                 | LR__4820
2f1a4                 | _fatfs_cc_v_flush_ret
2f1a4     2D 00 64 FD | 	ret
2f1a8                 | 
2f1a8                 | _fatfs_cc_v_init
2f1a8                 | ' {
2f1a8                 | '     return 0;
2f1a8     00 FA 05 F6 | 	mov	result1, #0
2f1ac                 | _fatfs_cc_v_init_ret
2f1ac     2D 00 64 FD | 	ret
2f1b0                 | 
2f1b0                 | _fatfs_cc_v_deinit
2f1b0     80 01 00 FF 
2f1b4     24 15 06 F6 | 	mov	arg02, ##@LR__5016
2f1b8     00 12 06 F6 | 	mov	arg01, #0
2f1bc     00 16 06 F6 | 	mov	arg03, #0
2f1c0     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f1c4     01 00 00 FF 
2f1c8     08 E4 05 F1 | 	add	objptr, ##520
2f1cc     F2 12 02 FB | 	rdlong	arg01, objptr
2f1d0     04 E4 05 F1 | 	add	objptr, #4
2f1d4     F2 14 02 FB | 	rdlong	arg02, objptr
2f1d8     01 00 00 FF 
2f1dc     0C E4 85 F1 | 	sub	objptr, ##524
2f1e0     F0 3D BF FD | 	call	#__system___freepins
2f1e4                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f1e4                 | '     _freepins(f_pinmask);
2f1e4                 | '     return 0;
2f1e4     00 FA 05 F6 | 	mov	result1, #0
2f1e8                 | _fatfs_cc_v_deinit_ret
2f1e8     2D 00 64 FD | 	ret
2f1ec                 | 
2f1ec                 | _fatfs_cc_get_vfs
2f1ec     01 4A 05 F6 | 	mov	COUNT_, #1
2f1f0     A8 00 A0 FD | 	call	#pushregs_
2f1f4     09 1F 02 F6 | 	mov	local01, arg01
2f1f8     50 12 06 F6 | 	mov	arg01, #80
2f1fc     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f200     FD 12 02 F6 | 	mov	arg01, result1
2f204     F2 FA 01 F6 | 	mov	result1, objptr
2f208     00 E0 04 FF 
2f20c     00 FA 45 F5 | 	or	result1, ##163577856
2f210     09 FB 61 FC | 	wrlong	result1, arg01
2f214     F2 FA 01 F6 | 	mov	result1, objptr
2f218     00 E8 04 FF 
2f21c     00 FA 45 F5 | 	or	result1, ##164626432
2f220     04 12 06 F1 | 	add	arg01, #4
2f224     09 FB 61 FC | 	wrlong	result1, arg01
2f228     F2 FA 01 F6 | 	mov	result1, objptr
2f22c     00 F0 04 FF 
2f230     00 FA 45 F5 | 	or	result1, ##165675008
2f234     04 12 06 F1 | 	add	arg01, #4
2f238     09 FB 61 FC | 	wrlong	result1, arg01
2f23c     F2 FA 01 F6 | 	mov	result1, objptr
2f240     00 F8 04 FF 
2f244     00 FA 45 F5 | 	or	result1, ##166723584
2f248     04 12 06 F1 | 	add	arg01, #4
2f24c     09 FB 61 FC | 	wrlong	result1, arg01
2f250     F2 FA 01 F6 | 	mov	result1, objptr
2f254     00 00 05 FF 
2f258     00 FA 45 F5 | 	or	result1, ##167772160
2f25c     04 12 06 F1 | 	add	arg01, #4
2f260     09 FB 61 FC | 	wrlong	result1, arg01
2f264     04 12 06 F1 | 	add	arg01, #4
2f268     09 01 68 FC | 	wrlong	#0, arg01
2f26c     04 12 06 F1 | 	add	arg01, #4
2f270     09 1F 62 FC | 	wrlong	local01, arg01
2f274     04 12 06 F1 | 	add	arg01, #4
2f278     09 01 68 FC | 	wrlong	#0, arg01
2f27c     F2 FA 01 F6 | 	mov	result1, objptr
2f280     00 08 05 FF 
2f284     00 FA 45 F5 | 	or	result1, ##168820736
2f288     04 12 06 F1 | 	add	arg01, #4
2f28c     09 FB 61 FC | 	wrlong	result1, arg01
2f290     F2 FA 01 F6 | 	mov	result1, objptr
2f294     00 10 05 FF 
2f298     00 FA 45 F5 | 	or	result1, ##169869312
2f29c     04 12 06 F1 | 	add	arg01, #4
2f2a0     09 FB 61 FC | 	wrlong	result1, arg01
2f2a4     F2 FA 01 F6 | 	mov	result1, objptr
2f2a8     00 18 05 FF 
2f2ac     00 FA 45 F5 | 	or	result1, ##170917888
2f2b0     04 12 06 F1 | 	add	arg01, #4
2f2b4     09 FB 61 FC | 	wrlong	result1, arg01
2f2b8     F2 FA 01 F6 | 	mov	result1, objptr
2f2bc     00 20 05 FF 
2f2c0     00 FA 45 F5 | 	or	result1, ##171966464
2f2c4     04 12 06 F1 | 	add	arg01, #4
2f2c8     09 FB 61 FC | 	wrlong	result1, arg01
2f2cc     F2 FA 01 F6 | 	mov	result1, objptr
2f2d0     00 28 05 FF 
2f2d4     00 FA 45 F5 | 	or	result1, ##173015040
2f2d8     04 12 06 F1 | 	add	arg01, #4
2f2dc     09 FB 61 FC | 	wrlong	result1, arg01
2f2e0     F2 FA 01 F6 | 	mov	result1, objptr
2f2e4     00 30 05 FF 
2f2e8     00 FA 45 F5 | 	or	result1, ##174063616
2f2ec     04 12 06 F1 | 	add	arg01, #4
2f2f0     09 FB 61 FC | 	wrlong	result1, arg01
2f2f4     F2 FA 01 F6 | 	mov	result1, objptr
2f2f8     00 38 05 FF 
2f2fc     00 FA 45 F5 | 	or	result1, ##175112192
2f300     04 12 06 F1 | 	add	arg01, #4
2f304     09 FB 61 FC | 	wrlong	result1, arg01
2f308     F2 FA 01 F6 | 	mov	result1, objptr
2f30c     00 40 05 FF 
2f310     00 FA 45 F5 | 	or	result1, ##176160768
2f314     04 12 06 F1 | 	add	arg01, #4
2f318     09 FB 61 FC | 	wrlong	result1, arg01
2f31c     F2 FA 01 F6 | 	mov	result1, objptr
2f320     00 48 05 FF 
2f324     00 FA 45 F5 | 	or	result1, ##177209344
2f328     04 12 06 F1 | 	add	arg01, #4
2f32c     09 FB 61 FC | 	wrlong	result1, arg01
2f330     F2 FA 01 F6 | 	mov	result1, objptr
2f334     00 50 05 FF 
2f338     00 FA 45 F5 | 	or	result1, ##178257920
2f33c     04 12 06 F1 | 	add	arg01, #4
2f340     09 FB 61 FC | 	wrlong	result1, arg01
2f344     F2 FA 01 F6 | 	mov	result1, objptr
2f348     00 58 05 FF 
2f34c     00 FA 45 F5 | 	or	result1, ##179306496
2f350     04 12 06 F1 | 	add	arg01, #4
2f354     09 FB 61 FC | 	wrlong	result1, arg01
2f358     F2 FA 01 F6 | 	mov	result1, objptr
2f35c     00 60 05 FF 
2f360     00 FA 45 F5 | 	or	result1, ##180355072
2f364     04 12 06 F1 | 	add	arg01, #4
2f368     09 FB 61 FC | 	wrlong	result1, arg01
2f36c     4C 12 86 F1 | 	sub	arg01, #76
2f370                 | ' 
2f370                 | '     v->close = &v_close;
2f370                 | '     v->read = &v_read;
2f370                 | '     v->write = &v_write;
2f370                 | '     v->lseek = &v_lseek;
2f370                 | '     v->ioctl = &v_ioctl;
2f370                 | '     v->flush = 0;
2f370                 | '     v->vfs_data = ptr;
2f370                 | '     v->reserved = 0;
2f370                 | ' 
2f370                 | '     v->open = &v_open;
2f370                 | '     v->creat = &v_creat;
2f370                 | '     v->opendir = &v_opendir;
2f370                 | '     v->closedir = &v_closedir;
2f370                 | '     v->readdir = &v_readdir;
2f370                 | '     v->stat = &v_stat;
2f370                 | ' 
2f370                 | '     v->mkdir = &v_mkdir;
2f370                 | '     v->rmdir = &v_rmdir;
2f370                 | ' 
2f370                 | '     v->remove = &v_remove;
2f370                 | '     v->rename = &v_rename;
2f370                 | ' 
2f370                 | '     v->init = &v_init;
2f370                 | '     v->deinit = &v_deinit;
2f370                 | ' 
2f370                 | '     return v;
2f370     09 FB 01 F6 | 	mov	result1, arg01
2f374     A7 F0 03 F6 | 	mov	ptra, fp
2f378     B2 00 A0 FD | 	call	#popregs_
2f37c                 | _fatfs_cc_get_vfs_ret
2f37c     2D 00 64 FD | 	ret
2f380                 | 
2f380                 | _fatfs_cc_xmit_mmc_1110
2f380     01 00 00 FF 
2f384     10 E4 05 F1 | 	add	objptr, ##528
2f388     F2 00 02 FB | 	rdlong	_var01, objptr
2f38c     08 E4 05 F1 | 	add	objptr, #8
2f390     F2 02 02 FB | 	rdlong	_var02, objptr
2f394     01 00 00 FF 
2f398     18 E4 85 F1 | 	sub	objptr, ##536
2f39c     40 02 62 FD | 	dirl	_var02
2f3a0     28 02 64 FD | 	setq	#1
2f3a4     09 05 02 FB | 	rdlong	_var03, arg01
2f3a8     69 04 62 FD | 	rev	_var03
2f3ac     1B 04 FE F9 | 	movbyts	_var03, #27
2f3b0     01 05 22 FC | 	wypin	_var03, _var02
2f3b4     0A 05 02 F6 | 	mov	_var03, arg02
2f3b8     02 14 4E F0 | 	shr	arg02, #2 wz
2f3bc     03 04 66 F0 | 	shl	_var03, #3
2f3c0     00 05 22 FC | 	wypin	_var03, _var01
2f3c4     41 02 62 FD | 	dirh	_var02
2f3c8     08 12 06 F1 | 	add	arg01, #8
2f3cc     69 06 62 FD | 	rev	_var04
2f3d0     1B 06 FE F9 | 	movbyts	_var04, #27
2f3d4                 | LR__4830
2f3d4     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f3d8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f3dc     04 12 06 51 |  if_ne	add	arg01, #4
2f3e0     69 06 62 5D |  if_ne	rev	_var04
2f3e4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f3e8                 | LR__4831
2f3e8     40 02 72 5D |  if_ne	testp	_var02 wc
2f3ec     F8 FF 9F 1D |  if_a	jmp	#LR__4831
2f3f0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4830
2f3f4                 | LR__4832
2f3f4     40 00 72 FD | 	testp	_var01 wc
2f3f8     F8 FF 9F 3D |  if_ae	jmp	#LR__4832
2f3fc     40 02 62 FD | 	dirl	_var02
2f400     FF FF FF FF 
2f404     01 FF 2B FC | 	wypin	##-1, _var02
2f408     41 02 62 FD | 	dirh	_var02
2f40c                 | _fatfs_cc_xmit_mmc_1110_ret
2f40c     2D 00 64 FD | 	ret
2f410                 | 
2f410                 | _fatfs_cc_rcvr_mmc_1117
2f410     01 00 00 FF 
2f414     10 E4 05 F1 | 	add	objptr, ##528
2f418     F2 00 02 FB | 	rdlong	_var01, objptr
2f41c     0C E4 05 F1 | 	add	objptr, #12
2f420     F2 02 02 FB | 	rdlong	_var02, objptr
2f424     01 00 00 FF 
2f428     1C E4 85 F1 | 	sub	objptr, ##540
2f42c     01 03 08 FC | 	akpin	_var02
2f430     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f434     02 04 4E F0 | 	shr	_var03, #2 wz
2f438     30 00 90 AD |  if_e	jmp	#LR__4842
2f43c     02 07 02 F6 | 	mov	_var04, _var03
2f440     05 06 66 F0 | 	shl	_var04, #5
2f444     00 07 22 FC | 	wypin	_var04, _var01
2f448     01 7F 18 FC | 	wxpin	#63, _var02
2f44c                 | LR__4840
2f44c                 | LR__4841
2f44c     40 02 72 FD | 	testp	_var02 wc
2f450     F8 FF 9F 3D |  if_ae	jmp	#LR__4841
2f454     01 07 8A FA | 	rdpin	_var04, _var02
2f458     69 06 62 FD | 	rev	_var04
2f45c     1B 06 FE F9 | 	movbyts	_var04, #27
2f460     09 07 62 FC | 	wrlong	_var04, arg01
2f464     04 12 06 F1 | 	add	arg01, #4
2f468     F8 05 6E FB | 	djnz	_var03, #LR__4840
2f46c                 | LR__4842
2f46c     03 14 0E F5 | 	and	arg02, #3 wz
2f470     24 00 90 AD |  if_e	jmp	#LR__4845
2f474     01 4F 18 FC | 	wxpin	#39, _var02
2f478                 | LR__4843
2f478     00 11 28 FC | 	wypin	#8, _var01
2f47c                 | LR__4844
2f47c     40 02 72 FD | 	testp	_var02 wc
2f480     F8 FF 9F 3D |  if_ae	jmp	#LR__4844
2f484     01 07 8A FA | 	rdpin	_var04, _var02
2f488     69 06 62 FD | 	rev	_var04
2f48c     09 07 42 FC | 	wrbyte	_var04, arg01
2f490     01 12 06 F1 | 	add	arg01, #1
2f494     F8 15 6E FB | 	djnz	arg02, #LR__4843
2f498                 | LR__4845
2f498                 | _fatfs_cc_rcvr_mmc_1117_ret
2f498     2D 00 64 FD | 	ret
2f49c                 | 
2f49c                 | _fatfs_cc_wait_ready_1121
2f49c     01 4A 05 F6 | 	mov	COUNT_, #1
2f4a0     A8 00 A0 FD | 	call	#pushregs_
2f4a4     10 F0 07 F1 | 	add	ptra, #16
2f4a8     1A FA 61 FD | 	getct	result1
2f4ac     08 4E 05 F1 | 	add	fp, #8
2f4b0     A7 FA 61 FC | 	wrlong	result1, fp
2f4b4     14 1E 06 FB | 	rdlong	local01, #20
2f4b8     01 1E 46 F0 | 	shr	local01, #1
2f4bc     04 4E 05 F1 | 	add	fp, #4
2f4c0     A7 1E 62 FC | 	wrlong	local01, fp
2f4c4     0C 4E 85 F1 | 	sub	fp, #12
2f4c8                 | ' {
2f4c8                 | ' 	BYTE d;
2f4c8                 | ' 	UINT tmr, tmout;
2f4c8                 | ' 
2f4c8                 | ' 	tmr = _cnt();
2f4c8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f4c8                 | ' 	for(;;) {
2f4c8                 | LR__4850
2f4c8     04 4E 05 F1 | 	add	fp, #4
2f4cc     A7 12 02 F6 | 	mov	arg01, fp
2f4d0     04 4E 85 F1 | 	sub	fp, #4
2f4d4     01 14 06 F6 | 	mov	arg02, #1
2f4d8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f4dc     04 4E 05 F1 | 	add	fp, #4
2f4e0     A7 1E C2 FA | 	rdbyte	local01, fp
2f4e4     04 4E 85 F1 | 	sub	fp, #4
2f4e8     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f4ec     01 FA 05 A6 |  if_e	mov	result1, #1
2f4f0     28 00 90 AD |  if_e	jmp	#LR__4851
2f4f4     1A FA 61 FD | 	getct	result1
2f4f8     08 4E 05 F1 | 	add	fp, #8
2f4fc     A7 1E 02 FB | 	rdlong	local01, fp
2f500     0F FB 81 F1 | 	sub	result1, local01
2f504     04 4E 05 F1 | 	add	fp, #4
2f508     A7 1E 02 FB | 	rdlong	local01, fp
2f50c     0C 4E 85 F1 | 	sub	fp, #12
2f510     0F FB 11 F2 | 	cmp	result1, local01 wc
2f514     00 FA 05 36 |  if_ae	mov	result1, #0
2f518     AC FF 9F CD |  if_b	jmp	#LR__4850
2f51c                 | LR__4851
2f51c     A7 F0 03 F6 | 	mov	ptra, fp
2f520     B2 00 A0 FD | 	call	#popregs_
2f524                 | _fatfs_cc_wait_ready_1121_ret
2f524     2D 00 64 FD | 	ret
2f528                 | 
2f528                 | _fatfs_cc_deselect_1127
2f528     00 4A 05 F6 | 	mov	COUNT_, #0
2f52c     A8 00 A0 FD | 	call	#pushregs_
2f530     14 F0 07 F1 | 	add	ptra, #20
2f534     01 00 00 FF 
2f538     14 E4 05 F1 | 	add	objptr, ##532
2f53c     F2 14 02 FB | 	rdlong	arg02, objptr
2f540     04 4E 05 F1 | 	add	fp, #4
2f544     A7 14 62 FC | 	wrlong	arg02, fp
2f548     04 E4 85 F1 | 	sub	objptr, #4
2f54c     F2 14 02 FB | 	rdlong	arg02, objptr
2f550     04 4E 05 F1 | 	add	fp, #4
2f554     A7 14 62 FC | 	wrlong	arg02, fp
2f558     08 E4 05 F1 | 	add	objptr, #8
2f55c     F2 14 02 FB | 	rdlong	arg02, objptr
2f560     04 4E 05 F1 | 	add	fp, #4
2f564     A7 14 62 FC | 	wrlong	arg02, fp
2f568     04 E4 05 F1 | 	add	objptr, #4
2f56c     F2 14 02 FB | 	rdlong	arg02, objptr
2f570     01 00 00 FF 
2f574     1C E4 85 F1 | 	sub	objptr, ##540
2f578     04 4E 05 F1 | 	add	fp, #4
2f57c     A7 14 62 FC | 	wrlong	arg02, fp
2f580     0C 4E 85 F1 | 	sub	fp, #12
2f584     A7 12 02 FB | 	rdlong	arg01, fp
2f588     04 4E 85 F1 | 	sub	fp, #4
2f58c     59 12 62 FD | 	drvh	arg01
2f590     1F 20 64 FD | 	waitx	#16
2f594     A7 12 02 F6 | 	mov	arg01, fp
2f598     01 14 06 F6 | 	mov	arg02, #1
2f59c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f5a0     A7 F0 03 F6 | 	mov	ptra, fp
2f5a4     B2 00 A0 FD | 	call	#popregs_
2f5a8                 | _fatfs_cc_deselect_1127_ret
2f5a8     2D 00 64 FD | 	ret
2f5ac                 | 
2f5ac                 | _fatfs_cc_select_1131
2f5ac     00 4A 05 F6 | 	mov	COUNT_, #0
2f5b0     A8 00 A0 FD | 	call	#pushregs_
2f5b4     10 F0 07 F1 | 	add	ptra, #16
2f5b8     01 00 00 FF 
2f5bc     14 E4 05 F1 | 	add	objptr, ##532
2f5c0     F2 14 02 FB | 	rdlong	arg02, objptr
2f5c4     08 4E 05 F1 | 	add	fp, #8
2f5c8     A7 14 62 FC | 	wrlong	arg02, fp
2f5cc     08 E4 05 F1 | 	add	objptr, #8
2f5d0     F2 12 02 FB | 	rdlong	arg01, objptr
2f5d4     01 00 00 FF 
2f5d8     1C E4 85 F1 | 	sub	objptr, ##540
2f5dc     04 4E 05 F1 | 	add	fp, #4
2f5e0     A7 12 62 FC | 	wrlong	arg01, fp
2f5e4     50 12 62 FD | 	fltl	arg01
2f5e8     04 4E 85 F1 | 	sub	fp, #4
2f5ec     A7 12 02 FB | 	rdlong	arg01, fp
2f5f0     58 12 62 FD | 	drvl	arg01
2f5f4     1F 20 64 FD | 	waitx	#16
2f5f8     04 4E 05 F1 | 	add	fp, #4
2f5fc     A7 12 02 FB | 	rdlong	arg01, fp
2f600     41 12 62 FD | 	dirh	arg01
2f604     08 4E 85 F1 | 	sub	fp, #8
2f608     A7 12 02 F6 | 	mov	arg01, fp
2f60c     04 4E 85 F1 | 	sub	fp, #4
2f610     01 14 06 F6 | 	mov	arg02, #1
2f614     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f618     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1121
2f61c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f620     01 FA 05 56 |  if_ne	mov	result1, #1
2f624     08 00 90 5D |  if_ne	jmp	#LR__4860
2f628     FC FE BF FD | 	call	#_fatfs_cc_deselect_1127
2f62c                 | ' 
2f62c                 | ' 	deselect();
2f62c                 | ' 	return 0;
2f62c     00 FA 05 F6 | 	mov	result1, #0
2f630                 | LR__4860
2f630     A7 F0 03 F6 | 	mov	ptra, fp
2f634     B2 00 A0 FD | 	call	#popregs_
2f638                 | _fatfs_cc_select_1131_ret
2f638     2D 00 64 FD | 	ret
2f63c                 | 
2f63c                 | _fatfs_cc_rcvr_datablock_1135
2f63c     01 4A 05 F6 | 	mov	COUNT_, #1
2f640     A8 00 A0 FD | 	call	#pushregs_
2f644     18 F0 07 F1 | 	add	ptra, #24
2f648     04 4E 05 F1 | 	add	fp, #4
2f64c     A7 12 62 FC | 	wrlong	arg01, fp
2f650     04 4E 05 F1 | 	add	fp, #4
2f654     A7 14 62 FC | 	wrlong	arg02, fp
2f658     1A FA 61 FD | 	getct	result1
2f65c     08 4E 05 F1 | 	add	fp, #8
2f660     A7 FA 61 FC | 	wrlong	result1, fp
2f664     14 1E 06 FB | 	rdlong	local01, #20
2f668     03 1E 46 F0 | 	shr	local01, #3
2f66c     04 4E 05 F1 | 	add	fp, #4
2f670     A7 1E 62 FC | 	wrlong	local01, fp
2f674     14 4E 85 F1 | 	sub	fp, #20
2f678                 | ' 	BYTE *buff,
2f678                 | ' 	UINT btr
2f678                 | ' )
2f678                 | ' {
2f678                 | ' 	BYTE d[2];
2f678                 | ' 	UINT tmr, tmout;
2f678                 | ' 
2f678                 | ' 	tmr = _cnt();
2f678                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f678                 | ' 	for(;;) {
2f678                 | LR__4870
2f678     0C 4E 05 F1 | 	add	fp, #12
2f67c     A7 12 02 F6 | 	mov	arg01, fp
2f680     0C 4E 85 F1 | 	sub	fp, #12
2f684     01 14 06 F6 | 	mov	arg02, #1
2f688     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f68c     0C 4E 05 F1 | 	add	fp, #12
2f690     A7 1E C2 FA | 	rdbyte	local01, fp
2f694     0C 4E 85 F1 | 	sub	fp, #12
2f698     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f69c     28 00 90 5D |  if_ne	jmp	#LR__4871
2f6a0     1A FA 61 FD | 	getct	result1
2f6a4     FD 1E 02 F6 | 	mov	local01, result1
2f6a8     10 4E 05 F1 | 	add	fp, #16
2f6ac     A7 14 02 FB | 	rdlong	arg02, fp
2f6b0     0A 1F 82 F1 | 	sub	local01, arg02
2f6b4     04 4E 05 F1 | 	add	fp, #4
2f6b8     A7 14 02 FB | 	rdlong	arg02, fp
2f6bc     14 4E 85 F1 | 	sub	fp, #20
2f6c0     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f6c4     B0 FF 9F CD |  if_b	jmp	#LR__4870
2f6c8                 | LR__4871
2f6c8     0C 4E 05 F1 | 	add	fp, #12
2f6cc     A7 1E C2 FA | 	rdbyte	local01, fp
2f6d0     0C 4E 85 F1 | 	sub	fp, #12
2f6d4     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f6d8     00 FA 05 56 |  if_ne	mov	result1, #0
2f6dc     30 00 90 5D |  if_ne	jmp	#LR__4872
2f6e0     04 4E 05 F1 | 	add	fp, #4
2f6e4     A7 12 02 FB | 	rdlong	arg01, fp
2f6e8     04 4E 05 F1 | 	add	fp, #4
2f6ec     A7 14 02 FB | 	rdlong	arg02, fp
2f6f0     08 4E 85 F1 | 	sub	fp, #8
2f6f4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f6f8     0C 4E 05 F1 | 	add	fp, #12
2f6fc     A7 12 02 F6 | 	mov	arg01, fp
2f700     0C 4E 85 F1 | 	sub	fp, #12
2f704     02 14 06 F6 | 	mov	arg02, #2
2f708     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f70c                 | ' 
2f70c                 | ' 	rcvr_mmc(buff, btr);
2f70c                 | ' 	rcvr_mmc(d, 2);
2f70c                 | ' 
2f70c                 | ' 	return 1;
2f70c     01 FA 05 F6 | 	mov	result1, #1
2f710                 | LR__4872
2f710     A7 F0 03 F6 | 	mov	ptra, fp
2f714     B2 00 A0 FD | 	call	#popregs_
2f718                 | _fatfs_cc_rcvr_datablock_1135_ret
2f718     2D 00 64 FD | 	ret
2f71c                 | 
2f71c                 | _fatfs_cc_xmit_datablock_1137
2f71c     00 4A 05 F6 | 	mov	COUNT_, #0
2f720     A8 00 A0 FD | 	call	#pushregs_
2f724     10 F0 07 F1 | 	add	ptra, #16
2f728     04 4E 05 F1 | 	add	fp, #4
2f72c     A7 12 62 FC | 	wrlong	arg01, fp
2f730     04 4E 05 F1 | 	add	fp, #4
2f734     A7 14 42 FC | 	wrbyte	arg02, fp
2f738     08 4E 85 F1 | 	sub	fp, #8
2f73c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1121
2f740     00 FA 0D F2 | 	cmp	result1, #0 wz
2f744     00 FA 05 A6 |  if_e	mov	result1, #0
2f748     90 00 90 AD |  if_e	jmp	#LR__4881
2f74c     08 4E 05 F1 | 	add	fp, #8
2f750     A7 14 C2 FA | 	rdbyte	arg02, fp
2f754     04 4E 05 F1 | 	add	fp, #4
2f758     A7 14 42 FC | 	wrbyte	arg02, fp
2f75c     A7 12 02 F6 | 	mov	arg01, fp
2f760     0C 4E 85 F1 | 	sub	fp, #12
2f764     01 14 06 F6 | 	mov	arg02, #1
2f768     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1110
2f76c     08 4E 05 F1 | 	add	fp, #8
2f770     A7 14 C2 FA | 	rdbyte	arg02, fp
2f774     08 4E 85 F1 | 	sub	fp, #8
2f778     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f77c     58 00 90 AD |  if_e	jmp	#LR__4880
2f780     04 4E 05 F1 | 	add	fp, #4
2f784     A7 12 02 FB | 	rdlong	arg01, fp
2f788     04 4E 85 F1 | 	sub	fp, #4
2f78c     09 14 C6 F9 | 	decod	arg02, #9
2f790     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1110
2f794     0C 4E 05 F1 | 	add	fp, #12
2f798     A7 12 02 F6 | 	mov	arg01, fp
2f79c     0C 4E 85 F1 | 	sub	fp, #12
2f7a0     02 14 06 F6 | 	mov	arg02, #2
2f7a4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f7a8     0C 4E 05 F1 | 	add	fp, #12
2f7ac     A7 12 02 F6 | 	mov	arg01, fp
2f7b0     0C 4E 85 F1 | 	sub	fp, #12
2f7b4     01 14 06 F6 | 	mov	arg02, #1
2f7b8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f7bc     0C 4E 05 F1 | 	add	fp, #12
2f7c0     A7 14 C2 FA | 	rdbyte	arg02, fp
2f7c4     0C 4E 85 F1 | 	sub	fp, #12
2f7c8     1F 14 06 F5 | 	and	arg02, #31
2f7cc     05 14 0E F2 | 	cmp	arg02, #5 wz
2f7d0                 | ' 			return 0;
2f7d0     00 FA 05 56 |  if_ne	mov	result1, #0
2f7d4     04 00 90 5D |  if_ne	jmp	#LR__4881
2f7d8                 | LR__4880
2f7d8                 | ' 	}
2f7d8                 | ' 
2f7d8                 | ' 	return 1;
2f7d8     01 FA 05 F6 | 	mov	result1, #1
2f7dc                 | LR__4881
2f7dc     A7 F0 03 F6 | 	mov	ptra, fp
2f7e0     B2 00 A0 FD | 	call	#popregs_
2f7e4                 | _fatfs_cc_xmit_datablock_1137_ret
2f7e4     2D 00 64 FD | 	ret
2f7e8                 | 
2f7e8                 | _fatfs_cc_send_cmd_1141
2f7e8     01 4A 05 F6 | 	mov	COUNT_, #1
2f7ec     A8 00 A0 FD | 	call	#pushregs_
2f7f0     1C F0 07 F1 | 	add	ptra, #28
2f7f4                 | _fatfs_cc_send_cmd_1141_enter
2f7f4     04 4E 05 F1 | 	add	fp, #4
2f7f8     A7 12 42 FC | 	wrbyte	arg01, fp
2f7fc     04 4E 05 F1 | 	add	fp, #4
2f800     A7 14 62 FC | 	wrlong	arg02, fp
2f804     04 4E 85 F1 | 	sub	fp, #4
2f808     A7 FA C1 FA | 	rdbyte	result1, fp
2f80c     04 4E 85 F1 | 	sub	fp, #4
2f810     80 FA CD F7 | 	test	result1, #128 wz
2f814     44 00 90 AD |  if_e	jmp	#LR__4890
2f818     04 4E 05 F1 | 	add	fp, #4
2f81c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f820     7F 14 06 F5 | 	and	arg02, #127
2f824     A7 14 42 FC | 	wrbyte	arg02, fp
2f828     04 4E 85 F1 | 	sub	fp, #4
2f82c     37 12 06 F6 | 	mov	arg01, #55
2f830     00 14 06 F6 | 	mov	arg02, #0
2f834     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1141
2f838     0C 4E 05 F1 | 	add	fp, #12
2f83c     A7 FA 41 FC | 	wrbyte	result1, fp
2f840     A7 14 C2 FA | 	rdbyte	arg02, fp
2f844     0C 4E 85 F1 | 	sub	fp, #12
2f848     02 14 16 F2 | 	cmp	arg02, #2 wc
2f84c     0C 4E 05 31 |  if_ae	add	fp, #12
2f850     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2f854     0C 4E 85 31 |  if_ae	sub	fp, #12
2f858     6C 01 90 3D |  if_ae	jmp	#LR__4894
2f85c                 | LR__4890
2f85c     04 4E 05 F1 | 	add	fp, #4
2f860     A7 14 C2 FA | 	rdbyte	arg02, fp
2f864     04 4E 85 F1 | 	sub	fp, #4
2f868     0C 14 0E F2 | 	cmp	arg02, #12 wz
2f86c     14 00 90 AD |  if_e	jmp	#LR__4891
2f870     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1127
2f874     34 FD BF FD | 	call	#_fatfs_cc_select_1131
2f878     00 FA 0D F2 | 	cmp	result1, #0 wz
2f87c     FF FA 05 A6 |  if_e	mov	result1, #255
2f880     44 01 90 AD |  if_e	jmp	#LR__4894
2f884                 | LR__4891
2f884     04 4E 05 F1 | 	add	fp, #4
2f888     A7 14 C2 FA | 	rdbyte	arg02, fp
2f88c     40 FA 05 F6 | 	mov	result1, #64
2f890     0A FB 41 F5 | 	or	result1, arg02
2f894     10 4E 05 F1 | 	add	fp, #16
2f898     A7 FA 41 FC | 	wrbyte	result1, fp
2f89c     0C 4E 85 F1 | 	sub	fp, #12
2f8a0     A7 FA 01 FB | 	rdlong	result1, fp
2f8a4     18 FA 45 F0 | 	shr	result1, #24
2f8a8     0D 4E 05 F1 | 	add	fp, #13
2f8ac     A7 FA 41 FC | 	wrbyte	result1, fp
2f8b0     0D 4E 85 F1 | 	sub	fp, #13
2f8b4     A7 FA 01 FB | 	rdlong	result1, fp
2f8b8     10 FA 45 F0 | 	shr	result1, #16
2f8bc     0E 4E 05 F1 | 	add	fp, #14
2f8c0     A7 FA 41 FC | 	wrbyte	result1, fp
2f8c4     0E 4E 85 F1 | 	sub	fp, #14
2f8c8     A7 FA 01 FB | 	rdlong	result1, fp
2f8cc     08 FA 45 F0 | 	shr	result1, #8
2f8d0     0F 4E 05 F1 | 	add	fp, #15
2f8d4     A7 FA 41 FC | 	wrbyte	result1, fp
2f8d8     0F 4E 85 F1 | 	sub	fp, #15
2f8dc     A7 FA 01 FB | 	rdlong	result1, fp
2f8e0     10 4E 05 F1 | 	add	fp, #16
2f8e4     A7 FA 41 FC | 	wrbyte	result1, fp
2f8e8     0C 4E 85 F1 | 	sub	fp, #12
2f8ec     A7 02 48 FC | 	wrbyte	#1, fp
2f8f0     08 4E 85 F1 | 	sub	fp, #8
2f8f4     A7 FA C9 FA | 	rdbyte	result1, fp wz
2f8f8     04 4E 85 F1 | 	sub	fp, #4
2f8fc     0C 4E 05 A1 |  if_e	add	fp, #12
2f900     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2f904     0C 4E 85 A1 |  if_e	sub	fp, #12
2f908     04 4E 05 F1 | 	add	fp, #4
2f90c     A7 FA C1 FA | 	rdbyte	result1, fp
2f910     04 4E 85 F1 | 	sub	fp, #4
2f914     08 FA 0D F2 | 	cmp	result1, #8 wz
2f918     0C 4E 05 A1 |  if_e	add	fp, #12
2f91c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2f920     0C 4E 85 A1 |  if_e	sub	fp, #12
2f924     0C 4E 05 F1 | 	add	fp, #12
2f928     A7 14 C2 FA | 	rdbyte	arg02, fp
2f92c     0D 4E 05 F1 | 	add	fp, #13
2f930     A7 14 42 FC | 	wrbyte	arg02, fp
2f934     05 4E 85 F1 | 	sub	fp, #5
2f938     A7 12 02 F6 | 	mov	arg01, fp
2f93c     14 4E 85 F1 | 	sub	fp, #20
2f940     06 14 06 F6 | 	mov	arg02, #6
2f944     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1110
2f948     04 4E 05 F1 | 	add	fp, #4
2f94c     A7 1E C2 FA | 	rdbyte	local01, fp
2f950     04 4E 85 F1 | 	sub	fp, #4
2f954     0C 1E 0E F2 | 	cmp	local01, #12 wz
2f958     10 4E 05 A1 |  if_e	add	fp, #16
2f95c     A7 12 02 A6 |  if_e	mov	arg01, fp
2f960     10 4E 85 A1 |  if_e	sub	fp, #16
2f964     01 14 06 A6 |  if_e	mov	arg02, #1
2f968     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1117
2f96c     0C 4E 05 F1 | 	add	fp, #12
2f970     A7 14 48 FC | 	wrbyte	#10, fp
2f974     0C 4E 85 F1 | 	sub	fp, #12
2f978                 | ' 	n = 10;
2f978                 | ' 	do
2f978                 | LR__4892
2f978     10 4E 05 F1 | 	add	fp, #16
2f97c     A7 12 02 F6 | 	mov	arg01, fp
2f980     10 4E 85 F1 | 	sub	fp, #16
2f984     01 14 06 F6 | 	mov	arg02, #1
2f988     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f98c     10 4E 05 F1 | 	add	fp, #16
2f990     A7 1E C2 FA | 	rdbyte	local01, fp
2f994     10 4E 85 F1 | 	sub	fp, #16
2f998     80 1E CE F7 | 	test	local01, #128 wz
2f99c     1C 00 90 AD |  if_e	jmp	#LR__4893
2f9a0     0C 4E 05 F1 | 	add	fp, #12
2f9a4     A7 1E C2 FA | 	rdbyte	local01, fp
2f9a8     01 1E 86 F1 | 	sub	local01, #1
2f9ac     A7 1E 42 FC | 	wrbyte	local01, fp
2f9b0     A7 1E CA FA | 	rdbyte	local01, fp wz
2f9b4     0C 4E 85 F1 | 	sub	fp, #12
2f9b8     BC FF 9F 5D |  if_ne	jmp	#LR__4892
2f9bc                 | LR__4893
2f9bc                 | ' 
2f9bc                 | ' 	return d;
2f9bc     10 4E 05 F1 | 	add	fp, #16
2f9c0     A7 FA C1 FA | 	rdbyte	result1, fp
2f9c4     10 4E 85 F1 | 	sub	fp, #16
2f9c8                 | LR__4894
2f9c8     A7 F0 03 F6 | 	mov	ptra, fp
2f9cc     B2 00 A0 FD | 	call	#popregs_
2f9d0                 | _fatfs_cc_send_cmd_1141_ret
2f9d0     2D 00 64 FD | 	ret
2f9d4                 | 
2f9d4                 | _fatfs_cc_disk_deinitialize
2f9d4     03 4A 05 F6 | 	mov	COUNT_, #3
2f9d8     A8 00 A0 FD | 	call	#pushregs_
2f9dc     00 12 4E F2 | 	cmps	arg01, #0 wz
2f9e0     01 00 00 FF 
2f9e4     14 E4 05 F1 | 	add	objptr, ##532
2f9e8     F2 12 02 FB | 	rdlong	arg01, objptr
2f9ec     04 E4 85 F1 | 	sub	objptr, #4
2f9f0     F2 1E 02 FB | 	rdlong	local01, objptr
2f9f4     08 E4 05 F1 | 	add	objptr, #8
2f9f8     F2 20 02 FB | 	rdlong	local02, objptr
2f9fc     04 E4 05 F1 | 	add	objptr, #4
2fa00     F2 22 02 FB | 	rdlong	local03, objptr
2fa04     01 00 00 FF 
2fa08     1C E4 85 F1 | 	sub	objptr, ##540
2fa0c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fa0c                 | '         return RES_NOTRDY;
2fa0c     03 FA 05 56 |  if_ne	mov	result1, #3
2fa10     2C 00 90 5D |  if_ne	jmp	#LR__4900
2fa14     50 12 62 FD | 	fltl	arg01
2fa18     09 01 08 FC | 	wrpin	#0, arg01
2fa1c     50 1E 62 FD | 	fltl	local01
2fa20     0F 01 08 FC | 	wrpin	#0, local01
2fa24     50 20 62 FD | 	fltl	local02
2fa28     10 01 08 FC | 	wrpin	#0, local02
2fa2c     50 22 62 FD | 	fltl	local03
2fa30     11 01 08 FC | 	wrpin	#0, local03
2fa34     0A 12 06 F6 | 	mov	arg01, #10
2fa38     04 11 BF FD | 	call	#__system___waitms
2fa3c                 | '     }
2fa3c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fa3c                 | '     _pinclear(PIN_SS);
2fa3c                 | '     _pinclear(PIN_CLK);
2fa3c                 | '     _pinclear(PIN_DI);
2fa3c                 | '     _pinclear(PIN_DO);
2fa3c                 | ' 
2fa3c                 | '     _waitms(10);
2fa3c                 | ' 
2fa3c                 | '     return 0;
2fa3c     00 FA 05 F6 | 	mov	result1, #0
2fa40                 | LR__4900
2fa40     A7 F0 03 F6 | 	mov	ptra, fp
2fa44     B2 00 A0 FD | 	call	#popregs_
2fa48                 | _fatfs_cc_disk_deinitialize_ret
2fa48     2D 00 64 FD | 	ret
2fa4c                 | 
2fa4c                 | _fatfs_cc_gettimeofday
2fa4c     04 4A 05 F6 | 	mov	COUNT_, #4
2fa50     A8 00 A0 FD | 	call	#pushregs_
2fa54     09 1F 02 F6 | 	mov	local01, arg01
2fa58     C0 0C BF FD | 	call	#__system___getus
2fa5c     FD 12 02 F6 | 	mov	arg01, result1
2fa60     02 00 00 FF 
2fa64     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fa68     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fa6c     09 FB 01 F6 | 	mov	result1, arg01
2fa70     10 FB 81 F1 | 	sub	result1, local02
2fa74     A1 07 00 FF 
2fa78     40 FA 15 FD | 	qdiv	result1, ##1000000
2fa7c     02 00 00 FF 
2fa80     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fa84     18 20 62 FD | 	getqx	local02
2fa88     A1 07 00 FF 
2fa8c     40 FA 15 FD | 	qdiv	result1, ##1000000
2fa90     00 20 0E F2 | 	cmp	local02, #0 wz
2fa94     19 22 62 FD | 	getqy	local03
2fa98     28 00 90 AD |  if_e	jmp	#LR__4910
2fa9c     02 00 00 FF 
2faa0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2faa4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2faa8     10 25 02 F1 | 	add	local04, local02
2faac     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fab0     11 13 82 F1 | 	sub	arg01, local03
2fab4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fab8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fabc     02 00 00 FF 
2fac0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fac4                 | LR__4910
2fac4     02 00 00 FF 
2fac8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2facc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fad0     02 00 00 FF 
2fad4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fad8     0F 25 62 FC | 	wrlong	local04, local01
2fadc     04 1E 06 F1 | 	add	local01, #4
2fae0     0F 23 62 FC | 	wrlong	local03, local01
2fae4                 | '         lastsec += secs;
2fae4                 | '         lastus = now - leftover;
2fae4                 | '     }
2fae4                 | '     tv->tv_sec = lastsec;
2fae4                 | '     tv->tv_usec = leftover;
2fae4                 | '     return 0;
2fae4     00 FA 05 F6 | 	mov	result1, #0
2fae8     A7 F0 03 F6 | 	mov	ptra, fp
2faec     B2 00 A0 FD | 	call	#popregs_
2faf0                 | _fatfs_cc_gettimeofday_ret
2faf0     2D 00 64 FD | 	ret
2faf4                 | 
2faf4                 | _fatfs_cc__is_leap_year
2faf4     09 FB 51 F6 | 	abs	result1, arg01 wc
2faf8     03 FA 05 F5 | 	and	result1, #3
2fafc     FD FA 89 F6 | 	negc	result1, result1 wz
2fb00     38 00 90 5D |  if_ne	jmp	#LR__4921
2fb04     09 FB 51 F6 | 	abs	result1, arg01 wc
2fb08     64 FA 15 FD | 	qdiv	result1, #100
2fb0c     19 FA 61 FD | 	getqy	result1
2fb10     FD FA 89 F6 | 	negc	result1, result1 wz
2fb14     1C 00 90 5D |  if_ne	jmp	#LR__4920
2fb18     09 FB 51 F6 | 	abs	result1, arg01 wc
2fb1c     90 FB 15 FD | 	qdiv	result1, #400
2fb20                 | '       return (0 == y % 400);
2fb20     00 FA 05 F6 | 	mov	result1, #0
2fb24     19 00 62 FD | 	getqy	_var01
2fb28     00 01 8A F6 | 	negc	_var01, _var01 wz
2fb2c     01 FA 05 A6 |  if_e	mov	result1, #1
2fb30     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fb34                 | LR__4920
2fb34                 | '     return 1;
2fb34     01 FA 05 F6 | 	mov	result1, #1
2fb38     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fb3c                 | LR__4921
2fb3c                 | '   }
2fb3c                 | '   return 0;
2fb3c     00 FA 05 F6 | 	mov	result1, #0
2fb40                 | _fatfs_cc__is_leap_year_ret
2fb40     2D 00 64 FD | 	ret
2fb44                 | 
2fb44                 | _fatfs_cc___tzoffset
2fb44     09 01 0A F6 | 	mov	_var01, arg01 wz
2fb48     FF FF FF FF 
2fb4c     0A FF 6B FC | 	wrlong	##-1, arg02
2fb50     01 02 06 F6 | 	mov	_var02, #1
2fb54     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fb58                 | '                 return 0;
2fb58     00 FA 05 A6 |  if_e	mov	result1, #0
2fb5c     94 02 90 AD |  if_e	jmp	#LR__4947
2fb60     0A 01 68 FC | 	wrlong	#0, arg02
2fb64     02 00 00 FF 
2fb68     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fb6c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fb70                 | ' 
2fb70                 | '        *hasdst = 0;
2fb70                 | ' 
2fb70                 | ' 	n = stdname;
2fb70                 | '         while (*s && isalpha(*s)) {
2fb70     02 00 00 FF 
2fb74     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fb78     97 28 48 FB | 	callpa	#(@LR__4931-@LR__4930)>>2,fcache_load_ptr_
2fb7c                 | LR__4930
2fb7c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fb80     48 00 90 AD |  if_e	jmp	#LR__4932
2fb84     00 13 C2 FA | 	rdbyte	arg01, _var01
2fb88                 | ' {
2fb88                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fb88     80 12 36 F3 | 	fle	arg01, #128 wc
2fb8c                 | '     return __ctype[c];
2fb8c     02 00 00 FF 
2fb90     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fb94     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fb98     09 FB C1 FA | 	rdbyte	result1, arg01
2fb9c     02 00 00 FF 
2fba0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fba4     0C FA CD F7 | 	test	result1, #12 wz
2fba8     20 00 90 AD |  if_e	jmp	#LR__4932
2fbac     00 09 02 F6 | 	mov	_var05, _var01
2fbb0     00 0B 02 F6 | 	mov	_var06, _var01
2fbb4     01 0A 06 F1 | 	add	_var06, #1
2fbb8     04 0D C2 FA | 	rdbyte	_var07, _var05
2fbbc     05 01 02 F6 | 	mov	_var01, _var06
2fbc0     03 0D 42 FC | 	wrbyte	_var07, _var04
2fbc4     01 06 06 F1 | 	add	_var04, #1
2fbc8     B0 FF 9F FD | 	jmp	#LR__4930
2fbcc                 | LR__4931
2fbcc                 | LR__4932
2fbcc     03 01 48 FC | 	wrbyte	#0, _var04
2fbd0     00 0E 06 F6 | 	mov	_var08, #0
2fbd4     00 05 C2 FA | 	rdbyte	_var03, _var01
2fbd8     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fbdc     01 02 66 A6 |  if_e	neg	_var02, #1
2fbe0     01 00 06 A1 |  if_e	add	_var01, #1
2fbe4     97 28 48 FB | 	callpa	#(@LR__4934-@LR__4933)>>2,fcache_load_ptr_
2fbe8                 | '                 sgn = -1;
2fbe8                 | '                 s++;
2fbe8                 | '         }
2fbe8                 | '         while (isdigit(*s)) {
2fbe8                 | LR__4933
2fbe8     00 13 C2 FA | 	rdbyte	arg01, _var01
2fbec                 | ' {
2fbec                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fbec     80 12 36 F3 | 	fle	arg01, #128 wc
2fbf0                 | '     return __ctype[c];
2fbf0     02 00 00 FF 
2fbf4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fbf8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fbfc     09 FB C1 FA | 	rdbyte	result1, arg01
2fc00     02 00 00 FF 
2fc04     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fc08     02 FA CD F7 | 	test	result1, #2 wz
2fc0c     28 00 90 AD |  if_e	jmp	#LR__4935
2fc10     07 05 02 F6 | 	mov	_var03, _var08
2fc14     02 04 66 F0 | 	shl	_var03, #2
2fc18     07 05 02 F1 | 	add	_var03, _var08
2fc1c     01 04 66 F0 | 	shl	_var03, #1
2fc20     00 09 C2 FA | 	rdbyte	_var05, _var01
2fc24     30 08 86 F1 | 	sub	_var05, #48
2fc28     04 05 02 F1 | 	add	_var03, _var05
2fc2c     02 0F 02 F6 | 	mov	_var08, _var03
2fc30     01 00 06 F1 | 	add	_var01, #1
2fc34     B0 FF 9F FD | 	jmp	#LR__4933
2fc38                 | LR__4934
2fc38                 | LR__4935
2fc38     07 00 00 FF 
2fc3c     10 0E 06 FD | 	qmul	_var08, ##3600
2fc40     00 05 C2 FA | 	rdbyte	_var03, _var01
2fc44     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fc48     18 10 62 FD | 	getqx	_var09
2fc4c     70 00 90 5D |  if_ne	jmp	#LR__4939
2fc50     00 0E 06 F6 | 	mov	_var08, #0
2fc54     01 00 06 F1 | 	add	_var01, #1
2fc58     97 28 48 FB | 	callpa	#(@LR__4937-@LR__4936)>>2,fcache_load_ptr_
2fc5c                 | '                 x = 0;
2fc5c                 | '                 s++;
2fc5c                 | '                 while (isdigit(*s)) {
2fc5c                 | LR__4936
2fc5c     00 13 C2 FA | 	rdbyte	arg01, _var01
2fc60                 | ' {
2fc60                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fc60     80 12 36 F3 | 	fle	arg01, #128 wc
2fc64                 | '     return __ctype[c];
2fc64     02 00 00 FF 
2fc68     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fc6c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fc70     09 FB C1 FA | 	rdbyte	result1, arg01
2fc74     02 00 00 FF 
2fc78     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fc7c     02 FA CD F7 | 	test	result1, #2 wz
2fc80     28 00 90 AD |  if_e	jmp	#LR__4938
2fc84     07 05 02 F6 | 	mov	_var03, _var08
2fc88     02 04 66 F0 | 	shl	_var03, #2
2fc8c     07 05 02 F1 | 	add	_var03, _var08
2fc90     01 04 66 F0 | 	shl	_var03, #1
2fc94     00 09 C2 FA | 	rdbyte	_var05, _var01
2fc98     30 08 86 F1 | 	sub	_var05, #48
2fc9c     04 05 02 F1 | 	add	_var03, _var05
2fca0     02 0F 02 F6 | 	mov	_var08, _var03
2fca4     01 00 06 F1 | 	add	_var01, #1
2fca8     B0 FF 9F FD | 	jmp	#LR__4936
2fcac                 | LR__4937
2fcac                 | LR__4938
2fcac     07 0D 02 F6 | 	mov	_var07, _var08
2fcb0     04 0C 66 F0 | 	shl	_var07, #4
2fcb4     07 0D 82 F1 | 	sub	_var07, _var08
2fcb8     02 0C 66 F0 | 	shl	_var07, #2
2fcbc     06 11 02 F1 | 	add	_var09, _var07
2fcc0                 | LR__4939
2fcc0     02 00 00 FF 
2fcc4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fcc8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fccc     00 13 C2 FA | 	rdbyte	arg01, _var01
2fcd0                 | ' {
2fcd0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fcd0     80 12 36 F3 | 	fle	arg01, #128 wc
2fcd4                 | '     return __ctype[c];
2fcd4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fcd8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fcdc     09 FB C1 FA | 	rdbyte	result1, arg01
2fce0     02 00 00 FF 
2fce4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fce8     0C FA CD F7 | 	test	result1, #12 wz
2fcec     50 00 90 AD |  if_e	jmp	#LR__4942
2fcf0     0A 03 68 FC | 	wrlong	#1, arg02
2fcf4                 | '                 *hasdst = 1;
2fcf4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fcf4                 | LR__4940
2fcf4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fcf8     44 00 90 AD |  if_e	jmp	#LR__4941
2fcfc     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd00                 | ' {
2fd00                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fd00     80 12 36 F3 | 	fle	arg01, #128 wc
2fd04                 | '     return __ctype[c];
2fd04     02 00 00 FF 
2fd08     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fd0c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd10     09 FB C1 FA | 	rdbyte	result1, arg01
2fd14     02 00 00 FF 
2fd18     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd1c     0C FA CD F7 | 	test	result1, #12 wz
2fd20     1C 00 90 AD |  if_e	jmp	#LR__4941
2fd24     00 0B 02 F6 | 	mov	_var06, _var01
2fd28     01 0A 06 F1 | 	add	_var06, #1
2fd2c     00 0D C2 FA | 	rdbyte	_var07, _var01
2fd30     05 01 02 F6 | 	mov	_var01, _var06
2fd34     03 0D 42 FC | 	wrbyte	_var07, _var04
2fd38     01 06 06 F1 | 	add	_var04, #1
2fd3c     B4 FF 9F FD | 	jmp	#LR__4940
2fd40                 | LR__4941
2fd40                 | LR__4942
2fd40     03 01 48 FC | 	wrbyte	#0, _var04
2fd44     02 00 00 FF 
2fd48     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd4c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fd50     02 00 00 FF 
2fd54     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fd58     20 00 90 AD |  if_e	jmp	#LR__4943
2fd5c     02 00 00 FF 
2fd60     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd64     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fd68     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2fd6c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fd70     02 00 00 FF 
2fd74     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fd78     1C 00 90 FD | 	jmp	#LR__4944
2fd7c                 | LR__4943
2fd7c     02 00 00 FF 
2fd80     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fd84     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fd88     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2fd8c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fd90     02 00 00 FF 
2fd94     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fd98                 | LR__4944
2fd98     02 00 00 FF 
2fd9c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fda0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fda4     02 00 00 FF 
2fda8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2fdac     20 00 90 AD |  if_e	jmp	#LR__4945
2fdb0     02 00 00 FF 
2fdb4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fdb8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fdbc     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2fdc0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fdc4     02 00 00 FF 
2fdc8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fdcc     1C 00 90 FD | 	jmp	#LR__4946
2fdd0                 | LR__4945
2fdd0     02 00 00 FF 
2fdd4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fdd8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fddc     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2fde0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fde4     02 00 00 FF 
2fde8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fdec                 | LR__4946
2fdec     08 03 02 FD | 	qmul	_var02, _var09
2fdf0                 | ' 		_tzname[1] = stdname;
2fdf0                 | ' 
2fdf0                 | '         return sgn * off;
2fdf0     18 FA 61 FD | 	getqx	result1
2fdf4                 | LR__4947
2fdf4                 | _fatfs_cc___tzoffset_ret
2fdf4     2D 00 64 FD | 	ret
2fdf8                 | 
2fdf8                 | _fatfs_cc___indst
2fdf8     10 12 06 F1 | 	add	arg01, #16
2fdfc     09 01 02 FB | 	rdlong	_var01, arg01
2fe00     10 12 86 F1 | 	sub	arg01, #16
2fe04     02 00 0E F2 | 	cmp	_var01, #2 wz
2fe08     30 00 90 5D |  if_ne	jmp	#LR__4950
2fe0c     07 00 06 F6 | 	mov	_var01, #7
2fe10     18 12 06 F1 | 	add	arg01, #24
2fe14     09 03 02 FB | 	rdlong	_var02, arg01
2fe18     01 01 02 F1 | 	add	_var01, _var02
2fe1c     0C 12 86 F1 | 	sub	arg01, #12
2fe20     09 05 02 FB | 	rdlong	_var03, arg01
2fe24     02 01 82 F1 | 	sub	_var01, _var03
2fe28     00 00 56 F2 | 	cmps	_var01, #0 wc
2fe2c                 | '                         return 1;
2fe2c     01 FA 05 C6 |  if_b	mov	result1, #1
2fe30     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fe34                 | '                 return 0;
2fe34     00 FA 05 F6 | 	mov	result1, #0
2fe38     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fe3c                 | LR__4950
2fe3c     10 12 06 F1 | 	add	arg01, #16
2fe40     09 01 02 FB | 	rdlong	_var01, arg01
2fe44     10 12 86 F1 | 	sub	arg01, #16
2fe48     0A 00 0E F2 | 	cmp	_var01, #10 wz
2fe4c     28 00 90 5D |  if_ne	jmp	#LR__4951
2fe50     18 12 06 F1 | 	add	arg01, #24
2fe54     09 01 02 FB | 	rdlong	_var01, arg01
2fe58     0C 12 86 F1 | 	sub	arg01, #12
2fe5c     09 07 02 FB | 	rdlong	_var04, arg01
2fe60     03 01 82 F1 | 	sub	_var01, _var04
2fe64     00 00 56 F2 | 	cmps	_var01, #0 wc
2fe68                 | '                         return 0;
2fe68     00 FA 05 C6 |  if_b	mov	result1, #0
2fe6c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fe70                 | '                 return 1;
2fe70     01 FA 05 F6 | 	mov	result1, #1
2fe74     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fe78                 | LR__4951
2fe78                 | '         }
2fe78                 | ' 
2fe78                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2fe78     00 00 06 F6 | 	mov	_var01, #0
2fe7c     10 12 06 F1 | 	add	arg01, #16
2fe80     09 03 02 FB | 	rdlong	_var02, arg01
2fe84     10 12 86 F1 | 	sub	arg01, #16
2fe88     03 02 56 F2 | 	cmps	_var02, #3 wc
2fe8c     10 00 90 CD |  if_b	jmp	#LR__4952
2fe90     10 12 06 F1 | 	add	arg01, #16
2fe94     09 05 02 FB | 	rdlong	_var03, arg01
2fe98     0A 04 56 F2 | 	cmps	_var03, #10 wc
2fe9c     01 00 06 C6 |  if_b	mov	_var01, #1
2fea0                 | LR__4952
2fea0     00 FB 01 F6 | 	mov	result1, _var01
2fea4                 | _fatfs_cc___indst_ret
2fea4     2D 00 64 FD | 	ret
2fea8                 | 
2fea8                 | ' 	
2fea8                 | ' 	FUNCTION pfunc(c as integer) as integer
2fea8                 | ___strs_cl_pfunc
2fea8                 | ' 		if (i < 16) then
2fea8     04 E4 05 F1 | 	add	objptr, #4
2feac     F2 FA 01 FB | 	rdlong	result1, objptr
2feb0     04 E4 85 F1 | 	sub	objptr, #4
2feb4     10 FA 55 F2 | 	cmps	result1, #16 wc
2feb8     2C 00 90 3D |  if_ae	jmp	#LR__4960
2febc     F2 FA 01 FB | 	rdlong	result1, objptr
2fec0     04 E4 05 F1 | 	add	objptr, #4
2fec4     F2 00 02 FB | 	rdlong	_var01, objptr
2fec8     FD 00 02 F1 | 	add	_var01, result1
2fecc     00 13 42 FC | 	wrbyte	arg01, _var01
2fed0     F2 FA 01 FB | 	rdlong	result1, objptr
2fed4     01 FA 05 F1 | 	add	result1, #1
2fed8     F2 FA 61 FC | 	wrlong	result1, objptr
2fedc     04 E4 85 F1 | 	sub	objptr, #4
2fee0                 | ' 			p(i) = c
2fee0                 | ' 			i = i+1
2fee0                 | ' 			return 1
2fee0     01 FA 05 F6 | 	mov	result1, #1
2fee4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2fee8                 | LR__4960
2fee8                 | ' 			return -1
2fee8     01 FA 65 F6 | 	neg	result1, #1
2feec                 | ___strs_cl_pfunc_ret
2feec     2D 00 64 FD | 	ret
2fef0                 | 
2fef0                 | __struct__s_vfs_file_t_putchar
2fef0     04 4A 05 F6 | 	mov	COUNT_, #4
2fef4     A8 00 A0 FD | 	call	#pushregs_
2fef8     1C E4 05 F1 | 	add	objptr, #28
2fefc     F2 1E 0A FB | 	rdlong	local01, objptr wz
2ff00     1C E4 85 F1 | 	sub	objptr, #28
2ff04     00 FA 05 A6 |  if_e	mov	result1, #0
2ff08     48 00 90 AD |  if_e	jmp	#LR__4970
2ff0c     1C E4 05 F1 | 	add	objptr, #28
2ff10     F2 20 02 FB | 	rdlong	local02, objptr
2ff14     10 23 02 F6 | 	mov	local03, local02
2ff18     1C E4 85 F1 | 	sub	objptr, #28
2ff1c     13 22 46 F7 | 	zerox	local03, #19
2ff20     14 20 46 F0 | 	shr	local02, #20
2ff24     02 20 66 F0 | 	shl	local02, #2
2ff28     ED 20 02 F1 | 	add	local02, __methods__
2ff2c     10 21 02 FB | 	rdlong	local02, local02
2ff30     F2 14 02 F6 | 	mov	arg02, objptr
2ff34     F2 24 02 F6 | 	mov	local04, objptr
2ff38     11 E5 01 F6 | 	mov	objptr, local03
2ff3c     2D 20 62 FD | 	call	local02
2ff40     12 E5 01 F6 | 	mov	objptr, local04
2ff44                 | '     return (i < 0) ? 0 : 1;
2ff44     00 FA 55 F2 | 	cmps	result1, #0 wc
2ff48     00 1E 06 C6 |  if_b	mov	local01, #0
2ff4c     01 1E 06 36 |  if_ae	mov	local01, #1
2ff50     0F FB 01 F6 | 	mov	result1, local01
2ff54                 | LR__4970
2ff54     A7 F0 03 F6 | 	mov	ptra, fp
2ff58     B2 00 A0 FD | 	call	#popregs_
2ff5c                 | __struct__s_vfs_file_t_putchar_ret
2ff5c     2D 00 64 FD | 	ret
2ff60                 | 
2ff60                 | __struct__s_vfs_file_t_getchar
2ff60     03 4A 05 F6 | 	mov	COUNT_, #3
2ff64     A8 00 A0 FD | 	call	#pushregs_
2ff68     20 E4 05 F1 | 	add	objptr, #32
2ff6c     F2 12 0A FB | 	rdlong	arg01, objptr wz
2ff70     20 E4 85 F1 | 	sub	objptr, #32
2ff74     01 FA 65 A6 |  if_e	neg	result1, #1
2ff78     38 00 90 AD |  if_e	jmp	#LR__4980
2ff7c                 | '     return getcf(__this);
2ff7c     20 E4 05 F1 | 	add	objptr, #32
2ff80     F2 1E 02 FB | 	rdlong	local01, objptr
2ff84     0F 21 02 F6 | 	mov	local02, local01
2ff88     20 E4 85 F1 | 	sub	objptr, #32
2ff8c     13 20 46 F7 | 	zerox	local02, #19
2ff90     14 1E 46 F0 | 	shr	local01, #20
2ff94     02 1E 66 F0 | 	shl	local01, #2
2ff98     ED 1E 02 F1 | 	add	local01, __methods__
2ff9c     0F 1F 02 FB | 	rdlong	local01, local01
2ffa0     F2 12 02 F6 | 	mov	arg01, objptr
2ffa4     F2 22 02 F6 | 	mov	local03, objptr
2ffa8     10 E5 01 F6 | 	mov	objptr, local02
2ffac     2D 1E 62 FD | 	call	local01
2ffb0     11 E5 01 F6 | 	mov	objptr, local03
2ffb4                 | LR__4980
2ffb4     A7 F0 03 F6 | 	mov	ptra, fp
2ffb8     B2 00 A0 FD | 	call	#popregs_
2ffbc                 | __struct__s_vfs_file_t_getchar_ret
2ffbc     2D 00 64 FD | 	ret
2ffc0                 | 
2ffc0                 | __struct___bas_wrap_sender_tx
2ffc0     03 4A 05 F6 | 	mov	COUNT_, #3
2ffc4     A8 00 A0 FD | 	call	#pushregs_
2ffc8     F2 1E 02 FB | 	rdlong	local01, objptr
2ffcc     0F 21 02 F6 | 	mov	local02, local01
2ffd0     13 1E 46 F7 | 	zerox	local01, #19
2ffd4     14 20 46 F0 | 	shr	local02, #20
2ffd8     02 20 66 F0 | 	shl	local02, #2
2ffdc     ED 20 02 F1 | 	add	local02, __methods__
2ffe0     10 21 02 FB | 	rdlong	local02, local02
2ffe4     F2 22 02 F6 | 	mov	local03, objptr
2ffe8     0F E5 01 F6 | 	mov	objptr, local01
2ffec     2D 20 62 FD | 	call	local02
2fff0     11 E5 01 F6 | 	mov	objptr, local03
2fff4     01 FA 05 F6 | 	mov	result1, #1
2fff8     A7 F0 03 F6 | 	mov	ptra, fp
2fffc     B2 00 A0 FD | 	call	#popregs_
30000                 | __struct___bas_wrap_sender_tx_ret
30000     2D 00 64 FD | 	ret
30004                 | 
30004                 | __struct___bas_wrap_sender_rx
30004     03 4A 05 F6 | 	mov	COUNT_, #3
30008     A8 00 A0 FD | 	call	#pushregs_
3000c     04 E4 05 F1 | 	add	objptr, #4
30010     F2 1E 02 FB | 	rdlong	local01, objptr
30014     0F 21 02 F6 | 	mov	local02, local01
30018     04 E4 85 F1 | 	sub	objptr, #4
3001c     13 20 46 F7 | 	zerox	local02, #19
30020     14 1E 46 F0 | 	shr	local01, #20
30024     02 1E 66 F0 | 	shl	local01, #2
30028     ED 1E 02 F1 | 	add	local01, __methods__
3002c     0F 1F 02 FB | 	rdlong	local01, local01
30030     F2 22 02 F6 | 	mov	local03, objptr
30034     10 E5 01 F6 | 	mov	objptr, local02
30038     2D 1E 62 FD | 	call	local01
3003c     11 E5 01 F6 | 	mov	objptr, local03
30040     A7 F0 03 F6 | 	mov	ptra, fp
30044     B2 00 A0 FD | 	call	#popregs_
30048                 | __struct___bas_wrap_sender_rx_ret
30048     2D 00 64 FD | 	ret
3004c                 | 
3004c                 | __struct___bas_wrap_sender_close
3004c     03 4A 05 F6 | 	mov	COUNT_, #3
30050     A8 00 A0 FD | 	call	#pushregs_
30054     08 E4 05 F1 | 	add	objptr, #8
30058     F2 1E 02 FB | 	rdlong	local01, objptr
3005c     0F 21 02 F6 | 	mov	local02, local01
30060     08 E4 85 F1 | 	sub	objptr, #8
30064     13 20 46 F7 | 	zerox	local02, #19
30068     14 1E 46 F0 | 	shr	local01, #20
3006c     02 1E 66 F0 | 	shl	local01, #2
30070     ED 1E 02 F1 | 	add	local01, __methods__
30074     0F 1F 02 FB | 	rdlong	local01, local01
30078     F2 22 02 F6 | 	mov	local03, objptr
3007c     10 E5 01 F6 | 	mov	objptr, local02
30080     2D 1E 62 FD | 	call	local01
30084     11 E5 01 F6 | 	mov	objptr, local03
30088     A7 F0 03 F6 | 	mov	ptra, fp
3008c     B2 00 A0 FD | 	call	#popregs_
30090                 | __struct___bas_wrap_sender_close_ret
30090     2D 00 64 FD | 	ret
30094                 | 
30094                 | LR__4990
30094     2F          | 	byte	"/"
30095     00          | 	byte	0
30096                 | LR__4991
30096     69 6E 66    | 	byte	"inf"
30099     00          | 	byte	0
3009a                 | LR__4992
3009a     6E 61 6E    | 	byte	"nan"
3009d     00          | 	byte	0
3009e                 | LR__4993
3009e                 | 	byte	
3009e     00          | 	byte	0
3009f                 | LR__4994
3009f                 | 	byte	
3009f     00          | 	byte	0
300a0                 | LR__4995
300a0                 | 	byte	
300a0     00          | 	byte	0
300a1                 | LR__4996
300a1                 | 	byte	
300a1     00          | 	byte	0
300a2                 | LR__4997
300a2                 | 	byte	
300a2     00          | 	byte	0
300a3                 | LR__4998
300a3                 | 	byte	
300a3     00          | 	byte	0
300a4                 | LR__4999
300a4                 | 	byte	
300a4     00          | 	byte	0
300a5                 | LR__5000
300a5                 | 	byte	
300a5     00          | 	byte	0
300a6                 | LR__5001
300a6     00          | 	byte	0
300a7     00          | 	byte	0
300a8                 | LR__5002
300a8     00          | 	byte	0
300a9     00          | 	byte	0
300aa                 | LR__5003
300aa     00          | 	byte	0
300ab     00          | 	byte	0
300ac                 | LR__5004
300ac     20 21 21 21 
300b0     20 63 6F 72 
300b4     72 75 70 74 
300b8     65 64 20 68 
300bc     65 61 70 3F 
300c0     3F 3F 20 21 
300c4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
300c7     00          | 	byte	0
300c8                 | LR__5005
300c8     20 21 21 21 
300cc     20 6F 75 74 
300d0     20 6F 66 20 
300d4     68 65 61 70 
300d8     20 6D 65 6D 
300dc     6F 72 79 20 
300e0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
300e4     00          | 	byte	0
300e5                 | LR__5006
300e5     20 21 21 21 
300e9     20 63 6F 72 
300ed     72 75 70 74 
300f1     65 64 20 68 
300f5     65 61 70 20 
300f9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
300fd     00          | 	byte	0
300fe                 | LR__5007
300fe     00          | 	byte	0
300ff     00          | 	byte	0
30100                 | LR__5008
30100     2E          | 	byte	"."
30101     00          | 	byte	0
30102                 | LR__5009
30102     00          | 	byte	0
30103     00          | 	byte	0
30104                 | LR__5010
30104     00          | 	byte	0
30105     00          | 	byte	0
30106                 | LR__5011
30106     00          | 	byte	0
30107     00          | 	byte	0
30108                 | LR__5012
30108     2A 3A 3C 3E 
3010c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
30110     00          | 	byte	0
30111                 | LR__5013
30111     2B 2C 3B 3D 
30115     5B 5D       | 	byte	"+,;=[]"
30117     00          | 	byte	0
30118                 | LR__5014
30118     46 41 54 33 
3011c     32 20 20 20 | 	byte	"FAT32   "
30120     00          | 	byte	0
30121                 | LR__5015
30121     54 5A       | 	byte	"TZ"
30123     00          | 	byte	0
30124                 | LR__5016
30124     00          | 	byte	0
30125     00          | 	byte	0
30126                 | LR__5017
30126                 | 	byte	
30126     00          | 	byte	0
30127                 | LR__5018
30127                 | 	byte	
30127     00          | 	byte	0
30128                 | LR__5019
30128                 | 	byte	
30128     00          | 	byte	0
30129                 | LR__5020
30129                 | 	byte	
30129     00          | 	byte	0
3012a                 | LR__5021
3012a     22          | 	byte	34
3012b     00          | 	byte	0
3012c                 | LR__5022
3012c     22          | 	byte	34
3012d     00          | 	byte	0
3012e                 | LR__5023
3012e     3A          | 	byte	":"
3012f     00          | 	byte	0
30130                 | LR__5024
30130                 | 	byte	
30130     00          | 	byte	0
30131                 | LR__5025
30131                 | 	byte	
30131     00          | 	byte	0
30132                 | LR__5026
30132                 | 	byte	
30132     00          | 	byte	0
30133                 | LR__5027
30133                 | 	byte	
30133     00          | 	byte	0
30134                 | LR__5028
30134                 | 	byte	
30134     00          | 	byte	0
30135                 | LR__5029
30135                 | 	byte	
30135     00          | 	byte	0
30136                 | LR__5030
30136                 | 	byte	
30136     00          | 	byte	0
30137                 | LR__5031
30137     30          | 	byte	"0"
30138     00          | 	byte	0
30139                 | LR__5032
30139     22          | 	byte	34
3013a     00          | 	byte	0
3013b                 | LR__5033
3013b     22          | 	byte	34
3013c     00          | 	byte	0
3013d                 | LR__5034
3013d     22          | 	byte	34
3013e     00          | 	byte	0
3013f                 | LR__5035
3013f     22          | 	byte	34
30140     00          | 	byte	0
30141                 | LR__5036
30141     22          | 	byte	34
30142     00          | 	byte	0
30143                 | LR__5037
30143     3E          | 	byte	">"
30144     00          | 	byte	0
30145                 | LR__5038
30145     3C          | 	byte	"<"
30146     00          | 	byte	0
30147                 | LR__5039
30147     2B          | 	byte	"+"
30148     00          | 	byte	0
30149                 | LR__5040
30149     2D          | 	byte	"-"
3014a     00          | 	byte	0
3014b                 | LR__5041
3014b     2A          | 	byte	"*"
3014c     00          | 	byte	0
3014d                 | LR__5042
3014d     2F          | 	byte	"/"
3014e     00          | 	byte	0
3014f                 | LR__5043
3014f     5E          | 	byte	"^"
30150     00          | 	byte	0
30151                 | LR__5044
30151     3D          | 	byte	"="
30152     00          | 	byte	0
30153                 | LR__5045
30153     2B          | 	byte	"+"
30154     00          | 	byte	0
30155                 | LR__5046
30155     2B          | 	byte	"+"
30156     00          | 	byte	0
30157                 | LR__5047
30157     2D          | 	byte	"-"
30158     00          | 	byte	0
30159                 | LR__5048
30159     2D          | 	byte	"-"
3015a     00          | 	byte	0
3015b                 | LR__5049
3015b     3C          | 	byte	"<"
3015c     00          | 	byte	0
3015d                 | LR__5050
3015d     3E          | 	byte	">"
3015e     00          | 	byte	0
3015f                 | LR__5051
3015f     22          | 	byte	34
30160     00          | 	byte	0
30161                 | LR__5052
30161     22          | 	byte	34
30162     00          | 	byte	0
30163                 | LR__5053
30163     65 6C 73 65 | 	byte	"else"
30167     00          | 	byte	0
30168                 | LR__5054
30168     74 68 65 6E | 	byte	"then"
3016c     00          | 	byte	0
3016d                 | LR__5055
3016d     2E          | 	byte	"."
3016e     00          | 	byte	0
3016f                 | LR__5056
3016f     3F          | 	byte	"?"
30170     00          | 	byte	0
30171                 | LR__5057
30171     3F          | 	byte	"?"
30172     00          | 	byte	0
30173                 | LR__5058
30173     6D 6F 75 73 
30177     65          | 	byte	"mouse"
30178     00          | 	byte	0
30179                 | LR__5059
30179     63 75 72 73 
3017d     6F 72       | 	byte	"cursor"
3017f     00          | 	byte	0
30180                 | LR__5060
30180     63 6C 69 63 
30184     6B          | 	byte	"click"
30185     00          | 	byte	0
30186                 | LR__5061
30186     6F 6E       | 	byte	"on"
30188     00          | 	byte	0
30189                 | LR__5062
30189     31          | 	byte	"1"
3018a     00          | 	byte	0
3018b                 | LR__5063
3018b     6F 66 66    | 	byte	"off"
3018e     00          | 	byte	0
3018f                 | LR__5064
3018f     30          | 	byte	"0"
30190     00          | 	byte	0
30191                 | LR__5065
30191     6D 6F 64 65 | 	byte	"mode"
30195     00          | 	byte	0
30196                 | LR__5066
30196     6D 2E       | 	byte	"m."
30198     00          | 	byte	0
30199                 | LR__5067
30199     61 74 61 72 
3019d     69          | 	byte	"atari"
3019e     00          | 	byte	0
3019f                 | LR__5068
3019f     30          | 	byte	"0"
301a0     00          | 	byte	0
301a1                 | LR__5069
301a1     70 63 5F 61 
301a5     6D 62 65 72 | 	byte	"pc_amber"
301a9     00          | 	byte	0
301aa                 | LR__5070
301aa     31          | 	byte	"1"
301ab     00          | 	byte	0
301ac                 | LR__5071
301ac     70 63 5F 67 
301b0     72 65 65 6E | 	byte	"pc_green"
301b4     00          | 	byte	0
301b5                 | LR__5072
301b5     32          | 	byte	"2"
301b6     00          | 	byte	0
301b7                 | LR__5073
301b7     70 63 5F 77 
301bb     68 69 74 65 | 	byte	"pc_white"
301bf     00          | 	byte	0
301c0                 | LR__5074
301c0     33          | 	byte	"3"
301c1     00          | 	byte	0
301c2                 | LR__5075
301c2     73 74       | 	byte	"st"
301c4     00          | 	byte	0
301c5                 | LR__5076
301c5     34          | 	byte	"4"
301c6     00          | 	byte	0
301c7                 | LR__5077
301c7                 | 	byte	
301c7     00          | 	byte	0
301c8                 | LR__5078
301c8     6C 6F 61 64 | 	byte	"load"
301cc     00          | 	byte	0
301cd                 | LR__5079
301cd     73 61 76 65 | 	byte	"save"
301d1     00          | 	byte	0
301d2                 | LR__5080
301d2     62 72 75 6E | 	byte	"brun"
301d6     00          | 	byte	0
301d7                 | LR__5081
301d7     72 75 6E    | 	byte	"run"
301da     00          | 	byte	0
301db                 | LR__5082
301db     6C 6F 2E    | 	byte	"lo."
301de     00          | 	byte	0
301df                 | LR__5083
301df     73 2E       | 	byte	"s."
301e1     00          | 	byte	0
301e2                 | LR__5084
301e2     62 72 2E    | 	byte	"br."
301e5     00          | 	byte	0
301e6                 | LR__5085
301e6     65 6E 74 65 
301ea     72          | 	byte	"enter"
301eb     00          | 	byte	0
301ec                 | LR__5086
301ec     65 2E       | 	byte	"e."
301ee     00          | 	byte	0
301ef                 | LR__5087
301ef                 | 	byte	
301ef     00          | 	byte	0
301f0                 | LR__5088
301f0                 | 	byte	
301f0     00          | 	byte	0
301f1                 | LR__5089
301f1                 | 	byte	
301f1     00          | 	byte	0
301f2                 | LR__5090
301f2                 | 	byte	
301f2     00          | 	byte	0
301f3                 | LR__5091
301f3                 | 	byte	
301f3     00          | 	byte	0
301f4                 | LR__5092
301f4     52 65 61 64 
301f8     79          | 	byte	"Ready"
301f9     00          | 	byte	0
301fa                 | LR__5093
301fa     2B          | 	byte	"+"
301fb     00          | 	byte	0
301fc                 | LR__5094
301fc     2D          | 	byte	"-"
301fd     00          | 	byte	0
301fe                 | LR__5095
301fe     6F 72       | 	byte	"or"
30200     00          | 	byte	0
30201                 | LR__5096
30201     78 6F 72    | 	byte	"xor"
30204     00          | 	byte	0
30205                 | LR__5097
30205     2A          | 	byte	"*"
30206     00          | 	byte	0
30207                 | LR__5098
30207     2F          | 	byte	"/"
30208     00          | 	byte	0
30209                 | LR__5099
30209     61 6E 64    | 	byte	"and"
3020c     00          | 	byte	0
3020d                 | LR__5100
3020d     64 69 76    | 	byte	"div"
30210     00          | 	byte	0
30211                 | LR__5101
30211     6D 6F 64    | 	byte	"mod"
30214     00          | 	byte	0
30215                 | LR__5102
30215     73 68 6C    | 	byte	"shl"
30218     00          | 	byte	0
30219                 | LR__5103
30219     73 68 72    | 	byte	"shr"
3021c     00          | 	byte	0
3021d                 | LR__5104
3021d     5E          | 	byte	"^"
3021e     00          | 	byte	0
3021f                 | LR__5105
3021f     6E 6F 74    | 	byte	"not"
30222     00          | 	byte	0
30223                 | LR__5106
30223     40          | 	byte	"@"
30224     00          | 	byte	0
30225                 | LR__5107
30225     3D          | 	byte	"="
30226     00          | 	byte	0
30227                 | LR__5108
30227     3E 3D       | 	byte	">="
30229     00          | 	byte	0
3022a                 | LR__5109
3022a     3C 3D       | 	byte	"<="
3022c     00          | 	byte	0
3022d                 | LR__5110
3022d     3C          | 	byte	"<"
3022e     00          | 	byte	0
3022f                 | LR__5111
3022f     3E          | 	byte	">"
30230     00          | 	byte	0
30231                 | LR__5112
30231     3C 3E       | 	byte	"<>"
30233     00          | 	byte	0
30234                 | LR__5113
30234     2B 2B       | 	byte	"++"
30236     00          | 	byte	0
30237                 | LR__5114
30237     2D 2D       | 	byte	"--"
30239     00          | 	byte	0
3023a                 | LR__5115
3023a     23          | 	byte	"#"
3023b     00          | 	byte	0
3023c                 | LR__5116
3023c     30          | 	byte	"0"
3023d     00          | 	byte	0
3023e                 | LR__5117
3023e     39          | 	byte	"9"
3023f     00          | 	byte	0
30240                 | LR__5118
30240     23 72 65 61 
30244     64          | 	byte	"#read"
30245     00          | 	byte	0
30246                 | LR__5119
30246     23 77 72 69 
3024a     74 65       | 	byte	"#write"
3024c     00          | 	byte	0
3024d                 | LR__5120
3024d     23 61 70 70 
30251     65 6E 64    | 	byte	"#append"
30254     00          | 	byte	0
30255                 | LR__5121
30255     23          | 	byte	"#"
30256     00          | 	byte	0
30257                 | LR__5122
30257     23          | 	byte	"#"
30258     00          | 	byte	0
30259                 | LR__5123
30259     2D          | 	byte	"-"
3025a     00          | 	byte	0
3025b                 | LR__5124
3025b     30          | 	byte	"0"
3025c     00          | 	byte	0
3025d                 | LR__5125
3025d     63          | 	byte	"c"
3025e     00          | 	byte	0
3025f                 | LR__5126
3025f     63 23       | 	byte	"c#"
30261     00          | 	byte	0
30262                 | LR__5127
30262     64          | 	byte	"d"
30263     00          | 	byte	0
30264                 | LR__5128
30264     64 23       | 	byte	"d#"
30266     00          | 	byte	0
30267                 | LR__5129
30267     65          | 	byte	"e"
30268     00          | 	byte	0
30269                 | LR__5130
30269     66          | 	byte	"f"
3026a     00          | 	byte	0
3026b                 | LR__5131
3026b     66 23       | 	byte	"f#"
3026d     00          | 	byte	0
3026e                 | LR__5132
3026e     67          | 	byte	"g"
3026f     00          | 	byte	0
30270                 | LR__5133
30270     67 23       | 	byte	"g#"
30272     00          | 	byte	0
30273                 | LR__5134
30273     61          | 	byte	"a"
30274     00          | 	byte	0
30275                 | LR__5135
30275     61 23       | 	byte	"a#"
30277     00          | 	byte	0
30278                 | LR__5136
30278     68          | 	byte	"h"
30279     00          | 	byte	0
3027a                 | LR__5137
3027a     62          | 	byte	"b"
3027b     00          | 	byte	0
3027c                 | LR__5138
3027c     2B          | 	byte	"+"
3027d     00          | 	byte	0
3027e                 | LR__5139
3027e     2D          | 	byte	"-"
3027f     00          | 	byte	0
30280                 | LR__5140
30280     3D          | 	byte	"="
30281     00          | 	byte	0
30282                 | LR__5141
30282     2C          | 	byte	","
30283     00          | 	byte	0
30284                 | LR__5142
30284     2A          | 	byte	"*"
30285     00          | 	byte	0
30286                 | LR__5143
30286     2F          | 	byte	"/"
30287     00          | 	byte	0
30288                 | LR__5144
30288     3B          | 	byte	";"
30289     00          | 	byte	0
3028a                 | LR__5145
3028a     22          | 	byte	34
3028b     00          | 	byte	0
3028c                 | LR__5146
3028c     5E          | 	byte	"^"
3028d     00          | 	byte	0
3028e                 | LR__5147
3028e     29          | 	byte	")"
3028f     00          | 	byte	0
30290                 | LR__5148
30290     28          | 	byte	"("
30291     00          | 	byte	0
30292                 | LR__5149
30292     3A          | 	byte	":"
30293     00          | 	byte	0
30294                 | LR__5150
30294     20          | 	byte	" "
30295     00          | 	byte	0
30296                 | LR__5151
30296     3E          | 	byte	">"
30297     00          | 	byte	0
30298                 | LR__5152
30298     3C          | 	byte	"<"
30299     00          | 	byte	0
3029a                 | LR__5153
3029a     3D          | 	byte	"="
3029b     00          | 	byte	0
3029c                 | LR__5154
3029c     62 65 65 70 | 	byte	"beep"
302a0     00          | 	byte	0
302a1                 | LR__5155
302a1     62 2E       | 	byte	"b."
302a3     00          | 	byte	0
302a4                 | LR__5156
302a4     62 6F 78    | 	byte	"box"
302a7     00          | 	byte	0
302a8                 | LR__5157
302a8     62 72 75 6E | 	byte	"brun"
302ac     00          | 	byte	0
302ad                 | LR__5158
302ad     62 72 2E    | 	byte	"br."
302b0     00          | 	byte	0
302b1                 | LR__5159
302b1     63 68 61 6E 
302b5     67 65 66 72 
302b9     65 71       | 	byte	"changefreq"
302bb     00          | 	byte	0
302bc                 | LR__5160
302bc     63 66 2E    | 	byte	"cf."
302bf     00          | 	byte	0
302c0                 | LR__5161
302c0     63 68 61 6E 
302c4     67 65 70 61 
302c8     6E          | 	byte	"changepan"
302c9     00          | 	byte	0
302ca                 | LR__5162
302ca     63 70 2E    | 	byte	"cp."
302cd     00          | 	byte	0
302ce                 | LR__5163
302ce     63 68 61 6E 
302d2     67 65 76 6F 
302d6     6C          | 	byte	"changevol"
302d7     00          | 	byte	0
302d8                 | LR__5164
302d8     63 76 2E    | 	byte	"cv."
302db     00          | 	byte	0
302dc                 | LR__5165
302dc     63 68 61 6E 
302e0     67 65 77 61 
302e4     76 65       | 	byte	"changewave"
302e6     00          | 	byte	0
302e7                 | LR__5166
302e7     63 77 2E    | 	byte	"cw."
302ea     00          | 	byte	0
302eb                 | LR__5167
302eb     63 69 72 63 
302ef     6C 65       | 	byte	"circle"
302f1     00          | 	byte	0
302f2                 | LR__5168
302f2     63 69 2E    | 	byte	"ci."
302f5     00          | 	byte	0
302f6                 | LR__5169
302f6     63 6C 69 63 
302fa     6B          | 	byte	"click"
302fb     00          | 	byte	0
302fc                 | LR__5170
302fc     63 6C 6F 73 
30300     65          | 	byte	"close"
30301     00          | 	byte	0
30302                 | LR__5171
30302     63 6C 73    | 	byte	"cls"
30305     00          | 	byte	0
30306                 | LR__5172
30306     63 6F 6C 6F 
3030a     72          | 	byte	"color"
3030b     00          | 	byte	0
3030c                 | LR__5173
3030c     63 2E       | 	byte	"c."
3030e     00          | 	byte	0
3030f                 | LR__5174
3030f     63 73 61 76 
30313     65          | 	byte	"csave"
30314     00          | 	byte	0
30315                 | LR__5175
30315     63 73 2E    | 	byte	"cs."
30318     00          | 	byte	0
30319                 | LR__5176
30319     63 75 72 73 
3031d     6F 72       | 	byte	"cursor"
3031f     00          | 	byte	0
30320                 | LR__5177
30320     64 65 66 73 
30324     6E 64       | 	byte	"defsnd"
30326     00          | 	byte	0
30327                 | LR__5178
30327     64 65 66 65 
3032b     6E 76       | 	byte	"defenv"
3032d     00          | 	byte	0
3032e                 | LR__5179
3032e     64 65 66 73 
30332     70 72 69 74 
30336     65          | 	byte	"defsprite"
30337     00          | 	byte	0
30338                 | LR__5180
30338     64 73 2E    | 	byte	"ds."
3033b     00          | 	byte	0
3033c                 | LR__5181
3033c     64 65 67    | 	byte	"deg"
3033f     00          | 	byte	0
30340                 | LR__5182
30340     64 69 6D    | 	byte	"dim"
30343     00          | 	byte	0
30344                 | LR__5183
30344     64 69 72    | 	byte	"dir"
30347     00          | 	byte	0
30348                 | LR__5184
30348     64 70 6F 6B 
3034c     65          | 	byte	"dpoke"
3034d     00          | 	byte	0
3034e                 | LR__5185
3034e     64 72 61 77 | 	byte	"draw"
30352     00          | 	byte	0
30353                 | LR__5186
30353     64 72 2E    | 	byte	"dr."
30356     00          | 	byte	0
30357                 | LR__5187
30357     65 6C 73 65 | 	byte	"else"
3035b     00          | 	byte	0
3035c                 | LR__5188
3035c     65 6E 64    | 	byte	"end"
3035f     00          | 	byte	0
30360                 | LR__5189
30360     65 6E 74 65 
30364     72          | 	byte	"enter"
30365     00          | 	byte	0
30366                 | LR__5190
30366     65 2E       | 	byte	"e."
30368     00          | 	byte	0
30369                 | LR__5191
30369     66 63 69 72 
3036d     63 6C 65    | 	byte	"fcircle"
30370     00          | 	byte	0
30371                 | LR__5192
30371     66 63 2E    | 	byte	"fc."
30374     00          | 	byte	0
30375                 | LR__5193
30375     66 69 6C 6C | 	byte	"fill"
30379     00          | 	byte	0
3037a                 | LR__5194
3037a     66 69 2E    | 	byte	"fi."
3037d     00          | 	byte	0
3037e                 | LR__5195
3037e     66 6F 6E 74 | 	byte	"font"
30382     00          | 	byte	0
30383                 | LR__5196
30383     66 6F 72    | 	byte	"for"
30386     00          | 	byte	0
30387                 | LR__5197
30387     66 2E       | 	byte	"f."
30389     00          | 	byte	0
3038a                 | LR__5198
3038a     66 72 61 6D 
3038e     65          | 	byte	"frame"
3038f     00          | 	byte	0
30390                 | LR__5199
30390     66 72 2E    | 	byte	"fr."
30393     00          | 	byte	0
30394                 | LR__5200
30394     67 65 74    | 	byte	"get"
30397     00          | 	byte	0
30398                 | LR__5201
30398     67 6F 73 75 
3039c     62          | 	byte	"gosub"
3039d     00          | 	byte	0
3039e                 | LR__5202
3039e     67 6F 74 6F | 	byte	"goto"
303a2     00          | 	byte	0
303a3                 | LR__5203
303a3     67 2E       | 	byte	"g."
303a5     00          | 	byte	0
303a6                 | LR__5204
303a6     69 66       | 	byte	"if"
303a8     00          | 	byte	0
303a9                 | LR__5205
303a9     69 6E 6B    | 	byte	"ink"
303ac     00          | 	byte	0
303ad                 | LR__5206
303ad     69 2E       | 	byte	"i."
303af     00          | 	byte	0
303b0                 | LR__5207
303b0     6C 69 73 74 | 	byte	"list"
303b4     00          | 	byte	0
303b5                 | LR__5208
303b5     6C 2E       | 	byte	"l."
303b7     00          | 	byte	0
303b8                 | LR__5209
303b8     6C 6F 61 64 | 	byte	"load"
303bc     00          | 	byte	0
303bd                 | LR__5210
303bd     6C 6F 2E    | 	byte	"lo."
303c0     00          | 	byte	0
303c1                 | LR__5211
303c1     6C 70 6F 6B 
303c5     65          | 	byte	"lpoke"
303c6     00          | 	byte	0
303c7                 | LR__5212
303c7     6D 6F 64 65 | 	byte	"mode"
303cb     00          | 	byte	0
303cc                 | LR__5213
303cc     6D 2E       | 	byte	"m."
303ce     00          | 	byte	0
303cf                 | LR__5214
303cf     6D 6F 75 73 
303d3     65          | 	byte	"mouse"
303d4     00          | 	byte	0
303d5                 | LR__5215
303d5     6E 65 77    | 	byte	"new"
303d8     00          | 	byte	0
303d9                 | LR__5216
303d9     6E 65 78 74 | 	byte	"next"
303dd     00          | 	byte	0
303de                 | LR__5217
303de     6E 2E       | 	byte	"n."
303e0     00          | 	byte	0
303e1                 | LR__5218
303e1     6F 70 65 6E | 	byte	"open"
303e5     00          | 	byte	0
303e6                 | LR__5219
303e6     70 61 70 65 
303ea     72          | 	byte	"paper"
303eb     00          | 	byte	0
303ec                 | LR__5220
303ec     70 61 2E    | 	byte	"pa."
303ef     00          | 	byte	0
303f0                 | LR__5221
303f0     70 69 6E 66 
303f4     6C 6F 61 74 | 	byte	"pinfloat"
303f8     00          | 	byte	0
303f9                 | LR__5222
303f9     70 69 6E 68 
303fd     69          | 	byte	"pinhi"
303fe     00          | 	byte	0
303ff                 | LR__5223
303ff     70 69 6E 6C 
30403     6F          | 	byte	"pinlo"
30404     00          | 	byte	0
30405                 | LR__5224
30405     70 69 6E 73 
30409     74 61 72 74 | 	byte	"pinstart"
3040d     00          | 	byte	0
3040e                 | LR__5225
3040e     70 69 6E 74 
30412     6F 67 67 6C 
30416     65          | 	byte	"pintoggle"
30417     00          | 	byte	0
30418                 | LR__5226
30418     70 69 6E 77 
3041c     72 69 74 65 | 	byte	"pinwrite"
30420     00          | 	byte	0
30421                 | LR__5227
30421     70 6C 61 79 | 	byte	"play"
30425     00          | 	byte	0
30426                 | LR__5228
30426     70 2E       | 	byte	"p."
30428     00          | 	byte	0
30429                 | LR__5229
30429     70 6C 6F 74 | 	byte	"plot"
3042d     00          | 	byte	0
3042e                 | LR__5230
3042e     70 6C 2E    | 	byte	"pl."
30431     00          | 	byte	0
30432                 | LR__5231
30432     70 6F 6B 65 | 	byte	"poke"
30436     00          | 	byte	0
30437                 | LR__5232
30437     70 6F 70    | 	byte	"pop"
3043a     00          | 	byte	0
3043b                 | LR__5233
3043b     70 6F 73 69 
3043f     74 69 6F 6E | 	byte	"position"
30443     00          | 	byte	0
30444                 | LR__5234
30444     70 6F 73 2E | 	byte	"pos."
30448     00          | 	byte	0
30449                 | LR__5235
30449     70 72 69 6E 
3044d     74          | 	byte	"print"
3044e     00          | 	byte	0
3044f                 | LR__5236
3044f     3F          | 	byte	"?"
30450     00          | 	byte	0
30451                 | LR__5237
30451     70 75 74    | 	byte	"put"
30454     00          | 	byte	0
30455                 | LR__5238
30455     72 61 64    | 	byte	"rad"
30458     00          | 	byte	0
30459                 | LR__5239
30459     72 65 6C 65 
3045d     61 73 65    | 	byte	"release"
30460     00          | 	byte	0
30461                 | LR__5240
30461     72 65 6D    | 	byte	"rem"
30464     00          | 	byte	0
30465                 | LR__5241
30465     27          | 	byte	"'"
30466     00          | 	byte	0
30467                 | LR__5242
30467     72 65 74 75 
3046b     72 6E       | 	byte	"return"
3046d     00          | 	byte	0
3046e                 | LR__5243
3046e     72 75 6E    | 	byte	"run"
30471     00          | 	byte	0
30472                 | LR__5244
30472     73 61 76 65 | 	byte	"save"
30476     00          | 	byte	0
30477                 | LR__5245
30477     73 2E       | 	byte	"s."
30479     00          | 	byte	0
3047a                 | LR__5246
3047a     73 65 74 64 
3047e     65 6C 61 79 | 	byte	"setdelay"
30482     00          | 	byte	0
30483                 | LR__5247
30483     73 64 2E    | 	byte	"sd."
30486     00          | 	byte	0
30487                 | LR__5248
30487     73 65 74 65 
3048b     6E 76       | 	byte	"setenv"
3048d     00          | 	byte	0
3048e                 | LR__5249
3048e     73 65 2E    | 	byte	"se."
30491     00          | 	byte	0
30492                 | LR__5250
30492     73 65 74 6C 
30496     65 6E       | 	byte	"setlen"
30498     00          | 	byte	0
30499                 | LR__5251
30499     73 6C 2E    | 	byte	"sl."
3049c     00          | 	byte	0
3049d                 | LR__5252
3049d     73 65 74 70 
304a1     61 6E       | 	byte	"setpan"
304a3     00          | 	byte	0
304a4                 | LR__5253
304a4     73 70       | 	byte	"sp"
304a6     00          | 	byte	0
304a7                 | LR__5254
304a7     73 65 74 73 
304ab     75 73 74 61 
304af     69 6E       | 	byte	"setsustain"
304b1     00          | 	byte	0
304b2                 | LR__5255
304b2     73 73 2E    | 	byte	"ss."
304b5     00          | 	byte	0
304b6                 | LR__5256
304b6     73 65 74 76 
304ba     6F 6C       | 	byte	"setvol"
304bc     00          | 	byte	0
304bd                 | LR__5257
304bd     73 76 2E    | 	byte	"sv."
304c0     00          | 	byte	0
304c1                 | LR__5258
304c1     73 65 74 77 
304c5     61 76 65    | 	byte	"setwave"
304c8     00          | 	byte	0
304c9                 | LR__5259
304c9     73 77 2E    | 	byte	"sw."
304cc     00          | 	byte	0
304cd                 | LR__5260
304cd     73 65 74 77 
304d1     61 76       | 	byte	"setwav"
304d3     00          | 	byte	0
304d4                 | LR__5261
304d4     73 68 75 74 
304d8     75 70       | 	byte	"shutup"
304da     00          | 	byte	0
304db                 | LR__5262
304db     73 68 2E    | 	byte	"sh."
304de     00          | 	byte	0
304df                 | LR__5263
304df     73 6F 75 6E 
304e3     64          | 	byte	"sound"
304e4     00          | 	byte	0
304e5                 | LR__5264
304e5     73 6F 2E    | 	byte	"so."
304e8     00          | 	byte	0
304e9                 | LR__5265
304e9     73 70 72 69 
304ed     74 65       | 	byte	"sprite"
304ef     00          | 	byte	0
304f0                 | LR__5266
304f0     73 70 72 2E | 	byte	"spr."
304f4     00          | 	byte	0
304f5                 | LR__5267
304f5     74 68 65 6E | 	byte	"then"
304f9     00          | 	byte	0
304fa                 | LR__5268
304fa     77 61 69 74 
304fe     6D 73       | 	byte	"waitms"
30500     00          | 	byte	0
30501                 | LR__5269
30501     77 2E       | 	byte	"w."
30503     00          | 	byte	0
30504                 | LR__5270
30504     77 61 69 74 
30508     63 6C 6F 63 
3050c     6B          | 	byte	"waitclock"
3050d     00          | 	byte	0
3050e                 | LR__5271
3050e     77 63 2E    | 	byte	"wc."
30511     00          | 	byte	0
30512                 | LR__5272
30512     77 61 69 74 
30516     76 62 6C    | 	byte	"waitvbl"
30519     00          | 	byte	0
3051a                 | LR__5273
3051a     77 76 2E    | 	byte	"wv."
3051d     00          | 	byte	0
3051e                 | LR__5274
3051e     77 78 70 69 
30522     6E          | 	byte	"wxpin"
30523     00          | 	byte	0
30524                 | LR__5275
30524     77 79 70 69 
30528     6E          | 	byte	"wypin"
30529     00          | 	byte	0
3052a                 | LR__5276
3052a     61 62 73    | 	byte	"abs"
3052d     00          | 	byte	0
3052e                 | LR__5277
3052e     61 63 6F 73 | 	byte	"acos"
30532     00          | 	byte	0
30533                 | LR__5278
30533     61 64 72    | 	byte	"adr"
30536     00          | 	byte	0
30537                 | LR__5279
30537     61 64 64 72 | 	byte	"addr"
3053b     00          | 	byte	0
3053c                 | LR__5280
3053c     61 73 63    | 	byte	"asc"
3053f     00          | 	byte	0
30540                 | LR__5281
30540     61 73 69 6E | 	byte	"asin"
30544     00          | 	byte	0
30545                 | LR__5282
30545     61 74 6E    | 	byte	"atn"
30548     00          | 	byte	0
30549                 | LR__5283
30549     62 69 6E 24 | 	byte	"bin$"
3054d     00          | 	byte	0
3054e                 | LR__5284
3054e     63 68 72 24 | 	byte	"chr$"
30552     00          | 	byte	0
30553                 | LR__5285
30553     63 6F 73    | 	byte	"cos"
30556     00          | 	byte	0
30557                 | LR__5286
30557     64 70 65 65 
3055b     6B          | 	byte	"dpeek"
3055c     00          | 	byte	0
3055d                 | LR__5287
3055d     66 72 65    | 	byte	"fre"
30560     00          | 	byte	0
30561                 | LR__5288
30561     67 65 74 70 
30565     69 78 65 6C | 	byte	"getpixel"
30569     00          | 	byte	0
3056a                 | LR__5289
3056a     67 65 2E    | 	byte	"ge."
3056d     00          | 	byte	0
3056e                 | LR__5290
3056e     67 65 74 65 
30572     6E 76 73 75 
30576     73 74 61 69 
3057a     6E          | 	byte	"getenvsustain"
3057b     00          | 	byte	0
3057c                 | LR__5291
3057c     67 65 74 6E 
30580     6F 74 65 76 
30584     61 6C 75 65 | 	byte	"getnotevalue"
30588     00          | 	byte	0
30589                 | LR__5292
30589     67 65 74 74 
3058d     69 6D 65    | 	byte	"gettime"
30590     00          | 	byte	0
30591                 | LR__5293
30591     68 65 78 24 | 	byte	"hex$"
30595     00          | 	byte	0
30596                 | LR__5294
30596     69 6E 6B 65 
3059a     79 24       | 	byte	"inkey$"
3059c     00          | 	byte	0
3059d                 | LR__5295
3059d     69 6E 74    | 	byte	"int"
305a0     00          | 	byte	0
305a1                 | LR__5296
305a1     6C 65 66 74 
305a5     24          | 	byte	"left$"
305a6     00          | 	byte	0
305a7                 | LR__5297
305a7     6C 65 6E    | 	byte	"len"
305aa     00          | 	byte	0
305ab                 | LR__5298
305ab     6C 6F 67    | 	byte	"log"
305ae     00          | 	byte	0
305af                 | LR__5299
305af     6C 70 65 65 
305b3     6B          | 	byte	"lpeek"
305b4     00          | 	byte	0
305b5                 | LR__5300
305b5     6D 69 64 24 | 	byte	"mid$"
305b9     00          | 	byte	0
305ba                 | LR__5301
305ba     6D 6F 75 73 
305be     65 6B       | 	byte	"mousek"
305c0     00          | 	byte	0
305c1                 | LR__5302
305c1     6D 6F 75 73 
305c5     65 77       | 	byte	"mousew"
305c7     00          | 	byte	0
305c8                 | LR__5303
305c8     6D 6F 75 73 
305cc     65 78       | 	byte	"mousex"
305ce     00          | 	byte	0
305cf                 | LR__5304
305cf     6D 6F 75 73 
305d3     65 79       | 	byte	"mousey"
305d5     00          | 	byte	0
305d6                 | LR__5305
305d6     70 65 65 6B | 	byte	"peek"
305da     00          | 	byte	0
305db                 | LR__5306
305db     70 69 6E 72 
305df     65 61 64    | 	byte	"pinread"
305e2     00          | 	byte	0
305e3                 | LR__5307
305e3     72 64 70 69 
305e7     6E          | 	byte	"rdpin"
305e8     00          | 	byte	0
305e9                 | LR__5308
305e9     72 69 67 68 
305ed     74 24       | 	byte	"right$"
305ef     00          | 	byte	0
305f0                 | LR__5309
305f0     72 71 70 69 
305f4     6E          | 	byte	"rqpin"
305f5     00          | 	byte	0
305f6                 | LR__5310
305f6     72 6F 75 6E 
305fa     64          | 	byte	"round"
305fb     00          | 	byte	0
305fc                 | LR__5311
305fc     72 6E 64    | 	byte	"rnd"
305ff     00          | 	byte	0
30600                 | LR__5312
30600     73 69 6E    | 	byte	"sin"
30603     00          | 	byte	0
30604                 | LR__5313
30604     73 71 72    | 	byte	"sqr"
30607     00          | 	byte	0
30608                 | LR__5314
30608     73 74 69 63 
3060c     6B          | 	byte	"stick"
3060d     00          | 	byte	0
3060e                 | LR__5315
3060e     73 74 72 69 
30612     67          | 	byte	"strig"
30613     00          | 	byte	0
30614                 | LR__5316
30614     73 74 72 24 | 	byte	"str$"
30618     00          | 	byte	0
30619                 | LR__5317
30619     74 61 6E    | 	byte	"tan"
3061c     00          | 	byte	0
3061d                 | LR__5318
3061d     76 61 6C    | 	byte	"val"
30620     00          | 	byte	0
30621                 | LR__5319
30621     76 61 72 70 
30625     74 72       | 	byte	"varptr"
30627     00          | 	byte	0
30628                 | LR__5320
30628     61          | 	byte	"a"
30629     00          | 	byte	0
3062a                 | LR__5321
3062a     7A          | 	byte	"z"
3062b     00          | 	byte	0
3062c                 | LR__5322
3062c     5F          | 	byte	"_"
3062d     00          | 	byte	0
3062e                 | LR__5323
3062e     61          | 	byte	"a"
3062f     00          | 	byte	0
30630                 | LR__5324
30630     7A          | 	byte	"z"
30631     00          | 	byte	0
30632                 | LR__5325
30632     30          | 	byte	"0"
30633     00          | 	byte	0
30634                 | LR__5326
30634     39          | 	byte	"9"
30635     00          | 	byte	0
30636                 | LR__5327
30636     5F          | 	byte	"_"
30637     00          | 	byte	0
30638                 | LR__5328
30638     2E          | 	byte	"."
30639     00          | 	byte	0
3063a                 | LR__5329
3063a     61          | 	byte	"a"
3063b     00          | 	byte	0
3063c                 | LR__5330
3063c     7A          | 	byte	"z"
3063d     00          | 	byte	0
3063e                 | LR__5331
3063e     30          | 	byte	"0"
3063f     00          | 	byte	0
30640                 | LR__5332
30640     39          | 	byte	"9"
30641     00          | 	byte	0
30642                 | LR__5333
30642     5F          | 	byte	"_"
30643     00          | 	byte	0
30644                 | LR__5334
30644     24          | 	byte	"$"
30645     00          | 	byte	0
30646                 | LR__5335
30646     25          | 	byte	"%"
30647     00          | 	byte	0
30648                 | LR__5336
30648     21          | 	byte	"!"
30649     00          | 	byte	0
3064a                 | LR__5337
3064a     30          | 	byte	"0"
3064b     00          | 	byte	0
3064c                 | LR__5338
3064c     39          | 	byte	"9"
3064d     00          | 	byte	0
3064e                 | LR__5339
3064e     2E          | 	byte	"."
3064f     00          | 	byte	0
30650                 | LR__5340
30650     24          | 	byte	"$"
30651     00          | 	byte	0
30652                 | LR__5341
30652     25          | 	byte	"%"
30653     00          | 	byte	0
30654                 | LR__5342
30654     2D          | 	byte	"-"
30655     00          | 	byte	0
30656                 | LR__5343
30656     2E          | 	byte	"."
30657     00          | 	byte	0
30658                 | LR__5344
30658     24          | 	byte	"$"
30659     00          | 	byte	0
3065a                 | LR__5345
3065a     25          | 	byte	"%"
3065b     00          | 	byte	0
3065c                 | LR__5346
3065c     30          | 	byte	"0"
3065d     00          | 	byte	0
3065e                 | LR__5347
3065e     39          | 	byte	"9"
3065f     00          | 	byte	0
30660                 | LR__5348
30660     5F          | 	byte	"_"
30661     00          | 	byte	0
30662                 | LR__5349
30662     2E          | 	byte	"."
30663     00          | 	byte	0
30664                 | LR__5350
30664     45          | 	byte	"E"
30665     00          | 	byte	0
30666                 | LR__5351
30666     65          | 	byte	"e"
30667     00          | 	byte	0
30668                 | LR__5352
30668     2D          | 	byte	"-"
30669     00          | 	byte	0
3066a                 | LR__5353
3066a     61          | 	byte	"a"
3066b     00          | 	byte	0
3066c                 | LR__5354
3066c     66          | 	byte	"f"
3066d     00          | 	byte	0
3066e                 | LR__5355
3066e     30          | 	byte	"0"
3066f     00          | 	byte	0
30670                 | LR__5356
30670     31          | 	byte	"1"
30671     00          | 	byte	0
30672                 | LR__5357
30672     5F          | 	byte	"_"
30673     00          | 	byte	0
30674                 | LR__5358
30674     2D          | 	byte	"-"
30675     00          | 	byte	0
30676                 | LR__5359
30676     65          | 	byte	"e"
30677     00          | 	byte	0
30678                 | LR__5360
30678     2E          | 	byte	"."
30679     00          | 	byte	0
3067a                 | LR__5361
3067a     45          | 	byte	"E"
3067b     00          | 	byte	0
3067c                 | LR__5362
3067c     65          | 	byte	"e"
3067d     00          | 	byte	0
3067e                 | LR__5363
3067e     30          | 	byte	"0"
3067f     00          | 	byte	0
30680                 | LR__5364
30680     39          | 	byte	"9"
30681     00          | 	byte	0
30682                 | LR__5365
30682     24          | 	byte	"$"
30683     00          | 	byte	0
30684                 | LR__5366
30684     25          | 	byte	"%"
30685     00          | 	byte	0
30686                 | LR__5367
30686     2D          | 	byte	"-"
30687     00          | 	byte	0
30688                 | LR__5368
30688     24          | 	byte	"$"
30689     00          | 	byte	0
3068a                 | LR__5369
3068a     25          | 	byte	"%"
3068b     00          | 	byte	0
3068c                 | LR__5370
3068c     30          | 	byte	"0"
3068d     00          | 	byte	0
3068e                 | LR__5371
3068e     39          | 	byte	"9"
3068f     00          | 	byte	0
30690                 | LR__5372
30690     5F          | 	byte	"_"
30691     00          | 	byte	0
30692                 | LR__5373
30692     30          | 	byte	"0"
30693     00          | 	byte	0
30694                 | LR__5374
30694     39          | 	byte	"9"
30695     00          | 	byte	0
30696                 | LR__5375
30696     61          | 	byte	"a"
30697     00          | 	byte	0
30698                 | LR__5376
30698     66          | 	byte	"f"
30699     00          | 	byte	0
3069a                 | LR__5377
3069a     5F          | 	byte	"_"
3069b     00          | 	byte	0
3069c                 | LR__5378
3069c     30          | 	byte	"0"
3069d     00          | 	byte	0
3069e                 | LR__5379
3069e     31          | 	byte	"1"
3069f     00          | 	byte	0
306a0                 | LR__5380
306a0     5F          | 	byte	"_"
306a1     00          | 	byte	0
306a2                 | LR__5381
306a2     30          | 	byte	"0"
306a3     00          | 	byte	0
306a4                 | LR__5382
306a4     39          | 	byte	"9"
306a5     00          | 	byte	0
306a6                 | LR__5383
306a6     5F          | 	byte	"_"
306a7     00          | 	byte	0
306a8                 | LR__5384
306a8     22          | 	byte	34
306a9     00          | 	byte	0
306aa                 | LR__5385
306aa     22          | 	byte	34
306ab     00          | 	byte	0
306ac                 | LR__5386
306ac     44 69 6D 3A 
306b0     20 61 74 20 
306b4     6C 69 6E 65 
306b8     20          | 	byte	"Dim: at line "
306b9     00          | 	byte	0
306ba                 | LR__5387
306ba     3A 20 77 61 
306be     72 6E 69 6E 
306c2     67 3A 20 74 
306c6     68 65 20 76 
306ca     61 72 69 61 
306ce     62 6C 65 20 
306d2     65 78 69 73 
306d6     74 65 64 2E | 	byte	": warning: the variable existed."
306da     00          | 	byte	0
306db                 | LR__5388
306db     28          | 	byte	"("
306dc     00          | 	byte	0
306dd                 | LR__5389
306dd     61 73       | 	byte	"as"
306df     00          | 	byte	0
306e0                 | LR__5390
306e0     61 73       | 	byte	"as"
306e2     00          | 	byte	0
306e3                 | LR__5391
306e3     2C          | 	byte	","
306e4     00          | 	byte	0
306e5                 | LR__5392
306e5     29          | 	byte	")"
306e6     00          | 	byte	0
306e7                 | LR__5393
306e7     29          | 	byte	")"
306e8     00          | 	byte	0
306e9                 | LR__5394
306e9     61 73       | 	byte	"as"
306eb     00          | 	byte	0
306ec                 | LR__5395
306ec     62 79 74 65 | 	byte	"byte"
306f0     00          | 	byte	0
306f1                 | LR__5396
306f1     75 62 79 74 
306f5     65          | 	byte	"ubyte"
306f6     00          | 	byte	0
306f7                 | LR__5397
306f7     73 68 6F 72 
306fb     74          | 	byte	"short"
306fc     00          | 	byte	0
306fd                 | LR__5398
306fd     75 73 68 6F 
30701     72 74       | 	byte	"ushort"
30703     00          | 	byte	0
30704                 | LR__5399
30704     6C 6F 6E 67 | 	byte	"long"
30708     00          | 	byte	0
30709                 | LR__5400
30709     69 6E 74 65 
3070d     67 65 72    | 	byte	"integer"
30710     00          | 	byte	0
30711                 | LR__5401
30711     75 6C 6F 6E 
30715     67          | 	byte	"ulong"
30716     00          | 	byte	0
30717                 | LR__5402
30717     69 6E 74 36 
3071b     34          | 	byte	"int64"
3071c     00          | 	byte	0
3071d                 | LR__5403
3071d     75 69 6E 74 
30721     36 34       | 	byte	"uint64"
30723     00          | 	byte	0
30724                 | LR__5404
30724     73 69 6E 67 
30728     6C 65       | 	byte	"single"
3072a     00          | 	byte	0
3072b                 | LR__5405
3072b     64 6F 75 62 
3072f     6C 65       | 	byte	"double"
30731     00          | 	byte	0
30732                 | LR__5406
30732     73 74 72 69 
30736     6E 67       | 	byte	"string"
30738     00          | 	byte	0
30739                 | LR__5407
30739     74 6F       | 	byte	"to"
3073b     00          | 	byte	0
3073c                 | LR__5408
3073c     73 74 65 70 | 	byte	"step"
30740     00          | 	byte	0
30741                 | LR__5409
30741     73 2E       | 	byte	"s."
30743     00          | 	byte	0
30744                 | LR__5410
30744     24          | 	byte	"$"
30745     00          | 	byte	0
30746                 | LR__5411
30746     26 68       | 	byte	"&h"
30748     00          | 	byte	0
30749                 | LR__5412
30749     25          | 	byte	"%"
3074a     00          | 	byte	0
3074b                 | LR__5413
3074b     26 62       | 	byte	"&b"
3074d     00          | 	byte	0
3074e                 | LR__5414
3074e                 | 	byte	
3074e     00          | 	byte	0
3074f                 | LR__5415
3074f     61 63 6F 73 
30753     3A 20       | 	byte	"acos: "
30755     00          | 	byte	0
30756                 | LR__5416
30756     61 73 63 3A 
3075a     20          | 	byte	"asc: "
3075b     00          | 	byte	0
3075c                 | LR__5417
3075c     61 73 63 3A 
30760     20          | 	byte	"asc: "
30761     00          | 	byte	0
30762                 | LR__5418
30762     61 73 69 6E 
30766     3A 20       | 	byte	"asin: "
30768     00          | 	byte	0
30769                 | LR__5419
30769     61 74 6E 3A 
3076d     20          | 	byte	"atn: "
3076e     00          | 	byte	0
3076f                 | LR__5420
3076f     62 69 6E 24 
30773     3A 20       | 	byte	"bin$: "
30775     00          | 	byte	0
30776                 | LR__5421
30776     2F          | 	byte	"/"
30777     00          | 	byte	0
30778                 | LR__5422
30778     2F 73 64 2F 
3077c     62 69 6E 2F | 	byte	"/sd/bin/"
30780     00          | 	byte	0
30781                 | LR__5423
30781     53 79 73 74 
30785     65 6D 20 65 
30789     72 72 6F 72 
3078d     20          | 	byte	"System error "
3078e     00          | 	byte	0
3078f                 | LR__5424
3078f     3A 20       | 	byte	": "
30791     00          | 	byte	0
30792                 | LR__5425
30792     63 68 72 24 
30796     3A 20       | 	byte	"chr$: "
30798     00          | 	byte	0
30799                 | LR__5426
30799     63 68 61 6E 
3079d     6E 65 6C 23 
307a1     20 65 78 70 
307a5     65 63 74 65 
307a9     64          | 	byte	"channel# expected"
307aa     00          | 	byte	0
307ab                 | LR__5427
307ab     63 6F 73 3A 
307af     20          | 	byte	"cos: "
307b0     00          | 	byte	0
307b1                 | LR__5428
307b1                 | 	byte	
307b1     00          | 	byte	0
307b2                 | LR__5429
307b2                 | 	byte	
307b2     00          | 	byte	0
307b3                 | LR__5430
307b3     2F 73 64 2F 
307b7     6D 65 64 69 
307bb     61 2F 68 2F | 	byte	"/sd/media/h/"
307bf     00          | 	byte	0
307c0                 | LR__5431
307c0     53 79 73 74 
307c4     65 6D 20 65 
307c8     72 72 6F 72 
307cc     20          | 	byte	"System error "
307cd     00          | 	byte	0
307ce                 | LR__5432
307ce     3A 20       | 	byte	": "
307d0     00          | 	byte	0
307d1                 | LR__5433
307d1                 | 	byte	
307d1     00          | 	byte	0
307d2                 | LR__5434
307d2                 | 	byte	
307d2     00          | 	byte	0
307d3                 | LR__5435
307d3     2F 73 64 2F 
307d7     6D 65 64 69 
307db     61 2F 73 2F | 	byte	"/sd/media/s/"
307df     00          | 	byte	0
307e0                 | LR__5436
307e0     53 79 73 74 
307e4     65 6D 20 65 
307e8     72 72 6F 72 
307ec     20          | 	byte	"System error "
307ed     00          | 	byte	0
307ee                 | LR__5437
307ee     3A 20       | 	byte	": "
307f0     00          | 	byte	0
307f1                 | LR__5438
307f1     2F 73 64 2F 
307f5     62 61 73    | 	byte	"/sd/bas"
307f8     00          | 	byte	0
307f9                 | LR__5439
307f9     57 6F 72 6B 
307fd     69 6E 67 20 
30801     64 69 72 65 
30805     63 74 6F 72 
30809     79 3A 20    | 	byte	"Working directory: "
3080c     00          | 	byte	0
3080d                 | LR__5440
3080d                 | 	byte	
3080d     00          | 	byte	0
3080e                 | LR__5441
3080e     2A          | 	byte	"*"
3080f     00          | 	byte	0
30810                 | LR__5442
30810                 | 	byte	
30810     00          | 	byte	0
30811                 | LR__5443
30811     5B 64 69 72 
30815     5D 20       | 	byte	"[dir] "
30817     00          | 	byte	0
30818                 | LR__5444
30818     4D 6F 72 65 
3081c     20 74 68 61 
30820     6E 20 31 32 
30824     38 20 65 6E 
30828     74 72 69 65 
3082c     73 20 66 6F 
30830     75 6E 64 3A 
30834     20 63 6C 65 
30838     61 6E 20 79 
3083c     6F 75 72 20 
30840     64 69 72 65 
30844     63 74 6F 72 
30848     79          | 	byte	"More than 128 entries found: clean your directory"
30849     00          | 	byte	0
3084a                 | LR__5445
3084a     2A          | 	byte	"*"
3084b     00          | 	byte	0
3084c                 | LR__5446
3084c                 | 	byte	
3084c     00          | 	byte	0
3084d                 | LR__5447
3084d     4D 6F 72 65 
30851     20 74 68 61 
30855     6E 20 31 32 
30859     38 20 65 6E 
3085d     74 72 69 65 
30861     73 20 66 6F 
30865     75 6E 64 3A 
30869     20 63 6C 65 
3086d     61 6E 20 79 
30871     6F 75 72 20 
30875     64 69 72 65 
30879     63 74 6F 72 
3087d     79          | 	byte	"More than 128 entries found: clean your directory"
3087e     00          | 	byte	0
3087f                 | LR__5448
3087f     45 72 72 6F 
30883     72 20       | 	byte	"Error "
30885     00          | 	byte	0
30886                 | LR__5449
30886     3A 20       | 	byte	": "
30888     00          | 	byte	0
30889                 | LR__5450
30889     67 65 74 65 
3088d     6E 76 73 75 
30891     73 74 61 69 
30895     6E 3A 20    | 	byte	"getenvsustain: "
30898     00          | 	byte	0
30899                 | LR__5451
30899     67 65 74 70 
3089d     69 78 65 6C 
308a1     3A 20       | 	byte	"getpixel: "
308a3     00          | 	byte	0
308a4                 | LR__5452
308a4     68 65 78 24 
308a8     3A 20       | 	byte	"hex$: "
308aa     00          | 	byte	0
308ab                 | LR__5453
308ab                 | 	byte	
308ab     00          | 	byte	0
308ac                 | LR__5454
308ac     6C 65 66 74 
308b0     24 3A 20    | 	byte	"left$: "
308b3     00          | 	byte	0
308b4                 | LR__5455
308b4     6C 65 66 74 
308b8     24 3A 20    | 	byte	"left$: "
308bb     00          | 	byte	0
308bc                 | LR__5456
308bc     6C 65 6E 3A 
308c0     20          | 	byte	"len: "
308c1     00          | 	byte	0
308c2                 | LR__5457
308c2     6C 65 6E 3A 
308c6     20          | 	byte	"len: "
308c7     00          | 	byte	0
308c8                 | LR__5458
308c8                 | 	byte	
308c8     00          | 	byte	0
308c9                 | LR__5459
308c9     2F          | 	byte	"/"
308ca     00          | 	byte	0
308cb                 | LR__5460
308cb     2F          | 	byte	"/"
308cc     00          | 	byte	0
308cd                 | LR__5461
308cd     2E 62 61 73 | 	byte	".bas"
308d1     00          | 	byte	0
308d2                 | LR__5462
308d2     53 79 73 74 
308d6     65 6D 20 65 
308da     72 72 6F 72 
308de     20          | 	byte	"System error "
308df     00          | 	byte	0
308e0                 | LR__5463
308e0     3A 20       | 	byte	": "
308e2     00          | 	byte	0
308e3                 | LR__5464
308e3     2E 62 61 73 | 	byte	".bas"
308e7     00          | 	byte	0
308e8                 | LR__5465
308e8     2F          | 	byte	"/"
308e9     00          | 	byte	0
308ea                 | LR__5466
308ea                 | 	byte	
308ea     00          | 	byte	0
308eb                 | LR__5467
308eb     4C 6F 61 64 
308ef     65 64 20    | 	byte	"Loaded "
308f2     00          | 	byte	0
308f3                 | LR__5468
308f3     2F          | 	byte	"/"
308f4     00          | 	byte	0
308f5                 | LR__5469
308f5     6C 6F 67 3A 
308f9     20          | 	byte	"log: "
308fa     00          | 	byte	0
308fb                 | LR__5470
308fb     6D 69 64 24 
308ff     3A 20       | 	byte	"mid$: "
30901     00          | 	byte	0
30902                 | LR__5471
30902     6D 69 64 24 
30906     3A 20       | 	byte	"mid$: "
30908     00          | 	byte	0
30909                 | LR__5472
30909     20 42 41 53 
3090d     49 43 20 62 
30911     79 74 65 73 
30915     20 66 72 65 
30919     65          | 	byte	" BASIC bytes free"
3091a     00          | 	byte	0
3091b                 | LR__5473
3091b                 | 	byte	
3091b     00          | 	byte	0
3091c                 | LR__5474
3091c                 | 	byte	
3091c     00          | 	byte	0
3091d                 | LR__5475
3091d     6E 6F 6E 61 
30921     6D 65 2E 62 
30925     61 73       | 	byte	"noname.bas"
30927     00          | 	byte	0
30928                 | LR__5476
30928     66 69 6C 65 
3092c     6E 61 6D 65 
30930     20 65 78 70 
30934     65 63 74 65 
30938     64          | 	byte	"filename expected"
30939     00          | 	byte	0
3093a                 | LR__5477
3093a     72 65 61 64 | 	byte	"read"
3093e     00          | 	byte	0
3093f                 | LR__5478
3093f     77 72 69 74 
30943     65          | 	byte	"write"
30944     00          | 	byte	0
30945                 | LR__5479
30945     61 70 70 65 
30949     6E 64       | 	byte	"append"
3094b     00          | 	byte	0
3094c                 | LR__5480
3094c     63 68 61 6E 
30950     6E 65 6C 23 
30954     20 65 78 70 
30958     65 63 74 65 
3095c     64          | 	byte	"channel# expected"
3095d     00          | 	byte	0
3095e                 | LR__5481
3095e     4F 70 65 6E 
30962     3A 20 69 6E 
30966     76 61 6C 69 
3096a     64 20 6D 6F 
3096e     64 65       | 	byte	"Open: invalid mode"
30970     00          | 	byte	0
30971                 | LR__5482
30971     50 72 69 6E 
30975     74 20 74 6F 
30979     20 63 68 61 
3097d     6E 6E 65 6C 
30981     20 28 6E 6F 
30985     74 20 79 65 
30989     74 20 69 6D 
3098d     70 6C 65 6D 
30991     65 6E 74 65 
30995     64 29       | 	byte	"Print to channel (not yet implemented)"
30997     00          | 	byte	0
30998                 | LR__5483
30998     72 69 67 68 
3099c     74 24 3A 20 | 	byte	"right$: "
309a0     00          | 	byte	0
309a1                 | LR__5484
309a1     72 69 67 68 
309a5     74 24 3A 20 | 	byte	"right$: "
309a9     00          | 	byte	0
309aa                 | LR__5485
309aa     72 6E 64 3A 
309ae     20          | 	byte	"rnd: "
309af     00          | 	byte	0
309b0                 | LR__5486
309b0     72 6E 64 3A 
309b4     20          | 	byte	"rnd: "
309b5     00          | 	byte	0
309b6                 | LR__5487
309b6     53 74 6F 70 
309ba     70 65 64 20 
309be     61 74 20 6C 
309c2     69 6E 65 20 | 	byte	"Stopped at line "
309c6     00          | 	byte	0
309c7                 | LR__5488
309c7                 | 	byte	
309c7     00          | 	byte	0
309c8                 | LR__5489
309c8     2F          | 	byte	"/"
309c9     00          | 	byte	0
309ca                 | LR__5490
309ca                 | 	byte	
309ca     00          | 	byte	0
309cb                 | LR__5491
309cb     53 61 76 65 
309cf     64 20 61 73 
309d3     20          | 	byte	"Saved as "
309d4     00          | 	byte	0
309d5                 | LR__5492
309d5     2F          | 	byte	"/"
309d6     00          | 	byte	0
309d7                 | LR__5493
309d7     73 69 6E 3A 
309db     20          | 	byte	"sin: "
309dc     00          | 	byte	0
309dd                 | LR__5494
309dd     73 71 72 3A 
309e1     20          | 	byte	"sqr: "
309e2     00          | 	byte	0
309e3                 | LR__5495
309e3     73 74 69 63 
309e7     6B 3A 20    | 	byte	"stick: "
309ea     00          | 	byte	0
309eb                 | LR__5496
309eb     73 74 72 69 
309ef     67 3A 20    | 	byte	"strig: "
309f2     00          | 	byte	0
309f3                 | LR__5497
309f3     74 61 6E 3A 
309f7     20          | 	byte	"tan: "
309f8     00          | 	byte	0
309f9                 | LR__5498
309f9     76 61 6C 3A 
309fd     20          | 	byte	"val: "
309fe     00          | 	byte	0
309ff                 | LR__5499
309ff     76 61 6C 3A 
30a03     20          | 	byte	"val: "
30a04     00          | 	byte	0
30a05                 | LR__5500
30a05     24          | 	byte	"$"
30a06     00          | 	byte	0
30a07                 | LR__5501
30a07     26 68       | 	byte	"&h"
30a09     00          | 	byte	0
30a0a                 | LR__5502
30a0a     25          | 	byte	"%"
30a0b     00          | 	byte	0
30a0c                 | LR__5503
30a0c     26 62       | 	byte	"&b"
30a0e     00          | 	byte	0
30a0f                 | LR__5504
30a0f                 | 	byte	
30a0f     00          | 	byte	0
30a10                 | LR__5505
30a10     45 78 70 65 
30a14     63 74 65 64 
30a18     20 6E 75 6D 
30a1c     62 65 72 2C 
30a20     20 67 6F 74 
30a24     20 73 6F 6D 
30a28     65 74 68 69 
30a2c     6E 67 20 65 
30a30     6C 73 65 2E | 	byte	"Expected number, got something else."
30a34     00          | 	byte	0
30a35                 | LR__5506
30a35     43 61 6E 6E 
30a39     6F 74 20 61 
30a3d     64 64 20 61 
30a41     20 6E 75 6D 
30a45     62 65 72 20 
30a49     74 6F 20 61 
30a4d     20 73 74 72 
30a51     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30a55     00          | 	byte	0
30a56                 | LR__5507
30a56     43 61 6E 6E 
30a5a     6F 74 20 73 
30a5e     75 62 73 74 
30a62     72 61 63 74 
30a66     20 73 74 72 
30a6a     69 6E 67 73 
30a6e     2E          | 	byte	"Cannot substract strings."
30a6f     00          | 	byte	0
30a70                 | LR__5508
30a70     55 6E 6B 6E 
30a74     6F 77 6E 20 
30a78     65 72 72 6F 
30a7c     72 20 77 68 
30a80     69 6C 65 20 
30a84     61 64 64 69 
30a88     6E 67 2E    | 	byte	"Unknown error while adding."
30a8b     00          | 	byte	0
30a8c                 | LR__5509
30a8c     55 6E 6B 6E 
30a90     6F 77 6E 20 
30a94     65 72 72 6F 
30a98     72 20 77 68 
30a9c     69 6C 65 20 
30aa0     73 75 62 73 
30aa4     74 72 61 63 
30aa8     74 69 6E 67 
30aac     2E          | 	byte	"Unknown error while substracting."
30aad     00          | 	byte	0
30aae                 | LR__5510
30aae     43 61 6E 6E 
30ab2     6F 74 20 64 
30ab6     6F 20 6C 6F 
30aba     67 69 63 20 
30abe     6F 70 65 72 
30ac2     61 74 69 6F 
30ac6     6E 20 6F 6E 
30aca     20 73 74 72 
30ace     69 6E 67 20 
30ad2     6F 72 20 66 
30ad6     6C 6F 61 74 
30ada     2E          | 	byte	"Cannot do logic operation on string or float."
30adb     00          | 	byte	0
30adc                 | LR__5511
30adc     55 6E 6B 6E 
30ae0     6F 77 6E 20 
30ae4     65 72 72 6F 
30ae8     72 20 77 68 
30aec     69 6C 65 20 
30af0     64 6F 69 6E 
30af4     67 20 6C 6F 
30af8     67 69 63 20 
30afc     6F 70 65 72 
30b00     61 74 69 6F 
30b04     6E 2E       | 	byte	"Unknown error while doing logic operation."
30b06     00          | 	byte	0
30b07                 | LR__5512
30b07     43 61 6E 6E 
30b0b     6F 74 20 6D 
30b0f     75 6C 74 69 
30b13     70 6C 79 20 
30b17     73 74 72 69 
30b1b     6E 67 73 2E | 	byte	"Cannot multiply strings."
30b1f     00          | 	byte	0
30b20                 | LR__5513
30b20     55 6E 6B 6E 
30b24     6F 77 6E 20 
30b28     65 72 72 6F 
30b2c     72 20 77 68 
30b30     69 6C 65 20 
30b34     6D 75 6C 74 
30b38     69 70 6C 79 
30b3c     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30b40     00          | 	byte	0
30b41                 | LR__5514
30b41     43 61 6E 6E 
30b45     6F 74 20 64 
30b49     69 76 69 64 
30b4d     65 20 73 74 
30b51     72 69 6E 67 
30b55     73 2E       | 	byte	"Cannot divide strings."
30b57     00          | 	byte	0
30b58                 | LR__5515
30b58     55 6E 6B 6E 
30b5c     6F 77 6E 20 
30b60     65 72 72 6F 
30b64     72 20 77 68 
30b68     69 6C 65 20 
30b6c     64 69 76 69 
30b70     64 69 6E 67 
30b74     2E          | 	byte	"Unknown error while dividing."
30b75     00          | 	byte	0
30b76                 | LR__5516
30b76     43 61 6E 6E 
30b7a     6F 74 20 63 
30b7e     6F 6D 70 75 
30b82     74 65 20 61 
30b86     20 70 6F 77 
30b8a     65 72 20 6F 
30b8e     66 20 61 20 
30b92     73 74 72 69 
30b96     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30b99     00          | 	byte	0
30b9a                 | LR__5517
30b9a     55 6E 6B 6E 
30b9e     6F 77 6E 20 
30ba2     65 72 72 6F 
30ba6     72 20 77 68 
30baa     69 6C 65 20 
30bae     63 6F 6D 70 
30bb2     75 74 69 6E 
30bb6     67 20 61 20 
30bba     70 6F 77 65 
30bbe     72 2E       | 	byte	"Unknown error while computing a power."
30bc0     00          | 	byte	0
30bc1                 | LR__5518
30bc1     52 69 67 68 
30bc5     74 20 70 61 
30bc9     72 65 6E 74 
30bcd     68 65 73 69 
30bd1     73 20 65 78 
30bd5     70 65 63 74 
30bd9     65 64 2E    | 	byte	"Right parenthesis expected."
30bdc     00          | 	byte	0
30bdd                 | LR__5519
30bdd     45 78 70 65 
30be1     63 74 65 64 
30be5     20 73 74 72 
30be9     69 6E 67 2E | 	byte	"Expected string."
30bed     00          | 	byte	0
30bee                 | LR__5520
30bee     45 78 70 65 
30bf2     63 74 65 64 
30bf6     20 66 6C 6F 
30bfa     61 74 2E    | 	byte	"Expected float."
30bfd     00          | 	byte	0
30bfe                 | LR__5521
30bfe     45 78 70 65 
30c02     63 74 65 64 
30c06     20 75 6E 73 
30c0a     69 67 6E 65 
30c0e     64 20 69 6E 
30c12     74 65 67 65 
30c16     72 2E       | 	byte	"Expected unsigned integer."
30c18     00          | 	byte	0
30c19                 | LR__5522
30c19     45 78 70 65 
30c1d     63 74 65 64 
30c21     20 69 6E 74 
30c25     65 67 65 72 
30c29     2E          | 	byte	"Expected integer."
30c2a     00          | 	byte	0
30c2b                 | LR__5523
30c2b     4E 6F 20 6D 
30c2f     6F 72 65 20 
30c33     76 61 72 69 
30c37     61 62 6C 65 
30c3b     20 73 6C 6F 
30c3f     74 73 2E    | 	byte	"No more variable slots."
30c42     00          | 	byte	0
30c43                 | LR__5524
30c43     56 61 72 69 
30c47     61 62 6C 65 
30c4b     20 6E 6F 74 
30c4f     20 66 6F 75 
30c53     6E 64 2E    | 	byte	"Variable not found."
30c56     00          | 	byte	0
30c57                 | LR__5525
30c57     43 6F 6D 6D 
30c5b     61 20 65 78 
30c5f     70 65 63 74 
30c63     65 64 2E    | 	byte	"Comma expected."
30c66     00          | 	byte	0
30c67                 | LR__5526
30c67     43 6F 6D 6D 
30c6b     61 20 6F 72 
30c6f     20 73 65 6D 
30c73     69 63 6F 6C 
30c77     6F 6E 20 65 
30c7b     78 70 65 63 
30c7f     74 65 64 2E | 	byte	"Comma or semicolon expected."
30c83     00          | 	byte	0
30c84                 | LR__5527
30c84     55 6E 6B 6E 
30c88     6F 77 6E 20 
30c8c     63 6F 6D 6D 
30c90     61 6E 64 2E | 	byte	"Unknown command."
30c94     00          | 	byte	0
30c95                 | LR__5528
30c95     53 74 61 63 
30c99     6B 20 75 6E 
30c9d     64 65 72 66 
30ca1     6C 6F 77 2E | 	byte	"Stack underflow."
30ca5     00          | 	byte	0
30ca6                 | LR__5529
30ca6     43 61 6E 6E 
30caa     6F 74 20 65 
30cae     78 65 63 75 
30cb2     74 65 20 67 
30cb6     6F 74 6F 20 
30cba     6F 72 20 67 
30cbe     6F 73 75 62 
30cc2     20 69 6E 20 
30cc6     74 68 65 20 
30cca     69 6D 6D 65 
30cce     64 69 61 74 
30cd2     65 20 6D 6F 
30cd6     64 65 2E    | 	byte	"Cannot execute goto or gosub in the immediate mode."
30cd9     00          | 	byte	0
30cda                 | LR__5530
30cda     43 61 6E 6E 
30cde     6F 74 20 6C 
30ce2     6F 61 64 20 
30ce6     66 72 6F 6D 
30cea     20 74 68 69 
30cee     73 20 66 69 
30cf2     6C 65 2E    | 	byte	"Cannot load from this file."
30cf5     00          | 	byte	0
30cf6                 | LR__5531
30cf6     54 68 65 20 
30cfa     70 72 6F 67 
30cfe     72 61 6D 20 
30d02     69 73 20 65 
30d06     6D 70 74 79 
30d0a     2E          | 	byte	"The program is empty."
30d0b     00          | 	byte	0
30d0c                 | LR__5532
30d0c     49 66 20 61 
30d10     66 74 65 72 
30d14     20 69 66 2E | 	byte	"If after if."
30d18     00          | 	byte	0
30d19                 | LR__5533
30d19     45 6D 70 74 
30d1d     79 20 65 78 
30d21     70 72 65 73 
30d25     73 69 6F 6E 
30d29     2E          | 	byte	"Empty expression."
30d2a     00          | 	byte	0
30d2b                 | LR__5534
30d2b     53 74 72 69 
30d2f     6E 67 20 65 
30d33     78 70 65 63 
30d37     74 65 64 2E | 	byte	"String expected."
30d3b     00          | 	byte	0
30d3c                 | LR__5535
30d3c     49 6E 74 65 
30d40     72 70 72 65 
30d44     74 65 72 20 
30d48     69 6E 74 65 
30d4c     72 6E 61 6C 
30d50     20 65 72 72 
30d54     6F 72 2E    | 	byte	"Interpreter internal error."
30d57     00          | 	byte	0
30d58                 | LR__5536
30d58     45 78 70 65 
30d5c     63 74 65 64 
30d60     20 61 73 73 
30d64     69 67 6E 2E | 	byte	"Expected assign."
30d68     00          | 	byte	0
30d69                 | LR__5537
30d69     45 78 70 65 
30d6d     63 74 65 64 
30d71     20 27 74 6F 
30d75     27 2E       | 	byte	"Expected 'to'."
30d77     00          | 	byte	0
30d78                 | LR__5538
30d78     45 78 70 65 
30d7c     63 74 65 64 
30d80     20 69 6E 74 
30d84     65 67 65 72 
30d88     20 76 61 72 
30d8c     69 61 62 6C 
30d90     65 2E       | 	byte	"Expected integer variable."
30d92     00          | 	byte	0
30d93                 | LR__5539
30d93     55 6E 69 6E 
30d97     69 74 69 61 
30d9b     6C 69 7A 65 
30d9f     64 20 76 61 
30da3     72 69 61 62 
30da7     6C 65 20 69 
30dab     6E 20 27 6E 
30daf     65 78 74 27 
30db3     2C 20 75 73 
30db7     65 20 27 66 
30dbb     6F 72 27 20 
30dbf     62 65 66 6F 
30dc3     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30dc6     00          | 	byte	0
30dc7                 | LR__5540
30dc7     4E 6F 20 6D 
30dcb     6F 72 65 20 
30dcf     73 6C 6F 74 
30dd3     73 20 66 6F 
30dd7     72 20 27 66 
30ddb     6F 72 27 2E | 	byte	"No more slots for 'for'."
30ddf     00          | 	byte	0
30de0                 | LR__5541
30de0     27 4E 65 78 
30de4     74 27 20 64 
30de8     6F 65 73 6E 
30dec     27 74 20 6D 
30df0     61 74 63 68 
30df4     20 27 66 6F 
30df8     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30dfb     00          | 	byte	0
30dfc                 | LR__5542
30dfc     27 47 6F 74 
30e00     6F 27 20 74 
30e04     61 72 67 65 
30e08     74 20 6C 69 
30e0c     6E 65 20 6E 
30e10     6F 74 20 66 
30e14     6F 75 6E 64 
30e18     2E          | 	byte	"'Goto' target line not found."
30e19     00          | 	byte	0
30e1a                 | LR__5543
30e1a     42 61 64 20 
30e1e     6E 75 6D 62 
30e22     65 72 20 6F 
30e26     66 20 70 61 
30e2a     72 61 6D 65 
30e2e     74 65 72 73 | 	byte	"Bad number of parameters"
30e32     00          | 	byte	0
30e33                 | LR__5544
30e33     46 75 6E 63 
30e37     74 69 6F 6E 
30e3b     20 75 6E 64 
30e3f     65 66 69 6E 
30e43     65 64 20 66 
30e47     6F 72 20 73 
30e4b     74 72 69 6E 
30e4f     67 73       | 	byte	"Function undefined for strings"
30e51     00          | 	byte	0
30e52                 | LR__5545
30e52     42 61 64 20 
30e56     70 61 72 61 
30e5a     6D 65 74 65 
30e5e     72 2E       | 	byte	"Bad parameter."
30e60     00          | 	byte	0
30e61                 | LR__5546
30e61     43 61 6E 6E 
30e65     6F 74 20 64 
30e69     65 63 6C 61 
30e6d     72 65 20 61 
30e71     6E 20 61 72 
30e75     72 61 79 3A 
30e79     20 74 68 65 
30e7d     20 76 61 72 
30e81     69 61 62 6C 
30e85     65 20 65 78 
30e89     69 73 74 73 
30e8d     2E          | 	byte	"Cannot declare an array: the variable exists."
30e8e     00          | 	byte	0
30e8f                 | LR__5547
30e8f     45 78 70 65 
30e93     63 74 65 64 
30e97     20 27 28 27 
30e9b     2E          | 	byte	"Expected '('."
30e9c     00          | 	byte	0
30e9d                 | LR__5548
30e9d     45 78 70 65 
30ea1     63 74 65 64 
30ea5     20 27 29 27 
30ea9     20 6F 72 20 
30ead     27 2C 27 2E | 	byte	"Expected ')' or ','."
30eb1     00          | 	byte	0
30eb2                 | LR__5549
30eb2     4E 6F 20 6D 
30eb6     6F 72 65 20 
30eba     74 68 61 6E 
30ebe     20 33 20 64 
30ec2     69 6D 65 6E 
30ec6     73 69 6F 6E 
30eca     73 20 73 75 
30ece     70 70 6F 72 
30ed2     74 65 64    | 	byte	"No more than 3 dimensions supported"
30ed5     00          | 	byte	0
30ed6                 | LR__5550
30ed6     56 61 72 69 
30eda     61 62 6C 65 
30ede     20 6E 61 6D 
30ee2     65 20 65 78 
30ee6     70 65 63 74 
30eea     65 64       | 	byte	"Variable name expected"
30eec     00          | 	byte	0
30eed                 | LR__5551
30eed     54 79 70 65 
30ef1     20 6E 61 6D 
30ef5     65 20 65 78 
30ef9     70 65 63 74 
30efd     65 64       | 	byte	"Type name expected"
30eff     00          | 	byte	0
30f00                 | LR__5552
30f00     54 79 70 65 
30f04     20 6E 6F 74 
30f08     20 73 75 70 
30f0c     70 6F 72 74 
30f10     65 64 20 79 
30f14     65 74       | 	byte	"Type not supported yet"
30f16     00          | 	byte	0
30f17                 | LR__5553
30f17     41 72 72 61 
30f1b     79 20 69 6E 
30f1f     64 65 78 20 
30f23     6F 75 74 20 
30f27     6F 66 20 72 
30f2b     61 6E 67 65 | 	byte	"Array index out of range"
30f2f     00          | 	byte	0
30f30                 | LR__5554
30f30     42 61 64 20 
30f34     74 79 70 65 
30f38     20 77 68 69 
30f3c     6C 65 20 61 
30f40     73 73 69 67 
30f44     6E 69 6E 67 
30f48     20 74 6F 20 
30f4c     61 72 72 61 
30f50     79          | 	byte	"Bad type while assigning to array"
30f51     00          | 	byte	0
30f52                 | LR__5555
30f52     54 6F 6F 20 
30f56     6D 61 6E 79 
30f5a     20 76 61 72 
30f5e     69 61 62 6C 
30f62     65 73       | 	byte	"Too many variables"
30f64     00          | 	byte	0
30f65                 | LR__5556
30f65     27 54 68 65 
30f69     6E 27 20 65 
30f6d     78 70 65 63 
30f71     74 65 64    | 	byte	"'Then' expected"
30f74     00          | 	byte	0
30f75                 | LR__5557
30f75     45 72 72 6F 
30f79     72 20       | 	byte	"Error "
30f7b     00          | 	byte	0
30f7c                 | LR__5558
30f7c     3A 20       | 	byte	": "
30f7e     00          | 	byte	0
30f7f                 | LR__5559
30f7f     2F 73 64    | 	byte	"/sd"
30f82     00          | 	byte	0
30f83                 | LR__5560
30f83     2F 73 64 2F 
30f87     62 61 73    | 	byte	"/sd/bas"
30f8a     00          | 	byte	0
30f8b                 | LR__5561
30f8b     2F 73 64 2F 
30f8f     62 61 73    | 	byte	"/sd/bas"
30f92     00          | 	byte	0
30f93                 | LR__5562
30f93     20 42 41 53 
30f97     49 43 20 62 
30f9b     79 74 65 73 
30f9f     20 66 72 65 
30fa3     65          | 	byte	" BASIC bytes free"
30fa4     00          | 	byte	0
30fa5                 | LR__5563
30fa5     52 65 61 64 
30fa9     79          | 	byte	"Ready"
30faa     00          | 	byte	0
30fab                 | LR__5564
30fab     6E 6F 6E 61 
30faf     6D 65 2E 62 
30fb3     61 73       | 	byte	"noname.bas"
30fb5     00          | 	byte	0
30fb6                 | LR__5565
30fb6                 | 	byte	
30fb6     00          | 	byte	0
30fb7     00          | 	alignl
30fb8                 | _dat_
30fb8     00 00 00 00 
30fbc     00 00 00 00 
30fc0     00 00 00 00 
30fc4     00 00 00 00 | 	byte	$00[16]
30fc8     61 41 17 0E 
30fcc     62 42 00 00 
30fd0     63 43 19 10 
30fd4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
30fd8     65 45 18 0F 
30fdc     66 46 00 00 
30fe0     67 47 00 00 
30fe4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
30fe8     69 49 00 00 
30fec     6A 4A 00 00 
30ff0     6B 4B 00 00 
30ff4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
30ff8     6D 4D 00 00 
30ffc     6E 4E 1A 11 
31000     6F 4F 1E 15 
31004     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
31008     71 51 00 00 
3100c     72 52 00 00 
31010     73 53 1B 12 
31014     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
31018     75 55 00 00 
3101c     76 56 00 00 
31020     77 57 00 00 
31024     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
31028     79 59 00 00 
3102c     7A 5A 1D 14 
31030     31 21 04 00 
31034     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
31038     33 23 06 00 
3103c     34 24 07 00 
31040     35 25 08 00 
31044     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
31048     37 26 0A 00 
3104c     38 2A 0B 00 
31050     39 28 0C 00 
31054     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
31058     8D 8D 00 00 
3105c     9B 9B 00 00 
31060     88 88 00 00 
31064     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
31068     20 20 00 00 
3106c     2D 5F 00 00 
31070     3D 2B 00 00 
31074     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
31078     5D 7D 00 00 
3107c     5C 7C 00 00 
31080     23 7E 00 00 
31084     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
31088     27 22 00 00 
3108c     60 7E 03 00 
31090     2C 3C 00 00 
31094     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
31098     2F 3F 00 00 
3109c     B9 B9 00 00 
310a0     BA 00 00 00 
310a4     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
310a8     BC 00 00 00 
310ac     BD 00 00 00 
310b0     BE 00 00 00 
310b4     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
310b8     C0 00 00 00 
310bc     C1 00 00 00 
310c0     C2 00 00 00 
310c4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
310c8     C4 00 00 00 
310cc     C5 00 00 00 
310d0     C6 00 00 00 
310d4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
310d8     C8 00 00 00 
310dc     C9 00 00 00 
310e0     CA 00 00 00 
310e4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
310e8     7F 7F 00 00 
310ec     CC 00 00 00 
310f0     CD 00 00 00 
310f4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
310f8     CF 00 00 00 
310fc     D0 00 00 00 
31100     D1 00 00 00 
31104     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
31108     2F 2F 00 00 
3110c     2A 2A 00 00 
31110     2D 2D 00 00 
31114     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
31118     8D 8D 00 00 
3111c     31 31 00 00 
31120     32 32 00 00 
31124     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
31128     34 34 00 00 
3112c     35 35 00 00 
31130     36 36 00 00 
31134     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
31138     38 38 00 00 
3113c     39 39 00 00 
31140     30 30 00 00 
31144     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
31148     5C 7C 00 00 
3114c     00 00 00 00 
31150     00 00 00 00 
31154     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
31158     00 00 00 00 
      ...             
311b0     00 00 00 00 
311b4     00 00 00 00 | 	byte	$00[96]
311b8     2B 00 A6 F2 
311bc     24 A7 09 80 
311c0     5B 88 4D 89 
311c4     80 88 A5 88 | atari_spl file "atari.spl"
311c8     6D 88 B8 88 
311cc     80 88 CB 88 
311d0     92 88 A5 88 
311d4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
311d8     A5 88 CA 88 
311dc     A6 88 DD 88 
311e0     B8 88 AB 89 
311e4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
311e8     C8 AD C6 F1 
311ec     91 06 B6 FF 
311f0     13 00 4A 00 
311f4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
311f8     5D 00 5E 00 
311fc     5D 00 5E 00 
31200     5E 00 5D 00 
31204     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
31208     38 00 83 00 
3120c     25 00 83 00 
31210     C3 FE D1 04 
31214     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
31218     48 88 38 85 
3121c     41 8A CB 88 
31220     28 89 B8 88 
31224     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
31228     15 89 03 89 
3122c     02 89 15 89 
31230     16 89 15 89 
31234     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
31238     15 89 3A 89 
3123c     72 89 E3 89 
31240     52 83 AD 97 
31244     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
31248     0C 02 B6 FF 
3124c     E1 00 A8 00 
31250     F3 00 A8 00 
31254     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
31258     CE 00 CD 00 
3125c     CD 00 BA 00 
31260     E1 00 BB 00 
31264     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
31268     DF 00 C9 FF 
3126c     E6 01 B6 06 
31270     EE DD 8D 98 
31274     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
31278     97 89 73 89 
3127c     3B 89 60 89 
31280     60 89 60 89 
31284     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
31288     73 89 72 89 
3128c     85 89 73 89 
31290     AA 89 60 89 
31294     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
31298     E8 8A 18 86 
3129c     92 88 A5 C2 
312a0     E0 00 C3 05 
312a4     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
312a8     F2 00 64 01 
312ac     06 01 3E 01 
312b0     2B 01 2B 01 
312b4     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
312b8     2B 01 2A 01 
312bc     2B 01 2B 01 
312c0     2B 01 18 01 
312c4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
312c8     39 07 61 F3 
312cc     C0 AF 37 85 
312d0     0F 88 8B 8A 
312d4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
312d8     AB 89 D0 89 
312dc     AB 89 D0 89 
312e0     D0 89 CF 89 
312e4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
312e8     D0 89 F5 89 
312ec     BD 89 08 8A 
312f0     CF 89 E8 8A 
312f4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
312f8     53 B3 0D F8 
312fc     F4 07 38 00 
31300     63 01 63 01 
31304     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
31308     88 01 88 01 
3130c     76 01 88 01 
31310     88 01 89 01 
31314     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
31318     75 01 AE 01 
3131c     76 01 88 01 
31320     4A 00 46 06 
31324     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
31328     08 8A 9A 86 
3132c     33 8B 08 8A 
31330     2D 8A F5 89 
31334     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
31338     2D 8A 2D 8A 
3133c     2E 8A 1B 8A 
31340     40 8A 2D 8A 
31344     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
31348     2E 8A 79 8A 
3134c     66 8A C8 8B 
31350     72 82 2B 97 
31354     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
31358     1D 02 05 01 
3135c     F8 01 C0 01 
31360     0B 02 C0 01 
31364     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
31368     F9 01 D3 01 
3136c     F8 01 D3 01 
31370     F8 01 D2 01 
31374     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
31378     E6 01 2B 01 
3137c     8E 02 5F 07 
31380     F7 E2 ED 9C 
31384     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
31388     E8 8A 78 8A 
3138c     78 8A 65 8A 
31390     8B 8A 78 8A 
31394     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
31398     8B 8A 9D 8A 
3139c     9D 8A 8B 8A 
313a0     C2 8A 78 8A 
313a4     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
313a8     70 8C 18 86 
313ac     8B 8A 23 C9 
313b0     CB 03 C4 05 
313b4     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
313b8     0B 02 7B 02 
313bc     1E 02 55 02 
313c0     30 02 43 02 
313c4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
313c8     43 02 44 02 
313cc     43 02 30 02 
313d0     68 02 31 02 
313d4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
313d8     07 08 3F F7 
313dc     73 B2 13 85 
313e0     15 89 ED 8B 
313e4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
313e8     B0 8A FB 8A 
313ec     D5 8A FA 8A 
313f0     E8 8A FB 8A 
313f4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
313f8     E8 8A 21 8B 
313fc     E7 8A 33 8B 
31400     E8 8A 26 8C 
31404     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
31408     8D B0 27 F6 
3140c     9C 08 AD 01 
31410     7B 02 8D 02 
31414     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
31418     A1 02 A0 02 
3141c     A1 02 A0 02 
31420     A0 02 A0 02 
31424     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
31428     7B 02 D8 02 
3142c     7B 02 C6 02 
31430     3E 01 C3 05 
31434     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
31438     00 8C 2A 86 
3143c     E0 8C FA 8A 
31440     6A 8B FB 8A 
31444     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
31448     45 8B 45 8B 
3144c     45 8B 6B 8B 
31450     46 8B 59 8B 
31454     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
31458     6B 8B 6B 8B 
3145c     6B 8B 6B 8B 
31460     7D 8B 7D 8B 
31464     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
31468     90 8B 91 8B 
3146c     90 8B 90 8B 
31470     A3 8B A3 8B 
31474     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
31478     B5 8B B6 8B 
3147c     B5 8B B5 8B 
31480     B6 8B C8 8B 
31484     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
31488     C8 8B DA 8B 
3148c     DB 8B DB 8B 
31490     DB 8B DC 8B 
31494     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
31498     EE 8B EE 8B 
3149c     00 8C 01 8C 
314a0     00 8C 01 8C 
314a4     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
314a8     12 8C 13 8C 
314ac     13 8C 26 8C 
314b0     26 8C 26 8C 
314b4     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
314b8     38 8C 38 8C 
314bc     38 8C 38 8C 
314c0     4B 8C 4B 8C 
314c4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
314c8     5E 8C 5E 8C 
314cc     5E 8C 5E 8C 
314d0     70 8C 70 8C 
314d4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
314d8     70 8C 83 8C 
314dc     83 8C 83 8C 
314e0     83 8C 96 8C 
314e4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
314e8     95 8C A9 8C 
314ec     A9 8C A8 8C 
314f0     A8 8C A8 8C 
314f4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
314f8     BB 8C BB 8C 
314fc     BB 8C CE 8C 
31500     CE 8C CE 8C 
31504     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
31508     E0 8C E1 8C 
3150c     E1 8C E0 8C 
31510     F4 8C F2 8C 
31514     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
31518     05 8D 05 8D 
3151c     06 8D 06 8D 
31520     19 8D 19 8D 
31524     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
31528     18 8D 2B 8D 
3152c     2B 8D 2B 8D 
31530     2A 8D 3E 8D 
31534     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
31538     3E 8D 51 8D 
3153c     50 8D 50 8D 
31540     50 8D 51 8D 
31544     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
31548     63 8D 64 8D 
3154c     76 8D 75 8D 
31550     75 8D 76 8D 
31554     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
31558     88 8D 88 8D 
3155c     89 8D 9B 8D 
31560     9A 8D 9B 8D 
31564     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
31568     AD 8D AE 8D 
3156c     AD 8D AE 8D 
31570     C1 8D C1 8D 
31574     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
31578     D3 8D D3 8D 
3157c     D3 8D D3 8D 
31580     D3 8D E6 8D 
31584     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
31588     E6 8D E6 8D 
3158c     F9 8D F9 8D 
31590     F9 8D F8 8D 
31594     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
31598     0B 8E 0B 8E 
3159c     1D 8E 1D 8E 
315a0     1E 8E 1E 8E 
315a4     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
315a8     31 8E 31 8E 
315ac     31 8E 42 8E 
315b0     43 8E 43 8E 
315b4     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
315b8     56 8E 56 8E 
315bc     55 8E 56 8E 
315c0     68 8E 69 8E 
315c4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
315c8     69 8E 7B 8E 
315cc     7C 8E 7B 8E 
315d0     7B 8E 8D 8E 
315d4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
315d8     8D 8E A1 8E 
315dc     A0 8E A1 8E 
315e0     A1 8E A0 8E 
315e4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
315e8     B3 8E B3 8E 
315ec     C6 8E C5 8E 
315f0     C6 8E C6 8E 
315f4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
315f8     D8 8E D9 8E 
315fc     D8 8E EC 8E 
31600     EB 8E EC 8E 
31604     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
31608     FE 8E FE 8E 
3160c     FE 8E FE 8E 
31610     10 8F 10 8F 
31614     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
31618     11 8F 23 8F 
3161c     24 8F 23 8F 
31620     24 8F 37 8F 
31624     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
31628     36 8F 36 8F 
3162c     48 8F 49 8F 
31630     49 8F 49 8F 
31634     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
31638     5B 8F 5C 8F 
3163c     5B 8F 6E 8F 
31640     6E 8F 6E 8F 
31644     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
31648     81 8F 81 8F 
3164c     81 8F 81 8F 
31650     93 8F 93 8F 
31654     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
31658     93 8F A6 8F 
3165c     A6 8F A6 8F 
31660     A6 8F B9 8F 
31664     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
31668     B9 8F B9 8F 
3166c     CC 8F CB 8F 
31670     CB 8F CC 8F 
31674     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
31678     DF 8F DE 8F 
3167c     DE 8F F1 8F 
31680     F1 8F F1 8F 
31684     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
31688     03 90 04 90 
3168c     04 90 04 90 
31690     16 90 17 90 
31694     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
31698     29 90 28 90 
3169c     29 90 28 90 
316a0     29 90 3C 90 
316a4     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
316a8     3C 90 4F 90 
316ac     4E 90 4E 90 
316b0     4E 90 4E 90 
316b4     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
316b8     61 90 61 90 
316bc     73 90 74 90 
316c0     74 90 74 90 
316c4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
316c8     87 90 86 90 
316cc     87 90 86 90 
316d0     99 90 99 90 
316d4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
316d8     AB 90 AB 90 
316dc     AC 90 AB 90 
316e0     AB 90 BF 90 
316e4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
316e8     BE 90 D1 90 
316ec     D0 90 D1 90 
316f0     D1 90 D1 90 
316f4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
316f8     E3 90 E4 90 
316fc     F6 90 F6 90 
31700     F6 90 F6 90 
31704     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
31708     09 91 0A 91 
3170c     0A 91 1C 91 
31710     1C 91 1C 91 
31714     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
31718     2F 91 2E 91 
3171c     2F 91 2F 91 
31720     2E 91 41 91 
31724     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
31728     41 91 53 91 
3172c     54 91 54 91 
31730     53 91 54 91 
31734     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
31738     67 91 67 91 
3173c     79 91 7A 91 
31740     79 91 78 91 
31744     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
31748     8C 91 8B 91 
3174c     8C 91 8C 91 
31750     9E 91 9E 91 
31754     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
31758     B1 91 B1 91 
3175c     B2 91 B1 91 
31760     B1 91 C4 91 
31764     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
31768     C4 91 D6 91 
3176c     D7 91 D7 91 
31770     D7 91 D6 91 
31774     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
31778     EA 91 EA 91 
3177c     EA 91 FC 91 
31780     FC 91 FB 91 
31784     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
31788     0E 92 0F 92 
3178c     0F 92 0E 92 
31790     21 92 21 92 
31794     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
31798     21 92 34 92 
3179c     33 92 34 92 
317a0     34 92 47 92 
317a4     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
317a8     46 92 47 92 
317ac     59 92 59 92 
317b0     59 92 59 92 
317b4     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
317b8     6C 92 6C 92 
317bc     6B 92 7E 92 
317c0     7E 92 7E 92 
317c4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
317c8     92 92 91 92 
317cc     91 92 90 92 
317d0     91 92 A4 92 
317d4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
317d8     A3 92 B6 92 
317dc     B6 92 B7 92 
317e0     B7 92 B6 92 
317e4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
317e8     CA 92 C9 92 
317ec     CA 92 DC 92 
317f0     DC 92 DC 92 
317f4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
317f8     EF 92 EF 92 
317fc     EF 92 EF 92 
31800     01 93 01 93 
31804     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
31808     15 93 14 93 
3180c     14 93 14 93 
31810     14 93 27 93 
31814     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
31818     27 93 39 93 
3181c     3A 93 39 93 
31820     39 93 39 93 
31824     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
31828     4B 93 4C 93 
3182c     5F 93 5F 93 
31830     5F 93 5E 93 
31834     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
31838     5F 93 84 93 
3183c     4C 93 96 93 
31840     5F 93 AE 94 
31844     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
31848     7B C1 00 00 
3184c     00 00 00 00 
31850     00 00 00 00 
31854     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31858     00 00 00 00 | 	byte	$00, $00, $00, $00
3185c     7A D7 00 80 
31860     87 8A 48 8F 
31864     EC 8C 76 8D 
31868     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
3186c     3C 8D 82 8D 
31870     42 8D 88 8D 
31874     8C 8D 8E 8D 
31878     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
3187c     97 8D DE 8D 
31880     E1 8D F1 8E 
31884     D8 8C A3 83 
31888     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
3188c     65 71 C9 65 
31890     FC 64 C4 65 
31894     C1 65 BF 65 
31898     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
3189c     B6 65 B4 65 
318a0     B2 65 AE 65 
318a4     AC 65 ED 65 
318a8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
318ac     5E 65 25 66 
318b0     FA 62 23 6B 
318b4     B5 6C 61 0A 
318b8     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
318bc     5D 90 BE 8D 
318c0     47 8E C3 8D 
318c4     09 8E C9 8D 
318c8     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
318cc     15 8E 19 8E 
318d0     1B 8E 62 8E 
318d4     64 8E 68 8E 
318d8     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
318dc     B5 8E 4C 90 
318e0     FA 84 3C 9D 
318e4     98 13 79 6D 
318e8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
318ec     D9 66 50 66 
318f0     D4 66 4B 66 
318f4     8C 66 46 66 
318f8     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
318fc     81 66 3A 66 
31900     7C 66 36 66 
31904     76 66 30 66 
31908     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
3190c     6B 66 88 72 
31910     BF 37 E7 B7 
31914     75 83 8B 8E 
31918     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
3191c     94 8E 96 8E 
31920     DD 8E 9C 8E 
31924     E2 8E A2 8E 
31928     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
3192c     EE 8E AE 8E 
31930     38 8F B5 8E 
31934     3F 8F FD 8E 
31938     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
3193c     A5 87 1E E3 
31940     6D 5D FA 71 
31944     41 64 25 67 
31948     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
3194c     D9 66 1A 67 
31950     18 67 15 67 
31954     12 67 0F 67 
31958     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
3195c     07 67 C0 66 
31960     01 67 BC 66 
31964     B8 66 DE 64 
31968     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
3196c     43 E5 1F 8B 
31970     14 8A F1 90 
31974     1C 8F 63 8F 
31978     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
3197c     29 8F 6E 8F 
31980     72 8F 75 8F 
31984     34 8F BE 8F 
31988     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
3198c     84 8F 87 8F 
31990     CC 8F 56 90 
31994     67 91 49 80 
31998     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
3199c     46 77 A6 66 
319a0     E8 66 B0 67 
319a4     AD 67 ED 67 
319a8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
319ac     A2 67 E3 67 
319b0     9D 67 9A 67 
319b4     98 67 94 67 
319b8     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
319bc     49 67 CD 67 
319c0     28 65 5F 6E 
319c4     82 67 3A 01 
319c8     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
319cc     C2 91 A9 8F 
319d0     EF 8F AE 8F 
319d4     F4 8F B5 8F 
319d8     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
319dc     01 90 03 90 
319e0     07 90 09 90 
319e4     0C 90 53 90 
319e8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
319ec     18 90 44 93 
319f0     85 84 D6 9D 
319f4     87 1F 2F 75 
319f8     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
319fc     C4 68 F6 67 
31a00     BE 68 F1 67 
31a04     76 68 2E 68 
31a08     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31a0c     27 68 24 68 
31a10     64 68 1E 68 
31a14     5F 68 19 68 
31a18     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31a1c     DC 68 56 72 
31a20     7E 36 C2 B8 
31a24     D7 84 73 90 
31a28     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31a2c     7B 90 7F 90 
31a30     82 90 84 90 
31a34     CB 90 8B 90 
31a38     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31a3c     D7 90 96 90 
31a40     20 91 59 90 
31a44     25 91 A2 90 
31a48     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31a4c     D0 89 40 EE 
31a50     12 64 C4 71 
31a54     29 66 0C 69 
31a58     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31a5c     C0 68 02 69 
31a60     FE 68 FB 68 
31a64     F9 68 F6 68 
31a68     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31a6c     EE 68 A8 68 
31a70     2C 69 5F 68 
31a74     E2 68 81 66 
31a78     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31a7c     1E EB A6 8A 
31a80     73 8B 5E 93 
31a84     7B 90 48 91 
31a88     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31a8c     0D 91 11 91 
31a90     14 91 16 91 
31a94     5C 91 1C 91 
31a98     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31a9c     68 91 AF 91 
31aa0     2A 91 B5 91 
31aa4     75 91 1A 94 
31aa8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31aac     70 0E CB 6C 
31ab0     5D 6E C4 67 
31ab4     99 69 54 69 
31ab8     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31abc     D2 69 49 69 
31ac0     89 69 86 69 
31ac4     40 69 C4 69 
31ac8     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31acc     35 69 76 69 
31ad0     58 67 EB 6D 
31ad4     E9 6D 89 0F 
31ad8     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31adc     33 94 94 91 
31ae0     D9 91 56 91 
31ae4     E0 91 9F 91 
31ae8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31aec     EC 91 EE 91 
31af0     F1 91 F4 91 
31af4     F7 91 3D 92 
31af8     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31afc     46 92 21 94 
31b00     11 89 A4 9D 
31b04     FD 0E 8F 6C 
31b08     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31b0c     28 6A E1 69 
31b10     65 6A 1F 6A 
31b14     5F 6A 1A 6A 
31b18     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31b1c     54 6A 0F 6A 
31b20     4F 6A 09 6A 
31b24     06 6A 03 6A 
31b28     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31b2c     23 68 69 77 
31b30     3A 4D 38 CA 
31b34     38 86 4E 91 
31b38     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31b3c     64 92 24 92 
31b40     6A 92 2A 92 
31b44     70 92 30 92 
31b48     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31b4c     7B 92 7E 92 
31b50     C5 92 84 92 
31b54     CB 92 8A 92 
31b58     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31b5c     4D 8D F9 E2 
31b60     97 59 FE 74 
31b64     DB 68 6D 6A 
31b68     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31b6c     A8 6A A5 6A 
31b70     A3 6A 9F 6A 
31b74     9D 6A 9B 6A 
31b78     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31b7c     D6 6A 8F 6A 
31b80     CF 6A 46 6A 
31b84     CA 6A E1 67 
31b88     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31b8c     D3 F7 15 92 
31b90     90 8C BF 94 
31b94     A6 92 EB 92 
31b98     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31b9c     B1 92 F7 92 
31ba0     FA 92 FD 92 
31ba4     00 93 02 93 
31ba8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31bac     4F 93 52 93 
31bb0     54 93 22 94 
31bb4     5A 93 8F 88 
31bb8     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31bbc     1C 77 07 6C 
31bc0     E8 69 7A 6B 
31bc4     34 6B 75 6B 
31bc8     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31bcc     29 6B 26 6B 
31bd0     24 6B 21 6B 
31bd4     1D 6B 5E 6B 
31bd8     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31bdc     12 6B 52 6B 
31be0     34 69 34 6E 
31be4     BA 73 A4 24 
31be8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31bec     7A 94 B3 93 
31bf0     72 93 31 93 
31bf4     78 93 7A 93 
31bf8     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31bfc     83 93 86 93 
31c00     89 93 D0 93 
31c04     D2 93 D5 93 
31c08     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31c0c     DD 93 40 96 
31c10     30 8B 99 9C 
31c14     52 10 94 71 
31c18     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31c1c     46 6C 79 6B 
31c20     40 6C B7 6B 
31c24     F7 6B B1 6B 
31c28     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31c2c     EC 6B A5 6B 
31c30     A2 6B 9F 6B 
31c34     9D 6B 9A 6B 
31c38     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31c3c     C8 6A E4 76 
31c40     20 4B F9 CE 
31c44     2E 8A 1A 92 
31c48     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31c4c     FB 93 BA 93 
31c50     01 94 03 94 
31c54     4A 94 09 94 
31c58     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31c5c     55 94 14 94 
31c60     9E 94 1A 94 
31c64     61 94 20 94 
31c68     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31c6c     3E 87 E5 CD 
31c70     5F 50 6C 78 
31c74     B5 6A 04 6C 
31c78     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31c7c     83 6C 7F 6C 
31c80     7C 6C 36 6C 
31c84     76 6C 74 6C 
31c88     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31c8c     6B 6C 25 6C 
31c90     66 6C 1F 6C 
31c94     1D 6C 41 6A 
31c98     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31c9c     BA FA FC 94 
31ca0     5B 8D 97 96 
31ca4     3B 94 C5 94 
31ca8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31cac     89 94 8C 94 
31cb0     8F 94 92 94 
31cb4     94 94 DB 94 
31cb8     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31cbc     E4 94 E7 94 
31cc0     2D 95 74 95 
31cc4     C8 96 15 89 
31cc8     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31ccc     CB 75 31 6F 
31cd0     7E 6B 10 6D 
31cd4     C9 6C 0A 6D 
31cd8     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31cdc     BD 6C FF 6C 
31ce0     FB 6C F9 6C 
31ce4     B2 6C F3 6C 
31ce8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31cec     A7 6C E8 6C 
31cf0     0D 6B 85 6F 
31cf4     C7 74 10 28 
31cf8     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31cfc     96 96 47 95 
31d00     06 95 0A 95 
31d04     0C 95 0F 95 
31d08     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31d0c     17 95 5E 95 
31d10     61 95 63 95 
31d14     22 95 AC 95 
31d18     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31d1c     72 95 17 98 
31d20     59 8E 01 96 
31d24     CF FC 5A 68 
31d28     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31d2c     96 6D 50 6D 
31d30     D5 6D 4A 6D 
31d34     8C 6D 89 6D 
31d38     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31d3c     80 6D 3A 6D 
31d40     7A 6D 77 6D 
31d44     75 6D 71 6D 
31d48     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31d4c     18 6C BC 78 
31d50     9A 4F 7E CF 
31d54     1F 89 F1 93 
31d58     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31d5c     D2 95 4E 95 
31d60     D7 95 53 95 
31d64     DD 95 E0 95 
31d68     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31d6c     A5 95 EB 95 
31d70     EE 95 F0 95 
31d74     37 96 B3 95 
31d78     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31d7c     1A 98 D5 8D 
31d80     C5 9F CD 0F 
31d84     0F 71 F3 73 
31d88     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31d8c     D9 6D 5E 6E 
31d90     D3 6D 58 6E 
31d94     12 6E 0F 6E 
31d98     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31d9c     49 6E BF 6D 
31da0     87 6E 76 6D 
31da4     81 6E 11 6B 
31da8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31dac     3F 09 44 95 
31db0     E5 8D 3F 99 
31db4     D4 95 A2 96 
31db8     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31dbc     23 96 69 96 
31dc0     6B 96 6E 96 
31dc4     71 96 74 96 
31dc8     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31dcc     BF 96 3C 96 
31dd0     C6 96 C8 96 
31dd4     A3 98 51 8D 
31dd8     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31ddc     CF 75 29 73 
31de0     90 6C EC 6E 
31de4     62 6E E7 6E 
31de8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31dec     9A 6E 98 6E 
31df0     95 6E 91 6E 
31df4     8E 6E CF 6E 
31df8     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31dfc     40 6E C3 6E 
31e00     E8 6C 45 6F 
31e04     A5 7B C9 35 
31e08     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31e0c     2D 98 23 97 
31e10     E1 96 A0 96 
31e14     A4 96 EA 96 
31e18     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31e1c     AF 96 F4 96 
31e20     F8 96 3E 97 
31e24     FD 96 43 97 
31e28     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31e2c     08 97 6B 99 
31e30     D6 92 88 91 
31e34     D8 EE 84 66 
31e38     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31e3c     2E 6F E7 6E 
31e40     6C 6F 24 6F 
31e44     21 6F 1F 6F 
31e48     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31e4c     17 6F 13 6F 
31e50     54 6F 0E 6F 
31e54     0B 6F 4B 6F 
31e58     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31e5c     27 6D 1C 7B 
31e60     19 59 9F DB 
31e64     66 8E BC 94 
31e68     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31e6c     67 97 26 97 
31e70     6D 97 2B 97 
31e74     72 97 32 97 
31e78     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31e7c     C1 97 7F 97 
31e80     C6 97 85 97 
31e84     CB 97 CE 97 
31e88     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31e8c     EC 8A C4 C6 
31e90     68 4C F4 7D 
31e94     63 6E E8 6E 
31e98     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
31e9c     ED 6F A7 6F 
31ea0     E7 6F A0 6F 
31ea4     E1 6F 9B 6F 
31ea8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
31eac     D5 6F 8F 6F 
31eb0     CE 6F 45 6F 
31eb4     86 6F 68 6D 
31eb8     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
31ebc     C0 13 AD A2 
31ec0     A7 8E 79 99 
31ec4     E6 97 E8 97 
31ec8     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
31ecc     F1 97 F3 97 
31ed0     F6 97 F9 97 
31ed4     FB 97 FE 97 
31ed8     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
31edc     4A 98 0A 98 
31ee0     93 98 0F 98 
31ee4     7F 9B BF 8C 
31ee8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
31eec     91 7B 62 73 
31ef0     1A 6E B9 70 
31ef4     EB 6F B3 70 
31ef8     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
31efc     25 70 20 70 
31f00     1E 70 1B 70 
31f04     18 70 15 70 
31f08     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
31f0c     0D 70 09 70 
31f10     07 70 03 70 
31f14     01 70 FD 6F 
31f18     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
31f1c     F6 6F F2 6F 
31f20     EF 6F EC 6F 
31f24     2C 70 E6 6F 
31f28     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
31f2c     DD 6F 97 6F 
31f30     D7 6F 84 6E 
31f34     8F 6F 3F 7D 
31f38     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
31f3a     FF FF FF FF 
31f3e     FF FF       | atarist_spl file "atarist.spl" '512
31f40     00 00 00 00 
31f44     00 00 00 00 
31f48     00 00       | 	byte	$00[10]
31f4a     17 7F F2 7F 
31f4e     B2 7F 72 7F 
31f52     33 7F F4 7E 
31f56     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
31f5a     36 7E F5 7D 
31f5e     E9 51 F2 0D 
31f62     8E 00 F3 FD 
31f66     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
31f6a     57 FD 58 FD 
31f6e     5B FD 5C FD 
31f72     5C FD 60 7D 
31f76     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
31f7a     D6 7C 98 7C 
31f7e     59 7C 1A 7C 
31f82     DC 7B 9E 7B 
31f86     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
31f8a     F3 05 00 FD 
31f8e     41 FB EA FA 
31f92     D9 FA DB FA 
31f96     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
31f9a     E4 FA 9B 36 
31f9e     F8 7A C0 7A 
31fa2     84 7A 45 7A 
31fa6     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
31faa     8E 79 51 79 
31fae     15 79 D7 78 
31fb2     3C 1F EB FF 
31fb6     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
31fba     6D F8 65 F8 
31fbe     68 F8 6D F8 
31fc2     70 F8 74 F8 
31fc6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
31fca     AB 60 79 60 
31fce     4B 60 1A 60 
31fd2     E9 5F B9 5F 
31fd6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
31fda     FB 59 B2 0B 
31fde     92 FA 3A F7 
31fe2     96 F6 79 F6 
31fe6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
31fea     82 F6 86 F6 
31fee     8C F6 DB 5D 
31ff2     F1 5E C1 5E 
31ff6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
31ffa     34 5E 04 5E 
31ffe     D6 5D A6 5D 
32002     78 5D D4 3E 
32006     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3200a     27 F5 BA F4 
3200e     AB F4 AD F4 
32012     B2 F4 B8 F4 
32016     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3201a     26 5D 2B 5D 
3201e     FC 5C CD 5C 
32022     9F 5C 70 5C 
32026     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3202a     E5 5B B8 5B 
3202e     DB 24 A7 FC 
32032     D1 F4 4D F3 
32036     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3203a     04 F3 0B F3 
3203e     11 F3 16 F3 
32042     DE 18 98 5B 
32046     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3204a     4E 4A 29 48 
3204e     A0 47 6A 47 
32052     43 47 20 47 
32056     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3205a     E2 F6 98 F2 
3205e     C5 F1 A3 F1 
32062     A3 F1 A8 F1 
32066     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3206a     BF F1 00 3D 
3206e     EF 46 CD 46 
32072     AA 46 86 46 
32076     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3207a     1C 46 F9 45 
3207e     D7 45 EE 43 
32082     DE 02 E8 F3 
32086     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3208a     61 F0 65 F0 
3208e     6D F0 74 F0 
32092     7C F0 84 F0 
32096     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3209a     8E 45 6D 45 
3209e     49 45 27 45 
320a2     05 45 E1 44 
320a6     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
320aa     F1 2F A9 FB 
320ae     8B F1 9B EF 
320b2     40 EF 36 EF 
320b6     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
320ba     4D EF 56 EF 
320be     5E EF 7B 44 
320c2     8C 44 69 44 
320c6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
320ca     03 44 E1 43 
320ce     C0 43 F5 37 
320d2     69 33 0F 11 
320d6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
320da     66 EE 37 EE 
320de     38 EE 40 EE 
320e2     48 EE 51 EE 
320e6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
320ea     7D 32 6A 32 
320ee     51 32 37 32 
320f2     1F 32 05 32 
320f6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
320fa     B9 31 A1 31 
320fe     F1 04 F4 F1 
32102     50 EE A0 ED 
32106     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3210a     93 ED 9A ED 
3210e     A4 ED AD ED 
32112     F4 27 C1 31 
32116     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3211a     78 31 5F 31 
3211e     46 31 2E 31 
32122     15 31 FC 30 
32126     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3212a     C4 EF 4A ED 
3212e     DC EC CB EC 
32132     D2 EC DA EC 
32136     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3213a     F9 EC 64 2F 
3213e     0A 31 F1 30 
32142     D9 30 C0 30 
32146     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3214a     78 30 5F 30 
3214e     46 30 38 23 
32152     A6 F6 19 EE 
32156     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3215a     20 EC 28 EC 
3215e     32 EC 3C EC 
32162     47 EC 51 EC 
32166     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3216a     A3 22 93 22 
3216e     7F 22 6E 22 
32172     5D 22 4C 22 
32176     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3217a     77 09 76 F1 
3217e     CC EC F0 EB 
32182     CD EB CE EB 
32186     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3218a     ED EB F5 EB 
3218e     3E F6 6B 22 
32192     5F 22 4E 22 
32196     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3219a     1B 22 0B 22 
3219e     FA 21 E9 21 
321a2     D8 21 4D FF 
321a6     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
321aa     92 EB 7B EB 
321ae     82 EB 8C EB 
321b2     97 EB A1 EB 
321b6     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
321ba     15 22 04 22 
321be     F3 21 E3 21 
321c2     D2 21 C0 21 
321c6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
321ca     8E 21 7D 21 
321ce     9A F8 A4 ED 
321d2     8E EB 2F EB 
321d6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
321da     37 EB 42 EB 
321de     4C EB 57 EB 
321e2     B2 17 22 19 
321e6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
321ea     FD 18 EF 18 
321ee     E3 18 D6 18 
321f2     CA 18 BD 18 
321f6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
321fa     60 EC 35 EB 
321fe     01 EB 01 EB 
32202     0C EB 16 EB 
32206     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3220a     34 EB D0 18 
3220e     00 19 F4 18 
32212     E8 18 DA 18 
32216     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3221a     B6 18 A9 18 
3221e     9D 18 91 05 
32222     F0 EF CA EB 
32226     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3222a     E8 EA F2 EA 
3222e     FE EA 07 EB 
32232     12 EB C2 EF 
32236     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3223a     D9 18 CD 18 
3223e     C0 18 B3 18 
32242     A7 18 9B 18 
32246     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3224a     B8 FC 30 EE 
3224e     61 EB DC EA 
32252     CD EA D2 EA 
32256     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3225a     F3 EA FE EA 
3225e     D2 09 D1 18 
32262     C3 18 17 18 
32266     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3226a     66 11 52 11 
3226e     49 11 41 11 
32272     38 11 E0 F4 
32276     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3227a     C9 EA C5 EA 
3227e     CF EA DB EA 
32282     E6 EA EF EA 
32286     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3228a     89 11 80 11 
3228e     78 11 6E 11 
32292     67 11 5D 11 
32296     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3229a     43 11 32 0D 
3229e     9C F1 07 EC 
322a2     F8 EA CD EA 
322a6     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
322aa     E4 EA ED EA 
322ae     F8 EA 02 EB 
322b2     55 11 91 11 
322b6     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
322ba     75 11 6E 11 
322be     64 11 5E 11 
322c2     54 11 4A 11 
322c6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
322ca     A8 EB F1 EA 
322ce     D9 EA DC EA 
322d2     E8 EA F1 EA 
322d6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
322da     A6 EB 9E 11 
322de     A0 11 96 11 
322e2     8D 11 85 11 
322e6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
322ea     6A 11 CA 0D 
322ee     36 0B 57 F8 
322f2     6C ED 57 EB 
322f6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
322fa     F4 EA FF EA 
322fe     09 EB 15 EB 
32302     1E EB 1A FD 
32306     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3230a     ED 0A E8 0A 
3230e     E2 0A DC 0A 
32312     D6 0A D1 0A 
32316     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3231a     F8 F3 BC EC 
3231e     57 EB 1E EB 
32322     18 EB 24 EB 
32326     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3232a     42 EB 4D EB 
3232e     08 09 20 0B 
32332     1A 0B 14 0B 
32336     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3233a     04 0B FE 0A 
3233e     F9 0A F2 0A 
32342     84 08 3A F1 
32346     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3234a     42 EB 42 EB 
3234e     4E EB 57 EB 
32352     62 EB 6B EB 
32356     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3235a     48 0B 43 0B 
3235e     3C 0B 36 0B 
32362     31 0B 2C 0B 
32366     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3236a     1B 0B 5C 00 
3236e     6A EF 1B EC 
32372     81 EB 6A EB 
32376     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3237a     85 EB 8E EB 
3237e     99 EB A3 EB 
32382     DD 05 E5 05 
32386     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3238a     DB 05 D8 05 
3238e     D5 05 D1 05 
32392     D0 05 CB 05 
32396     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3239a     0C EC BB EB 
3239e     B3 EB BB EB 
323a2     C5 EB D0 EB 
323a6     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
323aa     E4 F7 2C 06 
323ae     28 06 24 06 
323b2     22 06 1F 06 
323b6     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
323ba     16 06 14 06 
323be     0F 06 D0 F3 
323c2     65 ED 2D EC 
323c6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
323ca     01 EC 0A EC 
323ce     14 EC 1E EC 
323d2     29 EC FB 03 
323d6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
323da     63 06 60 06 
323de     5E 06 59 06 
323e2     58 06 54 06 
323e6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
323ea     69 F1 21 ED 
323ee     55 EC 33 EC 
323f2     36 EC 40 EC 
323f6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
323fa     5C EC 68 EC 
323fe     92 02 D9 02 
32402     D7 02 D7 02 
32406     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3240a     D1 02 D1 02 
3240e     CE 02 CD 02 
32412     5D FC 80 EF 
32416     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3241a     83 EC 8A EC 
3241e     93 EC 9C EC 
32422     A5 EC B1 EC 
32426     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3242a     2B 03 2A 03 
3242e     29 03 26 03 
32432     25 03 24 03 
32436     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3243a     1F 03 70 F7 
3243e     D0 EE 27 ED 
32442     DB EC D4 EC 
32446     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3244a     F0 EC FA EC 
3244e     02 ED F9 F4 
32452     7B 03 7C 03 
32456     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3245a     75 03 73 03 
3245e     72 03 70 03 
32462     6D 03 6C 03 
32466     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3246a     54 ED 22 ED 
3246e     22 ED 2C ED 
32472     35 ED 3F ED 
32476     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3247a     14 01 C3 03 
3247e     C1 03 C0 03 
32482     5F 01 A5 00 
32486     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3248a     7B 00 7C 00 
3248e     20 00 85 F1 
32492     2A EE 89 ED 
32496     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3249a     80 ED 87 ED 
3249e     90 ED 9A ED 
324a2     A3 ED 73 00 
324a6     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
324aa     D0 00 D0 00 
324ae     D0 00 D0 00 
324b2     D0 00 CF 00 
324b6     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
324ba     80 F0 3D EE 
324be     D5 ED C7 ED 
324c2     CD ED D6 ED 
324c6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
324ca     F2 ED FA ED 
324ce     1D 01 29 01 
324d2     27 01 27 01 
324d6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
324da     25 01 26 01 
324de     26 01 23 01 
324e2     D0 F7 EC EF 
324e6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
324ea     1C EE 24 EE 
324ee     2D EE 37 EE 
324f2     40 EE 47 EE 
324f6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
324fa     7D 01 7B 01 
324fe     7A 01 7A 01 
32502     79 01 78 01 
32506     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3250a     84 FE DE F3 
3250e     6C EF 93 EE 
32512     72 EE 72 EE 
32516     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3251a     8B EE 95 EE 
3251e     9E EE 15 FC 
32522     67 FE 67 FE 
32526     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3252a     6B FE 6B FE 
3252e     6D FE 6D FE 
32532     6D FE 6F FE 
32536     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3253a     DF EE CC EE 
3253e     CF EE D9 EE 
32542     E1 EE EA EE 
32546     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3254a     5A FE C4 FE 
3254e     C3 FE C5 FE 
32552     C6 FE C6 FE 
32556     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3255a     C8 FE C7 FE 
3255e     DA FB 85 F1 
32562     8D EF 31 EF 
32566     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3256a     34 EF 3E EF 
3256e     46 EF 4F EF 
32572     57 EF 0D FF 
32576     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3257a     1F FF 1F FF 
3257e     21 FF 21 FF 
32582     21 FF 21 FF 
32586     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3258a     15 F1 BE EF 
3258e     84 EF 7E EF 
32592     88 EF 8F EF 
32596     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3259a     A9 EF 06 F2 
3259e     A6 FC AB FC 
325a2     AD FC AE FC 
325a6     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
325aa     B2 FC B4 FC 
325ae     B6 FC B7 FC 
325b2     8B F4 BD F0 
325b6     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
325ba     E4 EF EE EF 
325be     F6 EF FD EF 
325c2     04 F0 0E F0 
325c6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
325ca     0B FD 0D FD 
325ce     0F FD 11 FD 
325d2     11 FD 13 FD 
325d6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
325da     17 FD 64 F3 
325de     CD F0 52 F0 
325e2     41 F0 45 F0 
325e6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
325ea     5B F0 64 F0 
325ee     6D F0 FB FC 
325f2     65 FD 68 FD 
325f6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
325fa     6C FD 6D FD 
325fe     6F FD 70 FD 
32602     72 FD B3 FB 
32606     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3260a     A4 F0 99 F0 
3260e     A0 F0 A8 F0 
32612     AE F0 B9 F0 
32616     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3261a     CB FB DD FB 
3261e     DE FB E0 FB 
32622     E3 FB E3 FB 
32626     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3262a     E9 FB EC FB 
3262e     62 F7 27 F2 
32632     2A F1 FF F0 
32636     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3263a     0C F1 13 F1 
3263e     1B F1 23 F1 
32642     33 F2 3C FC 
32646     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3264a     42 FC 45 FC 
3264e     47 FC 48 FC 
32652     4A FC 4C FC 
32656     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3265a     20 F2 77 F1 
3265e     5C F1 5F F1 
32662     64 F1 6C F1 
32666     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3266a     83 F1 DC F8 
3266e     9A FC 9A FC 
32672     9B FC 9E FC 
32676     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3267a     A3 FC A4 FC 
3267e     A6 FC A9 FC 
32682     90 F4 33 F2 
32686     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3268a     BA F1 BF F1 
3268e     C7 F1 CE F1 
32692     D6 F1 DC F1 
32696     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3269a     F3 FC F5 FC 
3269e     FE FB 79 FB 
326a2     62 FB 5F FB 
326a6     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
326aa     6F FA AF F3 
326ae     53 F2 12 F2 
326b2     0F F2 15 F2 
326b6     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
326ba     2A F2 32 F2 
326be     38 F2 9A FB 
326c2     AF FB B1 FB 
326c6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
326ca     B7 FB B8 FB 
326ce     BA FB BC FB 
326d2     C1 FB 3B F8 
326d6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
326da     6E F2 6C F2 
326de     74 F2 7A F2 
326e2     81 F2 87 F2 
326e6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
326ea     06 FC 09 FC 
326ee     0C FC 0E FC 
326f2     0F FC 12 FC 
326f6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
326fa     17 FC 1A FC 
326fe     B2 F6 7B F3 
32702     DD F2 C5 F2 
32706     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3270a     D4 F2 DB F2 
3270e     E0 F2 E8 F2 
32712     28 F8 60 FC 
32716     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3271a     64 FC 66 FC 
3271e     68 FC 6A FC 
32722     6D FC 52 FC 
32726     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3272a     78 F3 24 F3 
3272e     1A F3 1E F3 
32732     24 F3 2A F3 
32736     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3273a     3D F3 80 FA 
3273e     0C FB 0F FB 
32742     10 FB 14 FB 
32746     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3274a     1B FB 1D FB 
3274e     1F FB 92 FA 
32752     DE F4 AE F3 
32756     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3275a     79 F3 7E F3 
3275e     84 F3 8C F3 
32762     92 F3 97 F3 
32766     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3276a     67 FB 69 FB 
3276e     6B FB 6F FB 
32772     71 FB 72 FB 
32776     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3277a     E3 F8 BA F4 
3277e     EE F3 CC F3 
32782     CA F3 CF F3 
32786     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3278a     E2 F3 E8 F3 
3278e     ED F3 B7 FB 
32792     BC FB BE FB 
32796     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3279a     C4 FB C6 FB 
3279e     C8 FB C9 FB 
327a2     CC FB 8F F7 
327a6     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
327aa     1E F4 1E F4 
327ae     24 F4 2A F4 
327b2     30 F4 38 F4 
327b6     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
327ba     AD FA B1 FA 
327be     B4 FA B6 FA 
327c2     BA FA BB FA 
327c6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
327ca     C2 FA C6 FA 
327ce     55 F6 C6 F4 
327d2     7D F4 72 F4 
327d6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
327da     83 F4 89 F4 
327de     8F F4 94 F4 
327e2     66 FA 03 FB 
327e6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
327ea     0A FB 0E FB 
327ee     10 FB 11 FB 
327f2     16 FB 18 FB 
327f6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
327fa     F9 F4 CA F4 
327fe     C5 F4 CB F4 
32802     D1 F4 D7 F4 
32806     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3280a     E8 F4 3F FB 
3280e     56 FB 58 FB 
32812     5A FB 5E FB 
32816     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3281a     64 FB 64 FB 
3281e     69 FB 99 F9 
32822     E9 F5 33 F5 
32826     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3282a     1D F5 22 F5 
3282e     27 F5 2E F5 
32832     32 F5 37 F5 
32836     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3283a     BC FA BC FA 
3283e     C1 FA C2 FA 
32842     C4 FA C8 FA 
32846     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3284a     F9 F7 DB F5 
3284e     78 F5 69 F5 
32852     6A F5 70 F5 
32856     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3285a     7F F5 85 F5 
3285e     6E F7 06 FB 
32862     0A FB 0B FB 
32866     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3286a     14 FB 15 FB 
3286e     18 FB 1B FB 
32872     1D FB 70 F7 
32876     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3287a     B6 F5 BB F5 
3287e     C0 F5 C6 F5 
32882     CA F5 CF F5 
32886     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3288a     54 FB 56 FB 
3288e     5A FB 5B FB 
32892     5E FB 5F FB 
32896     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3289a     67 FB 52 FB 
3289e     29 F7 33 F6 
328a2     06 F6 02 F6 
328a6     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
328aa     10 F6 16 F6 
328ae     1A F6 1F F6 
328b2     81 FB 9F FB 
328b6     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
328ba     51 FB F2 FA 
328be     E3 FA E3 FA 
328c2     E5 FA E9 FA 
328c6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
328ca     64 F6 4D F6 
328ce     4D F6 53 F6 
328d2     57 F6 5C F6 
328d6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
328da     6A F6 19 FB 
328de     1E FB 22 FB 
328e2     23 FB 24 FB 
328e6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
328ea     2C FB 2E FB 
328ee     32 FB F0 F8 
328f2     01 F7 A5 F6 
328f6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
328fa     9F F6 A3 F6 
328fe     A6 F6 AC F6 
32902     B0 F6 EB F7 
32906     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3290a     68 FB 6C FB 
3290e     6E FB 71 FB 
32912     72 FB 74 FB 
32916     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3291a     71 F8 21 F7 
3291e     E5 F6 DD F6 
32922     E1 F6 E6 F6 
32926     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3292a     F5 F6 F7 F6 
3292e     F7 FA AB FB 
32932     AD FB AF FB 
32936     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3293a     B6 FB B9 FB 
3293e     BB FB BC FB 
32942     21 FB 07 F8 
32946     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3294a     22 F7 26 F7 
3294e     2B F7 2E F7 
32952     34 F7 38 F7 
32956     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3295a     13 FB 16 FB 
3295e     17 FB 1B FB 
32962     1E FB 20 FB 
32966     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3296a     26 FB 77 FA 
3296e     F3 F7 7C F7 
32972     67 F7 6A F7 
32976     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3297a     74 F7 7A F7 
3297e     7E F7 82 F7 
32982     53 FB 5A FB 
32986     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3298a     5F FB 63 FB 
3298e     65 FB 67 FB 
32992     69 FB 6A FB 
32996     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3299a     B5 F7 A9 F7 
3299e     AD F7 B0 F7 
329a2     B5 F7 B8 F7 
329a6     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
329aa     6E F8 99 FB 
329ae     9C FB 9D FB 
329b2     9F FB A4 FB 
329b6     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
329ba     A9 FB AB FB 
329be     AD FB 46 F9 
329c2     26 F8 F0 F7 
329c6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
329ca     F4 F7 F8 F7 
329ce     FB F7 FF F7 
329d2     03 F8 65 FA 
329d6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
329da     2B FB 2F FB 
329de     30 FB 32 FB 
329e2     34 FB 38 FB 
329e6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
329ea     E9 F8 4A F8 
329ee     2E F8 2C F8 
329f2     2F F8 36 F8 
329f6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
329fa     41 F8 44 F8 
329fe     4A FB 67 FB 
32a02     68 FB 6B FB 
32a06     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32a0a     73 FB 74 FB 
32a0e     78 FB 7A FB 
32a12     14 FB E7 F8 
32a16     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32a1a     6D F8 70 F8 
32a1e     73 F8 78 F8 
32a22     7C F8 80 F8 
32a26     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32a2a     A6 FB A7 FB 
32a2e     A9 FB AC FB 
32a32     AF FB B1 FB 
32a36     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32a3a     B7 FB 73 FA 
32a3e     F8 F8 B4 F8 
32a42     A9 F8 AB F8 
32a46     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32a4a     B4 F8 B8 F8 
32a4e     BB F8 FA F8 
32a52     64 FB 65 FB 
32a56     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32a5a     6D FB 6F FB 
32a5e     70 FB 74 FB 
32a62     77 FB 77 FB 
32a66     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32a6a     E9 F8 E4 F8 
32a6e     E8 F8 EB F8 
32a72     EE F8 F2 F8 
32a76     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32a7a     B5 FA 9F FB 
32a7e     A1 FB A4 FB 
32a82     A5 FB A9 FB 
32a86     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32a8a     AE FB B1 FB 
32a8e     B2 FB C7 F9 
32a92     39 F9 22 F9 
32a96     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32a9a     26 F9 2A F9 
32a9e     2E F9 32 F9 
32aa2     33 F9 BA FB 
32aa6     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32aaa     DE FB E1 FB 
32aae     E2 FB E4 FB 
32ab2     E5 FB E7 FB 
32ab6     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32aba     C5 F9 67 F9 
32abe     57 F9 56 F9 
32ac2     5B F9 5F F9 
32ac6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32aca     68 F9 6C F9 
32ace     0B FC 11 FC 
32ad2     14 FC 15 FC 
32ad6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32ada     B5 FB B5 FB 
32ade     B6 FB B8 FB 
32ae2     E9 FA C8 F9 
32ae6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32aea     90 F9 94 F9 
32aee     95 F9 99 F9 
32af2     9D F9 9F F9 
32af6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32afa     DE FB DF FB 
32afe     E2 FB E4 FB 
32b02     E6 FB E8 FB 
32b06     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32b0a     EF FB AC FA 
32b0e     E9 F9 C7 F9 
32b12     C3 F9 C8 F9 
32b16     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32b1a     D0 F9 D4 F9 
32b1e     D6 F9 0E FB 
32b22     11 FC 13 FC 
32b26     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32b2a     19 FC 1B FC 
32b2e     1D FC 1E FC 
32b32     21 FC 22 FC 
32b36     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32b3a     F7 F9 F7 F9 
32b3e     FB F9 FE F9 
32b42     00 FA 03 FA 
32b46     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32b4a     1B FC 45 FC 
32b4e     46 FC 48 FC 
32b52     4A FC 4B FC 
32b56     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32b5a     52 FC 54 FC 
32b5e     F3 FB 82 FA 
32b62     35 FA 28 FA 
32b66     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32b6a     31 FA 32 FA 
32b6e     37 FA 37 FA 
32b72     3C FA 00 FC 
32b76     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32b7a     09 FC 0B FC 
32b7e     0F FC 12 FC 
32b82     12 FC 15 FC 
32b86     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32b8a     8D FA 60 FA 
32b8e     5B FA 5C FA 
32b92     60 FA 61 FA 
32b96     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32b9a     6C FA 6D FA 
32b9e     37 FC 3A FC 
32ba2     3B FC 3D FC 
32ba6     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32baa     43 FC 44 FC 
32bae     45 FC 47 FC 
32bb2     51 FB AB FA 
32bb6     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32bba     8E FA 91 FA 
32bbe     93 FA 95 FA 
32bc2     98 FA 9B FA 
32bc6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32bca     68 FC 6A FC 
32bce     6C FC 6E FC 
32bd2     70 FC 72 FC 
32bd6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32bda     76 FC 3B FB 
32bde     D0 FA BB FA 
32be2     B9 FA BD FA 
32be6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32bea     C4 FA C6 FA 
32bee     CA FA 13 FC 
32bf2     3A FC 3A FC 
32bf6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32bfa     41 FC 43 FC 
32bfe     44 FC 47 FC 
32c02     48 FC 3C FC 
32c06     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32c0a     E6 FA E8 FA 
32c0e     EB FA EE FA 
32c12     F0 FA F2 FA 
32c16     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32c1a     61 FC 66 FC 
32c1e     68 FC 6B FC 
32c22     6C FC 6E FC 
32c26     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32c2a     73 FC 75 FC 
32c2e     13 FC 3F FB 
32c32     17 FB 12 FB 
32c36     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32c3a     1A FB 1D FB 
32c3e     1F FB 20 FB 
32c42     23 FB 92 FC 
32c46     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32c4a     96 FC 97 FC 
32c4e     9A FC 9C FC 
32c52     9E FC 9F FC 
32c56     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32c5a     5A FB 41 FB 
32c5e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32c62     73 32 00 04 
32c66     00 00 10 00 
32c6a     00 00 00 00 
32c6e     00 00 00 00 | atari2 file "atari2.s2"
32c72     43 87 43 87 
32c76     43 87 44 87 
32c7a     43 87 44 87 
32c7e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32c82     43 87 43 87 
32c86     43 87 44 87 
32c8a     43 87 43 87 
32c8e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32c92     44 87 43 87 
32c96     44 87 43 87 
32c9a     43 87 43 87 
32c9e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32ca2     43 87 43 87 
32ca6     44 87 43 87 
32caa     44 87 44 87 
32cae     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
32cb2     43 87 43 87 
32cb6     44 87 43 87 
32cba     43 87 42 87 
32cbe     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
32cc2     43 87 43 87 
32cc6     43 87 43 87 
32cca     44 87 43 87 
32cce     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
32cd2     44 87 44 87 
32cd6     43 87 44 87 
32cda     43 87 44 87 
32cde     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
32ce2     44 87 43 87 
32ce6     44 87 44 87 
32cea     43 87 43 87 
32cee     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32cf2     43 87 44 87 
32cf6     44 87 43 87 
32cfa     43 87 44 87 
32cfe     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32d02     43 87 43 87 
32d06     43 87 43 87 
32d0a     43 87 43 87 
32d0e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
32d12     42 87 43 87 
32d16     44 87 42 87 
32d1a     43 87 43 87 
32d1e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
32d22     43 87 44 87 
32d26     44 87 43 87 
32d2a     43 87 43 87 
32d2e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32d32     43 87 5C 87 
32d36     EE 86 AC 87 
32d3a     4C 7C A3 78 
32d3e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
32d42     BC 78 BB 78 
32d46     BD 78 BC 78 
32d4a     BB 78 BD 78 
32d4e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
32d52     BB 78 BB 78 
32d56     BC 78 BC 78 
32d5a     BC 78 BB 78 
32d5e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32d62     BC 78 BC 78 
32d66     BC 78 BC 78 
32d6a     BC 78 BC 78 
32d6e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32d72     BB 78 BC 78 
32d76     A0 78 4C 7C 
32d7a     11 7A 29 89 
32d7e     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
32d82     44 87 43 87 
32d86     44 87 43 87 
32d8a     43 87 42 87 
32d8e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
32d92     43 87 43 87 
32d96     44 87 ED 85 
32d9a     71 85 52 79 
32d9e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
32da2     BC 78 BC 78 
32da6     BC 78 BC 78 
32daa     BC 78 BC 78 
32dae     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32db2     BC 78 BC 78 
32db6     BC 78 A0 78 
32dba     CF 7A B9 81 
32dbe     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
32dc2     44 87 43 87 
32dc6     43 87 44 87 
32dca     43 87 44 87 
32dce     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32dd2     43 87 43 87 
32dd6     43 87 43 87 
32dda     44 87 43 87 
32dde     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
32de2     43 87 43 87 
32de6     44 87 43 87 
32dea     44 87 43 87 
32dee     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
32df2     44 87 43 87 
32df6     43 87 43 87 
32dfa     5A 87 39 81 
32dfe     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
32e02     A5 78 BC 78 
32e06     BB 78 BC 78 
32e0a     BB 78 BC 78 
32e0e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
32e12     BC 78 BC 78 
32e16     BC 78 BC 78 
32e1a     BC 78 8F 79 
32e1e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
32e22     09 85 47 87 
32e26     43 87 43 87 
32e2a     42 87 42 87 
32e2e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
32e32     43 87 43 87 
32e36     43 87 43 87 
32e3a     43 87 44 87 
32e3e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32e42     43 87 43 87 
32e46     44 87 43 87 
32e4a     42 87 43 87 
32e4e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
32e52     44 87 43 87 
32e56     43 87 43 87 
32e5a     44 87 44 87 
32e5e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
32e62     94 78 55 7A 
32e66     B9 78 BC 78 
32e6a     BC 78 BC 78 
32e6e     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32e72     BC 78 BB 78 
32e76     BC 78 BC 78 
32e7a     BC 78 BC 78 
32e7e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32e82     BB 78 BC 78 
32e86     BC 78 BC 78 
32e8a     BB 78 BC 78 
32e8e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
32e92     BC 78 BC 78 
32e96     BD 78 BC 78 
32e9a     BC 78 BB 78 
32e9e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
32ea2     94 78 B3 84 
32ea6     36 84 4A 87 
32eaa     43 87 43 87 
32eae     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
32eb2     43 87 44 87 
32eb6     43 87 43 87 
32eba     43 87 43 87 
32ebe     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32ec2     43 87 44 87 
32ec6     43 87 44 87 
32eca     43 87 43 87 
32ece     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
32ed2     43 87 43 87 
32ed6     43 87 45 87 
32eda     43 87 43 87 
32ede     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
32ee2     43 87 44 87 
32ee6     44 87 44 87 
32eea     43 87 43 87 
32eee     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
32ef2     43 87 42 87 
32ef6     43 87 43 87 
32efa     44 87 43 87 
32efe     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
32f02     54 87 3C 82 
32f06     36 83 52 79 
32f0a     C6 78 BC 78 
32f0e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
32f12     BB 78 BB 78 
32f16     BC 78 BC 78 
32f1a     BC 78 BC 78 
32f1e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
32f22     BD 78 ED 78 
32f26     1B 79 F4 83 
32f2a     4D 83 4E 87 
32f2e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
32f32     44 87 43 87 
32f36     42 87 44 87 
32f3a     43 87 42 87 
32f3e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
32f42     43 87 54 87 
32f46     26 82 B3 84 
32f4a     D6 77 BB 78 
32f4e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
32f52     BC 78 BB 78 
32f56     BB 78 BB 78 
32f5a     BB 78 BB 78 
32f5e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
32f62     BC 78 BC 78 
32f66     26 79 18 75 
32f6a     36 83 1F 84 
32f6e     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
32f72     43 87 43 87 
32f76     43 87 43 87 
32f7a     43 87 44 87 
32f7e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32f82     43 87 44 87 
32f86     44 87 43 87 
32f8a     43 87 43 87 
32f8e     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
32f92     43 87 43 87 
32f96     43 87 43 87 
32f9a     44 87 44 87 
32f9e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
32fa2     44 87 43 87 
32fa6     43 87 43 87 
32faa     43 87 44 87 
32fae     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32fb2     44 87 44 87 
32fb6     44 87 43 87 
32fba     44 87 43 87 
32fbe     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
32fc2     43 87 43 87 
32fc6     43 87 44 87 
32fca     44 87 43 87 
32fce     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
32fd2     43 87 43 87 
32fd6     43 87 43 87 
32fda     43 87 44 87 
32fde     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32fe2     43 87 44 87 
32fe6     43 87 44 87 
32fea     19 87 7D 86 
32fee     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
32ff2     B1 78 BC 78 
32ff6     BC 78 BC 78 
32ffa     BC 78 BC 78 
32ffe     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33002     BC 78 BC 78 
33006     BD 78 BC 78 
3300a     B7 78 3B 7B 
3300e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33012     96 86 44 87 
33016     43 87 43 87 
3301a     43 87 43 87 
3301e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33022     44 87 44 87 
33026     43 87 44 87 
3302a     43 87 44 87 
3302e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33032     43 87 44 87 
33036     43 87 44 87 
3303a     43 87 44 87 
3303e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33042     43 87 44 87 
33046     43 87 43 87 
3304a     44 87 43 87 
3304e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33052     44 87 44 87 
33056     43 87 43 87 
3305a     43 87 44 87 
3305e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33062     43 87 43 87 
33066     43 87 43 87 
3306a     44 87 44 87 
3306e     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
33072     36 83 CF 7A 
33076     AB 78 BB 78 
3307a     BC 78 BC 78 
3307e     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
33082     BB 78 BC 78 
33086     BC 78 BC 78 
3308a     BC 78 BC 78 
3308e     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33092     BC 78 BC 78 
33096     BC 78 BB 78 
3309a     BC 78 BC 78 
3309e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
330a2     BB 78 BC 78 
330a6     BB 78 BC 78 
330aa     BC 78 BD 78 
330ae     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
330b2     BC 78 BC 78 
330b6     BC 78 BC 78 
330ba     BC 78 BD 78 
330be     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
330c2     BC 78 BB 78 
330c6     BC 78 BB 78 
330ca     BB 78 BC 78 
330ce     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
330d2     BC 78 BC 78 
330d6     BC 78 BC 78 
330da     BC 78 BB 78 
330de     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
330e2     BC 78 BC 78 
330e6     BC 78 BD 78 
330ea     BB 78 BC 78 
330ee     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
330f2     BC 78 BC 78 
330f6     BC 78 BB 78 
330fa     BC 78 BB 78 
330fe     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33102     BB 78 BC 78 
33106     BC 78 BC 78 
3310a     BC 78 BB 78 
3310e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33112     BC 78 BC 78 
33116     BC 78 BB 78 
3311a     BC 78 BB 78 
3311e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33122     BC 78 BC 78 
33126     BC 78 BC 78 
3312a     BB 78 BC 78 
3312e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33132     BC 78 9F 78 
33136     52 79 B3 84 
3313a     2F 86 60 87 
3313e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33142     44 87 43 87 
33146     43 87 43 87 
3314a     43 87 43 87 
3314e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33152     43 87 43 87 
33156     43 87 44 87 
3315a     43 87 43 87 
3315e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33162     43 87 43 87 
33166     43 87 43 87 
3316a     43 87 44 87 
3316e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33172     44 87 44 87 
33176     5E 87 BC 80 
3317a     FB 80 94 78 
3317e     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
33182     BD 78 BC 78 
33186     BB 78 BC 78 
3318a     BB 78 BB 78 
3318e     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33192     BC 78 BB 78 
33196     BB 78 6B 79 
3319a     D6 77 AC 87 
3319e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
331a2     43 87 44 87 
331a6     43 87 43 87 
331aa     44 87 43 87 
331ae     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
331b2     43 87 44 87 
331b6     43 87 5C 87 
331ba     E7 80 00 80 
331be     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
331c2     BC 78 BD 78 
331c6     BC 78 BC 78 
331ca     BC 78 BB 78 
331ce     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
331d2     BC 78 BC 78 
331d6     BB 78 BC 78 
331da     BB 78 BC 78 
331de     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
331e2     BB 78 BC 78 
331e6     BC 78 BC 78 
331ea     BC 78 BC 78 
331ee     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
331f2     BC 78 BC 78 
331f6     BC 78 BC 78 
331fa     A0 78 8D 7B 
331fe     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33202     60 87 43 87 
33206     44 87 44 87 
3320a     43 87 43 87 
3320e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33212     44 87 43 87 
33216     43 87 43 87 
3321a     44 87 73 86 
3321e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33222     51 7B B6 78 
33226     BC 78 BD 78 
3322a     BC 78 BC 78 
3322e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33232     BB 78 BC 78 
33236     BD 78 BB 78 
3323a     BC 78 BB 78 
3323e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33242     BC 78 BC 78 
33246     BC 78 BC 78 
3324a     BB 78 BC 78 
3324e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33252     BC 78 BB 78 
33256     BB 78 BC 78 
3325a     BC 78 BB 78 
3325e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
33262     22 8C AF 84 
33266     48 87 43 87 
3326a     44 87 43 87 
3326e     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
33272     43 87 42 87 
33276     43 87 43 87 
3327a     44 87 43 87 
3327e     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33282     43 87 43 87 
33286     44 87 44 87 
3328a     43 87 43 87 
3328e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33292     43 87 43 87 
33296     43 87 43 87 
3329a     44 87 43 87 
3329e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
332a2     9F 8B D6 77 
332a6     16 7C B3 78 
332aa     BC 78 BB 78 
332ae     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
332b2     BB 78 BC 78 
332b6     BB 78 BC 78 
332ba     BC 78 BC 78 
332be     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
332c2     BC 78 BB 78 
332c6     BB 78 BC 78 
332ca     BB 78 BC 78 
332ce     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
332d2     BB 78 BB 78 
332d6     BC 78 BC 78 
332da     BC 78 BB 78 
332de     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
332e2     BC 78 BC 78 
332e6     BC 78 BD 78 
332ea     BB 78 BC 78 
332ee     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
332f2     BC 78 BC 78 
332f6     BC 78 BB 78 
332fa     BC 78 BC 78 
332fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33302     A8 78 54 7E 
33306     F4 83 17 82 
3330a     50 87 43 87 
3330e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33312     44 87 43 87 
33316     44 87 43 87 
3331a     43 87 44 87 
3331e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33322     43 87 28 87 
33326     20 85 CF 7A 
3332a     70 7D AD 78 
3332e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33332     BB 78 BC 78 
33336     BC 78 BC 78 
3333a     BB 78 BB 78 
3333e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33342     BB 78 B2 78 
33346     9A 7C CF 7A 
3334a     4A 87 0D 87 
3334e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33352     43 87 44 87 
33356     43 87 44 87 
3335a     43 87 43 87 
3335e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33362     44 87 43 87 
33366     28 87 51 85 
3336a     11 7A 1E 7D 
3336e     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33372     BC 78 BB 78 
33376     BC 78 BC 78 
3337a     BC 78 BC 78 
3337e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33382     BB 78 BC 78 
33386     BB 78 BC 78 
3338a     BC 78 BC 78 
3338e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33392     BB 78 BC 78 
33396     BC 78 BC 78 
3339a     BD 78 BB 78 
3339e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
333a2     BC 78 BB 78 
333a6     BC 78 BC 78 
333aa     BC 78 BB 78 
333ae     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333b2     BC 78 BC 78 
333b6     BC 78 BC 78 
333ba     BB 78 BC 78 
333be     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
333c2     BC 78 BD 78 
333c6     BC 78 BC 78 
333ca     BC 78 BB 78 
333ce     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333d2     BC 78 BB 78 
333d6     BB 78 BC 78 
333da     BC 78 BB 78 
333de     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333e2     BB 78 BB 78 
333e6     BB 78 BC 78 
333ea     B6 78 48 7D 
333ee     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
333f2     56 87 43 87 
333f6     42 87 44 87 
333fa     44 87 43 87 
333fe     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33402     43 87 44 87 
33406     43 87 44 87 
3340a     4C 87 7E 83 
3340e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33412     F7 78 BC 78 
33416     BC 78 BB 78 
3341a     BB 78 BC 78 
3341e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33422     BC 78 BB 78 
33426     BC 78 BC 78 
3342a     BB 78 BC 78 
3342e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33432     BB 78 BC 78 
33436     BC 78 BC 78 
3343a     BC 78 BB 78 
3343e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33442     BC 78 BC 78 
33446     BC 78 BC 78 
3344a     BC 78 BB 78 
3344e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33452     BC 78 BB 78 
33456     BB 78 BC 78 
3345a     BC 78 BB 78 
3345e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33462     BC 78 BC 78 
33466     BB 78 BC 78 
3346a     BC 78 BC 78 
3346e     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33472     73 32 00 04 
33476     00 00 10 00 
3347a     00 00 00 00 
3347e     00 00 00 00 | atari12 file "atari12.s2"
33482     00 6D 00 6D 
33486     00 6D 00 6D 
3348a     00 6D 00 6D 
3348e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33492     00 6D 00 6D 
33496     00 6D 00 6D 
3349a     00 6D 00 6D 
3349e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
334a2     00 6D 00 6D 
334a6     00 6D 00 6D 
334aa     00 6D 00 6D 
334ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
334b2     00 6D 00 6D 
334b6     00 6D 00 6D 
334ba     00 6D 00 6D 
334be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
334c2     00 6D 00 6D 
334c6     00 6D 00 6D 
334ca     00 6D 00 6D 
334ce     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
334d2     00 6C 00 6C 
334d6     00 6C 00 6C 
334da     00 6C 00 6C 
334de     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334e2     00 6C 00 6C 
334e6     00 6C 00 6C 
334ea     00 6C 00 6C 
334ee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334f2     00 6C 00 6C 
334f6     00 6C 00 6C 
334fa     00 6C 00 6C 
334fe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33502     00 6C 00 6C 
33506     00 6C 00 6C 
3350a     00 6C 00 6C 
3350e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33512     00 6C 00 6C 
33516     00 6C 00 6C 
3351a     00 6C 00 6C 
3351e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33522     00 6C 00 6C 
33526     00 6C 00 6C 
3352a     00 6C 00 6C 
3352e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33532     00 6C 00 6C 
33536     00 6C 00 6C 
3353a     00 6C 00 6C 
3353e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33542     00 6C 00 6C 
33546     00 6C 00 6C 
3354a     00 6C 00 6C 
3354e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33552     00 6C 00 6C 
33556     00 6C 00 6C 
3355a     00 6C 00 6C 
3355e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33562     00 6C 00 6C 
33566     00 6C 00 6C 
3356a     00 6C 00 6C 
3356e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33572     00 6C 00 6C 
33576     00 6C 00 6C 
3357a     00 6C 00 6C 
3357e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33582     00 6C 00 6B 
33586     00 6B 00 6B 
3358a     00 6B 00 6B 
3358e     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33592     00 6B 00 6B 
33596     00 6B 00 6B 
3359a     00 6B 00 6B 
3359e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335a2     00 6B 00 6B 
335a6     00 6B 00 6B 
335aa     00 6B 00 6B 
335ae     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335b2     00 6B 00 6B 
335b6     00 6B 00 6B 
335ba     00 6B 00 6B 
335be     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335c2     00 6B 00 6B 
335c6     00 6B 00 6B 
335ca     00 6B 00 6B 
335ce     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335d2     00 6B 00 6B 
335d6     00 6B 00 6B 
335da     00 6B 00 6B 
335de     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335e2     00 6B 00 6B 
335e6     00 6B 00 6B 
335ea     00 6B 00 6B 
335ee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335f2     00 6B 00 6B 
335f6     00 6B 00 6B 
335fa     00 6B 00 6B 
335fe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33602     00 6B 00 6B 
33606     00 6B 00 6B 
3360a     00 6B 00 6B 
3360e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33612     00 6B 00 6B 
33616     00 6B 00 6B 
3361a     00 6A 00 9D 
3361e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33622     00 9E 00 9E 
33626     00 9E 00 9E 
3362a     00 9E 00 9E 
3362e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33632     00 9E 00 9E 
33636     00 9E 00 9E 
3363a     00 9E 00 9E 
3363e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33642     00 9E 00 9E 
33646     00 9E 00 9E 
3364a     00 9E 00 9E 
3364e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33652     00 9E 00 9E 
33656     00 9E 00 9E 
3365a     00 9E 00 9E 
3365e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33662     00 9E 00 9E 
33666     00 9E 00 9E 
3366a     00 9E 00 9E 
3366e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33672     00 9E 00 9E 
33676     00 9E 00 9E 
3367a     00 9E 00 9E 
3367e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33682     00 9E 00 9E 
33686     00 9E 00 9E 
3368a     00 9E 00 9E 
3368e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33692     00 9E 00 9E 
33696     00 9E 00 9E 
3369a     00 9E 00 9E 
3369e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
336a2     00 9E 00 9E 
336a6     00 9E 00 9E 
336aa     00 9E 00 9E 
336ae     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
336b2     00 9F 00 9F 
336b6     00 9F 00 9F 
336ba     00 9F 00 9F 
336be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336c2     00 9F 00 9F 
336c6     00 9F 00 9F 
336ca     00 9F 00 9F 
336ce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336d2     00 9F 00 9F 
336d6     00 9F 00 9F 
336da     00 9F 00 9F 
336de     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336e2     00 9F 00 9F 
336e6     00 9F 00 9F 
336ea     00 9F 00 9F 
336ee     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336f2     00 9F 00 9F 
336f6     00 9F 00 9F 
336fa     00 9F 00 9F 
336fe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33702     00 9F 00 9F 
33706     00 9F 00 9F 
3370a     00 9F 00 9F 
3370e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33712     00 9F 00 9F 
33716     00 9F 00 9F 
3371a     00 9F 00 9F 
3371e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33722     00 9F 00 9F 
33726     00 9F 00 9F 
3372a     00 9F 00 9F 
3372e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33732     00 9F 00 9F 
33736     00 9F 00 9F 
3373a     00 9F 00 9F 
3373e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33742     00 9F 00 9F 
33746     00 9F 00 9F 
3374a     00 9F 00 9F 
3374e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33752     00 9F 00 9F 
33756     00 9F 00 9F 
3375a     00 9F 00 9F 
3375e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33762     00 9F 00 9F 
33766     00 9F 00 9F 
3376a     00 9F 00 9F 
3376e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33772     00 9F 00 9F 
33776     00 9F 00 A0 
3377a     00 A0 00 A0 
3377e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33782     00 A0 00 A0 
33786     00 A0 00 A0 
3378a     00 A0 00 A0 
3378e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33792     00 A0 00 A0 
33796     00 A0 00 A0 
3379a     00 A0 00 A0 
3379e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337a2     00 A0 00 A0 
337a6     00 A0 00 A0 
337aa     00 A0 00 A0 
337ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337b2     00 A0 00 A0 
337b6     00 A0 00 A0 
337ba     00 A0 00 A0 
337be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337c2     00 A0 00 A0 
337c6     00 A0 00 A0 
337ca     00 A0 00 A0 
337ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337d2     00 A0 00 A0 
337d6     00 A0 00 A0 
337da     00 A0 00 A0 
337de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337e2     00 A0 00 A0 
337e6     00 A0 00 A0 
337ea     00 A0 00 A0 
337ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337f2     00 A0 00 A0 
337f6     00 A0 00 A0 
337fa     00 A0 00 A0 
337fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33802     00 A0 00 A0 
33806     00 A0 00 A0 
3380a     00 A0 00 A0 
3380e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33812     00 A0 00 A0 
33816     00 A0 00 A0 
3381a     00 A0 00 A0 
3381e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33822     00 A0 00 A0 
33826     00 A0 00 A0 
3382a     00 A0 00 A0 
3382e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33832     00 A0 00 A0 
33836     00 A0 00 A0 
3383a     00 A0 00 A0 
3383e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33842     00 6D 00 6D 
33846     00 6D 00 6D 
3384a     00 6D 00 6D 
3384e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33852     00 6D 00 6D 
33856     00 6D 00 6D 
3385a     00 6D 00 6D 
3385e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33862     00 6D 00 6D 
33866     00 6D 00 6D 
3386a     00 6D 00 6D 
3386e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33872     00 6D 00 6D 
33876     00 6D 00 6D 
3387a     00 6D 00 6D 
3387e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33882     00 6D 00 6D 
33886     00 6D 00 6D 
3388a     00 6D 00 6D 
3388e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33892     00 6D 00 6D 
33896     00 6D 00 6D 
3389a     00 6D 00 6D 
3389e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338a2     00 6D 00 6D 
338a6     00 6D 00 6D 
338aa     00 6D 00 6D 
338ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338b2     00 6D 00 6D 
338b6     00 6D 00 6D 
338ba     00 6D 00 6D 
338be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338c2     00 6D 00 6D 
338c6     00 A0 00 A0 
338ca     00 A0 00 A0 
338ce     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338d2     00 A0 00 A0 
338d6     00 A0 00 A0 
338da     00 A0 00 A0 
338de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338e2     00 A0 00 A0 
338e6     00 A0 00 A0 
338ea     00 A0 00 A0 
338ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338f2     00 A0 00 A0 
338f6     00 A0 00 A0 
338fa     00 A0 00 A0 
338fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33902     00 A0 00 A0 
33906     00 A0 00 A0 
3390a     00 A0 00 A0 
3390e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33912     00 A0 00 A0 
33916     00 A0 00 A0 
3391a     00 A0 00 A0 
3391e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33922     00 A0 00 A0 
33926     00 A0 00 A0 
3392a     00 A0 00 A0 
3392e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33932     00 A0 00 A0 
33936     00 A0 00 A0 
3393a     00 A0 00 A0 
3393e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33942     00 A0 00 A0 
33946     00 A0 00 A0 
3394a     00 A0 00 A0 
3394e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33952     00 6D 00 6D 
33956     00 6D 00 6D 
3395a     00 6D 00 6D 
3395e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33962     00 6D 00 6D 
33966     00 6D 00 6D 
3396a     00 6D 00 6D 
3396e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33972     00 6D 00 6D 
33976     00 6D 00 6D 
3397a     00 6D 00 6D 
3397e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33982     00 6D 00 6D 
33986     00 6D 00 6D 
3398a     00 6D 00 6D 
3398e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33992     00 6D 00 6D 
33996     00 6D 00 6D 
3399a     00 6D 00 6D 
3399e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339a2     00 6D 00 6D 
339a6     00 6D 00 6D 
339aa     00 6D 00 6D 
339ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339b2     00 6D 00 6D 
339b6     00 6D 00 6D 
339ba     00 6D 00 6D 
339be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339c2     00 6D 00 6D 
339c6     00 6D 00 6D 
339ca     00 6D 00 6D 
339ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339d2     00 6D 00 6D 
339d6     00 6C 00 A0 
339da     00 9F 00 A0 
339de     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
339e2     00 A0 00 A0 
339e6     00 A0 00 A0 
339ea     00 A0 00 A0 
339ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
339f2     00 A0 00 A0 
339f6     00 A0 00 A0 
339fa     00 A0 00 A0 
339fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a02     00 A0 00 A0 
33a06     00 A0 00 A0 
33a0a     00 A0 00 A0 
33a0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a12     00 A0 00 A0 
33a16     00 A0 00 A0 
33a1a     00 A0 00 A0 
33a1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a22     00 A0 00 A0 
33a26     00 A0 00 A0 
33a2a     00 A0 00 A0 
33a2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a32     00 A0 00 A0 
33a36     00 A0 00 A0 
33a3a     00 A0 00 A0 
33a3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a42     00 A0 00 A0 
33a46     00 A0 00 A0 
33a4a     00 A0 00 A0 
33a4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a52     00 A0 00 A0 
33a56     00 A0 00 A0 
33a5a     00 A0 00 A0 
33a5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a62     00 A0 00 A0 
33a66     00 A0 00 A0 
33a6a     00 A0 00 A0 
33a6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a72     00 A0 00 A0 
33a76     00 A0 00 A0 
33a7a     00 A0 00 A0 
33a7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a82     00 A0 00 A0 
33a86     00 A0 00 A0 
33a8a     00 A0 00 A0 
33a8e     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
33a92     00 A1 00 A1 
33a96     00 A1 00 A1 
33a9a     00 A1 00 A1 
33a9e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33aa2     00 A1 00 A1 
33aa6     00 A1 00 A1 
33aaa     00 A1 00 A1 
33aae     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ab2     00 A1 00 A1 
33ab6     00 A1 00 A1 
33aba     00 A1 00 A1 
33abe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ac2     00 A1 00 A1 
33ac6     00 A1 00 A1 
33aca     00 A1 00 A1 
33ace     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ad2     00 A1 00 A1 
33ad6     00 A1 00 A1 
33ada     00 A1 00 A1 
33ade     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ae2     00 A1 00 A1 
33ae6     00 A1 00 A1 
33aea     00 6E 00 6E 
33aee     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33af2     00 6E 00 6E 
33af6     00 6E 00 6E 
33afa     00 6E 00 6E 
33afe     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33b02     00 6E 00 6E 
33b06     00 6E 00 6E 
33b0a     00 6E 00 6E 
33b0e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33b12     00 6E 00 6E 
33b16     00 6E 00 6E 
33b1a     00 6E 00 6E 
33b1e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33b22     00 6E 00 6D 
33b26     00 6D 00 6D 
33b2a     00 6D 00 6D 
33b2e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b32     00 6D 00 6D 
33b36     00 6D 00 6D 
33b3a     00 6D 00 6D 
33b3e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b42     00 6D 00 6D 
33b46     00 6D 00 6D 
33b4a     00 6D 00 6D 
33b4e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b52     00 6D 00 6D 
33b56     00 6D 00 6D 
33b5a     00 6D 00 6D 
33b5e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b62     00 6D 00 6D 
33b66     00 6D 00 6D 
33b6a     00 6D 00 6D 
33b6e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b72     00 6D 00 6D 
33b76     00 6D 00 6D 
33b7a     00 6D 00 6D 
33b7e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b82     00 6D 00 6D 
33b86     00 6D 00 6D 
33b8a     00 6D 00 6D 
33b8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b92     00 6D 00 6D 
33b96     00 6D 00 6D 
33b9a     00 6D 00 6D 
33b9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ba2     00 6D 00 6D 
33ba6     00 6D 00 6D 
33baa     00 6D 00 6D 
33bae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bb2     00 6D 00 6D 
33bb6     00 6D 00 6D 
33bba     00 6D 00 6D 
33bbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bc2     00 6D 00 6D 
33bc6     00 6D 00 6D 
33bca     00 6D 00 6D 
33bce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bd2     00 6D 00 6D 
33bd6     00 6C 00 6C 
33bda     00 6C 00 6C 
33bde     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33be2     00 6C 00 6C 
33be6     00 6C 00 6C 
33bea     00 6C 00 6C 
33bee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bf2     00 6C 00 6C 
33bf6     00 6C 00 6C 
33bfa     00 9D 00 9F 
33bfe     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
33c02     00 9F 00 9F 
33c06     00 9F 00 9F 
33c0a     00 A0 00 A0 
33c0e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c12     00 A0 00 A0 
33c16     00 A0 00 A0 
33c1a     00 A0 00 A0 
33c1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c22     00 A0 00 A0 
33c26     00 A0 00 A0 
33c2a     00 A0 00 A0 
33c2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c32     00 A0 00 A0 
33c36     00 A0 00 A0 
33c3a     00 A0 00 A0 
33c3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c42     00 A0 00 A0 
33c46     00 A0 00 A0 
33c4a     00 A0 00 A0 
33c4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c52     00 A0 00 A0 
33c56     00 A0 00 A0 
33c5a     00 A0 00 A0 
33c5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c62     00 A0 00 A0 
33c66     00 A0 00 A0 
33c6a     00 A0 00 A0 
33c6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c72     00 A0 00 A0 
33c76     00 A0 00 A0 
33c7a     00 A0 00 A0 
33c7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c82     01 00 00 00 
33c86     00 00 00 00 
33c8a     00 00 00 00 
33c8e     00 00 00 00 | mouse  file "mouse2.def"
33c92     00 00 00 00 
33c96     00 00 00 00 
33c9a     00 00 00 00 
33c9e     00 00 00 00 | 	byte	$00[16]
33ca2     01 01 00 00 
33ca6     00 00 00 00 
33caa     00 00 00 00 
33cae     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cb2     00 00 00 00 
33cb6     00 00 00 00 
33cba     00 00 00 00 
33cbe     00 00 00 00 | 	byte	$00[16]
33cc2     01 0D 01 00 
33cc6     00 00 00 00 
33cca     00 00 00 00 
33cce     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cd2     00 00 00 00 
33cd6     00 00 00 00 
33cda     00 00 00 00 
33cde     00 00 00 00 | 	byte	$00[16]
33ce2     01 0D 0D 01 
33ce6     00 00 00 00 
33cea     00 00 00 00 
33cee     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cf2     00 00 00 00 
33cf6     00 00 00 00 
33cfa     00 00 00 00 
33cfe     00 00 00 00 | 	byte	$00[16]
33d02     01 0D 0D 0D 
33d06     01 00 00 00 
33d0a     00 00 00 00 
33d0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d12     00 00 00 00 
33d16     00 00 00 00 
33d1a     00 00 00 00 
33d1e     00 00 00 00 | 	byte	$00[16]
33d22     01 0D 0D 0D 
33d26     0D 01 00 00 
33d2a     00 00 00 00 
33d2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d32     00 00 00 00 
33d36     00 00 00 00 
33d3a     00 00 00 00 
33d3e     00 00 00 00 | 	byte	$00[16]
33d42     01 0D 0D 0D 
33d46     0D 0D 01 00 
33d4a     00 00 00 00 
33d4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d52     00 00 00 00 
33d56     00 00 00 00 
33d5a     00 00 00 00 
33d5e     00 00 00 00 | 	byte	$00[16]
33d62     01 0D 0D 0D 
33d66     0D 0D 0D 01 
33d6a     00 00 00 00 
33d6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
33d72     00 00 00 00 
33d76     00 00 00 00 
33d7a     00 00 00 00 
33d7e     00 00 00 00 | 	byte	$00[16]
33d82     01 0D 0D 0D 
33d86     0D 0D 0D 0C 
33d8a     01 00 00 00 
33d8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
33d92     00 00 00 00 
33d96     00 00 00 00 
33d9a     00 00 00 00 
33d9e     00 00 00 00 | 	byte	$00[16]
33da2     01 0D 0D 0D 
33da6     0D 0D 0D 0D 
33daa     0C 01 00 00 
33dae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
33db2     00 00 00 00 
33db6     00 00 00 00 
33dba     00 00 00 00 
33dbe     00 00 00 00 | 	byte	$00[16]
33dc2     01 0D 0D 0D 
33dc6     0D 0D 0D 0D 
33dca     0D 0C 01 00 
33dce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
33dd2     00 00 00 00 
33dd6     00 00 00 00 
33dda     00 00 00 00 
33dde     00 00 00 00 | 	byte	$00[16]
33de2     01 0D 0D 0D 
33de6     0D 0D 0D 0D 
33dea     0D 0D 0B 01 
33dee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
33df2     00 00 00 00 
33df6     00 00 00 00 
33dfa     00 00 00 00 
33dfe     00 00 00 00 | 	byte	$00[16]
33e02     01 0D 0D 0D 
33e06     0C 0D 0D 03 
33e0a     01 01 01 01 
33e0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
33e12     00 00 00 00 
33e16     00 00 00 00 
33e1a     00 00 00 00 
33e1e     00 00 00 00 | 	byte	$00[16]
33e22     01 0D 0D 0C 
33e26     01 09 0D 03 
33e2a     00 00 00 00 
33e2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
33e32     00 00 00 00 
33e36     00 00 00 00 
33e3a     00 00 00 00 
33e3e     00 00 00 00 | 	byte	$00[16]
33e42     01 0D 0C 01 
33e46     00 01 0D 0B 
33e4a     01 00 00 00 
33e4e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
33e52     00 00 00 00 
33e56     00 00 00 00 
33e5a     00 00 00 00 
33e5e     00 00 00 00 | 	byte	$00[16]
33e62     01 0C 01 00 
33e66     00 01 0A 0D 
33e6a     01 00 00 00 
33e6e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
33e72     00 00 00 00 
33e76     00 00 00 00 
33e7a     00 00 00 00 
33e7e     00 00 00 00 | 	byte	$00[16]
33e82     01 01 00 00 
33e86     00 00 01 0D 
33e8a     0B 01 00 00 
33e8e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
33e92     00 00 00 00 
33e96     00 00 00 00 
33e9a     00 00 00 00 
33e9e     00 00 00 00 
33ea2     00 00 00 00 
33ea6     00 00       | 	byte	$00[22]
33ea8     01 0B 0D 01 
33eac     00 00 00 00 
33eb0     00 00 00 00 
33eb4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33eb8     00 00 00 00 
33ebc     00 00 00 00 
33ec0     00 00 00 00 
33ec4     00 00 00 00 
33ec8     00          | 	byte	$00[17]
33ec9     01 01 00 00 
33ecd     00 00 00 00 
33ed1     00 00 00 00 
33ed5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33ed9     00 00 00 00 
      ...             
3407d     00 00 00 00 
34081     00          | 	byte	$00[425]
34082                 | 
34082     00 00       |              	org
34084 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
34088 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3408c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
34090 003             | 
34090 003 00 30 04 F6 |                 mov     psramaddr,#0
34094 004             | 
34094 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
34098 005 20 00 00 FF 
3409c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
340a0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
340a4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
340a8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
340ac 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
340b0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
340b4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
340b8 00d             | 
340b8 00d 20 00 00 FF 
340bc 00e 00 30 04 F1 |                 add 	psramaddr,##16384
340c0 00f E0 03 00 FF 
340c4 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
340c8 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
340cc 012             | 
340cc 012             |                 
340cc 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
340d0 013             |     
340d0 013 01 2C 60 FD |                 cogid 	t11				' get id
340d4 014 00 00 EC FC |                 coginit #0,#0				' start the new program
340d8 015 03 2C 60 FD |                 cogstop t11				' stop the loader
340dc 016             | 
340dc 016 00 00 00 00 | t11 		long 	0
340e0 017 00 FF 07 00 | mailbox 	long 	$7FF00
340e4 018 00 00 00 00 | psramaddr 	long 	0
340e8 019 00 00 00 00 | pslockval	long 	0
340ec 01a 00 00 00 00 | cmd             long    0
340f0 01b 00 00 00 00 | buf1            long    0
340f4 01c 00 40 00 00 | buf2            long    16384
340f8 01d FC 40 03 00 | 	long	@@@_dat_ + 12612
340fc 01e 50 32 20 52 
34100 01f 65 74 72 6F 
34104 020 6D 61 63 68 
34108 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3410c 022 42 41 53 49 
34110 023 43 20 76 65 
34114 024 72 73 69 6F 
34118 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3411c 026 33 31 00 00 | 	byte	$33, $31, $00, $00
34120 027             | 	alignl
34120 027             | _hg010b_spin2_dat_
34120 027             | 
34120 027 00 00 00 00 
34124 028 00 00 00 00 
34128 029 00 00 00 00 
3412c 02a 00 00 00 00 
34130 02b 00 00 00    | vga_font       file "vgafont.def"
34133 02b 7E 81 A5 81 
34137 02c 81 BD 99 81 
3413b 02d 81 7E 00 00 
3413f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34143 02f 7E FF DB FF 
34147 030 FF C3 E7 FF 
3414b 031 FF 7E 00 00 
3414f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34153 033 00 36 7F 7F 
34157 034 7F 7F 3E 1C 
3415b 035 08 00 00 00 
3415f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
34163 037 00 08 1C 3E 
34167 038 7F 3E 1C 08 
3416b 039 00 00 00 00 
3416f 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
34173 03b 18 3C 3C E7 
34177 03c E7 E7 18 18 
3417b 03d 3C 00 00 00 
3417f 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34183 03f 18 3C 7E FF 
34187 040 FF 7E 18 18 
3418b 041 3C 00 00 00 
3418f 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34193 043 00 00 00 18 
34197 044 3C 3C 18 00 
3419b 045 00 00 00 00 
3419f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
341a3 047 FF FF FF E7 
341a7 048 C3 C3 E7 FF 
341ab 049 FF FF FF FF 
341af 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
341b3 04b 00 00 3C 66 
341b7 04c 42 42 66 3C 
341bb 04d 00 00 00 00 
341bf 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
341c3 04f FF FF C3 99 
341c7 050 BD BD 99 C3 
341cb 051 FF FF FF FF 
341cf 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
341d3 053 78 70 58 4C 
341d7 054 1E 33 33 33 
341db 055 33 1E 00 00 
341df 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
341e3 057 3C 66 66 66 
341e7 058 66 3C 18 7E 
341eb 059 18 18 00 00 
341ef 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
341f3 05b FC CC FC 0C 
341f7 05c 0C 0C 0C 0E 
341fb 05d 0F 07 00 00 
341ff 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
34203 05f FE C6 FE C6 
34207 060 C6 C6 C6 E6 
3420b 061 E7 67 03 00 
3420f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34213 063 18 18 DB 3C 
34217 064 E7 3C DB 18 
3421b 065 18 00 00 00 
3421f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34223 067 03 07 0F 1F 
34227 068 7F 1F 0F 07 
3422b 069 03 01 00 00 
3422f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34233 06b 60 70 78 7C 
34237 06c 7F 7C 78 70 
3423b 06d 60 40 00 00 
3423f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34243 06f 18 3C 7E 18 
34247 070 18 18 7E 3C 
3424b 071 18 00 00 00 
3424f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34253 073 66 66 66 66 
34257 074 66 66 66    | 	byte	$66[7]
3425a 075 00 66 66 00 
3425e 076 00 00 00 00 
34262 077 00 FE DB DB 
34266 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3426a 079 D8 D8 D8 00 
3426e 07a 00 00 00 3E 
34272 07b 63 06 1C 36 
34276 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3427a 07d 30 63 3E 00 
3427e 07e 00 00 00 00 
34282 07f 00 00 00 00 
34286 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3428a 081 7F 7F 7F 00 
3428e 082 00 00 00 00 
34292 083 00 18 3C 7E 
34296 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3429a 085 3C 18 7E 00 
3429e 086 00 00 00 00 
342a2 087 00 18 3C 7E 
342a6 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
342aa 089 18 18 18 00 
342ae 08a 00 00 00 00 
342b2 08b 00 18 18 18 
342b6 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
342ba 08d 7E 3C 18 00 
342be 08e 00 00 00 00 
342c2 08f 00 00 00 18 
342c6 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
342ca 091 00 00 00 00 
342ce 092 00 00 00 00 
342d2 093 00 00 00    | 	byte	$00[11]
342d5 094 0C 06 7F 06 
342d9 095 0C 00 00 00 
342dd 096 00 00 00 00 
342e1 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
342e5 098 00 03 03 03 
342e9 099 7F 00 00 00 
342ed 09a 00 00 00 00 
342f1 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
342f5 09c 14 36 7F 36 
342f9 09d 14 00 00 00 
342fd 09e 00 00 00 00 
34301 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
34305 0a0 1C 1C 3E 3E 
34309 0a1 7F 7F 00 00 
3430d 0a2 00 00 00 00 
34311 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34315 0a4 7F 3E 3E 1C 
34319 0a5 1C 08 00 00 
3431d 0a6 00 00 00 00 
34321 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34325 0a8 00 00 00 00 
34329 0a9 00 00 00 00 
3432d 0aa 00 00 00 00 
34331 0ab 00 00       | 	byte	$00[14]
34333 0ab 18 3C 3C 3C 
34337 0ac 18 18 18 00 
3433b 0ad 18 18 00 00 
3433f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34343 0af 66 24 00 00 
34347 0b0 00 00 00 00 
3434b 0b1 00 00 00 00 
3434f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34353 0b3 00 36 36 7F 
34357 0b4 36 36 36 7F 
3435b 0b5 36 36 00 00 
3435f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
34363 0b7 3E 63 43 03 
34367 0b8 3E 60 60 61 
3436b 0b9 63 3E 18 18 
3436f 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
34373 0bb 00 00 43 63 
34377 0bc 30 18 0C 06 
3437b 0bd 63 61 00 00 
3437f 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
34383 0bf 1C 36 36 1C 
34387 0c0 6E 3B 33 33 
3438b 0c1 33 6E 00 00 
3438f 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
34393 0c3 0C 0C 0C 06 
34397 0c4 00 00 00 00 
3439b 0c5 00 00 00 00 
3439f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
343a3 0c7 30 18 0C 0C 
343a7 0c8 0C 0C 0C 0C 
343ab 0c9 18 30 00 00 
343af 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
343b3 0cb 0C 18 30 30 
343b7 0cc 30 30 30 30 
343bb 0cd 18 0C 00 00 
343bf 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
343c3 0cf 00 00 00 66 
343c7 0d0 3C FF 3C 66 
343cb 0d1 00 00 00 00 
343cf 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
343d3 0d3 00 00 00 18 
343d7 0d4 18 7E 18 18 
343db 0d5 00 00 00 00 
343df 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
343e3 0d7 00 00 00 00 
343e7 0d8 00 00 00 00 | 	byte	$00[8]
343eb 0d9 18 18 18 0C 
343ef 0da 00 00 00 00 
343f3 0db 00 00 00 00 
343f7 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
343fb 0dd 00 00 00 00 
343ff 0de 00 00 00 00 
34403 0df 00 00 00 00 
34407 0e0 00 00 00 00 | 	byte	$00[16]
3440b 0e1 18 18 00 00 
3440f 0e2 00 00 00 00 
34413 0e3 00 00 40 60 
34417 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3441b 0e5 03 01 00 00 
3441f 0e6 00 00 00 00 
34423 0e7 1C 36 63 63 
34427 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3442b 0e9 36 1C 00 00 
3442f 0ea 00 00 00 00 
34433 0eb 18 1C 1E 18 
34437 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3443b 0ed 18 7E 00 00 
3443f 0ee 00 00 00 00 
34443 0ef 3E 63 60 30 
34447 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3444b 0f1 63 7F 00 00 
3444f 0f2 00 00 00 00 
34453 0f3 3E 63 60 60 
34457 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3445b 0f5 63 3E 00 00 
3445f 0f6 00 00 00 00 
34463 0f7 30 38 3C 36 
34467 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3446b 0f9 30 78 00 00 
3446f 0fa 00 00 00 00 
34473 0fb 7F 03 03 03 
34477 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3447b 0fd 63 3E 00 00 
3447f 0fe 00 00 00 00 
34483 0ff 1C 06 03 03 
34487 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3448b 101 63 3E 00 00 
3448f 102 00 00 00 00 
34493 103 7F 63 60 60 
34497 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3449b 105 0C 0C 00 00 
3449f 106 00 00 00 00 
344a3 107 3E 63 63 63 
344a7 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
344ab 109 63 3E 00 00 
344af 10a 00 00 00 00 
344b3 10b 3E 63 63 63 
344b7 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
344bb 10d 30 1E 00 00 
344bf 10e 00 00 00 00 
344c3 10f 00 00 00 18 
344c7 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
344cb 111 18 18 00 00 
344cf 112 00 00 00 00 
344d3 113 00 00 00 18 
344d7 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
344db 115 18 18 0C 00 
344df 116 00 00 00 00 
344e3 117 00 60 30 18 
344e7 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
344eb 119 30 60 00 00 
344ef 11a 00 00 00 00 
344f3 11b 00 00 00 7E 
344f7 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
344fb 11d 00 00 00 00 
344ff 11e 00 00 00 00 
34503 11f 00          | 	byte	$00[9]
34504 120 06 0C 18 30 
34508 121 60 30 18 0C 
3450c 122 06 00 00 00 
34510 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34514 124 63 63 30 18 
34518 125 18 18 00 18 
3451c 126 18 00 00 00 
34520 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34524 128 3E 63 63 7B 
34528 129 7B 7B 3B 03 
3452c 12a 3E 00 00 00 
34530 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34534 12c 1C 36 63 63 
34538 12d 7F 63 63 63 
3453c 12e 63 00 00 00 
34540 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34544 130 66 66 66 3E 
34548 131 66 66 66 66 
3454c 132 3F 00 00 00 
34550 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34554 134 66 43 03 03 
34558 135 03 03 43 66 
3455c 136 3C 00 00 00 
34560 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
34564 138 36 66 66 66 
34568 139 66 66 66 36 
3456c 13a 1F 00 00 00 
34570 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
34574 13c 66 46 16 1E 
34578 13d 16 06 46 66 
3457c 13e 7F 00 00 00 
34580 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
34584 140 66 46 16 1E 
34588 141 16 06 06 06 
3458c 142 0F 00 00 00 
34590 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34594 144 66 43 03 03 
34598 145 7B 63 63 66 
3459c 146 5C 00 00 00 
345a0 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
345a4 148 63 63 63 7F 
345a8 149 63 63 63 63 
345ac 14a 63 00 00 00 
345b0 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
345b4 14c 18 18 18 18 
345b8 14d 18 18 18 18 | 	byte	$18[8]
345bc 14e 3C 00 00 00 
345c0 14f 00 00 00 78 
345c4 150 30 30 30 30 
345c8 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
345cc 152 1E 00 00 00 
345d0 153 00 00 00 67 
345d4 154 66 66 36 1E 
345d8 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
345dc 156 67 00 00 00 
345e0 157 00 00 00 0F 
345e4 158 06 06 06 06 
345e8 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
345ec 15a 7F 00 00 00 
345f0 15b 00 00 00 63 
345f4 15c 77 7F 7F 6B 
345f8 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
345fc 15e 63 00 00 00 
34600 15f 00 00 00 63 
34604 160 67 6F 7F 7B 
34608 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3460c 162 63 00 00 00 
34610 163 00 00 00 3E 
34614 164 63 63 63 63 
34618 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3461c 166 3E 00 00 00 
34620 167 00 00 00 3F 
34624 168 66 66 66 3E 
34628 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3462c 16a 0F 00 00 00 
34630 16b 00 00 00 3E 
34634 16c 63 63 63 63 
34638 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3463c 16e 3E 30 70 00 
34640 16f 00 00 00 3F 
34644 170 66 66 66 3E 
34648 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3464c 172 67 00 00 00 
34650 173 00 00 00 3E 
34654 174 63 63 06 1C 
34658 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3465c 176 3E 00 00 00 
34660 177 00 00 00 7E 
34664 178 7E 5A 18 18 
34668 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3466c 17a 3C 00 00 00 
34670 17b 00 00 00 63 
34674 17c 63 63 63 63 
34678 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3467c 17e 3E 00 00 00 
34680 17f 00 00 00 63 
34684 180 63 63 63 63 
34688 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3468c 182 08 00 00 00 
34690 183 00 00 00 63 
34694 184 63 63 63 6B 
34698 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3469c 186 36 00 00 00 
346a0 187 00 00 00 63 
346a4 188 63 36 3E 1C 
346a8 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
346ac 18a 63 00 00 00 
346b0 18b 00 00 00 66 
346b4 18c 66 66 66 3C 
346b8 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
346bc 18e 3C 00 00 00 
346c0 18f 00 00 00 7F 
346c4 190 63 61 30 18 
346c8 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
346cc 192 7F 00 00 00 
346d0 193 00 00 00 3C 
346d4 194 0C 0C 0C 0C 
346d8 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
346dc 196 3C 00 00 00 
346e0 197 00 00 00 00 
346e4 198 01 03 07 0E 
346e8 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
346ec 19a 40 00 00 00 
346f0 19b 00 00 00 3C 
346f4 19c 30 30 30 30 
346f8 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
346fc 19e 3C 00 00 00 
34700 19f 1C 36 00 00 
34704 1a0 00 00 00 00 
34708 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3470c 1a2 00 00 00 00 
34710 1a3 00 00 00 00 
34714 1a4 00 00 00 00 
34718 1a5 00 00 00 00 
3471c 1a6 00          | 	byte	$00[17]
3471d 1a6 FF 00 00 0C 
34721 1a7 18 00 00 00 
34725 1a8 00 00 00 00 
34729 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3472d 1aa 00 00 00 00 
34731 1ab 00 00 00 00 
34735 1ac 00          | 	byte	$00[9]
34736 1ac 1E 30 3E 33 
3473a 1ad 33 33 6E 00 
3473e 1ae 00 00 00 00 
34742 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
34746 1b0 1E 36 66 66 
3474a 1b1 66 66 3E 00 
3474e 1b2 00 00 00 00 
34752 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34756 1b4 3E 63 03 03 
3475a 1b5 03 63 3E 00 
3475e 1b6 00 00 00 00 
34762 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
34766 1b8 3C 36 33 33 
3476a 1b9 33 33 6E 00 
3476e 1ba 00 00 00 00 
34772 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34776 1bc 3E 63 7F 03 
3477a 1bd 03 63 3E 00 
3477e 1be 00 00 00 00 
34782 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
34786 1c0 0C 1E 0C 0C 
3478a 1c1 0C 0C 1E 00 
3478e 1c2 00 00 00 00 
34792 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34796 1c4 6E 33 33 33 
3479a 1c5 33 33 3E 30 
3479e 1c6 33 1E 00 00 
347a2 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
347a6 1c8 36 6E 66 66 
347aa 1c9 66 66 67 00 
347ae 1ca 00 00 00 00 
347b2 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
347b6 1cc 1C 18 18 18 
347ba 1cd 18 18 3C 00 
347be 1ce 00 00 00 00 
347c2 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
347c6 1d0 70 60 60 60 
347ca 1d1 60 60 60 66 
347ce 1d2 66 3C 00 00 
347d2 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
347d6 1d4 66 36 1E 1E 
347da 1d5 36 66 67 00 
347de 1d6 00 00 00 00 
347e2 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
347e6 1d8 18 18 18 18 
347ea 1d9 18 18       | 	byte	$18[6]
347ec 1da 3C 00 00 00 
347f0 1db 00 00 00 00 
347f4 1dc 00 00 37 7F 
347f8 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
347fc 1de 63 00 00 00 
34800 1df 00 00 00 00 
34804 1e0 00 00 3B 66 
34808 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3480c 1e2 66 00 00 00 
34810 1e3 00 00 00 00 
34814 1e4 00 00 3E 63 
34818 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3481c 1e6 3E 00 00 00 
34820 1e7 00 00 00 00 
34824 1e8 00 00 3B 66 
34828 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3482c 1ea 3E 06 06 0F 
34830 1eb 00 00 00 00 
34834 1ec 00 00 6E 33 
34838 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3483c 1ee 3E 30 30 78 
34840 1ef 00 00 00 00 
34844 1f0 00 00 3B 6E 
34848 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3484c 1f2 0F 00 00 00 
34850 1f3 00 00 00 00 
34854 1f4 00 00 3E 63 
34858 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3485c 1f6 3E 00 00 00 
34860 1f7 00 00 00 08 
34864 1f8 0C 0C 3F 0C 
34868 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3486c 1fa 38 00 00 00 
34870 1fb 00 00 00 00 
34874 1fc 00 00 33 33 
34878 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3487c 1fe 6E 00 00 00 
34880 1ff 00 00 00 00 
34884 200 00 00 63 63 
34888 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3488c 202 1C 00 00 00 
34890 203 00 00 00 00 
34894 204 00 00 63 63 
34898 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3489c 206 36 00 00 00 
348a0 207 00 00 00 00 
348a4 208 00 00 63 36 
348a8 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
348ac 20a 63 00 00 00 
348b0 20b 00 00 00 00 
348b4 20c 00 00 63 63 
348b8 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
348bc 20e 7E 60 30 1F 
348c0 20f 00 00 00 00 
348c4 210 00 00 7F 33 
348c8 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
348cc 212 7F 00 00 00 
348d0 213 00 00 00 70 
348d4 214 18 18 18 0E 
348d8 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
348dc 216 70 00 00 00 
348e0 217 00 00 00 18 
348e4 218 18 18 18 18 
348e8 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
348ec 21a 18 00 00 00 
348f0 21b 00 00 00 0E 
348f4 21c 18 18 18 70 
348f8 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
348fc 21e 0E 00 00 00 
34900 21f 6E 3B 00 00 
34904 220 00 00 00 00 
34908 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3490c 222 00 00 00 00 
34910 223 00 00 00 00 
34914 224 00 00       | 	byte	$00[10]
34916 224 08 1C 36 63 
3491a 225 63 63 7F 00 
3491e 226 00 00 00 00 
34922 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34926 228 03 03 03 03 
3492a 229 43 66 3C 18 
3492e 22a 30 1E 00 00 
34932 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34936 22c 33 33 33 33 
3493a 22d 33 33       | 	byte	$33[6]
3493c 22e 6E 00 00 00 
34940 22f 00 00 60 30 
34944 230 18 00 3E 63 
34948 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3494c 232 3E 00 00 00 
34950 233 00 00 08 1C 
34954 234 36 00 1E 30 
34958 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3495c 236 6E 00 00 00 
34960 237 00 00 00 00 
34964 238 33 00 1E 30 
34968 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3496c 23a 6E 00 00 00 
34970 23b 00 00 1C 36 
34974 23c 1C 00 33 33 
34978 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3497c 23e 6E 00 00 00 
34980 23f 00 00 60 30 
34984 240 18 00 3E 63 
34988 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3498c 242 3E 00 00 00 
34990 243 00 00 00 00 
34994 244 00 00 3E 63 
34998 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3499c 246 3E 18 30 1E 
349a0 247 00 00 00 1C 
349a4 248 58 78 38 18 
349a8 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
349ac 24a 3C 00 00 00 
349b0 24b 00 00 00 00 
349b4 24c 63 00 3E 63 
349b8 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
349bc 24e 3E 00 00 00 
349c0 24f 66 33 00 3E 
349c4 250 63 63 63 63 
349c8 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
349cc 252 3E 00 00 00 
349d0 253 00 00 CC 66 
349d4 254 33 00 3E 63 
349d8 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
349dc 256 3E 00 00 00 
349e0 257 00 00 18 3C 
349e4 258 66 00 1C 18 
349e8 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
349ec 25a 3C 00 00 00 
349f0 25b 30 18 00 7F 
349f4 25c 63 61 30 18 
349f8 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
349fc 25e 7F 00 00 00 
34a00 25f 00 63 00 08 
34a04 260 1C 36 63 63 
34a08 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34a0c 262 63 00 00 00 
34a10 263 30 18 00 3C 
34a14 264 66 43 03 03 
34a18 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34a1c 266 3C 00 00 00 
34a20 267 30 18 00 7F 
34a24 268 66 46 16 1E 
34a28 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34a2c 26a 7F 00 00 00 
34a30 26b 0C 06 00 0F 
34a34 26c 06 06 06 06 
34a38 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34a3c 26e 7F 00 00 00 
34a40 26f 30 18 00 1C 
34a44 270 18 18 18 18 
34a48 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34a4c 272 3C 00 00 00 
34a50 273 00 00 08 1C 
34a54 274 36 00 3E 63 
34a58 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34a5c 276 3E 00 00 00 
34a60 277 00 00 00 00 
34a64 278 63 00 3E 63 
34a68 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34a6c 27a 3E 00 00 00 
34a70 27b 00 00 00 6F 
34a74 27c 46 26 06 06 
34a78 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34a7c 27e 7F 00 00 00 
34a80 27f 00 00 00 6E 
34a84 280 4C 2C 0C 0C 
34a88 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34a8c 282 1E 00 00 00 
34a90 283 30 18 00 3E 
34a94 284 63 63 06 1C 
34a98 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34a9c 286 3E 00 00 00 
34aa0 287 00 00 60 30 
34aa4 288 18 00 3E 63 
34aa8 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34aac 28a 3E 00 00 00 
34ab0 28b 00 63 00 3E 
34ab4 28c 63 63 63 63 
34ab8 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34abc 28e 3E 00 00 00 
34ac0 28f 00 63 00 63 
34ac4 290 63 63 63 63 
34ac8 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34acc 292 3E 00 00 00 
34ad0 293 6C 38 00 7E 
34ad4 294 7E 5A 18 18 
34ad8 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34adc 296 3C 00 00 00 
34ae0 297 00 00 60 48 
34ae4 298 2C 0C 3F 0C 
34ae8 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34aec 29a 38 00 00 00 
34af0 29b 00 00 00 0F 
34af4 29c 26 36 1E 0E 
34af8 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34afc 29e 7F 00 00 00 
34b00 29f 00 00 00 00 
34b04 2a0 00 63 36 1C 
34b08 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34b0c 2a2 00 00 00 00 
34b10 2a3 00 00       | 	byte	$00[6]
34b12 2a3 36 1C 08 00 
34b16 2a4 3E 63 03 03 
34b1a 2a5 03 63 3E 00 
34b1e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34b22 2a7 30 18 0C 00 
34b26 2a8 1E 30 3E 33 
34b2a 2a9 33 33 6E 00 
34b2e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34b32 2ab 60 30 18 00 
34b36 2ac 1C 18 18 18 
34b3a 2ad 18 18 3C 00 
34b3e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34b42 2af 60 30 18 00 
34b46 2b0 3E 63 63 63 
34b4a 2b1 63 63 3E 00 
34b4e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34b52 2b3 30 18 0C 00 
34b56 2b4 33 33 33 33 
34b5a 2b5 33 33 6E 00 
34b5e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34b62 2b7 00 08 1C 36 
34b66 2b8 63 63 7F 63 
34b6a 2b9 63 63 63 18 
34b6e 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34b72 2bb 00 00 00 00 
34b76 2bc 1E 30 3E 33 
34b7a 2bd 33 33 6E 18 
34b7e 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34b82 2bf 00 7F 63 61 
34b86 2c0 30 18 0C 06 
34b8a 2c1 43 63 7F 00 
34b8e 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34b92 2c3 36 1C 08 00 
34b96 2c4 7F 33 18 0C 
34b9a 2c5 06 63 7F 00 
34b9e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34ba2 2c7 00 7F 66 46 
34ba6 2c8 16 1E 16 06 
34baa 2c9 46 66 7F 18 
34bae 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34bb2 2cb 00 00 00 00 
34bb6 2cc 3E 63 7F 03 
34bba 2cd 03 63 3E 18 
34bbe 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34bc2 2cf 00 3C 66 03 
34bc6 2d0 1F 03 0F 03 
34bca 2d1 03 66 3C 00 
34bce 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34bd2 2d3 60 30 18 00 
34bd6 2d4 7F 33 18 0C 
34bda 2d5 06 63 7F 00 
34bde 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34be2 2d7 00 3C 66 43 
34be6 2d8 03 03 03 03 
34bea 2d9 43 66 3C 00 
34bee 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34bf2 2db 00 00 00 00 
34bf6 2dc 3E 63 06 1C 
34bfa 2dd 30 63 3E 18 
34bfe 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34c02 2df 00 00 00 00 
34c06 2e0 00 00       | 	byte	$00[6]
34c08 2e1 6C 36 1B 36 
34c0c 2e2 6C 00 00 00 
34c10 2e3 00 00 00 00 
34c14 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34c18 2e5 1B 36 6C 36 
34c1c 2e6 1B 00 00 00 
34c20 2e7 88 22 88 22 
34c24 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34c28 2e9 88 22 88 22 
34c2c 2ea 88 22 88 22 
34c30 2eb AA 55 AA 55 
34c34 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34c38 2ed AA 55 AA 55 
34c3c 2ee AA 55 AA 55 
34c40 2ef BB EE BB EE 
34c44 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34c48 2f1 BB EE BB EE 
34c4c 2f2 BB EE BB EE 
34c50 2f3 18 18 18 18 
34c54 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34c58 2f5 18 18 18 18 
34c5c 2f6 18 18 18 18 
34c60 2f7 18 18 18 18 
34c64 2f8 18 18 18    | 	byte	$18[15]
34c67 2f8 1F 18 18 18 
34c6b 2f9 18 18 18 18 
34c6f 2fa 18 30 18 00 
34c73 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34c77 2fc 63 7F 63 63 
34c7b 2fd 63 63 00 00 
34c7f 2fe 00 1C 36 00 
34c83 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34c87 300 63 7F 63 63 
34c8b 301 63 63 00 00 
34c8f 302 00 36 1C 00 
34c93 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34c97 304 1E 16 06 46 
34c9b 305 66 7F 00 00 
34c9f 306 00 00 00 00 
34ca3 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34ca7 308 1C 30 60 63 
34cab 309 63 3E 18 30 
34caf 30a 1E 6C 6C 6C 
34cb3 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34cb7 30c 6F 6C 6C 6C 
34cbb 30d 6C 6C 6C 6C 
34cbf 30e 6C 6C 6C 6C 
34cc3 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34cc7 310 6C 6C 6C 6C 
34ccb 311 6C 6C 6C 6C 
34ccf 312 6C          | 	byte	$6c[9]
34cd0 313 00 00 00 00 
34cd4 314 00          | 	byte	$00[5]
34cd5 314 7F 60 6F 6C 
34cd9 315 6C 6C 6C 6C 
34cdd 316 6C 6C 6C 6C 
34ce1 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34ce5 318 6F 60 7F 00 
34ce9 319 00 00 00 00 
34ced 31a 00 00 00 18 
34cf1 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34cf5 31c 61 30 18 0C 
34cf9 31d 06 43 63 7F 
34cfd 31e 00 00 00 00 
34d01 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34d05 320 00 7F 33 18 
34d09 321 0C 06 63 7F 
34d0d 322 00 00 00 00 
34d11 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34d15 324 00 00 1F 18 
34d19 325 18 18 18 18 
34d1d 326 18 18 18 18 
34d21 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d25 328 18 18 F8 00 
34d29 329 00 00 00 00 
34d2d 32a 00 00 00 18 
34d31 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34d35 32c 18 18 FF 00 
34d39 32d 00 00 00 00 
34d3d 32e 00 00 00 00 
34d41 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d45 330 00 00 FF 18 
34d49 331 18 18 18 18 
34d4d 332 18 18 18 18 
34d51 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d55 334 18 18 F8 18 
34d59 335 18 18 18 18 
34d5d 336 18 18 18 00 
34d61 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34d65 338 00 00 FF 00 
34d69 339 00 00 00 00 
34d6d 33a 00 00 00 18 
34d71 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34d75 33c 18 18 FF 18 
34d79 33d 18 18 18 18 
34d7d 33e 18 18 18 63 
34d81 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34d85 340 36 63 63 7F 
34d89 341 63 63 63 63 
34d8d 342 00 00 00 00 
34d91 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34d95 344 00 1E 30 3E 
34d99 345 33 33 33 6E 
34d9d 346 00 00 00 6C 
34da1 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34da5 348 EC 0C FC 00 
34da9 349 00 00 00 00 
34dad 34a 00 00 00 00 
34db1 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34db5 34c FC 0C EC 6C 
34db9 34d 6C 6C 6C 6C 
34dbd 34e 6C 6C 6C 6C 
34dc1 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34dc5 350 EF 00 FF 00 
34dc9 351 00 00 00 00 
34dcd 352 00 00 00 00 
34dd1 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34dd5 354 FF 00 EF 6C 
34dd9 355 6C 6C 6C 6C 
34ddd 356 6C 6C 6C 6C 
34de1 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34de5 358 EC 0C EC 6C 
34de9 359 6C 6C 6C 6C 
34ded 35a 6C 6C 6C 00 
34df1 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34df5 35c FF 00 FF 00 
34df9 35d 00 00 00 00 
34dfd 35e 00 00 00 6C 
34e01 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34e05 360 EF 00 EF 6C 
34e09 361 6C 6C 6C 6C 
34e0d 362 6C 6C 6C 00 
34e11 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34e15 364 63 3E 63 63 
34e19 365 63 63 3E 63 
34e1d 366 00 00 00 00 
34e21 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34e25 368 30 3C 36 33 
34e29 369 33 33 33 6E 
34e2d 36a 00 00 00 00 
34e31 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34e35 36c 66 66 6F 66 
34e39 36d 66 66 36 1F 
34e3d 36e 00 00 00 36 
34e41 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34e45 370 66 66 66 66 
34e49 371 66 66       | 	byte	$66[6]
34e4b 371 36 1F 00 00 
34e4f 372 00 00 63 00 
34e53 373 7F 66 46 16 
34e57 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34e5b 375 66 7F 00 00 
34e5f 376 00 6C 38 00 
34e63 377 38 30 30 3C 
34e67 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34e6b 379 33 6E 00 00 
34e6f 37a 00 36 1C 00 
34e73 37b 63 67 6F 7F 
34e77 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34e7b 37d 63 63 00 00 
34e7f 37e 00 30 18 00 
34e83 37f 3C 18 18 18 
34e87 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34e8b 381 18 3C 00 00 
34e8f 382 00 3C 66 00 
34e93 383 3C 18 18 18 
34e97 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34e9b 385 18 3C 00 00 
34e9f 386 00 00 00 36 
34ea3 387 1C 08 00 3E 
34ea7 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
34eab 389 63 3E 00 00 
34eaf 38a 00 18 18 18 
34eb3 38b 18 18 18 18 
34eb7 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
34ebb 38d 00 00 00 00 
34ebf 38e 00 00 00 00 
34ec3 38f 00 00 00 00 | 	byte	$00[12]
34ec7 390 F8 18 18 18 
34ecb 391 18 18 18 18 
34ecf 392 18 FF FF FF 
34ed3 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
34ed7 394 FF FF FF FF 
34edb 395 FF FF FF FF 
34edf 396 FF          | 	byte	$ff[9]
34ee0 397 00 00 00 00 
34ee4 398 00 00 00    | 	byte	$00[7]
34ee7 398 FF FF FF FF 
34eeb 399 FF FF FF FF 
34eef 39a FF          | 	byte	$ff[9]
34ef0 39b 00 00 00 7E 
34ef4 39c 7E 5A 18 18 
34ef8 39d 18 18 18 18 
34efc 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
34f00 39f 1C 36 1C 63 
34f04 3a0 63 63 63 63 
34f08 3a1 63 63 63 63 
34f0c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f10 3a3 FF FF FF FF 
34f14 3a4 FF FF FF    | 	byte	$ff[7]
34f17 3a4 00 00 00 00 
34f1b 3a5 00 00 00 00 
34f1f 3a6 00          | 	byte	$00[9]
34f20 3a7 30 18 00 3E 
34f24 3a8 63 63 63 63 
34f28 3a9 63 63 63 63 
34f2c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f30 3ab 00 00 00 1E 
34f34 3ac 33 33 33 1B 
34f38 3ad 33 63 63 63 
34f3c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
34f40 3af 1C 36 00 3E 
34f44 3b0 63 63 63 63 
34f48 3b1 63 63 63 63 
34f4c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f50 3b3 30 18 00 63 
34f54 3b4 67 6F 7F 7B 
34f58 3b5 73 63 63 63 
34f5c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
34f60 3b7 00 00 60 30 
34f64 3b8 18 00 3B 66 
34f68 3b9 66 66 66 66 
34f6c 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34f70 3bb 00 00 36 1C 
34f74 3bc 08 00 3B 66 
34f78 3bd 66 66 66 66 
34f7c 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34f80 3bf 36 1C 00 3E 
34f84 3c0 63 63 06 1C 
34f88 3c1 30 60 63 63 
34f8c 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
34f90 3c3 00 00 36 1C 
34f94 3c4 08 00 3E 63 
34f98 3c5 06 1C 30 63 
34f9c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
34fa0 3c7 30 18 00 3F 
34fa4 3c8 66 66 66 3E 
34fa8 3c9 36 66 66 66 
34fac 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
34fb0 3cb 30 18 00 63 
34fb4 3cc 63 63 63 63 
34fb8 3cd 63 63 63 63 
34fbc 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34fc0 3cf 00 00 60 30 
34fc4 3d0 18 00 3B 6E 
34fc8 3d1 66 06 06 06 
34fcc 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
34fd0 3d3 66 33 00 63 
34fd4 3d4 63 63 63 63 
34fd8 3d5 63 63 63 63 
34fdc 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34fe0 3d7 00 00 60 30 
34fe4 3d8 18 00 63 63 
34fe8 3d9 63 63 63 63 
34fec 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
34ff0 3db 30 18 00 66 
34ff4 3dc 66 66 66 3C 
34ff8 3dd 18 18 18 18 
34ffc 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
35000 3df 00 00 00 08 
35004 3e0 0C 0C 3F 0C 
35008 3e1 0C 0C 0C 6C 
3500c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35010 3e3 30 18 00 00 
35014 3e4 00 00 00 00 
35018 3e5 00 00 00 00 
3501c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35020 3e7 00 00 00 00 
35024 3e8 00 00 00 00 | 	byte	$00[8]
35028 3e9 7F 00 00 00 
3502c 3ea 00 00 00 00 
35030 3eb 66 33 00 00 
35034 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
35038 3ed 00 00 00 00 
3503c 3ee 00 00 00 00 
35040 3ef 00 00 00 00 
35044 3f0 00 00 00 00 
35048 3f1 00 00 00 00 
3504c 3f2 00          | 	byte	$00[21]
3504d 3f2 0C 06 3C 36 
35051 3f3 1C 00 00 00 
35055 3f4 00 00 00 00 
35059 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3505d 3f6 00 00 00 63 
35061 3f7 3E 00 00 00 
35065 3f8 00 00 00 00 
35069 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3506d 3fa 00 00 00 00 
35071 3fb 3E 63 06 1C 
35075 3fc 36 63 63 36 
35079 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3507d 3fe 00 00 00 00 
35081 3ff 00 00 00 00 | 	byte	$00[8]
35085 400 18 00 7E 00 
35089 401 18 00 00 00 
3508d 402 00 00 00 00 
35091 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35095 404 00 00 00 00 
35099 405 00 00 00 00 | 	byte	$00[8]
3509d 406 18 30 1E 00 
350a1 407 00 00 1C 36 
350a5 408 36 1C 00 00 
350a9 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
350ad 40a 00 00 00 00 
350b1 40b 63 00 00 00 
350b5 40c 00 00 00 00 
350b9 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350bd 40e 00 00 00 18 
350c1 40f 18 00 00 00 
350c5 410 00 00 00 00 
350c9 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350cd 412 00 00 00 00 
350d1 413 00          | 	byte	$00[5]
350d2 413 CC 66 33 00 
350d6 414 33 33 33 33 
350da 415 33 33 6E 00 
350de 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
350e2 417 00 3F 66 66 
350e6 418 66 3E 36 66 
350ea 419 66 66 6F 00 
350ee 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
350f2 41b 36 1C 08 00 
350f6 41c 3B 6E 66 06 
350fa 41d 06 06 0F 00 
350fe 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
35102 41f 00 00 00 7E 
35106 420 7E 7E 7E 7E 
3510a 421 7E 7E 00 00 
3510e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35112 423 00 00 00 00 
35116 424 00 00 00 00 
3511a 425 00 00 00 00 
3511e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35120 427             | 'vga_font       file "vgafont.def"
35120 427 00 00 00 00 
      ...             
35150 433 00 00 00 00 
35154 434 00 00 00    | st_font        file "st4font.def"
35157 434 FF FF 00 00 
3515b 435 00 00 00 00 
3515f 436 00 18 18 18 
35163 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35167 438 18 18 18 18 
3516b 439 18 18 18 18 
3516f 43a 18          | 	byte	$18[9]
35170 43b 00 00 00 00 
35174 43c 00 00 00    | 	byte	$00[7]
35177 43c FF FF 18 18 
3517b 43d 18 18 18 18 
3517f 43e 18 18 18 18 
35183 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35187 440 FF FF 00 00 
3518b 441 00 00 00 00 
3518f 442 00 18 18 18 
35193 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35197 444 1F 1F 18 18 
3519b 445 18 18 18 18 
3519f 446 18 18 18 18 
351a3 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
351a7 448 F8 F8 18 18 
351ab 449 18 18 18 18 
351af 44a 18 00 00 00 
351b3 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
351b7 44c 1F 1F 18 18 
351bb 44d 18 18 18 18 
351bf 44e 18 00 00 00 
351c3 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
351c7 450 F8 F8 18 18 
351cb 451 18 18 18 18 
351cf 452 18 18 18 18 
351d3 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
351d7 454 1F 1F 00 00 
351db 455 00 00 00 00 
351df 456 00 18 18 18 
351e3 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351e7 458 F8 F8 00 00 
351eb 459 00 00 00 00 
351ef 45a 00 18 18 18 
351f3 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351f7 45c FF FF 18 18 
351fb 45d 18 18 18 18 
351ff 45e 18 00 00 18 
35203 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
35207 460 66 7E 7E 66 
3520b 461 66 66 66 30 
3520f 462 18 00 00 7E 
35213 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
35217 464 3E 06 06 06 
3521b 465 06 7E 7E 18 
3521f 466 0C 30 18 3C 
35223 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
35227 468 06 06 06 66 
3522b 469 66 7E 3C 00 
3522f 46a 00 30 18 66 
35233 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
35237 46c 7E 7E 76 76 
3523b 46d 66 66 66 00 
3523f 46e 00 30 18 7C 
35243 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
35247 470 1C 38 70 60 
3524b 471 60 7E 3E 00 
3524f 472 00 30 18 7E 
35253 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
35257 474 18 0C 0C 06 
3525b 475 06 7E 7E 00 
3525f 476 00 18 18 00 
35263 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
35267 478 18 18 0C 0C 
3526b 479 06 7E 7E 00 
3526f 47a 00 30 18 3C 
35273 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
35277 47c 66 66 66 66 
3527b 47d 66          | 	byte	$66[5]
3527c 47e 7E 3C 00 00 
35280 47f 00 00 06 06 
35284 480 06 06 16 1E 
35288 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3528c 482 7E 7E 00 00 
35290 483 00 00 00 00 
35294 484 00 3C 7C 60 
35298 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3529c 486 7E 7C 30 18 
352a0 487 00 00 00 00 
352a4 488 00 3C 7E 66 
352a8 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
352ac 48a 7E 7C 18 0C 
352b0 48b 00 00 30 18 
352b4 48c 00 3C 3E 06 
352b8 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
352bc 48e 7E 7C 00 00 
352c0 48f 00 00 30 18 
352c4 490 00 3E 7E 66 
352c8 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
352cc 492 66 66 00 00 
352d0 493 00 00 30 18 
352d4 494 00 7C 7E 06 
352d8 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
352dc 496 7E 3E 00 00 
352e0 497 00 00 30 18 
352e4 498 00 7E 7E 30 
352e8 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
352ec 49a 7E 7E 00 00 
352f0 49b 00 00 18 18 
352f4 49c 00 7E 7E 30 
352f8 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
352fc 49e 7E 7E 00 00 
35300 49f 00 00 30 18 
35304 4a0 00 3C 7E 66 
35308 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3530c 4a2 7E 3C 00 00 
35310 4a3 00 00 1C 1C 
35314 4a4 18 18 38 3C 
35318 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3531c 4a6 3C 3C 00 00 
35320 4a7 00 00 00 00 
35324 4a8 00 00 00 00 
35328 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3532c 4aa 00 00 00 00 
35330 4ab 00 00       | 	byte	$00[6]
35332 4ab 18 18 18 18 
35336 4ac 18 18 18 18 | 	byte	$18[8]
3533a 4ad 00 00 18 18 
3533e 4ae 00 00 00 00 
35342 4af 66 66 66 66 
35346 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3534a 4b1 00 00 00 00 
3534e 4b2 00 00 00 00 
35352 4b3 00          | 	byte	$00[9]
35353 4b3 66 66 FF FF 
35357 4b4 66 66 FF FF 
3535b 4b5 66 66 00 00 
3535f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
35363 4b7 7C 7E 06 06 
35367 4b8 3E 7C 60 60 
3536b 4b9 7E 3E 18 18 
3536f 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
35373 4bb 66 30 30 18 
35377 4bc 18 0C 0C 66 
3537b 4bd 66 00 00 00 
3537f 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
35383 4bf 66 66 3C 1C 
35387 4c0 1C FC FE 66 
3538b 4c1 66 FE FC 00 
3538f 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
35393 4c3 18 18 18 18 
35397 4c4 00 00 00 00 
3539b 4c5 00 00 00 00 
3539f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
353a3 4c7 18 1C 0C 0C 
353a7 4c8 0C 0C 0C 0C 
353ab 4c9 1C 18 30 00 
353af 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
353b3 4cb 18 38 30 30 
353b7 4cc 30 30 30 30 
353bb 4cd 38 18 0C 00 
353bf 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
353c3 4cf 66 66 3C 3C 
353c7 4d0 FF FF 3C 3C 
353cb 4d1 66 66 00 00 
353cf 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
353d3 4d3 00 18 18 18 
353d7 4d4 7E 7E 18 18 
353db 4d5 18 00 00 00 
353df 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
353e3 4d7 00 00 00 00 
353e7 4d8 00 00       | 	byte	$00[6]
353e9 4d9 18 18 18 18 
353ed 4da 18          | 	byte	$18[5]
353ee 4da 0C 04 00 00 
353f2 4db 00 00 00 00 
353f6 4dc 7E 7E 00 00 
353fa 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
353fe 4de 00 00 00 00 
35402 4df 00 00 00 00 
35406 4e0 00 00 00 00 
3540a 4e1 00          | 	byte	$00[13]
3540b 4e1 18 18 18 00 
3540f 4e2 00 00 00 60 
35413 4e3 60 60 30 30 
35417 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3541b 4e5 06 06 06 00 
3541f 4e6 00 00 00 3C 
35423 4e7 7E 66 66 66 
35427 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3542b 4e9 66 7E 3C 00 
3542f 4ea 00 00 00 18 
35433 4eb 18 1C 1C 18 
35437 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3543b 4ed 18 7E 7E 00 
3543f 4ee 00 00 00 3C 
35443 4ef 7E 66 66 30 
35447 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3544b 4f1 0C 7E 7E 00 
3544f 4f2 00 00 00 7E 
35453 4f3 7E 30 30 18 
35457 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3545b 4f5 66 7E 3C 00 
3545f 4f6 00 00 00 30 
35463 4f7 30 38 38 3C 
35467 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3546b 4f9 7E 30 30 00 
3546f 4fa 00 00 00 7E 
35473 4fb 7E 06 06 3E 
35477 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3547b 4fd 66 7E 3C 00 
3547f 4fe 00 00 00 38 
35483 4ff 3C 0E 06 06 
35487 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3548b 501 66 7E 3C 00 
3548f 502 00 00 00 7E 
35493 503 7E 60 60 30 
35497 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3549b 505 0C 0C 0C 00 
3549f 506 00 00 00 3C 
354a3 507 7E 66 66 3C 
354a7 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
354ab 509 66 7E 3C 00 
354af 50a 00 00 00 3C 
354b3 50b 7E 66 66 7E 
354b7 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
354bb 50d 70 3C 1C 00 
354bf 50e 00 00 00 00 
354c3 50f 00 00 18 18 
354c7 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
354cb 511 18 18 18 00 
354cf 512 00 00 00 00 
354d3 513 00 00 18 18 
354d7 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
354db 515 18 18 18 0C 
354df 516 04 00 00 00 
354e3 517 70 38 1C 0E 
354e7 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
354eb 519 70 00 00 00 
354ef 51a 00 00 00 00 
354f3 51b 00 00 7E 7E 
354f7 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
354fb 51d 00 00 00 00 
354ff 51e 00 00 00 00 | 	byte	$00[8]
35503 51f 0E 1C 38 70 
35507 520 E0 70 38 1C 
3550b 521 0E 00 00 00 
3550f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35513 523 7E 66 66 30 
35517 524 30 18 18 18 
3551b 525 00 18 18 00 
3551f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35523 527 7E 66 66 66 
35527 528 66 36 06 66 
3552b 529 66 7E 3C 00 
3552f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35533 52b 3C 7E 66 66 
35537 52c 66 7E 7E 66 
3553b 52d 66 66 66 00 
3553f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35543 52f 7E 66 66 7E 
35547 530 3E 66 66 66 
3554b 531 66 7E 3E 00 
3554f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35553 533 7E 66 66 06 
35557 534 06 06 06 66 
3555b 535 66 7E 3C 00 
3555f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
35563 537 7E 66 66 66 
35567 538 66 66 66 66 
3556b 539 66 7E 3E 00 
3556f 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
35573 53b 7E 06 06 3E 
35577 53c 3E 06 06 06 
3557b 53d 06 7E 7E 00 
3557f 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
35583 53f 7E 06 06 3E 
35587 540 3E 06 06 06 
3558b 541 06 06 06 00 
3558f 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
35593 543 7E 06 06 76 
35597 544 76 66 66 66 
3559b 545 66 7E 3C 00 
3559f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
355a3 547 66 66 66 7E 
355a7 548 7E 66 66 66 
355ab 549 66 66 66 00 
355af 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
355b3 54b 7E 18 18 18 
355b7 54c 18 18 18 18 
355bb 54d 18 7E 7E 00 
355bf 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
355c3 54f 60 60 60 60 
355c7 550 60 60 60    | 	byte	$60[7]
355ca 551 66 66 7E 3C 
355ce 552 00 00 00 00 
355d2 553 66 66 36 36 
355d6 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
355da 555 66 66 C6 C6 
355de 556 00 00 00 00 
355e2 557 06 06 06 06 
355e6 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
355ea 559 06 06 7E 7E 
355ee 55a 00 00 00 00 
355f2 55b C6 C6 EE EE 
355f6 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
355fa 55d C6 C6 C6 C6 
355fe 55e 00 00 00 00 
35602 55f 66 66 66 6E 
35606 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3560a 561 76 66 66 66 
3560e 562 00 00 00 00 
35612 563 3C 7E 66 66 
35616 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3561a 565 66 66 7E 3C 
3561e 566 00 00 00 00 
35622 567 3E 7E 66 66 
35626 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3562a 569 06 06 06 06 
3562e 56a 00 00 00 00 
35632 56b 3C 7E 66 66 
35636 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3563a 56d 66 56 3E 6C 
3563e 56e 00 00 00 00 
35642 56f 3E 7E 66 66 
35646 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3564a 571 66 66 C6 C6 
3564e 572 00 00 00 00 
35652 573 7C 7E 06 06 
35656 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3565a 575 60 60 7E 3E 
3565e 576 00 00 00 00 
35662 577 7E 7E 18 18 
35666 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3566a 579 18 18 18 18 
3566e 57a 00 00 00 00 
35672 57b 66 66 66 66 
35676 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3567a 57d 66 66 7E 3C 
3567e 57e 00 00 00 00 
35682 57f 66 66 66 66 
35686 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3568a 581 3C 3C 18 18 
3568e 582 00 00 00 00 
35692 583 C6 C6 C6 C6 
35696 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3569a 585 FE EE C6 82 
3569e 586 00 00 00 00 
356a2 587 66 66 66 3C 
356a6 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
356aa 589 3C 66 66 66 
356ae 58a 00 00 00 00 
356b2 58b 66 66 66 66 
356b6 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
356ba 58d 18 18 18 18 
356be 58e 00 00 00 00 
356c2 58f 7E 7E 30 30 
356c6 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
356ca 591 06 06 7E 7E 
356ce 592 00 00 00 00 
356d2 593 3C 3C 0C 0C 
356d6 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
356da 595 0C 0C 3C 3C 
356de 596 00 00 00 00 
356e2 597 06 06 0C 0C 
356e6 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
356ea 599 60 60 C0 C0 
356ee 59a 00 00 00 00 
356f2 59b 3C 3C 30 30 
356f6 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
356fa 59d 30 30 3C 3C 
356fe 59e 00 00 00 00 
35702 59f 18 18 3C 3C 
35706 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3570a 5a1 00 00 00 00 
3570e 5a2 00 00 00 00 
35712 5a3 00 00 00 00 
35716 5a4 00 00 00 00 
3571a 5a5 00 00       | 	byte	$00[18]
3571c 5a6 FE FE 00 00 
35720 5a7 00 00 0C 0C 
35724 5a8 18 18 00 00 
35728 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3572c 5aa 00 00 00 00 
35730 5ab 00 00 00 00 
35734 5ac 00          | 	byte	$00[9]
35735 5ac 3C 7C 60 7C 
35739 5ad 7E 66 66 7E 
3573d 5ae 7C 00 00 00 
35741 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35745 5b0 3E 7E 66 66 
35749 5b1 66 66 66 7E 
3574d 5b2 3E 00 00 00 
35751 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35755 5b4 3C 3E 06 06 
35759 5b5 06 06 06 7E 
3575d 5b6 7C 00 00 00 
35761 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35765 5b8 7C 7E 66 66 
35769 5b9 66 66 66 7E 
3576d 5ba 7C 00 00 00 
35771 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35775 5bc 3C 7E 66 66 
35779 5bd 7E 06 06 7E 
3577d 5be 7C 00 00 00 
35781 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
35785 5c0 18 7E 7E 18 
35789 5c1 18 18 18 18 
3578d 5c2 18 00 00 00 
35791 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35795 5c4 7C 7E 66 66 
35799 5c5 66 66 7E 7C 
3579d 5c6 60 7E 3E 00 
357a1 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
357a5 5c8 3E 7E 66 66 
357a9 5c9 66 66 66 66 
357ad 5ca 66 00 00 00 
357b1 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
357b5 5cc 1C 1C 18 18 
357b9 5cd 18 18 18 3C 
357bd 5ce 3C 00 00 00 
357c1 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
357c5 5d0 30 30 30 30 
357c9 5d1 30 30 30 30 
357cd 5d2 30          | 	byte	$30[9]
357ce 5d2 3E 1E 00 00 
357d2 5d3 06 06 06 36 
357d6 5d4 36 1E 1E 1E 
357da 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
357de 5d6 00 00 00 00 
357e2 5d7 1C 1C 18 18 
357e6 5d8 18 18 18 18 
357ea 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
357ee 5da 00 00 00 00 
357f2 5db 00 00 00    | 	byte	$00[7]
357f5 5dc 6C FE FE D6 
357f9 5dd D6 C6 C6 C6 
357fd 5de C6 00 00 00 
35801 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35805 5e0 3E 7E 66 66 
35809 5e1 66 66 66 66 
3580d 5e2 66 00 00 00 
35811 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35815 5e4 3C 7E 66 66 
35819 5e5 66 66 66 7E 
3581d 5e6 3C 00 00 00 
35821 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35825 5e8 3E 7E 66 66 
35829 5e9 66 66 66 7E 
3582d 5ea 3E 06 06 00 
35831 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35835 5ec 7C 7E 66 66 
35839 5ed 66 66 66 7E 
3583d 5ee 7C 60 60 00 
35841 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35845 5f0 3E 7E 66 06 
35849 5f1 06 06 06 06 
3584d 5f2 06 00 00 00 
35851 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35855 5f4 7C 7E 06 0E 
35859 5f5 3C 70 60 7E 
3585d 5f6 3E 00 00 00 
35861 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35865 5f8 7E 7E 18 18 
35869 5f9 18 18 18 78 
3586d 5fa 70 00 00 00 
35871 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35875 5fc 66 66 66 66 
35879 5fd 66 66 66    | 	byte	$66[7]
3587c 5fe 7E 7C 00 00 
35880 5ff 00 00 00 00 
35884 600 00 66 66 66 
35888 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3588c 602 18 18 00 00 
35890 603 00 00 00 00 
35894 604 00 C6 C6 D6 
35898 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3589c 606 C6 82 00 00 
358a0 607 00 00 00 00 
358a4 608 00 66 66 3C 
358a8 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
358ac 60a 66 66 00 00 
358b0 60b 00 00 00 00 
358b4 60c 00 66 66 66 
358b8 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
358bc 60e 7C 60 7E 3E 
358c0 60f 00 00 00 00 
358c4 610 00 7E 7E 30 
358c8 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
358cc 612 7E 7E 00 00 
358d0 613 00 00 30 18 
358d4 614 18 18 18 0C 
358d8 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
358dc 616 18 30 00 00 
358e0 617 00 00 18 18 
358e4 618 18 18 18 18 
358e8 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
358ec 61a 18 18 00 00 
358f0 61b 00 00 0C 18 
358f4 61c 18 18 18 30 
358f8 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
358fc 61e 18 0C 00 00 
35900 61f 00 00 6C 7E 
35904 620 36 00 00 00 
35908 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3590c 622 00 00 00 00 
35910 623 00 00 00 00 
35914 624 00          | 	byte	$00[9]
35915 624 18 18 18 18 
35919 625 18 18 00 00 
3591d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35920 627             | 'amiga_font     file "amigafont.def"
35920 627 00 6C FE FE 
35924 628 7C 38 10 00 
35928 629 18 18 18 F8 
3592c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35930 62b C0 C0 C0 C0 
35934 62c C0 C0 C0 C0 | 	byte	$c0[8]
35938 62d 18 18 18 1F 
3593c 62e 1F 00 00 00 
35940 62f 18 18 18 1F 
35944 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35948 631 00 00 00 1F 
3594c 632 1F 18 18 18 
35950 633 C0 E0 70 38 
35954 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35958 635 03 07 0E 1C 
3595c 636 38 70 E0 C0 
35960 637 80 C0 E0 F0 
35964 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35968 639 00 00 00 00 
3596c 63a F0 F0 F0 F0 
35970 63b 01 03 07 0F 
35974 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35978 63d F0 F0 F0 F0 
3597c 63e 00 00 00 00 
35980 63f 0F 0F 0F 0F 
35984 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35988 641 FF FF 00 00 
3598c 642 00 00 00 00 
35990 643 00 00 00 00 
35994 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35998 645 00 00 00 00 
3599c 646 0F 0F 0F 0F 
359a0 647 00 38 38 EE 
359a4 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
359a8 649 00 00 00 F8 
359ac 64a F8 18 18 18 
359b0 64b 00 00 00 FF 
359b4 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
359b8 64d 18 18 18 FF 
359bc 64e FF 18 18 18 
359c0 64f 00 00 3C 7E 
359c4 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
359c8 651 00 00 00 00 
359cc 652 FF FF FF FF 
359d0 653 03 03 03 03 
359d4 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
359d8 655 00 00 00 FF 
359dc 656 FF 18 18 18 
359e0 657 18 18 18 FF 
359e4 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
359e8 659 0F 0F 0F 0F 
359ec 65a 0F 0F 0F 0F | 	byte	$0f[8]
359f0 65b 18 18 18 F8 
359f4 65c F8 00 00 00 
359f8 65d 1E 06 1E 06 
359fc 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35a00 65f 00 18 3C 7E 
35a04 660 18 18 18 00 
35a08 661 00 18 18 18 
35a0c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35a10 663 00 18 0C 7E 
35a14 664 0C 18 00 00 
35a18 665 00 18 30 7E 
35a1c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35a20 667 00 00 00 00 
35a24 668 00 00 00 00 
35a28 669 00          | 	byte	$00[9]
35a29 669 18 18 18 18 
35a2d 66a 00 18 00 00 
35a31 66b 66 66 66 00 
35a35 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35a39 66d 66 FF 66 66 
35a3d 66e FF 66 00 18 
35a41 66f 7C 06 3C 60 
35a45 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35a49 671 66 36 18 0C 
35a4d 672 66 62 00 38 
35a51 673 6C 38 1C F6 
35a55 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35a59 675 18 18 18 00 
35a5d 676 00 00 00 00 
35a61 677 70 38 18 18 
35a65 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35a69 679 0E 1C 18 18 
35a6d 67a 1C 0E 00 00 
35a71 67b 66 3C FF 3C 
35a75 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35a79 67d 18 18 7E 18 
35a7d 67e 18 00 00 00 
35a81 67f 00 00 00 00 
35a85 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35a89 681 00 00 7E 00 
35a8d 682 00 00 00 00 
35a91 683 00 00 00 00 
35a95 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35a99 685 60 30 18 0C 
35a9d 686 06 02 00 00 
35aa1 687 3C 66 76 6E 
35aa5 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35aa9 689 18 1C 18 18 
35aad 68a 18 7E 00 00 
35ab1 68b 3C 66 30 18 
35ab5 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35ab9 68d 7E 30 18 30 
35abd 68e 66 3C 00 00 
35ac1 68f 30 38 3C 36 
35ac5 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35ac9 691 7E 06 3E 60 
35acd 692 66 3C 00 00 
35ad1 693 3C 06 3E 66 
35ad5 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35ad9 695 7E 60 30 18 
35add 696 0C 0C 00 00 
35ae1 697 3C 66 3C 66 
35ae5 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35ae9 699 3C 66 7C 60 
35aed 69a 30 1C 00 00 
35af1 69b 00 18 18 00 
35af5 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35af9 69d 00 18 18 00 
35afd 69e 18 18 0C 60 
35b01 69f 30 18 0C 18 
35b05 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35b09 6a1 00 7E 00 00 
35b0d 6a2 7E 00 00 06 
35b11 6a3 0C 18 30 18 
35b15 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35b19 6a5 3C 66 30 18 
35b1d 6a6 00 18 00 00 
35b21 6a7 3C 66 76 76 
35b25 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35b29 6a9 18 3C 66 66 
35b2d 6aa 7E 66 00 00 
35b31 6ab 3E 66 3E 66 
35b35 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35b39 6ad 3C 66 06 06 
35b3d 6ae 66 3C 00 00 
35b41 6af 1E 36 66 66 
35b45 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35b49 6b1 7E 06 3E 06 
35b4d 6b2 06 7E 00 00 
35b51 6b3 7E 06 3E 06 
35b55 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35b59 6b5 7C 06 06 76 
35b5d 6b6 66 7C 00 00 
35b61 6b7 66 66 7E 66 
35b65 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35b69 6b9 7E 18 18 18 
35b6d 6ba 18 7E 00 00 
35b71 6bb 60 60 60 60 
35b75 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35b79 6bd 66 36 1E 1E 
35b7d 6be 36 66 00 00 
35b81 6bf 06 06 06 06 
35b85 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35b89 6c1 C6 EE FE D6 
35b8d 6c2 C6 C6 00 00 
35b91 6c3 66 6E 7E 7E 
35b95 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35b99 6c5 3C 66 66 66 
35b9d 6c6 66 3C 00 00 
35ba1 6c7 3E 66 66 3E 
35ba5 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35ba9 6c9 3C 66 66 66 
35bad 6ca 36 6C 00 00 
35bb1 6cb 3E 66 66 3E 
35bb5 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35bb9 6cd 3C 06 3C 60 
35bbd 6ce 60 3C 00 00 
35bc1 6cf 7E 18 18 18 
35bc5 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35bc9 6d1 66 66 66 66 
35bcd 6d2 66          | 	byte	$66[5]
35bce 6d2 7E 00 00 66 
35bd2 6d3 66 66 66 3C 
35bd6 6d4 18 00 00 C6 
35bda 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35bde 6d6 C6 00 00 66 
35be2 6d7 66 3C 3C 66 
35be6 6d8 66 00 00 66 
35bea 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35bee 6da 18 00 00 7E 
35bf2 6db 30 18 0C 06 
35bf6 6dc 7E 00 00 78 
35bfa 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35bfe 6de 78 00 00 02 
35c02 6df 06 0C 18 30 
35c06 6e0 60 00 00 1E 
35c0a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35c0e 6e2 1E 00 00 10 
35c12 6e3 38 6C C6 00 
35c16 6e4 00 00 00 00 
35c1a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35c1e 6e6 FF 00 00 18 
35c22 6e7 3C 7E 7E 3C 
35c26 6e8 18 00 00 00 
35c2a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35c2e 6ea 7C 00 00 06 
35c32 6eb 06 3E 66 66 
35c36 6ec 3E 00 00 00 
35c3a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35c3e 6ee 3C 00 00 60 
35c42 6ef 60 7C 66 66 
35c46 6f0 7C 00 00 00 
35c4a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35c4e 6f2 3C 00 00 70 
35c52 6f3 18 7C 18 18 
35c56 6f4 18 00 00 00 
35c5a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35c5e 6f6 60 3E 00 06 
35c62 6f7 06 3E 66 66 
35c66 6f8 66 00 00 18 
35c6a 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35c6e 6fa 3C 00 00 60 
35c72 6fb 00 60 60 60 
35c76 6fc 60 3C 00 06 
35c7a 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35c7e 6fe 66 00 00 1C 
35c82 6ff 18 18 18 18 
35c86 700 3C 00 00 00 
35c8a 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35c8e 702 C6 00 00 00 
35c92 703 3E 66 66 66 
35c96 704 66 00 00 00 
35c9a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35c9e 706 3C 00 00 00 
35ca2 707 3E 66 66 3E 
35ca6 708 06 06 00 00 
35caa 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35cae 70a 60 60 00 00 
35cb2 70b 3E 66 06 06 
35cb6 70c 06 00 00 00 
35cba 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35cbe 70e 3E 00 00 18 
35cc2 70f 7E 18 18 18 
35cc6 710 70 00 00 00 
35cca 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35cce 712 7C 00 00 00 
35cd2 713 66 66 66 3C 
35cd6 714 18 00 00 00 
35cda 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35cde 716 6C 00 00 00 
35ce2 717 66 3C 18 3C 
35ce6 718 66 00 00 00 
35cea 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35cee 71a 30 1E 00 00 
35cf2 71b 7E 30 18 0C 
35cf6 71c 7E 00 00 18 
35cfa 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35cfe 71e 3C 00 18 18 
35d02 71f 18 18 18 18 
35d06 720 18 18 00 7E 
35d0a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35d0e 722 60 00 10 18 
35d12 723 1C 1E 1C 18 
35d16 724 10 00 08 18 
35d1a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35d1e 726 08 00       | 	byte	$08, $00
35d20 727 00 00 00 00 
35d24 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35d25 728 80 00 00 00 
35d29 729 00 80 00 00 
35d2d 72a 80 80 00 00 
35d31 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35d35 72c 80 00 80 00 
35d39 72d 00 40 80 00 
35d3d 72e AA AA AA 00 
35d41 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35d45 730 FF 00 00 00 
35d49 731 00 FF 00 00 
35d4d 732 FF FF 00 00 
35d51 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35d55 734 FF 00 FF 00 
35d59 735 00 FF FF 00 
35d5d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35d60 737 00 00 00 00 
35d64 738 00          | ataripalette   file "ataripalettep2.def"
35d65 738 11 11 11 00 
35d69 739 22 22 22 00 
35d6d 73a 33 33 33 00 
35d71 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35d75 73c 55 55 55 00 
35d79 73d 66 66 66 00 
35d7d 73e 77 77 77 00 
35d81 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35d85 740 99 99 99 00 
35d89 741 AA AA AA 00 
35d8d 742 BB BB BB 00 
35d91 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35d95 744 DD DD DD 00 
35d99 745 EE EE EE 00 
35d9d 746 FF FF FF 00 
35da1 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35da5 748 00 14 40 00 
35da9 749 00 1E 60 00 
35dad 74a 00 28 80 00 
35db1 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35db5 74c 00 3C BF 00 
35db9 74d 00 46 DF 00 
35dbd 74e 00 50 FF 00 
35dc1 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35dc5 750 39 77 FF 00 
35dc9 751 55 8A FF 00 
35dcd 752 71 9E FF 00 
35dd1 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35dd5 754 AA C5 FF 00 
35dd9 755 C6 D8 FF 00 
35ddd 756 E3 EC FF 00 
35de1 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35de5 758 00 00 40 00 
35de9 759 00 00 60 00 
35ded 75a 00 00 80 00 
35df1 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35df5 75c 00 00 BF 00 
35df9 75d 00 00 DF 00 
35dfd 75e 00 00 FF 00 
35e01 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35e05 760 39 39 FF 00 
35e09 761 55 55 FF 00 
35e0d 762 71 71 FF 00 
35e11 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35e15 764 AA AA FF 00 
35e19 765 C6 C6 FF 00 
35e1d 766 E3 E3 FF 00 
35e21 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35e25 768 20 00 40 00 
35e29 769 30 00 60 00 
35e2d 76a 40 00 80 00 
35e31 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35e35 76c 60 00 BF 00 
35e39 76d 70 00 DF 00 
35e3d 76e 80 00 FF 00 
35e41 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35e45 770 9C 39 FF 00 
35e49 771 AA 55 FF 00 
35e4d 772 B8 71 FF 00 
35e51 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35e55 774 D5 AA FF 00 
35e59 775 E3 C6 FF 00 
35e5d 776 F1 E3 FF 00 
35e61 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35e65 778 40 00 40 00 
35e69 779 60 00 60 00 
35e6d 77a 80 00 80 00 
35e71 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35e75 77c BF 00 BF 00 
35e79 77d DF 00 DF 00 
35e7d 77e FF 00 FF 00 
35e81 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35e85 780 FF 39 FF 00 
35e89 781 FF 55 FF 00 
35e8d 782 FF 71 FF 00 
35e91 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
35e95 784 FF AA FF 00 
35e99 785 FF C6 FF 00 
35e9d 786 FF E3 FF 00 
35ea1 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
35ea5 788 40 00 20 00 
35ea9 789 60 00 30 00 
35ead 78a 80 00 40 00 
35eb1 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
35eb5 78c BF 00 60 00 
35eb9 78d DF 00 70 00 
35ebd 78e FF 00 80 00 
35ec1 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
35ec5 790 FF 39 9C 00 
35ec9 791 FF 55 AA 00 
35ecd 792 FF 71 B8 00 
35ed1 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
35ed5 794 FF AA D5 00 
35ed9 795 FF C6 E3 00 
35edd 796 FF E3 F1 00 
35ee1 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
35ee5 798 40 00 00 00 
35ee9 799 60 00 00 00 
35eed 79a 80 00 00 00 
35ef1 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
35ef5 79c BF 00 00 00 
35ef9 79d DF 00 00 00 
35efd 79e FF 00 00 00 
35f01 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
35f05 7a0 FF 39 39 00 
35f09 7a1 FF 55 55 00 
35f0d 7a2 FF 71 71 00 
35f11 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
35f15 7a4 FF AA AA 00 
35f19 7a5 FF C6 C6 00 
35f1d 7a6 FF E3 E3 00 
35f21 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
35f25 7a8 40 10 00 00 
35f29 7a9 60 18 00 00 
35f2d 7aa 80 20 00 00 
35f31 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
35f35 7ac BF 30 00 00 
35f39 7ad DF 38 00 00 
35f3d 7ae FF 40 00 00 
35f41 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
35f45 7b0 FF 6A 39 00 
35f49 7b1 FF 80 55 00 
35f4d 7b2 FF 95 71 00 
35f51 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
35f55 7b4 FF BF AA 00 
35f59 7b5 FF D5 C6 00 
35f5d 7b6 FF EA E3 00 
35f61 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
35f65 7b8 40 20 00 00 
35f69 7b9 60 30 00 00 
35f6d 7ba 80 40 00 00 
35f71 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
35f75 7bc BF 60 00 00 
35f79 7bd DF 70 00 00 
35f7d 7be FF 80 00 00 
35f81 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
35f85 7c0 FF 9C 39 00 
35f89 7c1 FF AA 55 00 
35f8d 7c2 FF B8 71 00 
35f91 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
35f95 7c4 FF D5 AA 00 
35f99 7c5 FF E3 C6 00 
35f9d 7c6 FF F1 E3 00 
35fa1 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
35fa5 7c8 40 30 00 00 
35fa9 7c9 60 48 00 00 
35fad 7ca 80 60 00 00 
35fb1 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
35fb5 7cc BF 90 00 00 
35fb9 7cd DF A8 00 00 
35fbd 7ce FF C0 00 00 
35fc1 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
35fc5 7d0 FF CE 39 00 
35fc9 7d1 FF D5 55 00 
35fcd 7d2 FF DC 71 00 
35fd1 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
35fd5 7d4 FF EA AA 00 
35fd9 7d5 FF F1 C6 00 
35fdd 7d6 FF F8 E3 00 
35fe1 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
35fe5 7d8 30 40 00 00 
35fe9 7d9 48 60 00 00 
35fed 7da 60 80 00 00 
35ff1 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
35ff5 7dc 90 BF 00 00 
35ff9 7dd A8 DF 00 00 
35ffd 7de C0 FF 00 00 
36001 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
36005 7e0 CE FF 39 00 
36009 7e1 D5 FF 55 00 
3600d 7e2 DC FF 71 00 
36011 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36015 7e4 EA FF AA 00 
36019 7e5 F1 FF C6 00 
3601d 7e6 F8 FF E3 00 
36021 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36025 7e8 00 40 00 00 
36029 7e9 00 60 00 00 
3602d 7ea 00 80 00 00 
36031 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36035 7ec 00 BF 00 00 
36039 7ed 00 DF 00 00 
3603d 7ee 00 FF 00 00 
36041 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36045 7f0 39 FF 39 00 
36049 7f1 55 FF 55 00 
3604d 7f2 71 FF 71 00 
36051 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36055 7f4 AA FF AA 00 
36059 7f5 C6 FF C6 00 
3605d 7f6 E3 FF E3 00 
36061 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36065 7f8 00 40 14 00 
36069 7f9 00 60 1E 00 
3606d 7fa 00 80 28 00 
36071 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36075 7fc 00 BF 3C 00 
36079 7fd 00 DF 46 00 
3607d 7fe 00 FF 50 00 
36081 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
36085 800 39 FF 77 00 
36089 801 55 FF 8A 00 
3608d 802 71 FF 9E 00 
36091 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36095 804 AA FF C5 00 
36099 805 C6 FF D8 00 
3609d 806 E3 FF EC 00 
360a1 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
360a5 808 00 40 28 00 
360a9 809 00 60 3C 00 
360ad 80a 00 80 50 00 
360b1 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
360b5 80c 00 BF 78 00 
360b9 80d 00 DF 8C 00 
360bd 80e 00 FF A0 00 
360c1 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
360c5 810 39 FF B5 00 
360c9 811 55 FF C0 00 
360cd 812 71 FF CA 00 
360d1 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
360d5 814 AA FF DF 00 
360d9 815 C6 FF EA 00 
360dd 816 E3 FF F4 00 
360e1 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
360e5 818 00 40 40 00 
360e9 819 00 60 60 00 
360ed 81a 00 80 80 00 
360f1 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
360f5 81c 00 BF BF 00 
360f9 81d 00 DF DF 00 
360fd 81e 00 FF FF 00 
36101 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
36105 820 39 FF FF 00 
36109 821 55 FF FF 00 
3610d 822 71 FF FF 00 
36111 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36115 824 AA FF FF 00 
36119 825 C6 FF FF 00 
3611d 826 E3 FF FF 00 
36121 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36125 828 00 28 40 00 
36129 829 00 3C 60 00 
3612d 82a 00 50 80 00 
36131 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36135 82c 00 78 BF 00 
36139 82d 00 8C DF 00 
3613d 82e 00 A0 FF 00 
36141 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36145 830 39 B5 FF 00 
36149 831 55 C0 FF 00 
3614d 832 71 CA FF 00 
36151 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36155 834 AA DF FF 00 
36159 835 C6 EA FF 00 
3615d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
36160 837             | 
36160 837             | '**********************************************************************************
36160 837             | '
36160 837             | '        Timings and colors definitions
36160 837             | '
36160 837             | '**********************************************************************************
36160 837             | 
36160 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
36160 837 08 00 00 00 
36164 838 3C 00 00 00 
36168 839 08 00 00 00 
3616c 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
36170 83b 07 00 00 00 
36174 83c 04 00 00 00 
36178 83d 01 00 00 00 
3617c 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
36180 83f 58 02 00 00 
36184 840 20 9E 4B 14 
36188 841 FB A8 9E 01 
3618c 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36190 843 00 00 00 00 
36194 844 C0 00 00 00 
36198 845 00 00 00 00 
3619c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361a0 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
361a0 847 00 75 C7 97 
361a4 848 27 47 F6 0A 
361a8 849 05 79 CB 9B 
361ac 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
361b0 84b             | 
361b0 84b             | ''--------  Initialization  ----------------------------------------------------------------
361b0 84b             | 
361b0 84b 28 0C 64 FD | hdmi            setq    #6
361b4 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
361b8 84d 28 10 64 FD |                 setq    #8
361bc 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
361c0 84f             | 
361c0 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
361c4 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
361c8 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
361cc 852 D6 C6 01 F1 |                 add     t1,hbase
361d0 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
361d4 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
361d8 855 7B 0B 80 5F 
361dc 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
361e0 857 66 66 86 FF 
361e4 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
361e8 859             | '
361e8 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
361ec 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
361f0 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
361f4 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
361f8 85d             | 
361f8 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
361fc 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36200 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
36204 860             | 
36204 860             | ''--------  frame rendering main loop  ---------------------------------------------------
36204 860             | 
36204 860 28 06 64 FD | p101            setq 	#3
36208 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3620c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36210 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36214 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
36218 865 00 A0 05 F6 |                 mov     dlinum, #0
3621c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36220 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36224 868             | 
36224 868             | 
36224 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
36228 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3622c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36230 86b             |                 
36230 86b             | 
36230 86b             | 
36230 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36230 86b             |   
36230 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36234 86c 29 FE 65 3D |          if_nc  setq2   #255
36238 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3623c 86e             | 
3623c 86e             | '' -----   up porch (before the picture)
3623c 86e             | 
3623c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36240 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36244 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
36248 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3624c 872             |  
3624c 872             |    
3624c 872             |  
3624c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36250 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36254 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
36258 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3625c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
36260 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
36264 878             | 
36264 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36268 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3626c 87a 48 00 B0 FD | 		call    #dli
36270 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
36274 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
36278 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3627c 87e             |                 	
3627c 87e             |                 
3627c 87e             | 
3627c 87e             |  
3627c 87e             | '' ------- the main screen drawing starts here
3627c 87e             | 
3627c 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
36280 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
36284 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
36288 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3628c 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
36290 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36294 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
36298 885             |               
36298 885             | 
36298 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3629c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
362a0 887             | 
362a0 887             | ' ---------------- All visible lines displayed now, start vblank  
362a0 887             | 
362a0 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
362a4 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
362a8 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
362ac 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
362b0 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
362b4 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
362b8 88d             | 
362b8 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
362b8 88d             | 
362b8 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
362b8 88d             | 
362b8 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
362bc 88e             | 
362bc 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
362c0 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
362c4 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
362c8 891             | 
362c8 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
362cc 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
362d0 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
362d4 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
362d8 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
362dc 896             | 
362dc 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
362e0 897 DD C6 41 F8 |                 getnib  t1,dl,#0
362e4 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
362e8 899 70 00 90 AD |     if_z        jmp     #preload
362ec 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
362f0 89b 94 00 90 AD |     if_z        jmp     #preload2
362f4 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
362f8 89d 0C 00 90 AD |     if_z        jmp     #p390
362fc 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
36300 89f 28 00 90 AD |     if_z        jmp     #p391  
36304 8a0             | 
36304 8a0 2D 00 64 FD | p308            ret
36308 8a1             |    
36308 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3630c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36310 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36314 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
36318 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3631c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36320 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36324 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
36328 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3632c 8aa             |  
3632c 8aa             | '' --------  Reload palette. To do 
3632c 8aa             | 
3632c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36330 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36334 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
36338 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3633c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36340 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36344 8b0 70 FF 9F FD |         	jmp     #dli                
36348 8b1             |       
36348 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
36348 8b1             | 
36348 8b1             | 
36348 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
36348 8b1             | 
36348 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3634c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36350 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36354 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
36358 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3635c 8b6             |         
3635c 8b6             | '' -------------- Preload a line from PSRAM        
3635c 8b6             |         
3635c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
36360 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
36364 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
36368 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3636c 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
36370 8bb             | 
36370 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
36374 8bc 32 B7 01 F6 |                 mov     buf2,a1024
36378 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3637c 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
36380 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
36384 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
36388 8c1             |  
36388 8c1             |  
36388 8c1             | preload2      '  incmod  dlinum,#3
36388 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3638c 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
36390 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36394 8c4 28 02 64 FD |                 setq	#1
36398 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3639c 8c6             |                 
3639c 8c6             | 
3639c 8c6             | '' -------------- Draw sprites
3639c 8c6             | 
3639c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
363a0 8c7 10 5C 0E F5 | 		and t8,#16 wz
363a4 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
363a8 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
363ac 8ca             | 		
363ac 8ca             | 
363ac 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
363b0 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
363b4 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
363b8 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
363bc 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
363c0 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
363c4 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
363c8 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
363cc 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
363d0 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
363d4 8d4 01 52 86 F1 |                 sub     sprite_h,#1
363d8 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
363dc 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
363e0 8d7             | 
363e0 8d7             | 
363e0 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
363e4 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
363e8 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
363ec 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
363f0 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
363f4 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
363f8 8dd 00 5E 06 F6 |                 mov 	t9,#0
363fc 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
36400 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
36404 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
36408 8e1             |      
36408 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3640c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36410 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36414 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
36418 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3641c 8e6             |                 
3641c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36420 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36424 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
36428 8e9             |   		
36428 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3642c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36430 8eb             | 
36430 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36434 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
36438 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3643c 8ee             |  
3643c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36440 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36444 8f0 10 00 90 CD |      if_c 	jmp     #p899		
36448 8f1             | 	
36448 8f1             | 	
36448 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3644c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36450 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36454 8f4             | 
36454 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
36458 8f5             | 
36458 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3645c 8f6 01 58 86 F1 | 	 	sub     t6,#1
36460 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
36464 8f8             | 
36464 8f8 28 58 62 FD |                 setq   	t6
36468 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3646c 8fa 28 5D 02 F6 |                 mov t8,sprite_w
36470 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
36474 8fc 24 00 90 AD |         if_z    jmp #p898
36478 8fd             |          
36478 8fd             |         
36478 8fd 70 5F 06 F6 |                 mov  t9,#368
3647c 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
36480 8ff             | 
36480 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
36484 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
36488 901 FF FF 7F FF 
3648c 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
36490 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36494 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
36498 905 2D 01 00 F5 |                 and 0-0, t7
3649c 906             |                
3649c 906             | 
3649c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
364a0 907 E5 E0 7A FA |                 wmlong 368,t3				
364a4 908             |                 
364a4 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
364a8 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
364ac 90a 2D 00 64 FD |                 ret
364b0 90b             | 	
364b0 90b             | 	
364b0 90b             |                
364b0 90b             |  
364b0 90b             | '' -------------- Graphics line ------------------------------------------------------------
364b0 90b             |  
364b0 90b             | 
364b0 90b             | '' consts and vars
364b0 90b             | 
364b0 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
364b4 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
364b8 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
364bc 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
364c0 90f             | 
364c0 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
364c4 910             | 
364c4 910             | '------ these longs will be set by setmode function
364c4 910             | 
364c4 910 00 00 00 00 | m_bs            long    0        'blanks before sync
364c8 911 00 00 00 00 | m_sn            long    0        'sync
364cc 912 00 00 00 00 | m_bv            long    0        'blanks before visible
364d0 913 00 00 00 00 | m_vi            long    0        'visible pixels #
364d4 914             | 'm_border        long    0        'left/right borders
364d4 914 00 00 00 00 | i_upporch       long    0        'up porch lines
364d8 915 00 00 00 00 | i_vsync         long    0        'vsync lines
364dc 916 00 00 00 00 | i_downporch     long    0        'down porch lines
364e0 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
364e4 918 00 00 00 00 | i_totalvis      long    0
364e8 919             | 
364e8 919             | '-------------------------------------
364e8 919             |  
364e8 919 00 00 00 00 | linenum         long    0
364ec 91a 00 00 00 00 | frames          long    0
364f0 91b 00 00 00 00 | dlinum long 0
364f4 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
364f8 91d             | 
364f8 91d 00 00 00 00 | vblankptr       long    0
364fc 91e 00 00 00 00 | modeptr         long    0
36500 91f 00 00 00 00 | paletteptr      long    0
36504 920 00 00 00 00 | dlptr           long    0
36508 921 01 00 00 00 | hbase           long    1
3650c 922 00 00 00 00 | mailbox         long    0
36510 923 00 00 00 00 | spriteptr          long 0
36514 924             | 
36514 924 00 00 00 00 | cmd             long    0
36518 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3651c 926 00 04 00 00 | buf2            long    1024
36520 927 01 00 00 00 | dlptr2          long    1
36524 928 01 00 00 00 | dl              long    1
36528 929             | 
36528 929 00 00 00 00 | buf1c long 0
3652c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36530 92b 01 00 00 00 | framebuf2       long    1
36534 92c 01 00 00 00 | hsync0          long    1
36538 92d 01 00 00 00 | hsync1          long    1
3653c 92e             | 
3653c 92e 01 00 00 00 | t1              long    1
36540 92f 00 00 00 00 | t2 long 0
36544 930 00 00 00 00 | t3 long 0
36548 931 00 00 00 00 | t4 long 0
3654c 932             | 
3654c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36550 933 00 00 00 00 | rcnt2           long    0
36554 934 00 00 00 00 | rcnt2a          long    0
36558 935 00 00 00 00 | roffset         long    0
3655c 936 00 00 00 00 | rdl             long    0  'dl repeat line
36560 937 00 00 00 00 | dlc             long    0  'dl command
36564 938             | 
36564 938 FF FF FF FF | affffffff       long    $ffffffff
36568 939 00 00 00 00 | sprite1pointer long 0
3656c 93a 00 00 00 00 | sprite1xy      long 0
36570 93b 00 00 00 00 | sprite1wh      long 0
36574 93c 00 00 00 00 | sprite2pointer long 0
36578 93d 00 00 00 00 | sprite2xy      long 0
3657c 93e 00 00 00 00 | sprite2wh      long 0
36580 93f 00 00 00 00 | sprite3pointer long 0
36584 940 00 00 00 00 | sprite3xy      long 0
36588 941 00 00 00 00 | sprite3wh      long 0
3658c 942 00 00 00 00 | sprite4pointer long 0
36590 943 00 00 00 00 | sprite4xy      long 0
36594 944 00 00 00 00 | sprite4wh      long 0
36598 945 00 00 00 00 | sprite5pointer long 0
3659c 946 00 00 00 00 | sprite5xy      long 0
365a0 947 00 00 00 00 | sprite5wh      long 0
365a4 948 00 00 00 00 | sprite6pointer long 0
365a8 949 00 00 00 00 | sprite6xy      long 0
365ac 94a 00 00 00 00 | sprite6wh      long 0
365b0 94b 00 00 00 00 | sprite7pointer long 0
365b4 94c 00 00 00 00 | sprite7xy      long 0
365b8 94d 00 00 00 00 | sprite7wh      long 0
365bc 94e 00 00 00 00 | sprite8pointer long 0
365c0 94f 00 00 00 00 | sprite8xy      long 0
365c4 950 00 00 00 00 | sprite8wh      long 0
365c8 951 00 00 00 00 | sprite9pointer long 0
365cc 952 00 00 00 00 | sprite9xy      long 0
365d0 953 00 00 00 00 | sprite9wh      long 0
365d4 954 00 00 00 00 | sprite10pointer long 0
365d8 955 00 00 00 00 | sprite10xy      long 0
365dc 956 00 00 00 00 | sprite10wh      long 0
365e0 957 00 00 00 00 | sprite11pointer long 0
365e4 958 00 00 00 00 | sprite11xy      long 0
365e8 959 00 00 00 00 | sprite11wh      long 0
365ec 95a 00 00 00 00 | sprite12pointer long 0
365f0 95b 00 00 00 00 | sprite12xy      long 0
365f4 95c 00 00 00 00 | sprite12wh      long 0
365f8 95d 00 00 00 00 | sprite13pointer long 0
365fc 95e 00 00 00 00 | sprite13xy      long 0
36600 95f 00 00 00 00 | sprite13wh      long 0
36604 960 00 00 00 00 | sprite14pointer long 0
36608 961 00 00 00 00 | sprite14xy      long 0
3660c 962 00 00 00 00 | sprite14wh      long 0
36610 963 00 00 00 00 | sprite15pointer long 0
36614 964 00 00 00 00 | sprite15xy      long 0
36618 965 00 00 00 00 | sprite15wh      long 0
3661c 966 00 00 00 00 | sprite16pointer long 0
36620 967 00 00 00 00 | sprite16xy      long 0
36624 968 00 00 00 00 | sprite16wh      long 0
36628 969 00 00 00 00 | sprite17pointer long 0
3662c 96a 00 00 00 00 | sprite17xy      long 0
36630 96b 00 00 00 00 | sprite17wh      long 0
36634 96c 00 00 00 00 | sprite18pointer long 0
36638 96d 00 00 00 00 | sprite18xy      long 0
3663c 96e 00 00 00 00 | sprite18wh      long 0
36640 96f 00 00 00 00 | spritenum long 0
36644 970             | 
36644 970 00 00 00 00 | spriteline long 0
36648 971 84 03 00 00 | sprite_x long 900
3664c 972 00 00 00 00 | sprite_y long 0
36650 973 10 00 00 00 | sprite_w long 16
36654 974 40 00 00 00 | sprite_h long 64
36658 975 00 00 00 00 | l2 long 0
3665c 976 00 00 00 00 | t5 long 0
36660 977 00 00 00 00 | t6 long 0
36664 978 00 00 00 00 | t7 long 0
36668 979 00 00 00 00 | t8 long 0
3666c 97a 00 00 00 00 | t9 long 0
36670 97b 00 00 00 00 | preloadaddr long 0
36674 97c 00 00 00 00 | preloadlineaddr long 0
36678 97d 00 04 00 00 | a1024 long 1024
3667c 97e             | 
3667c 97e E0 03 00 00 | aa long 992
36680 97f FF 03 00 00 | a1023 long 1023
36684 980 00 10 00 00 | a4096 long 4096
36688 981             |  fit 368
36688 981             | _psram_spin2_dat_
36688 981 00 00 00 00 
      ...             
36780 9bf 00 00 00 00 
36784 9c0 00 00 00 00 |     listdata long 0[8*8]
36788 9c1             |             orgh
36788                 | 
36788                 | ' driver state
36788     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3678c     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36790                 | 
36790                 | ' delay profile
36790     07 00 00 00 
36794     00 CF 7B 05 
36798     80 D1 F0 08 
3679c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
367a0     80 C4 60 0F 
367a4     80 39 7A 12 
367a8     40 2D D9 13 
367ac     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
367b0                 | 
367b0                 | ' data to be passed to driver when starting it
367b0                 | startupData
367b0     00 00 00 00 |     long    0           ' current frequency
367b4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
367b8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
367bc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
367c0     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
367c4     D0 67 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
367c8     50 68 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
367cc     70 68 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
367d0                 | 
367d0                 | ' data for memory
367d0                 | deviceData
367d0                 |     ' 16 bank parameters follow (16MB per bank)
367d0     00 00 00 00 
      ...             
36808     00 00 00 00 
3680c     00 00 00 00 |     long    0[16]                               ' banks 0-15
36810                 |     ' 16 banks of pin parameters follow
36810     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36814     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36818     FF FF FF FF 
      ...             
36848     FF FF FF FF 
3684c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36850                 | 
36850                 | ' data for COG polling
36850                 | qosData 
36850     00 00 FF FF 
36854     00 00 FF FF 
36858     00 00 FF FF 
3685c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36860     00 00 FF FF 
36864     00 00 FF FF 
36868     00 00 FF FF 
3686c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36870                 |     
36870                 | ' mailbox storage
36870                 | 
36870                 | mailboxes
36870     00 00 00 00 
      ...             
368c8     00 00 00 00 
368cc     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
368d0                 | 	alignl
368d0                 | _psram16drv_spin2_dat_
368d0                 |                             orgh
368d0     00 00 00 00 
      ...             
368e8     00 00 00 00 
368ec     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
368f0                 | 
368f0                 | driver_start
368f0                 |                             org
368f0 000             | '..................................................................................................
368f0 000             | ' Memory layout for COG RAM once operational:
368f0 000             | '
368f0 000             | '  COG RAM address      Usage
368f0 000             | '  ---------------      ----
368f0 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
368f0 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
368f0 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
368f0 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
368f0 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
368f0 000             | '  ~$198-$1F3           State and register variables
368f0 000             | '
368f0 000             | ' Also during driver COG startup:
368f0 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
368f0 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
368f0 000             | '..................................................................................................
368f0 000             |                             
368f0 000             | ' Mailbox storage after vector initialization
368f0 000             | 
368f0 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
368f4 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
368f8 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
368fc 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36900 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36904 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36908 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3690c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36910 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36914 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36918 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3691c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36920 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36924 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36928 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3692c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36930 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36934 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36938 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3693c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36940 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36944 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36948 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3694c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36950 018             | 
36950 018             | ' Mailbox parameter addresses per COG once patched
36950 018             |                             
36950 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36954 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36958 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3695c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36960 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36964 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36968 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3696c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36970 020             | 
36970 020             | '..................................................................................................
36970 020             | ' Per COG request and state setup and service branching
36970 020             |         
36970 020             | cog0                 
36970 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36974 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36978 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3697c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36980 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36984 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36988 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3698c 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36990 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36994 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36998 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3699c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
369a0 02c             | cog1                        
369a0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
369a4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
369a8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
369ac 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
369b0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369b4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369b8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
369bc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
369c0 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
369c4 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
369c8 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
369cc 037 33 CA 63 FD |                             execf   request-0               'jump to service
369d0 038             | cog2                         
369d0 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
369d4 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
369d8 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
369dc 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
369e0 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369e4 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369e8 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
369ec 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
369f0 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
369f4 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
369f8 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
369fc 043 33 CA 63 FD |                             execf   request-0               'jump to service
36a00 044             | cog3                        
36a00 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36a04 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36a08 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36a0c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36a10 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a14 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a18 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36a1c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36a20 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36a24 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a28 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a2c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36a30 050             | cog4                        
36a30 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36a34 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36a38 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36a3c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36a40 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a44 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a48 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36a4c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36a50 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36a54 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a58 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a5c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36a60 05c             | cog5                        
36a60 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36a64 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36a68 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36a6c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36a70 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a74 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a78 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36a7c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36a80 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36a84 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a88 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a8c 067 33 CA 63 FD |                             execf   request-0               'jump to service
36a90 068             | cog6                        
36a90 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36a94 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36a98 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36a9c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36aa0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36aa4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36aa8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36aac 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36ab0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36ab4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ab8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36abc 073 33 CA 63 FD |                             execf   request-0               'jump to service
36ac0 074             | cog7                        
36ac0 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36ac4 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36ac8 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36acc 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36ad0 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ad4 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ad8 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36adc 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36ae0 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36ae4 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ae8 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36aec 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36af0 080             |                             fit     128
36af0 080             | 
36af0 080             |                             fit     128
36af0 080             | pad                         long    0[128-$]                'align init code to $80
36af0 080             | 
36af0 080             | '..................................................................................................
36af0 080             | 
36af0 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36af0 080             | 
36af0 080             | init                        
36af0 080             |                             ' get driver scratch long address in hub
36af0 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36af4 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36af8 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36afc 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36b00 084             |                     
36b00 084             |                             ' read in the additional LUT RAM code
36b00 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36b04 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36b08 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36b0c 087             | 
36b0c 087             |                             ' read the startup parameters
36b0c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36b10 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36b14 089             | 
36b14 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36b14 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36b18 08a             | 
36b18 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36b1c 08b 01 00 00 5F 
36b20 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36b24 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36b28 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36b2c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36b30 090             | 
36b30 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36b30 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36b34 091 01 00 00 FF 
36b38 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36b3c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36b40 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36b44 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36b48 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36b4c 097 08 DE 47 F5 |                             or      a, #8
36b50 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36b54 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36b58 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36b5c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36b60 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36b64 09d 01 DE 07 F1 |                             add     a, #1
36b68 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36b6c 09f             |  
36b6c 09f             |                             ' setup device control pin states
36b6c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36b70 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36b74 0a1 01 00 00 FF 
36b78 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36b7c 0a3             | 
36b7c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36b80 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36b84 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36b88 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36b8c 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36b90 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36b94 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36b98 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36b9c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36ba0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36ba4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36ba8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36bac 0af             | pinloop
36bac 0af             |                             ' generate minimum CE high time before access
36bac 0af A1 07 00 FF 
36bb0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36bb4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36bb8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36bbc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36bc0 0b4 1F DE 63 FD |                             waitx   a                       'delay
36bc4 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36bc8 0b6             | 
36bc8 0b6             |                             ' setup the COG mailboxes and addresses 
36bc8 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36bcc 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36bd0 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36bd4 0b9             | 
36bd4 0b9 28 2E 64 FD |                             setq    #24-1
36bd8 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36bdc 0bb             | 
36bdc 0bb             |                             ' setup the polling loop for active COGs 
36bdc 0bb 01 C2 63 FD |                             cogid   id
36be0 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36be4 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36be8 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36bec 0bf 0A F0 07 F6 |                             mov     ptra, #10
36bf0 0c0 E1 F1 03 FA |                             mul     ptra, id
36bf4 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36bf8 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36bfc 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36c00 0c4 03 C2 07 FA |                             mul     id, #3
36c04 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36c08 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36c0c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36c10 0c8 D8 01 B0 FD |                             call    #reloadcogs
36c14 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36c18 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36c1c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36c1c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36c20 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36c24 0cd 08 04 DC FC |                             rep     #2, #8
36c28 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36c2c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36c30 0d0             | 
36c30 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36c30 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36c30 0d0 01 C2 63 FD |                             cogid   id
36c34 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36c38 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36c3c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36c40 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36c44 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36c48 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36c4c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36c50 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36c54 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36c58 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36c5c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36c60 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36c64 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36c68 0de A5 E5 03 F1 |                             add     d, const512
36c6c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36c70 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36c74 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36c78 0e2             |                             
36c78 0e2             |                             ' setup register values for control vector loop setup after we return
36c78 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36c7c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36c80 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36c84 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36c88 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36c8c 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36c90 0e8 D0 C3 8F F9 |                             altd    id, #id0
36c94 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36c98 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36c9c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36ca0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36ca4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36ca8 0ee             |  
36ca8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36cac 0ef 07 CA 07 F5 |                             and     request, #7
36cb0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36cb4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36cb8 0f2             |                             fit     $100                    'ensure all init code fits this space
36cb8 0f2             | 
36cb8 0f2             |                             fit     $100                    'ensure all init code fits this space
36cb8 0f2             | 
36cb8 0f2 00 00 00 00 
      ...             
36ce8 0fe 00 00 00 00 
36cec 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36cf0 100             | 
36cf0 100             | '..................................................................................................
36cf0 100             | ' Error result handling and COG notification of request completion
36cf0 100             | 
36cf0 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36cf4 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36cf8 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36cfc 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36d00 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36d04 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36d08 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36d0c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36d10 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36d14 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36d18 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36d1c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36d20 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36d24 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36d28 10e             | ' Poller re-starts here after a COG is serviced
36d28 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36d2c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36d30 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36d34 111             | ' Main dynamic polling loop repeats until a request arrives
36d34 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36d38 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36d3c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36d40 114             | 
36d40 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36d44 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36d48 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36d4c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36d50 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36d54 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36d58 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36d5c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36d60 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36d64 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36d68 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36d6c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36d70 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36d74 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36d78 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36d7c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36d80 124             | 
36d80 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36d84 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36d88 126             |  
36d88 126             | '..................................................................................................
36d88 126             | ' List handler                               
36d88 126             | 
36d88 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36d8c 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36d90 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36d94 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36d98 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36d9c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36da0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36da4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36da8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36dac 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36db0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36db4 131 33 00 60 FD |                             execf   0-0                     'process the request 
36db8 132             | 
36db8 132             | '..................................................................................................
36db8 132             | ' Restoring per COG state and resuming where we left off
36db8 132             | 
36db8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36dbc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36dc0 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36dc4 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36dc8 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36dcc 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36dd0 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36dd4 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36dd8 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36ddc 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36de0 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36de4 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36de8 13e             |                    
36de8 13e             | '..................................................................................................
36de8 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36de8 13e             | 
36de8 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36dec 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36df0 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36df4 141 D0 DF B7 F9 |                             setd    a, #id0
36df8 142 D8 DF BF F9 |                             sets    a, #addr1
36dfc 143 FE FF FF FF 
36e00 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36e04 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36e08 146 3F DE A7 F9 |                             alti    a, #%111_111 
36e0c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36e10 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36e14 149 01 E2 63 FD |                             cogid   c
36e18 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36e1c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36e20 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36e24 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36e28 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36e2c 14f 00 E0 03 F6 |                             mov     b, 0-0
36e30 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36e34 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36e38 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36e3c 153 0C 00 90 AD |             if_z            jmp     #excluded               
36e40 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36e44 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36e48 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36e4c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36e50 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36e54 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36e58 15a             | 
36e58 15a             | 'determine priority cogs and build instructions for the polling sequence
36e58 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36e5c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36e60 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36e64 15d             | 
36e64 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36e68 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36e6c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36e70 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36e74 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36e78 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36e7c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36e80 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36e84 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36e88 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
36e8c 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
36e90 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
36e94 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
36e98 16a             | endprioloop
36e98 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
36e9c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
36ea0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
36ea4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
36ea8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
36eac 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
36eb0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
36eb4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
36eb8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
36ebc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
36ec0 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
36ec4 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
36ec8 176             | 
36ec8 176             | ' populate the round robin COG polling instructions
36ec8 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
36ecc 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
36ed0 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
36ed4 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
36ed8 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
36edc 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
36ee0 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
36ee4 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
36ee8 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
36eec 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
36ef0 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
36ef4 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
36ef8 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
36efc 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
36f00 184             | '..................................................................................................
36f00 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
36f00 184             | 
36f00 184             | set_latency                                                 '            (a) set latency
36f00 184             | get_latency                                                 '            (b) get latency
36f00 184             | set_burst                                                   '            (c) set burst size of bank
36f00 184             | get_burst                                                   '            (d) get burst size of bank
36f00 184             |                                                             '            (e) dump state
36f00 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
36f04 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
36f08 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
36f0c 187             |                                                             ' | | | | e  account for following AUGS
36f0c 187 04 00 00 FF 
36f10 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
36f14 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
36f18 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
36f1c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
36f20 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
36f24 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
36f28 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
36f2c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
36f30 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
36f34 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
36f38 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
36f3c 193             | 
36f3c 193             | '..................................................................................................
36f3c 193             | ' Misc EXECF code
36f3c 193             | 
36f3c 193 33 72 63 FD | start_read_exec             execf   newburstr
36f40 194 33 7C 63 FD | start_write_exec            execf   resumewrites
36f44 195 33 78 63 FD | continue_read_exec          execf   lockedreads
36f48 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
36f4c 197             | 
36f4c 197             | '..................................................................................................
36f4c 197             | ' Variables
36f4c 197             | 
36f4c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
36f50 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
36f54 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
36f58 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
36f5c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
36f60 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
36f64 19d             | 
36f64 19d 00 00 00 80 | xfreq1          long    $80000000
36f68 19e 00 00 00 40 | xfreq2          long    $40000000
36f6c 19f 03 00 00 00 | delay           long    3
36f70 1a0             | 
36f70 1a0             | lutcodeaddr                 
36f70 1a0             | startupparams
36f70 1a0             | excludedcogs                                    'careful: shared register use!
36f70 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
36f74 1a1 00 00 00 00 | flags           long    0
36f78 1a2             | mask                                            'careful: shared register use!
36f78 1a2 00 00 00 00 | resetmaskA      long    0
36f7c 1a3             | limit                                           'careful: shared register use!
36f7c 1a3 00 00 00 00 | resetmaskB      long    0
36f80 1a4 00 00 00 00 | datapins        long    0
36f84 1a5             | const512                                        'careful: shared register use!
36f84 1a5 00 00 00 00 | devicelist      long    0
36f88 1a6 00 00 00 00 | coglist         long    0
36f8c 1a7 00 00 00 00 | mbox            long    0 
36f90 1a8             | 
36f90 1a8             | clkpin                                          'shared with code patched during init
36f90 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
36f94 1a9             | cspin                                           'shared with code patched during init
36f94 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
36f98 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
36f9c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
36fa0 1ac 01 00 00 00 | clkdelay        long    1
36fa4 1ad 00 00 00 00 | regdatabus      long    0
36fa8 1ae             | 
36fa8 1ae 10 00 00 00 | deviceaddr      long    $10
36fac 1af             | rrcounter
36fac 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
36fb0 1b0             | 
36fb0 1b0             | ' jump addresses for the per COG handlers
36fb0 1b0 20 00 00 00 | cog0_handler    long    cog0
36fb4 1b1 2C 00 00 00 | cog1_handler    long    cog1
36fb8 1b2 38 00 00 00 | cog2_handler    long    cog2
36fbc 1b3 44 00 00 00 | cog3_handler    long    cog3
36fc0 1b4 50 00 00 00 | cog4_handler    long    cog4
36fc4 1b5 5C 00 00 00 | cog5_handler    long    cog5
36fc8 1b6 68 00 00 00 | cog6_handler    long    cog6
36fcc 1b7 74 00 00 00 | cog7_handler    long    cog7
36fd0 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
36fd4 1b9             | 
36fd4 1b9             | ' EXECF sequences
36fd4 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
36fd8 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
36fdc 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
36fe0 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
36fe4 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
36fe8 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
36fec 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
36ff0 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
36ff0 1c0             | 
36ff0 1c0             | 
36ff0 1c0             | ' SKIPF sequences
36ff0 1c0             | skiptable
36ff0 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
36ff4 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
36ff8 1c2 00 00 00 00 |                 long    0                      ' read modify write long
36ffc 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
37000 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
37004 1c5 00 00 00 00 | pattern2        long    0
37008 1c6 00 00 00 00 | pattern3        long    0
3700c 1c7 77 02 00 00 | singlelong      long    %1001110111  
37010 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37014 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
37018 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3701c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37020 1cc             | 
37020 1cc             | ' LUT RAM address values
37020 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37024 1cd DD 02 00 00 | continue_read   long    continue_read_lut
37028 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3702c 1cf F6 02 00 00 | noread          long    noread_lut
37030 1d0             | 
37030 1d0 00 00 00 00 | id0             long    0
37034 1d1 01 00 00 00 | id1             long    1
37038 1d2 02 00 00 00 | id2             long    2
3703c 1d3 03 00 00 00 | id3             long    3
37040 1d4 04 00 00 00 | id4             long    4
37044 1d5 05 00 00 00 | id5             long    5
37048 1d6 06 00 00 00 | id6             long    6
3704c 1d7 07 00 00 00 | id7             long    7
37050 1d8             | 
37050 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37050 1d8             | 'and COG updates and need to follow immediately after id0-id7
37050 1d8 00 00 00 00 | addr1           long    0
37054 1d9 00 00 00 00 | hubdata         long    0
37058 1da 00 00 00 00 | count           long    0
3705c 1db 00 00 00 00 | addr2           long    0
37060 1dc 00 00 00 00 | total           long    0
37064 1dd 00 00 00 00 | offset1         long    0
37068 1de 00 00 00 00 | offset2         long    0
3706c 1df 00 00 00 00 | link            long    0
37070 1e0             | 
37070 1e0             | burstwrite                                      'note shared register use during init
37070 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37074 1e1 00 00 00 00 | id              long    0
37078 1e2             | 
37078 1e2 00 00 00 00 | header          long    0
3707c 1e3 00 00 00 00 | trailer         long    0
37080 1e4 00 00 00 00 | cmdaddr         long    0
37084 1e5 00 00 00 00 | request         long    0
37088 1e6 00 00 00 00 | rrlimit         long    0
3708c 1e7 00 00 00 00 | pinconfig       long    0
37090 1e8 00 00 00 00 | clks            long    0
37094 1e9 00 00 00 00 | resume          long    0
37098 1ea 00 00 00 00 | orighubsize     long    0
3709c 1eb 00 00 00 00 | wrclks          long    0
370a0 1ec             | 
370a0 1ec 00 00 00 00 | pattern         long    0
370a4 1ed 00 00 00 00 | hubscratch      long    0
370a8 1ee 00 10 00 00 | val4k           long    4096
370ac 1ef             | 
370ac 1ef             | ' temporary general purpose regs
370ac 1ef 00 00 00 00 | a               long    0
370b0 1f0 00 00 00 00 | b               long    0
370b4 1f1 00 00 00 00 | c               long    0
370b8 1f2 00 00 00 00 | d               long    0
370bc 1f3             |                 fit     502
370bc 1f3             | 
370bc 1f3             |                 fit     502
370bc 1f3             | 
370bc 1f3             | '..................................................................................................
370bc 1f3             | 
370bc 1f3             |             orgh
370bc                 | 
370bc                 | lut_code
370bc                 | 'HW init code up to 80 longs
370bc                 | 
370bc                 | '..................................................................................................
370bc                 | ' Memory layout for LUT RAM once operational:
370bc                 | '
370bc                 | '  LUT RAM address      Usage
370bc                 | '  ---------------      ----
370bc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
370bc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
370bc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
370bc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
370bc                 | '
370bc                 | ' Also during driver COG startup:
370bc                 | ' $230-$24F is used for HW init setup
370bc                 | ' $250-$26F is used as temporary vector storage 
370bc                 | '..................................................................................................
370bc                 | 
370bc                 |                 org $230    
370bc 230             | 
370bc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
370bc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
370c0 231 24 16 60 FD |                             pollxfi
370c4 232 FF AA 2A FF 
370c8 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
370cc 234 28 00 B0 FD |                             call    #sendqspi
370d0 235 07 F8 07 FF 
370d4 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
370d8 237 28 00 B0 FD |                             call    #sendspi
370dc 238 F8 07 78 FF 
370e0 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
370e4 23a 1C 00 B0 FD |                             call    #sendspi
370e8 23b 7F 78 78 FF 
370ec 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
370f0 23d 10 00 B0 FD |                             call    #sendspi 
370f4 23e 2D 00 64 FD |                             ret
370f8 23f             | 
370f8 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
370fc 240 32 0C 64 FD |                             skipf   #%110
37100 241 9C EF 03 F6 |                             mov     pb, xsendimm
37104 242             | 
37104 242 10 D0 07 F6 | sendspi                     mov     clks, #16
37108 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3710c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37110 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37114 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
37118 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3711c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37120 249 50 48 63 FD |                             fltl    datapins                'float data bus
37124 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
37128 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3712c 24c             | 
3712c 24c 00 00 00 00 
37130 24d 00 00 00 00 
37134 24e 00 00 00 00 
37138 24f 00 00 00 00 |                 long    0[$270-32-$]
3713c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3713c 250             |     
3713c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3713c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3713c 250             | rw_vect ' PSRAM jump vectors
3713c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37140 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37144 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37148 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3714c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37150 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37154 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
37158 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3715c 258             | ro_vect ' R/O PSRAM jump vectors
3715c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37160 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37164 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37168 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3716c 25c 00 01 00 00 |                 long    unsupported
37170 25d 00 01 00 00 |                 long    unsupported
37174 25e 00 01 00 00 |                 long    unsupported
37178 25f 00 01 00 00 |                 long    unsupported
3717c 260             | ctrl_vect ' Control jump vectors
3717c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
37180 261 00 01 00 00 |                 long    unsupported
37184 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
37188 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3718c 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37190 265 00 01 00 00 |                 long    unsupported
37194 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
37198 267 3E 01 00 00 |                 long    reconfig 
3719c 268             | no_vect ' Invalid bank jump vectors
3719c 268 01 01 00 00 |                 long    invalidbank
371a0 269 01 01 00 00 |                 long    invalidbank
371a4 26a 01 01 00 00 |                 long    invalidbank
371a8 26b 01 01 00 00 |                 long    invalidbank
371ac 26c 01 01 00 00 |                 long    invalidbank
371b0 26d 01 01 00 00 |                 long    invalidbank
371b4 26e 01 01 00 00 |                 long    invalidbank
371b8 26f 01 01 00 00 |                 long    invalidbank
371bc 270             |                 fit     $270
371bc 270             | 
371bc 270             |                 fit     $270
371bc 270             | '..................................................................................................
371bc 270             | ' PSRAM READS
371bc 270             |                                                             ' a b c d e f
371bc 270             |                                                             ' B W L B R L  (a) byte read
371bc 270             |                                                             ' Y O O U E O  (b) word read
371bc 270             |                                                             ' T R N R S C  (c) long read
371bc 270             |                                                             ' E D G S U K  (d) new burst read
371bc 270             |                                                             '       T M E  (e) resumed sub-burst
371bc 270             |                                                             '         E D  (f) locked sub-burst
371bc 270             | 
371bc 270             | 
371bc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
371c0 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
371c4 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
371c8 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
371cc 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
371d0 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
371d4 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
371d8 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
371dc 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
371e0 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
371e4 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
371e8 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
371ec 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
371f0 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
371f4 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
371f8 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
371fc 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37200 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
37204 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
37208 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3720c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37210 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37214 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
37218 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3721c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37220 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37224 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
37228 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3722c 28c             | 
3722c 28c             |                             ' fall through to read bursts
3722c 28c             |                         
3722c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3722c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37230 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37234 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37238 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3723c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37240 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37244 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
37248 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3724c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37250 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37254 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
37258 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3725c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
37260 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
37264 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
37268 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3726c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
37270 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
37274 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
37278 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3727c 2a0 E8 D1 03 F1 |                             add     clks, clks
37280 2a1             | readcommon
37280 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
37284 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37288 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3728c 2a4             | 
3728c 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37290 2a5 69 C8 63 FD |                             rev     cmdaddr
37294 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37298 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3729c 2a8             | 
3729c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
372a0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
372a4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
372a4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
372a8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
372ac 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
372b0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
372b4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
372b4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
372b8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
372bc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
372c0 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
372c4 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
372c8 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
372cc 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
372cc 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
372d0 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
372d4 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
372d8 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
372dc 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
372e0 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
372e4 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
372e8 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
372ec 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
372f0 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
372f4 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
372f8 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
372fc 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
37300 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
37304 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
37304 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
37308 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3730c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37310 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37314 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
37318 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3731c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37320 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37324 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
37328 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3732c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37330 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37334 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
37338 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3733c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37340 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37344 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
37348 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3734c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37350 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37354 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
37358 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3735c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
37360 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
37364 2da 10 03 90 FD |                             jmp     #writecommon
37368 2db             | 
37368 2db             | '..................................................................................................
37368 2db             | ' Burst continuation testing
37368 2db             | 
37368 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3736c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
37370 2dd             | continue_read_lut          
37370 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
37374 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
37378 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3737c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
37380 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
37384 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
37388 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3738c 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
37390 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37394 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
37398 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3739c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
373a0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
373a4 2ea             | 
373a4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
373a8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
373ac 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
373b0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
373b4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
373b8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
373bc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
373c0 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
373c4 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
373c8 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
373cc 2f4 2A 1C 66 0D |             _ret_           push    #poller
373d0 2f5             | 
373d0 2f5             | 
373d0 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
373d4 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
373d4 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
373d8 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
373dc 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
373e0 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
373e4 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
373e8 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
373ec 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
373f0 2fd 2D 00 64 FD |                             ret                             ' | continue processing
373f4 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
373f8 2ff             | '..................................................................................................
373f8 2ff             | ' Completion of requests
373f8 2ff             | 
373f8 2ff             | complete_rw_lut             
373f8 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
373fc 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
37400 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
37404 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
37408 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3740c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37410 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37414 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
37418 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3741c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37420 309 32 62 64 AD |             if_z            skipf   #%110001
37424 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
37428 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3742c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37430 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37434 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
37438 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3743c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37440 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37444 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
37448 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3744c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37450 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37454 316             |                                                             ' skipcase (a) gfx copy to/from hub
37454 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37454 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37454 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
37458 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3745c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
37460 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
37464 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
37468 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3746c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
37470 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
37474 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
37478 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3747c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
37480 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
37484 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
37488 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3748c 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
37490 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37494 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
37498 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3749c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
374a0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
374a4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
374a8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
374ac 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
374b0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
374b4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
374b8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
374bc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
374c0 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
374c4 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
374c8 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
374cc 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
374d0 335 DF B7 03 A6 |             if_z            mov     addr2, link
374d4 336 34 FF 9F AD |             if_z            jmp     #checknext
374d8 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
374dc 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
374e0 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
374e4 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
374e8 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
374ec 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
374f0 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
374f4 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
374f8 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
374fc 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
37500 341             | 
37500 341             | '..................................................................................................
37500 341             | ' PSRAM WRITES
37500 341             |                                                             '  a b c d e f g h
37500 341             | 
37500 341             |                                                             '  B W L F B R L L (a) byte write(s)
37500 341             |                                                             '  Y O O I U E O O (b) word write(s)
37500 341             |                                                             '  T R N L R S C C (c) long write(s)
37500 341             |                                                             '  E D G L S U K K (d) resumed fill
37500 341             |                                                             '          T M E E (e) new burst write
37500 341             |                                                             '            E D D (f) resumed burst
37500 341             |                                                             '              F B (g) locked fill
37500 341             |                                                             '              I U (h) locked burst write
37500 341             |                                                             '              L R 
37500 341             |                                                             '              L S 
37500 341             |                                                             '                T 
37500 341             | 
37500 341             | w_single                   
37500 341             | w_fill_cont           
37500 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
37504 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
37508 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3750c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37510 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37514 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
37518 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3751c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37520 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37524 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
37528 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3752c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37530 34d             |                ' disable call to r_resume_burst for single longs when z=0
37530 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37534 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
37538 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3753c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37540 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37544 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
37548 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3754c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37550 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37554 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
37558 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3755c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
37560 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
37564 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
37568 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3756c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
37570 35d             |         
37570 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
37570 35d             |             '
37570 35d             |             '  At least one of these 3 optional components will be sent
37570 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
37570 35d             |             '     body - N x full longs of data
37570 35d             |             '     trailer - last partial long of data
37570 35d             |             '
37570 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
37570 35d             |             '
37570 35d             |             'Case    Type                           Sends
37570 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
37570 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
37570 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
37570 35d             |             ' 4)     Multiple long fill             body only
37570 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
37570 35d             | 
37570 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
37570 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
37574 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37578 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3757c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37580 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
37584 362 13 8C 07 F6 |                             mov     pattern3, #%10011
37588 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3758c 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
37590 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37594 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
37598 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3759c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
375a0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
375a4 36a             |                             
375a4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
375a8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
375ac 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
375b0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
375b4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
375b8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
375bc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
375c0 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
375c4 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
375c8 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
375cc 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
375d0 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
375d4 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
375d8 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
375dc 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
375e0 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
375e4 37a             | 
375e4 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
375e8 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
375ec 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
375f0 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
375f4 37e             |                  
375f4 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
375f8 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
375fc 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
37600 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
37604 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
37608 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3760c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37610 385             | 
37610 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37614 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
37618 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3761c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37620 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37624 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
37628 38b             | 
37628 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
37628 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3762c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37630 38d 2A B0 63 FD |                             push    addr1                   'save address
37634 38e             | 
37634 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37634 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
37638 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3763c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37640 391             |             
37640 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37644 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
37648 393 2B B0 63 FD |                             pop     addr1                   'restore address
3764c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37650 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37654 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
37658 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3765c 398             | 
3765c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
37660 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37664 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
37668 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3766c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
37670 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37674 39e             | 
37674 39e             |                             'trailer is done
37674 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
37678 39f             | 
37678 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3767c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37680 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
37684 3a2             | 
37684 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37688 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3768c 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37690 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37694 3a6             |                             
37694 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
37698 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3769c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
376a0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
376a4 3aa             |                                                          
376a4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
376a8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
376ac 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
376b0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
376b4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
376b8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
376bc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
376c0 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
376c4 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
376c8 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
376cc 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
376d0 3b5             |  
376d0 3b5 59 52 63 FD |                             drvh    cspin
376d4 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
376d8 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
376dc 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
376e0 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
376e4 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
376e8 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
376ec 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
376f0 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
376f4 3be EA E5 03 F6 |                             mov     d, orighubsize
376f8 3bf EF E5 63 F0 |                             shl     d, a
376fc 3c0 F2 E3 83 F1 |                             sub     c, d
37700 3c1 DD E3 03 F1 |                             add     c, offset1
37704 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
37708 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3770c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37710 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37714 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
37718 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3771c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37720 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37724 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
37728 3cb BB D3 03 F6 |                             mov     resume, restorefill
3772c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37730 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37734 3ce 6C FC BF CD |             if_c            call    #yield
37738 3cf 2D 00 64 FD |                             ret
3773c 3d0             |                            
3773c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3773c 3d0             |                       '     rczl    pa                      'rotate left into address offset
3773c 3d0             |                       '     rczl    c wcz                   'restore count and flags
3773c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37740 3d1 02 EC 67 F0 |                             shl     pa, #2
37744 3d2 28 06 64 AD |             if_z            setq    #3
37748 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3774c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37750 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37754 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
37758 3d7             | 
37758 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3775c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37760 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37764 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
37768 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3776c 3dc             |                 fit 1024-32
3776c 3dc             |         
3776c 3dc             | 
3776c 3dc             | '..................................................................................................
3776c 3dc             | 
3776c 3dc             |                 fit 1024-32
3776c 3dc 00 00 00 00 
37770 3dd 00 00 00 00 
37774 3de 00 00 00 00 
37778 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3777c 3e0             |                 org 1024-32
3777c 000             | 
3777c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3777c 000 00 00 00 00 |                 long $0000
37780 001 11 11 00 00 |                 long $1111
37784 002 22 22 00 00 |                 long $2222
37788 003 33 33 00 00 |                 long $3333
3778c 004 44 44 00 00 |                 long $4444
37790 005 55 55 00 00 |                 long $5555
37794 006 66 66 00 00 |                 long $6666
37798 007 77 77 00 00 |                 long $7777
3779c 008 88 88 00 00 |                 long $8888
377a0 009 99 99 00 00 |                 long $9999
377a4 00a AA AA 00 00 |                 long $aaaa
377a8 00b BB BB 00 00 |                 long $bbbb
377ac 00c CC CC 00 00 |                 long $cccc
377b0 00d DD DD 00 00 |                 long $dddd
377b4 00e EE EE 00 00 |                 long $eeee
377b8 00f FF FF 00 00 |                 long $ffff
377bc 010             | 
377bc 010             | 'masks
377bc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
377c0 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
377c4 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
377c8 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
377cc 014             | 
377cc 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
377d0 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
377d4 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
377d8 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
377dc 018             | 
377dc 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
377e0 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
377e4 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
377e8 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
377ec 01c             | 
377ec 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
377f0 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
377f4 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
377f8 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
377fc 020             |         fit 1024
377fc 020             | 
377fc 020             |         fit 1024
377fc 020             | 
377fc 020             | '--------------------------------------------------------------------------------------------------
377fc 020             |         orgh
377fc                 | 
377fc                 | gfxexpansion
377fc                 |                             'simple line drawing graphics expansion of memory driver
377fc                 |                             'jmp     #donerepeats                'just return for now
377fc                 | 
377fc     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37800     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37804     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
37808     DD E1 03 F6 |                             mov     b, offset1              'get error term
3780c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37810     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37814     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37818     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3781c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37820     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37824     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37828     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3782c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37830     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37834     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
37838     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3783c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37840     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37844     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
37848     DC E5 33 F9 |                             getword d, total, #0            'get line width
3784c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37850     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37854     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
37858     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3785c     C3 03 80 FD |                             jmp     #readmask               'continue filling
37860                 | 	alignl
37860                 | _usbnew_spin2_dat_
37860                 |                 org     $000
37860 000             | 
37860 000             | usb_host_start
37860 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37864 001             | 
37864 001 03 00 00 FF 
37868 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3786c 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37870 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37874 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
37878 006 29 70 63 FD |                 setq2   htmp
3787c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37880 008             | 
37880 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37884 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
37888 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3788c 00b             | 
3788c 00b             | '------------------------------------------------------------------------------
3788c 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3788c 00b             | ' special because the receiving function must not respond with either STALL or
3788c 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3788c 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3788c 00b             | ' corrupt packet, it must ignore the transaction
3788c 00b             | '------------------------------------------------------------------------------
3788c 00b             | ' On entry:
3788c 00b             | '   PTRA - start address of the SETUP data struct.
3788c 00b             | ' On exit:
3788c 00b             | '   retval - PID_ACK on success, otherwise error code.
3788c 00b             | '------------------------------------------------------------------------------
3788c 00b             | txn_setup
3788c 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37890 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37894 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
37898 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3789c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
378a0 010             | .setup
378a0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
378a4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
378a8 012 2D 00 64 AD |         if_z    ret
378ac 013 7C 0B B0 FD |                 call    #retry_wait
378b0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
378b4 015 2D 00 64 AD |         if_z    ret
378b8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
378bc 017 E0 FF 9F FD |                 jmp     #.setup
378c0 018             | 
378c0 018             | '------------------------------------------------------------------------------
378c0 018             | ' IN/INTERRUPT transaction.
378c0 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
378c0 018             | '------------------------------------------------------------------------------
378c0 018             | ' On entry:
378c0 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
378c0 018             | '     CRC(b19..23).
378c0 018             | ' On exit:
378c0 018             | '------------------------------------------------------------------------------
378c0 018             | txn_in
378c0 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
378c4 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
378c8 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
378cc 01b             | 
378cc 01b             |                 ' Fall through to urx_packet
378cc 01b             | 
378cc 01b             | '------------------------------------------------------------------------------
378cc 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
378cc 01b             | ' received are handshakes and IN DATAx.
378cc 01b             | '------------------------------------------------------------------------------
378cc 01b             | ' On entry:
378cc 01b             | ' On exit:
378cc 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
378cc 01b             | '     returned.
378cc 01b             | '------------------------------------------------------------------------------
378cc 01b             | urx_packet
378cc 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
378d0 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
378d4 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
378d8 01e 1A 92 63 FD |                 getct   hct2
378dc 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
378e0 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
378e4 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
378e8 022             | .wait_sop
378e8 022 22 A7 8A FA |                 rdpin   urx, dm
378ec 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
378f0 024 08 00 90 CD |         if_c    jmp     #.get_pid
378f4 025 FC 25 CC FB |                 jnct2   #.wait_sop
378f8 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
378fc 027             | .get_pid
378fc 027 28 02 B0 FD |                 call    #urx_next
37900 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37904 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37908 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3790c 02b             | .chk_pid
3790c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37910 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37914 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37918 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3791c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37920 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37924 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37928 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3792c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37930 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37934 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37938 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3793c 037             | .ack_resend
3793c 037 22 A7 82 FA |                 rqpin   urx, dm
37940 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37944 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37948 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3794c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37950 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37954 03d             | .chk_eop
37954 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37958 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3795c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37960 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37964 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37968 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3796c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37970 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37974 045 2D 00 64 FD |                 ret
37978 046             | .idle
37978 046 22 A7 82 FA |                 rqpin   urx, dm
3797c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37980 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37984 049 2D 00 64 FD |                 ret
37988 04a             | 
37988 04a             | '------------------------------------------------------------------------------
37988 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37988 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37988 04a             | ' if one is required.
37988 04a             | '------------------------------------------------------------------------------
37988 04a             | ' On entry:
37988 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37988 04a             | ' On exit:
37988 04a             | '------------------------------------------------------------------------------
37988 04a             | utx_token
37988 04a 22 A7 82 FA |                 rqpin   urx, dm
3798c 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37990 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37994 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37998 04e 34 0D B0 CD |         if_c    call    #utx_pre
3799c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
379a0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
379a4 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
379a8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
379ac 053             | .next_byte
379ac 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
379b0 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
379b4 055             | .wait
379b4 055 40 46 72 FD |                 testp   dp                      wc
379b8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
379bc 057 23 03 08 FC |                 akpin   dp
379c0 058 22 A5 22 FC |                 wypin   utx, dm
379c4 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
379c8 05a             | 
379c8 05a             | '------------------------------------------------------------------------------
379c8 05a             | ' SETUP/OUT/INTERRUPT transaction.
379c8 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
379c8 05a             | '------------------------------------------------------------------------------
379c8 05a             | ' On entry:
379c8 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
379c8 05a             | '     CRC(b19..23).
379c8 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
379c8 05a             | '   pkt_data - count of DATAx payload bytes to send.
379c8 05a             | ' On exit:
379c8 05a             | '------------------------------------------------------------------------------
379c8 05a             | txn_out
379c8 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
379cc 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
379d0 05c 00 00 C0 FF 
379d4 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
379d8 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
379dc 05f             | 
379dc 05f             |                 ' Fall through to utx_data
379dc 05f             | 
379dc 05f             | '------------------------------------------------------------------------------
379dc 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
379dc 05f             | ' calculated while the data byte is being shifted out. Since data stage
379dc 05f             | ' success/fail is not determined until the status stage of the transaction,
379dc 05f             | ' this routine is only concerned about the current DATAx packet.
379dc 05f             | '------------------------------------------------------------------------------
379dc 05f             | ' On entry:
379dc 05f             | '   PTRA - hub start address of the data to read.
379dc 05f             | '   pkt_cnt - data payload size.
379dc 05f             | ' On exit:
379dc 05f             | '------------------------------------------------------------------------------
379dc 05f             | utx_data
379dc 05f 22 A7 82 FA |                 rqpin   urx, dm
379e0 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
379e4 061 F4 FF 9F CD |         if_c    jmp     #utx_data
379e8 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
379ec 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
379f0 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
379f4 065 D8 0C B0 CD |         if_c    call    #utx_pre
379f8 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
379fc 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37a00 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37a04 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37a08 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37a0c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37a10 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37a14 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37a18 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37a1c 06f             | .read_byte
37a1c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37a20 070 F0 00 B0 FD |                 call    #utx_byte
37a24 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37a28 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37a2c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37a30 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37a34 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37a38 076             | .send_crc
37a38 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37a3c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37a40 078 D0 00 B0 FD |                 call    #utx_byte
37a44 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37a48 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37a4c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37a50 07c             | 
37a50 07c             | '------------------------------------------------------------------------------
37a50 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37a50 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37a50 07c             | ' expects that the packet includes at least the CRC word.
37a50 07c             | '
37a50 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37a50 07c             | ' was requested, which makes it difficult to determine where the data stops
37a50 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37a50 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37a50 07c             | ' USB-16 expected residual value of 0xB001.
37a50 07c             | '
37a50 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37a50 07c             | ' so the caller can verify IN success before writing the data to its final
37a50 07c             | ' destination.
37a50 07c             | '------------------------------------------------------------------------------
37a50 07c             | ' On entry:
37a50 07c             | '   pkt_data - max byte count expected to be in the packet.
37a50 07c             | '   newb_flg - signals new byte ready when toggled.
37a50 07c             | ' On exit:
37a50 07c             | '   pkt_cnt - actual number of bytes read.
37a50 07c             | '------------------------------------------------------------------------------
37a50 07c             | urx_data
37a50 07c F7 75 03 F6 |                 mov     htmp2, pb
37a54 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37a58 07e 00 00 C0 FF 
37a5c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37a60 080 BA EF 03 F6 |                 mov     pb, htmp2
37a64 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37a68 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37a6c 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37a70 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37a74 085             | .wait_byte
37a74 085             | ' In-line rx for max speed
37a74 085 22 A7 82 FA |                 rqpin   urx, dm
37a78 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37a7c 087 53 A5 02 F5 |                 and     utx, urx
37a80 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37a84 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37a88 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37a8c 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37a90 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37a94 08d DC FF 9F FD |                 jmp     #.wait_byte
37a98 08e             | .get_byte
37a98 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37a9c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37aa0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37aa4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37aa8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37aac 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37ab0 094             | .end_crc
37ab0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37ab4 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37ab8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37abc 097 2D 00 64 1D |         if_a    ret
37ac0 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37ac0 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37ac0 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37ac0 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37ac0 098 22 A7 82 FA |                 rqpin   urx, dm
37ac4 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37ac8 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37acc 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37acc 09b             | .chk_crc
37acc 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37ad0 09c 58 00 00 FF 
37ad4 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37ad8 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37adc 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37ae0 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37ae4 0a1 34 09 B0 FD |                 call    #poll_waitx
37ae8 0a2             | 
37ae8 0a2             |                 ' Fall through to utx_handshake
37ae8 0a2             | 
37ae8 0a2             | '------------------------------------------------------------------------------
37ae8 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37ae8 0a2             | ' the appropriate IP delay has been inserted.
37ae8 0a2             | '------------------------------------------------------------------------------
37ae8 0a2             | ' On entry:
37ae8 0a2             | '   retval - handshake PID to send.
37ae8 0a2             | ' On exit:
37ae8 0a2             | '   retval unchanged.
37ae8 0a2             | '------------------------------------------------------------------------------
37ae8 0a2             | utx_handshake
37ae8 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37aec 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37af0 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37af4 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37af8 0a6 5F A5 02 F6 |                 mov     utx, retval
37afc 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37b00 0a8             | .idle
37b00 0a8 22 A7 82 FA |                 rqpin   urx, dm
37b04 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37b08 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37b0c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37b10 0ac 08 09 90 FD |                 jmp     #poll_waitx
37b14 0ad             | 
37b14 0ad             | '------------------------------------------------------------------------------
37b14 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37b14 0ad             | '------------------------------------------------------------------------------
37b14 0ad             | ' On entry:
37b14 0ad             | '   utx - byte to transmit.
37b14 0ad             | ' On exit:
37b14 0ad             | '------------------------------------------------------------------------------
37b14 0ad             | utx_byte
37b14 0ad 40 46 72 FD |                 testp   dp                      wc
37b18 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37b1c 0af 23 03 08 FC |                 akpin   dp
37b20 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37b24 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37b28 0b2             | 
37b28 0b2             | '------------------------------------------------------------------------------
37b28 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37b28 0b2             | '------------------------------------------------------------------------------
37b28 0b2             | ' On entry:
37b28 0b2             | ' On exit:
37b28 0b2             | '   retval - the byte read.
37b28 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37b28 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37b28 0b2             | '     received.
37b28 0b2             | '------------------------------------------------------------------------------
37b28 0b2             | urx_next
37b28 0b2 22 A7 8A FA |                 rdpin   urx, dm
37b2c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37b30 0b4 53 A5 02 F5 |                 and     utx, urx
37b34 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37b38 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37b3c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37b40 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37b44 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b48 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37b4c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37b50 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37b54 0bd 2D 00 64 FD |                 ret
37b58 0be             | 
37b58 0be             | '------------------------------------------------------------------------------
37b58 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37b58 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37b58 0be             | ' length, and the PID is not included in the CRC calculation:
37b58 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37b58 0be             | '  CRC5  ENDP ADDRESS PID
37b58 0be             | ' %00000_1111_1111111_xxxxxxxx
37b58 0be             | '------------------------------------------------------------------------------
37b58 0be             | ' On entry:
37b58 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37b58 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37b58 0be             | ' On exit:
37b58 0be             | '   ep_addr_pid - CRC value appended to the packet.
37b58 0be             | '------------------------------------------------------------------------------
37b58 0be             | calc_crc5
37b58 0be FF 03 00 FF 
37b5c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37b60 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37b64 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37b68 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37b6c 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37b70 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37b74 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37b78 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37b7c 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37b80 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37b84 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37b88 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37b8c 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37b90 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37b94 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37b98 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37b9c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37ba0 0d0             | 
37ba0 0d0             | '------------------------------------------------------------------------------
37ba0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37ba0 0d0             | '------------------------------------------------------------------------------
37ba0 0d0             | isr1_fsframe
37ba0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37ba4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37ba8 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37bac 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37bb0 0d4             | .wait
37bb0 0d4 40 46 72 FD |                 testp   dp                      wc
37bb4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37bb8 0d6 23 03 08 FC |                 akpin   dp
37bbc 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37bc0 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37bc4 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37bc8 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37bcc 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37bd0 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37bd4 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37bd8 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37bdc 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37be0 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37be4 0e1 2C FF BF FD |                 call    #utx_byte
37be8 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37bec 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37bf0 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37bf4 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37bf8 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37bfc 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37c00 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37c04 0e9 5B A5 42 F5 |                 or      utx, icrc
37c08 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37c0c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37c10 0ec 20 00 90 FD |                 jmp     #isr1_wait
37c14 0ed             | isr1_lsframe
37c14 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37c18 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c1c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37c20 0f0             | .wait
37c20 0f0 40 46 72 FD |                 testp   dp                      wc
37c24 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37c28 0f2 23 03 08 FC |                 akpin   dp
37c2c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37c30 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37c34 0f5             | isr1_wait
37c34 0f5 22 A5 82 FA |                 rqpin   utx, dm
37c38 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37c3c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37c40 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37c44 0f9 03 00 00 FF 
37c48 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37c4c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37c50 0fc F5 FF 3B FB |                 reti1
37c54 0fd             | 
37c54 0fd             | '------------------------------------------------------------------------------
37c54 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37c54 0fd             | ' transaction will complete before the next frame is triggered.
37c54 0fd             | '------------------------------------------------------------------------------
37c54 0fd             | ' On entry:
37c54 0fd             | ' On exit:
37c54 0fd             | '------------------------------------------------------------------------------
37c54 0fd             | wait_txn_ok
37c54 0fd 1A 74 63 FD |                 getct   htmp2
37c58 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37c5c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37c60 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37c64 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37c68 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37c6c 103 2D 00 64 FD |                 ret
37c70 104             | 
37c70 104             | '------------------------------------------------------------------------------
37c70 104             | ' A device connection was detected, or a bus reset was requested by the USB
37c70 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37c70 104             | ' and perform a reset sequence prior to device enumeration.
37c70 104             | '------------------------------------------------------------------------------
37c70 104             | dev_reset
37c70 104 22 A7 82 FA |                 rqpin   urx, dm
37c74 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37c78 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37c7c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37c80 108             | reset
37c80 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37c84 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37c88 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37c8c 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37c90 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37c94 10d 1A 92 62 FD |                 getct   iframe_ct_base
37c98 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c9c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37ca0 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37ca4 111 24 70 07 F1 |                 add     htmp, #36
37ca8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37cac 113             | .framewait
37cac 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37cb0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37cb4 115 2D 00 64 FD |                 ret
37cb8 116             | 
37cb8 116             | '------------------------------------------------------------------------------
37cb8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37cb8 116             | '------------------------------------------------------------------------------
37cb8 116             | ' On entry:
37cb8 116             | '   PTRA - source address.
37cb8 116             | '   PB - destination address.
37cb8 116             | '   hr0 - length of copy, in bytes.
37cb8 116             | ' On exit:
37cb8 116             | '------------------------------------------------------------------------------
37cb8 116             | hmemcpy
37cb8 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37cbc 117 F7 71 43 FC |                 wrbyte  htmp, pb
37cc0 118 01 EE 07 F1 |                 add     pb, #1
37cc4 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37cc8 11a             | 
37cc8 11a             | '------------------------------------------------------------------------------
37cc8 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37cc8 11a             | ' loop until the errant device is disconnected.
37cc8 11a             | '------------------------------------------------------------------------------
37cc8 11a             | ' On entry:
37cc8 11a             | ' On exit:
37cc8 11a             | '------------------------------------------------------------------------------
37cc8 11a             | host_error
37cc8 11a             |           if ERROR_LED >= 0
37cc8 11a             |           end
37cc8 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37ccc 11b             | 
37ccc 11b             | '------------------------------------------------------------------------------
37ccc 11b             | ' Get HID descriptor buffer for current port
37ccc 11b             | '------------------------------------------------------------------------------
37ccc 11b             | ' On entry:
37ccc 11b             | ' On exit:
37ccc 11b             | '   PB - HID descriptor buffer pointer
37ccc 11b             | '------------------------------------------------------------------------------
37ccc 11b             | get_hid_descr_buffer
37ccc 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37cd0 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37cd4 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37cd8 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37cdc 11f             | 
37cdc 11f             | 
37cdc 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37ce0 120             | 
37ce0 120             | ' USB commands and error codes
37ce0 120 00 00 00 00 | cmd_data        long    0
37ce4 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37ce8 122             | 
37ce8 122             | ' Parameters block assigned at cog startup
37ce8 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37cec 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37cf0 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37cf4 125             | if ACTIVITY_LED >= 0
37cf4 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37cf4 125             | end
37cf4 125             | if ERROR_LED >= 0
37cf4 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37cf4 125             | end
37cf4 125 00 00 00 00 | hid_descr_p     long    0
37cf8 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37cf8 126             | 'hkbd_report_p   long    0
37cf8 126 00 00 00 00 | hub_descr_p     long    0
37cfc 127 00 00 00 00 | urx_buff_p      long    0
37d00 128 00 00 00 00 | dev_desc_buff_p long    0
37d04 129 00 00 00 00 | con_desc_buff_p long    0
37d08 12a 00 00 00 00 | cache_start_p   long    0
37d0c 12b 00 00 00 00 | cache_end_p     long    0
37d10 12c             | if EMUPAD_MAX_PLAYER > 0
37d10 12c             | emupad_out_ptr  long    0
37d10 12c             | end
37d10 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37d14 12d             | 
37d14 12d             | hdev_init_start
37d14 12d             | hdev_port       res     1
37d14 12d             | hdev_port       res     1
37d14 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37d14 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37d14 12d             | kbm_next_datax  res     1
37d14 12d             | kbm_next_datax  res     1
37d14 12d             | hub_intf_num    res     1
37d14 12d             | hub_intf_num    res     1
37d14 12d             | hub_next_datax  res     1
37d14 12d             | hub_next_datax  res     1
37d14 12d             | hub_status_chg  res     1
37d14 12d             | hub_status_chg  res     1
37d14 12d             | hub_port_status res     1
37d14 12d             | hub_port_status res     1
37d14 12d             | if HAVE_MOUSE
37d14 12d             | ms_intf_num     res     1
37d14 12d             | ms_intf_num     res     1
37d14 12d             | ms_in_max_pkt   res     1
37d14 12d             | ms_in_max_pkt   res     1
37d14 12d             | end
37d14 12d             | kb_intf_num     res     1
37d14 12d             | kb_intf_num     res     1
37d14 12d             | kb_interval     res     1
37d14 12d             | kb_interval     res     1
37d14 12d             | kb_in_max_pkt   res     1
37d14 12d             | kb_in_max_pkt   res     1
37d14 12d             | kb_max_index    res     1
37d14 12d             | kb_max_index    res     1
37d14 12d             | kb_led_states   res     1
37d14 12d             | kb_led_states   res     1
37d14 12d             | gp_intf_num     res     1
37d14 12d             | gp_intf_num     res     1
37d14 12d             | gp_interval     res     1
37d14 12d             | gp_interval     res     1
37d14 12d             | gp_max_index    res     1
37d14 12d             | gp_max_index    res     1
37d14 12d             | gp_descr_len    res     1+MAX_DEVICES
37d14 12d             | gp_descr_len    res     1+MAX_DEVICES
37d14 12d             | hdev_init_end
37d14 12d             | 
37d14 12d             | ' Initialized at cog startup:
37d14 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37d14 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37d14 12d             | iframe_ct_new   res     1
37d14 12d             | iframe_ct_new   res     1
37d14 12d             | iframe_ct_base  res     1
37d14 12d             | iframe_ct_base  res     1
37d14 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37d14 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37d14 12d             | 
37d14 12d             | ' This register block is reset to zero when a USB device connects
37d14 12d             | hreg_init_start
37d14 12d             | hstatus         res     1         ' Host status flags
37d14 12d             | hstatus         res     1         ' Host status flags
37d14 12d             | hctwait         res     1         ' Poll-based wait clocks
37d14 12d             | hctwait         res     1         ' Poll-based wait clocks
37d14 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37d14 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37d14 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37d14 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37d14 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37d14 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37d14 12d             | xfer_retry      res     1         ' Control transfer retry count
37d14 12d             | xfer_retry      res     1         ' Control transfer retry count
37d14 12d             | retry           res     1         ' Transaction retry count
37d14 12d             | retry           res     1         ' Transaction retry count
37d14 12d             | utx             res     1         ' Byte to transmit on USB
37d14 12d             | utx             res     1         ' Byte to transmit on USB
37d14 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37d14 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37d14 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37d14 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37d14 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37d14 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37d14 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37d14 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37d14 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37d14 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37d14 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37d14 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37d14 12d             | frame           res     1         ' USB 1ms frame counter value
37d14 12d             | frame           res     1         ' USB 1ms frame counter value
37d14 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37d14 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37d14 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37d14 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37d14 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37d14 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37d14 12d             | crc             res     1         ' Used for CRC16 calculation
37d14 12d             | crc             res     1         ' Used for CRC16 calculation
37d14 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37d14 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37d14 12d             | retval          res     1         ' Global success/fail return parameter
37d14 12d             | retval          res     1         ' Global success/fail return parameter
37d14 12d             | context_retval  res     1         ' Operation contextual return parameter
37d14 12d             | context_retval  res     1         ' Operation contextual return parameter
37d14 12d             | ' Device stuff
37d14 12d             | hdev_id         res     1+MAX_DEVICES
37d14 12d             | hdev_id         res     1+MAX_DEVICES
37d14 12d             | hdev_bcd        res     1
37d14 12d             | hdev_bcd        res     1
37d14 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37d14 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37d14 12d             | ' Keyboard/mouse stuff
37d14 12d             | hctrl_ep_addr   res     1
37d14 12d             | hctrl_ep_addr   res     1
37d14 12d             | hctrl_max_pkt   res     1
37d14 12d             | hctrl_max_pkt   res     1
37d14 12d             | hconfig_base    res     1
37d14 12d             | hconfig_base    res     1
37d14 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37d14 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37d14 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37d14 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37d14 12d             | hdev_class      res     1
37d14 12d             | hdev_class      res     1
37d14 12d             | hdev_subclass   res     1
37d14 12d             | hdev_subclass   res     1
37d14 12d             | hdev_protocol   res     1
37d14 12d             | hdev_protocol   res     1
37d14 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37d14 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37d14 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37d14 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37d14 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37d14 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37d14 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37d14 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37d14 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37d14 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37d14 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37d14 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37d14 12d             | if HAVE_MOUSE
37d14 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37d14 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37d14 12d             | end
37d14 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37d14 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37d14 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37d14 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37d14 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37d14 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37d14 12d             | hdev_out_addr   res     1
37d14 12d             | hdev_out_addr   res     1
37d14 12d             | 
37d14 12d             | if EMUPAD_MAX_PLAYER > 0
37d14 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37d14 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37d14 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37d14 12d             | end
37d14 12d             | 
37d14 12d             | hreg_init_end
37d14 12d             | 
37d14 12d             | hidr_start
37d14 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37d14 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37d14 12d             | hidr_flags      res     1
37d14 12d             | hidr_flags      res     1
37d14 12d             | hidr_axis       res     3
37d14 12d             | hidr_axis       res     3
37d14 12d             | hidr_buttons    res     1
37d14 12d             | hidr_buttons    res     1
37d14 12d             | hidr_hats       res     1
37d14 12d             | hidr_hats       res     1
37d14 12d             | '' Above are actually useful values, 6 longs
37d14 12d             | hidr_id         res     1
37d14 12d             | hidr_id         res     1
37d14 12d             | hidr_state      res     1
37d14 12d             | hidr_state      res     1
37d14 12d             | hidr_size       res     1
37d14 12d             | hidr_size       res     1
37d14 12d             | hidr_count      res     1
37d14 12d             | hidr_count      res     1
37d14 12d             | hidr_offset     res     1
37d14 12d             | hidr_offset     res     1
37d14 12d             | hidr_usage_idx  res     1
37d14 12d             | hidr_usage_idx  res     1
37d14 12d             | hidr_lminmax    res     1
37d14 12d             | hidr_lminmax    res     1
37d14 12d             | hidr_pminmax    res     1
37d14 12d             | hidr_pminmax    res     1
37d14 12d             | hidr_type       res     1
37d14 12d             | hidr_type       res     1
37d14 12d             | hidr_end
37d14 12d             | 
37d14 12d             | ' Variables dependent on the system freqency
37d14 12d             | _var_64_lower_  res     1
37d14 12d             | _var_64_lower_  res     1
37d14 12d             | _var_64_upper_  res     1
37d14 12d             | _var_64_upper_  res     1
37d14 12d             | _12Mbps_        res     1
37d14 12d             | _12Mbps_        res     1
37d14 12d             | _1_5Mbps_       res     1
37d14 12d             | _1_5Mbps_       res     1
37d14 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37d14 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37d14 12d             | _1us_           res     1         ' 1us
37d14 12d             | _1us_           res     1         ' 1us
37d14 12d             | _10us_          res     1         ' 10us
37d14 12d             | _10us_          res     1         ' 10us
37d14 12d             | _33us_          res     1         ' 33us
37d14 12d             | _33us_          res     1         ' 33us
37d14 12d             | _txn_err_       res     1         ' 250us
37d14 12d             | _txn_err_       res     1         ' 250us
37d14 12d             | _500us_         res     1         ' 500us
37d14 12d             | _500us_         res     1         ' 500us
37d14 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37d14 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37d14 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37d14 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37d14 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37d14 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37d14 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37d14 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37d14 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37d14 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37d14 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37d14 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37d14 12d             | _preamble_wait_ res     1
37d14 12d             | _preamble_wait_ res     1
37d14 12d             | _1ms_           res     1         ' 1ms
37d14 12d             | _1ms_           res     1         ' 1ms
37d14 12d             | _2ms_           res     1         ' 2ms
37d14 12d             | _2ms_           res     1         ' 2ms
37d14 12d             | _suspend_wait_  res     1         ' 3ms
37d14 12d             | _suspend_wait_  res     1         ' 3ms
37d14 12d             | _4ms_           res     1         ' 4ms
37d14 12d             | _4ms_           res     1         ' 4ms
37d14 12d             | _xfer_wait_     res     1         ' 5ms
37d14 12d             | _xfer_wait_     res     1         ' 5ms
37d14 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37d14 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37d14 12d             | _reset_hold_    res     1         ' 15ms
37d14 12d             | _reset_hold_    res     1         ' 15ms
37d14 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37d14 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37d14 12d             | _21ms_          res     1         ' 21ms
37d14 12d             | _21ms_          res     1         ' 21ms
37d14 12d             | _100ms_         res     1         ' 100ms
37d14 12d             | _100ms_         res     1         ' 100ms
37d14 12d             | _500ms_         res     1         ' 500ms
37d14 12d             | _500ms_         res     1         ' 500ms
37d14 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37d14 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37d14 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37d14 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37d14 12d             | '------------------------------------------------------------------------------
37d14 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37d14 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37d14 12d             | _usb_d_ls_nco_  res     1
37d14 12d             | _usb_d_ls_nco_  res     1
37d14 12d             | _usb_h_fs_nco_  res     1
37d14 12d             | _usb_h_fs_nco_  res     1
37d14 12d             | _usb_d_fs_nco_  res     1
37d14 12d             | _usb_d_fs_nco_  res     1
37d14 12d             | '------------------------------------------------------------------------------
37d14 12d             | ' Scratch registers
37d14 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37d14 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37d14 12d             | htmp1           res     1
37d14 12d             | htmp1           res     1
37d14 12d             | htmp2           res     1
37d14 12d             | htmp2           res     1
37d14 12d             | htmp3           res     1
37d14 12d             | htmp3           res     1
37d14 12d             | hrep            res     1         ' Repeat count
37d14 12d             | hrep            res     1         ' Repeat count
37d14 12d             | hsave0          res     1         ' Subroutine parameter saves
37d14 12d             | hsave0          res     1         ' Subroutine parameter saves
37d14 12d             | hsave1          res     1
37d14 12d             | hsave1          res     1
37d14 12d             | hsave2          res     1
37d14 12d             | hsave2          res     1
37d14 12d             | isrtmp1         res     1
37d14 12d             | isrtmp1         res     1
37d14 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37d14 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37d14 12d             | hr0             res     1         ' Multi-purpose registers
37d14 12d             | hr0             res     1         ' Multi-purpose registers
37d14 12d             | hr1             res     1
37d14 12d             | hr1             res     1
37d14 12d             | hr2             res     1
37d14 12d             | hr2             res     1
37d14 12d             | hr3             res     1
37d14 12d             | hr3             res     1
37d14 12d             | hpar1           res     1         ' Routine entry/exit parameters
37d14 12d             | hpar1           res     1         ' Routine entry/exit parameters
37d14 12d             | hpar2           res     1
37d14 12d             | hpar2           res     1
37d14 12d             | hpar3           res     1
37d14 12d             | hpar3           res     1
37d14 12d             | hct2            res     1         ' Function response bus turn-around timer
37d14 12d             | hct2            res     1         ' Function response bus turn-around timer
37d14 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37d14 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37d14 12d             | mod_cnt         res     1         ' Used in idle loops
37d14 12d             | mod_cnt         res     1         ' Used in idle loops
37d14 12d             |                 fit     $1F0
37d14 12d             |                 org     $200
37d14 200             | hlut_start
37d14 200             | 
37d14 200             | '------------------------------------------------------------------------------
37d14 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37d14 200             | ' settings to startup defaults.
37d14 200             | '------------------------------------------------------------------------------
37d14 200             | ' On entry:
37d14 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37d14 200             | '------------------------------------------------------------------------------
37d14 200             | set_speed_full
37d14 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37d18 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37d1c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37d20 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37d24 204             | '                ret                             wcz     ' Restore caller flags on exit
37d24 204             | 
37d24 204             | '------------------------------------------------------------------------------
37d24 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37d24 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37d24 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37d24 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37d24 204             | ' putting the smart pins into reset.
37d24 204             | '------------------------------------------------------------------------------
37d24 204             | ' On entry:
37d24 204             | ' On exit: CZ flags restored to caller states
37d24 204             | '------------------------------------------------------------------------------
37d24 204             | set_speed_low
37d24 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37d28 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37d2c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37d30 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37d34 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37d38 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37d3c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37d40 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37d44 20c             | 
37d44 20c             | '------------------------------------------------------------------------------
37d44 20c             | ' Perform configuration stuff required when a device intitially connects.
37d44 20c             | '------------------------------------------------------------------------------
37d44 20c             | ' On entry:
37d44 20c             | ' On exit:
37d44 20c             | '------------------------------------------------------------------------------
37d44 20c             | on_connect
37d44 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37d48 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37d4c 20e             | .retry
37d4c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37d50 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37d54 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37d58 211 00 08 00 FF 
37d5c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37d60 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37d64 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37d68 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37d6c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37d70 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37d74 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37d78 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37d7c 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37d80 21b 4C 03 B0 FD |                 call    #poll_waitx
37d84 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37d88 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37d8c 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37d90 21f B8 FF 9F FD |                 jmp     #.retry
37d94 220             | .get_dev_desc
37d94 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37d98 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37d9c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37da0 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37da4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37da8 225 88 FB BF FD |                 call    #reset
37dac 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37db0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37db4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37db8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37dbc 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37dc0 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37dc4 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37dc8 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37dcc 22e 04 00 00 FF 
37dd0 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37dd4 230 34 FA BF FD |                 call    #calc_crc5
37dd8 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37ddc 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37de0 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37de4 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37de8 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37dec 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37df0 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37df4 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37df8 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37dfc 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37e00 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37e04 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37e08 23d C4 02 B0 FD |                 call    #poll_waitx
37e0c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37e10 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37e14 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37e18 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37e1c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37e20 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e24 244 2D 00 64 5D |         if_nz   ret
37e28 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37e2c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37e30 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37e34 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37e38 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37e3c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37e40 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37e44 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37e48 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37e4c 24e 2C FB 9F CD |         if_b    jmp     #host_error
37e50 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37e54 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37e58 251 2D EC 63 FD |                 call    pa
37e5c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37e60 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37e64 254 2C EC 63 FD |                 jmp     pa
37e68 255             | 
37e68 255             | '------------------------------------------------------------------------------
37e68 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37e68 255             | ' Status reporting is always in the function-to-host direction.
37e68 255             | '------------------------------------------------------------------------------
37e68 255             | ' On entry:
37e68 255             | '   PTRA - start address of the SETUP data in hub.
37e68 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37e68 255             | '     stage.
37e68 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37e68 255             | ' On exit:
37e68 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37e68 255             | '     contains the count of data stage bytes actually received, which must
37e68 255             | '     always be <= the count requested.
37e68 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37e68 255             | '     more specific USB operation error code.
37e68 255             | '------------------------------------------------------------------------------
37e68 255             | control_read
37e68 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37e6c 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37e70 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37e74 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37e78 259             | .xfer_start
37e78 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37e7c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37e80 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e84 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37e88 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
37e8c 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37e90 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37e94 260 61 00 00 FF 
37e98 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
37e9c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37ea0 263             | .data
37ea0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
37ea4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
37ea8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37eac 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
37eb0 267             | .nak_retry
37eb0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
37eb4 268             | .in_retry
37eb4 268 BC F6 BF FD |                 call    #txn_in
37eb8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
37ebc 26a 28 00 90 AD |         if_z    jmp     #.commit
37ec0 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37ec4 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37ec8 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37ecc 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37ed0 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
37ed4 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37ed8 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37edc 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37ee0 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
37ee4 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
37ee8 275             | .commit
37ee8 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
37eec 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
37ef0 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
37ef4 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
37ef8 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
37efc 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
37f00 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
37f04 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
37f08 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
37f0c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
37f10 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
37f14 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
37f18 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
37f1c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
37f20 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
37f24 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
37f28 285             | .pre_status
37f28 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
37f2c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
37f30 287 00 B0 06 F6 |                 mov     pkt_data, #0
37f34 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
37f38 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37f3c 28a 61 00 00 FF 
37f40 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
37f44 28c             | .out_retry
37f44 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
37f48 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f4c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
37f50 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37f54 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37f58 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37f5c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37f60 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37f64 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37f68 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
37f6c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
37f70 297             | ' I've encountered transfer STALL, even though the data looks correct, and
37f70 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
37f70 297             | ' ControlRead() transfer gets things unstuck most of the time...
37f70 297             | .xfer_retry
37f70 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
37f74 298 58 01 B0 FD |                 call    #poll_waitx
37f78 299 8C F9 BF FD |                 call    #wait_txn_ok
37f7c 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
37f80 29b C7 F1 03 F6 |                 mov     ptra, hpar2
37f84 29c C8 EF 03 F6 |                 mov     pb, hpar3
37f88 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
37f8c 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
37f90 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
37f94 2a0             | 
37f94 2a0             | '------------------------------------------------------------------------------
37f94 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
37f94 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
37f94 2a0             | ' the SETUP data struct is filled with the required values.
37f94 2a0             | '------------------------------------------------------------------------------
37f94 2a0             | ' On entry:
37f94 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
37f94 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
37f94 2a0             | '     stage.
37f94 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
37f94 2a0             | ' On exit:
37f94 2a0             | '   retval - used to convey the success/failure of each stage.
37f94 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37f94 2a0             | '     more specific USB operation error code.
37f94 2a0             | '------------------------------------------------------------------------------
37f94 2a0             | control_write
37f94 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
37f98 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37f9c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37fa0 2a3             | 
37fa0 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37fa4 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
37fa8 2a5 F7 91 03 F6 |                 mov     hpar3, pb
37fac 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37fb0 2a7             | .xfer_start
37fb0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
37fb4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37fb8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37fbc 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fc0 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
37fc4 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
37fc8 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37fcc 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37fd0 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
37fd4 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37fd8 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37fdc 2b2             | .data
37fdc 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
37fe0 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
37fe4 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37fe8 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
37fec 2b6             | .out_retry
37fec 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
37ff0 2b7 88 F6 BF FD |                 call    #txn_out
37ff4 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37ff8 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
37ffc 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38000 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
38004 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
38008 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3800c 2be             | .commit
3800c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38010 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38014 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
38018 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3801c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38020 2c3             | pre_status_in
38020 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38024 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38028 2c5             | .status_retry
38028 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3802c 2c6 44 F5 BF FD |                 call    #txn_in
38030 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38034 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
38038 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3803c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38040 2cb 2D 00 64 AD |         if_z    ret
38044 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
38048 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3804c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38050 2cf             | '               ret                                     ' Caller must handle transfer retirement
38050 2cf             | 
38050 2cf             | '------------------------------------------------------------------------------
38050 2cf             | ' Execute an IN interrupt transaction.
38050 2cf             | '------------------------------------------------------------------------------
38050 2cf             | ' On entry:
38050 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38050 2cf             | '   hpar2 - Address of the IN data buffer
38050 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38050 2cf             | ' On exit:
38050 2cf             | '   retval - the result of the operation.
38050 2cf             | '   hpar3 - the count of IN data bytes actually received.
38050 2cf             | '------------------------------------------------------------------------------
38050 2cf             | do_int_in
38050 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38054 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38058 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3805c 2d2             | 
3805c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
38060 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38064 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
38068 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3806c 2d6             | .retry
3806c 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
38070 2d7 00 F5 BF FD |                 call    #txn_in
38074 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
38078 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3807c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
38080 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
38084 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
38088 2dd 54 00 B0 FD |                 call    #retry_wait
3808c 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38090 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38094 2e0 D4 FF 9F FD |                 jmp     #.retry
38098 2e1             | .commit
38098 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3809c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
380a0 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
380a4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
380a8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
380ac 2e6             | .post_ret
380ac 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
380b0 2e7             | 
380b0 2e7             | 
380b0 2e7             | '------------------------------------------------------------------------------
380b0 2e7             | ' Resets the downstream hub port to FS
380b0 2e7             | '------------------------------------------------------------------------------
380b0 2e7             | dwnstream_reset
380b0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
380b4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
380b8 2e9             | 
380b8 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
380bc 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
380c0 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
380c4 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
380c8 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
380cc 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
380d0 2ef             | 
380d0 2ef             | '------------------------------------------------------------------------------
380d0 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
380d0 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
380d0 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
380d0 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
380d0 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
380d0 2ef             | '------------------------------------------------------------------------------
380d0 2ef             | ' On entry:
380d0 2ef             | '   hctwait - wait interval in sysclocks.
380d0 2ef             | ' On exit:
380d0 2ef             | '------------------------------------------------------------------------------
380d0 2ef             | poll_waitx
380d0 2ef 1A 92 63 FD |                 getct   hct2
380d4 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
380d8 2f1             | .wait
380d8 2f1 FF 25 CC FB |                 jnct2   #.wait
380dc 2f2 2D 00 64 FD |                 ret
380e0 2f3             | 
380e0 2f3             | '------------------------------------------------------------------------------
380e0 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
380e0 2f3             | '------------------------------------------------------------------------------
380e0 2f3             | ' On entry:
380e0 2f3             | '   retval - transaction response PID or error code.
380e0 2f3             | ' On exit:
380e0 2f3             | '------------------------------------------------------------------------------
380e0 2f3             | retry_wait
380e0 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
380e4 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
380e8 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
380ec 2f6 14 00 90 AD |         if_z    jmp     #.nak
380f0 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
380f4 2f8 D8 FF BF FD |                 call    #poll_waitx
380f8 2f9             | .dec
380f8 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
380fc 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
38100 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
38104 2fc             | .nak
38104 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
38108 2fd C4 FF BF FD |                 call    #poll_waitx
3810c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38110 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38114 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
38118 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3811c 302 2D 00 64 FD |                 ret
38120 303             | 
38120 303             | host_reset
38120 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38124 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
38128 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
38128 305 BD 01 05 FF 
3812c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38130 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38134 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
38138 309             | ' Check to see if the system clock has been changed.
38138 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3813c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38140 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38144 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
38148 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3814c 30e 40 46 62 FD |                 dirl    dp
38150 30f             | 
38150 30f 28 02 64 FD |                 setq    #1
38154 310 80 00 80 FF 
38158 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3815c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
38160 313             | .enable
38160 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38164 314 41 46 62 FD |                 dirh    dp
38168 315 1F 36 63 FD |                 waitx   _1us_
3816c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38170 317             | 
38170 317             |                 ' Handle Port protection enable and startup delay
38170 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38174 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
38178 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3817c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
38180 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
38184 31c             | 
38184 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
38188 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3818c 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38190 31f 00 00 04 F6 |                 mov     0-0, #0
38194 320             | .regloop
38194 320             | 
38194 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38194 320             | 
38194 320             | discon_entry
38194 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
38198 321             | 
38198 321             |               
38198 321             |         if HAVE_HIDPAD
38198 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3819c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
381a0 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
381a4 324 F7 01 68 FC |                 wrlong  #0,pb
381a8 325             |         end
381a8 325             |         if EMUPAD_MAX_PLAYER > 0
381a8 325             |         end
381a8 325             | 
381a8 325             |                 ' Fall through to disconnected loop
381a8 325             | 
381a8 325             | '-----------------------------------------------------------------------------------------------------------------
381a8 325             | ' Device connect handling (Section 7.1.7.3).
381a8 325             | '-----------------------------------------------------------------------------------------------------------------
381a8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
381a8 325             | ' device to connect (Section 7.1.7.3).
381a8 325             | '-----------------------------------------------------------------------------------------------------------------
381a8 325             | disconnected
381a8 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
381ac 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
381b0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
381b4 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
381b8 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
381bc 32a             |         if ACTIVITY_LED >= 0
381bc 32a             |         end
381bc 32a 22 A7 82 FA |                 rqpin   urx, dm
381c0 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
381c4 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
381c8 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
381cc 32e             | .se1_test
381cc 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
381d0 32f FC FE BF FD |                 call    #poll_waitx
381d4 330 22 A7 82 FA |                 rqpin   urx, dm
381d8 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
381dc 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
381e0 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
381e4 334             | .se1            'SE1 is a fatal error condition
381e4 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
381e8 335 E4 FE BF FD |                 call    #poll_waitx
381ec 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
381f0 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
381f4 338             | .connect_test                                           ' Test lines until stable J/K state seen
381f4 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
381f8 339 22 A7 82 FA |                 rqpin   urx, dm
381fc 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38200 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
38204 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
38208 33d             | connected
38208 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3820c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38210 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38214 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
38218 341             | .set_pulse
38218 341 1A 64 63 FD |                 getct   _pulse_time_
3821c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38220 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38220 343             | ' of 1ms and make a correction, if necessary.
38220 343             | '                mov     htmp, _1ms_
38220 343             | '                subs    htmp, iframe_delta
38220 343             | '                adds    _frame1ms_clks_, htmp
38220 343             | '                debug(udec(_frame1ms_clks_))
38220 343             | 
38220 343             |                 ' Fall through to idle/processing loop
38220 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38224 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
38228 345             | 
38228 345             | hidle
38228 345 22 A7 82 FA |                 rqpin   urx, dm
3822c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38230 347 98 00 90 CD |         if_c    jmp     #.se0_test
38234 348 24 06 70 FD |                 pollct3                         wc
38238 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3823c 34a 1A 94 63 FD |                 getct   hct3
38240 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38244 34c             | 
38244 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38248 34d 00 70 E3 F8 |                 getbyte htmp
3824c 34e             | 
3824c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38250 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38254 350 40 00 90 AD |         if_z    jmp     #.poll
38258 351             | 
38258 351             |         if _HAVE_GAMEPAD
38258 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3825c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
38260 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
38264 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
38268 355 2C 00 90 AD |         if_z    jmp     #.poll
3826c 356             |         end
3826c 356             | 
3826c 356             |         if HAVE_MOUSE
3826c 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
38270 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
38274 358 20 00 90 AD |         if_z    jmp     #.poll
38278 359             |         end
38278 359             | 
38278 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3827c 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
38280 35b 14 00 90 AD |         if_z    jmp     #.poll
38284 35c             | 
38284 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
38288 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3828c 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
38290 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38294 360             |         if HAVE_MOUSE
38294 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
38298 361             |         else
38298 361             |         end
38298 361             | 
38298 361             | .poll
38298 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3829c 362 2D EC 63 FD |                 call    pa
382a0 363             | .skip_poll
382a0 363             | 
382a0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
382a4 364             | 
382a4 364             | .nopoll
382a4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
382a8 365 44 00 90 AD |         if_z    jmp     #hsuspend
382ac 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
382b0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
382b4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
382b8 369 1A 84 63 FD |                 getct   hr0
382bc 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
382c0 36b             |         if ACTIVITY_LED >= 0
382c0 36b             |         end
382c0 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
382c4 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
382c8 36d 5C FF 9F FD |                 jmp     #hidle
382cc 36e             | ' Check for extended SE0 state on the bus
382cc 36e             | .se0_test
382cc 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
382d0 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
382d4 370 22 A7 82 FA |                 rqpin   urx, dm
382d8 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
382dc 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
382e0 373 24 F6 BF FD |                 call    #wait_txn_ok
382e4 374 00 00 80 FF 
382e8 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
382ec 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
382ec 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
382f0 377             | 
382f0 377             | hsuspend
382f0 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
382f4 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
382f8 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
382fc 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
38300 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
38304 37c 00 96 07 F6 |                 mov     mod_cnt, #0
38308 37d             | 
38308 37d             |                 ' Fall through to resume wait loop
38308 37d             | 
38308 37d             | hwait_resume
38308 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3830c 37e 02 86 47 F0 |                 shr     hr1, #2
38310 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38314 380             |         if ACTIVITY_LED >= 0
38314 380             |         end
38314 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
38318 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3831c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38320 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38324 384 18 00 90 AD |         if_z    jmp     #.resume
38328 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3832c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38330 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38334 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38338 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3833c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38340 38b             | .resume
38340 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38344 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
38348 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3834c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38350 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38354 390 1F 70 63 FD |                 waitx   htmp
38358 391 22 07 28 FC |                 wypin   #OUT_J, dm
3835c 392 01 70 47 F0 |                 shr     htmp, #1
38360 393 1F 70 63 FD |                 waitx   htmp
38364 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38368 395 1A 92 62 FD |                 getct   iframe_ct_base
3836c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38370 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38374 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
38378 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3837c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
38380 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
38384 39c             | 
38384 39c             | '------------------------------------------------------------------------------
38384 39c             | ' Send preamble to enable low-speed HUB ports
38384 39c             | '------------------------------------------------------------------------------
38384 39c             | ' On entry:
38384 39c             | ' On exit:
38384 39c             | '   USB baud rate set to low-speed
38384 39c             | '------------------------------------------------------------------------------
38384 39c             | utx_pre
38384 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38388 39d 40 46 62 FD |                 dirl    dp
3838c 39e 28 02 64 FD |                 setq    #1
38390 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38394 3a0 58 44 62 FD |                 drvl    dm
38398 3a1 59 46 62 FD |                 drvh    dp
3839c 3a2             | 
3839c 3a2 1E 00 00 FF 
383a0 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
383a4 3a4             | 
383a4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
383a8 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
383ac 3a6 28 02 64 3D |         if_nc   setq    #1
383b0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
383b4 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
383b8 3a9             | .l1
383b8 3a9             | 
383b8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
383bc 3aa 40 46 62 FD |                 dirl    dp
383c0 3ab 28 02 64 FD |                 setq    #1
383c4 3ac 80 00 80 FF 
383c8 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
383cc 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
383d0 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
383d4 3b0 41 46 62 FD |                 dirh    dp
383d8 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
383dc 3b2             | 
383dc 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
383e0 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
383e4 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
383e8 3b5             | 
383e8 3b5             | hlut_end
383e8 3b5             |                 fit     $400
383e8 3b5             |                 orgh
383e8                 | if OVERLAP_MEMORY
383e8                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
383e8                 | end
383e8                 | '------------------------------------------------------------------------------
383e8                 | ' Routines called from cog space.
383e8                 | '------------------------------------------------------------------------------
383e8                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
383e8                 | '------------------------------------------------------------------------------
383e8                 | 
383e8                 | '------------------------------------------------------------------------------
383e8                 | ' USB host cog initialization.
383e8                 | '------------------------------------------------------------------------------
383e8                 | usb_host_init
383e8                 |                 ' Initialize buffer pointers
383e8                 |         if OVERLAP_MEMORY
383e8                 |         else
383e8     40 15 B0 FE |                 loc     pb, #hid_descr
383ec                 |         end
383ec     F7 4B 02 F6 |                 mov     hid_descr_p, pb
383f0                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
383f0                 |                 {
383f0                 |                 }
383f0                 |         
383f0                 |                 {
383f0                 |                 }
383f0                 |                 'loc     pb,#hkbd_report
383f0                 |                 'mov     hkbd_report_p,pb
383f0                 | 
383f0     08 1D B0 FE |                 loc     pb, #hub_descr
383f4     F7 4D 02 F6 |                 mov     hub_descr_p, pb
383f8     1D 1D B0 FE |                 loc     pb, #urx_buff
383fc     F7 4F 02 F6 |                 mov     urx_buff_p, pb
38400     95 1D B0 FE |                 loc     pb, #dev_desc_buff
38404     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
38408     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3840c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38410     18 15 B0 FE |                 loc     pb, #usb_cache_start
38414     F7 55 02 F6 |                 mov     cache_start_p, pb
38418     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3841c     F7 57 02 F6 |                 mov     cache_end_p, pb
38420                 | 
38420                 |         if ERROR_LED >= 0
38420                 |         end
38420                 | 
38420                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38420                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38420                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38420                 | ' Configure and enable the Serial Host USB port.
38420     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38424                 | 
38424                 | '------------------------------------------------------------------------------
38424                 | ' Timing calculations happen before any interrupt(s) are enabled.
38424                 | '------------------------------------------------------------------------------
38424                 | ' On entry:
38424                 | '   htmp - current CLKFREQ value.
38424                 | '------------------------------------------------------------------------------
38424                 | hinit_usb_timings
38424                 | '                getct   htmp2
38424     B8 59 02 F6 |                 mov     save_sysclk, htmp
38428     8D 5B 80 FF 
3842c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38430     18 30 63 FD |                 getqx   _12Mbps_
38434     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
38438     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3843c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38440     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38444     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
38448     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3844c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38450     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38454     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
38458     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3845c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
38460     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
38464     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
38468     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3846c     80 00 00 FF 
38470     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
38474     18 2C 63 FD |                 getqx   _var_64_lower_
38478     19 2E 63 FD |                 getqy   _var_64_upper_
3847c     28 2C 63 FD |                 setq    _var_64_lower_
38480     65 CD 1D FF 
38484     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
38488     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3848c     01 00 00 FF 
38490     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38494     18 2C 63 FD |                 getqx   _var_64_lower_
38498     19 2E 63 FD |                 getqy   _var_64_upper_
3849c     28 2C 63 FD |                 setq    _var_64_lower_
384a0     A1 07 00 FF 
384a4     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
384a8     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
384ac     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
384b0     09 36 57 F0 |                 shr     _1us_, #9               wc
384b4     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
384b8     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
384bc     18 38 63 FD |                 getqx   _10us_
384c0     09 38 57 F0 |                 shr     _10us_, #9              wc
384c4     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
384c8     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
384cc     18 3A 63 FD |                 getqx   _33us_
384d0     09 3A 57 F0 |                 shr     _33us_, #9              wc
384d4     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
384d8     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
384dc     18 3C 63 FD |                 getqx   _txn_err_
384e0     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
384e4     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
384e8     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
384ec     18 3E 63 FD |                 getqx   _500us_
384f0     09 3E 57 F0 |                 shr     _500us_, #9             wc
384f4     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
384f8     01 00 00 FF 
384fc     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
38500     18 40 63 FD |                 getqx   _txn_ok_ls_
38504     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
38508     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3850c     01 00 00 FF 
38510     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38514     18 42 63 FD |                 getqx   _txn_ok_fs_
38518     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3851c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38520     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38524     05 00 00 FF 
38528     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3852c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38530     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38534     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
38538     1C 00 00 FF 
3853c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38540     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38544     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
38548     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3854c     00 00 00 FF 
38550     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38554     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
38558     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3855c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
38560     04 00 00 FF 
38564     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
38568     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3856c     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
38570     8D 5B 00 FF 
38574     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
38578     18 4C 63 FD |                 getqx   _preamble_wait_
3857c     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
38580     01 00 00 FF 
38584     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
38588     18 2C 63 FD |                 getqx   _var_64_lower_
3858c     19 2E 63 FD |                 getqy   _var_64_upper_
38590     28 2C 63 FD |                 setq    _var_64_lower_
38594     01 00 00 FF 
38598     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3859c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
385a0     09 4E 57 F0 |                 shr     _1ms_, #9               wc
385a4     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
385a8     FF FF 7F FF 
385ac     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
385b0     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
385b4     A7 51 03 F6 |                 mov     _2ms_, _1ms_
385b8     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
385bc     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
385c0     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
385c4     A7 55 03 F6 |                 mov     _4ms_, _1ms_
385c8     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
385cc     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
385d0     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
385d4     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
385d8     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
385dc     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
385e0     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
385e4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
385e8     A7 59 03 F6 |                 mov     _8ms_, _1ms_
385ec     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
385f0     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
385f4     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
385f8     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
385fc     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
38600     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
38604     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
38608     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3860c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38610     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38614     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
38618                 | '        _ret_   mov     _1sec_, save_sysclk
38618                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
38618                 | '                ret
38618                 | {
38618                 | }
38618                 | 
38618                 | '------------------------------------------------------------------------------
38618                 | ' Parse a configuration descriptor chain to see if the device is a recognized
38618                 | ' one. If it is, start the task progression that will configure the device for
38618                 | ' use.
38618                 | '------------------------------------------------------------------------------
38618                 | ' On entry:
38618                 | '   hconfig_base - start address of the cached config descriptor chain.
38618                 | ' On exit:
38618                 | '------------------------------------------------------------------------------
38618                 | hparse_con_desc
38618     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3861c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38620     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38624     4E 70 FF F9 |                 movbyts htmp,#%%1032
38628     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3862c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3862c                 | 
3862c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38630     6E ED 03 F1 |                 add     pa, hconfig_base
38634     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
38638                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
38638                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
38638                 | ' that defines a keyboard and/or mouse.
38638     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3863c                 | .next_intf
3863c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38640     BC 01 90 3D |         if_ae   jmp     #hset_config
38644     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38648     75 F3 03 F1 |                 add     ptrb, hnext_desc
3864c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38650     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38654     0C 00 90 AD |         if_z    jmp     #.intf
38658     80 71 C7 FA |                 rdbyte  htmp, ptrb
3865c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38660     D8 FF 9F FD |                 jmp     #.next_intf
38664                 | .intf
38664     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
38668     00 90 07 F6 |                 mov     hpar3, #0
3866c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
38670     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38674     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
38678     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3867c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3867c                 | 
3867c                 | .endp
3867c     80 71 C7 FA |                 rdbyte  htmp, ptrb
38680     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38684     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38688     78 00 90 3D |         if_ae   jmp     #.get_device
3868c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38690     75 F3 03 F1 |                 add     ptrb, hnext_desc
38694     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38698     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3869c     64 00 90 AD |         if_z    jmp     #.get_device
386a0     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
386a4     04 00 90 AD |         if_z    jmp     #.get_ep
386a8     D0 FF 9F FD |                 jmp     #.endp
386ac                 | .get_ep
386ac     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
386b0     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
386b4     0F 86 67 F0 |                 shl     hr1, #8 + 7
386b8     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
386bc     3F 00 00 FF 
386c0     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
386c4     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
386c8     00 8E 0F F2 |                 cmp     hpar2, #0               wz
386cc     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
386d0     00 90 0F F2 |                 cmp     hpar3, #0               wz
386d4     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
386d8     A0 FF 9F FD |                 jmp     #.endp
386dc                 | .in_ep
386dc     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
386e0     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
386e4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
386e4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
386e8     C2 89 DB F8 |                 setbyte hr2, hr0, #3
386ec     8C FF 9F FD |                 jmp     #.endp
386f0                 | .out_ep
386f0     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
386f4     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
386f8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
386f8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
386fc     C2 8B DB F8 |                 setbyte hr3, hr0, #3
38700     78 FF 9F FD |                 jmp     #.endp
38704                 | 
38704                 | .get_device
38704     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
38708     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3870c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38710     68 00 90 AD |         if_z    jmp     #.gamepad
38714     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
38718     AC 00 90 AD |         if_z    jmp     #.hub
3871c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38720     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38724     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38728     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3872c     4C 00 90 AD |         if_z    jmp     #.gamepad
38730     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38734     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
38738                 | .keyboard
38738     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3873c                 |         if HAVE_MOUSE
3873c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38740                 |         else
38740                 |         end
38740     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38744     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
38748     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3874c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38750     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38754     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
38758                 |                 'debug(udec(kb_intf_num))
38758                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38758     E0 FE 9F FD |                 jmp     #.next_intf
3875c                 | if HAVE_MOUSE
3875c                 | .mouse
3875c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38760     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38764     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
38768     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3876c     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38770                 |                 'getbyte ms_interval, hr2, #3
38770     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38774     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
38778                 |                 'debug(udec(kb_intf_num))
38778                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38778     C0 FE 9F FD |                 jmp     #.next_intf
3877c                 | end
3877c                 | .gamepad
3877c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38780     C7 71 63 F5 |                 xor     htmp, hpar2
38784     3F 00 00 FF 
38788     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3878c     AC FE 9F AD |         if_z    jmp     #.next_intf
38790                 |         if HAVE_MOUSE
38790     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38794     C7 71 63 F5 |                 xor     htmp, hpar2
38798     3F 00 00 FF 
3879c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
387a0     98 FE 9F AD |         if_z    jmp     #.next_intf
387a4                 |         end
387a4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
387a8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
387ac     8C FE 9F 5D |         if_nz   jmp     #.next_intf
387b0                 | 
387b0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
387b4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
387b8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
387bc     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
387c0     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
387c4                 |                 'debug(udec(gp_intf_num))
387c4                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
387c4     74 FE 9F FD |                 jmp     #.next_intf
387c8                 | .hub
387c8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
387cc     6C FE 9F 5D |         if_nz   jmp     #.next_intf
387d0     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
387d4     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
387d8     60 FE 9F 5D |         if_nz   jmp     #.next_intf
387dc     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
387e0     58 FE 9F 5D |         if_nz   jmp     #.next_intf
387e4     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
387e8     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
387ec     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
387f0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
387f4     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
387f8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
387fc                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
387fc     3C FE 9F FD |                 jmp     #.next_intf
38800                 | 
38800                 | '------------------------------------------------------------------------------
38800                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38800                 | ' it according to its function, or functions. In the case of this boot protocol
38800                 | ' keyboard/mouse class driver:
38800                 | ' - SetConfiguration(config_num)
38800                 | ' - SetProtocol(boot)
38800                 | ' - SetIdle(indefinite)
38800                 | ' - Enter the device interrupt IN polling task stage.
38800                 | '------------------------------------------------------------------------------
38800                 | ' On entry:
38800                 | ' On exit:
38800                 | '------------------------------------------------------------------------------
38800                 | hset_config
38800                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38800                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38800     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38804     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38808     00 00 0C F2 |                 cmp     0-0, #0                 wz
3880c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38810                 |         if HAVE_MOUSE
38810     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38814                 |         end
38814     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38818     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3881c                 | .set_config
3881c     6C 0E D0 FE |                 loc     ptra, #set_config
38820     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38824     6E ED 03 F1 |                 add     pa, hconfig_base
38828     F6 8D C3 FA |                 rdbyte  hpar1, pa
3882c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38830     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38834     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
38838     A0 02 A0 FD |                 call    #control_write
3883c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38840     2D 00 64 5D |         if_nz   ret
38844                 | .kbd_config
38844     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
38848     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3884c                 | 
3884c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38850     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38854     3F 00 00 FF 
38858     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3885c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38860                 | 
38860     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38864     34 0E D0 FE |                 loc     ptra, #set_protocol
38868     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3886c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38870     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38874     A0 02 A0 FD |                 call    #control_write
38878     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3887c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38880     E4 02 90 5D |         if_nz   jmp     #.notify_client
38884     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38888     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3888c     30 03 B0 FD |                 call    #hset_idle
38890                 |                 'cmp     retval, #PID_ACK        wz
38890                 |         'if_nz   mov     hkbd_ep_addr, #0
38890                 |         'if_nz   jmp     #.notify_client
38890     A8 99 02 F6 |                 mov     hctwait, _2ms_
38894     EF 02 A0 FD |                 call    #poll_waitx
38898     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3889c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
388a0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
388a4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
388a8     2C 03 B0 FD |                 call    #hset_kbdled_report
388ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
388b0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
388b4     B0 02 90 5D |         if_nz   jmp     #.notify_client
388b8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
388bc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
388c0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
388c4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
388c8     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
388cc     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
388d0     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
388d4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
388d8     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
388dc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
388e0     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
388e4                 |         if !!HAVE_MOUSE
388e4                 |         end
388e4                 | 
388e4                 | .mouse_config
388e4                 | if HAVE_MOUSE
388e4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
388e8     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
388ec     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
388f0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
388f4     3F 00 00 FF 
388f8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
388fc     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38900                 | 
38900                 |                 debug("mouse passed addr check")
38900                 | 
38900     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38904     00 00 80 FF 
38908     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3890c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38910     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38914     55 02 A0 FD |                 call    #control_read
38918     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3891c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38920     44 02 90 5D |         if_nz   jmp     #.notify_client
38924     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38928     56 01 00 F6 |                 mov     0-0, total_data
3892c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38930                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38930                 | 
38930     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38934     64 0D D0 FE |                 loc     ptra, #set_protocol
38938     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3893c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38940     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38944     A0 02 A0 FD |                 call    #control_write
38948     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3894c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38950     14 02 90 5D |         if_nz   jmp     #.notify_client
38954                 |                 debug("mouse passed SetProtocol")
38954     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38958     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3895c     60 02 B0 FD |                 call    #hset_idle
38960                 |                 'cmp     retval, #PID_ACK        wz
38960                 |         'if_nz   mov     hmouse_ep_addr, #0
38960                 |         'if_nz   jmp     #.notify_client
38960                 |                 debug("mouse passed SetIdle")
38960     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38964     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38968     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3896c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38970     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38974     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38978     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3897c     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38980     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38984     3F 00 00 FF 
38988     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3898c     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38990     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38994     D0 01 90 FD |                 jmp     #.notify_client
38998                 | end
38998                 | .gamepad_config
38998                 | if _HAVE_GAMEPAD
38998     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3899c     00 00 0C F2 |                 cmp     0-0, #0                 wz
389a0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
389a4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
389a8     00 70 03 F6 |                 mov     htmp, 0-0
389ac     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
389b0     3F 00 00 FF 
389b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
389b8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
389bc                 | 
389bc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
389c0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
389c4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389c8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389cc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
389d0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
389d4     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
389d8     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
389dc     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
389e0     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389e4     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389e8     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
389ec     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
389f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
389f4                 | 
389f4                 |                 if EMUPAD_MAX_PLAYER > 0
389f4                 |                 
389f4                 | .rule_loop           
389f4                 |                 end
389f4                 | 
389f4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
389f8     5C 00 90 AD |         if_e    jmp     #.xinput
389fc     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38a00     00 70 03 F6 |                 mov     htmp,0-0
38a04     01 A6 02 FF 
38a08     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38a0c     7C 00 90 AD |         if_e    jmp     #.ps3
38a10                 | 
38a10     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38a14     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38a18     00 00 80 5F 
38a1c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38a20     03 00 80 AF 
38a24     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38a28     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38a2c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a30     55 02 A0 FD |                 call    #control_read
38a34     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a38     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38a3c     00 00 04 56 |         if_nz   mov     0-0, #0
38a40     24 01 90 5D |         if_nz   jmp     #.notify_client
38a44     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38a48     56 01 00 F6 |                 mov     0-0, total_data
38a4c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a50                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38a50                 | 
38a50     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38a54     10 01 90 FD |                 jmp     #.notify_client
38a58                 | .xinput
38a58     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38a5c     2D EF 03 F6 |                 mov     pb,hdev_port
38a60     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38a64     03 EE 27 F3 |                 fle     pb,#3
38a68     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38a6c     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38a70                 | 
38a70     03 B0 06 F6 |                 mov     pkt_data, #3
38a74     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38a78     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38a7c     5A 00 A0 FD |                 call    #txn_out
38a80     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38a84                 | 
38a84     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38a88     DC 00 90 FD |                 jmp     #.notify_client
38a8c                 | .ps3
38a8c     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38a90     2D EF 03 F6 |                 mov     pb,hdev_port
38a94     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38a98     04 EE 27 F3 |                 fle     pb,#4
38a9c     F7 EF C3 F9 |                 decod   pb
38aa0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38aa4                 | 
38aa4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38aa8     00 0C D0 FE |                 loc     ptra, #set_report
38aac     01 00 80 FF 
38ab0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38ab4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38ab8     03 61 5C FC |                 wrword  #48, ptra[wLength]
38abc     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38ac0     A0 02 A0 FD |                 call    #control_write
38ac4                 | 
38ac4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38ac8     E0 0B D0 FE |                 loc     ptra, #set_report
38acc     01 00 80 FF 
38ad0     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38ad4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38ad8     03 09 5C FC |                 wrword  #4, ptra[wLength]
38adc     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38ae0     A0 02 A0 FD |                 call    #control_write
38ae4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38ae8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38aec     00 00 04 56 |         if_nz   mov     0-0, #0
38af0     74 00 90 5D |         if_nz   jmp     #.notify_client
38af4                 | 
38af4     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38af8     6C 00 90 FD |                 jmp     #.notify_client
38afc                 | end
38afc                 | 
38afc                 | .hub_config
38afc     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38b00     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38b04     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38b08     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38b0c     3F 00 00 FF 
38b10     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38b14     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38b18                 | 
38b18     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38b1c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38b20     26 EF 03 F6 |                 mov     pb, hub_descr_p
38b24     55 02 A0 FD |                 call    #control_read
38b28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b2c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38b30     34 00 90 5D |         if_nz   jmp     #.notify_client
38b34                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38b34                 | 
38b34     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38b38     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38b3c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38b40                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38b40                 | .pwr_loop
38b40     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38b44     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38b48     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38b4c     A0 02 A0 FD |                 call    #control_write
38b50     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38b54                 | 
38b54     B1 99 02 F6 |                 mov     hctwait, _500ms_
38b58     B0 99 02 F1 |                 add     hctwait, _100ms_
38b5c     EF 02 A0 FD |                 call    #poll_waitx
38b60                 | 
38b60     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38b64     00 00 90 FD |                 jmp     #.notify_client
38b68                 | 
38b68                 | .notify_client
38b68     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38b6c     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38b70                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38b70                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38b70     2D 00 64 FD |                 ret
38b74                 | 
38b74                 | '------------------------------------------------------------------------------
38b74                 | ' Initialize the keyboard/mouse data area to start-up values.
38b74                 | '------------------------------------------------------------------------------
38b74                 | ' On entry:
38b74                 | ' On exit:
38b74                 | '------------------------------------------------------------------------------
38b74                 | init_kbdm_data
38b74     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38b78     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38b7c                 | 
38b7c     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38b80     2B ED 03 F6 |                 mov     pa, cache_end_p
38b84                 | .loop
38b84     61 01 4C FC |                 wrbyte  #0, ptra++
38b88     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38b8c     F4 FF 9F CD |         if_b    jmp     #.loop
38b90                 |         
38b90                 |         if EMUPAD_MAX_PLAYER > 0
38b90                 |         end
38b90                 | 
38b90                 | 
38b90     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38b94                 | .regloop
38b94     00 EC 8F F9 |                 altd    pa
38b98     00 00 04 F6 |                 mov     0-0, #0
38b9c     01 EC 07 F1 |                 add     pa, #1
38ba0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38ba4     EC FF 9F 5D |         if_nz   jmp     #.regloop
38ba8                 | 
38ba8     E1 E1 61 FF 
38bac     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38bb0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38bb4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38bb8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38bbc                 | 
38bbc     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38bc0                 | 
38bc0                 | '------------------------------------------------------------------------------
38bc0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38bc0                 | ' function.
38bc0                 | '------------------------------------------------------------------------------
38bc0                 | ' On entry:
38bc0                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38bc0                 | '   hpar2 - index number of the target interface.
38bc0                 | ' On exit:
38bc0                 | '------------------------------------------------------------------------------
38bc0                 | hset_idle
38bc0     A8 99 02 F6 |                 mov     hctwait, _2ms_
38bc4     EF 02 A0 FD |                 call    #poll_waitx
38bc8     D8 0A D0 FE |                 loc     ptra, #set_idle
38bcc     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38bd0     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38bd4     A0 02 80 FD |                 jmp     #control_write
38bd8                 | 
38bd8                 | '------------------------------------------------------------------------------
38bd8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38bd8                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38bd8                 | '------------------------------------------------------------------------------
38bd8                 | ' On entry:
38bd8                 | '   ep_addr_pid - device address and enpoint for the request.
38bd8                 | ' On exit:
38bd8                 | '   retval - transaction result.
38bd8                 | '------------------------------------------------------------------------------
38bd8                 | hset_kbdled_report
38bd8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38bdc     CC 0A D0 FE |                 loc     ptra, #set_report
38be0     01 00 80 FF 
38be4     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38be8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38bec     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38bf0     27 EF 03 F6 |                 mov     pb, urx_buff_p
38bf4     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38bf8     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38bfc                 | 
38bfc                 | '------------------------------------------------------------------------------
38bfc                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38bfc                 | '------------------------------------------------------------------------------
38bfc                 | ' On entry:
38bfc                 | ' On exit:
38bfc                 | '------------------------------------------------------------------------------
38bfc                 | hget_kbd_in_report
38bfc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38c00     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38c04     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38c08     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38c0c     CF 02 A0 FD |                 call    #do_int_in
38c10     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c14     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38c18                 | 
38c18     00 90 0F F2 |                 cmp     hpar3, #0               wz
38c1c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38c20                 | 
38c20     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38c24     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38c28     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38c2c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38c30                 | 
38c30     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38c34     18 00 B0 FD |                 call    #hkbd_compare
38c38                 |         if EMUPAD_MAX_PLAYER > 0
38c38                 |         end
38c38                 | 
38c38                 | .led_check
38c38     3B 71 03 F6 |                 mov     htmp, kb_led_states
38c3c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38c40     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38c44     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38c48     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38c4c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38c50                 | 
38c50                 | '------------------------------------------------------------------------------
38c50                 | ' Compare current and previous keyboard data buffers for keypress changes.
38c50                 | '------------------------------------------------------------------------------
38c50                 | hkbd_compare
38c50     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38c54     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38c58     61 73 07 FB |                 rdlong  htmp1, ptra++
38c5c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38c60     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38c64     61 73 07 FB |                 rdlong  htmp1, ptra++
38c68     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38c6c     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38c70     2D 00 64 AD |         if_z    ret
38c74                 | 
38c74     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38c78                 | 
38c78                 |                 ' Handle modifiers
38c78     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38c7c     00 87 C7 FA |                 rdbyte  hr1, ptra
38c80     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38c84     63 86 63 FD |                 mergew  hr1
38c88     08 EC 07 F6 |                 mov     pa,#8
38c8c                 | .modloop
38c8c     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38c90     E8 8C 07 F6 |                 mov     hpar1,#$E8
38c94     F6 8D 83 F1 |                 sub     hpar1,pa
38c98     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38c9c     FB ED 6F FB |                 djnz    pa,#.modloop
38ca0                 | 
38ca0     6F E0 75 FD | .release        modc    _set    wc
38ca4                 |                 'alts    hdev_port, #hid_report_p
38ca4                 |                 'mov     ptra, hid_report_p
38ca4     02 F0 07 F1 |                 add     ptra, #2
38ca8     06 EC 07 F6 |                 mov     pa, #6
38cac     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38cb0     20 00 90 AD |         if_z    jmp     #.rl3
38cb4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38cb8     02 F2 07 F1 |                 add     ptrb, #2
38cbc     06 EE 07 F6 |                 mov     pb, #6
38cc0     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38cc4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38cc8     08 00 90 AD |         if_z    jmp     #.rl3
38ccc     FC EF 6F FB |                 djnz    pb, #.rl2
38cd0     68 00 B0 FD |                 call    #hkbd_translate
38cd4     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38cd8                 | 
38cd8     00 90 07 F6 |                 mov     hpar3, #0
38cdc     1F 90 27 F4 |                 bith    hpar3, #31
38ce0                 | 
38ce0     6F 00 74 FD | .press          modc    _clr    wc
38ce4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38ce8     02 F0 07 F1 |                 add     ptra, #2
38cec     06 EC 07 F6 |                 mov     pa, #6
38cf0     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38cf4     20 00 90 AD |         if_z    jmp     #.pl3
38cf8     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38cfc     02 F2 07 F1 |                 add     ptrb, #2
38d00     06 EE 07 F6 |                 mov     pb, #6
38d04     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38d08     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38d0c     08 00 90 AD |         if_z    jmp     #.pl3
38d10     FC EF 6F FB |                 djnz    pb, #.pl2
38d14     24 00 B0 FD |                 call    #hkbd_translate
38d18     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38d1c                 | 
38d1c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38d20     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38d24     28 02 64 FD |                 setq #1
38d28     61 73 07 FB |                 rdlong  htmp1, ptra++
38d2c     28 02 64 FD |                 setq #1
38d30     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38d34     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38d38                 | 
38d38     2D 00 64 FD |                 ret
38d3c                 | 
38d3c                 | '------------------------------------------------------------------------------
38d3c                 | ' Translate keyboard scancode to ASCII
38d3c                 | '------------------------------------------------------------------------------
38d3c                 | ' On entry:
38d3c                 | '   hpar1 - scancode
38d3c                 | '   hpar2 - key modifiers state
38d3c                 | '       c - pressed (0) or released (1) flag
38d3c                 | ' On exit:
38d3c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38d3c                 | '               30..17 = unused
38d3c                 | '                   18 = scroll-lock state 
38d3c                 | '                   17 = caps-lock state
38d3c                 | '                   16 = num-lock state 
38d3c                 | '                15..8 = key modifiers state
38d3c                 | '                 7..0 = scancode
38d3c                 | '------------------------------------------------------------------------------
38d3c                 | hkbd_translate
38d3c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38d40     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38d44     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38d48     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38d4c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38d50     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38d54                 | 
38d54                 |         if EMUPAD_MAX_PLAYER > 0
38d54                 | 
38d54                 |         if EMUPAD_BT0_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT1_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT2_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT3_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT4_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT5_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT6_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT7_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT8_BIT >= 0
38d54                 |         end
38d54                 |         if EMUPAD_BT9_BIT >= 0
38d54                 |         end
38d54                 | 
38d54                 |         end
38d54     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38d58     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38d5c     1F 8C 47 F4 |                 bitc    hpar1, #31
38d60                 |         if KEYQUEUE_SIZE > 0
38d60     C4 09 B0 FE |                 loc pb,#keyq_head
38d64     F7 71 E3 FA |                 rdword htmp,pb
38d68     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38d6c     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38d70     B8 75 03 F6 |                 mov htmp2,htmp
38d74     04 74 07 FA |                 mul htmp2,#4
38d78     F7 75 03 F1 |                 add htmp2,pb
38d7c     02 74 07 F1 |                 add htmp2,#2
38d80     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38d84     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38d88     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38d8c     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38d90                 |         end
38d90     2D 00 7C FD |                 ret wcz
38d94                 | 
38d94                 | if HAVE_MOUSE
38d94                 | '------------------------------------------------------------------------------
38d94                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38d94                 | '------------------------------------------------------------------------------
38d94                 | ' On entry:
38d94                 | ' On exit:
38d94                 | '------------------------------------------------------------------------------
38d94                 | hget_mouse_in_report
38d94     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38d98     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38d9c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38da0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38da4     CF 02 A0 FD |                 call    #do_int_in
38da8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38dac     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38db0                 | 
38db0     00 90 0F F2 |                 cmp     hpar3, #0               wz
38db4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38db8                 | 
38db8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38dbc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38dc0     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38dc4     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38dc8                 | 
38dc8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38dcc     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38dd0     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38dd4     01 90 87 31 |         if_ae   sub     hpar3, #1
38dd8                 | 
38dd8     40 09 90 FE |                 loc     pa, #mouse_limits
38ddc     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38de0                 | 
38de0                 |                 ' load xacc,yacc,zacc
38de0     28 04 64 FD |                 setq    #3-1
38de4     80 87 07 FB |                 rdlong  hr1,ptrb
38de8                 |                 ' load limits and outptr
38de8     28 04 64 FD |                 setq    #3-1
38dec     F6 73 03 FB |                 rdlong  htmp1,pa
38df0                 | 
38df0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38df4     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38df8     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38dfc     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38e00     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38e04     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38e08     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38e0c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38e10                 |               
38e10                 | 
38e10     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38e14     07 70 67 F7 |                 signx   htmp, #7
38e18     B8 87 03 F1 |                 add     hr1,htmp
38e1c     00 72 0F F2 |                 cmp     htmp1,#0 wz
38e20     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38e24     00 86 47 53 |         if_ne   fges    hr1,#0
38e28                 | 
38e28     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38e2c     07 70 67 F7 |                 signx   htmp, #7
38e30     B8 89 03 F1 |                 add     hr2,htmp
38e34     00 74 0F F2 |                 cmp     htmp2,#0 wz
38e38     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38e3c     00 88 47 53 |         if_ne   fges    hr2,#0
38e40                 |                 
38e40                 | 
38e40     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38e44     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38e48     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38e4c     B8 8B 03 A1 |         if_z    add     hr3,htmp
38e50                 | 
38e50     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38e54     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38e58                 | 
38e58                 |                 ' write back accumulators
38e58     28 04 64 FD |                 setq    #3-1
38e5c     80 87 67 FC |                 wrlong  hr1,ptrb
38e60                 |                 ' if outptr set, write X/Y words
38e60     00 76 0F F2 |                 cmp htmp3,#0                    wz
38e64     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38e68     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38e6c     2D 00 64 FD |                 ret
38e70                 | end
38e70                 | 
38e70                 | '------------------------------------------------------------------------------
38e70                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38e70                 | '------------------------------------------------------------------------------
38e70                 | ' On entry:
38e70                 | ' On exit:
38e70                 | '------------------------------------------------------------------------------
38e70                 | if _HAVE_GAMEPAD
38e70                 | hget_gp_in_report
38e70     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38e74     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38e78                 | 
38e78     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38e7c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38e80     00 90 E3 F8 |                 getbyte hpar3
38e84     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38e88     CF 02 A0 FD |                 call    #do_int_in
38e8c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e90     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38e94                 | 
38e94     00 90 0F F2 |                 cmp     hpar3, #0               wz
38e98     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38e9c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
38e9c                 | 
38e9c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
38ea0     00 70 E3 F8 |                 getbyte htmp                            ' |
38ea4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38ea8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
38eac     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
38eb0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
38eb4     B8 01 C0 F8 |                 setbyte htmp                            ' |
38eb8                 | 
38eb8                 | ' Note: the following code compares the current and previous reports
38eb8                 | ' and process the data if there are changes to ease the debug output.
38eb8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
38eb8                 | ' gpPreReport buffer.
38eb8                 | 
38eb8                 |                 ' ----- start of block to remove
38eb8                 |                 {
38eb8                 |                 }
38eb8                 |                 ' ----- end of block to remove
38eb8     F4 04 90 FE |                 loc pa,#hpad_translate
38ebc     2A EC 63 FD |                 push pa
38ec0                 | 
38ec0                 |                 ' FALL THROUGH !!!!
38ec0                 | 
38ec0                 | '------------------------------------------------------------------------------
38ec0                 | ' Decode controller report
38ec0                 | '------------------------------------------------------------------------------
38ec0                 | hid_decode
38ec0                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
38ec0     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
38ec4     00 04 00 FF 
38ec8     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
38ecc                 | 
38ecc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38ed0                 | 
38ed0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38ed4     00 2A E3 F8 |                 getbyte hidr_type
38ed8     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
38edc     34 02 90 AD |         if_z    jmp     #hpad_xinput
38ee0     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
38ee4     1C 03 90 AD |         if_z    jmp     #hpad_ps3
38ee8     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
38eec     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
38ef0     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
38ef4                 |                 
38ef4                 | 
38ef4                 | '------------------------------------------------------------------------------
38ef4                 | ' Handle HID controller (or mouse now
38ef4                 | ' On entry:
38ef4                 | '   ptrb - controller report
38ef4                 | '------------------------------------------------------------------------------
38ef4                 | hpad_hid
38ef4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38ef8     F7 F1 03 F6 |                 mov     ptra, pb
38efc     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
38f00     00 EC 03 F6 |                 mov     pa, 0-0
38f04                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
38f04     19 2A 3B FF 
38f08     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
38f0c                 | 
38f0c                 | .next
38f0c     00 EC 5F F2 |                 cmps    pa, #0      wcz
38f10     2D 00 7C ED |         if_be   ret     wcz
38f14                 | 
38f14     61 8D C7 FA |                 rdbyte  hpar1, ptra++
38f18     01 EC 87 F1 |                 sub     pa, #1
38f1c     00 8E 07 F6 |                 mov     hpar2, #0
38f20                 | 
38f20     C6 71 03 F6 |                 mov     htmp, hpar1
38f24     03 70 07 F5 |                 and     htmp, #$03
38f28     01 70 0F F2 |                 cmp     htmp, #1    wz
38f2c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
38f30     07 8E 67 A7 |         if_z    signx   hpar2,#7
38f34     01 EC 87 A1 |         if_z    sub     pa, #1
38f38     02 70 0F F2 |                 cmp     htmp, #2    wz
38f3c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
38f40     0F 8E 67 A7 |         if_z    signx   hpar2,#15
38f44     02 EC 87 A1 |         if_z    sub     pa, #2
38f48     03 70 0F F2 |                 cmp     htmp, #3    wz
38f4c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
38f50     04 EC 87 A1 |         if_z    sub     pa, #4
38f54                 | 
38f54     FC 8C 07 F5 |                 and     hpar1, #$FC
38f58                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
38f58                 | 
38f58     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
38f5c     0C 01 90 AD |         if_z    jmp     #.report_id
38f60     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
38f64     24 01 90 AD |         if_z    jmp     #.usage_page
38f68     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
38f6c     2C 01 90 AD |         if_z    jmp     #.usage
38f70     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
38f74     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
38f78     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
38f7c     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
38f80     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
38f84     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
38f88     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
38f8c     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
38f90     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
38f94     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
38f98     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
38f9c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
38fa0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
38fa4     64 FF 9F 5D |         if_nz   jmp     #.next
38fa8                 | 
38fa8     D8 1D A7 FB |                 tjf     hidr_state,#.next
38fac                 | 
38fac     03 8E 07 F5 |                 and     hpar2, #$03
38fb0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
38fb4     18 00 90 5D |         if_nz   jmp     #.skip
38fb8                 | 
38fb8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
38fbc     20 00 90 AD |         if_z    jmp     #.axes
38fc0     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
38fc4     5C 00 90 AD |         if_z    jmp     #.hats
38fc8     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
38fcc     70 00 90 AD |         if_z    jmp     #.buttons
38fd0                 | .skip
38fd0     8F 71 03 F6 |                 mov     htmp, hidr_size
38fd4     90 71 03 FA |                 mul     htmp, hidr_count
38fd8     B8 23 03 F1 |                 add     hidr_offset, htmp
38fdc     2C FF 9F FD |                 jmp     #.next
38fe0                 | .axes
38fe0                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
38fe0     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
38fe4     90 87 03 F6 |                 mov     hr1, hidr_count
38fe8                 | .l1
38fe8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
38fec     8F 8F 03 F6 |                 mov     hpar2, hidr_size
38ff0     04 03 B0 FD |                 call    #hpad_getbits
38ff4     64 03 B0 FD |                 call    #hpad_normalize
38ff8     06 84 1F F2 |                 cmp     hr0, #6         wcz
38ffc     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
39000     00 88 43 C8 |         if_b    getnib  hr2
39004     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
39008     5F 01 20 C9 |         if_b    setword retval
3900c     01 84 07 C1 |         if_b    add     hr0, #1
39010     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39014     F4 87 6F FB |                 djnz    hr1, #.l1
39018                 | 
39018     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3901c     01 1C 07 F6 |                 mov     hidr_state, #1
39020     E8 FE 9F FD |                 jmp     #.next
39024                 | .hats
39024                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39024     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39028     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3902c     C8 02 B0 FD |                 call    #hpad_getbits
39030     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39034     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39038     01 1C 07 F6 |                 mov     hidr_state, #1
3903c     90 FF 9F FD |                 jmp     #.skip
39040                 | .buttons
39040                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39040     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39044     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39048     90 8F 03 FA |                 mul     hpar2, hidr_count
3904c     A8 02 B0 FD |                 call    #hpad_getbits
39050     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39054     B8 BF 62 F0 |                 shl     retval, htmp
39058     5F 17 43 F5 |                 or      hidr_buttons, retval
3905c     90 71 03 F1 |                 add     htmp, hidr_count
39060     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39064     01 1C 07 F6 |                 mov     hidr_state, #1
39068     64 FF 9F FD |                 jmp     #.skip
3906c                 | .report_id
3906c     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
39070     2D 00 7C 5D |         if_nz   ret     wcz
39074     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39078     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3907c     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
39080     01 1C 67 56 |         if_nz   neg     hidr_state,#1
39084     01 F2 87 51 |         if_nz   sub     ptrb,#1
39088     80 FE 9F FD |                 jmp     #.next
3908c                 | .usage_page
3908c     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
39090     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39094     04 1C 07 A6 |         if_z    mov     hidr_state, #4
39098     70 FE 9F FD |                 jmp     #.next
3909c                 | .usage
3909c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
390a0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
390a4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
390a8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
390ac     5C FE 9F AD |         if_z    jmp     #.next
390b0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
390b4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
390b8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
390bc     4C FE 9F AD |         if_z    jmp     #.next
390c0     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
390c4     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
390c8     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
390cc     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
390d0     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
390d4     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
390d8     10 00 90 AD |         if_z    jmp     #.usage_axis
390dc     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
390e0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
390e4     03 1C 07 A6 |         if_z    mov     hidr_state, #3
390e8     20 FE 9F FD |                 jmp     #.next
390ec                 | .usage_axis
390ec     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
390f0     18 FE 9F CD |         if_b    jmp     #.next
390f4     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
390f8     C7 01 00 F8 |                 setnib  hpar2
390fc                 | 
390fc     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
39100     C7 8F C3 F9 |                 decod   hpar2
39104     C7 0F 43 F5 |                 or      hidr_flags, hpar2
39108                 | 
39108     01 24 07 F1 |                 add     hidr_usage_idx, #1
3910c     02 1C 07 F6 |                 mov     hidr_state, #2
39110     F8 FD 9F FD |                 jmp     #.next
39114                 | 
39114                 | '------------------------------------------------------------------------------
39114                 | ' Handle XInput controller
39114                 | ' On entry:
39114                 | '   ptrb - controller report
39114                 | '------------------------------------------------------------------------------
39114                 | '   Default implementation translates the report to a pseudo-defacto hid
39114                 | '   standard and jumps to hpad_translate for actions.
39114                 | '   Implementors may take specific actions for this kind of controller.
39114                 | '------------------------------------------------------------------------------
39114                 | hpad_xinput
39114     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
39118     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3911c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39120     14 70 0F F2 |                 cmp     htmp, #$14      wz
39124     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
39128                 | 
39128                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39128                 | 
39128     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3912c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39130                 | 
39130     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39134     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
39138     5F BF 22 F6 |                 not     retval
3913c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39140     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39144     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
39148     5F BF 22 F6 |                 not     retval
3914c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39150                 | 
39150     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39154     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
39158     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3915c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
39160     F8 01 B0 FD |                 call    #hpad_normalize
39164     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
39168     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3916c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39170     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39174     E4 01 B0 FD |                 call    #hpad_normalize
39178     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3917c                 | 
3917c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39180     81 BF E6 FA |                 rdword  retval, ptrb[1]
39184     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39188     00 16 47 F4 |                 bitc    hidr_buttons, #0
3918c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39190     01 16 47 F4 |                 bitc    hidr_buttons, #1
39194     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39198     02 16 47 F4 |                 bitc    hidr_buttons, #2
3919c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
391a0     03 16 47 F4 |                 bitc    hidr_buttons, #3
391a4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
391a8     04 16 47 F4 |                 bitc    hidr_buttons, #4
391ac     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
391b0     05 16 47 F4 |                 bitc    hidr_buttons, #5
391b4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
391b8     08 16 47 F4 |                 bitc    hidr_buttons, #8
391bc     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
391c0     09 16 47 F4 |                 bitc    hidr_buttons, #9
391c4     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
391c8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
391cc     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
391d0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
391d4     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
391d8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
391dc                 | 
391dc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
391e0     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
391e4     7A BB 7A FF 
391e8     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
391ec     F9 FF 7F FF 
391f0     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
391f4     B9 71 5F F9 |                 altgn   htmp, #htmp1
391f8     00 70 43 F8 |                 getnib  htmp
391fc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39200                 | 
39200     AC 01 90 FD |                 jmp     #hpad_translate
39204                 | 
39204                 | '------------------------------------------------------------------------------
39204                 | ' Handle PS3 controller
39204                 | ' On entry:
39204                 | '   ptrb - controller report
39204                 | '------------------------------------------------------------------------------
39204                 | '   Default implementation translates the report to a pseudo-defacto hid
39204                 | '   standard and jumps to hpad_translate for actions.
39204                 | '   Implementors may take specific actions for this kind of controller.
39204                 | '------------------------------------------------------------------------------
39204                 | hpad_ps3
39204     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39208     01 70 0F F2 |                 cmp     htmp, #$01      wz
3920c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39210                 | 
39210                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39210                 | 
39210     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39214     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
39218     40 01 B0 FD |                 call    #hpad_normalize
3921c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39220     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39224     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
39228     30 01 B0 FD |                 call    #hpad_normalize
3922c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39230     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39234     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
39238     20 01 B0 FD |                 call    #hpad_normalize
3923c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39240     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39244     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
39248     10 01 B0 FD |                 call    #hpad_normalize
3924c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39250     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39254     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
39258                 | 
39258     08 8C 07 F6 |                 mov     hpar1, #8
3925c     13 8E 07 F6 |                 mov     hpar2, #19
39260     94 00 B0 FD |                 call    #hpad_getbits
39264                 | 
39264     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39268     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3926c     00 16 47 F4 |                 bitc    hidr_buttons, #0
39270     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39274     01 16 47 F4 |                 bitc    hidr_buttons, #1
39278     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3927c     02 16 47 F4 |                 bitc    hidr_buttons, #2
39280     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39284     03 16 47 F4 |                 bitc    hidr_buttons, #3
39288     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3928c     04 16 47 F4 |                 bitc    hidr_buttons, #4
39290     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39294     05 16 47 F4 |                 bitc    hidr_buttons, #5
39298     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3929c     06 16 47 F4 |                 bitc    hidr_buttons, #6
392a0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
392a4     07 16 47 F4 |                 bitc    hidr_buttons, #7
392a8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
392ac     08 16 47 F4 |                 bitc    hidr_buttons, #8
392b0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
392b4     09 16 47 F4 |                 bitc    hidr_buttons, #9
392b8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
392bc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
392c0     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
392c4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
392c8     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
392cc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
392d0                 | 
392d0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
392d4     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
392d8     09 FA 79 FF 
392dc     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
392e0     FF FA 7F FF 
392e4     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
392e8     B9 71 5F F9 |                 altgn   htmp, #htmp1
392ec     00 70 43 F8 |                 getnib  htmp
392f0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
392f4                 | 
392f4     B8 00 90 FD |                 jmp     #hpad_translate
392f8                 | 
392f8                 | '------------------------------------------------------------------------------
392f8                 | ' Read bits from report data buffer
392f8                 | '------------------------------------------------------------------------------
392f8                 | ' On entry:
392f8                 | '   PTRB - report buffer
392f8                 | '   hpar1 - start bit
392f8                 | '   hpar2 - number of bits
392f8                 | ' On exit:
392f8                 | '   retval - bits
392f8                 | '------------------------------------------------------------------------------
392f8                 | hpad_getbits
392f8     C6 71 03 F6 |                 mov     htmp, hpar1
392fc     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
39300     F9 71 03 F1 |                 add     htmp, ptrb
39304     B8 BF 02 FB |                 rdlong  retval, htmp
39308                 | 
39308     C6 73 03 F6 |                 mov     htmp1, hpar1
3930c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39310     B9 BF 42 F0 |                 shr     retval, htmp1
39314                 | 
39314     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
39318     10 00 90 1D |         if_a    jmp     #.l1
3931c                 | 
3931c     C7 8F C3 F9 |                 decod   hpar2
39320     01 8E 87 F1 |                 sub     hpar2, #1
39324     C7 BF 02 F5 |                 and     retval, hpar2
39328     2D 00 64 FD |                 ret
3932c                 | .l1
3932c     FF 7F 00 FF 
39330     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39334     03 70 07 F1 |                 add     htmp, #3
39338     B8 75 03 FB |                 rdlong  htmp2, htmp
3933c     18 8E 87 F1 |                 sub     hpar2, #24
39340     C7 8F C3 F9 |                 decod   hpar2
39344     01 8E 87 F1 |                 sub     hpar2, #1
39348     B9 75 43 F0 |                 shr     htmp2, htmp1
3934c     C7 75 03 F5 |                 and     htmp2, hpar2
39350     18 74 67 F0 |                 shl     htmp2, #24
39354     BA BF 42 F5 |                 or      retval, htmp2
39358     2D 00 64 FD |                 ret
3935c                 | 
3935c                 | '------------------------------------------------------------------------------
3935c                 | ' Normalize value to signed word (-32768 / 32767)
3935c                 | '------------------------------------------------------------------------------
3935c                 | ' On entry:
3935c                 | '   retval - value to normalize
3935c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3935c                 | '   - or -
3935c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3935c                 | '   hidr_size - value bits length
3935c                 | ' On exit:
3935c                 | '   retval - normalized value
3935c                 | '------------------------------------------------------------------------------
3935c                 | hpad_normalize
3935c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
39360     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
39364     2D 00 64 AD |         if_z    ret
39368     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3936c     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
39370     0F 72 77 F7 |                 signx   htmp1, #15      wc
39374     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
39378     00 BE 66 C7 |         if_c    signx   retval, #0-0
3937c     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
39380     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
39384     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
39388     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3938c     B8 71 53 F6 |                 abs     htmp            wc
39390     1F BE 0E F4 |                 testb   retval, #31     wz
39394     5F BF 42 F6 |                 abs     retval
39398     B8 BF 12 FD |                 qdiv    retval, htmp
3939c     18 BE 62 FD |                 getqx   retval
393a0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
393a4     C0 FF 7F FF 
393a8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
393ac     2D 00 64 FD |                 ret
393b0                 | 
393b0                 | '------------------------------------------------------------------------------
393b0                 | ' Perform controller actions
393b0                 | ' On entry:
393b0                 | '    hidr_id        report id
393b0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
393b0                 | '                      X = hidr_axis+0, #0
393b0                 | '                      Y = hidr_axis+0, #1
393b0                 | '                      Z = hidr_axis+1, #0
393b0                 | '                     RX = hidr_axis+1, #1
393b0                 | '                     RY = hidr_axis+2, #0
393b0                 | '                     RZ = hidr_axis+2, #1
393b0                 | '    hidr_buttons   buttons state (bits 0 to 31)
393b0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
393b0                 | '
393b0                 | '                     -------3 -------2 -------1 -------0 byte
393b0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
393b0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
393b0                 | '                                zyx||| |||||||| ++++++++ n. buttons
393b0                 | '                                |||||| ||||++++--------- n. axes
393b0                 | '                                |||||| ++++------------- n. hats
393b0                 | '                                ++++++------------------ valid axes
393b0                 | '------------------------------------------------------------------------------
393b0                 | hpad_translate
393b0                 | 
393b0                 | 
393b0                 |         if HAVE_HIDPAD
393b0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
393b4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
393b8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
393bc     01 70 E7 F2 |                 cmpsub  htmp,#1
393c0     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
393c4     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
393c8     2D 00 7C 3D |         if_ae   ret     wcz
393cc     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
393d0     B8 F3 03 F1 |                 add     ptrb,htmp
393d4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
393d8     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
393dc     28 0C 64 FD |                 setq    #7-1
393e0     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
393e4                 |         end
393e4                 | 
393e4                 | 
393e4                 |         if EMUPAD_MAX_PLAYER > 0
393e4                 | .emupad_no_hat
393e4                 |         if EMUPAD_BT0_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT1_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT2_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT3_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT4_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT5_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT6_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT7_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT8_BIT >= 0
393e4                 |         end
393e4                 |         if EMUPAD_BT9_BIT >= 0
393e4                 |         end
393e4                 | .emupad_slot_over
393e4                 |         end
393e4                 | 
393e4                 |         if 0
393e4                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
393e4                 | 
393e4                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
393e4                 | 
393e4                 |         end
393e4     2D 00 64 FD |                 ret
393e8                 | end
393e8                 | 
393e8                 | if EMUPAD_MAX_PLAYER > 0
393e8                 | '------------------------------------------------------------------------------
393e8                 | ' Clear EmuPad state
393e8                 | '------------------------------------------------------------------------------
393e8                 | emupad_reset
393e8                 | 
393e8                 | '------------------------------------------------------------------------------
393e8                 | ' Get EmuPad Player number for current device (into retval)
393e8                 | ' Z flag is also set if current device is valid
393e8                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
393e8                 | '------------------------------------------------------------------------------
393e8                 | emupad_getnum
393e8                 | .loop
393e8                 | '------------------------------------------------------------------------------
393e8                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
393e8                 | '------------------------------------------------------------------------------
393e8                 | emupad_discon
393e8                 | .loop         
393e8                 |         
393e8                 |         ' FALL THROUGH!!!
393e8                 | 
393e8                 | '------------------------------------------------------------------------------
393e8                 | ' Update EmuPad reports (all of them...)
393e8                 | '------------------------------------------------------------------------------
393e8                 | emupad_write_reports
393e8                 | .devloop
393e8                 | 
393e8                 | end
393e8                 | 
393e8                 | 
393e8                 | '------------------------------------------------------------------------------
393e8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
393e8                 | '------------------------------------------------------------------------------
393e8                 | ' On entry:
393e8                 | ' On exit:
393e8                 | '------------------------------------------------------------------------------
393e8                 | hget_hub_status
393e8     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
393ec     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
393f0     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
393f4     01 90 2F F9 |                 setword hpar3, #1, #1
393f8     CF 02 A0 FD |                 call    #do_int_in
393fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39400     0C 00 90 AD |         if_z    jmp     #.data
39404     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39408     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3940c     2D 00 64 FD |                 ret
39410                 | .data
39410     00 90 0F F2 |                 cmp     hpar3, #0               wz
39414     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39418                 | 
39418     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3941c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39420     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39424     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
39428                 |                 debug(ubin_long(hub_status_chg))
39428                 | 
39428     01 5A 06 F6 |                 mov     hdev_port, #1
3942c                 | .loop
3942c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39430     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39434     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
39438     F0 FF 9F 3D |         if_nc   jmp     #.loop
3943c     2D 00 64 FD |                 ret
39440                 | 
39440                 | hub_port_handler
39440     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39444     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39448     27 EF 03 F6 |                 mov     pb, urx_buff_p
3944c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39450     55 02 A0 FD |                 call    #control_read
39454     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39458                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39458                 | 
39458     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3945c     50 01 90 5D |         if_x0   jmp     #.other
39460     68 02 D0 FE |                 loc     ptra, #clr_port_feat
39464     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
39468     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3946c     A0 02 A0 FD |                 call    #control_write
39470     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
39474     7C 01 90 5D |         if_x0   jmp     #.disconnect
39478     B0 99 02 F6 |                 mov     hctwait, _100ms_
3947c     EF 02 A0 FD |                 call    #poll_waitx
39480                 | 
39480     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
39484     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
39488     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3948c     A0 02 A0 FD |                 call    #control_write
39490                 | 
39490     02 76 07 F6 |                 mov     htmp3, #2
39494                 | .wait_reset
39494     AC 99 02 F6 |                 mov     hctwait, _8ms_
39498     EF 02 A0 FD |                 call    #poll_waitx
3949c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
394a0     27 EF 03 F6 |                 mov     pb, urx_buff_p
394a4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394a8     55 02 A0 FD |                 call    #control_read
394ac     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
394b0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
394b4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
394b8                 | 
394b8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
394bc     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
394c0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394c4     A0 02 A0 FD |                 call    #control_write
394c8                 | 
394c8     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
394cc                 | .wait_recover
394cc     A7 99 02 F6 |                 mov     hctwait, _1ms_
394d0     EF 02 A0 FD |                 call    #poll_waitx
394d4     FD 71 6F FB |                 djnz    htmp,#.wait_recover
394d8                 | 
394d8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
394dc     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
394e0     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
394e4                 | 
394e4     00 08 00 FF 
394e8     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
394ec     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
394f0     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
394f4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
394f8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
394fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39500     48 01 90 5D |         if_nz   jmp     #.done
39504                 | .get_dev_desc
39504     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39508     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3950c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39510     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39514     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
39518     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3951c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39520     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39524     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39528     AC 99 02 F6 |                 mov     hctwait, _8ms_
3952c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39530     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39534     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
39538     BE 00 A0 FD |                 call    #calc_crc5
3953c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39540     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39544     F7 AD C2 FA |                 rdbyte  total_data, pb
39548     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3954c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39550     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39554     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39558     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3955c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
39560                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
39560     9F 99 02 F6 |                 mov     hctwait, _500us_
39564     EF 02 A0 FD |                 call    #poll_waitx
39568     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3956c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
39570     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39574     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
39578     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3957c     CC 00 90 5D |         if_nz   jmp     #.done
39580     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
39584     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
39588     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3958c     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39590     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39594     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
39598     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3959c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
395a0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
395a4     A4 00 90 CD |         if_b    jmp     #.done
395a8     6C F0 BF FD |                 call    #hparse_con_desc
395ac     9C 00 90 FD |                 jmp     #.done
395b0                 | 
395b0                 | .other
395b0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
395b4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
395b8     28 00 90 AD |         if_x1   jmp     #.reset_feature
395bc     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
395c0     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
395c4     1C 00 90 AD |         if_x1   jmp     #.reset_feature
395c8     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
395cc     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
395d0     10 00 90 AD |         if_x1   jmp     #.reset_feature
395d4     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
395d8     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
395dc     04 00 90 AD |         if_x1   jmp     #.reset_feature
395e0     68 00 90 FD |                 jmp     #.done
395e4                 | .reset_feature
395e4     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
395e8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395ec     A0 02 A0 FD |                 call    #control_write
395f0     58 00 90 FD |                 jmp     #.done
395f4                 | .disconnect
395f4                 | 
395f4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
395f8     00 70 E3 F8 |                 getbyte htmp
395fc     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
39600     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
39604     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
39608     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3960c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39610     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39614                 |         if EMUPAD_MAX_PLAYER > 0
39614                 |         end
39614                 |         if HAVE_MOUSE
39614     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39618     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3961c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39620                 |         end
39620                 |         if HAVE_HIDPAD
39620     14 0A F0 FE |                 loc ptrb,#hidpad_report
39624     2D 71 03 F6 |                 mov htmp,hdev_port
39628     01 70 E7 F2 |                 cmpsub htmp,#1
3962c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39630     B8 F3 03 F1 |                 add ptrb,htmp
39634     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
39638     80 01 6C FC |                 wrlong #0,ptrb
3963c                 |         end
3963c                 | 
3963c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39640     00 00 C4 F8 |                 setbyte #0
39644     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39648     00 00 04 F6 |                 mov     0-0, #0
3964c                 | 
3964c                 | .done
3964c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39650     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39654     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39658     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3965c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39660     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39664                 | 
39664     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39668     27 EF 03 F6 |                 mov     pb, urx_buff_p
3966c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39670     55 02 A0 FD |                 call    #control_read
39674     00 69 06 FB |                 rdlong  hub_port_status, ptra
39678                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39678     2D 00 64 FD |                 ret
3967c                 | 
3967c                 | '------------------------------------------------------------------------------
3967c                 | ' Partially populated SETUP packets
3967c                 | '------------------------------------------------------------------------------
3967c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3967d     06          |                 byte    REQ_GET_DESC
3967e     00 01       |                 word    TYPE_DEVICE << 8
39680     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39682     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39684     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39685     06          |                 byte    REQ_GET_DESC
39686     00 02       |                 word    TYPE_CONFIG << 8
39688     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3968a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3968c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3968d     09          |                 byte    REQ_SET_CONFIG
3968e     00 00       |                 word    0       ' Configuration value
39690     00 00       |                 word    0       ' Zero
39692     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39694     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39695     05          |                 byte    REQ_SET_ADDR
39696     00 00       |                 word    0       ' Zero
39698     00 00       |                 word    0       ' Zero
3969a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3969c                 | '------------------------------------------------------------------------------
3969c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3969c                 | ' wValue field dictates which protocol should be used.
3969c                 | '
3969c                 | ' When initialized, all devices default to report protocol. However the host
3969c                 | ' should not make any assumptions about the device state and should set the
3969c                 | ' desired protocol whenever initializing a device.
3969c                 | '------------------------------------------------------------------------------
3969c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3969d     0B          |                 byte    HID_SET_PROTO
3969e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
396a0                 |                                                 ' (HID 1.11 Section 7.2.6).
396a0     00 00       |                 word    0               ' Interface index number.
396a2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
396a4                 | '------------------------------------------------------------------------------
396a4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
396a5     0A          |                 byte    HID_SET_IDLE
396a6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
396a8                 |                                         ' reporting until a change is detected in the report data
396a8                 | 
396a8                 |                                         ' (HID 1.11 Section 7.2.4).
396a8     00 00       |                 word    0       ' Interface index number.
396aa     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
396ac     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
396ad     09          |                 byte    HID_SET_REPORT
396ae     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
396b0                 |                                         ' (HID 1.11 Section 7.2.2).
396b0     00 00       |                 word    0       ' Interface index number.
396b2     00 00       |                 word    0       ' Size of the report, in bytes.
396b4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
396b5     06          |                 byte    REQ_GET_DESC
396b6     00 22       |                 word    TYPE_REPORT << 8
396b8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396ba     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396bc                 | '------------------------------------------------------------------------------
396bc     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
396bd     06          |                 byte    REQ_GET_DESC
396be     00 29       |                 word    TYPE_HUB << 8
396c0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396c2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396c4     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
396c5     03          |                 byte    REQ_SET_FEATURE
396c6     00 00       |                 word    0       ' port power
396c8     01 00       |                 word    1       ' Port index number (1+)
396ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396cc     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
396cd     01          |                 byte    REQ_CLEAR_FEATURE
396ce     00 00       |                 word    0       ' port power
396d0     01 00       |                 word    1       ' Port index number (1+)
396d2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396d4     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
396d5     00          |                 byte    REQ_GET_STATUS
396d6     00 00       |                 word    0
396d8     01 00       |                 word    1       ' Port index number (1+)
396da     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
396dc                 | '------------------------------------------------------------------------------
396dc                 | if _HAVE_GAMEPAD
396dc     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
396e0                 | ps3_command_buff
396e0     00 00 00 00 
396e4     00          |                 byte    $00, $00, $00, $00, $00
396e5     00 00 00 00 
396e9     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
396ea     FF 27 10 00 
396ee     32          |                 byte    $FF, $27, $10, $00, $32
396ef     FF 27 10 00 
396f3     32          |                 byte    $FF, $27, $10, $00, $32
396f4     FF 27 10 00 
396f8     32          |                 byte    $FF, $27, $10, $00, $32
396f9     FF 27 10 00 
396fd     32          |                 byte    $FF, $27, $10, $00, $32
396fe     00 00 00 00 
39702     00          |                 byte    $00, $00, $00, $00, $00
39703     00 00 00 00 
39707     00          |                 byte    $00, $00, $00, $00, $00
39708     00 00 00 00 
3970c     00          |                 byte    $00, $00, $00, $00, $00
3970d     00 00 00    |                 byte    $00, $00, $00
39710                 | '------------------------------------------------------------------------------
39710     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39713                 |                                         ' 0x01 All blinking
39713                 |                                         ' 0x02 1 flashes, then on
39713                 |                                         ' 0x03 2 flashes, then on
39713                 |                                         ' 0x04 3 flashes, then on
39713                 |                                         ' 0x05 4 flashes, then on
39713                 |                                         ' 0x06 1 on
39713                 |                                         ' 0x07 2 on
39713                 |                                         ' 0x08 3 on
39713                 |                                         ' 0x09 4 on
39713                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39713                 |                                         ' 0x0B Blinking*
39713                 |                                         ' 0x0C Slow blinking*
39713                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39713     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
39716     00          |                 byte    $00             ' Left rumble
39717     00          |                 byte    $00             ' Right rumble
39718     00 00 00    |                 byte    $00, $00, $00
3971b     00          | end
3971c                 | alignl
3971c                 | 
3971c                 | if HAVE_MOUSE
3971c     00 00 00 00 
39720     00 00 00 00 | mouse_limits long 0[2]
39724     00 00 00 00 | mouse_outptr long 0
39728                 | end
39728                 | 
39728                 | if KEYQUEUE_SIZE > 0
39728     00          | keyq_head byte 0
39729     00          | keyq_tail byte 0
3972a     00 00 00 00 
      ...             
39926     00 00 00 00 
3992a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3992c                 | alignl
3992c                 | end
3992c                 | 
3992c                 | if EMUPAD_MAX_PLAYER > 0
3992c                 | emupad_rule_buffer
3992c                 | if EMUPAD_BUILTIN_RULES
3992c                 | file "padmap_builtin.dat"
3992c                 | end
3992c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3992c                 | '' Default rule directly follows!
3992c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3992c                 | end
3992c                 | 
3992c                 | '------------------------------------------------------------------------------
3992c                 | ' The USB data cache area gets zero-filled at every device disconnect
3992c                 | '------------------------------------------------------------------------------
3992c                 | usb_cache_start
3992c                 | 
3992c                 | ' HID descriptor and report buffers
3992c                 | if !!OVERLAP_MEMORY
3992c     00 00 00 00 
      ...             
3a024     00 00 00 00 
3a028     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a02c                 | end
3a02c     00 00 00 00 
3a030     00 00 00 00 | hkbd_report     byte    0[8]
3a034     00 00 00 00 | hkbd_led_rep    byte    0
3a038                 | alignl
3a038                 | 
3a038                 | if HAVE_HIDPAD
3a038     00 00 00 00 
      ...             
3a0f4     00 00 00 00 
3a0f8     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a0fc                 | end
3a0fc                 | 
3a0fc                 | ' HUB descriptor
3a0fc     00          | hub_descr       byte    0   ' bDescLength
3a0fd     00          |                 byte    0   ' bDescriptorType
3a0fe     00          |                 byte    0   ' bNbrPorts
3a0ff     00 00       |                 word    0   ' wHubCharacteristics
3a101     00          |                 byte    0   ' bPwrOn2PwrGood
3a102     00          |                 byte    0   ' bHubContrCurrent
3a103     00          |                 byte    0   ' DeviceRemoveable
3a104     00          |                 byte    0   ' PortPwrCtrlMask
3a105                 | 
3a105                 | usb_cache_end
3a105                 | 
3a105                 | if HAVE_MOUSE
3a105     00 00 00 00 | mouse_xacc      long 0
3a109     00 00 00 00 | mouse_yacc      long 0
3a10d     00 00 00 00 | mouse_zacc      long 0
3a111     00          | mouse_bstate    byte 0
3a112     00          | mouse_lpending  byte 0
3a113     00          | mouse_rpending  byte 0
3a114     00          | mouse_mpending  byte 0
3a115     00          | mouse_lock      byte 0
3a116     00 00 00    |                 byte 0[3] ' padding
3a119                 | end
3a119                 | 
3a119     00 00 00 00 
      ...             
3a191     00 00 00 00 
3a195     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a199     00 00 00 00 
3a19d     00 00 00 00 
3a1a1     00 00 00 00 
3a1a5     00 00 00 00 
3a1a9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a1ab     00 00 00 00 
      ...             
3a2a3     00 00 00 00 
3a2a7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a2ab                 | 
3a2ab     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a2ac                 | 	alignl
3a2ac                 | _audio096_spin2_dat_
3a2ac                 | 
3a2ac                 | audio       org     0
3a2ac                 | 
3a2ac     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a2b0     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a2b4     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a2b8                 |  
3a2b8     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a2bc     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a2c0     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a2c4     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a2c8                 | 
3a2c8     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a2cc     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a2d0     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a2d4     0F 24 06 FC |             wrpin   dac2,#right
3a2d8     0F 00 1E FC |             wxpin   #256,#right    
3a2dc     41 9C 64 FD |             dirh    #left addpins 1
3a2e0     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a2e4     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a2e8     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a2ec                 |             
3a2ec                 | '---------------------------------------------------------------------------------        
3a2ec                 | '----------------- The main loop -------------------------------------------------
3a2ec                 | '---------------------------------------------------------------------------------
3a2ec                 | 
3a2ec     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a2f0     10 00 90 CD |       if_c  jmp     #loop1
3a2f4                 |   
3a2f4     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a2f8     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a2fc     D5 00 80 F1 |             sub     0-0,a40000000
3a300     FD 01 6E FB |             djnz    cn,#p402
3a304                 |     
3a304     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a308     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a30c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a310     01 00 06 C6 |     if_c    mov     cn,#1
3a314     DA 02 3A F3 |             fle     ct,time3 wcz
3a318     02 00 06 C6 |     if_c    mov     cn,#2     
3a31c     DB 02 3A F3 |             fle     ct,time4 wcz
3a320     03 00 06 C6 |     if_c    mov     cn,#3
3a324     DC 02 3A F3 |             fle     ct,time5 wcz
3a328     04 00 06 C6 |     if_c    mov     cn,#4
3a32c     DD 02 3A F3 |             fle     ct,time6 wcz
3a330     05 00 06 C6 |     if_c    mov     cn,#5
3a334     DE 02 3A F3 |             fle     ct,time7 wcz
3a338     06 00 06 C6 |     if_c    mov     cn,#6
3a33c     DF 02 3A F3 |             fle     ct,time8 wcz
3a340     07 00 06 C6 |     if_c    mov     cn,#7
3a344                 | 
3a344                 | 
3a344                 | '----------------------------------------------------------------------------------
3a344                 | '------------- Compute channel samples --------------------------------------------
3a344                 | '----------------------------------------------------------------------------------
3a344                 | 
3a344                 | 
3a344     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a348     06 C0 65 F0 |             shl     channeladd,#6
3a34c     E0 F0 03 F1 |             add     ptra,channeladd
3a350                 | 
3a350     28 16 64 FD |             setq    #11                        	' read parameters
3a354     00 D7 05 FB |             rdlong  pointer0,ptra
3a358                 |     	    
3a358     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a35c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a360     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a364     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a368     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a36c     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a370     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a374     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a378                 |             
3a378     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a37c     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a380     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a384                 | 
3a384     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a388     EC 08 3A F9 |             getword oldrs,sample0,#1
3a38c     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a390     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a394     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a398     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a39c                 | 
3a39c     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a3a0     00 04 02 F6 |             mov     dt0,0-0    
3a3a4     D7 04 82 F1 |             sub     dt0,time0
3a3a8                 |             
3a3a8     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a3ac     FB 00 00 F1 |             add     0-0,afreq0  	
3a3b0                 |             
3a3b0                 | '---- envelopes
3a3b0                 |             
3a3b0     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a3b4     20 00 00 AF 
3a3b8     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a3bc     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a3c0                 | 
3a3c0     FB 48 02 F6 |             mov     envs1,afreq0
3a3c4     F5 48 02 FA |             mul     envs1,envspd0
3a3c8     24 E7 01 F1 |             add     envph0,envs1 
3a3cc                 | 
3a3cc     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a3d0     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a3d4     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a3d8     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a3dc     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a3e0     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a3e4     00 46 06 36 |     if_ge   mov     envlo,#0
3a3e8     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a3ec     16 E6 65 30 |     if_ge   shl     envph0,#22
3a3f0                 | 
3a3f0     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a3f4     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a3f8     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a3fc     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a400     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a404     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a408     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a40c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a410     23 49 02 FA |             mul     envs1,envlo
3a414     25 49 02 F1 |             add     envs1,envs2
3a418     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a41c                 |             
3a41c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a420     1B C6 61 AD |     if_z    getrnd  spl
3a424     58 00 90 AD |     if_z    jmp     #p406
3a428                 |  
3a428     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a42c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a430     08 D6 45 F0 |             shr     pointer0,#8
3a434                 |          
3a434     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a438     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a43c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a440     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a444                 |         
3a444     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a448     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a44c     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a450                 |             
3a450     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a454     ED C4 01 F1 |             add     qq,sstart0            
3a458                 | 
3a458     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a45c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a460     1C 01 B0 1D |     if_gt   call    #cache_read
3a464                 |          
3a464     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a468     08 C6 65 50 |     if_nz   shl     spl,#8
3a46c     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a470     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a474     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a478     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a47c     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a480                 | 
3a480                 | 
3a480     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a484     00 C6 01 F6 |             mov     spl,0-0
3a488     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a48c     00 C6 01 F6 |             mov     spl,0-0
3a490                 | 
3a490     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a494     00 0A 02 F6 |             mov     ls0,0-0
3a498     20 00 00 FF 
3a49c     00 C4 05 F6 |             mov     qq,##16384
3a4a0     FE C4 81 F1 |             sub     qq,apan0
3a4a4     E2 C6 31 FA |             scas    spl,qq
3a4a8     00 0C 02 F6 |             mov     rs0, 0-0
3a4ac                 | 
3a4ac     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a4b0     06 11 02 F1 |             add     rs,rs0
3a4b4     03 0F 82 F1 |             sub     ls,oldls
3a4b8     05 0F 02 F1 |             add     ls,ls0
3a4bc                 |    
3a4bc     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a4c0     05 D9 21 F9 |             setword sample0,ls0,#0
3a4c4                 |             
3a4c4     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a4c8     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a4cc     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a4d0                 |   '  if_z    mov     sample0,#0
3a4d0     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a4d4     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a4d8     04 00 00 AF 
3a4dc     00 B0 05 A1 |     if_z    add     time1,##2048
3a4e0     D8 B2 01 A6 |     if_z    mov     time2,time1
3a4e4     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a4e8                 | 
3a4e8     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a4ec     00 D7 65 FC |             wrlong  pointer0,ptra
3a4f0     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a4f4     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a4f8                 |                       
3a4f8     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a4fc     FF C3 25 A7 |     if_z    decmod  front, #511          
3a500                 |          
3a500     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a504     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a508     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a50c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a510                 | 	    
3a510                 | 		    
3a510     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a514     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a518     04 15 02 F6 |             mov     newsample, oldrs       
3a51c                 | 
3a51c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a520     02 AF 01 F1 |             add     time0,dt0    
3a524                 |                                      
3a524     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a528     D8 FD 9F AD |     if_z    jmp     #loop1
3a52c     02 C5 01 F6 |             mov     qq,dt0
3a530                 | 
3a530                 |     
3a530                 |             
3a530     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a534     40 00 90 3D |     if_nc   jmp     #p399
3a538     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a53c     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a540     F4 FF 9F AD |     if_e    jmp     #p398   
3a544                 | 		
3a544     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a548     20 00 90 AD |     if_z    jmp     #p302	   
3a54c                 |   
3a54c     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a550     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a554     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a558     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a55c     60 1E 66 FC |             wrlong  scptr2,#$60
3a560     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a564     01 00 00 CF 
3a568     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a56c                 | 			    
3a56c     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a570     00 00 00 FF 
3a574     FF C3 05 F7 |             incmod  front, ##511
3a578     ED C5 6D FB | p399        djnz    qq,#p301
3a57c                 |             
3a57c     6C FD 9F FD |             jmp     #loop            'loop
3a580                 | 
3a580                 | '----------------------------------------------------------------------------------
3a580                 | '------------- This is the end of the main loop -----------------------------------
3a580                 | '----------------------------------------------------------------------------------
3a580                 | 
3a580                 | '----------------------------------------------------------------------------------
3a580                 | '------------- PSRAM cache ----------- --------------------------------------------
3a580                 | '----------------------------------------------------------------------------------
3a580                 | 
3a580                 | ' There are 8 cache pointers for 8 channels
3a580                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a580                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a580                 | 
3a580                 | 
3a580     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a584                 |             
3a584     E2 40 02 F6 | 	    mov     addrhi,qq		
3a588     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a58c     14 01 96 F9 | 	    alts    cn,#cache1            
3a590     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a594     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a598                 | 	
3a598     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a59c     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a5a0     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a5a4     08 38 66 F0 | 	    shl     cmd,#8
3a5a8     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a5ac     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a5b0     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a5b4     13 3B 02 F1 |             add     hubaddr,hubptr 
3a5b8     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a5bc     28 04 64 FD |             setq    #2                          ' write 3 longs
3a5c0     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a5c4     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a5c8     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a5cc                 |             
3a5cc                 | 	
3a5cc     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a5d0     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a5d4     13 C5 01 F1 | 	    add     qq,hubptr
3a5d8     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a5dc     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a5e0                 |           
3a5e0                 | 
3a5e0                 | '--------------------------------------------------------------------------
3a5e0                 | '------ Interrupt service -------------------------------------------------
3a5e0                 | '------ Output the sample, get the next one if exists ---------------------
3a5e0                 | '--------------------------------------------------------------------------
3a5e0                 | 
3a5e0     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a5e4     0F D0 25 FC |             wypin   rsample,#right       '4
3a5e8     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a5ec     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a5f0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a5f4     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a5f8     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a5fc                 |     
3a5fc     F5 FF 3B FB |             reti1                        '17/19 
3a600                 |           
3a600                 | '---------------------------------------------------------------------------
3a600                 | '-------- End of interrupt -------------------------------------------------
3a600                 | '---------------------------------------------------------------------------    
3a600                 | 
3a600                 | 
3a600                 | '---------------------------------------------------------------------------
3a600                 | '------- Variables ---------------------------------------------------------
3a600                 | '---------------------------------------------------------------------------
3a600                 | 
3a600                 | ' constants
3a600                 | 
3a600     00 00 00 40 | a40000000   long $40000000
3a604     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a608                 | 
3a608                 | ' Time variables
3a608                 | 
3a608     00 00 00 00 | time0       long 0    ' Global sample computing time
3a60c     01 00 00 00 | time1       long 1    ' Local channels time
3a610     02 00 00 00 | time2       long 2
3a614     03 00 00 00 | time3       long 3
3a618     04 00 00 00 | time4       long 4
3a61c     05 00 00 00 | time5       long 5
3a620     06 00 00 00 | time6       long 6
3a624     07 00 00 00 | time7       long 7
3a628     08 00 00 00 | time8       long 8
3a62c                 | 
3a62c     00 00 00 00 | channeladd long 0
3a630                 | 
3a630     00 00 00 00 | front       long 0
3a634                 | 
3a634                 | ' temporary variables 
3a634     00 00 00 00 | qq          long 0
3a638     00 00 00 00 | spl         long 0
3a63c     00 00 00 00 | zero        long 0
3a640     00 00 00 00 | mailbox     long 0
3a644     00 00 00 00 | mailbox2 long 0
3a648                 | 
3a648                 | ' Interrupt ISR variables
3a648                 | 
3a648     00 00 00 00 | lsample     long 0
3a64c     00 00 00 00 | rsample     long 0
3a650     00 00 00 00 | lsnext      long 0
3a654     00 00 00 00 | rsnext      long 0 
3a658                 | 
3a658                 | ' channel parameter block
3a658                 | 
3a658     00 00 00 00 | pointer0    long 0     
3a65c     00 00 00 00 | sample0     long 0
3a660     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a664     00 00 00 00 | lstart0     long 0
3a668     00 00 00 00 | lend0       long 0
3a66c     00 00 00 00 | volpan0     long 0
3a670     00 00 00 00 | freqskip0   long 0
3a674     00 00 00 00 | command0    long 0
3a678     00 00 00 00 | envph0	    long 0
3a67c     00 00 00 00 | envptr0	    long 0
3a680     00 00 00 00 | envspd0	    long 0
3a684     00 00 00 00 | envlen0	    long 0
3a688     00 00 00 00 | res5	    long 0
3a68c     00 00 00 00 | res6	    long 0
3a690     00 00 00 00 | res7	    long 0
3a694     00 00 00 00 | res8	    long 0
3a698                 | 
3a698     00 00 00 00 | afreq0      long 0
3a69c     00 00 00 00 | askip0      long 0
3a6a0     00 00 00 00 | avol0       long 0
3a6a4     00 00 00 00 | apan0       long 0
3a6a8                 | 
3a6a8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a6ac     00 00 00 00 | cn          long 0
3a6b0     00 00 00 00 | ct          long 0
3a6b4     00 00 00 00 | dt0         long 0
3a6b8                 | 
3a6b8                 | ' Samples
3a6b8     00 00 00 00 | oldls       long 0
3a6bc     00 00 00 00 | oldrs       long 0
3a6c0                 | 
3a6c0     00 00 00 00 | ls0         long 0
3a6c4     00 00 00 00 | rs0         long 0
3a6c8                 | 
3a6c8     00 00 00 00 | ls          long 0    
3a6cc     00 00 00 00 | rs          long 0
3a6d0                 | 
3a6d0     00 00 00 00 | oldsample   long 0
3a6d4     00 00 00 00 | newsample   long 0
3a6d8                 | 
3a6d8     00 00 00 00 | nrsample    long 0
3a6dc     00 00 00 00 | nlsample    long 0
3a6e0                 | 
3a6e0     00 00 00 00 | scbase long 0
3a6e4     00 00 00 00 | scptr long 0
3a6e8     00 00 00 00 | scptr2 long 0
3a6ec     00 00 00 00 | scope long 0
3a6f0                 | 
3a6f0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a6f4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a6f8                 | 
3a6f8     00 18 07 00 | hubptr      long $71800
3a6fc     00 00 00 00 | cache1      long 0
3a700     00 00 00 00 | cache2      long 0
3a704     00 00 00 00 | cache3      long 0
3a708     00 00 00 00 | cache4      long 0
3a70c     00 00 00 00 | cache5      long 0
3a710     00 00 00 00 | cache6      long 0
3a714     00 00 00 00 | cache7      long 0
3a718     00 00 00 00 | cache8      long 0
3a71c                 | 
3a71c                 | 
3a71c     00 00 00 00 | cmd         long 0
3a720     00 00 00 00 | hubaddr     long 0
3a724     00 01 00 00 | count       long 256
3a728     00 00 00 00 | addrlo long 0
3a72c     00 00 00 00 | addrhi long 0
3a730     00 00 00 00 | pointer00 long 0
3a734     00 00 00 00 | envhi long 0
3a738     00 00 00 00 | envlo long 0
3a73c     00 00 00 00 | envs1 long 0
3a740     00 00 00 00 | envs2 long 0
3a744     00 00 00 00 | noise0 long 0
3a748     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a74c     00 00 00 00 
3a750     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a754                 | 	alignl
3a754                 | __system__dat_
3a754     00 00 00 00 
3a758     00 00 00 00 | 	byte	$00[8]
3a75c     03 00 00 00 
3a760     00 00 00 00 
3a764     00 00 00 00 
3a768     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a76c     00 00 00 00 
      ...             
3a9f8     00 00 00 00 
3a9fc     00 00 00 00 | 	byte	$00[660]
3aa00     00 00 50 09 | 	long	(149 {__system____root_opendir})<<20
3aa04     00 00 60 09 | 	long	(150 {__system____root_closedir})<<20
3aa08     00 00 70 09 | 	long	(151 {__system____root_readdir})<<20
3aa0c     00 00 80 09 | 	long	(152 {__system____root_stat})<<20
3aa10     00 00 00 00 
3aa14     00 00 00 00 
3aa18     00 00 00 00 
3aa1c     00 00 00 00 
3aa20     00 00 00 00 
3aa24     00 00 00 00 
3aa28     00 00 00 00 | 	byte	$00[28]
3aa2c     94 AA 03 00 | 	long	@@@__system__dat_ + 832
3aa30     97 AA 03 00 | 	long	@@@__system__dat_ + 835
3aa34     B8 AA 03 00 | 	long	@@@__system__dat_ + 868
3aa38     D1 AA 03 00 | 	long	@@@__system__dat_ + 893
3aa3c     EC AA 03 00 | 	long	@@@__system__dat_ + 920
3aa40     06 AB 03 00 | 	long	@@@__system__dat_ + 946
3aa44     16 AB 03 00 | 	long	@@@__system__dat_ + 962
3aa48     28 AB 03 00 | 	long	@@@__system__dat_ + 980
3aa4c     3A AB 03 00 | 	long	@@@__system__dat_ + 998
3aa50     4C AB 03 00 | 	long	@@@__system__dat_ + 1016
3aa54     58 AB 03 00 | 	long	@@@__system__dat_ + 1028
3aa58     69 AB 03 00 | 	long	@@@__system__dat_ + 1045
3aa5c     7D AB 03 00 | 	long	@@@__system__dat_ + 1065
3aa60     87 AB 03 00 | 	long	@@@__system__dat_ + 1075
3aa64     97 AB 03 00 | 	long	@@@__system__dat_ + 1091
3aa68     A6 AB 03 00 | 	long	@@@__system__dat_ + 1106
3aa6c     BC AB 03 00 | 	long	@@@__system__dat_ + 1128
3aa70     D5 AB 03 00 | 	long	@@@__system__dat_ + 1153
3aa74     E9 AB 03 00 | 	long	@@@__system__dat_ + 1173
3aa78     F7 AB 03 00 | 	long	@@@__system__dat_ + 1187
3aa7c     0B AC 03 00 | 	long	@@@__system__dat_ + 1207
3aa80     17 AC 03 00 | 	long	@@@__system__dat_ + 1219
3aa84     29 AC 03 00 | 	long	@@@__system__dat_ + 1237
3aa88     41 AC 03 00 | 	long	@@@__system__dat_ + 1261
3aa8c     53 AC 03 00 | 	long	@@@__system__dat_ + 1279
3aa90     66 AC 03 00 | 	long	@@@__system__dat_ + 1298
3aa94     4F 4B 00 4E 
3aa98     75 6D 65 72 
3aa9c     69 63 61 6C 
3aaa0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3aaa4     75 6D 65 6E 
3aaa8     74 20 6F 75 
3aaac     74 20 6F 66 
3aab0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3aab4     61 69 6E 00 
3aab8     52 65 73 75 
3aabc     6C 74 20 6E 
3aac0     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3aac4     65 70 72 65 
3aac8     73 65 6E 74 
3aacc     61 62 6C 65 
3aad0     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3aad4     65 67 61 6C 
3aad8     20 6D 75 6C 
3aadc     74 69 62 79 
3aae0     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3aae4     65 71 75 65 
3aae8     6E 63 65 00 
3aaec     4E 6F 20 73 
3aaf0     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3aaf4     66 69 6C 65 
3aaf8     20 6F 72 20 
3aafc     64 69 72 65 
3ab00     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ab04     79 00 42 61 
3ab08     64 20 66 69 
3ab0c     6C 65 20 6E 
3ab10     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ab14     72 00 50 65 
3ab18     72 6D 69 73 
3ab1c     73 69 6F 6E 
3ab20     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ab24     69 65 64 00 
3ab28     4E 6F 74 20 
3ab2c     65 6E 6F 75 
3ab30     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ab34     65 6D 6F 72 
3ab38     79 00 54 65 
3ab3c     6D 70 6F 72 
3ab40     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ab44     66 61 69 6C 
3ab48     75 72 65 00 
3ab4c     46 69 6C 65 
3ab50     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ab54     73 74 73 00 
3ab58     49 6E 76 61 
3ab5c     6C 69 64 20 
3ab60     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ab64     6D 65 6E 74 
3ab68     00 54 6F 6F 
3ab6c     20 6D 61 6E 
3ab70     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ab74     65 6E 20 66 
3ab78     69 6C 65 73 
3ab7c     00 49 2F 4F 
3ab80     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ab84     6F 72 00 4E 
3ab88     6F 74 20 61 
3ab8c     20 64 69 72 
3ab90     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ab94     72 79 00 49 
3ab98     73 20 61 20 
3ab9c     64 69 72 65 
3aba0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3aba4     79 00 52 65 
3aba8     61 64 20 6F 
3abac     6E 6C 79 20 
3abb0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3abb4     20 73 79 73 
3abb8     74 65 6D 00 
3abbc     46 75 6E 63 
3abc0     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3abc4     20 6E 6F 74 
3abc8     20 69 6D 70 
3abcc     6C 65 6D 65 
3abd0     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3abd4     00 44 69 72 
3abd8     65 63 74 6F 
3abdc     72 79 20 6E 
3abe0     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3abe4     6D 70 74 79 
3abe8     00 4E 61 6D 
3abec     65 20 74 6F 
3abf0     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3abf4     6E 67 00 44 
3abf8     65 76 69 63 
3abfc     65 20 6E 6F 
3ac00     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ac04     65 6B 61 62 
3ac08     6C 65 00 42 
3ac0c     61 64 20 61 
3ac10     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ac14     73 73 00 42 
3ac18     72 6F 6B 65 
3ac1c     6E 20 63 6F 
3ac20     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ac24     74 69 6F 6E 
3ac28     00 44 65 76 
3ac2c     69 63 65 20 
3ac30     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ac34     65 73 6F 75 
3ac38     72 63 65 20 
3ac3c     62 75 73 79 
3ac40     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ac44     73 73 20 64 
3ac48     65 76 69 63 
3ac4c     65 20 6C 69 
3ac50     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ac54     6F 20 73 70 
3ac58     61 63 65 20 
3ac5c     6F 6E 20 64 
3ac60     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ac64     65 00 55 6E 
3ac68     6B 6E 6F 77 
3ac6c     6E 20 65 72 
3ac70     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ac74     00 00 00 00 
3ac78     00 00 00 00 | 	byte	$00[8]
3ac7c     05 00 00 00 
3ac80     00 00 00 00 
3ac84     00 00 00 00 
3ac88     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac8c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ac90     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3ac94     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3ac98     00 00 00 00 | 	byte	$00, $00, $00, $00
3ac9c     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0697})<<20
3aca0     00 00 00 0B | 	long	(176 {__system____dummy_flush_0698})<<20
3aca4     00 00 00 00 
3aca8     00 00 00 00 | 	byte	$00[8]
3acac     01 00 00 00 
3acb0     06 00 00 00 
3acb4     00 00 00 00 
3acb8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acbc     00 00 00 00 
3acc0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3acc4     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3acc8     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3accc     00 00 00 00 | 	byte	$00, $00, $00, $00
3acd0     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0697})<<20
3acd4     00 00 00 0B | 	long	(176 {__system____dummy_flush_0698})<<20
3acd8     00 00 00 00 
3acdc     00 00 00 00 | 	byte	$00[8]
3ace0     01 00 00 00 
3ace4     06 00 00 00 
3ace8     00 00 00 00 
3acec     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acf0     00 00 00 00 
3acf4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3acf8     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3acfc     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3ad00     00 00 00 00 | 	byte	$00, $00, $00, $00
3ad04     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0697})<<20
3ad08     00 00 00 0B | 	long	(176 {__system____dummy_flush_0698})<<20
3ad0c     00 00 00 00 
      ...             
3ae7c     00 00 00 00 
3ae80     00 00 00 00 | 	byte	$00[376]
3ae84     88 AE 03 00 | 	long	@@@__system__dat_ + 1844
3ae88     00 00 00 00 
3ae8c     00 00 00 00 
3ae90     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae94                 | 	alignl
3ae94                 | _fatfs_cc_dat_
3ae94     C7 00 FC 00 
3ae98     E9 00 E2 00 
3ae9c     E4 00 E0 00 
3aea0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3aea4     EA 00 EB 00 
3aea8     E8 00 EF 00 
3aeac     EE 00 EC 00 
3aeb0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3aeb4     C9 00 E6 00 
3aeb8     C6 00 F4 00 
3aebc     F6 00 F2 00 
3aec0     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3aec4     FF 00 D6 00 
3aec8     DC 00 F8 00 
3aecc     A3 00 D8 00 
3aed0     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3aed4     E1 00 ED 00 
3aed8     F3 00 FA 00 
3aedc     F1 00 D1 00 
3aee0     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3aee4     BF 00 AE 00 
3aee8     AC 00 BD 00 
3aeec     BC 00 A1 00 
3aef0     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3aef4     91 25 92 25 
3aef8     93 25 02 25 
3aefc     24 25 C1 00 
3af00     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3af04     A9 00 63 25 
3af08     51 25 57 25 
3af0c     5D 25 A2 00 
3af10     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3af14     14 25 34 25 
3af18     2C 25 1C 25 
3af1c     00 25 3C 25 
3af20     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3af24     5A 25 54 25 
3af28     69 25 66 25 
3af2c     60 25 50 25 
3af30     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3af34     F0 00 D0 00 
3af38     CA 00 CB 00 
3af3c     C8 00 31 01 
3af40     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3af44     CF 00 18 25 
3af48     0C 25 88 25 
3af4c     84 25 A6 00 
3af50     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3af54     D3 00 DF 00 
3af58     D4 00 D2 00 
3af5c     F5 00 D5 00 
3af60     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3af64     DE 00 DA 00 
3af68     DB 00 D9 00 
3af6c     FD 00 DD 00 
3af70     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3af74     AD 00 B1 00 
3af78     17 20 BE 00 
3af7c     B6 00 A7 00 
3af80     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3af84     B0 00 A8 00 
3af88     B7 00 B9 00 
3af8c     B3 00 B2 00 
3af90     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3af94     61 00 1A 03 
3af98     E0 00 17 03 
3af9c     F8 00 07 03 
3afa0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3afa4     78 01 00 01 
3afa8     30 01 32 01 
3afac     06 01 39 01 
3afb0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3afb4     2E 01 79 01 
3afb8     06 01 80 01 
3afbc     4D 00 43 02 
3afc0     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3afc4     82 01 84 01 
3afc8     84 01 86 01 
3afcc     87 01 87 01 
3afd0     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3afd4     8B 01 8B 01 
3afd8     8D 01 8E 01 
3afdc     8F 01 90 01 
3afe0     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3afe4     93 01 94 01 
3afe8     F6 01 96 01 
3afec     97 01 98 01 
3aff0     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3aff4     9B 01 9C 01 
3aff8     9D 01 20 02 
3affc     9F 01 A0 01 
3b000     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b004     A2 01 A4 01 
3b008     A4 01 A6 01 
3b00c     A7 01 A7 01 
3b010     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b014     AB 01 AC 01 
3b018     AC 01 AE 01 
3b01c     AF 01 AF 01 
3b020     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b024     B3 01 B3 01 
3b028     B5 01 B5 01 
3b02c     B7 01 B8 01 
3b030     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b034     BB 01 BC 01 
3b038     BC 01 BE 01 
3b03c     F7 01 C0 01 
3b040     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b044     C3 01 C4 01 
3b048     C5 01 C4 01 
3b04c     C7 01 C8 01 
3b050     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b054     CB 01 CA 01 
3b058     CD 01 10 01 
3b05c     DD 01 01 00 
3b060     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b064     12 01 F3 01 
3b068     03 00 F1 01 
3b06c     F4 01 F4 01 
3b070     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b074     22 02 12 01 
3b078     3A 02 09 00 
3b07c     65 2C 3B 02 
3b080     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b084     66 2C 3F 02 
3b088     40 02 41 02 
3b08c     41 02 46 02 
3b090     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b094     40 00 81 01 
3b098     86 01 55 02 
3b09c     89 01 8A 01 
3b0a0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b0a4     5A 02 90 01 
3b0a8     5C 02 5D 02 
3b0ac     5E 02 5F 02 
3b0b0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b0b4     62 02 94 01 
3b0b8     64 02 65 02 
3b0bc     66 02 67 02 
3b0c0     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b0c4     6A 02 62 2C 
3b0c8     6C 02 6D 02 
3b0cc     6E 02 9C 01 
3b0d0     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b0d4     9D 01 73 02 
3b0d8     74 02 9F 01 
3b0dc     76 02 77 02 
3b0e0     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b0e4     7A 02 7B 02 
3b0e8     7C 02 64 2C 
3b0ec     7E 02 7F 02 
3b0f0     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b0f4     82 02 A9 01 
3b0f8     84 02 85 02 
3b0fc     86 02 87 02 
3b100     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b104     B1 01 B2 01 
3b108     45 02 8D 02 
3b10c     8E 02 8F 02 
3b110     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b114     B7 01 7B 03 
3b118     03 00 FD 03 
3b11c     FE 03 FF 03 
3b120     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b124     86 03 88 03 
3b128     89 03 8A 03 
3b12c     B1 03 11 03 
3b130     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b134     A3 03 A3 03 
3b138     C4 03 08 03 
3b13c     CC 03 03 00 
3b140     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b144     8F 03 D8 03 
3b148     18 01 F2 03 
3b14c     0A 00 F9 03 
3b150     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b154     F5 03 F6 03 
3b158     F7 03 F7 03 
3b15c     F9 03 FA 03 
3b160     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b164     20 03 50 04 
3b168     10 07 60 04 
3b16c     22 01 8A 04 
3b170     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b174     0E 01 CF 04 
3b178     01 00 C0 04 
3b17c     D0 04 44 01 
3b180     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b184     00 00 7D 1D 
3b188     01 00 63 2C 
3b18c     00 1E 96 01 
3b190     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b194     00 1F 08 06 
3b198     10 1F 06 06 
3b19c     20 1F 08 06 
3b1a0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b1a4     40 1F 06 06 
3b1a8     51 1F 07 00 
3b1ac     59 1F 52 1F 
3b1b0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b1b4     5D 1F 56 1F 
3b1b8     5F 1F 60 1F 
3b1bc     08 06 70 1F 
3b1c0     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b1c4     BB 1F C8 1F 
3b1c8     C9 1F CA 1F 
3b1cc     CB 1F DA 1F 
3b1d0     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b1d4     F9 1F EA 1F 
3b1d8     EB 1F FA 1F 
3b1dc     FB 1F 80 1F 
3b1e0     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b1e4     08 06 A0 1F 
3b1e8     08 06 B0 1F 
3b1ec     04 00 B8 1F 
3b1f0     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b1f4     BC 1F CC 1F 
3b1f8     01 00 C3 1F 
3b1fc     D0 1F 02 06 
3b200     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b204     E5 1F 01 00 
3b208     EC 1F F3 1F 
3b20c     01 00 FC 1F 
3b210     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b214     32 21 70 21 
3b218     10 02 84 21 
3b21c     01 00 83 21 
3b220     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b224     30 2C 2F 04 
3b228     60 2C 02 01 
3b22c     67 2C 06 01 
3b230     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b234     80 2C 64 01 
3b238     00 2D 26 08 
3b23c     41 FF 1A 03 
3b240     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b244     05 07 09 0E 
3b248     10 12 14 16 
3b24c     18 1C 1E 43 
3b250     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b254     41 41 43 45 
3b258     45 45 49 49 
3b25c     49 41 41 45 
3b260     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b264     4F 55 55 59 
3b268     4F 55 4F 9C 
3b26c     4F 9E 9F 41 
3b270     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b274     A5 A6 A7 A8 
3b278     A9 AA AB AC 
3b27c     AD AE AF B0 
3b280     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b284     41 41 41 B8 
3b288     B9 BA BB BC 
3b28c     BD BE BF C0 
3b290     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b294     C5 41 41 C8 
3b298     C9 CA CB CC 
3b29c     CD CE CF D1 
3b2a0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b2a4     49 49 49 49 
3b2a8     D9 DA DB DC 
3b2ac     DD 49 DF 4F 
3b2b0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b2b4     4F E6 E8 E8 
3b2b8     55 55 55 59 
3b2bc     59 EE EF F0 
3b2c0     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b2c4     F5 F6 F7 F8 
3b2c8     F9 FA FB FC 
3b2cc     FD FE FF 00 
3b2d0     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b2d4     00 00 00 00 | 	byte	$00, $00, $00, $00
3b2d8     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_close})<<20
3b2dc     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_read})<<20
3b2e0     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_write})<<20
3b2e4     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_lseek})<<20
3b2e8     00 00 00 0A | 	long	(160 {_fatfs_cc_v_ioctl})<<20
3b2ec     00 00 10 0B | 	long	(177 {_fatfs_cc_v_flush})<<20
3b2f0     00 00 00 00 
3b2f4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b2f8     00 00 10 0A | 	long	(161 {_fatfs_cc_v_open})<<20
3b2fc     00 00 20 0A | 	long	(162 {_fatfs_cc_v_creat})<<20
3b300     00 00 30 0A | 	long	(163 {_fatfs_cc_v_opendir})<<20
3b304     00 00 40 0A | 	long	(164 {_fatfs_cc_v_closedir})<<20
3b308     00 00 50 0A | 	long	(165 {_fatfs_cc_v_readdir})<<20
3b30c     00 00 60 0A | 	long	(166 {_fatfs_cc_v_stat})<<20
3b310     00 00 70 0A | 	long	(167 {_fatfs_cc_v_mkdir})<<20
3b314     00 00 80 0A | 	long	(168 {_fatfs_cc_v_rmdir})<<20
3b318     00 00 90 0A | 	long	(169 {_fatfs_cc_v_remove})<<20
3b31c     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_rename})<<20
3b320     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_init})<<20
3b324     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_deinit})<<20
3b328     FF FF FF FF 
3b32c     1F 00 00 00 
3b330     1C 00 00 00 
3b334     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b338     1E 00 00 00 
3b33c     1F 00 00 00 
3b340     1E 00 00 00 
3b344     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b348     1F 00 00 00 
3b34c     1E 00 00 00 
3b350     1F 00 00 00 
3b354     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b358     1F 00 00 00 
3b35c     00 00 00 00 
3b360     1F 00 00 00 
3b364     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b368     5A 00 00 00 
3b36c     78 00 00 00 
3b370     97 00 00 00 
3b374     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b378     D4 00 00 00 
3b37c     F3 00 00 00 
3b380     11 01 00 00 
3b384     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b388     4E 01 00 00 
3b38c     6D 01 00 00 
3b390     FF FF FF FF 
3b394     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b398     00 00 00 00 
      ...             
3b3b0     00 00 00 00 
3b3b4     00 00 00 00 | 	byte	$00[32]
3b3b8     D6 B3 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b3bc     DA B3 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b3c0     00 00 00 00 
3b3c4     00 00 00 00 
3b3c8     00 00 00 00 
3b3cc     00 00 00 00 
3b3d0     00 00       | 	byte	$00[18]
3b3d2     3F 3F 3F 00 
3b3d6     55 43 54 00 
3b3da     55 43 54 00 
3b3de     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b3e2     00 00 00 00 
3b3e6     00 00 00    | 	byte	$00[7]
3b3e9     CA 9A 3B 00 
3b3ed     00 00 00 01 
3b3f1     01 01 01 01 
3b3f5     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b3f9     91 11 11 11 
3b3fd     11 01 01 01 
3b401     01 01 01 01 
3b405     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b409     01 01 01 01 
3b40d     01 01 01    | 	byte	$01[7]
3b410     90 20 20 20 
3b414     20 20 20 20 
3b418     20 20 20 20 
3b41c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b420     42 42 42 42 
3b424     42 42 42 42 
3b428     42 42       | 	byte	$42[10]
3b42a     20 20 20 20 
3b42e     20 20 20    | 	byte	$20[7]
3b431     44 44 44 44 
3b435     44 44       | 	byte	$44[6]
3b437     04 04 04 04 
3b43b     04 04 04 04 
3b43f     04 04 04 04 
3b443     04 04 04 04 
3b447     04 04 04 04 | 	byte	$04[20]
3b44b     20 20 20 20 
3b44f     20 20       | 	byte	$20[6]
3b451     48 48 48 48 
3b455     48 48       | 	byte	$48[6]
3b457     08 08 08 08 
3b45b     08 08 08 08 
3b45f     08 08 08 08 
3b463     08 08 08 08 
3b467     08 08 08 08 | 	byte	$08[20]
3b46b     20 20 20 20 
3b46f     01 00 00 00 
3b473     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b474                 | __methodtable__
3b474     DC 28 01 00 | 	long	@_do_no_command
3b478     10 88 01 00 | 	long	@_do_plus
3b47c     0C 7D 01 00 | 	long	@_do_minus
3b480     F8 86 01 00 | 	long	@_do_or
3b484     8C 83 01 00 | 	long	@_do_mul
3b488     44 7B 01 00 | 	long	@_do_fdiv
3b48c     0C 78 01 00 | 	long	@_do_and
3b490     24 79 01 00 | 	long	@_do_div
3b494     6C 81 01 00 | 	long	@_do_mod
3b498     FC 8C 01 00 | 	long	@_do_shl
3b49c     14 8E 01 00 | 	long	@_do_shr
3b4a0     2C 8F 01 00 | 	long	@_do_power
3b4a4     64 6E 01 00 | 	long	@_do_getvar
3b4a8     3C 42 01 00 | 	long	@_do_push
3b4ac     64 68 01 00 | 	long	@_do_assign
3b4b0     58 D4 00 00 | 	long	@_do_cls
3b4b4     F8 22 01 00 | 	long	@_do_new
3b4b8     E4 3B 01 00 | 	long	@_do_plot
3b4bc     A0 F3 00 00 | 	long	@_do_draw
3b4c0     EC 3C 01 00 | 	long	@_do_print
3b4c4     38 D2 00 00 | 	long	@_do_circle
3b4c8     D4 F5 00 00 | 	long	@_do_fcircle
3b4cc     E4 C6 00 00 | 	long	@_do_box
3b4d0     3C FA 00 00 | 	long	@_do_frame
3b4d4     98 D4 00 00 | 	long	@_do_color
3b4d8     CC F7 00 00 | 	long	@_do_for
3b4dc     18 25 01 00 | 	long	@_do_next
3b4e0     A4 13 01 00 | 	long	@_do_list
3b4e4     84 4E 01 00 | 	long	@_do_run
3b4e8     FC F4 00 00 | 	long	@_do_error
3b4ec     4C 06 01 00 | 	long	@_do_fast_goto
3b4f0     3C 07 01 00 | 	long	@_do_find_goto
3b4f4     4C 09 01 00 | 	long	@_do_slow_goto
3b4f8     E8 28 01 00 | 	long	@_do_nothing
3b4fc     08 BC 00 00 | 	long	@_test_csave
3b500     38 52 01 00 | 	long	@_do_save
3b504     40 16 01 00 | 	long	@_do_load
3b508     20 2F 01 00 | 	long	@_do_pinwrite
3b50c     A4 65 01 00 | 	long	@_do_waitms
3b510     D8 66 01 00 | 	long	@_do_waitvbl
3b514     3C 0C 01 00 | 	long	@_do_if
3b518     94 F4 00 00 | 	long	@_do_else
3b51c     F4 90 01 00 | 	long	@_do_eq
3b520     6C 9F 01 00 | 	long	@_do_ge
3b524     44 A4 01 00 | 	long	@_do_le
3b528     CC 95 01 00 | 	long	@_do_gt
3b52c     A4 9A 01 00 | 	long	@_do_lt
3b530     1C A9 01 00 | 	long	@_do_ne
3b534     F4 4B 01 00 | 	long	@_do_rnd
3b538     CC C8 00 00 | 	long	@_do_brun
3b53c     70 C4 00 00 | 	long	@_do_beep
3b540     A8 ED 00 00 | 	long	@_do_dir
3b544     04 2C 01 00 | 	long	@_do_paper
3b548     F4 AD 01 00 | 	long	@_do_ink
3b54c     90 AE 01 00 | 	long	@_do_font
3b550     08 1E 01 00 | 	long	@_do_mode
3b554     B4 21 01 00 | 	long	@_do_mouse
3b558     CC 04 01 00 | 	long	@_do_gettime
3b55c     F0 D5 00 00 | 	long	@_do_cursor
3b560     B0 D3 00 00 | 	long	@_do_click
3b564     70 22 01 00 | 	long	@_do_mousex
3b568     B4 22 01 00 | 	long	@_do_mousey
3b56c     E8 21 01 00 | 	long	@_do_mousek
3b570     2C 22 01 00 | 	long	@_do_mousew
3b574     80 5B 01 00 | 	long	@_do_sin
3b578     68 5E 01 00 | 	long	@_do_stick
3b57c     EC 5F 01 00 | 	long	@_do_strig
3b580     8C 5C 01 00 | 	long	@_do_sprite
3b584     0C EA 00 00 | 	long	@_do_defsprite
3b588     7C 03 01 00 | 	long	@_do_getpixel
3b58c     80 65 01 00 | 	long	@_do_waitclock
3b590     BC 80 01 00 | 	long	@_do_negative
3b594     C0 48 01 00 | 	long	@_do_rdpin
3b598     10 4E 01 00 | 	long	@_do_rqpin
3b59c     4C 2D 01 00 | 	long	@_do_pinread
3b5a0     E4 66 01 00 | 	long	@_do_wrpin
3b5a4     64 67 01 00 | 	long	@_do_wxpin
3b5a8     E4 67 01 00 | 	long	@_do_wypin
3b5ac     8C 2C 01 00 | 	long	@_do_pinfloat
3b5b0     0C 2D 01 00 | 	long	@_do_pinlo
3b5b4     CC 2C 01 00 | 	long	@_do_pinhi
3b5b8     D0 2D 01 00 | 	long	@_do_pinstart
3b5bc     E0 2E 01 00 | 	long	@_do_pintoggle
3b5c0     0C AF 01 00 | 	long	@_do_position
3b5c4     D0 D4 00 00 | 	long	@_do_cos
3b5c8     70 61 01 00 | 	long	@_do_tan
3b5cc     5C C3 00 00 | 	long	@_do_atn
3b5d0     50 C2 00 00 | 	long	@_do_asin
3b5d4     EC BF 00 00 | 	long	@_do_acos
3b5d8     78 5D 01 00 | 	long	@_do_sqr
3b5dc     B8 F6 00 00 | 	long	@_do_fill
3b5e0     20 E1 00 00 | 	long	@_do_defsnd
3b5e4     24 D6 00 00 | 	long	@_do_defenv
3b5e8     98 48 01 00 | 	long	@_do_rad
3b5ec     80 ED 00 00 | 	long	@_do_deg
3b5f0     F8 0F 01 00 | 	long	@_do_int
3b5f4     A8 2F 01 00 | 	long	@_do_play
3b5f8     D8 55 01 00 | 	long	@_do_setdelay
3b5fc     80 56 01 00 | 	long	@_do_setenv
3b600     28 57 01 00 | 	long	@_do_setlen
3b604     D0 57 01 00 | 	long	@_do_setpan
3b608     20 59 01 00 | 	long	@_do_setvol
3b60c     C8 59 01 00 | 	long	@_do_setwave
3b610     78 58 01 00 | 	long	@_do_setsustain
3b614     2C 49 01 00 | 	long	@_do_release
3b618     6C 01 01 00 | 	long	@_do_getenvsustain
3b61c     94 AF 01 00 | 	long	@_do_poke
3b620     6C B0 01 00 | 	long	@_do_dpoke
3b624     44 B1 01 00 | 	long	@_do_lpoke
3b628     1C B2 01 00 | 	long	@_do_peek
3b62c     CC B2 01 00 | 	long	@_do_dpeek
3b630     78 B3 01 00 | 	long	@_do_lpeek
3b634     64 FB 00 00 | 	long	@_do_fre
3b638     78 02 01 00 | 	long	@_do_getnotevalue
3b63c     1C 74 01 00 | 	long	@_do_getaddr
3b640     20 0D 01 00 | 	long	@_do_inkey
3b644     6C BF 00 00 | 	long	@_do_abs
3b648     DC 0A 01 00 | 	long	@_do_hex
3b64c     84 C5 00 00 | 	long	@_do_bin
3b650     7C 62 01 00 | 	long	@_do_val
3b654     3C D1 00 00 | 	long	@_do_chr
3b658     F8 C0 00 00 | 	long	@_do_asc
3b65c     B4 10 01 00 | 	long	@_do_left
3b660     70 4A 01 00 | 	long	@_do_right
3b664     44 1C 01 00 | 	long	@_do_mid
3b668     38 12 01 00 | 	long	@_do_len
3b66c     34 05 01 00 | 	long	@_do_gosub
3b670     C4 49 01 00 | 	long	@_do_return
3b674     B8 F4 00 00 | 	long	@_do_end
3b678     B4 3C 01 00 | 	long	@_do_pop
3b67c     CC 1A 01 00 | 	long	@_do_log
3b680     30 CF 00 00 | 	long	@_do_changevol
3b684     10 D0 00 00 | 	long	@_do_changewav
3b688     20 CE 00 00 | 	long	@_do_changepan
3b68c     04 CB 00 00 | 	long	@_do_changefreq
3b690     70 5A 01 00 | 	long	@_do_shutup
3b694     BC 4D 01 00 | 	long	@_do_round
3b698     EC F4 00 00 | 	long	@_do_enter
3b69c     EC 28 01 00 | 	long	@_do_open
3b6a0     DC D3 00 00 | 	long	@_do_close
3b6a4     C8 FB 00 00 | 	long	@_do_get
3b6a8     58 43 01 00 | 	long	@_do_put
3b6ac     44 F0 01 00 | 	long	@_hg010b_spin2_putchar
3b6b0     C0 FF 02 00 | 	long	@__struct___bas_wrap_sender_tx
3b6b4     04 00 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b6b8     4C 00 03 00 | 	long	@__struct___bas_wrap_sender_close
3b6bc     F0 FE 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3b6c0     60 FF 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3b6c4     A8 FE 02 00 | 	long	@___strs_cl_pfunc
3b6c8     3C 5C 02 00 | 	long	@__system____root_opendir
3b6cc     D8 5C 02 00 | 	long	@__system____root_closedir
3b6d0     54 5C 02 00 | 	long	@__system____root_readdir
3b6d4     E0 5C 02 00 | 	long	@__system____root_stat
3b6d8     2C 55 02 00 | 	long	@__system____default_putc
3b6dc     B0 54 02 00 | 	long	@__system____default_getc
3b6e0     D4 55 02 00 | 	long	@__system____default_flush
3b6e4     AC E9 02 00 | 	long	@_fatfs_cc_v_close
3b6e8     C8 ED 02 00 | 	long	@_fatfs_cc_v_read
3b6ec     DC EE 02 00 | 	long	@_fatfs_cc_v_write
3b6f0     BC EF 02 00 | 	long	@_fatfs_cc_v_lseek
3b6f4     44 F0 02 00 | 	long	@_fatfs_cc_v_ioctl
3b6f8     98 F0 02 00 | 	long	@_fatfs_cc_v_open
3b6fc     10 E9 02 00 | 	long	@_fatfs_cc_v_creat
3b700     F0 E9 02 00 | 	long	@_fatfs_cc_v_opendir
3b704     64 EA 02 00 | 	long	@_fatfs_cc_v_closedir
3b708     A4 EA 02 00 | 	long	@_fatfs_cc_v_readdir
3b70c     D8 EB 02 00 | 	long	@_fatfs_cc_v_stat
3b710     58 F0 02 00 | 	long	@_fatfs_cc_v_mkdir
3b714     78 F0 02 00 | 	long	@_fatfs_cc_v_rmdir
3b718     68 F0 02 00 | 	long	@_fatfs_cc_v_remove
3b71c     88 F0 02 00 | 	long	@_fatfs_cc_v_rename
3b720     A8 F1 02 00 | 	long	@_fatfs_cc_v_init
3b724     B0 F1 02 00 | 	long	@_fatfs_cc_v_deinit
3b728     44 09 02 00 | 	long	@__system___tx
3b72c     84 09 02 00 | 	long	@__system___rx
3b730     4C 68 02 00 | 	long	@__system___rxtxioctl_0697
3b734     A4 68 02 00 | 	long	@__system____dummy_flush_0698
3b738     78 F1 02 00 | 	long	@_fatfs_cc_v_flush
3b73c                 | __heap_base
3b73c     00 00 00 00 
      ...             
6a53c     00 00 00 00 
6a540     00 00 00 00 | 	long	0[48002]
6a544                 | objmem
6a544     00 00 00 00 
      ...             
74964     00 00 00 00 
74968     00 00 00 00 | 	long	0[10506]
7496c                 | stackspace
7496c     00 00 00 00 | 	long	0[1]
74970 100             | 	org	COG_BSS_START
74970 100             | _var01
74970 100             | 	res	1
74970 101             | _var02
74970 101             | 	res	1
74970 102             | _var03
74970 102             | 	res	1
74970 103             | _var04
74970 103             | 	res	1
74970 104             | _var05
74970 104             | 	res	1
74970 105             | _var06
74970 105             | 	res	1
74970 106             | _var07
74970 106             | 	res	1
74970 107             | _var08
74970 107             | 	res	1
74970 108             | _var09
74970 108             | 	res	1
74970 109             | arg01
74970 109             | 	res	1
74970 10a             | arg02
74970 10a             | 	res	1
74970 10b             | arg03
74970 10b             | 	res	1
74970 10c             | arg04
74970 10c             | 	res	1
74970 10d             | arg05
74970 10d             | 	res	1
74970 10e             | arg06
74970 10e             | 	res	1
74970 10f             | local01
74970 10f             | 	res	1
74970 110             | local02
74970 110             | 	res	1
74970 111             | local03
74970 111             | 	res	1
74970 112             | local04
74970 112             | 	res	1
74970 113             | local05
74970 113             | 	res	1
74970 114             | local06
74970 114             | 	res	1
74970 115             | local07
74970 115             | 	res	1
74970 116             | local08
74970 116             | 	res	1
74970 117             | local09
74970 117             | 	res	1
74970 118             | local10
74970 118             | 	res	1
74970 119             | local11
74970 119             | 	res	1
74970 11a             | local12
74970 11a             | 	res	1
74970 11b             | local13
74970 11b             | 	res	1
74970 11c             | local14
74970 11c             | 	res	1
74970 11d             | local15
74970 11d             | 	res	1
74970 11e             | local16
74970 11e             | 	res	1
74970 11f             | local17
74970 11f             | 	res	1
74970 120             | local18
74970 120             | 	res	1
74970 121             | local19
74970 121             | 	res	1
74970 122             | local20
74970 122             | 	res	1
74970 123             | local21
74970 123             | 	res	1
74970 124             | local22
74970 124             | 	res	1
74970 125             | local23
74970 125             | 	res	1
74970 126             | local24
74970 126             | 	res	1
74970 127             | local25
74970 127             | 	res	1
74970 128             | local26
74970 128             | 	res	1
74970 129             | local27
74970 129             | 	res	1
74970 12a             | local28
74970 12a             | 	res	1
74970 12b             | local29
74970 12b             | 	res	1
74970 12c             | local30
74970 12c             | 	res	1
74970 12d             | local31
74970 12d             | 	res	1
74970 12e             | local32
74970 12e             | 	res	1
74970 12f             | local33
74970 12f             | 	res	1
74970 130             | local34
74970 130             | 	res	1
74970 131             | local35
74970 131             | 	res	1
74970 132             | local36
74970 132             | 	res	1
74970 133             | local37
74970 133             | 	res	1
74970 134             | local38
74970 134             | 	res	1
74970 135             | local39
74970 135             | 	res	1
74970 136             | local40
74970 136             | 	res	1
74970 137             | local41
74970 137             | 	res	1
74970 138             | local42
74970 138             | 	res	1
74970 139             | local43
74970 139             | 	res	1
74970 13a             | local44
74970 13a             | 	res	1
74970 13b             | local45
74970 13b             | 	res	1
74970 13c             | local46
74970 13c             | 	res	1
74970 13d             | local47
74970 13d             | 	res	1
74970 13e             | muldiva_
74970 13e             | 	res	1
74970 13f             | muldivb_
74970 13f             | 	res	1
74970 140             | 	fit	480
74970 140             | 
