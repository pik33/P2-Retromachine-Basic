00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic031.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 31
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 94 D7 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 24 B8 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 58 B5 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 2C A6 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 38 A8 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 90 A3 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 90 10 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 78 AF 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 04 42 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 60 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 B4 69 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 6C 67 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 44 79 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 50 4A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     CC E7 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     00 F9 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     E0 E5 05 F1 | 	add	objptr, ##41952
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     E0 E5 85 F1 | 	sub	objptr, ##41952
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     F8 FB B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     4C 03 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     44 FD B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     08 FB B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     1C CD B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     E0 E5 05 F1 | 	add	objptr, ##41952
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     E0 E5 85 F1 | 	sub	objptr, ##41952
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     14 CB B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     B4 CA B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     E8 E5 05 F1 | 	add	objptr, ##41960
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     AA E5 85 F1 | 	sub	objptr, ##41898
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     AC E5 05 F1 | 	add	objptr, ##41900
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     AA E5 85 F1 | 	sub	objptr, ##41898
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     44 CA B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     14 E2 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     E8 E5 05 F1 | 	add	objptr, ##41960
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     E8 E5 85 F1 | 	sub	objptr, ##41960
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     30 E5 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     34 F8 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     88 FF B1 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     84 F9 B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     81 01 00 FF 
00ccc     16 48 06 F6 | 	mov	local22, ##@LR__5047
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     D8 C8 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     64 1E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     74 FC B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     80 E9 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     B0 EB B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     DC 06 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     C0 F6 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     14 FE B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     10 F8 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     74 C7 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     F0 E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     E4 E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     74 E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     40 E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     60 E0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     50 E0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     18 C6 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     C4 C5 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     94 C5 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     E8 E5 05 F1 | 	add	objptr, ##41960
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     AA E5 85 F1 | 	sub	objptr, ##41898
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     AC E5 05 F1 | 	add	objptr, ##41900
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     AA E5 85 F1 | 	sub	objptr, ##41898
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     2C C5 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     FC DC B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     E8 E5 05 F1 | 	add	objptr, ##41960
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     E8 E5 85 F1 | 	sub	objptr, ##41960
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     D8 DD B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     14 C4 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     C0 C3 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     90 C3 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     E8 E5 05 F1 | 	add	objptr, ##41960
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     AA E5 85 F1 | 	sub	objptr, ##41898
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     AC E5 05 F1 | 	add	objptr, ##41900
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     AA E5 85 F1 | 	sub	objptr, ##41898
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     28 C3 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     F8 DA B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     E8 E5 05 F1 | 	add	objptr, ##41960
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     E8 E5 85 F1 | 	sub	objptr, ##41960
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     81 01 00 FF 
01328     17 48 06 F6 | 	mov	local22, ##@LR__5048
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     20 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 34 C2 FA | 	rdbyte	local12, objptr
0134c     3E E4 85 F1 | 	sub	objptr, #62
01350     1A 53 02 F6 | 	mov	local27, local12
01354     01 52 86 F1 | 	sub	local27, #1
01358     29 29 02 F6 | 	mov	local06, local27
0135c     14 13 02 F6 | 	mov	arg01, local06
01360     58 DC B1 FD | 	call	#_hg010b_spin2_setcursory
01364                 | LR__0042
01364                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01364     51 32 0E F2 | 	cmp	local11, #81 wz
01368     24 00 90 5D |  if_ne	jmp	#LR__0043
0136c                 | ' return cursor_y
0136c     3E E4 05 F1 | 	add	objptr, #62
01370     F2 34 C2 FA | 	rdbyte	local12, objptr
01374     3E E4 85 F1 | 	sub	objptr, #62
01378     1A 53 02 F6 | 	mov	local27, local12
0137c     01 52 06 F1 | 	add	local27, #1
01380     24 52 36 F3 | 	fle	local27, #36 wc
01384     29 29 02 F6 | 	mov	local06, local27
01388     14 13 02 F6 | 	mov	arg01, local06
0138c     2C DC B1 FD | 	call	#_hg010b_spin2_setcursory
01390                 | LR__0043
01390                 | '   if key4=80 then
01390     50 32 0E F2 | 	cmp	local11, #80 wz
01394     44 00 90 5D |  if_ne	jmp	#LR__0044
01398                 | ' return cursor_x
01398     3C E4 05 F1 | 	add	objptr, #60
0139c     F2 54 E2 FA | 	rdword	local28, objptr
013a0     02 54 86 F1 | 	sub	local28, #2
013a4                 | '     cx=v.getcursorx()-2 					' arrow left
013a4                 | '     if cx<editor_spaces then cx=editor_spaces			
013a4     36 00 00 FF 
013a8     F8 E5 05 F1 | 	add	objptr, ##28152
013ac     F2 34 02 FB | 	rdlong	local12, objptr
013b0     37 00 00 FF 
013b4     34 E4 85 F1 | 	sub	objptr, ##28212
013b8     1A 55 52 F2 | 	cmps	local28, local12 wc
013bc     37 00 00 CF 
013c0     34 E4 05 C1 |  if_b	add	objptr, ##28212
013c4     F2 54 02 CB |  if_b	rdlong	local28, objptr
013c8     37 00 00 CF 
013cc     34 E4 85 C1 |  if_b	sub	objptr, ##28212
013d0     2A 29 02 F6 | 	mov	local06, local28
013d4     14 13 02 F6 | 	mov	arg01, local06
013d8     B0 DB B1 FD | 	call	#_hg010b_spin2_setcursorx
013dc                 | LR__0044
013dc                 | '   if key4=79 then						' arrow right
013dc     4F 32 0E F2 | 	cmp	local11, #79 wz
013e0     20 00 90 5D |  if_ne	jmp	#LR__0045
013e4                 | ' return cursor_x
013e4     3C E4 05 F1 | 	add	objptr, #60
013e8     F2 54 E2 FA | 	rdword	local28, objptr
013ec     3C E4 85 F1 | 	sub	objptr, #60
013f0     02 54 06 F1 | 	add	local28, #2
013f4                 | '     cx=v.getcursorx()+2 
013f4                 | '     if cx>254  then cx=254 
013f4     FE 54 36 F3 | 	fle	local28, #254 wc
013f8     2A 29 02 F6 | 	mov	local06, local28
013fc     14 13 02 F6 | 	mov	arg01, local06
01400     88 DB B1 FD | 	call	#_hg010b_spin2_setcursorx
01404                 | LR__0045
01404                 | ' 
01404                 | '   if key4=73 then 						' ins
01404     49 32 0E F2 | 	cmp	local11, #73 wz
01408     40 00 90 5D |  if_ne	jmp	#LR__0048
0140c     51 00 00 FF 
01410     DC E5 05 F1 | 	add	objptr, ##41948
01414     F2 28 02 FB | 	rdlong	local06, objptr
01418     14 35 22 F6 | 	not	local12, local06
0141c     F2 34 62 FC | 	wrlong	local12, objptr
01420                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
01420     51 00 00 FF 
01424     DC E5 85 F1 | 	sub	objptr, ##41948
01428     00 34 0E F2 | 	cmp	local12, #0 wz
0142c     10 00 90 AD |  if_e	jmp	#LR__0046
01430     0E 28 06 F6 | 	mov	local06, #14
01434     0E 12 06 F6 | 	mov	arg01, #14
01438     D4 C9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0143c     0C 00 90 FD | 	jmp	#LR__0047
01440                 | LR__0046
01440     00 28 06 F6 | 	mov	local06, #0
01444     00 12 06 F6 | 	mov	arg01, #0
01448     C4 C9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0144c                 | LR__0047
0144c                 | LR__0048
0144c     00 24 06 F6 | 	mov	local04, #0
01450     C8 F3 9F FD | 	jmp	#LR__0001
01454                 | LR__0049
01454     A7 F0 03 F6 | 	mov	ptra, fp
01458     B2 00 A0 FD | 	call	#popregs_
0145c                 | _edit_ret
0145c     2D 00 64 FD | 	ret
01460                 | 
01460                 | ' 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' ' 					A housekeepeer.
01460                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01460                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01460                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' 
01460                 | ' sub housekeeper
01460                 | _housekeeper
01460                 | ' 
01460                 | ' do
01460                 | LR__0050
01460                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01460     49 E4 05 F1 | 	add	objptr, #73
01464                 | LR__0051
01464     F2 12 02 FB | 	rdlong	arg01, objptr
01468     01 12 0E F2 | 	cmp	arg01, #1 wz
0146c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01470     51 00 00 FF 
01474     5F E5 05 F1 | 	add	objptr, ##41823
01478     F2 12 02 FB | 	rdlong	arg01, objptr
0147c     01 12 06 F1 | 	add	arg01, #1
01480     F2 12 62 FC | 	wrlong	arg01, objptr
01484     51 00 00 FF 
01488     A8 E5 85 F1 | 	sub	objptr, ##41896
0148c     80 00 B0 FD | 	call	#_gethdi
01490     05 12 06 F6 | 	mov	arg01, #5
01494     98 F7 B1 FD | 	call	#__system___waitms
01498     51 00 00 FF 
0149c     A8 E5 05 F1 | 	add	objptr, ##41896
014a0     F2 12 02 FB | 	rdlong	arg01, objptr
014a4     01 12 06 F1 | 	add	arg01, #1
014a8     F2 12 62 FC | 	wrlong	arg01, objptr
014ac     51 00 00 FF 
014b0     A8 E5 85 F1 | 	sub	objptr, ##41896
014b4     58 00 B0 FD | 	call	#_gethdi
014b8     05 12 06 F6 | 	mov	arg01, #5
014bc     70 F7 B1 FD | 	call	#__system___waitms
014c0     51 00 00 FF 
014c4     A8 E5 05 F1 | 	add	objptr, ##41896
014c8     F2 12 02 FB | 	rdlong	arg01, objptr
014cc     01 12 06 F1 | 	add	arg01, #1
014d0     F2 12 62 FC | 	wrlong	arg01, objptr
014d4     51 00 00 FF 
014d8     A8 E5 85 F1 | 	sub	objptr, ##41896
014dc     30 00 B0 FD | 	call	#_gethdi
014e0     05 12 06 F6 | 	mov	arg01, #5
014e4     48 F7 B1 FD | 	call	#__system___waitms
014e8     51 00 00 FF 
014ec     A8 E5 05 F1 | 	add	objptr, ##41896
014f0     F2 12 02 FB | 	rdlong	arg01, objptr
014f4     01 12 06 F1 | 	add	arg01, #1
014f8     F2 12 62 FC | 	wrlong	arg01, objptr
014fc     51 00 00 FF 
01500     A8 E5 85 F1 | 	sub	objptr, ##41896
01504     08 00 B0 FD | 	call	#_gethdi
01508     54 FF 9F FD | 	jmp	#LR__0050
0150c                 | _housekeeper_ret
0150c     2D 00 64 FD | 	ret
01510                 | 
01510                 | ' 
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' 
01510                 | ' sub gethdi
01510                 | _gethdi
01510     03 4A 05 F6 | 	mov	COUNT_, #3
01514     A8 00 A0 FD | 	call	#pushregs_
01518                 | '   x := mouse_xacc
01518     14 00 00 FF 
0151c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
01520     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
01524                 | '   y := mouse_yacc
01524     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01528     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
0152c     51 00 00 FF 
01530     20 E5 05 F1 | 	add	objptr, ##41760
01534     F2 14 62 FC | 	wrlong	arg02, objptr
01538     04 E4 05 F1 | 	add	objptr, #4
0153c     F2 12 62 FC | 	wrlong	arg01, objptr
01540                 | '   x := 0
01540                 | '   y := mouse_zacc
01540     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01544     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01548     08 E4 05 F1 | 	add	objptr, #8
0154c     F2 FA 61 FC | 	wrlong	result1, objptr
01550                 | '   return mouse_bstate&7
01550     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01554     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01558     14 00 00 FF 
0155c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01560     07 FA 05 F5 | 	and	result1, #7
01564     04 E4 85 F1 | 	sub	objptr, #4
01568     F2 FA 61 FC | 	wrlong	result1, objptr
0156c     51 00 00 FF 
01570     28 E5 85 F1 | 	sub	objptr, ##41768
01574     00 1E 06 F6 | 	mov	local01, #0
01578                 | ' 
01578                 | ' mousex,mousey=kbm.mouse_xy()
01578                 | ' dummy,mousew=kbm.mouse_scroll()
01578                 | ' mousek=kbm.mouse_buttons()
01578                 | ' i=0:
01578                 | ' for j=0 to 6
01578     00 20 06 F6 | 	mov	local02, #0
0157c                 | LR__0060
0157c                 | '   if kbm.hidpad_id(j)>0 then
0157c     10 13 02 F6 | 	mov	arg01, local02
01580     A0 EC B1 FD | 	call	#_usbnew_spin2_hidpad_id
01584     01 FA 55 F2 | 	cmps	result1, #1 wc
01588     8C 00 90 CD |  if_b	jmp	#LR__0061
0158c     10 13 02 F6 | 	mov	arg01, local02
01590     00 14 06 F6 | 	mov	arg02, #0
01594     F0 EC B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01598     FD 22 02 F6 | 	mov	local03, result1
0159c     10 13 02 F6 | 	mov	arg01, local02
015a0     01 14 06 F6 | 	mov	arg02, #1
015a4     E0 EC B1 FD | 	call	#_usbnew_spin2_hidpad_axis
015a8     60 00 00 FF 
015ac     00 22 06 F1 | 	add	local03, ##49152
015b0     0F 22 46 F0 | 	shr	local03, #15
015b4     01 14 06 F6 | 	mov	arg02, #1
015b8     11 15 02 F1 | 	add	arg02, local03
015bc     60 00 00 FF 
015c0     00 FA 05 F1 | 	add	result1, ##49152
015c4     0F FA 45 F0 | 	shr	result1, #15
015c8     01 12 06 F6 | 	mov	arg01, #1
015cc     FD 12 02 F1 | 	add	arg01, result1
015d0     0F 23 02 F6 | 	mov	local03, local01
015d4     02 22 66 F0 | 	shl	local03, #2
015d8     51 00 00 FF 
015dc     30 E5 05 F1 | 	add	objptr, ##41776
015e0     F2 22 02 F1 | 	add	local03, objptr
015e4     02 12 66 F0 | 	shl	arg01, #2
015e8     09 15 02 F1 | 	add	arg02, arg01
015ec     11 15 62 FC | 	wrlong	arg02, local03
015f0     0F 23 02 F6 | 	mov	local03, local01
015f4     02 22 66 F0 | 	shl	local03, #2
015f8     1C E4 05 F1 | 	add	objptr, #28
015fc     F2 22 02 F1 | 	add	local03, objptr
01600     10 13 02 F6 | 	mov	arg01, local02
01604     51 00 00 FF 
01608     4C E5 85 F1 | 	sub	objptr, ##41804
0160c     44 EC B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
01610     11 FB 61 FC | 	wrlong	result1, local03
01614     01 1E 06 F1 | 	add	local01, #1
01618                 | LR__0061
01618     01 20 06 F1 | 	add	local02, #1
0161c     07 20 16 F2 | 	cmp	local02, #7 wc
01620     58 FF 9F CD |  if_b	jmp	#LR__0060
01624     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01628                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01628                 | LR__0062
01628     07 1E 16 F2 | 	cmp	local01, #7 wc
0162c     3C 00 90 3D |  if_ae	jmp	#LR__0064
01630     0F 23 02 F6 | 	mov	local03, local01
01634     02 22 66 F0 | 	shl	local03, #2
01638     51 00 00 FF 
0163c     30 E5 05 F1 | 	add	objptr, ##41776
01640     F2 22 02 F1 | 	add	local03, objptr
01644     11 01 68 FC | 	wrlong	#0, local03
01648     0F 23 02 F6 | 	mov	local03, local01
0164c     02 22 66 F0 | 	shl	local03, #2
01650     1C E4 05 F1 | 	add	objptr, #28
01654     F2 22 02 F1 | 	add	local03, objptr
01658     11 01 68 FC | 	wrlong	#0, local03
0165c     01 1E 06 F1 | 	add	local01, #1
01660     51 00 00 FF 
01664     4C E5 85 F1 | 	sub	objptr, ##41804
01668     BC FF 9F FD | 	jmp	#LR__0062
0166c                 | LR__0063
0166c                 | LR__0064
0166c     A7 F0 03 F6 | 	mov	ptra, fp
01670     B2 00 A0 FD | 	call	#popregs_
01674                 | _gethdi_ret
01674     2D 00 64 FD | 	ret
01678                 | 
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '
01678                 | ' '                                     LINE INTERPRETER/TOKENIZER
01678                 | ' '
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' 
01678                 | ' sub interpret
01678                 | _interpret
01678     2F 4A 05 F6 | 	mov	COUNT_, #47
0167c     A8 00 A0 FD | 	call	#pushregs_
01680     01 00 00 FF 
01684     7C F0 07 F1 | 	add	ptra, ##636
01688     37 00 00 FF 
0168c     1C E4 05 F1 | 	add	objptr, ##28188
01690     F2 12 02 FB | 	rdlong	arg01, objptr
01694     37 00 00 FF 
01698     1C E4 85 F1 | 	sub	objptr, ##28188
0169c     A8 17 B2 FD | 	call	#__system__RTrim_S
016a0     FD 12 02 F6 | 	mov	arg01, result1
016a4     E0 16 B2 FD | 	call	#__system__LTrim_S
016a8     37 00 00 FF 
016ac     20 E4 05 F1 | 	add	objptr, ##28192
016b0     F2 FA 61 FC | 	wrlong	result1, objptr
016b4     04 E4 05 F1 | 	add	objptr, #4
016b8     FF FF FF FF 
016bc     F2 FE 6B FC | 	wrlong	##-1, objptr
016c0     1A 00 00 FF 
016c4     A0 E5 05 F1 | 	add	objptr, ##13728
016c8     F2 00 68 FC | 	wrlong	#0, objptr
016cc     07 00 00 FF 
016d0     48 E5 85 F1 | 	sub	objptr, ##3912
016d4     F2 00 68 FC | 	wrlong	#0, objptr
016d8     4A 00 00 FF 
016dc     7C E4 85 F1 | 	sub	objptr, ##38012
016e0     00 1E 06 F6 | 	mov	local01, #0
016e4                 | LR__0070
016e4                 | ' 
016e4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
016e4                 | ' 
016e4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
016e4                 | ' 
016e4                 | ' 108 
016e4                 | ' for i=0 to 125: separators(i)=0 :next i
016e4     00 20 06 F6 | 	mov	local02, #0
016e8     38 4E 05 F1 | 	add	fp, #56
016ec     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016f0                 | LR__0071
016f0     10 23 02 F6 | 	mov	local03, local02
016f4     02 22 66 F0 | 	shl	local03, #2
016f8     A7 22 02 F1 | 	add	local03, fp
016fc     11 01 68 FC | 	wrlong	#0, local03
01700     01 20 06 F1 | 	add	local02, #1
01704     7E 20 56 F2 | 	cmps	local02, #126 wc
01708     E4 FF 9F CD |  if_b	jmp	#LR__0071
0170c                 | LR__0072
0170c     38 4E 85 F1 | 	sub	fp, #56
01710                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01710     00 20 06 F6 | 	mov	local02, #0
01714     35 00 00 FF 
01718     0C E4 05 F1 | 	add	objptr, ##27148
0171c     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01720                 | LR__0073
01720     10 25 02 F6 | 	mov	local04, local02
01724     03 24 66 F0 | 	shl	local04, #3
01728     F2 24 02 F1 | 	add	local04, objptr
0172c     81 01 00 FF 
01730     18 16 06 F6 | 	mov	arg03, ##@LR__5049
01734     12 17 62 FC | 	wrlong	arg03, local04
01738     10 25 02 F6 | 	mov	local04, local02
0173c     03 24 66 F0 | 	shl	local04, #3
01740     F2 26 02 F6 | 	mov	local05, objptr
01744     F2 24 02 F1 | 	add	local04, objptr
01748     00 28 06 F6 | 	mov	local06, #0
0174c     04 24 06 F1 | 	add	local04, #4
01750     12 01 68 FC | 	wrlong	#0, local04
01754     01 20 06 F1 | 	add	local02, #1
01758     7E 20 56 F2 | 	cmps	local02, #126 wc
0175c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01760                 | LR__0074
01760     02 00 00 FF 
01764     10 E4 05 F1 | 	add	objptr, ##1040
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     37 00 00 FF 
01770     1C E4 85 F1 | 	sub	objptr, ##28188
01774     D0 16 B2 FD | 	call	#__system__RTrim_S
01778     FD 12 02 F6 | 	mov	arg01, result1
0177c     08 16 B2 FD | 	call	#__system__LTrim_S
01780     37 00 00 FF 
01784     1C E4 05 F1 | 	add	objptr, ##28188
01788     F2 FA 61 FC | 	wrlong	result1, objptr
0178c     81 01 00 FF 
01790     19 24 06 F6 | 	mov	local04, ##@LR__5050
01794     1A 00 00 FF 
01798     D4 E5 05 F1 | 	add	objptr, ##13780
0179c     F2 24 62 FC | 	wrlong	local04, objptr
017a0     1A 00 00 FF 
017a4     D4 E5 85 F1 | 	sub	objptr, ##13780
017a8     F2 12 02 FB | 	rdlong	arg01, objptr
017ac     37 00 00 FF 
017b0     1C E4 85 F1 | 	sub	objptr, ##28188
017b4     09 2B 02 F6 | 	mov	local07, arg01
017b8     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
017bc                 | LR__0075
017bc     15 FB C9 FA | 	rdbyte	result1, local07 wz
017c0     01 2A 06 51 |  if_ne	add	local07, #1
017c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
017c8                 | LR__0076
017c8     09 2B 8A F1 | 	sub	local07, arg01 wz
017cc     51 00 00 FF 
017d0     F4 E5 05 F1 | 	add	objptr, ##41972
017d4     F2 2A 62 FC | 	wrlong	local07, objptr
017d8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
017d8     51 00 00 FF 
017dc     F4 E5 85 F1 | 	sub	objptr, ##41972
017e0     60 24 90 AD |  if_e	jmp	#LR__0198
017e4     00 2C 06 F6 | 	mov	local08, #0
017e8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
017e8                 | ' for i=1 to len(line$)
017e8     01 20 06 F6 | 	mov	local02, #1
017ec     37 00 00 FF 
017f0     1C E4 05 F1 | 	add	objptr, ##28188
017f4     F2 12 02 FB | 	rdlong	arg01, objptr
017f8     37 00 00 FF 
017fc     1C E4 85 F1 | 	sub	objptr, ##28188
01800     09 2B 02 F6 | 	mov	local07, arg01
01804     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01808                 | LR__0077
01808     15 FB C9 FA | 	rdbyte	result1, local07 wz
0180c     01 2A 06 51 |  if_ne	add	local07, #1
01810     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01814                 | LR__0078
01814     09 2B 82 F1 | 	sub	local07, arg01
01818     15 2F 02 F6 | 	mov	local09, local07
0181c     01 2E 06 F1 | 	add	local09, #1
01820                 | LR__0079
01820     17 21 52 F2 | 	cmps	local02, local09 wc
01824     AC 00 90 3D |  if_ae	jmp	#LR__0081
01828                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01828     37 00 00 FF 
0182c     1C E4 05 F1 | 	add	objptr, ##28188
01830     F2 12 02 FB | 	rdlong	arg01, objptr
01834     37 00 00 FF 
01838     1C E4 85 F1 | 	sub	objptr, ##28188
0183c     10 15 02 F6 | 	mov	arg02, local02
01840     01 16 06 F6 | 	mov	arg03, #1
01844     88 12 B2 FD | 	call	#__system__Mid_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     81 01 00 FF 
01850     1A 14 06 F6 | 	mov	arg02, ##@LR__5051
01854     0C F1 B1 FD | 	call	#__system___string_cmp
01858     00 FA 0D F2 | 	cmp	result1, #0 wz
0185c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01860     01 2C 06 A6 |  if_e	mov	local08, #1
01864     3C 00 90 AD |  if_e	jmp	#LR__0080
01868     37 00 00 FF 
0186c     1C E4 05 F1 | 	add	objptr, ##28188
01870     F2 12 02 FB | 	rdlong	arg01, objptr
01874     37 00 00 FF 
01878     1C E4 85 F1 | 	sub	objptr, ##28188
0187c     10 15 02 F6 | 	mov	arg02, local02
01880     01 16 06 F6 | 	mov	arg03, #1
01884     48 12 B2 FD | 	call	#__system__Mid_S
01888     FD 12 02 F6 | 	mov	arg01, result1
0188c     81 01 00 FF 
01890     1C 14 06 F6 | 	mov	arg02, ##@LR__5052
01894     CC F0 B1 FD | 	call	#__system___string_cmp
01898     00 FA 0D F2 | 	cmp	result1, #0 wz
0189c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
018a0     00 2C 06 A6 |  if_e	mov	local08, #0
018a4                 | LR__0080
018a4     10 25 02 F6 | 	mov	local04, local02
018a8     03 24 66 F0 | 	shl	local04, #3
018ac     35 00 00 FF 
018b0     0C E4 05 F1 | 	add	objptr, ##27148
018b4     F2 26 02 F6 | 	mov	local05, objptr
018b8     F2 24 02 F1 | 	add	local04, objptr
018bc     04 24 06 F1 | 	add	local04, #4
018c0     12 2D 62 FC | 	wrlong	local08, local04
018c4     01 20 06 F1 | 	add	local02, #1
018c8     35 00 00 FF 
018cc     0C E4 85 F1 | 	sub	objptr, ##27148
018d0     4C FF 9F FD | 	jmp	#LR__0079
018d4                 | LR__0081
018d4     01 20 06 F6 | 	mov	local02, #1
018d8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
018d8                 | LR__0082
018d8     37 00 00 FF 
018dc     1C E4 05 F1 | 	add	objptr, ##28188
018e0     F2 12 02 FB | 	rdlong	arg01, objptr
018e4     37 00 00 FF 
018e8     1C E4 85 F1 | 	sub	objptr, ##28188
018ec     10 15 02 F6 | 	mov	arg02, local02
018f0     01 16 06 F6 | 	mov	arg03, #1
018f4     D8 11 B2 FD | 	call	#__system__Mid_S
018f8     FD 12 02 F6 | 	mov	arg01, result1
018fc     81 01 00 FF 
01900     1E 30 06 F6 | 	mov	local10, ##@LR__5053
01904     18 15 02 F6 | 	mov	arg02, local10
01908     58 F0 B1 FD | 	call	#__system___string_cmp
0190c     00 FA 0D F2 | 	cmp	result1, #0 wz
01910     34 00 90 5D |  if_ne	jmp	#LR__0083
01914     10 27 02 F6 | 	mov	local05, local02
01918     03 26 66 F0 | 	shl	local05, #3
0191c     35 00 00 FF 
01920     0C E4 05 F1 | 	add	objptr, ##27148
01924     F2 28 02 F6 | 	mov	local06, objptr
01928     F2 26 02 F1 | 	add	local05, objptr
0192c     04 26 06 F1 | 	add	local05, #4
01930     13 33 02 FB | 	rdlong	local11, local05
01934     04 26 86 F1 | 	sub	local05, #4
01938     19 35 0A F6 | 	mov	local12, local11 wz
0193c     35 00 00 FF 
01940     0C E4 85 F1 | 	sub	objptr, ##27148
01944     24 00 90 AD |  if_e	jmp	#LR__0084
01948                 | LR__0083
01948     51 00 00 FF 
0194c     F4 E5 05 F1 | 	add	objptr, ##41972
01950     F2 36 02 FB | 	rdlong	local13, objptr
01954     51 00 00 FF 
01958     F4 E5 85 F1 | 	sub	objptr, ##41972
0195c     1B 39 02 F6 | 	mov	local14, local13
01960     1C 21 52 F2 | 	cmps	local02, local14 wc
01964     01 20 06 C1 |  if_b	add	local02, #1
01968     6C FF 9F CD |  if_b	jmp	#LR__0082
0196c                 | LR__0084
0196c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
0196c     51 00 00 FF 
01970     F4 E5 05 F1 | 	add	objptr, ##41972
01974     F2 24 02 FB | 	rdlong	local04, objptr
01978     51 00 00 FF 
0197c     F4 E5 85 F1 | 	sub	objptr, ##41972
01980     12 21 52 F2 | 	cmps	local02, local04 wc
01984     A8 00 90 3D |  if_ae	jmp	#LR__0087
01988     37 00 00 FF 
0198c     1C E4 05 F1 | 	add	objptr, ##28188
01990     F2 28 02 FB | 	rdlong	local06, objptr
01994     37 00 00 FF 
01998     1C E4 85 F1 | 	sub	objptr, ##28188
0199c     14 13 02 F6 | 	mov	arg01, local06
019a0     09 2B 02 F6 | 	mov	local07, arg01
019a4     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
019a8                 | LR__0085
019a8     15 FB C9 FA | 	rdbyte	result1, local07 wz
019ac     01 2A 06 51 |  if_ne	add	local07, #1
019b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
019b4                 | LR__0086
019b4     09 2B 82 F1 | 	sub	local07, arg01
019b8     15 27 02 F6 | 	mov	local05, local07
019bc     13 15 02 F6 | 	mov	arg02, local05
019c0     10 15 82 F1 | 	sub	arg02, local02
019c4     14 13 02 F6 | 	mov	arg01, local06
019c8     74 10 B2 FD | 	call	#__system__Right_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     74 14 B2 FD | 	call	#__system__RTrim_S
019d4     FD 12 02 F6 | 	mov	arg01, result1
019d8     AC 13 B2 FD | 	call	#__system__LTrim_S
019dc     51 00 00 FF 
019e0     F8 E5 05 F1 | 	add	objptr, ##41976
019e4     F2 FA 61 FC | 	wrlong	result1, objptr
019e8     1A 00 00 FF 
019ec     DC E5 85 F1 | 	sub	objptr, ##13788
019f0     F2 12 02 FB | 	rdlong	arg01, objptr
019f4     37 00 00 FF 
019f8     1C E4 85 F1 | 	sub	objptr, ##28188
019fc     01 20 86 F1 | 	sub	local02, #1
01a00     10 15 02 F6 | 	mov	arg02, local02
01a04     B0 0F B2 FD | 	call	#__system__Left_S
01a08     FD 12 02 F6 | 	mov	arg01, result1
01a0c     38 14 B2 FD | 	call	#__system__RTrim_S
01a10     FD 12 02 F6 | 	mov	arg01, result1
01a14     70 13 B2 FD | 	call	#__system__LTrim_S
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 FA 61 FC | 	wrlong	result1, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     1C 00 90 FD | 	jmp	#LR__0088
01a30                 | LR__0087
01a30     81 01 00 FF 
01a34     20 24 06 F6 | 	mov	local04, ##@LR__5054
01a38     51 00 00 FF 
01a3c     F8 E5 05 F1 | 	add	objptr, ##41976
01a40     F2 24 62 FC | 	wrlong	local04, objptr
01a44     51 00 00 FF 
01a48     F8 E5 85 F1 | 	sub	objptr, ##41976
01a4c                 | LR__0088
01a4c                 | ' 
01a4c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01a4c     37 00 00 FF 
01a50     24 E4 05 F1 | 	add	objptr, ##28196
01a54     F2 24 02 FB | 	rdlong	local04, objptr
01a58     37 00 00 FF 
01a5c     24 E4 85 F1 | 	sub	objptr, ##28196
01a60     FF FF 7F FF 
01a64     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a68     40 00 90 5D |  if_ne	jmp	#LR__0089
01a6c     51 00 00 FF 
01a70     F8 E5 05 F1 | 	add	objptr, ##41976
01a74     F2 12 02 FB | 	rdlong	arg01, objptr
01a78     51 00 00 FF 
01a7c     F8 E5 85 F1 | 	sub	objptr, ##41976
01a80     81 01 00 FF 
01a84     21 28 06 F6 | 	mov	local06, ##@LR__5055
01a88     14 15 02 F6 | 	mov	arg02, local06
01a8c     D4 EE B1 FD | 	call	#__system___string_cmp
01a90     00 FA 0D F2 | 	cmp	result1, #0 wz
01a94     37 00 00 5F 
01a98     24 E4 05 51 |  if_ne	add	objptr, ##28196
01a9c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01aa0     37 00 00 5F 
01aa4     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01aa8     08 01 90 5D |  if_ne	jmp	#LR__0093
01aac                 | LR__0089
01aac                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01aac     37 00 00 FF 
01ab0     24 E4 05 F1 | 	add	objptr, ##28196
01ab4     F2 24 02 FB | 	rdlong	local04, objptr
01ab8     37 00 00 FF 
01abc     24 E4 85 F1 | 	sub	objptr, ##28196
01ac0     FF FF 7F FF 
01ac4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01ac8     3C 00 90 5D |  if_ne	jmp	#LR__0090
01acc     51 00 00 FF 
01ad0     F8 E5 05 F1 | 	add	objptr, ##41976
01ad4     F2 12 02 FB | 	rdlong	arg01, objptr
01ad8     51 00 00 FF 
01adc     F8 E5 85 F1 | 	sub	objptr, ##41976
01ae0     81 01 00 FF 
01ae4     22 14 06 F6 | 	mov	arg02, ##@LR__5056
01ae8     78 EE B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     37 00 00 AF 
01af4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01af8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01afc     37 00 00 AF 
01b00     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b04     AC 00 90 AD |  if_e	jmp	#LR__0093
01b08                 | LR__0090
01b08                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01b08     37 00 00 FF 
01b0c     24 E4 05 F1 | 	add	objptr, ##28196
01b10     F2 24 02 FB | 	rdlong	local04, objptr
01b14     37 00 00 FF 
01b18     24 E4 85 F1 | 	sub	objptr, ##28196
01b1c     04 24 0E F2 | 	cmp	local04, #4 wz
01b20     3C 00 90 5D |  if_ne	jmp	#LR__0091
01b24     51 00 00 FF 
01b28     F8 E5 05 F1 | 	add	objptr, ##41976
01b2c     F2 12 02 FB | 	rdlong	arg01, objptr
01b30     51 00 00 FF 
01b34     F8 E5 85 F1 | 	sub	objptr, ##41976
01b38     81 01 00 FF 
01b3c     23 14 06 F6 | 	mov	arg02, ##@LR__5057
01b40     20 EE B1 FD | 	call	#__system___string_cmp
01b44     00 FA 0D F2 | 	cmp	result1, #0 wz
01b48     37 00 00 5F 
01b4c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b50     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b54     37 00 00 5F 
01b58     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b5c     54 00 90 5D |  if_ne	jmp	#LR__0093
01b60                 | LR__0091
01b60                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01b60     37 00 00 FF 
01b64     24 E4 05 F1 | 	add	objptr, ##28196
01b68     F2 24 02 FB | 	rdlong	local04, objptr
01b6c     37 00 00 FF 
01b70     24 E4 85 F1 | 	sub	objptr, ##28196
01b74     04 24 0E F2 | 	cmp	local04, #4 wz
01b78     38 00 90 5D |  if_ne	jmp	#LR__0092
01b7c     51 00 00 FF 
01b80     F8 E5 05 F1 | 	add	objptr, ##41976
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     51 00 00 FF 
01b8c     F8 E5 85 F1 | 	sub	objptr, ##41976
01b90     81 01 00 FF 
01b94     24 14 06 F6 | 	mov	arg02, ##@LR__5058
01b98     C8 ED B1 FD | 	call	#__system___string_cmp
01b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ba0     37 00 00 AF 
01ba4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ba8     F2 04 68 AC |  if_e	wrlong	#2, objptr
01bac     37 00 00 AF 
01bb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bb4                 | LR__0092
01bb4                 | LR__0093
01bb4     38 4E 05 F1 | 	add	fp, #56
01bb8     A7 00 68 FC | 	wrlong	#0, fp
01bbc     38 4E 85 F1 | 	sub	fp, #56
01bc0     00 20 06 F6 | 	mov	local02, #0
01bc4     01 3A 06 F6 | 	mov	local15, #1
01bc8                 | ' 
01bc8                 | ' ' 1b: find separators
01bc8                 | ' 
01bc8                 | ' 107
01bc8                 | ' separators(0)=0
01bc8                 | ' i=0: j=1
01bc8                 | ' do: 
01bc8                 | LR__0094
01bc8     01 20 06 F1 | 	add	local02, #1
01bcc     37 00 00 FF 
01bd0     1C E4 05 F1 | 	add	objptr, ##28188
01bd4     F2 12 02 FB | 	rdlong	arg01, objptr
01bd8     37 00 00 FF 
01bdc     1C E4 85 F1 | 	sub	objptr, ##28188
01be0     10 15 02 F6 | 	mov	arg02, local02
01be4     01 16 06 F6 | 	mov	arg03, #1
01be8     E4 0E B2 FD | 	call	#__system__Mid_S
01bec     FD 3C 02 F6 | 	mov	local16, result1
01bf0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01bf0     1E 13 02 F6 | 	mov	arg01, local16
01bf4     2C 28 B0 FD | 	call	#_isseparator
01bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
01bfc     1C 00 90 AD |  if_e	jmp	#LR__0095
01c00     1D 23 02 F6 | 	mov	local03, local15
01c04     02 22 66 F0 | 	shl	local03, #2
01c08     38 4E 05 F1 | 	add	fp, #56
01c0c     A7 22 02 F1 | 	add	local03, fp
01c10     11 21 62 FC | 	wrlong	local02, local03
01c14     01 3A 06 F1 | 	add	local15, #1
01c18     38 4E 85 F1 | 	sub	fp, #56
01c1c                 | LR__0095
01c1c     51 00 00 FF 
01c20     F4 E5 05 F1 | 	add	objptr, ##41972
01c24     F2 24 02 FB | 	rdlong	local04, objptr
01c28     51 00 00 FF 
01c2c     F4 E5 85 F1 | 	sub	objptr, ##41972
01c30     12 21 5A F2 | 	cmps	local02, local04 wcz
01c34     90 FF 9F ED |  if_be	jmp	#LR__0094
01c38     1D 23 02 F6 | 	mov	local03, local15
01c3c     02 22 66 F0 | 	shl	local03, #2
01c40     38 4E 05 F1 | 	add	fp, #56
01c44     A7 30 02 F6 | 	mov	local10, fp
01c48     A7 22 02 F1 | 	add	local03, fp
01c4c     11 21 62 FC | 	wrlong	local02, local03
01c50     00 3E 06 F6 | 	mov	local17, #0
01c54                 | ' for i=0 to j-1 
01c54     00 20 06 F6 | 	mov	local02, #0
01c58     1D 41 02 F6 | 	mov	local18, local15
01c5c     38 4E 85 F1 | 	sub	fp, #56
01c60                 | LR__0096
01c60     20 21 52 F2 | 	cmps	local02, local18 wc
01c64     50 01 90 3D |  if_ae	jmp	#LR__0100
01c68     10 23 02 F6 | 	mov	local03, local02
01c6c     02 22 66 F0 | 	shl	local03, #2
01c70     38 4E 05 F1 | 	add	fp, #56
01c74     A7 22 02 F1 | 	add	local03, fp
01c78     11 27 02 FB | 	rdlong	local05, local03
01c7c     52 00 00 FF 
01c80     00 E4 05 F1 | 	add	objptr, ##41984
01c84     F2 26 62 FC | 	wrlong	local05, objptr
01c88     10 23 02 F6 | 	mov	local03, local02
01c8c     01 22 06 F1 | 	add	local03, #1
01c90     02 22 66 F0 | 	shl	local03, #2
01c94     A7 30 02 F6 | 	mov	local10, fp
01c98     A7 22 02 F1 | 	add	local03, fp
01c9c     11 27 02 FB | 	rdlong	local05, local03
01ca0     04 E4 05 F1 | 	add	objptr, #4
01ca4     F2 26 62 FC | 	wrlong	local05, objptr
01ca8                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ca8     04 E4 85 F1 | 	sub	objptr, #4
01cac     F2 24 02 FB | 	rdlong	local04, objptr
01cb0     52 00 00 FF 
01cb4     00 E4 85 F1 | 	sub	objptr, ##41984
01cb8     01 24 56 F2 | 	cmps	local04, #1 wc
01cbc     38 4E 85 F1 | 	sub	fp, #56
01cc0     68 00 90 CD |  if_b	jmp	#LR__0098
01cc4     37 00 00 FF 
01cc8     1C E4 05 F1 | 	add	objptr, ##28188
01ccc     F2 12 02 FB | 	rdlong	arg01, objptr
01cd0     1A 00 00 FF 
01cd4     E4 E5 05 F1 | 	add	objptr, ##13796
01cd8     F2 14 02 FB | 	rdlong	arg02, objptr
01cdc     52 00 00 FF 
01ce0     00 E4 85 F1 | 	sub	objptr, ##41984
01ce4     01 16 06 F6 | 	mov	arg03, #1
01ce8     E4 0D B2 FD | 	call	#__system__Mid_S
01cec     FD 42 02 F6 | 	mov	local19, result1
01cf0     81 01 00 FF 
01cf4     25 14 06 F6 | 	mov	arg02, ##@LR__5059
01cf8     21 13 02 F6 | 	mov	arg01, local19
01cfc     64 EC B1 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     24 00 90 AD |  if_e	jmp	#LR__0097
01d08     1F 31 02 F6 | 	mov	local10, local17
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     35 00 00 FF 
01d14     0C E4 05 F1 | 	add	objptr, ##27148
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     18 43 62 FC | 	wrlong	local19, local10
01d20     01 3E 06 F1 | 	add	local17, #1
01d24     35 00 00 FF 
01d28     0C E4 85 F1 | 	sub	objptr, ##27148
01d2c                 | LR__0097
01d2c                 | LR__0098
01d2c     37 00 00 FF 
01d30     1C E4 05 F1 | 	add	objptr, ##28188
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     1A 00 00 FF 
01d3c     E4 E5 05 F1 | 	add	objptr, ##13796
01d40     F2 14 02 FB | 	rdlong	arg02, objptr
01d44     01 14 06 F1 | 	add	arg02, #1
01d48     04 E4 05 F1 | 	add	objptr, #4
01d4c     F2 16 02 FB | 	rdlong	arg03, objptr
01d50     04 E4 85 F1 | 	sub	objptr, #4
01d54     F2 32 02 FB | 	rdlong	local11, objptr
01d58     52 00 00 FF 
01d5c     00 E4 85 F1 | 	sub	objptr, ##41984
01d60     19 35 02 F6 | 	mov	local12, local11
01d64     1A 17 82 F1 | 	sub	arg03, local12
01d68     01 16 86 F1 | 	sub	arg03, #1
01d6c     60 0D B2 FD | 	call	#__system__Mid_S
01d70     FD 42 02 F6 | 	mov	local19, result1
01d74                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d74     81 01 00 FF 
01d78     26 14 06 F6 | 	mov	arg02, ##@LR__5060
01d7c     21 13 02 F6 | 	mov	arg01, local19
01d80     E0 EB B1 FD | 	call	#__system___string_cmp
01d84     00 FA 0D F2 | 	cmp	result1, #0 wz
01d88     24 00 90 AD |  if_e	jmp	#LR__0099
01d8c     1F 31 02 F6 | 	mov	local10, local17
01d90     03 30 66 F0 | 	shl	local10, #3
01d94     35 00 00 FF 
01d98     0C E4 05 F1 | 	add	objptr, ##27148
01d9c     F2 30 02 F1 | 	add	local10, objptr
01da0     18 43 62 FC | 	wrlong	local19, local10
01da4     01 3E 06 F1 | 	add	local17, #1
01da8     35 00 00 FF 
01dac     0C E4 85 F1 | 	sub	objptr, ##27148
01db0                 | LR__0099
01db0     01 20 06 F1 | 	add	local02, #1
01db4     A8 FE 9F FD | 	jmp	#LR__0096
01db8                 | LR__0100
01db8                 | ' 
01db8                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01db8                 | ' 
01db8                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01db8     37 00 00 FF 
01dbc     24 E4 05 F1 | 	add	objptr, ##28196
01dc0     F2 24 0A FB | 	rdlong	local04, objptr wz
01dc4     37 00 00 FF 
01dc8     24 E4 85 F1 | 	sub	objptr, ##28196
01dcc     37 00 00 5F 
01dd0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01dd4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01dd8     37 00 00 5F 
01ddc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01de0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01de4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01de8     35 00 00 FF 
01dec     0C E4 05 F1 | 	add	objptr, ##27148
01df0     F2 32 02 FB | 	rdlong	local11, objptr
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     04 46 B0 FD | 	call	#_isdec
01e04     FD 34 02 F6 | 	mov	local12, result1
01e08     1A 29 22 F6 | 	not	local06, local12
01e0c     00 28 0E F2 | 	cmp	local06, #0 wz
01e10     8C 00 90 AD |  if_e	jmp	#LR__0103
01e14     1F 21 02 F6 | 	mov	local02, local17
01e18     35 00 00 FF 
01e1c     0C E4 05 F1 | 	add	objptr, ##27148
01e20     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01e24                 | LR__0101
01e24     10 27 02 F6 | 	mov	local05, local02
01e28     01 26 86 F1 | 	sub	local05, #1
01e2c     03 26 66 F0 | 	shl	local05, #3
01e30     F2 26 02 F1 | 	add	local05, objptr
01e34     13 25 02 FB | 	rdlong	local04, local05
01e38     10 29 02 F6 | 	mov	local06, local02
01e3c     01 28 86 F1 | 	sub	local06, #1
01e40     03 28 66 F0 | 	shl	local06, #3
01e44     F2 28 02 F1 | 	add	local06, objptr
01e48     04 28 06 F1 | 	add	local06, #4
01e4c     14 23 02 FB | 	rdlong	local03, local06
01e50     10 29 02 F6 | 	mov	local06, local02
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     F2 34 02 F6 | 	mov	local12, objptr
01e5c     F2 28 02 F1 | 	add	local06, objptr
01e60     14 25 62 FC | 	wrlong	local04, local06
01e64     10 33 02 F6 | 	mov	local11, local02
01e68     19 37 02 F6 | 	mov	local13, local11
01e6c     03 36 66 F0 | 	shl	local13, #3
01e70     F2 36 02 F1 | 	add	local13, objptr
01e74     04 36 06 F1 | 	add	local13, #4
01e78     1B 23 62 FC | 	wrlong	local03, local13
01e7c     01 20 86 F1 | 	sub	local02, #1
01e80     01 20 56 F2 | 	cmps	local02, #1 wc
01e84     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01e88                 | LR__0102
01e88     81 01 00 FF 
01e8c     27 24 06 F6 | 	mov	local04, ##@LR__5061
01e90     F2 24 62 FC | 	wrlong	local04, objptr
01e94     35 00 00 FF 
01e98     0C E4 85 F1 | 	sub	objptr, ##27148
01e9c     01 3E 06 F1 | 	add	local17, #1
01ea0                 | LR__0103
01ea0     00 20 06 F6 | 	mov	local02, #0
01ea4                 | ' 
01ea4                 | ' ' 1e : find strings
01ea4                 | ' 
01ea4                 | ' i=0
01ea4                 | ' do
01ea4                 | LR__0104
01ea4                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01ea4     10 27 02 F6 | 	mov	local05, local02
01ea8     03 26 66 F0 | 	shl	local05, #3
01eac     35 00 00 FF 
01eb0     0C E4 05 F1 | 	add	objptr, ##27148
01eb4     F2 26 02 F1 | 	add	local05, objptr
01eb8     13 13 02 FB | 	rdlong	arg01, local05
01ebc     81 01 00 FF 
01ec0     29 14 06 F6 | 	mov	arg02, ##@LR__5062
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     94 EA B1 FD | 	call	#__system___string_cmp
01ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ed4     01 20 06 51 |  if_ne	add	local02, #1
01ed8     20 01 90 5D |  if_ne	jmp	#LR__0109
01edc     10 45 02 F6 | 	mov	local20, local02
01ee0                 | LR__0105
01ee0     10 31 02 F6 | 	mov	local10, local02
01ee4     01 30 06 F1 | 	add	local10, #1
01ee8     03 30 66 F0 | 	shl	local10, #3
01eec     35 00 00 FF 
01ef0     0C E4 05 F1 | 	add	objptr, ##27148
01ef4     F2 30 02 F1 | 	add	local10, objptr
01ef8     18 43 02 FB | 	rdlong	local19, local10
01efc     22 31 02 F6 | 	mov	local10, local20
01f00     03 30 66 F0 | 	shl	local10, #3
01f04     F2 30 02 F1 | 	add	local10, objptr
01f08     22 33 02 F6 | 	mov	local11, local20
01f0c     19 39 02 F6 | 	mov	local14, local11
01f10     03 38 66 F0 | 	shl	local14, #3
01f14     F2 38 02 F1 | 	add	local14, objptr
01f18     1C 13 02 FB | 	rdlong	arg01, local14
01f1c     21 35 02 F6 | 	mov	local12, local19
01f20     1A 15 02 F6 | 	mov	arg02, local12
01f24     35 00 00 FF 
01f28     0C E4 85 F1 | 	sub	objptr, ##27148
01f2c     68 EA B1 FD | 	call	#__system___string_concat
01f30     18 FB 61 FC | 	wrlong	result1, local10
01f34     10 3B 02 F6 | 	mov	local15, local02
01f38     01 3A 06 F1 | 	add	local15, #1
01f3c     1F 47 02 F6 | 	mov	local21, local17
01f40     01 46 06 F1 | 	add	local21, #1
01f44     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
01f48                 | LR__0106
01f48     23 3B 52 F2 | 	cmps	local15, local21 wc
01f4c     70 00 90 3D |  if_ae	jmp	#LR__0108
01f50     1D 27 02 F6 | 	mov	local05, local15
01f54     01 26 06 F1 | 	add	local05, #1
01f58     03 26 66 F0 | 	shl	local05, #3
01f5c     35 00 00 FF 
01f60     0C E4 05 F1 | 	add	objptr, ##27148
01f64     F2 26 02 F1 | 	add	local05, objptr
01f68     13 25 02 FB | 	rdlong	local04, local05
01f6c     1D 29 02 F6 | 	mov	local06, local15
01f70     01 28 06 F1 | 	add	local06, #1
01f74     03 28 66 F0 | 	shl	local06, #3
01f78     F2 28 02 F1 | 	add	local06, objptr
01f7c     04 28 06 F1 | 	add	local06, #4
01f80     14 23 02 FB | 	rdlong	local03, local06
01f84     1D 29 02 F6 | 	mov	local06, local15
01f88     03 28 66 F0 | 	shl	local06, #3
01f8c     F2 34 02 F6 | 	mov	local12, objptr
01f90     F2 28 02 F1 | 	add	local06, objptr
01f94     14 25 62 FC | 	wrlong	local04, local06
01f98     1D 33 02 F6 | 	mov	local11, local15
01f9c     19 37 02 F6 | 	mov	local13, local11
01fa0     03 36 66 F0 | 	shl	local13, #3
01fa4     F2 36 02 F1 | 	add	local13, objptr
01fa8     04 36 06 F1 | 	add	local13, #4
01fac     1B 23 62 FC | 	wrlong	local03, local13
01fb0     01 3A 06 F1 | 	add	local15, #1
01fb4     35 00 00 FF 
01fb8     0C E4 85 F1 | 	sub	objptr, ##27148
01fbc     88 FF 9F FD | 	jmp	#LR__0106
01fc0                 | LR__0107
01fc0                 | LR__0108
01fc0     01 3E 86 F1 | 	sub	local17, #1
01fc4     81 01 00 FF 
01fc8     2B 14 06 F6 | 	mov	arg02, ##@LR__5063
01fcc     21 13 02 F6 | 	mov	arg01, local19
01fd0     90 E9 B1 FD | 	call	#__system___string_cmp
01fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
01fd8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
01fdc     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
01fe0                 | '   if p$<>"""" then k+=1:i+=1
01fe0     81 01 00 FF 
01fe4     2D 14 06 F6 | 	mov	arg02, ##@LR__5064
01fe8     21 13 02 F6 | 	mov	arg01, local19
01fec     74 E9 B1 FD | 	call	#__system___string_cmp
01ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ff4     01 3E 06 51 |  if_ne	add	local17, #1
01ff8     01 20 06 51 |  if_ne	add	local02, #1
01ffc                 | LR__0109
01ffc     1F 21 52 F2 | 	cmps	local02, local17 wc
02000     A0 FE 9F CD |  if_b	jmp	#LR__0104
02004     00 20 06 F6 | 	mov	local02, #0
02008                 | ' 
02008                 | ' ' 1f : concatenate strings if "" detected between
02008                 | '  
02008                 | ' i=0
02008                 | ' do
02008                 | LR__0110
02008                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
02008     10 27 02 F6 | 	mov	local05, local02
0200c     03 26 66 F0 | 	shl	local05, #3
02010     35 00 00 FF 
02014     0C E4 05 F1 | 	add	objptr, ##27148
02018     F2 28 02 F6 | 	mov	local06, objptr
0201c     F2 26 02 F1 | 	add	local05, objptr
02020     13 13 02 FB | 	rdlong	arg01, local05
02024     01 14 06 F6 | 	mov	arg02, #1
02028     35 00 00 FF 
0202c     0C E4 85 F1 | 	sub	objptr, ##27148
02030     0C 0A B2 FD | 	call	#__system__Right_S
02034     FD 12 02 F6 | 	mov	arg01, result1
02038     81 01 00 FF 
0203c     2F 14 06 F6 | 	mov	arg02, ##@LR__5065
02040     20 E9 B1 FD | 	call	#__system___string_cmp
02044     00 FA 0D F2 | 	cmp	result1, #0 wz
02048     7C 01 90 5D |  if_ne	jmp	#LR__0116
0204c     10 29 02 F6 | 	mov	local06, local02
02050     01 28 06 F1 | 	add	local06, #1
02054     03 28 66 F0 | 	shl	local06, #3
02058     35 00 00 FF 
0205c     0C E4 05 F1 | 	add	objptr, ##27148
02060     F2 34 02 F6 | 	mov	local12, objptr
02064     F2 28 02 F1 | 	add	local06, objptr
02068     14 13 02 FB | 	rdlong	arg01, local06
0206c     01 14 06 F6 | 	mov	arg02, #1
02070     35 00 00 FF 
02074     0C E4 85 F1 | 	sub	objptr, ##27148
02078     3C 09 B2 FD | 	call	#__system__Left_S
0207c     FD 12 02 F6 | 	mov	arg01, result1
02080     81 01 00 FF 
02084     31 14 06 F6 | 	mov	arg02, ##@LR__5066
02088     D8 E8 B1 FD | 	call	#__system___string_cmp
0208c     00 FA 0D F2 | 	cmp	result1, #0 wz
02090     34 01 90 5D |  if_ne	jmp	#LR__0116
02094     10 31 02 F6 | 	mov	local10, local02
02098     03 30 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 30 02 F1 | 	add	local10, objptr
020a8     10 39 02 F6 | 	mov	local14, local02
020ac     03 38 66 F0 | 	shl	local14, #3
020b0     F2 38 02 F1 | 	add	local14, objptr
020b4     1C 29 02 FB | 	rdlong	local06, local14
020b8     10 37 02 F6 | 	mov	local13, local02
020bc     01 36 06 F1 | 	add	local13, #1
020c0     03 36 66 F0 | 	shl	local13, #3
020c4     F2 36 02 F1 | 	add	local13, objptr
020c8     1B 35 02 FB | 	rdlong	local12, local13
020cc     10 49 02 F6 | 	mov	local22, local02
020d0     01 48 06 F1 | 	add	local22, #1
020d4     24 4B 02 F6 | 	mov	local23, local22
020d8     03 4A 66 F0 | 	shl	local23, #3
020dc     F2 4C 02 F6 | 	mov	local24, objptr
020e0     F2 4A 02 F1 | 	add	local23, objptr
020e4     25 13 02 FB | 	rdlong	arg01, local23
020e8     35 00 00 FF 
020ec     0C E4 85 F1 | 	sub	objptr, ##27148
020f0     09 2B 02 F6 | 	mov	local07, arg01
020f4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
020f8                 | LR__0111
020f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
020fc     01 2A 06 51 |  if_ne	add	local07, #1
02100     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02104                 | LR__0112
02104     09 2B 82 F1 | 	sub	local07, arg01
02108     15 33 02 F6 | 	mov	local11, local07
0210c     01 32 86 F1 | 	sub	local11, #1
02110     1A 13 02 F6 | 	mov	arg01, local12
02114     19 15 02 F6 | 	mov	arg02, local11
02118     24 09 B2 FD | 	call	#__system__Right_S
0211c     FD 34 02 F6 | 	mov	local12, result1
02120     14 13 02 F6 | 	mov	arg01, local06
02124     1A 15 02 F6 | 	mov	arg02, local12
02128     6C E8 B1 FD | 	call	#__system___string_concat
0212c     FD 28 02 F6 | 	mov	local06, result1
02130     18 29 62 FC | 	wrlong	local06, local10
02134                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02134     10 3B 02 F6 | 	mov	local15, local02
02138     01 3A 06 F1 | 	add	local15, #1
0213c     1F 4F 02 F6 | 	mov	local25, local17
02140     01 4E 06 F1 | 	add	local25, #1
02144     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02148                 | LR__0113
02148     27 3B 52 F2 | 	cmps	local15, local25 wc
0214c     70 00 90 3D |  if_ae	jmp	#LR__0115
02150     1D 27 02 F6 | 	mov	local05, local15
02154     01 26 06 F1 | 	add	local05, #1
02158     03 26 66 F0 | 	shl	local05, #3
0215c     35 00 00 FF 
02160     0C E4 05 F1 | 	add	objptr, ##27148
02164     F2 26 02 F1 | 	add	local05, objptr
02168     13 25 02 FB | 	rdlong	local04, local05
0216c     1D 29 02 F6 | 	mov	local06, local15
02170     01 28 06 F1 | 	add	local06, #1
02174     03 28 66 F0 | 	shl	local06, #3
02178     F2 28 02 F1 | 	add	local06, objptr
0217c     04 28 06 F1 | 	add	local06, #4
02180     14 23 02 FB | 	rdlong	local03, local06
02184     1D 29 02 F6 | 	mov	local06, local15
02188     03 28 66 F0 | 	shl	local06, #3
0218c     F2 34 02 F6 | 	mov	local12, objptr
02190     F2 28 02 F1 | 	add	local06, objptr
02194     14 25 62 FC | 	wrlong	local04, local06
02198     1D 33 02 F6 | 	mov	local11, local15
0219c     19 37 02 F6 | 	mov	local13, local11
021a0     03 36 66 F0 | 	shl	local13, #3
021a4     F2 36 02 F1 | 	add	local13, objptr
021a8     04 36 06 F1 | 	add	local13, #4
021ac     1B 23 62 FC | 	wrlong	local03, local13
021b0     01 3A 06 F1 | 	add	local15, #1
021b4     35 00 00 FF 
021b8     0C E4 85 F1 | 	sub	objptr, ##27148
021bc     88 FF 9F FD | 	jmp	#LR__0113
021c0                 | LR__0114
021c0                 | LR__0115
021c0     01 20 86 F1 | 	sub	local02, #1
021c4     01 3E 86 F1 | 	sub	local17, #1
021c8                 | LR__0116
021c8     01 20 06 F1 | 	add	local02, #1
021cc     1F 21 52 F2 | 	cmps	local02, local17 wc
021d0     34 FE 9F CD |  if_b	jmp	#LR__0110
021d4     00 20 06 F6 | 	mov	local02, #0
021d8                 | '  
021d8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
021d8                 | '  
021d8                 | ' i=0 
021d8                 | ' do
021d8                 | LR__0117
021d8     10 31 02 F6 | 	mov	local10, local02
021dc     03 30 66 F0 | 	shl	local10, #3
021e0     35 00 00 FF 
021e4     0C E4 05 F1 | 	add	objptr, ##27148
021e8     F2 30 02 F1 | 	add	local10, objptr
021ec     18 51 02 FB | 	rdlong	local26, local10
021f0     10 31 02 F6 | 	mov	local10, local02
021f4     01 30 06 F1 | 	add	local10, #1
021f8     03 30 66 F0 | 	shl	local10, #3
021fc     F2 30 02 F1 | 	add	local10, objptr
02200     18 53 02 FB | 	rdlong	local27, local10
02204                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02204                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02204     81 01 00 FF 
02208     33 14 06 F6 | 	mov	arg02, ##@LR__5067
0220c     28 13 02 F6 | 	mov	arg01, local26
02210     35 00 00 FF 
02214     0C E4 85 F1 | 	sub	objptr, ##27148
02218     48 E7 B1 FD | 	call	#__system___string_cmp
0221c     00 FA 0D F2 | 	cmp	result1, #0 wz
02220     A8 00 90 AD |  if_e	jmp	#LR__0118
02224     81 01 00 FF 
02228     35 14 06 F6 | 	mov	arg02, ##@LR__5068
0222c     28 13 02 F6 | 	mov	arg01, local26
02230     30 E7 B1 FD | 	call	#__system___string_cmp
02234     FD 22 0A F6 | 	mov	local03, result1 wz
02238     90 00 90 AD |  if_e	jmp	#LR__0118
0223c     81 01 00 FF 
02240     37 28 06 F6 | 	mov	local06, ##@LR__5069
02244     28 13 02 F6 | 	mov	arg01, local26
02248     14 15 02 F6 | 	mov	arg02, local06
0224c     14 E7 B1 FD | 	call	#__system___string_cmp
02250     00 FA 0D F2 | 	cmp	result1, #0 wz
02254     74 00 90 AD |  if_e	jmp	#LR__0118
02258     81 01 00 FF 
0225c     39 34 06 F6 | 	mov	local12, ##@LR__5070
02260     28 13 02 F6 | 	mov	arg01, local26
02264     1A 15 02 F6 | 	mov	arg02, local12
02268     F8 E6 B1 FD | 	call	#__system___string_cmp
0226c     00 FA 0D F2 | 	cmp	result1, #0 wz
02270     58 00 90 AD |  if_e	jmp	#LR__0118
02274     81 01 00 FF 
02278     3B 32 06 F6 | 	mov	local11, ##@LR__5071
0227c     19 35 02 F6 | 	mov	local12, local11
02280     28 13 02 F6 | 	mov	arg01, local26
02284     1A 15 02 F6 | 	mov	arg02, local12
02288     D8 E6 B1 FD | 	call	#__system___string_cmp
0228c     FD 28 0A F6 | 	mov	local06, result1 wz
02290     38 00 90 AD |  if_e	jmp	#LR__0118
02294     81 01 00 FF 
02298     3D 32 06 F6 | 	mov	local11, ##@LR__5072
0229c     28 13 02 F6 | 	mov	arg01, local26
022a0     19 15 02 F6 | 	mov	arg02, local11
022a4     BC E6 B1 FD | 	call	#__system___string_cmp
022a8     FD 34 0A F6 | 	mov	local12, result1 wz
022ac     1C 00 90 AD |  if_e	jmp	#LR__0118
022b0     81 01 00 FF 
022b4     3F 38 06 F6 | 	mov	local14, ##@LR__5073
022b8     28 13 02 F6 | 	mov	arg01, local26
022bc     1C 15 02 F6 | 	mov	arg02, local14
022c0     A0 E6 B1 FD | 	call	#__system___string_cmp
022c4     FD 32 0A F6 | 	mov	local11, result1 wz
022c8     20 00 90 5D |  if_ne	jmp	#LR__0119
022cc                 | LR__0118
022cc     81 01 00 FF 
022d0     41 54 06 F6 | 	mov	local28, ##@LR__5074
022d4     2A 37 02 F6 | 	mov	local13, local28
022d8     29 13 02 F6 | 	mov	arg01, local27
022dc     1B 15 02 F6 | 	mov	arg02, local13
022e0     80 E6 B1 FD | 	call	#__system___string_cmp
022e4     FD 38 0A F6 | 	mov	local14, result1 wz
022e8     B8 00 90 AD |  if_e	jmp	#LR__0122
022ec                 | LR__0119
022ec     81 01 00 FF 
022f0     43 54 06 F6 | 	mov	local28, ##@LR__5075
022f4     28 13 02 F6 | 	mov	arg01, local26
022f8     2A 15 02 F6 | 	mov	arg02, local28
022fc     64 E6 B1 FD | 	call	#__system___string_cmp
02300     FD 36 0A F6 | 	mov	local13, result1 wz
02304     20 00 90 5D |  if_ne	jmp	#LR__0120
02308     81 01 00 FF 
0230c     45 4A 06 F6 | 	mov	local23, ##@LR__5076
02310     25 49 02 F6 | 	mov	local22, local23
02314     29 13 02 F6 | 	mov	arg01, local27
02318     24 15 02 F6 | 	mov	arg02, local22
0231c     44 E6 B1 FD | 	call	#__system___string_cmp
02320     FD 54 0A F6 | 	mov	local28, result1 wz
02324     7C 00 90 AD |  if_e	jmp	#LR__0122
02328                 | LR__0120
02328     81 01 00 FF 
0232c     47 4A 06 F6 | 	mov	local23, ##@LR__5077
02330     28 13 02 F6 | 	mov	arg01, local26
02334     25 15 02 F6 | 	mov	arg02, local23
02338     28 E6 B1 FD | 	call	#__system___string_cmp
0233c     FD 48 0A F6 | 	mov	local22, result1 wz
02340     20 00 90 5D |  if_ne	jmp	#LR__0121
02344     81 01 00 FF 
02348     49 56 06 F6 | 	mov	local29, ##@LR__5078
0234c     2B 4D 02 F6 | 	mov	local24, local29
02350     29 13 02 F6 | 	mov	arg01, local27
02354     26 15 02 F6 | 	mov	arg02, local24
02358     08 E6 B1 FD | 	call	#__system___string_cmp
0235c     FD 4A 0A F6 | 	mov	local23, result1 wz
02360     40 00 90 AD |  if_e	jmp	#LR__0122
02364                 | LR__0121
02364     81 01 00 FF 
02368     4B 58 06 F6 | 	mov	local30, ##@LR__5079
0236c     2C 57 02 F6 | 	mov	local29, local30
02370     28 13 02 F6 | 	mov	arg01, local26
02374     2B 15 02 F6 | 	mov	arg02, local29
02378     E8 E5 B1 FD | 	call	#__system___string_cmp
0237c     FD 4C 0A F6 | 	mov	local24, result1 wz
02380     F0 00 90 5D |  if_ne	jmp	#LR__0126
02384     81 01 00 FF 
02388     4D 5A 06 F6 | 	mov	local31, ##@LR__5080
0238c     2D 59 02 F6 | 	mov	local30, local31
02390     29 13 02 F6 | 	mov	arg01, local27
02394     2C 15 02 F6 | 	mov	arg02, local30
02398     C8 E5 B1 FD | 	call	#__system___string_cmp
0239c     FD 56 0A F6 | 	mov	local29, result1 wz
023a0     D0 00 90 5D |  if_ne	jmp	#LR__0126
023a4                 | LR__0122
023a4     10 31 02 F6 | 	mov	local10, local02
023a8     03 30 66 F0 | 	shl	local10, #3
023ac     35 00 00 FF 
023b0     0C E4 05 F1 | 	add	objptr, ##27148
023b4     F2 30 02 F1 | 	add	local10, objptr
023b8     29 35 02 F6 | 	mov	local12, local27
023bc     28 13 02 F6 | 	mov	arg01, local26
023c0     1A 15 02 F6 | 	mov	arg02, local12
023c4     35 00 00 FF 
023c8     0C E4 85 F1 | 	sub	objptr, ##27148
023cc     C8 E5 B1 FD | 	call	#__system___string_concat
023d0     18 FB 61 FC | 	wrlong	result1, local10
023d4                 | '     lparts(i).part$=s1$+s2$
023d4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
023d4     10 3B 02 F6 | 	mov	local15, local02
023d8     01 3A 06 F1 | 	add	local15, #1
023dc     1F 5D 02 F6 | 	mov	local32, local17
023e0     01 5C 06 F1 | 	add	local32, #1
023e4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
023e8                 | LR__0123
023e8     2E 3B 52 F2 | 	cmps	local15, local32 wc
023ec     7C 00 90 3D |  if_ae	jmp	#LR__0125
023f0     1D 27 02 F6 | 	mov	local05, local15
023f4     01 26 06 F1 | 	add	local05, #1
023f8     03 26 66 F0 | 	shl	local05, #3
023fc     35 00 00 FF 
02400     0C E4 05 F1 | 	add	objptr, ##27148
02404     F2 26 02 F1 | 	add	local05, objptr
02408     13 25 02 FB | 	rdlong	local04, local05
0240c     1D 29 02 F6 | 	mov	local06, local15
02410     01 28 06 F1 | 	add	local06, #1
02414     03 28 66 F0 | 	shl	local06, #3
02418     F2 28 02 F1 | 	add	local06, objptr
0241c     04 28 06 F1 | 	add	local06, #4
02420     14 23 02 FB | 	rdlong	local03, local06
02424     1D 29 02 F6 | 	mov	local06, local15
02428     03 28 66 F0 | 	shl	local06, #3
0242c     F2 34 02 F6 | 	mov	local12, objptr
02430     F2 28 02 F1 | 	add	local06, objptr
02434     14 25 62 FC | 	wrlong	local04, local06
02438     1D 33 02 F6 | 	mov	local11, local15
0243c     19 39 02 F6 | 	mov	local14, local11
02440     1C 37 02 F6 | 	mov	local13, local14
02444     03 36 66 F0 | 	shl	local13, #3
02448     F2 54 02 F6 | 	mov	local28, objptr
0244c     F2 36 02 F1 | 	add	local13, objptr
02450     04 36 06 F1 | 	add	local13, #4
02454     1B 23 62 FC | 	wrlong	local03, local13
02458     04 36 86 F1 | 	sub	local13, #4
0245c     01 3A 06 F1 | 	add	local15, #1
02460     35 00 00 FF 
02464     0C E4 85 F1 | 	sub	objptr, ##27148
02468     7C FF 9F FD | 	jmp	#LR__0123
0246c                 | LR__0124
0246c                 | LR__0125
0246c     01 20 86 F1 | 	sub	local02, #1
02470     01 3E 86 F1 | 	sub	local17, #1
02474                 | LR__0126
02474     01 20 06 F1 | 	add	local02, #1
02478     1F 21 52 F2 | 	cmps	local02, local17 wc
0247c     58 FD 9F CD |  if_b	jmp	#LR__0117
02480                 | '  
02480                 | ' ' 1h : now remove parts that are spaces
02480                 | ' 
02480                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02480     00 20 06 F6 | 	mov	local02, #0
02484     1F 5F 02 F6 | 	mov	local33, local17
02488     01 5E 06 F1 | 	add	local33, #1
0248c                 | LR__0127
0248c     2F 21 52 F2 | 	cmps	local02, local33 wc
02490     50 00 90 3D |  if_ae	jmp	#LR__0128
02494     10 31 02 F6 | 	mov	local10, local02
02498     03 30 66 F0 | 	shl	local10, #3
0249c     35 00 00 FF 
024a0     0C E4 05 F1 | 	add	objptr, ##27148
024a4     F2 30 02 F1 | 	add	local10, objptr
024a8     10 35 02 F6 | 	mov	local12, local02
024ac     1A 33 02 F6 | 	mov	local11, local12
024b0     19 39 02 F6 | 	mov	local14, local11
024b4     03 38 66 F0 | 	shl	local14, #3
024b8     F2 36 02 F6 | 	mov	local13, objptr
024bc     F2 38 02 F1 | 	add	local14, objptr
024c0     1C 13 02 FB | 	rdlong	arg01, local14
024c4     35 00 00 FF 
024c8     0C E4 85 F1 | 	sub	objptr, ##27148
024cc     78 09 B2 FD | 	call	#__system__RTrim_S
024d0     FD 12 02 F6 | 	mov	arg01, result1
024d4     B0 08 B2 FD | 	call	#__system__LTrim_S
024d8     18 FB 61 FC | 	wrlong	result1, local10
024dc     01 20 06 F1 | 	add	local02, #1
024e0     A8 FF 9F FD | 	jmp	#LR__0127
024e4                 | LR__0128
024e4     00 20 06 F6 | 	mov	local02, #0
024e8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
024ec                 | ' i=0
024ec                 | ' do 
024ec                 | LR__0129
024ec                 | '   if len(lparts(i).part$)=0 then 
024ec     10 27 02 F6 | 	mov	local05, local02
024f0     03 26 66 F0 | 	shl	local05, #3
024f4     35 00 00 FF 
024f8     0C E4 05 F1 | 	add	objptr, ##27148
024fc     F2 26 02 F1 | 	add	local05, objptr
02500     13 13 02 FB | 	rdlong	arg01, local05
02504     35 00 00 FF 
02508     0C E4 85 F1 | 	sub	objptr, ##27148
0250c     09 2B 02 F6 | 	mov	local07, arg01
02510                 | LR__0130
02510     15 FB C9 FA | 	rdbyte	result1, local07 wz
02514     01 2A 06 51 |  if_ne	add	local07, #1
02518     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
0251c     09 2B 8A F1 | 	sub	local07, arg01 wz
02520     C4 00 90 5D |  if_ne	jmp	#LR__0134
02524                 | '     if i=k-1 then k-=1  :  exit
02524     1F 25 02 F6 | 	mov	local04, local17
02528     01 24 86 F1 | 	sub	local04, #1
0252c     12 21 0A F2 | 	cmp	local02, local04 wz
02530     01 3E 86 A1 |  if_e	sub	local17, #1
02534     C4 00 90 AD |  if_e	jmp	#LR__0136
02538                 | '     if i<k-1 then 
02538     1F 25 02 F6 | 	mov	local04, local17
0253c     01 24 86 F1 | 	sub	local04, #1
02540     12 21 52 F2 | 	cmps	local02, local04 wc
02544     A0 00 90 3D |  if_ae	jmp	#LR__0133
02548                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02548     10 3B 02 F6 | 	mov	local15, local02
0254c     1F 61 02 F6 | 	mov	local34, local17
02550     01 60 86 F1 | 	sub	local34, #1
02554                 | LR__0131
02554     30 3B 52 F2 | 	cmps	local15, local34 wc
02558     80 00 90 3D |  if_ae	jmp	#LR__0132
0255c     1D 27 02 F6 | 	mov	local05, local15
02560     01 26 06 F1 | 	add	local05, #1
02564     03 26 66 F0 | 	shl	local05, #3
02568     35 00 00 FF 
0256c     0C E4 05 F1 | 	add	objptr, ##27148
02570     F2 26 02 F1 | 	add	local05, objptr
02574     13 25 02 FB | 	rdlong	local04, local05
02578     1D 29 02 F6 | 	mov	local06, local15
0257c     01 28 06 F1 | 	add	local06, #1
02580     03 28 66 F0 | 	shl	local06, #3
02584     F2 28 02 F1 | 	add	local06, objptr
02588     04 28 06 F1 | 	add	local06, #4
0258c     14 23 02 FB | 	rdlong	local03, local06
02590     1D 31 02 F6 | 	mov	local10, local15
02594     18 29 02 F6 | 	mov	local06, local10
02598     03 28 66 F0 | 	shl	local06, #3
0259c     F2 34 02 F6 | 	mov	local12, objptr
025a0     F2 28 02 F1 | 	add	local06, objptr
025a4     14 25 62 FC | 	wrlong	local04, local06
025a8     1D 33 02 F6 | 	mov	local11, local15
025ac     19 39 02 F6 | 	mov	local14, local11
025b0     1C 37 02 F6 | 	mov	local13, local14
025b4     03 36 66 F0 | 	shl	local13, #3
025b8     F2 54 02 F6 | 	mov	local28, objptr
025bc     F2 36 02 F1 | 	add	local13, objptr
025c0     04 36 06 F1 | 	add	local13, #4
025c4     1B 23 62 FC | 	wrlong	local03, local13
025c8     04 36 86 F1 | 	sub	local13, #4
025cc     01 3A 06 F1 | 	add	local15, #1
025d0     35 00 00 FF 
025d4     0C E4 85 F1 | 	sub	objptr, ##27148
025d8     78 FF 9F FD | 	jmp	#LR__0131
025dc                 | LR__0132
025dc     01 3E 86 F1 | 	sub	local17, #1
025e0                 | '       if i>0 then i-=1 
025e0     01 20 56 F2 | 	cmps	local02, #1 wc
025e4     01 20 86 31 |  if_ae	sub	local02, #1
025e8                 | LR__0133
025e8                 | LR__0134
025e8     01 20 06 F1 | 	add	local02, #1
025ec     1F 25 02 F6 | 	mov	local04, local17
025f0     01 24 86 F1 | 	sub	local04, #1
025f4     12 21 5A F2 | 	cmps	local02, local04 wcz
025f8     F0 FE 9F ED |  if_be	jmp	#LR__0129
025fc                 | LR__0135
025fc                 | LR__0136
025fc                 | ' 
025fc                 | ' ' 1i: lowercase all that is not a string
025fc                 | ' 
025fc                 | ' for j=0 to k-1
025fc     00 3A 06 F6 | 	mov	local15, #0
02600     1F 63 02 F6 | 	mov	local35, local17
02604                 | LR__0137
02604     31 3B 52 F2 | 	cmps	local15, local35 wc
02608     C8 00 90 3D |  if_ae	jmp	#LR__0140
0260c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
0260c     1D 27 02 F6 | 	mov	local05, local15
02610     03 26 66 F0 | 	shl	local05, #3
02614     35 00 00 FF 
02618     0C E4 05 F1 | 	add	objptr, ##27148
0261c     F2 26 02 F1 | 	add	local05, objptr
02620     13 13 02 FB | 	rdlong	arg01, local05
02624     01 14 06 F6 | 	mov	arg02, #1
02628     35 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##27148
02630     84 03 B2 FD | 	call	#__system__Left_S
02634     FD 12 02 F6 | 	mov	arg01, result1
02638     81 01 00 FF 
0263c     4F 14 06 F6 | 	mov	arg02, ##@LR__5081
02640     20 E3 B1 FD | 	call	#__system___string_cmp
02644     00 FA 0D F2 | 	cmp	result1, #0 wz
02648     44 00 90 5D |  if_ne	jmp	#LR__0138
0264c     1D 29 02 F6 | 	mov	local06, local15
02650     03 28 66 F0 | 	shl	local06, #3
02654     35 00 00 FF 
02658     0C E4 05 F1 | 	add	objptr, ##27148
0265c     F2 34 02 F6 | 	mov	local12, objptr
02660     F2 28 02 F1 | 	add	local06, objptr
02664     14 13 02 FB | 	rdlong	arg01, local06
02668     01 14 06 F6 | 	mov	arg02, #1
0266c     35 00 00 FF 
02670     0C E4 85 F1 | 	sub	objptr, ##27148
02674     C8 03 B2 FD | 	call	#__system__Right_S
02678     FD 12 02 F6 | 	mov	arg01, result1
0267c     81 01 00 FF 
02680     51 14 06 F6 | 	mov	arg02, ##@LR__5082
02684     DC E2 B1 FD | 	call	#__system___string_cmp
02688     00 FA 0D F2 | 	cmp	result1, #0 wz
0268c     3C 00 90 AD |  if_e	jmp	#LR__0139
02690                 | LR__0138
02690     1D 31 02 F6 | 	mov	local10, local15
02694     03 30 66 F0 | 	shl	local10, #3
02698     35 00 00 FF 
0269c     0C E4 05 F1 | 	add	objptr, ##27148
026a0     F2 30 02 F1 | 	add	local10, objptr
026a4     1D 33 02 F6 | 	mov	local11, local15
026a8     19 39 02 F6 | 	mov	local14, local11
026ac     03 38 66 F0 | 	shl	local14, #3
026b0     F2 36 02 F6 | 	mov	local13, objptr
026b4     F2 38 02 F1 | 	add	local14, objptr
026b8     1C 13 02 FB | 	rdlong	arg01, local14
026bc     35 00 00 FF 
026c0     0C E4 85 F1 | 	sub	objptr, ##27148
026c4     00 06 B2 FD | 	call	#__system__LCase_S
026c8     18 FB 61 FC | 	wrlong	result1, local10
026cc                 | LR__0139
026cc     01 3A 06 F1 | 	add	local15, #1
026d0     30 FF 9F FD | 	jmp	#LR__0137
026d4                 | LR__0140
026d4                 | ' 
026d4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
026d4                 | ' 
026d4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
026d4     00 20 06 F6 | 	mov	local02, #0
026d8     1F 65 02 F6 | 	mov	local36, local17
026dc     01 64 06 F1 | 	add	local36, #1
026e0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
026e4                 | LR__0141
026e4     32 21 52 F2 | 	cmps	local02, local36 wc
026e8     30 00 90 3D |  if_ae	jmp	#LR__0143
026ec     10 31 02 F6 | 	mov	local10, local02
026f0     03 30 66 F0 | 	shl	local10, #3
026f4     35 00 00 FF 
026f8     0C E4 05 F1 | 	add	objptr, ##27148
026fc     F2 30 02 F1 | 	add	local10, objptr
02700     04 30 06 F1 | 	add	local10, #4
02704     FF FF FF FF 
02708     18 FF 6B FC | 	wrlong	##-1, local10
0270c     01 20 06 F1 | 	add	local02, #1
02710     35 00 00 FF 
02714     0C E4 85 F1 | 	sub	objptr, ##27148
02718     C8 FF 9F FD | 	jmp	#LR__0141
0271c                 | LR__0142
0271c                 | LR__0143
0271c                 | ' 
0271c                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
0271c     35 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##27148
02724     F2 12 02 FB | 	rdlong	arg01, objptr
02728     35 00 00 FF 
0272c     0C E4 85 F1 | 	sub	objptr, ##27148
02730     D4 3C B0 FD | 	call	#_isdec
02734     00 FA 0D F2 | 	cmp	result1, #0 wz
02738     01 66 06 56 |  if_ne	mov	local37, #1
0273c     00 66 06 A6 |  if_e	mov	local37, #0
02740                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02740     35 00 00 FF 
02744     0C E4 05 F1 | 	add	objptr, ##27148
02748     F2 12 02 FB | 	rdlong	arg01, objptr
0274c     35 00 00 FF 
02750     0C E4 85 F1 | 	sub	objptr, ##27148
02754     81 01 00 FF 
02758     53 14 06 F6 | 	mov	arg02, ##@LR__5083
0275c     04 E2 B1 FD | 	call	#__system___string_cmp
02760     00 FA 0D F2 | 	cmp	result1, #0 wz
02764     01 66 06 A6 |  if_e	mov	local37, #1
02768     00 20 06 F6 | 	mov	local02, #0
0276c                 | ' i=0 : do 
0276c                 | LR__0144
0276c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0276c     10 27 02 F6 | 	mov	local05, local02
02770     03 26 66 F0 | 	shl	local05, #3
02774     35 00 00 FF 
02778     0C E4 05 F1 | 	add	objptr, ##27148
0277c     F2 26 02 F1 | 	add	local05, objptr
02780     13 13 02 FB | 	rdlong	arg01, local05
02784     81 01 00 FF 
02788     58 14 06 F6 | 	mov	arg02, ##@LR__5084
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     CC E1 B1 FD | 	call	#__system___string_cmp
02798     00 FA 0D F2 | 	cmp	result1, #0 wz
0279c     0C 00 90 AD |  if_e	jmp	#LR__0145
027a0     01 20 06 F1 | 	add	local02, #1
027a4     1F 21 5A F2 | 	cmps	local02, local17 wcz
027a8     C0 FF 9F ED |  if_be	jmp	#LR__0144
027ac                 | LR__0145
027ac                 | ' if i<k then addptr=i+1	 							' then found
027ac     1F 21 52 F2 | 	cmps	local02, local17 wc
027b0     10 67 02 C6 |  if_b	mov	local37, local02
027b4     01 66 06 C1 |  if_b	add	local37, #1
027b8     35 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##27148
027c0     33 29 02 F6 | 	mov	local06, local37
027c4     03 28 66 F0 | 	shl	local06, #3
027c8     F2 34 02 F6 | 	mov	local12, objptr
027cc     F2 28 02 F1 | 	add	local06, objptr
027d0     14 15 02 FB | 	rdlong	arg02, local06
027d4     81 01 00 FF 
027d8     5D 16 06 F6 | 	mov	arg03, ##@LR__5085
027dc     01 12 06 F6 | 	mov	arg01, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     14 07 B2 FD | 	call	#__system__Instr
027ec     FD 68 02 F6 | 	mov	local38, result1
027f0                 | ' lp$=lparts(addptr).part$ 
027f0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
027f0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
027f0     01 68 56 F2 | 	cmps	local38, #1 wc
027f4     68 01 90 CD |  if_b	jmp	#LR__0152
027f8     33 27 02 F6 | 	mov	local05, local37
027fc     03 26 66 F0 | 	shl	local05, #3
02800     35 00 00 FF 
02804     0C E4 05 F1 | 	add	objptr, ##27148
02808     F2 26 02 F1 | 	add	local05, objptr
0280c     13 13 02 FB | 	rdlong	arg01, local05
02810     35 00 00 FF 
02814     0C E4 85 F1 | 	sub	objptr, ##27148
02818     09 2B 02 F6 | 	mov	local07, arg01
0281c     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02820                 | LR__0146
02820     15 FB C9 FA | 	rdbyte	result1, local07 wz
02824     01 2A 06 51 |  if_ne	add	local07, #1
02828     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
0282c                 | LR__0147
0282c     09 2B 82 F1 | 	sub	local07, arg01
02830     15 69 52 F2 | 	cmps	local38, local07 wc
02834     28 01 90 3D |  if_ae	jmp	#LR__0152
02838     01 3E 06 F1 | 	add	local17, #1
0283c                 | '   k+=1
0283c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0283c     1F 21 02 F6 | 	mov	local02, local17
02840     33 6B 02 F6 | 	mov	local39, local37
02844     01 6A 06 F1 | 	add	local39, #1
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02854                 | LR__0148
02854     10 27 02 F6 | 	mov	local05, local02
02858     01 26 86 F1 | 	sub	local05, #1
0285c     03 26 66 F0 | 	shl	local05, #3
02860     F2 26 02 F1 | 	add	local05, objptr
02864     13 25 02 FB | 	rdlong	local04, local05
02868     10 29 02 F6 | 	mov	local06, local02
0286c     01 28 86 F1 | 	sub	local06, #1
02870     03 28 66 F0 | 	shl	local06, #3
02874     F2 28 02 F1 | 	add	local06, objptr
02878     04 28 06 F1 | 	add	local06, #4
0287c     14 23 02 FB | 	rdlong	local03, local06
02880     10 29 02 F6 | 	mov	local06, local02
02884     03 28 66 F0 | 	shl	local06, #3
02888     F2 28 02 F1 | 	add	local06, objptr
0288c     14 25 62 FC | 	wrlong	local04, local06
02890     10 37 02 F6 | 	mov	local13, local02
02894     03 36 66 F0 | 	shl	local13, #3
02898     F2 36 02 F1 | 	add	local13, objptr
0289c     04 36 06 F1 | 	add	local13, #4
028a0     1B 23 62 FC | 	wrlong	local03, local13
028a4     01 20 86 F1 | 	sub	local02, #1
028a8     35 21 52 F2 | 	cmps	local02, local39 wc
028ac     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
028b0                 | LR__0149
028b0     33 31 02 F6 | 	mov	local10, local37
028b4     01 30 06 F1 | 	add	local10, #1
028b8     03 30 66 F0 | 	shl	local10, #3
028bc     F2 30 02 F1 | 	add	local10, objptr
028c0     33 39 02 F6 | 	mov	local14, local37
028c4     03 38 66 F0 | 	shl	local14, #3
028c8     F2 38 02 F1 | 	add	local14, objptr
028cc     1C 29 02 FB | 	rdlong	local06, local14
028d0     33 55 02 F6 | 	mov	local28, local37
028d4     2A 49 02 F6 | 	mov	local22, local28
028d8     03 48 66 F0 | 	shl	local22, #3
028dc     F2 4A 02 F6 | 	mov	local23, objptr
028e0     F2 48 02 F1 | 	add	local22, objptr
028e4     24 13 02 FB | 	rdlong	arg01, local22
028e8     35 00 00 FF 
028ec     0C E4 85 F1 | 	sub	objptr, ##27148
028f0     09 2B 02 F6 | 	mov	local07, arg01
028f4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
028f8                 | LR__0150
028f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
028fc     01 2A 06 51 |  if_ne	add	local07, #1
02900     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02904                 | LR__0151
02904     09 2B 82 F1 | 	sub	local07, arg01
02908     15 15 02 F6 | 	mov	arg02, local07
0290c     34 15 82 F1 | 	sub	arg02, local38
02910     14 13 02 F6 | 	mov	arg01, local06
02914     28 01 B2 FD | 	call	#__system__Right_S
02918     18 FB 61 FC | 	wrlong	result1, local10
0291c     33 31 02 F6 | 	mov	local10, local37
02920     03 30 66 F0 | 	shl	local10, #3
02924     35 00 00 FF 
02928     0C E4 05 F1 | 	add	objptr, ##27148
0292c     F2 30 02 F1 | 	add	local10, objptr
02930     33 33 02 F6 | 	mov	local11, local37
02934     19 39 02 F6 | 	mov	local14, local11
02938     03 38 66 F0 | 	shl	local14, #3
0293c     F2 36 02 F6 | 	mov	local13, objptr
02940     F2 38 02 F1 | 	add	local14, objptr
02944     1C 13 02 FB | 	rdlong	arg01, local14
02948     34 35 02 F6 | 	mov	local12, local38
0294c     1A 15 02 F6 | 	mov	arg02, local12
02950     35 00 00 FF 
02954     0C E4 85 F1 | 	sub	objptr, ##27148
02958     5C 00 B2 FD | 	call	#__system__Left_S
0295c     18 FB 61 FC | 	wrlong	result1, local10
02960                 | LR__0152
02960                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02960     33 27 02 F6 | 	mov	local05, local37
02964     03 26 66 F0 | 	shl	local05, #3
02968     35 00 00 FF 
0296c     0C E4 05 F1 | 	add	objptr, ##27148
02970     F2 26 02 F1 | 	add	local05, objptr
02974     13 13 02 FB | 	rdlong	arg01, local05
02978     01 14 06 F6 | 	mov	arg02, #1
0297c     35 00 00 FF 
02980     0C E4 85 F1 | 	sub	objptr, ##27148
02984     30 00 B2 FD | 	call	#__system__Left_S
02988     FD 12 02 F6 | 	mov	arg01, result1
0298c     81 01 00 FF 
02990     5F 14 06 F6 | 	mov	arg02, ##@LR__5086
02994     CC DF B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     60 01 90 5D |  if_ne	jmp	#LR__0159
029a0     33 29 02 F6 | 	mov	local06, local37
029a4     03 28 66 F0 | 	shl	local06, #3
029a8     35 00 00 FF 
029ac     0C E4 05 F1 | 	add	objptr, ##27148
029b0     F2 34 02 F6 | 	mov	local12, objptr
029b4     F2 28 02 F1 | 	add	local06, objptr
029b8     14 13 02 FB | 	rdlong	arg01, local06
029bc     35 00 00 FF 
029c0     0C E4 85 F1 | 	sub	objptr, ##27148
029c4     09 2B 02 F6 | 	mov	local07, arg01
029c8     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
029cc                 | LR__0153
029cc     15 FB C9 FA | 	rdbyte	result1, local07 wz
029d0     01 2A 06 51 |  if_ne	add	local07, #1
029d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
029d8                 | LR__0154
029d8     09 2B 82 F1 | 	sub	local07, arg01
029dc     02 2A 56 F2 | 	cmps	local07, #2 wc
029e0     1C 01 90 CD |  if_b	jmp	#LR__0159
029e4     01 3E 06 F1 | 	add	local17, #1
029e8                 | '   k+=1
029e8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029e8     1F 21 02 F6 | 	mov	local02, local17
029ec     33 6D 02 F6 | 	mov	local40, local37
029f0     01 6C 06 F1 | 	add	local40, #1
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02a00                 | LR__0155
02a00     10 27 02 F6 | 	mov	local05, local02
02a04     01 26 86 F1 | 	sub	local05, #1
02a08     03 26 66 F0 | 	shl	local05, #3
02a0c     F2 26 02 F1 | 	add	local05, objptr
02a10     13 25 02 FB | 	rdlong	local04, local05
02a14     10 29 02 F6 | 	mov	local06, local02
02a18     01 28 86 F1 | 	sub	local06, #1
02a1c     03 28 66 F0 | 	shl	local06, #3
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     04 28 06 F1 | 	add	local06, #4
02a28     14 23 02 FB | 	rdlong	local03, local06
02a2c     10 29 02 F6 | 	mov	local06, local02
02a30     03 28 66 F0 | 	shl	local06, #3
02a34     F2 28 02 F1 | 	add	local06, objptr
02a38     14 25 62 FC | 	wrlong	local04, local06
02a3c     10 37 02 F6 | 	mov	local13, local02
02a40     03 36 66 F0 | 	shl	local13, #3
02a44     F2 36 02 F1 | 	add	local13, objptr
02a48     04 36 06 F1 | 	add	local13, #4
02a4c     1B 23 62 FC | 	wrlong	local03, local13
02a50     01 20 86 F1 | 	sub	local02, #1
02a54     36 21 52 F2 | 	cmps	local02, local40 wc
02a58     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02a5c                 | LR__0156
02a5c     33 31 02 F6 | 	mov	local10, local37
02a60     01 30 06 F1 | 	add	local10, #1
02a64     03 30 66 F0 | 	shl	local10, #3
02a68     F2 30 02 F1 | 	add	local10, objptr
02a6c     33 39 02 F6 | 	mov	local14, local37
02a70     03 38 66 F0 | 	shl	local14, #3
02a74     F2 38 02 F1 | 	add	local14, objptr
02a78     1C 29 02 FB | 	rdlong	local06, local14
02a7c     33 37 02 F6 | 	mov	local13, local37
02a80     1B 55 02 F6 | 	mov	local28, local13
02a84     2A 49 02 F6 | 	mov	local22, local28
02a88     03 48 66 F0 | 	shl	local22, #3
02a8c     F2 4A 02 F6 | 	mov	local23, objptr
02a90     F2 48 02 F1 | 	add	local22, objptr
02a94     24 13 02 FB | 	rdlong	arg01, local22
02a98     35 00 00 FF 
02a9c     0C E4 85 F1 | 	sub	objptr, ##27148
02aa0     09 2B 02 F6 | 	mov	local07, arg01
02aa4     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02aa8                 | LR__0157
02aa8     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aac     01 2A 06 51 |  if_ne	add	local07, #1
02ab0     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02ab4                 | LR__0158
02ab4     09 2B 82 F1 | 	sub	local07, arg01
02ab8     15 39 02 F6 | 	mov	local14, local07
02abc     1C 33 02 F6 | 	mov	local11, local14
02ac0     01 32 86 F1 | 	sub	local11, #1
02ac4     19 35 02 F6 | 	mov	local12, local11
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     1A 15 02 F6 | 	mov	arg02, local12
02ad0     6C FF B1 FD | 	call	#__system__Right_S
02ad4     18 FB 61 FC | 	wrlong	result1, local10
02ad8     33 31 02 F6 | 	mov	local10, local37
02adc     03 30 66 F0 | 	shl	local10, #3
02ae0     35 00 00 FF 
02ae4     0C E4 05 F1 | 	add	objptr, ##27148
02ae8     F2 30 02 F1 | 	add	local10, objptr
02aec     81 01 00 FF 
02af0     61 28 06 F6 | 	mov	local06, ##@LR__5087
02af4     18 29 62 FC | 	wrlong	local06, local10
02af8     35 00 00 FF 
02afc     0C E4 85 F1 | 	sub	objptr, ##27148
02b00                 | LR__0159
02b00     33 31 02 F6 | 	mov	local10, local37
02b04     03 30 66 F0 | 	shl	local10, #3
02b08     35 00 00 FF 
02b0c     0C E4 05 F1 | 	add	objptr, ##27148
02b10     F2 30 02 F1 | 	add	local10, objptr
02b14     18 6F 02 FB | 	rdlong	local41, local10
02b18                 | ' 
02b18                 | ' lp$=lparts(addptr).part$ 
02b18                 | ' 
02b18                 | ' ' process mouse/cursor/click on/off
02b18                 | ' 
02b18                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02b18     81 01 00 FF 
02b1c     63 14 06 F6 | 	mov	arg02, ##@LR__5088
02b20     37 13 02 F6 | 	mov	arg01, local41
02b24     35 00 00 FF 
02b28     0C E4 85 F1 | 	sub	objptr, ##27148
02b2c     34 DE B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     30 00 90 AD |  if_e	jmp	#LR__0160
02b38     81 01 00 FF 
02b3c     69 14 06 F6 | 	mov	arg02, ##@LR__5089
02b40     37 13 02 F6 | 	mov	arg01, local41
02b44     1C DE B1 FD | 	call	#__system___string_cmp
02b48     00 FA 0D F2 | 	cmp	result1, #0 wz
02b4c     18 00 90 AD |  if_e	jmp	#LR__0160
02b50     81 01 00 FF 
02b54     70 14 06 F6 | 	mov	arg02, ##@LR__5090
02b58     37 13 02 F6 | 	mov	arg01, local41
02b5c     04 DE B1 FD | 	call	#__system___string_cmp
02b60     00 FA 0D F2 | 	cmp	result1, #0 wz
02b64     E0 00 90 5D |  if_ne	jmp	#LR__0163
02b68                 | LR__0160
02b68                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02b68     33 27 02 F6 | 	mov	local05, local37
02b6c     01 26 06 F1 | 	add	local05, #1
02b70     03 26 66 F0 | 	shl	local05, #3
02b74     35 00 00 FF 
02b78     0C E4 05 F1 | 	add	objptr, ##27148
02b7c     F2 26 02 F1 | 	add	local05, objptr
02b80     13 13 02 FB | 	rdlong	arg01, local05
02b84     81 01 00 FF 
02b88     76 14 06 F6 | 	mov	arg02, ##@LR__5091
02b8c     35 00 00 FF 
02b90     0C E4 85 F1 | 	sub	objptr, ##27148
02b94     CC DD B1 FD | 	call	#__system___string_cmp
02b98     00 FA 0D F2 | 	cmp	result1, #0 wz
02b9c     38 00 90 5D |  if_ne	jmp	#LR__0161
02ba0     33 31 02 F6 | 	mov	local10, local37
02ba4     01 30 06 F1 | 	add	local10, #1
02ba8     03 30 66 F0 | 	shl	local10, #3
02bac     35 00 00 FF 
02bb0     0C E4 05 F1 | 	add	objptr, ##27148
02bb4     F2 30 02 F1 | 	add	local10, objptr
02bb8     81 01 00 FF 
02bbc     79 28 06 F6 | 	mov	local06, ##@LR__5092
02bc0     18 29 62 FC | 	wrlong	local06, local10
02bc4     14 E4 05 F1 | 	add	objptr, #20
02bc8     01 00 80 FF 
02bcc     F2 00 68 FC | 	wrlong	##512, objptr
02bd0     35 00 00 FF 
02bd4     20 E4 85 F1 | 	sub	objptr, ##27168
02bd8                 | LR__0161
02bd8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02bd8     33 27 02 F6 | 	mov	local05, local37
02bdc     01 26 06 F1 | 	add	local05, #1
02be0     03 26 66 F0 | 	shl	local05, #3
02be4     35 00 00 FF 
02be8     0C E4 05 F1 | 	add	objptr, ##27148
02bec     F2 26 02 F1 | 	add	local05, objptr
02bf0     13 13 02 FB | 	rdlong	arg01, local05
02bf4     81 01 00 FF 
02bf8     7B 14 06 F6 | 	mov	arg02, ##@LR__5093
02bfc     35 00 00 FF 
02c00     0C E4 85 F1 | 	sub	objptr, ##27148
02c04     5C DD B1 FD | 	call	#__system___string_cmp
02c08     00 FA 0D F2 | 	cmp	result1, #0 wz
02c0c     38 00 90 5D |  if_ne	jmp	#LR__0162
02c10     33 31 02 F6 | 	mov	local10, local37
02c14     01 30 06 F1 | 	add	local10, #1
02c18     03 30 66 F0 | 	shl	local10, #3
02c1c     35 00 00 FF 
02c20     0C E4 05 F1 | 	add	objptr, ##27148
02c24     F2 30 02 F1 | 	add	local10, objptr
02c28     81 01 00 FF 
02c2c     7F 28 06 F6 | 	mov	local06, ##@LR__5094
02c30     18 29 62 FC | 	wrlong	local06, local10
02c34     14 E4 05 F1 | 	add	objptr, #20
02c38     01 00 80 FF 
02c3c     F2 00 68 FC | 	wrlong	##512, objptr
02c40     35 00 00 FF 
02c44     20 E4 85 F1 | 	sub	objptr, ##27168
02c48                 | LR__0162
02c48                 | LR__0163
02c48                 | ' 		
02c48                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02c48                 | ' 
02c48                 | ' if (lp$="mode" orelse lp$="m.") then 
02c48     81 01 00 FF 
02c4c     81 14 06 F6 | 	mov	arg02, ##@LR__5095
02c50     37 13 02 F6 | 	mov	arg01, local41
02c54     0C DD B1 FD | 	call	#__system___string_cmp
02c58     00 FA 0D F2 | 	cmp	result1, #0 wz
02c5c     18 00 90 AD |  if_e	jmp	#LR__0164
02c60     81 01 00 FF 
02c64     86 14 06 F6 | 	mov	arg02, ##@LR__5096
02c68     37 13 02 F6 | 	mov	arg01, local41
02c6c     F4 DC B1 FD | 	call	#__system___string_cmp
02c70     00 FA 0D F2 | 	cmp	result1, #0 wz
02c74     F4 01 90 5D |  if_ne	jmp	#LR__0170
02c78                 | LR__0164
02c78                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02c78     33 27 02 F6 | 	mov	local05, local37
02c7c     01 26 06 F1 | 	add	local05, #1
02c80     03 26 66 F0 | 	shl	local05, #3
02c84     35 00 00 FF 
02c88     0C E4 05 F1 | 	add	objptr, ##27148
02c8c     F2 26 02 F1 | 	add	local05, objptr
02c90     13 13 02 FB | 	rdlong	arg01, local05
02c94     81 01 00 FF 
02c98     89 14 06 F6 | 	mov	arg02, ##@LR__5097
02c9c     35 00 00 FF 
02ca0     0C E4 85 F1 | 	sub	objptr, ##27148
02ca4     BC DC B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     2C 00 90 5D |  if_ne	jmp	#LR__0165
02cb0     33 31 02 F6 | 	mov	local10, local37
02cb4     01 30 06 F1 | 	add	local10, #1
02cb8     03 30 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 30 02 F1 | 	add	local10, objptr
02cc8     81 01 00 FF 
02ccc     8F 28 06 F6 | 	mov	local06, ##@LR__5098
02cd0     18 29 62 FC | 	wrlong	local06, local10
02cd4     35 00 00 FF 
02cd8     0C E4 85 F1 | 	sub	objptr, ##27148
02cdc                 | LR__0165
02cdc                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02cdc     33 27 02 F6 | 	mov	local05, local37
02ce0     01 26 06 F1 | 	add	local05, #1
02ce4     03 26 66 F0 | 	shl	local05, #3
02ce8     35 00 00 FF 
02cec     0C E4 05 F1 | 	add	objptr, ##27148
02cf0     F2 26 02 F1 | 	add	local05, objptr
02cf4     13 13 02 FB | 	rdlong	arg01, local05
02cf8     81 01 00 FF 
02cfc     91 14 06 F6 | 	mov	arg02, ##@LR__5099
02d00     35 00 00 FF 
02d04     0C E4 85 F1 | 	sub	objptr, ##27148
02d08     58 DC B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     2C 00 90 5D |  if_ne	jmp	#LR__0166
02d14     33 31 02 F6 | 	mov	local10, local37
02d18     01 30 06 F1 | 	add	local10, #1
02d1c     03 30 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     0C E4 05 F1 | 	add	objptr, ##27148
02d28     F2 30 02 F1 | 	add	local10, objptr
02d2c     81 01 00 FF 
02d30     9A 28 06 F6 | 	mov	local06, ##@LR__5100
02d34     18 29 62 FC | 	wrlong	local06, local10
02d38     35 00 00 FF 
02d3c     0C E4 85 F1 | 	sub	objptr, ##27148
02d40                 | LR__0166
02d40                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02d40     33 27 02 F6 | 	mov	local05, local37
02d44     01 26 06 F1 | 	add	local05, #1
02d48     03 26 66 F0 | 	shl	local05, #3
02d4c     35 00 00 FF 
02d50     0C E4 05 F1 | 	add	objptr, ##27148
02d54     F2 26 02 F1 | 	add	local05, objptr
02d58     13 13 02 FB | 	rdlong	arg01, local05
02d5c     81 01 00 FF 
02d60     9C 14 06 F6 | 	mov	arg02, ##@LR__5101
02d64     35 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##27148
02d6c     F4 DB B1 FD | 	call	#__system___string_cmp
02d70     00 FA 0D F2 | 	cmp	result1, #0 wz
02d74     2C 00 90 5D |  if_ne	jmp	#LR__0167
02d78     33 31 02 F6 | 	mov	local10, local37
02d7c     01 30 06 F1 | 	add	local10, #1
02d80     03 30 66 F0 | 	shl	local10, #3
02d84     35 00 00 FF 
02d88     0C E4 05 F1 | 	add	objptr, ##27148
02d8c     F2 30 02 F1 | 	add	local10, objptr
02d90     81 01 00 FF 
02d94     A5 28 06 F6 | 	mov	local06, ##@LR__5102
02d98     18 29 62 FC | 	wrlong	local06, local10
02d9c     35 00 00 FF 
02da0     0C E4 85 F1 | 	sub	objptr, ##27148
02da4                 | LR__0167
02da4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02da4     33 27 02 F6 | 	mov	local05, local37
02da8     01 26 06 F1 | 	add	local05, #1
02dac     03 26 66 F0 | 	shl	local05, #3
02db0     35 00 00 FF 
02db4     0C E4 05 F1 | 	add	objptr, ##27148
02db8     F2 26 02 F1 | 	add	local05, objptr
02dbc     13 13 02 FB | 	rdlong	arg01, local05
02dc0     81 01 00 FF 
02dc4     A7 14 06 F6 | 	mov	arg02, ##@LR__5103
02dc8     35 00 00 FF 
02dcc     0C E4 85 F1 | 	sub	objptr, ##27148
02dd0     90 DB B1 FD | 	call	#__system___string_cmp
02dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02ddc     33 31 02 F6 | 	mov	local10, local37
02de0     01 30 06 F1 | 	add	local10, #1
02de4     03 30 66 F0 | 	shl	local10, #3
02de8     35 00 00 FF 
02dec     0C E4 05 F1 | 	add	objptr, ##27148
02df0     F2 30 02 F1 | 	add	local10, objptr
02df4     81 01 00 FF 
02df8     B0 28 06 F6 | 	mov	local06, ##@LR__5104
02dfc     18 29 62 FC | 	wrlong	local06, local10
02e00     35 00 00 FF 
02e04     0C E4 85 F1 | 	sub	objptr, ##27148
02e08                 | LR__0168
02e08                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02e08     33 27 02 F6 | 	mov	local05, local37
02e0c     01 26 06 F1 | 	add	local05, #1
02e10     03 26 66 F0 | 	shl	local05, #3
02e14     35 00 00 FF 
02e18     0C E4 05 F1 | 	add	objptr, ##27148
02e1c     F2 26 02 F1 | 	add	local05, objptr
02e20     13 13 02 FB | 	rdlong	arg01, local05
02e24     81 01 00 FF 
02e28     B2 14 06 F6 | 	mov	arg02, ##@LR__5105
02e2c     35 00 00 FF 
02e30     0C E4 85 F1 | 	sub	objptr, ##27148
02e34     2C DB B1 FD | 	call	#__system___string_cmp
02e38     00 FA 0D F2 | 	cmp	result1, #0 wz
02e3c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02e40     33 31 02 F6 | 	mov	local10, local37
02e44     01 30 06 F1 | 	add	local10, #1
02e48     03 30 66 F0 | 	shl	local10, #3
02e4c     35 00 00 FF 
02e50     0C E4 05 F1 | 	add	objptr, ##27148
02e54     F2 30 02 F1 | 	add	local10, objptr
02e58     81 01 00 FF 
02e5c     B5 28 06 F6 | 	mov	local06, ##@LR__5106
02e60     18 29 62 FC | 	wrlong	local06, local10
02e64     35 00 00 FF 
02e68     0C E4 85 F1 | 	sub	objptr, ##27148
02e6c                 | LR__0169
02e6c                 | LR__0170
02e6c                 | ' 
02e6c                 | ' ' find part types 
02e6c                 | ' 
02e6c                 | ' for i=0 to k-1
02e6c     00 20 06 F6 | 	mov	local02, #0
02e70     1F 71 02 F6 | 	mov	local42, local17
02e74                 | LR__0171
02e74     38 21 52 F2 | 	cmps	local02, local42 wc
02e78     A4 07 90 3D |  if_ae	jmp	#LR__0183
02e7c     10 31 02 F6 | 	mov	local10, local02
02e80     03 30 66 F0 | 	shl	local10, #3
02e84     35 00 00 FF 
02e88     0C E4 05 F1 | 	add	objptr, ##27148
02e8c     F2 30 02 F1 | 	add	local10, objptr
02e90     10 33 02 F6 | 	mov	local11, local02
02e94     19 39 02 F6 | 	mov	local14, local11
02e98     1C 37 02 F6 | 	mov	local13, local14
02e9c     03 36 66 F0 | 	shl	local13, #3
02ea0     F2 36 02 F1 | 	add	local13, objptr
02ea4     1B 13 02 FB | 	rdlong	arg01, local13
02ea8     35 00 00 FF 
02eac     0C E4 85 F1 | 	sub	objptr, ##27148
02eb0     70 15 B0 FD | 	call	#_isseparator
02eb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02eb8     04 30 06 F1 | 	add	local10, #4
02ebc     18 FB 61 FC | 	wrlong	result1, local10
02ec0                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02ec0     10 31 02 F6 | 	mov	local10, local02
02ec4     03 30 66 F0 | 	shl	local10, #3
02ec8     35 00 00 FF 
02ecc     0C E4 05 F1 | 	add	objptr, ##27148
02ed0     F2 30 02 F1 | 	add	local10, objptr
02ed4     04 30 06 F1 | 	add	local10, #4
02ed8     18 35 02 FB | 	rdlong	local12, local10
02edc     01 34 56 F2 | 	cmps	local12, #1 wc
02ee0     35 00 00 FF 
02ee4     0C E4 85 F1 | 	sub	objptr, ##27148
02ee8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02eec     10 31 02 F6 | 	mov	local10, local02
02ef0     03 30 66 F0 | 	shl	local10, #3
02ef4     35 00 00 FF 
02ef8     0C E4 05 F1 | 	add	objptr, ##27148
02efc     F2 30 02 F1 | 	add	local10, objptr
02f00     10 33 02 F6 | 	mov	local11, local02
02f04     19 39 02 F6 | 	mov	local14, local11
02f08     1C 37 02 F6 | 	mov	local13, local14
02f0c     03 36 66 F0 | 	shl	local13, #3
02f10     F2 36 02 F1 | 	add	local13, objptr
02f14     1B 13 02 FB | 	rdlong	arg01, local13
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     4C 0D B0 FD | 	call	#_isoperator
02f24     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f28     04 30 06 F1 | 	add	local10, #4
02f2c     18 FB 61 FC | 	wrlong	result1, local10
02f30                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f30     10 31 02 F6 | 	mov	local10, local02
02f34     03 30 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 30 02 F1 | 	add	local10, objptr
02f44     04 30 06 F1 | 	add	local10, #4
02f48     18 35 02 FB | 	rdlong	local12, local10
02f4c     01 34 56 F2 | 	cmps	local12, #1 wc
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58     BC 06 90 3D |  if_ae	jmp	#LR__0182
02f5c     10 31 02 F6 | 	mov	local10, local02
02f60     03 30 66 F0 | 	shl	local10, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 30 02 F1 | 	add	local10, objptr
02f70     10 33 02 F6 | 	mov	local11, local02
02f74     19 39 02 F6 | 	mov	local14, local11
02f78     1C 37 02 F6 | 	mov	local13, local14
02f7c     03 36 66 F0 | 	shl	local13, #3
02f80     F2 36 02 F1 | 	add	local13, objptr
02f84     1B 13 02 FB | 	rdlong	arg01, local13
02f88     35 00 00 FF 
02f8c     0C E4 85 F1 | 	sub	objptr, ##27148
02f90                 | ' 
02f90                 | ' select case s
02f90     81 01 00 FF 
02f94     8A 15 06 F6 | 	mov	arg02, ##@LR__5183
02f98     C8 D9 B1 FD | 	call	#__system___string_cmp
02f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02fa0     1B FA 05 A6 |  if_e	mov	result1, #27
02fa4     00 FA 05 56 |  if_ne	mov	result1, #0
02fa8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02fac     04 30 06 F1 | 	add	local10, #4
02fb0     18 FB 61 FC | 	wrlong	result1, local10
02fb4                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
02fb4     10 31 02 F6 | 	mov	local10, local02
02fb8     03 30 66 F0 | 	shl	local10, #3
02fbc     35 00 00 FF 
02fc0     0C E4 05 F1 | 	add	objptr, ##27148
02fc4     F2 30 02 F1 | 	add	local10, objptr
02fc8     04 30 06 F1 | 	add	local10, #4
02fcc     18 35 02 FB | 	rdlong	local12, local10
02fd0     01 34 56 F2 | 	cmps	local12, #1 wc
02fd4     35 00 00 FF 
02fd8     0C E4 85 F1 | 	sub	objptr, ##27148
02fdc     38 06 90 3D |  if_ae	jmp	#LR__0182
02fe0     10 31 02 F6 | 	mov	local10, local02
02fe4     03 30 66 F0 | 	shl	local10, #3
02fe8     35 00 00 FF 
02fec     0C E4 05 F1 | 	add	objptr, ##27148
02ff0     F2 30 02 F1 | 	add	local10, objptr
02ff4     10 33 02 F6 | 	mov	local11, local02
02ff8     19 39 02 F6 | 	mov	local14, local11
02ffc     1C 37 02 F6 | 	mov	local13, local14
03000     03 36 66 F0 | 	shl	local13, #3
03004     F2 36 02 F1 | 	add	local13, objptr
03008     1B 13 02 FB | 	rdlong	arg01, local13
0300c     35 00 00 FF 
03010     0C E4 85 F1 | 	sub	objptr, ##27148
03014     0C 16 B0 FD | 	call	#_iscommand
03018     FD FA E1 F8 | 	getbyte	result1, result1, #0
0301c     04 30 06 F1 | 	add	local10, #4
03020     18 FB 61 FC | 	wrlong	result1, local10
03024                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03024     10 31 02 F6 | 	mov	local10, local02
03028     03 30 66 F0 | 	shl	local10, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 30 02 F1 | 	add	local10, objptr
03038     04 30 06 F1 | 	add	local10, #4
0303c     18 35 02 FB | 	rdlong	local12, local10
03040     01 34 56 F2 | 	cmps	local12, #1 wc
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03050     10 31 02 F6 | 	mov	local10, local02
03054     03 30 66 F0 | 	shl	local10, #3
03058     35 00 00 FF 
0305c     0C E4 05 F1 | 	add	objptr, ##27148
03060     F2 30 02 F1 | 	add	local10, objptr
03064     10 33 02 F6 | 	mov	local11, local02
03068     19 39 02 F6 | 	mov	local14, local11
0306c     1C 37 02 F6 | 	mov	local13, local14
03070     03 36 66 F0 | 	shl	local13, #3
03074     F2 54 02 F6 | 	mov	local28, objptr
03078     F2 36 02 F1 | 	add	local13, objptr
0307c     1B 13 02 FB | 	rdlong	arg01, local13
03080     35 00 00 FF 
03084     0C E4 85 F1 | 	sub	objptr, ##27148
03088     D8 24 B0 FD | 	call	#_isfunction
0308c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03090     04 30 06 F1 | 	add	local10, #4
03094     18 FB 61 FC | 	wrlong	result1, local10
03098                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03098     10 31 02 F6 | 	mov	local10, local02
0309c     03 30 66 F0 | 	shl	local10, #3
030a0     35 00 00 FF 
030a4     0C E4 05 F1 | 	add	objptr, ##27148
030a8     F2 30 02 F1 | 	add	local10, objptr
030ac     04 30 06 F1 | 	add	local10, #4
030b0     18 35 02 FB | 	rdlong	local12, local10
030b4     01 34 56 F2 | 	cmps	local12, #1 wc
030b8     35 00 00 FF 
030bc     0C E4 85 F1 | 	sub	objptr, ##27148
030c0     54 05 90 3D |  if_ae	jmp	#LR__0182
030c4     10 31 02 F6 | 	mov	local10, local02
030c8     03 30 66 F0 | 	shl	local10, #3
030cc     35 00 00 FF 
030d0     0C E4 05 F1 | 	add	objptr, ##27148
030d4     F2 30 02 F1 | 	add	local10, objptr
030d8     10 33 02 F6 | 	mov	local11, local02
030dc     19 39 02 F6 | 	mov	local14, local11
030e0     03 38 66 F0 | 	shl	local14, #3
030e4     F2 36 02 F6 | 	mov	local13, objptr
030e8     F2 38 02 F1 | 	add	local14, objptr
030ec     1C 13 02 FB | 	rdlong	arg01, local14
030f0     35 00 00 FF 
030f4     0C E4 85 F1 | 	sub	objptr, ##27148
030f8     BC 0F B0 FD | 	call	#_isnotename
030fc     04 30 06 F1 | 	add	local10, #4
03100     18 FB 61 FC | 	wrlong	result1, local10
03104                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03104                 | ' if lparts(i).token>0 then 
03104     10 31 02 F6 | 	mov	local10, local02
03108     03 30 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 30 02 F1 | 	add	local10, objptr
03118     04 30 06 F1 | 	add	local10, #4
0311c     18 29 02 FB | 	rdlong	local06, local10
03120     01 28 56 F2 | 	cmps	local06, #1 wc
03124     35 00 00 FF 
03128     0C E4 85 F1 | 	sub	objptr, ##27148
0312c     8C 00 90 CD |  if_b	jmp	#LR__0172
03130     10 27 02 F6 | 	mov	local05, local02
03134     03 26 66 F0 | 	shl	local05, #3
03138     35 00 00 FF 
0313c     0C E4 05 F1 | 	add	objptr, ##27148
03140     F2 26 02 F1 | 	add	local05, objptr
03144     04 26 06 F1 | 	add	local05, #4
03148     13 35 02 FB | 	rdlong	local12, local05
0314c     1A 13 02 F6 | 	mov	arg01, local12
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     68 9E B1 FD | 	call	#_getnoteval
0315c     FD 72 02 F6 | 	mov	local43, result1
03160     10 31 02 F6 | 	mov	local10, local02
03164     03 30 66 F0 | 	shl	local10, #3
03168     35 00 00 FF 
0316c     0C E4 05 F1 | 	add	objptr, ##27148
03170     F2 30 02 F1 | 	add	local10, objptr
03174     39 13 02 F6 | 	mov	arg01, local43
03178     35 00 00 FF 
0317c     0C E4 85 F1 | 	sub	objptr, ##27148
03180     2C FA B1 FD | 	call	#__system__str_S
03184     18 FB 61 FC | 	wrlong	result1, local10
03188     10 25 02 F6 | 	mov	local04, local02
0318c     12 23 02 F6 | 	mov	local03, local04
03190     11 31 02 F6 | 	mov	local10, local03
03194     03 30 66 F0 | 	shl	local10, #3
03198     35 00 00 FF 
0319c     0C E4 05 F1 | 	add	objptr, ##27148
031a0     F2 30 02 F1 | 	add	local10, objptr
031a4     04 30 06 F1 | 	add	local10, #4
031a8     01 00 80 FF 
031ac     18 05 68 FC | 	wrlong	##514, local10
031b0     35 00 00 FF 
031b4     0C E4 85 F1 | 	sub	objptr, ##27148
031b8     5C 04 90 FD | 	jmp	#LR__0182
031bc                 | LR__0172
031bc     10 31 02 F6 | 	mov	local10, local02
031c0     03 30 66 F0 | 	shl	local10, #3
031c4     35 00 00 FF 
031c8     0C E4 05 F1 | 	add	objptr, ##27148
031cc     F2 30 02 F1 | 	add	local10, objptr
031d0     10 39 02 F6 | 	mov	local14, local02
031d4     03 38 66 F0 | 	shl	local14, #3
031d8     F2 38 02 F1 | 	add	local14, objptr
031dc     1C 13 02 FB | 	rdlong	arg01, local14
031e0     35 00 00 FF 
031e4     0C E4 85 F1 | 	sub	objptr, ##27148
031e8     64 0D B0 FD | 	call	#_ischannel
031ec     04 30 06 F1 | 	add	local10, #4
031f0     18 FB 61 FC | 	wrlong	result1, local10
031f4                 | ' 
031f4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
031f4                 | ' 
031f4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
031f4     10 31 02 F6 | 	mov	local10, local02
031f8     03 30 66 F0 | 	shl	local10, #3
031fc     35 00 00 FF 
03200     0C E4 05 F1 | 	add	objptr, ##27148
03204     F2 30 02 F1 | 	add	local10, objptr
03208     04 30 06 F1 | 	add	local10, #4
0320c     18 29 02 FB | 	rdlong	local06, local10
03210     01 28 56 F2 | 	cmps	local06, #1 wc
03214     35 00 00 FF 
03218     0C E4 85 F1 | 	sub	objptr, ##27148
0321c     74 00 90 CD |  if_b	jmp	#LR__0173
03220     10 31 02 F6 | 	mov	local10, local02
03224     03 30 66 F0 | 	shl	local10, #3
03228     35 00 00 FF 
0322c     0C E4 05 F1 | 	add	objptr, ##27148
03230     F2 30 02 F1 | 	add	local10, objptr
03234     10 33 02 F6 | 	mov	local11, local02
03238     19 39 02 F6 | 	mov	local14, local11
0323c     03 38 66 F0 | 	shl	local14, #3
03240     F2 36 02 F6 | 	mov	local13, objptr
03244     F2 38 02 F1 | 	add	local14, objptr
03248     1C 13 02 FB | 	rdlong	arg01, local14
0324c     01 34 06 F6 | 	mov	local12, #1
03250     01 14 06 F6 | 	mov	arg02, #1
03254     35 00 00 FF 
03258     0C E4 85 F1 | 	sub	objptr, ##27148
0325c     E0 F7 B1 FD | 	call	#__system__Right_S
03260     18 FB 61 FC | 	wrlong	result1, local10
03264     10 25 02 F6 | 	mov	local04, local02
03268     12 23 02 F6 | 	mov	local03, local04
0326c     11 31 02 F6 | 	mov	local10, local03
03270     03 30 66 F0 | 	shl	local10, #3
03274     35 00 00 FF 
03278     0C E4 05 F1 | 	add	objptr, ##27148
0327c     F2 30 02 F1 | 	add	local10, objptr
03280     04 30 06 F1 | 	add	local10, #4
03284     18 59 68 FC | 	wrlong	#44, local10
03288     35 00 00 FF 
0328c     0C E4 85 F1 | 	sub	objptr, ##27148
03290     84 03 90 FD | 	jmp	#LR__0182
03294                 | LR__0173
03294     10 31 02 F6 | 	mov	local10, local02
03298     03 30 66 F0 | 	shl	local10, #3
0329c     35 00 00 FF 
032a0     0C E4 05 F1 | 	add	objptr, ##27148
032a4     F2 30 02 F1 | 	add	local10, objptr
032a8     10 33 02 F6 | 	mov	local11, local02
032ac     19 39 02 F6 | 	mov	local14, local11
032b0     03 38 66 F0 | 	shl	local14, #3
032b4     F2 36 02 F6 | 	mov	local13, objptr
032b8     F2 38 02 F1 | 	add	local14, objptr
032bc     1C 13 02 FB | 	rdlong	arg01, local14
032c0     35 00 00 FF 
032c4     0C E4 85 F1 | 	sub	objptr, ##27148
032c8     6C 0D B0 FD | 	call	#_isconstant
032cc     04 30 06 F1 | 	add	local10, #4
032d0     18 FB 61 FC | 	wrlong	result1, local10
032d4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
032d4     10 31 02 F6 | 	mov	local10, local02
032d8     03 30 66 F0 | 	shl	local10, #3
032dc     35 00 00 FF 
032e0     0C E4 05 F1 | 	add	objptr, ##27148
032e4     F2 30 02 F1 | 	add	local10, objptr
032e8     04 30 06 F1 | 	add	local10, #4
032ec     18 35 02 FB | 	rdlong	local12, local10
032f0     01 34 56 F2 | 	cmps	local12, #1 wc
032f4     35 00 00 FF 
032f8     0C E4 85 F1 | 	sub	objptr, ##27148
032fc     94 00 90 CD |  if_b	jmp	#LR__0174
03300     10 31 02 F6 | 	mov	local10, local02
03304     03 30 66 F0 | 	shl	local10, #3
03308     35 00 00 FF 
0330c     0C E4 05 F1 | 	add	objptr, ##27148
03310     F2 30 02 F1 | 	add	local10, objptr
03314     10 35 02 F6 | 	mov	local12, local02
03318     1A 33 02 F6 | 	mov	local11, local12
0331c     19 39 02 F6 | 	mov	local14, local11
03320     03 38 66 F0 | 	shl	local14, #3
03324     F2 36 02 F6 | 	mov	local13, objptr
03328     F2 38 02 F1 | 	add	local14, objptr
0332c     04 38 06 F1 | 	add	local14, #4
03330     1C 13 02 FB | 	rdlong	arg01, local14
03334     04 38 86 F1 | 	sub	local14, #4
03338     35 00 00 FF 
0333c     0C E4 85 F1 | 	sub	objptr, ##27148
03340     09 13 52 F6 | 	abs	arg01, arg01 wc
03344     1F 74 C6 C9 |  if_b	decod	local44, #31
03348     00 74 06 36 |  if_ae	mov	local44, #0
0334c     9C FD B1 FD | 	call	#__system___float_fromuns
03350     3A FB 61 F5 | 	xor	result1, local44
03354     FD 12 02 F6 | 	mov	arg01, result1
03358     54 F8 B1 FD | 	call	#__system__str_S
0335c     18 FB 61 FC | 	wrlong	result1, local10
03360     10 25 02 F6 | 	mov	local04, local02
03364     12 23 02 F6 | 	mov	local03, local04
03368     11 31 02 F6 | 	mov	local10, local03
0336c     03 30 66 F0 | 	shl	local10, #3
03370     35 00 00 FF 
03374     0C E4 05 F1 | 	add	objptr, ##27148
03378     F2 30 02 F1 | 	add	local10, objptr
0337c     04 30 06 F1 | 	add	local10, #4
03380     01 00 80 FF 
03384     18 03 68 FC | 	wrlong	##513, local10
03388     35 00 00 FF 
0338c     0C E4 85 F1 | 	sub	objptr, ##27148
03390     84 02 90 FD | 	jmp	#LR__0182
03394                 | LR__0174
03394     10 27 02 F6 | 	mov	local05, local02
03398     03 26 66 F0 | 	shl	local05, #3
0339c     35 00 00 FF 
033a0     0C E4 05 F1 | 	add	objptr, ##27148
033a4     F2 26 02 F1 | 	add	local05, objptr
033a8     13 13 02 FB | 	rdlong	arg01, local05
033ac     35 00 00 FF 
033b0     0C E4 85 F1 | 	sub	objptr, ##27148
033b4     C0 29 B0 FD | 	call	#_isnum
033b8     FD 76 02 F6 | 	mov	local45, result1
033bc     10 27 02 F6 | 	mov	local05, local02
033c0     03 26 66 F0 | 	shl	local05, #3
033c4     35 00 00 FF 
033c8     0C E4 05 F1 | 	add	objptr, ##27148
033cc     F2 26 02 F1 | 	add	local05, objptr
033d0     13 13 02 FB | 	rdlong	arg01, local05
033d4     35 00 00 FF 
033d8     0C E4 85 F1 | 	sub	objptr, ##27148
033dc     84 2D B0 FD | 	call	#_isint
033e0     FD 78 02 F6 | 	mov	local46, result1
033e4     10 27 02 F6 | 	mov	local05, local02
033e8     03 26 66 F0 | 	shl	local05, #3
033ec     35 00 00 FF 
033f0     0C E4 05 F1 | 	add	objptr, ##27148
033f4     F2 26 02 F1 | 	add	local05, objptr
033f8     13 13 02 FB | 	rdlong	arg01, local05
033fc     35 00 00 FF 
03400     0C E4 85 F1 | 	sub	objptr, ##27148
03404     00 30 B0 FD | 	call	#_isdec
03408     FD 7A 02 F6 | 	mov	local47, result1
0340c                 | ' 
0340c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0340c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0340c     00 76 0E F2 | 	cmp	local45, #0 wz
03410     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03414     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
03418     34 00 90 AD |  if_e	jmp	#LR__0175
0341c     10 25 02 F6 | 	mov	local04, local02
03420     12 23 02 F6 | 	mov	local03, local04
03424     11 31 02 F6 | 	mov	local10, local03
03428     03 30 66 F0 | 	shl	local10, #3
0342c     35 00 00 FF 
03430     0C E4 05 F1 | 	add	objptr, ##27148
03434     F2 30 02 F1 | 	add	local10, objptr
03438     04 30 06 F1 | 	add	local10, #4
0343c     01 00 80 FF 
03440     18 01 68 FC | 	wrlong	##512, local10
03444     35 00 00 FF 
03448     0C E4 85 F1 | 	sub	objptr, ##27148
0344c     C8 01 90 FD | 	jmp	#LR__0182
03450                 | LR__0175
03450                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03450     00 76 0E F2 | 	cmp	local45, #0 wz
03454     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03458     3D 25 22 56 |  if_ne	not	local04, local47
0345c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03460     34 00 90 AD |  if_e	jmp	#LR__0176
03464     10 25 02 F6 | 	mov	local04, local02
03468     12 23 02 F6 | 	mov	local03, local04
0346c     11 31 02 F6 | 	mov	local10, local03
03470     03 30 66 F0 | 	shl	local10, #3
03474     35 00 00 FF 
03478     0C E4 05 F1 | 	add	objptr, ##27148
0347c     F2 30 02 F1 | 	add	local10, objptr
03480     04 30 06 F1 | 	add	local10, #4
03484     01 00 80 FF 
03488     18 03 68 FC | 	wrlong	##513, local10
0348c     35 00 00 FF 
03490     0C E4 85 F1 | 	sub	objptr, ##27148
03494     80 01 90 FD | 	jmp	#LR__0182
03498                 | LR__0176
03498                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03498     00 76 0E F2 | 	cmp	local45, #0 wz
0349c     3C 25 22 56 |  if_ne	not	local04, local46
034a0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
034a4     3D 23 22 56 |  if_ne	not	local03, local47
034a8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
034ac     34 00 90 AD |  if_e	jmp	#LR__0177
034b0     10 25 02 F6 | 	mov	local04, local02
034b4     12 23 02 F6 | 	mov	local03, local04
034b8     11 31 02 F6 | 	mov	local10, local03
034bc     03 30 66 F0 | 	shl	local10, #3
034c0     35 00 00 FF 
034c4     0C E4 05 F1 | 	add	objptr, ##27148
034c8     F2 30 02 F1 | 	add	local10, objptr
034cc     04 30 06 F1 | 	add	local10, #4
034d0     01 00 80 FF 
034d4     18 05 68 FC | 	wrlong	##514, local10
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     34 01 90 FD | 	jmp	#LR__0182
034e4                 | LR__0177
034e4                 | ' 
034e4                 | ' if isstring(lparts(i).part$) then 
034e4     10 27 02 F6 | 	mov	local05, local02
034e8     03 26 66 F0 | 	shl	local05, #3
034ec     35 00 00 FF 
034f0     0C E4 05 F1 | 	add	objptr, ##27148
034f4     F2 26 02 F1 | 	add	local05, objptr
034f8     13 13 02 FB | 	rdlong	arg01, local05
034fc     35 00 00 FF 
03500     0C E4 85 F1 | 	sub	objptr, ##27148
03504     C0 2F B0 FD | 	call	#_isstring
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     A8 00 90 AD |  if_e	jmp	#LR__0180
03510     10 31 02 F6 | 	mov	local10, local02
03514     03 30 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     0C E4 05 F1 | 	add	objptr, ##27148
03520     F2 30 02 F1 | 	add	local10, objptr
03524     04 30 06 F1 | 	add	local10, #4
03528     01 00 80 FF 
0352c     18 07 68 FC | 	wrlong	##515, local10
03530     10 25 02 F6 | 	mov	local04, local02
03534     12 23 02 F6 | 	mov	local03, local04
03538     11 31 02 F6 | 	mov	local10, local03
0353c     03 30 66 F0 | 	shl	local10, #3
03540     F2 30 02 F1 | 	add	local10, objptr
03544     10 39 02 F6 | 	mov	local14, local02
03548     03 38 66 F0 | 	shl	local14, #3
0354c     F2 38 02 F1 | 	add	local14, objptr
03550     1C 29 02 FB | 	rdlong	local06, local14
03554     02 34 06 F6 | 	mov	local12, #2
03558     10 49 02 F6 | 	mov	local22, local02
0355c     24 4B 02 F6 | 	mov	local23, local22
03560     03 4A 66 F0 | 	shl	local23, #3
03564     F2 4C 02 F6 | 	mov	local24, objptr
03568     F2 4A 02 F1 | 	add	local23, objptr
0356c     25 13 02 FB | 	rdlong	arg01, local23
03570     35 00 00 FF 
03574     0C E4 85 F1 | 	sub	objptr, ##27148
03578     09 2B 02 F6 | 	mov	local07, arg01
0357c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03580                 | LR__0178
03580     15 FB C9 FA | 	rdbyte	result1, local07 wz
03584     01 2A 06 51 |  if_ne	add	local07, #1
03588     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0358c                 | LR__0179
0358c     09 2B 82 F1 | 	sub	local07, arg01
03590     15 37 02 F6 | 	mov	local13, local07
03594     1B 39 02 F6 | 	mov	local14, local13
03598     02 38 86 F1 | 	sub	local14, #2
0359c     1C 33 02 F6 | 	mov	local11, local14
035a0     14 13 02 F6 | 	mov	arg01, local06
035a4     1A 15 02 F6 | 	mov	arg02, local12
035a8     19 17 02 F6 | 	mov	arg03, local11
035ac     20 F5 B1 FD | 	call	#__system__Mid_S
035b0     18 FB 61 FC | 	wrlong	result1, local10
035b4     60 00 90 FD | 	jmp	#LR__0182
035b8                 | LR__0180
035b8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
035b8     10 23 02 F6 | 	mov	local03, local02
035bc     11 27 02 F6 | 	mov	local05, local03
035c0     03 26 66 F0 | 	shl	local05, #3
035c4     35 00 00 FF 
035c8     0C E4 05 F1 | 	add	objptr, ##27148
035cc     F2 26 02 F1 | 	add	local05, objptr
035d0     13 13 02 FB | 	rdlong	arg01, local05
035d4     35 00 00 FF 
035d8     0C E4 85 F1 | 	sub	objptr, ##27148
035dc     24 25 B0 FD | 	call	#_isname
035e0     FD 24 0A F6 | 	mov	local04, result1 wz
035e4     30 00 90 AD |  if_e	jmp	#LR__0181
035e8     10 25 02 F6 | 	mov	local04, local02
035ec     12 23 02 F6 | 	mov	local03, local04
035f0     11 31 02 F6 | 	mov	local10, local03
035f4     03 30 66 F0 | 	shl	local10, #3
035f8     35 00 00 FF 
035fc     0C E4 05 F1 | 	add	objptr, ##27148
03600     F2 30 02 F1 | 	add	local10, objptr
03604     04 30 06 F1 | 	add	local10, #4
03608     01 00 80 FF 
0360c     18 09 68 FC | 	wrlong	##516, local10
03610     35 00 00 FF 
03614     0C E4 85 F1 | 	sub	objptr, ##27148
03618                 | LR__0181
03618                 | LR__0182
03618     01 20 06 F1 | 	add	local02, #1
0361c     54 F8 9F FD | 	jmp	#LR__0171
03620                 | LR__0183
03620     1F 31 02 F6 | 	mov	local10, local17
03624     03 30 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 30 02 F1 | 	add	local10, objptr
03634     04 30 06 F1 | 	add	local10, #4
03638     18 FD 6B FC | 	wrlong	#510, local10
0363c     1F 31 02 F6 | 	mov	local10, local17
03640     03 30 66 F0 | 	shl	local10, #3
03644     F2 26 02 F6 | 	mov	local05, objptr
03648     F2 30 02 F1 | 	add	local10, objptr
0364c     81 01 00 FF 
03650     B7 28 06 F6 | 	mov	local06, ##@LR__5107
03654     18 29 62 FC | 	wrlong	local06, local10
03658     10 00 00 FF 
0365c     54 E4 05 F1 | 	add	objptr, ##8276
03660     F2 3E 62 FC | 	wrlong	local17, objptr
03664     45 00 00 FF 
03668     60 E4 85 F1 | 	sub	objptr, ##35424
0366c                 | ' 
0366c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0366c                 | ' 
0366c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0366c                 | '  
0366c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0366c     81 01 00 FF 
03670     B8 30 06 F6 | 	mov	local10, ##@LR__5108
03674     37 13 02 F6 | 	mov	arg01, local41
03678     18 15 02 F6 | 	mov	arg02, local10
0367c     E4 D2 B1 FD | 	call	#__system___string_cmp
03680     00 FA 0D F2 | 	cmp	result1, #0 wz
03684     FC 00 90 AD |  if_e	jmp	#LR__0184
03688     81 01 00 FF 
0368c     BD 26 06 F6 | 	mov	local05, ##@LR__5109
03690     13 31 02 F6 | 	mov	local10, local05
03694     37 13 02 F6 | 	mov	arg01, local41
03698     18 15 02 F6 | 	mov	arg02, local10
0369c     C4 D2 B1 FD | 	call	#__system___string_cmp
036a0     00 FA 0D F2 | 	cmp	result1, #0 wz
036a4     DC 00 90 AD |  if_e	jmp	#LR__0184
036a8     81 01 00 FF 
036ac     C2 28 06 F6 | 	mov	local06, ##@LR__5110
036b0     14 27 02 F6 | 	mov	local05, local06
036b4     37 13 02 F6 | 	mov	arg01, local41
036b8     13 15 02 F6 | 	mov	arg02, local05
036bc     A4 D2 B1 FD | 	call	#__system___string_cmp
036c0     FD 30 0A F6 | 	mov	local10, result1 wz
036c4     BC 00 90 AD |  if_e	jmp	#LR__0184
036c8     81 01 00 FF 
036cc     C7 34 06 F6 | 	mov	local12, ##@LR__5111
036d0     1A 29 02 F6 | 	mov	local06, local12
036d4     37 13 02 F6 | 	mov	arg01, local41
036d8     14 15 02 F6 | 	mov	arg02, local06
036dc     84 D2 B1 FD | 	call	#__system___string_cmp
036e0     FD 26 0A F6 | 	mov	local05, result1 wz
036e4     9C 00 90 AD |  if_e	jmp	#LR__0184
036e8     81 01 00 FF 
036ec     CB 32 06 F6 | 	mov	local11, ##@LR__5112
036f0     19 35 02 F6 | 	mov	local12, local11
036f4     37 13 02 F6 | 	mov	arg01, local41
036f8     1A 15 02 F6 | 	mov	arg02, local12
036fc     64 D2 B1 FD | 	call	#__system___string_cmp
03700     FD 28 0A F6 | 	mov	local06, result1 wz
03704     7C 00 90 AD |  if_e	jmp	#LR__0184
03708     81 01 00 FF 
0370c     CF 38 06 F6 | 	mov	local14, ##@LR__5113
03710     1C 33 02 F6 | 	mov	local11, local14
03714     37 13 02 F6 | 	mov	arg01, local41
03718     19 15 02 F6 | 	mov	arg02, local11
0371c     44 D2 B1 FD | 	call	#__system___string_cmp
03720     FD 34 0A F6 | 	mov	local12, result1 wz
03724     5C 00 90 AD |  if_e	jmp	#LR__0184
03728     81 01 00 FF 
0372c     D2 36 06 F6 | 	mov	local13, ##@LR__5114
03730     1B 39 02 F6 | 	mov	local14, local13
03734     37 13 02 F6 | 	mov	arg01, local41
03738     1C 15 02 F6 | 	mov	arg02, local14
0373c     24 D2 B1 FD | 	call	#__system___string_cmp
03740     FD 32 0A F6 | 	mov	local11, result1 wz
03744     3C 00 90 AD |  if_e	jmp	#LR__0184
03748     81 01 00 FF 
0374c     D6 36 06 F6 | 	mov	local13, ##@LR__5115
03750     37 13 02 F6 | 	mov	arg01, local41
03754     1B 15 02 F6 | 	mov	arg02, local13
03758     08 D2 B1 FD | 	call	#__system___string_cmp
0375c     FD 38 0A F6 | 	mov	local14, result1 wz
03760     20 00 90 AD |  if_e	jmp	#LR__0184
03764     81 01 00 FF 
03768     DC 48 06 F6 | 	mov	local22, ##@LR__5116
0376c     24 55 02 F6 | 	mov	local28, local22
03770     37 13 02 F6 | 	mov	arg01, local41
03774     2A 15 02 F6 | 	mov	arg02, local28
03778     E8 D1 B1 FD | 	call	#__system___string_cmp
0377c     FD 36 0A F6 | 	mov	local13, result1 wz
03780     84 00 90 5D |  if_ne	jmp	#LR__0185
03784                 | LR__0184
03784     33 55 02 F6 | 	mov	local28, local37
03788     01 54 06 F1 | 	add	local28, #1
0378c     2A 49 02 F6 | 	mov	local22, local28
03790     24 4B 02 F6 | 	mov	local23, local22
03794     03 4A 66 F0 | 	shl	local23, #3
03798     35 00 00 FF 
0379c     0C E4 05 F1 | 	add	objptr, ##27148
037a0     F2 4C 02 F6 | 	mov	local24, objptr
037a4     F2 4A 02 F1 | 	add	local23, objptr
037a8     04 4A 06 F1 | 	add	local23, #4
037ac     25 59 02 FB | 	rdlong	local30, local23
037b0     04 4A 86 F1 | 	sub	local23, #4
037b4     2C 57 02 F6 | 	mov	local29, local30
037b8     01 00 00 FF 
037bc     04 56 0E F2 | 	cmp	local29, ##516 wz
037c0     35 00 00 FF 
037c4     0C E4 85 F1 | 	sub	objptr, ##27148
037c8     3C 00 90 5D |  if_ne	jmp	#LR__0185
037cc     33 31 02 F6 | 	mov	local10, local37
037d0     01 30 06 F1 | 	add	local10, #1
037d4     03 30 66 F0 | 	shl	local10, #3
037d8     35 00 00 FF 
037dc     0C E4 05 F1 | 	add	objptr, ##27148
037e0     F2 26 02 F6 | 	mov	local05, objptr
037e4     F2 30 02 F1 | 	add	local10, objptr
037e8     01 00 00 FF 
037ec     03 28 06 F6 | 	mov	local06, ##515
037f0     04 30 06 F1 | 	add	local10, #4
037f4     01 00 80 FF 
037f8     18 07 68 FC | 	wrlong	##515, local10
037fc     04 30 86 F1 | 	sub	local10, #4
03800     35 00 00 FF 
03804     0C E4 85 F1 | 	sub	objptr, ##27148
03808                 | LR__0185
03808                 | ' 
03808                 | ' ' determine a type of the line and compile it
03808                 | ' 
03808                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03808     35 00 00 FF 
0380c     0C E4 05 F1 | 	add	objptr, ##27148
03810     F2 12 02 FB | 	rdlong	arg01, objptr
03814     35 00 00 FF 
03818     0C E4 85 F1 | 	sub	objptr, ##27148
0381c     E8 2B B0 FD | 	call	#_isdec
03820     00 FA 0D F2 | 	cmp	result1, #0 wz
03824     30 00 90 AD |  if_e	jmp	#LR__0186
03828     35 00 00 FF 
0382c     0C E4 05 F1 | 	add	objptr, ##27148
03830     F2 12 02 FB | 	rdlong	arg01, objptr
03834     35 00 00 FF 
03838     0C E4 85 F1 | 	sub	objptr, ##27148
0383c     00 14 06 F6 | 	mov	arg02, #0
03840     24 03 B2 FD | 	call	#__system____builtin_atoi
03844     51 00 00 FF 
03848     C4 E5 05 F1 | 	add	objptr, ##41924
0384c     F2 FA 61 FC | 	wrlong	result1, objptr
03850     51 00 00 FF 
03854     C4 E5 85 F1 | 	sub	objptr, ##41924
03858                 | LR__0186
03858                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03858     51 00 00 FF 
0385c     C4 E5 05 F1 | 	add	objptr, ##41924
03860     F2 24 02 FB | 	rdlong	local04, objptr
03864     51 00 00 FF 
03868     C4 E5 85 F1 | 	sub	objptr, ##41924
0386c     01 24 16 F2 | 	cmp	local04, #1 wc
03870     40 00 90 CD |  if_b	jmp	#LR__0187
03874     01 3E 0E F2 | 	cmp	local17, #1 wz
03878     37 00 00 AF 
0387c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03880     F2 26 02 AB |  if_e	rdlong	local05, objptr
03884     37 00 00 AF 
03888     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0388c     13 31 02 A6 |  if_e	mov	local10, local05
03890     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03894     1C 00 90 5D |  if_ne	jmp	#LR__0187
03898     51 00 00 FF 
0389c     C4 E5 05 F1 | 	add	objptr, ##41924
038a0     F2 12 02 FB | 	rdlong	arg01, objptr
038a4     51 00 00 FF 
038a8     C4 E5 85 F1 | 	sub	objptr, ##41924
038ac     7C 2C B0 FD | 	call	#_deleteline
038b0     70 03 90 FD | 	jmp	#LR__0197
038b4                 | LR__0187
038b4                 | ' 
038b4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
038b4     37 00 00 FF 
038b8     24 E4 05 F1 | 	add	objptr, ##28196
038bc     F2 24 0A FB | 	rdlong	local04, objptr wz
038c0     37 00 00 FF 
038c4     24 E4 85 F1 | 	sub	objptr, ##28196
038c8     37 00 00 5F 
038cc     24 E4 05 51 |  if_ne	add	objptr, ##28196
038d0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
038d4     37 00 00 5F 
038d8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
038dc     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
038e0     AC 00 90 5D |  if_ne	jmp	#LR__0189
038e4     35 00 00 FF 
038e8     20 E4 05 F1 | 	add	objptr, ##27168
038ec     F2 34 02 FB | 	rdlong	local12, objptr
038f0     35 00 00 FF 
038f4     20 E4 85 F1 | 	sub	objptr, ##27168
038f8     1B 34 0E F2 | 	cmp	local12, #27 wz
038fc     90 00 90 AD |  if_e	jmp	#LR__0189
03900     51 00 00 FF 
03904     C4 E5 05 F1 | 	add	objptr, ##41924
03908     F2 12 02 FB | 	rdlong	arg01, objptr
0390c     1A 00 00 FF 
03910     A0 E5 85 F1 | 	sub	objptr, ##13728
03914     F2 16 02 FB | 	rdlong	arg03, objptr
03918     37 00 00 FF 
0391c     24 E4 85 F1 | 	sub	objptr, ##28196
03920     00 14 06 F6 | 	mov	arg02, #0
03924     A8 3F B0 FD | 	call	#_compile
03928     FD 1E 0A F6 | 	mov	local01, result1 wz
0392c                 | '   err=compile(linenum,0,cont) 
0392c                 | '   if err<>0 then printerror(err): goto 101
0392c     0C 00 90 AD |  if_e	jmp	#LR__0188
03930     0F 13 02 F6 | 	mov	arg01, local01
03934     74 9A B1 FD | 	call	#_printerror
03938     08 03 90 FD | 	jmp	#LR__0198
0393c                 | LR__0188
0393c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0393c     51 00 00 FF 
03940     F8 E5 05 F1 | 	add	objptr, ##41976
03944     F2 12 02 FB | 	rdlong	arg01, objptr
03948     51 00 00 FF 
0394c     F8 E5 85 F1 | 	sub	objptr, ##41976
03950     81 01 00 FF 
03954     DF 14 06 F6 | 	mov	arg02, ##@LR__5117
03958     08 D0 B1 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     C0 02 90 AD |  if_e	jmp	#LR__0197
03964     51 00 00 FF 
03968     F8 E5 05 F1 | 	add	objptr, ##41976
0396c     F2 24 02 FB | 	rdlong	local04, objptr
03970     1A 00 00 FF 
03974     DC E5 85 F1 | 	sub	objptr, ##13788
03978     F2 24 62 FC | 	wrlong	local04, objptr
0397c     08 E4 05 F1 | 	add	objptr, #8
03980     F2 08 68 FC | 	wrlong	#4, objptr
03984     37 00 00 FF 
03988     24 E4 85 F1 | 	sub	objptr, ##28196
0398c     54 DD 9F FD | 	jmp	#LR__0070
03990                 | LR__0189
03990                 | '       							
03990                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03990     37 00 00 FF 
03994     24 E4 05 F1 | 	add	objptr, ##28196
03998     F2 24 02 FB | 	rdlong	local04, objptr
0399c     37 00 00 FF 
039a0     24 E4 85 F1 | 	sub	objptr, ##28196
039a4     01 24 0E F2 | 	cmp	local04, #1 wz
039a8     37 00 00 5F 
039ac     24 E4 05 51 |  if_ne	add	objptr, ##28196
039b0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039b4     37 00 00 5F 
039b8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039bc     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
039c0     AC 00 90 5D |  if_ne	jmp	#LR__0191
039c4     35 00 00 FF 
039c8     18 E4 05 F1 | 	add	objptr, ##27160
039cc     F2 34 02 FB | 	rdlong	local12, objptr
039d0     35 00 00 FF 
039d4     18 E4 85 F1 | 	sub	objptr, ##27160
039d8     1B 34 0E F2 | 	cmp	local12, #27 wz
039dc     90 00 90 AD |  if_e	jmp	#LR__0191
039e0     51 00 00 FF 
039e4     C4 E5 05 F1 | 	add	objptr, ##41924
039e8     F2 12 02 FB | 	rdlong	arg01, objptr
039ec     1A 00 00 FF 
039f0     A0 E5 85 F1 | 	sub	objptr, ##13728
039f4     F2 16 02 FB | 	rdlong	arg03, objptr
039f8     37 00 00 FF 
039fc     24 E4 85 F1 | 	sub	objptr, ##28196
03a00     00 14 06 F6 | 	mov	arg02, #0
03a04     C8 3E B0 FD | 	call	#_compile
03a08     FD 1E 0A F6 | 	mov	local01, result1 wz
03a0c                 | '   err=compile(linenum,0,cont) 
03a0c                 | '   if err<>0 then printerror(err): goto 101
03a0c     0C 00 90 AD |  if_e	jmp	#LR__0190
03a10     0F 13 02 F6 | 	mov	arg01, local01
03a14     94 99 B1 FD | 	call	#_printerror
03a18     28 02 90 FD | 	jmp	#LR__0198
03a1c                 | LR__0190
03a1c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03a1c     51 00 00 FF 
03a20     F8 E5 05 F1 | 	add	objptr, ##41976
03a24     F2 12 02 FB | 	rdlong	arg01, objptr
03a28     51 00 00 FF 
03a2c     F8 E5 85 F1 | 	sub	objptr, ##41976
03a30     81 01 00 FF 
03a34     E0 14 06 F6 | 	mov	arg02, ##@LR__5118
03a38     28 CF B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     E0 01 90 AD |  if_e	jmp	#LR__0197
03a44     51 00 00 FF 
03a48     F8 E5 05 F1 | 	add	objptr, ##41976
03a4c     F2 24 02 FB | 	rdlong	local04, objptr
03a50     1A 00 00 FF 
03a54     DC E5 85 F1 | 	sub	objptr, ##13788
03a58     F2 24 62 FC | 	wrlong	local04, objptr
03a5c     08 E4 05 F1 | 	add	objptr, #8
03a60     F2 08 68 FC | 	wrlong	#4, objptr
03a64     37 00 00 FF 
03a68     24 E4 85 F1 | 	sub	objptr, ##28196
03a6c     74 DC 9F FD | 	jmp	#LR__0070
03a70                 | LR__0191
03a70                 | ' 							 
03a70                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03a70     37 00 00 FF 
03a74     24 E4 05 F1 | 	add	objptr, ##28196
03a78     F2 24 0A FB | 	rdlong	local04, objptr wz
03a7c     37 00 00 FF 
03a80     24 E4 85 F1 | 	sub	objptr, ##28196
03a84     37 00 00 5F 
03a88     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a8c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a90     37 00 00 5F 
03a94     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a98     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03a9c     35 00 00 AF 
03aa0     20 E4 05 A1 |  if_e	add	objptr, ##27168
03aa4     F2 34 02 AB |  if_e	rdlong	local12, objptr
03aa8     35 00 00 AF 
03aac     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03ab0     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03ab4     90 00 90 5D |  if_ne	jmp	#LR__0193
03ab8     51 00 00 FF 
03abc     C4 E5 05 F1 | 	add	objptr, ##41924
03ac0     F2 12 02 FB | 	rdlong	arg01, objptr
03ac4     1A 00 00 FF 
03ac8     A0 E5 85 F1 | 	sub	objptr, ##13728
03acc     F2 16 02 FB | 	rdlong	arg03, objptr
03ad0     37 00 00 FF 
03ad4     24 E4 85 F1 | 	sub	objptr, ##28196
03ad8     00 14 06 F6 | 	mov	arg02, #0
03adc     B8 3E B0 FD | 	call	#_compile_assign
03ae0     FD 1E 0A F6 | 	mov	local01, result1 wz
03ae4                 | '   err=compile_assign(linenum,0,cont)
03ae4                 | '   if err<>0 then printerror(err): goto 101
03ae4     0C 00 90 AD |  if_e	jmp	#LR__0192
03ae8     0F 13 02 F6 | 	mov	arg01, local01
03aec     BC 98 B1 FD | 	call	#_printerror
03af0     50 01 90 FD | 	jmp	#LR__0198
03af4                 | LR__0192
03af4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03af4     51 00 00 FF 
03af8     F8 E5 05 F1 | 	add	objptr, ##41976
03afc     F2 12 02 FB | 	rdlong	arg01, objptr
03b00     51 00 00 FF 
03b04     F8 E5 85 F1 | 	sub	objptr, ##41976
03b08     81 01 00 FF 
03b0c     E1 14 06 F6 | 	mov	arg02, ##@LR__5119
03b10     50 CE B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     08 01 90 AD |  if_e	jmp	#LR__0197
03b1c     51 00 00 FF 
03b20     F8 E5 05 F1 | 	add	objptr, ##41976
03b24     F2 24 02 FB | 	rdlong	local04, objptr
03b28     1A 00 00 FF 
03b2c     DC E5 85 F1 | 	sub	objptr, ##13788
03b30     F2 24 62 FC | 	wrlong	local04, objptr
03b34     08 E4 05 F1 | 	add	objptr, #8
03b38     F2 08 68 FC | 	wrlong	#4, objptr
03b3c     37 00 00 FF 
03b40     24 E4 85 F1 | 	sub	objptr, ##28196
03b44     9C DB 9F FD | 	jmp	#LR__0070
03b48                 | LR__0193
03b48                 | '     							 
03b48                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03b48     37 00 00 FF 
03b4c     24 E4 05 F1 | 	add	objptr, ##28196
03b50     F2 24 02 FB | 	rdlong	local04, objptr
03b54     37 00 00 FF 
03b58     24 E4 85 F1 | 	sub	objptr, ##28196
03b5c     01 24 0E F2 | 	cmp	local04, #1 wz
03b60     37 00 00 5F 
03b64     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b68     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b6c     37 00 00 5F 
03b70     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b74     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03b78     35 00 00 AF 
03b7c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03b80     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b84     35 00 00 AF 
03b88     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03b8c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b90     90 00 90 5D |  if_ne	jmp	#LR__0196
03b94     51 00 00 FF 
03b98     C4 E5 05 F1 | 	add	objptr, ##41924
03b9c     F2 12 02 FB | 	rdlong	arg01, objptr
03ba0     1A 00 00 FF 
03ba4     A0 E5 85 F1 | 	sub	objptr, ##13728
03ba8     F2 16 02 FB | 	rdlong	arg03, objptr
03bac     37 00 00 FF 
03bb0     24 E4 85 F1 | 	sub	objptr, ##28196
03bb4     00 14 06 F6 | 	mov	arg02, #0
03bb8     DC 3D B0 FD | 	call	#_compile_assign
03bbc     FD 1E 0A F6 | 	mov	local01, result1 wz
03bc0                 | '   err=compile_assign(linenum,0,cont) 
03bc0                 | '   if err<>0 then printerror(err): goto 101
03bc0     0C 00 90 AD |  if_e	jmp	#LR__0194
03bc4     0F 13 02 F6 | 	mov	arg01, local01
03bc8     E0 97 B1 FD | 	call	#_printerror
03bcc     74 00 90 FD | 	jmp	#LR__0198
03bd0                 | LR__0194
03bd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03bd0     51 00 00 FF 
03bd4     F8 E5 05 F1 | 	add	objptr, ##41976
03bd8     F2 12 02 FB | 	rdlong	arg01, objptr
03bdc     51 00 00 FF 
03be0     F8 E5 85 F1 | 	sub	objptr, ##41976
03be4     81 01 00 FF 
03be8     E2 14 06 F6 | 	mov	arg02, ##@LR__5120
03bec     74 CD B1 FD | 	call	#__system___string_cmp
03bf0     00 FA 4D F2 | 	cmps	result1, #0 wz
03bf4     2C 00 90 AD |  if_e	jmp	#LR__0195
03bf8     51 00 00 FF 
03bfc     F8 E5 05 F1 | 	add	objptr, ##41976
03c00     F2 24 02 FB | 	rdlong	local04, objptr
03c04     1A 00 00 FF 
03c08     DC E5 85 F1 | 	sub	objptr, ##13788
03c0c     F2 24 62 FC | 	wrlong	local04, objptr
03c10     08 E4 05 F1 | 	add	objptr, #8
03c14     F2 08 68 FC | 	wrlong	#4, objptr
03c18     37 00 00 FF 
03c1c     24 E4 85 F1 | 	sub	objptr, ##28196
03c20     C0 DA 9F FD | 	jmp	#LR__0070
03c24                 | LR__0195
03c24                 | LR__0196
03c24                 | LR__0197
03c24                 | ' 
03c24                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03c24     51 00 00 FF 
03c28     C4 E5 05 F1 | 	add	objptr, ##41924
03c2c     F2 24 0A FB | 	rdlong	local04, objptr wz
03c30     51 00 00 FF 
03c34     C4 E5 85 F1 | 	sub	objptr, ##41924
03c38     28 00 90 5D |  if_ne	jmp	#LR__0199
03c3c     02 12 06 F6 | 	mov	arg01, #2
03c40     DC 74 B0 FD | 	call	#_execute_line
03c44                 | LR__0198
03c44     81 01 00 FF 
03c48     E3 12 06 F6 | 	mov	arg01, ##@LR__5121
03c4c                 | ' 
03c4c                 | ' write(text)
03c4c     D0 B7 B1 FD | 	call	#_hg010b_spin2_write
03c50                 | ' crlf
03c50     CC BC B1 FD | 	call	#_hg010b_spin2_crlf
03c54     81 01 00 FF 
03c58     E4 12 06 F6 | 	mov	arg01, ##@LR__5122
03c5c                 | ' 
03c5c                 | ' write(text)
03c5c     C0 B7 B1 FD | 	call	#_hg010b_spin2_write
03c60                 | ' crlf
03c60     BC BC B1 FD | 	call	#_hg010b_spin2_crlf
03c64                 | LR__0199
03c64     A7 F0 03 F6 | 	mov	ptra, fp
03c68     B2 00 A0 FD | 	call	#popregs_
03c6c                 | _interpret_ret
03c6c     2D 00 64 FD | 	ret
03c70                 | 
03c70                 | ' 
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' '
03c70                 | ' '                          END OF TOKENIZER MAIN CODE
03c70                 | ' '
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' 
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' 
03c70                 | ' ' Check if the part is an operator, return a token or 0 if not found
03c70                 | ' 
03c70                 | ' function isoperator(s as string) as ubyte
03c70                 | _isoperator
03c70     01 4A 05 F6 | 	mov	COUNT_, #1
03c74     A8 00 A0 FD | 	call	#pushregs_
03c78                 | ' 
03c78                 | ' select case s
03c78     09 1F 02 F6 | 	mov	local01, arg01
03c7c     81 01 00 FF 
03c80     EA 14 06 F6 | 	mov	arg02, ##@LR__5123
03c84     0F 13 02 F6 | 	mov	arg01, local01
03c88     D8 CC B1 FD | 	call	#__system___string_cmp
03c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c90     FC 01 90 AD |  if_e	jmp	#LR__0200
03c94     81 01 00 FF 
03c98     EC 14 06 F6 | 	mov	arg02, ##@LR__5124
03c9c     0F 13 02 F6 | 	mov	arg01, local01
03ca0     C0 CC B1 FD | 	call	#__system___string_cmp
03ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca8     EC 01 90 AD |  if_e	jmp	#LR__0201
03cac     81 01 00 FF 
03cb0     EE 14 06 F6 | 	mov	arg02, ##@LR__5125
03cb4     0F 13 02 F6 | 	mov	arg01, local01
03cb8     A8 CC B1 FD | 	call	#__system___string_cmp
03cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc0     DC 01 90 AD |  if_e	jmp	#LR__0202
03cc4     81 01 00 FF 
03cc8     F1 14 06 F6 | 	mov	arg02, ##@LR__5126
03ccc     0F 13 02 F6 | 	mov	arg01, local01
03cd0     90 CC B1 FD | 	call	#__system___string_cmp
03cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd8     CC 01 90 AD |  if_e	jmp	#LR__0203
03cdc     81 01 00 FF 
03ce0     F5 14 06 F6 | 	mov	arg02, ##@LR__5127
03ce4     0F 13 02 F6 | 	mov	arg01, local01
03ce8     78 CC B1 FD | 	call	#__system___string_cmp
03cec     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf0     BC 01 90 AD |  if_e	jmp	#LR__0204
03cf4     81 01 00 FF 
03cf8     F7 14 06 F6 | 	mov	arg02, ##@LR__5128
03cfc     0F 13 02 F6 | 	mov	arg01, local01
03d00     60 CC B1 FD | 	call	#__system___string_cmp
03d04     00 FA 0D F2 | 	cmp	result1, #0 wz
03d08     AC 01 90 AD |  if_e	jmp	#LR__0205
03d0c     81 01 00 FF 
03d10     F9 14 06 F6 | 	mov	arg02, ##@LR__5129
03d14     0F 13 02 F6 | 	mov	arg01, local01
03d18     48 CC B1 FD | 	call	#__system___string_cmp
03d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d20     9C 01 90 AD |  if_e	jmp	#LR__0206
03d24     81 01 00 FF 
03d28     FD 14 06 F6 | 	mov	arg02, ##@LR__5130
03d2c     0F 13 02 F6 | 	mov	arg01, local01
03d30     30 CC B1 FD | 	call	#__system___string_cmp
03d34     00 FA 0D F2 | 	cmp	result1, #0 wz
03d38     8C 01 90 AD |  if_e	jmp	#LR__0207
03d3c     81 01 00 FF 
03d40     01 15 06 F6 | 	mov	arg02, ##@LR__5131
03d44     0F 13 02 F6 | 	mov	arg01, local01
03d48     18 CC B1 FD | 	call	#__system___string_cmp
03d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d50     7C 01 90 AD |  if_e	jmp	#LR__0208
03d54     81 01 00 FF 
03d58     05 15 06 F6 | 	mov	arg02, ##@LR__5132
03d5c     0F 13 02 F6 | 	mov	arg01, local01
03d60     00 CC B1 FD | 	call	#__system___string_cmp
03d64     00 FA 0D F2 | 	cmp	result1, #0 wz
03d68     6C 01 90 AD |  if_e	jmp	#LR__0209
03d6c     81 01 00 FF 
03d70     09 15 06 F6 | 	mov	arg02, ##@LR__5133
03d74     0F 13 02 F6 | 	mov	arg01, local01
03d78     E8 CB B1 FD | 	call	#__system___string_cmp
03d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d80     5C 01 90 AD |  if_e	jmp	#LR__0210
03d84     81 01 00 FF 
03d88     0D 15 06 F6 | 	mov	arg02, ##@LR__5134
03d8c     0F 13 02 F6 | 	mov	arg01, local01
03d90     D0 CB B1 FD | 	call	#__system___string_cmp
03d94     00 FA 0D F2 | 	cmp	result1, #0 wz
03d98     4C 01 90 AD |  if_e	jmp	#LR__0211
03d9c     81 01 00 FF 
03da0     0F 15 06 F6 | 	mov	arg02, ##@LR__5135
03da4     0F 13 02 F6 | 	mov	arg01, local01
03da8     B8 CB B1 FD | 	call	#__system___string_cmp
03dac     00 FA 0D F2 | 	cmp	result1, #0 wz
03db0     3C 01 90 AD |  if_e	jmp	#LR__0212
03db4     81 01 00 FF 
03db8     13 15 06 F6 | 	mov	arg02, ##@LR__5136
03dbc     0F 13 02 F6 | 	mov	arg01, local01
03dc0     A0 CB B1 FD | 	call	#__system___string_cmp
03dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc8     2C 01 90 AD |  if_e	jmp	#LR__0213
03dcc     81 01 00 FF 
03dd0     15 15 06 F6 | 	mov	arg02, ##@LR__5137
03dd4     0F 13 02 F6 | 	mov	arg01, local01
03dd8     88 CB B1 FD | 	call	#__system___string_cmp
03ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
03de0     1C 01 90 AD |  if_e	jmp	#LR__0214
03de4     81 01 00 FF 
03de8     17 15 06 F6 | 	mov	arg02, ##@LR__5138
03dec     0F 13 02 F6 | 	mov	arg01, local01
03df0     70 CB B1 FD | 	call	#__system___string_cmp
03df4     00 FA 0D F2 | 	cmp	result1, #0 wz
03df8     0C 01 90 AD |  if_e	jmp	#LR__0215
03dfc     81 01 00 FF 
03e00     1A 15 06 F6 | 	mov	arg02, ##@LR__5139
03e04     0F 13 02 F6 | 	mov	arg01, local01
03e08     58 CB B1 FD | 	call	#__system___string_cmp
03e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e10     FC 00 90 AD |  if_e	jmp	#LR__0216
03e14     81 01 00 FF 
03e18     1D 15 06 F6 | 	mov	arg02, ##@LR__5140
03e1c     0F 13 02 F6 | 	mov	arg01, local01
03e20     40 CB B1 FD | 	call	#__system___string_cmp
03e24     00 FA 0D F2 | 	cmp	result1, #0 wz
03e28     EC 00 90 AD |  if_e	jmp	#LR__0217
03e2c     81 01 00 FF 
03e30     1F 15 06 F6 | 	mov	arg02, ##@LR__5141
03e34     0F 13 02 F6 | 	mov	arg01, local01
03e38     28 CB B1 FD | 	call	#__system___string_cmp
03e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e40     DC 00 90 AD |  if_e	jmp	#LR__0218
03e44     81 01 00 FF 
03e48     21 15 06 F6 | 	mov	arg02, ##@LR__5142
03e4c     0F 13 02 F6 | 	mov	arg01, local01
03e50     10 CB B1 FD | 	call	#__system___string_cmp
03e54     00 FA 0D F2 | 	cmp	result1, #0 wz
03e58     CC 00 90 AD |  if_e	jmp	#LR__0219
03e5c     81 01 00 FF 
03e60     24 15 06 F6 | 	mov	arg02, ##@LR__5143
03e64     0F 13 02 F6 | 	mov	arg01, local01
03e68     F8 CA B1 FD | 	call	#__system___string_cmp
03e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e70     BC 00 90 AD |  if_e	jmp	#LR__0220
03e74     81 01 00 FF 
03e78     27 15 06 F6 | 	mov	arg02, ##@LR__5144
03e7c     0F 13 02 F6 | 	mov	arg01, local01
03e80     E0 CA B1 FD | 	call	#__system___string_cmp
03e84     00 FA 0D F2 | 	cmp	result1, #0 wz
03e88     AC 00 90 AD |  if_e	jmp	#LR__0221
03e8c     B0 00 90 FD | 	jmp	#LR__0222
03e90                 | LR__0200
03e90     01 FA 05 F6 | 	mov	result1, #1
03e94     AC 00 90 FD | 	jmp	#LR__0223
03e98                 | LR__0201
03e98     02 FA 05 F6 | 	mov	result1, #2
03e9c     A4 00 90 FD | 	jmp	#LR__0223
03ea0                 | LR__0202
03ea0     03 FA 05 F6 | 	mov	result1, #3
03ea4     9C 00 90 FD | 	jmp	#LR__0223
03ea8                 | LR__0203
03ea8     04 FA 05 F6 | 	mov	result1, #4
03eac     94 00 90 FD | 	jmp	#LR__0223
03eb0                 | LR__0204
03eb0     05 FA 05 F6 | 	mov	result1, #5
03eb4     8C 00 90 FD | 	jmp	#LR__0223
03eb8                 | LR__0205
03eb8     06 FA 05 F6 | 	mov	result1, #6
03ebc     84 00 90 FD | 	jmp	#LR__0223
03ec0                 | LR__0206
03ec0     07 FA 05 F6 | 	mov	result1, #7
03ec4     7C 00 90 FD | 	jmp	#LR__0223
03ec8                 | LR__0207
03ec8     08 FA 05 F6 | 	mov	result1, #8
03ecc     74 00 90 FD | 	jmp	#LR__0223
03ed0                 | LR__0208
03ed0     09 FA 05 F6 | 	mov	result1, #9
03ed4     6C 00 90 FD | 	jmp	#LR__0223
03ed8                 | LR__0209
03ed8     0A FA 05 F6 | 	mov	result1, #10
03edc     64 00 90 FD | 	jmp	#LR__0223
03ee0                 | LR__0210
03ee0     0B FA 05 F6 | 	mov	result1, #11
03ee4     5C 00 90 FD | 	jmp	#LR__0223
03ee8                 | LR__0211
03ee8     0C FA 05 F6 | 	mov	result1, #12
03eec     54 00 90 FD | 	jmp	#LR__0223
03ef0                 | LR__0212
03ef0     0D FA 05 F6 | 	mov	result1, #13
03ef4     4C 00 90 FD | 	jmp	#LR__0223
03ef8                 | LR__0213
03ef8     0E FA 05 F6 | 	mov	result1, #14
03efc     44 00 90 FD | 	jmp	#LR__0223
03f00                 | LR__0214
03f00     1B FA 05 F6 | 	mov	result1, #27
03f04     3C 00 90 FD | 	jmp	#LR__0223
03f08                 | LR__0215
03f08     27 FA 05 F6 | 	mov	result1, #39
03f0c     34 00 90 FD | 	jmp	#LR__0223
03f10                 | LR__0216
03f10     26 FA 05 F6 | 	mov	result1, #38
03f14     2C 00 90 FD | 	jmp	#LR__0223
03f18                 | LR__0217
03f18     10 FA 05 F6 | 	mov	result1, #16
03f1c     24 00 90 FD | 	jmp	#LR__0223
03f20                 | LR__0218
03f20     0F FA 05 F6 | 	mov	result1, #15
03f24     1C 00 90 FD | 	jmp	#LR__0223
03f28                 | LR__0219
03f28     2A FA 05 F6 | 	mov	result1, #42
03f2c     14 00 90 FD | 	jmp	#LR__0223
03f30                 | LR__0220
03f30     28 FA 05 F6 | 	mov	result1, #40
03f34     0C 00 90 FD | 	jmp	#LR__0223
03f38                 | LR__0221
03f38     29 FA 05 F6 | 	mov	result1, #41
03f3c     04 00 90 FD | 	jmp	#LR__0223
03f40                 | LR__0222
03f40     00 FA 05 F6 | 	mov	result1, #0
03f44                 | LR__0223
03f44     A7 F0 03 F6 | 	mov	ptra, fp
03f48     B2 00 A0 FD | 	call	#popregs_
03f4c                 | _isoperator_ret
03f4c     2D 00 64 FD | 	ret
03f50                 | 
03f50                 | ' 
03f50                 | ' ' Check if the part is a channel#, return a token or 0 if not found
03f50                 | ' 
03f50                 | ' function ischannel(s as string) as ulong
03f50                 | _ischannel
03f50     02 4A 05 F6 | 	mov	COUNT_, #2
03f54     A8 00 A0 FD | 	call	#pushregs_
03f58                 | ' if left$(s,1)<>"#" then return 0
03f58     09 1F 02 F6 | 	mov	local01, arg01
03f5c     01 14 06 F6 | 	mov	arg02, #1
03f60     54 EA B1 FD | 	call	#__system__Left_S
03f64     FD 12 02 F6 | 	mov	arg01, result1
03f68     81 01 00 FF 
03f6c     2A 15 06 F6 | 	mov	arg02, ##@LR__5145
03f70     F0 C9 B1 FD | 	call	#__system___string_cmp
03f74     00 FA 0D F2 | 	cmp	result1, #0 wz
03f78     00 FA 05 56 |  if_ne	mov	result1, #0
03f7c     AC 00 90 5D |  if_ne	jmp	#LR__0234
03f80                 | ' if len(s)<>2 then return 0
03f80     0F 13 02 F6 | 	mov	arg01, local01
03f84     09 21 02 F6 | 	mov	local02, arg01
03f88     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
03f8c                 | LR__0230
03f8c     10 FB C9 FA | 	rdbyte	result1, local02 wz
03f90     01 20 06 51 |  if_ne	add	local02, #1
03f94     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
03f98                 | LR__0231
03f98     09 21 82 F1 | 	sub	local02, arg01
03f9c     10 FB 01 F6 | 	mov	result1, local02
03fa0     02 FA 0D F2 | 	cmp	result1, #2 wz
03fa4     00 FA 05 56 |  if_ne	mov	result1, #0
03fa8     80 00 90 5D |  if_ne	jmp	#LR__0234
03fac                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     01 14 06 F6 | 	mov	arg02, #1
03fb4     88 EA B1 FD | 	call	#__system__Right_S
03fb8     FD 12 02 F6 | 	mov	arg01, result1
03fbc     81 01 00 FF 
03fc0     2C 15 06 F6 | 	mov	arg02, ##@LR__5146
03fc4     9C C9 B1 FD | 	call	#__system___string_cmp
03fc8     00 FA 55 F2 | 	cmps	result1, #0 wc
03fcc     24 00 90 CD |  if_b	jmp	#LR__0232
03fd0     0F 13 02 F6 | 	mov	arg01, local01
03fd4     01 14 06 F6 | 	mov	arg02, #1
03fd8     64 EA B1 FD | 	call	#__system__Right_S
03fdc     FD 12 02 F6 | 	mov	arg01, result1
03fe0     81 01 00 FF 
03fe4     2E 15 06 F6 | 	mov	arg02, ##@LR__5147
03fe8     78 C9 B1 FD | 	call	#__system___string_cmp
03fec     01 FA 55 F2 | 	cmps	result1, #1 wc
03ff0     08 00 90 CD |  if_b	jmp	#LR__0233
03ff4                 | LR__0232
03ff4     00 FA 05 F6 | 	mov	result1, #0
03ff8     30 00 90 FD | 	jmp	#LR__0234
03ffc                 | LR__0233
03ffc                 | ' return token_channel+val(right$(s,1))
03ffc     0F 13 02 F6 | 	mov	arg01, local01
04000     01 14 06 F6 | 	mov	arg02, #1
04004     38 EA B1 FD | 	call	#__system__Right_S
04008     FD 12 02 F6 | 	mov	arg01, result1
0400c     EC FC B1 FD | 	call	#__system____builtin_atof
04010     FD 14 02 F6 | 	mov	arg02, result1
04014     00 18 21 FF 
04018     00 12 06 F6 | 	mov	arg01, ##1110441984
0401c     00 F1 B1 FD | 	call	#__system___float_add
04020     FD 12 02 F6 | 	mov	arg01, result1
04024     00 14 06 F6 | 	mov	arg02, #0
04028     8C F9 B1 FD | 	call	#__system___float_tointeger
0402c                 | LR__0234
0402c     A7 F0 03 F6 | 	mov	ptra, fp
04030     B2 00 A0 FD | 	call	#popregs_
04034                 | _ischannel_ret
04034     2D 00 64 FD | 	ret
04038                 | 
04038                 | ' 
04038                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04038                 | ' ' todo: add spin2/pasm constants for pin control
04038                 | ' 
04038                 | ' function isconstant(s as string) as integer
04038                 | _isconstant
04038     01 4A 05 F6 | 	mov	COUNT_, #1
0403c     A8 00 A0 FD | 	call	#pushregs_
04040                 | ' 
04040                 | ' select case s
04040     09 1F 02 F6 | 	mov	local01, arg01
04044     81 01 00 FF 
04048     30 15 06 F6 | 	mov	arg02, ##@LR__5148
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     10 C9 B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     34 00 90 AD |  if_e	jmp	#LR__0240
0405c     81 01 00 FF 
04060     36 15 06 F6 | 	mov	arg02, ##@LR__5149
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     F8 C8 B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     24 00 90 AD |  if_e	jmp	#LR__0241
04074     81 01 00 FF 
04078     3D 15 06 F6 | 	mov	arg02, ##@LR__5150
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     E0 C8 B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     14 00 90 AD |  if_e	jmp	#LR__0242
0408c     18 00 90 FD | 	jmp	#LR__0243
04090                 | LR__0240
04090     01 FA 05 F6 | 	mov	result1, #1
04094     14 00 90 FD | 	jmp	#LR__0244
04098                 | LR__0241
04098     02 FA 05 F6 | 	mov	result1, #2
0409c     0C 00 90 FD | 	jmp	#LR__0244
040a0                 | LR__0242
040a0     04 FA 05 F6 | 	mov	result1, #4
040a4     04 00 90 FD | 	jmp	#LR__0244
040a8                 | LR__0243
040a8     00 FA 05 F6 | 	mov	result1, #0
040ac                 | LR__0244
040ac     A7 F0 03 F6 | 	mov	ptra, fp
040b0     B2 00 A0 FD | 	call	#popregs_
040b4                 | _isconstant_ret
040b4     2D 00 64 FD | 	ret
040b8                 | 
040b8                 | ' 
040b8                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
040b8                 | ' 
040b8                 | ' function isnotename(s as string) as ulong
040b8                 | _isnotename
040b8     07 4A 05 F6 | 	mov	COUNT_, #7
040bc     A8 00 A0 FD | 	call	#pushregs_
040c0                 | ' if left$(s,1)<>"#" then return 0
040c0     09 1F 02 F6 | 	mov	local01, arg01
040c4     01 14 06 F6 | 	mov	arg02, #1
040c8     EC E8 B1 FD | 	call	#__system__Left_S
040cc     FD 12 02 F6 | 	mov	arg01, result1
040d0     81 01 00 FF 
040d4     45 15 06 F6 | 	mov	arg02, ##@LR__5151
040d8     88 C8 B1 FD | 	call	#__system___string_cmp
040dc     00 FA 0D F2 | 	cmp	result1, #0 wz
040e0     00 FA 05 56 |  if_ne	mov	result1, #0
040e4     30 03 90 5D |  if_ne	jmp	#LR__0273
040e8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
040e8     0F 13 02 F6 | 	mov	arg01, local01
040ec     03 14 06 F6 | 	mov	arg02, #3
040f0     01 16 06 F6 | 	mov	arg03, #1
040f4     D8 E9 B1 FD | 	call	#__system__Mid_S
040f8     FD 12 02 F6 | 	mov	arg01, result1
040fc     81 01 00 FF 
04100     47 15 06 F6 | 	mov	arg02, ##@LR__5152
04104     5C C8 B1 FD | 	call	#__system___string_cmp
04108     00 FA 0D F2 | 	cmp	result1, #0 wz
0410c     18 00 90 5D |  if_ne	jmp	#LR__0250
04110     0F 13 02 F6 | 	mov	arg01, local01
04114     02 14 06 F6 | 	mov	arg02, #2
04118     02 16 06 F6 | 	mov	arg03, #2
0411c     B0 E9 B1 FD | 	call	#__system__Mid_S
04120     FD 20 02 F6 | 	mov	local02, result1
04124     14 00 90 FD | 	jmp	#LR__0251
04128                 | LR__0250
04128     0F 13 02 F6 | 	mov	arg01, local01
0412c     02 14 06 F6 | 	mov	arg02, #2
04130     01 16 06 F6 | 	mov	arg03, #1
04134     98 E9 B1 FD | 	call	#__system__Mid_S
04138     FD 20 02 F6 | 	mov	local02, result1
0413c                 | LR__0251
0413c                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     09 23 02 F6 | 	mov	local03, arg01
04144     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04148                 | LR__0252
04148     11 FB C9 FA | 	rdbyte	result1, local03 wz
0414c     01 22 06 51 |  if_ne	add	local03, #1
04150     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
04154                 | LR__0253
04154     09 23 82 F1 | 	sub	local03, arg01
04158     11 15 02 F6 | 	mov	arg02, local03
0415c     01 14 86 F1 | 	sub	arg02, #1
04160     0F 13 02 F6 | 	mov	arg01, local01
04164     01 16 06 F6 | 	mov	arg03, #1
04168     64 E9 B1 FD | 	call	#__system__Mid_S
0416c     FD 12 02 F6 | 	mov	arg01, result1
04170     81 01 00 FF 
04174     49 15 06 F6 | 	mov	arg02, ##@LR__5153
04178     E8 C7 B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     28 00 90 AD |  if_e	jmp	#LR__0254
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     01 14 06 F6 | 	mov	arg02, #1
0418c     B0 E8 B1 FD | 	call	#__system__Right_S
04190     FD 12 02 F6 | 	mov	arg01, result1
04194     64 FB B1 FD | 	call	#__system____builtin_atof
04198     FD 12 02 F6 | 	mov	arg01, result1
0419c     00 14 06 F6 | 	mov	arg02, #0
041a0     14 F8 B1 FD | 	call	#__system___float_tointeger
041a4     FD 24 02 F6 | 	mov	local04, result1
041a8     34 00 90 FD | 	jmp	#LR__0255
041ac                 | LR__0254
041ac     0F 13 02 F6 | 	mov	arg01, local01
041b0     01 14 06 F6 | 	mov	arg02, #1
041b4     88 E8 B1 FD | 	call	#__system__Right_S
041b8     FD 12 02 F6 | 	mov	arg01, result1
041bc     3C FB B1 FD | 	call	#__system____builtin_atof
041c0     FD 14 02 F6 | 	mov	arg02, result1
041c4     00 C0 5F FF 
041c8     00 12 06 F6 | 	mov	arg01, ##-1082130432
041cc     20 F3 B1 FD | 	call	#__system___float_mul
041d0     FD 12 02 F6 | 	mov	arg01, result1
041d4     00 14 06 F6 | 	mov	arg02, #0
041d8     DC F7 B1 FD | 	call	#__system___float_tointeger
041dc     FD 24 02 F6 | 	mov	local04, result1
041e0                 | LR__0255
041e0                 | ' 
041e0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
041e0     00 24 0E F2 | 	cmp	local04, #0 wz
041e4     24 00 90 5D |  if_ne	jmp	#LR__0256
041e8     0F 13 02 F6 | 	mov	arg01, local01
041ec     01 14 06 F6 | 	mov	arg02, #1
041f0     4C E8 B1 FD | 	call	#__system__Right_S
041f4     FD 12 02 F6 | 	mov	arg01, result1
041f8     81 01 00 FF 
041fc     4B 15 06 F6 | 	mov	arg02, ##@LR__5154
04200     60 C7 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     04 24 06 56 |  if_ne	mov	local04, #4
0420c                 | LR__0256
0420c                 | ' 
0420c                 | ' select case s1
0420c     10 27 02 F6 | 	mov	local05, local02
04210     81 01 00 FF 
04214     4D 15 06 F6 | 	mov	arg02, ##@LR__5155
04218     13 13 02 F6 | 	mov	arg01, local05
0421c     44 C7 B1 FD | 	call	#__system___string_cmp
04220     00 FA 0D F2 | 	cmp	result1, #0 wz
04224     24 01 90 AD |  if_e	jmp	#LR__0257
04228     81 01 00 FF 
0422c     4F 15 06 F6 | 	mov	arg02, ##@LR__5156
04230     13 13 02 F6 | 	mov	arg01, local05
04234     2C C7 B1 FD | 	call	#__system___string_cmp
04238     00 FA 0D F2 | 	cmp	result1, #0 wz
0423c     18 01 90 AD |  if_e	jmp	#LR__0258
04240     81 01 00 FF 
04244     52 15 06 F6 | 	mov	arg02, ##@LR__5157
04248     13 13 02 F6 | 	mov	arg01, local05
0424c     14 C7 B1 FD | 	call	#__system___string_cmp
04250     00 FA 0D F2 | 	cmp	result1, #0 wz
04254     0C 01 90 AD |  if_e	jmp	#LR__0259
04258     81 01 00 FF 
0425c     54 15 06 F6 | 	mov	arg02, ##@LR__5158
04260     13 13 02 F6 | 	mov	arg01, local05
04264     FC C6 B1 FD | 	call	#__system___string_cmp
04268     00 FA 0D F2 | 	cmp	result1, #0 wz
0426c     00 01 90 AD |  if_e	jmp	#LR__0260
04270     81 01 00 FF 
04274     57 15 06 F6 | 	mov	arg02, ##@LR__5159
04278     13 13 02 F6 | 	mov	arg01, local05
0427c     E4 C6 B1 FD | 	call	#__system___string_cmp
04280     00 FA 0D F2 | 	cmp	result1, #0 wz
04284     F4 00 90 AD |  if_e	jmp	#LR__0261
04288     81 01 00 FF 
0428c     59 15 06 F6 | 	mov	arg02, ##@LR__5160
04290     13 13 02 F6 | 	mov	arg01, local05
04294     CC C6 B1 FD | 	call	#__system___string_cmp
04298     00 FA 0D F2 | 	cmp	result1, #0 wz
0429c     E8 00 90 AD |  if_e	jmp	#LR__0262
042a0     81 01 00 FF 
042a4     5B 15 06 F6 | 	mov	arg02, ##@LR__5161
042a8     13 13 02 F6 | 	mov	arg01, local05
042ac     B4 C6 B1 FD | 	call	#__system___string_cmp
042b0     00 FA 0D F2 | 	cmp	result1, #0 wz
042b4     DC 00 90 AD |  if_e	jmp	#LR__0263
042b8     81 01 00 FF 
042bc     5E 15 06 F6 | 	mov	arg02, ##@LR__5162
042c0     13 13 02 F6 | 	mov	arg01, local05
042c4     9C C6 B1 FD | 	call	#__system___string_cmp
042c8     00 FA 0D F2 | 	cmp	result1, #0 wz
042cc     D0 00 90 AD |  if_e	jmp	#LR__0264
042d0     81 01 00 FF 
042d4     60 15 06 F6 | 	mov	arg02, ##@LR__5163
042d8     13 13 02 F6 | 	mov	arg01, local05
042dc     84 C6 B1 FD | 	call	#__system___string_cmp
042e0     00 FA 0D F2 | 	cmp	result1, #0 wz
042e4     C4 00 90 AD |  if_e	jmp	#LR__0265
042e8     81 01 00 FF 
042ec     63 15 06 F6 | 	mov	arg02, ##@LR__5164
042f0     13 13 02 F6 | 	mov	arg01, local05
042f4     6C C6 B1 FD | 	call	#__system___string_cmp
042f8     00 FA 0D F2 | 	cmp	result1, #0 wz
042fc     B8 00 90 AD |  if_e	jmp	#LR__0266
04300     81 01 00 FF 
04304     65 15 06 F6 | 	mov	arg02, ##@LR__5165
04308     13 13 02 F6 | 	mov	arg01, local05
0430c     54 C6 B1 FD | 	call	#__system___string_cmp
04310     00 FA 0D F2 | 	cmp	result1, #0 wz
04314     AC 00 90 AD |  if_e	jmp	#LR__0267
04318     81 01 00 FF 
0431c     68 15 06 F6 | 	mov	arg02, ##@LR__5166
04320     13 13 02 F6 | 	mov	arg01, local05
04324     3C C6 B1 FD | 	call	#__system___string_cmp
04328     00 FA 0D F2 | 	cmp	result1, #0 wz
0432c     A0 00 90 AD |  if_e	jmp	#LR__0268
04330     81 01 00 FF 
04334     6A 15 06 F6 | 	mov	arg02, ##@LR__5167
04338     13 13 02 F6 | 	mov	arg01, local05
0433c     24 C6 B1 FD | 	call	#__system___string_cmp
04340     00 FA 0D F2 | 	cmp	result1, #0 wz
04344     94 00 90 AD |  if_e	jmp	#LR__0269
04348     9C 00 90 FD | 	jmp	#LR__0270
0434c                 | LR__0257
0434c     01 00 00 FF 
04350     00 29 06 F6 | 	mov	local06, ##768
04354     98 00 90 FD | 	jmp	#LR__0271
04358                 | LR__0258
04358     01 00 00 FF 
0435c     01 29 06 F6 | 	mov	local06, ##769
04360     8C 00 90 FD | 	jmp	#LR__0271
04364                 | LR__0259
04364     01 00 00 FF 
04368     02 29 06 F6 | 	mov	local06, ##770
0436c     80 00 90 FD | 	jmp	#LR__0271
04370                 | LR__0260
04370     01 00 00 FF 
04374     03 29 06 F6 | 	mov	local06, ##771
04378     74 00 90 FD | 	jmp	#LR__0271
0437c                 | LR__0261
0437c     01 00 00 FF 
04380     04 29 06 F6 | 	mov	local06, ##772
04384     68 00 90 FD | 	jmp	#LR__0271
04388                 | LR__0262
04388     01 00 00 FF 
0438c     05 29 06 F6 | 	mov	local06, ##773
04390     5C 00 90 FD | 	jmp	#LR__0271
04394                 | LR__0263
04394     01 00 00 FF 
04398     06 29 06 F6 | 	mov	local06, ##774
0439c     50 00 90 FD | 	jmp	#LR__0271
043a0                 | LR__0264
043a0     01 00 00 FF 
043a4     07 29 06 F6 | 	mov	local06, ##775
043a8     44 00 90 FD | 	jmp	#LR__0271
043ac                 | LR__0265
043ac     01 00 00 FF 
043b0     08 29 06 F6 | 	mov	local06, ##776
043b4     38 00 90 FD | 	jmp	#LR__0271
043b8                 | LR__0266
043b8     01 00 00 FF 
043bc     09 29 06 F6 | 	mov	local06, ##777
043c0     2C 00 90 FD | 	jmp	#LR__0271
043c4                 | LR__0267
043c4     01 00 00 FF 
043c8     0A 29 06 F6 | 	mov	local06, ##778
043cc     20 00 90 FD | 	jmp	#LR__0271
043d0                 | LR__0268
043d0     01 00 00 FF 
043d4     0B 29 06 F6 | 	mov	local06, ##779
043d8     14 00 90 FD | 	jmp	#LR__0271
043dc                 | LR__0269
043dc     01 00 00 FF 
043e0     0B 29 06 F6 | 	mov	local06, ##779
043e4     08 00 90 FD | 	jmp	#LR__0271
043e8                 | LR__0270
043e8     00 FA 05 F6 | 	mov	result1, #0
043ec     28 00 90 FD | 	jmp	#LR__0273
043f0                 | LR__0271
043f0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
043f0     FF FF 7F FF 
043f4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
043f8     18 00 90 CD |  if_b	jmp	#LR__0272
043fc     0A 24 56 F2 | 	cmps	local04, #10 wc
04400     12 2B 02 C6 |  if_b	mov	local07, local04
04404     01 2A 66 C0 |  if_b	shl	local07, #1
04408     12 2B 02 C1 |  if_b	add	local07, local04
0440c     02 2A 66 C0 |  if_b	shl	local07, #2
04410     15 29 02 C1 |  if_b	add	local06, local07
04414                 | LR__0272
04414                 | ' return token
04414     14 FB 01 F6 | 	mov	result1, local06
04418                 | LR__0273
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _isnotename_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' ' Check if the part is a separator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isseparator(s as string) as ubyte
04424                 | _isseparator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 1F 02 F6 | 	mov	local01, arg01
04430     81 01 00 FF 
04434     6C 15 06 F6 | 	mov	arg02, ##@LR__5168
04438     0F 13 02 F6 | 	mov	arg01, local01
0443c     24 C5 B1 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     54 01 90 AD |  if_e	jmp	#LR__0280
04448     81 01 00 FF 
0444c     6E 15 06 F6 | 	mov	arg02, ##@LR__5169
04450     0F 13 02 F6 | 	mov	arg01, local01
04454     0C C5 B1 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     44 01 90 AD |  if_e	jmp	#LR__0281
04460     81 01 00 FF 
04464     70 15 06 F6 | 	mov	arg02, ##@LR__5170
04468     0F 13 02 F6 | 	mov	arg01, local01
0446c     F4 C4 B1 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     34 01 90 AD |  if_e	jmp	#LR__0282
04478     81 01 00 FF 
0447c     72 15 06 F6 | 	mov	arg02, ##@LR__5171
04480     0F 13 02 F6 | 	mov	arg01, local01
04484     DC C4 B1 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     24 01 90 AD |  if_e	jmp	#LR__0283
04490     81 01 00 FF 
04494     74 15 06 F6 | 	mov	arg02, ##@LR__5172
04498     0F 13 02 F6 | 	mov	arg01, local01
0449c     C4 C4 B1 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     14 01 90 AD |  if_e	jmp	#LR__0284
044a8     81 01 00 FF 
044ac     76 15 06 F6 | 	mov	arg02, ##@LR__5173
044b0     0F 13 02 F6 | 	mov	arg01, local01
044b4     AC C4 B1 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     04 01 90 AD |  if_e	jmp	#LR__0285
044c0     81 01 00 FF 
044c4     78 15 06 F6 | 	mov	arg02, ##@LR__5174
044c8     0F 13 02 F6 | 	mov	arg01, local01
044cc     94 C4 B1 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     F4 00 90 AD |  if_e	jmp	#LR__0286
044d8     81 01 00 FF 
044dc     7A 15 06 F6 | 	mov	arg02, ##@LR__5175
044e0     0F 13 02 F6 | 	mov	arg01, local01
044e4     7C C4 B1 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     E4 00 90 AD |  if_e	jmp	#LR__0287
044f0     81 01 00 FF 
044f4     7C 15 06 F6 | 	mov	arg02, ##@LR__5176
044f8     0F 13 02 F6 | 	mov	arg01, local01
044fc     64 C4 B1 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     D4 00 90 AD |  if_e	jmp	#LR__0288
04508     81 01 00 FF 
0450c     7E 15 06 F6 | 	mov	arg02, ##@LR__5177
04510     0F 13 02 F6 | 	mov	arg01, local01
04514     4C C4 B1 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     C4 00 90 AD |  if_e	jmp	#LR__0289
04520     81 01 00 FF 
04524     80 15 06 F6 | 	mov	arg02, ##@LR__5178
04528     0F 13 02 F6 | 	mov	arg01, local01
0452c     34 C4 B1 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     B4 00 90 AD |  if_e	jmp	#LR__0290
04538     81 01 00 FF 
0453c     82 15 06 F6 | 	mov	arg02, ##@LR__5179
04540     0F 13 02 F6 | 	mov	arg01, local01
04544     1C C4 B1 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     A4 00 90 AD |  if_e	jmp	#LR__0291
04550     81 01 00 FF 
04554     84 15 06 F6 | 	mov	arg02, ##@LR__5180
04558     0F 13 02 F6 | 	mov	arg01, local01
0455c     04 C4 B1 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     94 00 90 AD |  if_e	jmp	#LR__0292
04568     81 01 00 FF 
0456c     86 15 06 F6 | 	mov	arg02, ##@LR__5181
04570     0F 13 02 F6 | 	mov	arg01, local01
04574     EC C3 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     84 00 90 AD |  if_e	jmp	#LR__0293
04580     81 01 00 FF 
04584     88 15 06 F6 | 	mov	arg02, ##@LR__5182
04588     0F 13 02 F6 | 	mov	arg01, local01
0458c     D4 C3 B1 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     74 00 90 AD |  if_e	jmp	#LR__0294
04598     78 00 90 FD | 	jmp	#LR__0295
0459c                 | LR__0280
0459c     01 FA 05 F6 | 	mov	result1, #1
045a0     74 00 90 FD | 	jmp	#LR__0296
045a4                 | LR__0281
045a4     02 FA 05 F6 | 	mov	result1, #2
045a8     6C 00 90 FD | 	jmp	#LR__0296
045ac                 | LR__0282
045ac     1B FA 05 F6 | 	mov	result1, #27
045b0     64 00 90 FD | 	jmp	#LR__0296
045b4                 | LR__0283
045b4     11 FA 05 F6 | 	mov	result1, #17
045b8     5C 00 90 FD | 	jmp	#LR__0296
045bc                 | LR__0284
045bc     05 FA 05 F6 | 	mov	result1, #5
045c0     54 00 90 FD | 	jmp	#LR__0296
045c4                 | LR__0285
045c4     06 FA 05 F6 | 	mov	result1, #6
045c8     4C 00 90 FD | 	jmp	#LR__0296
045cc                 | LR__0286
045cc     12 FA 05 F6 | 	mov	result1, #18
045d0     44 00 90 FD | 	jmp	#LR__0296
045d4                 | LR__0287
045d4     13 FA 05 F6 | 	mov	result1, #19
045d8     3C 00 90 FD | 	jmp	#LR__0296
045dc                 | LR__0288
045dc     0C FA 05 F6 | 	mov	result1, #12
045e0     34 00 90 FD | 	jmp	#LR__0296
045e4                 | LR__0289
045e4     14 FA 05 F6 | 	mov	result1, #20
045e8     2C 00 90 FD | 	jmp	#LR__0296
045ec                 | LR__0290
045ec     15 FA 05 F6 | 	mov	result1, #21
045f0     24 00 90 FD | 	jmp	#LR__0296
045f4                 | LR__0291
045f4     16 FA 05 F6 | 	mov	result1, #22
045f8     1C 00 90 FD | 	jmp	#LR__0296
045fc                 | LR__0292
045fc     FF FB 05 F6 | 	mov	result1, #511
04600     14 00 90 FD | 	jmp	#LR__0296
04604                 | LR__0293
04604     0F FA 05 F6 | 	mov	result1, #15
04608     0C 00 90 FD | 	jmp	#LR__0296
0460c                 | LR__0294
0460c     10 FA 05 F6 | 	mov	result1, #16
04610     04 00 90 FD | 	jmp	#LR__0296
04614                 | LR__0295
04614     00 FA 05 F6 | 	mov	result1, #0
04618                 | LR__0296
04618     A7 F0 03 F6 | 	mov	ptra, fp
0461c     B2 00 A0 FD | 	call	#popregs_
04620                 | _isseparator_ret
04620     2D 00 64 FD | 	ret
04624                 | 
04624                 | ' 
04624                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04624                 | ' 
04624                 | ' function iscommand(s as string) as ubyte
04624                 | _iscommand
04624     01 4A 05 F6 | 	mov	COUNT_, #1
04628     A8 00 A0 FD | 	call	#pushregs_
0462c                 | ' 
0462c                 | ' select case s
0462c     09 1F 02 F6 | 	mov	local01, arg01
04630     81 01 00 FF 
04634     8C 15 06 F6 | 	mov	arg02, ##@LR__5184
04638     0F 13 02 F6 | 	mov	arg01, local01
0463c     24 C3 B1 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     44 0B 90 AD |  if_e	jmp	#LR__0300
04648     81 01 00 FF 
0464c     91 15 06 F6 | 	mov	arg02, ##@LR__5185
04650     0F 13 02 F6 | 	mov	arg01, local01
04654     0C C3 B1 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     34 0B 90 AD |  if_e	jmp	#LR__0301
04660     81 01 00 FF 
04664     94 15 06 F6 | 	mov	arg02, ##@LR__5186
04668     0F 13 02 F6 | 	mov	arg01, local01
0466c     F4 C2 B1 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     24 0B 90 AD |  if_e	jmp	#LR__0302
04678     81 01 00 FF 
0467c     98 15 06 F6 | 	mov	arg02, ##@LR__5187
04680     0F 13 02 F6 | 	mov	arg01, local01
04684     DC C2 B1 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     14 0B 90 AD |  if_e	jmp	#LR__0303
04690     81 01 00 FF 
04694     9D 15 06 F6 | 	mov	arg02, ##@LR__5188
04698     0F 13 02 F6 | 	mov	arg01, local01
0469c     C4 C2 B1 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     04 0B 90 AD |  if_e	jmp	#LR__0304
046a8     81 01 00 FF 
046ac     A1 15 06 F6 | 	mov	arg02, ##@LR__5189
046b0     0F 13 02 F6 | 	mov	arg01, local01
046b4     AC C2 B1 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     F4 0A 90 AD |  if_e	jmp	#LR__0305
046c0     81 01 00 FF 
046c4     AC 15 06 F6 | 	mov	arg02, ##@LR__5190
046c8     0F 13 02 F6 | 	mov	arg01, local01
046cc     94 C2 B1 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     E4 0A 90 AD |  if_e	jmp	#LR__0306
046d8     81 01 00 FF 
046dc     B0 15 06 F6 | 	mov	arg02, ##@LR__5191
046e0     0F 13 02 F6 | 	mov	arg01, local01
046e4     7C C2 B1 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     D4 0A 90 AD |  if_e	jmp	#LR__0307
046f0     81 01 00 FF 
046f4     BA 15 06 F6 | 	mov	arg02, ##@LR__5192
046f8     0F 13 02 F6 | 	mov	arg01, local01
046fc     64 C2 B1 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     C4 0A 90 AD |  if_e	jmp	#LR__0308
04708     81 01 00 FF 
0470c     BE 15 06 F6 | 	mov	arg02, ##@LR__5193
04710     0F 13 02 F6 | 	mov	arg01, local01
04714     4C C2 B1 FD | 	call	#__system___string_cmp
04718     00 FA 0D F2 | 	cmp	result1, #0 wz
0471c     B4 0A 90 AD |  if_e	jmp	#LR__0309
04720     81 01 00 FF 
04724     C8 15 06 F6 | 	mov	arg02, ##@LR__5194
04728     0F 13 02 F6 | 	mov	arg01, local01
0472c     34 C2 B1 FD | 	call	#__system___string_cmp
04730     00 FA 0D F2 | 	cmp	result1, #0 wz
04734     A4 0A 90 AD |  if_e	jmp	#LR__0310
04738     81 01 00 FF 
0473c     CC 15 06 F6 | 	mov	arg02, ##@LR__5195
04740     0F 13 02 F6 | 	mov	arg01, local01
04744     1C C2 B1 FD | 	call	#__system___string_cmp
04748     00 FA 0D F2 | 	cmp	result1, #0 wz
0474c     94 0A 90 AD |  if_e	jmp	#LR__0311
04750     81 01 00 FF 
04754     D7 15 06 F6 | 	mov	arg02, ##@LR__5196
04758     0F 13 02 F6 | 	mov	arg01, local01
0475c     04 C2 B1 FD | 	call	#__system___string_cmp
04760     00 FA 0D F2 | 	cmp	result1, #0 wz
04764     84 0A 90 AD |  if_e	jmp	#LR__0312
04768     81 01 00 FF 
0476c     DB 15 06 F6 | 	mov	arg02, ##@LR__5197
04770     0F 13 02 F6 | 	mov	arg01, local01
04774     EC C1 B1 FD | 	call	#__system___string_cmp
04778     00 FA 0D F2 | 	cmp	result1, #0 wz
0477c     74 0A 90 AD |  if_e	jmp	#LR__0313
04780     81 01 00 FF 
04784     E2 15 06 F6 | 	mov	arg02, ##@LR__5198
04788     0F 13 02 F6 | 	mov	arg01, local01
0478c     D4 C1 B1 FD | 	call	#__system___string_cmp
04790     00 FA 0D F2 | 	cmp	result1, #0 wz
04794     64 0A 90 AD |  if_e	jmp	#LR__0314
04798     81 01 00 FF 
0479c     E6 15 06 F6 | 	mov	arg02, ##@LR__5199
047a0     0F 13 02 F6 | 	mov	arg01, local01
047a4     BC C1 B1 FD | 	call	#__system___string_cmp
047a8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ac     54 0A 90 AD |  if_e	jmp	#LR__0315
047b0     81 01 00 FF 
047b4     EC 15 06 F6 | 	mov	arg02, ##@LR__5200
047b8     0F 13 02 F6 | 	mov	arg01, local01
047bc     A4 C1 B1 FD | 	call	#__system___string_cmp
047c0     00 FA 0D F2 | 	cmp	result1, #0 wz
047c4     44 0A 90 AD |  if_e	jmp	#LR__0316
047c8     81 01 00 FF 
047cc     F2 15 06 F6 | 	mov	arg02, ##@LR__5201
047d0     0F 13 02 F6 | 	mov	arg01, local01
047d4     8C C1 B1 FD | 	call	#__system___string_cmp
047d8     00 FA 0D F2 | 	cmp	result1, #0 wz
047dc     34 0A 90 AD |  if_e	jmp	#LR__0317
047e0     81 01 00 FF 
047e4     F6 15 06 F6 | 	mov	arg02, ##@LR__5202
047e8     0F 13 02 F6 | 	mov	arg01, local01
047ec     74 C1 B1 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     24 0A 90 AD |  if_e	jmp	#LR__0318
047f8     81 01 00 FF 
047fc     FC 15 06 F6 | 	mov	arg02, ##@LR__5203
04800     0F 13 02 F6 | 	mov	arg01, local01
04804     5C C1 B1 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     14 0A 90 AD |  if_e	jmp	#LR__0319
04810     81 01 00 FF 
04814     FF 15 06 F6 | 	mov	arg02, ##@LR__5204
04818     0F 13 02 F6 | 	mov	arg01, local01
0481c     44 C1 B1 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     04 0A 90 AD |  if_e	jmp	#LR__0320
04828     82 01 00 FF 
0482c     05 14 06 F6 | 	mov	arg02, ##@LR__5205
04830     0F 13 02 F6 | 	mov	arg01, local01
04834     2C C1 B1 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     F4 09 90 AD |  if_e	jmp	#LR__0321
04840     82 01 00 FF 
04844     09 14 06 F6 | 	mov	arg02, ##@LR__5206
04848     0F 13 02 F6 | 	mov	arg01, local01
0484c     14 C1 B1 FD | 	call	#__system___string_cmp
04850     00 FA 0D F2 | 	cmp	result1, #0 wz
04854     E4 09 90 AD |  if_e	jmp	#LR__0322
04858     82 01 00 FF 
0485c     10 14 06 F6 | 	mov	arg02, ##@LR__5207
04860     0F 13 02 F6 | 	mov	arg01, local01
04864     FC C0 B1 FD | 	call	#__system___string_cmp
04868     00 FA 0D F2 | 	cmp	result1, #0 wz
0486c     D4 09 90 AD |  if_e	jmp	#LR__0323
04870     82 01 00 FF 
04874     17 14 06 F6 | 	mov	arg02, ##@LR__5208
04878     0F 13 02 F6 | 	mov	arg01, local01
0487c     E4 C0 B1 FD | 	call	#__system___string_cmp
04880     00 FA 0D F2 | 	cmp	result1, #0 wz
04884     C4 09 90 AD |  if_e	jmp	#LR__0324
04888     82 01 00 FF 
0488c     1E 14 06 F6 | 	mov	arg02, ##@LR__5209
04890     0F 13 02 F6 | 	mov	arg01, local01
04894     CC C0 B1 FD | 	call	#__system___string_cmp
04898     00 FA 0D F2 | 	cmp	result1, #0 wz
0489c     B4 09 90 AD |  if_e	jmp	#LR__0325
048a0     82 01 00 FF 
048a4     28 14 06 F6 | 	mov	arg02, ##@LR__5210
048a8     0F 13 02 F6 | 	mov	arg01, local01
048ac     B4 C0 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     A4 09 90 AD |  if_e	jmp	#LR__0326
048b8     82 01 00 FF 
048bc     2C 14 06 F6 | 	mov	arg02, ##@LR__5211
048c0     0F 13 02 F6 | 	mov	arg01, local01
048c4     9C C0 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     94 09 90 AD |  if_e	jmp	#LR__0327
048d0     82 01 00 FF 
048d4     30 14 06 F6 | 	mov	arg02, ##@LR__5212
048d8     0F 13 02 F6 | 	mov	arg01, local01
048dc     84 C0 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     84 09 90 AD |  if_e	jmp	#LR__0328
048e8     82 01 00 FF 
048ec     34 14 06 F6 | 	mov	arg02, ##@LR__5213
048f0     0F 13 02 F6 | 	mov	arg01, local01
048f4     6C C0 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     74 09 90 AD |  if_e	jmp	#LR__0329
04900     82 01 00 FF 
04904     38 14 06 F6 | 	mov	arg02, ##@LR__5214
04908     0F 13 02 F6 | 	mov	arg01, local01
0490c     54 C0 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     64 09 90 AD |  if_e	jmp	#LR__0330
04918     82 01 00 FF 
0491c     3E 14 06 F6 | 	mov	arg02, ##@LR__5215
04920     0F 13 02 F6 | 	mov	arg01, local01
04924     3C C0 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     54 09 90 AD |  if_e	jmp	#LR__0331
04930     82 01 00 FF 
04934     43 14 06 F6 | 	mov	arg02, ##@LR__5216
04938     0F 13 02 F6 | 	mov	arg01, local01
0493c     24 C0 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     44 09 90 AD |  if_e	jmp	#LR__0332
04948     82 01 00 FF 
0494c     47 14 06 F6 | 	mov	arg02, ##@LR__5217
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     0C C0 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     34 09 90 AD |  if_e	jmp	#LR__0333
04960     82 01 00 FF 
04964     4C 14 06 F6 | 	mov	arg02, ##@LR__5218
04968     0F 13 02 F6 | 	mov	arg01, local01
0496c     F4 BF B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     24 09 90 AD |  if_e	jmp	#LR__0334
04978     82 01 00 FF 
0497c     50 14 06 F6 | 	mov	arg02, ##@LR__5219
04980     0F 13 02 F6 | 	mov	arg01, local01
04984     DC BF B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     14 09 90 AD |  if_e	jmp	#LR__0335
04990     82 01 00 FF 
04994     56 14 06 F6 | 	mov	arg02, ##@LR__5220
04998     0F 13 02 F6 | 	mov	arg01, local01
0499c     C4 BF B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     04 09 90 AD |  if_e	jmp	#LR__0336
049a8     82 01 00 FF 
049ac     59 14 06 F6 | 	mov	arg02, ##@LR__5221
049b0     0F 13 02 F6 | 	mov	arg01, local01
049b4     AC BF B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     F4 08 90 AD |  if_e	jmp	#LR__0337
049c0     82 01 00 FF 
049c4     61 14 06 F6 | 	mov	arg02, ##@LR__5222
049c8     0F 13 02 F6 | 	mov	arg01, local01
049cc     94 BF B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     E4 08 90 AD |  if_e	jmp	#LR__0338
049d8     82 01 00 FF 
049dc     65 14 06 F6 | 	mov	arg02, ##@LR__5223
049e0     0F 13 02 F6 | 	mov	arg01, local01
049e4     7C BF B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     D4 08 90 AD |  if_e	jmp	#LR__0339
049f0     82 01 00 FF 
049f4     6A 14 06 F6 | 	mov	arg02, ##@LR__5224
049f8     0F 13 02 F6 | 	mov	arg01, local01
049fc     64 BF B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     C4 08 90 AD |  if_e	jmp	#LR__0340
04a08     82 01 00 FF 
04a0c     6E 14 06 F6 | 	mov	arg02, ##@LR__5225
04a10     0F 13 02 F6 | 	mov	arg01, local01
04a14     4C BF B1 FD | 	call	#__system___string_cmp
04a18     00 FA 0D F2 | 	cmp	result1, #0 wz
04a1c     B4 08 90 AD |  if_e	jmp	#LR__0341
04a20     82 01 00 FF 
04a24     73 14 06 F6 | 	mov	arg02, ##@LR__5226
04a28     0F 13 02 F6 | 	mov	arg01, local01
04a2c     34 BF B1 FD | 	call	#__system___string_cmp
04a30     00 FA 0D F2 | 	cmp	result1, #0 wz
04a34     A4 08 90 AD |  if_e	jmp	#LR__0342
04a38     82 01 00 FF 
04a3c     77 14 06 F6 | 	mov	arg02, ##@LR__5227
04a40     0F 13 02 F6 | 	mov	arg01, local01
04a44     1C BF B1 FD | 	call	#__system___string_cmp
04a48     00 FA 0D F2 | 	cmp	result1, #0 wz
04a4c     94 08 90 AD |  if_e	jmp	#LR__0343
04a50     82 01 00 FF 
04a54     7A 14 06 F6 | 	mov	arg02, ##@LR__5228
04a58     0F 13 02 F6 | 	mov	arg01, local01
04a5c     04 BF B1 FD | 	call	#__system___string_cmp
04a60     00 FA 0D F2 | 	cmp	result1, #0 wz
04a64     84 08 90 AD |  if_e	jmp	#LR__0344
04a68     82 01 00 FF 
04a6c     80 14 06 F6 | 	mov	arg02, ##@LR__5229
04a70     0F 13 02 F6 | 	mov	arg01, local01
04a74     EC BE B1 FD | 	call	#__system___string_cmp
04a78     00 FA 0D F2 | 	cmp	result1, #0 wz
04a7c     74 08 90 AD |  if_e	jmp	#LR__0345
04a80     82 01 00 FF 
04a84     84 14 06 F6 | 	mov	arg02, ##@LR__5230
04a88     0F 13 02 F6 | 	mov	arg01, local01
04a8c     D4 BE B1 FD | 	call	#__system___string_cmp
04a90     00 FA 0D F2 | 	cmp	result1, #0 wz
04a94     64 08 90 AD |  if_e	jmp	#LR__0346
04a98     82 01 00 FF 
04a9c     88 14 06 F6 | 	mov	arg02, ##@LR__5231
04aa0     0F 13 02 F6 | 	mov	arg01, local01
04aa4     BC BE B1 FD | 	call	#__system___string_cmp
04aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04aac     54 08 90 AD |  if_e	jmp	#LR__0347
04ab0     82 01 00 FF 
04ab4     8E 14 06 F6 | 	mov	arg02, ##@LR__5232
04ab8     0F 13 02 F6 | 	mov	arg01, local01
04abc     A4 BE B1 FD | 	call	#__system___string_cmp
04ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac4     44 08 90 AD |  if_e	jmp	#LR__0348
04ac8     82 01 00 FF 
04acc     93 14 06 F6 | 	mov	arg02, ##@LR__5233
04ad0     0F 13 02 F6 | 	mov	arg01, local01
04ad4     8C BE B1 FD | 	call	#__system___string_cmp
04ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
04adc     34 08 90 AD |  if_e	jmp	#LR__0349
04ae0     82 01 00 FF 
04ae4     96 14 06 F6 | 	mov	arg02, ##@LR__5234
04ae8     0F 13 02 F6 | 	mov	arg01, local01
04aec     74 BE B1 FD | 	call	#__system___string_cmp
04af0     00 FA 0D F2 | 	cmp	result1, #0 wz
04af4     24 08 90 AD |  if_e	jmp	#LR__0350
04af8     82 01 00 FF 
04afc     99 14 06 F6 | 	mov	arg02, ##@LR__5235
04b00     0F 13 02 F6 | 	mov	arg01, local01
04b04     5C BE B1 FD | 	call	#__system___string_cmp
04b08     00 FA 0D F2 | 	cmp	result1, #0 wz
04b0c     14 08 90 AD |  if_e	jmp	#LR__0351
04b10     82 01 00 FF 
04b14     9D 14 06 F6 | 	mov	arg02, ##@LR__5236
04b18     0F 13 02 F6 | 	mov	arg01, local01
04b1c     44 BE B1 FD | 	call	#__system___string_cmp
04b20     00 FA 0D F2 | 	cmp	result1, #0 wz
04b24     04 08 90 AD |  if_e	jmp	#LR__0352
04b28     82 01 00 FF 
04b2c     A0 14 06 F6 | 	mov	arg02, ##@LR__5237
04b30     0F 13 02 F6 | 	mov	arg01, local01
04b34     2C BE B1 FD | 	call	#__system___string_cmp
04b38     00 FA 0D F2 | 	cmp	result1, #0 wz
04b3c     F4 07 90 AD |  if_e	jmp	#LR__0353
04b40     82 01 00 FF 
04b44     A5 14 06 F6 | 	mov	arg02, ##@LR__5238
04b48     0F 13 02 F6 | 	mov	arg01, local01
04b4c     14 BE B1 FD | 	call	#__system___string_cmp
04b50     00 FA 0D F2 | 	cmp	result1, #0 wz
04b54     E4 07 90 AD |  if_e	jmp	#LR__0354
04b58     82 01 00 FF 
04b5c     A8 14 06 F6 | 	mov	arg02, ##@LR__5239
04b60     0F 13 02 F6 | 	mov	arg01, local01
04b64     FC BD B1 FD | 	call	#__system___string_cmp
04b68     00 FA 0D F2 | 	cmp	result1, #0 wz
04b6c     D4 07 90 AD |  if_e	jmp	#LR__0355
04b70     82 01 00 FF 
04b74     AD 14 06 F6 | 	mov	arg02, ##@LR__5240
04b78     0F 13 02 F6 | 	mov	arg01, local01
04b7c     E4 BD B1 FD | 	call	#__system___string_cmp
04b80     00 FA 0D F2 | 	cmp	result1, #0 wz
04b84     C4 07 90 AD |  if_e	jmp	#LR__0356
04b88     82 01 00 FF 
04b8c     B1 14 06 F6 | 	mov	arg02, ##@LR__5241
04b90     0F 13 02 F6 | 	mov	arg01, local01
04b94     CC BD B1 FD | 	call	#__system___string_cmp
04b98     00 FA 0D F2 | 	cmp	result1, #0 wz
04b9c     B4 07 90 AD |  if_e	jmp	#LR__0357
04ba0     82 01 00 FF 
04ba4     B7 14 06 F6 | 	mov	arg02, ##@LR__5242
04ba8     0F 13 02 F6 | 	mov	arg01, local01
04bac     B4 BD B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     A4 07 90 AD |  if_e	jmp	#LR__0358
04bb8     82 01 00 FF 
04bbc     BC 14 06 F6 | 	mov	arg02, ##@LR__5243
04bc0     0F 13 02 F6 | 	mov	arg01, local01
04bc4     9C BD B1 FD | 	call	#__system___string_cmp
04bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bcc     94 07 90 AD |  if_e	jmp	#LR__0359
04bd0     82 01 00 FF 
04bd4     BF 14 06 F6 | 	mov	arg02, ##@LR__5244
04bd8     0F 13 02 F6 | 	mov	arg01, local01
04bdc     84 BD B1 FD | 	call	#__system___string_cmp
04be0     00 FA 0D F2 | 	cmp	result1, #0 wz
04be4     84 07 90 AD |  if_e	jmp	#LR__0360
04be8     82 01 00 FF 
04bec     C5 14 06 F6 | 	mov	arg02, ##@LR__5245
04bf0     0F 13 02 F6 | 	mov	arg01, local01
04bf4     6C BD B1 FD | 	call	#__system___string_cmp
04bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bfc     74 07 90 AD |  if_e	jmp	#LR__0361
04c00     82 01 00 FF 
04c04     C9 14 06 F6 | 	mov	arg02, ##@LR__5246
04c08     0F 13 02 F6 | 	mov	arg01, local01
04c0c     54 BD B1 FD | 	call	#__system___string_cmp
04c10     00 FA 0D F2 | 	cmp	result1, #0 wz
04c14     64 07 90 AD |  if_e	jmp	#LR__0362
04c18     82 01 00 FF 
04c1c     CE 14 06 F6 | 	mov	arg02, ##@LR__5247
04c20     0F 13 02 F6 | 	mov	arg01, local01
04c24     3C BD B1 FD | 	call	#__system___string_cmp
04c28     00 FA 0D F2 | 	cmp	result1, #0 wz
04c2c     54 07 90 AD |  if_e	jmp	#LR__0363
04c30     82 01 00 FF 
04c34     D1 14 06 F6 | 	mov	arg02, ##@LR__5248
04c38     0F 13 02 F6 | 	mov	arg01, local01
04c3c     24 BD B1 FD | 	call	#__system___string_cmp
04c40     00 FA 0D F2 | 	cmp	result1, #0 wz
04c44     44 07 90 AD |  if_e	jmp	#LR__0364
04c48     82 01 00 FF 
04c4c     D6 14 06 F6 | 	mov	arg02, ##@LR__5249
04c50     0F 13 02 F6 | 	mov	arg01, local01
04c54     0C BD B1 FD | 	call	#__system___string_cmp
04c58     00 FA 0D F2 | 	cmp	result1, #0 wz
04c5c     34 07 90 AD |  if_e	jmp	#LR__0365
04c60     82 01 00 FF 
04c64     DC 14 06 F6 | 	mov	arg02, ##@LR__5250
04c68     0F 13 02 F6 | 	mov	arg01, local01
04c6c     F4 BC B1 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     24 07 90 AD |  if_e	jmp	#LR__0366
04c78     82 01 00 FF 
04c7c     E0 14 06 F6 | 	mov	arg02, ##@LR__5251
04c80     0F 13 02 F6 | 	mov	arg01, local01
04c84     DC BC B1 FD | 	call	#__system___string_cmp
04c88     00 FA 0D F2 | 	cmp	result1, #0 wz
04c8c     14 07 90 AD |  if_e	jmp	#LR__0367
04c90     82 01 00 FF 
04c94     E9 14 06 F6 | 	mov	arg02, ##@LR__5252
04c98     0F 13 02 F6 | 	mov	arg01, local01
04c9c     C4 BC B1 FD | 	call	#__system___string_cmp
04ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca4     04 07 90 AD |  if_e	jmp	#LR__0368
04ca8     82 01 00 FF 
04cac     EF 14 06 F6 | 	mov	arg02, ##@LR__5253
04cb0     0F 13 02 F6 | 	mov	arg01, local01
04cb4     AC BC B1 FD | 	call	#__system___string_cmp
04cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cbc     F4 06 90 AD |  if_e	jmp	#LR__0369
04cc0     82 01 00 FF 
04cc4     F5 14 06 F6 | 	mov	arg02, ##@LR__5254
04cc8     0F 13 02 F6 | 	mov	arg01, local01
04ccc     94 BC B1 FD | 	call	#__system___string_cmp
04cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd4     E4 06 90 AD |  if_e	jmp	#LR__0370
04cd8     82 01 00 FF 
04cdc     FE 14 06 F6 | 	mov	arg02, ##@LR__5255
04ce0     0F 13 02 F6 | 	mov	arg01, local01
04ce4     7C BC B1 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     D4 06 90 AD |  if_e	jmp	#LR__0371
04cf0     82 01 00 FF 
04cf4     08 15 06 F6 | 	mov	arg02, ##@LR__5256
04cf8     0F 13 02 F6 | 	mov	arg01, local01
04cfc     64 BC B1 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     C4 06 90 AD |  if_e	jmp	#LR__0372
04d08     82 01 00 FF 
04d0c     11 15 06 F6 | 	mov	arg02, ##@LR__5257
04d10     0F 13 02 F6 | 	mov	arg01, local01
04d14     4C BC B1 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     B4 06 90 AD |  if_e	jmp	#LR__0373
04d20     82 01 00 FF 
04d24     16 15 06 F6 | 	mov	arg02, ##@LR__5258
04d28     0F 13 02 F6 | 	mov	arg01, local01
04d2c     34 BC B1 FD | 	call	#__system___string_cmp
04d30     00 FA 0D F2 | 	cmp	result1, #0 wz
04d34     A4 06 90 AD |  if_e	jmp	#LR__0374
04d38     82 01 00 FF 
04d3c     19 15 06 F6 | 	mov	arg02, ##@LR__5259
04d40     0F 13 02 F6 | 	mov	arg01, local01
04d44     1C BC B1 FD | 	call	#__system___string_cmp
04d48     00 FA 0D F2 | 	cmp	result1, #0 wz
04d4c     94 06 90 AD |  if_e	jmp	#LR__0375
04d50     82 01 00 FF 
04d54     1E 15 06 F6 | 	mov	arg02, ##@LR__5260
04d58     0F 13 02 F6 | 	mov	arg01, local01
04d5c     04 BC B1 FD | 	call	#__system___string_cmp
04d60     00 FA 0D F2 | 	cmp	result1, #0 wz
04d64     84 06 90 AD |  if_e	jmp	#LR__0376
04d68     82 01 00 FF 
04d6c     22 15 06 F6 | 	mov	arg02, ##@LR__5261
04d70     0F 13 02 F6 | 	mov	arg01, local01
04d74     EC BB B1 FD | 	call	#__system___string_cmp
04d78     00 FA 0D F2 | 	cmp	result1, #0 wz
04d7c     74 06 90 AD |  if_e	jmp	#LR__0377
04d80     82 01 00 FF 
04d84     27 15 06 F6 | 	mov	arg02, ##@LR__5262
04d88     0F 13 02 F6 | 	mov	arg01, local01
04d8c     D4 BB B1 FD | 	call	#__system___string_cmp
04d90     00 FA 0D F2 | 	cmp	result1, #0 wz
04d94     64 06 90 AD |  if_e	jmp	#LR__0378
04d98     82 01 00 FF 
04d9c     2B 15 06 F6 | 	mov	arg02, ##@LR__5263
04da0     0F 13 02 F6 | 	mov	arg01, local01
04da4     BC BB B1 FD | 	call	#__system___string_cmp
04da8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dac     54 06 90 AD |  if_e	jmp	#LR__0379
04db0     82 01 00 FF 
04db4     34 15 06 F6 | 	mov	arg02, ##@LR__5264
04db8     0F 13 02 F6 | 	mov	arg01, local01
04dbc     A4 BB B1 FD | 	call	#__system___string_cmp
04dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc4     44 06 90 AD |  if_e	jmp	#LR__0380
04dc8     82 01 00 FF 
04dcc     39 15 06 F6 | 	mov	arg02, ##@LR__5265
04dd0     0F 13 02 F6 | 	mov	arg01, local01
04dd4     8C BB B1 FD | 	call	#__system___string_cmp
04dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ddc     34 06 90 AD |  if_e	jmp	#LR__0381
04de0     82 01 00 FF 
04de4     3F 15 06 F6 | 	mov	arg02, ##@LR__5266
04de8     0F 13 02 F6 | 	mov	arg01, local01
04dec     74 BB B1 FD | 	call	#__system___string_cmp
04df0     00 FA 0D F2 | 	cmp	result1, #0 wz
04df4     24 06 90 AD |  if_e	jmp	#LR__0382
04df8     82 01 00 FF 
04dfc     41 15 06 F6 | 	mov	arg02, ##@LR__5267
04e00     0F 13 02 F6 | 	mov	arg01, local01
04e04     5C BB B1 FD | 	call	#__system___string_cmp
04e08     00 FA 0D F2 | 	cmp	result1, #0 wz
04e0c     14 06 90 AD |  if_e	jmp	#LR__0383
04e10     82 01 00 FF 
04e14     45 15 06 F6 | 	mov	arg02, ##@LR__5268
04e18     0F 13 02 F6 | 	mov	arg01, local01
04e1c     44 BB B1 FD | 	call	#__system___string_cmp
04e20     00 FA 0D F2 | 	cmp	result1, #0 wz
04e24     04 06 90 AD |  if_e	jmp	#LR__0384
04e28     82 01 00 FF 
04e2c     49 15 06 F6 | 	mov	arg02, ##@LR__5269
04e30     0F 13 02 F6 | 	mov	arg01, local01
04e34     2C BB B1 FD | 	call	#__system___string_cmp
04e38     00 FA 0D F2 | 	cmp	result1, #0 wz
04e3c     F4 05 90 AD |  if_e	jmp	#LR__0385
04e40     82 01 00 FF 
04e44     51 15 06 F6 | 	mov	arg02, ##@LR__5270
04e48     0F 13 02 F6 | 	mov	arg01, local01
04e4c     14 BB B1 FD | 	call	#__system___string_cmp
04e50     00 FA 0D F2 | 	cmp	result1, #0 wz
04e54     E4 05 90 AD |  if_e	jmp	#LR__0386
04e58     82 01 00 FF 
04e5c     55 15 06 F6 | 	mov	arg02, ##@LR__5271
04e60     0F 13 02 F6 | 	mov	arg01, local01
04e64     FC BA B1 FD | 	call	#__system___string_cmp
04e68     00 FA 0D F2 | 	cmp	result1, #0 wz
04e6c     D4 05 90 AD |  if_e	jmp	#LR__0387
04e70     82 01 00 FF 
04e74     57 15 06 F6 | 	mov	arg02, ##@LR__5272
04e78     0F 13 02 F6 | 	mov	arg01, local01
04e7c     E4 BA B1 FD | 	call	#__system___string_cmp
04e80     00 FA 0D F2 | 	cmp	result1, #0 wz
04e84     C4 05 90 AD |  if_e	jmp	#LR__0388
04e88     82 01 00 FF 
04e8c     5E 15 06 F6 | 	mov	arg02, ##@LR__5273
04e90     0F 13 02 F6 | 	mov	arg01, local01
04e94     CC BA B1 FD | 	call	#__system___string_cmp
04e98     00 FA 0D F2 | 	cmp	result1, #0 wz
04e9c     B4 05 90 AD |  if_e	jmp	#LR__0389
04ea0     82 01 00 FF 
04ea4     62 15 06 F6 | 	mov	arg02, ##@LR__5274
04ea8     0F 13 02 F6 | 	mov	arg01, local01
04eac     B4 BA B1 FD | 	call	#__system___string_cmp
04eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb4     A4 05 90 AD |  if_e	jmp	#LR__0390
04eb8     82 01 00 FF 
04ebc     67 15 06 F6 | 	mov	arg02, ##@LR__5275
04ec0     0F 13 02 F6 | 	mov	arg01, local01
04ec4     9C BA B1 FD | 	call	#__system___string_cmp
04ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ecc     94 05 90 AD |  if_e	jmp	#LR__0391
04ed0     82 01 00 FF 
04ed4     6A 15 06 F6 | 	mov	arg02, ##@LR__5276
04ed8     0F 13 02 F6 | 	mov	arg01, local01
04edc     84 BA B1 FD | 	call	#__system___string_cmp
04ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee4     84 05 90 AD |  if_e	jmp	#LR__0392
04ee8     82 01 00 FF 
04eec     73 15 06 F6 | 	mov	arg02, ##@LR__5277
04ef0     0F 13 02 F6 | 	mov	arg01, local01
04ef4     6C BA B1 FD | 	call	#__system___string_cmp
04ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
04efc     74 05 90 AD |  if_e	jmp	#LR__0393
04f00     82 01 00 FF 
04f04     77 15 06 F6 | 	mov	arg02, ##@LR__5278
04f08     0F 13 02 F6 | 	mov	arg01, local01
04f0c     54 BA B1 FD | 	call	#__system___string_cmp
04f10     00 FA 0D F2 | 	cmp	result1, #0 wz
04f14     64 05 90 AD |  if_e	jmp	#LR__0394
04f18     82 01 00 FF 
04f1c     7E 15 06 F6 | 	mov	arg02, ##@LR__5279
04f20     0F 13 02 F6 | 	mov	arg01, local01
04f24     3C BA B1 FD | 	call	#__system___string_cmp
04f28     00 FA 0D F2 | 	cmp	result1, #0 wz
04f2c     54 05 90 AD |  if_e	jmp	#LR__0395
04f30     82 01 00 FF 
04f34     82 15 06 F6 | 	mov	arg02, ##@LR__5280
04f38     0F 13 02 F6 | 	mov	arg01, local01
04f3c     24 BA B1 FD | 	call	#__system___string_cmp
04f40     00 FA 0D F2 | 	cmp	result1, #0 wz
04f44     44 05 90 AD |  if_e	jmp	#LR__0396
04f48     82 01 00 FF 
04f4c     89 15 06 F6 | 	mov	arg02, ##@LR__5281
04f50     0F 13 02 F6 | 	mov	arg01, local01
04f54     0C BA B1 FD | 	call	#__system___string_cmp
04f58     00 FA 0D F2 | 	cmp	result1, #0 wz
04f5c     34 05 90 AD |  if_e	jmp	#LR__0397
04f60     82 01 00 FF 
04f64     8D 15 06 F6 | 	mov	arg02, ##@LR__5282
04f68     0F 13 02 F6 | 	mov	arg01, local01
04f6c     F4 B9 B1 FD | 	call	#__system___string_cmp
04f70     00 FA 0D F2 | 	cmp	result1, #0 wz
04f74     24 05 90 AD |  if_e	jmp	#LR__0398
04f78     82 01 00 FF 
04f7c     94 15 06 F6 | 	mov	arg02, ##@LR__5283
04f80     0F 13 02 F6 | 	mov	arg01, local01
04f84     DC B9 B1 FD | 	call	#__system___string_cmp
04f88     00 FA 0D F2 | 	cmp	result1, #0 wz
04f8c     14 05 90 AD |  if_e	jmp	#LR__0399
04f90     82 01 00 FF 
04f94     97 15 06 F6 | 	mov	arg02, ##@LR__5284
04f98     0F 13 02 F6 | 	mov	arg01, local01
04f9c     C4 B9 B1 FD | 	call	#__system___string_cmp
04fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa4     04 05 90 AD |  if_e	jmp	#LR__0400
04fa8     82 01 00 FF 
04fac     A2 15 06 F6 | 	mov	arg02, ##@LR__5285
04fb0     0F 13 02 F6 | 	mov	arg01, local01
04fb4     AC B9 B1 FD | 	call	#__system___string_cmp
04fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fbc     F4 04 90 AD |  if_e	jmp	#LR__0401
04fc0     82 01 00 FF 
04fc4     A6 15 06 F6 | 	mov	arg02, ##@LR__5286
04fc8     0F 13 02 F6 | 	mov	arg01, local01
04fcc     94 B9 B1 FD | 	call	#__system___string_cmp
04fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd4     E4 04 90 AD |  if_e	jmp	#LR__0402
04fd8     82 01 00 FF 
04fdc     AD 15 06 F6 | 	mov	arg02, ##@LR__5287
04fe0     0F 13 02 F6 | 	mov	arg01, local01
04fe4     7C B9 B1 FD | 	call	#__system___string_cmp
04fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fec     D4 04 90 AD |  if_e	jmp	#LR__0403
04ff0     82 01 00 FF 
04ff4     B1 15 06 F6 | 	mov	arg02, ##@LR__5288
04ff8     0F 13 02 F6 | 	mov	arg01, local01
04ffc     64 B9 B1 FD | 	call	#__system___string_cmp
05000     00 FA 0D F2 | 	cmp	result1, #0 wz
05004     C4 04 90 AD |  if_e	jmp	#LR__0404
05008     82 01 00 FF 
0500c     B9 15 06 F6 | 	mov	arg02, ##@LR__5289
05010     0F 13 02 F6 | 	mov	arg01, local01
05014     4C B9 B1 FD | 	call	#__system___string_cmp
05018     00 FA 0D F2 | 	cmp	result1, #0 wz
0501c     B4 04 90 AD |  if_e	jmp	#LR__0405
05020     82 01 00 FF 
05024     BD 15 06 F6 | 	mov	arg02, ##@LR__5290
05028     0F 13 02 F6 | 	mov	arg01, local01
0502c     34 B9 B1 FD | 	call	#__system___string_cmp
05030     00 FA 0D F2 | 	cmp	result1, #0 wz
05034     A4 04 90 AD |  if_e	jmp	#LR__0406
05038     82 01 00 FF 
0503c     C4 15 06 F6 | 	mov	arg02, ##@LR__5291
05040     0F 13 02 F6 | 	mov	arg01, local01
05044     1C B9 B1 FD | 	call	#__system___string_cmp
05048     00 FA 0D F2 | 	cmp	result1, #0 wz
0504c     94 04 90 AD |  if_e	jmp	#LR__0407
05050     82 01 00 FF 
05054     CB 15 06 F6 | 	mov	arg02, ##@LR__5292
05058     0F 13 02 F6 | 	mov	arg01, local01
0505c     04 B9 B1 FD | 	call	#__system___string_cmp
05060     00 FA 0D F2 | 	cmp	result1, #0 wz
05064     84 04 90 AD |  if_e	jmp	#LR__0408
05068     82 01 00 FF 
0506c     CF 15 06 F6 | 	mov	arg02, ##@LR__5293
05070     0F 13 02 F6 | 	mov	arg01, local01
05074     EC B8 B1 FD | 	call	#__system___string_cmp
05078     00 FA 0D F2 | 	cmp	result1, #0 wz
0507c     74 04 90 AD |  if_e	jmp	#LR__0409
05080     82 01 00 FF 
05084     D5 15 06 F6 | 	mov	arg02, ##@LR__5294
05088     0F 13 02 F6 | 	mov	arg01, local01
0508c     D4 B8 B1 FD | 	call	#__system___string_cmp
05090     00 FA 0D F2 | 	cmp	result1, #0 wz
05094     64 04 90 AD |  if_e	jmp	#LR__0410
05098     82 01 00 FF 
0509c     D9 15 06 F6 | 	mov	arg02, ##@LR__5295
050a0     0F 13 02 F6 | 	mov	arg01, local01
050a4     BC B8 B1 FD | 	call	#__system___string_cmp
050a8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ac     54 04 90 AD |  if_e	jmp	#LR__0411
050b0     82 01 00 FF 
050b4     E0 15 06 F6 | 	mov	arg02, ##@LR__5296
050b8     0F 13 02 F6 | 	mov	arg01, local01
050bc     A4 B8 B1 FD | 	call	#__system___string_cmp
050c0     00 FA 0D F2 | 	cmp	result1, #0 wz
050c4     44 04 90 AD |  if_e	jmp	#LR__0412
050c8     82 01 00 FF 
050cc     E5 15 06 F6 | 	mov	arg02, ##@LR__5297
050d0     0F 13 02 F6 | 	mov	arg01, local01
050d4     8C B8 B1 FD | 	call	#__system___string_cmp
050d8     00 FA 0D F2 | 	cmp	result1, #0 wz
050dc     34 04 90 AD |  if_e	jmp	#LR__0413
050e0     82 01 00 FF 
050e4     EA 15 06 F6 | 	mov	arg02, ##@LR__5298
050e8     0F 13 02 F6 | 	mov	arg01, local01
050ec     74 B8 B1 FD | 	call	#__system___string_cmp
050f0     00 FA 0D F2 | 	cmp	result1, #0 wz
050f4     24 04 90 AD |  if_e	jmp	#LR__0414
050f8     82 01 00 FF 
050fc     F1 15 06 F6 | 	mov	arg02, ##@LR__5299
05100     0F 13 02 F6 | 	mov	arg01, local01
05104     5C B8 B1 FD | 	call	#__system___string_cmp
05108     00 FA 0D F2 | 	cmp	result1, #0 wz
0510c     14 04 90 AD |  if_e	jmp	#LR__0415
05110     82 01 00 FF 
05114     FB 15 06 F6 | 	mov	arg02, ##@LR__5300
05118     0F 13 02 F6 | 	mov	arg01, local01
0511c     44 B8 B1 FD | 	call	#__system___string_cmp
05120     00 FA 0D F2 | 	cmp	result1, #0 wz
05124     04 04 90 AD |  if_e	jmp	#LR__0416
05128     82 01 00 FF 
0512c     FF 15 06 F6 | 	mov	arg02, ##@LR__5301
05130     0F 13 02 F6 | 	mov	arg01, local01
05134     2C B8 B1 FD | 	call	#__system___string_cmp
05138     00 FA 0D F2 | 	cmp	result1, #0 wz
0513c     F4 03 90 AD |  if_e	jmp	#LR__0417
05140     83 01 00 FF 
05144     07 14 06 F6 | 	mov	arg02, ##@LR__5302
05148     0F 13 02 F6 | 	mov	arg01, local01
0514c     14 B8 B1 FD | 	call	#__system___string_cmp
05150     00 FA 0D F2 | 	cmp	result1, #0 wz
05154     E4 03 90 AD |  if_e	jmp	#LR__0418
05158     83 01 00 FF 
0515c     0B 14 06 F6 | 	mov	arg02, ##@LR__5303
05160     0F 13 02 F6 | 	mov	arg01, local01
05164     FC B7 B1 FD | 	call	#__system___string_cmp
05168     00 FA 0D F2 | 	cmp	result1, #0 wz
0516c     D4 03 90 AD |  if_e	jmp	#LR__0419
05170     83 01 00 FF 
05174     11 14 06 F6 | 	mov	arg02, ##@LR__5304
05178     0F 13 02 F6 | 	mov	arg01, local01
0517c     E4 B7 B1 FD | 	call	#__system___string_cmp
05180     00 FA 0D F2 | 	cmp	result1, #0 wz
05184     C4 03 90 AD |  if_e	jmp	#LR__0420
05188     C8 03 90 FD | 	jmp	#LR__0421
0518c                 | LR__0300
0518c     5C FA 05 F6 | 	mov	result1, #92
05190     C4 03 90 FD | 	jmp	#LR__0422
05194                 | LR__0301
05194     5C FA 05 F6 | 	mov	result1, #92
05198     BC 03 90 FD | 	jmp	#LR__0422
0519c                 | LR__0302
0519c     47 FA 05 F6 | 	mov	result1, #71
051a0     B4 03 90 FD | 	jmp	#LR__0422
051a4                 | LR__0303
051a4     59 FA 05 F6 | 	mov	result1, #89
051a8     AC 03 90 FD | 	jmp	#LR__0422
051ac                 | LR__0304
051ac     59 FA 05 F6 | 	mov	result1, #89
051b0     A4 03 90 FD | 	jmp	#LR__0422
051b4                 | LR__0305
051b4     AE FA 05 F6 | 	mov	result1, #174
051b8     9C 03 90 FD | 	jmp	#LR__0422
051bc                 | LR__0306
051bc     AE FA 05 F6 | 	mov	result1, #174
051c0     94 03 90 FD | 	jmp	#LR__0422
051c4                 | LR__0307
051c4     B1 FA 05 F6 | 	mov	result1, #177
051c8     8C 03 90 FD | 	jmp	#LR__0422
051cc                 | LR__0308
051cc     B1 FA 05 F6 | 	mov	result1, #177
051d0     84 03 90 FD | 	jmp	#LR__0422
051d4                 | LR__0309
051d4     AF FA 05 F6 | 	mov	result1, #175
051d8     7C 03 90 FD | 	jmp	#LR__0422
051dc                 | LR__0310
051dc     AF FA 05 F6 | 	mov	result1, #175
051e0     74 03 90 FD | 	jmp	#LR__0422
051e4                 | LR__0311
051e4     B0 FA 05 F6 | 	mov	result1, #176
051e8     6C 03 90 FD | 	jmp	#LR__0422
051ec                 | LR__0312
051ec     B0 FA 05 F6 | 	mov	result1, #176
051f0     64 03 90 FD | 	jmp	#LR__0422
051f4                 | LR__0313
051f4     45 FA 05 F6 | 	mov	result1, #69
051f8     5C 03 90 FD | 	jmp	#LR__0422
051fc                 | LR__0314
051fc     45 FA 05 F6 | 	mov	result1, #69
05200     54 03 90 FD | 	jmp	#LR__0422
05204                 | LR__0315
05204     69 FA 05 F6 | 	mov	result1, #105
05208     4C 03 90 FD | 	jmp	#LR__0422
0520c                 | LR__0316
0520c     B4 FA 05 F6 | 	mov	result1, #180
05210     44 03 90 FD | 	jmp	#LR__0422
05214                 | LR__0317
05214     40 FA 05 F6 | 	mov	result1, #64
05218     3C 03 90 FD | 	jmp	#LR__0422
0521c                 | LR__0318
0521c     49 FA 05 F6 | 	mov	result1, #73
05220     34 03 90 FD | 	jmp	#LR__0422
05224                 | LR__0319
05224     49 FA 05 F6 | 	mov	result1, #73
05228     2C 03 90 FD | 	jmp	#LR__0422
0522c                 | LR__0320
0522c     50 FA 05 F6 | 	mov	result1, #80
05230     24 03 90 FD | 	jmp	#LR__0422
05234                 | LR__0321
05234     50 FA 05 F6 | 	mov	result1, #80
05238     1C 03 90 FD | 	jmp	#LR__0422
0523c                 | LR__0322
0523c     68 FA 05 F6 | 	mov	result1, #104
05240     14 03 90 FD | 	jmp	#LR__0422
05244                 | LR__0323
05244     73 FA 05 F6 | 	mov	result1, #115
05248     0C 03 90 FD | 	jmp	#LR__0422
0524c                 | LR__0324
0524c     74 FA 05 F6 | 	mov	result1, #116
05250     04 03 90 FD | 	jmp	#LR__0422
05254                 | LR__0325
05254     6C FA 05 F6 | 	mov	result1, #108
05258     FC 02 90 FD | 	jmp	#LR__0422
0525c                 | LR__0326
0525c     6C FA 05 F6 | 	mov	result1, #108
05260     F4 02 90 FD | 	jmp	#LR__0422
05264                 | LR__0327
05264     89 FA 05 F6 | 	mov	result1, #137
05268     EC 02 90 FD | 	jmp	#LR__0422
0526c                 | LR__0328
0526c     72 FA 05 F6 | 	mov	result1, #114
05270     E4 02 90 FD | 	jmp	#LR__0422
05274                 | LR__0329
05274     5D FA 05 F6 | 	mov	result1, #93
05278     DC 02 90 FD | 	jmp	#LR__0422
0527c                 | LR__0330
0527c     96 FA 05 F6 | 	mov	result1, #150
05280     D4 02 90 FD | 	jmp	#LR__0422
05284                 | LR__0331
05284     43 FA 05 F6 | 	mov	result1, #67
05288     CC 02 90 FD | 	jmp	#LR__0422
0528c                 | LR__0332
0528c     43 FA 05 F6 | 	mov	result1, #67
05290     C4 02 90 FD | 	jmp	#LR__0422
05294                 | LR__0333
05294     5A FA 05 F6 | 	mov	result1, #90
05298     BC 02 90 FD | 	jmp	#LR__0422
0529c                 | LR__0334
0529c     AB FA 05 F6 | 	mov	result1, #171
052a0     B4 02 90 FD | 	jmp	#LR__0422
052a4                 | LR__0335
052a4     BD FA 05 F6 | 	mov	result1, #189
052a8     AC 02 90 FD | 	jmp	#LR__0422
052ac                 | LR__0336
052ac     BD FA 05 F6 | 	mov	result1, #189
052b0     A4 02 90 FD | 	jmp	#LR__0422
052b4                 | LR__0337
052b4     46 FA 05 F6 | 	mov	result1, #70
052b8     9C 02 90 FD | 	jmp	#LR__0422
052bc                 | LR__0338
052bc     46 FA 05 F6 | 	mov	result1, #70
052c0     94 02 90 FD | 	jmp	#LR__0422
052c4                 | LR__0339
052c4     71 FA 05 F6 | 	mov	result1, #113
052c8     8C 02 90 FD | 	jmp	#LR__0422
052cc                 | LR__0340
052cc     71 FA 05 F6 | 	mov	result1, #113
052d0     84 02 90 FD | 	jmp	#LR__0422
052d4                 | LR__0341
052d4     60 FA 05 F6 | 	mov	result1, #96
052d8     7C 02 90 FD | 	jmp	#LR__0422
052dc                 | LR__0342
052dc     4A FA 05 F6 | 	mov	result1, #74
052e0     74 02 90 FD | 	jmp	#LR__0422
052e4                 | LR__0343
052e4     4A FA 05 F6 | 	mov	result1, #74
052e8     6C 02 90 FD | 	jmp	#LR__0422
052ec                 | LR__0344
052ec     48 FA 05 F6 | 	mov	result1, #72
052f0     64 02 90 FD | 	jmp	#LR__0422
052f4                 | LR__0345
052f4     48 FA 05 F6 | 	mov	result1, #72
052f8     5C 02 90 FD | 	jmp	#LR__0422
052fc                 | LR__0346
052fc     BB FA 05 F6 | 	mov	result1, #187
05300     54 02 90 FD | 	jmp	#LR__0422
05304                 | LR__0347
05304     A9 FA 05 F6 | 	mov	result1, #169
05308     4C 02 90 FD | 	jmp	#LR__0422
0530c                 | LR__0348
0530c     4E FA 05 F6 | 	mov	result1, #78
05310     44 02 90 FD | 	jmp	#LR__0422
05314                 | LR__0349
05314     4E FA 05 F6 | 	mov	result1, #78
05318     3C 02 90 FD | 	jmp	#LR__0422
0531c                 | LR__0350
0531c     58 FA 05 F6 | 	mov	result1, #88
05320     34 02 90 FD | 	jmp	#LR__0422
05324                 | LR__0351
05324     5F FA 05 F6 | 	mov	result1, #95
05328     2C 02 90 FD | 	jmp	#LR__0422
0532c                 | LR__0352
0532c     5F FA 05 F6 | 	mov	result1, #95
05330     24 02 90 FD | 	jmp	#LR__0422
05334                 | LR__0353
05334     4C FA 05 F6 | 	mov	result1, #76
05338     1C 02 90 FD | 	jmp	#LR__0422
0533c                 | LR__0354
0533c     4C FA 05 F6 | 	mov	result1, #76
05340     14 02 90 FD | 	jmp	#LR__0422
05344                 | LR__0355
05344     52 FA 05 F6 | 	mov	result1, #82
05348     0C 02 90 FD | 	jmp	#LR__0422
0534c                 | LR__0356
0534c     52 FA 05 F6 | 	mov	result1, #82
05350     04 02 90 FD | 	jmp	#LR__0422
05354                 | LR__0357
05354     97 FA 05 F6 | 	mov	result1, #151
05358     FC 01 90 FD | 	jmp	#LR__0422
0535c                 | LR__0358
0535c     61 FA 05 F6 | 	mov	result1, #97
05360     F4 01 90 FD | 	jmp	#LR__0422
05364                 | LR__0359
05364     61 FA 05 F6 | 	mov	result1, #97
05368     EC 01 90 FD | 	jmp	#LR__0422
0536c                 | LR__0360
0536c     63 FA 05 F6 | 	mov	result1, #99
05370     E4 01 90 FD | 	jmp	#LR__0422
05374                 | LR__0361
05374     41 FA 05 F6 | 	mov	result1, #65
05378     DC 01 90 FD | 	jmp	#LR__0422
0537c                 | LR__0362
0537c     4B FA 05 F6 | 	mov	result1, #75
05380     D4 01 90 FD | 	jmp	#LR__0422
05384                 | LR__0363
05384     4B FA 05 F6 | 	mov	result1, #75
05388     CC 01 90 FD | 	jmp	#LR__0422
0538c                 | LR__0364
0538c     B3 FA 05 F6 | 	mov	result1, #179
05390     C4 01 90 FD | 	jmp	#LR__0422
05394                 | LR__0365
05394     5E FA 05 F6 | 	mov	result1, #94
05398     BC 01 90 FD | 	jmp	#LR__0422
0539c                 | LR__0366
0539c     5E FA 05 F6 | 	mov	result1, #94
053a0     B4 01 90 FD | 	jmp	#LR__0422
053a4                 | LR__0367
053a4     7C FA 05 F6 | 	mov	result1, #124
053a8     AC 01 90 FD | 	jmp	#LR__0422
053ac                 | LR__0368
053ac     7E FA 05 F6 | 	mov	result1, #126
053b0     A4 01 90 FD | 	jmp	#LR__0422
053b4                 | LR__0369
053b4     7D FA 05 F6 | 	mov	result1, #125
053b8     9C 01 90 FD | 	jmp	#LR__0422
053bc                 | LR__0370
053bc     7F FA 05 F6 | 	mov	result1, #127
053c0     94 01 90 FD | 	jmp	#LR__0422
053c4                 | LR__0371
053c4     80 FA 05 F6 | 	mov	result1, #128
053c8     8C 01 90 FD | 	jmp	#LR__0422
053cc                 | LR__0372
053cc     55 FA 05 F6 | 	mov	result1, #85
053d0     84 01 90 FD | 	jmp	#LR__0422
053d4                 | LR__0373
053d4     75 FA 05 F6 | 	mov	result1, #117
053d8     7C 01 90 FD | 	jmp	#LR__0422
053dc                 | LR__0374
053dc     75 FA 05 F6 | 	mov	result1, #117
053e0     74 01 90 FD | 	jmp	#LR__0422
053e4                 | LR__0375
053e4     42 FA 05 F6 | 	mov	result1, #66
053e8     6C 01 90 FD | 	jmp	#LR__0422
053ec                 | LR__0376
053ec     42 FA 05 F6 | 	mov	result1, #66
053f0     64 01 90 FD | 	jmp	#LR__0422
053f4                 | LR__0377
053f4     95 FA 05 F6 | 	mov	result1, #149
053f8     5C 01 90 FD | 	jmp	#LR__0422
053fc                 | LR__0378
053fc     AC FA 05 F6 | 	mov	result1, #172
05400     54 01 90 FD | 	jmp	#LR__0422
05404                 | LR__0379
05404     81 FA 05 F6 | 	mov	result1, #129
05408     4C 01 90 FD | 	jmp	#LR__0422
0540c                 | LR__0380
0540c     81 FA 05 F6 | 	mov	result1, #129
05410     44 01 90 FD | 	jmp	#LR__0422
05414                 | LR__0381
05414     44 FA 05 F6 | 	mov	result1, #68
05418     3C 01 90 FD | 	jmp	#LR__0422
0541c                 | LR__0382
0541c     44 FA 05 F6 | 	mov	result1, #68
05420     34 01 90 FD | 	jmp	#LR__0422
05424                 | LR__0383
05424     BC FA 05 F6 | 	mov	result1, #188
05428     2C 01 90 FD | 	jmp	#LR__0422
0542c                 | LR__0384
0542c     88 FA 05 F6 | 	mov	result1, #136
05430     24 01 90 FD | 	jmp	#LR__0422
05434                 | LR__0385
05434     92 FA 05 F6 | 	mov	result1, #146
05438     1C 01 90 FD | 	jmp	#LR__0422
0543c                 | LR__0386
0543c     BE FA 05 F6 | 	mov	result1, #190
05440     14 01 90 FD | 	jmp	#LR__0422
05444                 | LR__0387
05444     BE FA 05 F6 | 	mov	result1, #190
05448     0C 01 90 FD | 	jmp	#LR__0422
0544c                 | LR__0388
0544c     AA FA 05 F6 | 	mov	result1, #170
05450     04 01 90 FD | 	jmp	#LR__0422
05454                 | LR__0389
05454     4D FA 05 F6 | 	mov	result1, #77
05458     FC 00 90 FD | 	jmp	#LR__0422
0545c                 | LR__0390
0545c     51 FA 05 F6 | 	mov	result1, #81
05460     F4 00 90 FD | 	jmp	#LR__0422
05464                 | LR__0391
05464     51 FA 05 F6 | 	mov	result1, #81
05468     EC 00 90 FD | 	jmp	#LR__0422
0546c                 | LR__0392
0546c     8E FA 05 F6 | 	mov	result1, #142
05470     E4 00 90 FD | 	jmp	#LR__0422
05474                 | LR__0393
05474     8E FA 05 F6 | 	mov	result1, #142
05478     DC 00 90 FD | 	jmp	#LR__0422
0547c                 | LR__0394
0547c     90 FA 05 F6 | 	mov	result1, #144
05480     D4 00 90 FD | 	jmp	#LR__0422
05484                 | LR__0395
05484     90 FA 05 F6 | 	mov	result1, #144
05488     CC 00 90 FD | 	jmp	#LR__0422
0548c                 | LR__0396
0548c     8D FA 05 F6 | 	mov	result1, #141
05490     C4 00 90 FD | 	jmp	#LR__0422
05494                 | LR__0397
05494     8D FA 05 F6 | 	mov	result1, #141
05498     BC 00 90 FD | 	jmp	#LR__0422
0549c                 | LR__0398
0549c     8C FA 05 F6 | 	mov	result1, #140
054a0     B4 00 90 FD | 	jmp	#LR__0422
054a4                 | LR__0399
054a4     8C FA 05 F6 | 	mov	result1, #140
054a8     AC 00 90 FD | 	jmp	#LR__0422
054ac                 | LR__0400
054ac     91 FA 05 F6 | 	mov	result1, #145
054b0     A4 00 90 FD | 	jmp	#LR__0422
054b4                 | LR__0401
054b4     91 FA 05 F6 | 	mov	result1, #145
054b8     9C 00 90 FD | 	jmp	#LR__0422
054bc                 | LR__0402
054bc     8B FA 05 F6 | 	mov	result1, #139
054c0     94 00 90 FD | 	jmp	#LR__0422
054c4                 | LR__0403
054c4     8B FA 05 F6 | 	mov	result1, #139
054c8     8C 00 90 FD | 	jmp	#LR__0422
054cc                 | LR__0404
054cc     8F FA 05 F6 | 	mov	result1, #143
054d0     84 00 90 FD | 	jmp	#LR__0422
054d4                 | LR__0405
054d4     8F FA 05 F6 | 	mov	result1, #143
054d8     7C 00 90 FD | 	jmp	#LR__0422
054dc                 | LR__0406
054dc     8F FA 05 F6 | 	mov	result1, #143
054e0     74 00 90 FD | 	jmp	#LR__0422
054e4                 | LR__0407
054e4     B2 FA 05 F6 | 	mov	result1, #178
054e8     6C 00 90 FD | 	jmp	#LR__0422
054ec                 | LR__0408
054ec     B2 FA 05 F6 | 	mov	result1, #178
054f0     64 00 90 FD | 	jmp	#LR__0422
054f4                 | LR__0409
054f4     75 FA 05 F6 | 	mov	result1, #117
054f8     5C 00 90 FD | 	jmp	#LR__0422
054fc                 | LR__0410
054fc     75 FA 05 F6 | 	mov	result1, #117
05500     54 00 90 FD | 	jmp	#LR__0422
05504                 | LR__0411
05504     6D FA 05 F6 | 	mov	result1, #109
05508     4C 00 90 FD | 	jmp	#LR__0422
0550c                 | LR__0412
0550c     6D FA 05 F6 | 	mov	result1, #109
05510     44 00 90 FD | 	jmp	#LR__0422
05514                 | LR__0413
05514     5B FA 05 F6 | 	mov	result1, #91
05518     3C 00 90 FD | 	jmp	#LR__0422
0551c                 | LR__0414
0551c     56 FA 05 F6 | 	mov	result1, #86
05520     34 00 90 FD | 	jmp	#LR__0422
05524                 | LR__0415
05524     70 FA 05 F6 | 	mov	result1, #112
05528     2C 00 90 FD | 	jmp	#LR__0422
0552c                 | LR__0416
0552c     70 FA 05 F6 | 	mov	result1, #112
05530     24 00 90 FD | 	jmp	#LR__0422
05534                 | LR__0417
05534     57 FA 05 F6 | 	mov	result1, #87
05538     1C 00 90 FD | 	jmp	#LR__0422
0553c                 | LR__0418
0553c     57 FA 05 F6 | 	mov	result1, #87
05540     14 00 90 FD | 	jmp	#LR__0422
05544                 | LR__0419
05544     77 FA 05 F6 | 	mov	result1, #119
05548     0C 00 90 FD | 	jmp	#LR__0422
0554c                 | LR__0420
0554c     78 FA 05 F6 | 	mov	result1, #120
05550     04 00 90 FD | 	jmp	#LR__0422
05554                 | LR__0421
05554     00 FA 05 F6 | 	mov	result1, #0
05558                 | LR__0422
05558     A7 F0 03 F6 | 	mov	ptra, fp
0555c     B2 00 A0 FD | 	call	#popregs_
05560                 | _iscommand_ret
05560     2D 00 64 FD | 	ret
05564                 | 
05564                 | ' 
05564                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05564                 | ' 
05564                 | ' function isfunction(s as string) as ubyte
05564                 | _isfunction
05564     01 4A 05 F6 | 	mov	COUNT_, #1
05568     A8 00 A0 FD | 	call	#pushregs_
0556c                 | ' 
0556c                 | ' select case s
0556c     09 1F 02 F6 | 	mov	local01, arg01
05570     83 01 00 FF 
05574     17 14 06 F6 | 	mov	arg02, ##@LR__5305
05578     0F 13 02 F6 | 	mov	arg01, local01
0557c     E4 B3 B1 FD | 	call	#__system___string_cmp
05580     00 FA 0D F2 | 	cmp	result1, #0 wz
05584     0C 04 90 AD |  if_e	jmp	#LR__0430
05588     83 01 00 FF 
0558c     1B 14 06 F6 | 	mov	arg02, ##@LR__5306
05590     0F 13 02 F6 | 	mov	arg01, local01
05594     CC B3 B1 FD | 	call	#__system___string_cmp
05598     00 FA 0D F2 | 	cmp	result1, #0 wz
0559c     FC 03 90 AD |  if_e	jmp	#LR__0431
055a0     83 01 00 FF 
055a4     20 14 06 F6 | 	mov	arg02, ##@LR__5307
055a8     0F 13 02 F6 | 	mov	arg01, local01
055ac     B4 B3 B1 FD | 	call	#__system___string_cmp
055b0     00 FA 0D F2 | 	cmp	result1, #0 wz
055b4     EC 03 90 AD |  if_e	jmp	#LR__0432
055b8     83 01 00 FF 
055bc     24 14 06 F6 | 	mov	arg02, ##@LR__5308
055c0     0F 13 02 F6 | 	mov	arg01, local01
055c4     9C B3 B1 FD | 	call	#__system___string_cmp
055c8     00 FA 0D F2 | 	cmp	result1, #0 wz
055cc     DC 03 90 AD |  if_e	jmp	#LR__0433
055d0     83 01 00 FF 
055d4     29 14 06 F6 | 	mov	arg02, ##@LR__5309
055d8     0F 13 02 F6 | 	mov	arg01, local01
055dc     84 B3 B1 FD | 	call	#__system___string_cmp
055e0     00 FA 0D F2 | 	cmp	result1, #0 wz
055e4     CC 03 90 AD |  if_e	jmp	#LR__0434
055e8     83 01 00 FF 
055ec     2D 14 06 F6 | 	mov	arg02, ##@LR__5310
055f0     0F 13 02 F6 | 	mov	arg01, local01
055f4     6C B3 B1 FD | 	call	#__system___string_cmp
055f8     00 FA 0D F2 | 	cmp	result1, #0 wz
055fc     BC 03 90 AD |  if_e	jmp	#LR__0435
05600     83 01 00 FF 
05604     32 14 06 F6 | 	mov	arg02, ##@LR__5311
05608     0F 13 02 F6 | 	mov	arg01, local01
0560c     54 B3 B1 FD | 	call	#__system___string_cmp
05610     00 FA 0D F2 | 	cmp	result1, #0 wz
05614     AC 03 90 AD |  if_e	jmp	#LR__0436
05618     83 01 00 FF 
0561c     36 14 06 F6 | 	mov	arg02, ##@LR__5312
05620     0F 13 02 F6 | 	mov	arg01, local01
05624     3C B3 B1 FD | 	call	#__system___string_cmp
05628     00 FA 0D F2 | 	cmp	result1, #0 wz
0562c     9C 03 90 AD |  if_e	jmp	#LR__0437
05630     83 01 00 FF 
05634     3B 14 06 F6 | 	mov	arg02, ##@LR__5313
05638     0F 13 02 F6 | 	mov	arg01, local01
0563c     24 B3 B1 FD | 	call	#__system___string_cmp
05640     00 FA 0D F2 | 	cmp	result1, #0 wz
05644     8C 03 90 AD |  if_e	jmp	#LR__0438
05648     83 01 00 FF 
0564c     40 14 06 F6 | 	mov	arg02, ##@LR__5314
05650     0F 13 02 F6 | 	mov	arg01, local01
05654     0C B3 B1 FD | 	call	#__system___string_cmp
05658     00 FA 0D F2 | 	cmp	result1, #0 wz
0565c     7C 03 90 AD |  if_e	jmp	#LR__0439
05660     83 01 00 FF 
05664     44 14 06 F6 | 	mov	arg02, ##@LR__5315
05668     0F 13 02 F6 | 	mov	arg01, local01
0566c     F4 B2 B1 FD | 	call	#__system___string_cmp
05670     00 FA 0D F2 | 	cmp	result1, #0 wz
05674     6C 03 90 AD |  if_e	jmp	#LR__0440
05678     83 01 00 FF 
0567c     4A 14 06 F6 | 	mov	arg02, ##@LR__5316
05680     0F 13 02 F6 | 	mov	arg01, local01
05684     DC B2 B1 FD | 	call	#__system___string_cmp
05688     00 FA 0D F2 | 	cmp	result1, #0 wz
0568c     5C 03 90 AD |  if_e	jmp	#LR__0441
05690     83 01 00 FF 
05694     4E 14 06 F6 | 	mov	arg02, ##@LR__5317
05698     0F 13 02 F6 | 	mov	arg01, local01
0569c     C4 B2 B1 FD | 	call	#__system___string_cmp
056a0     00 FA 0D F2 | 	cmp	result1, #0 wz
056a4     4C 03 90 AD |  if_e	jmp	#LR__0442
056a8     83 01 00 FF 
056ac     57 14 06 F6 | 	mov	arg02, ##@LR__5318
056b0     0F 13 02 F6 | 	mov	arg01, local01
056b4     AC B2 B1 FD | 	call	#__system___string_cmp
056b8     00 FA 0D F2 | 	cmp	result1, #0 wz
056bc     3C 03 90 AD |  if_e	jmp	#LR__0443
056c0     83 01 00 FF 
056c4     5B 14 06 F6 | 	mov	arg02, ##@LR__5319
056c8     0F 13 02 F6 | 	mov	arg01, local01
056cc     94 B2 B1 FD | 	call	#__system___string_cmp
056d0     00 FA 0D F2 | 	cmp	result1, #0 wz
056d4     2C 03 90 AD |  if_e	jmp	#LR__0444
056d8     83 01 00 FF 
056dc     69 14 06 F6 | 	mov	arg02, ##@LR__5320
056e0     0F 13 02 F6 | 	mov	arg01, local01
056e4     7C B2 B1 FD | 	call	#__system___string_cmp
056e8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ec     1C 03 90 AD |  if_e	jmp	#LR__0445
056f0     83 01 00 FF 
056f4     76 14 06 F6 | 	mov	arg02, ##@LR__5321
056f8     0F 13 02 F6 | 	mov	arg01, local01
056fc     64 B2 B1 FD | 	call	#__system___string_cmp
05700     00 FA 0D F2 | 	cmp	result1, #0 wz
05704     0C 03 90 AD |  if_e	jmp	#LR__0446
05708     83 01 00 FF 
0570c     7E 14 06 F6 | 	mov	arg02, ##@LR__5322
05710     0F 13 02 F6 | 	mov	arg01, local01
05714     4C B2 B1 FD | 	call	#__system___string_cmp
05718     00 FA 0D F2 | 	cmp	result1, #0 wz
0571c     FC 02 90 AD |  if_e	jmp	#LR__0447
05720     83 01 00 FF 
05724     83 14 06 F6 | 	mov	arg02, ##@LR__5323
05728     0F 13 02 F6 | 	mov	arg01, local01
0572c     34 B2 B1 FD | 	call	#__system___string_cmp
05730     00 FA 0D F2 | 	cmp	result1, #0 wz
05734     EC 02 90 AD |  if_e	jmp	#LR__0448
05738     83 01 00 FF 
0573c     8A 14 06 F6 | 	mov	arg02, ##@LR__5324
05740     0F 13 02 F6 | 	mov	arg01, local01
05744     1C B2 B1 FD | 	call	#__system___string_cmp
05748     00 FA 0D F2 | 	cmp	result1, #0 wz
0574c     DC 02 90 AD |  if_e	jmp	#LR__0449
05750     83 01 00 FF 
05754     8E 14 06 F6 | 	mov	arg02, ##@LR__5325
05758     0F 13 02 F6 | 	mov	arg01, local01
0575c     04 B2 B1 FD | 	call	#__system___string_cmp
05760     00 FA 0D F2 | 	cmp	result1, #0 wz
05764     CC 02 90 AD |  if_e	jmp	#LR__0450
05768     83 01 00 FF 
0576c     94 14 06 F6 | 	mov	arg02, ##@LR__5326
05770     0F 13 02 F6 | 	mov	arg01, local01
05774     EC B1 B1 FD | 	call	#__system___string_cmp
05778     00 FA 0D F2 | 	cmp	result1, #0 wz
0577c     BC 02 90 AD |  if_e	jmp	#LR__0451
05780     83 01 00 FF 
05784     98 14 06 F6 | 	mov	arg02, ##@LR__5327
05788     0F 13 02 F6 | 	mov	arg01, local01
0578c     D4 B1 B1 FD | 	call	#__system___string_cmp
05790     00 FA 0D F2 | 	cmp	result1, #0 wz
05794     AC 02 90 AD |  if_e	jmp	#LR__0452
05798     83 01 00 FF 
0579c     9C 14 06 F6 | 	mov	arg02, ##@LR__5328
057a0     0F 13 02 F6 | 	mov	arg01, local01
057a4     BC B1 B1 FD | 	call	#__system___string_cmp
057a8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ac     9C 02 90 AD |  if_e	jmp	#LR__0453
057b0     83 01 00 FF 
057b4     A2 14 06 F6 | 	mov	arg02, ##@LR__5329
057b8     0F 13 02 F6 | 	mov	arg01, local01
057bc     A4 B1 B1 FD | 	call	#__system___string_cmp
057c0     00 FA 0D F2 | 	cmp	result1, #0 wz
057c4     8C 02 90 AD |  if_e	jmp	#LR__0454
057c8     83 01 00 FF 
057cc     A7 14 06 F6 | 	mov	arg02, ##@LR__5330
057d0     0F 13 02 F6 | 	mov	arg01, local01
057d4     8C B1 B1 FD | 	call	#__system___string_cmp
057d8     00 FA 0D F2 | 	cmp	result1, #0 wz
057dc     7C 02 90 AD |  if_e	jmp	#LR__0455
057e0     83 01 00 FF 
057e4     AE 14 06 F6 | 	mov	arg02, ##@LR__5331
057e8     0F 13 02 F6 | 	mov	arg01, local01
057ec     74 B1 B1 FD | 	call	#__system___string_cmp
057f0     00 FA 0D F2 | 	cmp	result1, #0 wz
057f4     6C 02 90 AD |  if_e	jmp	#LR__0456
057f8     83 01 00 FF 
057fc     B5 14 06 F6 | 	mov	arg02, ##@LR__5332
05800     0F 13 02 F6 | 	mov	arg01, local01
05804     5C B1 B1 FD | 	call	#__system___string_cmp
05808     00 FA 0D F2 | 	cmp	result1, #0 wz
0580c     5C 02 90 AD |  if_e	jmp	#LR__0457
05810     83 01 00 FF 
05814     BC 14 06 F6 | 	mov	arg02, ##@LR__5333
05818     0F 13 02 F6 | 	mov	arg01, local01
0581c     44 B1 B1 FD | 	call	#__system___string_cmp
05820     00 FA 0D F2 | 	cmp	result1, #0 wz
05824     4C 02 90 AD |  if_e	jmp	#LR__0458
05828     83 01 00 FF 
0582c     C3 14 06 F6 | 	mov	arg02, ##@LR__5334
05830     0F 13 02 F6 | 	mov	arg01, local01
05834     2C B1 B1 FD | 	call	#__system___string_cmp
05838     00 FA 0D F2 | 	cmp	result1, #0 wz
0583c     3C 02 90 AD |  if_e	jmp	#LR__0459
05840     83 01 00 FF 
05844     C8 14 06 F6 | 	mov	arg02, ##@LR__5335
05848     0F 13 02 F6 | 	mov	arg01, local01
0584c     14 B1 B1 FD | 	call	#__system___string_cmp
05850     00 FA 0D F2 | 	cmp	result1, #0 wz
05854     2C 02 90 AD |  if_e	jmp	#LR__0460
05858     83 01 00 FF 
0585c     D0 14 06 F6 | 	mov	arg02, ##@LR__5336
05860     0F 13 02 F6 | 	mov	arg01, local01
05864     FC B0 B1 FD | 	call	#__system___string_cmp
05868     00 FA 0D F2 | 	cmp	result1, #0 wz
0586c     1C 02 90 AD |  if_e	jmp	#LR__0461
05870     83 01 00 FF 
05874     D6 14 06 F6 | 	mov	arg02, ##@LR__5337
05878     0F 13 02 F6 | 	mov	arg01, local01
0587c     E4 B0 B1 FD | 	call	#__system___string_cmp
05880     00 FA 0D F2 | 	cmp	result1, #0 wz
05884     0C 02 90 AD |  if_e	jmp	#LR__0462
05888     83 01 00 FF 
0588c     DD 14 06 F6 | 	mov	arg02, ##@LR__5338
05890     0F 13 02 F6 | 	mov	arg01, local01
05894     CC B0 B1 FD | 	call	#__system___string_cmp
05898     00 FA 0D F2 | 	cmp	result1, #0 wz
0589c     FC 01 90 AD |  if_e	jmp	#LR__0463
058a0     83 01 00 FF 
058a4     E3 14 06 F6 | 	mov	arg02, ##@LR__5339
058a8     0F 13 02 F6 | 	mov	arg01, local01
058ac     B4 B0 B1 FD | 	call	#__system___string_cmp
058b0     00 FA 0D F2 | 	cmp	result1, #0 wz
058b4     EC 01 90 AD |  if_e	jmp	#LR__0464
058b8     83 01 00 FF 
058bc     E9 14 06 F6 | 	mov	arg02, ##@LR__5340
058c0     0F 13 02 F6 | 	mov	arg01, local01
058c4     9C B0 B1 FD | 	call	#__system___string_cmp
058c8     00 FA 0D F2 | 	cmp	result1, #0 wz
058cc     DC 01 90 AD |  if_e	jmp	#LR__0465
058d0     83 01 00 FF 
058d4     ED 14 06 F6 | 	mov	arg02, ##@LR__5341
058d8     0F 13 02 F6 | 	mov	arg01, local01
058dc     84 B0 B1 FD | 	call	#__system___string_cmp
058e0     00 FA 0D F2 | 	cmp	result1, #0 wz
058e4     CC 01 90 AD |  if_e	jmp	#LR__0466
058e8     83 01 00 FF 
058ec     F1 14 06 F6 | 	mov	arg02, ##@LR__5342
058f0     0F 13 02 F6 | 	mov	arg01, local01
058f4     6C B0 B1 FD | 	call	#__system___string_cmp
058f8     00 FA 0D F2 | 	cmp	result1, #0 wz
058fc     BC 01 90 AD |  if_e	jmp	#LR__0467
05900     83 01 00 FF 
05904     F5 14 06 F6 | 	mov	arg02, ##@LR__5343
05908     0F 13 02 F6 | 	mov	arg01, local01
0590c     54 B0 B1 FD | 	call	#__system___string_cmp
05910     00 FA 0D F2 | 	cmp	result1, #0 wz
05914     AC 01 90 AD |  if_e	jmp	#LR__0468
05918     83 01 00 FF 
0591c     FB 14 06 F6 | 	mov	arg02, ##@LR__5344
05920     0F 13 02 F6 | 	mov	arg01, local01
05924     3C B0 B1 FD | 	call	#__system___string_cmp
05928     00 FA 0D F2 | 	cmp	result1, #0 wz
0592c     9C 01 90 AD |  if_e	jmp	#LR__0469
05930     83 01 00 FF 
05934     01 15 06 F6 | 	mov	arg02, ##@LR__5345
05938     0F 13 02 F6 | 	mov	arg01, local01
0593c     24 B0 B1 FD | 	call	#__system___string_cmp
05940     00 FA 0D F2 | 	cmp	result1, #0 wz
05944     8C 01 90 AD |  if_e	jmp	#LR__0470
05948     83 01 00 FF 
0594c     06 15 06 F6 | 	mov	arg02, ##@LR__5346
05950     0F 13 02 F6 | 	mov	arg01, local01
05954     0C B0 B1 FD | 	call	#__system___string_cmp
05958     00 FA 0D F2 | 	cmp	result1, #0 wz
0595c     7C 01 90 AD |  if_e	jmp	#LR__0471
05960     83 01 00 FF 
05964     0A 15 06 F6 | 	mov	arg02, ##@LR__5347
05968     0F 13 02 F6 | 	mov	arg01, local01
0596c     F4 AF B1 FD | 	call	#__system___string_cmp
05970     00 FA 0D F2 | 	cmp	result1, #0 wz
05974     6C 01 90 AD |  if_e	jmp	#LR__0472
05978     83 01 00 FF 
0597c     0E 15 06 F6 | 	mov	arg02, ##@LR__5348
05980     0F 13 02 F6 | 	mov	arg01, local01
05984     DC AF B1 FD | 	call	#__system___string_cmp
05988     00 FA 0D F2 | 	cmp	result1, #0 wz
0598c     5C 01 90 AD |  if_e	jmp	#LR__0473
05990     60 01 90 FD | 	jmp	#LR__0474
05994                 | LR__0430
05994     9E FA 05 F6 | 	mov	result1, #158
05998     5C 01 90 FD | 	jmp	#LR__0475
0599c                 | LR__0431
0599c     85 FA 05 F6 | 	mov	result1, #133
059a0     54 01 90 FD | 	jmp	#LR__0475
059a4                 | LR__0432
059a4     9B FA 05 F6 | 	mov	result1, #155
059a8     4C 01 90 FD | 	jmp	#LR__0475
059ac                 | LR__0433
059ac     9B FA 05 F6 | 	mov	result1, #155
059b0     44 01 90 FD | 	jmp	#LR__0475
059b4                 | LR__0434
059b4     A7 FA 05 F6 | 	mov	result1, #167
059b8     3C 01 90 FD | 	jmp	#LR__0475
059bc                 | LR__0435
059bc     84 FA 05 F6 | 	mov	result1, #132
059c0     34 01 90 FD | 	jmp	#LR__0475
059c4                 | LR__0436
059c4     86 FA 05 F6 | 	mov	result1, #134
059c8     2C 01 90 FD | 	jmp	#LR__0475
059cc                 | LR__0437
059cc     A2 FA 05 F6 | 	mov	result1, #162
059d0     24 01 90 FD | 	jmp	#LR__0475
059d4                 | LR__0438
059d4     9F FA 05 F6 | 	mov	result1, #159
059d8     1C 01 90 FD | 	jmp	#LR__0475
059dc                 | LR__0439
059dc     82 FA 05 F6 | 	mov	result1, #130
059e0     14 01 90 FD | 	jmp	#LR__0475
059e4                 | LR__0440
059e4     99 FA 05 F6 | 	mov	result1, #153
059e8     0C 01 90 FD | 	jmp	#LR__0475
059ec                 | LR__0441
059ec     9C FA 05 F6 | 	mov	result1, #156
059f0     04 01 90 FD | 	jmp	#LR__0475
059f4                 | LR__0442
059f4     6F FA 05 F6 | 	mov	result1, #111
059f8     FC 00 90 FD | 	jmp	#LR__0475
059fc                 | LR__0443
059fc     6F FA 05 F6 | 	mov	result1, #111
05a00     F4 00 90 FD | 	jmp	#LR__0475
05a04                 | LR__0444
05a04     93 FA 05 F6 | 	mov	result1, #147
05a08     EC 00 90 FD | 	jmp	#LR__0475
05a0c                 | LR__0445
05a0c     94 FA 05 F6 | 	mov	result1, #148
05a10     E4 00 90 FD | 	jmp	#LR__0475
05a14                 | LR__0446
05a14     62 FA 05 F6 | 	mov	result1, #98
05a18     DC 00 90 FD | 	jmp	#LR__0475
05a1c                 | LR__0447
05a1c     A3 FA 05 F6 | 	mov	result1, #163
05a20     D4 00 90 FD | 	jmp	#LR__0475
05a24                 | LR__0448
05a24     9D FA 05 F6 | 	mov	result1, #157
05a28     CC 00 90 FD | 	jmp	#LR__0475
05a2c                 | LR__0449
05a2c     8A FA 05 F6 | 	mov	result1, #138
05a30     C4 00 90 FD | 	jmp	#LR__0475
05a34                 | LR__0450
05a34     A4 FA 05 F6 | 	mov	result1, #164
05a38     BC 00 90 FD | 	jmp	#LR__0475
05a3c                 | LR__0451
05a3c     A8 FA 05 F6 | 	mov	result1, #168
05a40     B4 00 90 FD | 	jmp	#LR__0475
05a44                 | LR__0452
05a44     AD FA 05 F6 | 	mov	result1, #173
05a48     AC 00 90 FD | 	jmp	#LR__0475
05a4c                 | LR__0453
05a4c     9A FA 05 F6 | 	mov	result1, #154
05a50     A4 00 90 FD | 	jmp	#LR__0475
05a54                 | LR__0454
05a54     A6 FA 05 F6 | 	mov	result1, #166
05a58     9C 00 90 FD | 	jmp	#LR__0475
05a5c                 | LR__0455
05a5c     66 FA 05 F6 | 	mov	result1, #102
05a60     94 00 90 FD | 	jmp	#LR__0475
05a64                 | LR__0456
05a64     67 FA 05 F6 | 	mov	result1, #103
05a68     8C 00 90 FD | 	jmp	#LR__0475
05a6c                 | LR__0457
05a6c     64 FA 05 F6 | 	mov	result1, #100
05a70     84 00 90 FD | 	jmp	#LR__0475
05a74                 | LR__0458
05a74     65 FA 05 F6 | 	mov	result1, #101
05a78     7C 00 90 FD | 	jmp	#LR__0475
05a7c                 | LR__0459
05a7c     98 FA 05 F6 | 	mov	result1, #152
05a80     74 00 90 FD | 	jmp	#LR__0475
05a84                 | LR__0460
05a84     7B FA 05 F6 | 	mov	result1, #123
05a88     6C 00 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0461
05a8c     76 FA 05 F6 | 	mov	result1, #118
05a90     64 00 90 FD | 	jmp	#LR__0475
05a94                 | LR__0462
05a94     A5 FA 05 F6 | 	mov	result1, #165
05a98     5C 00 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0463
05a9c     7A FA 05 F6 | 	mov	result1, #122
05aa0     54 00 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0464
05aa4     BF FA 05 F6 | 	mov	result1, #191
05aa8     4C 00 90 FD | 	jmp	#LR__0475
05aac                 | LR__0465
05aac     54 FA 05 F6 | 	mov	result1, #84
05ab0     44 00 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0466
05ab4     6B FA 05 F6 | 	mov	result1, #107
05ab8     3C 00 90 FD | 	jmp	#LR__0475
05abc                 | LR__0467
05abc     87 FA 05 F6 | 	mov	result1, #135
05ac0     34 00 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0468
05ac4     6A FA 05 F6 | 	mov	result1, #106
05ac8     2C 00 90 FD | 	jmp	#LR__0475
05acc                 | LR__0469
05acc     6E FA 05 F6 | 	mov	result1, #110
05ad0     24 00 90 FD | 	jmp	#LR__0475
05ad4                 | LR__0470
05ad4     A1 FA 05 F6 | 	mov	result1, #161
05ad8     1C 00 90 FD | 	jmp	#LR__0475
05adc                 | LR__0471
05adc     83 FA 05 F6 | 	mov	result1, #131
05ae0     14 00 90 FD | 	jmp	#LR__0475
05ae4                 | LR__0472
05ae4     A0 FA 05 F6 | 	mov	result1, #160
05ae8     0C 00 90 FD | 	jmp	#LR__0475
05aec                 | LR__0473
05aec     9B FA 05 F6 | 	mov	result1, #155
05af0     04 00 90 FD | 	jmp	#LR__0475
05af4                 | LR__0474
05af4     00 FA 05 F6 | 	mov	result1, #0
05af8                 | LR__0475
05af8     A7 F0 03 F6 | 	mov	ptra, fp
05afc     B2 00 A0 FD | 	call	#popregs_
05b00                 | _isfunction_ret
05b00     2D 00 64 FD | 	ret
05b04                 | 
05b04                 | ' 
05b04                 | ' ' Check if the part is a name
05b04                 | ' 
05b04                 | ' function isname(s as string) as boolean
05b04                 | _isname
05b04     0D 4A 05 F6 | 	mov	COUNT_, #13
05b08     A8 00 A0 FD | 	call	#pushregs_
05b0c     09 1F 02 F6 | 	mov	local01, arg01
05b10     09 21 02 F6 | 	mov	local02, arg01
05b14     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05b18                 | LR__0480
05b18     10 FB C9 FA | 	rdbyte	result1, local02 wz
05b1c     01 20 06 51 |  if_ne	add	local02, #1
05b20     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05b24                 | LR__0481
05b24     09 21 82 F1 | 	sub	local02, arg01
05b28     10 FB 01 F6 | 	mov	result1, local02
05b2c     FD 22 0A F6 | 	mov	local03, result1 wz
05b30     00 FA 05 A6 |  if_e	mov	result1, #0
05b34     34 02 90 AD |  if_e	jmp	#LR__0493
05b38     0F 13 02 F6 | 	mov	arg01, local01
05b3c     01 14 06 F6 | 	mov	arg02, #1
05b40     01 16 06 F6 | 	mov	arg03, #1
05b44     88 CF B1 FD | 	call	#__system__Mid_S
05b48     FD 24 02 F6 | 	mov	local04, result1
05b4c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05b4c     83 01 00 FF 
05b50     15 15 06 F6 | 	mov	arg02, ##@LR__5349
05b54     12 13 02 F6 | 	mov	arg01, local04
05b58     08 AE B1 FD | 	call	#__system___string_cmp
05b5c     00 FA 55 F2 | 	cmps	result1, #0 wc
05b60     18 00 90 CD |  if_b	jmp	#LR__0482
05b64     83 01 00 FF 
05b68     17 15 06 F6 | 	mov	arg02, ##@LR__5350
05b6c     12 13 02 F6 | 	mov	arg01, local04
05b70     F0 AD B1 FD | 	call	#__system___string_cmp
05b74     01 FA 55 F2 | 	cmps	result1, #1 wc
05b78     1C 00 90 CD |  if_b	jmp	#LR__0483
05b7c                 | LR__0482
05b7c     83 01 00 FF 
05b80     19 15 06 F6 | 	mov	arg02, ##@LR__5351
05b84     12 13 02 F6 | 	mov	arg01, local04
05b88     D8 AD B1 FD | 	call	#__system___string_cmp
05b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b90     00 FA 05 56 |  if_ne	mov	result1, #0
05b94     D4 01 90 5D |  if_ne	jmp	#LR__0493
05b98                 | LR__0483
05b98                 | ' if l>2 then 
05b98     03 22 56 F2 | 	cmps	local03, #3 wc
05b9c     C8 01 90 CD |  if_b	jmp	#LR__0492
05ba0                 | '   for i=2 to l
05ba0     02 26 06 F6 | 	mov	local05, #2
05ba4     11 29 02 F6 | 	mov	local06, local03
05ba8     01 28 06 F1 | 	add	local06, #1
05bac                 | LR__0484
05bac     14 27 52 F2 | 	cmps	local05, local06 wc
05bb0     B4 01 90 3D |  if_ae	jmp	#LR__0491
05bb4     0F 13 02 F6 | 	mov	arg01, local01
05bb8     13 15 02 F6 | 	mov	arg02, local05
05bbc     01 16 06 F6 | 	mov	arg03, #1
05bc0     0C CF B1 FD | 	call	#__system__Mid_S
05bc4     FD 24 02 F6 | 	mov	local04, result1
05bc8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05bc8     11 27 52 F2 | 	cmps	local05, local03 wc
05bcc     9C 00 90 3D |  if_ae	jmp	#LR__0487
05bd0     83 01 00 FF 
05bd4     1B 15 06 F6 | 	mov	arg02, ##@LR__5352
05bd8     12 13 02 F6 | 	mov	arg01, local04
05bdc     84 AD B1 FD | 	call	#__system___string_cmp
05be0     00 FA 55 F2 | 	cmps	result1, #0 wc
05be4     18 00 90 CD |  if_b	jmp	#LR__0485
05be8     83 01 00 FF 
05bec     1D 15 06 F6 | 	mov	arg02, ##@LR__5353
05bf0     12 13 02 F6 | 	mov	arg01, local04
05bf4     6C AD B1 FD | 	call	#__system___string_cmp
05bf8     01 FA 55 F2 | 	cmps	result1, #1 wc
05bfc     6C 00 90 CD |  if_b	jmp	#LR__0487
05c00                 | LR__0485
05c00     83 01 00 FF 
05c04     1F 15 06 F6 | 	mov	arg02, ##@LR__5354
05c08     12 13 02 F6 | 	mov	arg01, local04
05c0c     54 AD B1 FD | 	call	#__system___string_cmp
05c10     00 FA 55 F2 | 	cmps	result1, #0 wc
05c14     18 00 90 CD |  if_b	jmp	#LR__0486
05c18     83 01 00 FF 
05c1c     21 15 06 F6 | 	mov	arg02, ##@LR__5355
05c20     12 13 02 F6 | 	mov	arg01, local04
05c24     3C AD B1 FD | 	call	#__system___string_cmp
05c28     01 FA 55 F2 | 	cmps	result1, #1 wc
05c2c     3C 00 90 CD |  if_b	jmp	#LR__0487
05c30                 | LR__0486
05c30     83 01 00 FF 
05c34     23 2B 06 F6 | 	mov	local07, ##@LR__5356
05c38     12 13 02 F6 | 	mov	arg01, local04
05c3c     15 15 02 F6 | 	mov	arg02, local07
05c40     20 AD B1 FD | 	call	#__system___string_cmp
05c44     00 FA 0D F2 | 	cmp	result1, #0 wz
05c48     20 00 90 AD |  if_e	jmp	#LR__0487
05c4c     83 01 00 FF 
05c50     25 2D 06 F6 | 	mov	local08, ##@LR__5357
05c54     12 13 02 F6 | 	mov	arg01, local04
05c58     16 15 02 F6 | 	mov	arg02, local08
05c5c     04 AD B1 FD | 	call	#__system___string_cmp
05c60     FD 2E 0A F6 | 	mov	local09, result1 wz
05c64     00 FA 05 56 |  if_ne	mov	result1, #0
05c68     00 01 90 5D |  if_ne	jmp	#LR__0493
05c6c                 | LR__0487
05c6c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05c6c     11 27 0A F2 | 	cmp	local05, local03 wz
05c70     EC 00 90 5D |  if_ne	jmp	#LR__0490
05c74     83 01 00 FF 
05c78     27 31 06 F6 | 	mov	local10, ##@LR__5358
05c7c     12 13 02 F6 | 	mov	arg01, local04
05c80     18 15 02 F6 | 	mov	arg02, local10
05c84     DC AC B1 FD | 	call	#__system___string_cmp
05c88     FD 32 02 F6 | 	mov	local11, result1
05c8c     00 32 56 F2 | 	cmps	local11, #0 wc
05c90     1C 00 90 CD |  if_b	jmp	#LR__0488
05c94     83 01 00 FF 
05c98     29 15 06 F6 | 	mov	arg02, ##@LR__5359
05c9c     12 13 02 F6 | 	mov	arg01, local04
05ca0     C0 AC B1 FD | 	call	#__system___string_cmp
05ca4     FD 30 02 F6 | 	mov	local10, result1
05ca8     01 30 56 F2 | 	cmps	local10, #1 wc
05cac     B0 00 90 CD |  if_b	jmp	#LR__0490
05cb0                 | LR__0488
05cb0     83 01 00 FF 
05cb4     2B 15 06 F6 | 	mov	arg02, ##@LR__5360
05cb8     12 13 02 F6 | 	mov	arg01, local04
05cbc     A4 AC B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 55 F2 | 	cmps	result1, #0 wc
05cc4     1C 00 90 CD |  if_b	jmp	#LR__0489
05cc8     83 01 00 FF 
05ccc     2D 2F 06 F6 | 	mov	local09, ##@LR__5361
05cd0     12 13 02 F6 | 	mov	arg01, local04
05cd4     17 15 02 F6 | 	mov	arg02, local09
05cd8     88 AC B1 FD | 	call	#__system___string_cmp
05cdc     01 FA 55 F2 | 	cmps	result1, #1 wc
05ce0     7C 00 90 CD |  if_b	jmp	#LR__0490
05ce4                 | LR__0489
05ce4     83 01 00 FF 
05ce8     2F 2F 06 F6 | 	mov	local09, ##@LR__5362
05cec     12 13 02 F6 | 	mov	arg01, local04
05cf0     17 15 02 F6 | 	mov	arg02, local09
05cf4     6C AC B1 FD | 	call	#__system___string_cmp
05cf8     00 FA 4D F2 | 	cmps	result1, #0 wz
05cfc     60 00 90 AD |  if_e	jmp	#LR__0490
05d00     83 01 00 FF 
05d04     31 2D 06 F6 | 	mov	local08, ##@LR__5363
05d08     12 13 02 F6 | 	mov	arg01, local04
05d0c     16 15 02 F6 | 	mov	arg02, local08
05d10     50 AC B1 FD | 	call	#__system___string_cmp
05d14     FD 2E 0A F6 | 	mov	local09, result1 wz
05d18     44 00 90 AD |  if_e	jmp	#LR__0490
05d1c     83 01 00 FF 
05d20     33 35 06 F6 | 	mov	local12, ##@LR__5364
05d24     1A 2D 02 F6 | 	mov	local08, local12
05d28     12 13 02 F6 | 	mov	arg01, local04
05d2c     16 15 02 F6 | 	mov	arg02, local08
05d30     30 AC B1 FD | 	call	#__system___string_cmp
05d34     FD 2A 0A F6 | 	mov	local07, result1 wz
05d38     24 00 90 AD |  if_e	jmp	#LR__0490
05d3c     83 01 00 FF 
05d40     35 37 06 F6 | 	mov	local13, ##@LR__5365
05d44     1B 35 02 F6 | 	mov	local12, local13
05d48     12 13 02 F6 | 	mov	arg01, local04
05d4c     1A 15 02 F6 | 	mov	arg02, local12
05d50     10 AC B1 FD | 	call	#__system___string_cmp
05d54     FD 2C 0A F6 | 	mov	local08, result1 wz
05d58     00 FA 05 56 |  if_ne	mov	result1, #0
05d5c     0C 00 90 5D |  if_ne	jmp	#LR__0493
05d60                 | LR__0490
05d60     01 26 06 F1 | 	add	local05, #1
05d64     44 FE 9F FD | 	jmp	#LR__0484
05d68                 | LR__0491
05d68                 | LR__0492
05d68                 | ' return true
05d68     01 FA 65 F6 | 	neg	result1, #1
05d6c                 | LR__0493
05d6c     A7 F0 03 F6 | 	mov	ptra, fp
05d70     B2 00 A0 FD | 	call	#popregs_
05d74                 | _isname_ret
05d74     2D 00 64 FD | 	ret
05d78                 | 
05d78                 | ' 
05d78                 | ' ' Check if the part is a number.  
05d78                 | ' 
05d78                 | ' function isnum(s as string) as boolean 
05d78                 | _isnum
05d78     13 4A 05 F6 | 	mov	COUNT_, #19
05d7c     A8 00 A0 FD | 	call	#pushregs_
05d80     09 1F 02 F6 | 	mov	local01, arg01
05d84     00 20 06 F6 | 	mov	local02, #0
05d88     00 22 06 F6 | 	mov	local03, #0
05d8c     0F 13 02 F6 | 	mov	arg01, local01
05d90     09 25 02 F6 | 	mov	local04, arg01
05d94     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05d98                 | LR__0500
05d98     12 FB C9 FA | 	rdbyte	result1, local04 wz
05d9c     01 24 06 51 |  if_ne	add	local04, #1
05da0     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05da4                 | LR__0501
05da4     09 25 82 F1 | 	sub	local04, arg01
05da8     12 FB 01 F6 | 	mov	result1, local04
05dac     FD 26 0A F6 | 	mov	local05, result1 wz
05db0     00 FA 05 A6 |  if_e	mov	result1, #0
05db4     A0 03 90 AD |  if_e	jmp	#LR__0516
05db8     0F 13 02 F6 | 	mov	arg01, local01
05dbc     01 14 06 F6 | 	mov	arg02, #1
05dc0     01 16 06 F6 | 	mov	arg03, #1
05dc4     08 CD B1 FD | 	call	#__system__Mid_S
05dc8     FD 28 02 F6 | 	mov	local06, result1
05dcc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05dcc     83 01 00 FF 
05dd0     37 15 06 F6 | 	mov	arg02, ##@LR__5366
05dd4     14 13 02 F6 | 	mov	arg01, local06
05dd8     88 AB B1 FD | 	call	#__system___string_cmp
05ddc     00 FA 55 F2 | 	cmps	result1, #0 wc
05de0     1C 00 90 CD |  if_b	jmp	#LR__0502
05de4     83 01 00 FF 
05de8     39 2B 06 F6 | 	mov	local07, ##@LR__5367
05dec     14 13 02 F6 | 	mov	arg01, local06
05df0     15 15 02 F6 | 	mov	arg02, local07
05df4     6C AB B1 FD | 	call	#__system___string_cmp
05df8     01 FA 55 F2 | 	cmps	result1, #1 wc
05dfc     84 00 90 CD |  if_b	jmp	#LR__0503
05e00                 | LR__0502
05e00     83 01 00 FF 
05e04     3B 2D 06 F6 | 	mov	local08, ##@LR__5368
05e08     16 2B 02 F6 | 	mov	local07, local08
05e0c     14 13 02 F6 | 	mov	arg01, local06
05e10     15 15 02 F6 | 	mov	arg02, local07
05e14     4C AB B1 FD | 	call	#__system___string_cmp
05e18     00 FA 0D F2 | 	cmp	result1, #0 wz
05e1c     64 00 90 AD |  if_e	jmp	#LR__0503
05e20     83 01 00 FF 
05e24     3D 2F 06 F6 | 	mov	local09, ##@LR__5369
05e28     17 2D 02 F6 | 	mov	local08, local09
05e2c     14 13 02 F6 | 	mov	arg01, local06
05e30     16 15 02 F6 | 	mov	arg02, local08
05e34     2C AB B1 FD | 	call	#__system___string_cmp
05e38     FD 2A 0A F6 | 	mov	local07, result1 wz
05e3c     44 00 90 AD |  if_e	jmp	#LR__0503
05e40     83 01 00 FF 
05e44     3F 31 06 F6 | 	mov	local10, ##@LR__5370
05e48     18 2F 02 F6 | 	mov	local09, local10
05e4c     14 13 02 F6 | 	mov	arg01, local06
05e50     17 15 02 F6 | 	mov	arg02, local09
05e54     0C AB B1 FD | 	call	#__system___string_cmp
05e58     FD 2C 0A F6 | 	mov	local08, result1 wz
05e5c     24 00 90 AD |  if_e	jmp	#LR__0503
05e60     83 01 00 FF 
05e64     41 33 06 F6 | 	mov	local11, ##@LR__5371
05e68     19 31 02 F6 | 	mov	local10, local11
05e6c     14 13 02 F6 | 	mov	arg01, local06
05e70     18 15 02 F6 | 	mov	arg02, local10
05e74     EC AA B1 FD | 	call	#__system___string_cmp
05e78     FD 2E 0A F6 | 	mov	local09, result1 wz
05e7c     00 FA 05 56 |  if_ne	mov	result1, #0
05e80     D4 02 90 5D |  if_ne	jmp	#LR__0516
05e84                 | LR__0503
05e84                 | ' if m$="." then ds=1
05e84     83 01 00 FF 
05e88     43 15 06 F6 | 	mov	arg02, ##@LR__5372
05e8c     14 13 02 F6 | 	mov	arg01, local06
05e90     D0 AA B1 FD | 	call	#__system___string_cmp
05e94     00 FA 0D F2 | 	cmp	result1, #0 wz
05e98     01 20 06 A6 |  if_e	mov	local02, #1
05e9c                 | ' if m$="$" then hex=1 else hex=0
05e9c     83 01 00 FF 
05ea0     45 15 06 F6 | 	mov	arg02, ##@LR__5373
05ea4     14 13 02 F6 | 	mov	arg01, local06
05ea8     B8 AA B1 FD | 	call	#__system___string_cmp
05eac     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb0     01 34 06 A6 |  if_e	mov	local12, #1
05eb4     00 34 06 56 |  if_ne	mov	local12, #0
05eb8                 | ' if m$="%" then bin=1 else bin=0
05eb8     83 01 00 FF 
05ebc     47 15 06 F6 | 	mov	arg02, ##@LR__5374
05ec0     14 13 02 F6 | 	mov	arg01, local06
05ec4     9C AA B1 FD | 	call	#__system___string_cmp
05ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ecc     01 36 06 A6 |  if_e	mov	local13, #1
05ed0     00 36 06 56 |  if_ne	mov	local13, #0
05ed4                 | ' if l>1 then 
05ed4     02 26 56 F2 | 	cmps	local05, #2 wc
05ed8     78 02 90 CD |  if_b	jmp	#LR__0515
05edc                 | '   for i=2 to l
05edc     02 38 06 F6 | 	mov	local14, #2
05ee0     13 3B 02 F6 | 	mov	local15, local05
05ee4     01 3A 06 F1 | 	add	local15, #1
05ee8                 | LR__0504
05ee8     1D 39 52 F2 | 	cmps	local14, local15 wc
05eec     64 02 90 3D |  if_ae	jmp	#LR__0514
05ef0     0F 13 02 F6 | 	mov	arg01, local01
05ef4     1C 15 02 F6 | 	mov	arg02, local14
05ef8     01 16 06 F6 | 	mov	arg03, #1
05efc     D0 CB B1 FD | 	call	#__system__Mid_S
05f00     FD 28 02 F6 | 	mov	local06, result1
05f04     00 3C 06 F6 | 	mov	local16, #0
05f08                 | '     m$=mid$(s,i,1) : b=false
05f08                 | '     if m$>="0" andalso m$<="9" then b=true  
05f08     83 01 00 FF 
05f0c     49 15 06 F6 | 	mov	arg02, ##@LR__5375
05f10     14 13 02 F6 | 	mov	arg01, local06
05f14     4C AA B1 FD | 	call	#__system___string_cmp
05f18     00 FA 55 F2 | 	cmps	result1, #0 wc
05f1c     1C 00 90 CD |  if_b	jmp	#LR__0505
05f20     83 01 00 FF 
05f24     4B 2B 06 F6 | 	mov	local07, ##@LR__5376
05f28     14 13 02 F6 | 	mov	arg01, local06
05f2c     15 15 02 F6 | 	mov	arg02, local07
05f30     30 AA B1 FD | 	call	#__system___string_cmp
05f34     01 FA 55 F2 | 	cmps	result1, #1 wc
05f38     01 3C 66 C6 |  if_b	neg	local16, #1
05f3c                 | LR__0505
05f3c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
05f3c     83 01 00 FF 
05f40     4D 15 06 F6 | 	mov	arg02, ##@LR__5377
05f44     14 13 02 F6 | 	mov	arg01, local06
05f48     18 AA B1 FD | 	call	#__system___string_cmp
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     7C 00 90 AD |  if_e	jmp	#LR__0506
05f54     83 01 00 FF 
05f58     4F 2B 06 F6 | 	mov	local07, ##@LR__5378
05f5c     14 13 02 F6 | 	mov	arg01, local06
05f60     15 15 02 F6 | 	mov	arg02, local07
05f64     FC A9 B1 FD | 	call	#__system___string_cmp
05f68     00 FA 0D F2 | 	cmp	result1, #0 wz
05f6c     60 00 90 AD |  if_e	jmp	#LR__0506
05f70     83 01 00 FF 
05f74     51 2D 06 F6 | 	mov	local08, ##@LR__5379
05f78     16 2B 02 F6 | 	mov	local07, local08
05f7c     14 13 02 F6 | 	mov	arg01, local06
05f80     15 15 02 F6 | 	mov	arg02, local07
05f84     DC A9 B1 FD | 	call	#__system___string_cmp
05f88     00 FA 0D F2 | 	cmp	result1, #0 wz
05f8c     40 00 90 AD |  if_e	jmp	#LR__0506
05f90     83 01 00 FF 
05f94     53 2F 06 F6 | 	mov	local09, ##@LR__5380
05f98     17 2D 02 F6 | 	mov	local08, local09
05f9c     14 13 02 F6 | 	mov	arg01, local06
05fa0     16 15 02 F6 | 	mov	arg02, local08
05fa4     BC A9 B1 FD | 	call	#__system___string_cmp
05fa8     FD 2A 0A F6 | 	mov	local07, result1 wz
05fac     20 00 90 AD |  if_e	jmp	#LR__0506
05fb0     83 01 00 FF 
05fb4     55 31 06 F6 | 	mov	local10, ##@LR__5381
05fb8     18 2F 02 F6 | 	mov	local09, local10
05fbc     14 13 02 F6 | 	mov	arg01, local06
05fc0     17 15 02 F6 | 	mov	arg02, local09
05fc4     9C A9 B1 FD | 	call	#__system___string_cmp
05fc8     FD 2C 0A F6 | 	mov	local08, result1 wz
05fcc     04 00 90 5D |  if_ne	jmp	#LR__0507
05fd0                 | LR__0506
05fd0     01 3C 66 F6 | 	neg	local16, #1
05fd4                 | LR__0507
05fd4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
05fd4     01 34 0E F2 | 	cmp	local12, #1 wz
05fd8     34 00 90 5D |  if_ne	jmp	#LR__0508
05fdc     83 01 00 FF 
05fe0     57 15 06 F6 | 	mov	arg02, ##@LR__5382
05fe4     14 13 02 F6 | 	mov	arg01, local06
05fe8     78 A9 B1 FD | 	call	#__system___string_cmp
05fec     00 FA 55 F2 | 	cmps	result1, #0 wc
05ff0     1C 00 90 CD |  if_b	jmp	#LR__0508
05ff4     83 01 00 FF 
05ff8     59 2B 06 F6 | 	mov	local07, ##@LR__5383
05ffc     14 13 02 F6 | 	mov	arg01, local06
06000     15 15 02 F6 | 	mov	arg02, local07
06004     5C A9 B1 FD | 	call	#__system___string_cmp
06008     01 FA 55 F2 | 	cmps	result1, #1 wc
0600c     01 3C 66 C6 |  if_b	neg	local16, #1
06010                 | LR__0508
06010                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06010     01 36 0E F2 | 	cmp	local13, #1 wz
06014     58 00 90 5D |  if_ne	jmp	#LR__0510
06018     83 01 00 FF 
0601c     5B 15 06 F6 | 	mov	arg02, ##@LR__5384
06020     14 13 02 F6 | 	mov	arg01, local06
06024     3C A9 B1 FD | 	call	#__system___string_cmp
06028     00 FA 55 F2 | 	cmps	result1, #0 wc
0602c     1C 00 90 CD |  if_b	jmp	#LR__0509
06030     83 01 00 FF 
06034     5D 2B 06 F6 | 	mov	local07, ##@LR__5385
06038     14 13 02 F6 | 	mov	arg01, local06
0603c     15 15 02 F6 | 	mov	arg02, local07
06040     20 A9 B1 FD | 	call	#__system___string_cmp
06044     01 FA 55 F2 | 	cmps	result1, #1 wc
06048     24 00 90 CD |  if_b	jmp	#LR__0510
0604c                 | LR__0509
0604c     83 01 00 FF 
06050     5F 2D 06 F6 | 	mov	local08, ##@LR__5386
06054     16 2B 02 F6 | 	mov	local07, local08
06058     14 13 02 F6 | 	mov	arg01, local06
0605c     15 15 02 F6 | 	mov	arg02, local07
06060     00 A9 B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     00 FA 05 56 |  if_ne	mov	result1, #0
0606c     E8 00 90 5D |  if_ne	jmp	#LR__0516
06070                 | LR__0510
06070                 | '     if not b then return false
06070     1E 3D 22 F6 | 	not	local16, local16
06074     00 3C 0E F2 | 	cmp	local16, #0 wz
06078     00 FA 05 56 |  if_ne	mov	result1, #0
0607c     D8 00 90 5D |  if_ne	jmp	#LR__0516
06080                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06080     83 01 00 FF 
06084     61 15 06 F6 | 	mov	arg02, ##@LR__5387
06088     14 13 02 F6 | 	mov	arg01, local06
0608c     D4 A8 B1 FD | 	call	#__system___string_cmp
06090     00 FA 0D F2 | 	cmp	result1, #0 wz
06094     3C 00 90 5D |  if_ne	jmp	#LR__0511
06098     1C 15 02 F6 | 	mov	arg02, local14
0609c     01 14 86 F1 | 	sub	arg02, #1
060a0     0F 13 02 F6 | 	mov	arg01, local01
060a4     01 16 06 F6 | 	mov	arg03, #1
060a8     24 CA B1 FD | 	call	#__system__Mid_S
060ac     FD 12 02 F6 | 	mov	arg01, result1
060b0     14 CC B1 FD | 	call	#__system__LCase_S
060b4     FD 12 02 F6 | 	mov	arg01, result1
060b8     83 01 00 FF 
060bc     63 2B 06 F6 | 	mov	local07, ##@LR__5388
060c0     15 15 02 F6 | 	mov	arg02, local07
060c4     9C A8 B1 FD | 	call	#__system___string_cmp
060c8     00 FA 0D F2 | 	cmp	result1, #0 wz
060cc     00 FA 05 56 |  if_ne	mov	result1, #0
060d0     84 00 90 5D |  if_ne	jmp	#LR__0516
060d4                 | LR__0511
060d4                 | '     if m$="." then ds+=1: if ds>1 then return false
060d4     83 01 00 FF 
060d8     65 15 06 F6 | 	mov	arg02, ##@LR__5389
060dc     14 13 02 F6 | 	mov	arg01, local06
060e0     80 A8 B1 FD | 	call	#__system___string_cmp
060e4     00 FA 0D F2 | 	cmp	result1, #0 wz
060e8     01 20 06 A1 |  if_e	add	local02, #1
060ec     02 20 56 A2 |  if_e	cmps	local02, #2 wc
060f0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
060f4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
060f8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
060f8     83 01 00 FF 
060fc     67 3F 06 F6 | 	mov	local17, ##@LR__5390
06100     1F 41 02 F6 | 	mov	local18, local17
06104     14 13 02 F6 | 	mov	arg01, local06
06108     20 15 02 F6 | 	mov	arg02, local18
0610c     54 A8 B1 FD | 	call	#__system___string_cmp
06110     FD 42 0A F6 | 	mov	local19, result1 wz
06114     20 00 90 AD |  if_e	jmp	#LR__0512
06118     83 01 00 FF 
0611c     69 2B 06 F6 | 	mov	local07, ##@LR__5391
06120     15 3F 02 F6 | 	mov	local17, local07
06124     14 13 02 F6 | 	mov	arg01, local06
06128     1F 15 02 F6 | 	mov	arg02, local17
0612c     34 A8 B1 FD | 	call	#__system___string_cmp
06130     FD 40 0A F6 | 	mov	local18, result1 wz
06134     14 00 90 5D |  if_ne	jmp	#LR__0513
06138                 | LR__0512
06138     01 22 06 F1 | 	add	local03, #1
0613c     00 34 0E F2 | 	cmp	local12, #0 wz
06140     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06144     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06148     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
0614c                 | LR__0513
0614c     01 38 06 F1 | 	add	local14, #1
06150     94 FD 9F FD | 	jmp	#LR__0504
06154                 | LR__0514
06154                 | LR__0515
06154                 | ' return true
06154     01 FA 65 F6 | 	neg	result1, #1
06158                 | LR__0516
06158     A7 F0 03 F6 | 	mov	ptra, fp
0615c     B2 00 A0 FD | 	call	#popregs_
06160                 | _isnum_ret
06160     2D 00 64 FD | 	ret
06164                 | 
06164                 | '   
06164                 | ' ' Check if the part is an integer number.    
06164                 | '   
06164                 | ' function isint(s as string) as boolean
06164                 | _isint
06164     0E 4A 05 F6 | 	mov	COUNT_, #14
06168     A8 00 A0 FD | 	call	#pushregs_
0616c     09 1F 02 F6 | 	mov	local01, arg01
06170     09 21 02 F6 | 	mov	local02, arg01
06174     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06178                 | LR__0520
06178     10 FB C9 FA | 	rdbyte	result1, local02 wz
0617c     01 20 06 51 |  if_ne	add	local02, #1
06180     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06184                 | LR__0521
06184     09 21 82 F1 | 	sub	local02, arg01
06188     10 FB 01 F6 | 	mov	result1, local02
0618c     FD 22 0A F6 | 	mov	local03, result1 wz
06190     00 FA 05 A6 |  if_e	mov	result1, #0
06194     64 02 90 AD |  if_e	jmp	#LR__0534
06198     0F 13 02 F6 | 	mov	arg01, local01
0619c     01 14 06 F6 | 	mov	arg02, #1
061a0     01 16 06 F6 | 	mov	arg03, #1
061a4     28 C9 B1 FD | 	call	#__system__Mid_S
061a8     FD 24 02 F6 | 	mov	local04, result1
061ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
061ac     83 01 00 FF 
061b0     6B 15 06 F6 | 	mov	arg02, ##@LR__5392
061b4     12 13 02 F6 | 	mov	arg01, local04
061b8     A8 A7 B1 FD | 	call	#__system___string_cmp
061bc     00 FA 55 F2 | 	cmps	result1, #0 wc
061c0     1C 00 90 CD |  if_b	jmp	#LR__0522
061c4     83 01 00 FF 
061c8     6D 27 06 F6 | 	mov	local05, ##@LR__5393
061cc     12 13 02 F6 | 	mov	arg01, local04
061d0     13 15 02 F6 | 	mov	arg02, local05
061d4     8C A7 B1 FD | 	call	#__system___string_cmp
061d8     01 FA 55 F2 | 	cmps	result1, #1 wc
061dc     64 00 90 CD |  if_b	jmp	#LR__0523
061e0                 | LR__0522
061e0     83 01 00 FF 
061e4     6F 29 06 F6 | 	mov	local06, ##@LR__5394
061e8     14 27 02 F6 | 	mov	local05, local06
061ec     12 13 02 F6 | 	mov	arg01, local04
061f0     13 15 02 F6 | 	mov	arg02, local05
061f4     6C A7 B1 FD | 	call	#__system___string_cmp
061f8     00 FA 0D F2 | 	cmp	result1, #0 wz
061fc     44 00 90 AD |  if_e	jmp	#LR__0523
06200     83 01 00 FF 
06204     71 2B 06 F6 | 	mov	local07, ##@LR__5395
06208     15 29 02 F6 | 	mov	local06, local07
0620c     12 13 02 F6 | 	mov	arg01, local04
06210     14 15 02 F6 | 	mov	arg02, local06
06214     4C A7 B1 FD | 	call	#__system___string_cmp
06218     FD 26 0A F6 | 	mov	local05, result1 wz
0621c     24 00 90 AD |  if_e	jmp	#LR__0523
06220     83 01 00 FF 
06224     73 2D 06 F6 | 	mov	local08, ##@LR__5396
06228     16 2B 02 F6 | 	mov	local07, local08
0622c     12 13 02 F6 | 	mov	arg01, local04
06230     15 15 02 F6 | 	mov	arg02, local07
06234     2C A7 B1 FD | 	call	#__system___string_cmp
06238     FD 28 0A F6 | 	mov	local06, result1 wz
0623c     00 FA 05 56 |  if_ne	mov	result1, #0
06240     B8 01 90 5D |  if_ne	jmp	#LR__0534
06244                 | LR__0523
06244                 | ' if m$="$" then hex=1 else hex=0
06244     83 01 00 FF 
06248     75 15 06 F6 | 	mov	arg02, ##@LR__5397
0624c     12 13 02 F6 | 	mov	arg01, local04
06250     10 A7 B1 FD | 	call	#__system___string_cmp
06254     00 FA 0D F2 | 	cmp	result1, #0 wz
06258     01 2E 06 A6 |  if_e	mov	local09, #1
0625c     00 2E 06 56 |  if_ne	mov	local09, #0
06260                 | ' if m$="%" then bin=1 else bin=0
06260     83 01 00 FF 
06264     77 15 06 F6 | 	mov	arg02, ##@LR__5398
06268     12 13 02 F6 | 	mov	arg01, local04
0626c     F4 A6 B1 FD | 	call	#__system___string_cmp
06270     00 FA 0D F2 | 	cmp	result1, #0 wz
06274     01 30 06 A6 |  if_e	mov	local10, #1
06278     00 30 06 56 |  if_ne	mov	local10, #0
0627c                 | ' if l>1 then 
0627c     02 22 56 F2 | 	cmps	local03, #2 wc
06280     74 01 90 CD |  if_b	jmp	#LR__0533
06284                 | '   for i=2 to l
06284     02 32 06 F6 | 	mov	local11, #2
06288     11 35 02 F6 | 	mov	local12, local03
0628c     01 34 06 F1 | 	add	local12, #1
06290                 | LR__0524
06290     1A 33 52 F2 | 	cmps	local11, local12 wc
06294     60 01 90 3D |  if_ae	jmp	#LR__0532
06298     0F 13 02 F6 | 	mov	arg01, local01
0629c     19 15 02 F6 | 	mov	arg02, local11
062a0     01 16 06 F6 | 	mov	arg03, #1
062a4     28 C8 B1 FD | 	call	#__system__Mid_S
062a8     FD 24 02 F6 | 	mov	local04, result1
062ac                 | '     m$=mid$(s,i,1) 
062ac                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
062ac     00 2E 0E F2 | 	cmp	local09, #0 wz
062b0     50 00 90 5D |  if_ne	jmp	#LR__0526
062b4     83 01 00 FF 
062b8     79 15 06 F6 | 	mov	arg02, ##@LR__5399
062bc     12 13 02 F6 | 	mov	arg01, local04
062c0     A0 A6 B1 FD | 	call	#__system___string_cmp
062c4     00 FA 55 F2 | 	cmps	result1, #0 wc
062c8     18 00 90 CD |  if_b	jmp	#LR__0525
062cc     83 01 00 FF 
062d0     7B 15 06 F6 | 	mov	arg02, ##@LR__5400
062d4     12 13 02 F6 | 	mov	arg01, local04
062d8     88 A6 B1 FD | 	call	#__system___string_cmp
062dc     01 FA 55 F2 | 	cmps	result1, #1 wc
062e0     20 00 90 CD |  if_b	jmp	#LR__0526
062e4                 | LR__0525
062e4     83 01 00 FF 
062e8     7D 29 06 F6 | 	mov	local06, ##@LR__5401
062ec     12 13 02 F6 | 	mov	arg01, local04
062f0     14 15 02 F6 | 	mov	arg02, local06
062f4     6C A6 B1 FD | 	call	#__system___string_cmp
062f8     00 FA 0D F2 | 	cmp	result1, #0 wz
062fc     00 FA 05 56 |  if_ne	mov	result1, #0
06300     F8 00 90 5D |  if_ne	jmp	#LR__0534
06304                 | LR__0526
06304                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06304     01 2E 0E F2 | 	cmp	local09, #1 wz
06308     90 00 90 5D |  if_ne	jmp	#LR__0529
0630c     83 01 00 FF 
06310     7F 15 06 F6 | 	mov	arg02, ##@LR__5402
06314     12 13 02 F6 | 	mov	arg01, local04
06318     48 A6 B1 FD | 	call	#__system___string_cmp
0631c     00 FA 55 F2 | 	cmps	result1, #0 wc
06320     1C 00 90 CD |  if_b	jmp	#LR__0527
06324     83 01 00 FF 
06328     81 15 06 F6 | 	mov	arg02, ##@LR__5403
0632c     12 13 02 F6 | 	mov	arg01, local04
06330     30 A6 B1 FD | 	call	#__system___string_cmp
06334     FD 36 02 F6 | 	mov	local13, result1
06338     01 36 56 F2 | 	cmps	local13, #1 wc
0633c     5C 00 90 CD |  if_b	jmp	#LR__0529
06340                 | LR__0527
06340     83 01 00 FF 
06344     83 27 06 F6 | 	mov	local05, ##@LR__5404
06348     12 13 02 F6 | 	mov	arg01, local04
0634c     13 15 02 F6 | 	mov	arg02, local05
06350     10 A6 B1 FD | 	call	#__system___string_cmp
06354     FD 38 02 F6 | 	mov	local14, result1
06358     00 38 56 F2 | 	cmps	local14, #0 wc
0635c     1C 00 90 CD |  if_b	jmp	#LR__0528
06360     83 01 00 FF 
06364     85 2B 06 F6 | 	mov	local07, ##@LR__5405
06368     12 13 02 F6 | 	mov	arg01, local04
0636c     15 15 02 F6 | 	mov	arg02, local07
06370     F0 A5 B1 FD | 	call	#__system___string_cmp
06374     01 FA 55 F2 | 	cmps	result1, #1 wc
06378     20 00 90 CD |  if_b	jmp	#LR__0529
0637c                 | LR__0528
0637c     83 01 00 FF 
06380     87 2D 06 F6 | 	mov	local08, ##@LR__5406
06384     12 13 02 F6 | 	mov	arg01, local04
06388     16 15 02 F6 | 	mov	arg02, local08
0638c     D4 A5 B1 FD | 	call	#__system___string_cmp
06390     00 FA 0D F2 | 	cmp	result1, #0 wz
06394     00 FA 05 56 |  if_ne	mov	result1, #0
06398     60 00 90 5D |  if_ne	jmp	#LR__0534
0639c                 | LR__0529
0639c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0639c     01 30 0E F2 | 	cmp	local10, #1 wz
063a0     4C 00 90 5D |  if_ne	jmp	#LR__0531
063a4     83 01 00 FF 
063a8     89 15 06 F6 | 	mov	arg02, ##@LR__5407
063ac     12 13 02 F6 | 	mov	arg01, local04
063b0     B0 A5 B1 FD | 	call	#__system___string_cmp
063b4     00 FA 55 F2 | 	cmps	result1, #0 wc
063b8     18 00 90 CD |  if_b	jmp	#LR__0530
063bc     83 01 00 FF 
063c0     8B 15 06 F6 | 	mov	arg02, ##@LR__5408
063c4     12 13 02 F6 | 	mov	arg01, local04
063c8     98 A5 B1 FD | 	call	#__system___string_cmp
063cc     01 FA 55 F2 | 	cmps	result1, #1 wc
063d0     1C 00 90 CD |  if_b	jmp	#LR__0531
063d4                 | LR__0530
063d4     83 01 00 FF 
063d8     8D 15 06 F6 | 	mov	arg02, ##@LR__5409
063dc     12 13 02 F6 | 	mov	arg01, local04
063e0     80 A5 B1 FD | 	call	#__system___string_cmp
063e4     00 FA 0D F2 | 	cmp	result1, #0 wz
063e8     00 FA 05 56 |  if_ne	mov	result1, #0
063ec     0C 00 90 5D |  if_ne	jmp	#LR__0534
063f0                 | LR__0531
063f0     01 32 06 F1 | 	add	local11, #1
063f4     98 FE 9F FD | 	jmp	#LR__0524
063f8                 | LR__0532
063f8                 | LR__0533
063f8                 | ' return true
063f8     01 FA 65 F6 | 	neg	result1, #1
063fc                 | LR__0534
063fc     A7 F0 03 F6 | 	mov	ptra, fp
06400     B2 00 A0 FD | 	call	#popregs_
06404                 | _isint_ret
06404     2D 00 64 FD | 	ret
06408                 | 
06408                 | ' 
06408                 | ' ' Check if the part is a positive decimal number.  
06408                 | ' 
06408                 | ' function isdec(s as string) as boolean
06408                 | _isdec
06408     05 4A 05 F6 | 	mov	COUNT_, #5
0640c     A8 00 A0 FD | 	call	#pushregs_
06410     09 1F 02 F6 | 	mov	local01, arg01
06414     09 21 02 F6 | 	mov	local02, arg01
06418     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0641c                 | LR__0540
0641c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06420     01 20 06 51 |  if_ne	add	local02, #1
06424     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06428                 | LR__0541
06428     09 21 82 F1 | 	sub	local02, arg01
0642c     10 FB 01 F6 | 	mov	result1, local02
06430     FD 20 0A F6 | 	mov	local02, result1 wz
06434     00 FA 05 A6 |  if_e	mov	result1, #0
06438     80 00 90 AD |  if_e	jmp	#LR__0546
0643c                 | ' for i=1 to l
0643c     01 22 06 F6 | 	mov	local03, #1
06440     10 25 02 F6 | 	mov	local04, local02
06444     01 24 06 F1 | 	add	local04, #1
06448                 | LR__0542
06448     12 23 52 F2 | 	cmps	local03, local04 wc
0644c     68 00 90 3D |  if_ae	jmp	#LR__0545
06450     0F 13 02 F6 | 	mov	arg01, local01
06454     11 15 02 F6 | 	mov	arg02, local03
06458     01 16 06 F6 | 	mov	arg03, #1
0645c     70 C6 B1 FD | 	call	#__system__Mid_S
06460     FD 26 02 F6 | 	mov	local05, result1
06464                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06464     83 01 00 FF 
06468     8F 15 06 F6 | 	mov	arg02, ##@LR__5410
0646c     13 13 02 F6 | 	mov	arg01, local05
06470     F0 A4 B1 FD | 	call	#__system___string_cmp
06474     00 FA 55 F2 | 	cmps	result1, #0 wc
06478     18 00 90 CD |  if_b	jmp	#LR__0543
0647c     83 01 00 FF 
06480     91 15 06 F6 | 	mov	arg02, ##@LR__5411
06484     13 13 02 F6 | 	mov	arg01, local05
06488     D8 A4 B1 FD | 	call	#__system___string_cmp
0648c     01 FA 55 F2 | 	cmps	result1, #1 wc
06490     1C 00 90 CD |  if_b	jmp	#LR__0544
06494                 | LR__0543
06494     83 01 00 FF 
06498     93 15 06 F6 | 	mov	arg02, ##@LR__5412
0649c     13 13 02 F6 | 	mov	arg01, local05
064a0     C0 A4 B1 FD | 	call	#__system___string_cmp
064a4     00 FA 0D F2 | 	cmp	result1, #0 wz
064a8     00 FA 05 56 |  if_ne	mov	result1, #0
064ac     0C 00 90 5D |  if_ne	jmp	#LR__0546
064b0                 | LR__0544
064b0     01 22 06 F1 | 	add	local03, #1
064b4     90 FF 9F FD | 	jmp	#LR__0542
064b8                 | LR__0545
064b8                 | ' return true
064b8     01 FA 65 F6 | 	neg	result1, #1
064bc                 | LR__0546
064bc     A7 F0 03 F6 | 	mov	ptra, fp
064c0     B2 00 A0 FD | 	call	#popregs_
064c4                 | _isdec_ret
064c4     2D 00 64 FD | 	ret
064c8                 | 
064c8                 | ' 
064c8                 | ' ' Check if the part is a string.  
064c8                 | ' 
064c8                 | ' function isstring(s as string) as boolean
064c8                 | _isstring
064c8     01 4A 05 F6 | 	mov	COUNT_, #1
064cc     A8 00 A0 FD | 	call	#pushregs_
064d0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
064d0     09 1F 02 F6 | 	mov	local01, arg01
064d4     01 14 06 F6 | 	mov	arg02, #1
064d8     DC C4 B1 FD | 	call	#__system__Left_S
064dc     FD 12 02 F6 | 	mov	arg01, result1
064e0     83 01 00 FF 
064e4     95 15 06 F6 | 	mov	arg02, ##@LR__5413
064e8     78 A4 B1 FD | 	call	#__system___string_cmp
064ec     00 FA 4D F2 | 	cmps	result1, #0 wz
064f0     28 00 90 5D |  if_ne	jmp	#LR__0550
064f4     0F 13 02 F6 | 	mov	arg01, local01
064f8     01 14 06 F6 | 	mov	arg02, #1
064fc     40 C5 B1 FD | 	call	#__system__Right_S
06500     FD 12 02 F6 | 	mov	arg01, result1
06504     83 01 00 FF 
06508     97 15 06 F6 | 	mov	arg02, ##@LR__5414
0650c     54 A4 B1 FD | 	call	#__system___string_cmp
06510     00 FA 4D F2 | 	cmps	result1, #0 wz
06514     01 FA 65 A6 |  if_e	neg	result1, #1
06518     04 00 90 AD |  if_e	jmp	#LR__0551
0651c                 | LR__0550
0651c     00 FA 05 F6 | 	mov	result1, #0
06520                 | LR__0551
06520     A7 F0 03 F6 | 	mov	ptra, fp
06524     B2 00 A0 FD | 	call	#popregs_
06528                 | _isstring_ret
06528     2D 00 64 FD | 	ret
0652c                 | 
0652c                 | ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' '
0652c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0652c                 | ' '
0652c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0652c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0652c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0652c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0652c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0652c                 | ' ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' ' Helper functions to manage program lines
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' 
0652c                 | ' '----- delete a line from a program
0652c                 | ' 
0652c                 | ' function deleteline(aline as ulong) as integer
0652c                 | _deleteline
0652c     02 4A 05 F6 | 	mov	COUNT_, #2
06530     A8 00 A0 FD | 	call	#pushregs_
06534     2C F0 07 F1 | 	add	ptra, #44
06538     04 4E 05 F1 | 	add	fp, #4
0653c     A7 12 62 FC | 	wrlong	arg01, fp
06540     4A 00 00 FF 
06544     88 E4 05 F1 | 	add	objptr, ##38024
06548     F2 1E 02 FB | 	rdlong	local01, objptr
0654c     0C 4E 05 F1 | 	add	fp, #12
06550     A7 1E 62 FC | 	wrlong	local01, fp
06554     10 4E 85 F1 | 	sub	fp, #16
06558                 | ' 
06558                 | ' searchptr=programstart
06558                 | ' do
06558     3E 00 00 FF 
0655c     BC E5 85 F1 | 	sub	objptr, ##32188
06560                 | LR__0560
06560     14 4E 05 F1 | 	add	fp, #20
06564     A7 12 02 F6 | 	mov	arg01, fp
06568     04 4E 85 F1 | 	sub	fp, #4
0656c     A7 14 02 FB | 	rdlong	arg02, fp
06570     10 4E 85 F1 | 	sub	fp, #16
06574     18 16 06 F6 | 	mov	arg03, #24
06578     80 97 B1 FD | 	call	#_psram_spin2_read1
0657c     10 4E 05 F1 | 	add	fp, #16
06580     A7 1E 02 FB | 	rdlong	local01, fp
06584     08 4E 85 F1 | 	sub	fp, #8
06588     A7 1E 62 FC | 	wrlong	local01, fp
0658c     20 4E 05 F1 | 	add	fp, #32
06590     A7 1E 02 FB | 	rdlong	local01, fp
06594     18 4E 85 F1 | 	sub	fp, #24
06598     A7 1E 62 FC | 	wrlong	local01, fp
0659c     04 4E 05 F1 | 	add	fp, #4
065a0     A7 1E 02 FB | 	rdlong	local01, fp
065a4     10 4E 85 F1 | 	sub	fp, #16
065a8     A7 16 02 FB | 	rdlong	arg03, fp
065ac     04 4E 85 F1 | 	sub	fp, #4
065b0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
065b4     28 4E 05 C1 |  if_b	add	fp, #40
065b8     A7 20 02 CB |  if_b	rdlong	local02, fp
065bc     28 4E 85 C1 |  if_b	sub	fp, #40
065c0     FF FF 3F CF 
065c4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
065c8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
065cc     0B 00 00 FF 
065d0     CC E4 85 F1 | 	sub	objptr, ##5836
065d4                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
065d4     14 4E 05 F1 | 	add	fp, #20
065d8     A7 1E 02 FB | 	rdlong	local01, fp
065dc     10 4E 85 F1 | 	sub	fp, #16
065e0     A7 20 02 FB | 	rdlong	local02, fp
065e4     04 4E 85 F1 | 	sub	fp, #4
065e8     10 1F 0A F2 | 	cmp	local01, local02 wz
065ec     01 FA 65 56 |  if_ne	neg	result1, #1
065f0     34 02 90 5D |  if_ne	jmp	#LR__0565
065f4     08 4E 05 F1 | 	add	fp, #8
065f8     A7 12 02 FB | 	rdlong	arg01, fp
065fc     08 4E 85 F1 | 	sub	fp, #8
06600     01 14 66 F6 | 	neg	arg02, #1
06604     08 6F B1 FD | 	call	#_pslpoke
06608                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06608                 | ' 
06608                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06608     28 4E 05 F1 | 	add	fp, #40
0660c     A7 1E 02 FB | 	rdlong	local01, fp
06610     28 4E 85 F1 | 	sub	fp, #40
06614     FF FF 3F FF 
06618     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0661c     24 4E 05 A1 |  if_e	add	fp, #36
06620     A7 20 02 AB |  if_e	rdlong	local02, fp
06624     24 4E 85 A1 |  if_e	sub	fp, #36
06628     FF FF 7F AF 
0662c     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
06630     88 00 90 5D |  if_ne	jmp	#LR__0561
06634     4A 00 00 FF 
06638     88 E4 05 F1 | 	add	objptr, ##38024
0663c     00 04 80 FF 
06640     F2 00 68 FC | 	wrlong	##524288, objptr
06644     07 00 00 FF 
06648     2C E4 85 F1 | 	sub	objptr, ##3628
0664c     00 04 80 FF 
06650     F2 00 68 FC | 	wrlong	##524288, objptr
06654     07 00 00 FF 
06658     30 E4 05 F1 | 	add	objptr, ##3632
0665c     F2 00 68 FC | 	wrlong	#0, objptr
06660     04 E4 05 F1 | 	add	objptr, #4
06664     FF FF FF FF 
06668     F2 FE 6B FC | 	wrlong	##-1, objptr
0666c     4A 00 00 FF 
06670     90 E4 85 F1 | 	sub	objptr, ##38032
06674     00 12 06 F6 | 	mov	arg01, #0
06678     01 14 66 F6 | 	neg	arg02, #1
0667c     90 6E B1 FD | 	call	#_pslpoke
06680     10 12 06 F6 | 	mov	arg01, #16
06684     01 14 66 F6 | 	neg	arg02, #1
06688     84 6E B1 FD | 	call	#_pslpoke
0668c     14 12 06 F6 | 	mov	arg01, #20
06690     1E 14 CE F9 | 	bmask	arg02, #30
06694     78 6E B1 FD | 	call	#_pslpoke
06698     50 00 00 FF 
0669c     B8 E4 05 F1 | 	add	objptr, ##41144
066a0     00 04 80 FF 
066a4     F2 00 68 FC | 	wrlong	##524288, objptr
066a8     04 E4 05 F1 | 	add	objptr, #4
066ac     00 04 80 FF 
066b0     F2 00 68 FC | 	wrlong	##524288, objptr
066b4     50 00 00 FF 
066b8     BC E4 85 F1 | 	sub	objptr, ##41148
066bc                 | LR__0561
066bc                 | ' 
066bc                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
066bc     28 4E 05 F1 | 	add	fp, #40
066c0     A7 1E 02 FB | 	rdlong	local01, fp
066c4     28 4E 85 F1 | 	sub	fp, #40
066c8     FF FF 3F FF 
066cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
066d0     74 00 90 5D |  if_ne	jmp	#LR__0562
066d4     24 4E 05 F1 | 	add	fp, #36
066d8     A7 20 02 FB | 	rdlong	local02, fp
066dc     24 4E 85 F1 | 	sub	fp, #36
066e0     FF FF 7F FF 
066e4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
066e8     5C 00 90 AD |  if_e	jmp	#LR__0562
066ec     24 4E 05 F1 | 	add	fp, #36
066f0     A7 12 02 FB | 	rdlong	arg01, fp
066f4     24 4E 85 F1 | 	sub	fp, #36
066f8     14 12 06 F1 | 	add	arg01, #20
066fc     1E 14 CE F9 | 	bmask	arg02, #30
06700     0C 6E B1 FD | 	call	#_pslpoke
06704     24 4E 05 F1 | 	add	fp, #36
06708     A7 1E 02 FB | 	rdlong	local01, fp
0670c     4A 00 00 FF 
06710     90 E4 05 F1 | 	add	objptr, ##38032
06714     F2 1E 62 FC | 	wrlong	local01, objptr
06718     4A 00 00 FF 
0671c     90 E4 85 F1 | 	sub	objptr, ##38032
06720     A7 12 02 FB | 	rdlong	arg01, fp
06724     24 4E 85 F1 | 	sub	fp, #36
06728     14 6F B1 FD | 	call	#_pslpeek
0672c     4A 00 00 FF 
06730     8C E4 05 F1 | 	add	objptr, ##38028
06734     F2 FA 61 FC | 	wrlong	result1, objptr
06738     4A 00 00 FF 
0673c     8C E4 85 F1 | 	sub	objptr, ##38028
06740                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06740                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06740                 | '   lastline=pslpeek(header(4))
06740                 | '   return 0
06740     00 FA 05 F6 | 	mov	result1, #0
06744     E0 00 90 FD | 	jmp	#LR__0565
06748                 | LR__0562
06748                 | ' 
06748                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06748     28 4E 05 F1 | 	add	fp, #40
0674c     A7 1E 02 FB | 	rdlong	local01, fp
06750     28 4E 85 F1 | 	sub	fp, #40
06754     FF FF 3F FF 
06758     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0675c     58 00 90 AD |  if_e	jmp	#LR__0563
06760     24 4E 05 F1 | 	add	fp, #36
06764     A7 20 02 FB | 	rdlong	local02, fp
06768     24 4E 85 F1 | 	sub	fp, #36
0676c     FF FF 7F FF 
06770     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06774     40 00 90 5D |  if_ne	jmp	#LR__0563
06778     28 4E 05 F1 | 	add	fp, #40
0677c     A7 12 02 FB | 	rdlong	arg01, fp
06780     28 4E 85 F1 | 	sub	fp, #40
06784     10 12 06 F1 | 	add	arg01, #16
06788     01 14 66 F6 | 	neg	arg02, #1
0678c     80 6D B1 FD | 	call	#_pslpoke
06790     28 4E 05 F1 | 	add	fp, #40
06794     A7 1E 02 FB | 	rdlong	local01, fp
06798     28 4E 85 F1 | 	sub	fp, #40
0679c     4A 00 00 FF 
067a0     88 E4 05 F1 | 	add	objptr, ##38024
067a4     F2 1E 62 FC | 	wrlong	local01, objptr
067a8     4A 00 00 FF 
067ac     88 E4 85 F1 | 	sub	objptr, ##38024
067b0                 | ' '   print "deleted first line"
067b0                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
067b0                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
067b0                 | '   return 0
067b0     00 FA 05 F6 | 	mov	result1, #0
067b4     70 00 90 FD | 	jmp	#LR__0565
067b8                 | LR__0563
067b8                 | ' 
067b8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
067b8     28 4E 05 F1 | 	add	fp, #40
067bc     A7 1E 02 FB | 	rdlong	local01, fp
067c0     28 4E 85 F1 | 	sub	fp, #40
067c4     FF FF 3F FF 
067c8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
067cc     24 4E 05 51 |  if_ne	add	fp, #36
067d0     A7 20 02 5B |  if_ne	rdlong	local02, fp
067d4     24 4E 85 51 |  if_ne	sub	fp, #36
067d8     FF FF 7F 5F 
067dc     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
067e0     40 00 90 AD |  if_e	jmp	#LR__0564
067e4     28 4E 05 F1 | 	add	fp, #40
067e8     A7 12 02 FB | 	rdlong	arg01, fp
067ec     10 12 06 F1 | 	add	arg01, #16
067f0     04 4E 85 F1 | 	sub	fp, #4
067f4     A7 14 02 FB | 	rdlong	arg02, fp
067f8     24 4E 85 F1 | 	sub	fp, #36
067fc     10 6D B1 FD | 	call	#_pslpoke
06800     24 4E 05 F1 | 	add	fp, #36
06804     A7 12 02 FB | 	rdlong	arg01, fp
06808     14 12 06 F1 | 	add	arg01, #20
0680c     04 4E 05 F1 | 	add	fp, #4
06810     A7 14 02 FB | 	rdlong	arg02, fp
06814     28 4E 85 F1 | 	sub	fp, #40
06818     F4 6C B1 FD | 	call	#_pslpoke
0681c                 | '    pslpoke(header(5)+16,header(4))  
0681c                 | '    pslpoke(header(4)+20, header(5))
0681c                 | '    return 0
0681c     00 FA 05 F6 | 	mov	result1, #0
06820     04 00 90 FD | 	jmp	#LR__0565
06824                 | LR__0564
06824     00 FA 05 F6 | 	mov	result1, #0
06828                 | LR__0565
06828     A7 F0 03 F6 | 	mov	ptra, fp
0682c     B2 00 A0 FD | 	call	#popregs_
06830                 | _deleteline_ret
06830     2D 00 64 FD | 	ret
06834                 | 
06834                 | ' 
06834                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06834                 | ' 
06834                 | ' sub save_line
06834                 | _save_line
06834     03 4A 05 F6 | 	mov	COUNT_, #3
06838     A8 00 A0 FD | 	call	#pushregs_
0683c     4A 00 00 FF 
06840     7C E4 05 F1 | 	add	objptr, ##38012
06844     F2 16 02 FB | 	rdlong	arg03, objptr
06848     01 16 06 F1 | 	add	arg03, #1
0684c     05 00 00 FF 
06850     18 E4 85 F1 | 	sub	objptr, ##2584
06854     F2 14 02 FB | 	rdlong	arg02, objptr
06858     0B 15 02 FD | 	qmul	arg02, arg03
0685c     0E 00 00 FF 
06860     44 E4 85 F1 | 	sub	objptr, ##7236
06864     F2 12 02 FB | 	rdlong	arg01, objptr
06868     37 00 00 FF 
0686c     20 E4 85 F1 | 	sub	objptr, ##28192
06870     09 1F 02 F6 | 	mov	local01, arg01
06874     18 20 62 FD | 	getqx	local02
06878     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
0687c                 | LR__0570
0687c     0F FB C9 FA | 	rdbyte	result1, local01 wz
06880     01 1E 06 51 |  if_ne	add	local01, #1
06884     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06888                 | LR__0571
06888     09 1F 82 F1 | 	sub	local01, arg01
0688c     03 1E CE F7 | 	test	local01, #3 wz
06890     02 1E 46 50 |  if_ne	shr	local01, #2
06894     01 1E 06 51 |  if_ne	add	local01, #1
06898     02 1E 66 50 |  if_ne	shl	local01, #2
0689c     10 23 02 F6 | 	mov	local03, local02
068a0     0F 23 02 F1 | 	add	local03, local01
068a4     43 00 00 FF 
068a8     5C E4 05 F1 | 	add	objptr, ##34396
068ac     F2 16 02 FB | 	rdlong	arg03, objptr
068b0     10 17 02 F1 | 	add	arg03, local02
068b4     04 00 00 FF 
068b8     28 E4 05 F1 | 	add	objptr, ##2088
068bc     F2 16 62 FC | 	wrlong	arg03, objptr
068c0     04 E4 05 F1 | 	add	objptr, #4
068c4     F2 1E 62 FC | 	wrlong	local01, objptr
068c8     0C E4 85 F1 | 	sub	objptr, #12
068cc     F2 12 02 F6 | 	mov	arg01, objptr
068d0     04 00 00 FF 
068d4     20 E4 85 F1 | 	sub	objptr, ##2080
068d8     F2 14 02 FB | 	rdlong	arg02, objptr
068dc     10 17 02 F6 | 	mov	arg03, local02
068e0     37 00 00 FF 
068e4     90 E5 85 F1 | 	sub	objptr, ##28560
068e8     AC 94 B1 FD | 	call	#_psram_spin2_write
068ec     2B 00 00 FF 
068f0     54 E5 05 F1 | 	add	objptr, ##22356
068f4     F2 12 02 FB | 	rdlong	arg01, objptr
068f8     0C 00 00 FF 
068fc     3C E4 05 F1 | 	add	objptr, ##6204
06900     F2 14 02 FB | 	rdlong	arg02, objptr
06904     10 15 02 F1 | 	add	arg02, local02
06908     0F 17 02 F6 | 	mov	arg03, local01
0690c     37 00 00 FF 
06910     90 E5 85 F1 | 	sub	objptr, ##28560
06914     80 94 B1 FD | 	call	#_psram_spin2_write
06918     37 00 00 FF 
0691c     90 E5 05 F1 | 	add	objptr, ##28560
06920     F2 1E 02 FB | 	rdlong	local01, objptr
06924     11 1F 02 F1 | 	add	local01, local03
06928     F2 1E 62 FC | 	wrlong	local01, objptr
0692c     43 00 00 FF 
06930     5C E4 85 F1 | 	sub	objptr, ##34396
06934     A7 F0 03 F6 | 	mov	ptra, fp
06938     B2 00 A0 FD | 	call	#popregs_
0693c                 | _save_line_ret
0693c     2D 00 64 FD | 	ret
06940                 | 
06940                 | ' 
06940                 | ' '----- Insert a new line into the middle of the program
06940                 | ' 
06940                 | ' function insertline(aline as ulong) as integer
06940                 | _insertline
06940     02 4A 05 F6 | 	mov	COUNT_, #2
06944     A8 00 A0 FD | 	call	#pushregs_
06948     28 F0 07 F1 | 	add	ptra, #40
0694c     04 4E 05 F1 | 	add	fp, #4
06950     A7 12 62 FC | 	wrlong	arg01, fp
06954     4A 00 00 FF 
06958     88 E4 05 F1 | 	add	objptr, ##38024
0695c     F2 1E 02 FB | 	rdlong	local01, objptr
06960     04 4E 05 F1 | 	add	fp, #4
06964     A7 1E 62 FC | 	wrlong	local01, fp
06968     08 4E 85 F1 | 	sub	fp, #8
0696c                 | ' 
0696c                 | ' do
0696c     3E 00 00 FF 
06970     BC E5 85 F1 | 	sub	objptr, ##32188
06974                 | LR__0580
06974     10 4E 05 F1 | 	add	fp, #16
06978     A7 12 02 F6 | 	mov	arg01, fp
0697c     08 4E 85 F1 | 	sub	fp, #8
06980     A7 14 02 FB | 	rdlong	arg02, fp
06984     08 4E 85 F1 | 	sub	fp, #8
06988     18 16 06 F6 | 	mov	arg03, #24
0698c     6C 93 B1 FD | 	call	#_psram_spin2_read1
06990     08 4E 05 F1 | 	add	fp, #8
06994     A7 1E 02 FB | 	rdlong	local01, fp
06998     04 4E 05 F1 | 	add	fp, #4
0699c     A7 1E 62 FC | 	wrlong	local01, fp
069a0     18 4E 05 F1 | 	add	fp, #24
069a4     A7 1E 02 FB | 	rdlong	local01, fp
069a8     1C 4E 85 F1 | 	sub	fp, #28
069ac     A7 1E 62 FC | 	wrlong	local01, fp
069b0     08 4E 05 F1 | 	add	fp, #8
069b4     A7 1E 02 FB | 	rdlong	local01, fp
069b8     0C 4E 85 F1 | 	sub	fp, #12
069bc     A7 16 02 FB | 	rdlong	arg03, fp
069c0     04 4E 85 F1 | 	sub	fp, #4
069c4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
069c8     24 4E 05 C1 |  if_b	add	fp, #36
069cc     A7 20 02 CB |  if_b	rdlong	local02, fp
069d0     24 4E 85 C1 |  if_b	sub	fp, #36
069d4     FF FF 3F CF 
069d8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
069dc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
069e0     0B 00 00 FF 
069e4     CC E4 85 F1 | 	sub	objptr, ##5836
069e8                 | ' 
069e8                 | ' if header(0)=aline then return -1 				' delete it first
069e8     10 4E 05 F1 | 	add	fp, #16
069ec     A7 1E 02 FB | 	rdlong	local01, fp
069f0     0C 4E 85 F1 | 	sub	fp, #12
069f4     A7 20 02 FB | 	rdlong	local02, fp
069f8     04 4E 85 F1 | 	sub	fp, #4
069fc     10 1F 0A F2 | 	cmp	local01, local02 wz
06a00     01 FA 65 A6 |  if_e	neg	result1, #1
06a04     48 01 90 AD |  if_e	jmp	#LR__0583
06a08                 | ' if header(0)<aline then return -2 				' end of program reached
06a08     10 4E 05 F1 | 	add	fp, #16
06a0c     A7 1E 02 FB | 	rdlong	local01, fp
06a10     0C 4E 85 F1 | 	sub	fp, #12
06a14     A7 16 02 FB | 	rdlong	arg03, fp
06a18     04 4E 85 F1 | 	sub	fp, #4
06a1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06a20     02 FA 65 C6 |  if_b	neg	result1, #2
06a24     28 01 90 CD |  if_b	jmp	#LR__0583
06a28                 | ' 
06a28                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06a28     20 4E 05 F1 | 	add	fp, #32
06a2c     A7 1E 02 FB | 	rdlong	local01, fp
06a30     20 4E 85 F1 | 	sub	fp, #32
06a34     FF FF 7F FF 
06a38     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06a3c     78 00 90 5D |  if_ne	jmp	#LR__0581
06a40     43 00 00 FF 
06a44     5C E4 05 F1 | 	add	objptr, ##34396
06a48     F2 1E 02 FB | 	rdlong	local01, objptr
06a4c     07 00 00 FF 
06a50     2C E4 05 F1 | 	add	objptr, ##3628
06a54     F2 1E 62 FC | 	wrlong	local01, objptr
06a58     0C 4E 05 F1 | 	add	fp, #12
06a5c     A7 12 02 FB | 	rdlong	arg01, fp
06a60     0C 4E 85 F1 | 	sub	fp, #12
06a64     10 12 06 F1 | 	add	arg01, #16
06a68     07 00 00 FF 
06a6c     2C E4 85 F1 | 	sub	objptr, ##3628
06a70     F2 14 02 FB | 	rdlong	arg02, objptr
06a74     43 00 00 FF 
06a78     5C E4 85 F1 | 	sub	objptr, ##34396
06a7c     90 6A B1 FD | 	call	#_pslpoke
06a80     47 00 00 FF 
06a84     8C E4 05 F1 | 	add	objptr, ##36492
06a88     FF FF FF FF 
06a8c     F2 FE 6B FC | 	wrlong	##-1, objptr
06a90     0C 4E 05 F1 | 	add	fp, #12
06a94     A7 1E 02 FB | 	rdlong	local01, fp
06a98     0C 4E 85 F1 | 	sub	fp, #12
06a9c     04 E4 05 F1 | 	add	objptr, #4
06aa0     F2 1E 62 FC | 	wrlong	local01, objptr
06aa4     47 00 00 FF 
06aa8     90 E4 85 F1 | 	sub	objptr, ##36496
06aac     84 FD BF FD | 	call	#_save_line
06ab0                 | '   programstart=programptr
06ab0                 | '   pslpoke(lineptr2+16,programptr)
06ab0                 | '   ucompiledline(4)=$FFFF_FFFF
06ab0                 | '   ucompiledline(5)=lineptr2
06ab0                 | '   save_line
06ab0                 | '   return 0
06ab0     00 FA 05 F6 | 	mov	result1, #0
06ab4     98 00 90 FD | 	jmp	#LR__0583
06ab8                 | LR__0581
06ab8                 | ' 
06ab8                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06ab8     20 4E 05 F1 | 	add	fp, #32
06abc     A7 1E 02 FB | 	rdlong	local01, fp
06ac0     20 4E 85 F1 | 	sub	fp, #32
06ac4     FF FF 7F FF 
06ac8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06acc     7C 00 90 AD |  if_e	jmp	#LR__0582
06ad0     20 4E 05 F1 | 	add	fp, #32
06ad4     A7 1E 02 FB | 	rdlong	local01, fp
06ad8     47 00 00 FF 
06adc     8C E4 05 F1 | 	add	objptr, ##36492
06ae0     F2 1E 62 FC | 	wrlong	local01, objptr
06ae4     14 4E 85 F1 | 	sub	fp, #20
06ae8     A7 1E 02 FB | 	rdlong	local01, fp
06aec     04 E4 05 F1 | 	add	objptr, #4
06af0     F2 1E 62 FC | 	wrlong	local01, objptr
06af4     A7 12 02 FB | 	rdlong	arg01, fp
06af8     0C 4E 85 F1 | 	sub	fp, #12
06afc     10 12 06 F1 | 	add	arg01, #16
06b00     04 00 00 FF 
06b04     34 E4 85 F1 | 	sub	objptr, ##2100
06b08     F2 14 02 FB | 	rdlong	arg02, objptr
06b0c     43 00 00 FF 
06b10     5C E4 85 F1 | 	sub	objptr, ##34396
06b14     F8 69 B1 FD | 	call	#_pslpoke
06b18     20 4E 05 F1 | 	add	fp, #32
06b1c     A7 12 02 FB | 	rdlong	arg01, fp
06b20     20 4E 85 F1 | 	sub	fp, #32
06b24     14 12 06 F1 | 	add	arg01, #20
06b28     43 00 00 FF 
06b2c     5C E4 05 F1 | 	add	objptr, ##34396
06b30     F2 14 02 FB | 	rdlong	arg02, objptr
06b34     43 00 00 FF 
06b38     5C E4 85 F1 | 	sub	objptr, ##34396
06b3c     D0 69 B1 FD | 	call	#_pslpoke
06b40     F0 FC BF FD | 	call	#_save_line
06b44                 | '   ucompiledline(4)=header(4)
06b44                 | '   ucompiledline(5)=lineptr2
06b44                 | '   pslpoke(lineptr2+16,programptr)
06b44                 | '   pslpoke(header(4)+20,programptr)
06b44                 | '   save_line
06b44                 | '   return 0
06b44     00 FA 05 F6 | 	mov	result1, #0
06b48     04 00 90 FD | 	jmp	#LR__0583
06b4c                 | LR__0582
06b4c     00 FA 05 F6 | 	mov	result1, #0
06b50                 | LR__0583
06b50     A7 F0 03 F6 | 	mov	ptra, fp
06b54     B2 00 A0 FD | 	call	#popregs_
06b58                 | _insertline_ret
06b58     2D 00 64 FD | 	ret
06b5c                 | 
06b5c                 | ' 
06b5c                 | ' '----- Adds a new line at the end of the program
06b5c                 | ' 
06b5c                 | ' sub add_line_at_end(aline) 
06b5c                 | _add_line_at_end
06b5c     4A 00 00 FF 
06b60     8C E4 05 F1 | 	add	objptr, ##38028
06b64     F2 12 62 FC | 	wrlong	arg01, objptr
06b68     04 E4 05 F1 | 	add	objptr, #4
06b6c     F2 14 02 FB | 	rdlong	arg02, objptr
06b70     03 00 00 FF 
06b74     04 E4 85 F1 | 	sub	objptr, ##1540
06b78     F2 14 62 FC | 	wrlong	arg02, objptr
06b7c     03 00 00 FF 
06b80     04 E4 05 F1 | 	add	objptr, ##1540
06b84     F2 12 02 FB | 	rdlong	arg01, objptr
06b88     14 12 06 F1 | 	add	arg01, #20
06b8c     07 00 00 FF 
06b90     34 E4 85 F1 | 	sub	objptr, ##3636
06b94     F2 14 02 FB | 	rdlong	arg02, objptr
06b98     43 00 00 FF 
06b9c     5C E4 85 F1 | 	sub	objptr, ##34396
06ba0     6C 69 B1 FD | 	call	#_pslpoke
06ba4     43 00 00 FF 
06ba8     5C E4 05 F1 | 	add	objptr, ##34396
06bac     F2 14 02 FB | 	rdlong	arg02, objptr
06bb0     07 00 00 FF 
06bb4     34 E4 05 F1 | 	add	objptr, ##3636
06bb8     F2 14 62 FC | 	wrlong	arg02, objptr
06bbc     03 00 00 FF 
06bc0     00 E4 85 F1 | 	sub	objptr, ##1536
06bc4     FF FF BF FF 
06bc8     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06bcc                 | ' 
06bcc                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06bcc                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06bcc     04 00 00 FF 
06bd0     34 E4 85 F1 | 	sub	objptr, ##2100
06bd4     F2 14 02 FB | 	rdlong	arg02, objptr
06bd8     43 00 00 FF 
06bdc     5C E4 85 F1 | 	sub	objptr, ##34396
06be0     00 04 00 FF 
06be4     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06be8     47 00 00 AF 
06bec     8C E4 05 A1 |  if_e	add	objptr, ##36492
06bf0     FF FF FF AF 
06bf4     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06bf8     47 00 00 AF 
06bfc     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06c00     30 FC BF FD | 	call	#_save_line
06c04     43 00 00 FF 
06c08     5C E4 05 F1 | 	add	objptr, ##34396
06c0c     F2 12 02 FB | 	rdlong	arg01, objptr
06c10     43 00 00 FF 
06c14     5C E4 85 F1 | 	sub	objptr, ##34396
06c18     01 14 66 F6 | 	neg	arg02, #1
06c1c     F0 68 B1 FD | 	call	#_pslpoke
06c20                 | _add_line_at_end_ret
06c20     2D 00 64 FD | 	ret
06c24                 | 
06c24                 | ' 
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' 
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' 
06c24                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
06c24                 | ' 
06c24                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
06c24                 | _compile_immediate
06c24     0A 4A 05 F6 | 	mov	COUNT_, #10
06c28     A8 00 A0 FD | 	call	#pushregs_
06c2c                 | _compile_immediate_enter
06c2c     09 25 02 F6 | 	mov	local04, arg01
06c30     0A 27 02 F6 | 	mov	local05, arg02
06c34     00 28 06 F6 | 	mov	local06, #0
06c38     00 2A 06 F6 | 	mov	local07, #0
06c3c     00 2C 06 F6 | 	mov	local08, #0
06c40                 | ' 
06c40                 | ' ' linetype=cont+1
06c40                 | ' ' 1 : this is the first part of the line that will continue
06c40                 | ' ' 2 - this is the continuation of the line
06c40                 | ' ' 3 - this is the last continued line
06c40                 | ' ' 4 - this is the one and only part
06c40                 | ' ' 5 - continued after if/else
06c40                 | ' 
06c40                 | ' err=0
06c40                 | ' cmd=0
06c40                 | ' vars=0
06c40                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
06c40     02 24 0E F2 | 	cmp	local04, #2 wz
06c44     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06c48     24 00 90 5D |  if_ne	jmp	#LR__0590
06c4c     35 00 00 FF 
06c50     10 E4 05 F1 | 	add	objptr, ##27152
06c54     F2 2A 02 FB | 	rdlong	local07, objptr
06c58     01 2E 06 F6 | 	mov	local09, #1
06c5c     02 00 00 FF 
06c60     34 E4 05 F1 | 	add	objptr, ##1076
06c64     F2 02 68 FC | 	wrlong	#1, objptr
06c68     37 00 00 FF 
06c6c     44 E4 85 F1 | 	sub	objptr, ##28228
06c70                 | LR__0590
06c70                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06c70     04 24 0E F2 | 	cmp	local04, #4 wz
06c74     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06c78     30 00 90 5D |  if_ne	jmp	#LR__0591
06c7c     35 00 00 FF 
06c80     18 E4 05 F1 | 	add	objptr, ##27160
06c84     F2 2A 02 FB | 	rdlong	local07, objptr
06c88     02 2E 06 F6 | 	mov	local09, #2
06c8c     02 00 00 FF 
06c90     2C E4 05 F1 | 	add	objptr, ##1068
06c94     F2 04 68 FC | 	wrlong	#2, objptr
06c98     13 00 00 FF 
06c9c     38 E4 05 F1 | 	add	objptr, ##9784
06ca0     F2 04 68 FC | 	wrlong	#2, objptr
06ca4     4A 00 00 FF 
06ca8     7C E4 85 F1 | 	sub	objptr, ##38012
06cac                 | LR__0591
06cac                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
06cac     05 24 0E F2 | 	cmp	local04, #5 wz
06cb0     40 00 90 5D |  if_ne	jmp	#LR__0592
06cb4     37 00 00 FF 
06cb8     44 E4 05 F1 | 	add	objptr, ##28228
06cbc     F2 FC 01 FB | 	rdlong	result2, objptr
06cc0     FE 2E 02 F6 | 	mov	local09, result2
06cc4     03 2E 66 F0 | 	shl	local09, #3
06cc8     02 00 00 FF 
06ccc     38 E4 85 F1 | 	sub	objptr, ##1080
06cd0     F2 2E 02 F1 | 	add	local09, objptr
06cd4     04 2E 06 F1 | 	add	local09, #4
06cd8     17 2B 02 FB | 	rdlong	local07, local09
06cdc     01 FC 05 F1 | 	add	result2, #1
06ce0     02 00 00 FF 
06ce4     38 E4 05 F1 | 	add	objptr, ##1080
06ce8     F2 FC 61 FC | 	wrlong	result2, objptr
06cec     37 00 00 FF 
06cf0     44 E4 85 F1 | 	sub	objptr, ##28228
06cf4                 | LR__0592
06cf4                 | ' 
06cf4                 | ' 'print  "In compile_immediate cmd=:", cmd
06cf4                 | ' 451 select case cmd
06cf4     5C 2A 0E F2 | 	cmp	local07, #92 wz
06cf8     80 02 90 AD |  if_e	jmp	#LR__0593
06cfc     47 2A 0E F2 | 	cmp	local07, #71 wz
06d00     84 02 90 AD |  if_e	jmp	#LR__0594
06d04     59 2A 0E F2 | 	cmp	local07, #89 wz
06d08     8C 02 90 AD |  if_e	jmp	#LR__0595
06d0c     45 2A 0E F2 | 	cmp	local07, #69 wz
06d10     94 02 90 AD |  if_e	jmp	#LR__0596
06d14     69 2A 0E F2 | 	cmp	local07, #105 wz
06d18     9C 02 90 AD |  if_e	jmp	#LR__0597
06d1c     40 2A 0E F2 | 	cmp	local07, #64 wz
06d20     28 06 90 AD |  if_e	jmp	#LR__0665
06d24     B4 2A 0E F2 | 	cmp	local07, #180 wz
06d28     98 02 90 AD |  if_e	jmp	#LR__0598
06d2c     49 2A 0E F2 | 	cmp	local07, #73 wz
06d30     9C 02 90 AD |  if_e	jmp	#LR__0599
06d34     50 2A 0E F2 | 	cmp	local07, #80 wz
06d38     A0 02 90 AD |  if_e	jmp	#LR__0600
06d3c     AE 2A 0E F2 | 	cmp	local07, #174 wz
06d40     A8 02 90 AD |  if_e	jmp	#LR__0601
06d44     B0 2A 0E F2 | 	cmp	local07, #176 wz
06d48     AC 02 90 AD |  if_e	jmp	#LR__0602
06d4c     AF 2A 0E F2 | 	cmp	local07, #175 wz
06d50     B0 02 90 AD |  if_e	jmp	#LR__0603
06d54     B1 2A 0E F2 | 	cmp	local07, #177 wz
06d58     B4 02 90 AD |  if_e	jmp	#LR__0604
06d5c     68 2A 0E F2 | 	cmp	local07, #104 wz
06d60     B8 02 90 AD |  if_e	jmp	#LR__0605
06d64     74 2A 0E F2 | 	cmp	local07, #116 wz
06d68     BC 02 90 AD |  if_e	jmp	#LR__0606
06d6c     73 2A 0E F2 | 	cmp	local07, #115 wz
06d70     C4 02 90 AD |  if_e	jmp	#LR__0607
06d74     6C 2A 0E F2 | 	cmp	local07, #108 wz
06d78     CC 02 90 AD |  if_e	jmp	#LR__0608
06d7c     89 2A 0E F2 | 	cmp	local07, #137 wz
06d80     C8 05 90 AD |  if_e	jmp	#LR__0665
06d84     72 2A 0E F2 | 	cmp	local07, #114 wz
06d88     CC 02 90 AD |  if_e	jmp	#LR__0609
06d8c     5D 2A 0E F2 | 	cmp	local07, #93 wz
06d90     D0 02 90 AD |  if_e	jmp	#LR__0610
06d94     96 2A 0E F2 | 	cmp	local07, #150 wz
06d98     D8 02 90 AD |  if_e	jmp	#LR__0611
06d9c     43 2A 0E F2 | 	cmp	local07, #67 wz
06da0     DC 02 90 AD |  if_e	jmp	#LR__0612
06da4     5A 2A 0E F2 | 	cmp	local07, #90 wz
06da8     E4 02 90 AD |  if_e	jmp	#LR__0613
06dac     AB 2A 0E F2 | 	cmp	local07, #171 wz
06db0     98 05 90 AD |  if_e	jmp	#LR__0665
06db4     BD 2A 0E F2 | 	cmp	local07, #189 wz
06db8     E4 02 90 AD |  if_e	jmp	#LR__0614
06dbc     BB 2A 0E F2 | 	cmp	local07, #187 wz
06dc0     EC 02 90 AD |  if_e	jmp	#LR__0615
06dc4     4E 2A 0E F2 | 	cmp	local07, #78 wz
06dc8     F4 02 90 AD |  if_e	jmp	#LR__0616
06dcc     A9 2A 0E F2 | 	cmp	local07, #169 wz
06dd0     08 03 90 AD |  if_e	jmp	#LR__0618
06dd4     46 2A 0E F2 | 	cmp	local07, #70 wz
06dd8     1C 03 90 AD |  if_e	jmp	#LR__0620
06ddc     71 2A 0E F2 | 	cmp	local07, #113 wz
06de0     24 03 90 AD |  if_e	jmp	#LR__0621
06de4     60 2A 0E F2 | 	cmp	local07, #96 wz
06de8     28 03 90 AD |  if_e	jmp	#LR__0622
06dec     4A 2A 0E F2 | 	cmp	local07, #74 wz
06df0     2C 03 90 AD |  if_e	jmp	#LR__0623
06df4     48 2A 0E F2 | 	cmp	local07, #72 wz
06df8     30 03 90 AD |  if_e	jmp	#LR__0624
06dfc     58 2A 0E F2 | 	cmp	local07, #88 wz
06e00     38 03 90 AD |  if_e	jmp	#LR__0625
06e04     5F 2A 0E F2 | 	cmp	local07, #95 wz
06e08     40 03 90 AD |  if_e	jmp	#LR__0626
06e0c     8A 2A 0E F2 | 	cmp	local07, #138 wz
06e10     44 03 90 AD |  if_e	jmp	#LR__0627
06e14     4C 2A 0E F2 | 	cmp	local07, #76 wz
06e18     48 03 90 AD |  if_e	jmp	#LR__0628
06e1c     52 2A 0E F2 | 	cmp	local07, #82 wz
06e20     50 03 90 AD |  if_e	jmp	#LR__0629
06e24     97 2A 0E F2 | 	cmp	local07, #151 wz
06e28     58 03 90 AD |  if_e	jmp	#LR__0630
06e2c     61 2A 0E F2 | 	cmp	local07, #97 wz
06e30     5C 03 90 AD |  if_e	jmp	#LR__0631
06e34     63 2A 0E F2 | 	cmp	local07, #99 wz
06e38     60 03 90 AD |  if_e	jmp	#LR__0632
06e3c     41 2A 0E F2 | 	cmp	local07, #65 wz
06e40     08 05 90 AD |  if_e	jmp	#LR__0665
06e44     4B 2A 0E F2 | 	cmp	local07, #75 wz
06e48     5C 03 90 AD |  if_e	jmp	#LR__0633
06e4c     B3 2A 0E F2 | 	cmp	local07, #179 wz
06e50     60 03 90 AD |  if_e	jmp	#LR__0634
06e54     5E 2A 0E F2 | 	cmp	local07, #94 wz
06e58     64 03 90 AD |  if_e	jmp	#LR__0635
06e5c     7C 2A 0E F2 | 	cmp	local07, #124 wz
06e60     68 03 90 AD |  if_e	jmp	#LR__0636
06e64     7D 2A 0E F2 | 	cmp	local07, #125 wz
06e68     6C 03 90 AD |  if_e	jmp	#LR__0637
06e6c     7E 2A 0E F2 | 	cmp	local07, #126 wz
06e70     70 03 90 AD |  if_e	jmp	#LR__0638
06e74     7F 2A 0E F2 | 	cmp	local07, #127 wz
06e78     74 03 90 AD |  if_e	jmp	#LR__0639
06e7c     80 2A 0E F2 | 	cmp	local07, #128 wz
06e80     78 03 90 AD |  if_e	jmp	#LR__0640
06e84     55 2A 0E F2 | 	cmp	local07, #85 wz
06e88     7C 03 90 AD |  if_e	jmp	#LR__0641
06e8c     75 2A 0E F2 | 	cmp	local07, #117 wz
06e90     80 03 90 AD |  if_e	jmp	#LR__0642
06e94     42 2A 0E F2 | 	cmp	local07, #66 wz
06e98     88 03 90 AD |  if_e	jmp	#LR__0643
06e9c     95 2A 0E F2 | 	cmp	local07, #149 wz
06ea0     90 03 90 AD |  if_e	jmp	#LR__0644
06ea4     AC 2A 0E F2 | 	cmp	local07, #172 wz
06ea8     A0 04 90 AD |  if_e	jmp	#LR__0665
06eac     81 2A 0E F2 | 	cmp	local07, #129 wz
06eb0     8C 03 90 AD |  if_e	jmp	#LR__0645
06eb4     44 2A 0E F2 | 	cmp	local07, #68 wz
06eb8     90 03 90 AD |  if_e	jmp	#LR__0646
06ebc     BC 2A 0E F2 | 	cmp	local07, #188 wz
06ec0     94 03 90 AD |  if_e	jmp	#LR__0647
06ec4     88 2A 0E F2 | 	cmp	local07, #136 wz
06ec8     80 04 90 AD |  if_e	jmp	#LR__0665
06ecc     92 2A 0E F2 | 	cmp	local07, #146 wz
06ed0     94 03 90 AD |  if_e	jmp	#LR__0648
06ed4     BE 2A 0E F2 | 	cmp	local07, #190 wz
06ed8     2C 05 90 AD |  if_e	jmp	#LR__0666
06edc     AA 2A 0E F2 | 	cmp	local07, #170 wz
06ee0     68 04 90 AD |  if_e	jmp	#LR__0665
06ee4     4D 2A 0E F2 | 	cmp	local07, #77 wz
06ee8     88 03 90 AD |  if_e	jmp	#LR__0649
06eec     51 2A 0E F2 | 	cmp	local07, #81 wz
06ef0     90 03 90 AD |  if_e	jmp	#LR__0650
06ef4     8E 2A 0E F2 | 	cmp	local07, #142 wz
06ef8     98 03 90 AD |  if_e	jmp	#LR__0651
06efc     90 2A 0E F2 | 	cmp	local07, #144 wz
06f00     9C 03 90 AD |  if_e	jmp	#LR__0652
06f04     8D 2A 0E F2 | 	cmp	local07, #141 wz
06f08     A0 03 90 AD |  if_e	jmp	#LR__0653
06f0c     8C 2A 0E F2 | 	cmp	local07, #140 wz
06f10     A4 03 90 AD |  if_e	jmp	#LR__0654
06f14     91 2A 0E F2 | 	cmp	local07, #145 wz
06f18     A8 03 90 AD |  if_e	jmp	#LR__0655
06f1c     8B 2A 0E F2 | 	cmp	local07, #139 wz
06f20     AC 03 90 AD |  if_e	jmp	#LR__0656
06f24     8F 2A 0E F2 | 	cmp	local07, #143 wz
06f28     B0 03 90 AD |  if_e	jmp	#LR__0657
06f2c     B2 2A 0E F2 | 	cmp	local07, #178 wz
06f30     B4 03 90 AD |  if_e	jmp	#LR__0658
06f34     6D 2A 0E F2 | 	cmp	local07, #109 wz
06f38     BC 03 90 AD |  if_e	jmp	#LR__0659
06f3c     70 2A 0E F2 | 	cmp	local07, #112 wz
06f40     08 04 90 AD |  if_e	jmp	#LR__0665
06f44     56 2A 0E F2 | 	cmp	local07, #86 wz
06f48     B8 03 90 AD |  if_e	jmp	#LR__0660
06f4c     57 2A 0E F2 | 	cmp	local07, #87 wz
06f50     F8 03 90 AD |  if_e	jmp	#LR__0665
06f54     79 2A 0E F2 | 	cmp	local07, #121 wz
06f58     B4 03 90 AD |  if_e	jmp	#LR__0661
06f5c     77 2A 0E F2 | 	cmp	local07, #119 wz
06f60     B8 03 90 AD |  if_e	jmp	#LR__0662
06f64     78 2A 0E F2 | 	cmp	local07, #120 wz
06f68     BC 03 90 AD |  if_e	jmp	#LR__0663
06f6c     01 00 00 FF 
06f70     04 2A 0E F2 | 	cmp	local07, ##516 wz
06f74     BC 03 90 AD |  if_e	jmp	#LR__0664
06f78     8C 04 90 FD | 	jmp	#LR__0666
06f7c                 | LR__0593
06f7c     D8 0A B0 FD | 	call	#_compile_fun_2p
06f80     FD 28 02 F6 | 	mov	local06, result1
06f84     C4 03 90 FD | 	jmp	#LR__0665
06f88                 | LR__0594
06f88     9C 0D B0 FD | 	call	#_compile_fun_varp
06f8c     FD 2C 02 F6 | 	mov	local08, result1
06f90     FE 28 02 F6 | 	mov	local06, result2
06f94     B4 03 90 FD | 	jmp	#LR__0665
06f98                 | LR__0595
06f98     8C 0D B0 FD | 	call	#_compile_fun_varp
06f9c     FD 2C 02 F6 | 	mov	local08, result1
06fa0     FE 28 02 F6 | 	mov	local06, result2
06fa4     A4 03 90 FD | 	jmp	#LR__0665
06fa8                 | LR__0596
06fa8     7C 0D B0 FD | 	call	#_compile_fun_varp
06fac     FD 2C 02 F6 | 	mov	local08, result1
06fb0     FE 28 02 F6 | 	mov	local06, result2
06fb4     94 03 90 FD | 	jmp	#LR__0665
06fb8                 | LR__0597
06fb8                 | ' return expr()
06fb8     4C 2A B0 FD | 	call	#_expr
06fbc     FD 28 02 F6 | 	mov	local06, result1
06fc0     88 03 90 FD | 	jmp	#LR__0665
06fc4                 | LR__0598
06fc4                 | ' return expr()
06fc4     40 2A B0 FD | 	call	#_expr
06fc8     FD 28 02 F6 | 	mov	local06, result1
06fcc     7C 03 90 FD | 	jmp	#LR__0665
06fd0                 | LR__0599
06fd0                 | ' return expr()
06fd0     34 2A B0 FD | 	call	#_expr
06fd4     FD 28 02 F6 | 	mov	local06, result1
06fd8     70 03 90 FD | 	jmp	#LR__0665
06fdc                 | LR__0600
06fdc     48 0D B0 FD | 	call	#_compile_fun_varp
06fe0     FD 2C 02 F6 | 	mov	local08, result1
06fe4     FE 28 02 F6 | 	mov	local06, result2
06fe8     60 03 90 FD | 	jmp	#LR__0665
06fec                 | LR__0601
06fec     68 0A B0 FD | 	call	#_compile_fun_2p
06ff0     FD 28 02 F6 | 	mov	local06, result1
06ff4     54 03 90 FD | 	jmp	#LR__0665
06ff8                 | LR__0602
06ff8     5C 0A B0 FD | 	call	#_compile_fun_2p
06ffc     FD 28 02 F6 | 	mov	local06, result1
07000     48 03 90 FD | 	jmp	#LR__0665
07004                 | LR__0603
07004     50 0A B0 FD | 	call	#_compile_fun_2p
07008     FD 28 02 F6 | 	mov	local06, result1
0700c     3C 03 90 FD | 	jmp	#LR__0665
07010                 | LR__0604
07010     44 0A B0 FD | 	call	#_compile_fun_2p
07014     FD 28 02 F6 | 	mov	local06, result1
07018     30 03 90 FD | 	jmp	#LR__0665
0701c                 | LR__0605
0701c                 | ' return expr()
0701c     E8 29 B0 FD | 	call	#_expr
07020     FD 28 02 F6 | 	mov	local06, result1
07024     24 03 90 FD | 	jmp	#LR__0665
07028                 | LR__0606
07028     FC 0C B0 FD | 	call	#_compile_fun_varp
0702c     FD 2C 02 F6 | 	mov	local08, result1
07030     FE 28 02 F6 | 	mov	local06, result2
07034     14 03 90 FD | 	jmp	#LR__0665
07038                 | LR__0607
07038     EC 0C B0 FD | 	call	#_compile_fun_varp
0703c     FD 2C 02 F6 | 	mov	local08, result1
07040     FE 28 02 F6 | 	mov	local06, result2
07044     04 03 90 FD | 	jmp	#LR__0665
07048                 | LR__0608
07048     DC 0C B0 FD | 	call	#_compile_fun_varp
0704c     FD 2C 02 F6 | 	mov	local08, result1
07050     FE 28 02 F6 | 	mov	local06, result2
07054     F4 02 90 FD | 	jmp	#LR__0665
07058                 | LR__0609
07058     A0 19 B0 FD | 	call	#_compile_dim
0705c     FD 28 02 F6 | 	mov	local06, result1
07060     A4 03 90 FD | 	jmp	#LR__0666
07064                 | LR__0610
07064     C0 0C B0 FD | 	call	#_compile_fun_varp
07068     FD 2C 02 F6 | 	mov	local08, result1
0706c     FE 28 02 F6 | 	mov	local06, result2
07070     D8 02 90 FD | 	jmp	#LR__0665
07074                 | LR__0611
07074     E0 09 B0 FD | 	call	#_compile_fun_2p
07078     FD 28 02 F6 | 	mov	local06, result1
0707c     CC 02 90 FD | 	jmp	#LR__0665
07080                 | LR__0612
07080     A4 0C B0 FD | 	call	#_compile_fun_varp
07084     FD 2C 02 F6 | 	mov	local08, result1
07088     FE 28 02 F6 | 	mov	local06, result2
0708c     BC 02 90 FD | 	jmp	#LR__0665
07090                 | LR__0613
07090     13 13 02 F6 | 	mov	arg01, local05
07094     2C 18 B0 FD | 	call	#_compile_else
07098     FD 28 02 F6 | 	mov	local06, result1
0709c     68 03 90 FD | 	jmp	#LR__0666
070a0                 | LR__0614
070a0     84 0C B0 FD | 	call	#_compile_fun_varp
070a4     FD 2C 02 F6 | 	mov	local08, result1
070a8     FE 28 02 F6 | 	mov	local06, result2
070ac     9C 02 90 FD | 	jmp	#LR__0665
070b0                 | LR__0615
070b0     74 0C B0 FD | 	call	#_compile_fun_varp
070b4     FD 2C 02 F6 | 	mov	local08, result1
070b8     FE 28 02 F6 | 	mov	local06, result2
070bc     8C 02 90 FD | 	jmp	#LR__0665
070c0                 | LR__0616
070c0     01 26 16 F2 | 	cmp	local05, #1 wc
070c4     08 00 90 CD |  if_b	jmp	#LR__0617
070c8     4C 25 B0 FD | 	call	#_compile_goto
070cc     38 03 90 FD | 	jmp	#LR__0666
070d0                 | LR__0617
070d0     19 12 06 F6 | 	mov	arg01, #25
070d4     D4 62 B1 FD | 	call	#_printerror
070d8     2C 03 90 FD | 	jmp	#LR__0666
070dc                 | LR__0618
070dc     01 26 16 F2 | 	cmp	local05, #1 wc
070e0     08 00 90 CD |  if_b	jmp	#LR__0619
070e4     CC 24 B0 FD | 	call	#_compile_gosub
070e8     1C 03 90 FD | 	jmp	#LR__0666
070ec                 | LR__0619
070ec     19 12 06 F6 | 	mov	arg01, #25
070f0     B8 62 B1 FD | 	call	#_printerror
070f4     10 03 90 FD | 	jmp	#LR__0666
070f8                 | LR__0620
070f8     2C 0C B0 FD | 	call	#_compile_fun_varp
070fc     FD 2C 02 F6 | 	mov	local08, result1
07100     FE 28 02 F6 | 	mov	local06, result2
07104     44 02 90 FD | 	jmp	#LR__0665
07108                 | LR__0621
07108     C4 0A B0 FD | 	call	#_compile_fun_4p
0710c     FD 28 02 F6 | 	mov	local06, result1
07110     38 02 90 FD | 	jmp	#LR__0665
07114                 | LR__0622
07114                 | ' return expr()
07114     F0 28 B0 FD | 	call	#_expr
07118     FD 28 02 F6 | 	mov	local06, result1
0711c     2C 02 90 FD | 	jmp	#LR__0665
07120                 | LR__0623
07120     B4 1F B0 FD | 	call	#_compile_for
07124     FD 28 02 F6 | 	mov	local06, result1
07128     DC 02 90 FD | 	jmp	#LR__0666
0712c                 | LR__0624
0712c     F8 0B B0 FD | 	call	#_compile_fun_varp
07130     FD 2C 02 F6 | 	mov	local08, result1
07134     FE 28 02 F6 | 	mov	local06, result2
07138     10 02 90 FD | 	jmp	#LR__0665
0713c                 | LR__0625
0713c     13 13 02 F6 | 	mov	arg01, local05
07140     F8 15 B0 FD | 	call	#_compile_if
07144     FD 28 02 F6 | 	mov	local06, result1
07148     BC 02 90 FD | 	jmp	#LR__0666
0714c                 | LR__0626
0714c                 | ' return expr()
0714c     B8 28 B0 FD | 	call	#_expr
07150     FD 28 02 F6 | 	mov	local06, result1
07154     F4 01 90 FD | 	jmp	#LR__0665
07158                 | LR__0627
07158                 | ' return expr()
07158     AC 28 B0 FD | 	call	#_expr
0715c     FD 28 02 F6 | 	mov	local06, result1
07160     E8 01 90 FD | 	jmp	#LR__0665
07164                 | LR__0628
07164     C0 0B B0 FD | 	call	#_compile_fun_varp
07168     FD 2C 02 F6 | 	mov	local08, result1
0716c     FE 28 02 F6 | 	mov	local06, result2
07170     D8 01 90 FD | 	jmp	#LR__0665
07174                 | LR__0629
07174     B0 0B B0 FD | 	call	#_compile_fun_varp
07178     FD 2C 02 F6 | 	mov	local08, result1
0717c     FE 28 02 F6 | 	mov	local06, result2
07180     C8 01 90 FD | 	jmp	#LR__0665
07184                 | LR__0630
07184     D0 08 B0 FD | 	call	#_compile_fun_2p
07188     FD 28 02 F6 | 	mov	local06, result1
0718c     BC 01 90 FD | 	jmp	#LR__0665
07190                 | LR__0631
07190                 | ' return expr()
07190     74 28 B0 FD | 	call	#_expr
07194     FD 28 02 F6 | 	mov	local06, result1
07198     B0 01 90 FD | 	jmp	#LR__0665
0719c                 | LR__0632
0719c                 | ' return expr()
0719c     68 28 B0 FD | 	call	#_expr
071a0     FD 28 02 F6 | 	mov	local06, result1
071a4     A4 01 90 FD | 	jmp	#LR__0665
071a8                 | LR__0633
071a8     70 22 B0 FD | 	call	#_compile_next
071ac     FD 28 02 F6 | 	mov	local06, result1
071b0     54 02 90 FD | 	jmp	#LR__0666
071b4                 | LR__0634
071b4     28 09 B0 FD | 	call	#_compile_fun_3p
071b8     FD 28 02 F6 | 	mov	local06, result1
071bc     8C 01 90 FD | 	jmp	#LR__0665
071c0                 | LR__0635
071c0                 | ' return expr()
071c0     44 28 B0 FD | 	call	#_expr
071c4     FD 28 02 F6 | 	mov	local06, result1
071c8     80 01 90 FD | 	jmp	#LR__0665
071cc                 | LR__0636
071cc                 | ' return expr()
071cc     38 28 B0 FD | 	call	#_expr
071d0     FD 28 02 F6 | 	mov	local06, result1
071d4     74 01 90 FD | 	jmp	#LR__0665
071d8                 | LR__0637
071d8                 | ' return expr()
071d8     2C 28 B0 FD | 	call	#_expr
071dc     FD 28 02 F6 | 	mov	local06, result1
071e0     68 01 90 FD | 	jmp	#LR__0665
071e4                 | LR__0638
071e4                 | ' return expr()
071e4     20 28 B0 FD | 	call	#_expr
071e8     FD 28 02 F6 | 	mov	local06, result1
071ec     5C 01 90 FD | 	jmp	#LR__0665
071f0                 | LR__0639
071f0     DC 09 B0 FD | 	call	#_compile_fun_4p
071f4     FD 28 02 F6 | 	mov	local06, result1
071f8     50 01 90 FD | 	jmp	#LR__0665
071fc                 | LR__0640
071fc                 | ' return expr()
071fc     08 28 B0 FD | 	call	#_expr
07200     FD 28 02 F6 | 	mov	local06, result1
07204     44 01 90 FD | 	jmp	#LR__0665
07208                 | LR__0641
07208     4C 08 B0 FD | 	call	#_compile_fun_2p
0720c     FD 28 02 F6 | 	mov	local06, result1
07210     38 01 90 FD | 	jmp	#LR__0665
07214                 | LR__0642
07214     10 0B B0 FD | 	call	#_compile_fun_varp
07218     FD 2C 02 F6 | 	mov	local08, result1
0721c     FE 28 02 F6 | 	mov	local06, result2
07220     28 01 90 FD | 	jmp	#LR__0665
07224                 | LR__0643
07224     00 0B B0 FD | 	call	#_compile_fun_varp
07228     FD 2C 02 F6 | 	mov	local08, result1
0722c     FE 28 02 F6 | 	mov	local06, result2
07230     18 01 90 FD | 	jmp	#LR__0665
07234                 | LR__0644
07234     20 08 B0 FD | 	call	#_compile_fun_2p
07238     FD 28 02 F6 | 	mov	local06, result1
0723c     0C 01 90 FD | 	jmp	#LR__0665
07240                 | LR__0645
07240     14 08 B0 FD | 	call	#_compile_fun_2p
07244     FD 28 02 F6 | 	mov	local06, result1
07248     00 01 90 FD | 	jmp	#LR__0665
0724c                 | LR__0646
0724c     14 0E B0 FD | 	call	#_compile_print
07250     FD 28 02 F6 | 	mov	local06, result1
07254     B0 01 90 FD | 	jmp	#LR__0666
07258                 | LR__0647
07258     CC 0A B0 FD | 	call	#_compile_fun_varp
0725c     FD 2C 02 F6 | 	mov	local08, result1
07260     FE 28 02 F6 | 	mov	local06, result2
07264     E4 00 90 FD | 	jmp	#LR__0665
07268                 | LR__0648
07268                 | ' return expr()
07268     9C 27 B0 FD | 	call	#_expr
0726c     FD 28 02 F6 | 	mov	local06, result1
07270     D8 00 90 FD | 	jmp	#LR__0665
07274                 | LR__0649
07274     B0 0A B0 FD | 	call	#_compile_fun_varp
07278     FD 2C 02 F6 | 	mov	local08, result1
0727c     FE 28 02 F6 | 	mov	local06, result2
07280     C8 00 90 FD | 	jmp	#LR__0665
07284                 | LR__0650
07284     A0 0A B0 FD | 	call	#_compile_fun_varp
07288     FD 2C 02 F6 | 	mov	local08, result1
0728c     FE 28 02 F6 | 	mov	local06, result2
07290     B8 00 90 FD | 	jmp	#LR__0665
07294                 | LR__0651
07294     C0 07 B0 FD | 	call	#_compile_fun_2p
07298     FD 28 02 F6 | 	mov	local06, result1
0729c     AC 00 90 FD | 	jmp	#LR__0665
072a0                 | LR__0652
072a0     B4 07 B0 FD | 	call	#_compile_fun_2p
072a4     FD 28 02 F6 | 	mov	local06, result1
072a8     A0 00 90 FD | 	jmp	#LR__0665
072ac                 | LR__0653
072ac     A8 07 B0 FD | 	call	#_compile_fun_2p
072b0     FD 28 02 F6 | 	mov	local06, result1
072b4     94 00 90 FD | 	jmp	#LR__0665
072b8                 | LR__0654
072b8     9C 07 B0 FD | 	call	#_compile_fun_2p
072bc     FD 28 02 F6 | 	mov	local06, result1
072c0     88 00 90 FD | 	jmp	#LR__0665
072c4                 | LR__0655
072c4     90 07 B0 FD | 	call	#_compile_fun_2p
072c8     FD 28 02 F6 | 	mov	local06, result1
072cc     7C 00 90 FD | 	jmp	#LR__0665
072d0                 | LR__0656
072d0     84 07 B0 FD | 	call	#_compile_fun_2p
072d4     FD 28 02 F6 | 	mov	local06, result1
072d8     70 00 90 FD | 	jmp	#LR__0665
072dc                 | LR__0657
072dc     78 07 B0 FD | 	call	#_compile_fun_2p
072e0     FD 28 02 F6 | 	mov	local06, result1
072e4     64 00 90 FD | 	jmp	#LR__0665
072e8                 | LR__0658
072e8     3C 0A B0 FD | 	call	#_compile_fun_varp
072ec     FD 2C 02 F6 | 	mov	local08, result1
072f0     FE 28 02 F6 | 	mov	local06, result2
072f4     54 00 90 FD | 	jmp	#LR__0665
072f8                 | LR__0659
072f8     E4 07 B0 FD | 	call	#_compile_fun_3p
072fc     FD 28 02 F6 | 	mov	local06, result1
07300     48 00 90 FD | 	jmp	#LR__0665
07304                 | LR__0660
07304                 | ' return expr()
07304     00 27 B0 FD | 	call	#_expr
07308     FD 28 02 F6 | 	mov	local06, result1
0730c     3C 00 90 FD | 	jmp	#LR__0665
07310                 | LR__0661
07310     44 07 B0 FD | 	call	#_compile_fun_2p
07314     FD 28 02 F6 | 	mov	local06, result1
07318     30 00 90 FD | 	jmp	#LR__0665
0731c                 | LR__0662
0731c     38 07 B0 FD | 	call	#_compile_fun_2p
07320     FD 28 02 F6 | 	mov	local06, result1
07324     24 00 90 FD | 	jmp	#LR__0665
07328                 | LR__0663
07328     2C 07 B0 FD | 	call	#_compile_fun_2p
0732c     FD 28 02 F6 | 	mov	local06, result1
07330     18 00 90 FD | 	jmp	#LR__0665
07334                 | LR__0664
07334     CC 0A B0 FD | 	call	#_compile_array_assign
07338     FD 28 02 F6 | 	mov	local06, result1
0733c     0E 28 0E F2 | 	cmp	local06, #14 wz
07340     C4 00 90 5D |  if_ne	jmp	#LR__0666
07344                 | ' return 23
07344     17 28 06 F6 | 	mov	local06, #23
07348     BC 00 90 FD | 	jmp	#LR__0666
0734c                 | ' return 23
0734c                 | LR__0665
0734c     15 23 02 F6 | 	mov	local03, local07
07350     16 1F 02 F6 | 	mov	local01, local08
07354     0F 2F 02 F6 | 	mov	local09, local01
07358     10 31 02 F6 | 	mov	local10, local02
0735c     11 2B 02 F6 | 	mov	local07, local03
07360     4A 00 00 FF 
07364     7C E4 05 F1 | 	add	objptr, ##38012
07368     F2 1E 02 FB | 	rdlong	local01, objptr
0736c     0F 2D 02 F6 | 	mov	local08, local01
07370     01 2C 66 F0 | 	shl	local08, #1
07374     0F 2D 02 F1 | 	add	local08, local01
07378     02 2C 66 F0 | 	shl	local08, #2
0737c     03 00 00 FF 
07380     00 E4 85 F1 | 	sub	objptr, ##1536
07384     F2 2C 02 F1 | 	add	local08, objptr
07388     16 2F 62 FC | 	wrlong	local09, local08
0738c     03 00 00 FF 
07390     00 E4 05 F1 | 	add	objptr, ##1536
07394     F2 1E 02 FB | 	rdlong	local01, objptr
07398     0F 2F 02 F6 | 	mov	local09, local01
0739c     01 2E 66 F0 | 	shl	local09, #1
073a0     0F 2F 02 F1 | 	add	local09, local01
073a4     02 2E 66 F0 | 	shl	local09, #2
073a8     03 00 00 FF 
073ac     00 E4 85 F1 | 	sub	objptr, ##1536
073b0     F2 2E 02 F1 | 	add	local09, objptr
073b4     04 2E 06 F1 | 	add	local09, #4
073b8     17 31 62 FC | 	wrlong	local10, local09
073bc     03 00 00 FF 
073c0     00 E4 05 F1 | 	add	objptr, ##1536
073c4     F2 1E 02 FB | 	rdlong	local01, objptr
073c8     0F 31 02 F6 | 	mov	local10, local01
073cc     01 30 66 F0 | 	shl	local10, #1
073d0     0F 31 02 F1 | 	add	local10, local01
073d4     02 30 66 F0 | 	shl	local10, #2
073d8     03 00 00 FF 
073dc     00 E4 85 F1 | 	sub	objptr, ##1536
073e0     F2 30 02 F1 | 	add	local10, objptr
073e4     08 30 06 F1 | 	add	local10, #8
073e8     18 2B 62 FC | 	wrlong	local07, local10
073ec     03 00 00 FF 
073f0     00 E4 05 F1 | 	add	objptr, ##1536
073f4     F2 2E 02 FB | 	rdlong	local09, objptr
073f8     01 2E 06 F1 | 	add	local09, #1
073fc     F2 2E 62 FC | 	wrlong	local09, objptr
07400     4A 00 00 FF 
07404     7C E4 85 F1 | 	sub	objptr, ##38012
07408                 | LR__0666
07408                 | ' 
07408                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07408                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07408     03 24 0E F2 | 	cmp	local04, #3 wz
0740c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07410     38 00 90 5D |  if_ne	jmp	#LR__0667
07414     4A 00 00 FF 
07418     7C E4 05 F1 | 	add	objptr, ##38012
0741c     F2 30 02 FB | 	rdlong	local10, objptr
07420     18 1F 02 F6 | 	mov	local01, local10
07424     01 1E 66 F0 | 	shl	local01, #1
07428     18 1F 02 F1 | 	add	local01, local10
0742c     02 1E 66 F0 | 	shl	local01, #2
07430     03 00 00 FF 
07434     00 E4 85 F1 | 	sub	objptr, ##1536
07438     F2 1E 02 F1 | 	add	local01, objptr
0743c     08 1E 06 F1 | 	add	local01, #8
07440     0F FD 6B FC | 	wrlong	#510, local01
07444     47 00 00 FF 
07448     7C E4 85 F1 | 	sub	objptr, ##36476
0744c                 | LR__0667
0744c                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
0744c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0744c     4A 00 00 FF 
07450     7C E4 05 F1 | 	add	objptr, ##38012
07454     F2 1E 02 FB | 	rdlong	local01, objptr
07458     4A 00 00 FF 
0745c     7C E4 85 F1 | 	sub	objptr, ##38012
07460     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
07464                 | LR__0668
07464     0F 31 02 F6 | 	mov	local10, local01
07468     01 30 66 F0 | 	shl	local10, #1
0746c     0F 31 02 F1 | 	add	local10, local01
07470     02 30 66 F0 | 	shl	local10, #2
07474     47 00 00 FF 
07478     7C E4 05 F1 | 	add	objptr, ##36476
0747c     F2 30 02 F1 | 	add	local10, objptr
07480     08 30 06 F1 | 	add	local10, #8
07484     18 31 02 FB | 	rdlong	local10, local10
07488     9B 30 0E F2 | 	cmp	local10, #155 wz
0748c     47 00 00 FF 
07490     7C E4 85 F1 | 	sub	objptr, ##36476
07494     70 00 90 5D |  if_ne	jmp	#LR__0669
07498     0F 2F 02 F6 | 	mov	local09, local01
0749c     01 2E 86 F1 | 	sub	local09, #1
074a0     17 31 02 F6 | 	mov	local10, local09
074a4     01 30 66 F0 | 	shl	local10, #1
074a8     17 31 02 F1 | 	add	local10, local09
074ac     02 30 66 F0 | 	shl	local10, #2
074b0     47 00 00 FF 
074b4     7C E4 05 F1 | 	add	objptr, ##36476
074b8     F2 30 02 F1 | 	add	local10, objptr
074bc     08 30 06 F1 | 	add	local10, #8
074c0     18 31 02 FB | 	rdlong	local10, local10
074c4     11 30 0E F2 | 	cmp	local10, #17 wz
074c8     47 00 00 FF 
074cc     7C E4 85 F1 | 	sub	objptr, ##36476
074d0     34 00 90 5D |  if_ne	jmp	#LR__0669
074d4     0F 2F 02 F6 | 	mov	local09, local01
074d8     01 2E 86 F1 | 	sub	local09, #1
074dc     17 31 02 F6 | 	mov	local10, local09
074e0     01 30 66 F0 | 	shl	local10, #1
074e4     17 31 02 F1 | 	add	local10, local09
074e8     02 30 66 F0 | 	shl	local10, #2
074ec     47 00 00 FF 
074f0     7C E4 05 F1 | 	add	objptr, ##36476
074f4     F2 30 02 F1 | 	add	local10, objptr
074f8     08 30 06 F1 | 	add	local10, #8
074fc     18 25 68 FC | 	wrlong	#18, local10
07500     47 00 00 FF 
07504     7C E4 85 F1 | 	sub	objptr, ##36476
07508                 | LR__0669
07508     01 1E 86 F1 | 	sub	local01, #1
0750c     01 1E 56 F2 | 	cmps	local01, #1 wc
07510     50 FF 9F 3D |  if_ae	jmp	#LR__0668
07514                 | LR__0670
07514                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07514                 | ' return err
07514     14 FB 01 F6 | 	mov	result1, local06
07518     A7 F0 03 F6 | 	mov	ptra, fp
0751c     B2 00 A0 FD | 	call	#popregs_
07520                 | _compile_immediate_ret
07520     2D 00 64 FD | 	ret
07524                 | 
07524                 | ' 
07524                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07524                 | ' 
07524                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07524                 | _compile_immediate_assign
07524     0C 4A 05 F6 | 	mov	COUNT_, #12
07528     A8 00 A0 FD | 	call	#pushregs_
0752c     09 25 02 F6 | 	mov	local04, arg01
07530     FF 22 06 F6 | 	mov	local03, #255
07534     01 26 66 F6 | 	neg	local05, #1
07538     00 28 06 F6 | 	mov	local06, #0
0753c                 | ' 
0753c                 | ' t1.result_type=result_error : t1.result.uresult=0
0753c                 | ' i=-1: j=-1 : err=0
0753c                 | ' 
0753c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0753c     02 24 0E F2 | 	cmp	local04, #2 wz
07540     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07544     35 00 00 AF 
07548     0C E4 05 A1 |  if_e	add	objptr, ##27148
0754c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07550     02 00 00 AF 
07554     38 E4 05 A1 |  if_e	add	objptr, ##1080
07558     F2 04 68 AC |  if_e	wrlong	#2, objptr
0755c     37 00 00 AF 
07560     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07564                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07564     04 24 0E F2 | 	cmp	local04, #4 wz
07568     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0756c     2C 00 90 5D |  if_ne	jmp	#LR__0680
07570     35 00 00 FF 
07574     14 E4 05 F1 | 	add	objptr, ##27156
07578     F2 2A 02 FB | 	rdlong	local07, objptr
0757c     02 00 00 FF 
07580     30 E4 05 F1 | 	add	objptr, ##1072
07584     F2 06 68 FC | 	wrlong	#3, objptr
07588     13 00 00 FF 
0758c     38 E4 05 F1 | 	add	objptr, ##9784
07590     F2 04 68 FC | 	wrlong	#2, objptr
07594     4A 00 00 FF 
07598     7C E4 85 F1 | 	sub	objptr, ##38012
0759c                 | LR__0680
0759c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0759c     05 24 0E F2 | 	cmp	local04, #5 wz
075a0     3C 00 90 5D |  if_ne	jmp	#LR__0681
075a4     37 00 00 FF 
075a8     44 E4 05 F1 | 	add	objptr, ##28228
075ac     F2 FA 01 FB | 	rdlong	result1, objptr
075b0     FD 2A 02 F6 | 	mov	local07, result1
075b4     03 2A 66 F0 | 	shl	local07, #3
075b8     02 00 00 FF 
075bc     38 E4 85 F1 | 	sub	objptr, ##1080
075c0     F2 2A 02 F1 | 	add	local07, objptr
075c4     15 2B 02 FB | 	rdlong	local07, local07
075c8     02 FA 05 F1 | 	add	result1, #2
075cc     02 00 00 FF 
075d0     38 E4 05 F1 | 	add	objptr, ##1080
075d4     F2 FA 61 FC | 	wrlong	result1, objptr
075d8     37 00 00 FF 
075dc     44 E4 85 F1 | 	sub	objptr, ##28228
075e0                 | LR__0681
075e0     15 13 02 F6 | 	mov	arg01, local07
075e4     01 14 06 F6 | 	mov	arg02, #1
075e8     54 B4 B1 FD | 	call	#__system__Right_S
075ec     FD 2C 02 F6 | 	mov	local08, result1
075f0     14 24 B0 FD | 	call	#_expr
075f4                 | ' 
075f4                 | ' suffix2$=right$(varname2$,1)
075f4                 | ' expr()
075f4                 | ' if varnum>0 then					' try to find a variable
075f4     35 00 00 FF 
075f8     08 E4 05 F1 | 	add	objptr, ##27144
075fc     F2 2E 02 FB | 	rdlong	local09, objptr
07600     35 00 00 FF 
07604     08 E4 85 F1 | 	sub	objptr, ##27144
07608     01 2E 56 F2 | 	cmps	local09, #1 wc
0760c     58 00 90 CD |  if_b	jmp	#LR__0684
07610                 | '   for i=0 to varnum-1
07610     00 30 06 F6 | 	mov	local10, #0
07614     35 00 00 FF 
07618     08 E4 05 F1 | 	add	objptr, ##27144
0761c     F2 32 02 FB | 	rdlong	local11, objptr
07620     35 00 00 FF 
07624     08 E4 85 F1 | 	sub	objptr, ##27144
07628                 | LR__0682
07628     19 31 52 F2 | 	cmps	local10, local11 wc
0762c     38 00 90 3D |  if_ae	jmp	#LR__0683
07630                 | '     if variables(i).name=varname2$ then j=i : exit
07630     18 2F 02 F6 | 	mov	local09, local10
07634     04 2E 66 F0 | 	shl	local09, #4
07638     14 00 00 FF 
0763c     F8 E5 05 F1 | 	add	objptr, ##10744
07640     F2 2E 02 F1 | 	add	local09, objptr
07644     17 13 02 FB | 	rdlong	arg01, local09
07648     15 15 02 F6 | 	mov	arg02, local07
0764c     14 00 00 FF 
07650     F8 E5 85 F1 | 	sub	objptr, ##10744
07654     0C 93 B1 FD | 	call	#__system___string_cmp
07658     00 FA 0D F2 | 	cmp	result1, #0 wz
0765c     18 27 02 A6 |  if_e	mov	local05, local10
07660     01 30 06 51 |  if_ne	add	local10, #1
07664     C0 FF 9F 5D |  if_ne	jmp	#LR__0682
07668                 | LR__0683
07668                 | LR__0684
07668                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07668     FF FF 7F FF 
0766c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07670     60 00 90 5D |  if_ne	jmp	#LR__0685
07674     35 00 00 FF 
07678     08 E4 05 F1 | 	add	objptr, ##27144
0767c     F2 2E 02 FB | 	rdlong	local09, objptr
07680     35 00 00 FF 
07684     08 E4 85 F1 | 	sub	objptr, ##27144
07688     02 00 00 FF 
0768c     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07690     40 00 90 3D |  if_ae	jmp	#LR__0685
07694     35 00 00 FF 
07698     08 E4 05 F1 | 	add	objptr, ##27144
0769c     F2 32 02 FB | 	rdlong	local11, objptr
076a0     04 32 66 F0 | 	shl	local11, #4
076a4     20 00 00 FF 
076a8     10 E4 85 F1 | 	sub	objptr, ##16400
076ac     F2 32 02 F1 | 	add	local11, objptr
076b0     19 2B 62 FC | 	wrlong	local07, local11
076b4     20 00 00 FF 
076b8     10 E4 05 F1 | 	add	objptr, ##16400
076bc     F2 2E 02 FB | 	rdlong	local09, objptr
076c0     17 27 02 F6 | 	mov	local05, local09
076c4     01 2E 06 F1 | 	add	local09, #1
076c8     F2 2E 62 FC | 	wrlong	local09, objptr
076cc     35 00 00 FF 
076d0     08 E4 85 F1 | 	sub	objptr, ##27144
076d4                 | LR__0685
076d4                 | ' if varnum>=maxvars then
076d4     35 00 00 FF 
076d8     08 E4 05 F1 | 	add	objptr, ##27144
076dc     F2 2E 02 FB | 	rdlong	local09, objptr
076e0     35 00 00 FF 
076e4     08 E4 85 F1 | 	sub	objptr, ##27144
076e8     02 00 00 FF 
076ec     00 2E 56 F2 | 	cmps	local09, ##1024 wc
076f0     2D 28 06 36 |  if_ae	mov	local06, #45
076f4     C8 01 90 3D |  if_ae	jmp	#LR__0690
076f8     13 1F 02 F6 | 	mov	local01, local05
076fc     17 22 06 F6 | 	mov	local03, #23
07700     0F 2F 02 F6 | 	mov	local09, local01
07704     10 35 02 F6 | 	mov	local12, local02
07708     11 1F 02 F6 | 	mov	local01, local03
0770c     4A 00 00 FF 
07710     7C E4 05 F1 | 	add	objptr, ##38012
07714     F2 32 02 FB | 	rdlong	local11, objptr
07718     19 31 02 F6 | 	mov	local10, local11
0771c     01 30 66 F0 | 	shl	local10, #1
07720     19 31 02 F1 | 	add	local10, local11
07724     02 30 66 F0 | 	shl	local10, #2
07728     03 00 00 FF 
0772c     00 E4 85 F1 | 	sub	objptr, ##1536
07730     F2 30 02 F1 | 	add	local10, objptr
07734     18 2F 62 FC | 	wrlong	local09, local10
07738     03 00 00 FF 
0773c     00 E4 05 F1 | 	add	objptr, ##1536
07740     F2 2E 02 FB | 	rdlong	local09, objptr
07744     17 33 02 F6 | 	mov	local11, local09
07748     01 32 66 F0 | 	shl	local11, #1
0774c     17 33 02 F1 | 	add	local11, local09
07750     02 32 66 F0 | 	shl	local11, #2
07754     03 00 00 FF 
07758     00 E4 85 F1 | 	sub	objptr, ##1536
0775c     F2 32 02 F1 | 	add	local11, objptr
07760     04 32 06 F1 | 	add	local11, #4
07764     19 35 62 FC | 	wrlong	local12, local11
07768     03 00 00 FF 
0776c     00 E4 05 F1 | 	add	objptr, ##1536
07770     F2 2E 02 FB | 	rdlong	local09, objptr
07774     17 35 02 F6 | 	mov	local12, local09
07778     01 34 66 F0 | 	shl	local12, #1
0777c     17 35 02 F1 | 	add	local12, local09
07780     02 34 66 F0 | 	shl	local12, #2
07784     03 00 00 FF 
07788     00 E4 85 F1 | 	sub	objptr, ##1536
0778c     F2 34 02 F1 | 	add	local12, objptr
07790     08 34 06 F1 | 	add	local12, #8
07794     1A 1F 62 FC | 	wrlong	local01, local12
07798     03 00 00 FF 
0779c     00 E4 05 F1 | 	add	objptr, ##1536
077a0     F2 2E 02 FB | 	rdlong	local09, objptr
077a4     01 2E 06 F1 | 	add	local09, #1
077a8     F2 2E 62 FC | 	wrlong	local09, objptr
077ac     4A 00 00 FF 
077b0     7C E4 85 F1 | 	sub	objptr, ##38012
077b4                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
077b4                 | '   compiledline(lineptr)=t1:  lineptr+=1 
077b4                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
077b4     03 24 0E F2 | 	cmp	local04, #3 wz
077b8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
077bc     38 00 90 5D |  if_ne	jmp	#LR__0686
077c0     4A 00 00 FF 
077c4     7C E4 05 F1 | 	add	objptr, ##38012
077c8     F2 34 02 FB | 	rdlong	local12, objptr
077cc     1A 1F 02 F6 | 	mov	local01, local12
077d0     01 1E 66 F0 | 	shl	local01, #1
077d4     1A 1F 02 F1 | 	add	local01, local12
077d8     02 1E 66 F0 | 	shl	local01, #2
077dc     03 00 00 FF 
077e0     00 E4 85 F1 | 	sub	objptr, ##1536
077e4     F2 1E 02 F1 | 	add	local01, objptr
077e8     08 1E 06 F1 | 	add	local01, #8
077ec     0F FD 6B FC | 	wrlong	#510, local01
077f0     47 00 00 FF 
077f4     7C E4 85 F1 | 	sub	objptr, ##36476
077f8                 | LR__0686
077f8                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
077f8     4A 00 00 FF 
077fc     7C E4 05 F1 | 	add	objptr, ##38012
07800     F2 30 02 FB | 	rdlong	local10, objptr
07804     4A 00 00 FF 
07808     7C E4 85 F1 | 	sub	objptr, ##38012
0780c     97 58 48 FB | 	callpa	#(@LR__0689-@LR__0687)>>2,fcache_load_ptr_
07810                 | LR__0687
07810     18 35 02 F6 | 	mov	local12, local10
07814     01 34 66 F0 | 	shl	local12, #1
07818     18 35 02 F1 | 	add	local12, local10
0781c     02 34 66 F0 | 	shl	local12, #2
07820     47 00 00 FF 
07824     7C E4 05 F1 | 	add	objptr, ##36476
07828     F2 34 02 F1 | 	add	local12, objptr
0782c     08 34 06 F1 | 	add	local12, #8
07830     1A 35 02 FB | 	rdlong	local12, local12
07834     9B 34 0E F2 | 	cmp	local12, #155 wz
07838     47 00 00 FF 
0783c     7C E4 85 F1 | 	sub	objptr, ##36476
07840     70 00 90 5D |  if_ne	jmp	#LR__0688
07844     18 35 02 F6 | 	mov	local12, local10
07848     01 34 86 F1 | 	sub	local12, #1
0784c     1A 1F 02 F6 | 	mov	local01, local12
07850     01 1E 66 F0 | 	shl	local01, #1
07854     1A 1F 02 F1 | 	add	local01, local12
07858     02 1E 66 F0 | 	shl	local01, #2
0785c     47 00 00 FF 
07860     7C E4 05 F1 | 	add	objptr, ##36476
07864     F2 1E 02 F1 | 	add	local01, objptr
07868     08 1E 06 F1 | 	add	local01, #8
0786c     0F 1F 02 FB | 	rdlong	local01, local01
07870     11 1E 0E F2 | 	cmp	local01, #17 wz
07874     47 00 00 FF 
07878     7C E4 85 F1 | 	sub	objptr, ##36476
0787c     34 00 90 5D |  if_ne	jmp	#LR__0688
07880     18 35 02 F6 | 	mov	local12, local10
07884     01 34 86 F1 | 	sub	local12, #1
07888     1A 1F 02 F6 | 	mov	local01, local12
0788c     01 1E 66 F0 | 	shl	local01, #1
07890     1A 1F 02 F1 | 	add	local01, local12
07894     02 1E 66 F0 | 	shl	local01, #2
07898     47 00 00 FF 
0789c     7C E4 05 F1 | 	add	objptr, ##36476
078a0     F2 1E 02 F1 | 	add	local01, objptr
078a4     08 1E 06 F1 | 	add	local01, #8
078a8     0F 25 68 FC | 	wrlong	#18, local01
078ac     47 00 00 FF 
078b0     7C E4 85 F1 | 	sub	objptr, ##36476
078b4                 | LR__0688
078b4     01 30 86 F1 | 	sub	local10, #1
078b8     01 30 56 F2 | 	cmps	local10, #1 wc
078bc     50 FF 9F 3D |  if_ae	jmp	#LR__0687
078c0                 | LR__0689
078c0                 | LR__0690
078c0                 | ' return err
078c0     14 FB 01 F6 | 	mov	result1, local06
078c4     A7 F0 03 F6 | 	mov	ptra, fp
078c8     B2 00 A0 FD | 	call	#popregs_
078cc                 | _compile_immediate_assign_ret
078cc     2D 00 64 FD | 	ret
078d0                 | 
078d0                 | ' 
078d0                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
078d0                 | ' 
078d0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
078d0                 | _compile
078d0     03 4A 05 F6 | 	mov	COUNT_, #3
078d4     A8 00 A0 FD | 	call	#pushregs_
078d8     09 1F 02 F6 | 	mov	local01, arg01
078dc     0B 21 02 F6 | 	mov	local02, arg03
078e0     47 00 00 FF 
078e4     7C E4 05 F1 | 	add	objptr, ##36476
078e8     F2 1E 62 FC | 	wrlong	local01, objptr
078ec     04 E4 05 F1 | 	add	objptr, #4
078f0     F2 14 62 FC | 	wrlong	arg02, objptr
078f4     47 00 00 FF 
078f8     80 E4 85 F1 | 	sub	objptr, ##36480
078fc     10 13 02 F6 | 	mov	arg01, local02
07900     01 12 06 F1 | 	add	arg01, #1
07904     0F 15 02 F6 | 	mov	arg02, local01
07908     18 F3 BF FD | 	call	#_compile_immediate
0790c     FD 22 0A F6 | 	mov	local03, result1 wz
07910                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07910                 | ' ucompiledline(0)=alinemajor
07910                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07910                 | ' 
07910                 | ' ' cont: 
07910                 | ' ' 0 - this is the first part of the line that will continue
07910                 | ' ' 1 - this is the continuation of the line
07910                 | ' ' 2 - this is the last continued line
07910                 | ' ' 3 - this is the one and only part
07910                 | ' 
07910                 | ' err=compile_immediate(cont+1,alinemajor) 
07910                 | ' if err=0 andalso alinemajor>0 then
07910     74 00 90 5D |  if_ne	jmp	#LR__0705
07914     01 1E 16 F2 | 	cmp	local01, #1 wc
07918     6C 00 90 CD |  if_b	jmp	#LR__0705
0791c                 | '   if cont=3 orelse cont=2 then 
0791c     03 20 0E F2 | 	cmp	local02, #3 wz
07920     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07924     60 00 90 5D |  if_ne	jmp	#LR__0704
07928                 | '     if alinemajor >lastline then 
07928     4A 00 00 FF 
0792c     8C E4 05 F1 | 	add	objptr, ##38028
07930     F2 14 02 FB | 	rdlong	arg02, objptr
07934     4A 00 00 FF 
07938     8C E4 85 F1 | 	sub	objptr, ##38028
0793c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07940     0C 00 90 ED |  if_be	jmp	#LR__0700
07944     0F 13 02 F6 | 	mov	arg01, local01
07948     10 F2 BF FD | 	call	#_add_line_at_end
0794c     38 00 90 FD | 	jmp	#LR__0703
07950                 | LR__0700
07950     0F 13 02 F6 | 	mov	arg01, local01
07954     D4 EB BF FD | 	call	#_deleteline
07958                 | '       deleteline(alinemajor)  
07958                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07958     4A 00 00 FF 
0795c     8C E4 05 F1 | 	add	objptr, ##38028
07960     F2 14 02 FB | 	rdlong	arg02, objptr
07964     4A 00 00 FF 
07968     8C E4 85 F1 | 	sub	objptr, ##38028
0796c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07970     0C 00 90 ED |  if_be	jmp	#LR__0701
07974     0F 13 02 F6 | 	mov	arg01, local01
07978     E0 F1 BF FD | 	call	#_add_line_at_end
0797c     08 00 90 FD | 	jmp	#LR__0702
07980                 | LR__0701
07980     0F 13 02 F6 | 	mov	arg01, local01
07984     B8 EF BF FD | 	call	#_insertline
07988                 | LR__0702
07988                 | LR__0703
07988                 | LR__0704
07988                 | LR__0705
07988                 | ' return err
07988     11 FB 01 F6 | 	mov	result1, local03
0798c     A7 F0 03 F6 | 	mov	ptra, fp
07990     B2 00 A0 FD | 	call	#popregs_
07994                 | _compile_ret
07994     2D 00 64 FD | 	ret
07998                 | 
07998                 | ' 
07998                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07998                 | ' 
07998                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07998                 | _compile_assign
07998     03 4A 05 F6 | 	mov	COUNT_, #3
0799c     A8 00 A0 FD | 	call	#pushregs_
079a0     09 1F 02 F6 | 	mov	local01, arg01
079a4     0B 21 02 F6 | 	mov	local02, arg03
079a8     47 00 00 FF 
079ac     7C E4 05 F1 | 	add	objptr, ##36476
079b0     F2 1E 62 FC | 	wrlong	local01, objptr
079b4     04 E4 05 F1 | 	add	objptr, #4
079b8     F2 14 62 FC | 	wrlong	arg02, objptr
079bc     47 00 00 FF 
079c0     80 E4 85 F1 | 	sub	objptr, ##36480
079c4     10 13 02 F6 | 	mov	arg01, local02
079c8     01 12 06 F1 | 	add	arg01, #1
079cc     54 FB BF FD | 	call	#_compile_immediate_assign
079d0     FD 22 02 F6 | 	mov	local03, result1
079d4                 | ' 
079d4                 | ' ucompiledline(0)=alinemajor
079d4                 | ' ucompiledline(1)=alineminor
079d4                 | ' 
079d4                 | ' err=compile_immediate_assign(cont+1) 
079d4                 | ' if alinemajor>0 then
079d4     01 1E 16 F2 | 	cmp	local01, #1 wc
079d8     6C 00 90 CD |  if_b	jmp	#LR__0715
079dc                 | '   if cont=3 orelse cont=2 then 
079dc     03 20 0E F2 | 	cmp	local02, #3 wz
079e0     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
079e4     60 00 90 5D |  if_ne	jmp	#LR__0714
079e8                 | '     if alinemajor >lastline then 
079e8     4A 00 00 FF 
079ec     8C E4 05 F1 | 	add	objptr, ##38028
079f0     F2 14 02 FB | 	rdlong	arg02, objptr
079f4     4A 00 00 FF 
079f8     8C E4 85 F1 | 	sub	objptr, ##38028
079fc     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a00     0C 00 90 ED |  if_be	jmp	#LR__0710
07a04     0F 13 02 F6 | 	mov	arg01, local01
07a08     50 F1 BF FD | 	call	#_add_line_at_end
07a0c     38 00 90 FD | 	jmp	#LR__0713
07a10                 | LR__0710
07a10     0F 13 02 F6 | 	mov	arg01, local01
07a14     14 EB BF FD | 	call	#_deleteline
07a18                 | '       deleteline(alinemajor)  
07a18                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07a18     4A 00 00 FF 
07a1c     8C E4 05 F1 | 	add	objptr, ##38028
07a20     F2 14 02 FB | 	rdlong	arg02, objptr
07a24     4A 00 00 FF 
07a28     8C E4 85 F1 | 	sub	objptr, ##38028
07a2c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a30     0C 00 90 ED |  if_be	jmp	#LR__0711
07a34     0F 13 02 F6 | 	mov	arg01, local01
07a38     20 F1 BF FD | 	call	#_add_line_at_end
07a3c     08 00 90 FD | 	jmp	#LR__0712
07a40                 | LR__0711
07a40     0F 13 02 F6 | 	mov	arg01, local01
07a44     F8 EE BF FD | 	call	#_insertline
07a48                 | LR__0712
07a48                 | LR__0713
07a48                 | LR__0714
07a48                 | LR__0715
07a48                 | ' return err
07a48     11 FB 01 F6 | 	mov	result1, local03
07a4c     A7 F0 03 F6 | 	mov	ptra, fp
07a50     B2 00 A0 FD | 	call	#popregs_
07a54                 | _compile_assign_ret
07a54     2D 00 64 FD | 	ret
07a58                 | 
07a58                 | ' 
07a58                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
07a58                 | ' 
07a58                 | ' function compile_fun_2p() as ulong
07a58                 | _compile_fun_2p
07a58     01 4A 05 F6 | 	mov	COUNT_, #1
07a5c     A8 00 A0 FD | 	call	#pushregs_
07a60     A4 1F B0 FD | 	call	#_expr
07a64     FD 1E 02 F6 | 	mov	local01, result1
07a68                 | ' err=expr() : if err>0 then return err
07a68     01 1E 16 F2 | 	cmp	local01, #1 wc
07a6c     0F FB 01 36 |  if_ae	mov	result1, local01
07a70     60 00 90 3D |  if_ae	jmp	#LR__0720
07a74                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07a74     37 00 00 FF 
07a78     44 E4 05 F1 | 	add	objptr, ##28228
07a7c     F2 1E 02 FB | 	rdlong	local01, objptr
07a80     03 1E 66 F0 | 	shl	local01, #3
07a84     02 00 00 FF 
07a88     38 E4 85 F1 | 	sub	objptr, ##1080
07a8c     F2 1E 02 F1 | 	add	local01, objptr
07a90     04 1E 06 F1 | 	add	local01, #4
07a94     0F 1F 02 FB | 	rdlong	local01, local01
07a98     11 1E 0E F2 | 	cmp	local01, #17 wz
07a9c     35 00 00 FF 
07aa0     0C E4 85 F1 | 	sub	objptr, ##27148
07aa4     15 FA 05 56 |  if_ne	mov	result1, #21
07aa8     28 00 90 5D |  if_ne	jmp	#LR__0720
07aac     37 00 00 FF 
07ab0     44 E4 05 F1 | 	add	objptr, ##28228
07ab4     F2 1E 02 FB | 	rdlong	local01, objptr
07ab8     01 1E 06 F1 | 	add	local01, #1
07abc     F2 1E 62 FC | 	wrlong	local01, objptr
07ac0     37 00 00 FF 
07ac4     44 E4 85 F1 | 	sub	objptr, ##28228
07ac8     3C 1F B0 FD | 	call	#_expr
07acc                 | ' err=expr() : if err>0 then return err
07acc     01 FA 15 F2 | 	cmp	result1, #1 wc
07ad0                 | ' return 0
07ad0     00 FA 05 C6 |  if_b	mov	result1, #0
07ad4                 | LR__0720
07ad4     A7 F0 03 F6 | 	mov	ptra, fp
07ad8     B2 00 A0 FD | 	call	#popregs_
07adc                 | _compile_fun_2p_ret
07adc     2D 00 64 FD | 	ret
07ae0                 | 
07ae0                 | ' 
07ae0                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
07ae0                 | ' 
07ae0                 | ' function compile_fun_3p() as ulong
07ae0                 | _compile_fun_3p
07ae0     01 4A 05 F6 | 	mov	COUNT_, #1
07ae4     A8 00 A0 FD | 	call	#pushregs_
07ae8     1C 1F B0 FD | 	call	#_expr
07aec     FD 1E 02 F6 | 	mov	local01, result1
07af0                 | ' err=expr() : if err>0 then return err
07af0     01 1E 16 F2 | 	cmp	local01, #1 wc
07af4     0F FB 01 36 |  if_ae	mov	result1, local01
07af8     C8 00 90 3D |  if_ae	jmp	#LR__0730
07afc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07afc     37 00 00 FF 
07b00     44 E4 05 F1 | 	add	objptr, ##28228
07b04     F2 1E 02 FB | 	rdlong	local01, objptr
07b08     03 1E 66 F0 | 	shl	local01, #3
07b0c     02 00 00 FF 
07b10     38 E4 85 F1 | 	sub	objptr, ##1080
07b14     F2 1E 02 F1 | 	add	local01, objptr
07b18     04 1E 06 F1 | 	add	local01, #4
07b1c     0F 1F 02 FB | 	rdlong	local01, local01
07b20     11 1E 0E F2 | 	cmp	local01, #17 wz
07b24     35 00 00 FF 
07b28     0C E4 85 F1 | 	sub	objptr, ##27148
07b2c     15 FA 05 56 |  if_ne	mov	result1, #21
07b30     90 00 90 5D |  if_ne	jmp	#LR__0730
07b34     37 00 00 FF 
07b38     44 E4 05 F1 | 	add	objptr, ##28228
07b3c     F2 1E 02 FB | 	rdlong	local01, objptr
07b40     01 1E 06 F1 | 	add	local01, #1
07b44     F2 1E 62 FC | 	wrlong	local01, objptr
07b48     37 00 00 FF 
07b4c     44 E4 85 F1 | 	sub	objptr, ##28228
07b50     B4 1E B0 FD | 	call	#_expr
07b54     FD 1E 02 F6 | 	mov	local01, result1
07b58                 | ' err=expr() : if err>0 then return err
07b58     01 1E 16 F2 | 	cmp	local01, #1 wc
07b5c     0F FB 01 36 |  if_ae	mov	result1, local01
07b60     60 00 90 3D |  if_ae	jmp	#LR__0730
07b64                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07b64     37 00 00 FF 
07b68     44 E4 05 F1 | 	add	objptr, ##28228
07b6c     F2 1E 02 FB | 	rdlong	local01, objptr
07b70     03 1E 66 F0 | 	shl	local01, #3
07b74     02 00 00 FF 
07b78     38 E4 85 F1 | 	sub	objptr, ##1080
07b7c     F2 1E 02 F1 | 	add	local01, objptr
07b80     04 1E 06 F1 | 	add	local01, #4
07b84     0F 1F 02 FB | 	rdlong	local01, local01
07b88     11 1E 0E F2 | 	cmp	local01, #17 wz
07b8c     35 00 00 FF 
07b90     0C E4 85 F1 | 	sub	objptr, ##27148
07b94     15 FA 05 56 |  if_ne	mov	result1, #21
07b98     28 00 90 5D |  if_ne	jmp	#LR__0730
07b9c     37 00 00 FF 
07ba0     44 E4 05 F1 | 	add	objptr, ##28228
07ba4     F2 1E 02 FB | 	rdlong	local01, objptr
07ba8     01 1E 06 F1 | 	add	local01, #1
07bac     F2 1E 62 FC | 	wrlong	local01, objptr
07bb0     37 00 00 FF 
07bb4     44 E4 85 F1 | 	sub	objptr, ##28228
07bb8     4C 1E B0 FD | 	call	#_expr
07bbc                 | ' err=expr() : if err>0 then return err
07bbc     01 FA 15 F2 | 	cmp	result1, #1 wc
07bc0                 | ' return 0
07bc0     00 FA 05 C6 |  if_b	mov	result1, #0
07bc4                 | LR__0730
07bc4     A7 F0 03 F6 | 	mov	ptra, fp
07bc8     B2 00 A0 FD | 	call	#popregs_
07bcc                 | _compile_fun_3p_ret
07bcc     2D 00 64 FD | 	ret
07bd0                 | 
07bd0                 | ' 
07bd0                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
07bd0                 | ' 
07bd0                 | ' function compile_fun_4p() as ulong
07bd0                 | _compile_fun_4p
07bd0     01 4A 05 F6 | 	mov	COUNT_, #1
07bd4     A8 00 A0 FD | 	call	#pushregs_
07bd8     2C 1E B0 FD | 	call	#_expr
07bdc     FD 1E 02 F6 | 	mov	local01, result1
07be0                 | ' err=expr() : if err>0 then return err
07be0     01 1E 16 F2 | 	cmp	local01, #1 wc
07be4     0F FB 01 36 |  if_ae	mov	result1, local01
07be8     30 01 90 3D |  if_ae	jmp	#LR__0740
07bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07bec     37 00 00 FF 
07bf0     44 E4 05 F1 | 	add	objptr, ##28228
07bf4     F2 1E 02 FB | 	rdlong	local01, objptr
07bf8     03 1E 66 F0 | 	shl	local01, #3
07bfc     02 00 00 FF 
07c00     38 E4 85 F1 | 	sub	objptr, ##1080
07c04     F2 1E 02 F1 | 	add	local01, objptr
07c08     04 1E 06 F1 | 	add	local01, #4
07c0c     0F 1F 02 FB | 	rdlong	local01, local01
07c10     11 1E 0E F2 | 	cmp	local01, #17 wz
07c14     35 00 00 FF 
07c18     0C E4 85 F1 | 	sub	objptr, ##27148
07c1c     15 FA 05 56 |  if_ne	mov	result1, #21
07c20     F8 00 90 5D |  if_ne	jmp	#LR__0740
07c24     37 00 00 FF 
07c28     44 E4 05 F1 | 	add	objptr, ##28228
07c2c     F2 1E 02 FB | 	rdlong	local01, objptr
07c30     01 1E 06 F1 | 	add	local01, #1
07c34     F2 1E 62 FC | 	wrlong	local01, objptr
07c38     37 00 00 FF 
07c3c     44 E4 85 F1 | 	sub	objptr, ##28228
07c40     C4 1D B0 FD | 	call	#_expr
07c44     FD 1E 02 F6 | 	mov	local01, result1
07c48                 | ' err=expr() : if err>0 then return err
07c48     01 1E 16 F2 | 	cmp	local01, #1 wc
07c4c     0F FB 01 36 |  if_ae	mov	result1, local01
07c50     C8 00 90 3D |  if_ae	jmp	#LR__0740
07c54                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07c54     37 00 00 FF 
07c58     44 E4 05 F1 | 	add	objptr, ##28228
07c5c     F2 1E 02 FB | 	rdlong	local01, objptr
07c60     03 1E 66 F0 | 	shl	local01, #3
07c64     02 00 00 FF 
07c68     38 E4 85 F1 | 	sub	objptr, ##1080
07c6c     F2 1E 02 F1 | 	add	local01, objptr
07c70     04 1E 06 F1 | 	add	local01, #4
07c74     0F 1F 02 FB | 	rdlong	local01, local01
07c78     11 1E 0E F2 | 	cmp	local01, #17 wz
07c7c     35 00 00 FF 
07c80     0C E4 85 F1 | 	sub	objptr, ##27148
07c84     15 FA 05 56 |  if_ne	mov	result1, #21
07c88     90 00 90 5D |  if_ne	jmp	#LR__0740
07c8c     37 00 00 FF 
07c90     44 E4 05 F1 | 	add	objptr, ##28228
07c94     F2 1E 02 FB | 	rdlong	local01, objptr
07c98     01 1E 06 F1 | 	add	local01, #1
07c9c     F2 1E 62 FC | 	wrlong	local01, objptr
07ca0     37 00 00 FF 
07ca4     44 E4 85 F1 | 	sub	objptr, ##28228
07ca8     5C 1D B0 FD | 	call	#_expr
07cac     FD 1E 02 F6 | 	mov	local01, result1
07cb0                 | ' err=expr() : if err>0 then return err
07cb0     01 1E 16 F2 | 	cmp	local01, #1 wc
07cb4     0F FB 01 36 |  if_ae	mov	result1, local01
07cb8     60 00 90 3D |  if_ae	jmp	#LR__0740
07cbc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
07cbc     37 00 00 FF 
07cc0     44 E4 05 F1 | 	add	objptr, ##28228
07cc4     F2 1E 02 FB | 	rdlong	local01, objptr
07cc8     03 1E 66 F0 | 	shl	local01, #3
07ccc     02 00 00 FF 
07cd0     38 E4 85 F1 | 	sub	objptr, ##1080
07cd4     F2 1E 02 F1 | 	add	local01, objptr
07cd8     04 1E 06 F1 | 	add	local01, #4
07cdc     0F 1F 02 FB | 	rdlong	local01, local01
07ce0     11 1E 0E F2 | 	cmp	local01, #17 wz
07ce4     35 00 00 FF 
07ce8     0C E4 85 F1 | 	sub	objptr, ##27148
07cec     15 FA 05 56 |  if_ne	mov	result1, #21
07cf0     28 00 90 5D |  if_ne	jmp	#LR__0740
07cf4     37 00 00 FF 
07cf8     44 E4 05 F1 | 	add	objptr, ##28228
07cfc     F2 1E 02 FB | 	rdlong	local01, objptr
07d00     01 1E 06 F1 | 	add	local01, #1
07d04     F2 1E 62 FC | 	wrlong	local01, objptr
07d08     37 00 00 FF 
07d0c     44 E4 85 F1 | 	sub	objptr, ##28228
07d10     F4 1C B0 FD | 	call	#_expr
07d14                 | ' err=expr() : if err>0 then return err
07d14     01 FA 15 F2 | 	cmp	result1, #1 wc
07d18                 | ' return 0
07d18     00 FA 05 C6 |  if_b	mov	result1, #0
07d1c                 | LR__0740
07d1c     A7 F0 03 F6 | 	mov	ptra, fp
07d20     B2 00 A0 FD | 	call	#popregs_
07d24                 | _compile_fun_4p_ret
07d24     2D 00 64 FD | 	ret
07d28                 | 
07d28                 | ' 
07d28                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
07d28                 | ' 
07d28                 | ' function compile_fun_varp() as ulong,ulong 
07d28                 | _compile_fun_varp
07d28     03 4A 05 F6 | 	mov	COUNT_, #3
07d2c     A8 00 A0 FD | 	call	#pushregs_
07d30     00 1E 06 F6 | 	mov	local01, #0
07d34                 | ' 
07d34                 | ' i=0 : err=0
07d34                 | ' if lparts(ct).token<>token_end then
07d34     37 00 00 FF 
07d38     44 E4 05 F1 | 	add	objptr, ##28228
07d3c     F2 20 02 FB | 	rdlong	local02, objptr
07d40     03 20 66 F0 | 	shl	local02, #3
07d44     02 00 00 FF 
07d48     38 E4 85 F1 | 	sub	objptr, ##1080
07d4c     F2 20 02 F1 | 	add	local02, objptr
07d50     04 20 06 F1 | 	add	local02, #4
07d54     10 21 02 FB | 	rdlong	local02, local02
07d58     FE 21 0E F2 | 	cmp	local02, #510 wz
07d5c     35 00 00 FF 
07d60     0C E4 85 F1 | 	sub	objptr, ##27148
07d64     88 00 90 AD |  if_e	jmp	#LR__0751
07d68                 | '   do
07d68                 | LR__0750
07d68     9C 1C B0 FD | 	call	#_expr
07d6c     01 1E 06 F1 | 	add	local01, #1
07d70                 | '     expr()
07d70                 | '     i+=1
07d70                 | '     if lparts(ct).token=token_comma then ct+=1
07d70     37 00 00 FF 
07d74     44 E4 05 F1 | 	add	objptr, ##28228
07d78     F2 20 02 FB | 	rdlong	local02, objptr
07d7c     03 20 66 F0 | 	shl	local02, #3
07d80     02 00 00 FF 
07d84     38 E4 85 F1 | 	sub	objptr, ##1080
07d88     F2 20 02 F1 | 	add	local02, objptr
07d8c     04 20 06 F1 | 	add	local02, #4
07d90     10 21 02 FB | 	rdlong	local02, local02
07d94     11 20 0E F2 | 	cmp	local02, #17 wz
07d98     35 00 00 FF 
07d9c     0C E4 85 F1 | 	sub	objptr, ##27148
07da0     37 00 00 AF 
07da4     44 E4 05 A1 |  if_e	add	objptr, ##28228
07da8     F2 22 02 AB |  if_e	rdlong	local03, objptr
07dac     01 22 06 A1 |  if_e	add	local03, #1
07db0     F2 22 62 AC |  if_e	wrlong	local03, objptr
07db4     37 00 00 AF 
07db8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07dbc                 | '     if lparts(ct).token=token_end then exit loop
07dbc     37 00 00 FF 
07dc0     44 E4 05 F1 | 	add	objptr, ##28228
07dc4     F2 20 02 FB | 	rdlong	local02, objptr
07dc8     03 20 66 F0 | 	shl	local02, #3
07dcc     02 00 00 FF 
07dd0     38 E4 85 F1 | 	sub	objptr, ##1080
07dd4     F2 20 02 F1 | 	add	local02, objptr
07dd8     04 20 06 F1 | 	add	local02, #4
07ddc     10 21 02 FB | 	rdlong	local02, local02
07de0     FE 21 0E F2 | 	cmp	local02, #510 wz
07de4     35 00 00 FF 
07de8     0C E4 85 F1 | 	sub	objptr, ##27148
07dec     78 FF 9F 5D |  if_ne	jmp	#LR__0750
07df0                 | LR__0751
07df0                 | ' return i,err
07df0     0F FB 01 F6 | 	mov	result1, local01
07df4     00 FC 05 F6 | 	mov	result2, #0
07df8     A7 F0 03 F6 | 	mov	ptra, fp
07dfc     B2 00 A0 FD | 	call	#popregs_
07e00                 | _compile_fun_varp_ret
07e00     2D 00 64 FD | 	ret
07e04                 | 
07e04                 | ' 
07e04                 | ' '----- compile assign to an array element
07e04                 | ' 
07e04                 | ' function compile_array_assign() as ulong 
07e04                 | _compile_array_assign
07e04     0B 4A 05 F6 | 	mov	COUNT_, #11
07e08     A8 00 A0 FD | 	call	#pushregs_
07e0c     00 24 06 F6 | 	mov	local04, #0
07e10     00 26 06 F6 | 	mov	local05, #0
07e14     37 00 00 FF 
07e18     44 E4 05 F1 | 	add	objptr, ##28228
07e1c     F2 28 02 FB | 	rdlong	local06, objptr
07e20     14 FB 01 F6 | 	mov	result1, local06
07e24     01 FA 85 F1 | 	sub	result1, #1
07e28     03 FA 65 F0 | 	shl	result1, #3
07e2c     02 00 00 FF 
07e30     38 E4 85 F1 | 	sub	objptr, ##1080
07e34     F2 FA 01 F1 | 	add	result1, objptr
07e38     FD 2A 02 FB | 	rdlong	local07, result1
07e3c                 | ' numpar=0 : err=0
07e3c                 | ' varname$=lparts(ct-1).part$
07e3c                 | ' if lparts(ct).token=token_lpar then
07e3c     03 28 66 F0 | 	shl	local06, #3
07e40     F2 28 02 F1 | 	add	local06, objptr
07e44     04 28 06 F1 | 	add	local06, #4
07e48     14 29 02 FB | 	rdlong	local06, local06
07e4c     15 28 0E F2 | 	cmp	local06, #21 wz
07e50     35 00 00 FF 
07e54     0C E4 85 F1 | 	sub	objptr, ##27148
07e58     F4 01 90 5D |  if_ne	jmp	#LR__0764
07e5c     37 00 00 FF 
07e60     44 E4 05 F1 | 	add	objptr, ##28228
07e64     F2 2C 02 FB | 	rdlong	local08, objptr
07e68     01 2C 06 F1 | 	add	local08, #1
07e6c     F2 2C 62 FC | 	wrlong	local08, objptr
07e70     37 00 00 FF 
07e74     44 E4 85 F1 | 	sub	objptr, ##28228
07e78                 | '   ct+=1 											' omit this lpar, this is for expr list
07e78                 | '   do
07e78                 | LR__0760
07e78     8C 1B B0 FD | 	call	#_expr
07e7c     37 00 00 FF 
07e80     44 E4 05 F1 | 	add	objptr, ##28228
07e84     F2 28 02 FB | 	rdlong	local06, objptr
07e88     01 28 06 F1 | 	add	local06, #1
07e8c     F2 28 62 FC | 	wrlong	local06, objptr
07e90     01 24 06 F1 | 	add	local04, #1
07e94     01 28 86 F1 | 	sub	local06, #1
07e98     03 28 66 F0 | 	shl	local06, #3
07e9c     02 00 00 FF 
07ea0     38 E4 85 F1 | 	sub	objptr, ##1080
07ea4     F2 28 02 F1 | 	add	local06, objptr
07ea8     04 28 06 F1 | 	add	local06, #4
07eac     14 2D 02 FB | 	rdlong	local08, local06
07eb0     14 2C 0E F2 | 	cmp	local08, #20 wz
07eb4     35 00 00 FF 
07eb8     0C E4 85 F1 | 	sub	objptr, ##27148
07ebc     34 00 90 AD |  if_e	jmp	#LR__0761
07ec0     37 00 00 FF 
07ec4     44 E4 05 F1 | 	add	objptr, ##28228
07ec8     F2 2C 02 FB | 	rdlong	local08, objptr
07ecc     03 2C 66 F0 | 	shl	local08, #3
07ed0     02 00 00 FF 
07ed4     38 E4 85 F1 | 	sub	objptr, ##1080
07ed8     F2 2C 02 F1 | 	add	local08, objptr
07edc     04 2C 06 F1 | 	add	local08, #4
07ee0     16 2D 02 FB | 	rdlong	local08, local08
07ee4     FE 2D 0E F2 | 	cmp	local08, #510 wz
07ee8     35 00 00 FF 
07eec     0C E4 85 F1 | 	sub	objptr, ##27148
07ef0     84 FF 9F 5D |  if_ne	jmp	#LR__0760
07ef4                 | LR__0761
07ef4     37 00 00 FF 
07ef8     44 E4 05 F1 | 	add	objptr, ##28228
07efc     F2 2C 02 FB | 	rdlong	local08, objptr
07f00     01 2C 06 F1 | 	add	local08, #1
07f04     F2 2C 62 FC | 	wrlong	local08, objptr
07f08     37 00 00 FF 
07f0c     44 E4 85 F1 | 	sub	objptr, ##28228
07f10     F4 1A B0 FD | 	call	#_expr
07f14     01 2E 66 F6 | 	neg	local09, #1
07f18     00 30 06 F6 | 	mov	local10, #0
07f1c                 | '   ct+=1 : expr()
07f1c                 | '   j=-1 : i=0 
07f1c                 | '   do 
07f1c                 | LR__0762
07f1c                 | '     if variables(i).name=varname$ then j=i: exit loop
07f1c     18 29 02 F6 | 	mov	local06, local10
07f20     04 28 66 F0 | 	shl	local06, #4
07f24     14 00 00 FF 
07f28     F8 E5 05 F1 | 	add	objptr, ##10744
07f2c     F2 28 02 F1 | 	add	local06, objptr
07f30     14 13 02 FB | 	rdlong	arg01, local06
07f34     15 15 02 F6 | 	mov	arg02, local07
07f38     14 00 00 FF 
07f3c     F8 E5 85 F1 | 	sub	objptr, ##10744
07f40     20 8A B1 FD | 	call	#__system___string_cmp
07f44     00 FA 0D F2 | 	cmp	result1, #0 wz
07f48     18 2F 02 A6 |  if_e	mov	local09, local10
07f4c     20 00 90 AD |  if_e	jmp	#LR__0763
07f50     01 30 06 F1 | 	add	local10, #1
07f54     35 00 00 FF 
07f58     08 E4 05 F1 | 	add	objptr, ##27144
07f5c     F2 2C 02 FB | 	rdlong	local08, objptr
07f60     35 00 00 FF 
07f64     08 E4 85 F1 | 	sub	objptr, ##27144
07f68     16 31 5A F2 | 	cmps	local10, local08 wcz
07f6c     AC FF 9F ED |  if_be	jmp	#LR__0762
07f70                 | LR__0763
07f70     17 1F 02 F6 | 	mov	local01, local09
07f74     12 21 02 F6 | 	mov	local02, local04
07f78     17 22 06 F6 | 	mov	local03, #23
07f7c     0F 2D 02 F6 | 	mov	local08, local01
07f80     10 33 02 F6 | 	mov	local11, local02
07f84     11 2B 02 F6 | 	mov	local07, local03
07f88     4A 00 00 FF 
07f8c     7C E4 05 F1 | 	add	objptr, ##38012
07f90     F2 1E 02 FB | 	rdlong	local01, objptr
07f94     0F 2F 02 F6 | 	mov	local09, local01
07f98     01 2E 66 F0 | 	shl	local09, #1
07f9c     0F 2F 02 F1 | 	add	local09, local01
07fa0     02 2E 66 F0 | 	shl	local09, #2
07fa4     03 00 00 FF 
07fa8     00 E4 85 F1 | 	sub	objptr, ##1536
07fac     F2 2E 02 F1 | 	add	local09, objptr
07fb0     17 2D 62 FC | 	wrlong	local08, local09
07fb4     03 00 00 FF 
07fb8     00 E4 05 F1 | 	add	objptr, ##1536
07fbc     F2 1E 02 FB | 	rdlong	local01, objptr
07fc0     0F 2F 02 F6 | 	mov	local09, local01
07fc4     01 2E 66 F0 | 	shl	local09, #1
07fc8     0F 2F 02 F1 | 	add	local09, local01
07fcc     02 2E 66 F0 | 	shl	local09, #2
07fd0     03 00 00 FF 
07fd4     00 E4 85 F1 | 	sub	objptr, ##1536
07fd8     F2 2E 02 F1 | 	add	local09, objptr
07fdc     04 2E 06 F1 | 	add	local09, #4
07fe0     17 33 62 FC | 	wrlong	local11, local09
07fe4     03 00 00 FF 
07fe8     00 E4 05 F1 | 	add	objptr, ##1536
07fec     F2 32 02 FB | 	rdlong	local11, objptr
07ff0     19 1F 02 F6 | 	mov	local01, local11
07ff4     01 1E 66 F0 | 	shl	local01, #1
07ff8     19 1F 02 F1 | 	add	local01, local11
07ffc     02 1E 66 F0 | 	shl	local01, #2
08000     03 00 00 FF 
08004     00 E4 85 F1 | 	sub	objptr, ##1536
08008     F2 1E 02 F1 | 	add	local01, objptr
0800c     08 1E 06 F1 | 	add	local01, #8
08010     0F 2B 62 FC | 	wrlong	local07, local01
08014     03 00 00 FF 
08018     00 E4 05 F1 | 	add	objptr, ##1536
0801c     F2 2C 02 FB | 	rdlong	local08, objptr
08020     01 2C 06 F1 | 	add	local08, #1
08024     F2 2C 62 FC | 	wrlong	local08, objptr
08028                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08028                 | '   if numpar>3 then err=45
08028     04 24 16 F2 | 	cmp	local04, #4 wc
0802c     2D 26 06 36 |  if_ae	mov	local05, #45
08030                 | '   if i>varnum then err=20
08030     15 00 00 FF 
08034     74 E4 85 F1 | 	sub	objptr, ##10868
08038     F2 2C 02 FB | 	rdlong	local08, objptr
0803c     35 00 00 FF 
08040     08 E4 85 F1 | 	sub	objptr, ##27144
08044     16 31 5A F2 | 	cmps	local10, local08 wcz
08048     14 26 06 16 |  if_a	mov	local05, #20
0804c     04 00 90 FD | 	jmp	#LR__0765
08050                 | LR__0764
08050     0E 26 06 F6 | 	mov	local05, #14
08054                 | LR__0765
08054                 | ' return err
08054     13 FB 01 F6 | 	mov	result1, local05
08058     A7 F0 03 F6 | 	mov	ptra, fp
0805c     B2 00 A0 FD | 	call	#popregs_
08060                 | _compile_array_assign_ret
08060     2D 00 64 FD | 	ret
08064                 | 
08064                 | ' 
08064                 | ' '----- compile print command with its ";" and "," modifiers
08064                 | ' 
08064                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08064                 | _compile_print
08064     0B 4A 05 F6 | 	mov	COUNT_, #11
08068     A8 00 A0 FD | 	call	#pushregs_
0806c     00 1E 06 F6 | 	mov	local01, #0
08070     1D 22 06 F6 | 	mov	local03, #29
08074                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08074                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08074     37 00 00 FF 
08078     44 E4 05 F1 | 	add	objptr, ##28228
0807c     F2 24 02 FB | 	rdlong	local04, objptr
08080     03 24 66 F0 | 	shl	local04, #3
08084     02 00 00 FF 
08088     38 E4 85 F1 | 	sub	objptr, ##1080
0808c     F2 24 02 F1 | 	add	local04, objptr
08090     04 24 06 F1 | 	add	local04, #4
08094     12 25 02 FB | 	rdlong	local04, local04
08098     FE 25 0E F2 | 	cmp	local04, #510 wz
0809c     35 00 00 FF 
080a0     0C E4 85 F1 | 	sub	objptr, ##27148
080a4     68 01 90 5D |  if_ne	jmp	#LR__0770
080a8     20 22 06 F6 | 	mov	local03, #32
080ac     0F 27 02 F6 | 	mov	local05, local01
080b0     10 29 02 F6 | 	mov	local06, local02
080b4     11 2B 02 F6 | 	mov	local07, local03
080b8     4A 00 00 FF 
080bc     7C E4 05 F1 | 	add	objptr, ##38012
080c0     F2 2C 02 FB | 	rdlong	local08, objptr
080c4     16 2F 02 F6 | 	mov	local09, local08
080c8     01 2E 66 F0 | 	shl	local09, #1
080cc     16 2F 02 F1 | 	add	local09, local08
080d0     02 2E 66 F0 | 	shl	local09, #2
080d4     03 00 00 FF 
080d8     00 E4 85 F1 | 	sub	objptr, ##1536
080dc     F2 2E 02 F1 | 	add	local09, objptr
080e0     17 27 62 FC | 	wrlong	local05, local09
080e4     03 00 00 FF 
080e8     00 E4 05 F1 | 	add	objptr, ##1536
080ec     F2 26 02 FB | 	rdlong	local05, objptr
080f0     13 31 02 F6 | 	mov	local10, local05
080f4     01 30 66 F0 | 	shl	local10, #1
080f8     13 31 02 F1 | 	add	local10, local05
080fc     02 30 66 F0 | 	shl	local10, #2
08100     03 00 00 FF 
08104     00 E4 85 F1 | 	sub	objptr, ##1536
08108     F2 30 02 F1 | 	add	local10, objptr
0810c     04 30 06 F1 | 	add	local10, #4
08110     18 29 62 FC | 	wrlong	local06, local10
08114     03 00 00 FF 
08118     00 E4 05 F1 | 	add	objptr, ##1536
0811c     F2 26 02 FB | 	rdlong	local05, objptr
08120     13 33 02 F6 | 	mov	local11, local05
08124     01 32 66 F0 | 	shl	local11, #1
08128     13 33 02 F1 | 	add	local11, local05
0812c     02 32 66 F0 | 	shl	local11, #2
08130     03 00 00 FF 
08134     00 E4 85 F1 | 	sub	objptr, ##1536
08138     F2 32 02 F1 | 	add	local11, objptr
0813c     08 32 06 F1 | 	add	local11, #8
08140     19 2B 62 FC | 	wrlong	local07, local11
08144     03 00 00 FF 
08148     00 E4 05 F1 | 	add	objptr, ##1536
0814c     F2 26 02 FB | 	rdlong	local05, objptr
08150     01 26 06 F1 | 	add	local05, #1
08154     F2 26 62 FC | 	wrlong	local05, objptr
08158     44 22 06 F6 | 	mov	local03, #68
0815c     0F 27 02 F6 | 	mov	local05, local01
08160     10 29 02 F6 | 	mov	local06, local02
08164     11 2B 02 F6 | 	mov	local07, local03
08168     F2 2C 02 FB | 	rdlong	local08, objptr
0816c     16 2F 02 F6 | 	mov	local09, local08
08170     01 2E 66 F0 | 	shl	local09, #1
08174     16 2F 02 F1 | 	add	local09, local08
08178     02 2E 66 F0 | 	shl	local09, #2
0817c     03 00 00 FF 
08180     00 E4 85 F1 | 	sub	objptr, ##1536
08184     F2 2E 02 F1 | 	add	local09, objptr
08188     17 27 62 FC | 	wrlong	local05, local09
0818c     03 00 00 FF 
08190     00 E4 05 F1 | 	add	objptr, ##1536
08194     F2 32 02 FB | 	rdlong	local11, objptr
08198     19 31 02 F6 | 	mov	local10, local11
0819c     01 30 66 F0 | 	shl	local10, #1
081a0     19 31 02 F1 | 	add	local10, local11
081a4     02 30 66 F0 | 	shl	local10, #2
081a8     03 00 00 FF 
081ac     00 E4 85 F1 | 	sub	objptr, ##1536
081b0     F2 30 02 F1 | 	add	local10, objptr
081b4     04 30 06 F1 | 	add	local10, #4
081b8     18 29 62 FC | 	wrlong	local06, local10
081bc     03 00 00 FF 
081c0     00 E4 05 F1 | 	add	objptr, ##1536
081c4     F2 30 02 FB | 	rdlong	local10, objptr
081c8     18 33 02 F6 | 	mov	local11, local10
081cc     01 32 66 F0 | 	shl	local11, #1
081d0     18 33 02 F1 | 	add	local11, local10
081d4     02 32 66 F0 | 	shl	local11, #2
081d8     03 00 00 FF 
081dc     00 E4 85 F1 | 	sub	objptr, ##1536
081e0     F2 32 02 F1 | 	add	local11, objptr
081e4     08 32 06 F1 | 	add	local11, #8
081e8     19 2B 62 FC | 	wrlong	local07, local11
081ec     03 00 00 FF 
081f0     00 E4 05 F1 | 	add	objptr, ##1536
081f4     F2 26 02 FB | 	rdlong	local05, objptr
081f8     01 26 06 F1 | 	add	local05, #1
081fc     F2 26 62 FC | 	wrlong	local05, objptr
08200     4A 00 00 FF 
08204     7C E4 85 F1 | 	sub	objptr, ##38012
08208     00 FA 05 F6 | 	mov	result1, #0
0820c     20 05 90 FD | 	jmp	#LR__0777
08210                 | LR__0770
08210                 | ' do
08210                 | LR__0771
08210     F4 17 B0 FD | 	call	#_expr
08214                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
08214                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08214     37 00 00 FF 
08218     44 E4 05 F1 | 	add	objptr, ##28228
0821c     F2 24 02 FB | 	rdlong	local04, objptr
08220     03 24 66 F0 | 	shl	local04, #3
08224     02 00 00 FF 
08228     38 E4 85 F1 | 	sub	objptr, ##1080
0822c     F2 24 02 F1 | 	add	local04, objptr
08230     04 24 06 F1 | 	add	local04, #4
08234     12 2D 02 FB | 	rdlong	local08, local04
08238     11 2C 0E F2 | 	cmp	local08, #17 wz
0823c     35 00 00 FF 
08240     0C E4 85 F1 | 	sub	objptr, ##27148
08244     60 01 90 5D |  if_ne	jmp	#LR__0772
08248     21 22 06 F6 | 	mov	local03, #33
0824c     0F 27 02 F6 | 	mov	local05, local01
08250     10 29 02 F6 | 	mov	local06, local02
08254     11 2B 02 F6 | 	mov	local07, local03
08258     4A 00 00 FF 
0825c     7C E4 05 F1 | 	add	objptr, ##38012
08260     F2 2C 02 FB | 	rdlong	local08, objptr
08264     16 2F 02 F6 | 	mov	local09, local08
08268     01 2E 66 F0 | 	shl	local09, #1
0826c     16 2F 02 F1 | 	add	local09, local08
08270     02 2E 66 F0 | 	shl	local09, #2
08274     03 00 00 FF 
08278     00 E4 85 F1 | 	sub	objptr, ##1536
0827c     F2 2E 02 F1 | 	add	local09, objptr
08280     17 27 62 FC | 	wrlong	local05, local09
08284     03 00 00 FF 
08288     00 E4 05 F1 | 	add	objptr, ##1536
0828c     F2 32 02 FB | 	rdlong	local11, objptr
08290     19 31 02 F6 | 	mov	local10, local11
08294     01 30 66 F0 | 	shl	local10, #1
08298     19 31 02 F1 | 	add	local10, local11
0829c     02 30 66 F0 | 	shl	local10, #2
082a0     03 00 00 FF 
082a4     00 E4 85 F1 | 	sub	objptr, ##1536
082a8     F2 30 02 F1 | 	add	local10, objptr
082ac     04 30 06 F1 | 	add	local10, #4
082b0     18 29 62 FC | 	wrlong	local06, local10
082b4     03 00 00 FF 
082b8     00 E4 05 F1 | 	add	objptr, ##1536
082bc     F2 26 02 FB | 	rdlong	local05, objptr
082c0     13 33 02 F6 | 	mov	local11, local05
082c4     01 32 66 F0 | 	shl	local11, #1
082c8     13 33 02 F1 | 	add	local11, local05
082cc     02 32 66 F0 | 	shl	local11, #2
082d0     03 00 00 FF 
082d4     00 E4 85 F1 | 	sub	objptr, ##1536
082d8     F2 32 02 F1 | 	add	local11, objptr
082dc     08 32 06 F1 | 	add	local11, #8
082e0     19 2B 62 FC | 	wrlong	local07, local11
082e4     03 00 00 FF 
082e8     00 E4 05 F1 | 	add	objptr, ##1536
082ec     F2 26 02 FB | 	rdlong	local05, objptr
082f0     01 26 06 F1 | 	add	local05, #1
082f4     F2 26 62 FC | 	wrlong	local05, objptr
082f8     44 22 06 F6 | 	mov	local03, #68
082fc     0F 27 02 F6 | 	mov	local05, local01
08300     10 29 02 F6 | 	mov	local06, local02
08304     11 2B 02 F6 | 	mov	local07, local03
08308     F2 2C 02 FB | 	rdlong	local08, objptr
0830c     16 2F 02 F6 | 	mov	local09, local08
08310     01 2E 66 F0 | 	shl	local09, #1
08314     16 2F 02 F1 | 	add	local09, local08
08318     02 2E 66 F0 | 	shl	local09, #2
0831c     03 00 00 FF 
08320     00 E4 85 F1 | 	sub	objptr, ##1536
08324     F2 2E 02 F1 | 	add	local09, objptr
08328     17 27 62 FC | 	wrlong	local05, local09
0832c     03 00 00 FF 
08330     00 E4 05 F1 | 	add	objptr, ##1536
08334     F2 32 02 FB | 	rdlong	local11, objptr
08338     19 31 02 F6 | 	mov	local10, local11
0833c     01 30 66 F0 | 	shl	local10, #1
08340     19 31 02 F1 | 	add	local10, local11
08344     02 30 66 F0 | 	shl	local10, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 30 02 F1 | 	add	local10, objptr
08354     04 30 06 F1 | 	add	local10, #4
08358     18 29 62 FC | 	wrlong	local06, local10
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 30 02 FB | 	rdlong	local10, objptr
08368     18 33 02 F6 | 	mov	local11, local10
0836c     01 32 66 F0 | 	shl	local11, #1
08370     18 33 02 F1 | 	add	local11, local10
08374     02 32 66 F0 | 	shl	local11, #2
08378     03 00 00 FF 
0837c     00 E4 85 F1 | 	sub	objptr, ##1536
08380     F2 32 02 F1 | 	add	local11, objptr
08384     08 32 06 F1 | 	add	local11, #8
08388     19 2B 62 FC | 	wrlong	local07, local11
0838c     03 00 00 FF 
08390     00 E4 05 F1 | 	add	objptr, ##1536
08394     F2 26 02 FB | 	rdlong	local05, objptr
08398     01 26 06 F1 | 	add	local05, #1
0839c     F2 26 62 FC | 	wrlong	local05, objptr
083a0     4A 00 00 FF 
083a4     7C E4 85 F1 | 	sub	objptr, ##38012
083a8                 | LR__0772
083a8                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
083a8     37 00 00 FF 
083ac     44 E4 05 F1 | 	add	objptr, ##28228
083b0     F2 24 02 FB | 	rdlong	local04, objptr
083b4     03 24 66 F0 | 	shl	local04, #3
083b8     02 00 00 FF 
083bc     38 E4 85 F1 | 	sub	objptr, ##1080
083c0     F2 24 02 F1 | 	add	local04, objptr
083c4     04 24 06 F1 | 	add	local04, #4
083c8     12 2D 02 FB | 	rdlong	local08, local04
083cc     12 2C 0E F2 | 	cmp	local08, #18 wz
083d0     35 00 00 FF 
083d4     0C E4 85 F1 | 	sub	objptr, ##27148
083d8     60 01 90 5D |  if_ne	jmp	#LR__0773
083dc     22 22 06 F6 | 	mov	local03, #34
083e0     0F 27 02 F6 | 	mov	local05, local01
083e4     10 29 02 F6 | 	mov	local06, local02
083e8     11 2B 02 F6 | 	mov	local07, local03
083ec     4A 00 00 FF 
083f0     7C E4 05 F1 | 	add	objptr, ##38012
083f4     F2 2C 02 FB | 	rdlong	local08, objptr
083f8     16 2F 02 F6 | 	mov	local09, local08
083fc     01 2E 66 F0 | 	shl	local09, #1
08400     16 2F 02 F1 | 	add	local09, local08
08404     02 2E 66 F0 | 	shl	local09, #2
08408     03 00 00 FF 
0840c     00 E4 85 F1 | 	sub	objptr, ##1536
08410     F2 2E 02 F1 | 	add	local09, objptr
08414     17 27 62 FC | 	wrlong	local05, local09
08418     03 00 00 FF 
0841c     00 E4 05 F1 | 	add	objptr, ##1536
08420     F2 32 02 FB | 	rdlong	local11, objptr
08424     19 31 02 F6 | 	mov	local10, local11
08428     01 30 66 F0 | 	shl	local10, #1
0842c     19 31 02 F1 | 	add	local10, local11
08430     02 30 66 F0 | 	shl	local10, #2
08434     03 00 00 FF 
08438     00 E4 85 F1 | 	sub	objptr, ##1536
0843c     F2 30 02 F1 | 	add	local10, objptr
08440     04 30 06 F1 | 	add	local10, #4
08444     18 29 62 FC | 	wrlong	local06, local10
08448     03 00 00 FF 
0844c     00 E4 05 F1 | 	add	objptr, ##1536
08450     F2 26 02 FB | 	rdlong	local05, objptr
08454     13 33 02 F6 | 	mov	local11, local05
08458     01 32 66 F0 | 	shl	local11, #1
0845c     13 33 02 F1 | 	add	local11, local05
08460     02 32 66 F0 | 	shl	local11, #2
08464     03 00 00 FF 
08468     00 E4 85 F1 | 	sub	objptr, ##1536
0846c     F2 32 02 F1 | 	add	local11, objptr
08470     08 32 06 F1 | 	add	local11, #8
08474     19 2B 62 FC | 	wrlong	local07, local11
08478     03 00 00 FF 
0847c     00 E4 05 F1 | 	add	objptr, ##1536
08480     F2 26 02 FB | 	rdlong	local05, objptr
08484     01 26 06 F1 | 	add	local05, #1
08488     F2 26 62 FC | 	wrlong	local05, objptr
0848c     44 22 06 F6 | 	mov	local03, #68
08490     0F 27 02 F6 | 	mov	local05, local01
08494     10 29 02 F6 | 	mov	local06, local02
08498     11 2B 02 F6 | 	mov	local07, local03
0849c     F2 2C 02 FB | 	rdlong	local08, objptr
084a0     16 2F 02 F6 | 	mov	local09, local08
084a4     01 2E 66 F0 | 	shl	local09, #1
084a8     16 2F 02 F1 | 	add	local09, local08
084ac     02 2E 66 F0 | 	shl	local09, #2
084b0     03 00 00 FF 
084b4     00 E4 85 F1 | 	sub	objptr, ##1536
084b8     F2 2E 02 F1 | 	add	local09, objptr
084bc     17 27 62 FC | 	wrlong	local05, local09
084c0     03 00 00 FF 
084c4     00 E4 05 F1 | 	add	objptr, ##1536
084c8     F2 32 02 FB | 	rdlong	local11, objptr
084cc     19 31 02 F6 | 	mov	local10, local11
084d0     01 30 66 F0 | 	shl	local10, #1
084d4     19 31 02 F1 | 	add	local10, local11
084d8     02 30 66 F0 | 	shl	local10, #2
084dc     03 00 00 FF 
084e0     00 E4 85 F1 | 	sub	objptr, ##1536
084e4     F2 30 02 F1 | 	add	local10, objptr
084e8     04 30 06 F1 | 	add	local10, #4
084ec     18 29 62 FC | 	wrlong	local06, local10
084f0     03 00 00 FF 
084f4     00 E4 05 F1 | 	add	objptr, ##1536
084f8     F2 30 02 FB | 	rdlong	local10, objptr
084fc     18 33 02 F6 | 	mov	local11, local10
08500     01 32 66 F0 | 	shl	local11, #1
08504     18 33 02 F1 | 	add	local11, local10
08508     02 32 66 F0 | 	shl	local11, #2
0850c     03 00 00 FF 
08510     00 E4 85 F1 | 	sub	objptr, ##1536
08514     F2 32 02 F1 | 	add	local11, objptr
08518     08 32 06 F1 | 	add	local11, #8
0851c     19 2B 62 FC | 	wrlong	local07, local11
08520     03 00 00 FF 
08524     00 E4 05 F1 | 	add	objptr, ##1536
08528     F2 26 02 FB | 	rdlong	local05, objptr
0852c     01 26 06 F1 | 	add	local05, #1
08530     F2 26 62 FC | 	wrlong	local05, objptr
08534     4A 00 00 FF 
08538     7C E4 85 F1 | 	sub	objptr, ##38012
0853c                 | LR__0773
0853c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0853c     37 00 00 FF 
08540     44 E4 05 F1 | 	add	objptr, ##28228
08544     F2 24 02 FB | 	rdlong	local04, objptr
08548     03 24 66 F0 | 	shl	local04, #3
0854c     02 00 00 FF 
08550     38 E4 85 F1 | 	sub	objptr, ##1080
08554     F2 24 02 F1 | 	add	local04, objptr
08558     04 24 06 F1 | 	add	local04, #4
0855c     12 2D 02 FB | 	rdlong	local08, local04
08560     FE 2D 0E F2 | 	cmp	local08, #510 wz
08564     35 00 00 FF 
08568     0C E4 85 F1 | 	sub	objptr, ##27148
0856c     B8 00 90 5D |  if_ne	jmp	#LR__0774
08570     44 22 06 F6 | 	mov	local03, #68
08574     0F 27 02 F6 | 	mov	local05, local01
08578     10 29 02 F6 | 	mov	local06, local02
0857c     11 2B 02 F6 | 	mov	local07, local03
08580     4A 00 00 FF 
08584     7C E4 05 F1 | 	add	objptr, ##38012
08588     F2 2C 02 FB | 	rdlong	local08, objptr
0858c     16 2F 02 F6 | 	mov	local09, local08
08590     01 2E 66 F0 | 	shl	local09, #1
08594     16 2F 02 F1 | 	add	local09, local08
08598     02 2E 66 F0 | 	shl	local09, #2
0859c     03 00 00 FF 
085a0     00 E4 85 F1 | 	sub	objptr, ##1536
085a4     F2 2E 02 F1 | 	add	local09, objptr
085a8     17 27 62 FC | 	wrlong	local05, local09
085ac     03 00 00 FF 
085b0     00 E4 05 F1 | 	add	objptr, ##1536
085b4     F2 32 02 FB | 	rdlong	local11, objptr
085b8     19 31 02 F6 | 	mov	local10, local11
085bc     01 30 66 F0 | 	shl	local10, #1
085c0     19 31 02 F1 | 	add	local10, local11
085c4     02 30 66 F0 | 	shl	local10, #2
085c8     03 00 00 FF 
085cc     00 E4 85 F1 | 	sub	objptr, ##1536
085d0     F2 30 02 F1 | 	add	local10, objptr
085d4     04 30 06 F1 | 	add	local10, #4
085d8     18 29 62 FC | 	wrlong	local06, local10
085dc     03 00 00 FF 
085e0     00 E4 05 F1 | 	add	objptr, ##1536
085e4     F2 30 02 FB | 	rdlong	local10, objptr
085e8     18 33 02 F6 | 	mov	local11, local10
085ec     01 32 66 F0 | 	shl	local11, #1
085f0     18 33 02 F1 | 	add	local11, local10
085f4     02 32 66 F0 | 	shl	local11, #2
085f8     03 00 00 FF 
085fc     00 E4 85 F1 | 	sub	objptr, ##1536
08600     F2 32 02 F1 | 	add	local11, objptr
08604     08 32 06 F1 | 	add	local11, #8
08608     19 2B 62 FC | 	wrlong	local07, local11
0860c     03 00 00 FF 
08610     00 E4 05 F1 | 	add	objptr, ##1536
08614     F2 26 02 FB | 	rdlong	local05, objptr
08618     01 26 06 F1 | 	add	local05, #1
0861c     F2 26 62 FC | 	wrlong	local05, objptr
08620     4A 00 00 FF 
08624     7C E4 85 F1 | 	sub	objptr, ##38012
08628                 | LR__0774
08628                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08628     37 00 00 FF 
0862c     44 E4 05 F1 | 	add	objptr, ##28228
08630     F2 24 02 FB | 	rdlong	local04, objptr
08634     03 24 66 F0 | 	shl	local04, #3
08638     02 00 00 FF 
0863c     38 E4 85 F1 | 	sub	objptr, ##1080
08640     F2 24 02 F1 | 	add	local04, objptr
08644     04 24 06 F1 | 	add	local04, #4
08648     12 2D 02 FB | 	rdlong	local08, local04
0864c     11 2C 0E F2 | 	cmp	local08, #17 wz
08650     35 00 00 FF 
08654     0C E4 85 F1 | 	sub	objptr, ##27148
08658     6C 00 90 AD |  if_e	jmp	#LR__0775
0865c     37 00 00 FF 
08660     44 E4 05 F1 | 	add	objptr, ##28228
08664     F2 2C 02 FB | 	rdlong	local08, objptr
08668     03 2C 66 F0 | 	shl	local08, #3
0866c     02 00 00 FF 
08670     38 E4 85 F1 | 	sub	objptr, ##1080
08674     F2 2C 02 F1 | 	add	local08, objptr
08678     04 2C 06 F1 | 	add	local08, #4
0867c     16 2D 02 FB | 	rdlong	local08, local08
08680     12 2C 0E F2 | 	cmp	local08, #18 wz
08684     35 00 00 FF 
08688     0C E4 85 F1 | 	sub	objptr, ##27148
0868c     38 00 90 AD |  if_e	jmp	#LR__0775
08690     37 00 00 FF 
08694     44 E4 05 F1 | 	add	objptr, ##28228
08698     F2 32 02 FB | 	rdlong	local11, objptr
0869c     03 32 66 F0 | 	shl	local11, #3
086a0     02 00 00 FF 
086a4     38 E4 85 F1 | 	sub	objptr, ##1080
086a8     F2 32 02 F1 | 	add	local11, objptr
086ac     04 32 06 F1 | 	add	local11, #4
086b0     19 33 02 FB | 	rdlong	local11, local11
086b4     FE 33 0E F2 | 	cmp	local11, #510 wz
086b8     35 00 00 FF 
086bc     0C E4 85 F1 | 	sub	objptr, ##27148
086c0     16 FA 05 56 |  if_ne	mov	result1, #22
086c4     68 00 90 5D |  if_ne	jmp	#LR__0777
086c8                 | LR__0775
086c8     37 00 00 FF 
086cc     44 E4 05 F1 | 	add	objptr, ##28228
086d0     F2 24 02 FB | 	rdlong	local04, objptr
086d4     01 24 06 F1 | 	add	local04, #1
086d8     F2 24 62 FC | 	wrlong	local04, objptr
086dc     03 24 66 F0 | 	shl	local04, #3
086e0     02 00 00 FF 
086e4     38 E4 85 F1 | 	sub	objptr, ##1080
086e8     F2 24 02 F1 | 	add	local04, objptr
086ec     04 24 06 F1 | 	add	local04, #4
086f0     12 2D 02 FB | 	rdlong	local08, local04
086f4     FE 2D 0E F2 | 	cmp	local08, #510 wz
086f8     35 00 00 FF 
086fc     0C E4 85 F1 | 	sub	objptr, ##27148
08700     28 00 90 AD |  if_e	jmp	#LR__0776
08704     37 00 00 FF 
08708     44 E4 05 F1 | 	add	objptr, ##28228
0870c     F2 32 02 FB | 	rdlong	local11, objptr
08710     0E 00 00 FF 
08714     1C E4 05 F1 | 	add	objptr, ##7196
08718     F2 30 02 FB | 	rdlong	local10, objptr
0871c     45 00 00 FF 
08720     60 E4 85 F1 | 	sub	objptr, ##35424
08724     18 33 52 F2 | 	cmps	local11, local10 wc
08728     E4 FA 9F CD |  if_b	jmp	#LR__0771
0872c                 | LR__0776
0872c                 | ' return 0
0872c     00 FA 05 F6 | 	mov	result1, #0
08730                 | LR__0777
08730     A7 F0 03 F6 | 	mov	ptra, fp
08734     B2 00 A0 FD | 	call	#popregs_
08738                 | _compile_print_ret
08738     2D 00 64 FD | 	ret
0873c                 | 
0873c                 | ' 
0873c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
0873c                 | ' 
0873c                 | ' function compile_if(aline as ulong) as ulong  
0873c                 | _compile_if
0873c     09 4A 05 F6 | 	mov	COUNT_, #9
08740     A8 00 A0 FD | 	call	#pushregs_
08744                 | _compile_if_enter
08744     09 25 02 F6 | 	mov	local04, arg01
08748                 | ' return expr()
08748     BC 12 B0 FD | 	call	#_expr
0874c     37 00 00 FF 
08750     44 E4 05 F1 | 	add	objptr, ##28228
08754     F2 14 02 FB | 	rdlong	arg02, objptr
08758     0A 27 02 F6 | 	mov	local05, arg02
0875c     03 26 66 F0 | 	shl	local05, #3
08760     02 00 00 FF 
08764     38 E4 85 F1 | 	sub	objptr, ##1080
08768     F2 26 02 F1 | 	add	local05, objptr
0876c     04 26 06 F1 | 	add	local05, #4
08770     13 27 02 FB | 	rdlong	local05, local05
08774     01 14 06 F1 | 	add	arg02, #1
08778     02 00 00 FF 
0877c     38 E4 05 F1 | 	add	objptr, ##1080
08780     F2 14 62 FC | 	wrlong	arg02, objptr
08784     37 00 00 FF 
08788     44 E4 85 F1 | 	sub	objptr, ##28228
0878c                 | ' 
0878c                 | ' err=compile_fun_1p()
0878c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
0878c     5B 26 0E F2 | 	cmp	local05, #91 wz
08790     34 FA 05 56 |  if_ne	mov	result1, #52
08794     20 01 90 5D |  if_ne	jmp	#LR__0782
08798     58 22 06 F6 | 	mov	local03, #88
0879c     0F 29 02 F6 | 	mov	local06, local01
087a0     10 2B 02 F6 | 	mov	local07, local02
087a4     11 15 02 F6 | 	mov	arg02, local03
087a8     4A 00 00 FF 
087ac     7C E4 05 F1 | 	add	objptr, ##38012
087b0     F2 12 02 FB | 	rdlong	arg01, objptr
087b4     09 2D 02 F6 | 	mov	local08, arg01
087b8     01 2C 66 F0 | 	shl	local08, #1
087bc     09 2D 02 F1 | 	add	local08, arg01
087c0     02 2C 66 F0 | 	shl	local08, #2
087c4     03 00 00 FF 
087c8     00 E4 85 F1 | 	sub	objptr, ##1536
087cc     F2 2C 02 F1 | 	add	local08, objptr
087d0     16 29 62 FC | 	wrlong	local06, local08
087d4     03 00 00 FF 
087d8     00 E4 05 F1 | 	add	objptr, ##1536
087dc     F2 28 02 FB | 	rdlong	local06, objptr
087e0     14 13 02 F6 | 	mov	arg01, local06
087e4     01 12 66 F0 | 	shl	arg01, #1
087e8     14 13 02 F1 | 	add	arg01, local06
087ec     02 12 66 F0 | 	shl	arg01, #2
087f0     03 00 00 FF 
087f4     00 E4 85 F1 | 	sub	objptr, ##1536
087f8     F2 12 02 F1 | 	add	arg01, objptr
087fc     04 12 06 F1 | 	add	arg01, #4
08800     09 2B 62 FC | 	wrlong	local07, arg01
08804     03 00 00 FF 
08808     00 E4 05 F1 | 	add	objptr, ##1536
0880c     F2 28 02 FB | 	rdlong	local06, objptr
08810     14 13 02 F6 | 	mov	arg01, local06
08814     01 12 66 F0 | 	shl	arg01, #1
08818     14 13 02 F1 | 	add	arg01, local06
0881c     02 12 66 F0 | 	shl	arg01, #2
08820     03 00 00 FF 
08824     00 E4 85 F1 | 	sub	objptr, ##1536
08828     F2 12 02 F1 | 	add	arg01, objptr
0882c     08 12 06 F1 | 	add	arg01, #8
08830     09 15 62 FC | 	wrlong	arg02, arg01
08834     03 00 00 FF 
08838     00 E4 05 F1 | 	add	objptr, ##1536
0883c     F2 28 02 FB | 	rdlong	local06, objptr
08840     01 28 06 F1 | 	add	local06, #1
08844     F2 28 62 FC | 	wrlong	local06, objptr
08848                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08848                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08848     13 00 00 FF 
0884c     38 E4 85 F1 | 	sub	objptr, ##9784
08850     F2 14 02 FB | 	rdlong	arg02, objptr
08854     01 14 06 F1 | 	add	arg02, #1
08858     03 14 66 F0 | 	shl	arg02, #3
0885c     02 00 00 FF 
08860     38 E4 85 F1 | 	sub	objptr, ##1080
08864     F2 14 02 F1 | 	add	arg02, objptr
08868     0A 13 02 FB | 	rdlong	arg01, arg02
0886c     35 00 00 FF 
08870     0C E4 85 F1 | 	sub	objptr, ##27148
08874                 | ' 
08874                 | ' select case s
08874     81 01 00 FF 
08878     8A 15 06 F6 | 	mov	arg02, ##@LR__5183
0887c     E4 80 B1 FD | 	call	#__system___string_cmp
08880     00 FA 0D F2 | 	cmp	result1, #0 wz
08884     1B FA 05 A6 |  if_e	mov	result1, #27
08888     00 FA 05 56 |  if_ne	mov	result1, #0
0888c     00 FA 0D F2 | 	cmp	result1, #0 wz
08890     10 00 90 AD |  if_e	jmp	#LR__0780
08894     05 12 06 F6 | 	mov	arg01, #5
08898     88 EC BF FD | 	call	#_compile_immediate_assign
0889c     FD 2E 02 F6 | 	mov	local09, result1
088a0     10 00 90 FD | 	jmp	#LR__0781
088a4                 | LR__0780
088a4     05 12 06 F6 | 	mov	arg01, #5
088a8     12 15 02 F6 | 	mov	arg02, local04
088ac     74 E3 BF FD | 	call	#_compile_immediate
088b0     FD 2E 02 F6 | 	mov	local09, result1
088b4                 | LR__0781
088b4                 | ' return err
088b4     17 FB 01 F6 | 	mov	result1, local09
088b8                 | LR__0782
088b8     A7 F0 03 F6 | 	mov	ptra, fp
088bc     B2 00 A0 FD | 	call	#popregs_
088c0                 | _compile_if_ret
088c0     2D 00 64 FD | 	ret
088c4                 | 
088c4                 | ' 
088c4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
088c4                 | ' 
088c4                 | ' function compile_else(aline as ulong) as ulong  
088c4                 | _compile_else
088c4     07 4A 05 F6 | 	mov	COUNT_, #7
088c8     A8 00 A0 FD | 	call	#pushregs_
088cc                 | _compile_else_enter
088cc     09 25 02 F6 | 	mov	local04, arg01
088d0     5A 22 06 F6 | 	mov	local03, #90
088d4     0F 27 02 F6 | 	mov	local05, local01
088d8     10 29 02 F6 | 	mov	local06, local02
088dc     11 1F 02 F6 | 	mov	local01, local03
088e0     4A 00 00 FF 
088e4     7C E4 05 F1 | 	add	objptr, ##38012
088e8     F2 14 02 FB | 	rdlong	arg02, objptr
088ec     0A 13 02 F6 | 	mov	arg01, arg02
088f0     01 12 66 F0 | 	shl	arg01, #1
088f4     0A 13 02 F1 | 	add	arg01, arg02
088f8     02 12 66 F0 | 	shl	arg01, #2
088fc     03 00 00 FF 
08900     00 E4 85 F1 | 	sub	objptr, ##1536
08904     F2 12 02 F1 | 	add	arg01, objptr
08908     09 27 62 FC | 	wrlong	local05, arg01
0890c     03 00 00 FF 
08910     00 E4 05 F1 | 	add	objptr, ##1536
08914     F2 26 02 FB | 	rdlong	local05, objptr
08918     13 15 02 F6 | 	mov	arg02, local05
0891c     01 14 66 F0 | 	shl	arg02, #1
08920     13 15 02 F1 | 	add	arg02, local05
08924     02 14 66 F0 | 	shl	arg02, #2
08928     03 00 00 FF 
0892c     00 E4 85 F1 | 	sub	objptr, ##1536
08930     F2 14 02 F1 | 	add	arg02, objptr
08934     04 14 06 F1 | 	add	arg02, #4
08938     0A 29 62 FC | 	wrlong	local06, arg02
0893c     03 00 00 FF 
08940     00 E4 05 F1 | 	add	objptr, ##1536
08944     F2 28 02 FB | 	rdlong	local06, objptr
08948     14 27 02 F6 | 	mov	local05, local06
0894c     01 26 66 F0 | 	shl	local05, #1
08950     14 27 02 F1 | 	add	local05, local06
08954     02 26 66 F0 | 	shl	local05, #2
08958     03 00 00 FF 
0895c     00 E4 85 F1 | 	sub	objptr, ##1536
08960     F2 26 02 F1 | 	add	local05, objptr
08964     08 26 06 F1 | 	add	local05, #8
08968     13 1F 62 FC | 	wrlong	local01, local05
0896c     03 00 00 FF 
08970     00 E4 05 F1 | 	add	objptr, ##1536
08974     F2 26 02 FB | 	rdlong	local05, objptr
08978     01 26 06 F1 | 	add	local05, #1
0897c     F2 26 62 FC | 	wrlong	local05, objptr
08980                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08980                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08980     13 00 00 FF 
08984     38 E4 85 F1 | 	sub	objptr, ##9784
08988     F2 28 02 FB | 	rdlong	local06, objptr
0898c     01 28 06 F1 | 	add	local06, #1
08990     03 28 66 F0 | 	shl	local06, #3
08994     02 00 00 FF 
08998     38 E4 85 F1 | 	sub	objptr, ##1080
0899c     F2 28 02 F1 | 	add	local06, objptr
089a0     14 13 02 FB | 	rdlong	arg01, local06
089a4     35 00 00 FF 
089a8     0C E4 85 F1 | 	sub	objptr, ##27148
089ac                 | ' 
089ac                 | ' select case s
089ac     81 01 00 FF 
089b0     8A 15 06 F6 | 	mov	arg02, ##@LR__5183
089b4     AC 7F B1 FD | 	call	#__system___string_cmp
089b8     00 FA 0D F2 | 	cmp	result1, #0 wz
089bc     1B FA 05 A6 |  if_e	mov	result1, #27
089c0     00 FA 05 56 |  if_ne	mov	result1, #0
089c4     00 FA 0D F2 | 	cmp	result1, #0 wz
089c8     10 00 90 AD |  if_e	jmp	#LR__0790
089cc     05 12 06 F6 | 	mov	arg01, #5
089d0     50 EB BF FD | 	call	#_compile_immediate_assign
089d4     FD 2A 02 F6 | 	mov	local07, result1
089d8     10 00 90 FD | 	jmp	#LR__0791
089dc                 | LR__0790
089dc     05 12 06 F6 | 	mov	arg01, #5
089e0     12 15 02 F6 | 	mov	arg02, local04
089e4     3C E2 BF FD | 	call	#_compile_immediate
089e8     FD 2A 02 F6 | 	mov	local07, result1
089ec                 | LR__0791
089ec                 | ' return err
089ec     15 FB 01 F6 | 	mov	result1, local07
089f0     A7 F0 03 F6 | 	mov	ptra, fp
089f4     B2 00 A0 FD | 	call	#popregs_
089f8                 | _compile_else_ret
089f8     2D 00 64 FD | 	ret
089fc                 | 
089fc                 | ' 
089fc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
089fc                 | ' 
089fc                 | ' function compile_dim() as ulong  
089fc                 | _compile_dim
089fc     11 4A 05 F6 | 	mov	COUNT_, #17
08a00     A8 00 A0 FD | 	call	#pushregs_
08a04     01 1E 06 F6 | 	mov	local01, #1
08a08     01 20 06 F6 | 	mov	local02, #1
08a0c     01 22 06 F6 | 	mov	local03, #1
08a10                 | ' 
08a10                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08a10                 | ' if isname(lparts(ct).part$) then 
08a10     37 00 00 FF 
08a14     44 E4 05 F1 | 	add	objptr, ##28228
08a18     F2 18 02 FB | 	rdlong	arg04, objptr
08a1c     03 18 66 F0 | 	shl	arg04, #3
08a20     02 00 00 FF 
08a24     38 E4 85 F1 | 	sub	objptr, ##1080
08a28     F2 18 02 F1 | 	add	arg04, objptr
08a2c     0C 13 02 FB | 	rdlong	arg01, arg04
08a30     35 00 00 FF 
08a34     0C E4 85 F1 | 	sub	objptr, ##27148
08a38     C8 D0 BF FD | 	call	#_isname
08a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
08a40     80 05 90 AD |  if_e	jmp	#LR__0823
08a44     37 00 00 FF 
08a48     44 E4 05 F1 | 	add	objptr, ##28228
08a4c     F2 24 02 FB | 	rdlong	local04, objptr
08a50     03 24 66 F0 | 	shl	local04, #3
08a54     02 00 00 FF 
08a58     38 E4 85 F1 | 	sub	objptr, ##1080
08a5c     F2 24 02 F1 | 	add	local04, objptr
08a60     12 27 02 FB | 	rdlong	local05, local04
08a64     01 28 66 F6 | 	neg	local06, #1
08a68                 | '   varname2$=lparts(ct).part$ 
08a68                 | '   j=-1
08a68                 | '   if varnum>0 then
08a68     04 E4 85 F1 | 	sub	objptr, #4
08a6c     F2 2A 02 FB | 	rdlong	local07, objptr
08a70     35 00 00 FF 
08a74     08 E4 85 F1 | 	sub	objptr, ##27144
08a78     01 2A 56 F2 | 	cmps	local07, #1 wc
08a7c     58 00 90 CD |  if_b	jmp	#LR__0802
08a80                 | '     for i=0 to varnum-1
08a80     00 2C 06 F6 | 	mov	local08, #0
08a84     35 00 00 FF 
08a88     08 E4 05 F1 | 	add	objptr, ##27144
08a8c     F2 2E 02 FB | 	rdlong	local09, objptr
08a90     35 00 00 FF 
08a94     08 E4 85 F1 | 	sub	objptr, ##27144
08a98                 | LR__0800
08a98     17 2D 52 F2 | 	cmps	local08, local09 wc
08a9c     38 00 90 3D |  if_ae	jmp	#LR__0801
08aa0                 | '       if variables(i).name=varname2$ then j=i : exit
08aa0     16 25 02 F6 | 	mov	local04, local08
08aa4     04 24 66 F0 | 	shl	local04, #4
08aa8     14 00 00 FF 
08aac     F8 E5 05 F1 | 	add	objptr, ##10744
08ab0     F2 24 02 F1 | 	add	local04, objptr
08ab4     12 13 02 FB | 	rdlong	arg01, local04
08ab8     13 15 02 F6 | 	mov	arg02, local05
08abc     14 00 00 FF 
08ac0     F8 E5 85 F1 | 	sub	objptr, ##10744
08ac4     9C 7E B1 FD | 	call	#__system___string_cmp
08ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
08acc     16 29 02 A6 |  if_e	mov	local06, local08
08ad0     01 2C 06 51 |  if_ne	add	local08, #1
08ad4     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08ad8                 | LR__0801
08ad8                 | LR__0802
08ad8                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08ad8     FF FF 7F FF 
08adc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08ae0     35 00 00 AF 
08ae4     08 E4 05 A1 |  if_e	add	objptr, ##27144
08ae8     F2 28 02 AB |  if_e	rdlong	local06, objptr
08aec     35 00 00 AF 
08af0     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08af4     78 00 90 AD |  if_e	jmp	#LR__0803
08af8     00 12 06 F6 | 	mov	arg01, #0
08afc     A0 D8 B1 FD | 	call	#__system___getiolock_0540
08b00     FD 12 02 F6 | 	mov	arg01, result1
08b04     34 7E B1 FD | 	call	#__system___lockmem
08b08     83 01 00 FF 
08b0c     99 15 06 F6 | 	mov	arg02, ##@LR__5415
08b10     00 12 06 F6 | 	mov	arg01, #0
08b14     00 16 06 F6 | 	mov	arg03, #0
08b18     14 8B B1 FD | 	call	#__system___basic_print_string
08b1c     51 00 00 FF 
08b20     C4 E5 05 F1 | 	add	objptr, ##41924
08b24     F2 14 02 FB | 	rdlong	arg02, objptr
08b28     51 00 00 FF 
08b2c     C4 E5 85 F1 | 	sub	objptr, ##41924
08b30     00 12 06 F6 | 	mov	arg01, #0
08b34     00 16 06 F6 | 	mov	arg03, #0
08b38     0A 18 06 F6 | 	mov	arg04, #10
08b3c     74 8B B1 FD | 	call	#__system___basic_print_unsigned
08b40     83 01 00 FF 
08b44     A7 15 06 F6 | 	mov	arg02, ##@LR__5416
08b48     00 12 06 F6 | 	mov	arg01, #0
08b4c     00 16 06 F6 | 	mov	arg03, #0
08b50     DC 8A B1 FD | 	call	#__system___basic_print_string
08b54     00 12 06 F6 | 	mov	arg01, #0
08b58     0A 14 06 F6 | 	mov	arg02, #10
08b5c     00 16 06 F6 | 	mov	arg03, #0
08b60     74 8A B1 FD | 	call	#__system___basic_print_char
08b64     00 12 06 F6 | 	mov	arg01, #0
08b68     34 D8 B1 FD | 	call	#__system___getiolock_0540
08b6c     FD 00 68 FC | 	wrlong	#0, result1
08b70                 | LR__0803
08b70                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
08b70     37 00 00 FF 
08b74     44 E4 05 F1 | 	add	objptr, ##28228
08b78     F2 14 02 FB | 	rdlong	arg02, objptr
08b7c     01 14 06 F1 | 	add	arg02, #1
08b80     03 14 66 F0 | 	shl	arg02, #3
08b84     02 00 00 FF 
08b88     38 E4 85 F1 | 	sub	objptr, ##1080
08b8c     F2 14 02 F1 | 	add	arg02, objptr
08b90     0A 13 02 FB | 	rdlong	arg01, arg02
08b94     83 01 00 FF 
08b98     C8 15 06 F6 | 	mov	arg02, ##@LR__5417
08b9c     35 00 00 FF 
08ba0     0C E4 85 F1 | 	sub	objptr, ##27148
08ba4     BC 7D B1 FD | 	call	#__system___string_cmp
08ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
08bac     44 00 90 AD |  if_e	jmp	#LR__0804
08bb0     37 00 00 FF 
08bb4     44 E4 05 F1 | 	add	objptr, ##28228
08bb8     F2 2E 02 FB | 	rdlong	local09, objptr
08bbc     01 2E 06 F1 | 	add	local09, #1
08bc0     03 2E 66 F0 | 	shl	local09, #3
08bc4     02 00 00 FF 
08bc8     38 E4 85 F1 | 	sub	objptr, ##1080
08bcc     F2 2E 02 F1 | 	add	local09, objptr
08bd0     17 13 02 FB | 	rdlong	arg01, local09
08bd4     83 01 00 FF 
08bd8     CA 15 06 F6 | 	mov	arg02, ##@LR__5418
08bdc     35 00 00 FF 
08be0     0C E4 85 F1 | 	sub	objptr, ##27148
08be4     7C 7D B1 FD | 	call	#__system___string_cmp
08be8     00 FA 0D F2 | 	cmp	result1, #0 wz
08bec     2B FA 05 56 |  if_ne	mov	result1, #43
08bf0     D8 04 90 5D |  if_ne	jmp	#LR__0825
08bf4                 | LR__0804
08bf4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
08bf4     37 00 00 FF 
08bf8     44 E4 05 F1 | 	add	objptr, ##28228
08bfc     F2 14 02 FB | 	rdlong	arg02, objptr
08c00     01 14 06 F1 | 	add	arg02, #1
08c04     03 14 66 F0 | 	shl	arg02, #3
08c08     02 00 00 FF 
08c0c     38 E4 85 F1 | 	sub	objptr, ##1080
08c10     F2 14 02 F1 | 	add	arg02, objptr
08c14     0A 13 02 FB | 	rdlong	arg01, arg02
08c18     83 01 00 FF 
08c1c     CD 15 06 F6 | 	mov	arg02, ##@LR__5419
08c20     35 00 00 FF 
08c24     0C E4 85 F1 | 	sub	objptr, ##27148
08c28     38 7D B1 FD | 	call	#__system___string_cmp
08c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c30     37 00 00 AF 
08c34     44 E4 05 A1 |  if_e	add	objptr, ##28228
08c38     F2 30 02 AB |  if_e	rdlong	local10, objptr
08c3c     37 00 00 AF 
08c40     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08c44     01 30 06 A1 |  if_e	add	local10, #1
08c48     5C 01 90 AD |  if_e	jmp	#LR__0809
08c4c     37 00 00 FF 
08c50     44 E4 05 F1 | 	add	objptr, ##28228
08c54     F2 30 02 FB | 	rdlong	local10, objptr
08c58     37 00 00 FF 
08c5c     44 E4 85 F1 | 	sub	objptr, ##28228
08c60     02 30 06 F1 | 	add	local10, #2
08c64     00 32 06 F6 | 	mov	local11, #0
08c68                 | '   l=ct+2 : m=0 : do
08c68                 | LR__0805
08c68                 | '   if isdec(lparts(l).part$) then 
08c68     18 25 02 F6 | 	mov	local04, local10
08c6c     03 24 66 F0 | 	shl	local04, #3
08c70     35 00 00 FF 
08c74     0C E4 05 F1 | 	add	objptr, ##27148
08c78     F2 24 02 F1 | 	add	local04, objptr
08c7c     12 13 02 FB | 	rdlong	arg01, local04
08c80     35 00 00 FF 
08c84     0C E4 85 F1 | 	sub	objptr, ##27148
08c88     7C D7 BF FD | 	call	#_isdec
08c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c90     44 00 90 AD |  if_e	jmp	#LR__0806
08c94     19 35 02 F6 | 	mov	local12, local11
08c98     0F 35 06 F1 | 	add	local12, #local01
08c9c     18 2F 02 F6 | 	mov	local09, local10
08ca0     03 2E 66 F0 | 	shl	local09, #3
08ca4     35 00 00 FF 
08ca8     0C E4 05 F1 | 	add	objptr, ##27148
08cac     F2 2E 02 F1 | 	add	local09, objptr
08cb0     17 13 02 FB | 	rdlong	arg01, local09
08cb4     00 14 06 F6 | 	mov	arg02, #0
08cb8     35 00 00 FF 
08cbc     0C E4 85 F1 | 	sub	objptr, ##27148
08cc0     A4 AE B1 FD | 	call	#__system____builtin_atoi
08cc4     FD 36 02 F6 | 	mov	local13, result1
08cc8                 | 	'.live	local13
08cc8                 | 	'.live	local12
08cc8     00 34 8E F9 | 	altd	local12, #0
08ccc     1B 35 02 F6 | 	mov	local12, local13
08cd0     01 32 06 F1 | 	add	local11, #1
08cd4     08 00 90 FD | 	jmp	#LR__0807
08cd8                 | LR__0806
08cd8                 | '     return(17)
08cd8     11 FA 05 F6 | 	mov	result1, #17
08cdc     EC 03 90 FD | 	jmp	#LR__0825
08ce0                 | LR__0807
08ce0                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
08ce0     18 25 02 F6 | 	mov	local04, local10
08ce4     01 24 06 F1 | 	add	local04, #1
08ce8     03 24 66 F0 | 	shl	local04, #3
08cec     35 00 00 FF 
08cf0     0C E4 05 F1 | 	add	objptr, ##27148
08cf4     F2 24 02 F1 | 	add	local04, objptr
08cf8     12 13 02 FB | 	rdlong	arg01, local04
08cfc     83 01 00 FF 
08d00     D0 15 06 F6 | 	mov	arg02, ##@LR__5420
08d04     35 00 00 FF 
08d08     0C E4 85 F1 | 	sub	objptr, ##27148
08d0c     54 7C B1 FD | 	call	#__system___string_cmp
08d10     00 FA 0D F2 | 	cmp	result1, #0 wz
08d14     3C 00 90 AD |  if_e	jmp	#LR__0808
08d18     18 37 02 F6 | 	mov	local13, local10
08d1c     01 36 06 F1 | 	add	local13, #1
08d20     03 36 66 F0 | 	shl	local13, #3
08d24     35 00 00 FF 
08d28     0C E4 05 F1 | 	add	objptr, ##27148
08d2c     F2 36 02 F1 | 	add	local13, objptr
08d30     1B 13 02 FB | 	rdlong	arg01, local13
08d34     83 01 00 FF 
08d38     D2 15 06 F6 | 	mov	arg02, ##@LR__5421
08d3c     35 00 00 FF 
08d40     0C E4 85 F1 | 	sub	objptr, ##27148
08d44     1C 7C B1 FD | 	call	#__system___string_cmp
08d48     00 FA 0D F2 | 	cmp	result1, #0 wz
08d4c     2C FA 05 56 |  if_ne	mov	result1, #44
08d50     78 03 90 5D |  if_ne	jmp	#LR__0825
08d54                 | LR__0808
08d54     02 30 06 F1 | 	add	local10, #2
08d58     18 25 02 F6 | 	mov	local04, local10
08d5c     01 24 86 F1 | 	sub	local04, #1
08d60     03 24 66 F0 | 	shl	local04, #3
08d64     35 00 00 FF 
08d68     0C E4 05 F1 | 	add	objptr, ##27148
08d6c     F2 24 02 F1 | 	add	local04, objptr
08d70     12 13 02 FB | 	rdlong	arg01, local04
08d74     83 01 00 FF 
08d78     D4 15 06 F6 | 	mov	arg02, ##@LR__5422
08d7c     35 00 00 FF 
08d80     0C E4 85 F1 | 	sub	objptr, ##27148
08d84     DC 7B B1 FD | 	call	#__system___string_cmp
08d88     00 FA 0D F2 | 	cmp	result1, #0 wz
08d8c     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08d90     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08d94                 | '   if m>3 then return 45
08d94     04 32 56 F2 | 	cmps	local11, #4 wc
08d98     2D FA 05 36 |  if_ae	mov	result1, #45
08d9c     2C 03 90 3D |  if_ae	jmp	#LR__0825
08da0     00 39 06 F6 | 	mov	local14, #256
08da4     0C 3A 06 F6 | 	mov	local15, #12
08da8                 | LR__0809
08da8                 | '   arraytype=array_no_type : esize=12
08da8                 | ' 1350 
08da8                 | '   if lparts(l).part$="as" then
08da8     18 25 02 F6 | 	mov	local04, local10
08dac     03 24 66 F0 | 	shl	local04, #3
08db0     35 00 00 FF 
08db4     0C E4 05 F1 | 	add	objptr, ##27148
08db8     F2 24 02 F1 | 	add	local04, objptr
08dbc     12 13 02 FB | 	rdlong	arg01, local04
08dc0     83 01 00 FF 
08dc4     D6 15 06 F6 | 	mov	arg02, ##@LR__5423
08dc8     35 00 00 FF 
08dcc     0C E4 85 F1 | 	sub	objptr, ##27148
08dd0     90 7B B1 FD | 	call	#__system___string_cmp
08dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
08dd8     F0 01 90 5D |  if_ne	jmp	#LR__0824
08ddc                 | '     select case lparts(l+1).part$
08ddc     18 35 02 F6 | 	mov	local12, local10
08de0     01 34 06 F1 | 	add	local12, #1
08de4     03 34 66 F0 | 	shl	local12, #3
08de8     35 00 00 FF 
08dec     0C E4 05 F1 | 	add	objptr, ##27148
08df0     F2 34 02 F1 | 	add	local12, objptr
08df4     1A 3D 02 FB | 	rdlong	local16, local12
08df8     83 01 00 FF 
08dfc     D9 15 06 F6 | 	mov	arg02, ##@LR__5424
08e00     1E 13 02 F6 | 	mov	arg01, local16
08e04     35 00 00 FF 
08e08     0C E4 85 F1 | 	sub	objptr, ##27148
08e0c     54 7B B1 FD | 	call	#__system___string_cmp
08e10     00 FA 0D F2 | 	cmp	result1, #0 wz
08e14     0C 01 90 AD |  if_e	jmp	#LR__0810
08e18     83 01 00 FF 
08e1c     DE 15 06 F6 | 	mov	arg02, ##@LR__5425
08e20     1E 13 02 F6 | 	mov	arg01, local16
08e24     3C 7B B1 FD | 	call	#__system___string_cmp
08e28     00 FA 0D F2 | 	cmp	result1, #0 wz
08e2c     00 01 90 AD |  if_e	jmp	#LR__0811
08e30     83 01 00 FF 
08e34     E4 15 06 F6 | 	mov	arg02, ##@LR__5426
08e38     1E 13 02 F6 | 	mov	arg01, local16
08e3c     24 7B B1 FD | 	call	#__system___string_cmp
08e40     00 FA 0D F2 | 	cmp	result1, #0 wz
08e44     F4 00 90 AD |  if_e	jmp	#LR__0812
08e48     83 01 00 FF 
08e4c     EA 15 06 F6 | 	mov	arg02, ##@LR__5427
08e50     1E 13 02 F6 | 	mov	arg01, local16
08e54     0C 7B B1 FD | 	call	#__system___string_cmp
08e58     00 FA 0D F2 | 	cmp	result1, #0 wz
08e5c     E8 00 90 AD |  if_e	jmp	#LR__0813
08e60     83 01 00 FF 
08e64     F1 15 06 F6 | 	mov	arg02, ##@LR__5428
08e68     1E 13 02 F6 | 	mov	arg01, local16
08e6c     F4 7A B1 FD | 	call	#__system___string_cmp
08e70     00 FA 0D F2 | 	cmp	result1, #0 wz
08e74     DC 00 90 AD |  if_e	jmp	#LR__0814
08e78     83 01 00 FF 
08e7c     F6 15 06 F6 | 	mov	arg02, ##@LR__5429
08e80     1E 13 02 F6 | 	mov	arg01, local16
08e84     DC 7A B1 FD | 	call	#__system___string_cmp
08e88     00 FA 0D F2 | 	cmp	result1, #0 wz
08e8c     D0 00 90 AD |  if_e	jmp	#LR__0815
08e90     83 01 00 FF 
08e94     FE 15 06 F6 | 	mov	arg02, ##@LR__5430
08e98     1E 13 02 F6 | 	mov	arg01, local16
08e9c     C4 7A B1 FD | 	call	#__system___string_cmp
08ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ea4     C4 00 90 AD |  if_e	jmp	#LR__0816
08ea8     84 01 00 FF 
08eac     04 14 06 F6 | 	mov	arg02, ##@LR__5431
08eb0     1E 13 02 F6 | 	mov	arg01, local16
08eb4     AC 7A B1 FD | 	call	#__system___string_cmp
08eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
08ebc     B8 00 90 AD |  if_e	jmp	#LR__0817
08ec0     84 01 00 FF 
08ec4     0A 14 06 F6 | 	mov	arg02, ##@LR__5432
08ec8     1E 13 02 F6 | 	mov	arg01, local16
08ecc     94 7A B1 FD | 	call	#__system___string_cmp
08ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ed4     AC 00 90 AD |  if_e	jmp	#LR__0818
08ed8     84 01 00 FF 
08edc     11 14 06 F6 | 	mov	arg02, ##@LR__5433
08ee0     1E 13 02 F6 | 	mov	arg01, local16
08ee4     7C 7A B1 FD | 	call	#__system___string_cmp
08ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
08eec     A0 00 90 AD |  if_e	jmp	#LR__0819
08ef0     84 01 00 FF 
08ef4     18 14 06 F6 | 	mov	arg02, ##@LR__5434
08ef8     1E 13 02 F6 | 	mov	arg01, local16
08efc     64 7A B1 FD | 	call	#__system___string_cmp
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     94 00 90 AD |  if_e	jmp	#LR__0820
08f08     84 01 00 FF 
08f0c     1F 14 06 F6 | 	mov	arg02, ##@LR__5435
08f10     1E 13 02 F6 | 	mov	arg01, local16
08f14     4C 7A B1 FD | 	call	#__system___string_cmp
08f18     00 FA 0D F2 | 	cmp	result1, #0 wz
08f1c     88 00 90 AD |  if_e	jmp	#LR__0821
08f20     90 00 90 FD | 	jmp	#LR__0822
08f24                 | LR__0810
08f24     01 39 06 F6 | 	mov	local14, #257
08f28     01 3A 06 F6 | 	mov	local15, #1
08f2c     9C 00 90 FD | 	jmp	#LR__0824
08f30                 | LR__0811
08f30     02 39 06 F6 | 	mov	local14, #258
08f34     01 3A 06 F6 | 	mov	local15, #1
08f38     90 00 90 FD | 	jmp	#LR__0824
08f3c                 | LR__0812
08f3c     03 39 06 F6 | 	mov	local14, #259
08f40     02 3A 06 F6 | 	mov	local15, #2
08f44     84 00 90 FD | 	jmp	#LR__0824
08f48                 | LR__0813
08f48     04 39 06 F6 | 	mov	local14, #260
08f4c     02 3A 06 F6 | 	mov	local15, #2
08f50     78 00 90 FD | 	jmp	#LR__0824
08f54                 | LR__0814
08f54     05 39 06 F6 | 	mov	local14, #261
08f58     04 3A 06 F6 | 	mov	local15, #4
08f5c     6C 00 90 FD | 	jmp	#LR__0824
08f60                 | LR__0815
08f60     05 39 06 F6 | 	mov	local14, #261
08f64     04 3A 06 F6 | 	mov	local15, #4
08f68     60 00 90 FD | 	jmp	#LR__0824
08f6c                 | LR__0816
08f6c     06 39 06 F6 | 	mov	local14, #262
08f70     04 3A 06 F6 | 	mov	local15, #4
08f74     54 00 90 FD | 	jmp	#LR__0824
08f78                 | LR__0817
08f78     07 39 06 F6 | 	mov	local14, #263
08f7c     08 3A 06 F6 | 	mov	local15, #8
08f80     48 00 90 FD | 	jmp	#LR__0824
08f84                 | LR__0818
08f84     08 39 06 F6 | 	mov	local14, #264
08f88     08 3A 06 F6 | 	mov	local15, #8
08f8c     3C 00 90 FD | 	jmp	#LR__0824
08f90                 | LR__0819
08f90     09 39 06 F6 | 	mov	local14, #265
08f94     04 3A 06 F6 | 	mov	local15, #4
08f98     30 00 90 FD | 	jmp	#LR__0824
08f9c                 | LR__0820
08f9c     0A 39 06 F6 | 	mov	local14, #266
08fa0     08 3A 06 F6 | 	mov	local15, #8
08fa4     24 00 90 FD | 	jmp	#LR__0824
08fa8                 | LR__0821
08fa8     0B 39 06 F6 | 	mov	local14, #267
08fac     04 3A 06 F6 | 	mov	local15, #4
08fb0     18 00 90 FD | 	jmp	#LR__0824
08fb4                 | LR__0822
08fb4     2F 12 06 F6 | 	mov	arg01, #47
08fb8     F0 43 B1 FD | 	call	#_printerror
08fbc     2F FA 05 F6 | 	mov	result1, #47
08fc0     08 01 90 FD | 	jmp	#LR__0825
08fc4                 | LR__0823
08fc4                 | '   return 46
08fc4     2E FA 05 F6 | 	mov	result1, #46
08fc8     00 01 90 FD | 	jmp	#LR__0825
08fcc                 | LR__0824
08fcc     0F 3B 02 FD | 	qmul	local15, local01
08fd0     18 2A 62 FD | 	getqx	local07
08fd4     10 2B 02 FD | 	qmul	local07, local02
08fd8     18 3C 62 FD | 	getqx	local16
08fdc     11 3D 02 FD | 	qmul	local16, local03
08fe0     51 00 00 FF 
08fe4     AC E5 05 F1 | 	add	objptr, ##41900
08fe8     F2 3E 02 FB | 	rdlong	local17, objptr
08fec     1C 15 02 F6 | 	mov	arg02, local14
08ff0     18 3C 62 FD | 	getqx	local16
08ff4     1E 3F 82 F1 | 	sub	local17, local16
08ff8     10 3E 86 F1 | 	sub	local17, #16
08ffc     0F 3E 26 F5 | 	andn	local17, #15
09000     F2 3E 62 FC | 	wrlong	local17, objptr
09004     51 00 00 FF 
09008     AC E5 85 F1 | 	sub	objptr, ##41900
0900c     1F 13 02 F6 | 	mov	arg01, local17
09010     44 45 B1 FD | 	call	#_psdpoke
09014     1F 13 02 F6 | 	mov	arg01, local17
09018     02 12 06 F1 | 	add	arg01, #2
0901c     1D 15 02 F6 | 	mov	arg02, local15
09020     34 45 B1 FD | 	call	#_psdpoke
09024     1F 13 02 F6 | 	mov	arg01, local17
09028     04 12 06 F1 | 	add	arg01, #4
0902c     0F 15 02 F6 | 	mov	arg02, local01
09030     DC 44 B1 FD | 	call	#_pslpoke
09034     1F 13 02 F6 | 	mov	arg01, local17
09038     08 12 06 F1 | 	add	arg01, #8
0903c     10 15 02 F6 | 	mov	arg02, local02
09040     CC 44 B1 FD | 	call	#_pslpoke
09044     1F 13 02 F6 | 	mov	arg01, local17
09048     0C 12 06 F1 | 	add	arg01, #12
0904c     11 15 02 F6 | 	mov	arg02, local03
09050     BC 44 B1 FD | 	call	#_pslpoke
09054     14 35 02 F6 | 	mov	local12, local06
09058     04 34 66 F0 | 	shl	local12, #4
0905c     14 00 00 FF 
09060     F8 E5 05 F1 | 	add	objptr, ##10744
09064     F2 34 02 F1 | 	add	local12, objptr
09068     1A 27 62 FC | 	wrlong	local05, local12
0906c     14 35 02 F6 | 	mov	local12, local06
09070     04 34 66 F0 | 	shl	local12, #4
09074     F2 34 02 F1 | 	add	local12, objptr
09078     04 34 06 F1 | 	add	local12, #4
0907c     1A 3F 62 FC | 	wrlong	local17, local12
09080     14 35 02 F6 | 	mov	local12, local06
09084     04 34 66 F0 | 	shl	local12, #4
09088     F2 34 02 F1 | 	add	local12, objptr
0908c     0C 34 06 F1 | 	add	local12, #12
09090     1A 39 62 FC | 	wrlong	local14, local12
09094                 | ' memtop=arrayptr
09094                 | ' psdpoke arrayptr,arraytype 
09094                 | ' psdpoke arrayptr+2,esize 
09094                 | ' pslpoke arrayptr+4,dims(0)
09094                 | ' pslpoke arrayptr+8,dims(1)
09094                 | ' pslpoke arrayptr+12,dims(2)
09094                 | ' variables(j).name=varname2$
09094                 | ' variables(j).value.uresult=arrayptr
09094                 | ' variables(j).vartype=arraytype
09094                 | ' if j=varnum then varnum+=1
09094     20 00 00 FF 
09098     10 E4 05 F1 | 	add	objptr, ##16400
0909c     F2 2A 02 FB | 	rdlong	local07, objptr
090a0     35 00 00 FF 
090a4     08 E4 85 F1 | 	sub	objptr, ##27144
090a8     15 29 0A F2 | 	cmp	local06, local07 wz
090ac     35 00 00 AF 
090b0     08 E4 05 A1 |  if_e	add	objptr, ##27144
090b4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
090b8     01 2A 06 A1 |  if_e	add	local07, #1
090bc     F2 2A 62 AC |  if_e	wrlong	local07, objptr
090c0     35 00 00 AF 
090c4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
090c8                 | ' return 0
090c8     00 FA 05 F6 | 	mov	result1, #0
090cc                 | LR__0825
090cc     A7 F0 03 F6 | 	mov	ptra, fp
090d0     B2 00 A0 FD | 	call	#popregs_
090d4                 | _compile_dim_ret
090d4     2D 00 64 FD | 	ret
090d8                 | 
090d8                 | ' 
090d8                 | ' '----- compile 'for' command. 
090d8                 | ' 
090d8                 | ' function compile_for() as ulong  
090d8                 | _compile_for
090d8     05 4A 05 F6 | 	mov	COUNT_, #5
090dc     A8 00 A0 FD | 	call	#pushregs_
090e0                 | ' 
090e0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
090e0     37 00 00 FF 
090e4     44 E4 05 F1 | 	add	objptr, ##28228
090e8     F2 14 02 FB | 	rdlong	arg02, objptr
090ec     01 14 06 F1 | 	add	arg02, #1
090f0     03 14 66 F0 | 	shl	arg02, #3
090f4     02 00 00 FF 
090f8     38 E4 85 F1 | 	sub	objptr, ##1080
090fc     F2 14 02 F1 | 	add	arg02, objptr
09100     0A 13 02 FB | 	rdlong	arg01, arg02
09104     35 00 00 FF 
09108     0C E4 85 F1 | 	sub	objptr, ##27148
0910c                 | ' 
0910c                 | ' select case s
0910c     81 01 00 FF 
09110     8A 15 06 F6 | 	mov	arg02, ##@LR__5183
09114     4C 78 B1 FD | 	call	#__system___string_cmp
09118     00 FA 0D F2 | 	cmp	result1, #0 wz
0911c     1B FA 05 A6 |  if_e	mov	result1, #27
09120     00 FA 05 56 |  if_ne	mov	result1, #0
09124     00 FA 0D F2 | 	cmp	result1, #0 wz
09128     0C 00 90 AD |  if_e	jmp	#LR__0830
0912c     05 12 06 F6 | 	mov	arg01, #5
09130     F0 E3 BF FD | 	call	#_compile_immediate_assign
09134     08 00 90 FD | 	jmp	#LR__0831
09138                 | LR__0830
09138     20 FA 05 F6 | 	mov	result1, #32
0913c     D0 02 90 FD | 	jmp	#LR__0835
09140                 | LR__0831
09140     4A 00 00 FF 
09144     7C E4 05 F1 | 	add	objptr, ##38012
09148     F2 14 02 FB | 	rdlong	arg02, objptr
0914c     0A 13 02 F6 | 	mov	arg01, arg02
09150     01 12 86 F1 | 	sub	arg01, #1
09154     09 25 02 F6 | 	mov	local04, arg01
09158     01 24 66 F0 | 	shl	local04, #1
0915c     09 25 02 F1 | 	add	local04, arg01
09160     02 24 66 F0 | 	shl	local04, #2
09164     03 00 00 FF 
09168     00 E4 85 F1 | 	sub	objptr, ##1536
0916c     F2 24 02 F1 | 	add	local04, objptr
09170     12 1F 02 FB | 	rdlong	local01, local04
09174     04 24 06 F1 | 	add	local04, #4
09178     12 25 02 FB | 	rdlong	local04, local04
0917c     01 14 86 F1 | 	sub	arg02, #1
09180     0A 13 02 F6 | 	mov	arg01, arg02
09184     01 12 66 F0 | 	shl	arg01, #1
09188     0A 13 02 F1 | 	add	arg01, arg02
0918c     02 12 66 F0 | 	shl	arg01, #2
09190     F2 12 02 F1 | 	add	arg01, objptr
09194     08 12 06 F1 | 	add	arg01, #8
09198     09 15 02 FB | 	rdlong	arg02, arg01
0919c     12 21 02 F6 | 	mov	local02, local04
091a0     0A 23 02 F6 | 	mov	local03, arg02
091a4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
091a4     17 22 0E F2 | 	cmp	local03, #23 wz
091a8     47 00 00 FF 
091ac     7C E4 85 F1 | 	sub	objptr, ##36476
091b0     22 FA 05 56 |  if_ne	mov	result1, #34
091b4     58 02 90 5D |  if_ne	jmp	#LR__0835
091b8     0F 27 02 F6 | 	mov	local05, local01
091bc                 | ' varnum=t1.result.uresult
091bc                 | ' if lparts(ct).part$<>"to" then return 33
091bc     37 00 00 FF 
091c0     44 E4 05 F1 | 	add	objptr, ##28228
091c4     F2 1E 02 FB | 	rdlong	local01, objptr
091c8     03 1E 66 F0 | 	shl	local01, #3
091cc     02 00 00 FF 
091d0     38 E4 85 F1 | 	sub	objptr, ##1080
091d4     F2 1E 02 F1 | 	add	local01, objptr
091d8     0F 13 02 FB | 	rdlong	arg01, local01
091dc     84 01 00 FF 
091e0     26 14 06 F6 | 	mov	arg02, ##@LR__5436
091e4     35 00 00 FF 
091e8     0C E4 85 F1 | 	sub	objptr, ##27148
091ec     74 77 B1 FD | 	call	#__system___string_cmp
091f0     00 FA 0D F2 | 	cmp	result1, #0 wz
091f4     21 FA 05 56 |  if_ne	mov	result1, #33
091f8     14 02 90 5D |  if_ne	jmp	#LR__0835
091fc     37 00 00 FF 
09200     44 E4 05 F1 | 	add	objptr, ##28228
09204     F2 24 02 FB | 	rdlong	local04, objptr
09208     01 24 06 F1 | 	add	local04, #1
0920c     F2 24 62 FC | 	wrlong	local04, objptr
09210     37 00 00 FF 
09214     44 E4 85 F1 | 	sub	objptr, ##28228
09218     EC 07 B0 FD | 	call	#_expr
0921c                 | ' ct+=1
0921c                 | ' expr()  										' there is "to" value pushed on the stack
0921c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0921c     37 00 00 FF 
09220     44 E4 05 F1 | 	add	objptr, ##28228
09224     F2 24 02 FB | 	rdlong	local04, objptr
09228     03 24 66 F0 | 	shl	local04, #3
0922c     02 00 00 FF 
09230     38 E4 85 F1 | 	sub	objptr, ##1080
09234     F2 24 02 F1 | 	add	local04, objptr
09238     12 13 02 FB | 	rdlong	arg01, local04
0923c     84 01 00 FF 
09240     29 14 06 F6 | 	mov	arg02, ##@LR__5437
09244     35 00 00 FF 
09248     0C E4 85 F1 | 	sub	objptr, ##27148
0924c     14 77 B1 FD | 	call	#__system___string_cmp
09250     00 FA 0D F2 | 	cmp	result1, #0 wz
09254     3C 00 90 AD |  if_e	jmp	#LR__0832
09258     37 00 00 FF 
0925c     44 E4 05 F1 | 	add	objptr, ##28228
09260     F2 24 02 FB | 	rdlong	local04, objptr
09264     03 24 66 F0 | 	shl	local04, #3
09268     02 00 00 FF 
0926c     38 E4 85 F1 | 	sub	objptr, ##1080
09270     F2 24 02 F1 | 	add	local04, objptr
09274     12 13 02 FB | 	rdlong	arg01, local04
09278     84 01 00 FF 
0927c     2E 14 06 F6 | 	mov	arg02, ##@LR__5438
09280     35 00 00 FF 
09284     0C E4 85 F1 | 	sub	objptr, ##27148
09288     D8 76 B1 FD | 	call	#__system___string_cmp
0928c     00 FA 0D F2 | 	cmp	result1, #0 wz
09290     24 00 90 5D |  if_ne	jmp	#LR__0833
09294                 | LR__0832
09294     37 00 00 FF 
09298     44 E4 05 F1 | 	add	objptr, ##28228
0929c     F2 1E 02 FB | 	rdlong	local01, objptr
092a0     01 1E 06 F1 | 	add	local01, #1
092a4     F2 1E 62 FC | 	wrlong	local01, objptr
092a8     37 00 00 FF 
092ac     44 E4 85 F1 | 	sub	objptr, ##28228
092b0     54 07 B0 FD | 	call	#_expr
092b4     78 00 90 FD | 	jmp	#LR__0834
092b8                 | LR__0833
092b8     4A 00 00 FF 
092bc     7C E4 05 F1 | 	add	objptr, ##38012
092c0     F2 1E 02 FB | 	rdlong	local01, objptr
092c4     0F 25 02 F6 | 	mov	local04, local01
092c8     01 24 66 F0 | 	shl	local04, #1
092cc     0F 25 02 F1 | 	add	local04, local01
092d0     02 24 66 F0 | 	shl	local04, #2
092d4     03 00 00 FF 
092d8     00 E4 85 F1 | 	sub	objptr, ##1536
092dc     F2 24 02 F1 | 	add	local04, objptr
092e0     08 24 06 F1 | 	add	local04, #8
092e4     12 39 68 FC | 	wrlong	#28, local04
092e8     03 00 00 FF 
092ec     00 E4 05 F1 | 	add	objptr, ##1536
092f0     F2 1E 02 FB | 	rdlong	local01, objptr
092f4     0F 25 02 F6 | 	mov	local04, local01
092f8     01 24 66 F0 | 	shl	local04, #1
092fc     0F 25 02 F1 | 	add	local04, local01
09300     02 24 66 F0 | 	shl	local04, #2
09304     03 00 00 FF 
09308     00 E4 85 F1 | 	sub	objptr, ##1536
0930c     F2 24 02 F1 | 	add	local04, objptr
09310     12 03 68 FC | 	wrlong	#1, local04
09314     03 00 00 FF 
09318     00 E4 05 F1 | 	add	objptr, ##1536
0931c     F2 1E 02 FB | 	rdlong	local01, objptr
09320     01 1E 06 F1 | 	add	local01, #1
09324     F2 1E 62 FC | 	wrlong	local01, objptr
09328     4A 00 00 FF 
0932c     7C E4 85 F1 | 	sub	objptr, ##38012
09330                 | LR__0834
09330     4A 00 00 FF 
09334     7C E4 05 F1 | 	add	objptr, ##38012
09338     F2 1E 02 FB | 	rdlong	local01, objptr
0933c     0F 25 02 F6 | 	mov	local04, local01
09340     01 24 66 F0 | 	shl	local04, #1
09344     0F 25 02 F1 | 	add	local04, local01
09348     02 24 66 F0 | 	shl	local04, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 24 02 F1 | 	add	local04, objptr
09358     08 24 06 F1 | 	add	local04, #8
0935c     12 39 68 FC | 	wrlong	#28, local04
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 1E 02 FB | 	rdlong	local01, objptr
0936c     0F 25 02 F6 | 	mov	local04, local01
09370     01 24 66 F0 | 	shl	local04, #1
09374     0F 25 02 F1 | 	add	local04, local01
09378     02 24 66 F0 | 	shl	local04, #2
0937c     03 00 00 FF 
09380     00 E4 85 F1 | 	sub	objptr, ##1536
09384     F2 24 02 F1 | 	add	local04, objptr
09388     12 27 62 FC | 	wrlong	local05, local04
0938c     03 00 00 FF 
09390     00 E4 05 F1 | 	add	objptr, ##1536
09394     F2 26 02 FB | 	rdlong	local05, objptr
09398     01 26 06 F1 | 	add	local05, #1
0939c     F2 26 62 FC | 	wrlong	local05, objptr
093a0     13 1F 02 F6 | 	mov	local01, local05
093a4     01 1E 66 F0 | 	shl	local01, #1
093a8     13 1F 02 F1 | 	add	local01, local05
093ac     02 1E 66 F0 | 	shl	local01, #2
093b0     03 00 00 FF 
093b4     00 E4 85 F1 | 	sub	objptr, ##1536
093b8     F2 1E 02 F1 | 	add	local01, objptr
093bc     08 1E 06 F1 | 	add	local01, #8
093c0     0F 95 68 FC | 	wrlong	#74, local01
093c4     03 00 00 FF 
093c8     00 E4 05 F1 | 	add	objptr, ##1536
093cc     F2 26 02 FB | 	rdlong	local05, objptr
093d0     13 1F 02 F6 | 	mov	local01, local05
093d4     01 1E 66 F0 | 	shl	local01, #1
093d8     13 1F 02 F1 | 	add	local01, local05
093dc     02 1E 66 F0 | 	shl	local01, #2
093e0     03 00 00 FF 
093e4     00 E4 85 F1 | 	sub	objptr, ##1536
093e8     F2 1E 02 F1 | 	add	local01, objptr
093ec     0F 01 68 FC | 	wrlong	#0, local01
093f0     03 00 00 FF 
093f4     00 E4 05 F1 | 	add	objptr, ##1536
093f8     F2 26 02 FB | 	rdlong	local05, objptr
093fc     01 26 06 F1 | 	add	local05, #1
09400     F2 26 62 FC | 	wrlong	local05, objptr
09404     4A 00 00 FF 
09408     7C E4 85 F1 | 	sub	objptr, ##38012
0940c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0940c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0940c                 | ' return 0
0940c     00 FA 05 F6 | 	mov	result1, #0
09410                 | LR__0835
09410     A7 F0 03 F6 | 	mov	ptra, fp
09414     B2 00 A0 FD | 	call	#popregs_
09418                 | _compile_for_ret
09418     2D 00 64 FD | 	ret
0941c                 | 
0941c                 | ' 
0941c                 | ' '----- compile 'next' command. 
0941c                 | ' 
0941c                 | ' function compile_next() as ulong
0941c                 | _compile_next
0941c     04 4A 05 F6 | 	mov	COUNT_, #4
09420     A8 00 A0 FD | 	call	#pushregs_
09424     37 00 00 FF 
09428     44 E4 05 F1 | 	add	objptr, ##28228
0942c     F2 14 02 FB | 	rdlong	arg02, objptr
09430     03 14 66 F0 | 	shl	arg02, #3
09434     02 00 00 FF 
09438     38 E4 85 F1 | 	sub	objptr, ##1080
0943c     F2 14 02 F1 | 	add	arg02, objptr
09440     0A 1F 02 FB | 	rdlong	local01, arg02
09444                 | ' 
09444                 | ' varname$=lparts(ct).part$ 
09444                 | ' if varnum=0 then return 35
09444     04 E4 85 F1 | 	sub	objptr, #4
09448     F2 14 0A FB | 	rdlong	arg02, objptr wz
0944c     35 00 00 FF 
09450     08 E4 85 F1 | 	sub	objptr, ##27144
09454     23 FA 05 A6 |  if_e	mov	result1, #35
09458     4C 01 90 AD |  if_e	jmp	#LR__0842
0945c     01 20 66 F6 | 	neg	local02, #1
09460                 | ' j=-1
09460                 | ' for i=0 to varnum-1
09460     00 22 06 F6 | 	mov	local03, #0
09464     35 00 00 FF 
09468     08 E4 05 F1 | 	add	objptr, ##27144
0946c     F2 24 02 FB | 	rdlong	local04, objptr
09470     35 00 00 FF 
09474     08 E4 85 F1 | 	sub	objptr, ##27144
09478                 | LR__0840
09478     12 23 12 F2 | 	cmp	local03, local04 wc
0947c     38 00 90 3D |  if_ae	jmp	#LR__0841
09480                 | '   if variables(i).name=varname$ then j=i : exit
09480     11 15 02 F6 | 	mov	arg02, local03
09484     04 14 66 F0 | 	shl	arg02, #4
09488     14 00 00 FF 
0948c     F8 E5 05 F1 | 	add	objptr, ##10744
09490     F2 14 02 F1 | 	add	arg02, objptr
09494     0A 13 02 FB | 	rdlong	arg01, arg02
09498     0F 15 02 F6 | 	mov	arg02, local01
0949c     14 00 00 FF 
094a0     F8 E5 85 F1 | 	sub	objptr, ##10744
094a4     BC 74 B1 FD | 	call	#__system___string_cmp
094a8     00 FA 0D F2 | 	cmp	result1, #0 wz
094ac     11 21 02 A6 |  if_e	mov	local02, local03
094b0     01 22 06 51 |  if_ne	add	local03, #1
094b4     C0 FF 9F 5D |  if_ne	jmp	#LR__0840
094b8                 | LR__0841
094b8                 | ' if j=-1 then return 35
094b8     FF FF 7F FF 
094bc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
094c0     23 FA 05 A6 |  if_e	mov	result1, #35
094c4     E0 00 90 AD |  if_e	jmp	#LR__0842
094c8     4A 00 00 FF 
094cc     7C E4 05 F1 | 	add	objptr, ##38012
094d0     F2 24 02 FB | 	rdlong	local04, objptr
094d4     12 23 02 F6 | 	mov	local03, local04
094d8     01 22 66 F0 | 	shl	local03, #1
094dc     12 23 02 F1 | 	add	local03, local04
094e0     02 22 66 F0 | 	shl	local03, #2
094e4     03 00 00 FF 
094e8     00 E4 85 F1 | 	sub	objptr, ##1536
094ec     F2 22 02 F1 | 	add	local03, objptr
094f0     08 22 06 F1 | 	add	local03, #8
094f4     11 39 68 FC | 	wrlong	#28, local03
094f8     03 00 00 FF 
094fc     00 E4 05 F1 | 	add	objptr, ##1536
09500     F2 24 02 FB | 	rdlong	local04, objptr
09504     12 23 02 F6 | 	mov	local03, local04
09508     01 22 66 F0 | 	shl	local03, #1
0950c     12 23 02 F1 | 	add	local03, local04
09510     02 22 66 F0 | 	shl	local03, #2
09514     03 00 00 FF 
09518     00 E4 85 F1 | 	sub	objptr, ##1536
0951c     F2 22 02 F1 | 	add	local03, objptr
09520     11 21 62 FC | 	wrlong	local02, local03
09524     03 00 00 FF 
09528     00 E4 05 F1 | 	add	objptr, ##1536
0952c     F2 24 02 FB | 	rdlong	local04, objptr
09530     01 24 06 F1 | 	add	local04, #1
09534     F2 24 62 FC | 	wrlong	local04, objptr
09538     12 23 02 F6 | 	mov	local03, local04
0953c     01 22 66 F0 | 	shl	local03, #1
09540     12 23 02 F1 | 	add	local03, local04
09544     02 22 66 F0 | 	shl	local03, #2
09548     03 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1536
09550     F2 22 02 F1 | 	add	local03, objptr
09554     08 22 06 F1 | 	add	local03, #8
09558     11 97 68 FC | 	wrlong	#75, local03
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 24 02 FB | 	rdlong	local04, objptr
09568     12 23 02 F6 | 	mov	local03, local04
0956c     01 22 66 F0 | 	shl	local03, #1
09570     12 23 02 F1 | 	add	local03, local04
09574     02 22 66 F0 | 	shl	local03, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 22 02 F1 | 	add	local03, objptr
09584     11 01 68 FC | 	wrlong	#0, local03
09588     03 00 00 FF 
0958c     00 E4 05 F1 | 	add	objptr, ##1536
09590     F2 24 02 FB | 	rdlong	local04, objptr
09594     01 24 06 F1 | 	add	local04, #1
09598     F2 24 62 FC | 	wrlong	local04, objptr
0959c     4A 00 00 FF 
095a0     7C E4 85 F1 | 	sub	objptr, ##38012
095a4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
095a4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
095a4                 | ' return 0
095a4     00 FA 05 F6 | 	mov	result1, #0
095a8                 | LR__0842
095a8     A7 F0 03 F6 | 	mov	ptra, fp
095ac     B2 00 A0 FD | 	call	#popregs_
095b0                 | _compile_next_ret
095b0     2D 00 64 FD | 	ret
095b4                 | 
095b4                 | ' 
095b4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
095b4                 | ' 
095b4                 | ' function compile_gosub() as ulong
095b4                 | _compile_gosub
095b4     02 4A 05 F6 | 	mov	COUNT_, #2
095b8     A8 00 A0 FD | 	call	#pushregs_
095bc     4A 00 00 FF 
095c0     7C E4 05 F1 | 	add	objptr, ##38012
095c4     F2 1E 02 FB | 	rdlong	local01, objptr
095c8     0F 21 02 F6 | 	mov	local02, local01
095cc     01 20 66 F0 | 	shl	local02, #1
095d0     0F 21 02 F1 | 	add	local02, local01
095d4     02 20 66 F0 | 	shl	local02, #2
095d8     03 00 00 FF 
095dc     00 E4 85 F1 | 	sub	objptr, ##1536
095e0     F2 20 02 F1 | 	add	local02, objptr
095e4     08 20 06 F1 | 	add	local02, #8
095e8     10 53 69 FC | 	wrlong	#169, local02
095ec     03 00 00 FF 
095f0     00 E4 05 F1 | 	add	objptr, ##1536
095f4     F2 20 02 FB | 	rdlong	local02, objptr
095f8     01 20 06 F1 | 	add	local02, #1
095fc     F2 20 62 FC | 	wrlong	local02, objptr
09600     4A 00 00 FF 
09604     7C E4 85 F1 | 	sub	objptr, ##38012
09608     0C 00 B0 FD | 	call	#_compile_goto
0960c                 | ' compiledline(lineptr).result_type=token_gosub
0960c                 | ' lineptr+=1
0960c                 | ' err=compile_goto()
0960c                 | ' return err
0960c     A7 F0 03 F6 | 	mov	ptra, fp
09610     B2 00 A0 FD | 	call	#popregs_
09614                 | _compile_gosub_ret
09614     2D 00 64 FD | 	ret
09618                 | 
09618                 | ' 
09618                 | ' '----- compile 'goto' 
09618                 | ' 
09618                 | ' function compile_goto( ) as ulong
09618                 | _compile_goto
09618     03 4A 05 F6 | 	mov	COUNT_, #3
0961c     A8 00 A0 FD | 	call	#pushregs_
09620     34 F0 07 F1 | 	add	ptra, #52
09624                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09624     37 00 00 FF 
09628     44 E4 05 F1 | 	add	objptr, ##28228
0962c     F2 16 02 FB | 	rdlong	arg03, objptr
09630     03 16 66 F0 | 	shl	arg03, #3
09634     02 00 00 FF 
09638     38 E4 85 F1 | 	sub	objptr, ##1080
0963c     F2 16 02 F1 | 	add	arg03, objptr
09640     04 16 06 F1 | 	add	arg03, #4
09644     0B 17 02 FB | 	rdlong	arg03, arg03
09648     01 00 00 FF 
0964c     00 16 0E F2 | 	cmp	arg03, ##512 wz
09650     35 00 00 FF 
09654     0C E4 85 F1 | 	sub	objptr, ##27148
09658     CC 02 90 5D |  if_ne	jmp	#LR__0855
0965c     37 00 00 FF 
09660     44 E4 05 F1 | 	add	objptr, ##28228
09664     F2 16 02 FB | 	rdlong	arg03, objptr
09668     01 16 06 F1 | 	add	arg03, #1
0966c     03 16 66 F0 | 	shl	arg03, #3
09670     02 00 00 FF 
09674     38 E4 85 F1 | 	sub	objptr, ##1080
09678     F2 16 02 F1 | 	add	arg03, objptr
0967c     04 16 06 F1 | 	add	arg03, #4
09680     0B 17 02 FB | 	rdlong	arg03, arg03
09684     FE 17 0E F2 | 	cmp	arg03, #510 wz
09688     35 00 00 FF 
0968c     0C E4 85 F1 | 	sub	objptr, ##27148
09690     94 02 90 5D |  if_ne	jmp	#LR__0855
09694     37 00 00 FF 
09698     44 E4 05 F1 | 	add	objptr, ##28228
0969c     F2 16 02 FB | 	rdlong	arg03, objptr
096a0     03 16 66 F0 | 	shl	arg03, #3
096a4     02 00 00 FF 
096a8     38 E4 85 F1 | 	sub	objptr, ##1080
096ac     F2 16 02 F1 | 	add	arg03, objptr
096b0     0B 13 02 FB | 	rdlong	arg01, arg03
096b4     00 14 06 F6 | 	mov	arg02, #0
096b8     35 00 00 FF 
096bc     0C E4 85 F1 | 	sub	objptr, ##27148
096c0     A4 A4 B1 FD | 	call	#__system____builtin_atoi
096c4     04 4E 05 F1 | 	add	fp, #4
096c8     A7 FA 61 FC | 	wrlong	result1, fp
096cc     4A 00 00 FF 
096d0     7C E4 05 F1 | 	add	objptr, ##38012
096d4     F2 1E 02 FB | 	rdlong	local01, objptr
096d8     0F 21 02 F6 | 	mov	local02, local01
096dc     01 20 66 F0 | 	shl	local02, #1
096e0     0F 21 02 F1 | 	add	local02, local01
096e4     02 20 66 F0 | 	shl	local02, #2
096e8     03 00 00 FF 
096ec     00 E4 85 F1 | 	sub	objptr, ##1536
096f0     F2 20 02 F1 | 	add	local02, objptr
096f4     08 20 06 F1 | 	add	local02, #8
096f8     10 9D 68 FC | 	wrlong	#78, local02
096fc     03 00 00 FF 
09700     0C E4 05 F1 | 	add	objptr, ##1548
09704     F2 22 02 FB | 	rdlong	local03, objptr
09708     4A 00 00 FF 
0970c     88 E4 85 F1 | 	sub	objptr, ##38024
09710     04 4E 05 F1 | 	add	fp, #4
09714     A7 22 62 FC | 	wrlong	local03, fp
09718     08 4E 85 F1 | 	sub	fp, #8
0971c                 | '   gotoline=val%(lparts(ct).part$) 
0971c                 | '   compiledline(lineptr).result_type=token_fast_goto
0971c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0971c                 | '   do
0971c                 | LR__0850
0971c     10 4E 05 F1 | 	add	fp, #16
09720     A7 12 02 F6 | 	mov	arg01, fp
09724     08 4E 85 F1 | 	sub	fp, #8
09728     A7 14 02 FB | 	rdlong	arg02, fp
0972c     08 4E 85 F1 | 	sub	fp, #8
09730     18 16 06 F6 | 	mov	arg03, #24
09734     0B 00 00 FF 
09738     CC E4 05 F1 | 	add	objptr, ##5836
0973c     BC 65 B1 FD | 	call	#_psram_spin2_read1
09740     0B 00 00 FF 
09744     CC E4 85 F1 | 	sub	objptr, ##5836
09748                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09748                 | '     if gotoheader(0)<>$FFFFFFFF then
09748     10 4E 05 F1 | 	add	fp, #16
0974c     A7 22 02 FB | 	rdlong	local03, fp
09750     10 4E 85 F1 | 	sub	fp, #16
09754     FF FF 7F FF 
09758     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0975c     24 00 90 AD |  if_e	jmp	#LR__0851
09760     08 4E 05 F1 | 	add	fp, #8
09764     A7 22 02 FB | 	rdlong	local03, fp
09768     04 4E 05 F1 | 	add	fp, #4
0976c     A7 22 62 FC | 	wrlong	local03, fp
09770     18 4E 05 F1 | 	add	fp, #24
09774     A7 22 02 FB | 	rdlong	local03, fp
09778     1C 4E 85 F1 | 	sub	fp, #28
0977c     A7 22 62 FC | 	wrlong	local03, fp
09780     08 4E 85 F1 | 	sub	fp, #8
09784                 | LR__0851
09784     24 4E 05 F1 | 	add	fp, #36
09788     A7 22 02 FB | 	rdlong	local03, fp
0978c     24 4E 85 F1 | 	sub	fp, #36
09790     FF FF 3F FF 
09794     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09798     10 4E 05 51 |  if_ne	add	fp, #16
0979c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
097a0     10 4E 85 51 |  if_ne	sub	fp, #16
097a4     FF FF 7F 5F 
097a8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
097ac     1C 00 90 AD |  if_e	jmp	#LR__0852
097b0     10 4E 05 F1 | 	add	fp, #16
097b4     A7 22 02 FB | 	rdlong	local03, fp
097b8     0C 4E 85 F1 | 	sub	fp, #12
097bc     A7 20 02 FB | 	rdlong	local02, fp
097c0     04 4E 85 F1 | 	sub	fp, #4
097c4     10 23 0A F2 | 	cmp	local03, local02 wz
097c8     50 FF 9F 5D |  if_ne	jmp	#LR__0850
097cc                 | LR__0852
097cc                 | '   if gotoheader(0)=gotoline then
097cc     10 4E 05 F1 | 	add	fp, #16
097d0     A7 22 02 FB | 	rdlong	local03, fp
097d4     0C 4E 85 F1 | 	sub	fp, #12
097d8     A7 1E 02 FB | 	rdlong	local01, fp
097dc     04 4E 85 F1 | 	sub	fp, #4
097e0     0F 23 0A F2 | 	cmp	local03, local01 wz
097e4     7C 00 90 5D |  if_ne	jmp	#LR__0853
097e8     4A 00 00 FF 
097ec     7C E4 05 F1 | 	add	objptr, ##38012
097f0     F2 1E 02 FB | 	rdlong	local01, objptr
097f4     0F 21 02 F6 | 	mov	local02, local01
097f8     01 20 66 F0 | 	shl	local02, #1
097fc     0F 21 02 F1 | 	add	local02, local01
09800     02 20 66 F0 | 	shl	local02, #2
09804     03 00 00 FF 
09808     00 E4 85 F1 | 	sub	objptr, ##1536
0980c     F2 20 02 F1 | 	add	local02, objptr
09810     0C 4E 05 F1 | 	add	fp, #12
09814     A7 22 02 FB | 	rdlong	local03, fp
09818     10 23 62 FC | 	wrlong	local03, local02
0981c     03 00 00 FF 
09820     00 E4 05 F1 | 	add	objptr, ##1536
09824     F2 1E 02 FB | 	rdlong	local01, objptr
09828     0F 21 02 F6 | 	mov	local02, local01
0982c     01 20 66 F0 | 	shl	local02, #1
09830     0F 21 02 F1 | 	add	local02, local01
09834     02 20 66 F0 | 	shl	local02, #2
09838     03 00 00 FF 
0983c     00 E4 85 F1 | 	sub	objptr, ##1536
09840     F2 20 02 F1 | 	add	local02, objptr
09844     08 4E 85 F1 | 	sub	fp, #8
09848     A7 22 02 FB | 	rdlong	local03, fp
0984c     04 4E 85 F1 | 	sub	fp, #4
09850     04 20 06 F1 | 	add	local02, #4
09854     10 23 62 FC | 	wrlong	local03, local02
09858     47 00 00 FF 
0985c     7C E4 85 F1 | 	sub	objptr, ##36476
09860     A4 00 90 FD | 	jmp	#LR__0854
09864                 | LR__0853
09864     4A 00 00 FF 
09868     7C E4 05 F1 | 	add	objptr, ##38012
0986c     F2 1E 02 FB | 	rdlong	local01, objptr
09870     0F 21 02 F6 | 	mov	local02, local01
09874     01 20 66 F0 | 	shl	local02, #1
09878     0F 21 02 F1 | 	add	local02, local01
0987c     02 20 66 F0 | 	shl	local02, #2
09880     03 00 00 FF 
09884     00 E4 85 F1 | 	sub	objptr, ##1536
09888     F2 20 02 F1 | 	add	local02, objptr
0988c     00 00 C0 FF 
09890     10 01 68 FC | 	wrlong	##-2147483648, local02
09894     03 00 00 FF 
09898     00 E4 05 F1 | 	add	objptr, ##1536
0989c     F2 1E 02 FB | 	rdlong	local01, objptr
098a0     0F 21 02 F6 | 	mov	local02, local01
098a4     01 20 66 F0 | 	shl	local02, #1
098a8     0F 21 02 F1 | 	add	local02, local01
098ac     02 20 66 F0 | 	shl	local02, #2
098b0     03 00 00 FF 
098b4     00 E4 85 F1 | 	sub	objptr, ##1536
098b8     F2 20 02 F1 | 	add	local02, objptr
098bc     04 4E 05 F1 | 	add	fp, #4
098c0     A7 22 02 FB | 	rdlong	local03, fp
098c4     04 4E 85 F1 | 	sub	fp, #4
098c8     04 20 06 F1 | 	add	local02, #4
098cc     10 23 62 FC | 	wrlong	local03, local02
098d0     03 00 00 FF 
098d4     00 E4 05 F1 | 	add	objptr, ##1536
098d8     F2 1E 02 FB | 	rdlong	local01, objptr
098dc     0F 21 02 F6 | 	mov	local02, local01
098e0     01 20 66 F0 | 	shl	local02, #1
098e4     0F 21 02 F1 | 	add	local02, local01
098e8     02 20 66 F0 | 	shl	local02, #2
098ec     03 00 00 FF 
098f0     00 E4 85 F1 | 	sub	objptr, ##1536
098f4     F2 20 02 F1 | 	add	local02, objptr
098f8     08 20 06 F1 | 	add	local02, #8
098fc     10 A7 68 FC | 	wrlong	#83, local02
09900     47 00 00 FF 
09904     7C E4 85 F1 | 	sub	objptr, ##36476
09908                 | LR__0854
09908     4A 00 00 FF 
0990c     7C E4 05 F1 | 	add	objptr, ##38012
09910     F2 22 02 FB | 	rdlong	local03, objptr
09914     01 22 06 F1 | 	add	local03, #1
09918     F2 22 62 FC | 	wrlong	local03, objptr
0991c     4A 00 00 FF 
09920     7C E4 85 F1 | 	sub	objptr, ##38012
09924     D0 00 90 FD | 	jmp	#LR__0856
09928                 | LR__0855
09928     DC 00 B0 FD | 	call	#_expr
0992c     30 4E 05 F1 | 	add	fp, #48
09930     A7 9E 68 FC | 	wrlong	#79, fp
09934     08 4E 85 F1 | 	sub	fp, #8
09938     A7 00 68 FC | 	wrlong	#0, fp
0993c     04 4E 05 F1 | 	add	fp, #4
09940     A7 22 02 FB | 	rdlong	local03, fp
09944     04 4E 05 F1 | 	add	fp, #4
09948     A7 1E 02 FB | 	rdlong	local01, fp
0994c     30 4E 85 F1 | 	sub	fp, #48
09950     4A 00 00 FF 
09954     7C E4 05 F1 | 	add	objptr, ##38012
09958     F2 20 02 FB | 	rdlong	local02, objptr
0995c     10 17 02 F6 | 	mov	arg03, local02
09960     01 16 66 F0 | 	shl	arg03, #1
09964     10 17 02 F1 | 	add	arg03, local02
09968     02 16 66 F0 | 	shl	arg03, #2
0996c     03 00 00 FF 
09970     00 E4 85 F1 | 	sub	objptr, ##1536
09974     F2 16 02 F1 | 	add	arg03, objptr
09978     0B 01 68 FC | 	wrlong	#0, arg03
0997c     03 00 00 FF 
09980     00 E4 05 F1 | 	add	objptr, ##1536
09984     F2 20 02 FB | 	rdlong	local02, objptr
09988     10 17 02 F6 | 	mov	arg03, local02
0998c     01 16 66 F0 | 	shl	arg03, #1
09990     10 17 02 F1 | 	add	arg03, local02
09994     02 16 66 F0 | 	shl	arg03, #2
09998     03 00 00 FF 
0999c     00 E4 85 F1 | 	sub	objptr, ##1536
099a0     F2 16 02 F1 | 	add	arg03, objptr
099a4     04 16 06 F1 | 	add	arg03, #4
099a8     0B 23 62 FC | 	wrlong	local03, arg03
099ac     03 00 00 FF 
099b0     00 E4 05 F1 | 	add	objptr, ##1536
099b4     F2 22 02 FB | 	rdlong	local03, objptr
099b8     11 21 02 F6 | 	mov	local02, local03
099bc     01 20 66 F0 | 	shl	local02, #1
099c0     11 21 02 F1 | 	add	local02, local03
099c4     02 20 66 F0 | 	shl	local02, #2
099c8     03 00 00 FF 
099cc     00 E4 85 F1 | 	sub	objptr, ##1536
099d0     F2 20 02 F1 | 	add	local02, objptr
099d4     08 20 06 F1 | 	add	local02, #8
099d8     10 1F 62 FC | 	wrlong	local01, local02
099dc     03 00 00 FF 
099e0     00 E4 05 F1 | 	add	objptr, ##1536
099e4     F2 22 02 FB | 	rdlong	local03, objptr
099e8     01 22 06 F1 | 	add	local03, #1
099ec     F2 22 62 FC | 	wrlong	local03, objptr
099f0     4A 00 00 FF 
099f4     7C E4 85 F1 | 	sub	objptr, ##38012
099f8                 | LR__0856
099f8                 | ' return 0
099f8     00 FA 05 F6 | 	mov	result1, #0
099fc     A7 F0 03 F6 | 	mov	ptra, fp
09a00     B2 00 A0 FD | 	call	#popregs_
09a04                 | _compile_goto_ret
09a04     2D 00 64 FD | 	ret
09a08                 | 
09a08                 | ' 
09a08                 | ' 
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' 
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' '
09a08                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09a08                 | ' '
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' 
09a08                 | ' function expr() as ulong 
09a08                 | _expr
09a08     07 4A 05 F6 | 	mov	COUNT_, #7
09a0c     A8 00 A0 FD | 	call	#pushregs_
09a10                 | _expr_enter
09a10     37 00 00 FF 
09a14     44 E4 05 F1 | 	add	objptr, ##28228
09a18     F2 24 02 FB | 	rdlong	local04, objptr
09a1c     03 24 66 F0 | 	shl	local04, #3
09a20     02 00 00 FF 
09a24     38 E4 85 F1 | 	sub	objptr, ##1080
09a28     F2 24 02 F1 | 	add	local04, objptr
09a2c     04 24 06 F1 | 	add	local04, #4
09a30     12 27 02 FB | 	rdlong	local05, local04
09a34                 | ' 
09a34                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09a34     FE 27 0E F2 | 	cmp	local05, #510 wz
09a38     35 00 00 FF 
09a3c     0C E4 85 F1 | 	sub	objptr, ##27148
09a40     C4 00 90 5D |  if_ne	jmp	#LR__0860
09a44     1D 1E 06 F6 | 	mov	local01, #29
09a48     FF 22 06 F6 | 	mov	local03, #255
09a4c     0F 29 02 F6 | 	mov	local06, local01
09a50     10 2B 02 F6 | 	mov	local07, local02
09a54     11 1F 02 F6 | 	mov	local01, local03
09a58     4A 00 00 FF 
09a5c     7C E4 05 F1 | 	add	objptr, ##38012
09a60     F2 26 02 FB | 	rdlong	local05, objptr
09a64     13 25 02 F6 | 	mov	local04, local05
09a68     01 24 66 F0 | 	shl	local04, #1
09a6c     13 25 02 F1 | 	add	local04, local05
09a70     02 24 66 F0 | 	shl	local04, #2
09a74     03 00 00 FF 
09a78     00 E4 85 F1 | 	sub	objptr, ##1536
09a7c     F2 24 02 F1 | 	add	local04, objptr
09a80     12 29 62 FC | 	wrlong	local06, local04
09a84     03 00 00 FF 
09a88     00 E4 05 F1 | 	add	objptr, ##1536
09a8c     F2 28 02 FB | 	rdlong	local06, objptr
09a90     14 27 02 F6 | 	mov	local05, local06
09a94     01 26 66 F0 | 	shl	local05, #1
09a98     14 27 02 F1 | 	add	local05, local06
09a9c     02 26 66 F0 | 	shl	local05, #2
09aa0     03 00 00 FF 
09aa4     00 E4 85 F1 | 	sub	objptr, ##1536
09aa8     F2 26 02 F1 | 	add	local05, objptr
09aac     04 26 06 F1 | 	add	local05, #4
09ab0     13 2B 62 FC | 	wrlong	local07, local05
09ab4     03 00 00 FF 
09ab8     00 E4 05 F1 | 	add	objptr, ##1536
09abc     F2 2A 02 FB | 	rdlong	local07, objptr
09ac0     15 29 02 F6 | 	mov	local06, local07
09ac4     01 28 66 F0 | 	shl	local06, #1
09ac8     15 29 02 F1 | 	add	local06, local07
09acc     02 28 66 F0 | 	shl	local06, #2
09ad0     03 00 00 FF 
09ad4     00 E4 85 F1 | 	sub	objptr, ##1536
09ad8     F2 28 02 F1 | 	add	local06, objptr
09adc     08 28 06 F1 | 	add	local06, #8
09ae0     14 1F 62 FC | 	wrlong	local01, local06
09ae4     03 00 00 FF 
09ae8     00 E4 05 F1 | 	add	objptr, ##1536
09aec     F2 28 02 FB | 	rdlong	local06, objptr
09af0     01 28 06 F1 | 	add	local06, #1
09af4     F2 28 62 FC | 	wrlong	local06, objptr
09af8     4A 00 00 FF 
09afc     7C E4 85 F1 | 	sub	objptr, ##38012
09b00     1D FA 05 F6 | 	mov	result1, #29
09b04     64 01 90 FD | 	jmp	#LR__0863
09b08                 | LR__0860
09b08     00 1E 06 F6 | 	mov	local01, #0
09b0c     68 01 B0 FD | 	call	#_addsub
09b10                 | ' t3.result.uresult=0
09b10                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
09b10                 | ' if err>0 then return err
09b10     01 FA 15 F2 | 	cmp	result1, #1 wc
09b14     54 01 90 3D |  if_ae	jmp	#LR__0863
09b18     37 00 00 FF 
09b1c     44 E4 05 F1 | 	add	objptr, ##28228
09b20     F2 24 02 FB | 	rdlong	local04, objptr
09b24     03 24 66 F0 | 	shl	local04, #3
09b28     02 00 00 FF 
09b2c     38 E4 85 F1 | 	sub	objptr, ##1080
09b30     F2 24 02 F1 | 	add	local04, objptr
09b34     04 24 06 F1 | 	add	local04, #4
09b38     12 27 02 FB | 	rdlong	local05, local04
09b3c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
09b3c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09b3c     35 00 00 FF 
09b40     0C E4 85 F1 | 	sub	objptr, ##27148
09b44                 | LR__0861
09b44     1B 26 0E F2 | 	cmp	local05, #27 wz
09b48     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09b4c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09b50     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09b54     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09b58     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09b5c     08 01 90 5D |  if_ne	jmp	#LR__0862
09b60     37 00 00 FF 
09b64     44 E4 05 F1 | 	add	objptr, ##28228
09b68     F2 28 02 FB | 	rdlong	local06, objptr
09b6c     01 28 06 F1 | 	add	local06, #1
09b70     F2 28 62 FC | 	wrlong	local06, objptr
09b74     37 00 00 FF 
09b78     44 E4 85 F1 | 	sub	objptr, ##28228
09b7c     F8 00 B0 FD | 	call	#_addsub
09b80                 | '   ct+=1
09b80                 | '   err=addsub() : if err>0 then return err
09b80     01 FA 15 F2 | 	cmp	result1, #1 wc
09b84     E4 00 90 3D |  if_ae	jmp	#LR__0863
09b88     13 23 02 F6 | 	mov	local03, local05
09b8c     0F 29 02 F6 | 	mov	local06, local01
09b90     10 2B 02 F6 | 	mov	local07, local02
09b94     11 27 02 F6 | 	mov	local05, local03
09b98     4A 00 00 FF 
09b9c     7C E4 05 F1 | 	add	objptr, ##38012
09ba0     F2 24 02 FB | 	rdlong	local04, objptr
09ba4     12 FB 01 F6 | 	mov	result1, local04
09ba8     01 FA 65 F0 | 	shl	result1, #1
09bac     12 FB 01 F1 | 	add	result1, local04
09bb0     02 FA 65 F0 | 	shl	result1, #2
09bb4     03 00 00 FF 
09bb8     00 E4 85 F1 | 	sub	objptr, ##1536
09bbc     F2 FA 01 F1 | 	add	result1, objptr
09bc0     FD 28 62 FC | 	wrlong	local06, result1
09bc4     03 00 00 FF 
09bc8     00 E4 05 F1 | 	add	objptr, ##1536
09bcc     F2 28 02 FB | 	rdlong	local06, objptr
09bd0     14 25 02 F6 | 	mov	local04, local06
09bd4     01 24 66 F0 | 	shl	local04, #1
09bd8     14 25 02 F1 | 	add	local04, local06
09bdc     02 24 66 F0 | 	shl	local04, #2
09be0     03 00 00 FF 
09be4     00 E4 85 F1 | 	sub	objptr, ##1536
09be8     F2 24 02 F1 | 	add	local04, objptr
09bec     04 24 06 F1 | 	add	local04, #4
09bf0     12 2B 62 FC | 	wrlong	local07, local04
09bf4     03 00 00 FF 
09bf8     00 E4 05 F1 | 	add	objptr, ##1536
09bfc     F2 2A 02 FB | 	rdlong	local07, objptr
09c00     15 29 02 F6 | 	mov	local06, local07
09c04     01 28 66 F0 | 	shl	local06, #1
09c08     15 29 02 F1 | 	add	local06, local07
09c0c     02 28 66 F0 | 	shl	local06, #2
09c10     03 00 00 FF 
09c14     00 E4 85 F1 | 	sub	objptr, ##1536
09c18     F2 28 02 F1 | 	add	local06, objptr
09c1c     08 28 06 F1 | 	add	local06, #8
09c20     14 27 62 FC | 	wrlong	local05, local06
09c24     03 00 00 FF 
09c28     00 E4 05 F1 | 	add	objptr, ##1536
09c2c     F2 28 02 FB | 	rdlong	local06, objptr
09c30     01 28 06 F1 | 	add	local06, #1
09c34     F2 28 62 FC | 	wrlong	local06, objptr
09c38     13 00 00 FF 
09c3c     38 E4 85 F1 | 	sub	objptr, ##9784
09c40     F2 24 02 FB | 	rdlong	local04, objptr
09c44     03 24 66 F0 | 	shl	local04, #3
09c48     02 00 00 FF 
09c4c     38 E4 85 F1 | 	sub	objptr, ##1080
09c50     F2 24 02 F1 | 	add	local04, objptr
09c54     04 24 06 F1 | 	add	local04, #4
09c58     12 27 02 FB | 	rdlong	local05, local04
09c5c     35 00 00 FF 
09c60     0C E4 85 F1 | 	sub	objptr, ##27148
09c64     DC FE 9F FD | 	jmp	#LR__0861
09c68                 | LR__0862
09c68                 | ' return 0  
09c68     00 FA 05 F6 | 	mov	result1, #0
09c6c                 | LR__0863
09c6c     A7 F0 03 F6 | 	mov	ptra, fp
09c70     B2 00 A0 FD | 	call	#popregs_
09c74                 | _expr_ret
09c74     2D 00 64 FD | 	ret
09c78                 | 
09c78                 | ' 
09c78                 | ' ' Second level operators : add, sub, logic
09c78                 | ' 
09c78                 | ' function addsub() as ulong
09c78                 | _addsub
09c78     07 4A 05 F6 | 	mov	COUNT_, #7
09c7c     A8 00 A0 FD | 	call	#pushregs_
09c80                 | _addsub_enter
09c80     00 1E 06 F6 | 	mov	local01, #0
09c84     60 01 B0 FD | 	call	#_muldiv
09c88                 | ' 
09c88                 | ' t3.result.uresult=0
09c88                 | ' err=muldiv() : if err>0 then return err           			 
09c88     01 FA 15 F2 | 	cmp	result1, #1 wc
09c8c     4C 01 90 3D |  if_ae	jmp	#LR__0872
09c90     37 00 00 FF 
09c94     44 E4 05 F1 | 	add	objptr, ##28228
09c98     F2 24 02 FB | 	rdlong	local04, objptr
09c9c     03 24 66 F0 | 	shl	local04, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 24 02 F1 | 	add	local04, objptr
09cac     04 24 06 F1 | 	add	local04, #4
09cb0     12 27 02 FB | 	rdlong	local05, local04
09cb4                 | ' op = lparts(ct).token				 
09cb4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09cb4     35 00 00 FF 
09cb8     0C E4 85 F1 | 	sub	objptr, ##27148
09cbc                 | LR__0870
09cbc     01 26 0E F2 | 	cmp	local05, #1 wz
09cc0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09cc4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09cc8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09ccc     08 01 90 5D |  if_ne	jmp	#LR__0871
09cd0     37 00 00 FF 
09cd4     44 E4 05 F1 | 	add	objptr, ##28228
09cd8     F2 24 02 FB | 	rdlong	local04, objptr
09cdc     01 24 06 F1 | 	add	local04, #1
09ce0     F2 24 62 FC | 	wrlong	local04, objptr
09ce4     37 00 00 FF 
09ce8     44 E4 85 F1 | 	sub	objptr, ##28228
09cec     F8 00 B0 FD | 	call	#_muldiv
09cf0                 | '   ct+=1
09cf0                 | '   err=muldiv() : if err>0 then return err   
09cf0     01 FA 15 F2 | 	cmp	result1, #1 wc
09cf4     E4 00 90 3D |  if_ae	jmp	#LR__0872
09cf8     13 23 02 F6 | 	mov	local03, local05
09cfc     0F 29 02 F6 | 	mov	local06, local01
09d00     10 2B 02 F6 | 	mov	local07, local02
09d04     11 27 02 F6 | 	mov	local05, local03
09d08     4A 00 00 FF 
09d0c     7C E4 05 F1 | 	add	objptr, ##38012
09d10     F2 24 02 FB | 	rdlong	local04, objptr
09d14     12 FB 01 F6 | 	mov	result1, local04
09d18     01 FA 65 F0 | 	shl	result1, #1
09d1c     12 FB 01 F1 | 	add	result1, local04
09d20     02 FA 65 F0 | 	shl	result1, #2
09d24     03 00 00 FF 
09d28     00 E4 85 F1 | 	sub	objptr, ##1536
09d2c     F2 FA 01 F1 | 	add	result1, objptr
09d30     FD 28 62 FC | 	wrlong	local06, result1
09d34     03 00 00 FF 
09d38     00 E4 05 F1 | 	add	objptr, ##1536
09d3c     F2 28 02 FB | 	rdlong	local06, objptr
09d40     14 25 02 F6 | 	mov	local04, local06
09d44     01 24 66 F0 | 	shl	local04, #1
09d48     14 25 02 F1 | 	add	local04, local06
09d4c     02 24 66 F0 | 	shl	local04, #2
09d50     03 00 00 FF 
09d54     00 E4 85 F1 | 	sub	objptr, ##1536
09d58     F2 24 02 F1 | 	add	local04, objptr
09d5c     04 24 06 F1 | 	add	local04, #4
09d60     12 2B 62 FC | 	wrlong	local07, local04
09d64     03 00 00 FF 
09d68     00 E4 05 F1 | 	add	objptr, ##1536
09d6c     F2 2A 02 FB | 	rdlong	local07, objptr
09d70     15 29 02 F6 | 	mov	local06, local07
09d74     01 28 66 F0 | 	shl	local06, #1
09d78     15 29 02 F1 | 	add	local06, local07
09d7c     02 28 66 F0 | 	shl	local06, #2
09d80     03 00 00 FF 
09d84     00 E4 85 F1 | 	sub	objptr, ##1536
09d88     F2 28 02 F1 | 	add	local06, objptr
09d8c     08 28 06 F1 | 	add	local06, #8
09d90     14 27 62 FC | 	wrlong	local05, local06
09d94     03 00 00 FF 
09d98     00 E4 05 F1 | 	add	objptr, ##1536
09d9c     F2 28 02 FB | 	rdlong	local06, objptr
09da0     01 28 06 F1 | 	add	local06, #1
09da4     F2 28 62 FC | 	wrlong	local06, objptr
09da8     13 00 00 FF 
09dac     38 E4 85 F1 | 	sub	objptr, ##9784
09db0     F2 24 02 FB | 	rdlong	local04, objptr
09db4     03 24 66 F0 | 	shl	local04, #3
09db8     02 00 00 FF 
09dbc     38 E4 85 F1 | 	sub	objptr, ##1080
09dc0     F2 24 02 F1 | 	add	local04, objptr
09dc4     04 24 06 F1 | 	add	local04, #4
09dc8     12 27 02 FB | 	rdlong	local05, local04
09dcc     35 00 00 FF 
09dd0     0C E4 85 F1 | 	sub	objptr, ##27148
09dd4     E4 FE 9F FD | 	jmp	#LR__0870
09dd8                 | LR__0871
09dd8                 | ' return 0
09dd8     00 FA 05 F6 | 	mov	result1, #0
09ddc                 | LR__0872
09ddc     A7 F0 03 F6 | 	mov	ptra, fp
09de0     B2 00 A0 FD | 	call	#popregs_
09de4                 | _addsub_ret
09de4     2D 00 64 FD | 	ret
09de8                 | 
09de8                 | ' 
09de8                 | ' ' Third level operators : mul,div,shift,power
09de8                 | ' 
09de8                 | ' function muldiv() as ulong
09de8                 | _muldiv
09de8     07 4A 05 F6 | 	mov	COUNT_, #7
09dec     A8 00 A0 FD | 	call	#pushregs_
09df0                 | _muldiv_enter
09df0     00 1E 06 F6 | 	mov	local01, #0
09df4     6C 01 B0 FD | 	call	#_getvalue
09df8                 | ' 
09df8                 | ' t3.result.uresult=0
09df8                 | ' err=getvalue() : if err>0 then return err     
09df8     01 FA 15 F2 | 	cmp	result1, #1 wc
09dfc     58 01 90 3D |  if_ae	jmp	#LR__0882
09e00     37 00 00 FF 
09e04     44 E4 05 F1 | 	add	objptr, ##28228
09e08     F2 24 02 FB | 	rdlong	local04, objptr
09e0c     03 24 66 F0 | 	shl	local04, #3
09e10     02 00 00 FF 
09e14     38 E4 85 F1 | 	sub	objptr, ##1080
09e18     F2 24 02 F1 | 	add	local04, objptr
09e1c     04 24 06 F1 | 	add	local04, #4
09e20     12 27 02 FB | 	rdlong	local05, local04
09e24                 | ' op = lparts(ct).token
09e24                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09e24     35 00 00 FF 
09e28     0C E4 85 F1 | 	sub	objptr, ##27148
09e2c                 | LR__0880
09e2c     05 26 0E F2 | 	cmp	local05, #5 wz
09e30     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09e34     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09e38     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09e3c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09e40     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09e44     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09e48     08 01 90 5D |  if_ne	jmp	#LR__0881
09e4c     37 00 00 FF 
09e50     44 E4 05 F1 | 	add	objptr, ##28228
09e54     F2 24 02 FB | 	rdlong	local04, objptr
09e58     01 24 06 F1 | 	add	local04, #1
09e5c     F2 24 62 FC | 	wrlong	local04, objptr
09e60     37 00 00 FF 
09e64     44 E4 85 F1 | 	sub	objptr, ##28228
09e68     F8 00 B0 FD | 	call	#_getvalue
09e6c                 | '   ct+=1
09e6c                 | '   err=getvalue() :if err>0 then return err   
09e6c     01 FA 15 F2 | 	cmp	result1, #1 wc
09e70     E4 00 90 3D |  if_ae	jmp	#LR__0882
09e74     13 23 02 F6 | 	mov	local03, local05
09e78     0F 29 02 F6 | 	mov	local06, local01
09e7c     10 2B 02 F6 | 	mov	local07, local02
09e80     11 27 02 F6 | 	mov	local05, local03
09e84     4A 00 00 FF 
09e88     7C E4 05 F1 | 	add	objptr, ##38012
09e8c     F2 24 02 FB | 	rdlong	local04, objptr
09e90     12 FB 01 F6 | 	mov	result1, local04
09e94     01 FA 65 F0 | 	shl	result1, #1
09e98     12 FB 01 F1 | 	add	result1, local04
09e9c     02 FA 65 F0 | 	shl	result1, #2
09ea0     03 00 00 FF 
09ea4     00 E4 85 F1 | 	sub	objptr, ##1536
09ea8     F2 FA 01 F1 | 	add	result1, objptr
09eac     FD 28 62 FC | 	wrlong	local06, result1
09eb0     03 00 00 FF 
09eb4     00 E4 05 F1 | 	add	objptr, ##1536
09eb8     F2 28 02 FB | 	rdlong	local06, objptr
09ebc     14 25 02 F6 | 	mov	local04, local06
09ec0     01 24 66 F0 | 	shl	local04, #1
09ec4     14 25 02 F1 | 	add	local04, local06
09ec8     02 24 66 F0 | 	shl	local04, #2
09ecc     03 00 00 FF 
09ed0     00 E4 85 F1 | 	sub	objptr, ##1536
09ed4     F2 24 02 F1 | 	add	local04, objptr
09ed8     04 24 06 F1 | 	add	local04, #4
09edc     12 2B 62 FC | 	wrlong	local07, local04
09ee0     03 00 00 FF 
09ee4     00 E4 05 F1 | 	add	objptr, ##1536
09ee8     F2 2A 02 FB | 	rdlong	local07, objptr
09eec     15 29 02 F6 | 	mov	local06, local07
09ef0     01 28 66 F0 | 	shl	local06, #1
09ef4     15 29 02 F1 | 	add	local06, local07
09ef8     02 28 66 F0 | 	shl	local06, #2
09efc     03 00 00 FF 
09f00     00 E4 85 F1 | 	sub	objptr, ##1536
09f04     F2 28 02 F1 | 	add	local06, objptr
09f08     08 28 06 F1 | 	add	local06, #8
09f0c     14 27 62 FC | 	wrlong	local05, local06
09f10     03 00 00 FF 
09f14     00 E4 05 F1 | 	add	objptr, ##1536
09f18     F2 28 02 FB | 	rdlong	local06, objptr
09f1c     01 28 06 F1 | 	add	local06, #1
09f20     F2 28 62 FC | 	wrlong	local06, objptr
09f24     13 00 00 FF 
09f28     38 E4 85 F1 | 	sub	objptr, ##9784
09f2c     F2 24 02 FB | 	rdlong	local04, objptr
09f30     03 24 66 F0 | 	shl	local04, #3
09f34     02 00 00 FF 
09f38     38 E4 85 F1 | 	sub	objptr, ##1080
09f3c     F2 24 02 F1 | 	add	local04, objptr
09f40     04 24 06 F1 | 	add	local04, #4
09f44     12 27 02 FB | 	rdlong	local05, local04
09f48     35 00 00 FF 
09f4c     0C E4 85 F1 | 	sub	objptr, ##27148
09f50     D8 FE 9F FD | 	jmp	#LR__0880
09f54                 | LR__0881
09f54                 | ' return 0
09f54     00 FA 05 F6 | 	mov	result1, #0
09f58                 | LR__0882
09f58     A7 F0 03 F6 | 	mov	ptra, fp
09f5c     B2 00 A0 FD | 	call	#popregs_
09f60                 | _muldiv_ret
09f60     2D 00 64 FD | 	ret
09f64                 | 
09f64                 | ' 
09f64                 | ' ' Get a value for operations
09f64                 | ' 
09f64                 | ' function getvalue()  as ulong
09f64                 | _getvalue
09f64     0B 4A 05 F6 | 	mov	COUNT_, #11
09f68     A8 00 A0 FD | 	call	#pushregs_
09f6c                 | _getvalue_enter
09f6c     01 24 06 F6 | 	mov	local04, #1
09f70     00 1E 06 F6 | 	mov	local01, #0
09f74     1D 22 06 F6 | 	mov	local03, #29
09f78     37 00 00 FF 
09f7c     44 E4 05 F1 | 	add	objptr, ##28228
09f80     F2 16 02 FB | 	rdlong	arg03, objptr
09f84     03 16 66 F0 | 	shl	arg03, #3
09f88     02 00 00 FF 
09f8c     38 E4 85 F1 | 	sub	objptr, ##1080
09f90     F2 16 02 F1 | 	add	arg03, objptr
09f94     04 16 06 F1 | 	add	arg03, #4
09f98     0B 27 02 FB | 	rdlong	local05, arg03
09f9c                 | ' 
09f9c                 | ' m=1											' for negative numbers
09f9c                 | ' t1.result.uresult=0: t1.result_type=result_uint
09f9c                 | ' op=lparts(ct).token
09f9c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
09f9c     02 26 0E F2 | 	cmp	local05, #2 wz
09fa0     35 00 00 FF 
09fa4     0C E4 85 F1 | 	sub	objptr, ##27148
09fa8     38 00 90 5D |  if_ne	jmp	#LR__0890
09fac     01 24 66 F6 | 	neg	local04, #1
09fb0     37 00 00 FF 
09fb4     44 E4 05 F1 | 	add	objptr, ##28228
09fb8     F2 26 02 FB | 	rdlong	local05, objptr
09fbc     01 26 06 F1 | 	add	local05, #1
09fc0     F2 26 62 FC | 	wrlong	local05, objptr
09fc4     03 26 66 F0 | 	shl	local05, #3
09fc8     02 00 00 FF 
09fcc     38 E4 85 F1 | 	sub	objptr, ##1080
09fd0     F2 26 02 F1 | 	add	local05, objptr
09fd4     04 26 06 F1 | 	add	local05, #4
09fd8     13 27 02 FB | 	rdlong	local05, local05
09fdc     35 00 00 FF 
09fe0     0C E4 85 F1 | 	sub	objptr, ##27148
09fe4                 | LR__0890
09fe4                 | ' select case op
09fe4     01 00 00 FF 
09fe8     00 26 0E F2 | 	cmp	local05, ##512 wz
09fec     44 00 90 AD |  if_e	jmp	#LR__0891
09ff0     01 00 00 FF 
09ff4     01 26 0E F2 | 	cmp	local05, ##513 wz
09ff8     90 01 90 AD |  if_e	jmp	#LR__0894
09ffc     01 00 00 FF 
0a000     02 26 0E F2 | 	cmp	local05, ##514 wz
0a004     44 04 90 AD |  if_e	jmp	#LR__0901
0a008     01 00 00 FF 
0a00c     03 26 0E F2 | 	cmp	local05, ##515 wz
0a010     A8 05 90 AD |  if_e	jmp	#LR__0904
0a014     2C 26 0E F2 | 	cmp	local05, #44 wz
0a018     78 07 90 AD |  if_e	jmp	#LR__0909
0a01c     01 00 00 FF 
0a020     04 26 0E F2 | 	cmp	local05, ##516 wz
0a024     70 08 90 AD |  if_e	jmp	#LR__0910
0a028     15 26 0E F2 | 	cmp	local05, #21 wz
0a02c     98 08 90 AD |  if_e	jmp	#LR__0911
0a030     10 09 90 FD | 	jmp	#LR__0912
0a034                 | LR__0891
0a034                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a034     01 24 0E F2 | 	cmp	local04, #1 wz
0a038     3C 00 90 5D |  if_ne	jmp	#LR__0892
0a03c     37 00 00 FF 
0a040     44 E4 05 F1 | 	add	objptr, ##28228
0a044     F2 26 02 FB | 	rdlong	local05, objptr
0a048     03 26 66 F0 | 	shl	local05, #3
0a04c     02 00 00 FF 
0a050     38 E4 85 F1 | 	sub	objptr, ##1080
0a054     F2 26 02 F1 | 	add	local05, objptr
0a058     13 13 02 FB | 	rdlong	arg01, local05
0a05c     00 14 06 F6 | 	mov	arg02, #0
0a060     35 00 00 FF 
0a064     0C E4 85 F1 | 	sub	objptr, ##27148
0a068     FC 9A B1 FD | 	call	#__system____builtin_atoi
0a06c     FD 24 02 FD | 	qmul	local04, result1
0a070     18 1E 62 FD | 	getqx	local01
0a074     1C 22 06 F6 | 	mov	local03, #28
0a078                 | LR__0892
0a078                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a078     FF FF 7F FF 
0a07c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a080     3C 00 90 5D |  if_ne	jmp	#LR__0893
0a084     37 00 00 FF 
0a088     44 E4 05 F1 | 	add	objptr, ##28228
0a08c     F2 26 02 FB | 	rdlong	local05, objptr
0a090     03 26 66 F0 | 	shl	local05, #3
0a094     02 00 00 FF 
0a098     38 E4 85 F1 | 	sub	objptr, ##1080
0a09c     F2 26 02 F1 | 	add	local05, objptr
0a0a0     13 13 02 FB | 	rdlong	arg01, local05
0a0a4     00 14 06 F6 | 	mov	arg02, #0
0a0a8     35 00 00 FF 
0a0ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a0b0     B4 9A B1 FD | 	call	#__system____builtin_atoi
0a0b4     FD 24 02 FD | 	qmul	local04, result1
0a0b8     18 1E 62 FD | 	getqx	local01
0a0bc     1C 22 06 F6 | 	mov	local03, #28
0a0c0                 | LR__0893
0a0c0     0F 29 02 F6 | 	mov	local06, local01
0a0c4     10 2B 02 F6 | 	mov	local07, local02
0a0c8     11 27 02 F6 | 	mov	local05, local03
0a0cc     4A 00 00 FF 
0a0d0     7C E4 05 F1 | 	add	objptr, ##38012
0a0d4     F2 1E 02 FB | 	rdlong	local01, objptr
0a0d8     0F 25 02 F6 | 	mov	local04, local01
0a0dc     01 24 66 F0 | 	shl	local04, #1
0a0e0     0F 25 02 F1 | 	add	local04, local01
0a0e4     02 24 66 F0 | 	shl	local04, #2
0a0e8     03 00 00 FF 
0a0ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a0f0     F2 24 02 F1 | 	add	local04, objptr
0a0f4     12 29 62 FC | 	wrlong	local06, local04
0a0f8     03 00 00 FF 
0a0fc     00 E4 05 F1 | 	add	objptr, ##1536
0a100     F2 28 02 FB | 	rdlong	local06, objptr
0a104     14 1F 02 F6 | 	mov	local01, local06
0a108     01 1E 66 F0 | 	shl	local01, #1
0a10c     14 1F 02 F1 | 	add	local01, local06
0a110     02 1E 66 F0 | 	shl	local01, #2
0a114     03 00 00 FF 
0a118     00 E4 85 F1 | 	sub	objptr, ##1536
0a11c     F2 1E 02 F1 | 	add	local01, objptr
0a120     04 1E 06 F1 | 	add	local01, #4
0a124     0F 2B 62 FC | 	wrlong	local07, local01
0a128     03 00 00 FF 
0a12c     00 E4 05 F1 | 	add	objptr, ##1536
0a130     F2 2A 02 FB | 	rdlong	local07, objptr
0a134     15 29 02 F6 | 	mov	local06, local07
0a138     01 28 66 F0 | 	shl	local06, #1
0a13c     15 29 02 F1 | 	add	local06, local07
0a140     02 28 66 F0 | 	shl	local06, #2
0a144     03 00 00 FF 
0a148     00 E4 85 F1 | 	sub	objptr, ##1536
0a14c     F2 28 02 F1 | 	add	local06, objptr
0a150     08 28 06 F1 | 	add	local06, #8
0a154     14 27 62 FC | 	wrlong	local05, local06
0a158     03 00 00 FF 
0a15c     00 E4 05 F1 | 	add	objptr, ##1536
0a160     F2 28 02 FB | 	rdlong	local06, objptr
0a164     01 28 06 F1 | 	add	local06, #1
0a168     F2 28 62 FC | 	wrlong	local06, objptr
0a16c     13 00 00 FF 
0a170     38 E4 85 F1 | 	sub	objptr, ##9784
0a174     F2 28 02 FB | 	rdlong	local06, objptr
0a178     01 28 06 F1 | 	add	local06, #1
0a17c     F2 28 62 FC | 	wrlong	local06, objptr
0a180     37 00 00 FF 
0a184     44 E4 85 F1 | 	sub	objptr, ##28228
0a188     E4 07 90 FD | 	jmp	#LR__0913
0a18c                 | LR__0894
0a18c                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a18c     37 00 00 FF 
0a190     44 E4 05 F1 | 	add	objptr, ##28228
0a194     F2 16 02 FB | 	rdlong	arg03, objptr
0a198     03 16 66 F0 | 	shl	arg03, #3
0a19c     02 00 00 FF 
0a1a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a1a4     F2 16 02 F1 | 	add	arg03, objptr
0a1a8     0B 13 02 FB | 	rdlong	arg01, arg03
0a1ac     01 14 06 F6 | 	mov	arg02, #1
0a1b0     35 00 00 FF 
0a1b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a1b8     FC 87 B1 FD | 	call	#__system__Left_S
0a1bc     FD 12 02 F6 | 	mov	arg01, result1
0a1c0     84 01 00 FF 
0a1c4     31 14 06 F6 | 	mov	arg02, ##@LR__5439
0a1c8     98 67 B1 FD | 	call	#__system___string_cmp
0a1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1d0     94 00 90 5D |  if_ne	jmp	#LR__0897
0a1d4     37 00 00 FF 
0a1d8     44 E4 05 F1 | 	add	objptr, ##28228
0a1dc     F2 2A 02 FB | 	rdlong	local07, objptr
0a1e0     15 29 02 F6 | 	mov	local06, local07
0a1e4     03 28 66 F0 | 	shl	local06, #3
0a1e8     02 00 00 FF 
0a1ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a1f0     F2 28 02 F1 | 	add	local06, objptr
0a1f4     84 01 00 FF 
0a1f8     33 26 06 F6 | 	mov	local05, ##@LR__5440
0a1fc     03 2A 66 F0 | 	shl	local07, #3
0a200     F2 2A 02 F1 | 	add	local07, objptr
0a204     15 2B 02 FB | 	rdlong	local07, local07
0a208     02 00 00 FF 
0a20c     38 E4 05 F1 | 	add	objptr, ##1080
0a210     F2 1E 02 FB | 	rdlong	local01, objptr
0a214     03 1E 66 F0 | 	shl	local01, #3
0a218     02 00 00 FF 
0a21c     38 E4 85 F1 | 	sub	objptr, ##1080
0a220     F2 1E 02 F1 | 	add	local01, objptr
0a224     0F 13 02 FB | 	rdlong	arg01, local01
0a228     35 00 00 FF 
0a22c     0C E4 85 F1 | 	sub	objptr, ##27148
0a230     09 2D 02 F6 | 	mov	local08, arg01
0a234     97 06 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0a238                 | LR__0895
0a238     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a23c     01 2C 06 51 |  if_ne	add	local08, #1
0a240     F4 FF 9F 5D |  if_ne	jmp	#LR__0895
0a244                 | LR__0896
0a244     09 2D 82 F1 | 	sub	local08, arg01
0a248     16 15 02 F6 | 	mov	arg02, local08
0a24c     01 14 86 F1 | 	sub	arg02, #1
0a250     15 13 02 F6 | 	mov	arg01, local07
0a254     E8 87 B1 FD | 	call	#__system__Right_S
0a258     FD 14 02 F6 | 	mov	arg02, result1
0a25c     13 13 02 F6 | 	mov	arg01, local05
0a260     34 67 B1 FD | 	call	#__system___string_concat
0a264     14 FB 61 FC | 	wrlong	result1, local06
0a268                 | LR__0897
0a268                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a268     37 00 00 FF 
0a26c     44 E4 05 F1 | 	add	objptr, ##28228
0a270     F2 16 02 FB | 	rdlong	arg03, objptr
0a274     03 16 66 F0 | 	shl	arg03, #3
0a278     02 00 00 FF 
0a27c     38 E4 85 F1 | 	sub	objptr, ##1080
0a280     F2 16 02 F1 | 	add	arg03, objptr
0a284     0B 13 02 FB | 	rdlong	arg01, arg03
0a288     01 14 06 F6 | 	mov	arg02, #1
0a28c     35 00 00 FF 
0a290     0C E4 85 F1 | 	sub	objptr, ##27148
0a294     20 87 B1 FD | 	call	#__system__Left_S
0a298     FD 12 02 F6 | 	mov	arg01, result1
0a29c     84 01 00 FF 
0a2a0     36 14 06 F6 | 	mov	arg02, ##@LR__5441
0a2a4     BC 66 B1 FD | 	call	#__system___string_cmp
0a2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2ac     94 00 90 5D |  if_ne	jmp	#LR__0900
0a2b0     37 00 00 FF 
0a2b4     44 E4 05 F1 | 	add	objptr, ##28228
0a2b8     F2 2A 02 FB | 	rdlong	local07, objptr
0a2bc     15 29 02 F6 | 	mov	local06, local07
0a2c0     03 28 66 F0 | 	shl	local06, #3
0a2c4     02 00 00 FF 
0a2c8     38 E4 85 F1 | 	sub	objptr, ##1080
0a2cc     F2 28 02 F1 | 	add	local06, objptr
0a2d0     84 01 00 FF 
0a2d4     38 26 06 F6 | 	mov	local05, ##@LR__5442
0a2d8     03 2A 66 F0 | 	shl	local07, #3
0a2dc     F2 2A 02 F1 | 	add	local07, objptr
0a2e0     15 2B 02 FB | 	rdlong	local07, local07
0a2e4     02 00 00 FF 
0a2e8     38 E4 05 F1 | 	add	objptr, ##1080
0a2ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a2f0     03 1E 66 F0 | 	shl	local01, #3
0a2f4     02 00 00 FF 
0a2f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a2fc     F2 1E 02 F1 | 	add	local01, objptr
0a300     0F 13 02 FB | 	rdlong	arg01, local01
0a304     35 00 00 FF 
0a308     0C E4 85 F1 | 	sub	objptr, ##27148
0a30c     09 2D 02 F6 | 	mov	local08, arg01
0a310     97 06 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0a314                 | LR__0898
0a314     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a318     01 2C 06 51 |  if_ne	add	local08, #1
0a31c     F4 FF 9F 5D |  if_ne	jmp	#LR__0898
0a320                 | LR__0899
0a320     09 2D 82 F1 | 	sub	local08, arg01
0a324     16 15 02 F6 | 	mov	arg02, local08
0a328     01 14 86 F1 | 	sub	arg02, #1
0a32c     15 13 02 F6 | 	mov	arg01, local07
0a330     0C 87 B1 FD | 	call	#__system__Right_S
0a334     FD 14 02 F6 | 	mov	arg02, result1
0a338     13 13 02 F6 | 	mov	arg01, local05
0a33c     58 66 B1 FD | 	call	#__system___string_concat
0a340     14 FB 61 FC | 	wrlong	result1, local06
0a344                 | LR__0900
0a344     37 00 00 FF 
0a348     44 E4 05 F1 | 	add	objptr, ##28228
0a34c     F2 28 02 FB | 	rdlong	local06, objptr
0a350     03 28 66 F0 | 	shl	local06, #3
0a354     02 00 00 FF 
0a358     38 E4 85 F1 | 	sub	objptr, ##1080
0a35c     F2 28 02 F1 | 	add	local06, objptr
0a360     14 13 02 FB | 	rdlong	arg01, local06
0a364     00 14 06 F6 | 	mov	arg02, #0
0a368     35 00 00 FF 
0a36c     0C E4 85 F1 | 	sub	objptr, ##27148
0a370     F4 97 B1 FD | 	call	#__system____builtin_atoi
0a374     FD 24 02 FD | 	qmul	local04, result1
0a378     4A 00 00 FF 
0a37c     7C E4 05 F1 | 	add	objptr, ##38012
0a380     F2 28 02 FB | 	rdlong	local06, objptr
0a384     14 2F 02 F6 | 	mov	local09, local06
0a388     01 2E 66 F0 | 	shl	local09, #1
0a38c     14 2F 02 F1 | 	add	local09, local06
0a390     02 2E 66 F0 | 	shl	local09, #2
0a394     03 00 00 FF 
0a398     00 E4 85 F1 | 	sub	objptr, ##1536
0a39c     F2 2E 02 F1 | 	add	local09, objptr
0a3a0     03 00 00 FF 
0a3a4     00 E4 05 F1 | 	add	objptr, ##1536
0a3a8     18 1E 62 FD | 	getqx	local01
0a3ac     1C 22 06 F6 | 	mov	local03, #28
0a3b0     0F 29 02 F6 | 	mov	local06, local01
0a3b4     10 2B 02 F6 | 	mov	local07, local02
0a3b8     17 29 62 FC | 	wrlong	local06, local09
0a3bc     11 2F 02 F6 | 	mov	local09, local03
0a3c0     F2 28 02 FB | 	rdlong	local06, objptr
0a3c4     14 27 02 F6 | 	mov	local05, local06
0a3c8     01 26 66 F0 | 	shl	local05, #1
0a3cc     14 27 02 F1 | 	add	local05, local06
0a3d0     02 26 66 F0 | 	shl	local05, #2
0a3d4     03 00 00 FF 
0a3d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3dc     F2 26 02 F1 | 	add	local05, objptr
0a3e0     04 26 06 F1 | 	add	local05, #4
0a3e4     13 2B 62 FC | 	wrlong	local07, local05
0a3e8     03 00 00 FF 
0a3ec     00 E4 05 F1 | 	add	objptr, ##1536
0a3f0     F2 2A 02 FB | 	rdlong	local07, objptr
0a3f4     15 29 02 F6 | 	mov	local06, local07
0a3f8     01 28 66 F0 | 	shl	local06, #1
0a3fc     15 29 02 F1 | 	add	local06, local07
0a400     02 28 66 F0 | 	shl	local06, #2
0a404     03 00 00 FF 
0a408     00 E4 85 F1 | 	sub	objptr, ##1536
0a40c     F2 28 02 F1 | 	add	local06, objptr
0a410     08 28 06 F1 | 	add	local06, #8
0a414     14 2F 62 FC | 	wrlong	local09, local06
0a418     03 00 00 FF 
0a41c     00 E4 05 F1 | 	add	objptr, ##1536
0a420     F2 28 02 FB | 	rdlong	local06, objptr
0a424     01 28 06 F1 | 	add	local06, #1
0a428     F2 28 62 FC | 	wrlong	local06, objptr
0a42c     13 00 00 FF 
0a430     38 E4 85 F1 | 	sub	objptr, ##9784
0a434     F2 28 02 FB | 	rdlong	local06, objptr
0a438     01 28 06 F1 | 	add	local06, #1
0a43c     F2 28 62 FC | 	wrlong	local06, objptr
0a440     37 00 00 FF 
0a444     44 E4 85 F1 | 	sub	objptr, ##28228
0a448     24 05 90 FD | 	jmp	#LR__0913
0a44c                 | LR__0901
0a44c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a44c     01 24 0E F2 | 	cmp	local04, #1 wz
0a450     48 00 90 5D |  if_ne	jmp	#LR__0902
0a454     00 C0 1F FF 
0a458     00 28 06 F6 | 	mov	local06, ##1065353216
0a45c     37 00 00 FF 
0a460     44 E4 05 F1 | 	add	objptr, ##28228
0a464     F2 2E 02 FB | 	rdlong	local09, objptr
0a468     03 2E 66 F0 | 	shl	local09, #3
0a46c     02 00 00 FF 
0a470     38 E4 85 F1 | 	sub	objptr, ##1080
0a474     F2 2E 02 F1 | 	add	local09, objptr
0a478     17 13 02 FB | 	rdlong	arg01, local09
0a47c     35 00 00 FF 
0a480     0C E4 85 F1 | 	sub	objptr, ##27148
0a484     74 98 B1 FD | 	call	#__system____builtin_atof
0a488     FD 14 02 F6 | 	mov	arg02, result1
0a48c     14 13 02 F6 | 	mov	arg01, local06
0a490     5C 90 B1 FD | 	call	#__system___float_mul
0a494     FD 1E 02 F6 | 	mov	local01, result1
0a498     1E 22 06 F6 | 	mov	local03, #30
0a49c                 | LR__0902
0a49c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a49c     FF FF 7F FF 
0a4a0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a4a4     48 00 90 5D |  if_ne	jmp	#LR__0903
0a4a8     00 C0 5F FF 
0a4ac     00 28 06 F6 | 	mov	local06, ##-1082130432
0a4b0     37 00 00 FF 
0a4b4     44 E4 05 F1 | 	add	objptr, ##28228
0a4b8     F2 2E 02 FB | 	rdlong	local09, objptr
0a4bc     03 2E 66 F0 | 	shl	local09, #3
0a4c0     02 00 00 FF 
0a4c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4c8     F2 2E 02 F1 | 	add	local09, objptr
0a4cc     17 13 02 FB | 	rdlong	arg01, local09
0a4d0     35 00 00 FF 
0a4d4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4d8     20 98 B1 FD | 	call	#__system____builtin_atof
0a4dc     FD 14 02 F6 | 	mov	arg02, result1
0a4e0     14 13 02 F6 | 	mov	arg01, local06
0a4e4     08 90 B1 FD | 	call	#__system___float_mul
0a4e8     FD 1E 02 F6 | 	mov	local01, result1
0a4ec     1E 22 06 F6 | 	mov	local03, #30
0a4f0                 | LR__0903
0a4f0     0F 29 02 F6 | 	mov	local06, local01
0a4f4     10 2B 02 F6 | 	mov	local07, local02
0a4f8     11 27 02 F6 | 	mov	local05, local03
0a4fc     4A 00 00 FF 
0a500     7C E4 05 F1 | 	add	objptr, ##38012
0a504     F2 1E 02 FB | 	rdlong	local01, objptr
0a508     0F 2F 02 F6 | 	mov	local09, local01
0a50c     01 2E 66 F0 | 	shl	local09, #1
0a510     0F 2F 02 F1 | 	add	local09, local01
0a514     02 2E 66 F0 | 	shl	local09, #2
0a518     03 00 00 FF 
0a51c     00 E4 85 F1 | 	sub	objptr, ##1536
0a520     F2 2E 02 F1 | 	add	local09, objptr
0a524     17 29 62 FC | 	wrlong	local06, local09
0a528     03 00 00 FF 
0a52c     00 E4 05 F1 | 	add	objptr, ##1536
0a530     F2 2E 02 FB | 	rdlong	local09, objptr
0a534     17 29 02 F6 | 	mov	local06, local09
0a538     01 28 66 F0 | 	shl	local06, #1
0a53c     17 29 02 F1 | 	add	local06, local09
0a540     02 28 66 F0 | 	shl	local06, #2
0a544     03 00 00 FF 
0a548     00 E4 85 F1 | 	sub	objptr, ##1536
0a54c     F2 28 02 F1 | 	add	local06, objptr
0a550     04 28 06 F1 | 	add	local06, #4
0a554     14 2B 62 FC | 	wrlong	local07, local06
0a558     03 00 00 FF 
0a55c     00 E4 05 F1 | 	add	objptr, ##1536
0a560     F2 2E 02 FB | 	rdlong	local09, objptr
0a564     17 2B 02 F6 | 	mov	local07, local09
0a568     01 2A 66 F0 | 	shl	local07, #1
0a56c     17 2B 02 F1 | 	add	local07, local09
0a570     02 2A 66 F0 | 	shl	local07, #2
0a574     03 00 00 FF 
0a578     00 E4 85 F1 | 	sub	objptr, ##1536
0a57c     F2 2A 02 F1 | 	add	local07, objptr
0a580     08 2A 06 F1 | 	add	local07, #8
0a584     15 27 62 FC | 	wrlong	local05, local07
0a588     03 00 00 FF 
0a58c     00 E4 05 F1 | 	add	objptr, ##1536
0a590     F2 28 02 FB | 	rdlong	local06, objptr
0a594     01 28 06 F1 | 	add	local06, #1
0a598     F2 28 62 FC | 	wrlong	local06, objptr
0a59c     13 00 00 FF 
0a5a0     38 E4 85 F1 | 	sub	objptr, ##9784
0a5a4     F2 28 02 FB | 	rdlong	local06, objptr
0a5a8     01 28 06 F1 | 	add	local06, #1
0a5ac     F2 28 62 FC | 	wrlong	local06, objptr
0a5b0     37 00 00 FF 
0a5b4     44 E4 85 F1 | 	sub	objptr, ##28228
0a5b8     B4 03 90 FD | 	jmp	#LR__0913
0a5bc                 | LR__0904
0a5bc     37 00 00 FF 
0a5c0     44 E4 05 F1 | 	add	objptr, ##28228
0a5c4     F2 16 02 FB | 	rdlong	arg03, objptr
0a5c8     03 16 66 F0 | 	shl	arg03, #3
0a5cc     02 00 00 FF 
0a5d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a5d4     F2 16 02 F1 | 	add	arg03, objptr
0a5d8     0B 13 02 FB | 	rdlong	arg01, arg03
0a5dc     35 00 00 FF 
0a5e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a5e4     09 2D 02 F6 | 	mov	local08, arg01
0a5e8     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a5ec                 | LR__0905
0a5ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a5f0     01 2C 06 51 |  if_ne	add	local08, #1
0a5f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a5f8                 | LR__0906
0a5f8     09 2D 82 F1 | 	sub	local08, arg01
0a5fc     16 FB 01 F6 | 	mov	result1, local08
0a600     51 00 00 FF 
0a604     F4 E5 05 F1 | 	add	objptr, ##41972
0a608     F2 FA 61 FC | 	wrlong	result1, objptr
0a60c     48 E4 85 F1 | 	sub	objptr, #72
0a610     F2 12 02 FB | 	rdlong	arg01, objptr
0a614     FD 12 82 F1 | 	sub	arg01, result1
0a618     04 12 86 F1 | 	sub	arg01, #4
0a61c     03 12 26 F5 | 	andn	arg01, #3
0a620     F2 12 62 FC | 	wrlong	arg01, objptr
0a624     48 E4 05 F1 | 	add	objptr, #72
0a628     F2 14 02 FB | 	rdlong	arg02, objptr
0a62c     51 00 00 FF 
0a630     F4 E5 85 F1 | 	sub	objptr, ##41972
0a634     D8 2E B1 FD | 	call	#_pslpoke
0a638                 | '     pslpoke memtop,l
0a638                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a638     01 30 06 F6 | 	mov	local10, #1
0a63c     51 00 00 FF 
0a640     F4 E5 05 F1 | 	add	objptr, ##41972
0a644     F2 32 02 FB | 	rdlong	local11, objptr
0a648     51 00 00 FF 
0a64c     F4 E5 85 F1 | 	sub	objptr, ##41972
0a650     01 32 06 F1 | 	add	local11, #1
0a654                 | LR__0907
0a654     19 31 52 F2 | 	cmps	local10, local11 wc
0a658     5C 00 90 3D |  if_ae	jmp	#LR__0908
0a65c     51 00 00 FF 
0a660     AC E5 05 F1 | 	add	objptr, ##41900
0a664     F2 2A 02 FB | 	rdlong	local07, objptr
0a668     03 2A 06 F1 | 	add	local07, #3
0a66c     18 2B 02 F1 | 	add	local07, local10
0a670     1A 00 00 FF 
0a674     68 E5 85 F1 | 	sub	objptr, ##13672
0a678     F2 2E 02 FB | 	rdlong	local09, objptr
0a67c     03 2E 66 F0 | 	shl	local09, #3
0a680     02 00 00 FF 
0a684     38 E4 85 F1 | 	sub	objptr, ##1080
0a688     F2 2E 02 F1 | 	add	local09, objptr
0a68c     17 13 02 FB | 	rdlong	arg01, local09
0a690     18 15 02 F6 | 	mov	arg02, local10
0a694     01 16 06 F6 | 	mov	arg03, #1
0a698     35 00 00 FF 
0a69c     0C E4 85 F1 | 	sub	objptr, ##27148
0a6a0     2C 84 B1 FD | 	call	#__system__Mid_S
0a6a4     FD 14 C2 FA | 	rdbyte	arg02, result1
0a6a8     15 13 02 F6 | 	mov	arg01, local07
0a6ac     F0 2E B1 FD | 	call	#_pspoke
0a6b0     01 30 06 F1 | 	add	local10, #1
0a6b4     9C FF 9F FD | 	jmp	#LR__0907
0a6b8                 | LR__0908
0a6b8     51 00 00 FF 
0a6bc     AC E5 05 F1 | 	add	objptr, ##41900
0a6c0     F2 1E 02 FB | 	rdlong	local01, objptr
0a6c4     2B 22 06 F6 | 	mov	local03, #43
0a6c8     0F 29 02 F6 | 	mov	local06, local01
0a6cc     10 2B 02 F6 | 	mov	local07, local02
0a6d0     11 33 02 F6 | 	mov	local11, local03
0a6d4     07 00 00 FF 
0a6d8     30 E5 85 F1 | 	sub	objptr, ##3888
0a6dc     F2 30 02 FB | 	rdlong	local10, objptr
0a6e0     18 2F 02 F6 | 	mov	local09, local10
0a6e4     01 2E 66 F0 | 	shl	local09, #1
0a6e8     18 2F 02 F1 | 	add	local09, local10
0a6ec     02 2E 66 F0 | 	shl	local09, #2
0a6f0     03 00 00 FF 
0a6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f8     F2 2E 02 F1 | 	add	local09, objptr
0a6fc     17 29 62 FC | 	wrlong	local06, local09
0a700     03 00 00 FF 
0a704     00 E4 05 F1 | 	add	objptr, ##1536
0a708     F2 30 02 FB | 	rdlong	local10, objptr
0a70c     18 2F 02 F6 | 	mov	local09, local10
0a710     01 2E 66 F0 | 	shl	local09, #1
0a714     18 2F 02 F1 | 	add	local09, local10
0a718     02 2E 66 F0 | 	shl	local09, #2
0a71c     03 00 00 FF 
0a720     00 E4 85 F1 | 	sub	objptr, ##1536
0a724     F2 2E 02 F1 | 	add	local09, objptr
0a728     04 2E 06 F1 | 	add	local09, #4
0a72c     17 2B 62 FC | 	wrlong	local07, local09
0a730     03 00 00 FF 
0a734     00 E4 05 F1 | 	add	objptr, ##1536
0a738     F2 30 02 FB | 	rdlong	local10, objptr
0a73c     18 2F 02 F6 | 	mov	local09, local10
0a740     01 2E 66 F0 | 	shl	local09, #1
0a744     18 2F 02 F1 | 	add	local09, local10
0a748     02 2E 66 F0 | 	shl	local09, #2
0a74c     03 00 00 FF 
0a750     00 E4 85 F1 | 	sub	objptr, ##1536
0a754     F2 2E 02 F1 | 	add	local09, objptr
0a758     08 2E 06 F1 | 	add	local09, #8
0a75c     17 33 62 FC | 	wrlong	local11, local09
0a760     03 00 00 FF 
0a764     00 E4 05 F1 | 	add	objptr, ##1536
0a768     F2 28 02 FB | 	rdlong	local06, objptr
0a76c     01 28 06 F1 | 	add	local06, #1
0a770     F2 28 62 FC | 	wrlong	local06, objptr
0a774     13 00 00 FF 
0a778     38 E4 85 F1 | 	sub	objptr, ##9784
0a77c     F2 28 02 FB | 	rdlong	local06, objptr
0a780     01 28 06 F1 | 	add	local06, #1
0a784     F2 28 62 FC | 	wrlong	local06, objptr
0a788     37 00 00 FF 
0a78c     44 E4 85 F1 | 	sub	objptr, ##28228
0a790     DC 01 90 FD | 	jmp	#LR__0913
0a794                 | LR__0909
0a794     2C 22 06 F6 | 	mov	local03, #44
0a798     37 00 00 FF 
0a79c     44 E4 05 F1 | 	add	objptr, ##28228
0a7a0     F2 28 02 FB | 	rdlong	local06, objptr
0a7a4     03 28 66 F0 | 	shl	local06, #3
0a7a8     02 00 00 FF 
0a7ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a7b0     F2 28 02 F1 | 	add	local06, objptr
0a7b4     14 13 02 FB | 	rdlong	arg01, local06
0a7b8     00 14 06 F6 | 	mov	arg02, #0
0a7bc     35 00 00 FF 
0a7c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7c4     A0 93 B1 FD | 	call	#__system____builtin_atoi
0a7c8     FD 1E 02 F6 | 	mov	local01, result1
0a7cc     0F 29 02 F6 | 	mov	local06, local01
0a7d0     10 2B 02 F6 | 	mov	local07, local02
0a7d4     11 33 02 F6 | 	mov	local11, local03
0a7d8     4A 00 00 FF 
0a7dc     7C E4 05 F1 | 	add	objptr, ##38012
0a7e0     F2 30 02 FB | 	rdlong	local10, objptr
0a7e4     18 2F 02 F6 | 	mov	local09, local10
0a7e8     01 2E 66 F0 | 	shl	local09, #1
0a7ec     18 2F 02 F1 | 	add	local09, local10
0a7f0     02 2E 66 F0 | 	shl	local09, #2
0a7f4     03 00 00 FF 
0a7f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7fc     F2 2E 02 F1 | 	add	local09, objptr
0a800     17 29 62 FC | 	wrlong	local06, local09
0a804     03 00 00 FF 
0a808     00 E4 05 F1 | 	add	objptr, ##1536
0a80c     F2 30 02 FB | 	rdlong	local10, objptr
0a810     18 2F 02 F6 | 	mov	local09, local10
0a814     01 2E 66 F0 | 	shl	local09, #1
0a818     18 2F 02 F1 | 	add	local09, local10
0a81c     02 2E 66 F0 | 	shl	local09, #2
0a820     03 00 00 FF 
0a824     00 E4 85 F1 | 	sub	objptr, ##1536
0a828     F2 2E 02 F1 | 	add	local09, objptr
0a82c     04 2E 06 F1 | 	add	local09, #4
0a830     17 2B 62 FC | 	wrlong	local07, local09
0a834     03 00 00 FF 
0a838     00 E4 05 F1 | 	add	objptr, ##1536
0a83c     F2 30 02 FB | 	rdlong	local10, objptr
0a840     18 2F 02 F6 | 	mov	local09, local10
0a844     01 2E 66 F0 | 	shl	local09, #1
0a848     18 2F 02 F1 | 	add	local09, local10
0a84c     02 2E 66 F0 | 	shl	local09, #2
0a850     03 00 00 FF 
0a854     00 E4 85 F1 | 	sub	objptr, ##1536
0a858     F2 2E 02 F1 | 	add	local09, objptr
0a85c     08 2E 06 F1 | 	add	local09, #8
0a860     17 33 62 FC | 	wrlong	local11, local09
0a864     03 00 00 FF 
0a868     00 E4 05 F1 | 	add	objptr, ##1536
0a86c     F2 28 02 FB | 	rdlong	local06, objptr
0a870     01 28 06 F1 | 	add	local06, #1
0a874     F2 28 62 FC | 	wrlong	local06, objptr
0a878     13 00 00 FF 
0a87c     38 E4 85 F1 | 	sub	objptr, ##9784
0a880     F2 28 02 FB | 	rdlong	local06, objptr
0a884     01 28 06 F1 | 	add	local06, #1
0a888     F2 28 62 FC | 	wrlong	local06, objptr
0a88c     37 00 00 FF 
0a890     44 E4 85 F1 | 	sub	objptr, ##28228
0a894     D8 00 90 FD | 	jmp	#LR__0913
0a898                 | LR__0910
0a898     12 13 02 F6 | 	mov	arg01, local04
0a89c     24 04 B0 FD | 	call	#_getvar
0a8a0     37 00 00 FF 
0a8a4     44 E4 05 F1 | 	add	objptr, ##28228
0a8a8     F2 28 02 FB | 	rdlong	local06, objptr
0a8ac     01 28 06 F1 | 	add	local06, #1
0a8b0     F2 28 62 FC | 	wrlong	local06, objptr
0a8b4     37 00 00 FF 
0a8b8     44 E4 85 F1 | 	sub	objptr, ##28228
0a8bc                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0a8bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0a8c0     B0 00 90 3D |  if_ae	jmp	#LR__0914
0a8c4     A8 00 90 FD | 	jmp	#LR__0913
0a8c8                 | LR__0911
0a8c8     37 00 00 FF 
0a8cc     44 E4 05 F1 | 	add	objptr, ##28228
0a8d0     F2 28 02 FB | 	rdlong	local06, objptr
0a8d4     01 28 06 F1 | 	add	local06, #1
0a8d8     F2 28 62 FC | 	wrlong	local06, objptr
0a8dc     37 00 00 FF 
0a8e0     44 E4 85 F1 | 	sub	objptr, ##28228
0a8e4     20 F1 BF FD | 	call	#_expr
0a8e8                 | '     ct+=1
0a8e8                 | '     err=expr() : if err>0 then return err 
0a8e8     01 FA 55 F2 | 	cmps	result1, #1 wc
0a8ec     84 00 90 3D |  if_ae	jmp	#LR__0914
0a8f0                 | '     if lparts(ct).token=token_rpar then ct+=1
0a8f0     37 00 00 FF 
0a8f4     44 E4 05 F1 | 	add	objptr, ##28228
0a8f8     F2 32 02 FB | 	rdlong	local11, objptr
0a8fc     03 32 66 F0 | 	shl	local11, #3
0a900     02 00 00 FF 
0a904     38 E4 85 F1 | 	sub	objptr, ##1080
0a908     F2 32 02 F1 | 	add	local11, objptr
0a90c     04 32 06 F1 | 	add	local11, #4
0a910     19 33 02 FB | 	rdlong	local11, local11
0a914     14 32 0E F2 | 	cmp	local11, #20 wz
0a918     35 00 00 FF 
0a91c     0C E4 85 F1 | 	sub	objptr, ##27148
0a920     4C 00 90 5D |  if_ne	jmp	#LR__0913
0a924     37 00 00 FF 
0a928     44 E4 05 F1 | 	add	objptr, ##28228
0a92c     F2 28 02 FB | 	rdlong	local06, objptr
0a930     01 28 06 F1 | 	add	local06, #1
0a934     F2 28 62 FC | 	wrlong	local06, objptr
0a938     37 00 00 FF 
0a93c     44 E4 85 F1 | 	sub	objptr, ##28228
0a940     2C 00 90 FD | 	jmp	#LR__0913
0a944                 | LR__0912
0a944     12 13 02 F6 | 	mov	arg01, local04
0a948     34 00 B0 FD | 	call	#_getfun
0a94c     37 00 00 FF 
0a950     44 E4 05 F1 | 	add	objptr, ##28228
0a954     F2 28 02 FB | 	rdlong	local06, objptr
0a958     01 28 06 F1 | 	add	local06, #1
0a95c     F2 28 62 FC | 	wrlong	local06, objptr
0a960     37 00 00 FF 
0a964     44 E4 85 F1 | 	sub	objptr, ##28228
0a968                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0a968     01 FA 55 F2 | 	cmps	result1, #1 wc
0a96c     04 00 90 3D |  if_ae	jmp	#LR__0914
0a970                 | LR__0913
0a970                 | ' return 0  
0a970     00 FA 05 F6 | 	mov	result1, #0
0a974                 | LR__0914
0a974     A7 F0 03 F6 | 	mov	ptra, fp
0a978     B2 00 A0 FD | 	call	#popregs_
0a97c                 | _getvalue_ret
0a97c     2D 00 64 FD | 	ret
0a980                 | 
0a980                 | ' 
0a980                 | ' ' Get a function result 
0a980                 | ' 
0a980                 | ' function getfun(m as integer) as ulong
0a980                 | _getfun
0a980     0F 4A 05 F6 | 	mov	COUNT_, #15
0a984     A8 00 A0 FD | 	call	#pushregs_
0a988                 | _getfun_enter
0a988     09 25 02 F6 | 	mov	local04, arg01
0a98c     37 00 00 FF 
0a990     44 E4 05 F1 | 	add	objptr, ##28228
0a994     F2 26 02 FB | 	rdlong	local05, objptr
0a998     13 29 02 F6 | 	mov	local06, local05
0a99c     00 2A 06 F6 | 	mov	local07, #0
0a9a0                 | ' oldct=ct
0a9a0                 | ' numpar=0
0a9a0                 | ' if lparts(ct+1).token=token_lpar then
0a9a0     01 26 06 F1 | 	add	local05, #1
0a9a4     03 26 66 F0 | 	shl	local05, #3
0a9a8     02 00 00 FF 
0a9ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a9b0     F2 26 02 F1 | 	add	local05, objptr
0a9b4     04 26 06 F1 | 	add	local05, #4
0a9b8     13 27 02 FB | 	rdlong	local05, local05
0a9bc     15 26 0E F2 | 	cmp	local05, #21 wz
0a9c0     35 00 00 FF 
0a9c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a9c8     54 01 90 5D |  if_ne	jmp	#LR__0924
0a9cc     37 00 00 FF 
0a9d0     44 E4 05 F1 | 	add	objptr, ##28228
0a9d4     F2 2C 02 FB | 	rdlong	local08, objptr
0a9d8     01 2C 06 F1 | 	add	local08, #1
0a9dc     F2 2C 62 FC | 	wrlong	local08, objptr
0a9e0     37 00 00 FF 
0a9e4     44 E4 85 F1 | 	sub	objptr, ##28228
0a9e8                 | '   ct+=1 											' omit this lpar, this is for expr list
0a9e8                 | '   do
0a9e8                 | LR__0920
0a9e8     37 00 00 FF 
0a9ec     44 E4 05 F1 | 	add	objptr, ##28228
0a9f0     F2 26 02 FB | 	rdlong	local05, objptr
0a9f4     01 26 06 F1 | 	add	local05, #1
0a9f8     F2 26 62 FC | 	wrlong	local05, objptr
0a9fc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a9fc                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0a9fc     03 26 66 F0 | 	shl	local05, #3
0aa00     02 00 00 FF 
0aa04     38 E4 85 F1 | 	sub	objptr, ##1080
0aa08     F2 26 02 F1 | 	add	local05, objptr
0aa0c     04 26 06 F1 | 	add	local05, #4
0aa10     13 2D 02 FB | 	rdlong	local08, local05
0aa14     15 2C 0E F2 | 	cmp	local08, #21 wz
0aa18     35 00 00 FF 
0aa1c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa20     44 00 90 5D |  if_ne	jmp	#LR__0921
0aa24     37 00 00 FF 
0aa28     44 E4 05 F1 | 	add	objptr, ##28228
0aa2c     F2 2C 02 FB | 	rdlong	local08, objptr
0aa30     01 2C 06 F1 | 	add	local08, #1
0aa34     F2 2C 62 FC | 	wrlong	local08, objptr
0aa38     37 00 00 FF 
0aa3c     44 E4 85 F1 | 	sub	objptr, ##28228
0aa40     C4 EF BF FD | 	call	#_expr
0aa44     FD 2E 02 F6 | 	mov	local09, result1
0aa48     37 00 00 FF 
0aa4c     44 E4 05 F1 | 	add	objptr, ##28228
0aa50     F2 2C 02 FB | 	rdlong	local08, objptr
0aa54     01 2C 06 F1 | 	add	local08, #1
0aa58     F2 2C 62 FC | 	wrlong	local08, objptr
0aa5c     37 00 00 FF 
0aa60     44 E4 85 F1 | 	sub	objptr, ##28228
0aa64     08 00 90 FD | 	jmp	#LR__0922
0aa68                 | LR__0921
0aa68     9C EF BF FD | 	call	#_expr
0aa6c     FD 2E 02 F6 | 	mov	local09, result1
0aa70                 | LR__0922
0aa70                 | '     if err>0 then return err
0aa70     01 2E 16 F2 | 	cmp	local09, #1 wc
0aa74     17 FB 01 36 |  if_ae	mov	result1, local09
0aa78     3C 02 90 3D |  if_ae	jmp	#LR__0926
0aa7c     01 2A 06 F1 | 	add	local07, #1
0aa80     37 00 00 FF 
0aa84     44 E4 05 F1 | 	add	objptr, ##28228
0aa88     F2 26 02 FB | 	rdlong	local05, objptr
0aa8c     03 26 66 F0 | 	shl	local05, #3
0aa90     02 00 00 FF 
0aa94     38 E4 85 F1 | 	sub	objptr, ##1080
0aa98     F2 26 02 F1 | 	add	local05, objptr
0aa9c     04 26 06 F1 | 	add	local05, #4
0aaa0     13 2F 02 FB | 	rdlong	local09, local05
0aaa4     14 2E 0E F2 | 	cmp	local09, #20 wz
0aaa8     35 00 00 FF 
0aaac     0C E4 85 F1 | 	sub	objptr, ##27148
0aab0     34 00 90 AD |  if_e	jmp	#LR__0923
0aab4     37 00 00 FF 
0aab8     44 E4 05 F1 | 	add	objptr, ##28228
0aabc     F2 2E 02 FB | 	rdlong	local09, objptr
0aac0     03 2E 66 F0 | 	shl	local09, #3
0aac4     02 00 00 FF 
0aac8     38 E4 85 F1 | 	sub	objptr, ##1080
0aacc     F2 2E 02 F1 | 	add	local09, objptr
0aad0     04 2E 06 F1 | 	add	local09, #4
0aad4     17 2F 02 FB | 	rdlong	local09, local09
0aad8     FE 2F 0E F2 | 	cmp	local09, #510 wz
0aadc     35 00 00 FF 
0aae0     0C E4 85 F1 | 	sub	objptr, ##27148
0aae4     00 FF 9F 5D |  if_ne	jmp	#LR__0920
0aae8                 | LR__0923
0aae8                 | '   if lparts(ct).token=token_end then return 14
0aae8     37 00 00 FF 
0aaec     44 E4 05 F1 | 	add	objptr, ##28228
0aaf0     F2 26 02 FB | 	rdlong	local05, objptr
0aaf4     03 26 66 F0 | 	shl	local05, #3
0aaf8     02 00 00 FF 
0aafc     38 E4 85 F1 | 	sub	objptr, ##1080
0ab00     F2 26 02 F1 | 	add	local05, objptr
0ab04     04 26 06 F1 | 	add	local05, #4
0ab08     13 2F 02 FB | 	rdlong	local09, local05
0ab0c     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ab10     35 00 00 FF 
0ab14     0C E4 85 F1 | 	sub	objptr, ##27148
0ab18     0E FA 05 A6 |  if_e	mov	result1, #14
0ab1c     98 01 90 AD |  if_e	jmp	#LR__0926
0ab20                 | LR__0924
0ab20     15 1F 02 F6 | 	mov	local01, local07
0ab24     03 28 66 F0 | 	shl	local06, #3
0ab28     35 00 00 FF 
0ab2c     0C E4 05 F1 | 	add	objptr, ##27148
0ab30     F2 28 02 F1 | 	add	local06, objptr
0ab34     04 28 06 F1 | 	add	local06, #4
0ab38     14 23 02 FB | 	rdlong	local03, local06
0ab3c     0F 2D 02 F6 | 	mov	local08, local01
0ab40     10 31 02 F6 | 	mov	local10, local02
0ab44     11 33 02 F6 | 	mov	local11, local03
0ab48     15 00 00 FF 
0ab4c     70 E4 05 F1 | 	add	objptr, ##10864
0ab50     F2 34 02 FB | 	rdlong	local12, objptr
0ab54     1A 37 02 F6 | 	mov	local13, local12
0ab58     01 36 66 F0 | 	shl	local13, #1
0ab5c     1A 37 02 F1 | 	add	local13, local12
0ab60     02 36 66 F0 | 	shl	local13, #2
0ab64     03 00 00 FF 
0ab68     00 E4 85 F1 | 	sub	objptr, ##1536
0ab6c     F2 36 02 F1 | 	add	local13, objptr
0ab70     1B 2D 62 FC | 	wrlong	local08, local13
0ab74     03 00 00 FF 
0ab78     00 E4 05 F1 | 	add	objptr, ##1536
0ab7c     F2 2C 02 FB | 	rdlong	local08, objptr
0ab80     16 39 02 F6 | 	mov	local14, local08
0ab84     01 38 66 F0 | 	shl	local14, #1
0ab88     16 39 02 F1 | 	add	local14, local08
0ab8c     02 38 66 F0 | 	shl	local14, #2
0ab90     03 00 00 FF 
0ab94     00 E4 85 F1 | 	sub	objptr, ##1536
0ab98     F2 38 02 F1 | 	add	local14, objptr
0ab9c     04 38 06 F1 | 	add	local14, #4
0aba0     1C 31 62 FC | 	wrlong	local10, local14
0aba4     03 00 00 FF 
0aba8     00 E4 05 F1 | 	add	objptr, ##1536
0abac     F2 2C 02 FB | 	rdlong	local08, objptr
0abb0     16 3B 02 F6 | 	mov	local15, local08
0abb4     01 3A 66 F0 | 	shl	local15, #1
0abb8     16 3B 02 F1 | 	add	local15, local08
0abbc     02 3A 66 F0 | 	shl	local15, #2
0abc0     03 00 00 FF 
0abc4     00 E4 85 F1 | 	sub	objptr, ##1536
0abc8     F2 3A 02 F1 | 	add	local15, objptr
0abcc     08 3A 06 F1 | 	add	local15, #8
0abd0     1D 33 62 FC | 	wrlong	local11, local15
0abd4     03 00 00 FF 
0abd8     00 E4 05 F1 | 	add	objptr, ##1536
0abdc     F2 2C 02 FB | 	rdlong	local08, objptr
0abe0     01 2C 06 F1 | 	add	local08, #1
0abe4     F2 2C 62 FC | 	wrlong	local08, objptr
0abe8     4A 00 00 FF 
0abec     7C E4 85 F1 | 	sub	objptr, ##38012
0abf0                 | ' t2.result.uresult=numpar
0abf0                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0abf0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0abf0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0abf0     FF FF 7F FF 
0abf4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0abf8     B8 00 90 5D |  if_ne	jmp	#LR__0925
0abfc     15 22 06 F6 | 	mov	local03, #21
0ac00     0F 2D 02 F6 | 	mov	local08, local01
0ac04     10 31 02 F6 | 	mov	local10, local02
0ac08     11 33 02 F6 | 	mov	local11, local03
0ac0c     4A 00 00 FF 
0ac10     7C E4 05 F1 | 	add	objptr, ##38012
0ac14     F2 34 02 FB | 	rdlong	local12, objptr
0ac18     1A 37 02 F6 | 	mov	local13, local12
0ac1c     01 36 66 F0 | 	shl	local13, #1
0ac20     1A 37 02 F1 | 	add	local13, local12
0ac24     02 36 66 F0 | 	shl	local13, #2
0ac28     03 00 00 FF 
0ac2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac30     F2 36 02 F1 | 	add	local13, objptr
0ac34     1B 2D 62 FC | 	wrlong	local08, local13
0ac38     03 00 00 FF 
0ac3c     00 E4 05 F1 | 	add	objptr, ##1536
0ac40     F2 3A 02 FB | 	rdlong	local15, objptr
0ac44     1D 39 02 F6 | 	mov	local14, local15
0ac48     01 38 66 F0 | 	shl	local14, #1
0ac4c     1D 39 02 F1 | 	add	local14, local15
0ac50     02 38 66 F0 | 	shl	local14, #2
0ac54     03 00 00 FF 
0ac58     00 E4 85 F1 | 	sub	objptr, ##1536
0ac5c     F2 38 02 F1 | 	add	local14, objptr
0ac60     04 38 06 F1 | 	add	local14, #4
0ac64     1C 31 62 FC | 	wrlong	local10, local14
0ac68     03 00 00 FF 
0ac6c     00 E4 05 F1 | 	add	objptr, ##1536
0ac70     F2 38 02 FB | 	rdlong	local14, objptr
0ac74     1C 3B 02 F6 | 	mov	local15, local14
0ac78     01 3A 66 F0 | 	shl	local15, #1
0ac7c     1C 3B 02 F1 | 	add	local15, local14
0ac80     02 3A 66 F0 | 	shl	local15, #2
0ac84     03 00 00 FF 
0ac88     00 E4 85 F1 | 	sub	objptr, ##1536
0ac8c     F2 3A 02 F1 | 	add	local15, objptr
0ac90     08 3A 06 F1 | 	add	local15, #8
0ac94     1D 33 62 FC | 	wrlong	local11, local15
0ac98     03 00 00 FF 
0ac9c     00 E4 05 F1 | 	add	objptr, ##1536
0aca0     F2 2C 02 FB | 	rdlong	local08, objptr
0aca4     01 2C 06 F1 | 	add	local08, #1
0aca8     F2 2C 62 FC | 	wrlong	local08, objptr
0acac     4A 00 00 FF 
0acb0     7C E4 85 F1 | 	sub	objptr, ##38012
0acb4                 | LR__0925
0acb4                 | ' return 0
0acb4     00 FA 05 F6 | 	mov	result1, #0
0acb8                 | LR__0926
0acb8     A7 F0 03 F6 | 	mov	ptra, fp
0acbc     B2 00 A0 FD | 	call	#popregs_
0acc0                 | _getfun_ret
0acc0     2D 00 64 FD | 	ret
0acc4                 | 
0acc4                 | '   
0acc4                 | '   
0acc4                 | ' function getvar(m as integer) as ulong
0acc4                 | _getvar
0acc4     11 4A 05 F6 | 	mov	COUNT_, #17
0acc8     A8 00 A0 FD | 	call	#pushregs_
0accc                 | _getvar_enter
0accc     09 25 02 F6 | 	mov	local04, arg01
0acd0     37 00 00 FF 
0acd4     44 E4 05 F1 | 	add	objptr, ##28228
0acd8     F2 26 02 FB | 	rdlong	local05, objptr
0acdc     03 26 66 F0 | 	shl	local05, #3
0ace0     02 00 00 FF 
0ace4     38 E4 85 F1 | 	sub	objptr, ##1080
0ace8     F2 26 02 F1 | 	add	local05, objptr
0acec     13 29 02 FB | 	rdlong	local06, local05
0acf0     01 2A 66 F6 | 	neg	local07, #1
0acf4                 | ' 
0acf4                 | ' varname$=lparts(ct).part$
0acf4                 | ' j=-1
0acf4                 | ' 
0acf4                 | ' for i=0 to varnum-1
0acf4     00 2C 06 F6 | 	mov	local08, #0
0acf8     04 E4 85 F1 | 	sub	objptr, #4
0acfc     F2 2E 02 FB | 	rdlong	local09, objptr
0ad00     35 00 00 FF 
0ad04     08 E4 85 F1 | 	sub	objptr, ##27144
0ad08                 | LR__0930
0ad08     17 2D 52 F2 | 	cmps	local08, local09 wc
0ad0c     38 00 90 3D |  if_ae	jmp	#LR__0931
0ad10                 | '   if variables(i).name=varname$ then j=i : exit
0ad10     16 27 02 F6 | 	mov	local05, local08
0ad14     04 26 66 F0 | 	shl	local05, #4
0ad18     14 00 00 FF 
0ad1c     F8 E5 05 F1 | 	add	objptr, ##10744
0ad20     F2 26 02 F1 | 	add	local05, objptr
0ad24     13 13 02 FB | 	rdlong	arg01, local05
0ad28     14 15 02 F6 | 	mov	arg02, local06
0ad2c     14 00 00 FF 
0ad30     F8 E5 85 F1 | 	sub	objptr, ##10744
0ad34     2C 5C B1 FD | 	call	#__system___string_cmp
0ad38     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad3c     16 2B 02 A6 |  if_e	mov	local07, local08
0ad40     01 2C 06 51 |  if_ne	add	local08, #1
0ad44     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0ad48                 | LR__0931
0ad48                 | ' if  j=-1 andalso varnum<maxvars then   
0ad48     FF FF 7F FF 
0ad4c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0ad50     A8 00 90 5D |  if_ne	jmp	#LR__0932
0ad54     35 00 00 FF 
0ad58     08 E4 05 F1 | 	add	objptr, ##27144
0ad5c     F2 2E 02 FB | 	rdlong	local09, objptr
0ad60     35 00 00 FF 
0ad64     08 E4 85 F1 | 	sub	objptr, ##27144
0ad68     02 00 00 FF 
0ad6c     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0ad70     88 00 90 3D |  if_ae	jmp	#LR__0932
0ad74     35 00 00 FF 
0ad78     08 E4 05 F1 | 	add	objptr, ##27144
0ad7c     F2 26 02 FB | 	rdlong	local05, objptr
0ad80     04 26 66 F0 | 	shl	local05, #4
0ad84     20 00 00 FF 
0ad88     10 E4 85 F1 | 	sub	objptr, ##16400
0ad8c     F2 26 02 F1 | 	add	local05, objptr
0ad90     13 29 62 FC | 	wrlong	local06, local05
0ad94     20 00 00 FF 
0ad98     10 E4 05 F1 | 	add	objptr, ##16400
0ad9c     F2 26 02 FB | 	rdlong	local05, objptr
0ada0     04 26 66 F0 | 	shl	local05, #4
0ada4     20 00 00 FF 
0ada8     10 E4 85 F1 | 	sub	objptr, ##16400
0adac     F2 26 02 F1 | 	add	local05, objptr
0adb0     04 26 06 F1 | 	add	local05, #4
0adb4     13 01 68 FC | 	wrlong	#0, local05
0adb8     20 00 00 FF 
0adbc     10 E4 05 F1 | 	add	objptr, ##16400
0adc0     F2 26 02 FB | 	rdlong	local05, objptr
0adc4     04 26 66 F0 | 	shl	local05, #4
0adc8     20 00 00 FF 
0adcc     10 E4 85 F1 | 	sub	objptr, ##16400
0add0     F2 26 02 F1 | 	add	local05, objptr
0add4     0C 26 06 F1 | 	add	local05, #12
0add8     13 39 68 FC | 	wrlong	#28, local05
0addc     20 00 00 FF 
0ade0     10 E4 05 F1 | 	add	objptr, ##16400
0ade4     F2 2E 02 FB | 	rdlong	local09, objptr
0ade8     17 2B 02 F6 | 	mov	local07, local09
0adec     01 2E 06 F1 | 	add	local09, #1
0adf0     F2 2E 62 FC | 	wrlong	local09, objptr
0adf4     35 00 00 FF 
0adf8     08 E4 85 F1 | 	sub	objptr, ##27144
0adfc                 | LR__0932
0adfc     00 2E 06 F6 | 	mov	local09, #0
0ae00                 | ' numpar=0
0ae00                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0ae00     37 00 00 FF 
0ae04     44 E4 05 F1 | 	add	objptr, ##28228
0ae08     F2 26 02 FB | 	rdlong	local05, objptr
0ae0c     01 26 06 F1 | 	add	local05, #1
0ae10     03 26 66 F0 | 	shl	local05, #3
0ae14     02 00 00 FF 
0ae18     38 E4 85 F1 | 	sub	objptr, ##1080
0ae1c     F2 26 02 F1 | 	add	local05, objptr
0ae20     04 26 06 F1 | 	add	local05, #4
0ae24     13 2D 02 FB | 	rdlong	local08, local05
0ae28     15 2C 0E F2 | 	cmp	local08, #21 wz
0ae2c     35 00 00 FF 
0ae30     0C E4 85 F1 | 	sub	objptr, ##27148
0ae34     54 01 90 5D |  if_ne	jmp	#LR__0937
0ae38     37 00 00 FF 
0ae3c     44 E4 05 F1 | 	add	objptr, ##28228
0ae40     F2 30 02 FB | 	rdlong	local10, objptr
0ae44     01 30 06 F1 | 	add	local10, #1
0ae48     F2 30 62 FC | 	wrlong	local10, objptr
0ae4c     37 00 00 FF 
0ae50     44 E4 85 F1 | 	sub	objptr, ##28228
0ae54                 | '   ct+=1 											' omit this lpar, this is for expr list
0ae54                 | '   do
0ae54                 | LR__0933
0ae54     37 00 00 FF 
0ae58     44 E4 05 F1 | 	add	objptr, ##28228
0ae5c     F2 26 02 FB | 	rdlong	local05, objptr
0ae60     01 26 06 F1 | 	add	local05, #1
0ae64     F2 26 62 FC | 	wrlong	local05, objptr
0ae68                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ae68                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ae68     03 26 66 F0 | 	shl	local05, #3
0ae6c     02 00 00 FF 
0ae70     38 E4 85 F1 | 	sub	objptr, ##1080
0ae74     F2 26 02 F1 | 	add	local05, objptr
0ae78     04 26 06 F1 | 	add	local05, #4
0ae7c     13 31 02 FB | 	rdlong	local10, local05
0ae80     15 30 0E F2 | 	cmp	local10, #21 wz
0ae84     35 00 00 FF 
0ae88     0C E4 85 F1 | 	sub	objptr, ##27148
0ae8c     44 00 90 5D |  if_ne	jmp	#LR__0934
0ae90     37 00 00 FF 
0ae94     44 E4 05 F1 | 	add	objptr, ##28228
0ae98     F2 30 02 FB | 	rdlong	local10, objptr
0ae9c     01 30 06 F1 | 	add	local10, #1
0aea0     F2 30 62 FC | 	wrlong	local10, objptr
0aea4     37 00 00 FF 
0aea8     44 E4 85 F1 | 	sub	objptr, ##28228
0aeac     58 EB BF FD | 	call	#_expr
0aeb0     FD 32 02 F6 | 	mov	local11, result1
0aeb4     37 00 00 FF 
0aeb8     44 E4 05 F1 | 	add	objptr, ##28228
0aebc     F2 30 02 FB | 	rdlong	local10, objptr
0aec0     01 30 06 F1 | 	add	local10, #1
0aec4     F2 30 62 FC | 	wrlong	local10, objptr
0aec8     37 00 00 FF 
0aecc     44 E4 85 F1 | 	sub	objptr, ##28228
0aed0     08 00 90 FD | 	jmp	#LR__0935
0aed4                 | LR__0934
0aed4     30 EB BF FD | 	call	#_expr
0aed8     FD 32 02 F6 | 	mov	local11, result1
0aedc                 | LR__0935
0aedc                 | '     if err>0 then return err
0aedc     01 32 56 F2 | 	cmps	local11, #1 wc
0aee0     19 FB 01 36 |  if_ae	mov	result1, local11
0aee4     2C 02 90 3D |  if_ae	jmp	#LR__0939
0aee8     01 2E 06 F1 | 	add	local09, #1
0aeec     37 00 00 FF 
0aef0     44 E4 05 F1 | 	add	objptr, ##28228
0aef4     F2 26 02 FB | 	rdlong	local05, objptr
0aef8     03 26 66 F0 | 	shl	local05, #3
0aefc     02 00 00 FF 
0af00     38 E4 85 F1 | 	sub	objptr, ##1080
0af04     F2 26 02 F1 | 	add	local05, objptr
0af08     04 26 06 F1 | 	add	local05, #4
0af0c     13 33 02 FB | 	rdlong	local11, local05
0af10     14 32 0E F2 | 	cmp	local11, #20 wz
0af14     35 00 00 FF 
0af18     0C E4 85 F1 | 	sub	objptr, ##27148
0af1c     34 00 90 AD |  if_e	jmp	#LR__0936
0af20     37 00 00 FF 
0af24     44 E4 05 F1 | 	add	objptr, ##28228
0af28     F2 32 02 FB | 	rdlong	local11, objptr
0af2c     03 32 66 F0 | 	shl	local11, #3
0af30     02 00 00 FF 
0af34     38 E4 85 F1 | 	sub	objptr, ##1080
0af38     F2 32 02 F1 | 	add	local11, objptr
0af3c     04 32 06 F1 | 	add	local11, #4
0af40     19 33 02 FB | 	rdlong	local11, local11
0af44     FE 33 0E F2 | 	cmp	local11, #510 wz
0af48     35 00 00 FF 
0af4c     0C E4 85 F1 | 	sub	objptr, ##27148
0af50     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0af54                 | LR__0936
0af54                 | '     if lparts(ct).token=token_end then return 14
0af54     37 00 00 FF 
0af58     44 E4 05 F1 | 	add	objptr, ##28228
0af5c     F2 26 02 FB | 	rdlong	local05, objptr
0af60     03 26 66 F0 | 	shl	local05, #3
0af64     02 00 00 FF 
0af68     38 E4 85 F1 | 	sub	objptr, ##1080
0af6c     F2 26 02 F1 | 	add	local05, objptr
0af70     04 26 06 F1 | 	add	local05, #4
0af74     13 33 02 FB | 	rdlong	local11, local05
0af78     FE 33 0E F2 | 	cmp	local11, #510 wz
0af7c     35 00 00 FF 
0af80     0C E4 85 F1 | 	sub	objptr, ##27148
0af84     0E FA 05 A6 |  if_e	mov	result1, #14
0af88     88 01 90 AD |  if_e	jmp	#LR__0939
0af8c                 | LR__0937
0af8c     17 21 02 F6 | 	mov	local02, local09
0af90     11 22 06 F6 | 	mov	local03, #17
0af94     15 1F 02 F6 | 	mov	local01, local07
0af98     0F 31 02 F6 | 	mov	local10, local01
0af9c     10 35 02 F6 | 	mov	local12, local02
0afa0     11 37 02 F6 | 	mov	local13, local03
0afa4     4A 00 00 FF 
0afa8     7C E4 05 F1 | 	add	objptr, ##38012
0afac     F2 38 02 FB | 	rdlong	local14, objptr
0afb0     1C 3B 02 F6 | 	mov	local15, local14
0afb4     01 3A 66 F0 | 	shl	local15, #1
0afb8     1C 3B 02 F1 | 	add	local15, local14
0afbc     02 3A 66 F0 | 	shl	local15, #2
0afc0     03 00 00 FF 
0afc4     00 E4 85 F1 | 	sub	objptr, ##1536
0afc8     F2 3A 02 F1 | 	add	local15, objptr
0afcc     1D 31 62 FC | 	wrlong	local10, local15
0afd0     03 00 00 FF 
0afd4     00 E4 05 F1 | 	add	objptr, ##1536
0afd8     F2 30 02 FB | 	rdlong	local10, objptr
0afdc     18 3D 02 F6 | 	mov	local16, local10
0afe0     01 3C 66 F0 | 	shl	local16, #1
0afe4     18 3D 02 F1 | 	add	local16, local10
0afe8     02 3C 66 F0 | 	shl	local16, #2
0afec     03 00 00 FF 
0aff0     00 E4 85 F1 | 	sub	objptr, ##1536
0aff4     F2 3C 02 F1 | 	add	local16, objptr
0aff8     04 3C 06 F1 | 	add	local16, #4
0affc     1E 35 62 FC | 	wrlong	local12, local16
0b000     03 00 00 FF 
0b004     00 E4 05 F1 | 	add	objptr, ##1536
0b008     F2 30 02 FB | 	rdlong	local10, objptr
0b00c     18 3F 02 F6 | 	mov	local17, local10
0b010     01 3E 66 F0 | 	shl	local17, #1
0b014     18 3F 02 F1 | 	add	local17, local10
0b018     02 3E 66 F0 | 	shl	local17, #2
0b01c     03 00 00 FF 
0b020     00 E4 85 F1 | 	sub	objptr, ##1536
0b024     F2 3E 02 F1 | 	add	local17, objptr
0b028     08 3E 06 F1 | 	add	local17, #8
0b02c     1F 37 62 FC | 	wrlong	local13, local17
0b030     03 00 00 FF 
0b034     00 E4 05 F1 | 	add	objptr, ##1536
0b038     F2 30 02 FB | 	rdlong	local10, objptr
0b03c     01 30 06 F1 | 	add	local10, #1
0b040     F2 30 62 FC | 	wrlong	local10, objptr
0b044     4A 00 00 FF 
0b048     7C E4 85 F1 | 	sub	objptr, ##38012
0b04c                 | ' t2.result.twowords(1)=numpar
0b04c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b04c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b04c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b04c     FF FF 7F FF 
0b050     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b054     B8 00 90 5D |  if_ne	jmp	#LR__0938
0b058     15 22 06 F6 | 	mov	local03, #21
0b05c     0F 31 02 F6 | 	mov	local10, local01
0b060     10 35 02 F6 | 	mov	local12, local02
0b064     11 37 02 F6 | 	mov	local13, local03
0b068     4A 00 00 FF 
0b06c     7C E4 05 F1 | 	add	objptr, ##38012
0b070     F2 38 02 FB | 	rdlong	local14, objptr
0b074     1C 3B 02 F6 | 	mov	local15, local14
0b078     01 3A 66 F0 | 	shl	local15, #1
0b07c     1C 3B 02 F1 | 	add	local15, local14
0b080     02 3A 66 F0 | 	shl	local15, #2
0b084     03 00 00 FF 
0b088     00 E4 85 F1 | 	sub	objptr, ##1536
0b08c     F2 3A 02 F1 | 	add	local15, objptr
0b090     1D 31 62 FC | 	wrlong	local10, local15
0b094     03 00 00 FF 
0b098     00 E4 05 F1 | 	add	objptr, ##1536
0b09c     F2 3E 02 FB | 	rdlong	local17, objptr
0b0a0     1F 3D 02 F6 | 	mov	local16, local17
0b0a4     01 3C 66 F0 | 	shl	local16, #1
0b0a8     1F 3D 02 F1 | 	add	local16, local17
0b0ac     02 3C 66 F0 | 	shl	local16, #2
0b0b0     03 00 00 FF 
0b0b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0b8     F2 3C 02 F1 | 	add	local16, objptr
0b0bc     04 3C 06 F1 | 	add	local16, #4
0b0c0     1E 35 62 FC | 	wrlong	local12, local16
0b0c4     03 00 00 FF 
0b0c8     00 E4 05 F1 | 	add	objptr, ##1536
0b0cc     F2 3C 02 FB | 	rdlong	local16, objptr
0b0d0     1E 3F 02 F6 | 	mov	local17, local16
0b0d4     01 3E 66 F0 | 	shl	local17, #1
0b0d8     1E 3F 02 F1 | 	add	local17, local16
0b0dc     02 3E 66 F0 | 	shl	local17, #2
0b0e0     03 00 00 FF 
0b0e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0e8     F2 3E 02 F1 | 	add	local17, objptr
0b0ec     08 3E 06 F1 | 	add	local17, #8
0b0f0     1F 37 62 FC | 	wrlong	local13, local17
0b0f4     03 00 00 FF 
0b0f8     00 E4 05 F1 | 	add	objptr, ##1536
0b0fc     F2 30 02 FB | 	rdlong	local10, objptr
0b100     01 30 06 F1 | 	add	local10, #1
0b104     F2 30 62 FC | 	wrlong	local10, objptr
0b108     4A 00 00 FF 
0b10c     7C E4 85 F1 | 	sub	objptr, ##38012
0b110                 | LR__0938
0b110                 | ' return 0
0b110     00 FA 05 F6 | 	mov	result1, #0
0b114                 | LR__0939
0b114     A7 F0 03 F6 | 	mov	ptra, fp
0b118     B2 00 A0 FD | 	call	#popregs_
0b11c                 | _getvar_ret
0b11c     2D 00 64 FD | 	ret
0b120                 | 
0b120                 | ' 
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' 
0b120                 | ' 
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' '                                                                                                                                       -
0b120                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b120                 | ' '                                                                                                                                       -
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' 
0b120                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b120                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' 
0b120                 | ' function execute_line (astart=0 as integer) as integer
0b120                 | _execute_line
0b120     04 4A 05 F6 | 	mov	COUNT_, #4
0b124     A8 00 A0 FD | 	call	#pushregs_
0b128     50 00 00 FF 
0b12c     BC E4 05 F1 | 	add	objptr, ##41148
0b130     F2 00 68 FC | 	wrlong	#0, objptr
0b134                 | ' 
0b134                 | ' runptr2=0
0b134                 | ' for lineptr_e=astart to lineptr-1
0b134     06 00 00 FF 
0b138     3C E4 85 F1 | 	sub	objptr, ##3132
0b13c     F2 12 62 FC | 	wrlong	arg01, objptr
0b140     04 E4 85 F1 | 	sub	objptr, #4
0b144     F2 1E 02 FB | 	rdlong	local01, objptr
0b148     4A 00 00 FF 
0b14c     7C E4 85 F1 | 	sub	objptr, ##38012
0b150                 | LR__0940
0b150     4A 00 00 FF 
0b154     80 E4 05 F1 | 	add	objptr, ##38016
0b158     F2 FA 01 FB | 	rdlong	result1, objptr
0b15c     4A 00 00 FF 
0b160     80 E4 85 F1 | 	sub	objptr, ##38016
0b164     0F FB 51 F2 | 	cmps	result1, local01 wc
0b168     98 00 90 3D |  if_ae	jmp	#LR__0941
0b16c     4A 00 00 FF 
0b170     80 E4 05 F1 | 	add	objptr, ##38016
0b174     F2 FA 01 FB | 	rdlong	result1, objptr
0b178     FD 20 02 F6 | 	mov	local02, result1
0b17c     01 20 66 F0 | 	shl	local02, #1
0b180     FD 20 02 F1 | 	add	local02, result1
0b184     02 20 66 F0 | 	shl	local02, #2
0b188     03 00 00 FF 
0b18c     04 E4 85 F1 | 	sub	objptr, ##1540
0b190     F2 20 02 F1 | 	add	local02, objptr
0b194     08 20 06 F1 | 	add	local02, #8
0b198     10 21 02 FB | 	rdlong	local02, local02
0b19c     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b1a0     02 20 66 F0 | 	shl	local02, #2
0b1a4     04 00 00 FF 
0b1a8     1C E4 85 F1 | 	sub	objptr, ##2076
0b1ac     F2 20 02 F1 | 	add	local02, objptr
0b1b0     10 21 02 FB | 	rdlong	local02, local02
0b1b4     10 23 02 F6 | 	mov	local03, local02
0b1b8     13 20 46 F7 | 	zerox	local02, #19
0b1bc     14 22 46 F0 | 	shr	local03, #20
0b1c0     02 22 66 F0 | 	shl	local03, #2
0b1c4     ED 22 02 F1 | 	add	local03, __methods__
0b1c8     11 23 02 FB | 	rdlong	local03, local03
0b1cc     43 00 00 FF 
0b1d0     60 E4 85 F1 | 	sub	objptr, ##34400
0b1d4     F2 24 02 F6 | 	mov	local04, objptr
0b1d8     10 E5 01 F6 | 	mov	objptr, local02
0b1dc     2D 22 62 FD | 	call	local03
0b1e0     12 E5 01 F6 | 	mov	objptr, local04
0b1e4     4A 00 00 FF 
0b1e8     80 E4 05 F1 | 	add	objptr, ##38016
0b1ec     F2 24 02 FB | 	rdlong	local04, objptr
0b1f0     01 24 06 F1 | 	add	local04, #1
0b1f4     F2 24 62 FC | 	wrlong	local04, objptr
0b1f8     4A 00 00 FF 
0b1fc     80 E4 85 F1 | 	sub	objptr, ##38016
0b200     4C FF 9F FD | 	jmp	#LR__0940
0b204                 | LR__0941
0b204                 | ' return runptr2
0b204     50 00 00 FF 
0b208     BC E4 05 F1 | 	add	objptr, ##41148
0b20c     F2 FA 01 FB | 	rdlong	result1, objptr
0b210     50 00 00 FF 
0b214     BC E4 85 F1 | 	sub	objptr, ##41148
0b218     A7 F0 03 F6 | 	mov	ptra, fp
0b21c     B2 00 A0 FD | 	call	#popregs_
0b220                 | _execute_line_ret
0b220     2D 00 64 FD | 	ret
0b224                 | 
0b224                 | ' 
0b224                 | ' 
0b224                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b224                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b224                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b224                 | ' 
0b224                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b224                 | ' 
0b224                 | ' function pop() as expr_result
0b224                 | _pop
0b224                 | ' if stackpointer=0 then
0b224     43 00 00 FF 
0b228     58 E4 05 F1 | 	add	objptr, ##34392
0b22c     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b230     43 00 00 FF 
0b234     58 E4 85 F1 | 	sub	objptr, ##34392
0b238     FF 04 06 A6 |  if_e	mov	_var03, #255
0b23c     18 00 06 A6 |  if_e	mov	_var01, #24
0b240     68 00 90 AD |  if_e	jmp	#LR__0950
0b244     43 00 00 FF 
0b248     58 E4 05 F1 | 	add	objptr, ##34392
0b24c     F2 FA 01 FB | 	rdlong	result1, objptr
0b250     01 FA 85 F1 | 	sub	result1, #1
0b254     F2 FA 61 FC | 	wrlong	result1, objptr
0b258     FD FE 01 F6 | 	mov	result3, result1
0b25c     01 FE 65 F0 | 	shl	result3, #1
0b260     FD FE 01 F1 | 	add	result3, result1
0b264     02 FE 65 F0 | 	shl	result3, #2
0b268     0C 00 00 FF 
0b26c     0C E4 85 F1 | 	sub	objptr, ##6156
0b270     F2 FE 01 F1 | 	add	result3, objptr
0b274     FF 00 02 FB | 	rdlong	_var01, result3
0b278     04 FE 05 F1 | 	add	result3, #4
0b27c     FF FE 01 FB | 	rdlong	result3, result3
0b280     FD FC 01 F6 | 	mov	result2, result1
0b284     01 FC 65 F0 | 	shl	result2, #1
0b288     FD FC 01 F1 | 	add	result2, result1
0b28c     02 FC 65 F0 | 	shl	result2, #2
0b290     F2 FC 01 F1 | 	add	result2, objptr
0b294     08 FC 05 F1 | 	add	result2, #8
0b298     FE FA 01 FB | 	rdlong	result1, result2
0b29c     FF 02 02 F6 | 	mov	_var02, result3
0b2a0     FD 04 02 F6 | 	mov	_var03, result1
0b2a4     37 00 00 FF 
0b2a8     4C E4 85 F1 | 	sub	objptr, ##28236
0b2ac                 | LR__0950
0b2ac                 | ' return t1
0b2ac     01 FD 01 F6 | 	mov	result2, _var02
0b2b0     02 FF 01 F6 | 	mov	result3, _var03
0b2b4     00 FB 01 F6 | 	mov	result1, _var01
0b2b8                 | _pop_ret
0b2b8     2D 00 64 FD | 	ret
0b2bc                 | 
0b2bc                 | ' 
0b2bc                 | ' sub push(t1 as expr_result )
0b2bc                 | _push
0b2bc                 | ' if stackpointer<maxstack then 
0b2bc     43 00 00 FF 
0b2c0     58 E4 05 F1 | 	add	objptr, ##34392
0b2c4     F2 00 02 FB | 	rdlong	_var01, objptr
0b2c8     43 00 00 FF 
0b2cc     58 E4 85 F1 | 	sub	objptr, ##34392
0b2d0     01 00 00 FF 
0b2d4     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b2d8     BC 00 90 3D |  if_ae	jmp	#LR__0960
0b2dc     09 01 02 FB | 	rdlong	_var01, arg01
0b2e0     04 12 06 F1 | 	add	arg01, #4
0b2e4     09 03 02 FB | 	rdlong	_var02, arg01
0b2e8     04 12 06 F1 | 	add	arg01, #4
0b2ec     09 13 02 FB | 	rdlong	arg01, arg01
0b2f0     43 00 00 FF 
0b2f4     58 E4 05 F1 | 	add	objptr, ##34392
0b2f8     F2 04 02 FB | 	rdlong	_var03, objptr
0b2fc     02 07 02 F6 | 	mov	_var04, _var03
0b300     01 06 66 F0 | 	shl	_var04, #1
0b304     02 07 02 F1 | 	add	_var04, _var03
0b308     02 06 66 F0 | 	shl	_var04, #2
0b30c     0C 00 00 FF 
0b310     0C E4 85 F1 | 	sub	objptr, ##6156
0b314     F2 06 02 F1 | 	add	_var04, objptr
0b318     03 01 62 FC | 	wrlong	_var01, _var04
0b31c     0C 00 00 FF 
0b320     0C E4 05 F1 | 	add	objptr, ##6156
0b324     F2 06 02 FB | 	rdlong	_var04, objptr
0b328     03 05 02 F6 | 	mov	_var03, _var04
0b32c     01 04 66 F0 | 	shl	_var03, #1
0b330     03 05 02 F1 | 	add	_var03, _var04
0b334     02 04 66 F0 | 	shl	_var03, #2
0b338     0C 00 00 FF 
0b33c     0C E4 85 F1 | 	sub	objptr, ##6156
0b340     F2 04 02 F1 | 	add	_var03, objptr
0b344     04 04 06 F1 | 	add	_var03, #4
0b348     02 03 62 FC | 	wrlong	_var02, _var03
0b34c     0C 00 00 FF 
0b350     0C E4 05 F1 | 	add	objptr, ##6156
0b354     F2 06 02 FB | 	rdlong	_var04, objptr
0b358     03 05 02 F6 | 	mov	_var03, _var04
0b35c     01 04 66 F0 | 	shl	_var03, #1
0b360     03 05 02 F1 | 	add	_var03, _var04
0b364     02 04 66 F0 | 	shl	_var03, #2
0b368     0C 00 00 FF 
0b36c     0C E4 85 F1 | 	sub	objptr, ##6156
0b370     F2 04 02 F1 | 	add	_var03, objptr
0b374     08 04 06 F1 | 	add	_var03, #8
0b378     02 13 62 FC | 	wrlong	arg01, _var03
0b37c     0C 00 00 FF 
0b380     0C E4 05 F1 | 	add	objptr, ##6156
0b384     F2 00 02 FB | 	rdlong	_var01, objptr
0b388     01 00 06 F1 | 	add	_var01, #1
0b38c     F2 00 62 FC | 	wrlong	_var01, objptr
0b390     43 00 00 FF 
0b394     58 E4 85 F1 | 	sub	objptr, ##34392
0b398                 | LR__0960
0b398                 | _push_ret
0b398     2D 00 64 FD | 	ret
0b39c                 | 
0b39c                 | ' 
0b39c                 | ' ' -------------------------------- Runtime converting functions
0b39c                 | ' 
0b39c                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b39c                 | ' 
0b39c                 | ' function  convertstring(psaddr as ulong) as string
0b39c                 | _convertstring
0b39c     04 4A 05 F6 | 	mov	COUNT_, #4
0b3a0     A8 00 A0 FD | 	call	#pushregs_
0b3a4     09 1F 02 F6 | 	mov	local01, arg01
0b3a8     94 22 B1 FD | 	call	#_pslpeek
0b3ac     FD 20 02 F6 | 	mov	local02, result1
0b3b0     84 01 00 FF 
0b3b4     3B 22 06 F6 | 	mov	local03, ##@LR__5443
0b3b8                 | ' l=pslpeek(psaddr)
0b3b8                 | ' s="" 
0b3b8                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b3b8     01 24 06 F6 | 	mov	local04, #1
0b3bc     01 20 06 F1 | 	add	local02, #1
0b3c0                 | LR__0970
0b3c0     10 25 52 F2 | 	cmps	local04, local02 wc
0b3c4     30 00 90 3D |  if_ae	jmp	#LR__0971
0b3c8     0F 13 02 F6 | 	mov	arg01, local01
0b3cc     03 12 06 F1 | 	add	arg01, #3
0b3d0     12 13 02 F1 | 	add	arg01, local04
0b3d4     10 22 B1 FD | 	call	#_pspeek
0b3d8     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b3dc     9C 77 B1 FD | 	call	#__system__Chr_S
0b3e0     FD 14 02 F6 | 	mov	arg02, result1
0b3e4     11 13 02 F6 | 	mov	arg01, local03
0b3e8     AC 55 B1 FD | 	call	#__system___string_concat
0b3ec     FD 22 02 F6 | 	mov	local03, result1
0b3f0     01 24 06 F1 | 	add	local04, #1
0b3f4     C8 FF 9F FD | 	jmp	#LR__0970
0b3f8                 | LR__0971
0b3f8                 | ' return s
0b3f8     11 FB 01 F6 | 	mov	result1, local03
0b3fc     A7 F0 03 F6 | 	mov	ptra, fp
0b400     B2 00 A0 FD | 	call	#popregs_
0b404                 | _convertstring_ret
0b404     2D 00 64 FD | 	ret
0b408                 | 
0b408                 | ' 
0b408                 | ' ' converts a variable to an integer
0b408                 | ' 
0b408                 | ' function converttoint (t1 as expr_result) as integer 
0b408                 | _converttoint
0b408     02 4A 05 F6 | 	mov	COUNT_, #2
0b40c     A8 00 A0 FD | 	call	#pushregs_
0b410     09 1F 02 F6 | 	mov	local01, arg01
0b414                 | ' 
0b414                 | ' select case t1.result_type
0b414     08 1E 06 F1 | 	add	local01, #8
0b418     0F 21 02 FB | 	rdlong	local02, local01
0b41c     08 1E 86 F1 | 	sub	local01, #8
0b420     1C 20 0E F2 | 	cmp	local02, #28 wz
0b424     2C 00 90 AD |  if_e	jmp	#LR__0980
0b428     1D 20 0E F2 | 	cmp	local02, #29 wz
0b42c     2C 00 90 AD |  if_e	jmp	#LR__0981
0b430     1E 20 0E F2 | 	cmp	local02, #30 wz
0b434     2C 00 90 AD |  if_e	jmp	#LR__0982
0b438     1F 20 0E F2 | 	cmp	local02, #31 wz
0b43c     34 00 90 AD |  if_e	jmp	#LR__0983
0b440     2B 20 0E F2 | 	cmp	local02, #43 wz
0b444     44 00 90 AD |  if_e	jmp	#LR__0984
0b448     2C 20 0E F2 | 	cmp	local02, #44 wz
0b44c     5C 00 90 AD |  if_e	jmp	#LR__0985
0b450     60 00 90 FD | 	jmp	#LR__0986
0b454                 | LR__0980
0b454     0F FB 01 FB | 	rdlong	result1, local01
0b458     5C 00 90 FD | 	jmp	#LR__0987
0b45c                 | LR__0981
0b45c     0F FB 01 FB | 	rdlong	result1, local01
0b460     54 00 90 FD | 	jmp	#LR__0987
0b464                 | LR__0982
0b464     0F 13 02 FB | 	rdlong	arg01, local01
0b468     01 14 06 F6 | 	mov	arg02, #1
0b46c     48 85 B1 FD | 	call	#__system___float_tointeger
0b470     44 00 90 FD | 	jmp	#LR__0987
0b474                 | LR__0983
0b474     0F 13 02 FB | 	rdlong	arg01, local01
0b478     80 88 B1 FD | 	call	#__system____builtin_atof
0b47c     FD 12 02 F6 | 	mov	arg01, result1
0b480     01 14 06 F6 | 	mov	arg02, #1
0b484     30 85 B1 FD | 	call	#__system___float_tointeger
0b488     2C 00 90 FD | 	jmp	#LR__0987
0b48c                 | LR__0984
0b48c     0F 13 02 FB | 	rdlong	arg01, local01
0b490     08 FF BF FD | 	call	#_convertstring
0b494     FD 12 02 F6 | 	mov	arg01, result1
0b498     60 88 B1 FD | 	call	#__system____builtin_atof
0b49c     FD 12 02 F6 | 	mov	arg01, result1
0b4a0     01 14 06 F6 | 	mov	arg02, #1
0b4a4     10 85 B1 FD | 	call	#__system___float_tointeger
0b4a8     0C 00 90 FD | 	jmp	#LR__0987
0b4ac                 | LR__0985
0b4ac     0F FB 01 FB | 	rdlong	result1, local01
0b4b0     04 00 90 FD | 	jmp	#LR__0987
0b4b4                 | LR__0986
0b4b4     00 FA 05 F6 | 	mov	result1, #0
0b4b8                 | LR__0987
0b4b8     A7 F0 03 F6 | 	mov	ptra, fp
0b4bc     B2 00 A0 FD | 	call	#popregs_
0b4c0                 | _converttoint_ret
0b4c0     2D 00 64 FD | 	ret
0b4c4                 | 
0b4c4                 | ' 
0b4c4                 | ' ' converts a variable to float
0b4c4                 | ' 
0b4c4                 | ' function converttofloat (t1 as expr_result) as single
0b4c4                 | _converttofloat
0b4c4     03 4A 05 F6 | 	mov	COUNT_, #3
0b4c8     A8 00 A0 FD | 	call	#pushregs_
0b4cc     09 1F 02 F6 | 	mov	local01, arg01
0b4d0                 | ' 
0b4d0                 | ' select case t1.result_type
0b4d0     08 1E 06 F1 | 	add	local01, #8
0b4d4     0F 21 02 FB | 	rdlong	local02, local01
0b4d8     08 1E 86 F1 | 	sub	local01, #8
0b4dc     1C 20 0E F2 | 	cmp	local02, #28 wz
0b4e0     24 00 90 AD |  if_e	jmp	#LR__0990
0b4e4     1D 20 0E F2 | 	cmp	local02, #29 wz
0b4e8     38 00 90 AD |  if_e	jmp	#LR__0991
0b4ec     1E 20 0E F2 | 	cmp	local02, #30 wz
0b4f0     3C 00 90 AD |  if_e	jmp	#LR__0992
0b4f4     1F 20 0E F2 | 	cmp	local02, #31 wz
0b4f8     3C 00 90 AD |  if_e	jmp	#LR__0993
0b4fc     2B 20 0E F2 | 	cmp	local02, #43 wz
0b500     40 00 90 AD |  if_e	jmp	#LR__0994
0b504     50 00 90 FD | 	jmp	#LR__0995
0b508                 | LR__0990
0b508     0F 13 02 FB | 	rdlong	arg01, local01
0b50c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b510     1F 22 C6 C9 |  if_b	decod	local03, #31
0b514     00 22 06 36 |  if_ae	mov	local03, #0
0b518     D0 7B B1 FD | 	call	#__system___float_fromuns
0b51c     11 FB 61 F5 | 	xor	result1, local03
0b520     38 00 90 FD | 	jmp	#LR__0996
0b524                 | LR__0991
0b524     0F 13 02 FB | 	rdlong	arg01, local01
0b528     C0 7B B1 FD | 	call	#__system___float_fromuns
0b52c     2C 00 90 FD | 	jmp	#LR__0996
0b530                 | LR__0992
0b530     0F FB 01 FB | 	rdlong	result1, local01
0b534     24 00 90 FD | 	jmp	#LR__0996
0b538                 | LR__0993
0b538     0F 13 02 FB | 	rdlong	arg01, local01
0b53c     BC 87 B1 FD | 	call	#__system____builtin_atof
0b540     18 00 90 FD | 	jmp	#LR__0996
0b544                 | LR__0994
0b544     0F 13 02 FB | 	rdlong	arg01, local01
0b548     50 FE BF FD | 	call	#_convertstring
0b54c     FD 12 02 F6 | 	mov	arg01, result1
0b550     A8 87 B1 FD | 	call	#__system____builtin_atof
0b554     04 00 90 FD | 	jmp	#LR__0996
0b558                 | LR__0995
0b558     00 FA 05 F6 | 	mov	result1, #0
0b55c                 | LR__0996
0b55c     A7 F0 03 F6 | 	mov	ptra, fp
0b560     B2 00 A0 FD | 	call	#popregs_
0b564                 | _converttofloat_ret
0b564     2D 00 64 FD | 	ret
0b568                 | 
0b568                 | ' 
0b568                 | ' '----------------- End of converting 
0b568                 | ' 
0b568                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b568                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0b568                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b568                 | ' 
0b568                 | ' sub csave_block(address as ulong)
0b568                 | _csave_block
0b568     09 01 02 F6 | 	mov	_var01, arg01
0b56c                 | ' 
0b56c                 | ' for i=0 to 63 step 2
0b56c     00 02 06 F6 | 	mov	_var02, #0
0b570                 | LR__1000
0b570                 | '   do: loop until lpeek(base+64*7)>32768
0b570     37 00 00 FF 
0b574     10 E4 05 F1 | 	add	objptr, ##28176
0b578     97 0C 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0b57c                 | LR__1001
0b57c     F2 12 02 FB | 	rdlong	arg01, objptr
0b580     C0 13 06 F1 | 	add	arg01, #448
0b584     09 FB 01 FB | 	rdlong	result1, arg01
0b588     40 00 00 FF 
0b58c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b590     E8 FF 9F CD |  if_b	jmp	#LR__1001
0b594                 | LR__1002
0b594     00 13 02 F6 | 	mov	arg01, _var01
0b598     01 05 02 F6 | 	mov	_var03, _var02
0b59c     02 04 66 F0 | 	shl	_var03, #2
0b5a0     02 13 02 F1 | 	add	arg01, _var03
0b5a4     09 07 02 FB | 	rdlong	_var04, arg01
0b5a8     1A 00 00 FF 
0b5ac     FC E5 05 F1 | 	add	objptr, ##13820
0b5b0     F2 06 62 FC | 	wrlong	_var04, objptr
0b5b4     52 00 00 FF 
0b5b8     0C E4 85 F1 | 	sub	objptr, ##41996
0b5bc                 | '   q=lpeek(address+4*i)
0b5bc                 | '      for bit=0 to 31
0b5bc     00 08 06 F6 | 	mov	_var05, #0
0b5c0     97 84 48 FB | 	callpa	#(@LR__1007-@LR__1003)>>2,fcache_load_ptr_
0b5c4                 | LR__1003
0b5c4                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0b5c4     52 00 00 FF 
0b5c8     0C E4 05 F1 | 	add	objptr, ##41996
0b5cc     F2 06 02 FB | 	rdlong	_var04, objptr
0b5d0     52 00 00 FF 
0b5d4     0C E4 85 F1 | 	sub	objptr, ##41996
0b5d8     04 05 C2 F9 | 	decod	_var03, _var05
0b5dc     02 07 CA F7 | 	test	_var04, _var03 wz
0b5e0     60 00 90 AD |  if_e	jmp	#LR__1004
0b5e4     04 05 02 F6 | 	mov	_var03, _var05
0b5e8     02 04 66 F0 | 	shl	_var03, #2
0b5ec     4D 00 00 FF 
0b5f0     B4 E5 05 F1 | 	add	objptr, ##39860
0b5f4     F2 04 02 F1 | 	add	_var03, objptr
0b5f8     02 FF 48 FC | 	wrbyte	#127, _var03
0b5fc     04 05 02 F6 | 	mov	_var03, _var05
0b600     02 04 66 F0 | 	shl	_var03, #2
0b604     01 04 06 F1 | 	add	_var03, #1
0b608     F2 04 02 F1 | 	add	_var03, objptr
0b60c     02 01 49 FC | 	wrbyte	#128, _var03
0b610     04 05 02 F6 | 	mov	_var03, _var05
0b614     02 04 66 F0 | 	shl	_var03, #2
0b618     02 04 06 F1 | 	add	_var03, #2
0b61c     F2 04 02 F1 | 	add	_var03, objptr
0b620     02 FF 48 FC | 	wrbyte	#127, _var03
0b624     04 05 02 F6 | 	mov	_var03, _var05
0b628     02 04 66 F0 | 	shl	_var03, #2
0b62c     03 04 06 F1 | 	add	_var03, #3
0b630     F2 04 02 F1 | 	add	_var03, objptr
0b634     02 01 49 FC | 	wrbyte	#128, _var03
0b638     4D 00 00 FF 
0b63c     B4 E5 85 F1 | 	sub	objptr, ##39860
0b640     5C 00 90 FD | 	jmp	#LR__1005
0b644                 | LR__1004
0b644     04 05 02 F6 | 	mov	_var03, _var05
0b648     02 04 66 F0 | 	shl	_var03, #2
0b64c     4D 00 00 FF 
0b650     B4 E5 05 F1 | 	add	objptr, ##39860
0b654     F2 04 02 F1 | 	add	_var03, objptr
0b658     02 01 49 FC | 	wrbyte	#128, _var03
0b65c     04 05 02 F6 | 	mov	_var03, _var05
0b660     02 04 66 F0 | 	shl	_var03, #2
0b664     01 04 06 F1 | 	add	_var03, #1
0b668     F2 04 02 F1 | 	add	_var03, objptr
0b66c     02 01 49 FC | 	wrbyte	#128, _var03
0b670     04 05 02 F6 | 	mov	_var03, _var05
0b674     02 04 66 F0 | 	shl	_var03, #2
0b678     02 04 06 F1 | 	add	_var03, #2
0b67c     F2 04 02 F1 | 	add	_var03, objptr
0b680     02 FF 48 FC | 	wrbyte	#127, _var03
0b684     04 05 02 F6 | 	mov	_var03, _var05
0b688     02 04 66 F0 | 	shl	_var03, #2
0b68c     03 04 06 F1 | 	add	_var03, #3
0b690     F2 04 02 F1 | 	add	_var03, objptr
0b694     02 FF 48 FC | 	wrbyte	#127, _var03
0b698     4D 00 00 FF 
0b69c     B4 E5 85 F1 | 	sub	objptr, ##39860
0b6a0                 | LR__1005
0b6a0     01 08 06 F1 | 	add	_var05, #1
0b6a4     20 08 56 F2 | 	cmps	_var05, #32 wc
0b6a8     18 FF 9F CD |  if_b	jmp	#LR__1003
0b6ac                 | '   do: loop until lpeek(base+64*7)<32768
0b6ac     37 00 00 FF 
0b6b0     10 E4 05 F1 | 	add	objptr, ##28176
0b6b4                 | LR__1006
0b6b4     F2 12 02 FB | 	rdlong	arg01, objptr
0b6b8     C0 13 06 F1 | 	add	arg01, #448
0b6bc     09 FB 01 FB | 	rdlong	result1, arg01
0b6c0     40 00 00 FF 
0b6c4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b6c8     E8 FF 9F 3D |  if_ae	jmp	#LR__1006
0b6cc                 | LR__1007
0b6cc     00 13 02 F6 | 	mov	arg01, _var01
0b6d0     04 12 06 F1 | 	add	arg01, #4
0b6d4     01 05 02 F6 | 	mov	_var03, _var02
0b6d8     02 04 66 F0 | 	shl	_var03, #2
0b6dc     02 13 02 F1 | 	add	arg01, _var03
0b6e0     09 07 02 FB | 	rdlong	_var04, arg01
0b6e4     1A 00 00 FF 
0b6e8     FC E5 05 F1 | 	add	objptr, ##13820
0b6ec     F2 06 62 FC | 	wrlong	_var04, objptr
0b6f0     52 00 00 FF 
0b6f4     0C E4 85 F1 | 	sub	objptr, ##41996
0b6f8                 | '   q=lpeek(address+4+4*i)
0b6f8                 | '      for bit=0 to 31
0b6f8     00 08 06 F6 | 	mov	_var05, #0
0b6fc     97 94 48 FB | 	callpa	#(@LR__1011-@LR__1008)>>2,fcache_load_ptr_
0b700                 | LR__1008
0b700                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0b700     52 00 00 FF 
0b704     0C E4 05 F1 | 	add	objptr, ##41996
0b708     F2 06 02 FB | 	rdlong	_var04, objptr
0b70c     52 00 00 FF 
0b710     0C E4 85 F1 | 	sub	objptr, ##41996
0b714     04 05 C2 F9 | 	decod	_var03, _var05
0b718     02 07 CA F7 | 	test	_var04, _var03 wz
0b71c     80 00 90 AD |  if_e	jmp	#LR__1009
0b720     04 0B 02 F6 | 	mov	_var06, _var05
0b724     02 0A 66 F0 | 	shl	_var06, #2
0b728     80 04 06 F6 | 	mov	_var03, #128
0b72c     05 05 02 F1 | 	add	_var03, _var06
0b730     4D 00 00 FF 
0b734     B4 E5 05 F1 | 	add	objptr, ##39860
0b738     F2 04 02 F1 | 	add	_var03, objptr
0b73c     02 FF 48 FC | 	wrbyte	#127, _var03
0b740     04 0B 02 F6 | 	mov	_var06, _var05
0b744     02 0A 66 F0 | 	shl	_var06, #2
0b748     80 04 06 F6 | 	mov	_var03, #128
0b74c     05 05 02 F1 | 	add	_var03, _var06
0b750     01 04 06 F1 | 	add	_var03, #1
0b754     F2 04 02 F1 | 	add	_var03, objptr
0b758     02 01 49 FC | 	wrbyte	#128, _var03
0b75c     04 0B 02 F6 | 	mov	_var06, _var05
0b760     02 0A 66 F0 | 	shl	_var06, #2
0b764     80 04 06 F6 | 	mov	_var03, #128
0b768     05 05 02 F1 | 	add	_var03, _var06
0b76c     02 04 06 F1 | 	add	_var03, #2
0b770     F2 04 02 F1 | 	add	_var03, objptr
0b774     02 FF 48 FC | 	wrbyte	#127, _var03
0b778     04 0B 02 F6 | 	mov	_var06, _var05
0b77c     02 0A 66 F0 | 	shl	_var06, #2
0b780     80 04 06 F6 | 	mov	_var03, #128
0b784     05 05 02 F1 | 	add	_var03, _var06
0b788     03 04 06 F1 | 	add	_var03, #3
0b78c     F2 04 02 F1 | 	add	_var03, objptr
0b790     02 01 49 FC | 	wrbyte	#128, _var03
0b794     4D 00 00 FF 
0b798     B4 E5 85 F1 | 	sub	objptr, ##39860
0b79c     7C 00 90 FD | 	jmp	#LR__1010
0b7a0                 | LR__1009
0b7a0     04 0B 02 F6 | 	mov	_var06, _var05
0b7a4     02 0A 66 F0 | 	shl	_var06, #2
0b7a8     80 04 06 F6 | 	mov	_var03, #128
0b7ac     05 05 02 F1 | 	add	_var03, _var06
0b7b0     4D 00 00 FF 
0b7b4     B4 E5 05 F1 | 	add	objptr, ##39860
0b7b8     F2 04 02 F1 | 	add	_var03, objptr
0b7bc     02 01 49 FC | 	wrbyte	#128, _var03
0b7c0     04 0B 02 F6 | 	mov	_var06, _var05
0b7c4     02 0A 66 F0 | 	shl	_var06, #2
0b7c8     80 04 06 F6 | 	mov	_var03, #128
0b7cc     05 05 02 F1 | 	add	_var03, _var06
0b7d0     01 04 06 F1 | 	add	_var03, #1
0b7d4     F2 04 02 F1 | 	add	_var03, objptr
0b7d8     02 01 49 FC | 	wrbyte	#128, _var03
0b7dc     04 0B 02 F6 | 	mov	_var06, _var05
0b7e0     02 0A 66 F0 | 	shl	_var06, #2
0b7e4     80 04 06 F6 | 	mov	_var03, #128
0b7e8     05 05 02 F1 | 	add	_var03, _var06
0b7ec     02 04 06 F1 | 	add	_var03, #2
0b7f0     F2 04 02 F1 | 	add	_var03, objptr
0b7f4     02 FF 48 FC | 	wrbyte	#127, _var03
0b7f8     04 0B 02 F6 | 	mov	_var06, _var05
0b7fc     02 0A 66 F0 | 	shl	_var06, #2
0b800     80 04 06 F6 | 	mov	_var03, #128
0b804     05 05 02 F1 | 	add	_var03, _var06
0b808     03 04 06 F1 | 	add	_var03, #3
0b80c     F2 04 02 F1 | 	add	_var03, objptr
0b810     02 FF 48 FC | 	wrbyte	#127, _var03
0b814     4D 00 00 FF 
0b818     B4 E5 85 F1 | 	sub	objptr, ##39860
0b81c                 | LR__1010
0b81c     01 08 06 F1 | 	add	_var05, #1
0b820     20 08 56 F2 | 	cmps	_var05, #32 wc
0b824     D8 FE 9F CD |  if_b	jmp	#LR__1008
0b828                 | LR__1011
0b828     02 02 06 F1 | 	add	_var02, #2
0b82c     40 02 56 F2 | 	cmps	_var02, #64 wc
0b830     3C FD 9F CD |  if_b	jmp	#LR__1000
0b834                 | ' do: loop until lpeek(base+64*7)>32768
0b834     37 00 00 FF 
0b838     10 E4 05 F1 | 	add	objptr, ##28176
0b83c     97 84 48 FB | 	callpa	#(@LR__1020-@LR__1012)>>2,fcache_load_ptr_
0b840                 | LR__1012
0b840     F2 12 02 FB | 	rdlong	arg01, objptr
0b844     C0 13 06 F1 | 	add	arg01, #448
0b848     09 FB 01 FB | 	rdlong	result1, arg01
0b84c     40 00 00 FF 
0b850     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b854     E8 FF 9F CD |  if_b	jmp	#LR__1012
0b858     37 00 00 FF 
0b85c     10 E4 85 F1 | 	sub	objptr, ##28176
0b860                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b860     00 02 06 F6 | 	mov	_var02, #0
0b864                 | LR__1013
0b864     01 07 52 F6 | 	abs	_var04, _var02 wc
0b868     07 06 06 F5 | 	and	_var04, #7
0b86c     03 07 82 F6 | 	negc	_var04, _var04
0b870     04 06 56 F2 | 	cmps	_var04, #4 wc
0b874     20 00 90 3D |  if_ae	jmp	#LR__1014
0b878     01 0B 02 F6 | 	mov	_var06, _var02
0b87c     4D 00 00 FF 
0b880     B4 E5 05 F1 | 	add	objptr, ##39860
0b884     F2 0A 02 F1 | 	add	_var06, objptr
0b888     05 FF 48 FC | 	wrbyte	#127, _var06
0b88c     4D 00 00 FF 
0b890     B4 E5 85 F1 | 	sub	objptr, ##39860
0b894     1C 00 90 FD | 	jmp	#LR__1015
0b898                 | LR__1014
0b898     01 0B 02 F6 | 	mov	_var06, _var02
0b89c     4D 00 00 FF 
0b8a0     B4 E5 05 F1 | 	add	objptr, ##39860
0b8a4     F2 0A 02 F1 | 	add	_var06, objptr
0b8a8     05 01 49 FC | 	wrbyte	#128, _var06
0b8ac     4D 00 00 FF 
0b8b0     B4 E5 85 F1 | 	sub	objptr, ##39860
0b8b4                 | LR__1015
0b8b4     01 02 06 F1 | 	add	_var02, #1
0b8b8     80 02 56 F2 | 	cmps	_var02, #128 wc
0b8bc     A4 FF 9F CD |  if_b	jmp	#LR__1013
0b8c0                 | ' 
0b8c0                 | ' do: loop until lpeek(base+64*7)<32768
0b8c0     37 00 00 FF 
0b8c4     10 E4 05 F1 | 	add	objptr, ##28176
0b8c8                 | LR__1016
0b8c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b8cc     C0 13 06 F1 | 	add	arg01, #448
0b8d0     09 FB 01 FB | 	rdlong	result1, arg01
0b8d4     40 00 00 FF 
0b8d8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b8dc     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0b8e0     37 00 00 FF 
0b8e4     10 E4 85 F1 | 	sub	objptr, ##28176
0b8e8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b8e8     80 02 06 F6 | 	mov	_var02, #128
0b8ec                 | LR__1017
0b8ec     01 07 52 F6 | 	abs	_var04, _var02 wc
0b8f0     07 06 06 F5 | 	and	_var04, #7
0b8f4     03 07 82 F6 | 	negc	_var04, _var04
0b8f8     04 06 56 F2 | 	cmps	_var04, #4 wc
0b8fc     20 00 90 3D |  if_ae	jmp	#LR__1018
0b900     01 0B 02 F6 | 	mov	_var06, _var02
0b904     4D 00 00 FF 
0b908     B4 E5 05 F1 | 	add	objptr, ##39860
0b90c     F2 0A 02 F1 | 	add	_var06, objptr
0b910     05 FF 48 FC | 	wrbyte	#127, _var06
0b914     4D 00 00 FF 
0b918     B4 E5 85 F1 | 	sub	objptr, ##39860
0b91c     1C 00 90 FD | 	jmp	#LR__1019
0b920                 | LR__1018
0b920     01 0B 02 F6 | 	mov	_var06, _var02
0b924     4D 00 00 FF 
0b928     B4 E5 05 F1 | 	add	objptr, ##39860
0b92c     F2 0A 02 F1 | 	add	_var06, objptr
0b930     05 01 49 FC | 	wrbyte	#128, _var06
0b934     4D 00 00 FF 
0b938     B4 E5 85 F1 | 	sub	objptr, ##39860
0b93c                 | LR__1019
0b93c     01 02 06 F1 | 	add	_var02, #1
0b940     00 03 16 F2 | 	cmp	_var02, #256 wc
0b944     A4 FF 9F CD |  if_b	jmp	#LR__1017
0b948                 | LR__1020
0b948                 | _csave_block_ret
0b948     2D 00 64 FD | 	ret
0b94c                 | 
0b94c                 | ' 
0b94c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0b94c                 | _csave_addtoblock
0b94c     04 4A 05 F6 | 	mov	COUNT_, #4
0b950     A8 00 A0 FD | 	call	#pushregs_
0b954     09 1F 02 F6 | 	mov	local01, arg01
0b958                 | ' 
0b958                 | ' if force=0 then
0b958     07 14 4E F7 | 	zerox	arg02, #7 wz
0b95c     78 00 90 5D |  if_ne	jmp	#LR__1030
0b960     50 00 00 FF 
0b964     B4 E4 05 F1 | 	add	objptr, ##41140
0b968     F2 14 02 FB | 	rdlong	arg02, objptr
0b96c     02 00 00 FF 
0b970     00 E4 85 F1 | 	sub	objptr, ##1024
0b974     F2 14 02 F1 | 	add	arg02, objptr
0b978     0A 1F 42 FC | 	wrbyte	local01, arg02
0b97c     02 00 00 FF 
0b980     00 E4 05 F1 | 	add	objptr, ##1024
0b984     F2 1E 02 FB | 	rdlong	local01, objptr
0b988     01 1E 06 F1 | 	add	local01, #1
0b98c     F2 1E 62 FC | 	wrlong	local01, objptr
0b990                 | '   block(blockptr)=d
0b990                 | '   blockptr+=1
0b990                 | '   if blockptr>=255 then
0b990     50 00 00 FF 
0b994     B4 E4 85 F1 | 	sub	objptr, ##41140
0b998     FF 1E 16 F2 | 	cmp	local01, #255 wc
0b99c     E4 00 90 CD |  if_b	jmp	#LR__1034
0b9a0     4E 00 00 FF 
0b9a4     B4 E4 05 F1 | 	add	objptr, ##40116
0b9a8     F2 12 02 F6 | 	mov	arg01, objptr
0b9ac     4E 00 00 FF 
0b9b0     B4 E4 85 F1 | 	sub	objptr, ##40116
0b9b4     B0 FB BF FD | 	call	#_csave_block
0b9b8     50 00 00 FF 
0b9bc     B4 E4 05 F1 | 	add	objptr, ##41140
0b9c0     F2 00 68 FC | 	wrlong	#0, objptr
0b9c4     50 00 00 FF 
0b9c8     B4 E4 85 F1 | 	sub	objptr, ##41140
0b9cc     2C 13 06 F6 | 	mov	arg01, #300
0b9d0     5C 52 B1 FD | 	call	#__system___waitms
0b9d4     AC 00 90 FD | 	jmp	#LR__1034
0b9d8                 | LR__1030
0b9d8     50 00 00 FF 
0b9dc     B4 E4 05 F1 | 	add	objptr, ##41140
0b9e0     F2 20 02 FB | 	rdlong	local02, objptr
0b9e4     02 00 00 FF 
0b9e8     00 E4 85 F1 | 	sub	objptr, ##1024
0b9ec     F2 20 02 F1 | 	add	local02, objptr
0b9f0     10 1F 42 FC | 	wrbyte	local01, local02
0b9f4                 | '   block(blockptr)=d
0b9f4                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0b9f4     02 00 00 FF 
0b9f8     00 E4 05 F1 | 	add	objptr, ##1024
0b9fc     F2 22 02 FB | 	rdlong	local03, objptr
0ba00     50 00 00 FF 
0ba04     B4 E4 85 F1 | 	sub	objptr, ##41140
0ba08     FF 22 16 F2 | 	cmp	local03, #255 wc
0ba0c     40 00 90 3D |  if_ae	jmp	#LR__1033
0ba10     50 00 00 FF 
0ba14     B4 E4 05 F1 | 	add	objptr, ##41140
0ba18     F2 24 02 FB | 	rdlong	local04, objptr
0ba1c     50 00 00 FF 
0ba20     B4 E4 85 F1 | 	sub	objptr, ##41140
0ba24                 | LR__1031
0ba24     00 25 56 F2 | 	cmps	local04, #256 wc
0ba28     24 00 90 3D |  if_ae	jmp	#LR__1032
0ba2c     12 21 02 F6 | 	mov	local02, local04
0ba30     4E 00 00 FF 
0ba34     B4 E4 05 F1 | 	add	objptr, ##40116
0ba38     F2 20 02 F1 | 	add	local02, objptr
0ba3c     10 01 48 FC | 	wrbyte	#0, local02
0ba40     01 24 06 F1 | 	add	local04, #1
0ba44     4E 00 00 FF 
0ba48     B4 E4 85 F1 | 	sub	objptr, ##40116
0ba4c     D4 FF 9F FD | 	jmp	#LR__1031
0ba50                 | LR__1032
0ba50                 | LR__1033
0ba50     4E 00 00 FF 
0ba54     B4 E4 05 F1 | 	add	objptr, ##40116
0ba58     F2 12 02 F6 | 	mov	arg01, objptr
0ba5c     4E 00 00 FF 
0ba60     B4 E4 85 F1 | 	sub	objptr, ##40116
0ba64     00 FB BF FD | 	call	#_csave_block
0ba68     50 00 00 FF 
0ba6c     B4 E4 05 F1 | 	add	objptr, ##41140
0ba70     F2 00 68 FC | 	wrlong	#0, objptr
0ba74     50 00 00 FF 
0ba78     B4 E4 85 F1 | 	sub	objptr, ##41140
0ba7c     2C 13 06 F6 | 	mov	arg01, #300
0ba80     AC 51 B1 FD | 	call	#__system___waitms
0ba84                 | LR__1034
0ba84     A7 F0 03 F6 | 	mov	ptra, fp
0ba88     B2 00 A0 FD | 	call	#popregs_
0ba8c                 | _csave_addtoblock_ret
0ba8c     2D 00 64 FD | 	ret
0ba90                 | 
0ba90                 | ' 
0ba90                 | ' '----------------------- csave
0ba90                 | ' 
0ba90                 | ' sub test_csave
0ba90                 | _test_csave
0ba90     04 4A 05 F6 | 	mov	COUNT_, #4
0ba94     A8 00 A0 FD | 	call	#pushregs_
0ba98     C0 F0 07 F1 | 	add	ptra, #192
0ba9c                 | ' 'dim fileheader,savestart, saveptr as ulong
0ba9c                 | ' 
0ba9c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ba9c     4A 00 00 FF 
0baa0     88 E4 05 F1 | 	add	objptr, ##38024
0baa4     F2 12 02 FB | 	rdlong	arg01, objptr
0baa8     4A 00 00 FF 
0baac     88 E4 85 F1 | 	sub	objptr, ##38024
0bab0     8C 1B B1 FD | 	call	#_pslpeek
0bab4     FF FF 7F FF 
0bab8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0babc     0C 00 90 5D |  if_ne	jmp	#LR__1040
0bac0     1B 12 06 F6 | 	mov	arg01, #27
0bac4     E4 18 B1 FD | 	call	#_printerror
0bac8     1C 03 90 FD | 	jmp	#LR__1054
0bacc                 | LR__1040
0bacc     54 F7 BF FD | 	call	#_pop
0bad0     90 4E 05 F1 | 	add	fp, #144
0bad4     A7 FA 61 FC | 	wrlong	result1, fp
0bad8     04 4E 05 F1 | 	add	fp, #4
0badc     A7 FC 61 FC | 	wrlong	result2, fp
0bae0     04 4E 05 F1 | 	add	fp, #4
0bae4     A7 FE 61 FC | 	wrlong	result3, fp
0bae8                 | ' t1=pop()
0bae8                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0bae8     98 4E 85 F1 | 	sub	fp, #152
0baec     1F FE 0D F2 | 	cmp	result3, #31 wz
0baf0     24 00 90 AD |  if_e	jmp	#LR__1041
0baf4     51 00 00 FF 
0baf8     D8 E5 05 F1 | 	add	objptr, ##41944
0bafc     F2 1C 02 FB | 	rdlong	arg06, objptr
0bb00     51 00 00 FF 
0bb04     D8 E5 85 F1 | 	sub	objptr, ##41944
0bb08     8C 4E 05 F1 | 	add	fp, #140
0bb0c     A7 1C 62 FC | 	wrlong	arg06, fp
0bb10     8C 4E 85 F1 | 	sub	fp, #140
0bb14     14 00 90 FD | 	jmp	#LR__1042
0bb18                 | LR__1041
0bb18     90 4E 05 F1 | 	add	fp, #144
0bb1c     A7 1C 02 FB | 	rdlong	arg06, fp
0bb20     04 4E 85 F1 | 	sub	fp, #4
0bb24     A7 1C 62 FC | 	wrlong	arg06, fp
0bb28     8C 4E 85 F1 | 	sub	fp, #140
0bb2c                 | LR__1042
0bb2c                 | ' 
0bb2c                 | ' ' prepare 1 kHz header wave
0bb2c                 | ' 
0bb2c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bb2c     A7 00 68 FC | 	wrlong	#0, fp
0bb30     97 34 48 FB | 	callpa	#(@LR__1046-@LR__1043)>>2,fcache_load_ptr_
0bb34                 | LR__1043
0bb34     A7 1C 02 FB | 	rdlong	arg06, fp
0bb38     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0bb3c     07 1A 06 F5 | 	and	arg05, #7
0bb40     0D 1B 82 F6 | 	negc	arg05, arg05
0bb44     04 1A 56 F2 | 	cmps	arg05, #4 wc
0bb48     20 00 90 3D |  if_ae	jmp	#LR__1044
0bb4c     A7 1A 02 FB | 	rdlong	arg05, fp
0bb50     4D 00 00 FF 
0bb54     B4 E5 05 F1 | 	add	objptr, ##39860
0bb58     F2 1A 02 F1 | 	add	arg05, objptr
0bb5c     0D FF 48 FC | 	wrbyte	#127, arg05
0bb60     4D 00 00 FF 
0bb64     B4 E5 85 F1 | 	sub	objptr, ##39860
0bb68     1C 00 90 FD | 	jmp	#LR__1045
0bb6c                 | LR__1044
0bb6c     A7 1A 02 FB | 	rdlong	arg05, fp
0bb70     4D 00 00 FF 
0bb74     B4 E5 05 F1 | 	add	objptr, ##39860
0bb78     F2 1A 02 F1 | 	add	arg05, objptr
0bb7c     0D 01 49 FC | 	wrbyte	#128, arg05
0bb80     4D 00 00 FF 
0bb84     B4 E5 85 F1 | 	sub	objptr, ##39860
0bb88                 | LR__1045
0bb88     A7 1A 02 FB | 	rdlong	arg05, fp
0bb8c     01 1A 06 F1 | 	add	arg05, #1
0bb90     A7 1A 62 FC | 	wrlong	arg05, fp
0bb94     00 1B 56 F2 | 	cmps	arg05, #256 wc
0bb98     98 FF 9F CD |  if_b	jmp	#LR__1043
0bb9c                 | LR__1046
0bb9c     4D 00 00 FF 
0bba0     B4 E5 05 F1 | 	add	objptr, ##39860
0bba4     F2 14 02 F6 | 	mov	arg02, objptr
0bba8     07 12 06 F6 | 	mov	arg01, #7
0bbac     0F 00 00 FF 
0bbb0     40 17 06 F6 | 	mov	arg03, ##8000
0bbb4     0E 18 C6 F9 | 	decod	arg04, #14
0bbb8     00 1B 06 F6 | 	mov	arg05, #256
0bbbc     00 1C 06 F6 | 	mov	arg06, #0
0bbc0     42 00 00 FF 
0bbc4     E8 E4 85 F1 | 	sub	objptr, ##34024
0bbc8     CC 49 B1 FD | 	call	#_audio096_spin2_play8
0bbcc     0B 00 00 FF 
0bbd0     CC E4 85 F1 | 	sub	objptr, ##5836
0bbd4     05 00 00 FF 
0bbd8     B8 13 06 F6 | 	mov	arg01, ##3000
0bbdc     50 50 B1 FD | 	call	#__system___waitms
0bbe0     50 00 00 FF 
0bbe4     B4 E4 05 F1 | 	add	objptr, ##41140
0bbe8     F2 00 68 FC | 	wrlong	#0, objptr
0bbec     50 00 00 FF 
0bbf0     B4 E4 85 F1 | 	sub	objptr, ##41140
0bbf4     72 12 06 F6 | 	mov	arg01, #114
0bbf8     00 14 06 F6 | 	mov	arg02, #0
0bbfc     4C FD BF FD | 	call	#_csave_addtoblock
0bc00     62 12 06 F6 | 	mov	arg01, #98
0bc04     00 14 06 F6 | 	mov	arg02, #0
0bc08     40 FD BF FD | 	call	#_csave_addtoblock
0bc0c     61 12 06 F6 | 	mov	arg01, #97
0bc10     00 14 06 F6 | 	mov	arg02, #0
0bc14     34 FD BF FD | 	call	#_csave_addtoblock
0bc18     0D 12 06 F6 | 	mov	arg01, #13
0bc1c     00 14 06 F6 | 	mov	arg02, #0
0bc20     28 FD BF FD | 	call	#_csave_addtoblock
0bc24                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0bc24                 | ' waitms 3000 
0bc24                 | ' 
0bc24                 | ' blockptr=0
0bc24                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0bc24                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0bc24     A7 02 68 FC | 	wrlong	#1, fp
0bc28     8C 4E 05 F1 | 	add	fp, #140
0bc2c     A7 12 02 FB | 	rdlong	arg01, fp
0bc30     8C 4E 85 F1 | 	sub	fp, #140
0bc34     09 1F 02 F6 | 	mov	local01, arg01
0bc38     97 06 48 FB | 	callpa	#(@LR__1048-@LR__1047)>>2,fcache_load_ptr_
0bc3c                 | LR__1047
0bc3c     0F FB C9 FA | 	rdbyte	result1, local01 wz
0bc40     01 1E 06 51 |  if_ne	add	local01, #1
0bc44     F4 FF 9F 5D |  if_ne	jmp	#LR__1047
0bc48                 | LR__1048
0bc48     09 1F 82 F1 | 	sub	local01, arg01
0bc4c     0F 21 02 F6 | 	mov	local02, local01
0bc50     01 20 06 F1 | 	add	local02, #1
0bc54                 | LR__1049
0bc54     A7 1A 02 FB | 	rdlong	arg05, fp
0bc58     10 1B 52 F2 | 	cmps	arg05, local02 wc
0bc5c     34 00 90 3D |  if_ae	jmp	#LR__1050
0bc60     8C 4E 05 F1 | 	add	fp, #140
0bc64     A7 12 02 FB | 	rdlong	arg01, fp
0bc68     8C 4E 85 F1 | 	sub	fp, #140
0bc6c     A7 14 02 FB | 	rdlong	arg02, fp
0bc70     01 16 06 F6 | 	mov	arg03, #1
0bc74     58 6E B1 FD | 	call	#__system__Mid_S
0bc78     FD 12 C2 FA | 	rdbyte	arg01, result1
0bc7c     00 14 06 F6 | 	mov	arg02, #0
0bc80     C8 FC BF FD | 	call	#_csave_addtoblock
0bc84     A7 1A 02 FB | 	rdlong	arg05, fp
0bc88     01 1A 06 F1 | 	add	arg05, #1
0bc8c     A7 1A 62 FC | 	wrlong	arg05, fp
0bc90     C0 FF 9F FD | 	jmp	#LR__1049
0bc94                 | LR__1050
0bc94     00 12 06 F6 | 	mov	arg01, #0
0bc98     00 14 06 F6 | 	mov	arg02, #0
0bc9c     AC FC BF FD | 	call	#_csave_addtoblock
0bca0     72 12 06 F6 | 	mov	arg01, #114
0bca4     00 14 06 F6 | 	mov	arg02, #0
0bca8     A0 FC BF FD | 	call	#_csave_addtoblock
0bcac     62 12 06 F6 | 	mov	arg01, #98
0bcb0     00 14 06 F6 | 	mov	arg02, #0
0bcb4     94 FC BF FD | 	call	#_csave_addtoblock
0bcb8     73 12 06 F6 | 	mov	arg01, #115
0bcbc     00 14 06 F6 | 	mov	arg02, #0
0bcc0     88 FC BF FD | 	call	#_csave_addtoblock
0bcc4     0D 12 06 F6 | 	mov	arg01, #13
0bcc8     00 14 06 F6 | 	mov	arg02, #0
0bccc     7C FC BF FD | 	call	#_csave_addtoblock
0bcd0     4A 00 00 FF 
0bcd4     88 E4 05 F1 | 	add	objptr, ##38024
0bcd8     F2 22 02 FB | 	rdlong	local03, objptr
0bcdc     4A 00 00 FF 
0bce0     88 E4 85 F1 | 	sub	objptr, ##38024
0bce4     9C 4E 05 F1 | 	add	fp, #156
0bce8     A7 22 62 FC | 	wrlong	local03, fp
0bcec     9C 4E 85 F1 | 	sub	fp, #156
0bcf0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0bcf0                 | ' 
0bcf0                 | ' saveptr=programstart
0bcf0                 | ' do
0bcf0                 | LR__1051
0bcf0     A0 4E 05 F1 | 	add	fp, #160
0bcf4     A7 12 02 F6 | 	mov	arg01, fp
0bcf8     04 4E 85 F1 | 	sub	fp, #4
0bcfc     A7 14 02 FB | 	rdlong	arg02, fp
0bd00     9C 4E 85 F1 | 	sub	fp, #156
0bd04     18 16 06 F6 | 	mov	arg03, #24
0bd08     0B 00 00 FF 
0bd0c     CC E4 05 F1 | 	add	objptr, ##5836
0bd10     E8 3F B1 FD | 	call	#_psram_spin2_read1
0bd14     0C 4E 05 F1 | 	add	fp, #12
0bd18     A7 12 02 F6 | 	mov	arg01, fp
0bd1c     9C 4E 05 F1 | 	add	fp, #156
0bd20     A7 14 02 FB | 	rdlong	arg02, fp
0bd24     04 4E 05 F1 | 	add	fp, #4
0bd28     A7 16 02 FB | 	rdlong	arg03, fp
0bd2c     AC 4E 85 F1 | 	sub	fp, #172
0bd30     C8 3F B1 FD | 	call	#_psram_spin2_read1
0bd34     0B 00 00 FF 
0bd38     CC E4 85 F1 | 	sub	objptr, ##5836
0bd3c     AC 4E 05 F1 | 	add	fp, #172
0bd40     A7 12 02 FB | 	rdlong	arg01, fp
0bd44     AC 4E 85 F1 | 	sub	fp, #172
0bd48     00 14 06 F6 | 	mov	arg02, #0
0bd4c     FC FB BF FD | 	call	#_csave_addtoblock
0bd50                 | ' 
0bd50                 | '   psram.read1(varptr(header(0)),saveptr,24)
0bd50                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0bd50                 | '   csave_addtoblock(header(3),0) ' that's always <255
0bd50                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0bd50     A7 00 68 FC | 	wrlong	#0, fp
0bd54     AC 4E 05 F1 | 	add	fp, #172
0bd58     A7 24 02 FB | 	rdlong	local04, fp
0bd5c     AC 4E 85 F1 | 	sub	fp, #172
0bd60                 | LR__1052
0bd60     A7 22 02 FB | 	rdlong	local03, fp
0bd64     12 23 52 F2 | 	cmps	local03, local04 wc
0bd68     2C 00 90 3D |  if_ae	jmp	#LR__1053
0bd6c     A7 22 02 FB | 	rdlong	local03, fp
0bd70     0C 4E 05 F1 | 	add	fp, #12
0bd74     A7 22 02 F1 | 	add	local03, fp
0bd78     11 13 C2 FA | 	rdbyte	arg01, local03
0bd7c     00 14 06 F6 | 	mov	arg02, #0
0bd80     0C 4E 85 F1 | 	sub	fp, #12
0bd84     C4 FB BF FD | 	call	#_csave_addtoblock
0bd88     A7 22 02 FB | 	rdlong	local03, fp
0bd8c     01 22 06 F1 | 	add	local03, #1
0bd90     A7 22 62 FC | 	wrlong	local03, fp
0bd94     C8 FF 9F FD | 	jmp	#LR__1052
0bd98                 | LR__1053
0bd98     B4 4E 05 F1 | 	add	fp, #180
0bd9c     A7 22 02 FB | 	rdlong	local03, fp
0bda0     18 4E 85 F1 | 	sub	fp, #24
0bda4     A7 22 62 FC | 	wrlong	local03, fp
0bda8     18 4E 05 F1 | 	add	fp, #24
0bdac     A7 22 02 FB | 	rdlong	local03, fp
0bdb0     B4 4E 85 F1 | 	sub	fp, #180
0bdb4     FF FF 3F FF 
0bdb8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0bdbc     30 FF 9F 5D |  if_ne	jmp	#LR__1051
0bdc0     00 12 06 F6 | 	mov	arg01, #0
0bdc4     01 14 06 F6 | 	mov	arg02, #1
0bdc8     80 FB BF FD | 	call	#_csave_addtoblock
0bdcc     37 00 00 FF 
0bdd0     10 E4 05 F1 | 	add	objptr, ##28176
0bdd4     F2 12 02 FB | 	rdlong	arg01, objptr
0bdd8     37 00 00 FF 
0bddc     10 E4 85 F1 | 	sub	objptr, ##28176
0bde0     D4 13 06 F1 | 	add	arg01, #468
0bde4     09 01 58 FC | 	wrword	#0, arg01
0bde8                 | LR__1054
0bde8     A7 F0 03 F6 | 	mov	ptra, fp
0bdec     B2 00 A0 FD | 	call	#popregs_
0bdf0                 | _test_csave_ret
0bdf0     2D 00 64 FD | 	ret
0bdf4                 | 
0bdf4                 | ' 
0bdf4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bdf4                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0bdf4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bdf4                 | ' 
0bdf4                 | ' 
0bdf4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bdf4                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0bdf4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bdf4                 | ' 
0bdf4                 | ' '-------------------- changefreq
0bdf4                 | ' 
0bdf4                 | ' sub do_changefreq
0bdf4                 | _do_changefreq
0bdf4     04 4A 05 F6 | 	mov	COUNT_, #4
0bdf8     A8 00 A0 FD | 	call	#pushregs_
0bdfc     28 F0 07 F1 | 	add	ptra, #40
0be00     20 F4 BF FD | 	call	#_pop
0be04     FF 14 02 F6 | 	mov	arg02, result3
0be08     A7 FA 61 FC | 	wrlong	result1, fp
0be0c     04 4E 05 F1 | 	add	fp, #4
0be10     A7 FC 61 FC | 	wrlong	result2, fp
0be14     04 4E 05 F1 | 	add	fp, #4
0be18     A7 14 62 FC | 	wrlong	arg02, fp
0be1c     08 4E 85 F1 | 	sub	fp, #8
0be20     A7 12 02 F6 | 	mov	arg01, fp
0be24     9C F6 BF FD | 	call	#_converttofloat
0be28     24 4E 05 F1 | 	add	fp, #36
0be2c     A7 FA 61 FC | 	wrlong	result1, fp
0be30     24 4E 85 F1 | 	sub	fp, #36
0be34     FD 14 02 F6 | 	mov	arg02, result1
0be38     FC 16 20 FF 
0be3c     54 12 06 F6 | 	mov	arg01, ##1076754516
0be40     7C 86 B1 FD | 	call	#__system____builtin_logbase
0be44     FD 1E 02 F6 | 	mov	local01, result1
0be48     1E 14 C6 F9 | 	decod	arg02, #30
0be4c     FC 16 20 FF 
0be50     54 12 06 F6 | 	mov	arg01, ##1076754516
0be54     68 86 B1 FD | 	call	#__system____builtin_logbase
0be58     FD 14 02 F6 | 	mov	arg02, result1
0be5c     0F 13 02 F6 | 	mov	arg01, local01
0be60     90 78 B1 FD | 	call	#__system___float_div
0be64     FD 12 02 F6 | 	mov	arg01, result1
0be68     00 14 06 F6 | 	mov	arg02, #0
0be6c     48 7B B1 FD | 	call	#__system___float_tointeger
0be70     10 4E 05 F1 | 	add	fp, #16
0be74     A7 FA 61 FC | 	wrlong	result1, fp
0be78     1E 1E C6 F9 | 	decod	local01, #30
0be7c     FD 12 02 F6 | 	mov	arg01, result1
0be80     10 4E 85 F1 | 	sub	fp, #16
0be84     05 12 06 F1 | 	add	arg01, #5
0be88     09 13 52 F6 | 	abs	arg01, arg01 wc
0be8c     1F 20 C6 C9 |  if_b	decod	local02, #31
0be90     00 20 06 36 |  if_ae	mov	local02, #0
0be94     54 72 B1 FD | 	call	#__system___float_fromuns
0be98     10 FB 61 F5 | 	xor	result1, local02
0be9c     FD 14 02 F6 | 	mov	arg02, result1
0bea0     0F 13 02 F6 | 	mov	arg01, local01
0bea4     50 85 B1 FD | 	call	#__system____builtin_powf
0bea8     FD 12 02 F6 | 	mov	arg01, result1
0beac     01 14 06 F6 | 	mov	arg02, #1
0beb0     04 7B B1 FD | 	call	#__system___float_tointeger
0beb4     14 4E 05 F1 | 	add	fp, #20
0beb8     A7 FA 61 FC | 	wrlong	result1, fp
0bebc                 | ' skip=round(2^(lfreq+5))
0bebc                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0bebc     14 4E 85 F1 | 	sub	fp, #20
0bec0     40 00 00 FF 
0bec4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bec8     30 00 90 CD |  if_b	jmp	#LR__1060
0becc     14 4E 05 F1 | 	add	fp, #20
0bed0     A7 1E 02 FB | 	rdlong	local01, fp
0bed4     0F 1F 52 F6 | 	abs	local01, local01 wc
0bed8     0F 1E 46 F0 | 	shr	local01, #15
0bedc     0F 1F 82 F6 | 	negc	local01, local01
0bee0     04 4E 05 F1 | 	add	fp, #4
0bee4     A7 1E 62 FC | 	wrlong	local01, fp
0bee8     04 4E 85 F1 | 	sub	fp, #4
0beec     40 00 80 FF 
0bef0     A7 00 68 FC | 	wrlong	##32768, fp
0bef4     14 4E 85 F1 | 	sub	fp, #20
0bef8     0C 00 90 FD | 	jmp	#LR__1061
0befc                 | LR__1060
0befc     18 4E 05 F1 | 	add	fp, #24
0bf00     A7 02 68 FC | 	wrlong	#1, fp
0bf04     18 4E 85 F1 | 	sub	fp, #24
0bf08                 | LR__1061
0bf08     24 4E 05 F1 | 	add	fp, #36
0bf0c     A7 14 02 FB | 	rdlong	arg02, fp
0bf10     24 4E 85 F1 | 	sub	fp, #36
0bf14     3E 2C 25 FF 
0bf18     3C 12 06 F6 | 	mov	arg01, ##1247312956
0bf1c     D4 77 B1 FD | 	call	#__system___float_div
0bf20     FD 1E 02 F6 | 	mov	local01, result1
0bf24     18 4E 05 F1 | 	add	fp, #24
0bf28     A7 12 02 FB | 	rdlong	arg01, fp
0bf2c     18 4E 85 F1 | 	sub	fp, #24
0bf30     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf34     1F 20 C6 C9 |  if_b	decod	local02, #31
0bf38     00 20 06 36 |  if_ae	mov	local02, #0
0bf3c     AC 71 B1 FD | 	call	#__system___float_fromuns
0bf40     10 FB 61 F5 | 	xor	result1, local02
0bf44     FD 22 02 F6 | 	mov	local03, result1
0bf48     1E 24 C6 F9 | 	decod	local04, #30
0bf4c     0D 12 06 F6 | 	mov	arg01, #13
0bf50     10 4E 05 F1 | 	add	fp, #16
0bf54     A7 14 02 FB | 	rdlong	arg02, fp
0bf58     10 4E 85 F1 | 	sub	fp, #16
0bf5c     0A 13 82 F1 | 	sub	arg01, arg02
0bf60     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf64     1F 20 C6 C9 |  if_b	decod	local02, #31
0bf68     00 20 06 36 |  if_ae	mov	local02, #0
0bf6c     7C 71 B1 FD | 	call	#__system___float_fromuns
0bf70     10 FB 61 F5 | 	xor	result1, local02
0bf74     FD 14 02 F6 | 	mov	arg02, result1
0bf78     12 13 02 F6 | 	mov	arg01, local04
0bf7c     78 84 B1 FD | 	call	#__system____builtin_powf
0bf80     FD 14 02 F6 | 	mov	arg02, result1
0bf84     11 13 02 F6 | 	mov	arg01, local03
0bf88     64 75 B1 FD | 	call	#__system___float_mul
0bf8c     FD 14 02 F6 | 	mov	arg02, result1
0bf90     0F 13 02 F6 | 	mov	arg01, local01
0bf94     5C 77 B1 FD | 	call	#__system___float_div
0bf98     FD 12 02 F6 | 	mov	arg01, result1
0bf9c     01 14 06 F6 | 	mov	arg02, #1
0bfa0     14 7A B1 FD | 	call	#__system___float_tointeger
0bfa4     FD 1E 02 F6 | 	mov	local01, result1
0bfa8     1C 4E 05 F1 | 	add	fp, #28
0bfac     A7 1E 62 FC | 	wrlong	local01, fp
0bfb0     1C 4E 85 F1 | 	sub	fp, #28
0bfb4     6C F2 BF FD | 	call	#_pop
0bfb8     FF 24 02 F6 | 	mov	local04, result3
0bfbc     A7 FA 61 FC | 	wrlong	result1, fp
0bfc0     04 4E 05 F1 | 	add	fp, #4
0bfc4     A7 FC 61 FC | 	wrlong	result2, fp
0bfc8     04 4E 05 F1 | 	add	fp, #4
0bfcc     A7 24 62 FC | 	wrlong	local04, fp
0bfd0     08 4E 85 F1 | 	sub	fp, #8
0bfd4     A7 12 02 F6 | 	mov	arg01, fp
0bfd8     2C F4 BF FD | 	call	#_converttoint
0bfdc     FD 22 52 F6 | 	abs	local03, result1 wc
0bfe0     07 22 06 F5 | 	and	local03, #7
0bfe4     11 23 82 F6 | 	negc	local03, local03
0bfe8     0C 4E 05 F1 | 	add	fp, #12
0bfec     A7 22 62 FC | 	wrlong	local03, fp
0bff0     08 4E 05 F1 | 	add	fp, #8
0bff4     A7 1E 02 FB | 	rdlong	local01, fp
0bff8     10 1E 66 F0 | 	shl	local01, #16
0bffc     08 4E 05 F1 | 	add	fp, #8
0c000     A7 24 02 FB | 	rdlong	local04, fp
0c004     12 1F 02 F1 | 	add	local01, local04
0c008     04 4E 05 F1 | 	add	fp, #4
0c00c     A7 1E 62 FC | 	wrlong	local01, fp
0c010                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0c010     37 00 00 FF 
0c014     10 E4 05 F1 | 	add	objptr, ##28176
0c018     F2 12 02 FB | 	rdlong	arg01, objptr
0c01c     37 00 00 FF 
0c020     10 E4 85 F1 | 	sub	objptr, ##28176
0c024     14 4E 85 F1 | 	sub	fp, #20
0c028     A7 24 02 FB | 	rdlong	local04, fp
0c02c     0C 4E 85 F1 | 	sub	fp, #12
0c030     06 24 66 F0 | 	shl	local04, #6
0c034     12 13 02 F1 | 	add	arg01, local04
0c038     08 12 06 F1 | 	add	arg01, #8
0c03c     09 FB 01 FB | 	rdlong	result1, arg01
0c040     1B FA 2D F4 | 	testbn	result1, #27 wz
0c044     3C 00 90 5D |  if_ne	jmp	#LR__1062
0c048     37 00 00 FF 
0c04c     10 E4 05 F1 | 	add	objptr, ##28176
0c050     F2 12 02 FB | 	rdlong	arg01, objptr
0c054     37 00 00 FF 
0c058     10 E4 85 F1 | 	sub	objptr, ##28176
0c05c     0C 4E 05 F1 | 	add	fp, #12
0c060     A7 24 02 FB | 	rdlong	local04, fp
0c064     06 24 66 F0 | 	shl	local04, #6
0c068     12 13 02 F1 | 	add	arg01, local04
0c06c     18 12 06 F1 | 	add	arg01, #24
0c070     14 4E 05 F1 | 	add	fp, #20
0c074     A7 14 02 FB | 	rdlong	arg02, fp
0c078     20 4E 85 F1 | 	sub	fp, #32
0c07c     09 15 62 FC | 	wrlong	arg02, arg01
0c080     80 00 90 FD | 	jmp	#LR__1063
0c084                 | LR__1062
0c084     37 00 00 FF 
0c088     10 E4 05 F1 | 	add	objptr, ##28176
0c08c     F2 1E 02 FB | 	rdlong	local01, objptr
0c090     37 00 00 FF 
0c094     10 E4 85 F1 | 	sub	objptr, ##28176
0c098     0C 4E 05 F1 | 	add	fp, #12
0c09c     A7 24 02 FB | 	rdlong	local04, fp
0c0a0     06 24 66 F0 | 	shl	local04, #6
0c0a4     12 1F 02 F1 | 	add	local01, local04
0c0a8     18 1E 06 F1 | 	add	local01, #24
0c0ac     18 4E 05 F1 | 	add	fp, #24
0c0b0     A7 14 02 FB | 	rdlong	arg02, fp
0c0b4     24 4E 85 F1 | 	sub	fp, #36
0c0b8     3E 2C 25 FF 
0c0bc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0c0c0     30 76 B1 FD | 	call	#__system___float_div
0c0c4     FD 12 02 F6 | 	mov	arg01, result1
0c0c8     01 14 06 F6 | 	mov	arg02, #1
0c0cc     E8 78 B1 FD | 	call	#__system___float_tointeger
0c0d0     0F FB 51 FC | 	wrword	result1, local01
0c0d4     37 00 00 FF 
0c0d8     10 E4 05 F1 | 	add	objptr, ##28176
0c0dc     F2 12 02 FB | 	rdlong	arg01, objptr
0c0e0     37 00 00 FF 
0c0e4     10 E4 85 F1 | 	sub	objptr, ##28176
0c0e8     0C 4E 05 F1 | 	add	fp, #12
0c0ec     A7 24 02 FB | 	rdlong	local04, fp
0c0f0     0C 4E 85 F1 | 	sub	fp, #12
0c0f4     06 24 66 F0 | 	shl	local04, #6
0c0f8     12 13 02 F1 | 	add	arg01, local04
0c0fc     1A 12 06 F1 | 	add	arg01, #26
0c100     09 01 5A FC | 	wrword	#256, arg01
0c104                 | LR__1063
0c104     A7 F0 03 F6 | 	mov	ptra, fp
0c108     B2 00 A0 FD | 	call	#popregs_
0c10c                 | _do_changefreq_ret
0c10c     2D 00 64 FD | 	ret
0c110                 | 
0c110                 | ' 
0c110                 | ' '-------------------- changepan
0c110                 | ' 
0c110                 | ' sub do_changepan
0c110                 | _do_changepan
0c110     01 4A 05 F6 | 	mov	COUNT_, #1
0c114     A8 00 A0 FD | 	call	#pushregs_
0c118     14 F0 07 F1 | 	add	ptra, #20
0c11c     04 F1 BF FD | 	call	#_pop
0c120     A7 FA 61 FC | 	wrlong	result1, fp
0c124     04 4E 05 F1 | 	add	fp, #4
0c128     A7 FC 61 FC | 	wrlong	result2, fp
0c12c     04 4E 05 F1 | 	add	fp, #4
0c130     A7 FE 61 FC | 	wrlong	result3, fp
0c134     08 4E 85 F1 | 	sub	fp, #8
0c138     00 00 23 FF 
0c13c     00 1E 06 F6 | 	mov	local01, ##1174405120
0c140     A7 12 02 F6 | 	mov	arg01, fp
0c144     7C F3 BF FD | 	call	#_converttofloat
0c148     FD 14 02 F6 | 	mov	arg02, result1
0c14c     0F 13 02 F6 | 	mov	arg01, local01
0c150     9C 73 B1 FD | 	call	#__system___float_mul
0c154     FD 12 02 F6 | 	mov	arg01, result1
0c158     01 14 06 F6 | 	mov	arg02, #1
0c15c     58 78 B1 FD | 	call	#__system___float_tointeger
0c160     0D 1E C6 F9 | 	decod	local01, #13
0c164     FD 1E 02 F1 | 	add	local01, result1
0c168     10 4E 05 F1 | 	add	fp, #16
0c16c     A7 1E 62 FC | 	wrlong	local01, fp
0c170                 | ' 
0c170                 | ' t1=pop()
0c170                 | ' pan=8192+round(8192*converttofloat(t1)) 
0c170                 | ' if pan<0 then pan=0
0c170     10 4E 85 F1 | 	sub	fp, #16
0c174     00 1E 56 F2 | 	cmps	local01, #0 wc
0c178     10 4E 05 C1 |  if_b	add	fp, #16
0c17c     A7 00 68 CC |  if_b	wrlong	#0, fp
0c180     10 4E 85 C1 |  if_b	sub	fp, #16
0c184                 | ' if pan>16384 then pan=16384
0c184     10 4E 05 F1 | 	add	fp, #16
0c188     A7 1E 02 FB | 	rdlong	local01, fp
0c18c     10 4E 85 F1 | 	sub	fp, #16
0c190     20 00 00 FF 
0c194     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0c198     10 4E 05 31 |  if_ae	add	fp, #16
0c19c     20 00 80 3F 
0c1a0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0c1a4     10 4E 85 31 |  if_ae	sub	fp, #16
0c1a8     78 F0 BF FD | 	call	#_pop
0c1ac     FF 1E 02 F6 | 	mov	local01, result3
0c1b0     A7 FA 61 FC | 	wrlong	result1, fp
0c1b4     04 4E 05 F1 | 	add	fp, #4
0c1b8     A7 FC 61 FC | 	wrlong	result2, fp
0c1bc     04 4E 05 F1 | 	add	fp, #4
0c1c0     A7 1E 62 FC | 	wrlong	local01, fp
0c1c4     08 4E 85 F1 | 	sub	fp, #8
0c1c8     A7 12 02 F6 | 	mov	arg01, fp
0c1cc     38 F2 BF FD | 	call	#_converttoint
0c1d0     FD 1E 52 F6 | 	abs	local01, result1 wc
0c1d4     07 1E 06 F5 | 	and	local01, #7
0c1d8     0F 1F 82 F6 | 	negc	local01, local01
0c1dc     0C 4E 05 F1 | 	add	fp, #12
0c1e0     A7 1E 62 FC | 	wrlong	local01, fp
0c1e4     37 00 00 FF 
0c1e8     10 E4 05 F1 | 	add	objptr, ##28176
0c1ec     F2 12 02 FB | 	rdlong	arg01, objptr
0c1f0     37 00 00 FF 
0c1f4     10 E4 85 F1 | 	sub	objptr, ##28176
0c1f8     06 1E 66 F0 | 	shl	local01, #6
0c1fc     0F 13 02 F1 | 	add	arg01, local01
0c200     16 12 06 F1 | 	add	arg01, #22
0c204     04 4E 05 F1 | 	add	fp, #4
0c208     A7 14 02 FB | 	rdlong	arg02, fp
0c20c     10 4E 85 F1 | 	sub	fp, #16
0c210     09 15 52 FC | 	wrword	arg02, arg01
0c214     A7 F0 03 F6 | 	mov	ptra, fp
0c218     B2 00 A0 FD | 	call	#popregs_
0c21c                 | _do_changepan_ret
0c21c     2D 00 64 FD | 	ret
0c220                 | 
0c220                 | ' 
0c220                 | ' '-------------------- changevol
0c220                 | ' 
0c220                 | ' sub do_changevol
0c220                 | _do_changevol
0c220     00 4A 05 F6 | 	mov	COUNT_, #0
0c224     A8 00 A0 FD | 	call	#pushregs_
0c228     14 F0 07 F1 | 	add	ptra, #20
0c22c     F4 EF BF FD | 	call	#_pop
0c230     FF 14 02 F6 | 	mov	arg02, result3
0c234     A7 FA 61 FC | 	wrlong	result1, fp
0c238     04 4E 05 F1 | 	add	fp, #4
0c23c     A7 FC 61 FC | 	wrlong	result2, fp
0c240     04 4E 05 F1 | 	add	fp, #4
0c244     A7 14 62 FC | 	wrlong	arg02, fp
0c248     08 4E 85 F1 | 	sub	fp, #8
0c24c     A7 12 02 F6 | 	mov	arg01, fp
0c250     70 F2 BF FD | 	call	#_converttofloat
0c254     FD 12 02 F6 | 	mov	arg01, result1
0c258     00 3D 22 FF 
0c25c     00 14 06 F6 | 	mov	arg02, ##1148846080
0c260     8C 72 B1 FD | 	call	#__system___float_mul
0c264     FD 12 02 F6 | 	mov	arg01, result1
0c268     01 14 06 F6 | 	mov	arg02, #1
0c26c     48 77 B1 FD | 	call	#__system___float_tointeger
0c270     FD 14 52 F6 | 	abs	arg02, result1 wc
0c274     0D 14 46 F7 | 	zerox	arg02, #13
0c278     0A 15 82 F6 | 	negc	arg02, arg02
0c27c     10 4E 05 F1 | 	add	fp, #16
0c280     A7 14 62 FC | 	wrlong	arg02, fp
0c284     10 4E 85 F1 | 	sub	fp, #16
0c288     98 EF BF FD | 	call	#_pop
0c28c     FF 14 02 F6 | 	mov	arg02, result3
0c290     A7 FA 61 FC | 	wrlong	result1, fp
0c294     04 4E 05 F1 | 	add	fp, #4
0c298     A7 FC 61 FC | 	wrlong	result2, fp
0c29c     04 4E 05 F1 | 	add	fp, #4
0c2a0     A7 14 62 FC | 	wrlong	arg02, fp
0c2a4     08 4E 85 F1 | 	sub	fp, #8
0c2a8     A7 12 02 F6 | 	mov	arg01, fp
0c2ac     58 F1 BF FD | 	call	#_converttoint
0c2b0     FD 14 52 F6 | 	abs	arg02, result1 wc
0c2b4     07 14 06 F5 | 	and	arg02, #7
0c2b8     0A 15 82 F6 | 	negc	arg02, arg02
0c2bc     0C 4E 05 F1 | 	add	fp, #12
0c2c0     A7 14 62 FC | 	wrlong	arg02, fp
0c2c4     37 00 00 FF 
0c2c8     10 E4 05 F1 | 	add	objptr, ##28176
0c2cc     F2 12 02 FB | 	rdlong	arg01, objptr
0c2d0     37 00 00 FF 
0c2d4     10 E4 85 F1 | 	sub	objptr, ##28176
0c2d8     06 14 66 F0 | 	shl	arg02, #6
0c2dc     0A 13 02 F1 | 	add	arg01, arg02
0c2e0     14 12 06 F1 | 	add	arg01, #20
0c2e4     04 4E 05 F1 | 	add	fp, #4
0c2e8     A7 14 02 FB | 	rdlong	arg02, fp
0c2ec     10 4E 85 F1 | 	sub	fp, #16
0c2f0     09 15 52 FC | 	wrword	arg02, arg01
0c2f4     A7 F0 03 F6 | 	mov	ptra, fp
0c2f8     B2 00 A0 FD | 	call	#popregs_
0c2fc                 | _do_changevol_ret
0c2fc     2D 00 64 FD | 	ret
0c300                 | 
0c300                 | ' 
0c300                 | ' '-------------------- changewav
0c300                 | ' 
0c300                 | ' sub do_changewav
0c300                 | _do_changewav
0c300     00 4A 05 F6 | 	mov	COUNT_, #0
0c304     A8 00 A0 FD | 	call	#pushregs_
0c308     14 F0 07 F1 | 	add	ptra, #20
0c30c     14 EF BF FD | 	call	#_pop
0c310     FF 14 02 F6 | 	mov	arg02, result3
0c314     A7 FA 61 FC | 	wrlong	result1, fp
0c318     04 4E 05 F1 | 	add	fp, #4
0c31c     A7 FC 61 FC | 	wrlong	result2, fp
0c320     04 4E 05 F1 | 	add	fp, #4
0c324     A7 14 62 FC | 	wrlong	arg02, fp
0c328     08 4E 85 F1 | 	sub	fp, #8
0c32c     A7 12 02 F6 | 	mov	arg01, fp
0c330     D4 F0 BF FD | 	call	#_converttoint
0c334     10 4E 05 F1 | 	add	fp, #16
0c338     A7 FA 61 FC | 	wrlong	result1, fp
0c33c                 | ' t1=pop()
0c33c                 | ' wave=converttoint(t1)
0c33c                 | ' if wave<0 then wave=0
0c33c     FD 14 02 F6 | 	mov	arg02, result1
0c340     10 4E 85 F1 | 	sub	fp, #16
0c344     00 14 56 F2 | 	cmps	arg02, #0 wc
0c348     10 4E 05 C1 |  if_b	add	fp, #16
0c34c     A7 00 68 CC |  if_b	wrlong	#0, fp
0c350     10 4E 85 C1 |  if_b	sub	fp, #16
0c354     CC EE BF FD | 	call	#_pop
0c358     FF 14 02 F6 | 	mov	arg02, result3
0c35c     A7 FA 61 FC | 	wrlong	result1, fp
0c360     04 4E 05 F1 | 	add	fp, #4
0c364     A7 FC 61 FC | 	wrlong	result2, fp
0c368     04 4E 05 F1 | 	add	fp, #4
0c36c     A7 14 62 FC | 	wrlong	arg02, fp
0c370     08 4E 85 F1 | 	sub	fp, #8
0c374     A7 12 02 F6 | 	mov	arg01, fp
0c378     8C F0 BF FD | 	call	#_converttoint
0c37c     FD 14 52 F6 | 	abs	arg02, result1 wc
0c380     07 14 06 F5 | 	and	arg02, #7
0c384     0A 15 82 F6 | 	negc	arg02, arg02
0c388     0C 4E 05 F1 | 	add	fp, #12
0c38c     A7 14 62 FC | 	wrlong	arg02, fp
0c390                 | ' if wave <32 then 
0c390     04 4E 05 F1 | 	add	fp, #4
0c394     A7 14 02 FB | 	rdlong	arg02, fp
0c398     10 4E 85 F1 | 	sub	fp, #16
0c39c     20 14 56 F2 | 	cmps	arg02, #32 wc
0c3a0     48 00 90 3D |  if_ae	jmp	#LR__1070
0c3a4     37 00 00 FF 
0c3a8     10 E4 05 F1 | 	add	objptr, ##28176
0c3ac     F2 12 02 FB | 	rdlong	arg01, objptr
0c3b0     37 00 00 FF 
0c3b4     10 E4 85 F1 | 	sub	objptr, ##28176
0c3b8     0C 4E 05 F1 | 	add	fp, #12
0c3bc     A7 14 02 FB | 	rdlong	arg02, fp
0c3c0     06 14 66 F0 | 	shl	arg02, #6
0c3c4     0A 13 02 F1 | 	add	arg01, arg02
0c3c8     08 12 06 F1 | 	add	arg01, #8
0c3cc     04 4E 05 F1 | 	add	fp, #4
0c3d0     A7 14 02 FB | 	rdlong	arg02, fp
0c3d4     10 4E 85 F1 | 	sub	fp, #16
0c3d8     0B 14 66 F0 | 	shl	arg02, #11
0c3dc     00 00 40 FF 
0c3e0     00 14 06 F1 | 	add	arg02, ##-2147483648
0c3e4     09 15 62 FC | 	wrlong	arg02, arg01
0c3e8     34 00 90 FD | 	jmp	#LR__1071
0c3ec                 | LR__1070
0c3ec     37 00 00 FF 
0c3f0     10 E4 05 F1 | 	add	objptr, ##28176
0c3f4     F2 12 02 FB | 	rdlong	arg01, objptr
0c3f8     37 00 00 FF 
0c3fc     10 E4 85 F1 | 	sub	objptr, ##28176
0c400     0C 4E 05 F1 | 	add	fp, #12
0c404     A7 14 02 FB | 	rdlong	arg02, fp
0c408     0C 4E 85 F1 | 	sub	fp, #12
0c40c     06 14 66 F0 | 	shl	arg02, #6
0c410     0A 13 02 F1 | 	add	arg01, arg02
0c414     08 12 06 F1 | 	add	arg01, #8
0c418     00 00 C4 FF 
0c41c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0c420                 | LR__1071
0c420     A7 F0 03 F6 | 	mov	ptra, fp
0c424     B2 00 A0 FD | 	call	#popregs_
0c428                 | _do_changewav_ret
0c428     2D 00 64 FD | 	ret
0c42c                 | 
0c42c                 | ' 
0c42c                 | ' '-------------------- defenv
0c42c                 | ' 
0c42c                 | ' sub do_defenv
0c42c                 | _do_defenv
0c42c     08 4A 05 F6 | 	mov	COUNT_, #8
0c430     A8 00 A0 FD | 	call	#pushregs_
0c434     58 F0 07 F1 | 	add	ptra, #88
0c438     4A 00 00 FF 
0c43c     80 E4 05 F1 | 	add	objptr, ##38016
0c440     F2 1E 02 FB | 	rdlong	local01, objptr
0c444     0F 1B 02 F6 | 	mov	arg05, local01
0c448     01 1A 66 F0 | 	shl	arg05, #1
0c44c     0F 1B 02 F1 | 	add	arg05, local01
0c450     02 1A 66 F0 | 	shl	arg05, #2
0c454     03 00 00 FF 
0c458     04 E4 85 F1 | 	sub	objptr, ##1540
0c45c     F2 1A 02 F1 | 	add	arg05, objptr
0c460     0D 1B 02 FB | 	rdlong	arg05, arg05
0c464     10 4E 05 F1 | 	add	fp, #16
0c468     A7 1A 62 FC | 	wrlong	arg05, fp
0c46c                 | ' 
0c46c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c46c                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0c46c     10 4E 85 F1 | 	sub	fp, #16
0c470     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c474     47 00 00 FF 
0c478     7C E4 85 F1 | 	sub	objptr, ##36476
0c47c     10 4E 05 51 |  if_ne	add	fp, #16
0c480     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c484     10 4E 85 51 |  if_ne	sub	fp, #16
0c488     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c48c     8C 0A 90 5D |  if_ne	jmp	#LR__1101
0c490                 | ' 
0c490                 | ' if numpar=2 then						' env from .h2 or from a pointer
0c490     10 4E 05 F1 | 	add	fp, #16
0c494     A7 1E 02 FB | 	rdlong	local01, fp
0c498     10 4E 85 F1 | 	sub	fp, #16
0c49c     02 1E 0E F2 | 	cmp	local01, #2 wz
0c4a0     24 04 90 5D |  if_ne	jmp	#LR__1093
0c4a4     7C ED BF FD | 	call	#_pop
0c4a8     FF 1A 02 F6 | 	mov	arg05, result3
0c4ac     40 4E 05 F1 | 	add	fp, #64
0c4b0     A7 FA 61 FC | 	wrlong	result1, fp
0c4b4     04 4E 05 F1 | 	add	fp, #4
0c4b8     A7 FC 61 FC | 	wrlong	result2, fp
0c4bc     04 4E 05 F1 | 	add	fp, #4
0c4c0     A7 1A 62 FC | 	wrlong	arg05, fp
0c4c4                 | '   t1=pop()
0c4c4                 | '   if t1.result_type=result_string2 then 
0c4c4     48 4E 85 F1 | 	sub	fp, #72
0c4c8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c4cc     20 00 90 5D |  if_ne	jmp	#LR__1080
0c4d0     40 4E 05 F1 | 	add	fp, #64
0c4d4     A7 12 02 FB | 	rdlong	arg01, fp
0c4d8     40 4E 85 F1 | 	sub	fp, #64
0c4dc     BC EE BF FD | 	call	#_convertstring
0c4e0     4C 4E 05 F1 | 	add	fp, #76
0c4e4     A7 FA 61 FC | 	wrlong	result1, fp
0c4e8     4C 4E 85 F1 | 	sub	fp, #76
0c4ec     58 00 90 FD | 	jmp	#LR__1083
0c4f0                 | LR__1080
0c4f0     48 4E 05 F1 | 	add	fp, #72
0c4f4     A7 1E 02 FB | 	rdlong	local01, fp
0c4f8     48 4E 85 F1 | 	sub	fp, #72
0c4fc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c500     18 00 90 5D |  if_ne	jmp	#LR__1081
0c504     40 4E 05 F1 | 	add	fp, #64
0c508     A7 1E 02 FB | 	rdlong	local01, fp
0c50c     0C 4E 05 F1 | 	add	fp, #12
0c510     A7 1E 62 FC | 	wrlong	local01, fp
0c514     4C 4E 85 F1 | 	sub	fp, #76
0c518     2C 00 90 FD | 	jmp	#LR__1082
0c51c                 | LR__1081
0c51c     84 01 00 FF 
0c520     3C 1E 06 F6 | 	mov	local01, ##@LR__5444
0c524     4C 4E 05 F1 | 	add	fp, #76
0c528     A7 1E 62 FC | 	wrlong	local01, fp
0c52c     0C 4E 85 F1 | 	sub	fp, #12
0c530     A7 12 02 F6 | 	mov	arg01, fp
0c534     40 4E 85 F1 | 	sub	fp, #64
0c538     CC EE BF FD | 	call	#_converttoint
0c53c     1C 4E 05 F1 | 	add	fp, #28
0c540     A7 FA 61 FC | 	wrlong	result1, fp
0c544     1C 4E 85 F1 | 	sub	fp, #28
0c548                 | LR__1082
0c548                 | LR__1083
0c548                 | '   if s1<>"" then 
0c548     4C 4E 05 F1 | 	add	fp, #76
0c54c     A7 12 02 FB | 	rdlong	arg01, fp
0c550     4C 4E 85 F1 | 	sub	fp, #76
0c554     84 01 00 FF 
0c558     3D 14 06 F6 | 	mov	arg02, ##@LR__5445
0c55c     04 44 B1 FD | 	call	#__system___string_cmp
0c560     00 FA 0D F2 | 	cmp	result1, #0 wz
0c564     24 02 90 AD |  if_e	jmp	#LR__1087
0c568     B8 EC BF FD | 	call	#_pop
0c56c     FF 1E 02 F6 | 	mov	local01, result3
0c570     40 4E 05 F1 | 	add	fp, #64
0c574     A7 FA 61 FC | 	wrlong	result1, fp
0c578     04 4E 05 F1 | 	add	fp, #4
0c57c     A7 FC 61 FC | 	wrlong	result2, fp
0c580     04 4E 05 F1 | 	add	fp, #4
0c584     A7 1E 62 FC | 	wrlong	local01, fp
0c588     08 4E 85 F1 | 	sub	fp, #8
0c58c     A7 12 02 F6 | 	mov	arg01, fp
0c590     40 4E 85 F1 | 	sub	fp, #64
0c594     70 EE BF FD | 	call	#_converttoint
0c598     18 4E 05 F1 | 	add	fp, #24
0c59c     A7 FA 61 FC | 	wrlong	result1, fp
0c5a0     18 4E 85 F1 | 	sub	fp, #24
0c5a4                 | '     t1=pop()
0c5a4                 | '     channel=converttoint(t1) 
0c5a4                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c5a4     09 12 06 F6 | 	mov	arg01, #9
0c5a8     24 94 B1 FD | 	call	#__system__close
0c5ac     09 1E 06 F6 | 	mov	local01, #9
0c5b0     84 01 00 FF 
0c5b4     3E 12 06 F6 | 	mov	arg01, ##@LR__5446
0c5b8     4C 4E 05 F1 | 	add	fp, #76
0c5bc     A7 14 02 FB | 	rdlong	arg02, fp
0c5c0     4C 4E 85 F1 | 	sub	fp, #76
0c5c4     D0 43 B1 FD | 	call	#__system___string_concat
0c5c8     FD 14 02 F6 | 	mov	arg02, result1
0c5cc     0F 13 02 F6 | 	mov	arg01, local01
0c5d0     00 16 06 F6 | 	mov	arg03, #0
0c5d4     68 4F B1 FD | 	call	#__system___basic_open_string
0c5d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c5dc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c5e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c5e4     0C 4E 05 F1 | 	add	fp, #12
0c5e8     A7 FA 61 FC | 	wrlong	result1, fp
0c5ec                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c5ec     0C 4E 85 F1 | 	sub	fp, #12
0c5f0     A0 00 90 AD |  if_e	jmp	#LR__1084
0c5f4     00 12 06 F6 | 	mov	arg01, #0
0c5f8     A4 9D B1 FD | 	call	#__system___getiolock_0540
0c5fc     FD 12 02 F6 | 	mov	arg01, result1
0c600     38 43 B1 FD | 	call	#__system___lockmem
0c604     84 01 00 FF 
0c608     4B 14 06 F6 | 	mov	arg02, ##@LR__5447
0c60c     00 12 06 F6 | 	mov	arg01, #0
0c610     00 16 06 F6 | 	mov	arg03, #0
0c614     18 50 B1 FD | 	call	#__system___basic_print_string
0c618     0C 4E 05 F1 | 	add	fp, #12
0c61c     A7 14 02 FB | 	rdlong	arg02, fp
0c620     0C 4E 85 F1 | 	sub	fp, #12
0c624     00 12 06 F6 | 	mov	arg01, #0
0c628     00 16 06 F6 | 	mov	arg03, #0
0c62c     0A 18 06 F6 | 	mov	arg04, #10
0c630     40 50 B1 FD | 	call	#__system___basic_print_integer
0c634     84 01 00 FF 
0c638     59 14 06 F6 | 	mov	arg02, ##@LR__5448
0c63c     00 12 06 F6 | 	mov	arg01, #0
0c640     00 16 06 F6 | 	mov	arg03, #0
0c644     E8 4F B1 FD | 	call	#__system___basic_print_string
0c648     00 1E 06 F6 | 	mov	local01, #0
0c64c     0C 4E 05 F1 | 	add	fp, #12
0c650     A7 12 02 FB | 	rdlong	arg01, fp
0c654     0C 4E 85 F1 | 	sub	fp, #12
0c658     A8 69 B1 FD | 	call	#__system___strerror
0c65c     FD 14 02 F6 | 	mov	arg02, result1
0c660     0F 13 02 F6 | 	mov	arg01, local01
0c664     00 16 06 F6 | 	mov	arg03, #0
0c668     C4 4F B1 FD | 	call	#__system___basic_print_string
0c66c     00 12 06 F6 | 	mov	arg01, #0
0c670     0A 14 06 F6 | 	mov	arg02, #10
0c674     00 16 06 F6 | 	mov	arg03, #0
0c678     5C 4F B1 FD | 	call	#__system___basic_print_char
0c67c     00 12 06 F6 | 	mov	arg01, #0
0c680     1C 9D B1 FD | 	call	#__system___getiolock_0540
0c684     FD 00 68 FC | 	wrlong	#0, result1
0c688     09 12 06 F6 | 	mov	arg01, #9
0c68c     40 93 B1 FD | 	call	#__system__close
0c690     88 08 90 FD | 	jmp	#LR__1101
0c694                 | LR__1084
0c694                 | '     get #9,17,envbuf8(channel,0),256
0c694     18 4E 05 F1 | 	add	fp, #24
0c698     A7 1A 02 FB | 	rdlong	arg05, fp
0c69c     18 4E 85 F1 | 	sub	fp, #24
0c6a0     0D 17 02 F6 | 	mov	arg03, arg05
0c6a4     09 16 66 F0 | 	shl	arg03, #9
0c6a8     0D 17 02 F1 | 	add	arg03, arg05
0c6ac     0C 00 00 FF 
0c6b0     D8 E4 05 F1 | 	add	objptr, ##6360
0c6b4     F2 16 02 F1 | 	add	arg03, objptr
0c6b8     09 12 06 F6 | 	mov	arg01, #9
0c6bc     11 14 06 F6 | 	mov	arg02, #17
0c6c0     00 19 06 F6 | 	mov	arg04, #256
0c6c4     01 1A 06 F6 | 	mov	arg05, #1
0c6c8     0C 00 00 FF 
0c6cc     D8 E4 85 F1 | 	sub	objptr, ##6360
0c6d0     D8 50 B1 FD | 	call	#__system___basic_get
0c6d4                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0c6d4     14 4E 05 F1 | 	add	fp, #20
0c6d8     A7 FE 69 FC | 	wrlong	#255, fp
0c6dc     14 4E 85 F1 | 	sub	fp, #20
0c6e0     0C 00 00 FF 
0c6e4     D8 E4 05 F1 | 	add	objptr, ##6360
0c6e8     97 30 48 FB | 	callpa	#(@LR__1086-@LR__1085)>>2,fcache_load_ptr_
0c6ec                 | LR__1085
0c6ec     18 4E 05 F1 | 	add	fp, #24
0c6f0     A7 16 02 FB | 	rdlong	arg03, fp
0c6f4     0B 1F 02 F6 | 	mov	local01, arg03
0c6f8     09 1E 66 F0 | 	shl	local01, #9
0c6fc     F2 1E 02 F1 | 	add	local01, objptr
0c700     04 4E 85 F1 | 	sub	fp, #4
0c704     A7 1A 02 FB | 	rdlong	arg05, fp
0c708     0D 19 02 F6 | 	mov	arg04, arg05
0c70c     01 18 66 F0 | 	shl	arg04, #1
0c710     0F 19 02 F1 | 	add	arg04, local01
0c714     0B 1F 02 F6 | 	mov	local01, arg03
0c718     09 1E 66 F0 | 	shl	local01, #9
0c71c     0B 1F 02 F1 | 	add	local01, arg03
0c720     F2 1E 02 F1 | 	add	local01, objptr
0c724     0F 1B 02 F1 | 	add	arg05, local01
0c728     0D 1F C2 FA | 	rdbyte	local01, arg05
0c72c     00 1F 06 FA | 	mul	local01, #256
0c730     0C 1F 52 FC | 	wrword	local01, arg04
0c734     A7 1E 02 FB | 	rdlong	local01, fp
0c738     01 1E 86 F1 | 	sub	local01, #1
0c73c     A7 1E 62 FC | 	wrlong	local01, fp
0c740     14 4E 85 F1 | 	sub	fp, #20
0c744     00 1E 56 F2 | 	cmps	local01, #0 wc
0c748     A0 FF 9F 3D |  if_ae	jmp	#LR__1085
0c74c                 | LR__1086
0c74c     0C 00 00 FF 
0c750     D8 E4 85 F1 | 	sub	objptr, ##6360
0c754                 | '     close #9
0c754     09 12 06 F6 | 	mov	arg01, #9
0c758     74 92 B1 FD | 	call	#__system__close
0c75c     18 4E 05 F1 | 	add	fp, #24
0c760     A7 1E 02 FB | 	rdlong	local01, fp
0c764     18 4E 85 F1 | 	sub	fp, #24
0c768     09 1E 66 F0 | 	shl	local01, #9
0c76c     0C 00 00 FF 
0c770     D8 E4 05 F1 | 	add	objptr, ##6360
0c774     F2 1E 02 F1 | 	add	local01, objptr
0c778     FE 1F 06 F1 | 	add	local01, #510
0c77c     0F 01 58 FC | 	wrword	#0, local01
0c780                 | '     envbuf(channel,255)=0                                                              
0c780                 | '     return
0c780     0C 00 00 FF 
0c784     D8 E4 85 F1 | 	sub	objptr, ##6360
0c788     90 07 90 FD | 	jmp	#LR__1101
0c78c                 | LR__1087
0c78c                 | '     if wptr < $80000 then 
0c78c     1C 4E 05 F1 | 	add	fp, #28
0c790     A7 20 02 FB | 	rdlong	local02, fp
0c794     1C 4E 85 F1 | 	sub	fp, #28
0c798     00 04 00 FF 
0c79c     00 20 56 F2 | 	cmps	local02, ##524288 wc
0c7a0     7C 00 90 3D |  if_ae	jmp	#LR__1090
0c7a4                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c7a4     14 4E 05 F1 | 	add	fp, #20
0c7a8     A7 00 68 FC | 	wrlong	#0, fp
0c7ac     14 4E 85 F1 | 	sub	fp, #20
0c7b0     0C 00 00 FF 
0c7b4     D8 E4 05 F1 | 	add	objptr, ##6360
0c7b8     97 2C 48 FB | 	callpa	#(@LR__1089-@LR__1088)>>2,fcache_load_ptr_
0c7bc                 | LR__1088
0c7bc     18 4E 05 F1 | 	add	fp, #24
0c7c0     A7 20 02 FB | 	rdlong	local02, fp
0c7c4     09 20 66 F0 | 	shl	local02, #9
0c7c8     F2 20 02 F1 | 	add	local02, objptr
0c7cc     04 4E 85 F1 | 	sub	fp, #4
0c7d0     A7 1E 02 FB | 	rdlong	local01, fp
0c7d4     0F 1B 02 F6 | 	mov	arg05, local01
0c7d8     01 1A 66 F0 | 	shl	arg05, #1
0c7dc     10 1B 02 F1 | 	add	arg05, local02
0c7e0     08 4E 05 F1 | 	add	fp, #8
0c7e4     A7 12 02 FB | 	rdlong	arg01, fp
0c7e8     01 1E 66 F0 | 	shl	local01, #1
0c7ec     0F 13 02 F1 | 	add	arg01, local01
0c7f0     09 FB E1 FA | 	rdword	result1, arg01
0c7f4     0D FB 51 FC | 	wrword	result1, arg05
0c7f8     08 4E 85 F1 | 	sub	fp, #8
0c7fc     A7 20 02 FB | 	rdlong	local02, fp
0c800     01 20 06 F1 | 	add	local02, #1
0c804     A7 20 62 FC | 	wrlong	local02, fp
0c808     14 4E 85 F1 | 	sub	fp, #20
0c80c     00 21 56 F2 | 	cmps	local02, #256 wc
0c810     A8 FF 9F CD |  if_b	jmp	#LR__1088
0c814                 | LR__1089
0c814     0C 00 00 FF 
0c818     D8 E4 85 F1 | 	sub	objptr, ##6360
0c81c     78 00 90 FD | 	jmp	#LR__1092
0c820                 | LR__1090
0c820                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c820     14 4E 05 F1 | 	add	fp, #20
0c824     A7 00 68 FC | 	wrlong	#0, fp
0c828     14 4E 85 F1 | 	sub	fp, #20
0c82c                 | LR__1091
0c82c     18 4E 05 F1 | 	add	fp, #24
0c830     A7 20 02 FB | 	rdlong	local02, fp
0c834     09 20 66 F0 | 	shl	local02, #9
0c838     0C 00 00 FF 
0c83c     D8 E4 05 F1 | 	add	objptr, ##6360
0c840     F2 20 02 F1 | 	add	local02, objptr
0c844     04 4E 85 F1 | 	sub	fp, #4
0c848     A7 1E 02 FB | 	rdlong	local01, fp
0c84c     0F 23 02 F6 | 	mov	local03, local01
0c850     01 22 66 F0 | 	shl	local03, #1
0c854     10 23 02 F1 | 	add	local03, local02
0c858     08 4E 05 F1 | 	add	fp, #8
0c85c     A7 12 02 FB | 	rdlong	arg01, fp
0c860     1C 4E 85 F1 | 	sub	fp, #28
0c864     01 1E 66 F0 | 	shl	local01, #1
0c868     0F 13 02 F1 | 	add	arg01, local01
0c86c     0C 00 00 FF 
0c870     D8 E4 85 F1 | 	sub	objptr, ##6360
0c874     20 0E B1 FD | 	call	#_psdpeek
0c878     11 FB 51 FC | 	wrword	result1, local03
0c87c     14 4E 05 F1 | 	add	fp, #20
0c880     A7 22 02 FB | 	rdlong	local03, fp
0c884     01 22 06 F1 | 	add	local03, #1
0c888     A7 22 62 FC | 	wrlong	local03, fp
0c88c     14 4E 85 F1 | 	sub	fp, #20
0c890     00 23 56 F2 | 	cmps	local03, #256 wc
0c894     94 FF 9F CD |  if_b	jmp	#LR__1091
0c898                 | LR__1092
0c898     18 4E 05 F1 | 	add	fp, #24
0c89c     A7 22 02 FB | 	rdlong	local03, fp
0c8a0     18 4E 85 F1 | 	sub	fp, #24
0c8a4     09 22 66 F0 | 	shl	local03, #9
0c8a8     0C 00 00 FF 
0c8ac     D8 E4 05 F1 | 	add	objptr, ##6360
0c8b0     F2 22 02 F1 | 	add	local03, objptr
0c8b4     FE 23 06 F1 | 	add	local03, #510
0c8b8     11 01 58 FC | 	wrword	#0, local03
0c8bc                 | '     envbuf(channel,255)=0
0c8bc                 | '     return   
0c8bc     0C 00 00 FF 
0c8c0     D8 E4 85 F1 | 	sub	objptr, ##6360
0c8c4     54 06 90 FD | 	jmp	#LR__1101
0c8c8                 | LR__1093
0c8c8                 | ' 
0c8c8                 | ' if numpar=5 then   						 'simple adsr
0c8c8     10 4E 05 F1 | 	add	fp, #16
0c8cc     A7 20 02 FB | 	rdlong	local02, fp
0c8d0     10 4E 85 F1 | 	sub	fp, #16
0c8d4     05 20 0E F2 | 	cmp	local02, #5 wz
0c8d8     14 06 90 5D |  if_ne	jmp	#LR__1100
0c8dc     44 E9 BF FD | 	call	#_pop
0c8e0     FF 1E 02 F6 | 	mov	local01, result3
0c8e4     40 4E 05 F1 | 	add	fp, #64
0c8e8     A7 FA 61 FC | 	wrlong	result1, fp
0c8ec     04 4E 05 F1 | 	add	fp, #4
0c8f0     A7 FC 61 FC | 	wrlong	result2, fp
0c8f4     04 4E 05 F1 | 	add	fp, #4
0c8f8     A7 1E 62 FC | 	wrlong	local01, fp
0c8fc     08 4E 85 F1 | 	sub	fp, #8
0c900     A7 12 02 F6 | 	mov	arg01, fp
0c904     40 4E 85 F1 | 	sub	fp, #64
0c908     B8 EB BF FD | 	call	#_converttofloat
0c90c     FD 20 02 F6 | 	mov	local02, result1
0c910     2C 4E 05 F1 | 	add	fp, #44
0c914     A7 20 62 FC | 	wrlong	local02, fp
0c918     2C 4E 85 F1 | 	sub	fp, #44
0c91c     04 E9 BF FD | 	call	#_pop
0c920     FF 1E 02 F6 | 	mov	local01, result3
0c924     40 4E 05 F1 | 	add	fp, #64
0c928     A7 FA 61 FC | 	wrlong	result1, fp
0c92c     04 4E 05 F1 | 	add	fp, #4
0c930     A7 FC 61 FC | 	wrlong	result2, fp
0c934     04 4E 05 F1 | 	add	fp, #4
0c938     A7 1E 62 FC | 	wrlong	local01, fp
0c93c     08 4E 85 F1 | 	sub	fp, #8
0c940     A7 12 02 F6 | 	mov	arg01, fp
0c944     40 4E 85 F1 | 	sub	fp, #64
0c948     78 EB BF FD | 	call	#_converttofloat
0c94c     FD 20 02 F6 | 	mov	local02, result1
0c950     28 4E 05 F1 | 	add	fp, #40
0c954     A7 20 62 FC | 	wrlong	local02, fp
0c958     28 4E 85 F1 | 	sub	fp, #40
0c95c     C4 E8 BF FD | 	call	#_pop
0c960     FF 1E 02 F6 | 	mov	local01, result3
0c964     40 4E 05 F1 | 	add	fp, #64
0c968     A7 FA 61 FC | 	wrlong	result1, fp
0c96c     04 4E 05 F1 | 	add	fp, #4
0c970     A7 FC 61 FC | 	wrlong	result2, fp
0c974     04 4E 05 F1 | 	add	fp, #4
0c978     A7 1E 62 FC | 	wrlong	local01, fp
0c97c     08 4E 85 F1 | 	sub	fp, #8
0c980     A7 12 02 F6 | 	mov	arg01, fp
0c984     40 4E 85 F1 | 	sub	fp, #64
0c988     38 EB BF FD | 	call	#_converttofloat
0c98c     FD 20 02 F6 | 	mov	local02, result1
0c990     24 4E 05 F1 | 	add	fp, #36
0c994     A7 20 62 FC | 	wrlong	local02, fp
0c998     24 4E 85 F1 | 	sub	fp, #36
0c99c     84 E8 BF FD | 	call	#_pop
0c9a0     FF 1E 02 F6 | 	mov	local01, result3
0c9a4     40 4E 05 F1 | 	add	fp, #64
0c9a8     A7 FA 61 FC | 	wrlong	result1, fp
0c9ac     04 4E 05 F1 | 	add	fp, #4
0c9b0     A7 FC 61 FC | 	wrlong	result2, fp
0c9b4     04 4E 05 F1 | 	add	fp, #4
0c9b8     A7 1E 62 FC | 	wrlong	local01, fp
0c9bc     08 4E 85 F1 | 	sub	fp, #8
0c9c0     A7 12 02 F6 | 	mov	arg01, fp
0c9c4     40 4E 85 F1 | 	sub	fp, #64
0c9c8     F8 EA BF FD | 	call	#_converttofloat
0c9cc     FD 20 02 F6 | 	mov	local02, result1
0c9d0     20 4E 05 F1 | 	add	fp, #32
0c9d4     A7 20 62 FC | 	wrlong	local02, fp
0c9d8     20 4E 85 F1 | 	sub	fp, #32
0c9dc     44 E8 BF FD | 	call	#_pop
0c9e0     FF 1E 02 F6 | 	mov	local01, result3
0c9e4     40 4E 05 F1 | 	add	fp, #64
0c9e8     A7 FA 61 FC | 	wrlong	result1, fp
0c9ec     04 4E 05 F1 | 	add	fp, #4
0c9f0     A7 FC 61 FC | 	wrlong	result2, fp
0c9f4     04 4E 05 F1 | 	add	fp, #4
0c9f8     A7 1E 62 FC | 	wrlong	local01, fp
0c9fc     08 4E 85 F1 | 	sub	fp, #8
0ca00     A7 12 02 F6 | 	mov	arg01, fp
0ca04     40 4E 85 F1 | 	sub	fp, #64
0ca08     FC E9 BF FD | 	call	#_converttoint
0ca0c     18 4E 05 F1 | 	add	fp, #24
0ca10     A7 FA 61 FC | 	wrlong	result1, fp
0ca14                 | '   t1=pop() : rr=converttofloat(t1)
0ca14                 | '   t1=pop() : ss=converttofloat(t1) 
0ca14                 | '   t1=pop() : dd=converttofloat(t1)
0ca14                 | '   t1=pop() : aa=converttofloat(t1)
0ca14                 | '   t1=pop() : channel=converttoint(t1)
0ca14                 | '   if ss<0.0 then ss=0.0 
0ca14     10 4E 05 F1 | 	add	fp, #16
0ca18     A7 12 02 FB | 	rdlong	arg01, fp
0ca1c     28 4E 85 F1 | 	sub	fp, #40
0ca20     00 14 06 F6 | 	mov	arg02, #0
0ca24     01 16 06 F6 | 	mov	arg03, #1
0ca28     F8 6E B1 FD | 	call	#__system___float_cmp
0ca2c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ca30     28 4E 05 C1 |  if_b	add	fp, #40
0ca34     A7 00 68 CC |  if_b	wrlong	#0, fp
0ca38     28 4E 85 C1 |  if_b	sub	fp, #40
0ca3c                 | '   if ss>1.0 then ss=1.0
0ca3c     28 4E 05 F1 | 	add	fp, #40
0ca40     A7 12 02 FB | 	rdlong	arg01, fp
0ca44     28 4E 85 F1 | 	sub	fp, #40
0ca48     00 C0 1F FF 
0ca4c     00 14 06 F6 | 	mov	arg02, ##1065353216
0ca50     01 16 66 F6 | 	neg	arg03, #1
0ca54     CC 6E B1 FD | 	call	#__system___float_cmp
0ca58     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca5c     28 4E 05 31 |  if_ae	add	fp, #40
0ca60     00 C0 9F 3F 
0ca64     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0ca68     28 4E 85 31 |  if_ae	sub	fp, #40
0ca6c     20 4E 05 F1 | 	add	fp, #32
0ca70     A7 12 02 FB | 	rdlong	arg01, fp
0ca74     04 4E 05 F1 | 	add	fp, #4
0ca78     A7 14 02 FB | 	rdlong	arg02, fp
0ca7c     24 4E 85 F1 | 	sub	fp, #36
0ca80     9C 66 B1 FD | 	call	#__system___float_add
0ca84     FD 12 02 F6 | 	mov	arg01, result1
0ca88     2C 4E 05 F1 | 	add	fp, #44
0ca8c     A7 14 02 FB | 	rdlong	arg02, fp
0ca90     2C 4E 85 F1 | 	sub	fp, #44
0ca94     88 66 B1 FD | 	call	#__system___float_add
0ca98     30 4E 05 F1 | 	add	fp, #48
0ca9c     A7 FA 61 FC | 	wrlong	result1, fp
0caa0     FD 14 02 F6 | 	mov	arg02, result1
0caa4     30 4E 85 F1 | 	sub	fp, #48
0caa8     00 C0 21 FF 
0caac     00 12 06 F6 | 	mov	arg01, ##1132462080
0cab0     40 6C B1 FD | 	call	#__system___float_div
0cab4     34 4E 05 F1 | 	add	fp, #52
0cab8     A7 FA 61 FC | 	wrlong	result1, fp
0cabc     14 4E 85 F1 | 	sub	fp, #20
0cac0     A7 12 02 FB | 	rdlong	arg01, fp
0cac4     FD 14 02 F6 | 	mov	arg02, result1
0cac8     20 4E 85 F1 | 	sub	fp, #32
0cacc     20 6A B1 FD | 	call	#__system___float_mul
0cad0     FD 12 02 F6 | 	mov	arg01, result1
0cad4     01 14 06 F6 | 	mov	arg02, #1
0cad8     DC 6E B1 FD | 	call	#__system___float_tointeger
0cadc     A7 FA 61 FC | 	wrlong	result1, fp
0cae0     24 4E 05 F1 | 	add	fp, #36
0cae4     A7 12 02 FB | 	rdlong	arg01, fp
0cae8     10 4E 05 F1 | 	add	fp, #16
0caec     A7 14 02 FB | 	rdlong	arg02, fp
0caf0     34 4E 85 F1 | 	sub	fp, #52
0caf4     F8 69 B1 FD | 	call	#__system___float_mul
0caf8     FD 12 02 F6 | 	mov	arg01, result1
0cafc     01 14 06 F6 | 	mov	arg02, #1
0cb00     B4 6E B1 FD | 	call	#__system___float_tointeger
0cb04     04 4E 05 F1 | 	add	fp, #4
0cb08     A7 FA 61 FC | 	wrlong	result1, fp
0cb0c     28 4E 05 F1 | 	add	fp, #40
0cb10     A7 12 02 FB | 	rdlong	arg01, fp
0cb14     08 4E 05 F1 | 	add	fp, #8
0cb18     A7 14 02 FB | 	rdlong	arg02, fp
0cb1c     34 4E 85 F1 | 	sub	fp, #52
0cb20     CC 69 B1 FD | 	call	#__system___float_mul
0cb24     FD 12 02 F6 | 	mov	arg01, result1
0cb28     01 14 06 F6 | 	mov	arg02, #1
0cb2c     88 6E B1 FD | 	call	#__system___float_tointeger
0cb30     0C 4E 05 F1 | 	add	fp, #12
0cb34     A7 FA 61 FC | 	wrlong	result1, fp
0cb38     0C 4E 85 F1 | 	sub	fp, #12
0cb3c     F8 BF 23 FF 
0cb40     00 20 06 F6 | 	mov	local02, ##1199566848
0cb44     A7 12 02 FB | 	rdlong	arg01, fp
0cb48     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb4c     1F 24 C6 C9 |  if_b	decod	local04, #31
0cb50     00 24 06 36 |  if_ae	mov	local04, #0
0cb54     94 65 B1 FD | 	call	#__system___float_fromuns
0cb58     12 FB 61 F5 | 	xor	result1, local04
0cb5c     FD 14 02 F6 | 	mov	arg02, result1
0cb60     10 13 02 F6 | 	mov	arg01, local02
0cb64     8C 6B B1 FD | 	call	#__system___float_div
0cb68     38 4E 05 F1 | 	add	fp, #56
0cb6c     A7 FA 61 FC | 	wrlong	result1, fp
0cb70     F8 BF 23 FF 
0cb74     00 20 06 F6 | 	mov	local02, ##1199566848
0cb78     10 4E 85 F1 | 	sub	fp, #16
0cb7c     A7 14 02 FB | 	rdlong	arg02, fp
0cb80     28 4E 85 F1 | 	sub	fp, #40
0cb84     F8 BF 23 FF 
0cb88     00 12 06 F6 | 	mov	arg01, ##1199566848
0cb8c     60 69 B1 FD | 	call	#__system___float_mul
0cb90     FD 14 02 F6 | 	mov	arg02, result1
0cb94     10 13 02 F6 | 	mov	arg01, local02
0cb98     1F 14 E6 F4 | 	bitnot	arg02, #31
0cb9c     80 65 B1 FD | 	call	#__system___float_add
0cba0     FD 20 02 F6 | 	mov	local02, result1
0cba4     04 4E 05 F1 | 	add	fp, #4
0cba8     A7 12 02 FB | 	rdlong	arg01, fp
0cbac     04 4E 85 F1 | 	sub	fp, #4
0cbb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0cbb4     1F 24 C6 C9 |  if_b	decod	local04, #31
0cbb8     00 24 06 36 |  if_ae	mov	local04, #0
0cbbc     2C 65 B1 FD | 	call	#__system___float_fromuns
0cbc0     12 FB 61 F5 | 	xor	result1, local04
0cbc4     FD 14 02 F6 | 	mov	arg02, result1
0cbc8     10 13 02 F6 | 	mov	arg01, local02
0cbcc     24 6B B1 FD | 	call	#__system___float_div
0cbd0     24 4E 05 F1 | 	add	fp, #36
0cbd4     A7 FA 61 FC | 	wrlong	result1, fp
0cbd8     04 4E 05 F1 | 	add	fp, #4
0cbdc     A7 14 02 FB | 	rdlong	arg02, fp
0cbe0     28 4E 85 F1 | 	sub	fp, #40
0cbe4     F8 BF 23 FF 
0cbe8     00 12 06 F6 | 	mov	arg01, ##1199566848
0cbec     00 69 B1 FD | 	call	#__system___float_mul
0cbf0     FD 20 02 F6 | 	mov	local02, result1
0cbf4     0C 4E 05 F1 | 	add	fp, #12
0cbf8     A7 12 02 FB | 	rdlong	arg01, fp
0cbfc     0C 4E 85 F1 | 	sub	fp, #12
0cc00     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc04     1F 24 C6 C9 |  if_b	decod	local04, #31
0cc08     00 24 06 36 |  if_ae	mov	local04, #0
0cc0c     DC 64 B1 FD | 	call	#__system___float_fromuns
0cc10     12 FB 61 F5 | 	xor	result1, local04
0cc14     FD 14 02 F6 | 	mov	arg02, result1
0cc18     10 13 02 F6 | 	mov	arg01, local02
0cc1c     D4 6A B1 FD | 	call	#__system___float_div
0cc20     3C 4E 05 F1 | 	add	fp, #60
0cc24     A7 FA 61 FC | 	wrlong	result1, fp
0cc28     24 4E 85 F1 | 	sub	fp, #36
0cc2c     A7 26 02 FB | 	rdlong	local05, fp
0cc30     18 4E 85 F1 | 	sub	fp, #24
0cc34     01 26 66 F0 | 	shl	local05, #1
0cc38     51 00 00 FF 
0cc3c     C8 E5 05 F1 | 	add	objptr, ##41928
0cc40     F2 26 02 F1 | 	add	local05, objptr
0cc44     A7 28 02 FB | 	rdlong	local06, fp
0cc48     04 4E 05 F1 | 	add	fp, #4
0cc4c     A7 22 02 FB | 	rdlong	local03, fp
0cc50     11 29 02 F1 | 	add	local06, local03
0cc54     13 29 52 FC | 	wrword	local06, local05
0cc58     1C 4E 05 F1 | 	add	fp, #28
0cc5c     A7 00 68 FC | 	wrlong	#0, fp
0cc60                 | '   fulltime=aa+dd+rr
0cc60                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0cc60                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0cc60                 | '   suspoints(channel)=a+d
0cc60                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0cc60     0C 4E 85 F1 | 	sub	fp, #12
0cc64     A7 00 68 FC | 	wrlong	#0, fp
0cc68     14 4E 85 F1 | 	sub	fp, #20
0cc6c     A7 2A 02 FB | 	rdlong	local07, fp
0cc70     51 00 00 FF 
0cc74     C8 E5 85 F1 | 	sub	objptr, ##41928
0cc78                 | LR__1094
0cc78     14 4E 05 F1 | 	add	fp, #20
0cc7c     A7 20 02 FB | 	rdlong	local02, fp
0cc80     14 4E 85 F1 | 	sub	fp, #20
0cc84     15 21 52 F2 | 	cmps	local02, local07 wc
0cc88     80 00 90 3D |  if_ae	jmp	#LR__1095
0cc8c     18 4E 05 F1 | 	add	fp, #24
0cc90     A7 28 02 FB | 	rdlong	local06, fp
0cc94     09 28 66 F0 | 	shl	local06, #9
0cc98     0C 00 00 FF 
0cc9c     D8 E4 05 F1 | 	add	objptr, ##6360
0cca0     F2 28 02 F1 | 	add	local06, objptr
0cca4     04 4E 85 F1 | 	sub	fp, #4
0cca8     A7 26 02 FB | 	rdlong	local05, fp
0ccac     01 26 66 F0 | 	shl	local05, #1
0ccb0     14 27 02 F1 | 	add	local05, local06
0ccb4     0C 4E 05 F1 | 	add	fp, #12
0ccb8     A7 12 02 FB | 	rdlong	arg01, fp
0ccbc     20 4E 85 F1 | 	sub	fp, #32
0ccc0     0C 00 00 FF 
0ccc4     D8 E4 85 F1 | 	sub	objptr, ##6360
0ccc8     01 14 06 F6 | 	mov	arg02, #1
0cccc     E8 6C B1 FD | 	call	#__system___float_tointeger
0ccd0     13 FB 51 FC | 	wrword	result1, local05
0ccd4     20 4E 05 F1 | 	add	fp, #32
0ccd8     A7 12 02 FB | 	rdlong	arg01, fp
0ccdc     18 4E 05 F1 | 	add	fp, #24
0cce0     A7 14 02 FB | 	rdlong	arg02, fp
0cce4     38 4E 85 F1 | 	sub	fp, #56
0cce8     34 64 B1 FD | 	call	#__system___float_add
0ccec     20 4E 05 F1 | 	add	fp, #32
0ccf0     A7 FA 61 FC | 	wrlong	result1, fp
0ccf4     0C 4E 85 F1 | 	sub	fp, #12
0ccf8     A7 28 02 FB | 	rdlong	local06, fp
0ccfc     01 28 06 F1 | 	add	local06, #1
0cd00     A7 28 62 FC | 	wrlong	local06, fp
0cd04     14 4E 85 F1 | 	sub	fp, #20
0cd08     6C FF 9F FD | 	jmp	#LR__1094
0cd0c                 | LR__1095
0cd0c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0cd0c     A7 20 02 FB | 	rdlong	local02, fp
0cd10     14 4E 05 F1 | 	add	fp, #20
0cd14     A7 20 62 FC | 	wrlong	local02, fp
0cd18     14 4E 85 F1 | 	sub	fp, #20
0cd1c     A7 2C 02 FB | 	rdlong	local08, fp
0cd20     04 4E 05 F1 | 	add	fp, #4
0cd24     A7 20 02 FB | 	rdlong	local02, fp
0cd28     04 4E 85 F1 | 	sub	fp, #4
0cd2c     10 2D 02 F1 | 	add	local08, local02
0cd30                 | LR__1096
0cd30     14 4E 05 F1 | 	add	fp, #20
0cd34     A7 20 02 FB | 	rdlong	local02, fp
0cd38     14 4E 85 F1 | 	sub	fp, #20
0cd3c     16 21 52 F2 | 	cmps	local02, local08 wc
0cd40     A8 00 90 3D |  if_ae	jmp	#LR__1097
0cd44     18 4E 05 F1 | 	add	fp, #24
0cd48     A7 2A 02 FB | 	rdlong	local07, fp
0cd4c     09 2A 66 F0 | 	shl	local07, #9
0cd50     0C 00 00 FF 
0cd54     D8 E4 05 F1 | 	add	objptr, ##6360
0cd58     F2 2A 02 F1 | 	add	local07, objptr
0cd5c     04 4E 85 F1 | 	sub	fp, #4
0cd60     A7 28 02 FB | 	rdlong	local06, fp
0cd64     01 28 66 F0 | 	shl	local06, #1
0cd68     15 29 02 F1 | 	add	local06, local07
0cd6c     0C 4E 05 F1 | 	add	fp, #12
0cd70     A7 12 02 FB | 	rdlong	arg01, fp
0cd74     20 4E 85 F1 | 	sub	fp, #32
0cd78     0C 00 00 FF 
0cd7c     D8 E4 85 F1 | 	sub	objptr, ##6360
0cd80     01 14 06 F6 | 	mov	arg02, #1
0cd84     30 6C B1 FD | 	call	#__system___float_tointeger
0cd88     14 FB 51 FC | 	wrword	result1, local06
0cd8c     20 4E 05 F1 | 	add	fp, #32
0cd90     A7 12 02 FB | 	rdlong	arg01, fp
0cd94     04 4E 05 F1 | 	add	fp, #4
0cd98     A7 14 02 FB | 	rdlong	arg02, fp
0cd9c     24 4E 85 F1 | 	sub	fp, #36
0cda0     1F 14 E6 F4 | 	bitnot	arg02, #31
0cda4     78 63 B1 FD | 	call	#__system___float_add
0cda8     20 4E 05 F1 | 	add	fp, #32
0cdac     A7 FA 61 FC | 	wrlong	result1, fp
0cdb0     20 4E 85 F1 | 	sub	fp, #32
0cdb4     FD 12 02 F6 | 	mov	arg01, result1
0cdb8     00 14 06 F6 | 	mov	arg02, #0
0cdbc     01 16 06 F6 | 	mov	arg03, #1
0cdc0     60 6B B1 FD | 	call	#__system___float_cmp
0cdc4     00 FA 55 F2 | 	cmps	result1, #0 wc
0cdc8     20 4E 05 C1 |  if_b	add	fp, #32
0cdcc     A7 00 68 CC |  if_b	wrlong	#0, fp
0cdd0     20 4E 85 C1 |  if_b	sub	fp, #32
0cdd4     14 4E 05 F1 | 	add	fp, #20
0cdd8     A7 2A 02 FB | 	rdlong	local07, fp
0cddc     01 2A 06 F1 | 	add	local07, #1
0cde0     A7 2A 62 FC | 	wrlong	local07, fp
0cde4     14 4E 85 F1 | 	sub	fp, #20
0cde8     44 FF 9F FD | 	jmp	#LR__1096
0cdec                 | LR__1097
0cdec                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0cdec     A7 20 02 FB | 	rdlong	local02, fp
0cdf0     04 4E 05 F1 | 	add	fp, #4
0cdf4     A7 2C 02 FB | 	rdlong	local08, fp
0cdf8     16 21 02 F1 | 	add	local02, local08
0cdfc     10 4E 05 F1 | 	add	fp, #16
0ce00     A7 20 62 FC | 	wrlong	local02, fp
0ce04     14 4E 85 F1 | 	sub	fp, #20
0ce08                 | LR__1098
0ce08     14 4E 05 F1 | 	add	fp, #20
0ce0c     A7 26 02 FB | 	rdlong	local05, fp
0ce10     14 4E 85 F1 | 	sub	fp, #20
0ce14     00 27 56 F2 | 	cmps	local05, #256 wc
0ce18     A8 00 90 3D |  if_ae	jmp	#LR__1099
0ce1c     18 4E 05 F1 | 	add	fp, #24
0ce20     A7 2C 02 FB | 	rdlong	local08, fp
0ce24     09 2C 66 F0 | 	shl	local08, #9
0ce28     0C 00 00 FF 
0ce2c     D8 E4 05 F1 | 	add	objptr, ##6360
0ce30     F2 2C 02 F1 | 	add	local08, objptr
0ce34     04 4E 85 F1 | 	sub	fp, #4
0ce38     A7 2A 02 FB | 	rdlong	local07, fp
0ce3c     01 2A 66 F0 | 	shl	local07, #1
0ce40     16 2B 02 F1 | 	add	local07, local08
0ce44     0C 4E 05 F1 | 	add	fp, #12
0ce48     A7 12 02 FB | 	rdlong	arg01, fp
0ce4c     20 4E 85 F1 | 	sub	fp, #32
0ce50     0C 00 00 FF 
0ce54     D8 E4 85 F1 | 	sub	objptr, ##6360
0ce58     01 14 06 F6 | 	mov	arg02, #1
0ce5c     58 6B B1 FD | 	call	#__system___float_tointeger
0ce60     15 FB 51 FC | 	wrword	result1, local07
0ce64     20 4E 05 F1 | 	add	fp, #32
0ce68     A7 12 02 FB | 	rdlong	arg01, fp
0ce6c     1C 4E 05 F1 | 	add	fp, #28
0ce70     A7 14 02 FB | 	rdlong	arg02, fp
0ce74     3C 4E 85 F1 | 	sub	fp, #60
0ce78     1F 14 E6 F4 | 	bitnot	arg02, #31
0ce7c     A0 62 B1 FD | 	call	#__system___float_add
0ce80     20 4E 05 F1 | 	add	fp, #32
0ce84     A7 FA 61 FC | 	wrlong	result1, fp
0ce88     20 4E 85 F1 | 	sub	fp, #32
0ce8c     FD 12 02 F6 | 	mov	arg01, result1
0ce90     00 14 06 F6 | 	mov	arg02, #0
0ce94     01 16 06 F6 | 	mov	arg03, #1
0ce98     88 6A B1 FD | 	call	#__system___float_cmp
0ce9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cea0     20 4E 05 C1 |  if_b	add	fp, #32
0cea4     A7 00 68 CC |  if_b	wrlong	#0, fp
0cea8     20 4E 85 C1 |  if_b	sub	fp, #32
0ceac     14 4E 05 F1 | 	add	fp, #20
0ceb0     A7 2C 02 FB | 	rdlong	local08, fp
0ceb4     01 2C 06 F1 | 	add	local08, #1
0ceb8     A7 2C 62 FC | 	wrlong	local08, fp
0cebc     14 4E 85 F1 | 	sub	fp, #20
0cec0     44 FF 9F FD | 	jmp	#LR__1098
0cec4                 | LR__1099
0cec4     18 4E 05 F1 | 	add	fp, #24
0cec8     A7 26 02 FB | 	rdlong	local05, fp
0cecc     18 4E 85 F1 | 	sub	fp, #24
0ced0     09 26 66 F0 | 	shl	local05, #9
0ced4     0C 00 00 FF 
0ced8     D8 E4 05 F1 | 	add	objptr, ##6360
0cedc     F2 26 02 F1 | 	add	local05, objptr
0cee0     FE 27 06 F1 | 	add	local05, #510
0cee4     13 01 58 FC | 	wrword	#0, local05
0cee8     0C 00 00 FF 
0ceec     D8 E4 85 F1 | 	sub	objptr, ##6360
0cef0                 | LR__1100
0cef0     18 4E 05 F1 | 	add	fp, #24
0cef4     A7 26 02 FB | 	rdlong	local05, fp
0cef8     18 4E 85 F1 | 	sub	fp, #24
0cefc     09 26 66 F0 | 	shl	local05, #9
0cf00     0C 00 00 FF 
0cf04     D8 E4 05 F1 | 	add	objptr, ##6360
0cf08     F2 26 02 F1 | 	add	local05, objptr
0cf0c     FE 27 06 F1 | 	add	local05, #510
0cf10     13 01 58 FC | 	wrword	#0, local05
0cf14     0C 00 00 FF 
0cf18     D8 E4 85 F1 | 	sub	objptr, ##6360
0cf1c                 | LR__1101
0cf1c     A7 F0 03 F6 | 	mov	ptra, fp
0cf20     B2 00 A0 FD | 	call	#popregs_
0cf24                 | _do_defenv_ret
0cf24     2D 00 64 FD | 	ret
0cf28                 | 
0cf28                 | ' 
0cf28                 | ' '-------------------- end
0cf28                 | ' 
0cf28                 | ' sub do_end
0cf28                 | _do_end
0cf28     4A 00 00 FF 
0cf2c     7C E4 05 F1 | 	add	objptr, ##38012
0cf30     F2 00 02 FB | 	rdlong	_var01, objptr
0cf34     01 00 86 F1 | 	sub	_var01, #1
0cf38     04 E4 05 F1 | 	add	objptr, #4
0cf3c     F2 00 62 FC | 	wrlong	_var01, objptr
0cf40     06 00 00 FF 
0cf44     38 E4 05 F1 | 	add	objptr, ##3128
0cf48     FF FF BF FF 
0cf4c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0cf50     50 00 00 FF 
0cf54     B8 E4 85 F1 | 	sub	objptr, ##41144
0cf58                 | _do_end_ret
0cf58     2D 00 64 FD | 	ret
0cf5c                 | 
0cf5c                 | ' 
0cf5c                 | ' '-------------------- enter
0cf5c                 | ' 
0cf5c                 | ' sub do_enter
0cf5c                 | _do_enter
0cf5c     02 00 00 FF 
0cf60     D2 12 06 F6 | 	mov	arg01, ##1234
0cf64     8C 03 B0 FD | 	call	#_do_load
0cf68                 | _do_enter_ret
0cf68     2D 00 64 FD | 	ret
0cf6c                 | 
0cf6c                 | ' 
0cf6c                 | ' '-------------------- for
0cf6c                 | ' 
0cf6c                 | ' sub do_for()
0cf6c                 | _do_for
0cf6c     01 4A 05 F6 | 	mov	COUNT_, #1
0cf70     A8 00 A0 FD | 	call	#pushregs_
0cf74     10 F0 07 F1 | 	add	ptra, #16
0cf78     50 00 00 FF 
0cf7c     08 E5 05 F1 | 	add	objptr, ##41224
0cf80     F2 12 02 FB | 	rdlong	arg01, objptr
0cf84     01 12 06 F1 | 	add	arg01, #1
0cf88     F2 12 62 FC | 	wrlong	arg01, objptr
0cf8c     50 00 00 FF 
0cf90     08 E5 85 F1 | 	sub	objptr, ##41224
0cf94     8C E2 BF FD | 	call	#_pop
0cf98     A7 FA 61 FC | 	wrlong	result1, fp
0cf9c     04 4E 05 F1 | 	add	fp, #4
0cfa0     A7 FC 61 FC | 	wrlong	result2, fp
0cfa4     04 4E 05 F1 | 	add	fp, #4
0cfa8     A7 FE 61 FC | 	wrlong	result3, fp
0cfac     08 4E 85 F1 | 	sub	fp, #8
0cfb0     50 00 00 FF 
0cfb4     08 E5 05 F1 | 	add	objptr, ##41224
0cfb8     F2 12 02 FB | 	rdlong	arg01, objptr
0cfbc     09 1F 02 F6 | 	mov	local01, arg01
0cfc0     02 1E 66 F0 | 	shl	local01, #2
0cfc4     09 1F 02 F1 | 	add	local01, arg01
0cfc8     02 1E 66 F0 | 	shl	local01, #2
0cfcc     06 00 00 FF 
0cfd0     70 E4 85 F1 | 	sub	objptr, ##3184
0cfd4     F2 1E 02 F1 | 	add	local01, objptr
0cfd8     A7 12 02 FB | 	rdlong	arg01, fp
0cfdc     08 1E 06 F1 | 	add	local01, #8
0cfe0     0F 13 62 FC | 	wrlong	arg01, local01
0cfe4     4A 00 00 FF 
0cfe8     98 E4 85 F1 | 	sub	objptr, ##38040
0cfec     34 E2 BF FD | 	call	#_pop
0cff0     A7 FA 61 FC | 	wrlong	result1, fp
0cff4     04 4E 05 F1 | 	add	fp, #4
0cff8     A7 FC 61 FC | 	wrlong	result2, fp
0cffc     04 4E 05 F1 | 	add	fp, #4
0d000     A7 FE 61 FC | 	wrlong	result3, fp
0d004     08 4E 85 F1 | 	sub	fp, #8
0d008     50 00 00 FF 
0d00c     08 E5 05 F1 | 	add	objptr, ##41224
0d010     F2 12 02 FB | 	rdlong	arg01, objptr
0d014     09 1F 02 F6 | 	mov	local01, arg01
0d018     02 1E 66 F0 | 	shl	local01, #2
0d01c     09 1F 02 F1 | 	add	local01, arg01
0d020     02 1E 66 F0 | 	shl	local01, #2
0d024     06 00 00 FF 
0d028     70 E4 85 F1 | 	sub	objptr, ##3184
0d02c     F2 1E 02 F1 | 	add	local01, objptr
0d030     A7 12 02 F6 | 	mov	arg01, fp
0d034     4A 00 00 FF 
0d038     98 E4 85 F1 | 	sub	objptr, ##38040
0d03c     C8 E3 BF FD | 	call	#_converttoint
0d040     FD 12 02 F6 | 	mov	arg01, result1
0d044     0C 1E 06 F1 | 	add	local01, #12
0d048     0F 13 62 FC | 	wrlong	arg01, local01
0d04c     D4 E1 BF FD | 	call	#_pop
0d050     A7 FA 61 FC | 	wrlong	result1, fp
0d054     04 4E 05 F1 | 	add	fp, #4
0d058     A7 FC 61 FC | 	wrlong	result2, fp
0d05c     04 4E 05 F1 | 	add	fp, #4
0d060     A7 FE 61 FC | 	wrlong	result3, fp
0d064     08 4E 85 F1 | 	sub	fp, #8
0d068     50 00 00 FF 
0d06c     08 E5 05 F1 | 	add	objptr, ##41224
0d070     F2 12 02 FB | 	rdlong	arg01, objptr
0d074     09 1F 02 F6 | 	mov	local01, arg01
0d078     02 1E 66 F0 | 	shl	local01, #2
0d07c     09 1F 02 F1 | 	add	local01, arg01
0d080     02 1E 66 F0 | 	shl	local01, #2
0d084     06 00 00 FF 
0d088     70 E4 85 F1 | 	sub	objptr, ##3184
0d08c     F2 1E 02 F1 | 	add	local01, objptr
0d090     A7 12 02 F6 | 	mov	arg01, fp
0d094     4A 00 00 FF 
0d098     98 E4 85 F1 | 	sub	objptr, ##38040
0d09c     68 E3 BF FD | 	call	#_converttoint
0d0a0     10 1E 06 F1 | 	add	local01, #16
0d0a4     0F FB 61 FC | 	wrlong	result1, local01
0d0a8                 | ' fortop+=1
0d0a8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
0d0a8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
0d0a8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
0d0a8                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
0d0a8     4A 00 00 FF 
0d0ac     80 E4 05 F1 | 	add	objptr, ##38016
0d0b0     F2 12 02 FB | 	rdlong	arg01, objptr
0d0b4     09 1F 02 F6 | 	mov	local01, arg01
0d0b8     01 1E 66 F0 | 	shl	local01, #1
0d0bc     09 1F 02 F1 | 	add	local01, arg01
0d0c0     02 1E 66 F0 | 	shl	local01, #2
0d0c4     03 00 00 FF 
0d0c8     04 E4 85 F1 | 	sub	objptr, ##1540
0d0cc     F2 1E 02 F1 | 	add	local01, objptr
0d0d0     08 1E 06 F1 | 	add	local01, #8
0d0d4     0F 1F 02 FB | 	rdlong	local01, local01
0d0d8     FE 1F 0E F2 | 	cmp	local01, #510 wz
0d0dc     47 00 00 FF 
0d0e0     7C E4 85 F1 | 	sub	objptr, ##36476
0d0e4     70 00 90 5D |  if_ne	jmp	#LR__1110
0d0e8     50 00 00 FF 
0d0ec     08 E5 05 F1 | 	add	objptr, ##41224
0d0f0     F2 12 02 FB | 	rdlong	arg01, objptr
0d0f4     09 1F 02 F6 | 	mov	local01, arg01
0d0f8     02 1E 66 F0 | 	shl	local01, #2
0d0fc     09 1F 02 F1 | 	add	local01, arg01
0d100     02 1E 66 F0 | 	shl	local01, #2
0d104     06 00 00 FF 
0d108     70 E4 85 F1 | 	sub	objptr, ##3184
0d10c     F2 1E 02 F1 | 	add	local01, objptr
0d110     06 00 00 FF 
0d114     20 E4 05 F1 | 	add	objptr, ##3104
0d118     F2 12 02 FB | 	rdlong	arg01, objptr
0d11c     0F 13 62 FC | 	wrlong	arg01, local01
0d120     50 E4 05 F1 | 	add	objptr, #80
0d124     F2 12 02 FB | 	rdlong	arg01, objptr
0d128     09 1F 02 F6 | 	mov	local01, arg01
0d12c     02 1E 66 F0 | 	shl	local01, #2
0d130     09 1F 02 F1 | 	add	local01, arg01
0d134     02 1E 66 F0 | 	shl	local01, #2
0d138     06 00 00 FF 
0d13c     70 E4 85 F1 | 	sub	objptr, ##3184
0d140     F2 1E 02 F1 | 	add	local01, objptr
0d144     04 1E 06 F1 | 	add	local01, #4
0d148     0F 01 68 FC | 	wrlong	#0, local01
0d14c     4A 00 00 FF 
0d150     98 E4 85 F1 | 	sub	objptr, ##38040
0d154     78 00 90 FD | 	jmp	#LR__1111
0d158                 | LR__1110
0d158     50 00 00 FF 
0d15c     08 E5 05 F1 | 	add	objptr, ##41224
0d160     F2 12 02 FB | 	rdlong	arg01, objptr
0d164     09 1F 02 F6 | 	mov	local01, arg01
0d168     02 1E 66 F0 | 	shl	local01, #2
0d16c     09 1F 02 F1 | 	add	local01, arg01
0d170     02 1E 66 F0 | 	shl	local01, #2
0d174     06 00 00 FF 
0d178     70 E4 85 F1 | 	sub	objptr, ##3184
0d17c     F2 1E 02 F1 | 	add	local01, objptr
0d180     06 00 00 FF 
0d184     28 E4 05 F1 | 	add	objptr, ##3112
0d188     F2 12 02 FB | 	rdlong	arg01, objptr
0d18c     0F 13 62 FC | 	wrlong	arg01, local01
0d190     48 E4 05 F1 | 	add	objptr, #72
0d194     F2 12 02 FB | 	rdlong	arg01, objptr
0d198     09 1F 02 F6 | 	mov	local01, arg01
0d19c     02 1E 66 F0 | 	shl	local01, #2
0d1a0     09 1F 02 F1 | 	add	local01, arg01
0d1a4     02 1E 66 F0 | 	shl	local01, #2
0d1a8     06 00 00 FF 
0d1ac     70 E4 85 F1 | 	sub	objptr, ##3184
0d1b0     F2 1E 02 F1 | 	add	local01, objptr
0d1b4     18 E4 85 F1 | 	sub	objptr, #24
0d1b8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1bc     4A 00 00 FF 
0d1c0     80 E4 85 F1 | 	sub	objptr, ##38016
0d1c4     01 12 06 F1 | 	add	arg01, #1
0d1c8     04 1E 06 F1 | 	add	local01, #4
0d1cc     0F 13 62 FC | 	wrlong	arg01, local01
0d1d0                 | LR__1111
0d1d0     A7 F0 03 F6 | 	mov	ptra, fp
0d1d4     B2 00 A0 FD | 	call	#popregs_
0d1d8                 | _do_for_ret
0d1d8     2D 00 64 FD | 	ret
0d1dc                 | 
0d1dc                 | ' 
0d1dc                 | ' '-------------------- gosub
0d1dc                 | ' 
0d1dc                 | ' sub do_gosub()
0d1dc                 | _do_gosub
0d1dc     50 00 00 FF 
0d1e0     0C E5 05 F1 | 	add	objptr, ##41228
0d1e4     F2 00 02 FB | 	rdlong	_var01, objptr
0d1e8     01 00 06 F1 | 	add	_var01, #1
0d1ec     F2 00 62 FC | 	wrlong	_var01, objptr
0d1f0                 | ' gosubtop+=1
0d1f0                 | ' if compiledline(lineptr_e+1).result_type=token_end then
0d1f0     06 00 00 FF 
0d1f4     8C E4 85 F1 | 	sub	objptr, ##3212
0d1f8     F2 00 02 FB | 	rdlong	_var01, objptr
0d1fc     01 00 06 F1 | 	add	_var01, #1
0d200     00 03 02 F6 | 	mov	_var02, _var01
0d204     01 02 66 F0 | 	shl	_var02, #1
0d208     00 03 02 F1 | 	add	_var02, _var01
0d20c     02 02 66 F0 | 	shl	_var02, #2
0d210     03 00 00 FF 
0d214     04 E4 85 F1 | 	sub	objptr, ##1540
0d218     F2 02 02 F1 | 	add	_var02, objptr
0d21c     08 02 06 F1 | 	add	_var02, #8
0d220     01 03 02 FB | 	rdlong	_var02, _var02
0d224     FE 03 0E F2 | 	cmp	_var02, #510 wz
0d228     47 00 00 FF 
0d22c     7C E4 85 F1 | 	sub	objptr, ##36476
0d230     58 00 90 5D |  if_ne	jmp	#LR__1120
0d234     50 00 00 FF 
0d238     0C E5 05 F1 | 	add	objptr, ##41228
0d23c     F2 02 02 FB | 	rdlong	_var02, objptr
0d240     03 02 66 F0 | 	shl	_var02, #3
0d244     03 00 00 FF 
0d248     60 E5 85 F1 | 	sub	objptr, ##1888
0d24c     F2 02 02 F1 | 	add	_var02, objptr
0d250     03 00 00 FF 
0d254     0C E5 05 F1 | 	add	objptr, ##1804
0d258     F2 00 02 FB | 	rdlong	_var01, objptr
0d25c     01 01 62 FC | 	wrlong	_var01, _var02
0d260     54 E4 05 F1 | 	add	objptr, #84
0d264     F2 02 02 FB | 	rdlong	_var02, objptr
0d268     03 02 66 F0 | 	shl	_var02, #3
0d26c     03 00 00 FF 
0d270     60 E5 85 F1 | 	sub	objptr, ##1888
0d274     F2 02 02 F1 | 	add	_var02, objptr
0d278     04 02 06 F1 | 	add	_var02, #4
0d27c     01 01 68 FC | 	wrlong	#0, _var02
0d280     4C 00 00 FF 
0d284     AC E5 85 F1 | 	sub	objptr, ##39340
0d288     64 00 90 FD | 	jmp	#LR__1121
0d28c                 | LR__1120
0d28c     50 00 00 FF 
0d290     0C E5 05 F1 | 	add	objptr, ##41228
0d294     F2 02 02 FB | 	rdlong	_var02, objptr
0d298     03 02 66 F0 | 	shl	_var02, #3
0d29c     03 00 00 FF 
0d2a0     60 E5 85 F1 | 	sub	objptr, ##1888
0d2a4     F2 02 02 F1 | 	add	_var02, objptr
0d2a8     03 00 00 FF 
0d2ac     14 E5 05 F1 | 	add	objptr, ##1812
0d2b0     F2 00 02 FB | 	rdlong	_var01, objptr
0d2b4     01 01 62 FC | 	wrlong	_var01, _var02
0d2b8     4C E4 05 F1 | 	add	objptr, #76
0d2bc     F2 02 02 FB | 	rdlong	_var02, objptr
0d2c0     03 02 66 F0 | 	shl	_var02, #3
0d2c4     03 00 00 FF 
0d2c8     60 E5 85 F1 | 	sub	objptr, ##1888
0d2cc     F2 02 02 F1 | 	add	_var02, objptr
0d2d0     02 00 00 FF 
0d2d4     2C E5 85 F1 | 	sub	objptr, ##1324
0d2d8     F2 00 02 FB | 	rdlong	_var01, objptr
0d2dc     4A 00 00 FF 
0d2e0     80 E4 85 F1 | 	sub	objptr, ##38016
0d2e4     02 00 06 F1 | 	add	_var01, #2
0d2e8     04 02 06 F1 | 	add	_var02, #4
0d2ec     01 01 62 FC | 	wrlong	_var01, _var02
0d2f0                 | LR__1121
0d2f0                 | _do_gosub_ret
0d2f0     2D 00 64 FD | 	ret
0d2f4                 | 
0d2f4                 | ' 
0d2f4                 | ' '-------------------- load
0d2f4                 | ' 
0d2f4                 | ' sub do_load(amode=0 as integer)  
0d2f4                 | _do_load
0d2f4     01 4A 05 F6 | 	mov	COUNT_, #1
0d2f8     A8 00 A0 FD | 	call	#pushregs_
0d2fc     AC F0 07 F1 | 	add	ptra, #172
0d300     A7 12 62 FC | 	wrlong	arg01, fp
0d304     4A 00 00 FF 
0d308     80 E4 05 F1 | 	add	objptr, ##38016
0d30c     F2 14 02 FB | 	rdlong	arg02, objptr
0d310     0A 13 02 F6 | 	mov	arg01, arg02
0d314     01 12 66 F0 | 	shl	arg01, #1
0d318     0A 13 02 F1 | 	add	arg01, arg02
0d31c     02 12 66 F0 | 	shl	arg01, #2
0d320     03 00 00 FF 
0d324     04 E4 85 F1 | 	sub	objptr, ##1540
0d328     F2 12 02 F1 | 	add	arg01, objptr
0d32c     09 15 02 FB | 	rdlong	arg02, arg01
0d330     1C 4E 05 F1 | 	add	fp, #28
0d334     A7 14 62 FC | 	wrlong	arg02, fp
0d338     8C 4E 05 F1 | 	add	fp, #140
0d33c     A7 12 02 F6 | 	mov	arg01, fp
0d340     47 00 00 FF 
0d344     7C E4 85 F1 | 	sub	objptr, ##36476
0d348     80 4E 85 F1 | 	sub	fp, #128
0d34c     09 4F 61 FC | 	wrlong	fp, arg01
0d350                 | ' numpar=compiledline(lineptr_e).result.uresult
0d350                 | ' lpoke varptr(line2$),varptr(line2)
0d350                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0d350     0C 4E 85 F1 | 	sub	fp, #12
0d354     A7 1E 02 FB | 	rdlong	local01, fp
0d358     1C 4E 85 F1 | 	sub	fp, #28
0d35c     01 1E 56 F2 | 	cmps	local01, #1 wc
0d360     24 00 90 CD |  if_b	jmp	#LR__1130
0d364     BC DE BF FD | 	call	#_pop
0d368     04 4E 05 F1 | 	add	fp, #4
0d36c     A7 FA 61 FC | 	wrlong	result1, fp
0d370     04 4E 05 F1 | 	add	fp, #4
0d374     A7 FC 61 FC | 	wrlong	result2, fp
0d378     04 4E 05 F1 | 	add	fp, #4
0d37c     A7 FE 61 FC | 	wrlong	result3, fp
0d380     0C 4E 85 F1 | 	sub	fp, #12
0d384     28 00 90 FD | 	jmp	#LR__1131
0d388                 | LR__1130
0d388     51 00 00 FF 
0d38c     D8 E5 05 F1 | 	add	objptr, ##41944
0d390     F2 1E 02 FB | 	rdlong	local01, objptr
0d394     51 00 00 FF 
0d398     D8 E5 85 F1 | 	sub	objptr, ##41944
0d39c     04 4E 05 F1 | 	add	fp, #4
0d3a0     A7 1E 62 FC | 	wrlong	local01, fp
0d3a4     08 4E 05 F1 | 	add	fp, #8
0d3a8     A7 3E 68 FC | 	wrlong	#31, fp
0d3ac     0C 4E 85 F1 | 	sub	fp, #12
0d3b0                 | LR__1131
0d3b0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0d3b0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0d3b0     0C 4E 05 F1 | 	add	fp, #12
0d3b4     A7 1E 02 FB | 	rdlong	local01, fp
0d3b8     0C 4E 85 F1 | 	sub	fp, #12
0d3bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d3c0     24 00 90 5D |  if_ne	jmp	#LR__1132
0d3c4     04 4E 05 F1 | 	add	fp, #4
0d3c8     A7 12 02 FB | 	rdlong	arg01, fp
0d3cc     04 4E 85 F1 | 	sub	fp, #4
0d3d0     C8 DF BF FD | 	call	#_convertstring
0d3d4     04 4E 05 F1 | 	add	fp, #4
0d3d8     A7 FA 61 FC | 	wrlong	result1, fp
0d3dc     08 4E 05 F1 | 	add	fp, #8
0d3e0     A7 3E 68 FC | 	wrlong	#31, fp
0d3e4     0C 4E 85 F1 | 	sub	fp, #12
0d3e8                 | LR__1132
0d3e8                 | ' if t1.result_type=result_string then
0d3e8     0C 4E 05 F1 | 	add	fp, #12
0d3ec     A7 1E 02 FB | 	rdlong	local01, fp
0d3f0     0C 4E 85 F1 | 	sub	fp, #12
0d3f4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d3f8     E0 02 90 5D |  if_ne	jmp	#LR__1138
0d3fc                 | '   if amode<>1234 then do_new
0d3fc     A7 1E 02 FB | 	rdlong	local01, fp
0d400     02 00 00 FF 
0d404     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
0d408     CC 29 B0 5D |  if_ne	call	#_do_new
0d40c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0d40c     04 4E 05 F1 | 	add	fp, #4
0d410     A7 12 02 FB | 	rdlong	arg01, fp
0d414     04 4E 85 F1 | 	sub	fp, #4
0d418     84 01 00 FF 
0d41c     5C 14 06 F6 | 	mov	arg02, ##@LR__5449
0d420     40 35 B1 FD | 	call	#__system___string_cmp
0d424     00 FA 0D F2 | 	cmp	result1, #0 wz
0d428     24 00 90 5D |  if_ne	jmp	#LR__1133
0d42c     51 00 00 FF 
0d430     D8 E5 05 F1 | 	add	objptr, ##41944
0d434     F2 1E 02 FB | 	rdlong	local01, objptr
0d438     51 00 00 FF 
0d43c     D8 E5 85 F1 | 	sub	objptr, ##41944
0d440     04 4E 05 F1 | 	add	fp, #4
0d444     A7 1E 62 FC | 	wrlong	local01, fp
0d448     04 4E 85 F1 | 	sub	fp, #4
0d44c     20 00 90 FD | 	jmp	#LR__1134
0d450                 | LR__1133
0d450     04 4E 05 F1 | 	add	fp, #4
0d454     A7 1E 02 FB | 	rdlong	local01, fp
0d458     04 4E 85 F1 | 	sub	fp, #4
0d45c     51 00 00 FF 
0d460     D8 E5 05 F1 | 	add	objptr, ##41944
0d464     F2 1E 62 FC | 	wrlong	local01, objptr
0d468     51 00 00 FF 
0d46c     D8 E5 85 F1 | 	sub	objptr, ##41944
0d470                 | LR__1134
0d470                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0d470     09 12 06 F6 | 	mov	arg01, #9
0d474     58 85 B1 FD | 	call	#__system__close
0d478     09 1E 06 F6 | 	mov	local01, #9
0d47c     4A 00 00 FF 
0d480     94 E4 05 F1 | 	add	objptr, ##38036
0d484     F2 12 02 FB | 	rdlong	arg01, objptr
0d488     4A 00 00 FF 
0d48c     94 E4 85 F1 | 	sub	objptr, ##38036
0d490     84 01 00 FF 
0d494     5D 14 06 F6 | 	mov	arg02, ##@LR__5450
0d498     FC 34 B1 FD | 	call	#__system___string_concat
0d49c     FD 12 02 F6 | 	mov	arg01, result1
0d4a0     04 4E 05 F1 | 	add	fp, #4
0d4a4     A7 14 02 FB | 	rdlong	arg02, fp
0d4a8     04 4E 85 F1 | 	sub	fp, #4
0d4ac     E8 34 B1 FD | 	call	#__system___string_concat
0d4b0     FD 14 02 F6 | 	mov	arg02, result1
0d4b4     0F 13 02 F6 | 	mov	arg01, local01
0d4b8     00 16 06 F6 | 	mov	arg03, #0
0d4bc     80 40 B1 FD | 	call	#__system___basic_open_string
0d4c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d4c4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d4c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d4cc     14 4E 05 F1 | 	add	fp, #20
0d4d0     A7 FA 61 FC | 	wrlong	result1, fp
0d4d4                 | '   r=geterr() 
0d4d4                 | '   if r then 
0d4d4     14 4E 85 F1 | 	sub	fp, #20
0d4d8     50 01 90 AD |  if_e	jmp	#LR__1136
0d4dc                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0d4dc     09 12 06 F6 | 	mov	arg01, #9
0d4e0     EC 84 B1 FD | 	call	#__system__close
0d4e4     09 1E 06 F6 | 	mov	local01, #9
0d4e8     4A 00 00 FF 
0d4ec     94 E4 05 F1 | 	add	objptr, ##38036
0d4f0     F2 12 02 FB | 	rdlong	arg01, objptr
0d4f4     4A 00 00 FF 
0d4f8     94 E4 85 F1 | 	sub	objptr, ##38036
0d4fc     84 01 00 FF 
0d500     5F 14 06 F6 | 	mov	arg02, ##@LR__5451
0d504     90 34 B1 FD | 	call	#__system___string_concat
0d508     FD 12 02 F6 | 	mov	arg01, result1
0d50c     04 4E 05 F1 | 	add	fp, #4
0d510     A7 14 02 FB | 	rdlong	arg02, fp
0d514     04 4E 85 F1 | 	sub	fp, #4
0d518     7C 34 B1 FD | 	call	#__system___string_concat
0d51c     FD 12 02 F6 | 	mov	arg01, result1
0d520     84 01 00 FF 
0d524     61 14 06 F6 | 	mov	arg02, ##@LR__5452
0d528     6C 34 B1 FD | 	call	#__system___string_concat
0d52c     FD 14 02 F6 | 	mov	arg02, result1
0d530     0F 13 02 F6 | 	mov	arg01, local01
0d534     00 16 06 F6 | 	mov	arg03, #0
0d538     04 40 B1 FD | 	call	#__system___basic_open_string
0d53c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d540     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d544     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d548     14 4E 05 F1 | 	add	fp, #20
0d54c     A7 FA 61 FC | 	wrlong	result1, fp
0d550                 | '     r=geterr() 
0d550                 | '     if r then 
0d550     14 4E 85 F1 | 	sub	fp, #20
0d554     A0 00 90 AD |  if_e	jmp	#LR__1135
0d558                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0d558     00 12 06 F6 | 	mov	arg01, #0
0d55c     40 8E B1 FD | 	call	#__system___getiolock_0540
0d560     FD 12 02 F6 | 	mov	arg01, result1
0d564     D4 33 B1 FD | 	call	#__system___lockmem
0d568     84 01 00 FF 
0d56c     66 14 06 F6 | 	mov	arg02, ##@LR__5453
0d570     00 12 06 F6 | 	mov	arg01, #0
0d574     00 16 06 F6 | 	mov	arg03, #0
0d578     B4 40 B1 FD | 	call	#__system___basic_print_string
0d57c     14 4E 05 F1 | 	add	fp, #20
0d580     A7 14 02 FB | 	rdlong	arg02, fp
0d584     14 4E 85 F1 | 	sub	fp, #20
0d588     00 12 06 F6 | 	mov	arg01, #0
0d58c     00 16 06 F6 | 	mov	arg03, #0
0d590     0A 18 06 F6 | 	mov	arg04, #10
0d594     DC 40 B1 FD | 	call	#__system___basic_print_integer
0d598     84 01 00 FF 
0d59c     74 14 06 F6 | 	mov	arg02, ##@LR__5454
0d5a0     00 12 06 F6 | 	mov	arg01, #0
0d5a4     00 16 06 F6 | 	mov	arg03, #0
0d5a8     84 40 B1 FD | 	call	#__system___basic_print_string
0d5ac     00 1E 06 F6 | 	mov	local01, #0
0d5b0     14 4E 05 F1 | 	add	fp, #20
0d5b4     A7 12 02 FB | 	rdlong	arg01, fp
0d5b8     14 4E 85 F1 | 	sub	fp, #20
0d5bc     44 5A B1 FD | 	call	#__system___strerror
0d5c0     FD 14 02 F6 | 	mov	arg02, result1
0d5c4     0F 13 02 F6 | 	mov	arg01, local01
0d5c8     00 16 06 F6 | 	mov	arg03, #0
0d5cc     60 40 B1 FD | 	call	#__system___basic_print_string
0d5d0     00 12 06 F6 | 	mov	arg01, #0
0d5d4     0A 14 06 F6 | 	mov	arg02, #10
0d5d8     00 16 06 F6 | 	mov	arg03, #0
0d5dc     F8 3F B1 FD | 	call	#__system___basic_print_char
0d5e0     00 12 06 F6 | 	mov	arg01, #0
0d5e4     B8 8D B1 FD | 	call	#__system___getiolock_0540
0d5e8     FD 00 68 FC | 	wrlong	#0, result1
0d5ec     09 12 06 F6 | 	mov	arg01, #9
0d5f0     DC 83 B1 FD | 	call	#__system__close
0d5f4     7C 01 90 FD | 	jmp	#LR__1140
0d5f8                 | LR__1135
0d5f8     51 00 00 FF 
0d5fc     D8 E5 05 F1 | 	add	objptr, ##41944
0d600     F2 12 02 FB | 	rdlong	arg01, objptr
0d604     51 00 00 FF 
0d608     D8 E5 85 F1 | 	sub	objptr, ##41944
0d60c     84 01 00 FF 
0d610     77 14 06 F6 | 	mov	arg02, ##@LR__5455
0d614     80 33 B1 FD | 	call	#__system___string_concat
0d618     51 00 00 FF 
0d61c     D8 E5 05 F1 | 	add	objptr, ##41944
0d620     F2 FA 61 FC | 	wrlong	result1, objptr
0d624     51 00 00 FF 
0d628     D8 E5 85 F1 | 	sub	objptr, ##41944
0d62c                 | LR__1136
0d62c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0d62c     09 12 06 F6 | 	mov	arg01, #9
0d630     9C 83 B1 FD | 	call	#__system__close
0d634     09 1E 06 F6 | 	mov	local01, #9
0d638     4A 00 00 FF 
0d63c     94 E4 05 F1 | 	add	objptr, ##38036
0d640     F2 12 02 FB | 	rdlong	arg01, objptr
0d644     4A 00 00 FF 
0d648     94 E4 85 F1 | 	sub	objptr, ##38036
0d64c     84 01 00 FF 
0d650     7C 14 06 F6 | 	mov	arg02, ##@LR__5456
0d654     40 33 B1 FD | 	call	#__system___string_concat
0d658     FD 12 02 F6 | 	mov	arg01, result1
0d65c     51 00 00 FF 
0d660     D8 E5 05 F1 | 	add	objptr, ##41944
0d664     F2 14 02 FB | 	rdlong	arg02, objptr
0d668     51 00 00 FF 
0d66c     D8 E5 85 F1 | 	sub	objptr, ##41944
0d670     24 33 B1 FD | 	call	#__system___string_concat
0d674     FD 14 02 F6 | 	mov	arg02, result1
0d678     0F 13 02 F6 | 	mov	arg01, local01
0d67c     00 16 06 F6 | 	mov	arg03, #0
0d680     BC 3E B1 FD | 	call	#__system___basic_open_string
0d684                 | '   do
0d684                 | LR__1137
0d684     09 12 06 F6 | 	mov	arg01, #9
0d688     BC 34 B1 FD | 	call	#__system___basic_read_line
0d68c     FD 1E 02 F6 | 	mov	local01, result1
0d690     37 00 00 FF 
0d694     1C E4 05 F1 | 	add	objptr, ##28188
0d698     F2 1E 62 FC | 	wrlong	local01, objptr
0d69c     37 00 00 FF 
0d6a0     1C E4 85 F1 | 	sub	objptr, ##28188
0d6a4     D0 3F BF FD | 	call	#_interpret
0d6a8     37 00 00 FF 
0d6ac     1C E4 05 F1 | 	add	objptr, ##28188
0d6b0     F2 12 02 FB | 	rdlong	arg01, objptr
0d6b4     37 00 00 FF 
0d6b8     1C E4 85 F1 | 	sub	objptr, ##28188
0d6bc     84 01 00 FF 
0d6c0     7E 14 06 F6 | 	mov	arg02, ##@LR__5457
0d6c4     9C 32 B1 FD | 	call	#__system___string_cmp
0d6c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d6cc     B4 FF 9F 5D |  if_ne	jmp	#LR__1137
0d6d0                 | '   close #9   
0d6d0     09 12 06 F6 | 	mov	arg01, #9
0d6d4     F8 82 B1 FD | 	call	#__system__close
0d6d8     08 00 90 FD | 	jmp	#LR__1139
0d6dc                 | LR__1138
0d6dc     1E 12 06 F6 | 	mov	arg01, #30
0d6e0     C8 FC B0 FD | 	call	#_printerror
0d6e4                 | LR__1139
0d6e4                 | ' print "Loaded ";currentdir$+"/"+loadname
0d6e4     00 12 06 F6 | 	mov	arg01, #0
0d6e8     B4 8C B1 FD | 	call	#__system___getiolock_0540
0d6ec     FD 12 02 F6 | 	mov	arg01, result1
0d6f0     48 32 B1 FD | 	call	#__system___lockmem
0d6f4     84 01 00 FF 
0d6f8     7F 14 06 F6 | 	mov	arg02, ##@LR__5458
0d6fc     00 12 06 F6 | 	mov	arg01, #0
0d700     00 16 06 F6 | 	mov	arg03, #0
0d704     28 3F B1 FD | 	call	#__system___basic_print_string
0d708     00 1E 06 F6 | 	mov	local01, #0
0d70c     4A 00 00 FF 
0d710     94 E4 05 F1 | 	add	objptr, ##38036
0d714     F2 12 02 FB | 	rdlong	arg01, objptr
0d718     4A 00 00 FF 
0d71c     94 E4 85 F1 | 	sub	objptr, ##38036
0d720     84 01 00 FF 
0d724     87 14 06 F6 | 	mov	arg02, ##@LR__5459
0d728     6C 32 B1 FD | 	call	#__system___string_concat
0d72c     FD 12 02 F6 | 	mov	arg01, result1
0d730     51 00 00 FF 
0d734     D8 E5 05 F1 | 	add	objptr, ##41944
0d738     F2 14 02 FB | 	rdlong	arg02, objptr
0d73c     51 00 00 FF 
0d740     D8 E5 85 F1 | 	sub	objptr, ##41944
0d744     50 32 B1 FD | 	call	#__system___string_concat
0d748     FD 14 02 F6 | 	mov	arg02, result1
0d74c     0F 13 02 F6 | 	mov	arg01, local01
0d750     00 16 06 F6 | 	mov	arg03, #0
0d754     D8 3E B1 FD | 	call	#__system___basic_print_string
0d758     00 12 06 F6 | 	mov	arg01, #0
0d75c     0A 14 06 F6 | 	mov	arg02, #10
0d760     00 16 06 F6 | 	mov	arg03, #0
0d764     70 3E B1 FD | 	call	#__system___basic_print_char
0d768     00 12 06 F6 | 	mov	arg01, #0
0d76c     30 8C B1 FD | 	call	#__system___getiolock_0540
0d770     FD 00 68 FC | 	wrlong	#0, result1
0d774                 | LR__1140
0d774     A7 F0 03 F6 | 	mov	ptra, fp
0d778     B2 00 A0 FD | 	call	#popregs_
0d77c                 | _do_load_ret
0d77c     2D 00 64 FD | 	ret
0d780                 | 
0d780                 | ' 
0d780                 | ' '-------------------- next
0d780                 | ' 
0d780                 | ' sub do_next()
0d780                 | _do_next
0d780     04 4A 05 F6 | 	mov	COUNT_, #4
0d784     A8 00 A0 FD | 	call	#pushregs_
0d788     98 DA BF FD | 	call	#_pop
0d78c     FD 1E 02 F6 | 	mov	local01, result1
0d790     FE 20 02 F6 | 	mov	local02, result2
0d794     FF 22 02 F6 | 	mov	local03, result3
0d798                 | ' t1=pop() :varnum=t1.result.uresult
0d798                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
0d798     50 00 00 FF 
0d79c     08 E5 05 F1 | 	add	objptr, ##41224
0d7a0     F2 12 02 FB | 	rdlong	arg01, objptr
0d7a4     09 15 02 F6 | 	mov	arg02, arg01
0d7a8     02 14 66 F0 | 	shl	arg02, #2
0d7ac     09 15 02 F1 | 	add	arg02, arg01
0d7b0     02 14 66 F0 | 	shl	arg02, #2
0d7b4     06 00 00 FF 
0d7b8     70 E4 85 F1 | 	sub	objptr, ##3184
0d7bc     F2 14 02 F1 | 	add	arg02, objptr
0d7c0     08 14 06 F1 | 	add	arg02, #8
0d7c4     0A 15 02 FB | 	rdlong	arg02, arg02
0d7c8     0F 15 0A F2 | 	cmp	arg02, local01 wz
0d7cc     4A 00 00 FF 
0d7d0     98 E4 85 F1 | 	sub	objptr, ##38040
0d7d4     0C 00 90 AD |  if_e	jmp	#LR__1150
0d7d8     25 12 06 F6 | 	mov	arg01, #37
0d7dc     CC FB B0 FD | 	call	#_printerror
0d7e0     54 03 90 FD | 	jmp	#LR__1157
0d7e4                 | LR__1150
0d7e4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
0d7e4     0F 15 02 F6 | 	mov	arg02, local01
0d7e8     04 14 66 F0 | 	shl	arg02, #4
0d7ec     14 00 00 FF 
0d7f0     F8 E5 05 F1 | 	add	objptr, ##10744
0d7f4     F2 14 02 F1 | 	add	arg02, objptr
0d7f8     0C 14 06 F1 | 	add	arg02, #12
0d7fc     0A 15 02 FB | 	rdlong	arg02, arg02
0d800     1E 14 0E F2 | 	cmp	arg02, #30 wz
0d804     14 00 00 FF 
0d808     F8 E5 85 F1 | 	sub	objptr, ##10744
0d80c     54 00 90 5D |  if_ne	jmp	#LR__1151
0d810     0F 15 02 F6 | 	mov	arg02, local01
0d814     04 14 66 F0 | 	shl	arg02, #4
0d818     14 00 00 FF 
0d81c     F8 E5 05 F1 | 	add	objptr, ##10744
0d820     F2 14 02 F1 | 	add	arg02, objptr
0d824     0C 14 06 F1 | 	add	arg02, #12
0d828     0A 39 68 FC | 	wrlong	#28, arg02
0d82c     0F 25 02 F6 | 	mov	local04, local01
0d830     04 24 66 F0 | 	shl	local04, #4
0d834     F2 24 02 F1 | 	add	local04, objptr
0d838     0F 13 02 F6 | 	mov	arg01, local01
0d83c     04 12 66 F0 | 	shl	arg01, #4
0d840     F2 12 02 F1 | 	add	arg01, objptr
0d844     04 12 06 F1 | 	add	arg01, #4
0d848     09 13 02 FB | 	rdlong	arg01, arg01
0d84c     14 00 00 FF 
0d850     F8 E5 85 F1 | 	sub	objptr, ##10744
0d854     01 14 06 F6 | 	mov	arg02, #1
0d858     5C 61 B1 FD | 	call	#__system___float_tointeger
0d85c     04 24 06 F1 | 	add	local04, #4
0d860     12 FB 61 FC | 	wrlong	result1, local04
0d864                 | LR__1151
0d864     50 00 00 FF 
0d868     08 E5 05 F1 | 	add	objptr, ##41224
0d86c     F2 12 02 FB | 	rdlong	arg01, objptr
0d870     09 25 02 F6 | 	mov	local04, arg01
0d874     02 24 66 F0 | 	shl	local04, #2
0d878     09 25 02 F1 | 	add	local04, arg01
0d87c     02 24 66 F0 | 	shl	local04, #2
0d880     06 00 00 FF 
0d884     70 E4 85 F1 | 	sub	objptr, ##3184
0d888     F2 24 02 F1 | 	add	local04, objptr
0d88c     0C 24 06 F1 | 	add	local04, #12
0d890     12 25 02 FB | 	rdlong	local04, local04
0d894     0F 13 02 F6 | 	mov	arg01, local01
0d898     04 12 66 F0 | 	shl	arg01, #4
0d89c     35 00 00 FF 
0d8a0     A0 E4 85 F1 | 	sub	objptr, ##27296
0d8a4     F2 12 02 F1 | 	add	arg01, objptr
0d8a8     0F FF 01 F6 | 	mov	result3, local01
0d8ac     04 FE 65 F0 | 	shl	result3, #4
0d8b0     F2 FE 01 F1 | 	add	result3, objptr
0d8b4     04 FE 05 F1 | 	add	result3, #4
0d8b8     FF FE 01 FB | 	rdlong	result3, result3
0d8bc     12 FF 01 F1 | 	add	result3, local04
0d8c0     04 12 06 F1 | 	add	arg01, #4
0d8c4     09 FF 61 FC | 	wrlong	result3, arg01
0d8c8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
0d8c8                 | ' if fortable(fortop).stepval>=0 then
0d8c8     3B 00 00 FF 
0d8cc     10 E5 05 F1 | 	add	objptr, ##30480
0d8d0     F2 12 02 FB | 	rdlong	arg01, objptr
0d8d4     09 25 02 F6 | 	mov	local04, arg01
0d8d8     02 24 66 F0 | 	shl	local04, #2
0d8dc     09 25 02 F1 | 	add	local04, arg01
0d8e0     02 24 66 F0 | 	shl	local04, #2
0d8e4     06 00 00 FF 
0d8e8     70 E4 85 F1 | 	sub	objptr, ##3184
0d8ec     F2 24 02 F1 | 	add	local04, objptr
0d8f0     0C 24 06 F1 | 	add	local04, #12
0d8f4     12 25 02 FB | 	rdlong	local04, local04
0d8f8     00 24 56 F2 | 	cmps	local04, #0 wc
0d8fc     4A 00 00 FF 
0d900     98 E4 85 F1 | 	sub	objptr, ##38040
0d904     78 00 90 CD |  if_b	jmp	#LR__1152
0d908                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
0d908     04 1E 66 F0 | 	shl	local01, #4
0d90c     14 00 00 FF 
0d910     F8 E5 05 F1 | 	add	objptr, ##10744
0d914     F2 1E 02 F1 | 	add	local01, objptr
0d918     3B 00 00 FF 
0d91c     10 E5 05 F1 | 	add	objptr, ##30480
0d920     F2 24 02 FB | 	rdlong	local04, objptr
0d924     12 13 02 F6 | 	mov	arg01, local04
0d928     02 12 66 F0 | 	shl	arg01, #2
0d92c     12 13 02 F1 | 	add	arg01, local04
0d930     02 12 66 F0 | 	shl	arg01, #2
0d934     06 00 00 FF 
0d938     70 E4 85 F1 | 	sub	objptr, ##3184
0d93c     F2 12 02 F1 | 	add	arg01, objptr
0d940     04 1E 06 F1 | 	add	local01, #4
0d944     0F 25 02 FB | 	rdlong	local04, local01
0d948     10 12 06 F1 | 	add	arg01, #16
0d94c     09 13 02 FB | 	rdlong	arg01, arg01
0d950     09 25 5A F2 | 	cmps	local04, arg01 wcz
0d954     4A 00 00 FF 
0d958     98 E4 85 F1 | 	sub	objptr, ##38040
0d95c     9C 00 90 ED |  if_be	jmp	#LR__1154
0d960     50 00 00 FF 
0d964     08 E5 05 F1 | 	add	objptr, ##41224
0d968     F2 24 02 FB | 	rdlong	local04, objptr
0d96c     01 24 86 F1 | 	sub	local04, #1
0d970     F2 24 62 FC | 	wrlong	local04, objptr
0d974     50 00 00 FF 
0d978     08 E5 85 F1 | 	sub	objptr, ##41224
0d97c     B8 01 90 FD | 	jmp	#LR__1157
0d980                 | LR__1152
0d980                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
0d980     0F 13 02 F6 | 	mov	arg01, local01
0d984     04 12 66 F0 | 	shl	arg01, #4
0d988     14 00 00 FF 
0d98c     F8 E5 05 F1 | 	add	objptr, ##10744
0d990     F2 12 02 F1 | 	add	arg01, objptr
0d994     3B 00 00 FF 
0d998     10 E5 05 F1 | 	add	objptr, ##30480
0d99c     F2 24 02 FB | 	rdlong	local04, objptr
0d9a0     12 1F 02 F6 | 	mov	local01, local04
0d9a4     02 1E 66 F0 | 	shl	local01, #2
0d9a8     12 1F 02 F1 | 	add	local01, local04
0d9ac     02 1E 66 F0 | 	shl	local01, #2
0d9b0     06 00 00 FF 
0d9b4     70 E4 85 F1 | 	sub	objptr, ##3184
0d9b8     F2 1E 02 F1 | 	add	local01, objptr
0d9bc     04 12 06 F1 | 	add	arg01, #4
0d9c0     09 13 02 FB | 	rdlong	arg01, arg01
0d9c4     10 1E 06 F1 | 	add	local01, #16
0d9c8     0F 1F 02 FB | 	rdlong	local01, local01
0d9cc     0F 13 52 F2 | 	cmps	arg01, local01 wc
0d9d0     4A 00 00 FF 
0d9d4     98 E4 85 F1 | 	sub	objptr, ##38040
0d9d8     20 00 90 3D |  if_ae	jmp	#LR__1153
0d9dc     50 00 00 FF 
0d9e0     08 E5 05 F1 | 	add	objptr, ##41224
0d9e4     F2 24 02 FB | 	rdlong	local04, objptr
0d9e8     01 24 86 F1 | 	sub	local04, #1
0d9ec     F2 24 62 FC | 	wrlong	local04, objptr
0d9f0     50 00 00 FF 
0d9f4     08 E5 85 F1 | 	sub	objptr, ##41224
0d9f8     3C 01 90 FD | 	jmp	#LR__1157
0d9fc                 | LR__1153
0d9fc                 | LR__1154
0d9fc                 | ' ' if not returned, goto pointer 
0d9fc                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
0d9fc     50 00 00 FF 
0da00     EC E4 05 F1 | 	add	objptr, ##41196
0da04     F2 24 02 FB | 	rdlong	local04, objptr
0da08     50 00 00 FF 
0da0c     EC E4 85 F1 | 	sub	objptr, ##41196
0da10     01 24 16 F2 | 	cmp	local04, #1 wc
0da14     DC 00 90 CD |  if_b	jmp	#LR__1155
0da18     50 00 00 FF 
0da1c     08 E5 05 F1 | 	add	objptr, ##41224
0da20     F2 1E 02 FB | 	rdlong	local01, objptr
0da24     0F 25 02 F6 | 	mov	local04, local01
0da28     02 24 66 F0 | 	shl	local04, #2
0da2c     0F 25 02 F1 | 	add	local04, local01
0da30     02 24 66 F0 | 	shl	local04, #2
0da34     06 00 00 FF 
0da38     70 E4 85 F1 | 	sub	objptr, ##3184
0da3c     F2 24 02 F1 | 	add	local04, objptr
0da40     06 00 00 FF 
0da44     20 E4 05 F1 | 	add	objptr, ##3104
0da48     F2 1E 02 FB | 	rdlong	local01, objptr
0da4c     50 00 00 FF 
0da50     B8 E4 85 F1 | 	sub	objptr, ##41144
0da54     12 25 02 FB | 	rdlong	local04, local04
0da58     12 1F 0A F2 | 	cmp	local01, local04 wz
0da5c     94 00 90 AD |  if_e	jmp	#LR__1155
0da60     50 00 00 FF 
0da64     08 E5 05 F1 | 	add	objptr, ##41224
0da68     F2 1E 02 FB | 	rdlong	local01, objptr
0da6c     0F 25 02 F6 | 	mov	local04, local01
0da70     02 24 66 F0 | 	shl	local04, #2
0da74     0F 25 02 F1 | 	add	local04, local01
0da78     02 24 66 F0 | 	shl	local04, #2
0da7c     06 00 00 FF 
0da80     70 E4 85 F1 | 	sub	objptr, ##3184
0da84     F2 24 02 F1 | 	add	local04, objptr
0da88     12 25 02 FB | 	rdlong	local04, local04
0da8c     06 00 00 FF 
0da90     20 E4 05 F1 | 	add	objptr, ##3104
0da94     F2 24 62 FC | 	wrlong	local04, objptr
0da98     50 E4 05 F1 | 	add	objptr, #80
0da9c     F2 1E 02 FB | 	rdlong	local01, objptr
0daa0     0F 25 02 F6 | 	mov	local04, local01
0daa4     02 24 66 F0 | 	shl	local04, #2
0daa8     0F 25 02 F1 | 	add	local04, local01
0daac     02 24 66 F0 | 	shl	local04, #2
0dab0     06 00 00 FF 
0dab4     70 E4 85 F1 | 	sub	objptr, ##3184
0dab8     F2 24 02 F1 | 	add	local04, objptr
0dabc     04 24 06 F1 | 	add	local04, #4
0dac0     12 25 02 FB | 	rdlong	local04, local04
0dac4     06 00 00 FF 
0dac8     24 E4 05 F1 | 	add	objptr, ##3108
0dacc     F2 24 62 FC | 	wrlong	local04, objptr
0dad0     06 00 00 FF 
0dad4     40 E4 85 F1 | 	sub	objptr, ##3136
0dad8     F2 24 02 FB | 	rdlong	local04, objptr
0dadc     01 24 86 F1 | 	sub	local04, #1
0dae0     04 E4 05 F1 | 	add	objptr, #4
0dae4     F2 24 62 FC | 	wrlong	local04, objptr
0dae8     4A 00 00 FF 
0daec     80 E4 85 F1 | 	sub	objptr, ##38016
0daf0     44 00 90 FD | 	jmp	#LR__1156
0daf4                 | LR__1155
0daf4     50 00 00 FF 
0daf8     08 E5 05 F1 | 	add	objptr, ##41224
0dafc     F2 24 02 FB | 	rdlong	local04, objptr
0db00     12 1F 02 F6 | 	mov	local01, local04
0db04     02 1E 66 F0 | 	shl	local01, #2
0db08     12 1F 02 F1 | 	add	local01, local04
0db0c     02 1E 66 F0 | 	shl	local01, #2
0db10     06 00 00 FF 
0db14     70 E4 85 F1 | 	sub	objptr, ##3184
0db18     F2 1E 02 F1 | 	add	local01, objptr
0db1c     04 1E 06 F1 | 	add	local01, #4
0db20     0F 1F 02 FB | 	rdlong	local01, local01
0db24     01 1E 86 F1 | 	sub	local01, #1
0db28     18 E4 85 F1 | 	sub	objptr, #24
0db2c     F2 1E 62 FC | 	wrlong	local01, objptr
0db30     4A 00 00 FF 
0db34     80 E4 85 F1 | 	sub	objptr, ##38016
0db38                 | LR__1156
0db38                 | LR__1157
0db38     A7 F0 03 F6 | 	mov	ptra, fp
0db3c     B2 00 A0 FD | 	call	#popregs_
0db40                 | _do_next_ret
0db40     2D 00 64 FD | 	ret
0db44                 | 
0db44                 | ' 
0db44                 | ' '-------------------- play
0db44                 | ' 
0db44                 | ' sub do_play
0db44                 | _do_play
0db44     08 4A 05 F6 | 	mov	COUNT_, #8
0db48     A8 00 A0 FD | 	call	#pushregs_
0db4c     7C F0 07 F1 | 	add	ptra, #124
0db50     68 4E 05 F1 | 	add	fp, #104
0db54     77 CC A1 FF 
0db58     A7 7C 6B FC | 	wrlong	##1134096318, fp
0db5c                 | ' speed_coeff=305.873
0db5c                 | ' 
0db5c                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0db5c     64 4E 85 F1 | 	sub	fp, #100
0db60     A7 00 68 FC | 	wrlong	#0, fp
0db64     97 18 48 FB | 	callpa	#(@LR__1161-@LR__1160)>>2,fcache_load_ptr_
0db68                 | LR__1160
0db68     A7 16 02 FB | 	rdlong	arg03, fp
0db6c     02 16 66 F0 | 	shl	arg03, #2
0db70     34 4E 05 F1 | 	add	fp, #52
0db74     A7 16 02 F1 | 	add	arg03, fp
0db78     00 00 E0 FF 
0db7c     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0db80     34 4E 85 F1 | 	sub	fp, #52
0db84     A7 1E 02 FB | 	rdlong	local01, fp
0db88     01 1E 06 F1 | 	add	local01, #1
0db8c     A7 1E 62 FC | 	wrlong	local01, fp
0db90     09 1E 56 F2 | 	cmps	local01, #9 wc
0db94     D0 FF 9F CD |  if_b	jmp	#LR__1160
0db98                 | LR__1161
0db98     04 4E 85 F1 | 	sub	fp, #4
0db9c     4A 00 00 FF 
0dba0     80 E4 05 F1 | 	add	objptr, ##38016
0dba4     F2 20 02 FB | 	rdlong	local02, objptr
0dba8     10 23 02 F6 | 	mov	local03, local02
0dbac     01 22 66 F0 | 	shl	local03, #1
0dbb0     10 23 02 F1 | 	add	local03, local02
0dbb4     02 22 66 F0 | 	shl	local03, #2
0dbb8     03 00 00 FF 
0dbbc     04 E4 85 F1 | 	sub	objptr, ##1540
0dbc0     F2 22 02 F1 | 	add	local03, objptr
0dbc4     11 25 02 FB | 	rdlong	local04, local03
0dbc8     A7 24 62 FC | 	wrlong	local04, fp
0dbcc                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbcc                 | ' for i=numpar to 1 step -1 
0dbcc     04 4E 05 F1 | 	add	fp, #4
0dbd0     A7 24 62 FC | 	wrlong	local04, fp
0dbd4     04 4E 85 F1 | 	sub	fp, #4
0dbd8     47 00 00 FF 
0dbdc     7C E4 85 F1 | 	sub	objptr, ##36476
0dbe0                 | LR__1162
0dbe0     40 D6 BF FD | 	call	#_pop
0dbe4     5C 4E 05 F1 | 	add	fp, #92
0dbe8     A7 FA 61 FC | 	wrlong	result1, fp
0dbec     04 4E 05 F1 | 	add	fp, #4
0dbf0     A7 FC 61 FC | 	wrlong	result2, fp
0dbf4     04 4E 05 F1 | 	add	fp, #4
0dbf8     A7 FE 61 FC | 	wrlong	result3, fp
0dbfc     60 4E 85 F1 | 	sub	fp, #96
0dc00     A7 22 02 FB | 	rdlong	local03, fp
0dc04     01 22 86 F1 | 	sub	local03, #1
0dc08     02 22 66 F0 | 	shl	local03, #2
0dc0c     34 4E 05 F1 | 	add	fp, #52
0dc10     A7 22 02 F1 | 	add	local03, fp
0dc14     24 4E 05 F1 | 	add	fp, #36
0dc18     A7 26 02 F6 | 	mov	local05, fp
0dc1c     13 13 02 F6 | 	mov	arg01, local05
0dc20     5C 4E 85 F1 | 	sub	fp, #92
0dc24     9C D8 BF FD | 	call	#_converttofloat
0dc28     11 FB 61 FC | 	wrlong	result1, local03
0dc2c     04 4E 05 F1 | 	add	fp, #4
0dc30     A7 1E 02 FB | 	rdlong	local01, fp
0dc34     01 1E 86 F1 | 	sub	local01, #1
0dc38     A7 1E 62 FC | 	wrlong	local01, fp
0dc3c     04 4E 85 F1 | 	sub	fp, #4
0dc40     01 1E 56 F2 | 	cmps	local01, #1 wc
0dc44     98 FF 9F 3D |  if_ae	jmp	#LR__1162
0dc48                 | ' 
0dc48                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0dc48     38 4E 05 F1 | 	add	fp, #56
0dc4c     A7 12 02 FB | 	rdlong	arg01, fp
0dc50     38 4E 85 F1 | 	sub	fp, #56
0dc54     00 14 06 F6 | 	mov	arg02, #0
0dc58     01 16 06 F6 | 	mov	arg03, #1
0dc5c     C4 5C B1 FD | 	call	#__system___float_cmp
0dc60     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc64     0C 4E 05 C1 |  if_b	add	fp, #12
0dc68     A7 00 68 CC |  if_b	wrlong	#0, fp
0dc6c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc70     2C 00 90 CD |  if_b	jmp	#LR__1163
0dc74     38 4E 05 F1 | 	add	fp, #56
0dc78     A7 12 02 FB | 	rdlong	arg01, fp
0dc7c     38 4E 85 F1 | 	sub	fp, #56
0dc80     01 14 06 F6 | 	mov	arg02, #1
0dc84     30 5D B1 FD | 	call	#__system___float_tointeger
0dc88     FD 1E 52 F6 | 	abs	local01, result1 wc
0dc8c     07 1E 06 F5 | 	and	local01, #7
0dc90     0F 1F 82 F6 | 	negc	local01, local01
0dc94     0C 4E 05 F1 | 	add	fp, #12
0dc98     A7 1E 62 FC | 	wrlong	local01, fp
0dc9c     0C 4E 85 F1 | 	sub	fp, #12
0dca0                 | LR__1163
0dca0                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0dca0     3C 4E 05 F1 | 	add	fp, #60
0dca4     A7 12 02 FB | 	rdlong	arg01, fp
0dca8     3C 4E 85 F1 | 	sub	fp, #60
0dcac     00 14 06 F6 | 	mov	arg02, #0
0dcb0     01 16 06 F6 | 	mov	arg03, #1
0dcb4     6C 5C B1 FD | 	call	#__system___float_cmp
0dcb8     00 FA 55 F2 | 	cmps	result1, #0 wc
0dcbc     40 00 90 3D |  if_ae	jmp	#LR__1164
0dcc0     0C 4E 05 F1 | 	add	fp, #12
0dcc4     A7 20 02 FB | 	rdlong	local02, fp
0dcc8     10 23 02 F6 | 	mov	local03, local02
0dccc     01 22 66 F0 | 	shl	local03, #1
0dcd0     10 23 02 F1 | 	add	local03, local02
0dcd4     03 22 66 F0 | 	shl	local03, #3
0dcd8     14 00 00 FF 
0dcdc     38 E5 05 F1 | 	add	objptr, ##10552
0dce0     F2 22 02 F1 | 	add	local03, objptr
0dce4     11 29 02 FB | 	rdlong	local06, local03
0dce8     60 4E 05 F1 | 	add	fp, #96
0dcec     A7 28 62 FC | 	wrlong	local06, fp
0dcf0     6C 4E 85 F1 | 	sub	fp, #108
0dcf4     14 00 00 FF 
0dcf8     38 E5 85 F1 | 	sub	objptr, ##10552
0dcfc     44 00 90 FD | 	jmp	#LR__1165
0dd00                 | LR__1164
0dd00     3C 4E 05 F1 | 	add	fp, #60
0dd04     A7 24 02 FB | 	rdlong	local04, fp
0dd08     30 4E 05 F1 | 	add	fp, #48
0dd0c     A7 24 62 FC | 	wrlong	local04, fp
0dd10     60 4E 85 F1 | 	sub	fp, #96
0dd14     A7 20 02 FB | 	rdlong	local02, fp
0dd18     10 23 02 F6 | 	mov	local03, local02
0dd1c     01 22 66 F0 | 	shl	local03, #1
0dd20     10 23 02 F1 | 	add	local03, local02
0dd24     03 22 66 F0 | 	shl	local03, #3
0dd28     14 00 00 FF 
0dd2c     38 E5 05 F1 | 	add	objptr, ##10552
0dd30     F2 22 02 F1 | 	add	local03, objptr
0dd34     0C 4E 85 F1 | 	sub	fp, #12
0dd38     11 25 62 FC | 	wrlong	local04, local03
0dd3c     14 00 00 FF 
0dd40     38 E5 85 F1 | 	sub	objptr, ##10552
0dd44                 | LR__1165
0dd44                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0dd44     40 4E 05 F1 | 	add	fp, #64
0dd48     A7 12 02 FB | 	rdlong	arg01, fp
0dd4c     40 4E 85 F1 | 	sub	fp, #64
0dd50     00 14 06 F6 | 	mov	arg02, #0
0dd54     01 16 06 F6 | 	mov	arg03, #1
0dd58     C8 5B B1 FD | 	call	#__system___float_cmp
0dd5c     00 FA 55 F2 | 	cmps	result1, #0 wc
0dd60     24 00 90 CD |  if_b	jmp	#LR__1166
0dd64     40 4E 05 F1 | 	add	fp, #64
0dd68     A7 12 02 FB | 	rdlong	arg01, fp
0dd6c     40 4E 85 F1 | 	sub	fp, #64
0dd70     20 0E 23 FF 
0dd74     00 14 06 F6 | 	mov	arg02, ##1176256512
0dd78     01 16 66 F6 | 	neg	arg03, #1
0dd7c     A4 5B B1 FD | 	call	#__system___float_cmp
0dd80     01 FA 55 F2 | 	cmps	result1, #1 wc
0dd84     48 00 90 CD |  if_b	jmp	#LR__1167
0dd88                 | LR__1166
0dd88     0C 4E 05 F1 | 	add	fp, #12
0dd8c     A7 22 02 FB | 	rdlong	local03, fp
0dd90     11 2B 02 F6 | 	mov	local07, local03
0dd94     01 2A 66 F0 | 	shl	local07, #1
0dd98     11 2B 02 F1 | 	add	local07, local03
0dd9c     03 2A 66 F0 | 	shl	local07, #3
0dda0     14 00 00 FF 
0dda4     38 E5 05 F1 | 	add	objptr, ##10552
0dda8     F2 2A 02 F1 | 	add	local07, objptr
0ddac     06 2A 06 F1 | 	add	local07, #6
0ddb0     15 27 E2 FA | 	rdword	local05, local07
0ddb4     13 25 32 F9 | 	getword	local04, local05, #0
0ddb8     1C 4E 05 F1 | 	add	fp, #28
0ddbc     A7 24 62 FC | 	wrlong	local04, fp
0ddc0     28 4E 85 F1 | 	sub	fp, #40
0ddc4     14 00 00 FF 
0ddc8     38 E5 85 F1 | 	sub	objptr, ##10552
0ddcc     54 00 90 FD | 	jmp	#LR__1168
0ddd0                 | LR__1167
0ddd0     40 4E 05 F1 | 	add	fp, #64
0ddd4     A7 12 02 FB | 	rdlong	arg01, fp
0ddd8     40 4E 85 F1 | 	sub	fp, #64
0dddc     01 14 06 F6 | 	mov	arg02, #1
0dde0     D4 5B B1 FD | 	call	#__system___float_tointeger
0dde4     28 4E 05 F1 | 	add	fp, #40
0dde8     A7 FA 61 FC | 	wrlong	result1, fp
0ddec     1C 4E 85 F1 | 	sub	fp, #28
0ddf0     A7 20 02 FB | 	rdlong	local02, fp
0ddf4     10 23 02 F6 | 	mov	local03, local02
0ddf8     01 22 66 F0 | 	shl	local03, #1
0ddfc     10 23 02 F1 | 	add	local03, local02
0de00     03 22 66 F0 | 	shl	local03, #3
0de04     14 00 00 FF 
0de08     38 E5 05 F1 | 	add	objptr, ##10552
0de0c     F2 22 02 F1 | 	add	local03, objptr
0de10     0C 4E 85 F1 | 	sub	fp, #12
0de14     06 22 06 F1 | 	add	local03, #6
0de18     11 FB 51 FC | 	wrword	result1, local03
0de1c     14 00 00 FF 
0de20     38 E5 85 F1 | 	sub	objptr, ##10552
0de24                 | LR__1168
0de24                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0de24     44 4E 05 F1 | 	add	fp, #68
0de28     A7 12 02 FB | 	rdlong	arg01, fp
0de2c     44 4E 85 F1 | 	sub	fp, #68
0de30     00 14 06 F6 | 	mov	arg02, #0
0de34     01 16 06 F6 | 	mov	arg03, #1
0de38     E8 5A B1 FD | 	call	#__system___float_cmp
0de3c     00 FA 55 F2 | 	cmps	result1, #0 wc
0de40     24 00 90 CD |  if_b	jmp	#LR__1169
0de44     44 4E 05 F1 | 	add	fp, #68
0de48     A7 12 02 FB | 	rdlong	arg01, fp
0de4c     44 4E 85 F1 | 	sub	fp, #68
0de50     89 C1 20 FF 
0de54     6F 14 06 F6 | 	mov	arg02, ##1099108975
0de58     01 16 66 F6 | 	neg	arg03, #1
0de5c     C4 5A B1 FD | 	call	#__system___float_cmp
0de60     01 FA 55 F2 | 	cmps	result1, #1 wc
0de64     44 00 90 CD |  if_b	jmp	#LR__1170
0de68                 | LR__1169
0de68     0C 4E 05 F1 | 	add	fp, #12
0de6c     A7 20 02 FB | 	rdlong	local02, fp
0de70     10 23 02 F6 | 	mov	local03, local02
0de74     01 22 66 F0 | 	shl	local03, #1
0de78     10 23 02 F1 | 	add	local03, local02
0de7c     03 22 66 F0 | 	shl	local03, #3
0de80     14 00 00 FF 
0de84     38 E5 05 F1 | 	add	objptr, ##10552
0de88     F2 22 02 F1 | 	add	local03, objptr
0de8c     0C 22 06 F1 | 	add	local03, #12
0de90     11 29 02 FB | 	rdlong	local06, local03
0de94     68 4E 05 F1 | 	add	fp, #104
0de98     A7 28 62 FC | 	wrlong	local06, fp
0de9c     74 4E 85 F1 | 	sub	fp, #116
0dea0     14 00 00 FF 
0dea4     38 E5 85 F1 | 	sub	objptr, ##10552
0dea8     48 00 90 FD | 	jmp	#LR__1171
0deac                 | LR__1170
0deac     44 4E 05 F1 | 	add	fp, #68
0deb0     A7 24 02 FB | 	rdlong	local04, fp
0deb4     30 4E 05 F1 | 	add	fp, #48
0deb8     A7 24 62 FC | 	wrlong	local04, fp
0debc     68 4E 85 F1 | 	sub	fp, #104
0dec0     A7 20 02 FB | 	rdlong	local02, fp
0dec4     10 23 02 F6 | 	mov	local03, local02
0dec8     01 22 66 F0 | 	shl	local03, #1
0decc     10 23 02 F1 | 	add	local03, local02
0ded0     03 22 66 F0 | 	shl	local03, #3
0ded4     14 00 00 FF 
0ded8     38 E5 05 F1 | 	add	objptr, ##10552
0dedc     F2 22 02 F1 | 	add	local03, objptr
0dee0     0C 4E 85 F1 | 	sub	fp, #12
0dee4     0C 22 06 F1 | 	add	local03, #12
0dee8     11 25 62 FC | 	wrlong	local04, local03
0deec     14 00 00 FF 
0def0     38 E5 85 F1 | 	sub	objptr, ##10552
0def4                 | LR__1171
0def4                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0def4     48 4E 05 F1 | 	add	fp, #72
0def8     A7 12 02 FB | 	rdlong	arg01, fp
0defc     48 4E 85 F1 | 	sub	fp, #72
0df00     00 14 06 F6 | 	mov	arg02, #0
0df04     01 16 06 F6 | 	mov	arg03, #1
0df08     18 5A B1 FD | 	call	#__system___float_cmp
0df0c     00 FA 55 F2 | 	cmps	result1, #0 wc
0df10     24 00 90 CD |  if_b	jmp	#LR__1172
0df14     48 4E 05 F1 | 	add	fp, #72
0df18     A7 12 02 FB | 	rdlong	arg01, fp
0df1c     48 4E 85 F1 | 	sub	fp, #72
0df20     00 00 21 FF 
0df24     00 14 06 F6 | 	mov	arg02, ##1107296256
0df28     01 16 66 F6 | 	neg	arg03, #1
0df2c     F4 59 B1 FD | 	call	#__system___float_cmp
0df30     01 FA 55 F2 | 	cmps	result1, #1 wc
0df34     48 00 90 CD |  if_b	jmp	#LR__1173
0df38                 | LR__1172
0df38     0C 4E 05 F1 | 	add	fp, #12
0df3c     A7 22 02 FB | 	rdlong	local03, fp
0df40     11 2B 02 F6 | 	mov	local07, local03
0df44     01 2A 66 F0 | 	shl	local07, #1
0df48     11 2B 02 F1 | 	add	local07, local03
0df4c     03 2A 66 F0 | 	shl	local07, #3
0df50     14 00 00 FF 
0df54     38 E5 05 F1 | 	add	objptr, ##10552
0df58     F2 2A 02 F1 | 	add	local07, objptr
0df5c     04 2A 06 F1 | 	add	local07, #4
0df60     15 27 C2 FA | 	rdbyte	local05, local07
0df64     13 25 E2 F8 | 	getbyte	local04, local05, #0
0df68     14 4E 05 F1 | 	add	fp, #20
0df6c     A7 24 62 FC | 	wrlong	local04, fp
0df70     20 4E 85 F1 | 	sub	fp, #32
0df74     14 00 00 FF 
0df78     38 E5 85 F1 | 	sub	objptr, ##10552
0df7c     54 00 90 FD | 	jmp	#LR__1174
0df80                 | LR__1173
0df80     48 4E 05 F1 | 	add	fp, #72
0df84     A7 12 02 FB | 	rdlong	arg01, fp
0df88     48 4E 85 F1 | 	sub	fp, #72
0df8c     01 14 06 F6 | 	mov	arg02, #1
0df90     24 5A B1 FD | 	call	#__system___float_tointeger
0df94     20 4E 05 F1 | 	add	fp, #32
0df98     A7 FA 61 FC | 	wrlong	result1, fp
0df9c     14 4E 85 F1 | 	sub	fp, #20
0dfa0     A7 20 02 FB | 	rdlong	local02, fp
0dfa4     10 23 02 F6 | 	mov	local03, local02
0dfa8     01 22 66 F0 | 	shl	local03, #1
0dfac     10 23 02 F1 | 	add	local03, local02
0dfb0     03 22 66 F0 | 	shl	local03, #3
0dfb4     14 00 00 FF 
0dfb8     38 E5 05 F1 | 	add	objptr, ##10552
0dfbc     F2 22 02 F1 | 	add	local03, objptr
0dfc0     0C 4E 85 F1 | 	sub	fp, #12
0dfc4     04 22 06 F1 | 	add	local03, #4
0dfc8     11 FB 41 FC | 	wrbyte	result1, local03
0dfcc     14 00 00 FF 
0dfd0     38 E5 85 F1 | 	sub	objptr, ##10552
0dfd4                 | LR__1174
0dfd4                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0dfd4     4C 4E 05 F1 | 	add	fp, #76
0dfd8     A7 12 02 FB | 	rdlong	arg01, fp
0dfdc     4C 4E 85 F1 | 	sub	fp, #76
0dfe0     00 14 06 F6 | 	mov	arg02, #0
0dfe4     01 16 06 F6 | 	mov	arg03, #1
0dfe8     38 59 B1 FD | 	call	#__system___float_cmp
0dfec     00 FA 55 F2 | 	cmps	result1, #0 wc
0dff0     24 00 90 CD |  if_b	jmp	#LR__1175
0dff4     4C 4E 05 F1 | 	add	fp, #76
0dff8     A7 12 02 FB | 	rdlong	arg01, fp
0dffc     4C 4E 85 F1 | 	sub	fp, #76
0e000     00 80 20 FF 
0e004     00 14 06 F6 | 	mov	arg02, ##1090519040
0e008     01 16 66 F6 | 	neg	arg03, #1
0e00c     14 59 B1 FD | 	call	#__system___float_cmp
0e010     01 FA 55 F2 | 	cmps	result1, #1 wc
0e014     48 00 90 CD |  if_b	jmp	#LR__1176
0e018                 | LR__1175
0e018     0C 4E 05 F1 | 	add	fp, #12
0e01c     A7 22 02 FB | 	rdlong	local03, fp
0e020     11 2B 02 F6 | 	mov	local07, local03
0e024     01 2A 66 F0 | 	shl	local07, #1
0e028     11 2B 02 F1 | 	add	local07, local03
0e02c     03 2A 66 F0 | 	shl	local07, #3
0e030     14 00 00 FF 
0e034     38 E5 05 F1 | 	add	objptr, ##10552
0e038     F2 2A 02 F1 | 	add	local07, objptr
0e03c     05 2A 06 F1 | 	add	local07, #5
0e040     15 27 C2 FA | 	rdbyte	local05, local07
0e044     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e048     18 4E 05 F1 | 	add	fp, #24
0e04c     A7 24 62 FC | 	wrlong	local04, fp
0e050     24 4E 85 F1 | 	sub	fp, #36
0e054     14 00 00 FF 
0e058     38 E5 85 F1 | 	sub	objptr, ##10552
0e05c     54 00 90 FD | 	jmp	#LR__1177
0e060                 | LR__1176
0e060     4C 4E 05 F1 | 	add	fp, #76
0e064     A7 12 02 FB | 	rdlong	arg01, fp
0e068     4C 4E 85 F1 | 	sub	fp, #76
0e06c     01 14 06 F6 | 	mov	arg02, #1
0e070     44 59 B1 FD | 	call	#__system___float_tointeger
0e074     24 4E 05 F1 | 	add	fp, #36
0e078     A7 FA 61 FC | 	wrlong	result1, fp
0e07c     18 4E 85 F1 | 	sub	fp, #24
0e080     A7 20 02 FB | 	rdlong	local02, fp
0e084     10 23 02 F6 | 	mov	local03, local02
0e088     01 22 66 F0 | 	shl	local03, #1
0e08c     10 23 02 F1 | 	add	local03, local02
0e090     03 22 66 F0 | 	shl	local03, #3
0e094     14 00 00 FF 
0e098     38 E5 05 F1 | 	add	objptr, ##10552
0e09c     F2 22 02 F1 | 	add	local03, objptr
0e0a0     0C 4E 85 F1 | 	sub	fp, #12
0e0a4     05 22 06 F1 | 	add	local03, #5
0e0a8     11 FB 41 FC | 	wrbyte	result1, local03
0e0ac     14 00 00 FF 
0e0b0     38 E5 85 F1 | 	sub	objptr, ##10552
0e0b4                 | LR__1177
0e0b4                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0e0b4     50 4E 05 F1 | 	add	fp, #80
0e0b8     A7 12 02 FB | 	rdlong	arg01, fp
0e0bc     50 4E 85 F1 | 	sub	fp, #80
0e0c0     00 14 06 F6 | 	mov	arg02, #0
0e0c4     01 16 06 F6 | 	mov	arg03, #1
0e0c8     58 58 B1 FD | 	call	#__system___float_cmp
0e0cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0e0d0     24 00 90 CD |  if_b	jmp	#LR__1178
0e0d4     50 4E 05 F1 | 	add	fp, #80
0e0d8     A7 12 02 FB | 	rdlong	arg01, fp
0e0dc     50 4E 85 F1 | 	sub	fp, #80
0e0e0     00 3D 22 FF 
0e0e4     00 14 06 F6 | 	mov	arg02, ##1148846080
0e0e8     01 16 66 F6 | 	neg	arg03, #1
0e0ec     34 58 B1 FD | 	call	#__system___float_cmp
0e0f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0e0f4     44 00 90 CD |  if_b	jmp	#LR__1179
0e0f8                 | LR__1178
0e0f8     0C 4E 05 F1 | 	add	fp, #12
0e0fc     A7 20 02 FB | 	rdlong	local02, fp
0e100     10 23 02 F6 | 	mov	local03, local02
0e104     01 22 66 F0 | 	shl	local03, #1
0e108     10 23 02 F1 | 	add	local03, local02
0e10c     03 22 66 F0 | 	shl	local03, #3
0e110     14 00 00 FF 
0e114     38 E5 05 F1 | 	add	objptr, ##10552
0e118     F2 22 02 F1 | 	add	local03, objptr
0e11c     08 22 06 F1 | 	add	local03, #8
0e120     11 29 02 FB | 	rdlong	local06, local03
0e124     6C 4E 05 F1 | 	add	fp, #108
0e128     A7 28 62 FC | 	wrlong	local06, fp
0e12c     78 4E 85 F1 | 	sub	fp, #120
0e130     14 00 00 FF 
0e134     38 E5 85 F1 | 	sub	objptr, ##10552
0e138     48 00 90 FD | 	jmp	#LR__1180
0e13c                 | LR__1179
0e13c     50 4E 05 F1 | 	add	fp, #80
0e140     A7 28 02 FB | 	rdlong	local06, fp
0e144     28 4E 05 F1 | 	add	fp, #40
0e148     A7 28 62 FC | 	wrlong	local06, fp
0e14c     6C 4E 85 F1 | 	sub	fp, #108
0e150     A7 20 02 FB | 	rdlong	local02, fp
0e154     10 23 02 F6 | 	mov	local03, local02
0e158     01 22 66 F0 | 	shl	local03, #1
0e15c     10 23 02 F1 | 	add	local03, local02
0e160     03 22 66 F0 | 	shl	local03, #3
0e164     14 00 00 FF 
0e168     38 E5 05 F1 | 	add	objptr, ##10552
0e16c     F2 22 02 F1 | 	add	local03, objptr
0e170     0C 4E 85 F1 | 	sub	fp, #12
0e174     08 22 06 F1 | 	add	local03, #8
0e178     11 29 62 FC | 	wrlong	local06, local03
0e17c     14 00 00 FF 
0e180     38 E5 85 F1 | 	sub	objptr, ##10552
0e184                 | LR__1180
0e184                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0e184     54 4E 05 F1 | 	add	fp, #84
0e188     A7 12 02 FB | 	rdlong	arg01, fp
0e18c     54 4E 85 F1 | 	sub	fp, #84
0e190     00 C0 5F FF 
0e194     00 14 06 F6 | 	mov	arg02, ##-1082130432
0e198     01 16 06 F6 | 	mov	arg03, #1
0e19c     84 57 B1 FD | 	call	#__system___float_cmp
0e1a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e1a4     24 00 90 CD |  if_b	jmp	#LR__1181
0e1a8     54 4E 05 F1 | 	add	fp, #84
0e1ac     A7 12 02 FB | 	rdlong	arg01, fp
0e1b0     54 4E 85 F1 | 	sub	fp, #84
0e1b4     00 C0 1F FF 
0e1b8     00 14 06 F6 | 	mov	arg02, ##1065353216
0e1bc     01 16 66 F6 | 	neg	arg03, #1
0e1c0     60 57 B1 FD | 	call	#__system___float_cmp
0e1c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e1c8     44 00 90 CD |  if_b	jmp	#LR__1182
0e1cc                 | LR__1181
0e1cc     0C 4E 05 F1 | 	add	fp, #12
0e1d0     A7 20 02 FB | 	rdlong	local02, fp
0e1d4     10 23 02 F6 | 	mov	local03, local02
0e1d8     01 22 66 F0 | 	shl	local03, #1
0e1dc     10 23 02 F1 | 	add	local03, local02
0e1e0     03 22 66 F0 | 	shl	local03, #3
0e1e4     14 00 00 FF 
0e1e8     38 E5 05 F1 | 	add	objptr, ##10552
0e1ec     F2 22 02 F1 | 	add	local03, objptr
0e1f0     10 22 06 F1 | 	add	local03, #16
0e1f4     11 29 02 FB | 	rdlong	local06, local03
0e1f8     64 4E 05 F1 | 	add	fp, #100
0e1fc     A7 28 62 FC | 	wrlong	local06, fp
0e200     70 4E 85 F1 | 	sub	fp, #112
0e204     14 00 00 FF 
0e208     38 E5 85 F1 | 	sub	objptr, ##10552
0e20c     48 00 90 FD | 	jmp	#LR__1183
0e210                 | LR__1182
0e210     54 4E 05 F1 | 	add	fp, #84
0e214     A7 28 02 FB | 	rdlong	local06, fp
0e218     1C 4E 05 F1 | 	add	fp, #28
0e21c     A7 28 62 FC | 	wrlong	local06, fp
0e220     64 4E 85 F1 | 	sub	fp, #100
0e224     A7 20 02 FB | 	rdlong	local02, fp
0e228     10 23 02 F6 | 	mov	local03, local02
0e22c     01 22 66 F0 | 	shl	local03, #1
0e230     10 23 02 F1 | 	add	local03, local02
0e234     03 22 66 F0 | 	shl	local03, #3
0e238     14 00 00 FF 
0e23c     38 E5 05 F1 | 	add	objptr, ##10552
0e240     F2 22 02 F1 | 	add	local03, objptr
0e244     0C 4E 85 F1 | 	sub	fp, #12
0e248     10 22 06 F1 | 	add	local03, #16
0e24c     11 29 62 FC | 	wrlong	local06, local03
0e250     14 00 00 FF 
0e254     38 E5 85 F1 | 	sub	objptr, ##10552
0e258                 | LR__1183
0e258                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0e258     58 4E 05 F1 | 	add	fp, #88
0e25c     A7 12 02 FB | 	rdlong	arg01, fp
0e260     58 4E 85 F1 | 	sub	fp, #88
0e264     00 14 06 F6 | 	mov	arg02, #0
0e268     01 16 06 F6 | 	mov	arg03, #1
0e26c     B4 56 B1 FD | 	call	#__system___float_cmp
0e270     00 FA 55 F2 | 	cmps	result1, #0 wc
0e274     24 00 90 CD |  if_b	jmp	#LR__1184
0e278     58 4E 05 F1 | 	add	fp, #88
0e27c     A7 12 02 FB | 	rdlong	arg01, fp
0e280     58 4E 85 F1 | 	sub	fp, #88
0e284     80 BF 21 FF 
0e288     00 14 06 F6 | 	mov	arg02, ##1132396544
0e28c     01 16 66 F6 | 	neg	arg03, #1
0e290     90 56 B1 FD | 	call	#__system___float_cmp
0e294     01 FA 55 F2 | 	cmps	result1, #1 wc
0e298     44 00 90 CD |  if_b	jmp	#LR__1185
0e29c                 | LR__1184
0e29c     0C 4E 05 F1 | 	add	fp, #12
0e2a0     A7 22 02 FB | 	rdlong	local03, fp
0e2a4     11 2B 02 F6 | 	mov	local07, local03
0e2a8     01 2A 66 F0 | 	shl	local07, #1
0e2ac     11 2B 02 F1 | 	add	local07, local03
0e2b0     03 2A 66 F0 | 	shl	local07, #3
0e2b4     14 00 00 FF 
0e2b8     38 E5 05 F1 | 	add	objptr, ##10552
0e2bc     F2 2A 02 F1 | 	add	local07, objptr
0e2c0     14 2A 06 F1 | 	add	local07, #20
0e2c4     15 25 E2 FA | 	rdword	local04, local07
0e2c8     20 4E 05 F1 | 	add	fp, #32
0e2cc     A7 24 62 FC | 	wrlong	local04, fp
0e2d0     2C 4E 85 F1 | 	sub	fp, #44
0e2d4     14 00 00 FF 
0e2d8     38 E5 85 F1 | 	sub	objptr, ##10552
0e2dc     54 00 90 FD | 	jmp	#LR__1186
0e2e0                 | LR__1185
0e2e0     58 4E 05 F1 | 	add	fp, #88
0e2e4     A7 12 02 FB | 	rdlong	arg01, fp
0e2e8     58 4E 85 F1 | 	sub	fp, #88
0e2ec     01 14 06 F6 | 	mov	arg02, #1
0e2f0     C4 56 B1 FD | 	call	#__system___float_tointeger
0e2f4     2C 4E 05 F1 | 	add	fp, #44
0e2f8     A7 FA 61 FC | 	wrlong	result1, fp
0e2fc     20 4E 85 F1 | 	sub	fp, #32
0e300     A7 20 02 FB | 	rdlong	local02, fp
0e304     10 23 02 F6 | 	mov	local03, local02
0e308     01 22 66 F0 | 	shl	local03, #1
0e30c     10 23 02 F1 | 	add	local03, local02
0e310     03 22 66 F0 | 	shl	local03, #3
0e314     14 00 00 FF 
0e318     38 E5 05 F1 | 	add	objptr, ##10552
0e31c     F2 22 02 F1 | 	add	local03, objptr
0e320     0C 4E 85 F1 | 	sub	fp, #12
0e324     14 22 06 F1 | 	add	local03, #20
0e328     11 FB 51 FC | 	wrword	result1, local03
0e32c     14 00 00 FF 
0e330     38 E5 85 F1 | 	sub	objptr, ##10552
0e334                 | LR__1186
0e334     6C 4E 05 F1 | 	add	fp, #108
0e338     A7 14 02 FB | 	rdlong	arg02, fp
0e33c     6C 4E 85 F1 | 	sub	fp, #108
0e340     FC 16 20 FF 
0e344     54 12 06 F6 | 	mov	arg01, ##1076754516
0e348     74 61 B1 FD | 	call	#__system____builtin_logbase
0e34c     FD 24 02 F6 | 	mov	local04, result1
0e350     1E 14 C6 F9 | 	decod	arg02, #30
0e354     FC 16 20 FF 
0e358     54 12 06 F6 | 	mov	arg01, ##1076754516
0e35c     60 61 B1 FD | 	call	#__system____builtin_logbase
0e360     FD 14 02 F6 | 	mov	arg02, result1
0e364     12 13 02 F6 | 	mov	arg01, local04
0e368     88 53 B1 FD | 	call	#__system___float_div
0e36c     FD 12 02 F6 | 	mov	arg01, result1
0e370     00 14 06 F6 | 	mov	arg02, #0
0e374     40 56 B1 FD | 	call	#__system___float_tointeger
0e378     30 4E 05 F1 | 	add	fp, #48
0e37c     A7 FA 61 FC | 	wrlong	result1, fp
0e380     1E 24 C6 F9 | 	decod	local04, #30
0e384     FD 12 02 F6 | 	mov	arg01, result1
0e388     30 4E 85 F1 | 	sub	fp, #48
0e38c     05 12 06 F1 | 	add	arg01, #5
0e390     09 13 52 F6 | 	abs	arg01, arg01 wc
0e394     1F 2C C6 C9 |  if_b	decod	local08, #31
0e398     00 2C 06 36 |  if_ae	mov	local08, #0
0e39c     4C 4D B1 FD | 	call	#__system___float_fromuns
0e3a0     16 FB 61 F5 | 	xor	result1, local08
0e3a4     FD 14 02 F6 | 	mov	arg02, result1
0e3a8     12 13 02 F6 | 	mov	arg01, local04
0e3ac     48 60 B1 FD | 	call	#__system____builtin_powf
0e3b0     FD 12 02 F6 | 	mov	arg01, result1
0e3b4     01 14 06 F6 | 	mov	arg02, #1
0e3b8     FC 55 B1 FD | 	call	#__system___float_tointeger
0e3bc     10 4E 05 F1 | 	add	fp, #16
0e3c0     A7 FA 61 FC | 	wrlong	result1, fp
0e3c4                 | ' skip=round(2^(lfreq+5))
0e3c4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e3c4     10 4E 85 F1 | 	sub	fp, #16
0e3c8     40 00 00 FF 
0e3cc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e3d0     30 00 90 CD |  if_b	jmp	#LR__1187
0e3d4     10 4E 05 F1 | 	add	fp, #16
0e3d8     A7 1E 02 FB | 	rdlong	local01, fp
0e3dc     0F 25 52 F6 | 	abs	local04, local01 wc
0e3e0     0F 24 46 F0 | 	shr	local04, #15
0e3e4     12 25 82 F6 | 	negc	local04, local04
0e3e8     0C 4E 85 F1 | 	sub	fp, #12
0e3ec     A7 24 62 FC | 	wrlong	local04, fp
0e3f0     0C 4E 05 F1 | 	add	fp, #12
0e3f4     40 00 80 FF 
0e3f8     A7 00 68 FC | 	wrlong	##32768, fp
0e3fc     10 4E 85 F1 | 	sub	fp, #16
0e400     0C 00 90 FD | 	jmp	#LR__1188
0e404                 | LR__1187
0e404     04 4E 05 F1 | 	add	fp, #4
0e408     A7 02 68 FC | 	wrlong	#1, fp
0e40c     04 4E 85 F1 | 	sub	fp, #4
0e410                 | LR__1188
0e410     6C 4E 05 F1 | 	add	fp, #108
0e414     A7 14 02 FB | 	rdlong	arg02, fp
0e418     6C 4E 85 F1 | 	sub	fp, #108
0e41c     3E 2C 25 FF 
0e420     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e424     CC 52 B1 FD | 	call	#__system___float_div
0e428     FD 24 02 F6 | 	mov	local04, result1
0e42c     04 4E 05 F1 | 	add	fp, #4
0e430     A7 12 02 FB | 	rdlong	arg01, fp
0e434     04 4E 85 F1 | 	sub	fp, #4
0e438     09 13 52 F6 | 	abs	arg01, arg01 wc
0e43c     1F 2C C6 C9 |  if_b	decod	local08, #31
0e440     00 2C 06 36 |  if_ae	mov	local08, #0
0e444     A4 4C B1 FD | 	call	#__system___float_fromuns
0e448     16 FB 61 F5 | 	xor	result1, local08
0e44c     FD 1E 02 F6 | 	mov	local01, result1
0e450     1E 20 C6 F9 | 	decod	local02, #30
0e454     0D 12 06 F6 | 	mov	arg01, #13
0e458     30 4E 05 F1 | 	add	fp, #48
0e45c     A7 28 02 FB | 	rdlong	local06, fp
0e460     30 4E 85 F1 | 	sub	fp, #48
0e464     14 13 82 F1 | 	sub	arg01, local06
0e468     09 13 52 F6 | 	abs	arg01, arg01 wc
0e46c     1F 2C C6 C9 |  if_b	decod	local08, #31
0e470     00 2C 06 36 |  if_ae	mov	local08, #0
0e474     74 4C B1 FD | 	call	#__system___float_fromuns
0e478     16 FB 61 F5 | 	xor	result1, local08
0e47c     FD 14 02 F6 | 	mov	arg02, result1
0e480     10 13 02 F6 | 	mov	arg01, local02
0e484     70 5F B1 FD | 	call	#__system____builtin_powf
0e488     FD 14 02 F6 | 	mov	arg02, result1
0e48c     0F 13 02 F6 | 	mov	arg01, local01
0e490     5C 50 B1 FD | 	call	#__system___float_mul
0e494     FD 14 02 F6 | 	mov	arg02, result1
0e498     12 13 02 F6 | 	mov	arg01, local04
0e49c     54 52 B1 FD | 	call	#__system___float_div
0e4a0     FD 12 02 F6 | 	mov	arg01, result1
0e4a4     01 14 06 F6 | 	mov	arg02, #1
0e4a8     0C 55 B1 FD | 	call	#__system___float_tointeger
0e4ac     34 4E 05 F1 | 	add	fp, #52
0e4b0     A7 FA 61 FC | 	wrlong	result1, fp
0e4b4     34 4E 05 F1 | 	add	fp, #52
0e4b8     A7 12 02 FB | 	rdlong	arg01, fp
0e4bc     10 4E 05 F1 | 	add	fp, #16
0e4c0     A7 14 02 FB | 	rdlong	arg02, fp
0e4c4     78 4E 85 F1 | 	sub	fp, #120
0e4c8     28 52 B1 FD | 	call	#__system___float_div
0e4cc     FD 12 02 F6 | 	mov	arg01, result1
0e4d0     01 14 06 F6 | 	mov	arg02, #1
0e4d4     E0 54 B1 FD | 	call	#__system___float_tointeger
0e4d8     FD 24 02 F6 | 	mov	local04, result1
0e4dc     14 4E 05 F1 | 	add	fp, #20
0e4e0     A7 24 62 FC | 	wrlong	local04, fp
0e4e4     5C 4E 05 F1 | 	add	fp, #92
0e4e8     A7 14 02 FB | 	rdlong	arg02, fp
0e4ec     70 4E 85 F1 | 	sub	fp, #112
0e4f0     00 00 23 FF 
0e4f4     00 12 06 F6 | 	mov	arg01, ##1174405120
0e4f8     F4 4F B1 FD | 	call	#__system___float_mul
0e4fc     FD 12 02 F6 | 	mov	arg01, result1
0e500     01 14 06 F6 | 	mov	arg02, #1
0e504     B0 54 B1 FD | 	call	#__system___float_tointeger
0e508     0D 24 C6 F9 | 	decod	local04, #13
0e50c     FD 24 02 F1 | 	add	local04, result1
0e510     18 4E 05 F1 | 	add	fp, #24
0e514     A7 24 62 FC | 	wrlong	local04, fp
0e518     5C 4E 05 F1 | 	add	fp, #92
0e51c     A7 14 02 FB | 	rdlong	arg02, fp
0e520     74 4E 85 F1 | 	sub	fp, #116
0e524     00 3D 22 FF 
0e528     00 12 06 F6 | 	mov	arg01, ##1148846080
0e52c     C0 4F B1 FD | 	call	#__system___float_mul
0e530     FD 12 02 F6 | 	mov	arg01, result1
0e534     01 14 06 F6 | 	mov	arg02, #1
0e538     7C 54 B1 FD | 	call	#__system___float_tointeger
0e53c     1C 4E 05 F1 | 	add	fp, #28
0e540     A7 FA 61 FC | 	wrlong	result1, fp
0e544     37 00 00 FF 
0e548     10 E4 05 F1 | 	add	objptr, ##28176
0e54c     F2 24 02 FB | 	rdlong	local04, objptr
0e550     37 00 00 FF 
0e554     10 E4 85 F1 | 	sub	objptr, ##28176
0e558     10 4E 85 F1 | 	sub	fp, #16
0e55c     A7 20 02 FB | 	rdlong	local02, fp
0e560     06 20 66 F0 | 	shl	local02, #6
0e564     10 25 02 F1 | 	add	local04, local02
0e568     04 4E 85 F1 | 	sub	fp, #4
0e56c     A7 24 62 FC | 	wrlong	local04, fp
0e570                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0e570                 | ' speed=round(speed_coeff/slen)
0e570                 | ' ipan=8192+round(8192*pan)
0e570                 | ' ivol=round(1000.0*vol)
0e570                 | ' base2=base+64*channel
0e570                 | ' if wave <32 then 
0e570     18 4E 05 F1 | 	add	fp, #24
0e574     A7 24 02 FB | 	rdlong	local04, fp
0e578     20 4E 85 F1 | 	sub	fp, #32
0e57c     20 24 56 F2 | 	cmps	local04, #32 wc
0e580     2C 00 90 3D |  if_ae	jmp	#LR__1189
0e584     08 4E 05 F1 | 	add	fp, #8
0e588     A7 12 02 FB | 	rdlong	arg01, fp
0e58c     08 12 06 F1 | 	add	arg01, #8
0e590     18 4E 05 F1 | 	add	fp, #24
0e594     A7 14 02 FB | 	rdlong	arg02, fp
0e598     20 4E 85 F1 | 	sub	fp, #32
0e59c     0B 14 66 F0 | 	shl	arg02, #11
0e5a0     00 00 60 FF 
0e5a4     00 14 06 F1 | 	add	arg02, ##-1073741824
0e5a8     09 15 62 FC | 	wrlong	arg02, arg01
0e5ac     18 00 90 FD | 	jmp	#LR__1190
0e5b0                 | LR__1189
0e5b0     08 4E 05 F1 | 	add	fp, #8
0e5b4     A7 12 02 FB | 	rdlong	arg01, fp
0e5b8     08 4E 85 F1 | 	sub	fp, #8
0e5bc     08 12 06 F1 | 	add	arg01, #8
0e5c0     00 00 E4 FF 
0e5c4     09 01 68 FC | 	wrlong	##-939524096, arg01
0e5c8                 | LR__1190
0e5c8     08 4E 05 F1 | 	add	fp, #8
0e5cc     A7 12 02 FB | 	rdlong	arg01, fp
0e5d0     10 12 06 F1 | 	add	arg01, #16
0e5d4     04 00 80 FF 
0e5d8     09 01 68 FC | 	wrlong	##2048, arg01
0e5dc     A7 12 02 FB | 	rdlong	arg01, fp
0e5e0     0C 12 06 F1 | 	add	arg01, #12
0e5e4     09 01 68 FC | 	wrlong	#0, arg01
0e5e8     A7 12 02 FB | 	rdlong	arg01, fp
0e5ec     14 12 06 F1 | 	add	arg01, #20
0e5f0     14 4E 05 F1 | 	add	fp, #20
0e5f4     A7 14 02 FB | 	rdlong	arg02, fp
0e5f8     09 15 52 FC | 	wrword	arg02, arg01
0e5fc     14 4E 85 F1 | 	sub	fp, #20
0e600     A7 12 02 FB | 	rdlong	arg01, fp
0e604     16 12 06 F1 | 	add	arg01, #22
0e608     10 4E 05 F1 | 	add	fp, #16
0e60c     A7 14 02 FB | 	rdlong	arg02, fp
0e610     09 15 52 FC | 	wrword	arg02, arg01
0e614                 | ' lpoke base2+16,2048
0e614                 | ' lpoke base2+12,0
0e614                 | ' dpoke base2+20,ivol 
0e614                 | ' dpoke base2+22,ipan 
0e614                 | ' if wave<32 then
0e614     08 4E 05 F1 | 	add	fp, #8
0e618     A7 24 02 FB | 	rdlong	local04, fp
0e61c     20 4E 85 F1 | 	sub	fp, #32
0e620     20 24 56 F2 | 	cmps	local04, #32 wc
0e624     38 00 90 3D |  if_ae	jmp	#LR__1191
0e628     08 4E 05 F1 | 	add	fp, #8
0e62c     A7 12 02 FB | 	rdlong	arg01, fp
0e630     18 12 06 F1 | 	add	arg01, #24
0e634     2C 4E 05 F1 | 	add	fp, #44
0e638     A7 14 02 FB | 	rdlong	arg02, fp
0e63c     09 15 52 FC | 	wrword	arg02, arg01
0e640     2C 4E 85 F1 | 	sub	fp, #44
0e644     A7 12 02 FB | 	rdlong	arg01, fp
0e648     1A 12 06 F1 | 	add	arg01, #26
0e64c     08 4E 05 F1 | 	add	fp, #8
0e650     A7 14 02 FB | 	rdlong	arg02, fp
0e654     10 4E 85 F1 | 	sub	fp, #16
0e658     09 15 52 FC | 	wrword	arg02, arg01
0e65c     48 00 90 FD | 	jmp	#LR__1192
0e660                 | LR__1191
0e660     08 4E 05 F1 | 	add	fp, #8
0e664     A7 24 02 FB | 	rdlong	local04, fp
0e668     18 24 06 F1 | 	add	local04, #24
0e66c     64 4E 05 F1 | 	add	fp, #100
0e670     A7 14 02 FB | 	rdlong	arg02, fp
0e674     6C 4E 85 F1 | 	sub	fp, #108
0e678     3E 2C 25 FF 
0e67c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e680     70 50 B1 FD | 	call	#__system___float_div
0e684     FD 12 02 F6 | 	mov	arg01, result1
0e688     01 14 06 F6 | 	mov	arg02, #1
0e68c     28 53 B1 FD | 	call	#__system___float_tointeger
0e690     12 FB 51 FC | 	wrword	result1, local04
0e694     08 4E 05 F1 | 	add	fp, #8
0e698     A7 12 02 FB | 	rdlong	arg01, fp
0e69c     08 4E 85 F1 | 	sub	fp, #8
0e6a0     1A 12 06 F1 | 	add	arg01, #26
0e6a4     09 01 5A FC | 	wrword	#256, arg01
0e6a8                 | LR__1192
0e6a8     08 4E 05 F1 | 	add	fp, #8
0e6ac     A7 12 02 FB | 	rdlong	arg01, fp
0e6b0     1C 12 06 F1 | 	add	arg01, #28
0e6b4     09 01 68 FC | 	wrlong	#0, arg01
0e6b8     A7 12 02 FB | 	rdlong	arg01, fp
0e6bc     20 12 06 F1 | 	add	arg01, #32
0e6c0     09 01 68 FC | 	wrlong	#0, arg01
0e6c4                 | ' lpoke base2+28,$0000_0000
0e6c4                 | ' lpoke base2+32,0 
0e6c4                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0e6c4     1C 4E 05 F1 | 	add	fp, #28
0e6c8     A7 24 02 FB | 	rdlong	local04, fp
0e6cc     24 4E 85 F1 | 	sub	fp, #36
0e6d0     08 24 0E F2 | 	cmp	local04, #8 wz
0e6d4     18 00 90 5D |  if_ne	jmp	#LR__1193
0e6d8     08 4E 05 F1 | 	add	fp, #8
0e6dc     A7 12 02 FB | 	rdlong	arg01, fp
0e6e0     08 4E 85 F1 | 	sub	fp, #8
0e6e4     24 12 06 F1 | 	add	arg01, #36
0e6e8     09 01 68 FC | 	wrlong	#0, arg01
0e6ec     34 00 90 FD | 	jmp	#LR__1194
0e6f0                 | LR__1193
0e6f0     08 4E 05 F1 | 	add	fp, #8
0e6f4     A7 12 02 FB | 	rdlong	arg01, fp
0e6f8     24 12 06 F1 | 	add	arg01, #36
0e6fc     1C 4E 05 F1 | 	add	fp, #28
0e700     A7 14 02 FB | 	rdlong	arg02, fp
0e704     24 4E 85 F1 | 	sub	fp, #36
0e708     09 14 66 F0 | 	shl	arg02, #9
0e70c     0C 00 00 FF 
0e710     D8 E4 05 F1 | 	add	objptr, ##6360
0e714     F2 14 02 F1 | 	add	arg02, objptr
0e718     0C 00 00 FF 
0e71c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e720     09 15 62 FC | 	wrlong	arg02, arg01
0e724                 | LR__1194
0e724     08 4E 05 F1 | 	add	fp, #8
0e728     A7 12 02 FB | 	rdlong	arg01, fp
0e72c     28 12 06 F1 | 	add	arg01, #40
0e730     0C 4E 05 F1 | 	add	fp, #12
0e734     A7 14 02 FB | 	rdlong	arg02, fp
0e738     09 15 62 FC | 	wrlong	arg02, arg01
0e73c     0C 4E 85 F1 | 	sub	fp, #12
0e740     A7 12 02 FB | 	rdlong	arg01, fp
0e744     2C 12 06 F1 | 	add	arg01, #44
0e748     24 4E 05 F1 | 	add	fp, #36
0e74c     A7 14 02 FB | 	rdlong	arg02, fp
0e750     09 15 62 FC | 	wrlong	arg02, arg01
0e754                 | ' lpoke base2+40,speed 
0e754                 | ' lpoke base2+44,sus 
0e754                 | ' if delay>0 then waitms(delay) 
0e754     04 4E 85 F1 | 	sub	fp, #4
0e758     A7 24 02 FB | 	rdlong	local04, fp
0e75c     28 4E 85 F1 | 	sub	fp, #40
0e760     01 24 56 F2 | 	cmps	local04, #1 wc
0e764     28 4E 05 31 |  if_ae	add	fp, #40
0e768     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0e76c     28 4E 85 31 |  if_ae	sub	fp, #40
0e770     BC 24 B1 3D |  if_ae	call	#__system___waitms
0e774     A7 F0 03 F6 | 	mov	ptra, fp
0e778     B2 00 A0 FD | 	call	#popregs_
0e77c                 | _do_play_ret
0e77c     2D 00 64 FD | 	ret
0e780                 | 
0e780                 | ' 
0e780                 | ' '-------------------- pop
0e780                 | ' 
0e780                 | ' sub do_pop()
0e780                 | _do_pop
0e780                 | ' if gosubtop>0 then  gosubtop -=1 
0e780     50 00 00 FF 
0e784     0C E5 05 F1 | 	add	objptr, ##41228
0e788     F2 00 02 FB | 	rdlong	_var01, objptr
0e78c     50 00 00 FF 
0e790     0C E5 85 F1 | 	sub	objptr, ##41228
0e794     01 00 56 F2 | 	cmps	_var01, #1 wc
0e798     50 00 00 3F 
0e79c     0C E5 05 31 |  if_ae	add	objptr, ##41228
0e7a0     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
0e7a4     01 00 86 31 |  if_ae	sub	_var01, #1
0e7a8     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
0e7ac     50 00 00 3F 
0e7b0     0C E5 85 31 |  if_ae	sub	objptr, ##41228
0e7b4                 | _do_pop_ret
0e7b4     2D 00 64 FD | 	ret
0e7b8                 | 
0e7b8                 | ' 
0e7b8                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
0e7b8                 | ' 
0e7b8                 | ' sub do_push
0e7b8                 | _do_push
0e7b8                 | ' if stackpointer<maxstack then 
0e7b8     43 00 00 FF 
0e7bc     58 E4 05 F1 | 	add	objptr, ##34392
0e7c0     F2 00 02 FB | 	rdlong	_var01, objptr
0e7c4     43 00 00 FF 
0e7c8     58 E4 85 F1 | 	sub	objptr, ##34392
0e7cc     01 00 00 FF 
0e7d0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0e7d4     F8 00 90 3D |  if_ae	jmp	#LR__1200
0e7d8     4A 00 00 FF 
0e7dc     80 E4 05 F1 | 	add	objptr, ##38016
0e7e0     F2 02 02 FB | 	rdlong	_var02, objptr
0e7e4     01 05 02 F6 | 	mov	_var03, _var02
0e7e8     01 04 66 F0 | 	shl	_var03, #1
0e7ec     01 05 02 F1 | 	add	_var03, _var02
0e7f0     02 04 66 F0 | 	shl	_var03, #2
0e7f4     03 00 00 FF 
0e7f8     04 E4 85 F1 | 	sub	objptr, ##1540
0e7fc     F2 04 02 F1 | 	add	_var03, objptr
0e800     02 01 02 FB | 	rdlong	_var01, _var03
0e804     04 04 06 F1 | 	add	_var03, #4
0e808     02 07 02 FB | 	rdlong	_var04, _var03
0e80c     01 05 02 F6 | 	mov	_var03, _var02
0e810     01 04 66 F0 | 	shl	_var03, #1
0e814     01 05 02 F1 | 	add	_var03, _var02
0e818     02 04 66 F0 | 	shl	_var03, #2
0e81c     F2 04 02 F1 | 	add	_var03, objptr
0e820     08 04 06 F1 | 	add	_var03, #8
0e824     02 03 02 FB | 	rdlong	_var02, _var03
0e828     04 00 00 FF 
0e82c     24 E4 85 F1 | 	sub	objptr, ##2084
0e830     F2 04 02 FB | 	rdlong	_var03, objptr
0e834     02 09 02 F6 | 	mov	_var05, _var03
0e838     01 08 66 F0 | 	shl	_var05, #1
0e83c     02 09 02 F1 | 	add	_var05, _var03
0e840     02 08 66 F0 | 	shl	_var05, #2
0e844     0C 00 00 FF 
0e848     0C E4 85 F1 | 	sub	objptr, ##6156
0e84c     F2 08 02 F1 | 	add	_var05, objptr
0e850     04 01 62 FC | 	wrlong	_var01, _var05
0e854     0C 00 00 FF 
0e858     0C E4 05 F1 | 	add	objptr, ##6156
0e85c     F2 08 02 FB | 	rdlong	_var05, objptr
0e860     04 05 02 F6 | 	mov	_var03, _var05
0e864     01 04 66 F0 | 	shl	_var03, #1
0e868     04 05 02 F1 | 	add	_var03, _var05
0e86c     02 04 66 F0 | 	shl	_var03, #2
0e870     0C 00 00 FF 
0e874     0C E4 85 F1 | 	sub	objptr, ##6156
0e878     F2 04 02 F1 | 	add	_var03, objptr
0e87c     04 04 06 F1 | 	add	_var03, #4
0e880     02 07 62 FC | 	wrlong	_var04, _var03
0e884     0C 00 00 FF 
0e888     0C E4 05 F1 | 	add	objptr, ##6156
0e88c     F2 08 02 FB | 	rdlong	_var05, objptr
0e890     04 07 02 F6 | 	mov	_var04, _var05
0e894     01 06 66 F0 | 	shl	_var04, #1
0e898     04 07 02 F1 | 	add	_var04, _var05
0e89c     02 06 66 F0 | 	shl	_var04, #2
0e8a0     0C 00 00 FF 
0e8a4     0C E4 85 F1 | 	sub	objptr, ##6156
0e8a8     F2 06 02 F1 | 	add	_var04, objptr
0e8ac     08 06 06 F1 | 	add	_var04, #8
0e8b0     03 03 62 FC | 	wrlong	_var02, _var04
0e8b4     0C 00 00 FF 
0e8b8     0C E4 05 F1 | 	add	objptr, ##6156
0e8bc     F2 00 02 FB | 	rdlong	_var01, objptr
0e8c0     01 00 06 F1 | 	add	_var01, #1
0e8c4     F2 00 62 FC | 	wrlong	_var01, objptr
0e8c8     43 00 00 FF 
0e8cc     58 E4 85 F1 | 	sub	objptr, ##34392
0e8d0                 | LR__1200
0e8d0                 | _do_push_ret
0e8d0     2D 00 64 FD | 	ret
0e8d4                 | 
0e8d4                 | ' 
0e8d4                 | ' '------------------- return
0e8d4                 | ' 
0e8d4                 | ' sub do_return()
0e8d4                 | _do_return
0e8d4                 | ' if gosubtop>0 then
0e8d4     50 00 00 FF 
0e8d8     0C E5 05 F1 | 	add	objptr, ##41228
0e8dc     F2 00 02 FB | 	rdlong	_var01, objptr
0e8e0     50 00 00 FF 
0e8e4     0C E5 85 F1 | 	sub	objptr, ##41228
0e8e8     01 00 56 F2 | 	cmps	_var01, #1 wc
0e8ec     8C 00 90 CD |  if_b	jmp	#LR__1210
0e8f0     50 00 00 FF 
0e8f4     0C E5 05 F1 | 	add	objptr, ##41228
0e8f8     F2 00 02 FB | 	rdlong	_var01, objptr
0e8fc     03 00 66 F0 | 	shl	_var01, #3
0e900     03 00 00 FF 
0e904     60 E5 85 F1 | 	sub	objptr, ##1888
0e908     F2 00 02 F1 | 	add	_var01, objptr
0e90c     00 01 02 FB | 	rdlong	_var01, _var01
0e910     03 00 00 FF 
0e914     0C E5 05 F1 | 	add	objptr, ##1804
0e918     F2 00 62 FC | 	wrlong	_var01, objptr
0e91c     54 E4 05 F1 | 	add	objptr, #84
0e920     F2 00 02 FB | 	rdlong	_var01, objptr
0e924     03 00 66 F0 | 	shl	_var01, #3
0e928     03 00 00 FF 
0e92c     60 E5 85 F1 | 	sub	objptr, ##1888
0e930     F2 00 02 F1 | 	add	_var01, objptr
0e934     04 00 06 F1 | 	add	_var01, #4
0e938     00 01 02 FB | 	rdlong	_var01, _var01
0e93c     03 00 00 FF 
0e940     10 E5 05 F1 | 	add	objptr, ##1808
0e944     F2 00 62 FC | 	wrlong	_var01, objptr
0e948     06 00 00 FF 
0e94c     40 E4 85 F1 | 	sub	objptr, ##3136
0e950     F2 00 02 FB | 	rdlong	_var01, objptr
0e954     01 00 86 F1 | 	sub	_var01, #1
0e958     04 E4 05 F1 | 	add	objptr, #4
0e95c     F2 00 62 FC | 	wrlong	_var01, objptr
0e960     06 00 00 FF 
0e964     8C E4 05 F1 | 	add	objptr, ##3212
0e968     F2 00 02 FB | 	rdlong	_var01, objptr
0e96c     01 00 86 F1 | 	sub	_var01, #1
0e970     F2 00 62 FC | 	wrlong	_var01, objptr
0e974     50 00 00 FF 
0e978     0C E5 85 F1 | 	sub	objptr, ##41228
0e97c                 | LR__1210
0e97c                 | _do_return_ret
0e97c     2D 00 64 FD | 	ret
0e980                 | 
0e980                 | ' 
0e980                 | ' ' ------------------ run
0e980                 | ' 
0e980                 | ' sub do_run
0e980                 | _do_run
0e980     04 4A 05 F6 | 	mov	COUNT_, #4
0e984     A8 00 A0 FD | 	call	#pushregs_
0e988     4A 00 00 FF 
0e98c     80 E4 05 F1 | 	add	objptr, ##38016
0e990     F2 1E 02 FB | 	rdlong	local01, objptr
0e994     06 00 00 FF 
0e998     38 E4 05 F1 | 	add	objptr, ##3128
0e99c     F2 20 02 FB | 	rdlong	local02, objptr
0e9a0     04 E4 05 F1 | 	add	objptr, #4
0e9a4     F2 22 02 FB | 	rdlong	local03, objptr
0e9a8     0F 19 02 F6 | 	mov	arg04, local01
0e9ac     0C 17 02 F6 | 	mov	arg03, arg04
0e9b0     01 16 66 F0 | 	shl	arg03, #1
0e9b4     0C 17 02 F1 | 	add	arg03, arg04
0e9b8     02 16 66 F0 | 	shl	arg03, #2
0e9bc     09 00 00 FF 
0e9c0     40 E4 85 F1 | 	sub	objptr, ##4672
0e9c4     F2 16 02 F1 | 	add	arg03, objptr
0e9c8     0B 15 02 FB | 	rdlong	arg02, arg03
0e9cc                 | ' 
0e9cc                 | ' r_lineptr_e=lineptr_e
0e9cc                 | ' r_runptr=runptr
0e9cc                 | ' r_runptr2=runptr2
0e9cc                 | ' 
0e9cc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e9cc                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0e9cc     01 14 0E F2 | 	cmp	arg02, #1 wz
0e9d0     47 00 00 FF 
0e9d4     7C E4 85 F1 | 	sub	objptr, ##36476
0e9d8     00 12 06 A6 |  if_e	mov	arg01, #0
0e9dc     14 E9 BF AD |  if_e	call	#_do_load
0e9e0     4A 00 00 FF 
0e9e4     88 E4 05 F1 | 	add	objptr, ##38024
0e9e8     F2 18 02 FB | 	rdlong	arg04, objptr
0e9ec     06 00 00 FF 
0e9f0     30 E4 05 F1 | 	add	objptr, ##3120
0e9f4     F2 18 62 FC | 	wrlong	arg04, objptr
0e9f8     04 E4 05 F1 | 	add	objptr, #4
0e9fc     F2 00 68 FC | 	wrlong	#0, objptr
0ea00     04 E4 05 F1 | 	add	objptr, #4
0ea04     FF FF FF FF 
0ea08     F2 FE 6B FC | 	wrlong	##-1, objptr
0ea0c                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
0ea0c                 | ' if inrun>0 then 
0ea0c     2C E4 05 F1 | 	add	objptr, #44
0ea10     F2 18 02 FB | 	rdlong	arg04, objptr
0ea14     50 00 00 FF 
0ea18     EC E4 85 F1 | 	sub	objptr, ##41196
0ea1c     01 18 16 F2 | 	cmp	arg04, #1 wc
0ea20     30 00 90 CD |  if_b	jmp	#LR__1220
0ea24     50 00 00 FF 
0ea28     F0 E4 05 F1 | 	add	objptr, ##41200
0ea2c     F2 12 02 F6 | 	mov	arg01, objptr
0ea30     38 E4 85 F1 | 	sub	objptr, #56
0ea34     F2 14 02 FB | 	rdlong	arg02, objptr
0ea38     18 16 06 F6 | 	mov	arg03, #24
0ea3c     44 00 00 FF 
0ea40     EC E5 85 F1 | 	sub	objptr, ##35308
0ea44     B4 12 B1 FD | 	call	#_psram_spin2_read1
0ea48     0B 00 00 FF 
0ea4c     CC E4 85 F1 | 	sub	objptr, ##5836
0ea50                 | '   psram.read1(varptr(runheader),runptr,24)  
0ea50                 | '   return
0ea50     A8 02 90 FD | 	jmp	#LR__1226
0ea54                 | LR__1220
0ea54     50 00 00 FF 
0ea58     EC E4 05 F1 | 	add	objptr, ##41196
0ea5c     F2 02 68 FC | 	wrlong	#1, objptr
0ea60     04 E4 05 F1 | 	add	objptr, #4
0ea64     F2 12 02 F6 | 	mov	arg01, objptr
0ea68     38 E4 85 F1 | 	sub	objptr, #56
0ea6c     F2 14 02 FB | 	rdlong	arg02, objptr
0ea70     18 16 06 F6 | 	mov	arg03, #24
0ea74     44 00 00 FF 
0ea78     EC E5 85 F1 | 	sub	objptr, ##35308
0ea7c     7C 12 B1 FD | 	call	#_psram_spin2_read1
0ea80                 | ' inrun=1
0ea80                 | ' psram.read1(varptr(runheader),runptr,24) 
0ea80                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ea80     45 00 00 FF 
0ea84     24 E4 05 F1 | 	add	objptr, ##35364
0ea88     F2 24 02 FB | 	rdlong	local04, objptr
0ea8c     50 00 00 FF 
0ea90     F0 E4 85 F1 | 	sub	objptr, ##41200
0ea94     FF FF 7F FF 
0ea98     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ea9c     50 00 00 AF 
0eaa0     EC E4 05 A1 |  if_e	add	objptr, ##41196
0eaa4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0eaa8     50 00 00 AF 
0eaac     EC E4 85 A1 |  if_e	sub	objptr, ##41196
0eab0     48 02 90 AD |  if_e	jmp	#LR__1226
0eab4                 | ' do 
0eab4                 | LR__1221
0eab4                 | '   if runptr<>oldrunptr then
0eab4     50 00 00 FF 
0eab8     B8 E4 05 F1 | 	add	objptr, ##41144
0eabc     F2 24 02 FB | 	rdlong	local04, objptr
0eac0     08 E4 05 F1 | 	add	objptr, #8
0eac4     F2 18 02 FB | 	rdlong	arg04, objptr
0eac8     50 00 00 FF 
0eacc     C0 E4 85 F1 | 	sub	objptr, ##41152
0ead0     0C 25 0A F2 | 	cmp	local04, arg04 wz
0ead4     CC 00 90 AD |  if_e	jmp	#LR__1222
0ead8     50 00 00 FF 
0eadc     F0 E4 05 F1 | 	add	objptr, ##41200
0eae0     F2 12 02 F6 | 	mov	arg01, objptr
0eae4     38 E4 85 F1 | 	sub	objptr, #56
0eae8     F2 14 02 FB | 	rdlong	arg02, objptr
0eaec     18 16 06 F6 | 	mov	arg03, #24
0eaf0     44 00 00 FF 
0eaf4     EC E5 85 F1 | 	sub	objptr, ##35308
0eaf8     00 12 B1 FD | 	call	#_psram_spin2_read1
0eafc     3B 00 00 FF 
0eb00     B0 E5 05 F1 | 	add	objptr, ##30640
0eb04     F2 12 02 F6 | 	mov	arg01, objptr
0eb08     09 00 00 FF 
0eb0c     3C E4 05 F1 | 	add	objptr, ##4668
0eb10     F2 14 02 FB | 	rdlong	arg02, objptr
0eb14     0B 00 00 FF 
0eb18     54 E4 85 F1 | 	sub	objptr, ##5716
0eb1c     F2 24 02 FB | 	rdlong	local04, objptr
0eb20     01 24 66 F0 | 	shl	local04, #1
0eb24     12 15 02 F1 | 	add	arg02, local04
0eb28     0B 00 00 FF 
0eb2c     94 E4 05 F1 | 	add	objptr, ##5780
0eb30     F2 16 02 FB | 	rdlong	arg03, objptr
0eb34     40 E4 85 F1 | 	sub	objptr, #64
0eb38     F2 24 02 FB | 	rdlong	local04, objptr
0eb3c     12 17 82 F1 | 	sub	arg03, local04
0eb40     44 00 00 FF 
0eb44     EC E5 85 F1 | 	sub	objptr, ##35308
0eb48     B0 11 B1 FD | 	call	#_psram_spin2_read1
0eb4c     45 00 00 FF 
0eb50     2C E4 05 F1 | 	add	objptr, ##35372
0eb54     F2 24 02 FB | 	rdlong	local04, objptr
0eb58     40 E4 85 F1 | 	sub	objptr, #64
0eb5c     F2 14 02 FB | 	rdlong	arg02, objptr
0eb60     0A 25 82 F1 | 	sub	local04, arg02
0eb64     0B 00 00 FF 
0eb68     54 E4 85 F1 | 	sub	objptr, ##5716
0eb6c     F2 14 02 FB | 	rdlong	arg02, objptr
0eb70     0A 25 12 FD | 	qdiv	local04, arg02
0eb74     05 00 00 FF 
0eb78     18 E4 05 F1 | 	add	objptr, ##2584
0eb7c     18 24 62 FD | 	getqx	local04
0eb80     03 24 86 F1 | 	sub	local04, #3
0eb84     F2 24 62 FC | 	wrlong	local04, objptr
0eb88     06 00 00 FF 
0eb8c     3C E4 05 F1 | 	add	objptr, ##3132
0eb90     F2 24 02 FB | 	rdlong	local04, objptr
0eb94     08 E4 05 F1 | 	add	objptr, #8
0eb98     F2 24 62 FC | 	wrlong	local04, objptr
0eb9c     50 00 00 FF 
0eba0     C0 E4 85 F1 | 	sub	objptr, ##41152
0eba4                 | LR__1222
0eba4     50 00 00 FF 
0eba8     04 E5 05 F1 | 	add	objptr, ##41220
0ebac     F2 24 02 FB | 	rdlong	local04, objptr
0ebb0     4C E4 85 F1 | 	sub	objptr, #76
0ebb4     F2 24 62 FC | 	wrlong	local04, objptr
0ebb8     04 E4 05 F1 | 	add	objptr, #4
0ebbc     F2 12 02 FB | 	rdlong	arg01, objptr
0ebc0     50 00 00 FF 
0ebc4     BC E4 85 F1 | 	sub	objptr, ##41148
0ebc8     54 C5 BF FD | 	call	#_execute_line
0ebcc     50 00 00 FF 
0ebd0     BC E4 05 F1 | 	add	objptr, ##41148
0ebd4     F2 FA 61 FC | 	wrlong	result1, objptr
0ebd8     04 E4 85 F1 | 	sub	objptr, #4
0ebdc     F2 24 02 FB | 	rdlong	local04, objptr
0ebe0     50 00 00 FF 
0ebe4     B8 E4 85 F1 | 	sub	objptr, ##41144
0ebe8     FF FF 3F FF 
0ebec     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
0ebf0     30 00 90 AD |  if_e	jmp	#LR__1224
0ebf4     E0 12 06 F6 | 	mov	arg01, #224
0ebf8     90 14 B1 FD | 	call	#_usbnew_spin2_keystate
0ebfc     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec00     10 00 90 5D |  if_ne	jmp	#LR__1223
0ec04     E4 12 06 F6 | 	mov	arg01, #228
0ec08     80 14 B1 FD | 	call	#_usbnew_spin2_keystate
0ec0c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec10     A0 FE 9F AD |  if_e	jmp	#LR__1221
0ec14                 | LR__1223
0ec14     06 12 06 F6 | 	mov	arg01, #6
0ec18     70 14 B1 FD | 	call	#_usbnew_spin2_keystate
0ec1c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec20     90 FE 9F AD |  if_e	jmp	#LR__1221
0ec24                 | LR__1224
0ec24                 | '   ''do whatever kbm.peek_latest_key()=$106 
0ec24                 | ' if runptr<>$7FFF_FFFF then 
0ec24     50 00 00 FF 
0ec28     B8 E4 05 F1 | 	add	objptr, ##41144
0ec2c     F2 24 02 FB | 	rdlong	local04, objptr
0ec30     50 00 00 FF 
0ec34     B8 E4 85 F1 | 	sub	objptr, ##41144
0ec38     FF FF 3F FF 
0ec3c     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
0ec40     64 00 90 AD |  if_e	jmp	#LR__1225
0ec44                 | '     print "Stopped at line ";runheader(0) 
0ec44     00 12 06 F6 | 	mov	arg01, #0
0ec48     54 77 B1 FD | 	call	#__system___getiolock_0540
0ec4c     FD 12 02 F6 | 	mov	arg01, result1
0ec50     E8 1C B1 FD | 	call	#__system___lockmem
0ec54     84 01 00 FF 
0ec58     89 14 06 F6 | 	mov	arg02, ##@LR__5460
0ec5c     00 12 06 F6 | 	mov	arg01, #0
0ec60     00 16 06 F6 | 	mov	arg03, #0
0ec64     C8 29 B1 FD | 	call	#__system___basic_print_string
0ec68     50 00 00 FF 
0ec6c     F0 E4 05 F1 | 	add	objptr, ##41200
0ec70     F2 14 02 FB | 	rdlong	arg02, objptr
0ec74     50 00 00 FF 
0ec78     F0 E4 85 F1 | 	sub	objptr, ##41200
0ec7c     00 12 06 F6 | 	mov	arg01, #0
0ec80     00 16 06 F6 | 	mov	arg03, #0
0ec84     0A 18 06 F6 | 	mov	arg04, #10
0ec88     28 2A B1 FD | 	call	#__system___basic_print_unsigned
0ec8c     00 12 06 F6 | 	mov	arg01, #0
0ec90     0A 14 06 F6 | 	mov	arg02, #10
0ec94     00 16 06 F6 | 	mov	arg03, #0
0ec98     3C 29 B1 FD | 	call	#__system___basic_print_char
0ec9c     00 12 06 F6 | 	mov	arg01, #0
0eca0     FC 76 B1 FD | 	call	#__system___getiolock_0540
0eca4     FD 00 68 FC | 	wrlong	#0, result1
0eca8                 | LR__1225
0eca8     50 00 00 FF 
0ecac     EC E4 05 F1 | 	add	objptr, ##41196
0ecb0     F2 00 68 FC | 	wrlong	#0, objptr
0ecb4     06 00 00 FF 
0ecb8     6C E4 85 F1 | 	sub	objptr, ##3180
0ecbc     F2 1E 62 FC | 	wrlong	local01, objptr
0ecc0     06 00 00 FF 
0ecc4     38 E4 05 F1 | 	add	objptr, ##3128
0ecc8     F2 20 62 FC | 	wrlong	local02, objptr
0eccc     04 E4 05 F1 | 	add	objptr, #4
0ecd0     F2 22 62 FC | 	wrlong	local03, objptr
0ecd4     50 00 00 FF 
0ecd8     BC E4 85 F1 | 	sub	objptr, ##41148
0ecdc     11 12 06 F6 | 	mov	arg01, #17
0ece0     08 14 06 F6 | 	mov	arg02, #8
0ece4     10 16 06 F6 | 	mov	arg03, #16
0ece8     54 F6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ecec     10 12 06 F6 | 	mov	arg01, #16
0ecf0     20 14 06 F6 | 	mov	arg02, #32
0ecf4     20 16 06 F6 | 	mov	arg03, #32
0ecf8     44 F6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ecfc                 | LR__1226
0ecfc     A7 F0 03 F6 | 	mov	ptra, fp
0ed00     B2 00 A0 FD | 	call	#popregs_
0ed04                 | _do_run_ret
0ed04     2D 00 64 FD | 	ret
0ed08                 | 
0ed08                 | ' 
0ed08                 | ' ' ------------------ save
0ed08                 | ' 
0ed08                 | ' sub do_save                        
0ed08                 | _do_save
0ed08     04 4A 05 F6 | 	mov	COUNT_, #4
0ed0c     A8 00 A0 FD | 	call	#pushregs_
0ed10     B8 F0 07 F1 | 	add	ptra, #184
0ed14     4A 00 00 FF 
0ed18     80 E4 05 F1 | 	add	objptr, ##38016
0ed1c     F2 1E 02 FB | 	rdlong	local01, objptr
0ed20     0F 21 02 F6 | 	mov	local02, local01
0ed24     01 20 66 F0 | 	shl	local02, #1
0ed28     0F 21 02 F1 | 	add	local02, local01
0ed2c     02 20 66 F0 | 	shl	local02, #2
0ed30     03 00 00 FF 
0ed34     04 E4 85 F1 | 	sub	objptr, ##1540
0ed38     F2 20 02 F1 | 	add	local02, objptr
0ed3c     10 23 02 FB | 	rdlong	local03, local02
0ed40     10 4E 05 F1 | 	add	fp, #16
0ed44     A7 22 62 FC | 	wrlong	local03, fp
0ed48                 | ' 
0ed48                 | ' numpar=compiledline(lineptr_e).result.uresult
0ed48                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0ed48     10 4E 85 F1 | 	sub	fp, #16
0ed4c     01 22 56 F2 | 	cmps	local03, #1 wc
0ed50     47 00 00 FF 
0ed54     7C E4 85 F1 | 	sub	objptr, ##36476
0ed58     20 00 90 CD |  if_b	jmp	#LR__1230
0ed5c     C4 C4 BF FD | 	call	#_pop
0ed60     A7 FA 61 FC | 	wrlong	result1, fp
0ed64     04 4E 05 F1 | 	add	fp, #4
0ed68     A7 FC 61 FC | 	wrlong	result2, fp
0ed6c     04 4E 05 F1 | 	add	fp, #4
0ed70     A7 FE 61 FC | 	wrlong	result3, fp
0ed74     08 4E 85 F1 | 	sub	fp, #8
0ed78     24 00 90 FD | 	jmp	#LR__1231
0ed7c                 | LR__1230
0ed7c     51 00 00 FF 
0ed80     D8 E5 05 F1 | 	add	objptr, ##41944
0ed84     F2 22 02 FB | 	rdlong	local03, objptr
0ed88     51 00 00 FF 
0ed8c     D8 E5 85 F1 | 	sub	objptr, ##41944
0ed90     A7 22 62 FC | 	wrlong	local03, fp
0ed94     08 4E 05 F1 | 	add	fp, #8
0ed98     A7 3E 68 FC | 	wrlong	#31, fp
0ed9c     08 4E 85 F1 | 	sub	fp, #8
0eda0                 | LR__1231
0eda0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0eda0     4A 00 00 FF 
0eda4     88 E4 05 F1 | 	add	objptr, ##38024
0eda8     F2 12 02 FB | 	rdlong	arg01, objptr
0edac     4A 00 00 FF 
0edb0     88 E4 85 F1 | 	sub	objptr, ##38024
0edb4     88 E8 B0 FD | 	call	#_pslpeek
0edb8     FF FF 7F FF 
0edbc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0edc0     0C 00 90 5D |  if_ne	jmp	#LR__1232
0edc4     1B 12 06 F6 | 	mov	arg01, #27
0edc8     E0 E5 B0 FD | 	call	#_printerror
0edcc     CC 02 90 FD | 	jmp	#LR__1238
0edd0                 | LR__1232
0edd0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0edd0     08 4E 05 F1 | 	add	fp, #8
0edd4     A7 22 02 FB | 	rdlong	local03, fp
0edd8     08 4E 85 F1 | 	sub	fp, #8
0eddc     2B 22 0E F2 | 	cmp	local03, #43 wz
0ede0     18 00 90 5D |  if_ne	jmp	#LR__1233
0ede4     A7 12 02 FB | 	rdlong	arg01, fp
0ede8     B0 C5 BF FD | 	call	#_convertstring
0edec     A7 FA 61 FC | 	wrlong	result1, fp
0edf0     08 4E 05 F1 | 	add	fp, #8
0edf4     A7 3E 68 FC | 	wrlong	#31, fp
0edf8     08 4E 85 F1 | 	sub	fp, #8
0edfc                 | LR__1233
0edfc                 | ' if t1.result_type=result_string then
0edfc     08 4E 05 F1 | 	add	fp, #8
0ee00     A7 22 02 FB | 	rdlong	local03, fp
0ee04     08 4E 85 F1 | 	sub	fp, #8
0ee08     1F 22 0E F2 | 	cmp	local03, #31 wz
0ee0c     8C 02 90 5D |  if_ne	jmp	#LR__1237
0ee10                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0ee10     A7 12 02 FB | 	rdlong	arg01, fp
0ee14     84 01 00 FF 
0ee18     9A 14 06 F6 | 	mov	arg02, ##@LR__5461
0ee1c     44 1B B1 FD | 	call	#__system___string_cmp
0ee20     00 FA 0D F2 | 	cmp	result1, #0 wz
0ee24     51 00 00 AF 
0ee28     D8 E5 05 A1 |  if_e	add	objptr, ##41944
0ee2c     F2 22 02 AB |  if_e	rdlong	local03, objptr
0ee30     A7 22 62 AC |  if_e	wrlong	local03, fp
0ee34     51 00 00 AF 
0ee38     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
0ee3c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ee40     51 00 00 5F 
0ee44     D8 E5 05 51 |  if_ne	add	objptr, ##41944
0ee48     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0ee4c     51 00 00 5F 
0ee50     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
0ee54                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0ee54     09 12 06 F6 | 	mov	arg01, #9
0ee58     74 6B B1 FD | 	call	#__system__close
0ee5c     09 22 06 F6 | 	mov	local03, #9
0ee60     4A 00 00 FF 
0ee64     94 E4 05 F1 | 	add	objptr, ##38036
0ee68     F2 12 02 FB | 	rdlong	arg01, objptr
0ee6c     4A 00 00 FF 
0ee70     94 E4 85 F1 | 	sub	objptr, ##38036
0ee74     84 01 00 FF 
0ee78     9B 14 06 F6 | 	mov	arg02, ##@LR__5462
0ee7c     18 1B B1 FD | 	call	#__system___string_concat
0ee80     FD 12 02 F6 | 	mov	arg01, result1
0ee84     A7 14 02 FB | 	rdlong	arg02, fp
0ee88     0C 1B B1 FD | 	call	#__system___string_concat
0ee8c     FD 14 02 F6 | 	mov	arg02, result1
0ee90     11 13 02 F6 | 	mov	arg01, local03
0ee94     0D 16 06 F6 | 	mov	arg03, #13
0ee98     A4 26 B1 FD | 	call	#__system___basic_open_string
0ee9c     4A 00 00 FF 
0eea0     88 E4 05 F1 | 	add	objptr, ##38024
0eea4     F2 22 02 FB | 	rdlong	local03, objptr
0eea8     4A 00 00 FF 
0eeac     88 E4 85 F1 | 	sub	objptr, ##38024
0eeb0     B0 4E 05 F1 | 	add	fp, #176
0eeb4     A7 22 62 FC | 	wrlong	local03, fp
0eeb8     B0 4E 85 F1 | 	sub	fp, #176
0eebc                 | '   saveptr=programstart
0eebc                 | '   do
0eebc                 | LR__1234
0eebc     14 4E 05 F1 | 	add	fp, #20
0eec0     A7 12 02 F6 | 	mov	arg01, fp
0eec4     9C 4E 05 F1 | 	add	fp, #156
0eec8     A7 14 02 FB | 	rdlong	arg02, fp
0eecc     B0 4E 85 F1 | 	sub	fp, #176
0eed0     18 16 06 F6 | 	mov	arg03, #24
0eed4     0B 00 00 FF 
0eed8     CC E4 05 F1 | 	add	objptr, ##5836
0eedc     1C 0E B1 FD | 	call	#_psram_spin2_read1
0eee0     2C 4E 05 F1 | 	add	fp, #44
0eee4     A7 12 02 F6 | 	mov	arg01, fp
0eee8     10 4E 85 F1 | 	sub	fp, #16
0eeec     A7 14 02 FB | 	rdlong	arg02, fp
0eef0     04 4E 05 F1 | 	add	fp, #4
0eef4     A7 16 02 FB | 	rdlong	arg03, fp
0eef8     20 4E 85 F1 | 	sub	fp, #32
0eefc     FC 0D B1 FD | 	call	#_psram_spin2_read1
0ef00     0B 00 00 FF 
0ef04     CC E4 85 F1 | 	sub	objptr, ##5836
0ef08     84 01 00 FF 
0ef0c     9D 22 06 F6 | 	mov	local03, ##@LR__5463
0ef10     AC 4E 05 F1 | 	add	fp, #172
0ef14     A7 22 62 FC | 	wrlong	local03, fp
0ef18                 | '     psram.read1(varptr(header(0)),saveptr,24)
0ef18                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0ef18                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0ef18     A0 4E 85 F1 | 	sub	fp, #160
0ef1c     A7 02 68 FC | 	wrlong	#1, fp
0ef20     14 4E 05 F1 | 	add	fp, #20
0ef24     A7 24 02 FB | 	rdlong	local04, fp
0ef28     20 4E 85 F1 | 	sub	fp, #32
0ef2c     01 24 06 F1 | 	add	local04, #1
0ef30                 | LR__1235
0ef30     0C 4E 05 F1 | 	add	fp, #12
0ef34     A7 22 02 FB | 	rdlong	local03, fp
0ef38     0C 4E 85 F1 | 	sub	fp, #12
0ef3c     12 23 52 F2 | 	cmps	local03, local04 wc
0ef40     54 00 90 3D |  if_ae	jmp	#LR__1236
0ef44     AC 4E 05 F1 | 	add	fp, #172
0ef48     A7 1E 02 FB | 	rdlong	local01, fp
0ef4c     A0 4E 85 F1 | 	sub	fp, #160
0ef50     A7 22 02 FB | 	rdlong	local03, fp
0ef54     01 22 86 F1 | 	sub	local03, #1
0ef58     20 4E 05 F1 | 	add	fp, #32
0ef5c     A7 22 02 F1 | 	add	local03, fp
0ef60     11 13 C2 FA | 	rdbyte	arg01, local03
0ef64     2C 4E 85 F1 | 	sub	fp, #44
0ef68     10 3C B1 FD | 	call	#__system__Chr_S
0ef6c     FD 14 02 F6 | 	mov	arg02, result1
0ef70     0F 13 02 F6 | 	mov	arg01, local01
0ef74     20 1A B1 FD | 	call	#__system___string_concat
0ef78     AC 4E 05 F1 | 	add	fp, #172
0ef7c     A7 FA 61 FC | 	wrlong	result1, fp
0ef80     A0 4E 85 F1 | 	sub	fp, #160
0ef84     A7 22 02 FB | 	rdlong	local03, fp
0ef88     01 22 06 F1 | 	add	local03, #1
0ef8c     A7 22 62 FC | 	wrlong	local03, fp
0ef90     0C 4E 85 F1 | 	sub	fp, #12
0ef94     98 FF 9F FD | 	jmp	#LR__1235
0ef98                 | LR__1236
0ef98                 | '     print #9, saveline$
0ef98     09 12 06 F6 | 	mov	arg01, #9
0ef9c     00 74 B1 FD | 	call	#__system___getiolock_0540
0efa0     FD 12 02 F6 | 	mov	arg01, result1
0efa4     94 19 B1 FD | 	call	#__system___lockmem
0efa8     AC 4E 05 F1 | 	add	fp, #172
0efac     A7 14 02 FB | 	rdlong	arg02, fp
0efb0     AC 4E 85 F1 | 	sub	fp, #172
0efb4     09 12 06 F6 | 	mov	arg01, #9
0efb8     00 16 06 F6 | 	mov	arg03, #0
0efbc     70 26 B1 FD | 	call	#__system___basic_print_string
0efc0     09 12 06 F6 | 	mov	arg01, #9
0efc4     0A 14 06 F6 | 	mov	arg02, #10
0efc8     00 16 06 F6 | 	mov	arg03, #0
0efcc     08 26 B1 FD | 	call	#__system___basic_print_char
0efd0     09 12 06 F6 | 	mov	arg01, #9
0efd4     C8 73 B1 FD | 	call	#__system___getiolock_0540
0efd8     FD 00 68 FC | 	wrlong	#0, result1
0efdc     28 4E 05 F1 | 	add	fp, #40
0efe0     A7 22 02 FB | 	rdlong	local03, fp
0efe4     88 4E 05 F1 | 	add	fp, #136
0efe8     A7 22 62 FC | 	wrlong	local03, fp
0efec     88 4E 85 F1 | 	sub	fp, #136
0eff0     A7 22 02 FB | 	rdlong	local03, fp
0eff4     28 4E 85 F1 | 	sub	fp, #40
0eff8     FF FF 3F FF 
0effc     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0f000     B8 FE 9F 5D |  if_ne	jmp	#LR__1234
0f004                 | '   close #9  
0f004     09 12 06 F6 | 	mov	arg01, #9
0f008     C4 69 B1 FD | 	call	#__system__close
0f00c                 | '   print "Saved as ";currentdir$+"/"+loadname
0f00c     00 12 06 F6 | 	mov	arg01, #0
0f010     8C 73 B1 FD | 	call	#__system___getiolock_0540
0f014     FD 12 02 F6 | 	mov	arg01, result1
0f018     20 19 B1 FD | 	call	#__system___lockmem
0f01c     84 01 00 FF 
0f020     9E 14 06 F6 | 	mov	arg02, ##@LR__5464
0f024     00 12 06 F6 | 	mov	arg01, #0
0f028     00 16 06 F6 | 	mov	arg03, #0
0f02c     00 26 B1 FD | 	call	#__system___basic_print_string
0f030     00 20 06 F6 | 	mov	local02, #0
0f034     4A 00 00 FF 
0f038     94 E4 05 F1 | 	add	objptr, ##38036
0f03c     F2 12 02 FB | 	rdlong	arg01, objptr
0f040     4A 00 00 FF 
0f044     94 E4 85 F1 | 	sub	objptr, ##38036
0f048     84 01 00 FF 
0f04c     A8 14 06 F6 | 	mov	arg02, ##@LR__5465
0f050     44 19 B1 FD | 	call	#__system___string_concat
0f054     FD 12 02 F6 | 	mov	arg01, result1
0f058     51 00 00 FF 
0f05c     D8 E5 05 F1 | 	add	objptr, ##41944
0f060     F2 14 02 FB | 	rdlong	arg02, objptr
0f064     51 00 00 FF 
0f068     D8 E5 85 F1 | 	sub	objptr, ##41944
0f06c     28 19 B1 FD | 	call	#__system___string_concat
0f070     FD 14 02 F6 | 	mov	arg02, result1
0f074     10 13 02 F6 | 	mov	arg01, local02
0f078     00 16 06 F6 | 	mov	arg03, #0
0f07c     B0 25 B1 FD | 	call	#__system___basic_print_string
0f080     00 12 06 F6 | 	mov	arg01, #0
0f084     0A 14 06 F6 | 	mov	arg02, #10
0f088     00 16 06 F6 | 	mov	arg03, #0
0f08c     48 25 B1 FD | 	call	#__system___basic_print_char
0f090     00 12 06 F6 | 	mov	arg01, #0
0f094     08 73 B1 FD | 	call	#__system___getiolock_0540
0f098     FD 00 68 FC | 	wrlong	#0, result1
0f09c                 | LR__1237
0f09c                 | LR__1238
0f09c     A7 F0 03 F6 | 	mov	ptra, fp
0f0a0     B2 00 A0 FD | 	call	#popregs_
0f0a4                 | _do_save_ret
0f0a4     2D 00 64 FD | 	ret
0f0a8                 | 
0f0a8                 | ' 
0f0a8                 | ' ' ------------------ shutup
0f0a8                 | ' 
0f0a8                 | ' sub do_shutup
0f0a8                 | _do_shutup
0f0a8     03 4A 05 F6 | 	mov	COUNT_, #3
0f0ac     A8 00 A0 FD | 	call	#pushregs_
0f0b0     18 F0 07 F1 | 	add	ptra, #24
0f0b4     4A 00 00 FF 
0f0b8     80 E4 05 F1 | 	add	objptr, ##38016
0f0bc     F2 1E 02 FB | 	rdlong	local01, objptr
0f0c0     0F 21 02 F6 | 	mov	local02, local01
0f0c4     01 20 66 F0 | 	shl	local02, #1
0f0c8     0F 21 02 F1 | 	add	local02, local01
0f0cc     02 20 66 F0 | 	shl	local02, #2
0f0d0     03 00 00 FF 
0f0d4     04 E4 85 F1 | 	sub	objptr, ##1540
0f0d8     F2 20 02 F1 | 	add	local02, objptr
0f0dc     10 23 0A FB | 	rdlong	local03, local02 wz
0f0e0     14 4E 05 F1 | 	add	fp, #20
0f0e4     A7 22 62 FC | 	wrlong	local03, fp
0f0e8                 | ' 
0f0e8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f0e8                 | ' if numpar=0 then
0f0e8     14 4E 85 F1 | 	sub	fp, #20
0f0ec     47 00 00 FF 
0f0f0     7C E4 85 F1 | 	sub	objptr, ##36476
0f0f4     50 00 90 5D |  if_ne	jmp	#LR__1242
0f0f8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0f0f8     10 4E 05 F1 | 	add	fp, #16
0f0fc     A7 00 68 FC | 	wrlong	#0, fp
0f100     37 00 00 FF 
0f104     10 E4 05 F1 | 	add	objptr, ##28176
0f108     97 16 48 FB | 	callpa	#(@LR__1241-@LR__1240)>>2,fcache_load_ptr_
0f10c                 | LR__1240
0f10c     F2 12 02 FB | 	rdlong	arg01, objptr
0f110     A7 22 02 FB | 	rdlong	local03, fp
0f114     06 22 66 F0 | 	shl	local03, #6
0f118     11 13 02 F1 | 	add	arg01, local03
0f11c     14 12 06 F1 | 	add	arg01, #20
0f120     09 01 58 FC | 	wrword	#0, arg01
0f124     A7 22 02 FB | 	rdlong	local03, fp
0f128     01 22 06 F1 | 	add	local03, #1
0f12c     A7 22 62 FC | 	wrlong	local03, fp
0f130     08 22 56 F2 | 	cmps	local03, #8 wc
0f134     D4 FF 9F CD |  if_b	jmp	#LR__1240
0f138                 | LR__1241
0f138     37 00 00 FF 
0f13c     10 E4 85 F1 | 	sub	objptr, ##28176
0f140     10 4E 85 F1 | 	sub	fp, #16
0f144     64 00 90 FD | 	jmp	#LR__1243
0f148                 | LR__1242
0f148     D8 C0 BF FD | 	call	#_pop
0f14c     FF 1E 02 F6 | 	mov	local01, result3
0f150     A7 FA 61 FC | 	wrlong	result1, fp
0f154     04 4E 05 F1 | 	add	fp, #4
0f158     A7 FC 61 FC | 	wrlong	result2, fp
0f15c     04 4E 05 F1 | 	add	fp, #4
0f160     A7 1E 62 FC | 	wrlong	local01, fp
0f164     08 4E 85 F1 | 	sub	fp, #8
0f168     A7 12 02 F6 | 	mov	arg01, fp
0f16c     98 C2 BF FD | 	call	#_converttoint
0f170     FD 22 52 F6 | 	abs	local03, result1 wc
0f174     07 22 06 F5 | 	and	local03, #7
0f178     11 21 82 F6 | 	negc	local02, local03
0f17c     0C 4E 05 F1 | 	add	fp, #12
0f180     A7 20 62 FC | 	wrlong	local02, fp
0f184     37 00 00 FF 
0f188     10 E4 05 F1 | 	add	objptr, ##28176
0f18c     F2 12 02 FB | 	rdlong	arg01, objptr
0f190     37 00 00 FF 
0f194     10 E4 85 F1 | 	sub	objptr, ##28176
0f198     0C 4E 85 F1 | 	sub	fp, #12
0f19c     06 20 66 F0 | 	shl	local02, #6
0f1a0     10 13 02 F1 | 	add	arg01, local02
0f1a4     14 12 06 F1 | 	add	arg01, #20
0f1a8     09 01 58 FC | 	wrword	#0, arg01
0f1ac                 | LR__1243
0f1ac     A7 F0 03 F6 | 	mov	ptra, fp
0f1b0     B2 00 A0 FD | 	call	#popregs_
0f1b4                 | _do_shutup_ret
0f1b4     2D 00 64 FD | 	ret
0f1b8                 | 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' sub do_release
0f1b8                 | _do_release
0f1b8     00 4A 05 F6 | 	mov	COUNT_, #0
0f1bc     A8 00 A0 FD | 	call	#pushregs_
0f1c0     10 F0 07 F1 | 	add	ptra, #16
0f1c4     5C C0 BF FD | 	call	#_pop
0f1c8     FF 14 02 F6 | 	mov	arg02, result3
0f1cc     A7 FA 61 FC | 	wrlong	result1, fp
0f1d0     04 4E 05 F1 | 	add	fp, #4
0f1d4     A7 FC 61 FC | 	wrlong	result2, fp
0f1d8     04 4E 05 F1 | 	add	fp, #4
0f1dc     A7 14 62 FC | 	wrlong	arg02, fp
0f1e0     08 4E 85 F1 | 	sub	fp, #8
0f1e4     A7 12 02 F6 | 	mov	arg01, fp
0f1e8     1C C2 BF FD | 	call	#_converttoint
0f1ec     0C 4E 05 F1 | 	add	fp, #12
0f1f0     A7 FA 61 FC | 	wrlong	result1, fp
0f1f4                 | ' t1=pop()
0f1f4                 | ' channel=converttoint(t1)
0f1f4                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0f1f4     0C 4E 85 F1 | 	sub	fp, #12
0f1f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0f1fc     44 00 90 CD |  if_b	jmp	#LR__1250
0f200     0C 4E 05 F1 | 	add	fp, #12
0f204     A7 14 02 FB | 	rdlong	arg02, fp
0f208     0C 4E 85 F1 | 	sub	fp, #12
0f20c     08 14 56 F2 | 	cmps	arg02, #8 wc
0f210     30 00 90 3D |  if_ae	jmp	#LR__1250
0f214     37 00 00 FF 
0f218     10 E4 05 F1 | 	add	objptr, ##28176
0f21c     F2 12 02 FB | 	rdlong	arg01, objptr
0f220     37 00 00 FF 
0f224     10 E4 85 F1 | 	sub	objptr, ##28176
0f228     0C 4E 05 F1 | 	add	fp, #12
0f22c     A7 14 02 FB | 	rdlong	arg02, fp
0f230     0C 4E 85 F1 | 	sub	fp, #12
0f234     06 14 66 F0 | 	shl	arg02, #6
0f238     0A 13 02 F1 | 	add	arg01, arg02
0f23c     2C 12 06 F1 | 	add	arg01, #44
0f240     09 FF 69 FC | 	wrlong	#255, arg01
0f244                 | LR__1250
0f244     A7 F0 03 F6 | 	mov	ptra, fp
0f248     B2 00 A0 FD | 	call	#popregs_
0f24c                 | _do_release_ret
0f24c     2D 00 64 FD | 	ret
0f250                 | 
0f250                 | ' 
0f250                 | ' 
0f250                 | ' sub do_defsnd
0f250                 | _do_defsnd
0f250     04 4A 05 F6 | 	mov	COUNT_, #4
0f254     A8 00 A0 FD | 	call	#pushregs_
0f258     88 F0 07 F1 | 	add	ptra, #136
0f25c     4A 00 00 FF 
0f260     80 E4 05 F1 | 	add	objptr, ##38016
0f264     F2 1A 02 FB | 	rdlong	arg05, objptr
0f268     0D 19 02 F6 | 	mov	arg04, arg05
0f26c     01 18 66 F0 | 	shl	arg04, #1
0f270     0D 19 02 F1 | 	add	arg04, arg05
0f274     02 18 66 F0 | 	shl	arg04, #2
0f278     03 00 00 FF 
0f27c     04 E4 85 F1 | 	sub	objptr, ##1540
0f280     F2 18 02 F1 | 	add	arg04, objptr
0f284     0C 1B 02 FB | 	rdlong	arg05, arg04
0f288     A7 1A 62 FC | 	wrlong	arg05, fp
0f28c                 | ' 
0f28c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f28c                 | ' 
0f28c                 | ' 
0f28c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f28c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f28c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f28c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f28c                 | ' 
0f28c                 | ' if numpar<2 then return
0f28c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f290     47 00 00 FF 
0f294     7C E4 85 F1 | 	sub	objptr, ##36476
0f298     94 08 90 CD |  if_b	jmp	#LR__1283
0f29c                 | ' 
0f29c                 | '   
0f29c                 | ' if numpar=2 then
0f29c     A7 1A 02 FB | 	rdlong	arg05, fp
0f2a0     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f2a4     A0 03 90 5D |  if_ne	jmp	#LR__1270
0f2a8     78 BF BF FD | 	call	#_pop
0f2ac     FF 1A 02 F6 | 	mov	arg05, result3
0f2b0     2C 4E 05 F1 | 	add	fp, #44
0f2b4     A7 FA 61 FC | 	wrlong	result1, fp
0f2b8     04 4E 05 F1 | 	add	fp, #4
0f2bc     A7 FC 61 FC | 	wrlong	result2, fp
0f2c0     04 4E 05 F1 | 	add	fp, #4
0f2c4     A7 1A 62 FC | 	wrlong	arg05, fp
0f2c8                 | '   t1=pop()
0f2c8                 | '   if t1.result_type=result_string2 then 
0f2c8     34 4E 85 F1 | 	sub	fp, #52
0f2cc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f2d0     20 00 90 5D |  if_ne	jmp	#LR__1260
0f2d4     2C 4E 05 F1 | 	add	fp, #44
0f2d8     A7 12 02 FB | 	rdlong	arg01, fp
0f2dc     2C 4E 85 F1 | 	sub	fp, #44
0f2e0     B8 C0 BF FD | 	call	#_convertstring
0f2e4     38 4E 05 F1 | 	add	fp, #56
0f2e8     A7 FA 61 FC | 	wrlong	result1, fp
0f2ec     38 4E 85 F1 | 	sub	fp, #56
0f2f0     58 00 90 FD | 	jmp	#LR__1263
0f2f4                 | LR__1260
0f2f4     34 4E 05 F1 | 	add	fp, #52
0f2f8     A7 1A 02 FB | 	rdlong	arg05, fp
0f2fc     34 4E 85 F1 | 	sub	fp, #52
0f300     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f304     18 00 90 5D |  if_ne	jmp	#LR__1261
0f308     2C 4E 05 F1 | 	add	fp, #44
0f30c     A7 1A 02 FB | 	rdlong	arg05, fp
0f310     0C 4E 05 F1 | 	add	fp, #12
0f314     A7 1A 62 FC | 	wrlong	arg05, fp
0f318     38 4E 85 F1 | 	sub	fp, #56
0f31c     2C 00 90 FD | 	jmp	#LR__1262
0f320                 | LR__1261
0f320     84 01 00 FF 
0f324     AA 1A 06 F6 | 	mov	arg05, ##@LR__5466
0f328     38 4E 05 F1 | 	add	fp, #56
0f32c     A7 1A 62 FC | 	wrlong	arg05, fp
0f330     0C 4E 85 F1 | 	sub	fp, #12
0f334     A7 12 02 F6 | 	mov	arg01, fp
0f338     2C 4E 85 F1 | 	sub	fp, #44
0f33c     C8 C0 BF FD | 	call	#_converttoint
0f340     14 4E 05 F1 | 	add	fp, #20
0f344     A7 FA 61 FC | 	wrlong	result1, fp
0f348     14 4E 85 F1 | 	sub	fp, #20
0f34c                 | LR__1262
0f34c                 | LR__1263
0f34c                 | ' 
0f34c                 | '     
0f34c                 | '   if s<>"" then 
0f34c     38 4E 05 F1 | 	add	fp, #56
0f350     A7 12 02 FB | 	rdlong	arg01, fp
0f354     38 4E 85 F1 | 	sub	fp, #56
0f358     84 01 00 FF 
0f35c     AB 14 06 F6 | 	mov	arg02, ##@LR__5467
0f360     00 16 B1 FD | 	call	#__system___string_cmp
0f364     00 FA 0D F2 | 	cmp	result1, #0 wz
0f368     E0 01 90 AD |  if_e	jmp	#LR__1266
0f36c     B4 BE BF FD | 	call	#_pop
0f370     FF 1A 02 F6 | 	mov	arg05, result3
0f374     2C 4E 05 F1 | 	add	fp, #44
0f378     A7 FA 61 FC | 	wrlong	result1, fp
0f37c     04 4E 05 F1 | 	add	fp, #4
0f380     A7 FC 61 FC | 	wrlong	result2, fp
0f384     04 4E 05 F1 | 	add	fp, #4
0f388     A7 1A 62 FC | 	wrlong	arg05, fp
0f38c     08 4E 85 F1 | 	sub	fp, #8
0f390     A7 12 02 F6 | 	mov	arg01, fp
0f394     2C 4E 85 F1 | 	sub	fp, #44
0f398     6C C0 BF FD | 	call	#_converttoint
0f39c     10 4E 05 F1 | 	add	fp, #16
0f3a0     A7 FA 61 FC | 	wrlong	result1, fp
0f3a4                 | '     t1=pop()
0f3a4                 | '     channel=converttoint(t1) : if channel>31 then return
0f3a4     FD 1A 02 F6 | 	mov	arg05, result1
0f3a8     10 4E 85 F1 | 	sub	fp, #16
0f3ac     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f3b0     7C 07 90 3D |  if_ae	jmp	#LR__1283
0f3b4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f3b4     09 12 06 F6 | 	mov	arg01, #9
0f3b8     14 66 B1 FD | 	call	#__system__close
0f3bc     09 1E 06 F6 | 	mov	local01, #9
0f3c0     84 01 00 FF 
0f3c4     AC 12 06 F6 | 	mov	arg01, ##@LR__5468
0f3c8     38 4E 05 F1 | 	add	fp, #56
0f3cc     A7 14 02 FB | 	rdlong	arg02, fp
0f3d0     38 4E 85 F1 | 	sub	fp, #56
0f3d4     C0 15 B1 FD | 	call	#__system___string_concat
0f3d8     FD 14 02 F6 | 	mov	arg02, result1
0f3dc     0F 13 02 F6 | 	mov	arg01, local01
0f3e0     00 16 06 F6 | 	mov	arg03, #0
0f3e4     58 21 B1 FD | 	call	#__system___basic_open_string
0f3e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f3ec     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f3f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f3f4     52 00 00 FF 
0f3f8     18 E4 05 F1 | 	add	objptr, ##42008
0f3fc     F2 FA 61 FC | 	wrlong	result1, objptr
0f400                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f400     52 00 00 FF 
0f404     18 E4 85 F1 | 	sub	objptr, ##42008
0f408     B0 00 90 AD |  if_e	jmp	#LR__1264
0f40c     00 12 06 F6 | 	mov	arg01, #0
0f410     8C 6F B1 FD | 	call	#__system___getiolock_0540
0f414     FD 12 02 F6 | 	mov	arg01, result1
0f418     20 15 B1 FD | 	call	#__system___lockmem
0f41c     84 01 00 FF 
0f420     B9 14 06 F6 | 	mov	arg02, ##@LR__5469
0f424     00 12 06 F6 | 	mov	arg01, #0
0f428     00 16 06 F6 | 	mov	arg03, #0
0f42c     00 22 B1 FD | 	call	#__system___basic_print_string
0f430     52 00 00 FF 
0f434     18 E4 05 F1 | 	add	objptr, ##42008
0f438     F2 14 02 FB | 	rdlong	arg02, objptr
0f43c     52 00 00 FF 
0f440     18 E4 85 F1 | 	sub	objptr, ##42008
0f444     00 12 06 F6 | 	mov	arg01, #0
0f448     00 16 06 F6 | 	mov	arg03, #0
0f44c     0A 18 06 F6 | 	mov	arg04, #10
0f450     20 22 B1 FD | 	call	#__system___basic_print_integer
0f454     84 01 00 FF 
0f458     C7 14 06 F6 | 	mov	arg02, ##@LR__5470
0f45c     00 12 06 F6 | 	mov	arg01, #0
0f460     00 16 06 F6 | 	mov	arg03, #0
0f464     C8 21 B1 FD | 	call	#__system___basic_print_string
0f468     00 1E 06 F6 | 	mov	local01, #0
0f46c     52 00 00 FF 
0f470     18 E4 05 F1 | 	add	objptr, ##42008
0f474     F2 12 02 FB | 	rdlong	arg01, objptr
0f478     52 00 00 FF 
0f47c     18 E4 85 F1 | 	sub	objptr, ##42008
0f480     80 3B B1 FD | 	call	#__system___strerror
0f484     FD 14 02 F6 | 	mov	arg02, result1
0f488     0F 13 02 F6 | 	mov	arg01, local01
0f48c     00 16 06 F6 | 	mov	arg03, #0
0f490     9C 21 B1 FD | 	call	#__system___basic_print_string
0f494     00 12 06 F6 | 	mov	arg01, #0
0f498     0A 14 06 F6 | 	mov	arg02, #10
0f49c     00 16 06 F6 | 	mov	arg03, #0
0f4a0     34 21 B1 FD | 	call	#__system___basic_print_char
0f4a4     00 12 06 F6 | 	mov	arg01, #0
0f4a8     F4 6E B1 FD | 	call	#__system___getiolock_0540
0f4ac     FD 00 68 FC | 	wrlong	#0, result1
0f4b0     09 12 06 F6 | 	mov	arg01, #9
0f4b4     18 65 B1 FD | 	call	#__system__close
0f4b8     74 06 90 FD | 	jmp	#LR__1283
0f4bc                 | LR__1264
0f4bc                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f4bc     04 4E 05 F1 | 	add	fp, #4
0f4c0     A7 00 68 FC | 	wrlong	#0, fp
0f4c4                 | LR__1265
0f4c4     A7 1E 02 FB | 	rdlong	local01, fp
0f4c8     01 1E 66 F0 | 	shl	local01, #1
0f4cc     11 14 06 F6 | 	mov	arg02, #17
0f4d0     0F 15 02 F1 | 	add	arg02, local01
0f4d4     78 4E 05 F1 | 	add	fp, #120
0f4d8     A7 16 02 F6 | 	mov	arg03, fp
0f4dc     7C 4E 85 F1 | 	sub	fp, #124
0f4e0     09 12 06 F6 | 	mov	arg01, #9
0f4e4     01 18 06 F6 | 	mov	arg04, #1
0f4e8     02 1A 06 F6 | 	mov	arg05, #2
0f4ec     BC 22 B1 FD | 	call	#__system___basic_get
0f4f0     10 4E 05 F1 | 	add	fp, #16
0f4f4     A7 12 02 FB | 	rdlong	arg01, fp
0f4f8     0B 12 66 F0 | 	shl	arg01, #11
0f4fc     0C 4E 85 F1 | 	sub	fp, #12
0f500     A7 1E 02 FB | 	rdlong	local01, fp
0f504     01 1E 66 F0 | 	shl	local01, #1
0f508     0F 13 02 F1 | 	add	arg01, local01
0f50c     78 4E 05 F1 | 	add	fp, #120
0f510     A7 14 E2 FA | 	rdword	arg02, fp
0f514     7C 4E 85 F1 | 	sub	fp, #124
0f518     0F 14 66 F7 | 	signx	arg02, #15
0f51c     38 E0 B0 FD | 	call	#_psdpoke
0f520     04 4E 05 F1 | 	add	fp, #4
0f524     A7 1E 02 FB | 	rdlong	local01, fp
0f528     01 1E 06 F1 | 	add	local01, #1
0f52c     A7 1E 62 FC | 	wrlong	local01, fp
0f530     02 00 00 FF 
0f534     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f538     88 FF 9F CD |  if_b	jmp	#LR__1265
0f53c     04 4E 85 F1 | 	sub	fp, #4
0f540                 | '     close #9
0f540     09 12 06 F6 | 	mov	arg01, #9
0f544     88 64 B1 FD | 	call	#__system__close
0f548                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f548                 | '     return
0f548     E4 05 90 FD | 	jmp	#LR__1283
0f54c                 | LR__1266
0f54c                 | '     if wptr < ($80000 - 2048) then 
0f54c     14 4E 05 F1 | 	add	fp, #20
0f550     A7 1E 02 FB | 	rdlong	local01, fp
0f554     14 4E 85 F1 | 	sub	fp, #20
0f558     FC 03 00 FF 
0f55c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0f560     70 00 90 3D |  if_ae	jmp	#LR__1268
0f564                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f564     04 4E 05 F1 | 	add	fp, #4
0f568     A7 00 68 FC | 	wrlong	#0, fp
0f56c     04 4E 85 F1 | 	sub	fp, #4
0f570                 | LR__1267
0f570     10 4E 05 F1 | 	add	fp, #16
0f574     A7 1E 02 FB | 	rdlong	local01, fp
0f578     0B 1E 66 F0 | 	shl	local01, #11
0f57c     0C 4E 85 F1 | 	sub	fp, #12
0f580     A7 1A 02 FB | 	rdlong	arg05, fp
0f584     0D 19 02 F6 | 	mov	arg04, arg05
0f588     01 18 66 F0 | 	shl	arg04, #1
0f58c     0C 1F 02 F1 | 	add	local01, arg04
0f590     10 4E 05 F1 | 	add	fp, #16
0f594     A7 12 02 FB | 	rdlong	arg01, fp
0f598     14 4E 85 F1 | 	sub	fp, #20
0f59c     01 1A 66 F0 | 	shl	arg05, #1
0f5a0     0D 13 02 F1 | 	add	arg01, arg05
0f5a4     09 15 E2 FA | 	rdword	arg02, arg01
0f5a8     0F 13 02 F6 | 	mov	arg01, local01
0f5ac     A8 DF B0 FD | 	call	#_psdpoke
0f5b0     04 4E 05 F1 | 	add	fp, #4
0f5b4     A7 1E 02 FB | 	rdlong	local01, fp
0f5b8     01 1E 06 F1 | 	add	local01, #1
0f5bc     A7 1E 62 FC | 	wrlong	local01, fp
0f5c0     04 4E 85 F1 | 	sub	fp, #4
0f5c4     02 00 00 FF 
0f5c8     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f5cc     A0 FF 9F CD |  if_b	jmp	#LR__1267
0f5d0     5C 05 90 FD | 	jmp	#LR__1283
0f5d4                 | LR__1268
0f5d4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f5d4     04 4E 05 F1 | 	add	fp, #4
0f5d8     A7 00 68 FC | 	wrlong	#0, fp
0f5dc     04 4E 85 F1 | 	sub	fp, #4
0f5e0                 | LR__1269
0f5e0     10 4E 05 F1 | 	add	fp, #16
0f5e4     A7 1E 02 FB | 	rdlong	local01, fp
0f5e8     0B 1E 66 F0 | 	shl	local01, #11
0f5ec     0C 4E 85 F1 | 	sub	fp, #12
0f5f0     A7 1A 02 FB | 	rdlong	arg05, fp
0f5f4     0D 19 02 F6 | 	mov	arg04, arg05
0f5f8     01 18 66 F0 | 	shl	arg04, #1
0f5fc     0C 1F 02 F1 | 	add	local01, arg04
0f600     10 4E 05 F1 | 	add	fp, #16
0f604     A7 12 02 FB | 	rdlong	arg01, fp
0f608     14 4E 85 F1 | 	sub	fp, #20
0f60c     01 1A 66 F0 | 	shl	arg05, #1
0f610     0D 13 02 F1 | 	add	arg01, arg05
0f614     80 E0 B0 FD | 	call	#_psdpeek
0f618     FD 14 02 F6 | 	mov	arg02, result1
0f61c     0F 13 02 F6 | 	mov	arg01, local01
0f620     34 DF B0 FD | 	call	#_psdpoke
0f624     04 4E 05 F1 | 	add	fp, #4
0f628     A7 1E 02 FB | 	rdlong	local01, fp
0f62c     01 1E 06 F1 | 	add	local01, #1
0f630     A7 1E 62 FC | 	wrlong	local01, fp
0f634     04 4E 85 F1 | 	sub	fp, #4
0f638     02 00 00 FF 
0f63c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f640     9C FF 9F CD |  if_b	jmp	#LR__1269
0f644                 | '     return 
0f644     E8 04 90 FD | 	jmp	#LR__1283
0f648                 | '   
0f648                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f648                 | '   return
0f648                 | LR__1270
0f648                 | ' for i=0 to 15 : harm(i)=0: next i  
0f648     04 4E 05 F1 | 	add	fp, #4
0f64c     A7 00 68 FC | 	wrlong	#0, fp
0f650     97 16 48 FB | 	callpa	#(@LR__1272-@LR__1271)>>2,fcache_load_ptr_
0f654                 | LR__1271
0f654     A7 1E 02 FB | 	rdlong	local01, fp
0f658     02 1E 66 F0 | 	shl	local01, #2
0f65c     38 4E 05 F1 | 	add	fp, #56
0f660     A7 1E 02 F1 | 	add	local01, fp
0f664     0F 01 68 FC | 	wrlong	#0, local01
0f668     38 4E 85 F1 | 	sub	fp, #56
0f66c     A7 1E 02 FB | 	rdlong	local01, fp
0f670     01 1E 06 F1 | 	add	local01, #1
0f674     A7 1E 62 FC | 	wrlong	local01, fp
0f678     10 1E 56 F2 | 	cmps	local01, #16 wc
0f67c     D4 FF 9F CD |  if_b	jmp	#LR__1271
0f680                 | LR__1272
0f680     04 4E 85 F1 | 	sub	fp, #4
0f684                 | ' for i=numpar to 2 step -1 
0f684     A7 1E 02 FB | 	rdlong	local01, fp
0f688     04 4E 05 F1 | 	add	fp, #4
0f68c     A7 1E 62 FC | 	wrlong	local01, fp
0f690     04 4E 85 F1 | 	sub	fp, #4
0f694                 | LR__1273
0f694     8C BB BF FD | 	call	#_pop
0f698     2C 4E 05 F1 | 	add	fp, #44
0f69c     A7 FA 61 FC | 	wrlong	result1, fp
0f6a0     04 4E 05 F1 | 	add	fp, #4
0f6a4     A7 FC 61 FC | 	wrlong	result2, fp
0f6a8     04 4E 05 F1 | 	add	fp, #4
0f6ac     A7 FE 61 FC | 	wrlong	result3, fp
0f6b0     30 4E 85 F1 | 	sub	fp, #48
0f6b4     A7 1E 02 FB | 	rdlong	local01, fp
0f6b8     02 1E 86 F1 | 	sub	local01, #2
0f6bc     02 1E 66 F0 | 	shl	local01, #2
0f6c0     38 4E 05 F1 | 	add	fp, #56
0f6c4     A7 1E 02 F1 | 	add	local01, fp
0f6c8     10 4E 85 F1 | 	sub	fp, #16
0f6cc     A7 12 02 F6 | 	mov	arg01, fp
0f6d0     2C 4E 85 F1 | 	sub	fp, #44
0f6d4     EC BD BF FD | 	call	#_converttofloat
0f6d8     0F FB 61 FC | 	wrlong	result1, local01
0f6dc     04 4E 05 F1 | 	add	fp, #4
0f6e0     A7 1E 02 FB | 	rdlong	local01, fp
0f6e4     01 1E 86 F1 | 	sub	local01, #1
0f6e8     A7 1E 62 FC | 	wrlong	local01, fp
0f6ec     04 4E 85 F1 | 	sub	fp, #4
0f6f0     02 1E 56 F2 | 	cmps	local01, #2 wc
0f6f4     9C FF 9F 3D |  if_ae	jmp	#LR__1273
0f6f8     28 BB BF FD | 	call	#_pop
0f6fc     FF 1E 02 F6 | 	mov	local01, result3
0f700     2C 4E 05 F1 | 	add	fp, #44
0f704     A7 FA 61 FC | 	wrlong	result1, fp
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 FC 61 FC | 	wrlong	result2, fp
0f710     04 4E 05 F1 | 	add	fp, #4
0f714     A7 1E 62 FC | 	wrlong	local01, fp
0f718     08 4E 85 F1 | 	sub	fp, #8
0f71c     A7 12 02 F6 | 	mov	arg01, fp
0f720     2C 4E 85 F1 | 	sub	fp, #44
0f724     E0 BC BF FD | 	call	#_converttoint
0f728     10 4E 05 F1 | 	add	fp, #16
0f72c     A7 FA 61 FC | 	wrlong	result1, fp
0f730                 | ' t1=pop()
0f730                 | ' channel=converttoint(t1) : : if channel>31 then return
0f730     FD 1E 02 F6 | 	mov	local01, result1
0f734     10 4E 85 F1 | 	sub	fp, #16
0f738     20 1E 56 F2 | 	cmps	local01, #32 wc
0f73c     F0 03 90 3D |  if_ae	jmp	#LR__1283
0f740     20 4E 05 F1 | 	add	fp, #32
0f744     A7 00 68 FC | 	wrlong	#0, fp
0f748                 | ' max=0
0f748                 | ' if harm(0)<0 then
0f748     1C 4E 05 F1 | 	add	fp, #28
0f74c     A7 12 02 FB | 	rdlong	arg01, fp
0f750     3C 4E 85 F1 | 	sub	fp, #60
0f754     00 14 06 F6 | 	mov	arg02, #0
0f758     01 16 06 F6 | 	mov	arg03, #1
0f75c     C4 41 B1 FD | 	call	#__system___float_cmp
0f760     00 FA 55 F2 | 	cmps	result1, #0 wc
0f764     04 01 90 3D |  if_ae	jmp	#LR__1276
0f768     3C 4E 05 F1 | 	add	fp, #60
0f76c     A7 FA 01 FB | 	rdlong	result1, fp
0f770     1F FA 05 F4 | 	bitl	result1, #31
0f774     24 4E 85 F1 | 	sub	fp, #36
0f778     A7 FA 61 FC | 	wrlong	result1, fp
0f77c     28 4E 05 F1 | 	add	fp, #40
0f780     A7 FA 01 FB | 	rdlong	result1, fp
0f784     1F FA 05 F4 | 	bitl	result1, #31
0f788     24 4E 85 F1 | 	sub	fp, #36
0f78c     A7 FA 61 FC | 	wrlong	result1, fp
0f790     20 4E 05 F1 | 	add	fp, #32
0f794     00 C0 9F FF 
0f798     A7 00 68 FC | 	wrlong	##1065353216, fp
0f79c     24 4E 85 F1 | 	sub	fp, #36
0f7a0     A7 1E 02 FB | 	rdlong	local01, fp
0f7a4     28 4E 05 F1 | 	add	fp, #40
0f7a8     A7 1E 62 FC | 	wrlong	local01, fp
0f7ac     24 4E 85 F1 | 	sub	fp, #36
0f7b0     A7 1E 02 FB | 	rdlong	local01, fp
0f7b4     28 4E 05 F1 | 	add	fp, #40
0f7b8     A7 1E 62 FC | 	wrlong	local01, fp
0f7bc                 | '   harm(0)=1
0f7bc                 | '   harm(1)=even
0f7bc                 | '   harm(2)=odd
0f7bc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f7bc     40 4E 85 F1 | 	sub	fp, #64
0f7c0     A7 06 68 FC | 	wrlong	#3, fp
0f7c4                 | LR__1274
0f7c4     A7 1A 02 FB | 	rdlong	arg05, fp
0f7c8     0D 21 02 F6 | 	mov	local02, arg05
0f7cc     02 20 66 F0 | 	shl	local02, #2
0f7d0     38 4E 05 F1 | 	add	fp, #56
0f7d4     A7 20 02 F1 | 	add	local02, fp
0f7d8     02 1A 86 F1 | 	sub	arg05, #2
0f7dc     02 1A 66 F0 | 	shl	arg05, #2
0f7e0     A7 1A 02 F1 | 	add	arg05, fp
0f7e4     0D 13 02 FB | 	rdlong	arg01, arg05
0f7e8     24 4E 85 F1 | 	sub	fp, #36
0f7ec     A7 14 02 FB | 	rdlong	arg02, fp
0f7f0     18 4E 85 F1 | 	sub	fp, #24
0f7f4     F8 3C B1 FD | 	call	#__system___float_mul
0f7f8     10 FB 61 FC | 	wrlong	result1, local02
0f7fc     04 4E 05 F1 | 	add	fp, #4
0f800     A7 22 02 FB | 	rdlong	local03, fp
0f804     02 22 06 F1 | 	add	local03, #2
0f808     A7 22 62 FC | 	wrlong	local03, fp
0f80c     10 22 56 F2 | 	cmps	local03, #16 wc
0f810     B0 FF 9F CD |  if_b	jmp	#LR__1274
0f814                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f814     A7 08 68 FC | 	wrlong	#4, fp
0f818                 | LR__1275
0f818     A7 22 02 FB | 	rdlong	local03, fp
0f81c     11 21 02 F6 | 	mov	local02, local03
0f820     02 20 66 F0 | 	shl	local02, #2
0f824     38 4E 05 F1 | 	add	fp, #56
0f828     A7 20 02 F1 | 	add	local02, fp
0f82c     02 22 86 F1 | 	sub	local03, #2
0f830     02 22 66 F0 | 	shl	local03, #2
0f834     A7 22 02 F1 | 	add	local03, fp
0f838     11 13 02 FB | 	rdlong	arg01, local03
0f83c     20 4E 85 F1 | 	sub	fp, #32
0f840     A7 14 02 FB | 	rdlong	arg02, fp
0f844     1C 4E 85 F1 | 	sub	fp, #28
0f848     A4 3C B1 FD | 	call	#__system___float_mul
0f84c     10 FB 61 FC | 	wrlong	result1, local02
0f850     04 4E 05 F1 | 	add	fp, #4
0f854     A7 22 02 FB | 	rdlong	local03, fp
0f858     02 22 06 F1 | 	add	local03, #2
0f85c     A7 22 62 FC | 	wrlong	local03, fp
0f860     0F 22 56 F2 | 	cmps	local03, #15 wc
0f864     B0 FF 9F CD |  if_b	jmp	#LR__1275
0f868     04 4E 85 F1 | 	sub	fp, #4
0f86c                 | LR__1276
0f86c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f86c     3C 4E 05 F1 | 	add	fp, #60
0f870     A7 12 02 FB | 	rdlong	arg01, fp
0f874     3C 4E 85 F1 | 	sub	fp, #60
0f878     00 14 06 F6 | 	mov	arg02, #0
0f87c     01 16 66 F6 | 	neg	arg03, #1
0f880     A0 40 B1 FD | 	call	#__system___float_cmp
0f884     00 FA 55 F2 | 	cmps	result1, #0 wc
0f888     A4 02 90 CD |  if_b	jmp	#LR__1282
0f88c                 | '   for i=0 to 1023
0f88c     04 4E 05 F1 | 	add	fp, #4
0f890     A7 00 68 FC | 	wrlong	#0, fp
0f894     04 4E 85 F1 | 	sub	fp, #4
0f898                 | LR__1277
0f898     24 4E 05 F1 | 	add	fp, #36
0f89c     A7 00 68 FC | 	wrlong	#0, fp
0f8a0                 | '     spl=0
0f8a0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f8a0     1C 4E 85 F1 | 	sub	fp, #28
0f8a4     A7 00 68 FC | 	wrlong	#0, fp
0f8a8                 | LR__1278
0f8a8     A7 20 02 FB | 	rdlong	local02, fp
0f8ac     02 20 66 F0 | 	shl	local02, #2
0f8b0     34 4E 05 F1 | 	add	fp, #52
0f8b4     A7 20 02 F1 | 	add	local02, fp
0f8b8     10 23 02 FB | 	rdlong	local03, local02
0f8bc     87 E4 1D FF 
0f8c0     DB 21 06 F6 | 	mov	local02, ##1003032539
0f8c4     38 4E 85 F1 | 	sub	fp, #56
0f8c8     A7 12 02 FB | 	rdlong	arg01, fp
0f8cc     04 4E 85 F1 | 	sub	fp, #4
0f8d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0f8d8     00 24 06 36 |  if_ae	mov	local04, #0
0f8dc     0C 38 B1 FD | 	call	#__system___float_fromuns
0f8e0     12 FB 61 F5 | 	xor	result1, local04
0f8e4     FD 14 02 F6 | 	mov	arg02, result1
0f8e8     10 13 02 F6 | 	mov	arg01, local02
0f8ec     00 3C B1 FD | 	call	#__system___float_mul
0f8f0     FD 20 02 F6 | 	mov	local02, result1
0f8f4     08 4E 05 F1 | 	add	fp, #8
0f8f8     A7 12 02 FB | 	rdlong	arg01, fp
0f8fc     08 4E 85 F1 | 	sub	fp, #8
0f900     01 12 06 F1 | 	add	arg01, #1
0f904     09 13 52 F6 | 	abs	arg01, arg01 wc
0f908     1F 24 C6 C9 |  if_b	decod	local04, #31
0f90c     00 24 06 36 |  if_ae	mov	local04, #0
0f910     D8 37 B1 FD | 	call	#__system___float_fromuns
0f914     12 FB 61 F5 | 	xor	result1, local04
0f918     FD 14 02 F6 | 	mov	arg02, result1
0f91c     10 13 02 F6 | 	mov	arg01, local02
0f920     CC 3B B1 FD | 	call	#__system___float_mul
0f924     FD 12 02 F6 | 	mov	arg01, result1
0f928     24 45 B1 FD | 	call	#__system____builtin_sinf
0f92c     FD 14 02 F6 | 	mov	arg02, result1
0f930     11 13 02 F6 | 	mov	arg01, local03
0f934     B8 3B B1 FD | 	call	#__system___float_mul
0f938     FD 14 02 F6 | 	mov	arg02, result1
0f93c     24 4E 05 F1 | 	add	fp, #36
0f940     A7 12 02 FB | 	rdlong	arg01, fp
0f944     24 4E 85 F1 | 	sub	fp, #36
0f948     D4 37 B1 FD | 	call	#__system___float_add
0f94c     24 4E 05 F1 | 	add	fp, #36
0f950     A7 FA 61 FC | 	wrlong	result1, fp
0f954     1C 4E 85 F1 | 	sub	fp, #28
0f958     A7 16 02 FB | 	rdlong	arg03, fp
0f95c     01 16 06 F1 | 	add	arg03, #1
0f960     A7 16 62 FC | 	wrlong	arg03, fp
0f964     10 16 56 F2 | 	cmps	arg03, #16 wc
0f968     3C FF 9F CD |  if_b	jmp	#LR__1278
0f96c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0f96c     1C 4E 05 F1 | 	add	fp, #28
0f970     A7 12 02 FB | 	rdlong	arg01, fp
0f974     1F 12 06 F4 | 	bitl	arg01, #31
0f978     04 4E 85 F1 | 	sub	fp, #4
0f97c     A7 14 02 FB | 	rdlong	arg02, fp
0f980     20 4E 85 F1 | 	sub	fp, #32
0f984     01 16 66 F6 | 	neg	arg03, #1
0f988     98 3F B1 FD | 	call	#__system___float_cmp
0f98c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f990     18 00 90 CD |  if_b	jmp	#LR__1279
0f994     24 4E 05 F1 | 	add	fp, #36
0f998     A7 FA 01 FB | 	rdlong	result1, fp
0f99c     1F FA 05 F4 | 	bitl	result1, #31
0f9a0     04 4E 85 F1 | 	sub	fp, #4
0f9a4     A7 FA 61 FC | 	wrlong	result1, fp
0f9a8     20 4E 85 F1 | 	sub	fp, #32
0f9ac                 | LR__1279
0f9ac     04 4E 05 F1 | 	add	fp, #4
0f9b0     A7 22 02 FB | 	rdlong	local03, fp
0f9b4     01 22 06 F1 | 	add	local03, #1
0f9b8     A7 22 62 FC | 	wrlong	local03, fp
0f9bc     04 4E 85 F1 | 	sub	fp, #4
0f9c0     02 00 00 FF 
0f9c4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f9c8     CC FE 9F CD |  if_b	jmp	#LR__1277
0f9cc                 | '   for i=0 to 1023
0f9cc     04 4E 05 F1 | 	add	fp, #4
0f9d0     A7 00 68 FC | 	wrlong	#0, fp
0f9d4     04 4E 85 F1 | 	sub	fp, #4
0f9d8                 | LR__1280
0f9d8     24 4E 05 F1 | 	add	fp, #36
0f9dc     A7 00 68 FC | 	wrlong	#0, fp
0f9e0                 | '     spl=0
0f9e0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0f9e0     1C 4E 85 F1 | 	sub	fp, #28
0f9e4     A7 00 68 FC | 	wrlong	#0, fp
0f9e8                 | LR__1281
0f9e8     A7 22 02 FB | 	rdlong	local03, fp
0f9ec     02 22 66 F0 | 	shl	local03, #2
0f9f0     34 4E 05 F1 | 	add	fp, #52
0f9f4     A7 22 02 F1 | 	add	local03, fp
0f9f8     11 23 02 FB | 	rdlong	local03, local03
0f9fc     1C 4E 85 F1 | 	sub	fp, #28
0fa00     A7 14 02 FB | 	rdlong	arg02, fp
0fa04     20 4E 85 F1 | 	sub	fp, #32
0fa08     58 7F 23 FF 
0fa0c     00 12 06 F6 | 	mov	arg01, ##1191096320
0fa10     E0 3C B1 FD | 	call	#__system___float_div
0fa14     FD 14 02 F6 | 	mov	arg02, result1
0fa18     11 13 02 F6 | 	mov	arg01, local03
0fa1c     D0 3A B1 FD | 	call	#__system___float_mul
0fa20     FD 22 02 F6 | 	mov	local03, result1
0fa24     87 E4 1D FF 
0fa28     DB 21 06 F6 | 	mov	local02, ##1003032539
0fa2c     04 4E 05 F1 | 	add	fp, #4
0fa30     A7 12 02 FB | 	rdlong	arg01, fp
0fa34     04 4E 85 F1 | 	sub	fp, #4
0fa38     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa3c     1F 24 C6 C9 |  if_b	decod	local04, #31
0fa40     00 24 06 36 |  if_ae	mov	local04, #0
0fa44     A4 36 B1 FD | 	call	#__system___float_fromuns
0fa48     12 FB 61 F5 | 	xor	result1, local04
0fa4c     FD 14 02 F6 | 	mov	arg02, result1
0fa50     10 13 02 F6 | 	mov	arg01, local02
0fa54     98 3A B1 FD | 	call	#__system___float_mul
0fa58     FD 20 02 F6 | 	mov	local02, result1
0fa5c     08 4E 05 F1 | 	add	fp, #8
0fa60     A7 12 02 FB | 	rdlong	arg01, fp
0fa64     08 4E 85 F1 | 	sub	fp, #8
0fa68     01 12 06 F1 | 	add	arg01, #1
0fa6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa70     1F 24 C6 C9 |  if_b	decod	local04, #31
0fa74     00 24 06 36 |  if_ae	mov	local04, #0
0fa78     70 36 B1 FD | 	call	#__system___float_fromuns
0fa7c     12 FB 61 F5 | 	xor	result1, local04
0fa80     FD 14 02 F6 | 	mov	arg02, result1
0fa84     10 13 02 F6 | 	mov	arg01, local02
0fa88     64 3A B1 FD | 	call	#__system___float_mul
0fa8c     FD 12 02 F6 | 	mov	arg01, result1
0fa90     BC 43 B1 FD | 	call	#__system____builtin_sinf
0fa94     FD 14 02 F6 | 	mov	arg02, result1
0fa98     11 13 02 F6 | 	mov	arg01, local03
0fa9c     50 3A B1 FD | 	call	#__system___float_mul
0faa0     FD 14 02 F6 | 	mov	arg02, result1
0faa4     24 4E 05 F1 | 	add	fp, #36
0faa8     A7 12 02 FB | 	rdlong	arg01, fp
0faac     24 4E 85 F1 | 	sub	fp, #36
0fab0     6C 36 B1 FD | 	call	#__system___float_add
0fab4     24 4E 05 F1 | 	add	fp, #36
0fab8     A7 FA 61 FC | 	wrlong	result1, fp
0fabc     1C 4E 85 F1 | 	sub	fp, #28
0fac0     A7 22 02 FB | 	rdlong	local03, fp
0fac4     01 22 06 F1 | 	add	local03, #1
0fac8     A7 22 62 FC | 	wrlong	local03, fp
0facc     10 22 56 F2 | 	cmps	local03, #16 wc
0fad0     14 FF 9F CD |  if_b	jmp	#LR__1281
0fad4     08 4E 05 F1 | 	add	fp, #8
0fad8     A7 22 02 FB | 	rdlong	local03, fp
0fadc     0B 22 66 F0 | 	shl	local03, #11
0fae0     0C 4E 85 F1 | 	sub	fp, #12
0fae4     A7 20 02 FB | 	rdlong	local02, fp
0fae8     01 20 66 F0 | 	shl	local02, #1
0faec     10 23 02 F1 | 	add	local03, local02
0faf0     20 4E 05 F1 | 	add	fp, #32
0faf4     A7 12 02 FB | 	rdlong	arg01, fp
0faf8     24 4E 85 F1 | 	sub	fp, #36
0fafc     01 14 06 F6 | 	mov	arg02, #1
0fb00     B4 3E B1 FD | 	call	#__system___float_tointeger
0fb04     FD 14 02 F6 | 	mov	arg02, result1
0fb08     11 13 02 F6 | 	mov	arg01, local03
0fb0c     48 DA B0 FD | 	call	#_psdpoke
0fb10     04 4E 05 F1 | 	add	fp, #4
0fb14     A7 22 02 FB | 	rdlong	local03, fp
0fb18     01 22 06 F1 | 	add	local03, #1
0fb1c     A7 22 62 FC | 	wrlong	local03, fp
0fb20     04 4E 85 F1 | 	sub	fp, #4
0fb24     02 00 00 FF 
0fb28     00 22 56 F2 | 	cmps	local03, ##1024 wc
0fb2c     A8 FE 9F CD |  if_b	jmp	#LR__1280
0fb30                 | LR__1282
0fb30                 | LR__1283
0fb30     A7 F0 03 F6 | 	mov	ptra, fp
0fb34     B2 00 A0 FD | 	call	#popregs_
0fb38                 | _do_defsnd_ret
0fb38     2D 00 64 FD | 	ret
0fb3c                 | 
0fb3c                 | ' 
0fb3c                 | ' ' ---------------  List the program. 
0fb3c                 | ' 
0fb3c                 | ' sub do_list
0fb3c                 | _do_list
0fb3c     02 4A 05 F6 | 	mov	COUNT_, #2
0fb40     A8 00 A0 FD | 	call	#pushregs_
0fb44     B8 F0 07 F1 | 	add	ptra, #184
0fb48     04 4E 05 F1 | 	add	fp, #4
0fb4c     A7 00 68 FC | 	wrlong	#0, fp
0fb50     04 4E 05 F1 | 	add	fp, #4
0fb54     FF FF BF FF 
0fb58     A7 FE 6B FC | 	wrlong	##2147483647, fp
0fb5c     08 4E 85 F1 | 	sub	fp, #8
0fb60     4A 00 00 FF 
0fb64     80 E4 05 F1 | 	add	objptr, ##38016
0fb68     F2 1E 02 FB | 	rdlong	local01, objptr
0fb6c     0F 17 02 F6 | 	mov	arg03, local01
0fb70     01 16 66 F0 | 	shl	arg03, #1
0fb74     0F 17 02 F1 | 	add	arg03, local01
0fb78     02 16 66 F0 | 	shl	arg03, #2
0fb7c     03 00 00 FF 
0fb80     04 E4 85 F1 | 	sub	objptr, ##1540
0fb84     F2 16 02 F1 | 	add	arg03, objptr
0fb88     0B 17 02 FB | 	rdlong	arg03, arg03
0fb8c     A7 16 62 FC | 	wrlong	arg03, fp
0fb90                 | ' 
0fb90                 | ' startline=0 : endline=$7FFFFFFF
0fb90                 | ' numpar=compiledline(lineptr_e).result.uresult
0fb90                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0fb90     01 16 0E F2 | 	cmp	arg03, #1 wz
0fb94     47 00 00 FF 
0fb98     7C E4 85 F1 | 	sub	objptr, ##36476
0fb9c     3C 00 90 5D |  if_ne	jmp	#LR__1290
0fba0     80 B6 BF FD | 	call	#_pop
0fba4     FF 1E 02 F6 | 	mov	local01, result3
0fba8     0C 4E 05 F1 | 	add	fp, #12
0fbac     A7 FA 61 FC | 	wrlong	result1, fp
0fbb0     04 4E 05 F1 | 	add	fp, #4
0fbb4     A7 FC 61 FC | 	wrlong	result2, fp
0fbb8     04 4E 05 F1 | 	add	fp, #4
0fbbc     A7 1E 62 FC | 	wrlong	local01, fp
0fbc0     08 4E 85 F1 | 	sub	fp, #8
0fbc4     A7 12 02 F6 | 	mov	arg01, fp
0fbc8     0C 4E 85 F1 | 	sub	fp, #12
0fbcc     38 B8 BF FD | 	call	#_converttoint
0fbd0     04 4E 05 F1 | 	add	fp, #4
0fbd4     A7 FA 61 FC | 	wrlong	result1, fp
0fbd8     04 4E 85 F1 | 	sub	fp, #4
0fbdc                 | LR__1290
0fbdc                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0fbdc     A7 16 02 FB | 	rdlong	arg03, fp
0fbe0     02 16 0E F2 | 	cmp	arg03, #2 wz
0fbe4     7C 00 90 5D |  if_ne	jmp	#LR__1291
0fbe8     38 B6 BF FD | 	call	#_pop
0fbec     FF 1E 02 F6 | 	mov	local01, result3
0fbf0     0C 4E 05 F1 | 	add	fp, #12
0fbf4     A7 FA 61 FC | 	wrlong	result1, fp
0fbf8     04 4E 05 F1 | 	add	fp, #4
0fbfc     A7 FC 61 FC | 	wrlong	result2, fp
0fc00     04 4E 05 F1 | 	add	fp, #4
0fc04     A7 1E 62 FC | 	wrlong	local01, fp
0fc08     08 4E 85 F1 | 	sub	fp, #8
0fc0c     A7 12 02 F6 | 	mov	arg01, fp
0fc10     0C 4E 85 F1 | 	sub	fp, #12
0fc14     F0 B7 BF FD | 	call	#_converttoint
0fc18     FD 1E 02 F6 | 	mov	local01, result1
0fc1c     08 4E 05 F1 | 	add	fp, #8
0fc20     A7 1E 62 FC | 	wrlong	local01, fp
0fc24     08 4E 85 F1 | 	sub	fp, #8
0fc28     F8 B5 BF FD | 	call	#_pop
0fc2c     FF 1E 02 F6 | 	mov	local01, result3
0fc30     0C 4E 05 F1 | 	add	fp, #12
0fc34     A7 FA 61 FC | 	wrlong	result1, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 FC 61 FC | 	wrlong	result2, fp
0fc40     04 4E 05 F1 | 	add	fp, #4
0fc44     A7 1E 62 FC | 	wrlong	local01, fp
0fc48     08 4E 85 F1 | 	sub	fp, #8
0fc4c     A7 12 02 F6 | 	mov	arg01, fp
0fc50     0C 4E 85 F1 | 	sub	fp, #12
0fc54     B0 B7 BF FD | 	call	#_converttoint
0fc58     04 4E 05 F1 | 	add	fp, #4
0fc5c     A7 FA 61 FC | 	wrlong	result1, fp
0fc60     04 4E 85 F1 | 	sub	fp, #4
0fc64                 | LR__1291
0fc64                 | ' 
0fc64                 | ' 
0fc64                 | ' print
0fc64     00 12 06 F6 | 	mov	arg01, #0
0fc68     34 67 B1 FD | 	call	#__system___getiolock_0540
0fc6c     FD 12 02 F6 | 	mov	arg01, result1
0fc70     C8 0C B1 FD | 	call	#__system___lockmem
0fc74     00 12 06 F6 | 	mov	arg01, #0
0fc78     0A 14 06 F6 | 	mov	arg02, #10
0fc7c     00 16 06 F6 | 	mov	arg03, #0
0fc80     54 19 B1 FD | 	call	#__system___basic_print_char
0fc84     00 12 06 F6 | 	mov	arg01, #0
0fc88     14 67 B1 FD | 	call	#__system___getiolock_0540
0fc8c     FD 00 68 FC | 	wrlong	#0, result1
0fc90     4A 00 00 FF 
0fc94     88 E4 05 F1 | 	add	objptr, ##38024
0fc98     F2 20 02 FB | 	rdlong	local02, objptr
0fc9c     07 00 00 FF 
0fca0     88 E5 05 F1 | 	add	objptr, ##3976
0fca4     F2 20 62 FC | 	wrlong	local02, objptr
0fca8     52 00 00 FF 
0fcac     10 E4 85 F1 | 	sub	objptr, ##42000
0fcb0                 | ' do 
0fcb0                 | LR__1292
0fcb0     20 4E 05 F1 | 	add	fp, #32
0fcb4     A7 12 02 F6 | 	mov	arg01, fp
0fcb8     20 4E 85 F1 | 	sub	fp, #32
0fcbc     52 00 00 FF 
0fcc0     10 E4 05 F1 | 	add	objptr, ##42000
0fcc4     F2 14 02 FB | 	rdlong	arg02, objptr
0fcc8     18 16 06 F6 | 	mov	arg03, #24
0fccc     46 00 00 FF 
0fcd0     44 E5 85 F1 | 	sub	objptr, ##36164
0fcd4     24 00 B1 FD | 	call	#_psram_spin2_read1
0fcd8     0B 00 00 FF 
0fcdc     CC E4 85 F1 | 	sub	objptr, ##5836
0fce0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0fce0                 | '   
0fce0                 | '   if header(0)<> $FFFFFFFF then
0fce0     20 4E 05 F1 | 	add	fp, #32
0fce4     A7 20 02 FB | 	rdlong	local02, fp
0fce8     20 4E 85 F1 | 	sub	fp, #32
0fcec     FF FF 7F FF 
0fcf0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0fcf4     A8 00 90 AD |  if_e	jmp	#LR__1294
0fcf8     38 4E 05 F1 | 	add	fp, #56
0fcfc     3F 16 06 F6 | 	mov	arg03, #63
0fd00     28 16 62 FD | 	setq	arg03
0fd04     A7 00 68 FC | 	wrlong	#0, fp
0fd08     A7 12 02 F6 | 	mov	arg01, fp
0fd0c     10 4E 85 F1 | 	sub	fp, #16
0fd10     A7 14 02 FB | 	rdlong	arg02, fp
0fd14     04 4E 05 F1 | 	add	fp, #4
0fd18     A7 16 02 FB | 	rdlong	arg03, fp
0fd1c     2C 4E 85 F1 | 	sub	fp, #44
0fd20     0B 00 00 FF 
0fd24     CC E4 05 F1 | 	add	objptr, ##5836
0fd28     D0 FF B0 FD | 	call	#_psram_spin2_read1
0fd2c     0B 00 00 FF 
0fd30     CC E4 85 F1 | 	sub	objptr, ##5836
0fd34                 | '     longfill(linebuf,0,64)
0fd34                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0fd34                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0fd34     20 4E 05 F1 | 	add	fp, #32
0fd38     A7 20 02 FB | 	rdlong	local02, fp
0fd3c     1C 4E 85 F1 | 	sub	fp, #28
0fd40     A7 1E 02 FB | 	rdlong	local01, fp
0fd44     04 4E 85 F1 | 	sub	fp, #4
0fd48     0F 21 52 F2 | 	cmps	local02, local01 wc
0fd4c     30 00 90 CD |  if_b	jmp	#LR__1293
0fd50     20 4E 05 F1 | 	add	fp, #32
0fd54     A7 20 02 FB | 	rdlong	local02, fp
0fd58     18 4E 85 F1 | 	sub	fp, #24
0fd5c     A7 16 02 FB | 	rdlong	arg03, fp
0fd60     08 4E 85 F1 | 	sub	fp, #8
0fd64     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0fd68     14 00 90 1D |  if_a	jmp	#LR__1293
0fd6c     38 4E 05 F1 | 	add	fp, #56
0fd70     A7 12 02 F6 | 	mov	arg01, fp
0fd74     38 4E 85 F1 | 	sub	fp, #56
0fd78                 | ' 
0fd78                 | ' write(text)
0fd78     A4 F6 B0 FD | 	call	#_hg010b_spin2_write
0fd7c                 | ' crlf
0fd7c     A0 FB B0 FD | 	call	#_hg010b_spin2_crlf
0fd80                 | LR__1293
0fd80     34 4E 05 F1 | 	add	fp, #52
0fd84     A7 20 02 FB | 	rdlong	local02, fp
0fd88     34 4E 85 F1 | 	sub	fp, #52
0fd8c     52 00 00 FF 
0fd90     10 E4 05 F1 | 	add	objptr, ##42000
0fd94     F2 20 62 FC | 	wrlong	local02, objptr
0fd98     52 00 00 FF 
0fd9c     10 E4 85 F1 | 	sub	objptr, ##42000
0fda0                 | LR__1294
0fda0     34 4E 05 F1 | 	add	fp, #52
0fda4     A7 20 02 FB | 	rdlong	local02, fp
0fda8     34 4E 85 F1 | 	sub	fp, #52
0fdac     FF FF 3F FF 
0fdb0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0fdb4     20 4E 05 51 |  if_ne	add	fp, #32
0fdb8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fdbc     20 4E 85 51 |  if_ne	sub	fp, #32
0fdc0     FF FF 7F 5F 
0fdc4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0fdc8     E4 FE 9F 5D |  if_ne	jmp	#LR__1292
0fdcc     A7 F0 03 F6 | 	mov	ptra, fp
0fdd0     B2 00 A0 FD | 	call	#popregs_
0fdd4                 | _do_list_ret
0fdd4     2D 00 64 FD | 	ret
0fdd8                 | 
0fdd8                 | ' 
0fdd8                 | ' '---------------- Clear the program
0fdd8                 | ' 
0fdd8                 | ' sub do_new
0fdd8                 | _do_new
0fdd8     03 4A 05 F6 | 	mov	COUNT_, #3
0fddc     A8 00 A0 FD | 	call	#pushregs_
0fde0     13 12 C6 F9 | 	decod	arg01, #19
0fde4     01 14 66 F6 | 	neg	arg02, #1
0fde8     24 D7 B0 FD | 	call	#_pslpoke
0fdec     35 00 00 FF 
0fdf0     08 E4 05 F1 | 	add	objptr, ##27144
0fdf4     F2 00 68 FC | 	wrlong	#0, objptr
0fdf8                 | ' 
0fdf8                 | ' pslpoke(memlo,$FFFFFFFF)
0fdf8                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0fdf8     00 1E 06 F6 | 	mov	local01, #0
0fdfc     20 00 00 FF 
0fe00     10 E4 85 F1 | 	sub	objptr, ##16400
0fe04     97 1E 48 FB | 	callpa	#(@LR__1301-@LR__1300)>>2,fcache_load_ptr_
0fe08                 | LR__1300
0fe08     0F 17 02 F6 | 	mov	arg03, local01
0fe0c     04 16 66 F0 | 	shl	arg03, #4
0fe10     F2 16 02 F1 | 	add	arg03, objptr
0fe14     84 01 00 FF 
0fe18     CA 14 06 F6 | 	mov	arg02, ##@LR__5471
0fe1c     0B 15 62 FC | 	wrlong	arg02, arg03
0fe20     0F 21 02 F6 | 	mov	local02, local01
0fe24     04 20 66 F0 | 	shl	local02, #4
0fe28     F2 20 02 F1 | 	add	local02, objptr
0fe2c     0C 20 06 F1 | 	add	local02, #12
0fe30     10 01 68 FC | 	wrlong	#0, local02
0fe34     01 1E 06 F1 | 	add	local01, #1
0fe38     02 00 00 FF 
0fe3c     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0fe40     C4 FF 9F CD |  if_b	jmp	#LR__1300
0fe44                 | LR__1301
0fe44     35 00 00 FF 
0fe48     90 E4 05 F1 | 	add	objptr, ##27280
0fe4c     00 04 80 FF 
0fe50     F2 00 68 FC | 	wrlong	##524288, objptr
0fe54     06 00 00 FF 
0fe58     30 E4 05 F1 | 	add	objptr, ##3120
0fe5c     00 04 80 FF 
0fe60     F2 00 68 FC | 	wrlong	##524288, objptr
0fe64     04 E4 05 F1 | 	add	objptr, #4
0fe68     00 04 80 FF 
0fe6c     F2 00 68 FC | 	wrlong	##524288, objptr
0fe70     0D 00 00 FF 
0fe74     64 E4 85 F1 | 	sub	objptr, ##6756
0fe78     F2 00 68 FC | 	wrlong	#0, objptr
0fe7c     07 00 00 FF 
0fe80     24 E4 05 F1 | 	add	objptr, ##3620
0fe84     F2 00 68 FC | 	wrlong	#0, objptr
0fe88     07 00 00 FF 
0fe8c     20 E4 85 F1 | 	sub	objptr, ##3616
0fe90     00 04 80 FF 
0fe94     F2 00 68 FC | 	wrlong	##524288, objptr
0fe98     07 00 00 FF 
0fe9c     30 E4 05 F1 | 	add	objptr, ##3632
0fea0     F2 00 68 FC | 	wrlong	#0, objptr
0fea4     04 E4 05 F1 | 	add	objptr, #4
0fea8     FF FF FF FF 
0feac     F2 FE 6B FC | 	wrlong	##-1, objptr
0feb0     06 00 00 FF 
0feb4     78 E4 05 F1 | 	add	objptr, ##3192
0feb8     F2 00 68 FC | 	wrlong	#0, objptr
0febc     04 E4 05 F1 | 	add	objptr, #4
0fec0     F2 00 68 FC | 	wrlong	#0, objptr
0fec4                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0fec4                 | ' stackpointer=0
0fec4                 | ' lineptr=0 
0fec4                 | ' programptr=memlo ': stringptr=0
0fec4                 | ' 
0fec4                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0fec4                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0fec4     00 1E 06 F6 | 	mov	local01, #0
0fec8     06 00 00 FF 
0fecc     74 E4 85 F1 | 	sub	objptr, ##3188
0fed0     97 16 48 FB | 	callpa	#(@LR__1303-@LR__1302)>>2,fcache_load_ptr_
0fed4                 | LR__1302
0fed4     0F 21 02 F6 | 	mov	local02, local01
0fed8     02 20 66 F0 | 	shl	local02, #2
0fedc     0F 21 02 F1 | 	add	local02, local01
0fee0     02 20 66 F0 | 	shl	local02, #2
0fee4     F2 20 02 F1 | 	add	local02, objptr
0fee8     08 20 06 F1 | 	add	local02, #8
0feec     FF FF FF FF 
0fef0     10 FF 6B FC | 	wrlong	##-1, local02
0fef4     01 1E 06 F1 | 	add	local01, #1
0fef8     41 1E 56 F2 | 	cmps	local01, #65 wc
0fefc     D4 FF 9F CD |  if_b	jmp	#LR__1302
0ff00                 | LR__1303
0ff00     4A 00 00 FF 
0ff04     98 E4 85 F1 | 	sub	objptr, ##38040
0ff08                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0ff08     00 1E 06 F6 | 	mov	local01, #0
0ff0c                 | LR__1304
0ff0c     0F 21 02 F6 | 	mov	local02, local01
0ff10     02 20 66 F0 | 	shl	local02, #2
0ff14     51 00 00 FF 
0ff18     68 E5 05 F1 | 	add	objptr, ##41832
0ff1c     F2 20 02 F1 | 	add	local02, objptr
0ff20     10 23 0A FB | 	rdlong	local03, local02 wz
0ff24     51 00 00 FF 
0ff28     68 E5 85 F1 | 	sub	objptr, ##41832
0ff2c     34 00 90 AD |  if_e	jmp	#LR__1305
0ff30     0F 13 02 F6 | 	mov	arg01, local01
0ff34     00 14 06 F6 | 	mov	arg02, #0
0ff38     00 16 06 F6 | 	mov	arg03, #0
0ff3c     00 E4 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ff40     0F 21 02 F6 | 	mov	local02, local01
0ff44     02 20 66 F0 | 	shl	local02, #2
0ff48     51 00 00 FF 
0ff4c     68 E5 05 F1 | 	add	objptr, ##41832
0ff50     F2 20 02 F1 | 	add	local02, objptr
0ff54     10 13 02 FB | 	rdlong	arg01, local02
0ff58     51 00 00 FF 
0ff5c     68 E5 85 F1 | 	sub	objptr, ##41832
0ff60     F0 49 B1 FD | 	call	#__system___gc_free
0ff64                 | LR__1305
0ff64     01 1E 06 F1 | 	add	local01, #1
0ff68     10 1E 56 F2 | 	cmps	local01, #16 wc
0ff6c     9C FF 9F CD |  if_b	jmp	#LR__1304
0ff70     51 00 00 FF 
0ff74     BC E5 05 F1 | 	add	objptr, ##41916
0ff78     00 C0 9F FF 
0ff7c     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff80     04 E4 05 F1 | 	add	objptr, #4
0ff84     00 C0 9F FF 
0ff88     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff8c     51 00 00 FF 
0ff90     BC E5 85 F1 | 	sub	objptr, ##41916
0ff94     F2 22 02 FB | 	rdlong	local03, objptr
0ff98     51 00 00 FF 
0ff9c     A8 E5 05 F1 | 	add	objptr, ##41896
0ffa0     F2 22 62 FC | 	wrlong	local03, objptr
0ffa4     51 00 00 FF 
0ffa8     AC E5 85 F1 | 	sub	objptr, ##41900
0ffac     11 12 06 F6 | 	mov	arg01, #17
0ffb0     08 14 06 F6 | 	mov	arg02, #8
0ffb4     10 16 06 F6 | 	mov	arg03, #16
0ffb8     84 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ffbc     10 12 06 F6 | 	mov	arg01, #16
0ffc0     20 14 06 F6 | 	mov	arg02, #32
0ffc4     20 16 06 F6 | 	mov	arg03, #32
0ffc8     74 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ffcc     84 01 00 FF 
0ffd0     CB 22 06 F6 | 	mov	local03, ##@LR__5472
0ffd4     51 00 00 FF 
0ffd8     D8 E5 05 F1 | 	add	objptr, ##41944
0ffdc     F2 22 62 FC | 	wrlong	local03, objptr
0ffe0     51 00 00 FF 
0ffe4     D8 E5 85 F1 | 	sub	objptr, ##41944
0ffe8     60 C7 B0 FD | 	call	#_init_audio
0ffec     A7 F0 03 F6 | 	mov	ptra, fp
0fff0     B2 00 A0 FD | 	call	#popregs_
0fff4                 | _do_new_ret
0fff4     2D 00 64 FD | 	ret
0fff8                 | 
0fff8                 | ' 
0fff8                 | ' '----------------------- goto
0fff8                 | ' sub do_fast_goto
0fff8                 | _do_fast_goto
0fff8     02 4A 05 F6 | 	mov	COUNT_, #2
0fffc     A8 00 A0 FD | 	call	#pushregs_
10000                 | _do_fast_goto_enter
10000     4A 00 00 FF 
10004     80 E4 05 F1 | 	add	objptr, ##38016
10008     F2 12 02 FB | 	rdlong	arg01, objptr
1000c     09 1F 02 F6 | 	mov	local01, arg01
10010     01 1E 66 F0 | 	shl	local01, #1
10014     09 1F 02 F1 | 	add	local01, arg01
10018     02 1E 66 F0 | 	shl	local01, #2
1001c     03 00 00 FF 
10020     04 E4 85 F1 | 	sub	objptr, ##1540
10024     F2 1E 02 F1 | 	add	local01, objptr
10028     0F 21 02 FB | 	rdlong	local02, local01
1002c     10 13 02 F6 | 	mov	arg01, local02
10030     47 00 00 FF 
10034     7C E4 85 F1 | 	sub	objptr, ##36476
10038     04 D6 B0 FD | 	call	#_pslpeek
1003c     FD 12 02 F6 | 	mov	arg01, result1
10040                 | ' 
10040                 | ' testptr=compiledline(lineptr_e).result.uresult
10040                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
10040                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
10040     4A 00 00 FF 
10044     80 E4 05 F1 | 	add	objptr, ##38016
10048     F2 FA 01 FB | 	rdlong	result1, objptr
1004c     FD 1E 02 F6 | 	mov	local01, result1
10050     01 1E 66 F0 | 	shl	local01, #1
10054     FD 1E 02 F1 | 	add	local01, result1
10058     02 1E 66 F0 | 	shl	local01, #2
1005c     03 00 00 FF 
10060     04 E4 85 F1 | 	sub	objptr, ##1540
10064     F2 1E 02 F1 | 	add	local01, objptr
10068     04 1E 06 F1 | 	add	local01, #4
1006c     0F 1F 02 FB | 	rdlong	local01, local01
10070     0F 13 0A F2 | 	cmp	arg01, local01 wz
10074     47 00 00 FF 
10078     7C E4 85 F1 | 	sub	objptr, ##36476
1007c     58 00 90 5D |  if_ne	jmp	#LR__1310
10080     50 00 00 FF 
10084     B8 E4 05 F1 | 	add	objptr, ##41144
10088     F2 20 62 FC | 	wrlong	local02, objptr
1008c     06 00 00 FF 
10090     3C E4 85 F1 | 	sub	objptr, ##3132
10094     F2 20 02 FB | 	rdlong	local02, objptr
10098     01 20 86 F1 | 	sub	local02, #1
1009c     04 E4 05 F1 | 	add	objptr, #4
100a0     F2 20 62 FC | 	wrlong	local02, objptr
100a4                 | '   runptr=testptr
100a4                 | '   lineptr_e=lineptr-1
100a4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
100a4     06 00 00 FF 
100a8     84 E4 05 F1 | 	add	objptr, ##3204
100ac     F2 20 02 FB | 	rdlong	local02, objptr
100b0     50 00 00 FF 
100b4     04 E5 85 F1 | 	sub	objptr, ##41220
100b8     FF FF 3F FF 
100bc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
100c0     50 00 00 AF 
100c4     04 E5 05 A1 |  if_e	add	objptr, ##41220
100c8     F2 00 68 AC |  if_e	wrlong	#0, objptr
100cc     50 00 00 AF 
100d0     04 E5 85 A1 |  if_e	sub	objptr, ##41220
100d4     04 00 90 FD | 	jmp	#LR__1311
100d8                 | LR__1310
100d8     84 0E B0 FD | 	call	#_do_find_goto
100dc                 | LR__1311
100dc     A7 F0 03 F6 | 	mov	ptra, fp
100e0     B2 00 A0 FD | 	call	#popregs_
100e4                 | _do_fast_goto_ret
100e4     2D 00 64 FD | 	ret
100e8                 | 
100e8                 | ' 
100e8                 | ' sub do_open
100e8                 | _do_open
100e8     02 4A 05 F6 | 	mov	COUNT_, #2
100ec     A8 00 A0 FD | 	call	#pushregs_
100f0     20 F0 07 F1 | 	add	ptra, #32
100f4     4A 00 00 FF 
100f8     80 E4 05 F1 | 	add	objptr, ##38016
100fc     F2 16 02 FB | 	rdlong	arg03, objptr
10100     0B 15 02 F6 | 	mov	arg02, arg03
10104     01 14 66 F0 | 	shl	arg02, #1
10108     0B 15 02 F1 | 	add	arg02, arg03
1010c     02 14 66 F0 | 	shl	arg02, #2
10110     03 00 00 FF 
10114     04 E4 85 F1 | 	sub	objptr, ##1540
10118     F2 14 02 F1 | 	add	arg02, objptr
1011c     0A 17 02 FB | 	rdlong	arg03, arg02
10120     10 4E 05 F1 | 	add	fp, #16
10124     A7 16 62 FC | 	wrlong	arg03, fp
10128     10 4E 85 F1 | 	sub	fp, #16
1012c     47 00 00 FF 
10130     7C E4 85 F1 | 	sub	objptr, ##36476
10134     EC B0 BF FD | 	call	#_pop
10138     FF 16 02 F6 | 	mov	arg03, result3
1013c     A7 FA 61 FC | 	wrlong	result1, fp
10140     04 4E 05 F1 | 	add	fp, #4
10144     A7 FC 61 FC | 	wrlong	result2, fp
10148     04 4E 05 F1 | 	add	fp, #4
1014c     A7 16 62 FC | 	wrlong	arg03, fp
10150                 | ' 
10150                 | ' numpar=compiledline(lineptr_e).result.uresult
10150                 | ' 
10150                 | ' t1=pop()
10150                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10150     08 4E 85 F1 | 	sub	fp, #8
10154     2B 16 0E F2 | 	cmp	arg03, #43 wz
10158     18 00 90 5D |  if_ne	jmp	#LR__1320
1015c     A7 12 02 FB | 	rdlong	arg01, fp
10160     38 B2 BF FD | 	call	#_convertstring
10164     A7 FA 61 FC | 	wrlong	result1, fp
10168     08 4E 05 F1 | 	add	fp, #8
1016c     A7 3E 68 FC | 	wrlong	#31, fp
10170     08 4E 85 F1 | 	sub	fp, #8
10174                 | LR__1320
10174                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
10174     08 4E 05 F1 | 	add	fp, #8
10178     A7 16 02 FB | 	rdlong	arg03, fp
1017c     08 4E 85 F1 | 	sub	fp, #8
10180     1F 16 0E F2 | 	cmp	arg03, #31 wz
10184     44 00 90 AD |  if_e	jmp	#LR__1321
10188     00 12 06 F6 | 	mov	arg01, #0
1018c     10 62 B1 FD | 	call	#__system___getiolock_0540
10190     FD 12 02 F6 | 	mov	arg01, result1
10194     A4 07 B1 FD | 	call	#__system___lockmem
10198     84 01 00 FF 
1019c     D6 14 06 F6 | 	mov	arg02, ##@LR__5473
101a0     00 12 06 F6 | 	mov	arg01, #0
101a4     00 16 06 F6 | 	mov	arg03, #0
101a8     84 14 B1 FD | 	call	#__system___basic_print_string
101ac     00 12 06 F6 | 	mov	arg01, #0
101b0     0A 14 06 F6 | 	mov	arg02, #10
101b4     00 16 06 F6 | 	mov	arg03, #0
101b8     1C 14 B1 FD | 	call	#__system___basic_print_char
101bc     00 12 06 F6 | 	mov	arg01, #0
101c0     DC 61 B1 FD | 	call	#__system___getiolock_0540
101c4     FD 00 68 FC | 	wrlong	#0, result1
101c8     28 02 90 FD | 	jmp	#LR__1332
101cc                 | LR__1321
101cc     A7 16 02 FB | 	rdlong	arg03, fp
101d0     0C 4E 05 F1 | 	add	fp, #12
101d4     A7 16 62 FC | 	wrlong	arg03, fp
101d8     0C 4E 85 F1 | 	sub	fp, #12
101dc     44 B0 BF FD | 	call	#_pop
101e0     FF 16 02 F6 | 	mov	arg03, result3
101e4     A7 FA 61 FC | 	wrlong	result1, fp
101e8     04 4E 05 F1 | 	add	fp, #4
101ec     A7 FC 61 FC | 	wrlong	result2, fp
101f0     04 4E 05 F1 | 	add	fp, #4
101f4     A7 16 62 FC | 	wrlong	arg03, fp
101f8                 | ' filename=t1.result.sresult
101f8                 | ' t1=pop()
101f8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
101f8     08 4E 85 F1 | 	sub	fp, #8
101fc     2B 16 0E F2 | 	cmp	arg03, #43 wz
10200     18 00 90 5D |  if_ne	jmp	#LR__1322
10204     A7 12 02 FB | 	rdlong	arg01, fp
10208     90 B1 BF FD | 	call	#_convertstring
1020c     A7 FA 61 FC | 	wrlong	result1, fp
10210     08 4E 05 F1 | 	add	fp, #8
10214     A7 3E 68 FC | 	wrlong	#31, fp
10218     08 4E 85 F1 | 	sub	fp, #8
1021c                 | LR__1322
1021c     14 4E 05 F1 | 	add	fp, #20
10220     A7 00 68 FC | 	wrlong	#0, fp
10224                 | ' mode=0
10224                 | ' if t1.result_type=result_string then
10224     0C 4E 85 F1 | 	sub	fp, #12
10228     A7 14 02 FB | 	rdlong	arg02, fp
1022c     08 4E 85 F1 | 	sub	fp, #8
10230     1F 14 0E F2 | 	cmp	arg02, #31 wz
10234     64 00 90 5D |  if_ne	jmp	#LR__1323
10238                 | '   if t1.result.sresult="read" then mode=1
10238     A7 12 02 FB | 	rdlong	arg01, fp
1023c     84 01 00 FF 
10240     E8 14 06 F6 | 	mov	arg02, ##@LR__5474
10244     1C 07 B1 FD | 	call	#__system___string_cmp
10248     00 FA 0D F2 | 	cmp	result1, #0 wz
1024c     14 4E 05 A1 |  if_e	add	fp, #20
10250     A7 02 68 AC |  if_e	wrlong	#1, fp
10254     14 4E 85 A1 |  if_e	sub	fp, #20
10258                 | '   if t1.result.sresult="write" then mode=2
10258     A7 12 02 FB | 	rdlong	arg01, fp
1025c     84 01 00 FF 
10260     ED 14 06 F6 | 	mov	arg02, ##@LR__5475
10264     FC 06 B1 FD | 	call	#__system___string_cmp
10268     00 FA 0D F2 | 	cmp	result1, #0 wz
1026c     14 4E 05 A1 |  if_e	add	fp, #20
10270     A7 04 68 AC |  if_e	wrlong	#2, fp
10274     14 4E 85 A1 |  if_e	sub	fp, #20
10278                 | '   if t1.result.sresult="append" then mode=4
10278     A7 12 02 FB | 	rdlong	arg01, fp
1027c     84 01 00 FF 
10280     F3 14 06 F6 | 	mov	arg02, ##@LR__5476
10284     DC 06 B1 FD | 	call	#__system___string_cmp
10288     00 FA 0D F2 | 	cmp	result1, #0 wz
1028c     14 4E 05 A1 |  if_e	add	fp, #20
10290     A7 08 68 AC |  if_e	wrlong	#4, fp
10294     14 4E 85 A1 |  if_e	sub	fp, #20
10298     14 00 90 FD | 	jmp	#LR__1324
1029c                 | LR__1323
1029c     A7 12 02 F6 | 	mov	arg01, fp
102a0     64 B1 BF FD | 	call	#_converttoint
102a4     14 4E 05 F1 | 	add	fp, #20
102a8     A7 FA 61 FC | 	wrlong	result1, fp
102ac     14 4E 85 F1 | 	sub	fp, #20
102b0                 | LR__1324
102b0     70 AF BF FD | 	call	#_pop
102b4     FF 16 02 F6 | 	mov	arg03, result3
102b8     A7 FA 61 FC | 	wrlong	result1, fp
102bc     04 4E 05 F1 | 	add	fp, #4
102c0     A7 FC 61 FC | 	wrlong	result2, fp
102c4     04 4E 05 F1 | 	add	fp, #4
102c8     A7 16 62 FC | 	wrlong	arg03, fp
102cc                 | ' t1=pop()
102cc                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
102cc     08 4E 85 F1 | 	sub	fp, #8
102d0     2C 16 0E F2 | 	cmp	arg03, #44 wz
102d4     44 00 90 AD |  if_e	jmp	#LR__1325
102d8     00 12 06 F6 | 	mov	arg01, #0
102dc     C0 60 B1 FD | 	call	#__system___getiolock_0540
102e0     FD 12 02 F6 | 	mov	arg01, result1
102e4     54 06 B1 FD | 	call	#__system___lockmem
102e8     84 01 00 FF 
102ec     FA 14 06 F6 | 	mov	arg02, ##@LR__5477
102f0     00 12 06 F6 | 	mov	arg01, #0
102f4     00 16 06 F6 | 	mov	arg03, #0
102f8     34 13 B1 FD | 	call	#__system___basic_print_string
102fc     00 12 06 F6 | 	mov	arg01, #0
10300     0A 14 06 F6 | 	mov	arg02, #10
10304     00 16 06 F6 | 	mov	arg03, #0
10308     CC 12 B1 FD | 	call	#__system___basic_print_char
1030c     00 12 06 F6 | 	mov	arg01, #0
10310     8C 60 B1 FD | 	call	#__system___getiolock_0540
10314     FD 00 68 FC | 	wrlong	#0, result1
10318     D8 00 90 FD | 	jmp	#LR__1332
1031c                 | LR__1325
1031c     A7 1E 02 FB | 	rdlong	local01, fp
10320     18 4E 05 F1 | 	add	fp, #24
10324     A7 1E 62 FC | 	wrlong	local01, fp
10328                 | ' channel  = t1.result.iresult
10328                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
10328                 | ' select case  mode
10328     04 4E 85 F1 | 	sub	fp, #4
1032c     A7 20 02 FB | 	rdlong	local02, fp
10330     14 4E 85 F1 | 	sub	fp, #20
10334     01 20 86 F1 | 	sub	local02, #1
10338     04 20 26 F3 | 	fle	local02, #4
1033c     30 20 62 FD | 	jmprel	local02
10340                 | LR__1326
10340     10 00 90 FD | 	jmp	#LR__1327
10344     2C 00 90 FD | 	jmp	#LR__1328
10348     68 00 90 FD | 	jmp	#LR__1330
1034c     44 00 90 FD | 	jmp	#LR__1329
10350     60 00 90 FD | 	jmp	#LR__1330
10354                 | LR__1327
10354     18 4E 05 F1 | 	add	fp, #24
10358     A7 12 02 FB | 	rdlong	arg01, fp
1035c     0C 4E 85 F1 | 	sub	fp, #12
10360     A7 14 02 FB | 	rdlong	arg02, fp
10364     0C 4E 85 F1 | 	sub	fp, #12
10368     00 16 06 F6 | 	mov	arg03, #0
1036c     D0 11 B1 FD | 	call	#__system___basic_open_string
10370     80 00 90 FD | 	jmp	#LR__1331
10374                 | LR__1328
10374     18 4E 05 F1 | 	add	fp, #24
10378     A7 12 02 FB | 	rdlong	arg01, fp
1037c     0C 4E 85 F1 | 	sub	fp, #12
10380     A7 14 02 FB | 	rdlong	arg02, fp
10384     0C 4E 85 F1 | 	sub	fp, #12
10388     0D 16 06 F6 | 	mov	arg03, #13
1038c     B0 11 B1 FD | 	call	#__system___basic_open_string
10390     60 00 90 FD | 	jmp	#LR__1331
10394                 | LR__1329
10394     18 4E 05 F1 | 	add	fp, #24
10398     A7 12 02 FB | 	rdlong	arg01, fp
1039c     0C 4E 85 F1 | 	sub	fp, #12
103a0     A7 14 02 FB | 	rdlong	arg02, fp
103a4     0C 4E 85 F1 | 	sub	fp, #12
103a8     25 16 06 F6 | 	mov	arg03, #37
103ac     90 11 B1 FD | 	call	#__system___basic_open_string
103b0     40 00 90 FD | 	jmp	#LR__1331
103b4                 | LR__1330
103b4     00 12 06 F6 | 	mov	arg01, #0
103b8     E4 5F B1 FD | 	call	#__system___getiolock_0540
103bc     FD 12 02 F6 | 	mov	arg01, result1
103c0     78 05 B1 FD | 	call	#__system___lockmem
103c4     84 01 00 FF 
103c8     0C 15 06 F6 | 	mov	arg02, ##@LR__5478
103cc     00 12 06 F6 | 	mov	arg01, #0
103d0     00 16 06 F6 | 	mov	arg03, #0
103d4     58 12 B1 FD | 	call	#__system___basic_print_string
103d8     00 12 06 F6 | 	mov	arg01, #0
103dc     0A 14 06 F6 | 	mov	arg02, #10
103e0     00 16 06 F6 | 	mov	arg03, #0
103e4     F0 11 B1 FD | 	call	#__system___basic_print_char
103e8     00 12 06 F6 | 	mov	arg01, #0
103ec     B0 5F B1 FD | 	call	#__system___getiolock_0540
103f0     FD 00 68 FC | 	wrlong	#0, result1
103f4                 | LR__1331
103f4                 | LR__1332
103f4     A7 F0 03 F6 | 	mov	ptra, fp
103f8     B2 00 A0 FD | 	call	#popregs_
103fc                 | _do_open_ret
103fc     2D 00 64 FD | 	ret
10400                 | 
10400                 | ' 
10400                 | ' 
10400                 | ' sub do_close
10400                 | _do_close
10400     03 4A 05 F6 | 	mov	COUNT_, #3
10404     A8 00 A0 FD | 	call	#pushregs_
10408     18 AE BF FD | 	call	#_pop
1040c     FD 1E 02 F6 | 	mov	local01, result1
10410     FF 16 02 F6 | 	mov	arg03, result3
10414     FE 20 02 F6 | 	mov	local02, result2
10418     0B 23 02 F6 | 	mov	local03, arg03
1041c                 | ' numpar=compiledline(lineptr_e).result.uresult
1041c                 | ' 
1041c                 | ' t1=pop()
1041c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
1041c     2C 22 0E F2 | 	cmp	local03, #44 wz
10420     44 00 90 AD |  if_e	jmp	#LR__1340
10424     00 12 06 F6 | 	mov	arg01, #0
10428     74 5F B1 FD | 	call	#__system___getiolock_0540
1042c     FD 12 02 F6 | 	mov	arg01, result1
10430     08 05 B1 FD | 	call	#__system___lockmem
10434     84 01 00 FF 
10438     1F 15 06 F6 | 	mov	arg02, ##@LR__5479
1043c     00 12 06 F6 | 	mov	arg01, #0
10440     00 16 06 F6 | 	mov	arg03, #0
10444     E8 11 B1 FD | 	call	#__system___basic_print_string
10448     00 12 06 F6 | 	mov	arg01, #0
1044c     0A 14 06 F6 | 	mov	arg02, #10
10450     00 16 06 F6 | 	mov	arg03, #0
10454     80 11 B1 FD | 	call	#__system___basic_print_char
10458     00 12 06 F6 | 	mov	arg01, #0
1045c     40 5F B1 FD | 	call	#__system___getiolock_0540
10460     FD 00 68 FC | 	wrlong	#0, result1
10464     08 00 90 FD | 	jmp	#LR__1341
10468                 | LR__1340
10468                 | ' channel  = t1.result.iresult
10468                 | ' close #channel
10468     0F 13 02 F6 | 	mov	arg01, local01
1046c     60 55 B1 FD | 	call	#__system__close
10470                 | LR__1341
10470     A7 F0 03 F6 | 	mov	ptra, fp
10474     B2 00 A0 FD | 	call	#popregs_
10478                 | _do_close_ret
10478     2D 00 64 FD | 	ret
1047c                 | 
1047c                 | ' 
1047c                 | ' sub  do_get
1047c                 | _do_get
1047c     09 4A 05 F6 | 	mov	COUNT_, #9
10480     A8 00 A0 FD | 	call	#pushregs_
10484     40 F0 07 F1 | 	add	ptra, #64
10488     4A 00 00 FF 
1048c     80 E4 05 F1 | 	add	objptr, ##38016
10490     F2 1A 02 FB | 	rdlong	arg05, objptr
10494     0D 19 02 F6 | 	mov	arg04, arg05
10498     01 18 66 F0 | 	shl	arg04, #1
1049c     0D 19 02 F1 | 	add	arg04, arg05
104a0     02 18 66 F0 | 	shl	arg04, #2
104a4     03 00 00 FF 
104a8     04 E4 85 F1 | 	sub	objptr, ##1540
104ac     F2 18 02 F1 | 	add	arg04, objptr
104b0     0C 1B 02 FB | 	rdlong	arg05, arg04
104b4     A7 1A 62 FC | 	wrlong	arg05, fp
104b8                 | ' numpar=compiledline(lineptr_e).result.uresult
104b8                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
104b8     04 1A 0E F2 | 	cmp	arg05, #4 wz
104bc     47 00 00 FF 
104c0     7C E4 85 F1 | 	sub	objptr, ##36476
104c4     48 00 90 5D |  if_ne	jmp	#LR__1350
104c8     58 AD BF FD | 	call	#_pop
104cc     FF 1A 02 F6 | 	mov	arg05, result3
104d0     1C 4E 05 F1 | 	add	fp, #28
104d4     A7 FA 61 FC | 	wrlong	result1, fp
104d8     04 4E 05 F1 | 	add	fp, #4
104dc     A7 FC 61 FC | 	wrlong	result2, fp
104e0     04 4E 05 F1 | 	add	fp, #4
104e4     A7 1A 62 FC | 	wrlong	arg05, fp
104e8     08 4E 85 F1 | 	sub	fp, #8
104ec     A7 12 02 F6 | 	mov	arg01, fp
104f0     1C 4E 85 F1 | 	sub	fp, #28
104f4     10 AF BF FD | 	call	#_converttoint
104f8     52 00 00 FF 
104fc     14 E4 05 F1 | 	add	objptr, ##42004
10500     F2 FA 61 FC | 	wrlong	result1, objptr
10504     52 00 00 FF 
10508     14 E4 85 F1 | 	sub	objptr, ##42004
1050c     18 00 90 FD | 	jmp	#LR__1351
10510                 | LR__1350
10510     52 00 00 FF 
10514     14 E4 05 F1 | 	add	objptr, ##42004
10518     FF FF FF FF 
1051c     F2 FE 6B FC | 	wrlong	##-1, objptr
10520     52 00 00 FF 
10524     14 E4 85 F1 | 	sub	objptr, ##42004
10528                 | LR__1351
10528                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10528     A7 16 02 FB | 	rdlong	arg03, fp
1052c     03 16 56 F2 | 	cmps	arg03, #3 wc
10530     40 00 90 CD |  if_b	jmp	#LR__1352
10534     EC AC BF FD | 	call	#_pop
10538     FF 16 02 F6 | 	mov	arg03, result3
1053c     1C 4E 05 F1 | 	add	fp, #28
10540     A7 FA 61 FC | 	wrlong	result1, fp
10544     04 4E 05 F1 | 	add	fp, #4
10548     A7 FC 61 FC | 	wrlong	result2, fp
1054c     04 4E 05 F1 | 	add	fp, #4
10550     A7 16 62 FC | 	wrlong	arg03, fp
10554     08 4E 85 F1 | 	sub	fp, #8
10558     A7 12 02 F6 | 	mov	arg01, fp
1055c     1C 4E 85 F1 | 	sub	fp, #28
10560     A4 AE BF FD | 	call	#_converttoint
10564     08 4E 05 F1 | 	add	fp, #8
10568     A7 FA 61 FC | 	wrlong	result1, fp
1056c     08 4E 85 F1 | 	sub	fp, #8
10570     0C 00 90 FD | 	jmp	#LR__1353
10574                 | LR__1352
10574     08 4E 05 F1 | 	add	fp, #8
10578     A7 02 68 FC | 	wrlong	#1, fp
1057c     08 4E 85 F1 | 	sub	fp, #8
10580                 | LR__1353
10580                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10580     A7 16 02 FB | 	rdlong	arg03, fp
10584     02 16 56 F2 | 	cmps	arg03, #2 wc
10588     3C 00 90 CD |  if_b	jmp	#LR__1354
1058c     94 AC BF FD | 	call	#_pop
10590     FF 16 02 F6 | 	mov	arg03, result3
10594     1C 4E 05 F1 | 	add	fp, #28
10598     A7 FA 61 FC | 	wrlong	result1, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 FC 61 FC | 	wrlong	result2, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 16 62 FC | 	wrlong	arg03, fp
105ac     08 4E 85 F1 | 	sub	fp, #8
105b0     A7 12 02 F6 | 	mov	arg01, fp
105b4     1C 4E 85 F1 | 	sub	fp, #28
105b8     4C AE BF FD | 	call	#_converttoint
105bc     0C 4E 05 F1 | 	add	fp, #12
105c0     A7 FA 61 FC | 	wrlong	result1, fp
105c4     0C 4E 85 F1 | 	sub	fp, #12
105c8                 | LR__1354
105c8     58 AC BF FD | 	call	#_pop
105cc     FF 16 02 F6 | 	mov	arg03, result3
105d0     1C 4E 05 F1 | 	add	fp, #28
105d4     A7 FA 61 FC | 	wrlong	result1, fp
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 FC 61 FC | 	wrlong	result2, fp
105e0     04 4E 05 F1 | 	add	fp, #4
105e4     A7 16 62 FC | 	wrlong	arg03, fp
105e8     08 4E 85 F1 | 	sub	fp, #8
105ec     A7 12 02 F6 | 	mov	arg01, fp
105f0     1C 4E 85 F1 | 	sub	fp, #28
105f4     10 AE BF FD | 	call	#_converttoint
105f8     04 4E 05 F1 | 	add	fp, #4
105fc     A7 FA 61 FC | 	wrlong	result1, fp
10600     10 4E 05 F1 | 	add	fp, #16
10604     A7 16 02 FB | 	rdlong	arg03, fp
10608     14 4E 85 F1 | 	sub	fp, #20
1060c     02 16 66 F0 | 	shl	arg03, #2
10610     50 00 00 FF 
10614     C4 E4 05 F1 | 	add	objptr, ##41156
10618     F2 1E 02 F6 | 	mov	local01, objptr
1061c     F2 16 02 F1 | 	add	arg03, objptr
10620     0B 01 68 FC | 	wrlong	#0, arg03
10624                 | ' t1=pop() : channel=converttoint(t1)
10624                 | ' 
10624                 | ' getres(j)=0
10624                 | ' if pos>=0 then
10624     01 00 00 FF 
10628     50 E5 05 F1 | 	add	objptr, ##848
1062c     F2 20 02 FB | 	rdlong	local02, objptr
10630     52 00 00 FF 
10634     14 E4 85 F1 | 	sub	objptr, ##42004
10638     00 20 56 F2 | 	cmps	local02, #0 wc
1063c     F0 01 90 CD |  if_b	jmp	#LR__1361
10640                 | '   for i=0 to  amount/1024
10640     10 4E 05 F1 | 	add	fp, #16
10644     A7 00 68 FC | 	wrlong	#0, fp
10648     08 4E 85 F1 | 	sub	fp, #8
1064c     A7 22 02 FB | 	rdlong	local03, fp
10650     08 4E 85 F1 | 	sub	fp, #8
10654     11 25 52 F6 | 	abs	local04, local03 wc
10658     0A 24 46 F0 | 	shr	local04, #10
1065c     12 25 82 F6 | 	negc	local04, local04
10660     01 24 06 F1 | 	add	local04, #1
10664                 | LR__1355
10664     10 4E 05 F1 | 	add	fp, #16
10668     A7 22 02 FB | 	rdlong	local03, fp
1066c     10 4E 85 F1 | 	sub	fp, #16
10670     12 23 52 F2 | 	cmps	local03, local04 wc
10674     9C 03 90 3D |  if_ae	jmp	#LR__1369
10678                 | '     get #channel,pos+1,block(0),amount,r
10678     04 4E 05 F1 | 	add	fp, #4
1067c     A7 12 02 FB | 	rdlong	arg01, fp
10680     52 00 00 FF 
10684     14 E4 05 F1 | 	add	objptr, ##42004
10688     F2 14 02 FB | 	rdlong	arg02, objptr
1068c     01 14 06 F1 | 	add	arg02, #1
10690     03 00 00 FF 
10694     60 E5 85 F1 | 	sub	objptr, ##1888
10698     F2 16 02 F6 | 	mov	arg03, objptr
1069c     4E 00 00 FF 
106a0     B4 E4 85 F1 | 	sub	objptr, ##40116
106a4     04 4E 05 F1 | 	add	fp, #4
106a8     A7 18 02 FB | 	rdlong	arg04, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     01 1A 06 F6 | 	mov	arg05, #1
106b4     F4 10 B1 FD | 	call	#__system___basic_get
106b8     18 4E 05 F1 | 	add	fp, #24
106bc     A7 FA 61 FC | 	wrlong	result1, fp
106c0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
106c0     0C 4E 85 F1 | 	sub	fp, #12
106c4     A7 20 02 FB | 	rdlong	local02, fp
106c8     0C 4E 85 F1 | 	sub	fp, #12
106cc     00 04 00 FF 
106d0     00 20 56 F2 | 	cmps	local02, ##524288 wc
106d4     7C 00 90 3D |  if_ae	jmp	#LR__1357
106d8     14 4E 05 F1 | 	add	fp, #20
106dc     A7 00 68 FC | 	wrlong	#0, fp
106e0     04 4E 05 F1 | 	add	fp, #4
106e4     A7 26 02 FB | 	rdlong	local05, fp
106e8     18 4E 85 F1 | 	sub	fp, #24
106ec                 | LR__1356
106ec     14 4E 05 F1 | 	add	fp, #20
106f0     A7 20 02 FB | 	rdlong	local02, fp
106f4     14 4E 85 F1 | 	sub	fp, #20
106f8     13 21 52 F2 | 	cmps	local02, local05 wc
106fc     D8 00 90 3D |  if_ae	jmp	#LR__1360
10700     0C 4E 05 F1 | 	add	fp, #12
10704     A7 12 02 FB | 	rdlong	arg01, fp
10708     04 4E 05 F1 | 	add	fp, #4
1070c     A7 22 02 FB | 	rdlong	local03, fp
10710     0A 22 66 F0 | 	shl	local03, #10
10714     11 13 02 F1 | 	add	arg01, local03
10718     04 4E 05 F1 | 	add	fp, #4
1071c     A7 22 02 FB | 	rdlong	local03, fp
10720     11 13 02 F1 | 	add	arg01, local03
10724     4E 00 00 FF 
10728     B4 E4 05 F1 | 	add	objptr, ##40116
1072c     F2 22 02 F1 | 	add	local03, objptr
10730     11 15 C2 FA | 	rdbyte	arg02, local03
10734     09 15 42 FC | 	wrbyte	arg02, arg01
10738     4E 00 00 FF 
1073c     B4 E4 85 F1 | 	sub	objptr, ##40116
10740     A7 22 02 FB | 	rdlong	local03, fp
10744     01 22 06 F1 | 	add	local03, #1
10748     A7 22 62 FC | 	wrlong	local03, fp
1074c     14 4E 85 F1 | 	sub	fp, #20
10750     98 FF 9F FD | 	jmp	#LR__1356
10754                 | LR__1357
10754     14 4E 05 F1 | 	add	fp, #20
10758     A7 00 68 FC | 	wrlong	#0, fp
1075c     04 4E 05 F1 | 	add	fp, #4
10760     A7 28 02 FB | 	rdlong	local06, fp
10764     18 4E 85 F1 | 	sub	fp, #24
10768                 | LR__1358
10768     14 4E 05 F1 | 	add	fp, #20
1076c     A7 20 02 FB | 	rdlong	local02, fp
10770     14 4E 85 F1 | 	sub	fp, #20
10774     14 21 52 F2 | 	cmps	local02, local06 wc
10778     5C 00 90 3D |  if_ae	jmp	#LR__1359
1077c     0C 4E 05 F1 | 	add	fp, #12
10780     A7 12 02 FB | 	rdlong	arg01, fp
10784     04 4E 05 F1 | 	add	fp, #4
10788     A7 26 02 FB | 	rdlong	local05, fp
1078c     0A 26 66 F0 | 	shl	local05, #10
10790     13 13 02 F1 | 	add	arg01, local05
10794     04 4E 05 F1 | 	add	fp, #4
10798     A7 26 02 FB | 	rdlong	local05, fp
1079c     13 13 02 F1 | 	add	arg01, local05
107a0     14 4E 85 F1 | 	sub	fp, #20
107a4     4E 00 00 FF 
107a8     B4 E4 05 F1 | 	add	objptr, ##40116
107ac     F2 26 02 F1 | 	add	local05, objptr
107b0     13 15 C2 FA | 	rdbyte	arg02, local05
107b4     4E 00 00 FF 
107b8     B4 E4 85 F1 | 	sub	objptr, ##40116
107bc     E0 CD B0 FD | 	call	#_pspoke
107c0     14 4E 05 F1 | 	add	fp, #20
107c4     A7 26 02 FB | 	rdlong	local05, fp
107c8     01 26 06 F1 | 	add	local05, #1
107cc     A7 26 62 FC | 	wrlong	local05, fp
107d0     14 4E 85 F1 | 	sub	fp, #20
107d4     90 FF 9F FD | 	jmp	#LR__1358
107d8                 | LR__1359
107d8                 | LR__1360
107d8     14 4E 05 F1 | 	add	fp, #20
107dc     A7 28 02 FB | 	rdlong	local06, fp
107e0     14 23 02 F6 | 	mov	local03, local06
107e4     02 22 66 F0 | 	shl	local03, #2
107e8     50 00 00 FF 
107ec     C4 E4 05 F1 | 	add	objptr, ##41156
107f0     F2 22 02 F1 | 	add	local03, objptr
107f4     02 28 66 F0 | 	shl	local06, #2
107f8     F2 28 02 F1 | 	add	local06, objptr
107fc     14 29 02 FB | 	rdlong	local06, local06
10800     04 4E 05 F1 | 	add	fp, #4
10804     A7 26 02 FB | 	rdlong	local05, fp
10808     13 29 02 F1 | 	add	local06, local05
1080c     11 29 62 FC | 	wrlong	local06, local03
10810     08 4E 85 F1 | 	sub	fp, #8
10814     A7 28 02 FB | 	rdlong	local06, fp
10818     01 28 06 F1 | 	add	local06, #1
1081c     A7 28 62 FC | 	wrlong	local06, fp
10820     10 4E 85 F1 | 	sub	fp, #16
10824     50 00 00 FF 
10828     C4 E4 85 F1 | 	sub	objptr, ##41156
1082c     34 FE 9F FD | 	jmp	#LR__1355
10830                 | LR__1361
10830                 | '   for i=0 to  amount/1024
10830     10 4E 05 F1 | 	add	fp, #16
10834     A7 00 68 FC | 	wrlong	#0, fp
10838     08 4E 85 F1 | 	sub	fp, #8
1083c     A7 22 02 FB | 	rdlong	local03, fp
10840     08 4E 85 F1 | 	sub	fp, #8
10844     11 2B 52 F6 | 	abs	local07, local03 wc
10848     0A 2A 46 F0 | 	shr	local07, #10
1084c     15 2B 82 F6 | 	negc	local07, local07
10850     01 2A 06 F1 | 	add	local07, #1
10854                 | LR__1362
10854     10 4E 05 F1 | 	add	fp, #16
10858     A7 22 02 FB | 	rdlong	local03, fp
1085c     10 4E 85 F1 | 	sub	fp, #16
10860     15 23 52 F2 | 	cmps	local03, local07 wc
10864     AC 01 90 3D |  if_ae	jmp	#LR__1368
10868                 | '     get #channel,,block(0),amount,r
10868     04 4E 05 F1 | 	add	fp, #4
1086c     A7 12 02 FB | 	rdlong	arg01, fp
10870     4E 00 00 FF 
10874     B4 E4 05 F1 | 	add	objptr, ##40116
10878     F2 16 02 F6 | 	mov	arg03, objptr
1087c     4E 00 00 FF 
10880     B4 E4 85 F1 | 	sub	objptr, ##40116
10884     04 4E 05 F1 | 	add	fp, #4
10888     A7 18 02 FB | 	rdlong	arg04, fp
1088c     08 4E 85 F1 | 	sub	fp, #8
10890     00 14 06 F6 | 	mov	arg02, #0
10894     01 1A 06 F6 | 	mov	arg05, #1
10898     10 0F B1 FD | 	call	#__system___basic_get
1089c     18 4E 05 F1 | 	add	fp, #24
108a0     A7 FA 61 FC | 	wrlong	result1, fp
108a4                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
108a4     0C 4E 85 F1 | 	sub	fp, #12
108a8     A7 20 02 FB | 	rdlong	local02, fp
108ac     0C 4E 85 F1 | 	sub	fp, #12
108b0     00 04 00 FF 
108b4     00 20 56 F2 | 	cmps	local02, ##524288 wc
108b8     7C 00 90 3D |  if_ae	jmp	#LR__1364
108bc     14 4E 05 F1 | 	add	fp, #20
108c0     A7 00 68 FC | 	wrlong	#0, fp
108c4     04 4E 05 F1 | 	add	fp, #4
108c8     A7 2C 02 FB | 	rdlong	local08, fp
108cc     18 4E 85 F1 | 	sub	fp, #24
108d0                 | LR__1363
108d0     14 4E 05 F1 | 	add	fp, #20
108d4     A7 20 02 FB | 	rdlong	local02, fp
108d8     14 4E 85 F1 | 	sub	fp, #20
108dc     16 21 52 F2 | 	cmps	local02, local08 wc
108e0     D8 00 90 3D |  if_ae	jmp	#LR__1367
108e4     0C 4E 05 F1 | 	add	fp, #12
108e8     A7 12 02 FB | 	rdlong	arg01, fp
108ec     04 4E 05 F1 | 	add	fp, #4
108f0     A7 28 02 FB | 	rdlong	local06, fp
108f4     0A 28 66 F0 | 	shl	local06, #10
108f8     14 13 02 F1 | 	add	arg01, local06
108fc     04 4E 05 F1 | 	add	fp, #4
10900     A7 28 02 FB | 	rdlong	local06, fp
10904     14 13 02 F1 | 	add	arg01, local06
10908     4E 00 00 FF 
1090c     B4 E4 05 F1 | 	add	objptr, ##40116
10910     F2 28 02 F1 | 	add	local06, objptr
10914     14 15 C2 FA | 	rdbyte	arg02, local06
10918     09 15 42 FC | 	wrbyte	arg02, arg01
1091c     4E 00 00 FF 
10920     B4 E4 85 F1 | 	sub	objptr, ##40116
10924     A7 28 02 FB | 	rdlong	local06, fp
10928     01 28 06 F1 | 	add	local06, #1
1092c     A7 28 62 FC | 	wrlong	local06, fp
10930     14 4E 85 F1 | 	sub	fp, #20
10934     98 FF 9F FD | 	jmp	#LR__1363
10938                 | LR__1364
10938     14 4E 05 F1 | 	add	fp, #20
1093c     A7 00 68 FC | 	wrlong	#0, fp
10940     04 4E 05 F1 | 	add	fp, #4
10944     A7 2E 02 FB | 	rdlong	local09, fp
10948     18 4E 85 F1 | 	sub	fp, #24
1094c                 | LR__1365
1094c     14 4E 05 F1 | 	add	fp, #20
10950     A7 20 02 FB | 	rdlong	local02, fp
10954     14 4E 85 F1 | 	sub	fp, #20
10958     17 21 52 F2 | 	cmps	local02, local09 wc
1095c     5C 00 90 3D |  if_ae	jmp	#LR__1366
10960     0C 4E 05 F1 | 	add	fp, #12
10964     A7 12 02 FB | 	rdlong	arg01, fp
10968     04 4E 05 F1 | 	add	fp, #4
1096c     A7 2C 02 FB | 	rdlong	local08, fp
10970     0A 2C 66 F0 | 	shl	local08, #10
10974     16 13 02 F1 | 	add	arg01, local08
10978     04 4E 05 F1 | 	add	fp, #4
1097c     A7 2C 02 FB | 	rdlong	local08, fp
10980     16 13 02 F1 | 	add	arg01, local08
10984     14 4E 85 F1 | 	sub	fp, #20
10988     4E 00 00 FF 
1098c     B4 E4 05 F1 | 	add	objptr, ##40116
10990     F2 2C 02 F1 | 	add	local08, objptr
10994     16 15 C2 FA | 	rdbyte	arg02, local08
10998     4E 00 00 FF 
1099c     B4 E4 85 F1 | 	sub	objptr, ##40116
109a0     FC CB B0 FD | 	call	#_pspoke
109a4     14 4E 05 F1 | 	add	fp, #20
109a8     A7 2C 02 FB | 	rdlong	local08, fp
109ac     01 2C 06 F1 | 	add	local08, #1
109b0     A7 2C 62 FC | 	wrlong	local08, fp
109b4     14 4E 85 F1 | 	sub	fp, #20
109b8     90 FF 9F FD | 	jmp	#LR__1365
109bc                 | LR__1366
109bc                 | LR__1367
109bc     14 4E 05 F1 | 	add	fp, #20
109c0     A7 2E 02 FB | 	rdlong	local09, fp
109c4     17 29 02 F6 | 	mov	local06, local09
109c8     02 28 66 F0 | 	shl	local06, #2
109cc     50 00 00 FF 
109d0     C4 E4 05 F1 | 	add	objptr, ##41156
109d4     F2 28 02 F1 | 	add	local06, objptr
109d8     02 2E 66 F0 | 	shl	local09, #2
109dc     F2 2E 02 F1 | 	add	local09, objptr
109e0     17 2F 02 FB | 	rdlong	local09, local09
109e4     04 4E 05 F1 | 	add	fp, #4
109e8     A7 2C 02 FB | 	rdlong	local08, fp
109ec     16 2F 02 F1 | 	add	local09, local08
109f0     14 2F 62 FC | 	wrlong	local09, local06
109f4     08 4E 85 F1 | 	sub	fp, #8
109f8     A7 2E 02 FB | 	rdlong	local09, fp
109fc     01 2E 06 F1 | 	add	local09, #1
10a00     A7 2E 62 FC | 	wrlong	local09, fp
10a04     10 4E 85 F1 | 	sub	fp, #16
10a08     50 00 00 FF 
10a0c     C4 E4 85 F1 | 	sub	objptr, ##41156
10a10     40 FE 9F FD | 	jmp	#LR__1362
10a14                 | LR__1368
10a14                 | LR__1369
10a14     A7 F0 03 F6 | 	mov	ptra, fp
10a18     B2 00 A0 FD | 	call	#popregs_
10a1c                 | _do_get_ret
10a1c     2D 00 64 FD | 	ret
10a20                 | 
10a20                 | ' 
10a20                 | ' sub  do_put
10a20                 | _do_put
10a20     03 4A 05 F6 | 	mov	COUNT_, #3
10a24     A8 00 A0 FD | 	call	#pushregs_
10a28     28 F0 07 F1 | 	add	ptra, #40
10a2c     4A 00 00 FF 
10a30     80 E4 05 F1 | 	add	objptr, ##38016
10a34     F2 1A 02 FB | 	rdlong	arg05, objptr
10a38     0D 19 02 F6 | 	mov	arg04, arg05
10a3c     01 18 66 F0 | 	shl	arg04, #1
10a40     0D 19 02 F1 | 	add	arg04, arg05
10a44     02 18 66 F0 | 	shl	arg04, #2
10a48     03 00 00 FF 
10a4c     04 E4 85 F1 | 	sub	objptr, ##1540
10a50     F2 18 02 F1 | 	add	arg04, objptr
10a54     0C 1B 02 FB | 	rdlong	arg05, arg04
10a58     A7 1A 62 FC | 	wrlong	arg05, fp
10a5c                 | ' numpar=compiledline(lineptr_e).result.uresult
10a5c                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10a5c     04 1A 0E F2 | 	cmp	arg05, #4 wz
10a60     47 00 00 FF 
10a64     7C E4 85 F1 | 	sub	objptr, ##36476
10a68     48 00 90 5D |  if_ne	jmp	#LR__1370
10a6c     B4 A7 BF FD | 	call	#_pop
10a70     FF 1A 02 F6 | 	mov	arg05, result3
10a74     1C 4E 05 F1 | 	add	fp, #28
10a78     A7 FA 61 FC | 	wrlong	result1, fp
10a7c     04 4E 05 F1 | 	add	fp, #4
10a80     A7 FC 61 FC | 	wrlong	result2, fp
10a84     04 4E 05 F1 | 	add	fp, #4
10a88     A7 1A 62 FC | 	wrlong	arg05, fp
10a8c     08 4E 85 F1 | 	sub	fp, #8
10a90     A7 12 02 F6 | 	mov	arg01, fp
10a94     1C 4E 85 F1 | 	sub	fp, #28
10a98     6C A9 BF FD | 	call	#_converttoint
10a9c     52 00 00 FF 
10aa0     14 E4 05 F1 | 	add	objptr, ##42004
10aa4     F2 FA 61 FC | 	wrlong	result1, objptr
10aa8     52 00 00 FF 
10aac     14 E4 85 F1 | 	sub	objptr, ##42004
10ab0     18 00 90 FD | 	jmp	#LR__1371
10ab4                 | LR__1370
10ab4     52 00 00 FF 
10ab8     14 E4 05 F1 | 	add	objptr, ##42004
10abc     FF FF FF FF 
10ac0     F2 FE 6B FC | 	wrlong	##-1, objptr
10ac4     52 00 00 FF 
10ac8     14 E4 85 F1 | 	sub	objptr, ##42004
10acc                 | LR__1371
10acc                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10acc     A7 1A 02 FB | 	rdlong	arg05, fp
10ad0     03 1A 56 F2 | 	cmps	arg05, #3 wc
10ad4     40 00 90 CD |  if_b	jmp	#LR__1372
10ad8     48 A7 BF FD | 	call	#_pop
10adc     FF 1A 02 F6 | 	mov	arg05, result3
10ae0     1C 4E 05 F1 | 	add	fp, #28
10ae4     A7 FA 61 FC | 	wrlong	result1, fp
10ae8     04 4E 05 F1 | 	add	fp, #4
10aec     A7 FC 61 FC | 	wrlong	result2, fp
10af0     04 4E 05 F1 | 	add	fp, #4
10af4     A7 1A 62 FC | 	wrlong	arg05, fp
10af8     08 4E 85 F1 | 	sub	fp, #8
10afc     A7 12 02 F6 | 	mov	arg01, fp
10b00     1C 4E 85 F1 | 	sub	fp, #28
10b04     00 A9 BF FD | 	call	#_converttoint
10b08     08 4E 05 F1 | 	add	fp, #8
10b0c     A7 FA 61 FC | 	wrlong	result1, fp
10b10     08 4E 85 F1 | 	sub	fp, #8
10b14     0C 00 90 FD | 	jmp	#LR__1373
10b18                 | LR__1372
10b18     08 4E 05 F1 | 	add	fp, #8
10b1c     A7 02 68 FC | 	wrlong	#1, fp
10b20     08 4E 85 F1 | 	sub	fp, #8
10b24                 | LR__1373
10b24                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10b24     A7 18 02 FB | 	rdlong	arg04, fp
10b28     02 18 56 F2 | 	cmps	arg04, #2 wc
10b2c     3C 00 90 CD |  if_b	jmp	#LR__1374
10b30     F0 A6 BF FD | 	call	#_pop
10b34     FF 18 02 F6 | 	mov	arg04, result3
10b38     1C 4E 05 F1 | 	add	fp, #28
10b3c     A7 FA 61 FC | 	wrlong	result1, fp
10b40     04 4E 05 F1 | 	add	fp, #4
10b44     A7 FC 61 FC | 	wrlong	result2, fp
10b48     04 4E 05 F1 | 	add	fp, #4
10b4c     A7 18 62 FC | 	wrlong	arg04, fp
10b50     08 4E 85 F1 | 	sub	fp, #8
10b54     A7 12 02 F6 | 	mov	arg01, fp
10b58     1C 4E 85 F1 | 	sub	fp, #28
10b5c     A8 A8 BF FD | 	call	#_converttoint
10b60     0C 4E 05 F1 | 	add	fp, #12
10b64     A7 FA 61 FC | 	wrlong	result1, fp
10b68     0C 4E 85 F1 | 	sub	fp, #12
10b6c                 | LR__1374
10b6c     B4 A6 BF FD | 	call	#_pop
10b70     FF 18 02 F6 | 	mov	arg04, result3
10b74     1C 4E 05 F1 | 	add	fp, #28
10b78     A7 FA 61 FC | 	wrlong	result1, fp
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 FC 61 FC | 	wrlong	result2, fp
10b84     04 4E 05 F1 | 	add	fp, #4
10b88     A7 18 62 FC | 	wrlong	arg04, fp
10b8c     08 4E 85 F1 | 	sub	fp, #8
10b90     A7 12 02 F6 | 	mov	arg01, fp
10b94     1C 4E 85 F1 | 	sub	fp, #28
10b98     6C A8 BF FD | 	call	#_converttoint
10b9c     04 4E 05 F1 | 	add	fp, #4
10ba0     A7 FA 61 FC | 	wrlong	result1, fp
10ba4     10 4E 05 F1 | 	add	fp, #16
10ba8     A7 1E 02 FB | 	rdlong	local01, fp
10bac     14 4E 85 F1 | 	sub	fp, #20
10bb0     02 1E 66 F0 | 	shl	local01, #2
10bb4     50 00 00 FF 
10bb8     C4 E4 05 F1 | 	add	objptr, ##41156
10bbc     F2 1E 02 F1 | 	add	local01, objptr
10bc0     0F 01 68 FC | 	wrlong	#0, local01
10bc4                 | ' t1=pop() : channel=converttoint(t1)
10bc4                 | ' 
10bc4                 | ' getres(j)=0
10bc4                 | ' if pos>=0 then
10bc4     01 00 00 FF 
10bc8     50 E5 05 F1 | 	add	objptr, ##848
10bcc     F2 20 02 FB | 	rdlong	local02, objptr
10bd0     52 00 00 FF 
10bd4     14 E4 85 F1 | 	sub	objptr, ##42004
10bd8     00 20 56 F2 | 	cmps	local02, #0 wc
10bdc     C0 01 90 CD |  if_b	jmp	#LR__1380
10be0     10 4E 05 F1 | 	add	fp, #16
10be4     A7 00 68 FC | 	wrlong	#0, fp
10be8     10 4E 85 F1 | 	sub	fp, #16
10bec                 | '    i=0: do
10bec                 | LR__1375
10bec     14 4E 05 F1 | 	add	fp, #20
10bf0     A7 00 68 FC | 	wrlong	#0, fp
10bf4     14 4E 85 F1 | 	sub	fp, #20
10bf8                 | '    j=0: do    
10bf8                 | LR__1376
10bf8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10bf8     0C 4E 05 F1 | 	add	fp, #12
10bfc     A7 20 02 FB | 	rdlong	local02, fp
10c00     0C 4E 85 F1 | 	sub	fp, #12
10c04     00 04 00 FF 
10c08     00 20 56 F2 | 	cmps	local02, ##524288 wc
10c0c     4C 00 90 3D |  if_ae	jmp	#LR__1377
10c10     14 4E 05 F1 | 	add	fp, #20
10c14     A7 20 02 FB | 	rdlong	local02, fp
10c18     10 1F 02 F6 | 	mov	local01, local02
10c1c     4E 00 00 FF 
10c20     B4 E4 05 F1 | 	add	objptr, ##40116
10c24     F2 1E 02 F1 | 	add	local01, objptr
10c28     08 4E 85 F1 | 	sub	fp, #8
10c2c     A7 12 02 FB | 	rdlong	arg01, fp
10c30     04 4E 05 F1 | 	add	fp, #4
10c34     A7 18 02 FB | 	rdlong	arg04, fp
10c38     0A 18 66 F0 | 	shl	arg04, #10
10c3c     0C 13 02 F1 | 	add	arg01, arg04
10c40     10 4E 85 F1 | 	sub	fp, #16
10c44     10 13 02 F1 | 	add	arg01, local02
10c48     09 FB C1 FA | 	rdbyte	result1, arg01
10c4c     4E 00 00 FF 
10c50     B4 E4 85 F1 | 	sub	objptr, ##40116
10c54     0F FB 41 FC | 	wrbyte	result1, local01
10c58     48 00 90 FD | 	jmp	#LR__1378
10c5c                 | LR__1377
10c5c     14 4E 05 F1 | 	add	fp, #20
10c60     A7 20 02 FB | 	rdlong	local02, fp
10c64     10 1F 02 F6 | 	mov	local01, local02
10c68     4E 00 00 FF 
10c6c     B4 E4 05 F1 | 	add	objptr, ##40116
10c70     F2 1E 02 F1 | 	add	local01, objptr
10c74     08 4E 85 F1 | 	sub	fp, #8
10c78     A7 12 02 FB | 	rdlong	arg01, fp
10c7c     04 4E 05 F1 | 	add	fp, #4
10c80     A7 18 02 FB | 	rdlong	arg04, fp
10c84     0A 18 66 F0 | 	shl	arg04, #10
10c88     0C 13 02 F1 | 	add	arg01, arg04
10c8c     10 4E 85 F1 | 	sub	fp, #16
10c90     10 13 02 F1 | 	add	arg01, local02
10c94     4E 00 00 FF 
10c98     B4 E4 85 F1 | 	sub	objptr, ##40116
10c9c     48 C9 B0 FD | 	call	#_pspeek
10ca0     0F FB 41 FC | 	wrbyte	result1, local01
10ca4                 | LR__1378
10ca4     14 4E 05 F1 | 	add	fp, #20
10ca8     A7 20 02 FB | 	rdlong	local02, fp
10cac     01 20 06 F1 | 	add	local02, #1
10cb0     A7 20 62 FC | 	wrlong	local02, fp
10cb4     14 4E 85 F1 | 	sub	fp, #20
10cb8     02 00 00 FF 
10cbc     00 20 56 F2 | 	cmps	local02, ##1024 wc
10cc0     2C 00 90 3D |  if_ae	jmp	#LR__1379
10cc4     10 4E 05 F1 | 	add	fp, #16
10cc8     A7 1E 02 FB | 	rdlong	local01, fp
10ccc     0A 1E 66 F0 | 	shl	local01, #10
10cd0     04 4E 05 F1 | 	add	fp, #4
10cd4     A7 20 02 FB | 	rdlong	local02, fp
10cd8     10 1F 02 F1 | 	add	local01, local02
10cdc     0C 4E 85 F1 | 	sub	fp, #12
10ce0     A7 20 02 FB | 	rdlong	local02, fp
10ce4     08 4E 85 F1 | 	sub	fp, #8
10ce8     10 1F 5A F2 | 	cmps	local01, local02 wcz
10cec     08 FF 9F ED |  if_be	jmp	#LR__1376
10cf0                 | LR__1379
10cf0                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10cf0     04 4E 05 F1 | 	add	fp, #4
10cf4     A7 12 02 FB | 	rdlong	arg01, fp
10cf8     52 00 00 FF 
10cfc     14 E4 05 F1 | 	add	objptr, ##42004
10d00     F2 14 02 FB | 	rdlong	arg02, objptr
10d04     01 14 06 F1 | 	add	arg02, #1
10d08     03 00 00 FF 
10d0c     60 E5 85 F1 | 	sub	objptr, ##1888
10d10     F2 16 02 F6 | 	mov	arg03, objptr
10d14     4E 00 00 FF 
10d18     B4 E4 85 F1 | 	sub	objptr, ##40116
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 18 02 FB | 	rdlong	arg04, fp
10d24     08 4E 85 F1 | 	sub	fp, #8
10d28     01 1A 06 F6 | 	mov	arg05, #1
10d2c     10 0A B1 FD | 	call	#__system___basic_put
10d30     18 4E 05 F1 | 	add	fp, #24
10d34     A7 FA 61 FC | 	wrlong	result1, fp
10d38     14 4E 85 F1 | 	sub	fp, #20
10d3c     A7 1E 02 FB | 	rdlong	local01, fp
10d40     02 1E 66 F0 | 	shl	local01, #2
10d44     50 00 00 FF 
10d48     C4 E4 05 F1 | 	add	objptr, ##41156
10d4c     F2 1E 02 F1 | 	add	local01, objptr
10d50     0F FB 61 FC | 	wrlong	result1, local01
10d54                 | '    if 1024*i+j>amount then exit loop
10d54     0C 4E 05 F1 | 	add	fp, #12
10d58     A7 20 02 FB | 	rdlong	local02, fp
10d5c     0A 20 66 F0 | 	shl	local02, #10
10d60     04 4E 05 F1 | 	add	fp, #4
10d64     A7 1E 02 FB | 	rdlong	local01, fp
10d68     0F 21 02 F1 | 	add	local02, local01
10d6c     0C 4E 85 F1 | 	sub	fp, #12
10d70     A7 1E 02 FB | 	rdlong	local01, fp
10d74     08 4E 85 F1 | 	sub	fp, #8
10d78     0F 21 5A F2 | 	cmps	local02, local01 wcz
10d7c     50 00 00 FF 
10d80     C4 E4 85 F1 | 	sub	objptr, ##41156
10d84     CC 01 90 1D |  if_a	jmp	#LR__1387
10d88     10 4E 05 F1 | 	add	fp, #16
10d8c     A7 20 02 FB | 	rdlong	local02, fp
10d90     01 20 06 F1 | 	add	local02, #1
10d94     A7 20 62 FC | 	wrlong	local02, fp
10d98     10 4E 85 F1 | 	sub	fp, #16
10d9c     4C FE 9F FD | 	jmp	#LR__1375
10da0                 | LR__1380
10da0     10 4E 05 F1 | 	add	fp, #16
10da4     A7 00 68 FC | 	wrlong	#0, fp
10da8     10 4E 85 F1 | 	sub	fp, #16
10dac                 | '    i=0: do
10dac                 | LR__1381
10dac     14 4E 05 F1 | 	add	fp, #20
10db0     A7 00 68 FC | 	wrlong	#0, fp
10db4     14 4E 85 F1 | 	sub	fp, #20
10db8                 | '    j=0: do  
10db8                 | LR__1382
10db8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10db8     0C 4E 05 F1 | 	add	fp, #12
10dbc     A7 20 02 FB | 	rdlong	local02, fp
10dc0     0C 4E 85 F1 | 	sub	fp, #12
10dc4     00 04 00 FF 
10dc8     00 20 56 F2 | 	cmps	local02, ##524288 wc
10dcc     4C 00 90 3D |  if_ae	jmp	#LR__1383
10dd0     14 4E 05 F1 | 	add	fp, #20
10dd4     A7 20 02 FB | 	rdlong	local02, fp
10dd8     10 1F 02 F6 | 	mov	local01, local02
10ddc     4E 00 00 FF 
10de0     B4 E4 05 F1 | 	add	objptr, ##40116
10de4     F2 1E 02 F1 | 	add	local01, objptr
10de8     08 4E 85 F1 | 	sub	fp, #8
10dec     A7 12 02 FB | 	rdlong	arg01, fp
10df0     04 4E 05 F1 | 	add	fp, #4
10df4     A7 18 02 FB | 	rdlong	arg04, fp
10df8     0A 18 66 F0 | 	shl	arg04, #10
10dfc     0C 13 02 F1 | 	add	arg01, arg04
10e00     10 4E 85 F1 | 	sub	fp, #16
10e04     10 13 02 F1 | 	add	arg01, local02
10e08     09 FB C1 FA | 	rdbyte	result1, arg01
10e0c     4E 00 00 FF 
10e10     B4 E4 85 F1 | 	sub	objptr, ##40116
10e14     0F FB 41 FC | 	wrbyte	result1, local01
10e18     48 00 90 FD | 	jmp	#LR__1384
10e1c                 | LR__1383
10e1c     14 4E 05 F1 | 	add	fp, #20
10e20     A7 20 02 FB | 	rdlong	local02, fp
10e24     10 1F 02 F6 | 	mov	local01, local02
10e28     4E 00 00 FF 
10e2c     B4 E4 05 F1 | 	add	objptr, ##40116
10e30     F2 1E 02 F1 | 	add	local01, objptr
10e34     08 4E 85 F1 | 	sub	fp, #8
10e38     A7 12 02 FB | 	rdlong	arg01, fp
10e3c     04 4E 05 F1 | 	add	fp, #4
10e40     A7 18 02 FB | 	rdlong	arg04, fp
10e44     0A 18 66 F0 | 	shl	arg04, #10
10e48     0C 13 02 F1 | 	add	arg01, arg04
10e4c     10 4E 85 F1 | 	sub	fp, #16
10e50     10 13 02 F1 | 	add	arg01, local02
10e54     4E 00 00 FF 
10e58     B4 E4 85 F1 | 	sub	objptr, ##40116
10e5c     88 C7 B0 FD | 	call	#_pspeek
10e60     0F FB 41 FC | 	wrbyte	result1, local01
10e64                 | LR__1384
10e64     14 4E 05 F1 | 	add	fp, #20
10e68     A7 20 02 FB | 	rdlong	local02, fp
10e6c     01 20 06 F1 | 	add	local02, #1
10e70     A7 20 62 FC | 	wrlong	local02, fp
10e74     14 4E 85 F1 | 	sub	fp, #20
10e78     02 00 00 FF 
10e7c     00 20 56 F2 | 	cmps	local02, ##1024 wc
10e80     2C 00 90 3D |  if_ae	jmp	#LR__1385
10e84     10 4E 05 F1 | 	add	fp, #16
10e88     A7 1E 02 FB | 	rdlong	local01, fp
10e8c     0A 1E 66 F0 | 	shl	local01, #10
10e90     04 4E 05 F1 | 	add	fp, #4
10e94     A7 20 02 FB | 	rdlong	local02, fp
10e98     10 1F 02 F1 | 	add	local01, local02
10e9c     0C 4E 85 F1 | 	sub	fp, #12
10ea0     A7 20 02 FB | 	rdlong	local02, fp
10ea4     08 4E 85 F1 | 	sub	fp, #8
10ea8     10 1F 5A F2 | 	cmps	local01, local02 wcz
10eac     08 FF 9F ED |  if_be	jmp	#LR__1382
10eb0                 | LR__1385
10eb0                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10eb0     04 4E 05 F1 | 	add	fp, #4
10eb4     A7 12 02 FB | 	rdlong	arg01, fp
10eb8     4E 00 00 FF 
10ebc     B4 E4 05 F1 | 	add	objptr, ##40116
10ec0     F2 16 02 F6 | 	mov	arg03, objptr
10ec4     4E 00 00 FF 
10ec8     B4 E4 85 F1 | 	sub	objptr, ##40116
10ecc     04 4E 05 F1 | 	add	fp, #4
10ed0     A7 18 02 FB | 	rdlong	arg04, fp
10ed4     08 4E 85 F1 | 	sub	fp, #8
10ed8     00 14 06 F6 | 	mov	arg02, #0
10edc     01 1A 06 F6 | 	mov	arg05, #1
10ee0     5C 08 B1 FD | 	call	#__system___basic_put
10ee4     18 4E 05 F1 | 	add	fp, #24
10ee8     A7 FA 61 FC | 	wrlong	result1, fp
10eec     14 4E 85 F1 | 	sub	fp, #20
10ef0     A7 1E 02 FB | 	rdlong	local01, fp
10ef4     02 1E 66 F0 | 	shl	local01, #2
10ef8     50 00 00 FF 
10efc     C4 E4 05 F1 | 	add	objptr, ##41156
10f00     F2 1E 02 F1 | 	add	local01, objptr
10f04     0F FB 61 FC | 	wrlong	result1, local01
10f08                 | '    if 1024*i+j>amount then exit loop
10f08     0C 4E 05 F1 | 	add	fp, #12
10f0c     A7 20 02 FB | 	rdlong	local02, fp
10f10     0A 20 66 F0 | 	shl	local02, #10
10f14     04 4E 05 F1 | 	add	fp, #4
10f18     A7 1E 02 FB | 	rdlong	local01, fp
10f1c     0F 21 02 F1 | 	add	local02, local01
10f20     0C 4E 85 F1 | 	sub	fp, #12
10f24     A7 22 02 FB | 	rdlong	local03, fp
10f28     08 4E 85 F1 | 	sub	fp, #8
10f2c     11 21 5A F2 | 	cmps	local02, local03 wcz
10f30     50 00 00 FF 
10f34     C4 E4 85 F1 | 	sub	objptr, ##41156
10f38     18 00 90 1D |  if_a	jmp	#LR__1386
10f3c     10 4E 05 F1 | 	add	fp, #16
10f40     A7 20 02 FB | 	rdlong	local02, fp
10f44     01 20 06 F1 | 	add	local02, #1
10f48     A7 20 62 FC | 	wrlong	local02, fp
10f4c     10 4E 85 F1 | 	sub	fp, #16
10f50     58 FE 9F FD | 	jmp	#LR__1381
10f54                 | LR__1386
10f54                 | LR__1387
10f54     A7 F0 03 F6 | 	mov	ptra, fp
10f58     B2 00 A0 FD | 	call	#popregs_
10f5c                 | _do_put_ret
10f5c     2D 00 64 FD | 	ret
10f60                 | 
10f60                 | '   
10f60                 | ' sub do_find_goto
10f60                 | _do_find_goto
10f60     03 4A 05 F6 | 	mov	COUNT_, #3
10f64     A8 00 A0 FD | 	call	#pushregs_
10f68     24 F0 07 F1 | 	add	ptra, #36
10f6c                 | _do_find_goto_enter
10f6c     4A 00 00 FF 
10f70     80 E4 05 F1 | 	add	objptr, ##38016
10f74     F2 1E 02 FB | 	rdlong	local01, objptr
10f78     0F 21 02 F6 | 	mov	local02, local01
10f7c     01 20 66 F0 | 	shl	local02, #1
10f80     0F 21 02 F1 | 	add	local02, local01
10f84     02 20 66 F0 | 	shl	local02, #2
10f88     03 00 00 FF 
10f8c     04 E4 85 F1 | 	sub	objptr, ##1540
10f90     F2 20 02 F1 | 	add	local02, objptr
10f94     04 20 06 F1 | 	add	local02, #4
10f98     10 21 02 FB | 	rdlong	local02, local02
10f9c     A7 20 62 FC | 	wrlong	local02, fp
10fa0     03 00 00 FF 
10fa4     0C E4 05 F1 | 	add	objptr, ##1548
10fa8     F2 22 02 FB | 	rdlong	local03, objptr
10fac     4A 00 00 FF 
10fb0     88 E4 85 F1 | 	sub	objptr, ##38024
10fb4     04 4E 05 F1 | 	add	fp, #4
10fb8     A7 22 62 FC | 	wrlong	local03, fp
10fbc     04 4E 85 F1 | 	sub	fp, #4
10fc0                 | ' 
10fc0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
10fc0                 | '  ' print "find goto"                                                                     'print gotoline 
10fc0                 | ' gotoptr=programstart
10fc0                 | ' do
10fc0                 | LR__1390
10fc0     0C 4E 05 F1 | 	add	fp, #12
10fc4     A7 12 02 F6 | 	mov	arg01, fp
10fc8     08 4E 85 F1 | 	sub	fp, #8
10fcc     A7 14 02 FB | 	rdlong	arg02, fp
10fd0     04 4E 85 F1 | 	sub	fp, #4
10fd4     18 16 06 F6 | 	mov	arg03, #24
10fd8     0B 00 00 FF 
10fdc     CC E4 05 F1 | 	add	objptr, ##5836
10fe0     18 ED B0 FD | 	call	#_psram_spin2_read1
10fe4     0B 00 00 FF 
10fe8     CC E4 85 F1 | 	sub	objptr, ##5836
10fec                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10fec                 | '   if gotoheader(0)<>$FFFFFFFF then
10fec     0C 4E 05 F1 | 	add	fp, #12
10ff0     A7 22 02 FB | 	rdlong	local03, fp
10ff4     0C 4E 85 F1 | 	sub	fp, #12
10ff8     FF FF 7F FF 
10ffc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
11000     24 00 90 AD |  if_e	jmp	#LR__1391
11004     04 4E 05 F1 | 	add	fp, #4
11008     A7 22 02 FB | 	rdlong	local03, fp
1100c     04 4E 05 F1 | 	add	fp, #4
11010     A7 22 62 FC | 	wrlong	local03, fp
11014     18 4E 05 F1 | 	add	fp, #24
11018     A7 22 02 FB | 	rdlong	local03, fp
1101c     1C 4E 85 F1 | 	sub	fp, #28
11020     A7 22 62 FC | 	wrlong	local03, fp
11024     04 4E 85 F1 | 	sub	fp, #4
11028                 | LR__1391
11028     20 4E 05 F1 | 	add	fp, #32
1102c     A7 22 02 FB | 	rdlong	local03, fp
11030     20 4E 85 F1 | 	sub	fp, #32
11034     FF FF 3F FF 
11038     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
1103c     0C 4E 05 51 |  if_ne	add	fp, #12
11040     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11044     0C 4E 85 51 |  if_ne	sub	fp, #12
11048     FF FF 7F 5F 
1104c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11050     18 00 90 AD |  if_e	jmp	#LR__1392
11054     0C 4E 05 F1 | 	add	fp, #12
11058     A7 22 02 FB | 	rdlong	local03, fp
1105c     0C 4E 85 F1 | 	sub	fp, #12
11060     A7 20 02 FB | 	rdlong	local02, fp
11064     10 23 0A F2 | 	cmp	local03, local02 wz
11068     54 FF 9F 5D |  if_ne	jmp	#LR__1390
1106c                 | LR__1392
1106c                 | ' 
1106c                 | ' if gotoheader(0)=gotoline then
1106c     0C 4E 05 F1 | 	add	fp, #12
11070     A7 22 02 FB | 	rdlong	local03, fp
11074     0C 4E 85 F1 | 	sub	fp, #12
11078     A7 1E 02 FB | 	rdlong	local01, fp
1107c     0F 23 0A F2 | 	cmp	local03, local01 wz
11080     D8 00 90 5D |  if_ne	jmp	#LR__1393
11084     4A 00 00 FF 
11088     80 E4 05 F1 | 	add	objptr, ##38016
1108c     F2 1E 02 FB | 	rdlong	local01, objptr
11090     0F 21 02 F6 | 	mov	local02, local01
11094     01 20 66 F0 | 	shl	local02, #1
11098     0F 21 02 F1 | 	add	local02, local01
1109c     02 20 66 F0 | 	shl	local02, #2
110a0     03 00 00 FF 
110a4     04 E4 85 F1 | 	sub	objptr, ##1540
110a8     F2 20 02 F1 | 	add	local02, objptr
110ac     08 4E 05 F1 | 	add	fp, #8
110b0     A7 22 02 FB | 	rdlong	local03, fp
110b4     10 23 62 FC | 	wrlong	local03, local02
110b8     03 00 00 FF 
110bc     04 E4 05 F1 | 	add	objptr, ##1540
110c0     F2 1E 02 FB | 	rdlong	local01, objptr
110c4     0F 21 02 F6 | 	mov	local02, local01
110c8     01 20 66 F0 | 	shl	local02, #1
110cc     0F 21 02 F1 | 	add	local02, local01
110d0     02 20 66 F0 | 	shl	local02, #2
110d4     03 00 00 FF 
110d8     04 E4 85 F1 | 	sub	objptr, ##1540
110dc     F2 20 02 F1 | 	add	local02, objptr
110e0     08 20 06 F1 | 	add	local02, #8
110e4     10 9D 68 FC | 	wrlong	#78, local02
110e8     03 00 00 FF 
110ec     04 E4 05 F1 | 	add	objptr, ##1540
110f0     F2 20 02 FB | 	rdlong	local02, objptr
110f4     10 13 02 F6 | 	mov	arg01, local02
110f8     01 12 66 F0 | 	shl	arg01, #1
110fc     10 13 02 F1 | 	add	arg01, local02
11100     02 12 66 F0 | 	shl	arg01, #2
11104     03 00 00 FF 
11108     04 E4 85 F1 | 	sub	objptr, ##1540
1110c     F2 12 02 F1 | 	add	arg01, objptr
11110     09 00 00 FF 
11114     44 E4 05 F1 | 	add	objptr, ##4676
11118     F2 14 02 FB | 	rdlong	arg02, objptr
1111c     02 22 06 F6 | 	mov	local03, #2
11120     10 23 02 F1 | 	add	local03, local02
11124     0B 00 00 FF 
11128     5C E4 85 F1 | 	sub	objptr, ##5724
1112c     F2 16 02 FB | 	rdlong	arg03, objptr
11130     0B 23 02 FD | 	qmul	local03, arg03
11134     08 4E 85 F1 | 	sub	fp, #8
11138     39 00 00 FF 
1113c     98 E5 85 F1 | 	sub	objptr, ##29592
11140     18 22 62 FD | 	getqx	local03
11144     11 15 02 F1 | 	add	arg02, local03
11148     4C EC B0 FD | 	call	#_psram_spin2_write
1114c     0B 00 00 FF 
11150     CC E4 85 F1 | 	sub	objptr, ##5836
11154     A0 EE BF FD | 	call	#_do_fast_goto
11158     08 00 90 FD | 	jmp	#LR__1394
1115c                 | LR__1393
1115c     26 12 06 F6 | 	mov	arg01, #38
11160     48 C2 B0 FD | 	call	#_printerror
11164                 | LR__1394
11164     A7 F0 03 F6 | 	mov	ptra, fp
11168     B2 00 A0 FD | 	call	#popregs_
1116c                 | _do_find_goto_ret
1116c     2D 00 64 FD | 	ret
11170                 | 
11170                 | ' 
11170                 | ' sub do_slow_goto
11170                 | _do_slow_goto
11170     02 4A 05 F6 | 	mov	COUNT_, #2
11174     A8 00 A0 FD | 	call	#pushregs_
11178     30 F0 07 F1 | 	add	ptra, #48
1117c     A4 A0 BF FD | 	call	#_pop
11180     FF 1E 02 F6 | 	mov	local01, result3
11184     24 4E 05 F1 | 	add	fp, #36
11188     A7 FA 61 FC | 	wrlong	result1, fp
1118c     04 4E 05 F1 | 	add	fp, #4
11190     A7 FC 61 FC | 	wrlong	result2, fp
11194     04 4E 05 F1 | 	add	fp, #4
11198     A7 1E 62 FC | 	wrlong	local01, fp
1119c     08 4E 85 F1 | 	sub	fp, #8
111a0     A7 12 02 F6 | 	mov	arg01, fp
111a4     24 4E 85 F1 | 	sub	fp, #36
111a8     5C A2 BF FD | 	call	#_converttoint
111ac     A7 FA 61 FC | 	wrlong	result1, fp
111b0     4A 00 00 FF 
111b4     88 E4 05 F1 | 	add	objptr, ##38024
111b8     F2 20 02 FB | 	rdlong	local02, objptr
111bc     4A 00 00 FF 
111c0     88 E4 85 F1 | 	sub	objptr, ##38024
111c4     04 4E 05 F1 | 	add	fp, #4
111c8     A7 20 62 FC | 	wrlong	local02, fp
111cc     04 4E 85 F1 | 	sub	fp, #4
111d0                 | ' 
111d0                 | ' t1=pop() : gotoline=converttoint(t1)
111d0                 | ' gotoptr=programstart
111d0                 | ' do
111d0                 | LR__1400
111d0     0C 4E 05 F1 | 	add	fp, #12
111d4     A7 12 02 F6 | 	mov	arg01, fp
111d8     08 4E 85 F1 | 	sub	fp, #8
111dc     A7 14 02 FB | 	rdlong	arg02, fp
111e0     04 4E 85 F1 | 	sub	fp, #4
111e4     18 16 06 F6 | 	mov	arg03, #24
111e8     0B 00 00 FF 
111ec     CC E4 05 F1 | 	add	objptr, ##5836
111f0     08 EB B0 FD | 	call	#_psram_spin2_read1
111f4     0B 00 00 FF 
111f8     CC E4 85 F1 | 	sub	objptr, ##5836
111fc                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
111fc                 | '   if gotoheader(0)<>$FFFFFFFF then
111fc     0C 4E 05 F1 | 	add	fp, #12
11200     A7 20 02 FB | 	rdlong	local02, fp
11204     0C 4E 85 F1 | 	sub	fp, #12
11208     FF FF 7F FF 
1120c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
11210     24 00 90 AD |  if_e	jmp	#LR__1401
11214     04 4E 05 F1 | 	add	fp, #4
11218     A7 20 02 FB | 	rdlong	local02, fp
1121c     04 4E 05 F1 | 	add	fp, #4
11220     A7 20 62 FC | 	wrlong	local02, fp
11224     18 4E 05 F1 | 	add	fp, #24
11228     A7 20 02 FB | 	rdlong	local02, fp
1122c     1C 4E 85 F1 | 	sub	fp, #28
11230     A7 20 62 FC | 	wrlong	local02, fp
11234     04 4E 85 F1 | 	sub	fp, #4
11238                 | LR__1401
11238     20 4E 05 F1 | 	add	fp, #32
1123c     A7 20 02 FB | 	rdlong	local02, fp
11240     20 4E 85 F1 | 	sub	fp, #32
11244     FF FF 3F FF 
11248     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1124c     0C 4E 05 51 |  if_ne	add	fp, #12
11250     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11254     0C 4E 85 51 |  if_ne	sub	fp, #12
11258     FF FF 7F 5F 
1125c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11260     18 00 90 AD |  if_e	jmp	#LR__1402
11264     0C 4E 05 F1 | 	add	fp, #12
11268     A7 20 02 FB | 	rdlong	local02, fp
1126c     0C 4E 85 F1 | 	sub	fp, #12
11270     A7 16 02 FB | 	rdlong	arg03, fp
11274     0B 21 0A F2 | 	cmp	local02, arg03 wz
11278     54 FF 9F 5D |  if_ne	jmp	#LR__1400
1127c                 | LR__1402
1127c                 | ' if gotoheader(0)=gotoline then  
1127c     0C 4E 05 F1 | 	add	fp, #12
11280     A7 20 02 FB | 	rdlong	local02, fp
11284     0C 4E 85 F1 | 	sub	fp, #12
11288     A7 1E 02 FB | 	rdlong	local01, fp
1128c     0F 21 0A F2 | 	cmp	local02, local01 wz
11290     60 00 90 5D |  if_ne	jmp	#LR__1403
11294     08 4E 05 F1 | 	add	fp, #8
11298     A7 20 02 FB | 	rdlong	local02, fp
1129c     08 4E 85 F1 | 	sub	fp, #8
112a0     50 00 00 FF 
112a4     B8 E4 05 F1 | 	add	objptr, ##41144
112a8     F2 20 62 FC | 	wrlong	local02, objptr
112ac     06 00 00 FF 
112b0     3C E4 85 F1 | 	sub	objptr, ##3132
112b4     F2 20 02 FB | 	rdlong	local02, objptr
112b8     01 20 86 F1 | 	sub	local02, #1
112bc     04 E4 05 F1 | 	add	objptr, #4
112c0     F2 20 62 FC | 	wrlong	local02, objptr
112c4                 | '    runptr=oldgotoptr
112c4                 | '    lineptr_e=lineptr-1
112c4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
112c4     06 00 00 FF 
112c8     84 E4 05 F1 | 	add	objptr, ##3204
112cc     F2 20 02 FB | 	rdlong	local02, objptr
112d0     50 00 00 FF 
112d4     04 E5 85 F1 | 	sub	objptr, ##41220
112d8     FF FF 3F FF 
112dc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
112e0     50 00 00 AF 
112e4     04 E5 05 A1 |  if_e	add	objptr, ##41220
112e8     F2 00 68 AC |  if_e	wrlong	#0, objptr
112ec     50 00 00 AF 
112f0     04 E5 85 A1 |  if_e	sub	objptr, ##41220
112f4                 | LR__1403
112f4     A7 F0 03 F6 | 	mov	ptra, fp
112f8     B2 00 A0 FD | 	call	#popregs_
112fc                 | _do_slow_goto_ret
112fc     2D 00 64 FD | 	ret
11300                 | 
11300                 | ' 
11300                 | ' '----------------------- Error processing
11300                 | ' 
11300                 | ' sub do_error
11300                 | _do_error
11300     01 4A 05 F6 | 	mov	COUNT_, #1
11304     A8 00 A0 FD | 	call	#pushregs_
11308     4A 00 00 FF 
1130c     80 E4 05 F1 | 	add	objptr, ##38016
11310     F2 18 02 FB | 	rdlong	arg04, objptr
11314     0C 17 02 F6 | 	mov	arg03, arg04
11318     01 16 66 F0 | 	shl	arg03, #1
1131c     0C 17 02 F1 | 	add	arg03, arg04
11320     02 16 66 F0 | 	shl	arg03, #2
11324     03 00 00 FF 
11328     04 E4 85 F1 | 	sub	objptr, ##1540
1132c     F2 16 02 F1 | 	add	arg03, objptr
11330     0B 1F 02 FB | 	rdlong	local01, arg03
11334                 | ' r=compiledline(lineptr_e).result.uresult
11334                 | ' print "Error ";r;": ";errors$(r)
11334     00 12 06 F6 | 	mov	arg01, #0
11338     47 00 00 FF 
1133c     7C E4 85 F1 | 	sub	objptr, ##36476
11340     5C 50 B1 FD | 	call	#__system___getiolock_0540
11344     FD 12 02 F6 | 	mov	arg01, result1
11348     F0 F5 B0 FD | 	call	#__system___lockmem
1134c     84 01 00 FF 
11350     31 15 06 F6 | 	mov	arg02, ##@LR__5480
11354     00 12 06 F6 | 	mov	arg01, #0
11358     00 16 06 F6 | 	mov	arg03, #0
1135c     D0 02 B1 FD | 	call	#__system___basic_print_string
11360     00 12 06 F6 | 	mov	arg01, #0
11364     0F 15 02 F6 | 	mov	arg02, local01
11368     00 16 06 F6 | 	mov	arg03, #0
1136c     0A 18 06 F6 | 	mov	arg04, #10
11370     40 03 B1 FD | 	call	#__system___basic_print_unsigned
11374     84 01 00 FF 
11378     38 15 06 F6 | 	mov	arg02, ##@LR__5481
1137c     00 12 06 F6 | 	mov	arg01, #0
11380     00 16 06 F6 | 	mov	arg03, #0
11384     A8 02 B1 FD | 	call	#__system___basic_print_string
11388     02 1E 66 F0 | 	shl	local01, #2
1138c     45 00 00 FF 
11390     7C E4 05 F1 | 	add	objptr, ##35452
11394     F2 1E 02 F1 | 	add	local01, objptr
11398     0F 15 02 FB | 	rdlong	arg02, local01
1139c     00 12 06 F6 | 	mov	arg01, #0
113a0     00 16 06 F6 | 	mov	arg03, #0
113a4     45 00 00 FF 
113a8     7C E4 85 F1 | 	sub	objptr, ##35452
113ac     80 02 B1 FD | 	call	#__system___basic_print_string
113b0     00 12 06 F6 | 	mov	arg01, #0
113b4     0A 14 06 F6 | 	mov	arg02, #10
113b8     00 16 06 F6 | 	mov	arg03, #0
113bc     18 02 B1 FD | 	call	#__system___basic_print_char
113c0     00 12 06 F6 | 	mov	arg01, #0
113c4     D8 4F B1 FD | 	call	#__system___getiolock_0540
113c8     FD 00 68 FC | 	wrlong	#0, result1
113cc     A7 F0 03 F6 | 	mov	ptra, fp
113d0     B2 00 A0 FD | 	call	#popregs_
113d4                 | _do_error_ret
113d4     2D 00 64 FD | 	ret
113d8                 | 
113d8                 | ' 
113d8                 | ' 
113d8                 | ' '------------------ Assigning to a variable  
113d8                 | ' 
113d8                 | ' 
113d8                 | ' 
113d8                 | ' sub do_assign
113d8                 | _do_assign
113d8     05 4A 05 F6 | 	mov	COUNT_, #5
113dc     A8 00 A0 FD | 	call	#pushregs_
113e0     44 F0 07 F1 | 	add	ptra, #68
113e4     4A 00 00 FF 
113e8     80 E4 05 F1 | 	add	objptr, ##38016
113ec     F2 16 02 FB | 	rdlong	arg03, objptr
113f0     0B 15 02 F6 | 	mov	arg02, arg03
113f4     01 14 66 F0 | 	shl	arg02, #1
113f8     0B 15 02 F1 | 	add	arg02, arg03
113fc     02 14 66 F0 | 	shl	arg02, #2
11400     03 00 00 FF 
11404     04 E4 85 F1 | 	sub	objptr, ##1540
11408     F2 14 02 F1 | 	add	arg02, objptr
1140c     0A 15 02 FB | 	rdlong	arg02, arg02
11410     18 4E 05 F1 | 	add	fp, #24
11414     A7 14 62 FC | 	wrlong	arg02, fp
11418                 | ' 
11418                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
11418                 | ' if variables(varnum).vartype<array_no_type then 
11418     18 4E 85 F1 | 	sub	fp, #24
1141c     04 14 66 F0 | 	shl	arg02, #4
11420     32 00 00 FF 
11424     84 E4 85 F1 | 	sub	objptr, ##25732
11428     F2 14 02 F1 | 	add	arg02, objptr
1142c     0C 14 06 F1 | 	add	arg02, #12
11430     0A 17 02 FB | 	rdlong	arg03, arg02
11434     00 17 16 F2 | 	cmp	arg03, #256 wc
11438     14 00 00 FF 
1143c     F8 E5 85 F1 | 	sub	objptr, ##10744
11440     18 01 90 3D |  if_ae	jmp	#LR__1410
11444     DC 9D BF FD | 	call	#_pop
11448     A7 FA 61 FC | 	wrlong	result1, fp
1144c     04 4E 05 F1 | 	add	fp, #4
11450     A7 FC 61 FC | 	wrlong	result2, fp
11454     04 4E 05 F1 | 	add	fp, #4
11458     A7 FE 61 FC | 	wrlong	result3, fp
1145c     08 4E 85 F1 | 	sub	fp, #8
11460     A7 16 02 FB | 	rdlong	arg03, fp
11464     04 4E 05 F1 | 	add	fp, #4
11468     A7 14 02 FB | 	rdlong	arg02, fp
1146c     14 4E 05 F1 | 	add	fp, #20
11470     A7 12 02 FB | 	rdlong	arg01, fp
11474     04 12 66 F0 | 	shl	arg01, #4
11478     14 00 00 FF 
1147c     F8 E5 05 F1 | 	add	objptr, ##10744
11480     F2 12 02 F1 | 	add	arg01, objptr
11484     04 12 06 F1 | 	add	arg01, #4
11488     09 17 62 FC | 	wrlong	arg03, arg01
1148c     A7 16 02 FB | 	rdlong	arg03, fp
11490     04 16 66 F0 | 	shl	arg03, #4
11494     F2 16 02 F1 | 	add	arg03, objptr
11498     08 16 06 F1 | 	add	arg03, #8
1149c     0B 15 62 FC | 	wrlong	arg02, arg03
114a0     A7 16 02 FB | 	rdlong	arg03, fp
114a4     04 16 66 F0 | 	shl	arg03, #4
114a8     F2 16 02 F1 | 	add	arg03, objptr
114ac     10 4E 85 F1 | 	sub	fp, #16
114b0     A7 14 02 FB | 	rdlong	arg02, fp
114b4     0C 16 06 F1 | 	add	arg03, #12
114b8     0B 15 62 FC | 	wrlong	arg02, arg03
114bc                 | '   t1=pop() 
114bc                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
114bc                 | '   if variables(varnum).vartype<>result_string2 then return
114bc     10 4E 05 F1 | 	add	fp, #16
114c0     A7 16 02 FB | 	rdlong	arg03, fp
114c4     18 4E 85 F1 | 	sub	fp, #24
114c8     04 16 66 F0 | 	shl	arg03, #4
114cc     F2 16 02 F1 | 	add	arg03, objptr
114d0     0C 16 06 F1 | 	add	arg03, #12
114d4     0B 17 02 FB | 	rdlong	arg03, arg03
114d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
114dc     14 00 00 FF 
114e0     F8 E5 85 F1 | 	sub	objptr, ##10744
114e4     E4 04 90 5D |  if_ne	jmp	#LR__1433
114e8     18 4E 05 F1 | 	add	fp, #24
114ec     A7 16 02 FB | 	rdlong	arg03, fp
114f0     0B 1F 02 F6 | 	mov	local01, arg03
114f4     04 1E 66 F0 | 	shl	local01, #4
114f8     14 00 00 FF 
114fc     F8 E5 05 F1 | 	add	objptr, ##10744
11500     F2 1E 02 F1 | 	add	local01, objptr
11504     18 4E 85 F1 | 	sub	fp, #24
11508     04 16 66 F0 | 	shl	arg03, #4
1150c     F2 16 02 F1 | 	add	arg03, objptr
11510     04 16 06 F1 | 	add	arg03, #4
11514     0B 13 02 FB | 	rdlong	arg01, arg03
11518     14 00 00 FF 
1151c     F8 E5 85 F1 | 	sub	objptr, ##10744
11520     78 9E BF FD | 	call	#_convertstring
11524     04 1E 06 F1 | 	add	local01, #4
11528     0F FB 61 FC | 	wrlong	result1, local01
1152c     18 4E 05 F1 | 	add	fp, #24
11530     A7 1E 02 FB | 	rdlong	local01, fp
11534     18 4E 85 F1 | 	sub	fp, #24
11538     04 1E 66 F0 | 	shl	local01, #4
1153c     14 00 00 FF 
11540     F8 E5 05 F1 | 	add	objptr, ##10744
11544     F2 1E 02 F1 | 	add	local01, objptr
11548     0C 1E 06 F1 | 	add	local01, #12
1154c     0F 3F 68 FC | 	wrlong	#31, local01
11550                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
11550                 | '   variables(varnum).vartype=result_string
11550                 | '   return
11550     14 00 00 FF 
11554     F8 E5 85 F1 | 	sub	objptr, ##10744
11558     70 04 90 FD | 	jmp	#LR__1433
1155c                 | LR__1410
1155c                 | ' for i=0 to 2 : arrid(i)=0 : next i
1155c     1C 4E 05 F1 | 	add	fp, #28
11560     A7 00 68 FC | 	wrlong	#0, fp
11564     97 16 48 FB | 	callpa	#(@LR__1412-@LR__1411)>>2,fcache_load_ptr_
11568                 | LR__1411
11568     A7 1E 02 FB | 	rdlong	local01, fp
1156c     02 1E 66 F0 | 	shl	local01, #2
11570     18 4E 05 F1 | 	add	fp, #24
11574     A7 1E 02 F1 | 	add	local01, fp
11578     0F 01 68 FC | 	wrlong	#0, local01
1157c     18 4E 85 F1 | 	sub	fp, #24
11580     A7 1E 02 FB | 	rdlong	local01, fp
11584     01 1E 06 F1 | 	add	local01, #1
11588     A7 1E 62 FC | 	wrlong	local01, fp
1158c     03 1E 16 F2 | 	cmp	local01, #3 wc
11590     D4 FF 9F CD |  if_b	jmp	#LR__1411
11594                 | LR__1412
11594     4A 00 00 FF 
11598     80 E4 05 F1 | 	add	objptr, ##38016
1159c     F2 16 02 FB | 	rdlong	arg03, objptr
115a0     0B 1F 02 F6 | 	mov	local01, arg03
115a4     01 1E 66 F0 | 	shl	local01, #1
115a8     0B 1F 02 F1 | 	add	local01, arg03
115ac     02 1E 66 F0 | 	shl	local01, #2
115b0     03 00 00 FF 
115b4     04 E4 85 F1 | 	sub	objptr, ##1540
115b8     F2 1E 02 F1 | 	add	local01, objptr
115bc     04 1E 06 F1 | 	add	local01, #4
115c0     0F 21 02 FB | 	rdlong	local02, local01
115c4     04 4E 05 F1 | 	add	fp, #4
115c8     A7 20 62 FC | 	wrlong	local02, fp
115cc     20 4E 85 F1 | 	sub	fp, #32
115d0     47 00 00 FF 
115d4     7C E4 85 F1 | 	sub	objptr, ##36476
115d8     48 9C BF FD | 	call	#_pop
115dc     A7 FA 61 FC | 	wrlong	result1, fp
115e0     04 4E 05 F1 | 	add	fp, #4
115e4     A7 FC 61 FC | 	wrlong	result2, fp
115e8     04 4E 05 F1 | 	add	fp, #4
115ec     A7 FE 61 FC | 	wrlong	result3, fp
115f0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
115f0                 | ' t1=pop() ' var value
115f0                 | ' if numpar>0 then
115f0     18 4E 05 F1 | 	add	fp, #24
115f4     A7 22 02 FB | 	rdlong	local03, fp
115f8     20 4E 85 F1 | 	sub	fp, #32
115fc     01 22 16 F2 | 	cmp	local03, #1 wc
11600     78 00 90 CD |  if_b	jmp	#LR__1415
11604                 | '   for i=numpar to 1 step -1
11604     20 4E 05 F1 | 	add	fp, #32
11608     A7 24 0A FB | 	rdlong	local04, fp wz
1160c     04 4E 85 F1 | 	sub	fp, #4
11610     A7 24 62 FC | 	wrlong	local04, fp
11614     1C 4E 85 F1 | 	sub	fp, #28
11618     60 00 90 AD |  if_e	jmp	#LR__1414
1161c                 | LR__1413
1161c     04 9C BF FD | 	call	#_pop
11620     0C 4E 05 F1 | 	add	fp, #12
11624     A7 FA 61 FC | 	wrlong	result1, fp
11628     04 4E 05 F1 | 	add	fp, #4
1162c     A7 FC 61 FC | 	wrlong	result2, fp
11630     04 4E 05 F1 | 	add	fp, #4
11634     A7 FE 61 FC | 	wrlong	result3, fp
11638     08 4E 05 F1 | 	add	fp, #8
1163c     A7 22 02 FB | 	rdlong	local03, fp
11640     01 22 86 F1 | 	sub	local03, #1
11644     02 22 66 F0 | 	shl	local03, #2
11648     18 4E 05 F1 | 	add	fp, #24
1164c     A7 22 02 F1 | 	add	local03, fp
11650     28 4E 85 F1 | 	sub	fp, #40
11654     A7 12 02 F6 | 	mov	arg01, fp
11658     0C 4E 85 F1 | 	sub	fp, #12
1165c     A8 9D BF FD | 	call	#_converttoint
11660     11 FB 61 FC | 	wrlong	result1, local03
11664     1C 4E 05 F1 | 	add	fp, #28
11668     A7 24 02 FB | 	rdlong	local04, fp
1166c     01 24 8E F1 | 	sub	local04, #1 wz
11670     A7 24 62 FC | 	wrlong	local04, fp
11674     1C 4E 85 F1 | 	sub	fp, #28
11678     A0 FF 9F 5D |  if_ne	jmp	#LR__1413
1167c                 | LR__1414
1167c                 | LR__1415
1167c     18 4E 05 F1 | 	add	fp, #24
11680     A7 1E 02 FB | 	rdlong	local01, fp
11684     04 1E 66 F0 | 	shl	local01, #4
11688     14 00 00 FF 
1168c     F8 E5 05 F1 | 	add	objptr, ##10744
11690     F2 1E 02 F1 | 	add	local01, objptr
11694     04 1E 06 F1 | 	add	local01, #4
11698     0F 13 02 FB | 	rdlong	arg01, local01
1169c     0C 4E 05 F1 | 	add	fp, #12
116a0     A7 12 62 FC | 	wrlong	arg01, fp
116a4     24 4E 85 F1 | 	sub	fp, #36
116a8     14 00 00 FF 
116ac     F8 E5 85 F1 | 	sub	objptr, ##10744
116b0     8C BF B0 FD | 	call	#_pslpeek
116b4     FD 24 32 F9 | 	getword	local04, result1, #0
116b8     28 4E 05 F1 | 	add	fp, #40
116bc     A7 24 62 FC | 	wrlong	local04, fp
116c0     04 4E 85 F1 | 	sub	fp, #4
116c4     A7 12 02 FB | 	rdlong	arg01, fp
116c8     24 4E 85 F1 | 	sub	fp, #36
116cc     02 12 06 F1 | 	add	arg01, #2
116d0     14 BF B0 FD | 	call	#_pspeek
116d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
116d8     2C 4E 05 F1 | 	add	fp, #44
116dc     A7 FA 61 FC | 	wrlong	result1, fp
116e0                 | ' esize=pspeek(arrptr+2)
116e0                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
116e0     08 4E 85 F1 | 	sub	fp, #8
116e4     A7 12 02 FB | 	rdlong	arg01, fp
116e8     24 4E 85 F1 | 	sub	fp, #36
116ec     04 12 06 F1 | 	add	arg01, #4
116f0     4C BF B0 FD | 	call	#_pslpeek
116f4     FD 24 02 F6 | 	mov	local04, result1
116f8     34 4E 05 F1 | 	add	fp, #52
116fc     A7 1E 02 FB | 	rdlong	local01, fp
11700     34 4E 85 F1 | 	sub	fp, #52
11704     12 1F 12 F2 | 	cmp	local01, local04 wc
11708     54 00 90 3D |  if_ae	jmp	#LR__1416
1170c     24 4E 05 F1 | 	add	fp, #36
11710     A7 12 02 FB | 	rdlong	arg01, fp
11714     24 4E 85 F1 | 	sub	fp, #36
11718     08 12 06 F1 | 	add	arg01, #8
1171c     20 BF B0 FD | 	call	#_pslpeek
11720     FD 1E 02 F6 | 	mov	local01, result1
11724     38 4E 05 F1 | 	add	fp, #56
11728     A7 24 02 FB | 	rdlong	local04, fp
1172c     38 4E 85 F1 | 	sub	fp, #56
11730     0F 25 12 F2 | 	cmp	local04, local01 wc
11734     28 00 90 3D |  if_ae	jmp	#LR__1416
11738     24 4E 05 F1 | 	add	fp, #36
1173c     A7 12 02 FB | 	rdlong	arg01, fp
11740     24 4E 85 F1 | 	sub	fp, #36
11744     0C 12 06 F1 | 	add	arg01, #12
11748     F4 BE B0 FD | 	call	#_pslpeek
1174c     3C 4E 05 F1 | 	add	fp, #60
11750     A7 24 02 FB | 	rdlong	local04, fp
11754     3C 4E 85 F1 | 	sub	fp, #60
11758     FD 24 12 F2 | 	cmp	local04, result1 wc
1175c     0C 00 90 CD |  if_b	jmp	#LR__1417
11760                 | LR__1416
11760     31 12 06 F6 | 	mov	arg01, #49
11764     44 BC B0 FD | 	call	#_printerror
11768     60 02 90 FD | 	jmp	#LR__1433
1176c                 | LR__1417
1176c     24 4E 05 F1 | 	add	fp, #36
11770     A7 12 02 FB | 	rdlong	arg01, fp
11774     09 25 02 F6 | 	mov	local04, arg01
11778     10 24 06 F1 | 	add	local04, #16
1177c     24 4E 85 F1 | 	sub	fp, #36
11780     04 12 06 F1 | 	add	arg01, #4
11784     B8 BE B0 FD | 	call	#_pslpeek
11788     FD 1E 02 F6 | 	mov	local01, result1
1178c     38 4E 05 F1 | 	add	fp, #56
11790     A7 20 02 FB | 	rdlong	local02, fp
11794     10 1F 02 FD | 	qmul	local01, local02
11798     04 4E 85 F1 | 	sub	fp, #4
1179c     A7 22 02 FB | 	rdlong	local03, fp
117a0     10 4E 85 F1 | 	sub	fp, #16
117a4     A7 12 02 FB | 	rdlong	arg01, fp
117a8     24 4E 85 F1 | 	sub	fp, #36
117ac     08 12 06 F1 | 	add	arg01, #8
117b0     18 20 62 FD | 	getqx	local02
117b4     10 23 02 F1 | 	add	local03, local02
117b8     84 BE B0 FD | 	call	#_pslpeek
117bc     FD 20 02 F6 | 	mov	local02, result1
117c0     24 4E 05 F1 | 	add	fp, #36
117c4     A7 12 02 FB | 	rdlong	arg01, fp
117c8     24 4E 85 F1 | 	sub	fp, #36
117cc     04 12 06 F1 | 	add	arg01, #4
117d0     6C BE B0 FD | 	call	#_pslpeek
117d4     FD 20 02 FD | 	qmul	local02, result1
117d8     3C 4E 05 F1 | 	add	fp, #60
117dc     A7 20 02 FB | 	rdlong	local02, fp
117e0     18 1E 62 FD | 	getqx	local01
117e4     10 1F 02 FD | 	qmul	local01, local02
117e8     10 4E 85 F1 | 	sub	fp, #16
117ec     A7 20 02 FB | 	rdlong	local02, fp
117f0     18 1E 62 FD | 	getqx	local01
117f4     0F 23 02 F1 | 	add	local03, local01
117f8     11 21 02 FD | 	qmul	local02, local03
117fc     04 4E 05 F1 | 	add	fp, #4
11800                 | ' 
11800                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
11800                 | ' select case arrtype
11800     18 22 62 FD | 	getqx	local03
11804     11 25 02 F1 | 	add	local04, local03
11808     A7 24 62 FC | 	wrlong	local04, fp
1180c     08 4E 85 F1 | 	sub	fp, #8
11810     A7 26 02 FB | 	rdlong	local05, fp
11814     28 4E 85 F1 | 	sub	fp, #40
11818     00 27 86 F1 | 	sub	local05, #256
1181c     0C 26 26 F3 | 	fle	local05, #12
11820     30 26 62 FD | 	jmprel	local05
11824                 | LR__1418
11824     30 00 90 FD | 	jmp	#LR__1419
11828     58 00 90 FD | 	jmp	#LR__1420
1182c     6C 00 90 FD | 	jmp	#LR__1421
11830     80 00 90 FD | 	jmp	#LR__1422
11834     B0 00 90 FD | 	jmp	#LR__1423
11838     E0 00 90 FD | 	jmp	#LR__1424
1183c     F4 00 90 FD | 	jmp	#LR__1425
11840     08 01 90 FD | 	jmp	#LR__1426
11844     1C 01 90 FD | 	jmp	#LR__1427
11848     30 01 90 FD | 	jmp	#LR__1428
1184c     44 01 90 FD | 	jmp	#LR__1429
11850     58 01 90 FD | 	jmp	#LR__1430
11854     6C 01 90 FD | 	jmp	#LR__1431
11858                 | LR__1419
11858     A7 12 02 F6 | 	mov	arg01, fp
1185c     30 4E 05 F1 | 	add	fp, #48
11860     A7 14 02 FB | 	rdlong	arg02, fp
11864     30 4E 85 F1 | 	sub	fp, #48
11868     0C 16 06 F6 | 	mov	arg03, #12
1186c     0B 00 00 FF 
11870     CC E4 05 F1 | 	add	objptr, ##5836
11874     20 E5 B0 FD | 	call	#_psram_spin2_write
11878     0B 00 00 FF 
1187c     CC E4 85 F1 | 	sub	objptr, ##5836
11880     48 01 90 FD | 	jmp	#LR__1432
11884                 | LR__1420
11884     30 4E 05 F1 | 	add	fp, #48
11888     A7 12 02 FB | 	rdlong	arg01, fp
1188c     30 4E 85 F1 | 	sub	fp, #48
11890     A7 14 02 FB | 	rdlong	arg02, fp
11894     08 BD B0 FD | 	call	#_pspoke
11898     30 01 90 FD | 	jmp	#LR__1432
1189c                 | LR__1421
1189c     30 4E 05 F1 | 	add	fp, #48
118a0     A7 12 02 FB | 	rdlong	arg01, fp
118a4     30 4E 85 F1 | 	sub	fp, #48
118a8     A7 14 02 FB | 	rdlong	arg02, fp
118ac     F0 BC B0 FD | 	call	#_pspoke
118b0     18 01 90 FD | 	jmp	#LR__1432
118b4                 | LR__1422
118b4     30 4E 05 F1 | 	add	fp, #48
118b8     A7 12 02 FB | 	rdlong	arg01, fp
118bc     30 4E 85 F1 | 	sub	fp, #48
118c0     A7 14 02 FB | 	rdlong	arg02, fp
118c4     D8 BC B0 FD | 	call	#_pspoke
118c8     30 4E 05 F1 | 	add	fp, #48
118cc     A7 12 02 FB | 	rdlong	arg01, fp
118d0     30 4E 85 F1 | 	sub	fp, #48
118d4     01 12 06 F1 | 	add	arg01, #1
118d8     A7 14 02 FB | 	rdlong	arg02, fp
118dc     08 14 46 F0 | 	shr	arg02, #8
118e0     BC BC B0 FD | 	call	#_pspoke
118e4     E4 00 90 FD | 	jmp	#LR__1432
118e8                 | LR__1423
118e8     30 4E 05 F1 | 	add	fp, #48
118ec     A7 12 02 FB | 	rdlong	arg01, fp
118f0     30 4E 85 F1 | 	sub	fp, #48
118f4     A7 14 02 FB | 	rdlong	arg02, fp
118f8     A4 BC B0 FD | 	call	#_pspoke
118fc     30 4E 05 F1 | 	add	fp, #48
11900     A7 12 02 FB | 	rdlong	arg01, fp
11904     30 4E 85 F1 | 	sub	fp, #48
11908     01 12 06 F1 | 	add	arg01, #1
1190c     A7 14 02 FB | 	rdlong	arg02, fp
11910     08 14 46 F0 | 	shr	arg02, #8
11914     88 BC B0 FD | 	call	#_pspoke
11918     B0 00 90 FD | 	jmp	#LR__1432
1191c                 | LR__1424
1191c     30 4E 05 F1 | 	add	fp, #48
11920     A7 12 02 FB | 	rdlong	arg01, fp
11924     30 4E 85 F1 | 	sub	fp, #48
11928     A7 14 02 FB | 	rdlong	arg02, fp
1192c     E0 BB B0 FD | 	call	#_pslpoke
11930     98 00 90 FD | 	jmp	#LR__1432
11934                 | LR__1425
11934     30 4E 05 F1 | 	add	fp, #48
11938     A7 12 02 FB | 	rdlong	arg01, fp
1193c     30 4E 85 F1 | 	sub	fp, #48
11940     A7 14 02 FB | 	rdlong	arg02, fp
11944     C8 BB B0 FD | 	call	#_pslpoke
11948     80 00 90 FD | 	jmp	#LR__1432
1194c                 | LR__1426
1194c     30 4E 05 F1 | 	add	fp, #48
11950     A7 12 02 FB | 	rdlong	arg01, fp
11954     30 4E 85 F1 | 	sub	fp, #48
11958     A7 14 02 FB | 	rdlong	arg02, fp
1195c     B0 BB B0 FD | 	call	#_pslpoke
11960     68 00 90 FD | 	jmp	#LR__1432
11964                 | LR__1427
11964     30 4E 05 F1 | 	add	fp, #48
11968     A7 12 02 FB | 	rdlong	arg01, fp
1196c     30 4E 85 F1 | 	sub	fp, #48
11970     A7 14 02 FB | 	rdlong	arg02, fp
11974     98 BB B0 FD | 	call	#_pslpoke
11978     50 00 90 FD | 	jmp	#LR__1432
1197c                 | LR__1428
1197c     30 4E 05 F1 | 	add	fp, #48
11980     A7 12 02 FB | 	rdlong	arg01, fp
11984     30 4E 85 F1 | 	sub	fp, #48
11988     A7 14 02 FB | 	rdlong	arg02, fp
1198c     80 BB B0 FD | 	call	#_pslpoke
11990     38 00 90 FD | 	jmp	#LR__1432
11994                 | LR__1429
11994     30 4E 05 F1 | 	add	fp, #48
11998     A7 12 02 FB | 	rdlong	arg01, fp
1199c     30 4E 85 F1 | 	sub	fp, #48
119a0     A7 14 02 FB | 	rdlong	arg02, fp
119a4     68 BB B0 FD | 	call	#_pslpoke
119a8     20 00 90 FD | 	jmp	#LR__1432
119ac                 | LR__1430
119ac     30 4E 05 F1 | 	add	fp, #48
119b0     A7 12 02 FB | 	rdlong	arg01, fp
119b4     30 4E 85 F1 | 	sub	fp, #48
119b8     A7 14 02 FB | 	rdlong	arg02, fp
119bc     50 BB B0 FD | 	call	#_pslpoke
119c0     08 00 90 FD | 	jmp	#LR__1432
119c4                 | LR__1431
119c4     32 12 06 F6 | 	mov	arg01, #50
119c8     E0 B9 B0 FD | 	call	#_printerror
119cc                 | LR__1432
119cc                 | LR__1433
119cc     A7 F0 03 F6 | 	mov	ptra, fp
119d0     B2 00 A0 FD | 	call	#popregs_
119d4                 | _do_assign_ret
119d4     2D 00 64 FD | 	ret
119d8                 | 
119d8                 | ' 
119d8                 | ' 
119d8                 | ' ' --------------------- Read a variable and push to the stack
119d8                 | ' 
119d8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
119d8                 | ' 
119d8                 | ' sub do_getvar
119d8                 | _do_getvar
119d8     04 4A 05 F6 | 	mov	COUNT_, #4
119dc     A8 00 A0 FD | 	call	#pushregs_
119e0     3C F0 07 F1 | 	add	ptra, #60
119e4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
119e4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
119e4     4A 00 00 FF 
119e8     80 E4 05 F1 | 	add	objptr, ##38016
119ec     F2 1E 02 FB | 	rdlong	local01, objptr
119f0     0F 17 02 F6 | 	mov	arg03, local01
119f4     01 16 66 F0 | 	shl	arg03, #1
119f8     0F 17 02 F1 | 	add	arg03, local01
119fc     02 16 66 F0 | 	shl	arg03, #2
11a00     03 00 00 FF 
11a04     04 E4 85 F1 | 	sub	objptr, ##1540
11a08     F2 16 02 F1 | 	add	arg03, objptr
11a0c     04 16 06 F1 | 	add	arg03, #4
11a10     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11a14     47 00 00 FF 
11a18     7C E4 85 F1 | 	sub	objptr, ##36476
11a1c     C4 00 90 5D |  if_ne	jmp	#LR__1441
11a20     4A 00 00 FF 
11a24     80 E4 05 F1 | 	add	objptr, ##38016
11a28     F2 1E 02 FB | 	rdlong	local01, objptr
11a2c     0F 13 02 F6 | 	mov	arg01, local01
11a30     01 12 66 F0 | 	shl	arg01, #1
11a34     0F 13 02 F1 | 	add	arg01, local01
11a38     02 12 66 F0 | 	shl	arg01, #2
11a3c     03 00 00 FF 
11a40     04 E4 85 F1 | 	sub	objptr, ##1540
11a44     F2 12 02 F1 | 	add	arg01, objptr
11a48     09 1F 02 FB | 	rdlong	local01, arg01
11a4c     04 1E 66 F0 | 	shl	local01, #4
11a50     32 00 00 FF 
11a54     84 E4 85 F1 | 	sub	objptr, ##25732
11a58     F2 1E 02 F1 | 	add	local01, objptr
11a5c     04 1E 06 F1 | 	add	local01, #4
11a60     0F 13 02 FB | 	rdlong	arg01, local01
11a64     04 1E 06 F1 | 	add	local01, #4
11a68     0F 1F 02 FB | 	rdlong	local01, local01
11a6c     A7 12 62 FC | 	wrlong	arg01, fp
11a70     04 4E 05 F1 | 	add	fp, #4
11a74     A7 1E 62 FC | 	wrlong	local01, fp
11a78     35 00 00 FF 
11a7c     88 E4 05 F1 | 	add	objptr, ##27272
11a80     F2 1E 02 FB | 	rdlong	local01, objptr
11a84     0F 13 02 F6 | 	mov	arg01, local01
11a88     01 12 66 F0 | 	shl	arg01, #1
11a8c     0F 13 02 F1 | 	add	arg01, local01
11a90     02 12 66 F0 | 	shl	arg01, #2
11a94     03 00 00 FF 
11a98     04 E4 85 F1 | 	sub	objptr, ##1540
11a9c     F2 12 02 F1 | 	add	arg01, objptr
11aa0     09 1F 02 FB | 	rdlong	local01, arg01
11aa4     04 1E 66 F0 | 	shl	local01, #4
11aa8     32 00 00 FF 
11aac     84 E4 85 F1 | 	sub	objptr, ##25732
11ab0     F2 1E 02 F1 | 	add	local01, objptr
11ab4     0C 1E 06 F1 | 	add	local01, #12
11ab8     0F 1F 02 FB | 	rdlong	local01, local01
11abc     04 4E 05 F1 | 	add	fp, #4
11ac0     A7 1E 62 FC | 	wrlong	local01, fp
11ac4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
11ac4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11ac4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
11ac4     08 4E 85 F1 | 	sub	fp, #8
11ac8     00 1F 16 F2 | 	cmp	local01, #256 wc
11acc     14 00 00 FF 
11ad0     F8 E5 85 F1 | 	sub	objptr, ##10744
11ad4     0C 00 90 3D |  if_ae	jmp	#LR__1440
11ad8     A7 12 02 F6 | 	mov	arg01, fp
11adc     DC 97 BF FD | 	call	#_push
11ae0     A0 04 90 FD | 	jmp	#LR__1462
11ae4                 | LR__1440
11ae4                 | LR__1441
11ae4     4A 00 00 FF 
11ae8     80 E4 05 F1 | 	add	objptr, ##38016
11aec     F2 16 02 FB | 	rdlong	arg03, objptr
11af0     0B 15 02 F6 | 	mov	arg02, arg03
11af4     01 14 66 F0 | 	shl	arg02, #1
11af8     0B 15 02 F1 | 	add	arg02, arg03
11afc     02 14 66 F0 | 	shl	arg02, #2
11b00     03 00 00 FF 
11b04     04 E4 85 F1 | 	sub	objptr, ##1540
11b08     F2 14 02 F1 | 	add	arg02, objptr
11b0c     0A 17 02 FB | 	rdlong	arg03, arg02
11b10     04 16 66 F0 | 	shl	arg03, #4
11b14     32 00 00 FF 
11b18     84 E4 85 F1 | 	sub	objptr, ##25732
11b1c     F2 16 02 F1 | 	add	arg03, objptr
11b20     04 16 06 F1 | 	add	arg03, #4
11b24     0B 13 02 FB | 	rdlong	arg01, arg03
11b28     0C 4E 05 F1 | 	add	fp, #12
11b2c     A7 12 62 FC | 	wrlong	arg01, fp
11b30     0C 4E 85 F1 | 	sub	fp, #12
11b34     14 00 00 FF 
11b38     F8 E5 85 F1 | 	sub	objptr, ##10744
11b3c     00 BB B0 FD | 	call	#_pslpeek
11b40     FD FA 31 F9 | 	getword	result1, result1, #0
11b44     10 4E 05 F1 | 	add	fp, #16
11b48     A7 FA 61 FC | 	wrlong	result1, fp
11b4c     4A 00 00 FF 
11b50     80 E4 05 F1 | 	add	objptr, ##38016
11b54     F2 16 02 FB | 	rdlong	arg03, objptr
11b58     0B 15 02 F6 | 	mov	arg02, arg03
11b5c     01 14 66 F0 | 	shl	arg02, #1
11b60     0B 15 02 F1 | 	add	arg02, arg03
11b64     02 14 66 F0 | 	shl	arg02, #2
11b68     03 00 00 FF 
11b6c     04 E4 85 F1 | 	sub	objptr, ##1540
11b70     F2 14 02 F1 | 	add	arg02, objptr
11b74     04 14 06 F1 | 	add	arg02, #4
11b78     0A 17 02 FB | 	rdlong	arg03, arg02
11b7c     04 4E 05 F1 | 	add	fp, #4
11b80     A7 16 62 FC | 	wrlong	arg03, fp
11b84     08 4E 85 F1 | 	sub	fp, #8
11b88     A7 12 02 FB | 	rdlong	arg01, fp
11b8c     0C 4E 85 F1 | 	sub	fp, #12
11b90     02 12 06 F1 | 	add	arg01, #2
11b94     47 00 00 FF 
11b98     7C E4 85 F1 | 	sub	objptr, ##36476
11b9c     48 BA B0 FD | 	call	#_pspeek
11ba0     FD FA E1 F8 | 	getbyte	result1, result1, #0
11ba4     18 4E 05 F1 | 	add	fp, #24
11ba8     A7 FA 61 FC | 	wrlong	result1, fp
11bac     0C 4E 85 F1 | 	sub	fp, #12
11bb0     A7 12 02 FB | 	rdlong	arg01, fp
11bb4     0C 4E 85 F1 | 	sub	fp, #12
11bb8     04 12 06 F1 | 	add	arg01, #4
11bbc     80 BA B0 FD | 	call	#_pslpeek
11bc0     1C 4E 05 F1 | 	add	fp, #28
11bc4     A7 FA 61 FC | 	wrlong	result1, fp
11bc8     10 4E 85 F1 | 	sub	fp, #16
11bcc     A7 12 02 FB | 	rdlong	arg01, fp
11bd0     0C 4E 85 F1 | 	sub	fp, #12
11bd4     08 12 06 F1 | 	add	arg01, #8
11bd8     64 BA B0 FD | 	call	#_pslpeek
11bdc     20 4E 05 F1 | 	add	fp, #32
11be0     A7 FA 61 FC | 	wrlong	result1, fp
11be4     14 4E 85 F1 | 	sub	fp, #20
11be8     A7 12 02 FB | 	rdlong	arg01, fp
11bec     0C 4E 85 F1 | 	sub	fp, #12
11bf0     0C 12 06 F1 | 	add	arg01, #12
11bf4     48 BA B0 FD | 	call	#_pslpeek
11bf8     24 4E 05 F1 | 	add	fp, #36
11bfc     A7 FA 61 FC | 	wrlong	result1, fp
11c00                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11c00                 | ' esize=pspeek(arrptr+2)
11c00                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11c00                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11c00                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11c00                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11c00     10 4E 85 F1 | 	sub	fp, #16
11c04     A7 16 02 FB | 	rdlong	arg03, fp
11c08     14 4E 85 F1 | 	sub	fp, #20
11c0c     03 16 16 F2 | 	cmp	arg03, #3 wc
11c10     38 00 90 CD |  if_b	jmp	#LR__1442
11c14     0C 96 BF FD | 	call	#_pop
11c18     FF 16 02 F6 | 	mov	arg03, result3
11c1c     A7 FA 61 FC | 	wrlong	result1, fp
11c20     04 4E 05 F1 | 	add	fp, #4
11c24     A7 FC 61 FC | 	wrlong	result2, fp
11c28     04 4E 05 F1 | 	add	fp, #4
11c2c     A7 16 62 FC | 	wrlong	arg03, fp
11c30     08 4E 85 F1 | 	sub	fp, #8
11c34     A7 12 02 F6 | 	mov	arg01, fp
11c38     CC 97 BF FD | 	call	#_converttoint
11c3c     30 4E 05 F1 | 	add	fp, #48
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     30 4E 85 F1 | 	sub	fp, #48
11c48     0C 00 90 FD | 	jmp	#LR__1443
11c4c                 | LR__1442
11c4c     30 4E 05 F1 | 	add	fp, #48
11c50     A7 00 68 FC | 	wrlong	#0, fp
11c54     30 4E 85 F1 | 	sub	fp, #48
11c58                 | LR__1443
11c58                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11c58     14 4E 05 F1 | 	add	fp, #20
11c5c     A7 16 02 FB | 	rdlong	arg03, fp
11c60     14 4E 85 F1 | 	sub	fp, #20
11c64     02 16 16 F2 | 	cmp	arg03, #2 wc
11c68     38 00 90 CD |  if_b	jmp	#LR__1444
11c6c     B4 95 BF FD | 	call	#_pop
11c70     FF 16 02 F6 | 	mov	arg03, result3
11c74     A7 FA 61 FC | 	wrlong	result1, fp
11c78     04 4E 05 F1 | 	add	fp, #4
11c7c     A7 FC 61 FC | 	wrlong	result2, fp
11c80     04 4E 05 F1 | 	add	fp, #4
11c84     A7 16 62 FC | 	wrlong	arg03, fp
11c88     08 4E 85 F1 | 	sub	fp, #8
11c8c     A7 12 02 F6 | 	mov	arg01, fp
11c90     74 97 BF FD | 	call	#_converttoint
11c94     2C 4E 05 F1 | 	add	fp, #44
11c98     A7 FA 61 FC | 	wrlong	result1, fp
11c9c     2C 4E 85 F1 | 	sub	fp, #44
11ca0     0C 00 90 FD | 	jmp	#LR__1445
11ca4                 | LR__1444
11ca4     2C 4E 05 F1 | 	add	fp, #44
11ca8     A7 00 68 FC | 	wrlong	#0, fp
11cac     2C 4E 85 F1 | 	sub	fp, #44
11cb0                 | LR__1445
11cb0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11cb0     14 4E 05 F1 | 	add	fp, #20
11cb4     A7 16 02 FB | 	rdlong	arg03, fp
11cb8     14 4E 85 F1 | 	sub	fp, #20
11cbc     01 16 16 F2 | 	cmp	arg03, #1 wc
11cc0     38 00 90 CD |  if_b	jmp	#LR__1446
11cc4     5C 95 BF FD | 	call	#_pop
11cc8     FF 16 02 F6 | 	mov	arg03, result3
11ccc     A7 FA 61 FC | 	wrlong	result1, fp
11cd0     04 4E 05 F1 | 	add	fp, #4
11cd4     A7 FC 61 FC | 	wrlong	result2, fp
11cd8     04 4E 05 F1 | 	add	fp, #4
11cdc     A7 16 62 FC | 	wrlong	arg03, fp
11ce0     08 4E 85 F1 | 	sub	fp, #8
11ce4     A7 12 02 F6 | 	mov	arg01, fp
11ce8     1C 97 BF FD | 	call	#_converttoint
11cec     28 4E 05 F1 | 	add	fp, #40
11cf0     A7 FA 61 FC | 	wrlong	result1, fp
11cf4     28 4E 85 F1 | 	sub	fp, #40
11cf8     0C 00 90 FD | 	jmp	#LR__1447
11cfc                 | LR__1446
11cfc     28 4E 05 F1 | 	add	fp, #40
11d00     A7 00 68 FC | 	wrlong	#0, fp
11d04     28 4E 85 F1 | 	sub	fp, #40
11d08                 | LR__1447
11d08     0C 4E 05 F1 | 	add	fp, #12
11d0c     A7 20 02 FB | 	rdlong	local02, fp
11d10     1C 4E 05 F1 | 	add	fp, #28
11d14     A7 22 02 FB | 	rdlong	local03, fp
11d18     04 4E 05 F1 | 	add	fp, #4
11d1c     A7 FC 01 FB | 	rdlong	result2, fp
11d20     10 4E 85 F1 | 	sub	fp, #16
11d24     A7 FE 01 FB | 	rdlong	result3, fp
11d28     FF FC 01 FD | 	qmul	result2, result3
11d2c     10 20 06 F1 | 	add	local02, #16
11d30     14 4E 05 F1 | 	add	fp, #20
11d34     A7 FC 01 FB | 	rdlong	result2, fp
11d38     18 FA 61 FD | 	getqx	result1
11d3c     FF FC 01 FD | 	qmul	result2, result3
11d40     FD 22 02 F1 | 	add	local03, result1
11d44     10 4E 85 F1 | 	sub	fp, #16
11d48     A7 FE 01 FB | 	rdlong	result3, fp
11d4c     18 FC 61 FD | 	getqx	result2
11d50     FF FC 01 FD | 	qmul	result2, result3
11d54     08 4E 85 F1 | 	sub	fp, #8
11d58     A7 FE 01 FB | 	rdlong	result3, fp
11d5c     18 FC 61 FD | 	getqx	result2
11d60     FE 22 02 F1 | 	add	local03, result2
11d64     FF 22 02 FD | 	qmul	local03, result3
11d68     1C 4E 05 F1 | 	add	fp, #28
11d6c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11d6c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11d6c                 | ' 
11d6c                 | ' select case vartype
11d6c     18 FC 61 FD | 	getqx	result2
11d70     FE 20 02 F1 | 	add	local02, result2
11d74     A7 20 62 FC | 	wrlong	local02, fp
11d78     24 4E 85 F1 | 	sub	fp, #36
11d7c     A7 24 02 FB | 	rdlong	local04, fp
11d80     10 4E 85 F1 | 	sub	fp, #16
11d84     00 25 86 F1 | 	sub	local04, #256
11d88     0C 24 26 F3 | 	fle	local04, #12
11d8c     30 24 62 FD | 	jmprel	local04
11d90                 | LR__1448
11d90     30 00 90 FD | 	jmp	#LR__1449
11d94     58 00 90 FD | 	jmp	#LR__1450
11d98     8C 00 90 FD | 	jmp	#LR__1451
11d9c     AC 00 90 FD | 	jmp	#LR__1452
11da0     E8 00 90 FD | 	jmp	#LR__1453
11da4     08 01 90 FD | 	jmp	#LR__1454
11da8     24 01 90 FD | 	jmp	#LR__1455
11dac     40 01 90 FD | 	jmp	#LR__1456
11db0     50 01 90 FD | 	jmp	#LR__1457
11db4     60 01 90 FD | 	jmp	#LR__1458
11db8     7C 01 90 FD | 	jmp	#LR__1459
11dbc     8C 01 90 FD | 	jmp	#LR__1460
11dc0     B8 01 90 FD | 	jmp	#LR__1461
11dc4                 | LR__1449
11dc4     A7 12 02 F6 | 	mov	arg01, fp
11dc8     34 4E 05 F1 | 	add	fp, #52
11dcc     A7 14 02 FB | 	rdlong	arg02, fp
11dd0     34 4E 85 F1 | 	sub	fp, #52
11dd4     0C 16 06 F6 | 	mov	arg03, #12
11dd8     0B 00 00 FF 
11ddc     CC E4 05 F1 | 	add	objptr, ##5836
11de0     18 DF B0 FD | 	call	#_psram_spin2_read1
11de4     0B 00 00 FF 
11de8     CC E4 85 F1 | 	sub	objptr, ##5836
11dec     8C 01 90 FD | 	jmp	#LR__1461
11df0                 | LR__1450
11df0     08 4E 05 F1 | 	add	fp, #8
11df4     A7 38 68 FC | 	wrlong	#28, fp
11df8     2C 4E 05 F1 | 	add	fp, #44
11dfc     A7 12 02 FB | 	rdlong	arg01, fp
11e00     34 4E 85 F1 | 	sub	fp, #52
11e04     E0 B7 B0 FD | 	call	#_pspeek
11e08     FD FA E1 F8 | 	getbyte	result1, result1, #0
11e0c     A7 FA 61 FC | 	wrlong	result1, fp
11e10     80 FA 15 F2 | 	cmp	result1, #128 wc
11e14     00 1F 66 36 |  if_ae	neg	local01, #256
11e18     A7 22 02 3B |  if_ae	rdlong	local03, fp
11e1c     11 1F 42 35 |  if_ae	or	local01, local03
11e20     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11e24     54 01 90 FD | 	jmp	#LR__1461
11e28                 | LR__1451
11e28     08 4E 05 F1 | 	add	fp, #8
11e2c     A7 3A 68 FC | 	wrlong	#29, fp
11e30     2C 4E 05 F1 | 	add	fp, #44
11e34     A7 12 02 FB | 	rdlong	arg01, fp
11e38     34 4E 85 F1 | 	sub	fp, #52
11e3c     A8 B7 B0 FD | 	call	#_pspeek
11e40     FD FA E1 F8 | 	getbyte	result1, result1, #0
11e44     A7 FA 61 FC | 	wrlong	result1, fp
11e48     30 01 90 FD | 	jmp	#LR__1461
11e4c                 | LR__1452
11e4c     08 4E 05 F1 | 	add	fp, #8
11e50     A7 38 68 FC | 	wrlong	#28, fp
11e54     2C 4E 05 F1 | 	add	fp, #44
11e58     A7 12 02 FB | 	rdlong	arg01, fp
11e5c     34 4E 85 F1 | 	sub	fp, #52
11e60     DC B7 B0 FD | 	call	#_pslpeek
11e64     FD FA 31 F9 | 	getword	result1, result1, #0
11e68     A7 FA 61 FC | 	wrlong	result1, fp
11e6c     40 00 00 FF 
11e70     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11e74     FF 7F 00 3F 
11e78     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11e7c     A7 22 02 3B |  if_ae	rdlong	local03, fp
11e80     11 1F 42 35 |  if_ae	or	local01, local03
11e84     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11e88     F0 00 90 FD | 	jmp	#LR__1461
11e8c                 | LR__1453
11e8c     08 4E 05 F1 | 	add	fp, #8
11e90     A7 3A 68 FC | 	wrlong	#29, fp
11e94     2C 4E 05 F1 | 	add	fp, #44
11e98     A7 12 02 FB | 	rdlong	arg01, fp
11e9c     34 4E 85 F1 | 	sub	fp, #52
11ea0     9C B7 B0 FD | 	call	#_pslpeek
11ea4     FD FA 31 F9 | 	getword	result1, result1, #0
11ea8     A7 FA 61 FC | 	wrlong	result1, fp
11eac     CC 00 90 FD | 	jmp	#LR__1461
11eb0                 | LR__1454
11eb0     08 4E 05 F1 | 	add	fp, #8
11eb4     A7 38 68 FC | 	wrlong	#28, fp
11eb8     2C 4E 05 F1 | 	add	fp, #44
11ebc     A7 12 02 FB | 	rdlong	arg01, fp
11ec0     34 4E 85 F1 | 	sub	fp, #52
11ec4     78 B7 B0 FD | 	call	#_pslpeek
11ec8     A7 FA 61 FC | 	wrlong	result1, fp
11ecc     AC 00 90 FD | 	jmp	#LR__1461
11ed0                 | LR__1455
11ed0     08 4E 05 F1 | 	add	fp, #8
11ed4     A7 3A 68 FC | 	wrlong	#29, fp
11ed8     2C 4E 05 F1 | 	add	fp, #44
11edc     A7 12 02 FB | 	rdlong	arg01, fp
11ee0     34 4E 85 F1 | 	sub	fp, #52
11ee4     58 B7 B0 FD | 	call	#_pslpeek
11ee8     A7 FA 61 FC | 	wrlong	result1, fp
11eec     8C 00 90 FD | 	jmp	#LR__1461
11ef0                 | LR__1456
11ef0     08 4E 05 F1 | 	add	fp, #8
11ef4     A7 FE 69 FC | 	wrlong	#255, fp
11ef8     08 4E 85 F1 | 	sub	fp, #8
11efc     A7 60 68 FC | 	wrlong	#48, fp
11f00     78 00 90 FD | 	jmp	#LR__1461
11f04                 | LR__1457
11f04     08 4E 05 F1 | 	add	fp, #8
11f08     A7 FE 69 FC | 	wrlong	#255, fp
11f0c     08 4E 85 F1 | 	sub	fp, #8
11f10     A7 60 68 FC | 	wrlong	#48, fp
11f14     64 00 90 FD | 	jmp	#LR__1461
11f18                 | LR__1458
11f18     08 4E 05 F1 | 	add	fp, #8
11f1c     A7 3C 68 FC | 	wrlong	#30, fp
11f20     2C 4E 05 F1 | 	add	fp, #44
11f24     A7 12 02 FB | 	rdlong	arg01, fp
11f28     34 4E 85 F1 | 	sub	fp, #52
11f2c     10 B7 B0 FD | 	call	#_pslpeek
11f30     A7 FA 61 FC | 	wrlong	result1, fp
11f34     44 00 90 FD | 	jmp	#LR__1461
11f38                 | LR__1459
11f38     08 4E 05 F1 | 	add	fp, #8
11f3c     A7 FE 69 FC | 	wrlong	#255, fp
11f40     08 4E 85 F1 | 	sub	fp, #8
11f44     A7 60 68 FC | 	wrlong	#48, fp
11f48     30 00 90 FD | 	jmp	#LR__1461
11f4c                 | LR__1460
11f4c     08 4E 05 F1 | 	add	fp, #8
11f50     A7 3E 68 FC | 	wrlong	#31, fp
11f54     2C 4E 05 F1 | 	add	fp, #44
11f58     A7 12 02 FB | 	rdlong	arg01, fp
11f5c     34 4E 85 F1 | 	sub	fp, #52
11f60     DC B6 B0 FD | 	call	#_pslpeek
11f64     A7 FA 61 FC | 	wrlong	result1, fp
11f68     00 04 00 FF 
11f6c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11f70     08 4E 05 31 |  if_ae	add	fp, #8
11f74     A7 56 68 3C |  if_ae	wrlong	#43, fp
11f78     08 4E 85 31 |  if_ae	sub	fp, #8
11f7c                 | LR__1461
11f7c     A7 12 02 F6 | 	mov	arg01, fp
11f80     38 93 BF FD | 	call	#_push
11f84                 | LR__1462
11f84     A7 F0 03 F6 | 	mov	ptra, fp
11f88     B2 00 A0 FD | 	call	#popregs_
11f8c                 | _do_getvar_ret
11f8c     2D 00 64 FD | 	ret
11f90                 | 
11f90                 | ' 
11f90                 | ' 
11f90                 | ' sub do_getaddr
11f90                 | _do_getaddr
11f90     01 4A 05 F6 | 	mov	COUNT_, #1
11f94     A8 00 A0 FD | 	call	#pushregs_
11f98     38 F0 07 F1 | 	add	ptra, #56
11f9c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11f9c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11f9c     4A 00 00 FF 
11fa0     80 E4 05 F1 | 	add	objptr, ##38016
11fa4     F2 12 02 FB | 	rdlong	arg01, objptr
11fa8     09 FD 01 F6 | 	mov	result2, arg01
11fac     01 FC 65 F0 | 	shl	result2, #1
11fb0     09 FD 01 F1 | 	add	result2, arg01
11fb4     02 FC 65 F0 | 	shl	result2, #2
11fb8     03 00 00 FF 
11fbc     04 E4 85 F1 | 	sub	objptr, ##1540
11fc0     F2 FC 01 F1 | 	add	result2, objptr
11fc4     04 FC 05 F1 | 	add	result2, #4
11fc8     FE FC 09 FB | 	rdlong	result2, result2 wz
11fcc     47 00 00 FF 
11fd0     7C E4 85 F1 | 	sub	objptr, ##36476
11fd4     C4 00 90 5D |  if_ne	jmp	#LR__1470
11fd8     4A 00 00 FF 
11fdc     80 E4 05 F1 | 	add	objptr, ##38016
11fe0     F2 12 02 FB | 	rdlong	arg01, objptr
11fe4     09 FD 01 F6 | 	mov	result2, arg01
11fe8     01 FC 65 F0 | 	shl	result2, #1
11fec     09 FD 01 F1 | 	add	result2, arg01
11ff0     02 FC 65 F0 | 	shl	result2, #2
11ff4     03 00 00 FF 
11ff8     04 E4 85 F1 | 	sub	objptr, ##1540
11ffc     F2 FC 01 F1 | 	add	result2, objptr
12000     FE 12 02 FB | 	rdlong	arg01, result2
12004     04 12 66 F0 | 	shl	arg01, #4
12008     32 00 00 FF 
1200c     84 E4 85 F1 | 	sub	objptr, ##25732
12010     F2 12 02 F1 | 	add	arg01, objptr
12014     0C 12 06 F1 | 	add	arg01, #12
12018     09 13 02 FB | 	rdlong	arg01, arg01
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 12 62 FC | 	wrlong	arg01, fp
12024                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
12024                 | '    if t1.result_type>=array_no_type then goto 2200
12024     08 4E 85 F1 | 	sub	fp, #8
12028     00 13 16 F2 | 	cmp	arg01, #256 wc
1202c     14 00 00 FF 
12030     F8 E5 85 F1 | 	sub	objptr, ##10744
12034     64 00 90 3D |  if_ae	jmp	#LR__1471
12038     4A 00 00 FF 
1203c     80 E4 05 F1 | 	add	objptr, ##38016
12040     F2 12 02 FB | 	rdlong	arg01, objptr
12044     09 FB 01 F6 | 	mov	result1, arg01
12048     01 FA 65 F0 | 	shl	result1, #1
1204c     09 FB 01 F1 | 	add	result1, arg01
12050     02 FA 65 F0 | 	shl	result1, #2
12054     03 00 00 FF 
12058     04 E4 85 F1 | 	sub	objptr, ##1540
1205c     F2 FA 01 F1 | 	add	result1, objptr
12060     FD FA 01 FB | 	rdlong	result1, result1
12064     04 FA 65 F0 | 	shl	result1, #4
12068     32 00 00 FF 
1206c     84 E4 85 F1 | 	sub	objptr, ##25732
12070     F2 FA 01 F1 | 	add	result1, objptr
12074     04 FA 05 F1 | 	add	result1, #4
12078     14 00 00 FF 
1207c     F8 E5 85 F1 | 	sub	objptr, ##10744
12080     A7 FA 61 FC | 	wrlong	result1, fp
12084     08 4E 05 F1 | 	add	fp, #8
12088     A7 3A 68 FC | 	wrlong	#29, fp
1208c     08 4E 85 F1 | 	sub	fp, #8
12090     A7 12 02 F6 | 	mov	arg01, fp
12094     24 92 BF FD | 	call	#_push
12098                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
12098                 | '   t1.result_type=result_uint
12098                 | '   push t1 : return
12098     D8 02 90 FD | 	jmp	#LR__1480
1209c                 | LR__1470
1209c                 | LR__1471
1209c     4A 00 00 FF 
120a0     80 E4 05 F1 | 	add	objptr, ##38016
120a4     F2 FE 01 FB | 	rdlong	result3, objptr
120a8     FF 12 02 F6 | 	mov	arg01, result3
120ac     01 12 66 F0 | 	shl	arg01, #1
120b0     FF 12 02 F1 | 	add	arg01, result3
120b4     02 12 66 F0 | 	shl	arg01, #2
120b8     03 00 00 FF 
120bc     04 E4 85 F1 | 	sub	objptr, ##1540
120c0     F2 12 02 F1 | 	add	arg01, objptr
120c4     09 13 02 FB | 	rdlong	arg01, arg01
120c8     04 12 66 F0 | 	shl	arg01, #4
120cc     32 00 00 FF 
120d0     84 E4 85 F1 | 	sub	objptr, ##25732
120d4     F2 12 02 F1 | 	add	arg01, objptr
120d8     04 12 06 F1 | 	add	arg01, #4
120dc     09 13 02 FB | 	rdlong	arg01, arg01
120e0     0C 4E 05 F1 | 	add	fp, #12
120e4     A7 12 62 FC | 	wrlong	arg01, fp
120e8     0C 4E 85 F1 | 	sub	fp, #12
120ec     14 00 00 FF 
120f0     F8 E5 85 F1 | 	sub	objptr, ##10744
120f4     48 B5 B0 FD | 	call	#_pslpeek
120f8     FD FA 31 F9 | 	getword	result1, result1, #0
120fc     10 4E 05 F1 | 	add	fp, #16
12100     A7 FA 61 FC | 	wrlong	result1, fp
12104     4A 00 00 FF 
12108     80 E4 05 F1 | 	add	objptr, ##38016
1210c     F2 FE 01 FB | 	rdlong	result3, objptr
12110     FF 12 02 F6 | 	mov	arg01, result3
12114     01 12 66 F0 | 	shl	arg01, #1
12118     FF 12 02 F1 | 	add	arg01, result3
1211c     02 12 66 F0 | 	shl	arg01, #2
12120     03 00 00 FF 
12124     04 E4 85 F1 | 	sub	objptr, ##1540
12128     F2 12 02 F1 | 	add	arg01, objptr
1212c     04 12 06 F1 | 	add	arg01, #4
12130     09 13 02 FB | 	rdlong	arg01, arg01
12134     04 4E 05 F1 | 	add	fp, #4
12138     A7 12 62 FC | 	wrlong	arg01, fp
1213c     08 4E 85 F1 | 	sub	fp, #8
12140     A7 12 02 FB | 	rdlong	arg01, fp
12144     0C 4E 85 F1 | 	sub	fp, #12
12148     02 12 06 F1 | 	add	arg01, #2
1214c     47 00 00 FF 
12150     7C E4 85 F1 | 	sub	objptr, ##36476
12154     90 B4 B0 FD | 	call	#_pspeek
12158     FD FA E1 F8 | 	getbyte	result1, result1, #0
1215c     18 4E 05 F1 | 	add	fp, #24
12160     A7 FA 61 FC | 	wrlong	result1, fp
12164     0C 4E 85 F1 | 	sub	fp, #12
12168     A7 12 02 FB | 	rdlong	arg01, fp
1216c     0C 4E 85 F1 | 	sub	fp, #12
12170     04 12 06 F1 | 	add	arg01, #4
12174     C8 B4 B0 FD | 	call	#_pslpeek
12178     1C 4E 05 F1 | 	add	fp, #28
1217c     A7 FA 61 FC | 	wrlong	result1, fp
12180     10 4E 85 F1 | 	sub	fp, #16
12184     A7 12 02 FB | 	rdlong	arg01, fp
12188     0C 4E 85 F1 | 	sub	fp, #12
1218c     08 12 06 F1 | 	add	arg01, #8
12190     AC B4 B0 FD | 	call	#_pslpeek
12194     20 4E 05 F1 | 	add	fp, #32
12198     A7 FA 61 FC | 	wrlong	result1, fp
1219c     14 4E 85 F1 | 	sub	fp, #20
121a0     A7 12 02 FB | 	rdlong	arg01, fp
121a4     0C 4E 85 F1 | 	sub	fp, #12
121a8     0C 12 06 F1 | 	add	arg01, #12
121ac     90 B4 B0 FD | 	call	#_pslpeek
121b0     24 4E 05 F1 | 	add	fp, #36
121b4     A7 FA 61 FC | 	wrlong	result1, fp
121b8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
121b8                 | ' esize=pspeek(arrptr+2)
121b8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
121b8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
121b8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
121b8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
121b8     10 4E 85 F1 | 	sub	fp, #16
121bc     A7 12 02 FB | 	rdlong	arg01, fp
121c0     14 4E 85 F1 | 	sub	fp, #20
121c4     03 12 16 F2 | 	cmp	arg01, #3 wc
121c8     34 00 90 CD |  if_b	jmp	#LR__1472
121cc     54 90 BF FD | 	call	#_pop
121d0     A7 FA 61 FC | 	wrlong	result1, fp
121d4     04 4E 05 F1 | 	add	fp, #4
121d8     A7 FC 61 FC | 	wrlong	result2, fp
121dc     04 4E 05 F1 | 	add	fp, #4
121e0     A7 FE 61 FC | 	wrlong	result3, fp
121e4     08 4E 85 F1 | 	sub	fp, #8
121e8     A7 12 02 F6 | 	mov	arg01, fp
121ec     18 92 BF FD | 	call	#_converttoint
121f0     30 4E 05 F1 | 	add	fp, #48
121f4     A7 FA 61 FC | 	wrlong	result1, fp
121f8     30 4E 85 F1 | 	sub	fp, #48
121fc     0C 00 90 FD | 	jmp	#LR__1473
12200                 | LR__1472
12200     30 4E 05 F1 | 	add	fp, #48
12204     A7 00 68 FC | 	wrlong	#0, fp
12208     30 4E 85 F1 | 	sub	fp, #48
1220c                 | LR__1473
1220c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1220c     14 4E 05 F1 | 	add	fp, #20
12210     A7 12 02 FB | 	rdlong	arg01, fp
12214     14 4E 85 F1 | 	sub	fp, #20
12218     02 12 16 F2 | 	cmp	arg01, #2 wc
1221c     34 00 90 CD |  if_b	jmp	#LR__1474
12220     00 90 BF FD | 	call	#_pop
12224     A7 FA 61 FC | 	wrlong	result1, fp
12228     04 4E 05 F1 | 	add	fp, #4
1222c     A7 FC 61 FC | 	wrlong	result2, fp
12230     04 4E 05 F1 | 	add	fp, #4
12234     A7 FE 61 FC | 	wrlong	result3, fp
12238     08 4E 85 F1 | 	sub	fp, #8
1223c     A7 12 02 F6 | 	mov	arg01, fp
12240     C4 91 BF FD | 	call	#_converttoint
12244     2C 4E 05 F1 | 	add	fp, #44
12248     A7 FA 61 FC | 	wrlong	result1, fp
1224c     2C 4E 85 F1 | 	sub	fp, #44
12250     0C 00 90 FD | 	jmp	#LR__1475
12254                 | LR__1474
12254     2C 4E 05 F1 | 	add	fp, #44
12258     A7 00 68 FC | 	wrlong	#0, fp
1225c     2C 4E 85 F1 | 	sub	fp, #44
12260                 | LR__1475
12260                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
12260     14 4E 05 F1 | 	add	fp, #20
12264     A7 12 02 FB | 	rdlong	arg01, fp
12268     14 4E 85 F1 | 	sub	fp, #20
1226c     01 12 16 F2 | 	cmp	arg01, #1 wc
12270     34 00 90 CD |  if_b	jmp	#LR__1476
12274     AC 8F BF FD | 	call	#_pop
12278     A7 FA 61 FC | 	wrlong	result1, fp
1227c     04 4E 05 F1 | 	add	fp, #4
12280     A7 FC 61 FC | 	wrlong	result2, fp
12284     04 4E 05 F1 | 	add	fp, #4
12288     A7 FE 61 FC | 	wrlong	result3, fp
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     A7 12 02 F6 | 	mov	arg01, fp
12294     70 91 BF FD | 	call	#_converttoint
12298     28 4E 05 F1 | 	add	fp, #40
1229c     A7 FA 61 FC | 	wrlong	result1, fp
122a0     28 4E 85 F1 | 	sub	fp, #40
122a4     0C 00 90 FD | 	jmp	#LR__1477
122a8                 | LR__1476
122a8     28 4E 05 F1 | 	add	fp, #40
122ac     A7 00 68 FC | 	wrlong	#0, fp
122b0     28 4E 85 F1 | 	sub	fp, #40
122b4                 | LR__1477
122b4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
122b4                 | ' if numpar>0 then
122b4     14 4E 05 F1 | 	add	fp, #20
122b8     A7 FE 01 FB | 	rdlong	result3, fp
122bc     14 4E 85 F1 | 	sub	fp, #20
122c0     01 FE 15 F2 | 	cmp	result3, #1 wc
122c4     8C 00 90 CD |  if_b	jmp	#LR__1478
122c8     0C 4E 05 F1 | 	add	fp, #12
122cc     A7 FC 01 FB | 	rdlong	result2, fp
122d0     1C 4E 05 F1 | 	add	fp, #28
122d4     A7 FE 01 FB | 	rdlong	result3, fp
122d8     04 4E 05 F1 | 	add	fp, #4
122dc     A7 12 02 FB | 	rdlong	arg01, fp
122e0     10 4E 85 F1 | 	sub	fp, #16
122e4     A7 FA 01 FB | 	rdlong	result1, fp
122e8     FD 12 02 FD | 	qmul	arg01, result1
122ec     10 FC 05 F1 | 	add	result2, #16
122f0     14 4E 05 F1 | 	add	fp, #20
122f4     A7 1E 02 FB | 	rdlong	local01, fp
122f8     18 12 62 FD | 	getqx	arg01
122fc     FD 1E 02 FD | 	qmul	local01, result1
12300     09 FF 01 F1 | 	add	result3, arg01
12304     10 4E 85 F1 | 	sub	fp, #16
12308     A7 1E 02 FB | 	rdlong	local01, fp
1230c     18 FA 61 FD | 	getqx	result1
12310     0F FB 01 FD | 	qmul	result1, local01
12314     08 4E 85 F1 | 	sub	fp, #8
12318     A7 1E 02 FB | 	rdlong	local01, fp
1231c     18 FA 61 FD | 	getqx	result1
12320     FD FE 01 F1 | 	add	result3, result1
12324     0F FF 01 FD | 	qmul	result3, local01
12328     1C 4E 05 F1 | 	add	fp, #28
1232c     18 1E 62 FD | 	getqx	local01
12330     0F FD 01 F1 | 	add	result2, local01
12334     A7 FC 61 FC | 	wrlong	result2, fp
12338     2C 4E 85 F1 | 	sub	fp, #44
1233c     A7 3A 68 FC | 	wrlong	#29, fp
12340     2C 4E 05 F1 | 	add	fp, #44
12344     A7 1E 02 FB | 	rdlong	local01, fp
12348     34 4E 85 F1 | 	sub	fp, #52
1234c     A7 1E 62 FC | 	wrlong	local01, fp
12350     18 00 90 FD | 	jmp	#LR__1479
12354                 | LR__1478
12354     08 4E 05 F1 | 	add	fp, #8
12358     A7 3A 68 FC | 	wrlong	#29, fp
1235c     04 4E 05 F1 | 	add	fp, #4
12360     A7 1E 02 FB | 	rdlong	local01, fp
12364     0C 4E 85 F1 | 	sub	fp, #12
12368     A7 1E 62 FC | 	wrlong	local01, fp
1236c                 | LR__1479
1236c     A7 12 02 F6 | 	mov	arg01, fp
12370     48 8F BF FD | 	call	#_push
12374                 | LR__1480
12374     A7 F0 03 F6 | 	mov	ptra, fp
12378     B2 00 A0 FD | 	call	#popregs_
1237c                 | _do_getaddr_ret
1237c     2D 00 64 FD | 	ret
12380                 | 
12380                 | ' 
12380                 | ' 
12380                 | ' sub do_inkey
12380                 | _do_inkey
12380     02 4A 05 F6 | 	mov	COUNT_, #2
12384     A8 00 A0 FD | 	call	#pushregs_
12388     0C F0 07 F1 | 	add	ptra, #12
1238c     98 DD B0 FD | 	call	#_usbnew_spin2_get_key
12390     45 00 00 FF 
12394     74 E4 05 F1 | 	add	objptr, ##35444
12398     F2 FA 61 FC | 	wrlong	result1, objptr
1239c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
1239c     45 00 00 FF 
123a0     74 E4 85 F1 | 	sub	objptr, ##35444
123a4     00 FA 0D F2 | 	cmp	result1, #0 wz
123a8     94 00 90 AD |  if_e	jmp	#LR__1491
123ac     45 00 00 FF 
123b0     74 E4 05 F1 | 	add	objptr, ##35444
123b4     F2 1C 02 FB | 	rdlong	arg06, objptr
123b8     45 00 00 FF 
123bc     74 E4 85 F1 | 	sub	objptr, ##35444
123c0     00 00 40 FF 
123c4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
123c8     45 00 00 CF 
123cc     74 E4 05 C1 |  if_b	add	objptr, ##35444
123d0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
123d4     45 00 00 CF 
123d8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
123dc     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
123e0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
123e4     58 00 90 3D |  if_ae	jmp	#LR__1491
123e8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
123e8     50 00 00 FF 
123ec     14 E5 05 F1 | 	add	objptr, ##41236
123f0     F2 1C 02 FB | 	rdlong	arg06, objptr
123f4     50 00 00 FF 
123f8     14 E5 85 F1 | 	sub	objptr, ##41236
123fc     01 1C 0E F2 | 	cmp	arg06, #1 wz
12400     3C 00 90 5D |  if_ne	jmp	#LR__1490
12404     51 00 00 FF 
12408     B8 E5 05 F1 | 	add	objptr, ##41912
1240c     F2 14 02 FB | 	rdlong	arg02, objptr
12410     04 E4 85 F1 | 	sub	objptr, #4
12414     F2 1A 02 FB | 	rdlong	arg05, objptr
12418     07 12 06 F6 | 	mov	arg01, #7
1241c     56 00 00 FF 
12420     44 16 06 F6 | 	mov	arg03, ##44100
12424     0C 18 C6 F9 | 	decod	arg04, #12
12428     01 1C 66 F6 | 	neg	arg06, #1
1242c     46 00 00 FF 
12430     E8 E4 85 F1 | 	sub	objptr, ##36072
12434     94 E0 B0 FD | 	call	#_audio096_spin2_play
12438     0B 00 00 FF 
1243c     CC E4 85 F1 | 	sub	objptr, ##5836
12440                 | LR__1490
12440                 | LR__1491
12440                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12440     45 00 00 FF 
12444     74 E4 05 F1 | 	add	objptr, ##35444
12448     F2 1C 0A FB | 	rdlong	arg06, objptr wz
1244c     45 00 00 FF 
12450     74 E4 85 F1 | 	sub	objptr, ##35444
12454     D4 01 90 AD |  if_e	jmp	#LR__1500
12458     45 00 00 FF 
1245c     74 E4 05 F1 | 	add	objptr, ##35444
12460     F2 1C 02 FB | 	rdlong	arg06, objptr
12464     45 00 00 FF 
12468     74 E4 85 F1 | 	sub	objptr, ##35444
1246c     00 00 40 FF 
12470     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12474     45 00 00 CF 
12478     74 E4 05 C1 |  if_b	add	objptr, ##35444
1247c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12480     45 00 00 CF 
12484     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12488     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
1248c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
12490     98 01 90 3D |  if_ae	jmp	#LR__1500
12494                 | '   if leds and 2 = 2 then 
12494     51 00 00 FF 
12498     E0 E5 05 F1 | 	add	objptr, ##41952
1249c     F2 1E 0A FB | 	rdlong	local01, objptr wz
124a0     51 00 00 FF 
124a4     E0 E5 85 F1 | 	sub	objptr, ##41952
124a8     58 01 90 AD |  if_e	jmp	#LR__1499
124ac                 | '     if key>96 andalso key<123 then
124ac     45 00 00 FF 
124b0     74 E4 05 F1 | 	add	objptr, ##35444
124b4     F2 1E 02 FB | 	rdlong	local01, objptr
124b8     45 00 00 FF 
124bc     74 E4 85 F1 | 	sub	objptr, ##35444
124c0     61 1E 16 F2 | 	cmp	local01, #97 wc
124c4     3C 00 90 CD |  if_b	jmp	#LR__1492
124c8     45 00 00 FF 
124cc     74 E4 05 F1 | 	add	objptr, ##35444
124d0     F2 1E 02 FB | 	rdlong	local01, objptr
124d4     45 00 00 FF 
124d8     74 E4 85 F1 | 	sub	objptr, ##35444
124dc     7B 1E 16 F2 | 	cmp	local01, #123 wc
124e0     20 00 90 3D |  if_ae	jmp	#LR__1492
124e4     45 00 00 FF 
124e8     74 E4 05 F1 | 	add	objptr, ##35444
124ec     F2 1E 02 FB | 	rdlong	local01, objptr
124f0     20 1E 86 F1 | 	sub	local01, #32
124f4     F2 1E 62 FC | 	wrlong	local01, objptr
124f8     45 00 00 FF 
124fc     74 E4 85 F1 | 	sub	objptr, ##35444
12500     00 01 90 FD | 	jmp	#LR__1498
12504                 | LR__1492
12504     45 00 00 FF 
12508     74 E4 05 F1 | 	add	objptr, ##35444
1250c     F2 1E 02 FB | 	rdlong	local01, objptr
12510     45 00 00 FF 
12514     74 E4 85 F1 | 	sub	objptr, ##35444
12518     41 1E 16 F2 | 	cmp	local01, #65 wc
1251c     3C 00 90 CD |  if_b	jmp	#LR__1493
12520     45 00 00 FF 
12524     74 E4 05 F1 | 	add	objptr, ##35444
12528     F2 1E 02 FB | 	rdlong	local01, objptr
1252c     45 00 00 FF 
12530     74 E4 85 F1 | 	sub	objptr, ##35444
12534     5B 1E 16 F2 | 	cmp	local01, #91 wc
12538     20 00 90 3D |  if_ae	jmp	#LR__1493
1253c     45 00 00 FF 
12540     74 E4 05 F1 | 	add	objptr, ##35444
12544     F2 1E 02 FB | 	rdlong	local01, objptr
12548     20 1E 06 F1 | 	add	local01, #32
1254c     F2 1E 62 FC | 	wrlong	local01, objptr
12550     45 00 00 FF 
12554     74 E4 85 F1 | 	sub	objptr, ##35444
12558     A8 00 90 FD | 	jmp	#LR__1497
1255c                 | LR__1493
1255c     45 00 00 FF 
12560     74 E4 05 F1 | 	add	objptr, ##35444
12564     F2 1E 02 FB | 	rdlong	local01, objptr
12568     45 00 00 FF 
1256c     74 E4 85 F1 | 	sub	objptr, ##35444
12570     17 1E 16 F2 | 	cmp	local01, #23 wc
12574     3C 00 90 CD |  if_b	jmp	#LR__1494
12578     45 00 00 FF 
1257c     74 E4 05 F1 | 	add	objptr, ##35444
12580     F2 1E 02 FB | 	rdlong	local01, objptr
12584     45 00 00 FF 
12588     74 E4 85 F1 | 	sub	objptr, ##35444
1258c     20 1E 16 F2 | 	cmp	local01, #32 wc
12590     20 00 90 3D |  if_ae	jmp	#LR__1494
12594     45 00 00 FF 
12598     74 E4 05 F1 | 	add	objptr, ##35444
1259c     F2 1E 02 FB | 	rdlong	local01, objptr
125a0     09 1E 86 F1 | 	sub	local01, #9
125a4     F2 1E 62 FC | 	wrlong	local01, objptr
125a8     45 00 00 FF 
125ac     74 E4 85 F1 | 	sub	objptr, ##35444
125b0     50 00 90 FD | 	jmp	#LR__1496
125b4                 | LR__1494
125b4     45 00 00 FF 
125b8     74 E4 05 F1 | 	add	objptr, ##35444
125bc     F2 20 02 FB | 	rdlong	local02, objptr
125c0     45 00 00 FF 
125c4     74 E4 85 F1 | 	sub	objptr, ##35444
125c8     0E 20 16 F2 | 	cmp	local02, #14 wc
125cc     34 00 90 CD |  if_b	jmp	#LR__1495
125d0     45 00 00 FF 
125d4     74 E4 05 F1 | 	add	objptr, ##35444
125d8     F2 1E 02 FB | 	rdlong	local01, objptr
125dc     45 00 00 FF 
125e0     74 E4 85 F1 | 	sub	objptr, ##35444
125e4     17 1E 16 F2 | 	cmp	local01, #23 wc
125e8     51 00 00 CF 
125ec     E4 E5 05 C1 |  if_b	add	objptr, ##41956
125f0     F2 20 02 CB |  if_b	rdlong	local02, objptr
125f4     27 20 06 C1 |  if_b	add	local02, #39
125f8     F2 20 62 CC |  if_b	wrlong	local02, objptr
125fc     51 00 00 CF 
12600     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
12604                 | LR__1495
12604                 | LR__1496
12604                 | LR__1497
12604                 | LR__1498
12604                 | LR__1499
12604     45 00 00 FF 
12608     74 E4 05 F1 | 	add	objptr, ##35444
1260c     F2 12 02 FB | 	rdlong	arg01, objptr
12610     45 00 00 FF 
12614     74 E4 85 F1 | 	sub	objptr, ##35444
12618     D4 B0 B0 FD | 	call	#_scantochar
1261c     FD 12 02 F6 | 	mov	arg01, result1
12620     58 05 B1 FD | 	call	#__system__Chr_S
12624     A7 FA 61 FC | 	wrlong	result1, fp
12628     0C 00 90 FD | 	jmp	#LR__1501
1262c                 | LR__1500
1262c     84 01 00 FF 
12630     3B 21 06 F6 | 	mov	local02, ##@LR__5482
12634     A7 20 62 FC | 	wrlong	local02, fp
12638                 | LR__1501
12638     08 4E 05 F1 | 	add	fp, #8
1263c     A7 3E 68 FC | 	wrlong	#31, fp
12640     08 4E 85 F1 | 	sub	fp, #8
12644     A7 12 02 F6 | 	mov	arg01, fp
12648     70 8C BF FD | 	call	#_push
1264c     A7 F0 03 F6 | 	mov	ptra, fp
12650     B2 00 A0 FD | 	call	#popregs_
12654                 | _do_inkey_ret
12654     2D 00 64 FD | 	ret
12658                 | 
12658                 | '  
12658                 | ' '------------------------ Operators 
12658                 | ' 
12658                 | ' sub do_plus 
12658                 | _do_plus
12658     05 4A 05 F6 | 	mov	COUNT_, #5
1265c     A8 00 A0 FD | 	call	#pushregs_
12660     18 F0 07 F1 | 	add	ptra, #24
12664     BC 8B BF FD | 	call	#_pop
12668     FD 1E 02 F6 | 	mov	local01, result1
1266c     FE 20 02 F6 | 	mov	local02, result2
12670     FF 22 02 F6 | 	mov	local03, result3
12674     0C 4E 05 F1 | 	add	fp, #12
12678     A7 1E 62 FC | 	wrlong	local01, fp
1267c     04 4E 05 F1 | 	add	fp, #4
12680     A7 20 62 FC | 	wrlong	local02, fp
12684     04 4E 05 F1 | 	add	fp, #4
12688     A7 22 62 FC | 	wrlong	local03, fp
1268c     14 4E 85 F1 | 	sub	fp, #20
12690     90 8B BF FD | 	call	#_pop
12694     FF 22 02 F6 | 	mov	local03, result3
12698     A7 FA 61 FC | 	wrlong	result1, fp
1269c     04 4E 05 F1 | 	add	fp, #4
126a0     A7 FC 61 FC | 	wrlong	result2, fp
126a4     04 4E 05 F1 | 	add	fp, #4
126a8     A7 22 62 FC | 	wrlong	local03, fp
126ac                 | ' 
126ac                 | ' t2=pop()
126ac                 | ' t1=pop()
126ac                 | ' 
126ac                 | ' 
126ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
126ac     08 4E 85 F1 | 	sub	fp, #8
126b0     1D 22 0E F2 | 	cmp	local03, #29 wz
126b4     14 4E 05 A1 |  if_e	add	fp, #20
126b8     A7 24 02 AB |  if_e	rdlong	local04, fp
126bc     14 4E 85 A1 |  if_e	sub	fp, #20
126c0     12 23 02 A6 |  if_e	mov	local03, local04
126c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
126c8     1C 00 90 5D |  if_ne	jmp	#LR__1510
126cc     A7 1E 02 FB | 	rdlong	local01, fp
126d0     0C 4E 05 F1 | 	add	fp, #12
126d4     A7 20 02 FB | 	rdlong	local02, fp
126d8     0C 4E 85 F1 | 	sub	fp, #12
126dc     10 1F 02 F1 | 	add	local01, local02
126e0     A7 1E 62 FC | 	wrlong	local01, fp
126e4     48 04 90 FD | 	jmp	#LR__1525
126e8                 | LR__1510
126e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
126e8     08 4E 05 F1 | 	add	fp, #8
126ec     A7 1E 02 FB | 	rdlong	local01, fp
126f0     08 4E 85 F1 | 	sub	fp, #8
126f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
126f8     14 4E 05 A1 |  if_e	add	fp, #20
126fc     A7 24 02 AB |  if_e	rdlong	local04, fp
12700     14 4E 85 A1 |  if_e	sub	fp, #20
12704     12 23 02 A6 |  if_e	mov	local03, local04
12708     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1270c     28 00 90 5D |  if_ne	jmp	#LR__1511
12710     A7 1E 02 FB | 	rdlong	local01, fp
12714     0C 4E 05 F1 | 	add	fp, #12
12718     A7 20 02 FB | 	rdlong	local02, fp
1271c     0C 4E 85 F1 | 	sub	fp, #12
12720     10 1F 02 F1 | 	add	local01, local02
12724     A7 1E 62 FC | 	wrlong	local01, fp
12728     08 4E 05 F1 | 	add	fp, #8
1272c     A7 38 68 FC | 	wrlong	#28, fp
12730     08 4E 85 F1 | 	sub	fp, #8
12734     F8 03 90 FD | 	jmp	#LR__1525
12738                 | LR__1511
12738                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12738     08 4E 05 F1 | 	add	fp, #8
1273c     A7 1E 02 FB | 	rdlong	local01, fp
12740     08 4E 85 F1 | 	sub	fp, #8
12744     1D 1E 0E F2 | 	cmp	local01, #29 wz
12748     14 4E 05 A1 |  if_e	add	fp, #20
1274c     A7 24 02 AB |  if_e	rdlong	local04, fp
12750     14 4E 85 A1 |  if_e	sub	fp, #20
12754     12 23 02 A6 |  if_e	mov	local03, local04
12758     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1275c     30 00 90 5D |  if_ne	jmp	#LR__1512
12760     A7 12 02 FB | 	rdlong	arg01, fp
12764     84 09 B1 FD | 	call	#__system___float_fromuns
12768     FD 12 02 F6 | 	mov	arg01, result1
1276c     0C 4E 05 F1 | 	add	fp, #12
12770     A7 14 02 FB | 	rdlong	arg02, fp
12774     0C 4E 85 F1 | 	sub	fp, #12
12778     A4 09 B1 FD | 	call	#__system___float_add
1277c     A7 FA 61 FC | 	wrlong	result1, fp
12780     08 4E 05 F1 | 	add	fp, #8
12784     A7 3C 68 FC | 	wrlong	#30, fp
12788     08 4E 85 F1 | 	sub	fp, #8
1278c     A0 03 90 FD | 	jmp	#LR__1525
12790                 | LR__1512
12790                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
12790     08 4E 05 F1 | 	add	fp, #8
12794     A7 1E 02 FB | 	rdlong	local01, fp
12798     08 4E 85 F1 | 	sub	fp, #8
1279c     1C 1E 0E F2 | 	cmp	local01, #28 wz
127a0     14 4E 05 A1 |  if_e	add	fp, #20
127a4     A7 24 02 AB |  if_e	rdlong	local04, fp
127a8     14 4E 85 A1 |  if_e	sub	fp, #20
127ac     12 23 02 A6 |  if_e	mov	local03, local04
127b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
127b4     1C 00 90 5D |  if_ne	jmp	#LR__1513
127b8     A7 1E 02 FB | 	rdlong	local01, fp
127bc     0C 4E 05 F1 | 	add	fp, #12
127c0     A7 20 02 FB | 	rdlong	local02, fp
127c4     0C 4E 85 F1 | 	sub	fp, #12
127c8     10 1F 02 F1 | 	add	local01, local02
127cc     A7 1E 62 FC | 	wrlong	local01, fp
127d0     5C 03 90 FD | 	jmp	#LR__1525
127d4                 | LR__1513
127d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
127d4     08 4E 05 F1 | 	add	fp, #8
127d8     A7 1E 02 FB | 	rdlong	local01, fp
127dc     08 4E 85 F1 | 	sub	fp, #8
127e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
127e4     14 4E 05 A1 |  if_e	add	fp, #20
127e8     A7 24 02 AB |  if_e	rdlong	local04, fp
127ec     14 4E 85 A1 |  if_e	sub	fp, #20
127f0     12 23 02 A6 |  if_e	mov	local03, local04
127f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
127f8     1C 00 90 5D |  if_ne	jmp	#LR__1514
127fc     A7 1E 02 FB | 	rdlong	local01, fp
12800     0C 4E 05 F1 | 	add	fp, #12
12804     A7 20 02 FB | 	rdlong	local02, fp
12808     0C 4E 85 F1 | 	sub	fp, #12
1280c     10 1F 02 F1 | 	add	local01, local02
12810     A7 1E 62 FC | 	wrlong	local01, fp
12814     18 03 90 FD | 	jmp	#LR__1525
12818                 | LR__1514
12818                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12818     08 4E 05 F1 | 	add	fp, #8
1281c     A7 1E 02 FB | 	rdlong	local01, fp
12820     08 4E 85 F1 | 	sub	fp, #8
12824     1C 1E 0E F2 | 	cmp	local01, #28 wz
12828     14 4E 05 A1 |  if_e	add	fp, #20
1282c     A7 24 02 AB |  if_e	rdlong	local04, fp
12830     14 4E 85 A1 |  if_e	sub	fp, #20
12834     12 23 02 A6 |  if_e	mov	local03, local04
12838     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1283c     40 00 90 5D |  if_ne	jmp	#LR__1515
12840     A7 12 02 FB | 	rdlong	arg01, fp
12844     09 13 52 F6 | 	abs	arg01, arg01 wc
12848     1F 26 C6 C9 |  if_b	decod	local05, #31
1284c     00 26 06 36 |  if_ae	mov	local05, #0
12850     98 08 B1 FD | 	call	#__system___float_fromuns
12854     13 FB 61 F5 | 	xor	result1, local05
12858     FD 12 02 F6 | 	mov	arg01, result1
1285c     0C 4E 05 F1 | 	add	fp, #12
12860     A7 14 02 FB | 	rdlong	arg02, fp
12864     0C 4E 85 F1 | 	sub	fp, #12
12868     B4 08 B1 FD | 	call	#__system___float_add
1286c     A7 FA 61 FC | 	wrlong	result1, fp
12870     08 4E 05 F1 | 	add	fp, #8
12874     A7 3C 68 FC | 	wrlong	#30, fp
12878     08 4E 85 F1 | 	sub	fp, #8
1287c     B0 02 90 FD | 	jmp	#LR__1525
12880                 | LR__1515
12880                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
12880     08 4E 05 F1 | 	add	fp, #8
12884     A7 1E 02 FB | 	rdlong	local01, fp
12888     08 4E 85 F1 | 	sub	fp, #8
1288c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12890     14 4E 05 A1 |  if_e	add	fp, #20
12894     A7 24 02 AB |  if_e	rdlong	local04, fp
12898     14 4E 85 A1 |  if_e	sub	fp, #20
1289c     12 23 02 A6 |  if_e	mov	local03, local04
128a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
128a4     28 00 90 5D |  if_ne	jmp	#LR__1516
128a8     A7 1E 02 FB | 	rdlong	local01, fp
128ac     0C 4E 05 F1 | 	add	fp, #12
128b0     A7 12 02 FB | 	rdlong	arg01, fp
128b4     0C 4E 85 F1 | 	sub	fp, #12
128b8     30 08 B1 FD | 	call	#__system___float_fromuns
128bc     FD 14 02 F6 | 	mov	arg02, result1
128c0     0F 13 02 F6 | 	mov	arg01, local01
128c4     58 08 B1 FD | 	call	#__system___float_add
128c8     A7 FA 61 FC | 	wrlong	result1, fp
128cc     60 02 90 FD | 	jmp	#LR__1525
128d0                 | LR__1516
128d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
128d0     08 4E 05 F1 | 	add	fp, #8
128d4     A7 1E 02 FB | 	rdlong	local01, fp
128d8     08 4E 85 F1 | 	sub	fp, #8
128dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
128e0     14 4E 05 A1 |  if_e	add	fp, #20
128e4     A7 24 02 AB |  if_e	rdlong	local04, fp
128e8     14 4E 85 A1 |  if_e	sub	fp, #20
128ec     12 23 02 A6 |  if_e	mov	local03, local04
128f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128f4     38 00 90 5D |  if_ne	jmp	#LR__1517
128f8     A7 1E 02 FB | 	rdlong	local01, fp
128fc     0C 4E 05 F1 | 	add	fp, #12
12900     A7 12 02 FB | 	rdlong	arg01, fp
12904     0C 4E 85 F1 | 	sub	fp, #12
12908     09 13 52 F6 | 	abs	arg01, arg01 wc
1290c     1F 26 C6 C9 |  if_b	decod	local05, #31
12910     00 26 06 36 |  if_ae	mov	local05, #0
12914     D4 07 B1 FD | 	call	#__system___float_fromuns
12918     13 FB 61 F5 | 	xor	result1, local05
1291c     FD 14 02 F6 | 	mov	arg02, result1
12920     0F 13 02 F6 | 	mov	arg01, local01
12924     F8 07 B1 FD | 	call	#__system___float_add
12928     A7 FA 61 FC | 	wrlong	result1, fp
1292c     00 02 90 FD | 	jmp	#LR__1525
12930                 | LR__1517
12930                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
12930     08 4E 05 F1 | 	add	fp, #8
12934     A7 1E 02 FB | 	rdlong	local01, fp
12938     08 4E 85 F1 | 	sub	fp, #8
1293c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12940     14 4E 05 A1 |  if_e	add	fp, #20
12944     A7 24 02 AB |  if_e	rdlong	local04, fp
12948     14 4E 85 A1 |  if_e	sub	fp, #20
1294c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
12950     1C 00 90 5D |  if_ne	jmp	#LR__1518
12954     A7 12 02 FB | 	rdlong	arg01, fp
12958     0C 4E 05 F1 | 	add	fp, #12
1295c     A7 14 02 FB | 	rdlong	arg02, fp
12960     0C 4E 85 F1 | 	sub	fp, #12
12964     B8 07 B1 FD | 	call	#__system___float_add
12968     A7 FA 61 FC | 	wrlong	result1, fp
1296c     C0 01 90 FD | 	jmp	#LR__1525
12970                 | LR__1518
12970                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12970     08 4E 05 F1 | 	add	fp, #8
12974     A7 1E 02 FB | 	rdlong	local01, fp
12978     08 4E 85 F1 | 	sub	fp, #8
1297c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12980     24 00 90 5D |  if_ne	jmp	#LR__1519
12984     14 4E 05 F1 | 	add	fp, #20
12988     A7 22 02 FB | 	rdlong	local03, fp
1298c     14 4E 85 F1 | 	sub	fp, #20
12990     1F 22 0E F2 | 	cmp	local03, #31 wz
12994     A7 04 68 5C |  if_ne	wrlong	#2, fp
12998     08 4E 05 51 |  if_ne	add	fp, #8
1299c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
129a0     08 4E 85 51 |  if_ne	sub	fp, #8
129a4     88 01 90 5D |  if_ne	jmp	#LR__1525
129a8                 | LR__1519
129a8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
129a8     14 4E 05 F1 | 	add	fp, #20
129ac     A7 1E 02 FB | 	rdlong	local01, fp
129b0     14 4E 85 F1 | 	sub	fp, #20
129b4     1F 1E 0E F2 | 	cmp	local01, #31 wz
129b8     24 00 90 5D |  if_ne	jmp	#LR__1520
129bc     08 4E 05 F1 | 	add	fp, #8
129c0     A7 22 02 FB | 	rdlong	local03, fp
129c4     08 4E 85 F1 | 	sub	fp, #8
129c8     1F 22 0E F2 | 	cmp	local03, #31 wz
129cc     A7 04 68 5C |  if_ne	wrlong	#2, fp
129d0     08 4E 05 51 |  if_ne	add	fp, #8
129d4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
129d8     08 4E 85 51 |  if_ne	sub	fp, #8
129dc     50 01 90 5D |  if_ne	jmp	#LR__1525
129e0                 | LR__1520
129e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
129e0     08 4E 05 F1 | 	add	fp, #8
129e4     A7 1E 02 FB | 	rdlong	local01, fp
129e8     08 4E 85 F1 | 	sub	fp, #8
129ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
129f0     14 4E 05 A1 |  if_e	add	fp, #20
129f4     A7 22 02 AB |  if_e	rdlong	local03, fp
129f8     14 4E 85 A1 |  if_e	sub	fp, #20
129fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a00     1C 00 90 5D |  if_ne	jmp	#LR__1521
12a04     A7 12 02 FB | 	rdlong	arg01, fp
12a08     0C 4E 05 F1 | 	add	fp, #12
12a0c     A7 14 02 FB | 	rdlong	arg02, fp
12a10     0C 4E 85 F1 | 	sub	fp, #12
12a14     80 DF B0 FD | 	call	#__system___string_concat
12a18     A7 FA 61 FC | 	wrlong	result1, fp
12a1c     10 01 90 FD | 	jmp	#LR__1525
12a20                 | LR__1521
12a20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
12a20     08 4E 05 F1 | 	add	fp, #8
12a24     A7 1E 02 FB | 	rdlong	local01, fp
12a28     08 4E 85 F1 | 	sub	fp, #8
12a2c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a30     14 4E 05 A1 |  if_e	add	fp, #20
12a34     A7 22 02 AB |  if_e	rdlong	local03, fp
12a38     14 4E 85 A1 |  if_e	sub	fp, #20
12a3c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a40     30 00 90 5D |  if_ne	jmp	#LR__1522
12a44     A7 12 02 FB | 	rdlong	arg01, fp
12a48     50 89 BF FD | 	call	#_convertstring
12a4c     FD 12 02 F6 | 	mov	arg01, result1
12a50     0C 4E 05 F1 | 	add	fp, #12
12a54     A7 14 02 FB | 	rdlong	arg02, fp
12a58     0C 4E 85 F1 | 	sub	fp, #12
12a5c     38 DF B0 FD | 	call	#__system___string_concat
12a60     A7 FA 61 FC | 	wrlong	result1, fp
12a64     08 4E 05 F1 | 	add	fp, #8
12a68     A7 3E 68 FC | 	wrlong	#31, fp
12a6c     08 4E 85 F1 | 	sub	fp, #8
12a70     BC 00 90 FD | 	jmp	#LR__1525
12a74                 | LR__1522
12a74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
12a74     08 4E 05 F1 | 	add	fp, #8
12a78     A7 1E 02 FB | 	rdlong	local01, fp
12a7c     08 4E 85 F1 | 	sub	fp, #8
12a80     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a84     14 4E 05 A1 |  if_e	add	fp, #20
12a88     A7 22 02 AB |  if_e	rdlong	local03, fp
12a8c     14 4E 85 A1 |  if_e	sub	fp, #20
12a90     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12a94     28 00 90 5D |  if_ne	jmp	#LR__1523
12a98     A7 1E 02 FB | 	rdlong	local01, fp
12a9c     0C 4E 05 F1 | 	add	fp, #12
12aa0     A7 12 02 FB | 	rdlong	arg01, fp
12aa4     0C 4E 85 F1 | 	sub	fp, #12
12aa8     F0 88 BF FD | 	call	#_convertstring
12aac     FD 14 02 F6 | 	mov	arg02, result1
12ab0     0F 13 02 F6 | 	mov	arg01, local01
12ab4     E0 DE B0 FD | 	call	#__system___string_concat
12ab8     A7 FA 61 FC | 	wrlong	result1, fp
12abc     70 00 90 FD | 	jmp	#LR__1525
12ac0                 | LR__1523
12ac0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
12ac0     08 4E 05 F1 | 	add	fp, #8
12ac4     A7 1E 02 FB | 	rdlong	local01, fp
12ac8     08 4E 85 F1 | 	sub	fp, #8
12acc     2B 1E 0E F2 | 	cmp	local01, #43 wz
12ad0     14 4E 05 A1 |  if_e	add	fp, #20
12ad4     A7 22 02 AB |  if_e	rdlong	local03, fp
12ad8     14 4E 85 A1 |  if_e	sub	fp, #20
12adc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12ae0     3C 00 90 5D |  if_ne	jmp	#LR__1524
12ae4     A7 12 02 FB | 	rdlong	arg01, fp
12ae8     B0 88 BF FD | 	call	#_convertstring
12aec     FD 1E 02 F6 | 	mov	local01, result1
12af0     0C 4E 05 F1 | 	add	fp, #12
12af4     A7 12 02 FB | 	rdlong	arg01, fp
12af8     0C 4E 85 F1 | 	sub	fp, #12
12afc     9C 88 BF FD | 	call	#_convertstring
12b00     FD 14 02 F6 | 	mov	arg02, result1
12b04     0F 13 02 F6 | 	mov	arg01, local01
12b08     8C DE B0 FD | 	call	#__system___string_concat
12b0c     A7 FA 61 FC | 	wrlong	result1, fp
12b10     08 4E 05 F1 | 	add	fp, #8
12b14     A7 3E 68 FC | 	wrlong	#31, fp
12b18     08 4E 85 F1 | 	sub	fp, #8
12b1c     10 00 90 FD | 	jmp	#LR__1525
12b20                 | LR__1524
12b20     A7 08 68 FC | 	wrlong	#4, fp
12b24     08 4E 05 F1 | 	add	fp, #8
12b28     A7 FE 69 FC | 	wrlong	#255, fp
12b2c     08 4E 85 F1 | 	sub	fp, #8
12b30                 | LR__1525
12b30     A7 12 02 F6 | 	mov	arg01, fp
12b34     84 87 BF FD | 	call	#_push
12b38     A7 F0 03 F6 | 	mov	ptra, fp
12b3c     B2 00 A0 FD | 	call	#popregs_
12b40                 | _do_plus_ret
12b40     2D 00 64 FD | 	ret
12b44                 | 
12b44                 | ' 
12b44                 | ' sub do_minus
12b44                 | _do_minus
12b44     05 4A 05 F6 | 	mov	COUNT_, #5
12b48     A8 00 A0 FD | 	call	#pushregs_
12b4c     18 F0 07 F1 | 	add	ptra, #24
12b50     D0 86 BF FD | 	call	#_pop
12b54     FD 1E 02 F6 | 	mov	local01, result1
12b58     FE 20 02 F6 | 	mov	local02, result2
12b5c     FF 22 02 F6 | 	mov	local03, result3
12b60     0C 4E 05 F1 | 	add	fp, #12
12b64     A7 1E 62 FC | 	wrlong	local01, fp
12b68     04 4E 05 F1 | 	add	fp, #4
12b6c     A7 20 62 FC | 	wrlong	local02, fp
12b70     04 4E 05 F1 | 	add	fp, #4
12b74     A7 22 62 FC | 	wrlong	local03, fp
12b78     14 4E 85 F1 | 	sub	fp, #20
12b7c     A4 86 BF FD | 	call	#_pop
12b80     FF 22 02 F6 | 	mov	local03, result3
12b84     A7 FA 61 FC | 	wrlong	result1, fp
12b88     04 4E 05 F1 | 	add	fp, #4
12b8c     A7 FC 61 FC | 	wrlong	result2, fp
12b90     04 4E 05 F1 | 	add	fp, #4
12b94     A7 22 62 FC | 	wrlong	local03, fp
12b98                 | ' 
12b98                 | ' t2=pop()
12b98                 | ' t1=pop()
12b98                 | ' 
12b98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
12b98     08 4E 85 F1 | 	sub	fp, #8
12b9c     1D 22 0E F2 | 	cmp	local03, #29 wz
12ba0     14 4E 05 A1 |  if_e	add	fp, #20
12ba4     A7 24 02 AB |  if_e	rdlong	local04, fp
12ba8     14 4E 85 A1 |  if_e	sub	fp, #20
12bac     12 23 02 A6 |  if_e	mov	local03, local04
12bb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12bb4     5C 00 90 5D |  if_ne	jmp	#LR__1531
12bb8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
12bb8     0C 4E 05 F1 | 	add	fp, #12
12bbc     A7 1E 02 FB | 	rdlong	local01, fp
12bc0     0C 4E 85 F1 | 	sub	fp, #12
12bc4     A7 22 02 FB | 	rdlong	local03, fp
12bc8     11 1F 12 F2 | 	cmp	local01, local03 wc
12bcc     1C 00 90 3D |  if_ae	jmp	#LR__1530
12bd0     A7 1E 02 FB | 	rdlong	local01, fp
12bd4     0C 4E 05 F1 | 	add	fp, #12
12bd8     A7 20 02 FB | 	rdlong	local02, fp
12bdc     0C 4E 85 F1 | 	sub	fp, #12
12be0     10 1F 82 F1 | 	sub	local01, local02
12be4     A7 1E 62 FC | 	wrlong	local01, fp
12be8     F4 02 90 FD | 	jmp	#LR__1540
12bec                 | LR__1530
12bec     A7 1E 02 FB | 	rdlong	local01, fp
12bf0     0C 4E 05 F1 | 	add	fp, #12
12bf4     A7 20 02 FB | 	rdlong	local02, fp
12bf8     0C 4E 85 F1 | 	sub	fp, #12
12bfc     10 1F 82 F1 | 	sub	local01, local02
12c00     A7 1E 62 FC | 	wrlong	local01, fp
12c04     08 4E 05 F1 | 	add	fp, #8
12c08     A7 38 68 FC | 	wrlong	#28, fp
12c0c     08 4E 85 F1 | 	sub	fp, #8
12c10     CC 02 90 FD | 	jmp	#LR__1540
12c14                 | LR__1531
12c14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12c14     08 4E 05 F1 | 	add	fp, #8
12c18     A7 1E 02 FB | 	rdlong	local01, fp
12c1c     08 4E 85 F1 | 	sub	fp, #8
12c20     1D 1E 0E F2 | 	cmp	local01, #29 wz
12c24     14 4E 05 A1 |  if_e	add	fp, #20
12c28     A7 24 02 AB |  if_e	rdlong	local04, fp
12c2c     14 4E 85 A1 |  if_e	sub	fp, #20
12c30     12 23 02 A6 |  if_e	mov	local03, local04
12c34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c38     28 00 90 5D |  if_ne	jmp	#LR__1532
12c3c     A7 1E 02 FB | 	rdlong	local01, fp
12c40     0C 4E 05 F1 | 	add	fp, #12
12c44     A7 20 02 FB | 	rdlong	local02, fp
12c48     0C 4E 85 F1 | 	sub	fp, #12
12c4c     10 1F 82 F1 | 	sub	local01, local02
12c50     A7 1E 62 FC | 	wrlong	local01, fp
12c54     08 4E 05 F1 | 	add	fp, #8
12c58     A7 38 68 FC | 	wrlong	#28, fp
12c5c     08 4E 85 F1 | 	sub	fp, #8
12c60     7C 02 90 FD | 	jmp	#LR__1540
12c64                 | LR__1532
12c64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12c64     08 4E 05 F1 | 	add	fp, #8
12c68     A7 1E 02 FB | 	rdlong	local01, fp
12c6c     08 4E 85 F1 | 	sub	fp, #8
12c70     1D 1E 0E F2 | 	cmp	local01, #29 wz
12c74     14 4E 05 A1 |  if_e	add	fp, #20
12c78     A7 24 02 AB |  if_e	rdlong	local04, fp
12c7c     14 4E 85 A1 |  if_e	sub	fp, #20
12c80     12 23 02 A6 |  if_e	mov	local03, local04
12c84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c88     34 00 90 5D |  if_ne	jmp	#LR__1533
12c8c     A7 12 02 FB | 	rdlong	arg01, fp
12c90     58 04 B1 FD | 	call	#__system___float_fromuns
12c94     FD 12 02 F6 | 	mov	arg01, result1
12c98     0C 4E 05 F1 | 	add	fp, #12
12c9c     A7 14 02 FB | 	rdlong	arg02, fp
12ca0     0C 4E 85 F1 | 	sub	fp, #12
12ca4     1F 14 E6 F4 | 	bitnot	arg02, #31
12ca8     74 04 B1 FD | 	call	#__system___float_add
12cac     A7 FA 61 FC | 	wrlong	result1, fp
12cb0     08 4E 05 F1 | 	add	fp, #8
12cb4     A7 3C 68 FC | 	wrlong	#30, fp
12cb8     08 4E 85 F1 | 	sub	fp, #8
12cbc     20 02 90 FD | 	jmp	#LR__1540
12cc0                 | LR__1533
12cc0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
12cc0     08 4E 05 F1 | 	add	fp, #8
12cc4     A7 1E 02 FB | 	rdlong	local01, fp
12cc8     08 4E 85 F1 | 	sub	fp, #8
12ccc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cd0     14 4E 05 A1 |  if_e	add	fp, #20
12cd4     A7 24 02 AB |  if_e	rdlong	local04, fp
12cd8     14 4E 85 A1 |  if_e	sub	fp, #20
12cdc     12 23 02 A6 |  if_e	mov	local03, local04
12ce0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ce4     1C 00 90 5D |  if_ne	jmp	#LR__1534
12ce8     A7 1E 02 FB | 	rdlong	local01, fp
12cec     0C 4E 05 F1 | 	add	fp, #12
12cf0     A7 20 02 FB | 	rdlong	local02, fp
12cf4     0C 4E 85 F1 | 	sub	fp, #12
12cf8     10 1F 82 F1 | 	sub	local01, local02
12cfc     A7 1E 62 FC | 	wrlong	local01, fp
12d00     DC 01 90 FD | 	jmp	#LR__1540
12d04                 | LR__1534
12d04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12d04     08 4E 05 F1 | 	add	fp, #8
12d08     A7 1E 02 FB | 	rdlong	local01, fp
12d0c     08 4E 85 F1 | 	sub	fp, #8
12d10     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d14     14 4E 05 A1 |  if_e	add	fp, #20
12d18     A7 24 02 AB |  if_e	rdlong	local04, fp
12d1c     14 4E 85 A1 |  if_e	sub	fp, #20
12d20     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12d24     1C 00 90 5D |  if_ne	jmp	#LR__1535
12d28     A7 1E 02 FB | 	rdlong	local01, fp
12d2c     0C 4E 05 F1 | 	add	fp, #12
12d30     A7 20 02 FB | 	rdlong	local02, fp
12d34     0C 4E 85 F1 | 	sub	fp, #12
12d38     10 1F 82 F1 | 	sub	local01, local02
12d3c     A7 1E 62 FC | 	wrlong	local01, fp
12d40     9C 01 90 FD | 	jmp	#LR__1540
12d44                 | LR__1535
12d44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12d44     08 4E 05 F1 | 	add	fp, #8
12d48     A7 1E 02 FB | 	rdlong	local01, fp
12d4c     08 4E 85 F1 | 	sub	fp, #8
12d50     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d54     14 4E 05 A1 |  if_e	add	fp, #20
12d58     A7 22 02 AB |  if_e	rdlong	local03, fp
12d5c     14 4E 85 A1 |  if_e	sub	fp, #20
12d60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d64     44 00 90 5D |  if_ne	jmp	#LR__1536
12d68     A7 12 02 FB | 	rdlong	arg01, fp
12d6c     09 13 52 F6 | 	abs	arg01, arg01 wc
12d70     1F 26 C6 C9 |  if_b	decod	local05, #31
12d74     00 26 06 36 |  if_ae	mov	local05, #0
12d78     70 03 B1 FD | 	call	#__system___float_fromuns
12d7c     13 FB 61 F5 | 	xor	result1, local05
12d80     FD 12 02 F6 | 	mov	arg01, result1
12d84     0C 4E 05 F1 | 	add	fp, #12
12d88     A7 14 02 FB | 	rdlong	arg02, fp
12d8c     0C 4E 85 F1 | 	sub	fp, #12
12d90     1F 14 E6 F4 | 	bitnot	arg02, #31
12d94     88 03 B1 FD | 	call	#__system___float_add
12d98     A7 FA 61 FC | 	wrlong	result1, fp
12d9c     08 4E 05 F1 | 	add	fp, #8
12da0     A7 3C 68 FC | 	wrlong	#30, fp
12da4     08 4E 85 F1 | 	sub	fp, #8
12da8     34 01 90 FD | 	jmp	#LR__1540
12dac                 | LR__1536
12dac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
12dac     08 4E 05 F1 | 	add	fp, #8
12db0     A7 1E 02 FB | 	rdlong	local01, fp
12db4     08 4E 85 F1 | 	sub	fp, #8
12db8     1E 1E 0E F2 | 	cmp	local01, #30 wz
12dbc     14 4E 05 A1 |  if_e	add	fp, #20
12dc0     A7 22 02 AB |  if_e	rdlong	local03, fp
12dc4     14 4E 85 A1 |  if_e	sub	fp, #20
12dc8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12dcc     2C 00 90 5D |  if_ne	jmp	#LR__1537
12dd0     A7 1E 02 FB | 	rdlong	local01, fp
12dd4     0C 4E 05 F1 | 	add	fp, #12
12dd8     A7 12 02 FB | 	rdlong	arg01, fp
12ddc     0C 4E 85 F1 | 	sub	fp, #12
12de0     08 03 B1 FD | 	call	#__system___float_fromuns
12de4     FD 14 02 F6 | 	mov	arg02, result1
12de8     0F 13 02 F6 | 	mov	arg01, local01
12dec     1F 14 E6 F4 | 	bitnot	arg02, #31
12df0     2C 03 B1 FD | 	call	#__system___float_add
12df4     A7 FA 61 FC | 	wrlong	result1, fp
12df8     E4 00 90 FD | 	jmp	#LR__1540
12dfc                 | LR__1537
12dfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12dfc     08 4E 05 F1 | 	add	fp, #8
12e00     A7 1E 02 FB | 	rdlong	local01, fp
12e04     08 4E 85 F1 | 	sub	fp, #8
12e08     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e0c     14 4E 05 A1 |  if_e	add	fp, #20
12e10     A7 22 02 AB |  if_e	rdlong	local03, fp
12e14     14 4E 85 A1 |  if_e	sub	fp, #20
12e18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e1c     3C 00 90 5D |  if_ne	jmp	#LR__1538
12e20     A7 1E 02 FB | 	rdlong	local01, fp
12e24     0C 4E 05 F1 | 	add	fp, #12
12e28     A7 12 02 FB | 	rdlong	arg01, fp
12e2c     0C 4E 85 F1 | 	sub	fp, #12
12e30     09 13 52 F6 | 	abs	arg01, arg01 wc
12e34     1F 26 C6 C9 |  if_b	decod	local05, #31
12e38     00 26 06 36 |  if_ae	mov	local05, #0
12e3c     AC 02 B1 FD | 	call	#__system___float_fromuns
12e40     13 FB 61 F5 | 	xor	result1, local05
12e44     FD 14 02 F6 | 	mov	arg02, result1
12e48     0F 13 02 F6 | 	mov	arg01, local01
12e4c     1F 14 E6 F4 | 	bitnot	arg02, #31
12e50     CC 02 B1 FD | 	call	#__system___float_add
12e54     A7 FA 61 FC | 	wrlong	result1, fp
12e58     84 00 90 FD | 	jmp	#LR__1540
12e5c                 | LR__1538
12e5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12e5c     08 4E 05 F1 | 	add	fp, #8
12e60     A7 1E 02 FB | 	rdlong	local01, fp
12e64     08 4E 85 F1 | 	sub	fp, #8
12e68     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e6c     14 4E 05 A1 |  if_e	add	fp, #20
12e70     A7 22 02 AB |  if_e	rdlong	local03, fp
12e74     14 4E 85 A1 |  if_e	sub	fp, #20
12e78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e7c     20 00 90 5D |  if_ne	jmp	#LR__1539
12e80     A7 12 02 FB | 	rdlong	arg01, fp
12e84     0C 4E 05 F1 | 	add	fp, #12
12e88     A7 14 02 FB | 	rdlong	arg02, fp
12e8c     0C 4E 85 F1 | 	sub	fp, #12
12e90     1F 14 E6 F4 | 	bitnot	arg02, #31
12e94     88 02 B1 FD | 	call	#__system___float_add
12e98     A7 FA 61 FC | 	wrlong	result1, fp
12e9c     40 00 90 FD | 	jmp	#LR__1540
12ea0                 | LR__1539
12ea0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
12ea0     08 4E 05 F1 | 	add	fp, #8
12ea4     A7 1E 02 FB | 	rdlong	local01, fp
12ea8     08 4E 85 F1 | 	sub	fp, #8
12eac     1F 1E 0E F2 | 	cmp	local01, #31 wz
12eb0     14 4E 05 51 |  if_ne	add	fp, #20
12eb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
12eb8     14 4E 85 51 |  if_ne	sub	fp, #20
12ebc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12ec0     A7 06 68 AC |  if_e	wrlong	#3, fp
12ec4     08 4E 05 A1 |  if_e	add	fp, #8
12ec8     A7 FE 69 AC |  if_e	wrlong	#255, fp
12ecc     08 4E 85 A1 |  if_e	sub	fp, #8
12ed0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
12ed4     08 4E 05 51 |  if_ne	add	fp, #8
12ed8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12edc     08 4E 85 51 |  if_ne	sub	fp, #8
12ee0                 | LR__1540
12ee0     A7 12 02 F6 | 	mov	arg01, fp
12ee4     D4 83 BF FD | 	call	#_push
12ee8     A7 F0 03 F6 | 	mov	ptra, fp
12eec     B2 00 A0 FD | 	call	#popregs_
12ef0                 | _do_minus_ret
12ef0     2D 00 64 FD | 	ret
12ef4                 | 
12ef4                 | ' 
12ef4                 | ' sub do_and 
12ef4                 | _do_and
12ef4     03 4A 05 F6 | 	mov	COUNT_, #3
12ef8     A8 00 A0 FD | 	call	#pushregs_
12efc     18 F0 07 F1 | 	add	ptra, #24
12f00     20 83 BF FD | 	call	#_pop
12f04     FD 12 02 F6 | 	mov	arg01, result1
12f08     FE 1E 02 F6 | 	mov	local01, result2
12f0c     FF 20 02 F6 | 	mov	local02, result3
12f10     0C 4E 05 F1 | 	add	fp, #12
12f14     A7 12 62 FC | 	wrlong	arg01, fp
12f18     04 4E 05 F1 | 	add	fp, #4
12f1c     A7 1E 62 FC | 	wrlong	local01, fp
12f20     04 4E 05 F1 | 	add	fp, #4
12f24     A7 20 62 FC | 	wrlong	local02, fp
12f28     14 4E 85 F1 | 	sub	fp, #20
12f2c     F4 82 BF FD | 	call	#_pop
12f30     FF 22 02 F6 | 	mov	local03, result3
12f34     A7 FA 61 FC | 	wrlong	result1, fp
12f38     04 4E 05 F1 | 	add	fp, #4
12f3c     A7 FC 61 FC | 	wrlong	result2, fp
12f40     04 4E 05 F1 | 	add	fp, #4
12f44     A7 22 62 FC | 	wrlong	local03, fp
12f48                 | ' 
12f48                 | ' t2=pop()
12f48                 | ' t1=pop()
12f48                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12f48     08 4E 85 F1 | 	sub	fp, #8
12f4c     1C 22 0E F2 | 	cmp	local03, #28 wz
12f50     A7 22 02 AB |  if_e	rdlong	local03, fp
12f54     A7 22 62 AC |  if_e	wrlong	local03, fp
12f58     08 4E 05 A1 |  if_e	add	fp, #8
12f5c     A7 3A 68 AC |  if_e	wrlong	#29, fp
12f60     08 4E 85 A1 |  if_e	sub	fp, #8
12f64                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12f64     14 4E 05 F1 | 	add	fp, #20
12f68     A7 22 02 FB | 	rdlong	local03, fp
12f6c     14 4E 85 F1 | 	sub	fp, #20
12f70     1C 22 0E F2 | 	cmp	local03, #28 wz
12f74     18 00 90 5D |  if_ne	jmp	#LR__1550
12f78     0C 4E 05 F1 | 	add	fp, #12
12f7c     A7 22 02 FB | 	rdlong	local03, fp
12f80     A7 22 62 FC | 	wrlong	local03, fp
12f84     08 4E 05 F1 | 	add	fp, #8
12f88     A7 3A 68 FC | 	wrlong	#29, fp
12f8c     14 4E 85 F1 | 	sub	fp, #20
12f90                 | LR__1550
12f90                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
12f90     08 4E 05 F1 | 	add	fp, #8
12f94     A7 22 02 FB | 	rdlong	local03, fp
12f98     08 4E 85 F1 | 	sub	fp, #8
12f9c     1F 22 0E F2 | 	cmp	local03, #31 wz
12fa0     14 4E 05 51 |  if_ne	add	fp, #20
12fa4     A7 20 02 5B |  if_ne	rdlong	local02, fp
12fa8     14 4E 85 51 |  if_ne	sub	fp, #20
12fac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
12fb0     08 4E 05 51 |  if_ne	add	fp, #8
12fb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
12fb8     08 4E 85 51 |  if_ne	sub	fp, #8
12fbc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
12fc0     14 4E 05 51 |  if_ne	add	fp, #20
12fc4     14 4E 85 51 |  if_ne	sub	fp, #20
12fc8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
12fcc     A7 0C 68 AC |  if_e	wrlong	#6, fp
12fd0     08 4E 05 A1 |  if_e	add	fp, #8
12fd4     A7 FE 69 AC |  if_e	wrlong	#255, fp
12fd8     08 4E 85 A1 |  if_e	sub	fp, #8
12fdc     18 00 90 AD |  if_e	jmp	#LR__1551
12fe0     A7 22 02 FB | 	rdlong	local03, fp
12fe4     0C 4E 05 F1 | 	add	fp, #12
12fe8     A7 1E 02 FB | 	rdlong	local01, fp
12fec     0C 4E 85 F1 | 	sub	fp, #12
12ff0     0F 23 02 F5 | 	and	local03, local01
12ff4     A7 22 62 FC | 	wrlong	local03, fp
12ff8                 | LR__1551
12ff8     A7 12 02 F6 | 	mov	arg01, fp
12ffc     BC 82 BF FD | 	call	#_push
13000     A7 F0 03 F6 | 	mov	ptra, fp
13004     B2 00 A0 FD | 	call	#popregs_
13008                 | _do_and_ret
13008     2D 00 64 FD | 	ret
1300c                 | 
1300c                 | ' 
1300c                 | ' sub do_or 
1300c                 | _do_or
1300c     03 4A 05 F6 | 	mov	COUNT_, #3
13010     A8 00 A0 FD | 	call	#pushregs_
13014     18 F0 07 F1 | 	add	ptra, #24
13018     08 82 BF FD | 	call	#_pop
1301c     FD 12 02 F6 | 	mov	arg01, result1
13020     FE 1E 02 F6 | 	mov	local01, result2
13024     FF 20 02 F6 | 	mov	local02, result3
13028     0C 4E 05 F1 | 	add	fp, #12
1302c     A7 12 62 FC | 	wrlong	arg01, fp
13030     04 4E 05 F1 | 	add	fp, #4
13034     A7 1E 62 FC | 	wrlong	local01, fp
13038     04 4E 05 F1 | 	add	fp, #4
1303c     A7 20 62 FC | 	wrlong	local02, fp
13040     14 4E 85 F1 | 	sub	fp, #20
13044     DC 81 BF FD | 	call	#_pop
13048     FF 22 02 F6 | 	mov	local03, result3
1304c     A7 FA 61 FC | 	wrlong	result1, fp
13050     04 4E 05 F1 | 	add	fp, #4
13054     A7 FC 61 FC | 	wrlong	result2, fp
13058     04 4E 05 F1 | 	add	fp, #4
1305c     A7 22 62 FC | 	wrlong	local03, fp
13060                 | ' 
13060                 | ' t2=pop()
13060                 | ' t1=pop()
13060                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13060     08 4E 85 F1 | 	sub	fp, #8
13064     1C 22 0E F2 | 	cmp	local03, #28 wz
13068     A7 22 02 AB |  if_e	rdlong	local03, fp
1306c     A7 22 62 AC |  if_e	wrlong	local03, fp
13070     08 4E 05 A1 |  if_e	add	fp, #8
13074     A7 3A 68 AC |  if_e	wrlong	#29, fp
13078     08 4E 85 A1 |  if_e	sub	fp, #8
1307c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1307c     14 4E 05 F1 | 	add	fp, #20
13080     A7 22 02 FB | 	rdlong	local03, fp
13084     14 4E 85 F1 | 	sub	fp, #20
13088     1C 22 0E F2 | 	cmp	local03, #28 wz
1308c     18 00 90 5D |  if_ne	jmp	#LR__1560
13090     0C 4E 05 F1 | 	add	fp, #12
13094     A7 22 02 FB | 	rdlong	local03, fp
13098     A7 22 62 FC | 	wrlong	local03, fp
1309c     08 4E 05 F1 | 	add	fp, #8
130a0     A7 3A 68 FC | 	wrlong	#29, fp
130a4     14 4E 85 F1 | 	sub	fp, #20
130a8                 | LR__1560
130a8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
130a8     08 4E 05 F1 | 	add	fp, #8
130ac     A7 22 02 FB | 	rdlong	local03, fp
130b0     08 4E 85 F1 | 	sub	fp, #8
130b4     1F 22 0E F2 | 	cmp	local03, #31 wz
130b8     14 4E 05 51 |  if_ne	add	fp, #20
130bc     A7 20 02 5B |  if_ne	rdlong	local02, fp
130c0     14 4E 85 51 |  if_ne	sub	fp, #20
130c4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
130c8     08 4E 05 51 |  if_ne	add	fp, #8
130cc     A7 22 02 5B |  if_ne	rdlong	local03, fp
130d0     08 4E 85 51 |  if_ne	sub	fp, #8
130d4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
130d8     14 4E 05 51 |  if_ne	add	fp, #20
130dc     14 4E 85 51 |  if_ne	sub	fp, #20
130e0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
130e4     A7 0C 68 AC |  if_e	wrlong	#6, fp
130e8     08 4E 05 A1 |  if_e	add	fp, #8
130ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
130f0     08 4E 85 A1 |  if_e	sub	fp, #8
130f4     18 00 90 AD |  if_e	jmp	#LR__1561
130f8     A7 22 02 FB | 	rdlong	local03, fp
130fc     0C 4E 05 F1 | 	add	fp, #12
13100     A7 1E 02 FB | 	rdlong	local01, fp
13104     0C 4E 85 F1 | 	sub	fp, #12
13108     0F 23 42 F5 | 	or	local03, local01
1310c     A7 22 62 FC | 	wrlong	local03, fp
13110                 | LR__1561
13110     A7 12 02 F6 | 	mov	arg01, fp
13114     A4 81 BF FD | 	call	#_push
13118     A7 F0 03 F6 | 	mov	ptra, fp
1311c     B2 00 A0 FD | 	call	#popregs_
13120                 | _do_or_ret
13120     2D 00 64 FD | 	ret
13124                 | 
13124                 | ' 
13124                 | ' sub do_mul
13124                 | _do_mul
13124     05 4A 05 F6 | 	mov	COUNT_, #5
13128     A8 00 A0 FD | 	call	#pushregs_
1312c     18 F0 07 F1 | 	add	ptra, #24
13130     F0 80 BF FD | 	call	#_pop
13134     FD 1E 02 F6 | 	mov	local01, result1
13138     FE 20 02 F6 | 	mov	local02, result2
1313c     FF 22 02 F6 | 	mov	local03, result3
13140     0C 4E 05 F1 | 	add	fp, #12
13144     A7 1E 62 FC | 	wrlong	local01, fp
13148     04 4E 05 F1 | 	add	fp, #4
1314c     A7 20 62 FC | 	wrlong	local02, fp
13150     04 4E 05 F1 | 	add	fp, #4
13154     A7 22 62 FC | 	wrlong	local03, fp
13158     14 4E 85 F1 | 	sub	fp, #20
1315c     C4 80 BF FD | 	call	#_pop
13160     FF 22 02 F6 | 	mov	local03, result3
13164     A7 FA 61 FC | 	wrlong	result1, fp
13168     04 4E 05 F1 | 	add	fp, #4
1316c     A7 FC 61 FC | 	wrlong	result2, fp
13170     04 4E 05 F1 | 	add	fp, #4
13174     A7 22 62 FC | 	wrlong	local03, fp
13178                 | ' 
13178                 | ' t2=pop()
13178                 | ' t1=pop()
13178                 | ' 
13178                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
13178     08 4E 85 F1 | 	sub	fp, #8
1317c     1D 22 0E F2 | 	cmp	local03, #29 wz
13180     14 4E 05 A1 |  if_e	add	fp, #20
13184     A7 24 02 AB |  if_e	rdlong	local04, fp
13188     14 4E 85 A1 |  if_e	sub	fp, #20
1318c     12 23 02 A6 |  if_e	mov	local03, local04
13190     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13194     20 00 90 5D |  if_ne	jmp	#LR__1570
13198     A7 20 02 FB | 	rdlong	local02, fp
1319c     0C 4E 05 F1 | 	add	fp, #12
131a0     A7 22 02 FB | 	rdlong	local03, fp
131a4     11 21 02 FD | 	qmul	local02, local03
131a8     0C 4E 85 F1 | 	sub	fp, #12
131ac     18 1E 62 FD | 	getqx	local01
131b0     A7 1E 62 FC | 	wrlong	local01, fp
131b4     C4 02 90 FD | 	jmp	#LR__1579
131b8                 | LR__1570
131b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
131b8     08 4E 05 F1 | 	add	fp, #8
131bc     A7 1E 02 FB | 	rdlong	local01, fp
131c0     08 4E 85 F1 | 	sub	fp, #8
131c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
131c8     14 4E 05 A1 |  if_e	add	fp, #20
131cc     A7 24 02 AB |  if_e	rdlong	local04, fp
131d0     14 4E 85 A1 |  if_e	sub	fp, #20
131d4     12 23 02 A6 |  if_e	mov	local03, local04
131d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
131dc     2C 00 90 5D |  if_ne	jmp	#LR__1571
131e0     A7 20 02 FB | 	rdlong	local02, fp
131e4     0C 4E 05 F1 | 	add	fp, #12
131e8     A7 22 02 FB | 	rdlong	local03, fp
131ec     11 21 02 FD | 	qmul	local02, local03
131f0     0C 4E 85 F1 | 	sub	fp, #12
131f4     18 1E 62 FD | 	getqx	local01
131f8     A7 1E 62 FC | 	wrlong	local01, fp
131fc     08 4E 05 F1 | 	add	fp, #8
13200     A7 38 68 FC | 	wrlong	#28, fp
13204     08 4E 85 F1 | 	sub	fp, #8
13208     70 02 90 FD | 	jmp	#LR__1579
1320c                 | LR__1571
1320c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1320c     08 4E 05 F1 | 	add	fp, #8
13210     A7 1E 02 FB | 	rdlong	local01, fp
13214     08 4E 85 F1 | 	sub	fp, #8
13218     1D 1E 0E F2 | 	cmp	local01, #29 wz
1321c     14 4E 05 A1 |  if_e	add	fp, #20
13220     A7 24 02 AB |  if_e	rdlong	local04, fp
13224     14 4E 85 A1 |  if_e	sub	fp, #20
13228     12 23 02 A6 |  if_e	mov	local03, local04
1322c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13230     30 00 90 5D |  if_ne	jmp	#LR__1572
13234     A7 12 02 FB | 	rdlong	arg01, fp
13238     B0 FE B0 FD | 	call	#__system___float_fromuns
1323c     FD 12 02 F6 | 	mov	arg01, result1
13240     0C 4E 05 F1 | 	add	fp, #12
13244     A7 14 02 FB | 	rdlong	arg02, fp
13248     0C 4E 85 F1 | 	sub	fp, #12
1324c     A0 02 B1 FD | 	call	#__system___float_mul
13250     A7 FA 61 FC | 	wrlong	result1, fp
13254     08 4E 05 F1 | 	add	fp, #8
13258     A7 3C 68 FC | 	wrlong	#30, fp
1325c     08 4E 85 F1 | 	sub	fp, #8
13260     18 02 90 FD | 	jmp	#LR__1579
13264                 | LR__1572
13264                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
13264     08 4E 05 F1 | 	add	fp, #8
13268     A7 1E 02 FB | 	rdlong	local01, fp
1326c     08 4E 85 F1 | 	sub	fp, #8
13270     1C 1E 0E F2 | 	cmp	local01, #28 wz
13274     14 4E 05 A1 |  if_e	add	fp, #20
13278     A7 24 02 AB |  if_e	rdlong	local04, fp
1327c     14 4E 85 A1 |  if_e	sub	fp, #20
13280     12 23 02 A6 |  if_e	mov	local03, local04
13284     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13288     20 00 90 5D |  if_ne	jmp	#LR__1573
1328c     A7 20 02 FB | 	rdlong	local02, fp
13290     0C 4E 05 F1 | 	add	fp, #12
13294     A7 22 02 FB | 	rdlong	local03, fp
13298     11 21 02 FD | 	qmul	local02, local03
1329c     0C 4E 85 F1 | 	sub	fp, #12
132a0     18 1E 62 FD | 	getqx	local01
132a4     A7 1E 62 FC | 	wrlong	local01, fp
132a8     D0 01 90 FD | 	jmp	#LR__1579
132ac                 | LR__1573
132ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
132ac     08 4E 05 F1 | 	add	fp, #8
132b0     A7 1E 02 FB | 	rdlong	local01, fp
132b4     08 4E 85 F1 | 	sub	fp, #8
132b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
132bc     14 4E 05 A1 |  if_e	add	fp, #20
132c0     A7 24 02 AB |  if_e	rdlong	local04, fp
132c4     14 4E 85 A1 |  if_e	sub	fp, #20
132c8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
132cc     20 00 90 5D |  if_ne	jmp	#LR__1574
132d0     A7 20 02 FB | 	rdlong	local02, fp
132d4     0C 4E 05 F1 | 	add	fp, #12
132d8     A7 22 02 FB | 	rdlong	local03, fp
132dc     11 21 02 FD | 	qmul	local02, local03
132e0     0C 4E 85 F1 | 	sub	fp, #12
132e4     18 1E 62 FD | 	getqx	local01
132e8     A7 1E 62 FC | 	wrlong	local01, fp
132ec     8C 01 90 FD | 	jmp	#LR__1579
132f0                 | LR__1574
132f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
132f0     08 4E 05 F1 | 	add	fp, #8
132f4     A7 1E 02 FB | 	rdlong	local01, fp
132f8     08 4E 85 F1 | 	sub	fp, #8
132fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
13300     14 4E 05 A1 |  if_e	add	fp, #20
13304     A7 22 02 AB |  if_e	rdlong	local03, fp
13308     14 4E 85 A1 |  if_e	sub	fp, #20
1330c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13310     40 00 90 5D |  if_ne	jmp	#LR__1575
13314     A7 12 02 FB | 	rdlong	arg01, fp
13318     09 13 52 F6 | 	abs	arg01, arg01 wc
1331c     1F 26 C6 C9 |  if_b	decod	local05, #31
13320     00 26 06 36 |  if_ae	mov	local05, #0
13324     C4 FD B0 FD | 	call	#__system___float_fromuns
13328     13 FB 61 F5 | 	xor	result1, local05
1332c     FD 12 02 F6 | 	mov	arg01, result1
13330     0C 4E 05 F1 | 	add	fp, #12
13334     A7 14 02 FB | 	rdlong	arg02, fp
13338     0C 4E 85 F1 | 	sub	fp, #12
1333c     B0 01 B1 FD | 	call	#__system___float_mul
13340     A7 FA 61 FC | 	wrlong	result1, fp
13344     08 4E 05 F1 | 	add	fp, #8
13348     A7 3C 68 FC | 	wrlong	#30, fp
1334c     08 4E 85 F1 | 	sub	fp, #8
13350     28 01 90 FD | 	jmp	#LR__1579
13354                 | LR__1575
13354                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
13354     08 4E 05 F1 | 	add	fp, #8
13358     A7 1E 02 FB | 	rdlong	local01, fp
1335c     08 4E 85 F1 | 	sub	fp, #8
13360     1E 1E 0E F2 | 	cmp	local01, #30 wz
13364     14 4E 05 A1 |  if_e	add	fp, #20
13368     A7 22 02 AB |  if_e	rdlong	local03, fp
1336c     14 4E 85 A1 |  if_e	sub	fp, #20
13370     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13374     28 00 90 5D |  if_ne	jmp	#LR__1576
13378     A7 1E 02 FB | 	rdlong	local01, fp
1337c     0C 4E 05 F1 | 	add	fp, #12
13380     A7 12 02 FB | 	rdlong	arg01, fp
13384     0C 4E 85 F1 | 	sub	fp, #12
13388     60 FD B0 FD | 	call	#__system___float_fromuns
1338c     FD 14 02 F6 | 	mov	arg02, result1
13390     0F 13 02 F6 | 	mov	arg01, local01
13394     58 01 B1 FD | 	call	#__system___float_mul
13398     A7 FA 61 FC | 	wrlong	result1, fp
1339c     DC 00 90 FD | 	jmp	#LR__1579
133a0                 | LR__1576
133a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
133a0     08 4E 05 F1 | 	add	fp, #8
133a4     A7 1E 02 FB | 	rdlong	local01, fp
133a8     08 4E 85 F1 | 	sub	fp, #8
133ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
133b0     14 4E 05 A1 |  if_e	add	fp, #20
133b4     A7 22 02 AB |  if_e	rdlong	local03, fp
133b8     14 4E 85 A1 |  if_e	sub	fp, #20
133bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
133c0     38 00 90 5D |  if_ne	jmp	#LR__1577
133c4     A7 1E 02 FB | 	rdlong	local01, fp
133c8     0C 4E 05 F1 | 	add	fp, #12
133cc     A7 12 02 FB | 	rdlong	arg01, fp
133d0     0C 4E 85 F1 | 	sub	fp, #12
133d4     09 13 52 F6 | 	abs	arg01, arg01 wc
133d8     1F 26 C6 C9 |  if_b	decod	local05, #31
133dc     00 26 06 36 |  if_ae	mov	local05, #0
133e0     08 FD B0 FD | 	call	#__system___float_fromuns
133e4     13 FB 61 F5 | 	xor	result1, local05
133e8     FD 14 02 F6 | 	mov	arg02, result1
133ec     0F 13 02 F6 | 	mov	arg01, local01
133f0     FC 00 B1 FD | 	call	#__system___float_mul
133f4     A7 FA 61 FC | 	wrlong	result1, fp
133f8     80 00 90 FD | 	jmp	#LR__1579
133fc                 | LR__1577
133fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
133fc     08 4E 05 F1 | 	add	fp, #8
13400     A7 1E 02 FB | 	rdlong	local01, fp
13404     08 4E 85 F1 | 	sub	fp, #8
13408     1E 1E 0E F2 | 	cmp	local01, #30 wz
1340c     14 4E 05 A1 |  if_e	add	fp, #20
13410     A7 22 02 AB |  if_e	rdlong	local03, fp
13414     14 4E 85 A1 |  if_e	sub	fp, #20
13418     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1341c     1C 00 90 5D |  if_ne	jmp	#LR__1578
13420     A7 12 02 FB | 	rdlong	arg01, fp
13424     0C 4E 05 F1 | 	add	fp, #12
13428     A7 14 02 FB | 	rdlong	arg02, fp
1342c     0C 4E 85 F1 | 	sub	fp, #12
13430     BC 00 B1 FD | 	call	#__system___float_mul
13434     A7 FA 61 FC | 	wrlong	result1, fp
13438     40 00 90 FD | 	jmp	#LR__1579
1343c                 | LR__1578
1343c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1343c     08 4E 05 F1 | 	add	fp, #8
13440     A7 1E 02 FB | 	rdlong	local01, fp
13444     08 4E 85 F1 | 	sub	fp, #8
13448     1F 1E 0E F2 | 	cmp	local01, #31 wz
1344c     14 4E 05 51 |  if_ne	add	fp, #20
13450     A7 22 02 5B |  if_ne	rdlong	local03, fp
13454     14 4E 85 51 |  if_ne	sub	fp, #20
13458     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1345c     A7 10 68 AC |  if_e	wrlong	#8, fp
13460     08 4E 05 A1 |  if_e	add	fp, #8
13464     A7 FE 69 AC |  if_e	wrlong	#255, fp
13468     08 4E 85 A1 |  if_e	sub	fp, #8
1346c     A7 12 68 5C |  if_ne	wrlong	#9, fp
13470     08 4E 05 51 |  if_ne	add	fp, #8
13474     A7 FE 69 5C |  if_ne	wrlong	#255, fp
13478     08 4E 85 51 |  if_ne	sub	fp, #8
1347c                 | LR__1579
1347c     A7 12 02 F6 | 	mov	arg01, fp
13480     38 7E BF FD | 	call	#_push
13484     A7 F0 03 F6 | 	mov	ptra, fp
13488     B2 00 A0 FD | 	call	#popregs_
1348c                 | _do_mul_ret
1348c     2D 00 64 FD | 	ret
13490                 | 
13490                 | ' 
13490                 | ' sub do_div 
13490                 | _do_div
13490     01 4A 05 F6 | 	mov	COUNT_, #1
13494     A8 00 A0 FD | 	call	#pushregs_
13498     18 F0 07 F1 | 	add	ptra, #24
1349c     84 7D BF FD | 	call	#_pop
134a0     FD 7E 02 F6 | 	mov	muldivb_, result1
134a4     FE 7C 02 F6 | 	mov	muldiva_, result2
134a8     FF 1E 02 F6 | 	mov	local01, result3
134ac     0C 4E 05 F1 | 	add	fp, #12
134b0     A7 7E 62 FC | 	wrlong	muldivb_, fp
134b4     04 4E 05 F1 | 	add	fp, #4
134b8     A7 7C 62 FC | 	wrlong	muldiva_, fp
134bc     04 4E 05 F1 | 	add	fp, #4
134c0     A7 1E 62 FC | 	wrlong	local01, fp
134c4     14 4E 85 F1 | 	sub	fp, #20
134c8     58 7D BF FD | 	call	#_pop
134cc     A7 FA 61 FC | 	wrlong	result1, fp
134d0     04 4E 05 F1 | 	add	fp, #4
134d4     A7 FC 61 FC | 	wrlong	result2, fp
134d8     04 4E 05 F1 | 	add	fp, #4
134dc     A7 FE 61 FC | 	wrlong	result3, fp
134e0                 | ' 
134e0                 | ' t2=pop()
134e0                 | ' t1=pop()
134e0                 | ' 
134e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
134e0     08 4E 85 F1 | 	sub	fp, #8
134e4     1F FE 0D F2 | 	cmp	result3, #31 wz
134e8     14 4E 05 51 |  if_ne	add	fp, #20
134ec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
134f0     14 4E 85 51 |  if_ne	sub	fp, #20
134f4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
134f8     A7 14 68 AC |  if_e	wrlong	#10, fp
134fc     08 4E 05 A1 |  if_e	add	fp, #8
13500     A7 FE 69 AC |  if_e	wrlong	#255, fp
13504     08 4E 85 A1 |  if_e	sub	fp, #8
13508     90 01 90 AD |  if_e	jmp	#LR__1586
1350c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1350c     08 4E 05 F1 | 	add	fp, #8
13510     A7 7E 02 FB | 	rdlong	muldivb_, fp
13514     08 4E 85 F1 | 	sub	fp, #8
13518     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1351c     1C 00 90 5D |  if_ne	jmp	#LR__1580
13520     08 4E 05 F1 | 	add	fp, #8
13524     A7 38 68 FC | 	wrlong	#28, fp
13528     08 4E 85 F1 | 	sub	fp, #8
1352c     A7 12 02 FB | 	rdlong	arg01, fp
13530     00 14 06 F6 | 	mov	arg02, #0
13534     80 04 B1 FD | 	call	#__system___float_tointeger
13538     A7 FA 61 FC | 	wrlong	result1, fp
1353c                 | LR__1580
1353c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1353c     14 4E 05 F1 | 	add	fp, #20
13540     A7 7E 02 FB | 	rdlong	muldivb_, fp
13544     14 4E 85 F1 | 	sub	fp, #20
13548     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1354c     28 00 90 5D |  if_ne	jmp	#LR__1581
13550     14 4E 05 F1 | 	add	fp, #20
13554     A7 38 68 FC | 	wrlong	#28, fp
13558     08 4E 85 F1 | 	sub	fp, #8
1355c     A7 12 02 FB | 	rdlong	arg01, fp
13560     0C 4E 85 F1 | 	sub	fp, #12
13564     00 14 06 F6 | 	mov	arg02, #0
13568     4C 04 B1 FD | 	call	#__system___float_tointeger
1356c     0C 4E 05 F1 | 	add	fp, #12
13570     A7 FA 61 FC | 	wrlong	result1, fp
13574     0C 4E 85 F1 | 	sub	fp, #12
13578                 | LR__1581
13578                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
13578     08 4E 05 F1 | 	add	fp, #8
1357c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13580     08 4E 85 F1 | 	sub	fp, #8
13584     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13588     14 4E 05 A1 |  if_e	add	fp, #20
1358c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13590     14 4E 85 A1 |  if_e	sub	fp, #20
13594     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13598     20 00 90 5D |  if_ne	jmp	#LR__1582
1359c     0C 4E 05 F1 | 	add	fp, #12
135a0     A7 1E 02 FB | 	rdlong	local01, fp
135a4     0C 4E 85 F1 | 	sub	fp, #12
135a8     A7 7E 02 FB | 	rdlong	muldivb_, fp
135ac     0F 7F 12 FD | 	qdiv	muldivb_, local01
135b0     18 1E 62 FD | 	getqx	local01
135b4     A7 1E 62 FC | 	wrlong	local01, fp
135b8     E0 00 90 FD | 	jmp	#LR__1586
135bc                 | LR__1582
135bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
135bc     08 4E 05 F1 | 	add	fp, #8
135c0     A7 7E 02 FB | 	rdlong	muldivb_, fp
135c4     08 4E 85 F1 | 	sub	fp, #8
135c8     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
135cc     14 4E 05 A1 |  if_e	add	fp, #20
135d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
135d4     14 4E 85 A1 |  if_e	sub	fp, #20
135d8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
135dc     2C 00 90 5D |  if_ne	jmp	#LR__1583
135e0     0C 4E 05 F1 | 	add	fp, #12
135e4     A7 1E 02 FB | 	rdlong	local01, fp
135e8     0C 4E 85 F1 | 	sub	fp, #12
135ec     A7 7E 02 FB | 	rdlong	muldivb_, fp
135f0     0F 7F 12 FD | 	qdiv	muldivb_, local01
135f4     18 1E 62 FD | 	getqx	local01
135f8     A7 1E 62 FC | 	wrlong	local01, fp
135fc     08 4E 05 F1 | 	add	fp, #8
13600     A7 38 68 FC | 	wrlong	#28, fp
13604     08 4E 85 F1 | 	sub	fp, #8
13608     90 00 90 FD | 	jmp	#LR__1586
1360c                 | LR__1583
1360c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1360c     08 4E 05 F1 | 	add	fp, #8
13610     A7 7E 02 FB | 	rdlong	muldivb_, fp
13614     08 4E 85 F1 | 	sub	fp, #8
13618     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1361c     14 4E 05 A1 |  if_e	add	fp, #20
13620     A7 1E 02 AB |  if_e	rdlong	local01, fp
13624     14 4E 85 A1 |  if_e	sub	fp, #20
13628     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1362c     1C 00 90 5D |  if_ne	jmp	#LR__1584
13630     A7 7C 02 FB | 	rdlong	muldiva_, fp
13634     0C 4E 05 F1 | 	add	fp, #12
13638     A7 7E 02 FB | 	rdlong	muldivb_, fp
1363c     0C 4E 85 F1 | 	sub	fp, #12
13640     BA 00 A0 FD | 	call	#divide_
13644     A7 7E 62 FC | 	wrlong	muldivb_, fp
13648     50 00 90 FD | 	jmp	#LR__1586
1364c                 | LR__1584
1364c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1364c     08 4E 05 F1 | 	add	fp, #8
13650     A7 7E 02 FB | 	rdlong	muldivb_, fp
13654     08 4E 85 F1 | 	sub	fp, #8
13658     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1365c     14 4E 05 A1 |  if_e	add	fp, #20
13660     A7 1E 02 AB |  if_e	rdlong	local01, fp
13664     14 4E 85 A1 |  if_e	sub	fp, #20
13668     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1366c     1C 00 90 5D |  if_ne	jmp	#LR__1585
13670     A7 7C 02 FB | 	rdlong	muldiva_, fp
13674     0C 4E 05 F1 | 	add	fp, #12
13678     A7 7E 02 FB | 	rdlong	muldivb_, fp
1367c     0C 4E 85 F1 | 	sub	fp, #12
13680     BA 00 A0 FD | 	call	#divide_
13684     A7 7E 62 FC | 	wrlong	muldivb_, fp
13688     10 00 90 FD | 	jmp	#LR__1586
1368c                 | LR__1585
1368c     A7 16 68 FC | 	wrlong	#11, fp
13690     08 4E 05 F1 | 	add	fp, #8
13694     A7 FE 69 FC | 	wrlong	#255, fp
13698     08 4E 85 F1 | 	sub	fp, #8
1369c                 | LR__1586
1369c     A7 12 02 F6 | 	mov	arg01, fp
136a0     18 7C BF FD | 	call	#_push
136a4     A7 F0 03 F6 | 	mov	ptra, fp
136a8     B2 00 A0 FD | 	call	#popregs_
136ac                 | _do_div_ret
136ac     2D 00 64 FD | 	ret
136b0                 | 
136b0                 | ' 
136b0                 | ' sub do_fdiv 
136b0                 | _do_fdiv
136b0     02 4A 05 F6 | 	mov	COUNT_, #2
136b4     A8 00 A0 FD | 	call	#pushregs_
136b8     18 F0 07 F1 | 	add	ptra, #24
136bc     64 7B BF FD | 	call	#_pop
136c0     FD 14 02 F6 | 	mov	arg02, result1
136c4     FE 12 02 F6 | 	mov	arg01, result2
136c8     FF 1E 02 F6 | 	mov	local01, result3
136cc     0C 4E 05 F1 | 	add	fp, #12
136d0     A7 14 62 FC | 	wrlong	arg02, fp
136d4     04 4E 05 F1 | 	add	fp, #4
136d8     A7 12 62 FC | 	wrlong	arg01, fp
136dc     04 4E 05 F1 | 	add	fp, #4
136e0     A7 1E 62 FC | 	wrlong	local01, fp
136e4     14 4E 85 F1 | 	sub	fp, #20
136e8     38 7B BF FD | 	call	#_pop
136ec     A7 FA 61 FC | 	wrlong	result1, fp
136f0     04 4E 05 F1 | 	add	fp, #4
136f4     A7 FC 61 FC | 	wrlong	result2, fp
136f8     04 4E 05 F1 | 	add	fp, #4
136fc     A7 FE 61 FC | 	wrlong	result3, fp
13700                 | ' 
13700                 | ' t2=pop()
13700                 | ' t1=pop()
13700                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
13700     08 4E 85 F1 | 	sub	fp, #8
13704     1F FE 0D F2 | 	cmp	result3, #31 wz
13708     14 4E 05 51 |  if_ne	add	fp, #20
1370c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13710     14 4E 85 51 |  if_ne	sub	fp, #20
13714     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13718     A7 14 68 AC |  if_e	wrlong	#10, fp
1371c     08 4E 05 A1 |  if_e	add	fp, #8
13720     A7 FE 69 AC |  if_e	wrlong	#255, fp
13724     08 4E 85 A1 |  if_e	sub	fp, #8
13728     38 01 90 AD |  if_e	jmp	#LR__1595
1372c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1372c     08 4E 05 F1 | 	add	fp, #8
13730     A7 14 02 FB | 	rdlong	arg02, fp
13734     08 4E 85 F1 | 	sub	fp, #8
13738     1C 14 0E F2 | 	cmp	arg02, #28 wz
1373c     28 00 90 5D |  if_ne	jmp	#LR__1590
13740     08 4E 05 F1 | 	add	fp, #8
13744     A7 3C 68 FC | 	wrlong	#30, fp
13748     08 4E 85 F1 | 	sub	fp, #8
1374c     A7 12 02 FB | 	rdlong	arg01, fp
13750     09 13 52 F6 | 	abs	arg01, arg01 wc
13754     1F 20 C6 C9 |  if_b	decod	local02, #31
13758     00 20 06 36 |  if_ae	mov	local02, #0
1375c     8C F9 B0 FD | 	call	#__system___float_fromuns
13760     10 FB 61 F5 | 	xor	result1, local02
13764     A7 FA 61 FC | 	wrlong	result1, fp
13768                 | LR__1590
13768                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
13768     08 4E 05 F1 | 	add	fp, #8
1376c     A7 14 02 FB | 	rdlong	arg02, fp
13770     08 4E 85 F1 | 	sub	fp, #8
13774     1D 14 0E F2 | 	cmp	arg02, #29 wz
13778     18 00 90 5D |  if_ne	jmp	#LR__1591
1377c     08 4E 05 F1 | 	add	fp, #8
13780     A7 3C 68 FC | 	wrlong	#30, fp
13784     08 4E 85 F1 | 	sub	fp, #8
13788     A7 12 02 FB | 	rdlong	arg01, fp
1378c     5C F9 B0 FD | 	call	#__system___float_fromuns
13790     A7 FA 61 FC | 	wrlong	result1, fp
13794                 | LR__1591
13794                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13794     14 4E 05 F1 | 	add	fp, #20
13798     A7 14 02 FB | 	rdlong	arg02, fp
1379c     14 4E 85 F1 | 	sub	fp, #20
137a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
137a4     34 00 90 5D |  if_ne	jmp	#LR__1592
137a8     14 4E 05 F1 | 	add	fp, #20
137ac     A7 3C 68 FC | 	wrlong	#30, fp
137b0     08 4E 85 F1 | 	sub	fp, #8
137b4     A7 12 02 FB | 	rdlong	arg01, fp
137b8     0C 4E 85 F1 | 	sub	fp, #12
137bc     09 13 52 F6 | 	abs	arg01, arg01 wc
137c0     1F 20 C6 C9 |  if_b	decod	local02, #31
137c4     00 20 06 36 |  if_ae	mov	local02, #0
137c8     20 F9 B0 FD | 	call	#__system___float_fromuns
137cc     10 FB 61 F5 | 	xor	result1, local02
137d0     0C 4E 05 F1 | 	add	fp, #12
137d4     A7 FA 61 FC | 	wrlong	result1, fp
137d8     0C 4E 85 F1 | 	sub	fp, #12
137dc                 | LR__1592
137dc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
137dc     14 4E 05 F1 | 	add	fp, #20
137e0     A7 14 02 FB | 	rdlong	arg02, fp
137e4     14 4E 85 F1 | 	sub	fp, #20
137e8     1D 14 0E F2 | 	cmp	arg02, #29 wz
137ec     24 00 90 5D |  if_ne	jmp	#LR__1593
137f0     14 4E 05 F1 | 	add	fp, #20
137f4     A7 3C 68 FC | 	wrlong	#30, fp
137f8     08 4E 85 F1 | 	sub	fp, #8
137fc     A7 12 02 FB | 	rdlong	arg01, fp
13800     0C 4E 85 F1 | 	sub	fp, #12
13804     E4 F8 B0 FD | 	call	#__system___float_fromuns
13808     0C 4E 05 F1 | 	add	fp, #12
1380c     A7 FA 61 FC | 	wrlong	result1, fp
13810     0C 4E 85 F1 | 	sub	fp, #12
13814                 | LR__1593
13814                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
13814     08 4E 05 F1 | 	add	fp, #8
13818     A7 14 02 FB | 	rdlong	arg02, fp
1381c     08 4E 85 F1 | 	sub	fp, #8
13820     1E 14 0E F2 | 	cmp	arg02, #30 wz
13824     14 4E 05 A1 |  if_e	add	fp, #20
13828     A7 1E 02 AB |  if_e	rdlong	local01, fp
1382c     14 4E 85 A1 |  if_e	sub	fp, #20
13830     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13834     1C 00 90 5D |  if_ne	jmp	#LR__1594
13838     A7 12 02 FB | 	rdlong	arg01, fp
1383c     0C 4E 05 F1 | 	add	fp, #12
13840     A7 14 02 FB | 	rdlong	arg02, fp
13844     0C 4E 85 F1 | 	sub	fp, #12
13848     A8 FE B0 FD | 	call	#__system___float_div
1384c     A7 FA 61 FC | 	wrlong	result1, fp
13850     10 00 90 FD | 	jmp	#LR__1595
13854                 | LR__1594
13854     A7 16 68 FC | 	wrlong	#11, fp
13858     08 4E 05 F1 | 	add	fp, #8
1385c     A7 FE 69 FC | 	wrlong	#255, fp
13860     08 4E 85 F1 | 	sub	fp, #8
13864                 | LR__1595
13864     A7 12 02 F6 | 	mov	arg01, fp
13868     50 7A BF FD | 	call	#_push
1386c     A7 F0 03 F6 | 	mov	ptra, fp
13870     B2 00 A0 FD | 	call	#popregs_
13874                 | _do_fdiv_ret
13874     2D 00 64 FD | 	ret
13878                 | 
13878                 | ' 
13878                 | ' 
13878                 | ' sub do_mod 
13878                 | _do_mod
13878     01 4A 05 F6 | 	mov	COUNT_, #1
1387c     A8 00 A0 FD | 	call	#pushregs_
13880     18 F0 07 F1 | 	add	ptra, #24
13884     9C 79 BF FD | 	call	#_pop
13888     FD 7E 02 F6 | 	mov	muldivb_, result1
1388c     FE 7C 02 F6 | 	mov	muldiva_, result2
13890     FF 1E 02 F6 | 	mov	local01, result3
13894     0C 4E 05 F1 | 	add	fp, #12
13898     A7 7E 62 FC | 	wrlong	muldivb_, fp
1389c     04 4E 05 F1 | 	add	fp, #4
138a0     A7 7C 62 FC | 	wrlong	muldiva_, fp
138a4     04 4E 05 F1 | 	add	fp, #4
138a8     A7 1E 62 FC | 	wrlong	local01, fp
138ac     14 4E 85 F1 | 	sub	fp, #20
138b0     70 79 BF FD | 	call	#_pop
138b4     A7 FA 61 FC | 	wrlong	result1, fp
138b8     04 4E 05 F1 | 	add	fp, #4
138bc     A7 FC 61 FC | 	wrlong	result2, fp
138c0     04 4E 05 F1 | 	add	fp, #4
138c4     A7 FE 61 FC | 	wrlong	result3, fp
138c8                 | ' 
138c8                 | ' t2=pop()
138c8                 | ' t1=pop()
138c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
138c8     08 4E 85 F1 | 	sub	fp, #8
138cc     1F FE 0D F2 | 	cmp	result3, #31 wz
138d0     14 4E 05 51 |  if_ne	add	fp, #20
138d4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
138d8     14 4E 85 51 |  if_ne	sub	fp, #20
138dc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
138e0     A7 14 68 AC |  if_e	wrlong	#10, fp
138e4     08 4E 05 A1 |  if_e	add	fp, #8
138e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
138ec     08 4E 85 A1 |  if_e	sub	fp, #8
138f0     90 01 90 AD |  if_e	jmp	#LR__1606
138f4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
138f4     08 4E 05 F1 | 	add	fp, #8
138f8     A7 7E 02 FB | 	rdlong	muldivb_, fp
138fc     08 4E 85 F1 | 	sub	fp, #8
13900     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13904     1C 00 90 5D |  if_ne	jmp	#LR__1600
13908     08 4E 05 F1 | 	add	fp, #8
1390c     A7 38 68 FC | 	wrlong	#28, fp
13910     08 4E 85 F1 | 	sub	fp, #8
13914     A7 12 02 FB | 	rdlong	arg01, fp
13918     00 14 06 F6 | 	mov	arg02, #0
1391c     98 00 B1 FD | 	call	#__system___float_tointeger
13920     A7 FA 61 FC | 	wrlong	result1, fp
13924                 | LR__1600
13924                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
13924     14 4E 05 F1 | 	add	fp, #20
13928     A7 7E 02 FB | 	rdlong	muldivb_, fp
1392c     14 4E 85 F1 | 	sub	fp, #20
13930     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13934     28 00 90 5D |  if_ne	jmp	#LR__1601
13938     14 4E 05 F1 | 	add	fp, #20
1393c     A7 38 68 FC | 	wrlong	#28, fp
13940     08 4E 85 F1 | 	sub	fp, #8
13944     A7 12 02 FB | 	rdlong	arg01, fp
13948     0C 4E 85 F1 | 	sub	fp, #12
1394c     00 14 06 F6 | 	mov	arg02, #0
13950     64 00 B1 FD | 	call	#__system___float_tointeger
13954     0C 4E 05 F1 | 	add	fp, #12
13958     A7 FA 61 FC | 	wrlong	result1, fp
1395c     0C 4E 85 F1 | 	sub	fp, #12
13960                 | LR__1601
13960                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
13960     08 4E 05 F1 | 	add	fp, #8
13964     A7 7E 02 FB | 	rdlong	muldivb_, fp
13968     08 4E 85 F1 | 	sub	fp, #8
1396c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13970     14 4E 05 A1 |  if_e	add	fp, #20
13974     A7 1E 02 AB |  if_e	rdlong	local01, fp
13978     14 4E 85 A1 |  if_e	sub	fp, #20
1397c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13980     20 00 90 5D |  if_ne	jmp	#LR__1602
13984     0C 4E 05 F1 | 	add	fp, #12
13988     A7 1E 02 FB | 	rdlong	local01, fp
1398c     0C 4E 85 F1 | 	sub	fp, #12
13990     A7 7E 02 FB | 	rdlong	muldivb_, fp
13994     0F 7F 12 FD | 	qdiv	muldivb_, local01
13998     19 1E 62 FD | 	getqy	local01
1399c     A7 1E 62 FC | 	wrlong	local01, fp
139a0     E0 00 90 FD | 	jmp	#LR__1606
139a4                 | LR__1602
139a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
139a4     08 4E 05 F1 | 	add	fp, #8
139a8     A7 7E 02 FB | 	rdlong	muldivb_, fp
139ac     08 4E 85 F1 | 	sub	fp, #8
139b0     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
139b4     14 4E 05 A1 |  if_e	add	fp, #20
139b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
139bc     14 4E 85 A1 |  if_e	sub	fp, #20
139c0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
139c4     2C 00 90 5D |  if_ne	jmp	#LR__1603
139c8     0C 4E 05 F1 | 	add	fp, #12
139cc     A7 1E 02 FB | 	rdlong	local01, fp
139d0     0C 4E 85 F1 | 	sub	fp, #12
139d4     A7 7E 02 FB | 	rdlong	muldivb_, fp
139d8     0F 7F 12 FD | 	qdiv	muldivb_, local01
139dc     19 1E 62 FD | 	getqy	local01
139e0     A7 1E 62 FC | 	wrlong	local01, fp
139e4     08 4E 05 F1 | 	add	fp, #8
139e8     A7 38 68 FC | 	wrlong	#28, fp
139ec     08 4E 85 F1 | 	sub	fp, #8
139f0     90 00 90 FD | 	jmp	#LR__1606
139f4                 | LR__1603
139f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
139f4     08 4E 05 F1 | 	add	fp, #8
139f8     A7 7E 02 FB | 	rdlong	muldivb_, fp
139fc     08 4E 85 F1 | 	sub	fp, #8
13a00     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13a04     14 4E 05 A1 |  if_e	add	fp, #20
13a08     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a0c     14 4E 85 A1 |  if_e	sub	fp, #20
13a10     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13a14     1C 00 90 5D |  if_ne	jmp	#LR__1604
13a18     A7 7C 02 FB | 	rdlong	muldiva_, fp
13a1c     0C 4E 05 F1 | 	add	fp, #12
13a20     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a24     0C 4E 85 F1 | 	sub	fp, #12
13a28     BA 00 A0 FD | 	call	#divide_
13a2c     A7 7C 62 FC | 	wrlong	muldiva_, fp
13a30     50 00 90 FD | 	jmp	#LR__1606
13a34                 | LR__1604
13a34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
13a34     08 4E 05 F1 | 	add	fp, #8
13a38     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a3c     08 4E 85 F1 | 	sub	fp, #8
13a40     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13a44     14 4E 05 A1 |  if_e	add	fp, #20
13a48     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a4c     14 4E 85 A1 |  if_e	sub	fp, #20
13a50     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13a54     1C 00 90 5D |  if_ne	jmp	#LR__1605
13a58     A7 7C 02 FB | 	rdlong	muldiva_, fp
13a5c     0C 4E 05 F1 | 	add	fp, #12
13a60     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a64     0C 4E 85 F1 | 	sub	fp, #12
13a68     BA 00 A0 FD | 	call	#divide_
13a6c     A7 7C 62 FC | 	wrlong	muldiva_, fp
13a70     10 00 90 FD | 	jmp	#LR__1606
13a74                 | LR__1605
13a74     A7 16 68 FC | 	wrlong	#11, fp
13a78     08 4E 05 F1 | 	add	fp, #8
13a7c     A7 FE 69 FC | 	wrlong	#255, fp
13a80     08 4E 85 F1 | 	sub	fp, #8
13a84                 | LR__1606
13a84     A7 12 02 F6 | 	mov	arg01, fp
13a88     30 78 BF FD | 	call	#_push
13a8c     A7 F0 03 F6 | 	mov	ptra, fp
13a90     B2 00 A0 FD | 	call	#popregs_
13a94                 | _do_mod_ret
13a94     2D 00 64 FD | 	ret
13a98                 | 
13a98                 | ' 
13a98                 | ' sub do_shl 
13a98                 | _do_shl
13a98     03 4A 05 F6 | 	mov	COUNT_, #3
13a9c     A8 00 A0 FD | 	call	#pushregs_
13aa0     18 F0 07 F1 | 	add	ptra, #24
13aa4     7C 77 BF FD | 	call	#_pop
13aa8     FD 12 02 F6 | 	mov	arg01, result1
13aac     FE 1E 02 F6 | 	mov	local01, result2
13ab0     FF 20 02 F6 | 	mov	local02, result3
13ab4     0C 4E 05 F1 | 	add	fp, #12
13ab8     A7 12 62 FC | 	wrlong	arg01, fp
13abc     04 4E 05 F1 | 	add	fp, #4
13ac0     A7 1E 62 FC | 	wrlong	local01, fp
13ac4     04 4E 05 F1 | 	add	fp, #4
13ac8     A7 20 62 FC | 	wrlong	local02, fp
13acc     14 4E 85 F1 | 	sub	fp, #20
13ad0     50 77 BF FD | 	call	#_pop
13ad4     FF 22 02 F6 | 	mov	local03, result3
13ad8     A7 FA 61 FC | 	wrlong	result1, fp
13adc     04 4E 05 F1 | 	add	fp, #4
13ae0     A7 FC 61 FC | 	wrlong	result2, fp
13ae4     04 4E 05 F1 | 	add	fp, #4
13ae8     A7 22 62 FC | 	wrlong	local03, fp
13aec                 | ' 
13aec                 | ' t2=pop()
13aec                 | ' t1=pop()
13aec                 | ' 
13aec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13aec     08 4E 85 F1 | 	sub	fp, #8
13af0     1C 22 0E F2 | 	cmp	local03, #28 wz
13af4     A7 22 02 AB |  if_e	rdlong	local03, fp
13af8     A7 22 62 AC |  if_e	wrlong	local03, fp
13afc     08 4E 05 A1 |  if_e	add	fp, #8
13b00     A7 3A 68 AC |  if_e	wrlong	#29, fp
13b04     08 4E 85 A1 |  if_e	sub	fp, #8
13b08                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13b08     14 4E 05 F1 | 	add	fp, #20
13b0c     A7 22 02 FB | 	rdlong	local03, fp
13b10     14 4E 85 F1 | 	sub	fp, #20
13b14     1C 22 0E F2 | 	cmp	local03, #28 wz
13b18     18 00 90 5D |  if_ne	jmp	#LR__1610
13b1c     0C 4E 05 F1 | 	add	fp, #12
13b20     A7 22 02 FB | 	rdlong	local03, fp
13b24     A7 22 62 FC | 	wrlong	local03, fp
13b28     08 4E 05 F1 | 	add	fp, #8
13b2c     A7 3A 68 FC | 	wrlong	#29, fp
13b30     14 4E 85 F1 | 	sub	fp, #20
13b34                 | LR__1610
13b34                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13b34     08 4E 05 F1 | 	add	fp, #8
13b38     A7 22 02 FB | 	rdlong	local03, fp
13b3c     08 4E 85 F1 | 	sub	fp, #8
13b40     1F 22 0E F2 | 	cmp	local03, #31 wz
13b44     14 4E 05 51 |  if_ne	add	fp, #20
13b48     A7 20 02 5B |  if_ne	rdlong	local02, fp
13b4c     14 4E 85 51 |  if_ne	sub	fp, #20
13b50     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13b54     08 4E 05 51 |  if_ne	add	fp, #8
13b58     A7 22 02 5B |  if_ne	rdlong	local03, fp
13b5c     08 4E 85 51 |  if_ne	sub	fp, #8
13b60     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13b64     14 4E 05 51 |  if_ne	add	fp, #20
13b68     14 4E 85 51 |  if_ne	sub	fp, #20
13b6c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13b70     A7 0C 68 AC |  if_e	wrlong	#6, fp
13b74     08 4E 05 A1 |  if_e	add	fp, #8
13b78     A7 FE 69 AC |  if_e	wrlong	#255, fp
13b7c     08 4E 85 A1 |  if_e	sub	fp, #8
13b80     18 00 90 AD |  if_e	jmp	#LR__1611
13b84     A7 22 02 FB | 	rdlong	local03, fp
13b88     0C 4E 05 F1 | 	add	fp, #12
13b8c     A7 1E 02 FB | 	rdlong	local01, fp
13b90     0C 4E 85 F1 | 	sub	fp, #12
13b94     0F 23 62 F0 | 	shl	local03, local01
13b98     A7 22 62 FC | 	wrlong	local03, fp
13b9c                 | LR__1611
13b9c     A7 12 02 F6 | 	mov	arg01, fp
13ba0     18 77 BF FD | 	call	#_push
13ba4     A7 F0 03 F6 | 	mov	ptra, fp
13ba8     B2 00 A0 FD | 	call	#popregs_
13bac                 | _do_shl_ret
13bac     2D 00 64 FD | 	ret
13bb0                 | 
13bb0                 | ' 
13bb0                 | ' sub do_shr 
13bb0                 | _do_shr
13bb0     03 4A 05 F6 | 	mov	COUNT_, #3
13bb4     A8 00 A0 FD | 	call	#pushregs_
13bb8     18 F0 07 F1 | 	add	ptra, #24
13bbc     64 76 BF FD | 	call	#_pop
13bc0     FD 12 02 F6 | 	mov	arg01, result1
13bc4     FE 1E 02 F6 | 	mov	local01, result2
13bc8     FF 20 02 F6 | 	mov	local02, result3
13bcc     0C 4E 05 F1 | 	add	fp, #12
13bd0     A7 12 62 FC | 	wrlong	arg01, fp
13bd4     04 4E 05 F1 | 	add	fp, #4
13bd8     A7 1E 62 FC | 	wrlong	local01, fp
13bdc     04 4E 05 F1 | 	add	fp, #4
13be0     A7 20 62 FC | 	wrlong	local02, fp
13be4     14 4E 85 F1 | 	sub	fp, #20
13be8     38 76 BF FD | 	call	#_pop
13bec     FF 22 02 F6 | 	mov	local03, result3
13bf0     A7 FA 61 FC | 	wrlong	result1, fp
13bf4     04 4E 05 F1 | 	add	fp, #4
13bf8     A7 FC 61 FC | 	wrlong	result2, fp
13bfc     04 4E 05 F1 | 	add	fp, #4
13c00     A7 22 62 FC | 	wrlong	local03, fp
13c04                 | ' t2=pop()
13c04                 | ' t1=pop()
13c04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13c04     08 4E 85 F1 | 	sub	fp, #8
13c08     1C 22 0E F2 | 	cmp	local03, #28 wz
13c0c     A7 22 02 AB |  if_e	rdlong	local03, fp
13c10     A7 22 62 AC |  if_e	wrlong	local03, fp
13c14     08 4E 05 A1 |  if_e	add	fp, #8
13c18     A7 3A 68 AC |  if_e	wrlong	#29, fp
13c1c     08 4E 85 A1 |  if_e	sub	fp, #8
13c20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13c20     14 4E 05 F1 | 	add	fp, #20
13c24     A7 22 02 FB | 	rdlong	local03, fp
13c28     14 4E 85 F1 | 	sub	fp, #20
13c2c     1C 22 0E F2 | 	cmp	local03, #28 wz
13c30     18 00 90 5D |  if_ne	jmp	#LR__1620
13c34     0C 4E 05 F1 | 	add	fp, #12
13c38     A7 22 02 FB | 	rdlong	local03, fp
13c3c     A7 22 62 FC | 	wrlong	local03, fp
13c40     08 4E 05 F1 | 	add	fp, #8
13c44     A7 3A 68 FC | 	wrlong	#29, fp
13c48     14 4E 85 F1 | 	sub	fp, #20
13c4c                 | LR__1620
13c4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13c4c     08 4E 05 F1 | 	add	fp, #8
13c50     A7 22 02 FB | 	rdlong	local03, fp
13c54     08 4E 85 F1 | 	sub	fp, #8
13c58     1F 22 0E F2 | 	cmp	local03, #31 wz
13c5c     14 4E 05 51 |  if_ne	add	fp, #20
13c60     A7 20 02 5B |  if_ne	rdlong	local02, fp
13c64     14 4E 85 51 |  if_ne	sub	fp, #20
13c68     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13c6c     08 4E 05 51 |  if_ne	add	fp, #8
13c70     A7 22 02 5B |  if_ne	rdlong	local03, fp
13c74     08 4E 85 51 |  if_ne	sub	fp, #8
13c78     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13c7c     14 4E 05 51 |  if_ne	add	fp, #20
13c80     14 4E 85 51 |  if_ne	sub	fp, #20
13c84     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13c88     A7 0C 68 AC |  if_e	wrlong	#6, fp
13c8c     08 4E 05 A1 |  if_e	add	fp, #8
13c90     A7 FE 69 AC |  if_e	wrlong	#255, fp
13c94     08 4E 85 A1 |  if_e	sub	fp, #8
13c98     18 00 90 AD |  if_e	jmp	#LR__1621
13c9c     A7 22 02 FB | 	rdlong	local03, fp
13ca0     0C 4E 05 F1 | 	add	fp, #12
13ca4     A7 1E 02 FB | 	rdlong	local01, fp
13ca8     0C 4E 85 F1 | 	sub	fp, #12
13cac     0F 23 42 F0 | 	shr	local03, local01
13cb0     A7 22 62 FC | 	wrlong	local03, fp
13cb4                 | LR__1621
13cb4     A7 12 02 F6 | 	mov	arg01, fp
13cb8     00 76 BF FD | 	call	#_push
13cbc     A7 F0 03 F6 | 	mov	ptra, fp
13cc0     B2 00 A0 FD | 	call	#popregs_
13cc4                 | _do_shr_ret
13cc4     2D 00 64 FD | 	ret
13cc8                 | 
13cc8                 | ' 
13cc8                 | ' sub do_power 
13cc8                 | _do_power
13cc8     02 4A 05 F6 | 	mov	COUNT_, #2
13ccc     A8 00 A0 FD | 	call	#pushregs_
13cd0     18 F0 07 F1 | 	add	ptra, #24
13cd4     4C 75 BF FD | 	call	#_pop
13cd8     FD 14 02 F6 | 	mov	arg02, result1
13cdc     FE 12 02 F6 | 	mov	arg01, result2
13ce0     FF 1E 02 F6 | 	mov	local01, result3
13ce4     0C 4E 05 F1 | 	add	fp, #12
13ce8     A7 14 62 FC | 	wrlong	arg02, fp
13cec     04 4E 05 F1 | 	add	fp, #4
13cf0     A7 12 62 FC | 	wrlong	arg01, fp
13cf4     04 4E 05 F1 | 	add	fp, #4
13cf8     A7 1E 62 FC | 	wrlong	local01, fp
13cfc     14 4E 85 F1 | 	sub	fp, #20
13d00     20 75 BF FD | 	call	#_pop
13d04     A7 FA 61 FC | 	wrlong	result1, fp
13d08     04 4E 05 F1 | 	add	fp, #4
13d0c     A7 FC 61 FC | 	wrlong	result2, fp
13d10     04 4E 05 F1 | 	add	fp, #4
13d14     A7 FE 61 FC | 	wrlong	result3, fp
13d18                 | ' t2=pop()
13d18                 | ' t1=pop()
13d18                 | ' 
13d18                 | ' 
13d18                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
13d18     08 4E 85 F1 | 	sub	fp, #8
13d1c     1F FE 0D F2 | 	cmp	result3, #31 wz
13d20     14 4E 05 51 |  if_ne	add	fp, #20
13d24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13d28     14 4E 85 51 |  if_ne	sub	fp, #20
13d2c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13d30     A7 18 68 AC |  if_e	wrlong	#12, fp
13d34     08 4E 05 A1 |  if_e	add	fp, #8
13d38     A7 FE 69 AC |  if_e	wrlong	#255, fp
13d3c     08 4E 85 A1 |  if_e	sub	fp, #8
13d40     38 01 90 AD |  if_e	jmp	#LR__1635
13d44                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13d44     08 4E 05 F1 | 	add	fp, #8
13d48     A7 14 02 FB | 	rdlong	arg02, fp
13d4c     08 4E 85 F1 | 	sub	fp, #8
13d50     1C 14 0E F2 | 	cmp	arg02, #28 wz
13d54     28 00 90 5D |  if_ne	jmp	#LR__1630
13d58     08 4E 05 F1 | 	add	fp, #8
13d5c     A7 3C 68 FC | 	wrlong	#30, fp
13d60     08 4E 85 F1 | 	sub	fp, #8
13d64     A7 12 02 FB | 	rdlong	arg01, fp
13d68     09 13 52 F6 | 	abs	arg01, arg01 wc
13d6c     1F 20 C6 C9 |  if_b	decod	local02, #31
13d70     00 20 06 36 |  if_ae	mov	local02, #0
13d74     74 F3 B0 FD | 	call	#__system___float_fromuns
13d78     10 FB 61 F5 | 	xor	result1, local02
13d7c     A7 FA 61 FC | 	wrlong	result1, fp
13d80                 | LR__1630
13d80                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13d80     08 4E 05 F1 | 	add	fp, #8
13d84     A7 14 02 FB | 	rdlong	arg02, fp
13d88     08 4E 85 F1 | 	sub	fp, #8
13d8c     1D 14 0E F2 | 	cmp	arg02, #29 wz
13d90     18 00 90 5D |  if_ne	jmp	#LR__1631
13d94     08 4E 05 F1 | 	add	fp, #8
13d98     A7 3C 68 FC | 	wrlong	#30, fp
13d9c     08 4E 85 F1 | 	sub	fp, #8
13da0     A7 12 02 FB | 	rdlong	arg01, fp
13da4     44 F3 B0 FD | 	call	#__system___float_fromuns
13da8     A7 FA 61 FC | 	wrlong	result1, fp
13dac                 | LR__1631
13dac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13dac     14 4E 05 F1 | 	add	fp, #20
13db0     A7 14 02 FB | 	rdlong	arg02, fp
13db4     14 4E 85 F1 | 	sub	fp, #20
13db8     1C 14 0E F2 | 	cmp	arg02, #28 wz
13dbc     34 00 90 5D |  if_ne	jmp	#LR__1632
13dc0     14 4E 05 F1 | 	add	fp, #20
13dc4     A7 3C 68 FC | 	wrlong	#30, fp
13dc8     08 4E 85 F1 | 	sub	fp, #8
13dcc     A7 12 02 FB | 	rdlong	arg01, fp
13dd0     0C 4E 85 F1 | 	sub	fp, #12
13dd4     09 13 52 F6 | 	abs	arg01, arg01 wc
13dd8     1F 20 C6 C9 |  if_b	decod	local02, #31
13ddc     00 20 06 36 |  if_ae	mov	local02, #0
13de0     08 F3 B0 FD | 	call	#__system___float_fromuns
13de4     10 FB 61 F5 | 	xor	result1, local02
13de8     0C 4E 05 F1 | 	add	fp, #12
13dec     A7 FA 61 FC | 	wrlong	result1, fp
13df0     0C 4E 85 F1 | 	sub	fp, #12
13df4                 | LR__1632
13df4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13df4     14 4E 05 F1 | 	add	fp, #20
13df8     A7 14 02 FB | 	rdlong	arg02, fp
13dfc     14 4E 85 F1 | 	sub	fp, #20
13e00     1D 14 0E F2 | 	cmp	arg02, #29 wz
13e04     24 00 90 5D |  if_ne	jmp	#LR__1633
13e08     14 4E 05 F1 | 	add	fp, #20
13e0c     A7 3C 68 FC | 	wrlong	#30, fp
13e10     08 4E 85 F1 | 	sub	fp, #8
13e14     A7 12 02 FB | 	rdlong	arg01, fp
13e18     0C 4E 85 F1 | 	sub	fp, #12
13e1c     CC F2 B0 FD | 	call	#__system___float_fromuns
13e20     0C 4E 05 F1 | 	add	fp, #12
13e24     A7 FA 61 FC | 	wrlong	result1, fp
13e28     0C 4E 85 F1 | 	sub	fp, #12
13e2c                 | LR__1633
13e2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13e2c     08 4E 05 F1 | 	add	fp, #8
13e30     A7 14 02 FB | 	rdlong	arg02, fp
13e34     08 4E 85 F1 | 	sub	fp, #8
13e38     1E 14 0E F2 | 	cmp	arg02, #30 wz
13e3c     14 4E 05 A1 |  if_e	add	fp, #20
13e40     A7 1E 02 AB |  if_e	rdlong	local01, fp
13e44     14 4E 85 A1 |  if_e	sub	fp, #20
13e48     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13e4c     1C 00 90 5D |  if_ne	jmp	#LR__1634
13e50     A7 12 02 FB | 	rdlong	arg01, fp
13e54     0C 4E 05 F1 | 	add	fp, #12
13e58     A7 14 02 FB | 	rdlong	arg02, fp
13e5c     0C 4E 85 F1 | 	sub	fp, #12
13e60     94 05 B1 FD | 	call	#__system____builtin_powf
13e64     A7 FA 61 FC | 	wrlong	result1, fp
13e68     10 00 90 FD | 	jmp	#LR__1635
13e6c                 | LR__1634
13e6c     A7 1A 68 FC | 	wrlong	#13, fp
13e70     08 4E 05 F1 | 	add	fp, #8
13e74     A7 FE 69 FC | 	wrlong	#255, fp
13e78     08 4E 85 F1 | 	sub	fp, #8
13e7c                 | LR__1635
13e7c     A7 12 02 F6 | 	mov	arg01, fp
13e80     38 74 BF FD | 	call	#_push
13e84     A7 F0 03 F6 | 	mov	ptra, fp
13e88     B2 00 A0 FD | 	call	#popregs_
13e8c                 | _do_power_ret
13e8c     2D 00 64 FD | 	ret
13e90                 | 
13e90                 | ' 
13e90                 | ' 
13e90                 | ' sub do_eq
13e90                 | _do_eq
13e90     05 4A 05 F6 | 	mov	COUNT_, #5
13e94     A8 00 A0 FD | 	call	#pushregs_
13e98     18 F0 07 F1 | 	add	ptra, #24
13e9c     84 73 BF FD | 	call	#_pop
13ea0     FD 1E 02 F6 | 	mov	local01, result1
13ea4     FE 20 02 F6 | 	mov	local02, result2
13ea8     FF 22 02 F6 | 	mov	local03, result3
13eac     0C 4E 05 F1 | 	add	fp, #12
13eb0     A7 1E 62 FC | 	wrlong	local01, fp
13eb4     04 4E 05 F1 | 	add	fp, #4
13eb8     A7 20 62 FC | 	wrlong	local02, fp
13ebc     04 4E 05 F1 | 	add	fp, #4
13ec0     A7 22 62 FC | 	wrlong	local03, fp
13ec4     14 4E 85 F1 | 	sub	fp, #20
13ec8     58 73 BF FD | 	call	#_pop
13ecc     FF 22 02 F6 | 	mov	local03, result3
13ed0     A7 FA 61 FC | 	wrlong	result1, fp
13ed4     04 4E 05 F1 | 	add	fp, #4
13ed8     A7 FC 61 FC | 	wrlong	result2, fp
13edc     04 4E 05 F1 | 	add	fp, #4
13ee0     A7 22 62 FC | 	wrlong	local03, fp
13ee4                 | ' t2=pop()
13ee4                 | ' t1=pop()
13ee4                 | ' 
13ee4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
13ee4     08 4E 85 F1 | 	sub	fp, #8
13ee8     1F 22 0E F2 | 	cmp	local03, #31 wz
13eec     14 4E 05 A1 |  if_e	add	fp, #20
13ef0     A7 24 02 AB |  if_e	rdlong	local04, fp
13ef4     14 4E 85 A1 |  if_e	sub	fp, #20
13ef8     12 23 02 A6 |  if_e	mov	local03, local04
13efc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13f00     28 00 90 5D |  if_ne	jmp	#LR__1640
13f04     00 1E 06 F6 | 	mov	local01, #0
13f08     A7 12 02 FB | 	rdlong	arg01, fp
13f0c     0C 4E 05 F1 | 	add	fp, #12
13f10     A7 14 02 FB | 	rdlong	arg02, fp
13f14     0C 4E 85 F1 | 	sub	fp, #12
13f18     48 CA B0 FD | 	call	#__system___string_cmp
13f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
13f20     00 1E 26 A6 |  if_e	not	local01, #0
13f24     A7 1E 62 FC | 	wrlong	local01, fp
13f28     1C 04 90 FD | 	jmp	#LR__1653
13f2c                 | LR__1640
13f2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
13f2c     08 4E 05 F1 | 	add	fp, #8
13f30     A7 1E 02 FB | 	rdlong	local01, fp
13f34     08 4E 85 F1 | 	sub	fp, #8
13f38     1E 1E 0E F2 | 	cmp	local01, #30 wz
13f3c     14 4E 05 A1 |  if_e	add	fp, #20
13f40     A7 24 02 AB |  if_e	rdlong	local04, fp
13f44     14 4E 85 A1 |  if_e	sub	fp, #20
13f48     12 23 02 A6 |  if_e	mov	local03, local04
13f4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13f50     2C 00 90 5D |  if_ne	jmp	#LR__1641
13f54     00 1E 06 F6 | 	mov	local01, #0
13f58     A7 12 02 FB | 	rdlong	arg01, fp
13f5c     0C 4E 05 F1 | 	add	fp, #12
13f60     A7 14 02 FB | 	rdlong	arg02, fp
13f64     0C 4E 85 F1 | 	sub	fp, #12
13f68     01 16 06 F6 | 	mov	arg03, #1
13f6c     B4 F9 B0 FD | 	call	#__system___float_cmp
13f70     00 FA 0D F2 | 	cmp	result1, #0 wz
13f74     00 1E 26 A6 |  if_e	not	local01, #0
13f78     A7 1E 62 FC | 	wrlong	local01, fp
13f7c     C8 03 90 FD | 	jmp	#LR__1653
13f80                 | LR__1641
13f80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
13f80     08 4E 05 F1 | 	add	fp, #8
13f84     A7 1E 02 FB | 	rdlong	local01, fp
13f88     08 4E 85 F1 | 	sub	fp, #8
13f8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
13f90     14 4E 05 A1 |  if_e	add	fp, #20
13f94     A7 24 02 AB |  if_e	rdlong	local04, fp
13f98     14 4E 85 A1 |  if_e	sub	fp, #20
13f9c     12 23 02 A6 |  if_e	mov	local03, local04
13fa0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13fa4     48 00 90 5D |  if_ne	jmp	#LR__1642
13fa8     00 1E 06 F6 | 	mov	local01, #0
13fac     A7 20 02 FB | 	rdlong	local02, fp
13fb0     0C 4E 05 F1 | 	add	fp, #12
13fb4     A7 12 02 FB | 	rdlong	arg01, fp
13fb8     0C 4E 85 F1 | 	sub	fp, #12
13fbc     09 13 52 F6 | 	abs	arg01, arg01 wc
13fc0     1F 26 C6 C9 |  if_b	decod	local05, #31
13fc4     00 26 06 36 |  if_ae	mov	local05, #0
13fc8     20 F1 B0 FD | 	call	#__system___float_fromuns
13fcc     13 FB 61 F5 | 	xor	result1, local05
13fd0     FD 14 02 F6 | 	mov	arg02, result1
13fd4     10 13 02 F6 | 	mov	arg01, local02
13fd8     01 16 06 F6 | 	mov	arg03, #1
13fdc     44 F9 B0 FD | 	call	#__system___float_cmp
13fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
13fe4     00 1E 26 A6 |  if_e	not	local01, #0
13fe8     A7 1E 62 FC | 	wrlong	local01, fp
13fec     58 03 90 FD | 	jmp	#LR__1653
13ff0                 | LR__1642
13ff0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
13ff0     08 4E 05 F1 | 	add	fp, #8
13ff4     A7 1E 02 FB | 	rdlong	local01, fp
13ff8     08 4E 85 F1 | 	sub	fp, #8
13ffc     1E 1E 0E F2 | 	cmp	local01, #30 wz
14000     14 4E 05 A1 |  if_e	add	fp, #20
14004     A7 24 02 AB |  if_e	rdlong	local04, fp
14008     14 4E 85 A1 |  if_e	sub	fp, #20
1400c     12 23 02 A6 |  if_e	mov	local03, local04
14010     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14014     38 00 90 5D |  if_ne	jmp	#LR__1643
14018     00 1E 06 F6 | 	mov	local01, #0
1401c     A7 20 02 FB | 	rdlong	local02, fp
14020     0C 4E 05 F1 | 	add	fp, #12
14024     A7 12 02 FB | 	rdlong	arg01, fp
14028     0C 4E 85 F1 | 	sub	fp, #12
1402c     BC F0 B0 FD | 	call	#__system___float_fromuns
14030     FD 14 02 F6 | 	mov	arg02, result1
14034     10 13 02 F6 | 	mov	arg01, local02
14038     01 16 06 F6 | 	mov	arg03, #1
1403c     E4 F8 B0 FD | 	call	#__system___float_cmp
14040     00 FA 0D F2 | 	cmp	result1, #0 wz
14044     00 1E 26 A6 |  if_e	not	local01, #0
14048     A7 1E 62 FC | 	wrlong	local01, fp
1404c     F8 02 90 FD | 	jmp	#LR__1653
14050                 | LR__1643
14050                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
14050     08 4E 05 F1 | 	add	fp, #8
14054     A7 1E 02 FB | 	rdlong	local01, fp
14058     08 4E 85 F1 | 	sub	fp, #8
1405c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14060     14 4E 05 A1 |  if_e	add	fp, #20
14064     A7 24 02 AB |  if_e	rdlong	local04, fp
14068     14 4E 85 A1 |  if_e	sub	fp, #20
1406c     12 23 02 A6 |  if_e	mov	local03, local04
14070     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14074     44 00 90 5D |  if_ne	jmp	#LR__1644
14078     00 1E 06 F6 | 	mov	local01, #0
1407c     A7 12 02 FB | 	rdlong	arg01, fp
14080     09 13 52 F6 | 	abs	arg01, arg01 wc
14084     1F 26 C6 C9 |  if_b	decod	local05, #31
14088     00 26 06 36 |  if_ae	mov	local05, #0
1408c     5C F0 B0 FD | 	call	#__system___float_fromuns
14090     13 FB 61 F5 | 	xor	result1, local05
14094     FD 12 02 F6 | 	mov	arg01, result1
14098     0C 4E 05 F1 | 	add	fp, #12
1409c     A7 14 02 FB | 	rdlong	arg02, fp
140a0     0C 4E 85 F1 | 	sub	fp, #12
140a4     01 16 06 F6 | 	mov	arg03, #1
140a8     78 F8 B0 FD | 	call	#__system___float_cmp
140ac     00 FA 0D F2 | 	cmp	result1, #0 wz
140b0     00 1E 26 A6 |  if_e	not	local01, #0
140b4     A7 1E 62 FC | 	wrlong	local01, fp
140b8     8C 02 90 FD | 	jmp	#LR__1653
140bc                 | LR__1644
140bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
140bc     08 4E 05 F1 | 	add	fp, #8
140c0     A7 1E 02 FB | 	rdlong	local01, fp
140c4     08 4E 85 F1 | 	sub	fp, #8
140c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
140cc     14 4E 05 A1 |  if_e	add	fp, #20
140d0     A7 24 02 AB |  if_e	rdlong	local04, fp
140d4     14 4E 85 A1 |  if_e	sub	fp, #20
140d8     12 23 02 A6 |  if_e	mov	local03, local04
140dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
140e0     24 00 90 5D |  if_ne	jmp	#LR__1645
140e4     00 1E 06 F6 | 	mov	local01, #0
140e8     A7 20 02 FB | 	rdlong	local02, fp
140ec     0C 4E 05 F1 | 	add	fp, #12
140f0     A7 22 02 FB | 	rdlong	local03, fp
140f4     0C 4E 85 F1 | 	sub	fp, #12
140f8     11 21 0A F2 | 	cmp	local02, local03 wz
140fc     01 1E 66 A6 |  if_e	neg	local01, #1
14100     A7 1E 62 FC | 	wrlong	local01, fp
14104     40 02 90 FD | 	jmp	#LR__1653
14108                 | LR__1645
14108                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
14108     08 4E 05 F1 | 	add	fp, #8
1410c     A7 1E 02 FB | 	rdlong	local01, fp
14110     08 4E 85 F1 | 	sub	fp, #8
14114     1C 1E 0E F2 | 	cmp	local01, #28 wz
14118     14 4E 05 A1 |  if_e	add	fp, #20
1411c     A7 24 02 AB |  if_e	rdlong	local04, fp
14120     14 4E 85 A1 |  if_e	sub	fp, #20
14124     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14128     24 00 90 5D |  if_ne	jmp	#LR__1646
1412c     00 1E 06 F6 | 	mov	local01, #0
14130     A7 20 02 FB | 	rdlong	local02, fp
14134     0C 4E 05 F1 | 	add	fp, #12
14138     A7 22 02 FB | 	rdlong	local03, fp
1413c     0C 4E 85 F1 | 	sub	fp, #12
14140     11 21 0A F2 | 	cmp	local02, local03 wz
14144     01 1E 66 A6 |  if_e	neg	local01, #1
14148     A7 1E 62 FC | 	wrlong	local01, fp
1414c     F8 01 90 FD | 	jmp	#LR__1653
14150                 | LR__1646
14150                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
14150     08 4E 05 F1 | 	add	fp, #8
14154     A7 1E 02 FB | 	rdlong	local01, fp
14158     08 4E 85 F1 | 	sub	fp, #8
1415c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14160     14 4E 05 A1 |  if_e	add	fp, #20
14164     A7 22 02 AB |  if_e	rdlong	local03, fp
14168     14 4E 85 A1 |  if_e	sub	fp, #20
1416c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14170     34 00 90 5D |  if_ne	jmp	#LR__1647
14174     00 1E 06 F6 | 	mov	local01, #0
14178     A7 12 02 FB | 	rdlong	arg01, fp
1417c     6C EF B0 FD | 	call	#__system___float_fromuns
14180     FD 12 02 F6 | 	mov	arg01, result1
14184     0C 4E 05 F1 | 	add	fp, #12
14188     A7 14 02 FB | 	rdlong	arg02, fp
1418c     0C 4E 85 F1 | 	sub	fp, #12
14190     01 16 06 F6 | 	mov	arg03, #1
14194     8C F7 B0 FD | 	call	#__system___float_cmp
14198     00 FA 0D F2 | 	cmp	result1, #0 wz
1419c     00 1E 26 A6 |  if_e	not	local01, #0
141a0     A7 1E 62 FC | 	wrlong	local01, fp
141a4     A0 01 90 FD | 	jmp	#LR__1653
141a8                 | LR__1647
141a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
141a8     08 4E 05 F1 | 	add	fp, #8
141ac     A7 1E 02 FB | 	rdlong	local01, fp
141b0     08 4E 85 F1 | 	sub	fp, #8
141b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
141b8     14 4E 05 A1 |  if_e	add	fp, #20
141bc     A7 22 02 AB |  if_e	rdlong	local03, fp
141c0     14 4E 85 A1 |  if_e	sub	fp, #20
141c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
141c8     24 00 90 5D |  if_ne	jmp	#LR__1648
141cc     00 1E 06 F6 | 	mov	local01, #0
141d0     A7 20 02 FB | 	rdlong	local02, fp
141d4     0C 4E 05 F1 | 	add	fp, #12
141d8     A7 22 02 FB | 	rdlong	local03, fp
141dc     0C 4E 85 F1 | 	sub	fp, #12
141e0     11 21 0A F2 | 	cmp	local02, local03 wz
141e4     01 1E 66 A6 |  if_e	neg	local01, #1
141e8     A7 1E 62 FC | 	wrlong	local01, fp
141ec     58 01 90 FD | 	jmp	#LR__1653
141f0                 | LR__1648
141f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
141f0     08 4E 05 F1 | 	add	fp, #8
141f4     A7 1E 02 FB | 	rdlong	local01, fp
141f8     08 4E 85 F1 | 	sub	fp, #8
141fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
14200     14 4E 05 A1 |  if_e	add	fp, #20
14204     A7 22 02 AB |  if_e	rdlong	local03, fp
14208     14 4E 85 A1 |  if_e	sub	fp, #20
1420c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14210     24 00 90 5D |  if_ne	jmp	#LR__1649
14214     00 1E 06 F6 | 	mov	local01, #0
14218     A7 20 02 FB | 	rdlong	local02, fp
1421c     0C 4E 05 F1 | 	add	fp, #12
14220     A7 22 02 FB | 	rdlong	local03, fp
14224     0C 4E 85 F1 | 	sub	fp, #12
14228     11 21 0A F2 | 	cmp	local02, local03 wz
1422c     01 1E 66 A6 |  if_e	neg	local01, #1
14230     A7 1E 62 FC | 	wrlong	local01, fp
14234     10 01 90 FD | 	jmp	#LR__1653
14238                 | LR__1649
14238                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
14238     08 4E 05 F1 | 	add	fp, #8
1423c     A7 1E 02 FB | 	rdlong	local01, fp
14240     08 4E 85 F1 | 	sub	fp, #8
14244     2B 1E 0E F2 | 	cmp	local01, #43 wz
14248     14 4E 05 A1 |  if_e	add	fp, #20
1424c     A7 22 02 AB |  if_e	rdlong	local03, fp
14250     14 4E 85 A1 |  if_e	sub	fp, #20
14254     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14258     30 00 90 5D |  if_ne	jmp	#LR__1650
1425c     00 1E 06 F6 | 	mov	local01, #0
14260     A7 12 02 FB | 	rdlong	arg01, fp
14264     34 71 BF FD | 	call	#_convertstring
14268     FD 12 02 F6 | 	mov	arg01, result1
1426c     0C 4E 05 F1 | 	add	fp, #12
14270     A7 14 02 FB | 	rdlong	arg02, fp
14274     0C 4E 85 F1 | 	sub	fp, #12
14278     E8 C6 B0 FD | 	call	#__system___string_cmp
1427c     00 FA 0D F2 | 	cmp	result1, #0 wz
14280     00 1E 26 A6 |  if_e	not	local01, #0
14284     A7 1E 62 FC | 	wrlong	local01, fp
14288     BC 00 90 FD | 	jmp	#LR__1653
1428c                 | LR__1650
1428c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1428c     08 4E 05 F1 | 	add	fp, #8
14290     A7 1E 02 FB | 	rdlong	local01, fp
14294     08 4E 85 F1 | 	sub	fp, #8
14298     1F 1E 0E F2 | 	cmp	local01, #31 wz
1429c     14 4E 05 A1 |  if_e	add	fp, #20
142a0     A7 22 02 AB |  if_e	rdlong	local03, fp
142a4     14 4E 85 A1 |  if_e	sub	fp, #20
142a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
142ac     34 00 90 5D |  if_ne	jmp	#LR__1651
142b0     00 1E 06 F6 | 	mov	local01, #0
142b4     A7 20 02 FB | 	rdlong	local02, fp
142b8     0C 4E 05 F1 | 	add	fp, #12
142bc     A7 12 02 FB | 	rdlong	arg01, fp
142c0     0C 4E 85 F1 | 	sub	fp, #12
142c4     D4 70 BF FD | 	call	#_convertstring
142c8     FD 14 02 F6 | 	mov	arg02, result1
142cc     10 13 02 F6 | 	mov	arg01, local02
142d0     90 C6 B0 FD | 	call	#__system___string_cmp
142d4     00 FA 0D F2 | 	cmp	result1, #0 wz
142d8     00 1E 26 A6 |  if_e	not	local01, #0
142dc     A7 1E 62 FC | 	wrlong	local01, fp
142e0     64 00 90 FD | 	jmp	#LR__1653
142e4                 | LR__1651
142e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
142e4     08 4E 05 F1 | 	add	fp, #8
142e8     A7 1E 02 FB | 	rdlong	local01, fp
142ec     08 4E 85 F1 | 	sub	fp, #8
142f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
142f4     14 4E 05 A1 |  if_e	add	fp, #20
142f8     A7 22 02 AB |  if_e	rdlong	local03, fp
142fc     14 4E 85 A1 |  if_e	sub	fp, #20
14300     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14304     3C 00 90 5D |  if_ne	jmp	#LR__1652
14308     00 1E 06 F6 | 	mov	local01, #0
1430c     A7 12 02 FB | 	rdlong	arg01, fp
14310     88 70 BF FD | 	call	#_convertstring
14314     FD 20 02 F6 | 	mov	local02, result1
14318     0C 4E 05 F1 | 	add	fp, #12
1431c     A7 12 02 FB | 	rdlong	arg01, fp
14320     0C 4E 85 F1 | 	sub	fp, #12
14324     74 70 BF FD | 	call	#_convertstring
14328     FD 14 02 F6 | 	mov	arg02, result1
1432c     10 13 02 F6 | 	mov	arg01, local02
14330     30 C6 B0 FD | 	call	#__system___string_cmp
14334     00 FA 0D F2 | 	cmp	result1, #0 wz
14338     00 1E 26 A6 |  if_e	not	local01, #0
1433c     A7 1E 62 FC | 	wrlong	local01, fp
14340     04 00 90 FD | 	jmp	#LR__1653
14344                 | LR__1652
14344     A7 00 68 FC | 	wrlong	#0, fp
14348                 | LR__1653
14348     08 4E 05 F1 | 	add	fp, #8
1434c     A7 38 68 FC | 	wrlong	#28, fp
14350     08 4E 85 F1 | 	sub	fp, #8
14354     A7 12 02 F6 | 	mov	arg01, fp
14358     60 6F BF FD | 	call	#_push
1435c     A7 F0 03 F6 | 	mov	ptra, fp
14360     B2 00 A0 FD | 	call	#popregs_
14364                 | _do_eq_ret
14364     2D 00 64 FD | 	ret
14368                 | 
14368                 | ' 
14368                 | ' sub do_gt
14368                 | _do_gt
14368     05 4A 05 F6 | 	mov	COUNT_, #5
1436c     A8 00 A0 FD | 	call	#pushregs_
14370     18 F0 07 F1 | 	add	ptra, #24
14374     AC 6E BF FD | 	call	#_pop
14378     FD 1E 02 F6 | 	mov	local01, result1
1437c     FE 20 02 F6 | 	mov	local02, result2
14380     FF 22 02 F6 | 	mov	local03, result3
14384     0C 4E 05 F1 | 	add	fp, #12
14388     A7 1E 62 FC | 	wrlong	local01, fp
1438c     04 4E 05 F1 | 	add	fp, #4
14390     A7 20 62 FC | 	wrlong	local02, fp
14394     04 4E 05 F1 | 	add	fp, #4
14398     A7 22 62 FC | 	wrlong	local03, fp
1439c     14 4E 85 F1 | 	sub	fp, #20
143a0     80 6E BF FD | 	call	#_pop
143a4     FF 22 02 F6 | 	mov	local03, result3
143a8     A7 FA 61 FC | 	wrlong	result1, fp
143ac     04 4E 05 F1 | 	add	fp, #4
143b0     A7 FC 61 FC | 	wrlong	result2, fp
143b4     04 4E 05 F1 | 	add	fp, #4
143b8     A7 22 62 FC | 	wrlong	local03, fp
143bc                 | ' t2=pop()
143bc                 | ' t1=pop()
143bc                 | ' 
143bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
143bc     08 4E 85 F1 | 	sub	fp, #8
143c0     1F 22 0E F2 | 	cmp	local03, #31 wz
143c4     14 4E 05 A1 |  if_e	add	fp, #20
143c8     A7 24 02 AB |  if_e	rdlong	local04, fp
143cc     14 4E 85 A1 |  if_e	sub	fp, #20
143d0     12 23 02 A6 |  if_e	mov	local03, local04
143d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
143d8     28 00 90 5D |  if_ne	jmp	#LR__1660
143dc     00 1E 06 F6 | 	mov	local01, #0
143e0     A7 12 02 FB | 	rdlong	arg01, fp
143e4     0C 4E 05 F1 | 	add	fp, #12
143e8     A7 14 02 FB | 	rdlong	arg02, fp
143ec     0C 4E 85 F1 | 	sub	fp, #12
143f0     70 C5 B0 FD | 	call	#__system___string_cmp
143f4     01 FA 55 F2 | 	cmps	result1, #1 wc
143f8     00 1E 26 36 |  if_ae	not	local01, #0
143fc     A7 1E 62 FC | 	wrlong	local01, fp
14400     1C 04 90 FD | 	jmp	#LR__1673
14404                 | LR__1660
14404                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
14404     08 4E 05 F1 | 	add	fp, #8
14408     A7 1E 02 FB | 	rdlong	local01, fp
1440c     08 4E 85 F1 | 	sub	fp, #8
14410     1E 1E 0E F2 | 	cmp	local01, #30 wz
14414     14 4E 05 A1 |  if_e	add	fp, #20
14418     A7 24 02 AB |  if_e	rdlong	local04, fp
1441c     14 4E 85 A1 |  if_e	sub	fp, #20
14420     12 23 02 A6 |  if_e	mov	local03, local04
14424     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14428     2C 00 90 5D |  if_ne	jmp	#LR__1661
1442c     00 1E 06 F6 | 	mov	local01, #0
14430     A7 12 02 FB | 	rdlong	arg01, fp
14434     0C 4E 05 F1 | 	add	fp, #12
14438     A7 14 02 FB | 	rdlong	arg02, fp
1443c     0C 4E 85 F1 | 	sub	fp, #12
14440     01 16 66 F6 | 	neg	arg03, #1
14444     DC F4 B0 FD | 	call	#__system___float_cmp
14448     01 FA 55 F2 | 	cmps	result1, #1 wc
1444c     00 1E 26 36 |  if_ae	not	local01, #0
14450     A7 1E 62 FC | 	wrlong	local01, fp
14454     C8 03 90 FD | 	jmp	#LR__1673
14458                 | LR__1661
14458                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
14458     08 4E 05 F1 | 	add	fp, #8
1445c     A7 1E 02 FB | 	rdlong	local01, fp
14460     08 4E 85 F1 | 	sub	fp, #8
14464     1E 1E 0E F2 | 	cmp	local01, #30 wz
14468     14 4E 05 A1 |  if_e	add	fp, #20
1446c     A7 24 02 AB |  if_e	rdlong	local04, fp
14470     14 4E 85 A1 |  if_e	sub	fp, #20
14474     12 23 02 A6 |  if_e	mov	local03, local04
14478     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1447c     48 00 90 5D |  if_ne	jmp	#LR__1662
14480     00 1E 06 F6 | 	mov	local01, #0
14484     A7 20 02 FB | 	rdlong	local02, fp
14488     0C 4E 05 F1 | 	add	fp, #12
1448c     A7 12 02 FB | 	rdlong	arg01, fp
14490     0C 4E 85 F1 | 	sub	fp, #12
14494     09 13 52 F6 | 	abs	arg01, arg01 wc
14498     1F 26 C6 C9 |  if_b	decod	local05, #31
1449c     00 26 06 36 |  if_ae	mov	local05, #0
144a0     48 EC B0 FD | 	call	#__system___float_fromuns
144a4     13 FB 61 F5 | 	xor	result1, local05
144a8     FD 14 02 F6 | 	mov	arg02, result1
144ac     10 13 02 F6 | 	mov	arg01, local02
144b0     01 16 66 F6 | 	neg	arg03, #1
144b4     6C F4 B0 FD | 	call	#__system___float_cmp
144b8     01 FA 55 F2 | 	cmps	result1, #1 wc
144bc     00 1E 26 36 |  if_ae	not	local01, #0
144c0     A7 1E 62 FC | 	wrlong	local01, fp
144c4     58 03 90 FD | 	jmp	#LR__1673
144c8                 | LR__1662
144c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
144c8     08 4E 05 F1 | 	add	fp, #8
144cc     A7 1E 02 FB | 	rdlong	local01, fp
144d0     08 4E 85 F1 | 	sub	fp, #8
144d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
144d8     14 4E 05 A1 |  if_e	add	fp, #20
144dc     A7 24 02 AB |  if_e	rdlong	local04, fp
144e0     14 4E 85 A1 |  if_e	sub	fp, #20
144e4     12 23 02 A6 |  if_e	mov	local03, local04
144e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
144ec     38 00 90 5D |  if_ne	jmp	#LR__1663
144f0     00 1E 06 F6 | 	mov	local01, #0
144f4     A7 20 02 FB | 	rdlong	local02, fp
144f8     0C 4E 05 F1 | 	add	fp, #12
144fc     A7 12 02 FB | 	rdlong	arg01, fp
14500     0C 4E 85 F1 | 	sub	fp, #12
14504     E4 EB B0 FD | 	call	#__system___float_fromuns
14508     FD 14 02 F6 | 	mov	arg02, result1
1450c     10 13 02 F6 | 	mov	arg01, local02
14510     01 16 66 F6 | 	neg	arg03, #1
14514     0C F4 B0 FD | 	call	#__system___float_cmp
14518     01 FA 55 F2 | 	cmps	result1, #1 wc
1451c     00 1E 26 36 |  if_ae	not	local01, #0
14520     A7 1E 62 FC | 	wrlong	local01, fp
14524     F8 02 90 FD | 	jmp	#LR__1673
14528                 | LR__1663
14528                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
14528     08 4E 05 F1 | 	add	fp, #8
1452c     A7 1E 02 FB | 	rdlong	local01, fp
14530     08 4E 85 F1 | 	sub	fp, #8
14534     1C 1E 0E F2 | 	cmp	local01, #28 wz
14538     14 4E 05 A1 |  if_e	add	fp, #20
1453c     A7 24 02 AB |  if_e	rdlong	local04, fp
14540     14 4E 85 A1 |  if_e	sub	fp, #20
14544     12 23 02 A6 |  if_e	mov	local03, local04
14548     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1454c     44 00 90 5D |  if_ne	jmp	#LR__1664
14550     00 1E 06 F6 | 	mov	local01, #0
14554     A7 12 02 FB | 	rdlong	arg01, fp
14558     09 13 52 F6 | 	abs	arg01, arg01 wc
1455c     1F 26 C6 C9 |  if_b	decod	local05, #31
14560     00 26 06 36 |  if_ae	mov	local05, #0
14564     84 EB B0 FD | 	call	#__system___float_fromuns
14568     13 FB 61 F5 | 	xor	result1, local05
1456c     FD 12 02 F6 | 	mov	arg01, result1
14570     0C 4E 05 F1 | 	add	fp, #12
14574     A7 14 02 FB | 	rdlong	arg02, fp
14578     0C 4E 85 F1 | 	sub	fp, #12
1457c     01 16 66 F6 | 	neg	arg03, #1
14580     A0 F3 B0 FD | 	call	#__system___float_cmp
14584     01 FA 55 F2 | 	cmps	result1, #1 wc
14588     00 1E 26 36 |  if_ae	not	local01, #0
1458c     A7 1E 62 FC | 	wrlong	local01, fp
14590     8C 02 90 FD | 	jmp	#LR__1673
14594                 | LR__1664
14594                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
14594     08 4E 05 F1 | 	add	fp, #8
14598     A7 1E 02 FB | 	rdlong	local01, fp
1459c     08 4E 85 F1 | 	sub	fp, #8
145a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
145a4     14 4E 05 A1 |  if_e	add	fp, #20
145a8     A7 24 02 AB |  if_e	rdlong	local04, fp
145ac     14 4E 85 A1 |  if_e	sub	fp, #20
145b0     12 23 02 A6 |  if_e	mov	local03, local04
145b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
145b8     24 00 90 5D |  if_ne	jmp	#LR__1665
145bc     00 1E 06 F6 | 	mov	local01, #0
145c0     A7 20 02 FB | 	rdlong	local02, fp
145c4     0C 4E 05 F1 | 	add	fp, #12
145c8     A7 22 02 FB | 	rdlong	local03, fp
145cc     0C 4E 85 F1 | 	sub	fp, #12
145d0     11 21 5A F2 | 	cmps	local02, local03 wcz
145d4     01 1E 66 16 |  if_a	neg	local01, #1
145d8     A7 1E 62 FC | 	wrlong	local01, fp
145dc     40 02 90 FD | 	jmp	#LR__1673
145e0                 | LR__1665
145e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
145e0     08 4E 05 F1 | 	add	fp, #8
145e4     A7 1E 02 FB | 	rdlong	local01, fp
145e8     08 4E 85 F1 | 	sub	fp, #8
145ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
145f0     14 4E 05 A1 |  if_e	add	fp, #20
145f4     A7 24 02 AB |  if_e	rdlong	local04, fp
145f8     14 4E 85 A1 |  if_e	sub	fp, #20
145fc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14600     24 00 90 5D |  if_ne	jmp	#LR__1666
14604     00 1E 06 F6 | 	mov	local01, #0
14608     A7 20 02 FB | 	rdlong	local02, fp
1460c     0C 4E 05 F1 | 	add	fp, #12
14610     A7 22 02 FB | 	rdlong	local03, fp
14614     0C 4E 85 F1 | 	sub	fp, #12
14618     11 21 5A F2 | 	cmps	local02, local03 wcz
1461c     01 1E 66 16 |  if_a	neg	local01, #1
14620     A7 1E 62 FC | 	wrlong	local01, fp
14624     F8 01 90 FD | 	jmp	#LR__1673
14628                 | LR__1666
14628                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
14628     08 4E 05 F1 | 	add	fp, #8
1462c     A7 1E 02 FB | 	rdlong	local01, fp
14630     08 4E 85 F1 | 	sub	fp, #8
14634     1D 1E 0E F2 | 	cmp	local01, #29 wz
14638     14 4E 05 A1 |  if_e	add	fp, #20
1463c     A7 22 02 AB |  if_e	rdlong	local03, fp
14640     14 4E 85 A1 |  if_e	sub	fp, #20
14644     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14648     34 00 90 5D |  if_ne	jmp	#LR__1667
1464c     00 1E 06 F6 | 	mov	local01, #0
14650     A7 12 02 FB | 	rdlong	arg01, fp
14654     94 EA B0 FD | 	call	#__system___float_fromuns
14658     FD 12 02 F6 | 	mov	arg01, result1
1465c     0C 4E 05 F1 | 	add	fp, #12
14660     A7 14 02 FB | 	rdlong	arg02, fp
14664     0C 4E 85 F1 | 	sub	fp, #12
14668     01 16 66 F6 | 	neg	arg03, #1
1466c     B4 F2 B0 FD | 	call	#__system___float_cmp
14670     01 FA 55 F2 | 	cmps	result1, #1 wc
14674     00 1E 26 36 |  if_ae	not	local01, #0
14678     A7 1E 62 FC | 	wrlong	local01, fp
1467c     A0 01 90 FD | 	jmp	#LR__1673
14680                 | LR__1667
14680                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
14680     08 4E 05 F1 | 	add	fp, #8
14684     A7 1E 02 FB | 	rdlong	local01, fp
14688     08 4E 85 F1 | 	sub	fp, #8
1468c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14690     14 4E 05 A1 |  if_e	add	fp, #20
14694     A7 22 02 AB |  if_e	rdlong	local03, fp
14698     14 4E 85 A1 |  if_e	sub	fp, #20
1469c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
146a0     24 00 90 5D |  if_ne	jmp	#LR__1668
146a4     00 1E 06 F6 | 	mov	local01, #0
146a8     A7 20 02 FB | 	rdlong	local02, fp
146ac     0C 4E 05 F1 | 	add	fp, #12
146b0     A7 22 02 FB | 	rdlong	local03, fp
146b4     0C 4E 85 F1 | 	sub	fp, #12
146b8     11 21 5A F2 | 	cmps	local02, local03 wcz
146bc     01 1E 66 16 |  if_a	neg	local01, #1
146c0     A7 1E 62 FC | 	wrlong	local01, fp
146c4     58 01 90 FD | 	jmp	#LR__1673
146c8                 | LR__1668
146c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
146c8     08 4E 05 F1 | 	add	fp, #8
146cc     A7 1E 02 FB | 	rdlong	local01, fp
146d0     08 4E 85 F1 | 	sub	fp, #8
146d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
146d8     14 4E 05 A1 |  if_e	add	fp, #20
146dc     A7 22 02 AB |  if_e	rdlong	local03, fp
146e0     14 4E 85 A1 |  if_e	sub	fp, #20
146e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
146e8     24 00 90 5D |  if_ne	jmp	#LR__1669
146ec     00 1E 06 F6 | 	mov	local01, #0
146f0     A7 20 02 FB | 	rdlong	local02, fp
146f4     0C 4E 05 F1 | 	add	fp, #12
146f8     A7 22 02 FB | 	rdlong	local03, fp
146fc     0C 4E 85 F1 | 	sub	fp, #12
14700     11 21 1A F2 | 	cmp	local02, local03 wcz
14704     01 1E 66 16 |  if_a	neg	local01, #1
14708     A7 1E 62 FC | 	wrlong	local01, fp
1470c     10 01 90 FD | 	jmp	#LR__1673
14710                 | LR__1669
14710                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
14710     08 4E 05 F1 | 	add	fp, #8
14714     A7 1E 02 FB | 	rdlong	local01, fp
14718     08 4E 85 F1 | 	sub	fp, #8
1471c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14720     14 4E 05 A1 |  if_e	add	fp, #20
14724     A7 22 02 AB |  if_e	rdlong	local03, fp
14728     14 4E 85 A1 |  if_e	sub	fp, #20
1472c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14730     30 00 90 5D |  if_ne	jmp	#LR__1670
14734     00 1E 06 F6 | 	mov	local01, #0
14738     A7 12 02 FB | 	rdlong	arg01, fp
1473c     5C 6C BF FD | 	call	#_convertstring
14740     FD 12 02 F6 | 	mov	arg01, result1
14744     0C 4E 05 F1 | 	add	fp, #12
14748     A7 14 02 FB | 	rdlong	arg02, fp
1474c     0C 4E 85 F1 | 	sub	fp, #12
14750     10 C2 B0 FD | 	call	#__system___string_cmp
14754     01 FA 55 F2 | 	cmps	result1, #1 wc
14758     00 1E 26 36 |  if_ae	not	local01, #0
1475c     A7 1E 62 FC | 	wrlong	local01, fp
14760     BC 00 90 FD | 	jmp	#LR__1673
14764                 | LR__1670
14764                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
14764     08 4E 05 F1 | 	add	fp, #8
14768     A7 1E 02 FB | 	rdlong	local01, fp
1476c     08 4E 85 F1 | 	sub	fp, #8
14770     1F 1E 0E F2 | 	cmp	local01, #31 wz
14774     14 4E 05 A1 |  if_e	add	fp, #20
14778     A7 22 02 AB |  if_e	rdlong	local03, fp
1477c     14 4E 85 A1 |  if_e	sub	fp, #20
14780     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14784     34 00 90 5D |  if_ne	jmp	#LR__1671
14788     00 1E 06 F6 | 	mov	local01, #0
1478c     A7 20 02 FB | 	rdlong	local02, fp
14790     0C 4E 05 F1 | 	add	fp, #12
14794     A7 12 02 FB | 	rdlong	arg01, fp
14798     0C 4E 85 F1 | 	sub	fp, #12
1479c     FC 6B BF FD | 	call	#_convertstring
147a0     FD 14 02 F6 | 	mov	arg02, result1
147a4     10 13 02 F6 | 	mov	arg01, local02
147a8     B8 C1 B0 FD | 	call	#__system___string_cmp
147ac     01 FA 55 F2 | 	cmps	result1, #1 wc
147b0     00 1E 26 36 |  if_ae	not	local01, #0
147b4     A7 1E 62 FC | 	wrlong	local01, fp
147b8     64 00 90 FD | 	jmp	#LR__1673
147bc                 | LR__1671
147bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
147bc     08 4E 05 F1 | 	add	fp, #8
147c0     A7 1E 02 FB | 	rdlong	local01, fp
147c4     08 4E 85 F1 | 	sub	fp, #8
147c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
147cc     14 4E 05 A1 |  if_e	add	fp, #20
147d0     A7 22 02 AB |  if_e	rdlong	local03, fp
147d4     14 4E 85 A1 |  if_e	sub	fp, #20
147d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
147dc     3C 00 90 5D |  if_ne	jmp	#LR__1672
147e0     00 1E 06 F6 | 	mov	local01, #0
147e4     A7 12 02 FB | 	rdlong	arg01, fp
147e8     B0 6B BF FD | 	call	#_convertstring
147ec     FD 20 02 F6 | 	mov	local02, result1
147f0     0C 4E 05 F1 | 	add	fp, #12
147f4     A7 12 02 FB | 	rdlong	arg01, fp
147f8     0C 4E 85 F1 | 	sub	fp, #12
147fc     9C 6B BF FD | 	call	#_convertstring
14800     FD 14 02 F6 | 	mov	arg02, result1
14804     10 13 02 F6 | 	mov	arg01, local02
14808     58 C1 B0 FD | 	call	#__system___string_cmp
1480c     01 FA 55 F2 | 	cmps	result1, #1 wc
14810     00 1E 26 36 |  if_ae	not	local01, #0
14814     A7 1E 62 FC | 	wrlong	local01, fp
14818     04 00 90 FD | 	jmp	#LR__1673
1481c                 | LR__1672
1481c     A7 00 68 FC | 	wrlong	#0, fp
14820                 | LR__1673
14820     08 4E 05 F1 | 	add	fp, #8
14824     A7 38 68 FC | 	wrlong	#28, fp
14828     08 4E 85 F1 | 	sub	fp, #8
1482c     A7 12 02 F6 | 	mov	arg01, fp
14830     88 6A BF FD | 	call	#_push
14834     A7 F0 03 F6 | 	mov	ptra, fp
14838     B2 00 A0 FD | 	call	#popregs_
1483c                 | _do_gt_ret
1483c     2D 00 64 FD | 	ret
14840                 | 
14840                 | ' 
14840                 | ' sub do_lt
14840                 | _do_lt
14840     05 4A 05 F6 | 	mov	COUNT_, #5
14844     A8 00 A0 FD | 	call	#pushregs_
14848     18 F0 07 F1 | 	add	ptra, #24
1484c     D4 69 BF FD | 	call	#_pop
14850     FD 1E 02 F6 | 	mov	local01, result1
14854     FE 20 02 F6 | 	mov	local02, result2
14858     FF 22 02 F6 | 	mov	local03, result3
1485c     0C 4E 05 F1 | 	add	fp, #12
14860     A7 1E 62 FC | 	wrlong	local01, fp
14864     04 4E 05 F1 | 	add	fp, #4
14868     A7 20 62 FC | 	wrlong	local02, fp
1486c     04 4E 05 F1 | 	add	fp, #4
14870     A7 22 62 FC | 	wrlong	local03, fp
14874     14 4E 85 F1 | 	sub	fp, #20
14878     A8 69 BF FD | 	call	#_pop
1487c     FF 22 02 F6 | 	mov	local03, result3
14880     A7 FA 61 FC | 	wrlong	result1, fp
14884     04 4E 05 F1 | 	add	fp, #4
14888     A7 FC 61 FC | 	wrlong	result2, fp
1488c     04 4E 05 F1 | 	add	fp, #4
14890     A7 22 62 FC | 	wrlong	local03, fp
14894                 | ' t2=pop()
14894                 | ' t1=pop()
14894                 | ' 
14894                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
14894     08 4E 85 F1 | 	sub	fp, #8
14898     1F 22 0E F2 | 	cmp	local03, #31 wz
1489c     14 4E 05 A1 |  if_e	add	fp, #20
148a0     A7 24 02 AB |  if_e	rdlong	local04, fp
148a4     14 4E 85 A1 |  if_e	sub	fp, #20
148a8     12 23 02 A6 |  if_e	mov	local03, local04
148ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
148b0     28 00 90 5D |  if_ne	jmp	#LR__1680
148b4     00 1E 06 F6 | 	mov	local01, #0
148b8     A7 12 02 FB | 	rdlong	arg01, fp
148bc     0C 4E 05 F1 | 	add	fp, #12
148c0     A7 14 02 FB | 	rdlong	arg02, fp
148c4     0C 4E 85 F1 | 	sub	fp, #12
148c8     98 C0 B0 FD | 	call	#__system___string_cmp
148cc     00 FA 55 F2 | 	cmps	result1, #0 wc
148d0     00 1E 26 C6 |  if_b	not	local01, #0
148d4     A7 1E 62 FC | 	wrlong	local01, fp
148d8     0C 04 90 FD | 	jmp	#LR__1693
148dc                 | LR__1680
148dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
148dc     08 4E 05 F1 | 	add	fp, #8
148e0     A7 1E 02 FB | 	rdlong	local01, fp
148e4     08 4E 85 F1 | 	sub	fp, #8
148e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
148ec     14 4E 05 A1 |  if_e	add	fp, #20
148f0     A7 24 02 AB |  if_e	rdlong	local04, fp
148f4     14 4E 85 A1 |  if_e	sub	fp, #20
148f8     12 23 02 A6 |  if_e	mov	local03, local04
148fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14900     2C 00 90 5D |  if_ne	jmp	#LR__1681
14904     00 1E 06 F6 | 	mov	local01, #0
14908     A7 12 02 FB | 	rdlong	arg01, fp
1490c     0C 4E 05 F1 | 	add	fp, #12
14910     A7 14 02 FB | 	rdlong	arg02, fp
14914     0C 4E 85 F1 | 	sub	fp, #12
14918     01 16 06 F6 | 	mov	arg03, #1
1491c     04 F0 B0 FD | 	call	#__system___float_cmp
14920     00 FA 55 F2 | 	cmps	result1, #0 wc
14924     00 1E 26 C6 |  if_b	not	local01, #0
14928     A7 1E 62 FC | 	wrlong	local01, fp
1492c     B8 03 90 FD | 	jmp	#LR__1693
14930                 | LR__1681
14930                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
14930     08 4E 05 F1 | 	add	fp, #8
14934     A7 1E 02 FB | 	rdlong	local01, fp
14938     08 4E 85 F1 | 	sub	fp, #8
1493c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14940     14 4E 05 A1 |  if_e	add	fp, #20
14944     A7 24 02 AB |  if_e	rdlong	local04, fp
14948     14 4E 85 A1 |  if_e	sub	fp, #20
1494c     12 23 02 A6 |  if_e	mov	local03, local04
14950     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14954     48 00 90 5D |  if_ne	jmp	#LR__1682
14958     00 1E 06 F6 | 	mov	local01, #0
1495c     A7 20 02 FB | 	rdlong	local02, fp
14960     0C 4E 05 F1 | 	add	fp, #12
14964     A7 12 02 FB | 	rdlong	arg01, fp
14968     0C 4E 85 F1 | 	sub	fp, #12
1496c     09 13 52 F6 | 	abs	arg01, arg01 wc
14970     1F 26 C6 C9 |  if_b	decod	local05, #31
14974     00 26 06 36 |  if_ae	mov	local05, #0
14978     70 E7 B0 FD | 	call	#__system___float_fromuns
1497c     13 FB 61 F5 | 	xor	result1, local05
14980     FD 14 02 F6 | 	mov	arg02, result1
14984     10 13 02 F6 | 	mov	arg01, local02
14988     01 16 06 F6 | 	mov	arg03, #1
1498c     94 EF B0 FD | 	call	#__system___float_cmp
14990     00 FA 55 F2 | 	cmps	result1, #0 wc
14994     00 1E 26 C6 |  if_b	not	local01, #0
14998     A7 1E 62 FC | 	wrlong	local01, fp
1499c     48 03 90 FD | 	jmp	#LR__1693
149a0                 | LR__1682
149a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
149a0     08 4E 05 F1 | 	add	fp, #8
149a4     A7 1E 02 FB | 	rdlong	local01, fp
149a8     08 4E 85 F1 | 	sub	fp, #8
149ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
149b0     14 4E 05 A1 |  if_e	add	fp, #20
149b4     A7 24 02 AB |  if_e	rdlong	local04, fp
149b8     14 4E 85 A1 |  if_e	sub	fp, #20
149bc     12 23 02 A6 |  if_e	mov	local03, local04
149c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
149c4     38 00 90 5D |  if_ne	jmp	#LR__1683
149c8     00 1E 06 F6 | 	mov	local01, #0
149cc     A7 20 02 FB | 	rdlong	local02, fp
149d0     0C 4E 05 F1 | 	add	fp, #12
149d4     A7 12 02 FB | 	rdlong	arg01, fp
149d8     0C 4E 85 F1 | 	sub	fp, #12
149dc     0C E7 B0 FD | 	call	#__system___float_fromuns
149e0     FD 14 02 F6 | 	mov	arg02, result1
149e4     10 13 02 F6 | 	mov	arg01, local02
149e8     01 16 06 F6 | 	mov	arg03, #1
149ec     34 EF B0 FD | 	call	#__system___float_cmp
149f0     00 FA 55 F2 | 	cmps	result1, #0 wc
149f4     00 1E 26 C6 |  if_b	not	local01, #0
149f8     A7 1E 62 FC | 	wrlong	local01, fp
149fc     E8 02 90 FD | 	jmp	#LR__1693
14a00                 | LR__1683
14a00                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
14a00     08 4E 05 F1 | 	add	fp, #8
14a04     A7 1E 02 FB | 	rdlong	local01, fp
14a08     08 4E 85 F1 | 	sub	fp, #8
14a0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a10     14 4E 05 A1 |  if_e	add	fp, #20
14a14     A7 24 02 AB |  if_e	rdlong	local04, fp
14a18     14 4E 85 A1 |  if_e	sub	fp, #20
14a1c     12 23 02 A6 |  if_e	mov	local03, local04
14a20     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14a24     44 00 90 5D |  if_ne	jmp	#LR__1684
14a28     00 1E 06 F6 | 	mov	local01, #0
14a2c     A7 12 02 FB | 	rdlong	arg01, fp
14a30     09 13 52 F6 | 	abs	arg01, arg01 wc
14a34     1F 26 C6 C9 |  if_b	decod	local05, #31
14a38     00 26 06 36 |  if_ae	mov	local05, #0
14a3c     AC E6 B0 FD | 	call	#__system___float_fromuns
14a40     13 FB 61 F5 | 	xor	result1, local05
14a44     FD 12 02 F6 | 	mov	arg01, result1
14a48     0C 4E 05 F1 | 	add	fp, #12
14a4c     A7 14 02 FB | 	rdlong	arg02, fp
14a50     0C 4E 85 F1 | 	sub	fp, #12
14a54     01 16 06 F6 | 	mov	arg03, #1
14a58     C8 EE B0 FD | 	call	#__system___float_cmp
14a5c     00 FA 55 F2 | 	cmps	result1, #0 wc
14a60     00 1E 26 C6 |  if_b	not	local01, #0
14a64     A7 1E 62 FC | 	wrlong	local01, fp
14a68     7C 02 90 FD | 	jmp	#LR__1693
14a6c                 | LR__1684
14a6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14a6c     08 4E 05 F1 | 	add	fp, #8
14a70     A7 1E 02 FB | 	rdlong	local01, fp
14a74     08 4E 85 F1 | 	sub	fp, #8
14a78     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a7c     14 4E 05 A1 |  if_e	add	fp, #20
14a80     A7 24 02 AB |  if_e	rdlong	local04, fp
14a84     14 4E 85 A1 |  if_e	sub	fp, #20
14a88     12 23 02 A6 |  if_e	mov	local03, local04
14a8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14a90     20 00 90 5D |  if_ne	jmp	#LR__1685
14a94     A7 20 02 FB | 	rdlong	local02, fp
14a98     0C 4E 05 F1 | 	add	fp, #12
14a9c     A7 22 02 FB | 	rdlong	local03, fp
14aa0     0C 4E 85 F1 | 	sub	fp, #12
14aa4     11 21 52 F2 | 	cmps	local02, local03 wc
14aa8     0F 1F A2 F1 | 	subx	local01, local01
14aac     A7 1E 62 FC | 	wrlong	local01, fp
14ab0     34 02 90 FD | 	jmp	#LR__1693
14ab4                 | LR__1685
14ab4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
14ab4     08 4E 05 F1 | 	add	fp, #8
14ab8     A7 1E 02 FB | 	rdlong	local01, fp
14abc     08 4E 85 F1 | 	sub	fp, #8
14ac0     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ac4     14 4E 05 A1 |  if_e	add	fp, #20
14ac8     A7 24 02 AB |  if_e	rdlong	local04, fp
14acc     14 4E 85 A1 |  if_e	sub	fp, #20
14ad0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14ad4     20 00 90 5D |  if_ne	jmp	#LR__1686
14ad8     A7 20 02 FB | 	rdlong	local02, fp
14adc     0C 4E 05 F1 | 	add	fp, #12
14ae0     A7 22 02 FB | 	rdlong	local03, fp
14ae4     0C 4E 85 F1 | 	sub	fp, #12
14ae8     11 21 52 F2 | 	cmps	local02, local03 wc
14aec     0F 1F A2 F1 | 	subx	local01, local01
14af0     A7 1E 62 FC | 	wrlong	local01, fp
14af4     F0 01 90 FD | 	jmp	#LR__1693
14af8                 | LR__1686
14af8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
14af8     08 4E 05 F1 | 	add	fp, #8
14afc     A7 1E 02 FB | 	rdlong	local01, fp
14b00     08 4E 85 F1 | 	sub	fp, #8
14b04     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b08     14 4E 05 A1 |  if_e	add	fp, #20
14b0c     A7 22 02 AB |  if_e	rdlong	local03, fp
14b10     14 4E 85 A1 |  if_e	sub	fp, #20
14b14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14b18     34 00 90 5D |  if_ne	jmp	#LR__1687
14b1c     00 1E 06 F6 | 	mov	local01, #0
14b20     A7 12 02 FB | 	rdlong	arg01, fp
14b24     C4 E5 B0 FD | 	call	#__system___float_fromuns
14b28     FD 12 02 F6 | 	mov	arg01, result1
14b2c     0C 4E 05 F1 | 	add	fp, #12
14b30     A7 14 02 FB | 	rdlong	arg02, fp
14b34     0C 4E 85 F1 | 	sub	fp, #12
14b38     01 16 06 F6 | 	mov	arg03, #1
14b3c     E4 ED B0 FD | 	call	#__system___float_cmp
14b40     00 FA 55 F2 | 	cmps	result1, #0 wc
14b44     00 1E 26 C6 |  if_b	not	local01, #0
14b48     A7 1E 62 FC | 	wrlong	local01, fp
14b4c     98 01 90 FD | 	jmp	#LR__1693
14b50                 | LR__1687
14b50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14b50     08 4E 05 F1 | 	add	fp, #8
14b54     A7 1E 02 FB | 	rdlong	local01, fp
14b58     08 4E 85 F1 | 	sub	fp, #8
14b5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b60     14 4E 05 A1 |  if_e	add	fp, #20
14b64     A7 22 02 AB |  if_e	rdlong	local03, fp
14b68     14 4E 85 A1 |  if_e	sub	fp, #20
14b6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14b70     20 00 90 5D |  if_ne	jmp	#LR__1688
14b74     A7 20 02 FB | 	rdlong	local02, fp
14b78     0C 4E 05 F1 | 	add	fp, #12
14b7c     A7 22 02 FB | 	rdlong	local03, fp
14b80     0C 4E 85 F1 | 	sub	fp, #12
14b84     11 21 52 F2 | 	cmps	local02, local03 wc
14b88     0F 1F A2 F1 | 	subx	local01, local01
14b8c     A7 1E 62 FC | 	wrlong	local01, fp
14b90     54 01 90 FD | 	jmp	#LR__1693
14b94                 | LR__1688
14b94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14b94     08 4E 05 F1 | 	add	fp, #8
14b98     A7 1E 02 FB | 	rdlong	local01, fp
14b9c     08 4E 85 F1 | 	sub	fp, #8
14ba0     1D 1E 0E F2 | 	cmp	local01, #29 wz
14ba4     14 4E 05 A1 |  if_e	add	fp, #20
14ba8     A7 22 02 AB |  if_e	rdlong	local03, fp
14bac     14 4E 85 A1 |  if_e	sub	fp, #20
14bb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14bb4     20 00 90 5D |  if_ne	jmp	#LR__1689
14bb8     A7 20 02 FB | 	rdlong	local02, fp
14bbc     0C 4E 05 F1 | 	add	fp, #12
14bc0     A7 22 02 FB | 	rdlong	local03, fp
14bc4     0C 4E 85 F1 | 	sub	fp, #12
14bc8     11 21 12 F2 | 	cmp	local02, local03 wc
14bcc     0F 1F A2 F1 | 	subx	local01, local01
14bd0     A7 1E 62 FC | 	wrlong	local01, fp
14bd4     10 01 90 FD | 	jmp	#LR__1693
14bd8                 | LR__1689
14bd8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
14bd8     08 4E 05 F1 | 	add	fp, #8
14bdc     A7 1E 02 FB | 	rdlong	local01, fp
14be0     08 4E 85 F1 | 	sub	fp, #8
14be4     2B 1E 0E F2 | 	cmp	local01, #43 wz
14be8     14 4E 05 A1 |  if_e	add	fp, #20
14bec     A7 22 02 AB |  if_e	rdlong	local03, fp
14bf0     14 4E 85 A1 |  if_e	sub	fp, #20
14bf4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14bf8     30 00 90 5D |  if_ne	jmp	#LR__1690
14bfc     00 1E 06 F6 | 	mov	local01, #0
14c00     A7 12 02 FB | 	rdlong	arg01, fp
14c04     94 67 BF FD | 	call	#_convertstring
14c08     FD 12 02 F6 | 	mov	arg01, result1
14c0c     0C 4E 05 F1 | 	add	fp, #12
14c10     A7 14 02 FB | 	rdlong	arg02, fp
14c14     0C 4E 85 F1 | 	sub	fp, #12
14c18     48 BD B0 FD | 	call	#__system___string_cmp
14c1c     00 FA 55 F2 | 	cmps	result1, #0 wc
14c20     00 1E 26 C6 |  if_b	not	local01, #0
14c24     A7 1E 62 FC | 	wrlong	local01, fp
14c28     BC 00 90 FD | 	jmp	#LR__1693
14c2c                 | LR__1690
14c2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14c2c     08 4E 05 F1 | 	add	fp, #8
14c30     A7 1E 02 FB | 	rdlong	local01, fp
14c34     08 4E 85 F1 | 	sub	fp, #8
14c38     1F 1E 0E F2 | 	cmp	local01, #31 wz
14c3c     14 4E 05 A1 |  if_e	add	fp, #20
14c40     A7 22 02 AB |  if_e	rdlong	local03, fp
14c44     14 4E 85 A1 |  if_e	sub	fp, #20
14c48     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14c4c     34 00 90 5D |  if_ne	jmp	#LR__1691
14c50     00 1E 06 F6 | 	mov	local01, #0
14c54     A7 20 02 FB | 	rdlong	local02, fp
14c58     0C 4E 05 F1 | 	add	fp, #12
14c5c     A7 12 02 FB | 	rdlong	arg01, fp
14c60     0C 4E 85 F1 | 	sub	fp, #12
14c64     34 67 BF FD | 	call	#_convertstring
14c68     FD 14 02 F6 | 	mov	arg02, result1
14c6c     10 13 02 F6 | 	mov	arg01, local02
14c70     F0 BC B0 FD | 	call	#__system___string_cmp
14c74     00 FA 55 F2 | 	cmps	result1, #0 wc
14c78     00 1E 26 C6 |  if_b	not	local01, #0
14c7c     A7 1E 62 FC | 	wrlong	local01, fp
14c80     64 00 90 FD | 	jmp	#LR__1693
14c84                 | LR__1691
14c84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14c84     08 4E 05 F1 | 	add	fp, #8
14c88     A7 1E 02 FB | 	rdlong	local01, fp
14c8c     08 4E 85 F1 | 	sub	fp, #8
14c90     2B 1E 0E F2 | 	cmp	local01, #43 wz
14c94     14 4E 05 A1 |  if_e	add	fp, #20
14c98     A7 22 02 AB |  if_e	rdlong	local03, fp
14c9c     14 4E 85 A1 |  if_e	sub	fp, #20
14ca0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14ca4     3C 00 90 5D |  if_ne	jmp	#LR__1692
14ca8     00 1E 06 F6 | 	mov	local01, #0
14cac     A7 12 02 FB | 	rdlong	arg01, fp
14cb0     E8 66 BF FD | 	call	#_convertstring
14cb4     FD 20 02 F6 | 	mov	local02, result1
14cb8     0C 4E 05 F1 | 	add	fp, #12
14cbc     A7 12 02 FB | 	rdlong	arg01, fp
14cc0     0C 4E 85 F1 | 	sub	fp, #12
14cc4     D4 66 BF FD | 	call	#_convertstring
14cc8     FD 14 02 F6 | 	mov	arg02, result1
14ccc     10 13 02 F6 | 	mov	arg01, local02
14cd0     90 BC B0 FD | 	call	#__system___string_cmp
14cd4     00 FA 55 F2 | 	cmps	result1, #0 wc
14cd8     00 1E 26 C6 |  if_b	not	local01, #0
14cdc     A7 1E 62 FC | 	wrlong	local01, fp
14ce0     04 00 90 FD | 	jmp	#LR__1693
14ce4                 | LR__1692
14ce4     A7 00 68 FC | 	wrlong	#0, fp
14ce8                 | LR__1693
14ce8     08 4E 05 F1 | 	add	fp, #8
14cec     A7 38 68 FC | 	wrlong	#28, fp
14cf0     08 4E 85 F1 | 	sub	fp, #8
14cf4     A7 12 02 F6 | 	mov	arg01, fp
14cf8     C0 65 BF FD | 	call	#_push
14cfc     A7 F0 03 F6 | 	mov	ptra, fp
14d00     B2 00 A0 FD | 	call	#popregs_
14d04                 | _do_lt_ret
14d04     2D 00 64 FD | 	ret
14d08                 | 
14d08                 | ' 
14d08                 | ' sub do_ge
14d08                 | _do_ge
14d08     05 4A 05 F6 | 	mov	COUNT_, #5
14d0c     A8 00 A0 FD | 	call	#pushregs_
14d10     18 F0 07 F1 | 	add	ptra, #24
14d14     0C 65 BF FD | 	call	#_pop
14d18     FD 1E 02 F6 | 	mov	local01, result1
14d1c     FE 20 02 F6 | 	mov	local02, result2
14d20     FF 22 02 F6 | 	mov	local03, result3
14d24     0C 4E 05 F1 | 	add	fp, #12
14d28     A7 1E 62 FC | 	wrlong	local01, fp
14d2c     04 4E 05 F1 | 	add	fp, #4
14d30     A7 20 62 FC | 	wrlong	local02, fp
14d34     04 4E 05 F1 | 	add	fp, #4
14d38     A7 22 62 FC | 	wrlong	local03, fp
14d3c     14 4E 85 F1 | 	sub	fp, #20
14d40     E0 64 BF FD | 	call	#_pop
14d44     FF 22 02 F6 | 	mov	local03, result3
14d48     A7 FA 61 FC | 	wrlong	result1, fp
14d4c     04 4E 05 F1 | 	add	fp, #4
14d50     A7 FC 61 FC | 	wrlong	result2, fp
14d54     04 4E 05 F1 | 	add	fp, #4
14d58     A7 22 62 FC | 	wrlong	local03, fp
14d5c                 | ' t2=pop()
14d5c                 | ' t1=pop()
14d5c                 | ' 
14d5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14d5c     08 4E 85 F1 | 	sub	fp, #8
14d60     1F 22 0E F2 | 	cmp	local03, #31 wz
14d64     14 4E 05 A1 |  if_e	add	fp, #20
14d68     A7 24 02 AB |  if_e	rdlong	local04, fp
14d6c     14 4E 85 A1 |  if_e	sub	fp, #20
14d70     12 23 02 A6 |  if_e	mov	local03, local04
14d74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14d78     28 00 90 5D |  if_ne	jmp	#LR__1700
14d7c     00 1E 06 F6 | 	mov	local01, #0
14d80     A7 12 02 FB | 	rdlong	arg01, fp
14d84     0C 4E 05 F1 | 	add	fp, #12
14d88     A7 14 02 FB | 	rdlong	arg02, fp
14d8c     0C 4E 85 F1 | 	sub	fp, #12
14d90     D0 BB B0 FD | 	call	#__system___string_cmp
14d94     00 FA 55 F2 | 	cmps	result1, #0 wc
14d98     00 1E 26 36 |  if_ae	not	local01, #0
14d9c     A7 1E 62 FC | 	wrlong	local01, fp
14da0     1C 04 90 FD | 	jmp	#LR__1713
14da4                 | LR__1700
14da4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
14da4     08 4E 05 F1 | 	add	fp, #8
14da8     A7 1E 02 FB | 	rdlong	local01, fp
14dac     08 4E 85 F1 | 	sub	fp, #8
14db0     1E 1E 0E F2 | 	cmp	local01, #30 wz
14db4     14 4E 05 A1 |  if_e	add	fp, #20
14db8     A7 24 02 AB |  if_e	rdlong	local04, fp
14dbc     14 4E 85 A1 |  if_e	sub	fp, #20
14dc0     12 23 02 A6 |  if_e	mov	local03, local04
14dc4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14dc8     2C 00 90 5D |  if_ne	jmp	#LR__1701
14dcc     00 1E 06 F6 | 	mov	local01, #0
14dd0     A7 12 02 FB | 	rdlong	arg01, fp
14dd4     0C 4E 05 F1 | 	add	fp, #12
14dd8     A7 14 02 FB | 	rdlong	arg02, fp
14ddc     0C 4E 85 F1 | 	sub	fp, #12
14de0     01 16 66 F6 | 	neg	arg03, #1
14de4     3C EB B0 FD | 	call	#__system___float_cmp
14de8     00 FA 55 F2 | 	cmps	result1, #0 wc
14dec     00 1E 26 36 |  if_ae	not	local01, #0
14df0     A7 1E 62 FC | 	wrlong	local01, fp
14df4     C8 03 90 FD | 	jmp	#LR__1713
14df8                 | LR__1701
14df8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
14df8     08 4E 05 F1 | 	add	fp, #8
14dfc     A7 1E 02 FB | 	rdlong	local01, fp
14e00     08 4E 85 F1 | 	sub	fp, #8
14e04     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e08     14 4E 05 A1 |  if_e	add	fp, #20
14e0c     A7 24 02 AB |  if_e	rdlong	local04, fp
14e10     14 4E 85 A1 |  if_e	sub	fp, #20
14e14     12 23 02 A6 |  if_e	mov	local03, local04
14e18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14e1c     48 00 90 5D |  if_ne	jmp	#LR__1702
14e20     00 1E 06 F6 | 	mov	local01, #0
14e24     A7 20 02 FB | 	rdlong	local02, fp
14e28     0C 4E 05 F1 | 	add	fp, #12
14e2c     A7 12 02 FB | 	rdlong	arg01, fp
14e30     0C 4E 85 F1 | 	sub	fp, #12
14e34     09 13 52 F6 | 	abs	arg01, arg01 wc
14e38     1F 26 C6 C9 |  if_b	decod	local05, #31
14e3c     00 26 06 36 |  if_ae	mov	local05, #0
14e40     A8 E2 B0 FD | 	call	#__system___float_fromuns
14e44     13 FB 61 F5 | 	xor	result1, local05
14e48     FD 14 02 F6 | 	mov	arg02, result1
14e4c     10 13 02 F6 | 	mov	arg01, local02
14e50     01 16 66 F6 | 	neg	arg03, #1
14e54     CC EA B0 FD | 	call	#__system___float_cmp
14e58     00 FA 55 F2 | 	cmps	result1, #0 wc
14e5c     00 1E 26 36 |  if_ae	not	local01, #0
14e60     A7 1E 62 FC | 	wrlong	local01, fp
14e64     58 03 90 FD | 	jmp	#LR__1713
14e68                 | LR__1702
14e68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
14e68     08 4E 05 F1 | 	add	fp, #8
14e6c     A7 1E 02 FB | 	rdlong	local01, fp
14e70     08 4E 85 F1 | 	sub	fp, #8
14e74     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e78     14 4E 05 A1 |  if_e	add	fp, #20
14e7c     A7 24 02 AB |  if_e	rdlong	local04, fp
14e80     14 4E 85 A1 |  if_e	sub	fp, #20
14e84     12 23 02 A6 |  if_e	mov	local03, local04
14e88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14e8c     38 00 90 5D |  if_ne	jmp	#LR__1703
14e90     00 1E 06 F6 | 	mov	local01, #0
14e94     A7 20 02 FB | 	rdlong	local02, fp
14e98     0C 4E 05 F1 | 	add	fp, #12
14e9c     A7 12 02 FB | 	rdlong	arg01, fp
14ea0     0C 4E 85 F1 | 	sub	fp, #12
14ea4     44 E2 B0 FD | 	call	#__system___float_fromuns
14ea8     FD 14 02 F6 | 	mov	arg02, result1
14eac     10 13 02 F6 | 	mov	arg01, local02
14eb0     01 16 66 F6 | 	neg	arg03, #1
14eb4     6C EA B0 FD | 	call	#__system___float_cmp
14eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
14ebc     00 1E 26 36 |  if_ae	not	local01, #0
14ec0     A7 1E 62 FC | 	wrlong	local01, fp
14ec4     F8 02 90 FD | 	jmp	#LR__1713
14ec8                 | LR__1703
14ec8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
14ec8     08 4E 05 F1 | 	add	fp, #8
14ecc     A7 1E 02 FB | 	rdlong	local01, fp
14ed0     08 4E 85 F1 | 	sub	fp, #8
14ed4     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ed8     14 4E 05 A1 |  if_e	add	fp, #20
14edc     A7 24 02 AB |  if_e	rdlong	local04, fp
14ee0     14 4E 85 A1 |  if_e	sub	fp, #20
14ee4     12 23 02 A6 |  if_e	mov	local03, local04
14ee8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14eec     44 00 90 5D |  if_ne	jmp	#LR__1704
14ef0     00 1E 06 F6 | 	mov	local01, #0
14ef4     A7 12 02 FB | 	rdlong	arg01, fp
14ef8     09 13 52 F6 | 	abs	arg01, arg01 wc
14efc     1F 26 C6 C9 |  if_b	decod	local05, #31
14f00     00 26 06 36 |  if_ae	mov	local05, #0
14f04     E4 E1 B0 FD | 	call	#__system___float_fromuns
14f08     13 FB 61 F5 | 	xor	result1, local05
14f0c     FD 12 02 F6 | 	mov	arg01, result1
14f10     0C 4E 05 F1 | 	add	fp, #12
14f14     A7 14 02 FB | 	rdlong	arg02, fp
14f18     0C 4E 85 F1 | 	sub	fp, #12
14f1c     01 16 66 F6 | 	neg	arg03, #1
14f20     00 EA B0 FD | 	call	#__system___float_cmp
14f24     00 FA 55 F2 | 	cmps	result1, #0 wc
14f28     00 1E 26 36 |  if_ae	not	local01, #0
14f2c     A7 1E 62 FC | 	wrlong	local01, fp
14f30     8C 02 90 FD | 	jmp	#LR__1713
14f34                 | LR__1704
14f34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
14f34     08 4E 05 F1 | 	add	fp, #8
14f38     A7 1E 02 FB | 	rdlong	local01, fp
14f3c     08 4E 85 F1 | 	sub	fp, #8
14f40     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f44     14 4E 05 A1 |  if_e	add	fp, #20
14f48     A7 24 02 AB |  if_e	rdlong	local04, fp
14f4c     14 4E 85 A1 |  if_e	sub	fp, #20
14f50     12 23 02 A6 |  if_e	mov	local03, local04
14f54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14f58     24 00 90 5D |  if_ne	jmp	#LR__1705
14f5c     00 1E 06 F6 | 	mov	local01, #0
14f60     A7 20 02 FB | 	rdlong	local02, fp
14f64     0C 4E 05 F1 | 	add	fp, #12
14f68     A7 22 02 FB | 	rdlong	local03, fp
14f6c     0C 4E 85 F1 | 	sub	fp, #12
14f70     11 21 52 F2 | 	cmps	local02, local03 wc
14f74     01 1E 66 36 |  if_ae	neg	local01, #1
14f78     A7 1E 62 FC | 	wrlong	local01, fp
14f7c     40 02 90 FD | 	jmp	#LR__1713
14f80                 | LR__1705
14f80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
14f80     08 4E 05 F1 | 	add	fp, #8
14f84     A7 1E 02 FB | 	rdlong	local01, fp
14f88     08 4E 85 F1 | 	sub	fp, #8
14f8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f90     14 4E 05 A1 |  if_e	add	fp, #20
14f94     A7 24 02 AB |  if_e	rdlong	local04, fp
14f98     14 4E 85 A1 |  if_e	sub	fp, #20
14f9c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14fa0     24 00 90 5D |  if_ne	jmp	#LR__1706
14fa4     00 1E 06 F6 | 	mov	local01, #0
14fa8     A7 20 02 FB | 	rdlong	local02, fp
14fac     0C 4E 05 F1 | 	add	fp, #12
14fb0     A7 22 02 FB | 	rdlong	local03, fp
14fb4     0C 4E 85 F1 | 	sub	fp, #12
14fb8     11 21 52 F2 | 	cmps	local02, local03 wc
14fbc     01 1E 66 36 |  if_ae	neg	local01, #1
14fc0     A7 1E 62 FC | 	wrlong	local01, fp
14fc4     F8 01 90 FD | 	jmp	#LR__1713
14fc8                 | LR__1706
14fc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
14fc8     08 4E 05 F1 | 	add	fp, #8
14fcc     A7 1E 02 FB | 	rdlong	local01, fp
14fd0     08 4E 85 F1 | 	sub	fp, #8
14fd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
14fd8     14 4E 05 A1 |  if_e	add	fp, #20
14fdc     A7 22 02 AB |  if_e	rdlong	local03, fp
14fe0     14 4E 85 A1 |  if_e	sub	fp, #20
14fe4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14fe8     34 00 90 5D |  if_ne	jmp	#LR__1707
14fec     00 1E 06 F6 | 	mov	local01, #0
14ff0     A7 12 02 FB | 	rdlong	arg01, fp
14ff4     F4 E0 B0 FD | 	call	#__system___float_fromuns
14ff8     FD 12 02 F6 | 	mov	arg01, result1
14ffc     0C 4E 05 F1 | 	add	fp, #12
15000     A7 14 02 FB | 	rdlong	arg02, fp
15004     0C 4E 85 F1 | 	sub	fp, #12
15008     01 16 66 F6 | 	neg	arg03, #1
1500c     14 E9 B0 FD | 	call	#__system___float_cmp
15010     00 FA 55 F2 | 	cmps	result1, #0 wc
15014     00 1E 26 36 |  if_ae	not	local01, #0
15018     A7 1E 62 FC | 	wrlong	local01, fp
1501c     A0 01 90 FD | 	jmp	#LR__1713
15020                 | LR__1707
15020                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
15020     08 4E 05 F1 | 	add	fp, #8
15024     A7 1E 02 FB | 	rdlong	local01, fp
15028     08 4E 85 F1 | 	sub	fp, #8
1502c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15030     14 4E 05 A1 |  if_e	add	fp, #20
15034     A7 22 02 AB |  if_e	rdlong	local03, fp
15038     14 4E 85 A1 |  if_e	sub	fp, #20
1503c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15040     24 00 90 5D |  if_ne	jmp	#LR__1708
15044     00 1E 06 F6 | 	mov	local01, #0
15048     A7 20 02 FB | 	rdlong	local02, fp
1504c     0C 4E 05 F1 | 	add	fp, #12
15050     A7 22 02 FB | 	rdlong	local03, fp
15054     0C 4E 85 F1 | 	sub	fp, #12
15058     11 21 52 F2 | 	cmps	local02, local03 wc
1505c     01 1E 66 36 |  if_ae	neg	local01, #1
15060     A7 1E 62 FC | 	wrlong	local01, fp
15064     58 01 90 FD | 	jmp	#LR__1713
15068                 | LR__1708
15068                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
15068     08 4E 05 F1 | 	add	fp, #8
1506c     A7 1E 02 FB | 	rdlong	local01, fp
15070     08 4E 85 F1 | 	sub	fp, #8
15074     1D 1E 0E F2 | 	cmp	local01, #29 wz
15078     14 4E 05 A1 |  if_e	add	fp, #20
1507c     A7 22 02 AB |  if_e	rdlong	local03, fp
15080     14 4E 85 A1 |  if_e	sub	fp, #20
15084     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15088     24 00 90 5D |  if_ne	jmp	#LR__1709
1508c     00 1E 06 F6 | 	mov	local01, #0
15090     A7 20 02 FB | 	rdlong	local02, fp
15094     0C 4E 05 F1 | 	add	fp, #12
15098     A7 22 02 FB | 	rdlong	local03, fp
1509c     0C 4E 85 F1 | 	sub	fp, #12
150a0     11 21 12 F2 | 	cmp	local02, local03 wc
150a4     01 1E 66 36 |  if_ae	neg	local01, #1
150a8     A7 1E 62 FC | 	wrlong	local01, fp
150ac     10 01 90 FD | 	jmp	#LR__1713
150b0                 | LR__1709
150b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
150b0     08 4E 05 F1 | 	add	fp, #8
150b4     A7 1E 02 FB | 	rdlong	local01, fp
150b8     08 4E 85 F1 | 	sub	fp, #8
150bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
150c0     14 4E 05 A1 |  if_e	add	fp, #20
150c4     A7 22 02 AB |  if_e	rdlong	local03, fp
150c8     14 4E 85 A1 |  if_e	sub	fp, #20
150cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
150d0     30 00 90 5D |  if_ne	jmp	#LR__1710
150d4     00 1E 06 F6 | 	mov	local01, #0
150d8     A7 12 02 FB | 	rdlong	arg01, fp
150dc     BC 62 BF FD | 	call	#_convertstring
150e0     FD 12 02 F6 | 	mov	arg01, result1
150e4     0C 4E 05 F1 | 	add	fp, #12
150e8     A7 14 02 FB | 	rdlong	arg02, fp
150ec     0C 4E 85 F1 | 	sub	fp, #12
150f0     70 B8 B0 FD | 	call	#__system___string_cmp
150f4     00 FA 55 F2 | 	cmps	result1, #0 wc
150f8     00 1E 26 36 |  if_ae	not	local01, #0
150fc     A7 1E 62 FC | 	wrlong	local01, fp
15100     BC 00 90 FD | 	jmp	#LR__1713
15104                 | LR__1710
15104                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
15104     08 4E 05 F1 | 	add	fp, #8
15108     A7 1E 02 FB | 	rdlong	local01, fp
1510c     08 4E 85 F1 | 	sub	fp, #8
15110     1F 1E 0E F2 | 	cmp	local01, #31 wz
15114     14 4E 05 A1 |  if_e	add	fp, #20
15118     A7 22 02 AB |  if_e	rdlong	local03, fp
1511c     14 4E 85 A1 |  if_e	sub	fp, #20
15120     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15124     34 00 90 5D |  if_ne	jmp	#LR__1711
15128     00 1E 06 F6 | 	mov	local01, #0
1512c     A7 20 02 FB | 	rdlong	local02, fp
15130     0C 4E 05 F1 | 	add	fp, #12
15134     A7 12 02 FB | 	rdlong	arg01, fp
15138     0C 4E 85 F1 | 	sub	fp, #12
1513c     5C 62 BF FD | 	call	#_convertstring
15140     FD 14 02 F6 | 	mov	arg02, result1
15144     10 13 02 F6 | 	mov	arg01, local02
15148     18 B8 B0 FD | 	call	#__system___string_cmp
1514c     00 FA 55 F2 | 	cmps	result1, #0 wc
15150     00 1E 26 36 |  if_ae	not	local01, #0
15154     A7 1E 62 FC | 	wrlong	local01, fp
15158     64 00 90 FD | 	jmp	#LR__1713
1515c                 | LR__1711
1515c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1515c     08 4E 05 F1 | 	add	fp, #8
15160     A7 1E 02 FB | 	rdlong	local01, fp
15164     08 4E 85 F1 | 	sub	fp, #8
15168     2B 1E 0E F2 | 	cmp	local01, #43 wz
1516c     14 4E 05 A1 |  if_e	add	fp, #20
15170     A7 22 02 AB |  if_e	rdlong	local03, fp
15174     14 4E 85 A1 |  if_e	sub	fp, #20
15178     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1517c     3C 00 90 5D |  if_ne	jmp	#LR__1712
15180     00 1E 06 F6 | 	mov	local01, #0
15184     A7 12 02 FB | 	rdlong	arg01, fp
15188     10 62 BF FD | 	call	#_convertstring
1518c     FD 20 02 F6 | 	mov	local02, result1
15190     0C 4E 05 F1 | 	add	fp, #12
15194     A7 12 02 FB | 	rdlong	arg01, fp
15198     0C 4E 85 F1 | 	sub	fp, #12
1519c     FC 61 BF FD | 	call	#_convertstring
151a0     FD 14 02 F6 | 	mov	arg02, result1
151a4     10 13 02 F6 | 	mov	arg01, local02
151a8     B8 B7 B0 FD | 	call	#__system___string_cmp
151ac     00 FA 55 F2 | 	cmps	result1, #0 wc
151b0     00 1E 26 36 |  if_ae	not	local01, #0
151b4     A7 1E 62 FC | 	wrlong	local01, fp
151b8     04 00 90 FD | 	jmp	#LR__1713
151bc                 | LR__1712
151bc     A7 00 68 FC | 	wrlong	#0, fp
151c0                 | LR__1713
151c0     08 4E 05 F1 | 	add	fp, #8
151c4     A7 38 68 FC | 	wrlong	#28, fp
151c8     08 4E 85 F1 | 	sub	fp, #8
151cc     A7 12 02 F6 | 	mov	arg01, fp
151d0     E8 60 BF FD | 	call	#_push
151d4     A7 F0 03 F6 | 	mov	ptra, fp
151d8     B2 00 A0 FD | 	call	#popregs_
151dc                 | _do_ge_ret
151dc     2D 00 64 FD | 	ret
151e0                 | 
151e0                 | ' 
151e0                 | ' sub do_le
151e0                 | _do_le
151e0     05 4A 05 F6 | 	mov	COUNT_, #5
151e4     A8 00 A0 FD | 	call	#pushregs_
151e8     18 F0 07 F1 | 	add	ptra, #24
151ec     34 60 BF FD | 	call	#_pop
151f0     FD 1E 02 F6 | 	mov	local01, result1
151f4     FE 20 02 F6 | 	mov	local02, result2
151f8     FF 22 02 F6 | 	mov	local03, result3
151fc     0C 4E 05 F1 | 	add	fp, #12
15200     A7 1E 62 FC | 	wrlong	local01, fp
15204     04 4E 05 F1 | 	add	fp, #4
15208     A7 20 62 FC | 	wrlong	local02, fp
1520c     04 4E 05 F1 | 	add	fp, #4
15210     A7 22 62 FC | 	wrlong	local03, fp
15214     14 4E 85 F1 | 	sub	fp, #20
15218     08 60 BF FD | 	call	#_pop
1521c     FF 22 02 F6 | 	mov	local03, result3
15220     A7 FA 61 FC | 	wrlong	result1, fp
15224     04 4E 05 F1 | 	add	fp, #4
15228     A7 FC 61 FC | 	wrlong	result2, fp
1522c     04 4E 05 F1 | 	add	fp, #4
15230     A7 22 62 FC | 	wrlong	local03, fp
15234                 | ' t2=pop()
15234                 | ' t1=pop()
15234                 | ' 
15234                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
15234     08 4E 85 F1 | 	sub	fp, #8
15238     1F 22 0E F2 | 	cmp	local03, #31 wz
1523c     14 4E 05 A1 |  if_e	add	fp, #20
15240     A7 24 02 AB |  if_e	rdlong	local04, fp
15244     14 4E 85 A1 |  if_e	sub	fp, #20
15248     12 23 02 A6 |  if_e	mov	local03, local04
1524c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15250     28 00 90 5D |  if_ne	jmp	#LR__1720
15254     00 1E 06 F6 | 	mov	local01, #0
15258     A7 12 02 FB | 	rdlong	arg01, fp
1525c     0C 4E 05 F1 | 	add	fp, #12
15260     A7 14 02 FB | 	rdlong	arg02, fp
15264     0C 4E 85 F1 | 	sub	fp, #12
15268     F8 B6 B0 FD | 	call	#__system___string_cmp
1526c     01 FA 55 F2 | 	cmps	result1, #1 wc
15270     00 1E 26 C6 |  if_b	not	local01, #0
15274     A7 1E 62 FC | 	wrlong	local01, fp
15278     1C 04 90 FD | 	jmp	#LR__1733
1527c                 | LR__1720
1527c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1527c     08 4E 05 F1 | 	add	fp, #8
15280     A7 1E 02 FB | 	rdlong	local01, fp
15284     08 4E 85 F1 | 	sub	fp, #8
15288     1E 1E 0E F2 | 	cmp	local01, #30 wz
1528c     14 4E 05 A1 |  if_e	add	fp, #20
15290     A7 24 02 AB |  if_e	rdlong	local04, fp
15294     14 4E 85 A1 |  if_e	sub	fp, #20
15298     12 23 02 A6 |  if_e	mov	local03, local04
1529c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
152a0     2C 00 90 5D |  if_ne	jmp	#LR__1721
152a4     00 1E 06 F6 | 	mov	local01, #0
152a8     A7 12 02 FB | 	rdlong	arg01, fp
152ac     0C 4E 05 F1 | 	add	fp, #12
152b0     A7 14 02 FB | 	rdlong	arg02, fp
152b4     0C 4E 85 F1 | 	sub	fp, #12
152b8     01 16 06 F6 | 	mov	arg03, #1
152bc     64 E6 B0 FD | 	call	#__system___float_cmp
152c0     01 FA 55 F2 | 	cmps	result1, #1 wc
152c4     00 1E 26 C6 |  if_b	not	local01, #0
152c8     A7 1E 62 FC | 	wrlong	local01, fp
152cc     C8 03 90 FD | 	jmp	#LR__1733
152d0                 | LR__1721
152d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
152d0     08 4E 05 F1 | 	add	fp, #8
152d4     A7 1E 02 FB | 	rdlong	local01, fp
152d8     08 4E 85 F1 | 	sub	fp, #8
152dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
152e0     14 4E 05 A1 |  if_e	add	fp, #20
152e4     A7 24 02 AB |  if_e	rdlong	local04, fp
152e8     14 4E 85 A1 |  if_e	sub	fp, #20
152ec     12 23 02 A6 |  if_e	mov	local03, local04
152f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
152f4     48 00 90 5D |  if_ne	jmp	#LR__1722
152f8     00 1E 06 F6 | 	mov	local01, #0
152fc     A7 20 02 FB | 	rdlong	local02, fp
15300     0C 4E 05 F1 | 	add	fp, #12
15304     A7 12 02 FB | 	rdlong	arg01, fp
15308     0C 4E 85 F1 | 	sub	fp, #12
1530c     09 13 52 F6 | 	abs	arg01, arg01 wc
15310     1F 26 C6 C9 |  if_b	decod	local05, #31
15314     00 26 06 36 |  if_ae	mov	local05, #0
15318     D0 DD B0 FD | 	call	#__system___float_fromuns
1531c     13 FB 61 F5 | 	xor	result1, local05
15320     FD 14 02 F6 | 	mov	arg02, result1
15324     10 13 02 F6 | 	mov	arg01, local02
15328     01 16 06 F6 | 	mov	arg03, #1
1532c     F4 E5 B0 FD | 	call	#__system___float_cmp
15330     01 FA 55 F2 | 	cmps	result1, #1 wc
15334     00 1E 26 C6 |  if_b	not	local01, #0
15338     A7 1E 62 FC | 	wrlong	local01, fp
1533c     58 03 90 FD | 	jmp	#LR__1733
15340                 | LR__1722
15340                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
15340     08 4E 05 F1 | 	add	fp, #8
15344     A7 1E 02 FB | 	rdlong	local01, fp
15348     08 4E 85 F1 | 	sub	fp, #8
1534c     1E 1E 0E F2 | 	cmp	local01, #30 wz
15350     14 4E 05 A1 |  if_e	add	fp, #20
15354     A7 24 02 AB |  if_e	rdlong	local04, fp
15358     14 4E 85 A1 |  if_e	sub	fp, #20
1535c     12 23 02 A6 |  if_e	mov	local03, local04
15360     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15364     38 00 90 5D |  if_ne	jmp	#LR__1723
15368     00 1E 06 F6 | 	mov	local01, #0
1536c     A7 20 02 FB | 	rdlong	local02, fp
15370     0C 4E 05 F1 | 	add	fp, #12
15374     A7 12 02 FB | 	rdlong	arg01, fp
15378     0C 4E 85 F1 | 	sub	fp, #12
1537c     6C DD B0 FD | 	call	#__system___float_fromuns
15380     FD 14 02 F6 | 	mov	arg02, result1
15384     10 13 02 F6 | 	mov	arg01, local02
15388     01 16 06 F6 | 	mov	arg03, #1
1538c     94 E5 B0 FD | 	call	#__system___float_cmp
15390     01 FA 55 F2 | 	cmps	result1, #1 wc
15394     00 1E 26 C6 |  if_b	not	local01, #0
15398     A7 1E 62 FC | 	wrlong	local01, fp
1539c     F8 02 90 FD | 	jmp	#LR__1733
153a0                 | LR__1723
153a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
153a0     08 4E 05 F1 | 	add	fp, #8
153a4     A7 1E 02 FB | 	rdlong	local01, fp
153a8     08 4E 85 F1 | 	sub	fp, #8
153ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
153b0     14 4E 05 A1 |  if_e	add	fp, #20
153b4     A7 24 02 AB |  if_e	rdlong	local04, fp
153b8     14 4E 85 A1 |  if_e	sub	fp, #20
153bc     12 23 02 A6 |  if_e	mov	local03, local04
153c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
153c4     44 00 90 5D |  if_ne	jmp	#LR__1724
153c8     00 1E 06 F6 | 	mov	local01, #0
153cc     A7 12 02 FB | 	rdlong	arg01, fp
153d0     09 13 52 F6 | 	abs	arg01, arg01 wc
153d4     1F 26 C6 C9 |  if_b	decod	local05, #31
153d8     00 26 06 36 |  if_ae	mov	local05, #0
153dc     0C DD B0 FD | 	call	#__system___float_fromuns
153e0     13 FB 61 F5 | 	xor	result1, local05
153e4     FD 12 02 F6 | 	mov	arg01, result1
153e8     0C 4E 05 F1 | 	add	fp, #12
153ec     A7 14 02 FB | 	rdlong	arg02, fp
153f0     0C 4E 85 F1 | 	sub	fp, #12
153f4     01 16 06 F6 | 	mov	arg03, #1
153f8     28 E5 B0 FD | 	call	#__system___float_cmp
153fc     01 FA 55 F2 | 	cmps	result1, #1 wc
15400     00 1E 26 C6 |  if_b	not	local01, #0
15404     A7 1E 62 FC | 	wrlong	local01, fp
15408     8C 02 90 FD | 	jmp	#LR__1733
1540c                 | LR__1724
1540c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1540c     08 4E 05 F1 | 	add	fp, #8
15410     A7 1E 02 FB | 	rdlong	local01, fp
15414     08 4E 85 F1 | 	sub	fp, #8
15418     1C 1E 0E F2 | 	cmp	local01, #28 wz
1541c     14 4E 05 A1 |  if_e	add	fp, #20
15420     A7 24 02 AB |  if_e	rdlong	local04, fp
15424     14 4E 85 A1 |  if_e	sub	fp, #20
15428     12 23 02 A6 |  if_e	mov	local03, local04
1542c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15430     24 00 90 5D |  if_ne	jmp	#LR__1725
15434     00 1E 06 F6 | 	mov	local01, #0
15438     A7 20 02 FB | 	rdlong	local02, fp
1543c     0C 4E 05 F1 | 	add	fp, #12
15440     A7 22 02 FB | 	rdlong	local03, fp
15444     0C 4E 85 F1 | 	sub	fp, #12
15448     11 21 5A F2 | 	cmps	local02, local03 wcz
1544c     01 1E 66 E6 |  if_be	neg	local01, #1
15450     A7 1E 62 FC | 	wrlong	local01, fp
15454     40 02 90 FD | 	jmp	#LR__1733
15458                 | LR__1725
15458                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
15458     08 4E 05 F1 | 	add	fp, #8
1545c     A7 1E 02 FB | 	rdlong	local01, fp
15460     08 4E 85 F1 | 	sub	fp, #8
15464     1C 1E 0E F2 | 	cmp	local01, #28 wz
15468     14 4E 05 A1 |  if_e	add	fp, #20
1546c     A7 24 02 AB |  if_e	rdlong	local04, fp
15470     14 4E 85 A1 |  if_e	sub	fp, #20
15474     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15478     24 00 90 5D |  if_ne	jmp	#LR__1726
1547c     00 1E 06 F6 | 	mov	local01, #0
15480     A7 20 02 FB | 	rdlong	local02, fp
15484     0C 4E 05 F1 | 	add	fp, #12
15488     A7 22 02 FB | 	rdlong	local03, fp
1548c     0C 4E 85 F1 | 	sub	fp, #12
15490     11 21 5A F2 | 	cmps	local02, local03 wcz
15494     01 1E 66 E6 |  if_be	neg	local01, #1
15498     A7 1E 62 FC | 	wrlong	local01, fp
1549c     F8 01 90 FD | 	jmp	#LR__1733
154a0                 | LR__1726
154a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
154a0     08 4E 05 F1 | 	add	fp, #8
154a4     A7 1E 02 FB | 	rdlong	local01, fp
154a8     08 4E 85 F1 | 	sub	fp, #8
154ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
154b0     14 4E 05 A1 |  if_e	add	fp, #20
154b4     A7 22 02 AB |  if_e	rdlong	local03, fp
154b8     14 4E 85 A1 |  if_e	sub	fp, #20
154bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
154c0     34 00 90 5D |  if_ne	jmp	#LR__1727
154c4     00 1E 06 F6 | 	mov	local01, #0
154c8     A7 12 02 FB | 	rdlong	arg01, fp
154cc     1C DC B0 FD | 	call	#__system___float_fromuns
154d0     FD 12 02 F6 | 	mov	arg01, result1
154d4     0C 4E 05 F1 | 	add	fp, #12
154d8     A7 14 02 FB | 	rdlong	arg02, fp
154dc     0C 4E 85 F1 | 	sub	fp, #12
154e0     01 16 06 F6 | 	mov	arg03, #1
154e4     3C E4 B0 FD | 	call	#__system___float_cmp
154e8     01 FA 55 F2 | 	cmps	result1, #1 wc
154ec     00 1E 26 C6 |  if_b	not	local01, #0
154f0     A7 1E 62 FC | 	wrlong	local01, fp
154f4     A0 01 90 FD | 	jmp	#LR__1733
154f8                 | LR__1727
154f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
154f8     08 4E 05 F1 | 	add	fp, #8
154fc     A7 1E 02 FB | 	rdlong	local01, fp
15500     08 4E 85 F1 | 	sub	fp, #8
15504     1D 1E 0E F2 | 	cmp	local01, #29 wz
15508     14 4E 05 A1 |  if_e	add	fp, #20
1550c     A7 22 02 AB |  if_e	rdlong	local03, fp
15510     14 4E 85 A1 |  if_e	sub	fp, #20
15514     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15518     24 00 90 5D |  if_ne	jmp	#LR__1728
1551c     00 1E 06 F6 | 	mov	local01, #0
15520     A7 20 02 FB | 	rdlong	local02, fp
15524     0C 4E 05 F1 | 	add	fp, #12
15528     A7 22 02 FB | 	rdlong	local03, fp
1552c     0C 4E 85 F1 | 	sub	fp, #12
15530     11 21 5A F2 | 	cmps	local02, local03 wcz
15534     01 1E 66 E6 |  if_be	neg	local01, #1
15538     A7 1E 62 FC | 	wrlong	local01, fp
1553c     58 01 90 FD | 	jmp	#LR__1733
15540                 | LR__1728
15540                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
15540     08 4E 05 F1 | 	add	fp, #8
15544     A7 1E 02 FB | 	rdlong	local01, fp
15548     08 4E 85 F1 | 	sub	fp, #8
1554c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15550     14 4E 05 A1 |  if_e	add	fp, #20
15554     A7 22 02 AB |  if_e	rdlong	local03, fp
15558     14 4E 85 A1 |  if_e	sub	fp, #20
1555c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15560     24 00 90 5D |  if_ne	jmp	#LR__1729
15564     00 1E 06 F6 | 	mov	local01, #0
15568     A7 20 02 FB | 	rdlong	local02, fp
1556c     0C 4E 05 F1 | 	add	fp, #12
15570     A7 22 02 FB | 	rdlong	local03, fp
15574     0C 4E 85 F1 | 	sub	fp, #12
15578     11 21 1A F2 | 	cmp	local02, local03 wcz
1557c     01 1E 66 E6 |  if_be	neg	local01, #1
15580     A7 1E 62 FC | 	wrlong	local01, fp
15584     10 01 90 FD | 	jmp	#LR__1733
15588                 | LR__1729
15588                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
15588     08 4E 05 F1 | 	add	fp, #8
1558c     A7 1E 02 FB | 	rdlong	local01, fp
15590     08 4E 85 F1 | 	sub	fp, #8
15594     2B 1E 0E F2 | 	cmp	local01, #43 wz
15598     14 4E 05 A1 |  if_e	add	fp, #20
1559c     A7 22 02 AB |  if_e	rdlong	local03, fp
155a0     14 4E 85 A1 |  if_e	sub	fp, #20
155a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
155a8     30 00 90 5D |  if_ne	jmp	#LR__1730
155ac     00 1E 06 F6 | 	mov	local01, #0
155b0     A7 12 02 FB | 	rdlong	arg01, fp
155b4     E4 5D BF FD | 	call	#_convertstring
155b8     FD 12 02 F6 | 	mov	arg01, result1
155bc     0C 4E 05 F1 | 	add	fp, #12
155c0     A7 14 02 FB | 	rdlong	arg02, fp
155c4     0C 4E 85 F1 | 	sub	fp, #12
155c8     98 B3 B0 FD | 	call	#__system___string_cmp
155cc     01 FA 55 F2 | 	cmps	result1, #1 wc
155d0     00 1E 26 C6 |  if_b	not	local01, #0
155d4     A7 1E 62 FC | 	wrlong	local01, fp
155d8     BC 00 90 FD | 	jmp	#LR__1733
155dc                 | LR__1730
155dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
155dc     08 4E 05 F1 | 	add	fp, #8
155e0     A7 1E 02 FB | 	rdlong	local01, fp
155e4     08 4E 85 F1 | 	sub	fp, #8
155e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
155ec     14 4E 05 A1 |  if_e	add	fp, #20
155f0     A7 22 02 AB |  if_e	rdlong	local03, fp
155f4     14 4E 85 A1 |  if_e	sub	fp, #20
155f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
155fc     34 00 90 5D |  if_ne	jmp	#LR__1731
15600     00 1E 06 F6 | 	mov	local01, #0
15604     A7 20 02 FB | 	rdlong	local02, fp
15608     0C 4E 05 F1 | 	add	fp, #12
1560c     A7 12 02 FB | 	rdlong	arg01, fp
15610     0C 4E 85 F1 | 	sub	fp, #12
15614     84 5D BF FD | 	call	#_convertstring
15618     FD 14 02 F6 | 	mov	arg02, result1
1561c     10 13 02 F6 | 	mov	arg01, local02
15620     40 B3 B0 FD | 	call	#__system___string_cmp
15624     01 FA 55 F2 | 	cmps	result1, #1 wc
15628     00 1E 26 C6 |  if_b	not	local01, #0
1562c     A7 1E 62 FC | 	wrlong	local01, fp
15630     64 00 90 FD | 	jmp	#LR__1733
15634                 | LR__1731
15634                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
15634     08 4E 05 F1 | 	add	fp, #8
15638     A7 1E 02 FB | 	rdlong	local01, fp
1563c     08 4E 85 F1 | 	sub	fp, #8
15640     2B 1E 0E F2 | 	cmp	local01, #43 wz
15644     14 4E 05 A1 |  if_e	add	fp, #20
15648     A7 22 02 AB |  if_e	rdlong	local03, fp
1564c     14 4E 85 A1 |  if_e	sub	fp, #20
15650     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15654     3C 00 90 5D |  if_ne	jmp	#LR__1732
15658     00 1E 06 F6 | 	mov	local01, #0
1565c     A7 12 02 FB | 	rdlong	arg01, fp
15660     38 5D BF FD | 	call	#_convertstring
15664     FD 20 02 F6 | 	mov	local02, result1
15668     0C 4E 05 F1 | 	add	fp, #12
1566c     A7 12 02 FB | 	rdlong	arg01, fp
15670     0C 4E 85 F1 | 	sub	fp, #12
15674     24 5D BF FD | 	call	#_convertstring
15678     FD 14 02 F6 | 	mov	arg02, result1
1567c     10 13 02 F6 | 	mov	arg01, local02
15680     E0 B2 B0 FD | 	call	#__system___string_cmp
15684     01 FA 55 F2 | 	cmps	result1, #1 wc
15688     00 1E 26 C6 |  if_b	not	local01, #0
1568c     A7 1E 62 FC | 	wrlong	local01, fp
15690     04 00 90 FD | 	jmp	#LR__1733
15694                 | LR__1732
15694     A7 00 68 FC | 	wrlong	#0, fp
15698                 | LR__1733
15698     08 4E 05 F1 | 	add	fp, #8
1569c     A7 38 68 FC | 	wrlong	#28, fp
156a0     08 4E 85 F1 | 	sub	fp, #8
156a4     A7 12 02 F6 | 	mov	arg01, fp
156a8     10 5C BF FD | 	call	#_push
156ac     A7 F0 03 F6 | 	mov	ptra, fp
156b0     B2 00 A0 FD | 	call	#popregs_
156b4                 | _do_le_ret
156b4     2D 00 64 FD | 	ret
156b8                 | 
156b8                 | ' 
156b8                 | ' 
156b8                 | ' sub do_ne
156b8                 | _do_ne
156b8     05 4A 05 F6 | 	mov	COUNT_, #5
156bc     A8 00 A0 FD | 	call	#pushregs_
156c0     18 F0 07 F1 | 	add	ptra, #24
156c4     5C 5B BF FD | 	call	#_pop
156c8     FD 1E 02 F6 | 	mov	local01, result1
156cc     FE 20 02 F6 | 	mov	local02, result2
156d0     FF 22 02 F6 | 	mov	local03, result3
156d4     0C 4E 05 F1 | 	add	fp, #12
156d8     A7 1E 62 FC | 	wrlong	local01, fp
156dc     04 4E 05 F1 | 	add	fp, #4
156e0     A7 20 62 FC | 	wrlong	local02, fp
156e4     04 4E 05 F1 | 	add	fp, #4
156e8     A7 22 62 FC | 	wrlong	local03, fp
156ec     14 4E 85 F1 | 	sub	fp, #20
156f0     30 5B BF FD | 	call	#_pop
156f4     FF 22 02 F6 | 	mov	local03, result3
156f8     A7 FA 61 FC | 	wrlong	result1, fp
156fc     04 4E 05 F1 | 	add	fp, #4
15700     A7 FC 61 FC | 	wrlong	result2, fp
15704     04 4E 05 F1 | 	add	fp, #4
15708     A7 22 62 FC | 	wrlong	local03, fp
1570c                 | ' t2=pop()
1570c                 | ' t1=pop()
1570c                 | ' 
1570c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1570c     08 4E 85 F1 | 	sub	fp, #8
15710     1F 22 0E F2 | 	cmp	local03, #31 wz
15714     14 4E 05 A1 |  if_e	add	fp, #20
15718     A7 24 02 AB |  if_e	rdlong	local04, fp
1571c     14 4E 85 A1 |  if_e	sub	fp, #20
15720     12 23 02 A6 |  if_e	mov	local03, local04
15724     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15728     28 00 90 5D |  if_ne	jmp	#LR__1740
1572c     00 1E 06 F6 | 	mov	local01, #0
15730     A7 12 02 FB | 	rdlong	arg01, fp
15734     0C 4E 05 F1 | 	add	fp, #12
15738     A7 14 02 FB | 	rdlong	arg02, fp
1573c     0C 4E 85 F1 | 	sub	fp, #12
15740     20 B2 B0 FD | 	call	#__system___string_cmp
15744     00 FA 0D F2 | 	cmp	result1, #0 wz
15748     00 1E 26 56 |  if_ne	not	local01, #0
1574c     A7 1E 62 FC | 	wrlong	local01, fp
15750     1C 04 90 FD | 	jmp	#LR__1753
15754                 | LR__1740
15754                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
15754     08 4E 05 F1 | 	add	fp, #8
15758     A7 1E 02 FB | 	rdlong	local01, fp
1575c     08 4E 85 F1 | 	sub	fp, #8
15760     1E 1E 0E F2 | 	cmp	local01, #30 wz
15764     14 4E 05 A1 |  if_e	add	fp, #20
15768     A7 24 02 AB |  if_e	rdlong	local04, fp
1576c     14 4E 85 A1 |  if_e	sub	fp, #20
15770     12 23 02 A6 |  if_e	mov	local03, local04
15774     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15778     2C 00 90 5D |  if_ne	jmp	#LR__1741
1577c     00 1E 06 F6 | 	mov	local01, #0
15780     A7 12 02 FB | 	rdlong	arg01, fp
15784     0C 4E 05 F1 | 	add	fp, #12
15788     A7 14 02 FB | 	rdlong	arg02, fp
1578c     0C 4E 85 F1 | 	sub	fp, #12
15790     01 16 06 F6 | 	mov	arg03, #1
15794     8C E1 B0 FD | 	call	#__system___float_cmp
15798     00 FA 0D F2 | 	cmp	result1, #0 wz
1579c     00 1E 26 56 |  if_ne	not	local01, #0
157a0     A7 1E 62 FC | 	wrlong	local01, fp
157a4     C8 03 90 FD | 	jmp	#LR__1753
157a8                 | LR__1741
157a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
157a8     08 4E 05 F1 | 	add	fp, #8
157ac     A7 1E 02 FB | 	rdlong	local01, fp
157b0     08 4E 85 F1 | 	sub	fp, #8
157b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
157b8     14 4E 05 A1 |  if_e	add	fp, #20
157bc     A7 24 02 AB |  if_e	rdlong	local04, fp
157c0     14 4E 85 A1 |  if_e	sub	fp, #20
157c4     12 23 02 A6 |  if_e	mov	local03, local04
157c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
157cc     48 00 90 5D |  if_ne	jmp	#LR__1742
157d0     00 1E 06 F6 | 	mov	local01, #0
157d4     A7 20 02 FB | 	rdlong	local02, fp
157d8     0C 4E 05 F1 | 	add	fp, #12
157dc     A7 12 02 FB | 	rdlong	arg01, fp
157e0     0C 4E 85 F1 | 	sub	fp, #12
157e4     09 13 52 F6 | 	abs	arg01, arg01 wc
157e8     1F 26 C6 C9 |  if_b	decod	local05, #31
157ec     00 26 06 36 |  if_ae	mov	local05, #0
157f0     F8 D8 B0 FD | 	call	#__system___float_fromuns
157f4     13 FB 61 F5 | 	xor	result1, local05
157f8     FD 14 02 F6 | 	mov	arg02, result1
157fc     10 13 02 F6 | 	mov	arg01, local02
15800     01 16 06 F6 | 	mov	arg03, #1
15804     1C E1 B0 FD | 	call	#__system___float_cmp
15808     00 FA 0D F2 | 	cmp	result1, #0 wz
1580c     00 1E 26 56 |  if_ne	not	local01, #0
15810     A7 1E 62 FC | 	wrlong	local01, fp
15814     58 03 90 FD | 	jmp	#LR__1753
15818                 | LR__1742
15818                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
15818     08 4E 05 F1 | 	add	fp, #8
1581c     A7 1E 02 FB | 	rdlong	local01, fp
15820     08 4E 85 F1 | 	sub	fp, #8
15824     1E 1E 0E F2 | 	cmp	local01, #30 wz
15828     14 4E 05 A1 |  if_e	add	fp, #20
1582c     A7 24 02 AB |  if_e	rdlong	local04, fp
15830     14 4E 85 A1 |  if_e	sub	fp, #20
15834     12 23 02 A6 |  if_e	mov	local03, local04
15838     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1583c     38 00 90 5D |  if_ne	jmp	#LR__1743
15840     00 1E 06 F6 | 	mov	local01, #0
15844     A7 20 02 FB | 	rdlong	local02, fp
15848     0C 4E 05 F1 | 	add	fp, #12
1584c     A7 12 02 FB | 	rdlong	arg01, fp
15850     0C 4E 85 F1 | 	sub	fp, #12
15854     94 D8 B0 FD | 	call	#__system___float_fromuns
15858     FD 14 02 F6 | 	mov	arg02, result1
1585c     10 13 02 F6 | 	mov	arg01, local02
15860     01 16 06 F6 | 	mov	arg03, #1
15864     BC E0 B0 FD | 	call	#__system___float_cmp
15868     00 FA 0D F2 | 	cmp	result1, #0 wz
1586c     00 1E 26 56 |  if_ne	not	local01, #0
15870     A7 1E 62 FC | 	wrlong	local01, fp
15874     F8 02 90 FD | 	jmp	#LR__1753
15878                 | LR__1743
15878                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
15878     08 4E 05 F1 | 	add	fp, #8
1587c     A7 1E 02 FB | 	rdlong	local01, fp
15880     08 4E 85 F1 | 	sub	fp, #8
15884     1C 1E 0E F2 | 	cmp	local01, #28 wz
15888     14 4E 05 A1 |  if_e	add	fp, #20
1588c     A7 24 02 AB |  if_e	rdlong	local04, fp
15890     14 4E 85 A1 |  if_e	sub	fp, #20
15894     12 23 02 A6 |  if_e	mov	local03, local04
15898     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1589c     44 00 90 5D |  if_ne	jmp	#LR__1744
158a0     00 1E 06 F6 | 	mov	local01, #0
158a4     A7 12 02 FB | 	rdlong	arg01, fp
158a8     09 13 52 F6 | 	abs	arg01, arg01 wc
158ac     1F 26 C6 C9 |  if_b	decod	local05, #31
158b0     00 26 06 36 |  if_ae	mov	local05, #0
158b4     34 D8 B0 FD | 	call	#__system___float_fromuns
158b8     13 FB 61 F5 | 	xor	result1, local05
158bc     FD 12 02 F6 | 	mov	arg01, result1
158c0     0C 4E 05 F1 | 	add	fp, #12
158c4     A7 14 02 FB | 	rdlong	arg02, fp
158c8     0C 4E 85 F1 | 	sub	fp, #12
158cc     01 16 06 F6 | 	mov	arg03, #1
158d0     50 E0 B0 FD | 	call	#__system___float_cmp
158d4     00 FA 0D F2 | 	cmp	result1, #0 wz
158d8     00 1E 26 56 |  if_ne	not	local01, #0
158dc     A7 1E 62 FC | 	wrlong	local01, fp
158e0     8C 02 90 FD | 	jmp	#LR__1753
158e4                 | LR__1744
158e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
158e4     08 4E 05 F1 | 	add	fp, #8
158e8     A7 1E 02 FB | 	rdlong	local01, fp
158ec     08 4E 85 F1 | 	sub	fp, #8
158f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
158f4     14 4E 05 A1 |  if_e	add	fp, #20
158f8     A7 24 02 AB |  if_e	rdlong	local04, fp
158fc     14 4E 85 A1 |  if_e	sub	fp, #20
15900     12 23 02 A6 |  if_e	mov	local03, local04
15904     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15908     24 00 90 5D |  if_ne	jmp	#LR__1745
1590c     00 1E 06 F6 | 	mov	local01, #0
15910     A7 20 02 FB | 	rdlong	local02, fp
15914     0C 4E 05 F1 | 	add	fp, #12
15918     A7 22 02 FB | 	rdlong	local03, fp
1591c     0C 4E 85 F1 | 	sub	fp, #12
15920     11 21 0A F2 | 	cmp	local02, local03 wz
15924     01 1E 66 56 |  if_ne	neg	local01, #1
15928     A7 1E 62 FC | 	wrlong	local01, fp
1592c     40 02 90 FD | 	jmp	#LR__1753
15930                 | LR__1745
15930                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
15930     08 4E 05 F1 | 	add	fp, #8
15934     A7 1E 02 FB | 	rdlong	local01, fp
15938     08 4E 85 F1 | 	sub	fp, #8
1593c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15940     14 4E 05 A1 |  if_e	add	fp, #20
15944     A7 24 02 AB |  if_e	rdlong	local04, fp
15948     14 4E 85 A1 |  if_e	sub	fp, #20
1594c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15950     24 00 90 5D |  if_ne	jmp	#LR__1746
15954     00 1E 06 F6 | 	mov	local01, #0
15958     A7 20 02 FB | 	rdlong	local02, fp
1595c     0C 4E 05 F1 | 	add	fp, #12
15960     A7 22 02 FB | 	rdlong	local03, fp
15964     0C 4E 85 F1 | 	sub	fp, #12
15968     11 21 0A F2 | 	cmp	local02, local03 wz
1596c     01 1E 66 56 |  if_ne	neg	local01, #1
15970     A7 1E 62 FC | 	wrlong	local01, fp
15974     F8 01 90 FD | 	jmp	#LR__1753
15978                 | LR__1746
15978                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
15978     08 4E 05 F1 | 	add	fp, #8
1597c     A7 1E 02 FB | 	rdlong	local01, fp
15980     08 4E 85 F1 | 	sub	fp, #8
15984     1D 1E 0E F2 | 	cmp	local01, #29 wz
15988     14 4E 05 A1 |  if_e	add	fp, #20
1598c     A7 22 02 AB |  if_e	rdlong	local03, fp
15990     14 4E 85 A1 |  if_e	sub	fp, #20
15994     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15998     34 00 90 5D |  if_ne	jmp	#LR__1747
1599c     00 1E 06 F6 | 	mov	local01, #0
159a0     A7 12 02 FB | 	rdlong	arg01, fp
159a4     44 D7 B0 FD | 	call	#__system___float_fromuns
159a8     FD 12 02 F6 | 	mov	arg01, result1
159ac     0C 4E 05 F1 | 	add	fp, #12
159b0     A7 14 02 FB | 	rdlong	arg02, fp
159b4     0C 4E 85 F1 | 	sub	fp, #12
159b8     01 16 06 F6 | 	mov	arg03, #1
159bc     64 DF B0 FD | 	call	#__system___float_cmp
159c0     00 FA 0D F2 | 	cmp	result1, #0 wz
159c4     00 1E 26 56 |  if_ne	not	local01, #0
159c8     A7 1E 62 FC | 	wrlong	local01, fp
159cc     A0 01 90 FD | 	jmp	#LR__1753
159d0                 | LR__1747
159d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
159d0     08 4E 05 F1 | 	add	fp, #8
159d4     A7 1E 02 FB | 	rdlong	local01, fp
159d8     08 4E 85 F1 | 	sub	fp, #8
159dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
159e0     14 4E 05 A1 |  if_e	add	fp, #20
159e4     A7 22 02 AB |  if_e	rdlong	local03, fp
159e8     14 4E 85 A1 |  if_e	sub	fp, #20
159ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
159f0     24 00 90 5D |  if_ne	jmp	#LR__1748
159f4     00 1E 06 F6 | 	mov	local01, #0
159f8     A7 20 02 FB | 	rdlong	local02, fp
159fc     0C 4E 05 F1 | 	add	fp, #12
15a00     A7 22 02 FB | 	rdlong	local03, fp
15a04     0C 4E 85 F1 | 	sub	fp, #12
15a08     11 21 0A F2 | 	cmp	local02, local03 wz
15a0c     01 1E 66 56 |  if_ne	neg	local01, #1
15a10     A7 1E 62 FC | 	wrlong	local01, fp
15a14     58 01 90 FD | 	jmp	#LR__1753
15a18                 | LR__1748
15a18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
15a18     08 4E 05 F1 | 	add	fp, #8
15a1c     A7 1E 02 FB | 	rdlong	local01, fp
15a20     08 4E 85 F1 | 	sub	fp, #8
15a24     1D 1E 0E F2 | 	cmp	local01, #29 wz
15a28     14 4E 05 A1 |  if_e	add	fp, #20
15a2c     A7 22 02 AB |  if_e	rdlong	local03, fp
15a30     14 4E 85 A1 |  if_e	sub	fp, #20
15a34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15a38     24 00 90 5D |  if_ne	jmp	#LR__1749
15a3c     00 1E 06 F6 | 	mov	local01, #0
15a40     A7 20 02 FB | 	rdlong	local02, fp
15a44     0C 4E 05 F1 | 	add	fp, #12
15a48     A7 22 02 FB | 	rdlong	local03, fp
15a4c     0C 4E 85 F1 | 	sub	fp, #12
15a50     11 21 0A F2 | 	cmp	local02, local03 wz
15a54     01 1E 66 56 |  if_ne	neg	local01, #1
15a58     A7 1E 62 FC | 	wrlong	local01, fp
15a5c     10 01 90 FD | 	jmp	#LR__1753
15a60                 | LR__1749
15a60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
15a60     08 4E 05 F1 | 	add	fp, #8
15a64     A7 1E 02 FB | 	rdlong	local01, fp
15a68     08 4E 85 F1 | 	sub	fp, #8
15a6c     2B 1E 0E F2 | 	cmp	local01, #43 wz
15a70     14 4E 05 A1 |  if_e	add	fp, #20
15a74     A7 22 02 AB |  if_e	rdlong	local03, fp
15a78     14 4E 85 A1 |  if_e	sub	fp, #20
15a7c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15a80     30 00 90 5D |  if_ne	jmp	#LR__1750
15a84     00 1E 06 F6 | 	mov	local01, #0
15a88     A7 12 02 FB | 	rdlong	arg01, fp
15a8c     0C 59 BF FD | 	call	#_convertstring
15a90     FD 12 02 F6 | 	mov	arg01, result1
15a94     0C 4E 05 F1 | 	add	fp, #12
15a98     A7 14 02 FB | 	rdlong	arg02, fp
15a9c     0C 4E 85 F1 | 	sub	fp, #12
15aa0     C0 AE B0 FD | 	call	#__system___string_cmp
15aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
15aa8     00 1E 26 56 |  if_ne	not	local01, #0
15aac     A7 1E 62 FC | 	wrlong	local01, fp
15ab0     BC 00 90 FD | 	jmp	#LR__1753
15ab4                 | LR__1750
15ab4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
15ab4     08 4E 05 F1 | 	add	fp, #8
15ab8     A7 1E 02 FB | 	rdlong	local01, fp
15abc     08 4E 85 F1 | 	sub	fp, #8
15ac0     1F 1E 0E F2 | 	cmp	local01, #31 wz
15ac4     14 4E 05 A1 |  if_e	add	fp, #20
15ac8     A7 22 02 AB |  if_e	rdlong	local03, fp
15acc     14 4E 85 A1 |  if_e	sub	fp, #20
15ad0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15ad4     34 00 90 5D |  if_ne	jmp	#LR__1751
15ad8     00 1E 06 F6 | 	mov	local01, #0
15adc     A7 20 02 FB | 	rdlong	local02, fp
15ae0     0C 4E 05 F1 | 	add	fp, #12
15ae4     A7 12 02 FB | 	rdlong	arg01, fp
15ae8     0C 4E 85 F1 | 	sub	fp, #12
15aec     AC 58 BF FD | 	call	#_convertstring
15af0     FD 14 02 F6 | 	mov	arg02, result1
15af4     10 13 02 F6 | 	mov	arg01, local02
15af8     68 AE B0 FD | 	call	#__system___string_cmp
15afc     00 FA 0D F2 | 	cmp	result1, #0 wz
15b00     00 1E 26 56 |  if_ne	not	local01, #0
15b04     A7 1E 62 FC | 	wrlong	local01, fp
15b08     64 00 90 FD | 	jmp	#LR__1753
15b0c                 | LR__1751
15b0c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
15b0c     08 4E 05 F1 | 	add	fp, #8
15b10     A7 1E 02 FB | 	rdlong	local01, fp
15b14     08 4E 85 F1 | 	sub	fp, #8
15b18     2B 1E 0E F2 | 	cmp	local01, #43 wz
15b1c     14 4E 05 A1 |  if_e	add	fp, #20
15b20     A7 22 02 AB |  if_e	rdlong	local03, fp
15b24     14 4E 85 A1 |  if_e	sub	fp, #20
15b28     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15b2c     3C 00 90 5D |  if_ne	jmp	#LR__1752
15b30     00 1E 06 F6 | 	mov	local01, #0
15b34     A7 12 02 FB | 	rdlong	arg01, fp
15b38     60 58 BF FD | 	call	#_convertstring
15b3c     FD 20 02 F6 | 	mov	local02, result1
15b40     0C 4E 05 F1 | 	add	fp, #12
15b44     A7 12 02 FB | 	rdlong	arg01, fp
15b48     0C 4E 85 F1 | 	sub	fp, #12
15b4c     4C 58 BF FD | 	call	#_convertstring
15b50     FD 14 02 F6 | 	mov	arg02, result1
15b54     10 13 02 F6 | 	mov	arg01, local02
15b58     08 AE B0 FD | 	call	#__system___string_cmp
15b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
15b60     00 1E 26 56 |  if_ne	not	local01, #0
15b64     A7 1E 62 FC | 	wrlong	local01, fp
15b68     04 00 90 FD | 	jmp	#LR__1753
15b6c                 | LR__1752
15b6c     A7 00 68 FC | 	wrlong	#0, fp
15b70                 | LR__1753
15b70     08 4E 05 F1 | 	add	fp, #8
15b74     A7 38 68 FC | 	wrlong	#28, fp
15b78     08 4E 85 F1 | 	sub	fp, #8
15b7c     A7 12 02 F6 | 	mov	arg01, fp
15b80     38 57 BF FD | 	call	#_push
15b84     A7 F0 03 F6 | 	mov	ptra, fp
15b88     B2 00 A0 FD | 	call	#popregs_
15b8c                 | _do_ne_ret
15b8c     2D 00 64 FD | 	ret
15b90                 | 
15b90                 | ' 
15b90                 | ' 
15b90                 | ' 
15b90                 | ' 
15b90                 | ' sub do_rnd
15b90                 | _do_rnd
15b90     01 4A 05 F6 | 	mov	COUNT_, #1
15b94     A8 00 A0 FD | 	call	#pushregs_
15b98     10 F0 07 F1 | 	add	ptra, #16
15b9c     4A 00 00 FF 
15ba0     80 E4 05 F1 | 	add	objptr, ##38016
15ba4     F2 1E 02 FB | 	rdlong	local01, objptr
15ba8     0F 17 02 F6 | 	mov	arg03, local01
15bac     01 16 66 F0 | 	shl	arg03, #1
15bb0     0F 17 02 F1 | 	add	arg03, local01
15bb4     02 16 66 F0 | 	shl	arg03, #2
15bb8     03 00 00 FF 
15bbc     04 E4 85 F1 | 	sub	objptr, ##1540
15bc0     F2 16 02 F1 | 	add	arg03, objptr
15bc4     0B 17 02 FB | 	rdlong	arg03, arg03
15bc8     0C 4E 05 F1 | 	add	fp, #12
15bcc     A7 16 62 FC | 	wrlong	arg03, fp
15bd0                 | ' 
15bd0                 | ' numpar=compiledline(lineptr_e).result.uresult
15bd0                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15bd0     0C 4E 85 F1 | 	sub	fp, #12
15bd4     02 16 16 F2 | 	cmp	arg03, #2 wc
15bd8     47 00 00 FF 
15bdc     7C E4 85 F1 | 	sub	objptr, ##36476
15be0     3C 00 90 CD |  if_b	jmp	#LR__1760
15be4     00 12 06 F6 | 	mov	arg01, #0
15be8     B4 07 B1 FD | 	call	#__system___getiolock_0540
15bec     FD 12 02 F6 | 	mov	arg01, result1
15bf0     48 AD B0 FD | 	call	#__system___lockmem
15bf4     84 01 00 FF 
15bf8     3C 15 06 F6 | 	mov	arg02, ##@LR__5483
15bfc     00 12 06 F6 | 	mov	arg01, #0
15c00     00 16 06 F6 | 	mov	arg03, #0
15c04     28 BA B0 FD | 	call	#__system___basic_print_string
15c08     00 12 06 F6 | 	mov	arg01, #0
15c0c     90 07 B1 FD | 	call	#__system___getiolock_0540
15c10     FD 00 68 FC | 	wrlong	#0, result1
15c14     27 12 06 F6 | 	mov	arg01, #39
15c18     90 77 B0 FD | 	call	#_printerror
15c1c     2C 01 90 FD | 	jmp	#LR__1767
15c20                 | LR__1760
15c20                 | ' if numpar=0 then
15c20     0C 4E 05 F1 | 	add	fp, #12
15c24     A7 FE 09 FB | 	rdlong	result3, fp wz
15c28     0C 4E 85 F1 | 	sub	fp, #12
15c2c     20 00 90 5D |  if_ne	jmp	#LR__1761
15c30     08 4E 05 F1 | 	add	fp, #8
15c34     A7 3A 68 FC | 	wrlong	#29, fp
15c38     08 4E 85 F1 | 	sub	fp, #8
15c3c     1B FA 61 FD | 	getrnd	result1
15c40     A7 FA 61 FC | 	wrlong	result1, fp
15c44     A7 12 02 F6 | 	mov	arg01, fp
15c48     70 56 BF FD | 	call	#_push
15c4c     FC 00 90 FD | 	jmp	#LR__1766
15c50                 | LR__1761
15c50     D0 55 BF FD | 	call	#_pop
15c54     A7 FA 61 FC | 	wrlong	result1, fp
15c58     04 4E 05 F1 | 	add	fp, #4
15c5c     A7 FC 61 FC | 	wrlong	result2, fp
15c60     04 4E 05 F1 | 	add	fp, #4
15c64     A7 FE 61 FC | 	wrlong	result3, fp
15c68                 | '   t1=pop()
15c68                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15c68     08 4E 85 F1 | 	sub	fp, #8
15c6c     1C FE 0D F2 | 	cmp	result3, #28 wz
15c70     08 4E 05 51 |  if_ne	add	fp, #8
15c74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15c78     08 4E 85 51 |  if_ne	sub	fp, #8
15c7c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15c80     2C 00 90 5D |  if_ne	jmp	#LR__1762
15c84     1B FA 61 FD | 	getrnd	result1
15c88     A7 1E 02 FB | 	rdlong	local01, fp
15c8c     0F FB 11 FD | 	qdiv	result1, local01
15c90     A7 12 02 F6 | 	mov	arg01, fp
15c94     19 1E 62 FD | 	getqy	local01
15c98     A7 1E 62 FC | 	wrlong	local01, fp
15c9c     08 4E 05 F1 | 	add	fp, #8
15ca0     A7 3A 68 FC | 	wrlong	#29, fp
15ca4     08 4E 85 F1 | 	sub	fp, #8
15ca8     10 56 BF FD | 	call	#_push
15cac     9C 00 90 FD | 	jmp	#LR__1765
15cb0                 | LR__1762
15cb0     08 4E 05 F1 | 	add	fp, #8
15cb4     A7 1E 02 FB | 	rdlong	local01, fp
15cb8     08 4E 85 F1 | 	sub	fp, #8
15cbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
15cc0     48 00 90 5D |  if_ne	jmp	#LR__1763
15cc4     A7 12 02 FB | 	rdlong	arg01, fp
15cc8     00 C0 24 FF 
15ccc     00 14 06 F6 | 	mov	arg02, ##1233125376
15cd0     20 DA B0 FD | 	call	#__system___float_div
15cd4     FD 1E 02 F6 | 	mov	local01, result1
15cd8     1B 12 62 FD | 	getrnd	arg01
15cdc     74 13 06 F4 | 	bitl	arg01, #372
15ce0     08 D4 B0 FD | 	call	#__system___float_fromuns
15ce4     FD 14 02 F6 | 	mov	arg02, result1
15ce8     0F 13 02 F6 | 	mov	arg01, local01
15cec     00 D8 B0 FD | 	call	#__system___float_mul
15cf0     A7 FA 61 FC | 	wrlong	result1, fp
15cf4     08 4E 05 F1 | 	add	fp, #8
15cf8     A7 3C 68 FC | 	wrlong	#30, fp
15cfc     08 4E 85 F1 | 	sub	fp, #8
15d00     A7 12 02 F6 | 	mov	arg01, fp
15d04     B4 55 BF FD | 	call	#_push
15d08     40 00 90 FD | 	jmp	#LR__1764
15d0c                 | LR__1763
15d0c                 | '     print "rnd: "; : printerror(40) 
15d0c     00 12 06 F6 | 	mov	arg01, #0
15d10     8C 06 B1 FD | 	call	#__system___getiolock_0540
15d14     FD 12 02 F6 | 	mov	arg01, result1
15d18     20 AC B0 FD | 	call	#__system___lockmem
15d1c     84 01 00 FF 
15d20     42 15 06 F6 | 	mov	arg02, ##@LR__5484
15d24     00 12 06 F6 | 	mov	arg01, #0
15d28     00 16 06 F6 | 	mov	arg03, #0
15d2c     00 B9 B0 FD | 	call	#__system___basic_print_string
15d30     00 12 06 F6 | 	mov	arg01, #0
15d34     68 06 B1 FD | 	call	#__system___getiolock_0540
15d38     FD 00 68 FC | 	wrlong	#0, result1
15d3c     28 12 06 F6 | 	mov	arg01, #40
15d40     68 76 B0 FD | 	call	#_printerror
15d44     A7 12 02 F6 | 	mov	arg01, fp
15d48     70 55 BF FD | 	call	#_push
15d4c                 | LR__1764
15d4c                 | LR__1765
15d4c                 | LR__1766
15d4c                 | LR__1767
15d4c     A7 F0 03 F6 | 	mov	ptra, fp
15d50     B2 00 A0 FD | 	call	#popregs_
15d54                 | _do_rnd_ret
15d54     2D 00 64 FD | 	ret
15d58                 | 
15d58                 | ' 
15d58                 | ' sub do_getenvsustain
15d58                 | _do_getenvsustain
15d58     01 4A 05 F6 | 	mov	COUNT_, #1
15d5c     A8 00 A0 FD | 	call	#pushregs_
15d60     10 F0 07 F1 | 	add	ptra, #16
15d64     4A 00 00 FF 
15d68     80 E4 05 F1 | 	add	objptr, ##38016
15d6c     F2 1E 02 FB | 	rdlong	local01, objptr
15d70     0F 17 02 F6 | 	mov	arg03, local01
15d74     01 16 66 F0 | 	shl	arg03, #1
15d78     0F 17 02 F1 | 	add	arg03, local01
15d7c     02 16 66 F0 | 	shl	arg03, #2
15d80     03 00 00 FF 
15d84     04 E4 85 F1 | 	sub	objptr, ##1540
15d88     F2 16 02 F1 | 	add	arg03, objptr
15d8c     0B 17 02 FB | 	rdlong	arg03, arg03
15d90     0C 4E 05 F1 | 	add	fp, #12
15d94     A7 16 62 FC | 	wrlong	arg03, fp
15d98                 | ' 
15d98                 | ' numpar=compiledline(lineptr_e).result.uresult
15d98                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
15d98     0C 4E 85 F1 | 	sub	fp, #12
15d9c     02 16 16 F2 | 	cmp	arg03, #2 wc
15da0     47 00 00 FF 
15da4     7C E4 85 F1 | 	sub	objptr, ##36476
15da8     0C 4E 05 C1 |  if_b	add	fp, #12
15dac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15db0     0C 4E 85 C1 |  if_b	sub	fp, #12
15db4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15db8     00 12 06 F6 | 	mov	arg01, #0
15dbc     E0 05 B1 FD | 	call	#__system___getiolock_0540
15dc0     FD 12 02 F6 | 	mov	arg01, result1
15dc4     74 AB B0 FD | 	call	#__system___lockmem
15dc8     84 01 00 FF 
15dcc     48 15 06 F6 | 	mov	arg02, ##@LR__5485
15dd0     00 12 06 F6 | 	mov	arg01, #0
15dd4     00 16 06 F6 | 	mov	arg03, #0
15dd8     54 B8 B0 FD | 	call	#__system___basic_print_string
15ddc     00 12 06 F6 | 	mov	arg01, #0
15de0     BC 05 B1 FD | 	call	#__system___getiolock_0540
15de4     FD 00 68 FC | 	wrlong	#0, result1
15de8     27 12 06 F6 | 	mov	arg01, #39
15dec     BC 75 B0 FD | 	call	#_printerror
15df0     64 00 90 FD | 	jmp	#LR__1771
15df4                 | LR__1770
15df4     2C 54 BF FD | 	call	#_pop
15df8     FD 1E 02 F6 | 	mov	local01, result1
15dfc     FE 16 02 F6 | 	mov	arg03, result2
15e00     A7 1E 62 FC | 	wrlong	local01, fp
15e04     04 4E 05 F1 | 	add	fp, #4
15e08     A7 16 62 FC | 	wrlong	arg03, fp
15e0c     04 4E 05 F1 | 	add	fp, #4
15e10     A7 FE 61 FC | 	wrlong	result3, fp
15e14     08 4E 85 F1 | 	sub	fp, #8
15e18     A7 12 02 F6 | 	mov	arg01, fp
15e1c     E8 55 BF FD | 	call	#_converttoint
15e20     FD 1E 02 F6 | 	mov	local01, result1
15e24     01 1E 66 F0 | 	shl	local01, #1
15e28     51 00 00 FF 
15e2c     C8 E5 05 F1 | 	add	objptr, ##41928
15e30     F2 1E 02 F1 | 	add	local01, objptr
15e34     0F 1F E2 FA | 	rdword	local01, local01
15e38     A7 1E 62 FC | 	wrlong	local01, fp
15e3c     08 4E 05 F1 | 	add	fp, #8
15e40     A7 38 68 FC | 	wrlong	#28, fp
15e44     08 4E 85 F1 | 	sub	fp, #8
15e48     A7 12 02 F6 | 	mov	arg01, fp
15e4c     51 00 00 FF 
15e50     C8 E5 85 F1 | 	sub	objptr, ##41928
15e54     64 54 BF FD | 	call	#_push
15e58                 | LR__1771
15e58     A7 F0 03 F6 | 	mov	ptra, fp
15e5c     B2 00 A0 FD | 	call	#popregs_
15e60                 | _do_getenvsustain_ret
15e60     2D 00 64 FD | 	ret
15e64                 | 
15e64                 | ' 
15e64                 | ' sub do_sin
15e64                 | _do_sin
15e64     01 4A 05 F6 | 	mov	COUNT_, #1
15e68     A8 00 A0 FD | 	call	#pushregs_
15e6c     10 F0 07 F1 | 	add	ptra, #16
15e70     4A 00 00 FF 
15e74     80 E4 05 F1 | 	add	objptr, ##38016
15e78     F2 1E 02 FB | 	rdlong	local01, objptr
15e7c     0F 17 02 F6 | 	mov	arg03, local01
15e80     01 16 66 F0 | 	shl	arg03, #1
15e84     0F 17 02 F1 | 	add	arg03, local01
15e88     02 16 66 F0 | 	shl	arg03, #2
15e8c     03 00 00 FF 
15e90     04 E4 85 F1 | 	sub	objptr, ##1540
15e94     F2 16 02 F1 | 	add	arg03, objptr
15e98     0B 17 02 FB | 	rdlong	arg03, arg03
15e9c     0C 4E 05 F1 | 	add	fp, #12
15ea0     A7 16 62 FC | 	wrlong	arg03, fp
15ea4                 | ' 
15ea4                 | ' numpar=compiledline(lineptr_e).result.uresult
15ea4                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
15ea4     0C 4E 85 F1 | 	sub	fp, #12
15ea8     02 16 16 F2 | 	cmp	arg03, #2 wc
15eac     47 00 00 FF 
15eb0     7C E4 85 F1 | 	sub	objptr, ##36476
15eb4     0C 4E 05 C1 |  if_b	add	fp, #12
15eb8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15ebc     0C 4E 85 C1 |  if_b	sub	fp, #12
15ec0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15ec4     00 12 06 F6 | 	mov	arg01, #0
15ec8     D4 04 B1 FD | 	call	#__system___getiolock_0540
15ecc     FD 12 02 F6 | 	mov	arg01, result1
15ed0     68 AA B0 FD | 	call	#__system___lockmem
15ed4     84 01 00 FF 
15ed8     58 15 06 F6 | 	mov	arg02, ##@LR__5486
15edc     00 12 06 F6 | 	mov	arg01, #0
15ee0     00 16 06 F6 | 	mov	arg03, #0
15ee4     48 B7 B0 FD | 	call	#__system___basic_print_string
15ee8     00 12 06 F6 | 	mov	arg01, #0
15eec     B0 04 B1 FD | 	call	#__system___getiolock_0540
15ef0     FD 00 68 FC | 	wrlong	#0, result1
15ef4     27 12 06 F6 | 	mov	arg01, #39
15ef8     B0 74 B0 FD | 	call	#_printerror
15efc     64 00 90 FD | 	jmp	#LR__1781
15f00                 | LR__1780
15f00     20 53 BF FD | 	call	#_pop
15f04     A7 FA 61 FC | 	wrlong	result1, fp
15f08     04 4E 05 F1 | 	add	fp, #4
15f0c     A7 FC 61 FC | 	wrlong	result2, fp
15f10     04 4E 05 F1 | 	add	fp, #4
15f14     A7 FE 61 FC | 	wrlong	result3, fp
15f18     08 4E 85 F1 | 	sub	fp, #8
15f1c     51 00 00 FF 
15f20     BC E5 05 F1 | 	add	objptr, ##41916
15f24     F2 1E 02 FB | 	rdlong	local01, objptr
15f28     51 00 00 FF 
15f2c     BC E5 85 F1 | 	sub	objptr, ##41916
15f30     A7 12 02 F6 | 	mov	arg01, fp
15f34     8C 55 BF FD | 	call	#_converttofloat
15f38     FD 14 02 F6 | 	mov	arg02, result1
15f3c     0F 13 02 F6 | 	mov	arg01, local01
15f40     AC D5 B0 FD | 	call	#__system___float_mul
15f44     FD 12 02 F6 | 	mov	arg01, result1
15f48     04 DF B0 FD | 	call	#__system____builtin_sinf
15f4c     A7 FA 61 FC | 	wrlong	result1, fp
15f50     08 4E 05 F1 | 	add	fp, #8
15f54     A7 3C 68 FC | 	wrlong	#30, fp
15f58     08 4E 85 F1 | 	sub	fp, #8
15f5c     A7 12 02 F6 | 	mov	arg01, fp
15f60     58 53 BF FD | 	call	#_push
15f64                 | LR__1781
15f64     A7 F0 03 F6 | 	mov	ptra, fp
15f68     B2 00 A0 FD | 	call	#popregs_
15f6c                 | _do_sin_ret
15f6c     2D 00 64 FD | 	ret
15f70                 | 
15f70                 | ' 
15f70                 | ' 
15f70                 | ' sub do_mid
15f70                 | _do_mid
15f70     00 4A 05 F6 | 	mov	COUNT_, #0
15f74     A8 00 A0 FD | 	call	#pushregs_
15f78     18 F0 07 F1 | 	add	ptra, #24
15f7c     4A 00 00 FF 
15f80     80 E4 05 F1 | 	add	objptr, ##38016
15f84     F2 16 02 FB | 	rdlong	arg03, objptr
15f88     0B 15 02 F6 | 	mov	arg02, arg03
15f8c     01 14 66 F0 | 	shl	arg02, #1
15f90     0B 15 02 F1 | 	add	arg02, arg03
15f94     02 14 66 F0 | 	shl	arg02, #2
15f98     03 00 00 FF 
15f9c     04 E4 85 F1 | 	sub	objptr, ##1540
15fa0     F2 14 02 F1 | 	add	arg02, objptr
15fa4     0A 17 02 FB | 	rdlong	arg03, arg02
15fa8     0C 4E 05 F1 | 	add	fp, #12
15fac     A7 16 62 FC | 	wrlong	arg03, fp
15fb0                 | ' 
15fb0                 | ' numpar=compiledline(lineptr_e).result.uresult
15fb0                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15fb0     0C 4E 85 F1 | 	sub	fp, #12
15fb4     03 16 0E F2 | 	cmp	arg03, #3 wz
15fb8     47 00 00 FF 
15fbc     7C E4 85 F1 | 	sub	objptr, ##36476
15fc0     3C 00 90 AD |  if_e	jmp	#LR__1790
15fc4     00 12 06 F6 | 	mov	arg01, #0
15fc8     D4 03 B1 FD | 	call	#__system___getiolock_0540
15fcc     FD 12 02 F6 | 	mov	arg01, result1
15fd0     68 A9 B0 FD | 	call	#__system___lockmem
15fd4     84 01 00 FF 
15fd8     5E 15 06 F6 | 	mov	arg02, ##@LR__5487
15fdc     00 12 06 F6 | 	mov	arg01, #0
15fe0     00 16 06 F6 | 	mov	arg03, #0
15fe4     48 B6 B0 FD | 	call	#__system___basic_print_string
15fe8     00 12 06 F6 | 	mov	arg01, #0
15fec     B0 03 B1 FD | 	call	#__system___getiolock_0540
15ff0     FD 00 68 FC | 	wrlong	#0, result1
15ff4     27 12 06 F6 | 	mov	arg01, #39
15ff8     B0 73 B0 FD | 	call	#_printerror
15ffc     28 01 90 FD | 	jmp	#LR__1793
16000                 | LR__1790
16000     20 52 BF FD | 	call	#_pop
16004     FF 16 02 F6 | 	mov	arg03, result3
16008     A7 FA 61 FC | 	wrlong	result1, fp
1600c     04 4E 05 F1 | 	add	fp, #4
16010     A7 FC 61 FC | 	wrlong	result2, fp
16014     04 4E 05 F1 | 	add	fp, #4
16018     A7 16 62 FC | 	wrlong	arg03, fp
1601c     08 4E 85 F1 | 	sub	fp, #8
16020     A7 12 02 F6 | 	mov	arg01, fp
16024     E0 53 BF FD | 	call	#_converttoint
16028     FD 16 02 F6 | 	mov	arg03, result1
1602c     14 4E 05 F1 | 	add	fp, #20
16030     A7 16 62 FC | 	wrlong	arg03, fp
16034     14 4E 85 F1 | 	sub	fp, #20
16038     E8 51 BF FD | 	call	#_pop
1603c     FF 16 02 F6 | 	mov	arg03, result3
16040     A7 FA 61 FC | 	wrlong	result1, fp
16044     04 4E 05 F1 | 	add	fp, #4
16048     A7 FC 61 FC | 	wrlong	result2, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 16 62 FC | 	wrlong	arg03, fp
16054     08 4E 85 F1 | 	sub	fp, #8
16058     A7 12 02 F6 | 	mov	arg01, fp
1605c     A8 53 BF FD | 	call	#_converttoint
16060     FD 16 02 F6 | 	mov	arg03, result1
16064     10 4E 05 F1 | 	add	fp, #16
16068     A7 16 62 FC | 	wrlong	arg03, fp
1606c     10 4E 85 F1 | 	sub	fp, #16
16070     B0 51 BF FD | 	call	#_pop
16074     FF 16 02 F6 | 	mov	arg03, result3
16078     A7 FA 61 FC | 	wrlong	result1, fp
1607c     04 4E 05 F1 | 	add	fp, #4
16080     A7 FC 61 FC | 	wrlong	result2, fp
16084     04 4E 05 F1 | 	add	fp, #4
16088     A7 16 62 FC | 	wrlong	arg03, fp
1608c                 | ' t1=pop() : arg2=converttoint(t1)
1608c                 | ' t1=pop() : arg1=converttoint(t1)
1608c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1608c     08 4E 85 F1 | 	sub	fp, #8
16090     2B 16 0E F2 | 	cmp	arg03, #43 wz
16094     18 00 90 5D |  if_ne	jmp	#LR__1791
16098     A7 12 02 FB | 	rdlong	arg01, fp
1609c     FC 52 BF FD | 	call	#_convertstring
160a0     A7 FA 61 FC | 	wrlong	result1, fp
160a4     08 4E 05 F1 | 	add	fp, #8
160a8     A7 3E 68 FC | 	wrlong	#31, fp
160ac     08 4E 85 F1 | 	sub	fp, #8
160b0                 | LR__1791
160b0                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
160b0     08 4E 05 F1 | 	add	fp, #8
160b4     A7 16 02 FB | 	rdlong	arg03, fp
160b8     08 4E 85 F1 | 	sub	fp, #8
160bc     1F 16 0E F2 | 	cmp	arg03, #31 wz
160c0     3C 00 90 AD |  if_e	jmp	#LR__1792
160c4     00 12 06 F6 | 	mov	arg01, #0
160c8     D4 02 B1 FD | 	call	#__system___getiolock_0540
160cc     FD 12 02 F6 | 	mov	arg01, result1
160d0     68 A8 B0 FD | 	call	#__system___lockmem
160d4     84 01 00 FF 
160d8     65 15 06 F6 | 	mov	arg02, ##@LR__5488
160dc     00 12 06 F6 | 	mov	arg01, #0
160e0     00 16 06 F6 | 	mov	arg03, #0
160e4     48 B5 B0 FD | 	call	#__system___basic_print_string
160e8     00 12 06 F6 | 	mov	arg01, #0
160ec     B0 02 B1 FD | 	call	#__system___getiolock_0540
160f0     FD 00 68 FC | 	wrlong	#0, result1
160f4     0F 12 06 F6 | 	mov	arg01, #15
160f8     B0 72 B0 FD | 	call	#_printerror
160fc     28 00 90 FD | 	jmp	#LR__1793
16100                 | LR__1792
16100     A7 12 02 FB | 	rdlong	arg01, fp
16104     10 4E 05 F1 | 	add	fp, #16
16108     A7 14 02 FB | 	rdlong	arg02, fp
1610c     04 4E 05 F1 | 	add	fp, #4
16110     A7 16 02 FB | 	rdlong	arg03, fp
16114     14 4E 85 F1 | 	sub	fp, #20
16118     B4 C9 B0 FD | 	call	#__system__Mid_S
1611c     A7 FA 61 FC | 	wrlong	result1, fp
16120     A7 12 02 F6 | 	mov	arg01, fp
16124     94 51 BF FD | 	call	#_push
16128                 | LR__1793
16128     A7 F0 03 F6 | 	mov	ptra, fp
1612c     B2 00 A0 FD | 	call	#popregs_
16130                 | _do_mid_ret
16130     2D 00 64 FD | 	ret
16134                 | 
16134                 | ' 
16134                 | ' sub do_right
16134                 | _do_right
16134     00 4A 05 F6 | 	mov	COUNT_, #0
16138     A8 00 A0 FD | 	call	#pushregs_
1613c     14 F0 07 F1 | 	add	ptra, #20
16140     4A 00 00 FF 
16144     80 E4 05 F1 | 	add	objptr, ##38016
16148     F2 16 02 FB | 	rdlong	arg03, objptr
1614c     0B 15 02 F6 | 	mov	arg02, arg03
16150     01 14 66 F0 | 	shl	arg02, #1
16154     0B 15 02 F1 | 	add	arg02, arg03
16158     02 14 66 F0 | 	shl	arg02, #2
1615c     03 00 00 FF 
16160     04 E4 85 F1 | 	sub	objptr, ##1540
16164     F2 14 02 F1 | 	add	arg02, objptr
16168     0A 17 02 FB | 	rdlong	arg03, arg02
1616c     0C 4E 05 F1 | 	add	fp, #12
16170     A7 16 62 FC | 	wrlong	arg03, fp
16174                 | ' 
16174                 | ' numpar=compiledline(lineptr_e).result.uresult
16174                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
16174     0C 4E 85 F1 | 	sub	fp, #12
16178     02 16 0E F2 | 	cmp	arg03, #2 wz
1617c     47 00 00 FF 
16180     7C E4 85 F1 | 	sub	objptr, ##36476
16184     3C 00 90 AD |  if_e	jmp	#LR__1800
16188     00 12 06 F6 | 	mov	arg01, #0
1618c     10 02 B1 FD | 	call	#__system___getiolock_0540
16190     FD 12 02 F6 | 	mov	arg01, result1
16194     A4 A7 B0 FD | 	call	#__system___lockmem
16198     84 01 00 FF 
1619c     6C 15 06 F6 | 	mov	arg02, ##@LR__5489
161a0     00 12 06 F6 | 	mov	arg01, #0
161a4     00 16 06 F6 | 	mov	arg03, #0
161a8     84 B4 B0 FD | 	call	#__system___basic_print_string
161ac     00 12 06 F6 | 	mov	arg01, #0
161b0     EC 01 B1 FD | 	call	#__system___getiolock_0540
161b4     FD 00 68 FC | 	wrlong	#0, result1
161b8     27 12 06 F6 | 	mov	arg01, #39
161bc     EC 71 B0 FD | 	call	#_printerror
161c0     E8 00 90 FD | 	jmp	#LR__1803
161c4                 | LR__1800
161c4     5C 50 BF FD | 	call	#_pop
161c8     FF 16 02 F6 | 	mov	arg03, result3
161cc     A7 FA 61 FC | 	wrlong	result1, fp
161d0     04 4E 05 F1 | 	add	fp, #4
161d4     A7 FC 61 FC | 	wrlong	result2, fp
161d8     04 4E 05 F1 | 	add	fp, #4
161dc     A7 16 62 FC | 	wrlong	arg03, fp
161e0     08 4E 85 F1 | 	sub	fp, #8
161e4     A7 12 02 F6 | 	mov	arg01, fp
161e8     1C 52 BF FD | 	call	#_converttoint
161ec     FD 16 02 F6 | 	mov	arg03, result1
161f0     10 4E 05 F1 | 	add	fp, #16
161f4     A7 16 62 FC | 	wrlong	arg03, fp
161f8     10 4E 85 F1 | 	sub	fp, #16
161fc     24 50 BF FD | 	call	#_pop
16200     FF 16 02 F6 | 	mov	arg03, result3
16204     A7 FA 61 FC | 	wrlong	result1, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 FC 61 FC | 	wrlong	result2, fp
16210     04 4E 05 F1 | 	add	fp, #4
16214     A7 16 62 FC | 	wrlong	arg03, fp
16218                 | ' t1=pop() : arg=converttoint(t1)
16218                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16218     08 4E 85 F1 | 	sub	fp, #8
1621c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16220     18 00 90 5D |  if_ne	jmp	#LR__1801
16224     A7 12 02 FB | 	rdlong	arg01, fp
16228     70 51 BF FD | 	call	#_convertstring
1622c     A7 FA 61 FC | 	wrlong	result1, fp
16230     08 4E 05 F1 | 	add	fp, #8
16234     A7 3E 68 FC | 	wrlong	#31, fp
16238     08 4E 85 F1 | 	sub	fp, #8
1623c                 | LR__1801
1623c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1623c     08 4E 05 F1 | 	add	fp, #8
16240     A7 16 02 FB | 	rdlong	arg03, fp
16244     08 4E 85 F1 | 	sub	fp, #8
16248     1F 16 0E F2 | 	cmp	arg03, #31 wz
1624c     3C 00 90 AD |  if_e	jmp	#LR__1802
16250     00 12 06 F6 | 	mov	arg01, #0
16254     48 01 B1 FD | 	call	#__system___getiolock_0540
16258     FD 12 02 F6 | 	mov	arg01, result1
1625c     DC A6 B0 FD | 	call	#__system___lockmem
16260     84 01 00 FF 
16264     75 15 06 F6 | 	mov	arg02, ##@LR__5490
16268     00 12 06 F6 | 	mov	arg01, #0
1626c     00 16 06 F6 | 	mov	arg03, #0
16270     BC B3 B0 FD | 	call	#__system___basic_print_string
16274     00 12 06 F6 | 	mov	arg01, #0
16278     24 01 B1 FD | 	call	#__system___getiolock_0540
1627c     FD 00 68 FC | 	wrlong	#0, result1
16280     0F 12 06 F6 | 	mov	arg01, #15
16284     24 71 B0 FD | 	call	#_printerror
16288     20 00 90 FD | 	jmp	#LR__1803
1628c                 | LR__1802
1628c     A7 12 02 FB | 	rdlong	arg01, fp
16290     10 4E 05 F1 | 	add	fp, #16
16294     A7 14 02 FB | 	rdlong	arg02, fp
16298     10 4E 85 F1 | 	sub	fp, #16
1629c     A0 C7 B0 FD | 	call	#__system__Right_S
162a0     A7 FA 61 FC | 	wrlong	result1, fp
162a4     A7 12 02 F6 | 	mov	arg01, fp
162a8     10 50 BF FD | 	call	#_push
162ac                 | LR__1803
162ac     A7 F0 03 F6 | 	mov	ptra, fp
162b0     B2 00 A0 FD | 	call	#popregs_
162b4                 | _do_right_ret
162b4     2D 00 64 FD | 	ret
162b8                 | 
162b8                 | ' 
162b8                 | ' sub do_left
162b8                 | _do_left
162b8     00 4A 05 F6 | 	mov	COUNT_, #0
162bc     A8 00 A0 FD | 	call	#pushregs_
162c0     14 F0 07 F1 | 	add	ptra, #20
162c4     4A 00 00 FF 
162c8     80 E4 05 F1 | 	add	objptr, ##38016
162cc     F2 16 02 FB | 	rdlong	arg03, objptr
162d0     0B 15 02 F6 | 	mov	arg02, arg03
162d4     01 14 66 F0 | 	shl	arg02, #1
162d8     0B 15 02 F1 | 	add	arg02, arg03
162dc     02 14 66 F0 | 	shl	arg02, #2
162e0     03 00 00 FF 
162e4     04 E4 85 F1 | 	sub	objptr, ##1540
162e8     F2 14 02 F1 | 	add	arg02, objptr
162ec     0A 17 02 FB | 	rdlong	arg03, arg02
162f0     0C 4E 05 F1 | 	add	fp, #12
162f4     A7 16 62 FC | 	wrlong	arg03, fp
162f8                 | ' 
162f8                 | ' numpar=compiledline(lineptr_e).result.uresult
162f8                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
162f8     0C 4E 85 F1 | 	sub	fp, #12
162fc     02 16 0E F2 | 	cmp	arg03, #2 wz
16300     47 00 00 FF 
16304     7C E4 85 F1 | 	sub	objptr, ##36476
16308     3C 00 90 AD |  if_e	jmp	#LR__1810
1630c     00 12 06 F6 | 	mov	arg01, #0
16310     8C 00 B1 FD | 	call	#__system___getiolock_0540
16314     FD 12 02 F6 | 	mov	arg01, result1
16318     20 A6 B0 FD | 	call	#__system___lockmem
1631c     84 01 00 FF 
16320     7E 15 06 F6 | 	mov	arg02, ##@LR__5491
16324     00 12 06 F6 | 	mov	arg01, #0
16328     00 16 06 F6 | 	mov	arg03, #0
1632c     00 B3 B0 FD | 	call	#__system___basic_print_string
16330     00 12 06 F6 | 	mov	arg01, #0
16334     68 00 B1 FD | 	call	#__system___getiolock_0540
16338     FD 00 68 FC | 	wrlong	#0, result1
1633c     27 12 06 F6 | 	mov	arg01, #39
16340     68 70 B0 FD | 	call	#_printerror
16344     E8 00 90 FD | 	jmp	#LR__1813
16348                 | LR__1810
16348     D8 4E BF FD | 	call	#_pop
1634c     FF 16 02 F6 | 	mov	arg03, result3
16350     A7 FA 61 FC | 	wrlong	result1, fp
16354     04 4E 05 F1 | 	add	fp, #4
16358     A7 FC 61 FC | 	wrlong	result2, fp
1635c     04 4E 05 F1 | 	add	fp, #4
16360     A7 16 62 FC | 	wrlong	arg03, fp
16364     08 4E 85 F1 | 	sub	fp, #8
16368     A7 12 02 F6 | 	mov	arg01, fp
1636c     98 50 BF FD | 	call	#_converttoint
16370     FD 16 02 F6 | 	mov	arg03, result1
16374     10 4E 05 F1 | 	add	fp, #16
16378     A7 16 62 FC | 	wrlong	arg03, fp
1637c     10 4E 85 F1 | 	sub	fp, #16
16380     A0 4E BF FD | 	call	#_pop
16384     FF 16 02 F6 | 	mov	arg03, result3
16388     A7 FA 61 FC | 	wrlong	result1, fp
1638c     04 4E 05 F1 | 	add	fp, #4
16390     A7 FC 61 FC | 	wrlong	result2, fp
16394     04 4E 05 F1 | 	add	fp, #4
16398     A7 16 62 FC | 	wrlong	arg03, fp
1639c                 | ' t1=pop() : arg=converttoint(t1)
1639c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1639c     08 4E 85 F1 | 	sub	fp, #8
163a0     2B 16 0E F2 | 	cmp	arg03, #43 wz
163a4     18 00 90 5D |  if_ne	jmp	#LR__1811
163a8     A7 12 02 FB | 	rdlong	arg01, fp
163ac     EC 4F BF FD | 	call	#_convertstring
163b0     A7 FA 61 FC | 	wrlong	result1, fp
163b4     08 4E 05 F1 | 	add	fp, #8
163b8     A7 3E 68 FC | 	wrlong	#31, fp
163bc     08 4E 85 F1 | 	sub	fp, #8
163c0                 | LR__1811
163c0                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
163c0     08 4E 05 F1 | 	add	fp, #8
163c4     A7 16 02 FB | 	rdlong	arg03, fp
163c8     08 4E 85 F1 | 	sub	fp, #8
163cc     1F 16 0E F2 | 	cmp	arg03, #31 wz
163d0     3C 00 90 AD |  if_e	jmp	#LR__1812
163d4     00 12 06 F6 | 	mov	arg01, #0
163d8     C4 FF B0 FD | 	call	#__system___getiolock_0540
163dc     FD 12 02 F6 | 	mov	arg01, result1
163e0     58 A5 B0 FD | 	call	#__system___lockmem
163e4     84 01 00 FF 
163e8     86 15 06 F6 | 	mov	arg02, ##@LR__5492
163ec     00 12 06 F6 | 	mov	arg01, #0
163f0     00 16 06 F6 | 	mov	arg03, #0
163f4     38 B2 B0 FD | 	call	#__system___basic_print_string
163f8     00 12 06 F6 | 	mov	arg01, #0
163fc     A0 FF B0 FD | 	call	#__system___getiolock_0540
16400     FD 00 68 FC | 	wrlong	#0, result1
16404     0F 12 06 F6 | 	mov	arg01, #15
16408     A0 6F B0 FD | 	call	#_printerror
1640c     20 00 90 FD | 	jmp	#LR__1813
16410                 | LR__1812
16410     A7 12 02 FB | 	rdlong	arg01, fp
16414     10 4E 05 F1 | 	add	fp, #16
16418     A7 14 02 FB | 	rdlong	arg02, fp
1641c     10 4E 85 F1 | 	sub	fp, #16
16420     94 C5 B0 FD | 	call	#__system__Left_S
16424     A7 FA 61 FC | 	wrlong	result1, fp
16428     A7 12 02 F6 | 	mov	arg01, fp
1642c     8C 4E BF FD | 	call	#_push
16430                 | LR__1813
16430     A7 F0 03 F6 | 	mov	ptra, fp
16434     B2 00 A0 FD | 	call	#popregs_
16438                 | _do_left_ret
16438     2D 00 64 FD | 	ret
1643c                 | 
1643c                 | ' 
1643c                 | ' sub do_asc
1643c                 | _do_asc
1643c     01 4A 05 F6 | 	mov	COUNT_, #1
16440     A8 00 A0 FD | 	call	#pushregs_
16444     14 F0 07 F1 | 	add	ptra, #20
16448     4A 00 00 FF 
1644c     80 E4 05 F1 | 	add	objptr, ##38016
16450     F2 1E 02 FB | 	rdlong	local01, objptr
16454     0F 17 02 F6 | 	mov	arg03, local01
16458     01 16 66 F0 | 	shl	arg03, #1
1645c     0F 17 02 F1 | 	add	arg03, local01
16460     02 16 66 F0 | 	shl	arg03, #2
16464     03 00 00 FF 
16468     04 E4 85 F1 | 	sub	objptr, ##1540
1646c     F2 16 02 F1 | 	add	arg03, objptr
16470     0B 17 02 FB | 	rdlong	arg03, arg03
16474     0C 4E 05 F1 | 	add	fp, #12
16478     A7 16 62 FC | 	wrlong	arg03, fp
1647c                 | ' 
1647c                 | ' numpar=compiledline(lineptr_e).result.uresult
1647c                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
1647c     0C 4E 85 F1 | 	sub	fp, #12
16480     02 16 16 F2 | 	cmp	arg03, #2 wc
16484     47 00 00 FF 
16488     7C E4 85 F1 | 	sub	objptr, ##36476
1648c     0C 4E 05 C1 |  if_b	add	fp, #12
16490     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16494     0C 4E 85 C1 |  if_b	sub	fp, #12
16498     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
1649c     00 12 06 F6 | 	mov	arg01, #0
164a0     FC FE B0 FD | 	call	#__system___getiolock_0540
164a4     FD 12 02 F6 | 	mov	arg01, result1
164a8     90 A4 B0 FD | 	call	#__system___lockmem
164ac     84 01 00 FF 
164b0     8E 15 06 F6 | 	mov	arg02, ##@LR__5493
164b4     00 12 06 F6 | 	mov	arg01, #0
164b8     00 16 06 F6 | 	mov	arg03, #0
164bc     70 B1 B0 FD | 	call	#__system___basic_print_string
164c0     00 12 06 F6 | 	mov	arg01, #0
164c4     D8 FE B0 FD | 	call	#__system___getiolock_0540
164c8     FD 00 68 FC | 	wrlong	#0, result1
164cc     27 12 06 F6 | 	mov	arg01, #39
164d0     D8 6E B0 FD | 	call	#_printerror
164d4     B0 00 90 FD | 	jmp	#LR__1823
164d8                 | LR__1820
164d8     48 4D BF FD | 	call	#_pop
164dc     FF 16 02 F6 | 	mov	arg03, result3
164e0     A7 FA 61 FC | 	wrlong	result1, fp
164e4     04 4E 05 F1 | 	add	fp, #4
164e8     A7 FC 61 FC | 	wrlong	result2, fp
164ec     04 4E 05 F1 | 	add	fp, #4
164f0     A7 16 62 FC | 	wrlong	arg03, fp
164f4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
164f4     08 4E 85 F1 | 	sub	fp, #8
164f8     2B 16 0E F2 | 	cmp	arg03, #43 wz
164fc     18 00 90 5D |  if_ne	jmp	#LR__1821
16500     A7 12 02 FB | 	rdlong	arg01, fp
16504     94 4E BF FD | 	call	#_convertstring
16508     A7 FA 61 FC | 	wrlong	result1, fp
1650c     08 4E 05 F1 | 	add	fp, #8
16510     A7 3E 68 FC | 	wrlong	#31, fp
16514     08 4E 85 F1 | 	sub	fp, #8
16518                 | LR__1821
16518                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
16518     08 4E 05 F1 | 	add	fp, #8
1651c     A7 16 02 FB | 	rdlong	arg03, fp
16520     08 4E 85 F1 | 	sub	fp, #8
16524     1F 16 0E F2 | 	cmp	arg03, #31 wz
16528     3C 00 90 AD |  if_e	jmp	#LR__1822
1652c     00 12 06 F6 | 	mov	arg01, #0
16530     6C FE B0 FD | 	call	#__system___getiolock_0540
16534     FD 12 02 F6 | 	mov	arg01, result1
16538     00 A4 B0 FD | 	call	#__system___lockmem
1653c     84 01 00 FF 
16540     94 15 06 F6 | 	mov	arg02, ##@LR__5494
16544     00 12 06 F6 | 	mov	arg01, #0
16548     00 16 06 F6 | 	mov	arg03, #0
1654c     E0 B0 B0 FD | 	call	#__system___basic_print_string
16550     00 12 06 F6 | 	mov	arg01, #0
16554     48 FE B0 FD | 	call	#__system___getiolock_0540
16558     FD 00 68 FC | 	wrlong	#0, result1
1655c     0F 12 06 F6 | 	mov	arg01, #15
16560     48 6E B0 FD | 	call	#_printerror
16564     20 00 90 FD | 	jmp	#LR__1823
16568                 | LR__1822
16568     A7 1E 02 FB | 	rdlong	local01, fp
1656c     0F 1F C2 FA | 	rdbyte	local01, local01
16570     A7 1E 62 FC | 	wrlong	local01, fp
16574     08 4E 05 F1 | 	add	fp, #8
16578     A7 38 68 FC | 	wrlong	#28, fp
1657c     08 4E 85 F1 | 	sub	fp, #8
16580     A7 12 02 F6 | 	mov	arg01, fp
16584     34 4D BF FD | 	call	#_push
16588                 | LR__1823
16588     A7 F0 03 F6 | 	mov	ptra, fp
1658c     B2 00 A0 FD | 	call	#popregs_
16590                 | _do_asc_ret
16590     2D 00 64 FD | 	ret
16594                 | 
16594                 | ' 
16594                 | ' sub do_len
16594                 | _do_len
16594     02 4A 05 F6 | 	mov	COUNT_, #2
16598     A8 00 A0 FD | 	call	#pushregs_
1659c     14 F0 07 F1 | 	add	ptra, #20
165a0     4A 00 00 FF 
165a4     80 E4 05 F1 | 	add	objptr, ##38016
165a8     F2 1E 02 FB | 	rdlong	local01, objptr
165ac     0F 17 02 F6 | 	mov	arg03, local01
165b0     01 16 66 F0 | 	shl	arg03, #1
165b4     0F 17 02 F1 | 	add	arg03, local01
165b8     02 16 66 F0 | 	shl	arg03, #2
165bc     03 00 00 FF 
165c0     04 E4 85 F1 | 	sub	objptr, ##1540
165c4     F2 16 02 F1 | 	add	arg03, objptr
165c8     0B 17 02 FB | 	rdlong	arg03, arg03
165cc     0C 4E 05 F1 | 	add	fp, #12
165d0     A7 16 62 FC | 	wrlong	arg03, fp
165d4                 | ' 
165d4                 | ' numpar=compiledline(lineptr_e).result.uresult
165d4                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
165d4     0C 4E 85 F1 | 	sub	fp, #12
165d8     02 16 16 F2 | 	cmp	arg03, #2 wc
165dc     47 00 00 FF 
165e0     7C E4 85 F1 | 	sub	objptr, ##36476
165e4     0C 4E 05 C1 |  if_b	add	fp, #12
165e8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
165ec     0C 4E 85 C1 |  if_b	sub	fp, #12
165f0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
165f4     00 12 06 F6 | 	mov	arg01, #0
165f8     A4 FD B0 FD | 	call	#__system___getiolock_0540
165fc     FD 12 02 F6 | 	mov	arg01, result1
16600     38 A3 B0 FD | 	call	#__system___lockmem
16604     84 01 00 FF 
16608     9A 15 06 F6 | 	mov	arg02, ##@LR__5495
1660c     00 12 06 F6 | 	mov	arg01, #0
16610     00 16 06 F6 | 	mov	arg03, #0
16614     18 B0 B0 FD | 	call	#__system___basic_print_string
16618     00 12 06 F6 | 	mov	arg01, #0
1661c     80 FD B0 FD | 	call	#__system___getiolock_0540
16620     FD 00 68 FC | 	wrlong	#0, result1
16624     27 12 06 F6 | 	mov	arg01, #39
16628     80 6D B0 FD | 	call	#_printerror
1662c     C4 00 90 FD | 	jmp	#LR__1835
16630                 | LR__1830
16630     F0 4B BF FD | 	call	#_pop
16634     FF 16 02 F6 | 	mov	arg03, result3
16638     A7 FA 61 FC | 	wrlong	result1, fp
1663c     04 4E 05 F1 | 	add	fp, #4
16640     A7 FC 61 FC | 	wrlong	result2, fp
16644     04 4E 05 F1 | 	add	fp, #4
16648     A7 16 62 FC | 	wrlong	arg03, fp
1664c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1664c     08 4E 85 F1 | 	sub	fp, #8
16650     2B 16 0E F2 | 	cmp	arg03, #43 wz
16654     18 00 90 5D |  if_ne	jmp	#LR__1831
16658     A7 12 02 FB | 	rdlong	arg01, fp
1665c     3C 4D BF FD | 	call	#_convertstring
16660     A7 FA 61 FC | 	wrlong	result1, fp
16664     08 4E 05 F1 | 	add	fp, #8
16668     A7 3E 68 FC | 	wrlong	#31, fp
1666c     08 4E 85 F1 | 	sub	fp, #8
16670                 | LR__1831
16670                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
16670     08 4E 05 F1 | 	add	fp, #8
16674     A7 16 02 FB | 	rdlong	arg03, fp
16678     08 4E 85 F1 | 	sub	fp, #8
1667c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16680     3C 00 90 AD |  if_e	jmp	#LR__1832
16684     00 12 06 F6 | 	mov	arg01, #0
16688     14 FD B0 FD | 	call	#__system___getiolock_0540
1668c     FD 12 02 F6 | 	mov	arg01, result1
16690     A8 A2 B0 FD | 	call	#__system___lockmem
16694     84 01 00 FF 
16698     A0 15 06 F6 | 	mov	arg02, ##@LR__5496
1669c     00 12 06 F6 | 	mov	arg01, #0
166a0     00 16 06 F6 | 	mov	arg03, #0
166a4     88 AF B0 FD | 	call	#__system___basic_print_string
166a8     00 12 06 F6 | 	mov	arg01, #0
166ac     F0 FC B0 FD | 	call	#__system___getiolock_0540
166b0     FD 00 68 FC | 	wrlong	#0, result1
166b4     0F 12 06 F6 | 	mov	arg01, #15
166b8     F0 6C B0 FD | 	call	#_printerror
166bc     34 00 90 FD | 	jmp	#LR__1835
166c0                 | LR__1832
166c0     A7 12 02 FB | 	rdlong	arg01, fp
166c4     09 21 02 F6 | 	mov	local02, arg01
166c8     97 06 48 FB | 	callpa	#(@LR__1834-@LR__1833)>>2,fcache_load_ptr_
166cc                 | LR__1833
166cc     10 FB C9 FA | 	rdbyte	result1, local02 wz
166d0     01 20 06 51 |  if_ne	add	local02, #1
166d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1833
166d8                 | LR__1834
166d8     09 21 82 F1 | 	sub	local02, arg01
166dc     A7 20 62 FC | 	wrlong	local02, fp
166e0     08 4E 05 F1 | 	add	fp, #8
166e4     A7 38 68 FC | 	wrlong	#28, fp
166e8     08 4E 85 F1 | 	sub	fp, #8
166ec     A7 12 02 F6 | 	mov	arg01, fp
166f0     C8 4B BF FD | 	call	#_push
166f4                 | LR__1835
166f4     A7 F0 03 F6 | 	mov	ptra, fp
166f8     B2 00 A0 FD | 	call	#popregs_
166fc                 | _do_len_ret
166fc     2D 00 64 FD | 	ret
16700                 | 
16700                 | ' 
16700                 | ' sub do_chr
16700                 | _do_chr
16700     01 4A 05 F6 | 	mov	COUNT_, #1
16704     A8 00 A0 FD | 	call	#pushregs_
16708     14 F0 07 F1 | 	add	ptra, #20
1670c     4A 00 00 FF 
16710     80 E4 05 F1 | 	add	objptr, ##38016
16714     F2 1E 02 FB | 	rdlong	local01, objptr
16718     0F 17 02 F6 | 	mov	arg03, local01
1671c     01 16 66 F0 | 	shl	arg03, #1
16720     0F 17 02 F1 | 	add	arg03, local01
16724     02 16 66 F0 | 	shl	arg03, #2
16728     03 00 00 FF 
1672c     04 E4 85 F1 | 	sub	objptr, ##1540
16730     F2 16 02 F1 | 	add	arg03, objptr
16734     0B 17 02 FB | 	rdlong	arg03, arg03
16738     0C 4E 05 F1 | 	add	fp, #12
1673c     A7 16 62 FC | 	wrlong	arg03, fp
16740                 | ' 
16740                 | ' numpar=compiledline(lineptr_e).result.uresult
16740                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
16740     0C 4E 85 F1 | 	sub	fp, #12
16744     02 16 16 F2 | 	cmp	arg03, #2 wc
16748     47 00 00 FF 
1674c     7C E4 85 F1 | 	sub	objptr, ##36476
16750     0C 4E 05 C1 |  if_b	add	fp, #12
16754     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16758     0C 4E 85 C1 |  if_b	sub	fp, #12
1675c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
16760     00 12 06 F6 | 	mov	arg01, #0
16764     38 FC B0 FD | 	call	#__system___getiolock_0540
16768     FD 12 02 F6 | 	mov	arg01, result1
1676c     CC A1 B0 FD | 	call	#__system___lockmem
16770     84 01 00 FF 
16774     A6 15 06 F6 | 	mov	arg02, ##@LR__5497
16778     00 12 06 F6 | 	mov	arg01, #0
1677c     00 16 06 F6 | 	mov	arg03, #0
16780     AC AE B0 FD | 	call	#__system___basic_print_string
16784     00 12 06 F6 | 	mov	arg01, #0
16788     14 FC B0 FD | 	call	#__system___getiolock_0540
1678c     FD 00 68 FC | 	wrlong	#0, result1
16790     27 12 06 F6 | 	mov	arg01, #39
16794     14 6C B0 FD | 	call	#_printerror
16798     54 00 90 FD | 	jmp	#LR__1841
1679c                 | LR__1840
1679c     84 4A BF FD | 	call	#_pop
167a0     FF 1E 02 F6 | 	mov	local01, result3
167a4     A7 FA 61 FC | 	wrlong	result1, fp
167a8     04 4E 05 F1 | 	add	fp, #4
167ac     A7 FC 61 FC | 	wrlong	result2, fp
167b0     04 4E 05 F1 | 	add	fp, #4
167b4     A7 1E 62 FC | 	wrlong	local01, fp
167b8     08 4E 85 F1 | 	sub	fp, #8
167bc     A7 12 02 F6 | 	mov	arg01, fp
167c0     44 4C BF FD | 	call	#_converttoint
167c4     10 4E 05 F1 | 	add	fp, #16
167c8     A7 FA 61 FC | 	wrlong	result1, fp
167cc     FD 12 02 F6 | 	mov	arg01, result1
167d0     10 4E 85 F1 | 	sub	fp, #16
167d4     A4 C3 B0 FD | 	call	#__system__Chr_S
167d8     A7 FA 61 FC | 	wrlong	result1, fp
167dc     08 4E 05 F1 | 	add	fp, #8
167e0     A7 3E 68 FC | 	wrlong	#31, fp
167e4     08 4E 85 F1 | 	sub	fp, #8
167e8     A7 12 02 F6 | 	mov	arg01, fp
167ec     CC 4A BF FD | 	call	#_push
167f0                 | LR__1841
167f0     A7 F0 03 F6 | 	mov	ptra, fp
167f4     B2 00 A0 FD | 	call	#popregs_
167f8                 | _do_chr_ret
167f8     2D 00 64 FD | 	ret
167fc                 | 
167fc                 | ' 
167fc                 | ' sub do_val
167fc                 | _do_val
167fc     03 4A 05 F6 | 	mov	COUNT_, #3
16800     A8 00 A0 FD | 	call	#pushregs_
16804     20 F0 07 F1 | 	add	ptra, #32
16808     4A 00 00 FF 
1680c     80 E4 05 F1 | 	add	objptr, ##38016
16810     F2 16 02 FB | 	rdlong	arg03, objptr
16814     0B 1F 02 F6 | 	mov	local01, arg03
16818     01 1E 66 F0 | 	shl	local01, #1
1681c     0B 1F 02 F1 | 	add	local01, arg03
16820     02 1E 66 F0 | 	shl	local01, #2
16824     03 00 00 FF 
16828     04 E4 85 F1 | 	sub	objptr, ##1540
1682c     F2 1E 02 F1 | 	add	local01, objptr
16830     0F 17 02 FB | 	rdlong	arg03, local01
16834     0C 4E 05 F1 | 	add	fp, #12
16838     A7 16 62 FC | 	wrlong	arg03, fp
1683c                 | ' 
1683c                 | ' numpar=compiledline(lineptr_e).result.uresult
1683c                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1683c     0C 4E 85 F1 | 	sub	fp, #12
16840     02 16 16 F2 | 	cmp	arg03, #2 wc
16844     47 00 00 FF 
16848     7C E4 85 F1 | 	sub	objptr, ##36476
1684c     0C 4E 05 C1 |  if_b	add	fp, #12
16850     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16854     0C 4E 85 C1 |  if_b	sub	fp, #12
16858     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
1685c     00 12 06 F6 | 	mov	arg01, #0
16860     3C FB B0 FD | 	call	#__system___getiolock_0540
16864     FD 12 02 F6 | 	mov	arg01, result1
16868     D0 A0 B0 FD | 	call	#__system___lockmem
1686c     84 01 00 FF 
16870     AD 15 06 F6 | 	mov	arg02, ##@LR__5498
16874     00 12 06 F6 | 	mov	arg01, #0
16878     00 16 06 F6 | 	mov	arg03, #0
1687c     B0 AD B0 FD | 	call	#__system___basic_print_string
16880     00 12 06 F6 | 	mov	arg01, #0
16884     18 FB B0 FD | 	call	#__system___getiolock_0540
16888     FD 00 68 FC | 	wrlong	#0, result1
1688c     27 12 06 F6 | 	mov	arg01, #39
16890     18 6B B0 FD | 	call	#_printerror
16894     5C 02 90 FD | 	jmp	#LR__1863
16898                 | LR__1850
16898     88 49 BF FD | 	call	#_pop
1689c     FF 16 02 F6 | 	mov	arg03, result3
168a0     A7 FA 61 FC | 	wrlong	result1, fp
168a4     04 4E 05 F1 | 	add	fp, #4
168a8     A7 FC 61 FC | 	wrlong	result2, fp
168ac     04 4E 05 F1 | 	add	fp, #4
168b0     A7 16 62 FC | 	wrlong	arg03, fp
168b4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
168b4     08 4E 85 F1 | 	sub	fp, #8
168b8     2B 16 0E F2 | 	cmp	arg03, #43 wz
168bc     18 00 90 5D |  if_ne	jmp	#LR__1851
168c0     A7 12 02 FB | 	rdlong	arg01, fp
168c4     D4 4A BF FD | 	call	#_convertstring
168c8     A7 FA 61 FC | 	wrlong	result1, fp
168cc     08 4E 05 F1 | 	add	fp, #8
168d0     A7 3E 68 FC | 	wrlong	#31, fp
168d4     08 4E 85 F1 | 	sub	fp, #8
168d8                 | LR__1851
168d8                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
168d8     08 4E 05 F1 | 	add	fp, #8
168dc     A7 16 02 FB | 	rdlong	arg03, fp
168e0     08 4E 85 F1 | 	sub	fp, #8
168e4     1F 16 0E F2 | 	cmp	arg03, #31 wz
168e8     3C 00 90 AD |  if_e	jmp	#LR__1852
168ec     00 12 06 F6 | 	mov	arg01, #0
168f0     AC FA B0 FD | 	call	#__system___getiolock_0540
168f4     FD 12 02 F6 | 	mov	arg01, result1
168f8     40 A0 B0 FD | 	call	#__system___lockmem
168fc     84 01 00 FF 
16900     B3 15 06 F6 | 	mov	arg02, ##@LR__5499
16904     00 12 06 F6 | 	mov	arg01, #0
16908     00 16 06 F6 | 	mov	arg03, #0
1690c     20 AD B0 FD | 	call	#__system___basic_print_string
16910     00 12 06 F6 | 	mov	arg01, #0
16914     88 FA B0 FD | 	call	#__system___getiolock_0540
16918     FD 00 68 FC | 	wrlong	#0, result1
1691c     0F 12 06 F6 | 	mov	arg01, #15
16920     88 6A B0 FD | 	call	#_printerror
16924     CC 01 90 FD | 	jmp	#LR__1863
16928                 | LR__1852
16928                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16928     A7 12 02 FB | 	rdlong	arg01, fp
1692c     01 14 06 F6 | 	mov	arg02, #1
16930     84 C0 B0 FD | 	call	#__system__Left_S
16934     FD 12 02 F6 | 	mov	arg01, result1
16938     84 01 00 FF 
1693c     B9 15 06 F6 | 	mov	arg02, ##@LR__5500
16940     20 A0 B0 FD | 	call	#__system___string_cmp
16944     00 FA 0D F2 | 	cmp	result1, #0 wz
16948     48 00 90 5D |  if_ne	jmp	#LR__1855
1694c     84 01 00 FF 
16950     BB 1F 06 F6 | 	mov	local01, ##@LR__5501
16954     A7 16 02 FB | 	rdlong	arg03, fp
16958     0B 13 02 F6 | 	mov	arg01, arg03
1695c     09 21 02 F6 | 	mov	local02, arg01
16960     97 06 48 FB | 	callpa	#(@LR__1854-@LR__1853)>>2,fcache_load_ptr_
16964                 | LR__1853
16964     10 FB C9 FA | 	rdbyte	result1, local02 wz
16968     01 20 06 51 |  if_ne	add	local02, #1
1696c     F4 FF 9F 5D |  if_ne	jmp	#LR__1853
16970                 | LR__1854
16970     09 21 82 F1 | 	sub	local02, arg01
16974     10 15 02 F6 | 	mov	arg02, local02
16978     01 14 86 F1 | 	sub	arg02, #1
1697c     0B 13 02 F6 | 	mov	arg01, arg03
16980     BC C0 B0 FD | 	call	#__system__Right_S
16984     FD 14 02 F6 | 	mov	arg02, result1
16988     0F 13 02 F6 | 	mov	arg01, local01
1698c     08 A0 B0 FD | 	call	#__system___string_concat
16990     A7 FA 61 FC | 	wrlong	result1, fp
16994                 | LR__1855
16994                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16994     A7 12 02 FB | 	rdlong	arg01, fp
16998     01 14 06 F6 | 	mov	arg02, #1
1699c     18 C0 B0 FD | 	call	#__system__Left_S
169a0     FD 12 02 F6 | 	mov	arg01, result1
169a4     84 01 00 FF 
169a8     BE 15 06 F6 | 	mov	arg02, ##@LR__5502
169ac     B4 9F B0 FD | 	call	#__system___string_cmp
169b0     00 FA 0D F2 | 	cmp	result1, #0 wz
169b4     48 00 90 5D |  if_ne	jmp	#LR__1858
169b8     84 01 00 FF 
169bc     C0 1F 06 F6 | 	mov	local01, ##@LR__5503
169c0     A7 16 02 FB | 	rdlong	arg03, fp
169c4     0B 13 02 F6 | 	mov	arg01, arg03
169c8     09 21 02 F6 | 	mov	local02, arg01
169cc     97 06 48 FB | 	callpa	#(@LR__1857-@LR__1856)>>2,fcache_load_ptr_
169d0                 | LR__1856
169d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
169d4     01 20 06 51 |  if_ne	add	local02, #1
169d8     F4 FF 9F 5D |  if_ne	jmp	#LR__1856
169dc                 | LR__1857
169dc     09 21 82 F1 | 	sub	local02, arg01
169e0     10 15 02 F6 | 	mov	arg02, local02
169e4     01 14 86 F1 | 	sub	arg02, #1
169e8     0B 13 02 F6 | 	mov	arg01, arg03
169ec     50 C0 B0 FD | 	call	#__system__Right_S
169f0     FD 14 02 F6 | 	mov	arg02, result1
169f4     0F 13 02 F6 | 	mov	arg01, local01
169f8     9C 9F B0 FD | 	call	#__system___string_concat
169fc     A7 FA 61 FC | 	wrlong	result1, fp
16a00                 | LR__1858
16a00     A7 12 02 FB | 	rdlong	arg01, fp
16a04     F4 D2 B0 FD | 	call	#__system____builtin_atof
16a08     1C 4E 05 F1 | 	add	fp, #28
16a0c     A7 FA 61 FC | 	wrlong	result1, fp
16a10     1C 4E 85 F1 | 	sub	fp, #28
16a14     A7 12 02 FB | 	rdlong	arg01, fp
16a18     00 14 06 F6 | 	mov	arg02, #0
16a1c     48 D1 B0 FD | 	call	#__system____builtin_atoi
16a20     18 4E 05 F1 | 	add	fp, #24
16a24     A7 FA 61 FC | 	wrlong	result1, fp
16a28                 | ' fval=val(t1.result.sresult)
16a28                 | ' ival=val%(t1.result.sresult)
16a28                 | ' if fval=ival then
16a28     04 4E 05 F1 | 	add	fp, #4
16a2c     A7 1E 02 FB | 	rdlong	local01, fp
16a30     1C 4E 85 F1 | 	sub	fp, #28
16a34     FD 12 52 F6 | 	abs	arg01, result1 wc
16a38     1F 22 C6 C9 |  if_b	decod	local03, #31
16a3c     00 22 06 36 |  if_ae	mov	local03, #0
16a40     A8 C6 B0 FD | 	call	#__system___float_fromuns
16a44     11 FB 61 F5 | 	xor	result1, local03
16a48     FD 14 02 F6 | 	mov	arg02, result1
16a4c     0F 13 02 F6 | 	mov	arg01, local01
16a50     01 16 06 F6 | 	mov	arg03, #1
16a54     CC CE B0 FD | 	call	#__system___float_cmp
16a58     00 FA 0D F2 | 	cmp	result1, #0 wz
16a5c     20 00 90 5D |  if_ne	jmp	#LR__1859
16a60     18 4E 05 F1 | 	add	fp, #24
16a64     A7 1E 02 FB | 	rdlong	local01, fp
16a68     18 4E 85 F1 | 	sub	fp, #24
16a6c     A7 1E 62 FC | 	wrlong	local01, fp
16a70     08 4E 05 F1 | 	add	fp, #8
16a74     A7 38 68 FC | 	wrlong	#28, fp
16a78     08 4E 85 F1 | 	sub	fp, #8
16a7c     6C 00 90 FD | 	jmp	#LR__1862
16a80                 | LR__1859
16a80                 | '   if fval=0 andalso ival<>0 then
16a80     1C 4E 05 F1 | 	add	fp, #28
16a84     A7 12 02 FB | 	rdlong	arg01, fp
16a88     1C 4E 85 F1 | 	sub	fp, #28
16a8c     00 14 06 F6 | 	mov	arg02, #0
16a90     01 16 06 F6 | 	mov	arg03, #1
16a94     8C CE B0 FD | 	call	#__system___float_cmp
16a98     00 FA 0D F2 | 	cmp	result1, #0 wz
16a9c     30 00 90 5D |  if_ne	jmp	#LR__1860
16aa0     18 4E 05 F1 | 	add	fp, #24
16aa4     A7 1E 0A FB | 	rdlong	local01, fp wz
16aa8     18 4E 85 F1 | 	sub	fp, #24
16aac     20 00 90 AD |  if_e	jmp	#LR__1860
16ab0     18 4E 05 F1 | 	add	fp, #24
16ab4     A7 1E 02 FB | 	rdlong	local01, fp
16ab8     18 4E 85 F1 | 	sub	fp, #24
16abc     A7 1E 62 FC | 	wrlong	local01, fp
16ac0     08 4E 05 F1 | 	add	fp, #8
16ac4     A7 38 68 FC | 	wrlong	#28, fp
16ac8     08 4E 85 F1 | 	sub	fp, #8
16acc     1C 00 90 FD | 	jmp	#LR__1861
16ad0                 | LR__1860
16ad0     1C 4E 05 F1 | 	add	fp, #28
16ad4     A7 1E 02 FB | 	rdlong	local01, fp
16ad8     1C 4E 85 F1 | 	sub	fp, #28
16adc     A7 1E 62 FC | 	wrlong	local01, fp
16ae0     08 4E 05 F1 | 	add	fp, #8
16ae4     A7 3C 68 FC | 	wrlong	#30, fp
16ae8     08 4E 85 F1 | 	sub	fp, #8
16aec                 | LR__1861
16aec                 | LR__1862
16aec     A7 12 02 F6 | 	mov	arg01, fp
16af0     C8 47 BF FD | 	call	#_push
16af4                 | LR__1863
16af4     A7 F0 03 F6 | 	mov	ptra, fp
16af8     B2 00 A0 FD | 	call	#popregs_
16afc                 | _do_val_ret
16afc     2D 00 64 FD | 	ret
16b00                 | 
16b00                 | ' 
16b00                 | ' 
16b00                 | ' sub do_hex
16b00                 | _do_hex
16b00     01 4A 05 F6 | 	mov	COUNT_, #1
16b04     A8 00 A0 FD | 	call	#pushregs_
16b08     18 F0 07 F1 | 	add	ptra, #24
16b0c     4A 00 00 FF 
16b10     80 E4 05 F1 | 	add	objptr, ##38016
16b14     F2 1E 02 FB | 	rdlong	local01, objptr
16b18     0F 17 02 F6 | 	mov	arg03, local01
16b1c     01 16 66 F0 | 	shl	arg03, #1
16b20     0F 17 02 F1 | 	add	arg03, local01
16b24     02 16 66 F0 | 	shl	arg03, #2
16b28     03 00 00 FF 
16b2c     04 E4 85 F1 | 	sub	objptr, ##1540
16b30     F2 16 02 F1 | 	add	arg03, objptr
16b34     0B 17 02 FB | 	rdlong	arg03, arg03
16b38     0C 4E 05 F1 | 	add	fp, #12
16b3c     A7 16 62 FC | 	wrlong	arg03, fp
16b40                 | ' 
16b40                 | ' numpar=compiledline(lineptr_e).result.uresult
16b40                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
16b40     0C 4E 85 F1 | 	sub	fp, #12
16b44     03 16 16 F2 | 	cmp	arg03, #3 wc
16b48     47 00 00 FF 
16b4c     7C E4 85 F1 | 	sub	objptr, ##36476
16b50     0C 4E 05 C1 |  if_b	add	fp, #12
16b54     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16b58     0C 4E 85 C1 |  if_b	sub	fp, #12
16b5c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
16b60     00 12 06 F6 | 	mov	arg01, #0
16b64     38 F8 B0 FD | 	call	#__system___getiolock_0540
16b68     FD 12 02 F6 | 	mov	arg01, result1
16b6c     CC 9D B0 FD | 	call	#__system___lockmem
16b70     84 01 00 FF 
16b74     C3 15 06 F6 | 	mov	arg02, ##@LR__5504
16b78     00 12 06 F6 | 	mov	arg01, #0
16b7c     00 16 06 F6 | 	mov	arg03, #0
16b80     AC AA B0 FD | 	call	#__system___basic_print_string
16b84     00 12 06 F6 | 	mov	arg01, #0
16b88     14 F8 B0 FD | 	call	#__system___getiolock_0540
16b8c     FD 00 68 FC | 	wrlong	#0, result1
16b90     27 12 06 F6 | 	mov	arg01, #39
16b94     14 68 B0 FD | 	call	#_printerror
16b98     B8 00 90 FD | 	jmp	#LR__1873
16b9c                 | LR__1870
16b9c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16b9c     0C 4E 05 F1 | 	add	fp, #12
16ba0     A7 1E 02 FB | 	rdlong	local01, fp
16ba4     0C 4E 85 F1 | 	sub	fp, #12
16ba8     02 1E 0E F2 | 	cmp	local01, #2 wz
16bac     38 00 90 5D |  if_ne	jmp	#LR__1871
16bb0     70 46 BF FD | 	call	#_pop
16bb4     FF 1E 02 F6 | 	mov	local01, result3
16bb8     A7 FA 61 FC | 	wrlong	result1, fp
16bbc     04 4E 05 F1 | 	add	fp, #4
16bc0     A7 FC 61 FC | 	wrlong	result2, fp
16bc4     04 4E 05 F1 | 	add	fp, #4
16bc8     A7 1E 62 FC | 	wrlong	local01, fp
16bcc     08 4E 85 F1 | 	sub	fp, #8
16bd0     A7 12 02 F6 | 	mov	arg01, fp
16bd4     30 48 BF FD | 	call	#_converttoint
16bd8     14 4E 05 F1 | 	add	fp, #20
16bdc     A7 FA 61 FC | 	wrlong	result1, fp
16be0     14 4E 85 F1 | 	sub	fp, #20
16be4     0C 00 90 FD | 	jmp	#LR__1872
16be8                 | LR__1871
16be8     14 4E 05 F1 | 	add	fp, #20
16bec     A7 10 68 FC | 	wrlong	#8, fp
16bf0     14 4E 85 F1 | 	sub	fp, #20
16bf4                 | LR__1872
16bf4     2C 46 BF FD | 	call	#_pop
16bf8     FF 1E 02 F6 | 	mov	local01, result3
16bfc     A7 FA 61 FC | 	wrlong	result1, fp
16c00     04 4E 05 F1 | 	add	fp, #4
16c04     A7 FC 61 FC | 	wrlong	result2, fp
16c08     04 4E 05 F1 | 	add	fp, #4
16c0c     A7 1E 62 FC | 	wrlong	local01, fp
16c10     08 4E 85 F1 | 	sub	fp, #8
16c14     A7 12 02 F6 | 	mov	arg01, fp
16c18     EC 47 BF FD | 	call	#_converttoint
16c1c     10 4E 05 F1 | 	add	fp, #16
16c20     A7 FA 61 FC | 	wrlong	result1, fp
16c24     FD 12 02 F6 | 	mov	arg01, result1
16c28     04 4E 05 F1 | 	add	fp, #4
16c2c     A7 14 02 FB | 	rdlong	arg02, fp
16c30     14 4E 85 F1 | 	sub	fp, #20
16c34     10 16 06 F6 | 	mov	arg03, #16
16c38     D0 BF B0 FD | 	call	#__system__Number_S
16c3c     A7 FA 61 FC | 	wrlong	result1, fp
16c40     08 4E 05 F1 | 	add	fp, #8
16c44     A7 3E 68 FC | 	wrlong	#31, fp
16c48     08 4E 85 F1 | 	sub	fp, #8
16c4c     A7 12 02 F6 | 	mov	arg01, fp
16c50     68 46 BF FD | 	call	#_push
16c54                 | LR__1873
16c54     A7 F0 03 F6 | 	mov	ptra, fp
16c58     B2 00 A0 FD | 	call	#popregs_
16c5c                 | _do_hex_ret
16c5c     2D 00 64 FD | 	ret
16c60                 | 
16c60                 | ' 
16c60                 | ' sub do_bin
16c60                 | _do_bin
16c60     01 4A 05 F6 | 	mov	COUNT_, #1
16c64     A8 00 A0 FD | 	call	#pushregs_
16c68     18 F0 07 F1 | 	add	ptra, #24
16c6c     4A 00 00 FF 
16c70     80 E4 05 F1 | 	add	objptr, ##38016
16c74     F2 1E 02 FB | 	rdlong	local01, objptr
16c78     0F 17 02 F6 | 	mov	arg03, local01
16c7c     01 16 66 F0 | 	shl	arg03, #1
16c80     0F 17 02 F1 | 	add	arg03, local01
16c84     02 16 66 F0 | 	shl	arg03, #2
16c88     03 00 00 FF 
16c8c     04 E4 85 F1 | 	sub	objptr, ##1540
16c90     F2 16 02 F1 | 	add	arg03, objptr
16c94     0B 17 02 FB | 	rdlong	arg03, arg03
16c98     0C 4E 05 F1 | 	add	fp, #12
16c9c     A7 16 62 FC | 	wrlong	arg03, fp
16ca0                 | ' 
16ca0                 | ' numpar=compiledline(lineptr_e).result.uresult
16ca0                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16ca0     0C 4E 85 F1 | 	sub	fp, #12
16ca4     03 16 16 F2 | 	cmp	arg03, #3 wc
16ca8     47 00 00 FF 
16cac     7C E4 85 F1 | 	sub	objptr, ##36476
16cb0     0C 4E 05 C1 |  if_b	add	fp, #12
16cb4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16cb8     0C 4E 85 C1 |  if_b	sub	fp, #12
16cbc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
16cc0     00 12 06 F6 | 	mov	arg01, #0
16cc4     D8 F6 B0 FD | 	call	#__system___getiolock_0540
16cc8     FD 12 02 F6 | 	mov	arg01, result1
16ccc     6C 9C B0 FD | 	call	#__system___lockmem
16cd0     84 01 00 FF 
16cd4     CA 15 06 F6 | 	mov	arg02, ##@LR__5505
16cd8     00 12 06 F6 | 	mov	arg01, #0
16cdc     00 16 06 F6 | 	mov	arg03, #0
16ce0     4C A9 B0 FD | 	call	#__system___basic_print_string
16ce4     00 12 06 F6 | 	mov	arg01, #0
16ce8     B4 F6 B0 FD | 	call	#__system___getiolock_0540
16cec     FD 00 68 FC | 	wrlong	#0, result1
16cf0     27 12 06 F6 | 	mov	arg01, #39
16cf4     B4 66 B0 FD | 	call	#_printerror
16cf8     B8 00 90 FD | 	jmp	#LR__1883
16cfc                 | LR__1880
16cfc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16cfc     0C 4E 05 F1 | 	add	fp, #12
16d00     A7 1E 02 FB | 	rdlong	local01, fp
16d04     0C 4E 85 F1 | 	sub	fp, #12
16d08     02 1E 0E F2 | 	cmp	local01, #2 wz
16d0c     38 00 90 5D |  if_ne	jmp	#LR__1881
16d10     10 45 BF FD | 	call	#_pop
16d14     FF 1E 02 F6 | 	mov	local01, result3
16d18     A7 FA 61 FC | 	wrlong	result1, fp
16d1c     04 4E 05 F1 | 	add	fp, #4
16d20     A7 FC 61 FC | 	wrlong	result2, fp
16d24     04 4E 05 F1 | 	add	fp, #4
16d28     A7 1E 62 FC | 	wrlong	local01, fp
16d2c     08 4E 85 F1 | 	sub	fp, #8
16d30     A7 12 02 F6 | 	mov	arg01, fp
16d34     D0 46 BF FD | 	call	#_converttoint
16d38     14 4E 05 F1 | 	add	fp, #20
16d3c     A7 FA 61 FC | 	wrlong	result1, fp
16d40     14 4E 85 F1 | 	sub	fp, #20
16d44     0C 00 90 FD | 	jmp	#LR__1882
16d48                 | LR__1881
16d48     14 4E 05 F1 | 	add	fp, #20
16d4c     A7 00 68 FC | 	wrlong	#0, fp
16d50     14 4E 85 F1 | 	sub	fp, #20
16d54                 | LR__1882
16d54     CC 44 BF FD | 	call	#_pop
16d58     FF 1E 02 F6 | 	mov	local01, result3
16d5c     A7 FA 61 FC | 	wrlong	result1, fp
16d60     04 4E 05 F1 | 	add	fp, #4
16d64     A7 FC 61 FC | 	wrlong	result2, fp
16d68     04 4E 05 F1 | 	add	fp, #4
16d6c     A7 1E 62 FC | 	wrlong	local01, fp
16d70     08 4E 85 F1 | 	sub	fp, #8
16d74     A7 12 02 F6 | 	mov	arg01, fp
16d78     8C 46 BF FD | 	call	#_converttoint
16d7c     10 4E 05 F1 | 	add	fp, #16
16d80     A7 FA 61 FC | 	wrlong	result1, fp
16d84     FD 12 02 F6 | 	mov	arg01, result1
16d88     04 4E 05 F1 | 	add	fp, #4
16d8c     A7 14 02 FB | 	rdlong	arg02, fp
16d90     14 4E 85 F1 | 	sub	fp, #20
16d94     02 16 06 F6 | 	mov	arg03, #2
16d98     70 BE B0 FD | 	call	#__system__Number_S
16d9c     A7 FA 61 FC | 	wrlong	result1, fp
16da0     08 4E 05 F1 | 	add	fp, #8
16da4     A7 3E 68 FC | 	wrlong	#31, fp
16da8     08 4E 85 F1 | 	sub	fp, #8
16dac     A7 12 02 F6 | 	mov	arg01, fp
16db0     08 45 BF FD | 	call	#_push
16db4                 | LR__1883
16db4     A7 F0 03 F6 | 	mov	ptra, fp
16db8     B2 00 A0 FD | 	call	#popregs_
16dbc                 | _do_bin_ret
16dbc     2D 00 64 FD | 	ret
16dc0                 | 
16dc0                 | ' 
16dc0                 | ' sub do_cos
16dc0                 | _do_cos
16dc0     01 4A 05 F6 | 	mov	COUNT_, #1
16dc4     A8 00 A0 FD | 	call	#pushregs_
16dc8     10 F0 07 F1 | 	add	ptra, #16
16dcc     4A 00 00 FF 
16dd0     80 E4 05 F1 | 	add	objptr, ##38016
16dd4     F2 1E 02 FB | 	rdlong	local01, objptr
16dd8     0F 17 02 F6 | 	mov	arg03, local01
16ddc     01 16 66 F0 | 	shl	arg03, #1
16de0     0F 17 02 F1 | 	add	arg03, local01
16de4     02 16 66 F0 | 	shl	arg03, #2
16de8     03 00 00 FF 
16dec     04 E4 85 F1 | 	sub	objptr, ##1540
16df0     F2 16 02 F1 | 	add	arg03, objptr
16df4     0B 17 02 FB | 	rdlong	arg03, arg03
16df8     0C 4E 05 F1 | 	add	fp, #12
16dfc     A7 16 62 FC | 	wrlong	arg03, fp
16e00                 | ' 
16e00                 | ' numpar=compiledline(lineptr_e).result.uresult
16e00                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
16e00     0C 4E 85 F1 | 	sub	fp, #12
16e04     02 16 16 F2 | 	cmp	arg03, #2 wc
16e08     47 00 00 FF 
16e0c     7C E4 85 F1 | 	sub	objptr, ##36476
16e10     0C 4E 05 C1 |  if_b	add	fp, #12
16e14     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16e18     0C 4E 85 C1 |  if_b	sub	fp, #12
16e1c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16e20     00 12 06 F6 | 	mov	arg01, #0
16e24     78 F5 B0 FD | 	call	#__system___getiolock_0540
16e28     FD 12 02 F6 | 	mov	arg01, result1
16e2c     0C 9B B0 FD | 	call	#__system___lockmem
16e30     84 01 00 FF 
16e34     D1 15 06 F6 | 	mov	arg02, ##@LR__5506
16e38     00 12 06 F6 | 	mov	arg01, #0
16e3c     00 16 06 F6 | 	mov	arg03, #0
16e40     EC A7 B0 FD | 	call	#__system___basic_print_string
16e44     00 12 06 F6 | 	mov	arg01, #0
16e48     54 F5 B0 FD | 	call	#__system___getiolock_0540
16e4c     FD 00 68 FC | 	wrlong	#0, result1
16e50     27 12 06 F6 | 	mov	arg01, #39
16e54     54 65 B0 FD | 	call	#_printerror
16e58     78 00 90 FD | 	jmp	#LR__1891
16e5c                 | LR__1890
16e5c     C4 43 BF FD | 	call	#_pop
16e60     A7 FA 61 FC | 	wrlong	result1, fp
16e64     04 4E 05 F1 | 	add	fp, #4
16e68     A7 FC 61 FC | 	wrlong	result2, fp
16e6c     04 4E 05 F1 | 	add	fp, #4
16e70     A7 FE 61 FC | 	wrlong	result3, fp
16e74     08 4E 85 F1 | 	sub	fp, #8
16e78     51 00 00 FF 
16e7c     BC E5 05 F1 | 	add	objptr, ##41916
16e80     F2 1E 02 FB | 	rdlong	local01, objptr
16e84     51 00 00 FF 
16e88     BC E5 85 F1 | 	sub	objptr, ##41916
16e8c     A7 12 02 F6 | 	mov	arg01, fp
16e90     30 46 BF FD | 	call	#_converttofloat
16e94     FD 14 02 F6 | 	mov	arg02, result1
16e98     0F 13 02 F6 | 	mov	arg01, local01
16e9c     50 C6 B0 FD | 	call	#__system___float_mul
16ea0     FD 14 02 F6 | 	mov	arg02, result1
16ea4     87 E4 1F FF 
16ea8     DB 13 06 F6 | 	mov	arg01, ##1070141403
16eac     1F 14 E6 F4 | 	bitnot	arg02, #31
16eb0     6C C2 B0 FD | 	call	#__system___float_add
16eb4     FD 12 02 F6 | 	mov	arg01, result1
16eb8     94 CF B0 FD | 	call	#__system____builtin_sinf
16ebc     A7 FA 61 FC | 	wrlong	result1, fp
16ec0     08 4E 05 F1 | 	add	fp, #8
16ec4     A7 3C 68 FC | 	wrlong	#30, fp
16ec8     08 4E 85 F1 | 	sub	fp, #8
16ecc     A7 12 02 F6 | 	mov	arg01, fp
16ed0     E8 43 BF FD | 	call	#_push
16ed4                 | LR__1891
16ed4     A7 F0 03 F6 | 	mov	ptra, fp
16ed8     B2 00 A0 FD | 	call	#popregs_
16edc                 | _do_cos_ret
16edc     2D 00 64 FD | 	ret
16ee0                 | 
16ee0                 | ' 
16ee0                 | ' sub do_tan
16ee0                 | _do_tan
16ee0     01 4A 05 F6 | 	mov	COUNT_, #1
16ee4     A8 00 A0 FD | 	call	#pushregs_
16ee8     10 F0 07 F1 | 	add	ptra, #16
16eec     4A 00 00 FF 
16ef0     80 E4 05 F1 | 	add	objptr, ##38016
16ef4     F2 1E 02 FB | 	rdlong	local01, objptr
16ef8     0F 17 02 F6 | 	mov	arg03, local01
16efc     01 16 66 F0 | 	shl	arg03, #1
16f00     0F 17 02 F1 | 	add	arg03, local01
16f04     02 16 66 F0 | 	shl	arg03, #2
16f08     03 00 00 FF 
16f0c     04 E4 85 F1 | 	sub	objptr, ##1540
16f10     F2 16 02 F1 | 	add	arg03, objptr
16f14     0B 17 02 FB | 	rdlong	arg03, arg03
16f18     0C 4E 05 F1 | 	add	fp, #12
16f1c     A7 16 62 FC | 	wrlong	arg03, fp
16f20                 | ' 
16f20                 | ' numpar=compiledline(lineptr_e).result.uresult
16f20                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
16f20     0C 4E 85 F1 | 	sub	fp, #12
16f24     02 16 16 F2 | 	cmp	arg03, #2 wc
16f28     47 00 00 FF 
16f2c     7C E4 85 F1 | 	sub	objptr, ##36476
16f30     0C 4E 05 C1 |  if_b	add	fp, #12
16f34     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16f38     0C 4E 85 C1 |  if_b	sub	fp, #12
16f3c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
16f40     00 12 06 F6 | 	mov	arg01, #0
16f44     58 F4 B0 FD | 	call	#__system___getiolock_0540
16f48     FD 12 02 F6 | 	mov	arg01, result1
16f4c     EC 99 B0 FD | 	call	#__system___lockmem
16f50     84 01 00 FF 
16f54     D7 15 06 F6 | 	mov	arg02, ##@LR__5507
16f58     00 12 06 F6 | 	mov	arg01, #0
16f5c     00 16 06 F6 | 	mov	arg03, #0
16f60     CC A6 B0 FD | 	call	#__system___basic_print_string
16f64     00 12 06 F6 | 	mov	arg01, #0
16f68     34 F4 B0 FD | 	call	#__system___getiolock_0540
16f6c     FD 00 68 FC | 	wrlong	#0, result1
16f70     27 12 06 F6 | 	mov	arg01, #39
16f74     34 64 B0 FD | 	call	#_printerror
16f78     64 00 90 FD | 	jmp	#LR__1901
16f7c                 | LR__1900
16f7c     A4 42 BF FD | 	call	#_pop
16f80     A7 FA 61 FC | 	wrlong	result1, fp
16f84     04 4E 05 F1 | 	add	fp, #4
16f88     A7 FC 61 FC | 	wrlong	result2, fp
16f8c     04 4E 05 F1 | 	add	fp, #4
16f90     A7 FE 61 FC | 	wrlong	result3, fp
16f94     08 4E 85 F1 | 	sub	fp, #8
16f98     51 00 00 FF 
16f9c     BC E5 05 F1 | 	add	objptr, ##41916
16fa0     F2 1E 02 FB | 	rdlong	local01, objptr
16fa4     51 00 00 FF 
16fa8     BC E5 85 F1 | 	sub	objptr, ##41916
16fac     A7 12 02 F6 | 	mov	arg01, fp
16fb0     10 45 BF FD | 	call	#_converttofloat
16fb4     FD 14 02 F6 | 	mov	arg02, result1
16fb8     0F 13 02 F6 | 	mov	arg01, local01
16fbc     30 C5 B0 FD | 	call	#__system___float_mul
16fc0     FD 12 02 F6 | 	mov	arg01, result1
16fc4     D4 CF B0 FD | 	call	#__system____builtin_tanf
16fc8     A7 FA 61 FC | 	wrlong	result1, fp
16fcc     08 4E 05 F1 | 	add	fp, #8
16fd0     A7 3C 68 FC | 	wrlong	#30, fp
16fd4     08 4E 85 F1 | 	sub	fp, #8
16fd8     A7 12 02 F6 | 	mov	arg01, fp
16fdc     DC 42 BF FD | 	call	#_push
16fe0                 | LR__1901
16fe0     A7 F0 03 F6 | 	mov	ptra, fp
16fe4     B2 00 A0 FD | 	call	#popregs_
16fe8                 | _do_tan_ret
16fe8     2D 00 64 FD | 	ret
16fec                 | 
16fec                 | ' 
16fec                 | ' sub do_asin
16fec                 | _do_asin
16fec     01 4A 05 F6 | 	mov	COUNT_, #1
16ff0     A8 00 A0 FD | 	call	#pushregs_
16ff4     10 F0 07 F1 | 	add	ptra, #16
16ff8     4A 00 00 FF 
16ffc     80 E4 05 F1 | 	add	objptr, ##38016
17000     F2 1E 02 FB | 	rdlong	local01, objptr
17004     0F 17 02 F6 | 	mov	arg03, local01
17008     01 16 66 F0 | 	shl	arg03, #1
1700c     0F 17 02 F1 | 	add	arg03, local01
17010     02 16 66 F0 | 	shl	arg03, #2
17014     03 00 00 FF 
17018     04 E4 85 F1 | 	sub	objptr, ##1540
1701c     F2 16 02 F1 | 	add	arg03, objptr
17020     0B 17 02 FB | 	rdlong	arg03, arg03
17024     0C 4E 05 F1 | 	add	fp, #12
17028     A7 16 62 FC | 	wrlong	arg03, fp
1702c                 | ' 
1702c                 | ' numpar=compiledline(lineptr_e).result.uresult
1702c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
1702c     0C 4E 85 F1 | 	sub	fp, #12
17030     02 16 16 F2 | 	cmp	arg03, #2 wc
17034     47 00 00 FF 
17038     7C E4 85 F1 | 	sub	objptr, ##36476
1703c     0C 4E 05 C1 |  if_b	add	fp, #12
17040     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17044     0C 4E 85 C1 |  if_b	sub	fp, #12
17048     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1910
1704c     00 12 06 F6 | 	mov	arg01, #0
17050     4C F3 B0 FD | 	call	#__system___getiolock_0540
17054     FD 12 02 F6 | 	mov	arg01, result1
17058     E0 98 B0 FD | 	call	#__system___lockmem
1705c     84 01 00 FF 
17060     DD 15 06 F6 | 	mov	arg02, ##@LR__5508
17064     00 12 06 F6 | 	mov	arg01, #0
17068     00 16 06 F6 | 	mov	arg03, #0
1706c     C0 A5 B0 FD | 	call	#__system___basic_print_string
17070     00 12 06 F6 | 	mov	arg01, #0
17074     28 F3 B0 FD | 	call	#__system___getiolock_0540
17078     FD 00 68 FC | 	wrlong	#0, result1
1707c     27 12 06 F6 | 	mov	arg01, #39
17080     28 63 B0 FD | 	call	#_printerror
17084     64 00 90 FD | 	jmp	#LR__1911
17088                 | LR__1910
17088     98 41 BF FD | 	call	#_pop
1708c     FF 1E 02 F6 | 	mov	local01, result3
17090     A7 FA 61 FC | 	wrlong	result1, fp
17094     04 4E 05 F1 | 	add	fp, #4
17098     A7 FC 61 FC | 	wrlong	result2, fp
1709c     04 4E 05 F1 | 	add	fp, #4
170a0     A7 1E 62 FC | 	wrlong	local01, fp
170a4     08 4E 85 F1 | 	sub	fp, #8
170a8     A7 12 02 F6 | 	mov	arg01, fp
170ac     14 44 BF FD | 	call	#_converttofloat
170b0     FD 12 02 F6 | 	mov	arg01, result1
170b4     2C CF B0 FD | 	call	#__system____builtin_asinf
170b8     FD 12 02 F6 | 	mov	arg01, result1
170bc     51 00 00 FF 
170c0     C0 E5 05 F1 | 	add	objptr, ##41920
170c4     F2 14 02 FB | 	rdlong	arg02, objptr
170c8     51 00 00 FF 
170cc     C0 E5 85 F1 | 	sub	objptr, ##41920
170d0     1C C4 B0 FD | 	call	#__system___float_mul
170d4     A7 FA 61 FC | 	wrlong	result1, fp
170d8     08 4E 05 F1 | 	add	fp, #8
170dc     A7 3C 68 FC | 	wrlong	#30, fp
170e0     08 4E 85 F1 | 	sub	fp, #8
170e4     A7 12 02 F6 | 	mov	arg01, fp
170e8     D0 41 BF FD | 	call	#_push
170ec                 | LR__1911
170ec     A7 F0 03 F6 | 	mov	ptra, fp
170f0     B2 00 A0 FD | 	call	#popregs_
170f4                 | _do_asin_ret
170f4     2D 00 64 FD | 	ret
170f8                 | 
170f8                 | ' 
170f8                 | ' sub do_acos
170f8                 | _do_acos
170f8     01 4A 05 F6 | 	mov	COUNT_, #1
170fc     A8 00 A0 FD | 	call	#pushregs_
17100     10 F0 07 F1 | 	add	ptra, #16
17104     4A 00 00 FF 
17108     80 E4 05 F1 | 	add	objptr, ##38016
1710c     F2 1E 02 FB | 	rdlong	local01, objptr
17110     0F 17 02 F6 | 	mov	arg03, local01
17114     01 16 66 F0 | 	shl	arg03, #1
17118     0F 17 02 F1 | 	add	arg03, local01
1711c     02 16 66 F0 | 	shl	arg03, #2
17120     03 00 00 FF 
17124     04 E4 85 F1 | 	sub	objptr, ##1540
17128     F2 16 02 F1 | 	add	arg03, objptr
1712c     0B 17 02 FB | 	rdlong	arg03, arg03
17130     0C 4E 05 F1 | 	add	fp, #12
17134     A7 16 62 FC | 	wrlong	arg03, fp
17138                 | ' 
17138                 | ' numpar=compiledline(lineptr_e).result.uresult
17138                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
17138     0C 4E 85 F1 | 	sub	fp, #12
1713c     02 16 16 F2 | 	cmp	arg03, #2 wc
17140     47 00 00 FF 
17144     7C E4 85 F1 | 	sub	objptr, ##36476
17148     0C 4E 05 C1 |  if_b	add	fp, #12
1714c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17150     0C 4E 85 C1 |  if_b	sub	fp, #12
17154     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
17158     00 12 06 F6 | 	mov	arg01, #0
1715c     40 F2 B0 FD | 	call	#__system___getiolock_0540
17160     FD 12 02 F6 | 	mov	arg01, result1
17164     D4 97 B0 FD | 	call	#__system___lockmem
17168     84 01 00 FF 
1716c     E4 15 06 F6 | 	mov	arg02, ##@LR__5509
17170     00 12 06 F6 | 	mov	arg01, #0
17174     00 16 06 F6 | 	mov	arg03, #0
17178     B4 A4 B0 FD | 	call	#__system___basic_print_string
1717c     00 12 06 F6 | 	mov	arg01, #0
17180     1C F2 B0 FD | 	call	#__system___getiolock_0540
17184     FD 00 68 FC | 	wrlong	#0, result1
17188     27 12 06 F6 | 	mov	arg01, #39
1718c     1C 62 B0 FD | 	call	#_printerror
17190     64 00 90 FD | 	jmp	#LR__1921
17194                 | LR__1920
17194     8C 40 BF FD | 	call	#_pop
17198     FF 1E 02 F6 | 	mov	local01, result3
1719c     A7 FA 61 FC | 	wrlong	result1, fp
171a0     04 4E 05 F1 | 	add	fp, #4
171a4     A7 FC 61 FC | 	wrlong	result2, fp
171a8     04 4E 05 F1 | 	add	fp, #4
171ac     A7 1E 62 FC | 	wrlong	local01, fp
171b0     08 4E 85 F1 | 	sub	fp, #8
171b4     A7 12 02 F6 | 	mov	arg01, fp
171b8     08 43 BF FD | 	call	#_converttofloat
171bc     FD 12 02 F6 | 	mov	arg01, result1
171c0     6C CE B0 FD | 	call	#__system____builtin_acosf
171c4     FD 12 02 F6 | 	mov	arg01, result1
171c8     51 00 00 FF 
171cc     C0 E5 05 F1 | 	add	objptr, ##41920
171d0     F2 14 02 FB | 	rdlong	arg02, objptr
171d4     51 00 00 FF 
171d8     C0 E5 85 F1 | 	sub	objptr, ##41920
171dc     10 C3 B0 FD | 	call	#__system___float_mul
171e0     A7 FA 61 FC | 	wrlong	result1, fp
171e4     08 4E 05 F1 | 	add	fp, #8
171e8     A7 3C 68 FC | 	wrlong	#30, fp
171ec     08 4E 85 F1 | 	sub	fp, #8
171f0     A7 12 02 F6 | 	mov	arg01, fp
171f4     C4 40 BF FD | 	call	#_push
171f8                 | LR__1921
171f8     A7 F0 03 F6 | 	mov	ptra, fp
171fc     B2 00 A0 FD | 	call	#popregs_
17200                 | _do_acos_ret
17200     2D 00 64 FD | 	ret
17204                 | 
17204                 | ' 
17204                 | ' sub do_atn
17204                 | _do_atn
17204     01 4A 05 F6 | 	mov	COUNT_, #1
17208     A8 00 A0 FD | 	call	#pushregs_
1720c     10 F0 07 F1 | 	add	ptra, #16
17210     4A 00 00 FF 
17214     80 E4 05 F1 | 	add	objptr, ##38016
17218     F2 1E 02 FB | 	rdlong	local01, objptr
1721c     0F 17 02 F6 | 	mov	arg03, local01
17220     01 16 66 F0 | 	shl	arg03, #1
17224     0F 17 02 F1 | 	add	arg03, local01
17228     02 16 66 F0 | 	shl	arg03, #2
1722c     03 00 00 FF 
17230     04 E4 85 F1 | 	sub	objptr, ##1540
17234     F2 16 02 F1 | 	add	arg03, objptr
17238     0B 17 02 FB | 	rdlong	arg03, arg03
1723c     0C 4E 05 F1 | 	add	fp, #12
17240     A7 16 62 FC | 	wrlong	arg03, fp
17244                 | ' 
17244                 | ' numpar=compiledline(lineptr_e).result.uresult
17244                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
17244     0C 4E 85 F1 | 	sub	fp, #12
17248     02 16 16 F2 | 	cmp	arg03, #2 wc
1724c     47 00 00 FF 
17250     7C E4 85 F1 | 	sub	objptr, ##36476
17254     0C 4E 05 C1 |  if_b	add	fp, #12
17258     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1725c     0C 4E 85 C1 |  if_b	sub	fp, #12
17260     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1930
17264     00 12 06 F6 | 	mov	arg01, #0
17268     34 F1 B0 FD | 	call	#__system___getiolock_0540
1726c     FD 12 02 F6 | 	mov	arg01, result1
17270     C8 96 B0 FD | 	call	#__system___lockmem
17274     84 01 00 FF 
17278     EB 15 06 F6 | 	mov	arg02, ##@LR__5510
1727c     00 12 06 F6 | 	mov	arg01, #0
17280     00 16 06 F6 | 	mov	arg03, #0
17284     A8 A3 B0 FD | 	call	#__system___basic_print_string
17288     00 12 06 F6 | 	mov	arg01, #0
1728c     10 F1 B0 FD | 	call	#__system___getiolock_0540
17290     FD 00 68 FC | 	wrlong	#0, result1
17294     27 12 06 F6 | 	mov	arg01, #39
17298     10 61 B0 FD | 	call	#_printerror
1729c     6C 00 90 FD | 	jmp	#LR__1931
172a0                 | LR__1930
172a0     80 3F BF FD | 	call	#_pop
172a4     FF 1E 02 F6 | 	mov	local01, result3
172a8     A7 FA 61 FC | 	wrlong	result1, fp
172ac     04 4E 05 F1 | 	add	fp, #4
172b0     A7 FC 61 FC | 	wrlong	result2, fp
172b4     04 4E 05 F1 | 	add	fp, #4
172b8     A7 1E 62 FC | 	wrlong	local01, fp
172bc     08 4E 85 F1 | 	sub	fp, #8
172c0     A7 12 02 F6 | 	mov	arg01, fp
172c4     FC 41 BF FD | 	call	#_converttofloat
172c8     FD 12 02 F6 | 	mov	arg01, result1
172cc     00 C0 1F FF 
172d0     00 14 06 F6 | 	mov	arg02, ##1065353216
172d4     A4 CD B0 FD | 	call	#__system____builtin_atan2f
172d8     FD 12 02 F6 | 	mov	arg01, result1
172dc     51 00 00 FF 
172e0     C0 E5 05 F1 | 	add	objptr, ##41920
172e4     F2 14 02 FB | 	rdlong	arg02, objptr
172e8     51 00 00 FF 
172ec     C0 E5 85 F1 | 	sub	objptr, ##41920
172f0     FC C1 B0 FD | 	call	#__system___float_mul
172f4     A7 FA 61 FC | 	wrlong	result1, fp
172f8     08 4E 05 F1 | 	add	fp, #8
172fc     A7 3C 68 FC | 	wrlong	#30, fp
17300     08 4E 85 F1 | 	sub	fp, #8
17304     A7 12 02 F6 | 	mov	arg01, fp
17308     B0 3F BF FD | 	call	#_push
1730c                 | LR__1931
1730c     A7 F0 03 F6 | 	mov	ptra, fp
17310     B2 00 A0 FD | 	call	#popregs_
17314                 | _do_atn_ret
17314     2D 00 64 FD | 	ret
17318                 | 
17318                 | ' 
17318                 | ' sub do_sqr
17318                 | _do_sqr
17318     01 4A 05 F6 | 	mov	COUNT_, #1
1731c     A8 00 A0 FD | 	call	#pushregs_
17320     10 F0 07 F1 | 	add	ptra, #16
17324     4A 00 00 FF 
17328     80 E4 05 F1 | 	add	objptr, ##38016
1732c     F2 1E 02 FB | 	rdlong	local01, objptr
17330     0F 17 02 F6 | 	mov	arg03, local01
17334     01 16 66 F0 | 	shl	arg03, #1
17338     0F 17 02 F1 | 	add	arg03, local01
1733c     02 16 66 F0 | 	shl	arg03, #2
17340     03 00 00 FF 
17344     04 E4 85 F1 | 	sub	objptr, ##1540
17348     F2 16 02 F1 | 	add	arg03, objptr
1734c     0B 17 02 FB | 	rdlong	arg03, arg03
17350     0C 4E 05 F1 | 	add	fp, #12
17354     A7 16 62 FC | 	wrlong	arg03, fp
17358                 | ' 
17358                 | ' numpar=compiledline(lineptr_e).result.uresult
17358                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17358     0C 4E 85 F1 | 	sub	fp, #12
1735c     02 16 16 F2 | 	cmp	arg03, #2 wc
17360     47 00 00 FF 
17364     7C E4 85 F1 | 	sub	objptr, ##36476
17368     0C 4E 05 C1 |  if_b	add	fp, #12
1736c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17370     0C 4E 85 C1 |  if_b	sub	fp, #12
17374     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1940
17378     00 12 06 F6 | 	mov	arg01, #0
1737c     20 F0 B0 FD | 	call	#__system___getiolock_0540
17380     FD 12 02 F6 | 	mov	arg01, result1
17384     B4 95 B0 FD | 	call	#__system___lockmem
17388     84 01 00 FF 
1738c     F1 15 06 F6 | 	mov	arg02, ##@LR__5511
17390     00 12 06 F6 | 	mov	arg01, #0
17394     00 16 06 F6 | 	mov	arg03, #0
17398     94 A2 B0 FD | 	call	#__system___basic_print_string
1739c     00 12 06 F6 | 	mov	arg01, #0
173a0     FC EF B0 FD | 	call	#__system___getiolock_0540
173a4     FD 00 68 FC | 	wrlong	#0, result1
173a8     27 12 06 F6 | 	mov	arg01, #39
173ac     FC 5F B0 FD | 	call	#_printerror
173b0     48 00 90 FD | 	jmp	#LR__1941
173b4                 | LR__1940
173b4     6C 3E BF FD | 	call	#_pop
173b8     FF 1E 02 F6 | 	mov	local01, result3
173bc     A7 FA 61 FC | 	wrlong	result1, fp
173c0     04 4E 05 F1 | 	add	fp, #4
173c4     A7 FC 61 FC | 	wrlong	result2, fp
173c8     04 4E 05 F1 | 	add	fp, #4
173cc     A7 1E 62 FC | 	wrlong	local01, fp
173d0     08 4E 85 F1 | 	sub	fp, #8
173d4     A7 12 02 F6 | 	mov	arg01, fp
173d8     E8 40 BF FD | 	call	#_converttofloat
173dc     FD 12 02 F6 | 	mov	arg01, result1
173e0     34 C0 B0 FD | 	call	#__system___float_sqrt
173e4     A7 FA 61 FC | 	wrlong	result1, fp
173e8     08 4E 05 F1 | 	add	fp, #8
173ec     A7 3C 68 FC | 	wrlong	#30, fp
173f0     08 4E 85 F1 | 	sub	fp, #8
173f4     A7 12 02 F6 | 	mov	arg01, fp
173f8     C0 3E BF FD | 	call	#_push
173fc                 | LR__1941
173fc     A7 F0 03 F6 | 	mov	ptra, fp
17400     B2 00 A0 FD | 	call	#popregs_
17404                 | _do_sqr_ret
17404     2D 00 64 FD | 	ret
17408                 | 
17408                 | ' 
17408                 | ' sub do_stick
17408                 | _do_stick
17408     01 4A 05 F6 | 	mov	COUNT_, #1
1740c     A8 00 A0 FD | 	call	#pushregs_
17410     10 F0 07 F1 | 	add	ptra, #16
17414     4A 00 00 FF 
17418     80 E4 05 F1 | 	add	objptr, ##38016
1741c     F2 1E 02 FB | 	rdlong	local01, objptr
17420     0F 17 02 F6 | 	mov	arg03, local01
17424     01 16 66 F0 | 	shl	arg03, #1
17428     0F 17 02 F1 | 	add	arg03, local01
1742c     02 16 66 F0 | 	shl	arg03, #2
17430     03 00 00 FF 
17434     04 E4 85 F1 | 	sub	objptr, ##1540
17438     F2 16 02 F1 | 	add	arg03, objptr
1743c     0B 17 02 FB | 	rdlong	arg03, arg03
17440     0C 4E 05 F1 | 	add	fp, #12
17444     A7 16 62 FC | 	wrlong	arg03, fp
17448                 | ' 
17448                 | ' numpar=compiledline(lineptr_e).result.uresult
17448                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17448     0C 4E 85 F1 | 	sub	fp, #12
1744c     02 16 16 F2 | 	cmp	arg03, #2 wc
17450     47 00 00 FF 
17454     7C E4 85 F1 | 	sub	objptr, ##36476
17458     3C 00 90 CD |  if_b	jmp	#LR__1950
1745c     00 12 06 F6 | 	mov	arg01, #0
17460     3C EF B0 FD | 	call	#__system___getiolock_0540
17464     FD 12 02 F6 | 	mov	arg01, result1
17468     D0 94 B0 FD | 	call	#__system___lockmem
1746c     84 01 00 FF 
17470     F7 15 06 F6 | 	mov	arg02, ##@LR__5512
17474     00 12 06 F6 | 	mov	arg01, #0
17478     00 16 06 F6 | 	mov	arg03, #0
1747c     B0 A1 B0 FD | 	call	#__system___basic_print_string
17480     00 12 06 F6 | 	mov	arg01, #0
17484     18 EF B0 FD | 	call	#__system___getiolock_0540
17488     FD 00 68 FC | 	wrlong	#0, result1
1748c     27 12 06 F6 | 	mov	arg01, #39
17490     18 5F B0 FD | 	call	#_printerror
17494     E8 00 90 FD | 	jmp	#LR__1954
17498                 | LR__1950
17498                 | ' 
17498                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
17498     0C 4E 05 F1 | 	add	fp, #12
1749c     A7 FE 09 FB | 	rdlong	result3, fp wz
174a0     0C 4E 85 F1 | 	sub	fp, #12
174a4     30 00 90 5D |  if_ne	jmp	#LR__1951
174a8     51 00 00 FF 
174ac     30 E5 05 F1 | 	add	objptr, ##41776
174b0     F2 1E 02 FB | 	rdlong	local01, objptr
174b4     51 00 00 FF 
174b8     30 E5 85 F1 | 	sub	objptr, ##41776
174bc     A7 1E 62 FC | 	wrlong	local01, fp
174c0     08 4E 05 F1 | 	add	fp, #8
174c4     A7 3A 68 FC | 	wrlong	#29, fp
174c8     08 4E 85 F1 | 	sub	fp, #8
174cc     A7 12 02 F6 | 	mov	arg01, fp
174d0     E8 3D BF FD | 	call	#_push
174d4     A8 00 90 FD | 	jmp	#LR__1954
174d8                 | LR__1951
174d8     48 3D BF FD | 	call	#_pop
174dc     A7 FA 61 FC | 	wrlong	result1, fp
174e0     04 4E 05 F1 | 	add	fp, #4
174e4     A7 FC 61 FC | 	wrlong	result2, fp
174e8     04 4E 05 F1 | 	add	fp, #4
174ec     A7 FE 61 FC | 	wrlong	result3, fp
174f0                 | ' 
174f0                 | ' t1=pop()
174f0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
174f0     08 4E 85 F1 | 	sub	fp, #8
174f4     1C FE 0D F2 | 	cmp	result3, #28 wz
174f8     08 4E 05 51 |  if_ne	add	fp, #8
174fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17500     08 4E 85 51 |  if_ne	sub	fp, #8
17504     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17508     6C 00 90 5D |  if_ne	jmp	#LR__1953
1750c     A7 1E 02 FB | 	rdlong	local01, fp
17510     52 00 00 FF 
17514     0C E4 05 F1 | 	add	objptr, ##41996
17518     F2 1E 62 FC | 	wrlong	local01, objptr
1751c                 | '   q=t1.result.uresult
1751c                 | '   if q<7 then 
1751c     52 00 00 FF 
17520     0C E4 85 F1 | 	sub	objptr, ##41996
17524     07 1E 56 F2 | 	cmps	local01, #7 wc
17528     40 00 90 3D |  if_ae	jmp	#LR__1952
1752c     52 00 00 FF 
17530     0C E4 05 F1 | 	add	objptr, ##41996
17534     F2 1E 02 FB | 	rdlong	local01, objptr
17538     02 1E 66 F0 | 	shl	local01, #2
1753c     DC E4 85 F1 | 	sub	objptr, #220
17540     F2 1E 02 F1 | 	add	local01, objptr
17544     0F 1F 02 FB | 	rdlong	local01, local01
17548     A7 1E 62 FC | 	wrlong	local01, fp
1754c     08 4E 05 F1 | 	add	fp, #8
17550     A7 3A 68 FC | 	wrlong	#29, fp
17554     08 4E 85 F1 | 	sub	fp, #8
17558     A7 12 02 F6 | 	mov	arg01, fp
1755c     51 00 00 FF 
17560     30 E5 85 F1 | 	sub	objptr, ##41776
17564     54 3D BF FD | 	call	#_push
17568                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
17568     14 00 90 FD | 	jmp	#LR__1954
1756c                 | LR__1952
1756c     29 12 06 F6 | 	mov	arg01, #41
17570     38 5E B0 FD | 	call	#_printerror
17574                 | '      printerror(41) : return
17574     08 00 90 FD | 	jmp	#LR__1954
17578                 | LR__1953
17578     29 12 06 F6 | 	mov	arg01, #41
1757c     2C 5E B0 FD | 	call	#_printerror
17580                 | LR__1954
17580     A7 F0 03 F6 | 	mov	ptra, fp
17584     B2 00 A0 FD | 	call	#popregs_
17588                 | _do_stick_ret
17588     2D 00 64 FD | 	ret
1758c                 | 
1758c                 | ' 
1758c                 | ' sub do_strig
1758c                 | _do_strig
1758c     01 4A 05 F6 | 	mov	COUNT_, #1
17590     A8 00 A0 FD | 	call	#pushregs_
17594     10 F0 07 F1 | 	add	ptra, #16
17598     4A 00 00 FF 
1759c     80 E4 05 F1 | 	add	objptr, ##38016
175a0     F2 1E 02 FB | 	rdlong	local01, objptr
175a4     0F 17 02 F6 | 	mov	arg03, local01
175a8     01 16 66 F0 | 	shl	arg03, #1
175ac     0F 17 02 F1 | 	add	arg03, local01
175b0     02 16 66 F0 | 	shl	arg03, #2
175b4     03 00 00 FF 
175b8     04 E4 85 F1 | 	sub	objptr, ##1540
175bc     F2 16 02 F1 | 	add	arg03, objptr
175c0     0B 17 02 FB | 	rdlong	arg03, arg03
175c4     0C 4E 05 F1 | 	add	fp, #12
175c8     A7 16 62 FC | 	wrlong	arg03, fp
175cc                 | ' 
175cc                 | ' numpar=compiledline(lineptr_e).result.uresult
175cc                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
175cc     0C 4E 85 F1 | 	sub	fp, #12
175d0     02 16 16 F2 | 	cmp	arg03, #2 wc
175d4     47 00 00 FF 
175d8     7C E4 85 F1 | 	sub	objptr, ##36476
175dc     3C 00 90 CD |  if_b	jmp	#LR__1960
175e0     00 12 06 F6 | 	mov	arg01, #0
175e4     B8 ED B0 FD | 	call	#__system___getiolock_0540
175e8     FD 12 02 F6 | 	mov	arg01, result1
175ec     4C 93 B0 FD | 	call	#__system___lockmem
175f0     84 01 00 FF 
175f4     FF 15 06 F6 | 	mov	arg02, ##@LR__5513
175f8     00 12 06 F6 | 	mov	arg01, #0
175fc     00 16 06 F6 | 	mov	arg03, #0
17600     2C A0 B0 FD | 	call	#__system___basic_print_string
17604     00 12 06 F6 | 	mov	arg01, #0
17608     94 ED B0 FD | 	call	#__system___getiolock_0540
1760c     FD 00 68 FC | 	wrlong	#0, result1
17610     27 12 06 F6 | 	mov	arg01, #39
17614     94 5D B0 FD | 	call	#_printerror
17618     E8 00 90 FD | 	jmp	#LR__1964
1761c                 | LR__1960
1761c                 | ' 
1761c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1761c     0C 4E 05 F1 | 	add	fp, #12
17620     A7 FE 09 FB | 	rdlong	result3, fp wz
17624     0C 4E 85 F1 | 	sub	fp, #12
17628     30 00 90 5D |  if_ne	jmp	#LR__1961
1762c     51 00 00 FF 
17630     4C E5 05 F1 | 	add	objptr, ##41804
17634     F2 1E 02 FB | 	rdlong	local01, objptr
17638     51 00 00 FF 
1763c     4C E5 85 F1 | 	sub	objptr, ##41804
17640     A7 1E 62 FC | 	wrlong	local01, fp
17644     08 4E 05 F1 | 	add	fp, #8
17648     A7 3A 68 FC | 	wrlong	#29, fp
1764c     08 4E 85 F1 | 	sub	fp, #8
17650     A7 12 02 F6 | 	mov	arg01, fp
17654     64 3C BF FD | 	call	#_push
17658     A8 00 90 FD | 	jmp	#LR__1964
1765c                 | LR__1961
1765c     C4 3B BF FD | 	call	#_pop
17660     A7 FA 61 FC | 	wrlong	result1, fp
17664     04 4E 05 F1 | 	add	fp, #4
17668     A7 FC 61 FC | 	wrlong	result2, fp
1766c     04 4E 05 F1 | 	add	fp, #4
17670     A7 FE 61 FC | 	wrlong	result3, fp
17674                 | ' 
17674                 | ' t1=pop()
17674                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17674     08 4E 85 F1 | 	sub	fp, #8
17678     1C FE 0D F2 | 	cmp	result3, #28 wz
1767c     08 4E 05 51 |  if_ne	add	fp, #8
17680     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17684     08 4E 85 51 |  if_ne	sub	fp, #8
17688     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1768c     6C 00 90 5D |  if_ne	jmp	#LR__1963
17690     A7 1E 02 FB | 	rdlong	local01, fp
17694     52 00 00 FF 
17698     0C E4 05 F1 | 	add	objptr, ##41996
1769c     F2 1E 62 FC | 	wrlong	local01, objptr
176a0                 | '   q=t1.result.uresult
176a0                 | '   if q<7 then 
176a0     52 00 00 FF 
176a4     0C E4 85 F1 | 	sub	objptr, ##41996
176a8     07 1E 56 F2 | 	cmps	local01, #7 wc
176ac     40 00 90 3D |  if_ae	jmp	#LR__1962
176b0     52 00 00 FF 
176b4     0C E4 05 F1 | 	add	objptr, ##41996
176b8     F2 1E 02 FB | 	rdlong	local01, objptr
176bc     02 1E 66 F0 | 	shl	local01, #2
176c0     C0 E4 85 F1 | 	sub	objptr, #192
176c4     F2 1E 02 F1 | 	add	local01, objptr
176c8     0F 1F 02 FB | 	rdlong	local01, local01
176cc     A7 1E 62 FC | 	wrlong	local01, fp
176d0     08 4E 05 F1 | 	add	fp, #8
176d4     A7 3A 68 FC | 	wrlong	#29, fp
176d8     08 4E 85 F1 | 	sub	fp, #8
176dc     A7 12 02 F6 | 	mov	arg01, fp
176e0     51 00 00 FF 
176e4     4C E5 85 F1 | 	sub	objptr, ##41804
176e8     D0 3B BF FD | 	call	#_push
176ec                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
176ec     14 00 90 FD | 	jmp	#LR__1964
176f0                 | LR__1962
176f0     29 12 06 F6 | 	mov	arg01, #41
176f4     B4 5C B0 FD | 	call	#_printerror
176f8                 | '      printerror(41) : return
176f8     08 00 90 FD | 	jmp	#LR__1964
176fc                 | LR__1963
176fc     29 12 06 F6 | 	mov	arg01, #41
17700     A8 5C B0 FD | 	call	#_printerror
17704                 | LR__1964
17704     A7 F0 03 F6 | 	mov	ptra, fp
17708     B2 00 A0 FD | 	call	#popregs_
1770c                 | _do_strig_ret
1770c     2D 00 64 FD | 	ret
17710                 | 
17710                 | ' 
17710                 | ' sub do_getpixel
17710                 | _do_getpixel
17710     00 4A 05 F6 | 	mov	COUNT_, #0
17714     A8 00 A0 FD | 	call	#pushregs_
17718     24 F0 07 F1 | 	add	ptra, #36
1771c     4A 00 00 FF 
17720     80 E4 05 F1 | 	add	objptr, ##38016
17724     F2 16 02 FB | 	rdlong	arg03, objptr
17728     0B 15 02 F6 | 	mov	arg02, arg03
1772c     01 14 66 F0 | 	shl	arg02, #1
17730     0B 15 02 F1 | 	add	arg02, arg03
17734     02 14 66 F0 | 	shl	arg02, #2
17738     03 00 00 FF 
1773c     04 E4 85 F1 | 	sub	objptr, ##1540
17740     F2 14 02 F1 | 	add	arg02, objptr
17744     0A 17 02 FB | 	rdlong	arg03, arg02
17748     18 4E 05 F1 | 	add	fp, #24
1774c     A7 16 62 FC | 	wrlong	arg03, fp
17750                 | ' 
17750                 | ' numpar=compiledline(lineptr_e).result.uresult
17750                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
17750     18 4E 85 F1 | 	sub	fp, #24
17754     02 16 0E F2 | 	cmp	arg03, #2 wz
17758     47 00 00 FF 
1775c     7C E4 85 F1 | 	sub	objptr, ##36476
17760     3C 00 90 AD |  if_e	jmp	#LR__1970
17764     00 12 06 F6 | 	mov	arg01, #0
17768     34 EC B0 FD | 	call	#__system___getiolock_0540
1776c     FD 12 02 F6 | 	mov	arg01, result1
17770     C8 91 B0 FD | 	call	#__system___lockmem
17774     85 01 00 FF 
17778     07 14 06 F6 | 	mov	arg02, ##@LR__5514
1777c     00 12 06 F6 | 	mov	arg01, #0
17780     00 16 06 F6 | 	mov	arg03, #0
17784     A8 9E B0 FD | 	call	#__system___basic_print_string
17788     00 12 06 F6 | 	mov	arg01, #0
1778c     10 EC B0 FD | 	call	#__system___getiolock_0540
17790     FD 00 68 FC | 	wrlong	#0, result1
17794     27 12 06 F6 | 	mov	arg01, #39
17798     10 5C B0 FD | 	call	#_printerror
1779c     B4 00 90 FD | 	jmp	#LR__1971
177a0                 | LR__1970
177a0     80 3A BF FD | 	call	#_pop
177a4     FD 16 02 F6 | 	mov	arg03, result1
177a8     FE 14 02 F6 | 	mov	arg02, result2
177ac     FF 12 02 F6 | 	mov	arg01, result3
177b0     0C 4E 05 F1 | 	add	fp, #12
177b4     A7 16 62 FC | 	wrlong	arg03, fp
177b8     04 4E 05 F1 | 	add	fp, #4
177bc     A7 14 62 FC | 	wrlong	arg02, fp
177c0     04 4E 05 F1 | 	add	fp, #4
177c4     A7 12 62 FC | 	wrlong	arg01, fp
177c8     14 4E 85 F1 | 	sub	fp, #20
177cc     54 3A BF FD | 	call	#_pop
177d0     FF 16 02 F6 | 	mov	arg03, result3
177d4     A7 FA 61 FC | 	wrlong	result1, fp
177d8     04 4E 05 F1 | 	add	fp, #4
177dc     A7 FC 61 FC | 	wrlong	result2, fp
177e0     04 4E 05 F1 | 	add	fp, #4
177e4     A7 16 62 FC | 	wrlong	arg03, fp
177e8     08 4E 85 F1 | 	sub	fp, #8
177ec     A7 12 02 F6 | 	mov	arg01, fp
177f0     14 3C BF FD | 	call	#_converttoint
177f4     1C 4E 05 F1 | 	add	fp, #28
177f8     A7 FA 61 FC | 	wrlong	result1, fp
177fc     10 4E 85 F1 | 	sub	fp, #16
17800     A7 12 02 F6 | 	mov	arg01, fp
17804     0C 4E 85 F1 | 	sub	fp, #12
17808     FC 3B BF FD | 	call	#_converttoint
1780c     FD 16 02 F6 | 	mov	arg03, result1
17810     20 4E 05 F1 | 	add	fp, #32
17814     A7 16 62 FC | 	wrlong	arg03, fp
17818     F2 12 02 FB | 	rdlong	arg01, objptr
1781c     04 4E 85 F1 | 	sub	fp, #4
17820     A7 FE 01 FB | 	rdlong	result3, fp
17824     FF 12 02 F1 | 	add	arg01, result3
17828     1C 4E 85 F1 | 	sub	fp, #28
1782c     0A 16 66 F0 | 	shl	arg03, #10
17830     0B 13 02 F1 | 	add	arg01, arg03
17834     B0 5D B0 FD | 	call	#_pspeek
17838     FD FA E1 F8 | 	getbyte	result1, result1, #0
1783c     A7 FA 61 FC | 	wrlong	result1, fp
17840     08 4E 05 F1 | 	add	fp, #8
17844     A7 3A 68 FC | 	wrlong	#29, fp
17848     08 4E 85 F1 | 	sub	fp, #8
1784c     A7 12 02 F6 | 	mov	arg01, fp
17850     68 3A BF FD | 	call	#_push
17854                 | LR__1971
17854     A7 F0 03 F6 | 	mov	ptra, fp
17858     B2 00 A0 FD | 	call	#popregs_
1785c                 | _do_getpixel_ret
1785c     2D 00 64 FD | 	ret
17860                 | 
17860                 | ' 
17860                 | ' sub do_log
17860                 | _do_log
17860     01 4A 05 F6 | 	mov	COUNT_, #1
17864     A8 00 A0 FD | 	call	#pushregs_
17868     14 F0 07 F1 | 	add	ptra, #20
1786c     4A 00 00 FF 
17870     80 E4 05 F1 | 	add	objptr, ##38016
17874     F2 1E 02 FB | 	rdlong	local01, objptr
17878     0F 17 02 F6 | 	mov	arg03, local01
1787c     01 16 66 F0 | 	shl	arg03, #1
17880     0F 17 02 F1 | 	add	arg03, local01
17884     02 16 66 F0 | 	shl	arg03, #2
17888     03 00 00 FF 
1788c     04 E4 85 F1 | 	sub	objptr, ##1540
17890     F2 16 02 F1 | 	add	arg03, objptr
17894     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17898     0C 4E 05 F1 | 	add	fp, #12
1789c     A7 16 62 FC | 	wrlong	arg03, fp
178a0                 | ' 
178a0                 | ' numpar=compiledline(lineptr_e).result.uresult
178a0                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
178a0     0C 4E 85 F1 | 	sub	fp, #12
178a4     47 00 00 FF 
178a8     7C E4 85 F1 | 	sub	objptr, ##36476
178ac     0C 4E 05 51 |  if_ne	add	fp, #12
178b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
178b4     0C 4E 85 51 |  if_ne	sub	fp, #12
178b8     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
178bc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1980
178c0     00 12 06 F6 | 	mov	arg01, #0
178c4     D8 EA B0 FD | 	call	#__system___getiolock_0540
178c8     FD 12 02 F6 | 	mov	arg01, result1
178cc     6C 90 B0 FD | 	call	#__system___lockmem
178d0     85 01 00 FF 
178d4     12 14 06 F6 | 	mov	arg02, ##@LR__5515
178d8     00 12 06 F6 | 	mov	arg01, #0
178dc     00 16 06 F6 | 	mov	arg03, #0
178e0     4C 9D B0 FD | 	call	#__system___basic_print_string
178e4     00 12 06 F6 | 	mov	arg01, #0
178e8     B4 EA B0 FD | 	call	#__system___getiolock_0540
178ec     FD 00 68 FC | 	wrlong	#0, result1
178f0     27 12 06 F6 | 	mov	arg01, #39
178f4     B4 5A B0 FD | 	call	#_printerror
178f8     D0 00 90 FD | 	jmp	#LR__1983
178fc                 | LR__1980
178fc                 | ' 
178fc                 | ' if numpar=2 then 
178fc     0C 4E 05 F1 | 	add	fp, #12
17900     A7 1E 02 FB | 	rdlong	local01, fp
17904     0C 4E 85 F1 | 	sub	fp, #12
17908     02 1E 0E F2 | 	cmp	local01, #2 wz
1790c     48 00 90 5D |  if_ne	jmp	#LR__1981
17910     10 39 BF FD | 	call	#_pop
17914     FF 1E 02 F6 | 	mov	local01, result3
17918     A7 FA 61 FC | 	wrlong	result1, fp
1791c     04 4E 05 F1 | 	add	fp, #4
17920     A7 FC 61 FC | 	wrlong	result2, fp
17924     04 4E 05 F1 | 	add	fp, #4
17928     A7 1E 62 FC | 	wrlong	local01, fp
1792c     08 4E 85 F1 | 	sub	fp, #8
17930     A7 12 02 F6 | 	mov	arg01, fp
17934     8C 3B BF FD | 	call	#_converttofloat
17938     FD 14 02 F6 | 	mov	arg02, result1
1793c     FC 16 20 FF 
17940     54 12 06 F6 | 	mov	arg01, ##1076754516
17944     78 CB B0 FD | 	call	#__system____builtin_logbase
17948     10 4E 05 F1 | 	add	fp, #16
1794c     A7 FA 61 FC | 	wrlong	result1, fp
17950     10 4E 85 F1 | 	sub	fp, #16
17954     10 00 90 FD | 	jmp	#LR__1982
17958                 | LR__1981
17958     10 4E 05 F1 | 	add	fp, #16
1795c     00 C0 9F FF 
17960     A7 00 68 FC | 	wrlong	##1065353216, fp
17964     10 4E 85 F1 | 	sub	fp, #16
17968                 | LR__1982
17968     B8 38 BF FD | 	call	#_pop
1796c     FF 1E 02 F6 | 	mov	local01, result3
17970     A7 FA 61 FC | 	wrlong	result1, fp
17974     04 4E 05 F1 | 	add	fp, #4
17978     A7 FC 61 FC | 	wrlong	result2, fp
1797c     04 4E 05 F1 | 	add	fp, #4
17980     A7 1E 62 FC | 	wrlong	local01, fp
17984     08 4E 85 F1 | 	sub	fp, #8
17988     A7 12 02 F6 | 	mov	arg01, fp
1798c     34 3B BF FD | 	call	#_converttofloat
17990     FD 14 02 F6 | 	mov	arg02, result1
17994     FC 16 20 FF 
17998     54 12 06 F6 | 	mov	arg01, ##1076754516
1799c     20 CB B0 FD | 	call	#__system____builtin_logbase
179a0     FD 12 02 F6 | 	mov	arg01, result1
179a4     10 4E 05 F1 | 	add	fp, #16
179a8     A7 14 02 FB | 	rdlong	arg02, fp
179ac     10 4E 85 F1 | 	sub	fp, #16
179b0     40 BD B0 FD | 	call	#__system___float_div
179b4     A7 FA 61 FC | 	wrlong	result1, fp
179b8     08 4E 05 F1 | 	add	fp, #8
179bc     A7 3C 68 FC | 	wrlong	#30, fp
179c0     08 4E 85 F1 | 	sub	fp, #8
179c4     A7 12 02 F6 | 	mov	arg01, fp
179c8     F0 38 BF FD | 	call	#_push
179cc                 | LR__1983
179cc     A7 F0 03 F6 | 	mov	ptra, fp
179d0     B2 00 A0 FD | 	call	#popregs_
179d4                 | _do_log_ret
179d4     2D 00 64 FD | 	ret
179d8                 | 
179d8                 | ' 
179d8                 | ' sub do_defsprite
179d8                 | _do_defsprite
179d8     07 4A 05 F6 | 	mov	COUNT_, #7
179dc     A8 00 A0 FD | 	call	#pushregs_
179e0     60 F0 07 F1 | 	add	ptra, #96
179e4     3C 38 BF FD | 	call	#_pop
179e8     FD 16 02 F6 | 	mov	arg03, result1
179ec     FE 14 02 F6 | 	mov	arg02, result2
179f0     FF 12 02 F6 | 	mov	arg01, result3
179f4     30 4E 05 F1 | 	add	fp, #48
179f8     A7 16 62 FC | 	wrlong	arg03, fp
179fc     04 4E 05 F1 | 	add	fp, #4
17a00     A7 14 62 FC | 	wrlong	arg02, fp
17a04     04 4E 05 F1 | 	add	fp, #4
17a08     A7 12 62 FC | 	wrlong	arg01, fp
17a0c     38 4E 85 F1 | 	sub	fp, #56
17a10     10 38 BF FD | 	call	#_pop
17a14     FD 16 02 F6 | 	mov	arg03, result1
17a18     FE 14 02 F6 | 	mov	arg02, result2
17a1c     FF 12 02 F6 | 	mov	arg01, result3
17a20     24 4E 05 F1 | 	add	fp, #36
17a24     A7 16 62 FC | 	wrlong	arg03, fp
17a28     04 4E 05 F1 | 	add	fp, #4
17a2c     A7 14 62 FC | 	wrlong	arg02, fp
17a30     04 4E 05 F1 | 	add	fp, #4
17a34     A7 12 62 FC | 	wrlong	arg01, fp
17a38     2C 4E 85 F1 | 	sub	fp, #44
17a3c     E4 37 BF FD | 	call	#_pop
17a40     FD 16 02 F6 | 	mov	arg03, result1
17a44     FE 14 02 F6 | 	mov	arg02, result2
17a48     FF 12 02 F6 | 	mov	arg01, result3
17a4c     18 4E 05 F1 | 	add	fp, #24
17a50     A7 16 62 FC | 	wrlong	arg03, fp
17a54     04 4E 05 F1 | 	add	fp, #4
17a58     A7 14 62 FC | 	wrlong	arg02, fp
17a5c     04 4E 05 F1 | 	add	fp, #4
17a60     A7 12 62 FC | 	wrlong	arg01, fp
17a64     20 4E 85 F1 | 	sub	fp, #32
17a68     B8 37 BF FD | 	call	#_pop
17a6c     FD 16 02 F6 | 	mov	arg03, result1
17a70     FE 14 02 F6 | 	mov	arg02, result2
17a74     FF 12 02 F6 | 	mov	arg01, result3
17a78     0C 4E 05 F1 | 	add	fp, #12
17a7c     A7 16 62 FC | 	wrlong	arg03, fp
17a80     04 4E 05 F1 | 	add	fp, #4
17a84     A7 14 62 FC | 	wrlong	arg02, fp
17a88     04 4E 05 F1 | 	add	fp, #4
17a8c     A7 12 62 FC | 	wrlong	arg01, fp
17a90     14 4E 85 F1 | 	sub	fp, #20
17a94     8C 37 BF FD | 	call	#_pop
17a98     FF 16 02 F6 | 	mov	arg03, result3
17a9c     A7 FA 61 FC | 	wrlong	result1, fp
17aa0     04 4E 05 F1 | 	add	fp, #4
17aa4     A7 FC 61 FC | 	wrlong	result2, fp
17aa8     04 4E 05 F1 | 	add	fp, #4
17aac     A7 16 62 FC | 	wrlong	arg03, fp
17ab0     08 4E 85 F1 | 	sub	fp, #8
17ab4     A7 12 02 F6 | 	mov	arg01, fp
17ab8     4C 39 BF FD | 	call	#_converttoint
17abc     3C 4E 05 F1 | 	add	fp, #60
17ac0     A7 FA 61 FC | 	wrlong	result1, fp
17ac4     30 4E 85 F1 | 	sub	fp, #48
17ac8     A7 12 02 F6 | 	mov	arg01, fp
17acc     0C 4E 85 F1 | 	sub	fp, #12
17ad0     34 39 BF FD | 	call	#_converttoint
17ad4     40 4E 05 F1 | 	add	fp, #64
17ad8     A7 FA 61 FC | 	wrlong	result1, fp
17adc     28 4E 85 F1 | 	sub	fp, #40
17ae0     A7 12 02 F6 | 	mov	arg01, fp
17ae4     18 4E 85 F1 | 	sub	fp, #24
17ae8     1C 39 BF FD | 	call	#_converttoint
17aec     44 4E 05 F1 | 	add	fp, #68
17af0     A7 FA 61 FC | 	wrlong	result1, fp
17af4     20 4E 85 F1 | 	sub	fp, #32
17af8     A7 12 02 F6 | 	mov	arg01, fp
17afc     24 4E 85 F1 | 	sub	fp, #36
17b00     04 39 BF FD | 	call	#_converttoint
17b04     48 4E 05 F1 | 	add	fp, #72
17b08     A7 FA 61 FC | 	wrlong	result1, fp
17b0c     18 4E 85 F1 | 	sub	fp, #24
17b10     A7 12 02 F6 | 	mov	arg01, fp
17b14     30 4E 85 F1 | 	sub	fp, #48
17b18     EC 38 BF FD | 	call	#_converttoint
17b1c     4C 4E 05 F1 | 	add	fp, #76
17b20     A7 FA 61 FC | 	wrlong	result1, fp
17b24                 | ' 
17b24                 | ' t5=pop()
17b24                 | ' t4=pop()
17b24                 | ' t3=pop()
17b24                 | ' t2=pop()
17b24                 | ' t1=pop()
17b24                 | ' 
17b24                 | ' ' do convert, defsprite is not a racing command
17b24                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17b24                 | '  
17b24                 | ' ' todo: check parameters for linits
17b24                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17b24     10 4E 85 F1 | 	sub	fp, #16
17b28     A7 16 02 FB | 	rdlong	arg03, fp
17b2c     3C 4E 85 F1 | 	sub	fp, #60
17b30     02 16 66 F0 | 	shl	arg03, #2
17b34     51 00 00 FF 
17b38     68 E5 05 F1 | 	add	objptr, ##41832
17b3c     F2 16 02 F1 | 	add	arg03, objptr
17b40     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17b44     51 00 00 FF 
17b48     68 E5 85 F1 | 	sub	objptr, ##41832
17b4c     2C 00 90 AD |  if_e	jmp	#LR__1990
17b50     3C 4E 05 F1 | 	add	fp, #60
17b54     A7 16 02 FB | 	rdlong	arg03, fp
17b58     3C 4E 85 F1 | 	sub	fp, #60
17b5c     02 16 66 F0 | 	shl	arg03, #2
17b60     51 00 00 FF 
17b64     68 E5 05 F1 | 	add	objptr, ##41832
17b68     F2 16 02 F1 | 	add	arg03, objptr
17b6c     0B 13 02 FB | 	rdlong	arg01, arg03
17b70     51 00 00 FF 
17b74     68 E5 85 F1 | 	sub	objptr, ##41832
17b78     D8 CD B0 FD | 	call	#__system___gc_free
17b7c                 | LR__1990
17b7c     3C 4E 05 F1 | 	add	fp, #60
17b80     A7 1E 02 FB | 	rdlong	local01, fp
17b84     0C 4E 05 F1 | 	add	fp, #12
17b88     A7 16 02 FB | 	rdlong	arg03, fp
17b8c     04 4E 05 F1 | 	add	fp, #4
17b90     A7 14 02 FB | 	rdlong	arg02, fp
17b94     0A 17 02 FD | 	qmul	arg03, arg02
17b98     02 1E 66 F0 | 	shl	local01, #2
17b9c     51 00 00 FF 
17ba0     68 E5 05 F1 | 	add	objptr, ##41832
17ba4     F2 1E 02 F1 | 	add	local01, objptr
17ba8     4C 4E 85 F1 | 	sub	fp, #76
17bac     51 00 00 FF 
17bb0     68 E5 85 F1 | 	sub	objptr, ##41832
17bb4     18 12 62 FD | 	getqx	arg01
17bb8     5C CC B0 FD | 	call	#__system___gc_alloc_managed
17bbc     0F FB 61 FC | 	wrlong	result1, local01
17bc0                 | ' for y=a3 to a3+a5-1
17bc0     44 4E 05 F1 | 	add	fp, #68
17bc4     A7 20 02 FB | 	rdlong	local02, fp
17bc8     0C 4E 05 F1 | 	add	fp, #12
17bcc     A7 20 62 FC | 	wrlong	local02, fp
17bd0     0C 4E 85 F1 | 	sub	fp, #12
17bd4     A7 22 02 FB | 	rdlong	local03, fp
17bd8     08 4E 05 F1 | 	add	fp, #8
17bdc     A7 24 02 FB | 	rdlong	local04, fp
17be0     4C 4E 85 F1 | 	sub	fp, #76
17be4     12 23 02 F1 | 	add	local03, local04
17be8                 | LR__1991
17be8     50 4E 05 F1 | 	add	fp, #80
17bec     A7 20 02 FB | 	rdlong	local02, fp
17bf0     50 4E 85 F1 | 	sub	fp, #80
17bf4     11 21 52 F2 | 	cmps	local02, local03 wc
17bf8     F4 00 90 3D |  if_ae	jmp	#LR__1994
17bfc                 | '   for x=a2 to a4+a2-1
17bfc     40 4E 05 F1 | 	add	fp, #64
17c00     A7 1E 02 FB | 	rdlong	local01, fp
17c04     14 4E 05 F1 | 	add	fp, #20
17c08     A7 1E 62 FC | 	wrlong	local01, fp
17c0c     0C 4E 85 F1 | 	sub	fp, #12
17c10     A7 26 02 FB | 	rdlong	local05, fp
17c14     08 4E 85 F1 | 	sub	fp, #8
17c18     A7 28 02 FB | 	rdlong	local06, fp
17c1c     40 4E 85 F1 | 	sub	fp, #64
17c20     14 27 02 F1 | 	add	local05, local06
17c24                 | LR__1992
17c24     54 4E 05 F1 | 	add	fp, #84
17c28     A7 1E 02 FB | 	rdlong	local01, fp
17c2c     54 4E 85 F1 | 	sub	fp, #84
17c30     13 1F 52 F2 | 	cmps	local01, local05 wc
17c34     A0 00 90 3D |  if_ae	jmp	#LR__1993
17c38     3C 4E 05 F1 | 	add	fp, #60
17c3c     A7 28 02 FB | 	rdlong	local06, fp
17c40     18 4E 05 F1 | 	add	fp, #24
17c44     A7 24 02 FB | 	rdlong	local04, fp
17c48     14 4E 85 F1 | 	sub	fp, #20
17c4c     A7 20 02 FB | 	rdlong	local02, fp
17c50     10 4E 05 F1 | 	add	fp, #16
17c54     A7 1E 02 FB | 	rdlong	local01, fp
17c58     0F 17 02 F6 | 	mov	arg03, local01
17c5c     0C 4E 85 F1 | 	sub	fp, #12
17c60     A7 14 02 FB | 	rdlong	arg02, fp
17c64     0A 17 82 F1 | 	sub	arg03, arg02
17c68     04 4E 05 F1 | 	add	fp, #4
17c6c     A7 14 02 FB | 	rdlong	arg02, fp
17c70     0A 17 02 FD | 	qmul	arg03, arg02
17c74     02 28 66 F0 | 	shl	local06, #2
17c78     51 00 00 FF 
17c7c     68 E5 05 F1 | 	add	objptr, ##41832
17c80     F2 28 02 F1 | 	add	local06, objptr
17c84     14 29 02 FB | 	rdlong	local06, local06
17c88     12 2B 02 F6 | 	mov	local07, local04
17c8c     10 2B 82 F1 | 	sub	local07, local02
17c90     51 00 00 FF 
17c94     68 E5 85 F1 | 	sub	objptr, ##41832
17c98     F2 12 02 FB | 	rdlong	arg01, objptr
17c9c     12 13 02 F1 | 	add	arg01, local04
17ca0     48 4E 85 F1 | 	sub	fp, #72
17ca4     0A 1E 66 F0 | 	shl	local01, #10
17ca8     0F 13 02 F1 | 	add	arg01, local01
17cac     18 24 62 FD | 	getqx	local04
17cb0     12 2B 02 F1 | 	add	local07, local04
17cb4     14 2B 02 F1 | 	add	local07, local06
17cb8     2C 59 B0 FD | 	call	#_pspeek
17cbc     15 FB 41 FC | 	wrbyte	result1, local07
17cc0     54 4E 05 F1 | 	add	fp, #84
17cc4     A7 2A 02 FB | 	rdlong	local07, fp
17cc8     01 2A 06 F1 | 	add	local07, #1
17ccc     A7 2A 62 FC | 	wrlong	local07, fp
17cd0     54 4E 85 F1 | 	sub	fp, #84
17cd4     4C FF 9F FD | 	jmp	#LR__1992
17cd8                 | LR__1993
17cd8     50 4E 05 F1 | 	add	fp, #80
17cdc     A7 2A 02 FB | 	rdlong	local07, fp
17ce0     01 2A 06 F1 | 	add	local07, #1
17ce4     A7 2A 62 FC | 	wrlong	local07, fp
17ce8     50 4E 85 F1 | 	sub	fp, #80
17cec     F8 FE 9F FD | 	jmp	#LR__1991
17cf0                 | LR__1994
17cf0     3C 4E 05 F1 | 	add	fp, #60
17cf4     A7 2A 02 FB | 	rdlong	local07, fp
17cf8     15 13 02 F6 | 	mov	arg01, local07
17cfc     3C 4E 85 F1 | 	sub	fp, #60
17d00     02 2A 66 F0 | 	shl	local07, #2
17d04     51 00 00 FF 
17d08     68 E5 05 F1 | 	add	objptr, ##41832
17d0c     F2 2A 02 F1 | 	add	local07, objptr
17d10     15 15 02 FB | 	rdlong	arg02, local07
17d14     51 00 00 FF 
17d18     68 E5 85 F1 | 	sub	objptr, ##41832
17d1c     90 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17d20     3C 4E 05 F1 | 	add	fp, #60
17d24     A7 12 02 FB | 	rdlong	arg01, fp
17d28     0C 4E 05 F1 | 	add	fp, #12
17d2c     A7 14 02 FB | 	rdlong	arg02, fp
17d30     04 4E 05 F1 | 	add	fp, #4
17d34     A7 16 02 FB | 	rdlong	arg03, fp
17d38     4C 4E 85 F1 | 	sub	fp, #76
17d3c     00 66 B0 FD | 	call	#_hg010b_spin2_setspritesize
17d40     A7 F0 03 F6 | 	mov	ptra, fp
17d44     B2 00 A0 FD | 	call	#popregs_
17d48                 | _do_defsprite_ret
17d48     2D 00 64 FD | 	ret
17d4c                 | 
17d4c                 | ' 
17d4c                 | ' sub do_sprite
17d4c                 | _do_sprite
17d4c     00 4A 05 F6 | 	mov	COUNT_, #0
17d50     A8 00 A0 FD | 	call	#pushregs_
17d54     30 F0 07 F1 | 	add	ptra, #48
17d58     C8 34 BF FD | 	call	#_pop
17d5c     FD 16 02 F6 | 	mov	arg03, result1
17d60     FE 14 02 F6 | 	mov	arg02, result2
17d64     FF 12 02 F6 | 	mov	arg01, result3
17d68     18 4E 05 F1 | 	add	fp, #24
17d6c     A7 16 62 FC | 	wrlong	arg03, fp
17d70     04 4E 05 F1 | 	add	fp, #4
17d74     A7 14 62 FC | 	wrlong	arg02, fp
17d78     04 4E 05 F1 | 	add	fp, #4
17d7c     A7 12 62 FC | 	wrlong	arg01, fp
17d80     20 4E 85 F1 | 	sub	fp, #32
17d84     9C 34 BF FD | 	call	#_pop
17d88     FD 16 02 F6 | 	mov	arg03, result1
17d8c     FE 14 02 F6 | 	mov	arg02, result2
17d90     FF 12 02 F6 | 	mov	arg01, result3
17d94     0C 4E 05 F1 | 	add	fp, #12
17d98     A7 16 62 FC | 	wrlong	arg03, fp
17d9c     04 4E 05 F1 | 	add	fp, #4
17da0     A7 14 62 FC | 	wrlong	arg02, fp
17da4     04 4E 05 F1 | 	add	fp, #4
17da8     A7 12 62 FC | 	wrlong	arg01, fp
17dac     14 4E 85 F1 | 	sub	fp, #20
17db0     70 34 BF FD | 	call	#_pop
17db4     FF 16 02 F6 | 	mov	arg03, result3
17db8     A7 FA 61 FC | 	wrlong	result1, fp
17dbc     04 4E 05 F1 | 	add	fp, #4
17dc0     A7 FC 61 FC | 	wrlong	result2, fp
17dc4     04 4E 05 F1 | 	add	fp, #4
17dc8     A7 16 62 FC | 	wrlong	arg03, fp
17dcc     08 4E 85 F1 | 	sub	fp, #8
17dd0     A7 12 02 F6 | 	mov	arg01, fp
17dd4     30 36 BF FD | 	call	#_converttoint
17dd8     24 4E 05 F1 | 	add	fp, #36
17ddc     A7 FA 61 FC | 	wrlong	result1, fp
17de0     18 4E 85 F1 | 	sub	fp, #24
17de4     A7 12 02 F6 | 	mov	arg01, fp
17de8     0C 4E 85 F1 | 	sub	fp, #12
17dec     18 36 BF FD | 	call	#_converttoint
17df0     28 4E 05 F1 | 	add	fp, #40
17df4     A7 FA 61 FC | 	wrlong	result1, fp
17df8     10 4E 85 F1 | 	sub	fp, #16
17dfc     A7 12 02 F6 | 	mov	arg01, fp
17e00     18 4E 85 F1 | 	sub	fp, #24
17e04     00 36 BF FD | 	call	#_converttoint
17e08     2C 4E 05 F1 | 	add	fp, #44
17e0c     A7 FA 61 FC | 	wrlong	result1, fp
17e10     08 4E 85 F1 | 	sub	fp, #8
17e14     A7 12 02 FB | 	rdlong	arg01, fp
17e18     04 4E 05 F1 | 	add	fp, #4
17e1c     A7 14 02 FB | 	rdlong	arg02, fp
17e20     FD 16 02 F6 | 	mov	arg03, result1
17e24     28 4E 85 F1 | 	sub	fp, #40
17e28     AC 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
17e2c     A7 F0 03 F6 | 	mov	ptra, fp
17e30     B2 00 A0 FD | 	call	#popregs_
17e34                 | _do_sprite_ret
17e34     2D 00 64 FD | 	ret
17e38                 | 
17e38                 | ' 
17e38                 | ' sub do_mousex
17e38                 | _do_mousex
17e38     00 4A 05 F6 | 	mov	COUNT_, #0
17e3c     A8 00 A0 FD | 	call	#pushregs_
17e40     0C F0 07 F1 | 	add	ptra, #12
17e44     08 4E 05 F1 | 	add	fp, #8
17e48     A7 3A 68 FC | 	wrlong	#29, fp
17e4c     08 4E 85 F1 | 	sub	fp, #8
17e50     51 00 00 FF 
17e54     20 E5 05 F1 | 	add	objptr, ##41760
17e58     F2 12 02 FB | 	rdlong	arg01, objptr
17e5c     51 00 00 FF 
17e60     20 E5 85 F1 | 	sub	objptr, ##41760
17e64     A7 12 62 FC | 	wrlong	arg01, fp
17e68     A7 12 02 F6 | 	mov	arg01, fp
17e6c     4C 34 BF FD | 	call	#_push
17e70     A7 F0 03 F6 | 	mov	ptra, fp
17e74     B2 00 A0 FD | 	call	#popregs_
17e78                 | _do_mousex_ret
17e78     2D 00 64 FD | 	ret
17e7c                 | 
17e7c                 | ' 
17e7c                 | ' sub do_mousey
17e7c                 | _do_mousey
17e7c     00 4A 05 F6 | 	mov	COUNT_, #0
17e80     A8 00 A0 FD | 	call	#pushregs_
17e84     0C F0 07 F1 | 	add	ptra, #12
17e88     08 4E 05 F1 | 	add	fp, #8
17e8c     A7 3A 68 FC | 	wrlong	#29, fp
17e90     08 4E 85 F1 | 	sub	fp, #8
17e94     51 00 00 FF 
17e98     24 E5 05 F1 | 	add	objptr, ##41764
17e9c     F2 12 02 FB | 	rdlong	arg01, objptr
17ea0     51 00 00 FF 
17ea4     24 E5 85 F1 | 	sub	objptr, ##41764
17ea8     A7 12 62 FC | 	wrlong	arg01, fp
17eac     A7 12 02 F6 | 	mov	arg01, fp
17eb0     08 34 BF FD | 	call	#_push
17eb4     A7 F0 03 F6 | 	mov	ptra, fp
17eb8     B2 00 A0 FD | 	call	#popregs_
17ebc                 | _do_mousey_ret
17ebc     2D 00 64 FD | 	ret
17ec0                 | 
17ec0                 | ' 
17ec0                 | ' sub do_mousew
17ec0                 | _do_mousew
17ec0     00 4A 05 F6 | 	mov	COUNT_, #0
17ec4     A8 00 A0 FD | 	call	#pushregs_
17ec8     0C F0 07 F1 | 	add	ptra, #12
17ecc     08 4E 05 F1 | 	add	fp, #8
17ed0     A7 38 68 FC | 	wrlong	#28, fp
17ed4     08 4E 85 F1 | 	sub	fp, #8
17ed8     51 00 00 FF 
17edc     2C E5 05 F1 | 	add	objptr, ##41772
17ee0     F2 12 02 FB | 	rdlong	arg01, objptr
17ee4     51 00 00 FF 
17ee8     2C E5 85 F1 | 	sub	objptr, ##41772
17eec     A7 12 62 FC | 	wrlong	arg01, fp
17ef0     A7 12 02 F6 | 	mov	arg01, fp
17ef4     C4 33 BF FD | 	call	#_push
17ef8     A7 F0 03 F6 | 	mov	ptra, fp
17efc     B2 00 A0 FD | 	call	#popregs_
17f00                 | _do_mousew_ret
17f00     2D 00 64 FD | 	ret
17f04                 | 
17f04                 | ' 
17f04                 | ' sub do_mousek
17f04                 | _do_mousek
17f04     00 4A 05 F6 | 	mov	COUNT_, #0
17f08     A8 00 A0 FD | 	call	#pushregs_
17f0c     0C F0 07 F1 | 	add	ptra, #12
17f10     08 4E 05 F1 | 	add	fp, #8
17f14     A7 3A 68 FC | 	wrlong	#29, fp
17f18     08 4E 85 F1 | 	sub	fp, #8
17f1c     51 00 00 FF 
17f20     28 E5 05 F1 | 	add	objptr, ##41768
17f24     F2 12 02 FB | 	rdlong	arg01, objptr
17f28     51 00 00 FF 
17f2c     28 E5 85 F1 | 	sub	objptr, ##41768
17f30     A7 12 62 FC | 	wrlong	arg01, fp
17f34     A7 12 02 F6 | 	mov	arg01, fp
17f38     80 33 BF FD | 	call	#_push
17f3c     A7 F0 03 F6 | 	mov	ptra, fp
17f40     B2 00 A0 FD | 	call	#popregs_
17f44                 | _do_mousek_ret
17f44     2D 00 64 FD | 	ret
17f48                 | 
17f48                 | ' 
17f48                 | ' 
17f48                 | ' sub do_rdpin
17f48                 | _do_rdpin
17f48     00 4A 05 F6 | 	mov	COUNT_, #0
17f4c     A8 00 A0 FD | 	call	#pushregs_
17f50     0C F0 07 F1 | 	add	ptra, #12
17f54     CC 32 BF FD | 	call	#_pop
17f58     A7 FA 61 FC | 	wrlong	result1, fp
17f5c     04 4E 05 F1 | 	add	fp, #4
17f60     A7 FC 61 FC | 	wrlong	result2, fp
17f64     04 4E 05 F1 | 	add	fp, #4
17f68     A7 FE 61 FC | 	wrlong	result3, fp
17f6c     08 4E 85 F1 | 	sub	fp, #8
17f70     A7 12 02 F6 | 	mov	arg01, fp
17f74     90 34 BF FD | 	call	#_converttoint
17f78     FD FA 89 FA | 	rdpin	result1, result1
17f7c     52 00 00 FF 
17f80     18 E4 05 F1 | 	add	objptr, ##42008
17f84     F2 FA 61 FC | 	wrlong	result1, objptr
17f88     52 00 00 FF 
17f8c     18 E4 85 F1 | 	sub	objptr, ##42008
17f90     08 4E 05 F1 | 	add	fp, #8
17f94     A7 3A 68 FC | 	wrlong	#29, fp
17f98     08 4E 85 F1 | 	sub	fp, #8
17f9c     A7 08 68 FC | 	wrlong	#4, fp
17fa0     A7 12 02 F6 | 	mov	arg01, fp
17fa4     14 33 BF FD | 	call	#_push
17fa8     A7 F0 03 F6 | 	mov	ptra, fp
17fac     B2 00 A0 FD | 	call	#popregs_
17fb0                 | _do_rdpin_ret
17fb0     2D 00 64 FD | 	ret
17fb4                 | 
17fb4                 | ' 
17fb4                 | ' sub do_rqpin
17fb4                 | _do_rqpin
17fb4     00 4A 05 F6 | 	mov	COUNT_, #0
17fb8     A8 00 A0 FD | 	call	#pushregs_
17fbc     0C F0 07 F1 | 	add	ptra, #12
17fc0     60 32 BF FD | 	call	#_pop
17fc4     A7 FA 61 FC | 	wrlong	result1, fp
17fc8     04 4E 05 F1 | 	add	fp, #4
17fcc     A7 FC 61 FC | 	wrlong	result2, fp
17fd0     04 4E 05 F1 | 	add	fp, #4
17fd4     A7 FE 61 FC | 	wrlong	result3, fp
17fd8     08 4E 85 F1 | 	sub	fp, #8
17fdc     A7 12 02 F6 | 	mov	arg01, fp
17fe0     24 34 BF FD | 	call	#_converttoint
17fe4     FD 12 02 F6 | 	mov	arg01, result1
17fe8     00 FA 05 F6 | 	mov	result1, #0
17fec     09 FB 81 FA | 	rqpin	result1, arg01
17ff0     52 00 00 FF 
17ff4     18 E4 05 F1 | 	add	objptr, ##42008
17ff8     F2 FA 61 FC | 	wrlong	result1, objptr
17ffc     52 00 00 FF 
18000     18 E4 85 F1 | 	sub	objptr, ##42008
18004     08 4E 05 F1 | 	add	fp, #8
18008     A7 3A 68 FC | 	wrlong	#29, fp
1800c     08 4E 85 F1 | 	sub	fp, #8
18010     A7 08 68 FC | 	wrlong	#4, fp
18014     A7 12 02 F6 | 	mov	arg01, fp
18018     A0 32 BF FD | 	call	#_push
1801c     A7 F0 03 F6 | 	mov	ptra, fp
18020     B2 00 A0 FD | 	call	#popregs_
18024                 | _do_rqpin_ret
18024     2D 00 64 FD | 	ret
18028                 | 
18028                 | ' 
18028                 | ' sub do_pinread
18028                 | _do_pinread
18028     00 4A 05 F6 | 	mov	COUNT_, #0
1802c     A8 00 A0 FD | 	call	#pushregs_
18030     0C F0 07 F1 | 	add	ptra, #12
18034     EC 31 BF FD | 	call	#_pop
18038     A7 FA 61 FC | 	wrlong	result1, fp
1803c     04 4E 05 F1 | 	add	fp, #4
18040     A7 FC 61 FC | 	wrlong	result2, fp
18044     04 4E 05 F1 | 	add	fp, #4
18048     A7 FE 61 FC | 	wrlong	result3, fp
1804c     08 4E 85 F1 | 	sub	fp, #8
18050     A7 12 02 F6 | 	mov	arg01, fp
18054     B0 33 BF FD | 	call	#_converttoint
18058     FD 12 02 F6 | 	mov	arg01, result1
1805c     20 12 CE F7 | 	test	arg01, #32 wz
18060     FF FB 01 56 |  if_ne	mov	result1, inb
18064     FE FB 01 A6 |  if_e	mov	result1, ina
18068     09 FB 41 F0 | 	shr	result1, arg01
1806c     06 12 46 F0 | 	shr	arg01, #6
18070     09 FB 41 F7 | 	zerox	result1, arg01
18074     52 00 00 FF 
18078     18 E4 05 F1 | 	add	objptr, ##42008
1807c     F2 FA 61 FC | 	wrlong	result1, objptr
18080     52 00 00 FF 
18084     18 E4 85 F1 | 	sub	objptr, ##42008
18088     08 4E 05 F1 | 	add	fp, #8
1808c     A7 3A 68 FC | 	wrlong	#29, fp
18090     08 4E 85 F1 | 	sub	fp, #8
18094     A7 08 68 FC | 	wrlong	#4, fp
18098     A7 12 02 F6 | 	mov	arg01, fp
1809c     1C 32 BF FD | 	call	#_push
180a0     A7 F0 03 F6 | 	mov	ptra, fp
180a4     B2 00 A0 FD | 	call	#popregs_
180a8                 | _do_pinread_ret
180a8     2D 00 64 FD | 	ret
180ac                 | 
180ac                 | ' 
180ac                 | ' sub do_gettime
180ac                 | _do_gettime
180ac     02 4A 05 F6 | 	mov	COUNT_, #2
180b0     A8 00 A0 FD | 	call	#pushregs_
180b4     14 F0 07 F1 | 	add	ptra, #20
180b8                 | ' 
180b8                 | ' const asm 
180b8     1A 1E 72 FD | 	getct	local01 wc
180bc     1A 20 62 FD | 	getct	local02
180c0                 | ' 
180c0                 | ' return hi1, lo1
180c0     10 FD 01 F6 | 	mov	result2, local02
180c4     A7 1E 62 FC | 	wrlong	local01, fp
180c8     04 4E 05 F1 | 	add	fp, #4
180cc     A7 FC 61 FC | 	wrlong	result2, fp
180d0     0C 4E 05 F1 | 	add	fp, #12
180d4     A7 3A 68 FC | 	wrlong	#29, fp
180d8     0C 4E 85 F1 | 	sub	fp, #12
180dc     A7 12 02 FB | 	rdlong	arg01, fp
180e0     04 4E 05 F1 | 	add	fp, #4
180e4     A7 12 62 FC | 	wrlong	arg01, fp
180e8     08 4E 85 F1 | 	sub	fp, #8
180ec     A7 12 02 FB | 	rdlong	arg01, fp
180f0     0C 4E 05 F1 | 	add	fp, #12
180f4     A7 12 62 FC | 	wrlong	arg01, fp
180f8     04 4E 85 F1 | 	sub	fp, #4
180fc     A7 12 02 F6 | 	mov	arg01, fp
18100     08 4E 85 F1 | 	sub	fp, #8
18104     B4 31 BF FD | 	call	#_push
18108     A7 F0 03 F6 | 	mov	ptra, fp
1810c     B2 00 A0 FD | 	call	#popregs_
18110                 | _do_gettime_ret
18110     2D 00 64 FD | 	ret
18114                 | 
18114                 | '    
18114                 | ' 
18114                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
18114                 | ' 
18114                 | ' '' ----------------------------- Clear the screen
18114                 | ' 
18114                 | ' sub do_cls
18114                 | _do_cls
18114     37 00 00 FF 
18118     3C E4 05 F1 | 	add	objptr, ##28220
1811c     F2 12 02 FB | 	rdlong	arg01, objptr
18120     04 E4 85 F1 | 	sub	objptr, #4
18124     F2 14 02 FB | 	rdlong	arg02, objptr
18128     37 00 00 FF 
1812c     38 E4 85 F1 | 	sub	objptr, ##28216
18130     2C 6F B0 FD | 	call	#_hg010b_spin2_cls
18134     37 00 00 FF 
18138     3C E4 05 F1 | 	add	objptr, ##28220
1813c     F2 14 02 FB | 	rdlong	arg02, objptr
18140     14 E4 85 F1 | 	sub	objptr, #20
18144     F2 14 62 FC | 	wrlong	arg02, objptr
18148     37 00 00 FF 
1814c     28 E4 85 F1 | 	sub	objptr, ##28200
18150                 | _do_cls_ret
18150     2D 00 64 FD | 	ret
18154                 | 
18154                 | ' 
18154                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
18154                 | ' 
18154                 | ' sub do_color
18154                 | _do_color
18154     03 4A 05 F6 | 	mov	COUNT_, #3
18158     A8 00 A0 FD | 	call	#pushregs_
1815c     C4 30 BF FD | 	call	#_pop
18160     FD 1E 02 F6 | 	mov	local01, result1
18164     FE 20 02 F6 | 	mov	local02, result2
18168     FF 22 02 F6 | 	mov	local03, result3
1816c     37 00 00 FF 
18170     28 E4 05 F1 | 	add	objptr, ##28200
18174     F2 1E 62 FC | 	wrlong	local01, objptr
18178     37 00 00 FF 
1817c     28 E4 85 F1 | 	sub	objptr, ##28200
18180     A7 F0 03 F6 | 	mov	ptra, fp
18184     B2 00 A0 FD | 	call	#popregs_
18188                 | _do_color_ret
18188     2D 00 64 FD | 	ret
1818c                 | 
1818c                 | ' 
1818c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
1818c                 | ' 
1818c                 | ' sub do_plot
1818c                 | _do_plot
1818c     00 4A 05 F6 | 	mov	COUNT_, #0
18190     A8 00 A0 FD | 	call	#pushregs_
18194     20 F0 07 F1 | 	add	ptra, #32
18198     88 30 BF FD | 	call	#_pop
1819c     FD 16 02 F6 | 	mov	arg03, result1
181a0     FE 14 02 F6 | 	mov	arg02, result2
181a4     FF 12 02 F6 | 	mov	arg01, result3
181a8     0C 4E 05 F1 | 	add	fp, #12
181ac     A7 16 62 FC | 	wrlong	arg03, fp
181b0     04 4E 05 F1 | 	add	fp, #4
181b4     A7 14 62 FC | 	wrlong	arg02, fp
181b8     04 4E 05 F1 | 	add	fp, #4
181bc     A7 12 62 FC | 	wrlong	arg01, fp
181c0     14 4E 85 F1 | 	sub	fp, #20
181c4     5C 30 BF FD | 	call	#_pop
181c8     FF 16 02 F6 | 	mov	arg03, result3
181cc     A7 FA 61 FC | 	wrlong	result1, fp
181d0     04 4E 05 F1 | 	add	fp, #4
181d4     A7 FC 61 FC | 	wrlong	result2, fp
181d8     04 4E 05 F1 | 	add	fp, #4
181dc     A7 16 62 FC | 	wrlong	arg03, fp
181e0     08 4E 85 F1 | 	sub	fp, #8
181e4     A7 12 02 F6 | 	mov	arg01, fp
181e8     1C 32 BF FD | 	call	#_converttoint
181ec     18 4E 05 F1 | 	add	fp, #24
181f0     A7 FA 61 FC | 	wrlong	result1, fp
181f4     0C 4E 85 F1 | 	sub	fp, #12
181f8     A7 12 02 F6 | 	mov	arg01, fp
181fc     0C 4E 85 F1 | 	sub	fp, #12
18200     04 32 BF FD | 	call	#_converttoint
18204     1C 4E 05 F1 | 	add	fp, #28
18208     A7 FA 61 FC | 	wrlong	result1, fp
1820c     04 4E 85 F1 | 	sub	fp, #4
18210     A7 16 02 FB | 	rdlong	arg03, fp
18214     37 00 00 FF 
18218     2C E4 05 F1 | 	add	objptr, ##28204
1821c     F2 16 62 FC | 	wrlong	arg03, objptr
18220     04 4E 05 F1 | 	add	fp, #4
18224     A7 14 02 FB | 	rdlong	arg02, fp
18228     1C 4E 85 F1 | 	sub	fp, #28
1822c     04 E4 05 F1 | 	add	objptr, #4
18230     F2 14 62 FC | 	wrlong	arg02, objptr
18234     04 E4 85 F1 | 	sub	objptr, #4
18238     F2 12 02 FB | 	rdlong	arg01, objptr
1823c     04 E4 85 F1 | 	sub	objptr, #4
18240     F2 16 02 FB | 	rdlong	arg03, objptr
18244     37 00 00 FF 
18248     28 E4 85 F1 | 	sub	objptr, ##28200
1824c     3C 61 B0 FD | 	call	#_hg010b_spin2_putpixel
18250     A7 F0 03 F6 | 	mov	ptra, fp
18254     B2 00 A0 FD | 	call	#popregs_
18258                 | _do_plot_ret
18258     2D 00 64 FD | 	ret
1825c                 | 
1825c                 | ' 
1825c                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
1825c                 | ' 
1825c                 | ' sub do_draw
1825c                 | _do_draw
1825c     00 4A 05 F6 | 	mov	COUNT_, #0
18260     A8 00 A0 FD | 	call	#pushregs_
18264     20 F0 07 F1 | 	add	ptra, #32
18268     B8 2F BF FD | 	call	#_pop
1826c     FD 1A 02 F6 | 	mov	arg05, result1
18270     FE 18 02 F6 | 	mov	arg04, result2
18274     FF 16 02 F6 | 	mov	arg03, result3
18278     0C 4E 05 F1 | 	add	fp, #12
1827c     A7 1A 62 FC | 	wrlong	arg05, fp
18280     04 4E 05 F1 | 	add	fp, #4
18284     A7 18 62 FC | 	wrlong	arg04, fp
18288     04 4E 05 F1 | 	add	fp, #4
1828c     A7 16 62 FC | 	wrlong	arg03, fp
18290     14 4E 85 F1 | 	sub	fp, #20
18294     8C 2F BF FD | 	call	#_pop
18298     FF 1A 02 F6 | 	mov	arg05, result3
1829c     A7 FA 61 FC | 	wrlong	result1, fp
182a0     04 4E 05 F1 | 	add	fp, #4
182a4     A7 FC 61 FC | 	wrlong	result2, fp
182a8     04 4E 05 F1 | 	add	fp, #4
182ac     A7 1A 62 FC | 	wrlong	arg05, fp
182b0     08 4E 85 F1 | 	sub	fp, #8
182b4     A7 12 02 F6 | 	mov	arg01, fp
182b8     4C 31 BF FD | 	call	#_converttoint
182bc     18 4E 05 F1 | 	add	fp, #24
182c0     A7 FA 61 FC | 	wrlong	result1, fp
182c4     0C 4E 85 F1 | 	sub	fp, #12
182c8     A7 12 02 F6 | 	mov	arg01, fp
182cc     0C 4E 85 F1 | 	sub	fp, #12
182d0     34 31 BF FD | 	call	#_converttoint
182d4     1C 4E 05 F1 | 	add	fp, #28
182d8     A7 FA 61 FC | 	wrlong	result1, fp
182dc     37 00 00 FF 
182e0     2C E4 05 F1 | 	add	objptr, ##28204
182e4     F2 12 02 FB | 	rdlong	arg01, objptr
182e8     04 E4 05 F1 | 	add	objptr, #4
182ec     F2 14 02 FB | 	rdlong	arg02, objptr
182f0     04 4E 85 F1 | 	sub	fp, #4
182f4     A7 16 02 FB | 	rdlong	arg03, fp
182f8     FD 18 02 F6 | 	mov	arg04, result1
182fc     18 4E 85 F1 | 	sub	fp, #24
18300     08 E4 85 F1 | 	sub	objptr, #8
18304     F2 1A 02 FB | 	rdlong	arg05, objptr
18308     37 00 00 FF 
1830c     28 E4 85 F1 | 	sub	objptr, ##28200
18310     28 63 B0 FD | 	call	#_hg010b_spin2_draw
18314     18 4E 05 F1 | 	add	fp, #24
18318     A7 1A 02 FB | 	rdlong	arg05, fp
1831c     37 00 00 FF 
18320     2C E4 05 F1 | 	add	objptr, ##28204
18324     F2 1A 62 FC | 	wrlong	arg05, objptr
18328     04 4E 05 F1 | 	add	fp, #4
1832c     A7 1A 02 FB | 	rdlong	arg05, fp
18330     1C 4E 85 F1 | 	sub	fp, #28
18334     04 E4 05 F1 | 	add	objptr, #4
18338     F2 1A 62 FC | 	wrlong	arg05, objptr
1833c     37 00 00 FF 
18340     30 E4 85 F1 | 	sub	objptr, ##28208
18344     A7 F0 03 F6 | 	mov	ptra, fp
18348     B2 00 A0 FD | 	call	#popregs_
1834c                 | _do_draw_ret
1834c     2D 00 64 FD | 	ret
18350                 | 
18350                 | ' 
18350                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
18350                 | ' 
18350                 | ' sub do_fcircle
18350                 | _do_fcircle
18350     02 4A 05 F6 | 	mov	COUNT_, #2
18354     A8 00 A0 FD | 	call	#pushregs_
18358     24 F0 07 F1 | 	add	ptra, #36
1835c     C4 2E BF FD | 	call	#_pop
18360     FD 18 02 F6 | 	mov	arg04, result1
18364     FE 16 02 F6 | 	mov	arg03, result2
18368     FF 14 02 F6 | 	mov	arg02, result3
1836c     18 4E 05 F1 | 	add	fp, #24
18370     A7 18 62 FC | 	wrlong	arg04, fp
18374     04 4E 05 F1 | 	add	fp, #4
18378     A7 16 62 FC | 	wrlong	arg03, fp
1837c     04 4E 05 F1 | 	add	fp, #4
18380     A7 14 62 FC | 	wrlong	arg02, fp
18384     20 4E 85 F1 | 	sub	fp, #32
18388     98 2E BF FD | 	call	#_pop
1838c     FD 18 02 F6 | 	mov	arg04, result1
18390     FE 16 02 F6 | 	mov	arg03, result2
18394     FF 1E 02 F6 | 	mov	local01, result3
18398     0C 4E 05 F1 | 	add	fp, #12
1839c     A7 18 62 FC | 	wrlong	arg04, fp
183a0     04 4E 05 F1 | 	add	fp, #4
183a4     A7 16 62 FC | 	wrlong	arg03, fp
183a8     04 4E 05 F1 | 	add	fp, #4
183ac     A7 1E 62 FC | 	wrlong	local01, fp
183b0     14 4E 85 F1 | 	sub	fp, #20
183b4     6C 2E BF FD | 	call	#_pop
183b8     A7 FA 61 FC | 	wrlong	result1, fp
183bc     04 4E 05 F1 | 	add	fp, #4
183c0     A7 FC 61 FC | 	wrlong	result2, fp
183c4     04 4E 05 F1 | 	add	fp, #4
183c8     A7 FE 61 FC | 	wrlong	result3, fp
183cc                 | ' 
183cc                 | ' t3=pop()
183cc                 | ' t2=pop()
183cc                 | ' t1=pop()
183cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
183cc     FF 18 02 F6 | 	mov	arg04, result3
183d0     08 4E 85 F1 | 	sub	fp, #8
183d4     1C 18 0E F2 | 	cmp	arg04, #28 wz
183d8     08 4E 05 51 |  if_ne	add	fp, #8
183dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
183e0     08 4E 85 51 |  if_ne	sub	fp, #8
183e4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
183e8     7C 00 90 5D |  if_ne	jmp	#LR__2000
183ec     14 4E 05 F1 | 	add	fp, #20
183f0     A7 1E 02 FB | 	rdlong	local01, fp
183f4     14 4E 85 F1 | 	sub	fp, #20
183f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
183fc     14 4E 05 51 |  if_ne	add	fp, #20
18400     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18404     14 4E 85 51 |  if_ne	sub	fp, #20
18408     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1840c     58 00 90 5D |  if_ne	jmp	#LR__2000
18410     20 4E 05 F1 | 	add	fp, #32
18414     A7 1E 02 FB | 	rdlong	local01, fp
18418     20 4E 85 F1 | 	sub	fp, #32
1841c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18420     20 4E 05 51 |  if_ne	add	fp, #32
18424     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18428     20 4E 85 51 |  if_ne	sub	fp, #32
1842c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18430     34 00 90 5D |  if_ne	jmp	#LR__2000
18434     A7 12 02 FB | 	rdlong	arg01, fp
18438     0C 4E 05 F1 | 	add	fp, #12
1843c     A7 14 02 FB | 	rdlong	arg02, fp
18440     0C 4E 05 F1 | 	add	fp, #12
18444     A7 16 02 FB | 	rdlong	arg03, fp
18448     18 4E 85 F1 | 	sub	fp, #24
1844c     37 00 00 FF 
18450     28 E4 05 F1 | 	add	objptr, ##28200
18454     F2 18 02 FB | 	rdlong	arg04, objptr
18458     37 00 00 FF 
1845c     28 E4 85 F1 | 	sub	objptr, ##28200
18460     5C 66 B0 FD | 	call	#_hg010b_spin2_fcircle
18464                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
18464     54 00 90 FD | 	jmp	#LR__2001
18468                 | LR__2000
18468     A7 12 02 F6 | 	mov	arg01, fp
1846c     98 2F BF FD | 	call	#_converttoint
18470     FD 1E 02 F6 | 	mov	local01, result1
18474     0C 4E 05 F1 | 	add	fp, #12
18478     A7 12 02 F6 | 	mov	arg01, fp
1847c     0C 4E 85 F1 | 	sub	fp, #12
18480     84 2F BF FD | 	call	#_converttoint
18484     FD 20 02 F6 | 	mov	local02, result1
18488     18 4E 05 F1 | 	add	fp, #24
1848c     A7 12 02 F6 | 	mov	arg01, fp
18490     18 4E 85 F1 | 	sub	fp, #24
18494     70 2F BF FD | 	call	#_converttoint
18498     FD 16 02 F6 | 	mov	arg03, result1
1849c     37 00 00 FF 
184a0     28 E4 05 F1 | 	add	objptr, ##28200
184a4     F2 18 02 FB | 	rdlong	arg04, objptr
184a8     37 00 00 FF 
184ac     28 E4 85 F1 | 	sub	objptr, ##28200
184b0     0F 13 02 F6 | 	mov	arg01, local01
184b4     10 15 02 F6 | 	mov	arg02, local02
184b8     04 66 B0 FD | 	call	#_hg010b_spin2_fcircle
184bc                 | LR__2001
184bc     A7 F0 03 F6 | 	mov	ptra, fp
184c0     B2 00 A0 FD | 	call	#popregs_
184c4                 | _do_fcircle_ret
184c4     2D 00 64 FD | 	ret
184c8                 | 
184c8                 | ' 
184c8                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
184c8                 | ' 
184c8                 | ' sub do_circle
184c8                 | _do_circle
184c8     02 4A 05 F6 | 	mov	COUNT_, #2
184cc     A8 00 A0 FD | 	call	#pushregs_
184d0     24 F0 07 F1 | 	add	ptra, #36
184d4     4C 2D BF FD | 	call	#_pop
184d8     FD 18 02 F6 | 	mov	arg04, result1
184dc     FE 16 02 F6 | 	mov	arg03, result2
184e0     FF 14 02 F6 | 	mov	arg02, result3
184e4     18 4E 05 F1 | 	add	fp, #24
184e8     A7 18 62 FC | 	wrlong	arg04, fp
184ec     04 4E 05 F1 | 	add	fp, #4
184f0     A7 16 62 FC | 	wrlong	arg03, fp
184f4     04 4E 05 F1 | 	add	fp, #4
184f8     A7 14 62 FC | 	wrlong	arg02, fp
184fc     20 4E 85 F1 | 	sub	fp, #32
18500     20 2D BF FD | 	call	#_pop
18504     FD 18 02 F6 | 	mov	arg04, result1
18508     FE 16 02 F6 | 	mov	arg03, result2
1850c     FF 1E 02 F6 | 	mov	local01, result3
18510     0C 4E 05 F1 | 	add	fp, #12
18514     A7 18 62 FC | 	wrlong	arg04, fp
18518     04 4E 05 F1 | 	add	fp, #4
1851c     A7 16 62 FC | 	wrlong	arg03, fp
18520     04 4E 05 F1 | 	add	fp, #4
18524     A7 1E 62 FC | 	wrlong	local01, fp
18528     14 4E 85 F1 | 	sub	fp, #20
1852c     F4 2C BF FD | 	call	#_pop
18530     A7 FA 61 FC | 	wrlong	result1, fp
18534     04 4E 05 F1 | 	add	fp, #4
18538     A7 FC 61 FC | 	wrlong	result2, fp
1853c     04 4E 05 F1 | 	add	fp, #4
18540     A7 FE 61 FC | 	wrlong	result3, fp
18544                 | ' 
18544                 | ' t3=pop()
18544                 | ' t2=pop()
18544                 | ' t1=pop()
18544                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
18544     FF 18 02 F6 | 	mov	arg04, result3
18548     08 4E 85 F1 | 	sub	fp, #8
1854c     1C 18 0E F2 | 	cmp	arg04, #28 wz
18550     08 4E 05 51 |  if_ne	add	fp, #8
18554     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18558     08 4E 85 51 |  if_ne	sub	fp, #8
1855c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18560     7C 00 90 5D |  if_ne	jmp	#LR__2010
18564     14 4E 05 F1 | 	add	fp, #20
18568     A7 1E 02 FB | 	rdlong	local01, fp
1856c     14 4E 85 F1 | 	sub	fp, #20
18570     1C 1E 0E F2 | 	cmp	local01, #28 wz
18574     14 4E 05 51 |  if_ne	add	fp, #20
18578     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1857c     14 4E 85 51 |  if_ne	sub	fp, #20
18580     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18584     58 00 90 5D |  if_ne	jmp	#LR__2010
18588     20 4E 05 F1 | 	add	fp, #32
1858c     A7 1E 02 FB | 	rdlong	local01, fp
18590     20 4E 85 F1 | 	sub	fp, #32
18594     1C 1E 0E F2 | 	cmp	local01, #28 wz
18598     20 4E 05 51 |  if_ne	add	fp, #32
1859c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185a0     20 4E 85 51 |  if_ne	sub	fp, #32
185a4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185a8     34 00 90 5D |  if_ne	jmp	#LR__2010
185ac     A7 12 02 FB | 	rdlong	arg01, fp
185b0     0C 4E 05 F1 | 	add	fp, #12
185b4     A7 14 02 FB | 	rdlong	arg02, fp
185b8     0C 4E 05 F1 | 	add	fp, #12
185bc     A7 16 02 FB | 	rdlong	arg03, fp
185c0     18 4E 85 F1 | 	sub	fp, #24
185c4     37 00 00 FF 
185c8     28 E4 05 F1 | 	add	objptr, ##28200
185cc     F2 18 02 FB | 	rdlong	arg04, objptr
185d0     37 00 00 FF 
185d4     28 E4 85 F1 | 	sub	objptr, ##28200
185d8     F0 65 B0 FD | 	call	#_hg010b_spin2_circle
185dc                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
185dc     54 00 90 FD | 	jmp	#LR__2011
185e0                 | LR__2010
185e0     A7 12 02 F6 | 	mov	arg01, fp
185e4     20 2E BF FD | 	call	#_converttoint
185e8     FD 1E 02 F6 | 	mov	local01, result1
185ec     0C 4E 05 F1 | 	add	fp, #12
185f0     A7 12 02 F6 | 	mov	arg01, fp
185f4     0C 4E 85 F1 | 	sub	fp, #12
185f8     0C 2E BF FD | 	call	#_converttoint
185fc     FD 20 02 F6 | 	mov	local02, result1
18600     18 4E 05 F1 | 	add	fp, #24
18604     A7 12 02 F6 | 	mov	arg01, fp
18608     18 4E 85 F1 | 	sub	fp, #24
1860c     F8 2D BF FD | 	call	#_converttoint
18610     FD 16 02 F6 | 	mov	arg03, result1
18614     37 00 00 FF 
18618     28 E4 05 F1 | 	add	objptr, ##28200
1861c     F2 18 02 FB | 	rdlong	arg04, objptr
18620     37 00 00 FF 
18624     28 E4 85 F1 | 	sub	objptr, ##28200
18628     0F 13 02 F6 | 	mov	arg01, local01
1862c     10 15 02 F6 | 	mov	arg02, local02
18630     98 65 B0 FD | 	call	#_hg010b_spin2_circle
18634                 | LR__2011
18634     A7 F0 03 F6 | 	mov	ptra, fp
18638     B2 00 A0 FD | 	call	#popregs_
1863c                 | _do_circle_ret
1863c     2D 00 64 FD | 	ret
18640                 | 
18640                 | ' 
18640                 | ' ' -------------------------- Draw a rectangle
18640                 | ' 
18640                 | ' sub do_box
18640                 | _do_box
18640     03 4A 05 F6 | 	mov	COUNT_, #3
18644     A8 00 A0 FD | 	call	#pushregs_
18648     30 F0 07 F1 | 	add	ptra, #48
1864c     D4 2B BF FD | 	call	#_pop
18650     FD 1A 02 F6 | 	mov	arg05, result1
18654     FE 18 02 F6 | 	mov	arg04, result2
18658     FF 16 02 F6 | 	mov	arg03, result3
1865c     24 4E 05 F1 | 	add	fp, #36
18660     A7 1A 62 FC | 	wrlong	arg05, fp
18664     04 4E 05 F1 | 	add	fp, #4
18668     A7 18 62 FC | 	wrlong	arg04, fp
1866c     04 4E 05 F1 | 	add	fp, #4
18670     A7 16 62 FC | 	wrlong	arg03, fp
18674     2C 4E 85 F1 | 	sub	fp, #44
18678     A8 2B BF FD | 	call	#_pop
1867c     FD 1A 02 F6 | 	mov	arg05, result1
18680     FE 18 02 F6 | 	mov	arg04, result2
18684     FF 16 02 F6 | 	mov	arg03, result3
18688     18 4E 05 F1 | 	add	fp, #24
1868c     A7 1A 62 FC | 	wrlong	arg05, fp
18690     04 4E 05 F1 | 	add	fp, #4
18694     A7 18 62 FC | 	wrlong	arg04, fp
18698     04 4E 05 F1 | 	add	fp, #4
1869c     A7 16 62 FC | 	wrlong	arg03, fp
186a0     20 4E 85 F1 | 	sub	fp, #32
186a4     7C 2B BF FD | 	call	#_pop
186a8     FD 1A 02 F6 | 	mov	arg05, result1
186ac     FE 18 02 F6 | 	mov	arg04, result2
186b0     FF 1E 02 F6 | 	mov	local01, result3
186b4     0C 4E 05 F1 | 	add	fp, #12
186b8     A7 1A 62 FC | 	wrlong	arg05, fp
186bc     04 4E 05 F1 | 	add	fp, #4
186c0     A7 18 62 FC | 	wrlong	arg04, fp
186c4     04 4E 05 F1 | 	add	fp, #4
186c8     A7 1E 62 FC | 	wrlong	local01, fp
186cc     14 4E 85 F1 | 	sub	fp, #20
186d0     50 2B BF FD | 	call	#_pop
186d4     A7 FA 61 FC | 	wrlong	result1, fp
186d8     04 4E 05 F1 | 	add	fp, #4
186dc     A7 FC 61 FC | 	wrlong	result2, fp
186e0     04 4E 05 F1 | 	add	fp, #4
186e4     A7 FE 61 FC | 	wrlong	result3, fp
186e8                 | ' 
186e8                 | ' t4=pop()
186e8                 | ' t3=pop()
186e8                 | ' t2=pop()
186e8                 | ' t1=pop()
186e8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
186e8     FF 1A 02 F6 | 	mov	arg05, result3
186ec     08 4E 85 F1 | 	sub	fp, #8
186f0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
186f4     08 4E 05 51 |  if_ne	add	fp, #8
186f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
186fc     08 4E 85 51 |  if_ne	sub	fp, #8
18700     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18704     A8 00 90 5D |  if_ne	jmp	#LR__2020
18708     14 4E 05 F1 | 	add	fp, #20
1870c     A7 1E 02 FB | 	rdlong	local01, fp
18710     14 4E 85 F1 | 	sub	fp, #20
18714     1C 1E 0E F2 | 	cmp	local01, #28 wz
18718     14 4E 05 51 |  if_ne	add	fp, #20
1871c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18720     14 4E 85 51 |  if_ne	sub	fp, #20
18724     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18728     84 00 90 5D |  if_ne	jmp	#LR__2020
1872c     20 4E 05 F1 | 	add	fp, #32
18730     A7 1E 02 FB | 	rdlong	local01, fp
18734     20 4E 85 F1 | 	sub	fp, #32
18738     1C 1E 0E F2 | 	cmp	local01, #28 wz
1873c     20 4E 05 51 |  if_ne	add	fp, #32
18740     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18744     20 4E 85 51 |  if_ne	sub	fp, #32
18748     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1874c     60 00 90 5D |  if_ne	jmp	#LR__2020
18750     2C 4E 05 F1 | 	add	fp, #44
18754     A7 1E 02 FB | 	rdlong	local01, fp
18758     2C 4E 85 F1 | 	sub	fp, #44
1875c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18760     2C 4E 05 51 |  if_ne	add	fp, #44
18764     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18768     2C 4E 85 51 |  if_ne	sub	fp, #44
1876c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18770     3C 00 90 5D |  if_ne	jmp	#LR__2020
18774     A7 12 02 FB | 	rdlong	arg01, fp
18778     0C 4E 05 F1 | 	add	fp, #12
1877c     A7 14 02 FB | 	rdlong	arg02, fp
18780     0C 4E 05 F1 | 	add	fp, #12
18784     A7 16 02 FB | 	rdlong	arg03, fp
18788     0C 4E 05 F1 | 	add	fp, #12
1878c     A7 18 02 FB | 	rdlong	arg04, fp
18790     24 4E 85 F1 | 	sub	fp, #36
18794     37 00 00 FF 
18798     28 E4 05 F1 | 	add	objptr, ##28200
1879c     F2 1A 02 FB | 	rdlong	arg05, objptr
187a0     37 00 00 FF 
187a4     28 E4 85 F1 | 	sub	objptr, ##28200
187a8     EC 65 B0 FD | 	call	#_hg010b_spin2_box
187ac                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
187ac     6C 00 90 FD | 	jmp	#LR__2021
187b0                 | LR__2020
187b0     A7 12 02 F6 | 	mov	arg01, fp
187b4     50 2C BF FD | 	call	#_converttoint
187b8     FD 20 02 F6 | 	mov	local02, result1
187bc     0C 4E 05 F1 | 	add	fp, #12
187c0     A7 12 02 F6 | 	mov	arg01, fp
187c4     0C 4E 85 F1 | 	sub	fp, #12
187c8     3C 2C BF FD | 	call	#_converttoint
187cc     FD 22 02 F6 | 	mov	local03, result1
187d0     18 4E 05 F1 | 	add	fp, #24
187d4     A7 12 02 F6 | 	mov	arg01, fp
187d8     18 4E 85 F1 | 	sub	fp, #24
187dc     28 2C BF FD | 	call	#_converttoint
187e0     FD 1E 02 F6 | 	mov	local01, result1
187e4     24 4E 05 F1 | 	add	fp, #36
187e8     A7 12 02 F6 | 	mov	arg01, fp
187ec     24 4E 85 F1 | 	sub	fp, #36
187f0     14 2C BF FD | 	call	#_converttoint
187f4     FD 18 02 F6 | 	mov	arg04, result1
187f8     37 00 00 FF 
187fc     28 E4 05 F1 | 	add	objptr, ##28200
18800     F2 1A 02 FB | 	rdlong	arg05, objptr
18804     37 00 00 FF 
18808     28 E4 85 F1 | 	sub	objptr, ##28200
1880c     10 13 02 F6 | 	mov	arg01, local02
18810     11 15 02 F6 | 	mov	arg02, local03
18814     0F 17 02 F6 | 	mov	arg03, local01
18818     7C 65 B0 FD | 	call	#_hg010b_spin2_box
1881c                 | LR__2021
1881c     A7 F0 03 F6 | 	mov	ptra, fp
18820     B2 00 A0 FD | 	call	#popregs_
18824                 | _do_box_ret
18824     2D 00 64 FD | 	ret
18828                 | 
18828                 | ' 
18828                 | ' sub do_fill
18828                 | _do_fill
18828     03 4A 05 F6 | 	mov	COUNT_, #3
1882c     A8 00 A0 FD | 	call	#pushregs_
18830     30 F0 07 F1 | 	add	ptra, #48
18834     EC 29 BF FD | 	call	#_pop
18838     FD 18 02 F6 | 	mov	arg04, result1
1883c     FE 16 02 F6 | 	mov	arg03, result2
18840     FF 14 02 F6 | 	mov	arg02, result3
18844     24 4E 05 F1 | 	add	fp, #36
18848     A7 18 62 FC | 	wrlong	arg04, fp
1884c     04 4E 05 F1 | 	add	fp, #4
18850     A7 16 62 FC | 	wrlong	arg03, fp
18854     04 4E 05 F1 | 	add	fp, #4
18858     A7 14 62 FC | 	wrlong	arg02, fp
1885c     2C 4E 85 F1 | 	sub	fp, #44
18860     C0 29 BF FD | 	call	#_pop
18864     FD 18 02 F6 | 	mov	arg04, result1
18868     FE 16 02 F6 | 	mov	arg03, result2
1886c     FF 14 02 F6 | 	mov	arg02, result3
18870     18 4E 05 F1 | 	add	fp, #24
18874     A7 18 62 FC | 	wrlong	arg04, fp
18878     04 4E 05 F1 | 	add	fp, #4
1887c     A7 16 62 FC | 	wrlong	arg03, fp
18880     04 4E 05 F1 | 	add	fp, #4
18884     A7 14 62 FC | 	wrlong	arg02, fp
18888     20 4E 85 F1 | 	sub	fp, #32
1888c     94 29 BF FD | 	call	#_pop
18890     FD 18 02 F6 | 	mov	arg04, result1
18894     FE 16 02 F6 | 	mov	arg03, result2
18898     FF 1E 02 F6 | 	mov	local01, result3
1889c     0C 4E 05 F1 | 	add	fp, #12
188a0     A7 18 62 FC | 	wrlong	arg04, fp
188a4     04 4E 05 F1 | 	add	fp, #4
188a8     A7 16 62 FC | 	wrlong	arg03, fp
188ac     04 4E 05 F1 | 	add	fp, #4
188b0     A7 1E 62 FC | 	wrlong	local01, fp
188b4     14 4E 85 F1 | 	sub	fp, #20
188b8     68 29 BF FD | 	call	#_pop
188bc     A7 FA 61 FC | 	wrlong	result1, fp
188c0     04 4E 05 F1 | 	add	fp, #4
188c4     A7 FC 61 FC | 	wrlong	result2, fp
188c8     04 4E 05 F1 | 	add	fp, #4
188cc     A7 FE 61 FC | 	wrlong	result3, fp
188d0                 | ' 
188d0                 | ' t4=pop()
188d0                 | ' t3=pop()
188d0                 | ' t2=pop()
188d0                 | ' t1=pop()
188d0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
188d0     FF 18 02 F6 | 	mov	arg04, result3
188d4     08 4E 85 F1 | 	sub	fp, #8
188d8     1C 18 0E F2 | 	cmp	arg04, #28 wz
188dc     08 4E 05 51 |  if_ne	add	fp, #8
188e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
188e4     08 4E 85 51 |  if_ne	sub	fp, #8
188e8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
188ec     94 00 90 5D |  if_ne	jmp	#LR__2030
188f0     14 4E 05 F1 | 	add	fp, #20
188f4     A7 1E 02 FB | 	rdlong	local01, fp
188f8     14 4E 85 F1 | 	sub	fp, #20
188fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
18900     14 4E 05 51 |  if_ne	add	fp, #20
18904     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18908     14 4E 85 51 |  if_ne	sub	fp, #20
1890c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18910     70 00 90 5D |  if_ne	jmp	#LR__2030
18914     20 4E 05 F1 | 	add	fp, #32
18918     A7 1E 02 FB | 	rdlong	local01, fp
1891c     20 4E 85 F1 | 	sub	fp, #32
18920     1C 1E 0E F2 | 	cmp	local01, #28 wz
18924     20 4E 05 51 |  if_ne	add	fp, #32
18928     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1892c     20 4E 85 51 |  if_ne	sub	fp, #32
18930     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18934     4C 00 90 5D |  if_ne	jmp	#LR__2030
18938     2C 4E 05 F1 | 	add	fp, #44
1893c     A7 1E 02 FB | 	rdlong	local01, fp
18940     2C 4E 85 F1 | 	sub	fp, #44
18944     1C 1E 0E F2 | 	cmp	local01, #28 wz
18948     2C 4E 05 51 |  if_ne	add	fp, #44
1894c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18950     2C 4E 85 51 |  if_ne	sub	fp, #44
18954     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18958     28 00 90 5D |  if_ne	jmp	#LR__2030
1895c     A7 12 02 FB | 	rdlong	arg01, fp
18960     0C 4E 05 F1 | 	add	fp, #12
18964     A7 14 02 FB | 	rdlong	arg02, fp
18968     0C 4E 05 F1 | 	add	fp, #12
1896c     A7 16 02 FB | 	rdlong	arg03, fp
18970     0C 4E 05 F1 | 	add	fp, #12
18974     A7 18 02 FB | 	rdlong	arg04, fp
18978     24 4E 85 F1 | 	sub	fp, #36
1897c     AC 5E B0 FD | 	call	#_hg010b_spin2_fill
18980                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
18980     58 00 90 FD | 	jmp	#LR__2031
18984                 | LR__2030
18984     A7 12 02 F6 | 	mov	arg01, fp
18988     7C 2A BF FD | 	call	#_converttoint
1898c     FD 20 02 F6 | 	mov	local02, result1
18990     0C 4E 05 F1 | 	add	fp, #12
18994     A7 12 02 F6 | 	mov	arg01, fp
18998     0C 4E 85 F1 | 	sub	fp, #12
1899c     68 2A BF FD | 	call	#_converttoint
189a0     FD 22 02 F6 | 	mov	local03, result1
189a4     18 4E 05 F1 | 	add	fp, #24
189a8     A7 12 02 F6 | 	mov	arg01, fp
189ac     18 4E 85 F1 | 	sub	fp, #24
189b0     54 2A BF FD | 	call	#_converttoint
189b4     FD 1E 02 F6 | 	mov	local01, result1
189b8     24 4E 05 F1 | 	add	fp, #36
189bc     A7 12 02 F6 | 	mov	arg01, fp
189c0     24 4E 85 F1 | 	sub	fp, #36
189c4     40 2A BF FD | 	call	#_converttoint
189c8     FD 18 02 F6 | 	mov	arg04, result1
189cc     10 13 02 F6 | 	mov	arg01, local02
189d0     11 15 02 F6 | 	mov	arg02, local03
189d4     0F 17 02 F6 | 	mov	arg03, local01
189d8     50 5E B0 FD | 	call	#_hg010b_spin2_fill
189dc                 | LR__2031
189dc     A7 F0 03 F6 | 	mov	ptra, fp
189e0     B2 00 A0 FD | 	call	#popregs_
189e4                 | _do_fill_ret
189e4     2D 00 64 FD | 	ret
189e8                 | 
189e8                 | ' 
189e8                 | ' ' -------------------------- Draw a frane
189e8                 | ' 
189e8                 | ' sub do_frame
189e8                 | _do_frame
189e8     03 4A 05 F6 | 	mov	COUNT_, #3
189ec     A8 00 A0 FD | 	call	#pushregs_
189f0     30 F0 07 F1 | 	add	ptra, #48
189f4     2C 28 BF FD | 	call	#_pop
189f8     FD 1A 02 F6 | 	mov	arg05, result1
189fc     FE 18 02 F6 | 	mov	arg04, result2
18a00     FF 16 02 F6 | 	mov	arg03, result3
18a04     24 4E 05 F1 | 	add	fp, #36
18a08     A7 1A 62 FC | 	wrlong	arg05, fp
18a0c     04 4E 05 F1 | 	add	fp, #4
18a10     A7 18 62 FC | 	wrlong	arg04, fp
18a14     04 4E 05 F1 | 	add	fp, #4
18a18     A7 16 62 FC | 	wrlong	arg03, fp
18a1c     2C 4E 85 F1 | 	sub	fp, #44
18a20     00 28 BF FD | 	call	#_pop
18a24     FD 1A 02 F6 | 	mov	arg05, result1
18a28     FE 18 02 F6 | 	mov	arg04, result2
18a2c     FF 16 02 F6 | 	mov	arg03, result3
18a30     18 4E 05 F1 | 	add	fp, #24
18a34     A7 1A 62 FC | 	wrlong	arg05, fp
18a38     04 4E 05 F1 | 	add	fp, #4
18a3c     A7 18 62 FC | 	wrlong	arg04, fp
18a40     04 4E 05 F1 | 	add	fp, #4
18a44     A7 16 62 FC | 	wrlong	arg03, fp
18a48     20 4E 85 F1 | 	sub	fp, #32
18a4c     D4 27 BF FD | 	call	#_pop
18a50     FD 1A 02 F6 | 	mov	arg05, result1
18a54     FE 18 02 F6 | 	mov	arg04, result2
18a58     FF 1E 02 F6 | 	mov	local01, result3
18a5c     0C 4E 05 F1 | 	add	fp, #12
18a60     A7 1A 62 FC | 	wrlong	arg05, fp
18a64     04 4E 05 F1 | 	add	fp, #4
18a68     A7 18 62 FC | 	wrlong	arg04, fp
18a6c     04 4E 05 F1 | 	add	fp, #4
18a70     A7 1E 62 FC | 	wrlong	local01, fp
18a74     14 4E 85 F1 | 	sub	fp, #20
18a78     A8 27 BF FD | 	call	#_pop
18a7c     A7 FA 61 FC | 	wrlong	result1, fp
18a80     04 4E 05 F1 | 	add	fp, #4
18a84     A7 FC 61 FC | 	wrlong	result2, fp
18a88     04 4E 05 F1 | 	add	fp, #4
18a8c     A7 FE 61 FC | 	wrlong	result3, fp
18a90                 | ' 
18a90                 | ' t4=pop()
18a90                 | ' t3=pop()
18a90                 | ' t2=pop()
18a90                 | ' t1=pop()
18a90                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18a90     FF 1A 02 F6 | 	mov	arg05, result3
18a94     08 4E 85 F1 | 	sub	fp, #8
18a98     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18a9c     08 4E 05 51 |  if_ne	add	fp, #8
18aa0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18aa4     08 4E 85 51 |  if_ne	sub	fp, #8
18aa8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18aac     A8 00 90 5D |  if_ne	jmp	#LR__2040
18ab0     14 4E 05 F1 | 	add	fp, #20
18ab4     A7 1E 02 FB | 	rdlong	local01, fp
18ab8     14 4E 85 F1 | 	sub	fp, #20
18abc     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ac0     14 4E 05 51 |  if_ne	add	fp, #20
18ac4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18ac8     14 4E 85 51 |  if_ne	sub	fp, #20
18acc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18ad0     84 00 90 5D |  if_ne	jmp	#LR__2040
18ad4     20 4E 05 F1 | 	add	fp, #32
18ad8     A7 1E 02 FB | 	rdlong	local01, fp
18adc     20 4E 85 F1 | 	sub	fp, #32
18ae0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ae4     20 4E 05 51 |  if_ne	add	fp, #32
18ae8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18aec     20 4E 85 51 |  if_ne	sub	fp, #32
18af0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18af4     60 00 90 5D |  if_ne	jmp	#LR__2040
18af8     2C 4E 05 F1 | 	add	fp, #44
18afc     A7 1E 02 FB | 	rdlong	local01, fp
18b00     2C 4E 85 F1 | 	sub	fp, #44
18b04     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b08     2C 4E 05 51 |  if_ne	add	fp, #44
18b0c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18b10     2C 4E 85 51 |  if_ne	sub	fp, #44
18b14     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18b18     3C 00 90 5D |  if_ne	jmp	#LR__2040
18b1c     A7 12 02 FB | 	rdlong	arg01, fp
18b20     0C 4E 05 F1 | 	add	fp, #12
18b24     A7 14 02 FB | 	rdlong	arg02, fp
18b28     0C 4E 05 F1 | 	add	fp, #12
18b2c     A7 16 02 FB | 	rdlong	arg03, fp
18b30     0C 4E 05 F1 | 	add	fp, #12
18b34     A7 18 02 FB | 	rdlong	arg04, fp
18b38     24 4E 85 F1 | 	sub	fp, #36
18b3c     37 00 00 FF 
18b40     28 E4 05 F1 | 	add	objptr, ##28200
18b44     F2 1A 02 FB | 	rdlong	arg05, objptr
18b48     37 00 00 FF 
18b4c     28 E4 85 F1 | 	sub	objptr, ##28200
18b50     C4 61 B0 FD | 	call	#_hg010b_spin2_frame
18b54                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18b54     6C 00 90 FD | 	jmp	#LR__2041
18b58                 | LR__2040
18b58     A7 12 02 F6 | 	mov	arg01, fp
18b5c     A8 28 BF FD | 	call	#_converttoint
18b60     FD 20 02 F6 | 	mov	local02, result1
18b64     0C 4E 05 F1 | 	add	fp, #12
18b68     A7 12 02 F6 | 	mov	arg01, fp
18b6c     0C 4E 85 F1 | 	sub	fp, #12
18b70     94 28 BF FD | 	call	#_converttoint
18b74     FD 22 02 F6 | 	mov	local03, result1
18b78     18 4E 05 F1 | 	add	fp, #24
18b7c     A7 12 02 F6 | 	mov	arg01, fp
18b80     18 4E 85 F1 | 	sub	fp, #24
18b84     80 28 BF FD | 	call	#_converttoint
18b88     FD 1E 02 F6 | 	mov	local01, result1
18b8c     24 4E 05 F1 | 	add	fp, #36
18b90     A7 12 02 F6 | 	mov	arg01, fp
18b94     24 4E 85 F1 | 	sub	fp, #36
18b98     6C 28 BF FD | 	call	#_converttoint
18b9c     FD 18 02 F6 | 	mov	arg04, result1
18ba0     37 00 00 FF 
18ba4     28 E4 05 F1 | 	add	objptr, ##28200
18ba8     F2 1A 02 FB | 	rdlong	arg05, objptr
18bac     37 00 00 FF 
18bb0     28 E4 85 F1 | 	sub	objptr, ##28200
18bb4     10 13 02 F6 | 	mov	arg01, local02
18bb8     11 15 02 F6 | 	mov	arg02, local03
18bbc     0F 17 02 F6 | 	mov	arg03, local01
18bc0     54 61 B0 FD | 	call	#_hg010b_spin2_frame
18bc4                 | LR__2041
18bc4     A7 F0 03 F6 | 	mov	ptra, fp
18bc8     B2 00 A0 FD | 	call	#popregs_
18bcc                 | _do_frame_ret
18bcc     2D 00 64 FD | 	ret
18bd0                 | 
18bd0                 | ' 
18bd0                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18bd0                 | ' 
18bd0                 | ' ' ------------------------- Print to the screem
18bd0                 | ' 
18bd0                 | ' sub do_print  
18bd0                 | _do_print
18bd0     0B 4A 05 F6 | 	mov	COUNT_, #11
18bd4     A8 00 A0 FD | 	call	#pushregs_
18bd8     00 24 06 F6 | 	mov	local04, #0
18bdc     44 26 BF FD | 	call	#_pop
18be0     FD 26 02 F6 | 	mov	local05, result1
18be4     FE 28 02 F6 | 	mov	local06, result2
18be8     FF 2A 02 F6 | 	mov	local07, result3
18bec     13 1F 02 F6 | 	mov	local01, local05
18bf0     14 21 02 F6 | 	mov	local02, local06
18bf4     15 23 02 F6 | 	mov	local03, local07
18bf8                 | '  
18bf8                 | ' r=0
18bf8                 | ' t1=pop() 
18bf8                 | ' 'print t1.result_type,t1.result.uresult
18bf8                 | ' 
18bf8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18bf8     21 22 0E F2 | 	cmp	local03, #33 wz
18bfc     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18c00     20 00 90 5D |  if_ne	jmp	#LR__2050
18c04     11 25 02 F6 | 	mov	local04, local03
18c08     18 26 BF FD | 	call	#_pop
18c0c     FD 26 02 F6 | 	mov	local05, result1
18c10     FE 28 02 F6 | 	mov	local06, result2
18c14     FF 2A 02 F6 | 	mov	local07, result3
18c18     13 1F 02 F6 | 	mov	local01, local05
18c1c     14 21 02 F6 | 	mov	local02, local06
18c20     15 23 02 F6 | 	mov	local03, local07
18c24                 | LR__2050
18c24                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18c24     20 22 0E F2 | 	cmp	local03, #32 wz
18c28     11 25 02 A6 |  if_e	mov	local04, local03
18c2c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18c2c     FF 22 0E F2 | 	cmp	local03, #255 wz
18c30     0C 00 90 5D |  if_ne	jmp	#LR__2051
18c34     0F 13 02 F6 | 	mov	arg01, local01
18c38     70 47 B0 FD | 	call	#_printerror
18c3c     D4 04 90 FD | 	jmp	#LR__2070
18c40                 | LR__2051
18c40                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18c40     2B 22 0E F2 | 	cmp	local03, #43 wz
18c44     14 00 90 5D |  if_ne	jmp	#LR__2052
18c48     0F 13 02 F6 | 	mov	arg01, local01
18c4c     4C 27 BF FD | 	call	#_convertstring
18c50     FD 26 02 F6 | 	mov	local05, result1
18c54     13 1F 02 F6 | 	mov	local01, local05
18c58     1F 22 06 F6 | 	mov	local03, #31
18c5c                 | LR__2052
18c5c                 | ' 
18c5c                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
18c5c     2C 22 0E F2 | 	cmp	local03, #44 wz
18c60     80 00 90 5D |  if_ne	jmp	#LR__2053
18c64     00 12 06 F6 | 	mov	arg01, #0
18c68     34 D7 B0 FD | 	call	#__system___getiolock_0540
18c6c     FD 12 02 F6 | 	mov	arg01, result1
18c70     C8 7C B0 FD | 	call	#__system___lockmem
18c74     85 01 00 FF 
18c78     18 14 06 F6 | 	mov	arg02, ##@LR__5516
18c7c     00 12 06 F6 | 	mov	arg01, #0
18c80     00 16 06 F6 | 	mov	arg03, #0
18c84     A8 89 B0 FD | 	call	#__system___basic_print_string
18c88     0A 2C 06 F6 | 	mov	local08, #10
18c8c     00 12 06 F6 | 	mov	arg01, #0
18c90     0F 15 02 F6 | 	mov	arg02, local01
18c94     00 16 06 F6 | 	mov	arg03, #0
18c98     0A 18 06 F6 | 	mov	arg04, #10
18c9c     D4 89 B0 FD | 	call	#__system___basic_print_integer
18ca0     FD 2E 02 F6 | 	mov	local09, result1
18ca4     00 12 06 F6 | 	mov	arg01, #0
18ca8     0A 14 06 F6 | 	mov	arg02, #10
18cac     00 16 06 F6 | 	mov	arg03, #0
18cb0     24 89 B0 FD | 	call	#__system___basic_print_char
18cb4     01 30 06 F6 | 	mov	local10, #1
18cb8     00 12 06 F6 | 	mov	arg01, #0
18cbc     E0 D6 B0 FD | 	call	#__system___getiolock_0540
18cc0     FD 00 68 FC | 	wrlong	#0, result1
18cc4     00 32 06 F6 | 	mov	local11, #0
18cc8     58 25 BF FD | 	call	#_pop
18ccc     FD 26 02 F6 | 	mov	local05, result1
18cd0     FE 28 02 F6 | 	mov	local06, result2
18cd4     FF 2A 02 F6 | 	mov	local07, result3
18cd8     13 1F 02 F6 | 	mov	local01, local05
18cdc     14 21 02 F6 | 	mov	local02, local06
18ce0     15 23 02 F6 | 	mov	local03, local07
18ce4                 | LR__2053
18ce4                 | ' 
18ce4                 | ' if r=print_mod_comma  then
18ce4     21 24 0E F2 | 	cmp	local04, #33 wz
18ce8     AC 01 90 5D |  if_ne	jmp	#LR__2058
18cec                 | '   if t1.result_type=result_int then print t1.result.iresult,
18cec     1C 22 0E F2 | 	cmp	local03, #28 wz
18cf0     64 00 90 5D |  if_ne	jmp	#LR__2054
18cf4     00 12 06 F6 | 	mov	arg01, #0
18cf8     A4 D6 B0 FD | 	call	#__system___getiolock_0540
18cfc     FD 12 02 F6 | 	mov	arg01, result1
18d00     38 7C B0 FD | 	call	#__system___lockmem
18d04     00 28 06 F6 | 	mov	local06, #0
18d08     00 12 06 F6 | 	mov	arg01, #0
18d0c     0F 15 02 F6 | 	mov	arg02, local01
18d10     00 16 06 F6 | 	mov	arg03, #0
18d14     0A 18 06 F6 | 	mov	arg04, #10
18d18     58 89 B0 FD | 	call	#__system___basic_print_integer
18d1c     FD 2A 02 F6 | 	mov	local07, result1
18d20     14 27 02 F6 | 	mov	local05, local06
18d24     15 27 02 F1 | 	add	local05, local07
18d28     00 32 06 F6 | 	mov	local11, #0
18d2c     00 12 06 F6 | 	mov	arg01, #0
18d30     09 14 06 F6 | 	mov	arg02, #9
18d34     00 16 06 F6 | 	mov	arg03, #0
18d38     9C 88 B0 FD | 	call	#__system___basic_print_char
18d3c     FD 2E 02 F6 | 	mov	local09, result1
18d40     FD 26 02 F1 | 	add	local05, result1
18d44     00 12 06 F6 | 	mov	arg01, #0
18d48     54 D6 B0 FD | 	call	#__system___getiolock_0540
18d4c     FD 00 68 FC | 	wrlong	#0, result1
18d50     00 FA 05 F6 | 	mov	result1, #0
18d54     00 30 06 F6 | 	mov	local10, #0
18d58                 | LR__2054
18d58                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18d58     1D 22 0E F2 | 	cmp	local03, #29 wz
18d5c     64 00 90 5D |  if_ne	jmp	#LR__2055
18d60     00 12 06 F6 | 	mov	arg01, #0
18d64     38 D6 B0 FD | 	call	#__system___getiolock_0540
18d68     FD 12 02 F6 | 	mov	arg01, result1
18d6c     CC 7B B0 FD | 	call	#__system___lockmem
18d70     00 28 06 F6 | 	mov	local06, #0
18d74     00 12 06 F6 | 	mov	arg01, #0
18d78     0F 15 02 F6 | 	mov	arg02, local01
18d7c     00 16 06 F6 | 	mov	arg03, #0
18d80     0A 18 06 F6 | 	mov	arg04, #10
18d84     2C 89 B0 FD | 	call	#__system___basic_print_unsigned
18d88     FD 2A 02 F6 | 	mov	local07, result1
18d8c     14 27 02 F6 | 	mov	local05, local06
18d90     15 27 02 F1 | 	add	local05, local07
18d94     00 32 06 F6 | 	mov	local11, #0
18d98     00 12 06 F6 | 	mov	arg01, #0
18d9c     09 14 06 F6 | 	mov	arg02, #9
18da0     00 16 06 F6 | 	mov	arg03, #0
18da4     30 88 B0 FD | 	call	#__system___basic_print_char
18da8     FD 2E 02 F6 | 	mov	local09, result1
18dac     FD 26 02 F1 | 	add	local05, result1
18db0     00 12 06 F6 | 	mov	arg01, #0
18db4     E8 D5 B0 FD | 	call	#__system___getiolock_0540
18db8     FD 00 68 FC | 	wrlong	#0, result1
18dbc     00 FA 05 F6 | 	mov	result1, #0
18dc0     00 30 06 F6 | 	mov	local10, #0
18dc4                 | LR__2055
18dc4                 | '   if t1.result_type=result_float then print t1.result.fresult,
18dc4     1E 22 0E F2 | 	cmp	local03, #30 wz
18dc8     64 00 90 5D |  if_ne	jmp	#LR__2056
18dcc     00 12 06 F6 | 	mov	arg01, #0
18dd0     CC D5 B0 FD | 	call	#__system___getiolock_0540
18dd4     FD 12 02 F6 | 	mov	arg01, result1
18dd8     60 7B B0 FD | 	call	#__system___lockmem
18ddc     00 28 06 F6 | 	mov	local06, #0
18de0     00 12 06 F6 | 	mov	arg01, #0
18de4     0F 15 02 F6 | 	mov	arg02, local01
18de8     00 16 06 F6 | 	mov	arg03, #0
18dec     23 18 06 F6 | 	mov	arg04, #35
18df0     14 AD B0 FD | 	call	#__system___basic_print_float
18df4     FD 2A 02 F6 | 	mov	local07, result1
18df8     14 27 02 F6 | 	mov	local05, local06
18dfc     15 27 02 F1 | 	add	local05, local07
18e00     00 32 06 F6 | 	mov	local11, #0
18e04     00 12 06 F6 | 	mov	arg01, #0
18e08     09 14 06 F6 | 	mov	arg02, #9
18e0c     00 16 06 F6 | 	mov	arg03, #0
18e10     C4 87 B0 FD | 	call	#__system___basic_print_char
18e14     FD 2E 02 F6 | 	mov	local09, result1
18e18     FD 26 02 F1 | 	add	local05, result1
18e1c     00 12 06 F6 | 	mov	arg01, #0
18e20     7C D5 B0 FD | 	call	#__system___getiolock_0540
18e24     FD 00 68 FC | 	wrlong	#0, result1
18e28     00 FA 05 F6 | 	mov	result1, #0
18e2c     00 30 06 F6 | 	mov	local10, #0
18e30                 | LR__2056
18e30                 | '   if t1.result_type=result_string then print t1.result.sresult,
18e30     1F 22 0E F2 | 	cmp	local03, #31 wz
18e34     60 00 90 5D |  if_ne	jmp	#LR__2057
18e38     00 12 06 F6 | 	mov	arg01, #0
18e3c     60 D5 B0 FD | 	call	#__system___getiolock_0540
18e40     FD 12 02 F6 | 	mov	arg01, result1
18e44     F4 7A B0 FD | 	call	#__system___lockmem
18e48     00 28 06 F6 | 	mov	local06, #0
18e4c     00 12 06 F6 | 	mov	arg01, #0
18e50     0F 15 02 F6 | 	mov	arg02, local01
18e54     00 16 06 F6 | 	mov	arg03, #0
18e58     D4 87 B0 FD | 	call	#__system___basic_print_string
18e5c     FD 2A 02 F6 | 	mov	local07, result1
18e60     14 27 02 F6 | 	mov	local05, local06
18e64     15 27 02 F1 | 	add	local05, local07
18e68     00 32 06 F6 | 	mov	local11, #0
18e6c     00 12 06 F6 | 	mov	arg01, #0
18e70     09 14 06 F6 | 	mov	arg02, #9
18e74     00 16 06 F6 | 	mov	arg03, #0
18e78     5C 87 B0 FD | 	call	#__system___basic_print_char
18e7c     FD 2E 02 F6 | 	mov	local09, result1
18e80     FD 26 02 F1 | 	add	local05, result1
18e84     00 12 06 F6 | 	mov	arg01, #0
18e88     14 D5 B0 FD | 	call	#__system___getiolock_0540
18e8c     FD 00 68 FC | 	wrlong	#0, result1
18e90     00 FA 05 F6 | 	mov	result1, #0
18e94     00 30 06 F6 | 	mov	local10, #0
18e98                 | LR__2057
18e98                 | LR__2058
18e98                 | ' if r=print_mod_semicolon then 
18e98     22 24 0E F2 | 	cmp	local04, #34 wz
18e9c     1C 01 90 5D |  if_ne	jmp	#LR__2063
18ea0                 | '   if t1.result_type=result_int then print t1.result.iresult;
18ea0     1C 22 0E F2 | 	cmp	local03, #28 wz
18ea4     50 00 90 5D |  if_ne	jmp	#LR__2059
18ea8     00 12 06 F6 | 	mov	arg01, #0
18eac     F0 D4 B0 FD | 	call	#__system___getiolock_0540
18eb0     FD 12 02 F6 | 	mov	arg01, result1
18eb4     84 7A B0 FD | 	call	#__system___lockmem
18eb8     00 28 06 F6 | 	mov	local06, #0
18ebc     00 30 06 F6 | 	mov	local10, #0
18ec0     0A 32 06 F6 | 	mov	local11, #10
18ec4     00 12 06 F6 | 	mov	arg01, #0
18ec8     0F 15 02 F6 | 	mov	arg02, local01
18ecc     00 16 06 F6 | 	mov	arg03, #0
18ed0     0A 18 06 F6 | 	mov	arg04, #10
18ed4     9C 87 B0 FD | 	call	#__system___basic_print_integer
18ed8     FD 2A 02 F6 | 	mov	local07, result1
18edc     14 27 02 F6 | 	mov	local05, local06
18ee0     15 27 02 F1 | 	add	local05, local07
18ee4     00 12 06 F6 | 	mov	arg01, #0
18ee8     B4 D4 B0 FD | 	call	#__system___getiolock_0540
18eec     FD 00 68 FC | 	wrlong	#0, result1
18ef0     00 FA 05 F6 | 	mov	result1, #0
18ef4     00 2E 06 F6 | 	mov	local09, #0
18ef8                 | LR__2059
18ef8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18ef8     1D 22 0E F2 | 	cmp	local03, #29 wz
18efc     50 00 90 5D |  if_ne	jmp	#LR__2060
18f00     00 12 06 F6 | 	mov	arg01, #0
18f04     98 D4 B0 FD | 	call	#__system___getiolock_0540
18f08     FD 12 02 F6 | 	mov	arg01, result1
18f0c     2C 7A B0 FD | 	call	#__system___lockmem
18f10     00 28 06 F6 | 	mov	local06, #0
18f14     00 30 06 F6 | 	mov	local10, #0
18f18     0A 32 06 F6 | 	mov	local11, #10
18f1c     00 12 06 F6 | 	mov	arg01, #0
18f20     0F 15 02 F6 | 	mov	arg02, local01
18f24     00 16 06 F6 | 	mov	arg03, #0
18f28     0A 18 06 F6 | 	mov	arg04, #10
18f2c     84 87 B0 FD | 	call	#__system___basic_print_unsigned
18f30     FD 2A 02 F6 | 	mov	local07, result1
18f34     14 27 02 F6 | 	mov	local05, local06
18f38     15 27 02 F1 | 	add	local05, local07
18f3c     00 12 06 F6 | 	mov	arg01, #0
18f40     5C D4 B0 FD | 	call	#__system___getiolock_0540
18f44     FD 00 68 FC | 	wrlong	#0, result1
18f48     00 FA 05 F6 | 	mov	result1, #0
18f4c     00 2E 06 F6 | 	mov	local09, #0
18f50                 | LR__2060
18f50                 | '   if t1.result_type=result_float then print t1.result.fresult;
18f50     1E 22 0E F2 | 	cmp	local03, #30 wz
18f54     30 00 90 5D |  if_ne	jmp	#LR__2061
18f58     00 12 06 F6 | 	mov	arg01, #0
18f5c     40 D4 B0 FD | 	call	#__system___getiolock_0540
18f60     FD 12 02 F6 | 	mov	arg01, result1
18f64     D4 79 B0 FD | 	call	#__system___lockmem
18f68     00 12 06 F6 | 	mov	arg01, #0
18f6c     0F 15 02 F6 | 	mov	arg02, local01
18f70     00 16 06 F6 | 	mov	arg03, #0
18f74     23 18 06 F6 | 	mov	arg04, #35
18f78     8C AB B0 FD | 	call	#__system___basic_print_float
18f7c     00 12 06 F6 | 	mov	arg01, #0
18f80     1C D4 B0 FD | 	call	#__system___getiolock_0540
18f84     FD 00 68 FC | 	wrlong	#0, result1
18f88                 | LR__2061
18f88                 | '   if t1.result_type=result_string then print t1.result.sresult;
18f88     1F 22 0E F2 | 	cmp	local03, #31 wz
18f8c     2C 00 90 5D |  if_ne	jmp	#LR__2062
18f90     00 12 06 F6 | 	mov	arg01, #0
18f94     08 D4 B0 FD | 	call	#__system___getiolock_0540
18f98     FD 12 02 F6 | 	mov	arg01, result1
18f9c     9C 79 B0 FD | 	call	#__system___lockmem
18fa0     00 12 06 F6 | 	mov	arg01, #0
18fa4     0F 15 02 F6 | 	mov	arg02, local01
18fa8     00 16 06 F6 | 	mov	arg03, #0
18fac     80 86 B0 FD | 	call	#__system___basic_print_string
18fb0     00 12 06 F6 | 	mov	arg01, #0
18fb4     E8 D3 B0 FD | 	call	#__system___getiolock_0540
18fb8     FD 00 68 FC | 	wrlong	#0, result1
18fbc                 | LR__2062
18fbc                 | LR__2063
18fbc                 | ' if r=0 then 
18fbc     00 24 0E F2 | 	cmp	local04, #0 wz
18fc0     1C 01 90 5D |  if_ne	jmp	#LR__2068
18fc4                 | '   if t1.result_type=result_int then print t1.result.iresult
18fc4     1C 22 0E F2 | 	cmp	local03, #28 wz
18fc8     40 00 90 5D |  if_ne	jmp	#LR__2064
18fcc     00 12 06 F6 | 	mov	arg01, #0
18fd0     CC D3 B0 FD | 	call	#__system___getiolock_0540
18fd4     FD 12 02 F6 | 	mov	arg01, result1
18fd8     60 79 B0 FD | 	call	#__system___lockmem
18fdc     00 12 06 F6 | 	mov	arg01, #0
18fe0     0F 15 02 F6 | 	mov	arg02, local01
18fe4     00 16 06 F6 | 	mov	arg03, #0
18fe8     0A 18 06 F6 | 	mov	arg04, #10
18fec     84 86 B0 FD | 	call	#__system___basic_print_integer
18ff0     00 12 06 F6 | 	mov	arg01, #0
18ff4     0A 14 06 F6 | 	mov	arg02, #10
18ff8     00 16 06 F6 | 	mov	arg03, #0
18ffc     D8 85 B0 FD | 	call	#__system___basic_print_char
19000     00 12 06 F6 | 	mov	arg01, #0
19004     98 D3 B0 FD | 	call	#__system___getiolock_0540
19008     FD 00 68 FC | 	wrlong	#0, result1
1900c                 | LR__2064
1900c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1900c     1D 22 0E F2 | 	cmp	local03, #29 wz
19010     40 00 90 5D |  if_ne	jmp	#LR__2065
19014     00 12 06 F6 | 	mov	arg01, #0
19018     84 D3 B0 FD | 	call	#__system___getiolock_0540
1901c     FD 12 02 F6 | 	mov	arg01, result1
19020     18 79 B0 FD | 	call	#__system___lockmem
19024     00 12 06 F6 | 	mov	arg01, #0
19028     0F 15 02 F6 | 	mov	arg02, local01
1902c     00 16 06 F6 | 	mov	arg03, #0
19030     0A 18 06 F6 | 	mov	arg04, #10
19034     7C 86 B0 FD | 	call	#__system___basic_print_unsigned
19038     00 12 06 F6 | 	mov	arg01, #0
1903c     0A 14 06 F6 | 	mov	arg02, #10
19040     00 16 06 F6 | 	mov	arg03, #0
19044     90 85 B0 FD | 	call	#__system___basic_print_char
19048     00 12 06 F6 | 	mov	arg01, #0
1904c     50 D3 B0 FD | 	call	#__system___getiolock_0540
19050     FD 00 68 FC | 	wrlong	#0, result1
19054                 | LR__2065
19054                 | '   if t1.result_type=result_float then print t1.result.fresult
19054     1E 22 0E F2 | 	cmp	local03, #30 wz
19058     40 00 90 5D |  if_ne	jmp	#LR__2066
1905c     00 12 06 F6 | 	mov	arg01, #0
19060     3C D3 B0 FD | 	call	#__system___getiolock_0540
19064     FD 12 02 F6 | 	mov	arg01, result1
19068     D0 78 B0 FD | 	call	#__system___lockmem
1906c     00 12 06 F6 | 	mov	arg01, #0
19070     0F 15 02 F6 | 	mov	arg02, local01
19074     00 16 06 F6 | 	mov	arg03, #0
19078     23 18 06 F6 | 	mov	arg04, #35
1907c     88 AA B0 FD | 	call	#__system___basic_print_float
19080     00 12 06 F6 | 	mov	arg01, #0
19084     0A 14 06 F6 | 	mov	arg02, #10
19088     00 16 06 F6 | 	mov	arg03, #0
1908c     48 85 B0 FD | 	call	#__system___basic_print_char
19090     00 12 06 F6 | 	mov	arg01, #0
19094     08 D3 B0 FD | 	call	#__system___getiolock_0540
19098     FD 00 68 FC | 	wrlong	#0, result1
1909c                 | LR__2066
1909c                 | '   if t1.result_type=result_string then print t1.result.sresult
1909c     1F 22 0E F2 | 	cmp	local03, #31 wz
190a0     3C 00 90 5D |  if_ne	jmp	#LR__2067
190a4     00 12 06 F6 | 	mov	arg01, #0
190a8     F4 D2 B0 FD | 	call	#__system___getiolock_0540
190ac     FD 12 02 F6 | 	mov	arg01, result1
190b0     88 78 B0 FD | 	call	#__system___lockmem
190b4     00 12 06 F6 | 	mov	arg01, #0
190b8     0F 15 02 F6 | 	mov	arg02, local01
190bc     00 16 06 F6 | 	mov	arg03, #0
190c0     6C 85 B0 FD | 	call	#__system___basic_print_string
190c4     00 12 06 F6 | 	mov	arg01, #0
190c8     0A 14 06 F6 | 	mov	arg02, #10
190cc     00 16 06 F6 | 	mov	arg03, #0
190d0     04 85 B0 FD | 	call	#__system___basic_print_char
190d4     00 12 06 F6 | 	mov	arg01, #0
190d8     C4 D2 B0 FD | 	call	#__system___getiolock_0540
190dc     FD 00 68 FC | 	wrlong	#0, result1
190e0                 | LR__2067
190e0                 | LR__2068
190e0                 | ' if r=print_mod_empty then print
190e0     20 24 0E F2 | 	cmp	local04, #32 wz
190e4     2C 00 90 5D |  if_ne	jmp	#LR__2069
190e8     00 12 06 F6 | 	mov	arg01, #0
190ec     B0 D2 B0 FD | 	call	#__system___getiolock_0540
190f0     FD 12 02 F6 | 	mov	arg01, result1
190f4     44 78 B0 FD | 	call	#__system___lockmem
190f8     00 12 06 F6 | 	mov	arg01, #0
190fc     0A 14 06 F6 | 	mov	arg02, #10
19100     00 16 06 F6 | 	mov	arg03, #0
19104     D0 84 B0 FD | 	call	#__system___basic_print_char
19108     00 12 06 F6 | 	mov	arg01, #0
1910c     90 D2 B0 FD | 	call	#__system___getiolock_0540
19110     FD 00 68 FC | 	wrlong	#0, result1
19114                 | LR__2069
19114                 | LR__2070
19114     A7 F0 03 F6 | 	mov	ptra, fp
19118     B2 00 A0 FD | 	call	#popregs_
1911c                 | _do_print_ret
1911c     2D 00 64 FD | 	ret
19120                 | 
19120                 | ' 
19120                 | ' 
19120                 | ' sub do_paper
19120                 | _do_paper
19120     03 4A 05 F6 | 	mov	COUNT_, #3
19124     A8 00 A0 FD | 	call	#pushregs_
19128     F8 20 BF FD | 	call	#_pop
1912c     FD 1E 02 F6 | 	mov	local01, result1
19130     FE 20 02 F6 | 	mov	local02, result2
19134     FF 22 02 F6 | 	mov	local03, result3
19138                 | ' t1=pop() 
19138                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19138     1E 22 0E F2 | 	cmp	local03, #30 wz
1913c     10 00 90 5D |  if_ne	jmp	#LR__2080
19140     0F 13 02 F6 | 	mov	arg01, local01
19144     00 14 06 F6 | 	mov	arg02, #0
19148     6C A8 B0 FD | 	call	#__system___float_tointeger
1914c     FD 1E 02 F6 | 	mov	local01, result1
19150                 | LR__2080
19150                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19150     1F 22 0E F2 | 	cmp	local03, #31 wz
19154     18 00 90 5D |  if_ne	jmp	#LR__2081
19158     0F 13 02 F6 | 	mov	arg01, local01
1915c     9C AB B0 FD | 	call	#__system____builtin_atof
19160     FD 12 02 F6 | 	mov	arg01, result1
19164     00 14 06 F6 | 	mov	arg02, #0
19168     4C A8 B0 FD | 	call	#__system___float_tointeger
1916c     FD 1E 02 F6 | 	mov	local01, result1
19170                 | LR__2081
19170     37 00 00 FF 
19174     38 E4 05 F1 | 	add	objptr, ##28216
19178     F2 1E 62 FC | 	wrlong	local01, objptr
1917c     04 E4 05 F1 | 	add	objptr, #4
19180     F2 12 02 FB | 	rdlong	arg01, objptr
19184                 | ' 
19184                 | ' write_color:=ff
19184     36 00 00 FF 
19188     FB E5 85 F1 | 	sub	objptr, ##28155
1918c     F2 12 62 FC | 	wrlong	arg01, objptr
19190                 | ' write_background:=bb
19190     04 E4 05 F1 | 	add	objptr, #4
19194     F2 1E 62 FC | 	wrlong	local01, objptr
19198     45 E4 85 F1 | 	sub	objptr, #69
1919c     A7 F0 03 F6 | 	mov	ptra, fp
191a0     B2 00 A0 FD | 	call	#popregs_
191a4                 | _do_paper_ret
191a4     2D 00 64 FD | 	ret
191a8                 | 
191a8                 | ' 
191a8                 | ' sub do_ink
191a8                 | _do_ink
191a8     03 4A 05 F6 | 	mov	COUNT_, #3
191ac     A8 00 A0 FD | 	call	#pushregs_
191b0     70 20 BF FD | 	call	#_pop
191b4     FD 1E 02 F6 | 	mov	local01, result1
191b8     FE 20 02 F6 | 	mov	local02, result2
191bc     FF 22 02 F6 | 	mov	local03, result3
191c0                 | ' t1=pop() 
191c0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
191c0     1E 22 0E F2 | 	cmp	local03, #30 wz
191c4     10 00 90 5D |  if_ne	jmp	#LR__2090
191c8     0F 13 02 F6 | 	mov	arg01, local01
191cc     00 14 06 F6 | 	mov	arg02, #0
191d0     E4 A7 B0 FD | 	call	#__system___float_tointeger
191d4     FD 1E 02 F6 | 	mov	local01, result1
191d8                 | LR__2090
191d8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
191d8     1F 22 0E F2 | 	cmp	local03, #31 wz
191dc     18 00 90 5D |  if_ne	jmp	#LR__2091
191e0     0F 13 02 F6 | 	mov	arg01, local01
191e4     14 AB B0 FD | 	call	#__system____builtin_atof
191e8     FD 12 02 F6 | 	mov	arg01, result1
191ec     00 14 06 F6 | 	mov	arg02, #0
191f0     C4 A7 B0 FD | 	call	#__system___float_tointeger
191f4     FD 1E 02 F6 | 	mov	local01, result1
191f8                 | LR__2091
191f8     37 00 00 FF 
191fc     3C E4 05 F1 | 	add	objptr, ##28220
19200     F2 1E 62 FC | 	wrlong	local01, objptr
19204     04 E4 85 F1 | 	sub	objptr, #4
19208     F2 14 02 FB | 	rdlong	arg02, objptr
1920c                 | ' 
1920c                 | ' write_color:=ff
1920c     36 00 00 FF 
19210     F7 E5 85 F1 | 	sub	objptr, ##28151
19214     F2 1E 62 FC | 	wrlong	local01, objptr
19218                 | ' write_background:=bb
19218     04 E4 05 F1 | 	add	objptr, #4
1921c     F2 14 62 FC | 	wrlong	arg02, objptr
19220     36 00 00 FF 
19224     F7 E5 05 F1 | 	add	objptr, ##28151
19228     F2 12 02 FB | 	rdlong	arg01, objptr
1922c     37 00 00 FF 
19230     3C E4 85 F1 | 	sub	objptr, ##28220
19234     94 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
19238     A7 F0 03 F6 | 	mov	ptra, fp
1923c     B2 00 A0 FD | 	call	#popregs_
19240                 | _do_ink_ret
19240     2D 00 64 FD | 	ret
19244                 | 
19244                 | ' 
19244                 | ' 
19244                 | ' sub do_font
19244                 | _do_font
19244     03 4A 05 F6 | 	mov	COUNT_, #3
19248     A8 00 A0 FD | 	call	#pushregs_
1924c     D4 1F BF FD | 	call	#_pop
19250     FD 1E 02 F6 | 	mov	local01, result1
19254     FE 20 02 F6 | 	mov	local02, result2
19258     FF 22 02 F6 | 	mov	local03, result3
1925c                 | ' t1=pop() 
1925c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1925c     1E 22 0E F2 | 	cmp	local03, #30 wz
19260     10 00 90 5D |  if_ne	jmp	#LR__2100
19264     0F 13 02 F6 | 	mov	arg01, local01
19268     00 14 06 F6 | 	mov	arg02, #0
1926c     48 A7 B0 FD | 	call	#__system___float_tointeger
19270     FD 1E 02 F6 | 	mov	local01, result1
19274                 | LR__2100
19274                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19274     1F 22 0E F2 | 	cmp	local03, #31 wz
19278     18 00 90 5D |  if_ne	jmp	#LR__2101
1927c     0F 13 02 F6 | 	mov	arg01, local01
19280     78 AA B0 FD | 	call	#__system____builtin_atof
19284     FD 12 02 F6 | 	mov	arg01, result1
19288     00 14 06 F6 | 	mov	arg02, #0
1928c     28 A7 B0 FD | 	call	#__system___float_tointeger
19290     FD 1E 02 F6 | 	mov	local01, result1
19294                 | LR__2101
19294     37 00 00 FF 
19298     40 E4 05 F1 | 	add	objptr, ##28224
1929c     F2 1E 62 FC | 	wrlong	local01, objptr
192a0     37 00 00 FF 
192a4     40 E4 85 F1 | 	sub	objptr, ##28224
192a8     02 1E 66 F0 | 	shl	local01, #2
192ac     0F 13 02 F6 | 	mov	arg01, local01
192b0     5C 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
192b4     A7 F0 03 F6 | 	mov	ptra, fp
192b8     B2 00 A0 FD | 	call	#popregs_
192bc                 | _do_font_ret
192bc     2D 00 64 FD | 	ret
192c0                 | 
192c0                 | ' 
192c0                 | ' sub do_mode
192c0                 | _do_mode
192c0     05 4A 05 F6 | 	mov	COUNT_, #5
192c4     A8 00 A0 FD | 	call	#pushregs_
192c8     58 1F BF FD | 	call	#_pop
192cc     FD 1E 02 F6 | 	mov	local01, result1
192d0     FE 20 02 F6 | 	mov	local02, result2
192d4     FF 22 02 F6 | 	mov	local03, result3
192d8                 | ' t1=pop() 
192d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
192d8     1E 22 0E F2 | 	cmp	local03, #30 wz
192dc     10 00 90 5D |  if_ne	jmp	#LR__2110
192e0     0F 13 02 F6 | 	mov	arg01, local01
192e4     00 14 06 F6 | 	mov	arg02, #0
192e8     CC A6 B0 FD | 	call	#__system___float_tointeger
192ec     FD 1E 02 F6 | 	mov	local01, result1
192f0                 | LR__2110
192f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
192f0     1F 22 0E F2 | 	cmp	local03, #31 wz
192f4     18 00 90 5D |  if_ne	jmp	#LR__2111
192f8     0F 13 02 F6 | 	mov	arg01, local01
192fc     FC A9 B0 FD | 	call	#__system____builtin_atof
19300     FD 12 02 F6 | 	mov	arg01, result1
19304     00 14 06 F6 | 	mov	arg02, #0
19308     AC A6 B0 FD | 	call	#__system___float_tointeger
1930c     FD 1E 02 F6 | 	mov	local01, result1
19310                 | LR__2111
19310                 | ' select case t1.result.iresult
19310     0F 25 02 F6 | 	mov	local04, local01
19314     05 24 26 F3 | 	fle	local04, #5
19318     30 24 62 FD | 	jmprel	local04
1931c                 | LR__2112
1931c     14 00 90 FD | 	jmp	#LR__2113
19320     A8 00 90 FD | 	jmp	#LR__2114
19324     10 01 90 FD | 	jmp	#LR__2115
19328     78 01 90 FD | 	jmp	#LR__2116
1932c     E0 01 90 FD | 	jmp	#LR__2117
19330     70 02 90 FD | 	jmp	#LR__2118
19334                 | LR__2113
19334     37 00 00 FF 
19338     40 E4 05 F1 | 	add	objptr, ##28224
1933c     F2 02 68 FC | 	wrlong	#1, objptr
19340     04 E4 85 F1 | 	sub	objptr, #4
19344     F2 34 69 FC | 	wrlong	#154, objptr
19348     19 00 00 FF 
1934c     D8 E4 05 F1 | 	add	objptr, ##13016
19350     F2 02 68 FC | 	wrlong	#1, objptr
19354     19 00 00 FF 
19358     DC E4 85 F1 | 	sub	objptr, ##13020
1935c     F2 26 69 FC | 	wrlong	#147, objptr
19360     37 00 00 FF 
19364     38 E4 85 F1 | 	sub	objptr, ##28216
19368     04 12 06 F6 | 	mov	arg01, #4
1936c     A0 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
19370     37 00 00 FF 
19374     3C E4 05 F1 | 	add	objptr, ##28220
19378     F2 12 02 FB | 	rdlong	arg01, objptr
1937c     04 E4 85 F1 | 	sub	objptr, #4
19380     F2 14 02 FB | 	rdlong	arg02, objptr
19384                 | ' 
19384                 | ' write_color:=ff
19384     36 00 00 FF 
19388     F7 E5 85 F1 | 	sub	objptr, ##28151
1938c     F2 12 62 FC | 	wrlong	arg01, objptr
19390                 | ' write_background:=bb
19390     04 E4 05 F1 | 	add	objptr, #4
19394     F2 14 62 FC | 	wrlong	arg02, objptr
19398     01 00 00 FF 
1939c     00 EA 05 F1 | 	add	ptr__dat__, ##512
193a0     51 00 00 FF 
193a4     73 E5 05 F1 | 	add	objptr, ##41843
193a8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
193ac     04 E4 85 F1 | 	sub	objptr, #4
193b0     03 00 80 FF 
193b4     F2 30 69 FC | 	wrlong	##1688, objptr
193b8     51 00 00 FF 
193bc     B4 E5 85 F1 | 	sub	objptr, ##41908
193c0     01 00 00 FF 
193c4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
193c8     D8 01 90 FD | 	jmp	#LR__2118
193cc                 | LR__2114
193cc     37 00 00 FF 
193d0     40 E4 05 F1 | 	add	objptr, ##28224
193d4     F2 00 68 FC | 	wrlong	#0, objptr
193d8     04 E4 85 F1 | 	sub	objptr, #4
193dc     F2 2E 68 FC | 	wrlong	#23, objptr
193e0     19 00 00 FF 
193e4     D8 E4 05 F1 | 	add	objptr, ##13016
193e8     F2 00 68 FC | 	wrlong	#0, objptr
193ec     19 00 00 FF 
193f0     DC E4 85 F1 | 	sub	objptr, ##13020
193f4     F2 00 68 FC | 	wrlong	#0, objptr
193f8     37 00 00 FF 
193fc     38 E4 85 F1 | 	sub	objptr, ##28216
19400     00 12 06 F6 | 	mov	arg01, #0
19404     08 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
19408     37 00 00 FF 
1940c     3C E4 05 F1 | 	add	objptr, ##28220
19410     F2 12 02 FB | 	rdlong	arg01, objptr
19414     04 E4 85 F1 | 	sub	objptr, #4
19418     F2 14 02 FB | 	rdlong	arg02, objptr
1941c                 | ' 
1941c                 | ' write_color:=ff
1941c     36 00 00 FF 
19420     F7 E5 85 F1 | 	sub	objptr, ##28151
19424     F2 12 62 FC | 	wrlong	arg01, objptr
19428                 | ' write_background:=bb
19428     04 E4 05 F1 | 	add	objptr, #4
1942c     F2 14 62 FC | 	wrlong	arg02, objptr
19430     45 E4 85 F1 | 	sub	objptr, #69
19434     6C 01 90 FD | 	jmp	#LR__2118
19438                 | LR__2115
19438     37 00 00 FF 
1943c     40 E4 05 F1 | 	add	objptr, ##28224
19440     F2 00 68 FC | 	wrlong	#0, objptr
19444     04 E4 85 F1 | 	sub	objptr, #4
19448     F2 6A 69 FC | 	wrlong	#181, objptr
1944c     19 00 00 FF 
19450     D8 E4 05 F1 | 	add	objptr, ##13016
19454     F2 00 68 FC | 	wrlong	#0, objptr
19458     19 00 00 FF 
1945c     DC E4 85 F1 | 	sub	objptr, ##13020
19460     F2 00 68 FC | 	wrlong	#0, objptr
19464     37 00 00 FF 
19468     38 E4 85 F1 | 	sub	objptr, ##28216
1946c     00 12 06 F6 | 	mov	arg01, #0
19470     9C 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19474     37 00 00 FF 
19478     3C E4 05 F1 | 	add	objptr, ##28220
1947c     F2 12 02 FB | 	rdlong	arg01, objptr
19480     04 E4 85 F1 | 	sub	objptr, #4
19484     F2 14 02 FB | 	rdlong	arg02, objptr
19488                 | ' 
19488                 | ' write_color:=ff
19488     36 00 00 FF 
1948c     F7 E5 85 F1 | 	sub	objptr, ##28151
19490     F2 12 62 FC | 	wrlong	arg01, objptr
19494                 | ' write_background:=bb
19494     04 E4 05 F1 | 	add	objptr, #4
19498     F2 14 62 FC | 	wrlong	arg02, objptr
1949c     45 E4 85 F1 | 	sub	objptr, #69
194a0     00 01 90 FD | 	jmp	#LR__2118
194a4                 | LR__2116
194a4     37 00 00 FF 
194a8     40 E4 05 F1 | 	add	objptr, ##28224
194ac     F2 00 68 FC | 	wrlong	#0, objptr
194b0     04 E4 85 F1 | 	sub	objptr, #4
194b4     F2 1E 68 FC | 	wrlong	#15, objptr
194b8     19 00 00 FF 
194bc     D8 E4 05 F1 | 	add	objptr, ##13016
194c0     F2 00 68 FC | 	wrlong	#0, objptr
194c4     19 00 00 FF 
194c8     DC E4 85 F1 | 	sub	objptr, ##13020
194cc     F2 00 68 FC | 	wrlong	#0, objptr
194d0     37 00 00 FF 
194d4     38 E4 85 F1 | 	sub	objptr, ##28216
194d8     00 12 06 F6 | 	mov	arg01, #0
194dc     30 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
194e0     37 00 00 FF 
194e4     3C E4 05 F1 | 	add	objptr, ##28220
194e8     F2 12 02 FB | 	rdlong	arg01, objptr
194ec     04 E4 85 F1 | 	sub	objptr, #4
194f0     F2 14 02 FB | 	rdlong	arg02, objptr
194f4                 | ' 
194f4                 | ' write_color:=ff
194f4     36 00 00 FF 
194f8     F7 E5 85 F1 | 	sub	objptr, ##28151
194fc     F2 12 62 FC | 	wrlong	arg01, objptr
19500                 | ' write_background:=bb
19500     04 E4 05 F1 | 	add	objptr, #4
19504     F2 14 62 FC | 	wrlong	arg02, objptr
19508     45 E4 85 F1 | 	sub	objptr, #69
1950c     94 00 90 FD | 	jmp	#LR__2118
19510                 | LR__2117
19510     37 00 00 FF 
19514     40 E4 05 F1 | 	add	objptr, ##28224
19518     F2 02 68 FC | 	wrlong	#1, objptr
1951c     04 E4 85 F1 | 	sub	objptr, #4
19520     F2 02 68 FC | 	wrlong	#1, objptr
19524     19 00 00 FF 
19528     D8 E4 05 F1 | 	add	objptr, ##13016
1952c     F2 02 68 FC | 	wrlong	#1, objptr
19530     19 00 00 FF 
19534     DC E4 85 F1 | 	sub	objptr, ##13020
19538     F2 1C 68 FC | 	wrlong	#14, objptr
1953c     37 00 00 FF 
19540     38 E4 85 F1 | 	sub	objptr, ##28216
19544     04 12 06 F6 | 	mov	arg01, #4
19548     C4 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1954c     37 00 00 FF 
19550     3C E4 05 F1 | 	add	objptr, ##28220
19554     F2 12 02 FB | 	rdlong	arg01, objptr
19558     04 E4 85 F1 | 	sub	objptr, #4
1955c     F2 14 02 FB | 	rdlong	arg02, objptr
19560                 | ' 
19560                 | ' write_color:=ff
19560     36 00 00 FF 
19564     F7 E5 85 F1 | 	sub	objptr, ##28151
19568     F2 12 62 FC | 	wrlong	arg01, objptr
1956c                 | ' write_background:=bb
1956c     04 E4 05 F1 | 	add	objptr, #4
19570     F2 14 62 FC | 	wrlong	arg02, objptr
19574     07 00 00 FF 
19578     8A EB 05 F1 | 	add	ptr__dat__, ##3978
1957c     51 00 00 FF 
19580     73 E5 05 F1 | 	add	objptr, ##41843
19584     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19588     04 E4 85 F1 | 	sub	objptr, #4
1958c     03 00 80 FF 
19590     F2 30 69 FC | 	wrlong	##1688, objptr
19594     51 00 00 FF 
19598     B4 E5 85 F1 | 	sub	objptr, ##41908
1959c     07 00 00 FF 
195a0     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
195a4                 | LR__2118
195a4     51 00 00 FF 
195a8     B0 E5 05 F1 | 	add	objptr, ##41904
195ac     F2 1E 62 FC | 	wrlong	local01, objptr
195b0     04 E4 85 F1 | 	sub	objptr, #4
195b4     F2 12 02 FB | 	rdlong	arg01, objptr
195b8     0E 00 00 FF 
195bc     50 E5 85 F1 | 	sub	objptr, ##7504
195c0     F2 26 02 FB | 	rdlong	local05, objptr
195c4     43 00 00 FF 
195c8     5C E4 85 F1 | 	sub	objptr, ##34396
195cc     13 13 82 F1 | 	sub	arg01, local05
195d0     00 14 06 F6 | 	mov	arg02, #0
195d4     0A 16 06 F6 | 	mov	arg03, #10
195d8     30 96 B0 FD | 	call	#__system__Number_S
195dc     FD 12 02 F6 | 	mov	arg01, result1
195e0     85 01 00 FF 
195e4     2A 14 06 F6 | 	mov	arg02, ##@LR__5517
195e8     AC 73 B0 FD | 	call	#__system___string_concat
195ec     50 00 00 FF 
195f0     10 E5 05 F1 | 	add	objptr, ##41232
195f4     F2 FA 61 FC | 	wrlong	result1, objptr
195f8     19 00 00 FF 
195fc     D4 E4 85 F1 | 	sub	objptr, ##13012
19600     F2 12 02 FB | 	rdlong	arg01, objptr
19604     04 E4 85 F1 | 	sub	objptr, #4
19608     F2 14 02 FB | 	rdlong	arg02, objptr
1960c     37 00 00 FF 
19610     38 E4 85 F1 | 	sub	objptr, ##28216
19614     48 5A B0 FD | 	call	#_hg010b_spin2_cls
19618     85 01 00 FF 
1961c     3C 12 06 F6 | 	mov	arg01, ##@LR__5518
19620                 | ' 
19620                 | ' write(text)
19620     FC 5D B0 FD | 	call	#_hg010b_spin2_write
19624                 | ' crlf
19624     F8 62 B0 FD | 	call	#_hg010b_spin2_crlf
19628     18 00 00 FF 
1962c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
19630     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
19634     18 00 00 FF 
19638     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1963c                 | ' 
1963c                 | ' write(text)
1963c     E0 5D B0 FD | 	call	#_hg010b_spin2_write
19640                 | ' crlf
19640     DC 62 B0 FD | 	call	#_hg010b_spin2_crlf
19644     50 00 00 FF 
19648     10 E5 05 F1 | 	add	objptr, ##41232
1964c     F2 12 02 FB | 	rdlong	arg01, objptr
19650     50 00 00 FF 
19654     10 E5 85 F1 | 	sub	objptr, ##41232
19658                 | ' 
19658                 | ' write(text)
19658     C4 5D B0 FD | 	call	#_hg010b_spin2_write
1965c                 | ' crlf
1965c     C0 62 B0 FD | 	call	#_hg010b_spin2_crlf
19660     A7 F0 03 F6 | 	mov	ptra, fp
19664     B2 00 A0 FD | 	call	#popregs_
19668                 | _do_mode_ret
19668     2D 00 64 FD | 	ret
1966c                 | 
1966c                 | ' 
1966c                 | ' sub do_setwave
1966c                 | _do_setwave
1966c     02 4A 05 F6 | 	mov	COUNT_, #2
19670     A8 00 A0 FD | 	call	#pushregs_
19674     18 F0 07 F1 | 	add	ptra, #24
19678     A8 1B BF FD | 	call	#_pop
1967c     FD 12 02 F6 | 	mov	arg01, result1
19680     FE 1E 02 F6 | 	mov	local01, result2
19684     FF 20 02 F6 | 	mov	local02, result3
19688     A7 12 62 FC | 	wrlong	arg01, fp
1968c     04 4E 05 F1 | 	add	fp, #4
19690     A7 1E 62 FC | 	wrlong	local01, fp
19694     04 4E 05 F1 | 	add	fp, #4
19698     A7 20 62 FC | 	wrlong	local02, fp
1969c     08 4E 85 F1 | 	sub	fp, #8
196a0     80 1B BF FD | 	call	#_pop
196a4     FD 20 02 F6 | 	mov	local02, result1
196a8     0C 4E 05 F1 | 	add	fp, #12
196ac     A7 20 62 FC | 	wrlong	local02, fp
196b0     04 4E 05 F1 | 	add	fp, #4
196b4     A7 FC 61 FC | 	wrlong	result2, fp
196b8     04 4E 05 F1 | 	add	fp, #4
196bc     A7 FE 61 FC | 	wrlong	result3, fp
196c0     08 4E 85 F1 | 	sub	fp, #8
196c4     A7 12 02 F6 | 	mov	arg01, fp
196c8     0C 4E 85 F1 | 	sub	fp, #12
196cc     38 1D BF FD | 	call	#_converttoint
196d0     FD 20 02 F6 | 	mov	local02, result1
196d4     10 1F 02 F6 | 	mov	local01, local02
196d8     01 1E 66 F0 | 	shl	local01, #1
196dc     10 1F 02 F1 | 	add	local01, local02
196e0     03 1E 66 F0 | 	shl	local01, #3
196e4     14 00 00 FF 
196e8     38 E5 05 F1 | 	add	objptr, ##10552
196ec     F2 1E 02 F1 | 	add	local01, objptr
196f0     A7 12 02 F6 | 	mov	arg01, fp
196f4     14 00 00 FF 
196f8     38 E5 85 F1 | 	sub	objptr, ##10552
196fc     08 1D BF FD | 	call	#_converttoint
19700     04 1E 06 F1 | 	add	local01, #4
19704     0F FB 41 FC | 	wrbyte	result1, local01
19708     A7 F0 03 F6 | 	mov	ptra, fp
1970c     B2 00 A0 FD | 	call	#popregs_
19710                 | _do_setwave_ret
19710     2D 00 64 FD | 	ret
19714                 | 
19714                 | ' 
19714                 | ' sub do_setsustain
19714                 | _do_setsustain
19714     02 4A 05 F6 | 	mov	COUNT_, #2
19718     A8 00 A0 FD | 	call	#pushregs_
1971c     18 F0 07 F1 | 	add	ptra, #24
19720     00 1B BF FD | 	call	#_pop
19724     FD 12 02 F6 | 	mov	arg01, result1
19728     FE 1E 02 F6 | 	mov	local01, result2
1972c     FF 20 02 F6 | 	mov	local02, result3
19730     A7 12 62 FC | 	wrlong	arg01, fp
19734     04 4E 05 F1 | 	add	fp, #4
19738     A7 1E 62 FC | 	wrlong	local01, fp
1973c     04 4E 05 F1 | 	add	fp, #4
19740     A7 20 62 FC | 	wrlong	local02, fp
19744     08 4E 85 F1 | 	sub	fp, #8
19748     D8 1A BF FD | 	call	#_pop
1974c     FD 20 02 F6 | 	mov	local02, result1
19750     0C 4E 05 F1 | 	add	fp, #12
19754     A7 20 62 FC | 	wrlong	local02, fp
19758     04 4E 05 F1 | 	add	fp, #4
1975c     A7 FC 61 FC | 	wrlong	result2, fp
19760     04 4E 05 F1 | 	add	fp, #4
19764     A7 FE 61 FC | 	wrlong	result3, fp
19768     08 4E 85 F1 | 	sub	fp, #8
1976c     A7 12 02 F6 | 	mov	arg01, fp
19770     0C 4E 85 F1 | 	sub	fp, #12
19774     90 1C BF FD | 	call	#_converttoint
19778     FD 20 02 F6 | 	mov	local02, result1
1977c     10 1F 02 F6 | 	mov	local01, local02
19780     01 1E 66 F0 | 	shl	local01, #1
19784     10 1F 02 F1 | 	add	local01, local02
19788     03 1E 66 F0 | 	shl	local01, #3
1978c     14 00 00 FF 
19790     38 E5 05 F1 | 	add	objptr, ##10552
19794     F2 1E 02 F1 | 	add	local01, objptr
19798     A7 12 02 F6 | 	mov	arg01, fp
1979c     14 00 00 FF 
197a0     38 E5 85 F1 | 	sub	objptr, ##10552
197a4     60 1C BF FD | 	call	#_converttoint
197a8     14 1E 06 F1 | 	add	local01, #20
197ac     0F FB 51 FC | 	wrword	result1, local01
197b0     A7 F0 03 F6 | 	mov	ptra, fp
197b4     B2 00 A0 FD | 	call	#popregs_
197b8                 | _do_setsustain_ret
197b8     2D 00 64 FD | 	ret
197bc                 | 
197bc                 | ' 
197bc                 | ' sub do_setenv
197bc                 | _do_setenv
197bc     02 4A 05 F6 | 	mov	COUNT_, #2
197c0     A8 00 A0 FD | 	call	#pushregs_
197c4     18 F0 07 F1 | 	add	ptra, #24
197c8     58 1A BF FD | 	call	#_pop
197cc     FD 12 02 F6 | 	mov	arg01, result1
197d0     FE 1E 02 F6 | 	mov	local01, result2
197d4     FF 20 02 F6 | 	mov	local02, result3
197d8     A7 12 62 FC | 	wrlong	arg01, fp
197dc     04 4E 05 F1 | 	add	fp, #4
197e0     A7 1E 62 FC | 	wrlong	local01, fp
197e4     04 4E 05 F1 | 	add	fp, #4
197e8     A7 20 62 FC | 	wrlong	local02, fp
197ec     08 4E 85 F1 | 	sub	fp, #8
197f0     30 1A BF FD | 	call	#_pop
197f4     FD 20 02 F6 | 	mov	local02, result1
197f8     0C 4E 05 F1 | 	add	fp, #12
197fc     A7 20 62 FC | 	wrlong	local02, fp
19800     04 4E 05 F1 | 	add	fp, #4
19804     A7 FC 61 FC | 	wrlong	result2, fp
19808     04 4E 05 F1 | 	add	fp, #4
1980c     A7 FE 61 FC | 	wrlong	result3, fp
19810     08 4E 85 F1 | 	sub	fp, #8
19814     A7 12 02 F6 | 	mov	arg01, fp
19818     0C 4E 85 F1 | 	sub	fp, #12
1981c     E8 1B BF FD | 	call	#_converttoint
19820     FD 20 02 F6 | 	mov	local02, result1
19824     10 1F 02 F6 | 	mov	local01, local02
19828     01 1E 66 F0 | 	shl	local01, #1
1982c     10 1F 02 F1 | 	add	local01, local02
19830     03 1E 66 F0 | 	shl	local01, #3
19834     14 00 00 FF 
19838     38 E5 05 F1 | 	add	objptr, ##10552
1983c     F2 1E 02 F1 | 	add	local01, objptr
19840     A7 12 02 F6 | 	mov	arg01, fp
19844     14 00 00 FF 
19848     38 E5 85 F1 | 	sub	objptr, ##10552
1984c     B8 1B BF FD | 	call	#_converttoint
19850     05 1E 06 F1 | 	add	local01, #5
19854     0F FB 41 FC | 	wrbyte	result1, local01
19858     A7 F0 03 F6 | 	mov	ptra, fp
1985c     B2 00 A0 FD | 	call	#popregs_
19860                 | _do_setenv_ret
19860     2D 00 64 FD | 	ret
19864                 | 
19864                 | ' 
19864                 | ' sub do_setdelay
19864                 | _do_setdelay
19864     02 4A 05 F6 | 	mov	COUNT_, #2
19868     A8 00 A0 FD | 	call	#pushregs_
1986c     18 F0 07 F1 | 	add	ptra, #24
19870     B0 19 BF FD | 	call	#_pop
19874     FD 12 02 F6 | 	mov	arg01, result1
19878     FE 1E 02 F6 | 	mov	local01, result2
1987c     FF 20 02 F6 | 	mov	local02, result3
19880     A7 12 62 FC | 	wrlong	arg01, fp
19884     04 4E 05 F1 | 	add	fp, #4
19888     A7 1E 62 FC | 	wrlong	local01, fp
1988c     04 4E 05 F1 | 	add	fp, #4
19890     A7 20 62 FC | 	wrlong	local02, fp
19894     08 4E 85 F1 | 	sub	fp, #8
19898     88 19 BF FD | 	call	#_pop
1989c     FD 20 02 F6 | 	mov	local02, result1
198a0     0C 4E 05 F1 | 	add	fp, #12
198a4     A7 20 62 FC | 	wrlong	local02, fp
198a8     04 4E 05 F1 | 	add	fp, #4
198ac     A7 FC 61 FC | 	wrlong	result2, fp
198b0     04 4E 05 F1 | 	add	fp, #4
198b4     A7 FE 61 FC | 	wrlong	result3, fp
198b8     08 4E 85 F1 | 	sub	fp, #8
198bc     A7 12 02 F6 | 	mov	arg01, fp
198c0     0C 4E 85 F1 | 	sub	fp, #12
198c4     40 1B BF FD | 	call	#_converttoint
198c8     FD 20 02 F6 | 	mov	local02, result1
198cc     10 1F 02 F6 | 	mov	local01, local02
198d0     01 1E 66 F0 | 	shl	local01, #1
198d4     10 1F 02 F1 | 	add	local01, local02
198d8     03 1E 66 F0 | 	shl	local01, #3
198dc     14 00 00 FF 
198e0     38 E5 05 F1 | 	add	objptr, ##10552
198e4     F2 1E 02 F1 | 	add	local01, objptr
198e8     A7 12 02 F6 | 	mov	arg01, fp
198ec     14 00 00 FF 
198f0     38 E5 85 F1 | 	sub	objptr, ##10552
198f4     10 1B BF FD | 	call	#_converttoint
198f8     06 1E 06 F1 | 	add	local01, #6
198fc     0F FB 51 FC | 	wrword	result1, local01
19900     A7 F0 03 F6 | 	mov	ptra, fp
19904     B2 00 A0 FD | 	call	#popregs_
19908                 | _do_setdelay_ret
19908     2D 00 64 FD | 	ret
1990c                 | 
1990c                 | ' 
1990c                 | ' sub do_setlen
1990c                 | _do_setlen
1990c     02 4A 05 F6 | 	mov	COUNT_, #2
19910     A8 00 A0 FD | 	call	#pushregs_
19914     18 F0 07 F1 | 	add	ptra, #24
19918     08 19 BF FD | 	call	#_pop
1991c     FD 12 02 F6 | 	mov	arg01, result1
19920     FE 1E 02 F6 | 	mov	local01, result2
19924     FF 20 02 F6 | 	mov	local02, result3
19928     A7 12 62 FC | 	wrlong	arg01, fp
1992c     04 4E 05 F1 | 	add	fp, #4
19930     A7 1E 62 FC | 	wrlong	local01, fp
19934     04 4E 05 F1 | 	add	fp, #4
19938     A7 20 62 FC | 	wrlong	local02, fp
1993c     08 4E 85 F1 | 	sub	fp, #8
19940     E0 18 BF FD | 	call	#_pop
19944     FD 20 02 F6 | 	mov	local02, result1
19948     0C 4E 05 F1 | 	add	fp, #12
1994c     A7 20 62 FC | 	wrlong	local02, fp
19950     04 4E 05 F1 | 	add	fp, #4
19954     A7 FC 61 FC | 	wrlong	result2, fp
19958     04 4E 05 F1 | 	add	fp, #4
1995c     A7 FE 61 FC | 	wrlong	result3, fp
19960     08 4E 85 F1 | 	sub	fp, #8
19964     A7 12 02 F6 | 	mov	arg01, fp
19968     0C 4E 85 F1 | 	sub	fp, #12
1996c     98 1A BF FD | 	call	#_converttoint
19970     FD 20 02 F6 | 	mov	local02, result1
19974     10 1F 02 F6 | 	mov	local01, local02
19978     01 1E 66 F0 | 	shl	local01, #1
1997c     10 1F 02 F1 | 	add	local01, local02
19980     03 1E 66 F0 | 	shl	local01, #3
19984     14 00 00 FF 
19988     38 E5 05 F1 | 	add	objptr, ##10552
1998c     F2 1E 02 F1 | 	add	local01, objptr
19990     A7 12 02 F6 | 	mov	arg01, fp
19994     14 00 00 FF 
19998     38 E5 85 F1 | 	sub	objptr, ##10552
1999c     24 1B BF FD | 	call	#_converttofloat
199a0     08 1E 06 F1 | 	add	local01, #8
199a4     0F FB 61 FC | 	wrlong	result1, local01
199a8     A7 F0 03 F6 | 	mov	ptra, fp
199ac     B2 00 A0 FD | 	call	#popregs_
199b0                 | _do_setlen_ret
199b0     2D 00 64 FD | 	ret
199b4                 | 
199b4                 | ' 
199b4                 | ' sub do_setvol
199b4                 | _do_setvol
199b4     02 4A 05 F6 | 	mov	COUNT_, #2
199b8     A8 00 A0 FD | 	call	#pushregs_
199bc     18 F0 07 F1 | 	add	ptra, #24
199c0     60 18 BF FD | 	call	#_pop
199c4     FD 12 02 F6 | 	mov	arg01, result1
199c8     FE 1E 02 F6 | 	mov	local01, result2
199cc     FF 20 02 F6 | 	mov	local02, result3
199d0     A7 12 62 FC | 	wrlong	arg01, fp
199d4     04 4E 05 F1 | 	add	fp, #4
199d8     A7 1E 62 FC | 	wrlong	local01, fp
199dc     04 4E 05 F1 | 	add	fp, #4
199e0     A7 20 62 FC | 	wrlong	local02, fp
199e4     08 4E 85 F1 | 	sub	fp, #8
199e8     38 18 BF FD | 	call	#_pop
199ec     FD 20 02 F6 | 	mov	local02, result1
199f0     0C 4E 05 F1 | 	add	fp, #12
199f4     A7 20 62 FC | 	wrlong	local02, fp
199f8     04 4E 05 F1 | 	add	fp, #4
199fc     A7 FC 61 FC | 	wrlong	result2, fp
19a00     04 4E 05 F1 | 	add	fp, #4
19a04     A7 FE 61 FC | 	wrlong	result3, fp
19a08     08 4E 85 F1 | 	sub	fp, #8
19a0c     A7 12 02 F6 | 	mov	arg01, fp
19a10     0C 4E 85 F1 | 	sub	fp, #12
19a14     F0 19 BF FD | 	call	#_converttoint
19a18     FD 20 02 F6 | 	mov	local02, result1
19a1c     10 1F 02 F6 | 	mov	local01, local02
19a20     01 1E 66 F0 | 	shl	local01, #1
19a24     10 1F 02 F1 | 	add	local01, local02
19a28     03 1E 66 F0 | 	shl	local01, #3
19a2c     14 00 00 FF 
19a30     38 E5 05 F1 | 	add	objptr, ##10552
19a34     F2 1E 02 F1 | 	add	local01, objptr
19a38     A7 12 02 F6 | 	mov	arg01, fp
19a3c     14 00 00 FF 
19a40     38 E5 85 F1 | 	sub	objptr, ##10552
19a44     7C 1A BF FD | 	call	#_converttofloat
19a48     0C 1E 06 F1 | 	add	local01, #12
19a4c     0F FB 61 FC | 	wrlong	result1, local01
19a50     A7 F0 03 F6 | 	mov	ptra, fp
19a54     B2 00 A0 FD | 	call	#popregs_
19a58                 | _do_setvol_ret
19a58     2D 00 64 FD | 	ret
19a5c                 | 
19a5c                 | ' 
19a5c                 | ' sub do_setpan
19a5c                 | _do_setpan
19a5c     02 4A 05 F6 | 	mov	COUNT_, #2
19a60     A8 00 A0 FD | 	call	#pushregs_
19a64     18 F0 07 F1 | 	add	ptra, #24
19a68     B8 17 BF FD | 	call	#_pop
19a6c     FD 12 02 F6 | 	mov	arg01, result1
19a70     FE 1E 02 F6 | 	mov	local01, result2
19a74     FF 20 02 F6 | 	mov	local02, result3
19a78     A7 12 62 FC | 	wrlong	arg01, fp
19a7c     04 4E 05 F1 | 	add	fp, #4
19a80     A7 1E 62 FC | 	wrlong	local01, fp
19a84     04 4E 05 F1 | 	add	fp, #4
19a88     A7 20 62 FC | 	wrlong	local02, fp
19a8c     08 4E 85 F1 | 	sub	fp, #8
19a90     90 17 BF FD | 	call	#_pop
19a94     FD 20 02 F6 | 	mov	local02, result1
19a98     0C 4E 05 F1 | 	add	fp, #12
19a9c     A7 20 62 FC | 	wrlong	local02, fp
19aa0     04 4E 05 F1 | 	add	fp, #4
19aa4     A7 FC 61 FC | 	wrlong	result2, fp
19aa8     04 4E 05 F1 | 	add	fp, #4
19aac     A7 FE 61 FC | 	wrlong	result3, fp
19ab0     08 4E 85 F1 | 	sub	fp, #8
19ab4     A7 12 02 F6 | 	mov	arg01, fp
19ab8     0C 4E 85 F1 | 	sub	fp, #12
19abc     48 19 BF FD | 	call	#_converttoint
19ac0     FD 20 02 F6 | 	mov	local02, result1
19ac4     10 1F 02 F6 | 	mov	local01, local02
19ac8     01 1E 66 F0 | 	shl	local01, #1
19acc     10 1F 02 F1 | 	add	local01, local02
19ad0     03 1E 66 F0 | 	shl	local01, #3
19ad4     14 00 00 FF 
19ad8     38 E5 05 F1 | 	add	objptr, ##10552
19adc     F2 1E 02 F1 | 	add	local01, objptr
19ae0     A7 12 02 F6 | 	mov	arg01, fp
19ae4     14 00 00 FF 
19ae8     38 E5 85 F1 | 	sub	objptr, ##10552
19aec     D4 19 BF FD | 	call	#_converttofloat
19af0     10 1E 06 F1 | 	add	local01, #16
19af4     0F FB 61 FC | 	wrlong	result1, local01
19af8     A7 F0 03 F6 | 	mov	ptra, fp
19afc     B2 00 A0 FD | 	call	#popregs_
19b00                 | _do_setpan_ret
19b00     2D 00 64 FD | 	ret
19b04                 | 
19b04                 | ' 
19b04                 | ' 
19b04                 | ' sub do_pinwrite
19b04                 | _do_pinwrite
19b04     01 4A 05 F6 | 	mov	COUNT_, #1
19b08     A8 00 A0 FD | 	call	#pushregs_
19b0c     18 F0 07 F1 | 	add	ptra, #24
19b10     10 17 BF FD | 	call	#_pop
19b14     FD 14 02 F6 | 	mov	arg02, result1
19b18     FE 12 02 F6 | 	mov	arg01, result2
19b1c     FF 1E 02 F6 | 	mov	local01, result3
19b20     A7 14 62 FC | 	wrlong	arg02, fp
19b24     04 4E 05 F1 | 	add	fp, #4
19b28     A7 12 62 FC | 	wrlong	arg01, fp
19b2c     04 4E 05 F1 | 	add	fp, #4
19b30     A7 1E 62 FC | 	wrlong	local01, fp
19b34     08 4E 85 F1 | 	sub	fp, #8
19b38     E8 16 BF FD | 	call	#_pop
19b3c     FF 1E 02 F6 | 	mov	local01, result3
19b40     0C 4E 05 F1 | 	add	fp, #12
19b44     A7 FA 61 FC | 	wrlong	result1, fp
19b48     04 4E 05 F1 | 	add	fp, #4
19b4c     A7 FC 61 FC | 	wrlong	result2, fp
19b50     04 4E 05 F1 | 	add	fp, #4
19b54     A7 1E 62 FC | 	wrlong	local01, fp
19b58     08 4E 85 F1 | 	sub	fp, #8
19b5c     A7 12 02 F6 | 	mov	arg01, fp
19b60     0C 4E 85 F1 | 	sub	fp, #12
19b64     A0 18 BF FD | 	call	#_converttoint
19b68     FD 1E 02 F6 | 	mov	local01, result1
19b6c     A7 12 02 F6 | 	mov	arg01, fp
19b70     94 18 BF FD | 	call	#_converttoint
19b74     FD 14 02 F6 | 	mov	arg02, result1
19b78     0F 13 02 F6 | 	mov	arg01, local01
19b7c     70 6F B0 FD | 	call	#__system___pinwrite
19b80     A7 F0 03 F6 | 	mov	ptra, fp
19b84     B2 00 A0 FD | 	call	#popregs_
19b88                 | _do_pinwrite_ret
19b88     2D 00 64 FD | 	ret
19b8c                 | 
19b8c                 | ' 
19b8c                 | ' sub do_pinfloat
19b8c                 | _do_pinfloat
19b8c     00 4A 05 F6 | 	mov	COUNT_, #0
19b90     A8 00 A0 FD | 	call	#pushregs_
19b94     0C F0 07 F1 | 	add	ptra, #12
19b98     88 16 BF FD | 	call	#_pop
19b9c     A7 FA 61 FC | 	wrlong	result1, fp
19ba0     04 4E 05 F1 | 	add	fp, #4
19ba4     A7 FC 61 FC | 	wrlong	result2, fp
19ba8     04 4E 05 F1 | 	add	fp, #4
19bac     A7 FE 61 FC | 	wrlong	result3, fp
19bb0     08 4E 85 F1 | 	sub	fp, #8
19bb4     A7 12 02 F6 | 	mov	arg01, fp
19bb8     4C 18 BF FD | 	call	#_converttoint
19bbc     50 FA 61 FD | 	fltl	result1
19bc0     A7 F0 03 F6 | 	mov	ptra, fp
19bc4     B2 00 A0 FD | 	call	#popregs_
19bc8                 | _do_pinfloat_ret
19bc8     2D 00 64 FD | 	ret
19bcc                 | 
19bcc                 | ' 
19bcc                 | ' sub do_pinlo
19bcc                 | _do_pinlo
19bcc     00 4A 05 F6 | 	mov	COUNT_, #0
19bd0     A8 00 A0 FD | 	call	#pushregs_
19bd4     0C F0 07 F1 | 	add	ptra, #12
19bd8     48 16 BF FD | 	call	#_pop
19bdc     A7 FA 61 FC | 	wrlong	result1, fp
19be0     04 4E 05 F1 | 	add	fp, #4
19be4     A7 FC 61 FC | 	wrlong	result2, fp
19be8     04 4E 05 F1 | 	add	fp, #4
19bec     A7 FE 61 FC | 	wrlong	result3, fp
19bf0     08 4E 85 F1 | 	sub	fp, #8
19bf4     A7 12 02 F6 | 	mov	arg01, fp
19bf8     0C 18 BF FD | 	call	#_converttoint
19bfc     58 FA 61 FD | 	drvl	result1
19c00     A7 F0 03 F6 | 	mov	ptra, fp
19c04     B2 00 A0 FD | 	call	#popregs_
19c08                 | _do_pinlo_ret
19c08     2D 00 64 FD | 	ret
19c0c                 | 
19c0c                 | ' 
19c0c                 | ' sub do_pinhi
19c0c                 | _do_pinhi
19c0c     00 4A 05 F6 | 	mov	COUNT_, #0
19c10     A8 00 A0 FD | 	call	#pushregs_
19c14     0C F0 07 F1 | 	add	ptra, #12
19c18     08 16 BF FD | 	call	#_pop
19c1c     A7 FA 61 FC | 	wrlong	result1, fp
19c20     04 4E 05 F1 | 	add	fp, #4
19c24     A7 FC 61 FC | 	wrlong	result2, fp
19c28     04 4E 05 F1 | 	add	fp, #4
19c2c     A7 FE 61 FC | 	wrlong	result3, fp
19c30     08 4E 85 F1 | 	sub	fp, #8
19c34     A7 12 02 F6 | 	mov	arg01, fp
19c38     CC 17 BF FD | 	call	#_converttoint
19c3c     59 FA 61 FD | 	drvh	result1
19c40     A7 F0 03 F6 | 	mov	ptra, fp
19c44     B2 00 A0 FD | 	call	#popregs_
19c48                 | _do_pinhi_ret
19c48     2D 00 64 FD | 	ret
19c4c                 | 
19c4c                 | ' 
19c4c                 | ' sub do_pintoggle
19c4c                 | _do_pintoggle
19c4c     00 4A 05 F6 | 	mov	COUNT_, #0
19c50     A8 00 A0 FD | 	call	#pushregs_
19c54     0C F0 07 F1 | 	add	ptra, #12
19c58     C8 15 BF FD | 	call	#_pop
19c5c     A7 FA 61 FC | 	wrlong	result1, fp
19c60     04 4E 05 F1 | 	add	fp, #4
19c64     A7 FC 61 FC | 	wrlong	result2, fp
19c68     04 4E 05 F1 | 	add	fp, #4
19c6c     A7 FE 61 FC | 	wrlong	result3, fp
19c70     08 4E 85 F1 | 	sub	fp, #8
19c74     A7 12 02 F6 | 	mov	arg01, fp
19c78     8C 17 BF FD | 	call	#_converttoint
19c7c     5F FA 61 FD | 	drvnot	result1
19c80     A7 F0 03 F6 | 	mov	ptra, fp
19c84     B2 00 A0 FD | 	call	#popregs_
19c88                 | _do_pintoggle_ret
19c88     2D 00 64 FD | 	ret
19c8c                 | 
19c8c                 | ' 
19c8c                 | ' 
19c8c                 | ' sub do_pinstart
19c8c                 | _do_pinstart
19c8c     03 4A 05 F6 | 	mov	COUNT_, #3
19c90     A8 00 A0 FD | 	call	#pushregs_
19c94     30 F0 07 F1 | 	add	ptra, #48
19c98     88 15 BF FD | 	call	#_pop
19c9c     FD 16 02 F6 | 	mov	arg03, result1
19ca0     FE 14 02 F6 | 	mov	arg02, result2
19ca4     FF 18 02 F6 | 	mov	arg04, result3
19ca8     A7 16 62 FC | 	wrlong	arg03, fp
19cac     04 4E 05 F1 | 	add	fp, #4
19cb0     A7 14 62 FC | 	wrlong	arg02, fp
19cb4     04 4E 05 F1 | 	add	fp, #4
19cb8     A7 18 62 FC | 	wrlong	arg04, fp
19cbc     08 4E 85 F1 | 	sub	fp, #8
19cc0     60 15 BF FD | 	call	#_pop
19cc4     FD 16 02 F6 | 	mov	arg03, result1
19cc8     FE 14 02 F6 | 	mov	arg02, result2
19ccc     FF 18 02 F6 | 	mov	arg04, result3
19cd0     0C 4E 05 F1 | 	add	fp, #12
19cd4     A7 16 62 FC | 	wrlong	arg03, fp
19cd8     04 4E 05 F1 | 	add	fp, #4
19cdc     A7 14 62 FC | 	wrlong	arg02, fp
19ce0     04 4E 05 F1 | 	add	fp, #4
19ce4     A7 18 62 FC | 	wrlong	arg04, fp
19ce8     14 4E 85 F1 | 	sub	fp, #20
19cec     34 15 BF FD | 	call	#_pop
19cf0     FD 16 02 F6 | 	mov	arg03, result1
19cf4     FE 14 02 F6 | 	mov	arg02, result2
19cf8     FF 18 02 F6 | 	mov	arg04, result3
19cfc     18 4E 05 F1 | 	add	fp, #24
19d00     A7 16 62 FC | 	wrlong	arg03, fp
19d04     04 4E 05 F1 | 	add	fp, #4
19d08     A7 14 62 FC | 	wrlong	arg02, fp
19d0c     04 4E 05 F1 | 	add	fp, #4
19d10     A7 18 62 FC | 	wrlong	arg04, fp
19d14     20 4E 85 F1 | 	sub	fp, #32
19d18     08 15 BF FD | 	call	#_pop
19d1c     FF 16 02 F6 | 	mov	arg03, result3
19d20     24 4E 05 F1 | 	add	fp, #36
19d24     A7 FA 61 FC | 	wrlong	result1, fp
19d28     04 4E 05 F1 | 	add	fp, #4
19d2c     A7 FC 61 FC | 	wrlong	result2, fp
19d30     04 4E 05 F1 | 	add	fp, #4
19d34     A7 16 62 FC | 	wrlong	arg03, fp
19d38     08 4E 85 F1 | 	sub	fp, #8
19d3c     A7 12 02 F6 | 	mov	arg01, fp
19d40     24 4E 85 F1 | 	sub	fp, #36
19d44     C0 16 BF FD | 	call	#_converttoint
19d48     FD 1E 02 F6 | 	mov	local01, result1
19d4c     18 4E 05 F1 | 	add	fp, #24
19d50     A7 12 02 F6 | 	mov	arg01, fp
19d54     18 4E 85 F1 | 	sub	fp, #24
19d58     AC 16 BF FD | 	call	#_converttoint
19d5c     FD 20 02 F6 | 	mov	local02, result1
19d60     0C 4E 05 F1 | 	add	fp, #12
19d64     A7 12 02 F6 | 	mov	arg01, fp
19d68     0C 4E 85 F1 | 	sub	fp, #12
19d6c     98 16 BF FD | 	call	#_converttoint
19d70     FD 22 02 F6 | 	mov	local03, result1
19d74     A7 12 02 F6 | 	mov	arg01, fp
19d78     8C 16 BF FD | 	call	#_converttoint
19d7c     40 1E 62 FD | 	dirl	local01
19d80     0F 21 02 FC | 	wrpin	local02, local01
19d84     0F 23 12 FC | 	wxpin	local03, local01
19d88     0F FB 21 FC | 	wypin	result1, local01
19d8c     41 1E 62 FD | 	dirh	local01
19d90     A7 F0 03 F6 | 	mov	ptra, fp
19d94     B2 00 A0 FD | 	call	#popregs_
19d98                 | _do_pinstart_ret
19d98     2D 00 64 FD | 	ret
19d9c                 | 
19d9c                 | ' 
19d9c                 | ' 
19d9c                 | ' sub do_wrpin
19d9c                 | _do_wrpin
19d9c     01 4A 05 F6 | 	mov	COUNT_, #1
19da0     A8 00 A0 FD | 	call	#pushregs_
19da4     18 F0 07 F1 | 	add	ptra, #24
19da8     78 14 BF FD | 	call	#_pop
19dac     FD 14 02 F6 | 	mov	arg02, result1
19db0     FE 12 02 F6 | 	mov	arg01, result2
19db4     FF 1E 02 F6 | 	mov	local01, result3
19db8     A7 14 62 FC | 	wrlong	arg02, fp
19dbc     04 4E 05 F1 | 	add	fp, #4
19dc0     A7 12 62 FC | 	wrlong	arg01, fp
19dc4     04 4E 05 F1 | 	add	fp, #4
19dc8     A7 1E 62 FC | 	wrlong	local01, fp
19dcc     08 4E 85 F1 | 	sub	fp, #8
19dd0     50 14 BF FD | 	call	#_pop
19dd4     FF 1E 02 F6 | 	mov	local01, result3
19dd8     0C 4E 05 F1 | 	add	fp, #12
19ddc     A7 FA 61 FC | 	wrlong	result1, fp
19de0     04 4E 05 F1 | 	add	fp, #4
19de4     A7 FC 61 FC | 	wrlong	result2, fp
19de8     04 4E 05 F1 | 	add	fp, #4
19dec     A7 1E 62 FC | 	wrlong	local01, fp
19df0     08 4E 85 F1 | 	sub	fp, #8
19df4     A7 12 02 F6 | 	mov	arg01, fp
19df8     0C 4E 85 F1 | 	sub	fp, #12
19dfc     08 16 BF FD | 	call	#_converttoint
19e00     FD 1E 02 F6 | 	mov	local01, result1
19e04     A7 12 02 F6 | 	mov	arg01, fp
19e08     FC 15 BF FD | 	call	#_converttoint
19e0c     0F FB 01 FC | 	wrpin	result1, local01
19e10     A7 F0 03 F6 | 	mov	ptra, fp
19e14     B2 00 A0 FD | 	call	#popregs_
19e18                 | _do_wrpin_ret
19e18     2D 00 64 FD | 	ret
19e1c                 | 
19e1c                 | ' 
19e1c                 | ' sub do_wxpin
19e1c                 | _do_wxpin
19e1c     01 4A 05 F6 | 	mov	COUNT_, #1
19e20     A8 00 A0 FD | 	call	#pushregs_
19e24     18 F0 07 F1 | 	add	ptra, #24
19e28     F8 13 BF FD | 	call	#_pop
19e2c     FD 14 02 F6 | 	mov	arg02, result1
19e30     FE 12 02 F6 | 	mov	arg01, result2
19e34     FF 1E 02 F6 | 	mov	local01, result3
19e38     A7 14 62 FC | 	wrlong	arg02, fp
19e3c     04 4E 05 F1 | 	add	fp, #4
19e40     A7 12 62 FC | 	wrlong	arg01, fp
19e44     04 4E 05 F1 | 	add	fp, #4
19e48     A7 1E 62 FC | 	wrlong	local01, fp
19e4c     08 4E 85 F1 | 	sub	fp, #8
19e50     D0 13 BF FD | 	call	#_pop
19e54     FF 1E 02 F6 | 	mov	local01, result3
19e58     0C 4E 05 F1 | 	add	fp, #12
19e5c     A7 FA 61 FC | 	wrlong	result1, fp
19e60     04 4E 05 F1 | 	add	fp, #4
19e64     A7 FC 61 FC | 	wrlong	result2, fp
19e68     04 4E 05 F1 | 	add	fp, #4
19e6c     A7 1E 62 FC | 	wrlong	local01, fp
19e70     08 4E 85 F1 | 	sub	fp, #8
19e74     A7 12 02 F6 | 	mov	arg01, fp
19e78     0C 4E 85 F1 | 	sub	fp, #12
19e7c     88 15 BF FD | 	call	#_converttoint
19e80     FD 1E 02 F6 | 	mov	local01, result1
19e84     A7 12 02 F6 | 	mov	arg01, fp
19e88     7C 15 BF FD | 	call	#_converttoint
19e8c     0F FB 11 FC | 	wxpin	result1, local01
19e90     A7 F0 03 F6 | 	mov	ptra, fp
19e94     B2 00 A0 FD | 	call	#popregs_
19e98                 | _do_wxpin_ret
19e98     2D 00 64 FD | 	ret
19e9c                 | 
19e9c                 | ' 
19e9c                 | ' sub do_wypin
19e9c                 | _do_wypin
19e9c     01 4A 05 F6 | 	mov	COUNT_, #1
19ea0     A8 00 A0 FD | 	call	#pushregs_
19ea4     18 F0 07 F1 | 	add	ptra, #24
19ea8     78 13 BF FD | 	call	#_pop
19eac     FD 14 02 F6 | 	mov	arg02, result1
19eb0     FE 12 02 F6 | 	mov	arg01, result2
19eb4     FF 1E 02 F6 | 	mov	local01, result3
19eb8     A7 14 62 FC | 	wrlong	arg02, fp
19ebc     04 4E 05 F1 | 	add	fp, #4
19ec0     A7 12 62 FC | 	wrlong	arg01, fp
19ec4     04 4E 05 F1 | 	add	fp, #4
19ec8     A7 1E 62 FC | 	wrlong	local01, fp
19ecc     08 4E 85 F1 | 	sub	fp, #8
19ed0     50 13 BF FD | 	call	#_pop
19ed4     FF 1E 02 F6 | 	mov	local01, result3
19ed8     0C 4E 05 F1 | 	add	fp, #12
19edc     A7 FA 61 FC | 	wrlong	result1, fp
19ee0     04 4E 05 F1 | 	add	fp, #4
19ee4     A7 FC 61 FC | 	wrlong	result2, fp
19ee8     04 4E 05 F1 | 	add	fp, #4
19eec     A7 1E 62 FC | 	wrlong	local01, fp
19ef0     08 4E 85 F1 | 	sub	fp, #8
19ef4     A7 12 02 F6 | 	mov	arg01, fp
19ef8     0C 4E 85 F1 | 	sub	fp, #12
19efc     08 15 BF FD | 	call	#_converttoint
19f00     FD 1E 02 F6 | 	mov	local01, result1
19f04     A7 12 02 F6 | 	mov	arg01, fp
19f08     FC 14 BF FD | 	call	#_converttoint
19f0c     0F FB 21 FC | 	wypin	result1, local01
19f10     A7 F0 03 F6 | 	mov	ptra, fp
19f14     B2 00 A0 FD | 	call	#popregs_
19f18                 | _do_wypin_ret
19f18     2D 00 64 FD | 	ret
19f1c                 | 
19f1c                 | ' 
19f1c                 | ' sub do_position
19f1c                 | _do_position
19f1c     01 4A 05 F6 | 	mov	COUNT_, #1
19f20     A8 00 A0 FD | 	call	#pushregs_
19f24     18 F0 07 F1 | 	add	ptra, #24
19f28     F8 12 BF FD | 	call	#_pop
19f2c     FD 14 02 F6 | 	mov	arg02, result1
19f30     FE 12 02 F6 | 	mov	arg01, result2
19f34     FF 1E 02 F6 | 	mov	local01, result3
19f38     A7 14 62 FC | 	wrlong	arg02, fp
19f3c     04 4E 05 F1 | 	add	fp, #4
19f40     A7 12 62 FC | 	wrlong	arg01, fp
19f44     04 4E 05 F1 | 	add	fp, #4
19f48     A7 1E 62 FC | 	wrlong	local01, fp
19f4c     08 4E 85 F1 | 	sub	fp, #8
19f50     D0 12 BF FD | 	call	#_pop
19f54     FF 1E 02 F6 | 	mov	local01, result3
19f58     0C 4E 05 F1 | 	add	fp, #12
19f5c     A7 FA 61 FC | 	wrlong	result1, fp
19f60     04 4E 05 F1 | 	add	fp, #4
19f64     A7 FC 61 FC | 	wrlong	result2, fp
19f68     04 4E 05 F1 | 	add	fp, #4
19f6c     A7 1E 62 FC | 	wrlong	local01, fp
19f70     08 4E 85 F1 | 	sub	fp, #8
19f74     A7 12 02 F6 | 	mov	arg01, fp
19f78     0C 4E 85 F1 | 	sub	fp, #12
19f7c     88 14 BF FD | 	call	#_converttoint
19f80     FD 1E 02 F6 | 	mov	local01, result1
19f84     A7 12 02 F6 | 	mov	arg01, fp
19f88     7C 14 BF FD | 	call	#_converttoint
19f8c     FD 14 02 F6 | 	mov	arg02, result1
19f90     0F 13 02 F6 | 	mov	arg01, local01
19f94     B8 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
19f98     A7 F0 03 F6 | 	mov	ptra, fp
19f9c     B2 00 A0 FD | 	call	#popregs_
19fa0                 | _do_position_ret
19fa0     2D 00 64 FD | 	ret
19fa4                 | 
19fa4                 | ' 
19fa4                 | ' sub do_poke
19fa4                 | _do_poke
19fa4     01 4A 05 F6 | 	mov	COUNT_, #1
19fa8     A8 00 A0 FD | 	call	#pushregs_
19fac     20 F0 07 F1 | 	add	ptra, #32
19fb0     70 12 BF FD | 	call	#_pop
19fb4     FD 14 02 F6 | 	mov	arg02, result1
19fb8     FE 12 02 F6 | 	mov	arg01, result2
19fbc     FF 1E 02 F6 | 	mov	local01, result3
19fc0     A7 14 62 FC | 	wrlong	arg02, fp
19fc4     04 4E 05 F1 | 	add	fp, #4
19fc8     A7 12 62 FC | 	wrlong	arg01, fp
19fcc     04 4E 05 F1 | 	add	fp, #4
19fd0     A7 1E 62 FC | 	wrlong	local01, fp
19fd4     08 4E 85 F1 | 	sub	fp, #8
19fd8     48 12 BF FD | 	call	#_pop
19fdc     FF 1E 02 F6 | 	mov	local01, result3
19fe0     0C 4E 05 F1 | 	add	fp, #12
19fe4     A7 FA 61 FC | 	wrlong	result1, fp
19fe8     04 4E 05 F1 | 	add	fp, #4
19fec     A7 FC 61 FC | 	wrlong	result2, fp
19ff0     04 4E 05 F1 | 	add	fp, #4
19ff4     A7 1E 62 FC | 	wrlong	local01, fp
19ff8     08 4E 85 F1 | 	sub	fp, #8
19ffc     A7 12 02 F6 | 	mov	arg01, fp
1a000     0C 4E 85 F1 | 	sub	fp, #12
1a004     00 14 BF FD | 	call	#_converttoint
1a008     18 4E 05 F1 | 	add	fp, #24
1a00c     A7 FA 61 FC | 	wrlong	result1, fp
1a010     18 4E 85 F1 | 	sub	fp, #24
1a014     A7 12 02 F6 | 	mov	arg01, fp
1a018     EC 13 BF FD | 	call	#_converttoint
1a01c     1C 4E 05 F1 | 	add	fp, #28
1a020     A7 FA 61 FC | 	wrlong	result1, fp
1a024                 | ' t1=pop() 'value
1a024                 | ' t2=pop() 
1a024                 | ' a=converttoint(t2) : v=converttoint(t1)
1a024                 | ' if a<$80000 then poke a,v else pspoke a,v
1a024     04 4E 85 F1 | 	sub	fp, #4
1a028     A7 1E 02 FB | 	rdlong	local01, fp
1a02c     18 4E 85 F1 | 	sub	fp, #24
1a030     00 04 00 FF 
1a034     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a038     1C 00 90 3D |  if_ae	jmp	#LR__2120
1a03c     18 4E 05 F1 | 	add	fp, #24
1a040     A7 12 02 FB | 	rdlong	arg01, fp
1a044     04 4E 05 F1 | 	add	fp, #4
1a048     A7 14 02 FB | 	rdlong	arg02, fp
1a04c     1C 4E 85 F1 | 	sub	fp, #28
1a050     09 15 42 FC | 	wrbyte	arg02, arg01
1a054     18 00 90 FD | 	jmp	#LR__2121
1a058                 | LR__2120
1a058     18 4E 05 F1 | 	add	fp, #24
1a05c     A7 12 02 FB | 	rdlong	arg01, fp
1a060     04 4E 05 F1 | 	add	fp, #4
1a064     A7 14 02 FB | 	rdlong	arg02, fp
1a068     1C 4E 85 F1 | 	sub	fp, #28
1a06c     30 35 B0 FD | 	call	#_pspoke
1a070                 | LR__2121
1a070     A7 F0 03 F6 | 	mov	ptra, fp
1a074     B2 00 A0 FD | 	call	#popregs_
1a078                 | _do_poke_ret
1a078     2D 00 64 FD | 	ret
1a07c                 | 
1a07c                 | ' 
1a07c                 | ' sub do_dpoke
1a07c                 | _do_dpoke
1a07c     01 4A 05 F6 | 	mov	COUNT_, #1
1a080     A8 00 A0 FD | 	call	#pushregs_
1a084     20 F0 07 F1 | 	add	ptra, #32
1a088     98 11 BF FD | 	call	#_pop
1a08c     FD 14 02 F6 | 	mov	arg02, result1
1a090     FE 12 02 F6 | 	mov	arg01, result2
1a094     FF 1E 02 F6 | 	mov	local01, result3
1a098     A7 14 62 FC | 	wrlong	arg02, fp
1a09c     04 4E 05 F1 | 	add	fp, #4
1a0a0     A7 12 62 FC | 	wrlong	arg01, fp
1a0a4     04 4E 05 F1 | 	add	fp, #4
1a0a8     A7 1E 62 FC | 	wrlong	local01, fp
1a0ac     08 4E 85 F1 | 	sub	fp, #8
1a0b0     70 11 BF FD | 	call	#_pop
1a0b4     FF 1E 02 F6 | 	mov	local01, result3
1a0b8     0C 4E 05 F1 | 	add	fp, #12
1a0bc     A7 FA 61 FC | 	wrlong	result1, fp
1a0c0     04 4E 05 F1 | 	add	fp, #4
1a0c4     A7 FC 61 FC | 	wrlong	result2, fp
1a0c8     04 4E 05 F1 | 	add	fp, #4
1a0cc     A7 1E 62 FC | 	wrlong	local01, fp
1a0d0     08 4E 85 F1 | 	sub	fp, #8
1a0d4     A7 12 02 F6 | 	mov	arg01, fp
1a0d8     0C 4E 85 F1 | 	sub	fp, #12
1a0dc     28 13 BF FD | 	call	#_converttoint
1a0e0     18 4E 05 F1 | 	add	fp, #24
1a0e4     A7 FA 61 FC | 	wrlong	result1, fp
1a0e8     18 4E 85 F1 | 	sub	fp, #24
1a0ec     A7 12 02 F6 | 	mov	arg01, fp
1a0f0     14 13 BF FD | 	call	#_converttoint
1a0f4     1C 4E 05 F1 | 	add	fp, #28
1a0f8     A7 FA 61 FC | 	wrlong	result1, fp
1a0fc                 | ' t1=pop() 'value
1a0fc                 | ' t2=pop() 
1a0fc                 | ' a=converttoint(t2) : v=converttoint(t1)
1a0fc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1a0fc     04 4E 85 F1 | 	sub	fp, #4
1a100     A7 1E 02 FB | 	rdlong	local01, fp
1a104     18 4E 85 F1 | 	sub	fp, #24
1a108     00 04 00 FF 
1a10c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a110     1C 00 90 3D |  if_ae	jmp	#LR__2130
1a114     18 4E 05 F1 | 	add	fp, #24
1a118     A7 12 02 FB | 	rdlong	arg01, fp
1a11c     04 4E 05 F1 | 	add	fp, #4
1a120     A7 14 02 FB | 	rdlong	arg02, fp
1a124     1C 4E 85 F1 | 	sub	fp, #28
1a128     09 15 52 FC | 	wrword	arg02, arg01
1a12c     18 00 90 FD | 	jmp	#LR__2131
1a130                 | LR__2130
1a130     18 4E 05 F1 | 	add	fp, #24
1a134     A7 12 02 FB | 	rdlong	arg01, fp
1a138     04 4E 05 F1 | 	add	fp, #4
1a13c     A7 14 02 FB | 	rdlong	arg02, fp
1a140     1C 4E 85 F1 | 	sub	fp, #28
1a144     10 34 B0 FD | 	call	#_psdpoke
1a148                 | LR__2131
1a148     A7 F0 03 F6 | 	mov	ptra, fp
1a14c     B2 00 A0 FD | 	call	#popregs_
1a150                 | _do_dpoke_ret
1a150     2D 00 64 FD | 	ret
1a154                 | 
1a154                 | ' 
1a154                 | ' sub do_lpoke
1a154                 | _do_lpoke
1a154     01 4A 05 F6 | 	mov	COUNT_, #1
1a158     A8 00 A0 FD | 	call	#pushregs_
1a15c     20 F0 07 F1 | 	add	ptra, #32
1a160     C0 10 BF FD | 	call	#_pop
1a164     FD 14 02 F6 | 	mov	arg02, result1
1a168     FE 12 02 F6 | 	mov	arg01, result2
1a16c     FF 1E 02 F6 | 	mov	local01, result3
1a170     A7 14 62 FC | 	wrlong	arg02, fp
1a174     04 4E 05 F1 | 	add	fp, #4
1a178     A7 12 62 FC | 	wrlong	arg01, fp
1a17c     04 4E 05 F1 | 	add	fp, #4
1a180     A7 1E 62 FC | 	wrlong	local01, fp
1a184     08 4E 85 F1 | 	sub	fp, #8
1a188     98 10 BF FD | 	call	#_pop
1a18c     FF 1E 02 F6 | 	mov	local01, result3
1a190     0C 4E 05 F1 | 	add	fp, #12
1a194     A7 FA 61 FC | 	wrlong	result1, fp
1a198     04 4E 05 F1 | 	add	fp, #4
1a19c     A7 FC 61 FC | 	wrlong	result2, fp
1a1a0     04 4E 05 F1 | 	add	fp, #4
1a1a4     A7 1E 62 FC | 	wrlong	local01, fp
1a1a8     08 4E 85 F1 | 	sub	fp, #8
1a1ac     A7 12 02 F6 | 	mov	arg01, fp
1a1b0     0C 4E 85 F1 | 	sub	fp, #12
1a1b4     50 12 BF FD | 	call	#_converttoint
1a1b8     18 4E 05 F1 | 	add	fp, #24
1a1bc     A7 FA 61 FC | 	wrlong	result1, fp
1a1c0     18 4E 85 F1 | 	sub	fp, #24
1a1c4     A7 12 02 F6 | 	mov	arg01, fp
1a1c8     3C 12 BF FD | 	call	#_converttoint
1a1cc     1C 4E 05 F1 | 	add	fp, #28
1a1d0     A7 FA 61 FC | 	wrlong	result1, fp
1a1d4                 | ' t1=pop() 'value
1a1d4                 | ' t2=pop() 
1a1d4                 | ' a=converttoint(t2) : v=converttoint(t1)
1a1d4                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1a1d4     04 4E 85 F1 | 	sub	fp, #4
1a1d8     A7 1E 02 FB | 	rdlong	local01, fp
1a1dc     18 4E 85 F1 | 	sub	fp, #24
1a1e0     00 04 00 FF 
1a1e4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a1e8     1C 00 90 3D |  if_ae	jmp	#LR__2140
1a1ec     18 4E 05 F1 | 	add	fp, #24
1a1f0     A7 12 02 FB | 	rdlong	arg01, fp
1a1f4     04 4E 05 F1 | 	add	fp, #4
1a1f8     A7 14 02 FB | 	rdlong	arg02, fp
1a1fc     1C 4E 85 F1 | 	sub	fp, #28
1a200     09 15 62 FC | 	wrlong	arg02, arg01
1a204     18 00 90 FD | 	jmp	#LR__2141
1a208                 | LR__2140
1a208     18 4E 05 F1 | 	add	fp, #24
1a20c     A7 12 02 FB | 	rdlong	arg01, fp
1a210     04 4E 05 F1 | 	add	fp, #4
1a214     A7 14 02 FB | 	rdlong	arg02, fp
1a218     1C 4E 85 F1 | 	sub	fp, #28
1a21c     F0 32 B0 FD | 	call	#_pslpoke
1a220                 | LR__2141
1a220     A7 F0 03 F6 | 	mov	ptra, fp
1a224     B2 00 A0 FD | 	call	#popregs_
1a228                 | _do_lpoke_ret
1a228     2D 00 64 FD | 	ret
1a22c                 | 
1a22c                 | ' 
1a22c                 | ' sub do_peek
1a22c                 | _do_peek
1a22c     00 4A 05 F6 | 	mov	COUNT_, #0
1a230     A8 00 A0 FD | 	call	#pushregs_
1a234     14 F0 07 F1 | 	add	ptra, #20
1a238     E8 0F BF FD | 	call	#_pop
1a23c     A7 FA 61 FC | 	wrlong	result1, fp
1a240     04 4E 05 F1 | 	add	fp, #4
1a244     A7 FC 61 FC | 	wrlong	result2, fp
1a248     04 4E 05 F1 | 	add	fp, #4
1a24c     A7 FE 61 FC | 	wrlong	result3, fp
1a250     08 4E 85 F1 | 	sub	fp, #8
1a254     A7 12 02 F6 | 	mov	arg01, fp
1a258     AC 11 BF FD | 	call	#_converttoint
1a25c     0C 4E 05 F1 | 	add	fp, #12
1a260     A7 FA 61 FC | 	wrlong	result1, fp
1a264                 | ' t1=pop()
1a264                 | ' a=converttoint(t1)
1a264                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1a264     0C 4E 85 F1 | 	sub	fp, #12
1a268     00 04 00 FF 
1a26c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a270     1C 00 90 3D |  if_ae	jmp	#LR__2150
1a274     0C 4E 05 F1 | 	add	fp, #12
1a278     A7 12 02 FB | 	rdlong	arg01, fp
1a27c     09 FB C1 FA | 	rdbyte	result1, arg01
1a280     04 4E 05 F1 | 	add	fp, #4
1a284     A7 FA 61 FC | 	wrlong	result1, fp
1a288     10 4E 85 F1 | 	sub	fp, #16
1a28c     20 00 90 FD | 	jmp	#LR__2151
1a290                 | LR__2150
1a290     0C 4E 05 F1 | 	add	fp, #12
1a294     A7 12 02 FB | 	rdlong	arg01, fp
1a298     0C 4E 85 F1 | 	sub	fp, #12
1a29c     48 33 B0 FD | 	call	#_pspeek
1a2a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a2a4     10 4E 05 F1 | 	add	fp, #16
1a2a8     A7 FA 61 FC | 	wrlong	result1, fp
1a2ac     10 4E 85 F1 | 	sub	fp, #16
1a2b0                 | LR__2151
1a2b0     08 4E 05 F1 | 	add	fp, #8
1a2b4     A7 3A 68 FC | 	wrlong	#29, fp
1a2b8     08 4E 05 F1 | 	add	fp, #8
1a2bc     A7 12 02 FB | 	rdlong	arg01, fp
1a2c0     10 4E 85 F1 | 	sub	fp, #16
1a2c4     A7 12 62 FC | 	wrlong	arg01, fp
1a2c8     A7 12 02 F6 | 	mov	arg01, fp
1a2cc     EC 0F BF FD | 	call	#_push
1a2d0     A7 F0 03 F6 | 	mov	ptra, fp
1a2d4     B2 00 A0 FD | 	call	#popregs_
1a2d8                 | _do_peek_ret
1a2d8     2D 00 64 FD | 	ret
1a2dc                 | 
1a2dc                 | ' 
1a2dc                 | ' sub do_dpeek
1a2dc                 | _do_dpeek
1a2dc     00 4A 05 F6 | 	mov	COUNT_, #0
1a2e0     A8 00 A0 FD | 	call	#pushregs_
1a2e4     14 F0 07 F1 | 	add	ptra, #20
1a2e8     38 0F BF FD | 	call	#_pop
1a2ec     A7 FA 61 FC | 	wrlong	result1, fp
1a2f0     04 4E 05 F1 | 	add	fp, #4
1a2f4     A7 FC 61 FC | 	wrlong	result2, fp
1a2f8     04 4E 05 F1 | 	add	fp, #4
1a2fc     A7 FE 61 FC | 	wrlong	result3, fp
1a300     08 4E 85 F1 | 	sub	fp, #8
1a304     A7 12 02 F6 | 	mov	arg01, fp
1a308     FC 10 BF FD | 	call	#_converttoint
1a30c     0C 4E 05 F1 | 	add	fp, #12
1a310     A7 FA 61 FC | 	wrlong	result1, fp
1a314                 | ' t1=pop()
1a314                 | ' a=converttoint(t1)
1a314                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1a314     0C 4E 85 F1 | 	sub	fp, #12
1a318     00 04 00 FF 
1a31c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a320     1C 00 90 3D |  if_ae	jmp	#LR__2160
1a324     0C 4E 05 F1 | 	add	fp, #12
1a328     A7 12 02 FB | 	rdlong	arg01, fp
1a32c     09 FB E1 FA | 	rdword	result1, arg01
1a330     04 4E 05 F1 | 	add	fp, #4
1a334     A7 FA 61 FC | 	wrlong	result1, fp
1a338     10 4E 85 F1 | 	sub	fp, #16
1a33c     1C 00 90 FD | 	jmp	#LR__2161
1a340                 | LR__2160
1a340     0C 4E 05 F1 | 	add	fp, #12
1a344     A7 12 02 FB | 	rdlong	arg01, fp
1a348     0C 4E 85 F1 | 	sub	fp, #12
1a34c     48 33 B0 FD | 	call	#_psdpeek
1a350     10 4E 05 F1 | 	add	fp, #16
1a354     A7 FA 61 FC | 	wrlong	result1, fp
1a358     10 4E 85 F1 | 	sub	fp, #16
1a35c                 | LR__2161
1a35c     08 4E 05 F1 | 	add	fp, #8
1a360     A7 3A 68 FC | 	wrlong	#29, fp
1a364     08 4E 05 F1 | 	add	fp, #8
1a368     A7 12 02 FB | 	rdlong	arg01, fp
1a36c     10 4E 85 F1 | 	sub	fp, #16
1a370     A7 12 62 FC | 	wrlong	arg01, fp
1a374     A7 12 02 F6 | 	mov	arg01, fp
1a378     40 0F BF FD | 	call	#_push
1a37c     A7 F0 03 F6 | 	mov	ptra, fp
1a380     B2 00 A0 FD | 	call	#popregs_
1a384                 | _do_dpeek_ret
1a384     2D 00 64 FD | 	ret
1a388                 | 
1a388                 | ' 
1a388                 | ' 
1a388                 | ' sub do_lpeek
1a388                 | _do_lpeek
1a388     00 4A 05 F6 | 	mov	COUNT_, #0
1a38c     A8 00 A0 FD | 	call	#pushregs_
1a390     14 F0 07 F1 | 	add	ptra, #20
1a394     8C 0E BF FD | 	call	#_pop
1a398     A7 FA 61 FC | 	wrlong	result1, fp
1a39c     04 4E 05 F1 | 	add	fp, #4
1a3a0     A7 FC 61 FC | 	wrlong	result2, fp
1a3a4     04 4E 05 F1 | 	add	fp, #4
1a3a8     A7 FE 61 FC | 	wrlong	result3, fp
1a3ac     08 4E 85 F1 | 	sub	fp, #8
1a3b0     A7 12 02 F6 | 	mov	arg01, fp
1a3b4     50 10 BF FD | 	call	#_converttoint
1a3b8     0C 4E 05 F1 | 	add	fp, #12
1a3bc     A7 FA 61 FC | 	wrlong	result1, fp
1a3c0                 | ' t1=pop()
1a3c0                 | ' a=converttoint(t1)
1a3c0                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1a3c0     0C 4E 85 F1 | 	sub	fp, #12
1a3c4     00 04 00 FF 
1a3c8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a3cc     1C 00 90 3D |  if_ae	jmp	#LR__2170
1a3d0     0C 4E 05 F1 | 	add	fp, #12
1a3d4     A7 12 02 FB | 	rdlong	arg01, fp
1a3d8     09 FB 01 FB | 	rdlong	result1, arg01
1a3dc     04 4E 05 F1 | 	add	fp, #4
1a3e0     A7 FA 61 FC | 	wrlong	result1, fp
1a3e4     10 4E 85 F1 | 	sub	fp, #16
1a3e8     1C 00 90 FD | 	jmp	#LR__2171
1a3ec                 | LR__2170
1a3ec     0C 4E 05 F1 | 	add	fp, #12
1a3f0     A7 12 02 FB | 	rdlong	arg01, fp
1a3f4     0C 4E 85 F1 | 	sub	fp, #12
1a3f8     44 32 B0 FD | 	call	#_pslpeek
1a3fc     10 4E 05 F1 | 	add	fp, #16
1a400     A7 FA 61 FC | 	wrlong	result1, fp
1a404     10 4E 85 F1 | 	sub	fp, #16
1a408                 | LR__2171
1a408     08 4E 05 F1 | 	add	fp, #8
1a40c     A7 3A 68 FC | 	wrlong	#29, fp
1a410     08 4E 05 F1 | 	add	fp, #8
1a414     A7 12 02 FB | 	rdlong	arg01, fp
1a418     10 4E 85 F1 | 	sub	fp, #16
1a41c     A7 12 62 FC | 	wrlong	arg01, fp
1a420     A7 12 02 F6 | 	mov	arg01, fp
1a424     94 0E BF FD | 	call	#_push
1a428     A7 F0 03 F6 | 	mov	ptra, fp
1a42c     B2 00 A0 FD | 	call	#popregs_
1a430                 | _do_lpeek_ret
1a430     2D 00 64 FD | 	ret
1a434                 | 
1a434                 | ' 
1a434                 | ' sub do_fre
1a434                 | _do_fre
1a434     01 4A 05 F6 | 	mov	COUNT_, #1
1a438     A8 00 A0 FD | 	call	#pushregs_
1a43c     0C F0 07 F1 | 	add	ptra, #12
1a440     51 00 00 FF 
1a444     AC E5 05 F1 | 	add	objptr, ##41900
1a448     F2 12 02 FB | 	rdlong	arg01, objptr
1a44c     0E 00 00 FF 
1a450     50 E5 85 F1 | 	sub	objptr, ##7504
1a454     F2 1E 02 FB | 	rdlong	local01, objptr
1a458     0F 13 82 F1 | 	sub	arg01, local01
1a45c     0E 00 00 FF 
1a460     BC E5 05 F1 | 	add	objptr, ##7612
1a464     F2 12 62 FC | 	wrlong	arg01, objptr
1a468     08 4E 05 F1 | 	add	fp, #8
1a46c     A7 3A 68 FC | 	wrlong	#29, fp
1a470     08 4E 85 F1 | 	sub	fp, #8
1a474     F2 1E 02 FB | 	rdlong	local01, objptr
1a478     52 00 00 FF 
1a47c     18 E4 85 F1 | 	sub	objptr, ##42008
1a480     A7 1E 62 FC | 	wrlong	local01, fp
1a484     A7 12 02 F6 | 	mov	arg01, fp
1a488     30 0E BF FD | 	call	#_push
1a48c     A7 F0 03 F6 | 	mov	ptra, fp
1a490     B2 00 A0 FD | 	call	#popregs_
1a494                 | _do_fre_ret
1a494     2D 00 64 FD | 	ret
1a498                 | 
1a498                 | ' 
1a498                 | ' sub do_adr
1a498                 | _do_adr
1a498                 | _do_adr_ret
1a498     2D 00 64 FD | 	ret
1a49c                 | 
1a49c                 | ' 
1a49c                 | ' sub do_getnotevalue
1a49c                 | _do_getnotevalue
1a49c     01 4A 05 F6 | 	mov	COUNT_, #1
1a4a0     A8 00 A0 FD | 	call	#pushregs_
1a4a4     1C F0 07 F1 | 	add	ptra, #28
1a4a8     78 0D BF FD | 	call	#_pop
1a4ac     FF 14 02 F6 | 	mov	arg02, result3
1a4b0     10 4E 05 F1 | 	add	fp, #16
1a4b4     A7 FA 61 FC | 	wrlong	result1, fp
1a4b8     04 4E 05 F1 | 	add	fp, #4
1a4bc     A7 FC 61 FC | 	wrlong	result2, fp
1a4c0     04 4E 05 F1 | 	add	fp, #4
1a4c4     A7 14 62 FC | 	wrlong	arg02, fp
1a4c8     08 4E 85 F1 | 	sub	fp, #8
1a4cc     A7 12 02 F6 | 	mov	arg01, fp
1a4d0     10 4E 85 F1 | 	sub	fp, #16
1a4d4     30 0F BF FD | 	call	#_converttoint
1a4d8     FD 14 52 F6 | 	abs	arg02, result1 wc
1a4dc     0C 14 16 FD | 	qdiv	arg02, #12
1a4e0     0C 4E 05 F1 | 	add	fp, #12
1a4e4     A7 FA 61 FC | 	wrlong	result1, fp
1a4e8     14 00 00 FF 
1a4ec     D8 E4 05 F1 | 	add	objptr, ##10456
1a4f0     08 4E 85 F1 | 	sub	fp, #8
1a4f4     19 14 62 FD | 	getqy	arg02
1a4f8     0A 15 82 F6 | 	negc	arg02, arg02
1a4fc     02 14 66 F0 | 	shl	arg02, #2
1a500     F2 14 02 F1 | 	add	arg02, objptr
1a504     0A 15 02 FB | 	rdlong	arg02, arg02
1a508     A7 14 62 FC | 	wrlong	arg02, fp
1a50c     08 4E 05 F1 | 	add	fp, #8
1a510     A7 14 02 FB | 	rdlong	arg02, fp
1a514     0A 15 52 F6 | 	abs	arg02, arg02 wc
1a518     0C 14 16 FD | 	qdiv	arg02, #12
1a51c     0C 4E 85 F1 | 	sub	fp, #12
1a520     14 00 00 FF 
1a524     D8 E4 85 F1 | 	sub	objptr, ##10456
1a528     18 14 62 FD | 	getqx	arg02
1a52c     0A 13 82 F6 | 	negc	arg01, arg02
1a530     09 13 52 F6 | 	abs	arg01, arg01 wc
1a534     1F 1E C6 C9 |  if_b	decod	local01, #31
1a538     00 1E 06 36 |  if_ae	mov	local01, #0
1a53c     AC 8B B0 FD | 	call	#__system___float_fromuns
1a540     0F FB 61 F5 | 	xor	result1, local01
1a544     08 4E 05 F1 | 	add	fp, #8
1a548     A7 FA 61 FC | 	wrlong	result1, fp
1a54c     FD 14 02 F6 | 	mov	arg02, result1
1a550     08 4E 85 F1 | 	sub	fp, #8
1a554     1E 12 C6 F9 | 	decod	arg01, #30
1a558     9C 9E B0 FD | 	call	#__system____builtin_powf
1a55c     FD 12 02 F6 | 	mov	arg01, result1
1a560     04 4E 05 F1 | 	add	fp, #4
1a564     A7 14 02 FB | 	rdlong	arg02, fp
1a568     04 4E 85 F1 | 	sub	fp, #4
1a56c     80 8F B0 FD | 	call	#__system___float_mul
1a570     A7 FA 61 FC | 	wrlong	result1, fp
1a574     10 4E 05 F1 | 	add	fp, #16
1a578     A7 FA 61 FC | 	wrlong	result1, fp
1a57c     08 4E 05 F1 | 	add	fp, #8
1a580     A7 3C 68 FC | 	wrlong	#30, fp
1a584     08 4E 85 F1 | 	sub	fp, #8
1a588     A7 12 02 F6 | 	mov	arg01, fp
1a58c     10 4E 85 F1 | 	sub	fp, #16
1a590     28 0D BF FD | 	call	#_push
1a594     A7 F0 03 F6 | 	mov	ptra, fp
1a598     B2 00 A0 FD | 	call	#popregs_
1a59c                 | _do_getnotevalue_ret
1a59c     2D 00 64 FD | 	ret
1a5a0                 | 
1a5a0                 | ' 
1a5a0                 | ' 
1a5a0                 | ' sub do_waitms
1a5a0                 | _do_waitms
1a5a0     01 4A 05 F6 | 	mov	COUNT_, #1
1a5a4     A8 00 A0 FD | 	call	#pushregs_
1a5a8     18 F0 07 F1 | 	add	ptra, #24
1a5ac     74 0C BF FD | 	call	#_pop
1a5b0     A7 FA 61 FC | 	wrlong	result1, fp
1a5b4     04 4E 05 F1 | 	add	fp, #4
1a5b8     A7 FC 61 FC | 	wrlong	result2, fp
1a5bc     04 4E 05 F1 | 	add	fp, #4
1a5c0     A7 FE 61 FC | 	wrlong	result3, fp
1a5c4                 | ' 
1a5c4                 | ' t1=pop() 'value
1a5c4                 | ' 
1a5c4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1a5c4     08 4E 85 F1 | 	sub	fp, #8
1a5c8     1C FE 0D F2 | 	cmp	result3, #28 wz
1a5cc     08 4E 05 51 |  if_ne	add	fp, #8
1a5d0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a5d4     08 4E 85 51 |  if_ne	sub	fp, #8
1a5d8     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1a5dc     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a5e0     0C 4E 05 A1 |  if_e	add	fp, #12
1a5e4     A7 12 62 AC |  if_e	wrlong	arg01, fp
1a5e8     0C 4E 85 A1 |  if_e	sub	fp, #12
1a5ec     14 00 90 AD |  if_e	jmp	#LR__2180
1a5f0     A7 12 02 F6 | 	mov	arg01, fp
1a5f4     10 0E BF FD | 	call	#_converttoint
1a5f8     0C 4E 05 F1 | 	add	fp, #12
1a5fc     A7 FA 61 FC | 	wrlong	result1, fp
1a600     0C 4E 85 F1 | 	sub	fp, #12
1a604                 | LR__2180
1a604                 | ' if t<0 then return
1a604     0C 4E 05 F1 | 	add	fp, #12
1a608     A7 12 02 FB | 	rdlong	arg01, fp
1a60c     0C 4E 85 F1 | 	sub	fp, #12
1a610     00 12 56 F2 | 	cmps	arg01, #0 wc
1a614     B8 00 90 CD |  if_b	jmp	#LR__2185
1a618                 | ' if t < 5000 then 
1a618     0C 4E 05 F1 | 	add	fp, #12
1a61c     A7 12 02 FB | 	rdlong	arg01, fp
1a620     0C 4E 85 F1 | 	sub	fp, #12
1a624     09 00 00 FF 
1a628     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1a62c     14 00 90 3D |  if_ae	jmp	#LR__2181
1a630     0C 4E 05 F1 | 	add	fp, #12
1a634     A7 12 02 FB | 	rdlong	arg01, fp
1a638     0C 4E 85 F1 | 	sub	fp, #12
1a63c     F0 65 B0 FD | 	call	#__system___waitms
1a640     8C 00 90 FD | 	jmp	#LR__2184
1a644                 | LR__2181
1a644     10 4E 05 F1 | 	add	fp, #16
1a648     A7 02 68 FC | 	wrlong	#1, fp
1a64c     04 4E 85 F1 | 	sub	fp, #4
1a650     A7 12 02 FB | 	rdlong	arg01, fp
1a654     09 13 52 F6 | 	abs	arg01, arg01 wc
1a658     09 00 00 FF 
1a65c     88 13 16 FD | 	qdiv	arg01, ##5000
1a660                 | '   for i=1 to t/5000
1a660     0C 4E 85 F1 | 	sub	fp, #12
1a664     18 1E 62 FD | 	getqx	local01
1a668     0F 1F 82 F6 | 	negc	local01, local01
1a66c     01 1E 06 F1 | 	add	local01, #1
1a670                 | LR__2182
1a670     10 4E 05 F1 | 	add	fp, #16
1a674     A7 12 02 FB | 	rdlong	arg01, fp
1a678     10 4E 85 F1 | 	sub	fp, #16
1a67c     0F 13 52 F2 | 	cmps	arg01, local01 wc
1a680     28 00 90 3D |  if_ae	jmp	#LR__2183
1a684     0C 4E 05 F1 | 	add	fp, #12
1a688     A7 12 02 FB | 	rdlong	arg01, fp
1a68c     0C 4E 85 F1 | 	sub	fp, #12
1a690     9C 65 B0 FD | 	call	#__system___waitms
1a694     10 4E 05 F1 | 	add	fp, #16
1a698     A7 12 02 FB | 	rdlong	arg01, fp
1a69c     01 12 06 F1 | 	add	arg01, #1
1a6a0     A7 12 62 FC | 	wrlong	arg01, fp
1a6a4     10 4E 85 F1 | 	sub	fp, #16
1a6a8     C4 FF 9F FD | 	jmp	#LR__2182
1a6ac                 | LR__2183
1a6ac     0C 4E 05 F1 | 	add	fp, #12
1a6b0     A7 1E 02 FB | 	rdlong	local01, fp
1a6b4     0F 1F 52 F6 | 	abs	local01, local01 wc
1a6b8     09 00 00 FF 
1a6bc     88 1F 16 FD | 	qdiv	local01, ##5000
1a6c0     0C 4E 85 F1 | 	sub	fp, #12
1a6c4     19 1E 62 FD | 	getqy	local01
1a6c8     0F 13 82 F6 | 	negc	arg01, local01
1a6cc     60 65 B0 FD | 	call	#__system___waitms
1a6d0                 | LR__2184
1a6d0                 | LR__2185
1a6d0     A7 F0 03 F6 | 	mov	ptra, fp
1a6d4     B2 00 A0 FD | 	call	#popregs_
1a6d8                 | _do_waitms_ret
1a6d8     2D 00 64 FD | 	ret
1a6dc                 | 
1a6dc                 | ' 
1a6dc                 | ' sub do_waitvbl
1a6dc                 | _do_waitvbl
1a6dc     01 12 06 F6 | 	mov	arg01, #1
1a6e0     0C 49 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a6e4                 | _do_waitvbl_ret
1a6e4     2D 00 64 FD | 	ret
1a6e8                 | 
1a6e8                 | ' 
1a6e8                 | ' sub do_waitclock
1a6e8                 | _do_waitclock
1a6e8     51 00 00 FF 
1a6ec     A8 E5 05 F1 | 	add	objptr, ##41896
1a6f0     F2 00 02 FB | 	rdlong	_var01, objptr
1a6f4                 | ' c=hkcnt
1a6f4                 | ' do: loop until hkcnt<>c
1a6f4                 | LR__2190
1a6f4     F2 02 02 FB | 	rdlong	_var02, objptr
1a6f8     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a6fc     F4 FF 9F AD |  if_e	jmp	#LR__2190
1a700     51 00 00 FF 
1a704     A8 E5 85 F1 | 	sub	objptr, ##41896
1a708                 | _do_waitclock_ret
1a708     2D 00 64 FD | 	ret
1a70c                 | 
1a70c                 | ' 
1a70c                 | ' 
1a70c                 | ' 
1a70c                 | ' sub do_dir
1a70c                 | _do_dir
1a70c     13 4A 05 F6 | 	mov	COUNT_, #19
1a710     A8 00 A0 FD | 	call	#pushregs_
1a714     01 00 00 FF 
1a718     38 F0 07 F1 | 	add	ptra, ##568
1a71c     85 01 00 FF 
1a720     3D 12 06 F6 | 	mov	arg01, ##@LR__5519
1a724     A0 68 B0 FD | 	call	#__system___chdir
1a728                 | ' 
1a728                 | ' chdir("/sd/bas")       ' set working directory
1a728                 | ' print "Working directory: "; currentdir$ 
1a728     00 12 06 F6 | 	mov	arg01, #0
1a72c     70 BC B0 FD | 	call	#__system___getiolock_0540
1a730     FD 12 02 F6 | 	mov	arg01, result1
1a734     04 62 B0 FD | 	call	#__system___lockmem
1a738     85 01 00 FF 
1a73c     45 14 06 F6 | 	mov	arg02, ##@LR__5520
1a740     00 12 06 F6 | 	mov	arg01, #0
1a744     00 16 06 F6 | 	mov	arg03, #0
1a748     E4 6E B0 FD | 	call	#__system___basic_print_string
1a74c     4A 00 00 FF 
1a750     94 E4 05 F1 | 	add	objptr, ##38036
1a754     F2 14 02 FB | 	rdlong	arg02, objptr
1a758     4A 00 00 FF 
1a75c     94 E4 85 F1 | 	sub	objptr, ##38036
1a760     00 12 06 F6 | 	mov	arg01, #0
1a764     00 16 06 F6 | 	mov	arg03, #0
1a768     C4 6E B0 FD | 	call	#__system___basic_print_string
1a76c     00 12 06 F6 | 	mov	arg01, #0
1a770     0A 14 06 F6 | 	mov	arg02, #10
1a774     00 16 06 F6 | 	mov	arg03, #0
1a778     5C 6E B0 FD | 	call	#__system___basic_print_char
1a77c     01 1E 06 F6 | 	mov	local01, #1
1a780     00 12 06 F6 | 	mov	arg01, #0
1a784     18 BC B0 FD | 	call	#__system___getiolock_0540
1a788     FD 00 68 FC | 	wrlong	#0, result1
1a78c     00 20 06 F6 | 	mov	local02, #0
1a790     00 22 06 F6 | 	mov	local03, #0
1a794                 | ' px=0
1a794                 | ' for i=0 to 127: filelist(i)="" : next i
1a794     00 24 06 F6 | 	mov	local04, #0
1a798     1C 4E 05 F1 | 	add	fp, #28
1a79c     97 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a7a0                 | LR__2200
1a7a0     12 27 02 F6 | 	mov	local05, local04
1a7a4     02 26 66 F0 | 	shl	local05, #2
1a7a8     A7 26 02 F1 | 	add	local05, fp
1a7ac     85 01 00 FF 
1a7b0     59 28 06 F6 | 	mov	local06, ##@LR__5521
1a7b4     13 29 62 FC | 	wrlong	local06, local05
1a7b8     01 24 06 F1 | 	add	local04, #1
1a7bc     80 24 56 F2 | 	cmps	local04, #128 wc
1a7c0     DC FF 9F CD |  if_b	jmp	#LR__2200
1a7c4                 | LR__2201
1a7c4     1C 4E 85 F1 | 	sub	fp, #28
1a7c8     85 01 00 FF 
1a7cc     5A 12 06 F6 | 	mov	arg01, ##@LR__5522
1a7d0     10 14 06 F6 | 	mov	arg02, #16
1a7d4     00 BD B0 FD | 	call	#__system___basic_dir
1a7d8     FD 2A 02 F6 | 	mov	local07, result1
1a7dc     00 2C 06 F6 | 	mov	local08, #0
1a7e0                 | ' filename=dir$("*", fbDirectory)
1a7e0                 | ' n=0
1a7e0                 | ' while filename <> "" andalso filename <> nil andalso n<128
1a7e0                 | LR__2202
1a7e0     85 01 00 FF 
1a7e4     5C 2E 06 F6 | 	mov	local09, ##@LR__5523
1a7e8     15 13 02 F6 | 	mov	arg01, local07
1a7ec     17 15 02 F6 | 	mov	arg02, local09
1a7f0     70 61 B0 FD | 	call	#__system___string_cmp
1a7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a7f8     68 00 90 AD |  if_e	jmp	#LR__2203
1a7fc     00 2E 06 F6 | 	mov	local09, #0
1a800     15 13 02 F6 | 	mov	arg01, local07
1a804     00 14 06 F6 | 	mov	arg02, #0
1a808     58 61 B0 FD | 	call	#__system___string_cmp
1a80c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a810     50 00 90 AD |  if_e	jmp	#LR__2203
1a814     80 2C 56 F2 | 	cmps	local08, #128 wc
1a818     48 00 90 3D |  if_ae	jmp	#LR__2203
1a81c     85 01 00 FF 
1a820     5D 12 06 F6 | 	mov	arg01, ##@LR__5524
1a824     15 15 02 F6 | 	mov	arg02, local07
1a828     6C 61 B0 FD | 	call	#__system___string_concat
1a82c     FD 2A 02 F6 | 	mov	local07, result1
1a830     16 27 02 F6 | 	mov	local05, local08
1a834     02 26 66 F0 | 	shl	local05, #2
1a838     1C 4E 05 F1 | 	add	fp, #28
1a83c     A7 26 02 F1 | 	add	local05, fp
1a840     13 2B 62 FC | 	wrlong	local07, local05
1a844     01 2C 06 F1 | 	add	local08, #1
1a848     00 26 06 F6 | 	mov	local05, #0
1a84c     00 12 06 F6 | 	mov	arg01, #0
1a850     00 14 06 F6 | 	mov	arg02, #0
1a854     1C 4E 85 F1 | 	sub	fp, #28
1a858     7C BC B0 FD | 	call	#__system___basic_dir
1a85c     FD 2A 02 F6 | 	mov	local07, result1
1a860     7C FF 9F FD | 	jmp	#LR__2202
1a864                 | LR__2203
1a864                 | ' ' now sort this
1a864                 | ' 
1a864                 | ' for i =0 to n-1
1a864     00 24 06 F6 | 	mov	local04, #0
1a868     16 31 02 F6 | 	mov	local10, local08
1a86c                 | LR__2204
1a86c     18 25 52 F2 | 	cmps	local04, local10 wc
1a870     DC 00 90 3D |  if_ae	jmp	#LR__2208
1a874     00 32 06 F6 | 	mov	local11, #0
1a878                 | '   swapped=false
1a878                 | '   for j=0 to n-i-2
1a878     00 34 06 F6 | 	mov	local12, #0
1a87c     16 37 02 F6 | 	mov	local13, local08
1a880     12 37 82 F1 | 	sub	local13, local04
1a884     01 36 86 F1 | 	sub	local13, #1
1a888                 | LR__2205
1a888     1B 35 52 F2 | 	cmps	local12, local13 wc
1a88c     B0 00 90 3D |  if_ae	jmp	#LR__2207
1a890                 | '     if filelist(j) > filelist(j+1) then
1a890     1A 2F 02 F6 | 	mov	local09, local12
1a894     02 2E 66 F0 | 	shl	local09, #2
1a898     1C 4E 05 F1 | 	add	fp, #28
1a89c     A7 2E 02 F1 | 	add	local09, fp
1a8a0     17 13 02 FB | 	rdlong	arg01, local09
1a8a4     1A 2F 02 F6 | 	mov	local09, local12
1a8a8     01 2E 06 F1 | 	add	local09, #1
1a8ac     17 29 02 F6 | 	mov	local06, local09
1a8b0     02 28 66 F0 | 	shl	local06, #2
1a8b4     A7 1E 02 F6 | 	mov	local01, fp
1a8b8     A7 28 02 F1 | 	add	local06, fp
1a8bc     14 27 02 FB | 	rdlong	local05, local06
1a8c0     13 15 02 F6 | 	mov	arg02, local05
1a8c4     1C 4E 85 F1 | 	sub	fp, #28
1a8c8     98 60 B0 FD | 	call	#__system___string_cmp
1a8cc     01 FA 55 F2 | 	cmps	result1, #1 wc
1a8d0     64 00 90 CD |  if_b	jmp	#LR__2206
1a8d4     1A 2F 02 F6 | 	mov	local09, local12
1a8d8     01 2E 06 F1 | 	add	local09, #1
1a8dc     02 2E 66 F0 | 	shl	local09, #2
1a8e0     1C 4E 05 F1 | 	add	fp, #28
1a8e4     A7 2E 02 F1 | 	add	local09, fp
1a8e8     17 33 02 FB | 	rdlong	local11, local09
1a8ec     1A 29 02 F6 | 	mov	local06, local12
1a8f0     02 28 66 F0 | 	shl	local06, #2
1a8f4     A7 28 02 F1 | 	add	local06, fp
1a8f8     14 27 02 FB | 	rdlong	local05, local06
1a8fc     1A 2F 02 F6 | 	mov	local09, local12
1a900     17 29 02 F6 | 	mov	local06, local09
1a904     02 28 66 F0 | 	shl	local06, #2
1a908     A7 1E 02 F6 | 	mov	local01, fp
1a90c     A7 28 02 F1 | 	add	local06, fp
1a910     14 33 62 FC | 	wrlong	local11, local06
1a914     1A 21 02 F6 | 	mov	local02, local12
1a918     01 20 06 F1 | 	add	local02, #1
1a91c     10 39 02 F6 | 	mov	local14, local02
1a920     02 38 66 F0 | 	shl	local14, #2
1a924     A7 3A 02 F6 | 	mov	local15, fp
1a928     A7 38 02 F1 | 	add	local14, fp
1a92c     1C 27 62 FC | 	wrlong	local05, local14
1a930     01 32 66 F6 | 	neg	local11, #1
1a934     1C 4E 85 F1 | 	sub	fp, #28
1a938                 | LR__2206
1a938     01 34 06 F1 | 	add	local12, #1
1a93c     48 FF 9F FD | 	jmp	#LR__2205
1a940                 | LR__2207
1a940                 | ' if not swapped then exit for
1a940     19 3D 22 F6 | 	not	local16, local11
1a944     00 3C 0E F2 | 	cmp	local16, #0 wz
1a948     01 24 06 A1 |  if_e	add	local04, #1
1a94c     1C FF 9F AD |  if_e	jmp	#LR__2204
1a950                 | LR__2208
1a950                 | ' for i=0 to n-1
1a950     00 24 06 F6 | 	mov	local04, #0
1a954     16 3F 02 F6 | 	mov	local17, local08
1a958                 | LR__2209
1a958     1F 25 52 F2 | 	cmps	local04, local17 wc
1a95c     94 00 90 3D |  if_ae	jmp	#LR__2211
1a960                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1a960     00 12 06 F6 | 	mov	arg01, #0
1a964     38 BA B0 FD | 	call	#__system___getiolock_0540
1a968     FD 12 02 F6 | 	mov	arg01, result1
1a96c     CC 5F B0 FD | 	call	#__system___lockmem
1a970     12 21 02 F6 | 	mov	local02, local04
1a974     02 20 66 F0 | 	shl	local02, #2
1a978     1C 4E 05 F1 | 	add	fp, #28
1a97c     A7 38 02 F6 | 	mov	local14, fp
1a980     A7 20 02 F1 | 	add	local02, fp
1a984     10 15 02 FB | 	rdlong	arg02, local02
1a988     00 1E 06 F6 | 	mov	local01, #0
1a98c     00 12 06 F6 | 	mov	arg01, #0
1a990     00 16 06 F6 | 	mov	arg03, #0
1a994     1C 4E 85 F1 | 	sub	fp, #28
1a998     94 6C B0 FD | 	call	#__system___basic_print_string
1a99c     00 12 06 F6 | 	mov	arg01, #0
1a9a0     FC B9 B0 FD | 	call	#__system___getiolock_0540
1a9a4     FD 00 68 FC | 	wrlong	#0, result1
1a9a8     40 22 06 F1 | 	add	local03, #64
1a9ac     11 13 02 F6 | 	mov	arg01, local03
1a9b0     D8 45 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a9b4     00 23 56 F2 | 	cmps	local03, #256 wc
1a9b8     30 00 90 CD |  if_b	jmp	#LR__2210
1a9bc     00 22 06 F6 | 	mov	local03, #0
1a9c0     00 12 06 F6 | 	mov	arg01, #0
1a9c4     D8 B9 B0 FD | 	call	#__system___getiolock_0540
1a9c8     FD 12 02 F6 | 	mov	arg01, result1
1a9cc     6C 5F B0 FD | 	call	#__system___lockmem
1a9d0     00 12 06 F6 | 	mov	arg01, #0
1a9d4     0A 14 06 F6 | 	mov	arg02, #10
1a9d8     00 16 06 F6 | 	mov	arg03, #0
1a9dc     F8 6B B0 FD | 	call	#__system___basic_print_char
1a9e0     00 12 06 F6 | 	mov	arg01, #0
1a9e4     B8 B9 B0 FD | 	call	#__system___getiolock_0540
1a9e8     FD 00 68 FC | 	wrlong	#0, result1
1a9ec                 | LR__2210
1a9ec     01 24 06 F1 | 	add	local04, #1
1a9f0     64 FF 9F FD | 	jmp	#LR__2209
1a9f4                 | LR__2211
1a9f4                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1a9f4     80 2C 56 F2 | 	cmps	local08, #128 wc
1a9f8     44 00 90 CD |  if_b	jmp	#LR__2212
1a9fc     00 12 06 F6 | 	mov	arg01, #0
1aa00     9C B9 B0 FD | 	call	#__system___getiolock_0540
1aa04     FD 12 02 F6 | 	mov	arg01, result1
1aa08     30 5F B0 FD | 	call	#__system___lockmem
1aa0c     85 01 00 FF 
1aa10     64 14 06 F6 | 	mov	arg02, ##@LR__5525
1aa14     00 12 06 F6 | 	mov	arg01, #0
1aa18     00 16 06 F6 | 	mov	arg03, #0
1aa1c     10 6C B0 FD | 	call	#__system___basic_print_string
1aa20     00 12 06 F6 | 	mov	arg01, #0
1aa24     0A 14 06 F6 | 	mov	arg02, #10
1aa28     00 16 06 F6 | 	mov	arg03, #0
1aa2c     A8 6B B0 FD | 	call	#__system___basic_print_char
1aa30     00 12 06 F6 | 	mov	arg01, #0
1aa34     68 B9 B0 FD | 	call	#__system___getiolock_0540
1aa38     FD 00 68 FC | 	wrlong	#0, result1
1aa3c     00 1E 06 F6 | 	mov	local01, #0
1aa40                 | LR__2212
1aa40                 | ' print
1aa40     00 12 06 F6 | 	mov	arg01, #0
1aa44     58 B9 B0 FD | 	call	#__system___getiolock_0540
1aa48     FD 12 02 F6 | 	mov	arg01, result1
1aa4c     EC 5E B0 FD | 	call	#__system___lockmem
1aa50     00 12 06 F6 | 	mov	arg01, #0
1aa54     0A 14 06 F6 | 	mov	arg02, #10
1aa58     00 16 06 F6 | 	mov	arg03, #0
1aa5c     78 6B B0 FD | 	call	#__system___basic_print_char
1aa60     00 12 06 F6 | 	mov	arg01, #0
1aa64     38 B9 B0 FD | 	call	#__system___getiolock_0540
1aa68     FD 00 68 FC | 	wrlong	#0, result1
1aa6c     00 28 06 F6 | 	mov	local06, #0
1aa70     00 2C 06 F6 | 	mov	local08, #0
1aa74     00 22 06 F6 | 	mov	local03, #0
1aa78                 | ' return cursor_y
1aa78     3E E4 05 F1 | 	add	objptr, #62
1aa7c     F2 40 C2 FA | 	rdbyte	local18, objptr
1aa80     3E E4 85 F1 | 	sub	objptr, #62
1aa84     85 01 00 FF 
1aa88     96 12 06 F6 | 	mov	arg01, ##@LR__5526
1aa8c     21 14 06 F6 | 	mov	arg02, #33
1aa90     44 BA B0 FD | 	call	#__system___basic_dir
1aa94     FD 2A 02 F6 | 	mov	local07, result1
1aa98                 | ' n=0
1aa98                 | ' 
1aa98                 | ' px=0: py=v.getcursory()
1aa98                 | ' 
1aa98                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1aa98                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1aa98                 | LR__2213
1aa98     85 01 00 FF 
1aa9c     98 2E 06 F6 | 	mov	local09, ##@LR__5527
1aaa0     15 13 02 F6 | 	mov	arg01, local07
1aaa4     17 15 02 F6 | 	mov	arg02, local09
1aaa8     B8 5E B0 FD | 	call	#__system___string_cmp
1aaac     00 FA 0D F2 | 	cmp	result1, #0 wz
1aab0     54 00 90 AD |  if_e	jmp	#LR__2214
1aab4     00 2E 06 F6 | 	mov	local09, #0
1aab8     15 13 02 F6 | 	mov	arg01, local07
1aabc     00 14 06 F6 | 	mov	arg02, #0
1aac0     A0 5E B0 FD | 	call	#__system___string_cmp
1aac4     00 FA 0D F2 | 	cmp	result1, #0 wz
1aac8     3C 00 90 AD |  if_e	jmp	#LR__2214
1aacc     80 2C 56 F2 | 	cmps	local08, #128 wc
1aad0     34 00 90 3D |  if_ae	jmp	#LR__2214
1aad4     16 27 02 F6 | 	mov	local05, local08
1aad8     02 26 66 F0 | 	shl	local05, #2
1aadc     1C 4E 05 F1 | 	add	fp, #28
1aae0     A7 26 02 F1 | 	add	local05, fp
1aae4     13 2B 62 FC | 	wrlong	local07, local05
1aae8     01 2C 06 F1 | 	add	local08, #1
1aaec     00 26 06 F6 | 	mov	local05, #0
1aaf0     00 12 06 F6 | 	mov	arg01, #0
1aaf4     00 14 06 F6 | 	mov	arg02, #0
1aaf8     1C 4E 85 F1 | 	sub	fp, #28
1aafc     D8 B9 B0 FD | 	call	#__system___basic_dir
1ab00     FD 2A 02 F6 | 	mov	local07, result1
1ab04     90 FF 9F FD | 	jmp	#LR__2213
1ab08                 | LR__2214
1ab08                 | ' 
1ab08                 | ' for i =0 to n-1
1ab08     00 24 06 F6 | 	mov	local04, #0
1ab0c                 | LR__2215
1ab0c     16 25 52 F2 | 	cmps	local04, local08 wc
1ab10     D8 00 90 3D |  if_ae	jmp	#LR__2219
1ab14     00 32 06 F6 | 	mov	local11, #0
1ab18                 | '   swapped=false
1ab18                 | '   for j=0 to n-i-2
1ab18     00 34 06 F6 | 	mov	local12, #0
1ab1c     16 43 02 F6 | 	mov	local19, local08
1ab20     12 43 82 F1 | 	sub	local19, local04
1ab24     01 42 86 F1 | 	sub	local19, #1
1ab28                 | LR__2216
1ab28     21 35 52 F2 | 	cmps	local12, local19 wc
1ab2c     AC 00 90 3D |  if_ae	jmp	#LR__2218
1ab30                 | '     if filelist(j) > filelist(j+1) then
1ab30     1A 2F 02 F6 | 	mov	local09, local12
1ab34     02 2E 66 F0 | 	shl	local09, #2
1ab38     1C 4E 05 F1 | 	add	fp, #28
1ab3c     A7 2E 02 F1 | 	add	local09, fp
1ab40     17 13 02 FB | 	rdlong	arg01, local09
1ab44     1A 2F 02 F6 | 	mov	local09, local12
1ab48     01 2E 06 F1 | 	add	local09, #1
1ab4c     17 29 02 F6 | 	mov	local06, local09
1ab50     02 28 66 F0 | 	shl	local06, #2
1ab54     A7 1E 02 F6 | 	mov	local01, fp
1ab58     A7 28 02 F1 | 	add	local06, fp
1ab5c     14 27 02 FB | 	rdlong	local05, local06
1ab60     13 15 02 F6 | 	mov	arg02, local05
1ab64     1C 4E 85 F1 | 	sub	fp, #28
1ab68     F8 5D B0 FD | 	call	#__system___string_cmp
1ab6c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ab70     60 00 90 CD |  if_b	jmp	#LR__2217
1ab74     1A 2F 02 F6 | 	mov	local09, local12
1ab78     01 2E 06 F1 | 	add	local09, #1
1ab7c     02 2E 66 F0 | 	shl	local09, #2
1ab80     1C 4E 05 F1 | 	add	fp, #28
1ab84     A7 2E 02 F1 | 	add	local09, fp
1ab88     17 3D 02 FB | 	rdlong	local16, local09
1ab8c     1A 29 02 F6 | 	mov	local06, local12
1ab90     02 28 66 F0 | 	shl	local06, #2
1ab94     A7 28 02 F1 | 	add	local06, fp
1ab98     14 27 02 FB | 	rdlong	local05, local06
1ab9c     1A 2F 02 F6 | 	mov	local09, local12
1aba0     17 29 02 F6 | 	mov	local06, local09
1aba4     02 28 66 F0 | 	shl	local06, #2
1aba8     A7 1E 02 F6 | 	mov	local01, fp
1abac     A7 28 02 F1 | 	add	local06, fp
1abb0     14 3D 62 FC | 	wrlong	local16, local06
1abb4     1A 39 02 F6 | 	mov	local14, local12
1abb8     01 38 06 F1 | 	add	local14, #1
1abbc     02 38 66 F0 | 	shl	local14, #2
1abc0     A7 3A 02 F6 | 	mov	local15, fp
1abc4     A7 38 02 F1 | 	add	local14, fp
1abc8     1C 27 62 FC | 	wrlong	local05, local14
1abcc     01 32 66 F6 | 	neg	local11, #1
1abd0     1C 4E 85 F1 | 	sub	fp, #28
1abd4                 | LR__2217
1abd4     01 34 06 F1 | 	add	local12, #1
1abd8     4C FF 9F FD | 	jmp	#LR__2216
1abdc                 | LR__2218
1abdc                 | ' if not swapped then exit for
1abdc     19 3D 22 F6 | 	not	local16, local11
1abe0     00 3C 0E F2 | 	cmp	local16, #0 wz
1abe4     01 24 06 A1 |  if_e	add	local04, #1
1abe8     20 FF 9F AD |  if_e	jmp	#LR__2215
1abec                 | LR__2219
1abec                 | ' for i=0 to n-1
1abec     00 24 06 F6 | 	mov	local04, #0
1abf0                 | LR__2220
1abf0     16 25 52 F2 | 	cmps	local04, local08 wc
1abf4     8C 00 90 3D |  if_ae	jmp	#LR__2222
1abf8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1abf8     00 12 06 F6 | 	mov	arg01, #0
1abfc     A0 B7 B0 FD | 	call	#__system___getiolock_0540
1ac00     FD 12 02 F6 | 	mov	arg01, result1
1ac04     34 5D B0 FD | 	call	#__system___lockmem
1ac08     12 21 02 F6 | 	mov	local02, local04
1ac0c     02 20 66 F0 | 	shl	local02, #2
1ac10     1C 4E 05 F1 | 	add	fp, #28
1ac14     A7 20 02 F1 | 	add	local02, fp
1ac18     10 15 02 FB | 	rdlong	arg02, local02
1ac1c     00 12 06 F6 | 	mov	arg01, #0
1ac20     00 16 06 F6 | 	mov	arg03, #0
1ac24     1C 4E 85 F1 | 	sub	fp, #28
1ac28     04 6A B0 FD | 	call	#__system___basic_print_string
1ac2c     00 12 06 F6 | 	mov	arg01, #0
1ac30     6C B7 B0 FD | 	call	#__system___getiolock_0540
1ac34     FD 00 68 FC | 	wrlong	#0, result1
1ac38     40 22 06 F1 | 	add	local03, #64
1ac3c     11 13 02 F6 | 	mov	arg01, local03
1ac40     48 43 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ac44     00 23 56 F2 | 	cmps	local03, #256 wc
1ac48     30 00 90 CD |  if_b	jmp	#LR__2221
1ac4c     00 22 06 F6 | 	mov	local03, #0
1ac50     00 12 06 F6 | 	mov	arg01, #0
1ac54     48 B7 B0 FD | 	call	#__system___getiolock_0540
1ac58     FD 12 02 F6 | 	mov	arg01, result1
1ac5c     DC 5C B0 FD | 	call	#__system___lockmem
1ac60     00 12 06 F6 | 	mov	arg01, #0
1ac64     0A 14 06 F6 | 	mov	arg02, #10
1ac68     00 16 06 F6 | 	mov	arg03, #0
1ac6c     68 69 B0 FD | 	call	#__system___basic_print_char
1ac70     00 12 06 F6 | 	mov	arg01, #0
1ac74     28 B7 B0 FD | 	call	#__system___getiolock_0540
1ac78     FD 00 68 FC | 	wrlong	#0, result1
1ac7c                 | LR__2221
1ac7c     01 24 06 F1 | 	add	local04, #1
1ac80     6C FF 9F FD | 	jmp	#LR__2220
1ac84                 | LR__2222
1ac84                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1ac84     80 2C 56 F2 | 	cmps	local08, #128 wc
1ac88     40 00 90 CD |  if_b	jmp	#LR__2223
1ac8c     00 12 06 F6 | 	mov	arg01, #0
1ac90     0C B7 B0 FD | 	call	#__system___getiolock_0540
1ac94     FD 12 02 F6 | 	mov	arg01, result1
1ac98     A0 5C B0 FD | 	call	#__system___lockmem
1ac9c     85 01 00 FF 
1aca0     99 14 06 F6 | 	mov	arg02, ##@LR__5528
1aca4     00 12 06 F6 | 	mov	arg01, #0
1aca8     00 16 06 F6 | 	mov	arg03, #0
1acac     80 69 B0 FD | 	call	#__system___basic_print_string
1acb0     00 12 06 F6 | 	mov	arg01, #0
1acb4     0A 14 06 F6 | 	mov	arg02, #10
1acb8     00 16 06 F6 | 	mov	arg03, #0
1acbc     18 69 B0 FD | 	call	#__system___basic_print_char
1acc0     00 12 06 F6 | 	mov	arg01, #0
1acc4     D8 B6 B0 FD | 	call	#__system___getiolock_0540
1acc8     FD 00 68 FC | 	wrlong	#0, result1
1accc                 | LR__2223
1accc                 | ' print
1accc     00 12 06 F6 | 	mov	arg01, #0
1acd0     CC B6 B0 FD | 	call	#__system___getiolock_0540
1acd4     FD 12 02 F6 | 	mov	arg01, result1
1acd8     60 5C B0 FD | 	call	#__system___lockmem
1acdc     00 12 06 F6 | 	mov	arg01, #0
1ace0     0A 14 06 F6 | 	mov	arg02, #10
1ace4     00 16 06 F6 | 	mov	arg03, #0
1ace8     EC 68 B0 FD | 	call	#__system___basic_print_char
1acec     00 12 06 F6 | 	mov	arg01, #0
1acf0     AC B6 B0 FD | 	call	#__system___getiolock_0540
1acf4     FD 00 68 FC | 	wrlong	#0, result1
1acf8     A7 F0 03 F6 | 	mov	ptra, fp
1acfc     B2 00 A0 FD | 	call	#popregs_
1ad00                 | _do_dir_ret
1ad00     2D 00 64 FD | 	ret
1ad04                 | 
1ad04                 | ' 
1ad04                 | ' sub do_if
1ad04                 | _do_if
1ad04     05 4A 05 F6 | 	mov	COUNT_, #5
1ad08     A8 00 A0 FD | 	call	#pushregs_
1ad0c     14 05 BF FD | 	call	#_pop
1ad10     FD 1E 0A F6 | 	mov	local01, result1 wz
1ad14     FE 20 02 F6 | 	mov	local02, result2
1ad18     FF 22 02 F6 | 	mov	local03, result3
1ad1c                 | ' t1=pop()
1ad1c                 | ' ' if uresult=0, jump over else
1ad1c                 | ' if t1.result.uresult = 0 then 
1ad1c     BC 00 90 5D |  if_ne	jmp	#LR__2232
1ad20                 | '   for i=lineptr_e to lineptr-1
1ad20     4A 00 00 FF 
1ad24     80 E4 05 F1 | 	add	objptr, ##38016
1ad28     F2 24 02 FB | 	rdlong	local04, objptr
1ad2c     04 E4 85 F1 | 	sub	objptr, #4
1ad30     F2 26 02 FB | 	rdlong	local05, objptr
1ad34     4A 00 00 FF 
1ad38     7C E4 85 F1 | 	sub	objptr, ##38012
1ad3c                 | LR__2230
1ad3c     13 25 52 F2 | 	cmps	local04, local05 wc
1ad40     78 00 90 3D |  if_ae	jmp	#LR__2231
1ad44     12 FF 01 F6 | 	mov	result3, local04
1ad48     01 FE 65 F0 | 	shl	result3, #1
1ad4c     12 FF 01 F1 | 	add	result3, local04
1ad50     02 FE 65 F0 | 	shl	result3, #2
1ad54     47 00 00 FF 
1ad58     7C E4 05 F1 | 	add	objptr, ##36476
1ad5c     F2 FE 01 F1 | 	add	result3, objptr
1ad60     FF 1E 02 FB | 	rdlong	local01, result3
1ad64     04 FE 05 F1 | 	add	result3, #4
1ad68     FF FC 01 FB | 	rdlong	result2, result3
1ad6c     12 FF 01 F6 | 	mov	result3, local04
1ad70     01 FE 65 F0 | 	shl	result3, #1
1ad74     12 FF 01 F1 | 	add	result3, local04
1ad78     02 FE 65 F0 | 	shl	result3, #2
1ad7c     F2 FE 01 F1 | 	add	result3, objptr
1ad80     08 FE 05 F1 | 	add	result3, #8
1ad84     FF FE 01 FB | 	rdlong	result3, result3
1ad88     FE 20 02 F6 | 	mov	local02, result2
1ad8c     FF 22 02 F6 | 	mov	local03, result3
1ad90                 | '     t1=compiledline(i)
1ad90                 | '     if t1.result_type=token_else then lineptr_e=i : return
1ad90     5A 22 0E F2 | 	cmp	local03, #90 wz
1ad94     47 00 00 FF 
1ad98     7C E4 85 F1 | 	sub	objptr, ##36476
1ad9c     4A 00 00 AF 
1ada0     80 E4 05 A1 |  if_e	add	objptr, ##38016
1ada4     F2 24 62 AC |  if_e	wrlong	local04, objptr
1ada8     4A 00 00 AF 
1adac     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1adb0     28 00 90 AD |  if_e	jmp	#LR__2233
1adb4     01 24 06 F1 | 	add	local04, #1
1adb8     80 FF 9F FD | 	jmp	#LR__2230
1adbc                 | LR__2231
1adbc     4A 00 00 FF 
1adc0     7C E4 05 F1 | 	add	objptr, ##38012
1adc4     F2 26 02 FB | 	rdlong	local05, objptr
1adc8     01 26 86 F1 | 	sub	local05, #1
1adcc     04 E4 05 F1 | 	add	objptr, #4
1add0     F2 26 62 FC | 	wrlong	local05, objptr
1add4     4A 00 00 FF 
1add8     80 E4 85 F1 | 	sub	objptr, ##38016
1addc                 | LR__2232
1addc                 | LR__2233
1addc     A7 F0 03 F6 | 	mov	ptra, fp
1ade0     B2 00 A0 FD | 	call	#popregs_
1ade4                 | _do_if_ret
1ade4     2D 00 64 FD | 	ret
1ade8                 | 
1ade8                 | ' 
1ade8                 | ' sub do_else
1ade8                 | _do_else
1ade8     4A 00 00 FF 
1adec     7C E4 05 F1 | 	add	objptr, ##38012
1adf0     F2 00 02 FB | 	rdlong	_var01, objptr
1adf4     01 00 86 F1 | 	sub	_var01, #1
1adf8     04 E4 05 F1 | 	add	objptr, #4
1adfc     F2 00 62 FC | 	wrlong	_var01, objptr
1ae00     4A 00 00 FF 
1ae04     80 E4 85 F1 | 	sub	objptr, ##38016
1ae08                 | _do_else_ret
1ae08     2D 00 64 FD | 	ret
1ae0c                 | 
1ae0c                 | ' 
1ae0c                 | ' sub do_rad
1ae0c                 | _do_rad
1ae0c     51 00 00 FF 
1ae10     BC E5 05 F1 | 	add	objptr, ##41916
1ae14     00 C0 9F FF 
1ae18     F2 00 68 FC | 	wrlong	##1065353216, objptr
1ae1c     04 E4 05 F1 | 	add	objptr, #4
1ae20     00 C0 9F FF 
1ae24     F2 00 68 FC | 	wrlong	##1065353216, objptr
1ae28     51 00 00 FF 
1ae2c     C0 E5 85 F1 | 	sub	objptr, ##41920
1ae30                 | _do_rad_ret
1ae30     2D 00 64 FD | 	ret
1ae34                 | 
1ae34                 | ' 
1ae34                 | ' sub do_deg
1ae34                 | _do_deg
1ae34     51 00 00 FF 
1ae38     BC E5 05 F1 | 	add	objptr, ##41916
1ae3c     7D 47 9E FF 
1ae40     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1ae44     04 E4 05 F1 | 	add	objptr, #4
1ae48     97 32 A1 FF 
1ae4c     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1ae50     51 00 00 FF 
1ae54     C0 E5 85 F1 | 	sub	objptr, ##41920
1ae58                 | _do_deg_ret
1ae58     2D 00 64 FD | 	ret
1ae5c                 | 
1ae5c                 | ' 
1ae5c                 | ' sub do_round
1ae5c                 | _do_round
1ae5c     00 4A 05 F6 | 	mov	COUNT_, #0
1ae60     A8 00 A0 FD | 	call	#pushregs_
1ae64     0C F0 07 F1 | 	add	ptra, #12
1ae68     B8 03 BF FD | 	call	#_pop
1ae6c     A7 FA 61 FC | 	wrlong	result1, fp
1ae70     04 4E 05 F1 | 	add	fp, #4
1ae74     A7 FC 61 FC | 	wrlong	result2, fp
1ae78     04 4E 05 F1 | 	add	fp, #4
1ae7c     A7 FE 61 FC | 	wrlong	result3, fp
1ae80     08 4E 85 F1 | 	sub	fp, #8
1ae84     A7 12 02 F6 | 	mov	arg01, fp
1ae88     7C 05 BF FD | 	call	#_converttoint
1ae8c     A7 FA 61 FC | 	wrlong	result1, fp
1ae90     08 4E 05 F1 | 	add	fp, #8
1ae94     A7 38 68 FC | 	wrlong	#28, fp
1ae98     08 4E 85 F1 | 	sub	fp, #8
1ae9c     A7 12 02 F6 | 	mov	arg01, fp
1aea0     18 04 BF FD | 	call	#_push
1aea4     A7 F0 03 F6 | 	mov	ptra, fp
1aea8     B2 00 A0 FD | 	call	#popregs_
1aeac                 | _do_round_ret
1aeac     2D 00 64 FD | 	ret
1aeb0                 | 
1aeb0                 | ' 
1aeb0                 | ' sub do_int
1aeb0                 | _do_int
1aeb0     02 4A 05 F6 | 	mov	COUNT_, #2
1aeb4     A8 00 A0 FD | 	call	#pushregs_
1aeb8     10 F0 07 F1 | 	add	ptra, #16
1aebc     64 03 BF FD | 	call	#_pop
1aec0     FE 1E 02 F6 | 	mov	local01, result2
1aec4     FF 20 02 F6 | 	mov	local02, result3
1aec8     A7 FA 61 FC | 	wrlong	result1, fp
1aecc     04 4E 05 F1 | 	add	fp, #4
1aed0     A7 1E 62 FC | 	wrlong	local01, fp
1aed4     04 4E 05 F1 | 	add	fp, #4
1aed8     A7 20 62 FC | 	wrlong	local02, fp
1aedc                 | ' 
1aedc                 | ' t1=pop()
1aedc                 | ' select case t1.result_type
1aedc     08 4E 85 F1 | 	sub	fp, #8
1aee0     1E 20 0E F2 | 	cmp	local02, #30 wz
1aee4     14 00 90 AD |  if_e	jmp	#LR__2240
1aee8     1F 20 0E F2 | 	cmp	local02, #31 wz
1aeec     20 00 90 AD |  if_e	jmp	#LR__2241
1aef0     2B 20 0E F2 | 	cmp	local02, #43 wz
1aef4     34 00 90 AD |  if_e	jmp	#LR__2242
1aef8     50 00 90 FD | 	jmp	#LR__2243
1aefc                 | LR__2240
1aefc     A7 12 02 FB | 	rdlong	arg01, fp
1af00     00 14 06 F6 | 	mov	arg02, #0
1af04     B0 8A B0 FD | 	call	#__system___float_tointeger
1af08     A7 FA 61 FC | 	wrlong	result1, fp
1af0c     3C 00 90 FD | 	jmp	#LR__2243
1af10                 | LR__2241
1af10     A7 12 02 FB | 	rdlong	arg01, fp
1af14     E4 8D B0 FD | 	call	#__system____builtin_atof
1af18     FD 12 02 F6 | 	mov	arg01, result1
1af1c     00 14 06 F6 | 	mov	arg02, #0
1af20     94 8A B0 FD | 	call	#__system___float_tointeger
1af24     A7 FA 61 FC | 	wrlong	result1, fp
1af28     20 00 90 FD | 	jmp	#LR__2243
1af2c                 | LR__2242
1af2c     A7 12 02 FB | 	rdlong	arg01, fp
1af30     68 04 BF FD | 	call	#_convertstring
1af34     FD 12 02 F6 | 	mov	arg01, result1
1af38     C0 8D B0 FD | 	call	#__system____builtin_atof
1af3c     FD 12 02 F6 | 	mov	arg01, result1
1af40     00 14 06 F6 | 	mov	arg02, #0
1af44     70 8A B0 FD | 	call	#__system___float_tointeger
1af48     A7 FA 61 FC | 	wrlong	result1, fp
1af4c                 | LR__2243
1af4c     08 4E 05 F1 | 	add	fp, #8
1af50     A7 38 68 FC | 	wrlong	#28, fp
1af54     08 4E 85 F1 | 	sub	fp, #8
1af58     A7 12 02 F6 | 	mov	arg01, fp
1af5c     5C 03 BF FD | 	call	#_push
1af60     A7 F0 03 F6 | 	mov	ptra, fp
1af64     B2 00 A0 FD | 	call	#popregs_
1af68                 | _do_int_ret
1af68     2D 00 64 FD | 	ret
1af6c                 | 
1af6c                 | ' 
1af6c                 | ' 
1af6c                 | ' sub do_nothing
1af6c                 | _do_nothing
1af6c                 | _do_nothing_ret
1af6c     2D 00 64 FD | 	ret
1af70                 | 
1af70                 | ' 
1af70                 | ' sub do_brun
1af70                 | _do_brun
1af70     08 4A 05 F6 | 	mov	COUNT_, #8
1af74     A8 00 A0 FD | 	call	#pushregs_
1af78     A8 02 BF FD | 	call	#_pop
1af7c     FE 1A 02 F6 | 	mov	arg05, result2
1af80     FF 18 02 F6 | 	mov	arg04, result3
1af84     FD 1E 02 F6 | 	mov	local01, result1
1af88     0D 21 02 F6 | 	mov	local02, arg05
1af8c     0C 23 02 F6 | 	mov	local03, arg04
1af90                 | ' 
1af90                 | ' t1=pop() 
1af90                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1af90     2B 22 0E F2 | 	cmp	local03, #43 wz
1af94     10 00 90 5D |  if_ne	jmp	#LR__2250
1af98     0F 13 02 F6 | 	mov	arg01, local01
1af9c     FC 03 BF FD | 	call	#_convertstring
1afa0     FD 1E 02 F6 | 	mov	local01, result1
1afa4     1F 22 06 F6 | 	mov	local03, #31
1afa8                 | LR__2250
1afa8                 | ' if t1.result_type=result_string then
1afa8     1F 22 0E F2 | 	cmp	local03, #31 wz
1afac     EC 01 90 5D |  if_ne	jmp	#LR__2254
1afb0     0F 25 02 F6 | 	mov	local04, local01
1afb4                 | '   filename=t1.result.sresult
1afb4                 | '   if left$(filename,1)="/" then 
1afb4     12 13 02 F6 | 	mov	arg01, local04
1afb8     01 14 06 F6 | 	mov	arg02, #1
1afbc     F8 79 B0 FD | 	call	#__system__Left_S
1afc0     FD 12 02 F6 | 	mov	arg01, result1
1afc4     85 01 00 FF 
1afc8     CB 14 06 F6 | 	mov	arg02, ##@LR__5529
1afcc     94 59 B0 FD | 	call	#__system___string_cmp
1afd0     00 FA 0D F2 | 	cmp	result1, #0 wz
1afd4     12 27 02 A6 |  if_e	mov	local05, local04
1afd8     14 00 90 AD |  if_e	jmp	#LR__2251
1afdc     85 01 00 FF 
1afe0     CD 12 06 F6 | 	mov	arg01, ##@LR__5530
1afe4     12 15 02 F6 | 	mov	arg02, local04
1afe8     AC 59 B0 FD | 	call	#__system___string_concat
1afec     FD 26 02 F6 | 	mov	local05, result1
1aff0                 | LR__2251
1aff0                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1aff0                 | '   open fullfilename for input as #9
1aff0     09 12 06 F6 | 	mov	arg01, #9
1aff4     13 15 02 F6 | 	mov	arg02, local05
1aff8     00 16 06 F6 | 	mov	arg03, #0
1affc     40 65 B0 FD | 	call	#__system___basic_open_string
1b000     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b004     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b008     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b00c     FD 28 0A F6 | 	mov	local06, result1 wz
1b010                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1b010     8C 00 90 AD |  if_e	jmp	#LR__2252
1b014     00 12 06 F6 | 	mov	arg01, #0
1b018     84 B3 B0 FD | 	call	#__system___getiolock_0540
1b01c     FD 12 02 F6 | 	mov	arg01, result1
1b020     18 59 B0 FD | 	call	#__system___lockmem
1b024     85 01 00 FF 
1b028     D6 14 06 F6 | 	mov	arg02, ##@LR__5531
1b02c     00 12 06 F6 | 	mov	arg01, #0
1b030     00 16 06 F6 | 	mov	arg03, #0
1b034     F8 65 B0 FD | 	call	#__system___basic_print_string
1b038     00 12 06 F6 | 	mov	arg01, #0
1b03c     14 15 02 F6 | 	mov	arg02, local06
1b040     00 16 06 F6 | 	mov	arg03, #0
1b044     0A 18 06 F6 | 	mov	arg04, #10
1b048     28 66 B0 FD | 	call	#__system___basic_print_integer
1b04c     85 01 00 FF 
1b050     E4 14 06 F6 | 	mov	arg02, ##@LR__5532
1b054     00 12 06 F6 | 	mov	arg01, #0
1b058     00 16 06 F6 | 	mov	arg03, #0
1b05c     D0 65 B0 FD | 	call	#__system___basic_print_string
1b060     14 13 02 F6 | 	mov	arg01, local06
1b064     9C 7F B0 FD | 	call	#__system___strerror
1b068     FD 14 02 F6 | 	mov	arg02, result1
1b06c     00 12 06 F6 | 	mov	arg01, #0
1b070     00 16 06 F6 | 	mov	arg03, #0
1b074     B8 65 B0 FD | 	call	#__system___basic_print_string
1b078     00 12 06 F6 | 	mov	arg01, #0
1b07c     0A 14 06 F6 | 	mov	arg02, #10
1b080     00 16 06 F6 | 	mov	arg03, #0
1b084     50 65 B0 FD | 	call	#__system___basic_print_char
1b088     00 12 06 F6 | 	mov	arg01, #0
1b08c     10 B3 B0 FD | 	call	#__system___getiolock_0540
1b090     FD 00 68 FC | 	wrlong	#0, result1
1b094     09 12 06 F6 | 	mov	arg01, #9
1b098     34 A9 B0 FD | 	call	#__system__close
1b09c     FC 00 90 FD | 	jmp	#LR__2255
1b0a0                 | LR__2252
1b0a0     01 2A 06 F6 | 	mov	local07, #1
1b0a4     00 2C 06 F6 | 	mov	local08, #0
1b0a8                 | '   do
1b0a8                 | LR__2253
1b0a8                 | '     get #9,pos,block(0),1024,r : pos+=r	
1b0a8     4E 00 00 FF 
1b0ac     B4 E4 05 F1 | 	add	objptr, ##40116
1b0b0     F2 16 02 F6 | 	mov	arg03, objptr
1b0b4     4E 00 00 FF 
1b0b8     B4 E4 85 F1 | 	sub	objptr, ##40116
1b0bc     09 12 06 F6 | 	mov	arg01, #9
1b0c0     15 15 02 F6 | 	mov	arg02, local07
1b0c4     0A 18 C6 F9 | 	decod	arg04, #10
1b0c8     01 1A 06 F6 | 	mov	arg05, #1
1b0cc     DC 66 B0 FD | 	call	#__system___basic_get
1b0d0     FD 28 02 F6 | 	mov	local06, result1
1b0d4     FD 2A 02 F1 | 	add	local07, result1
1b0d8     4E 00 00 FF 
1b0dc     B4 E4 05 F1 | 	add	objptr, ##40116
1b0e0     F2 12 02 F6 | 	mov	arg01, objptr
1b0e4     16 15 02 F6 | 	mov	arg02, local08
1b0e8     0A 16 C6 F9 | 	decod	arg03, #10
1b0ec     42 00 00 FF 
1b0f0     E8 E5 85 F1 | 	sub	objptr, ##34280
1b0f4     A0 4C B0 FD | 	call	#_psram_spin2_write
1b0f8     0B 00 00 FF 
1b0fc     CC E4 85 F1 | 	sub	objptr, ##5836
1b100     14 2D 02 F1 | 	add	local08, local06
1b104     02 00 00 FF 
1b108     00 28 0E F2 | 	cmp	local06, ##1024 wz
1b10c     E0 03 00 AF 
1b110     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1b114     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2253
1b118     36 00 00 FF 
1b11c     FC E5 05 F1 | 	add	objptr, ##28156
1b120     F2 12 02 FB | 	rdlong	arg01, objptr
1b124     03 12 62 FD | 	cogstop	arg01
1b128     04 E4 05 F1 | 	add	objptr, #4
1b12c     F2 12 02 FB | 	rdlong	arg01, objptr
1b130     03 12 62 FD | 	cogstop	arg01
1b134     04 E4 05 F1 | 	add	objptr, #4
1b138     F2 12 02 FB | 	rdlong	arg01, objptr
1b13c     03 12 62 FD | 	cogstop	arg01
1b140     19 00 00 FF 
1b144     14 E5 05 F1 | 	add	objptr, ##13076
1b148     F2 12 02 FB | 	rdlong	arg01, objptr
1b14c     03 12 62 FD | 	cogstop	arg01
1b150     18 00 00 FF 
1b154     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1b158     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b15c     18 00 00 FF 
1b160     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1b164     19 00 00 FF 
1b168     0C E5 85 F1 | 	sub	objptr, ##13068
1b16c     1E 2C 06 F6 | 	mov	local08, #30
1b170     28 E4 61 FD | 	setq	objptr
1b174     0A 2D F2 FC | 	coginit	local08, arg02 wc
1b178     01 2C 66 C6 |  if_b	neg	local08, #1
1b17c     1B 00 00 FF 
1b180     14 E4 05 F1 | 	add	objptr, ##13844
1b184     F2 2C 62 FC | 	wrlong	local08, objptr
1b188     52 00 00 FF 
1b18c     20 E4 85 F1 | 	sub	objptr, ##42016
1b190     00 12 06 F6 | 	mov	arg01, #0
1b194     01 12 62 FD | 	cogid	arg01
1b198     03 12 62 FD | 	cogstop	arg01
1b19c                 | LR__2254
1b19c                 | LR__2255
1b19c     A7 F0 03 F6 | 	mov	ptra, fp
1b1a0     B2 00 A0 FD | 	call	#popregs_
1b1a4                 | _do_brun_ret
1b1a4     2D 00 64 FD | 	ret
1b1a8                 | 
1b1a8                 | ' 
1b1a8                 | ' 
1b1a8                 | ' sub do_mouse
1b1a8                 | _do_mouse
1b1a8     78 00 BF FD | 	call	#_pop
1b1ac     00 FA 4D F2 | 	cmps	result1, #0 wz
1b1b0                 | ' t1=pop()
1b1b0                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1b1b0     14 00 90 5D |  if_ne	jmp	#LR__2260
1b1b4     10 12 06 F6 | 	mov	arg01, #16
1b1b8     00 14 06 F6 | 	mov	arg02, #0
1b1bc     00 16 06 F6 | 	mov	arg03, #0
1b1c0     7C 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b1c4     10 00 90 FD | 	jmp	#LR__2261
1b1c8                 | LR__2260
1b1c8     10 12 06 F6 | 	mov	arg01, #16
1b1cc     20 14 06 F6 | 	mov	arg02, #32
1b1d0     20 16 06 F6 | 	mov	arg03, #32
1b1d4     68 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b1d8                 | LR__2261
1b1d8                 | _do_mouse_ret
1b1d8     2D 00 64 FD | 	ret
1b1dc                 | 
1b1dc                 | ' 
1b1dc                 | ' sub do_cursor
1b1dc                 | _do_cursor
1b1dc     44 00 BF FD | 	call	#_pop
1b1e0     00 FA 4D F2 | 	cmps	result1, #0 wz
1b1e4                 | ' t1=pop()
1b1e4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1b1e4     14 00 90 5D |  if_ne	jmp	#LR__2270
1b1e8     11 12 06 F6 | 	mov	arg01, #17
1b1ec     00 14 06 F6 | 	mov	arg02, #0
1b1f0     00 16 06 F6 | 	mov	arg03, #0
1b1f4     48 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b1f8     10 00 90 FD | 	jmp	#LR__2271
1b1fc                 | LR__2270
1b1fc     11 12 06 F6 | 	mov	arg01, #17
1b200     08 14 06 F6 | 	mov	arg02, #8
1b204     10 16 06 F6 | 	mov	arg03, #16
1b208     34 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b20c                 | LR__2271
1b20c                 | _do_cursor_ret
1b20c     2D 00 64 FD | 	ret
1b210                 | 
1b210                 | ' 
1b210                 | ' 
1b210                 | ' sub do_click
1b210                 | _do_click
1b210     10 00 BF FD | 	call	#_pop
1b214     00 FA 4D F2 | 	cmps	result1, #0 wz
1b218                 | ' t1=pop()
1b218                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1b218     50 00 00 AF 
1b21c     14 E5 05 A1 |  if_e	add	objptr, ##41236
1b220     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b224     50 00 00 FF 
1b228     14 E5 C5 F3 | 	sumz	objptr, ##41236
1b22c     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1b230     50 00 00 5F 
1b234     14 E5 85 51 |  if_ne	sub	objptr, ##41236
1b238                 | _do_click_ret
1b238     2D 00 64 FD | 	ret
1b23c                 | 
1b23c                 | ' 
1b23c                 | ' 
1b23c                 | ' sub do_beep
1b23c                 | _do_beep
1b23c     02 4A 05 F6 | 	mov	COUNT_, #2
1b240     A8 00 A0 FD | 	call	#pushregs_
1b244     20 F0 07 F1 | 	add	ptra, #32
1b248     D8 FF BE FD | 	call	#_pop
1b24c     FD 1E 02 F6 | 	mov	local01, result1
1b250     FE 1C 02 F6 | 	mov	arg06, result2
1b254     FF 20 02 F6 | 	mov	local02, result3
1b258     0C 4E 05 F1 | 	add	fp, #12
1b25c     A7 1E 62 FC | 	wrlong	local01, fp
1b260     04 4E 05 F1 | 	add	fp, #4
1b264     A7 1C 62 FC | 	wrlong	arg06, fp
1b268     04 4E 05 F1 | 	add	fp, #4
1b26c     A7 20 62 FC | 	wrlong	local02, fp
1b270     14 4E 85 F1 | 	sub	fp, #20
1b274     AC FF BE FD | 	call	#_pop
1b278     A7 FA 61 FC | 	wrlong	result1, fp
1b27c     04 4E 05 F1 | 	add	fp, #4
1b280     A7 FC 61 FC | 	wrlong	result2, fp
1b284     04 4E 05 F1 | 	add	fp, #4
1b288     A7 FE 61 FC | 	wrlong	result3, fp
1b28c                 | ' 
1b28c                 | ' t2=pop()
1b28c                 | ' t1=pop()
1b28c                 | ' 
1b28c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1b28c     08 4E 85 F1 | 	sub	fp, #8
1b290     1C FE 0D F2 | 	cmp	result3, #28 wz
1b294     08 4E 05 51 |  if_ne	add	fp, #8
1b298     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b29c     08 4E 85 51 |  if_ne	sub	fp, #8
1b2a0     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1b2a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b2a8     18 4E 05 A1 |  if_e	add	fp, #24
1b2ac     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b2b0     18 4E 85 A1 |  if_e	sub	fp, #24
1b2b4     14 00 90 AD |  if_e	jmp	#LR__2280
1b2b8     A7 12 02 F6 | 	mov	arg01, fp
1b2bc     48 01 BF FD | 	call	#_converttoint
1b2c0     18 4E 05 F1 | 	add	fp, #24
1b2c4     A7 FA 61 FC | 	wrlong	result1, fp
1b2c8     18 4E 85 F1 | 	sub	fp, #24
1b2cc                 | LR__2280
1b2cc     1C 4E 05 F1 | 	add	fp, #28
1b2d0     A7 FE 48 FC | 	wrbyte	#127, fp
1b2d4     01 4E 05 F1 | 	add	fp, #1
1b2d8     A7 00 49 FC | 	wrbyte	#128, fp
1b2dc     01 4E 85 F1 | 	sub	fp, #1
1b2e0     A7 14 02 F6 | 	mov	arg02, fp
1b2e4     04 4E 85 F1 | 	sub	fp, #4
1b2e8     A7 16 02 FB | 	rdlong	arg03, fp
1b2ec     18 4E 85 F1 | 	sub	fp, #24
1b2f0     01 16 66 F0 | 	shl	arg03, #1
1b2f4     07 12 06 F6 | 	mov	arg01, #7
1b2f8     0E 18 C6 F9 | 	decod	arg04, #14
1b2fc     02 1A 06 F6 | 	mov	arg05, #2
1b300     00 1C 06 F6 | 	mov	arg06, #0
1b304     0B 00 00 FF 
1b308     CC E4 05 F1 | 	add	objptr, ##5836
1b30c     88 52 B0 FD | 	call	#_audio096_spin2_play8
1b310     0B 00 00 FF 
1b314     CC E4 85 F1 | 	sub	objptr, ##5836
1b318     0C 4E 05 F1 | 	add	fp, #12
1b31c     A7 12 02 F6 | 	mov	arg01, fp
1b320     0C 4E 85 F1 | 	sub	fp, #12
1b324     94 FF BE FD | 	call	#_push
1b328     74 F2 BF FD | 	call	#_do_waitms
1b32c     07 12 06 F6 | 	mov	arg01, #7
1b330     0B 00 00 FF 
1b334     CC E4 05 F1 | 	add	objptr, ##5836
1b338     00 53 B0 FD | 	call	#_audio096_spin2_stop
1b33c     0B 00 00 FF 
1b340     CC E4 85 F1 | 	sub	objptr, ##5836
1b344     A7 F0 03 F6 | 	mov	ptra, fp
1b348     B2 00 A0 FD | 	call	#popregs_
1b34c                 | _do_beep_ret
1b34c     2D 00 64 FD | 	ret
1b350                 | 
1b350                 | ' 
1b350                 | ' sub do_no_command
1b350                 | _do_no_command
1b350     17 12 06 F6 | 	mov	arg01, #23
1b354     54 20 B0 FD | 	call	#_printerror
1b358                 | _do_no_command_ret
1b358     2D 00 64 FD | 	ret
1b35c                 | 
1b35c                 | ' 
1b35c                 | ' sub do_negative
1b35c                 | _do_negative
1b35c     02 4A 05 F6 | 	mov	COUNT_, #2
1b360     A8 00 A0 FD | 	call	#pushregs_
1b364     0C F0 07 F1 | 	add	ptra, #12
1b368     B8 FE BE FD | 	call	#_pop
1b36c     FF 1E 02 F6 | 	mov	local01, result3
1b370     A7 FA 61 FC | 	wrlong	result1, fp
1b374     04 4E 05 F1 | 	add	fp, #4
1b378     A7 FC 61 FC | 	wrlong	result2, fp
1b37c     04 4E 05 F1 | 	add	fp, #4
1b380     A7 1E 62 FC | 	wrlong	local01, fp
1b384                 | ' t1=pop()
1b384                 | ' if t1.result_type=result_int then 
1b384     08 4E 85 F1 | 	sub	fp, #8
1b388     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b38c     A7 20 02 AB |  if_e	rdlong	local02, fp
1b390     10 1F 62 A6 |  if_e	neg	local01, local02
1b394     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b398     5C 00 90 AD |  if_e	jmp	#LR__2292
1b39c     08 4E 05 F1 | 	add	fp, #8
1b3a0     A7 1E 02 FB | 	rdlong	local01, fp
1b3a4     08 4E 85 F1 | 	sub	fp, #8
1b3a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b3ac     1C 00 90 5D |  if_ne	jmp	#LR__2290
1b3b0     A7 20 02 FB | 	rdlong	local02, fp
1b3b4     10 1F 62 F6 | 	neg	local01, local02
1b3b8     A7 1E 62 FC | 	wrlong	local01, fp
1b3bc     08 4E 05 F1 | 	add	fp, #8
1b3c0     A7 38 68 FC | 	wrlong	#28, fp
1b3c4     08 4E 85 F1 | 	sub	fp, #8
1b3c8     2C 00 90 FD | 	jmp	#LR__2291
1b3cc                 | LR__2290
1b3cc     08 4E 05 F1 | 	add	fp, #8
1b3d0     A7 1E 02 FB | 	rdlong	local01, fp
1b3d4     08 4E 85 F1 | 	sub	fp, #8
1b3d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b3dc     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b3e0     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b3e4     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b3e8     08 4E 05 51 |  if_ne	add	fp, #8
1b3ec     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b3f0     08 4E 85 51 |  if_ne	sub	fp, #8
1b3f4     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b3f8                 | LR__2291
1b3f8                 | LR__2292
1b3f8     A7 12 02 F6 | 	mov	arg01, fp
1b3fc     BC FE BE FD | 	call	#_push
1b400     A7 F0 03 F6 | 	mov	ptra, fp
1b404     B2 00 A0 FD | 	call	#popregs_
1b408                 | _do_negative_ret
1b408     2D 00 64 FD | 	ret
1b40c                 | 
1b40c                 | ' 
1b40c                 | ' sub do_abs
1b40c                 | _do_abs
1b40c     01 4A 05 F6 | 	mov	COUNT_, #1
1b410     A8 00 A0 FD | 	call	#pushregs_
1b414     0C F0 07 F1 | 	add	ptra, #12
1b418     08 FE BE FD | 	call	#_pop
1b41c     FF 1E 02 F6 | 	mov	local01, result3
1b420     A7 FA 61 FC | 	wrlong	result1, fp
1b424     04 4E 05 F1 | 	add	fp, #4
1b428     A7 FC 61 FC | 	wrlong	result2, fp
1b42c     04 4E 05 F1 | 	add	fp, #4
1b430     A7 1E 62 FC | 	wrlong	local01, fp
1b434                 | ' t1=pop()
1b434                 | ' if t1.result_type=result_int then 
1b434     08 4E 85 F1 | 	sub	fp, #8
1b438     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b43c     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b440     09 1F 42 A6 |  if_e	abs	local01, arg01
1b444     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b448     2C 00 90 AD |  if_e	jmp	#LR__2300
1b44c     08 4E 05 F1 | 	add	fp, #8
1b450     A7 1E 02 FB | 	rdlong	local01, fp
1b454     08 4E 85 F1 | 	sub	fp, #8
1b458     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b45c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b460     1F FA 05 A4 |  if_e	bitl	result1, #31
1b464     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b468     08 4E 05 51 |  if_ne	add	fp, #8
1b46c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b470     08 4E 85 51 |  if_ne	sub	fp, #8
1b474     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b478                 | LR__2300
1b478     A7 12 02 F6 | 	mov	arg01, fp
1b47c     3C FE BE FD | 	call	#_push
1b480     A7 F0 03 F6 | 	mov	ptra, fp
1b484     B2 00 A0 FD | 	call	#popregs_
1b488                 | _do_abs_ret
1b488     2D 00 64 FD | 	ret
1b48c                 | 
1b48c                 | ' 
1b48c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b48c                 | ' 
1b48c                 | ' ''----------------------------------------------------------------------------------------------------
1b48c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b48c                 | ' ''----------------------------------------------------------------------------------------------------
1b48c                 | ' 
1b48c                 | ' ''--------------------------- Command function pointers
1b48c                 | ' 
1b48c                 | ' sub init_commands
1b48c                 | _init_commands
1b48c                 | ' 
1b48c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b48c     00 00 06 F6 | 	mov	_var01, #0
1b490     97 16 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1b494                 | LR__2310
1b494     00 FB 01 F6 | 	mov	result1, _var01
1b498     02 FA 65 F0 | 	shl	result1, #2
1b49c     43 00 00 FF 
1b4a0     60 E4 05 F1 | 	add	objptr, ##34400
1b4a4     F2 FA 01 F1 | 	add	result1, objptr
1b4a8     43 00 00 FF 
1b4ac     60 E4 85 F1 | 	sub	objptr, ##34400
1b4b0     FD E4 61 FC | 	wrlong	objptr, result1
1b4b4     01 00 06 F1 | 	add	_var01, #1
1b4b8     00 01 56 F2 | 	cmps	_var01, #256 wc
1b4bc     D4 FF 9F CD |  if_b	jmp	#LR__2310
1b4c0                 | LR__2311
1b4c0     F2 FA 01 F6 | 	mov	result1, objptr
1b4c4     14 FA 25 F4 | 	bith	result1, #20
1b4c8     43 00 00 FF 
1b4cc     64 E4 05 F1 | 	add	objptr, ##34404
1b4d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b4d4     43 00 00 FF 
1b4d8     64 E4 85 F1 | 	sub	objptr, ##34404
1b4dc     F2 FA 01 F6 | 	mov	result1, objptr
1b4e0     15 FA 25 F4 | 	bith	result1, #21
1b4e4     43 00 00 FF 
1b4e8     68 E4 05 F1 | 	add	objptr, ##34408
1b4ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b4f0     43 00 00 FF 
1b4f4     68 E4 85 F1 | 	sub	objptr, ##34408
1b4f8     F2 FA 01 F6 | 	mov	result1, objptr
1b4fc     34 FA 25 F4 | 	bith	result1, #52
1b500     43 00 00 FF 
1b504     6C E4 05 F1 | 	add	objptr, ##34412
1b508     F2 FA 61 FC | 	wrlong	result1, objptr
1b50c     43 00 00 FF 
1b510     6C E4 85 F1 | 	sub	objptr, ##34412
1b514     F2 FA 01 F6 | 	mov	result1, objptr
1b518     16 FA 25 F4 | 	bith	result1, #22
1b51c     43 00 00 FF 
1b520     74 E4 05 F1 | 	add	objptr, ##34420
1b524     F2 FA 61 FC | 	wrlong	result1, objptr
1b528     43 00 00 FF 
1b52c     74 E4 85 F1 | 	sub	objptr, ##34420
1b530     F2 FA 01 F6 | 	mov	result1, objptr
1b534     00 28 00 FF 
1b538     00 FA 45 F5 | 	or	result1, ##5242880
1b53c     43 00 00 FF 
1b540     78 E4 05 F1 | 	add	objptr, ##34424
1b544     F2 FA 61 FC | 	wrlong	result1, objptr
1b548     43 00 00 FF 
1b54c     78 E4 85 F1 | 	sub	objptr, ##34424
1b550     F2 FA 01 F6 | 	mov	result1, objptr
1b554     35 FA 25 F4 | 	bith	result1, #53
1b558     43 00 00 FF 
1b55c     7C E4 05 F1 | 	add	objptr, ##34428
1b560     F2 FA 61 FC | 	wrlong	result1, objptr
1b564     43 00 00 FF 
1b568     7C E4 85 F1 | 	sub	objptr, ##34428
1b56c     F2 FA 01 F6 | 	mov	result1, objptr
1b570     54 FA 25 F4 | 	bith	result1, #84
1b574     43 00 00 FF 
1b578     80 E4 05 F1 | 	add	objptr, ##34432
1b57c     F2 FA 61 FC | 	wrlong	result1, objptr
1b580     43 00 00 FF 
1b584     80 E4 85 F1 | 	sub	objptr, ##34432
1b588     F2 FA 01 F6 | 	mov	result1, objptr
1b58c     17 FA 25 F4 | 	bith	result1, #23
1b590     43 00 00 FF 
1b594     84 E4 05 F1 | 	add	objptr, ##34436
1b598     F2 FA 61 FC | 	wrlong	result1, objptr
1b59c     43 00 00 FF 
1b5a0     84 E4 85 F1 | 	sub	objptr, ##34436
1b5a4     F2 FA 01 F6 | 	mov	result1, objptr
1b5a8     00 48 00 FF 
1b5ac     00 FA 45 F5 | 	or	result1, ##9437184
1b5b0     43 00 00 FF 
1b5b4     88 E4 05 F1 | 	add	objptr, ##34440
1b5b8     F2 FA 61 FC | 	wrlong	result1, objptr
1b5bc     43 00 00 FF 
1b5c0     88 E4 85 F1 | 	sub	objptr, ##34440
1b5c4     F2 FA 01 F6 | 	mov	result1, objptr
1b5c8     00 50 00 FF 
1b5cc     00 FA 45 F5 | 	or	result1, ##10485760
1b5d0     43 00 00 FF 
1b5d4     8C E4 05 F1 | 	add	objptr, ##34444
1b5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1b5dc     43 00 00 FF 
1b5e0     8C E4 85 F1 | 	sub	objptr, ##34444
1b5e4     F2 FA 01 F6 | 	mov	result1, objptr
1b5e8     00 58 00 FF 
1b5ec     00 FA 45 F5 | 	or	result1, ##11534336
1b5f0     43 00 00 FF 
1b5f4     90 E4 05 F1 | 	add	objptr, ##34448
1b5f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b5fc     43 00 00 FF 
1b600     90 E4 85 F1 | 	sub	objptr, ##34448
1b604     F2 FA 01 F6 | 	mov	result1, objptr
1b608     36 FA 25 F4 | 	bith	result1, #54
1b60c     43 00 00 FF 
1b610     A4 E4 05 F1 | 	add	objptr, ##34468
1b614     F2 FA 61 FC | 	wrlong	result1, objptr
1b618     43 00 00 FF 
1b61c     A4 E4 85 F1 | 	sub	objptr, ##34468
1b620     F2 FA 01 F6 | 	mov	result1, objptr
1b624     00 68 00 FF 
1b628     00 FA 45 F5 | 	or	result1, ##13631488
1b62c     43 00 00 FF 
1b630     D4 E4 05 F1 | 	add	objptr, ##34516
1b634     F2 FA 61 FC | 	wrlong	result1, objptr
1b638     43 00 00 FF 
1b63c     D4 E4 85 F1 | 	sub	objptr, ##34516
1b640     F2 FA 01 F6 | 	mov	result1, objptr
1b644     00 68 00 FF 
1b648     00 FA 45 F5 | 	or	result1, ##13631488
1b64c     43 00 00 FF 
1b650     D0 E4 05 F1 | 	add	objptr, ##34512
1b654     F2 FA 61 FC | 	wrlong	result1, objptr
1b658     43 00 00 FF 
1b65c     D0 E4 85 F1 | 	sub	objptr, ##34512
1b660     F2 FA 01 F6 | 	mov	result1, objptr
1b664     00 68 00 FF 
1b668     00 FA 45 F5 | 	or	result1, ##13631488
1b66c     43 00 00 FF 
1b670     D8 E4 05 F1 | 	add	objptr, ##34520
1b674     F2 FA 61 FC | 	wrlong	result1, objptr
1b678     43 00 00 FF 
1b67c     D8 E4 85 F1 | 	sub	objptr, ##34520
1b680     F2 FA 01 F6 | 	mov	result1, objptr
1b684     00 68 00 FF 
1b688     00 FA 45 F5 | 	or	result1, ##13631488
1b68c     43 00 00 FF 
1b690     DC E4 05 F1 | 	add	objptr, ##34524
1b694     F2 FA 61 FC | 	wrlong	result1, objptr
1b698     43 00 00 FF 
1b69c     DC E4 85 F1 | 	sub	objptr, ##34524
1b6a0     F2 FA 01 F6 | 	mov	result1, objptr
1b6a4     00 68 00 FF 
1b6a8     00 FA 45 F5 | 	or	result1, ##13631488
1b6ac     43 00 00 FF 
1b6b0     0C E5 05 F1 | 	add	objptr, ##34572
1b6b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b6b8     43 00 00 FF 
1b6bc     0C E5 85 F1 | 	sub	objptr, ##34572
1b6c0     F2 FA 01 F6 | 	mov	result1, objptr
1b6c4     55 FA 25 F4 | 	bith	result1, #85
1b6c8     43 00 00 FF 
1b6cc     BC E4 05 F1 | 	add	objptr, ##34492
1b6d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6d4     43 00 00 FF 
1b6d8     BC E4 85 F1 | 	sub	objptr, ##34492
1b6dc     F2 FA 01 F6 | 	mov	result1, objptr
1b6e0     00 68 00 FF 
1b6e4     00 FA 45 F5 | 	or	result1, ##13631488
1b6e8     43 00 00 FF 
1b6ec     10 E5 05 F1 | 	add	objptr, ##34576
1b6f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6f4     43 00 00 FF 
1b6f8     10 E5 85 F1 | 	sub	objptr, ##34576
1b6fc     F2 FA 01 F6 | 	mov	result1, objptr
1b700     00 68 00 FF 
1b704     00 FA 45 F5 | 	or	result1, ##13631488
1b708     43 00 00 FF 
1b70c     E0 E4 05 F1 | 	add	objptr, ##34528
1b710     F2 FA 61 FC | 	wrlong	result1, objptr
1b714     43 00 00 FF 
1b718     E0 E4 85 F1 | 	sub	objptr, ##34528
1b71c     F2 FA 01 F6 | 	mov	result1, objptr
1b720     00 68 00 FF 
1b724     00 FA 45 F5 | 	or	result1, ##13631488
1b728     43 00 00 FF 
1b72c     E4 E4 05 F1 | 	add	objptr, ##34532
1b730     F2 FA 61 FC | 	wrlong	result1, objptr
1b734     43 00 00 FF 
1b738     E4 E4 85 F1 | 	sub	objptr, ##34532
1b73c     F2 FA 01 F6 | 	mov	result1, objptr
1b740     00 68 00 FF 
1b744     00 FA 45 F5 | 	or	result1, ##13631488
1b748     43 00 00 FF 
1b74c     E8 E4 05 F1 | 	add	objptr, ##34536
1b750     F2 FA 61 FC | 	wrlong	result1, objptr
1b754     43 00 00 FF 
1b758     E8 E4 85 F1 | 	sub	objptr, ##34536
1b75c     F2 FA 01 F6 | 	mov	result1, objptr
1b760     74 FA 25 F4 | 	bith	result1, #116
1b764     43 00 00 FF 
1b768     60 E5 05 F1 | 	add	objptr, ##34656
1b76c     F2 FA 61 FC | 	wrlong	result1, objptr
1b770     43 00 00 FF 
1b774     60 E5 85 F1 | 	sub	objptr, ##34656
1b778     F2 FA 01 F6 | 	mov	result1, objptr
1b77c     18 FA 25 F4 | 	bith	result1, #24
1b780     43 00 00 FF 
1b784     64 E5 05 F1 | 	add	objptr, ##34660
1b788     F2 FA 61 FC | 	wrlong	result1, objptr
1b78c     43 00 00 FF 
1b790     64 E5 85 F1 | 	sub	objptr, ##34660
1b794     F2 FA 01 F6 | 	mov	result1, objptr
1b798     00 88 00 FF 
1b79c     00 FA 45 F5 | 	or	result1, ##17825792
1b7a0     43 00 00 FF 
1b7a4     68 E5 05 F1 | 	add	objptr, ##34664
1b7a8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7ac     43 00 00 FF 
1b7b0     68 E5 85 F1 | 	sub	objptr, ##34664
1b7b4     F2 FA 01 F6 | 	mov	result1, objptr
1b7b8     00 90 00 FF 
1b7bc     00 FA 45 F5 | 	or	result1, ##18874368
1b7c0     43 00 00 FF 
1b7c4     6C E5 05 F1 | 	add	objptr, ##34668
1b7c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7cc     43 00 00 FF 
1b7d0     6C E5 85 F1 | 	sub	objptr, ##34668
1b7d4     F2 FA 01 F6 | 	mov	result1, objptr
1b7d8     00 98 00 FF 
1b7dc     00 FA 45 F5 | 	or	result1, ##19922944
1b7e0     43 00 00 FF 
1b7e4     70 E5 05 F1 | 	add	objptr, ##34672
1b7e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7ec     43 00 00 FF 
1b7f0     70 E5 85 F1 | 	sub	objptr, ##34672
1b7f4     F2 FA 01 F6 | 	mov	result1, objptr
1b7f8     00 A0 00 FF 
1b7fc     00 FA 45 F5 | 	or	result1, ##20971520
1b800     43 00 00 FF 
1b804     74 E5 05 F1 | 	add	objptr, ##34676
1b808     F2 FA 61 FC | 	wrlong	result1, objptr
1b80c     43 00 00 FF 
1b810     74 E5 85 F1 | 	sub	objptr, ##34676
1b814     F2 FA 01 F6 | 	mov	result1, objptr
1b818     00 A8 00 FF 
1b81c     00 FA 45 F5 | 	or	result1, ##22020096
1b820     43 00 00 FF 
1b824     78 E5 05 F1 | 	add	objptr, ##34680
1b828     F2 FA 61 FC | 	wrlong	result1, objptr
1b82c     43 00 00 FF 
1b830     78 E5 85 F1 | 	sub	objptr, ##34680
1b834     F2 FA 01 F6 | 	mov	result1, objptr
1b838     00 B0 00 FF 
1b83c     00 FA 45 F5 | 	or	result1, ##23068672
1b840     43 00 00 FF 
1b844     7C E5 05 F1 | 	add	objptr, ##34684
1b848     F2 FA 61 FC | 	wrlong	result1, objptr
1b84c     43 00 00 FF 
1b850     7C E5 85 F1 | 	sub	objptr, ##34684
1b854     F2 FA 01 F6 | 	mov	result1, objptr
1b858     00 B8 00 FF 
1b85c     00 FA 45 F5 | 	or	result1, ##24117248
1b860     43 00 00 FF 
1b864     80 E5 05 F1 | 	add	objptr, ##34688
1b868     F2 FA 61 FC | 	wrlong	result1, objptr
1b86c     43 00 00 FF 
1b870     80 E5 85 F1 | 	sub	objptr, ##34688
1b874     F2 FA 01 F6 | 	mov	result1, objptr
1b878     37 FA 25 F4 | 	bith	result1, #55
1b87c     43 00 00 FF 
1b880     84 E5 05 F1 | 	add	objptr, ##34692
1b884     F2 FA 61 FC | 	wrlong	result1, objptr
1b888     43 00 00 FF 
1b88c     84 E5 85 F1 | 	sub	objptr, ##34692
1b890     F2 FA 01 F6 | 	mov	result1, objptr
1b894     00 C8 00 FF 
1b898     00 FA 45 F5 | 	or	result1, ##26214400
1b89c     43 00 00 FF 
1b8a0     88 E5 05 F1 | 	add	objptr, ##34696
1b8a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8a8     43 00 00 FF 
1b8ac     88 E5 85 F1 | 	sub	objptr, ##34696
1b8b0     F2 FA 01 F6 | 	mov	result1, objptr
1b8b4     00 D0 00 FF 
1b8b8     00 FA 45 F5 | 	or	result1, ##27262976
1b8bc     43 00 00 FF 
1b8c0     8C E5 05 F1 | 	add	objptr, ##34700
1b8c4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8c8     43 00 00 FF 
1b8cc     8C E5 85 F1 | 	sub	objptr, ##34700
1b8d0     F2 FA 01 F6 | 	mov	result1, objptr
1b8d4     00 D8 00 FF 
1b8d8     00 FA 45 F5 | 	or	result1, ##28311552
1b8dc     43 00 00 FF 
1b8e0     90 E5 05 F1 | 	add	objptr, ##34704
1b8e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8e8     43 00 00 FF 
1b8ec     90 E5 85 F1 | 	sub	objptr, ##34704
1b8f0     F2 FA 01 F6 | 	mov	result1, objptr
1b8f4     56 FA 25 F4 | 	bith	result1, #86
1b8f8     43 00 00 FF 
1b8fc     94 E5 05 F1 | 	add	objptr, ##34708
1b900     F2 FA 61 FC | 	wrlong	result1, objptr
1b904     43 00 00 FF 
1b908     94 E5 85 F1 | 	sub	objptr, ##34708
1b90c     F2 FA 01 F6 | 	mov	result1, objptr
1b910     00 E8 00 FF 
1b914     00 FA 45 F5 | 	or	result1, ##30408704
1b918     45 00 00 FF 
1b91c     5C E4 05 F1 | 	add	objptr, ##35420
1b920     F2 FA 61 FC | 	wrlong	result1, objptr
1b924     45 00 00 FF 
1b928     5C E4 85 F1 | 	sub	objptr, ##35420
1b92c     F2 FA 01 F6 | 	mov	result1, objptr
1b930     75 FA 25 F4 | 	bith	result1, #117
1b934     43 00 00 FF 
1b938     98 E5 05 F1 | 	add	objptr, ##34712
1b93c     F2 FA 61 FC | 	wrlong	result1, objptr
1b940     43 00 00 FF 
1b944     98 E5 85 F1 | 	sub	objptr, ##34712
1b948     F2 FA 01 F6 | 	mov	result1, objptr
1b94c     94 FA 25 F4 | 	bith	result1, #148
1b950     43 00 00 FF 
1b954     AC E5 05 F1 | 	add	objptr, ##34732
1b958     F2 FA 61 FC | 	wrlong	result1, objptr
1b95c     43 00 00 FF 
1b960     AC E5 85 F1 | 	sub	objptr, ##34732
1b964     F2 FA 01 F6 | 	mov	result1, objptr
1b968     19 FA 25 F4 | 	bith	result1, #25
1b96c     43 00 00 FF 
1b970     9C E5 05 F1 | 	add	objptr, ##34716
1b974     F2 FA 61 FC | 	wrlong	result1, objptr
1b978     43 00 00 FF 
1b97c     9C E5 85 F1 | 	sub	objptr, ##34716
1b980     F2 FA 01 F6 | 	mov	result1, objptr
1b984     00 08 01 FF 
1b988     00 FA 45 F5 | 	or	result1, ##34603008
1b98c     43 00 00 FF 
1b990     B8 E4 05 F1 | 	add	objptr, ##34488
1b994     F2 FA 61 FC | 	wrlong	result1, objptr
1b998     43 00 00 FF 
1b99c     B8 E4 85 F1 | 	sub	objptr, ##34488
1b9a0     F2 FA 01 F6 | 	mov	result1, objptr
1b9a4     00 10 01 FF 
1b9a8     00 FA 45 F5 | 	or	result1, ##35651584
1b9ac     43 00 00 FF 
1b9b0     A0 E5 05 F1 | 	add	objptr, ##34720
1b9b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9b8     43 00 00 FF 
1b9bc     A0 E5 85 F1 | 	sub	objptr, ##34720
1b9c0     F2 FA 01 F6 | 	mov	result1, objptr
1b9c4     00 18 01 FF 
1b9c8     00 FA 45 F5 | 	or	result1, ##36700160
1b9cc     43 00 00 FF 
1b9d0     A4 E5 05 F1 | 	add	objptr, ##34724
1b9d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9d8     43 00 00 FF 
1b9dc     A4 E5 85 F1 | 	sub	objptr, ##34724
1b9e0     F2 FA 01 F6 | 	mov	result1, objptr
1b9e4     00 20 01 FF 
1b9e8     00 FA 45 F5 | 	or	result1, ##37748736
1b9ec     43 00 00 FF 
1b9f0     A8 E5 05 F1 | 	add	objptr, ##34728
1b9f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9f8     43 00 00 FF 
1b9fc     A8 E5 85 F1 | 	sub	objptr, ##34728
1ba00     F2 FA 01 F6 | 	mov	result1, objptr
1ba04     00 28 01 FF 
1ba08     00 FA 45 F5 | 	or	result1, ##38797312
1ba0c     43 00 00 FF 
1ba10     B4 E5 05 F1 | 	add	objptr, ##34740
1ba14     F2 FA 61 FC | 	wrlong	result1, objptr
1ba18     43 00 00 FF 
1ba1c     B4 E5 85 F1 | 	sub	objptr, ##34740
1ba20     F2 FA 01 F6 | 	mov	result1, objptr
1ba24     00 30 01 FF 
1ba28     00 FA 45 F5 | 	or	result1, ##39845888
1ba2c     43 00 00 FF 
1ba30     B8 E5 05 F1 | 	add	objptr, ##34744
1ba34     F2 FA 61 FC | 	wrlong	result1, objptr
1ba38     43 00 00 FF 
1ba3c     B8 E5 85 F1 | 	sub	objptr, ##34744
1ba40     F2 FA 01 F6 | 	mov	result1, objptr
1ba44     00 38 01 FF 
1ba48     00 FA 45 F5 | 	or	result1, ##40894464
1ba4c     43 00 00 FF 
1ba50     BC E5 05 F1 | 	add	objptr, ##34748
1ba54     F2 FA 61 FC | 	wrlong	result1, objptr
1ba58     43 00 00 FF 
1ba5c     BC E5 85 F1 | 	sub	objptr, ##34748
1ba60     F2 FA 01 F6 | 	mov	result1, objptr
1ba64     00 40 01 FF 
1ba68     00 FA 45 F5 | 	or	result1, ##41943040
1ba6c     43 00 00 FF 
1ba70     C0 E5 05 F1 | 	add	objptr, ##34752
1ba74     F2 FA 61 FC | 	wrlong	result1, objptr
1ba78     43 00 00 FF 
1ba7c     C0 E5 85 F1 | 	sub	objptr, ##34752
1ba80     F2 FA 01 F6 | 	mov	result1, objptr
1ba84     00 48 01 FF 
1ba88     00 FA 45 F5 | 	or	result1, ##42991616
1ba8c     43 00 00 FF 
1ba90     C8 E5 05 F1 | 	add	objptr, ##34760
1ba94     F2 FA 61 FC | 	wrlong	result1, objptr
1ba98     43 00 00 FF 
1ba9c     C8 E5 85 F1 | 	sub	objptr, ##34760
1baa0     F2 FA 01 F6 | 	mov	result1, objptr
1baa4     00 08 01 FF 
1baa8     00 FA 45 F5 | 	or	result1, ##34603008
1baac     43 00 00 FF 
1bab0     CC E5 05 F1 | 	add	objptr, ##34764
1bab4     F2 FA 61 FC | 	wrlong	result1, objptr
1bab8     43 00 00 FF 
1babc     CC E5 85 F1 | 	sub	objptr, ##34764
1bac0     F2 FA 01 F6 | 	mov	result1, objptr
1bac4     00 50 01 FF 
1bac8     00 FA 45 F5 | 	or	result1, ##44040192
1bacc     43 00 00 FF 
1bad0     CC E4 05 F1 | 	add	objptr, ##34508
1bad4     F2 FA 61 FC | 	wrlong	result1, objptr
1bad8     43 00 00 FF 
1badc     CC E4 85 F1 | 	sub	objptr, ##34508
1bae0     F2 FA 01 F6 | 	mov	result1, objptr
1bae4     00 58 01 FF 
1bae8     00 FA 45 F5 | 	or	result1, ##45088768
1baec     43 00 00 FF 
1baf0     FC E4 05 F1 | 	add	objptr, ##34556
1baf4     F2 FA 61 FC | 	wrlong	result1, objptr
1baf8     43 00 00 FF 
1bafc     FC E4 85 F1 | 	sub	objptr, ##34556
1bb00     F2 FA 01 F6 | 	mov	result1, objptr
1bb04     00 60 01 FF 
1bb08     00 FA 45 F5 | 	or	result1, ##46137344
1bb0c     43 00 00 FF 
1bb10     F8 E4 05 F1 | 	add	objptr, ##34552
1bb14     F2 FA 61 FC | 	wrlong	result1, objptr
1bb18     43 00 00 FF 
1bb1c     F8 E4 85 F1 | 	sub	objptr, ##34552
1bb20     F2 FA 01 F6 | 	mov	result1, objptr
1bb24     00 68 01 FF 
1bb28     00 FA 45 F5 | 	or	result1, ##47185920
1bb2c     43 00 00 FF 
1bb30     9C E4 05 F1 | 	add	objptr, ##34460
1bb34     F2 FA 61 FC | 	wrlong	result1, objptr
1bb38     43 00 00 FF 
1bb3c     9C E4 85 F1 | 	sub	objptr, ##34460
1bb40     F2 FA 01 F6 | 	mov	result1, objptr
1bb44     00 70 01 FF 
1bb48     00 FA 45 F5 | 	or	result1, ##48234496
1bb4c     43 00 00 FF 
1bb50     A0 E4 05 F1 | 	add	objptr, ##34464
1bb54     F2 FA 61 FC | 	wrlong	result1, objptr
1bb58     43 00 00 FF 
1bb5c     A0 E4 85 F1 | 	sub	objptr, ##34464
1bb60     F2 FA 01 F6 | 	mov	result1, objptr
1bb64     00 78 01 FF 
1bb68     00 FA 45 F5 | 	or	result1, ##49283072
1bb6c     43 00 00 FF 
1bb70     08 E5 05 F1 | 	add	objptr, ##34568
1bb74     F2 FA 61 FC | 	wrlong	result1, objptr
1bb78     43 00 00 FF 
1bb7c     08 E5 85 F1 | 	sub	objptr, ##34568
1bb80     F2 FA 01 F6 | 	mov	result1, objptr
1bb84     38 FA 25 F4 | 	bith	result1, #56
1bb88     43 00 00 FF 
1bb8c     B0 E5 05 F1 | 	add	objptr, ##34736
1bb90     F2 FA 61 FC | 	wrlong	result1, objptr
1bb94     43 00 00 FF 
1bb98     B0 E5 85 F1 | 	sub	objptr, ##34736
1bb9c     F2 FA 01 F6 | 	mov	result1, objptr
1bba0     00 88 01 FF 
1bba4     00 FA 45 F5 | 	or	result1, ##51380224
1bba8     43 00 00 FF 
1bbac     C4 E5 05 F1 | 	add	objptr, ##34756
1bbb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb4     43 00 00 FF 
1bbb8     C4 E5 85 F1 | 	sub	objptr, ##34756
1bbbc     F2 FA 01 F6 | 	mov	result1, objptr
1bbc0     00 90 01 FF 
1bbc4     00 FA 45 F5 | 	or	result1, ##52428800
1bbc8     43 00 00 FF 
1bbcc     D0 E5 05 F1 | 	add	objptr, ##34768
1bbd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bbd4     43 00 00 FF 
1bbd8     D0 E5 85 F1 | 	sub	objptr, ##34768
1bbdc     F2 FA 01 F6 | 	mov	result1, objptr
1bbe0     00 98 01 FF 
1bbe4     00 FA 45 F5 | 	or	result1, ##53477376
1bbe8     43 00 00 FF 
1bbec     D4 E5 05 F1 | 	add	objptr, ##34772
1bbf0     F2 FA 61 FC | 	wrlong	result1, objptr
1bbf4     43 00 00 FF 
1bbf8     D4 E5 85 F1 | 	sub	objptr, ##34772
1bbfc     F2 FA 01 F6 | 	mov	result1, objptr
1bc00     00 A0 01 FF 
1bc04     00 FA 45 F5 | 	or	result1, ##54525952
1bc08     43 00 00 FF 
1bc0c     D8 E5 05 F1 | 	add	objptr, ##34776
1bc10     F2 FA 61 FC | 	wrlong	result1, objptr
1bc14     43 00 00 FF 
1bc18     D8 E5 85 F1 | 	sub	objptr, ##34776
1bc1c     F2 FA 01 F6 | 	mov	result1, objptr
1bc20     00 A8 01 FF 
1bc24     00 FA 45 F5 | 	or	result1, ##55574528
1bc28     43 00 00 FF 
1bc2c     DC E5 05 F1 | 	add	objptr, ##34780
1bc30     F2 FA 61 FC | 	wrlong	result1, objptr
1bc34     43 00 00 FF 
1bc38     DC E5 85 F1 | 	sub	objptr, ##34780
1bc3c     F2 FA 01 F6 | 	mov	result1, objptr
1bc40     00 B0 01 FF 
1bc44     00 FA 45 F5 | 	or	result1, ##56623104
1bc48     43 00 00 FF 
1bc4c     E0 E5 05 F1 | 	add	objptr, ##34784
1bc50     F2 FA 61 FC | 	wrlong	result1, objptr
1bc54     43 00 00 FF 
1bc58     E0 E5 85 F1 | 	sub	objptr, ##34784
1bc5c     F2 FA 01 F6 | 	mov	result1, objptr
1bc60     00 B8 01 FF 
1bc64     00 FA 45 F5 | 	or	result1, ##57671680
1bc68     43 00 00 FF 
1bc6c     E4 E5 05 F1 | 	add	objptr, ##34788
1bc70     F2 FA 61 FC | 	wrlong	result1, objptr
1bc74     43 00 00 FF 
1bc78     E4 E5 85 F1 | 	sub	objptr, ##34788
1bc7c     F2 FA 01 F6 | 	mov	result1, objptr
1bc80     94 FA 25 F4 | 	bith	result1, #148
1bc84     43 00 00 FF 
1bc88     AC E5 05 F1 | 	add	objptr, ##34732
1bc8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc90     43 00 00 FF 
1bc94     AC E5 85 F1 | 	sub	objptr, ##34732
1bc98     F2 FA 01 F6 | 	mov	result1, objptr
1bc9c     57 FA 25 F4 | 	bith	result1, #87
1bca0     43 00 00 FF 
1bca4     EC E5 05 F1 | 	add	objptr, ##34796
1bca8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcac     43 00 00 FF 
1bcb0     EC E5 85 F1 | 	sub	objptr, ##34796
1bcb4     F2 FA 01 F6 | 	mov	result1, objptr
1bcb8     00 C8 01 FF 
1bcbc     00 FA 45 F5 | 	or	result1, ##59768832
1bcc0     43 00 00 FF 
1bcc4     E8 E5 05 F1 | 	add	objptr, ##34792
1bcc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bccc     43 00 00 FF 
1bcd0     E8 E5 85 F1 | 	sub	objptr, ##34792
1bcd4     F2 FA 01 F6 | 	mov	result1, objptr
1bcd8     00 D0 01 FF 
1bcdc     00 FA 45 F5 | 	or	result1, ##60817408
1bce0     44 00 00 FF 
1bce4     00 E4 05 F1 | 	add	objptr, ##34816
1bce8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcec     44 00 00 FF 
1bcf0     00 E4 85 F1 | 	sub	objptr, ##34816
1bcf4     F2 FA 01 F6 | 	mov	result1, objptr
1bcf8     00 D8 01 FF 
1bcfc     00 FA 45 F5 | 	or	result1, ##61865984
1bd00     44 00 00 FF 
1bd04     04 E4 05 F1 | 	add	objptr, ##34820
1bd08     F2 FA 61 FC | 	wrlong	result1, objptr
1bd0c     44 00 00 FF 
1bd10     04 E4 85 F1 | 	sub	objptr, ##34820
1bd14     F2 FA 01 F6 | 	mov	result1, objptr
1bd18     76 FA 25 F4 | 	bith	result1, #118
1bd1c     43 00 00 FF 
1bd20     F0 E5 05 F1 | 	add	objptr, ##34800
1bd24     F2 FA 61 FC | 	wrlong	result1, objptr
1bd28     43 00 00 FF 
1bd2c     F0 E5 85 F1 | 	sub	objptr, ##34800
1bd30     F2 FA 01 F6 | 	mov	result1, objptr
1bd34     00 E8 01 FF 
1bd38     00 FA 45 F5 | 	or	result1, ##63963136
1bd3c     43 00 00 FF 
1bd40     F4 E5 05 F1 | 	add	objptr, ##34804
1bd44     F2 FA 61 FC | 	wrlong	result1, objptr
1bd48     43 00 00 FF 
1bd4c     F4 E5 85 F1 | 	sub	objptr, ##34804
1bd50     F2 FA 01 F6 | 	mov	result1, objptr
1bd54     95 FA 25 F4 | 	bith	result1, #149
1bd58     43 00 00 FF 
1bd5c     F8 E5 05 F1 | 	add	objptr, ##34808
1bd60     F2 FA 61 FC | 	wrlong	result1, objptr
1bd64     43 00 00 FF 
1bd68     F8 E5 85 F1 | 	sub	objptr, ##34808
1bd6c     F2 FA 01 F6 | 	mov	result1, objptr
1bd70     B4 FA 25 F4 | 	bith	result1, #180
1bd74     43 00 00 FF 
1bd78     FC E5 05 F1 | 	add	objptr, ##34812
1bd7c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd80     43 00 00 FF 
1bd84     FC E5 85 F1 | 	sub	objptr, ##34812
1bd88     F2 FA 01 F6 | 	mov	result1, objptr
1bd8c     1A FA 25 F4 | 	bith	result1, #26
1bd90     44 00 00 FF 
1bd94     0C E4 05 F1 | 	add	objptr, ##34828
1bd98     F2 FA 61 FC | 	wrlong	result1, objptr
1bd9c     44 00 00 FF 
1bda0     0C E4 85 F1 | 	sub	objptr, ##34828
1bda4     F2 FA 01 F6 | 	mov	result1, objptr
1bda8     00 08 02 FF 
1bdac     00 FA 45 F5 | 	or	result1, ##68157440
1bdb0     44 00 00 FF 
1bdb4     08 E4 05 F1 | 	add	objptr, ##34824
1bdb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdbc     44 00 00 FF 
1bdc0     08 E4 85 F1 | 	sub	objptr, ##34824
1bdc4     F2 FA 01 F6 | 	mov	result1, objptr
1bdc8     00 10 02 FF 
1bdcc     00 FA 45 F5 | 	or	result1, ##69206016
1bdd0     44 00 00 FF 
1bdd4     18 E4 05 F1 | 	add	objptr, ##34840
1bdd8     F2 FA 61 FC | 	wrlong	result1, objptr
1bddc     44 00 00 FF 
1bde0     18 E4 85 F1 | 	sub	objptr, ##34840
1bde4     F2 FA 01 F6 | 	mov	result1, objptr
1bde8     00 18 02 FF 
1bdec     00 FA 45 F5 | 	or	result1, ##70254592
1bdf0     44 00 00 FF 
1bdf4     14 E4 05 F1 | 	add	objptr, ##34836
1bdf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdfc     44 00 00 FF 
1be00     14 E4 85 F1 | 	sub	objptr, ##34836
1be04     F2 FA 01 F6 | 	mov	result1, objptr
1be08     00 20 02 FF 
1be0c     00 FA 45 F5 | 	or	result1, ##71303168
1be10     44 00 00 FF 
1be14     10 E4 05 F1 | 	add	objptr, ##34832
1be18     F2 FA 61 FC | 	wrlong	result1, objptr
1be1c     44 00 00 FF 
1be20     10 E4 85 F1 | 	sub	objptr, ##34832
1be24     F2 FA 01 F6 | 	mov	result1, objptr
1be28     00 28 02 FF 
1be2c     00 FA 45 F5 | 	or	result1, ##72351744
1be30     44 00 00 FF 
1be34     1C E4 05 F1 | 	add	objptr, ##34844
1be38     F2 FA 61 FC | 	wrlong	result1, objptr
1be3c     44 00 00 FF 
1be40     1C E4 85 F1 | 	sub	objptr, ##34844
1be44     F2 FA 01 F6 | 	mov	result1, objptr
1be48     00 30 02 FF 
1be4c     00 FA 45 F5 | 	or	result1, ##73400320
1be50     44 00 00 FF 
1be54     20 E4 05 F1 | 	add	objptr, ##34848
1be58     F2 FA 61 FC | 	wrlong	result1, objptr
1be5c     44 00 00 FF 
1be60     20 E4 85 F1 | 	sub	objptr, ##34848
1be64     F2 FA 01 F6 | 	mov	result1, objptr
1be68     00 38 02 FF 
1be6c     00 FA 45 F5 | 	or	result1, ##74448896
1be70     43 00 00 FF 
1be74     B4 E4 05 F1 | 	add	objptr, ##34484
1be78     F2 FA 61 FC | 	wrlong	result1, objptr
1be7c     43 00 00 FF 
1be80     B4 E4 85 F1 | 	sub	objptr, ##34484
1be84     F2 FA 01 F6 | 	mov	result1, objptr
1be88     00 40 02 FF 
1be8c     00 FA 45 F5 | 	or	result1, ##75497472
1be90     44 00 00 FF 
1be94     38 E4 05 F1 | 	add	objptr, ##34872
1be98     F2 FA 61 FC | 	wrlong	result1, objptr
1be9c     44 00 00 FF 
1bea0     38 E4 85 F1 | 	sub	objptr, ##34872
1bea4     F2 FA 01 F6 | 	mov	result1, objptr
1bea8     00 48 02 FF 
1beac     00 FA 45 F5 | 	or	result1, ##76546048
1beb0     44 00 00 FF 
1beb4     48 E4 05 F1 | 	add	objptr, ##34888
1beb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bebc     44 00 00 FF 
1bec0     48 E4 85 F1 | 	sub	objptr, ##34888
1bec4     F2 FA 01 F6 | 	mov	result1, objptr
1bec8     00 50 02 FF 
1becc     00 FA 45 F5 | 	or	result1, ##77594624
1bed0     44 00 00 FF 
1bed4     4C E4 05 F1 | 	add	objptr, ##34892
1bed8     F2 FA 61 FC | 	wrlong	result1, objptr
1bedc     44 00 00 FF 
1bee0     4C E4 85 F1 | 	sub	objptr, ##34892
1bee4     F2 FA 01 F6 | 	mov	result1, objptr
1bee8     00 58 02 FF 
1beec     00 FA 45 F5 | 	or	result1, ##78643200
1bef0     44 00 00 FF 
1bef4     44 E4 05 F1 | 	add	objptr, ##34884
1bef8     F2 FA 61 FC | 	wrlong	result1, objptr
1befc     44 00 00 FF 
1bf00     44 E4 85 F1 | 	sub	objptr, ##34884
1bf04     F2 FA 01 F6 | 	mov	result1, objptr
1bf08     00 60 02 FF 
1bf0c     00 FA 45 F5 | 	or	result1, ##79691776
1bf10     44 00 00 FF 
1bf14     3C E4 05 F1 | 	add	objptr, ##34876
1bf18     F2 FA 61 FC | 	wrlong	result1, objptr
1bf1c     44 00 00 FF 
1bf20     3C E4 85 F1 | 	sub	objptr, ##34876
1bf24     F2 FA 01 F6 | 	mov	result1, objptr
1bf28     00 68 02 FF 
1bf2c     00 FA 45 F5 | 	or	result1, ##80740352
1bf30     44 00 00 FF 
1bf34     40 E4 05 F1 | 	add	objptr, ##34880
1bf38     F2 FA 61 FC | 	wrlong	result1, objptr
1bf3c     44 00 00 FF 
1bf40     40 E4 85 F1 | 	sub	objptr, ##34880
1bf44     F2 FA 01 F6 | 	mov	result1, objptr
1bf48     00 70 02 FF 
1bf4c     00 FA 45 F5 | 	or	result1, ##81788928
1bf50     44 00 00 FF 
1bf54     50 E4 05 F1 | 	add	objptr, ##34896
1bf58     F2 FA 61 FC | 	wrlong	result1, objptr
1bf5c     44 00 00 FF 
1bf60     50 E4 85 F1 | 	sub	objptr, ##34896
1bf64     F2 FA 01 F6 | 	mov	result1, objptr
1bf68     00 78 02 FF 
1bf6c     00 FA 45 F5 | 	or	result1, ##82837504
1bf70     44 00 00 FF 
1bf74     54 E4 05 F1 | 	add	objptr, ##34900
1bf78     F2 FA 61 FC | 	wrlong	result1, objptr
1bf7c     44 00 00 FF 
1bf80     54 E4 85 F1 | 	sub	objptr, ##34900
1bf84     F2 FA 01 F6 | 	mov	result1, objptr
1bf88     00 80 02 FF 
1bf8c     00 FA 45 F5 | 	or	result1, ##83886080
1bf90     44 00 00 FF 
1bf94     58 E4 05 F1 | 	add	objptr, ##34904
1bf98     F2 FA 61 FC | 	wrlong	result1, objptr
1bf9c     44 00 00 FF 
1bfa0     58 E4 85 F1 | 	sub	objptr, ##34904
1bfa4     F2 FA 01 F6 | 	mov	result1, objptr
1bfa8     00 88 02 FF 
1bfac     00 FA 45 F5 | 	or	result1, ##84934656
1bfb0     44 00 00 FF 
1bfb4     5C E4 05 F1 | 	add	objptr, ##34908
1bfb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfbc     44 00 00 FF 
1bfc0     5C E4 85 F1 | 	sub	objptr, ##34908
1bfc4     F2 FA 01 F6 | 	mov	result1, objptr
1bfc8     00 90 02 FF 
1bfcc     00 FA 45 F5 | 	or	result1, ##85983232
1bfd0     44 00 00 FF 
1bfd4     60 E4 05 F1 | 	add	objptr, ##34912
1bfd8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfdc     44 00 00 FF 
1bfe0     60 E4 85 F1 | 	sub	objptr, ##34912
1bfe4     F2 FA 01 F6 | 	mov	result1, objptr
1bfe8     00 98 02 FF 
1bfec     00 FA 45 F5 | 	or	result1, ##87031808
1bff0     44 00 00 FF 
1bff4     64 E4 05 F1 | 	add	objptr, ##34916
1bff8     F2 FA 61 FC | 	wrlong	result1, objptr
1bffc     44 00 00 FF 
1c000     64 E4 85 F1 | 	sub	objptr, ##34916
1c004     F2 FA 01 F6 | 	mov	result1, objptr
1c008     00 A0 02 FF 
1c00c     00 FA 45 F5 | 	or	result1, ##88080384
1c010     44 00 00 FF 
1c014     68 E4 05 F1 | 	add	objptr, ##34920
1c018     F2 FA 61 FC | 	wrlong	result1, objptr
1c01c     44 00 00 FF 
1c020     68 E4 85 F1 | 	sub	objptr, ##34920
1c024     F2 FA 01 F6 | 	mov	result1, objptr
1c028     00 A8 02 FF 
1c02c     00 FA 45 F5 | 	or	result1, ##89128960
1c030     44 00 00 FF 
1c034     6C E4 05 F1 | 	add	objptr, ##34924
1c038     F2 FA 61 FC | 	wrlong	result1, objptr
1c03c     44 00 00 FF 
1c040     6C E4 85 F1 | 	sub	objptr, ##34924
1c044     F2 FA 01 F6 | 	mov	result1, objptr
1c048     00 B0 02 FF 
1c04c     00 FA 45 F5 | 	or	result1, ##90177536
1c050     44 00 00 FF 
1c054     78 E4 05 F1 | 	add	objptr, ##34936
1c058     F2 FA 61 FC | 	wrlong	result1, objptr
1c05c     44 00 00 FF 
1c060     78 E4 85 F1 | 	sub	objptr, ##34936
1c064     F2 FA 01 F6 | 	mov	result1, objptr
1c068     00 B8 02 FF 
1c06c     00 FA 45 F5 | 	or	result1, ##91226112
1c070     44 00 00 FF 
1c074     70 E4 05 F1 | 	add	objptr, ##34928
1c078     F2 FA 61 FC | 	wrlong	result1, objptr
1c07c     44 00 00 FF 
1c080     70 E4 85 F1 | 	sub	objptr, ##34928
1c084     F2 FA 01 F6 | 	mov	result1, objptr
1c088     00 C0 02 FF 
1c08c     00 FA 45 F5 | 	or	result1, ##92274688
1c090     44 00 00 FF 
1c094     74 E4 05 F1 | 	add	objptr, ##34932
1c098     F2 FA 61 FC | 	wrlong	result1, objptr
1c09c     44 00 00 FF 
1c0a0     74 E4 85 F1 | 	sub	objptr, ##34932
1c0a4     F2 FA 01 F6 | 	mov	result1, objptr
1c0a8     00 C8 02 FF 
1c0ac     00 FA 45 F5 | 	or	result1, ##93323264
1c0b0     44 00 00 FF 
1c0b4     7C E4 05 F1 | 	add	objptr, ##34940
1c0b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0bc     44 00 00 FF 
1c0c0     7C E4 85 F1 | 	sub	objptr, ##34940
1c0c4     F2 FA 01 F6 | 	mov	result1, objptr
1c0c8     00 D0 02 FF 
1c0cc     00 FA 45 F5 | 	or	result1, ##94371840
1c0d0     44 00 00 FF 
1c0d4     24 E4 05 F1 | 	add	objptr, ##34852
1c0d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0dc     44 00 00 FF 
1c0e0     24 E4 85 F1 | 	sub	objptr, ##34852
1c0e4     F2 FA 01 F6 | 	mov	result1, objptr
1c0e8     00 D8 02 FF 
1c0ec     00 FA 45 F5 | 	or	result1, ##95420416
1c0f0     44 00 00 FF 
1c0f4     2C E4 05 F1 | 	add	objptr, ##34860
1c0f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0fc     44 00 00 FF 
1c100     2C E4 85 F1 | 	sub	objptr, ##34860
1c104     F2 FA 01 F6 | 	mov	result1, objptr
1c108     00 E0 02 FF 
1c10c     00 FA 45 F5 | 	or	result1, ##96468992
1c110     44 00 00 FF 
1c114     30 E4 05 F1 | 	add	objptr, ##34864
1c118     F2 FA 61 FC | 	wrlong	result1, objptr
1c11c     44 00 00 FF 
1c120     30 E4 85 F1 | 	sub	objptr, ##34864
1c124     F2 FA 01 F6 | 	mov	result1, objptr
1c128     00 E8 02 FF 
1c12c     00 FA 45 F5 | 	or	result1, ##97517568
1c130     44 00 00 FF 
1c134     80 E4 05 F1 | 	add	objptr, ##34944
1c138     F2 FA 61 FC | 	wrlong	result1, objptr
1c13c     44 00 00 FF 
1c140     80 E4 85 F1 | 	sub	objptr, ##34944
1c144     F2 FA 01 F6 | 	mov	result1, objptr
1c148     00 F0 02 FF 
1c14c     00 FA 45 F5 | 	or	result1, ##98566144
1c150     44 00 00 FF 
1c154     84 E4 05 F1 | 	add	objptr, ##34948
1c158     F2 FA 61 FC | 	wrlong	result1, objptr
1c15c     44 00 00 FF 
1c160     84 E4 85 F1 | 	sub	objptr, ##34948
1c164     F2 FA 01 F6 | 	mov	result1, objptr
1c168     00 F8 02 FF 
1c16c     00 FA 45 F5 | 	or	result1, ##99614720
1c170     44 00 00 FF 
1c174     88 E4 05 F1 | 	add	objptr, ##34952
1c178     F2 FA 61 FC | 	wrlong	result1, objptr
1c17c     44 00 00 FF 
1c180     88 E4 85 F1 | 	sub	objptr, ##34952
1c184     F2 FA 01 F6 | 	mov	result1, objptr
1c188     39 FA 25 F4 | 	bith	result1, #57
1c18c     44 00 00 FF 
1c190     34 E4 05 F1 | 	add	objptr, ##34868
1c194     F2 FA 61 FC | 	wrlong	result1, objptr
1c198     44 00 00 FF 
1c19c     34 E4 85 F1 | 	sub	objptr, ##34868
1c1a0     F2 FA 01 F6 | 	mov	result1, objptr
1c1a4     00 08 03 FF 
1c1a8     00 FA 45 F5 | 	or	result1, ##101711872
1c1ac     44 00 00 FF 
1c1b0     98 E4 05 F1 | 	add	objptr, ##34968
1c1b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b8     44 00 00 FF 
1c1bc     98 E4 85 F1 | 	sub	objptr, ##34968
1c1c0     F2 FA 01 F6 | 	mov	result1, objptr
1c1c4     00 10 03 FF 
1c1c8     00 FA 45 F5 | 	or	result1, ##102760448
1c1cc     44 00 00 FF 
1c1d0     A0 E4 05 F1 | 	add	objptr, ##34976
1c1d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d8     44 00 00 FF 
1c1dc     A0 E4 85 F1 | 	sub	objptr, ##34976
1c1e0     F2 FA 01 F6 | 	mov	result1, objptr
1c1e4     00 18 03 FF 
1c1e8     00 FA 45 F5 | 	or	result1, ##103809024
1c1ec     44 00 00 FF 
1c1f0     94 E4 05 F1 | 	add	objptr, ##34964
1c1f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f8     44 00 00 FF 
1c1fc     94 E4 85 F1 | 	sub	objptr, ##34964
1c200     F2 FA 01 F6 | 	mov	result1, objptr
1c204     00 20 03 FF 
1c208     00 FA 45 F5 | 	or	result1, ##104857600
1c20c     44 00 00 FF 
1c210     90 E4 05 F1 | 	add	objptr, ##34960
1c214     F2 FA 61 FC | 	wrlong	result1, objptr
1c218     44 00 00 FF 
1c21c     90 E4 85 F1 | 	sub	objptr, ##34960
1c220     F2 FA 01 F6 | 	mov	result1, objptr
1c224     00 28 03 FF 
1c228     00 FA 45 F5 | 	or	result1, ##105906176
1c22c     44 00 00 FF 
1c230     8C E4 05 F1 | 	add	objptr, ##34956
1c234     F2 FA 61 FC | 	wrlong	result1, objptr
1c238     44 00 00 FF 
1c23c     8C E4 85 F1 | 	sub	objptr, ##34956
1c240     F2 FA 01 F6 | 	mov	result1, objptr
1c244     00 30 03 FF 
1c248     00 FA 45 F5 | 	or	result1, ##106954752
1c24c     44 00 00 FF 
1c250     9C E4 05 F1 | 	add	objptr, ##34972
1c254     F2 FA 61 FC | 	wrlong	result1, objptr
1c258     44 00 00 FF 
1c25c     9C E4 85 F1 | 	sub	objptr, ##34972
1c260     F2 FA 01 F6 | 	mov	result1, objptr
1c264     00 38 03 FF 
1c268     00 FA 45 F5 | 	or	result1, ##108003328
1c26c     44 00 00 FF 
1c270     A4 E4 05 F1 | 	add	objptr, ##34980
1c274     F2 FA 61 FC | 	wrlong	result1, objptr
1c278     44 00 00 FF 
1c27c     A4 E4 85 F1 | 	sub	objptr, ##34980
1c280     F2 FA 01 F6 | 	mov	result1, objptr
1c284     00 40 03 FF 
1c288     00 FA 45 F5 | 	or	result1, ##109051904
1c28c     44 00 00 FF 
1c290     A8 E4 05 F1 | 	add	objptr, ##34984
1c294     F2 FA 61 FC | 	wrlong	result1, objptr
1c298     44 00 00 FF 
1c29c     A8 E4 85 F1 | 	sub	objptr, ##34984
1c2a0     F2 FA 01 F6 | 	mov	result1, objptr
1c2a4     00 48 03 FF 
1c2a8     00 FA 45 F5 | 	or	result1, ##110100480
1c2ac     44 00 00 FF 
1c2b0     AC E4 05 F1 | 	add	objptr, ##34988
1c2b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2b8     44 00 00 FF 
1c2bc     AC E4 85 F1 | 	sub	objptr, ##34988
1c2c0     F2 FA 01 F6 | 	mov	result1, objptr
1c2c4     00 50 03 FF 
1c2c8     00 FA 45 F5 | 	or	result1, ##111149056
1c2cc     44 00 00 FF 
1c2d0     B4 E4 05 F1 | 	add	objptr, ##34996
1c2d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2d8     44 00 00 FF 
1c2dc     B4 E4 85 F1 | 	sub	objptr, ##34996
1c2e0     F2 FA 01 F6 | 	mov	result1, objptr
1c2e4     00 58 03 FF 
1c2e8     00 FA 45 F5 | 	or	result1, ##112197632
1c2ec     44 00 00 FF 
1c2f0     B8 E4 05 F1 | 	add	objptr, ##35000
1c2f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2f8     44 00 00 FF 
1c2fc     B8 E4 85 F1 | 	sub	objptr, ##35000
1c300     F2 FA 01 F6 | 	mov	result1, objptr
1c304     00 60 03 FF 
1c308     00 FA 45 F5 | 	or	result1, ##113246208
1c30c     44 00 00 FF 
1c310     BC E4 05 F1 | 	add	objptr, ##35004
1c314     F2 FA 61 FC | 	wrlong	result1, objptr
1c318     44 00 00 FF 
1c31c     BC E4 85 F1 | 	sub	objptr, ##35004
1c320     F2 FA 01 F6 | 	mov	result1, objptr
1c324     00 68 03 FF 
1c328     00 FA 45 F5 | 	or	result1, ##114294784
1c32c     44 00 00 FF 
1c330     C0 E4 05 F1 | 	add	objptr, ##35008
1c334     F2 FA 61 FC | 	wrlong	result1, objptr
1c338     44 00 00 FF 
1c33c     C0 E4 85 F1 | 	sub	objptr, ##35008
1c340     F2 FA 01 F6 | 	mov	result1, objptr
1c344     00 70 03 FF 
1c348     00 FA 45 F5 | 	or	result1, ##115343360
1c34c     44 00 00 FF 
1c350     C4 E4 05 F1 | 	add	objptr, ##35012
1c354     F2 FA 61 FC | 	wrlong	result1, objptr
1c358     44 00 00 FF 
1c35c     C4 E4 85 F1 | 	sub	objptr, ##35012
1c360     F2 FA 01 F6 | 	mov	result1, objptr
1c364     00 78 03 FF 
1c368     00 FA 45 F5 | 	or	result1, ##116391936
1c36c     44 00 00 FF 
1c370     C8 E4 05 F1 | 	add	objptr, ##35016
1c374     F2 FA 61 FC | 	wrlong	result1, objptr
1c378     44 00 00 FF 
1c37c     C8 E4 85 F1 | 	sub	objptr, ##35016
1c380     F2 FA 01 F6 | 	mov	result1, objptr
1c384     58 FA 25 F4 | 	bith	result1, #88
1c388     44 00 00 FF 
1c38c     CC E4 05 F1 | 	add	objptr, ##35020
1c390     F2 FA 61 FC | 	wrlong	result1, objptr
1c394     44 00 00 FF 
1c398     CC E4 85 F1 | 	sub	objptr, ##35020
1c39c     F2 FA 01 F6 | 	mov	result1, objptr
1c3a0     00 88 03 FF 
1c3a4     00 FA 45 F5 | 	or	result1, ##118489088
1c3a8     44 00 00 FF 
1c3ac     D0 E4 05 F1 | 	add	objptr, ##35024
1c3b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3b4     44 00 00 FF 
1c3b8     D0 E4 85 F1 | 	sub	objptr, ##35024
1c3bc     F2 FA 01 F6 | 	mov	result1, objptr
1c3c0     00 90 03 FF 
1c3c4     00 FA 45 F5 | 	or	result1, ##119537664
1c3c8     44 00 00 FF 
1c3cc     B0 E4 05 F1 | 	add	objptr, ##34992
1c3d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3d4     44 00 00 FF 
1c3d8     B0 E4 85 F1 | 	sub	objptr, ##34992
1c3dc     F2 FA 01 F6 | 	mov	result1, objptr
1c3e0     00 98 03 FF 
1c3e4     00 FA 45 F5 | 	or	result1, ##120586240
1c3e8     43 00 00 FF 
1c3ec     A8 E4 05 F1 | 	add	objptr, ##34472
1c3f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3f4     43 00 00 FF 
1c3f8     A8 E4 85 F1 | 	sub	objptr, ##34472
1c3fc     F2 FA 01 F6 | 	mov	result1, objptr
1c400     00 A0 03 FF 
1c404     00 FA 45 F5 | 	or	result1, ##121634816
1c408     44 00 00 FF 
1c40c     D4 E4 05 F1 | 	add	objptr, ##35028
1c410     F2 FA 61 FC | 	wrlong	result1, objptr
1c414     44 00 00 FF 
1c418     D4 E4 85 F1 | 	sub	objptr, ##35028
1c41c     F2 FA 01 F6 | 	mov	result1, objptr
1c420     00 A8 03 FF 
1c424     00 FA 45 F5 | 	or	result1, ##122683392
1c428     44 00 00 FF 
1c42c     D8 E4 05 F1 | 	add	objptr, ##35032
1c430     F2 FA 61 FC | 	wrlong	result1, objptr
1c434     44 00 00 FF 
1c438     D8 E4 85 F1 | 	sub	objptr, ##35032
1c43c     F2 FA 01 F6 | 	mov	result1, objptr
1c440     00 B0 03 FF 
1c444     00 FA 45 F5 | 	or	result1, ##123731968
1c448     44 00 00 FF 
1c44c     EC E4 05 F1 | 	add	objptr, ##35052
1c450     F2 FA 61 FC | 	wrlong	result1, objptr
1c454     44 00 00 FF 
1c458     EC E4 85 F1 | 	sub	objptr, ##35052
1c45c     F2 FA 01 F6 | 	mov	result1, objptr
1c460     00 B8 03 FF 
1c464     00 FA 45 F5 | 	or	result1, ##124780544
1c468     44 00 00 FF 
1c46c     E8 E4 05 F1 | 	add	objptr, ##35048
1c470     F2 FA 61 FC | 	wrlong	result1, objptr
1c474     44 00 00 FF 
1c478     E8 E4 85 F1 | 	sub	objptr, ##35048
1c47c     F2 FA 01 F6 | 	mov	result1, objptr
1c480     77 FA 25 F4 | 	bith	result1, #119
1c484     44 00 00 FF 
1c488     E0 E4 05 F1 | 	add	objptr, ##35040
1c48c     F2 FA 61 FC | 	wrlong	result1, objptr
1c490     44 00 00 FF 
1c494     E0 E4 85 F1 | 	sub	objptr, ##35040
1c498     F2 FA 01 F6 | 	mov	result1, objptr
1c49c     00 C8 03 FF 
1c4a0     00 FA 45 F5 | 	or	result1, ##126877696
1c4a4     44 00 00 FF 
1c4a8     DC E4 05 F1 | 	add	objptr, ##35036
1c4ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c4b0     44 00 00 FF 
1c4b4     DC E4 85 F1 | 	sub	objptr, ##35036
1c4b8     F2 FA 01 F6 | 	mov	result1, objptr
1c4bc     00 D0 03 FF 
1c4c0     00 FA 45 F5 | 	or	result1, ##127926272
1c4c4     44 00 00 FF 
1c4c8     FC E4 05 F1 | 	add	objptr, ##35068
1c4cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c4d0     44 00 00 FF 
1c4d4     FC E4 85 F1 | 	sub	objptr, ##35068
1c4d8     F2 FA 01 F6 | 	mov	result1, objptr
1c4dc     00 D8 03 FF 
1c4e0     00 FA 45 F5 | 	or	result1, ##128974848
1c4e4     44 00 00 FF 
1c4e8     F0 E4 05 F1 | 	add	objptr, ##35056
1c4ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c4f0     44 00 00 FF 
1c4f4     F0 E4 85 F1 | 	sub	objptr, ##35056
1c4f8     F2 FA 01 F6 | 	mov	result1, objptr
1c4fc     96 FA 25 F4 | 	bith	result1, #150
1c500     44 00 00 FF 
1c504     F4 E4 05 F1 | 	add	objptr, ##35060
1c508     F2 FA 61 FC | 	wrlong	result1, objptr
1c50c     44 00 00 FF 
1c510     F4 E4 85 F1 | 	sub	objptr, ##35060
1c514     F2 FA 01 F6 | 	mov	result1, objptr
1c518     00 E8 03 FF 
1c51c     00 FA 45 F5 | 	or	result1, ##131072000
1c520     44 00 00 FF 
1c524     F8 E4 05 F1 | 	add	objptr, ##35064
1c528     F2 FA 61 FC | 	wrlong	result1, objptr
1c52c     44 00 00 FF 
1c530     F8 E4 85 F1 | 	sub	objptr, ##35064
1c534     F2 FA 01 F6 | 	mov	result1, objptr
1c538     B5 FA 25 F4 | 	bith	result1, #181
1c53c     44 00 00 FF 
1c540     00 E5 05 F1 | 	add	objptr, ##35072
1c544     F2 FA 61 FC | 	wrlong	result1, objptr
1c548     44 00 00 FF 
1c54c     00 E5 85 F1 | 	sub	objptr, ##35072
1c550     F2 FA 01 F6 | 	mov	result1, objptr
1c554     D4 FA 25 F4 | 	bith	result1, #212
1c558     44 00 00 FF 
1c55c     04 E5 05 F1 | 	add	objptr, ##35076
1c560     F2 FA 61 FC | 	wrlong	result1, objptr
1c564     44 00 00 FF 
1c568     04 E5 85 F1 | 	sub	objptr, ##35076
1c56c     F2 FA 01 F6 | 	mov	result1, objptr
1c570     1B FA 25 F4 | 	bith	result1, #27
1c574     44 00 00 FF 
1c578     08 E5 05 F1 | 	add	objptr, ##35080
1c57c     F2 FA 61 FC | 	wrlong	result1, objptr
1c580     44 00 00 FF 
1c584     08 E5 85 F1 | 	sub	objptr, ##35080
1c588     F2 FA 01 F6 | 	mov	result1, objptr
1c58c     00 08 04 FF 
1c590     00 FA 45 F5 | 	or	result1, ##135266304
1c594     44 00 00 FF 
1c598     0C E5 05 F1 | 	add	objptr, ##35084
1c59c     F2 FA 61 FC | 	wrlong	result1, objptr
1c5a0     44 00 00 FF 
1c5a4     0C E5 85 F1 | 	sub	objptr, ##35084
1c5a8     F2 FA 01 F6 | 	mov	result1, objptr
1c5ac     00 10 04 FF 
1c5b0     00 FA 45 F5 | 	or	result1, ##136314880
1c5b4     44 00 00 FF 
1c5b8     10 E5 05 F1 | 	add	objptr, ##35088
1c5bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c5c0     44 00 00 FF 
1c5c4     10 E5 85 F1 | 	sub	objptr, ##35088
1c5c8     F2 FA 01 F6 | 	mov	result1, objptr
1c5cc     00 18 04 FF 
1c5d0     00 FA 45 F5 | 	or	result1, ##137363456
1c5d4     44 00 00 FF 
1c5d8     14 E5 05 F1 | 	add	objptr, ##35092
1c5dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c5e0     44 00 00 FF 
1c5e4     14 E5 85 F1 | 	sub	objptr, ##35092
1c5e8     F2 FA 01 F6 | 	mov	result1, objptr
1c5ec     00 20 04 FF 
1c5f0     00 FA 45 F5 | 	or	result1, ##138412032
1c5f4     44 00 00 FF 
1c5f8     1C E5 05 F1 | 	add	objptr, ##35100
1c5fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c600     44 00 00 FF 
1c604     1C E5 85 F1 | 	sub	objptr, ##35100
1c608     F2 FA 01 F6 | 	mov	result1, objptr
1c60c     00 28 04 FF 
1c610     00 FA 45 F5 | 	or	result1, ##139460608
1c614     44 00 00 FF 
1c618     20 E5 05 F1 | 	add	objptr, ##35104
1c61c     F2 FA 61 FC | 	wrlong	result1, objptr
1c620     44 00 00 FF 
1c624     20 E5 85 F1 | 	sub	objptr, ##35104
1c628     F2 FA 01 F6 | 	mov	result1, objptr
1c62c     00 30 04 FF 
1c630     00 FA 45 F5 | 	or	result1, ##140509184
1c634     44 00 00 FF 
1c638     24 E5 05 F1 | 	add	objptr, ##35108
1c63c     F2 FA 61 FC | 	wrlong	result1, objptr
1c640     44 00 00 FF 
1c644     24 E5 85 F1 | 	sub	objptr, ##35108
1c648     F2 FA 01 F6 | 	mov	result1, objptr
1c64c     00 38 04 FF 
1c650     00 FA 45 F5 | 	or	result1, ##141557760
1c654     44 00 00 FF 
1c658     18 E5 05 F1 | 	add	objptr, ##35096
1c65c     F2 FA 61 FC | 	wrlong	result1, objptr
1c660     44 00 00 FF 
1c664     18 E5 85 F1 | 	sub	objptr, ##35096
1c668     F2 FA 01 F6 | 	mov	result1, objptr
1c66c     00 40 04 FF 
1c670     00 FA 45 F5 | 	or	result1, ##142606336
1c674     44 00 00 FF 
1c678     28 E5 05 F1 | 	add	objptr, ##35112
1c67c     F2 FA 61 FC | 	wrlong	result1, objptr
1c680     44 00 00 FF 
1c684     28 E5 85 F1 | 	sub	objptr, ##35112
1c688     F2 FA 01 F6 | 	mov	result1, objptr
1c68c     00 48 04 FF 
1c690     00 FA 45 F5 | 	or	result1, ##143654912
1c694     44 00 00 FF 
1c698     5C E5 05 F1 | 	add	objptr, ##35164
1c69c     F2 FA 61 FC | 	wrlong	result1, objptr
1c6a0     44 00 00 FF 
1c6a4     5C E5 85 F1 | 	sub	objptr, ##35164
1c6a8     F2 FA 01 F6 | 	mov	result1, objptr
1c6ac     00 50 04 FF 
1c6b0     00 FA 45 F5 | 	or	result1, ##144703488
1c6b4     44 00 00 FF 
1c6b8     54 E5 05 F1 | 	add	objptr, ##35156
1c6bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c6c0     44 00 00 FF 
1c6c4     54 E5 85 F1 | 	sub	objptr, ##35156
1c6c8     F2 FA 01 F6 | 	mov	result1, objptr
1c6cc     00 58 04 FF 
1c6d0     00 FA 45 F5 | 	or	result1, ##145752064
1c6d4     44 00 00 FF 
1c6d8     2C E5 05 F1 | 	add	objptr, ##35116
1c6dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c6e0     44 00 00 FF 
1c6e4     2C E5 85 F1 | 	sub	objptr, ##35116
1c6e8     F2 FA 01 F6 | 	mov	result1, objptr
1c6ec     00 60 04 FF 
1c6f0     00 FA 45 F5 | 	or	result1, ##146800640
1c6f4     44 00 00 FF 
1c6f8     30 E5 05 F1 | 	add	objptr, ##35120
1c6fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c700     44 00 00 FF 
1c704     30 E5 85 F1 | 	sub	objptr, ##35120
1c708     F2 FA 01 F6 | 	mov	result1, objptr
1c70c     00 68 04 FF 
1c710     00 FA 45 F5 | 	or	result1, ##147849216
1c714     44 00 00 FF 
1c718     4C E5 05 F1 | 	add	objptr, ##35148
1c71c     F2 FA 61 FC | 	wrlong	result1, objptr
1c720     44 00 00 FF 
1c724     4C E5 85 F1 | 	sub	objptr, ##35148
1c728     F2 FA 01 F6 | 	mov	result1, objptr
1c72c     00 70 04 FF 
1c730     00 FA 45 F5 | 	or	result1, ##148897792
1c734     44 00 00 FF 
1c738     50 E5 05 F1 | 	add	objptr, ##35152
1c73c     F2 FA 61 FC | 	wrlong	result1, objptr
1c740     44 00 00 FF 
1c744     50 E5 85 F1 | 	sub	objptr, ##35152
1c748                 | _init_commands_ret
1c748     2D 00 64 FD | 	ret
1c74c                 | 
1c74c                 | ' 
1c74c                 | ' ''--------------------------------Error strings -------------------------------------
1c74c                 | ' sub init_audio
1c74c                 | _init_audio
1c74c     06 4A 05 F6 | 	mov	COUNT_, #6
1c750     A8 00 A0 FD | 	call	#pushregs_
1c754     00 C0 1F FF 
1c758     00 1E 06 F6 | 	mov	local01, ##1065353216
1c75c                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c75c                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1c75c                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c75c                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1c75c                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1c75c                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1c75c                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c75c                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c75c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c75c     00 20 06 F6 | 	mov	local02, #0
1c760                 | LR__2320
1c760     10 23 02 F6 | 	mov	local03, local02
1c764     01 22 66 F0 | 	shl	local03, #1
1c768     58 7F 23 FF 
1c76c     00 24 06 F6 | 	mov	local04, ##1191096320
1c770     10 13 52 F6 | 	abs	arg01, local02 wc
1c774     1F 26 C6 C9 |  if_b	decod	local05, #31
1c778     00 26 06 36 |  if_ae	mov	local05, #0
1c77c     6C 69 B0 FD | 	call	#__system___float_fromuns
1c780     13 FB 61 F5 | 	xor	result1, local05
1c784     FD 12 02 F6 | 	mov	arg01, result1
1c788     87 24 20 FF 
1c78c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c790     5C 6D B0 FD | 	call	#__system___float_mul
1c794     FD 12 02 F6 | 	mov	arg01, result1
1c798     00 00 22 FF 
1c79c     00 14 06 F6 | 	mov	arg02, ##1140850688
1c7a0     50 6F B0 FD | 	call	#__system___float_div
1c7a4     FD 12 02 F6 | 	mov	arg01, result1
1c7a8     A4 76 B0 FD | 	call	#__system____builtin_sinf
1c7ac     FD 14 02 F6 | 	mov	arg02, result1
1c7b0     12 13 02 F6 | 	mov	arg01, local04
1c7b4     38 6D B0 FD | 	call	#__system___float_mul
1c7b8     FD 12 02 F6 | 	mov	arg01, result1
1c7bc     01 14 06 F6 | 	mov	arg02, #1
1c7c0     F4 71 B0 FD | 	call	#__system___float_tointeger
1c7c4     FD 14 02 F6 | 	mov	arg02, result1
1c7c8     11 13 02 F6 | 	mov	arg01, local03
1c7cc     88 0D B0 FD | 	call	#_psdpoke
1c7d0     01 20 06 F1 | 	add	local02, #1
1c7d4     02 00 00 FF 
1c7d8     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c7dc     80 FF 9F CD |  if_b	jmp	#LR__2320
1c7e0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c7e0     00 20 06 F6 | 	mov	local02, #0
1c7e4                 | LR__2321
1c7e4     10 15 02 F6 | 	mov	arg02, local02
1c7e8     01 14 66 F0 | 	shl	arg02, #1
1c7ec     0B 12 C6 F9 | 	decod	arg01, #11
1c7f0     0A 13 02 F1 | 	add	arg01, arg02
1c7f4     10 25 02 F6 | 	mov	local04, local02
1c7f8     07 24 66 F0 | 	shl	local04, #7
1c7fc     10 25 82 F1 | 	sub	local04, local02
1c800     C0 FF 7F FF 
1c804     00 15 06 F6 | 	mov	arg02, ##-32512
1c808     12 15 02 F1 | 	add	arg02, local04
1c80c     48 0D B0 FD | 	call	#_psdpoke
1c810     09 24 C6 F9 | 	decod	local04, #9
1c814     10 25 02 F1 | 	add	local04, local02
1c818     01 24 66 F0 | 	shl	local04, #1
1c81c     0B 12 C6 F9 | 	decod	arg01, #11
1c820     12 13 02 F1 | 	add	arg01, local04
1c824     10 27 02 F6 | 	mov	local05, local02
1c828     07 26 66 F0 | 	shl	local05, #7
1c82c     10 27 82 F1 | 	sub	local05, local02
1c830     3F 00 00 FF 
1c834     00 15 06 F6 | 	mov	arg02, ##32512
1c838     13 15 82 F1 | 	sub	arg02, local05
1c83c     18 0D B0 FD | 	call	#_psdpoke
1c840     01 20 06 F1 | 	add	local02, #1
1c844     01 00 00 FF 
1c848     00 20 56 F2 | 	cmps	local02, ##512 wc
1c84c     94 FF 9F CD |  if_b	jmp	#LR__2321
1c850                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c850     00 20 06 F6 | 	mov	local02, #0
1c854                 | LR__2322
1c854     10 27 02 F6 | 	mov	local05, local02
1c858     01 26 66 F0 | 	shl	local05, #1
1c85c     0C 12 C6 F9 | 	decod	arg01, #12
1c860     13 13 02 F1 | 	add	arg01, local05
1c864     10 27 02 F6 | 	mov	local05, local02
1c868     06 26 66 F0 | 	shl	local05, #6
1c86c     10 27 82 F1 | 	sub	local05, local02
1c870     C1 FF 7F FF 
1c874     00 14 06 F6 | 	mov	arg02, ##-32256
1c878     13 15 02 F1 | 	add	arg02, local05
1c87c     D8 0C B0 FD | 	call	#_psdpoke
1c880     01 20 06 F1 | 	add	local02, #1
1c884     02 00 00 FF 
1c888     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c88c     C4 FF 9F CD |  if_b	jmp	#LR__2322
1c890                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1c890     00 20 06 F6 | 	mov	local02, #0
1c894                 | LR__2323
1c894     10 27 02 F6 | 	mov	local05, local02
1c898     01 26 66 F0 | 	shl	local05, #1
1c89c     0C 00 00 FF 
1c8a0     00 12 06 F6 | 	mov	arg01, ##6144
1c8a4     13 13 02 F1 | 	add	arg01, local05
1c8a8     C0 FF 7F FF 
1c8ac     A8 14 06 F6 | 	mov	arg02, ##-32600
1c8b0     A4 0C B0 FD | 	call	#_psdpoke
1c8b4     01 20 06 F1 | 	add	local02, #1
1c8b8     80 20 56 F2 | 	cmps	local02, #128 wc
1c8bc     D4 FF 9F CD |  if_b	jmp	#LR__2323
1c8c0     80 20 06 F6 | 	mov	local02, #128
1c8c4                 | LR__2324
1c8c4     10 27 02 F6 | 	mov	local05, local02
1c8c8     01 26 66 F0 | 	shl	local05, #1
1c8cc     0C 00 00 FF 
1c8d0     00 12 06 F6 | 	mov	arg01, ##6144
1c8d4     13 13 02 F1 | 	add	arg01, local05
1c8d8     3F 00 00 FF 
1c8dc     58 15 06 F6 | 	mov	arg02, ##32600
1c8e0     74 0C B0 FD | 	call	#_psdpoke
1c8e4     01 20 06 F1 | 	add	local02, #1
1c8e8     02 00 00 FF 
1c8ec     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c8f0     D0 FF 9F CD |  if_b	jmp	#LR__2324
1c8f4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1c8f4     00 20 06 F6 | 	mov	local02, #0
1c8f8                 | LR__2325
1c8f8     10 27 02 F6 | 	mov	local05, local02
1c8fc     01 26 66 F0 | 	shl	local05, #1
1c900     0D 12 C6 F9 | 	decod	arg01, #13
1c904     13 13 02 F1 | 	add	arg01, local05
1c908     C0 FF 7F FF 
1c90c     A8 14 06 F6 | 	mov	arg02, ##-32600
1c910     44 0C B0 FD | 	call	#_psdpoke
1c914     01 20 06 F1 | 	add	local02, #1
1c918     01 00 00 FF 
1c91c     00 20 56 F2 | 	cmps	local02, ##512 wc
1c920     D4 FF 9F CD |  if_b	jmp	#LR__2325
1c924     09 20 C6 F9 | 	decod	local02, #9
1c928                 | LR__2326
1c928     10 27 02 F6 | 	mov	local05, local02
1c92c     01 26 66 F0 | 	shl	local05, #1
1c930     0D 12 C6 F9 | 	decod	arg01, #13
1c934     13 13 02 F1 | 	add	arg01, local05
1c938     3F 00 00 FF 
1c93c     58 15 06 F6 | 	mov	arg02, ##32600
1c940     14 0C B0 FD | 	call	#_psdpoke
1c944     01 20 06 F1 | 	add	local02, #1
1c948     02 00 00 FF 
1c94c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c950     D4 FF 9F CD |  if_b	jmp	#LR__2326
1c954                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1c954     00 20 06 F6 | 	mov	local02, #0
1c958                 | LR__2327
1c958     10 27 02 F6 | 	mov	local05, local02
1c95c     01 26 66 F0 | 	shl	local05, #1
1c960     14 00 00 FF 
1c964     00 12 06 F6 | 	mov	arg01, ##10240
1c968     13 13 02 F1 | 	add	arg01, local05
1c96c     C0 FF 7F FF 
1c970     A8 14 06 F6 | 	mov	arg02, ##-32600
1c974     E0 0B B0 FD | 	call	#_psdpoke
1c978     01 20 06 F1 | 	add	local02, #1
1c97c     00 21 56 F2 | 	cmps	local02, #256 wc
1c980     D4 FF 9F CD |  if_b	jmp	#LR__2327
1c984     00 21 06 F6 | 	mov	local02, #256
1c988                 | LR__2328
1c988     10 27 02 F6 | 	mov	local05, local02
1c98c     01 26 66 F0 | 	shl	local05, #1
1c990     14 00 00 FF 
1c994     00 12 06 F6 | 	mov	arg01, ##10240
1c998     13 13 02 F1 | 	add	arg01, local05
1c99c     3F 00 00 FF 
1c9a0     58 15 06 F6 | 	mov	arg02, ##32600
1c9a4     B0 0B B0 FD | 	call	#_psdpoke
1c9a8     01 20 06 F1 | 	add	local02, #1
1c9ac     02 00 00 FF 
1c9b0     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c9b4     D0 FF 9F CD |  if_b	jmp	#LR__2328
1c9b8                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1c9b8     18 00 00 FF 
1c9bc     00 20 06 F6 | 	mov	local02, ##12288
1c9c0                 | LR__2329
1c9c0     10 13 02 F6 | 	mov	arg01, local02
1c9c4     00 14 06 F6 | 	mov	arg02, #0
1c9c8     44 0B B0 FD | 	call	#_pslpoke
1c9cc     04 20 06 F1 | 	add	local02, #4
1c9d0     77 00 00 FF 
1c9d4     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1c9d8     E4 FF 9F CD |  if_b	jmp	#LR__2329
1c9dc                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c9dc     00 20 06 F6 | 	mov	local02, #0
1c9e0                 | LR__2330
1c9e0     10 27 02 F6 | 	mov	local05, local02
1c9e4     01 26 66 F0 | 	shl	local05, #1
1c9e8     78 00 00 FF 
1c9ec     00 22 06 F6 | 	mov	local03, ##61440
1c9f0     13 23 02 F1 | 	add	local03, local05
1c9f4     14 00 00 FF 
1c9f8     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1c9fc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1ca00     14 00 00 FF 
1ca04     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1ca08     10 12 06 F1 | 	add	arg01, #16
1ca0c     10 15 02 F6 | 	mov	arg02, local02
1ca10     01 14 66 F0 | 	shl	arg02, #1
1ca14     0A 13 02 F1 | 	add	arg01, arg02
1ca18     09 15 E2 FA | 	rdword	arg02, arg01
1ca1c     11 13 02 F6 | 	mov	arg01, local03
1ca20     34 0B B0 FD | 	call	#_psdpoke
1ca24     01 20 06 F1 | 	add	local02, #1
1ca28     02 00 00 FF 
1ca2c     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca30     AC FF 9F CD |  if_b	jmp	#LR__2330
1ca34                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1ca34     00 20 06 F6 | 	mov	local02, #0
1ca38                 | LR__2331
1ca38     10 27 02 F6 | 	mov	local05, local02
1ca3c     01 26 66 F0 | 	shl	local05, #1
1ca40     7C 00 00 FF 
1ca44     00 22 06 F6 | 	mov	local03, ##63488
1ca48     13 23 02 F1 | 	add	local03, local05
1ca4c     10 00 00 FF 
1ca50     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1ca54     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1ca58     10 00 00 FF 
1ca5c     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1ca60     10 12 06 F1 | 	add	arg01, #16
1ca64     10 15 02 F6 | 	mov	arg02, local02
1ca68     01 14 66 F0 | 	shl	arg02, #1
1ca6c     0A 13 02 F1 | 	add	arg01, arg02
1ca70     09 15 E2 FA | 	rdword	arg02, arg01
1ca74     11 13 02 F6 | 	mov	arg01, local03
1ca78     DC 0A B0 FD | 	call	#_psdpoke
1ca7c     01 20 06 F1 | 	add	local02, #1
1ca80     02 00 00 FF 
1ca84     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca88     AC FF 9F CD |  if_b	jmp	#LR__2331
1ca8c                 | ' 
1ca8c                 | ' 
1ca8c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1ca8c     00 20 06 F6 | 	mov	local02, #0
1ca90     0C 00 00 FF 
1ca94     D8 E4 05 F1 | 	add	objptr, ##6360
1ca98     97 18 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
1ca9c                 | LR__2332
1ca9c     10 27 02 F6 | 	mov	local05, local02
1caa0     01 26 66 F0 | 	shl	local05, #1
1caa4     F2 26 02 F1 | 	add	local05, objptr
1caa8     10 23 02 F6 | 	mov	local03, local02
1caac     08 22 66 F0 | 	shl	local03, #8
1cab0     7F 00 00 FF 
1cab4     00 29 06 F6 | 	mov	local06, ##65280
1cab8     11 29 82 F1 | 	sub	local06, local03
1cabc     13 29 52 FC | 	wrword	local06, local05
1cac0     01 20 06 F1 | 	add	local02, #1
1cac4     00 21 56 F2 | 	cmps	local02, #256 wc
1cac8     D0 FF 9F CD |  if_b	jmp	#LR__2332
1cacc                 | LR__2333
1cacc     0C 00 00 FF 
1cad0     D8 E4 85 F1 | 	sub	objptr, ##6360
1cad4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cad4     00 20 06 F6 | 	mov	local02, #0
1cad8                 | LR__2334
1cad8     10 27 02 F6 | 	mov	local05, local02
1cadc     01 26 66 F0 | 	shl	local05, #1
1cae0     0D 00 00 FF 
1cae4     D8 E4 05 F1 | 	add	objptr, ##6872
1cae8     F2 26 02 F1 | 	add	local05, objptr
1caec     80 BF 23 FF 
1caf0     00 12 06 F6 | 	mov	arg01, ##1199505408
1caf4     0F 15 02 F6 | 	mov	arg02, local01
1caf8     0D 00 00 FF 
1cafc     D8 E4 85 F1 | 	sub	objptr, ##6872
1cb00     EC 69 B0 FD | 	call	#__system___float_mul
1cb04     FD 12 02 F6 | 	mov	arg01, result1
1cb08     01 14 06 F6 | 	mov	arg02, #1
1cb0c     A8 6E B0 FD | 	call	#__system___float_tointeger
1cb10     13 FB 51 FC | 	wrword	result1, local05
1cb14     0F 13 02 F6 | 	mov	arg01, local01
1cb18     CC BC 1F FF 
1cb1c     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cb20     CC 69 B0 FD | 	call	#__system___float_mul
1cb24     FD 1E 02 F6 | 	mov	local01, result1
1cb28     01 20 06 F1 | 	add	local02, #1
1cb2c     00 21 56 F2 | 	cmps	local02, #256 wc
1cb30     A4 FF 9F CD |  if_b	jmp	#LR__2334
1cb34     0E 00 00 FF 
1cb38     D6 E4 05 F1 | 	add	objptr, ##7382
1cb3c     F2 00 58 FC | 	wrword	#0, objptr
1cb40                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cb40     00 20 06 F6 | 	mov	local02, #0
1cb44     02 E4 05 F1 | 	add	objptr, #2
1cb48     97 10 48 FB | 	callpa	#(@LR__2336-@LR__2335)>>2,fcache_load_ptr_
1cb4c                 | LR__2335
1cb4c     10 27 02 F6 | 	mov	local05, local02
1cb50     01 26 66 F0 | 	shl	local05, #1
1cb54     F2 26 02 F1 | 	add	local05, objptr
1cb58     7F 00 80 FF 
1cb5c     13 01 5A FC | 	wrword	##65280, local05
1cb60     01 20 06 F1 | 	add	local02, #1
1cb64     FF 20 56 F2 | 	cmps	local02, #255 wc
1cb68     E0 FF 9F CD |  if_b	jmp	#LR__2335
1cb6c                 | LR__2336
1cb6c     FE E5 05 F1 | 	add	objptr, #510
1cb70     F2 00 58 FC | 	wrword	#0, objptr
1cb74                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cb74     00 20 06 F6 | 	mov	local02, #0
1cb78     02 E4 05 F1 | 	add	objptr, #2
1cb7c     97 52 48 FB | 	callpa	#(@LR__2341-@LR__2337)>>2,fcache_load_ptr_
1cb80                 | LR__2337
1cb80     10 27 02 F6 | 	mov	local05, local02
1cb84     01 26 66 F0 | 	shl	local05, #1
1cb88     F2 26 02 F1 | 	add	local05, objptr
1cb8c     10 29 02 F6 | 	mov	local06, local02
1cb90     0C 28 66 F0 | 	shl	local06, #12
1cb94     13 29 52 FC | 	wrword	local06, local05
1cb98     01 20 06 F1 | 	add	local02, #1
1cb9c     10 20 56 F2 | 	cmps	local02, #16 wc
1cba0     DC FF 9F CD |  if_b	jmp	#LR__2337
1cba4                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cba4     10 20 06 F6 | 	mov	local02, #16
1cba8                 | LR__2338
1cba8     10 27 02 F6 | 	mov	local05, local02
1cbac     01 26 66 F0 | 	shl	local05, #1
1cbb0     F2 26 02 F1 | 	add	local05, objptr
1cbb4     7F 00 80 FF 
1cbb8     13 01 5A FC | 	wrword	##65280, local05
1cbbc     01 20 06 F1 | 	add	local02, #1
1cbc0     F0 20 16 F2 | 	cmp	local02, #240 wc
1cbc4     E0 FF 9F CD |  if_b	jmp	#LR__2338
1cbc8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cbc8     F0 20 06 F6 | 	mov	local02, #240
1cbcc                 | LR__2339
1cbcc     10 27 02 F6 | 	mov	local05, local02
1cbd0     01 26 66 F0 | 	shl	local05, #1
1cbd4     F2 26 02 F1 | 	add	local05, objptr
1cbd8     FF 22 06 F6 | 	mov	local03, #255
1cbdc     10 23 82 F1 | 	sub	local03, local02
1cbe0     0C 22 66 F0 | 	shl	local03, #12
1cbe4     13 23 52 FC | 	wrword	local03, local05
1cbe8     01 20 06 F1 | 	add	local02, #1
1cbec     00 21 16 F2 | 	cmp	local02, #256 wc
1cbf0     D8 FF 9F CD |  if_b	jmp	#LR__2339
1cbf4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cbf4     00 20 06 F6 | 	mov	local02, #0
1cbf8     01 00 00 FF 
1cbfc     00 E4 05 F1 | 	add	objptr, ##512
1cc00                 | LR__2340
1cc00     10 27 02 F6 | 	mov	local05, local02
1cc04     01 26 66 F0 | 	shl	local05, #1
1cc08     F2 26 02 F1 | 	add	local05, objptr
1cc0c     10 29 02 F6 | 	mov	local06, local02
1cc10     08 28 66 F0 | 	shl	local06, #8
1cc14     13 29 52 FC | 	wrword	local06, local05
1cc18     01 20 06 F1 | 	add	local02, #1
1cc1c     00 21 56 F2 | 	cmps	local02, #256 wc
1cc20     DC FF 9F CD |  if_b	jmp	#LR__2340
1cc24                 | LR__2341
1cc24     FE E5 05 F1 | 	add	objptr, #510
1cc28     F2 00 58 FC | 	wrword	#0, objptr
1cc2c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cc2c     00 20 06 F6 | 	mov	local02, #0
1cc30     02 E4 05 F1 | 	add	objptr, #2
1cc34     97 6A 48 FB | 	callpa	#(@LR__2346-@LR__2342)>>2,fcache_load_ptr_
1cc38                 | LR__2342
1cc38     10 27 02 F6 | 	mov	local05, local02
1cc3c     01 26 66 F0 | 	shl	local05, #1
1cc40     F2 26 02 F1 | 	add	local05, objptr
1cc44     10 29 02 F6 | 	mov	local06, local02
1cc48     04 28 66 F0 | 	shl	local06, #4
1cc4c     10 29 02 F1 | 	add	local06, local02
1cc50     04 28 66 F0 | 	shl	local06, #4
1cc54     13 29 52 FC | 	wrword	local06, local05
1cc58     01 20 06 F1 | 	add	local02, #1
1cc5c     F0 20 56 F2 | 	cmps	local02, #240 wc
1cc60     D4 FF 9F CD |  if_b	jmp	#LR__2342
1cc64     F0 20 06 F6 | 	mov	local02, #240
1cc68                 | LR__2343
1cc68     10 27 02 F6 | 	mov	local05, local02
1cc6c     01 26 66 F0 | 	shl	local05, #1
1cc70     F2 26 02 F1 | 	add	local05, objptr
1cc74     FF 22 06 F6 | 	mov	local03, #255
1cc78     10 23 82 F1 | 	sub	local03, local02
1cc7c     0C 22 66 F0 | 	shl	local03, #12
1cc80     13 23 52 FC | 	wrword	local03, local05
1cc84     01 20 06 F1 | 	add	local02, #1
1cc88     00 21 16 F2 | 	cmp	local02, #256 wc
1cc8c     D8 FF 9F CD |  if_b	jmp	#LR__2343
1cc90                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1cc90     00 20 06 F6 | 	mov	local02, #0
1cc94     01 00 00 FF 
1cc98     00 E4 05 F1 | 	add	objptr, ##512
1cc9c                 | LR__2344
1cc9c     10 27 02 F6 | 	mov	local05, local02
1cca0     01 26 66 F0 | 	shl	local05, #1
1cca4     F2 26 02 F1 | 	add	local05, objptr
1cca8     10 29 02 F6 | 	mov	local06, local02
1ccac     09 28 66 F0 | 	shl	local06, #9
1ccb0     13 29 52 FC | 	wrword	local06, local05
1ccb4     FF 26 06 F6 | 	mov	local05, #255
1ccb8     10 27 82 F1 | 	sub	local05, local02
1ccbc     01 26 66 F0 | 	shl	local05, #1
1ccc0     F2 26 02 F1 | 	add	local05, objptr
1ccc4     10 29 02 F6 | 	mov	local06, local02
1ccc8     09 28 66 F0 | 	shl	local06, #9
1cccc     13 29 52 FC | 	wrword	local06, local05
1ccd0     01 20 06 F1 | 	add	local02, #1
1ccd4     80 20 56 F2 | 	cmps	local02, #128 wc
1ccd8     C0 FF 9F CD |  if_b	jmp	#LR__2344
1ccdc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1ccdc     00 20 06 F6 | 	mov	local02, #0
1cce0     01 00 00 FF 
1cce4     00 E4 05 F1 | 	add	objptr, ##512
1cce8                 | LR__2345
1cce8     10 27 02 F6 | 	mov	local05, local02
1ccec     01 26 66 F0 | 	shl	local05, #1
1ccf0     F2 26 02 F1 | 	add	local05, objptr
1ccf4     10 29 02 F6 | 	mov	local06, local02
1ccf8     0D 28 66 F0 | 	shl	local06, #13
1ccfc     13 29 52 FC | 	wrword	local06, local05
1cd00     01 20 06 F1 | 	add	local02, #1
1cd04     08 20 56 F2 | 	cmps	local02, #8 wc
1cd08     DC FF 9F CD |  if_b	jmp	#LR__2345
1cd0c                 | LR__2346
1cd0c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cd0c     08 20 06 F6 | 	mov	local02, #8
1cd10     97 42 48 FB | 	callpa	#(@LR__2350-@LR__2347)>>2,fcache_load_ptr_
1cd14                 | LR__2347
1cd14     10 27 02 F6 | 	mov	local05, local02
1cd18     01 26 66 F0 | 	shl	local05, #1
1cd1c     F2 26 02 F1 | 	add	local05, objptr
1cd20     10 1F 02 F6 | 	mov	local01, local02
1cd24     08 1E 86 F1 | 	sub	local01, #8
1cd28     0B 1E 66 F0 | 	shl	local01, #11
1cd2c     7F 00 00 FF 
1cd30     00 29 06 F6 | 	mov	local06, ##65280
1cd34     0F 29 82 F1 | 	sub	local06, local01
1cd38     13 29 52 FC | 	wrword	local06, local05
1cd3c     01 20 06 F1 | 	add	local02, #1
1cd40     18 20 16 F2 | 	cmp	local02, #24 wc
1cd44     CC FF 9F CD |  if_b	jmp	#LR__2347
1cd48                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cd48     18 20 06 F6 | 	mov	local02, #24
1cd4c                 | LR__2348
1cd4c     10 27 02 F6 | 	mov	local05, local02
1cd50     01 26 66 F0 | 	shl	local05, #1
1cd54     F2 26 02 F1 | 	add	local05, objptr
1cd58     40 00 80 FF 
1cd5c     13 01 58 FC | 	wrword	##32768, local05
1cd60     01 20 06 F1 | 	add	local02, #1
1cd64     81 20 16 F2 | 	cmp	local02, #129 wc
1cd68     E0 FF 9F CD |  if_b	jmp	#LR__2348
1cd6c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cd6c     81 20 06 F6 | 	mov	local02, #129
1cd70                 | LR__2349
1cd70     10 27 02 F6 | 	mov	local05, local02
1cd74     01 26 66 F0 | 	shl	local05, #1
1cd78     F2 26 02 F1 | 	add	local05, objptr
1cd7c     FF 22 06 F6 | 	mov	local03, #255
1cd80     10 23 82 F1 | 	sub	local03, local02
1cd84     08 22 66 F0 | 	shl	local03, #8
1cd88     13 23 52 FC | 	wrword	local03, local05
1cd8c     01 20 06 F1 | 	add	local02, #1
1cd90     00 21 16 F2 | 	cmp	local02, #256 wc
1cd94     D8 FF 9F CD |  if_b	jmp	#LR__2349
1cd98                 | LR__2350
1cd98     3E 00 00 FF 
1cd9c     FE E4 05 F1 | 	add	objptr, ##31998
1cda0     F2 00 59 FC | 	wrword	#128, objptr
1cda4     51 00 00 FF 
1cda8     D6 E5 85 F1 | 	sub	objptr, ##41942
1cdac                 | ' for i=0 to 7
1cdac     00 20 06 F6 | 	mov	local02, #0
1cdb0     97 8E 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1cdb4                 | LR__2351
1cdb4     10 27 02 F6 | 	mov	local05, local02
1cdb8     01 26 66 F0 | 	shl	local05, #1
1cdbc     10 27 02 F1 | 	add	local05, local02
1cdc0     03 26 66 F0 | 	shl	local05, #3
1cdc4     14 00 00 FF 
1cdc8     38 E5 05 F1 | 	add	objptr, ##10552
1cdcc     F2 26 02 F1 | 	add	local05, objptr
1cdd0     00 EE A1 FF 
1cdd4     13 01 68 FC | 	wrlong	##1138491392, local05
1cdd8     10 27 02 F6 | 	mov	local05, local02
1cddc     01 26 66 F0 | 	shl	local05, #1
1cde0     10 27 02 F1 | 	add	local05, local02
1cde4     03 26 66 F0 | 	shl	local05, #3
1cde8     F2 26 02 F1 | 	add	local05, objptr
1cdec     04 26 06 F1 | 	add	local05, #4
1cdf0     13 21 42 FC | 	wrbyte	local02, local05
1cdf4     10 27 02 F6 | 	mov	local05, local02
1cdf8     01 26 66 F0 | 	shl	local05, #1
1cdfc     10 27 02 F1 | 	add	local05, local02
1ce00     03 26 66 F0 | 	shl	local05, #3
1ce04     F2 26 02 F1 | 	add	local05, objptr
1ce08     05 26 06 F1 | 	add	local05, #5
1ce0c     13 21 42 FC | 	wrbyte	local02, local05
1ce10     10 27 02 F6 | 	mov	local05, local02
1ce14     01 26 66 F0 | 	shl	local05, #1
1ce18     10 27 02 F1 | 	add	local05, local02
1ce1c     03 26 66 F0 | 	shl	local05, #3
1ce20     F2 26 02 F1 | 	add	local05, objptr
1ce24     06 26 06 F1 | 	add	local05, #6
1ce28     13 01 58 FC | 	wrword	#0, local05
1ce2c     10 27 02 F6 | 	mov	local05, local02
1ce30     01 26 66 F0 | 	shl	local05, #1
1ce34     10 27 02 F1 | 	add	local05, local02
1ce38     03 26 66 F0 | 	shl	local05, #3
1ce3c     F2 26 02 F1 | 	add	local05, objptr
1ce40     08 26 06 F1 | 	add	local05, #8
1ce44     00 C0 9F FF 
1ce48     13 01 68 FC | 	wrlong	##1065353216, local05
1ce4c     10 27 02 F6 | 	mov	local05, local02
1ce50     01 26 66 F0 | 	shl	local05, #1
1ce54     10 27 02 F1 | 	add	local05, local02
1ce58     03 26 66 F0 | 	shl	local05, #3
1ce5c     F2 26 02 F1 | 	add	local05, objptr
1ce60     0C 26 06 F1 | 	add	local05, #12
1ce64     00 40 A0 FF 
1ce68     13 01 68 FC | 	wrlong	##1082130432, local05
1ce6c     10 27 02 F6 | 	mov	local05, local02
1ce70     01 26 66 F0 | 	shl	local05, #1
1ce74     10 27 02 F1 | 	add	local05, local02
1ce78     03 26 66 F0 | 	shl	local05, #3
1ce7c     F2 26 02 F1 | 	add	local05, objptr
1ce80     10 26 06 F1 | 	add	local05, #16
1ce84     13 01 68 FC | 	wrlong	#0, local05
1ce88     10 27 02 F6 | 	mov	local05, local02
1ce8c     01 26 66 F0 | 	shl	local05, #1
1ce90     10 27 02 F1 | 	add	local05, local02
1ce94     03 26 66 F0 | 	shl	local05, #3
1ce98     F2 26 02 F1 | 	add	local05, objptr
1ce9c     14 26 06 F1 | 	add	local05, #20
1cea0     13 FF 59 FC | 	wrword	#255, local05
1cea4     10 27 02 F6 | 	mov	local05, local02
1cea8     01 26 66 F0 | 	shl	local05, #1
1ceac     3D 00 00 FF 
1ceb0     90 E4 05 F1 | 	add	objptr, ##31376
1ceb4     F2 26 02 F1 | 	add	local05, objptr
1ceb8     13 FF 59 FC | 	wrword	#255, local05
1cebc     01 20 06 F1 | 	add	local02, #1
1cec0     08 20 56 F2 | 	cmps	local02, #8 wc
1cec4     51 00 00 FF 
1cec8     C8 E5 85 F1 | 	sub	objptr, ##41928
1cecc     E4 FE 9F CD |  if_b	jmp	#LR__2351
1ced0                 | LR__2352
1ced0     00 6E 20 FF 
1ced4     00 28 06 F6 | 	mov	local06, ##1088159744
1ced8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1ced8     03 26 06 F6 | 	mov	local05, #3
1cedc                 | LR__2353
1cedc     14 13 02 F6 | 	mov	arg01, local06
1cee0     CE C3 1F FF 
1cee4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1cee8     04 66 B0 FD | 	call	#__system___float_mul
1ceec     FD 28 02 F6 | 	mov	local06, result1
1cef0     FA 27 6E FB | 	djnz	local05, #LR__2353
1cef4     00 20 06 F6 | 	mov	local02, #0
1cef8                 | LR__2354
1cef8     10 25 02 F6 | 	mov	local04, local02
1cefc     02 24 66 F0 | 	shl	local04, #2
1cf00     14 00 00 FF 
1cf04     D8 E4 05 F1 | 	add	objptr, ##10456
1cf08     F2 24 02 F1 | 	add	local04, objptr
1cf0c     12 29 62 FC | 	wrlong	local06, local04
1cf10     14 13 02 F6 | 	mov	arg01, local06
1cf14     CE C3 1F FF 
1cf18     7D 14 06 F6 | 	mov	arg02, ##1065852029
1cf1c     14 00 00 FF 
1cf20     D8 E4 85 F1 | 	sub	objptr, ##10456
1cf24     C8 65 B0 FD | 	call	#__system___float_mul
1cf28     FD 28 02 F6 | 	mov	local06, result1
1cf2c     01 20 06 F1 | 	add	local02, #1
1cf30     0C 20 56 F2 | 	cmps	local02, #12 wc
1cf34     C0 FF 9F CD |  if_b	jmp	#LR__2354
1cf38     14 00 00 FF 
1cf3c     08 E5 05 F1 | 	add	objptr, ##10504
1cf40     F2 50 6B FC | 	wrlong	#424, objptr
1cf44     04 E4 05 F1 | 	add	objptr, #4
1cf48     F2 20 6B FC | 	wrlong	#400, objptr
1cf4c     04 E4 05 F1 | 	add	objptr, #4
1cf50     F2 F2 6A FC | 	wrlong	#377, objptr
1cf54     04 E4 05 F1 | 	add	objptr, #4
1cf58     F2 C8 6A FC | 	wrlong	#356, objptr
1cf5c     04 E4 05 F1 | 	add	objptr, #4
1cf60     F2 A0 6A FC | 	wrlong	#336, objptr
1cf64     04 E4 05 F1 | 	add	objptr, #4
1cf68     F2 7A 6A FC | 	wrlong	#317, objptr
1cf6c     04 E4 05 F1 | 	add	objptr, #4
1cf70     F2 58 6A FC | 	wrlong	#300, objptr
1cf74     04 E4 05 F1 | 	add	objptr, #4
1cf78     F2 36 6A FC | 	wrlong	#283, objptr
1cf7c     04 E4 05 F1 | 	add	objptr, #4
1cf80     F2 16 6A FC | 	wrlong	#267, objptr
1cf84     04 E4 05 F1 | 	add	objptr, #4
1cf88     F2 F8 69 FC | 	wrlong	#252, objptr
1cf8c     04 E4 05 F1 | 	add	objptr, #4
1cf90     F2 DC 69 FC | 	wrlong	#238, objptr
1cf94     04 E4 05 F1 | 	add	objptr, #4
1cf98     F2 C0 69 FC | 	wrlong	#224, objptr
1cf9c     3D 00 00 FF 
1cfa0     A2 E4 05 F1 | 	add	objptr, ##31394
1cfa4     F2 00 59 FC | 	wrword	#128, objptr
1cfa8     02 E4 85 F1 | 	sub	objptr, #2
1cfac     F2 00 59 FC | 	wrword	#128, objptr
1cfb0     51 00 00 FF 
1cfb4     D4 E5 85 F1 | 	sub	objptr, ##41940
1cfb8     A7 F0 03 F6 | 	mov	ptra, fp
1cfbc     B2 00 A0 FD | 	call	#popregs_
1cfc0                 | _init_audio_ret
1cfc0     2D 00 64 FD | 	ret
1cfc4                 | 
1cfc4                 | ' 
1cfc4                 | ' 
1cfc4                 | ' function getnoteval(token) as single
1cfc4                 | _getnoteval
1cfc4     02 4A 05 F6 | 	mov	COUNT_, #2
1cfc8     A8 00 A0 FD | 	call	#pushregs_
1cfcc     01 00 00 FF 
1cfd0     00 13 86 F1 | 	sub	arg01, ##768
1cfd4     09 15 52 F6 | 	abs	arg02, arg01 wc
1cfd8     0C 14 16 FD | 	qdiv	arg02, #12
1cfdc     14 00 00 FF 
1cfe0     D8 E4 05 F1 | 	add	objptr, ##10456
1cfe4     19 14 62 FD | 	getqy	arg02
1cfe8     0A 15 82 F6 | 	negc	arg02, arg02
1cfec     02 14 66 F0 | 	shl	arg02, #2
1cff0     F2 14 02 F1 | 	add	arg02, objptr
1cff4     0A 1F 02 FB | 	rdlong	local01, arg02
1cff8     09 15 52 F6 | 	abs	arg02, arg01 wc
1cffc     0C 14 16 FD | 	qdiv	arg02, #12
1d000     14 00 00 FF 
1d004     D8 E4 85 F1 | 	sub	objptr, ##10456
1d008     01 12 06 F6 | 	mov	arg01, #1
1d00c                 | ' noteexp=1+(note/12) 
1d00c                 | ' return (2.0^noteexp)*notebase
1d00c     18 14 62 FD | 	getqx	arg02
1d010     0A 13 82 F3 | 	sumc	arg01, arg02
1d014     09 13 52 F6 | 	abs	arg01, arg01 wc
1d018     1F 20 C6 C9 |  if_b	decod	local02, #31
1d01c     00 20 06 36 |  if_ae	mov	local02, #0
1d020     C8 60 B0 FD | 	call	#__system___float_fromuns
1d024     10 FB 61 F5 | 	xor	result1, local02
1d028     FD 14 02 F6 | 	mov	arg02, result1
1d02c     1E 12 C6 F9 | 	decod	arg01, #30
1d030     C4 73 B0 FD | 	call	#__system____builtin_powf
1d034     FD 12 02 F6 | 	mov	arg01, result1
1d038     0F 15 02 F6 | 	mov	arg02, local01
1d03c     B0 64 B0 FD | 	call	#__system___float_mul
1d040     A7 F0 03 F6 | 	mov	ptra, fp
1d044     B2 00 A0 FD | 	call	#popregs_
1d048                 | _getnoteval_ret
1d048     2D 00 64 FD | 	ret
1d04c                 | 
1d04c                 | ' 
1d04c                 | ' 
1d04c                 | ' 
1d04c                 | ' sub init_error_strings
1d04c                 | _init_error_strings
1d04c     85 01 00 FF 
1d050     E7 00 06 F6 | 	mov	_var01, ##@LR__5533
1d054     45 00 00 FF 
1d058     7C E4 05 F1 | 	add	objptr, ##35452
1d05c     F2 00 62 FC | 	wrlong	_var01, objptr
1d060     85 01 00 FF 
1d064     E8 00 06 F6 | 	mov	_var01, ##@LR__5534
1d068     04 E4 05 F1 | 	add	objptr, #4
1d06c     F2 00 62 FC | 	wrlong	_var01, objptr
1d070     85 01 00 FF 
1d074     0D 01 06 F6 | 	mov	_var01, ##@LR__5535
1d078     04 E4 05 F1 | 	add	objptr, #4
1d07c     F2 00 62 FC | 	wrlong	_var01, objptr
1d080     85 01 00 FF 
1d084     2E 01 06 F6 | 	mov	_var01, ##@LR__5536
1d088     04 E4 05 F1 | 	add	objptr, #4
1d08c     F2 00 62 FC | 	wrlong	_var01, objptr
1d090     85 01 00 FF 
1d094     48 01 06 F6 | 	mov	_var01, ##@LR__5537
1d098     04 E4 05 F1 | 	add	objptr, #4
1d09c     F2 00 62 FC | 	wrlong	_var01, objptr
1d0a0     85 01 00 FF 
1d0a4     64 01 06 F6 | 	mov	_var01, ##@LR__5538
1d0a8     04 E4 05 F1 | 	add	objptr, #4
1d0ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d0b0     85 01 00 FF 
1d0b4     86 01 06 F6 | 	mov	_var01, ##@LR__5539
1d0b8     04 E4 05 F1 | 	add	objptr, #4
1d0bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d0c0     85 01 00 FF 
1d0c4     B4 01 06 F6 | 	mov	_var01, ##@LR__5540
1d0c8     04 E4 05 F1 | 	add	objptr, #4
1d0cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d0d0     85 01 00 FF 
1d0d4     DF 01 06 F6 | 	mov	_var01, ##@LR__5541
1d0d8     04 E4 05 F1 | 	add	objptr, #4
1d0dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d0e0     85 01 00 FF 
1d0e4     F8 01 06 F6 | 	mov	_var01, ##@LR__5542
1d0e8     04 E4 05 F1 | 	add	objptr, #4
1d0ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d0f0     86 01 00 FF 
1d0f4     19 00 06 F6 | 	mov	_var01, ##@LR__5543
1d0f8     04 E4 05 F1 | 	add	objptr, #4
1d0fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d100     86 01 00 FF 
1d104     30 00 06 F6 | 	mov	_var01, ##@LR__5544
1d108     04 E4 05 F1 | 	add	objptr, #4
1d10c     F2 00 62 FC | 	wrlong	_var01, objptr
1d110     86 01 00 FF 
1d114     4E 00 06 F6 | 	mov	_var01, ##@LR__5545
1d118     04 E4 05 F1 | 	add	objptr, #4
1d11c     F2 00 62 FC | 	wrlong	_var01, objptr
1d120     86 01 00 FF 
1d124     72 00 06 F6 | 	mov	_var01, ##@LR__5546
1d128     04 E4 05 F1 | 	add	objptr, #4
1d12c     F2 00 62 FC | 	wrlong	_var01, objptr
1d130     86 01 00 FF 
1d134     99 00 06 F6 | 	mov	_var01, ##@LR__5547
1d138     04 E4 05 F1 | 	add	objptr, #4
1d13c     F2 00 62 FC | 	wrlong	_var01, objptr
1d140     86 01 00 FF 
1d144     B5 00 06 F6 | 	mov	_var01, ##@LR__5548
1d148     04 E4 05 F1 | 	add	objptr, #4
1d14c     F2 00 62 FC | 	wrlong	_var01, objptr
1d150     86 01 00 FF 
1d154     C6 00 06 F6 | 	mov	_var01, ##@LR__5549
1d158     04 E4 05 F1 | 	add	objptr, #4
1d15c     F2 00 62 FC | 	wrlong	_var01, objptr
1d160     86 01 00 FF 
1d164     D6 00 06 F6 | 	mov	_var01, ##@LR__5550
1d168     04 E4 05 F1 | 	add	objptr, #4
1d16c     F2 00 62 FC | 	wrlong	_var01, objptr
1d170     86 01 00 FF 
1d174     F1 00 06 F6 | 	mov	_var01, ##@LR__5551
1d178     04 E4 05 F1 | 	add	objptr, #4
1d17c     F2 00 62 FC | 	wrlong	_var01, objptr
1d180     86 01 00 FF 
1d184     03 01 06 F6 | 	mov	_var01, ##@LR__5552
1d188     04 E4 05 F1 | 	add	objptr, #4
1d18c     F2 00 62 FC | 	wrlong	_var01, objptr
1d190     86 01 00 FF 
1d194     1B 01 06 F6 | 	mov	_var01, ##@LR__5553
1d198     04 E4 05 F1 | 	add	objptr, #4
1d19c     F2 00 62 FC | 	wrlong	_var01, objptr
1d1a0     86 01 00 FF 
1d1a4     2F 01 06 F6 | 	mov	_var01, ##@LR__5554
1d1a8     04 E4 05 F1 | 	add	objptr, #4
1d1ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d1b0     86 01 00 FF 
1d1b4     3F 01 06 F6 | 	mov	_var01, ##@LR__5555
1d1b8     04 E4 05 F1 | 	add	objptr, #4
1d1bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d1c0     86 01 00 FF 
1d1c4     5C 01 06 F6 | 	mov	_var01, ##@LR__5556
1d1c8     04 E4 05 F1 | 	add	objptr, #4
1d1cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d0     86 01 00 FF 
1d1d4     6D 01 06 F6 | 	mov	_var01, ##@LR__5557
1d1d8     04 E4 05 F1 | 	add	objptr, #4
1d1dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e0     86 01 00 FF 
1d1e4     7E 01 06 F6 | 	mov	_var01, ##@LR__5558
1d1e8     04 E4 05 F1 | 	add	objptr, #4
1d1ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f0     86 01 00 FF 
1d1f4     B2 01 06 F6 | 	mov	_var01, ##@LR__5559
1d1f8     04 E4 05 F1 | 	add	objptr, #4
1d1fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d200     86 01 00 FF 
1d204     CE 01 06 F6 | 	mov	_var01, ##@LR__5560
1d208     04 E4 05 F1 | 	add	objptr, #4
1d20c     F2 00 62 FC | 	wrlong	_var01, objptr
1d210     86 01 00 FF 
1d214     E4 01 06 F6 | 	mov	_var01, ##@LR__5561
1d218     04 E4 05 F1 | 	add	objptr, #4
1d21c     F2 00 62 FC | 	wrlong	_var01, objptr
1d220     86 01 00 FF 
1d224     F1 01 06 F6 | 	mov	_var01, ##@LR__5562
1d228     04 E4 05 F1 | 	add	objptr, #4
1d22c     F2 00 62 FC | 	wrlong	_var01, objptr
1d230     87 01 00 FF 
1d234     03 00 06 F6 | 	mov	_var01, ##@LR__5563
1d238     04 E4 05 F1 | 	add	objptr, #4
1d23c     F2 00 62 FC | 	wrlong	_var01, objptr
1d240     87 01 00 FF 
1d244     14 00 06 F6 | 	mov	_var01, ##@LR__5564
1d248     04 E4 05 F1 | 	add	objptr, #4
1d24c     F2 00 62 FC | 	wrlong	_var01, objptr
1d250     87 01 00 FF 
1d254     30 00 06 F6 | 	mov	_var01, ##@LR__5565
1d258     04 E4 05 F1 | 	add	objptr, #4
1d25c     F2 00 62 FC | 	wrlong	_var01, objptr
1d260     87 01 00 FF 
1d264     41 00 06 F6 | 	mov	_var01, ##@LR__5566
1d268     04 E4 05 F1 | 	add	objptr, #4
1d26c     F2 00 62 FC | 	wrlong	_var01, objptr
1d270     87 01 00 FF 
1d274     50 00 06 F6 | 	mov	_var01, ##@LR__5567
1d278     04 E4 05 F1 | 	add	objptr, #4
1d27c     F2 00 62 FC | 	wrlong	_var01, objptr
1d280     87 01 00 FF 
1d284     6B 00 06 F6 | 	mov	_var01, ##@LR__5568
1d288     04 E4 05 F1 | 	add	objptr, #4
1d28c     F2 00 62 FC | 	wrlong	_var01, objptr
1d290     87 01 00 FF 
1d294     9F 00 06 F6 | 	mov	_var01, ##@LR__5569
1d298     04 E4 05 F1 | 	add	objptr, #4
1d29c     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a0     87 01 00 FF 
1d2a4     B8 00 06 F6 | 	mov	_var01, ##@LR__5570
1d2a8     04 E4 05 F1 | 	add	objptr, #4
1d2ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b0     87 01 00 FF 
1d2b4     D4 00 06 F6 | 	mov	_var01, ##@LR__5571
1d2b8     04 E4 05 F1 | 	add	objptr, #4
1d2bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c0     87 01 00 FF 
1d2c4     F2 00 06 F6 | 	mov	_var01, ##@LR__5572
1d2c8     04 E4 05 F1 | 	add	objptr, #4
1d2cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d0     87 01 00 FF 
1d2d4     0B 01 06 F6 | 	mov	_var01, ##@LR__5573
1d2d8     04 E4 05 F1 | 	add	objptr, #4
1d2dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e0     87 01 00 FF 
1d2e4     2A 01 06 F6 | 	mov	_var01, ##@LR__5574
1d2e8     04 E4 05 F1 | 	add	objptr, #4
1d2ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f0     87 01 00 FF 
1d2f4     39 01 06 F6 | 	mov	_var01, ##@LR__5575
1d2f8     04 E4 05 F1 | 	add	objptr, #4
1d2fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d300     87 01 00 FF 
1d304     67 01 06 F6 | 	mov	_var01, ##@LR__5576
1d308     04 E4 05 F1 | 	add	objptr, #4
1d30c     F2 00 62 FC | 	wrlong	_var01, objptr
1d310     87 01 00 FF 
1d314     75 01 06 F6 | 	mov	_var01, ##@LR__5577
1d318     04 E4 05 F1 | 	add	objptr, #4
1d31c     F2 00 62 FC | 	wrlong	_var01, objptr
1d320     87 01 00 FF 
1d324     8A 01 06 F6 | 	mov	_var01, ##@LR__5578
1d328     04 E4 05 F1 | 	add	objptr, #4
1d32c     F2 00 62 FC | 	wrlong	_var01, objptr
1d330     87 01 00 FF 
1d334     AE 01 06 F6 | 	mov	_var01, ##@LR__5579
1d338     04 E4 05 F1 | 	add	objptr, #4
1d33c     F2 00 62 FC | 	wrlong	_var01, objptr
1d340     87 01 00 FF 
1d344     C5 01 06 F6 | 	mov	_var01, ##@LR__5580
1d348     04 E4 05 F1 | 	add	objptr, #4
1d34c     F2 00 62 FC | 	wrlong	_var01, objptr
1d350     87 01 00 FF 
1d354     D8 01 06 F6 | 	mov	_var01, ##@LR__5581
1d358     04 E4 05 F1 | 	add	objptr, #4
1d35c     F2 00 62 FC | 	wrlong	_var01, objptr
1d360     87 01 00 FF 
1d364     EF 01 06 F6 | 	mov	_var01, ##@LR__5582
1d368     04 E4 05 F1 | 	add	objptr, #4
1d36c     F2 00 62 FC | 	wrlong	_var01, objptr
1d370     88 01 00 FF 
1d374     08 00 06 F6 | 	mov	_var01, ##@LR__5583
1d378     04 E4 05 F1 | 	add	objptr, #4
1d37c     F2 00 62 FC | 	wrlong	_var01, objptr
1d380     88 01 00 FF 
1d384     2A 00 06 F6 | 	mov	_var01, ##@LR__5584
1d388     04 E4 05 F1 | 	add	objptr, #4
1d38c     F2 00 62 FC | 	wrlong	_var01, objptr
1d390     88 01 00 FF 
1d394     3D 00 06 F6 | 	mov	_var01, ##@LR__5585
1d398     04 E4 05 F1 | 	add	objptr, #4
1d39c     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a0     45 00 00 FF 
1d3a4     4C E5 85 F1 | 	sub	objptr, ##35660
1d3a8                 | _init_error_strings_ret
1d3a8     2D 00 64 FD | 	ret
1d3ac                 | 
1d3ac                 | '         
1d3ac                 | ' sub printerror(err as integer)
1d3ac                 | _printerror
1d3ac     01 4A 05 F6 | 	mov	COUNT_, #1
1d3b0     A8 00 A0 FD | 	call	#pushregs_
1d3b4     09 1F 02 F6 | 	mov	local01, arg01
1d3b8     88 01 00 FF 
1d3bc     4D 12 06 F6 | 	mov	arg01, ##@LR__5586
1d3c0     5C 20 B0 FD | 	call	#_hg010b_spin2_write
1d3c4     0F 13 02 F6 | 	mov	arg01, local01
1d3c8     F8 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1d3cc     FD 12 02 F6 | 	mov	arg01, result1
1d3d0     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1d3d4     88 01 00 FF 
1d3d8     54 12 06 F6 | 	mov	arg01, ##@LR__5587
1d3dc     40 20 B0 FD | 	call	#_hg010b_spin2_write
1d3e0     02 1E 66 F0 | 	shl	local01, #2
1d3e4     45 00 00 FF 
1d3e8     7C E4 05 F1 | 	add	objptr, ##35452
1d3ec     F2 1E 02 F1 | 	add	local01, objptr
1d3f0     0F 13 02 FB | 	rdlong	arg01, local01
1d3f4     45 00 00 FF 
1d3f8     7C E4 85 F1 | 	sub	objptr, ##35452
1d3fc                 | ' 
1d3fc                 | ' write(text)
1d3fc     20 20 B0 FD | 	call	#_hg010b_spin2_write
1d400                 | ' crlf
1d400     1C 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d404     A7 F0 03 F6 | 	mov	ptra, fp
1d408     B2 00 A0 FD | 	call	#popregs_
1d40c                 | _printerror_ret
1d40c     2D 00 64 FD | 	ret
1d410                 | 
1d410                 | ' 
1d410                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d410                 | ' 
1d410                 | ' sub startpsram
1d410                 | _startpsram
1d410     00 12 06 F6 | 	mov	arg01, #0
1d414     0A 14 C6 F9 | 	decod	arg02, #10
1d418     0B 16 06 F6 | 	mov	arg03, #11
1d41c     07 18 06 F6 | 	mov	arg04, #7
1d420     0B 00 00 FF 
1d424     CC E4 05 F1 | 	add	objptr, ##5836
1d428     A4 26 B0 FD | 	call	#_psram_spin2_startx
1d42c     2B 00 00 FF 
1d430     3C E5 05 F1 | 	add	objptr, ##22332
1d434     F2 FA 61 FC | 	wrlong	result1, objptr
1d438                 | '     return $7FF00 + cog*12
1d438     0C E4 05 F1 | 	add	objptr, #12
1d43c     FF 03 80 FF 
1d440     F2 00 6A FC | 	wrlong	##524032, objptr
1d444     37 00 00 FF 
1d448     14 E4 85 F1 | 	sub	objptr, ##28180
1d44c                 | _startpsram_ret
1d44c     2D 00 64 FD | 	ret
1d450                 | 
1d450                 | ' 
1d450                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d450                 | _startvideo
1d450     01 4A 05 F6 | 	mov	COUNT_, #1
1d454     A8 00 A0 FD | 	call	#pushregs_
1d458     37 00 00 FF 
1d45c     14 E4 05 F1 | 	add	objptr, ##28180
1d460     F2 18 02 FB | 	rdlong	arg04, objptr
1d464     37 00 00 FF 
1d468     14 E4 85 F1 | 	sub	objptr, ##28180
1d46c     0A 13 02 F6 | 	mov	arg01, arg02
1d470     0C 15 02 F6 | 	mov	arg02, arg04
1d474     A0 07 B0 FD | 	call	#_hg010b_spin2_start
1d478     37 00 00 FF 
1d47c     00 E4 05 F1 | 	add	objptr, ##28160
1d480     F2 FA 61 FC | 	wrlong	result1, objptr
1d484                 | ' 
1d484                 | ' videocog=v.start(pin,mbox)
1d484                 | ' 
1d484                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d484     00 1E 06 F6 | 	mov	local01, #0
1d488     2B 00 00 FF 
1d48c     34 E5 85 F1 | 	sub	objptr, ##22324
1d490                 | LR__2360
1d490     0F 13 02 F6 | 	mov	arg01, local01
1d494     00 28 00 FF 
1d498     00 14 06 F6 | 	mov	arg02, ##5242880
1d49c     88 2A B0 FD | 	call	#_psram_spin2_setQos
1d4a0     01 1E 06 F1 | 	add	local01, #1
1d4a4     08 1E 56 F2 | 	cmps	local01, #8 wc
1d4a8     E4 FF 9F CD |  if_b	jmp	#LR__2360
1d4ac     2B 00 00 FF 
1d4b0     34 E5 05 F1 | 	add	objptr, ##22324
1d4b4     F2 12 02 FB | 	rdlong	arg01, objptr
1d4b8     7A 00 02 FF 
1d4bc     00 14 06 F6 | 	mov	arg02, ##67171328
1d4c0     2B 00 00 FF 
1d4c4     34 E5 85 F1 | 	sub	objptr, ##22324
1d4c8     5C 2A B0 FD | 	call	#_psram_spin2_setQos
1d4cc     0B 00 00 FF 
1d4d0     CC E4 85 F1 | 	sub	objptr, ##5836
1d4d4                 | ' psram.setQoS(videocog, $0400f400) 
1d4d4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d4d4     F2 14 02 F6 | 	mov	arg02, objptr
1d4d8     00 78 04 FF 
1d4dc     00 14 46 F5 | 	or	arg02, ##149946368
1d4e0     00 16 06 F6 | 	mov	arg03, #0
1d4e4     00 18 06 F6 | 	mov	arg04, #0
1d4e8     00 12 06 F6 | 	mov	arg01, #0
1d4ec     F4 3E B0 FD | 	call	#__system___basic_open
1d4f0                 | ' return videocog
1d4f0     37 00 00 FF 
1d4f4     00 E4 05 F1 | 	add	objptr, ##28160
1d4f8     F2 FA 01 FB | 	rdlong	result1, objptr
1d4fc     37 00 00 FF 
1d500     00 E4 85 F1 | 	sub	objptr, ##28160
1d504     A7 F0 03 F6 | 	mov	ptra, fp
1d508     B2 00 A0 FD | 	call	#popregs_
1d50c                 | _startvideo_ret
1d50c     2D 00 64 FD | 	ret
1d510                 | 
1d510                 | ' 
1d510                 | ' 
1d510                 | ' 
1d510                 | ' 
1d510                 | ' '' ------------------------------- Convenient psram peek/poke
1d510                 | ' 
1d510                 | ' sub pslpoke(addr as ulong,value as ulong)
1d510                 | _pslpoke
1d510     00 4A 05 F6 | 	mov	COUNT_, #0
1d514     A8 00 A0 FD | 	call	#pushregs_
1d518     08 F0 07 F1 | 	add	ptra, #8
1d51c     A7 12 62 FC | 	wrlong	arg01, fp
1d520     04 4E 05 F1 | 	add	fp, #4
1d524     A7 14 62 FC | 	wrlong	arg02, fp
1d528     A7 12 02 F6 | 	mov	arg01, fp
1d52c     04 4E 85 F1 | 	sub	fp, #4
1d530     A7 14 02 FB | 	rdlong	arg02, fp
1d534     04 16 06 F6 | 	mov	arg03, #4
1d538     0B 00 00 FF 
1d53c     CC E4 05 F1 | 	add	objptr, ##5836
1d540     54 28 B0 FD | 	call	#_psram_spin2_write
1d544     0B 00 00 FF 
1d548     CC E4 85 F1 | 	sub	objptr, ##5836
1d54c     A7 F0 03 F6 | 	mov	ptra, fp
1d550     B2 00 A0 FD | 	call	#popregs_
1d554                 | _pslpoke_ret
1d554     2D 00 64 FD | 	ret
1d558                 | 
1d558                 | ' 
1d558                 | ' sub psdpoke(addr as ulong,value as ulong)
1d558                 | _psdpoke
1d558     00 4A 05 F6 | 	mov	COUNT_, #0
1d55c     A8 00 A0 FD | 	call	#pushregs_
1d560     08 F0 07 F1 | 	add	ptra, #8
1d564     A7 12 62 FC | 	wrlong	arg01, fp
1d568     04 4E 05 F1 | 	add	fp, #4
1d56c     A7 14 62 FC | 	wrlong	arg02, fp
1d570     A7 12 02 F6 | 	mov	arg01, fp
1d574     04 4E 85 F1 | 	sub	fp, #4
1d578     A7 14 02 FB | 	rdlong	arg02, fp
1d57c     02 16 06 F6 | 	mov	arg03, #2
1d580     0B 00 00 FF 
1d584     CC E4 05 F1 | 	add	objptr, ##5836
1d588     0C 28 B0 FD | 	call	#_psram_spin2_write
1d58c     0B 00 00 FF 
1d590     CC E4 85 F1 | 	sub	objptr, ##5836
1d594     A7 F0 03 F6 | 	mov	ptra, fp
1d598     B2 00 A0 FD | 	call	#popregs_
1d59c                 | _psdpoke_ret
1d59c     2D 00 64 FD | 	ret
1d5a0                 | 
1d5a0                 | ' 
1d5a0                 | ' sub pspoke(addr as ulong,value as ulong)
1d5a0                 | _pspoke
1d5a0     00 4A 05 F6 | 	mov	COUNT_, #0
1d5a4     A8 00 A0 FD | 	call	#pushregs_
1d5a8     08 F0 07 F1 | 	add	ptra, #8
1d5ac     A7 12 62 FC | 	wrlong	arg01, fp
1d5b0     04 4E 05 F1 | 	add	fp, #4
1d5b4     A7 14 62 FC | 	wrlong	arg02, fp
1d5b8     A7 12 02 F6 | 	mov	arg01, fp
1d5bc     04 4E 85 F1 | 	sub	fp, #4
1d5c0     A7 14 02 FB | 	rdlong	arg02, fp
1d5c4     01 16 06 F6 | 	mov	arg03, #1
1d5c8     0B 00 00 FF 
1d5cc     CC E4 05 F1 | 	add	objptr, ##5836
1d5d0     C4 27 B0 FD | 	call	#_psram_spin2_write
1d5d4     0B 00 00 FF 
1d5d8     CC E4 85 F1 | 	sub	objptr, ##5836
1d5dc     A7 F0 03 F6 | 	mov	ptra, fp
1d5e0     B2 00 A0 FD | 	call	#popregs_
1d5e4                 | _pspoke_ret
1d5e4     2D 00 64 FD | 	ret
1d5e8                 | 
1d5e8                 | ' 
1d5e8                 | ' function pspeek(adr as ulong) as ubyte
1d5e8                 | _pspeek
1d5e8     00 4A 05 F6 | 	mov	COUNT_, #0
1d5ec     A8 00 A0 FD | 	call	#pushregs_
1d5f0     0C F0 07 F1 | 	add	ptra, #12
1d5f4     04 4E 05 F1 | 	add	fp, #4
1d5f8     A7 12 62 FC | 	wrlong	arg01, fp
1d5fc     04 4E 05 F1 | 	add	fp, #4
1d600     A7 12 02 F6 | 	mov	arg01, fp
1d604     04 4E 85 F1 | 	sub	fp, #4
1d608     A7 14 02 FB | 	rdlong	arg02, fp
1d60c     04 4E 85 F1 | 	sub	fp, #4
1d610     01 16 06 F6 | 	mov	arg03, #1
1d614     0B 00 00 FF 
1d618     CC E4 05 F1 | 	add	objptr, ##5836
1d61c     DC 26 B0 FD | 	call	#_psram_spin2_read1
1d620     0B 00 00 FF 
1d624     CC E4 85 F1 | 	sub	objptr, ##5836
1d628                 | ' psram.read1(varptr(res),adr,1)
1d628                 | ' return res
1d628     08 4E 05 F1 | 	add	fp, #8
1d62c     A7 FA C1 FA | 	rdbyte	result1, fp
1d630     08 4E 85 F1 | 	sub	fp, #8
1d634     A7 F0 03 F6 | 	mov	ptra, fp
1d638     B2 00 A0 FD | 	call	#popregs_
1d63c                 | _pspeek_ret
1d63c     2D 00 64 FD | 	ret
1d640                 | 
1d640                 | ' 
1d640                 | ' function pslpeek(adr as ulong) as ulong
1d640                 | _pslpeek
1d640     00 4A 05 F6 | 	mov	COUNT_, #0
1d644     A8 00 A0 FD | 	call	#pushregs_
1d648     0C F0 07 F1 | 	add	ptra, #12
1d64c     04 4E 05 F1 | 	add	fp, #4
1d650     A7 12 62 FC | 	wrlong	arg01, fp
1d654     04 4E 05 F1 | 	add	fp, #4
1d658     A7 12 02 F6 | 	mov	arg01, fp
1d65c     04 4E 85 F1 | 	sub	fp, #4
1d660     A7 14 02 FB | 	rdlong	arg02, fp
1d664     04 4E 85 F1 | 	sub	fp, #4
1d668     04 16 06 F6 | 	mov	arg03, #4
1d66c     0B 00 00 FF 
1d670     CC E4 05 F1 | 	add	objptr, ##5836
1d674     84 26 B0 FD | 	call	#_psram_spin2_read1
1d678     0B 00 00 FF 
1d67c     CC E4 85 F1 | 	sub	objptr, ##5836
1d680                 | ' psram.read1(varptr(res),adr,4)
1d680                 | ' return res
1d680     08 4E 05 F1 | 	add	fp, #8
1d684     A7 FA 01 FB | 	rdlong	result1, fp
1d688     08 4E 85 F1 | 	sub	fp, #8
1d68c     A7 F0 03 F6 | 	mov	ptra, fp
1d690     B2 00 A0 FD | 	call	#popregs_
1d694                 | _pslpeek_ret
1d694     2D 00 64 FD | 	ret
1d698                 | 
1d698                 | ' 
1d698                 | ' function psdpeek(adr as ulong) as ulong
1d698                 | _psdpeek
1d698     00 4A 05 F6 | 	mov	COUNT_, #0
1d69c     A8 00 A0 FD | 	call	#pushregs_
1d6a0     0C F0 07 F1 | 	add	ptra, #12
1d6a4     04 4E 05 F1 | 	add	fp, #4
1d6a8     A7 12 62 FC | 	wrlong	arg01, fp
1d6ac     04 4E 05 F1 | 	add	fp, #4
1d6b0     A7 12 02 F6 | 	mov	arg01, fp
1d6b4     04 4E 85 F1 | 	sub	fp, #4
1d6b8     A7 14 02 FB | 	rdlong	arg02, fp
1d6bc     04 4E 85 F1 | 	sub	fp, #4
1d6c0     02 16 06 F6 | 	mov	arg03, #2
1d6c4     0B 00 00 FF 
1d6c8     CC E4 05 F1 | 	add	objptr, ##5836
1d6cc     2C 26 B0 FD | 	call	#_psram_spin2_read1
1d6d0     0B 00 00 FF 
1d6d4     CC E4 85 F1 | 	sub	objptr, ##5836
1d6d8                 | ' psram.read1(varptr(res),adr,2)
1d6d8                 | ' return res
1d6d8     08 4E 05 F1 | 	add	fp, #8
1d6dc     A7 FA E1 FA | 	rdword	result1, fp
1d6e0     08 4E 85 F1 | 	sub	fp, #8
1d6e4     A7 F0 03 F6 | 	mov	ptra, fp
1d6e8     B2 00 A0 FD | 	call	#popregs_
1d6ec                 | _psdpeek_ret
1d6ec     2D 00 64 FD | 	ret
1d6f0                 | 
1d6f0                 | ' 
1d6f0                 | ' '' ------------------------------- USB keyboard scan to char translator
1d6f0                 | ' 
1d6f0                 | ' function scantochar(key)
1d6f0                 | _scantochar
1d6f0                 | ' 
1d6f0                 | ' select case (key shr 8) and 255
1d6f0     09 01 02 F6 | 	mov	_var01, arg01
1d6f4     08 00 C6 F0 | 	sar	_var01, #8
1d6f8     FF 00 0E F5 | 	and	_var01, #255 wz
1d6fc     24 00 90 AD |  if_e	jmp	#LR__2370
1d700     02 00 0E F2 | 	cmp	_var01, #2 wz
1d704     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d708     30 00 90 AD |  if_e	jmp	#LR__2371
1d70c     40 00 0E F2 | 	cmp	_var01, #64 wz
1d710     44 00 90 AD |  if_e	jmp	#LR__2372
1d714     42 00 0E F2 | 	cmp	_var01, #66 wz
1d718     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d71c     70 00 90 5D |  if_ne	jmp	#LR__2374
1d720     50 00 90 FD | 	jmp	#LR__2373
1d724                 | LR__2370
1d724     09 FB 01 F6 | 	mov	result1, arg01
1d728     7F FA 05 F5 | 	and	result1, #127
1d72c     02 FA 65 F0 | 	shl	result1, #2
1d730     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d734     FD FA C1 FA | 	rdbyte	result1, result1
1d738     54 00 90 FD | 	jmp	#_scantochar_ret
1d73c                 | LR__2371
1d73c     09 FB 01 F6 | 	mov	result1, arg01
1d740     7F FA 05 F5 | 	and	result1, #127
1d744     02 FA 65 F0 | 	shl	result1, #2
1d748     01 FA 05 F1 | 	add	result1, #1
1d74c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d750     FD FA C1 FA | 	rdbyte	result1, result1
1d754     38 00 90 FD | 	jmp	#_scantochar_ret
1d758                 | LR__2372
1d758     09 FB 01 F6 | 	mov	result1, arg01
1d75c     7F FA 05 F5 | 	and	result1, #127
1d760     02 FA 65 F0 | 	shl	result1, #2
1d764     02 FA 05 F1 | 	add	result1, #2
1d768     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d76c     FD FA C1 FA | 	rdbyte	result1, result1
1d770     1C 00 90 FD | 	jmp	#_scantochar_ret
1d774                 | LR__2373
1d774     09 FB 01 F6 | 	mov	result1, arg01
1d778     7F FA 05 F5 | 	and	result1, #127
1d77c     02 FA 65 F0 | 	shl	result1, #2
1d780     03 FA 05 F1 | 	add	result1, #3
1d784     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d788     FD FA C1 FA | 	rdbyte	result1, result1
1d78c     00 00 90 FD | 	jmp	#_scantochar_ret
1d790                 | LR__2374
1d790                 | _scantochar_ret
1d790     2D 00 64 FD | 	ret
1d794                 | 
1d794                 | _program
1d794     01 4A 05 F6 | 	mov	COUNT_, #1
1d798     A8 00 A0 FD | 	call	#pushregs_
1d79c     70 FC BF FD | 	call	#_startpsram
1d7a0     40 12 06 F6 | 	mov	arg01, #64
1d7a4     00 14 06 F6 | 	mov	arg02, #0
1d7a8     00 16 06 F6 | 	mov	arg03, #0
1d7ac     A0 FC BF FD | 	call	#_startvideo
1d7b0     37 00 00 FF 
1d7b4     14 E4 05 F1 | 	add	objptr, ##28180
1d7b8     F2 12 02 FB | 	rdlong	arg01, objptr
1d7bc     00 14 06 F6 | 	mov	arg02, #0
1d7c0     FB 03 00 FF 
1d7c4     00 17 06 F6 | 	mov	arg03, ##521984
1d7c8     2B 00 00 FF 
1d7cc     48 E5 85 F1 | 	sub	objptr, ##22344
1d7d0     04 2B B0 FD | 	call	#_audio096_spin2_start
1d7d4     FE 16 02 F6 | 	mov	arg03, result2
1d7d8     2B 00 00 FF 
1d7dc     30 E5 05 F1 | 	add	objptr, ##22320
1d7e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d7e4     14 E4 05 F1 | 	add	objptr, #20
1d7e8     F2 16 62 FC | 	wrlong	arg03, objptr
1d7ec     37 00 00 FF 
1d7f0     10 E4 85 F1 | 	sub	objptr, ##28176
1d7f4     32 12 06 F6 | 	mov	arg01, #50
1d7f8     34 34 B0 FD | 	call	#__system___waitms
1d7fc     37 00 00 FF 
1d800     10 E4 05 F1 | 	add	objptr, ##28176
1d804     F2 12 02 FB | 	rdlong	arg01, objptr
1d808     37 00 00 FF 
1d80c     10 E4 85 F1 | 	sub	objptr, ##28176
1d810     14 12 06 F1 | 	add	arg01, #20
1d814     20 00 80 FF 
1d818     09 01 58 FC | 	wrword	##16384, arg01
1d81c     10 28 B0 FD | 	call	#_usbnew_spin2_start
1d820     37 00 00 FF 
1d824     04 E4 05 F1 | 	add	objptr, ##28164
1d828     F2 FA 61 FC | 	wrlong	result1, objptr
1d82c                 | '   mouse_limits[0] := xlim
1d82c     0F 00 00 FF 
1d830     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d834     01 00 80 FF 
1d838     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d83c                 | '   mouse_limits[1] := ylim
1d83c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d840     01 00 80 FF 
1d844     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d848     36 00 00 FF 
1d84c     F3 E4 85 F1 | 	sub	objptr, ##27891
1d850     F2 12 02 F6 | 	mov	arg01, objptr
1d854     11 E5 85 F1 | 	sub	objptr, #273
1d858     C4 12 06 F1 | 	add	arg01, #196
1d85c                 | '   mouse_outptr := ptr
1d85c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d860     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d864     0F 00 00 FF 
1d868     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d86c     0E 00 00 FF 
1d870     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1d874     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d878     0E 00 00 FF 
1d87c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1d880     10 12 06 F6 | 	mov	arg01, #16
1d884     28 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d888     10 12 06 F6 | 	mov	arg01, #16
1d88c     20 14 06 F6 | 	mov	arg02, #32
1d890     20 16 06 F6 | 	mov	arg03, #32
1d894     A8 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d898     09 12 C6 F9 | 	decod	arg01, #9
1d89c     2C 15 06 F6 | 	mov	arg02, #300
1d8a0     E4 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d8a4     F2 16 02 F6 | 	mov	arg03, objptr
1d8a8     50 00 00 FF 
1d8ac     1C E5 05 F1 | 	add	objptr, ##41244
1d8b0     F2 14 02 F6 | 	mov	arg02, objptr
1d8b4     0A 17 62 FC | 	wrlong	arg03, arg02
1d8b8     04 14 06 F1 | 	add	arg02, #4
1d8bc     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1d8c0     EF 14 02 F6 | 	mov	arg02, entryptr__
1d8c4     1E FA 05 F6 | 	mov	result1, #30
1d8c8     28 E4 61 FD | 	setq	objptr
1d8cc     0A FB F1 FC | 	coginit	result1, arg02 wc
1d8d0     01 FA 65 C6 |  if_b	neg	result1, #1
1d8d4     04 E4 85 F1 | 	sub	objptr, #4
1d8d8     F2 FA 61 FC | 	wrlong	result1, objptr
1d8dc     01 00 00 FF 
1d8e0     90 E4 05 F1 | 	add	objptr, ##656
1d8e4     F2 00 68 FC | 	wrlong	#0, objptr
1d8e8     1A 00 00 FF 
1d8ec     74 E5 85 F1 | 	sub	objptr, ##13684
1d8f0     F2 04 68 FC | 	wrlong	#2, objptr
1d8f4     04 E4 05 F1 | 	add	objptr, #4
1d8f8     F2 26 69 FC | 	wrlong	#147, objptr
1d8fc     04 E4 05 F1 | 	add	objptr, #4
1d900     F2 34 69 FC | 	wrlong	#154, objptr
1d904     04 E4 05 F1 | 	add	objptr, #4
1d908     F2 08 68 FC | 	wrlong	#4, objptr
1d90c     04 E4 85 F1 | 	sub	objptr, #4
1d910     F2 16 02 FB | 	rdlong	arg03, objptr
1d914     14 E4 85 F1 | 	sub	objptr, #20
1d918     F2 16 62 FC | 	wrlong	arg03, objptr
1d91c     04 E4 05 F1 | 	add	objptr, #4
1d920     F2 00 68 FC | 	wrlong	#0, objptr
1d924     04 E4 05 F1 | 	add	objptr, #4
1d928     F2 00 68 FC | 	wrlong	#0, objptr
1d92c     19 00 00 FF 
1d930     E4 E4 05 F1 | 	add	objptr, ##13028
1d934     F2 02 68 FC | 	wrlong	#1, objptr
1d938     01 00 00 FF 
1d93c     9C E4 05 F1 | 	add	objptr, ##668
1d940     F2 00 68 FC | 	wrlong	#0, objptr
1d944     01 00 00 FF 
1d948     00 EA 05 F1 | 	add	ptr__dat__, ##512
1d94c     08 E4 05 F1 | 	add	objptr, #8
1d950     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1d954     04 E4 85 F1 | 	sub	objptr, #4
1d958     03 00 80 FF 
1d95c     F2 3C 69 FC | 	wrlong	##1694, objptr
1d960     0C 00 00 FF 
1d964     50 E5 85 F1 | 	sub	objptr, ##6480
1d968     F2 18 68 FC | 	wrlong	#12, objptr
1d96c     45 00 00 FF 
1d970     64 E4 85 F1 | 	sub	objptr, ##35428
1d974     01 00 00 FF 
1d978     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1d97c     0C DB BF FD | 	call	#_init_commands
1d980     C8 F6 BF FD | 	call	#_init_error_strings
1d984     C4 ED BF FD | 	call	#_init_audio
1d988     4C 24 BF FD | 	call	#_do_new
1d98c     37 00 00 FF 
1d990     3C E4 05 F1 | 	add	objptr, ##28220
1d994     F2 12 02 FB | 	rdlong	arg01, objptr
1d998     04 E4 85 F1 | 	sub	objptr, #4
1d99c     F2 14 02 FB | 	rdlong	arg02, objptr
1d9a0     37 00 00 FF 
1d9a4     38 E4 85 F1 | 	sub	objptr, ##28216
1d9a8     B4 16 B0 FD | 	call	#_hg010b_spin2_cls
1d9ac     37 00 00 FF 
1d9b0     40 E4 05 F1 | 	add	objptr, ##28224
1d9b4     F2 12 02 FB | 	rdlong	arg01, objptr
1d9b8     37 00 00 FF 
1d9bc     40 E4 85 F1 | 	sub	objptr, ##28224
1d9c0     4C 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1d9c4                 | ' 
1d9c4                 | ' leading_spaces:=amount
1d9c4     01 00 00 FF 
1d9c8     B6 E4 05 F1 | 	add	objptr, ##694
1d9cc     F2 04 68 FC | 	wrlong	#2, objptr
1d9d0     01 00 00 FF 
1d9d4     B6 E4 85 F1 | 	sub	objptr, ##694
1d9d8     88 01 00 FF 
1d9dc     57 1E 06 F6 | 	mov	local01, ##@LR__5588
1d9e0     3D 12 06 F6 | 	mov	arg01, #61
1d9e4     3C 14 06 F6 | 	mov	arg02, #60
1d9e8     3B 16 06 F6 | 	mov	arg03, #59
1d9ec     3A 18 06 F6 | 	mov	arg04, #58
1d9f0     08 7A B0 FD | 	call	#__system___vfs_open_sdcardx
1d9f4     FD 14 02 F6 | 	mov	arg02, result1
1d9f8     0F 13 02 F6 | 	mov	arg01, local01
1d9fc     08 33 B0 FD | 	call	#__system___mount
1da00     88 01 00 FF 
1da04     5B 12 06 F6 | 	mov	arg01, ##@LR__5589
1da08     BC 35 B0 FD | 	call	#__system___chdir
1da0c     88 01 00 FF 
1da10     63 1E 06 F6 | 	mov	local01, ##@LR__5590
1da14     4A 00 00 FF 
1da18     94 E4 05 F1 | 	add	objptr, ##38036
1da1c     F2 1E 62 FC | 	wrlong	local01, objptr
1da20     13 00 00 FF 
1da24     60 E4 85 F1 | 	sub	objptr, ##9824
1da28     F2 12 02 FB | 	rdlong	arg01, objptr
1da2c     37 00 00 FF 
1da30     34 E4 85 F1 | 	sub	objptr, ##28212
1da34     01 12 66 F0 | 	shl	arg01, #1
1da38     01 14 06 F6 | 	mov	arg02, #1
1da3c     10 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1da40                 | ' init_commands
1da40                 | ' init_error_strings
1da40                 | ' init_audio
1da40                 | ' do_new
1da40                 | ' cls(ink, paper)
1da40                 | ' v.setfontfamily(font) 				' use ST Mono font
1da40                 | ' v.setleadingspaces(2)
1da40                 | ' mount "/sd", _vfs_open_sdcard()
1da40                 | ' chdir "/sd/bas"
1da40                 | ' currentdir$="/sd/bas"
1da40                 | ' position 2*editor_spaces,1 : print ver$
1da40     00 12 06 F6 | 	mov	arg01, #0
1da44     58 89 B0 FD | 	call	#__system___getiolock_0540
1da48     FD 12 02 F6 | 	mov	arg01, result1
1da4c     EC 2E B0 FD | 	call	#__system___lockmem
1da50     18 00 00 FF 
1da54     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1da58     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1da5c     18 00 00 FF 
1da60     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1da64     00 12 06 F6 | 	mov	arg01, #0
1da68     00 16 06 F6 | 	mov	arg03, #0
1da6c     C0 3B B0 FD | 	call	#__system___basic_print_string
1da70     00 12 06 F6 | 	mov	arg01, #0
1da74     0A 14 06 F6 | 	mov	arg02, #10
1da78     00 16 06 F6 | 	mov	arg03, #0
1da7c     58 3B B0 FD | 	call	#__system___basic_print_char
1da80     00 12 06 F6 | 	mov	arg01, #0
1da84     18 89 B0 FD | 	call	#__system___getiolock_0540
1da88     FD 00 68 FC | 	wrlong	#0, result1
1da8c     51 00 00 FF 
1da90     AC E5 05 F1 | 	add	objptr, ##41900
1da94     F2 12 02 FB | 	rdlong	arg01, objptr
1da98     0E 00 00 FF 
1da9c     50 E5 85 F1 | 	sub	objptr, ##7504
1daa0     F2 1E 02 FB | 	rdlong	local01, objptr
1daa4     43 00 00 FF 
1daa8     5C E4 85 F1 | 	sub	objptr, ##34396
1daac     0F 13 82 F1 | 	sub	arg01, local01
1dab0     00 14 06 F6 | 	mov	arg02, #0
1dab4     0A 16 06 F6 | 	mov	arg03, #10
1dab8     50 51 B0 FD | 	call	#__system__Number_S
1dabc     FD 12 02 F6 | 	mov	arg01, result1
1dac0     88 01 00 FF 
1dac4     6B 14 06 F6 | 	mov	arg02, ##@LR__5591
1dac8     CC 2E B0 FD | 	call	#__system___string_concat
1dacc     FD 1E 02 F6 | 	mov	local01, result1
1dad0     50 00 00 FF 
1dad4     10 E5 05 F1 | 	add	objptr, ##41232
1dad8     F2 1E 62 FC | 	wrlong	local01, objptr
1dadc     50 00 00 FF 
1dae0     10 E5 85 F1 | 	sub	objptr, ##41232
1dae4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1dae4     00 12 06 F6 | 	mov	arg01, #0
1dae8     B4 88 B0 FD | 	call	#__system___getiolock_0540
1daec     FD 12 02 F6 | 	mov	arg01, result1
1daf0     48 2E B0 FD | 	call	#__system___lockmem
1daf4     50 00 00 FF 
1daf8     10 E5 05 F1 | 	add	objptr, ##41232
1dafc     F2 14 02 FB | 	rdlong	arg02, objptr
1db00     50 00 00 FF 
1db04     10 E5 85 F1 | 	sub	objptr, ##41232
1db08     00 12 06 F6 | 	mov	arg01, #0
1db0c     00 16 06 F6 | 	mov	arg03, #0
1db10     1C 3B B0 FD | 	call	#__system___basic_print_string
1db14     00 12 06 F6 | 	mov	arg01, #0
1db18     0A 14 06 F6 | 	mov	arg02, #10
1db1c     00 16 06 F6 | 	mov	arg03, #0
1db20     B4 3A B0 FD | 	call	#__system___basic_print_char
1db24     00 12 06 F6 | 	mov	arg01, #0
1db28     74 88 B0 FD | 	call	#__system___getiolock_0540
1db2c     FD 00 68 FC | 	wrlong	#0, result1
1db30     37 00 00 FF 
1db34     34 E4 05 F1 | 	add	objptr, ##28212
1db38     F2 12 02 FB | 	rdlong	arg01, objptr
1db3c     37 00 00 FF 
1db40     34 E4 85 F1 | 	sub	objptr, ##28212
1db44     01 12 66 F0 | 	shl	arg01, #1
1db48     04 14 06 F6 | 	mov	arg02, #4
1db4c     00 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1db50                 | ' position 2*editor_spaces,4 : print "Ready"
1db50     00 12 06 F6 | 	mov	arg01, #0
1db54     48 88 B0 FD | 	call	#__system___getiolock_0540
1db58     FD 12 02 F6 | 	mov	arg01, result1
1db5c     DC 2D B0 FD | 	call	#__system___lockmem
1db60     88 01 00 FF 
1db64     7D 14 06 F6 | 	mov	arg02, ##@LR__5592
1db68     00 12 06 F6 | 	mov	arg01, #0
1db6c     00 16 06 F6 | 	mov	arg03, #0
1db70     BC 3A B0 FD | 	call	#__system___basic_print_string
1db74     00 12 06 F6 | 	mov	arg01, #0
1db78     0A 14 06 F6 | 	mov	arg02, #10
1db7c     00 16 06 F6 | 	mov	arg03, #0
1db80     54 3A B0 FD | 	call	#__system___basic_print_char
1db84     00 12 06 F6 | 	mov	arg01, #0
1db88     14 88 B0 FD | 	call	#__system___getiolock_0540
1db8c     FD 00 68 FC | 	wrlong	#0, result1
1db90     00 14 06 F6 | 	mov	arg02, #0
1db94     01 14 D6 F7 | 	test	arg02, #1 wc
1db98     5A 4C 64 FD | 	drvc	#38
1db9c     01 14 D6 F7 | 	test	arg02, #1 wc
1dba0     5A 4E 64 FD | 	drvc	#39
1dba4     88 01 00 FF 
1dba8     83 1E 06 F6 | 	mov	local01, ##@LR__5593
1dbac     51 00 00 FF 
1dbb0     D8 E5 05 F1 | 	add	objptr, ##41944
1dbb4     F2 1E 62 FC | 	wrlong	local01, objptr
1dbb8     04 E4 05 F1 | 	add	objptr, #4
1dbbc     FF FF FF FF 
1dbc0     F2 FE 6B FC | 	wrlong	##-1, objptr
1dbc4     51 00 00 FF 
1dbc8     DC E5 85 F1 | 	sub	objptr, ##41948
1dbcc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dbcc                 | ' loadname="noname.bas"
1dbcc                 | ' do_insert=-1
1dbcc                 | ' 
1dbcc                 | ' '-------------------------------------------------------------------------------------------------------- 
1dbcc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dbcc                 | ' '--------------------------------------------------------------------------------------------------------
1dbcc                 | ' 
1dbcc                 | ' do
1dbcc                 | LR__2380
1dbcc     34 2C BE FD | 	call	#_edit
1dbd0     FD 1E 02 F6 | 	mov	local01, result1
1dbd4     37 00 00 FF 
1dbd8     1C E4 05 F1 | 	add	objptr, ##28188
1dbdc     F2 1E 62 FC | 	wrlong	local01, objptr
1dbe0     37 00 00 FF 
1dbe4     1C E4 85 F1 | 	sub	objptr, ##28188
1dbe8     8C 3A BE FD | 	call	#_interpret
1dbec     88 01 00 FF 
1dbf0     8E 1E 06 F6 | 	mov	local01, ##@LR__5594
1dbf4     37 00 00 FF 
1dbf8     1C E4 05 F1 | 	add	objptr, ##28188
1dbfc     F2 1E 62 FC | 	wrlong	local01, objptr
1dc00     37 00 00 FF 
1dc04     1C E4 85 F1 | 	sub	objptr, ##28188
1dc08     C0 FF 9F FD | 	jmp	#LR__2380
1dc0c     A7 F0 03 F6 | 	mov	ptra, fp
1dc10     B2 00 A0 FD | 	call	#popregs_
1dc14                 | _program_ret
1dc14     2D 00 64 FD | 	ret
1dc18                 | 
1dc18                 | ' '' this is not a main program.
1dc18                 | ' 
1dc18                 | ' '****************************************************************************************************************
1dc18                 | ' '                                                                                                             	*
1dc18                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1dc18                 | ' '                                                                                                            	*
1dc18                 | ' ' base - HDMI base pin												*
1dc18                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1dc18                 | ' '														*
1dc18                 | ' '														*
1dc18                 | ' '****************************************************************************************************************
1dc18                 | ' 
1dc18                 | ' pub start(base,mb):result |i
1dc18                 | _hg010b_spin2_start
1dc18                 | ' 
1dc18                 | ' '--------------------------- initialize pointers and variables
1dc18                 | ' 
1dc18                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1dc18     34 E4 05 F1 | 	add	objptr, #52
1dc1c     F2 FA 01 F6 | 	mov	result1, objptr
1dc20     28 E4 85 F1 | 	sub	objptr, #40
1dc24     F2 FA 61 FC | 	wrlong	result1, objptr
1dc28                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1dc28                 | ' hdmibase:=base							' HDMI base pin, 8*n
1dc28     18 E4 05 F1 | 	add	objptr, #24
1dc2c     F2 12 62 FC | 	wrlong	arg01, objptr
1dc30                 | ' mailbox_ptr:=mb		
1dc30     04 E4 05 F1 | 	add	objptr, #4
1dc34     F2 14 62 FC | 	wrlong	arg02, objptr
1dc38                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1dc38     C1 E5 05 F1 | 	add	objptr, #449
1dc3c     F2 14 62 FC | 	wrlong	arg02, objptr
1dc40                 | ' sprite_ptr:=@spr1ptr
1dc40     D8 E4 85 F1 | 	sub	objptr, #216
1dc44     F2 FA 01 F6 | 	mov	result1, objptr
1dc48     E5 E4 85 F1 | 	sub	objptr, #229
1dc4c     F2 FA 61 FC | 	wrlong	result1, objptr
1dc50                 | ' 
1dc50                 | ' 		'
1dc50                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1dc50     E5 E4 05 F1 | 	add	objptr, #229
1dc54     F2 FA 01 FB | 	rdlong	result1, objptr
1dc58     D0 FA 05 F1 | 	add	result1, #208
1dc5c     FD 10 58 FC | 	wrword	#8, result1
1dc60                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1dc60     F2 16 02 FB | 	rdlong	arg03, objptr
1dc64     D2 16 06 F1 | 	add	arg03, #210
1dc68     0B 21 58 FC | 	wrword	#16, arg03
1dc6c                 | ' leading_spaces:=0				'
1dc6c     A5 E5 05 F1 | 	add	objptr, #421
1dc70     F2 00 68 FC | 	wrlong	#0, objptr
1dc74                 | ' 
1dc74                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1dc74     99 E4 85 F1 | 	sub	objptr, #153
1dc78     00 00 A0 FF 
1dc7c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1dc80                 | ' emptydl[1]:=0
1dc80     04 E4 05 F1 | 	add	objptr, #4
1dc84     F2 00 68 FC | 	wrlong	#0, objptr
1dc88                 | ' 
1dc88                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1dc88                 | ' 
1dc88                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1dc88     28 E5 85 F1 | 	sub	objptr, #296
1dc8c     F2 02 68 FC | 	wrlong	#1, objptr
1dc90                 | ' if s_debug<>0
1dc90                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1dc90     20 00 80 FF 
1dc94     F2 00 68 FC | 	wrlong	##16384, objptr
1dc98     F9 E4 85 F1 | 	sub	objptr, #249
1dc9c                 | ' setmode()							' set the mode, see below
1dc9c     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1dca0                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1dca0     49 E4 05 F1 | 	add	objptr, #73
1dca4     F2 FA 01 F6 | 	mov	result1, objptr
1dca8     35 E4 85 F1 | 	sub	objptr, #53
1dcac     F2 FA 61 FC | 	wrlong	result1, objptr
1dcb0                 | ' cursor_ptr:=@cursor_x						
1dcb0     28 E4 05 F1 | 	add	objptr, #40
1dcb4     F2 16 02 F6 | 	mov	arg03, objptr
1dcb8     2C E4 85 F1 | 	sub	objptr, #44
1dcbc     F2 16 62 FC | 	wrlong	arg03, objptr
1dcc0                 | ' fontnum:=0  							' start with a PC type font 
1dcc0     55 E4 05 F1 | 	add	objptr, #85
1dcc4     F2 00 68 FC | 	wrlong	#0, objptr
1dcc8                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dcc8     1C E4 05 F1 | 	add	objptr, #28
1dccc     F2 12 02 F6 | 	mov	arg01, objptr
1dcd0     81 E4 85 F1 | 	sub	objptr, #129
1dcd4     10 00 00 FF 
1dcd8     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1dcdc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dce0     10 00 00 FF 
1dce4     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1dce8     10 16 06 F6 | 	mov	arg03, #16
1dcec     6C 2B B0 FD | 	call	#__system____builtin_memmove
1dcf0                 | ' leading_spaces:=0
1dcf0     01 00 00 FF 
1dcf4     B6 E4 05 F1 | 	add	objptr, ##694
1dcf8     F2 00 68 FC | 	wrlong	#0, objptr
1dcfc     01 00 00 FF 
1dd00     B6 E4 85 F1 | 	sub	objptr, ##694
1dd04                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dd04                 | ' 
1dd04                 | ' initcursor(154)
1dd04     9A 12 06 F6 | 	mov	arg01, #154
1dd08     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1dd0c                 | ' 
1dd0c                 | ' '---------------------------- start the cog
1dd0c                 | ' 
1dd0c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1dd0c     10 00 00 FF 
1dd10     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dd14     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dd18     10 00 00 FF 
1dd1c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1dd20     14 E4 05 F1 | 	add	objptr, #20
1dd24     10 FA 05 F6 | 	mov	result1, #16
1dd28     28 E4 61 FD | 	setq	objptr
1dd2c     0A FB F1 FC | 	coginit	result1, arg02 wc
1dd30     01 FA 65 C6 |  if_b	neg	result1, #1
1dd34     1C E4 05 F1 | 	add	objptr, #28
1dd38     F2 FA 61 FC | 	wrlong	result1, objptr
1dd3c     30 E4 85 F1 | 	sub	objptr, #48
1dd40                 | ' waitms(40)							' wait for stabilize
1dd40     28 12 06 F6 | 	mov	arg01, #40
1dd44     E8 2E B0 FD | 	call	#__system___waitms
1dd48                 | ' return cog							' return the driver's cog #
1dd48     30 E4 05 F1 | 	add	objptr, #48
1dd4c     F2 FA 01 FB | 	rdlong	result1, objptr
1dd50     30 E4 85 F1 | 	sub	objptr, #48
1dd54                 | _hg010b_spin2_start_ret
1dd54     2D 00 64 FD | 	ret
1dd58                 | 
1dd58                 | ' 
1dd58                 | ' 
1dd58                 | ' '**************************************************************************************************************** 
1dd58                 | ' '                                                                                                             	*
1dd58                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1dd58                 | ' '  Mode number - see start() above or bits below								*
1dd58                 | ' '                                                                                                             	*
1dd58                 | ' '****************************************************************************************************************
1dd58                 | ' 
1dd58                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dd58                 | ' pub initcursor(color) |i
1dd58                 | _hg010b_spin2_initcursor
1dd58     03 4A 05 F6 | 	mov	COUNT_, #3
1dd5c     A8 00 A0 FD | 	call	#pushregs_
1dd60     09 1F 02 F6 | 	mov	local01, arg01
1dd64                 | ' 
1dd64                 | ' cursor_x:=0							' place the cursor at 0:0
1dd64     3C E4 05 F1 | 	add	objptr, #60
1dd68     F2 00 58 FC | 	wrword	#0, objptr
1dd6c                 | ' cursor_y:=0
1dd6c     02 E4 05 F1 | 	add	objptr, #2
1dd70     F2 00 48 FC | 	wrbyte	#0, objptr
1dd74                 | ' repeat i from 0 to 111
1dd74     00 20 06 F6 | 	mov	local02, #0
1dd78     F8 E5 05 F1 | 	add	objptr, #504
1dd7c     97 1A 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1dd80                 | LR__2390
1dd80                 | '   cursor[i]:=0
1dd80     10 23 02 F6 | 	mov	local03, local02
1dd84     F2 22 02 F1 | 	add	local03, objptr
1dd88     11 01 48 FC | 	wrbyte	#0, local03
1dd8c     01 20 06 F1 | 	add	local02, #1
1dd90     70 20 56 F2 | 	cmps	local02, #112 wc
1dd94     E8 FF 9F CD |  if_b	jmp	#LR__2390
1dd98                 | ' repeat i from 112 to 127
1dd98     70 20 06 F6 | 	mov	local02, #112
1dd9c                 | LR__2391
1dd9c                 | '   cursor[i]:=color  
1dd9c     10 23 02 F6 | 	mov	local03, local02
1dda0     F2 22 02 F1 | 	add	local03, objptr
1dda4     11 1F 42 FC | 	wrbyte	local01, local03
1dda8     01 20 06 F1 | 	add	local02, #1
1ddac     80 20 16 F2 | 	cmp	local02, #128 wc
1ddb0     E8 FF 9F CD |  if_b	jmp	#LR__2391
1ddb4                 | LR__2392
1ddb4                 | ' 'repeat i from 0 to 127
1ddb4                 | ' '  if ((i/8)//2)
1ddb4                 | ' '    cursor[i]:=15
1ddb4                 | ' '  else
1ddb4                 | ' '    cursor[i]:=0
1ddb4                 | ' '  if i>=120    
1ddb4                 | ' '    cursor[i]:=40
1ddb4                 | ' setspriteptr(17,@cursor)
1ddb4     F2 14 02 F6 | 	mov	arg02, objptr
1ddb8     01 00 00 FF 
1ddbc     36 E4 85 F1 | 	sub	objptr, ##566
1ddc0     11 12 06 F6 | 	mov	arg01, #17
1ddc4     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ddc8                 | ' setspritesize(17,8,16)
1ddc8     11 12 06 F6 | 	mov	arg01, #17
1ddcc     08 14 06 F6 | 	mov	arg02, #8
1ddd0     10 16 06 F6 | 	mov	arg03, #16
1ddd4     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1ddd8                 | ' setspritepos(17,0,0)
1ddd8     11 12 06 F6 | 	mov	arg01, #17
1dddc     00 14 06 F6 | 	mov	arg02, #0
1dde0     00 16 06 F6 | 	mov	arg03, #0
1dde4     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1dde8                 | ' cursorshape:=14
1dde8     0B 00 00 FF 
1ddec     C6 E4 05 F1 | 	add	objptr, ##5830
1ddf0     F2 1C 68 FC | 	wrlong	#14, objptr
1ddf4                 | ' cursorcolor:=color
1ddf4     04 E4 85 F1 | 	sub	objptr, #4
1ddf8     F2 1E 62 FC | 	wrlong	local01, objptr
1ddfc     0B 00 00 FF 
1de00     C2 E4 85 F1 | 	sub	objptr, ##5826
1de04     A7 F0 03 F6 | 	mov	ptra, fp
1de08     B2 00 A0 FD | 	call	#popregs_
1de0c                 | _hg010b_spin2_initcursor_ret
1de0c     2D 00 64 FD | 	ret
1de10                 | 
1de10                 | ' 
1de10                 | ' pub setcursorshape(shape) | i
1de10                 | _hg010b_spin2_setcursorshape
1de10                 | ' 
1de10                 | ' cursorshape:=shape
1de10     0B 00 00 FF 
1de14     C6 E4 05 F1 | 	add	objptr, ##5830
1de18     F2 12 62 FC | 	wrlong	arg01, objptr
1de1c                 | ' repeat i from 0 to (8*cursorshape)-1
1de1c     00 00 06 F6 | 	mov	_var01, #0
1de20     09 03 02 F6 | 	mov	_var02, arg01
1de24     03 02 66 F0 | 	shl	_var02, #3
1de28     01 02 86 F1 | 	sub	_var02, #1
1de2c     00 02 56 F2 | 	cmps	_var02, #0 wc
1de30     01 04 86 F6 | 	negc	_var03, #1
1de34     02 07 02 F6 | 	mov	_var04, _var03
1de38     02 03 02 F1 | 	add	_var02, _var03
1de3c     0A 00 00 FF 
1de40     90 E4 85 F1 | 	sub	objptr, ##5264
1de44     97 0C 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1de48                 | LR__2400
1de48                 | '   cursor[i]:=0
1de48     00 05 02 F6 | 	mov	_var03, _var01
1de4c     F2 04 02 F1 | 	add	_var03, objptr
1de50     02 01 48 FC | 	wrbyte	#0, _var03
1de54     03 01 02 F1 | 	add	_var01, _var04
1de58     01 01 0A F2 | 	cmp	_var01, _var02 wz
1de5c     E8 FF 9F 5D |  if_ne	jmp	#LR__2400
1de60                 | LR__2401
1de60                 | ' repeat i from 8*cursorshape to 127
1de60     0A 00 00 FF 
1de64     90 E4 05 F1 | 	add	objptr, ##5264
1de68     F2 06 02 FB | 	rdlong	_var04, objptr
1de6c     03 01 02 F6 | 	mov	_var01, _var04
1de70     03 00 66 F0 | 	shl	_var01, #3
1de74     0B 00 00 FF 
1de78     C6 E4 85 F1 | 	sub	objptr, ##5830
1de7c     03 06 66 F0 | 	shl	_var04, #3
1de80     80 06 56 F2 | 	cmps	_var04, #128 wc
1de84     01 04 A6 F6 | 	negnc	_var03, #1
1de88     7F 02 06 F6 | 	mov	_var02, #127
1de8c     02 03 02 F1 | 	add	_var02, _var03
1de90     97 1A 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1de94                 | LR__2402
1de94                 | '   cursor[i]:=cursorcolor
1de94     00 07 02 F6 | 	mov	_var04, _var01
1de98     01 00 00 FF 
1de9c     36 E4 05 F1 | 	add	objptr, ##566
1dea0     F2 06 02 F1 | 	add	_var04, objptr
1dea4     0A 00 00 FF 
1dea8     8C E4 05 F1 | 	add	objptr, ##5260
1deac     F2 12 02 FB | 	rdlong	arg01, objptr
1deb0     0B 00 00 FF 
1deb4     C2 E4 85 F1 | 	sub	objptr, ##5826
1deb8     03 13 42 FC | 	wrbyte	arg01, _var04
1debc     02 01 02 F1 | 	add	_var01, _var03
1dec0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1dec4     CC FF 9F 5D |  if_ne	jmp	#LR__2402
1dec8                 | LR__2403
1dec8                 | _hg010b_spin2_setcursorshape_ret
1dec8     2D 00 64 FD | 	ret
1decc                 | 
1decc                 | ' 
1decc                 | ' pub setcursorcolor(color) | i
1decc                 | _hg010b_spin2_setcursorcolor
1decc                 | ' 
1decc                 | ' cursorcolor:=color
1decc     0B 00 00 FF 
1ded0     C2 E4 05 F1 | 	add	objptr, ##5826
1ded4     F2 12 62 FC | 	wrlong	arg01, objptr
1ded8                 | ' repeat i from 0 to (8*cursorshape)-1
1ded8     00 12 06 F6 | 	mov	arg01, #0
1dedc     04 E4 05 F1 | 	add	objptr, #4
1dee0     F2 00 02 FB | 	rdlong	_var01, objptr
1dee4     03 00 66 F0 | 	shl	_var01, #3
1dee8     01 00 86 F1 | 	sub	_var01, #1
1deec     00 00 56 F2 | 	cmps	_var01, #0 wc
1def0     01 02 86 F6 | 	negc	_var02, #1
1def4     01 05 02 F6 | 	mov	_var03, _var02
1def8     01 01 02 F1 | 	add	_var01, _var02
1defc     0A 00 00 FF 
1df00     90 E4 85 F1 | 	sub	objptr, ##5264
1df04     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1df08                 | LR__2410
1df08                 | '   cursor[i]:=0
1df08     09 03 02 F6 | 	mov	_var02, arg01
1df0c     F2 02 02 F1 | 	add	_var02, objptr
1df10     01 01 48 FC | 	wrbyte	#0, _var02
1df14     02 13 02 F1 | 	add	arg01, _var03
1df18     00 13 0A F2 | 	cmp	arg01, _var01 wz
1df1c     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1df20                 | LR__2411
1df20                 | ' repeat i from 8*cursorshape to 127
1df20     0A 00 00 FF 
1df24     90 E4 05 F1 | 	add	objptr, ##5264
1df28     F2 04 02 FB | 	rdlong	_var03, objptr
1df2c     02 13 02 F6 | 	mov	arg01, _var03
1df30     03 12 66 F0 | 	shl	arg01, #3
1df34     0B 00 00 FF 
1df38     C6 E4 85 F1 | 	sub	objptr, ##5830
1df3c     03 04 66 F0 | 	shl	_var03, #3
1df40     80 04 56 F2 | 	cmps	_var03, #128 wc
1df44     01 02 A6 F6 | 	negnc	_var02, #1
1df48     7F 00 06 F6 | 	mov	_var01, #127
1df4c     01 01 02 F1 | 	add	_var01, _var02
1df50     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1df54                 | LR__2412
1df54                 | '   cursor[i]:=cursorcolor
1df54     09 05 02 F6 | 	mov	_var03, arg01
1df58     01 00 00 FF 
1df5c     36 E4 05 F1 | 	add	objptr, ##566
1df60     F2 04 02 F1 | 	add	_var03, objptr
1df64     0A 00 00 FF 
1df68     8C E4 05 F1 | 	add	objptr, ##5260
1df6c     F2 06 02 FB | 	rdlong	_var04, objptr
1df70     0B 00 00 FF 
1df74     C2 E4 85 F1 | 	sub	objptr, ##5826
1df78     02 07 42 FC | 	wrbyte	_var04, _var03
1df7c     01 13 02 F1 | 	add	arg01, _var02
1df80     00 13 0A F2 | 	cmp	arg01, _var01 wz
1df84     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1df88                 | LR__2413
1df88                 | _hg010b_spin2_setcursorcolor_ret
1df88     2D 00 64 FD | 	ret
1df8c                 | 
1df8c                 | '   
1df8c                 | '   
1df8c                 | '   
1df8c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1df8c                 | _hg010b_spin2_setmode
1df8c     02 4A 05 F6 | 	mov	COUNT_, #2
1df90     A8 00 A0 FD | 	call	#pushregs_
1df94                 | ' 
1df94                 | ' 
1df94                 | ' dl_ptr:=@emptydl[0]
1df94     01 00 00 FF 
1df98     1D E4 05 F1 | 	add	objptr, ##541
1df9c     F2 1A 02 F6 | 	mov	arg05, objptr
1dfa0     FD E5 85 F1 | 	sub	objptr, #509
1dfa4     F2 1A 62 FC | 	wrlong	arg05, objptr
1dfa8                 | ' 
1dfa8                 | ' if cog>0 
1dfa8     10 E4 05 F1 | 	add	objptr, #16
1dfac     F2 1A 02 FB | 	rdlong	arg05, objptr
1dfb0     30 E4 85 F1 | 	sub	objptr, #48
1dfb4     01 1A 56 F2 | 	cmps	arg05, #1 wc
1dfb8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1dfb8     01 12 06 36 |  if_ae	mov	arg01, #1
1dfbc     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1dfc0                 | ' xres:=1024
1dfc0     01 00 00 FF 
1dfc4     26 E4 05 F1 | 	add	objptr, ##550
1dfc8     02 00 80 FF 
1dfcc     F2 00 68 FC | 	wrlong	##1024, objptr
1dfd0                 | ' yres:=600
1dfd0     04 E4 05 F1 | 	add	objptr, #4
1dfd4     01 00 80 FF 
1dfd8     F2 B0 68 FC | 	wrlong	##600, objptr
1dfdc                 | ' ppl:=(timings[3])
1dfdc     10 00 00 FF 
1dfe0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1dfe4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1dfe8     51 E5 85 F1 | 	sub	objptr, #337
1dfec     F2 1A 62 FC | 	wrlong	arg05, objptr
1dff0                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1dff0     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1dff4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1dff8     01 1E 66 F0 | 	shl	local01, #1
1dffc     80 E4 85 F1 | 	sub	objptr, #128
1e000     F2 1E 62 FC | 	wrlong	local01, objptr
1e004                 | ' cpl1:=cpl '' todo remove
1e004     04 E4 05 F1 | 	add	objptr, #4
1e008     F2 1E 62 FC | 	wrlong	local01, objptr
1e00c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e00c     02 00 00 FF 
1e010     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e014     41 E4 85 F1 | 	sub	objptr, #65
1e018     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e01c                 | ' repeat i from 0 to 3
1e01c     00 20 06 F6 | 	mov	local02, #0
1e020     02 00 00 FF 
1e024     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e028     08 E4 05 F1 | 	add	objptr, #8
1e02c     97 20 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e030                 | LR__2420
1e030                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e030     10 1F 02 F6 | 	mov	local01, local02
1e034     02 1E 66 F0 | 	shl	local01, #2
1e038     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e03c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e040     11 1A 66 F0 | 	shl	arg05, #17
1e044     0F 1F 02 FB | 	rdlong	local01, local01
1e048     0D 1F 02 F1 | 	add	local01, arg05
1e04c     80 40 38 FF 
1e050     00 1E 06 F1 | 	add	local01, ##1887502336
1e054     10 1B 02 F6 | 	mov	arg05, local02
1e058     02 1A 66 F0 | 	shl	arg05, #2
1e05c     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e060     0D 1F 62 FC | 	wrlong	local01, arg05
1e064     01 20 06 F1 | 	add	local02, #1
1e068     04 20 56 F2 | 	cmps	local02, #4 wc
1e06c     C0 FF 9F CD |  if_b	jmp	#LR__2420
1e070                 | LR__2421
1e070     24 E4 85 F1 | 	sub	objptr, #36
1e074                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e074     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e078     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e07c     14 1E 66 FC | 	wrlong	local01, #20
1e080                 | ' hubset(timings[10])
1e080     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e084     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e088     10 00 00 FF 
1e08c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e090     00 12 62 FD | 	hubset	arg01
1e094                 | ' waitms(1)                                                   	' wait for stabilization
1e094     01 12 06 F6 | 	mov	arg01, #1
1e098     94 2B B0 FD | 	call	#__system___waitms
1e09c     10 00 00 FF 
1e0a0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e0a4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e0a8     61 E4 05 F1 | 	add	objptr, #97
1e0ac     F2 20 62 FC | 	wrlong	local02, objptr
1e0b0     10 1F 52 F6 | 	abs	local01, local02 wc
1e0b4     04 1E 46 F0 | 	shr	local01, #4
1e0b8     0F 1F 82 F6 | 	negc	local01, local01
1e0bc     9C E4 05 F1 | 	add	objptr, #156
1e0c0     F2 1E 62 FC | 	wrlong	local01, objptr
1e0c4     A4 E4 85 F1 | 	sub	objptr, #164
1e0c8     F2 20 02 FB | 	rdlong	local02, objptr
1e0cc     08 E4 05 F1 | 	add	objptr, #8
1e0d0     F2 1E 02 FB | 	rdlong	local01, objptr
1e0d4     0F 21 02 FD | 	qmul	local02, local01
1e0d8                 | ' lines:=timings[11]
1e0d8                 | ' t_lines:=lines/16
1e0d8                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e0d8     29 E4 85 F1 | 	sub	objptr, #41
1e0dc     19 1E C6 F9 | 	decod	local01, #25
1e0e0     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e0e4     18 20 62 FD | 	getqx	local02
1e0e8     F2 20 62 FC | 	wrlong	local02, objptr
1e0ec     38 E4 85 F1 | 	sub	objptr, #56
1e0f0     02 20 66 F0 | 	shl	local02, #2
1e0f4     10 1F 82 F1 | 	sub	local01, local02
1e0f8     F2 1E 62 FC | 	wrlong	local01, objptr
1e0fc     FD E4 05 F1 | 	add	objptr, #253
1e100     F2 20 02 FB | 	rdlong	local02, objptr
1e104     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e108     0D 21 02 FD | 	qmul	local02, arg05
1e10c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e10c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e10c     F9 E4 85 F1 | 	sub	objptr, #249
1e110                 | ' mode_ptr:=@timings						' set pointers to timings
1e110     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e114                 | ' graphmode:=1024+512+192+48							' det global variable
1e114                 | ' makedl(graphmode)							' make a DL for the mode
1e114     03 00 00 FF 
1e118     F0 12 06 F6 | 	mov	arg01, ##1776
1e11c     18 20 62 FD | 	getqx	local02
1e120     10 1F 82 F1 | 	sub	local01, local02
1e124     F2 1E 62 FC | 	wrlong	local01, objptr
1e128     14 E4 05 F1 | 	add	objptr, #20
1e12c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e130     79 E4 05 F1 | 	add	objptr, #121
1e134     03 00 80 FF 
1e138     F2 E0 69 FC | 	wrlong	##1776, objptr
1e13c     91 E4 85 F1 | 	sub	objptr, #145
1e140     10 00 00 FF 
1e144     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e148     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e14c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e14c     F2 1E 02 FB | 	rdlong	local01, objptr
1e150     DD E4 05 F1 | 	add	objptr, #221
1e154     F2 1E 62 FC | 	wrlong	local01, objptr
1e158                 | ' s_font_ptr:=font_ptr
1e158     D5 E4 85 F1 | 	sub	objptr, #213
1e15c     F2 1E 02 FB | 	rdlong	local01, objptr
1e160     D9 E4 05 F1 | 	add	objptr, #217
1e164     F2 1E 62 FC | 	wrlong	local01, objptr
1e168                 | ' s_lines:=lines
1e168     80 E4 85 F1 | 	sub	objptr, #128
1e16c     F2 1E 02 FB | 	rdlong	local01, objptr
1e170     84 E4 05 F1 | 	add	objptr, #132
1e174     F2 1E 62 FC | 	wrlong	local01, objptr
1e178                 | ' s_buflen:=buflen
1e178     AD E4 85 F1 | 	sub	objptr, #173
1e17c     F2 1E 02 FB | 	rdlong	local01, objptr
1e180     B5 E4 05 F1 | 	add	objptr, #181
1e184     F2 1E 62 FC | 	wrlong	local01, objptr
1e188                 | ' s_cpl:=cpl
1e188     94 E4 85 F1 | 	sub	objptr, #148
1e18c     F2 1E 02 FB | 	rdlong	local01, objptr
1e190     90 E4 05 F1 | 	add	objptr, #144
1e194     F2 1E 62 FC | 	wrlong	local01, objptr
1e198                 | ' s_cpl1:=cpl
1e198     90 E4 85 F1 | 	sub	objptr, #144
1e19c     F2 1E 02 FB | 	rdlong	local01, objptr
1e1a0     98 E4 05 F1 | 	add	objptr, #152
1e1a4     F2 1E 62 FC | 	wrlong	local01, objptr
1e1a8                 | ' st_lines:=t_lines
1e1a8     0C E4 05 F1 | 	add	objptr, #12
1e1ac     F2 1E 02 FB | 	rdlong	local01, objptr
1e1b0     04 E4 05 F1 | 	add	objptr, #4
1e1b4     F2 1E 62 FC | 	wrlong	local01, objptr
1e1b8                 | ' ppl:=ppl/xzoom  
1e1b8     28 E4 85 F1 | 	sub	objptr, #40
1e1bc     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e1c0     2C E4 05 F1 | 	add	objptr, #44
1e1c4     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e1c8     05 E5 85 F1 | 	sub	objptr, #261
1e1cc     BA 00 A0 FD | 	call	#divide_
1e1d0     D9 E4 05 F1 | 	add	objptr, #217
1e1d4     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e1d8                 | ' s_ppl:=ppl
1e1d8     1C E4 05 F1 | 	add	objptr, #28
1e1dc     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e1e0     F5 E4 85 F1 | 	sub	objptr, #245
1e1e4                 | ' waitms(20)							' wait 
1e1e4     14 12 06 F6 | 	mov	arg01, #20
1e1e8     44 2A B0 FD | 	call	#__system___waitms
1e1ec                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e1ec     04 E4 05 F1 | 	add	objptr, #4
1e1f0     F2 12 02 FB | 	rdlong	arg01, objptr
1e1f4     04 E4 85 F1 | 	sub	objptr, #4
1e1f8     F2 16 02 FB | 	rdlong	arg03, objptr
1e1fc     09 17 82 F1 | 	sub	arg03, arg01
1e200     20 14 06 F6 | 	mov	arg02, #32
1e204     00 18 06 F6 | 	mov	arg04, #0
1e208     01 1A 06 F6 | 	mov	arg05, #1
1e20c     0B 00 00 FF 
1e210     CC E4 05 F1 | 	add	objptr, ##5836
1e214     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e218     0B 00 00 FF 
1e21c     CC E4 85 F1 | 	sub	objptr, ##5836
1e220     A7 F0 03 F6 | 	mov	ptra, fp
1e224     B2 00 A0 FD | 	call	#popregs_
1e228                 | _hg010b_spin2_setmode_ret
1e228     2D 00 64 FD | 	ret
1e22c                 | 
1e22c                 | ' 
1e22c                 | ' '****************************************************************************************************************
1e22c                 | ' '                                                                                                             	*
1e22c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e22c                 | ' '                                                                                                             	*
1e22c                 | ' '****************************************************************************************************************
1e22c                 | ' 
1e22c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e22c                 | _hg010b_spin2_makedl
1e22c                 | ' 
1e22c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e22c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e22c                 | ' repeat i from 0 to 11                                                           ' clear DL
1e22c     00 00 06 F6 | 	mov	_var01, #0
1e230     ED E5 05 F1 | 	add	objptr, #493
1e234     97 0E 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e238                 | LR__2430
1e238                 | '   displaylist[i]:=0 
1e238     00 03 02 F6 | 	mov	_var02, _var01
1e23c     02 02 66 F0 | 	shl	_var02, #2
1e240     F2 02 02 F1 | 	add	_var02, objptr
1e244     01 01 68 FC | 	wrlong	#0, _var02
1e248     01 00 06 F1 | 	add	_var01, #1
1e24c     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e250     E4 FF 9F CD |  if_b	jmp	#LR__2430
1e254                 | LR__2431
1e254                 | '                         ' 
1e254                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e254     8C E5 85 F1 | 	sub	objptr, #396
1e258     F2 02 02 FB | 	rdlong	_var02, objptr
1e25c     14 02 66 F0 | 	shl	_var02, #20
1e260     01 02 06 F1 | 	add	_var02, #1
1e264     04 E4 85 F1 | 	sub	objptr, #4
1e268     F2 00 02 FB | 	rdlong	_var01, objptr
1e26c     02 00 66 F0 | 	shl	_var01, #2
1e270     04 00 66 F0 | 	shl	_var01, #4
1e274     00 03 02 F1 | 	add	_var02, _var01
1e278     90 E5 05 F1 | 	add	objptr, #400
1e27c     F2 02 62 FC | 	wrlong	_var02, objptr
1e280     ED E5 85 F1 | 	sub	objptr, #493
1e284                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e284     F2 02 02 FB | 	rdlong	_var02, objptr
1e288     04 02 66 F0 | 	shl	_var02, #4
1e28c     02 02 06 F1 | 	add	_var02, #2
1e290     F1 E5 05 F1 | 	add	objptr, #497
1e294     F2 02 62 FC | 	wrlong	_var02, objptr
1e298                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e298     04 E4 85 F1 | 	sub	objptr, #4
1e29c     F2 02 02 F6 | 	mov	_var02, objptr
1e2a0     CD E5 85 F1 | 	sub	objptr, #461
1e2a4     F2 02 62 FC | 	wrlong	_var02, objptr
1e2a8     20 E4 85 F1 | 	sub	objptr, #32
1e2ac                 | _hg010b_spin2_makedl_ret
1e2ac     2D 00 64 FD | 	ret
1e2b0                 | 
1e2b0                 | ' 
1e2b0                 | ' 
1e2b0                 | ' '****************************************************************************************************************
1e2b0                 | ' '                                                                        					*
1e2b0                 | ' '  Graphic primitives                                                    					*
1e2b0                 | ' '                                                                        					*
1e2b0                 | ' '****************************************************************************************************************
1e2b0                 | ' 
1e2b0                 | ' pub setspriteptr(num,ptr)
1e2b0                 | _hg010b_spin2_setspriteptr
1e2b0                 | ' long[@spr1ptr+12*num]:=ptr
1e2b0     11 E5 05 F1 | 	add	objptr, #273
1e2b4     F2 00 02 F6 | 	mov	_var01, objptr
1e2b8     09 03 02 F6 | 	mov	_var02, arg01
1e2bc     01 02 66 F0 | 	shl	_var02, #1
1e2c0     09 03 02 F1 | 	add	_var02, arg01
1e2c4     02 02 66 F0 | 	shl	_var02, #2
1e2c8     01 01 02 F1 | 	add	_var01, _var02
1e2cc     00 15 62 FC | 	wrlong	arg02, _var01
1e2d0     11 E5 85 F1 | 	sub	objptr, #273
1e2d4                 | _hg010b_spin2_setspriteptr_ret
1e2d4     2D 00 64 FD | 	ret
1e2d8                 | 
1e2d8                 | ' 
1e2d8                 | ' pub setspritepos(num,x,y)
1e2d8                 | _hg010b_spin2_setspritepos
1e2d8                 | ' if y>601
1e2d8     01 00 00 FF 
1e2dc     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e2e0                 | '   y:=601
1e2e0     01 00 00 3F 
1e2e4     59 16 06 36 |  if_ae	mov	arg03, ##601
1e2e8                 | ' if x>1024
1e2e8     02 00 00 FF 
1e2ec     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e2f0                 | '   x:=1024
1e2f0     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e2f4                 | ' word[@spr1ptr+12*num+4]:=x
1e2f4     11 E5 05 F1 | 	add	objptr, #273
1e2f8     F2 00 02 F6 | 	mov	_var01, objptr
1e2fc     09 03 02 F6 | 	mov	_var02, arg01
1e300     01 02 66 F0 | 	shl	_var02, #1
1e304     09 03 02 F1 | 	add	_var02, arg01
1e308     02 02 66 F0 | 	shl	_var02, #2
1e30c     01 01 02 F1 | 	add	_var01, _var02
1e310     04 00 06 F1 | 	add	_var01, #4
1e314     00 15 52 FC | 	wrword	arg02, _var01
1e318                 | ' word[@spr1ptr+12*num+6]:=y
1e318     F2 00 02 F6 | 	mov	_var01, objptr
1e31c     09 03 02 F6 | 	mov	_var02, arg01
1e320     01 02 66 F0 | 	shl	_var02, #1
1e324     09 03 02 F1 | 	add	_var02, arg01
1e328     02 02 66 F0 | 	shl	_var02, #2
1e32c     01 01 02 F1 | 	add	_var01, _var02
1e330     06 00 06 F1 | 	add	_var01, #6
1e334     00 17 52 FC | 	wrword	arg03, _var01
1e338     11 E5 85 F1 | 	sub	objptr, #273
1e33c                 | _hg010b_spin2_setspritepos_ret
1e33c     2D 00 64 FD | 	ret
1e340                 | 
1e340                 | ' 
1e340                 | ' pub setspritesize(num,w,h)
1e340                 | _hg010b_spin2_setspritesize
1e340                 | ' word[@spr1ptr+12*num+8]:=w
1e340     11 E5 05 F1 | 	add	objptr, #273
1e344     F2 00 02 F6 | 	mov	_var01, objptr
1e348     09 03 02 F6 | 	mov	_var02, arg01
1e34c     01 02 66 F0 | 	shl	_var02, #1
1e350     09 03 02 F1 | 	add	_var02, arg01
1e354     02 02 66 F0 | 	shl	_var02, #2
1e358     01 01 02 F1 | 	add	_var01, _var02
1e35c     08 00 06 F1 | 	add	_var01, #8
1e360     00 15 52 FC | 	wrword	arg02, _var01
1e364                 | ' word[@spr1ptr+12*num+10]:=h
1e364     F2 00 02 F6 | 	mov	_var01, objptr
1e368     09 03 02 F6 | 	mov	_var02, arg01
1e36c     01 02 66 F0 | 	shl	_var02, #1
1e370     09 03 02 F1 | 	add	_var02, arg01
1e374     02 02 66 F0 | 	shl	_var02, #2
1e378     01 01 02 F1 | 	add	_var01, _var02
1e37c     0A 00 06 F1 | 	add	_var01, #10
1e380     00 17 52 FC | 	wrword	arg03, _var01
1e384     11 E5 85 F1 | 	sub	objptr, #273
1e388                 | _hg010b_spin2_setspritesize_ret
1e388     2D 00 64 FD | 	ret
1e38c                 | 
1e38c                 | ' 
1e38c                 | ' 
1e38c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e38c                 | ' 
1e38c                 | ' 
1e38c                 | ' pub putpixel(x,y,c)
1e38c                 | _hg010b_spin2_putpixel
1e38c     04 4A 05 F6 | 	mov	COUNT_, #4
1e390     A8 00 A0 FD | 	call	#pushregs_
1e394     09 1F 02 F6 | 	mov	local01, arg01
1e398                 | ' 
1e398                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e398     00 20 06 F6 | 	mov	local02, #0
1e39c     00 1E 56 F2 | 	cmps	local01, #0 wc
1e3a0     01 20 66 36 |  if_ae	neg	local02, #1
1e3a4     E9 E4 05 F1 | 	add	objptr, #233
1e3a8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e3ac     02 1A 66 F0 | 	shl	arg05, #2
1e3b0     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e3b4     11 23 A2 F1 | 	subx	local03, local03
1e3b8     11 21 02 F5 | 	and	local02, local03
1e3bc     00 22 06 F6 | 	mov	local03, #0
1e3c0     00 14 56 F2 | 	cmps	arg02, #0 wc
1e3c4     01 22 66 36 |  if_ae	neg	local03, #1
1e3c8     11 21 02 F5 | 	and	local02, local03
1e3cc     04 E4 85 F1 | 	sub	objptr, #4
1e3d0     F2 22 02 FB | 	rdlong	local03, objptr
1e3d4     E5 E4 85 F1 | 	sub	objptr, #229
1e3d8     11 15 52 F2 | 	cmps	arg02, local03 wc
1e3dc     12 25 A2 F1 | 	subx	local04, local04
1e3e0     12 21 CA F7 | 	test	local02, local04 wz
1e3e4     48 00 90 AD |  if_e	jmp	#LR__2440
1e3e8     DD E4 05 F1 | 	add	objptr, #221
1e3ec     F2 12 02 FB | 	rdlong	arg01, objptr
1e3f0     14 E4 05 F1 | 	add	objptr, #20
1e3f4     F2 24 02 FB | 	rdlong	local04, objptr
1e3f8     02 24 66 F0 | 	shl	local04, #2
1e3fc     0A 25 02 FD | 	qmul	local04, arg02
1e400                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e400     0B 15 02 F6 | 	mov	arg02, arg03
1e404     01 16 06 F6 | 	mov	arg03, #1
1e408     00 18 06 F6 | 	mov	arg04, #0
1e40c     01 1A 06 F6 | 	mov	arg05, #1
1e410     0A 00 00 FF 
1e414     DB E5 05 F1 | 	add	objptr, ##5595
1e418     18 24 62 FD | 	getqx	local04
1e41c     0F 25 02 F1 | 	add	local04, local01
1e420     12 13 02 F1 | 	add	arg01, local04
1e424     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e428     0B 00 00 FF 
1e42c     CC E4 85 F1 | 	sub	objptr, ##5836
1e430                 | LR__2440
1e430     A7 F0 03 F6 | 	mov	ptra, fp
1e434     B2 00 A0 FD | 	call	#popregs_
1e438                 | _hg010b_spin2_putpixel_ret
1e438     2D 00 64 FD | 	ret
1e43c                 | 
1e43c                 | ' 
1e43c                 | ' pub putpixel2(x,y,c)
1e43c                 | _hg010b_spin2_putpixel2
1e43c     02 4A 05 F6 | 	mov	COUNT_, #2
1e440     A8 00 A0 FD | 	call	#pushregs_
1e444     DD E4 05 F1 | 	add	objptr, #221
1e448     F2 1E 02 FB | 	rdlong	local01, objptr
1e44c     14 E4 05 F1 | 	add	objptr, #20
1e450     F2 1A 02 FB | 	rdlong	arg05, objptr
1e454     02 1A 66 F0 | 	shl	arg05, #2
1e458     0A 1B 02 FD | 	qmul	arg05, arg02
1e45c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e45c     0B 15 02 F6 | 	mov	arg02, arg03
1e460     01 16 06 F6 | 	mov	arg03, #1
1e464     00 18 06 F6 | 	mov	arg04, #0
1e468     01 1A 06 F6 | 	mov	arg05, #1
1e46c     0A 00 00 FF 
1e470     DB E5 05 F1 | 	add	objptr, ##5595
1e474     18 20 62 FD | 	getqx	local02
1e478     09 21 02 F1 | 	add	local02, arg01
1e47c     10 1F 02 F1 | 	add	local01, local02
1e480     0F 13 02 F6 | 	mov	arg01, local01
1e484     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e488     0B 00 00 FF 
1e48c     CC E4 85 F1 | 	sub	objptr, ##5836
1e490     A7 F0 03 F6 | 	mov	ptra, fp
1e494     B2 00 A0 FD | 	call	#popregs_
1e498                 | _hg010b_spin2_putpixel2_ret
1e498     2D 00 64 FD | 	ret
1e49c                 | 
1e49c                 | ' 
1e49c                 | ' pub getpixel2(x,y): c 
1e49c                 | _hg010b_spin2_getpixel2
1e49c     02 4A 05 F6 | 	mov	COUNT_, #2
1e4a0     A8 00 A0 FD | 	call	#pushregs_
1e4a4     0C F0 07 F1 | 	add	ptra, #12
1e4a8     04 4E 05 F1 | 	add	fp, #4
1e4ac     A7 12 62 FC | 	wrlong	arg01, fp
1e4b0     04 4E 05 F1 | 	add	fp, #4
1e4b4     A7 14 62 FC | 	wrlong	arg02, fp
1e4b8     08 4E 85 F1 | 	sub	fp, #8
1e4bc     A7 00 68 FC | 	wrlong	#0, fp
1e4c0     A7 12 02 F6 | 	mov	arg01, fp
1e4c4     DD E4 05 F1 | 	add	objptr, #221
1e4c8     F2 14 02 FB | 	rdlong	arg02, objptr
1e4cc     14 E4 05 F1 | 	add	objptr, #20
1e4d0     F2 16 02 FB | 	rdlong	arg03, objptr
1e4d4     02 16 66 F0 | 	shl	arg03, #2
1e4d8     08 4E 05 F1 | 	add	fp, #8
1e4dc     A7 FA 01 FB | 	rdlong	result1, fp
1e4e0     FD 16 02 FD | 	qmul	arg03, result1
1e4e4                 | ' 
1e4e4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e4e4     04 4E 85 F1 | 	sub	fp, #4
1e4e8     A7 1E 02 FB | 	rdlong	local01, fp
1e4ec     04 4E 85 F1 | 	sub	fp, #4
1e4f0     01 16 06 F6 | 	mov	arg03, #1
1e4f4     0A 00 00 FF 
1e4f8     DB E5 05 F1 | 	add	objptr, ##5595
1e4fc     18 20 62 FD | 	getqx	local02
1e500     0F 21 02 F1 | 	add	local02, local01
1e504     10 15 02 F1 | 	add	arg02, local02
1e508     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e50c     0B 00 00 FF 
1e510     CC E4 85 F1 | 	sub	objptr, ##5836
1e514                 | ' return c
1e514     A7 FA 01 FB | 	rdlong	result1, fp
1e518     A7 F0 03 F6 | 	mov	ptra, fp
1e51c     B2 00 A0 FD | 	call	#popregs_
1e520                 | _hg010b_spin2_getpixel2_ret
1e520     2D 00 64 FD | 	ret
1e524                 | 
1e524                 | '   
1e524                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e524                 | ' 
1e524                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e524                 | _hg010b_spin2_fastline
1e524     02 4A 05 F6 | 	mov	COUNT_, #2
1e528     A8 00 A0 FD | 	call	#pushregs_
1e52c     09 1F 02 F6 | 	mov	local01, arg01
1e530     0A 21 02 F6 | 	mov	local02, arg02
1e534                 | ' 
1e534                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e534     00 16 56 F2 | 	cmps	arg03, #0 wc
1e538     F4 00 90 CD |  if_b	jmp	#LR__2450
1e53c     01 00 00 FF 
1e540     2A E4 05 F1 | 	add	objptr, ##554
1e544     F2 1A 02 FB | 	rdlong	arg05, objptr
1e548     01 00 00 FF 
1e54c     2A E4 85 F1 | 	sub	objptr, ##554
1e550     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e554     D8 00 90 3D |  if_ae	jmp	#LR__2450
1e558     00 1E 56 F2 | 	cmps	local01, #0 wc
1e55c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e560     CC 00 90 CD |  if_b	jmp	#LR__2450
1e564     01 00 00 FF 
1e568     26 E4 05 F1 | 	add	objptr, ##550
1e56c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e570     01 00 00 FF 
1e574     26 E4 85 F1 | 	sub	objptr, ##550
1e578     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e57c     01 00 00 1F 
1e580     26 E4 05 11 |  if_a	add	objptr, ##550
1e584     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e588     01 00 00 1F 
1e58c     26 E4 85 11 |  if_a	sub	objptr, ##550
1e590     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e594                 | '   return
1e594     98 00 90 1D |  if_a	jmp	#LR__2450
1e598     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e59c     0F 1B 02 16 |  if_a	mov	arg05, local01
1e5a0     10 1F 02 16 |  if_a	mov	local01, local02
1e5a4     0D 21 02 16 |  if_a	mov	local02, arg05
1e5a8     00 1E 56 F2 | 	cmps	local01, #0 wc
1e5ac     00 1E 06 C6 |  if_b	mov	local01, #0
1e5b0     01 00 00 FF 
1e5b4     26 E4 05 F1 | 	add	objptr, ##550
1e5b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5bc     01 00 00 FF 
1e5c0     26 E4 85 F1 | 	sub	objptr, ##550
1e5c4     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e5c8     01 00 00 3F 
1e5cc     26 E4 05 31 |  if_ae	add	objptr, ##550
1e5d0     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e5d4     01 00 00 3F 
1e5d8     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e5dc     DD E4 05 F1 | 	add	objptr, #221
1e5e0     F2 12 02 FB | 	rdlong	arg01, objptr
1e5e4     14 E4 05 F1 | 	add	objptr, #20
1e5e8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5ec     02 1A 66 F0 | 	shl	arg05, #2
1e5f0     0B 1B 02 FD | 	qmul	arg05, arg03
1e5f4                 | ' if x1>x2
1e5f4                 | '   x1,x2:=x2,x1
1e5f4                 | ' if x1<0 
1e5f4                 | '   x1:=0
1e5f4                 | ' if x2>=xres
1e5f4                 | '   x2:=xres-1  
1e5f4     01 20 86 31 |  if_ae	sub	local02, #1
1e5f8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e5f8     01 16 06 F6 | 	mov	arg03, #1
1e5fc     10 17 02 F1 | 	add	arg03, local02
1e600     0F 17 82 F1 | 	sub	arg03, local01
1e604     0C 15 02 F6 | 	mov	arg02, arg04
1e608     00 18 06 F6 | 	mov	arg04, #0
1e60c     01 1A 06 F6 | 	mov	arg05, #1
1e610     0A 00 00 FF 
1e614     DB E5 05 F1 | 	add	objptr, ##5595
1e618     18 20 62 FD | 	getqx	local02
1e61c     0F 21 02 F1 | 	add	local02, local01
1e620     10 13 02 F1 | 	add	arg01, local02
1e624     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e628     0B 00 00 FF 
1e62c     CC E4 85 F1 | 	sub	objptr, ##5836
1e630                 | LR__2450
1e630     A7 F0 03 F6 | 	mov	ptra, fp
1e634     B2 00 A0 FD | 	call	#popregs_
1e638                 | _hg010b_spin2_fastline_ret
1e638     2D 00 64 FD | 	ret
1e63c                 | 
1e63c                 | ' 
1e63c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e63c                 | _hg010b_spin2_draw
1e63c     0E 4A 05 F6 | 	mov	COUNT_, #14
1e640     A8 00 A0 FD | 	call	#pushregs_
1e644     09 1F 02 F6 | 	mov	local01, arg01
1e648     0A 21 02 F6 | 	mov	local02, arg02
1e64c     0B 23 02 F6 | 	mov	local03, arg03
1e650     0C 25 02 F6 | 	mov	local04, arg04
1e654     0D 27 02 F6 | 	mov	local05, arg05
1e658                 | ' 
1e658                 | ' if (y1==y2)
1e658     12 21 0A F2 | 	cmp	local02, local04 wz
1e65c     18 00 90 5D |  if_ne	jmp	#LR__2460
1e660                 | '   fastline(x1,x2,y1,c)
1e660     0F 13 02 F6 | 	mov	arg01, local01
1e664     11 15 02 F6 | 	mov	arg02, local03
1e668     10 17 02 F6 | 	mov	arg03, local02
1e66c     13 19 02 F6 | 	mov	arg04, local05
1e670     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e674     F8 00 90 FD | 	jmp	#LR__2466
1e678                 | LR__2460
1e678                 | ' else  
1e678                 | '   x:=x1
1e678     0F 29 02 F6 | 	mov	local06, local01
1e67c                 | '   y:=y1
1e67c     10 2B 02 F6 | 	mov	local07, local02
1e680                 | ' 
1e680                 | '   if (x1<x2) 
1e680     11 1F 52 F2 | 	cmps	local01, local03 wc
1e684                 | '     xi:=1
1e684     01 2C 06 C6 |  if_b	mov	local08, #1
1e688                 | '     dx:=x2-x1
1e688     11 2F 02 C6 |  if_b	mov	local09, local03
1e68c     0F 2F 82 C1 |  if_b	sub	local09, local01
1e690                 | '   else
1e690                 | '     xi:=-1
1e690     01 2C 66 36 |  if_ae	neg	local08, #1
1e694                 | '     dx:=x1-x2
1e694     11 1F 82 31 |  if_ae	sub	local01, local03
1e698     0F 2F 02 36 |  if_ae	mov	local09, local01
1e69c                 | '   
1e69c                 | '   if (y1<y2) 
1e69c     12 21 52 F2 | 	cmps	local02, local04 wc
1e6a0                 | '     yi:=1
1e6a0     01 30 06 C6 |  if_b	mov	local10, #1
1e6a4                 | '     dy:=y2-y1
1e6a4     12 33 02 C6 |  if_b	mov	local11, local04
1e6a8     10 33 82 C1 |  if_b	sub	local11, local02
1e6ac                 | '   else
1e6ac                 | '     yi:=-1
1e6ac     01 30 66 36 |  if_ae	neg	local10, #1
1e6b0                 | '     dy:=y1-y2
1e6b0     12 21 82 31 |  if_ae	sub	local02, local04
1e6b4     10 33 02 36 |  if_ae	mov	local11, local02
1e6b8                 | ' 
1e6b8                 | '   putpixel(x,y,c)
1e6b8     13 17 02 F6 | 	mov	arg03, local05
1e6bc     14 13 02 F6 | 	mov	arg01, local06
1e6c0     15 15 02 F6 | 	mov	arg02, local07
1e6c4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e6c8                 | ' 
1e6c8                 | '   if (dx>dy)
1e6c8     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e6cc     50 00 90 ED |  if_be	jmp	#LR__2462
1e6d0                 | '     ai:=(dy-dx)*2
1e6d0     19 35 02 F6 | 	mov	local12, local11
1e6d4     17 35 82 F1 | 	sub	local12, local09
1e6d8     01 34 66 F0 | 	shl	local12, #1
1e6dc                 | '     bi:=dy*2
1e6dc     01 32 66 F0 | 	shl	local11, #1
1e6e0     19 37 02 F6 | 	mov	local13, local11
1e6e4                 | '     d:= bi-dx
1e6e4     1B 39 02 F6 | 	mov	local14, local13
1e6e8     17 39 82 F1 | 	sub	local14, local09
1e6ec                 | '     repeat while (x<>x2) 
1e6ec                 | LR__2461
1e6ec     11 29 0A F2 | 	cmp	local06, local03 wz
1e6f0     7C 00 90 AD |  if_e	jmp	#LR__2465
1e6f4                 | '       if (d>=0) 
1e6f4     00 38 56 F2 | 	cmps	local14, #0 wc
1e6f8                 | '         x+=xi
1e6f8     16 29 02 31 |  if_ae	add	local06, local08
1e6fc                 | '         y+=yi
1e6fc     18 2B 02 31 |  if_ae	add	local07, local10
1e700                 | '         d+=ai
1e700     1A 39 02 31 |  if_ae	add	local14, local12
1e704                 | '       else
1e704                 | '         d+=bi
1e704     1B 39 02 C1 |  if_b	add	local14, local13
1e708                 | '         x+=xi
1e708     16 29 02 C1 |  if_b	add	local06, local08
1e70c                 | '       putpixel(x,y,c)
1e70c     14 13 02 F6 | 	mov	arg01, local06
1e710     15 15 02 F6 | 	mov	arg02, local07
1e714     13 17 02 F6 | 	mov	arg03, local05
1e718     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e71c     CC FF 9F FD | 	jmp	#LR__2461
1e720                 | LR__2462
1e720                 | '   else
1e720                 | '     ai:=(dx-dy)*2
1e720     17 35 02 F6 | 	mov	local12, local09
1e724     19 35 82 F1 | 	sub	local12, local11
1e728     01 34 66 F0 | 	shl	local12, #1
1e72c                 | '     bi:=dx*2
1e72c     01 2E 66 F0 | 	shl	local09, #1
1e730     17 37 02 F6 | 	mov	local13, local09
1e734                 | '     d:=bi-dy
1e734     1B 39 02 F6 | 	mov	local14, local13
1e738     19 39 82 F1 | 	sub	local14, local11
1e73c                 | '     repeat while (y<>y2)
1e73c                 | LR__2463
1e73c     12 2B 0A F2 | 	cmp	local07, local04 wz
1e740     2C 00 90 AD |  if_e	jmp	#LR__2464
1e744                 | '       if (d>=0)
1e744     00 38 56 F2 | 	cmps	local14, #0 wc
1e748                 | '         x+=xi
1e748     16 29 02 31 |  if_ae	add	local06, local08
1e74c                 | '         y+=yi
1e74c     18 2B 02 31 |  if_ae	add	local07, local10
1e750                 | '         d+=ai
1e750     1A 39 02 31 |  if_ae	add	local14, local12
1e754                 | '       else
1e754                 | '         d+=bi
1e754     1B 39 02 C1 |  if_b	add	local14, local13
1e758                 | '         y+=yi
1e758     18 2B 02 C1 |  if_b	add	local07, local10
1e75c                 | '       putpixel(x, y,c)
1e75c     14 13 02 F6 | 	mov	arg01, local06
1e760     15 15 02 F6 | 	mov	arg02, local07
1e764     13 17 02 F6 | 	mov	arg03, local05
1e768     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e76c     CC FF 9F FD | 	jmp	#LR__2463
1e770                 | LR__2464
1e770                 | LR__2465
1e770                 | LR__2466
1e770     A7 F0 03 F6 | 	mov	ptra, fp
1e774     B2 00 A0 FD | 	call	#popregs_
1e778                 | _hg010b_spin2_draw_ret
1e778     2D 00 64 FD | 	ret
1e77c                 | 
1e77c                 | '  
1e77c                 | ' pub fillpush(val) 
1e77c                 | _hg010b_spin2_fillpush
1e77c                 | ' fillstack[fillptr]:=val
1e77c     0B 00 00 FF 
1e780     BA E4 05 F1 | 	add	objptr, ##5818
1e784     F2 00 02 FB | 	rdlong	_var01, objptr
1e788     02 00 66 F0 | 	shl	_var01, #2
1e78c     0A 00 00 FF 
1e790     00 E4 85 F1 | 	sub	objptr, ##5120
1e794     F2 00 02 F1 | 	add	_var01, objptr
1e798     00 13 62 FC | 	wrlong	arg01, _var01
1e79c                 | ' fillptr+=1   
1e79c     0A 00 00 FF 
1e7a0     00 E4 05 F1 | 	add	objptr, ##5120
1e7a4     F2 00 02 FB | 	rdlong	_var01, objptr
1e7a8     01 00 06 F1 | 	add	_var01, #1
1e7ac     F2 00 62 FC | 	wrlong	_var01, objptr
1e7b0     0B 00 00 FF 
1e7b4     BA E4 85 F1 | 	sub	objptr, ##5818
1e7b8                 | _hg010b_spin2_fillpush_ret
1e7b8     2D 00 64 FD | 	ret
1e7bc                 | 
1e7bc                 | ' 
1e7bc                 | '     
1e7bc                 | ' pub fillpop() : val
1e7bc                 | _hg010b_spin2_fillpop
1e7bc                 | ' 
1e7bc                 | ' fillptr-=1
1e7bc     0B 00 00 FF 
1e7c0     BA E4 05 F1 | 	add	objptr, ##5818
1e7c4     F2 FA 01 FB | 	rdlong	result1, objptr
1e7c8     01 FA 85 F1 | 	sub	result1, #1
1e7cc     F2 FA 61 FC | 	wrlong	result1, objptr
1e7d0                 | ' if fillptr<0
1e7d0     0B 00 00 FF 
1e7d4     BA E4 85 F1 | 	sub	objptr, ##5818
1e7d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e7dc                 | '   fillptr:=0
1e7dc     0B 00 00 CF 
1e7e0     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e7e4     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e7e8     0B 00 00 CF 
1e7ec     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e7f0                 | '   val:=-12345
1e7f0     E7 FF 7F CF 
1e7f4     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e7f8     28 00 90 CD |  if_b	jmp	#LR__2470
1e7fc                 | ' else 
1e7fc                 | '   val:=fillstack[fillptr]
1e7fc     0B 00 00 FF 
1e800     BA E4 05 F1 | 	add	objptr, ##5818
1e804     F2 00 02 FB | 	rdlong	_var01, objptr
1e808     02 00 66 F0 | 	shl	_var01, #2
1e80c     0A 00 00 FF 
1e810     00 E4 85 F1 | 	sub	objptr, ##5120
1e814     F2 00 02 F1 | 	add	_var01, objptr
1e818     00 01 02 FB | 	rdlong	_var01, _var01
1e81c     01 00 00 FF 
1e820     BA E4 85 F1 | 	sub	objptr, ##698
1e824                 | LR__2470
1e824                 | ' return val
1e824     00 FB 01 F6 | 	mov	result1, _var01
1e828                 | _hg010b_spin2_fillpop_ret
1e828     2D 00 64 FD | 	ret
1e82c                 | 
1e82c                 | ' 
1e82c                 | '       
1e82c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e82c                 | _hg010b_spin2_fill
1e82c     0B 4A 05 F6 | 	mov	COUNT_, #11
1e830     A8 00 A0 FD | 	call	#pushregs_
1e834                 | ' 
1e834                 | ' newcolor:=newcolor & 255
1e834     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e838                 | ' oldcolor:=oldcolor & 255
1e838     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e83c                 | ' 
1e83c                 | ' if (oldcolor == newcolor) 
1e83c     0F 21 0A F2 | 	cmp	local02, local01 wz
1e840                 | '   return
1e840     70 02 90 AD |  if_e	jmp	#LR__2489
1e844                 | ' 
1e844                 | ' fillptr:=0
1e844     0B 00 00 FF 
1e848     BA E4 05 F1 | 	add	objptr, ##5818
1e84c     F2 00 68 FC | 	wrlong	#0, objptr
1e850                 | ' fillmax:=0
1e850     04 E4 05 F1 | 	add	objptr, #4
1e854     F2 00 68 FC | 	wrlong	#0, objptr
1e858     0B 00 00 FF 
1e85c     BE E4 85 F1 | 	sub	objptr, ##5822
1e860                 | ' fillpush(x)
1e860     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e864                 | ' fillpush(y)
1e864     0A 13 02 F6 | 	mov	arg01, arg02
1e868     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e86c                 | ' y:=fillpop()
1e86c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e870     FD 22 02 F6 | 	mov	local03, result1
1e874                 | ' x:=fillpop()
1e874     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e878     FD 24 02 F6 | 	mov	local04, result1
1e87c                 | ' 'pinhigh(38)
1e87c                 | ' repeat while (x>-1)       
1e87c                 | LR__2480
1e87c     00 24 56 F2 | 	cmps	local04, #0 wc
1e880     30 02 90 CD |  if_b	jmp	#LR__2488
1e884                 | '  ' pintoggle(39)
1e884                 | '   x1 := x
1e884     12 27 02 F6 | 	mov	local05, local04
1e888                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e888                 | LR__2481
1e888     00 28 06 F6 | 	mov	local06, #0
1e88c     00 2A 06 F6 | 	mov	local07, #0
1e890     00 26 56 F2 | 	cmps	local05, #0 wc
1e894     01 2A 66 36 |  if_ae	neg	local07, #1
1e898     00 2A 0E F2 | 	cmp	local07, #0 wz
1e89c     00 28 26 56 |  if_ne	not	local06, #0
1e8a0     00 2C 06 F6 | 	mov	local08, #0
1e8a4     00 2E 06 F6 | 	mov	local09, #0
1e8a8     11 15 02 F6 | 	mov	arg02, local03
1e8ac     13 13 02 F6 | 	mov	arg01, local05
1e8b0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e8b4     10 FB 09 F2 | 	cmp	result1, local02 wz
1e8b8     00 2E 26 A6 |  if_e	not	local09, #0
1e8bc     00 2E 0E F2 | 	cmp	local09, #0 wz
1e8c0     00 2C 26 56 |  if_ne	not	local08, #0
1e8c4     16 29 CA F7 | 	test	local06, local08 wz
1e8c8                 | '     x1--
1e8c8     01 26 86 51 |  if_ne	sub	local05, #1
1e8cc     B8 FF 9F 5D |  if_ne	jmp	#LR__2481
1e8d0                 | '   x1++
1e8d0     01 26 06 F1 | 	add	local05, #1
1e8d4                 | '   spanabove := 0
1e8d4     00 30 06 F6 | 	mov	local10, #0
1e8d8                 | '   spanbelow := 0
1e8d8     00 32 06 F6 | 	mov	local11, #0
1e8dc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1e8dc                 | LR__2482
1e8dc     00 28 06 F6 | 	mov	local06, #0
1e8e0     02 00 00 FF 
1e8e4     00 26 56 F2 | 	cmps	local05, ##1024 wc
1e8e8     00 28 26 C6 |  if_b	not	local06, #0
1e8ec     00 2C 06 F6 | 	mov	local08, #0
1e8f0     00 2E 06 F6 | 	mov	local09, #0
1e8f4     11 15 02 F6 | 	mov	arg02, local03
1e8f8     13 13 02 F6 | 	mov	arg01, local05
1e8fc     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e900     10 FB 09 F2 | 	cmp	result1, local02 wz
1e904     00 2E 26 A6 |  if_e	not	local09, #0
1e908     00 2E 0E F2 | 	cmp	local09, #0 wz
1e90c     00 2C 26 56 |  if_ne	not	local08, #0
1e910     16 29 CA F7 | 	test	local06, local08 wz
1e914     88 01 90 AD |  if_e	jmp	#LR__2487
1e918                 | '     putpixel2 (x1,y, newcolor & 255)
1e918     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1e91c     13 13 02 F6 | 	mov	arg01, local05
1e920     11 15 02 F6 | 	mov	arg02, local03
1e924     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1e928                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1e928     00 28 06 F6 | 	mov	local06, #0
1e92c     00 2A 06 F6 | 	mov	local07, #0
1e930     00 30 0E F2 | 	cmp	local10, #0 wz
1e934     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1e938     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1e93c     00 2A 0E F2 | 	cmp	local07, #0 wz
1e940     00 28 26 56 |  if_ne	not	local06, #0
1e944     00 2C 06 F6 | 	mov	local08, #0
1e948     00 2E 06 F6 | 	mov	local09, #0
1e94c     11 15 02 F6 | 	mov	arg02, local03
1e950     01 14 86 F1 | 	sub	arg02, #1
1e954     13 13 02 F6 | 	mov	arg01, local05
1e958     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e95c     10 FB 09 F2 | 	cmp	result1, local02 wz
1e960     00 2E 26 A6 |  if_e	not	local09, #0
1e964     00 2E 0E F2 | 	cmp	local09, #0 wz
1e968     00 2C 26 56 |  if_ne	not	local08, #0
1e96c     16 29 CA F7 | 	test	local06, local08 wz
1e970     1C 00 90 AD |  if_e	jmp	#LR__2483
1e974                 | '       fillpush(x1)
1e974     13 13 02 F6 | 	mov	arg01, local05
1e978     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1e97c                 | '       fillpush(y-1)
1e97c     11 13 02 F6 | 	mov	arg01, local03
1e980     01 12 86 F1 | 	sub	arg01, #1
1e984     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e988                 | '       spanabove := 1 
1e988     01 30 06 F6 | 	mov	local10, #1
1e98c     4C 00 90 FD | 	jmp	#LR__2484
1e990                 | LR__2483
1e990                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1e990     00 28 06 F6 | 	mov	local06, #0
1e994     00 2A 06 F6 | 	mov	local07, #0
1e998     00 30 0E F2 | 	cmp	local10, #0 wz
1e99c     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1e9a0     01 2A 66 16 |  if_a	neg	local07, #1
1e9a4     00 2A 0E F2 | 	cmp	local07, #0 wz
1e9a8     00 28 26 56 |  if_ne	not	local06, #0
1e9ac     00 2C 06 F6 | 	mov	local08, #0
1e9b0     00 2E 06 F6 | 	mov	local09, #0
1e9b4     11 15 02 F6 | 	mov	arg02, local03
1e9b8     01 14 86 F1 | 	sub	arg02, #1
1e9bc     13 13 02 F6 | 	mov	arg01, local05
1e9c0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e9c4     10 FB 09 F2 | 	cmp	result1, local02 wz
1e9c8     00 2E 26 56 |  if_ne	not	local09, #0
1e9cc     00 2E 0E F2 | 	cmp	local09, #0 wz
1e9d0     00 2C 26 56 |  if_ne	not	local08, #0
1e9d4     16 29 CA F7 | 	test	local06, local08 wz
1e9d8                 | '       spanabove := 0 
1e9d8     00 30 06 56 |  if_ne	mov	local10, #0
1e9dc                 | LR__2484
1e9dc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1e9dc     00 28 06 F6 | 	mov	local06, #0
1e9e0     00 2A 06 F6 | 	mov	local07, #0
1e9e4     00 32 0E F2 | 	cmp	local11, #0 wz
1e9e8     01 00 00 AF 
1e9ec     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1e9f0     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1e9f4     00 2A 0E F2 | 	cmp	local07, #0 wz
1e9f8     00 28 26 56 |  if_ne	not	local06, #0
1e9fc     00 2C 06 F6 | 	mov	local08, #0
1ea00     00 2E 06 F6 | 	mov	local09, #0
1ea04     11 15 02 F6 | 	mov	arg02, local03
1ea08     01 14 06 F1 | 	add	arg02, #1
1ea0c     13 13 02 F6 | 	mov	arg01, local05
1ea10     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ea14     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea18     00 2E 26 A6 |  if_e	not	local09, #0
1ea1c     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea20     00 2C 26 56 |  if_ne	not	local08, #0
1ea24     16 29 CA F7 | 	test	local06, local08 wz
1ea28     1C 00 90 AD |  if_e	jmp	#LR__2485
1ea2c                 | '       fillpush(x1)
1ea2c     13 13 02 F6 | 	mov	arg01, local05
1ea30     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ea34                 | '       fillpush(y + 1)
1ea34     11 13 02 F6 | 	mov	arg01, local03
1ea38     01 12 06 F1 | 	add	arg01, #1
1ea3c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ea40                 | '       spanBelow := 1
1ea40     01 32 06 F6 | 	mov	local11, #1
1ea44     50 00 90 FD | 	jmp	#LR__2486
1ea48                 | LR__2485
1ea48                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ea48     00 28 06 F6 | 	mov	local06, #0
1ea4c     00 2A 06 F6 | 	mov	local07, #0
1ea50     00 32 0E F2 | 	cmp	local11, #0 wz
1ea54     01 00 00 5F 
1ea58     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ea5c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ea60     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea64     00 28 26 56 |  if_ne	not	local06, #0
1ea68     00 2C 06 F6 | 	mov	local08, #0
1ea6c     00 2E 06 F6 | 	mov	local09, #0
1ea70     11 15 02 F6 | 	mov	arg02, local03
1ea74     01 14 06 F1 | 	add	arg02, #1
1ea78     13 13 02 F6 | 	mov	arg01, local05
1ea7c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ea80     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea84     00 2E 26 56 |  if_ne	not	local09, #0
1ea88     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea8c     00 2C 26 56 |  if_ne	not	local08, #0
1ea90     16 29 CA F7 | 	test	local06, local08 wz
1ea94                 | '       spanbelow := 0
1ea94     00 32 06 56 |  if_ne	mov	local11, #0
1ea98                 | LR__2486
1ea98                 | '     x1++
1ea98     01 26 06 F1 | 	add	local05, #1
1ea9c     3C FE 9F FD | 	jmp	#LR__2482
1eaa0                 | LR__2487
1eaa0                 | '   y:=fillpop()
1eaa0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eaa4     FD 22 02 F6 | 	mov	local03, result1
1eaa8                 | '   x:=fillpop()
1eaa8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eaac     FD 24 02 F6 | 	mov	local04, result1
1eab0     C8 FD 9F FD | 	jmp	#LR__2480
1eab4                 | LR__2488
1eab4                 | LR__2489
1eab4     A7 F0 03 F6 | 	mov	ptra, fp
1eab8     B2 00 A0 FD | 	call	#popregs_
1eabc                 | _hg010b_spin2_fill_ret
1eabc     2D 00 64 FD | 	ret
1eac0                 | 
1eac0                 | ' 'pinlow(38)    
1eac0                 | ' 
1eac0                 | ' '-- A filled circle -----------------------------------------------------
1eac0                 | ' 
1eac0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1eac0                 | _hg010b_spin2_fcircle
1eac0     08 4A 05 F6 | 	mov	COUNT_, #8
1eac4     A8 00 A0 FD | 	call	#pushregs_
1eac8     0B 1F 02 F6 | 	mov	local01, arg03
1eacc     FF FF 7F FF 
1ead0     FE 1F 06 FD | 	qmul	local01, ##-2
1ead4     09 21 02 F6 | 	mov	local02, arg01
1ead8     0A 23 02 F6 | 	mov	local03, arg02
1eadc     0C 25 02 F6 | 	mov	local04, arg04
1eae0                 | ' 
1eae0                 | ' d:=5-4*r
1eae0     0F 19 02 F6 | 	mov	arg04, local01
1eae4     02 18 66 F0 | 	shl	arg04, #2
1eae8     05 26 06 F6 | 	mov	local05, #5
1eaec     0C 27 82 F1 | 	sub	local05, arg04
1eaf0                 | ' x:=0
1eaf0     00 28 06 F6 | 	mov	local06, #0
1eaf4                 | ' y:=r
1eaf4                 | ' da:=(-2*r+5)*4
1eaf4                 | ' db:=3*4
1eaf4     0C 2A 06 F6 | 	mov	local07, #12
1eaf8                 | ' repeat while (x<=y) 
1eaf8     18 2C 62 FD | 	getqx	local08
1eafc     05 2C 06 F1 | 	add	local08, #5
1eb00     02 2C 66 F0 | 	shl	local08, #2
1eb04                 | LR__2490
1eb04     0F 29 5A F2 | 	cmps	local06, local01 wcz
1eb08     B4 00 90 1D |  if_a	jmp	#LR__2492
1eb0c                 | '   fastline(x0-x,x0+x,y0-y,c)
1eb0c     10 13 02 F6 | 	mov	arg01, local02
1eb10     14 13 82 F1 | 	sub	arg01, local06
1eb14     10 15 02 F6 | 	mov	arg02, local02
1eb18     14 15 02 F1 | 	add	arg02, local06
1eb1c     11 17 02 F6 | 	mov	arg03, local03
1eb20     0F 17 82 F1 | 	sub	arg03, local01
1eb24     12 19 02 F6 | 	mov	arg04, local04
1eb28     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb2c                 | '   fastline(x0-x,x0+x,y0+y,c)
1eb2c     10 13 02 F6 | 	mov	arg01, local02
1eb30     14 13 82 F1 | 	sub	arg01, local06
1eb34     10 15 02 F6 | 	mov	arg02, local02
1eb38     14 15 02 F1 | 	add	arg02, local06
1eb3c     11 17 02 F6 | 	mov	arg03, local03
1eb40     0F 17 02 F1 | 	add	arg03, local01
1eb44     12 19 02 F6 | 	mov	arg04, local04
1eb48     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb4c                 | '   fastline(x0-y,x0+y,y0-x,c)
1eb4c     10 13 02 F6 | 	mov	arg01, local02
1eb50     0F 13 82 F1 | 	sub	arg01, local01
1eb54     10 15 02 F6 | 	mov	arg02, local02
1eb58     0F 15 02 F1 | 	add	arg02, local01
1eb5c     11 17 02 F6 | 	mov	arg03, local03
1eb60     14 17 82 F1 | 	sub	arg03, local06
1eb64     12 19 02 F6 | 	mov	arg04, local04
1eb68     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb6c                 | '   fastline(x0-y,x0+y,y0+x,c)
1eb6c     10 13 02 F6 | 	mov	arg01, local02
1eb70     0F 13 82 F1 | 	sub	arg01, local01
1eb74     10 15 02 F6 | 	mov	arg02, local02
1eb78     0F 15 02 F1 | 	add	arg02, local01
1eb7c     11 17 02 F6 | 	mov	arg03, local03
1eb80     14 17 02 F1 | 	add	arg03, local06
1eb84     12 19 02 F6 | 	mov	arg04, local04
1eb88     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb8c                 | '   if d>0 
1eb8c     01 26 56 F2 | 	cmps	local05, #1 wc
1eb90     18 00 90 CD |  if_b	jmp	#LR__2491
1eb94                 | '     d+=da
1eb94     16 27 02 F1 | 	add	local05, local08
1eb98                 | '     y-=1
1eb98     01 1E 86 F1 | 	sub	local01, #1
1eb9c                 | '     x+=1
1eb9c     01 28 06 F1 | 	add	local06, #1
1eba0                 | '     da+=4*4
1eba0     10 2C 06 F1 | 	add	local08, #16
1eba4                 | '     db+=2*4
1eba4     08 2A 06 F1 | 	add	local07, #8
1eba8     58 FF 9F FD | 	jmp	#LR__2490
1ebac                 | LR__2491
1ebac                 | '   else
1ebac                 | '     d+=db
1ebac     15 27 02 F1 | 	add	local05, local07
1ebb0                 | '     x+=1
1ebb0     01 28 06 F1 | 	add	local06, #1
1ebb4                 | '     da+=2*4
1ebb4     08 2C 06 F1 | 	add	local08, #8
1ebb8                 | '     db+=2*4
1ebb8     08 2A 06 F1 | 	add	local07, #8
1ebbc     44 FF 9F FD | 	jmp	#LR__2490
1ebc0                 | LR__2492
1ebc0     A7 F0 03 F6 | 	mov	ptra, fp
1ebc4     B2 00 A0 FD | 	call	#popregs_
1ebc8                 | _hg010b_spin2_fcircle_ret
1ebc8     2D 00 64 FD | 	ret
1ebcc                 | 
1ebcc                 | '  
1ebcc                 | ' '-- A circle ------------------------------------------------------------ 
1ebcc                 | '  
1ebcc                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ebcc                 | _hg010b_spin2_circle
1ebcc     08 4A 05 F6 | 	mov	COUNT_, #8
1ebd0     A8 00 A0 FD | 	call	#pushregs_
1ebd4     0B 1F 02 F6 | 	mov	local01, arg03
1ebd8     FF FF 7F FF 
1ebdc     FE 1F 06 FD | 	qmul	local01, ##-2
1ebe0     09 21 02 F6 | 	mov	local02, arg01
1ebe4     0A 23 02 F6 | 	mov	local03, arg02
1ebe8     0C 25 02 F6 | 	mov	local04, arg04
1ebec                 | ' 
1ebec                 | '  
1ebec                 | ' d:=5-4*r
1ebec     0F 19 02 F6 | 	mov	arg04, local01
1ebf0     02 18 66 F0 | 	shl	arg04, #2
1ebf4     05 26 06 F6 | 	mov	local05, #5
1ebf8     0C 27 82 F1 | 	sub	local05, arg04
1ebfc                 | ' x:=0
1ebfc     00 28 06 F6 | 	mov	local06, #0
1ec00                 | ' y:=r
1ec00                 | ' da:=(-2*r+5)*4
1ec00                 | ' db:=3*4
1ec00     0C 2A 06 F6 | 	mov	local07, #12
1ec04                 | ' repeat while (x<=y) 
1ec04     18 2C 62 FD | 	getqx	local08
1ec08     05 2C 06 F1 | 	add	local08, #5
1ec0c     02 2C 66 F0 | 	shl	local08, #2
1ec10                 | LR__2500
1ec10     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ec14     F4 00 90 1D |  if_a	jmp	#LR__2502
1ec18                 | '   putpixel(x0-x,y0-y,c)
1ec18     10 13 02 F6 | 	mov	arg01, local02
1ec1c     14 13 82 F1 | 	sub	arg01, local06
1ec20     11 15 02 F6 | 	mov	arg02, local03
1ec24     0F 15 82 F1 | 	sub	arg02, local01
1ec28     12 17 02 F6 | 	mov	arg03, local04
1ec2c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec30                 | '   putpixel(x0-x,y0+y,c)
1ec30     10 13 02 F6 | 	mov	arg01, local02
1ec34     14 13 82 F1 | 	sub	arg01, local06
1ec38     11 15 02 F6 | 	mov	arg02, local03
1ec3c     0F 15 02 F1 | 	add	arg02, local01
1ec40     12 17 02 F6 | 	mov	arg03, local04
1ec44     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec48                 | '   putpixel(x0+x,y0-y,c)
1ec48     10 13 02 F6 | 	mov	arg01, local02
1ec4c     14 13 02 F1 | 	add	arg01, local06
1ec50     11 15 02 F6 | 	mov	arg02, local03
1ec54     0F 15 82 F1 | 	sub	arg02, local01
1ec58     12 17 02 F6 | 	mov	arg03, local04
1ec5c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec60                 | '   putpixel(x0+x,y0+y,c)
1ec60     10 13 02 F6 | 	mov	arg01, local02
1ec64     14 13 02 F1 | 	add	arg01, local06
1ec68     11 15 02 F6 | 	mov	arg02, local03
1ec6c     0F 15 02 F1 | 	add	arg02, local01
1ec70     12 17 02 F6 | 	mov	arg03, local04
1ec74     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec78                 | '   putpixel(x0-y,y0-x,c)
1ec78     10 13 02 F6 | 	mov	arg01, local02
1ec7c     0F 13 82 F1 | 	sub	arg01, local01
1ec80     11 15 02 F6 | 	mov	arg02, local03
1ec84     14 15 82 F1 | 	sub	arg02, local06
1ec88     12 17 02 F6 | 	mov	arg03, local04
1ec8c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ec90                 | '   putpixel(x0-y,y0+x,c)
1ec90     10 13 02 F6 | 	mov	arg01, local02
1ec94     0F 13 82 F1 | 	sub	arg01, local01
1ec98     11 15 02 F6 | 	mov	arg02, local03
1ec9c     14 15 02 F1 | 	add	arg02, local06
1eca0     12 17 02 F6 | 	mov	arg03, local04
1eca4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eca8                 | '   putpixel(x0+y,y0-x,c)
1eca8     10 13 02 F6 | 	mov	arg01, local02
1ecac     0F 13 02 F1 | 	add	arg01, local01
1ecb0     11 15 02 F6 | 	mov	arg02, local03
1ecb4     14 15 82 F1 | 	sub	arg02, local06
1ecb8     12 17 02 F6 | 	mov	arg03, local04
1ecbc     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ecc0                 | '   putpixel(x0+y,y0+x,c)
1ecc0     10 13 02 F6 | 	mov	arg01, local02
1ecc4     0F 13 02 F1 | 	add	arg01, local01
1ecc8     11 15 02 F6 | 	mov	arg02, local03
1eccc     14 15 02 F1 | 	add	arg02, local06
1ecd0     12 17 02 F6 | 	mov	arg03, local04
1ecd4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ecd8                 | '   if d>0 
1ecd8     01 26 56 F2 | 	cmps	local05, #1 wc
1ecdc     18 00 90 CD |  if_b	jmp	#LR__2501
1ece0                 | '     d+=da
1ece0     16 27 02 F1 | 	add	local05, local08
1ece4                 | '     y-=1
1ece4     01 1E 86 F1 | 	sub	local01, #1
1ece8                 | '     x+=1
1ece8     01 28 06 F1 | 	add	local06, #1
1ecec                 | '     da+=4*4
1ecec     10 2C 06 F1 | 	add	local08, #16
1ecf0                 | '     db+=2*4
1ecf0     08 2A 06 F1 | 	add	local07, #8
1ecf4     18 FF 9F FD | 	jmp	#LR__2500
1ecf8                 | LR__2501
1ecf8                 | '   else
1ecf8                 | '     d+=db
1ecf8     15 27 02 F1 | 	add	local05, local07
1ecfc                 | '     x+=1
1ecfc     01 28 06 F1 | 	add	local06, #1
1ed00                 | '     da+=2*4
1ed00     08 2C 06 F1 | 	add	local08, #8
1ed04                 | '     db+=2*4
1ed04     08 2A 06 F1 | 	add	local07, #8
1ed08     04 FF 9F FD | 	jmp	#LR__2500
1ed0c                 | LR__2502
1ed0c     A7 F0 03 F6 | 	mov	ptra, fp
1ed10     B2 00 A0 FD | 	call	#popregs_
1ed14                 | _hg010b_spin2_circle_ret
1ed14     2D 00 64 FD | 	ret
1ed18                 | 
1ed18                 | '     
1ed18                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ed18                 | ' 
1ed18                 | ' pub frame(x1,y1,x2,y2,c)
1ed18                 | _hg010b_spin2_frame
1ed18     05 4A 05 F6 | 	mov	COUNT_, #5
1ed1c     A8 00 A0 FD | 	call	#pushregs_
1ed20     09 1F 02 F6 | 	mov	local01, arg01
1ed24     0A 21 02 F6 | 	mov	local02, arg02
1ed28     0B 23 02 F6 | 	mov	local03, arg03
1ed2c     0C 25 02 F6 | 	mov	local04, arg04
1ed30     0D 27 02 F6 | 	mov	local05, arg05
1ed34                 | ' 
1ed34                 | ' fastline(x1,x2,y1,c)
1ed34     0F 13 02 F6 | 	mov	arg01, local01
1ed38     11 15 02 F6 | 	mov	arg02, local03
1ed3c     10 17 02 F6 | 	mov	arg03, local02
1ed40     13 19 02 F6 | 	mov	arg04, local05
1ed44     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ed48                 | ' fastline(x1,x2,y2,c)
1ed48     0F 13 02 F6 | 	mov	arg01, local01
1ed4c     11 15 02 F6 | 	mov	arg02, local03
1ed50     12 17 02 F6 | 	mov	arg03, local04
1ed54     13 19 02 F6 | 	mov	arg04, local05
1ed58     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ed5c                 | ' line(x1,y1,x1,y2,c)
1ed5c     0F 13 02 F6 | 	mov	arg01, local01
1ed60     10 15 02 F6 | 	mov	arg02, local02
1ed64     0F 17 02 F6 | 	mov	arg03, local01
1ed68     12 19 02 F6 | 	mov	arg04, local04
1ed6c     13 1B 02 F6 | 	mov	arg05, local05
1ed70                 | ' draw(x1,y1,x2,y2,c)
1ed70     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ed74                 | ' line(x2,y1,x2,y2,c)
1ed74     11 13 02 F6 | 	mov	arg01, local03
1ed78     10 15 02 F6 | 	mov	arg02, local02
1ed7c     11 17 02 F6 | 	mov	arg03, local03
1ed80     12 19 02 F6 | 	mov	arg04, local04
1ed84     13 1B 02 F6 | 	mov	arg05, local05
1ed88                 | ' draw(x1,y1,x2,y2,c)
1ed88     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ed8c     A7 F0 03 F6 | 	mov	ptra, fp
1ed90     B2 00 A0 FD | 	call	#popregs_
1ed94                 | _hg010b_spin2_frame_ret
1ed94     2D 00 64 FD | 	ret
1ed98                 | 
1ed98                 | ' 
1ed98                 | ' '-- A box (a filled rectangle) ----------------------------------------
1ed98                 | ' 
1ed98                 | ' pub box(x1,y1,x2,y2,c) |yy
1ed98                 | _hg010b_spin2_box
1ed98     06 4A 05 F6 | 	mov	COUNT_, #6
1ed9c     A8 00 A0 FD | 	call	#pushregs_
1eda0     09 1F 02 F6 | 	mov	local01, arg01
1eda4     0A 21 02 F6 | 	mov	local02, arg02
1eda8     0B 23 02 F6 | 	mov	local03, arg03
1edac     0C 25 02 F6 | 	mov	local04, arg04
1edb0     0D 27 02 F6 | 	mov	local05, arg05
1edb4                 | ' 
1edb4                 | ' repeat yy from y1 to y2
1edb4     10 25 52 F2 | 	cmps	local04, local02 wc
1edb8     01 28 86 F6 | 	negc	local06, #1
1edbc     14 25 02 F1 | 	add	local04, local06
1edc0                 | LR__2510
1edc0                 | '   fastline(x1,x2,yy,c)
1edc0     0F 13 02 F6 | 	mov	arg01, local01
1edc4     11 15 02 F6 | 	mov	arg02, local03
1edc8     13 19 02 F6 | 	mov	arg04, local05
1edcc     10 17 02 F6 | 	mov	arg03, local02
1edd0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1edd4     14 21 02 F1 | 	add	local02, local06
1edd8     12 21 0A F2 | 	cmp	local02, local04 wz
1eddc     E0 FF 9F 5D |  if_ne	jmp	#LR__2510
1ede0     A7 F0 03 F6 | 	mov	ptra, fp
1ede4     B2 00 A0 FD | 	call	#popregs_
1ede8                 | _hg010b_spin2_box_ret
1ede8     2D 00 64 FD | 	ret
1edec                 | 
1edec                 | '       
1edec                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1edec                 | _hg010b_spin2_putcharxycgf
1edec                 | ' 
1edec                 | '  
1edec                 | ' repeat yy from 0 to 15
1edec     00 00 06 F6 | 	mov	_var01, #0
1edf0     97 8C 48 FB | 	callpa	#(@LR__2522-@LR__2520)>>2,fcache_load_ptr_
1edf4                 | LR__2520
1edf4                 | ' 
1edf4                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1edf4     95 E4 05 F1 | 	add	objptr, #149
1edf8     F2 02 02 FB | 	rdlong	_var02, objptr
1edfc     0A 02 66 F0 | 	shl	_var02, #10
1ee00     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ee04     01 05 02 F1 | 	add	_var03, _var02
1ee08     0B 03 02 F6 | 	mov	_var02, arg03
1ee0c     04 02 66 F0 | 	shl	_var02, #4
1ee10     01 05 02 F1 | 	add	_var03, _var02
1ee14     00 05 02 F1 | 	add	_var03, _var01
1ee18     02 05 C2 FA | 	rdbyte	_var03, _var03
1ee1c                 | '   asm
1ee1c     00 04 0E F4 | 	testb	_var03, #0 wz
1ee20     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ee24     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ee28     01 04 0E F4 | 	testb	_var03, #1 wz
1ee2c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ee30     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ee34     02 04 0E F4 | 	testb	_var03, #2 wz
1ee38     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ee3c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ee40     03 04 0E F4 | 	testb	_var03, #3 wz
1ee44     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ee48     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ee4c     04 04 0E F4 | 	testb	_var03, #4 wz
1ee50     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ee54     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ee58     05 04 0E F4 | 	testb	_var03, #5 wz
1ee5c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ee60     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ee64     06 04 0E F4 | 	testb	_var03, #6 wz
1ee68     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ee6c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ee70     07 04 0E F4 | 	testb	_var03, #7 wz
1ee74     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ee78     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ee7c                 | '   
1ee7c                 | '   ccc[0]:=c1
1ee7c     99 E5 05 F1 | 	add	objptr, #409
1ee80     F2 06 62 FC | 	wrlong	_var04, objptr
1ee84                 | '   ccc[1]:=c2 
1ee84     04 E4 05 F1 | 	add	objptr, #4
1ee88     F2 08 62 FC | 	wrlong	_var05, objptr
1ee8c                 | '   long[mailbox0][2]:=8
1ee8c     49 E4 85 F1 | 	sub	objptr, #73
1ee90     F2 04 02 FB | 	rdlong	_var03, objptr
1ee94     08 04 06 F1 | 	add	_var03, #8
1ee98     02 11 68 FC | 	wrlong	#8, _var03
1ee9c                 | '   long[mailbox0][1]:=@ccc
1ee9c     45 E4 05 F1 | 	add	objptr, #69
1eea0     F2 04 02 F6 | 	mov	_var03, objptr
1eea4     45 E4 85 F1 | 	sub	objptr, #69
1eea8     F2 02 02 FB | 	rdlong	_var02, objptr
1eeac     04 02 06 F1 | 	add	_var02, #4
1eeb0     01 05 62 FC | 	wrlong	_var03, _var02
1eeb4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1eeb4     0C E5 85 F1 | 	sub	objptr, #268
1eeb8     F2 04 02 FB | 	rdlong	_var03, objptr
1eebc     0A 03 02 F6 | 	mov	_var02, arg02
1eec0     00 03 02 F1 | 	add	_var02, _var01
1eec4     0A 02 66 F0 | 	shl	_var02, #10
1eec8     09 0B 02 F6 | 	mov	_var06, arg01
1eecc     02 0A 66 F0 | 	shl	_var06, #2
1eed0     05 03 02 F1 | 	add	_var02, _var06
1eed4     01 05 02 F1 | 	add	_var03, _var02
1eed8     00 00 78 FF 
1eedc     00 04 06 F1 | 	add	_var03, ##-268435456
1eee0     0C E5 05 F1 | 	add	objptr, #268
1eee4     F2 0A 02 FB | 	rdlong	_var06, objptr
1eee8     05 05 62 FC | 	wrlong	_var03, _var06
1eeec                 | '   repeat
1eeec                 | LR__2521
1eeec     F2 04 02 FB | 	rdlong	_var03, objptr
1eef0     02 03 02 FB | 	rdlong	_var02, _var03
1eef4     00 02 56 F2 | 	cmps	_var02, #0 wc
1eef8     F0 FF 9F CD |  if_b	jmp	#LR__2521
1eefc     E9 E5 85 F1 | 	sub	objptr, #489
1ef00     01 00 06 F1 | 	add	_var01, #1
1ef04     10 00 56 F2 | 	cmps	_var01, #16 wc
1ef08     E8 FE 9F CD |  if_b	jmp	#LR__2520
1ef0c                 | LR__2522
1ef0c                 | _hg010b_spin2_putcharxycgf_ret
1ef0c     2D 00 64 FD | 	ret
1ef10                 | 
1ef10                 | ' 
1ef10                 | ' 
1ef10                 | ' '**********************************************************************r***
1ef10                 | ' '                                                                        *
1ef10                 | ' ' Font related functions                                                 *
1ef10                 | ' '                                                                        *
1ef10                 | ' '*************************************************************************
1ef10                 | ' 
1ef10                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ef10                 | ' 
1ef10                 | ' pub setfontfamily(afontnum)
1ef10                 | _hg010b_spin2_setfontfamily
1ef10                 | ' 
1ef10                 | ' font_family:=afontnum
1ef10     95 E4 05 F1 | 	add	objptr, #149
1ef14     F2 12 62 FC | 	wrlong	arg01, objptr
1ef18     95 E4 85 F1 | 	sub	objptr, #149
1ef1c                 | ' 'if afontnum==8
1ef1c                 | ' '  font_ptr:=@amiga_font
1ef1c                 | ' 
1ef1c                 | ' if afontnum==4
1ef1c     04 12 0E F2 | 	cmp	arg01, #4 wz
1ef20                 | '   font_ptr:=@st_font
1ef20     08 00 00 AF 
1ef24     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ef28     08 E4 05 A1 |  if_e	add	objptr, #8
1ef2c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ef30     08 E4 85 A1 |  if_e	sub	objptr, #8
1ef34     08 00 00 AF 
1ef38     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ef3c                 | ' if afontnum==0
1ef3c     00 12 0E F2 | 	cmp	arg01, #0 wz
1ef40                 | '   font_ptr:=@vga_font
1ef40     08 E4 05 A1 |  if_e	add	objptr, #8
1ef44     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ef48     08 E4 85 A1 |  if_e	sub	objptr, #8
1ef4c                 | _hg010b_spin2_setfontfamily_ret
1ef4c     2D 00 64 FD | 	ret
1ef50                 | 
1ef50                 | ' 
1ef50                 | ' '*************************************************************************
1ef50                 | ' '                                                                        *
1ef50                 | ' '  Cursor functions                                                      *
1ef50                 | ' '                                                                        *
1ef50                 | ' '*************************************************************************
1ef50                 | ' 
1ef50                 | ' 
1ef50                 | ' pub setcursorpos(x,y)
1ef50                 | _hg010b_spin2_setcursorpos
1ef50                 | ' 
1ef50                 | ' ''---------- Set the (x,y) position of cursor
1ef50                 | ' 
1ef50                 | ' cursor_x:=x
1ef50     3C E4 05 F1 | 	add	objptr, #60
1ef54     F2 12 52 FC | 	wrword	arg01, objptr
1ef58                 | ' cursor_y:=y
1ef58     02 E4 05 F1 | 	add	objptr, #2
1ef5c     F2 14 42 FC | 	wrbyte	arg02, objptr
1ef60                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ef60     02 E4 85 F1 | 	sub	objptr, #2
1ef64     F2 14 E2 FA | 	rdword	arg02, objptr
1ef68     02 14 66 F0 | 	shl	arg02, #2
1ef6c     02 E4 05 F1 | 	add	objptr, #2
1ef70     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ef74     3E E4 85 F1 | 	sub	objptr, #62
1ef78     04 16 66 F0 | 	shl	arg03, #4
1ef7c     04 16 06 F1 | 	add	arg03, #4
1ef80     11 12 06 F6 | 	mov	arg01, #17
1ef84     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ef88                 | _hg010b_spin2_setcursorpos_ret
1ef88     2D 00 64 FD | 	ret
1ef8c                 | 
1ef8c                 | ' 
1ef8c                 | ' pub setcursorx(x)
1ef8c                 | _hg010b_spin2_setcursorx
1ef8c                 | ' cursor_x:=x
1ef8c     3C E4 05 F1 | 	add	objptr, #60
1ef90     F2 12 52 FC | 	wrword	arg01, objptr
1ef94                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ef94     F2 14 E2 FA | 	rdword	arg02, objptr
1ef98     02 14 66 F0 | 	shl	arg02, #2
1ef9c     02 E4 05 F1 | 	add	objptr, #2
1efa0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1efa4     3E E4 85 F1 | 	sub	objptr, #62
1efa8     04 16 66 F0 | 	shl	arg03, #4
1efac     04 16 06 F1 | 	add	arg03, #4
1efb0     11 12 06 F6 | 	mov	arg01, #17
1efb4     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1efb8                 | _hg010b_spin2_setcursorx_ret
1efb8     2D 00 64 FD | 	ret
1efbc                 | 
1efbc                 | ' 
1efbc                 | ' pub setcursory(y) 
1efbc                 | _hg010b_spin2_setcursory
1efbc                 | ' cursor_y:=y
1efbc     3E E4 05 F1 | 	add	objptr, #62
1efc0     F2 12 42 FC | 	wrbyte	arg01, objptr
1efc4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1efc4     02 E4 85 F1 | 	sub	objptr, #2
1efc8     F2 14 E2 FA | 	rdword	arg02, objptr
1efcc     02 14 66 F0 | 	shl	arg02, #2
1efd0     02 E4 05 F1 | 	add	objptr, #2
1efd4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1efd8     3E E4 85 F1 | 	sub	objptr, #62
1efdc     04 16 66 F0 | 	shl	arg03, #4
1efe0     04 16 06 F1 | 	add	arg03, #4
1efe4     11 12 06 F6 | 	mov	arg01, #17
1efe8     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1efec                 | _hg010b_spin2_setcursory_ret
1efec     2D 00 64 FD | 	ret
1eff0                 | 
1eff0                 | ' 
1eff0                 | ' '*************************************************************************
1eff0                 | ' '                                                                        *
1eff0                 | ' '  VBlank functions                                                      *
1eff0                 | ' '                                                                        *
1eff0                 | ' '*************************************************************************
1eff0                 | ' 
1eff0                 | ' pub waitvbl(amount) | i
1eff0                 | _hg010b_spin2_waitvbl
1eff0     03 4A 05 F6 | 	mov	COUNT_, #3
1eff4     A8 00 A0 FD | 	call	#pushregs_
1eff8     09 1F 02 F6 | 	mov	local01, arg01
1effc                 | ' 
1effc                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1effc                 | ' 
1effc                 | ' repeat i from 1 to amount
1effc     01 20 06 F6 | 	mov	local02, #1
1f000     01 1E 56 F2 | 	cmps	local01, #1 wc
1f004     01 22 86 F6 | 	negc	local03, #1
1f008     11 1F 02 F1 | 	add	local01, local03
1f00c                 | LR__2530
1f00c                 | '   repeat until vblank==0
1f00c                 | LR__2531
1f00c     49 E4 05 F1 | 	add	objptr, #73
1f010     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f014     49 E4 85 F1 | 	sub	objptr, #73
1f018     0C 00 90 AD |  if_e	jmp	#LR__2532
1f01c                 | '     waitus(100)
1f01c     64 12 06 F6 | 	mov	arg01, #100
1f020     78 1C B0 FD | 	call	#__system___waitus
1f024     E4 FF 9F FD | 	jmp	#LR__2531
1f028                 | LR__2532
1f028                 | '   repeat until vblank==1
1f028                 | LR__2533
1f028     49 E4 05 F1 | 	add	objptr, #73
1f02c     F2 12 02 FB | 	rdlong	arg01, objptr
1f030     49 E4 85 F1 | 	sub	objptr, #73
1f034     01 12 0E F2 | 	cmp	arg01, #1 wz
1f038     0C 00 90 AD |  if_e	jmp	#LR__2534
1f03c                 | '     waitus(100)
1f03c     64 12 06 F6 | 	mov	arg01, #100
1f040     58 1C B0 FD | 	call	#__system___waitus
1f044     E0 FF 9F FD | 	jmp	#LR__2533
1f048                 | LR__2534
1f048     11 21 02 F1 | 	add	local02, local03
1f04c     0F 21 0A F2 | 	cmp	local02, local01 wz
1f050     B8 FF 9F 5D |  if_ne	jmp	#LR__2530
1f054     A7 F0 03 F6 | 	mov	ptra, fp
1f058     B2 00 A0 FD | 	call	#popregs_
1f05c                 | _hg010b_spin2_waitvbl_ret
1f05c     2D 00 64 FD | 	ret
1f060                 | 
1f060                 | ' 
1f060                 | ' 
1f060                 | ' pub cls(fc,bc)   :c,i
1f060                 | _hg010b_spin2_cls
1f060     02 4A 05 F6 | 	mov	COUNT_, #2
1f064     A8 00 A0 FD | 	call	#pushregs_
1f068     09 1F 02 F6 | 	mov	local01, arg01
1f06c     0A 21 02 F6 | 	mov	local02, arg02
1f070                 | ' 
1f070                 | ' c:=bc
1f070                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f070     DD E4 05 F1 | 	add	objptr, #221
1f074     F2 12 02 FB | 	rdlong	arg01, objptr
1f078     A5 E4 85 F1 | 	sub	objptr, #165
1f07c     F2 16 02 FB | 	rdlong	arg03, objptr
1f080     02 16 66 F0 | 	shl	arg03, #2
1f084     10 15 02 F6 | 	mov	arg02, local02
1f088     00 18 06 F6 | 	mov	arg04, #0
1f08c     01 1A 06 F6 | 	mov	arg05, #1
1f090     0B 00 00 FF 
1f094     94 E4 05 F1 | 	add	objptr, ##5780
1f098     98 0D B0 FD | 	call	#_psram_spin2_fill
1f09c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f09c     0B 00 00 FF 
1f0a0     C8 E4 85 F1 | 	sub	objptr, ##5832
1f0a4     F2 12 02 FB | 	rdlong	arg01, objptr
1f0a8     04 E4 85 F1 | 	sub	objptr, #4
1f0ac     F2 16 02 FB | 	rdlong	arg03, objptr
1f0b0     09 17 82 F1 | 	sub	arg03, arg01
1f0b4     20 14 06 F6 | 	mov	arg02, #32
1f0b8     00 18 06 F6 | 	mov	arg04, #0
1f0bc     01 1A 06 F6 | 	mov	arg05, #1
1f0c0     0B 00 00 FF 
1f0c4     CC E4 05 F1 | 	add	objptr, ##5836
1f0c8     68 0D B0 FD | 	call	#_psram_spin2_fill
1f0cc                 | ' setwritecolors(fc,bc)
1f0cc                 | ' 
1f0cc                 | ' write_color:=ff
1f0cc     0B 00 00 FF 
1f0d0     8B E4 85 F1 | 	sub	objptr, ##5771
1f0d4     F2 1E 62 FC | 	wrlong	local01, objptr
1f0d8                 | ' write_background:=bb
1f0d8     04 E4 05 F1 | 	add	objptr, #4
1f0dc     F2 20 62 FC | 	wrlong	local02, objptr
1f0e0                 | ' cursor_x:=0
1f0e0     09 E4 85 F1 | 	sub	objptr, #9
1f0e4     F2 00 58 FC | 	wrword	#0, objptr
1f0e8                 | ' cursor_y:=0
1f0e8     02 E4 05 F1 | 	add	objptr, #2
1f0ec     F2 00 48 FC | 	wrbyte	#0, objptr
1f0f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f0f0     02 E4 85 F1 | 	sub	objptr, #2
1f0f4     F2 14 E2 FA | 	rdword	arg02, objptr
1f0f8     02 14 66 F0 | 	shl	arg02, #2
1f0fc     02 E4 05 F1 | 	add	objptr, #2
1f100     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f104     3E E4 85 F1 | 	sub	objptr, #62
1f108     04 16 66 F0 | 	shl	arg03, #4
1f10c     04 16 06 F1 | 	add	arg03, #4
1f110     11 12 06 F6 | 	mov	arg01, #17
1f114     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f118                 | ' setcursorcolor(fc)
1f118     0F 13 02 F6 | 	mov	arg01, local01
1f11c     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f120     10 FB 01 F6 | 	mov	result1, local02
1f124     00 FC 05 F6 | 	mov	result2, #0
1f128     A7 F0 03 F6 | 	mov	ptra, fp
1f12c     B2 00 A0 FD | 	call	#popregs_
1f130                 | _hg010b_spin2_cls_ret
1f130     2D 00 64 FD | 	ret
1f134                 | 
1f134                 | ' 
1f134                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f134                 | ' 
1f134                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f134                 | _hg010b_spin2_putchar
1f134     02 4A 05 F6 | 	mov	COUNT_, #2
1f138     A8 00 A0 FD | 	call	#pushregs_
1f13c     09 1F 02 F6 | 	mov	local01, arg01
1f140                 | ' 
1f140                 | ' if achar==10
1f140     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f144                 | '   crlf()
1f144     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f148                 | ' if achar==9
1f148     09 1E 0E F2 | 	cmp	local01, #9 wz
1f14c     18 00 90 5D |  if_ne	jmp	#LR__2540
1f150                 | '   cursor_x:=(cursor_x& %11110000)+16
1f150     3C E4 05 F1 | 	add	objptr, #60
1f154     F2 16 E2 FA | 	rdword	arg03, objptr
1f158     F0 16 06 F5 | 	and	arg03, #240
1f15c     10 16 06 F1 | 	add	arg03, #16
1f160     F2 16 52 FC | 	wrword	arg03, objptr
1f164     3C E4 85 F1 | 	sub	objptr, #60
1f168                 | LR__2540
1f168                 | '   
1f168                 | ' if (achar<>9) && (achar<>10) 
1f168     09 1E 0E F2 | 	cmp	local01, #9 wz
1f16c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f170     A8 00 90 AD |  if_e	jmp	#LR__2541
1f174                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f174     3C E4 05 F1 | 	add	objptr, #60
1f178     F2 12 E2 FA | 	rdword	arg01, objptr
1f17c     02 E4 05 F1 | 	add	objptr, #2
1f180     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f184     04 14 66 F0 | 	shl	arg02, #4
1f188     04 14 06 F1 | 	add	arg02, #4
1f18c     03 E4 05 F1 | 	add	objptr, #3
1f190     F2 18 02 FB | 	rdlong	arg04, objptr
1f194     04 E4 05 F1 | 	add	objptr, #4
1f198     F2 1A 02 FB | 	rdlong	arg05, objptr
1f19c     45 E4 85 F1 | 	sub	objptr, #69
1f1a0     0F 17 02 F6 | 	mov	arg03, local01
1f1a4     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f1a8     04 E4 05 F1 | 	add	objptr, #4
1f1ac     F2 12 02 FB | 	rdlong	arg01, objptr
1f1b0     10 00 00 FF 
1f1b4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f1b8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f1bc     3A E4 05 F1 | 	add	objptr, #58
1f1c0     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f1c4     0D 17 02 FD | 	qmul	arg03, arg05
1f1c8                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f1c8     10 00 00 FF 
1f1cc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f1d0     02 E4 85 F1 | 	sub	objptr, #2
1f1d4     F2 20 E2 FA | 	rdword	local02, objptr
1f1d8     01 20 46 F0 | 	shr	local02, #1
1f1dc     0F 15 02 F6 | 	mov	arg02, local01
1f1e0     01 16 06 F6 | 	mov	arg03, #1
1f1e4     00 18 06 F6 | 	mov	arg04, #0
1f1e8     01 1A 06 F6 | 	mov	arg05, #1
1f1ec     0B 00 00 FF 
1f1f0     90 E4 05 F1 | 	add	objptr, ##5776
1f1f4     18 1E 62 FD | 	getqx	local01
1f1f8     10 1F 02 F1 | 	add	local01, local02
1f1fc     0F 13 02 F1 | 	add	arg01, local01
1f200     30 0C B0 FD | 	call	#_psram_spin2_fill
1f204                 | '   cursor_x+=2
1f204     0B 00 00 FF 
1f208     90 E4 85 F1 | 	sub	objptr, ##5776
1f20c     F2 20 E2 FA | 	rdword	local02, objptr
1f210     02 20 06 F1 | 	add	local02, #2
1f214     F2 20 52 FC | 	wrword	local02, objptr
1f218     3C E4 85 F1 | 	sub	objptr, #60
1f21c                 | LR__2541
1f21c                 | ' 
1f21c                 | ' if cursor_x>=256
1f21c     3C E4 05 F1 | 	add	objptr, #60
1f220     F2 20 E2 FA | 	rdword	local02, objptr
1f224     3C E4 85 F1 | 	sub	objptr, #60
1f228     00 21 56 F2 | 	cmps	local02, #256 wc
1f22c     64 00 90 CD |  if_b	jmp	#LR__2543
1f230                 | '   cursor_x:=0
1f230     3C E4 05 F1 | 	add	objptr, #60
1f234     F2 00 58 FC | 	wrword	#0, objptr
1f238                 | '   cursor_y+=1
1f238     02 E4 05 F1 | 	add	objptr, #2
1f23c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f240     01 20 06 F1 | 	add	local02, #1
1f244     F2 20 42 FC | 	wrbyte	local02, objptr
1f248                 | '   if cursor_y>st_lines-1
1f248     C3 E4 05 F1 | 	add	objptr, #195
1f24c     F2 20 02 FB | 	rdlong	local02, objptr
1f250     01 20 86 F1 | 	sub	local02, #1
1f254     C3 E4 85 F1 | 	sub	objptr, #195
1f258     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f25c     3E E4 85 F1 | 	sub	objptr, #62
1f260     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f264     2C 00 90 ED |  if_be	jmp	#LR__2542
1f268                 | '     scrollup2()
1f268     00 12 06 F6 | 	mov	arg01, #0
1f26c     01 00 00 FF 
1f270     58 14 06 F6 | 	mov	arg02, ##600
1f274     10 16 06 F6 | 	mov	arg03, #16
1f278     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f27c                 | '     cursor_y:=st_lines-1
1f27c     01 E5 05 F1 | 	add	objptr, #257
1f280     F2 20 02 FB | 	rdlong	local02, objptr
1f284     01 20 86 F1 | 	sub	local02, #1
1f288     C3 E4 85 F1 | 	sub	objptr, #195
1f28c     F2 20 42 FC | 	wrbyte	local02, objptr
1f290     3E E4 85 F1 | 	sub	objptr, #62
1f294                 | LR__2542
1f294                 | LR__2543
1f294                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f294     3C E4 05 F1 | 	add	objptr, #60
1f298     F2 14 E2 FA | 	rdword	arg02, objptr
1f29c     02 14 66 F0 | 	shl	arg02, #2
1f2a0     02 E4 05 F1 | 	add	objptr, #2
1f2a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2a8     3E E4 85 F1 | 	sub	objptr, #62
1f2ac     04 16 66 F0 | 	shl	arg03, #4
1f2b0     04 16 06 F1 | 	add	arg03, #4
1f2b4     11 12 06 F6 | 	mov	arg01, #17
1f2b8     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f2bc     A7 F0 03 F6 | 	mov	ptra, fp
1f2c0     B2 00 A0 FD | 	call	#popregs_
1f2c4                 | _hg010b_spin2_putchar_ret
1f2c4     2D 00 64 FD | 	ret
1f2c8                 | 
1f2c8                 | '     
1f2c8                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f2c8                 | ' 
1f2c8                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f2c8                 | _hg010b_spin2_putchar2
1f2c8     02 4A 05 F6 | 	mov	COUNT_, #2
1f2cc     A8 00 A0 FD | 	call	#pushregs_
1f2d0     09 1F 02 F6 | 	mov	local01, arg01
1f2d4                 | ' 
1f2d4                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f2d4     3C E4 05 F1 | 	add	objptr, #60
1f2d8     F2 12 E2 FA | 	rdword	arg01, objptr
1f2dc     02 E4 05 F1 | 	add	objptr, #2
1f2e0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f2e4     04 14 66 F0 | 	shl	arg02, #4
1f2e8     04 14 06 F1 | 	add	arg02, #4
1f2ec     03 E4 05 F1 | 	add	objptr, #3
1f2f0     F2 18 02 FB | 	rdlong	arg04, objptr
1f2f4     04 E4 05 F1 | 	add	objptr, #4
1f2f8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f2fc     45 E4 85 F1 | 	sub	objptr, #69
1f300     0F 17 02 F6 | 	mov	arg03, local01
1f304     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f308     04 E4 05 F1 | 	add	objptr, #4
1f30c     F2 12 02 FB | 	rdlong	arg01, objptr
1f310     10 00 00 FF 
1f314     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f318     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f31c     3A E4 05 F1 | 	add	objptr, #58
1f320     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f324     0D 17 02 FD | 	qmul	arg03, arg05
1f328                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f328     10 00 00 FF 
1f32c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f330     02 E4 85 F1 | 	sub	objptr, #2
1f334     F2 20 E2 FA | 	rdword	local02, objptr
1f338     01 20 46 F0 | 	shr	local02, #1
1f33c     0F 15 02 F6 | 	mov	arg02, local01
1f340     01 16 06 F6 | 	mov	arg03, #1
1f344     00 18 06 F6 | 	mov	arg04, #0
1f348     01 1A 06 F6 | 	mov	arg05, #1
1f34c     0B 00 00 FF 
1f350     90 E4 05 F1 | 	add	objptr, ##5776
1f354     18 1E 62 FD | 	getqx	local01
1f358     10 1F 02 F1 | 	add	local01, local02
1f35c     0F 13 02 F1 | 	add	arg01, local01
1f360     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f364                 | ' 
1f364                 | ' cursor_x+=2
1f364     0B 00 00 FF 
1f368     90 E4 85 F1 | 	sub	objptr, ##5776
1f36c     F2 20 E2 FA | 	rdword	local02, objptr
1f370     02 20 06 F1 | 	add	local02, #2
1f374     F2 20 52 FC | 	wrword	local02, objptr
1f378                 | ' if cursor_x>=256
1f378     F2 20 E2 FA | 	rdword	local02, objptr
1f37c     3C E4 85 F1 | 	sub	objptr, #60
1f380     00 21 56 F2 | 	cmps	local02, #256 wc
1f384     64 00 90 CD |  if_b	jmp	#LR__2551
1f388                 | '   cursor_x:=0
1f388     3C E4 05 F1 | 	add	objptr, #60
1f38c     F2 00 58 FC | 	wrword	#0, objptr
1f390                 | '   cursor_y+=1
1f390     02 E4 05 F1 | 	add	objptr, #2
1f394     F2 20 C2 FA | 	rdbyte	local02, objptr
1f398     01 20 06 F1 | 	add	local02, #1
1f39c     F2 20 42 FC | 	wrbyte	local02, objptr
1f3a0                 | '   if cursor_y>st_lines-1
1f3a0     C3 E4 05 F1 | 	add	objptr, #195
1f3a4     F2 20 02 FB | 	rdlong	local02, objptr
1f3a8     01 20 86 F1 | 	sub	local02, #1
1f3ac     C3 E4 85 F1 | 	sub	objptr, #195
1f3b0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f3b4     3E E4 85 F1 | 	sub	objptr, #62
1f3b8     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f3bc     2C 00 90 ED |  if_be	jmp	#LR__2550
1f3c0                 | '     scrollup2()
1f3c0     00 12 06 F6 | 	mov	arg01, #0
1f3c4     01 00 00 FF 
1f3c8     58 14 06 F6 | 	mov	arg02, ##600
1f3cc     10 16 06 F6 | 	mov	arg03, #16
1f3d0     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f3d4                 | '     cursor_y:=st_lines-1
1f3d4     01 E5 05 F1 | 	add	objptr, #257
1f3d8     F2 20 02 FB | 	rdlong	local02, objptr
1f3dc     01 20 86 F1 | 	sub	local02, #1
1f3e0     C3 E4 85 F1 | 	sub	objptr, #195
1f3e4     F2 20 42 FC | 	wrbyte	local02, objptr
1f3e8     3E E4 85 F1 | 	sub	objptr, #62
1f3ec                 | LR__2550
1f3ec                 | LR__2551
1f3ec                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f3ec     3C E4 05 F1 | 	add	objptr, #60
1f3f0     F2 14 E2 FA | 	rdword	arg02, objptr
1f3f4     02 14 66 F0 | 	shl	arg02, #2
1f3f8     02 E4 05 F1 | 	add	objptr, #2
1f3fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f400     3E E4 85 F1 | 	sub	objptr, #62
1f404     04 16 66 F0 | 	shl	arg03, #4
1f408     04 16 06 F1 | 	add	arg03, #4
1f40c     11 12 06 F6 | 	mov	arg01, #17
1f410     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f414     A7 F0 03 F6 | 	mov	ptra, fp
1f418     B2 00 A0 FD | 	call	#popregs_
1f41c                 | _hg010b_spin2_putchar2_ret
1f41c     2D 00 64 FD | 	ret
1f420                 | 
1f420                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f420                 | ' 
1f420                 | ' pub write(text) | iii,c,ncx,ncy
1f420                 | _hg010b_spin2_write
1f420     04 4A 05 F6 | 	mov	COUNT_, #4
1f424     A8 00 A0 FD | 	call	#pushregs_
1f428     09 1F 02 F6 | 	mov	local01, arg01
1f42c                 | ' 
1f42c                 | ' repeat iii from 0 to strsize(text)-1
1f42c     00 20 06 F6 | 	mov	local02, #0
1f430     0F 13 02 F6 | 	mov	arg01, local01
1f434     09 23 02 F6 | 	mov	local03, arg01
1f438     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f43c                 | LR__2560
1f43c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f440     01 22 06 51 |  if_ne	add	local03, #1
1f444     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1f448                 | LR__2561
1f448     09 23 82 F1 | 	sub	local03, arg01
1f44c     01 22 86 F1 | 	sub	local03, #1
1f450     00 22 56 F2 | 	cmps	local03, #0 wc
1f454     01 24 86 F6 | 	negc	local04, #1
1f458     12 23 02 F1 | 	add	local03, local04
1f45c                 | LR__2562
1f45c                 | '   putchar2(byte[text+iii])
1f45c     0F 13 02 F6 | 	mov	arg01, local01
1f460     10 13 02 F1 | 	add	arg01, local02
1f464     09 13 C2 FA | 	rdbyte	arg01, arg01
1f468     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f46c     12 21 02 F1 | 	add	local02, local04
1f470     11 21 0A F2 | 	cmp	local02, local03 wz
1f474     E4 FF 9F 5D |  if_ne	jmp	#LR__2562
1f478     A7 F0 03 F6 | 	mov	ptra, fp
1f47c     B2 00 A0 FD | 	call	#popregs_
1f480                 | _hg010b_spin2_write_ret
1f480     2D 00 64 FD | 	ret
1f484                 | 
1f484                 | '    
1f484                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f484                 | ' 
1f484                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f484                 | _hg010b_spin2_scrollup2
1f484     03 4A 05 F6 | 	mov	COUNT_, #3
1f488     A8 00 A0 FD | 	call	#pushregs_
1f48c                 | ' 	
1f48c                 | ' repeat i from 4 to 579 
1f48c     04 1E 06 F6 | 	mov	local01, #4
1f490                 | LR__2570
1f490     F9 E4 05 F1 | 	add	objptr, #249
1f494     F2 1A 02 FB | 	rdlong	arg05, objptr
1f498     1C E4 85 F1 | 	sub	objptr, #28
1f49c     F2 14 02 FB | 	rdlong	arg02, objptr
1f4a0     0F 19 02 F6 | 	mov	arg04, local01
1f4a4     10 18 06 F1 | 	add	arg04, #16
1f4a8     02 18 66 F0 | 	shl	arg04, #2
1f4ac     14 E4 05 F1 | 	add	objptr, #20
1f4b0     F2 16 02 FB | 	rdlong	arg03, objptr
1f4b4     0B 19 02 FD | 	qmul	arg04, arg03
1f4b8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f4b8     F6 03 00 FF 
1f4bc     00 12 06 F6 | 	mov	arg01, ##519168
1f4c0     0D 13 82 F1 | 	sub	arg01, arg05
1f4c4     02 16 66 F0 | 	shl	arg03, #2
1f4c8     0A 00 00 FF 
1f4cc     DB E5 05 F1 | 	add	objptr, ##5595
1f4d0     18 1A 62 FD | 	getqx	arg05
1f4d4     0D 15 02 F1 | 	add	arg02, arg05
1f4d8     20 08 B0 FD | 	call	#_psram_spin2_read1
1f4dc     0A 00 00 FF 
1f4e0     D3 E5 85 F1 | 	sub	objptr, ##5587
1f4e4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4e8     1C E4 85 F1 | 	sub	objptr, #28
1f4ec     F2 14 02 FB | 	rdlong	arg02, objptr
1f4f0     0F 19 02 F6 | 	mov	arg04, local01
1f4f4     02 18 66 F0 | 	shl	arg04, #2
1f4f8     14 E4 05 F1 | 	add	objptr, #20
1f4fc     F2 16 02 FB | 	rdlong	arg03, objptr
1f500     0B 19 02 FD | 	qmul	arg04, arg03
1f504                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f504     F6 03 00 FF 
1f508     00 12 06 F6 | 	mov	arg01, ##519168
1f50c     0D 13 82 F1 | 	sub	arg01, arg05
1f510     02 16 66 F0 | 	shl	arg03, #2
1f514     0A 00 00 FF 
1f518     DB E5 05 F1 | 	add	objptr, ##5595
1f51c     18 1A 62 FD | 	getqx	arg05
1f520     0D 15 02 F1 | 	add	arg02, arg05
1f524     70 08 B0 FD | 	call	#_psram_spin2_write
1f528     0B 00 00 FF 
1f52c     CC E4 85 F1 | 	sub	objptr, ##5836
1f530     01 1E 06 F1 | 	add	local01, #1
1f534     01 00 00 FF 
1f538     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f53c     50 FF 9F CD |  if_b	jmp	#LR__2570
1f540                 | ' 
1f540                 | ' repeat i from 580 to 599
1f540     01 00 00 FF 
1f544     44 1E 06 F6 | 	mov	local01, ##580
1f548                 | LR__2571
1f548                 | '    fastline(0,1023,i,write_background)   
1f548     45 E4 05 F1 | 	add	objptr, #69
1f54c     F2 18 02 FB | 	rdlong	arg04, objptr
1f550     45 E4 85 F1 | 	sub	objptr, #69
1f554     00 12 06 F6 | 	mov	arg01, #0
1f558     09 14 CE F9 | 	bmask	arg02, #9
1f55c     0F 17 02 F6 | 	mov	arg03, local01
1f560     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f564     01 1E 06 F1 | 	add	local01, #1
1f568     01 00 00 FF 
1f56c     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f570     D4 FF 9F CD |  if_b	jmp	#LR__2571
1f574                 | ' repeat i from 0 to 3
1f574     00 1E 06 F6 | 	mov	local01, #0
1f578                 | LR__2572
1f578                 | '    fastline(0,1023,i,write_background)      
1f578     45 E4 05 F1 | 	add	objptr, #69
1f57c     F2 18 02 FB | 	rdlong	arg04, objptr
1f580     45 E4 85 F1 | 	sub	objptr, #69
1f584     00 12 06 F6 | 	mov	arg01, #0
1f588     09 14 CE F9 | 	bmask	arg02, #9
1f58c     0F 17 02 F6 | 	mov	arg03, local01
1f590     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f594     01 1E 06 F1 | 	add	local01, #1
1f598     04 1E 56 F2 | 	cmps	local01, #4 wc
1f59c     D8 FF 9F CD |  if_b	jmp	#LR__2572
1f5a0                 | ' 
1f5a0                 | ' repeat i from 0 to 35
1f5a0     00 1E 06 F6 | 	mov	local01, #0
1f5a4                 | LR__2573
1f5a4     0F 1B 02 F6 | 	mov	arg05, local01
1f5a8     01 1A 06 F1 | 	add	arg05, #1
1f5ac     10 00 00 FF 
1f5b0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f5b4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f5b8     0B 1B 02 FD | 	qmul	arg05, arg03
1f5bc                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f5bc     F6 03 00 FF 
1f5c0     00 12 06 F6 | 	mov	arg01, ##519168
1f5c4     F9 E4 05 F1 | 	add	objptr, #249
1f5c8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f5cc     0D 13 82 F1 | 	sub	arg01, arg05
1f5d0     F5 E4 85 F1 | 	sub	objptr, #245
1f5d4     F2 14 02 FB | 	rdlong	arg02, objptr
1f5d8     10 00 00 FF 
1f5dc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f5e0     0B 00 00 FF 
1f5e4     C8 E4 05 F1 | 	add	objptr, ##5832
1f5e8     18 1A 62 FD | 	getqx	arg05
1f5ec     0D 15 02 F1 | 	add	arg02, arg05
1f5f0     08 07 B0 FD | 	call	#_psram_spin2_read1
1f5f4     10 00 00 FF 
1f5f8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f5fc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f600     0B 1F 02 FD | 	qmul	local01, arg03
1f604                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f604     F6 03 00 FF 
1f608     00 12 06 F6 | 	mov	arg01, ##519168
1f60c     0A 00 00 FF 
1f610     D3 E5 85 F1 | 	sub	objptr, ##5587
1f614     F2 1A 02 FB | 	rdlong	arg05, objptr
1f618     0D 13 82 F1 | 	sub	arg01, arg05
1f61c     F5 E4 85 F1 | 	sub	objptr, #245
1f620     F2 14 02 FB | 	rdlong	arg02, objptr
1f624     10 00 00 FF 
1f628     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f62c     0B 00 00 FF 
1f630     C8 E4 05 F1 | 	add	objptr, ##5832
1f634     18 1A 62 FD | 	getqx	arg05
1f638     0D 15 02 F1 | 	add	arg02, arg05
1f63c     58 07 B0 FD | 	call	#_psram_spin2_write
1f640     0B 00 00 FF 
1f644     CC E4 85 F1 | 	sub	objptr, ##5836
1f648     01 1E 06 F1 | 	add	local01, #1
1f64c     24 1E 56 F2 | 	cmps	local01, #36 wc
1f650     50 FF 9F CD |  if_b	jmp	#LR__2573
1f654                 | ' repeat i from 0 to timings[7]-1
1f654     00 1E 06 F6 | 	mov	local01, #0
1f658     10 00 00 FF 
1f65c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f660     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f664     10 00 00 FF 
1f668     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f66c     01 20 86 F1 | 	sub	local02, #1
1f670     00 20 56 F2 | 	cmps	local02, #0 wc
1f674     01 22 86 F6 | 	negc	local03, #1
1f678     11 21 02 F1 | 	add	local02, local03
1f67c                 | LR__2574
1f67c                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f67c     04 E4 05 F1 | 	add	objptr, #4
1f680     F2 12 02 FB | 	rdlong	arg01, objptr
1f684     10 00 00 FF 
1f688     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f68c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f690     10 00 00 FF 
1f694     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f698     0D 19 02 F6 | 	mov	arg04, arg05
1f69c     03 18 66 F0 | 	shl	arg04, #3
1f6a0     0D 19 02 F1 | 	add	arg04, arg05
1f6a4     02 18 66 F0 | 	shl	arg04, #2
1f6a8     0F 19 02 F1 | 	add	arg04, local01
1f6ac     0C 13 02 F1 | 	add	arg01, arg04
1f6b0     20 14 06 F6 | 	mov	arg02, #32
1f6b4     01 16 06 F6 | 	mov	arg03, #1
1f6b8     00 18 06 F6 | 	mov	arg04, #0
1f6bc     01 1A 06 F6 | 	mov	arg05, #1
1f6c0     0B 00 00 FF 
1f6c4     C8 E4 05 F1 | 	add	objptr, ##5832
1f6c8     68 07 B0 FD | 	call	#_psram_spin2_fill
1f6cc     0B 00 00 FF 
1f6d0     CC E4 85 F1 | 	sub	objptr, ##5836
1f6d4     11 1F 02 F1 | 	add	local01, local03
1f6d8     10 1F 0A F2 | 	cmp	local01, local02 wz
1f6dc     9C FF 9F 5D |  if_ne	jmp	#LR__2574
1f6e0     A7 F0 03 F6 | 	mov	ptra, fp
1f6e4     B2 00 A0 FD | 	call	#popregs_
1f6e8                 | _hg010b_spin2_scrollup2_ret
1f6e8     2D 00 64 FD | 	ret
1f6ec                 | 
1f6ec                 | '  
1f6ec                 | ' ''----------- Scroll the screen one line down 
1f6ec                 | ' 
1f6ec                 | ' pub scrolldown(start=0) | i
1f6ec                 | _hg010b_spin2_scrolldown
1f6ec     05 4A 05 F6 | 	mov	COUNT_, #5
1f6f0     A8 00 A0 FD | 	call	#pushregs_
1f6f4     09 1F 02 F6 | 	mov	local01, arg01
1f6f8                 | ' 
1f6f8                 | ' repeat i from 579 to (start*16)+4
1f6f8     01 00 00 FF 
1f6fc     43 20 06 F6 | 	mov	local02, ##579
1f700     0F 23 02 F6 | 	mov	local03, local01
1f704     04 22 66 F0 | 	shl	local03, #4
1f708     04 22 06 F1 | 	add	local03, #4
1f70c     01 00 00 FF 
1f710     43 22 56 F2 | 	cmps	local03, ##579 wc
1f714     01 24 86 F6 | 	negc	local04, #1
1f718     12 27 02 F6 | 	mov	local05, local04
1f71c     12 23 02 F1 | 	add	local03, local04
1f720                 | LR__2580
1f720     F9 E4 05 F1 | 	add	objptr, #249
1f724     F2 24 02 FB | 	rdlong	local04, objptr
1f728     1C E4 85 F1 | 	sub	objptr, #28
1f72c     F2 14 02 FB | 	rdlong	arg02, objptr
1f730     10 1B 02 F6 | 	mov	arg05, local02
1f734     02 1A 66 F0 | 	shl	arg05, #2
1f738     14 E4 05 F1 | 	add	objptr, #20
1f73c     F2 16 02 FB | 	rdlong	arg03, objptr
1f740     0B 1B 02 FD | 	qmul	arg05, arg03
1f744                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f744     F6 03 00 FF 
1f748     00 12 06 F6 | 	mov	arg01, ##519168
1f74c     12 13 82 F1 | 	sub	arg01, local04
1f750     02 16 66 F0 | 	shl	arg03, #2
1f754     0A 00 00 FF 
1f758     DB E5 05 F1 | 	add	objptr, ##5595
1f75c     18 24 62 FD | 	getqx	local04
1f760     12 15 02 F1 | 	add	arg02, local04
1f764     94 05 B0 FD | 	call	#_psram_spin2_read1
1f768     0A 00 00 FF 
1f76c     D3 E5 85 F1 | 	sub	objptr, ##5587
1f770     F2 24 02 FB | 	rdlong	local04, objptr
1f774     1C E4 85 F1 | 	sub	objptr, #28
1f778     F2 14 02 FB | 	rdlong	arg02, objptr
1f77c     10 1B 02 F6 | 	mov	arg05, local02
1f780     10 1A 06 F1 | 	add	arg05, #16
1f784     02 1A 66 F0 | 	shl	arg05, #2
1f788     14 E4 05 F1 | 	add	objptr, #20
1f78c     F2 16 02 FB | 	rdlong	arg03, objptr
1f790     0B 1B 02 FD | 	qmul	arg05, arg03
1f794                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f794     F6 03 00 FF 
1f798     00 12 06 F6 | 	mov	arg01, ##519168
1f79c     12 13 82 F1 | 	sub	arg01, local04
1f7a0     02 16 66 F0 | 	shl	arg03, #2
1f7a4     0A 00 00 FF 
1f7a8     DB E5 05 F1 | 	add	objptr, ##5595
1f7ac     18 24 62 FD | 	getqx	local04
1f7b0     12 15 02 F1 | 	add	arg02, local04
1f7b4     E0 05 B0 FD | 	call	#_psram_spin2_write
1f7b8     0B 00 00 FF 
1f7bc     CC E4 85 F1 | 	sub	objptr, ##5836
1f7c0     13 21 02 F1 | 	add	local02, local05
1f7c4     11 21 0A F2 | 	cmp	local02, local03 wz
1f7c8     54 FF 9F 5D |  if_ne	jmp	#LR__2580
1f7cc                 | ' 
1f7cc                 | ' repeat i from (start*16)+4 to (start*16)+19
1f7cc     0F 21 02 F6 | 	mov	local02, local01
1f7d0     04 20 66 F0 | 	shl	local02, #4
1f7d4     04 20 06 F1 | 	add	local02, #4
1f7d8     0F 27 02 F6 | 	mov	local05, local01
1f7dc     04 26 66 F0 | 	shl	local05, #4
1f7e0     13 26 06 F1 | 	add	local05, #19
1f7e4     0F 25 02 F6 | 	mov	local04, local01
1f7e8     04 24 66 F0 | 	shl	local04, #4
1f7ec     04 24 06 F1 | 	add	local04, #4
1f7f0     12 27 52 F2 | 	cmps	local05, local04 wc
1f7f4     01 24 86 F6 | 	negc	local04, #1
1f7f8     12 23 02 F6 | 	mov	local03, local04
1f7fc     12 27 02 F1 | 	add	local05, local04
1f800                 | LR__2581
1f800                 | '    fastline(0,1023,i,write_background)    
1f800     45 E4 05 F1 | 	add	objptr, #69
1f804     F2 18 02 FB | 	rdlong	arg04, objptr
1f808     45 E4 85 F1 | 	sub	objptr, #69
1f80c     00 12 06 F6 | 	mov	arg01, #0
1f810     09 14 CE F9 | 	bmask	arg02, #9
1f814     10 17 02 F6 | 	mov	arg03, local02
1f818     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f81c     11 21 02 F1 | 	add	local02, local03
1f820     13 21 0A F2 | 	cmp	local02, local05 wz
1f824     D8 FF 9F 5D |  if_ne	jmp	#LR__2581
1f828                 | '    
1f828                 | ' repeat i from 35 to start
1f828     23 20 06 F6 | 	mov	local02, #35
1f82c     23 1E 56 F2 | 	cmps	local01, #35 wc
1f830     01 24 86 F6 | 	negc	local04, #1
1f834     0F 27 02 F6 | 	mov	local05, local01
1f838     12 27 02 F1 | 	add	local05, local04
1f83c                 | LR__2582
1f83c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f83c     F6 03 00 FF 
1f840     00 12 06 F6 | 	mov	arg01, ##519168
1f844     F9 E4 05 F1 | 	add	objptr, #249
1f848     F2 22 02 FB | 	rdlong	local03, objptr
1f84c     11 13 82 F1 | 	sub	arg01, local03
1f850     F5 E4 85 F1 | 	sub	objptr, #245
1f854     F2 14 02 FB | 	rdlong	arg02, objptr
1f858     10 23 02 F6 | 	mov	local03, local02
1f85c     07 22 66 F0 | 	shl	local03, #7
1f860     11 15 02 F1 | 	add	arg02, local03
1f864     80 16 06 F6 | 	mov	arg03, #128
1f868     0B 00 00 FF 
1f86c     C8 E4 05 F1 | 	add	objptr, ##5832
1f870     88 04 B0 FD | 	call	#_psram_spin2_read1
1f874                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1f874     F6 03 00 FF 
1f878     00 12 06 F6 | 	mov	arg01, ##519168
1f87c     0A 00 00 FF 
1f880     D3 E5 85 F1 | 	sub	objptr, ##5587
1f884     F2 22 02 FB | 	rdlong	local03, objptr
1f888     11 13 82 F1 | 	sub	arg01, local03
1f88c     F5 E4 85 F1 | 	sub	objptr, #245
1f890     F2 14 02 FB | 	rdlong	arg02, objptr
1f894     10 23 02 F6 | 	mov	local03, local02
1f898     01 22 06 F1 | 	add	local03, #1
1f89c     07 22 66 F0 | 	shl	local03, #7
1f8a0     11 15 02 F1 | 	add	arg02, local03
1f8a4     80 16 06 F6 | 	mov	arg03, #128
1f8a8     0B 00 00 FF 
1f8ac     C8 E4 05 F1 | 	add	objptr, ##5832
1f8b0     E4 04 B0 FD | 	call	#_psram_spin2_write
1f8b4     0B 00 00 FF 
1f8b8     CC E4 85 F1 | 	sub	objptr, ##5836
1f8bc     12 21 02 F1 | 	add	local02, local04
1f8c0     13 21 0A F2 | 	cmp	local02, local05 wz
1f8c4     74 FF 9F 5D |  if_ne	jmp	#LR__2582
1f8c8                 | ' repeat i from 0 to 127
1f8c8     00 20 06 F6 | 	mov	local02, #0
1f8cc                 | LR__2583
1f8cc                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1f8cc     04 E4 05 F1 | 	add	objptr, #4
1f8d0     F2 12 02 FB | 	rdlong	arg01, objptr
1f8d4     0F 27 02 F6 | 	mov	local05, local01
1f8d8     07 26 66 F0 | 	shl	local05, #7
1f8dc     13 13 02 F1 | 	add	arg01, local05
1f8e0     10 13 02 F1 | 	add	arg01, local02
1f8e4     20 14 06 F6 | 	mov	arg02, #32
1f8e8     01 16 06 F6 | 	mov	arg03, #1
1f8ec     00 18 06 F6 | 	mov	arg04, #0
1f8f0     01 1A 06 F6 | 	mov	arg05, #1
1f8f4     0B 00 00 FF 
1f8f8     C8 E4 05 F1 | 	add	objptr, ##5832
1f8fc     34 05 B0 FD | 	call	#_psram_spin2_fill
1f900     0B 00 00 FF 
1f904     CC E4 85 F1 | 	sub	objptr, ##5836
1f908     01 20 06 F1 | 	add	local02, #1
1f90c     80 20 56 F2 | 	cmps	local02, #128 wc
1f910     B8 FF 9F CD |  if_b	jmp	#LR__2583
1f914     A7 F0 03 F6 | 	mov	ptra, fp
1f918     B2 00 A0 FD | 	call	#popregs_
1f91c                 | _hg010b_spin2_scrolldown_ret
1f91c     2D 00 64 FD | 	ret
1f920                 | 
1f920                 | ' 
1f920                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1f920                 | ' 
1f920                 | ' pub crlf()
1f920                 | _hg010b_spin2_crlf
1f920                 | ' 
1f920                 | ' cursor_x:=leading_spaces*2
1f920     01 00 00 FF 
1f924     B6 E4 05 F1 | 	add	objptr, ##694
1f928     F2 16 02 FB | 	rdlong	arg03, objptr
1f92c     01 16 66 F0 | 	shl	arg03, #1
1f930     01 00 00 FF 
1f934     7A E4 85 F1 | 	sub	objptr, ##634
1f938     F2 16 52 FC | 	wrword	arg03, objptr
1f93c                 | ' cursor_y+=1
1f93c     02 E4 05 F1 | 	add	objptr, #2
1f940     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f944     01 16 06 F1 | 	add	arg03, #1
1f948     F2 16 42 FC | 	wrbyte	arg03, objptr
1f94c                 | ' if cursor_y>st_lines-1
1f94c     C3 E4 05 F1 | 	add	objptr, #195
1f950     F2 16 02 FB | 	rdlong	arg03, objptr
1f954     01 16 86 F1 | 	sub	arg03, #1
1f958     C3 E4 85 F1 | 	sub	objptr, #195
1f95c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f960     3E E4 85 F1 | 	sub	objptr, #62
1f964     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1f968     2C 00 90 ED |  if_be	jmp	#LR__2590
1f96c                 | '   scrollup2()
1f96c     00 12 06 F6 | 	mov	arg01, #0
1f970     01 00 00 FF 
1f974     58 14 06 F6 | 	mov	arg02, ##600
1f978     10 16 06 F6 | 	mov	arg03, #16
1f97c     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1f980                 | '   cursor_y:=st_lines-1
1f980     01 E5 05 F1 | 	add	objptr, #257
1f984     F2 16 02 FB | 	rdlong	arg03, objptr
1f988     01 16 86 F1 | 	sub	arg03, #1
1f98c     C3 E4 85 F1 | 	sub	objptr, #195
1f990     F2 16 42 FC | 	wrbyte	arg03, objptr
1f994     3E E4 85 F1 | 	sub	objptr, #62
1f998                 | LR__2590
1f998                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1f998     3C E4 05 F1 | 	add	objptr, #60
1f99c     F2 14 E2 FA | 	rdword	arg02, objptr
1f9a0     02 14 66 F0 | 	shl	arg02, #2
1f9a4     02 E4 05 F1 | 	add	objptr, #2
1f9a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f9ac     3E E4 85 F1 | 	sub	objptr, #62
1f9b0     04 16 66 F0 | 	shl	arg03, #4
1f9b4     04 16 06 F1 | 	add	arg03, #4
1f9b8     11 12 06 F6 | 	mov	arg01, #17
1f9bc     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1f9c0                 | _hg010b_spin2_crlf_ret
1f9c0     2D 00 64 FD | 	ret
1f9c4                 | 
1f9c4                 | ' 
1f9c4                 | ' 
1f9c4                 | ' '*************************************************************************
1f9c4                 | ' '                                                                        *
1f9c4                 | ' '  Conversions                                                           *
1f9c4                 | ' '                                                                        *
1f9c4                 | ' '*************************************************************************
1f9c4                 | ' 
1f9c4                 | ' ''---------- Convert a integer to dec string, return a pointer
1f9c4                 | ' 
1f9c4                 | ' pub inttostr(i):result |q,pos,k,j
1f9c4                 | _hg010b_spin2_inttostr
1f9c4     03 4A 05 F6 | 	mov	COUNT_, #3
1f9c8     A8 00 A0 FD | 	call	#pushregs_
1f9cc     09 1F 0A F6 | 	mov	local01, arg01 wz
1f9d0                 | ' 
1f9d0                 | ' j:=i
1f9d0                 | ' pos:=10
1f9d0     0A 20 06 F6 | 	mov	local02, #10
1f9d4                 | ' k:=0
1f9d4     00 22 06 F6 | 	mov	local03, #0
1f9d8                 | ' 
1f9d8                 | ' if (j==0)
1f9d8     18 00 90 5D |  if_ne	jmp	#LR__2600
1f9dc                 | '   n_string[0]:=48
1f9dc     4D E4 05 F1 | 	add	objptr, #77
1f9e0     F2 60 48 FC | 	wrbyte	#48, objptr
1f9e4                 | '   n_string[1]:=0
1f9e4     01 E4 05 F1 | 	add	objptr, #1
1f9e8     F2 00 48 FC | 	wrbyte	#0, objptr
1f9ec     4E E4 85 F1 | 	sub	objptr, #78
1f9f0     C4 00 90 FD | 	jmp	#LR__2607
1f9f4                 | LR__2600
1f9f4                 | ' 
1f9f4                 | ' else
1f9f4                 | '   if (j<0)
1f9f4     0F 1F 52 F6 | 	abs	local01, local01 wc
1f9f8                 | '     j:=0-j
1f9f8                 | '     k:=45
1f9f8     2D 22 06 C6 |  if_b	mov	local03, #45
1f9fc                 | ' 
1f9fc                 | '   n_string[11]:=0
1f9fc     58 E4 05 F1 | 	add	objptr, #88
1fa00     F2 00 48 FC | 	wrbyte	#0, objptr
1fa04     58 E4 85 F1 | 	sub	objptr, #88
1fa08     97 24 48 FB | 	callpa	#(@LR__2602-@LR__2601)>>2,fcache_load_ptr_
1fa0c                 | '   repeat while (pos>-1)
1fa0c                 | LR__2601
1fa0c     00 20 56 F2 | 	cmps	local02, #0 wc
1fa10     40 00 90 CD |  if_b	jmp	#LR__2603
1fa14     0F FB 51 F6 | 	abs	result1, local01 wc
1fa18     0A FA 15 FD | 	qdiv	result1, #10
1fa1c                 | '     q:=j//10
1fa1c     19 FA 61 FD | 	getqy	result1
1fa20     FD FA 81 F6 | 	negc	result1, result1
1fa24     0F 1F 52 F6 | 	abs	local01, local01 wc
1fa28     0A 1E 16 FD | 	qdiv	local01, #10
1fa2c                 | '     q:=48+q
1fa2c     30 FA 05 F1 | 	add	result1, #48
1fa30                 | '     n_string[pos]:=q
1fa30     10 1F 02 F6 | 	mov	local01, local02
1fa34     4D E4 05 F1 | 	add	objptr, #77
1fa38     F2 1E 02 F1 | 	add	local01, objptr
1fa3c     0F FB 41 FC | 	wrbyte	result1, local01
1fa40                 | '     j:=j/10
1fa40     4D E4 85 F1 | 	sub	objptr, #77
1fa44                 | '     pos-=1
1fa44     01 20 86 F1 | 	sub	local02, #1
1fa48     18 1E 62 FD | 	getqx	local01
1fa4c     0F 1F 82 F6 | 	negc	local01, local01
1fa50     B8 FF 9F FD | 	jmp	#LR__2601
1fa54                 | LR__2602
1fa54                 | LR__2603
1fa54                 | '   repeat while n_string[0]==48
1fa54                 | LR__2604
1fa54     4D E4 05 F1 | 	add	objptr, #77
1fa58     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fa5c     4D E4 85 F1 | 	sub	objptr, #77
1fa60     30 16 0E F2 | 	cmp	arg03, #48 wz
1fa64     20 00 90 5D |  if_ne	jmp	#LR__2605
1fa68                 | '     bytemove(@n_string,@n_string+1,12)
1fa68     4D E4 05 F1 | 	add	objptr, #77
1fa6c     F2 12 02 F6 | 	mov	arg01, objptr
1fa70     F2 14 02 F6 | 	mov	arg02, objptr
1fa74     4D E4 85 F1 | 	sub	objptr, #77
1fa78     01 14 06 F1 | 	add	arg02, #1
1fa7c     0C 16 06 F6 | 	mov	arg03, #12
1fa80     D8 0D B0 FD | 	call	#__system____builtin_memmove
1fa84     CC FF 9F FD | 	jmp	#LR__2604
1fa88                 | LR__2605
1fa88                 | ' 
1fa88                 | '   if k==45
1fa88     2D 22 0E F2 | 	cmp	local03, #45 wz
1fa8c     28 00 90 5D |  if_ne	jmp	#LR__2606
1fa90                 | '      bytemove(@n_string+1,@n_string,12)
1fa90     4D E4 05 F1 | 	add	objptr, #77
1fa94     F2 12 02 F6 | 	mov	arg01, objptr
1fa98     01 12 06 F1 | 	add	arg01, #1
1fa9c     F2 14 02 F6 | 	mov	arg02, objptr
1faa0     4D E4 85 F1 | 	sub	objptr, #77
1faa4     0C 16 06 F6 | 	mov	arg03, #12
1faa8     B0 0D B0 FD | 	call	#__system____builtin_memmove
1faac                 | '      n_string[0]:=k
1faac     4D E4 05 F1 | 	add	objptr, #77
1fab0     F2 22 42 FC | 	wrbyte	local03, objptr
1fab4     4D E4 85 F1 | 	sub	objptr, #77
1fab8                 | LR__2606
1fab8                 | LR__2607
1fab8                 | ' 
1fab8                 | ' q:=@n_string
1fab8     4D E4 05 F1 | 	add	objptr, #77
1fabc     F2 FA 01 F6 | 	mov	result1, objptr
1fac0     4D E4 85 F1 | 	sub	objptr, #77
1fac4                 | ' return q
1fac4     A7 F0 03 F6 | 	mov	ptra, fp
1fac8     B2 00 A0 FD | 	call	#popregs_
1facc                 | _hg010b_spin2_inttostr_ret
1facc     2D 00 64 FD | 	ret
1fad0                 | 
1fad0                 | ' 
1fad0                 | ' '..............................................................................
1fad0                 | ' 
1fad0                 | ' {{
1fad0                 | ' }}
1fad0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1fad0                 | _psram_spin2_startx
1fad0     04 4A 05 F6 | 	mov	COUNT_, #4
1fad4     A8 00 A0 FD | 	call	#pushregs_
1fad8     09 1F 02 F6 | 	mov	local01, arg01
1fadc     0B 21 02 F6 | 	mov	local02, arg03
1fae0     0C 23 02 F6 | 	mov	local03, arg04
1fae4                 | '     stop() ' restart driver if required
1fae4     54 01 B0 FD | 	call	#_psram_spin2_stop
1fae8     00 1E 0E F2 | 	cmp	local01, #0 wz
1faec     14 1E 06 AB |  if_e	rdlong	local01, #20
1faf0     0F 15 52 F6 | 	abs	arg02, local01 wc
1faf4     A1 07 00 FF 
1faf8     40 14 16 FD | 	qdiv	arg02, ##1000000
1fafc                 | ' 
1fafc                 | '     ' use current frequency if none specified
1fafc                 | ' 
1fafc                 | '     if freq == 0 
1fafc                 | '         freq := clkfreq 
1fafc                 | ' 
1fafc                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fafc                 | ' 
1fafc                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fafc                 | '     if burst < 0
1fafc                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fafc     18 14 62 FD | 	getqx	arg02
1fb00     0A 19 82 F6 | 	negc	arg04, arg02
1fb04     03 18 66 F0 | 	shl	arg04, #3
1fb08     84 18 86 F1 | 	sub	arg04, #132
1fb0c     04 18 46 F0 | 	shr	arg04, #4
1fb10     04 18 66 F0 | 	shl	arg04, #4
1fb14     00 18 56 F2 | 	cmps	arg04, #0 wc
1fb18     0E FA 65 C6 |  if_b	neg	result1, #14
1fb1c     10 01 90 CD |  if_b	jmp	#LR__2613
1fb20                 | ' 
1fb20                 | '     ' compute the input delay
1fb20                 | ' 
1fb20                 | '     if delay <= 0
1fb20     01 20 56 F2 | 	cmps	local02, #1 wc
1fb24     10 00 90 3D |  if_ae	jmp	#LR__2610
1fb28                 | '         delay := lookupDelay(freq)
1fb28     0F 13 02 F6 | 	mov	arg01, local01
1fb2c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fb30     FD 20 02 F6 | 	mov	local02, result1
1fb34     04 00 90 FD | 	jmp	#LR__2611
1fb38                 | LR__2610
1fb38                 | '     else
1fb38                 | '         delay <#= $f ' limit to 15
1fb38     0F 20 66 F3 | 	fles	local02, #15
1fb3c                 | LR__2611
1fb3c                 | ' 
1fb3c                 | '     ' create our lock
1fb3c                 | ' 
1fb3c                 | '     driverlock := LOCKNEW()  
1fb3c     00 FA 05 F6 | 	mov	result1, #0
1fb40     04 FA 61 FD | 	locknew	result1
1fb44     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fb48     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fb4c                 | '     if driverlock == -1
1fb4c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fb50     FF FF 7F FF 
1fb54     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fb58                 | '         return ERR_NO_LOCK
1fb58     1A FA 65 A6 |  if_e	neg	result1, #26
1fb5c     D0 00 90 AD |  if_e	jmp	#LR__2613
1fb60                 | ' 
1fb60                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fb60                 | ' 
1fb60                 | '     long[@startupData][0]:=clkfreq
1fb60     14 1E 06 FB | 	rdlong	local01, #20
1fb64     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fb68     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fb6c                 | ' '    long[@startupData][1]:=$1000_0000
1fb6c                 | '     long[@startupData][5]:=@deviceData
1fb6c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fb70     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fb74     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fb78     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fb7c     14 14 06 F1 | 	add	arg02, #20
1fb80     0A 1F 62 FC | 	wrlong	local01, arg02
1fb84                 | '     long[@startupData][6]:=@qosData
1fb84     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fb88     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fb8c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fb90     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fb94     18 14 06 F1 | 	add	arg02, #24
1fb98     0A 1F 62 FC | 	wrlong	local01, arg02
1fb9c                 | '     long[@startupData][7]:=$7FF00
1fb9c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fba0     1C 1E 06 F1 | 	add	local01, #28
1fba4     FF 03 80 FF 
1fba8     0F 01 6A FC | 	wrlong	##524032, local01
1fbac                 | ' 
1fbac                 | '     ' setup some default bank and QoS parameter values
1fbac                 | ' 
1fbac                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fbac     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fbb0     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fbb4     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fbb8     10 18 66 F0 | 	shl	arg04, #16
1fbbc     0C 20 66 F0 | 	shl	local02, #12
1fbc0     10 19 42 F5 | 	or	arg04, local02
1fbc4     18 18 46 F5 | 	or	arg04, #24
1fbc8     0C 15 02 F6 | 	mov	arg02, arg04
1fbcc     02 16 06 F6 | 	mov	arg03, #2
1fbd0     A0 00 A0 FD | 	call	#\builtin_longfill_
1fbd4                 | '     longfill(@qosData, $FFFF0000, 8)
1fbd4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fbd8     07 16 06 F6 | 	mov	arg03, #7
1fbdc     28 16 62 FD | 	setq	arg03
1fbe0     80 FF FF FF 
1fbe4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fbe8                 | ' 
1fbe8                 | '     ' get the address of the PSRAM memory driver so we can start it
1fbe8                 | ' 
1fbe8                 | '     driverAddr:= driver.getDriverAddr()
1fbe8                 | '     return @driver_start
1fbe8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fbec     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fbf0     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fbf4                 | ' 
1fbf4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fbf4                 | ' 
1fbf4                 | '     if desiredcog < 0
1fbf4     00 22 56 F2 | 	cmps	local03, #0 wc
1fbf8                 | '         desiredcog := NEWCOG
1fbf8     10 22 06 C6 |  if_b	mov	local03, #16
1fbfc                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fbfc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fc00     11 25 02 F6 | 	mov	local04, local03
1fc04     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fc08     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fc0c     01 24 66 C6 |  if_b	neg	local04, #1
1fc10     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fc14     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fc18                 | '     repeat until long[@startupData] == 0 
1fc18     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fc1c                 | LR__2612
1fc1c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fc20     F8 FF 9F 5D |  if_ne	jmp	#LR__2612
1fc24                 | ' 
1fc24                 | '     return drivercog
1fc24     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fc28     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fc2c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc30                 | LR__2613
1fc30     A7 F0 03 F6 | 	mov	ptra, fp
1fc34     B2 00 A0 FD | 	call	#popregs_
1fc38                 | _psram_spin2_startx_ret
1fc38     2D 00 64 FD | 	ret
1fc3c                 | 
1fc3c                 | ' 
1fc3c                 | ' '..............................................................................
1fc3c                 | ' 
1fc3c                 | ' {{
1fc3c                 | ' }}
1fc3c                 | ' PUB stop() : i
1fc3c                 | _psram_spin2_stop
1fc3c     00 00 06 F6 | 	mov	_var01, #0
1fc40                 | '     if drivercog <> -1
1fc40     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc44     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fc48     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc4c     FF FF 7F FF 
1fc50     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fc54     70 00 90 AD |  if_e	jmp	#LR__2623
1fc58                 | '         cogstop(drivercog) ' a rather brutal stop
1fc58     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc5c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fc60     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc64     03 12 62 FD | 	cogstop	arg01
1fc68     97 26 48 FB | 	callpa	#(@LR__2622-@LR__2620)>>2,fcache_load_ptr_
1fc6c                 | '         repeat i from 0 to 7
1fc6c                 | LR__2620
1fc6c                 | '             if long[$7FF00][i*3] < 0
1fc6c     00 FB 01 F6 | 	mov	result1, _var01
1fc70     01 FA 65 F0 | 	shl	result1, #1
1fc74     00 FB 01 F1 | 	add	result1, _var01
1fc78     02 FA 65 F0 | 	shl	result1, #2
1fc7c     FF 03 00 FF 
1fc80     00 FB 05 F1 | 	add	result1, ##524032
1fc84     FD FA 01 FB | 	rdlong	result1, result1
1fc88     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc8c     1C 00 90 3D |  if_ae	jmp	#LR__2621
1fc90                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fc90     00 FB 01 F6 | 	mov	result1, _var01
1fc94     01 FA 65 F0 | 	shl	result1, #1
1fc98     00 FB 01 F1 | 	add	result1, _var01
1fc9c     02 FA 65 F0 | 	shl	result1, #2
1fca0     FF 03 00 FF 
1fca4     00 FB 05 F1 | 	add	result1, ##524032
1fca8     FD 20 68 FC | 	wrlong	#16, result1
1fcac                 | LR__2621
1fcac     01 00 06 F1 | 	add	_var01, #1
1fcb0     08 00 56 F2 | 	cmps	_var01, #8 wc
1fcb4     B4 FF 9F CD |  if_b	jmp	#LR__2620
1fcb8                 | LR__2622
1fcb8                 | '         drivercog := -1
1fcb8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fcbc     FF FF FF FF 
1fcc0     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fcc4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fcc8                 | LR__2623
1fcc8                 | '     if driverlock <> -1
1fcc8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fccc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fcd0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fcd4     FF FF 7F FF 
1fcd8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fcdc                 | '         LOCKRET(driverlock)
1fcdc     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fce0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fce4     05 12 62 5D |  if_ne	lockret	arg01
1fce8                 | '         driverlock := -1
1fce8     FF FF FF 5F 
1fcec     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fcf0     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fcf4     00 FB 01 F6 | 	mov	result1, _var01
1fcf8                 | _psram_spin2_stop_ret
1fcf8     2D 00 64 FD | 	ret
1fcfc                 | 
1fcfc                 | ' 
1fcfc                 | ' '..............................................................................
1fcfc                 | ' 
1fcfc                 | ' {{
1fcfc                 | ' }}
1fcfc                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fcfc                 | _psram_spin2_read1
1fcfc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fcfc                 | '     if drivercog == -1 ' driver must be running
1fcfc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd00     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fd04     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd08     FF FF 7F FF 
1fd0c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fd10                 | '         return ERR_INACTIVE
1fd10     0F FA 65 A6 |  if_e	neg	result1, #15
1fd14     7C 00 90 AD |  if_e	jmp	#LR__2631
1fd18                 | '     if count == 0 ' don't even bother reading
1fd18     00 16 0E F2 | 	cmp	arg03, #0 wz
1fd1c                 | '         return 0
1fd1c     00 FA 05 A6 |  if_e	mov	result1, #0
1fd20     70 00 90 AD |  if_e	jmp	#LR__2631
1fd24                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fd24     00 FA 05 F6 | 	mov	result1, #0
1fd28     01 FA 61 FD | 	cogid	result1
1fd2c     FD 00 02 F6 | 	mov	_var01, result1
1fd30     01 00 66 F0 | 	shl	_var01, #1
1fd34     FD 00 02 F1 | 	add	_var01, result1
1fd38     02 00 66 F0 | 	shl	_var01, #2
1fd3c     FF 03 00 FF 
1fd40     00 03 06 F6 | 	mov	_var02, ##524032
1fd44     00 03 02 F1 | 	add	_var02, _var01
1fd48                 | '     if long[mailbox] < 0
1fd48     01 01 02 FB | 	rdlong	_var01, _var02
1fd4c     00 00 56 F2 | 	cmps	_var01, #0 wc
1fd50                 | '         return ERR_MAILBOX_BUSY
1fd50     1C FA 65 C6 |  if_b	neg	result1, #28
1fd54     3C 00 90 CD |  if_b	jmp	#LR__2631
1fd58                 | '     long[mailbox][2] := count
1fd58     08 02 06 F1 | 	add	_var02, #8
1fd5c     01 17 62 FC | 	wrlong	arg03, _var02
1fd60                 | '     long[mailbox][1] := dstHubAddr
1fd60     04 02 86 F1 | 	sub	_var02, #4
1fd64     01 13 62 FC | 	wrlong	arg01, _var02
1fd68     04 02 86 F1 | 	sub	_var02, #4
1fd6c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fd6c     0A 05 02 F6 | 	mov	_var03, arg02
1fd70     D9 04 06 F4 | 	bitl	_var03, #217
1fd74     00 00 58 FF 
1fd78     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fd7c     02 01 02 F1 | 	add	_var01, _var03
1fd80     01 01 62 FC | 	wrlong	_var01, _var02
1fd84                 | '     repeat
1fd84                 | LR__2630
1fd84                 | '         result := long[mailbox]    
1fd84     01 05 02 FB | 	rdlong	_var03, _var02
1fd88     00 04 56 F2 | 	cmps	_var03, #0 wc
1fd8c     F4 FF 9F CD |  if_b	jmp	#LR__2630
1fd90                 | '     while result < 0   
1fd90                 | '     return -result                       'return success or error
1fd90     02 FB 61 F6 | 	neg	result1, _var03
1fd94                 | LR__2631
1fd94                 | _psram_spin2_read1_ret
1fd94     2D 00 64 FD | 	ret
1fd98                 | 
1fd98                 | ' 
1fd98                 | ' '..............................................................................
1fd98                 | ' 
1fd98                 | ' {{
1fd98                 | ' }}
1fd98                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fd98                 | _psram_spin2_write
1fd98                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fd98                 | '     if drivercog == -1 ' driver must be running
1fd98     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd9c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fda0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fda4     FF FF 7F FF 
1fda8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fdac                 | '         return ERR_INACTIVE
1fdac     0F FA 65 A6 |  if_e	neg	result1, #15
1fdb0     7C 00 90 AD |  if_e	jmp	#LR__2641
1fdb4                 | '     if count == 0 ' don't even bother writing
1fdb4     00 16 0E F2 | 	cmp	arg03, #0 wz
1fdb8                 | '         return 0
1fdb8     00 FA 05 A6 |  if_e	mov	result1, #0
1fdbc     70 00 90 AD |  if_e	jmp	#LR__2641
1fdc0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fdc0     00 FA 05 F6 | 	mov	result1, #0
1fdc4     01 FA 61 FD | 	cogid	result1
1fdc8     FD 00 02 F6 | 	mov	_var01, result1
1fdcc     01 00 66 F0 | 	shl	_var01, #1
1fdd0     FD 00 02 F1 | 	add	_var01, result1
1fdd4     02 00 66 F0 | 	shl	_var01, #2
1fdd8     FF 03 00 FF 
1fddc     00 03 06 F6 | 	mov	_var02, ##524032
1fde0     00 03 02 F1 | 	add	_var02, _var01
1fde4                 | '     if long[mailbox] < 0
1fde4     01 01 02 FB | 	rdlong	_var01, _var02
1fde8     00 00 56 F2 | 	cmps	_var01, #0 wc
1fdec                 | '         return ERR_MAILBOX_BUSY
1fdec     1C FA 65 C6 |  if_b	neg	result1, #28
1fdf0     3C 00 90 CD |  if_b	jmp	#LR__2641
1fdf4                 | '     long[mailbox][2] := count
1fdf4     08 02 06 F1 | 	add	_var02, #8
1fdf8     01 17 62 FC | 	wrlong	arg03, _var02
1fdfc                 | '     long[mailbox][1] := srcHubAddr
1fdfc     04 02 86 F1 | 	sub	_var02, #4
1fe00     01 13 62 FC | 	wrlong	arg01, _var02
1fe04     04 02 86 F1 | 	sub	_var02, #4
1fe08                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fe08     0A 05 02 F6 | 	mov	_var03, arg02
1fe0c     D9 04 06 F4 | 	bitl	_var03, #217
1fe10     00 00 78 FF 
1fe14     00 00 06 F6 | 	mov	_var01, ##-268435456
1fe18     02 01 02 F1 | 	add	_var01, _var03
1fe1c     01 01 62 FC | 	wrlong	_var01, _var02
1fe20                 | '     repeat
1fe20                 | LR__2640
1fe20                 | '         result := long[mailbox]    
1fe20     01 05 02 FB | 	rdlong	_var03, _var02
1fe24     00 04 56 F2 | 	cmps	_var03, #0 wc
1fe28     F4 FF 9F CD |  if_b	jmp	#LR__2640
1fe2c                 | '     while result < 0   
1fe2c                 | '     return -result                       'return success or error
1fe2c     02 FB 61 F6 | 	neg	result1, _var03
1fe30                 | LR__2641
1fe30                 | _psram_spin2_write_ret
1fe30     2D 00 64 FD | 	ret
1fe34                 | 
1fe34                 | ' 
1fe34                 | ' ' generalized fill
1fe34                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fe34                 | _psram_spin2_fill
1fe34     09 01 02 F6 | 	mov	_var01, arg01
1fe38     0A 03 02 F6 | 	mov	_var02, arg02
1fe3c     0B 05 02 F6 | 	mov	_var03, arg03
1fe40     0D 07 02 F6 | 	mov	_var04, arg05
1fe44                 | '     case datasize 
1fe44     01 06 86 F1 | 	sub	_var04, #1
1fe48     04 06 26 F3 | 	fle	_var04, #4
1fe4c     30 06 62 FD | 	jmprel	_var04
1fe50                 | LR__2650
1fe50     10 00 90 FD | 	jmp	#LR__2651
1fe54     18 00 90 FD | 	jmp	#LR__2652
1fe58     2C 00 90 FD | 	jmp	#LR__2654
1fe5c     1C 00 90 FD | 	jmp	#LR__2653
1fe60     24 00 90 FD | 	jmp	#LR__2654
1fe64                 | LR__2651
1fe64                 | '         1: req := driver.R_WRITEBYTE
1fe64     00 00 60 FF 
1fe68     00 08 06 F6 | 	mov	_var05, ##-1073741824
1fe6c     20 00 90 FD | 	jmp	#LR__2655
1fe70                 | LR__2652
1fe70                 | '         2: req := driver.R_WRITEWORD
1fe70     00 00 68 FF 
1fe74     00 08 06 F6 | 	mov	_var05, ##-805306368
1fe78     14 00 90 FD | 	jmp	#LR__2655
1fe7c                 | LR__2653
1fe7c                 | '         4: req := driver.R_WRITELONG
1fe7c     00 00 70 FF 
1fe80     00 08 06 F6 | 	mov	_var05, ##-536870912
1fe84     08 00 90 FD | 	jmp	#LR__2655
1fe88                 | LR__2654
1fe88                 | '         other : return ERR_INVALID
1fe88     06 FA 65 F6 | 	neg	result1, #6
1fe8c     94 00 90 FD | 	jmp	#LR__2657
1fe90                 | LR__2655
1fe90                 | '     if count == 0   ' nothing to do
1fe90     00 04 0E F2 | 	cmp	_var03, #0 wz
1fe94                 | '         return 0
1fe94     00 FA 05 A6 |  if_e	mov	result1, #0
1fe98     88 00 90 AD |  if_e	jmp	#LR__2657
1fe9c                 | '     if drivercog == -1
1fe9c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fea0     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1fea4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fea8     FF FF 7F FF 
1feac     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1feb0                 | '         return ERR_INACTIVE
1feb0     0F FA 65 A6 |  if_e	neg	result1, #15
1feb4     6C 00 90 AD |  if_e	jmp	#LR__2657
1feb8                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1feb8     00 FA 05 F6 | 	mov	result1, #0
1febc     01 FA 61 FD | 	cogid	result1
1fec0     FD 06 02 F6 | 	mov	_var04, result1
1fec4     01 06 66 F0 | 	shl	_var04, #1
1fec8     FD 06 02 F1 | 	add	_var04, result1
1fecc     02 06 66 F0 | 	shl	_var04, #2
1fed0     FF 03 00 FF 
1fed4     00 0B 06 F6 | 	mov	_var06, ##524032
1fed8     03 0B 02 F1 | 	add	_var06, _var04
1fedc                 | '     if long[mailbox] < 0
1fedc     05 07 02 FB | 	rdlong	_var04, _var06
1fee0     00 06 56 F2 | 	cmps	_var04, #0 wc
1fee4                 | '         return ERR_MAILBOX_BUSY
1fee4     1C FA 65 C6 |  if_b	neg	result1, #28
1fee8     38 00 90 CD |  if_b	jmp	#LR__2657
1feec                 | '     long[mailbox][2] := count
1feec     08 0A 06 F1 | 	add	_var06, #8
1fef0     05 05 62 FC | 	wrlong	_var03, _var06
1fef4                 | '     long[mailbox][1] := pattern
1fef4     04 0A 86 F1 | 	sub	_var06, #4
1fef8     05 03 62 FC | 	wrlong	_var02, _var06
1fefc     04 0A 86 F1 | 	sub	_var06, #4
1ff00                 | '     long[mailbox] := req + (addr & $1ffffff)
1ff00     04 0D 02 F6 | 	mov	_var07, _var05
1ff04     00 0F 02 F6 | 	mov	_var08, _var01
1ff08     D9 0E 06 F4 | 	bitl	_var08, #217
1ff0c     07 0D 02 F1 | 	add	_var07, _var08
1ff10     05 0D 62 FC | 	wrlong	_var07, _var06
1ff14                 | '     repeat
1ff14                 | LR__2656
1ff14                 | '         r := long[mailbox]
1ff14     05 0F 02 FB | 	rdlong	_var08, _var06
1ff18     00 0E 56 F2 | 	cmps	_var08, #0 wc
1ff1c     F4 FF 9F CD |  if_b	jmp	#LR__2656
1ff20                 | '     while r < 0
1ff20                 | '     return -r                  ' return 0 for success or negated error code
1ff20     07 FB 61 F6 | 	neg	result1, _var08
1ff24                 | LR__2657
1ff24                 | _psram_spin2_fill_ret
1ff24     2D 00 64 FD | 	ret
1ff28                 | 
1ff28                 | ' 
1ff28                 | ' '..............................................................................
1ff28                 | ' 
1ff28                 | ' {{
1ff28                 | ' }}
1ff28                 | ' PUB setQos(cog, qos) : result | mailbox
1ff28                 | _psram_spin2_setQos
1ff28     09 01 02 F6 | 	mov	_var01, arg01
1ff2c                 | '     if drivercog == -1 ' driver must be running
1ff2c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff30     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1ff34     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff38     FF FF 7F FF 
1ff3c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1ff40                 | '         return ERR_INACTIVE
1ff40     0F FA 65 A6 |  if_e	neg	result1, #15
1ff44     9C 00 90 AD |  if_e	jmp	#LR__2664
1ff48                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1ff48     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff4c     08 00 90 CD |  if_b	jmp	#LR__2660
1ff50     08 00 56 F2 | 	cmps	_var01, #8 wc
1ff54     08 00 90 CD |  if_b	jmp	#LR__2661
1ff58                 | LR__2660
1ff58                 | '         return ERR_INVALID
1ff58     06 FA 65 F6 | 	neg	result1, #6
1ff5c     84 00 90 FD | 	jmp	#LR__2664
1ff60                 | LR__2661
1ff60                 | '     long[@qosData][cog] := qos & !$1ff
1ff60     FF 15 26 F5 | 	andn	arg02, #511
1ff64     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ff68     02 00 66 F0 | 	shl	_var01, #2
1ff6c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1ff70     00 15 62 FC | 	wrlong	arg02, _var01
1ff74                 | '     mailbox := $7FF00 + drivercog*12
1ff74     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1ff78     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1ff7c     02 07 02 F6 | 	mov	_var04, _var03
1ff80     01 06 66 F0 | 	shl	_var04, #1
1ff84     02 07 02 F1 | 	add	_var04, _var03
1ff88     02 06 66 F0 | 	shl	_var04, #2
1ff8c     FF 03 00 FF 
1ff90     00 09 06 F6 | 	mov	_var05, ##524032
1ff94     03 09 02 F1 | 	add	_var05, _var04
1ff98                 | '     repeat until LOCKTRY(driverlock)
1ff98     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1ff9c                 | LR__2662
1ff9c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ffa0     06 12 72 FD | 	locktry	arg01 wc
1ffa4     F4 FF 9F 3D |  if_ae	jmp	#LR__2662
1ffa8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ffac                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1ffac     00 06 06 F6 | 	mov	_var04, #0
1ffb0     01 06 62 FD | 	cogid	_var04
1ffb4     00 00 78 FF 
1ffb8     00 02 06 F6 | 	mov	_var02, ##-268435456
1ffbc     03 03 02 F1 | 	add	_var02, _var04
1ffc0     04 03 62 FC | 	wrlong	_var02, _var05
1ffc4                 | '     repeat while long[mailbox] < 0
1ffc4                 | LR__2663
1ffc4     04 03 02 FB | 	rdlong	_var02, _var05
1ffc8     00 02 56 F2 | 	cmps	_var02, #0 wc
1ffcc     F4 FF 9F CD |  if_b	jmp	#LR__2663
1ffd0                 | '     LOCKREL(driverlock)
1ffd0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1ffd4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ffd8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ffdc     07 12 72 FD | 	lockrel	arg01 wc
1ffe0     00 FA 05 F6 | 	mov	result1, #0
1ffe4                 | LR__2664
1ffe4                 | _psram_spin2_setQos_ret
1ffe4     2D 00 64 FD | 	ret
1ffe8                 | 
1ffe8                 | ' 
1ffe8                 | ' '..............................................................................
1ffe8                 | ' 
1ffe8                 | ' {{
1ffe8                 | ' }}
1ffe8                 | ' PRI lookupDelay(freq) : delay | profile
1ffe8                 | _psram_spin2_lookupDelay
1ffe8                 | '     profile := @delayTable
1ffe8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1ffec     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1fff0                 | '     delay := long[profile][0]
1fff0     00 03 02 FB | 	rdlong	_var02, _var01
1fff4                 | '     repeat while long[profile][1] 
1fff4     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1fff8     97 16 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
1fffc                 | LR__2670
1fffc     04 00 06 F1 | 	add	_var01, #4
20000     00 FB 09 FB | 	rdlong	result1, _var01 wz
20004     04 00 86 F1 | 	sub	_var01, #4
20008     1C 00 90 AD |  if_e	jmp	#LR__2672
2000c                 | '         if freq +< long[profile][1] 
2000c     04 00 06 F1 | 	add	_var01, #4
20010     00 FB 01 FB | 	rdlong	result1, _var01
20014     04 00 86 F1 | 	sub	_var01, #4
20018     FD 12 12 F2 | 	cmp	arg01, result1 wc
2001c                 | '             quit
2001c                 | '         profile += 4
2001c     04 00 06 31 |  if_ae	add	_var01, #4
20020                 | '         delay++
20020     01 02 06 31 |  if_ae	add	_var02, #1
20024     D4 FF 9F 3D |  if_ae	jmp	#LR__2670
20028                 | LR__2671
20028                 | LR__2672
20028     01 FB 01 F6 | 	mov	result1, _var02
2002c                 | _psram_spin2_lookupDelay_ret
2002c     2D 00 64 FD | 	ret
20030                 | 
20030                 | ' 
20030                 | ' PUB start() : r
20030                 | _usbnew_spin2_start
20030     00 00 06 F6 | 	mov	_var01, #0
20034                 | '   ifnot driver_cog
20034     15 00 00 FF 
20038     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
2003c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20040     15 00 00 FF 
20044     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
20048     38 00 90 5D |  if_ne	jmp	#LR__2680
2004c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
2004c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20050     10 00 06 F6 | 	mov	_var01, #16
20054     00 16 06 F6 | 	mov	arg03, #0
20058     28 16 62 FD | 	setq	arg03
2005c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
20060     01 00 66 C6 |  if_b	neg	_var01, #1
20064                 | '     if r >= 0
20064     00 00 56 F2 | 	cmps	_var01, #0 wc
20068                 | '       driver_cog := r+1
20068     00 03 02 36 |  if_ae	mov	_var02, _var01
2006c     01 02 06 31 |  if_ae	add	_var02, #1
20070     15 00 00 3F 
20074     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
20078     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
2007c     15 00 00 3F 
20080     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
20084                 | LR__2680
20084     00 FB 01 F6 | 	mov	result1, _var01
20088                 | _usbnew_spin2_start_ret
20088     2D 00 64 FD | 	ret
2008c                 | 
2008c                 | '     '' (Always enabled)
2008c                 | ' 
2008c                 | ' '' Get current pressed state of a keyboard key
2008c                 | ' PUB keystate(key) : r | buf[2],tmp
2008c                 | _usbnew_spin2_keystate
2008c     00 04 06 F6 | 	mov	_var03, #0
20090                 | '   if key >= $E0 && key < $E8
20090     E0 12 56 F2 | 	cmps	arg01, #224 wc
20094     34 00 90 CD |  if_b	jmp	#LR__2690
20098     E8 12 56 F2 | 	cmps	arg01, #232 wc
2009c     2C 00 90 3D |  if_ae	jmp	#LR__2690
200a0                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
200a0     00 FA 05 F6 | 	mov	result1, #0
200a4     13 00 00 FF 
200a8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
200ac     09 07 02 F6 | 	mov	_var04, arg01
200b0     E0 06 86 F1 | 	sub	_var04, #224
200b4     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
200b8     03 09 4A F0 | 	shr	_var05, _var04 wz
200bc     13 00 00 FF 
200c0     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
200c4     01 FA 65 56 |  if_ne	neg	result1, #1
200c8     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
200cc                 | LR__2690
200cc                 | '   else
200cc                 | '     '' Do this in inline ASM to ensure atomicity
200cc                 | '     tmp := @hkbd_report
200cc     13 00 00 FF 
200d0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
200d4     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
200d8                 | '     org
200d8     13 00 00 FF 
200dc     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
200e0     97 1E 48 FB | 	callpa	#(@LR__2692-@LR__2691)>>2,fcache_load_ptr_
200e4                 | LR__2691
200e4 000             | 	org	0
200e4 000 28 02 64 FD | 	setq	#1
200e8 001 04 01 02 FB | 	rdlong	_var01, _var05
200ec 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
200f0 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
200f4 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
200f8 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
200fc 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20100 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20104 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20108 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2010c 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20110 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20114 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20118 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2011c 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20120 00f             | LR__2692
20120                 | 	orgh
20120     02 FB 01 F6 | 	mov	result1, _var03
20124                 | _usbnew_spin2_keystate_ret
20124     2D 00 64 FD | 	ret
20128                 | 
20128                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20128                 | ' 
20128                 | ' '' Return key event from buffer if there is one
20128                 | ' PUB get_key() : r | tail
20128                 | _usbnew_spin2_get_key
20128                 | '   tail := keyq_tail
20128     0F 00 00 FF 
2012c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20130     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20134                 | '   if keyq_head == tail
20134     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20138     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
2013c     0F 00 00 FF 
20140     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20144     00 03 0A F2 | 	cmp	_var02, _var01 wz
20148                 | '     return 0 ' No event
20148     00 FA 05 A6 |  if_e	mov	result1, #0
2014c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20150                 | '   r := keyq_data[tail]
20150     00 03 02 F6 | 	mov	_var02, _var01
20154     02 02 66 F0 | 	shl	_var02, #2
20158     0F 00 00 FF 
2015c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20160     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20164     01 FB 01 FB | 	rdlong	result1, _var02
20168                 | '   if ++tail == KEYQUEUE_SIZE
20168     01 00 06 F1 | 	add	_var01, #1
2016c     80 00 0E F2 | 	cmp	_var01, #128 wz
20170                 | '     tail := 0
20170     00 00 06 A6 |  if_e	mov	_var01, #0
20174                 | '   keyq_tail := tail
20174     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20178     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
2017c     0F 00 00 FF 
20180     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20184                 | _usbnew_spin2_get_key_ret
20184     2D 00 64 FD | 	ret
20188                 | 
20188                 | ' 
20188                 | ' '' Emulate mouse movement
20188                 | ' PUB mouse_move(x,y)
20188                 | _usbnew_spin2_mouse_move
20188     02 4A 05 F6 | 	mov	COUNT_, #2
2018c     A8 00 A0 FD | 	call	#pushregs_
20190     09 1F 02 F6 | 	mov	local01, arg01
20194     0A 21 02 F6 | 	mov	local02, arg02
20198                 | '   mouse_lock := 1
20198     14 00 00 FF 
2019c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
201a0     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
201a4     14 00 00 FF 
201a8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
201ac                 | '   waitus(2) ' hope driver is now done
201ac     02 12 06 F6 | 	mov	arg01, #2
201b0     E8 0A B0 FD | 	call	#__system___waitus
201b4                 | '   mouse_xacc := x
201b4     14 00 00 FF 
201b8     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
201bc     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
201c0                 | '   mouse_yacc := y
201c0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
201c4     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
201c8                 | '   if mouse_outptr
201c8     04 00 00 FF 
201cc     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
201d0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
201d4     0F 00 00 FF 
201d8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
201dc     24 00 90 AD |  if_e	jmp	#LR__2700
201e0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
201e0     10 20 66 F0 | 	shl	local02, #16
201e4     0F 1F 32 F9 | 	getword	local01, local01, #0
201e8     0F 21 42 F5 | 	or	local02, local01
201ec     0F 00 00 FF 
201f0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
201f4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
201f8     0F 00 00 FF 
201fc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20200     0F 21 62 FC | 	wrlong	local02, local01
20204                 | LR__2700
20204                 | '   mouse_lock := 0
20204     14 00 00 FF 
20208     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
2020c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20210     14 00 00 FF 
20214     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20218     A7 F0 03 F6 | 	mov	ptra, fp
2021c     B2 00 A0 FD | 	call	#popregs_
20220                 | _usbnew_spin2_mouse_move_ret
20220     2D 00 64 FD | 	ret
20224                 | 
20224                 | '     '' Set HAVE_HIDPAD to enable.
20224                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20224                 | ' 
20224                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20224                 | ' PUB hidpad_id(dev) : r
20224                 | _usbnew_spin2_hidpad_id
20224                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20224     13 00 00 FF 
20228     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2022c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20230     09 01 02 F6 | 	mov	_var01, arg01
20234     03 00 66 F0 | 	shl	_var01, #3
20238     09 01 82 F1 | 	sub	_var01, arg01
2023c     02 00 66 F0 | 	shl	_var01, #2
20240     00 FB 01 F1 | 	add	result1, _var01
20244     FD FA 01 FB | 	rdlong	result1, result1
20248     13 00 00 FF 
2024c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20250                 | _usbnew_spin2_hidpad_id_ret
20250     2D 00 64 FD | 	ret
20254                 | 
20254                 | ' 
20254                 | ' '' Get all button states for a device
20254                 | ' PUB hidpad_buttons(dev) : r 
20254                 | _usbnew_spin2_hidpad_buttons
20254                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20254     13 00 00 FF 
20258     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2025c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20260     09 01 02 F6 | 	mov	_var01, arg01
20264     03 00 66 F0 | 	shl	_var01, #3
20268     09 01 82 F1 | 	sub	_var01, arg01
2026c     02 00 66 F0 | 	shl	_var01, #2
20270     00 FB 01 F1 | 	add	result1, _var01
20274     14 FA 05 F1 | 	add	result1, #20
20278     FD FA 01 FB | 	rdlong	result1, result1
2027c     13 00 00 FF 
20280     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20284                 | _usbnew_spin2_hidpad_buttons_ret
20284     2D 00 64 FD | 	ret
20288                 | 
20288                 | ' 
20288                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20288                 | ' PUB hidpad_axis(dev,axnum) : r
20288                 | _usbnew_spin2_hidpad_axis
20288                 | '   if axnum +>= 6
20288     06 14 16 F2 | 	cmp	arg02, #6 wc
2028c                 | '     return 0
2028c     00 FA 05 36 |  if_ae	mov	result1, #0
20290     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20294                 | '   else 
20294                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20294     13 00 00 FF 
20298     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2029c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
202a0     09 01 02 F6 | 	mov	_var01, arg01
202a4     03 00 66 F0 | 	shl	_var01, #3
202a8     09 01 82 F1 | 	sub	_var01, arg01
202ac     02 00 66 F0 | 	shl	_var01, #2
202b0     00 FB 01 F1 | 	add	result1, _var01
202b4     04 00 06 F6 | 	mov	_var01, #4
202b8     0A 01 02 F1 | 	add	_var01, arg02
202bc     01 00 66 F0 | 	shl	_var01, #1
202c0     FD 00 02 F1 | 	add	_var01, result1
202c4     00 FB E1 FA | 	rdword	result1, _var01
202c8     0F FA 65 F7 | 	signx	result1, #15
202cc     13 00 00 FF 
202d0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
202d4                 | _usbnew_spin2_hidpad_axis_ret
202d4     2D 00 64 FD | 	ret
202d8                 | 
202d8                 | ' 
202d8                 | ' 
202d8                 | ' '--------------------------------------------------------------
202d8                 | ' '---------- Init the variables, start the cog. ----------------
202d8                 | ' '--------------------------------------------------------------
202d8                 | ' 
202d8                 | ' pub start(mbox,scope,cache) :cog,base | iii
202d8                 | _audio096_spin2_start
202d8     04 4A 05 F6 | 	mov	COUNT_, #4
202dc     A8 00 A0 FD | 	call	#pushregs_
202e0     09 1F 02 F6 | 	mov	local01, arg01
202e4                 | ' 
202e4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
202e4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
202e4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
202e4                 | ' 
202e4                 | ' mailboxaddr:=mbox 
202e4     F2 1E 62 FC | 	wrlong	local01, objptr
202e8                 | ' scope_ptr:=scope
202e8     04 E4 05 F1 | 	add	objptr, #4
202ec     F2 14 62 FC | 	wrlong	arg02, objptr
202f0                 | ' cache_ptr:=cache
202f0     04 E4 05 F1 | 	add	objptr, #4
202f4     F2 16 62 FC | 	wrlong	arg03, objptr
202f8                 | ' base:=@channel1[0]
202f8     04 E4 05 F1 | 	add	objptr, #4
202fc     F2 20 02 F6 | 	mov	local02, objptr
20300                 | ' long[$40]:=mbox
20300     40 1E 66 FC | 	wrlong	local01, #64
20304                 | ' repeat iii from 0 to 7
20304     00 22 06 F6 | 	mov	local03, #0
20308     02 00 00 FF 
2030c     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20310     0C E4 85 F1 | 	sub	objptr, #12
20314     97 BC 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
20318                 | LR__2710
20318                 | '   long[base+64*iii]:=0
20318     10 1F 02 F6 | 	mov	local01, local02
2031c     11 FD 01 F6 | 	mov	result2, local03
20320     06 FC 65 F0 | 	shl	result2, #6
20324     FE 1E 02 F1 | 	add	local01, result2
20328     0F 01 68 FC | 	wrlong	#0, local01
2032c                 | '   long[base+64*iii+4]:=0
2032c     10 1F 02 F6 | 	mov	local01, local02
20330     11 FD 01 F6 | 	mov	result2, local03
20334     06 FC 65 F0 | 	shl	result2, #6
20338     FE 1E 02 F1 | 	add	local01, result2
2033c     04 1E 06 F1 | 	add	local01, #4
20340     0F 01 68 FC | 	wrlong	#0, local01
20344                 | '   long[base+64*iii+12]:=0
20344     10 25 02 F6 | 	mov	local04, local02
20348     11 1F 02 F6 | 	mov	local01, local03
2034c     06 1E 66 F0 | 	shl	local01, #6
20350     0F 25 02 F1 | 	add	local04, local01
20354     0C 24 06 F1 | 	add	local04, #12
20358     12 01 68 FC | 	wrlong	#0, local04
2035c                 | '   long[base+64*iii+16]:=2 
2035c     10 25 02 F6 | 	mov	local04, local02
20360     11 1F 02 F6 | 	mov	local01, local03
20364     06 1E 66 F0 | 	shl	local01, #6
20368     0F 25 02 F1 | 	add	local04, local01
2036c     10 24 06 F1 | 	add	local04, #16
20370     12 05 68 FC | 	wrlong	#2, local04
20374                 | '   word[base+64*iii+20]:=0
20374     10 25 02 F6 | 	mov	local04, local02
20378     11 1F 02 F6 | 	mov	local01, local03
2037c     06 1E 66 F0 | 	shl	local01, #6
20380     0F 25 02 F1 | 	add	local04, local01
20384     14 24 06 F1 | 	add	local04, #20
20388     12 01 58 FC | 	wrword	#0, local04
2038c                 | '   word[base+64*iii+22]:=8192
2038c     10 25 02 F6 | 	mov	local04, local02
20390     11 1F 02 F6 | 	mov	local01, local03
20394     06 1E 66 F0 | 	shl	local01, #6
20398     0F 25 02 F1 | 	add	local04, local01
2039c     16 24 06 F1 | 	add	local04, #22
203a0     10 00 80 FF 
203a4     12 01 58 FC | 	wrword	##8192, local04
203a8                 | '   word[base+64*iii+24]:=4000+2*iii
203a8     11 25 02 F6 | 	mov	local04, local03
203ac     01 24 66 F0 | 	shl	local04, #1
203b0     07 00 00 FF 
203b4     A0 1F 06 F6 | 	mov	local01, ##4000
203b8     12 1F 02 F1 | 	add	local01, local04
203bc     10 25 02 F6 | 	mov	local04, local02
203c0     11 FD 01 F6 | 	mov	result2, local03
203c4     06 FC 65 F0 | 	shl	result2, #6
203c8     FE 24 02 F1 | 	add	local04, result2
203cc     18 24 06 F1 | 	add	local04, #24
203d0     12 1F 52 FC | 	wrword	local01, local04
203d4                 | '   word[base+64*iii+26]:=2
203d4     10 25 02 F6 | 	mov	local04, local02
203d8     11 1F 02 F6 | 	mov	local01, local03
203dc     06 1E 66 F0 | 	shl	local01, #6
203e0     0F 25 02 F1 | 	add	local04, local01
203e4     1A 24 06 F1 | 	add	local04, #26
203e8     12 05 58 FC | 	wrword	#2, local04
203ec                 | '   long [base+64*iii+8]:=@null | $C0000000
203ec     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
203f0     3E 1E 26 F4 | 	bith	local01, #62
203f4     10 25 02 F6 | 	mov	local04, local02
203f8     11 17 02 F6 | 	mov	arg03, local03
203fc     06 16 66 F0 | 	shl	arg03, #6
20400     0B 25 02 F1 | 	add	local04, arg03
20404     08 24 06 F1 | 	add	local04, #8
20408     12 1F 62 FC | 	wrlong	local01, local04
2040c                 | '   long[base+64*iii+32]:=0
2040c     10 25 02 F6 | 	mov	local04, local02
20410     11 1F 02 F6 | 	mov	local01, local03
20414     06 1E 66 F0 | 	shl	local01, #6
20418     0F 25 02 F1 | 	add	local04, local01
2041c     20 24 06 F1 | 	add	local04, #32
20420     12 01 68 FC | 	wrlong	#0, local04
20424                 | '   long[base+64*iii+36]:=0
20424     10 25 02 F6 | 	mov	local04, local02
20428     11 1F 02 F6 | 	mov	local01, local03
2042c     06 1E 66 F0 | 	shl	local01, #6
20430     0F 25 02 F1 | 	add	local04, local01
20434     24 24 06 F1 | 	add	local04, #36
20438     12 01 68 FC | 	wrlong	#0, local04
2043c                 | '   long[base+64*iii+40]:=0
2043c     10 25 02 F6 | 	mov	local04, local02
20440     11 1F 02 F6 | 	mov	local01, local03
20444     06 1E 66 F0 | 	shl	local01, #6
20448     0F 25 02 F1 | 	add	local04, local01
2044c     28 24 06 F1 | 	add	local04, #40
20450     12 01 68 FC | 	wrlong	#0, local04
20454                 | '   long[base+64*iii+44]:=0
20454     10 25 02 F6 | 	mov	local04, local02
20458     11 1F 02 F6 | 	mov	local01, local03
2045c     06 1E 66 F0 | 	shl	local01, #6
20460     0F 25 02 F1 | 	add	local04, local01
20464     2C 24 06 F1 | 	add	local04, #44
20468     12 01 68 FC | 	wrlong	#0, local04
2046c                 | '   long[base+64*iii+28]:=0
2046c     10 25 02 F6 | 	mov	local04, local02
20470     11 1F 02 F6 | 	mov	local01, local03
20474     06 1E 66 F0 | 	shl	local01, #6
20478     0F 25 02 F1 | 	add	local04, local01
2047c     1C 24 06 F1 | 	add	local04, #28
20480     12 01 68 FC | 	wrlong	#0, local04
20484     01 22 06 F1 | 	add	local03, #1
20488     08 22 56 F2 | 	cmps	local03, #8 wc
2048c     88 FE 9F CD |  if_b	jmp	#LR__2710
20490                 | LR__2711
20490     02 00 00 FF 
20494     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20498                 | '   
20498                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20498     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
2049c     F2 16 02 F6 | 	mov	arg03, objptr
204a0     10 24 06 F6 | 	mov	local04, #16
204a4     28 16 62 FD | 	setq	arg03
204a8     0A 25 F2 FC | 	coginit	local04, arg02 wc
204ac     01 24 66 C6 |  if_b	neg	local04, #1
204b0                 | ' waitms(100)
204b0     64 12 06 F6 | 	mov	arg01, #100
204b4     78 07 B0 FD | 	call	#__system___waitms
204b8                 | ' return cog,base
204b8     10 FD 01 F6 | 	mov	result2, local02
204bc     12 FB 01 F6 | 	mov	result1, local04
204c0     A7 F0 03 F6 | 	mov	ptra, fp
204c4     B2 00 A0 FD | 	call	#popregs_
204c8                 | _audio096_spin2_start_ret
204c8     2D 00 64 FD | 	ret
204cc                 | 
204cc                 | ' 
204cc                 | ' ' a simple play procedure to not poke everything. 
204cc                 | ' 
204cc                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
204cc                 | _audio096_spin2_play
204cc     0C E4 05 F1 | 	add	objptr, #12
204d0     F2 00 02 F6 | 	mov	_var01, objptr
204d4     06 12 66 F0 | 	shl	arg01, #6
204d8     09 01 02 F1 | 	add	_var01, arg01
204dc     00 13 02 F6 | 	mov	arg01, _var01
204e0     0C 12 06 F1 | 	add	arg01, #12
204e4     09 1B 62 FC | 	wrlong	arg05, arg01
204e8     00 1C 56 F2 | 	cmps	arg06, #0 wc
204ec     00 13 02 36 |  if_ae	mov	arg01, _var01
204f0     10 12 06 31 |  if_ae	add	arg01, #16
204f4     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
204f8     02 1A 06 C1 |  if_b	add	arg05, #2
204fc     00 13 02 C6 |  if_b	mov	arg01, _var01
20500     10 12 06 C1 |  if_b	add	arg01, #16
20504     09 1B 62 CC |  if_b	wrlong	arg05, arg01
20508     0B 13 52 F6 | 	abs	arg01, arg03 wc
2050c     0F 1B 80 FF 
20510     09 1F 1A FD | 	qdiv	##3546895, arg01
20514                 | ' 
20514                 | ' base2:=@channel1[0]+64*channel
20514                 | ' 
20514                 | ' 
20514                 | ' long[base2+12]:= len
20514                 | ' if loop >=0 
20514                 | '   long[base2+16]:= loop
20514     0C E4 85 F1 | 	sub	objptr, #12
20518                 | ' else
20518                 | '   long[base2+16]:= len+2
20518                 | ' word[base2+20]:=vol
20518     00 13 02 F6 | 	mov	arg01, _var01
2051c     14 12 06 F1 | 	add	arg01, #20
20520     09 19 52 FC | 	wrword	arg04, arg01
20524                 | ' word[base2+24]:= 3546895/splfreq 
20524     00 19 02 F6 | 	mov	arg04, _var01
20528     18 18 06 F1 | 	add	arg04, #24
2052c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2052c                 | ' long[base2+28]:=$40000000    
2052c                 | ' long[base2+32]:=0    
2052c                 | ' long[base2+36]:=0    
2052c                 | ' long[base2+40]:=0    
2052c                 | ' long[base2+44]:=0    
2052c                 | ' long[base2+8]:=sample+$C0000000     
2052c     00 00 60 FF 
20530     00 14 06 F1 | 	add	arg02, ##-1073741824
20534     18 12 62 FD | 	getqx	arg01
20538     09 13 82 F6 | 	negc	arg01, arg01
2053c     0C 13 52 FC | 	wrword	arg01, arg04
20540     00 13 02 F6 | 	mov	arg01, _var01
20544     1A 12 06 F1 | 	add	arg01, #26
20548     09 01 5A FC | 	wrword	#256, arg01
2054c     00 13 02 F6 | 	mov	arg01, _var01
20550     1C 12 06 F1 | 	add	arg01, #28
20554     00 00 A0 FF 
20558     09 01 68 FC | 	wrlong	##1073741824, arg01
2055c     00 13 02 F6 | 	mov	arg01, _var01
20560     20 12 06 F1 | 	add	arg01, #32
20564     09 01 68 FC | 	wrlong	#0, arg01
20568     00 13 02 F6 | 	mov	arg01, _var01
2056c     24 12 06 F1 | 	add	arg01, #36
20570     09 01 68 FC | 	wrlong	#0, arg01
20574     00 13 02 F6 | 	mov	arg01, _var01
20578     28 12 06 F1 | 	add	arg01, #40
2057c     09 01 68 FC | 	wrlong	#0, arg01
20580     00 13 02 F6 | 	mov	arg01, _var01
20584     2C 12 06 F1 | 	add	arg01, #44
20588     09 01 68 FC | 	wrlong	#0, arg01
2058c     08 00 06 F1 | 	add	_var01, #8
20590     00 15 62 FC | 	wrlong	arg02, _var01
20594                 | _audio096_spin2_play_ret
20594     2D 00 64 FD | 	ret
20598                 | 
20598                 | ' 
20598                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
20598                 | _audio096_spin2_play8
20598                 | ' 
20598                 | ' base2:=@channel1[0]+64*channel
20598     0C E4 05 F1 | 	add	objptr, #12
2059c     F2 00 02 F6 | 	mov	_var01, objptr
205a0     06 12 66 F0 | 	shl	arg01, #6
205a4     09 01 02 F1 | 	add	_var01, arg01
205a8                 | ' long[base2]:=0
205a8     00 01 68 FC | 	wrlong	#0, _var01
205ac                 | ' long[base2+8]:=sample+$40000000 
205ac     00 00 20 FF 
205b0     00 14 06 F1 | 	add	arg02, ##1073741824
205b4     00 13 02 F6 | 	mov	arg01, _var01
205b8     08 12 06 F1 | 	add	arg01, #8
205bc     09 15 62 FC | 	wrlong	arg02, arg01
205c0                 | ' if loop>=0
205c0     00 1C 56 F2 | 	cmps	arg06, #0 wc
205c4     0C E4 85 F1 | 	sub	objptr, #12
205c8     1C 00 90 CD |  if_b	jmp	#LR__2720
205cc                 | '   long[base2+12]:=loop
205cc     00 15 02 F6 | 	mov	arg02, _var01
205d0     0C 14 06 F1 | 	add	arg02, #12
205d4     0A 1D 62 FC | 	wrlong	arg06, arg02
205d8                 | '   long[base2+16]:= len
205d8     00 1D 02 F6 | 	mov	arg06, _var01
205dc     10 1C 06 F1 | 	add	arg06, #16
205e0     0E 1B 62 FC | 	wrlong	arg05, arg06
205e4     1C 00 90 FD | 	jmp	#LR__2721
205e8                 | LR__2720
205e8                 | ' else
205e8                 | '   long[base2+12]:= len
205e8     00 1D 02 F6 | 	mov	arg06, _var01
205ec     0C 1C 06 F1 | 	add	arg06, #12
205f0     0E 1B 62 FC | 	wrlong	arg05, arg06
205f4                 | '   long[base2+16]:= len+1
205f4     01 1A 06 F1 | 	add	arg05, #1
205f8     00 13 02 F6 | 	mov	arg01, _var01
205fc     10 12 06 F1 | 	add	arg01, #16
20600     09 1B 62 FC | 	wrlong	arg05, arg01
20604                 | LR__2721
20604     0B 17 52 F6 | 	abs	arg03, arg03 wc
20608     0F 1B 80 FF 
2060c     0B 1F 1A FD | 	qdiv	##3546895, arg03
20610                 | ' word[base2+20]:=vol
20610     00 17 02 F6 | 	mov	arg03, _var01
20614     14 16 06 F1 | 	add	arg03, #20
20618     0B 19 52 FC | 	wrword	arg04, arg03
2061c                 | ' word[base2+24]:= 3546895 /splfreq 
2061c     00 13 02 F6 | 	mov	arg01, _var01
20620     18 12 06 F1 | 	add	arg01, #24
20624                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20624     1A 00 06 F1 | 	add	_var01, #26
20628     18 18 62 FD | 	getqx	arg04
2062c     0C 19 82 F6 | 	negc	arg04, arg04
20630     09 19 52 FC | 	wrword	arg04, arg01
20634     00 01 5A FC | 	wrword	#256, _var01
20638                 | _audio096_spin2_play8_ret
20638     2D 00 64 FD | 	ret
2063c                 | 
2063c                 | ' 'long[base2+28]:=$40000000
2063c                 | ' 
2063c                 | '     
2063c                 | ' pub stop(channel) 'silence it
2063c                 | _audio096_spin2_stop
2063c                 | ' 
2063c                 | ' word[@channel1[0]+64*channel+20]:=0
2063c     0C E4 05 F1 | 	add	objptr, #12
20640     F2 00 02 F6 | 	mov	_var01, objptr
20644     09 03 02 F6 | 	mov	_var02, arg01
20648     06 02 66 F0 | 	shl	_var02, #6
2064c     01 01 02 F1 | 	add	_var01, _var02
20650     14 00 06 F1 | 	add	_var01, #20
20654     00 01 58 FC | 	wrword	#0, _var01
20658                 | ' word[@channel1[0]+64*channel+20]:=0
20658     F2 00 02 F6 | 	mov	_var01, objptr
2065c     06 12 66 F0 | 	shl	arg01, #6
20660     09 01 02 F1 | 	add	_var01, arg01
20664     14 00 06 F1 | 	add	_var01, #20
20668     00 01 58 FC | 	wrword	#0, _var01
2066c     0C E4 85 F1 | 	sub	objptr, #12
20670                 | _audio096_spin2_stop_ret
20670     2D 00 64 FD | 	ret
20674                 | hubexit
20674     81 00 80 FD | 	jmp	#cogexit
20678                 | 
20678                 | __system___setbaud
20678     14 7C 06 FB | 	rdlong	muldiva_, #20
2067c     09 7F 02 F6 | 	mov	muldivb_, arg01
20680     BA 00 A0 FD | 	call	#divide_
20684     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
20688                 | LR__2730
20688     3E FA 9D FA | 	rdpin	result1, #62 wc
2068c     FE FC A1 F1 | 	subx	result2, result2
20690     F4 FF 9F CD |  if_b	jmp	#LR__2730
20694                 | LR__2731
20694     40 7C 64 FD | 	dirl	#62
20698     40 7E 64 FD | 	dirl	#63
2069c     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
206a0     10 7E 66 F0 | 	shl	muldivb_, #16
206a4     07 14 06 F6 | 	mov	arg02, #7
206a8     3F 15 02 F1 | 	add	arg02, muldivb_
206ac     3E F8 0C FC | 	wrpin	#124, #62
206b0     3E 14 16 FC | 	wxpin	arg02, #62
206b4     3F 7C 0C FC | 	wrpin	#62, #63
206b8     14 14 06 F1 | 	add	arg02, #20
206bc     3F 14 16 FC | 	wxpin	arg02, #63
206c0     41 7C 64 FD | 	dirh	#62
206c4     41 7E 64 FD | 	dirh	#63
206c8                 | __system___setbaud_ret
206c8     2D 00 64 FD | 	ret
206cc                 | 
206cc                 | __system___txraw
206cc     01 4A 05 F6 | 	mov	COUNT_, #1
206d0     A8 00 A0 FD | 	call	#pushregs_
206d4     09 1F 02 F6 | 	mov	local01, arg01
206d8     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
206dc                 | LR__2740
206dc     3E FA 9D FA | 	rdpin	result1, #62 wc
206e0     FE FC A1 F1 | 	subx	result2, result2
206e4     F4 FF 9F CD |  if_b	jmp	#LR__2740
206e8                 | LR__2741
206e8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
206ec     C2 01 00 AF 
206f0     00 12 06 A6 |  if_e	mov	arg01, ##230400
206f4     80 FF BF AD |  if_e	call	#__system___setbaud
206f8     58 7C 64 FD | 	drvl	#62
206fc     3E 1E 26 FC | 	wypin	local01, #62
20700     01 FA 05 F6 | 	mov	result1, #1
20704     A7 F0 03 F6 | 	mov	ptra, fp
20708     B2 00 A0 FD | 	call	#popregs_
2070c                 | __system___txraw_ret
2070c     2D 00 64 FD | 	ret
20710                 | 
20710                 | __system___rxraw
20710     0D 4A 05 F6 | 	mov	COUNT_, #13
20714     A8 00 A0 FD | 	call	#pushregs_
20718     09 1F 02 F6 | 	mov	local01, arg01
2071c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20720     C2 01 00 AF 
20724     00 12 06 A6 |  if_e	mov	arg01, ##230400
20728     4C FF BF AD |  if_e	call	#__system___setbaud
2072c     00 1E 0E F2 | 	cmp	local01, #0 wz
20730     20 00 90 AD |  if_e	jmp	#LR__2750
20734     14 22 06 FB | 	rdlong	local03, #20
20738     0A 22 46 F0 | 	shr	local03, #10
2073c     11 1F 02 FD | 	qmul	local01, local03
20740     1A FA 61 FD | 	getct	result1
20744     18 24 62 FD | 	getqx	local04
20748     12 FB 01 F1 | 	add	result1, local04
2074c     FD 26 02 F6 | 	mov	local05, result1
20750     04 00 90 FD | 	jmp	#LR__2751
20754                 | LR__2750
20754     00 26 06 F6 | 	mov	local05, #0
20758                 | LR__2751
20758     01 28 66 F6 | 	neg	local06, #1
2075c     3F 2A 06 F6 | 	mov	local07, #63
20760     00 2C 06 F6 | 	mov	local08, #0
20764     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20768     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
2076c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20770                 | LR__2752
20770     08 2E 16 F4 | 	testb	local09, #8 wc
20774     09 2E 76 F4 | 	testbn	local09, #9 andc
20778     0A 2E 46 F0 | 	shr	local09, #10
2077c     01 2C 06 C6 |  if_b	mov	local08, #1
20780     40 7E 6C 3D |  if_ae	testp	#63 wz
20784     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20788     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
2078c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
20790                 | LR__2753
20790     00 20 06 F6 | 	mov	local02, #0
20794     00 2C 0E F2 | 	cmp	local08, #0 wz
20798     01 20 66 56 |  if_ne	neg	local02, #1
2079c     00 30 06 F6 | 	mov	local10, #0
207a0     00 22 06 F6 | 	mov	local03, #0
207a4     00 1E 0E F2 | 	cmp	local01, #0 wz
207a8     01 22 66 56 |  if_ne	neg	local03, #1
207ac     00 24 06 F6 | 	mov	local04, #0
207b0     00 32 06 F6 | 	mov	local11, #0
207b4     13 35 02 F6 | 	mov	local12, local05
207b8     1A FA 61 FD | 	getct	result1
207bc     FD 36 02 F6 | 	mov	local13, result1
207c0     1B 35 82 F1 | 	sub	local12, local13
207c4     00 34 56 F2 | 	cmps	local12, #0 wc
207c8     00 32 26 C6 |  if_b	not	local11, #0
207cc     00 32 0E F2 | 	cmp	local11, #0 wz
207d0     00 24 26 56 |  if_ne	not	local04, #0
207d4     12 23 CA F7 | 	test	local03, local04 wz
207d8     00 30 26 56 |  if_ne	not	local10, #0
207dc     18 21 4A F5 | 	or	local02, local10 wz
207e0     8C FF 9F AD |  if_e	jmp	#LR__2752
207e4     00 2C 0E F2 | 	cmp	local08, #0 wz
207e8     17 29 02 56 |  if_ne	mov	local06, local09
207ec     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
207f0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
207f4     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
207f8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
207fc     14 FB 01 F6 | 	mov	result1, local06
20800     A7 F0 03 F6 | 	mov	ptra, fp
20804     B2 00 A0 FD | 	call	#popregs_
20808                 | __system___rxraw_ret
20808     2D 00 64 FD | 	ret
2080c                 | 
2080c                 | __system___getus
2080c     1A FC 71 FD | 	getct	result2 wc
20810     1A 00 62 FD | 	getct	_var01
20814     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20818     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
2081c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20820     20 00 90 5D |  if_ne	jmp	#LR__2760
20824     14 02 06 FB | 	rdlong	_var02, #20
20828     A1 07 00 FF 
2082c     40 02 16 FD | 	qdiv	_var02, ##1000000
20830     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20834     18 FA 61 FD | 	getqx	result1
20838     FD 02 02 F6 | 	mov	_var02, result1
2083c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20840     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20844                 | LR__2760
20844     01 FD 11 FD | 	qdiv	result2, _var02
20848     19 FC 61 FD | 	getqy	result2
2084c     28 FC 61 FD | 	setq	result2
20850     01 01 12 FD | 	qdiv	_var01, _var02
20854     18 FA 61 FD | 	getqx	result1
20858                 | __system___getus_ret
20858     2D 00 64 FD | 	ret
2085c                 | 
2085c                 | __system____builtin_memmove
2085c     09 01 02 F6 | 	mov	_var01, arg01
20860     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20864     10 00 90 CD |  if_b	jmp	#LR__2770
20868     0A 03 02 F6 | 	mov	_var02, arg02
2086c     0B 03 02 F1 | 	add	_var02, arg03
20870     01 13 52 F2 | 	cmps	arg01, _var02 wc
20874     48 00 90 CD |  if_b	jmp	#LR__2776
20878                 | LR__2770
20878     0B 05 02 F6 | 	mov	_var03, arg03
2087c     02 04 4E F0 | 	shr	_var03, #2 wz
20880     18 00 90 AD |  if_e	jmp	#LR__2775
20884     97 0A 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
20888                 | LR__2771
20888     02 09 D8 FC | 	rep	@LR__2774, _var03
2088c                 | LR__2772
2088c     0A 05 02 FB | 	rdlong	_var03, arg02
20890     09 05 62 FC | 	wrlong	_var03, arg01
20894     04 12 06 F1 | 	add	arg01, #4
20898     04 14 06 F1 | 	add	arg02, #4
2089c                 | LR__2773
2089c                 | LR__2774
2089c                 | LR__2775
2089c     02 16 CE F7 | 	test	arg03, #2 wz
208a0     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
208a4     09 03 52 5C |  if_ne	wrword	_var02, arg01
208a8     02 12 06 51 |  if_ne	add	arg01, #2
208ac     02 14 06 51 |  if_ne	add	arg02, #2
208b0     01 16 CE F7 | 	test	arg03, #1 wz
208b4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
208b8     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
208bc     28 00 90 FD | 	jmp	#LR__2782
208c0                 | LR__2776
208c0     0B 13 02 F1 | 	add	arg01, arg03
208c4     0B 15 02 F1 | 	add	arg02, arg03
208c8     0B 07 0A F6 | 	mov	_var04, arg03 wz
208cc     18 00 90 AD |  if_e	jmp	#LR__2781
208d0     97 0A 48 FB | 	callpa	#(@LR__2779-@LR__2777)>>2,fcache_load_ptr_
208d4                 | LR__2777
208d4     03 09 D8 FC | 	rep	@LR__2780, _var04
208d8                 | LR__2778
208d8     01 12 86 F1 | 	sub	arg01, #1
208dc     01 14 86 F1 | 	sub	arg02, #1
208e0     0A 03 C2 FA | 	rdbyte	_var02, arg02
208e4     09 03 42 FC | 	wrbyte	_var02, arg01
208e8                 | LR__2779
208e8                 | LR__2780
208e8                 | LR__2781
208e8                 | LR__2782
208e8     00 FB 01 F6 | 	mov	result1, _var01
208ec                 | __system____builtin_memmove_ret
208ec     2D 00 64 FD | 	ret
208f0                 | 
208f0                 | __system____builtin_strcpy
208f0     09 01 02 F6 | 	mov	_var01, arg01
208f4     97 0A 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
208f8                 | LR__2790
208f8     0A FB C9 FA | 	rdbyte	result1, arg02 wz
208fc     09 FB 41 FC | 	wrbyte	result1, arg01
20900     01 14 06 F1 | 	add	arg02, #1
20904     01 12 06 F1 | 	add	arg01, #1
20908     EC FF 9F 5D |  if_ne	jmp	#LR__2790
2090c                 | LR__2791
2090c     00 FB 01 F6 | 	mov	result1, _var01
20910                 | __system____builtin_strcpy_ret
20910     2D 00 64 FD | 	ret
20914                 | 
20914                 | __system____topofstack
20914     00 4A 05 F6 | 	mov	COUNT_, #0
20918     A8 00 A0 FD | 	call	#pushregs_
2091c     08 F0 07 F1 | 	add	ptra, #8
20920     04 4E 05 F1 | 	add	fp, #4
20924     A7 12 62 FC | 	wrlong	arg01, fp
20928     A7 FA 01 F6 | 	mov	result1, fp
2092c     04 4E 85 F1 | 	sub	fp, #4
20930     A7 F0 03 F6 | 	mov	ptra, fp
20934     B2 00 A0 FD | 	call	#popregs_
20938                 | __system____topofstack_ret
20938     2D 00 64 FD | 	ret
2093c                 | 
2093c                 | __system___lockmem
2093c     00 FA 05 F6 | 	mov	result1, #0
20940     01 FA 61 FD | 	cogid	result1
20944     00 FB 05 F1 | 	add	result1, #256
20948                 | LR__2800
20948     09 01 0A FB | 	rdlong	_var01, arg01 wz
2094c     09 FB 61 AC |  if_e	wrlong	result1, arg01
20950     09 01 02 AB |  if_e	rdlong	_var01, arg01
20954     09 01 02 AB |  if_e	rdlong	_var01, arg01
20958     FD 00 0A F2 | 	cmp	_var01, result1 wz
2095c     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
20960                 | __system___lockmem_ret
20960     2D 00 64 FD | 	ret
20964                 | 
20964                 | __system___string_cmp
20964     97 14 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
20968                 | LR__2810
20968     09 01 C2 FA | 	rdbyte	_var01, arg01
2096c     0A 03 C2 FA | 	rdbyte	_var02, arg02
20970     00 05 02 F6 | 	mov	_var03, _var01
20974     01 05 8A F1 | 	sub	_var03, _var02 wz
20978     01 12 06 F1 | 	add	arg01, #1
2097c     01 14 06 F1 | 	add	arg02, #1
20980     0C 00 90 5D |  if_ne	jmp	#LR__2812
20984     00 00 0E F2 | 	cmp	_var01, #0 wz
20988     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
2098c     D8 FF 9F 5D |  if_ne	jmp	#LR__2810
20990                 | LR__2811
20990                 | LR__2812
20990     02 FB 01 F6 | 	mov	result1, _var03
20994                 | __system___string_cmp_ret
20994     2D 00 64 FD | 	ret
20998                 | 
20998                 | __system___string_concat
20998     05 4A 05 F6 | 	mov	COUNT_, #5
2099c     A8 00 A0 FD | 	call	#pushregs_
209a0     09 1F 02 F6 | 	mov	local01, arg01
209a4     0A 21 02 F6 | 	mov	local02, arg02
209a8     0F 13 02 F6 | 	mov	arg01, local01
209ac     09 23 02 F6 | 	mov	local03, arg01
209b0     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
209b4                 | LR__2820
209b4     11 FB C9 FA | 	rdbyte	result1, local03 wz
209b8     01 22 06 51 |  if_ne	add	local03, #1
209bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
209c0                 | LR__2821
209c0     09 23 82 F1 | 	sub	local03, arg01
209c4     11 25 02 F6 | 	mov	local04, local03
209c8     10 13 02 F6 | 	mov	arg01, local02
209cc     09 23 02 F6 | 	mov	local03, arg01
209d0     97 06 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
209d4                 | LR__2822
209d4     11 FB C9 FA | 	rdbyte	result1, local03 wz
209d8     01 22 06 51 |  if_ne	add	local03, #1
209dc     F4 FF 9F 5D |  if_ne	jmp	#LR__2822
209e0                 | LR__2823
209e0     09 23 82 F1 | 	sub	local03, arg01
209e4     12 13 02 F6 | 	mov	arg01, local04
209e8     11 13 02 F1 | 	add	arg01, local03
209ec     01 12 06 F1 | 	add	arg01, #1
209f0     24 3E B0 FD | 	call	#__system___gc_alloc_managed
209f4     FD 26 0A F6 | 	mov	local05, result1 wz
209f8     28 00 90 AD |  if_e	jmp	#LR__2824
209fc     13 13 02 F6 | 	mov	arg01, local05
20a00     0F 15 02 F6 | 	mov	arg02, local01
20a04     12 17 02 F6 | 	mov	arg03, local04
20a08     50 FE BF FD | 	call	#__system____builtin_memmove
20a0c     13 13 02 F6 | 	mov	arg01, local05
20a10     12 13 02 F1 | 	add	arg01, local04
20a14     01 22 06 F1 | 	add	local03, #1
20a18     10 15 02 F6 | 	mov	arg02, local02
20a1c     11 17 02 F6 | 	mov	arg03, local03
20a20     38 FE BF FD | 	call	#__system____builtin_memmove
20a24                 | LR__2824
20a24     13 FB 01 F6 | 	mov	result1, local05
20a28     A7 F0 03 F6 | 	mov	ptra, fp
20a2c     B2 00 A0 FD | 	call	#popregs_
20a30                 | __system___string_concat_ret
20a30     2D 00 64 FD | 	ret
20a34                 | 
20a34                 | __system___tx
20a34     02 4A 05 F6 | 	mov	COUNT_, #2
20a38     A8 00 A0 FD | 	call	#pushregs_
20a3c     09 1F 02 F6 | 	mov	local01, arg01
20a40     0A 1E 0E F2 | 	cmp	local01, #10 wz
20a44     18 00 90 5D |  if_ne	jmp	#LR__2830
20a48     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20a4c     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20a50     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20a54     02 20 CE F7 | 	test	local02, #2 wz
20a58     0D 12 06 56 |  if_ne	mov	arg01, #13
20a5c     6C FC BF 5D |  if_ne	call	#__system___txraw
20a60                 | LR__2830
20a60     0F 13 02 F6 | 	mov	arg01, local01
20a64     64 FC BF FD | 	call	#__system___txraw
20a68     A7 F0 03 F6 | 	mov	ptra, fp
20a6c     B2 00 A0 FD | 	call	#popregs_
20a70                 | __system___tx_ret
20a70     2D 00 64 FD | 	ret
20a74                 | 
20a74                 | __system___rx
20a74     01 4A 05 F6 | 	mov	COUNT_, #1
20a78     A8 00 A0 FD | 	call	#pushregs_
20a7c                 | LR__2840
20a7c     00 12 06 F6 | 	mov	arg01, #0
20a80     8C FC BF FD | 	call	#__system___rxraw
20a84     FD 1E 02 F6 | 	mov	local01, result1
20a88     FF FF 7F FF 
20a8c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20a90     E8 FF 9F AD |  if_e	jmp	#LR__2840
20a94     0D 1E 0E F2 | 	cmp	local01, #13 wz
20a98     14 00 90 5D |  if_ne	jmp	#LR__2841
20a9c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20aa0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20aa4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20aa8     02 FA CD F7 | 	test	result1, #2 wz
20aac     0A 1E 06 56 |  if_ne	mov	local01, #10
20ab0                 | LR__2841
20ab0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20ab4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20ab8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20abc     01 12 CE F7 | 	test	arg01, #1 wz
20ac0     1C 00 90 AD |  if_e	jmp	#LR__2844
20ac4     7F 1E 0E F2 | 	cmp	local01, #127 wz
20ac8     0C 00 90 5D |  if_ne	jmp	#LR__2842
20acc     08 12 06 F6 | 	mov	arg01, #8
20ad0     60 FF BF FD | 	call	#__system___tx
20ad4     08 00 90 FD | 	jmp	#LR__2843
20ad8                 | LR__2842
20ad8     0F 13 02 F6 | 	mov	arg01, local01
20adc     54 FF BF FD | 	call	#__system___tx
20ae0                 | LR__2843
20ae0                 | LR__2844
20ae0     0F FB 01 F6 | 	mov	result1, local01
20ae4     A7 F0 03 F6 | 	mov	ptra, fp
20ae8     B2 00 A0 FD | 	call	#popregs_
20aec                 | __system___rx_ret
20aec     2D 00 64 FD | 	ret
20af0                 | 
20af0                 | __system___pinwrite
20af0     09 01 02 F6 | 	mov	_var01, arg01
20af4     1F 00 06 F5 | 	and	_var01, #31
20af8     20 12 CE F7 | 	test	arg01, #32 wz
20afc     06 12 46 F0 | 	shr	arg01, #6
20b00     09 13 CA F9 | 	bmask	arg01, arg01
20b04     00 13 62 F0 | 	shl	arg01, _var01
20b08     00 15 62 F0 | 	shl	arg02, _var01
20b0c     1C 00 90 AD |  if_e	jmp	#LR__2850
20b10     09 F7 43 F5 | 	or	dirb, arg01
20b14     FD 01 02 F6 | 	mov	_var01, outb
20b18     09 01 22 F5 | 	andn	_var01, arg01
20b1c     09 15 02 F5 | 	and	arg02, arg01
20b20     0A 01 42 F5 | 	or	_var01, arg02
20b24     00 FB 03 F6 | 	mov	outb, _var01
20b28     18 00 90 FD | 	jmp	#LR__2851
20b2c                 | LR__2850
20b2c     09 F5 43 F5 | 	or	dira, arg01
20b30     FC 01 02 F6 | 	mov	_var01, outa
20b34     09 01 22 F5 | 	andn	_var01, arg01
20b38     09 15 02 F5 | 	and	arg02, arg01
20b3c     0A 01 42 F5 | 	or	_var01, arg02
20b40     00 F9 03 F6 | 	mov	outa, _var01
20b44                 | LR__2851
20b44                 | __system___pinwrite_ret
20b44     2D 00 64 FD | 	ret
20b48                 | 
20b48                 | __system___basic_read_line
20b48     06 4A 05 F6 | 	mov	COUNT_, #6
20b4c     A8 00 A0 FD | 	call	#pushregs_
20b50     09 1F 02 F6 | 	mov	local01, arg01
20b54     00 20 06 F6 | 	mov	local02, #0
20b58     18 22 06 F6 | 	mov	local03, #24
20b5c     00 24 06 F6 | 	mov	local04, #0
20b60     18 12 06 F6 | 	mov	arg01, #24
20b64     B0 3C B0 FD | 	call	#__system___gc_alloc_managed
20b68     FD 26 0A F6 | 	mov	local05, result1 wz
20b6c     13 FB 01 A6 |  if_e	mov	result1, local05
20b70     B0 00 90 AD |  if_e	jmp	#LR__2863
20b74                 | LR__2860
20b74     0F 13 02 F6 | 	mov	arg01, local01
20b78     78 0B B0 FD | 	call	#__system___basic_get_char
20b7c     FD 28 02 F6 | 	mov	local06, result1
20b80     01 28 56 F2 | 	cmps	local06, #1 wc
20b84     8C 00 90 CD |  if_b	jmp	#LR__2862
20b88     0A 28 0E F2 | 	cmp	local06, #10 wz
20b8c     10 00 90 5D |  if_ne	jmp	#LR__2861
20b90     00 24 0E F2 | 	cmp	local04, #0 wz
20b94     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20b98     01 20 86 11 |  if_a	sub	local02, #1
20b9c     74 00 90 FD | 	jmp	#LR__2862
20ba0                 | LR__2861
20ba0     0D 28 0E F2 | 	cmp	local06, #13 wz
20ba4     01 24 06 A6 |  if_e	mov	local04, #1
20ba8     00 24 06 56 |  if_ne	mov	local04, #0
20bac     08 28 0E F2 | 	cmp	local06, #8 wz
20bb0     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20bb4     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20bb8     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20bbc     B4 FF 9F AD |  if_e	jmp	#LR__2860
20bc0     13 17 02 F6 | 	mov	arg03, local05
20bc4     10 17 02 F1 | 	add	arg03, local02
20bc8     0B 29 42 FC | 	wrbyte	local06, arg03
20bcc     01 20 06 F1 | 	add	local02, #1
20bd0     11 21 0A F2 | 	cmp	local02, local03 wz
20bd4     9C FF 9F 5D |  if_ne	jmp	#LR__2860
20bd8     11 13 02 F6 | 	mov	arg01, local03
20bdc     20 12 06 F1 | 	add	arg01, #32
20be0     34 3C B0 FD | 	call	#__system___gc_alloc_managed
20be4     FD 28 0A F6 | 	mov	local06, result1 wz
20be8     14 FB 01 A6 |  if_e	mov	result1, local06
20bec     34 00 90 AD |  if_e	jmp	#LR__2863
20bf0     14 13 02 F6 | 	mov	arg01, local06
20bf4     13 15 02 F6 | 	mov	arg02, local05
20bf8     11 17 02 F6 | 	mov	arg03, local03
20bfc     5C FC BF FD | 	call	#__system____builtin_memmove
20c00     20 22 06 F1 | 	add	local03, #32
20c04     13 13 02 F6 | 	mov	arg01, local05
20c08     48 3D B0 FD | 	call	#__system___gc_free
20c0c     14 27 02 F6 | 	mov	local05, local06
20c10     60 FF 9F FD | 	jmp	#LR__2860
20c14                 | LR__2862
20c14     13 29 02 F6 | 	mov	local06, local05
20c18     10 29 02 F1 | 	add	local06, local02
20c1c     14 01 48 FC | 	wrbyte	#0, local06
20c20     13 FB 01 F6 | 	mov	result1, local05
20c24                 | LR__2863
20c24     A7 F0 03 F6 | 	mov	ptra, fp
20c28     B2 00 A0 FD | 	call	#popregs_
20c2c                 | __system___basic_read_line_ret
20c2c     2D 00 64 FD | 	ret
20c30                 | 
20c30                 | __system___waitms
20c30     09 01 02 F6 | 	mov	_var01, arg01
20c34     1A 02 62 FD | 	getct	_var02
20c38     14 04 06 FB | 	rdlong	_var03, #20
20c3c     97 14 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20c40                 | LR__2870
20c40     01 00 00 FF 
20c44     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20c48     1C 00 90 CD |  if_b	jmp	#LR__2872
20c4c     02 03 02 F1 | 	add	_var02, _var03
20c50     01 13 02 F6 | 	mov	arg01, _var02
20c54     00 12 66 FA | 	addct1	arg01, #0
20c58     24 22 60 FD | 	waitct1
20c5c     01 00 00 FF 
20c60     E8 01 86 F1 | 	sub	_var01, ##1000
20c64     D8 FF 9F FD | 	jmp	#LR__2870
20c68                 | LR__2871
20c68                 | LR__2872
20c68     01 00 56 F2 | 	cmps	_var01, #1 wc
20c6c     28 00 90 CD |  if_b	jmp	#LR__2873
20c70     02 01 02 FD | 	qmul	_var01, _var03
20c74     01 00 00 FF 
20c78     E8 17 06 F6 | 	mov	arg03, ##1000
20c7c     19 FA 61 FD | 	getqy	result1
20c80     18 12 62 FD | 	getqx	arg01
20c84     28 FA 61 FD | 	setq	result1
20c88     0B 13 12 FD | 	qdiv	arg01, arg03
20c8c     18 12 62 FD | 	getqx	arg01
20c90     01 13 62 FA | 	addct1	arg01, _var02
20c94     24 22 60 FD | 	waitct1
20c98                 | LR__2873
20c98                 | __system___waitms_ret
20c98     2D 00 64 FD | 	ret
20c9c                 | 
20c9c                 | __system___waitus
20c9c     09 01 02 F6 | 	mov	_var01, arg01
20ca0     1A 02 62 FD | 	getct	_var02
20ca4     14 04 06 FB | 	rdlong	_var03, #20
20ca8     97 14 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20cac                 | LR__2880
20cac     A1 07 00 FF 
20cb0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20cb4     1C 00 90 CD |  if_b	jmp	#LR__2882
20cb8     02 03 02 F1 | 	add	_var02, _var03
20cbc     01 13 02 F6 | 	mov	arg01, _var02
20cc0     00 12 66 FA | 	addct1	arg01, #0
20cc4     24 22 60 FD | 	waitct1
20cc8     A1 07 00 FF 
20ccc     40 00 86 F1 | 	sub	_var01, ##1000000
20cd0     D8 FF 9F FD | 	jmp	#LR__2880
20cd4                 | LR__2881
20cd4                 | LR__2882
20cd4     01 00 56 F2 | 	cmps	_var01, #1 wc
20cd8     28 00 90 CD |  if_b	jmp	#LR__2883
20cdc     02 01 02 FD | 	qmul	_var01, _var03
20ce0     A1 07 00 FF 
20ce4     40 16 06 F6 | 	mov	arg03, ##1000000
20ce8     19 FA 61 FD | 	getqy	result1
20cec     18 12 62 FD | 	getqx	arg01
20cf0     28 FA 61 FD | 	setq	result1
20cf4     0B 13 12 FD | 	qdiv	arg01, arg03
20cf8     18 FA 61 FD | 	getqx	result1
20cfc     FD 02 62 FA | 	addct1	_var02, result1
20d00     24 22 60 FD | 	waitct1
20d04                 | LR__2883
20d04                 | __system___waitus_ret
20d04     2D 00 64 FD | 	ret
20d08                 | 
20d08                 | __system___mount
20d08     0B 4A 05 F6 | 	mov	COUNT_, #11
20d0c     A8 00 A0 FD | 	call	#pushregs_
20d10     09 1F 02 F6 | 	mov	local01, arg01
20d14     0A 21 0A F6 | 	mov	local02, arg02 wz
20d18     01 22 66 F6 | 	neg	local03, #1
20d1c     01 FA 65 A6 |  if_e	neg	result1, #1
20d20     98 02 90 AD |  if_e	jmp	#LR__2905
20d24     0F FB C1 FA | 	rdbyte	result1, local01
20d28     2F FA 0D F2 | 	cmp	result1, #47 wz
20d2c     28 00 90 5D |  if_ne	jmp	#LR__2892
20d30     0F 13 02 F6 | 	mov	arg01, local01
20d34     09 25 02 F6 | 	mov	local04, arg01
20d38     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20d3c                 | LR__2890
20d3c     12 FB C9 FA | 	rdbyte	result1, local04 wz
20d40     01 24 06 51 |  if_ne	add	local04, #1
20d44     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20d48                 | LR__2891
20d48     09 25 82 F1 | 	sub	local04, arg01
20d4c     12 FB 01 F6 | 	mov	result1, local04
20d50     10 FA 55 F2 | 	cmps	result1, #16 wc
20d54     14 00 90 CD |  if_b	jmp	#LR__2893
20d58                 | LR__2892
20d58     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20d5c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20d60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d64     01 FA 65 F6 | 	neg	result1, #1
20d68     50 02 90 FD | 	jmp	#LR__2905
20d6c                 | LR__2893
20d6c     00 26 06 F6 | 	mov	local05, #0
20d70                 | LR__2894
20d70     04 26 56 F2 | 	cmps	local05, #4 wc
20d74     B0 00 90 3D |  if_ae	jmp	#LR__2899
20d78     13 13 02 F6 | 	mov	arg01, local05
20d7c     02 12 66 F0 | 	shl	arg01, #2
20d80     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20d84     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20d88     09 FB 09 FB | 	rdlong	result1, arg01 wz
20d8c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20d90     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20d94     13 23 02 86 |  if_c_and_z	mov	local03, local05
20d98     84 00 90 8D |  if_c_and_z	jmp	#LR__2898
20d9c     13 13 02 F6 | 	mov	arg01, local05
20da0     02 12 66 F0 | 	shl	arg01, #2
20da4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20da8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20dac     09 13 02 FB | 	rdlong	arg01, arg01
20db0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20db4     09 25 02 F6 | 	mov	local04, arg01
20db8     97 06 48 FB | 	callpa	#(@LR__2896-@LR__2895)>>2,fcache_load_ptr_
20dbc                 | LR__2895
20dbc     12 FB C9 FA | 	rdbyte	result1, local04 wz
20dc0     01 24 06 51 |  if_ne	add	local04, #1
20dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__2895
20dc8                 | LR__2896
20dc8     09 25 82 F1 | 	sub	local04, arg01
20dcc     12 29 02 F6 | 	mov	local06, local04
20dd0     14 13 02 F6 | 	mov	arg01, local06
20dd4     0F 13 02 F1 | 	add	arg01, local01
20dd8     09 FB C1 FA | 	rdbyte	result1, arg01
20ddc     2F FA 0D F2 | 	cmp	result1, #47 wz
20de0     14 2B 02 56 |  if_ne	mov	local07, local06
20de4     0F 2B 02 51 |  if_ne	add	local07, local01
20de8     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20dec     30 00 90 5D |  if_ne	jmp	#LR__2897
20df0     13 17 02 F6 | 	mov	arg03, local05
20df4     02 16 66 F0 | 	shl	arg03, #2
20df8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20dfc     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20e00     0B 15 02 FB | 	rdlong	arg02, arg03
20e04     0F 13 02 F6 | 	mov	arg01, local01
20e08     14 17 02 F6 | 	mov	arg03, local06
20e0c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20e10     84 4E B0 FD | 	call	#__system__strncmp
20e14     00 FA 0D F2 | 	cmp	result1, #0 wz
20e18     13 23 02 A6 |  if_e	mov	local03, local05
20e1c     08 00 90 AD |  if_e	jmp	#LR__2899
20e20                 | LR__2897
20e20                 | LR__2898
20e20     01 26 06 F1 | 	add	local05, #1
20e24     48 FF 9F FD | 	jmp	#LR__2894
20e28                 | LR__2899
20e28     FF FF 7F FF 
20e2c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20e30     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20e34     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20e38     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20e3c     01 FA 65 A6 |  if_e	neg	result1, #1
20e40     78 01 90 AD |  if_e	jmp	#LR__2905
20e44     11 27 02 F6 | 	mov	local05, local03
20e48     13 2B 02 F6 | 	mov	local07, local05
20e4c     02 2A 66 F0 | 	shl	local07, #2
20e50     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20e54     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20e58     15 29 0A FB | 	rdlong	local06, local07 wz
20e5c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20e60     58 00 90 AD |  if_e	jmp	#LR__2900
20e64     4C 28 06 F1 | 	add	local06, #76
20e68     14 2B 0A FB | 	rdlong	local07, local06 wz
20e6c     4C 28 86 F1 | 	sub	local06, #76
20e70     48 00 90 AD |  if_e	jmp	#LR__2900
20e74     4C 28 06 F1 | 	add	local06, #76
20e78     14 2B 02 FB | 	rdlong	local07, local06
20e7c     15 23 02 F6 | 	mov	local03, local07
20e80     13 2A 46 F7 | 	zerox	local07, #19
20e84     14 22 46 F0 | 	shr	local03, #20
20e88     02 22 66 F0 | 	shl	local03, #2
20e8c     ED 22 02 F1 | 	add	local03, __methods__
20e90     11 23 02 FB | 	rdlong	local03, local03
20e94     13 29 02 F6 | 	mov	local06, local05
20e98     02 28 66 F0 | 	shl	local06, #2
20e9c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ea0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20ea4     14 13 02 FB | 	rdlong	arg01, local06
20ea8     F2 28 02 F6 | 	mov	local06, objptr
20eac     15 E5 01 F6 | 	mov	objptr, local07
20eb0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20eb4     2D 22 62 FD | 	call	local03
20eb8     14 E5 01 F6 | 	mov	objptr, local06
20ebc                 | LR__2900
20ebc     13 2D 02 F6 | 	mov	local08, local05
20ec0     02 2C 66 F0 | 	shl	local08, #2
20ec4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20ec8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20ecc     16 21 62 FC | 	wrlong	local02, local08
20ed0     00 20 0E F2 | 	cmp	local02, #0 wz
20ed4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20ed8     18 00 90 5D |  if_ne	jmp	#LR__2901
20edc     02 26 66 F0 | 	shl	local05, #2
20ee0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ee4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20ee8     13 01 68 FC | 	wrlong	#0, local05
20eec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ef0     C4 00 90 FD | 	jmp	#LR__2904
20ef4                 | LR__2901
20ef4     13 2F 02 F6 | 	mov	local09, local05
20ef8     04 2E 66 F0 | 	shl	local09, #4
20efc     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20f00     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20f04     17 13 02 F6 | 	mov	arg01, local09
20f08     0F 15 02 F6 | 	mov	arg02, local01
20f0c     10 16 06 F6 | 	mov	arg03, #16
20f10     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20f14     D4 4C B0 FD | 	call	#__system__strncpy
20f18     48 20 06 F1 | 	add	local02, #72
20f1c     10 2D 0A FB | 	rdlong	local08, local02 wz
20f20     48 20 86 F1 | 	sub	local02, #72
20f24     7C 00 90 AD |  if_e	jmp	#LR__2903
20f28     48 20 06 F1 | 	add	local02, #72
20f2c     10 2D 02 FB | 	rdlong	local08, local02
20f30     16 31 02 F6 | 	mov	local10, local08
20f34     13 2C 46 F7 | 	zerox	local08, #19
20f38     14 30 46 F0 | 	shr	local10, #20
20f3c     02 30 66 F0 | 	shl	local10, #2
20f40     ED 30 02 F1 | 	add	local10, __methods__
20f44     18 31 02 FB | 	rdlong	local10, local10
20f48     17 13 02 F6 | 	mov	arg01, local09
20f4c     F2 32 02 F6 | 	mov	local11, objptr
20f50     16 E5 01 F6 | 	mov	objptr, local08
20f54     2D 30 62 FD | 	call	local10
20f58     19 E5 01 F6 | 	mov	objptr, local11
20f5c     FD 12 0A F6 | 	mov	arg01, result1 wz
20f60     40 00 90 AD |  if_e	jmp	#LR__2902
20f64     13 2D 02 F6 | 	mov	local08, local05
20f68     02 2C 66 F0 | 	shl	local08, #2
20f6c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20f70     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20f74     16 01 68 FC | 	wrlong	#0, local08
20f78     02 26 66 F0 | 	shl	local05, #2
20f7c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20f80     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20f84     13 01 68 FC | 	wrlong	#0, local05
20f88     09 13 6A F6 | 	neg	arg01, arg01 wz
20f8c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
20f90     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20f94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20f98     01 FA 65 56 |  if_ne	neg	result1, #1
20f9c     00 FA 05 A6 |  if_e	mov	result1, #0
20fa0     18 00 90 FD | 	jmp	#LR__2905
20fa4                 | LR__2902
20fa4                 | LR__2903
20fa4     02 26 66 F0 | 	shl	local05, #2
20fa8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20fac     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20fb0     13 2F 62 FC | 	wrlong	local09, local05
20fb4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20fb8                 | LR__2904
20fb8     00 FA 05 F6 | 	mov	result1, #0
20fbc                 | LR__2905
20fbc     A7 F0 03 F6 | 	mov	ptra, fp
20fc0     B2 00 A0 FD | 	call	#popregs_
20fc4                 | __system___mount_ret
20fc4     2D 00 64 FD | 	ret
20fc8                 | 
20fc8                 | __system___chdir
20fc8     00 4A 05 F6 | 	mov	COUNT_, #0
20fcc     A8 00 A0 FD | 	call	#pushregs_
20fd0     40 F0 07 F1 | 	add	ptra, #64
20fd4     04 4E 05 F1 | 	add	fp, #4
20fd8     A7 12 62 FC | 	wrlong	arg01, fp
20fdc     04 4E 05 F1 | 	add	fp, #4
20fe0     A7 14 02 F6 | 	mov	arg02, fp
20fe4     08 4E 85 F1 | 	sub	fp, #8
20fe8     A4 48 B0 FD | 	call	#__system__stat
20fec     3C 4E 05 F1 | 	add	fp, #60
20ff0     A7 FA 61 FC | 	wrlong	result1, fp
20ff4     3C 4E 85 F1 | 	sub	fp, #60
20ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
20ffc     3C 4E 05 51 |  if_ne	add	fp, #60
21000     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21004     3C 4E 85 51 |  if_ne	sub	fp, #60
21008     BC 00 90 5D |  if_ne	jmp	#LR__2912
2100c     10 4E 05 F1 | 	add	fp, #16
21010     A7 12 02 FB | 	rdlong	arg01, fp
21014     10 4E 85 F1 | 	sub	fp, #16
21018     78 00 00 FF 
2101c     00 12 06 F5 | 	and	arg01, ##61440
21020     08 00 00 FF 
21024     00 12 0E F2 | 	cmp	arg01, ##4096 wz
21028     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2102c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21030     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21034     01 FA 65 56 |  if_ne	neg	result1, #1
21038     8C 00 90 5D |  if_ne	jmp	#LR__2912
2103c     04 4E 05 F1 | 	add	fp, #4
21040     A7 16 02 FB | 	rdlong	arg03, fp
21044     04 4E 85 F1 | 	sub	fp, #4
21048     0B 17 C2 FA | 	rdbyte	arg03, arg03
2104c     2F 16 0E F2 | 	cmp	arg03, #47 wz
21050     24 00 90 5D |  if_ne	jmp	#LR__2910
21054     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21058     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2105c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21060     04 4E 05 F1 | 	add	fp, #4
21064     A7 14 02 FB | 	rdlong	arg02, fp
21068     04 4E 85 F1 | 	sub	fp, #4
2106c     00 17 06 F6 | 	mov	arg03, #256
21070     78 4B B0 FD | 	call	#__system__strncpy
21074     4C 00 90 FD | 	jmp	#LR__2911
21078                 | LR__2910
21078     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2107c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21080     38 4E 05 F1 | 	add	fp, #56
21084     A7 12 62 FC | 	wrlong	arg01, fp
21088     38 4E 85 F1 | 	sub	fp, #56
2108c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
21090     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21094     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21098     00 17 06 F6 | 	mov	arg03, #256
2109c     4C 4B B0 FD | 	call	#__system__strncpy
210a0     38 4E 05 F1 | 	add	fp, #56
210a4     A7 12 02 FB | 	rdlong	arg01, fp
210a8     34 4E 85 F1 | 	sub	fp, #52
210ac     A7 14 02 FB | 	rdlong	arg02, fp
210b0     04 4E 85 F1 | 	sub	fp, #4
210b4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
210b8     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
210bc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
210c0     10 00 B0 FD | 	call	#__system____getvfsforfile
210c4                 | LR__2911
210c4     00 FA 05 F6 | 	mov	result1, #0
210c8                 | LR__2912
210c8     A7 F0 03 F6 | 	mov	ptra, fp
210cc     B2 00 A0 FD | 	call	#popregs_
210d0                 | __system___chdir_ret
210d0     2D 00 64 FD | 	ret
210d4                 | 
210d4                 | __system____getvfsforfile
210d4     0E 4A 05 F6 | 	mov	COUNT_, #14
210d8     A8 00 A0 FD | 	call	#pushregs_
210dc     09 1F 02 F6 | 	mov	local01, arg01
210e0     0A 21 02 F6 | 	mov	local02, arg02
210e4     0B 23 02 F6 | 	mov	local03, arg03
210e8     97 10 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
210ec                 | LR__2920
210ec     10 FB C1 FA | 	rdbyte	result1, local02
210f0     2F FA 0D F2 | 	cmp	result1, #47 wz
210f4     01 20 06 A1 |  if_e	add	local02, #1
210f8     10 25 C2 AA |  if_e	rdbyte	local04, local02
210fc     01 20 86 A1 |  if_e	sub	local02, #1
21100     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
21104     01 20 06 A1 |  if_e	add	local02, #1
21108     E0 FF 9F AD |  if_e	jmp	#LR__2920
2110c                 | LR__2921
2110c     10 25 C2 FA | 	rdbyte	local04, local02
21110     2F 24 0E F2 | 	cmp	local04, #47 wz
21114     14 00 90 5D |  if_ne	jmp	#LR__2922
21118     0F 13 02 F6 | 	mov	arg01, local01
2111c     10 15 02 F6 | 	mov	arg02, local02
21120     00 17 06 F6 | 	mov	arg03, #256
21124     C4 4A B0 FD | 	call	#__system__strncpy
21128     7C 00 90 FD | 	jmp	#LR__2924
2112c                 | LR__2922
2112c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21130     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21134     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21138     0F 13 02 F6 | 	mov	arg01, local01
2113c     00 17 06 F6 | 	mov	arg03, #256
21140     A8 4A B0 FD | 	call	#__system__strncpy
21144     10 25 CA FA | 	rdbyte	local04, local02 wz
21148     5C 00 90 AD |  if_e	jmp	#LR__2923
2114c     10 25 C2 FA | 	rdbyte	local04, local02
21150     2E 24 0E F2 | 	cmp	local04, #46 wz
21154     01 20 06 A1 |  if_e	add	local02, #1
21158     10 27 C2 AA |  if_e	rdbyte	local05, local02
2115c     01 20 86 A1 |  if_e	sub	local02, #1
21160     13 29 02 A6 |  if_e	mov	local06, local05
21164     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21168     3C 00 90 AD |  if_e	jmp	#LR__2923
2116c     0F 27 C2 FA | 	rdbyte	local05, local01
21170     2F 26 0E F2 | 	cmp	local05, #47 wz
21174     01 1E 06 A1 |  if_e	add	local01, #1
21178     0F 25 C2 AA |  if_e	rdbyte	local04, local01
2117c     01 1E 86 A1 |  if_e	sub	local01, #1
21180     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21184     80 01 00 5F 
21188     84 15 06 56 |  if_ne	mov	arg02, ##@LR__5020
2118c     0F 13 02 56 |  if_ne	mov	arg01, local01
21190     00 17 06 56 |  if_ne	mov	arg03, #256
21194     A0 4A B0 5D |  if_ne	call	#__system__strncat
21198     0F 13 02 F6 | 	mov	arg01, local01
2119c     10 15 02 F6 | 	mov	arg02, local02
211a0     00 17 06 F6 | 	mov	arg03, #256
211a4     90 4A B0 FD | 	call	#__system__strncat
211a8                 | LR__2923
211a8                 | LR__2924
211a8     0F 13 02 F6 | 	mov	arg01, local01
211ac     48 4C B0 FD | 	call	#__system___normalizeName
211b0     0F 25 CA FA | 	rdbyte	local04, local01 wz
211b4     1C 00 90 AD |  if_e	jmp	#LR__2925
211b8     0F 25 C2 FA | 	rdbyte	local04, local01
211bc     2F 24 0E F2 | 	cmp	local04, #47 wz
211c0     01 1E 06 A1 |  if_e	add	local01, #1
211c4     0F 29 C2 AA |  if_e	rdbyte	local06, local01
211c8     01 1E 86 A1 |  if_e	sub	local01, #1
211cc     00 28 4E A2 |  if_e	cmps	local06, #0 wz
211d0     18 00 90 5D |  if_ne	jmp	#LR__2926
211d4                 | LR__2925
211d4     01 00 00 FF 
211d8     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
211dc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
211e0     01 00 00 FF 
211e4     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
211e8     EC 01 90 FD | 	jmp	#LR__2940
211ec                 | LR__2926
211ec     00 2A 06 F6 | 	mov	local07, #0
211f0                 | LR__2927
211f0     04 2A 56 F2 | 	cmps	local07, #4 wc
211f4     CC 01 90 3D |  if_ae	jmp	#LR__2939
211f8     15 29 02 F6 | 	mov	local06, local07
211fc     02 28 66 F0 | 	shl	local06, #2
21200     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21204     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21208     14 29 0A FB | 	rdlong	local06, local06 wz
2120c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21210     A8 01 90 AD |  if_e	jmp	#LR__2938
21214     15 25 02 F6 | 	mov	local04, local07
21218     02 24 66 F0 | 	shl	local04, #2
2121c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21220     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21224     12 13 02 FB | 	rdlong	arg01, local04
21228     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2122c     09 2D 02 F6 | 	mov	local08, arg01
21230     97 06 48 FB | 	callpa	#(@LR__2929-@LR__2928)>>2,fcache_load_ptr_
21234                 | LR__2928
21234     16 FB C9 FA | 	rdbyte	result1, local08 wz
21238     01 2C 06 51 |  if_ne	add	local08, #1
2123c     F4 FF 9F 5D |  if_ne	jmp	#LR__2928
21240                 | LR__2929
21240     09 2D 82 F1 | 	sub	local08, arg01
21244     16 2F 02 F6 | 	mov	local09, local08
21248     17 25 02 F6 | 	mov	local04, local09
2124c     0F 25 02 F1 | 	add	local04, local01
21250     12 29 C2 FA | 	rdbyte	local06, local04
21254     2F 28 0E F2 | 	cmp	local06, #47 wz
21258     17 31 02 56 |  if_ne	mov	local10, local09
2125c     0F 31 02 51 |  if_ne	add	local10, local01
21260     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21264     54 01 90 5D |  if_ne	jmp	#LR__2937
21268     15 17 02 F6 | 	mov	arg03, local07
2126c     02 16 66 F0 | 	shl	arg03, #2
21270     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21274     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21278     0B 15 02 FB | 	rdlong	arg02, arg03
2127c     17 17 02 F6 | 	mov	arg03, local09
21280     0F 13 02 F6 | 	mov	arg01, local01
21284     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21288     0C 4A B0 FD | 	call	#__system__strncmp
2128c     00 FA 4D F2 | 	cmps	result1, #0 wz
21290     28 01 90 5D |  if_ne	jmp	#LR__2937
21294     15 33 02 F6 | 	mov	local11, local07
21298     02 32 66 F0 | 	shl	local11, #2
2129c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
212a0     F3 32 02 F1 | 	add	local11, ptr___system__dat__
212a4     19 35 02 FB | 	rdlong	local12, local11
212a8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
212ac     97 22 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
212b0                 | LR__2930
212b0     17 29 02 F6 | 	mov	local06, local09
212b4     01 28 06 F1 | 	add	local06, #1
212b8     0F 29 02 F1 | 	add	local06, local01
212bc     14 33 C2 FA | 	rdbyte	local11, local06
212c0     2E 32 0E F2 | 	cmp	local11, #46 wz
212c4     2C 00 90 5D |  if_ne	jmp	#LR__2932
212c8     17 33 02 F6 | 	mov	local11, local09
212cc     02 32 06 F1 | 	add	local11, #2
212d0     0F 33 02 F1 | 	add	local11, local01
212d4     19 31 C2 FA | 	rdbyte	local10, local11
212d8     2F 30 0E F2 | 	cmp	local10, #47 wz
212dc     17 37 02 56 |  if_ne	mov	local13, local09
212e0     02 36 06 51 |  if_ne	add	local13, #2
212e4     0F 37 02 51 |  if_ne	add	local13, local01
212e8     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
212ec     01 2E 06 A1 |  if_e	add	local09, #1
212f0     BC FF 9F AD |  if_e	jmp	#LR__2930
212f4                 | LR__2931
212f4                 | LR__2932
212f4     00 22 0E F2 | 	cmp	local03, #0 wz
212f8     11 13 02 56 |  if_ne	mov	arg01, local03
212fc     0F 15 02 56 |  if_ne	mov	arg02, local01
21300     00 17 06 56 |  if_ne	mov	arg03, #256
21304     E4 48 B0 5D |  if_ne	call	#__system__strncpy
21308     0F 15 02 F6 | 	mov	arg02, local01
2130c     17 15 02 F1 | 	add	arg02, local09
21310     01 14 06 F1 | 	add	arg02, #1
21314     0F 13 02 F6 | 	mov	arg01, local01
21318     D4 F5 BF FD | 	call	#__system____builtin_strcpy
2131c     0F 13 02 F6 | 	mov	arg01, local01
21320     09 2D 02 F6 | 	mov	local08, arg01
21324     97 06 48 FB | 	callpa	#(@LR__2934-@LR__2933)>>2,fcache_load_ptr_
21328                 | LR__2933
21328     16 FB C9 FA | 	rdbyte	result1, local08 wz
2132c     01 2C 06 51 |  if_ne	add	local08, #1
21330     F4 FF 9F 5D |  if_ne	jmp	#LR__2933
21334                 | LR__2934
21334     09 2D 82 F1 | 	sub	local08, arg01
21338     16 2F 02 F6 | 	mov	local09, local08
2133c                 | LR__2935
2133c     01 2E 56 F2 | 	cmps	local09, #1 wc
21340     70 00 90 CD |  if_b	jmp	#LR__2936
21344     17 25 02 F6 | 	mov	local04, local09
21348     0F 25 02 F1 | 	add	local04, local01
2134c     12 33 C2 FA | 	rdbyte	local11, local04
21350     2F 32 0E F2 | 	cmp	local11, #47 wz
21354     17 33 02 A6 |  if_e	mov	local11, local09
21358     0F 33 02 A1 |  if_e	add	local11, local01
2135c     19 01 48 AC |  if_e	wrbyte	#0, local11
21360     01 2E 86 A1 |  if_e	sub	local09, #1
21364     D4 FF 9F AD |  if_e	jmp	#LR__2935
21368     17 25 02 F6 | 	mov	local04, local09
2136c     0F 25 02 F1 | 	add	local04, local01
21370     12 33 C2 FA | 	rdbyte	local11, local04
21374     2E 32 0E F2 | 	cmp	local11, #46 wz
21378     38 00 90 5D |  if_ne	jmp	#LR__2936
2137c     02 2E 56 F2 | 	cmps	local09, #2 wc
21380     30 00 90 CD |  if_b	jmp	#LR__2936
21384     17 39 02 F6 | 	mov	local14, local09
21388     01 38 86 F1 | 	sub	local14, #1
2138c     0F 39 02 F1 | 	add	local14, local01
21390     1C 27 C2 FA | 	rdbyte	local05, local14
21394     2F 26 0E F2 | 	cmp	local05, #47 wz
21398     18 00 90 5D |  if_ne	jmp	#LR__2936
2139c     17 25 02 F6 | 	mov	local04, local09
213a0     01 24 86 F1 | 	sub	local04, #1
213a4     0F 25 02 F1 | 	add	local04, local01
213a8     12 01 48 FC | 	wrbyte	#0, local04
213ac     02 2E 86 F1 | 	sub	local09, #2
213b0     88 FF 9F FD | 	jmp	#LR__2935
213b4                 | LR__2936
213b4     1A FB 01 F6 | 	mov	result1, local12
213b8     1C 00 90 FD | 	jmp	#LR__2940
213bc                 | LR__2937
213bc                 | LR__2938
213bc     01 2A 06 F1 | 	add	local07, #1
213c0     2C FE 9F FD | 	jmp	#LR__2927
213c4                 | LR__2939
213c4     03 00 00 FF 
213c8     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
213cc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
213d0     03 00 00 FF 
213d4     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
213d8                 | LR__2940
213d8     A7 F0 03 F6 | 	mov	ptra, fp
213dc     B2 00 A0 FD | 	call	#popregs_
213e0                 | __system____getvfsforfile_ret
213e0     2D 00 64 FD | 	ret
213e4                 | 
213e4                 | __system___basic_open
213e4     05 4A 05 F6 | 	mov	COUNT_, #5
213e8     A8 00 A0 FD | 	call	#pushregs_
213ec     0A 1F 02 F6 | 	mov	local01, arg02
213f0     0B 21 02 F6 | 	mov	local02, arg03
213f4     0C 23 02 F6 | 	mov	local03, arg04
213f8     00 24 06 F6 | 	mov	local04, #0
213fc     C4 47 B0 FD | 	call	#__system____getftab
21400     FD 26 0A F6 | 	mov	local05, result1 wz
21404     18 00 90 5D |  if_ne	jmp	#LR__2950
21408     EE 12 02 F6 | 	mov	arg01, abortchain
2140c     0C 14 06 F6 | 	mov	arg02, #12
21410     01 16 06 F6 | 	mov	arg03, #1
21414     DA 00 A0 FD | 	call	#__longjmp
21418     01 FA 65 F6 | 	neg	result1, #1
2141c     14 01 90 FD | 	jmp	#LR__2959
21420                 | LR__2950
21420     08 26 06 F1 | 	add	local05, #8
21424     13 FB 09 FB | 	rdlong	result1, local05 wz
21428     08 26 86 F1 | 	sub	local05, #8
2142c     13 13 02 56 |  if_ne	mov	arg01, local05
21430     E4 3E B0 5D |  if_ne	call	#__system___closeraw
21434     00 1E 0E F2 | 	cmp	local01, #0 wz
21438     00 20 0E A2 |  if_e	cmp	local02, #0 wz
2143c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21440     3C 00 90 AD |  if_e	jmp	#LR__2952
21444     0C 12 06 F6 | 	mov	arg01, #12
21448     CC 33 B0 FD | 	call	#__system___gc_alloc_managed
2144c     FD 24 0A F6 | 	mov	local04, result1 wz
21450     18 00 90 5D |  if_ne	jmp	#LR__2951
21454     EE 12 02 F6 | 	mov	arg01, abortchain
21458     07 14 06 F6 | 	mov	arg02, #7
2145c     01 16 06 F6 | 	mov	arg03, #1
21460     DA 00 A0 FD | 	call	#__longjmp
21464     01 FA 65 F6 | 	neg	result1, #1
21468     C8 00 90 FD | 	jmp	#LR__2959
2146c                 | LR__2951
2146c     12 01 68 FC | 	wrlong	#0, local04
21470     04 24 06 F1 | 	add	local04, #4
21474     12 01 68 FC | 	wrlong	#0, local04
21478     04 24 86 F1 | 	sub	local04, #4
2147c     13 25 62 FC | 	wrlong	local04, local05
21480                 | LR__2952
21480     00 1E 0E F2 | 	cmp	local01, #0 wz
21484     20 00 90 AD |  if_e	jmp	#LR__2953
21488     12 1F 62 FC | 	wrlong	local01, local04
2148c     12 FB 01 F6 | 	mov	result1, local04
21490     00 80 04 FF 
21494     00 FA 45 F5 | 	or	result1, ##150994944
21498     1C 26 06 F1 | 	add	local05, #28
2149c     13 FB 61 FC | 	wrlong	result1, local05
214a0     1C 26 86 F1 | 	sub	local05, #28
214a4     0C 00 90 FD | 	jmp	#LR__2954
214a8                 | LR__2953
214a8     1C 26 06 F1 | 	add	local05, #28
214ac     13 01 68 FC | 	wrlong	#0, local05
214b0     1C 26 86 F1 | 	sub	local05, #28
214b4                 | LR__2954
214b4     00 20 0E F2 | 	cmp	local02, #0 wz
214b8     28 00 90 AD |  if_e	jmp	#LR__2955
214bc     04 24 06 F1 | 	add	local04, #4
214c0     12 21 62 FC | 	wrlong	local02, local04
214c4     04 24 86 F1 | 	sub	local04, #4
214c8     12 FB 01 F6 | 	mov	result1, local04
214cc     00 88 04 FF 
214d0     00 FA 45 F5 | 	or	result1, ##152043520
214d4     20 26 06 F1 | 	add	local05, #32
214d8     13 FB 61 FC | 	wrlong	result1, local05
214dc     20 26 86 F1 | 	sub	local05, #32
214e0     0C 00 90 FD | 	jmp	#LR__2956
214e4                 | LR__2955
214e4     20 26 06 F1 | 	add	local05, #32
214e8     13 01 68 FC | 	wrlong	#0, local05
214ec     20 26 86 F1 | 	sub	local05, #32
214f0                 | LR__2956
214f0     00 22 0E F2 | 	cmp	local03, #0 wz
214f4     24 00 90 AD |  if_e	jmp	#LR__2957
214f8     08 24 06 F1 | 	add	local04, #8
214fc     12 23 62 FC | 	wrlong	local03, local04
21500     08 24 86 F1 | 	sub	local04, #8
21504     00 90 04 FF 
21508     00 24 46 F5 | 	or	local04, ##153092096
2150c     24 26 06 F1 | 	add	local05, #36
21510     13 25 62 FC | 	wrlong	local04, local05
21514     24 26 86 F1 | 	sub	local05, #36
21518     0C 00 90 FD | 	jmp	#LR__2958
2151c                 | LR__2957
2151c     24 26 06 F1 | 	add	local05, #36
21520     13 01 68 FC | 	wrlong	#0, local05
21524     24 26 86 F1 | 	sub	local05, #36
21528                 | LR__2958
21528     08 26 06 F1 | 	add	local05, #8
2152c     13 0F 68 FC | 	wrlong	#7, local05
21530     00 FA 05 F6 | 	mov	result1, #0
21534                 | LR__2959
21534     A7 F0 03 F6 | 	mov	ptra, fp
21538     B2 00 A0 FD | 	call	#popregs_
2153c                 | __system___basic_open_ret
2153c     2D 00 64 FD | 	ret
21540                 | 
21540                 | __system___basic_open_string
21540     04 4A 05 F6 | 	mov	COUNT_, #4
21544     A8 00 A0 FD | 	call	#pushregs_
21548     0A 1F 02 F6 | 	mov	local01, arg02
2154c     0B 21 02 F6 | 	mov	local02, arg03
21550     70 46 B0 FD | 	call	#__system____getftab
21554     FD 22 0A F6 | 	mov	local03, result1 wz
21558     18 00 90 5D |  if_ne	jmp	#LR__2960
2155c     EE 12 02 F6 | 	mov	arg01, abortchain
21560     0C 14 06 F6 | 	mov	arg02, #12
21564     01 16 06 F6 | 	mov	arg03, #1
21568     DA 00 A0 FD | 	call	#__longjmp
2156c     01 FA 65 F6 | 	neg	result1, #1
21570     58 00 90 FD | 	jmp	#LR__2962
21574                 | LR__2960
21574     08 22 06 F1 | 	add	local03, #8
21578     11 19 0A FB | 	rdlong	arg04, local03 wz
2157c     08 22 86 F1 | 	sub	local03, #8
21580     11 13 02 56 |  if_ne	mov	arg01, local03
21584     90 3D B0 5D |  if_ne	call	#__system___closeraw
21588     0F 15 02 F6 | 	mov	arg02, local01
2158c     10 17 02 F6 | 	mov	arg03, local02
21590     11 13 02 F6 | 	mov	arg01, local03
21594     B6 19 06 F6 | 	mov	arg04, #438
21598     78 3A B0 FD | 	call	#__system___openraw
2159c     FD 24 02 F6 | 	mov	local04, result1
215a0     00 24 56 F2 | 	cmps	local04, #0 wc
215a4     20 00 90 3D |  if_ae	jmp	#LR__2961
215a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
215ac     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
215b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
215b4     EE 12 02 F6 | 	mov	arg01, abortchain
215b8     01 16 06 F6 | 	mov	arg03, #1
215bc     DA 00 A0 FD | 	call	#__longjmp
215c0     01 FA 65 F6 | 	neg	result1, #1
215c4     04 00 90 FD | 	jmp	#LR__2962
215c8                 | LR__2961
215c8     12 FB 01 F6 | 	mov	result1, local04
215cc                 | LR__2962
215cc     A7 F0 03 F6 | 	mov	ptra, fp
215d0     B2 00 A0 FD | 	call	#popregs_
215d4                 | __system___basic_open_string_ret
215d4     2D 00 64 FD | 	ret
215d8                 | 
215d8                 | __system___basic_print_char
215d8     03 4A 05 F6 | 	mov	COUNT_, #3
215dc     A8 00 A0 FD | 	call	#pushregs_
215e0     0A 1F 02 F6 | 	mov	local01, arg02
215e4     30 4D B0 FD | 	call	#__system___gettxfunc
215e8     FD 20 0A F6 | 	mov	local02, result1 wz
215ec     00 FA 05 A6 |  if_e	mov	result1, #0
215f0     30 00 90 AD |  if_e	jmp	#LR__2970
215f4     10 23 02 F6 | 	mov	local03, local02
215f8     13 20 46 F7 | 	zerox	local02, #19
215fc     14 22 46 F0 | 	shr	local03, #20
21600     02 22 66 F0 | 	shl	local03, #2
21604     ED 22 02 F1 | 	add	local03, __methods__
21608     11 23 02 FB | 	rdlong	local03, local03
2160c     0F 13 02 F6 | 	mov	arg01, local01
21610     F2 1E 02 F6 | 	mov	local01, objptr
21614     10 E5 01 F6 | 	mov	objptr, local02
21618     2D 22 62 FD | 	call	local03
2161c     0F E5 01 F6 | 	mov	objptr, local01
21620     01 FA 05 F6 | 	mov	result1, #1
21624                 | LR__2970
21624     A7 F0 03 F6 | 	mov	ptra, fp
21628     B2 00 A0 FD | 	call	#popregs_
2162c                 | __system___basic_print_char_ret
2162c     2D 00 64 FD | 	ret
21630                 | 
21630                 | __system___basic_print_string
21630     03 4A 05 F6 | 	mov	COUNT_, #3
21634     A8 00 A0 FD | 	call	#pushregs_
21638     0A 1F 02 F6 | 	mov	local01, arg02
2163c     0B 21 02 F6 | 	mov	local02, arg03
21640     D4 4C B0 FD | 	call	#__system___gettxfunc
21644     FD 22 0A F6 | 	mov	local03, result1 wz
21648     00 FA 05 A6 |  if_e	mov	result1, #0
2164c     18 00 90 AD |  if_e	jmp	#LR__2980
21650     00 1E 0E F2 | 	cmp	local01, #0 wz
21654     00 FA 05 A6 |  if_e	mov	result1, #0
21658     11 13 02 56 |  if_ne	mov	arg01, local03
2165c     10 15 02 56 |  if_ne	mov	arg02, local02
21660     0F 17 02 56 |  if_ne	mov	arg03, local01
21664     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21668                 | LR__2980
21668     A7 F0 03 F6 | 	mov	ptra, fp
2166c     B2 00 A0 FD | 	call	#popregs_
21670                 | __system___basic_print_string_ret
21670     2D 00 64 FD | 	ret
21674                 | 
21674                 | __system___basic_print_integer
21674     04 4A 05 F6 | 	mov	COUNT_, #4
21678     A8 00 A0 FD | 	call	#pushregs_
2167c     0A 1F 02 F6 | 	mov	local01, arg02
21680     0B 21 02 F6 | 	mov	local02, arg03
21684     0C 23 02 F6 | 	mov	local03, arg04
21688     8C 4C B0 FD | 	call	#__system___gettxfunc
2168c     FD 24 0A F6 | 	mov	local04, result1 wz
21690     00 FA 05 A6 |  if_e	mov	result1, #0
21694     12 13 02 56 |  if_ne	mov	arg01, local04
21698     10 15 02 56 |  if_ne	mov	arg02, local02
2169c     0F 17 02 56 |  if_ne	mov	arg03, local01
216a0     11 19 02 56 |  if_ne	mov	arg04, local03
216a4     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
216a8     A7 F0 03 F6 | 	mov	ptra, fp
216ac     B2 00 A0 FD | 	call	#popregs_
216b0                 | __system___basic_print_integer_ret
216b0     2D 00 64 FD | 	ret
216b4                 | 
216b4                 | __system___basic_print_unsigned
216b4     03 4A 05 F6 | 	mov	COUNT_, #3
216b8     A8 00 A0 FD | 	call	#pushregs_
216bc     0A 1F 02 F6 | 	mov	local01, arg02
216c0     0B 21 02 F6 | 	mov	local02, arg03
216c4     0C 23 02 F6 | 	mov	local03, arg04
216c8     4C 4C B0 FD | 	call	#__system___gettxfunc
216cc     FD 12 0A F6 | 	mov	arg01, result1 wz
216d0     00 FA 05 A6 |  if_e	mov	result1, #0
216d4     3A 20 26 54 |  if_ne	bith	local02, #58
216d8     10 15 02 56 |  if_ne	mov	arg02, local02
216dc     0F 17 02 56 |  if_ne	mov	arg03, local01
216e0     11 19 02 56 |  if_ne	mov	arg04, local03
216e4     74 02 B0 5D |  if_ne	call	#__system___fmtnum
216e8     A7 F0 03 F6 | 	mov	ptra, fp
216ec     B2 00 A0 FD | 	call	#popregs_
216f0                 | __system___basic_print_unsigned_ret
216f0     2D 00 64 FD | 	ret
216f4                 | 
216f4                 | __system___basic_get_char
216f4     03 4A 05 F6 | 	mov	COUNT_, #3
216f8     A8 00 A0 FD | 	call	#pushregs_
216fc     5C 4C B0 FD | 	call	#__system___getrxfunc
21700     FD 1E 0A F6 | 	mov	local01, result1 wz
21704     01 FA 65 A6 |  if_e	neg	result1, #1
21708     28 00 90 AD |  if_e	jmp	#LR__2990
2170c     0F 21 02 F6 | 	mov	local02, local01
21710     13 1E 46 F7 | 	zerox	local01, #19
21714     14 20 46 F0 | 	shr	local02, #20
21718     02 20 66 F0 | 	shl	local02, #2
2171c     ED 20 02 F1 | 	add	local02, __methods__
21720     10 21 02 FB | 	rdlong	local02, local02
21724     F2 22 02 F6 | 	mov	local03, objptr
21728     0F E5 01 F6 | 	mov	objptr, local01
2172c     2D 20 62 FD | 	call	local02
21730     11 E5 01 F6 | 	mov	objptr, local03
21734                 | LR__2990
21734     A7 F0 03 F6 | 	mov	ptra, fp
21738     B2 00 A0 FD | 	call	#popregs_
2173c                 | __system___basic_get_char_ret
2173c     2D 00 64 FD | 	ret
21740                 | 
21740                 | __system___basic_put
21740     04 4A 05 F6 | 	mov	COUNT_, #4
21744     A8 00 A0 FD | 	call	#pushregs_
21748     0D 1F 02 F6 | 	mov	local01, arg05
2174c     0F 19 02 FD | 	qmul	arg04, local01
21750     09 21 02 F6 | 	mov	local02, arg01
21754     0B 23 02 F6 | 	mov	local03, arg03
21758     00 14 0E F2 | 	cmp	arg02, #0 wz
2175c     01 14 86 51 |  if_ne	sub	arg02, #1
21760     10 13 02 56 |  if_ne	mov	arg01, local02
21764     00 16 06 56 |  if_ne	mov	arg03, #0
21768     18 24 62 FD | 	getqx	local04
2176c     9C 42 B0 5D |  if_ne	call	#__system__lseek
21770     11 15 02 F6 | 	mov	arg02, local03
21774     12 17 02 F6 | 	mov	arg03, local04
21778     10 13 02 F6 | 	mov	arg01, local02
2177c     D8 41 B0 FD | 	call	#__system__write
21780     FD 24 02 F6 | 	mov	local04, result1
21784     01 24 56 F2 | 	cmps	local04, #1 wc
21788     10 00 90 CD |  if_b	jmp	#LR__3000
2178c     12 7D 02 F6 | 	mov	muldiva_, local04
21790     0F 7F 02 F6 | 	mov	muldivb_, local01
21794     BA 00 A0 FD | 	call	#divide_
21798     3F 25 02 F6 | 	mov	local04, muldivb_
2179c                 | LR__3000
2179c     12 FB 01 F6 | 	mov	result1, local04
217a0     A7 F0 03 F6 | 	mov	ptra, fp
217a4     B2 00 A0 FD | 	call	#popregs_
217a8                 | __system___basic_put_ret
217a8     2D 00 64 FD | 	ret
217ac                 | 
217ac                 | __system___basic_get
217ac     04 4A 05 F6 | 	mov	COUNT_, #4
217b0     A8 00 A0 FD | 	call	#pushregs_
217b4     0D 1F 02 F6 | 	mov	local01, arg05
217b8     0F 19 02 FD | 	qmul	arg04, local01
217bc     09 21 02 F6 | 	mov	local02, arg01
217c0     0B 23 02 F6 | 	mov	local03, arg03
217c4     00 14 0E F2 | 	cmp	arg02, #0 wz
217c8     01 14 86 51 |  if_ne	sub	arg02, #1
217cc     10 13 02 56 |  if_ne	mov	arg01, local02
217d0     00 16 06 56 |  if_ne	mov	arg03, #0
217d4     18 24 62 FD | 	getqx	local04
217d8     30 42 B0 5D |  if_ne	call	#__system__lseek
217dc     11 15 02 F6 | 	mov	arg02, local03
217e0     12 17 02 F6 | 	mov	arg03, local04
217e4     10 13 02 F6 | 	mov	arg01, local02
217e8     A8 41 B0 FD | 	call	#__system__read
217ec     FD 24 02 F6 | 	mov	local04, result1
217f0     01 24 56 F2 | 	cmps	local04, #1 wc
217f4     10 00 90 CD |  if_b	jmp	#LR__3010
217f8     12 7D 02 F6 | 	mov	muldiva_, local04
217fc     0F 7F 02 F6 | 	mov	muldivb_, local01
21800     BA 00 A0 FD | 	call	#divide_
21804     3F 25 02 F6 | 	mov	local04, muldivb_
21808                 | LR__3010
21808     12 FB 01 F6 | 	mov	result1, local04
2180c     A7 F0 03 F6 | 	mov	ptra, fp
21810     B2 00 A0 FD | 	call	#popregs_
21814                 | __system___basic_get_ret
21814     2D 00 64 FD | 	ret
21818                 | 
21818                 | __system___fmtchar
21818     00 4A 05 F6 | 	mov	COUNT_, #0
2181c     A8 00 A0 FD | 	call	#pushregs_
21820     10 F0 07 F1 | 	add	ptra, #16
21824     04 4E 05 F1 | 	add	fp, #4
21828     A7 12 62 FC | 	wrlong	arg01, fp
2182c     04 4E 05 F1 | 	add	fp, #4
21830     A7 14 62 FC | 	wrlong	arg02, fp
21834     04 4E 05 F1 | 	add	fp, #4
21838     A7 16 62 FC | 	wrlong	arg03, fp
2183c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21840     A7 16 62 FC | 	wrlong	arg03, fp
21844     08 4E 85 F1 | 	sub	fp, #8
21848     A7 12 02 FB | 	rdlong	arg01, fp
2184c     04 4E 05 F1 | 	add	fp, #4
21850     A7 14 02 FB | 	rdlong	arg02, fp
21854     04 4E 05 F1 | 	add	fp, #4
21858     A7 16 02 F6 | 	mov	arg03, fp
2185c     0C 4E 85 F1 | 	sub	fp, #12
21860     0C 00 B0 FD | 	call	#__system___fmtstr
21864     A7 F0 03 F6 | 	mov	ptra, fp
21868     B2 00 A0 FD | 	call	#popregs_
2186c                 | __system___fmtchar_ret
2186c     2D 00 64 FD | 	ret
21870                 | 
21870                 | __system___fmtstr
21870     09 4A 05 F6 | 	mov	COUNT_, #9
21874     A8 00 A0 FD | 	call	#pushregs_
21878     09 1F 02 F6 | 	mov	local01, arg01
2187c     0A 21 02 F6 | 	mov	local02, arg02
21880     0B 23 02 F6 | 	mov	local03, arg03
21884     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21888     11 13 02 F6 | 	mov	arg01, local03
2188c     09 25 02 F6 | 	mov	local04, arg01
21890     97 06 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
21894                 | LR__3020
21894     12 FB C9 FA | 	rdbyte	result1, local04 wz
21898     01 24 06 51 |  if_ne	add	local04, #1
2189c     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
218a0                 | LR__3021
218a0     09 25 82 F1 | 	sub	local04, arg01
218a4     00 18 0E F2 | 	cmp	arg04, #0 wz
218a8     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
218ac     10 15 02 F6 | 	mov	arg02, local02
218b0     12 17 02 F6 | 	mov	arg03, local04
218b4     0F 13 02 F6 | 	mov	arg01, local01
218b8     02 18 06 F6 | 	mov	arg04, #2
218bc     F8 46 B0 FD | 	call	#__system___fmtpad
218c0     FD 26 02 F6 | 	mov	local05, result1
218c4     00 26 56 F2 | 	cmps	local05, #0 wc
218c8     13 FB 01 C6 |  if_b	mov	result1, local05
218cc     80 00 90 CD |  if_b	jmp	#LR__3024
218d0     01 24 56 F2 | 	cmps	local04, #1 wc
218d4     50 00 90 CD |  if_b	jmp	#LR__3023
218d8     12 29 02 F6 | 	mov	local06, local04
218dc                 | LR__3022
218dc     0F 2B 02 F6 | 	mov	local07, local01
218e0     0F 2D 02 F6 | 	mov	local08, local01
218e4     13 2A 46 F7 | 	zerox	local07, #19
218e8     14 2C 46 F0 | 	shr	local08, #20
218ec     02 2C 66 F0 | 	shl	local08, #2
218f0     ED 2C 02 F1 | 	add	local08, __methods__
218f4     16 2D 02 FB | 	rdlong	local08, local08
218f8     11 13 C2 FA | 	rdbyte	arg01, local03
218fc     F2 2E 02 F6 | 	mov	local09, objptr
21900     15 E5 01 F6 | 	mov	objptr, local07
21904     01 22 06 F1 | 	add	local03, #1
21908     2D 2C 62 FD | 	call	local08
2190c     17 E5 01 F6 | 	mov	objptr, local09
21910     FD 2E 02 F6 | 	mov	local09, result1
21914     00 2E 56 F2 | 	cmps	local09, #0 wc
21918     17 FB 01 C6 |  if_b	mov	result1, local09
2191c     30 00 90 CD |  if_b	jmp	#LR__3024
21920     17 27 02 F1 | 	add	local05, local09
21924     ED 29 6E FB | 	djnz	local06, #LR__3022
21928                 | LR__3023
21928     10 15 02 F6 | 	mov	arg02, local02
2192c     12 17 02 F6 | 	mov	arg03, local04
21930     0F 13 02 F6 | 	mov	arg01, local01
21934     01 18 06 F6 | 	mov	arg04, #1
21938     7C 46 B0 FD | 	call	#__system___fmtpad
2193c     FD 2E 02 F6 | 	mov	local09, result1
21940     00 2E 56 F2 | 	cmps	local09, #0 wc
21944     17 FB 01 C6 |  if_b	mov	result1, local09
21948     17 27 02 31 |  if_ae	add	local05, local09
2194c     13 FB 01 36 |  if_ae	mov	result1, local05
21950                 | LR__3024
21950     A7 F0 03 F6 | 	mov	ptra, fp
21954     B2 00 A0 FD | 	call	#popregs_
21958                 | __system___fmtstr_ret
21958     2D 00 64 FD | 	ret
2195c                 | 
2195c                 | __system___fmtnum
2195c     0B 4A 05 F6 | 	mov	COUNT_, #11
21960     A8 00 A0 FD | 	call	#pushregs_
21964     09 1F 02 F6 | 	mov	local01, arg01
21968     0A 21 02 F6 | 	mov	local02, arg02
2196c     0B 23 02 F6 | 	mov	local03, arg03
21970     0C 25 02 F6 | 	mov	local04, arg04
21974     F8 27 02 F6 | 	mov	local05, ptra
21978     13 29 02 F6 | 	mov	local06, local05
2197c     00 2A 06 F6 | 	mov	local07, #0
21980     10 2D 02 F6 | 	mov	local08, local02
21984     10 2C 46 F0 | 	shr	local08, #16
21988     3F 2C 06 F5 | 	and	local08, #63
2198c     10 2F E2 F8 | 	getbyte	local09, local02, #0
21990     10 31 02 F6 | 	mov	local10, local02
21994     1A 30 46 F0 | 	shr	local10, #26
21998     03 30 06 F5 | 	and	local10, #3
2199c     18 33 02 F6 | 	mov	local11, local10
219a0     01 2C 56 F2 | 	cmps	local08, #1 wc
219a4     44 F0 07 F1 | 	add	ptra, #68
219a8     01 2C 86 31 |  if_ae	sub	local08, #1
219ac     41 2E 56 F2 | 	cmps	local09, #65 wc
219b0     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
219b4     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
219b8     03 32 0E F2 | 	cmp	local11, #3 wz
219bc     00 32 06 A6 |  if_e	mov	local11, #0
219c0     00 22 56 52 |  if_ne	cmps	local03, #0 wc
219c4     04 32 06 46 |  if_c_and_nz	mov	local11, #4
219c8     11 23 62 46 |  if_c_and_nz	neg	local03, local03
219cc     00 32 0E F2 | 	cmp	local11, #0 wz
219d0     4C 00 90 AD |  if_e	jmp	#LR__3033
219d4     01 2A 06 F6 | 	mov	local07, #1
219d8     17 2D 0A F2 | 	cmp	local08, local09 wz
219dc     18 00 90 5D |  if_ne	jmp	#LR__3031
219e0     05 2C 6E FB | 	djnz	local08, #LR__3030
219e4     0F 13 02 F6 | 	mov	arg01, local01
219e8     10 15 02 F6 | 	mov	arg02, local02
219ec     23 16 06 F6 | 	mov	arg03, #35
219f0     24 FE BF FD | 	call	#__system___fmtchar
219f4     88 00 90 FD | 	jmp	#LR__3037
219f8                 | LR__3030
219f8                 | LR__3031
219f8     02 32 0E F2 | 	cmp	local11, #2 wz
219fc     14 31 02 A6 |  if_e	mov	local10, local06
21a00     01 28 06 A1 |  if_e	add	local06, #1
21a04     18 41 48 AC |  if_e	wrbyte	#32, local10
21a08     14 00 90 AD |  if_e	jmp	#LR__3032
21a0c     04 32 0E F2 | 	cmp	local11, #4 wz
21a10     14 5B 48 AC |  if_e	wrbyte	#45, local06
21a14     01 28 06 A1 |  if_e	add	local06, #1
21a18     14 57 48 5C |  if_ne	wrbyte	#43, local06
21a1c     01 28 06 51 |  if_ne	add	local06, #1
21a20                 | LR__3032
21a20                 | LR__3033
21a20     14 13 02 F6 | 	mov	arg01, local06
21a24     11 15 02 F6 | 	mov	arg02, local03
21a28     12 17 02 F6 | 	mov	arg03, local04
21a2c     16 19 02 F6 | 	mov	arg04, local08
21a30     00 1A 06 F6 | 	mov	arg05, #0
21a34     1D 20 2E F4 | 	testbn	local02, #29 wz
21a38     01 1A 06 56 |  if_ne	mov	arg05, #1
21a3c     40 46 B0 FD | 	call	#__system___uitoa
21a40     FD 2A 02 F1 | 	add	local07, result1
21a44     17 2B 5A F2 | 	cmps	local07, local09 wcz
21a48     24 00 90 ED |  if_be	jmp	#LR__3036
21a4c     97 0E 48 FB | 	callpa	#(@LR__3035-@LR__3034)>>2,fcache_load_ptr_
21a50                 | LR__3034
21a50     17 31 02 F6 | 	mov	local10, local09
21a54     01 30 56 F2 | 	cmps	local10, #1 wc
21a58     01 2E 86 F1 | 	sub	local09, #1
21a5c     14 31 02 36 |  if_ae	mov	local10, local06
21a60     01 28 06 31 |  if_ae	add	local06, #1
21a64     18 47 48 3C |  if_ae	wrbyte	#35, local10
21a68     E4 FF 9F 3D |  if_ae	jmp	#LR__3034
21a6c                 | LR__3035
21a6c     14 01 48 FC | 	wrbyte	#0, local06
21a70                 | LR__3036
21a70     0F 13 02 F6 | 	mov	arg01, local01
21a74     10 15 02 F6 | 	mov	arg02, local02
21a78     13 17 02 F6 | 	mov	arg03, local05
21a7c     F0 FD BF FD | 	call	#__system___fmtstr
21a80                 | LR__3037
21a80     A7 F0 03 F6 | 	mov	ptra, fp
21a84     B2 00 A0 FD | 	call	#popregs_
21a88                 | __system___fmtnum_ret
21a88     2D 00 64 FD | 	ret
21a8c                 | 
21a8c                 | __system___fmtfloat
21a8c     10 4A 05 F6 | 	mov	COUNT_, #16
21a90     A8 00 A0 FD | 	call	#pushregs_
21a94     24 F1 07 F1 | 	add	ptra, #292
21a98     04 4E 05 F1 | 	add	fp, #4
21a9c     A7 12 62 FC | 	wrlong	arg01, fp
21aa0     04 4E 05 F1 | 	add	fp, #4
21aa4     A7 14 62 FC | 	wrlong	arg02, fp
21aa8     04 4E 05 F1 | 	add	fp, #4
21aac     A7 16 62 FC | 	wrlong	arg03, fp
21ab0     04 4E 05 F1 | 	add	fp, #4
21ab4     A7 18 62 FC | 	wrlong	arg04, fp
21ab8     0C 4E 05 F1 | 	add	fp, #12
21abc     A7 14 68 FC | 	wrlong	#10, fp
21ac0     08 4E 05 F1 | 	add	fp, #8
21ac4     A7 00 68 FC | 	wrlong	#0, fp
21ac8     08 4E 05 F1 | 	add	fp, #8
21acc     A7 00 68 FC | 	wrlong	#0, fp
21ad0     08 4E 05 F1 | 	add	fp, #8
21ad4     A7 00 68 FC | 	wrlong	#0, fp
21ad8     04 4E 05 F1 | 	add	fp, #4
21adc     A7 04 68 FC | 	wrlong	#2, fp
21ae0     04 4E 05 F1 | 	add	fp, #4
21ae4     A7 00 68 FC | 	wrlong	#0, fp
21ae8     04 4E 05 F1 | 	add	fp, #4
21aec     A7 00 68 FC | 	wrlong	#0, fp
21af0     04 4E 05 F1 | 	add	fp, #4
21af4     A7 00 68 FC | 	wrlong	#0, fp
21af8     04 4E 05 F1 | 	add	fp, #4
21afc     A7 00 68 FC | 	wrlong	#0, fp
21b00     18 4E 05 F1 | 	add	fp, #24
21b04     A7 00 68 FC | 	wrlong	#0, fp
21b08     68 4E 05 F1 | 	add	fp, #104
21b0c     A7 1E 02 F6 | 	mov	local01, fp
21b10     08 4E 85 F1 | 	sub	fp, #8
21b14     A7 1E 62 FC | 	wrlong	local01, fp
21b18     04 4E 05 F1 | 	add	fp, #4
21b1c     A7 1E 62 FC | 	wrlong	local01, fp
21b20     BC 4E 85 F1 | 	sub	fp, #188
21b24     A7 1E 02 FB | 	rdlong	local01, fp
21b28     10 1E 46 F0 | 	shr	local01, #16
21b2c     3F 1E 06 F5 | 	and	local01, #63
21b30     B0 4E 05 F1 | 	add	fp, #176
21b34     A7 1E 62 FC | 	wrlong	local01, fp
21b38     B0 4E 85 F1 | 	sub	fp, #176
21b3c     A7 1E 02 FB | 	rdlong	local01, fp
21b40     1C 1E 46 F0 | 	shr	local01, #28
21b44     01 1E 06 F5 | 	and	local01, #1
21b48     08 4F 05 F1 | 	add	fp, #264
21b4c     A7 1E 62 FC | 	wrlong	local01, fp
21b50     58 4E 85 F1 | 	sub	fp, #88
21b54     A7 1E 0A FB | 	rdlong	local01, fp wz
21b58     B8 4E 85 F1 | 	sub	fp, #184
21b5c     3C 00 90 5D |  if_ne	jmp	#LR__3041
21b60     10 4E 05 F1 | 	add	fp, #16
21b64     A7 1E 02 FB | 	rdlong	local01, fp
21b68     10 4E 85 F1 | 	sub	fp, #16
21b6c     61 1E 0E F2 | 	cmp	local01, #97 wz
21b70     18 00 90 5D |  if_ne	jmp	#LR__3040
21b74     B8 4E 05 F1 | 	add	fp, #184
21b78     A7 1A 68 FC | 	wrlong	#13, fp
21b7c     84 4E 85 F1 | 	sub	fp, #132
21b80     A7 02 68 FC | 	wrlong	#1, fp
21b84     34 4E 85 F1 | 	sub	fp, #52
21b88     24 00 90 FD | 	jmp	#LR__3042
21b8c                 | LR__3040
21b8c     B8 4E 05 F1 | 	add	fp, #184
21b90     A7 0C 68 FC | 	wrlong	#6, fp
21b94     B8 4E 85 F1 | 	sub	fp, #184
21b98     14 00 90 FD | 	jmp	#LR__3042
21b9c                 | LR__3041
21b9c     B8 4E 05 F1 | 	add	fp, #184
21ba0     A7 1E 02 FB | 	rdlong	local01, fp
21ba4     01 1E 86 F1 | 	sub	local01, #1
21ba8     A7 1E 62 FC | 	wrlong	local01, fp
21bac     B8 4E 85 F1 | 	sub	fp, #184
21bb0                 | LR__3042
21bb0     08 4E 05 F1 | 	add	fp, #8
21bb4     A7 1E 02 FB | 	rdlong	local01, fp
21bb8     16 1E 46 F0 | 	shr	local01, #22
21bbc     03 1E 06 F5 | 	and	local01, #3
21bc0     04 4F 05 F1 | 	add	fp, #260
21bc4     A7 1E 62 FC | 	wrlong	local01, fp
21bc8     04 4F 85 F1 | 	sub	fp, #260
21bcc     A7 1E 02 FB | 	rdlong	local01, fp
21bd0     1D 1E 46 F0 | 	shr	local01, #29
21bd4     01 1E 06 F5 | 	and	local01, #1
21bd8     B4 4E 05 F1 | 	add	fp, #180
21bdc     A7 1E 62 FC | 	wrlong	local01, fp
21be0     B4 4E 85 F1 | 	sub	fp, #180
21be4     A7 1E 02 FB | 	rdlong	local01, fp
21be8     0F 1F EA F8 | 	getbyte	local01, local01, #1
21bec     60 4E 05 F1 | 	add	fp, #96
21bf0     A7 1E 62 FC | 	wrlong	local01, fp
21bf4     60 4E 85 F1 | 	sub	fp, #96
21bf8     A7 1E 02 FB | 	rdlong	local01, fp
21bfc     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21c00     64 4E 05 F1 | 	add	fp, #100
21c04     A7 1E 62 FC | 	wrlong	local01, fp
21c08     00 1E 06 F6 | 	mov	local01, #0
21c0c     5C 4E 85 F1 | 	sub	fp, #92
21c10     A7 1A 02 FB | 	rdlong	arg05, fp
21c14     65 1A 0E F2 | 	cmp	arg05, #101 wz
21c18     01 1E 06 A6 |  if_e	mov	local01, #1
21c1c     14 4E 05 F1 | 	add	fp, #20
21c20     A7 1E 62 FC | 	wrlong	local01, fp
21c24     98 4E 05 F1 | 	add	fp, #152
21c28     A7 20 0A FB | 	rdlong	local02, fp wz
21c2c     45 1E 06 56 |  if_ne	mov	local01, #69
21c30     65 1E 06 A6 |  if_e	mov	local01, #101
21c34     8C 4E 85 F1 | 	sub	fp, #140
21c38     A7 1E 62 FC | 	wrlong	local01, fp
21c3c     20 4E 85 F1 | 	sub	fp, #32
21c40     A7 1E 02 FB | 	rdlong	local01, fp
21c44     10 4E 85 F1 | 	sub	fp, #16
21c48     61 1E 0E F2 | 	cmp	local01, #97 wz
21c4c     4C 00 90 5D |  if_ne	jmp	#LR__3043
21c50     24 4E 05 F1 | 	add	fp, #36
21c54     A7 02 68 FC | 	wrlong	#1, fp
21c58     98 4E 05 F1 | 	add	fp, #152
21c5c     A7 20 0A FB | 	rdlong	local02, fp wz
21c60     50 1E 06 56 |  if_ne	mov	local01, #80
21c64     70 1E 06 A6 |  if_e	mov	local01, #112
21c68     8C 4E 85 F1 | 	sub	fp, #140
21c6c     A7 1E 62 FC | 	wrlong	local01, fp
21c70     14 4E 85 F1 | 	sub	fp, #20
21c74     A7 04 68 FC | 	wrlong	#2, fp
21c78     1C 4E 05 F1 | 	add	fp, #28
21c7c     A7 02 68 FC | 	wrlong	#1, fp
21c80     84 4E 05 F1 | 	add	fp, #132
21c84     A7 20 0A FB | 	rdlong	local02, fp wz
21c88     58 1E 06 56 |  if_ne	mov	local01, #88
21c8c     78 1E 06 A6 |  if_e	mov	local01, #120
21c90     7C 4E 85 F1 | 	sub	fp, #124
21c94     A7 1E 62 FC | 	wrlong	local01, fp
21c98     40 4E 85 F1 | 	sub	fp, #64
21c9c                 | LR__3043
21c9c     10 4E 05 F1 | 	add	fp, #16
21ca0     A7 1E 02 FB | 	rdlong	local01, fp
21ca4     10 4E 85 F1 | 	sub	fp, #16
21ca8     23 1E 0E F2 | 	cmp	local01, #35 wz
21cac     3C 00 90 5D |  if_ne	jmp	#LR__3046
21cb0     48 4E 05 F1 | 	add	fp, #72
21cb4     A7 02 68 FC | 	wrlong	#1, fp
21cb8     C8 4E 05 F1 | 	add	fp, #200
21cbc     A7 1E 0A FB | 	rdlong	local01, fp wz
21cc0     10 4F 85 F1 | 	sub	fp, #272
21cc4     18 00 90 AD |  if_e	jmp	#LR__3044
21cc8     10 4E 05 F1 | 	add	fp, #16
21ccc     A7 CC 68 FC | 	wrlong	#102, fp
21cd0     00 4F 05 F1 | 	add	fp, #256
21cd4     A7 00 68 FC | 	wrlong	#0, fp
21cd8     10 4F 85 F1 | 	sub	fp, #272
21cdc     0C 00 90 FD | 	jmp	#LR__3045
21ce0                 | LR__3044
21ce0     10 4F 05 F1 | 	add	fp, #272
21ce4     A7 02 68 FC | 	wrlong	#1, fp
21ce8     10 4F 85 F1 | 	sub	fp, #272
21cec                 | LR__3045
21cec                 | LR__3046
21cec     08 4E 05 F1 | 	add	fp, #8
21cf0     A7 1E 02 FB | 	rdlong	local01, fp
21cf4     1A 1E 46 F0 | 	shr	local01, #26
21cf8     03 1E 06 F5 | 	and	local01, #3
21cfc     5C 4E 05 F1 | 	add	fp, #92
21d00     A7 1E 62 FC | 	wrlong	local01, fp
21d04     58 4E 85 F1 | 	sub	fp, #88
21d08     A7 FA 01 FB | 	rdlong	result1, fp
21d0c     0C 4E 85 F1 | 	sub	fp, #12
21d10     1F FA 4D F0 | 	shr	result1, #31 wz
21d14     20 00 90 AD |  if_e	jmp	#LR__3047
21d18     2C 4E 05 F1 | 	add	fp, #44
21d1c     A7 5A 68 FC | 	wrlong	#45, fp
21d20     20 4E 85 F1 | 	sub	fp, #32
21d24     A7 FA 01 FB | 	rdlong	result1, fp
21d28     1F FA E5 F4 | 	bitnot	result1, #31
21d2c     A7 FA 61 FC | 	wrlong	result1, fp
21d30     0C 4E 85 F1 | 	sub	fp, #12
21d34     3C 00 90 FD | 	jmp	#LR__3049
21d38                 | LR__3047
21d38     64 4E 05 F1 | 	add	fp, #100
21d3c     A7 1E 02 FB | 	rdlong	local01, fp
21d40     64 4E 85 F1 | 	sub	fp, #100
21d44     01 1E 0E F2 | 	cmp	local01, #1 wz
21d48     2C 4E 05 A1 |  if_e	add	fp, #44
21d4c     A7 56 68 AC |  if_e	wrlong	#43, fp
21d50     2C 4E 85 A1 |  if_e	sub	fp, #44
21d54     1C 00 90 AD |  if_e	jmp	#LR__3048
21d58     64 4E 05 F1 | 	add	fp, #100
21d5c     A7 1E 02 FB | 	rdlong	local01, fp
21d60     64 4E 85 F1 | 	sub	fp, #100
21d64     02 1E 0E F2 | 	cmp	local01, #2 wz
21d68     2C 4E 05 A1 |  if_e	add	fp, #44
21d6c     A7 40 68 AC |  if_e	wrlong	#32, fp
21d70     2C 4E 85 A1 |  if_e	sub	fp, #44
21d74                 | LR__3048
21d74                 | LR__3049
21d74     08 4E 05 F1 | 	add	fp, #8
21d78     A7 1E 02 FB | 	rdlong	local01, fp
21d7c     18 1E 46 F0 | 	shr	local01, #24
21d80     03 1E 06 F5 | 	and	local01, #3
21d84     3C 4E 05 F1 | 	add	fp, #60
21d88     A7 1E 62 FC | 	wrlong	local01, fp
21d8c     00 1E 06 F6 | 	mov	local01, #0
21d90     18 4E 85 F1 | 	sub	fp, #24
21d94     A7 22 0A FB | 	rdlong	local03, fp wz
21d98     2C 4E 85 F1 | 	sub	fp, #44
21d9c     18 00 90 5D |  if_ne	jmp	#LR__3050
21da0     1C 4E 05 F1 | 	add	fp, #28
21da4     A7 24 02 FB | 	rdlong	local04, fp
21da8     1C 4E 85 F1 | 	sub	fp, #28
21dac     12 27 02 F6 | 	mov	local05, local04
21db0     0A 26 0E F2 | 	cmp	local05, #10 wz
21db4     04 00 90 AD |  if_e	jmp	#LR__3051
21db8                 | LR__3050
21db8     01 1E 66 F5 | 	xor	local01, #1
21dbc                 | LR__3051
21dbc     3C 4E 05 F1 | 	add	fp, #60
21dc0     A7 1E 62 FC | 	wrlong	local01, fp
21dc4     3C 4E 85 F1 | 	sub	fp, #60
21dc8     00 1E 0E F2 | 	cmp	local01, #0 wz
21dcc     0C 01 90 AD |  if_e	jmp	#LR__3053
21dd0     44 4E 05 F1 | 	add	fp, #68
21dd4     A7 26 02 FB | 	rdlong	local05, fp
21dd8     44 4E 85 F1 | 	sub	fp, #68
21ddc     13 23 02 F6 | 	mov	local03, local05
21de0     02 22 0E F2 | 	cmp	local03, #2 wz
21de4     F4 00 90 5D |  if_ne	jmp	#LR__3053
21de8     0C 4F 05 F1 | 	add	fp, #268
21dec     A7 28 02 FB | 	rdlong	local06, fp
21df0     0C 4F 85 F1 | 	sub	fp, #268
21df4     14 25 02 F6 | 	mov	local04, local06
21df8     02 24 0E F2 | 	cmp	local04, #2 wz
21dfc     DC 00 90 AD |  if_e	jmp	#LR__3053
21e00     C0 4E 05 F1 | 	add	fp, #192
21e04     A7 12 02 FB | 	rdlong	arg01, fp
21e08     94 4E 85 F1 | 	sub	fp, #148
21e0c     A7 14 02 FB | 	rdlong	arg02, fp
21e10     14 4E 05 F1 | 	add	fp, #20
21e14     A7 16 02 FB | 	rdlong	arg03, fp
21e18     40 4E 85 F1 | 	sub	fp, #64
21e1c     C8 44 B0 FD | 	call	#__system__emitsign_0500
21e20     14 4F 05 F1 | 	add	fp, #276
21e24     A7 FA 61 FC | 	wrlong	result1, fp
21e28     14 4F 85 F1 | 	sub	fp, #276
21e2c     00 FA 55 F2 | 	cmps	result1, #0 wc
21e30     14 4F 05 C1 |  if_b	add	fp, #276
21e34     A7 FA 01 CB |  if_b	rdlong	result1, fp
21e38     14 4F 85 C1 |  if_b	sub	fp, #276
21e3c     6C 0B 90 CD |  if_b	jmp	#LR__3103
21e40     C0 4E 05 F1 | 	add	fp, #192
21e44     A7 1E 02 FB | 	rdlong	local01, fp
21e48     54 4E 05 F1 | 	add	fp, #84
21e4c     A7 26 02 FB | 	rdlong	local05, fp
21e50     13 23 02 F6 | 	mov	local03, local05
21e54     13 1F 02 F1 | 	add	local01, local05
21e58     54 4E 85 F1 | 	sub	fp, #84
21e5c     A7 1E 62 FC | 	wrlong	local01, fp
21e60     58 4E 85 F1 | 	sub	fp, #88
21e64     A7 1E 0A FB | 	rdlong	local01, fp wz
21e68     68 4E 85 F1 | 	sub	fp, #104
21e6c     60 00 90 AD |  if_e	jmp	#LR__3052
21e70     68 4E 05 F1 | 	add	fp, #104
21e74     A7 1E 02 FB | 	rdlong	local01, fp
21e78     AC 4E 05 F1 | 	add	fp, #172
21e7c     A7 22 02 FB | 	rdlong	local03, fp
21e80     11 1F 82 F1 | 	sub	local01, local03
21e84     AC 4E 85 F1 | 	sub	fp, #172
21e88     A7 1E 62 FC | 	wrlong	local01, fp
21e8c     68 4E 85 F1 | 	sub	fp, #104
21e90     00 1E 56 F2 | 	cmps	local01, #0 wc
21e94     68 4E 05 C1 |  if_b	add	fp, #104
21e98     A7 00 68 CC |  if_b	wrlong	#0, fp
21e9c     68 4E 85 C1 |  if_b	sub	fp, #104
21ea0     08 4E 05 F1 | 	add	fp, #8
21ea4     A7 1E 02 FB | 	rdlong	local01, fp
21ea8     E8 1E 06 F4 | 	bitl	local01, #232
21eac     A7 1E 62 FC | 	wrlong	local01, fp
21eb0     60 4E 05 F1 | 	add	fp, #96
21eb4     A7 26 02 FB | 	rdlong	local05, fp
21eb8     13 23 02 F6 | 	mov	local03, local05
21ebc     08 22 66 F0 | 	shl	local03, #8
21ec0     11 1F 42 F5 | 	or	local01, local03
21ec4     60 4E 85 F1 | 	sub	fp, #96
21ec8     A7 1E 62 FC | 	wrlong	local01, fp
21ecc     08 4E 85 F1 | 	sub	fp, #8
21ed0                 | LR__3052
21ed0     3C 4E 05 F1 | 	add	fp, #60
21ed4     A7 00 68 FC | 	wrlong	#0, fp
21ed8     3C 4E 85 F1 | 	sub	fp, #60
21edc                 | LR__3053
21edc     0C 4E 05 F1 | 	add	fp, #12
21ee0     A7 12 02 FB | 	rdlong	arg01, fp
21ee4     0C 4E 85 F1 | 	sub	fp, #12
21ee8     28 1F B0 FD | 	call	#__system____builtin_ilogb
21eec     FF FF 3F FF 
21ef0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21ef4     50 00 90 5D |  if_ne	jmp	#LR__3055
21ef8     2C 4E 05 F1 | 	add	fp, #44
21efc     A7 1E 0A FB | 	rdlong	local01, fp wz
21f00     2C 4E 85 F1 | 	sub	fp, #44
21f04     24 00 90 AD |  if_e	jmp	#LR__3054
21f08     C0 4E 05 F1 | 	add	fp, #192
21f0c     A7 20 02 FB | 	rdlong	local02, fp
21f10     10 23 02 F6 | 	mov	local03, local02
21f14     01 22 06 F1 | 	add	local03, #1
21f18     A7 22 62 FC | 	wrlong	local03, fp
21f1c     94 4E 85 F1 | 	sub	fp, #148
21f20     A7 24 02 FB | 	rdlong	local04, fp
21f24     2C 4E 85 F1 | 	sub	fp, #44
21f28     10 25 42 FC | 	wrbyte	local04, local02
21f2c                 | LR__3054
21f2c     C0 4E 05 F1 | 	add	fp, #192
21f30     A7 12 02 FB | 	rdlong	arg01, fp
21f34     C0 4E 85 F1 | 	sub	fp, #192
21f38     80 01 00 FF 
21f3c     86 15 06 F6 | 	mov	arg02, ##@LR__5021
21f40     AC E9 BF FD | 	call	#__system____builtin_strcpy
21f44     A4 08 90 FD | 	jmp	#LR__3091
21f48                 | LR__3055
21f48     0C 4E 05 F1 | 	add	fp, #12
21f4c     A7 20 02 FB | 	rdlong	local02, fp
21f50     0C 4E 85 F1 | 	sub	fp, #12
21f54     10 13 02 F6 | 	mov	arg01, local02
21f58     B8 1E B0 FD | 	call	#__system____builtin_ilogb
21f5c     00 00 40 FF 
21f60     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
21f64     50 00 90 5D |  if_ne	jmp	#LR__3057
21f68     2C 4E 05 F1 | 	add	fp, #44
21f6c     A7 1E 0A FB | 	rdlong	local01, fp wz
21f70     2C 4E 85 F1 | 	sub	fp, #44
21f74     24 00 90 AD |  if_e	jmp	#LR__3056
21f78     C0 4E 05 F1 | 	add	fp, #192
21f7c     A7 20 02 FB | 	rdlong	local02, fp
21f80     10 23 02 F6 | 	mov	local03, local02
21f84     01 22 06 F1 | 	add	local03, #1
21f88     A7 22 62 FC | 	wrlong	local03, fp
21f8c     94 4E 85 F1 | 	sub	fp, #148
21f90     A7 24 02 FB | 	rdlong	local04, fp
21f94     2C 4E 85 F1 | 	sub	fp, #44
21f98     10 25 42 FC | 	wrbyte	local04, local02
21f9c                 | LR__3056
21f9c     C0 4E 05 F1 | 	add	fp, #192
21fa0     A7 12 02 FB | 	rdlong	arg01, fp
21fa4     C0 4E 85 F1 | 	sub	fp, #192
21fa8     80 01 00 FF 
21fac     8A 15 06 F6 | 	mov	arg02, ##@LR__5022
21fb0     3C E9 BF FD | 	call	#__system____builtin_strcpy
21fb4     34 08 90 FD | 	jmp	#LR__3091
21fb8                 | LR__3057
21fb8     10 4E 05 F1 | 	add	fp, #16
21fbc     A7 1E 02 FB | 	rdlong	local01, fp
21fc0     10 4E 85 F1 | 	sub	fp, #16
21fc4     67 1E 0E F2 | 	cmp	local01, #103 wz
21fc8     10 4E 05 51 |  if_ne	add	fp, #16
21fcc     A7 22 02 5B |  if_ne	rdlong	local03, fp
21fd0     10 4E 85 51 |  if_ne	sub	fp, #16
21fd4     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
21fd8     94 01 90 5D |  if_ne	jmp	#LR__3062
21fdc     0C 4E 05 F1 | 	add	fp, #12
21fe0     A7 12 02 FB | 	rdlong	arg01, fp
21fe4     08 4E 05 F1 | 	add	fp, #8
21fe8     A7 14 02 F6 | 	mov	arg02, fp
21fec     0C 4E 05 F1 | 	add	fp, #12
21ff0     A7 16 02 F6 | 	mov	arg03, fp
21ff4     98 4E 05 F1 | 	add	fp, #152
21ff8     A7 18 02 FB | 	rdlong	arg04, fp
21ffc     9C 4E 85 F1 | 	sub	fp, #156
22000     A7 1A 02 FB | 	rdlong	arg05, fp
22004     1C 4E 85 F1 | 	sub	fp, #28
22008     E8 40 B0 FD | 	call	#__system__disassemble_0498
2200c     10 4E 05 F1 | 	add	fp, #16
22010     A7 1E 02 FB | 	rdlong	local01, fp
22014     10 4E 85 F1 | 	sub	fp, #16
22018     23 1E 0E F2 | 	cmp	local01, #35 wz
2201c     A0 00 90 5D |  if_ne	jmp	#LR__3059
22020     20 4E 05 F1 | 	add	fp, #32
22024     A7 1E 02 FB | 	rdlong	local01, fp
22028     98 4E 05 F1 | 	add	fp, #152
2202c     A7 22 02 FB | 	rdlong	local03, fp
22030     B8 4E 85 F1 | 	sub	fp, #184
22034     11 1F 5A F2 | 	cmps	local01, local03 wcz
22038     24 4E 05 11 |  if_a	add	fp, #36
2203c     A7 02 68 1C |  if_a	wrlong	#1, fp
22040     24 4E 85 11 |  if_a	sub	fp, #36
22044     A4 01 90 1D |  if_a	jmp	#LR__3065
22048     20 4E 05 F1 | 	add	fp, #32
2204c     A7 1E 02 FB | 	rdlong	local01, fp
22050     20 4E 85 F1 | 	sub	fp, #32
22054     00 1E 56 F2 | 	cmps	local01, #0 wc
22058     2C 00 90 3D |  if_ae	jmp	#LR__3058
2205c     B8 4E 05 F1 | 	add	fp, #184
22060     A7 1E 02 FB | 	rdlong	local01, fp
22064     0F 1F 62 F6 | 	neg	local01, local01
22068     98 4E 85 F1 | 	sub	fp, #152
2206c     A7 22 02 FB | 	rdlong	local03, fp
22070     20 4E 85 F1 | 	sub	fp, #32
22074     0F 23 5A F2 | 	cmps	local03, local01 wcz
22078     24 4E 05 E1 |  if_be	add	fp, #36
2207c     A7 02 68 EC |  if_be	wrlong	#1, fp
22080     24 4E 85 E1 |  if_be	sub	fp, #36
22084     64 01 90 FD | 	jmp	#LR__3065
22088                 | LR__3058
22088     20 4E 05 F1 | 	add	fp, #32
2208c     A7 1E 02 FB | 	rdlong	local01, fp
22090     20 4E 85 F1 | 	sub	fp, #32
22094     01 1E 56 F2 | 	cmps	local01, #1 wc
22098     50 01 90 CD |  if_b	jmp	#LR__3065
2209c     B8 4E 05 F1 | 	add	fp, #184
220a0     A7 1E 02 FB | 	rdlong	local01, fp
220a4     98 4E 85 F1 | 	sub	fp, #152
220a8     A7 22 02 FB | 	rdlong	local03, fp
220ac     11 1F 82 F1 | 	sub	local01, local03
220b0     98 4E 05 F1 | 	add	fp, #152
220b4     A7 1E 62 FC | 	wrlong	local01, fp
220b8     B8 4E 85 F1 | 	sub	fp, #184
220bc     2C 01 90 FD | 	jmp	#LR__3065
220c0                 | LR__3059
220c0     00 1E 06 F6 | 	mov	local01, #0
220c4     08 4E 05 F1 | 	add	fp, #8
220c8     A7 20 02 FB | 	rdlong	local02, fp
220cc     1C 20 46 F0 | 	shr	local02, #28
220d0     01 20 0E F5 | 	and	local02, #1 wz
220d4     01 1E 06 A6 |  if_e	mov	local01, #1
220d8     2C 4E 05 F1 | 	add	fp, #44
220dc     A7 1E 62 FC | 	wrlong	local01, fp
220e0     14 4E 85 F1 | 	sub	fp, #20
220e4     A7 1E 02 FB | 	rdlong	local01, fp
220e8     98 4E 05 F1 | 	add	fp, #152
220ec     A7 22 02 FB | 	rdlong	local03, fp
220f0     B8 4E 85 F1 | 	sub	fp, #184
220f4     11 1F 52 F2 | 	cmps	local01, local03 wc
220f8     18 00 90 3D |  if_ae	jmp	#LR__3060
220fc     20 4E 05 F1 | 	add	fp, #32
22100     A7 24 02 FB | 	rdlong	local04, fp
22104     20 4E 85 F1 | 	sub	fp, #32
22108     FF FF 7F FF 
2210c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22110     10 00 90 3D |  if_ae	jmp	#LR__3061
22114                 | LR__3060
22114     24 4E 05 F1 | 	add	fp, #36
22118     A7 02 68 FC | 	wrlong	#1, fp
2211c     24 4E 85 F1 | 	sub	fp, #36
22120     C8 00 90 FD | 	jmp	#LR__3065
22124                 | LR__3061
22124     B8 4E 05 F1 | 	add	fp, #184
22128     A7 24 02 FB | 	rdlong	local04, fp
2212c     98 4E 85 F1 | 	sub	fp, #152
22130     A7 22 02 FB | 	rdlong	local03, fp
22134     11 25 82 F1 | 	sub	local04, local03
22138     98 4E 05 F1 | 	add	fp, #152
2213c     A7 24 62 FC | 	wrlong	local04, fp
22140     AC 4E 85 F1 | 	sub	fp, #172
22144     A7 12 02 FB | 	rdlong	arg01, fp
22148     08 4E 05 F1 | 	add	fp, #8
2214c     A7 14 02 F6 | 	mov	arg02, fp
22150     0C 4E 05 F1 | 	add	fp, #12
22154     A7 16 02 F6 | 	mov	arg03, fp
22158     12 19 62 F6 | 	neg	arg04, local04
2215c     04 4E 85 F1 | 	sub	fp, #4
22160     A7 1A 02 FB | 	rdlong	arg05, fp
22164     1C 4E 85 F1 | 	sub	fp, #28
22168     88 3F B0 FD | 	call	#__system__disassemble_0498
2216c     7C 00 90 FD | 	jmp	#LR__3065
22170                 | LR__3062
22170     24 4E 05 F1 | 	add	fp, #36
22174     A7 1E 0A FB | 	rdlong	local01, fp wz
22178     24 4E 85 F1 | 	sub	fp, #36
2217c     34 00 90 AD |  if_e	jmp	#LR__3063
22180     0C 4E 05 F1 | 	add	fp, #12
22184     A7 12 02 FB | 	rdlong	arg01, fp
22188     08 4E 05 F1 | 	add	fp, #8
2218c     A7 14 02 F6 | 	mov	arg02, fp
22190     0C 4E 05 F1 | 	add	fp, #12
22194     A7 16 02 F6 | 	mov	arg03, fp
22198     98 4E 05 F1 | 	add	fp, #152
2219c     A7 18 02 FB | 	rdlong	arg04, fp
221a0     9C 4E 85 F1 | 	sub	fp, #156
221a4     A7 1A 02 FB | 	rdlong	arg05, fp
221a8     1C 4E 85 F1 | 	sub	fp, #28
221ac     44 3F B0 FD | 	call	#__system__disassemble_0498
221b0     38 00 90 FD | 	jmp	#LR__3064
221b4                 | LR__3063
221b4     0C 4E 05 F1 | 	add	fp, #12
221b8     A7 12 02 FB | 	rdlong	arg01, fp
221bc     08 4E 05 F1 | 	add	fp, #8
221c0     A7 14 02 F6 | 	mov	arg02, fp
221c4     0C 4E 05 F1 | 	add	fp, #12
221c8     A7 16 02 F6 | 	mov	arg03, fp
221cc     98 4E 05 F1 | 	add	fp, #152
221d0     A7 24 02 FB | 	rdlong	local04, fp
221d4     01 24 06 F1 | 	add	local04, #1
221d8     12 19 62 F6 | 	neg	arg04, local04
221dc     9C 4E 85 F1 | 	sub	fp, #156
221e0     A7 1A 02 FB | 	rdlong	arg05, fp
221e4     1C 4E 85 F1 | 	sub	fp, #28
221e8     08 3F B0 FD | 	call	#__system__disassemble_0498
221ec                 | LR__3064
221ec                 | LR__3065
221ec     1C 4E 05 F1 | 	add	fp, #28
221f0     A7 1E 02 FB | 	rdlong	local01, fp
221f4     1C 4E 85 F1 | 	sub	fp, #28
221f8     02 1E 0E F2 | 	cmp	local01, #2 wz
221fc     4C 00 90 5D |  if_ne	jmp	#LR__3068
22200     1C 4E 05 F1 | 	add	fp, #28
22204     A7 20 68 FC | 	wrlong	#16, fp
22208     1C 4E 85 F1 | 	sub	fp, #28
2220c                 | LR__3066
2220c     14 4E 05 F1 | 	add	fp, #20
22210     A7 1E 0A FB | 	rdlong	local01, fp wz
22214     14 4E 85 F1 | 	sub	fp, #20
22218     30 00 90 AD |  if_e	jmp	#LR__3067
2221c     14 4E 05 F1 | 	add	fp, #20
22220     A7 22 02 FB | 	rdlong	local03, fp
22224     14 4E 85 F1 | 	sub	fp, #20
22228     00 80 00 FF 
2222c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22230     18 00 90 3D |  if_ae	jmp	#LR__3067
22234     14 4E 05 F1 | 	add	fp, #20
22238     A7 1E 02 FB | 	rdlong	local01, fp
2223c     01 1E 66 F0 | 	shl	local01, #1
22240     A7 1E 62 FC | 	wrlong	local01, fp
22244     14 4E 85 F1 | 	sub	fp, #20
22248     C0 FF 9F FD | 	jmp	#LR__3066
2224c                 | LR__3067
2224c                 | LR__3068
2224c     70 4E 05 F1 | 	add	fp, #112
22250     A7 12 02 F6 | 	mov	arg01, fp
22254     5C 4E 85 F1 | 	sub	fp, #92
22258     A7 14 02 FB | 	rdlong	arg02, fp
2225c     08 4E 05 F1 | 	add	fp, #8
22260     A7 16 02 FB | 	rdlong	arg03, fp
22264     A0 4E 05 F1 | 	add	fp, #160
22268     A7 1A 02 FB | 	rdlong	arg05, fp
2226c     BC 4E 85 F1 | 	sub	fp, #188
22270     01 18 06 F6 | 	mov	arg04, #1
22274     08 3E B0 FD | 	call	#__system___uitoa
22278     58 4E 05 F1 | 	add	fp, #88
2227c     A7 FA 61 FC | 	wrlong	result1, fp
22280     38 4E 85 F1 | 	sub	fp, #56
22284     A7 1E 02 FB | 	rdlong	local01, fp
22288     20 4E 85 F1 | 	sub	fp, #32
2228c     00 1E 56 F2 | 	cmps	local01, #0 wc
22290     50 00 90 3D |  if_ae	jmp	#LR__3069
22294     60 4E 05 F1 | 	add	fp, #96
22298     A7 5A 68 FC | 	wrlong	#45, fp
2229c     50 4E 05 F1 | 	add	fp, #80
222a0     A7 12 02 F6 | 	mov	arg01, fp
222a4     90 4E 85 F1 | 	sub	fp, #144
222a8     A7 22 02 FB | 	rdlong	local03, fp
222ac     11 15 62 F6 | 	neg	arg02, local03
222b0     18 4E 05 F1 | 	add	fp, #24
222b4     A7 18 02 FB | 	rdlong	arg04, fp
222b8     84 4E 05 F1 | 	add	fp, #132
222bc     A7 28 02 FB | 	rdlong	local06, fp
222c0     BC 4E 85 F1 | 	sub	fp, #188
222c4     14 25 02 F6 | 	mov	local04, local06
222c8     0A 16 06 F6 | 	mov	arg03, #10
222cc     12 1B 02 F6 | 	mov	arg05, local04
222d0     AC 3D B0 FD | 	call	#__system___uitoa
222d4     5C 4E 05 F1 | 	add	fp, #92
222d8     A7 FA 61 FC | 	wrlong	result1, fp
222dc     5C 4E 85 F1 | 	sub	fp, #92
222e0     48 00 90 FD | 	jmp	#LR__3070
222e4                 | LR__3069
222e4     60 4E 05 F1 | 	add	fp, #96
222e8     A7 56 68 FC | 	wrlong	#43, fp
222ec     50 4E 05 F1 | 	add	fp, #80
222f0     A7 12 02 F6 | 	mov	arg01, fp
222f4     90 4E 85 F1 | 	sub	fp, #144
222f8     A7 14 02 FB | 	rdlong	arg02, fp
222fc     18 4E 05 F1 | 	add	fp, #24
22300     A7 18 02 FB | 	rdlong	arg04, fp
22304     84 4E 05 F1 | 	add	fp, #132
22308     A7 28 02 FB | 	rdlong	local06, fp
2230c     BC 4E 85 F1 | 	sub	fp, #188
22310     14 25 02 F6 | 	mov	local04, local06
22314     0A 16 06 F6 | 	mov	arg03, #10
22318     12 1B 02 F6 | 	mov	arg05, local04
2231c     60 3D B0 FD | 	call	#__system___uitoa
22320     5C 4E 05 F1 | 	add	fp, #92
22324     A7 FA 61 FC | 	wrlong	result1, fp
22328     5C 4E 85 F1 | 	sub	fp, #92
2232c                 | LR__3070
2232c     24 4E 05 F1 | 	add	fp, #36
22330     A7 1E 0A FB | 	rdlong	local01, fp wz
22334     24 4E 85 F1 | 	sub	fp, #36
22338     2C 00 90 AD |  if_e	jmp	#LR__3071
2233c     50 4E 05 F1 | 	add	fp, #80
22340     A7 00 68 FC | 	wrlong	#0, fp
22344     04 4E 85 F1 | 	sub	fp, #4
22348     A7 00 68 FC | 	wrlong	#0, fp
2234c     6C 4E 05 F1 | 	add	fp, #108
22350     A7 1E 02 FB | 	rdlong	local01, fp
22354     01 1E 06 F1 | 	add	local01, #1
22358     64 4E 85 F1 | 	sub	fp, #100
2235c     A7 1E 62 FC | 	wrlong	local01, fp
22360     54 4E 85 F1 | 	sub	fp, #84
22364     88 00 90 FD | 	jmp	#LR__3074
22368                 | LR__3071
22368     20 4E 05 F1 | 	add	fp, #32
2236c     A7 1E 02 FB | 	rdlong	local01, fp
22370     20 4E 85 F1 | 	sub	fp, #32
22374     00 1E 56 F2 | 	cmps	local01, #0 wc
22378     40 00 90 3D |  if_ae	jmp	#LR__3072
2237c     20 4E 05 F1 | 	add	fp, #32
22380     A7 20 02 FB | 	rdlong	local02, fp
22384     30 4E 05 F1 | 	add	fp, #48
22388     A7 20 62 FC | 	wrlong	local02, fp
2238c     04 4E 85 F1 | 	sub	fp, #4
22390     A7 20 62 FC | 	wrlong	local02, fp
22394     2C 4E 85 F1 | 	sub	fp, #44
22398     A7 1E 02 FB | 	rdlong	local01, fp
2239c     98 4E 05 F1 | 	add	fp, #152
223a0     A7 22 02 FB | 	rdlong	local03, fp
223a4     11 1F 02 F1 | 	add	local01, local03
223a8     01 1E 06 F1 | 	add	local01, #1
223ac     64 4E 85 F1 | 	sub	fp, #100
223b0     A7 1E 62 FC | 	wrlong	local01, fp
223b4     54 4E 85 F1 | 	sub	fp, #84
223b8     34 00 90 FD | 	jmp	#LR__3073
223bc                 | LR__3072
223bc     4C 4E 05 F1 | 	add	fp, #76
223c0     A7 00 68 FC | 	wrlong	#0, fp
223c4     2C 4E 85 F1 | 	sub	fp, #44
223c8     A7 1E 02 FB | 	rdlong	local01, fp
223cc     30 4E 05 F1 | 	add	fp, #48
223d0     A7 1E 62 FC | 	wrlong	local01, fp
223d4     68 4E 05 F1 | 	add	fp, #104
223d8     A7 22 02 FB | 	rdlong	local03, fp
223dc     11 1F 02 F1 | 	add	local01, local03
223e0     01 1E 06 F1 | 	add	local01, #1
223e4     64 4E 85 F1 | 	sub	fp, #100
223e8     A7 1E 62 FC | 	wrlong	local01, fp
223ec     54 4E 85 F1 | 	sub	fp, #84
223f0                 | LR__3073
223f0                 | LR__3074
223f0     54 4E 05 F1 | 	add	fp, #84
223f4     A7 1E 02 FB | 	rdlong	local01, fp
223f8     08 4E 85 F1 | 	sub	fp, #8
223fc     A7 22 02 FB | 	rdlong	local03, fp
22400     11 1F 82 F1 | 	sub	local01, local03
22404     01 1E 06 F1 | 	add	local01, #1
22408     24 4E 85 F1 | 	sub	fp, #36
2240c     A7 1E 62 FC | 	wrlong	local01, fp
22410     04 4E 05 F1 | 	add	fp, #4
22414     A7 1E 0A FB | 	rdlong	local01, fp wz
22418     2C 4E 85 F1 | 	sub	fp, #44
2241c     28 4E 05 51 |  if_ne	add	fp, #40
22420     A7 22 02 5B |  if_ne	rdlong	local03, fp
22424     01 22 06 51 |  if_ne	add	local03, #1
22428     A7 22 62 5C |  if_ne	wrlong	local03, fp
2242c     28 4E 85 51 |  if_ne	sub	fp, #40
22430     1C 4E 05 F1 | 	add	fp, #28
22434     A7 1E 02 FB | 	rdlong	local01, fp
22438     1C 4E 85 F1 | 	sub	fp, #28
2243c     10 1E 0E F2 | 	cmp	local01, #16 wz
22440     28 4E 05 A1 |  if_e	add	fp, #40
22444     A7 1E 02 AB |  if_e	rdlong	local01, fp
22448     02 1E 06 A1 |  if_e	add	local01, #2
2244c     A7 1E 62 AC |  if_e	wrlong	local01, fp
22450     28 4E 85 A1 |  if_e	sub	fp, #40
22454     24 4E 05 F1 | 	add	fp, #36
22458     A7 1E 0A FB | 	rdlong	local01, fp wz
2245c     24 4E 85 F1 | 	sub	fp, #36
22460     28 00 90 AD |  if_e	jmp	#LR__3075
22464     28 4E 05 F1 | 	add	fp, #40
22468     A7 1E 02 FB | 	rdlong	local01, fp
2246c     02 22 06 F6 | 	mov	local03, #2
22470     34 4E 05 F1 | 	add	fp, #52
22474     A7 26 02 FB | 	rdlong	local05, fp
22478     13 23 02 F1 | 	add	local03, local05
2247c     11 1F 02 F1 | 	add	local01, local03
22480     34 4E 85 F1 | 	sub	fp, #52
22484     A7 1E 62 FC | 	wrlong	local01, fp
22488     28 4E 85 F1 | 	sub	fp, #40
2248c                 | LR__3075
2248c     28 4E 05 F1 | 	add	fp, #40
22490     A7 1E 02 FB | 	rdlong	local01, fp
22494     28 4E 85 F1 | 	sub	fp, #40
22498     41 1E 56 F2 | 	cmps	local01, #65 wc
2249c     01 FA 65 36 |  if_ae	neg	result1, #1
224a0     08 05 90 3D |  if_ae	jmp	#LR__3103
224a4     3C 4E 05 F1 | 	add	fp, #60
224a8     A7 1E 0A FB | 	rdlong	local01, fp wz
224ac     3C 4E 85 F1 | 	sub	fp, #60
224b0     60 00 90 AD |  if_e	jmp	#LR__3076
224b4     C0 4E 05 F1 | 	add	fp, #192
224b8     A7 12 02 FB | 	rdlong	arg01, fp
224bc     94 4E 85 F1 | 	sub	fp, #148
224c0     A7 14 02 FB | 	rdlong	arg02, fp
224c4     14 4E 05 F1 | 	add	fp, #20
224c8     A7 16 02 FB | 	rdlong	arg03, fp
224cc     40 4E 85 F1 | 	sub	fp, #64
224d0     14 3E B0 FD | 	call	#__system__emitsign_0500
224d4     18 4F 05 F1 | 	add	fp, #280
224d8     A7 FA 61 FC | 	wrlong	result1, fp
224dc     18 4F 85 F1 | 	sub	fp, #280
224e0     00 FA 55 F2 | 	cmps	result1, #0 wc
224e4     18 4F 05 C1 |  if_b	add	fp, #280
224e8     A7 FA 01 CB |  if_b	rdlong	result1, fp
224ec     18 4F 85 C1 |  if_b	sub	fp, #280
224f0     B8 04 90 CD |  if_b	jmp	#LR__3103
224f4     C0 4E 05 F1 | 	add	fp, #192
224f8     A7 1E 02 FB | 	rdlong	local01, fp
224fc     58 4E 05 F1 | 	add	fp, #88
22500     A7 22 02 FB | 	rdlong	local03, fp
22504     11 1F 02 F1 | 	add	local01, local03
22508     58 4E 85 F1 | 	sub	fp, #88
2250c     A7 1E 62 FC | 	wrlong	local01, fp
22510     C0 4E 85 F1 | 	sub	fp, #192
22514                 | LR__3076
22514     4C 4E 05 F1 | 	add	fp, #76
22518     A7 1E 02 FB | 	rdlong	local01, fp
2251c     34 4E 85 F1 | 	sub	fp, #52
22520     A7 1E 62 FC | 	wrlong	local01, fp
22524     18 4E 85 F1 | 	sub	fp, #24
22528     97 9E 48 FB | 	callpa	#(@LR__3082-@LR__3077)>>2,fcache_load_ptr_
2252c                 | LR__3077
2252c     18 4E 05 F1 | 	add	fp, #24
22530     A7 20 02 FB | 	rdlong	local02, fp
22534     3C 4E 05 F1 | 	add	fp, #60
22538     A7 26 02 FB | 	rdlong	local05, fp
2253c     54 4E 85 F1 | 	sub	fp, #84
22540     13 21 52 F2 | 	cmps	local02, local05 wc
22544     20 01 90 3D |  if_ae	jmp	#LR__3083
22548     18 4E 05 F1 | 	add	fp, #24
2254c     A7 28 02 FB | 	rdlong	local06, fp
22550     18 4E 85 F1 | 	sub	fp, #24
22554     00 28 56 F2 | 	cmps	local06, #0 wc
22558     58 00 90 CD |  if_b	jmp	#LR__3078
2255c     18 4E 05 F1 | 	add	fp, #24
22560     A7 28 02 FB | 	rdlong	local06, fp
22564     40 4E 05 F1 | 	add	fp, #64
22568     A7 2A 02 FB | 	rdlong	local07, fp
2256c     58 4E 85 F1 | 	sub	fp, #88
22570     15 29 52 F2 | 	cmps	local06, local07 wc
22574     3C 00 90 3D |  if_ae	jmp	#LR__3078
22578     C0 4E 05 F1 | 	add	fp, #192
2257c     A7 2C 02 FB | 	rdlong	local08, fp
22580     16 2B 02 F6 | 	mov	local07, local08
22584     01 2A 06 F1 | 	add	local07, #1
22588     A7 2A 62 FC | 	wrlong	local07, fp
2258c     A8 4E 85 F1 | 	sub	fp, #168
22590     A7 2A 02 FB | 	rdlong	local07, fp
22594     15 2F 02 F6 | 	mov	local09, local07
22598     58 4E 05 F1 | 	add	fp, #88
2259c     A7 30 02 F6 | 	mov	local10, fp
225a0     A7 2E 02 F1 | 	add	local09, fp
225a4     17 33 C2 FA | 	rdbyte	local11, local09
225a8     16 33 42 FC | 	wrbyte	local11, local08
225ac     70 4E 85 F1 | 	sub	fp, #112
225b0     20 00 90 FD | 	jmp	#LR__3079
225b4                 | LR__3078
225b4     C0 4E 05 F1 | 	add	fp, #192
225b8     A7 2C 02 FB | 	rdlong	local08, fp
225bc     16 2F 02 F6 | 	mov	local09, local08
225c0     01 2E 06 F1 | 	add	local09, #1
225c4     A7 2E 62 FC | 	wrlong	local09, fp
225c8     C0 4E 85 F1 | 	sub	fp, #192
225cc     30 2E 06 F6 | 	mov	local09, #48
225d0     16 61 48 FC | 	wrbyte	#48, local08
225d4                 | LR__3079
225d4     18 4E 05 F1 | 	add	fp, #24
225d8     A7 28 02 FB | 	rdlong	local06, fp
225dc     38 4E 05 F1 | 	add	fp, #56
225e0     A7 34 02 FB | 	rdlong	local12, fp
225e4     50 4E 85 F1 | 	sub	fp, #80
225e8     1A 29 0A F2 | 	cmp	local06, local12 wz
225ec     5C 00 90 5D |  if_ne	jmp	#LR__3081
225f0     10 4F 05 F1 | 	add	fp, #272
225f4     A7 2A 02 FB | 	rdlong	local07, fp
225f8     10 4F 85 F1 | 	sub	fp, #272
225fc     15 2F 0A F6 | 	mov	local09, local07 wz
22600     28 00 90 5D |  if_ne	jmp	#LR__3080
22604     54 4E 05 F1 | 	add	fp, #84
22608     A7 32 02 FB | 	rdlong	local11, fp
2260c     19 31 02 F6 | 	mov	local10, local11
22610     01 30 86 F1 | 	sub	local10, #1
22614     3C 4E 85 F1 | 	sub	fp, #60
22618     A7 36 02 FB | 	rdlong	local13, fp
2261c     18 4E 85 F1 | 	sub	fp, #24
22620     1B 39 02 F6 | 	mov	local14, local13
22624     18 39 52 F2 | 	cmps	local14, local10 wc
22628     20 00 90 3D |  if_ae	jmp	#LR__3081
2262c                 | LR__3080
2262c     C0 4E 05 F1 | 	add	fp, #192
22630     A7 2C 02 FB | 	rdlong	local08, fp
22634     16 35 02 F6 | 	mov	local12, local08
22638     01 34 06 F1 | 	add	local12, #1
2263c     A7 34 62 FC | 	wrlong	local12, fp
22640     C0 4E 85 F1 | 	sub	fp, #192
22644     2E 2E 06 F6 | 	mov	local09, #46
22648     16 5D 48 FC | 	wrbyte	#46, local08
2264c                 | LR__3081
2264c     18 4E 05 F1 | 	add	fp, #24
22650     A7 3A 02 FB | 	rdlong	local15, fp
22654     1D 35 02 F6 | 	mov	local12, local15
22658     01 34 06 F1 | 	add	local12, #1
2265c     A7 34 62 FC | 	wrlong	local12, fp
22660     18 4E 85 F1 | 	sub	fp, #24
22664     C4 FE 9F FD | 	jmp	#LR__3077
22668                 | LR__3082
22668                 | LR__3083
22668     34 4E 05 F1 | 	add	fp, #52
2266c     A7 1E 0A FB | 	rdlong	local01, fp wz
22670     34 4E 85 F1 | 	sub	fp, #52
22674     A0 00 90 AD |  if_e	jmp	#LR__3087
22678     C0 4E 05 F1 | 	add	fp, #192
2267c     A7 1E 02 FB | 	rdlong	local01, fp
22680     01 1E 86 F1 | 	sub	local01, #1
22684     A7 1E 62 FC | 	wrlong	local01, fp
22688     C0 4E 85 F1 | 	sub	fp, #192
2268c     97 26 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
22690                 | LR__3084
22690     C0 4E 05 F1 | 	add	fp, #192
22694     A7 1E 02 FB | 	rdlong	local01, fp
22698     04 4E 05 F1 | 	add	fp, #4
2269c     A7 22 02 FB | 	rdlong	local03, fp
226a0     C4 4E 85 F1 | 	sub	fp, #196
226a4     11 1F 5A F2 | 	cmps	local01, local03 wcz
226a8     30 00 90 ED |  if_be	jmp	#LR__3086
226ac     C0 4E 05 F1 | 	add	fp, #192
226b0     A7 28 02 FB | 	rdlong	local06, fp
226b4     C0 4E 85 F1 | 	sub	fp, #192
226b8     14 25 C2 FA | 	rdbyte	local04, local06
226bc     30 24 0E F2 | 	cmp	local04, #48 wz
226c0     18 00 90 5D |  if_ne	jmp	#LR__3086
226c4     C0 4E 05 F1 | 	add	fp, #192
226c8     A7 1E 02 FB | 	rdlong	local01, fp
226cc     01 1E 86 F1 | 	sub	local01, #1
226d0     A7 1E 62 FC | 	wrlong	local01, fp
226d4     C0 4E 85 F1 | 	sub	fp, #192
226d8     B4 FF 9F FD | 	jmp	#LR__3084
226dc                 | LR__3085
226dc                 | LR__3086
226dc     C0 4E 05 F1 | 	add	fp, #192
226e0     A7 20 02 FB | 	rdlong	local02, fp
226e4     C0 4E 85 F1 | 	sub	fp, #192
226e8     10 1F C2 FA | 	rdbyte	local01, local02
226ec     2E 1E 0E F2 | 	cmp	local01, #46 wz
226f0     C0 4E 05 A1 |  if_e	add	fp, #192
226f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
226f8     01 1E 86 A1 |  if_e	sub	local01, #1
226fc     A7 1E 62 AC |  if_e	wrlong	local01, fp
22700     C0 4E 85 A1 |  if_e	sub	fp, #192
22704     C0 4E 05 F1 | 	add	fp, #192
22708     A7 22 02 FB | 	rdlong	local03, fp
2270c     01 22 06 F1 | 	add	local03, #1
22710     A7 22 62 FC | 	wrlong	local03, fp
22714     C0 4E 85 F1 | 	sub	fp, #192
22718                 | LR__3087
22718     24 4E 05 F1 | 	add	fp, #36
2271c     A7 1E 0A FB | 	rdlong	local01, fp wz
22720     24 4E 85 F1 | 	sub	fp, #36
22724     B4 00 90 AD |  if_e	jmp	#LR__3090
22728     C0 4E 05 F1 | 	add	fp, #192
2272c     A7 20 02 FB | 	rdlong	local02, fp
22730     10 23 02 F6 | 	mov	local03, local02
22734     01 22 06 F1 | 	add	local03, #1
22738     A7 22 62 FC | 	wrlong	local03, fp
2273c     90 4E 85 F1 | 	sub	fp, #144
22740     A7 24 02 FB | 	rdlong	local04, fp
22744     10 25 42 FC | 	wrbyte	local04, local02
22748     90 4E 05 F1 | 	add	fp, #144
2274c     A7 20 02 FB | 	rdlong	local02, fp
22750     10 23 02 F6 | 	mov	local03, local02
22754     01 22 06 F1 | 	add	local03, #1
22758     A7 22 62 FC | 	wrlong	local03, fp
2275c     60 4E 85 F1 | 	sub	fp, #96
22760     A7 24 02 FB | 	rdlong	local04, fp
22764     10 25 42 FC | 	wrbyte	local04, local02
22768     48 4E 85 F1 | 	sub	fp, #72
2276c     A7 00 68 FC | 	wrlong	#0, fp
22770     18 4E 85 F1 | 	sub	fp, #24
22774                 | LR__3088
22774     18 4E 05 F1 | 	add	fp, #24
22778     A7 20 02 FB | 	rdlong	local02, fp
2277c     44 4E 05 F1 | 	add	fp, #68
22780     A7 26 02 FB | 	rdlong	local05, fp
22784     5C 4E 85 F1 | 	sub	fp, #92
22788     13 21 52 F2 | 	cmps	local02, local05 wc
2278c     4C 00 90 3D |  if_ae	jmp	#LR__3089
22790     C0 4E 05 F1 | 	add	fp, #192
22794     A7 2C 02 FB | 	rdlong	local08, fp
22798     16 35 02 F6 | 	mov	local12, local08
2279c     01 34 06 F1 | 	add	local12, #1
227a0     A7 34 62 FC | 	wrlong	local12, fp
227a4     A8 4E 85 F1 | 	sub	fp, #168
227a8     A7 2A 02 FB | 	rdlong	local07, fp
227ac     15 2F 02 F6 | 	mov	local09, local07
227b0     98 4E 05 F1 | 	add	fp, #152
227b4     A7 30 02 F6 | 	mov	local10, fp
227b8     A7 2E 02 F1 | 	add	local09, fp
227bc     17 33 C2 FA | 	rdbyte	local11, local09
227c0     16 33 42 FC | 	wrbyte	local11, local08
227c4     98 4E 85 F1 | 	sub	fp, #152
227c8     A7 34 02 FB | 	rdlong	local12, fp
227cc     01 34 06 F1 | 	add	local12, #1
227d0     A7 34 62 FC | 	wrlong	local12, fp
227d4     18 4E 85 F1 | 	sub	fp, #24
227d8     98 FF 9F FD | 	jmp	#LR__3088
227dc                 | LR__3089
227dc                 | LR__3090
227dc     C0 4E 05 F1 | 	add	fp, #192
227e0     A7 1E 02 FB | 	rdlong	local01, fp
227e4     C0 4E 85 F1 | 	sub	fp, #192
227e8     0F 01 48 FC | 	wrbyte	#0, local01
227ec                 | LR__3091
227ec     6C 4E 05 F1 | 	add	fp, #108
227f0     A7 1E 0A FB | 	rdlong	local01, fp wz
227f4     6C 4E 85 F1 | 	sub	fp, #108
227f8     90 01 90 AD |  if_e	jmp	#LR__3102
227fc     48 4E 05 F1 | 	add	fp, #72
22800     A7 22 0A FB | 	rdlong	local03, fp wz
22804     48 4E 85 F1 | 	sub	fp, #72
22808     80 01 90 AD |  if_e	jmp	#LR__3102
2280c     C4 4E 05 F1 | 	add	fp, #196
22810     A7 12 02 FB | 	rdlong	arg01, fp
22814     C4 4E 85 F1 | 	sub	fp, #196
22818     09 3D 02 F6 | 	mov	local16, arg01
2281c     97 06 48 FB | 	callpa	#(@LR__3093-@LR__3092)>>2,fcache_load_ptr_
22820                 | LR__3092
22820     1E FB C9 FA | 	rdbyte	result1, local16 wz
22824     01 3C 06 51 |  if_ne	add	local16, #1
22828     F4 FF 9F 5D |  if_ne	jmp	#LR__3092
2282c                 | LR__3093
2282c     09 3D 82 F1 | 	sub	local16, arg01
22830     1E 25 02 F6 | 	mov	local04, local16
22834     6C 4E 05 F1 | 	add	fp, #108
22838     A7 28 02 FB | 	rdlong	local06, fp
2283c     6C 4E 85 F1 | 	sub	fp, #108
22840     14 25 5A F2 | 	cmps	local04, local06 wcz
22844     44 01 90 ED |  if_be	jmp	#LR__3102
22848     C4 4E 05 F1 | 	add	fp, #196
2284c     A7 1E 02 FB | 	rdlong	local01, fp
22850     5C 4E 05 F1 | 	add	fp, #92
22854     A7 1E 62 FC | 	wrlong	local01, fp
22858     FC 4E 85 F1 | 	sub	fp, #252
2285c     A7 1E 0A FB | 	rdlong	local01, fp wz
22860     24 4E 85 F1 | 	sub	fp, #36
22864     20 00 90 AD |  if_e	jmp	#LR__3094
22868     B8 4E 05 F1 | 	add	fp, #184
2286c     A7 00 68 FC | 	wrlong	#0, fp
22870     4C 4E 85 F1 | 	sub	fp, #76
22874     A7 1E 02 FB | 	rdlong	local01, fp
22878     B0 4E 05 F1 | 	add	fp, #176
2287c     A7 1E 62 FC | 	wrlong	local01, fp
22880     1C 4F 85 F1 | 	sub	fp, #284
22884     24 00 90 FD | 	jmp	#LR__3095
22888                 | LR__3094
22888     6C 4E 05 F1 | 	add	fp, #108
2288c     A7 1E 02 FB | 	rdlong	local01, fp
22890     01 1E 86 F1 | 	sub	local01, #1
22894     4C 4E 05 F1 | 	add	fp, #76
22898     A7 22 02 FB | 	rdlong	local03, fp
2289c     11 1F 82 F1 | 	sub	local01, local03
228a0     64 4E 05 F1 | 	add	fp, #100
228a4     A7 1E 62 FC | 	wrlong	local01, fp
228a8     1C 4F 85 F1 | 	sub	fp, #284
228ac                 | LR__3095
228ac     97 20 48 FB | 	callpa	#(@LR__3097-@LR__3096)>>2,fcache_load_ptr_
228b0                 | LR__3096
228b0     1C 4F 05 F1 | 	add	fp, #284
228b4     A7 1E 0A FB | 	rdlong	local01, fp wz
228b8     1C 4F 85 F1 | 	sub	fp, #284
228bc     30 00 90 AD |  if_e	jmp	#LR__3098
228c0     20 4F 05 F1 | 	add	fp, #288
228c4     A7 20 02 FB | 	rdlong	local02, fp
228c8     10 23 02 F6 | 	mov	local03, local02
228cc     01 22 06 F1 | 	add	local03, #1
228d0     A7 22 62 FC | 	wrlong	local03, fp
228d4     10 55 48 FC | 	wrbyte	#42, local02
228d8     04 4E 85 F1 | 	sub	fp, #4
228dc     A7 1E 02 FB | 	rdlong	local01, fp
228e0     01 1E 86 F1 | 	sub	local01, #1
228e4     A7 1E 62 FC | 	wrlong	local01, fp
228e8     1C 4F 85 F1 | 	sub	fp, #284
228ec     C0 FF 9F FD | 	jmp	#LR__3096
228f0                 | LR__3097
228f0                 | LR__3098
228f0     B8 4E 05 F1 | 	add	fp, #184
228f4     A7 1E 0A FB | 	rdlong	local01, fp wz
228f8     B8 4E 85 F1 | 	sub	fp, #184
228fc     70 00 90 AD |  if_e	jmp	#LR__3101
22900     20 4F 05 F1 | 	add	fp, #288
22904     A7 20 02 FB | 	rdlong	local02, fp
22908     10 23 02 F6 | 	mov	local03, local02
2290c     01 22 06 F1 | 	add	local03, #1
22910     A7 22 62 FC | 	wrlong	local03, fp
22914     10 5D 48 FC | 	wrbyte	#46, local02
22918     04 4E 85 F1 | 	sub	fp, #4
2291c     A7 00 68 FC | 	wrlong	#0, fp
22920     1C 4F 85 F1 | 	sub	fp, #284
22924                 | LR__3099
22924     1C 4F 05 F1 | 	add	fp, #284
22928     A7 20 02 FB | 	rdlong	local02, fp
2292c     64 4E 85 F1 | 	sub	fp, #100
22930     A7 26 02 FB | 	rdlong	local05, fp
22934     B8 4E 85 F1 | 	sub	fp, #184
22938     13 21 52 F2 | 	cmps	local02, local05 wc
2293c     30 00 90 3D |  if_ae	jmp	#LR__3100
22940     20 4F 05 F1 | 	add	fp, #288
22944     A7 2C 02 FB | 	rdlong	local08, fp
22948     16 35 02 F6 | 	mov	local12, local08
2294c     01 34 06 F1 | 	add	local12, #1
22950     A7 34 62 FC | 	wrlong	local12, fp
22954     16 55 48 FC | 	wrbyte	#42, local08
22958     04 4E 85 F1 | 	sub	fp, #4
2295c     A7 34 02 FB | 	rdlong	local12, fp
22960     01 34 06 F1 | 	add	local12, #1
22964     A7 34 62 FC | 	wrlong	local12, fp
22968     1C 4F 85 F1 | 	sub	fp, #284
2296c     B4 FF 9F FD | 	jmp	#LR__3099
22970                 | LR__3100
22970                 | LR__3101
22970     20 4F 05 F1 | 	add	fp, #288
22974     A7 20 02 FB | 	rdlong	local02, fp
22978     10 23 02 F6 | 	mov	local03, local02
2297c     01 22 06 F1 | 	add	local03, #1
22980     A7 22 62 FC | 	wrlong	local03, fp
22984     20 4F 85 F1 | 	sub	fp, #288
22988     10 01 48 FC | 	wrbyte	#0, local02
2298c                 | LR__3102
2298c     04 4E 05 F1 | 	add	fp, #4
22990     A7 12 02 FB | 	rdlong	arg01, fp
22994     04 4E 05 F1 | 	add	fp, #4
22998     A7 14 02 FB | 	rdlong	arg02, fp
2299c     BC 4E 05 F1 | 	add	fp, #188
229a0     A7 16 02 FB | 	rdlong	arg03, fp
229a4     C4 4E 85 F1 | 	sub	fp, #196
229a8     C4 EE BF FD | 	call	#__system___fmtstr
229ac                 | LR__3103
229ac     A7 F0 03 F6 | 	mov	ptra, fp
229b0     B2 00 A0 FD | 	call	#popregs_
229b4                 | __system___fmtfloat_ret
229b4     2D 00 64 FD | 	ret
229b8                 | 
229b8                 | __system__Left_S
229b8     04 4A 05 F6 | 	mov	COUNT_, #4
229bc     A8 00 A0 FD | 	call	#pushregs_
229c0     09 1F 02 F6 | 	mov	local01, arg01
229c4     0A 21 02 F6 | 	mov	local02, arg02
229c8     01 20 56 F2 | 	cmps	local02, #1 wc
229cc     80 01 00 CF 
229d0     8E FB 05 C6 |  if_b	mov	result1, ##@LR__5023
229d4     5C 00 90 CD |  if_b	jmp	#LR__3113
229d8     0F 13 02 F6 | 	mov	arg01, local01
229dc     09 23 02 F6 | 	mov	local03, arg01
229e0     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
229e4                 | LR__3110
229e4     11 FB C9 FA | 	rdbyte	result1, local03 wz
229e8     01 22 06 51 |  if_ne	add	local03, #1
229ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
229f0                 | LR__3111
229f0     09 23 82 F1 | 	sub	local03, arg01
229f4     11 FB 01 F6 | 	mov	result1, local03
229f8     10 FB 59 F2 | 	cmps	result1, local02 wcz
229fc     0F FB 01 E6 |  if_be	mov	result1, local01
22a00     30 00 90 ED |  if_be	jmp	#LR__3113
22a04     10 13 02 F6 | 	mov	arg01, local02
22a08     02 12 06 F1 | 	add	arg01, #2
22a0c     08 1E B0 FD | 	call	#__system___gc_alloc_managed
22a10     FD 24 0A F6 | 	mov	local04, result1 wz
22a14     18 00 90 AD |  if_e	jmp	#LR__3112
22a18     12 13 02 F6 | 	mov	arg01, local04
22a1c     0F 15 02 F6 | 	mov	arg02, local01
22a20     10 17 02 F6 | 	mov	arg03, local02
22a24     34 DE BF FD | 	call	#__system____builtin_memmove
22a28     12 21 02 F1 | 	add	local02, local04
22a2c     10 01 48 FC | 	wrbyte	#0, local02
22a30                 | LR__3112
22a30     12 FB 01 F6 | 	mov	result1, local04
22a34                 | LR__3113
22a34     A7 F0 03 F6 | 	mov	ptra, fp
22a38     B2 00 A0 FD | 	call	#popregs_
22a3c                 | __system__Left_S_ret
22a3c     2D 00 64 FD | 	ret
22a40                 | 
22a40                 | __system__Right_S
22a40     05 4A 05 F6 | 	mov	COUNT_, #5
22a44     A8 00 A0 FD | 	call	#pushregs_
22a48     09 1F 02 F6 | 	mov	local01, arg01
22a4c     0A 21 02 F6 | 	mov	local02, arg02
22a50     01 20 56 F2 | 	cmps	local02, #1 wc
22a54     80 01 00 CF 
22a58     8F FB 05 C6 |  if_b	mov	result1, ##@LR__5024
22a5c     64 00 90 CD |  if_b	jmp	#LR__3123
22a60     0F 13 02 F6 | 	mov	arg01, local01
22a64     09 23 02 F6 | 	mov	local03, arg01
22a68     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22a6c                 | LR__3120
22a6c     11 FB C9 FA | 	rdbyte	result1, local03 wz
22a70     01 22 06 51 |  if_ne	add	local03, #1
22a74     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22a78                 | LR__3121
22a78     09 23 82 F1 | 	sub	local03, arg01
22a7c     11 FB 01 F6 | 	mov	result1, local03
22a80     FD 24 02 F6 | 	mov	local04, result1
22a84     10 25 5A F2 | 	cmps	local04, local02 wcz
22a88     0F FB 01 E6 |  if_be	mov	result1, local01
22a8c     34 00 90 ED |  if_be	jmp	#LR__3123
22a90     10 13 02 F6 | 	mov	arg01, local02
22a94     02 12 06 F1 | 	add	arg01, #2
22a98     7C 1D B0 FD | 	call	#__system___gc_alloc_managed
22a9c     FD 26 0A F6 | 	mov	local05, result1 wz
22aa0     1C 00 90 AD |  if_e	jmp	#LR__3122
22aa4     10 25 82 F1 | 	sub	local04, local02
22aa8     0F 25 02 F1 | 	add	local04, local01
22aac     01 20 06 F1 | 	add	local02, #1
22ab0     13 13 02 F6 | 	mov	arg01, local05
22ab4     12 15 02 F6 | 	mov	arg02, local04
22ab8     10 17 02 F6 | 	mov	arg03, local02
22abc     9C DD BF FD | 	call	#__system____builtin_memmove
22ac0                 | LR__3122
22ac0     13 FB 01 F6 | 	mov	result1, local05
22ac4                 | LR__3123
22ac4     A7 F0 03 F6 | 	mov	ptra, fp
22ac8     B2 00 A0 FD | 	call	#popregs_
22acc                 | __system__Right_S_ret
22acc     2D 00 64 FD | 	ret
22ad0                 | 
22ad0                 | __system__Mid_S
22ad0     05 4A 05 F6 | 	mov	COUNT_, #5
22ad4     A8 00 A0 FD | 	call	#pushregs_
22ad8     09 1F 02 F6 | 	mov	local01, arg01
22adc     0A 21 02 F6 | 	mov	local02, arg02
22ae0     01 16 56 F2 | 	cmps	arg03, #1 wc
22ae4     80 01 00 CF 
22ae8     90 FB 05 C6 |  if_b	mov	result1, ##@LR__5025
22aec     80 00 90 CD |  if_b	jmp	#LR__3133
22af0     01 20 86 F1 | 	sub	local02, #1
22af4     00 20 56 F3 | 	fges	local02, #0 wc
22af8     0F 13 02 F6 | 	mov	arg01, local01
22afc     09 23 02 F6 | 	mov	local03, arg01
22b00     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22b04                 | LR__3130
22b04     11 FB C9 FA | 	rdbyte	result1, local03 wz
22b08     01 22 06 51 |  if_ne	add	local03, #1
22b0c     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22b10                 | LR__3131
22b10     09 23 82 F1 | 	sub	local03, arg01
22b14     11 FB 01 F6 | 	mov	result1, local03
22b18     FD 14 02 F6 | 	mov	arg02, result1
22b1c     10 15 52 F2 | 	cmps	arg02, local02 wc
22b20     80 01 00 CF 
22b24     91 FB 05 C6 |  if_b	mov	result1, ##@LR__5026
22b28     44 00 90 CD |  if_b	jmp	#LR__3133
22b2c     0A 25 02 F6 | 	mov	local04, arg02
22b30     10 25 82 F1 | 	sub	local04, local02
22b34     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22b38     0B 25 02 16 |  if_a	mov	local04, arg03
22b3c     12 13 02 F6 | 	mov	arg01, local04
22b40     02 12 06 F1 | 	add	arg01, #2
22b44     D0 1C B0 FD | 	call	#__system___gc_alloc_managed
22b48     FD 26 0A F6 | 	mov	local05, result1 wz
22b4c     1C 00 90 AD |  if_e	jmp	#LR__3132
22b50     0F 21 02 F1 | 	add	local02, local01
22b54     13 13 02 F6 | 	mov	arg01, local05
22b58     10 15 02 F6 | 	mov	arg02, local02
22b5c     12 17 02 F6 | 	mov	arg03, local04
22b60     F8 DC BF FD | 	call	#__system____builtin_memmove
22b64     13 25 02 F1 | 	add	local04, local05
22b68     12 01 48 FC | 	wrbyte	#0, local04
22b6c                 | LR__3132
22b6c     13 FB 01 F6 | 	mov	result1, local05
22b70                 | LR__3133
22b70     A7 F0 03 F6 | 	mov	ptra, fp
22b74     B2 00 A0 FD | 	call	#popregs_
22b78                 | __system__Mid_S_ret
22b78     2D 00 64 FD | 	ret
22b7c                 | 
22b7c                 | __system__Chr_S
22b7c     01 4A 05 F6 | 	mov	COUNT_, #1
22b80     A8 00 A0 FD | 	call	#pushregs_
22b84     09 1F 02 F6 | 	mov	local01, arg01
22b88     03 12 06 F6 | 	mov	arg01, #3
22b8c     88 1C B0 FD | 	call	#__system___gc_alloc_managed
22b90     00 FA 4D F2 | 	cmps	result1, #0 wz
22b94     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22b98     01 FA 05 51 |  if_ne	add	result1, #1
22b9c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22ba0     01 FA 85 51 |  if_ne	sub	result1, #1
22ba4     A7 F0 03 F6 | 	mov	ptra, fp
22ba8     B2 00 A0 FD | 	call	#popregs_
22bac                 | __system__Chr_S_ret
22bac     2D 00 64 FD | 	ret
22bb0                 | 
22bb0                 | __system__str_S
22bb0     02 4A 05 F6 | 	mov	COUNT_, #2
22bb4     A8 00 A0 FD | 	call	#pushregs_
22bb8     09 1F 02 F6 | 	mov	local01, arg01
22bbc     10 12 06 F6 | 	mov	arg01, #16
22bc0     54 1C B0 FD | 	call	#__system___gc_alloc_managed
22bc4     FD 20 0A F6 | 	mov	local02, result1 wz
22bc8     30 00 90 AD |  if_e	jmp	#LR__3140
22bcc     F8 13 02 F6 | 	mov	arg01, ptra
22bd0     08 F0 07 F1 | 	add	ptra, #8
22bd4     09 21 62 FC | 	wrlong	local02, arg01
22bd8     04 12 06 F1 | 	add	arg01, #4
22bdc     09 01 68 FC | 	wrlong	#0, arg01
22be0     04 12 86 F1 | 	sub	arg01, #4
22be4     00 A8 04 FF 
22be8     00 12 46 F5 | 	or	arg01, ##156237824
22bec     00 14 06 F6 | 	mov	arg02, #0
22bf0     0F 17 02 F6 | 	mov	arg03, local01
22bf4     67 18 06 F6 | 	mov	arg04, #103
22bf8     90 EE BF FD | 	call	#__system___fmtfloat
22bfc                 | LR__3140
22bfc     10 FB 01 F6 | 	mov	result1, local02
22c00     A7 F0 03 F6 | 	mov	ptra, fp
22c04     B2 00 A0 FD | 	call	#popregs_
22c08                 | __system__str_S_ret
22c08     2D 00 64 FD | 	ret
22c0c                 | 
22c0c                 | __system__Number_S
22c0c     08 4A 05 F6 | 	mov	COUNT_, #8
22c10     A8 00 A0 FD | 	call	#pushregs_
22c14     09 1F 02 F6 | 	mov	local01, arg01
22c18     0A 21 0A F6 | 	mov	local02, arg02 wz
22c1c     0B 23 02 F6 | 	mov	local03, arg03
22c20     3C 00 90 5D |  if_ne	jmp	#LR__3152
22c24     01 20 06 F6 | 	mov	local02, #1
22c28     11 25 02 F6 | 	mov	local04, local03
22c2c     01 26 06 F6 | 	mov	local05, #1
22c30     97 16 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22c34                 | LR__3150
22c34     00 28 06 F6 | 	mov	local06, #0
22c38     0F 25 1A F2 | 	cmp	local04, local01 wcz
22c3c     01 28 66 E6 |  if_be	neg	local06, #1
22c40     12 27 12 F2 | 	cmp	local05, local04 wc
22c44     15 2B A2 F1 | 	subx	local07, local07
22c48     15 29 CA F7 | 	test	local06, local07 wz
22c4c     11 25 02 5D |  if_ne	qmul	local04, local03
22c50     12 27 02 56 |  if_ne	mov	local05, local04
22c54     01 20 06 51 |  if_ne	add	local02, #1
22c58     18 24 62 5D |  if_ne	getqx	local04
22c5c     D4 FF 9F 5D |  if_ne	jmp	#LR__3150
22c60                 | LR__3151
22c60                 | LR__3152
22c60     20 20 36 F3 | 	fle	local02, #32 wc
22c64     10 13 02 F6 | 	mov	arg01, local02
22c68     02 12 06 F1 | 	add	arg01, #2
22c6c     A8 1B B0 FD | 	call	#__system___gc_alloc_managed
22c70     FD 28 02 F6 | 	mov	local06, result1
22c74     10 2B 02 F6 | 	mov	local07, local02
22c78     14 2B 02 F1 | 	add	local07, local06
22c7c     15 01 48 FC | 	wrbyte	#0, local07
22c80     97 1A 48 FB | 	callpa	#(@LR__3154-@LR__3153)>>2,fcache_load_ptr_
22c84                 | LR__3153
22c84     01 20 16 F2 | 	cmp	local02, #1 wc
22c88     2C 00 90 CD |  if_b	jmp	#LR__3155
22c8c     11 1F 12 FD | 	qdiv	local01, local03
22c90     01 20 86 F1 | 	sub	local02, #1
22c94     10 2B 02 F6 | 	mov	local07, local02
22c98     14 2B 02 F1 | 	add	local07, local06
22c9c     19 2C 62 FD | 	getqy	local08
22ca0     0A 2C 16 F2 | 	cmp	local08, #10 wc
22ca4     30 2C 06 C1 |  if_b	add	local08, #48
22ca8     37 2C 06 31 |  if_ae	add	local08, #55
22cac     15 2D 42 FC | 	wrbyte	local08, local07
22cb0     18 1E 62 FD | 	getqx	local01
22cb4     CC FF 9F FD | 	jmp	#LR__3153
22cb8                 | LR__3154
22cb8                 | LR__3155
22cb8     14 FB 01 F6 | 	mov	result1, local06
22cbc     A7 F0 03 F6 | 	mov	ptra, fp
22cc0     B2 00 A0 FD | 	call	#popregs_
22cc4                 | __system__Number_S_ret
22cc4     2D 00 64 FD | 	ret
22cc8                 | 
22cc8                 | __system__LCase_S
22cc8     07 4A 05 F6 | 	mov	COUNT_, #7
22ccc     A8 00 A0 FD | 	call	#pushregs_
22cd0     09 1F 02 F6 | 	mov	local01, arg01
22cd4     09 21 02 F6 | 	mov	local02, arg01
22cd8     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22cdc                 | LR__3160
22cdc     10 FB C9 FA | 	rdbyte	result1, local02 wz
22ce0     01 20 06 51 |  if_ne	add	local02, #1
22ce4     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22ce8                 | LR__3161
22ce8     09 21 82 F1 | 	sub	local02, arg01
22cec     10 FB 01 F6 | 	mov	result1, local02
22cf0     FD 20 0A F6 | 	mov	local02, result1 wz
22cf4     80 01 00 AF 
22cf8     92 FB 05 A6 |  if_e	mov	result1, ##@LR__5027
22cfc     7C 00 90 AD |  if_e	jmp	#LR__3167
22d00     10 13 02 F6 | 	mov	arg01, local02
22d04     02 12 06 F1 | 	add	arg01, #2
22d08     0C 1B B0 FD | 	call	#__system___gc_alloc_managed
22d0c     FD 22 0A F6 | 	mov	local03, result1 wz
22d10     64 00 90 AD |  if_e	jmp	#LR__3166
22d14     01 24 66 F6 | 	neg	local04, #1
22d18     97 26 48 FB | 	callpa	#(@LR__3165-@LR__3162)>>2,fcache_load_ptr_
22d1c                 | LR__3162
22d1c     01 24 06 F1 | 	add	local04, #1
22d20     12 27 02 F6 | 	mov	local05, local04
22d24     0F 27 02 F1 | 	add	local05, local01
22d28     13 29 C2 FA | 	rdbyte	local06, local05
22d2c     41 28 56 F2 | 	cmps	local06, #65 wc
22d30     18 00 90 CD |  if_b	jmp	#LR__3163
22d34     5B 28 56 F2 | 	cmps	local06, #91 wc
22d38     12 2B 02 C6 |  if_b	mov	local07, local04
22d3c     11 2B 02 C1 |  if_b	add	local07, local03
22d40     20 28 06 C1 |  if_b	add	local06, #32
22d44     15 29 42 CC |  if_b	wrbyte	local06, local07
22d48     0C 00 90 CD |  if_b	jmp	#LR__3164
22d4c                 | LR__3163
22d4c     12 2B 02 F6 | 	mov	local07, local04
22d50     11 2B 02 F1 | 	add	local07, local03
22d54     15 29 42 FC | 	wrbyte	local06, local07
22d58                 | LR__3164
22d58     10 29 02 F6 | 	mov	local06, local02
22d5c     01 28 86 F1 | 	sub	local06, #1
22d60     14 25 0A F2 | 	cmp	local04, local06 wz
22d64     B4 FF 9F 5D |  if_ne	jmp	#LR__3162
22d68                 | LR__3165
22d68     11 21 02 F1 | 	add	local02, local03
22d6c     10 01 48 FC | 	wrbyte	#0, local02
22d70     11 FB 01 F6 | 	mov	result1, local03
22d74     04 00 90 FD | 	jmp	#LR__3167
22d78                 | LR__3166
22d78     11 FB 01 F6 | 	mov	result1, local03
22d7c                 | LR__3167
22d7c     A7 F0 03 F6 | 	mov	ptra, fp
22d80     B2 00 A0 FD | 	call	#popregs_
22d84                 | __system__LCase_S_ret
22d84     2D 00 64 FD | 	ret
22d88                 | 
22d88                 | __system__LTrim_S
22d88     05 4A 05 F6 | 	mov	COUNT_, #5
22d8c     A8 00 A0 FD | 	call	#pushregs_
22d90     09 1F 02 F6 | 	mov	local01, arg01
22d94     09 21 02 F6 | 	mov	local02, arg01
22d98     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
22d9c                 | LR__3170
22d9c     10 FB C9 FA | 	rdbyte	result1, local02 wz
22da0     01 20 06 51 |  if_ne	add	local02, #1
22da4     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
22da8                 | LR__3171
22da8     09 21 82 F1 | 	sub	local02, arg01
22dac     10 FB 01 F6 | 	mov	result1, local02
22db0     FD 20 0A F6 | 	mov	local02, result1 wz
22db4     80 01 00 AF 
22db8     93 FB 05 A6 |  if_e	mov	result1, ##@LR__5028
22dbc     7C 00 90 AD |  if_e	jmp	#LR__3176
22dc0     00 22 06 F6 | 	mov	local03, #0
22dc4     10 25 02 F6 | 	mov	local04, local02
22dc8                 | LR__3172
22dc8     12 23 52 F2 | 	cmps	local03, local04 wc
22dcc     68 00 90 3D |  if_ae	jmp	#LR__3175
22dd0     11 17 02 F6 | 	mov	arg03, local03
22dd4     0F 17 02 F1 | 	add	arg03, local01
22dd8     0B 17 C2 FA | 	rdbyte	arg03, arg03
22ddc     20 16 0E F2 | 	cmp	arg03, #32 wz
22de0     4C 00 90 AD |  if_e	jmp	#LR__3174
22de4     10 13 02 F6 | 	mov	arg01, local02
22de8     11 13 82 F1 | 	sub	arg01, local03
22dec     02 12 06 F1 | 	add	arg01, #2
22df0     24 1A B0 FD | 	call	#__system___gc_alloc_managed
22df4     FD 26 0A F6 | 	mov	local05, result1 wz
22df8     2C 00 90 AD |  if_e	jmp	#LR__3173
22dfc     11 15 02 F6 | 	mov	arg02, local03
22e00     0F 15 02 F1 | 	add	arg02, local01
22e04     10 17 02 F6 | 	mov	arg03, local02
22e08     11 17 82 F1 | 	sub	arg03, local03
22e0c     13 13 02 F6 | 	mov	arg01, local05
22e10     48 DA BF FD | 	call	#__system____builtin_memmove
22e14     11 21 82 F1 | 	sub	local02, local03
22e18     13 21 02 F1 | 	add	local02, local05
22e1c     10 01 48 FC | 	wrbyte	#0, local02
22e20     13 FB 01 F6 | 	mov	result1, local05
22e24     14 00 90 FD | 	jmp	#LR__3176
22e28                 | LR__3173
22e28     13 FB 01 F6 | 	mov	result1, local05
22e2c     0C 00 90 FD | 	jmp	#LR__3176
22e30                 | LR__3174
22e30     01 22 06 F1 | 	add	local03, #1
22e34     90 FF 9F FD | 	jmp	#LR__3172
22e38                 | LR__3175
22e38     0F FB 01 F6 | 	mov	result1, local01
22e3c                 | LR__3176
22e3c     A7 F0 03 F6 | 	mov	ptra, fp
22e40     B2 00 A0 FD | 	call	#popregs_
22e44                 | __system__LTrim_S_ret
22e44     2D 00 64 FD | 	ret
22e48                 | 
22e48                 | __system__RTrim_S
22e48     04 4A 05 F6 | 	mov	COUNT_, #4
22e4c     A8 00 A0 FD | 	call	#pushregs_
22e50     09 1F 02 F6 | 	mov	local01, arg01
22e54     09 21 02 F6 | 	mov	local02, arg01
22e58     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
22e5c                 | LR__3180
22e5c     10 FB C9 FA | 	rdbyte	result1, local02 wz
22e60     01 20 06 51 |  if_ne	add	local02, #1
22e64     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
22e68                 | LR__3181
22e68     09 21 82 F1 | 	sub	local02, arg01
22e6c     10 FB 01 F6 | 	mov	result1, local02
22e70     FD 20 0A F6 | 	mov	local02, result1 wz
22e74     80 01 00 AF 
22e78     94 FB 05 A6 |  if_e	mov	result1, ##@LR__5029
22e7c     74 00 90 AD |  if_e	jmp	#LR__3185
22e80     10 23 02 F6 | 	mov	local03, local02
22e84     01 22 86 F1 | 	sub	local03, #1
22e88                 | LR__3182
22e88     11 15 02 F6 | 	mov	arg02, local03
22e8c     0F 15 02 F1 | 	add	arg02, local01
22e90     0A 21 C2 FA | 	rdbyte	local02, arg02
22e94     20 20 0E F2 | 	cmp	local02, #32 wz
22e98     44 00 90 AD |  if_e	jmp	#LR__3184
22e9c     11 13 02 F6 | 	mov	arg01, local03
22ea0     02 12 06 F1 | 	add	arg01, #2
22ea4     70 19 B0 FD | 	call	#__system___gc_alloc_managed
22ea8     FD 24 0A F6 | 	mov	local04, result1 wz
22eac     28 00 90 AD |  if_e	jmp	#LR__3183
22eb0     11 17 02 F6 | 	mov	arg03, local03
22eb4     01 16 06 F1 | 	add	arg03, #1
22eb8     12 13 02 F6 | 	mov	arg01, local04
22ebc     0F 15 02 F6 | 	mov	arg02, local01
22ec0     98 D9 BF FD | 	call	#__system____builtin_memmove
22ec4     01 22 06 F1 | 	add	local03, #1
22ec8     12 23 02 F1 | 	add	local03, local04
22ecc     11 01 48 FC | 	wrbyte	#0, local03
22ed0     12 FB 01 F6 | 	mov	result1, local04
22ed4     1C 00 90 FD | 	jmp	#LR__3185
22ed8                 | LR__3183
22ed8     12 FB 01 F6 | 	mov	result1, local04
22edc     14 00 90 FD | 	jmp	#LR__3185
22ee0                 | LR__3184
22ee0     01 22 86 F1 | 	sub	local03, #1
22ee4     00 22 56 F2 | 	cmps	local03, #0 wc
22ee8     9C FF 9F 3D |  if_ae	jmp	#LR__3182
22eec     80 01 00 FF 
22ef0     95 FB 05 F6 | 	mov	result1, ##@LR__5030
22ef4                 | LR__3185
22ef4     A7 F0 03 F6 | 	mov	ptra, fp
22ef8     B2 00 A0 FD | 	call	#popregs_
22efc                 | __system__RTrim_S_ret
22efc     2D 00 64 FD | 	ret
22f00                 | 
22f00                 | __system__Instr
22f00     07 4A 05 F6 | 	mov	COUNT_, #7
22f04     A8 00 A0 FD | 	call	#pushregs_
22f08     09 1F 02 F6 | 	mov	local01, arg01
22f0c     0A 21 02 F6 | 	mov	local02, arg02
22f10     0B 23 02 F6 | 	mov	local03, arg03
22f14     11 13 02 F6 | 	mov	arg01, local03
22f18     09 25 02 F6 | 	mov	local04, arg01
22f1c     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
22f20                 | LR__3190
22f20     12 FB C9 FA | 	rdbyte	result1, local04 wz
22f24     01 24 06 51 |  if_ne	add	local04, #1
22f28     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
22f2c                 | LR__3191
22f2c     09 25 82 F1 | 	sub	local04, arg01
22f30     12 27 02 F6 | 	mov	local05, local04
22f34     10 13 02 F6 | 	mov	arg01, local02
22f38     09 25 02 F6 | 	mov	local04, arg01
22f3c     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
22f40                 | LR__3192
22f40     12 FB C9 FA | 	rdbyte	result1, local04 wz
22f44     01 24 06 51 |  if_ne	add	local04, #1
22f48     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
22f4c                 | LR__3193
22f4c     09 25 82 F1 | 	sub	local04, arg01
22f50     12 FB 01 F6 | 	mov	result1, local04
22f54     FD 18 0A F6 | 	mov	arg04, result1 wz
22f58     00 FA 05 A6 |  if_e	mov	result1, #0
22f5c     98 00 90 AD |  if_e	jmp	#LR__3197
22f60     00 26 0E F2 | 	cmp	local05, #0 wz
22f64     00 FA 05 A6 |  if_e	mov	result1, #0
22f68     8C 00 90 AD |  if_e	jmp	#LR__3197
22f6c     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
22f70     00 FA 05 16 |  if_a	mov	result1, #0
22f74     80 00 90 1D |  if_a	jmp	#LR__3197
22f78     01 1E 56 F2 | 	cmps	local01, #1 wc
22f7c     01 1E 06 C6 |  if_b	mov	local01, #1
22f80     11 29 C2 FA | 	rdbyte	local06, local03
22f84     01 26 0E F2 | 	cmp	local05, #1 wz
22f88     18 00 90 5D |  if_ne	jmp	#LR__3194
22f8c     10 13 02 F6 | 	mov	arg01, local02
22f90     14 15 02 F6 | 	mov	arg02, local06
22f94     0F 17 02 F6 | 	mov	arg03, local01
22f98     00 18 06 F6 | 	mov	arg04, #0
22f9c     50 34 B0 FD | 	call	#__system____ScanForChar
22fa0     54 00 90 FD | 	jmp	#LR__3197
22fa4                 | LR__3194
22fa4     0F 2B 02 F6 | 	mov	local07, local01
22fa8                 | LR__3195
22fa8     10 13 02 F6 | 	mov	arg01, local02
22fac     14 15 02 F6 | 	mov	arg02, local06
22fb0     15 17 02 F6 | 	mov	arg03, local07
22fb4     00 18 06 F6 | 	mov	arg04, #0
22fb8     34 34 B0 FD | 	call	#__system____ScanForChar
22fbc     FD 2A 0A F6 | 	mov	local07, result1 wz
22fc0     30 00 90 AD |  if_e	jmp	#LR__3196
22fc4     13 17 02 F6 | 	mov	arg03, local05
22fc8     10 13 02 F6 | 	mov	arg01, local02
22fcc     15 15 02 F6 | 	mov	arg02, local07
22fd0     FC FA BF FD | 	call	#__system__Mid_S
22fd4     FD 12 02 F6 | 	mov	arg01, result1
22fd8     11 15 02 F6 | 	mov	arg02, local03
22fdc     84 D9 BF FD | 	call	#__system___string_cmp
22fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
22fe4     15 FB 01 A6 |  if_e	mov	result1, local07
22fe8     0C 00 90 AD |  if_e	jmp	#LR__3197
22fec     13 2B 02 F1 | 	add	local07, local05
22ff0     B4 FF 9F FD | 	jmp	#LR__3195
22ff4                 | LR__3196
22ff4     00 FA 05 F6 | 	mov	result1, #0
22ff8                 | LR__3197
22ff8     A7 F0 03 F6 | 	mov	ptra, fp
22ffc     B2 00 A0 FD | 	call	#popregs_
23000                 | __system__Instr_ret
23000     2D 00 64 FD | 	ret
23004                 | 
23004                 | __system___strerror
23004     00 12 56 F2 | 	cmps	arg01, #0 wc
23008     08 00 90 CD |  if_b	jmp	#LR__3200
2300c     1A 12 56 F2 | 	cmps	arg01, #26 wc
23010     04 00 90 CD |  if_b	jmp	#LR__3201
23014                 | LR__3200
23014     19 12 06 F6 | 	mov	arg01, #25
23018                 | LR__3201
23018     02 12 66 F0 | 	shl	arg01, #2
2301c     01 00 00 FF 
23020     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
23024     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23028     09 FB 01 FB | 	rdlong	result1, arg01
2302c     01 00 00 FF 
23030     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23034                 | __system___strerror_ret
23034     2D 00 64 FD | 	ret
23038                 | 
23038                 | __system___int64_shl
23038     20 16 CE F7 | 	test	arg03, #32 wz
2303c     09 15 02 56 |  if_ne	mov	arg02, arg01
23040     00 12 06 56 |  if_ne	mov	arg01, #0
23044     1F 16 CE F7 | 	test	arg03, #31 wz
23048     18 00 90 AD |  if_e	jmp	#LR__3210
2304c     0B 15 62 F0 | 	shl	arg02, arg03
23050     09 FB 01 F6 | 	mov	result1, arg01
23054     0B FD 61 F6 | 	neg	result2, arg03
23058     FE FA 41 F0 | 	shr	result1, result2
2305c     FD 14 42 F5 | 	or	arg02, result1
23060     0B 13 62 F0 | 	shl	arg01, arg03
23064                 | LR__3210
23064     0A FD 01 F6 | 	mov	result2, arg02
23068     09 FB 01 F6 | 	mov	result1, arg01
2306c                 | __system___int64_shl_ret
2306c     2D 00 64 FD | 	ret
23070                 | 
23070                 | __system___usepins
23070     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23074     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23078     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2307c     00 13 CA F7 | 	test	arg01, _var01 wz
23080     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23084     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23088     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2308c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
23090     00 FA 05 56 |  if_ne	mov	result1, #0
23094     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23098     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2309c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
230a0     09 03 42 F5 | 	or	_var02, arg01
230a4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
230a8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
230ac     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
230b0     0A 03 42 F5 | 	or	_var02, arg02
230b4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
230b8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
230bc     01 FA 65 F6 | 	neg	result1, #1
230c0                 | __system___usepins_ret
230c0     2D 00 64 FD | 	ret
230c4                 | 
230c4                 | __system___freepins
230c4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
230c8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
230cc     09 01 22 F5 | 	andn	_var01, arg01
230d0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
230d4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
230d8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
230dc     0A 01 22 F5 | 	andn	_var01, arg02
230e0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
230e4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
230e8                 | __system___freepins_ret
230e8     2D 00 64 FD | 	ret
230ec                 | 
230ec                 | __system___float_fromuns
230ec     09 17 0A F6 | 	mov	arg03, arg01 wz
230f0     0B FB 01 A6 |  if_e	mov	result1, arg03
230f4     24 00 90 AD |  if_e	jmp	#LR__3220
230f8     0B 15 92 F7 | 	encod	arg02, arg03 wc
230fc     01 14 06 C1 |  if_b	add	arg02, #1
23100     01 14 86 F1 | 	sub	arg02, #1
23104     1F 12 06 F6 | 	mov	arg01, #31
23108     0A 13 82 F1 | 	sub	arg01, arg02
2310c     09 17 62 F0 | 	shl	arg03, arg01
23110     02 16 46 F0 | 	shr	arg03, #2
23114     00 12 06 F6 | 	mov	arg01, #0
23118     4C 09 B0 FD | 	call	#__system___float_Pack
2311c                 | LR__3220
2311c                 | __system___float_fromuns_ret
2311c     2D 00 64 FD | 	ret
23120                 | 
23120                 | __system___float_add
23120     0F 4A 05 F6 | 	mov	COUNT_, #15
23124     A8 00 A0 FD | 	call	#pushregs_
23128     09 1F 02 F6 | 	mov	local01, arg01
2312c     0A 21 02 F6 | 	mov	local02, arg02
23130     00 22 06 F6 | 	mov	local03, #0
23134     0F 25 02 F6 | 	mov	local04, local01
23138     12 27 02 F6 | 	mov	local05, local04
2313c     16 26 46 F7 | 	zerox	local05, #22
23140     12 29 02 F6 | 	mov	local06, local04
23144     01 28 66 F0 | 	shl	local06, #1
23148     18 28 46 F0 | 	shr	local06, #24
2314c     1F 24 46 F0 | 	shr	local04, #31
23150     10 13 02 F6 | 	mov	arg01, local02
23154     09 FB 01 F6 | 	mov	result1, arg01
23158     FD 2A 02 F6 | 	mov	local07, result1
2315c     15 2D 02 F6 | 	mov	local08, local07
23160     16 2C 46 F7 | 	zerox	local08, #22
23164     15 2F 02 F6 | 	mov	local09, local07
23168     01 2E 66 F0 | 	shl	local09, #1
2316c     18 2E 46 F0 | 	shr	local09, #24
23170     17 31 02 F6 | 	mov	local10, local09
23174     1F 2A 46 F0 | 	shr	local07, #31
23178     00 32 06 F6 | 	mov	local11, #0
2317c     00 34 06 F6 | 	mov	local12, #0
23180     18 29 12 F2 | 	cmp	local06, local10 wc
23184     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23188     2C 00 90 1D |  if_a	jmp	#LR__3230
2318c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23190     24 00 90 3D |  if_ae	jmp	#LR__3230
23194     13 37 02 F6 | 	mov	local13, local05
23198     16 27 02 F6 | 	mov	local05, local08
2319c     1B 2D 02 F6 | 	mov	local08, local13
231a0     14 37 02 F6 | 	mov	local13, local06
231a4     18 29 02 F6 | 	mov	local06, local10
231a8     1B 31 02 F6 | 	mov	local10, local13
231ac     12 37 02 F6 | 	mov	local13, local04
231b0     15 25 02 F6 | 	mov	local04, local07
231b4     1B 2B 02 F6 | 	mov	local07, local13
231b8                 | LR__3230
231b8     FF 28 0E F2 | 	cmp	local06, #255 wz
231bc     70 01 90 AD |  if_e	jmp	#LR__3245
231c0     00 28 0E F2 | 	cmp	local06, #0 wz
231c4     AC 01 90 AD |  if_e	jmp	#LR__3247
231c8     17 26 26 F4 | 	bith	local05, #23
231cc                 | LR__3231
231cc     00 30 0E F2 | 	cmp	local10, #0 wz
231d0     F0 01 90 AD |  if_e	jmp	#LR__3251
231d4     17 2C 26 F4 | 	bith	local08, #23
231d8                 | LR__3232
231d8     7F 28 86 F1 | 	sub	local06, #127
231dc     7F 30 86 F1 | 	sub	local10, #127
231e0     14 39 02 F6 | 	mov	local14, local06
231e4     18 39 82 F1 | 	sub	local14, local10
231e8     97 14 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
231ec                 | LR__3233
231ec     20 38 56 F2 | 	cmps	local14, #32 wc
231f0     20 00 90 CD |  if_b	jmp	#LR__3235
231f4     16 2F 02 F6 | 	mov	local09, local08
231f8     00 32 0E F2 | 	cmp	local11, #0 wz
231fc     6F 32 62 FD | 	wrnz	local11
23200     19 2F 42 F5 | 	or	local09, local11
23204     17 33 02 F6 | 	mov	local11, local09
23208     00 2C 06 F6 | 	mov	local08, #0
2320c     20 38 86 F1 | 	sub	local14, #32
23210     D8 FF 9F FD | 	jmp	#LR__3233
23214                 | LR__3234
23214                 | LR__3235
23214     00 38 0E F2 | 	cmp	local14, #0 wz
23218     38 00 90 AD |  if_e	jmp	#LR__3236
2321c     16 37 02 F6 | 	mov	local13, local08
23220     20 30 06 F6 | 	mov	local10, #32
23224     1C 31 82 F1 | 	sub	local10, local14
23228     18 37 62 F0 | 	shl	local13, local10
2322c     19 31 02 F6 | 	mov	local10, local11
23230     20 2E 06 F6 | 	mov	local09, #32
23234     1C 2F 82 F1 | 	sub	local09, local14
23238     17 31 6A F0 | 	shl	local10, local09 wz
2323c     1C 33 42 F0 | 	shr	local11, local14
23240     1C 2D 42 F0 | 	shr	local08, local14
23244     1B 33 42 F5 | 	or	local11, local13
23248     00 3A 06 F6 | 	mov	local15, #0
2324c     01 3A 06 56 |  if_ne	mov	local15, #1
23250     1D 33 42 F5 | 	or	local11, local15
23254                 | LR__3236
23254     12 3B 02 F6 | 	mov	local15, local04
23258     15 3B 62 F5 | 	xor	local15, local07
2325c     01 3A CE F7 | 	test	local15, #1 wz
23260     18 00 90 AD |  if_e	jmp	#LR__3237
23264     16 2D 22 F6 | 	not	local08, local08
23268     19 33 22 F6 | 	not	local11, local11
2326c     01 32 0E F1 | 	add	local11, #1 wz
23270     00 3A 06 F6 | 	mov	local15, #0
23274     01 3A 06 A6 |  if_e	mov	local15, #1
23278     1D 2D 02 F1 | 	add	local08, local15
2327c                 | LR__3237
2327c     19 35 12 F1 | 	add	local12, local11 wc
23280     16 27 22 F1 | 	addx	local05, local08
23284     00 26 56 F2 | 	cmps	local05, #0 wc
23288     1C 00 90 3D |  if_ae	jmp	#LR__3238
2328c     01 24 66 F5 | 	xor	local04, #1
23290     13 27 22 F6 | 	not	local05, local05
23294     1A 35 22 F6 | 	not	local12, local12
23298     01 34 0E F1 | 	add	local12, #1 wz
2329c     00 3A 06 F6 | 	mov	local15, #0
232a0     01 3A 06 A6 |  if_e	mov	local15, #1
232a4     1D 27 02 F1 | 	add	local05, local15
232a8                 | LR__3238
232a8     00 80 00 FF 
232ac     00 26 16 F2 | 	cmp	local05, ##16777216 wc
232b0     28 00 90 CD |  if_b	jmp	#LR__3239
232b4     01 28 06 F1 | 	add	local06, #1
232b8     1A 39 02 F6 | 	mov	local14, local12
232bc     01 38 06 F5 | 	and	local14, #1
232c0     01 34 46 F0 | 	shr	local12, #1
232c4     13 3B 02 F6 | 	mov	local15, local05
232c8     1F 3A 66 F0 | 	shl	local15, #31
232cc     1D 35 42 F5 | 	or	local12, local15
232d0     1C 35 42 F5 | 	or	local12, local14
232d4     01 26 46 F0 | 	shr	local05, #1
232d8     3C 00 90 FD | 	jmp	#LR__3244
232dc                 | LR__3239
232dc     00 40 00 FF 
232e0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
232e4     30 00 90 3D |  if_ae	jmp	#LR__3243
232e8     00 26 0E F2 | 	cmp	local05, #0 wz
232ec     00 34 0E A2 |  if_e	cmp	local12, #0 wz
232f0     08 24 46 A5 |  if_e	or	local04, #8
232f4     01 24 26 A5 |  if_e	andn	local04, #1
232f8     1C 00 90 AD |  if_e	jmp	#LR__3242
232fc                 | LR__3240
232fc     00 40 00 FF 
23300     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23304     10 00 90 3D |  if_ae	jmp	#LR__3241
23308     1A 35 12 F1 | 	add	local12, local12 wc
2330c     13 27 22 F1 | 	addx	local05, local05
23310     01 28 86 F1 | 	sub	local06, #1
23314     E4 FF 9F FD | 	jmp	#LR__3240
23318                 | LR__3241
23318                 | LR__3242
23318                 | LR__3243
23318                 | LR__3244
23318     13 13 02 F6 | 	mov	arg01, local05
2331c     1A 15 02 F6 | 	mov	arg02, local12
23320     14 17 02 F6 | 	mov	arg03, local06
23324     12 19 02 F6 | 	mov	arg04, local04
23328     08 35 B0 FD | 	call	#__system__pack_0606
2332c     DC 00 90 FD | 	jmp	#LR__3255
23330                 | LR__3245
23330     FF 30 0E F2 | 	cmp	local10, #255 wz
23334     10 00 90 5D |  if_ne	jmp	#LR__3246
23338     12 2B 0A F2 | 	cmp	local07, local04 wz
2333c     00 F8 3F 5F 
23340     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23344     C4 00 90 5D |  if_ne	jmp	#LR__3255
23348                 | LR__3246
23348     00 26 0E F2 | 	cmp	local05, #0 wz
2334c     00 F8 3F 5F 
23350     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23354     B4 00 90 5D |  if_ne	jmp	#LR__3255
23358     1A 15 02 F6 | 	mov	arg02, local12
2335c     14 17 02 F6 | 	mov	arg03, local06
23360     12 19 02 F6 | 	mov	arg04, local04
23364     02 18 46 F5 | 	or	arg04, #2
23368     13 13 02 F6 | 	mov	arg01, local05
2336c     C4 34 B0 FD | 	call	#__system__pack_0606
23370     98 00 90 FD | 	jmp	#LR__3255
23374                 | LR__3247
23374     00 26 0E F2 | 	cmp	local05, #0 wz
23378     28 00 90 AD |  if_e	jmp	#LR__3250
2337c     01 26 66 F0 | 	shl	local05, #1
23380     97 0E 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
23384                 | LR__3248
23384     00 40 00 FF 
23388     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2338c     14 3B 02 C6 |  if_b	mov	local15, local06
23390     01 3A 86 C1 |  if_b	sub	local15, #1
23394     1D 29 02 C6 |  if_b	mov	local06, local15
23398     01 26 66 C0 |  if_b	shl	local05, #1
2339c     E4 FF 9F CD |  if_b	jmp	#LR__3248
233a0                 | LR__3249
233a0     28 FE 9F FD | 	jmp	#LR__3231
233a4                 | LR__3250
233a4     15 25 02 F5 | 	and	local04, local07
233a8     12 19 02 F6 | 	mov	arg04, local04
233ac     08 18 46 F5 | 	or	arg04, #8
233b0     00 12 06 F6 | 	mov	arg01, #0
233b4     00 14 06 F6 | 	mov	arg02, #0
233b8     00 16 06 F6 | 	mov	arg03, #0
233bc     74 34 B0 FD | 	call	#__system__pack_0606
233c0     48 00 90 FD | 	jmp	#LR__3255
233c4                 | LR__3251
233c4     00 2C 0E F2 | 	cmp	local08, #0 wz
233c8     28 00 90 AD |  if_e	jmp	#LR__3254
233cc     01 2C 66 F0 | 	shl	local08, #1
233d0     97 0E 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
233d4                 | LR__3252
233d4     00 40 00 FF 
233d8     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
233dc     18 3B 02 C6 |  if_b	mov	local15, local10
233e0     01 3A 86 C1 |  if_b	sub	local15, #1
233e4     1D 31 02 C6 |  if_b	mov	local10, local15
233e8     01 2C 66 C0 |  if_b	shl	local08, #1
233ec     E4 FF 9F CD |  if_b	jmp	#LR__3252
233f0                 | LR__3253
233f0     E4 FD 9F FD | 	jmp	#LR__3232
233f4                 | LR__3254
233f4     7F 28 86 F1 | 	sub	local06, #127
233f8     13 13 02 F6 | 	mov	arg01, local05
233fc     1A 15 02 F6 | 	mov	arg02, local12
23400     14 17 02 F6 | 	mov	arg03, local06
23404     12 19 02 F6 | 	mov	arg04, local04
23408     28 34 B0 FD | 	call	#__system__pack_0606
2340c                 | LR__3255
2340c     A7 F0 03 F6 | 	mov	ptra, fp
23410     B2 00 A0 FD | 	call	#popregs_
23414                 | __system___float_add_ret
23414     2D 00 64 FD | 	ret
23418                 | 
23418                 | __system___float_sqrt
23418     04 4A 05 F6 | 	mov	COUNT_, #4
2341c     A8 00 A0 FD | 	call	#pushregs_
23420     09 1F 02 F6 | 	mov	local01, arg01
23424     09 FB 01 F6 | 	mov	result1, arg01
23428     FD 20 02 F6 | 	mov	local02, result1
2342c     10 23 02 F6 | 	mov	local03, local02
23430     16 22 46 F7 | 	zerox	local03, #22
23434     10 25 02 F6 | 	mov	local04, local02
23438     01 24 66 F0 | 	shl	local04, #1
2343c     18 24 4E F0 | 	shr	local04, #24 wz
23440     1F 20 46 F0 | 	shr	local02, #31
23444     70 00 90 AD |  if_e	jmp	#LR__3261
23448     17 22 26 F4 | 	bith	local03, #23
2344c                 | LR__3260
2344c     00 20 0E F2 | 	cmp	local02, #0 wz
23450     00 F8 3F 5F 
23454     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23458     88 00 90 5D |  if_ne	jmp	#LR__3264
2345c     FF 24 0E F2 | 	cmp	local04, #255 wz
23460     0F FB 01 A6 |  if_e	mov	result1, local01
23464     7C 00 90 AD |  if_e	jmp	#LR__3264
23468     7F 24 86 F1 | 	sub	local04, #127
2346c     01 24 CE F7 | 	test	local04, #1 wz
23470     01 22 66 50 |  if_ne	shl	local03, #1
23474     05 22 66 F0 | 	shl	local03, #5
23478     11 01 38 FD | 	qsqrt	#0, local03
2347c     01 24 86 51 |  if_ne	sub	local04, #1
23480     12 25 52 F6 | 	abs	local04, local04 wc
23484     01 24 46 F0 | 	shr	local04, #1
23488     12 17 82 F6 | 	negc	arg03, local04
2348c     10 19 02 F6 | 	mov	arg04, local02
23490     18 12 62 FD | 	getqx	arg01
23494     09 15 02 F6 | 	mov	arg02, arg01
23498     19 14 66 F0 | 	shl	arg02, #25
2349c     07 12 46 F0 | 	shr	arg01, #7
234a0     00 80 00 FF 
234a4     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
234a8     01 16 06 31 |  if_ae	add	arg03, #1
234ac     01 12 46 30 |  if_ae	shr	arg01, #1
234b0     80 33 B0 FD | 	call	#__system__pack_0606
234b4     2C 00 90 FD | 	jmp	#LR__3264
234b8                 | LR__3261
234b8     00 22 0E F2 | 	cmp	local03, #0 wz
234bc     0F FB 01 A6 |  if_e	mov	result1, local01
234c0     20 00 90 AD |  if_e	jmp	#LR__3264
234c4     01 22 66 F0 | 	shl	local03, #1
234c8     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
234cc                 | LR__3262
234cc     00 40 00 FF 
234d0     00 22 16 F2 | 	cmp	local03, ##8388608 wc
234d4     01 24 86 C1 |  if_b	sub	local04, #1
234d8     01 22 66 C0 |  if_b	shl	local03, #1
234dc     EC FF 9F CD |  if_b	jmp	#LR__3262
234e0                 | LR__3263
234e0     68 FF 9F FD | 	jmp	#LR__3260
234e4                 | LR__3264
234e4     A7 F0 03 F6 | 	mov	ptra, fp
234e8     B2 00 A0 FD | 	call	#popregs_
234ec                 | __system___float_sqrt_ret
234ec     2D 00 64 FD | 	ret
234f0                 | 
234f0                 | __system___float_mul
234f0     0B 4A 05 F6 | 	mov	COUNT_, #11
234f4     A8 00 A0 FD | 	call	#pushregs_
234f8     09 1F 02 F6 | 	mov	local01, arg01
234fc     0A 21 02 F6 | 	mov	local02, arg02
23500     0F 23 02 F6 | 	mov	local03, local01
23504     11 25 02 F6 | 	mov	local04, local03
23508     16 24 46 F7 | 	zerox	local04, #22
2350c     11 27 02 F6 | 	mov	local05, local03
23510     01 26 66 F0 | 	shl	local05, #1
23514     18 26 46 F0 | 	shr	local05, #24
23518     1F 22 46 F0 | 	shr	local03, #31
2351c     10 FB 01 F6 | 	mov	result1, local02
23520     FD 28 02 F6 | 	mov	local06, result1
23524     14 2B 02 F6 | 	mov	local07, local06
23528     16 2A 46 F7 | 	zerox	local07, #22
2352c     14 2D 02 F6 | 	mov	local08, local06
23530     01 2C 66 F0 | 	shl	local08, #1
23534     18 2C 46 F0 | 	shr	local08, #24
23538     1F 28 46 F0 | 	shr	local06, #31
2353c     14 23 62 F5 | 	xor	local03, local06
23540     FF 26 0E F2 | 	cmp	local05, #255 wz
23544     90 00 90 AD |  if_e	jmp	#LR__3273
23548     FF 2C 0E F2 | 	cmp	local08, #255 wz
2354c     D8 00 90 AD |  if_e	jmp	#LR__3275
23550     00 26 0E F2 | 	cmp	local05, #0 wz
23554     0C 01 90 AD |  if_e	jmp	#LR__3276
23558     17 24 26 F4 | 	bith	local04, #23
2355c                 | LR__3270
2355c     00 2C 0E F2 | 	cmp	local08, #0 wz
23560     44 01 90 AD |  if_e	jmp	#LR__3280
23564     17 2A 26 F4 | 	bith	local07, #23
23568                 | LR__3271
23568     12 21 02 F6 | 	mov	local02, local04
2356c     04 20 66 F0 | 	shl	local02, #4
23570     15 29 02 F6 | 	mov	local06, local07
23574     05 28 66 F0 | 	shl	local06, #5
23578     14 21 02 FD | 	qmul	local02, local06
2357c     16 27 02 F1 | 	add	local05, local08
23580     FE 26 86 F1 | 	sub	local05, #254
23584     13 2F 02 F6 | 	mov	local09, local05
23588     04 24 66 F0 | 	shl	local04, #4
2358c     05 2A 66 F0 | 	shl	local07, #5
23590     18 30 62 FD | 	getqx	local10
23594     15 25 02 FD | 	qmul	local04, local07
23598     19 32 62 FD | 	getqy	local11
2359c     00 80 00 FF 
235a0     00 32 16 F2 | 	cmp	local11, ##16777216 wc
235a4     18 00 90 CD |  if_b	jmp	#LR__3272
235a8     01 2E 06 F1 | 	add	local09, #1
235ac     01 30 46 F0 | 	shr	local10, #1
235b0     19 2D 02 F6 | 	mov	local08, local11
235b4     1F 2C 66 F0 | 	shl	local08, #31
235b8     16 31 42 F5 | 	or	local10, local08
235bc     01 32 46 F0 | 	shr	local11, #1
235c0                 | LR__3272
235c0     19 13 02 F6 | 	mov	arg01, local11
235c4     18 15 02 F6 | 	mov	arg02, local10
235c8     17 17 02 F6 | 	mov	arg03, local09
235cc     11 19 02 F6 | 	mov	arg04, local03
235d0     60 32 B0 FD | 	call	#__system__pack_0606
235d4     10 01 90 FD | 	jmp	#LR__3284
235d8                 | LR__3273
235d8     00 24 0E F2 | 	cmp	local04, #0 wz
235dc     0F FB 01 56 |  if_ne	mov	result1, local01
235e0     04 01 90 5D |  if_ne	jmp	#LR__3284
235e4     FF 2C 56 F2 | 	cmps	local08, #255 wc
235e8     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
235ec     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
235f0     18 00 90 4D |  if_c_and_nz	jmp	#LR__3274
235f4     00 F8 3F CF 
235f8     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
235fc     E8 00 90 CD |  if_b	jmp	#LR__3284
23600     00 2A 0E F2 | 	cmp	local07, #0 wz
23604     10 FB 01 56 |  if_ne	mov	result1, local02
23608     DC 00 90 5D |  if_ne	jmp	#LR__3284
2360c                 | LR__3274
2360c     02 22 46 F5 | 	or	local03, #2
23610     00 12 06 F6 | 	mov	arg01, #0
23614     00 14 06 F6 | 	mov	arg02, #0
23618     13 17 02 F6 | 	mov	arg03, local05
2361c     11 19 02 F6 | 	mov	arg04, local03
23620     10 32 B0 FD | 	call	#__system__pack_0606
23624     C0 00 90 FD | 	jmp	#LR__3284
23628                 | LR__3275
23628     00 26 0E F2 | 	cmp	local05, #0 wz
2362c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23630     00 F8 3F AF 
23634     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23638     AC 00 90 AD |  if_e	jmp	#LR__3284
2363c     00 2A 0E F2 | 	cmp	local07, #0 wz
23640     10 FB 01 56 |  if_ne	mov	result1, local02
23644     A0 00 90 5D |  if_ne	jmp	#LR__3284
23648     16 17 02 F6 | 	mov	arg03, local08
2364c     11 19 02 F6 | 	mov	arg04, local03
23650     02 18 46 F5 | 	or	arg04, #2
23654     00 12 06 F6 | 	mov	arg01, #0
23658     00 14 06 F6 | 	mov	arg02, #0
2365c     D4 31 B0 FD | 	call	#__system__pack_0606
23660     84 00 90 FD | 	jmp	#LR__3284
23664                 | LR__3276
23664     00 24 0E F2 | 	cmp	local04, #0 wz
23668     20 00 90 AD |  if_e	jmp	#LR__3279
2366c     01 24 66 F0 | 	shl	local04, #1
23670     97 0A 48 FB | 	callpa	#(@LR__3278-@LR__3277)>>2,fcache_load_ptr_
23674                 | LR__3277
23674     00 40 00 FF 
23678     00 24 16 F2 | 	cmp	local04, ##8388608 wc
2367c     01 26 86 C1 |  if_b	sub	local05, #1
23680     01 24 66 C0 |  if_b	shl	local04, #1
23684     EC FF 9F CD |  if_b	jmp	#LR__3277
23688                 | LR__3278
23688     D0 FE 9F FD | 	jmp	#LR__3270
2368c                 | LR__3279
2368c     08 22 46 F5 | 	or	local03, #8
23690     00 12 06 F6 | 	mov	arg01, #0
23694     00 14 06 F6 | 	mov	arg02, #0
23698     00 16 06 F6 | 	mov	arg03, #0
2369c     11 19 02 F6 | 	mov	arg04, local03
236a0     90 31 B0 FD | 	call	#__system__pack_0606
236a4     40 00 90 FD | 	jmp	#LR__3284
236a8                 | LR__3280
236a8     00 2A 0E F2 | 	cmp	local07, #0 wz
236ac     20 00 90 AD |  if_e	jmp	#LR__3283
236b0     01 2A 66 F0 | 	shl	local07, #1
236b4     97 0A 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
236b8                 | LR__3281
236b8     00 40 00 FF 
236bc     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
236c0     01 2C 86 C1 |  if_b	sub	local08, #1
236c4     01 2A 66 C0 |  if_b	shl	local07, #1
236c8     EC FF 9F CD |  if_b	jmp	#LR__3281
236cc                 | LR__3282
236cc     98 FE 9F FD | 	jmp	#LR__3271
236d0                 | LR__3283
236d0     08 22 46 F5 | 	or	local03, #8
236d4     00 12 06 F6 | 	mov	arg01, #0
236d8     00 14 06 F6 | 	mov	arg02, #0
236dc     00 16 06 F6 | 	mov	arg03, #0
236e0     11 19 02 F6 | 	mov	arg04, local03
236e4     4C 31 B0 FD | 	call	#__system__pack_0606
236e8                 | LR__3284
236e8     A7 F0 03 F6 | 	mov	ptra, fp
236ec     B2 00 A0 FD | 	call	#popregs_
236f0                 | __system___float_mul_ret
236f0     2D 00 64 FD | 	ret
236f4                 | 
236f4                 | __system___float_div
236f4     0E 4A 05 F6 | 	mov	COUNT_, #14
236f8     A8 00 A0 FD | 	call	#pushregs_
236fc     09 23 02 F6 | 	mov	local03, arg01
23700     0A 25 02 F6 | 	mov	local04, arg02
23704     11 27 02 F6 | 	mov	local05, local03
23708     13 29 02 F6 | 	mov	local06, local05
2370c     16 28 46 F7 | 	zerox	local06, #22
23710     13 2B 02 F6 | 	mov	local07, local05
23714     01 2A 66 F0 | 	shl	local07, #1
23718     18 2A 46 F0 | 	shr	local07, #24
2371c     1F 26 46 F0 | 	shr	local05, #31
23720     12 FB 01 F6 | 	mov	result1, local04
23724     FD 2C 02 F6 | 	mov	local08, result1
23728     16 2F 02 F6 | 	mov	local09, local08
2372c     16 2E 46 F7 | 	zerox	local09, #22
23730     16 31 02 F6 | 	mov	local10, local08
23734     01 30 66 F0 | 	shl	local10, #1
23738     18 30 46 F0 | 	shr	local10, #24
2373c     1F 2C 46 F0 | 	shr	local08, #31
23740     16 27 62 F5 | 	xor	local05, local08
23744     FF 2A 0E F2 | 	cmp	local07, #255 wz
23748     D4 00 90 AD |  if_e	jmp	#LR__3295
2374c     FF 30 0E F2 | 	cmp	local10, #255 wz
23750     04 01 90 AD |  if_e	jmp	#LR__3296
23754     00 2A 0E F2 | 	cmp	local07, #0 wz
23758     24 01 90 AD |  if_e	jmp	#LR__3297
2375c     17 28 26 F4 | 	bith	local06, #23
23760                 | LR__3290
23760     00 30 0E F2 | 	cmp	local10, #0 wz
23764     70 01 90 AD |  if_e	jmp	#LR__3301
23768     17 2E 26 F4 | 	bith	local09, #23
2376c                 | LR__3291
2376c     18 2B 82 F1 | 	sub	local07, local10
23770     15 33 02 F6 | 	mov	local11, local07
23774     14 13 02 F6 | 	mov	arg01, local06
23778     02 12 46 F0 | 	shr	arg01, #2
2377c     1E 28 66 F0 | 	shl	local06, #30
23780     14 15 02 F6 | 	mov	arg02, local06
23784     17 17 02 F6 | 	mov	arg03, local09
23788     28 12 62 FD | 	setq	arg01
2378c     0B 15 12 FD | 	qdiv	arg02, arg03
23790     00 34 06 F6 | 	mov	local12, #0
23794     18 1E 62 FD | 	getqx	local01
23798     19 FC 61 FD | 	getqy	result2
2379c     FE 20 02 F6 | 	mov	local02, result2
237a0     0F 37 02 F6 | 	mov	local13, local01
237a4     00 20 4E F2 | 	cmps	local02, #0 wz
237a8     1B 39 02 F6 | 	mov	local14, local13
237ac     19 38 66 F0 | 	shl	local14, #25
237b0     01 34 06 56 |  if_ne	mov	local12, #1
237b4     1A 39 42 F5 | 	or	local14, local12
237b8     07 36 46 F0 | 	shr	local13, #7
237bc     00 80 00 FF 
237c0     00 36 16 F2 | 	cmp	local13, ##16777216 wc
237c4     1C 00 90 CD |  if_b	jmp	#LR__3292
237c8     01 32 06 F1 | 	add	local11, #1
237cc     01 38 46 F0 | 	shr	local14, #1
237d0     1B 35 02 F6 | 	mov	local12, local13
237d4     1F 34 66 F0 | 	shl	local12, #31
237d8     1A 39 42 F5 | 	or	local14, local12
237dc     01 36 46 F0 | 	shr	local13, #1
237e0     24 00 90 FD | 	jmp	#LR__3294
237e4                 | LR__3292
237e4     00 40 00 FF 
237e8     00 36 16 F2 | 	cmp	local13, ##8388608 wc
237ec     18 00 90 3D |  if_ae	jmp	#LR__3293
237f0     01 32 86 F1 | 	sub	local11, #1
237f4     01 36 66 F0 | 	shl	local13, #1
237f8     1C 35 02 F6 | 	mov	local12, local14
237fc     1F 34 46 F0 | 	shr	local12, #31
23800     1A 37 42 F5 | 	or	local13, local12
23804     01 38 66 F0 | 	shl	local14, #1
23808                 | LR__3293
23808                 | LR__3294
23808     1B 13 02 F6 | 	mov	arg01, local13
2380c     1C 15 02 F6 | 	mov	arg02, local14
23810     19 17 02 F6 | 	mov	arg03, local11
23814     13 19 02 F6 | 	mov	arg04, local05
23818     18 30 B0 FD | 	call	#__system__pack_0606
2381c     F8 00 90 FD | 	jmp	#LR__3305
23820                 | LR__3295
23820     00 28 0E F2 | 	cmp	local06, #0 wz
23824     11 FB 01 56 |  if_ne	mov	result1, local03
23828     EC 00 90 5D |  if_ne	jmp	#LR__3305
2382c     FF 30 0E F2 | 	cmp	local10, #255 wz
23830     00 F8 3F AF 
23834     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23838     DC 00 90 AD |  if_e	jmp	#LR__3305
2383c     02 26 46 F5 | 	or	local05, #2
23840     00 12 06 F6 | 	mov	arg01, #0
23844     00 14 06 F6 | 	mov	arg02, #0
23848     15 17 02 F6 | 	mov	arg03, local07
2384c     13 19 02 F6 | 	mov	arg04, local05
23850     E0 2F B0 FD | 	call	#__system__pack_0606
23854     C0 00 90 FD | 	jmp	#LR__3305
23858                 | LR__3296
23858     00 2E 0E F2 | 	cmp	local09, #0 wz
2385c     12 FB 01 56 |  if_ne	mov	result1, local04
23860     B4 00 90 5D |  if_ne	jmp	#LR__3305
23864     13 19 02 F6 | 	mov	arg04, local05
23868     08 18 46 F5 | 	or	arg04, #8
2386c     00 12 06 F6 | 	mov	arg01, #0
23870     00 14 06 F6 | 	mov	arg02, #0
23874     00 16 06 F6 | 	mov	arg03, #0
23878     B8 2F B0 FD | 	call	#__system__pack_0606
2387c     98 00 90 FD | 	jmp	#LR__3305
23880                 | LR__3297
23880     00 28 0E F2 | 	cmp	local06, #0 wz
23884     20 00 90 AD |  if_e	jmp	#LR__3300
23888     01 28 66 F0 | 	shl	local06, #1
2388c     97 0A 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
23890                 | LR__3298
23890     00 40 00 FF 
23894     00 28 16 F2 | 	cmp	local06, ##8388608 wc
23898     01 2A 86 C1 |  if_b	sub	local07, #1
2389c     01 28 66 C0 |  if_b	shl	local06, #1
238a0     EC FF 9F CD |  if_b	jmp	#LR__3298
238a4                 | LR__3299
238a4     B8 FE 9F FD | 	jmp	#LR__3290
238a8                 | LR__3300
238a8     00 30 0E F2 | 	cmp	local10, #0 wz
238ac     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
238b0     00 F8 3F AF 
238b4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
238b8     5C 00 90 AD |  if_e	jmp	#LR__3305
238bc     13 19 02 F6 | 	mov	arg04, local05
238c0     08 18 46 F5 | 	or	arg04, #8
238c4     00 12 06 F6 | 	mov	arg01, #0
238c8     00 14 06 F6 | 	mov	arg02, #0
238cc     00 16 06 F6 | 	mov	arg03, #0
238d0     60 2F B0 FD | 	call	#__system__pack_0606
238d4     40 00 90 FD | 	jmp	#LR__3305
238d8                 | LR__3301
238d8     00 2E 0E F2 | 	cmp	local09, #0 wz
238dc     20 00 90 AD |  if_e	jmp	#LR__3304
238e0     01 2E 66 F0 | 	shl	local09, #1
238e4     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
238e8                 | LR__3302
238e8     00 40 00 FF 
238ec     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
238f0     01 30 86 C1 |  if_b	sub	local10, #1
238f4     01 2E 66 C0 |  if_b	shl	local09, #1
238f8     EC FF 9F CD |  if_b	jmp	#LR__3302
238fc                 | LR__3303
238fc     6C FE 9F FD | 	jmp	#LR__3291
23900                 | LR__3304
23900     02 26 46 F5 | 	or	local05, #2
23904     00 12 06 F6 | 	mov	arg01, #0
23908     00 14 06 F6 | 	mov	arg02, #0
2390c     00 16 06 F6 | 	mov	arg03, #0
23910     13 19 02 F6 | 	mov	arg04, local05
23914     1C 2F B0 FD | 	call	#__system__pack_0606
23918                 | LR__3305
23918     A7 F0 03 F6 | 	mov	ptra, fp
2391c     B2 00 A0 FD | 	call	#popregs_
23920                 | __system___float_div_ret
23920     2D 00 64 FD | 	ret
23924                 | 
23924                 | __system___float_cmp
23924     00 C0 3F FF 
23928     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2392c     00 C0 3F CF 
23930     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23934     0B FB 01 36 |  if_ae	mov	result1, arg03
23938     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2393c     00 C0 7F FF 
23940     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23944     00 C0 7F CF 
23948     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2394c     0B FB 01 36 |  if_ae	mov	result1, arg03
23950     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23954     00 12 56 F2 | 	cmps	arg01, #0 wc
23958     2C 00 90 3D |  if_ae	jmp	#LR__3310
2395c     00 14 56 F2 | 	cmps	arg02, #0 wc
23960     0A FB 01 C6 |  if_b	mov	result1, arg02
23964     09 FB 81 C1 |  if_b	sub	result1, arg01
23968     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2396c     00 14 0E F2 | 	cmp	arg02, #0 wz
23970     00 00 40 AF 
23974     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23978     00 FA 05 A6 |  if_e	mov	result1, #0
2397c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23980     01 FA 65 F6 | 	neg	result1, #1
23984     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23988                 | LR__3310
23988     00 14 56 F2 | 	cmps	arg02, #0 wc
2398c     1C 00 90 3D |  if_ae	jmp	#LR__3311
23990     00 12 0E F2 | 	cmp	arg01, #0 wz
23994     00 00 40 AF 
23998     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2399c     00 FA 05 A6 |  if_e	mov	result1, #0
239a0     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
239a4     01 FA 05 F6 | 	mov	result1, #1
239a8     08 00 90 FD | 	jmp	#__system___float_cmp_ret
239ac                 | LR__3311
239ac     0A 13 82 F1 | 	sub	arg01, arg02
239b0     09 FB 01 F6 | 	mov	result1, arg01
239b4                 | __system___float_cmp_ret
239b4     2D 00 64 FD | 	ret
239b8                 | 
239b8                 | __system___float_tointeger
239b8     02 4A 05 F6 | 	mov	COUNT_, #2
239bc     A8 00 A0 FD | 	call	#pushregs_
239c0     50 00 B0 FD | 	call	#__system___float_Unpack
239c4     FF FF 7F FF 
239c8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
239cc     34 00 90 CD |  if_b	jmp	#LR__3320
239d0     1F FC 55 F2 | 	cmps	result2, #31 wc
239d4     2C 00 90 3D |  if_ae	jmp	#LR__3320
239d8     02 FE 65 F0 | 	shl	result3, #2
239dc     1E 1E 06 F6 | 	mov	local01, #30
239e0     FE 1E 82 F1 | 	sub	local01, result2
239e4     0F FF 41 F0 | 	shr	result3, local01
239e8     FF 20 02 F6 | 	mov	local02, result3
239ec     0A 21 02 F1 | 	add	local02, arg02
239f0     01 20 46 F0 | 	shr	local02, #1
239f4     00 FA 0D F2 | 	cmp	result1, #0 wz
239f8     10 21 62 56 |  if_ne	neg	local02, local02
239fc     10 FB 01 F6 | 	mov	result1, local02
23a00     04 00 90 FD | 	jmp	#LR__3321
23a04                 | LR__3320
23a04     00 FA 05 F6 | 	mov	result1, #0
23a08                 | LR__3321
23a08     A7 F0 03 F6 | 	mov	ptra, fp
23a0c     B2 00 A0 FD | 	call	#popregs_
23a10                 | __system___float_tointeger_ret
23a10     2D 00 64 FD | 	ret
23a14                 | 
23a14                 | __system___float_Unpack
23a14     09 01 02 F6 | 	mov	_var01, arg01
23a18     1F 00 46 F0 | 	shr	_var01, #31
23a1c     09 03 02 F6 | 	mov	_var02, arg01
23a20     01 02 66 F0 | 	shl	_var02, #1
23a24     18 02 4E F0 | 	shr	_var02, #24 wz
23a28     17 13 06 F4 | 	bitl	arg01, #279
23a2c     06 12 66 50 |  if_ne	shl	arg01, #6
23a30     1D 12 26 54 |  if_ne	bith	arg01, #29
23a34     1C 00 90 5D |  if_ne	jmp	#LR__3330
23a38     09 05 92 F7 | 	encod	_var03, arg01 wc
23a3c     01 04 06 C1 |  if_b	add	_var03, #1
23a40     17 04 86 F1 | 	sub	_var03, #23
23a44     02 03 02 F6 | 	mov	_var02, _var03
23a48     07 FC 05 F6 | 	mov	result2, #7
23a4c     02 FD 81 F1 | 	sub	result2, _var03
23a50     FE 12 62 F0 | 	shl	arg01, result2
23a54                 | LR__3330
23a54     7F 02 86 F1 | 	sub	_var02, #127
23a58     09 FF 01 F6 | 	mov	result3, arg01
23a5c     00 FB 01 F6 | 	mov	result1, _var01
23a60     01 FD 01 F6 | 	mov	result2, _var02
23a64                 | __system___float_Unpack_ret
23a64     2D 00 64 FD | 	ret
23a68                 | 
23a68                 | __system___float_Pack
23a68     00 00 06 F6 | 	mov	_var01, #0
23a6c     00 16 0E F2 | 	cmp	arg03, #0 wz
23a70     8C 00 90 AD |  if_e	jmp	#LR__3341
23a74     0B 03 92 F7 | 	encod	_var02, arg03 wc
23a78     01 02 06 C1 |  if_b	add	_var02, #1
23a7c     21 00 06 F6 | 	mov	_var01, #33
23a80     01 01 82 F1 | 	sub	_var01, _var02
23a84     00 17 62 F0 | 	shl	arg03, _var01
23a88     03 02 06 F6 | 	mov	_var02, #3
23a8c     00 03 82 F1 | 	sub	_var02, _var01
23a90     01 15 02 F1 | 	add	arg02, _var02
23a94     0A 05 02 F6 | 	mov	_var03, arg02
23a98     00 17 06 F1 | 	add	arg03, #256
23a9c     0B 03 02 F6 | 	mov	_var02, arg03
23aa0     FF 02 2E F5 | 	andn	_var02, #255 wz
23aa4     01 04 06 A1 |  if_e	add	_var03, #1
23aa8     7F 04 06 F1 | 	add	_var03, #127
23aac     FF FF 7F FF 
23ab0     E9 05 46 F3 | 	fges	_var03, ##-23
23ab4     FF 04 66 F3 | 	fles	_var03, #255
23ab8     01 04 56 F2 | 	cmps	_var03, #1 wc
23abc     1C 00 90 3D |  if_ae	jmp	#LR__3340
23ac0     01 16 46 F0 | 	shr	arg03, #1
23ac4     1F 02 C6 F9 | 	decod	_var02, #31
23ac8     0B 03 02 F1 | 	add	_var02, arg03
23acc     02 05 62 F6 | 	neg	_var03, _var03
23ad0     02 03 42 F0 | 	shr	_var02, _var03
23ad4     01 17 02 F6 | 	mov	arg03, _var02
23ad8     00 04 06 F6 | 	mov	_var03, #0
23adc                 | LR__3340
23adc     09 FB 01 F6 | 	mov	result1, arg01
23ae0     1F FA 65 F0 | 	shl	result1, #31
23ae4     02 03 02 F6 | 	mov	_var02, _var03
23ae8     17 02 66 F0 | 	shl	_var02, #23
23aec     01 FB 41 F5 | 	or	result1, _var02
23af0     0B 07 02 F6 | 	mov	_var04, arg03
23af4     09 06 46 F0 | 	shr	_var04, #9
23af8     03 FB 41 F5 | 	or	result1, _var04
23afc     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23b00                 | LR__3341
23b00     00 FB 01 F6 | 	mov	result1, _var01
23b04                 | __system___float_Pack_ret
23b04     2D 00 64 FD | 	ret
23b08                 | 
23b08                 | __system___basic_print_float
23b08     05 4A 05 F6 | 	mov	COUNT_, #5
23b0c     A8 00 A0 FD | 	call	#pushregs_
23b10     09 1F 02 F6 | 	mov	local01, arg01
23b14     0A 21 02 F6 | 	mov	local02, arg02
23b18     0B 23 0A F6 | 	mov	local03, arg03 wz
23b1c     0C 25 02 F6 | 	mov	local04, arg04
23b20     14 00 90 5D |  if_ne	jmp	#LR__3350
23b24     23 24 0E F2 | 	cmp	local04, #35 wz
23b28     80 02 10 AF 
23b2c     00 26 06 A6 |  if_e	mov	local05, ##537198592
23b30     1D 26 C6 59 |  if_ne	decod	local05, #29
23b34     13 23 02 F6 | 	mov	local03, local05
23b38                 | LR__3350
23b38     0F 13 02 F6 | 	mov	arg01, local01
23b3c     D8 27 B0 FD | 	call	#__system___gettxfunc
23b40     FD 26 0A F6 | 	mov	local05, result1 wz
23b44     00 FA 05 A6 |  if_e	mov	result1, #0
23b48     13 13 02 56 |  if_ne	mov	arg01, local05
23b4c     11 15 02 56 |  if_ne	mov	arg02, local03
23b50     10 17 02 56 |  if_ne	mov	arg03, local02
23b54     12 19 02 56 |  if_ne	mov	arg04, local04
23b58     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23b5c     A7 F0 03 F6 | 	mov	ptra, fp
23b60     B2 00 A0 FD | 	call	#popregs_
23b64                 | __system___basic_print_float_ret
23b64     2D 00 64 FD | 	ret
23b68                 | 
23b68                 | __system____builtin_atoi
23b68     07 4A 05 F6 | 	mov	COUNT_, #7
23b6c     A8 00 A0 FD | 	call	#pushregs_
23b70                 | __system____builtin_atoi_enter
23b70     09 1F 02 F6 | 	mov	local01, arg01
23b74     0A 21 02 F6 | 	mov	local02, arg02
23b78     00 22 06 F6 | 	mov	local03, #0
23b7c     00 24 06 F6 | 	mov	local04, #0
23b80     00 26 06 F6 | 	mov	local05, #0
23b84     97 1C 48 FB | 	callpa	#(@LR__3362-@LR__3360)>>2,fcache_load_ptr_
23b88                 | LR__3360
23b88     0F 29 C2 FA | 	rdbyte	local06, local01
23b8c     20 28 0E F2 | 	cmp	local06, #32 wz
23b90     01 1E 06 A1 |  if_e	add	local01, #1
23b94     F0 FF 9F AD |  if_e	jmp	#LR__3360
23b98     0F 2B C2 FA | 	rdbyte	local07, local01
23b9c                 | LR__3361
23b9c     2D 2A 0E F2 | 	cmp	local07, #45 wz
23ba0     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23ba4     18 00 90 5D |  if_ne	jmp	#LR__3363
23ba8     01 1E 06 F1 | 	add	local01, #1
23bac     2D 2A 0E F2 | 	cmp	local07, #45 wz
23bb0     01 28 06 A6 |  if_e	mov	local06, #1
23bb4     14 27 C2 A2 |  if_e	subr	local05, local06
23bb8     0F 2B C2 FA | 	rdbyte	local07, local01
23bbc     DC FF 9F FD | 	jmp	#LR__3361
23bc0                 | LR__3362
23bc0                 | LR__3363
23bc0     00 20 0E F2 | 	cmp	local02, #0 wz
23bc4     1C 00 90 5D |  if_ne	jmp	#LR__3365
23bc8     24 2A 0E F2 | 	cmp	local07, #36 wz
23bcc     10 20 06 A6 |  if_e	mov	local02, #16
23bd0     01 1E 06 A1 |  if_e	add	local01, #1
23bd4     0C 00 90 AD |  if_e	jmp	#LR__3364
23bd8     25 2A 0E F2 | 	cmp	local07, #37 wz
23bdc     02 20 06 A6 |  if_e	mov	local02, #2
23be0     01 1E 06 A1 |  if_e	add	local01, #1
23be4                 | LR__3364
23be4                 | LR__3365
23be4     97 48 48 FB | 	callpa	#(@LR__3373-@LR__3366)>>2,fcache_load_ptr_
23be8                 | LR__3366
23be8                 | LR__3367
23be8     0F 2B C2 FA | 	rdbyte	local07, local01
23bec     5F 2A 0E F2 | 	cmp	local07, #95 wz
23bf0     01 1E 06 F1 | 	add	local01, #1
23bf4     F0 FF 9F AD |  if_e	jmp	#LR__3367
23bf8     30 2A 0E F2 | 	cmp	local07, #48 wz
23bfc     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23c00     00 24 06 A6 |  if_e	mov	local04, #0
23c04     60 00 90 AD |  if_e	jmp	#LR__3372
23c08     31 2A 56 F2 | 	cmps	local07, #49 wc
23c0c     18 00 90 CD |  if_b	jmp	#LR__3368
23c10     3A 2A 56 F2 | 	cmps	local07, #58 wc
23c14     15 25 02 C6 |  if_b	mov	local04, local07
23c18     30 24 86 C1 |  if_b	sub	local04, #48
23c1c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23c20     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23c24     40 00 90 CD |  if_b	jmp	#LR__3371
23c28                 | LR__3368
23c28     0B 20 56 F2 | 	cmps	local02, #11 wc
23c2c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23c30     14 00 90 CD |  if_b	jmp	#LR__3369
23c34     67 2A 56 F2 | 	cmps	local07, #103 wc
23c38     61 2A 86 C1 |  if_b	sub	local07, #97
23c3c     0A 24 06 C6 |  if_b	mov	local04, #10
23c40     15 25 02 C1 |  if_b	add	local04, local07
23c44     20 00 90 CD |  if_b	jmp	#LR__3370
23c48                 | LR__3369
23c48     0B 20 56 F2 | 	cmps	local02, #11 wc
23c4c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23c50     24 00 90 CD |  if_b	jmp	#LR__3374
23c54     47 2A 56 F2 | 	cmps	local07, #71 wc
23c58     41 2A 86 C1 |  if_b	sub	local07, #65
23c5c     0A 24 06 C6 |  if_b	mov	local04, #10
23c60     15 25 02 C1 |  if_b	add	local04, local07
23c64     10 00 90 3D |  if_ae	jmp	#LR__3374
23c68                 | LR__3370
23c68                 | LR__3371
23c68                 | LR__3372
23c68     11 21 02 FD | 	qmul	local02, local03
23c6c     18 22 62 FD | 	getqx	local03
23c70     12 23 02 F1 | 	add	local03, local04
23c74     70 FF 9F FD | 	jmp	#LR__3366
23c78                 | LR__3373
23c78                 | LR__3374
23c78     00 20 0E F2 | 	cmp	local02, #0 wz
23c7c     64 00 90 5D |  if_ne	jmp	#LR__3380
23c80     78 2A 0E F2 | 	cmp	local07, #120 wz
23c84     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23c88     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23c8c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23c90     14 00 90 5D |  if_ne	jmp	#LR__3375
23c94     0F 13 02 F6 | 	mov	arg01, local01
23c98     10 14 06 F6 | 	mov	arg02, #16
23c9c     C8 FE BF FD | 	call	#__system____builtin_atoi
23ca0     FD 22 02 F6 | 	mov	local03, result1
23ca4     3C 00 90 FD | 	jmp	#LR__3379
23ca8                 | LR__3375
23ca8     62 2A 0E F2 | 	cmp	local07, #98 wz
23cac     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23cb0     14 00 90 5D |  if_ne	jmp	#LR__3376
23cb4     0F 13 02 F6 | 	mov	arg01, local01
23cb8     02 14 06 F6 | 	mov	arg02, #2
23cbc     A8 FE BF FD | 	call	#__system____builtin_atoi
23cc0     FD 22 02 F6 | 	mov	local03, result1
23cc4     1C 00 90 FD | 	jmp	#LR__3378
23cc8                 | LR__3376
23cc8     6F 2A 0E F2 | 	cmp	local07, #111 wz
23ccc     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23cd0     10 00 90 5D |  if_ne	jmp	#LR__3377
23cd4     0F 13 02 F6 | 	mov	arg01, local01
23cd8     08 14 06 F6 | 	mov	arg02, #8
23cdc     88 FE BF FD | 	call	#__system____builtin_atoi
23ce0     FD 22 02 F6 | 	mov	local03, result1
23ce4                 | LR__3377
23ce4                 | LR__3378
23ce4                 | LR__3379
23ce4                 | LR__3380
23ce4     00 26 0E F2 | 	cmp	local05, #0 wz
23ce8     11 23 62 56 |  if_ne	neg	local03, local03
23cec     11 FB 01 F6 | 	mov	result1, local03
23cf0     A7 F0 03 F6 | 	mov	ptra, fp
23cf4     B2 00 A0 FD | 	call	#popregs_
23cf8                 | __system____builtin_atoi_ret
23cf8     2D 00 64 FD | 	ret
23cfc                 | 
23cfc                 | __system____builtin_atof
23cfc     07 4A 05 F6 | 	mov	COUNT_, #7
23d00     A8 00 A0 FD | 	call	#pushregs_
23d04     09 1F 02 F6 | 	mov	local01, arg01
23d08     00 20 06 F6 | 	mov	local02, #0
23d0c     00 22 06 F6 | 	mov	local03, #0
23d10     00 24 06 F6 | 	mov	local04, #0
23d14     00 26 06 F6 | 	mov	local05, #0
23d18     97 08 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
23d1c                 | LR__3390
23d1c     0F 17 C2 FA | 	rdbyte	arg03, local01
23d20     20 16 0E F2 | 	cmp	arg03, #32 wz
23d24     01 1E 06 A1 |  if_e	add	local01, #1
23d28     F0 FF 9F AD |  if_e	jmp	#LR__3390
23d2c                 | LR__3391
23d2c     0F 29 C2 FA | 	rdbyte	local06, local01
23d30                 | LR__3392
23d30     2B 28 0E F2 | 	cmp	local06, #43 wz
23d34     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23d38     14 00 90 5D |  if_ne	jmp	#LR__3393
23d3c     2D 28 0E F2 | 	cmp	local06, #45 wz
23d40     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23d44     01 1E 06 F1 | 	add	local01, #1
23d48     0F 29 C2 FA | 	rdbyte	local06, local01
23d4c     E0 FF 9F FD | 	jmp	#LR__3392
23d50                 | LR__3393
23d50                 | LR__3394
23d50     97 08 48 FB | 	callpa	#(@LR__3396-@LR__3395)>>2,fcache_load_ptr_
23d54                 | LR__3395
23d54     0F 29 C2 FA | 	rdbyte	local06, local01
23d58     5F 28 0E F2 | 	cmp	local06, #95 wz
23d5c     01 1E 06 F1 | 	add	local01, #1
23d60     F0 FF 9F AD |  if_e	jmp	#LR__3395
23d64                 | LR__3396
23d64     00 28 0E F2 | 	cmp	local06, #0 wz
23d68     5C 00 90 AD |  if_e	jmp	#LR__3398
23d6c     30 28 56 F2 | 	cmps	local06, #48 wc
23d70     44 00 90 CD |  if_b	jmp	#LR__3397
23d74     3A 28 56 F2 | 	cmps	local06, #58 wc
23d78     3C 00 90 3D |  if_ae	jmp	#LR__3397
23d7c     10 13 02 F6 | 	mov	arg01, local02
23d80     00 90 20 FF 
23d84     00 14 06 F6 | 	mov	arg02, ##1092616192
23d88     64 F7 BF FD | 	call	#__system___float_mul
23d8c     FD 20 02 F6 | 	mov	local02, result1
23d90     30 28 86 F1 | 	sub	local06, #48
23d94     14 13 02 F6 | 	mov	arg01, local06
23d98     50 F3 BF FD | 	call	#__system___float_fromuns
23d9c     FD 14 02 F6 | 	mov	arg02, result1
23da0     10 13 02 F6 | 	mov	arg01, local02
23da4     78 F3 BF FD | 	call	#__system___float_add
23da8     FD 20 02 F6 | 	mov	local02, result1
23dac     00 26 0E F2 | 	cmp	local05, #0 wz
23db0     01 22 86 51 |  if_ne	sub	local03, #1
23db4     98 FF 9F FD | 	jmp	#LR__3394
23db8                 | LR__3397
23db8     2E 28 0E F2 | 	cmp	local06, #46 wz
23dbc     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23dc0     01 26 06 A6 |  if_e	mov	local05, #1
23dc4     88 FF 9F AD |  if_e	jmp	#LR__3394
23dc8                 | LR__3398
23dc8     45 28 0E F2 | 	cmp	local06, #69 wz
23dcc     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23dd0     18 00 90 5D |  if_ne	jmp	#LR__3399
23dd4     0F 13 02 F6 | 	mov	arg01, local01
23dd8     00 14 06 F6 | 	mov	arg02, #0
23ddc     88 FD BF FD | 	call	#__system____builtin_atoi
23de0     11 FB 01 F1 | 	add	result1, local03
23de4     FD 2A 02 F6 | 	mov	local07, result1
23de8     04 00 90 FD | 	jmp	#LR__3400
23dec                 | LR__3399
23dec     11 2B 02 F6 | 	mov	local07, local03
23df0                 | LR__3400
23df0     15 17 02 F6 | 	mov	arg03, local07
23df4     10 13 02 F6 | 	mov	arg01, local02
23df8     00 90 20 FF 
23dfc     00 14 06 F6 | 	mov	arg02, ##1092616192
23e00     F4 06 B0 FD | 	call	#__system___float_pow_n
23e04     12 FB 61 F5 | 	xor	result1, local04
23e08     A7 F0 03 F6 | 	mov	ptra, fp
23e0c     B2 00 A0 FD | 	call	#popregs_
23e10                 | __system____builtin_atof_ret
23e10     2D 00 64 FD | 	ret
23e14                 | 
23e14                 | __system____builtin_ilogb
23e14     FC FB BF FD | 	call	#__system___float_Unpack
23e18     00 FE 0D F2 | 	cmp	result3, #0 wz
23e1c     00 00 40 AF 
23e20     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23e24     24 00 90 AD |  if_e	jmp	#LR__3411
23e28     80 FC 0D F2 | 	cmp	result2, #128 wz
23e2c     18 00 90 5D |  if_ne	jmp	#LR__3410
23e30     00 00 10 FF 
23e34     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23e38     1E FA CD A9 |  if_e	bmask	result1, #30
23e3c     0C 00 90 AD |  if_e	jmp	#LR__3411
23e40     1F FA C5 F9 | 	decod	result1, #31
23e44     04 00 90 FD | 	jmp	#LR__3411
23e48                 | LR__3410
23e48     FE FA 01 F6 | 	mov	result1, result2
23e4c                 | LR__3411
23e4c                 | __system____builtin_ilogb_ret
23e4c     2D 00 64 FD | 	ret
23e50                 | 
23e50                 | __system____builtin_sinf
23e50     03 4A 05 F6 | 	mov	COUNT_, #3
23e54     A8 00 A0 FD | 	call	#pushregs_
23e58     09 1F 02 F6 | 	mov	local01, arg01
23e5c     87 64 20 FF 
23e60     DB 15 06 F6 | 	mov	arg02, ##1086918619
23e64     8C F8 BF FD | 	call	#__system___float_div
23e68     FD 12 02 F6 | 	mov	arg01, result1
23e6c     00 14 06 F6 | 	mov	arg02, #0
23e70     44 FB BF FD | 	call	#__system___float_tointeger
23e74     FD 16 0A F6 | 	mov	arg03, result1 wz
23e78     44 00 90 AD |  if_e	jmp	#LR__3420
23e7c     0B 13 52 F6 | 	abs	arg01, arg03 wc
23e80     1F 20 C6 C9 |  if_b	decod	local02, #31
23e84     00 20 06 36 |  if_ae	mov	local02, #0
23e88     60 F2 BF FD | 	call	#__system___float_fromuns
23e8c     10 FB 61 F5 | 	xor	result1, local02
23e90     FD 12 02 F6 | 	mov	arg01, result1
23e94     1E 14 C6 F9 | 	decod	arg02, #30
23e98     54 F6 BF FD | 	call	#__system___float_mul
23e9c     FD 12 02 F6 | 	mov	arg01, result1
23ea0     87 24 20 FF 
23ea4     DB 15 06 F6 | 	mov	arg02, ##1078530011
23ea8     44 F6 BF FD | 	call	#__system___float_mul
23eac     FD 14 02 F6 | 	mov	arg02, result1
23eb0     0F 13 02 F6 | 	mov	arg01, local01
23eb4     1F 14 E6 F4 | 	bitnot	arg02, #31
23eb8     64 F2 BF FD | 	call	#__system___float_add
23ebc     FD 1E 02 F6 | 	mov	local01, result1
23ec0                 | LR__3420
23ec0     0F 13 02 F6 | 	mov	arg01, local01
23ec4     66 E6 1E FF 
23ec8     CD 14 06 F6 | 	mov	arg02, ##1036831949
23ecc     01 16 06 F6 | 	mov	arg03, #1
23ed0     50 FA BF FD | 	call	#__system___float_cmp
23ed4     00 FA 55 F2 | 	cmps	result1, #0 wc
23ed8     5C 00 90 3D |  if_ae	jmp	#LR__3421
23edc     0F 13 02 F6 | 	mov	arg01, local01
23ee0     66 E6 5E FF 
23ee4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23ee8     01 16 66 F6 | 	neg	arg03, #1
23eec     34 FA BF FD | 	call	#__system___float_cmp
23ef0     01 FA 55 F2 | 	cmps	result1, #1 wc
23ef4     40 00 90 CD |  if_b	jmp	#LR__3421
23ef8     0F 13 02 F6 | 	mov	arg01, local01
23efc     0F 15 02 F6 | 	mov	arg02, local01
23f00     EC F5 BF FD | 	call	#__system___float_mul
23f04     FD 12 02 F6 | 	mov	arg01, result1
23f08     0F 15 02 F6 | 	mov	arg02, local01
23f0c     E0 F5 BF FD | 	call	#__system___float_mul
23f10     FD 12 02 F6 | 	mov	arg01, result1
23f14     00 60 20 FF 
23f18     00 14 06 F6 | 	mov	arg02, ##1086324736
23f1c     D4 F7 BF FD | 	call	#__system___float_div
23f20     FD 14 02 F6 | 	mov	arg02, result1
23f24     0F 13 02 F6 | 	mov	arg01, local01
23f28     1F 14 E6 F4 | 	bitnot	arg02, #31
23f2c     F0 F1 BF FD | 	call	#__system___float_add
23f30     FD 22 02 F6 | 	mov	local03, result1
23f34     54 00 90 FD | 	jmp	#LR__3422
23f38                 | LR__3421
23f38     0F 13 02 F6 | 	mov	arg01, local01
23f3c     7C 91 26 FF 
23f40     83 15 06 F6 | 	mov	arg02, ##1294137731
23f44     A8 F5 BF FD | 	call	#__system___float_mul
23f48     FD 12 02 F6 | 	mov	arg01, result1
23f4c     00 14 06 F6 | 	mov	arg02, #0
23f50     64 FA BF FD | 	call	#__system___float_tointeger
23f54     02 FA 65 F0 | 	shl	result1, #2
23f58     00 00 A0 FF 
23f5c     FD 00 48 FD | 	qrotate	##1073741824, result1
23f60     19 12 62 FD | 	getqy	arg01
23f64     09 13 52 F6 | 	abs	arg01, arg01 wc
23f68     1F 20 C6 C9 |  if_b	decod	local02, #31
23f6c     00 20 06 36 |  if_ae	mov	local02, #0
23f70     78 F1 BF FD | 	call	#__system___float_fromuns
23f74     10 FB 61 F5 | 	xor	result1, local02
23f78     FD 12 02 F6 | 	mov	arg01, result1
23f7c     00 40 27 FF 
23f80     00 14 06 F6 | 	mov	arg02, ##1317011456
23f84     6C F7 BF FD | 	call	#__system___float_div
23f88     FD 22 02 F6 | 	mov	local03, result1
23f8c                 | LR__3422
23f8c     11 FB 01 F6 | 	mov	result1, local03
23f90     A7 F0 03 F6 | 	mov	ptra, fp
23f94     B2 00 A0 FD | 	call	#popregs_
23f98                 | __system____builtin_sinf_ret
23f98     2D 00 64 FD | 	ret
23f9c                 | 
23f9c                 | __system____builtin_tanf
23f9c     02 4A 05 F6 | 	mov	COUNT_, #2
23fa0     A8 00 A0 FD | 	call	#pushregs_
23fa4     09 1F 02 F6 | 	mov	local01, arg01
23fa8     A4 FE BF FD | 	call	#__system____builtin_sinf
23fac     FD 20 02 F6 | 	mov	local02, result1
23fb0     0F 15 02 F6 | 	mov	arg02, local01
23fb4     87 E4 1F FF 
23fb8     DB 13 06 F6 | 	mov	arg01, ##1070141403
23fbc     1F 14 E6 F4 | 	bitnot	arg02, #31
23fc0     5C F1 BF FD | 	call	#__system___float_add
23fc4     FD 12 02 F6 | 	mov	arg01, result1
23fc8     84 FE BF FD | 	call	#__system____builtin_sinf
23fcc     FD 14 02 F6 | 	mov	arg02, result1
23fd0     10 13 02 F6 | 	mov	arg01, local02
23fd4     1C F7 BF FD | 	call	#__system___float_div
23fd8     A7 F0 03 F6 | 	mov	ptra, fp
23fdc     B2 00 A0 FD | 	call	#popregs_
23fe0                 | __system____builtin_tanf_ret
23fe0     2D 00 64 FD | 	ret
23fe4                 | 
23fe4                 | __system____builtin_asinf
23fe4     01 4A 05 F6 | 	mov	COUNT_, #1
23fe8     A8 00 A0 FD | 	call	#pushregs_
23fec     09 1F 02 F6 | 	mov	local01, arg01
23ff0     0F 15 02 F6 | 	mov	arg02, local01
23ff4     0F 13 02 F6 | 	mov	arg01, local01
23ff8     F4 F4 BF FD | 	call	#__system___float_mul
23ffc     FD 14 02 F6 | 	mov	arg02, result1
24000     00 C0 1F FF 
24004     00 12 06 F6 | 	mov	arg01, ##1065353216
24008     1F 14 E6 F4 | 	bitnot	arg02, #31
2400c     10 F1 BF FD | 	call	#__system___float_add
24010     FD 12 02 F6 | 	mov	arg01, result1
24014     00 F4 BF FD | 	call	#__system___float_sqrt
24018     FD 14 02 F6 | 	mov	arg02, result1
2401c     0F 13 02 F6 | 	mov	arg01, local01
24020     58 00 B0 FD | 	call	#__system____builtin_atan2f
24024     A7 F0 03 F6 | 	mov	ptra, fp
24028     B2 00 A0 FD | 	call	#popregs_
2402c                 | __system____builtin_asinf_ret
2402c     2D 00 64 FD | 	ret
24030                 | 
24030                 | __system____builtin_acosf
24030     01 4A 05 F6 | 	mov	COUNT_, #1
24034     A8 00 A0 FD | 	call	#pushregs_
24038     09 1F 02 F6 | 	mov	local01, arg01
2403c     0F 15 02 F6 | 	mov	arg02, local01
24040     0F 13 02 F6 | 	mov	arg01, local01
24044     A8 F4 BF FD | 	call	#__system___float_mul
24048     FD 14 02 F6 | 	mov	arg02, result1
2404c     00 C0 1F FF 
24050     00 12 06 F6 | 	mov	arg01, ##1065353216
24054     1F 14 E6 F4 | 	bitnot	arg02, #31
24058     C4 F0 BF FD | 	call	#__system___float_add
2405c     FD 12 02 F6 | 	mov	arg01, result1
24060     B4 F3 BF FD | 	call	#__system___float_sqrt
24064     FD 12 02 F6 | 	mov	arg01, result1
24068     0F 15 02 F6 | 	mov	arg02, local01
2406c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24070     A7 F0 03 F6 | 	mov	ptra, fp
24074     B2 00 A0 FD | 	call	#popregs_
24078                 | __system____builtin_acosf_ret
24078     2D 00 64 FD | 	ret
2407c                 | 
2407c                 | __system____builtin_atan2f
2407c     04 4A 05 F6 | 	mov	COUNT_, #4
24080     A8 00 A0 FD | 	call	#pushregs_
24084     09 1F 02 F6 | 	mov	local01, arg01
24088     0A 21 02 F6 | 	mov	local02, arg02
2408c     0F 13 02 F6 | 	mov	arg01, local01
24090     00 14 06 F6 | 	mov	arg02, #0
24094     01 16 06 F6 | 	mov	arg03, #1
24098     88 F8 BF FD | 	call	#__system___float_cmp
2409c     00 FA 0D F2 | 	cmp	result1, #0 wz
240a0     28 00 90 5D |  if_ne	jmp	#LR__3430
240a4     10 13 02 F6 | 	mov	arg01, local02
240a8     00 14 06 F6 | 	mov	arg02, #0
240ac     01 16 06 F6 | 	mov	arg03, #1
240b0     70 F8 BF FD | 	call	#__system___float_cmp
240b4     00 FA 55 F2 | 	cmps	result1, #0 wc
240b8     87 24 60 CF 
240bc     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
240c0     DC 00 90 CD |  if_b	jmp	#LR__3431
240c4     00 FA 05 F6 | 	mov	result1, #0
240c8     D4 00 90 FD | 	jmp	#LR__3431
240cc                 | LR__3430
240cc     10 13 02 F6 | 	mov	arg01, local02
240d0     10 15 02 F6 | 	mov	arg02, local02
240d4     18 F4 BF FD | 	call	#__system___float_mul
240d8     FD 22 02 F6 | 	mov	local03, result1
240dc     0F 13 02 F6 | 	mov	arg01, local01
240e0     0F 15 02 F6 | 	mov	arg02, local01
240e4     08 F4 BF FD | 	call	#__system___float_mul
240e8     FD 14 02 F6 | 	mov	arg02, result1
240ec     11 13 02 F6 | 	mov	arg01, local03
240f0     2C F0 BF FD | 	call	#__system___float_add
240f4     FD 12 02 F6 | 	mov	arg01, result1
240f8     1C F3 BF FD | 	call	#__system___float_sqrt
240fc     FD 22 02 F6 | 	mov	local03, result1
24100     10 13 02 F6 | 	mov	arg01, local02
24104     11 15 02 F6 | 	mov	arg02, local03
24108     E8 F5 BF FD | 	call	#__system___float_div
2410c     FD 20 02 F6 | 	mov	local02, result1
24110     0F 13 02 F6 | 	mov	arg01, local01
24114     11 15 02 F6 | 	mov	arg02, local03
24118     D8 F5 BF FD | 	call	#__system___float_div
2411c     FD 1E 02 F6 | 	mov	local01, result1
24120     00 40 27 FF 
24124     00 12 06 F6 | 	mov	arg01, ##1317011456
24128     10 15 02 F6 | 	mov	arg02, local02
2412c     C0 F3 BF FD | 	call	#__system___float_mul
24130     FD 12 02 F6 | 	mov	arg01, result1
24134     00 14 06 F6 | 	mov	arg02, #0
24138     7C F8 BF FD | 	call	#__system___float_tointeger
2413c     FD 22 02 F6 | 	mov	local03, result1
24140     00 40 27 FF 
24144     00 12 06 F6 | 	mov	arg01, ##1317011456
24148     0F 15 02 F6 | 	mov	arg02, local01
2414c     A0 F3 BF FD | 	call	#__system___float_mul
24150     FD 12 02 F6 | 	mov	arg01, result1
24154     00 14 06 F6 | 	mov	arg02, #0
24158     5C F8 BF FD | 	call	#__system___float_tointeger
2415c     FD 22 52 FD | 	qvector	local03, result1
24160     87 24 20 FF 
24164     DB 23 06 F6 | 	mov	local03, ##1078530011
24168     19 12 62 FD | 	getqy	arg01
2416c     01 12 C6 F0 | 	sar	arg01, #1
24170     09 13 52 F6 | 	abs	arg01, arg01 wc
24174     1F 24 C6 C9 |  if_b	decod	local04, #31
24178     00 24 06 36 |  if_ae	mov	local04, #0
2417c     6C EF BF FD | 	call	#__system___float_fromuns
24180     12 FB 61 F5 | 	xor	result1, local04
24184     FD 12 02 F6 | 	mov	arg01, result1
24188     00 40 27 FF 
2418c     00 14 06 F6 | 	mov	arg02, ##1317011456
24190     60 F5 BF FD | 	call	#__system___float_div
24194     FD 14 02 F6 | 	mov	arg02, result1
24198     11 13 02 F6 | 	mov	arg01, local03
2419c     50 F3 BF FD | 	call	#__system___float_mul
241a0                 | LR__3431
241a0     A7 F0 03 F6 | 	mov	ptra, fp
241a4     B2 00 A0 FD | 	call	#popregs_
241a8                 | __system____builtin_atan2f_ret
241a8     2D 00 64 FD | 	ret
241ac                 | 
241ac                 | __system____builtin_exp2f
241ac     04 4A 05 F6 | 	mov	COUNT_, #4
241b0     A8 00 A0 FD | 	call	#pushregs_
241b4     09 1F 02 F6 | 	mov	local01, arg01
241b8     00 7F 21 FF 
241bc     00 14 06 F6 | 	mov	arg02, ##1123942400
241c0     01 16 66 F6 | 	neg	arg03, #1
241c4     5C F7 BF FD | 	call	#__system___float_cmp
241c8     00 FA 55 F2 | 	cmps	result1, #0 wc
241cc     00 C0 3F 3F 
241d0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
241d4     DC 00 90 3D |  if_ae	jmp	#LR__3441
241d8     0F 13 02 F6 | 	mov	arg01, local01
241dc     00 7F 61 FF 
241e0     00 14 06 F6 | 	mov	arg02, ##-1023541248
241e4     01 16 06 F6 | 	mov	arg03, #1
241e8     38 F7 BF FD | 	call	#__system___float_cmp
241ec     00 FA 55 F2 | 	cmps	result1, #0 wc
241f0     00 FA 05 C6 |  if_b	mov	result1, #0
241f4     BC 00 90 CD |  if_b	jmp	#LR__3441
241f8     0F 13 02 F6 | 	mov	arg01, local01
241fc     00 14 06 F6 | 	mov	arg02, #0
24200     B4 F7 BF FD | 	call	#__system___float_tointeger
24204     FD 20 02 F6 | 	mov	local02, result1
24208     10 13 52 F6 | 	abs	arg01, local02 wc
2420c     1F 22 C6 C9 |  if_b	decod	local03, #31
24210     00 22 06 36 |  if_ae	mov	local03, #0
24214     D4 EE BF FD | 	call	#__system___float_fromuns
24218     11 FB 61 F5 | 	xor	result1, local03
2421c     FD 14 02 F6 | 	mov	arg02, result1
24220     0F 13 02 F6 | 	mov	arg01, local01
24224     1F 14 E6 F4 | 	bitnot	arg02, #31
24228     F4 EE BF FD | 	call	#__system___float_add
2422c     FD 24 02 F6 | 	mov	local04, result1
24230     12 13 02 F6 | 	mov	arg01, local04
24234     00 14 06 F6 | 	mov	arg02, #0
24238     01 16 06 F6 | 	mov	arg03, #1
2423c     E4 F6 BF FD | 	call	#__system___float_cmp
24240     00 FA 55 F2 | 	cmps	result1, #0 wc
24244     18 00 90 3D |  if_ae	jmp	#LR__3440
24248     12 13 02 F6 | 	mov	arg01, local04
2424c     00 C0 1F FF 
24250     00 14 06 F6 | 	mov	arg02, ##1065353216
24254     C8 EE BF FD | 	call	#__system___float_add
24258     FD 24 02 F6 | 	mov	local04, result1
2425c     01 20 86 F1 | 	sub	local02, #1
24260                 | LR__3440
24260     7F 20 06 F1 | 	add	local02, #127
24264     17 20 66 F0 | 	shl	local02, #23
24268     12 13 02 F6 | 	mov	arg01, local04
2426c     00 80 26 FF 
24270     00 14 06 F6 | 	mov	arg02, ##1291845632
24274     78 F2 BF FD | 	call	#__system___float_mul
24278     FD 12 02 F6 | 	mov	arg01, result1
2427c     00 14 06 F6 | 	mov	arg02, #0
24280     34 F7 BF FD | 	call	#__system___float_tointeger
24284     FD 24 0A F6 | 	mov	local04, result1 wz
24288     10 FB 01 A6 |  if_e	mov	result1, local02
2428c     24 00 90 AD |  if_e	jmp	#LR__3441
24290     3E 24 26 F4 | 	bith	local04, #62
24294     0F 24 62 FD | 	qexp	local04
24298     10 13 02 F6 | 	mov	arg01, local02
2429c     18 14 62 FD | 	getqx	arg02
242a0     01 14 06 F1 | 	add	arg02, #1
242a4     01 14 46 F0 | 	shr	arg02, #1
242a8     00 80 1F FF 
242ac     00 14 06 F1 | 	add	arg02, ##1056964608
242b0     3C F2 BF FD | 	call	#__system___float_mul
242b4                 | LR__3441
242b4     A7 F0 03 F6 | 	mov	ptra, fp
242b8     B2 00 A0 FD | 	call	#popregs_
242bc                 | __system____builtin_exp2f_ret
242bc     2D 00 64 FD | 	ret
242c0                 | 
242c0                 | __system____builtin_log2f
242c0     06 4A 05 F6 | 	mov	COUNT_, #6
242c4     A8 00 A0 FD | 	call	#pushregs_
242c8     09 1F 02 F6 | 	mov	local01, arg01
242cc     09 21 0A F6 | 	mov	local02, arg01 wz
242d0     00 00 40 5F 
242d4     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
242d8     00 40 00 AF 
242dc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
242e0     08 01 90 AD |  if_e	jmp	#LR__3454
242e4     00 20 56 F2 | 	cmps	local02, #0 wc
242e8     00 E0 3F CF 
242ec     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
242f0     F8 00 90 CD |  if_b	jmp	#LR__3454
242f4     0F 13 02 F6 | 	mov	arg01, local01
242f8     00 90 20 FF 
242fc     00 14 06 F6 | 	mov	arg02, ##1092616192
24300     01 16 06 F6 | 	mov	arg03, #1
24304     1C F6 BF FD | 	call	#__system___float_cmp
24308     00 FA 0D F2 | 	cmp	result1, #0 wz
2430c     4D 2A 20 AF 
24310     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
24314     D4 00 90 AD |  if_e	jmp	#LR__3454
24318     0F 13 02 F6 | 	mov	arg01, local01
2431c     FC 16 20 FF 
24320     54 14 06 F6 | 	mov	arg02, ##1076754516
24324     01 16 06 F6 | 	mov	arg03, #1
24328     F8 F5 BF FD | 	call	#__system___float_cmp
2432c     00 FA 0D F2 | 	cmp	result1, #0 wz
24330     55 DC 1F AF 
24334     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24338     B0 00 90 AD |  if_e	jmp	#LR__3454
2433c     10 23 02 F6 | 	mov	local03, local02
24340     17 22 46 F0 | 	shr	local03, #23
24344     11 23 E2 F8 | 	getbyte	local03, local03, #0
24348     17 21 06 F4 | 	bitl	local02, #279
2434c     10 25 02 F6 | 	mov	local04, local02
24350     FF 22 0E F2 | 	cmp	local03, #255 wz
24354     1C 00 90 5D |  if_ne	jmp	#LR__3450
24358     00 24 0E F2 | 	cmp	local04, #0 wz
2435c     00 C0 3F 5F 
24360     00 26 06 56 |  if_ne	mov	local05, ##2139095040
24364     00 E0 3F AF 
24368     00 26 06 A6 |  if_e	mov	local05, ##2143289344
2436c     13 FB 01 F6 | 	mov	result1, local05
24370     78 00 90 FD | 	jmp	#LR__3454
24374                 | LR__3450
24374     00 22 0E F2 | 	cmp	local03, #0 wz
24378     17 24 26 54 |  if_ne	bith	local04, #23
2437c     7F 22 86 51 |  if_ne	sub	local03, #127
24380     28 00 90 5D |  if_ne	jmp	#LR__3453
24384     00 24 0E F2 | 	cmp	local04, #0 wz
24388     00 40 00 AF 
2438c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24390     58 00 90 AD |  if_e	jmp	#LR__3454
24394     7E 22 66 F6 | 	neg	local03, #126
24398     97 08 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
2439c                 | LR__3451
2439c     17 24 2E F4 | 	testbn	local04, #23 wz
243a0     01 24 66 A0 |  if_e	shl	local04, #1
243a4     01 22 06 A1 |  if_e	add	local03, #1
243a8     F0 FF 9F AD |  if_e	jmp	#LR__3451
243ac                 | LR__3452
243ac                 | LR__3453
243ac     0E 24 62 FD | 	qlog	local04
243b0     01 22 86 F1 | 	sub	local03, #1
243b4     11 13 52 F6 | 	abs	arg01, local03 wc
243b8     1F 28 C6 C9 |  if_b	decod	local06, #31
243bc     00 28 06 36 |  if_ae	mov	local06, #0
243c0     18 26 62 FD | 	getqx	local05
243c4     9B 26 06 F4 | 	bitl	local05, #155
243c8     08 26 06 F1 | 	add	local05, #8
243cc     04 26 46 F0 | 	shr	local05, #4
243d0     00 C0 1F FF 
243d4     00 26 06 F1 | 	add	local05, ##1065353216
243d8     10 ED BF FD | 	call	#__system___float_fromuns
243dc     14 FB 61 F5 | 	xor	result1, local06
243e0     FD 14 02 F6 | 	mov	arg02, result1
243e4     13 13 02 F6 | 	mov	arg01, local05
243e8     34 ED BF FD | 	call	#__system___float_add
243ec                 | LR__3454
243ec     A7 F0 03 F6 | 	mov	ptra, fp
243f0     B2 00 A0 FD | 	call	#popregs_
243f4                 | __system____builtin_log2f_ret
243f4     2D 00 64 FD | 	ret
243f8                 | 
243f8                 | __system____builtin_powf
243f8     04 4A 05 F6 | 	mov	COUNT_, #4
243fc     A8 00 A0 FD | 	call	#pushregs_
24400     09 1F 02 F6 | 	mov	local01, arg01
24404     0A 21 02 F6 | 	mov	local02, arg02
24408     10 13 02 F6 | 	mov	arg01, local02
2440c     00 14 06 F6 | 	mov	arg02, #0
24410     A4 F5 BF FD | 	call	#__system___float_tointeger
24414     FD 22 02 F6 | 	mov	local03, result1
24418     11 13 52 F6 | 	abs	arg01, local03 wc
2441c     1F 24 C6 C9 |  if_b	decod	local04, #31
24420     00 24 06 36 |  if_ae	mov	local04, #0
24424     C4 EC BF FD | 	call	#__system___float_fromuns
24428     12 FB 61 F5 | 	xor	result1, local04
2442c     FD 12 02 F6 | 	mov	arg01, result1
24430     10 15 02 F6 | 	mov	arg02, local02
24434     01 16 06 F6 | 	mov	arg03, #1
24438     E8 F4 BF FD | 	call	#__system___float_cmp
2443c     00 FA 0D F2 | 	cmp	result1, #0 wz
24440     18 00 90 5D |  if_ne	jmp	#LR__3460
24444     00 C0 1F FF 
24448     00 12 06 F6 | 	mov	arg01, ##1065353216
2444c     0F 15 02 F6 | 	mov	arg02, local01
24450     11 17 02 F6 | 	mov	arg03, local03
24454     A0 00 B0 FD | 	call	#__system___float_pow_n
24458     58 00 90 FD | 	jmp	#LR__3461
2445c                 | LR__3460
2445c     0F 13 02 F6 | 	mov	arg01, local01
24460     00 14 06 F6 | 	mov	arg02, #0
24464     01 16 06 F6 | 	mov	arg03, #1
24468     B8 F4 BF FD | 	call	#__system___float_cmp
2446c     00 FA 55 F2 | 	cmps	result1, #0 wc
24470     00 E0 3F CF 
24474     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24478     38 00 90 CD |  if_b	jmp	#LR__3461
2447c     0F 13 02 F6 | 	mov	arg01, local01
24480     00 14 06 F6 | 	mov	arg02, #0
24484     01 16 06 F6 | 	mov	arg03, #1
24488     98 F4 BF FD | 	call	#__system___float_cmp
2448c     00 FA 0D F2 | 	cmp	result1, #0 wz
24490     00 FA 05 A6 |  if_e	mov	result1, #0
24494     1C 00 90 AD |  if_e	jmp	#LR__3461
24498     0F 13 02 F6 | 	mov	arg01, local01
2449c     20 FE BF FD | 	call	#__system____builtin_log2f
244a0     FD 12 02 F6 | 	mov	arg01, result1
244a4     10 15 02 F6 | 	mov	arg02, local02
244a8     44 F0 BF FD | 	call	#__system___float_mul
244ac     FD 12 02 F6 | 	mov	arg01, result1
244b0     F8 FC BF FD | 	call	#__system____builtin_exp2f
244b4                 | LR__3461
244b4     A7 F0 03 F6 | 	mov	ptra, fp
244b8     B2 00 A0 FD | 	call	#popregs_
244bc                 | __system____builtin_powf_ret
244bc     2D 00 64 FD | 	ret
244c0                 | 
244c0                 | __system____builtin_logbase
244c0     02 4A 05 F6 | 	mov	COUNT_, #2
244c4     A8 00 A0 FD | 	call	#pushregs_
244c8     09 1F 02 F6 | 	mov	local01, arg01
244cc     0A 13 02 F6 | 	mov	arg01, arg02
244d0     EC FD BF FD | 	call	#__system____builtin_log2f
244d4     FD 20 02 F6 | 	mov	local02, result1
244d8     0F 13 02 F6 | 	mov	arg01, local01
244dc     E0 FD BF FD | 	call	#__system____builtin_log2f
244e0     FD 14 02 F6 | 	mov	arg02, result1
244e4     10 13 02 F6 | 	mov	arg01, local02
244e8     08 F2 BF FD | 	call	#__system___float_div
244ec     A7 F0 03 F6 | 	mov	ptra, fp
244f0     B2 00 A0 FD | 	call	#popregs_
244f4                 | __system____builtin_logbase_ret
244f4     2D 00 64 FD | 	ret
244f8                 | 
244f8                 | __system___float_pow_n
244f8     05 4A 05 F6 | 	mov	COUNT_, #5
244fc     A8 00 A0 FD | 	call	#pushregs_
24500     09 1F 02 F6 | 	mov	local01, arg01
24504     0A 21 02 F6 | 	mov	local02, arg02
24508     0B 23 02 F6 | 	mov	local03, arg03
2450c     00 22 56 F2 | 	cmps	local03, #0 wc
24510     18 00 90 3D |  if_ae	jmp	#LR__3470
24514     01 24 06 F6 | 	mov	local04, #1
24518     11 23 62 F6 | 	neg	local03, local03
2451c     00 22 56 F2 | 	cmps	local03, #0 wc
24520     00 FA 05 C6 |  if_b	mov	result1, #0
24524     94 00 90 CD |  if_b	jmp	#LR__3478
24528     04 00 90 FD | 	jmp	#LR__3471
2452c                 | LR__3470
2452c     00 24 06 F6 | 	mov	local04, #0
24530                 | LR__3471
24530     00 C0 1F FF 
24534     00 26 06 F6 | 	mov	local05, ##1065353216
24538                 | LR__3472
24538     01 22 56 F2 | 	cmps	local03, #1 wc
2453c     30 00 90 CD |  if_b	jmp	#LR__3474
24540     01 22 CE F7 | 	test	local03, #1 wz
24544     10 00 90 AD |  if_e	jmp	#LR__3473
24548     13 13 02 F6 | 	mov	arg01, local05
2454c     10 15 02 F6 | 	mov	arg02, local02
24550     9C EF BF FD | 	call	#__system___float_mul
24554     FD 26 02 F6 | 	mov	local05, result1
24558                 | LR__3473
24558     01 22 C6 F0 | 	sar	local03, #1
2455c     10 13 02 F6 | 	mov	arg01, local02
24560     10 15 02 F6 | 	mov	arg02, local02
24564     88 EF BF FD | 	call	#__system___float_mul
24568     FD 20 02 F6 | 	mov	local02, result1
2456c     C8 FF 9F FD | 	jmp	#LR__3472
24570                 | LR__3474
24570     00 24 0E F2 | 	cmp	local04, #0 wz
24574     14 00 90 AD |  if_e	jmp	#LR__3475
24578     0F 13 02 F6 | 	mov	arg01, local01
2457c     13 15 02 F6 | 	mov	arg02, local05
24580     70 F1 BF FD | 	call	#__system___float_div
24584     FD 26 02 F6 | 	mov	local05, result1
24588     2C 00 90 FD | 	jmp	#LR__3477
2458c                 | LR__3475
2458c     0F 13 02 F6 | 	mov	arg01, local01
24590     00 C0 1F FF 
24594     00 14 06 F6 | 	mov	arg02, ##1065353216
24598     01 16 06 F6 | 	mov	arg03, #1
2459c     84 F3 BF FD | 	call	#__system___float_cmp
245a0     00 FA 0D F2 | 	cmp	result1, #0 wz
245a4     10 00 90 AD |  if_e	jmp	#LR__3476
245a8     0F 13 02 F6 | 	mov	arg01, local01
245ac     13 15 02 F6 | 	mov	arg02, local05
245b0     3C EF BF FD | 	call	#__system___float_mul
245b4     FD 26 02 F6 | 	mov	local05, result1
245b8                 | LR__3476
245b8                 | LR__3477
245b8     13 FB 01 F6 | 	mov	result1, local05
245bc                 | LR__3478
245bc     A7 F0 03 F6 | 	mov	ptra, fp
245c0     B2 00 A0 FD | 	call	#popregs_
245c4                 | __system___float_pow_n_ret
245c4     2D 00 64 FD | 	ret
245c8                 | 
245c8                 | __system___gc_ptrs
245c8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
245cc     00 03 02 F6 | 	mov	_var02, _var01
245d0     76 01 00 FF 
245d4     F8 03 06 F1 | 	add	_var02, ##191992
245d8     00 FD 09 FB | 	rdlong	result2, _var01 wz
245dc     74 00 90 5D |  if_ne	jmp	#LR__3480
245e0     01 FD 01 F6 | 	mov	result2, _var02
245e4     00 FD 81 F1 | 	sub	result2, _var01
245e8     00 03 58 FC | 	wrword	#1, _var01
245ec     00 FB 01 F6 | 	mov	result1, _var01
245f0     02 FA 05 F1 | 	add	result1, #2
245f4     36 00 80 FF 
245f8     FD 20 59 FC | 	wrword	##27792, result1
245fc     00 FB 01 F6 | 	mov	result1, _var01
24600     04 FA 05 F1 | 	add	result1, #4
24604     FD 00 58 FC | 	wrword	#0, result1
24608     00 FB 01 F6 | 	mov	result1, _var01
2460c     06 FA 05 F1 | 	add	result1, #6
24610     FD 02 58 FC | 	wrword	#1, result1
24614     10 00 06 F1 | 	add	_var01, #16
24618     FE FC 51 F6 | 	abs	result2, result2 wc
2461c     04 FC 45 F0 | 	shr	result2, #4
24620     FE FC 81 F6 | 	negc	result2, result2
24624     00 FD 51 FC | 	wrword	result2, _var01
24628     00 FD 01 F6 | 	mov	result2, _var01
2462c     02 FC 05 F1 | 	add	result2, #2
24630     36 00 80 FF 
24634     FE 1E 59 FC | 	wrword	##27791, result2
24638     00 FD 01 F6 | 	mov	result2, _var01
2463c     04 FC 05 F1 | 	add	result2, #4
24640     FE 00 58 FC | 	wrword	#0, result2
24644     00 FD 01 F6 | 	mov	result2, _var01
24648     06 FC 05 F1 | 	add	result2, #6
2464c     FE 00 58 FC | 	wrword	#0, result2
24650     10 00 86 F1 | 	sub	_var01, #16
24654                 | LR__3480
24654     00 FB 01 F6 | 	mov	result1, _var01
24658     01 FD 01 F6 | 	mov	result2, _var02
2465c                 | __system___gc_ptrs_ret
2465c     2D 00 64 FD | 	ret
24660                 | 
24660                 | __system___gc_tryalloc
24660     0B 4A 05 F6 | 	mov	COUNT_, #11
24664     A8 00 A0 FD | 	call	#pushregs_
24668     09 1F 02 F6 | 	mov	local01, arg01
2466c     0A 21 02 F6 | 	mov	local02, arg02
24670     54 FF BF FD | 	call	#__system___gc_ptrs
24674     FD 22 02 F6 | 	mov	local03, result1
24678     FE 24 02 F6 | 	mov	local04, result2
2467c     11 27 02 F6 | 	mov	local05, local03
24680     00 28 06 F6 | 	mov	local06, #0
24684     97 1E 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
24688                 | LR__3490
24688     13 2B 02 F6 | 	mov	local07, local05
2468c     06 26 06 F1 | 	add	local05, #6
24690     13 15 EA FA | 	rdword	arg02, local05 wz
24694     11 13 02 F6 | 	mov	arg01, local03
24698     00 FA 05 A6 |  if_e	mov	result1, #0
2469c     04 14 66 50 |  if_ne	shl	arg02, #4
246a0     0A 13 02 51 |  if_ne	add	arg01, arg02
246a4     09 FB 01 56 |  if_ne	mov	result1, arg01
246a8     FD 26 0A F6 | 	mov	local05, result1 wz
246ac     13 29 E2 5A |  if_ne	rdword	local06, local05
246b0     00 26 0E F2 | 	cmp	local05, #0 wz
246b4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
246b8     08 00 90 1D |  if_a	jmp	#LR__3492
246bc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
246c0     C4 FF 9F 1D |  if_a	jmp	#LR__3490
246c4                 | LR__3491
246c4                 | LR__3492
246c4     00 26 0E F2 | 	cmp	local05, #0 wz
246c8     13 FB 01 A6 |  if_e	mov	result1, local05
246cc     3C 01 90 AD |  if_e	jmp	#LR__3495
246d0     13 FD 01 F6 | 	mov	result2, local05
246d4     06 FC 05 F1 | 	add	result2, #6
246d8     FE 2C E2 FA | 	rdword	local08, result2
246dc     14 1F 52 F2 | 	cmps	local01, local06 wc
246e0     C0 00 90 3D |  if_ae	jmp	#LR__3494
246e4     13 1F 52 FC | 	wrword	local01, local05
246e8     13 13 02 F6 | 	mov	arg01, local05
246ec     0F 2D 02 F6 | 	mov	local08, local01
246f0     04 2C 66 F0 | 	shl	local08, #4
246f4     16 13 02 F1 | 	add	arg01, local08
246f8     0F 29 82 F1 | 	sub	local06, local01
246fc     09 29 52 FC | 	wrword	local06, arg01
24700     09 2D 02 F6 | 	mov	local08, arg01
24704     02 2C 06 F1 | 	add	local08, #2
24708     36 00 80 FF 
2470c     16 1F 59 FC | 	wrword	##27791, local08
24710     13 15 0A F6 | 	mov	arg02, local05 wz
24714     00 FA 05 A6 |  if_e	mov	result1, #0
24718     11 15 82 51 |  if_ne	sub	arg02, local03
2471c     04 14 46 50 |  if_ne	shr	arg02, #4
24720     0A FB 01 56 |  if_ne	mov	result1, arg02
24724     09 2D 02 F6 | 	mov	local08, arg01
24728     04 2C 06 F1 | 	add	local08, #4
2472c     16 FB 51 FC | 	wrword	result1, local08
24730     13 2D 02 F6 | 	mov	local08, local05
24734     06 2C 06 F1 | 	add	local08, #6
24738     09 15 02 F6 | 	mov	arg02, arg01
2473c     16 2D E2 FA | 	rdword	local08, local08
24740     06 14 06 F1 | 	add	arg02, #6
24744     0A 2D 52 FC | 	wrword	local08, arg02
24748     09 2F 02 F6 | 	mov	local09, arg01
2474c     17 15 0A F6 | 	mov	arg02, local09 wz
24750     00 FA 05 A6 |  if_e	mov	result1, #0
24754     11 15 82 51 |  if_ne	sub	arg02, local03
24758     04 14 46 50 |  if_ne	shr	arg02, #4
2475c     0A FB 01 56 |  if_ne	mov	result1, arg02
24760     FD 2C 02 F6 | 	mov	local08, result1
24764     09 31 EA FA | 	rdword	local10, arg01 wz
24768     00 FA 05 A6 |  if_e	mov	result1, #0
2476c     04 30 66 50 |  if_ne	shl	local10, #4
24770     18 13 02 51 |  if_ne	add	arg01, local10
24774     09 FB 01 56 |  if_ne	mov	result1, arg01
24778     FD 32 0A F6 | 	mov	local11, result1 wz
2477c     24 00 90 AD |  if_e	jmp	#LR__3493
24780     12 33 52 F2 | 	cmps	local11, local04 wc
24784     1C 00 90 3D |  if_ae	jmp	#LR__3493
24788     17 15 0A F6 | 	mov	arg02, local09 wz
2478c     00 FA 05 A6 |  if_e	mov	result1, #0
24790     11 15 82 51 |  if_ne	sub	arg02, local03
24794     04 14 46 50 |  if_ne	shr	arg02, #4
24798     0A FB 01 56 |  if_ne	mov	result1, arg02
2479c     04 32 06 F1 | 	add	local11, #4
247a0     19 FB 51 FC | 	wrword	result1, local11
247a4                 | LR__3493
247a4                 | LR__3494
247a4     06 2A 06 F1 | 	add	local07, #6
247a8     15 2D 52 FC | 	wrword	local08, local07
247ac     36 00 00 FF 
247b0     80 2E 06 F6 | 	mov	local09, ##27776
247b4     10 2F 42 F5 | 	or	local09, local02
247b8     00 FA 05 F6 | 	mov	result1, #0
247bc     01 FA 61 FD | 	cogid	result1
247c0     FD 2E 42 F5 | 	or	local09, result1
247c4     13 33 02 F6 | 	mov	local11, local05
247c8     02 32 06 F1 | 	add	local11, #2
247cc     19 2F 52 FC | 	wrword	local09, local11
247d0     11 2F 02 F6 | 	mov	local09, local03
247d4     08 2E 06 F1 | 	add	local09, #8
247d8     13 33 02 F6 | 	mov	local11, local05
247dc     17 2F E2 FA | 	rdword	local09, local09
247e0     06 32 06 F1 | 	add	local11, #6
247e4     19 2F 52 FC | 	wrword	local09, local11
247e8     13 15 0A F6 | 	mov	arg02, local05 wz
247ec     00 FA 05 A6 |  if_e	mov	result1, #0
247f0     11 15 82 51 |  if_ne	sub	arg02, local03
247f4     04 14 46 50 |  if_ne	shr	arg02, #4
247f8     0A FB 01 56 |  if_ne	mov	result1, arg02
247fc     08 22 06 F1 | 	add	local03, #8
24800     11 FB 51 FC | 	wrword	result1, local03
24804     08 26 06 F1 | 	add	local05, #8
24808     13 FB 01 F6 | 	mov	result1, local05
2480c                 | LR__3495
2480c     A7 F0 03 F6 | 	mov	ptra, fp
24810     B2 00 A0 FD | 	call	#popregs_
24814                 | __system___gc_tryalloc_ret
24814     2D 00 64 FD | 	ret
24818                 | 
24818                 | __system___gc_alloc_managed
24818     01 4A 05 F6 | 	mov	COUNT_, #1
2481c     A8 00 A0 FD | 	call	#pushregs_
24820     09 1F 02 F6 | 	mov	local01, arg01
24824     00 14 06 F6 | 	mov	arg02, #0
24828     1C 00 B0 FD | 	call	#__system___gc_doalloc
2482c     FD 14 0A F6 | 	mov	arg02, result1 wz
24830     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
24834     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24838     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2483c     A7 F0 03 F6 | 	mov	ptra, fp
24840     B2 00 A0 FD | 	call	#popregs_
24844                 | __system___gc_alloc_managed_ret
24844     2D 00 64 FD | 	ret
24848                 | 
24848                 | __system___gc_doalloc
24848     06 4A 05 F6 | 	mov	COUNT_, #6
2484c     A8 00 A0 FD | 	call	#pushregs_
24850     09 1F 0A F6 | 	mov	local01, arg01 wz
24854     0A 21 02 F6 | 	mov	local02, arg02
24858     00 FA 05 A6 |  if_e	mov	result1, #0
2485c     8C 00 90 AD |  if_e	jmp	#LR__3507
24860     17 1E 06 F1 | 	add	local01, #23
24864     0F 1E 26 F5 | 	andn	local01, #15
24868     04 1E 46 F0 | 	shr	local01, #4
2486c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24870     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24874     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24878     C0 C0 BF FD | 	call	#__system___lockmem
2487c     0F 13 02 F6 | 	mov	arg01, local01
24880     10 15 02 F6 | 	mov	arg02, local02
24884     D8 FD BF FD | 	call	#__system___gc_tryalloc
24888     FD 22 0A F6 | 	mov	local03, result1 wz
2488c     14 00 90 5D |  if_ne	jmp	#LR__3500
24890     70 03 B0 FD | 	call	#__system___gc_docollect
24894     0F 13 02 F6 | 	mov	arg01, local01
24898     10 15 02 F6 | 	mov	arg02, local02
2489c     C0 FD BF FD | 	call	#__system___gc_tryalloc
248a0     FD 22 02 F6 | 	mov	local03, result1
248a4                 | LR__3500
248a4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
248a8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
248ac     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
248b0     09 01 68 FC | 	wrlong	#0, arg01
248b4     00 22 0E F2 | 	cmp	local03, #0 wz
248b8     2C 00 90 AD |  if_e	jmp	#LR__3506
248bc     04 1E 66 F0 | 	shl	local01, #4
248c0     08 1E 86 F1 | 	sub	local01, #8
248c4     0F 25 52 F6 | 	abs	local04, local01 wc
248c8     02 24 46 F0 | 	shr	local04, #2
248cc     12 27 8A F6 | 	negc	local05, local04 wz
248d0     11 29 02 F6 | 	mov	local06, local03
248d4     10 00 90 AD |  if_e	jmp	#LR__3505
248d8     97 06 48 FB | 	callpa	#(@LR__3503-@LR__3501)>>2,fcache_load_ptr_
248dc                 | LR__3501
248dc     13 05 D8 FC | 	rep	@LR__3504, local05
248e0                 | LR__3502
248e0     14 01 68 FC | 	wrlong	#0, local06
248e4     04 28 06 F1 | 	add	local06, #4
248e8                 | LR__3503
248e8                 | LR__3504
248e8                 | LR__3505
248e8                 | LR__3506
248e8     11 FB 01 F6 | 	mov	result1, local03
248ec                 | LR__3507
248ec     A7 F0 03 F6 | 	mov	ptra, fp
248f0     B2 00 A0 FD | 	call	#popregs_
248f4                 | __system___gc_doalloc_ret
248f4     2D 00 64 FD | 	ret
248f8                 | 
248f8                 | __system___gc_isvalidptr
248f8     F8 16 06 F4 | 	bitl	arg03, #248
248fc     08 16 86 F1 | 	sub	arg03, #8
24900     09 17 52 F2 | 	cmps	arg03, arg01 wc
24904     08 00 90 CD |  if_b	jmp	#LR__3510
24908     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2490c     08 00 90 CD |  if_b	jmp	#LR__3511
24910                 | LR__3510
24910     00 FA 05 F6 | 	mov	result1, #0
24914     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24918                 | LR__3511
24918     0B 01 02 F6 | 	mov	_var01, arg03
2491c     09 01 62 F5 | 	xor	_var01, arg01
24920     0F 00 CE F7 | 	test	_var01, #15 wz
24924     00 FA 05 56 |  if_ne	mov	result1, #0
24928     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2492c     0B 01 02 F6 | 	mov	_var01, arg03
24930     02 00 06 F1 | 	add	_var01, #2
24934     00 01 E2 FA | 	rdword	_var01, _var01
24938     7F 00 00 FF 
2493c     C0 01 06 F5 | 	and	_var01, ##65472
24940     36 00 00 FF 
24944     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24948     00 FA 05 56 |  if_ne	mov	result1, #0
2494c     0B FB 01 A6 |  if_e	mov	result1, arg03
24950                 | __system___gc_isvalidptr_ret
24950     2D 00 64 FD | 	ret
24954                 | 
24954                 | __system___gc_free
24954     09 17 02 F6 | 	mov	arg03, arg01
24958     6C FC BF FD | 	call	#__system___gc_ptrs
2495c     FD 12 02 F6 | 	mov	arg01, result1
24960     FE 14 02 F6 | 	mov	arg02, result2
24964     90 FF BF FD | 	call	#__system___gc_isvalidptr
24968     FD 14 0A F6 | 	mov	arg02, result1 wz
2496c     28 00 90 AD |  if_e	jmp	#LR__3520
24970     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24974     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24978     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2497c     BC BF BF FD | 	call	#__system___lockmem
24980     0A 13 02 F6 | 	mov	arg01, arg02
24984     14 00 B0 FD | 	call	#__system___gc_dofree
24988     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2498c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24990     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24994     09 01 68 FC | 	wrlong	#0, arg01
24998                 | LR__3520
24998                 | __system___gc_free_ret
24998     2D 00 64 FD | 	ret
2499c                 | 
2499c                 | __system___gc_dofree
2499c     06 4A 05 F6 | 	mov	COUNT_, #6
249a0     A8 00 A0 FD | 	call	#pushregs_
249a4     09 1F 02 F6 | 	mov	local01, arg01
249a8     1C FC BF FD | 	call	#__system___gc_ptrs
249ac     FD 20 02 F6 | 	mov	local02, result1
249b0     FE 22 02 F6 | 	mov	local03, result2
249b4     0F 15 02 F6 | 	mov	arg02, local01
249b8     02 14 06 F1 | 	add	arg02, #2
249bc     36 00 80 FF 
249c0     0A 1F 59 FC | 	wrword	##27791, arg02
249c4     0F 25 02 F6 | 	mov	local04, local01
249c8     0F 13 02 F6 | 	mov	arg01, local01
249cc     09 27 EA FA | 	rdword	local05, arg01 wz
249d0     00 FA 05 A6 |  if_e	mov	result1, #0
249d4     04 26 66 50 |  if_ne	shl	local05, #4
249d8     13 13 02 51 |  if_ne	add	arg01, local05
249dc     09 FB 01 56 |  if_ne	mov	result1, arg01
249e0     FD 28 02 F6 | 	mov	local06, result1
249e4     97 24 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
249e8                 | LR__3530
249e8     04 24 06 F1 | 	add	local04, #4
249ec     12 15 EA FA | 	rdword	arg02, local04 wz
249f0     10 13 02 F6 | 	mov	arg01, local02
249f4     00 FA 05 A6 |  if_e	mov	result1, #0
249f8     04 14 66 50 |  if_ne	shl	arg02, #4
249fc     0A 13 02 51 |  if_ne	add	arg01, arg02
24a00     09 FB 01 56 |  if_ne	mov	result1, arg01
24a04     FD 24 0A F6 | 	mov	local04, result1 wz
24a08     24 00 90 AD |  if_e	jmp	#LR__3532
24a0c     12 13 02 F6 | 	mov	arg01, local04
24a10     00 FA 05 F6 | 	mov	result1, #0
24a14     02 12 06 F1 | 	add	arg01, #2
24a18     09 13 E2 FA | 	rdword	arg01, arg01
24a1c     36 00 00 FF 
24a20     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24a24     01 FA 65 A6 |  if_e	neg	result1, #1
24a28     00 FA 0D F2 | 	cmp	result1, #0 wz
24a2c     B8 FF 9F AD |  if_e	jmp	#LR__3530
24a30                 | LR__3531
24a30                 | LR__3532
24a30     00 24 0E F2 | 	cmp	local04, #0 wz
24a34     10 25 02 A6 |  if_e	mov	local04, local02
24a38     12 15 02 F6 | 	mov	arg02, local04
24a3c     06 14 06 F1 | 	add	arg02, #6
24a40     0F 13 02 F6 | 	mov	arg01, local01
24a44     0A 15 E2 FA | 	rdword	arg02, arg02
24a48     06 12 06 F1 | 	add	arg01, #6
24a4c     09 15 52 FC | 	wrword	arg02, arg01
24a50     0F 15 0A F6 | 	mov	arg02, local01 wz
24a54     00 FA 05 A6 |  if_e	mov	result1, #0
24a58     10 15 82 51 |  if_ne	sub	arg02, local02
24a5c     04 14 46 50 |  if_ne	shr	arg02, #4
24a60     0A FB 01 56 |  if_ne	mov	result1, arg02
24a64     12 15 02 F6 | 	mov	arg02, local04
24a68     06 14 06 F1 | 	add	arg02, #6
24a6c     0A FB 51 FC | 	wrword	result1, arg02
24a70     10 25 0A F2 | 	cmp	local04, local02 wz
24a74     A4 00 90 AD |  if_e	jmp	#LR__3535
24a78     12 13 02 F6 | 	mov	arg01, local04
24a7c     09 27 EA FA | 	rdword	local05, arg01 wz
24a80     00 FA 05 A6 |  if_e	mov	result1, #0
24a84     04 26 66 50 |  if_ne	shl	local05, #4
24a88     13 13 02 51 |  if_ne	add	arg01, local05
24a8c     09 FB 01 56 |  if_ne	mov	result1, arg01
24a90     0F FB 09 F2 | 	cmp	result1, local01 wz
24a94     84 00 90 5D |  if_ne	jmp	#LR__3534
24a98     12 29 E2 FA | 	rdword	local06, local04
24a9c     0F 15 E2 FA | 	rdword	arg02, local01
24aa0     0A 29 02 F1 | 	add	local06, arg02
24aa4     12 29 52 FC | 	wrword	local06, local04
24aa8     0F 29 02 F6 | 	mov	local06, local01
24aac     02 28 06 F1 | 	add	local06, #2
24ab0     14 01 58 FC | 	wrword	#0, local06
24ab4     0F 13 02 F6 | 	mov	arg01, local01
24ab8     09 27 EA FA | 	rdword	local05, arg01 wz
24abc     00 FA 05 A6 |  if_e	mov	result1, #0
24ac0     04 26 66 50 |  if_ne	shl	local05, #4
24ac4     13 13 02 51 |  if_ne	add	arg01, local05
24ac8     09 FB 01 56 |  if_ne	mov	result1, arg01
24acc     FD 28 02 F6 | 	mov	local06, result1
24ad0     11 29 52 F2 | 	cmps	local06, local03 wc
24ad4     20 00 90 3D |  if_ae	jmp	#LR__3533
24ad8     12 15 0A F6 | 	mov	arg02, local04 wz
24adc     00 FA 05 A6 |  if_e	mov	result1, #0
24ae0     10 15 82 51 |  if_ne	sub	arg02, local02
24ae4     04 14 46 50 |  if_ne	shr	arg02, #4
24ae8     0A FB 01 56 |  if_ne	mov	result1, arg02
24aec     14 15 02 F6 | 	mov	arg02, local06
24af0     04 14 06 F1 | 	add	arg02, #4
24af4     0A FB 51 FC | 	wrword	result1, arg02
24af8                 | LR__3533
24af8     0F 15 02 F6 | 	mov	arg02, local01
24afc     06 14 06 F1 | 	add	arg02, #6
24b00     12 FD 01 F6 | 	mov	result2, local04
24b04     0A 15 E2 FA | 	rdword	arg02, arg02
24b08     06 FC 05 F1 | 	add	result2, #6
24b0c     FE 14 52 FC | 	wrword	arg02, result2
24b10     06 1E 06 F1 | 	add	local01, #6
24b14     0F 01 58 FC | 	wrword	#0, local01
24b18     12 1F 02 F6 | 	mov	local01, local04
24b1c                 | LR__3534
24b1c                 | LR__3535
24b1c     0F 13 02 F6 | 	mov	arg01, local01
24b20     09 27 EA FA | 	rdword	local05, arg01 wz
24b24     00 FA 05 A6 |  if_e	mov	result1, #0
24b28     04 26 66 50 |  if_ne	shl	local05, #4
24b2c     13 13 02 51 |  if_ne	add	arg01, local05
24b30     09 FB 01 56 |  if_ne	mov	result1, arg01
24b34     FD 14 0A F6 | 	mov	arg02, result1 wz
24b38     B8 00 90 AD |  if_e	jmp	#LR__3537
24b3c     11 15 52 F2 | 	cmps	arg02, local03 wc
24b40     B0 00 90 3D |  if_ae	jmp	#LR__3537
24b44     0A 13 02 F6 | 	mov	arg01, arg02
24b48     00 FA 05 F6 | 	mov	result1, #0
24b4c     02 12 06 F1 | 	add	arg01, #2
24b50     09 13 E2 FA | 	rdword	arg01, arg01
24b54     36 00 00 FF 
24b58     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24b5c     01 FA 65 A6 |  if_e	neg	result1, #1
24b60     00 FA 0D F2 | 	cmp	result1, #0 wz
24b64     8C 00 90 AD |  if_e	jmp	#LR__3537
24b68     0F 25 02 F6 | 	mov	local04, local01
24b6c     12 29 E2 FA | 	rdword	local06, local04
24b70     0A 13 02 F6 | 	mov	arg01, arg02
24b74     09 1F E2 FA | 	rdword	local01, arg01
24b78     0F 29 02 F1 | 	add	local06, local01
24b7c     12 29 52 FC | 	wrword	local06, local04
24b80     09 29 02 F6 | 	mov	local06, arg01
24b84     06 28 06 F1 | 	add	local06, #6
24b88     12 1F 02 F6 | 	mov	local01, local04
24b8c     14 29 E2 FA | 	rdword	local06, local06
24b90     06 1E 06 F1 | 	add	local01, #6
24b94     0F 29 52 FC | 	wrword	local06, local01
24b98     09 29 02 F6 | 	mov	local06, arg01
24b9c     02 28 06 F1 | 	add	local06, #2
24ba0     14 55 59 FC | 	wrword	#170, local06
24ba4     09 29 02 F6 | 	mov	local06, arg01
24ba8     06 28 06 F1 | 	add	local06, #6
24bac     14 01 58 FC | 	wrword	#0, local06
24bb0     09 27 EA FA | 	rdword	local05, arg01 wz
24bb4     00 FA 05 A6 |  if_e	mov	result1, #0
24bb8     04 26 66 50 |  if_ne	shl	local05, #4
24bbc     13 13 02 51 |  if_ne	add	arg01, local05
24bc0     09 FB 01 56 |  if_ne	mov	result1, arg01
24bc4     FD 28 0A F6 | 	mov	local06, result1 wz
24bc8     28 00 90 AD |  if_e	jmp	#LR__3536
24bcc     11 29 52 F2 | 	cmps	local06, local03 wc
24bd0     20 00 90 3D |  if_ae	jmp	#LR__3536
24bd4     12 15 0A F6 | 	mov	arg02, local04 wz
24bd8     00 FA 05 A6 |  if_e	mov	result1, #0
24bdc     10 15 82 51 |  if_ne	sub	arg02, local02
24be0     04 14 46 50 |  if_ne	shr	arg02, #4
24be4     0A FB 01 56 |  if_ne	mov	result1, arg02
24be8     14 25 02 F6 | 	mov	local04, local06
24bec     04 24 06 F1 | 	add	local04, #4
24bf0     12 FB 51 FC | 	wrword	result1, local04
24bf4                 | LR__3536
24bf4                 | LR__3537
24bf4     14 FB 01 F6 | 	mov	result1, local06
24bf8     A7 F0 03 F6 | 	mov	ptra, fp
24bfc     B2 00 A0 FD | 	call	#popregs_
24c00                 | __system___gc_dofree_ret
24c00     2D 00 64 FD | 	ret
24c04                 | 
24c04                 | __system___gc_docollect
24c04     05 4A 05 F6 | 	mov	COUNT_, #5
24c08     A8 00 A0 FD | 	call	#pushregs_
24c0c     B8 F9 BF FD | 	call	#__system___gc_ptrs
24c10     FE 1E 02 F6 | 	mov	local01, result2
24c14     FD 20 02 F6 | 	mov	local02, result1
24c18     10 13 02 F6 | 	mov	arg01, local02
24c1c     09 23 EA FA | 	rdword	local03, arg01 wz
24c20     00 FA 05 A6 |  if_e	mov	result1, #0
24c24     04 22 66 50 |  if_ne	shl	local03, #4
24c28     11 13 02 51 |  if_ne	add	arg01, local03
24c2c     09 FB 01 56 |  if_ne	mov	result1, arg01
24c30     FD 24 0A F6 | 	mov	local04, result1 wz
24c34     00 FA 05 F6 | 	mov	result1, #0
24c38     01 FA 61 FD | 	cogid	result1
24c3c     FD 26 02 F6 | 	mov	local05, result1
24c40     48 00 90 AD |  if_e	jmp	#LR__3542
24c44     97 22 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
24c48                 | LR__3540
24c48     0F 25 52 F2 | 	cmps	local04, local01 wc
24c4c     3C 00 90 3D |  if_ae	jmp	#LR__3542
24c50     12 15 02 F6 | 	mov	arg02, local04
24c54     02 14 06 F1 | 	add	arg02, #2
24c58     0A 15 E2 FA | 	rdword	arg02, arg02
24c5c     20 14 26 F5 | 	andn	arg02, #32
24c60     12 13 02 F6 | 	mov	arg01, local04
24c64     02 12 06 F1 | 	add	arg01, #2
24c68     09 15 52 FC | 	wrword	arg02, arg01
24c6c     12 13 02 F6 | 	mov	arg01, local04
24c70     09 23 EA FA | 	rdword	local03, arg01 wz
24c74     00 FA 05 A6 |  if_e	mov	result1, #0
24c78     04 22 66 50 |  if_ne	shl	local03, #4
24c7c     11 13 02 51 |  if_ne	add	arg01, local03
24c80     09 FB 01 56 |  if_ne	mov	result1, arg01
24c84     FD 24 0A F6 | 	mov	local04, result1 wz
24c88     BC FF 9F 5D |  if_ne	jmp	#LR__3540
24c8c                 | LR__3541
24c8c                 | LR__3542
24c8c     00 22 06 F6 | 	mov	local03, #0
24c90     00 12 06 F6 | 	mov	arg01, #0
24c94     7C BC BF FD | 	call	#__system____topofstack
24c98     FD 14 02 F6 | 	mov	arg02, result1
24c9c     11 13 02 F6 | 	mov	arg01, local03
24ca0     90 00 B0 FD | 	call	#__system___gc_markhub
24ca4     1C 01 B0 FD | 	call	#__system___gc_markcog
24ca8     10 13 02 F6 | 	mov	arg01, local02
24cac     09 23 EA FA | 	rdword	local03, arg01 wz
24cb0     00 FA 05 A6 |  if_e	mov	result1, #0
24cb4     04 22 66 50 |  if_ne	shl	local03, #4
24cb8     11 13 02 51 |  if_ne	add	arg01, local03
24cbc     09 FB 01 56 |  if_ne	mov	result1, arg01
24cc0     FD 20 0A F6 | 	mov	local02, result1 wz
24cc4     60 00 90 AD |  if_e	jmp	#LR__3546
24cc8                 | LR__3543
24cc8     10 25 02 F6 | 	mov	local04, local02
24ccc     12 13 02 F6 | 	mov	arg01, local04
24cd0     09 23 EA FA | 	rdword	local03, arg01 wz
24cd4     00 FA 05 A6 |  if_e	mov	result1, #0
24cd8     04 22 66 50 |  if_ne	shl	local03, #4
24cdc     11 13 02 51 |  if_ne	add	arg01, local03
24ce0     09 FB 01 56 |  if_ne	mov	result1, arg01
24ce4     FD 20 02 F6 | 	mov	local02, result1
24ce8     12 15 02 F6 | 	mov	arg02, local04
24cec     02 14 06 F1 | 	add	arg02, #2
24cf0     0A 15 E2 FA | 	rdword	arg02, arg02
24cf4     20 14 CE F7 | 	test	arg02, #32 wz
24cf8     10 14 CE A7 |  if_e	test	arg02, #16 wz
24cfc     1C 00 90 5D |  if_ne	jmp	#LR__3545
24d00     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24d04     13 15 0A F2 | 	cmp	arg02, local05 wz
24d08     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24d0c     0C 00 90 5D |  if_ne	jmp	#LR__3544
24d10     12 13 02 F6 | 	mov	arg01, local04
24d14     84 FC BF FD | 	call	#__system___gc_dofree
24d18     FD 20 02 F6 | 	mov	local02, result1
24d1c                 | LR__3544
24d1c                 | LR__3545
24d1c     00 20 0E F2 | 	cmp	local02, #0 wz
24d20     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24d24     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3543
24d28                 | LR__3546
24d28     A7 F0 03 F6 | 	mov	ptra, fp
24d2c     B2 00 A0 FD | 	call	#popregs_
24d30                 | __system___gc_docollect_ret
24d30     2D 00 64 FD | 	ret
24d34                 | 
24d34                 | __system___gc_markhub
24d34     04 4A 05 F6 | 	mov	COUNT_, #4
24d38     A8 00 A0 FD | 	call	#pushregs_
24d3c     09 1F 02 F6 | 	mov	local01, arg01
24d40     0A 21 02 F6 | 	mov	local02, arg02
24d44     80 F8 BF FD | 	call	#__system___gc_ptrs
24d48     FD 22 02 F6 | 	mov	local03, result1
24d4c     FE 24 02 F6 | 	mov	local04, result2
24d50                 | LR__3550
24d50     10 1F 52 F2 | 	cmps	local01, local02 wc
24d54     60 00 90 3D |  if_ae	jmp	#LR__3551
24d58     0F 17 02 FB | 	rdlong	arg03, local01
24d5c     04 1E 06 F1 | 	add	local01, #4
24d60     12 15 02 F6 | 	mov	arg02, local04
24d64     11 13 02 F6 | 	mov	arg01, local03
24d68     8C FB BF FD | 	call	#__system___gc_isvalidptr
24d6c     FD 16 0A F6 | 	mov	arg03, result1 wz
24d70     DC FF 9F AD |  if_e	jmp	#LR__3550
24d74     0B 13 02 F6 | 	mov	arg01, arg03
24d78     00 FA 05 F6 | 	mov	result1, #0
24d7c     02 12 06 F1 | 	add	arg01, #2
24d80     09 13 E2 FA | 	rdword	arg01, arg01
24d84     36 00 00 FF 
24d88     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24d8c     01 FA 65 A6 |  if_e	neg	result1, #1
24d90     00 FA 0D F2 | 	cmp	result1, #0 wz
24d94     B8 FF 9F 5D |  if_ne	jmp	#LR__3550
24d98     0B FD 01 F6 | 	mov	result2, arg03
24d9c     02 FC 05 F1 | 	add	result2, #2
24da0     FE FC E1 FA | 	rdword	result2, result2
24da4     0F FC 25 F5 | 	andn	result2, #15
24da8     2E FC 45 F5 | 	or	result2, #46
24dac     02 16 06 F1 | 	add	arg03, #2
24db0     0B FD 51 FC | 	wrword	result2, arg03
24db4     98 FF 9F FD | 	jmp	#LR__3550
24db8                 | LR__3551
24db8     A7 F0 03 F6 | 	mov	ptra, fp
24dbc     B2 00 A0 FD | 	call	#popregs_
24dc0                 | __system___gc_markhub_ret
24dc0     2D 00 64 FD | 	ret
24dc4                 | 
24dc4                 | __system___gc_markcog
24dc4     04 4A 05 F6 | 	mov	COUNT_, #4
24dc8     A8 00 A0 FD | 	call	#pushregs_
24dcc     F8 F7 BF FD | 	call	#__system___gc_ptrs
24dd0     FD 1E 02 F6 | 	mov	local01, result1
24dd4     FE 20 02 F6 | 	mov	local02, result2
24dd8     EF 23 06 F6 | 	mov	local03, #495
24ddc                 | LR__3560
24ddc                 | 	'.live	local03
24ddc     00 22 96 F9 | 	alts	local03, #0
24de0     11 25 02 F6 | 	mov	local04, local03
24de4     0F 13 02 F6 | 	mov	arg01, local01
24de8     10 15 02 F6 | 	mov	arg02, local02
24dec     12 17 02 F6 | 	mov	arg03, local04
24df0     04 FB BF FD | 	call	#__system___gc_isvalidptr
24df4     00 FA 0D F2 | 	cmp	result1, #0 wz
24df8     18 00 90 AD |  if_e	jmp	#LR__3561
24dfc     FD 24 02 F6 | 	mov	local04, result1
24e00     02 24 06 F1 | 	add	local04, #2
24e04     12 25 E2 FA | 	rdword	local04, local04
24e08     20 24 46 F5 | 	or	local04, #32
24e0c     02 FA 05 F1 | 	add	result1, #2
24e10     FD 24 52 FC | 	wrword	local04, result1
24e14                 | LR__3561
24e14     01 22 86 F1 | 	sub	local03, #1
24e18     00 22 56 F2 | 	cmps	local03, #0 wc
24e1c     BC FF 9F 3D |  if_ae	jmp	#LR__3560
24e20     A7 F0 03 F6 | 	mov	ptra, fp
24e24     B2 00 A0 FD | 	call	#popregs_
24e28                 | __system___gc_markcog_ret
24e28     2D 00 64 FD | 	ret
24e2c                 | 
24e2c                 | __system__opendir
24e2c     06 4A 05 F6 | 	mov	COUNT_, #6
24e30     A8 00 A0 FD | 	call	#pushregs_
24e34     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24e38     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24e3c     09 15 02 F6 | 	mov	arg02, arg01
24e40     0F 13 02 F6 | 	mov	arg01, local01
24e44     00 16 06 F6 | 	mov	arg03, #0
24e48     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24e4c     84 C2 BF FD | 	call	#__system____getvfsforfile
24e50     FD 20 0A F6 | 	mov	local02, result1 wz
24e54     10 00 90 AD |  if_e	jmp	#LR__3570
24e58     28 20 06 F1 | 	add	local02, #40
24e5c     10 17 0A FB | 	rdlong	arg03, local02 wz
24e60     28 20 86 F1 | 	sub	local02, #40
24e64     14 00 90 5D |  if_ne	jmp	#LR__3571
24e68                 | LR__3570
24e68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e6c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24e70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e74     00 FA 05 F6 | 	mov	result1, #0
24e78     90 00 90 FD | 	jmp	#LR__3573
24e7c                 | LR__3571
24e7c     5C 12 06 F6 | 	mov	arg01, #92
24e80     10 14 06 F6 | 	mov	arg02, #16
24e84     C0 F9 BF FD | 	call	#__system___gc_doalloc
24e88     FD 22 0A F6 | 	mov	local03, result1 wz
24e8c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24e90     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24e94     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24e98     00 FA 05 A6 |  if_e	mov	result1, #0
24e9c     6C 00 90 AD |  if_e	jmp	#LR__3573
24ea0     28 20 06 F1 | 	add	local02, #40
24ea4     10 25 02 FB | 	rdlong	local04, local02
24ea8     12 27 02 F6 | 	mov	local05, local04
24eac     28 20 86 F1 | 	sub	local02, #40
24eb0     13 26 46 F7 | 	zerox	local05, #19
24eb4     14 24 46 F0 | 	shr	local04, #20
24eb8     02 24 66 F0 | 	shl	local04, #2
24ebc     ED 24 02 F1 | 	add	local04, __methods__
24ec0     12 25 02 FB | 	rdlong	local04, local04
24ec4     11 13 02 F6 | 	mov	arg01, local03
24ec8     0F 15 02 F6 | 	mov	arg02, local01
24ecc     F2 28 02 F6 | 	mov	local06, objptr
24ed0     13 E5 01 F6 | 	mov	objptr, local05
24ed4     2D 24 62 FD | 	call	local04
24ed8     14 E5 01 F6 | 	mov	objptr, local06
24edc     FD 16 0A F6 | 	mov	arg03, result1 wz
24ee0     20 00 90 AD |  if_e	jmp	#LR__3572
24ee4     00 16 4E F2 | 	cmps	arg03, #0 wz
24ee8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24eec     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24ef0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24ef4     11 13 02 F6 | 	mov	arg01, local03
24ef8     58 FA BF FD | 	call	#__system___gc_free
24efc     00 FA 05 F6 | 	mov	result1, #0
24f00     08 00 90 FD | 	jmp	#LR__3573
24f04                 | LR__3572
24f04     11 21 62 FC | 	wrlong	local02, local03
24f08     11 FB 01 F6 | 	mov	result1, local03
24f0c                 | LR__3573
24f0c     A7 F0 03 F6 | 	mov	ptra, fp
24f10     B2 00 A0 FD | 	call	#popregs_
24f14                 | __system__opendir_ret
24f14     2D 00 64 FD | 	ret
24f18                 | 
24f18                 | __system__closedir
24f18     04 4A 05 F6 | 	mov	COUNT_, #4
24f1c     A8 00 A0 FD | 	call	#pushregs_
24f20     09 1F 02 F6 | 	mov	local01, arg01
24f24     0F 13 02 FB | 	rdlong	arg01, local01
24f28     2C 12 06 F1 | 	add	arg01, #44
24f2c     09 21 02 FB | 	rdlong	local02, arg01
24f30     10 23 02 F6 | 	mov	local03, local02
24f34     13 22 46 F7 | 	zerox	local03, #19
24f38     14 20 46 F0 | 	shr	local02, #20
24f3c     02 20 66 F0 | 	shl	local02, #2
24f40     ED 20 02 F1 | 	add	local02, __methods__
24f44     10 21 02 FB | 	rdlong	local02, local02
24f48     0F 13 02 F6 | 	mov	arg01, local01
24f4c     F2 24 02 F6 | 	mov	local04, objptr
24f50     11 E5 01 F6 | 	mov	objptr, local03
24f54     2D 20 62 FD | 	call	local02
24f58     12 E5 01 F6 | 	mov	objptr, local04
24f5c     FD 24 02 F6 | 	mov	local04, result1
24f60     0F 13 02 F6 | 	mov	arg01, local01
24f64     EC F9 BF FD | 	call	#__system___gc_free
24f68     00 24 4E F2 | 	cmps	local04, #0 wz
24f6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f70     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
24f74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f78     01 FA 65 56 |  if_ne	neg	result1, #1
24f7c     00 FA 05 A6 |  if_e	mov	result1, #0
24f80     A7 F0 03 F6 | 	mov	ptra, fp
24f84     B2 00 A0 FD | 	call	#popregs_
24f88                 | __system__closedir_ret
24f88     2D 00 64 FD | 	ret
24f8c                 | 
24f8c                 | __system__readdir
24f8c     04 4A 05 F6 | 	mov	COUNT_, #4
24f90     A8 00 A0 FD | 	call	#pushregs_
24f94     09 15 0A FB | 	rdlong	arg02, arg01 wz
24f98     08 12 06 F1 | 	add	arg01, #8
24f9c     09 1F 02 F6 | 	mov	local01, arg01
24fa0     08 12 86 F1 | 	sub	arg01, #8
24fa4     00 FA 05 A6 |  if_e	mov	result1, #0
24fa8     5C 00 90 AD |  if_e	jmp	#LR__3581
24fac     30 14 06 F1 | 	add	arg02, #48
24fb0     0A 21 02 FB | 	rdlong	local02, arg02
24fb4     10 23 02 F6 | 	mov	local03, local02
24fb8     13 22 46 F7 | 	zerox	local03, #19
24fbc     14 20 46 F0 | 	shr	local02, #20
24fc0     02 20 66 F0 | 	shl	local02, #2
24fc4     ED 20 02 F1 | 	add	local02, __methods__
24fc8     10 21 02 FB | 	rdlong	local02, local02
24fcc     0F 15 02 F6 | 	mov	arg02, local01
24fd0     F2 24 02 F6 | 	mov	local04, objptr
24fd4     11 E5 01 F6 | 	mov	objptr, local03
24fd8     2D 20 62 FD | 	call	local02
24fdc     12 E5 01 F6 | 	mov	objptr, local04
24fe0     00 FA 4D F2 | 	cmps	result1, #0 wz
24fe4     1C 00 90 AD |  if_e	jmp	#LR__3580
24fe8     01 FA 55 F2 | 	cmps	result1, #1 wc
24fec     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
24ff0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24ff4     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
24ff8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24ffc     00 FA 05 F6 | 	mov	result1, #0
25000     04 00 90 FD | 	jmp	#LR__3581
25004                 | LR__3580
25004     0F FB 01 F6 | 	mov	result1, local01
25008                 | LR__3581
25008     A7 F0 03 F6 | 	mov	ptra, fp
2500c     B2 00 A0 FD | 	call	#popregs_
25010                 | __system__readdir_ret
25010     2D 00 64 FD | 	ret
25014                 | 
25014                 | __system___openraw
25014     15 4A 05 F6 | 	mov	COUNT_, #21
25018     A8 00 A0 FD | 	call	#pushregs_
2501c     09 1F 02 F6 | 	mov	local01, arg01
25020     0A 21 02 F6 | 	mov	local02, arg02
25024     0B 23 02 F6 | 	mov	local03, arg03
25028     0C 25 02 F6 | 	mov	local04, arg04
2502c     04 26 06 F6 | 	mov	local05, #4
25030     0F 29 02 F6 | 	mov	local06, local01
25034     00 2A 06 F6 | 	mov	local07, #0
25038     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2503c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
25040     16 13 02 F6 | 	mov	arg01, local08
25044     10 15 02 F6 | 	mov	arg02, local02
25048     00 16 06 F6 | 	mov	arg03, #0
2504c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25050     80 C0 BF FD | 	call	#__system____getvfsforfile
25054     FD 2E 0A F6 | 	mov	local09, result1 wz
25058     10 00 90 AD |  if_e	jmp	#LR__3590
2505c     20 2E 06 F1 | 	add	local09, #32
25060     17 FB 09 FB | 	rdlong	result1, local09 wz
25064     20 2E 86 F1 | 	sub	local09, #32
25068     14 00 90 5D |  if_ne	jmp	#LR__3591
2506c                 | LR__3590
2506c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25070     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25074     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25078     01 FA 65 F6 | 	neg	result1, #1
2507c     8C 02 90 FD | 	jmp	#LR__3604
25080                 | LR__3591
25080     14 13 02 F6 | 	mov	arg01, local06
25084     00 14 06 F6 | 	mov	arg02, #0
25088     34 16 06 F6 | 	mov	arg03, #52
2508c     09 31 02 F6 | 	mov	local10, arg01
25090     98 00 A0 FD | 	call	#\builtin_bytefill_
25094     20 2E 06 F1 | 	add	local09, #32
25098     17 33 02 FB | 	rdlong	local11, local09
2509c     19 35 02 F6 | 	mov	local12, local11
250a0     19 37 02 F6 | 	mov	local13, local11
250a4     20 2E 86 F1 | 	sub	local09, #32
250a8     1B 39 02 F6 | 	mov	local14, local13
250ac     13 34 46 F7 | 	zerox	local12, #19
250b0     14 38 46 F0 | 	shr	local14, #20
250b4     02 38 66 F0 | 	shl	local14, #2
250b8     ED 38 02 F1 | 	add	local14, __methods__
250bc     1C 39 02 FB | 	rdlong	local14, local14
250c0     14 3B 02 F6 | 	mov	local15, local06
250c4     16 3D 02 F6 | 	mov	local16, local08
250c8     11 3F 02 F6 | 	mov	local17, local03
250cc     1D 13 02 F6 | 	mov	arg01, local15
250d0     1E 15 02 F6 | 	mov	arg02, local16
250d4     1F 17 02 F6 | 	mov	arg03, local17
250d8     F2 40 02 F6 | 	mov	local18, objptr
250dc     1A E5 01 F6 | 	mov	objptr, local12
250e0     2D 38 62 FD | 	call	local14
250e4     20 E5 01 F6 | 	mov	objptr, local18
250e8     FD 42 0A F6 | 	mov	local19, result1 wz
250ec     04 22 CE 57 |  if_ne	test	local03, #4 wz
250f0     58 00 90 AD |  if_e	jmp	#LR__3592
250f4     24 2E 06 F1 | 	add	local09, #36
250f8     17 33 02 FB | 	rdlong	local11, local09
250fc     19 35 02 F6 | 	mov	local12, local11
25100     19 37 02 F6 | 	mov	local13, local11
25104     24 2E 86 F1 | 	sub	local09, #36
25108     1B 39 02 F6 | 	mov	local14, local13
2510c     13 34 46 F7 | 	zerox	local12, #19
25110     14 38 46 F0 | 	shr	local14, #20
25114     02 38 66 F0 | 	shl	local14, #2
25118     ED 38 02 F1 | 	add	local14, __methods__
2511c     1C 39 02 FB | 	rdlong	local14, local14
25120     14 3B 02 F6 | 	mov	local15, local06
25124     16 3D 02 F6 | 	mov	local16, local08
25128     12 3F 02 F6 | 	mov	local17, local04
2512c     1D 13 02 F6 | 	mov	arg01, local15
25130     1E 15 02 F6 | 	mov	arg02, local16
25134     1F 17 02 F6 | 	mov	arg03, local17
25138     F2 40 02 F6 | 	mov	local18, objptr
2513c     1A E5 01 F6 | 	mov	objptr, local12
25140     2D 38 62 FD | 	call	local14
25144     20 E5 01 F6 | 	mov	objptr, local18
25148     FD 42 02 F6 | 	mov	local19, result1
2514c                 | LR__3592
2514c     00 42 0E F2 | 	cmp	local19, #0 wz
25150     8C 01 90 5D |  if_ne	jmp	#LR__3602
25154     11 45 02 F6 | 	mov	local20, local03
25158     03 44 0E F5 | 	and	local20, #3 wz
2515c     02 26 46 55 |  if_ne	or	local05, #2
25160     01 44 0E F2 | 	cmp	local20, #1 wz
25164     01 26 46 55 |  if_ne	or	local05, #1
25168     20 22 CE F7 | 	test	local03, #32 wz
2516c     C0 26 46 55 |  if_ne	or	local05, #192
25170     08 28 06 F1 | 	add	local06, #8
25174     14 27 62 FC | 	wrlong	local05, local06
25178     0C 28 06 F1 | 	add	local06, #12
2517c     14 47 0A FB | 	rdlong	local21, local06 wz
25180     14 28 86 F1 | 	sub	local06, #20
25184     18 00 90 5D |  if_ne	jmp	#LR__3593
25188     04 2E 06 F1 | 	add	local09, #4
2518c     17 47 02 FB | 	rdlong	local21, local09
25190     04 2E 86 F1 | 	sub	local09, #4
25194     14 28 06 F1 | 	add	local06, #20
25198     14 47 62 FC | 	wrlong	local21, local06
2519c     14 28 86 F1 | 	sub	local06, #20
251a0                 | LR__3593
251a0     18 28 06 F1 | 	add	local06, #24
251a4     14 47 0A FB | 	rdlong	local21, local06 wz
251a8     18 28 86 F1 | 	sub	local06, #24
251ac     18 00 90 5D |  if_ne	jmp	#LR__3594
251b0     08 2E 06 F1 | 	add	local09, #8
251b4     17 47 02 FB | 	rdlong	local21, local09
251b8     08 2E 86 F1 | 	sub	local09, #8
251bc     18 28 06 F1 | 	add	local06, #24
251c0     14 47 62 FC | 	wrlong	local21, local06
251c4     18 28 86 F1 | 	sub	local06, #24
251c8                 | LR__3594
251c8     24 28 06 F1 | 	add	local06, #36
251cc     14 47 0A FB | 	rdlong	local21, local06 wz
251d0     24 28 86 F1 | 	sub	local06, #36
251d4     17 47 02 AB |  if_e	rdlong	local21, local09
251d8     24 28 06 A1 |  if_e	add	local06, #36
251dc     14 47 62 AC |  if_e	wrlong	local21, local06
251e0     24 28 86 A1 |  if_e	sub	local06, #36
251e4     28 28 06 F1 | 	add	local06, #40
251e8     14 47 0A FB | 	rdlong	local21, local06 wz
251ec     28 28 86 F1 | 	sub	local06, #40
251f0     18 00 90 5D |  if_ne	jmp	#LR__3595
251f4     10 2E 06 F1 | 	add	local09, #16
251f8     17 47 02 FB | 	rdlong	local21, local09
251fc     10 2E 86 F1 | 	sub	local09, #16
25200     28 28 06 F1 | 	add	local06, #40
25204     14 47 62 FC | 	wrlong	local21, local06
25208     28 28 86 F1 | 	sub	local06, #40
2520c                 | LR__3595
2520c     30 28 06 F1 | 	add	local06, #48
25210     14 47 0A FB | 	rdlong	local21, local06 wz
25214     30 28 86 F1 | 	sub	local06, #48
25218     18 00 90 5D |  if_ne	jmp	#LR__3596
2521c     0C 2E 06 F1 | 	add	local09, #12
25220     17 47 02 FB | 	rdlong	local21, local09
25224     0C 2E 86 F1 | 	sub	local09, #12
25228     30 28 06 F1 | 	add	local06, #48
2522c     14 47 62 FC | 	wrlong	local21, local06
25230     30 28 86 F1 | 	sub	local06, #48
25234                 | LR__3596
25234     1C 28 06 F1 | 	add	local06, #28
25238     14 47 0A FB | 	rdlong	local21, local06 wz
2523c     1C 28 86 F1 | 	sub	local06, #28
25240     1C 00 90 5D |  if_ne	jmp	#LR__3597
25244     01 2A 06 F6 | 	mov	local07, #1
25248     F2 12 02 F6 | 	mov	arg01, objptr
2524c     00 D0 04 FF 
25250     00 12 46 F5 | 	or	arg01, ##161480704
25254     1C 28 06 F1 | 	add	local06, #28
25258     14 13 62 FC | 	wrlong	arg01, local06
2525c     1C 28 86 F1 | 	sub	local06, #28
25260                 | LR__3597
25260     20 28 06 F1 | 	add	local06, #32
25264     14 47 0A FB | 	rdlong	local21, local06 wz
25268     20 28 86 F1 | 	sub	local06, #32
2526c     1C 00 90 5D |  if_ne	jmp	#LR__3598
25270     01 2A 06 F6 | 	mov	local07, #1
25274     F2 12 02 F6 | 	mov	arg01, objptr
25278     00 D8 04 FF 
2527c     00 12 46 F5 | 	or	arg01, ##162529280
25280     20 28 06 F1 | 	add	local06, #32
25284     14 13 62 FC | 	wrlong	arg01, local06
25288     20 28 86 F1 | 	sub	local06, #32
2528c                 | LR__3598
2528c     2C 28 06 F1 | 	add	local06, #44
25290     14 47 0A FB | 	rdlong	local21, local06 wz
25294     2C 28 86 F1 | 	sub	local06, #44
25298     44 00 90 5D |  if_ne	jmp	#LR__3601
2529c     14 2E 06 F1 | 	add	local09, #20
252a0     17 47 0A FB | 	rdlong	local21, local09 wz
252a4     14 2E 86 F1 | 	sub	local09, #20
252a8     18 00 90 AD |  if_e	jmp	#LR__3599
252ac     14 2E 06 F1 | 	add	local09, #20
252b0     17 47 02 FB | 	rdlong	local21, local09
252b4     2C 28 06 F1 | 	add	local06, #44
252b8     14 47 62 FC | 	wrlong	local21, local06
252bc     2C 28 86 F1 | 	sub	local06, #44
252c0     1C 00 90 FD | 	jmp	#LR__3600
252c4                 | LR__3599
252c4     01 2A 06 F6 | 	mov	local07, #1
252c8     F2 12 02 F6 | 	mov	arg01, objptr
252cc     00 E0 04 FF 
252d0     00 12 46 F5 | 	or	arg01, ##163577856
252d4     2C 28 06 F1 | 	add	local06, #44
252d8     14 13 62 FC | 	wrlong	arg01, local06
252dc     2C 28 86 F1 | 	sub	local06, #44
252e0                 | LR__3600
252e0                 | LR__3601
252e0                 | LR__3602
252e0     00 2A 0E F2 | 	cmp	local07, #0 wz
252e4     14 13 02 56 |  if_ne	mov	arg01, local06
252e8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
252ec     00 42 0E F2 | 	cmp	local19, #0 wz
252f0     00 12 06 A6 |  if_e	mov	arg01, #0
252f4     10 00 90 5D |  if_ne	jmp	#LR__3603
252f8     00 12 4E F2 | 	cmps	arg01, #0 wz
252fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25300     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25304     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25308                 | LR__3603
25308     21 FB 01 F6 | 	mov	result1, local19
2530c                 | LR__3604
2530c     A7 F0 03 F6 | 	mov	ptra, fp
25310     B2 00 A0 FD | 	call	#popregs_
25314                 | __system___openraw_ret
25314     2D 00 64 FD | 	ret
25318                 | 
25318                 | __system___closeraw
25318     05 4A 05 F6 | 	mov	COUNT_, #5
2531c     A8 00 A0 FD | 	call	#pushregs_
25320     09 1F 02 F6 | 	mov	local01, arg01
25324     00 20 06 F6 | 	mov	local02, #0
25328     08 1E 06 F1 | 	add	local01, #8
2532c     0F FB 09 FB | 	rdlong	result1, local01 wz
25330     08 1E 86 F1 | 	sub	local01, #8
25334     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25338     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2533c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25340     01 FA 65 A6 |  if_e	neg	result1, #1
25344     A8 00 90 AD |  if_e	jmp	#LR__3612
25348     2C 1E 06 F1 | 	add	local01, #44
2534c     0F FB 09 FB | 	rdlong	result1, local01 wz
25350     2C 1E 86 F1 | 	sub	local01, #44
25354     38 00 90 AD |  if_e	jmp	#LR__3610
25358     2C 1E 06 F1 | 	add	local01, #44
2535c     0F 23 02 FB | 	rdlong	local03, local01
25360     11 25 02 F6 | 	mov	local04, local03
25364     2C 1E 86 F1 | 	sub	local01, #44
25368     13 24 46 F7 | 	zerox	local04, #19
2536c     14 22 46 F0 | 	shr	local03, #20
25370     02 22 66 F0 | 	shl	local03, #2
25374     ED 22 02 F1 | 	add	local03, __methods__
25378     11 23 02 FB | 	rdlong	local03, local03
2537c     0F 13 02 F6 | 	mov	arg01, local01
25380     F2 26 02 F6 | 	mov	local05, objptr
25384     12 E5 01 F6 | 	mov	objptr, local04
25388     2D 22 62 FD | 	call	local03
2538c     13 E5 01 F6 | 	mov	objptr, local05
25390                 | LR__3610
25390     24 1E 06 F1 | 	add	local01, #36
25394     0F 27 0A FB | 	rdlong	local05, local01 wz
25398     24 1E 86 F1 | 	sub	local01, #36
2539c     3C 00 90 AD |  if_e	jmp	#LR__3611
253a0     24 1E 06 F1 | 	add	local01, #36
253a4     0F 23 02 FB | 	rdlong	local03, local01
253a8     11 25 02 F6 | 	mov	local04, local03
253ac     24 1E 86 F1 | 	sub	local01, #36
253b0     13 24 46 F7 | 	zerox	local04, #19
253b4     14 22 46 F0 | 	shr	local03, #20
253b8     02 22 66 F0 | 	shl	local03, #2
253bc     ED 22 02 F1 | 	add	local03, __methods__
253c0     11 23 02 FB | 	rdlong	local03, local03
253c4     0F 13 02 F6 | 	mov	arg01, local01
253c8     F2 26 02 F6 | 	mov	local05, objptr
253cc     12 E5 01 F6 | 	mov	objptr, local04
253d0     2D 22 62 FD | 	call	local03
253d4     13 E5 01 F6 | 	mov	objptr, local05
253d8     FD 20 02 F6 | 	mov	local02, result1
253dc                 | LR__3611
253dc     0F 13 02 F6 | 	mov	arg01, local01
253e0     00 14 06 F6 | 	mov	arg02, #0
253e4     34 16 06 F6 | 	mov	arg03, #52
253e8     98 00 A0 FD | 	call	#\builtin_bytefill_
253ec     10 FB 01 F6 | 	mov	result1, local02
253f0                 | LR__3612
253f0     A7 F0 03 F6 | 	mov	ptra, fp
253f4     B2 00 A0 FD | 	call	#popregs_
253f8                 | __system___closeraw_ret
253f8     2D 00 64 FD | 	ret
253fc                 | 
253fc                 | __system___vfs_open_sdcardx
253fc     0B 4A 05 F6 | 	mov	COUNT_, #11
25400     A8 00 A0 FD | 	call	#pushregs_
25404     09 23 02 F6 | 	mov	local03, arg01
25408     0A 25 02 F6 | 	mov	local04, arg02
2540c     0B 27 02 F6 | 	mov	local05, arg03
25410     0C 29 02 F6 | 	mov	local06, arg04
25414     01 00 00 FF 
25418     24 12 06 F6 | 	mov	arg01, ##548
2541c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
25420     FD 2A 02 F6 | 	mov	local07, result1
25424     01 00 00 FF 
25428     34 12 06 F6 | 	mov	arg01, ##564
2542c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
25430     FD 2C 02 F6 | 	mov	local08, result1
25434     11 19 02 F6 | 	mov	arg04, local03
25438     1F 18 C6 F0 | 	sar	arg04, #31
2543c     11 17 02 F6 | 	mov	arg03, local03
25440     01 12 06 F6 | 	mov	arg01, #1
25444     00 14 06 F6 | 	mov	arg02, #0
25448     EC DB BF FD | 	call	#__system___int64_shl
2544c     FD 1E 02 F6 | 	mov	local01, result1
25450     FE 2E 02 F6 | 	mov	local09, result2
25454     12 19 02 F6 | 	mov	arg04, local04
25458     1F 18 C6 F0 | 	sar	arg04, #31
2545c     12 17 02 F6 | 	mov	arg03, local04
25460     01 12 06 F6 | 	mov	arg01, #1
25464     00 14 06 F6 | 	mov	arg02, #0
25468     CC DB BF FD | 	call	#__system___int64_shl
2546c     FD 1E 42 F5 | 	or	local01, result1
25470     FE 2E 42 F5 | 	or	local09, result2
25474     13 19 02 F6 | 	mov	arg04, local05
25478     1F 18 C6 F0 | 	sar	arg04, #31
2547c     13 17 02 F6 | 	mov	arg03, local05
25480     01 12 06 F6 | 	mov	arg01, #1
25484     00 14 06 F6 | 	mov	arg02, #0
25488     AC DB BF FD | 	call	#__system___int64_shl
2548c     FD 1E 42 F5 | 	or	local01, result1
25490     FE 2E 42 F5 | 	or	local09, result2
25494     14 19 02 F6 | 	mov	arg04, local06
25498     1F 18 C6 F0 | 	sar	arg04, #31
2549c     14 17 02 F6 | 	mov	arg03, local06
254a0     01 12 06 F6 | 	mov	arg01, #1
254a4     00 14 06 F6 | 	mov	arg02, #0
254a8     8C DB BF FD | 	call	#__system___int64_shl
254ac     17 15 02 F6 | 	mov	arg02, local09
254b0     FD 1E 42 F5 | 	or	local01, result1
254b4     0A FD 41 F5 | 	or	result2, arg02
254b8     FE 20 02 F6 | 	mov	local02, result2
254bc     0F 13 02 F6 | 	mov	arg01, local01
254c0     10 15 02 F6 | 	mov	arg02, local02
254c4     A8 DB BF FD | 	call	#__system___usepins
254c8     00 FA 0D F2 | 	cmp	result1, #0 wz
254cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
254d0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
254d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
254d8     00 FA 05 A6 |  if_e	mov	result1, #0
254dc     B4 00 90 AD |  if_e	jmp	#LR__3622
254e0     0F 31 02 F6 | 	mov	local10, local01
254e4     10 2F 02 F6 | 	mov	local09, local02
254e8     01 00 00 FF 
254ec     08 2A 06 F1 | 	add	local07, ##520
254f0     15 31 62 FC | 	wrlong	local10, local07
254f4     04 2A 06 F1 | 	add	local07, #4
254f8     15 2F 62 FC | 	wrlong	local09, local07
254fc     01 00 00 FF 
25500     0C 2A 86 F1 | 	sub	local07, ##524
25504     14 1B 02 F6 | 	mov	arg05, local06
25508     00 12 06 F6 | 	mov	arg01, #0
2550c     11 15 02 F6 | 	mov	arg02, local03
25510     12 17 02 F6 | 	mov	arg03, local04
25514     13 19 02 F6 | 	mov	arg04, local05
25518     F2 30 02 F6 | 	mov	local10, objptr
2551c     15 E5 01 F6 | 	mov	objptr, local07
25520     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
25524     18 E5 01 F6 | 	mov	objptr, local10
25528     FD 32 0A F6 | 	mov	local11, result1 wz
2552c     24 00 90 5D |  if_ne	jmp	#LR__3620
25530     80 01 00 FF 
25534     EE 15 06 F6 | 	mov	arg02, ##@LR__5037
25538     16 13 02 F6 | 	mov	arg01, local08
2553c     00 16 06 F6 | 	mov	arg03, #0
25540     F2 32 02 F6 | 	mov	local11, objptr
25544     15 E5 01 F6 | 	mov	objptr, local07
25548     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2554c     19 E5 01 F6 | 	mov	objptr, local11
25550     FD 32 02 F6 | 	mov	local11, result1
25554                 | LR__3620
25554     00 32 0E F2 | 	cmp	local11, #0 wz
25558     24 00 90 AD |  if_e	jmp	#LR__3621
2555c     0F 13 02 F6 | 	mov	arg01, local01
25560     10 15 02 F6 | 	mov	arg02, local02
25564     5C DB BF FD | 	call	#__system___freepins
25568     19 13 6A F6 | 	neg	arg01, local11 wz
2556c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25570     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25574     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25578     00 FA 05 F6 | 	mov	result1, #0
2557c     14 00 90 FD | 	jmp	#LR__3622
25580                 | LR__3621
25580     15 13 02 F6 | 	mov	arg01, local07
25584     F2 32 02 F6 | 	mov	local11, objptr
25588     15 E5 01 F6 | 	mov	objptr, local07
2558c     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25590     19 E5 01 F6 | 	mov	objptr, local11
25594                 | LR__3622
25594     A7 F0 03 F6 | 	mov	ptra, fp
25598     B2 00 A0 FD | 	call	#popregs_
2559c                 | __system___vfs_open_sdcardx_ret
2559c     2D 00 64 FD | 	ret
255a0                 | 
255a0                 | __system____default_getc
255a0     03 4A 05 F6 | 	mov	COUNT_, #3
255a4     A8 00 A0 FD | 	call	#pushregs_
255a8     09 1F 02 F6 | 	mov	local01, arg01
255ac     0F 21 02 FB | 	rdlong	local02, local01
255b0     08 20 06 F1 | 	add	local02, #8
255b4     10 23 02 FB | 	rdlong	local03, local02
255b8     02 22 CE F7 | 	test	local03, #2 wz
255bc     0F 13 02 56 |  if_ne	mov	arg01, local01
255c0     00 01 B0 5D |  if_ne	call	#__system____default_flush
255c4     10 23 02 FB | 	rdlong	local03, local02
255c8     01 22 46 F5 | 	or	local03, #1
255cc     10 23 62 FC | 	wrlong	local03, local02
255d0     08 20 86 F1 | 	sub	local02, #8
255d4     10 23 0A FB | 	rdlong	local03, local02 wz
255d8     0C 00 90 5D |  if_ne	jmp	#LR__3630
255dc     0F 13 02 F6 | 	mov	arg01, local01
255e0     68 18 B0 FD | 	call	#__system____default_filbuf
255e4     FD 22 02 F6 | 	mov	local03, result1
255e8                 | LR__3630
255e8     01 22 56 F2 | 	cmps	local03, #1 wc
255ec     01 FA 65 C6 |  if_b	neg	result1, #1
255f0     1C 00 90 CD |  if_b	jmp	#LR__3631
255f4     01 22 86 F1 | 	sub	local03, #1
255f8     10 23 62 FC | 	wrlong	local03, local02
255fc     04 20 06 F1 | 	add	local02, #4
25600     10 23 02 FB | 	rdlong	local03, local02
25604     11 FB C1 FA | 	rdbyte	result1, local03
25608     01 22 06 F1 | 	add	local03, #1
2560c     10 23 62 FC | 	wrlong	local03, local02
25610                 | LR__3631
25610     A7 F0 03 F6 | 	mov	ptra, fp
25614     B2 00 A0 FD | 	call	#popregs_
25618                 | __system____default_getc_ret
25618     2D 00 64 FD | 	ret
2561c                 | 
2561c                 | __system____default_putc
2561c     06 4A 05 F6 | 	mov	COUNT_, #6
25620     A8 00 A0 FD | 	call	#pushregs_
25624     09 1F 02 F6 | 	mov	local01, arg01
25628     0A 21 02 F6 | 	mov	local02, arg02
2562c     10 23 02 FB | 	rdlong	local03, local02
25630     08 22 06 F1 | 	add	local03, #8
25634     11 FB 01 FB | 	rdlong	result1, local03
25638     01 FA CD F7 | 	test	result1, #1 wz
2563c     10 13 02 56 |  if_ne	mov	arg01, local02
25640     80 00 B0 5D |  if_ne	call	#__system____default_flush
25644     11 25 02 FB | 	rdlong	local04, local03
25648     02 24 46 F5 | 	or	local04, #2
2564c     11 25 62 FC | 	wrlong	local04, local03
25650     08 22 86 F1 | 	sub	local03, #8
25654     11 27 02 FB | 	rdlong	local05, local03
25658     10 22 06 F1 | 	add	local03, #16
2565c     11 15 02 FB | 	rdlong	arg02, local03
25660     10 22 86 F1 | 	sub	local03, #16
25664     13 FB 01 F6 | 	mov	result1, local05
25668     0A FB 01 F1 | 	add	result1, arg02
2566c     FD 1E 42 FC | 	wrbyte	local01, result1
25670     0F 1F E2 F8 | 	getbyte	local01, local01, #0
25674     01 26 06 F1 | 	add	local05, #1
25678     11 27 62 FC | 	wrlong	local05, local03
2567c     06 20 06 F1 | 	add	local02, #6
25680     10 29 EA FA | 	rdword	local06, local02 wz
25684     06 20 86 F1 | 	sub	local02, #6
25688     0C 22 06 51 |  if_ne	add	local03, #12
2568c     11 25 02 5B |  if_ne	rdlong	local04, local03
25690     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
25694     0C 00 90 AD |  if_e	jmp	#LR__3640
25698     0A 1E 0E F2 | 	cmp	local01, #10 wz
2569c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
256a0     10 00 90 5D |  if_ne	jmp	#LR__3641
256a4                 | LR__3640
256a4     10 13 02 F6 | 	mov	arg01, local02
256a8     18 00 B0 FD | 	call	#__system____default_flush
256ac     00 FA 0D F2 | 	cmp	result1, #0 wz
256b0     01 1E 66 56 |  if_ne	neg	local01, #1
256b4                 | LR__3641
256b4     0F FB 01 F6 | 	mov	result1, local01
256b8     A7 F0 03 F6 | 	mov	ptra, fp
256bc     B2 00 A0 FD | 	call	#popregs_
256c0                 | __system____default_putc_ret
256c0     2D 00 64 FD | 	ret
256c4                 | 
256c4                 | __system____default_flush
256c4     06 4A 05 F6 | 	mov	COUNT_, #6
256c8     A8 00 A0 FD | 	call	#pushregs_
256cc     09 1F 02 F6 | 	mov	local01, arg01
256d0     0F 21 02 FB | 	rdlong	local02, local01
256d4     10 23 02 FB | 	rdlong	local03, local02
256d8     08 20 06 F1 | 	add	local02, #8
256dc     10 FB 01 FB | 	rdlong	result1, local02
256e0     08 20 86 F1 | 	sub	local02, #8
256e4     02 FA CD F7 | 	test	result1, #2 wz
256e8     D0 00 90 AD |  if_e	jmp	#LR__3652
256ec     01 22 56 F2 | 	cmps	local03, #1 wc
256f0     20 01 90 CD |  if_b	jmp	#LR__3654
256f4     08 1E 06 F1 | 	add	local01, #8
256f8     0F FB 01 FB | 	rdlong	result1, local01
256fc     08 1E 86 F1 | 	sub	local01, #8
25700     40 FA CD F7 | 	test	result1, #64 wz
25704     68 00 90 AD |  if_e	jmp	#LR__3651
25708     08 1E 06 F1 | 	add	local01, #8
2570c     0F 17 02 FB | 	rdlong	arg03, local01
25710     08 1E 86 F1 | 	sub	local01, #8
25714     80 16 CE F7 | 	test	arg03, #128 wz
25718     54 00 90 AD |  if_e	jmp	#LR__3650
2571c     30 1E 06 F1 | 	add	local01, #48
25720     0F 25 02 FB | 	rdlong	local04, local01
25724     12 27 02 F6 | 	mov	local05, local04
25728     30 1E 86 F1 | 	sub	local01, #48
2572c     13 26 46 F7 | 	zerox	local05, #19
25730     14 24 46 F0 | 	shr	local04, #20
25734     02 24 66 F0 | 	shl	local04, #2
25738     ED 24 02 F1 | 	add	local04, __methods__
2573c     12 25 02 FB | 	rdlong	local04, local04
25740     0F 13 02 F6 | 	mov	arg01, local01
25744     00 14 06 F6 | 	mov	arg02, #0
25748     02 16 06 F6 | 	mov	arg03, #2
2574c     F2 28 02 F6 | 	mov	local06, objptr
25750     13 E5 01 F6 | 	mov	objptr, local05
25754     2D 24 62 FD | 	call	local04
25758     14 E5 01 F6 | 	mov	objptr, local06
2575c     08 1E 06 F1 | 	add	local01, #8
25760     0F 29 02 FB | 	rdlong	local06, local01
25764     80 28 26 F5 | 	andn	local06, #128
25768     0F 29 62 FC | 	wrlong	local06, local01
2576c     08 1E 86 F1 | 	sub	local01, #8
25770                 | LR__3650
25770                 | LR__3651
25770     18 1E 06 F1 | 	add	local01, #24
25774     0F 25 02 FB | 	rdlong	local04, local01
25778     12 27 02 F6 | 	mov	local05, local04
2577c     18 1E 86 F1 | 	sub	local01, #24
25780     13 26 46 F7 | 	zerox	local05, #19
25784     14 24 46 F0 | 	shr	local04, #20
25788     02 24 66 F0 | 	shl	local04, #2
2578c     ED 24 02 F1 | 	add	local04, __methods__
25790     12 25 02 FB | 	rdlong	local04, local04
25794     10 20 06 F1 | 	add	local02, #16
25798     10 15 02 FB | 	rdlong	arg02, local02
2579c     10 20 86 F1 | 	sub	local02, #16
257a0     0F 13 02 F6 | 	mov	arg01, local01
257a4     11 17 02 F6 | 	mov	arg03, local03
257a8     F2 28 02 F6 | 	mov	local06, objptr
257ac     13 E5 01 F6 | 	mov	objptr, local05
257b0     2D 24 62 FD | 	call	local04
257b4     14 E5 01 F6 | 	mov	objptr, local06
257b8     58 00 90 FD | 	jmp	#LR__3654
257bc                 | LR__3652
257bc     08 20 06 F1 | 	add	local02, #8
257c0     10 29 02 FB | 	rdlong	local06, local02
257c4     08 20 86 F1 | 	sub	local02, #8
257c8     01 28 CE F7 | 	test	local06, #1 wz
257cc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
257d0     40 00 90 AD |  if_e	jmp	#LR__3653
257d4     30 1E 06 F1 | 	add	local01, #48
257d8     0F 25 02 FB | 	rdlong	local04, local01
257dc     12 27 02 F6 | 	mov	local05, local04
257e0     30 1E 86 F1 | 	sub	local01, #48
257e4     13 26 46 F7 | 	zerox	local05, #19
257e8     14 24 46 F0 | 	shr	local04, #20
257ec     02 24 66 F0 | 	shl	local04, #2
257f0     ED 24 02 F1 | 	add	local04, __methods__
257f4     12 25 02 FB | 	rdlong	local04, local04
257f8     0F 13 02 F6 | 	mov	arg01, local01
257fc     11 15 62 F6 | 	neg	arg02, local03
25800     01 16 06 F6 | 	mov	arg03, #1
25804     F2 28 02 F6 | 	mov	local06, objptr
25808     13 E5 01 F6 | 	mov	objptr, local05
2580c     2D 24 62 FD | 	call	local04
25810     14 E5 01 F6 | 	mov	objptr, local06
25814                 | LR__3653
25814                 | LR__3654
25814     10 01 68 FC | 	wrlong	#0, local02
25818     04 20 06 F1 | 	add	local02, #4
2581c     10 01 68 FC | 	wrlong	#0, local02
25820     04 20 06 F1 | 	add	local02, #4
25824     10 01 68 FC | 	wrlong	#0, local02
25828     00 FA 05 F6 | 	mov	result1, #0
2582c     A7 F0 03 F6 | 	mov	ptra, fp
25830     B2 00 A0 FD | 	call	#popregs_
25834                 | __system____default_flush_ret
25834     2D 00 64 FD | 	ret
25838                 | 
25838                 | __system____default_buffer_init
25838     02 4A 05 F6 | 	mov	COUNT_, #2
2583c     A8 00 A0 FD | 	call	#pushregs_
25840     09 1F 02 F6 | 	mov	local01, arg01
25844     0F 21 02 FB | 	rdlong	local02, local01
25848     0F 13 02 F6 | 	mov	arg01, local01
2584c     34 03 B0 FD | 	call	#__system___isatty
25850     00 FA 0D F2 | 	cmp	result1, #0 wz
25854     06 1E 06 51 |  if_ne	add	local01, #6
25858     0F 0B 58 5C |  if_ne	wrword	#5, local01
2585c     06 1E 06 A1 |  if_e	add	local01, #6
25860     0F 0D 58 AC |  if_e	wrword	#6, local01
25864     14 20 06 F1 | 	add	local02, #20
25868     10 1F 02 F6 | 	mov	local01, local02
2586c     04 20 86 F1 | 	sub	local02, #4
25870     10 1F 62 FC | 	wrlong	local01, local02
25874     04 20 86 F1 | 	sub	local02, #4
25878     02 00 80 FF 
2587c     10 01 68 FC | 	wrlong	##1024, local02
25880     00 FA 05 F6 | 	mov	result1, #0
25884     A7 F0 03 F6 | 	mov	ptra, fp
25888     B2 00 A0 FD | 	call	#popregs_
2588c                 | __system____default_buffer_init_ret
2588c     2D 00 64 FD | 	ret
25890                 | 
25890                 | __system__stat
25890     04 4A 05 F6 | 	mov	COUNT_, #4
25894     A8 00 A0 FD | 	call	#pushregs_
25898     0A 1F 02 F6 | 	mov	local01, arg02
2589c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
258a0     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
258a4     09 15 02 F6 | 	mov	arg02, arg01
258a8     10 13 02 F6 | 	mov	arg01, local02
258ac     00 16 06 F6 | 	mov	arg03, #0
258b0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
258b4     1C B8 BF FD | 	call	#__system____getvfsforfile
258b8     FD 22 0A F6 | 	mov	local03, result1 wz
258bc     10 00 90 AD |  if_e	jmp	#LR__3660
258c0     34 22 06 F1 | 	add	local03, #52
258c4     11 17 0A FB | 	rdlong	arg03, local03 wz
258c8     34 22 86 F1 | 	sub	local03, #52
258cc     14 00 90 5D |  if_ne	jmp	#LR__3661
258d0                 | LR__3660
258d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
258d4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
258d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
258dc     01 FA 65 F6 | 	neg	result1, #1
258e0     68 00 90 FD | 	jmp	#LR__3662
258e4                 | LR__3661
258e4     0F 13 02 F6 | 	mov	arg01, local01
258e8     00 14 06 F6 | 	mov	arg02, #0
258ec     30 16 06 F6 | 	mov	arg03, #48
258f0     09 25 02 F6 | 	mov	local04, arg01
258f4     98 00 A0 FD | 	call	#\builtin_bytefill_
258f8     12 FB 01 F6 | 	mov	result1, local04
258fc     10 13 CA FA | 	rdbyte	arg01, local02 wz
25900     08 1E 06 A1 |  if_e	add	local01, #8
25904     08 00 80 AF 
25908     0F FF 6B AC |  if_e	wrlong	##4607, local01
2590c     00 FA 05 A6 |  if_e	mov	result1, #0
25910     38 00 90 AD |  if_e	jmp	#LR__3662
25914     34 22 06 F1 | 	add	local03, #52
25918     11 23 02 FB | 	rdlong	local03, local03
2591c     11 25 02 F6 | 	mov	local04, local03
25920     13 22 46 F7 | 	zerox	local03, #19
25924     14 24 46 F0 | 	shr	local04, #20
25928     02 24 66 F0 | 	shl	local04, #2
2592c     ED 24 02 F1 | 	add	local04, __methods__
25930     12 25 02 FB | 	rdlong	local04, local04
25934     10 13 02 F6 | 	mov	arg01, local02
25938     0F 15 02 F6 | 	mov	arg02, local01
2593c     F2 20 02 F6 | 	mov	local02, objptr
25940     11 E5 01 F6 | 	mov	objptr, local03
25944     2D 24 62 FD | 	call	local04
25948     10 E5 01 F6 | 	mov	objptr, local02
2594c                 | LR__3662
2594c     A7 F0 03 F6 | 	mov	ptra, fp
25950     B2 00 A0 FD | 	call	#popregs_
25954                 | __system__stat_ret
25954     2D 00 64 FD | 	ret
25958                 | 
25958                 | __system__write
25958     0A 12 16 F2 | 	cmp	arg01, #10 wc
2595c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25960     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25964     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25968     01 FA 65 36 |  if_ae	neg	result1, #1
2596c     20 00 90 3D |  if_ae	jmp	#LR__3670
25970     34 12 06 FD | 	qmul	arg01, #52
25974     02 00 00 FF 
25978     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
2597c     18 12 62 FD | 	getqx	arg01
25980     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25984     02 00 00 FF 
25988     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
2598c     0C 10 B0 FD | 	call	#__system___vfswrite
25990                 | LR__3670
25990                 | __system__write_ret
25990     2D 00 64 FD | 	ret
25994                 | 
25994                 | __system__read
25994     0A 12 16 F2 | 	cmp	arg01, #10 wc
25998     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2599c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
259a0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
259a4     01 FA 65 36 |  if_ae	neg	result1, #1
259a8     20 00 90 3D |  if_ae	jmp	#LR__3680
259ac     34 12 06 FD | 	qmul	arg01, #52
259b0     02 00 00 FF 
259b4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
259b8     18 12 62 FD | 	getqx	arg01
259bc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
259c0     02 00 00 FF 
259c4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
259c8     98 11 B0 FD | 	call	#__system___vfsread
259cc                 | LR__3680
259cc                 | __system__read_ret
259cc     2D 00 64 FD | 	ret
259d0                 | 
259d0                 | __system__close
259d0     0A 12 16 F2 | 	cmp	arg01, #10 wc
259d4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
259d8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
259dc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
259e0     01 FA 65 36 |  if_ae	neg	result1, #1
259e4     20 00 90 3D |  if_ae	jmp	#LR__3690
259e8     34 12 06 FD | 	qmul	arg01, #52
259ec     02 00 00 FF 
259f0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
259f4     18 12 62 FD | 	getqx	arg01
259f8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
259fc     02 00 00 FF 
25a00     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25a04     10 F9 BF FD | 	call	#__system___closeraw
25a08                 | LR__3690
25a08                 | __system__close_ret
25a08     2D 00 64 FD | 	ret
25a0c                 | 
25a0c                 | __system__lseek
25a0c     06 4A 05 F6 | 	mov	COUNT_, #6
25a10     A8 00 A0 FD | 	call	#pushregs_
25a14     0A 12 16 F2 | 	cmp	arg01, #10 wc
25a18     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25a1c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25a20     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25a24     01 FA 65 36 |  if_ae	neg	result1, #1
25a28     C4 00 90 3D |  if_ae	jmp	#LR__3701
25a2c     34 12 06 FD | 	qmul	arg01, #52
25a30     02 00 00 FF 
25a34     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25a38     18 1E 62 FD | 	getqx	local01
25a3c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25a40     30 1E 06 F1 | 	add	local01, #48
25a44     0F 13 0A FB | 	rdlong	arg01, local01 wz
25a48     30 1E 86 F1 | 	sub	local01, #48
25a4c     02 00 00 FF 
25a50     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25a54     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25a58     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25a5c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25a60     01 FA 65 A6 |  if_e	neg	result1, #1
25a64     88 00 90 AD |  if_e	jmp	#LR__3701
25a68     08 1E 06 F1 | 	add	local01, #8
25a6c     0F 21 02 FB | 	rdlong	local02, local01
25a70     08 1E 86 F1 | 	sub	local01, #8
25a74     40 20 CE F7 | 	test	local02, #64 wz
25a78     08 1E 06 51 |  if_ne	add	local01, #8
25a7c     0F 21 02 5B |  if_ne	rdlong	local02, local01
25a80     80 20 46 55 |  if_ne	or	local02, #128
25a84     0F 21 62 5C |  if_ne	wrlong	local02, local01
25a88     08 1E 86 51 |  if_ne	sub	local01, #8
25a8c     30 1E 06 F1 | 	add	local01, #48
25a90     0F 23 02 FB | 	rdlong	local03, local01
25a94     11 25 02 F6 | 	mov	local04, local03
25a98     30 1E 86 F1 | 	sub	local01, #48
25a9c     13 24 46 F7 | 	zerox	local04, #19
25aa0     14 22 46 F0 | 	shr	local03, #20
25aa4     02 22 66 F0 | 	shl	local03, #2
25aa8     ED 22 02 F1 | 	add	local03, __methods__
25aac     11 23 02 FB | 	rdlong	local03, local03
25ab0     0F 13 02 F6 | 	mov	arg01, local01
25ab4     F2 26 02 F6 | 	mov	local05, objptr
25ab8     12 E5 01 F6 | 	mov	objptr, local04
25abc     2D 22 62 FD | 	call	local03
25ac0     13 E5 01 F6 | 	mov	objptr, local05
25ac4     FD 28 02 F6 | 	mov	local06, result1
25ac8     00 28 56 F2 | 	cmps	local06, #0 wc
25acc     1C 00 90 3D |  if_ae	jmp	#LR__3700
25ad0     14 13 6A F6 | 	neg	arg01, local06 wz
25ad4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25ad8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25adc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25ae0     01 FA 65 56 |  if_ne	neg	result1, #1
25ae4     00 FA 05 A6 |  if_e	mov	result1, #0
25ae8     04 00 90 FD | 	jmp	#LR__3701
25aec                 | LR__3700
25aec     14 FB 01 F6 | 	mov	result1, local06
25af0                 | LR__3701
25af0     A7 F0 03 F6 | 	mov	ptra, fp
25af4     B2 00 A0 FD | 	call	#popregs_
25af8                 | __system__lseek_ret
25af8     2D 00 64 FD | 	ret
25afc                 | 
25afc                 | __system___ioctl
25afc     03 4A 05 F6 | 	mov	COUNT_, #3
25b00     A8 00 A0 FD | 	call	#pushregs_
25b04     00 12 4E F2 | 	cmps	arg01, #0 wz
25b08     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25b0c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25b10     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25b14     01 FA 65 A6 |  if_e	neg	result1, #1
25b18     5C 00 90 AD |  if_e	jmp	#LR__3711
25b1c     28 12 06 F1 | 	add	arg01, #40
25b20     09 1F 02 FB | 	rdlong	local01, arg01
25b24     0F 21 02 F6 | 	mov	local02, local01
25b28     28 12 86 F1 | 	sub	arg01, #40
25b2c     13 20 46 F7 | 	zerox	local02, #19
25b30     14 1E 46 F0 | 	shr	local01, #20
25b34     02 1E 66 F0 | 	shl	local01, #2
25b38     ED 1E 02 F1 | 	add	local01, __methods__
25b3c     0F 1F 02 FB | 	rdlong	local01, local01
25b40     F2 22 02 F6 | 	mov	local03, objptr
25b44     10 E5 01 F6 | 	mov	objptr, local02
25b48     2D 1E 62 FD | 	call	local01
25b4c     11 E5 01 F6 | 	mov	objptr, local03
25b50     FD 12 0A F6 | 	mov	arg01, result1 wz
25b54     1C 00 90 AD |  if_e	jmp	#LR__3710
25b58     00 12 4E F2 | 	cmps	arg01, #0 wz
25b5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25b60     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25b64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25b68     01 FA 65 56 |  if_ne	neg	result1, #1
25b6c     00 FA 05 A6 |  if_e	mov	result1, #0
25b70     04 00 90 FD | 	jmp	#LR__3711
25b74                 | LR__3710
25b74     00 FA 05 F6 | 	mov	result1, #0
25b78                 | LR__3711
25b78     A7 F0 03 F6 | 	mov	ptra, fp
25b7c     B2 00 A0 FD | 	call	#popregs_
25b80                 | __system___ioctl_ret
25b80     2D 00 64 FD | 	ret
25b84                 | 
25b84                 | __system___isatty
25b84     00 4A 05 F6 | 	mov	COUNT_, #0
25b88     A8 00 A0 FD | 	call	#pushregs_
25b8c     0C F0 07 F1 | 	add	ptra, #12
25b90     04 4E 05 F1 | 	add	fp, #4
25b94     A7 12 62 FC | 	wrlong	arg01, fp
25b98     04 4E 05 F1 | 	add	fp, #4
25b9c     A7 16 02 F6 | 	mov	arg03, fp
25ba0     08 4E 85 F1 | 	sub	fp, #8
25ba4     00 15 06 F6 | 	mov	arg02, #256
25ba8     50 FF BF FD | 	call	#__system___ioctl
25bac     00 FA 0D F2 | 	cmp	result1, #0 wz
25bb0     01 FA 05 A6 |  if_e	mov	result1, #1
25bb4     00 FA 05 56 |  if_ne	mov	result1, #0
25bb8     A7 F0 03 F6 | 	mov	ptra, fp
25bbc     B2 00 A0 FD | 	call	#popregs_
25bc0                 | __system___isatty_ret
25bc0     2D 00 64 FD | 	ret
25bc4                 | 
25bc4                 | __system____getftab
25bc4     0A 12 16 F2 | 	cmp	arg01, #10 wc
25bc8     34 12 06 CD |  if_b	qmul	arg01, #52
25bcc     00 FA 05 36 |  if_ae	mov	result1, #0
25bd0     02 00 00 CF 
25bd4     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25bd8     18 FA 61 CD |  if_b	getqx	result1
25bdc     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25be0     02 00 00 CF 
25be4     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25be8                 | __system____getftab_ret
25be8     2D 00 64 FD | 	ret
25bec                 | 
25bec                 | __system__strncpy
25bec     09 01 02 F6 | 	mov	_var01, arg01
25bf0                 | LR__3720
25bf0     01 16 86 F1 | 	sub	arg03, #1
25bf4     00 16 56 F2 | 	cmps	arg03, #0 wc
25bf8     18 00 90 CD |  if_b	jmp	#LR__3721
25bfc     0A FB C1 FA | 	rdbyte	result1, arg02
25c00     00 FB 41 FC | 	wrbyte	result1, _var01
25c04     01 14 06 F1 | 	add	arg02, #1
25c08     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25c0c     01 00 06 F1 | 	add	_var01, #1
25c10     DC FF 9F 5D |  if_ne	jmp	#LR__3720
25c14                 | LR__3721
25c14     97 0C 48 FB | 	callpa	#(@LR__3723-@LR__3722)>>2,fcache_load_ptr_
25c18                 | LR__3722
25c18     01 16 86 F1 | 	sub	arg03, #1
25c1c     00 16 56 F2 | 	cmps	arg03, #0 wc
25c20     00 03 02 36 |  if_ae	mov	_var02, _var01
25c24     01 00 06 31 |  if_ae	add	_var01, #1
25c28     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25c2c     E8 FF 9F 3D |  if_ae	jmp	#LR__3722
25c30                 | LR__3723
25c30     09 FB 01 F6 | 	mov	result1, arg01
25c34                 | __system__strncpy_ret
25c34     2D 00 64 FD | 	ret
25c38                 | 
25c38                 | __system__strncat
25c38     00 14 4E F2 | 	cmps	arg02, #0 wz
25c3c     50 00 90 AD |  if_e	jmp	#LR__3734
25c40     01 16 16 F2 | 	cmp	arg03, #1 wc
25c44     48 00 90 CD |  if_b	jmp	#LR__3734
25c48     09 01 02 F6 | 	mov	_var01, arg01
25c4c     97 1E 48 FB | 	callpa	#(@LR__3732-@LR__3730)>>2,fcache_load_ptr_
25c50                 | LR__3730
25c50     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25c54     01 00 06 51 |  if_ne	add	_var01, #1
25c58     F4 FF 9F 5D |  if_ne	jmp	#LR__3730
25c5c     0B 03 02 F6 | 	mov	_var02, arg03
25c60                 | LR__3731
25c60     0A 05 C2 FA | 	rdbyte	_var03, arg02
25c64     02 07 02 F6 | 	mov	_var04, _var03
25c68     07 06 4E F7 | 	zerox	_var04, #7 wz
25c6c     01 14 06 F1 | 	add	arg02, #1
25c70     18 00 90 AD |  if_e	jmp	#LR__3733
25c74     01 02 86 F1 | 	sub	_var02, #1
25c78     00 02 56 F2 | 	cmps	_var02, #0 wc
25c7c     00 07 02 36 |  if_ae	mov	_var04, _var01
25c80     01 00 06 31 |  if_ae	add	_var01, #1
25c84     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25c88     D4 FF 9F 3D |  if_ae	jmp	#LR__3731
25c8c                 | LR__3732
25c8c                 | LR__3733
25c8c     00 01 48 FC | 	wrbyte	#0, _var01
25c90                 | LR__3734
25c90     09 FB 01 F6 | 	mov	result1, arg01
25c94                 | __system__strncat_ret
25c94     2D 00 64 FD | 	ret
25c98                 | 
25c98                 | __system__strncmp
25c98     09 01 0A F6 | 	mov	_var01, arg01 wz
25c9c     14 00 90 5D |  if_ne	jmp	#LR__3740
25ca0     00 14 0E F2 | 	cmp	arg02, #0 wz
25ca4     01 02 66 56 |  if_ne	neg	_var02, #1
25ca8     00 02 06 A6 |  if_e	mov	_var02, #0
25cac     01 FB 01 F6 | 	mov	result1, _var02
25cb0     74 00 90 FD | 	jmp	#__system__strncmp_ret
25cb4                 | LR__3740
25cb4     00 14 0E F2 | 	cmp	arg02, #0 wz
25cb8     01 FA 05 A6 |  if_e	mov	result1, #1
25cbc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25cc0     0B 05 02 F6 | 	mov	_var03, arg03
25cc4     97 16 48 FB | 	callpa	#(@LR__3742-@LR__3741)>>2,fcache_load_ptr_
25cc8                 | LR__3741
25cc8     00 07 C2 FA | 	rdbyte	_var04, _var01
25ccc     0A 09 02 F6 | 	mov	_var05, arg02
25cd0     04 0B C2 FA | 	rdbyte	_var06, _var05
25cd4     01 04 86 F1 | 	sub	_var03, #1
25cd8     00 04 56 F2 | 	cmps	_var03, #0 wc
25cdc     01 00 06 F1 | 	add	_var01, #1
25ce0     01 14 06 F1 | 	add	arg02, #1
25ce4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25ce8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3743
25cec     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25cf0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3741
25cf4                 | LR__3742
25cf4                 | LR__3743
25cf4     00 04 56 F2 | 	cmps	_var03, #0 wc
25cf8     00 FA 05 C6 |  if_b	mov	result1, #0
25cfc     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25d00     05 07 0A F2 | 	cmp	_var04, _var06 wz
25d04     00 FA 05 A6 |  if_e	mov	result1, #0
25d08     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25d0c     00 06 0E F2 | 	cmp	_var04, #0 wz
25d10     01 FA 65 A6 |  if_e	neg	result1, #1
25d14     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25d18     00 0A 0E F2 | 	cmp	_var06, #0 wz
25d1c     01 FA 05 A6 |  if_e	mov	result1, #1
25d20     03 FB 01 56 |  if_ne	mov	result1, _var04
25d24     05 FB 81 51 |  if_ne	sub	result1, _var06
25d28                 | __system__strncmp_ret
25d28     2D 00 64 FD | 	ret
25d2c                 | 
25d2c                 | __system____root_opendir
25d2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25d30     04 12 06 F1 | 	add	arg01, #4
25d34     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25d38     00 FA 05 F6 | 	mov	result1, #0
25d3c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25d40                 | __system____root_opendir_ret
25d40     2D 00 64 FD | 	ret
25d44                 | 
25d44                 | __system____root_readdir
25d44     03 4A 05 F6 | 	mov	COUNT_, #3
25d48     A8 00 A0 FD | 	call	#pushregs_
25d4c     09 1F 02 F6 | 	mov	local01, arg01
25d50     0A 21 02 F6 | 	mov	local02, arg02
25d54     04 1E 06 F1 | 	add	local01, #4
25d58     0F 23 02 FB | 	rdlong	local03, local01
25d5c     04 1E 86 F1 | 	sub	local01, #4
25d60                 | LR__3750
25d60     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25d64     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25d68     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25d6c     01 FA 65 A6 |  if_e	neg	result1, #1
25d70     48 00 90 AD |  if_e	jmp	#LR__3751
25d74     11 17 0A FB | 	rdlong	arg03, local03 wz
25d78     04 22 06 A1 |  if_e	add	local03, #4
25d7c     E0 FF 9F AD |  if_e	jmp	#LR__3750
25d80     11 15 02 FB | 	rdlong	arg02, local03
25d84     01 14 06 F1 | 	add	arg02, #1
25d88     10 13 02 F6 | 	mov	arg01, local02
25d8c     40 16 06 F6 | 	mov	arg03, #64
25d90     58 FE BF FD | 	call	#__system__strncpy
25d94     50 20 06 F1 | 	add	local02, #80
25d98     10 03 48 FC | 	wrbyte	#1, local02
25d9c     08 20 86 F1 | 	sub	local02, #8
25da0     10 01 68 FC | 	wrlong	#0, local02
25da4     04 20 06 F1 | 	add	local02, #4
25da8     10 01 68 FC | 	wrlong	#0, local02
25dac     04 22 06 F1 | 	add	local03, #4
25db0     04 1E 06 F1 | 	add	local01, #4
25db4     0F 23 62 FC | 	wrlong	local03, local01
25db8     00 FA 05 F6 | 	mov	result1, #0
25dbc                 | LR__3751
25dbc     A7 F0 03 F6 | 	mov	ptra, fp
25dc0     B2 00 A0 FD | 	call	#popregs_
25dc4                 | __system____root_readdir_ret
25dc4     2D 00 64 FD | 	ret
25dc8                 | 
25dc8                 | __system____root_closedir
25dc8     00 FA 05 F6 | 	mov	result1, #0
25dcc                 | __system____root_closedir_ret
25dcc     2D 00 64 FD | 	ret
25dd0                 | 
25dd0                 | __system____root_stat
25dd0     0A 01 02 F6 | 	mov	_var01, arg02
25dd4     00 13 02 F6 | 	mov	arg01, _var01
25dd8     00 14 06 F6 | 	mov	arg02, #0
25ddc     30 16 06 F6 | 	mov	arg03, #48
25de0     98 00 A0 FD | 	call	#\builtin_bytefill_
25de4     08 00 06 F1 | 	add	_var01, #8
25de8     08 00 80 FF 
25dec     00 FF 6B FC | 	wrlong	##4607, _var01
25df0     00 FA 05 F6 | 	mov	result1, #0
25df4                 | __system____root_stat_ret
25df4     2D 00 64 FD | 	ret
25df8                 | 
25df8                 | __system___normalizeName
25df8     00 00 06 F6 | 	mov	_var01, #0
25dfc     09 03 02 F6 | 	mov	_var02, arg01
25e00     01 05 02 F6 | 	mov	_var03, _var02
25e04                 | LR__3760
25e04     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25e08     5C 01 90 AD |  if_e	jmp	#LR__3779
25e0c     00 00 0E F2 | 	cmp	_var01, #0 wz
25e10     02 07 02 56 |  if_ne	mov	_var04, _var03
25e14     01 04 06 51 |  if_ne	add	_var03, #1
25e18     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25e1c     00 00 06 56 |  if_ne	mov	_var01, #0
25e20     01 07 C2 FA | 	rdbyte	_var04, _var02
25e24     2E 06 0E F2 | 	cmp	_var04, #46 wz
25e28     D8 00 90 5D |  if_ne	jmp	#LR__3772
25e2c     01 02 06 F1 | 	add	_var02, #1
25e30     01 07 C2 FA | 	rdbyte	_var04, _var02
25e34     01 02 86 F1 | 	sub	_var02, #1
25e38     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e3c     18 00 90 AD |  if_e	jmp	#LR__3761
25e40     01 02 06 F1 | 	add	_var02, #1
25e44     01 09 C2 FA | 	rdbyte	_var05, _var02
25e48     01 02 86 F1 | 	sub	_var02, #1
25e4c     04 0B 02 F6 | 	mov	_var06, _var05
25e50     07 0A 4E F7 | 	zerox	_var06, #7 wz
25e54     10 00 90 5D |  if_ne	jmp	#LR__3762
25e58                 | LR__3761
25e58     01 0D 02 F6 | 	mov	_var07, _var02
25e5c     01 0C 06 F1 | 	add	_var07, #1
25e60     06 03 02 F6 | 	mov	_var02, _var07
25e64     E0 00 90 FD | 	jmp	#LR__3776
25e68                 | LR__3762
25e68     01 02 06 F1 | 	add	_var02, #1
25e6c     01 0D C2 FA | 	rdbyte	_var07, _var02
25e70     01 02 86 F1 | 	sub	_var02, #1
25e74     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25e78     2E 06 0E F2 | 	cmp	_var04, #46 wz
25e7c     84 00 90 5D |  if_ne	jmp	#LR__3771
25e80     02 02 06 F1 | 	add	_var02, #2
25e84     01 0D C2 FA | 	rdbyte	_var07, _var02
25e88     02 02 86 F1 | 	sub	_var02, #2
25e8c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25e90     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e94     18 00 90 AD |  if_e	jmp	#LR__3763
25e98     02 02 06 F1 | 	add	_var02, #2
25e9c     01 09 C2 FA | 	rdbyte	_var05, _var02
25ea0     02 02 86 F1 | 	sub	_var02, #2
25ea4     04 0B 02 F6 | 	mov	_var06, _var05
25ea8     07 0A 4E F7 | 	zerox	_var06, #7 wz
25eac     54 00 90 5D |  if_ne	jmp	#LR__3770
25eb0                 | LR__3763
25eb0     02 02 06 F1 | 	add	_var02, #2
25eb4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25eb8     40 00 90 ED |  if_be	jmp	#LR__3769
25ebc     02 0F 02 F6 | 	mov	_var08, _var03
25ec0     01 0E 86 F1 | 	sub	_var08, #1
25ec4                 | LR__3764
25ec4     07 07 C2 FA | 	rdbyte	_var04, _var08
25ec8     2F 06 0E F2 | 	cmp	_var04, #47 wz
25ecc     0C 00 90 5D |  if_ne	jmp	#LR__3765
25ed0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25ed4     01 0E 86 11 |  if_a	sub	_var08, #1
25ed8     E8 FF 9F 1D |  if_a	jmp	#LR__3764
25edc                 | LR__3765
25edc     97 0C 48 FB | 	callpa	#(@LR__3767-@LR__3766)>>2,fcache_load_ptr_
25ee0                 | LR__3766
25ee0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25ee4     10 00 90 ED |  if_be	jmp	#LR__3768
25ee8     07 07 C2 FA | 	rdbyte	_var04, _var08
25eec     2F 06 0E F2 | 	cmp	_var04, #47 wz
25ef0     01 0E 86 51 |  if_ne	sub	_var08, #1
25ef4     E8 FF 9F 5D |  if_ne	jmp	#LR__3766
25ef8                 | LR__3767
25ef8                 | LR__3768
25ef8     07 05 02 F6 | 	mov	_var03, _var08
25efc                 | LR__3769
25efc     01 00 06 F6 | 	mov	_var01, #1
25f00     44 00 90 FD | 	jmp	#LR__3776
25f04                 | LR__3770
25f04                 | LR__3771
25f04                 | LR__3772
25f04     97 18 48 FB | 	callpa	#(@LR__3774-@LR__3773)>>2,fcache_load_ptr_
25f08                 | LR__3773
25f08     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25f0c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25f10     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25f14     20 00 90 AD |  if_e	jmp	#LR__3775
25f18     01 0B 02 F6 | 	mov	_var06, _var02
25f1c     01 09 02 F6 | 	mov	_var05, _var02
25f20     01 08 06 F1 | 	add	_var05, #1
25f24     05 11 C2 FA | 	rdbyte	_var09, _var06
25f28     04 03 02 F6 | 	mov	_var02, _var05
25f2c     02 11 42 FC | 	wrbyte	_var09, _var03
25f30     01 04 06 F1 | 	add	_var03, #1
25f34     D0 FF 9F FD | 	jmp	#LR__3773
25f38                 | LR__3774
25f38                 | LR__3775
25f38     01 07 C2 FA | 	rdbyte	_var04, _var02
25f3c     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f40     C0 FE 9F 5D |  if_ne	jmp	#LR__3760
25f44     01 00 06 F6 | 	mov	_var01, #1
25f48                 | LR__3776
25f48     97 0C 48 FB | 	callpa	#(@LR__3778-@LR__3777)>>2,fcache_load_ptr_
25f4c                 | LR__3777
25f4c     01 07 C2 FA | 	rdbyte	_var04, _var02
25f50     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f54     01 0D 02 A6 |  if_e	mov	_var07, _var02
25f58     01 0C 06 A1 |  if_e	add	_var07, #1
25f5c     06 03 02 A6 |  if_e	mov	_var02, _var07
25f60     E8 FF 9F AD |  if_e	jmp	#LR__3777
25f64                 | LR__3778
25f64     9C FE 9F FD | 	jmp	#LR__3760
25f68                 | LR__3779
25f68     02 01 48 FC | 	wrbyte	#0, _var03
25f6c                 | __system___normalizeName_ret
25f6c     2D 00 64 FD | 	ret
25f70                 | 
25f70                 | __system___strrev
25f70     09 01 CA FA | 	rdbyte	_var01, arg01 wz
25f74     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
25f78     09 03 02 F6 | 	mov	_var02, arg01
25f7c     97 1A 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
25f80                 | LR__3780
25f80     01 01 CA FA | 	rdbyte	_var01, _var02 wz
25f84     01 02 06 51 |  if_ne	add	_var02, #1
25f88     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
25f8c     01 02 86 F1 | 	sub	_var02, #1
25f90                 | LR__3781
25f90     09 03 5A F2 | 	cmps	_var02, arg01 wcz
25f94     1C 00 90 ED |  if_be	jmp	#LR__3783
25f98     09 01 C2 FA | 	rdbyte	_var01, arg01
25f9c     01 05 C2 FA | 	rdbyte	_var03, _var02
25fa0     09 05 42 FC | 	wrbyte	_var03, arg01
25fa4     01 01 42 FC | 	wrbyte	_var01, _var02
25fa8     01 12 06 F1 | 	add	arg01, #1
25fac     01 02 86 F1 | 	sub	_var02, #1
25fb0     DC FF 9F FD | 	jmp	#LR__3781
25fb4                 | LR__3782
25fb4                 | LR__3783
25fb4                 | __system___strrev_ret
25fb4     2D 00 64 FD | 	ret
25fb8                 | 
25fb8                 | __system___fmtpad
25fb8     06 4A 05 F6 | 	mov	COUNT_, #6
25fbc     A8 00 A0 FD | 	call	#pushregs_
25fc0     09 1F 02 F6 | 	mov	local01, arg01
25fc4     0A 21 02 F6 | 	mov	local02, arg02
25fc8     0B 23 02 F6 | 	mov	local03, arg03
25fcc     10 13 EA F8 | 	getbyte	arg01, local02, #1
25fd0     16 20 46 F0 | 	shr	local02, #22
25fd4     03 20 0E F5 | 	and	local02, #3 wz
25fd8     00 24 06 F6 | 	mov	local04, #0
25fdc     01 20 06 A6 |  if_e	mov	local02, #1
25fe0     0C 21 CA F7 | 	test	local02, arg04 wz
25fe4     00 FA 05 A6 |  if_e	mov	result1, #0
25fe8     88 00 90 AD |  if_e	jmp	#LR__3793
25fec     09 23 C2 F2 | 	subr	local03, arg01
25ff0     01 22 56 F2 | 	cmps	local03, #1 wc
25ff4     00 FA 05 C6 |  if_b	mov	result1, #0
25ff8     78 00 90 CD |  if_b	jmp	#LR__3793
25ffc     03 20 0E F2 | 	cmp	local02, #3 wz
26000     18 00 90 5D |  if_ne	jmp	#LR__3790
26004     01 18 0E F2 | 	cmp	arg04, #1 wz
26008     6E 20 62 FD | 	wrz	local02
2600c     10 23 02 F1 | 	add	local03, local02
26010     11 23 52 F6 | 	abs	local03, local03 wc
26014     01 22 46 F0 | 	shr	local03, #1
26018     11 23 82 F6 | 	negc	local03, local03
2601c                 | LR__3790
2601c     01 22 56 F2 | 	cmps	local03, #1 wc
26020     4C 00 90 CD |  if_b	jmp	#LR__3792
26024     11 27 02 F6 | 	mov	local05, local03
26028                 | LR__3791
26028     0F 21 02 F6 | 	mov	local02, local01
2602c     0F 29 02 F6 | 	mov	local06, local01
26030     13 20 46 F7 | 	zerox	local02, #19
26034     14 28 46 F0 | 	shr	local06, #20
26038     02 28 66 F0 | 	shl	local06, #2
2603c     ED 28 02 F1 | 	add	local06, __methods__
26040     14 29 02 FB | 	rdlong	local06, local06
26044     20 12 06 F6 | 	mov	arg01, #32
26048     F2 22 02 F6 | 	mov	local03, objptr
2604c     10 E5 01 F6 | 	mov	objptr, local02
26050     2D 28 62 FD | 	call	local06
26054     11 E5 01 F6 | 	mov	objptr, local03
26058     FD 28 02 F6 | 	mov	local06, result1
2605c     00 28 56 F2 | 	cmps	local06, #0 wc
26060     14 FB 01 C6 |  if_b	mov	result1, local06
26064     0C 00 90 CD |  if_b	jmp	#LR__3793
26068     14 25 02 F1 | 	add	local04, local06
2606c     EE 27 6E FB | 	djnz	local05, #LR__3791
26070                 | LR__3792
26070     12 FB 01 F6 | 	mov	result1, local04
26074                 | LR__3793
26074     A7 F0 03 F6 | 	mov	ptra, fp
26078     B2 00 A0 FD | 	call	#popregs_
2607c                 | __system___fmtpad_ret
2607c     2D 00 64 FD | 	ret
26080                 | 
26080                 | __system___uitoa
26080     04 4A 05 F6 | 	mov	COUNT_, #4
26084     A8 00 A0 FD | 	call	#pushregs_
26088     09 1F 02 F6 | 	mov	local01, arg01
2608c     00 1A 4E F2 | 	cmps	arg05, #0 wz
26090     0F 1B 02 F6 | 	mov	arg05, local01
26094     00 20 06 F6 | 	mov	local02, #0
26098     37 22 06 56 |  if_ne	mov	local03, #55
2609c     57 22 06 A6 |  if_e	mov	local03, #87
260a0                 | LR__3800
260a0     0B 15 12 FD | 	qdiv	arg02, arg03
260a4     19 24 62 FD | 	getqy	local04
260a8     0B 15 12 FD | 	qdiv	arg02, arg03
260ac     0A 24 16 F2 | 	cmp	local04, #10 wc
260b0     30 24 06 C1 |  if_b	add	local04, #48
260b4     11 25 02 31 |  if_ae	add	local04, local03
260b8     0D 25 42 FC | 	wrbyte	local04, arg05
260bc     01 1A 06 F1 | 	add	arg05, #1
260c0     01 20 06 F1 | 	add	local02, #1
260c4     18 14 62 FD | 	getqx	arg02
260c8     00 14 0E F2 | 	cmp	arg02, #0 wz
260cc     D0 FF 9F 5D |  if_ne	jmp	#LR__3800
260d0     0C 21 12 F2 | 	cmp	local02, arg04 wc
260d4     C8 FF 9F CD |  if_b	jmp	#LR__3800
260d8     0D 01 48 FC | 	wrbyte	#0, arg05
260dc     0F 13 02 F6 | 	mov	arg01, local01
260e0     8C FE BF FD | 	call	#__system___strrev
260e4     10 FB 01 F6 | 	mov	result1, local02
260e8     A7 F0 03 F6 | 	mov	ptra, fp
260ec     B2 00 A0 FD | 	call	#popregs_
260f0                 | __system___uitoa_ret
260f0     2D 00 64 FD | 	ret
260f4                 | 
260f4                 | __system__disassemble_0498
260f4     10 4A 05 F6 | 	mov	COUNT_, #16
260f8     A8 00 A0 FD | 	call	#pushregs_
260fc     09 1F 02 F6 | 	mov	local01, arg01
26100     0A 21 02 F6 | 	mov	local02, arg02
26104     0B 23 02 F6 | 	mov	local03, arg03
26108     0C 25 02 F6 | 	mov	local04, arg04
2610c     0D 27 02 F6 | 	mov	local05, arg05
26110     13 13 52 F6 | 	abs	arg01, local05 wc
26114     1F 28 C6 C9 |  if_b	decod	local06, #31
26118     00 28 06 36 |  if_ae	mov	local06, #0
2611c     CC CF BF FD | 	call	#__system___float_fromuns
26120     14 FB 61 F5 | 	xor	result1, local06
26124     FD 2A 02 F6 | 	mov	local07, result1
26128     00 2C 06 F6 | 	mov	local08, #0
2612c     0F 13 02 F6 | 	mov	arg01, local01
26130     00 14 06 F6 | 	mov	arg02, #0
26134     01 16 06 F6 | 	mov	arg03, #1
26138     E8 D7 BF FD | 	call	#__system___float_cmp
2613c     00 FA 0D F2 | 	cmp	result1, #0 wz
26140     00 2E 06 A6 |  if_e	mov	local09, #0
26144     10 01 68 AC |  if_e	wrlong	#0, local02
26148     11 2F 62 AC |  if_e	wrlong	local09, local03
2614c     8C 01 90 AD |  if_e	jmp	#LR__3822
26150     0F 13 02 F6 | 	mov	arg01, local01
26154     BC DC BF FD | 	call	#__system____builtin_ilogb
26158     FD 30 02 F6 | 	mov	local10, result1
2615c     0A 26 0E F2 | 	cmp	local05, #10 wz
26160     24 00 90 5D |  if_ne	jmp	#LR__3810
26164     18 2F 02 F6 | 	mov	local09, local10
26168     01 2E 66 F0 | 	shl	local09, #1
2616c     18 2F 02 F1 | 	add	local09, local10
26170     17 31 52 F6 | 	abs	local10, local09 wc
26174     0A 30 16 FD | 	qdiv	local10, #10
26178     09 32 06 F6 | 	mov	local11, #9
2617c     18 30 62 FD | 	getqx	local10
26180     18 31 82 F6 | 	negc	local10, local10
26184     04 00 90 FD | 	jmp	#LR__3811
26188                 | LR__3810
26188     18 32 06 F6 | 	mov	local11, #24
2618c                 | LR__3811
2618c                 | LR__3812
2618c     08 2C 56 F2 | 	cmps	local08, #8 wc
26190     01 2C 06 F1 | 	add	local08, #1
26194     60 00 90 3D |  if_ae	jmp	#LR__3813
26198     00 C0 1F FF 
2619c     00 12 06 F6 | 	mov	arg01, ##1065353216
261a0     15 15 02 F6 | 	mov	arg02, local07
261a4     18 17 02 F6 | 	mov	arg03, local10
261a8     4C E3 BF FD | 	call	#__system___float_pow_n
261ac     FD 14 02 F6 | 	mov	arg02, result1
261b0     0F 13 02 F6 | 	mov	arg01, local01
261b4     3C D5 BF FD | 	call	#__system___float_div
261b8     FD 34 02 F6 | 	mov	local12, result1
261bc     1A 13 02 F6 | 	mov	arg01, local12
261c0     00 C0 1F FF 
261c4     00 14 06 F6 | 	mov	arg02, ##1065353216
261c8     01 16 06 F6 | 	mov	arg03, #1
261cc     54 D7 BF FD | 	call	#__system___float_cmp
261d0     00 FA 55 F2 | 	cmps	result1, #0 wc
261d4     01 30 86 C1 |  if_b	sub	local10, #1
261d8     B0 FF 9F CD |  if_b	jmp	#LR__3812
261dc     15 15 02 F6 | 	mov	arg02, local07
261e0     1A 13 02 F6 | 	mov	arg01, local12
261e4     01 16 66 F6 | 	neg	arg03, #1
261e8     38 D7 BF FD | 	call	#__system___float_cmp
261ec     00 FA 55 F2 | 	cmps	result1, #0 wc
261f0     01 30 06 31 |  if_ae	add	local10, #1
261f4     94 FF 9F 3D |  if_ae	jmp	#LR__3812
261f8                 | LR__3813
261f8     1A 13 02 F6 | 	mov	arg01, local12
261fc     14 DC BF FD | 	call	#__system____builtin_ilogb
26200     FD 36 02 F6 | 	mov	local13, result1
26204     1A 39 02 F6 | 	mov	local14, local12
26208     17 39 06 F4 | 	bitl	local14, #279
2620c     17 38 26 F4 | 	bith	local14, #23
26210     1B 39 62 F0 | 	shl	local14, local13
26214     02 26 0E F2 | 	cmp	local05, #2 wz
26218     02 24 66 A0 |  if_e	shl	local04, #2
2621c     00 3A 06 F6 | 	mov	local15, #0
26220     00 24 56 F2 | 	cmps	local04, #0 wc
26224     10 00 90 3D |  if_ae	jmp	#LR__3814
26228     18 25 C2 F2 | 	subr	local04, local10
2622c     00 24 56 F2 | 	cmps	local04, #0 wc
26230     A0 00 90 CD |  if_b	jmp	#LR__3821
26234     04 00 90 FD | 	jmp	#LR__3815
26238                 | LR__3814
26238     01 24 06 F1 | 	add	local04, #1
2623c                 | LR__3815
2623c     19 25 7A F3 | 	fles	local04, local11 wcz
26240     01 3C 06 F6 | 	mov	local16, #1
26244     97 22 48 FB | 	callpa	#(@LR__3817-@LR__3816)>>2,fcache_load_ptr_
26248                 | LR__3816
26248     00 40 00 FF 
2624c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26250     38 00 90 3D |  if_ae	jmp	#LR__3818
26254     01 24 56 F2 | 	cmps	local04, #1 wc
26258     01 24 86 F1 | 	sub	local04, #1
2625c     2C 00 90 CD |  if_b	jmp	#LR__3818
26260     13 3B 02 FD | 	qmul	local15, local05
26264     1C 37 02 F6 | 	mov	local13, local14
26268     17 36 46 F0 | 	shr	local13, #23
2626c     17 39 06 F4 | 	bitl	local14, #279
26270     18 3A 62 FD | 	getqx	local15
26274     13 3D 02 FD | 	qmul	local16, local05
26278     18 3C 62 FD | 	getqx	local16
2627c     13 39 02 FD | 	qmul	local14, local05
26280     1B 3B 02 F1 | 	add	local15, local13
26284     18 38 62 FD | 	getqx	local14
26288     BC FF 9F FD | 	jmp	#LR__3816
2628c                 | LR__3817
2628c                 | LR__3818
2628c     13 2F 02 F6 | 	mov	local09, local05
26290     17 2E 66 F0 | 	shl	local09, #23
26294     17 37 52 F6 | 	abs	local13, local09 wc
26298     01 36 46 F0 | 	shr	local13, #1
2629c     1B 37 82 F6 | 	negc	local13, local13
262a0     1B 39 1A F2 | 	cmp	local14, local13 wcz
262a4     20 00 90 1D |  if_a	jmp	#LR__3819
262a8     17 26 66 F0 | 	shl	local05, #23
262ac     13 37 52 F6 | 	abs	local13, local05 wc
262b0     01 36 46 F0 | 	shr	local13, #1
262b4     1B 37 82 F6 | 	negc	local13, local13
262b8     1B 39 0A F2 | 	cmp	local14, local13 wz
262bc     14 00 90 5D |  if_ne	jmp	#LR__3820
262c0     01 3A CE F7 | 	test	local15, #1 wz
262c4     0C 00 90 AD |  if_e	jmp	#LR__3820
262c8                 | LR__3819
262c8     01 3A 06 F1 | 	add	local15, #1
262cc     1E 3B 0A F2 | 	cmp	local15, local16 wz
262d0     01 30 06 A1 |  if_e	add	local10, #1
262d4                 | LR__3820
262d4                 | LR__3821
262d4     10 3B 62 FC | 	wrlong	local15, local02
262d8     11 31 62 FC | 	wrlong	local10, local03
262dc                 | LR__3822
262dc     A7 F0 03 F6 | 	mov	ptra, fp
262e0     B2 00 A0 FD | 	call	#popregs_
262e4                 | __system__disassemble_0498_ret
262e4     2D 00 64 FD | 	ret
262e8                 | 
262e8                 | __system__emitsign_0500
262e8     00 FA 05 F6 | 	mov	result1, #0
262ec     00 14 0E F2 | 	cmp	arg02, #0 wz
262f0     09 01 02 56 |  if_ne	mov	_var01, arg01
262f4     01 12 06 51 |  if_ne	add	arg01, #1
262f8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
262fc     01 FA 05 56 |  if_ne	mov	result1, #1
26300     00 16 0E F2 | 	cmp	arg03, #0 wz
26304     09 61 48 5C |  if_ne	wrbyte	#48, arg01
26308     01 12 06 51 |  if_ne	add	arg01, #1
2630c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
26310     02 FA 05 51 |  if_ne	add	result1, #2
26314                 | __system__emitsign_0500_ret
26314     2D 00 64 FD | 	ret
26318                 | 
26318                 | __system___gettxfunc
26318     01 4A 05 F6 | 	mov	COUNT_, #1
2631c     A8 00 A0 FD | 	call	#pushregs_
26320     A0 F8 BF FD | 	call	#__system____getftab
26324     FD 1E 0A F6 | 	mov	local01, result1 wz
26328     10 00 90 AD |  if_e	jmp	#LR__3830
2632c     08 1E 06 F1 | 	add	local01, #8
26330     0F 15 0A FB | 	rdlong	arg02, local01 wz
26334     08 1E 86 F1 | 	sub	local01, #8
26338     08 00 90 5D |  if_ne	jmp	#LR__3831
2633c                 | LR__3830
2633c     00 FA 05 F6 | 	mov	result1, #0
26340     0C 00 90 FD | 	jmp	#LR__3832
26344                 | LR__3831
26344     00 98 04 FF 
26348     00 1E 46 F5 | 	or	local01, ##154140672
2634c     0F FB 01 F6 | 	mov	result1, local01
26350                 | LR__3832
26350     A7 F0 03 F6 | 	mov	ptra, fp
26354     B2 00 A0 FD | 	call	#popregs_
26358                 | __system___gettxfunc_ret
26358     2D 00 64 FD | 	ret
2635c                 | 
2635c                 | __system___getrxfunc
2635c     01 4A 05 F6 | 	mov	COUNT_, #1
26360     A8 00 A0 FD | 	call	#pushregs_
26364     5C F8 BF FD | 	call	#__system____getftab
26368     FD 1E 0A F6 | 	mov	local01, result1 wz
2636c     10 00 90 AD |  if_e	jmp	#LR__3840
26370     08 1E 06 F1 | 	add	local01, #8
26374     0F 15 0A FB | 	rdlong	arg02, local01 wz
26378     08 1E 86 F1 | 	sub	local01, #8
2637c     08 00 90 5D |  if_ne	jmp	#LR__3841
26380                 | LR__3840
26380     00 FA 05 F6 | 	mov	result1, #0
26384     0C 00 90 FD | 	jmp	#LR__3842
26388                 | LR__3841
26388     00 A0 04 FF 
2638c     00 1E 46 F5 | 	or	local01, ##155189248
26390     0F FB 01 F6 | 	mov	result1, local01
26394                 | LR__3842
26394     A7 F0 03 F6 | 	mov	ptra, fp
26398     B2 00 A0 FD | 	call	#popregs_
2639c                 | __system___getrxfunc_ret
2639c     2D 00 64 FD | 	ret
263a0                 | 
263a0                 | __system___getiolock_0540
263a0     01 4A 05 F6 | 	mov	COUNT_, #1
263a4     A8 00 A0 FD | 	call	#pushregs_
263a8     18 F8 BF FD | 	call	#__system____getftab
263ac     FD 1E 0A F6 | 	mov	local01, result1 wz
263b0     10 00 90 AD |  if_e	jmp	#LR__3850
263b4     08 1E 06 F1 | 	add	local01, #8
263b8     0F FB 09 FB | 	rdlong	result1, local01 wz
263bc     08 1E 86 F1 | 	sub	local01, #8
263c0     18 00 90 5D |  if_ne	jmp	#LR__3851
263c4                 | LR__3850
263c4     01 00 00 FF 
263c8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
263cc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
263d0     01 00 00 FF 
263d4     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
263d8     08 00 90 FD | 	jmp	#LR__3852
263dc                 | LR__3851
263dc     0C 1E 06 F1 | 	add	local01, #12
263e0     0F FB 01 F6 | 	mov	result1, local01
263e4                 | LR__3852
263e4     A7 F0 03 F6 | 	mov	ptra, fp
263e8     B2 00 A0 FD | 	call	#popregs_
263ec                 | __system___getiolock_0540_ret
263ec     2D 00 64 FD | 	ret
263f0                 | 
263f0                 | __system____ScanForChar
263f0     09 01 02 F6 | 	mov	_var01, arg01
263f4     09 03 02 F6 | 	mov	_var02, arg01
263f8     97 06 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
263fc                 | LR__3860
263fc     01 FB C9 FA | 	rdbyte	result1, _var02 wz
26400     01 02 06 51 |  if_ne	add	_var02, #1
26404     F4 FF 9F 5D |  if_ne	jmp	#LR__3860
26408                 | LR__3861
26408     09 03 82 F1 | 	sub	_var02, arg01
2640c     01 FB 01 F6 | 	mov	result1, _var02
26410     FD 12 0A F6 | 	mov	arg01, result1 wz
26414     00 FA 05 A6 |  if_e	mov	result1, #0
26418     B8 00 90 AD |  if_e	jmp	#LR__3868
2641c     0A 05 02 F6 | 	mov	_var03, arg02
26420     07 04 4E F7 | 	zerox	_var03, #7 wz
26424     00 FA 05 A6 |  if_e	mov	result1, #0
26428     A8 00 90 AD |  if_e	jmp	#LR__3868
2642c     01 16 16 F2 | 	cmp	arg03, #1 wc
26430     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
26434     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26438     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2643c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3868
26440     09 17 1A F2 | 	cmp	arg03, arg01 wcz
26444     10 00 90 ED |  if_be	jmp	#LR__3862
26448     00 18 0E F2 | 	cmp	arg04, #0 wz
2644c     00 FA 05 A6 |  if_e	mov	result1, #0
26450     80 00 90 AD |  if_e	jmp	#LR__3868
26454     09 17 02 F6 | 	mov	arg03, arg01
26458                 | LR__3862
26458     01 16 86 F1 | 	sub	arg03, #1
2645c     00 18 0E F2 | 	cmp	arg04, #0 wz
26460     38 00 90 5D |  if_ne	jmp	#LR__3864
26464     0B 07 02 F6 | 	mov	_var04, arg03
26468     09 09 02 F6 | 	mov	_var05, arg01
2646c                 | LR__3863
2646c     04 07 12 F2 | 	cmp	_var04, _var05 wc
26470     5C 00 90 3D |  if_ae	jmp	#LR__3867
26474     03 05 02 F6 | 	mov	_var03, _var04
26478     00 05 02 F1 | 	add	_var03, _var01
2647c     02 05 C2 FA | 	rdbyte	_var03, _var03
26480     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
26484     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26488     01 06 06 A1 |  if_e	add	_var04, #1
2648c     03 FB 01 A6 |  if_e	mov	result1, _var04
26490     40 00 90 AD |  if_e	jmp	#LR__3868
26494     01 06 06 F1 | 	add	_var04, #1
26498     D0 FF 9F FD | 	jmp	#LR__3863
2649c                 | LR__3864
2649c     0B 07 02 F6 | 	mov	_var04, arg03
264a0                 | LR__3865
264a0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
264a4     28 00 90 1D |  if_a	jmp	#LR__3866
264a8     03 09 02 F6 | 	mov	_var05, _var04
264ac     00 09 02 F1 | 	add	_var05, _var01
264b0     04 05 C2 FA | 	rdbyte	_var03, _var05
264b4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
264b8     04 05 0A F2 | 	cmp	_var03, _var05 wz
264bc     01 06 06 A1 |  if_e	add	_var04, #1
264c0     03 FB 01 A6 |  if_e	mov	result1, _var04
264c4     0C 00 90 AD |  if_e	jmp	#LR__3868
264c8     01 06 86 F1 | 	sub	_var04, #1
264cc     D0 FF 9F FD | 	jmp	#LR__3865
264d0                 | LR__3866
264d0                 | LR__3867
264d0     00 FA 05 F6 | 	mov	result1, #0
264d4                 | LR__3868
264d4                 | __system____ScanForChar_ret
264d4     2D 00 64 FD | 	ret
264d8                 | 
264d8                 | __system___basic_dir
264d8     05 4A 05 F6 | 	mov	COUNT_, #5
264dc     A8 00 A0 FD | 	call	#pushregs_
264e0     4C F0 07 F1 | 	add	ptra, #76
264e4     04 4E 05 F1 | 	add	fp, #4
264e8     A7 12 62 FC | 	wrlong	arg01, fp
264ec     04 4E 05 F1 | 	add	fp, #4
264f0     A7 14 62 FC | 	wrlong	arg02, fp
264f4     04 4E 85 F1 | 	sub	fp, #4
264f8     A7 14 0A FB | 	rdlong	arg02, fp wz
264fc     04 4E 85 F1 | 	sub	fp, #4
26500     04 4E 05 51 |  if_ne	add	fp, #4
26504     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26508     04 4E 85 51 |  if_ne	sub	fp, #4
2650c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
26510     70 00 90 AD |  if_e	jmp	#LR__3870
26514     03 00 00 FF 
26518     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2651c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26520     03 00 00 FF 
26524     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26528     03 00 00 5F 
2652c     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
26530     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
26534     03 00 00 5F 
26538     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
2653c     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26540     80 01 00 FF 
26544     F0 13 06 F6 | 	mov	arg01, ##@LR__5038
26548     E0 E8 BF FD | 	call	#__system__opendir
2654c     03 00 00 FF 
26550     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26554     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26558     08 4E 05 F1 | 	add	fp, #8
2655c     A7 20 02 FB | 	rdlong	local02, fp
26560     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26564     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26568     04 4E 85 F1 | 	sub	fp, #4
2656c     A7 20 02 FB | 	rdlong	local02, fp
26570     04 4E 85 F1 | 	sub	fp, #4
26574     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26578     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2657c     03 00 00 FF 
26580     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26584                 | LR__3870
26584     03 00 00 FF 
26588     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2658c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26590     03 00 00 FF 
26594     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26598     80 01 00 AF 
2659c     F2 FB 05 A6 |  if_e	mov	result1, ##@LR__5039
265a0     84 02 90 AD |  if_e	jmp	#LR__3883
265a4                 | LR__3871
265a4     03 00 00 FF 
265a8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265ac     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
265b0     03 00 00 FF 
265b4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265b8     D0 E9 BF FD | 	call	#__system__readdir
265bc     0C 4E 05 F1 | 	add	fp, #12
265c0     A7 FA 61 FC | 	wrlong	result1, fp
265c4     0C 4E 85 F1 | 	sub	fp, #12
265c8     00 FA 0D F2 | 	cmp	result1, #0 wz
265cc     38 00 90 5D |  if_ne	jmp	#LR__3872
265d0     03 00 00 FF 
265d4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265d8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
265dc     03 00 00 FF 
265e0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265e4     30 E9 BF FD | 	call	#__system__closedir
265e8     03 00 00 FF 
265ec     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265f0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
265f4     03 00 00 FF 
265f8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265fc     80 01 00 FF 
26600     F4 FB 05 F6 | 	mov	result1, ##@LR__5040
26604     20 02 90 FD | 	jmp	#LR__3883
26608                 | LR__3872
26608     0C 4E 05 F1 | 	add	fp, #12
2660c     A7 12 02 FB | 	rdlong	arg01, fp
26610     0C 4E 85 F1 | 	sub	fp, #12
26614     03 00 00 FF 
26618     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2661c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
26620     03 00 00 FF 
26624     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26628     10 09 B0 FD | 	call	#__system___pat_match
2662c     00 FA 0D F2 | 	cmp	result1, #0 wz
26630     70 FF 9F AD |  if_e	jmp	#LR__3871
26634     03 00 00 FF 
26638     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2663c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26640     03 00 00 FF 
26644     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26648     78 01 90 AD |  if_e	jmp	#LR__3879
2664c     0C 4E 05 F1 | 	add	fp, #12
26650     A7 12 02 FB | 	rdlong	arg01, fp
26654     04 4E 05 F1 | 	add	fp, #4
26658     A7 14 02 F6 | 	mov	arg02, fp
2665c     10 4E 85 F1 | 	sub	fp, #16
26660     2C F2 BF FD | 	call	#__system__stat
26664     40 4E 05 F1 | 	add	fp, #64
26668     A7 FA 61 FC | 	wrlong	result1, fp
2666c     40 4E 85 F1 | 	sub	fp, #64
26670     00 FA 0D F2 | 	cmp	result1, #0 wz
26674     80 01 00 5F 
26678     F6 FB 05 56 |  if_ne	mov	result1, ##@LR__5041
2667c     A8 01 90 5D |  if_ne	jmp	#LR__3883
26680     18 4E 05 F1 | 	add	fp, #24
26684     A7 20 02 FB | 	rdlong	local02, fp
26688     78 00 00 FF 
2668c     00 20 06 F5 | 	and	local02, ##61440
26690     2C 4E 05 F1 | 	add	fp, #44
26694     A7 20 62 FC | 	wrlong	local02, fp
26698     38 4E 85 F1 | 	sub	fp, #56
2669c     A7 20 02 FB | 	rdlong	local02, fp
266a0     0C 4E 85 F1 | 	sub	fp, #12
266a4     10 21 C2 FA | 	rdbyte	local02, local02
266a8     2E 20 0E F2 | 	cmp	local02, #46 wz
266ac     08 4E 05 A1 |  if_e	add	fp, #8
266b0     A7 04 68 AC |  if_e	wrlong	#2, fp
266b4     08 4E C5 F3 | 	sumz	fp, #8
266b8     A7 00 68 5C |  if_ne	wrlong	#0, fp
266bc     08 4E 85 51 |  if_ne	sub	fp, #8
266c0     44 4E 05 F1 | 	add	fp, #68
266c4     A7 20 02 FB | 	rdlong	local02, fp
266c8     44 4E 85 F1 | 	sub	fp, #68
266cc     08 00 00 FF 
266d0     00 20 0E F2 | 	cmp	local02, ##4096 wz
266d4     18 00 90 5D |  if_ne	jmp	#LR__3873
266d8     08 4E 05 F1 | 	add	fp, #8
266dc     A7 20 02 FB | 	rdlong	local02, fp
266e0     10 20 46 F5 | 	or	local02, #16
266e4     A7 20 62 FC | 	wrlong	local02, fp
266e8     08 4E 85 F1 | 	sub	fp, #8
266ec     AC 00 90 FD | 	jmp	#LR__3878
266f0                 | LR__3873
266f0     44 4E 05 F1 | 	add	fp, #68
266f4     A7 20 02 FB | 	rdlong	local02, fp
266f8     44 4E 85 F1 | 	sub	fp, #68
266fc     10 00 00 FF 
26700     00 20 0E F2 | 	cmp	local02, ##8192 wz
26704     44 4E 05 51 |  if_ne	add	fp, #68
26708     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2670c     44 4E 85 51 |  if_ne	sub	fp, #68
26710     18 00 00 5F 
26714     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
26718     44 4E 05 51 |  if_ne	add	fp, #68
2671c     0F 23 02 56 |  if_ne	mov	local03, local01
26720     44 4E 85 51 |  if_ne	sub	fp, #68
26724     20 00 00 5F 
26728     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
2672c     18 00 90 5D |  if_ne	jmp	#LR__3874
26730     08 4E 05 F1 | 	add	fp, #8
26734     A7 20 02 FB | 	rdlong	local02, fp
26738     04 20 46 F5 | 	or	local02, #4
2673c     A7 20 62 FC | 	wrlong	local02, fp
26740     08 4E 85 F1 | 	sub	fp, #8
26744     54 00 90 FD | 	jmp	#LR__3877
26748                 | LR__3874
26748     18 4E 05 F1 | 	add	fp, #24
2674c     A7 20 02 FB | 	rdlong	local02, fp
26750     18 4E 85 F1 | 	sub	fp, #24
26754     92 20 CE F7 | 	test	local02, #146 wz
26758     18 00 90 5D |  if_ne	jmp	#LR__3875
2675c     08 4E 05 F1 | 	add	fp, #8
26760     A7 20 02 FB | 	rdlong	local02, fp
26764     01 20 46 F5 | 	or	local02, #1
26768     A7 20 62 FC | 	wrlong	local02, fp
2676c     08 4E 85 F1 | 	sub	fp, #8
26770     28 00 90 FD | 	jmp	#LR__3876
26774                 | LR__3875
26774     44 4E 05 F1 | 	add	fp, #68
26778     A7 24 02 FB | 	rdlong	local04, fp
2677c     44 4E 85 F1 | 	sub	fp, #68
26780     08 00 00 FF 
26784     00 24 0E F2 | 	cmp	local04, ##4096 wz
26788     08 4E 05 51 |  if_ne	add	fp, #8
2678c     A7 24 02 5B |  if_ne	rdlong	local04, fp
26790     20 24 46 55 |  if_ne	or	local04, #32
26794     A7 24 62 5C |  if_ne	wrlong	local04, fp
26798     08 4E 85 51 |  if_ne	sub	fp, #8
2679c                 | LR__3876
2679c                 | LR__3877
2679c                 | LR__3878
2679c     08 4E 05 F1 | 	add	fp, #8
267a0     A7 24 02 FB | 	rdlong	local04, fp
267a4     08 4E 85 F1 | 	sub	fp, #8
267a8     03 00 00 FF 
267ac     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
267b0     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
267b4     03 00 00 FF 
267b8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
267bc     0F 25 CA F7 | 	test	local04, local01 wz
267c0     E0 FD 9F AD |  if_e	jmp	#LR__3871
267c4                 | LR__3879
267c4     0C 4E 05 F1 | 	add	fp, #12
267c8     A7 12 02 FB | 	rdlong	arg01, fp
267cc     0C 4E 85 F1 | 	sub	fp, #12
267d0     09 27 02 F6 | 	mov	local05, arg01
267d4     97 06 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
267d8                 | LR__3880
267d8     13 FB C9 FA | 	rdbyte	result1, local05 wz
267dc     01 26 06 51 |  if_ne	add	local05, #1
267e0     F4 FF 9F 5D |  if_ne	jmp	#LR__3880
267e4                 | LR__3881
267e4     13 13 C2 F2 | 	subr	arg01, local05
267e8     01 12 06 F1 | 	add	arg01, #1
267ec     28 E0 BF FD | 	call	#__system___gc_alloc_managed
267f0     48 4E 05 F1 | 	add	fp, #72
267f4     A7 FA 61 FC | 	wrlong	result1, fp
267f8     48 4E 85 F1 | 	sub	fp, #72
267fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26800     18 00 90 AD |  if_e	jmp	#LR__3882
26804     48 4E 05 F1 | 	add	fp, #72
26808     A7 12 02 FB | 	rdlong	arg01, fp
2680c     3C 4E 85 F1 | 	sub	fp, #60
26810     A7 14 02 FB | 	rdlong	arg02, fp
26814     0C 4E 85 F1 | 	sub	fp, #12
26818     D4 A0 BF FD | 	call	#__system____builtin_strcpy
2681c                 | LR__3882
2681c     48 4E 05 F1 | 	add	fp, #72
26820     A7 FA 01 FB | 	rdlong	result1, fp
26824     48 4E 85 F1 | 	sub	fp, #72
26828                 | LR__3883
26828     A7 F0 03 F6 | 	mov	ptra, fp
2682c     B2 00 A0 FD | 	call	#popregs_
26830                 | __system___basic_dir_ret
26830     2D 00 64 FD | 	ret
26834                 | 
26834                 | __system__pack_0606
26834     09 01 02 F6 | 	mov	_var01, arg01
26838     7F 16 06 F1 | 	add	arg03, #127
2683c     04 18 CE F7 | 	test	arg04, #4 wz
26840     10 00 90 AD |  if_e	jmp	#LR__3890
26844     00 00 0E F2 | 	cmp	_var01, #0 wz
26848     16 00 C6 A9 |  if_e	decod	_var01, #22
2684c     F7 00 26 F4 | 	bith	_var01, #247
26850     B4 00 90 FD | 	jmp	#LR__3899
26854                 | LR__3890
26854     02 18 CE F7 | 	test	arg04, #2 wz
26858     00 C0 3F 5F 
2685c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26860     00 14 06 56 |  if_ne	mov	arg02, #0
26864     A0 00 90 5D |  if_ne	jmp	#LR__3898
26868     08 18 CE F7 | 	test	arg04, #8 wz
2686c     00 00 06 56 |  if_ne	mov	_var01, #0
26870     94 00 90 5D |  if_ne	jmp	#LR__3897
26874     FF 16 56 F2 | 	cmps	arg03, #255 wc
26878     00 C0 3F 3F 
2687c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26880     00 14 06 36 |  if_ae	mov	arg02, #0
26884     80 00 90 3D |  if_ae	jmp	#LR__3896
26888     01 16 56 F2 | 	cmps	arg03, #1 wc
2688c     6C 00 90 3D |  if_ae	jmp	#LR__3894
26890     01 14 46 F0 | 	shr	arg02, #1
26894     00 03 02 F6 | 	mov	_var02, _var01
26898     01 02 06 F5 | 	and	_var02, #1
2689c     1F 02 66 F0 | 	shl	_var02, #31
268a0     01 15 42 F5 | 	or	arg02, _var02
268a4     01 00 46 F0 | 	shr	_var01, #1
268a8     97 1E 48 FB | 	callpa	#(@LR__3892-@LR__3891)>>2,fcache_load_ptr_
268ac                 | LR__3891
268ac     00 16 56 F2 | 	cmps	arg03, #0 wc
268b0     34 00 90 3D |  if_ae	jmp	#LR__3893
268b4     00 00 0E F2 | 	cmp	_var01, #0 wz
268b8     2C 00 90 AD |  if_e	jmp	#LR__3893
268bc     0A 13 02 F6 | 	mov	arg01, arg02
268c0     01 12 06 F5 | 	and	arg01, #1
268c4     01 16 06 F1 | 	add	arg03, #1
268c8     01 14 46 F0 | 	shr	arg02, #1
268cc     00 03 02 F6 | 	mov	_var02, _var01
268d0     01 02 06 F5 | 	and	_var02, #1
268d4     1F 02 66 F0 | 	shl	_var02, #31
268d8     01 15 42 F5 | 	or	arg02, _var02
268dc     09 15 42 F5 | 	or	arg02, arg01
268e0     01 00 46 F0 | 	shr	_var01, #1
268e4     C4 FF 9F FD | 	jmp	#LR__3891
268e8                 | LR__3892
268e8                 | LR__3893
268e8     00 16 56 F2 | 	cmps	arg03, #0 wc
268ec     18 00 90 3D |  if_ae	jmp	#LR__3895
268f0     00 14 0E F2 | 	cmp	arg02, #0 wz
268f4     6F 14 62 FD | 	wrnz	arg02
268f8     0C 00 90 FD | 	jmp	#LR__3895
268fc                 | LR__3894
268fc     17 01 06 F4 | 	bitl	_var01, #279
26900     17 16 66 F0 | 	shl	arg03, #23
26904     0B 01 42 F5 | 	or	_var01, arg03
26908                 | LR__3895
26908                 | LR__3896
26908                 | LR__3897
26908                 | LR__3898
26908                 | LR__3899
26908     01 00 CE F7 | 	test	_var01, #1 wz
2690c     01 14 46 55 |  if_ne	or	arg02, #1
26910     0A 17 02 F6 | 	mov	arg03, arg02
26914     00 02 06 F6 | 	mov	_var02, #0
26918     FF FF 3F FF 
2691c     FF 15 06 F1 | 	add	arg02, ##2147483647
26920     0B 15 12 F2 | 	cmp	arg02, arg03 wc
26924     01 02 06 C6 |  if_b	mov	_var02, #1
26928     01 01 02 F1 | 	add	_var01, _var02
2692c     01 18 CE F7 | 	test	arg04, #1 wz
26930     1F 00 26 54 |  if_ne	bith	_var01, #31
26934     00 FB 01 F6 | 	mov	result1, _var01
26938                 | __system__pack_0606_ret
26938     2D 00 64 FD | 	ret
2693c                 | 
2693c                 | __system___rxtxioctl_0696
2693c     00 15 0E F2 | 	cmp	arg02, #256 wz
26940     0C 00 90 AD |  if_e	jmp	#LR__3900
26944     01 15 0E F2 | 	cmp	arg02, #257 wz
26948     1C 00 90 AD |  if_e	jmp	#LR__3901
2694c     30 00 90 FD | 	jmp	#LR__3902
26950                 | LR__3900
26950     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26954     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26958     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2695c     0B FB 61 FC | 	wrlong	result1, arg03
26960     00 FA 05 F6 | 	mov	result1, #0
26964     28 00 90 FD | 	jmp	#LR__3903
26968                 | LR__3901
26968     0B 13 02 FB | 	rdlong	arg01, arg03
2696c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26970     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26974     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26978     00 FA 05 F6 | 	mov	result1, #0
2697c     10 00 90 FD | 	jmp	#LR__3903
26980                 | LR__3902
26980     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26984     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26988     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2698c     01 FA 65 F6 | 	neg	result1, #1
26990                 | LR__3903
26990                 | __system___rxtxioctl_0696_ret
26990     2D 00 64 FD | 	ret
26994                 | 
26994                 | __system____dummy_flush_0697
26994     00 FA 05 F6 | 	mov	result1, #0
26998                 | __system____dummy_flush_0697_ret
26998     2D 00 64 FD | 	ret
2699c                 | 
2699c                 | __system___vfswrite
2699c     09 4A 05 F6 | 	mov	COUNT_, #9
269a0     A8 00 A0 FD | 	call	#pushregs_
269a4     09 1F 02 F6 | 	mov	local01, arg01
269a8     0A 21 02 F6 | 	mov	local02, arg02
269ac     0B 23 02 F6 | 	mov	local03, arg03
269b0     10 25 02 F6 | 	mov	local04, local02
269b4     08 1E 06 F1 | 	add	local01, #8
269b8     0F 13 02 FB | 	rdlong	arg01, local01
269bc     08 1E 86 F1 | 	sub	local01, #8
269c0     02 12 CE F7 | 	test	arg01, #2 wz
269c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
269c8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
269cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
269d0     01 FA 65 A6 |  if_e	neg	result1, #1
269d4     80 01 90 AD |  if_e	jmp	#LR__3916
269d8     08 1E 06 F1 | 	add	local01, #8
269dc     0F FB 01 FB | 	rdlong	result1, local01
269e0     08 1E 86 F1 | 	sub	local01, #8
269e4     40 FA CD F7 | 	test	result1, #64 wz
269e8     68 00 90 AD |  if_e	jmp	#LR__3911
269ec     08 1E 06 F1 | 	add	local01, #8
269f0     0F 15 02 FB | 	rdlong	arg02, local01
269f4     08 1E 86 F1 | 	sub	local01, #8
269f8     80 14 CE F7 | 	test	arg02, #128 wz
269fc     54 00 90 AD |  if_e	jmp	#LR__3910
26a00     30 1E 06 F1 | 	add	local01, #48
26a04     0F 27 02 FB | 	rdlong	local05, local01
26a08     13 29 02 F6 | 	mov	local06, local05
26a0c     30 1E 86 F1 | 	sub	local01, #48
26a10     13 28 46 F7 | 	zerox	local06, #19
26a14     14 26 46 F0 | 	shr	local05, #20
26a18     02 26 66 F0 | 	shl	local05, #2
26a1c     ED 26 02 F1 | 	add	local05, __methods__
26a20     13 27 02 FB | 	rdlong	local05, local05
26a24     0F 13 02 F6 | 	mov	arg01, local01
26a28     00 14 06 F6 | 	mov	arg02, #0
26a2c     02 16 06 F6 | 	mov	arg03, #2
26a30     F2 2A 02 F6 | 	mov	local07, objptr
26a34     14 E5 01 F6 | 	mov	objptr, local06
26a38     2D 26 62 FD | 	call	local05
26a3c     15 E5 01 F6 | 	mov	objptr, local07
26a40     08 1E 06 F1 | 	add	local01, #8
26a44     0F 2B 02 FB | 	rdlong	local07, local01
26a48     80 2A 26 F5 | 	andn	local07, #128
26a4c     0F 2B 62 FC | 	wrlong	local07, local01
26a50     08 1E 86 F1 | 	sub	local01, #8
26a54                 | LR__3910
26a54                 | LR__3911
26a54     18 1E 06 F1 | 	add	local01, #24
26a58     0F 2B 0A FB | 	rdlong	local07, local01 wz
26a5c     18 1E 86 F1 | 	sub	local01, #24
26a60     80 00 90 AD |  if_e	jmp	#LR__3913
26a64     18 1E 06 F1 | 	add	local01, #24
26a68     0F 27 02 FB | 	rdlong	local05, local01
26a6c     13 29 02 F6 | 	mov	local06, local05
26a70     18 1E 86 F1 | 	sub	local01, #24
26a74     13 28 46 F7 | 	zerox	local06, #19
26a78     14 26 46 F0 | 	shr	local05, #20
26a7c     02 26 66 F0 | 	shl	local05, #2
26a80     ED 26 02 F1 | 	add	local05, __methods__
26a84     13 27 02 FB | 	rdlong	local05, local05
26a88     10 15 02 F6 | 	mov	arg02, local02
26a8c     11 17 02 F6 | 	mov	arg03, local03
26a90     0F 13 02 F6 | 	mov	arg01, local01
26a94     F2 2A 02 F6 | 	mov	local07, objptr
26a98     14 E5 01 F6 | 	mov	objptr, local06
26a9c     2D 26 62 FD | 	call	local05
26aa0     15 E5 01 F6 | 	mov	objptr, local07
26aa4     FD 2C 02 F6 | 	mov	local08, result1
26aa8     00 2C 56 F2 | 	cmps	local08, #0 wc
26aac     2C 00 90 3D |  if_ae	jmp	#LR__3912
26ab0     08 1E 06 F1 | 	add	local01, #8
26ab4     0F 2B 02 FB | 	rdlong	local07, local01
26ab8     20 2A 46 F5 | 	or	local07, #32
26abc     0F 2B 62 FC | 	wrlong	local07, local01
26ac0     00 2C 4E F2 | 	cmps	local08, #0 wz
26ac4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26ac8     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26acc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26ad0     01 FA 65 56 |  if_ne	neg	result1, #1
26ad4     00 FA 05 A6 |  if_e	mov	result1, #0
26ad8     7C 00 90 FD | 	jmp	#LR__3916
26adc                 | LR__3912
26adc     16 FB 01 F6 | 	mov	result1, local08
26ae0     74 00 90 FD | 	jmp	#LR__3916
26ae4                 | LR__3913
26ae4     1C 1E 06 F1 | 	add	local01, #28
26ae8     0F 2F 0A FB | 	rdlong	local09, local01 wz
26aec     1C 1E 86 F1 | 	sub	local01, #28
26af0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26af4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26af8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26afc     01 FA 65 A6 |  if_e	neg	result1, #1
26b00     54 00 90 AD |  if_e	jmp	#LR__3916
26b04     00 2C 06 F6 | 	mov	local08, #0
26b08                 | LR__3914
26b08     01 22 16 F2 | 	cmp	local03, #1 wc
26b0c     44 00 90 CD |  if_b	jmp	#LR__3915
26b10     17 29 02 F6 | 	mov	local06, local09
26b14     17 27 02 F6 | 	mov	local05, local09
26b18     13 28 46 F7 | 	zerox	local06, #19
26b1c     14 26 46 F0 | 	shr	local05, #20
26b20     02 26 66 F0 | 	shl	local05, #2
26b24     ED 26 02 F1 | 	add	local05, __methods__
26b28     13 27 02 FB | 	rdlong	local05, local05
26b2c     12 13 C2 FA | 	rdbyte	arg01, local04
26b30     0F 15 02 F6 | 	mov	arg02, local01
26b34     F2 2A 02 F6 | 	mov	local07, objptr
26b38     14 E5 01 F6 | 	mov	objptr, local06
26b3c     01 24 06 F1 | 	add	local04, #1
26b40     2D 26 62 FD | 	call	local05
26b44     15 E5 01 F6 | 	mov	objptr, local07
26b48     FD 2C 02 F1 | 	add	local08, result1
26b4c     01 22 86 F1 | 	sub	local03, #1
26b50     B4 FF 9F FD | 	jmp	#LR__3914
26b54                 | LR__3915
26b54     16 FB 01 F6 | 	mov	result1, local08
26b58                 | LR__3916
26b58     A7 F0 03 F6 | 	mov	ptra, fp
26b5c     B2 00 A0 FD | 	call	#popregs_
26b60                 | __system___vfswrite_ret
26b60     2D 00 64 FD | 	ret
26b64                 | 
26b64                 | __system___vfsread
26b64     03 4A 05 F6 | 	mov	COUNT_, #3
26b68     A8 00 A0 FD | 	call	#pushregs_
26b6c     28 F0 07 F1 | 	add	ptra, #40
26b70     04 4E 05 F1 | 	add	fp, #4
26b74     A7 12 62 FC | 	wrlong	arg01, fp
26b78     04 4E 05 F1 | 	add	fp, #4
26b7c     A7 14 62 FC | 	wrlong	arg02, fp
26b80     04 4E 05 F1 | 	add	fp, #4
26b84     A7 16 62 FC | 	wrlong	arg03, fp
26b88     04 4E 85 F1 | 	sub	fp, #4
26b8c     A7 FA 01 FB | 	rdlong	result1, fp
26b90     14 4E 05 F1 | 	add	fp, #20
26b94     A7 FA 61 FC | 	wrlong	result1, fp
26b98     04 4E 05 F1 | 	add	fp, #4
26b9c     A7 00 68 FC | 	wrlong	#0, fp
26ba0     1C 4E 85 F1 | 	sub	fp, #28
26ba4     A7 12 02 FB | 	rdlong	arg01, fp
26ba8     04 4E 85 F1 | 	sub	fp, #4
26bac     08 12 06 F1 | 	add	arg01, #8
26bb0     09 FB 01 FB | 	rdlong	result1, arg01
26bb4     01 FA CD F7 | 	test	result1, #1 wz
26bb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26bbc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26bc0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26bc4     01 FA 65 A6 |  if_e	neg	result1, #1
26bc8     74 02 90 AD |  if_e	jmp	#LR__3926
26bcc     04 4E 05 F1 | 	add	fp, #4
26bd0     A7 12 02 FB | 	rdlong	arg01, fp
26bd4     04 4E 85 F1 | 	sub	fp, #4
26bd8     14 12 06 F1 | 	add	arg01, #20
26bdc     09 FB 09 FB | 	rdlong	result1, arg01 wz
26be0     B8 00 90 AD |  if_e	jmp	#LR__3921
26be4     04 4E 05 F1 | 	add	fp, #4
26be8     A7 12 02 FB | 	rdlong	arg01, fp
26bec     09 17 02 F6 | 	mov	arg03, arg01
26bf0     14 16 06 F1 | 	add	arg03, #20
26bf4     0B 1F 02 FB | 	rdlong	local01, arg03
26bf8     0F 21 02 F6 | 	mov	local02, local01
26bfc     13 1E 46 F7 | 	zerox	local01, #19
26c00     14 20 46 F0 | 	shr	local02, #20
26c04     02 20 66 F0 | 	shl	local02, #2
26c08     ED 20 02 F1 | 	add	local02, __methods__
26c0c     10 21 02 FB | 	rdlong	local02, local02
26c10     04 4E 05 F1 | 	add	fp, #4
26c14     A7 14 02 FB | 	rdlong	arg02, fp
26c18     04 4E 05 F1 | 	add	fp, #4
26c1c     A7 16 02 FB | 	rdlong	arg03, fp
26c20     0C 4E 85 F1 | 	sub	fp, #12
26c24     F2 22 02 F6 | 	mov	local03, objptr
26c28     0F E5 01 F6 | 	mov	objptr, local01
26c2c     2D 20 62 FD | 	call	local02
26c30     11 E5 01 F6 | 	mov	objptr, local03
26c34     10 4E 05 F1 | 	add	fp, #16
26c38     A7 FA 61 FC | 	wrlong	result1, fp
26c3c     10 4E 85 F1 | 	sub	fp, #16
26c40     00 FA 55 F2 | 	cmps	result1, #0 wc
26c44     44 00 90 3D |  if_ae	jmp	#LR__3920
26c48     04 4E 05 F1 | 	add	fp, #4
26c4c     A7 22 02 FB | 	rdlong	local03, fp
26c50     11 1F 02 F6 | 	mov	local01, local03
26c54     08 22 06 F1 | 	add	local03, #8
26c58     11 21 02 FB | 	rdlong	local02, local03
26c5c     20 20 46 F5 | 	or	local02, #32
26c60     08 1E 06 F1 | 	add	local01, #8
26c64     0F 21 62 FC | 	wrlong	local02, local01
26c68     0C 4E 05 F1 | 	add	fp, #12
26c6c     A7 12 0A FB | 	rdlong	arg01, fp wz
26c70     10 4E 85 F1 | 	sub	fp, #16
26c74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26c78     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26c7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26c80     01 FA 65 56 |  if_ne	neg	result1, #1
26c84     00 FA 05 A6 |  if_e	mov	result1, #0
26c88     B4 01 90 FD | 	jmp	#LR__3926
26c8c                 | LR__3920
26c8c     10 4E 05 F1 | 	add	fp, #16
26c90     A7 FA 01 FB | 	rdlong	result1, fp
26c94     10 4E 85 F1 | 	sub	fp, #16
26c98     A4 01 90 FD | 	jmp	#LR__3926
26c9c                 | LR__3921
26c9c     04 4E 05 F1 | 	add	fp, #4
26ca0     A7 12 02 FB | 	rdlong	arg01, fp
26ca4     20 12 06 F1 | 	add	arg01, #32
26ca8     09 13 0A FB | 	rdlong	arg01, arg01 wz
26cac     14 4E 05 F1 | 	add	fp, #20
26cb0     A7 12 62 FC | 	wrlong	arg01, fp
26cb4     18 4E 85 F1 | 	sub	fp, #24
26cb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26cbc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26cc0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26cc4     01 FA 65 A6 |  if_e	neg	result1, #1
26cc8     74 01 90 AD |  if_e	jmp	#LR__3926
26ccc     04 4E 05 F1 | 	add	fp, #4
26cd0     A7 22 02 FB | 	rdlong	local03, fp
26cd4     04 4E 85 F1 | 	sub	fp, #4
26cd8     28 22 06 F1 | 	add	local03, #40
26cdc     11 21 0A FB | 	rdlong	local02, local03 wz
26ce0     7C 00 90 AD |  if_e	jmp	#LR__3923
26ce4     04 4E 05 F1 | 	add	fp, #4
26ce8     A7 12 02 FB | 	rdlong	arg01, fp
26cec     09 23 02 F6 | 	mov	local03, arg01
26cf0     28 22 06 F1 | 	add	local03, #40
26cf4     11 1F 02 FB | 	rdlong	local01, local03
26cf8     0F 21 02 F6 | 	mov	local02, local01
26cfc     13 1E 46 F7 | 	zerox	local01, #19
26d00     14 20 46 F0 | 	shr	local02, #20
26d04     02 20 66 F0 | 	shl	local02, #2
26d08     ED 20 02 F1 | 	add	local02, __methods__
26d0c     10 21 02 FB | 	rdlong	local02, local02
26d10     20 4E 05 F1 | 	add	fp, #32
26d14     A7 16 02 F6 | 	mov	arg03, fp
26d18     24 4E 85 F1 | 	sub	fp, #36
26d1c     00 15 06 F6 | 	mov	arg02, #256
26d20     F2 22 02 F6 | 	mov	local03, objptr
26d24     0F E5 01 F6 | 	mov	objptr, local01
26d28     2D 20 62 FD | 	call	local02
26d2c     11 E5 01 F6 | 	mov	objptr, local03
26d30     10 4E 05 F1 | 	add	fp, #16
26d34     A7 FA 61 FC | 	wrlong	result1, fp
26d38     00 FA 4D F2 | 	cmps	result1, #0 wz
26d3c     10 4E 85 F1 | 	sub	fp, #16
26d40     1C 00 90 5D |  if_ne	jmp	#LR__3922
26d44     24 4E 05 F1 | 	add	fp, #36
26d48     A7 20 02 FB | 	rdlong	local02, fp
26d4c     24 4E 85 F1 | 	sub	fp, #36
26d50     02 20 CE F7 | 	test	local02, #2 wz
26d54     20 4E 05 51 |  if_ne	add	fp, #32
26d58     A7 02 68 5C |  if_ne	wrlong	#1, fp
26d5c     20 4E 85 51 |  if_ne	sub	fp, #32
26d60                 | LR__3922
26d60                 | LR__3923
26d60     10 4E 05 F1 | 	add	fp, #16
26d64     A7 00 68 FC | 	wrlong	#0, fp
26d68     10 4E 85 F1 | 	sub	fp, #16
26d6c                 | LR__3924
26d6c     0C 4E 05 F1 | 	add	fp, #12
26d70     A7 22 02 FB | 	rdlong	local03, fp
26d74     0C 4E 85 F1 | 	sub	fp, #12
26d78     01 22 16 F2 | 	cmp	local03, #1 wc
26d7c     B4 00 90 CD |  if_b	jmp	#LR__3925
26d80     18 4E 05 F1 | 	add	fp, #24
26d84     A7 20 02 FB | 	rdlong	local02, fp
26d88     10 23 02 F6 | 	mov	local03, local02
26d8c     13 22 46 F7 | 	zerox	local03, #19
26d90     14 20 46 F0 | 	shr	local02, #20
26d94     02 20 66 F0 | 	shl	local02, #2
26d98     ED 20 02 F1 | 	add	local02, __methods__
26d9c     10 21 02 FB | 	rdlong	local02, local02
26da0     14 4E 85 F1 | 	sub	fp, #20
26da4     A7 12 02 FB | 	rdlong	arg01, fp
26da8     04 4E 85 F1 | 	sub	fp, #4
26dac     F2 1E 02 F6 | 	mov	local01, objptr
26db0     11 E5 01 F6 | 	mov	objptr, local03
26db4     2D 20 62 FD | 	call	local02
26db8     0F E5 01 F6 | 	mov	objptr, local01
26dbc     14 4E 05 F1 | 	add	fp, #20
26dc0     A7 FA 61 FC | 	wrlong	result1, fp
26dc4     14 4E 85 F1 | 	sub	fp, #20
26dc8     00 FA 55 F2 | 	cmps	result1, #0 wc
26dcc     64 00 90 CD |  if_b	jmp	#LR__3925
26dd0     1C 4E 05 F1 | 	add	fp, #28
26dd4     A7 22 02 FB | 	rdlong	local03, fp
26dd8     11 21 02 F6 | 	mov	local02, local03
26ddc     01 20 06 F1 | 	add	local02, #1
26de0     A7 20 62 FC | 	wrlong	local02, fp
26de4     08 4E 85 F1 | 	sub	fp, #8
26de8     A7 20 02 FB | 	rdlong	local02, fp
26dec     11 21 42 FC | 	wrbyte	local02, local03
26df0     04 4E 85 F1 | 	sub	fp, #4
26df4     A7 22 02 FB | 	rdlong	local03, fp
26df8     01 22 06 F1 | 	add	local03, #1
26dfc     A7 22 62 FC | 	wrlong	local03, fp
26e00     04 4E 85 F1 | 	sub	fp, #4
26e04     A7 22 02 FB | 	rdlong	local03, fp
26e08     01 22 86 F1 | 	sub	local03, #1
26e0c     A7 22 62 FC | 	wrlong	local03, fp
26e10     14 4E 05 F1 | 	add	fp, #20
26e14     A7 22 0A FB | 	rdlong	local03, fp wz
26e18     20 4E 85 F1 | 	sub	fp, #32
26e1c     4C FF 9F AD |  if_e	jmp	#LR__3924
26e20     14 4E 05 F1 | 	add	fp, #20
26e24     A7 20 02 FB | 	rdlong	local02, fp
26e28     14 4E 85 F1 | 	sub	fp, #20
26e2c     0A 20 0E F2 | 	cmp	local02, #10 wz
26e30     38 FF 9F 5D |  if_ne	jmp	#LR__3924
26e34                 | LR__3925
26e34     10 4E 05 F1 | 	add	fp, #16
26e38     A7 FA 01 FB | 	rdlong	result1, fp
26e3c     10 4E 85 F1 | 	sub	fp, #16
26e40                 | LR__3926
26e40     A7 F0 03 F6 | 	mov	ptra, fp
26e44     B2 00 A0 FD | 	call	#popregs_
26e48                 | __system___vfsread_ret
26e48     2D 00 64 FD | 	ret
26e4c                 | 
26e4c                 | __system____default_filbuf
26e4c     04 4A 05 F6 | 	mov	COUNT_, #4
26e50     A8 00 A0 FD | 	call	#pushregs_
26e54     09 1F 02 F6 | 	mov	local01, arg01
26e58     0F 21 02 FB | 	rdlong	local02, local01
26e5c     0C 20 06 F1 | 	add	local02, #12
26e60     10 FB 09 FB | 	rdlong	result1, local02 wz
26e64     0C 20 86 F1 | 	sub	local02, #12
26e68     20 00 90 5D |  if_ne	jmp	#LR__3930
26e6c     14 20 06 F1 | 	add	local02, #20
26e70     10 FB 01 F6 | 	mov	result1, local02
26e74     04 20 86 F1 | 	sub	local02, #4
26e78     10 FB 61 FC | 	wrlong	result1, local02
26e7c     04 20 86 F1 | 	sub	local02, #4
26e80     02 00 80 FF 
26e84     10 01 68 FC | 	wrlong	##1024, local02
26e88     0C 20 86 F1 | 	sub	local02, #12
26e8c                 | LR__3930
26e8c     14 1E 06 F1 | 	add	local01, #20
26e90     0F 23 02 FB | 	rdlong	local03, local01
26e94     11 25 02 F6 | 	mov	local04, local03
26e98     14 1E 86 F1 | 	sub	local01, #20
26e9c     13 24 46 F7 | 	zerox	local04, #19
26ea0     14 22 46 F0 | 	shr	local03, #20
26ea4     02 22 66 F0 | 	shl	local03, #2
26ea8     ED 22 02 F1 | 	add	local03, __methods__
26eac     11 23 02 FB | 	rdlong	local03, local03
26eb0     10 20 06 F1 | 	add	local02, #16
26eb4     10 15 02 FB | 	rdlong	arg02, local02
26eb8     04 20 86 F1 | 	sub	local02, #4
26ebc     10 17 02 FB | 	rdlong	arg03, local02
26ec0     0C 20 86 F1 | 	sub	local02, #12
26ec4     0F 13 02 F6 | 	mov	arg01, local01
26ec8     F2 1E 02 F6 | 	mov	local01, objptr
26ecc     12 E5 01 F6 | 	mov	objptr, local04
26ed0     2D 22 62 FD | 	call	local03
26ed4     0F E5 01 F6 | 	mov	objptr, local01
26ed8     FD 24 02 F6 | 	mov	local04, result1
26edc     00 24 56 F2 | 	cmps	local04, #0 wc
26ee0     01 FA 65 C6 |  if_b	neg	result1, #1
26ee4     28 00 90 CD |  if_b	jmp	#LR__3931
26ee8     10 25 62 FC | 	wrlong	local04, local02
26eec     10 20 06 F1 | 	add	local02, #16
26ef0     10 23 02 FB | 	rdlong	local03, local02
26ef4     0C 20 86 F1 | 	sub	local02, #12
26ef8     10 23 62 FC | 	wrlong	local03, local02
26efc     04 20 06 F1 | 	add	local02, #4
26f00     10 23 02 FB | 	rdlong	local03, local02
26f04     01 22 46 F5 | 	or	local03, #1
26f08     10 23 62 FC | 	wrlong	local03, local02
26f0c     12 FB 01 F6 | 	mov	result1, local04
26f10                 | LR__3931
26f10     A7 F0 03 F6 | 	mov	ptra, fp
26f14     B2 00 A0 FD | 	call	#popregs_
26f18                 | __system____default_filbuf_ret
26f18     2D 00 64 FD | 	ret
26f1c                 | 
26f1c                 | __system__getlower_1082
26f1c     41 12 56 F2 | 	cmps	arg01, #65 wc
26f20     10 00 90 CD |  if_b	jmp	#LR__3940
26f24     5B 12 56 F2 | 	cmps	arg01, #91 wc
26f28     09 FB 01 C6 |  if_b	mov	result1, arg01
26f2c     20 FA 05 C1 |  if_b	add	result1, #32
26f30     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
26f34                 | LR__3940
26f34     09 FB 01 F6 | 	mov	result1, arg01
26f38                 | __system__getlower_1082_ret
26f38     2D 00 64 FD | 	ret
26f3c                 | 
26f3c                 | __system___pat_match
26f3c     08 4A 05 F6 | 	mov	COUNT_, #8
26f40     A8 00 A0 FD | 	call	#pushregs_
26f44     09 1F 02 F6 | 	mov	local01, arg01
26f48                 | LR__3950
26f48     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
26f4c     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
26f50     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
26f54     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
26f58     2C 00 90 AD |  if_e	jmp	#LR__3951
26f5c     0A 13 C2 FA | 	rdbyte	arg01, arg02
26f60     B8 FF BF FD | 	call	#__system__getlower_1082
26f64     FD 22 02 F6 | 	mov	local03, result1
26f68     0F 13 C2 FA | 	rdbyte	arg01, local01
26f6c     AC FF BF FD | 	call	#__system__getlower_1082
26f70     11 FB 09 F2 | 	cmp	result1, local03 wz
26f74     00 FA 05 56 |  if_ne	mov	result1, #0
26f78     FC 00 90 5D |  if_ne	jmp	#LR__3959
26f7c     01 1E 06 F1 | 	add	local01, #1
26f80     01 14 06 F1 | 	add	arg02, #1
26f84     C0 FF 9F FD | 	jmp	#LR__3950
26f88                 | LR__3951
26f88     0A 23 C2 FA | 	rdbyte	local03, arg02
26f8c     2A 22 0E F2 | 	cmp	local03, #42 wz
26f90     D4 00 90 5D |  if_ne	jmp	#LR__3958
26f94     01 14 06 F1 | 	add	arg02, #1
26f98     0A 21 C2 FA | 	rdbyte	local02, arg02
26f9c     01 14 86 F1 | 	sub	arg02, #1
26fa0     2E 20 0E F2 | 	cmp	local02, #46 wz
26fa4     28 00 90 5D |  if_ne	jmp	#LR__3952
26fa8     02 14 06 F1 | 	add	arg02, #2
26fac     0A 21 C2 FA | 	rdbyte	local02, arg02
26fb0     02 14 86 F1 | 	sub	arg02, #2
26fb4     2A 20 0E F2 | 	cmp	local02, #42 wz
26fb8     03 14 06 A1 |  if_e	add	arg02, #3
26fbc     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
26fc0     03 14 86 A1 |  if_e	sub	arg02, #3
26fc4     12 27 0A A6 |  if_e	mov	local05, local04 wz
26fc8     01 FA 05 A6 |  if_e	mov	result1, #1
26fcc     A8 00 90 AD |  if_e	jmp	#LR__3959
26fd0                 | LR__3952
26fd0     01 14 06 F1 | 	add	arg02, #1
26fd4     00 28 06 F6 | 	mov	local06, #0
26fd8     97 1E 48 FB | 	callpa	#(@LR__3955-@LR__3953)>>2,fcache_load_ptr_
26fdc                 | LR__3953
26fdc     14 2B 02 F6 | 	mov	local07, local06
26fe0     0A 2B 02 F1 | 	add	local07, arg02
26fe4     15 2B CA FA | 	rdbyte	local07, local07 wz
26fe8     14 27 02 56 |  if_ne	mov	local05, local06
26fec     01 26 06 51 |  if_ne	add	local05, #1
26ff0     13 29 02 56 |  if_ne	mov	local06, local05
26ff4     E4 FF 9F 5D |  if_ne	jmp	#LR__3953
26ff8     00 2C 06 F6 | 	mov	local08, #0
26ffc                 | LR__3954
26ffc     16 2B 02 F6 | 	mov	local07, local08
27000     0F 2B 02 F1 | 	add	local07, local01
27004     15 2B CA FA | 	rdbyte	local07, local07 wz
27008     16 27 02 56 |  if_ne	mov	local05, local08
2700c     01 26 06 51 |  if_ne	add	local05, #1
27010     13 2D 02 56 |  if_ne	mov	local08, local05
27014     E4 FF 9F 5D |  if_ne	jmp	#LR__3954
27018                 | LR__3955
27018     14 2D 52 F2 | 	cmps	local08, local06 wc
2701c     00 FA 05 C6 |  if_b	mov	result1, #0
27020     54 00 90 CD |  if_b	jmp	#LR__3959
27024     16 21 02 F6 | 	mov	local02, local08
27028     14 21 82 F1 | 	sub	local02, local06
2702c     10 1F 02 F1 | 	add	local01, local02
27030                 | LR__3956
27030     01 28 56 F2 | 	cmps	local06, #1 wc
27034     30 00 90 CD |  if_b	jmp	#LR__3957
27038     0F 13 C2 FA | 	rdbyte	arg01, local01
2703c     DC FE BF FD | 	call	#__system__getlower_1082
27040     FD 2C 02 F6 | 	mov	local08, result1
27044     0A 13 C2 FA | 	rdbyte	arg01, arg02
27048     D0 FE BF FD | 	call	#__system__getlower_1082
2704c     FD 2C 0A F2 | 	cmp	local08, result1 wz
27050     00 FA 05 56 |  if_ne	mov	result1, #0
27054     20 00 90 5D |  if_ne	jmp	#LR__3959
27058     01 1E 06 F1 | 	add	local01, #1
2705c     01 14 06 F1 | 	add	arg02, #1
27060     01 28 86 F1 | 	sub	local06, #1
27064     C8 FF 9F FD | 	jmp	#LR__3956
27068                 | LR__3957
27068                 | LR__3958
27068     0A 2D CA FA | 	rdbyte	local08, arg02 wz
2706c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27070     01 FA 05 A6 |  if_e	mov	result1, #1
27074     00 FA 05 56 |  if_ne	mov	result1, #0
27078                 | LR__3959
27078     A7 F0 03 F6 | 	mov	ptra, fp
2707c     B2 00 A0 FD | 	call	#popregs_
27080                 | __system___pat_match_ret
27080     2D 00 64 FD | 	ret
27084                 | 
27084                 | _fatfs_cc_ff_uni2oem
27084     00 00 06 F6 | 	mov	_var01, #0
27088     80 12 16 F2 | 	cmp	arg01, #128 wc
2708c     09 01 02 C6 |  if_b	mov	_var01, arg01
27090     58 00 90 CD |  if_b	jmp	#LR__3964
27094     80 00 00 FF 
27098     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2709c     4C 00 90 3D |  if_ae	jmp	#LR__3963
270a0     0A FB 31 F9 | 	getword	result1, arg02, #0
270a4     01 00 00 FF 
270a8     52 FB 0D F2 | 	cmp	result1, ##850 wz
270ac     3C 00 90 5D |  if_ne	jmp	#LR__3963
270b0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
270b0     00 00 06 F6 | 	mov	_var01, #0
270b4     97 14 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
270b8                 | LR__3960
270b8     00 FB 31 F9 | 	getword	result1, _var01, #0
270bc     80 FA 15 F2 | 	cmp	result1, #128 wc
270c0     1C 00 90 3D |  if_ae	jmp	#LR__3962
270c4     00 FB 31 F9 | 	getword	result1, _var01, #0
270c8     01 FA 65 F0 | 	shl	result1, #1
270cc     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
270d0     FD FA E1 FA | 	rdword	result1, result1
270d4     FD 12 0A F2 | 	cmp	arg01, result1 wz
270d8     01 00 06 51 |  if_ne	add	_var01, #1
270dc     D8 FF 9F 5D |  if_ne	jmp	#LR__3960
270e0                 | LR__3961
270e0                 | LR__3962
270e0     00 01 32 F9 | 	getword	_var01, _var01, #0
270e4     80 00 06 F1 | 	add	_var01, #128
270e8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
270ec                 | LR__3963
270ec                 | LR__3964
270ec                 | ' 			c = (c + 0x80) & 0xFF;
270ec                 | ' 		}
270ec                 | ' 	}
270ec                 | ' 
270ec                 | ' 	return c;
270ec     00 FB 01 F6 | 	mov	result1, _var01
270f0                 | _fatfs_cc_ff_uni2oem_ret
270f0     2D 00 64 FD | 	ret
270f4                 | 
270f4                 | _fatfs_cc_ff_oem2uni
270f4     00 00 06 F6 | 	mov	_var01, #0
270f8     09 FB 31 F9 | 	getword	result1, arg01, #0
270fc     80 FA 15 F2 | 	cmp	result1, #128 wc
27100     09 01 02 C6 |  if_b	mov	_var01, arg01
27104     2C 00 90 CD |  if_b	jmp	#LR__3971
27108     0A 15 32 F9 | 	getword	arg02, arg02, #0
2710c     01 00 00 FF 
27110     52 15 0E F2 | 	cmp	arg02, ##850 wz
27114     1C 00 90 5D |  if_ne	jmp	#LR__3970
27118     09 FB 31 F9 | 	getword	result1, arg01, #0
2711c     00 FB 15 F2 | 	cmp	result1, #256 wc
27120     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
27124     80 12 86 C1 |  if_b	sub	arg01, #128
27128     01 12 66 C0 |  if_b	shl	arg01, #1
2712c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
27130     09 01 E2 CA |  if_b	rdword	_var01, arg01
27134                 | LR__3970
27134                 | LR__3971
27134                 | ' 		}
27134                 | ' 	}
27134                 | ' 
27134                 | ' 	return c;
27134     00 FB 01 F6 | 	mov	result1, _var01
27138                 | _fatfs_cc_ff_oem2uni_ret
27138     2D 00 64 FD | 	ret
2713c                 | 
2713c                 | _fatfs_cc_ff_wtoupper
2713c     09 01 02 F6 | 	mov	_var01, arg01
27140     80 00 00 FF 
27144     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27148     60 01 90 3D |  if_ae	jmp	#LR__3993
2714c     00 03 02 F6 | 	mov	_var02, _var01
27150     01 01 32 F9 | 	getword	_var01, _var02, #0
27154     08 00 00 FF 
27158     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2715c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27160     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
27164     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27168     01 00 00 3F 
2716c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27170     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
27174     01 00 00 3F 
27178     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2717c     02 07 02 F6 | 	mov	_var04, _var03
27180                 | ' 		uc = (WORD)uni;
27180                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27180                 | ' 		for (;;) {
27180                 | LR__3980
27180     03 09 E2 FA | 	rdword	_var05, _var04
27184     04 05 02 F6 | 	mov	_var03, _var05
27188     0F 04 4E F7 | 	zerox	_var03, #15 wz
2718c     02 06 06 F1 | 	add	_var04, #2
27190     14 01 90 AD |  if_e	jmp	#LR__3992
27194     01 05 32 F9 | 	getword	_var03, _var02, #0
27198     04 01 32 F9 | 	getword	_var01, _var05, #0
2719c     00 05 12 F2 | 	cmp	_var03, _var01 wc
271a0     04 01 90 CD |  if_b	jmp	#LR__3992
271a4     03 0B E2 FA | 	rdword	_var06, _var04
271a8     05 0D 32 F9 | 	getword	_var07, _var06, #0
271ac     08 0C 46 F0 | 	shr	_var07, #8
271b0     05 0B 32 F9 | 	getword	_var06, _var06, #0
271b4     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
271b8     01 05 32 F9 | 	getword	_var03, _var02, #0
271bc     04 0F 32 F9 | 	getword	_var08, _var05, #0
271c0     05 01 32 F9 | 	getword	_var01, _var06, #0
271c4     00 0F 02 F1 | 	add	_var08, _var01
271c8     07 05 52 F2 | 	cmps	_var03, _var08 wc
271cc     02 06 06 F1 | 	add	_var04, #2
271d0     C4 00 90 3D |  if_ae	jmp	#LR__3991
271d4                 | ' 				switch (cmd) {
271d4     06 11 32 F9 | 	getword	_var09, _var07, #0
271d8     09 10 26 F3 | 	fle	_var09, #9
271dc     30 10 62 FD | 	jmprel	_var09
271e0                 | LR__3981
271e0     24 00 90 FD | 	jmp	#LR__3982
271e4     3C 00 90 FD | 	jmp	#LR__3983
271e8     54 00 90 FD | 	jmp	#LR__3984
271ec     5C 00 90 FD | 	jmp	#LR__3985
271f0     64 00 90 FD | 	jmp	#LR__3986
271f4     6C 00 90 FD | 	jmp	#LR__3987
271f8     74 00 90 FD | 	jmp	#LR__3988
271fc     7C 00 90 FD | 	jmp	#LR__3989
27200     84 00 90 FD | 	jmp	#LR__3990
27204     A0 00 90 FD | 	jmp	#LR__3992
27208                 | LR__3982
27208     01 03 32 F9 | 	getword	_var02, _var02, #0
2720c     04 09 32 F9 | 	getword	_var05, _var05, #0
27210     04 03 82 F1 | 	sub	_var02, _var05
27214     01 02 66 F0 | 	shl	_var02, #1
27218     03 03 02 F1 | 	add	_var02, _var04
2721c     01 03 E2 FA | 	rdword	_var02, _var02
27220     84 00 90 FD | 	jmp	#LR__3992
27224                 | LR__3983
27224     01 05 32 F9 | 	getword	_var03, _var02, #0
27228     01 03 32 F9 | 	getword	_var02, _var02, #0
2722c     04 09 32 F9 | 	getword	_var05, _var05, #0
27230     04 03 82 F1 | 	sub	_var02, _var05
27234     01 02 06 F5 | 	and	_var02, #1
27238     02 03 C2 F2 | 	subr	_var02, _var03
2723c     68 00 90 FD | 	jmp	#LR__3992
27240                 | LR__3984
27240     01 03 32 F9 | 	getword	_var02, _var02, #0
27244     10 02 86 F1 | 	sub	_var02, #16
27248     5C 00 90 FD | 	jmp	#LR__3992
2724c                 | LR__3985
2724c     01 03 32 F9 | 	getword	_var02, _var02, #0
27250     20 02 86 F1 | 	sub	_var02, #32
27254     50 00 90 FD | 	jmp	#LR__3992
27258                 | LR__3986
27258     01 03 32 F9 | 	getword	_var02, _var02, #0
2725c     30 02 86 F1 | 	sub	_var02, #48
27260     44 00 90 FD | 	jmp	#LR__3992
27264                 | LR__3987
27264     01 03 32 F9 | 	getword	_var02, _var02, #0
27268     1A 02 86 F1 | 	sub	_var02, #26
2726c     38 00 90 FD | 	jmp	#LR__3992
27270                 | LR__3988
27270     01 03 32 F9 | 	getword	_var02, _var02, #0
27274     08 02 06 F1 | 	add	_var02, #8
27278     2C 00 90 FD | 	jmp	#LR__3992
2727c                 | LR__3989
2727c     01 03 32 F9 | 	getword	_var02, _var02, #0
27280     50 02 86 F1 | 	sub	_var02, #80
27284     20 00 90 FD | 	jmp	#LR__3992
27288                 | LR__3990
27288     01 03 32 F9 | 	getword	_var02, _var02, #0
2728c     0E 00 00 FF 
27290     60 02 86 F1 | 	sub	_var02, ##7264
27294                 | ' 				}
27294                 | ' 				break;
27294     10 00 90 FD | 	jmp	#LR__3992
27298                 | LR__3991
27298     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2729c     02 0A 06 AA |  if_e	mul	_var06, #2
272a0     05 07 02 A1 |  if_e	add	_var04, _var06
272a4     D8 FE 9F FD | 	jmp	#LR__3980
272a8                 | LR__3992
272a8     01 01 32 F9 | 	getword	_var01, _var02, #0
272ac                 | LR__3993
272ac                 | ' 		}
272ac                 | ' 		uni = uc;
272ac                 | ' 	}
272ac                 | ' 
272ac                 | ' 	return uni;
272ac     00 FB 01 F6 | 	mov	result1, _var01
272b0                 | _fatfs_cc_ff_wtoupper_ret
272b0     2D 00 64 FD | 	ret
272b4                 | 
272b4                 | _fatfs_cc_strncpy
272b4     09 01 02 F6 | 	mov	_var01, arg01
272b8     97 12 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
272bc                 | ' 
272bc                 | ' 	dscan = dst;
272bc                 | ' 	sscan = src;
272bc                 | ' 	count = n;
272bc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
272bc                 | LR__4000
272bc     01 16 86 F1 | 	sub	arg03, #1
272c0     00 16 56 F2 | 	cmps	arg03, #0 wc
272c4     18 00 90 CD |  if_b	jmp	#LR__4002
272c8     0A FB C1 FA | 	rdbyte	result1, arg02
272cc     00 FB 41 FC | 	wrbyte	result1, _var01
272d0     01 14 06 F1 | 	add	arg02, #1
272d4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
272d8                 | ' 		continue;
272d8     01 00 06 F1 | 	add	_var01, #1
272dc     DC FF 9F 5D |  if_ne	jmp	#LR__4000
272e0                 | LR__4001
272e0                 | LR__4002
272e0     97 0C 48 FB | 	callpa	#(@LR__4004-@LR__4003)>>2,fcache_load_ptr_
272e4                 | ' 	while (--count >= 0)
272e4                 | LR__4003
272e4     01 16 86 F1 | 	sub	arg03, #1
272e8     00 16 56 F2 | 	cmps	arg03, #0 wc
272ec     00 03 02 36 |  if_ae	mov	_var02, _var01
272f0     01 00 06 31 |  if_ae	add	_var01, #1
272f4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
272f8     E8 FF 9F 3D |  if_ae	jmp	#LR__4003
272fc                 | LR__4004
272fc                 | ' 		*dscan++ = '\0';
272fc                 | ' 	return(dst);
272fc     09 FB 01 F6 | 	mov	result1, arg01
27300                 | _fatfs_cc_strncpy_ret
27300     2D 00 64 FD | 	ret
27304                 | 
27304                 | _fatfs_cc_memcmp
27304                 | ' 	for (n = size; n > 0; n--)
27304     00 16 0E F2 | 	cmp	arg03, #0 wz
27308     28 00 90 AD |  if_e	jmp	#LR__4011
2730c                 | LR__4010
2730c     09 01 C2 FA | 	rdbyte	_var01, arg01
27310     0A 03 C2 FA | 	rdbyte	_var02, arg02
27314     01 01 0A F2 | 	cmp	_var01, _var02 wz
27318     01 12 06 A1 |  if_e	add	arg01, #1
2731c     01 14 06 A1 |  if_e	add	arg02, #1
27320                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
27320     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
27324     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
27328     01 FB 81 51 |  if_ne	sub	result1, _var02
2732c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
27330     F6 17 6E FB | 	djnz	arg03, #LR__4010
27334                 | LR__4011
27334                 | ' 
27334                 | ' 	return(0);
27334     00 FA 05 F6 | 	mov	result1, #0
27338                 | _fatfs_cc_memcmp_ret
27338     2D 00 64 FD | 	ret
2733c                 | 
2733c                 | _fatfs_cc_strncmp
2733c     09 01 0A F6 | 	mov	_var01, arg01 wz
27340     14 00 90 5D |  if_ne	jmp	#LR__4020
27344                 | ' 		return scan2 ? -1 : 0;
27344     00 14 0E F2 | 	cmp	arg02, #0 wz
27348     01 02 66 56 |  if_ne	neg	_var02, #1
2734c     00 02 06 A6 |  if_e	mov	_var02, #0
27350     01 FB 01 F6 | 	mov	result1, _var02
27354     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27358                 | LR__4020
27358     00 14 0E F2 | 	cmp	arg02, #0 wz
2735c     01 FA 05 A6 |  if_e	mov	result1, #1
27360     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27364     0B 05 02 F6 | 	mov	_var03, arg03
27368     97 16 48 FB | 	callpa	#(@LR__4022-@LR__4021)>>2,fcache_load_ptr_
2736c                 | ' 	count = n;
2736c                 | ' 	do {
2736c                 | LR__4021
2736c     00 07 C2 FA | 	rdbyte	_var04, _var01
27370     0A 09 02 F6 | 	mov	_var05, arg02
27374     04 0B C2 FA | 	rdbyte	_var06, _var05
27378     01 04 86 F1 | 	sub	_var03, #1
2737c     00 04 56 F2 | 	cmps	_var03, #0 wc
27380     01 00 06 F1 | 	add	_var01, #1
27384     01 14 06 F1 | 	add	arg02, #1
27388     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2738c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4023
27390     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27394     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4021
27398                 | LR__4022
27398                 | LR__4023
27398     00 04 56 F2 | 	cmps	_var03, #0 wc
2739c                 | ' 		return(0);
2739c     00 FA 05 C6 |  if_b	mov	result1, #0
273a0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
273a4     05 07 0A F2 | 	cmp	_var04, _var06 wz
273a8                 | ' 		return(0);
273a8     00 FA 05 A6 |  if_e	mov	result1, #0
273ac     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
273b0     00 06 0E F2 | 	cmp	_var04, #0 wz
273b4                 | ' 		return(-1);
273b4     01 FA 65 A6 |  if_e	neg	result1, #1
273b8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
273bc     00 0A 0E F2 | 	cmp	_var06, #0 wz
273c0                 | ' 		return(1);
273c0     01 FA 05 A6 |  if_e	mov	result1, #1
273c4                 | ' 		return(c1 - c2);
273c4     03 FB 01 56 |  if_ne	mov	result1, _var04
273c8     05 FB 81 51 |  if_ne	sub	result1, _var06
273cc                 | _fatfs_cc_strncmp_ret
273cc     2D 00 64 FD | 	ret
273d0                 | 
273d0                 | _fatfs_cc_strchr
273d0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
273d0                 | ' 	while ((c = *s++) != (char) charwanted)
273d0                 | LR__4030
273d0     09 01 02 F6 | 	mov	_var01, arg01
273d4     00 03 C2 FA | 	rdbyte	_var02, _var01
273d8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
273dc     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
273e0     03 05 0A F2 | 	cmp	_var03, _var04 wz
273e4     01 12 06 F1 | 	add	arg01, #1
273e8     14 00 90 AD |  if_e	jmp	#LR__4031
273ec     01 05 02 F6 | 	mov	_var03, _var02
273f0     07 04 4E F7 | 	zerox	_var03, #7 wz
273f4     00 FA 05 A6 |  if_e	mov	result1, #0
273f8     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
273fc     D0 FF 9F FD | 	jmp	#LR__4030
27400                 | LR__4031
27400                 | ' 	return((char *)--s);
27400     01 12 86 F1 | 	sub	arg01, #1
27404     09 FB 01 F6 | 	mov	result1, arg01
27408                 | _fatfs_cc_strchr_ret
27408     2D 00 64 FD | 	ret
2740c                 | 
2740c                 | _fatfs_cc_disk_initialize
2740c     04 4A 05 F6 | 	mov	COUNT_, #4
27410     A8 00 A0 FD | 	call	#pushregs_
27414     40 F0 07 F1 | 	add	ptra, #64
27418     04 4E 05 F1 | 	add	fp, #4
2741c     A7 12 42 FC | 	wrbyte	arg01, fp
27420     01 00 00 FF 
27424     14 E4 05 F1 | 	add	objptr, ##532
27428     F2 18 02 FB | 	rdlong	arg04, objptr
2742c     2C 4E 05 F1 | 	add	fp, #44
27430     A7 18 62 FC | 	wrlong	arg04, fp
27434     04 E4 85 F1 | 	sub	objptr, #4
27438     F2 18 02 FB | 	rdlong	arg04, objptr
2743c     04 4E 05 F1 | 	add	fp, #4
27440     A7 18 62 FC | 	wrlong	arg04, fp
27444     08 E4 05 F1 | 	add	objptr, #8
27448     F2 18 02 FB | 	rdlong	arg04, objptr
2744c     04 4E 05 F1 | 	add	fp, #4
27450     A7 18 62 FC | 	wrlong	arg04, fp
27454     04 E4 05 F1 | 	add	objptr, #4
27458     F2 18 02 FB | 	rdlong	arg04, objptr
2745c     04 4E 05 F1 | 	add	fp, #4
27460     A7 18 62 FC | 	wrlong	arg04, fp
27464     04 E4 05 F1 | 	add	objptr, #4
27468     F2 02 48 FC | 	wrbyte	#1, objptr
2746c     01 00 00 FF 
27470     20 E4 85 F1 | 	sub	objptr, ##544
27474     38 4E 85 F1 | 	sub	fp, #56
27478     A7 18 CA FA | 	rdbyte	arg04, fp wz
2747c     04 4E 85 F1 | 	sub	fp, #4
27480                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27480                 | '             return RES_NOTRDY;
27480     03 FA 05 56 |  if_ne	mov	result1, #3
27484     D8 05 90 5D |  if_ne	jmp	#LR__4058
27488     13 00 00 FF 
2748c     10 13 06 F6 | 	mov	arg01, ##10000
27490     08 98 BF FD | 	call	#__system___waitus
27494     30 4E 05 F1 | 	add	fp, #48
27498     A7 12 02 FB | 	rdlong	arg01, fp
2749c     09 01 08 FC | 	wrpin	#0, arg01
274a0     04 4E 05 F1 | 	add	fp, #4
274a4     A7 12 02 FB | 	rdlong	arg01, fp
274a8     09 01 08 FC | 	wrpin	#0, arg01
274ac     04 4E 05 F1 | 	add	fp, #4
274b0     A7 12 02 FB | 	rdlong	arg01, fp
274b4     09 01 08 FC | 	wrpin	#0, arg01
274b8     04 4E 05 F1 | 	add	fp, #4
274bc     A7 12 02 FB | 	rdlong	arg01, fp
274c0     09 00 80 FF 
274c4     09 01 08 FC | 	wrpin	##4608, arg01
274c8     0C 4E 85 F1 | 	sub	fp, #12
274cc     A7 12 02 FB | 	rdlong	arg01, fp
274d0     59 12 62 FD | 	drvh	arg01
274d4     04 4E 05 F1 | 	add	fp, #4
274d8     A7 12 02 FB | 	rdlong	arg01, fp
274dc     59 12 62 FD | 	drvh	arg01
274e0     04 4E 05 F1 | 	add	fp, #4
274e4     A7 12 02 FB | 	rdlong	arg01, fp
274e8     59 12 62 FD | 	drvh	arg01
274ec     04 4E 05 F1 | 	add	fp, #4
274f0     A7 12 02 FB | 	rdlong	arg01, fp
274f4     59 12 62 FD | 	drvh	arg01
274f8     20 4E 85 F1 | 	sub	fp, #32
274fc     00 04 80 FF 
27500     A7 20 68 FC | 	wrlong	##524304, fp
27504     04 4E 05 F1 | 	add	fp, #4
27508     20 03 80 FF 
2750c     A7 90 68 FC | 	wrlong	##409672, fp
27510     14 4E 05 F1 | 	add	fp, #20
27514     A7 1E 02 FB | 	rdlong	local01, fp
27518     18 4E 85 F1 | 	sub	fp, #24
2751c     A7 16 02 FB | 	rdlong	arg03, fp
27520     40 1E 62 FD | 	dirl	local01
27524     A0 03 80 FF 
27528     0F 91 08 FC | 	wrpin	##475208, local01
2752c     0F 17 12 FC | 	wxpin	arg03, local01
27530     0F 01 28 FC | 	wypin	#0, local01
27534     41 1E 62 FD | 	dirh	local01
27538     1C 4E 05 F1 | 	add	fp, #28
2753c     A7 20 02 FB | 	rdlong	local02, fp
27540     10 1F 82 F1 | 	sub	local01, local02
27544     07 1E 06 F5 | 	and	local01, #7
27548     18 1E 66 F0 | 	shl	local01, #24
2754c     78 14 06 F6 | 	mov	arg02, #120
27550     0F 15 42 F5 | 	or	arg02, local01
27554     14 4E 85 F1 | 	sub	fp, #20
27558     A7 14 62 FC | 	wrlong	arg02, fp
2755c     14 4E 05 F1 | 	add	fp, #20
27560     A7 12 02 FB | 	rdlong	arg01, fp
27564     10 14 26 F4 | 	bith	arg02, #16
27568     40 12 62 FD | 	dirl	arg01
2756c     09 15 02 FC | 	wrpin	arg02, arg01
27570     09 3F 18 FC | 	wxpin	#31, arg01
27574     FF FF FF FF 
27578     09 FF 2B FC | 	wypin	##-1, arg01
2757c     41 12 62 FD | 	dirh	arg01
27580     04 4E 85 F1 | 	sub	fp, #4
27584     A7 14 02 FB | 	rdlong	arg02, fp
27588     08 4E 05 F1 | 	add	fp, #8
2758c     A7 22 02 FB | 	rdlong	local03, fp
27590     11 15 82 F1 | 	sub	arg02, local03
27594     07 14 06 F5 | 	and	arg02, #7
27598     18 14 66 F0 | 	shl	arg02, #24
2759c     14 4E 85 F1 | 	sub	fp, #20
275a0     A7 14 62 FC | 	wrlong	arg02, fp
275a4     29 00 00 FF 
275a8     7A 14 46 F5 | 	or	arg02, ##21114
275ac     A7 14 62 FC | 	wrlong	arg02, fp
275b0     14 4E 05 F1 | 	add	fp, #20
275b4     A7 12 02 FB | 	rdlong	arg01, fp
275b8     40 12 62 FD | 	dirl	arg01
275bc     09 15 02 FC | 	wrpin	arg02, arg01
275c0     09 4F 18 FC | 	wxpin	#39, arg01
275c4     09 01 28 FC | 	wypin	#0, arg01
275c8     41 12 62 FD | 	dirh	arg01
275cc     28 4E 85 F1 | 	sub	fp, #40
275d0     A7 12 02 F6 | 	mov	arg01, fp
275d4     14 4E 85 F1 | 	sub	fp, #20
275d8     0A 14 06 F6 | 	mov	arg02, #10
275dc     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
275e0     00 12 06 F6 | 	mov	arg01, #0
275e4     00 14 06 F6 | 	mov	arg02, #0
275e8     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
275ec     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
275f0     64 12 06 F6 | 	mov	arg01, #100
275f4     A4 96 BF FD | 	call	#__system___waitus
275f8     14 4E 05 F1 | 	add	fp, #20
275fc     A7 12 02 F6 | 	mov	arg01, fp
27600     14 4E 85 F1 | 	sub	fp, #20
27604     0A 14 06 F6 | 	mov	arg02, #10
27608     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2760c     0C 4E 05 F1 | 	add	fp, #12
27610     A7 00 48 FC | 	wrbyte	#0, fp
27614     0C 4E 85 F1 | 	sub	fp, #12
27618     00 12 06 F6 | 	mov	arg01, #0
2761c     00 14 06 F6 | 	mov	arg02, #0
27620     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27624     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
27628     01 18 0E F2 | 	cmp	arg04, #1 wz
2762c     B8 03 90 5D |  if_ne	jmp	#LR__4057
27630     08 12 06 F6 | 	mov	arg01, #8
27634     AA 15 06 F6 | 	mov	arg02, #426
27638     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
2763c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27640     01 FA 0D F2 | 	cmp	result1, #1 wz
27644     98 01 90 5D |  if_ne	jmp	#LR__4043
27648     14 4E 05 F1 | 	add	fp, #20
2764c     A7 12 02 F6 | 	mov	arg01, fp
27650     14 4E 85 F1 | 	sub	fp, #20
27654     04 14 06 F6 | 	mov	arg02, #4
27658     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2765c     16 4E 05 F1 | 	add	fp, #22
27660     A7 24 C2 FA | 	rdbyte	local04, fp
27664     16 4E 85 F1 | 	sub	fp, #22
27668     01 24 0E F2 | 	cmp	local04, #1 wz
2766c     17 4E 05 A1 |  if_e	add	fp, #23
27670     A7 22 C2 AA |  if_e	rdbyte	local03, fp
27674     17 4E 85 A1 |  if_e	sub	fp, #23
27678     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
2767c     68 03 90 5D |  if_ne	jmp	#LR__4056
27680                 | ' 				for (tmr = 1000; tmr; tmr--) {
27680     18 4E 05 F1 | 	add	fp, #24
27684     01 00 80 FF 
27688     A7 D0 6B FC | 	wrlong	##1000, fp
2768c     18 4E 85 F1 | 	sub	fp, #24
27690                 | LR__4040
27690     18 4E 05 F1 | 	add	fp, #24
27694     A7 1E 0A FB | 	rdlong	local01, fp wz
27698     18 4E 85 F1 | 	sub	fp, #24
2769c     3C 00 90 AD |  if_e	jmp	#LR__4041
276a0     A9 12 06 F6 | 	mov	arg01, #169
276a4     1E 14 C6 F9 | 	decod	arg02, #30
276a8     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
276ac     FD 24 02 F6 | 	mov	local04, result1
276b0     07 24 4E F7 | 	zerox	local04, #7 wz
276b4     24 00 90 AD |  if_e	jmp	#LR__4041
276b8     01 00 00 FF 
276bc     E8 13 06 F6 | 	mov	arg01, ##1000
276c0     D8 95 BF FD | 	call	#__system___waitus
276c4     18 4E 05 F1 | 	add	fp, #24
276c8     A7 24 02 FB | 	rdlong	local04, fp
276cc     01 24 86 F1 | 	sub	local04, #1
276d0     A7 24 62 FC | 	wrlong	local04, fp
276d4     18 4E 85 F1 | 	sub	fp, #24
276d8     B4 FF 9F FD | 	jmp	#LR__4040
276dc                 | LR__4041
276dc     18 4E 05 F1 | 	add	fp, #24
276e0     A7 24 0A FB | 	rdlong	local04, fp wz
276e4     18 4E 85 F1 | 	sub	fp, #24
276e8     4C 00 90 AD |  if_e	jmp	#LR__4042
276ec     3A 12 06 F6 | 	mov	arg01, #58
276f0     00 14 06 F6 | 	mov	arg02, #0
276f4     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
276f8     FD 22 02 F6 | 	mov	local03, result1
276fc     07 22 4E F7 | 	zerox	local03, #7 wz
27700     34 00 90 5D |  if_ne	jmp	#LR__4042
27704     14 4E 05 F1 | 	add	fp, #20
27708     A7 12 02 F6 | 	mov	arg01, fp
2770c     14 4E 85 F1 | 	sub	fp, #20
27710     04 14 06 F6 | 	mov	arg02, #4
27714     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27718     14 4E 05 F1 | 	add	fp, #20
2771c     A7 1E C2 FA | 	rdbyte	local01, fp
27720     40 1E CE F7 | 	test	local01, #64 wz
27724     0C 24 06 56 |  if_ne	mov	local04, #12
27728     04 24 06 A6 |  if_e	mov	local04, #4
2772c     08 4E 85 F1 | 	sub	fp, #8
27730     A7 24 42 FC | 	wrbyte	local04, fp
27734     0C 4E 85 F1 | 	sub	fp, #12
27738                 | LR__4042
27738     14 24 06 FB | 	rdlong	local04, #20
2773c     18 4E 05 F1 | 	add	fp, #24
27740     A7 24 62 FC | 	wrlong	local04, fp
27744     0C 4E 05 F1 | 	add	fp, #12
27748     A7 24 02 FB | 	rdlong	local04, fp
2774c     1B 24 26 F4 | 	bith	local04, #27
27750     A7 24 62 FC | 	wrlong	local04, fp
27754     0C 4E 85 F1 | 	sub	fp, #12
27758     A7 24 02 FB | 	rdlong	local04, fp
2775c     18 4E 85 F1 | 	sub	fp, #24
27760     68 78 04 FF 
27764     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27768     1C 4E 05 C1 |  if_b	add	fp, #28
2776c     00 01 80 CF 
27770     A7 08 68 CC |  if_b	wrlong	##131076, fp
27774     1C 4E 85 C1 |  if_b	sub	fp, #28
27778     6C 02 90 CD |  if_b	jmp	#LR__4056
2777c     18 4E 05 F1 | 	add	fp, #24
27780     A7 24 02 FB | 	rdlong	local04, fp
27784     18 4E 85 F1 | 	sub	fp, #24
27788     E1 F5 05 FF 
2778c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27790     1C 4E 05 C1 |  if_b	add	fp, #28
27794     00 01 80 CF 
27798     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2779c     1C 4E 85 C1 |  if_b	sub	fp, #28
277a0     44 02 90 CD |  if_b	jmp	#LR__4056
277a4     18 4E 05 F1 | 	add	fp, #24
277a8     A7 24 02 FB | 	rdlong	local04, fp
277ac     18 4E 85 F1 | 	sub	fp, #24
277b0     3B 58 08 FF 
277b4     01 24 16 F2 | 	cmp	local04, ##280000001 wc
277b8     1C 4E 05 C1 |  if_b	add	fp, #28
277bc     00 01 80 CF 
277c0     A7 0C 68 CC |  if_b	wrlong	##131078, fp
277c4     1C 4E 85 C1 |  if_b	sub	fp, #28
277c8     1C 02 90 CD |  if_b	jmp	#LR__4056
277cc     1C 4E 05 F1 | 	add	fp, #28
277d0     80 01 80 FF 
277d4     A7 10 68 FC | 	wrlong	##196616, fp
277d8     1C 4E 85 F1 | 	sub	fp, #28
277dc     08 02 90 FD | 	jmp	#LR__4056
277e0                 | LR__4043
277e0     A9 12 06 F6 | 	mov	arg01, #169
277e4     00 14 06 F6 | 	mov	arg02, #0
277e8     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277ec     FD 24 E2 F8 | 	getbyte	local04, result1, #0
277f0     02 24 16 F2 | 	cmp	local04, #2 wc
277f4     18 00 90 3D |  if_ae	jmp	#LR__4044
277f8     0C 4E 05 F1 | 	add	fp, #12
277fc     A7 04 48 FC | 	wrbyte	#2, fp
27800     04 4E 05 F1 | 	add	fp, #4
27804     A7 52 49 FC | 	wrbyte	#169, fp
27808     10 4E 85 F1 | 	sub	fp, #16
2780c     14 00 90 FD | 	jmp	#LR__4045
27810                 | LR__4044
27810     0C 4E 05 F1 | 	add	fp, #12
27814     A7 02 48 FC | 	wrbyte	#1, fp
27818     04 4E 05 F1 | 	add	fp, #4
2781c     A7 02 48 FC | 	wrbyte	#1, fp
27820     10 4E 85 F1 | 	sub	fp, #16
27824                 | LR__4045
27824                 | ' 				ty =  0x01 ; cmd =  (1) ;
27824                 | ' 			}
27824                 | ' 			for (tmr = 1000; tmr; tmr--) {
27824     18 4E 05 F1 | 	add	fp, #24
27828     01 00 80 FF 
2782c     A7 D0 6B FC | 	wrlong	##1000, fp
27830     18 4E 85 F1 | 	sub	fp, #24
27834                 | LR__4046
27834     18 4E 05 F1 | 	add	fp, #24
27838     A7 22 0A FB | 	rdlong	local03, fp wz
2783c     18 4E 85 F1 | 	sub	fp, #24
27840     44 00 90 AD |  if_e	jmp	#LR__4047
27844     10 4E 05 F1 | 	add	fp, #16
27848     A7 12 C2 FA | 	rdbyte	arg01, fp
2784c     10 4E 85 F1 | 	sub	fp, #16
27850     00 14 06 F6 | 	mov	arg02, #0
27854     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27858     FD 24 02 F6 | 	mov	local04, result1
2785c     07 24 4E F7 | 	zerox	local04, #7 wz
27860     24 00 90 AD |  if_e	jmp	#LR__4047
27864     01 00 00 FF 
27868     E8 13 06 F6 | 	mov	arg01, ##1000
2786c     2C 94 BF FD | 	call	#__system___waitus
27870     18 4E 05 F1 | 	add	fp, #24
27874     A7 24 02 FB | 	rdlong	local04, fp
27878     01 24 86 F1 | 	sub	local04, #1
2787c     A7 24 62 FC | 	wrlong	local04, fp
27880     18 4E 85 F1 | 	sub	fp, #24
27884     AC FF 9F FD | 	jmp	#LR__4046
27888                 | LR__4047
27888     18 4E 05 F1 | 	add	fp, #24
2788c     A7 24 0A FB | 	rdlong	local04, fp wz
27890     18 4E 85 F1 | 	sub	fp, #24
27894     14 00 90 AD |  if_e	jmp	#LR__4048
27898     10 12 06 F6 | 	mov	arg01, #16
2789c     09 14 C6 F9 | 	decod	arg02, #9
278a0     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
278a4     07 FA 4D F7 | 	zerox	result1, #7 wz
278a8     0C 00 90 AD |  if_e	jmp	#LR__4049
278ac                 | LR__4048
278ac     0C 4E 05 F1 | 	add	fp, #12
278b0     A7 00 48 FC | 	wrbyte	#0, fp
278b4     0C 4E 85 F1 | 	sub	fp, #12
278b8                 | LR__4049
278b8     14 24 06 FB | 	rdlong	local04, #20
278bc     18 4E 05 F1 | 	add	fp, #24
278c0     A7 24 62 FC | 	wrlong	local04, fp
278c4     18 4E 85 F1 | 	sub	fp, #24
278c8     F0 FA 02 FF 
278cc     01 25 16 F2 | 	cmp	local04, ##100000001 wc
278d0     18 00 90 3D |  if_ae	jmp	#LR__4050
278d4     24 4E 05 F1 | 	add	fp, #36
278d8     A7 24 02 FB | 	rdlong	local04, fp
278dc     1B 24 26 F4 | 	bith	local04, #27
278e0     A7 24 62 FC | 	wrlong	local04, fp
278e4     24 4E 85 F1 | 	sub	fp, #36
278e8     2C 00 90 FD | 	jmp	#LR__4051
278ec                 | LR__4050
278ec     18 4E 05 F1 | 	add	fp, #24
278f0     A7 24 02 FB | 	rdlong	local04, fp
278f4     18 4E 85 F1 | 	sub	fp, #24
278f8     E1 F5 05 FF 
278fc     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27900     24 4E 05 C1 |  if_b	add	fp, #36
27904     A7 24 02 CB |  if_b	rdlong	local04, fp
27908     80 00 04 CF 
2790c     00 24 46 C5 |  if_b	or	local04, ##134283264
27910     A7 24 62 CC |  if_b	wrlong	local04, fp
27914     24 4E 85 C1 |  if_b	sub	fp, #36
27918                 | LR__4051
27918     18 4E 05 F1 | 	add	fp, #24
2791c     A7 24 02 FB | 	rdlong	local04, fp
27920     18 4E 85 F1 | 	sub	fp, #24
27924     F0 FA 02 FF 
27928     01 25 16 F2 | 	cmp	local04, ##100000001 wc
2792c     1C 4E 05 C1 |  if_b	add	fp, #28
27930     00 01 80 CF 
27934     A7 08 68 CC |  if_b	wrlong	##131076, fp
27938     1C 4E 85 C1 |  if_b	sub	fp, #28
2793c     A8 00 90 CD |  if_b	jmp	#LR__4055
27940     18 4E 05 F1 | 	add	fp, #24
27944     A7 24 02 FB | 	rdlong	local04, fp
27948     18 4E 85 F1 | 	sub	fp, #24
2794c     68 78 04 FF 
27950     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27954     1C 4E 05 C1 |  if_b	add	fp, #28
27958     80 01 80 CF 
2795c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27960     1C 4E 85 C1 |  if_b	sub	fp, #28
27964     80 00 90 CD |  if_b	jmp	#LR__4054
27968     18 4E 05 F1 | 	add	fp, #24
2796c     A7 24 02 FB | 	rdlong	local04, fp
27970     18 4E 85 F1 | 	sub	fp, #24
27974     E1 F5 05 FF 
27978     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2797c     1C 4E 05 C1 |  if_b	add	fp, #28
27980     00 02 80 CF 
27984     A7 10 68 CC |  if_b	wrlong	##262152, fp
27988     1C 4E 85 C1 |  if_b	sub	fp, #28
2798c     58 00 90 CD |  if_b	jmp	#LR__4053
27990     18 4E 05 F1 | 	add	fp, #24
27994     A7 24 02 FB | 	rdlong	local04, fp
27998     18 4E 85 F1 | 	sub	fp, #24
2799c     59 73 07 FF 
279a0     81 24 16 F2 | 	cmp	local04, ##250000001 wc
279a4     1C 4E 05 C1 |  if_b	add	fp, #28
279a8     80 02 80 CF 
279ac     A7 14 68 CC |  if_b	wrlong	##327690, fp
279b0     1C 4E 85 C1 |  if_b	sub	fp, #28
279b4     30 00 90 CD |  if_b	jmp	#LR__4052
279b8     18 4E 05 F1 | 	add	fp, #24
279bc     A7 24 02 FB | 	rdlong	local04, fp
279c0     18 4E 85 F1 | 	sub	fp, #24
279c4     D1 F0 08 FF 
279c8     01 25 16 F2 | 	cmp	local04, ##300000001 wc
279cc     1C 4E 05 C1 |  if_b	add	fp, #28
279d0     00 03 80 CF 
279d4     A7 18 68 CC |  if_b	wrlong	##393228, fp
279d8     1C 4E 85 F3 | 	sumc	fp, #28
279dc     80 03 80 3F 
279e0     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
279e4     1C 4E 85 31 |  if_ae	sub	fp, #28
279e8                 | LR__4052
279e8                 | LR__4053
279e8                 | LR__4054
279e8                 | LR__4055
279e8                 | LR__4056
279e8                 | LR__4057
279e8     0C 4E 05 F1 | 	add	fp, #12
279ec     A7 24 C2 FA | 	rdbyte	local04, fp
279f0     01 00 00 FF 
279f4     21 E4 05 F1 | 	add	objptr, ##545
279f8     F2 24 42 FC | 	wrbyte	local04, objptr
279fc     A7 1E CA FA | 	rdbyte	local01, fp wz
27a00     00 24 06 56 |  if_ne	mov	local04, #0
27a04     01 24 06 A6 |  if_e	mov	local04, #1
27a08     20 4E 05 F1 | 	add	fp, #32
27a0c     A7 24 42 FC | 	wrbyte	local04, fp
27a10     A7 24 C2 FA | 	rdbyte	local04, fp
27a14     2C 4E 85 F1 | 	sub	fp, #44
27a18     01 E4 85 F1 | 	sub	objptr, #1
27a1c     F2 24 42 FC | 	wrbyte	local04, objptr
27a20     01 00 00 FF 
27a24     20 E4 85 F1 | 	sub	objptr, ##544
27a28     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
27a2c     34 4E 05 F1 | 	add	fp, #52
27a30     A7 12 02 FB | 	rdlong	arg01, fp
27a34     18 4E 85 F1 | 	sub	fp, #24
27a38     A7 14 02 FB | 	rdlong	arg02, fp
27a3c     09 15 12 FC | 	wxpin	arg02, arg01
27a40     1C 4E 05 F1 | 	add	fp, #28
27a44     A7 12 02 FB | 	rdlong	arg01, fp
27a48     14 4E 85 F1 | 	sub	fp, #20
27a4c     A7 14 02 FB | 	rdlong	arg02, fp
27a50     09 15 02 FC | 	wrpin	arg02, arg01
27a54                 | ' 
27a54                 | ' 		}
27a54                 | ' 	}
27a54                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a54                 | ' 	CardType = ty;
27a54                 | ' 	s = ty ? 0 :  0x01 ;
27a54                 | ' 	Stat = s;
27a54                 | ' 
27a54                 | ' 	deselect();
27a54                 | ' 
27a54                 | ' 
27a54                 | ' 	_wxpin( PIN_CLK, ck_div );
27a54                 | ' 	_wrpin( PIN_DI, spm_tx );
27a54                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a54                 | ' 	return s;
27a54     08 4E 05 F1 | 	add	fp, #8
27a58     A7 FA C1 FA | 	rdbyte	result1, fp
27a5c     2C 4E 85 F1 | 	sub	fp, #44
27a60                 | LR__4058
27a60     A7 F0 03 F6 | 	mov	ptra, fp
27a64     B2 00 A0 FD | 	call	#popregs_
27a68                 | _fatfs_cc_disk_initialize_ret
27a68     2D 00 64 FD | 	ret
27a6c                 | 
27a6c                 | _fatfs_cc_disk_read
27a6c     05 4A 05 F6 | 	mov	COUNT_, #5
27a70     A8 00 A0 FD | 	call	#pushregs_
27a74     0A 1F 02 F6 | 	mov	local01, arg02
27a78     0B 21 02 F6 | 	mov	local02, arg03
27a7c     0C 23 02 F6 | 	mov	local03, arg04
27a80     00 12 0E F2 | 	cmp	arg01, #0 wz
27a84     01 FA 05 56 |  if_ne	mov	result1, #1
27a88                 | ' 
27a88                 | ' 	return Stat;
27a88     01 00 00 AF 
27a8c     20 E4 05 A1 |  if_e	add	objptr, ##544
27a90     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27a94     01 00 00 AF 
27a98     20 E4 85 A1 |  if_e	sub	objptr, ##544
27a9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27aa0     01 FA CD F7 | 	test	result1, #1 wz
27aa4     03 FA 05 56 |  if_ne	mov	result1, #3
27aa8     84 00 90 5D |  if_ne	jmp	#LR__4062
27aac     01 00 00 FF 
27ab0     21 E4 05 F1 | 	add	objptr, ##545
27ab4     F2 24 C2 FA | 	rdbyte	local04, objptr
27ab8     01 00 00 FF 
27abc     21 E4 85 F1 | 	sub	objptr, ##545
27ac0     08 24 CE F7 | 	test	local04, #8 wz
27ac4     09 20 66 A0 |  if_e	shl	local02, #9
27ac8     02 22 16 F2 | 	cmp	local03, #2 wc
27acc     12 24 06 36 |  if_ae	mov	local04, #18
27ad0     11 24 06 C6 |  if_b	mov	local04, #17
27ad4     10 15 02 F6 | 	mov	arg02, local02
27ad8     12 13 02 F6 | 	mov	arg01, local04
27adc     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27ae0     FD 26 02 F6 | 	mov	local05, result1
27ae4     07 26 4E F7 | 	zerox	local05, #7 wz
27ae8     30 00 90 5D |  if_ne	jmp	#LR__4061
27aec                 | ' 		do {
27aec                 | LR__4060
27aec     0F 13 02 F6 | 	mov	arg01, local01
27af0     09 14 C6 F9 | 	decod	arg02, #9
27af4     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27af8     00 FA 0D F2 | 	cmp	result1, #0 wz
27afc     01 00 00 5F 
27b00     00 1E 06 51 |  if_ne	add	local01, ##512
27b04     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4060
27b08     12 25 E2 F8 | 	getbyte	local04, local04, #0
27b0c     12 24 0E F2 | 	cmp	local04, #18 wz
27b10     0C 12 06 A6 |  if_e	mov	arg01, #12
27b14     00 14 06 A6 |  if_e	mov	arg02, #0
27b18     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27b1c                 | LR__4061
27b1c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27b20                 | ' 	}
27b20                 | ' 	deselect();
27b20                 | ' 
27b20                 | ' 	return count ? RES_ERROR : RES_OK;
27b20     00 22 0E F2 | 	cmp	local03, #0 wz
27b24     01 26 06 56 |  if_ne	mov	local05, #1
27b28     00 26 06 A6 |  if_e	mov	local05, #0
27b2c     13 FB 01 F6 | 	mov	result1, local05
27b30                 | LR__4062
27b30     A7 F0 03 F6 | 	mov	ptra, fp
27b34     B2 00 A0 FD | 	call	#popregs_
27b38                 | _fatfs_cc_disk_read_ret
27b38     2D 00 64 FD | 	ret
27b3c                 | 
27b3c                 | _fatfs_cc_disk_write
27b3c     04 4A 05 F6 | 	mov	COUNT_, #4
27b40     A8 00 A0 FD | 	call	#pushregs_
27b44     0A 1F 02 F6 | 	mov	local01, arg02
27b48     0C 21 02 F6 | 	mov	local02, arg04
27b4c     0B 23 02 F6 | 	mov	local03, arg03
27b50     00 12 0E F2 | 	cmp	arg01, #0 wz
27b54     01 FA 05 56 |  if_ne	mov	result1, #1
27b58                 | ' 
27b58                 | ' 	return Stat;
27b58     01 00 00 AF 
27b5c     20 E4 05 A1 |  if_e	add	objptr, ##544
27b60     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27b64     01 00 00 AF 
27b68     20 E4 85 A1 |  if_e	sub	objptr, ##544
27b6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27b70     01 FA CD F7 | 	test	result1, #1 wz
27b74     03 FA 05 56 |  if_ne	mov	result1, #3
27b78     D4 00 90 5D |  if_ne	jmp	#LR__4074
27b7c     01 00 00 FF 
27b80     21 E4 05 F1 | 	add	objptr, ##545
27b84     F2 16 C2 FA | 	rdbyte	arg03, objptr
27b88     01 00 00 FF 
27b8c     21 E4 85 F1 | 	sub	objptr, ##545
27b90     08 16 CE F7 | 	test	arg03, #8 wz
27b94     09 22 66 A0 |  if_e	shl	local03, #9
27b98     01 20 0E F2 | 	cmp	local02, #1 wz
27b9c     30 00 90 5D |  if_ne	jmp	#LR__4070
27ba0     18 12 06 F6 | 	mov	arg01, #24
27ba4     11 15 02 F6 | 	mov	arg02, local03
27ba8     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27bac     FD 24 02 F6 | 	mov	local04, result1
27bb0     07 24 4E F7 | 	zerox	local04, #7 wz
27bb4     84 00 90 5D |  if_ne	jmp	#LR__4073
27bb8     0F 13 02 F6 | 	mov	arg01, local01
27bbc     FE 14 06 F6 | 	mov	arg02, #254
27bc0     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
27bc8     00 20 06 56 |  if_ne	mov	local02, #0
27bcc     6C 00 90 FD | 	jmp	#LR__4073
27bd0                 | LR__4070
27bd0     01 00 00 FF 
27bd4     21 E4 05 F1 | 	add	objptr, ##545
27bd8     F2 24 C2 FA | 	rdbyte	local04, objptr
27bdc     01 00 00 FF 
27be0     21 E4 85 F1 | 	sub	objptr, ##545
27be4     06 24 CE F7 | 	test	local04, #6 wz
27be8     97 12 06 56 |  if_ne	mov	arg01, #151
27bec     10 15 02 56 |  if_ne	mov	arg02, local02
27bf0     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27bf4     11 15 02 F6 | 	mov	arg02, local03
27bf8     19 12 06 F6 | 	mov	arg01, #25
27bfc     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27c00     FD 24 02 F6 | 	mov	local04, result1
27c04     07 24 4E F7 | 	zerox	local04, #7 wz
27c08     30 00 90 5D |  if_ne	jmp	#LR__4072
27c0c                 | ' 			do {
27c0c                 | LR__4071
27c0c     0F 13 02 F6 | 	mov	arg01, local01
27c10     FC 14 06 F6 | 	mov	arg02, #252
27c14     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27c18     00 FA 0D F2 | 	cmp	result1, #0 wz
27c1c     01 00 00 5F 
27c20     00 1E 06 51 |  if_ne	add	local01, ##512
27c24     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4071
27c28     00 12 06 F6 | 	mov	arg01, #0
27c2c     FD 14 06 F6 | 	mov	arg02, #253
27c30     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27c34     00 FA 0D F2 | 	cmp	result1, #0 wz
27c38     01 20 06 A6 |  if_e	mov	local02, #1
27c3c                 | LR__4072
27c3c                 | LR__4073
27c3c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27c40                 | ' 				count = 1;
27c40                 | ' 		}
27c40                 | ' 	}
27c40                 | ' 	deselect();
27c40                 | ' 
27c40                 | ' 	return count ? RES_ERROR : RES_OK;
27c40     00 20 0E F2 | 	cmp	local02, #0 wz
27c44     01 24 06 56 |  if_ne	mov	local04, #1
27c48     00 24 06 A6 |  if_e	mov	local04, #0
27c4c     12 FB 01 F6 | 	mov	result1, local04
27c50                 | LR__4074
27c50     A7 F0 03 F6 | 	mov	ptra, fp
27c54     B2 00 A0 FD | 	call	#popregs_
27c58                 | _fatfs_cc_disk_write_ret
27c58     2D 00 64 FD | 	ret
27c5c                 | 
27c5c                 | _fatfs_cc_disk_ioctl
27c5c     01 4A 05 F6 | 	mov	COUNT_, #1
27c60     A8 00 A0 FD | 	call	#pushregs_
27c64     30 F0 07 F1 | 	add	ptra, #48
27c68     04 4E 05 F1 | 	add	fp, #4
27c6c     A7 12 42 FC | 	wrbyte	arg01, fp
27c70     04 4E 05 F1 | 	add	fp, #4
27c74     A7 14 42 FC | 	wrbyte	arg02, fp
27c78     04 4E 05 F1 | 	add	fp, #4
27c7c     A7 16 62 FC | 	wrlong	arg03, fp
27c80     08 4E 85 F1 | 	sub	fp, #8
27c84     A7 12 CA FA | 	rdbyte	arg01, fp wz
27c88     04 4E 85 F1 | 	sub	fp, #4
27c8c     01 FA 05 56 |  if_ne	mov	result1, #1
27c90                 | ' 
27c90                 | ' 	return Stat;
27c90     01 00 00 AF 
27c94     20 E4 05 A1 |  if_e	add	objptr, ##544
27c98     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27c9c     01 00 00 AF 
27ca0     20 E4 85 A1 |  if_e	sub	objptr, ##544
27ca4     FD FA E1 F8 | 	getbyte	result1, result1, #0
27ca8     01 FA CD F7 | 	test	result1, #1 wz
27cac     03 FA 05 56 |  if_ne	mov	result1, #3
27cb0     E4 01 90 5D |  if_ne	jmp	#LR__4088
27cb4     10 4E 05 F1 | 	add	fp, #16
27cb8     A7 02 68 FC | 	wrlong	#1, fp
27cbc                 | ' 
27cbc                 | ' 	res = RES_ERROR;
27cbc                 | ' 	switch (ctrl) {
27cbc     08 4E 85 F1 | 	sub	fp, #8
27cc0     A7 1E C2 FA | 	rdbyte	local01, fp
27cc4     08 4E 85 F1 | 	sub	fp, #8
27cc8     04 1E 26 F3 | 	fle	local01, #4
27ccc     30 1E 62 FD | 	jmprel	local01
27cd0                 | LR__4080
27cd0     10 00 90 FD | 	jmp	#LR__4081
27cd4     24 00 90 FD | 	jmp	#LR__4082
27cd8     A0 01 90 FD | 	jmp	#LR__4086
27cdc     80 01 90 FD | 	jmp	#LR__4085
27ce0     98 01 90 FD | 	jmp	#LR__4086
27ce4                 | LR__4081
27ce4     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
27cec     10 4E 05 51 |  if_ne	add	fp, #16
27cf0     A7 00 68 5C |  if_ne	wrlong	#0, fp
27cf4     10 4E 85 51 |  if_ne	sub	fp, #16
27cf8                 | ' 			break;
27cf8     8C 01 90 FD | 	jmp	#LR__4087
27cfc                 | LR__4082
27cfc     09 12 06 F6 | 	mov	arg01, #9
27d00     00 14 06 F6 | 	mov	arg02, #0
27d04     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27d08     FD 1E 02 F6 | 	mov	local01, result1
27d0c     07 1E 4E F7 | 	zerox	local01, #7 wz
27d10     74 01 90 5D |  if_ne	jmp	#LR__4087
27d14     18 4E 05 F1 | 	add	fp, #24
27d18     A7 12 02 F6 | 	mov	arg01, fp
27d1c     18 4E 85 F1 | 	sub	fp, #24
27d20     10 14 06 F6 | 	mov	arg02, #16
27d24     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27d28     00 FA 0D F2 | 	cmp	result1, #0 wz
27d2c     58 01 90 AD |  if_e	jmp	#LR__4087
27d30     18 4E 05 F1 | 	add	fp, #24
27d34     A7 1E C2 FA | 	rdbyte	local01, fp
27d38     18 4E 85 F1 | 	sub	fp, #24
27d3c     06 1E 46 F0 | 	shr	local01, #6
27d40     01 1E 0E F2 | 	cmp	local01, #1 wz
27d44     5C 00 90 5D |  if_ne	jmp	#LR__4083
27d48     21 4E 05 F1 | 	add	fp, #33
27d4c     A7 1E C2 FA | 	rdbyte	local01, fp
27d50     01 4E 85 F1 | 	sub	fp, #1
27d54     A7 FA C1 FA | 	rdbyte	result1, fp
27d58     FD FA 31 F9 | 	getword	result1, result1, #0
27d5c     08 FA 65 F0 | 	shl	result1, #8
27d60     FD 1E 02 F1 | 	add	local01, result1
27d64     01 4E 85 F1 | 	sub	fp, #1
27d68     A7 FA C1 FA | 	rdbyte	result1, fp
27d6c     3F FA 05 F5 | 	and	result1, #63
27d70     10 FA 65 F0 | 	shl	result1, #16
27d74     FD 1E 02 F1 | 	add	local01, result1
27d78     01 1E 06 F1 | 	add	local01, #1
27d7c     09 4E 05 F1 | 	add	fp, #9
27d80     A7 1E 62 FC | 	wrlong	local01, fp
27d84     1C 4E 85 F1 | 	sub	fp, #28
27d88     A7 1E 02 FB | 	rdlong	local01, fp
27d8c     1C 4E 05 F1 | 	add	fp, #28
27d90     A7 FA 01 FB | 	rdlong	result1, fp
27d94     28 4E 85 F1 | 	sub	fp, #40
27d98     0A FA 65 F0 | 	shl	result1, #10
27d9c     0F FB 61 FC | 	wrlong	result1, local01
27da0     AC 00 90 FD | 	jmp	#LR__4084
27da4                 | LR__4083
27da4     1D 4E 05 F1 | 	add	fp, #29
27da8     A7 1E C2 FA | 	rdbyte	local01, fp
27dac     0F 1F 42 F8 | 	getnib	local01, local01, #0
27db0     05 4E 05 F1 | 	add	fp, #5
27db4     A7 FA C1 FA | 	rdbyte	result1, fp
27db8     80 FA 05 F5 | 	and	result1, #128
27dbc     07 FA C5 F0 | 	sar	result1, #7
27dc0     FD 1E 02 F1 | 	add	local01, result1
27dc4     01 4E 85 F1 | 	sub	fp, #1
27dc8     A7 FA C1 FA | 	rdbyte	result1, fp
27dcc     03 FA 05 F5 | 	and	result1, #3
27dd0     01 FA 65 F0 | 	shl	result1, #1
27dd4     FD 1E 02 F1 | 	add	local01, result1
27dd8     02 1E 06 F1 | 	add	local01, #2
27ddc     0D 4E 85 F1 | 	sub	fp, #13
27de0     A7 1E 42 FC | 	wrbyte	local01, fp
27de4     0C 4E 05 F1 | 	add	fp, #12
27de8     A7 1E C2 FA | 	rdbyte	local01, fp
27dec     06 1E 46 F0 | 	shr	local01, #6
27df0     01 4E 85 F1 | 	sub	fp, #1
27df4     A7 FA C1 FA | 	rdbyte	result1, fp
27df8     FD FA 31 F9 | 	getword	result1, result1, #0
27dfc     02 FA 65 F0 | 	shl	result1, #2
27e00     FD 1E 02 F1 | 	add	local01, result1
27e04     01 4E 85 F1 | 	sub	fp, #1
27e08     A7 FA C1 FA | 	rdbyte	result1, fp
27e0c     03 FA 05 F5 | 	and	result1, #3
27e10     FD FA 31 F9 | 	getword	result1, result1, #0
27e14     0A FA 65 F0 | 	shl	result1, #10
27e18     FD 1E 02 F1 | 	add	local01, result1
27e1c     01 1E 06 F1 | 	add	local01, #1
27e20     0A 4E 05 F1 | 	add	fp, #10
27e24     A7 1E 62 FC | 	wrlong	local01, fp
27e28     1C 4E 85 F1 | 	sub	fp, #28
27e2c     A7 1E 02 FB | 	rdlong	local01, fp
27e30     1C 4E 05 F1 | 	add	fp, #28
27e34     A7 FA 01 FB | 	rdlong	result1, fp
27e38     14 4E 85 F1 | 	sub	fp, #20
27e3c     A7 16 C2 FA | 	rdbyte	arg03, fp
27e40     14 4E 85 F1 | 	sub	fp, #20
27e44     09 16 86 F1 | 	sub	arg03, #9
27e48     0B FB 61 F0 | 	shl	result1, arg03
27e4c     0F FB 61 FC | 	wrlong	result1, local01
27e50                 | LR__4084
27e50     10 4E 05 F1 | 	add	fp, #16
27e54     A7 00 68 FC | 	wrlong	#0, fp
27e58     10 4E 85 F1 | 	sub	fp, #16
27e5c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27e5c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27e5c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27e5c                 | ' 				}
27e5c                 | ' 				res = RES_OK;
27e5c                 | ' 			}
27e5c                 | ' 			break;
27e5c     28 00 90 FD | 	jmp	#LR__4087
27e60                 | LR__4085
27e60     0C 4E 05 F1 | 	add	fp, #12
27e64     A7 1E 02 FB | 	rdlong	local01, fp
27e68     0F 01 69 FC | 	wrlong	#128, local01
27e6c     04 4E 05 F1 | 	add	fp, #4
27e70     A7 00 68 FC | 	wrlong	#0, fp
27e74     10 4E 85 F1 | 	sub	fp, #16
27e78                 | ' 			*(DWORD*)buff = 128;
27e78                 | ' 			res = RES_OK;
27e78                 | ' 			break;
27e78     0C 00 90 FD | 	jmp	#LR__4087
27e7c                 | LR__4086
27e7c     10 4E 05 F1 | 	add	fp, #16
27e80     A7 08 68 FC | 	wrlong	#4, fp
27e84     10 4E 85 F1 | 	sub	fp, #16
27e88                 | LR__4087
27e88     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
27e8c                 | ' 			res = RES_PARERR;
27e8c                 | ' 	}
27e8c                 | ' 
27e8c                 | ' 	deselect();
27e8c                 | ' 
27e8c                 | ' 	return res;
27e8c     10 4E 05 F1 | 	add	fp, #16
27e90     A7 FA 01 FB | 	rdlong	result1, fp
27e94     10 4E 85 F1 | 	sub	fp, #16
27e98                 | LR__4088
27e98     A7 F0 03 F6 | 	mov	ptra, fp
27e9c     B2 00 A0 FD | 	call	#popregs_
27ea0                 | _fatfs_cc_disk_ioctl_ret
27ea0     2D 00 64 FD | 	ret
27ea4                 | 
27ea4                 | _fatfs_cc_disk_setpins
27ea4     00 12 0E F2 | 	cmp	arg01, #0 wz
27ea8     01 FA 65 56 |  if_ne	neg	result1, #1
27eac     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27eb0     01 00 00 FF 
27eb4     10 E4 05 F1 | 	add	objptr, ##528
27eb8     F2 14 62 FC | 	wrlong	arg02, objptr
27ebc     04 E4 05 F1 | 	add	objptr, #4
27ec0     F2 16 62 FC | 	wrlong	arg03, objptr
27ec4     04 E4 05 F1 | 	add	objptr, #4
27ec8     F2 18 62 FC | 	wrlong	arg04, objptr
27ecc     04 E4 05 F1 | 	add	objptr, #4
27ed0     F2 1A 62 FC | 	wrlong	arg05, objptr
27ed4     01 00 00 FF 
27ed8     1C E4 85 F1 | 	sub	objptr, ##540
27edc     00 FA 05 F6 | 	mov	result1, #0
27ee0                 | _fatfs_cc_disk_setpins_ret
27ee0     2D 00 64 FD | 	ret
27ee4                 | 
27ee4                 | _fatfs_cc_tchar2uni
27ee4     09 01 02 FB | 	rdlong	_var01, arg01
27ee8     00 03 02 F6 | 	mov	_var02, _var01
27eec     01 00 06 F1 | 	add	_var01, #1
27ef0     00 05 02 F6 | 	mov	_var03, _var01
27ef4     01 07 C2 FA | 	rdbyte	_var04, _var02
27ef8     80 06 CE F7 | 	test	_var04, #128 wz
27efc     E8 00 90 AD |  if_e	jmp	#LR__4097
27f00     03 09 02 F6 | 	mov	_var05, _var04
27f04     E0 08 06 F5 | 	and	_var05, #224
27f08     C0 08 0E F2 | 	cmp	_var05, #192 wz
27f0c     1F 06 06 A5 |  if_e	and	_var04, #31
27f10     01 0A 06 A6 |  if_e	mov	_var06, #1
27f14     34 00 90 AD |  if_e	jmp	#LR__4091
27f18     03 09 02 F6 | 	mov	_var05, _var04
27f1c     F0 08 06 F5 | 	and	_var05, #240
27f20     E0 08 0E F2 | 	cmp	_var05, #224 wz
27f24     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27f28     02 0A 06 A6 |  if_e	mov	_var06, #2
27f2c     1C 00 90 AD |  if_e	jmp	#LR__4090
27f30     03 09 02 F6 | 	mov	_var05, _var04
27f34     F8 08 06 F5 | 	and	_var05, #248
27f38     F0 08 0E F2 | 	cmp	_var05, #240 wz
27f3c     07 06 06 A5 |  if_e	and	_var04, #7
27f40     03 0A 06 A6 |  if_e	mov	_var06, #3
27f44                 | ' 			return 0xFFFFFFFF;
27f44     01 FA 65 56 |  if_ne	neg	result1, #1
27f48     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27f4c                 | LR__4090
27f4c                 | LR__4091
27f4c                 | ' 		}
27f4c                 | ' 		do {
27f4c                 | LR__4092
27f4c     02 0D C2 FA | 	rdbyte	_var07, _var03
27f50     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
27f54     C0 08 06 F5 | 	and	_var05, #192
27f58     80 08 0E F2 | 	cmp	_var05, #128 wz
27f5c     01 04 06 F1 | 	add	_var03, #1
27f60     01 FA 65 56 |  if_ne	neg	result1, #1
27f64     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27f68     06 06 66 F0 | 	shl	_var04, #6
27f6c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
27f70     3F 02 06 F5 | 	and	_var02, #63
27f74     01 07 42 F5 | 	or	_var04, _var02
27f78     F4 0B 6E FB | 	djnz	_var06, #LR__4092
27f7c     80 06 16 F2 | 	cmp	_var04, #128 wc
27f80     24 00 90 CD |  if_b	jmp	#LR__4094
27f84     6C 00 00 FF 
27f88     00 06 16 F2 | 	cmp	_var04, ##55296 wc
27f8c     0C 00 90 CD |  if_b	jmp	#LR__4093
27f90     70 00 00 FF 
27f94     00 06 16 F2 | 	cmp	_var04, ##57344 wc
27f98     0C 00 90 CD |  if_b	jmp	#LR__4094
27f9c                 | LR__4093
27f9c     80 08 00 FF 
27fa0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
27fa4     08 00 90 CD |  if_b	jmp	#LR__4095
27fa8                 | LR__4094
27fa8     01 FA 65 F6 | 	neg	result1, #1
27fac     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
27fb0                 | LR__4095
27fb0     80 00 00 FF 
27fb4     00 06 16 F2 | 	cmp	_var04, ##65536 wc
27fb8     2C 00 90 CD |  if_b	jmp	#LR__4096
27fbc     03 03 02 F6 | 	mov	_var02, _var04
27fc0     80 00 00 FF 
27fc4     00 02 86 F1 | 	sub	_var02, ##65536
27fc8     06 02 66 F0 | 	shl	_var02, #6
27fcc     80 FF 01 FF 
27fd0     00 02 06 F5 | 	and	_var02, ##67043328
27fd4     6E 00 6C FF 
27fd8     00 08 06 F6 | 	mov	_var05, ##-671032320
27fdc     01 09 42 F5 | 	or	_var05, _var02
27fe0     09 06 46 F7 | 	zerox	_var04, #9
27fe4     04 07 42 F5 | 	or	_var04, _var05
27fe8                 | LR__4096
27fe8                 | LR__4097
27fe8     09 05 62 FC | 	wrlong	_var03, arg01
27fec                 | ' 	}
27fec                 | ' #line 811 "ff.c"
27fec                 | ' 	*str = p;
27fec                 | ' 	return uc;
27fec     03 FB 01 F6 | 	mov	result1, _var04
27ff0                 | _fatfs_cc_tchar2uni_ret
27ff0     2D 00 64 FD | 	ret
27ff4                 | 
27ff4                 | _fatfs_cc_put_utf
27ff4     80 12 16 F2 | 	cmp	arg01, #128 wc
27ff8     18 00 90 3D |  if_ae	jmp	#LR__4100
27ffc     01 16 16 F2 | 	cmp	arg03, #1 wc
28000     00 FA 05 C6 |  if_b	mov	result1, #0
28004     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28008     0A 13 42 FC | 	wrbyte	arg01, arg02
2800c                 | ' 		*buf = (TCHAR)chr;
2800c                 | ' 		return 1;
2800c     01 FA 05 F6 | 	mov	result1, #1
28010     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28014                 | LR__4100
28014     04 00 00 FF 
28018     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2801c     40 00 90 3D |  if_ae	jmp	#LR__4101
28020     02 16 16 F2 | 	cmp	arg03, #2 wc
28024     00 FA 05 C6 |  if_b	mov	result1, #0
28028     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2802c     09 FB 01 F6 | 	mov	result1, arg01
28030     06 FA 45 F0 | 	shr	result1, #6
28034     1F FA 05 F5 | 	and	result1, #31
28038     C0 16 06 F6 | 	mov	arg03, #192
2803c     FD 16 42 F5 | 	or	arg03, result1
28040     0A 17 42 FC | 	wrbyte	arg03, arg02
28044     01 14 06 F1 | 	add	arg02, #1
28048     3F 12 06 F5 | 	and	arg01, #63
2804c     80 FA 05 F6 | 	mov	result1, #128
28050     09 FB 41 F5 | 	or	result1, arg01
28054     0A FB 41 FC | 	wrbyte	result1, arg02
28058                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28058                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28058                 | ' 		return 2;
28058     02 FA 05 F6 | 	mov	result1, #2
2805c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28060                 | LR__4101
28060     80 00 00 FF 
28064     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28068     70 00 90 3D |  if_ae	jmp	#LR__4104
2806c     03 16 16 F2 | 	cmp	arg03, #3 wc
28070     18 00 90 CD |  if_b	jmp	#LR__4102
28074     6C 00 00 FF 
28078     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2807c     14 00 90 CD |  if_b	jmp	#LR__4103
28080     70 00 00 FF 
28084     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28088     08 00 90 3D |  if_ae	jmp	#LR__4103
2808c                 | LR__4102
2808c     00 FA 05 F6 | 	mov	result1, #0
28090     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28094                 | LR__4103
28094     09 FB 59 F8 | 	getnib	result1, arg01, #3
28098     E0 16 06 F6 | 	mov	arg03, #224
2809c     FD 16 42 F5 | 	or	arg03, result1
280a0     0A 17 42 FC | 	wrbyte	arg03, arg02
280a4     01 14 06 F1 | 	add	arg02, #1
280a8     09 FB 01 F6 | 	mov	result1, arg01
280ac     06 FA 45 F0 | 	shr	result1, #6
280b0     3F FA 05 F5 | 	and	result1, #63
280b4     80 16 06 F6 | 	mov	arg03, #128
280b8     FD 16 42 F5 | 	or	arg03, result1
280bc     0A 17 42 FC | 	wrbyte	arg03, arg02
280c0     01 14 06 F1 | 	add	arg02, #1
280c4     3F 12 06 F5 | 	and	arg01, #63
280c8     80 FA 05 F6 | 	mov	result1, #128
280cc     09 FB 41 F5 | 	or	result1, arg01
280d0     0A FB 41 FC | 	wrbyte	result1, arg02
280d4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
280d4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
280d4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
280d4                 | ' 		return 3;
280d4     03 FA 05 F6 | 	mov	result1, #3
280d8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
280dc                 | LR__4104
280dc     04 16 16 F2 | 	cmp	arg03, #4 wc
280e0     00 FA 05 C6 |  if_b	mov	result1, #0
280e4     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
280e8     09 01 02 F6 | 	mov	_var01, arg01
280ec     E0 01 06 F4 | 	bitl	_var01, #480
280f0     00 00 6C FF 
280f4     00 00 86 F1 | 	sub	_var01, ##-671088640
280f8     06 00 46 F0 | 	shr	_var01, #6
280fc     09 13 32 F9 | 	getword	arg01, arg01, #0
28100     6E 00 00 FF 
28104     00 12 86 F1 | 	sub	arg01, ##56320
28108     00 08 00 FF 
2810c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
28110     02 00 00 CF 
28114     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
28118     00 FA 05 36 |  if_ae	mov	result1, #0
2811c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
28120     09 01 42 F5 | 	or	_var01, arg01
28124     80 00 00 FF 
28128     00 00 06 F1 | 	add	_var01, ##65536
2812c     00 FB 01 F6 | 	mov	result1, _var01
28130     12 FA 45 F0 | 	shr	result1, #18
28134     07 FA 05 F5 | 	and	result1, #7
28138     F0 16 06 F6 | 	mov	arg03, #240
2813c     FD 16 42 F5 | 	or	arg03, result1
28140     0A 17 42 FC | 	wrbyte	arg03, arg02
28144     01 14 06 F1 | 	add	arg02, #1
28148     00 FB 01 F6 | 	mov	result1, _var01
2814c     0C FA 45 F0 | 	shr	result1, #12
28150     3F FA 05 F5 | 	and	result1, #63
28154     80 16 06 F6 | 	mov	arg03, #128
28158     FD 16 42 F5 | 	or	arg03, result1
2815c     0A 17 42 FC | 	wrbyte	arg03, arg02
28160     01 14 06 F1 | 	add	arg02, #1
28164     00 FB 01 F6 | 	mov	result1, _var01
28168     06 FA 45 F0 | 	shr	result1, #6
2816c     3F FA 05 F5 | 	and	result1, #63
28170     80 16 06 F6 | 	mov	arg03, #128
28174     FD 16 42 F5 | 	or	arg03, result1
28178     0A 17 42 FC | 	wrbyte	arg03, arg02
2817c     01 14 06 F1 | 	add	arg02, #1
28180     3F 00 06 F5 | 	and	_var01, #63
28184     80 FA 05 F6 | 	mov	result1, #128
28188     00 FB 41 F5 | 	or	result1, _var01
2818c     0A FB 41 FC | 	wrbyte	result1, arg02
28190                 | ' 	chr = (hc | chr) + 0x10000;
28190                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28190                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28190                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28190                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28190                 | ' 	return 4;
28190     04 FA 05 F6 | 	mov	result1, #4
28194                 | _fatfs_cc_put_utf_ret
28194     2D 00 64 FD | 	ret
28198                 | 
28198                 | _fatfs_cc_sync_window
28198     02 4A 05 F6 | 	mov	COUNT_, #2
2819c     A8 00 A0 FD | 	call	#pushregs_
281a0     09 1F 02 F6 | 	mov	local01, arg01
281a4     00 20 06 F6 | 	mov	local02, #0
281a8     03 1E 06 F1 | 	add	local01, #3
281ac     0F FB C9 FA | 	rdbyte	result1, local01 wz
281b0     03 1E 86 F1 | 	sub	local01, #3
281b4     A4 00 90 AD |  if_e	jmp	#LR__4112
281b8     01 1E 06 F1 | 	add	local01, #1
281bc     0F 13 C2 FA | 	rdbyte	arg01, local01
281c0     33 1E 06 F1 | 	add	local01, #51
281c4     0F 15 02 F6 | 	mov	arg02, local01
281c8     04 1E 86 F1 | 	sub	local01, #4
281cc     0F 17 02 FB | 	rdlong	arg03, local01
281d0     30 1E 86 F1 | 	sub	local01, #48
281d4     01 18 06 F6 | 	mov	arg04, #1
281d8     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
281dc     00 FA 0D F2 | 	cmp	result1, #0 wz
281e0     74 00 90 5D |  if_ne	jmp	#LR__4110
281e4     03 1E 06 F1 | 	add	local01, #3
281e8     0F 01 48 FC | 	wrbyte	#0, local01
281ec     2D 1E 06 F1 | 	add	local01, #45
281f0     0F FB 01 FB | 	rdlong	result1, local01
281f4     0C 1E 86 F1 | 	sub	local01, #12
281f8     0F 19 02 FB | 	rdlong	arg04, local01
281fc     0C FB 81 F1 | 	sub	result1, arg04
28200     08 1E 86 F1 | 	sub	local01, #8
28204     0F 19 02 FB | 	rdlong	arg04, local01
28208     1C 1E 86 F1 | 	sub	local01, #28
2820c     0C FB 11 F2 | 	cmp	result1, arg04 wc
28210     48 00 90 3D |  if_ae	jmp	#LR__4111
28214     02 1E 06 F1 | 	add	local01, #2
28218     0F 19 C2 FA | 	rdbyte	arg04, local01
2821c     02 1E 86 F1 | 	sub	local01, #2
28220     02 18 0E F2 | 	cmp	arg04, #2 wz
28224     34 00 90 5D |  if_ne	jmp	#LR__4111
28228     01 1E 06 F1 | 	add	local01, #1
2822c     0F 13 C2 FA | 	rdbyte	arg01, local01
28230     33 1E 06 F1 | 	add	local01, #51
28234     0F 15 02 F6 | 	mov	arg02, local01
28238     04 1E 86 F1 | 	sub	local01, #4
2823c     0F 17 02 FB | 	rdlong	arg03, local01
28240     14 1E 86 F1 | 	sub	local01, #20
28244     0F 1F 02 FB | 	rdlong	local01, local01
28248     0F 17 02 F1 | 	add	arg03, local01
2824c     01 18 06 F6 | 	mov	arg04, #1
28250     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
28254     04 00 90 FD | 	jmp	#LR__4111
28258                 | LR__4110
28258     01 20 06 F6 | 	mov	local02, #1
2825c                 | LR__4111
2825c                 | LR__4112
2825c                 | ' 			res = FR_DISK_ERR;
2825c                 | ' 		}
2825c                 | ' 	}
2825c                 | ' 	return res;
2825c     10 FB 01 F6 | 	mov	result1, local02
28260     A7 F0 03 F6 | 	mov	ptra, fp
28264     B2 00 A0 FD | 	call	#popregs_
28268                 | _fatfs_cc_sync_window_ret
28268     2D 00 64 FD | 	ret
2826c                 | 
2826c                 | _fatfs_cc_move_window
2826c     03 4A 05 F6 | 	mov	COUNT_, #3
28270     A8 00 A0 FD | 	call	#pushregs_
28274     09 1F 02 F6 | 	mov	local01, arg01
28278     0A 21 02 F6 | 	mov	local02, arg02
2827c     00 22 06 F6 | 	mov	local03, #0
28280     30 1E 06 F1 | 	add	local01, #48
28284     0F 19 02 FB | 	rdlong	arg04, local01
28288     30 1E 86 F1 | 	sub	local01, #48
2828c     0C 21 0A F2 | 	cmp	local02, arg04 wz
28290     40 00 90 AD |  if_e	jmp	#LR__4121
28294     0F 13 02 F6 | 	mov	arg01, local01
28298     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2829c     FD 22 0A F6 | 	mov	local03, result1 wz
282a0     30 00 90 5D |  if_ne	jmp	#LR__4120
282a4     01 1E 06 F1 | 	add	local01, #1
282a8     0F 13 C2 FA | 	rdbyte	arg01, local01
282ac     33 1E 06 F1 | 	add	local01, #51
282b0     0F 15 02 F6 | 	mov	arg02, local01
282b4     10 17 02 F6 | 	mov	arg03, local02
282b8     01 18 06 F6 | 	mov	arg04, #1
282bc     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
282c0     00 FA 0D F2 | 	cmp	result1, #0 wz
282c4     01 20 66 56 |  if_ne	neg	local02, #1
282c8     01 22 06 56 |  if_ne	mov	local03, #1
282cc     04 1E 86 F1 | 	sub	local01, #4
282d0     0F 21 62 FC | 	wrlong	local02, local01
282d4                 | LR__4120
282d4                 | LR__4121
282d4                 | ' 				sect = (LBA_t)0 - 1;
282d4                 | ' 				res = FR_DISK_ERR;
282d4                 | ' 			}
282d4                 | ' 			fs->winsect = sect;
282d4                 | ' 		}
282d4                 | ' 	}
282d4                 | ' 	return res;
282d4     11 FB 01 F6 | 	mov	result1, local03
282d8     A7 F0 03 F6 | 	mov	ptra, fp
282dc     B2 00 A0 FD | 	call	#popregs_
282e0                 | _fatfs_cc_move_window_ret
282e0     2D 00 64 FD | 	ret
282e4                 | 
282e4                 | _fatfs_cc_sync_fs
282e4     02 4A 05 F6 | 	mov	COUNT_, #2
282e8     A8 00 A0 FD | 	call	#pushregs_
282ec     09 1F 02 F6 | 	mov	local01, arg01
282f0     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
282f4     FD 20 0A F6 | 	mov	local02, result1 wz
282f8     D8 00 90 5D |  if_ne	jmp	#LR__4131
282fc     0F 19 C2 FA | 	rdbyte	arg04, local01
28300     03 18 0E F2 | 	cmp	arg04, #3 wz
28304     04 1E 06 A1 |  if_e	add	local01, #4
28308     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
2830c     04 1E 86 A1 |  if_e	sub	local01, #4
28310     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
28314     A0 00 90 5D |  if_ne	jmp	#LR__4130
28318     34 1E 06 F1 | 	add	local01, #52
2831c     0F 13 02 F6 | 	mov	arg01, local01
28320     00 14 06 F6 | 	mov	arg02, #0
28324     09 16 C6 F9 | 	decod	arg03, #9
28328     98 00 A0 FD | 	call	#\builtin_bytefill_
2832c     0F 13 02 F6 | 	mov	arg01, local01
28330     FE 13 06 F1 | 	add	arg01, #510
28334     55 00 80 FF 
28338     09 AB 58 FC | 	wrword	##43605, arg01
2833c     A9 B0 A0 FF 
28340     0F A5 68 FC | 	wrlong	##1096897106, local01
28344     0F 13 02 F6 | 	mov	arg01, local01
28348     E4 13 06 F1 | 	add	arg01, #484
2834c     B9 A0 B0 FF 
28350     09 E5 68 FC | 	wrlong	##1631679090, arg01
28354     0F 13 02 F6 | 	mov	arg01, local01
28358     E8 13 06 F1 | 	add	arg01, #488
2835c     20 1E 86 F1 | 	sub	local01, #32
28360     0F 15 02 FB | 	rdlong	arg02, local01
28364     09 15 62 FC | 	wrlong	arg02, arg01
28368     20 1E 06 F1 | 	add	local01, #32
2836c     0F 13 02 F6 | 	mov	arg01, local01
28370     EC 13 06 F1 | 	add	arg01, #492
28374     24 1E 86 F1 | 	sub	local01, #36
28378     0F 15 02 FB | 	rdlong	arg02, local01
2837c     09 15 62 FC | 	wrlong	arg02, arg01
28380     10 1E 06 F1 | 	add	local01, #16
28384     0F 17 02 FB | 	rdlong	arg03, local01
28388     01 16 06 F1 | 	add	arg03, #1
2838c     10 1E 06 F1 | 	add	local01, #16
28390     0F 17 62 FC | 	wrlong	arg03, local01
28394     2F 1E 86 F1 | 	sub	local01, #47
28398     0F 13 C2 FA | 	rdbyte	arg01, local01
2839c     33 1E 06 F1 | 	add	local01, #51
283a0     0F 15 02 F6 | 	mov	arg02, local01
283a4     01 18 06 F6 | 	mov	arg04, #1
283a8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
283ac     30 1E 86 F1 | 	sub	local01, #48
283b0     0F 01 48 FC | 	wrbyte	#0, local01
283b4     04 1E 86 F1 | 	sub	local01, #4
283b8                 | LR__4130
283b8     01 1E 06 F1 | 	add	local01, #1
283bc     0F 13 C2 FA | 	rdbyte	arg01, local01
283c0     00 14 06 F6 | 	mov	arg02, #0
283c4     00 16 06 F6 | 	mov	arg03, #0
283c8     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
283cc     00 FA 0D F2 | 	cmp	result1, #0 wz
283d0     01 20 06 56 |  if_ne	mov	local02, #1
283d4                 | LR__4131
283d4                 | ' 	}
283d4                 | ' 
283d4                 | ' 	return res;
283d4     10 FB 01 F6 | 	mov	result1, local02
283d8     A7 F0 03 F6 | 	mov	ptra, fp
283dc     B2 00 A0 FD | 	call	#popregs_
283e0                 | _fatfs_cc_sync_fs_ret
283e0     2D 00 64 FD | 	ret
283e4                 | 
283e4                 | _fatfs_cc_clst2sect
283e4     02 14 86 F1 | 	sub	arg02, #2
283e8     18 12 06 F1 | 	add	arg01, #24
283ec     09 01 02 FB | 	rdlong	_var01, arg01
283f0     18 12 86 F1 | 	sub	arg01, #24
283f4     02 00 86 F1 | 	sub	_var01, #2
283f8     00 15 12 F2 | 	cmp	arg02, _var01 wc
283fc     00 FA 05 36 |  if_ae	mov	result1, #0
28400     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
28404     0A 12 06 F1 | 	add	arg01, #10
28408     09 01 E2 FA | 	rdword	_var01, arg01
2840c     0A 01 02 FD | 	qmul	_var01, arg02
28410                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
28410     22 12 06 F1 | 	add	arg01, #34
28414     09 FB 01 FB | 	rdlong	result1, arg01
28418     18 00 62 FD | 	getqx	_var01
2841c     00 FB 01 F1 | 	add	result1, _var01
28420                 | _fatfs_cc_clst2sect_ret
28420     2D 00 64 FD | 	ret
28424                 | 
28424                 | _fatfs_cc_get_fat
28424     07 4A 05 F6 | 	mov	COUNT_, #7
28428     A8 00 A0 FD | 	call	#pushregs_
2842c     0A 1F 02 F6 | 	mov	local01, arg02
28430     09 21 02 FB | 	rdlong	local02, arg01
28434     02 1E 16 F2 | 	cmp	local01, #2 wc
28438     14 00 90 CD |  if_b	jmp	#LR__4140
2843c     18 20 06 F1 | 	add	local02, #24
28440     10 23 02 FB | 	rdlong	local03, local02
28444     18 20 86 F1 | 	sub	local02, #24
28448     11 1F 12 F2 | 	cmp	local01, local03 wc
2844c     08 00 90 CD |  if_b	jmp	#LR__4141
28450                 | LR__4140
28450     01 24 06 F6 | 	mov	local04, #1
28454     60 01 90 FD | 	jmp	#LR__4148
28458                 | LR__4141
28458     01 24 66 F6 | 	neg	local04, #1
2845c                 | ' 		val = 0xFFFFFFFF;
2845c                 | ' 
2845c                 | ' 		switch (fs->fs_type) {
2845c     10 27 C2 FA | 	rdbyte	local05, local02
28460     01 26 86 F1 | 	sub	local05, #1
28464     03 26 26 F3 | 	fle	local05, #3
28468     30 26 62 FD | 	jmprel	local05
2846c                 | LR__4142
2846c     0C 00 90 FD | 	jmp	#LR__4143
28470     B8 00 90 FD | 	jmp	#LR__4144
28474     F8 00 90 FD | 	jmp	#LR__4145
28478     38 01 90 FD | 	jmp	#LR__4146
2847c                 | LR__4143
2847c     0F 27 02 F6 | 	mov	local05, local01
28480     0F 13 02 F6 | 	mov	arg01, local01
28484     01 12 46 F0 | 	shr	arg01, #1
28488     09 27 02 F1 | 	add	local05, arg01
2848c     10 13 02 F6 | 	mov	arg01, local02
28490     13 29 02 F6 | 	mov	local06, local05
28494     09 28 46 F0 | 	shr	local06, #9
28498     24 20 06 F1 | 	add	local02, #36
2849c     10 15 02 FB | 	rdlong	arg02, local02
284a0     24 20 86 F1 | 	sub	local02, #36
284a4     14 15 02 F1 | 	add	arg02, local06
284a8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
284ac     00 FA 0D F2 | 	cmp	result1, #0 wz
284b0     04 01 90 5D |  if_ne	jmp	#LR__4147
284b4     13 29 02 F6 | 	mov	local06, local05
284b8     FF 29 06 F5 | 	and	local06, #511
284bc     34 20 06 F1 | 	add	local02, #52
284c0     10 29 02 F1 | 	add	local06, local02
284c4     14 2B C2 FA | 	rdbyte	local07, local06
284c8     34 20 86 F1 | 	sub	local02, #52
284cc     10 13 02 F6 | 	mov	arg01, local02
284d0     01 26 06 F1 | 	add	local05, #1
284d4     13 29 02 F6 | 	mov	local06, local05
284d8     09 28 46 F0 | 	shr	local06, #9
284dc     24 20 06 F1 | 	add	local02, #36
284e0     10 15 02 FB | 	rdlong	arg02, local02
284e4     24 20 86 F1 | 	sub	local02, #36
284e8     14 15 02 F1 | 	add	arg02, local06
284ec     7C FD BF FD | 	call	#_fatfs_cc_move_window
284f0     00 FA 0D F2 | 	cmp	result1, #0 wz
284f4     C0 00 90 5D |  if_ne	jmp	#LR__4147
284f8     FF 27 06 F5 | 	and	local05, #511
284fc     34 20 06 F1 | 	add	local02, #52
28500     10 27 02 F1 | 	add	local05, local02
28504     13 29 C2 FA | 	rdbyte	local06, local05
28508     08 28 66 F0 | 	shl	local06, #8
2850c     14 2B 42 F5 | 	or	local07, local06
28510     01 1E CE F7 | 	test	local01, #1 wz
28514     04 2A 46 50 |  if_ne	shr	local07, #4
28518     15 23 02 56 |  if_ne	mov	local03, local07
2851c     0B 2A 46 A7 |  if_e	zerox	local07, #11
28520     15 23 02 A6 |  if_e	mov	local03, local07
28524     11 25 02 F6 | 	mov	local04, local03
28528                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
28528                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
28528                 | ' 			break;
28528     8C 00 90 FD | 	jmp	#LR__4147
2852c                 | LR__4144
2852c     10 13 02 F6 | 	mov	arg01, local02
28530     0F 29 02 F6 | 	mov	local06, local01
28534     08 28 46 F0 | 	shr	local06, #8
28538     24 20 06 F1 | 	add	local02, #36
2853c     10 15 02 FB | 	rdlong	arg02, local02
28540     24 20 86 F1 | 	sub	local02, #36
28544     14 15 02 F1 | 	add	arg02, local06
28548     20 FD BF FD | 	call	#_fatfs_cc_move_window
2854c     00 FA 0D F2 | 	cmp	result1, #0 wz
28550     64 00 90 5D |  if_ne	jmp	#LR__4147
28554     34 20 06 F1 | 	add	local02, #52
28558     01 1E 66 F0 | 	shl	local01, #1
2855c     FF 1F 06 F5 | 	and	local01, #511
28560     0F 21 02 F1 | 	add	local02, local01
28564                 | ' {
28564                 | ' 
28564                 | ' 	return *((WORD*)ptr);
28564     10 FB E1 FA | 	rdword	result1, local02
28568     FD 24 32 F9 | 	getword	local04, result1, #0
2856c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2856c                 | ' 			break;
2856c     48 00 90 FD | 	jmp	#LR__4147
28570                 | LR__4145
28570     10 13 02 F6 | 	mov	arg01, local02
28574     0F 29 02 F6 | 	mov	local06, local01
28578     07 28 46 F0 | 	shr	local06, #7
2857c     24 20 06 F1 | 	add	local02, #36
28580     10 15 02 FB | 	rdlong	arg02, local02
28584     24 20 86 F1 | 	sub	local02, #36
28588     14 15 02 F1 | 	add	arg02, local06
2858c     DC FC BF FD | 	call	#_fatfs_cc_move_window
28590     00 FA 0D F2 | 	cmp	result1, #0 wz
28594     20 00 90 5D |  if_ne	jmp	#LR__4147
28598     34 20 06 F1 | 	add	local02, #52
2859c     02 1E 66 F0 | 	shl	local01, #2
285a0     FF 1F 06 F5 | 	and	local01, #511
285a4     0F 21 02 F1 | 	add	local02, local01
285a8                 | ' {
285a8                 | ' 
285a8                 | ' 	return *((DWORD*)ptr);
285a8     10 25 02 FB | 	rdlong	local04, local02
285ac     7C 24 06 F4 | 	bitl	local04, #124
285b0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
285b0                 | ' 			break;
285b0     04 00 90 FD | 	jmp	#LR__4147
285b4                 | LR__4146
285b4     01 24 06 F6 | 	mov	local04, #1
285b8                 | LR__4147
285b8                 | LR__4148
285b8                 | ' 			val = 1;
285b8                 | ' 		}
285b8                 | ' 	}
285b8                 | ' 
285b8                 | ' 	return val;
285b8     12 FB 01 F6 | 	mov	result1, local04
285bc     A7 F0 03 F6 | 	mov	ptra, fp
285c0     B2 00 A0 FD | 	call	#popregs_
285c4                 | _fatfs_cc_get_fat_ret
285c4     2D 00 64 FD | 	ret
285c8                 | 
285c8                 | _fatfs_cc_put_fat
285c8     08 4A 05 F6 | 	mov	COUNT_, #8
285cc     A8 00 A0 FD | 	call	#pushregs_
285d0     09 1F 02 F6 | 	mov	local01, arg01
285d4     0A 21 02 F6 | 	mov	local02, arg02
285d8     0B 23 02 F6 | 	mov	local03, arg03
285dc     02 24 06 F6 | 	mov	local04, #2
285e0     02 20 16 F2 | 	cmp	local02, #2 wc
285e4     E0 01 90 CD |  if_b	jmp	#LR__4157
285e8     18 1E 06 F1 | 	add	local01, #24
285ec     0F 27 02 FB | 	rdlong	local05, local01
285f0     18 1E 86 F1 | 	sub	local01, #24
285f4     13 21 12 F2 | 	cmp	local02, local05 wc
285f8     CC 01 90 3D |  if_ae	jmp	#LR__4157
285fc                 | ' 		switch (fs->fs_type) {
285fc     0F 29 C2 FA | 	rdbyte	local06, local01
28600     01 28 86 F1 | 	sub	local06, #1
28604     03 28 26 F3 | 	fle	local06, #3
28608     30 28 62 FD | 	jmprel	local06
2860c                 | LR__4150
2860c     0C 00 90 FD | 	jmp	#LR__4151
28610     F8 00 90 FD | 	jmp	#LR__4154
28614     40 01 90 FD | 	jmp	#LR__4155
28618     AC 01 90 FD | 	jmp	#LR__4156
2861c                 | LR__4151
2861c     10 2B 02 F6 | 	mov	local07, local02
28620     10 27 02 F6 | 	mov	local05, local02
28624     01 26 46 F0 | 	shr	local05, #1
28628     13 2B 02 F1 | 	add	local07, local05
2862c     0F 13 02 F6 | 	mov	arg01, local01
28630     15 29 02 F6 | 	mov	local06, local07
28634     09 28 46 F0 | 	shr	local06, #9
28638     24 1E 06 F1 | 	add	local01, #36
2863c     0F 15 02 FB | 	rdlong	arg02, local01
28640     24 1E 86 F1 | 	sub	local01, #36
28644     14 15 02 F1 | 	add	arg02, local06
28648     20 FC BF FD | 	call	#_fatfs_cc_move_window
2864c     FD 24 0A F6 | 	mov	local04, result1 wz
28650     74 01 90 5D |  if_ne	jmp	#LR__4156
28654     34 1E 06 F1 | 	add	local01, #52
28658     0F 2D 02 F6 | 	mov	local08, local01
2865c     15 27 02 F6 | 	mov	local05, local07
28660     FF 27 06 F5 | 	and	local05, #511
28664     13 2D 02 F1 | 	add	local08, local05
28668     01 20 CE F7 | 	test	local02, #1 wz
2866c     34 1E 86 F1 | 	sub	local01, #52
28670     01 2A 06 F1 | 	add	local07, #1
28674     18 00 90 AD |  if_e	jmp	#LR__4152
28678     16 27 C2 FA | 	rdbyte	local05, local08
2867c     13 27 42 F8 | 	getnib	local05, local05, #0
28680     11 29 E2 F8 | 	getbyte	local06, local03, #0
28684     04 28 66 F0 | 	shl	local06, #4
28688     14 27 42 F5 | 	or	local05, local06
2868c     04 00 90 FD | 	jmp	#LR__4153
28690                 | LR__4152
28690     11 27 02 F6 | 	mov	local05, local03
28694                 | LR__4153
28694     16 27 42 FC | 	wrbyte	local05, local08
28698     03 1E 06 F1 | 	add	local01, #3
2869c     0F 03 48 FC | 	wrbyte	#1, local01
286a0     03 1E 86 F1 | 	sub	local01, #3
286a4     0F 13 02 F6 | 	mov	arg01, local01
286a8     15 2D 02 F6 | 	mov	local08, local07
286ac     09 2C 46 F0 | 	shr	local08, #9
286b0     24 1E 06 F1 | 	add	local01, #36
286b4     0F 15 02 FB | 	rdlong	arg02, local01
286b8     24 1E 86 F1 | 	sub	local01, #36
286bc     16 15 02 F1 | 	add	arg02, local08
286c0     A8 FB BF FD | 	call	#_fatfs_cc_move_window
286c4     FD 24 0A F6 | 	mov	local04, result1 wz
286c8     FC 00 90 5D |  if_ne	jmp	#LR__4156
286cc     34 1E 06 F1 | 	add	local01, #52
286d0     0F 2D 02 F6 | 	mov	local08, local01
286d4     FF 2B 06 F5 | 	and	local07, #511
286d8     15 2D 02 F1 | 	add	local08, local07
286dc     01 20 CE F7 | 	test	local02, #1 wz
286e0     04 22 46 50 |  if_ne	shr	local03, #4
286e4     11 27 02 56 |  if_ne	mov	local05, local03
286e8     16 27 C2 AA |  if_e	rdbyte	local05, local08
286ec     F0 26 06 A5 |  if_e	and	local05, #240
286f0     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
286f4     11 23 42 A8 |  if_e	getnib	local03, local03, #0
286f8     11 27 42 A5 |  if_e	or	local05, local03
286fc     16 27 42 FC | 	wrbyte	local05, local08
28700     31 1E 86 F1 | 	sub	local01, #49
28704     0F 03 48 FC | 	wrbyte	#1, local01
28708                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
28708                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
28708                 | ' 			fs->wflag = 1;
28708                 | ' 			break;
28708     BC 00 90 FD | 	jmp	#LR__4156
2870c                 | LR__4154
2870c     0F 13 02 F6 | 	mov	arg01, local01
28710     10 2D 02 F6 | 	mov	local08, local02
28714     08 2C 46 F0 | 	shr	local08, #8
28718     24 1E 06 F1 | 	add	local01, #36
2871c     0F 15 02 FB | 	rdlong	arg02, local01
28720     24 1E 86 F1 | 	sub	local01, #36
28724     16 15 02 F1 | 	add	arg02, local08
28728     40 FB BF FD | 	call	#_fatfs_cc_move_window
2872c     FD 24 0A F6 | 	mov	local04, result1 wz
28730     94 00 90 5D |  if_ne	jmp	#LR__4156
28734     34 1E 06 F1 | 	add	local01, #52
28738     0F 13 02 F6 | 	mov	arg01, local01
2873c     01 20 66 F0 | 	shl	local02, #1
28740     FF 21 06 F5 | 	and	local02, #511
28744     10 13 02 F1 | 	add	arg01, local02
28748     09 23 52 FC | 	wrword	local03, arg01
2874c     31 1E 86 F1 | 	sub	local01, #49
28750     0F 03 48 FC | 	wrbyte	#1, local01
28754                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
28754                 | ' 			fs->wflag = 1;
28754                 | ' 			break;
28754     70 00 90 FD | 	jmp	#LR__4156
28758                 | LR__4155
28758     0F 13 02 F6 | 	mov	arg01, local01
2875c     10 2D 02 F6 | 	mov	local08, local02
28760     07 2C 46 F0 | 	shr	local08, #7
28764     24 1E 06 F1 | 	add	local01, #36
28768     0F 15 02 FB | 	rdlong	arg02, local01
2876c     24 1E 86 F1 | 	sub	local01, #36
28770     16 15 02 F1 | 	add	arg02, local08
28774     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28778     FD 24 0A F6 | 	mov	local04, result1 wz
2877c     48 00 90 5D |  if_ne	jmp	#LR__4156
28780     7C 22 06 F4 | 	bitl	local03, #124
28784     34 1E 06 F1 | 	add	local01, #52
28788     10 2D 02 F6 | 	mov	local08, local02
2878c     02 2C 66 F0 | 	shl	local08, #2
28790     FF 2D 06 F5 | 	and	local08, #511
28794     0F 13 02 F6 | 	mov	arg01, local01
28798     16 13 02 F1 | 	add	arg01, local08
2879c                 | ' {
2879c                 | ' 
2879c                 | ' 	return *((DWORD*)ptr);
2879c     09 2D 02 FB | 	rdlong	local08, arg01
287a0     00 00 78 FF 
287a4     00 2C 06 F5 | 	and	local08, ##-268435456
287a8     16 23 42 F5 | 	or	local03, local08
287ac     0F 13 02 F6 | 	mov	arg01, local01
287b0     02 20 66 F0 | 	shl	local02, #2
287b4     FF 21 06 F5 | 	and	local02, #511
287b8     10 13 02 F1 | 	add	arg01, local02
287bc     09 23 62 FC | 	wrlong	local03, arg01
287c0     31 1E 86 F1 | 	sub	local01, #49
287c4     0F 03 48 FC | 	wrbyte	#1, local01
287c8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
287c8                 | ' 			}
287c8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
287c8                 | ' 			fs->wflag = 1;
287c8                 | ' 			break;
287c8                 | LR__4156
287c8                 | LR__4157
287c8                 | ' 		}
287c8                 | ' 	}
287c8                 | ' 	return res;
287c8     12 FB 01 F6 | 	mov	result1, local04
287cc     A7 F0 03 F6 | 	mov	ptra, fp
287d0     B2 00 A0 FD | 	call	#popregs_
287d4                 | _fatfs_cc_put_fat_ret
287d4     2D 00 64 FD | 	ret
287d8                 | 
287d8                 | _fatfs_cc_remove_chain
287d8     05 4A 05 F6 | 	mov	COUNT_, #5
287dc     A8 00 A0 FD | 	call	#pushregs_
287e0     09 1F 02 F6 | 	mov	local01, arg01
287e4     0A 21 02 F6 | 	mov	local02, arg02
287e8     0B 23 02 F6 | 	mov	local03, arg03
287ec     0F 25 02 FB | 	rdlong	local04, local01
287f0     02 20 16 F2 | 	cmp	local02, #2 wc
287f4     14 00 90 CD |  if_b	jmp	#LR__4160
287f8     18 24 06 F1 | 	add	local04, #24
287fc     12 FB 01 FB | 	rdlong	result1, local04
28800     18 24 86 F1 | 	sub	local04, #24
28804     FD 20 12 F2 | 	cmp	local02, result1 wc
28808     08 00 90 CD |  if_b	jmp	#LR__4161
2880c                 | LR__4160
2880c     02 FA 05 F6 | 	mov	result1, #2
28810     CC 00 90 FD | 	jmp	#LR__4166
28814                 | LR__4161
28814     00 22 0E F2 | 	cmp	local03, #0 wz
28818     18 00 90 AD |  if_e	jmp	#LR__4162
2881c     11 15 02 F6 | 	mov	arg02, local03
28820     12 13 02 F6 | 	mov	arg01, local04
28824     01 16 66 F6 | 	neg	arg03, #1
28828     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2882c     00 FA 0D F2 | 	cmp	result1, #0 wz
28830     AC 00 90 5D |  if_ne	jmp	#LR__4166
28834                 | LR__4162
28834                 | ' 	}
28834                 | ' 
28834                 | ' 
28834                 | ' 	do {
28834                 | LR__4163
28834     10 15 02 F6 | 	mov	arg02, local02
28838     0F 13 02 F6 | 	mov	arg01, local01
2883c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28840     FD 26 0A F6 | 	mov	local05, result1 wz
28844     94 00 90 AD |  if_e	jmp	#LR__4165
28848     01 26 0E F2 | 	cmp	local05, #1 wz
2884c     02 FA 05 A6 |  if_e	mov	result1, #2
28850     8C 00 90 AD |  if_e	jmp	#LR__4166
28854     FF FF 7F FF 
28858     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2885c     01 FA 05 A6 |  if_e	mov	result1, #1
28860     7C 00 90 AD |  if_e	jmp	#LR__4166
28864     10 15 02 F6 | 	mov	arg02, local02
28868     12 13 02 F6 | 	mov	arg01, local04
2886c     00 16 06 F6 | 	mov	arg03, #0
28870     54 FD BF FD | 	call	#_fatfs_cc_put_fat
28874     FD 22 0A F6 | 	mov	local03, result1 wz
28878     11 FB 01 56 |  if_ne	mov	result1, local03
2887c     60 00 90 5D |  if_ne	jmp	#LR__4166
28880     18 24 06 F1 | 	add	local04, #24
28884     12 23 02 FB | 	rdlong	local03, local04
28888     02 22 86 F1 | 	sub	local03, #2
2888c     04 24 86 F1 | 	sub	local04, #4
28890     12 21 02 FB | 	rdlong	local02, local04
28894     14 24 86 F1 | 	sub	local04, #20
28898     11 21 12 F2 | 	cmp	local02, local03 wc
2889c     24 00 90 3D |  if_ae	jmp	#LR__4164
288a0     14 24 06 F1 | 	add	local04, #20
288a4     12 23 02 FB | 	rdlong	local03, local04
288a8     01 22 06 F1 | 	add	local03, #1
288ac     12 23 62 FC | 	wrlong	local03, local04
288b0     10 24 86 F1 | 	sub	local04, #16
288b4     12 23 C2 FA | 	rdbyte	local03, local04
288b8     01 22 46 F5 | 	or	local03, #1
288bc     12 23 42 FC | 	wrbyte	local03, local04
288c0     04 24 86 F1 | 	sub	local04, #4
288c4                 | LR__4164
288c4     13 21 02 F6 | 	mov	local02, local05
288c8     18 24 06 F1 | 	add	local04, #24
288cc     12 27 02 FB | 	rdlong	local05, local04
288d0     18 24 86 F1 | 	sub	local04, #24
288d4     13 21 12 F2 | 	cmp	local02, local05 wc
288d8     58 FF 9F CD |  if_b	jmp	#LR__4163
288dc                 | LR__4165
288dc                 | ' #line 1500 "ff.c"
288dc                 | ' 	return FR_OK;
288dc     00 FA 05 F6 | 	mov	result1, #0
288e0                 | LR__4166
288e0     A7 F0 03 F6 | 	mov	ptra, fp
288e4     B2 00 A0 FD | 	call	#popregs_
288e8                 | _fatfs_cc_remove_chain_ret
288e8     2D 00 64 FD | 	ret
288ec                 | 
288ec                 | _fatfs_cc_create_chain
288ec     09 4A 05 F6 | 	mov	COUNT_, #9
288f0     A8 00 A0 FD | 	call	#pushregs_
288f4     09 1F 02 F6 | 	mov	local01, arg01
288f8     0A 21 0A F6 | 	mov	local02, arg02 wz
288fc     0F 23 02 FB | 	rdlong	local03, local01
28900     28 00 90 5D |  if_ne	jmp	#LR__4170
28904     10 22 06 F1 | 	add	local03, #16
28908     11 25 0A FB | 	rdlong	local04, local03 wz
2890c     10 22 86 F1 | 	sub	local03, #16
28910     18 22 06 51 |  if_ne	add	local03, #24
28914     11 27 02 5B |  if_ne	rdlong	local05, local03
28918     18 22 86 51 |  if_ne	sub	local03, #24
2891c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28920     50 00 90 4D |  if_c_and_nz	jmp	#LR__4171
28924     01 24 06 F6 | 	mov	local04, #1
28928     48 00 90 FD | 	jmp	#LR__4171
2892c                 | LR__4170
2892c     10 15 02 F6 | 	mov	arg02, local02
28930     0F 13 02 F6 | 	mov	arg01, local01
28934     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28938     FD 24 02 F6 | 	mov	local04, result1
2893c     02 24 16 F2 | 	cmp	local04, #2 wc
28940     01 FA 05 C6 |  if_b	mov	result1, #1
28944     BC 01 90 CD |  if_b	jmp	#LR__4181
28948     FF FF 7F FF 
2894c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28950     12 FB 01 A6 |  if_e	mov	result1, local04
28954     AC 01 90 AD |  if_e	jmp	#LR__4181
28958     18 22 06 F1 | 	add	local03, #24
2895c     11 27 02 FB | 	rdlong	local05, local03
28960     18 22 86 F1 | 	sub	local03, #24
28964     13 25 12 F2 | 	cmp	local04, local05 wc
28968     12 FB 01 C6 |  if_b	mov	result1, local04
2896c     94 01 90 CD |  if_b	jmp	#LR__4181
28970     10 25 02 F6 | 	mov	local04, local02
28974                 | LR__4171
28974     14 22 06 F1 | 	add	local03, #20
28978     11 27 0A FB | 	rdlong	local05, local03 wz
2897c     14 22 86 F1 | 	sub	local03, #20
28980     00 FA 05 A6 |  if_e	mov	result1, #0
28984     7C 01 90 AD |  if_e	jmp	#LR__4181
28988     00 28 06 F6 | 	mov	local06, #0
2898c     10 25 0A F2 | 	cmp	local04, local02 wz
28990     74 00 90 5D |  if_ne	jmp	#LR__4174
28994     12 29 02 F6 | 	mov	local06, local04
28998     01 28 06 F1 | 	add	local06, #1
2899c     18 22 06 F1 | 	add	local03, #24
289a0     11 27 02 FB | 	rdlong	local05, local03
289a4     18 22 86 F1 | 	sub	local03, #24
289a8     13 29 12 F2 | 	cmp	local06, local05 wc
289ac     02 28 06 36 |  if_ae	mov	local06, #2
289b0     14 15 02 F6 | 	mov	arg02, local06
289b4     0F 13 02 F6 | 	mov	arg01, local01
289b8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
289bc     FD 26 02 F6 | 	mov	local05, result1
289c0     01 26 0E F2 | 	cmp	local05, #1 wz
289c4     FF FF 7F 5F 
289c8     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
289cc     13 FB 01 A6 |  if_e	mov	result1, local05
289d0     30 01 90 AD |  if_e	jmp	#LR__4181
289d4     00 26 0E F2 | 	cmp	local05, #0 wz
289d8     2C 00 90 AD |  if_e	jmp	#LR__4173
289dc     10 22 06 F1 | 	add	local03, #16
289e0     11 2B 02 FB | 	rdlong	local07, local03
289e4     10 22 86 F1 | 	sub	local03, #16
289e8     02 2A 16 F2 | 	cmp	local07, #2 wc
289ec     14 00 90 CD |  if_b	jmp	#LR__4172
289f0     18 22 06 F1 | 	add	local03, #24
289f4     11 27 02 FB | 	rdlong	local05, local03
289f8     18 22 86 F1 | 	sub	local03, #24
289fc     13 2B 12 F2 | 	cmp	local07, local05 wc
28a00     15 25 02 C6 |  if_b	mov	local04, local07
28a04                 | LR__4172
28a04     00 28 06 F6 | 	mov	local06, #0
28a08                 | LR__4173
28a08                 | LR__4174
28a08     00 28 0E F2 | 	cmp	local06, #0 wz
28a0c     60 00 90 5D |  if_ne	jmp	#LR__4177
28a10     12 29 02 F6 | 	mov	local06, local04
28a14                 | ' 			ncl = scl;
28a14                 | ' 			for (;;) {
28a14                 | LR__4175
28a14     01 28 06 F1 | 	add	local06, #1
28a18     18 22 06 F1 | 	add	local03, #24
28a1c     11 27 02 FB | 	rdlong	local05, local03
28a20     18 22 86 F1 | 	sub	local03, #24
28a24     13 29 12 F2 | 	cmp	local06, local05 wc
28a28     02 28 06 36 |  if_ae	mov	local06, #2
28a2c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28a30     00 FA 05 16 |  if_a	mov	result1, #0
28a34     CC 00 90 1D |  if_a	jmp	#LR__4181
28a38     14 15 02 F6 | 	mov	arg02, local06
28a3c     0F 13 02 F6 | 	mov	arg01, local01
28a40     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28a44     FD 2A 0A F6 | 	mov	local07, result1 wz
28a48     24 00 90 AD |  if_e	jmp	#LR__4176
28a4c     01 2A 0E F2 | 	cmp	local07, #1 wz
28a50     FF FF 7F 5F 
28a54     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28a58     15 FB 01 A6 |  if_e	mov	result1, local07
28a5c     A4 00 90 AD |  if_e	jmp	#LR__4181
28a60     12 29 0A F2 | 	cmp	local06, local04 wz
28a64     00 FA 05 A6 |  if_e	mov	result1, #0
28a68     98 00 90 AD |  if_e	jmp	#LR__4181
28a6c     A4 FF 9F FD | 	jmp	#LR__4175
28a70                 | LR__4176
28a70                 | LR__4177
28a70     11 13 02 F6 | 	mov	arg01, local03
28a74     14 15 02 F6 | 	mov	arg02, local06
28a78     01 16 66 F6 | 	neg	arg03, #1
28a7c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28a80     FD 2C 0A F6 | 	mov	local08, result1 wz
28a84     1C 00 90 5D |  if_ne	jmp	#LR__4178
28a88     00 20 0E F2 | 	cmp	local02, #0 wz
28a8c     14 00 90 AD |  if_e	jmp	#LR__4178
28a90     11 13 02 F6 | 	mov	arg01, local03
28a94     10 15 02 F6 | 	mov	arg02, local02
28a98     14 17 02 F6 | 	mov	arg03, local06
28a9c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28aa0     FD 2C 02 F6 | 	mov	local08, result1
28aa4                 | LR__4178
28aa4     00 2C 0E F2 | 	cmp	local08, #0 wz
28aa8     4C 00 90 5D |  if_ne	jmp	#LR__4179
28aac     10 22 06 F1 | 	add	local03, #16
28ab0     11 29 62 FC | 	wrlong	local06, local03
28ab4     08 22 06 F1 | 	add	local03, #8
28ab8     11 27 02 FB | 	rdlong	local05, local03
28abc     02 26 86 F1 | 	sub	local05, #2
28ac0     04 22 86 F1 | 	sub	local03, #4
28ac4     11 2F 02 FB | 	rdlong	local09, local03
28ac8     14 22 86 F1 | 	sub	local03, #20
28acc     13 2F 1A F2 | 	cmp	local09, local05 wcz
28ad0     14 22 06 E1 |  if_be	add	local03, #20
28ad4     11 2F 02 EB |  if_be	rdlong	local09, local03
28ad8     01 2E 86 E1 |  if_be	sub	local09, #1
28adc     11 2F 62 EC |  if_be	wrlong	local09, local03
28ae0     14 22 86 E1 |  if_be	sub	local03, #20
28ae4     04 22 06 F1 | 	add	local03, #4
28ae8     11 27 C2 FA | 	rdbyte	local05, local03
28aec     01 26 46 F5 | 	or	local05, #1
28af0     11 27 42 FC | 	wrbyte	local05, local03
28af4     08 00 90 FD | 	jmp	#LR__4180
28af8                 | LR__4179
28af8     01 2C 0E F2 | 	cmp	local08, #1 wz
28afc     01 28 C6 F6 | 	negz	local06, #1
28b00                 | LR__4180
28b00                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28b00                 | ' 	}
28b00                 | ' 
28b00                 | ' 	return ncl;
28b00     14 FB 01 F6 | 	mov	result1, local06
28b04                 | LR__4181
28b04     A7 F0 03 F6 | 	mov	ptra, fp
28b08     B2 00 A0 FD | 	call	#popregs_
28b0c                 | _fatfs_cc_create_chain_ret
28b0c     2D 00 64 FD | 	ret
28b10                 | 
28b10                 | _fatfs_cc_dir_clear
28b10     06 4A 05 F6 | 	mov	COUNT_, #6
28b14     A8 00 A0 FD | 	call	#pushregs_
28b18     09 1F 02 F6 | 	mov	local01, arg01
28b1c     0A 21 02 F6 | 	mov	local02, arg02
28b20     0F 13 02 F6 | 	mov	arg01, local01
28b24     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28b28     00 FA 0D F2 | 	cmp	result1, #0 wz
28b2c     01 FA 05 56 |  if_ne	mov	result1, #1
28b30     90 00 90 5D |  if_ne	jmp	#LR__4192
28b34     0F 13 02 F6 | 	mov	arg01, local01
28b38     10 15 02 F6 | 	mov	arg02, local02
28b3c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28b40     FD 22 02 F6 | 	mov	local03, result1
28b44     30 1E 06 F1 | 	add	local01, #48
28b48     0F 23 62 FC | 	wrlong	local03, local01
28b4c     04 1E 06 F1 | 	add	local01, #4
28b50     0F 13 02 F6 | 	mov	arg01, local01
28b54     00 14 06 F6 | 	mov	arg02, #0
28b58     09 16 C6 F9 | 	decod	arg03, #9
28b5c     98 00 A0 FD | 	call	#\builtin_bytefill_
28b60     0F 25 02 F6 | 	mov	local04, local01
28b64                 | ' #line 1667 "ff.c"
28b64                 | ' 	{
28b64                 | ' 		ibuf = fs->win; szb = 1;
28b64                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28b64     00 26 06 F6 | 	mov	local05, #0
28b68     34 1E 86 F1 | 	sub	local01, #52
28b6c                 | LR__4190
28b6c     0A 1E 06 F1 | 	add	local01, #10
28b70     0F 29 E2 FA | 	rdword	local06, local01
28b74     0A 1E 86 F1 | 	sub	local01, #10
28b78     14 27 12 F2 | 	cmp	local05, local06 wc
28b7c     2C 00 90 3D |  if_ae	jmp	#LR__4191
28b80     01 1E 06 F1 | 	add	local01, #1
28b84     0F 13 C2 FA | 	rdbyte	arg01, local01
28b88     01 1E 86 F1 | 	sub	local01, #1
28b8c     12 15 02 F6 | 	mov	arg02, local04
28b90     11 17 02 F6 | 	mov	arg03, local03
28b94     13 17 02 F1 | 	add	arg03, local05
28b98     01 18 06 F6 | 	mov	arg04, #1
28b9c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
28ba4     01 26 06 A1 |  if_e	add	local05, #1
28ba8     C0 FF 9F AD |  if_e	jmp	#LR__4190
28bac                 | LR__4191
28bac                 | ' 	}
28bac                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28bac     0A 1E 06 F1 | 	add	local01, #10
28bb0     0F 25 E2 FA | 	rdword	local04, local01
28bb4     12 27 0A F2 | 	cmp	local05, local04 wz
28bb8     00 28 06 A6 |  if_e	mov	local06, #0
28bbc     01 28 06 56 |  if_ne	mov	local06, #1
28bc0     14 FB 01 F6 | 	mov	result1, local06
28bc4                 | LR__4192
28bc4     A7 F0 03 F6 | 	mov	ptra, fp
28bc8     B2 00 A0 FD | 	call	#popregs_
28bcc                 | _fatfs_cc_dir_clear_ret
28bcc     2D 00 64 FD | 	ret
28bd0                 | 
28bd0                 | _fatfs_cc_dir_sdi
28bd0     06 4A 05 F6 | 	mov	COUNT_, #6
28bd4     A8 00 A0 FD | 	call	#pushregs_
28bd8     09 1F 02 F6 | 	mov	local01, arg01
28bdc     0A 21 02 F6 | 	mov	local02, arg02
28be0     0F 23 02 FB | 	rdlong	local03, local01
28be4     00 10 00 FF 
28be8     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28bec     1F 20 CE C7 |  if_b	test	local02, #31 wz
28bf0                 | ' 		return FR_INT_ERR;
28bf0     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28bf4     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4206
28bf8     10 1E 06 F1 | 	add	local01, #16
28bfc     0F 21 62 FC | 	wrlong	local02, local01
28c00     08 1E 86 F1 | 	sub	local01, #8
28c04     0F 25 0A FB | 	rdlong	local04, local01 wz
28c08     08 1E 86 F1 | 	sub	local01, #8
28c0c     11 27 C2 AA |  if_e	rdbyte	local05, local03
28c10     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28c14     28 22 06 21 |  if_nc_and_z	add	local03, #40
28c18     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28c1c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28c20     00 24 0E F2 | 	cmp	local04, #0 wz
28c24     3C 00 90 5D |  if_ne	jmp	#LR__4200
28c28     10 27 02 F6 | 	mov	local05, local02
28c2c     05 26 46 F0 | 	shr	local05, #5
28c30     08 22 06 F1 | 	add	local03, #8
28c34     11 15 E2 FA | 	rdword	arg02, local03
28c38     08 22 86 F1 | 	sub	local03, #8
28c3c     0A 27 12 F2 | 	cmp	local05, arg02 wc
28c40     02 FA 05 36 |  if_ae	mov	result1, #2
28c44     E4 00 90 3D |  if_ae	jmp	#LR__4206
28c48     28 22 06 F1 | 	add	local03, #40
28c4c     11 27 02 FB | 	rdlong	local05, local03
28c50     28 22 86 F1 | 	sub	local03, #40
28c54     18 1E 06 F1 | 	add	local01, #24
28c58     0F 27 62 FC | 	wrlong	local05, local01
28c5c     18 1E 86 F1 | 	sub	local01, #24
28c60     7C 00 90 FD | 	jmp	#LR__4205
28c64                 | LR__4200
28c64     0A 22 06 F1 | 	add	local03, #10
28c68     11 29 E2 FA | 	rdword	local06, local03
28c6c     0A 22 86 F1 | 	sub	local03, #10
28c70     09 28 66 F0 | 	shl	local06, #9
28c74                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28c74                 | ' 		while (ofs >= csz) {
28c74                 | LR__4201
28c74     14 21 12 F2 | 	cmp	local02, local06 wc
28c78     4C 00 90 CD |  if_b	jmp	#LR__4204
28c7c     0F 13 02 F6 | 	mov	arg01, local01
28c80     12 15 02 F6 | 	mov	arg02, local04
28c84     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28c88     FD 24 02 F6 | 	mov	local04, result1
28c8c     FF FF 7F FF 
28c90     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28c94     01 FA 05 A6 |  if_e	mov	result1, #1
28c98     90 00 90 AD |  if_e	jmp	#LR__4206
28c9c     02 24 16 F2 | 	cmp	local04, #2 wc
28ca0     14 00 90 CD |  if_b	jmp	#LR__4202
28ca4     18 22 06 F1 | 	add	local03, #24
28ca8     11 27 02 FB | 	rdlong	local05, local03
28cac     18 22 86 F1 | 	sub	local03, #24
28cb0     13 25 12 F2 | 	cmp	local04, local05 wc
28cb4     08 00 90 CD |  if_b	jmp	#LR__4203
28cb8                 | LR__4202
28cb8     02 FA 05 F6 | 	mov	result1, #2
28cbc     6C 00 90 FD | 	jmp	#LR__4206
28cc0                 | LR__4203
28cc0     14 21 82 F1 | 	sub	local02, local06
28cc4     AC FF 9F FD | 	jmp	#LR__4201
28cc8                 | LR__4204
28cc8     11 13 02 F6 | 	mov	arg01, local03
28ccc     12 15 02 F6 | 	mov	arg02, local04
28cd0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28cd4     18 1E 06 F1 | 	add	local01, #24
28cd8     0F FB 61 FC | 	wrlong	result1, local01
28cdc     18 1E 86 F1 | 	sub	local01, #24
28ce0                 | LR__4205
28ce0     14 1E 06 F1 | 	add	local01, #20
28ce4     0F 25 62 FC | 	wrlong	local04, local01
28ce8     04 1E 06 F1 | 	add	local01, #4
28cec     0F 27 0A FB | 	rdlong	local05, local01 wz
28cf0     18 1E 86 F1 | 	sub	local01, #24
28cf4     02 FA 05 A6 |  if_e	mov	result1, #2
28cf8     30 00 90 AD |  if_e	jmp	#LR__4206
28cfc     10 29 02 F6 | 	mov	local06, local02
28d00     09 28 46 F0 | 	shr	local06, #9
28d04     18 1E 06 F1 | 	add	local01, #24
28d08     0F 27 02 FB | 	rdlong	local05, local01
28d0c     14 27 02 F1 | 	add	local05, local06
28d10     0F 27 62 FC | 	wrlong	local05, local01
28d14     34 22 06 F1 | 	add	local03, #52
28d18     FF 21 06 F5 | 	and	local02, #511
28d1c     10 23 02 F1 | 	add	local03, local02
28d20     04 1E 06 F1 | 	add	local01, #4
28d24     0F 23 62 FC | 	wrlong	local03, local01
28d28                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28d28                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28d28                 | ' 
28d28                 | ' 	return FR_OK;
28d28     00 FA 05 F6 | 	mov	result1, #0
28d2c                 | LR__4206
28d2c     A7 F0 03 F6 | 	mov	ptra, fp
28d30     B2 00 A0 FD | 	call	#popregs_
28d34                 | _fatfs_cc_dir_sdi_ret
28d34     2D 00 64 FD | 	ret
28d38                 | 
28d38                 | _fatfs_cc_dir_next
28d38     05 4A 05 F6 | 	mov	COUNT_, #5
28d3c     A8 00 A0 FD | 	call	#pushregs_
28d40     09 1F 02 F6 | 	mov	local01, arg01
28d44     0A 21 02 F6 | 	mov	local02, arg02
28d48     0F 23 02 FB | 	rdlong	local03, local01
28d4c     10 1E 06 F1 | 	add	local01, #16
28d50     0F 25 02 FB | 	rdlong	local04, local01
28d54     10 1E 86 F1 | 	sub	local01, #16
28d58     20 24 06 F1 | 	add	local04, #32
28d5c     00 10 00 FF 
28d60     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28d64     18 1E 06 31 |  if_ae	add	local01, #24
28d68     0F 01 68 3C |  if_ae	wrlong	#0, local01
28d6c     18 1E 86 31 |  if_ae	sub	local01, #24
28d70     18 1E 06 F1 | 	add	local01, #24
28d74     0F 15 0A FB | 	rdlong	arg02, local01 wz
28d78     18 1E 86 F1 | 	sub	local01, #24
28d7c     04 FA 05 A6 |  if_e	mov	result1, #4
28d80     64 01 90 AD |  if_e	jmp	#LR__4215
28d84     FF 25 CE F7 | 	test	local04, #511 wz
28d88     3C 01 90 5D |  if_ne	jmp	#LR__4214
28d8c     18 1E 06 F1 | 	add	local01, #24
28d90     0F 15 02 FB | 	rdlong	arg02, local01
28d94     01 14 06 F1 | 	add	arg02, #1
28d98     0F 15 62 FC | 	wrlong	arg02, local01
28d9c     04 1E 86 F1 | 	sub	local01, #4
28da0     0F 15 0A FB | 	rdlong	arg02, local01 wz
28da4     14 1E 86 F1 | 	sub	local01, #20
28da8     2C 00 90 5D |  if_ne	jmp	#LR__4210
28dac     12 15 02 F6 | 	mov	arg02, local04
28db0     05 14 46 F0 | 	shr	arg02, #5
28db4     08 22 06 F1 | 	add	local03, #8
28db8     11 21 E2 FA | 	rdword	local02, local03
28dbc     08 22 86 F1 | 	sub	local03, #8
28dc0     10 15 12 F2 | 	cmp	arg02, local02 wc
28dc4     18 1E 06 31 |  if_ae	add	local01, #24
28dc8     0F 01 68 3C |  if_ae	wrlong	#0, local01
28dcc                 | ' 				dp->sect = 0; return FR_NO_FILE;
28dcc     04 FA 05 36 |  if_ae	mov	result1, #4
28dd0     14 01 90 3D |  if_ae	jmp	#LR__4215
28dd4     F0 00 90 FD | 	jmp	#LR__4213
28dd8                 | LR__4210
28dd8     12 13 02 F6 | 	mov	arg01, local04
28ddc     09 12 46 F0 | 	shr	arg01, #9
28de0     0A 22 06 F1 | 	add	local03, #10
28de4     11 15 E2 FA | 	rdword	arg02, local03
28de8     0A 22 86 F1 | 	sub	local03, #10
28dec     01 14 86 F1 | 	sub	arg02, #1
28df0     0A 13 CA F7 | 	test	arg01, arg02 wz
28df4     D0 00 90 5D |  if_ne	jmp	#LR__4212
28df8     0F 13 02 F6 | 	mov	arg01, local01
28dfc     14 1E 06 F1 | 	add	local01, #20
28e00     0F 15 02 FB | 	rdlong	arg02, local01
28e04     14 1E 86 F1 | 	sub	local01, #20
28e08     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28e0c     FD 26 02 F6 | 	mov	local05, result1
28e10     02 26 16 F2 | 	cmp	local05, #2 wc
28e14     02 FA 05 C6 |  if_b	mov	result1, #2
28e18     CC 00 90 CD |  if_b	jmp	#LR__4215
28e1c     FF FF 7F FF 
28e20     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28e24     01 FA 05 A6 |  if_e	mov	result1, #1
28e28     BC 00 90 AD |  if_e	jmp	#LR__4215
28e2c     18 22 06 F1 | 	add	local03, #24
28e30     11 15 02 FB | 	rdlong	arg02, local03
28e34     18 22 86 F1 | 	sub	local03, #24
28e38     0A 27 12 F2 | 	cmp	local05, arg02 wc
28e3c     68 00 90 CD |  if_b	jmp	#LR__4211
28e40     00 20 0E F2 | 	cmp	local02, #0 wz
28e44     18 1E 06 A1 |  if_e	add	local01, #24
28e48     0F 01 68 AC |  if_e	wrlong	#0, local01
28e4c                 | ' 						dp->sect = 0; return FR_NO_FILE;
28e4c     04 FA 05 A6 |  if_e	mov	result1, #4
28e50     94 00 90 AD |  if_e	jmp	#LR__4215
28e54     0F 13 02 F6 | 	mov	arg01, local01
28e58     14 1E 06 F1 | 	add	local01, #20
28e5c     0F 15 02 FB | 	rdlong	arg02, local01
28e60     14 1E 86 F1 | 	sub	local01, #20
28e64     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28e68     FD 26 0A F6 | 	mov	local05, result1 wz
28e6c     07 FA 05 A6 |  if_e	mov	result1, #7
28e70     74 00 90 AD |  if_e	jmp	#LR__4215
28e74     01 26 0E F2 | 	cmp	local05, #1 wz
28e78     02 FA 05 A6 |  if_e	mov	result1, #2
28e7c     68 00 90 AD |  if_e	jmp	#LR__4215
28e80     FF FF 7F FF 
28e84     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28e88     01 FA 05 A6 |  if_e	mov	result1, #1
28e8c     58 00 90 AD |  if_e	jmp	#LR__4215
28e90     13 15 02 F6 | 	mov	arg02, local05
28e94     11 13 02 F6 | 	mov	arg01, local03
28e98     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
28ea0     01 FA 05 56 |  if_ne	mov	result1, #1
28ea4     40 00 90 5D |  if_ne	jmp	#LR__4215
28ea8                 | LR__4211
28ea8     14 1E 06 F1 | 	add	local01, #20
28eac     0F 27 62 FC | 	wrlong	local05, local01
28eb0     11 13 02 F6 | 	mov	arg01, local03
28eb4     13 15 02 F6 | 	mov	arg02, local05
28eb8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28ebc     04 1E 06 F1 | 	add	local01, #4
28ec0     0F FB 61 FC | 	wrlong	result1, local01
28ec4     18 1E 86 F1 | 	sub	local01, #24
28ec8                 | LR__4212
28ec8                 | LR__4213
28ec8                 | LR__4214
28ec8     10 1E 06 F1 | 	add	local01, #16
28ecc     0F 25 62 FC | 	wrlong	local04, local01
28ed0     34 22 06 F1 | 	add	local03, #52
28ed4     FF 25 06 F5 | 	and	local04, #511
28ed8     12 23 02 F1 | 	add	local03, local04
28edc     0C 1E 06 F1 | 	add	local01, #12
28ee0     0F 23 62 FC | 	wrlong	local03, local01
28ee4                 | ' #line 1771 "ff.c"
28ee4                 | ' 				}
28ee4                 | ' 				dp->clust = clst;
28ee4                 | ' 				dp->sect = clst2sect(fs, clst);
28ee4                 | ' 			}
28ee4                 | ' 		}
28ee4                 | ' 	}
28ee4                 | ' 	dp->dptr = ofs;
28ee4                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28ee4                 | ' 
28ee4                 | ' 	return FR_OK;
28ee4     00 FA 05 F6 | 	mov	result1, #0
28ee8                 | LR__4215
28ee8     A7 F0 03 F6 | 	mov	ptra, fp
28eec     B2 00 A0 FD | 	call	#popregs_
28ef0                 | _fatfs_cc_dir_next_ret
28ef0     2D 00 64 FD | 	ret
28ef4                 | 
28ef4                 | _fatfs_cc_dir_alloc
28ef4     08 4A 05 F6 | 	mov	COUNT_, #8
28ef8     A8 00 A0 FD | 	call	#pushregs_
28efc     09 1F 02 F6 | 	mov	local01, arg01
28f00     0A 21 02 F6 | 	mov	local02, arg02
28f04     0F 23 02 FB | 	rdlong	local03, local01
28f08     0F 13 02 F6 | 	mov	arg01, local01
28f0c     00 14 06 F6 | 	mov	arg02, #0
28f10     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28f14     FD 24 0A F6 | 	mov	local04, result1 wz
28f18     70 00 90 5D |  if_ne	jmp	#LR__4224
28f1c     00 26 06 F6 | 	mov	local05, #0
28f20                 | ' 		n = 0;
28f20                 | ' 		do {
28f20                 | LR__4220
28f20     18 1E 06 F1 | 	add	local01, #24
28f24     0F 15 02 FB | 	rdlong	arg02, local01
28f28     18 1E 86 F1 | 	sub	local01, #24
28f2c     11 13 02 F6 | 	mov	arg01, local03
28f30     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28f34     FD 24 0A F6 | 	mov	local04, result1 wz
28f38     50 00 90 5D |  if_ne	jmp	#LR__4223
28f3c     1C 1E 06 F1 | 	add	local01, #28
28f40     0F 29 02 FB | 	rdlong	local06, local01
28f44     1C 1E 86 F1 | 	sub	local01, #28
28f48     14 29 C2 FA | 	rdbyte	local06, local06
28f4c     E5 28 0E F2 | 	cmp	local06, #229 wz
28f50     1C 1E 06 51 |  if_ne	add	local01, #28
28f54     0F 2B 02 5B |  if_ne	rdlong	local07, local01
28f58     1C 1E 86 51 |  if_ne	sub	local01, #28
28f5c     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
28f60     10 00 90 5D |  if_ne	jmp	#LR__4221
28f64     01 26 06 F1 | 	add	local05, #1
28f68     10 27 0A F2 | 	cmp	local05, local02 wz
28f6c     1C 00 90 AD |  if_e	jmp	#LR__4223
28f70     04 00 90 FD | 	jmp	#LR__4222
28f74                 | LR__4221
28f74     00 26 06 F6 | 	mov	local05, #0
28f78                 | LR__4222
28f78     0F 13 02 F6 | 	mov	arg01, local01
28f7c     01 14 06 F6 | 	mov	arg02, #1
28f80     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
28f84     FD 24 0A F6 | 	mov	local04, result1 wz
28f88     94 FF 9F AD |  if_e	jmp	#LR__4220
28f8c                 | LR__4223
28f8c                 | LR__4224
28f8c     04 24 0E F2 | 	cmp	local04, #4 wz
28f90     07 24 06 A6 |  if_e	mov	local04, #7
28f94                 | ' 	return res;
28f94     12 FB 01 F6 | 	mov	result1, local04
28f98     A7 F0 03 F6 | 	mov	ptra, fp
28f9c     B2 00 A0 FD | 	call	#popregs_
28fa0                 | _fatfs_cc_dir_alloc_ret
28fa0     2D 00 64 FD | 	ret
28fa4                 | 
28fa4                 | _fatfs_cc_ld_clust
28fa4     09 01 02 F6 | 	mov	_var01, arg01
28fa8     0A 13 02 F6 | 	mov	arg01, arg02
28fac     1A 12 06 F1 | 	add	arg01, #26
28fb0                 | ' {
28fb0                 | ' 
28fb0                 | ' 	return *((WORD*)ptr);
28fb0     09 FB E1 FA | 	rdword	result1, arg01
28fb4     FD 12 32 F9 | 	getword	arg01, result1, #0
28fb8     00 01 C2 FA | 	rdbyte	_var01, _var01
28fbc     03 00 0E F2 | 	cmp	_var01, #3 wz
28fc0     14 14 06 A1 |  if_e	add	arg02, #20
28fc4                 | ' {
28fc4                 | ' 
28fc4                 | ' 	return *((WORD*)ptr);
28fc4     0A FB E1 AA |  if_e	rdword	result1, arg02
28fc8     10 FA 65 A0 |  if_e	shl	result1, #16
28fcc     FD 12 42 A5 |  if_e	or	arg01, result1
28fd0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
28fd0                 | ' 	}
28fd0                 | ' 
28fd0                 | ' 	return cl;
28fd0     09 FB 01 F6 | 	mov	result1, arg01
28fd4                 | _fatfs_cc_ld_clust_ret
28fd4     2D 00 64 FD | 	ret
28fd8                 | 
28fd8                 | _fatfs_cc_st_clust
28fd8     09 01 02 F6 | 	mov	_var01, arg01
28fdc     0A 13 02 F6 | 	mov	arg01, arg02
28fe0     1A 12 06 F1 | 	add	arg01, #26
28fe4     09 17 52 FC | 	wrword	arg03, arg01
28fe8     00 01 C2 FA | 	rdbyte	_var01, _var01
28fec     03 00 0E F2 | 	cmp	_var01, #3 wz
28ff0     14 14 06 A1 |  if_e	add	arg02, #20
28ff4     10 16 46 A0 |  if_e	shr	arg03, #16
28ff8     0A 17 52 AC |  if_e	wrword	arg03, arg02
28ffc                 | _fatfs_cc_st_clust_ret
28ffc     2D 00 64 FD | 	ret
29000                 | 
29000                 | _fatfs_cc_cmp_lfn
29000     07 4A 05 F6 | 	mov	COUNT_, #7
29004     A8 00 A0 FD | 	call	#pushregs_
29008     09 1F 02 F6 | 	mov	local01, arg01
2900c     0A 13 02 F6 | 	mov	arg01, arg02
29010     1A 12 06 F1 | 	add	arg01, #26
29014                 | ' {
29014                 | ' 
29014                 | ' 	return *((WORD*)ptr);
29014     09 FB E9 FA | 	rdword	result1, arg01 wz
29018     00 FA 05 56 |  if_ne	mov	result1, #0
2901c     E0 00 90 5D |  if_ne	jmp	#LR__4236
29020     0A 21 C2 FA | 	rdbyte	local02, arg02
29024     3F 20 06 F5 | 	and	local02, #63
29028     01 20 86 F1 | 	sub	local02, #1
2902c     0D 20 06 FD | 	qmul	local02, #13
29030                 | ' 
29030                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
29030                 | ' 
29030                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29030     01 22 06 F6 | 	mov	local03, #1
29034     00 24 06 F6 | 	mov	local04, #0
29038     18 26 62 FD | 	getqx	local05
2903c                 | LR__4230
2903c     0D 24 16 F2 | 	cmp	local04, #13 wc
29040     9C 00 90 3D |  if_ae	jmp	#LR__4235
29044     0A 13 02 F6 | 	mov	arg01, arg02
29048     12 21 02 F6 | 	mov	local02, local04
2904c     01 00 00 FF 
29050     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29054     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29058     10 21 C2 FA | 	rdbyte	local02, local02
2905c     01 20 06 FA | 	mul	local02, #1
29060     10 13 02 F1 | 	add	arg01, local02
29064     01 00 00 FF 
29068     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2906c                 | ' {
2906c                 | ' 
2906c                 | ' 	return *((WORD*)ptr);
2906c     09 FB E1 FA | 	rdword	result1, arg01
29070     FD 28 02 F6 | 	mov	local06, result1
29074     11 21 02 F6 | 	mov	local02, local03
29078     0F 20 4E F7 | 	zerox	local02, #15 wz
2907c     44 00 90 AD |  if_e	jmp	#LR__4233
29080     00 27 16 F2 | 	cmp	local05, #256 wc
29084     2C 00 90 3D |  if_ae	jmp	#LR__4231
29088     14 13 32 F9 | 	getword	arg01, local06, #0
2908c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29090     FD 20 02 F6 | 	mov	local02, result1
29094     13 23 02 F6 | 	mov	local03, local05
29098     01 22 66 F0 | 	shl	local03, #1
2909c     0F 23 02 F1 | 	add	local03, local01
290a0     11 13 E2 FA | 	rdword	arg01, local03
290a4     01 26 06 F1 | 	add	local05, #1
290a8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
290ac     FD 20 0A F2 | 	cmp	local02, result1 wz
290b0     08 00 90 AD |  if_e	jmp	#LR__4232
290b4                 | LR__4231
290b4                 | ' 				return 0;
290b4     00 FA 05 F6 | 	mov	result1, #0
290b8     44 00 90 FD | 	jmp	#LR__4236
290bc                 | LR__4232
290bc     14 23 02 F6 | 	mov	local03, local06
290c0     14 00 90 FD | 	jmp	#LR__4234
290c4                 | LR__4233
290c4     14 29 32 F9 | 	getword	local06, local06, #0
290c8     7F 00 00 FF 
290cc     FF 29 0E F2 | 	cmp	local06, ##65535 wz
290d0     00 FA 05 56 |  if_ne	mov	result1, #0
290d4     28 00 90 5D |  if_ne	jmp	#LR__4236
290d8                 | LR__4234
290d8     01 24 06 F1 | 	add	local04, #1
290dc     5C FF 9F FD | 	jmp	#LR__4230
290e0                 | LR__4235
290e0     0A 21 C2 FA | 	rdbyte	local02, arg02
290e4     40 20 CE F7 | 	test	local02, #64 wz
290e8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
290ec     01 26 66 50 |  if_ne	shl	local05, #1
290f0     0F 27 02 51 |  if_ne	add	local05, local01
290f4     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
290f8     00 FA 05 56 |  if_ne	mov	result1, #0
290fc                 | ' 
290fc                 | ' 	return 1;
290fc     01 FA 05 A6 |  if_e	mov	result1, #1
29100                 | LR__4236
29100     A7 F0 03 F6 | 	mov	ptra, fp
29104     B2 00 A0 FD | 	call	#popregs_
29108                 | _fatfs_cc_cmp_lfn_ret
29108     2D 00 64 FD | 	ret
2910c                 | 
2910c                 | _fatfs_cc_pick_lfn
2910c     09 01 02 F6 | 	mov	_var01, arg01
29110     0A 13 02 F6 | 	mov	arg01, arg02
29114     1A 12 06 F1 | 	add	arg01, #26
29118                 | ' {
29118                 | ' 
29118                 | ' 	return *((WORD*)ptr);
29118     09 FB E9 FA | 	rdword	result1, arg01 wz
2911c     00 FA 05 56 |  if_ne	mov	result1, #0
29120     D4 00 90 5D |  if_ne	jmp	#LR__4245
29124     0A 03 C2 FA | 	rdbyte	_var02, arg02
29128     40 02 26 F5 | 	andn	_var02, #64
2912c     01 02 86 F1 | 	sub	_var02, #1
29130     0D 02 06 FD | 	qmul	_var02, #13
29134                 | ' 
29134                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
29134                 | ' 
29134                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29134     01 04 06 F6 | 	mov	_var03, #1
29138     00 06 06 F6 | 	mov	_var04, #0
2913c     18 08 62 FD | 	getqx	_var05
29140                 | LR__4240
29140     0D 06 16 F2 | 	cmp	_var04, #13 wc
29144     80 00 90 3D |  if_ae	jmp	#LR__4243
29148     0A 13 02 F6 | 	mov	arg01, arg02
2914c     03 03 02 F6 | 	mov	_var02, _var04
29150     01 00 00 FF 
29154     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29158     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2915c     01 03 C2 FA | 	rdbyte	_var02, _var02
29160     01 02 06 FA | 	mul	_var02, #1
29164     01 13 02 F1 | 	add	arg01, _var02
29168     01 00 00 FF 
2916c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29170                 | ' {
29170                 | ' 
29170                 | ' 	return *((WORD*)ptr);
29170     09 FB E1 FA | 	rdword	result1, arg01
29174     FD 0A 02 F6 | 	mov	_var06, result1
29178     02 03 02 F6 | 	mov	_var02, _var03
2917c     0F 02 4E F7 | 	zerox	_var02, #15 wz
29180     28 00 90 AD |  if_e	jmp	#LR__4241
29184     00 09 16 F2 | 	cmp	_var05, #256 wc
29188     00 FA 05 36 |  if_ae	mov	result1, #0
2918c     68 00 90 3D |  if_ae	jmp	#LR__4245
29190     04 03 02 F6 | 	mov	_var02, _var05
29194     01 02 66 F0 | 	shl	_var02, #1
29198     00 03 02 F1 | 	add	_var02, _var01
2919c     05 05 02 F6 | 	mov	_var03, _var06
291a0     01 05 52 FC | 	wrword	_var03, _var02
291a4     01 08 06 F1 | 	add	_var05, #1
291a8     14 00 90 FD | 	jmp	#LR__4242
291ac                 | LR__4241
291ac     05 0B 32 F9 | 	getword	_var06, _var06, #0
291b0     7F 00 00 FF 
291b4     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
291b8     00 FA 05 56 |  if_ne	mov	result1, #0
291bc     38 00 90 5D |  if_ne	jmp	#LR__4245
291c0                 | LR__4242
291c0     01 06 06 F1 | 	add	_var04, #1
291c4     78 FF 9F FD | 	jmp	#LR__4240
291c8                 | LR__4243
291c8     0A 03 C2 FA | 	rdbyte	_var02, arg02
291cc     40 02 CE F7 | 	test	_var02, #64 wz
291d0     02 0D 02 56 |  if_ne	mov	_var07, _var03
291d4     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
291d8     18 00 90 AD |  if_e	jmp	#LR__4244
291dc     00 09 16 F2 | 	cmp	_var05, #256 wc
291e0     00 FA 05 36 |  if_ae	mov	result1, #0
291e4     10 00 90 3D |  if_ae	jmp	#LR__4245
291e8     01 08 66 F0 | 	shl	_var05, #1
291ec     00 09 02 F1 | 	add	_var05, _var01
291f0     04 01 58 FC | 	wrword	#0, _var05
291f4                 | LR__4244
291f4                 | ' 		lfnbuf[i] = 0;
291f4                 | ' 	}
291f4                 | ' 
291f4                 | ' 	return 1;
291f4     01 FA 05 F6 | 	mov	result1, #1
291f8                 | LR__4245
291f8                 | _fatfs_cc_pick_lfn_ret
291f8     2D 00 64 FD | 	ret
291fc                 | 
291fc                 | _fatfs_cc_put_lfn
291fc     0D 14 06 F1 | 	add	arg02, #13
29200     0A 19 42 FC | 	wrbyte	arg04, arg02
29204     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
29208     01 18 86 F1 | 	sub	arg04, #1
2920c     0D 18 06 FD | 	qmul	arg04, #13
29210     09 01 02 F6 | 	mov	_var01, arg01
29214     02 14 86 F1 | 	sub	arg02, #2
29218     0A 1F 48 FC | 	wrbyte	#15, arg02
2921c     01 14 06 F1 | 	add	arg02, #1
29220     0A 01 48 FC | 	wrbyte	#0, arg02
29224     0C 14 86 F1 | 	sub	arg02, #12
29228     0A 13 02 F6 | 	mov	arg01, arg02
2922c     1A 12 06 F1 | 	add	arg01, #26
29230     09 01 58 FC | 	wrword	#0, arg01
29234     00 02 06 F6 | 	mov	_var02, #0
29238     00 04 06 F6 | 	mov	_var03, #0
2923c                 | ' 	BYTE* dir,
2923c                 | ' 	BYTE ord,
2923c                 | ' 	BYTE sum
2923c                 | ' )
2923c                 | ' {
2923c                 | ' 	UINT i, s;
2923c                 | ' 	WCHAR wc;
2923c                 | ' 
2923c                 | ' 
2923c                 | ' 	dir[ 13 ] = sum;
2923c                 | ' 	dir[ 11 ] =  0x0F ;
2923c                 | ' 	dir[ 12 ] = 0;
2923c                 | ' 	st_word(dir +  26 , 0);
2923c                 | ' 
2923c                 | ' 	i = (ord - 1) * 13;
2923c                 | ' 	s = wc = 0;
2923c                 | ' 	do {
2923c     01 00 00 FF 
29240     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29244     18 06 62 FD | 	getqx	_var04
29248     97 2A 48 FB | 	callpa	#(@LR__4251-@LR__4250)>>2,fcache_load_ptr_
2924c                 | LR__4250
2924c     01 19 32 F9 | 	getword	arg04, _var02, #0
29250     7F 00 00 FF 
29254     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29258     03 13 02 56 |  if_ne	mov	arg01, _var04
2925c     01 06 06 51 |  if_ne	add	_var04, #1
29260     01 12 66 50 |  if_ne	shl	arg01, #1
29264     00 13 02 51 |  if_ne	add	arg01, _var01
29268     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2926c     0A 13 02 F6 | 	mov	arg01, arg02
29270     02 19 02 F6 | 	mov	arg04, _var03
29274     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29278     0C 19 C2 FA | 	rdbyte	arg04, arg04
2927c     01 18 06 FA | 	mul	arg04, #1
29280     0C 13 02 F1 | 	add	arg01, arg04
29284     09 03 52 FC | 	wrword	_var02, arg01
29288     01 19 02 F6 | 	mov	arg04, _var02
2928c     0F 18 4E F7 | 	zerox	arg04, #15 wz
29290     0F 02 CE A9 |  if_e	bmask	_var02, #15
29294     01 04 06 F1 | 	add	_var03, #1
29298     0D 04 16 F2 | 	cmp	_var03, #13 wc
2929c     AC FF 9F CD |  if_b	jmp	#LR__4250
292a0                 | LR__4251
292a0     01 00 00 FF 
292a4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
292a8     01 03 32 F9 | 	getword	_var02, _var02, #0
292ac     7F 00 00 FF 
292b0     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
292b4     01 06 66 50 |  if_ne	shl	_var04, #1
292b8     00 07 02 51 |  if_ne	add	_var04, _var01
292bc     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
292c0     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
292c4     40 16 46 A5 |  if_e	or	arg03, #64
292c8     0A 17 42 FC | 	wrbyte	arg03, arg02
292cc                 | _fatfs_cc_put_lfn_ret
292cc     2D 00 64 FD | 	ret
292d0                 | 
292d0                 | _fatfs_cc_gen_numname
292d0     08 4A 05 F6 | 	mov	COUNT_, #8
292d4     A8 00 A0 FD | 	call	#pushregs_
292d8     2C F0 07 F1 | 	add	ptra, #44
292dc     09 1F 02 F6 | 	mov	local01, arg01
292e0     0A 21 02 F6 | 	mov	local02, arg02
292e4     0B 23 02 F6 | 	mov	local03, arg03
292e8     0C 25 02 F6 | 	mov	local04, arg04
292ec     0F 13 02 F6 | 	mov	arg01, local01
292f0     10 15 02 F6 | 	mov	arg02, local02
292f4     0B 16 06 F6 | 	mov	arg03, #11
292f8     60 75 BF FD | 	call	#__system____builtin_memmove
292fc     06 24 16 F2 | 	cmp	local04, #6 wc
29300     48 00 90 CD |  if_b	jmp	#LR__4265
29304     12 27 02 F6 | 	mov	local05, local04
29308     97 1E 48 FB | 	callpa	#(@LR__4263-@LR__4260)>>2,fcache_load_ptr_
2930c                 | ' 		sreg = seq;
2930c                 | ' 		while (*lfn) {
2930c                 | LR__4260
2930c     11 29 EA FA | 	rdword	local06, local03 wz
29310     34 00 90 AD |  if_e	jmp	#LR__4264
29314     11 2B E2 FA | 	rdword	local07, local03
29318                 | ' 			wc = *lfn++;
29318                 | ' 			for (i = 0; i < 16; i++) {
29318     02 22 06 F1 | 	add	local03, #2
2931c     10 12 DC FC | 	rep	@LR__4262, #16
29320                 | LR__4261
29320     01 26 66 F0 | 	shl	local05, #1
29324     15 29 32 F9 | 	getword	local06, local07, #0
29328     01 28 06 F5 | 	and	local06, #1
2932c     14 27 02 F1 | 	add	local05, local06
29330     15 2B 32 F9 | 	getword	local07, local07, #0
29334     01 2A 46 F0 | 	shr	local07, #1
29338     10 26 2E F4 | 	testbn	local05, #16 wz
2933c     88 00 00 5F 
29340     21 26 66 55 |  if_ne	xor	local05, ##69665
29344                 | LR__4262
29344     C4 FF 9F FD | 	jmp	#LR__4260
29348                 | LR__4263
29348                 | LR__4264
29348     13 25 02 F6 | 	mov	local04, local05
2934c                 | LR__4265
2934c     07 2A 06 F6 | 	mov	local07, #7
29350                 | ' 			}
29350                 | ' 		}
29350                 | ' 		seq = (UINT)sreg;
29350                 | ' 	}
29350                 | ' 
29350                 | ' 
29350                 | ' 	i = 7;
29350                 | ' 	do {
29350     10 4E 05 F1 | 	add	fp, #16
29354     97 1A 48 FB | 	callpa	#(@LR__4267-@LR__4266)>>2,fcache_load_ptr_
29358                 | LR__4266
29358     12 27 42 F8 | 	getnib	local05, local04, #0
2935c     30 26 06 F1 | 	add	local05, #48
29360     04 24 46 F0 | 	shr	local04, #4
29364     13 29 E2 F8 | 	getbyte	local06, local05, #0
29368     3A 28 16 F2 | 	cmp	local06, #58 wc
2936c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29370     07 26 06 31 |  if_ae	add	local05, #7
29374     15 29 02 F6 | 	mov	local06, local07
29378     01 2A 8E F1 | 	sub	local07, #1 wz
2937c     A7 28 02 F1 | 	add	local06, fp
29380     14 27 42 FC | 	wrbyte	local05, local06
29384     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29388     CC FF 9F 5D |  if_ne	jmp	#LR__4266
2938c                 | LR__4267
2938c     15 29 02 F6 | 	mov	local06, local07
29390     A7 28 02 F1 | 	add	local06, fp
29394     14 FD 48 FC | 	wrbyte	#126, local06
29398                 | ' 	ns[i] = '~';
29398                 | ' 
29398                 | ' 
29398                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29398     00 26 06 F6 | 	mov	local05, #0
2939c     10 4E 85 F1 | 	sub	fp, #16
293a0     97 2A 48 FB | 	callpa	#(@LR__4270-@LR__4268)>>2,fcache_load_ptr_
293a4                 | LR__4268
293a4     15 27 12 F2 | 	cmp	local05, local07 wc
293a8     4C 00 90 3D |  if_ae	jmp	#LR__4271
293ac     13 29 02 F6 | 	mov	local06, local05
293b0     0F 29 02 F1 | 	add	local06, local01
293b4     14 29 C2 FA | 	rdbyte	local06, local06
293b8     20 28 0E F2 | 	cmp	local06, #32 wz
293bc     38 00 90 AD |  if_e	jmp	#LR__4271
293c0     13 13 02 F6 | 	mov	arg01, local05
293c4     0F 13 02 F1 | 	add	arg01, local01
293c8     09 13 CA FA | 	rdbyte	arg01, arg01 wz
293cc     00 FA 05 56 |  if_ne	mov	result1, #0
293d0                 | ' 
293d0                 | ' 	return 0;
293d0     00 FA 05 A6 |  if_e	mov	result1, #0
293d4     00 FA 0D F2 | 	cmp	result1, #0 wz
293d8     14 00 90 AD |  if_e	jmp	#LR__4269
293dc     15 29 02 F6 | 	mov	local06, local07
293e0     01 28 86 F1 | 	sub	local06, #1
293e4     14 27 0A F2 | 	cmp	local05, local06 wz
293e8     0C 00 90 AD |  if_e	jmp	#LR__4271
293ec     01 26 06 F1 | 	add	local05, #1
293f0                 | LR__4269
293f0     01 26 06 F1 | 	add	local05, #1
293f4     AC FF 9F FD | 	jmp	#LR__4268
293f8                 | LR__4270
293f8                 | LR__4271
293f8     97 20 48 FB | 	callpa	#(@LR__4275-@LR__4272)>>2,fcache_load_ptr_
293fc                 | ' 			j++;
293fc                 | ' 		}
293fc                 | ' 	}
293fc                 | ' 	do {
293fc                 | LR__4272
293fc     13 29 02 F6 | 	mov	local06, local05
29400     0F 29 02 F1 | 	add	local06, local01
29404     08 2A 16 F2 | 	cmp	local07, #8 wc
29408     01 26 06 F1 | 	add	local05, #1
2940c     1C 00 90 3D |  if_ae	jmp	#LR__4273
29410     15 25 02 F6 | 	mov	local04, local07
29414     10 4E 05 F1 | 	add	fp, #16
29418     A7 24 02 F1 | 	add	local04, fp
2941c     12 2D C2 FA | 	rdbyte	local08, local04
29420     01 2A 06 F1 | 	add	local07, #1
29424     10 4E 85 F1 | 	sub	fp, #16
29428     04 00 90 FD | 	jmp	#LR__4274
2942c                 | LR__4273
2942c     20 2C 06 F6 | 	mov	local08, #32
29430                 | LR__4274
29430     14 2D 42 FC | 	wrbyte	local08, local06
29434     08 26 16 F2 | 	cmp	local05, #8 wc
29438     C0 FF 9F CD |  if_b	jmp	#LR__4272
2943c                 | LR__4275
2943c     A7 F0 03 F6 | 	mov	ptra, fp
29440     B2 00 A0 FD | 	call	#popregs_
29444                 | _fatfs_cc_gen_numname_ret
29444     2D 00 64 FD | 	ret
29448                 | 
29448                 | _fatfs_cc_sum_sfn
29448     00 00 06 F6 | 	mov	_var01, #0
2944c                 | ' )
2944c                 | ' {
2944c                 | ' 	BYTE sum = 0;
2944c                 | ' 	UINT n = 11;
2944c                 | ' 
2944c                 | ' 	do {
2944c     97 12 48 FB | 	callpa	#(@LR__4282-@LR__4280)>>2,fcache_load_ptr_
29450                 | LR__4280
29450     0B 10 DC FC | 	rep	@LR__4283, #11
29454                 | LR__4281
29454     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29458     01 FA 45 F0 | 	shr	result1, #1
2945c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29460     07 00 66 F0 | 	shl	_var01, #7
29464     00 FB 01 F1 | 	add	result1, _var01
29468     09 01 C2 FA | 	rdbyte	_var01, arg01
2946c     FD 00 02 F1 | 	add	_var01, result1
29470     01 12 06 F1 | 	add	arg01, #1
29474                 | LR__4282
29474                 | LR__4283
29474                 | ' 	return sum;
29474     00 FB 01 F6 | 	mov	result1, _var01
29478                 | _fatfs_cc_sum_sfn_ret
29478     2D 00 64 FD | 	ret
2947c                 | 
2947c                 | _fatfs_cc_dir_read
2947c     0C 4A 05 F6 | 	mov	COUNT_, #12
29480     A8 00 A0 FD | 	call	#pushregs_
29484     09 1F 02 F6 | 	mov	local01, arg01
29488     0A 21 02 F6 | 	mov	local02, arg02
2948c     04 22 06 F6 | 	mov	local03, #4
29490     0F 25 02 FB | 	rdlong	local04, local01
29494     FF 26 06 F6 | 	mov	local05, #255
29498     FF 28 06 F6 | 	mov	local06, #255
2949c                 | ' )
2949c                 | ' {
2949c                 | ' 	FRESULT res = FR_NO_FILE;
2949c                 | ' 	FATFS *fs = dp->obj.fs;
2949c                 | ' 	BYTE attr, b;
2949c                 | ' 
2949c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2949c                 | ' 
2949c                 | ' 
2949c                 | ' 	while (dp->sect) {
2949c                 | LR__4290
2949c     18 1E 06 F1 | 	add	local01, #24
294a0     0F FB 09 FB | 	rdlong	result1, local01 wz
294a4     18 1E 86 F1 | 	sub	local01, #24
294a8     AC 01 90 AD |  if_e	jmp	#LR__4300
294ac     18 1E 06 F1 | 	add	local01, #24
294b0     0F 15 02 FB | 	rdlong	arg02, local01
294b4     18 1E 86 F1 | 	sub	local01, #24
294b8     12 13 02 F6 | 	mov	arg01, local04
294bc     AC ED BF FD | 	call	#_fatfs_cc_move_window
294c0     FD 22 0A F6 | 	mov	local03, result1 wz
294c4     90 01 90 5D |  if_ne	jmp	#LR__4300
294c8     1C 1E 06 F1 | 	add	local01, #28
294cc     0F FB 01 FB | 	rdlong	result1, local01
294d0     1C 1E 86 F1 | 	sub	local01, #28
294d4     FD 2A C2 FA | 	rdbyte	local07, result1
294d8     15 FB 01 F6 | 	mov	result1, local07
294dc     07 FA 4D F7 | 	zerox	result1, #7 wz
294e0     04 22 06 A6 |  if_e	mov	local03, #4
294e4                 | ' 			res = FR_NO_FILE; break;
294e4     70 01 90 AD |  if_e	jmp	#LR__4300
294e8     1C 1E 06 F1 | 	add	local01, #28
294ec     0F 2D 02 FB | 	rdlong	local08, local01
294f0     0B 2C 06 F1 | 	add	local08, #11
294f4     16 2F C2 FA | 	rdbyte	local09, local08
294f8     3F 2E 06 F5 | 	and	local09, #63
294fc     16 1E 86 F1 | 	sub	local01, #22
29500     0F 2F 42 FC | 	wrbyte	local09, local01
29504     06 1E 86 F1 | 	sub	local01, #6
29508     15 FB E1 F8 | 	getbyte	result1, local07, #0
2950c     E5 FA 0D F2 | 	cmp	result1, #229 wz
29510     15 2D 02 56 |  if_ne	mov	local08, local07
29514     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
29518     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
2951c     1C 00 90 AD |  if_e	jmp	#LR__4291
29520     00 30 06 F6 | 	mov	local10, #0
29524     17 2D E2 F8 | 	getbyte	local08, local09, #0
29528     20 2C 26 F5 | 	andn	local08, #32
2952c     08 2C 0E F2 | 	cmp	local08, #8 wz
29530     01 30 06 A6 |  if_e	mov	local10, #1
29534     10 31 0A F2 | 	cmp	local10, local02 wz
29538     08 00 90 AD |  if_e	jmp	#LR__4292
2953c                 | LR__4291
2953c     FF 26 06 F6 | 	mov	local05, #255
29540     00 01 90 FD | 	jmp	#LR__4299
29544                 | LR__4292
29544     17 2F E2 F8 | 	getbyte	local09, local09, #0
29548     0F 2E 0E F2 | 	cmp	local09, #15 wz
2954c     B4 00 90 5D |  if_ne	jmp	#LR__4296
29550     15 33 E2 F8 | 	getbyte	local11, local07, #0
29554     40 32 CE F7 | 	test	local11, #64 wz
29558     30 00 90 AD |  if_e	jmp	#LR__4293
2955c     1C 1E 06 F1 | 	add	local01, #28
29560     0F 33 02 FB | 	rdlong	local11, local01
29564     0D 32 06 F1 | 	add	local11, #13
29568     19 29 C2 FA | 	rdbyte	local06, local11
2956c     15 2B E2 F8 | 	getbyte	local07, local07, #0
29570     BF 2A 06 F5 | 	and	local07, #191
29574     15 27 02 F6 | 	mov	local05, local07
29578     0C 1E 86 F1 | 	sub	local01, #12
2957c     0F 33 02 FB | 	rdlong	local11, local01
29580     1C 1E 06 F1 | 	add	local01, #28
29584     0F 33 62 FC | 	wrlong	local11, local01
29588     2C 1E 86 F1 | 	sub	local01, #44
2958c                 | LR__4293
2958c     15 2D E2 F8 | 	getbyte	local08, local07, #0
29590     13 31 E2 F8 | 	getbyte	local10, local05, #0
29594     18 2D 0A F2 | 	cmp	local08, local10 wz
29598     5C 00 90 5D |  if_ne	jmp	#LR__4294
2959c     14 31 E2 F8 | 	getbyte	local10, local06, #0
295a0     1C 1E 06 F1 | 	add	local01, #28
295a4     0F 2F 02 FB | 	rdlong	local09, local01
295a8     1C 1E 86 F1 | 	sub	local01, #28
295ac     0D 2E 06 F1 | 	add	local09, #13
295b0     17 2D C2 FA | 	rdbyte	local08, local09
295b4     16 2F E2 F8 | 	getbyte	local09, local08, #0
295b8     17 31 0A F2 | 	cmp	local10, local09 wz
295bc     38 00 90 5D |  if_ne	jmp	#LR__4294
295c0     0C 24 06 F1 | 	add	local04, #12
295c4     12 13 02 FB | 	rdlong	arg01, local04
295c8     0C 24 86 F1 | 	sub	local04, #12
295cc     1C 1E 06 F1 | 	add	local01, #28
295d0     0F 35 02 FB | 	rdlong	local12, local01
295d4     1C 1E 86 F1 | 	sub	local01, #28
295d8     1A 15 02 F6 | 	mov	arg02, local12
295dc     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
295e0     00 FA 4D F2 | 	cmps	result1, #0 wz
295e4     13 35 02 56 |  if_ne	mov	local12, local05
295e8     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
295ec     01 34 86 51 |  if_ne	sub	local12, #1
295f0     1A 33 02 56 |  if_ne	mov	local11, local12
295f4     04 00 90 5D |  if_ne	jmp	#LR__4295
295f8                 | LR__4294
295f8     FF 32 06 F6 | 	mov	local11, #255
295fc                 | LR__4295
295fc     19 27 02 F6 | 	mov	local05, local11
29600     40 00 90 FD | 	jmp	#LR__4298
29604                 | LR__4296
29604     13 33 02 F6 | 	mov	local11, local05
29608     07 32 4E F7 | 	zerox	local11, #7 wz
2960c     20 00 90 5D |  if_ne	jmp	#LR__4297
29610     14 29 E2 F8 | 	getbyte	local06, local06, #0
29614     1C 1E 06 F1 | 	add	local01, #28
29618     0F 13 02 FB | 	rdlong	arg01, local01
2961c     1C 1E 86 F1 | 	sub	local01, #28
29620     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
29624     FD FA E1 F8 | 	getbyte	result1, result1, #0
29628     FD 28 0A F2 | 	cmp	local06, result1 wz
2962c     28 00 90 AD |  if_e	jmp	#LR__4300
29630                 | LR__4297
29630     2C 1E 06 F1 | 	add	local01, #44
29634     FF FF FF FF 
29638     0F FF 6B FC | 	wrlong	##-1, local01
2963c     2C 1E 86 F1 | 	sub	local01, #44
29640                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29640                 | ' 					}
29640                 | ' 					break;
29640     14 00 90 FD | 	jmp	#LR__4300
29644                 | LR__4298
29644                 | LR__4299
29644     0F 13 02 F6 | 	mov	arg01, local01
29648     00 14 06 F6 | 	mov	arg02, #0
2964c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29650     FD 22 0A F6 | 	mov	local03, result1 wz
29654     44 FE 9F AD |  if_e	jmp	#LR__4290
29658                 | LR__4300
29658     00 22 0E F2 | 	cmp	local03, #0 wz
2965c     18 1E 06 51 |  if_ne	add	local01, #24
29660     0F 01 68 5C |  if_ne	wrlong	#0, local01
29664                 | ' 	return res;
29664     11 FB 01 F6 | 	mov	result1, local03
29668     A7 F0 03 F6 | 	mov	ptra, fp
2966c     B2 00 A0 FD | 	call	#popregs_
29670                 | _fatfs_cc_dir_read_ret
29670     2D 00 64 FD | 	ret
29674                 | 
29674                 | _fatfs_cc_dir_find
29674     0B 4A 05 F6 | 	mov	COUNT_, #11
29678     A8 00 A0 FD | 	call	#pushregs_
2967c     09 1F 02 F6 | 	mov	local01, arg01
29680     0F 21 02 FB | 	rdlong	local02, local01
29684     0F 13 02 F6 | 	mov	arg01, local01
29688     00 14 06 F6 | 	mov	arg02, #0
2968c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29690     00 FA 0D F2 | 	cmp	result1, #0 wz
29694     18 02 90 5D |  if_ne	jmp	#LR__4322
29698     FF 22 06 F6 | 	mov	local03, #255
2969c     FF 24 06 F6 | 	mov	local04, #255
296a0     2C 1E 06 F1 | 	add	local01, #44
296a4     FF FF FF FF 
296a8     0F FF 6B FC | 	wrlong	##-1, local01
296ac     2C 1E 86 F1 | 	sub	local01, #44
296b0                 | ' #line 2404 "ff.c"
296b0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
296b0                 | ' 
296b0                 | ' 	do {
296b0                 | LR__4310
296b0     18 1E 06 F1 | 	add	local01, #24
296b4     0F 15 02 FB | 	rdlong	arg02, local01
296b8     18 1E 86 F1 | 	sub	local01, #24
296bc     10 13 02 F6 | 	mov	arg01, local02
296c0     A8 EB BF FD | 	call	#_fatfs_cc_move_window
296c4     FD 26 0A F6 | 	mov	local05, result1 wz
296c8     E0 01 90 5D |  if_ne	jmp	#LR__4321
296cc     1C 1E 06 F1 | 	add	local01, #28
296d0     0F 17 02 FB | 	rdlong	arg03, local01
296d4     1C 1E 86 F1 | 	sub	local01, #28
296d8     0B 29 C2 FA | 	rdbyte	local06, arg03
296dc     14 17 02 F6 | 	mov	arg03, local06
296e0     07 16 4E F7 | 	zerox	arg03, #7 wz
296e4     04 26 06 A6 |  if_e	mov	local05, #4
296e8     C0 01 90 AD |  if_e	jmp	#LR__4321
296ec     1C 1E 06 F1 | 	add	local01, #28
296f0     0F 2B 02 FB | 	rdlong	local07, local01
296f4     15 17 02 F6 | 	mov	arg03, local07
296f8     0B 16 06 F1 | 	add	arg03, #11
296fc     0B 2D C2 FA | 	rdbyte	local08, arg03
29700     3F 2C 06 F5 | 	and	local08, #63
29704     16 1E 86 F1 | 	sub	local01, #22
29708     0F 2D 42 FC | 	wrbyte	local08, local01
2970c     06 1E 86 F1 | 	sub	local01, #6
29710     14 17 E2 F8 | 	getbyte	arg03, local06, #0
29714     E5 16 0E F2 | 	cmp	arg03, #229 wz
29718     18 00 90 AD |  if_e	jmp	#LR__4311
2971c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
29720     08 16 CE F7 | 	test	arg03, #8 wz
29724     16 2B 02 56 |  if_ne	mov	local07, local08
29728     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
2972c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
29730     18 00 90 AD |  if_e	jmp	#LR__4312
29734                 | LR__4311
29734     FF 24 06 F6 | 	mov	local04, #255
29738     2C 1E 06 F1 | 	add	local01, #44
2973c     FF FF FF FF 
29740     0F FF 6B FC | 	wrlong	##-1, local01
29744     2C 1E 86 F1 | 	sub	local01, #44
29748     4C 01 90 FD | 	jmp	#LR__4320
2974c                 | LR__4312
2974c     16 2D E2 F8 | 	getbyte	local08, local08, #0
29750     0F 2C 0E F2 | 	cmp	local08, #15 wz
29754     C8 00 90 5D |  if_ne	jmp	#LR__4316
29758     2B 1E 06 F1 | 	add	local01, #43
2975c     0F 2D C2 FA | 	rdbyte	local08, local01
29760     2B 1E 86 F1 | 	sub	local01, #43
29764     40 2C CE F7 | 	test	local08, #64 wz
29768     2C 01 90 5D |  if_ne	jmp	#LR__4319
2976c     14 2F E2 F8 | 	getbyte	local09, local06, #0
29770     40 2E CE F7 | 	test	local09, #64 wz
29774     30 00 90 AD |  if_e	jmp	#LR__4313
29778     1C 1E 06 F1 | 	add	local01, #28
2977c     0F 2F 02 FB | 	rdlong	local09, local01
29780     0D 2E 06 F1 | 	add	local09, #13
29784     17 23 C2 FA | 	rdbyte	local03, local09
29788     14 29 E2 F8 | 	getbyte	local06, local06, #0
2978c     BF 28 06 F5 | 	and	local06, #191
29790     14 25 02 F6 | 	mov	local04, local06
29794     0C 1E 86 F1 | 	sub	local01, #12
29798     0F 2F 02 FB | 	rdlong	local09, local01
2979c     1C 1E 06 F1 | 	add	local01, #28
297a0     0F 2F 62 FC | 	wrlong	local09, local01
297a4     2C 1E 86 F1 | 	sub	local01, #44
297a8                 | LR__4313
297a8     14 31 E2 F8 | 	getbyte	local10, local06, #0
297ac     12 2B E2 F8 | 	getbyte	local07, local04, #0
297b0     15 31 0A F2 | 	cmp	local10, local07 wz
297b4     5C 00 90 5D |  if_ne	jmp	#LR__4314
297b8     11 2D E2 F8 | 	getbyte	local08, local03, #0
297bc     1C 1E 06 F1 | 	add	local01, #28
297c0     0F 2B 02 FB | 	rdlong	local07, local01
297c4     1C 1E 86 F1 | 	sub	local01, #28
297c8     0D 2A 06 F1 | 	add	local07, #13
297cc     15 29 C2 FA | 	rdbyte	local06, local07
297d0     14 2B E2 F8 | 	getbyte	local07, local06, #0
297d4     15 2D 0A F2 | 	cmp	local08, local07 wz
297d8     38 00 90 5D |  if_ne	jmp	#LR__4314
297dc     0C 20 06 F1 | 	add	local02, #12
297e0     10 13 02 FB | 	rdlong	arg01, local02
297e4     0C 20 86 F1 | 	sub	local02, #12
297e8     1C 1E 06 F1 | 	add	local01, #28
297ec     0F 33 02 FB | 	rdlong	local11, local01
297f0     1C 1E 86 F1 | 	sub	local01, #28
297f4     19 15 02 F6 | 	mov	arg02, local11
297f8     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
297fc     00 FA 4D F2 | 	cmps	result1, #0 wz
29800     12 33 02 56 |  if_ne	mov	local11, local04
29804     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
29808     01 32 86 51 |  if_ne	sub	local11, #1
2980c     19 2F 02 56 |  if_ne	mov	local09, local11
29810     04 00 90 5D |  if_ne	jmp	#LR__4315
29814                 | LR__4314
29814     FF 2E 06 F6 | 	mov	local09, #255
29818                 | LR__4315
29818     17 25 02 F6 | 	mov	local04, local09
2981c     78 00 90 FD | 	jmp	#LR__4319
29820                 | LR__4316
29820     12 2F 02 F6 | 	mov	local09, local04
29824     07 2E 4E F7 | 	zerox	local09, #7 wz
29828     20 00 90 5D |  if_ne	jmp	#LR__4317
2982c     11 31 E2 F8 | 	getbyte	local10, local03, #0
29830     1C 1E 06 F1 | 	add	local01, #28
29834     0F 13 02 FB | 	rdlong	arg01, local01
29838     1C 1E 86 F1 | 	sub	local01, #28
2983c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29840     FD FA E1 F8 | 	getbyte	result1, result1, #0
29844     FD 30 0A F2 | 	cmp	local10, result1 wz
29848     60 00 90 AD |  if_e	jmp	#LR__4321
2984c                 | LR__4317
2984c     2B 1E 06 F1 | 	add	local01, #43
29850     0F 2F C2 FA | 	rdbyte	local09, local01
29854     2B 1E 86 F1 | 	sub	local01, #43
29858     01 2E CE F7 | 	test	local09, #1 wz
2985c     24 00 90 5D |  if_ne	jmp	#LR__4318
29860     1C 1E 06 F1 | 	add	local01, #28
29864     0F 13 02 FB | 	rdlong	arg01, local01
29868     04 1E 06 F1 | 	add	local01, #4
2986c     0F 15 02 F6 | 	mov	arg02, local01
29870     20 1E 86 F1 | 	sub	local01, #32
29874     0B 16 06 F6 | 	mov	arg03, #11
29878     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2987c     00 FA 0D F2 | 	cmp	result1, #0 wz
29880     28 00 90 AD |  if_e	jmp	#LR__4321
29884                 | LR__4318
29884     FF 24 06 F6 | 	mov	local04, #255
29888     2C 1E 06 F1 | 	add	local01, #44
2988c     FF FF FF FF 
29890     0F FF 6B FC | 	wrlong	##-1, local01
29894     2C 1E 86 F1 | 	sub	local01, #44
29898                 | LR__4319
29898                 | LR__4320
29898     0F 13 02 F6 | 	mov	arg01, local01
2989c     00 14 06 F6 | 	mov	arg02, #0
298a0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
298a4     FD 26 0A F6 | 	mov	local05, result1 wz
298a8     04 FE 9F AD |  if_e	jmp	#LR__4310
298ac                 | LR__4321
298ac                 | ' 
298ac                 | ' 	return res;
298ac     13 FB 01 F6 | 	mov	result1, local05
298b0                 | LR__4322
298b0     A7 F0 03 F6 | 	mov	ptra, fp
298b4     B2 00 A0 FD | 	call	#popregs_
298b8                 | _fatfs_cc_dir_find_ret
298b8     2D 00 64 FD | 	ret
298bc                 | 
298bc                 | _fatfs_cc_dir_register
298bc     0A 4A 05 F6 | 	mov	COUNT_, #10
298c0     A8 00 A0 FD | 	call	#pushregs_
298c4     2C F0 07 F1 | 	add	ptra, #44
298c8     04 4E 05 F1 | 	add	fp, #4
298cc     A7 12 62 FC | 	wrlong	arg01, fp
298d0     09 1F 02 FB | 	rdlong	local01, arg01
298d4     08 4E 05 F1 | 	add	fp, #8
298d8     A7 1E 62 FC | 	wrlong	local01, fp
298dc     08 4E 85 F1 | 	sub	fp, #8
298e0     A7 20 02 FB | 	rdlong	local02, fp
298e4     04 4E 85 F1 | 	sub	fp, #4
298e8     2B 20 06 F1 | 	add	local02, #43
298ec     10 21 C2 FA | 	rdbyte	local02, local02
298f0     A0 20 CE F7 | 	test	local02, #160 wz
298f4     06 FA 05 56 |  if_ne	mov	result1, #6
298f8     F8 03 90 5D |  if_ne	jmp	#LR__4345
298fc                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
298fc     14 4E 05 F1 | 	add	fp, #20
29900     A7 00 68 FC | 	wrlong	#0, fp
29904     14 4E 85 F1 | 	sub	fp, #20
29908     97 28 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
2990c                 | LR__4330
2990c     0C 4E 05 F1 | 	add	fp, #12
29910     A7 20 02 FB | 	rdlong	local02, fp
29914     0C 20 06 F1 | 	add	local02, #12
29918     10 23 02 FB | 	rdlong	local03, local02
2991c     08 4E 05 F1 | 	add	fp, #8
29920     A7 24 02 FB | 	rdlong	local04, fp
29924     14 4E 85 F1 | 	sub	fp, #20
29928     01 24 66 F0 | 	shl	local04, #1
2992c     11 25 02 F1 | 	add	local04, local03
29930     12 21 EA FA | 	rdword	local02, local04 wz
29934     24 00 90 AD |  if_e	jmp	#LR__4332
29938     14 4E 05 F1 | 	add	fp, #20
2993c     A7 26 02 FB | 	rdlong	local05, fp
29940     13 29 02 F6 | 	mov	local06, local05
29944     13 2B 02 F6 | 	mov	local07, local05
29948     15 2D 02 F6 | 	mov	local08, local07
2994c     01 2C 06 F1 | 	add	local08, #1
29950     A7 2C 62 FC | 	wrlong	local08, fp
29954     14 4E 85 F1 | 	sub	fp, #20
29958     B0 FF 9F FD | 	jmp	#LR__4330
2995c                 | LR__4331
2995c                 | LR__4332
2995c     1C 4E 05 F1 | 	add	fp, #28
29960     A7 12 02 F6 | 	mov	arg01, fp
29964     18 4E 85 F1 | 	sub	fp, #24
29968     A7 14 02 FB | 	rdlong	arg02, fp
2996c     04 4E 85 F1 | 	sub	fp, #4
29970     20 14 06 F1 | 	add	arg02, #32
29974     0C 16 06 F6 | 	mov	arg03, #12
29978     E0 6E BF FD | 	call	#__system____builtin_memmove
2997c     27 4E 05 F1 | 	add	fp, #39
29980     A7 2E C2 FA | 	rdbyte	local09, fp
29984     27 4E 85 F1 | 	sub	fp, #39
29988     01 2E CE F7 | 	test	local09, #1 wz
2998c     F4 00 90 AD |  if_e	jmp	#LR__4335
29990     04 4E 05 F1 | 	add	fp, #4
29994     A7 30 02 FB | 	rdlong	local10, fp
29998     2B 30 06 F1 | 	add	local10, #43
2999c     18 81 48 FC | 	wrbyte	#64, local10
299a0                 | ' 		dp->fn[ 11 ] =  0x40 ;
299a0                 | ' 		for (n = 1; n < 100; n++) {
299a0     0C 4E 05 F1 | 	add	fp, #12
299a4     A7 02 68 FC | 	wrlong	#1, fp
299a8     10 4E 85 F1 | 	sub	fp, #16
299ac                 | LR__4333
299ac     10 4E 05 F1 | 	add	fp, #16
299b0     A7 20 02 FB | 	rdlong	local02, fp
299b4     10 4E 85 F1 | 	sub	fp, #16
299b8     64 20 16 F2 | 	cmp	local02, #100 wc
299bc     70 00 90 3D |  if_ae	jmp	#LR__4334
299c0     04 4E 05 F1 | 	add	fp, #4
299c4     A7 12 02 FB | 	rdlong	arg01, fp
299c8     20 12 06 F1 | 	add	arg01, #32
299cc     18 4E 05 F1 | 	add	fp, #24
299d0     A7 14 02 F6 | 	mov	arg02, fp
299d4     10 4E 85 F1 | 	sub	fp, #16
299d8     A7 30 02 FB | 	rdlong	local10, fp
299dc     0C 30 06 F1 | 	add	local10, #12
299e0     18 17 02 FB | 	rdlong	arg03, local10
299e4     04 4E 05 F1 | 	add	fp, #4
299e8     A7 18 02 FB | 	rdlong	arg04, fp
299ec     10 4E 85 F1 | 	sub	fp, #16
299f0     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
299f4     04 4E 05 F1 | 	add	fp, #4
299f8     A7 12 02 FB | 	rdlong	arg01, fp
299fc     04 4E 85 F1 | 	sub	fp, #4
29a00     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29a04     08 4E 05 F1 | 	add	fp, #8
29a08     A7 FA 61 FC | 	wrlong	result1, fp
29a0c     00 FA 4D F2 | 	cmps	result1, #0 wz
29a10     08 4E 85 F1 | 	sub	fp, #8
29a14     18 00 90 5D |  if_ne	jmp	#LR__4334
29a18     10 4E 05 F1 | 	add	fp, #16
29a1c     A7 30 02 FB | 	rdlong	local10, fp
29a20     01 30 06 F1 | 	add	local10, #1
29a24     A7 30 62 FC | 	wrlong	local10, fp
29a28     10 4E 85 F1 | 	sub	fp, #16
29a2c     7C FF 9F FD | 	jmp	#LR__4333
29a30                 | LR__4334
29a30     10 4E 05 F1 | 	add	fp, #16
29a34     A7 30 02 FB | 	rdlong	local10, fp
29a38     10 4E 85 F1 | 	sub	fp, #16
29a3c     64 30 0E F2 | 	cmp	local10, #100 wz
29a40     07 FA 05 A6 |  if_e	mov	result1, #7
29a44     AC 02 90 AD |  if_e	jmp	#LR__4345
29a48     08 4E 05 F1 | 	add	fp, #8
29a4c     A7 30 02 FB | 	rdlong	local10, fp
29a50     08 4E 85 F1 | 	sub	fp, #8
29a54     04 30 0E F2 | 	cmp	local10, #4 wz
29a58     08 4E 05 51 |  if_ne	add	fp, #8
29a5c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29a60     08 4E 85 51 |  if_ne	sub	fp, #8
29a64     8C 02 90 5D |  if_ne	jmp	#LR__4345
29a68     04 4E 05 F1 | 	add	fp, #4
29a6c     A7 30 02 FB | 	rdlong	local10, fp
29a70     23 4E 05 F1 | 	add	fp, #35
29a74     A7 1E C2 FA | 	rdbyte	local01, fp
29a78     27 4E 85 F1 | 	sub	fp, #39
29a7c     2B 30 06 F1 | 	add	local10, #43
29a80     18 1F 42 FC | 	wrbyte	local01, local10
29a84                 | LR__4335
29a84     27 4E 05 F1 | 	add	fp, #39
29a88     A7 20 C2 FA | 	rdbyte	local02, fp
29a8c     27 4E 85 F1 | 	sub	fp, #39
29a90     02 20 CE F7 | 	test	local02, #2 wz
29a94     20 00 90 AD |  if_e	jmp	#LR__4336
29a98     14 4E 05 F1 | 	add	fp, #20
29a9c     A7 30 02 FB | 	rdlong	local10, fp
29aa0     0C 30 06 F1 | 	add	local10, #12
29aa4     0D 30 16 FD | 	qdiv	local10, #13
29aa8     14 4E 85 F1 | 	sub	fp, #20
29aac     18 30 62 FD | 	getqx	local10
29ab0     01 30 06 F1 | 	add	local10, #1
29ab4     04 00 90 FD | 	jmp	#LR__4337
29ab8                 | LR__4336
29ab8     01 30 06 F6 | 	mov	local10, #1
29abc                 | LR__4337
29abc     18 4E 05 F1 | 	add	fp, #24
29ac0     A7 30 62 FC | 	wrlong	local10, fp
29ac4     14 4E 85 F1 | 	sub	fp, #20
29ac8     A7 12 02 FB | 	rdlong	arg01, fp
29acc     18 15 02 F6 | 	mov	arg02, local10
29ad0     04 4E 85 F1 | 	sub	fp, #4
29ad4     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29ad8     08 4E 05 F1 | 	add	fp, #8
29adc     A7 FA 61 FC | 	wrlong	result1, fp
29ae0     08 4E 85 F1 | 	sub	fp, #8
29ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
29ae8     38 01 90 5D |  if_ne	jmp	#LR__4342
29aec     18 4E 05 F1 | 	add	fp, #24
29af0     A7 30 02 FB | 	rdlong	local10, fp
29af4     01 30 8E F1 | 	sub	local10, #1 wz
29af8     A7 30 62 FC | 	wrlong	local10, fp
29afc     18 4E 85 F1 | 	sub	fp, #24
29b00     20 01 90 AD |  if_e	jmp	#LR__4342
29b04     04 4E 05 F1 | 	add	fp, #4
29b08     A7 30 02 FB | 	rdlong	local10, fp
29b0c     18 13 02 F6 | 	mov	arg01, local10
29b10     14 4E 05 F1 | 	add	fp, #20
29b14     A7 18 02 FB | 	rdlong	arg04, fp
29b18     18 4E 85 F1 | 	sub	fp, #24
29b1c     05 18 66 F0 | 	shl	arg04, #5
29b20     10 30 06 F1 | 	add	local10, #16
29b24     18 15 02 FB | 	rdlong	arg02, local10
29b28     0C 15 82 F1 | 	sub	arg02, arg04
29b2c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29b30     08 4E 05 F1 | 	add	fp, #8
29b34     A7 FA 61 FC | 	wrlong	result1, fp
29b38     08 4E 85 F1 | 	sub	fp, #8
29b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
29b40     E0 00 90 5D |  if_ne	jmp	#LR__4341
29b44     04 4E 05 F1 | 	add	fp, #4
29b48     A7 12 02 FB | 	rdlong	arg01, fp
29b4c     04 4E 85 F1 | 	sub	fp, #4
29b50     20 12 06 F1 | 	add	arg01, #32
29b54     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29b58     FD 30 02 F6 | 	mov	local10, result1
29b5c     28 4E 05 F1 | 	add	fp, #40
29b60     A7 30 42 FC | 	wrbyte	local10, fp
29b64     28 4E 85 F1 | 	sub	fp, #40
29b68                 | ' 			sum = sum_sfn(dp->fn);
29b68                 | ' 			do {
29b68                 | LR__4338
29b68     0C 4E 05 F1 | 	add	fp, #12
29b6c     A7 12 02 FB | 	rdlong	arg01, fp
29b70     08 4E 85 F1 | 	sub	fp, #8
29b74     A7 1E 02 FB | 	rdlong	local01, fp
29b78     04 4E 85 F1 | 	sub	fp, #4
29b7c     18 1E 06 F1 | 	add	local01, #24
29b80     0F 15 02 FB | 	rdlong	arg02, local01
29b84     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29b88     08 4E 05 F1 | 	add	fp, #8
29b8c     A7 FA 61 FC | 	wrlong	result1, fp
29b90     00 FA 4D F2 | 	cmps	result1, #0 wz
29b94     08 4E 85 F1 | 	sub	fp, #8
29b98     88 00 90 5D |  if_ne	jmp	#LR__4340
29b9c     0C 4E 05 F1 | 	add	fp, #12
29ba0     A7 20 02 FB | 	rdlong	local02, fp
29ba4     0C 20 06 F1 | 	add	local02, #12
29ba8     10 13 02 FB | 	rdlong	arg01, local02
29bac     08 4E 85 F1 | 	sub	fp, #8
29bb0     A7 1E 02 FB | 	rdlong	local01, fp
29bb4     1C 1E 06 F1 | 	add	local01, #28
29bb8     0F 15 02 FB | 	rdlong	arg02, local01
29bbc     14 4E 05 F1 | 	add	fp, #20
29bc0     A7 16 02 FB | 	rdlong	arg03, fp
29bc4     10 4E 05 F1 | 	add	fp, #16
29bc8     A7 18 C2 FA | 	rdbyte	arg04, fp
29bcc     28 4E 85 F1 | 	sub	fp, #40
29bd0     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29bd4     0C 4E 05 F1 | 	add	fp, #12
29bd8     A7 30 02 FB | 	rdlong	local10, fp
29bdc     03 30 06 F1 | 	add	local10, #3
29be0     18 03 48 FC | 	wrbyte	#1, local10
29be4     08 4E 85 F1 | 	sub	fp, #8
29be8     A7 12 02 FB | 	rdlong	arg01, fp
29bec     04 4E 85 F1 | 	sub	fp, #4
29bf0     00 14 06 F6 | 	mov	arg02, #0
29bf4     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29bf8     08 4E 05 F1 | 	add	fp, #8
29bfc     A7 FA 61 FC | 	wrlong	result1, fp
29c00     00 FA 4D F2 | 	cmps	result1, #0 wz
29c04     08 4E 85 F1 | 	sub	fp, #8
29c08     18 00 90 5D |  if_ne	jmp	#LR__4339
29c0c     18 4E 05 F1 | 	add	fp, #24
29c10     A7 30 02 FB | 	rdlong	local10, fp
29c14     01 30 8E F1 | 	sub	local10, #1 wz
29c18     A7 30 62 FC | 	wrlong	local10, fp
29c1c     18 4E 85 F1 | 	sub	fp, #24
29c20     44 FF 9F 5D |  if_ne	jmp	#LR__4338
29c24                 | LR__4339
29c24                 | LR__4340
29c24                 | LR__4341
29c24                 | LR__4342
29c24     08 4E 05 F1 | 	add	fp, #8
29c28     A7 30 0A FB | 	rdlong	local10, fp wz
29c2c     08 4E 85 F1 | 	sub	fp, #8
29c30     B4 00 90 5D |  if_ne	jmp	#LR__4344
29c34     0C 4E 05 F1 | 	add	fp, #12
29c38     A7 12 02 FB | 	rdlong	arg01, fp
29c3c     08 4E 85 F1 | 	sub	fp, #8
29c40     A7 1E 02 FB | 	rdlong	local01, fp
29c44     04 4E 85 F1 | 	sub	fp, #4
29c48     18 1E 06 F1 | 	add	local01, #24
29c4c     0F 15 02 FB | 	rdlong	arg02, local01
29c50     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29c54     08 4E 05 F1 | 	add	fp, #8
29c58     A7 FA 61 FC | 	wrlong	result1, fp
29c5c     08 4E 85 F1 | 	sub	fp, #8
29c60     00 FA 0D F2 | 	cmp	result1, #0 wz
29c64     80 00 90 5D |  if_ne	jmp	#LR__4343
29c68     04 4E 05 F1 | 	add	fp, #4
29c6c     A7 20 02 FB | 	rdlong	local02, fp
29c70     04 4E 85 F1 | 	sub	fp, #4
29c74     1C 20 06 F1 | 	add	local02, #28
29c78     10 13 02 FB | 	rdlong	arg01, local02
29c7c     00 14 06 F6 | 	mov	arg02, #0
29c80     20 16 06 F6 | 	mov	arg03, #32
29c84     98 00 A0 FD | 	call	#\builtin_bytefill_
29c88     04 4E 05 F1 | 	add	fp, #4
29c8c     A7 14 02 FB | 	rdlong	arg02, fp
29c90     0A 1F 02 F6 | 	mov	local01, arg02
29c94     1C 1E 06 F1 | 	add	local01, #28
29c98     0F 13 02 FB | 	rdlong	arg01, local01
29c9c     04 4E 85 F1 | 	sub	fp, #4
29ca0     20 14 06 F1 | 	add	arg02, #32
29ca4     0B 16 06 F6 | 	mov	arg03, #11
29ca8     B0 6B BF FD | 	call	#__system____builtin_memmove
29cac     04 4E 05 F1 | 	add	fp, #4
29cb0     A7 2E 02 FB | 	rdlong	local09, fp
29cb4     17 31 02 F6 | 	mov	local10, local09
29cb8     1C 30 06 F1 | 	add	local10, #28
29cbc     18 1F 02 FB | 	rdlong	local01, local10
29cc0     2B 2E 06 F1 | 	add	local09, #43
29cc4     17 31 C2 FA | 	rdbyte	local10, local09
29cc8     18 30 06 F5 | 	and	local10, #24
29ccc     0C 1E 06 F1 | 	add	local01, #12
29cd0     0F 31 42 FC | 	wrbyte	local10, local01
29cd4     08 4E 05 F1 | 	add	fp, #8
29cd8     A7 30 02 FB | 	rdlong	local10, fp
29cdc     0C 4E 85 F1 | 	sub	fp, #12
29ce0     03 30 06 F1 | 	add	local10, #3
29ce4     18 03 48 FC | 	wrbyte	#1, local10
29ce8                 | LR__4343
29ce8                 | LR__4344
29ce8                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29ce8                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29ce8                 | ' 
29ce8                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29ce8                 | ' 
29ce8                 | ' 			fs->wflag = 1;
29ce8                 | ' 		}
29ce8                 | ' 	}
29ce8                 | ' 
29ce8                 | ' 	return res;
29ce8     08 4E 05 F1 | 	add	fp, #8
29cec     A7 FA 01 FB | 	rdlong	result1, fp
29cf0     08 4E 85 F1 | 	sub	fp, #8
29cf4                 | LR__4345
29cf4     A7 F0 03 F6 | 	mov	ptra, fp
29cf8     B2 00 A0 FD | 	call	#popregs_
29cfc                 | _fatfs_cc_dir_register_ret
29cfc     2D 00 64 FD | 	ret
29d00                 | 
29d00                 | _fatfs_cc_dir_remove
29d00     05 4A 05 F6 | 	mov	COUNT_, #5
29d04     A8 00 A0 FD | 	call	#pushregs_
29d08     09 1F 02 F6 | 	mov	local01, arg01
29d0c     0F 21 02 FB | 	rdlong	local02, local01
29d10     10 1E 06 F1 | 	add	local01, #16
29d14     0F 23 02 FB | 	rdlong	local03, local01
29d18     1C 1E 06 F1 | 	add	local01, #28
29d1c     0F 15 02 FB | 	rdlong	arg02, local01
29d20     2C 1E 86 F1 | 	sub	local01, #44
29d24     FF FF 7F FF 
29d28     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29d2c     00 24 06 A6 |  if_e	mov	local04, #0
29d30     18 00 90 AD |  if_e	jmp	#LR__4350
29d34     0F 13 02 F6 | 	mov	arg01, local01
29d38     2C 1E 06 F1 | 	add	local01, #44
29d3c     0F 15 02 FB | 	rdlong	arg02, local01
29d40     2C 1E 86 F1 | 	sub	local01, #44
29d44     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29d48     FD 24 02 F6 | 	mov	local04, result1
29d4c                 | LR__4350
29d4c     12 27 0A F6 | 	mov	local05, local04 wz
29d50     64 00 90 5D |  if_ne	jmp	#LR__4353
29d54                 | ' 		do {
29d54                 | LR__4351
29d54     18 1E 06 F1 | 	add	local01, #24
29d58     0F 15 02 FB | 	rdlong	arg02, local01
29d5c     18 1E 86 F1 | 	sub	local01, #24
29d60     10 13 02 F6 | 	mov	arg01, local02
29d64     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29d68     FD 26 0A F6 | 	mov	local05, result1 wz
29d6c     40 00 90 5D |  if_ne	jmp	#LR__4352
29d70     1C 1E 06 F1 | 	add	local01, #28
29d74     0F 25 02 FB | 	rdlong	local04, local01
29d78     12 CB 49 FC | 	wrbyte	#229, local04
29d7c     03 20 06 F1 | 	add	local02, #3
29d80     10 03 48 FC | 	wrbyte	#1, local02
29d84     03 20 86 F1 | 	sub	local02, #3
29d88     0C 1E 86 F1 | 	sub	local01, #12
29d8c     0F 25 02 FB | 	rdlong	local04, local01
29d90     10 1E 86 F1 | 	sub	local01, #16
29d94     11 25 12 F2 | 	cmp	local04, local03 wc
29d98     14 00 90 3D |  if_ae	jmp	#LR__4352
29d9c     0F 13 02 F6 | 	mov	arg01, local01
29da0     00 14 06 F6 | 	mov	arg02, #0
29da4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29da8     FD 26 0A F6 | 	mov	local05, result1 wz
29dac     A4 FF 9F AD |  if_e	jmp	#LR__4351
29db0                 | LR__4352
29db0     04 26 0E F2 | 	cmp	local05, #4 wz
29db4     02 26 06 A6 |  if_e	mov	local05, #2
29db8                 | LR__4353
29db8                 | ' 	}
29db8                 | ' #line 2590 "ff.c"
29db8                 | ' 	return res;
29db8     13 FB 01 F6 | 	mov	result1, local05
29dbc     A7 F0 03 F6 | 	mov	ptra, fp
29dc0     B2 00 A0 FD | 	call	#popregs_
29dc4                 | _fatfs_cc_dir_remove_ret
29dc4     2D 00 64 FD | 	ret
29dc8                 | 
29dc8                 | _fatfs_cc_get_fileinfo
29dc8     0F 4A 05 F6 | 	mov	COUNT_, #15
29dcc     A8 00 A0 FD | 	call	#pushregs_
29dd0     09 1F 02 F6 | 	mov	local01, arg01
29dd4     0A 21 02 F6 | 	mov	local02, arg02
29dd8     0F 23 02 FB | 	rdlong	local03, local01
29ddc     1C 20 06 F1 | 	add	local02, #28
29de0     10 01 48 FC | 	wrbyte	#0, local02
29de4     1C 20 86 F1 | 	sub	local02, #28
29de8     18 1E 06 F1 | 	add	local01, #24
29dec     0F 25 0A FB | 	rdlong	local04, local01 wz
29df0     18 1E 86 F1 | 	sub	local01, #24
29df4     90 03 90 AD |  if_e	jmp	#LR__4374
29df8     2C 1E 06 F1 | 	add	local01, #44
29dfc     0F 25 02 FB | 	rdlong	local04, local01
29e00     2C 1E 86 F1 | 	sub	local01, #44
29e04     FF FF 7F FF 
29e08     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29e0c     D8 00 90 AD |  if_e	jmp	#LR__4363
29e10     00 26 06 F6 | 	mov	local05, #0
29e14     00 28 06 F6 | 	mov	local06, #0
29e18     00 2A 06 F6 | 	mov	local07, #0
29e1c                 | ' 			si = di = 0;
29e1c                 | ' 			hs = 0;
29e1c                 | ' 			while (fs->lfnbuf[si] != 0) {
29e1c                 | LR__4360
29e1c     0C 22 06 F1 | 	add	local03, #12
29e20     11 25 02 FB | 	rdlong	local04, local03
29e24     0C 22 86 F1 | 	sub	local03, #12
29e28     14 2D 02 F6 | 	mov	local08, local06
29e2c     01 2C 66 F0 | 	shl	local08, #1
29e30     12 2D 02 F1 | 	add	local08, local04
29e34     16 25 EA FA | 	rdword	local04, local08 wz
29e38     90 00 90 AD |  if_e	jmp	#LR__4362
29e3c     0C 22 06 F1 | 	add	local03, #12
29e40     11 2F 02 FB | 	rdlong	local09, local03
29e44     0C 22 86 F1 | 	sub	local03, #12
29e48     14 31 02 F6 | 	mov	local10, local06
29e4c     01 30 66 F0 | 	shl	local10, #1
29e50     17 31 02 F1 | 	add	local10, local09
29e54     18 33 E2 FA | 	rdword	local11, local10
29e58     15 25 02 F6 | 	mov	local04, local07
29e5c     0F 24 4E F7 | 	zerox	local04, #15 wz
29e60     01 28 06 F1 | 	add	local06, #1
29e64     24 00 90 5D |  if_ne	jmp	#LR__4361
29e68     19 35 32 F9 | 	getword	local12, local11, #0
29e6c     6C 00 00 FF 
29e70     00 34 16 F2 | 	cmp	local12, ##55296 wc
29e74     14 00 90 CD |  if_b	jmp	#LR__4361
29e78     19 37 32 F9 | 	getword	local13, local11, #0
29e7c     70 00 00 FF 
29e80     00 36 16 F2 | 	cmp	local13, ##57344 wc
29e84     19 2B 02 C6 |  if_b	mov	local07, local11
29e88                 | ' 					hs = wc; continue;
29e88     90 FF 9F CD |  if_b	jmp	#LR__4360
29e8c                 | LR__4361
29e8c     15 13 32 F9 | 	getword	arg01, local07, #0
29e90     10 12 66 F0 | 	shl	arg01, #16
29e94     19 33 32 F9 | 	getword	local11, local11, #0
29e98     19 13 42 F5 | 	or	arg01, local11
29e9c     13 15 02 F6 | 	mov	arg02, local05
29ea0     1C 20 06 F1 | 	add	local02, #28
29ea4     10 15 02 F1 | 	add	arg02, local02
29ea8     FF 16 06 F6 | 	mov	arg03, #255
29eac     13 17 82 F1 | 	sub	arg03, local05
29eb0     1C 20 86 F1 | 	sub	local02, #28
29eb4     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29eb8     FD 38 0A F6 | 	mov	local14, result1 wz
29ebc     00 26 06 A6 |  if_e	mov	local05, #0
29ec0     1C 27 02 51 |  if_ne	add	local05, local14
29ec4     00 2A 06 56 |  if_ne	mov	local07, #0
29ec8     50 FF 9F 5D |  if_ne	jmp	#LR__4360
29ecc                 | LR__4362
29ecc     15 25 02 F6 | 	mov	local04, local07
29ed0     0F 24 4E F7 | 	zerox	local04, #15 wz
29ed4     00 26 06 56 |  if_ne	mov	local05, #0
29ed8     1C 20 06 F1 | 	add	local02, #28
29edc     10 27 02 F1 | 	add	local05, local02
29ee0     13 01 48 FC | 	wrbyte	#0, local05
29ee4     1C 20 86 F1 | 	sub	local02, #28
29ee8                 | LR__4363
29ee8     00 26 06 F6 | 	mov	local05, #0
29eec     00 28 06 F6 | 	mov	local06, #0
29ef0                 | ' 			fno->fname[di] = 0;
29ef0                 | ' 		}
29ef0                 | ' 	}
29ef0                 | ' 
29ef0                 | ' 	si = di = 0;
29ef0                 | ' 	while (si < 11) {
29ef0                 | LR__4364
29ef0     0B 28 16 F2 | 	cmp	local06, #11 wc
29ef4     20 01 90 3D |  if_ae	jmp	#LR__4367
29ef8     1C 1E 06 F1 | 	add	local01, #28
29efc     0F 2F 02 FB | 	rdlong	local09, local01
29f00     1C 1E 86 F1 | 	sub	local01, #28
29f04     14 31 02 F6 | 	mov	local10, local06
29f08     17 31 02 F1 | 	add	local10, local09
29f0c     18 33 C2 FA | 	rdbyte	local11, local10
29f10     19 25 32 F9 | 	getword	local04, local11, #0
29f14     20 24 0E F2 | 	cmp	local04, #32 wz
29f18     01 28 06 F1 | 	add	local06, #1
29f1c     D0 FF 9F AD |  if_e	jmp	#LR__4364
29f20     19 25 32 F9 | 	getword	local04, local11, #0
29f24     05 24 0E F2 | 	cmp	local04, #5 wz
29f28     E5 32 06 A6 |  if_e	mov	local11, #229
29f2c     09 28 0E F2 | 	cmp	local06, #9 wz
29f30     20 00 90 5D |  if_ne	jmp	#LR__4365
29f34     0C 26 16 F2 | 	cmp	local05, #12 wc
29f38     18 00 90 3D |  if_ae	jmp	#LR__4365
29f3c     13 37 02 F6 | 	mov	local13, local05
29f40     0C 20 06 F1 | 	add	local02, #12
29f44     10 37 02 F1 | 	add	local13, local02
29f48     1B 5D 48 FC | 	wrbyte	#46, local13
29f4c     01 26 06 F1 | 	add	local05, #1
29f50     0C 20 86 F1 | 	sub	local02, #12
29f54                 | LR__4365
29f54     19 13 32 F9 | 	getword	arg01, local11, #0
29f58     07 12 4E F7 | 	zerox	arg01, #7 wz
29f5c     00 FA 05 56 |  if_ne	mov	result1, #0
29f60                 | ' 
29f60                 | ' 	return 0;
29f60     00 FA 05 A6 |  if_e	mov	result1, #0
29f64     00 FA 0D F2 | 	cmp	result1, #0 wz
29f68     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
29f6c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
29f70     50 00 90 AD |  if_e	jmp	#LR__4366
29f74     1C 1E 06 F1 | 	add	local01, #28
29f78     0F 31 02 FB | 	rdlong	local10, local01
29f7c     1C 1E 86 F1 | 	sub	local01, #28
29f80     14 2D 02 F6 | 	mov	local08, local06
29f84     18 2D 02 F1 | 	add	local08, local10
29f88     16 13 CA FA | 	rdbyte	arg01, local08 wz
29f8c     00 FA 05 56 |  if_ne	mov	result1, #0
29f90                 | ' 
29f90                 | ' 	return 0;
29f90     00 FA 05 A6 |  if_e	mov	result1, #0
29f94     00 FA 0D F2 | 	cmp	result1, #0 wz
29f98     28 00 90 AD |  if_e	jmp	#LR__4366
29f9c     19 33 32 F9 | 	getword	local11, local11, #0
29fa0     08 32 66 F0 | 	shl	local11, #8
29fa4     1C 1E 06 F1 | 	add	local01, #28
29fa8     0F 39 02 FB | 	rdlong	local14, local01
29fac     1C 1E 86 F1 | 	sub	local01, #28
29fb0     14 2F 02 F6 | 	mov	local09, local06
29fb4     1C 2F 02 F1 | 	add	local09, local14
29fb8     17 35 C2 FA | 	rdbyte	local12, local09
29fbc     1A 33 42 F5 | 	or	local11, local12
29fc0     01 28 06 F1 | 	add	local06, #1
29fc4                 | LR__4366
29fc4     19 13 02 F6 | 	mov	arg01, local11
29fc8     01 00 00 FF 
29fcc     52 15 06 F6 | 	mov	arg02, ##850
29fd0     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
29fd4     FD 32 02 F6 | 	mov	local11, result1
29fd8     19 25 02 F6 | 	mov	local04, local11
29fdc     0F 24 4E F7 | 	zerox	local04, #15 wz
29fe0     00 26 06 A6 |  if_e	mov	local05, #0
29fe4     30 00 90 AD |  if_e	jmp	#LR__4367
29fe8     19 13 32 F9 | 	getword	arg01, local11, #0
29fec     13 15 02 F6 | 	mov	arg02, local05
29ff0     0C 20 06 F1 | 	add	local02, #12
29ff4     10 15 02 F1 | 	add	arg02, local02
29ff8     0C 16 06 F6 | 	mov	arg03, #12
29ffc     13 17 82 F1 | 	sub	arg03, local05
2a000     0C 20 86 F1 | 	sub	local02, #12
2a004     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2a008     FD 38 0A F6 | 	mov	local14, result1 wz
2a00c     00 26 06 A6 |  if_e	mov	local05, #0
2a010     1C 27 02 51 |  if_ne	add	local05, local14
2a014     D8 FE 9F 5D |  if_ne	jmp	#LR__4364
2a018                 | LR__4367
2a018     13 25 02 F6 | 	mov	local04, local05
2a01c     0C 20 06 F1 | 	add	local02, #12
2a020     10 25 02 F1 | 	add	local04, local02
2a024     12 01 48 FC | 	wrbyte	#0, local04
2a028     10 20 06 F1 | 	add	local02, #16
2a02c     10 25 CA FA | 	rdbyte	local04, local02 wz
2a030     1C 20 86 F1 | 	sub	local02, #28
2a034     F8 00 90 5D |  if_ne	jmp	#LR__4373
2a038     00 26 0E F2 | 	cmp	local05, #0 wz
2a03c     1C 00 90 5D |  if_ne	jmp	#LR__4368
2a040     13 37 02 F6 | 	mov	local13, local05
2a044     1C 20 06 F1 | 	add	local02, #28
2a048     10 37 02 F1 | 	add	local13, local02
2a04c     1B 7F 48 FC | 	wrbyte	#63, local13
2a050     01 26 06 F1 | 	add	local05, #1
2a054     1C 20 86 F1 | 	sub	local02, #28
2a058     A4 00 90 FD | 	jmp	#LR__4372
2a05c                 | LR__4368
2a05c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a05c     00 26 06 F6 | 	mov	local05, #0
2a060     00 28 06 F6 | 	mov	local06, #0
2a064     08 3A 06 F6 | 	mov	local15, #8
2a068                 | LR__4369
2a068     14 25 02 F6 | 	mov	local04, local06
2a06c     0C 20 06 F1 | 	add	local02, #12
2a070     10 25 02 F1 | 	add	local04, local02
2a074     12 37 CA FA | 	rdbyte	local13, local04 wz
2a078     0C 20 86 F1 | 	sub	local02, #12
2a07c     80 00 90 AD |  if_e	jmp	#LR__4371
2a080     14 2D 02 F6 | 	mov	local08, local06
2a084     0C 20 06 F1 | 	add	local02, #12
2a088     10 2D 02 F1 | 	add	local08, local02
2a08c     16 33 C2 FA | 	rdbyte	local11, local08
2a090     19 39 32 F9 | 	getword	local14, local11, #0
2a094     2E 38 0E F2 | 	cmp	local14, #46 wz
2a098     0C 20 86 F1 | 	sub	local02, #12
2a09c     10 3A 06 A6 |  if_e	mov	local15, #16
2a0a0     19 39 32 F9 | 	getword	local14, local11, #0
2a0a4     41 38 16 F2 | 	cmp	local14, #65 wc
2a0a8     30 00 90 CD |  if_b	jmp	#LR__4370
2a0ac     19 2D 32 F9 | 	getword	local08, local11, #0
2a0b0     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a0b4     24 00 90 3D |  if_ae	jmp	#LR__4370
2a0b8     1C 1E 06 F1 | 	add	local01, #28
2a0bc     0F 2F 02 FB | 	rdlong	local09, local01
2a0c0     1C 1E 86 F1 | 	sub	local01, #28
2a0c4     0C 2E 06 F1 | 	add	local09, #12
2a0c8     17 31 C2 FA | 	rdbyte	local10, local09
2a0cc     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a0d0     1C 31 CA F7 | 	test	local10, local14 wz
2a0d4     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a0d8     20 32 06 51 |  if_ne	add	local11, #32
2a0dc                 | LR__4370
2a0dc     13 39 02 F6 | 	mov	local14, local05
2a0e0     1C 20 06 F1 | 	add	local02, #28
2a0e4     10 39 02 F1 | 	add	local14, local02
2a0e8     19 33 32 F9 | 	getword	local11, local11, #0
2a0ec     1C 33 42 FC | 	wrbyte	local11, local14
2a0f0     01 28 06 F1 | 	add	local06, #1
2a0f4     01 26 06 F1 | 	add	local05, #1
2a0f8     1C 20 86 F1 | 	sub	local02, #28
2a0fc     68 FF 9F FD | 	jmp	#LR__4369
2a100                 | LR__4371
2a100                 | LR__4372
2a100     1C 20 06 F1 | 	add	local02, #28
2a104     10 27 02 F1 | 	add	local05, local02
2a108     13 01 48 FC | 	wrbyte	#0, local05
2a10c     1C 1E 06 F1 | 	add	local01, #28
2a110     0F 25 02 FB | 	rdlong	local04, local01
2a114     1C 1E 86 F1 | 	sub	local01, #28
2a118     0C 24 06 F1 | 	add	local04, #12
2a11c     12 37 CA FA | 	rdbyte	local13, local04 wz
2a120     1C 20 86 F1 | 	sub	local02, #28
2a124     0C 20 06 A1 |  if_e	add	local02, #12
2a128     10 01 48 AC |  if_e	wrbyte	#0, local02
2a12c     0C 20 86 A1 |  if_e	sub	local02, #12
2a130                 | LR__4373
2a130     1C 1E 06 F1 | 	add	local01, #28
2a134     0F 35 02 FB | 	rdlong	local12, local01
2a138     0B 34 06 F1 | 	add	local12, #11
2a13c     1A 25 C2 FA | 	rdbyte	local04, local12
2a140     3F 24 06 F5 | 	and	local04, #63
2a144     08 20 06 F1 | 	add	local02, #8
2a148     10 25 42 FC | 	wrbyte	local04, local02
2a14c     08 20 86 F1 | 	sub	local02, #8
2a150     0F 13 02 FB | 	rdlong	arg01, local01
2a154     1C 12 06 F1 | 	add	arg01, #28
2a158                 | ' {
2a158                 | ' 
2a158                 | ' 	return *((DWORD*)ptr);
2a158     09 FB 01 FB | 	rdlong	result1, arg01
2a15c     10 FB 61 FC | 	wrlong	result1, local02
2a160     0F 13 02 FB | 	rdlong	arg01, local01
2a164     16 12 06 F1 | 	add	arg01, #22
2a168                 | ' {
2a168                 | ' 
2a168                 | ' 	return *((WORD*)ptr);
2a168     09 FB E1 FA | 	rdword	result1, arg01
2a16c     06 20 06 F1 | 	add	local02, #6
2a170     10 FB 51 FC | 	wrword	result1, local02
2a174     0F 13 02 FB | 	rdlong	arg01, local01
2a178     18 12 06 F1 | 	add	arg01, #24
2a17c                 | ' {
2a17c                 | ' 
2a17c                 | ' 	return *((WORD*)ptr);
2a17c     09 FB E1 FA | 	rdword	result1, arg01
2a180     02 20 86 F1 | 	sub	local02, #2
2a184     10 FB 51 FC | 	wrword	result1, local02
2a188                 | LR__4374
2a188     A7 F0 03 F6 | 	mov	ptra, fp
2a18c     B2 00 A0 FD | 	call	#popregs_
2a190                 | _fatfs_cc_get_fileinfo_ret
2a190     2D 00 64 FD | 	ret
2a194                 | 
2a194                 | _fatfs_cc_create_name
2a194     0D 4A 05 F6 | 	mov	COUNT_, #13
2a198     A8 00 A0 FD | 	call	#pushregs_
2a19c     34 F0 07 F1 | 	add	ptra, #52
2a1a0     04 4E 05 F1 | 	add	fp, #4
2a1a4     A7 12 62 FC | 	wrlong	arg01, fp
2a1a8     04 4E 05 F1 | 	add	fp, #4
2a1ac     A7 14 62 FC | 	wrlong	arg02, fp
2a1b0     0A FB 01 FB | 	rdlong	result1, arg02
2a1b4     28 4E 05 F1 | 	add	fp, #40
2a1b8     A7 FA 61 FC | 	wrlong	result1, fp
2a1bc     2C 4E 85 F1 | 	sub	fp, #44
2a1c0     A7 FA 01 FB | 	rdlong	result1, fp
2a1c4     FD 1E 02 FB | 	rdlong	local01, result1
2a1c8     0C 1E 06 F1 | 	add	local01, #12
2a1cc     0F 21 02 FB | 	rdlong	local02, local01
2a1d0     14 4E 05 F1 | 	add	fp, #20
2a1d4     A7 20 62 FC | 	wrlong	local02, fp
2a1d8     14 4E 05 F1 | 	add	fp, #20
2a1dc     A7 00 68 FC | 	wrlong	#0, fp
2a1e0     2C 4E 85 F1 | 	sub	fp, #44
2a1e4                 | ' 
2a1e4                 | ' 
2a1e4                 | ' 
2a1e4                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a1e4                 | ' 	for (;;) {
2a1e4                 | LR__4380
2a1e4     30 4E 05 F1 | 	add	fp, #48
2a1e8     A7 12 02 F6 | 	mov	arg01, fp
2a1ec     30 4E 85 F1 | 	sub	fp, #48
2a1f0     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a1f4     1C 4E 05 F1 | 	add	fp, #28
2a1f8     A7 FA 61 FC | 	wrlong	result1, fp
2a1fc     1C 4E 85 F1 | 	sub	fp, #28
2a200     FF FF 7F FF 
2a204     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a208     06 FA 05 A6 |  if_e	mov	result1, #6
2a20c     74 08 90 AD |  if_e	jmp	#LR__4420
2a210     1C 4E 05 F1 | 	add	fp, #28
2a214     A7 1E 02 FB | 	rdlong	local01, fp
2a218     1C 4E 85 F1 | 	sub	fp, #28
2a21c     80 00 00 FF 
2a220     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a224     3C 00 90 CD |  if_b	jmp	#LR__4381
2a228     18 4E 05 F1 | 	add	fp, #24
2a22c     A7 22 02 FB | 	rdlong	local03, fp
2a230     14 4E 05 F1 | 	add	fp, #20
2a234     A7 1E 02 FB | 	rdlong	local01, fp
2a238     0F 25 02 F6 | 	mov	local04, local01
2a23c     01 24 06 F1 | 	add	local04, #1
2a240     A7 24 62 FC | 	wrlong	local04, fp
2a244     01 1E 66 F0 | 	shl	local01, #1
2a248     11 1F 02 F1 | 	add	local01, local03
2a24c     10 4E 85 F1 | 	sub	fp, #16
2a250     A7 26 02 FB | 	rdlong	local05, fp
2a254     1C 4E 85 F1 | 	sub	fp, #28
2a258     13 29 02 F6 | 	mov	local06, local05
2a25c     10 28 46 F0 | 	shr	local06, #16
2a260     0F 29 52 FC | 	wrword	local06, local01
2a264                 | LR__4381
2a264     1C 4E 05 F1 | 	add	fp, #28
2a268     A7 1E 02 FB | 	rdlong	local01, fp
2a26c     08 4E 85 F1 | 	sub	fp, #8
2a270     A7 1E 52 FC | 	wrword	local01, fp
2a274     A7 1E E2 FA | 	rdword	local01, fp
2a278     14 4E 85 F1 | 	sub	fp, #20
2a27c     20 1E 16 F2 | 	cmp	local01, #32 wc
2a280     B0 00 90 CD |  if_b	jmp	#LR__4383
2a284     14 4E 05 F1 | 	add	fp, #20
2a288     A7 1E E2 FA | 	rdword	local01, fp
2a28c     14 4E 85 F1 | 	sub	fp, #20
2a290     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a294     14 4E 05 51 |  if_ne	add	fp, #20
2a298     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a29c     14 4E 85 51 |  if_ne	sub	fp, #20
2a2a0     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a2a4     8C 00 90 AD |  if_e	jmp	#LR__4383
2a2a8     14 4E 05 F1 | 	add	fp, #20
2a2ac     A7 12 E2 FA | 	rdword	arg01, fp
2a2b0     14 4E 85 F1 | 	sub	fp, #20
2a2b4     80 12 16 F2 | 	cmp	arg01, #128 wc
2a2b8     24 00 90 3D |  if_ae	jmp	#LR__4382
2a2bc     80 01 00 FF 
2a2c0     F8 13 06 F6 | 	mov	arg01, ##@LR__5042
2a2c4     14 4E 05 F1 | 	add	fp, #20
2a2c8     A7 14 E2 FA | 	rdword	arg02, fp
2a2cc     14 4E 85 F1 | 	sub	fp, #20
2a2d0     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a2d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2d8     06 FA 05 56 |  if_ne	mov	result1, #6
2a2dc     A4 07 90 5D |  if_ne	jmp	#LR__4420
2a2e0                 | LR__4382
2a2e0     2C 4E 05 F1 | 	add	fp, #44
2a2e4     A7 28 02 FB | 	rdlong	local06, fp
2a2e8     2C 4E 85 F1 | 	sub	fp, #44
2a2ec     FF 28 16 F2 | 	cmp	local06, #255 wc
2a2f0     06 FA 05 36 |  if_ae	mov	result1, #6
2a2f4     8C 07 90 3D |  if_ae	jmp	#LR__4420
2a2f8     18 4E 05 F1 | 	add	fp, #24
2a2fc     A7 22 02 FB | 	rdlong	local03, fp
2a300     14 4E 05 F1 | 	add	fp, #20
2a304     A7 20 02 FB | 	rdlong	local02, fp
2a308     10 25 02 F6 | 	mov	local04, local02
2a30c     01 24 06 F1 | 	add	local04, #1
2a310     A7 24 62 FC | 	wrlong	local04, fp
2a314     10 1F 02 F6 | 	mov	local01, local02
2a318     01 1E 66 F0 | 	shl	local01, #1
2a31c     11 1F 02 F1 | 	add	local01, local03
2a320     18 4E 85 F1 | 	sub	fp, #24
2a324     A7 28 E2 FA | 	rdword	local06, fp
2a328     14 4E 85 F1 | 	sub	fp, #20
2a32c     0F 29 52 FC | 	wrword	local06, local01
2a330     B0 FE 9F FD | 	jmp	#LR__4380
2a334                 | LR__4383
2a334     14 4E 05 F1 | 	add	fp, #20
2a338     A7 2A E2 FA | 	rdword	local07, fp
2a33c     14 4E 85 F1 | 	sub	fp, #20
2a340     20 2A 16 F2 | 	cmp	local07, #32 wc
2a344     10 4E 05 C1 |  if_b	add	fp, #16
2a348     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a34c     10 4E 85 C1 |  if_b	sub	fp, #16
2a350     74 00 90 CD |  if_b	jmp	#LR__4388
2a354     97 24 48 FB | 	callpa	#(@LR__4386-@LR__4384)>>2,fcache_load_ptr_
2a358                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a358                 | LR__4384
2a358     30 4E 05 F1 | 	add	fp, #48
2a35c     A7 24 02 FB | 	rdlong	local04, fp
2a360     30 4E 85 F1 | 	sub	fp, #48
2a364     12 2B C2 FA | 	rdbyte	local07, local04
2a368     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a36c     18 00 90 AD |  if_e	jmp	#LR__4385
2a370     30 4E 05 F1 | 	add	fp, #48
2a374     A7 24 02 FB | 	rdlong	local04, fp
2a378     30 4E 85 F1 | 	sub	fp, #48
2a37c     12 21 C2 FA | 	rdbyte	local02, local04
2a380     5C 20 0E F2 | 	cmp	local02, #92 wz
2a384     18 00 90 5D |  if_ne	jmp	#LR__4387
2a388                 | LR__4385
2a388     30 4E 05 F1 | 	add	fp, #48
2a38c     A7 1E 02 FB | 	rdlong	local01, fp
2a390     01 1E 06 F1 | 	add	local01, #1
2a394     A7 1E 62 FC | 	wrlong	local01, fp
2a398     30 4E 85 F1 | 	sub	fp, #48
2a39c     B8 FF 9F FD | 	jmp	#LR__4384
2a3a0                 | LR__4386
2a3a0                 | LR__4387
2a3a0     10 4E 05 F1 | 	add	fp, #16
2a3a4     A7 00 48 FC | 	wrbyte	#0, fp
2a3a8     20 4E 05 F1 | 	add	fp, #32
2a3ac     A7 28 02 FB | 	rdlong	local06, fp
2a3b0     30 4E 85 F1 | 	sub	fp, #48
2a3b4     14 2B C2 FA | 	rdbyte	local07, local06
2a3b8     20 2A 16 F2 | 	cmp	local07, #32 wc
2a3bc     10 4E 05 C1 |  if_b	add	fp, #16
2a3c0     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a3c4     10 4E 85 C1 |  if_b	sub	fp, #16
2a3c8                 | LR__4388
2a3c8     08 4E 05 F1 | 	add	fp, #8
2a3cc     A7 2A 02 FB | 	rdlong	local07, fp
2a3d0     28 4E 05 F1 | 	add	fp, #40
2a3d4     A7 1E 02 FB | 	rdlong	local01, fp
2a3d8     30 4E 85 F1 | 	sub	fp, #48
2a3dc     15 1F 62 FC | 	wrlong	local01, local07
2a3e0     97 38 48 FB | 	callpa	#(@LR__4390-@LR__4389)>>2,fcache_load_ptr_
2a3e4                 | ' 	}
2a3e4                 | ' 	*path = p;
2a3e4                 | ' #line 2862 "ff.c"
2a3e4                 | ' 	while (di) {
2a3e4                 | LR__4389
2a3e4     2C 4E 05 F1 | 	add	fp, #44
2a3e8     A7 2A 0A FB | 	rdlong	local07, fp wz
2a3ec     2C 4E 85 F1 | 	sub	fp, #44
2a3f0     60 00 90 AD |  if_e	jmp	#LR__4391
2a3f4     18 4E 05 F1 | 	add	fp, #24
2a3f8     A7 28 02 FB | 	rdlong	local06, fp
2a3fc     14 4E 05 F1 | 	add	fp, #20
2a400     A7 24 02 FB | 	rdlong	local04, fp
2a404     01 24 86 F1 | 	sub	local04, #1
2a408     01 24 66 F0 | 	shl	local04, #1
2a40c     14 25 02 F1 | 	add	local04, local06
2a410     12 29 E2 FA | 	rdword	local06, local04
2a414     18 4E 85 F1 | 	sub	fp, #24
2a418     A7 28 52 FC | 	wrword	local06, fp
2a41c     A7 2A E2 FA | 	rdword	local07, fp
2a420     14 4E 85 F1 | 	sub	fp, #20
2a424     20 2A 0E F2 | 	cmp	local07, #32 wz
2a428     14 4E 05 51 |  if_ne	add	fp, #20
2a42c     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a430     14 4E 85 51 |  if_ne	sub	fp, #20
2a434     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a438     18 00 90 5D |  if_ne	jmp	#LR__4391
2a43c     2C 4E 05 F1 | 	add	fp, #44
2a440     A7 1E 02 FB | 	rdlong	local01, fp
2a444     01 1E 86 F1 | 	sub	local01, #1
2a448     A7 1E 62 FC | 	wrlong	local01, fp
2a44c     2C 4E 85 F1 | 	sub	fp, #44
2a450     90 FF 9F FD | 	jmp	#LR__4389
2a454                 | LR__4390
2a454                 | LR__4391
2a454     18 4E 05 F1 | 	add	fp, #24
2a458     A7 2C 02 FB | 	rdlong	local08, fp
2a45c     14 4E 05 F1 | 	add	fp, #20
2a460     A7 24 02 FB | 	rdlong	local04, fp
2a464     01 24 66 F0 | 	shl	local04, #1
2a468     16 25 02 F1 | 	add	local04, local08
2a46c     12 01 58 FC | 	wrword	#0, local04
2a470     A7 2A 0A FB | 	rdlong	local07, fp wz
2a474     2C 4E 85 F1 | 	sub	fp, #44
2a478     06 FA 05 A6 |  if_e	mov	result1, #6
2a47c     04 06 90 AD |  if_e	jmp	#LR__4420
2a480                 | ' 
2a480                 | ' 
2a480                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a480     28 4E 05 F1 | 	add	fp, #40
2a484     A7 00 68 FC | 	wrlong	#0, fp
2a488     28 4E 85 F1 | 	sub	fp, #40
2a48c     97 22 48 FB | 	callpa	#(@LR__4393-@LR__4392)>>2,fcache_load_ptr_
2a490                 | LR__4392
2a490     18 4E 05 F1 | 	add	fp, #24
2a494     A7 2E 02 FB | 	rdlong	local09, fp
2a498     10 4E 05 F1 | 	add	fp, #16
2a49c     A7 30 02 FB | 	rdlong	local10, fp
2a4a0     28 4E 85 F1 | 	sub	fp, #40
2a4a4     01 30 66 F0 | 	shl	local10, #1
2a4a8     17 31 02 F1 | 	add	local10, local09
2a4ac     18 33 E2 FA | 	rdword	local11, local10
2a4b0     20 32 0E F2 | 	cmp	local11, #32 wz
2a4b4     1C 00 90 5D |  if_ne	jmp	#LR__4394
2a4b8     28 4E 05 F1 | 	add	fp, #40
2a4bc     A7 34 02 FB | 	rdlong	local12, fp
2a4c0     1A 27 02 F6 | 	mov	local05, local12
2a4c4     01 26 06 F1 | 	add	local05, #1
2a4c8     A7 26 62 FC | 	wrlong	local05, fp
2a4cc     28 4E 85 F1 | 	sub	fp, #40
2a4d0     BC FF 9F FD | 	jmp	#LR__4392
2a4d4                 | LR__4393
2a4d4                 | LR__4394
2a4d4     28 4E 05 F1 | 	add	fp, #40
2a4d8     A7 2A 02 FB | 	rdlong	local07, fp
2a4dc     28 4E 85 F1 | 	sub	fp, #40
2a4e0     01 2A 16 F2 | 	cmp	local07, #1 wc
2a4e4     28 00 90 3D |  if_ae	jmp	#LR__4395
2a4e8     18 4E 05 F1 | 	add	fp, #24
2a4ec     A7 22 02 FB | 	rdlong	local03, fp
2a4f0     10 4E 05 F1 | 	add	fp, #16
2a4f4     A7 2E 02 FB | 	rdlong	local09, fp
2a4f8     28 4E 85 F1 | 	sub	fp, #40
2a4fc     01 2E 66 F0 | 	shl	local09, #1
2a500     11 2F 02 F1 | 	add	local09, local03
2a504     17 1F E2 FA | 	rdword	local01, local09
2a508     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a50c     14 00 90 5D |  if_ne	jmp	#LR__4396
2a510                 | LR__4395
2a510     10 4E 05 F1 | 	add	fp, #16
2a514     A7 2A C2 FA | 	rdbyte	local07, fp
2a518     03 2A 46 F5 | 	or	local07, #3
2a51c     A7 2A 42 FC | 	wrbyte	local07, fp
2a520     10 4E 85 F1 | 	sub	fp, #16
2a524                 | LR__4396
2a524     97 2C 48 FB | 	callpa	#(@LR__4398-@LR__4397)>>2,fcache_load_ptr_
2a528                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a528                 | LR__4397
2a528     2C 4E 05 F1 | 	add	fp, #44
2a52c     A7 2A 02 FB | 	rdlong	local07, fp
2a530     2C 4E 85 F1 | 	sub	fp, #44
2a534     01 2A 16 F2 | 	cmp	local07, #1 wc
2a538     44 00 90 CD |  if_b	jmp	#LR__4399
2a53c     18 4E 05 F1 | 	add	fp, #24
2a540     A7 28 02 FB | 	rdlong	local06, fp
2a544     14 4E 05 F1 | 	add	fp, #20
2a548     A7 22 02 FB | 	rdlong	local03, fp
2a54c     2C 4E 85 F1 | 	sub	fp, #44
2a550     01 22 86 F1 | 	sub	local03, #1
2a554     01 22 66 F0 | 	shl	local03, #1
2a558     14 23 02 F1 | 	add	local03, local06
2a55c     11 1F E2 FA | 	rdword	local01, local03
2a560     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a564     18 00 90 AD |  if_e	jmp	#LR__4399
2a568     2C 4E 05 F1 | 	add	fp, #44
2a56c     A7 1E 02 FB | 	rdlong	local01, fp
2a570     01 1E 86 F1 | 	sub	local01, #1
2a574     A7 1E 62 FC | 	wrlong	local01, fp
2a578     2C 4E 85 F1 | 	sub	fp, #44
2a57c     A8 FF 9F FD | 	jmp	#LR__4397
2a580                 | LR__4398
2a580                 | LR__4399
2a580     04 4E 05 F1 | 	add	fp, #4
2a584     A7 12 02 FB | 	rdlong	arg01, fp
2a588     04 4E 85 F1 | 	sub	fp, #4
2a58c     20 12 06 F1 | 	add	arg01, #32
2a590     20 14 06 F6 | 	mov	arg02, #32
2a594     0B 16 06 F6 | 	mov	arg03, #11
2a598     09 37 02 F6 | 	mov	local13, arg01
2a59c     98 00 A0 FD | 	call	#\builtin_bytefill_
2a5a0     1B FB 01 F6 | 	mov	result1, local13
2a5a4     0C 4E 05 F1 | 	add	fp, #12
2a5a8     A7 00 48 FC | 	wrbyte	#0, fp
2a5ac     A7 2A C2 FA | 	rdbyte	local07, fp
2a5b0     14 4E 05 F1 | 	add	fp, #20
2a5b4     A7 2A 62 FC | 	wrlong	local07, fp
2a5b8     04 4E 05 F1 | 	add	fp, #4
2a5bc     A7 10 68 FC | 	wrlong	#8, fp
2a5c0     24 4E 85 F1 | 	sub	fp, #36
2a5c4                 | ' 
2a5c4                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a5c4                 | ' 	i = b = 0; ni = 8;
2a5c4                 | ' 	for (;;) {
2a5c4                 | LR__4400
2a5c4     18 4E 05 F1 | 	add	fp, #24
2a5c8     A7 22 02 FB | 	rdlong	local03, fp
2a5cc     10 4E 05 F1 | 	add	fp, #16
2a5d0     A7 2E 02 FB | 	rdlong	local09, fp
2a5d4     17 25 02 F6 | 	mov	local04, local09
2a5d8     01 24 06 F1 | 	add	local04, #1
2a5dc     A7 24 62 FC | 	wrlong	local04, fp
2a5e0     01 2E 66 F0 | 	shl	local09, #1
2a5e4     11 2F 02 F1 | 	add	local09, local03
2a5e8     17 29 E2 FA | 	rdword	local06, local09
2a5ec     14 4E 85 F1 | 	sub	fp, #20
2a5f0     A7 28 52 FC | 	wrword	local06, fp
2a5f4     A7 2A EA FA | 	rdword	local07, fp wz
2a5f8     14 4E 85 F1 | 	sub	fp, #20
2a5fc     74 03 90 AD |  if_e	jmp	#LR__4416
2a600     14 4E 05 F1 | 	add	fp, #20
2a604     A7 2A E2 FA | 	rdword	local07, fp
2a608     14 4E 85 F1 | 	sub	fp, #20
2a60c     20 2A 0E F2 | 	cmp	local07, #32 wz
2a610     30 00 90 AD |  if_e	jmp	#LR__4401
2a614     14 4E 05 F1 | 	add	fp, #20
2a618     A7 1E E2 FA | 	rdword	local01, fp
2a61c     14 4E 85 F1 | 	sub	fp, #20
2a620     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a624     34 00 90 5D |  if_ne	jmp	#LR__4402
2a628     28 4E 05 F1 | 	add	fp, #40
2a62c     A7 24 02 FB | 	rdlong	local04, fp
2a630     04 4E 05 F1 | 	add	fp, #4
2a634     A7 30 02 FB | 	rdlong	local10, fp
2a638     2C 4E 85 F1 | 	sub	fp, #44
2a63c     18 25 0A F2 | 	cmp	local04, local10 wz
2a640     18 00 90 AD |  if_e	jmp	#LR__4402
2a644                 | LR__4401
2a644     10 4E 05 F1 | 	add	fp, #16
2a648     A7 2A C2 FA | 	rdbyte	local07, fp
2a64c     03 2A 46 F5 | 	or	local07, #3
2a650     A7 2A 42 FC | 	wrbyte	local07, fp
2a654     10 4E 85 F1 | 	sub	fp, #16
2a658                 | ' 			cf |=  0x01  |  0x02 ;
2a658                 | ' 			continue;
2a658     68 FF 9F FD | 	jmp	#LR__4400
2a65c                 | LR__4402
2a65c     20 4E 05 F1 | 	add	fp, #32
2a660     A7 2A 02 FB | 	rdlong	local07, fp
2a664     04 4E 05 F1 | 	add	fp, #4
2a668     A7 1E 02 FB | 	rdlong	local01, fp
2a66c     24 4E 85 F1 | 	sub	fp, #36
2a670     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a674     1C 00 90 3D |  if_ae	jmp	#LR__4403
2a678     28 4E 05 F1 | 	add	fp, #40
2a67c     A7 2C 02 FB | 	rdlong	local08, fp
2a680     04 4E 05 F1 | 	add	fp, #4
2a684     A7 30 02 FB | 	rdlong	local10, fp
2a688     2C 4E 85 F1 | 	sub	fp, #44
2a68c     18 2D 0A F2 | 	cmp	local08, local10 wz
2a690     B0 00 90 5D |  if_ne	jmp	#LR__4405
2a694                 | LR__4403
2a694     24 4E 05 F1 | 	add	fp, #36
2a698     A7 2A 02 FB | 	rdlong	local07, fp
2a69c     24 4E 85 F1 | 	sub	fp, #36
2a6a0     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a6a4     18 00 90 5D |  if_ne	jmp	#LR__4404
2a6a8     10 4E 05 F1 | 	add	fp, #16
2a6ac     A7 2A C2 FA | 	rdbyte	local07, fp
2a6b0     03 2A 46 F5 | 	or	local07, #3
2a6b4     A7 2A 42 FC | 	wrbyte	local07, fp
2a6b8     10 4E 85 F1 | 	sub	fp, #16
2a6bc                 | ' 				cf |=  0x01  |  0x02 ;
2a6bc                 | ' 				break;
2a6bc     B4 02 90 FD | 	jmp	#LR__4416
2a6c0                 | LR__4404
2a6c0     28 4E 05 F1 | 	add	fp, #40
2a6c4     A7 2A 02 FB | 	rdlong	local07, fp
2a6c8     04 4E 05 F1 | 	add	fp, #4
2a6cc     A7 1E 02 FB | 	rdlong	local01, fp
2a6d0     2C 4E 85 F1 | 	sub	fp, #44
2a6d4     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a6d8     10 4E 05 51 |  if_ne	add	fp, #16
2a6dc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a6e0     03 2A 46 55 |  if_ne	or	local07, #3
2a6e4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a6e8     10 4E 85 51 |  if_ne	sub	fp, #16
2a6ec     28 4E 05 F1 | 	add	fp, #40
2a6f0     A7 2A 02 FB | 	rdlong	local07, fp
2a6f4     04 4E 05 F1 | 	add	fp, #4
2a6f8     A7 20 02 FB | 	rdlong	local02, fp
2a6fc     2C 4E 85 F1 | 	sub	fp, #44
2a700     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a704     6C 02 90 1D |  if_a	jmp	#LR__4416
2a708     2C 4E 05 F1 | 	add	fp, #44
2a70c     A7 2A 02 FB | 	rdlong	local07, fp
2a710     04 4E 85 F1 | 	sub	fp, #4
2a714     A7 2A 62 FC | 	wrlong	local07, fp
2a718     08 4E 85 F1 | 	sub	fp, #8
2a71c     A7 10 68 FC | 	wrlong	#8, fp
2a720     04 4E 05 F1 | 	add	fp, #4
2a724     A7 16 68 FC | 	wrlong	#11, fp
2a728     18 4E 85 F1 | 	sub	fp, #24
2a72c     A7 32 C2 FA | 	rdbyte	local11, fp
2a730     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a734     02 2A 66 F0 | 	shl	local07, #2
2a738     A7 2A 42 FC | 	wrbyte	local07, fp
2a73c     0C 4E 85 F1 | 	sub	fp, #12
2a740                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a740                 | ' 			continue;
2a740     80 FE 9F FD | 	jmp	#LR__4400
2a744                 | LR__4405
2a744     14 4E 05 F1 | 	add	fp, #20
2a748     A7 2A E2 FA | 	rdword	local07, fp
2a74c     14 4E 85 F1 | 	sub	fp, #20
2a750     80 2A 16 F2 | 	cmp	local07, #128 wc
2a754     6C 00 90 CD |  if_b	jmp	#LR__4407
2a758     10 4E 05 F1 | 	add	fp, #16
2a75c     A7 2A C2 FA | 	rdbyte	local07, fp
2a760     02 2A 46 F5 | 	or	local07, #2
2a764     A7 2A 42 FC | 	wrbyte	local07, fp
2a768     04 4E 05 F1 | 	add	fp, #4
2a76c     A7 12 E2 FA | 	rdword	arg01, fp
2a770     14 4E 85 F1 | 	sub	fp, #20
2a774     01 00 00 FF 
2a778     52 15 06 F6 | 	mov	arg02, ##850
2a77c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a780     14 4E 05 F1 | 	add	fp, #20
2a784     A7 FA 51 FC | 	wrword	result1, fp
2a788     A7 2A E2 FA | 	rdword	local07, fp
2a78c     14 4E 85 F1 | 	sub	fp, #20
2a790     80 2A CE F7 | 	test	local07, #128 wz
2a794     2C 00 90 AD |  if_e	jmp	#LR__4406
2a798     14 4E 05 F1 | 	add	fp, #20
2a79c     A7 20 E2 FA | 	rdword	local02, fp
2a7a0     7F 20 06 F5 | 	and	local02, #127
2a7a4     01 00 00 FF 
2a7a8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a7ac     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a7b0     10 2B C2 FA | 	rdbyte	local07, local02
2a7b4     A7 2A 52 FC | 	wrword	local07, fp
2a7b8     14 4E 85 F1 | 	sub	fp, #20
2a7bc     01 00 00 FF 
2a7c0     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a7c4                 | LR__4406
2a7c4                 | LR__4407
2a7c4     14 4E 05 F1 | 	add	fp, #20
2a7c8     A7 2A E2 FA | 	rdword	local07, fp
2a7cc     14 4E 85 F1 | 	sub	fp, #20
2a7d0     00 2B 16 F2 | 	cmp	local07, #256 wc
2a7d4     88 00 90 CD |  if_b	jmp	#LR__4409
2a7d8     24 4E 05 F1 | 	add	fp, #36
2a7dc     A7 2A 02 FB | 	rdlong	local07, fp
2a7e0     01 2A 86 F1 | 	sub	local07, #1
2a7e4     04 4E 85 F1 | 	sub	fp, #4
2a7e8     A7 20 02 FB | 	rdlong	local02, fp
2a7ec     20 4E 85 F1 | 	sub	fp, #32
2a7f0     15 21 12 F2 | 	cmp	local02, local07 wc
2a7f4     2C 00 90 CD |  if_b	jmp	#LR__4408
2a7f8     10 4E 05 F1 | 	add	fp, #16
2a7fc     A7 32 C2 FA | 	rdbyte	local11, fp
2a800     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a804     03 2A 46 F5 | 	or	local07, #3
2a808     A7 2A 42 FC | 	wrbyte	local07, fp
2a80c     14 4E 05 F1 | 	add	fp, #20
2a810     A7 2A 02 FB | 	rdlong	local07, fp
2a814     04 4E 85 F1 | 	sub	fp, #4
2a818     A7 2A 62 FC | 	wrlong	local07, fp
2a81c     20 4E 85 F1 | 	sub	fp, #32
2a820                 | ' 				cf |=  0x01  |  0x02 ;
2a820                 | ' 				i = ni; continue;
2a820     A0 FD 9F FD | 	jmp	#LR__4400
2a824                 | LR__4408
2a824     04 4E 05 F1 | 	add	fp, #4
2a828     A7 2E 02 FB | 	rdlong	local09, fp
2a82c     1C 4E 05 F1 | 	add	fp, #28
2a830     A7 30 02 FB | 	rdlong	local10, fp
2a834     18 25 02 F6 | 	mov	local04, local10
2a838     01 24 06 F1 | 	add	local04, #1
2a83c     A7 24 62 FC | 	wrlong	local04, fp
2a840     20 2E 06 F1 | 	add	local09, #32
2a844     17 31 02 F1 | 	add	local10, local09
2a848     0C 4E 85 F1 | 	sub	fp, #12
2a84c     A7 22 E2 FA | 	rdword	local03, fp
2a850     14 4E 85 F1 | 	sub	fp, #20
2a854     08 22 46 F0 | 	shr	local03, #8
2a858     18 23 42 FC | 	wrbyte	local03, local10
2a85c     D4 00 90 FD | 	jmp	#LR__4415
2a860                 | LR__4409
2a860     14 4E 05 F1 | 	add	fp, #20
2a864     A7 2A EA FA | 	rdword	local07, fp wz
2a868     14 4E 85 F1 | 	sub	fp, #20
2a86c     20 00 90 AD |  if_e	jmp	#LR__4410
2a870     81 01 00 FF 
2a874     01 12 06 F6 | 	mov	arg01, ##@LR__5043
2a878     14 4E 05 F1 | 	add	fp, #20
2a87c     A7 14 E2 FA | 	rdword	arg02, fp
2a880     14 4E 85 F1 | 	sub	fp, #20
2a884     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a888     00 FA 0D F2 | 	cmp	result1, #0 wz
2a88c     20 00 90 AD |  if_e	jmp	#LR__4411
2a890                 | LR__4410
2a890     14 4E 05 F1 | 	add	fp, #20
2a894     A7 BE 58 FC | 	wrword	#95, fp
2a898     04 4E 85 F1 | 	sub	fp, #4
2a89c     A7 2A C2 FA | 	rdbyte	local07, fp
2a8a0     03 2A 46 F5 | 	or	local07, #3
2a8a4     A7 2A 42 FC | 	wrbyte	local07, fp
2a8a8     10 4E 85 F1 | 	sub	fp, #16
2a8ac     84 00 90 FD | 	jmp	#LR__4414
2a8b0                 | LR__4411
2a8b0     14 4E 05 F1 | 	add	fp, #20
2a8b4     A7 2A E2 FA | 	rdword	local07, fp
2a8b8     14 4E 85 F1 | 	sub	fp, #20
2a8bc     41 2A 16 F2 | 	cmp	local07, #65 wc
2a8c0     24 00 90 CD |  if_b	jmp	#LR__4412
2a8c4     14 4E 05 F1 | 	add	fp, #20
2a8c8     A7 1E E2 FA | 	rdword	local01, fp
2a8cc     14 4E 85 F1 | 	sub	fp, #20
2a8d0     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a8d4     0C 4E 05 C1 |  if_b	add	fp, #12
2a8d8     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a8dc     02 2A 46 C5 |  if_b	or	local07, #2
2a8e0     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a8e4     0C 4E 85 C1 |  if_b	sub	fp, #12
2a8e8                 | LR__4412
2a8e8     14 4E 05 F1 | 	add	fp, #20
2a8ec     A7 2A E2 FA | 	rdword	local07, fp
2a8f0     14 4E 85 F1 | 	sub	fp, #20
2a8f4     61 2A 16 F2 | 	cmp	local07, #97 wc
2a8f8     38 00 90 CD |  if_b	jmp	#LR__4413
2a8fc     14 4E 05 F1 | 	add	fp, #20
2a900     A7 1E E2 FA | 	rdword	local01, fp
2a904     14 4E 85 F1 | 	sub	fp, #20
2a908     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a90c     24 00 90 3D |  if_ae	jmp	#LR__4413
2a910     0C 4E 05 F1 | 	add	fp, #12
2a914     A7 2A C2 FA | 	rdbyte	local07, fp
2a918     01 2A 46 F5 | 	or	local07, #1
2a91c     A7 2A 42 FC | 	wrbyte	local07, fp
2a920     08 4E 05 F1 | 	add	fp, #8
2a924     A7 2A E2 FA | 	rdword	local07, fp
2a928     20 2A 86 F1 | 	sub	local07, #32
2a92c     A7 2A 52 FC | 	wrword	local07, fp
2a930     14 4E 85 F1 | 	sub	fp, #20
2a934                 | LR__4413
2a934                 | LR__4414
2a934                 | LR__4415
2a934     04 4E 05 F1 | 	add	fp, #4
2a938     A7 32 02 FB | 	rdlong	local11, fp
2a93c     19 2F 02 F6 | 	mov	local09, local11
2a940     1C 4E 05 F1 | 	add	fp, #28
2a944     A7 20 02 FB | 	rdlong	local02, fp
2a948     10 25 02 F6 | 	mov	local04, local02
2a94c     01 24 06 F1 | 	add	local04, #1
2a950     A7 24 62 FC | 	wrlong	local04, fp
2a954     10 31 02 F6 | 	mov	local10, local02
2a958     20 2E 06 F1 | 	add	local09, #32
2a95c     17 31 02 F1 | 	add	local10, local09
2a960     0C 4E 85 F1 | 	sub	fp, #12
2a964     A7 22 E2 FA | 	rdword	local03, fp
2a968     14 4E 85 F1 | 	sub	fp, #20
2a96c     18 23 42 FC | 	wrbyte	local03, local10
2a970     50 FC 9F FD | 	jmp	#LR__4400
2a974                 | LR__4416
2a974     04 4E 05 F1 | 	add	fp, #4
2a978     A7 32 02 FB | 	rdlong	local11, fp
2a97c     04 4E 85 F1 | 	sub	fp, #4
2a980     20 32 06 F1 | 	add	local11, #32
2a984     19 2B C2 FA | 	rdbyte	local07, local11
2a988     E5 2A 0E F2 | 	cmp	local07, #229 wz
2a98c     04 4E 05 A1 |  if_e	add	fp, #4
2a990     A7 2A 02 AB |  if_e	rdlong	local07, fp
2a994     04 4E 85 A1 |  if_e	sub	fp, #4
2a998     20 2A 06 A1 |  if_e	add	local07, #32
2a99c     15 0B 48 AC |  if_e	wrbyte	#5, local07
2a9a0     24 4E 05 F1 | 	add	fp, #36
2a9a4     A7 2A 02 FB | 	rdlong	local07, fp
2a9a8     24 4E 85 F1 | 	sub	fp, #36
2a9ac     08 2A 0E F2 | 	cmp	local07, #8 wz
2a9b0     0C 4E 05 A1 |  if_e	add	fp, #12
2a9b4     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2a9b8     02 2A 66 A0 |  if_e	shl	local07, #2
2a9bc     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2a9c0     0C 4E 85 A1 |  if_e	sub	fp, #12
2a9c4     0C 4E 05 F1 | 	add	fp, #12
2a9c8     A7 2A C2 FA | 	rdbyte	local07, fp
2a9cc     0C 4E 85 F1 | 	sub	fp, #12
2a9d0     0C 2A 06 F5 | 	and	local07, #12
2a9d4     0C 2A 0E F2 | 	cmp	local07, #12 wz
2a9d8     18 00 90 AD |  if_e	jmp	#LR__4417
2a9dc     0C 4E 05 F1 | 	add	fp, #12
2a9e0     A7 1E C2 FA | 	rdbyte	local01, fp
2a9e4     0C 4E 85 F1 | 	sub	fp, #12
2a9e8     03 1E 06 F5 | 	and	local01, #3
2a9ec     03 1E 0E F2 | 	cmp	local01, #3 wz
2a9f0     14 00 90 5D |  if_ne	jmp	#LR__4418
2a9f4                 | LR__4417
2a9f4     10 4E 05 F1 | 	add	fp, #16
2a9f8     A7 2A C2 FA | 	rdbyte	local07, fp
2a9fc     02 2A 46 F5 | 	or	local07, #2
2aa00     A7 2A 42 FC | 	wrbyte	local07, fp
2aa04     10 4E 85 F1 | 	sub	fp, #16
2aa08                 | LR__4418
2aa08     10 4E 05 F1 | 	add	fp, #16
2aa0c     A7 2A C2 FA | 	rdbyte	local07, fp
2aa10     10 4E 85 F1 | 	sub	fp, #16
2aa14     02 2A CE F7 | 	test	local07, #2 wz
2aa18     48 00 90 5D |  if_ne	jmp	#LR__4419
2aa1c     0C 4E 05 F1 | 	add	fp, #12
2aa20     A7 2A C2 FA | 	rdbyte	local07, fp
2aa24     0C 4E 85 F1 | 	sub	fp, #12
2aa28     01 2A CE F7 | 	test	local07, #1 wz
2aa2c     10 4E 05 51 |  if_ne	add	fp, #16
2aa30     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2aa34     10 2A 46 55 |  if_ne	or	local07, #16
2aa38     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aa3c     10 4E 85 51 |  if_ne	sub	fp, #16
2aa40     0C 4E 05 F1 | 	add	fp, #12
2aa44     A7 2A C2 FA | 	rdbyte	local07, fp
2aa48     0C 4E 85 F1 | 	sub	fp, #12
2aa4c     04 2A CE F7 | 	test	local07, #4 wz
2aa50     10 4E 05 51 |  if_ne	add	fp, #16
2aa54     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2aa58     08 2A 46 55 |  if_ne	or	local07, #8
2aa5c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aa60     10 4E 85 51 |  if_ne	sub	fp, #16
2aa64                 | LR__4419
2aa64     04 4E 05 F1 | 	add	fp, #4
2aa68     A7 2A 02 FB | 	rdlong	local07, fp
2aa6c     0C 4E 05 F1 | 	add	fp, #12
2aa70     A7 1E C2 FA | 	rdbyte	local01, fp
2aa74     10 4E 85 F1 | 	sub	fp, #16
2aa78     2B 2A 06 F1 | 	add	local07, #43
2aa7c     15 1F 42 FC | 	wrbyte	local01, local07
2aa80                 | ' 	}
2aa80                 | ' 
2aa80                 | ' 	dp->fn[ 11 ] = cf;
2aa80                 | ' 
2aa80                 | ' 	return FR_OK;
2aa80     00 FA 05 F6 | 	mov	result1, #0
2aa84                 | LR__4420
2aa84     A7 F0 03 F6 | 	mov	ptra, fp
2aa88     B2 00 A0 FD | 	call	#popregs_
2aa8c                 | _fatfs_cc_create_name_ret
2aa8c     2D 00 64 FD | 	ret
2aa90                 | 
2aa90                 | _fatfs_cc_follow_path
2aa90     02 4A 05 F6 | 	mov	COUNT_, #2
2aa94     A8 00 A0 FD | 	call	#pushregs_
2aa98     18 F0 07 F1 | 	add	ptra, #24
2aa9c     04 4E 05 F1 | 	add	fp, #4
2aaa0     A7 12 62 FC | 	wrlong	arg01, fp
2aaa4     04 4E 05 F1 | 	add	fp, #4
2aaa8     A7 14 62 FC | 	wrlong	arg02, fp
2aaac     04 4E 85 F1 | 	sub	fp, #4
2aab0     A7 FA 01 FB | 	rdlong	result1, fp
2aab4     FD 1E 02 FB | 	rdlong	local01, result1
2aab8     10 4E 05 F1 | 	add	fp, #16
2aabc     A7 1E 62 FC | 	wrlong	local01, fp
2aac0     14 4E 85 F1 | 	sub	fp, #20
2aac4     97 24 48 FB | 	callpa	#(@LR__4432-@LR__4430)>>2,fcache_load_ptr_
2aac8                 | ' )
2aac8                 | ' {
2aac8                 | ' 	FRESULT res;
2aac8                 | ' 	BYTE ns;
2aac8                 | ' 	FATFS *fs = dp->obj.fs;
2aac8                 | ' #line 3034 "ff.c"
2aac8                 | ' 	{
2aac8                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2aac8                 | LR__4430
2aac8     08 4E 05 F1 | 	add	fp, #8
2aacc     A7 1E 02 FB | 	rdlong	local01, fp
2aad0     08 4E 85 F1 | 	sub	fp, #8
2aad4     0F 1F C2 FA | 	rdbyte	local01, local01
2aad8     2F 1E 0E F2 | 	cmp	local01, #47 wz
2aadc     18 00 90 AD |  if_e	jmp	#LR__4431
2aae0     08 4E 05 F1 | 	add	fp, #8
2aae4     A7 1E 02 FB | 	rdlong	local01, fp
2aae8     08 4E 85 F1 | 	sub	fp, #8
2aaec     0F 1F C2 FA | 	rdbyte	local01, local01
2aaf0     5C 1E 0E F2 | 	cmp	local01, #92 wz
2aaf4     18 00 90 5D |  if_ne	jmp	#LR__4433
2aaf8                 | LR__4431
2aaf8     08 4E 05 F1 | 	add	fp, #8
2aafc     A7 1E 02 FB | 	rdlong	local01, fp
2ab00     01 1E 06 F1 | 	add	local01, #1
2ab04     A7 1E 62 FC | 	wrlong	local01, fp
2ab08     08 4E 85 F1 | 	sub	fp, #8
2ab0c     B8 FF 9F FD | 	jmp	#LR__4430
2ab10                 | LR__4432
2ab10                 | LR__4433
2ab10     04 4E 05 F1 | 	add	fp, #4
2ab14     A7 1E 02 FB | 	rdlong	local01, fp
2ab18     08 1E 06 F1 | 	add	local01, #8
2ab1c     0F 01 68 FC | 	wrlong	#0, local01
2ab20     04 4E 05 F1 | 	add	fp, #4
2ab24     A7 1E 02 FB | 	rdlong	local01, fp
2ab28     08 4E 85 F1 | 	sub	fp, #8
2ab2c     0F 1F C2 FA | 	rdbyte	local01, local01
2ab30     20 1E 16 F2 | 	cmp	local01, #32 wc
2ab34     30 00 90 3D |  if_ae	jmp	#LR__4434
2ab38     04 4E 05 F1 | 	add	fp, #4
2ab3c     A7 1E 02 FB | 	rdlong	local01, fp
2ab40     2B 1E 06 F1 | 	add	local01, #43
2ab44     0F 01 49 FC | 	wrbyte	#128, local01
2ab48     A7 12 02 FB | 	rdlong	arg01, fp
2ab4c     04 4E 85 F1 | 	sub	fp, #4
2ab50     00 14 06 F6 | 	mov	arg02, #0
2ab54     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ab58     0C 4E 05 F1 | 	add	fp, #12
2ab5c     A7 FA 61 FC | 	wrlong	result1, fp
2ab60     0C 4E 85 F1 | 	sub	fp, #12
2ab64     1C 01 90 FD | 	jmp	#LR__4438
2ab68                 | LR__4434
2ab68                 | ' 		for (;;) {
2ab68                 | LR__4435
2ab68     04 4E 05 F1 | 	add	fp, #4
2ab6c     A7 12 02 FB | 	rdlong	arg01, fp
2ab70     04 4E 05 F1 | 	add	fp, #4
2ab74     A7 14 02 F6 | 	mov	arg02, fp
2ab78     08 4E 85 F1 | 	sub	fp, #8
2ab7c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2ab80     0C 4E 05 F1 | 	add	fp, #12
2ab84     A7 FA 61 FC | 	wrlong	result1, fp
2ab88     00 FA 4D F2 | 	cmps	result1, #0 wz
2ab8c     0C 4E 85 F1 | 	sub	fp, #12
2ab90     F0 00 90 5D |  if_ne	jmp	#LR__4437
2ab94     04 4E 05 F1 | 	add	fp, #4
2ab98     A7 12 02 FB | 	rdlong	arg01, fp
2ab9c     04 4E 85 F1 | 	sub	fp, #4
2aba0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2aba4     0C 4E 05 F1 | 	add	fp, #12
2aba8     A7 FA 61 FC | 	wrlong	result1, fp
2abac     08 4E 85 F1 | 	sub	fp, #8
2abb0     A7 1E 02 FB | 	rdlong	local01, fp
2abb4     2B 1E 06 F1 | 	add	local01, #43
2abb8     0F 1F C2 FA | 	rdbyte	local01, local01
2abbc     0C 4E 05 F1 | 	add	fp, #12
2abc0     A7 1E 42 FC | 	wrbyte	local01, fp
2abc4     04 4E 85 F1 | 	sub	fp, #4
2abc8     A7 1E 0A FB | 	rdlong	local01, fp wz
2abcc     0C 4E 85 F1 | 	sub	fp, #12
2abd0     34 00 90 AD |  if_e	jmp	#LR__4436
2abd4     0C 4E 05 F1 | 	add	fp, #12
2abd8     A7 1E 02 FB | 	rdlong	local01, fp
2abdc     0C 4E 85 F1 | 	sub	fp, #12
2abe0     04 1E 0E F2 | 	cmp	local01, #4 wz
2abe4     9C 00 90 5D |  if_ne	jmp	#LR__4437
2abe8     10 4E 05 F1 | 	add	fp, #16
2abec     A7 1E C2 FA | 	rdbyte	local01, fp
2abf0     10 4E 85 F1 | 	sub	fp, #16
2abf4     04 1E CE F7 | 	test	local01, #4 wz
2abf8     0C 4E 05 A1 |  if_e	add	fp, #12
2abfc     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ac00     0C 4E 85 A1 |  if_e	sub	fp, #12
2ac04                 | ' 					}
2ac04                 | ' 				}
2ac04                 | ' 				break;
2ac04     7C 00 90 FD | 	jmp	#LR__4437
2ac08                 | LR__4436
2ac08     10 4E 05 F1 | 	add	fp, #16
2ac0c     A7 1E C2 FA | 	rdbyte	local01, fp
2ac10     10 4E 85 F1 | 	sub	fp, #16
2ac14     04 1E CE F7 | 	test	local01, #4 wz
2ac18     68 00 90 5D |  if_ne	jmp	#LR__4437
2ac1c     04 4E 05 F1 | 	add	fp, #4
2ac20     A7 1E 02 FB | 	rdlong	local01, fp
2ac24     04 4E 85 F1 | 	sub	fp, #4
2ac28     06 1E 06 F1 | 	add	local01, #6
2ac2c     0F 1F C2 FA | 	rdbyte	local01, local01
2ac30     10 1E CE F7 | 	test	local01, #16 wz
2ac34     0C 4E 05 A1 |  if_e	add	fp, #12
2ac38     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ac3c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ac40                 | ' 				res = FR_NO_PATH; break;
2ac40     40 00 90 AD |  if_e	jmp	#LR__4437
2ac44     04 4E 05 F1 | 	add	fp, #4
2ac48     A7 20 02 FB | 	rdlong	local02, fp
2ac4c     10 1F 02 F6 | 	mov	local01, local02
2ac50     10 4E 05 F1 | 	add	fp, #16
2ac54     A7 14 02 FB | 	rdlong	arg02, fp
2ac58     0A 13 02 F6 | 	mov	arg01, arg02
2ac5c     34 14 06 F1 | 	add	arg02, #52
2ac60     14 4E 85 F1 | 	sub	fp, #20
2ac64     10 20 06 F1 | 	add	local02, #16
2ac68     10 21 02 FB | 	rdlong	local02, local02
2ac6c     FF 21 06 F5 | 	and	local02, #511
2ac70     10 15 02 F1 | 	add	arg02, local02
2ac74     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ac78     08 1E 06 F1 | 	add	local01, #8
2ac7c     0F FB 61 FC | 	wrlong	result1, local01
2ac80     E4 FE 9F FD | 	jmp	#LR__4435
2ac84                 | LR__4437
2ac84                 | LR__4438
2ac84                 | ' 			}
2ac84                 | ' #line 3090 "ff.c"
2ac84                 | ' 			{
2ac84                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ac84                 | ' 			}
2ac84                 | ' 		}
2ac84                 | ' 	}
2ac84                 | ' 
2ac84                 | ' 	return res;
2ac84     0C 4E 05 F1 | 	add	fp, #12
2ac88     A7 FA 01 FB | 	rdlong	result1, fp
2ac8c     0C 4E 85 F1 | 	sub	fp, #12
2ac90     A7 F0 03 F6 | 	mov	ptra, fp
2ac94     B2 00 A0 FD | 	call	#popregs_
2ac98                 | _fatfs_cc_follow_path_ret
2ac98     2D 00 64 FD | 	ret
2ac9c                 | 
2ac9c                 | _fatfs_cc_get_ldnumber
2ac9c     01 00 66 F6 | 	neg	_var01, #1
2aca0     09 03 0A FB | 	rdlong	_var02, arg01 wz
2aca4     01 05 02 F6 | 	mov	_var03, _var02
2aca8     01 FA 65 A6 |  if_e	neg	result1, #1
2acac     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2acb0     97 10 48 FB | 	callpa	#(@LR__4441-@LR__4440)>>2,fcache_load_ptr_
2acb4                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2acb4                 | LR__4440
2acb4     02 07 C2 FA | 	rdbyte	_var04, _var03
2acb8     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2acbc     20 FA 15 F2 | 	cmp	result1, #32 wc
2acc0     01 04 06 F1 | 	add	_var03, #1
2acc4     03 09 02 36 |  if_ae	mov	_var05, _var04
2acc8     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2accc     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2acd0     E0 FF 9F 1D |  if_a	jmp	#LR__4440
2acd4                 | LR__4441
2acd4     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2acd8     3A 06 0E F2 | 	cmp	_var04, #58 wz
2acdc     40 00 90 5D |  if_ne	jmp	#LR__4443
2ace0     01 0A 06 F6 | 	mov	_var06, #1
2ace4     01 09 C2 FA | 	rdbyte	_var05, _var02
2ace8     30 08 16 F2 | 	cmp	_var05, #48 wc
2acec     1C 00 90 CD |  if_b	jmp	#LR__4442
2acf0     01 09 C2 FA | 	rdbyte	_var05, _var02
2acf4     3A 08 16 F2 | 	cmp	_var05, #58 wc
2acf8     01 0D 02 C6 |  if_b	mov	_var07, _var02
2acfc     02 0C 06 C1 |  if_b	add	_var07, #2
2ad00     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ad04     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2ad08     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2ad0c                 | LR__4442
2ad0c     01 0A 56 F2 | 	cmps	_var06, #1 wc
2ad10     05 01 02 C6 |  if_b	mov	_var01, _var06
2ad14     09 05 62 CC |  if_b	wrlong	_var03, arg01
2ad18                 | ' 			vol = i;
2ad18                 | ' 			*path = tt;
2ad18                 | ' 		}
2ad18                 | ' 		return vol;
2ad18     00 FB 01 F6 | 	mov	result1, _var01
2ad1c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ad20                 | LR__4443
2ad20                 | ' 	}
2ad20                 | ' #line 3170 "ff.c"
2ad20                 | ' 	vol = 0;
2ad20                 | ' 
2ad20                 | ' 	return vol;
2ad20     00 FA 05 F6 | 	mov	result1, #0
2ad24                 | _fatfs_cc_get_ldnumber_ret
2ad24     2D 00 64 FD | 	ret
2ad28                 | 
2ad28                 | _fatfs_cc_check_fs
2ad28     04 4A 05 F6 | 	mov	COUNT_, #4
2ad2c     A8 00 A0 FD | 	call	#pushregs_
2ad30     09 1F 02 F6 | 	mov	local01, arg01
2ad34     03 1E 06 F1 | 	add	local01, #3
2ad38     0F 01 48 FC | 	wrbyte	#0, local01
2ad3c     2D 1E 06 F1 | 	add	local01, #45
2ad40     FF FF FF FF 
2ad44     0F FF 6B FC | 	wrlong	##-1, local01
2ad48     30 1E 86 F1 | 	sub	local01, #48
2ad4c     0F 13 02 F6 | 	mov	arg01, local01
2ad50     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ad54     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad58     04 FA 05 56 |  if_ne	mov	result1, #4
2ad5c     94 01 90 5D |  if_ne	jmp	#LR__4454
2ad60     34 1E 06 F1 | 	add	local01, #52
2ad64     0F 13 02 F6 | 	mov	arg01, local01
2ad68     FE 13 06 F1 | 	add	arg01, #510
2ad6c                 | ' {
2ad6c                 | ' 
2ad6c                 | ' 	return *((WORD*)ptr);
2ad6c     09 21 E2 FA | 	rdword	local02, arg01
2ad70     0F 23 C2 FA | 	rdbyte	local03, local01
2ad74     34 1E 86 F1 | 	sub	local01, #52
2ad78     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ad7c     EB 24 0E F2 | 	cmp	local04, #235 wz
2ad80     11 17 02 56 |  if_ne	mov	arg03, local03
2ad84     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ad88     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2ad8c     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2ad90     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2ad94     44 01 90 5D |  if_ne	jmp	#LR__4453
2ad98     10 25 32 F9 | 	getword	local04, local02, #0
2ad9c     55 00 00 FF 
2ada0     55 24 0E F2 | 	cmp	local04, ##43605 wz
2ada4     2C 00 90 5D |  if_ne	jmp	#LR__4450
2ada8     34 1E 06 F1 | 	add	local01, #52
2adac     0F 13 02 F6 | 	mov	arg01, local01
2adb0     34 1E 86 F1 | 	sub	local01, #52
2adb4     52 12 06 F1 | 	add	arg01, #82
2adb8     81 01 00 FF 
2adbc     08 14 06 F6 | 	mov	arg02, ##@LR__5044
2adc0     08 16 06 F6 | 	mov	arg03, #8
2adc4     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2adc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2adcc                 | ' 			return 0;
2adcc     00 FA 05 A6 |  if_e	mov	result1, #0
2add0     20 01 90 AD |  if_e	jmp	#LR__4454
2add4                 | LR__4450
2add4     34 1E 06 F1 | 	add	local01, #52
2add8     0F 13 02 F6 | 	mov	arg01, local01
2addc     0B 12 06 F1 | 	add	arg01, #11
2ade0                 | ' {
2ade0                 | ' 
2ade0                 | ' 	return *((WORD*)ptr);
2ade0     09 FB E1 FA | 	rdword	result1, arg01
2ade4     0D 1E 06 F1 | 	add	local01, #13
2ade8     0F 23 C2 FA | 	rdbyte	local03, local01
2adec     41 1E 86 F1 | 	sub	local01, #65
2adf0     FD 24 32 F9 | 	getword	local04, result1, #0
2adf4     FD 14 32 F9 | 	getword	arg02, result1, #0
2adf8     01 14 86 F1 | 	sub	arg02, #1
2adfc     0A 25 CA F7 | 	test	local04, arg02 wz
2ae00     D8 00 90 5D |  if_ne	jmp	#LR__4452
2ae04     FD 14 32 F9 | 	getword	arg02, result1, #0
2ae08     01 00 00 FF 
2ae0c     00 14 16 F2 | 	cmp	arg02, ##512 wc
2ae10     C8 00 90 CD |  if_b	jmp	#LR__4452
2ae14     FD 14 32 F9 | 	getword	arg02, result1, #0
2ae18     01 00 00 FF 
2ae1c     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ae20     B8 00 90 3D |  if_ae	jmp	#LR__4452
2ae24     11 13 02 F6 | 	mov	arg01, local03
2ae28     07 12 4E F7 | 	zerox	arg01, #7 wz
2ae2c     AC 00 90 AD |  if_e	jmp	#LR__4452
2ae30     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2ae34     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ae38     01 22 86 F1 | 	sub	local03, #1
2ae3c     11 13 CA F7 | 	test	arg01, local03 wz
2ae40     98 00 90 5D |  if_ne	jmp	#LR__4452
2ae44     34 1E 06 F1 | 	add	local01, #52
2ae48     0F 13 02 F6 | 	mov	arg01, local01
2ae4c     34 1E 86 F1 | 	sub	local01, #52
2ae50     0E 12 06 F1 | 	add	arg01, #14
2ae54                 | ' {
2ae54                 | ' 
2ae54                 | ' 	return *((WORD*)ptr);
2ae54     09 FB E9 FA | 	rdword	result1, arg01 wz
2ae58     80 00 90 AD |  if_e	jmp	#LR__4452
2ae5c     44 1E 06 F1 | 	add	local01, #68
2ae60     0F 13 C2 FA | 	rdbyte	arg01, local01
2ae64     44 1E 86 F1 | 	sub	local01, #68
2ae68     01 12 86 F1 | 	sub	arg01, #1
2ae6c     02 12 16 F2 | 	cmp	arg01, #2 wc
2ae70     68 00 90 3D |  if_ae	jmp	#LR__4452
2ae74     34 1E 06 F1 | 	add	local01, #52
2ae78     0F 13 02 F6 | 	mov	arg01, local01
2ae7c     34 1E 86 F1 | 	sub	local01, #52
2ae80     11 12 06 F1 | 	add	arg01, #17
2ae84                 | ' {
2ae84                 | ' 
2ae84                 | ' 	return *((WORD*)ptr);
2ae84     09 FB E9 FA | 	rdword	result1, arg01 wz
2ae88     50 00 90 AD |  if_e	jmp	#LR__4452
2ae8c     34 1E 06 F1 | 	add	local01, #52
2ae90     0F 13 02 F6 | 	mov	arg01, local01
2ae94     34 1E 86 F1 | 	sub	local01, #52
2ae98     13 12 06 F1 | 	add	arg01, #19
2ae9c                 | ' {
2ae9c                 | ' 
2ae9c                 | ' 	return *((WORD*)ptr);
2ae9c     09 FB E1 FA | 	rdword	result1, arg01
2aea0     FD 22 32 F9 | 	getword	local03, result1, #0
2aea4     80 22 16 F2 | 	cmp	local03, #128 wc
2aea8     20 00 90 3D |  if_ae	jmp	#LR__4451
2aeac     34 1E 06 F1 | 	add	local01, #52
2aeb0     0F 13 02 F6 | 	mov	arg01, local01
2aeb4     34 1E 86 F1 | 	sub	local01, #52
2aeb8     20 12 06 F1 | 	add	arg01, #32
2aebc                 | ' {
2aebc                 | ' 
2aebc                 | ' 	return *((DWORD*)ptr);
2aebc     09 FB 01 FB | 	rdlong	result1, arg01
2aec0     80 00 00 FF 
2aec4     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2aec8     10 00 90 CD |  if_b	jmp	#LR__4452
2aecc                 | LR__4451
2aecc     4A 1E 06 F1 | 	add	local01, #74
2aed0                 | ' {
2aed0                 | ' 
2aed0                 | ' 	return *((WORD*)ptr);
2aed0     0F FB E9 FA | 	rdword	result1, local01 wz
2aed4                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2aed4                 | ' 			&& ld_word(fs->win +  14 ) != 0
2aed4                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2aed4                 | ' 			&& ld_word(fs->win +  17 ) != 0
2aed4                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2aed4                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2aed4                 | ' 				return 0;
2aed4     00 FA 05 56 |  if_ne	mov	result1, #0
2aed8     18 00 90 5D |  if_ne	jmp	#LR__4454
2aedc                 | LR__4452
2aedc                 | LR__4453
2aedc                 | ' 		}
2aedc                 | ' 	}
2aedc                 | ' 	return sign == 0xAA55 ? 2 : 3;
2aedc     10 23 32 F9 | 	getword	local03, local02, #0
2aee0     55 00 00 FF 
2aee4     55 22 0E F2 | 	cmp	local03, ##43605 wz
2aee8     02 24 06 A6 |  if_e	mov	local04, #2
2aeec     03 24 06 56 |  if_ne	mov	local04, #3
2aef0     12 FB 01 F6 | 	mov	result1, local04
2aef4                 | LR__4454
2aef4     A7 F0 03 F6 | 	mov	ptra, fp
2aef8     B2 00 A0 FD | 	call	#popregs_
2aefc                 | _fatfs_cc_check_fs_ret
2aefc     2D 00 64 FD | 	ret
2af00                 | 
2af00                 | _fatfs_cc_find_volume
2af00     05 4A 05 F6 | 	mov	COUNT_, #5
2af04     A8 00 A0 FD | 	call	#pushregs_
2af08     24 F0 07 F1 | 	add	ptra, #36
2af0c     09 1F 02 F6 | 	mov	local01, arg01
2af10     0A 21 02 F6 | 	mov	local02, arg02
2af14     0F 13 02 F6 | 	mov	arg01, local01
2af18     00 14 06 F6 | 	mov	arg02, #0
2af1c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2af20     02 FA 0D F2 | 	cmp	result1, #2 wz
2af24     0C 00 90 AD |  if_e	jmp	#LR__4460
2af28     03 FA 15 F2 | 	cmp	result1, #3 wc
2af2c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2af30     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4468
2af34                 | LR__4460
2af34                 | ' 	for (i = 0; i < 4; i++) {
2af34     00 22 06 F6 | 	mov	local03, #0
2af38     97 26 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2af3c                 | LR__4461
2af3c     04 22 16 F2 | 	cmp	local03, #4 wc
2af40     44 00 90 3D |  if_ae	jmp	#LR__4463
2af44     11 25 02 F6 | 	mov	local04, local03
2af48     02 24 66 F0 | 	shl	local04, #2
2af4c     14 4E 05 F1 | 	add	fp, #20
2af50     A7 24 02 F1 | 	add	local04, fp
2af54     34 1E 06 F1 | 	add	local01, #52
2af58     0F 13 02 F6 | 	mov	arg01, local01
2af5c     34 1E 86 F1 | 	sub	local01, #52
2af60     BE 13 06 F1 | 	add	arg01, #446
2af64     11 15 02 F6 | 	mov	arg02, local03
2af68     04 14 66 F0 | 	shl	arg02, #4
2af6c     0A 13 02 F1 | 	add	arg01, arg02
2af70     08 12 06 F1 | 	add	arg01, #8
2af74                 | ' {
2af74                 | ' 
2af74                 | ' 	return *((DWORD*)ptr);
2af74     09 FB 01 FB | 	rdlong	result1, arg01
2af78     14 4E 85 F1 | 	sub	fp, #20
2af7c     12 FB 61 FC | 	wrlong	result1, local04
2af80     01 22 06 F1 | 	add	local03, #1
2af84     B4 FF 9F FD | 	jmp	#LR__4461
2af88                 | LR__4462
2af88                 | LR__4463
2af88     00 20 0E F2 | 	cmp	local02, #0 wz
2af8c     10 25 02 56 |  if_ne	mov	local04, local02
2af90     01 24 86 51 |  if_ne	sub	local04, #1
2af94     00 24 06 A6 |  if_e	mov	local04, #0
2af98     12 23 02 F6 | 	mov	local03, local04
2af9c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2af9c                 | ' 	}
2af9c                 | ' 	i = part ? part - 1 : 0;
2af9c                 | ' 	do {
2af9c                 | LR__4464
2af9c     11 25 02 F6 | 	mov	local04, local03
2afa0     02 24 66 F0 | 	shl	local04, #2
2afa4     14 4E 05 F1 | 	add	fp, #20
2afa8     A7 24 02 F1 | 	add	local04, fp
2afac     12 25 0A FB | 	rdlong	local04, local04 wz
2afb0     14 4E 85 F1 | 	sub	fp, #20
2afb4     28 00 90 AD |  if_e	jmp	#LR__4465
2afb8     11 25 02 F6 | 	mov	local04, local03
2afbc     02 24 66 F0 | 	shl	local04, #2
2afc0     14 4E 05 F1 | 	add	fp, #20
2afc4     A7 24 02 F1 | 	add	local04, fp
2afc8     12 15 02 FB | 	rdlong	arg02, local04
2afcc     0F 13 02 F6 | 	mov	arg01, local01
2afd0     14 4E 85 F1 | 	sub	fp, #20
2afd4     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2afd8     FD 24 02 F6 | 	mov	local04, result1
2afdc     04 00 90 FD | 	jmp	#LR__4466
2afe0                 | LR__4465
2afe0     03 24 06 F6 | 	mov	local04, #3
2afe4                 | LR__4466
2afe4     12 27 02 F6 | 	mov	local05, local04
2afe8     00 20 0E F2 | 	cmp	local02, #0 wz
2afec     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2aff0     0C 00 90 8D |  if_c_and_z	jmp	#LR__4467
2aff4     01 22 06 A1 |  if_e	add	local03, #1
2aff8     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2affc     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4464
2b000                 | LR__4467
2b000                 | ' 	return fmt;
2b000     13 FB 01 F6 | 	mov	result1, local05
2b004                 | LR__4468
2b004     A7 F0 03 F6 | 	mov	ptra, fp
2b008     B2 00 A0 FD | 	call	#popregs_
2b00c                 | _fatfs_cc_find_volume_ret
2b00c     2D 00 64 FD | 	ret
2b010                 | 
2b010                 | _fatfs_cc_mount_volume
2b010     0B 4A 05 F6 | 	mov	COUNT_, #11
2b014     A8 00 A0 FD | 	call	#pushregs_
2b018     0A 1F 02 F6 | 	mov	local01, arg02
2b01c     0B 21 02 F6 | 	mov	local02, arg03
2b020     0F 01 68 FC | 	wrlong	#0, local01
2b024     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2b028     FD 22 02 F6 | 	mov	local03, result1
2b02c     00 22 56 F2 | 	cmps	local03, #0 wc
2b030     0B FA 05 C6 |  if_b	mov	result1, #11
2b034     3C 05 90 CD |  if_b	jmp	#LR__4480
2b038     11 17 02 F6 | 	mov	arg03, local03
2b03c     02 16 66 F0 | 	shl	arg03, #2
2b040     F2 16 02 F1 | 	add	arg03, objptr
2b044     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b048     0C FA 05 A6 |  if_e	mov	result1, #12
2b04c     24 05 90 AD |  if_e	jmp	#LR__4480
2b050     0F 25 62 FC | 	wrlong	local04, local01
2b054     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b058     FE 20 06 F5 | 	and	local02, #254
2b05c     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b060     4C 00 90 AD |  if_e	jmp	#LR__4471
2b064     01 24 06 F1 | 	add	local04, #1
2b068     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b06c     01 24 86 F1 | 	sub	local04, #1
2b070     01 FA 05 56 |  if_ne	mov	result1, #1
2b074                 | ' 
2b074                 | ' 	return Stat;
2b074     01 00 00 AF 
2b078     20 E4 05 A1 |  if_e	add	objptr, ##544
2b07c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b080     01 00 00 AF 
2b084     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b088     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b08c     01 16 CE F7 | 	test	arg03, #1 wz
2b090     1C 00 90 5D |  if_ne	jmp	#LR__4470
2b094     00 20 0E F2 | 	cmp	local02, #0 wz
2b098     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b09c     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b0a0                 | ' 				return FR_WRITE_PROTECTED;
2b0a0     0A FA 05 56 |  if_ne	mov	result1, #10
2b0a4     CC 04 90 5D |  if_ne	jmp	#LR__4480
2b0a8                 | ' 			}
2b0a8                 | ' 			return FR_OK;
2b0a8     00 FA 05 F6 | 	mov	result1, #0
2b0ac     C4 04 90 FD | 	jmp	#LR__4480
2b0b0                 | LR__4470
2b0b0                 | LR__4471
2b0b0     12 01 48 FC | 	wrbyte	#0, local04
2b0b4     01 24 06 F1 | 	add	local04, #1
2b0b8     12 23 42 FC | 	wrbyte	local03, local04
2b0bc     12 13 C2 FA | 	rdbyte	arg01, local04
2b0c0     01 24 86 F1 | 	sub	local04, #1
2b0c4     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b0c8     FD 16 02 F6 | 	mov	arg03, result1
2b0cc     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b0d0     01 26 CE F7 | 	test	local05, #1 wz
2b0d4                 | ' 		return FR_NOT_READY;
2b0d4     03 FA 05 56 |  if_ne	mov	result1, #3
2b0d8     98 04 90 5D |  if_ne	jmp	#LR__4480
2b0dc     00 20 0E F2 | 	cmp	local02, #0 wz
2b0e0     0B 27 02 56 |  if_ne	mov	local05, arg03
2b0e4     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b0e8     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b0ec                 | ' 		return FR_WRITE_PROTECTED;
2b0ec     0A FA 05 56 |  if_ne	mov	result1, #10
2b0f0     80 04 90 5D |  if_ne	jmp	#LR__4480
2b0f4     12 13 02 F6 | 	mov	arg01, local04
2b0f8     00 14 06 F6 | 	mov	arg02, #0
2b0fc     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b100     FD 12 02 F6 | 	mov	arg01, result1
2b104     04 12 0E F2 | 	cmp	arg01, #4 wz
2b108     01 FA 05 A6 |  if_e	mov	result1, #1
2b10c     64 04 90 AD |  if_e	jmp	#LR__4480
2b110     02 12 16 F2 | 	cmp	arg01, #2 wc
2b114     0D FA 05 36 |  if_ae	mov	result1, #13
2b118     58 04 90 3D |  if_ae	jmp	#LR__4480
2b11c     30 24 06 F1 | 	add	local04, #48
2b120     12 29 02 FB | 	rdlong	local06, local04
2b124     04 24 06 F1 | 	add	local04, #4
2b128     12 13 02 F6 | 	mov	arg01, local04
2b12c     34 24 86 F1 | 	sub	local04, #52
2b130     0B 12 06 F1 | 	add	arg01, #11
2b134                 | ' {
2b134                 | ' 
2b134                 | ' 	return *((WORD*)ptr);
2b134     09 FB E1 FA | 	rdword	result1, arg01
2b138     01 00 00 FF 
2b13c     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b140     0D FA 05 56 |  if_ne	mov	result1, #13
2b144     2C 04 90 5D |  if_ne	jmp	#LR__4480
2b148     34 24 06 F1 | 	add	local04, #52
2b14c     12 13 02 F6 | 	mov	arg01, local04
2b150     34 24 86 F1 | 	sub	local04, #52
2b154     16 12 06 F1 | 	add	arg01, #22
2b158                 | ' {
2b158                 | ' 
2b158                 | ' 	return *((WORD*)ptr);
2b158     09 FB E1 FA | 	rdword	result1, arg01
2b15c     FD 2A 0A F6 | 	mov	local07, result1 wz
2b160     18 00 90 5D |  if_ne	jmp	#LR__4472
2b164     34 24 06 F1 | 	add	local04, #52
2b168     12 13 02 F6 | 	mov	arg01, local04
2b16c     34 24 86 F1 | 	sub	local04, #52
2b170     24 12 06 F1 | 	add	arg01, #36
2b174                 | ' {
2b174                 | ' 
2b174                 | ' 	return *((DWORD*)ptr);
2b174     09 FB 01 FB | 	rdlong	result1, arg01
2b178     FD 2A 02 F6 | 	mov	local07, result1
2b17c                 | LR__4472
2b17c     1C 24 06 F1 | 	add	local04, #28
2b180     12 2B 62 FC | 	wrlong	local07, local04
2b184     28 24 06 F1 | 	add	local04, #40
2b188     12 27 C2 FA | 	rdbyte	local05, local04
2b18c     42 24 86 F1 | 	sub	local04, #66
2b190     12 27 42 FC | 	wrbyte	local05, local04
2b194     12 27 C2 FA | 	rdbyte	local05, local04
2b198     02 24 86 F1 | 	sub	local04, #2
2b19c     01 26 0E F2 | 	cmp	local05, #1 wz
2b1a0     02 24 06 51 |  if_ne	add	local04, #2
2b1a4     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b1a8     02 24 86 51 |  if_ne	sub	local04, #2
2b1ac     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b1b0     0D FA 05 56 |  if_ne	mov	result1, #13
2b1b4     BC 03 90 5D |  if_ne	jmp	#LR__4480
2b1b8     02 24 06 F1 | 	add	local04, #2
2b1bc     12 27 C2 FA | 	rdbyte	local05, local04
2b1c0     13 2B 02 FD | 	qmul	local07, local05
2b1c4     3F 24 06 F1 | 	add	local04, #63
2b1c8     12 27 C2 FA | 	rdbyte	local05, local04
2b1cc     37 24 86 F1 | 	sub	local04, #55
2b1d0     12 27 52 FC | 	wrword	local05, local04
2b1d4     12 27 EA FA | 	rdword	local05, local04 wz
2b1d8     0A 24 86 F1 | 	sub	local04, #10
2b1dc     18 2A 62 FD | 	getqx	local07
2b1e0     20 00 90 AD |  if_e	jmp	#LR__4473
2b1e4     0A 24 06 F1 | 	add	local04, #10
2b1e8     12 27 E2 FA | 	rdword	local05, local04
2b1ec     13 23 32 F9 | 	getword	local03, local05, #0
2b1f0     0A 24 86 F1 | 	sub	local04, #10
2b1f4     13 27 32 F9 | 	getword	local05, local05, #0
2b1f8     01 26 86 F1 | 	sub	local05, #1
2b1fc     13 23 CA F7 | 	test	local03, local05 wz
2b200     08 00 90 AD |  if_e	jmp	#LR__4474
2b204                 | LR__4473
2b204     0D FA 05 F6 | 	mov	result1, #13
2b208     68 03 90 FD | 	jmp	#LR__4480
2b20c                 | LR__4474
2b20c     34 24 06 F1 | 	add	local04, #52
2b210     12 13 02 F6 | 	mov	arg01, local04
2b214     11 12 06 F1 | 	add	arg01, #17
2b218                 | ' {
2b218                 | ' 
2b218                 | ' 	return *((WORD*)ptr);
2b218     09 FB E1 FA | 	rdword	result1, arg01
2b21c     2C 24 86 F1 | 	sub	local04, #44
2b220     12 FB 51 FC | 	wrword	result1, local04
2b224     12 27 E2 FA | 	rdword	local05, local04
2b228     08 24 86 F1 | 	sub	local04, #8
2b22c     13 13 52 F6 | 	abs	arg01, local05 wc
2b230     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b234     09 13 8A F6 | 	negc	arg01, arg01 wz
2b238     0D FA 05 56 |  if_ne	mov	result1, #13
2b23c     34 03 90 5D |  if_ne	jmp	#LR__4480
2b240     34 24 06 F1 | 	add	local04, #52
2b244     12 13 02 F6 | 	mov	arg01, local04
2b248     34 24 86 F1 | 	sub	local04, #52
2b24c     13 12 06 F1 | 	add	arg01, #19
2b250                 | ' {
2b250                 | ' 
2b250                 | ' 	return *((WORD*)ptr);
2b250     09 FB E1 FA | 	rdword	result1, arg01
2b254     FD 2C 0A F6 | 	mov	local08, result1 wz
2b258     34 24 06 A1 |  if_e	add	local04, #52
2b25c     12 13 02 A6 |  if_e	mov	arg01, local04
2b260     34 24 86 A1 |  if_e	sub	local04, #52
2b264     20 12 06 A1 |  if_e	add	arg01, #32
2b268                 | ' {
2b268                 | ' 
2b268                 | ' 	return *((DWORD*)ptr);
2b268     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b26c     34 24 06 F1 | 	add	local04, #52
2b270     12 13 02 F6 | 	mov	arg01, local04
2b274     34 24 86 F1 | 	sub	local04, #52
2b278     0E 12 06 F1 | 	add	arg01, #14
2b27c                 | ' {
2b27c                 | ' 
2b27c                 | ' 	return *((WORD*)ptr);
2b27c     09 FB E1 FA | 	rdword	result1, arg01
2b280     FD 12 02 F6 | 	mov	arg01, result1
2b284     09 27 02 F6 | 	mov	local05, arg01
2b288     0F 26 4E F7 | 	zerox	local05, #15 wz
2b28c     0D FA 05 A6 |  if_e	mov	result1, #13
2b290     E0 02 90 AD |  if_e	jmp	#LR__4480
2b294     09 2F 32 F9 | 	getword	local09, arg01, #0
2b298     15 2F 02 F1 | 	add	local09, local07
2b29c     08 24 06 F1 | 	add	local04, #8
2b2a0     12 27 E2 FA | 	rdword	local05, local04
2b2a4     08 24 86 F1 | 	sub	local04, #8
2b2a8     13 27 52 F6 | 	abs	local05, local05 wc
2b2ac     04 26 46 F0 | 	shr	local05, #4
2b2b0     13 2F 82 F3 | 	sumc	local09, local05
2b2b4     17 2D 12 F2 | 	cmp	local08, local09 wc
2b2b8     0D FA 05 C6 |  if_b	mov	result1, #13
2b2bc     B4 02 90 CD |  if_b	jmp	#LR__4480
2b2c0     17 2D 82 F1 | 	sub	local08, local09
2b2c4     0A 24 06 F1 | 	add	local04, #10
2b2c8     12 27 E2 FA | 	rdword	local05, local04
2b2cc     13 2D 12 FD | 	qdiv	local08, local05
2b2d0     0A 24 86 F1 | 	sub	local04, #10
2b2d4     18 26 62 FD | 	getqx	local05
2b2d8     00 26 0E F2 | 	cmp	local05, #0 wz
2b2dc     0D FA 05 A6 |  if_e	mov	result1, #13
2b2e0     90 02 90 AD |  if_e	jmp	#LR__4480
2b2e4     00 30 06 F6 | 	mov	local10, #0
2b2e8     FF FF 07 FF 
2b2ec     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b2f0     03 30 06 C6 |  if_b	mov	local10, #3
2b2f4     7F 00 00 FF 
2b2f8     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b2fc     02 30 06 C6 |  if_b	mov	local10, #2
2b300     07 00 00 FF 
2b304     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b308     01 30 06 C6 |  if_b	mov	local10, #1
2b30c     00 30 0E F2 | 	cmp	local10, #0 wz
2b310     0D FA 05 A6 |  if_e	mov	result1, #13
2b314     5C 02 90 AD |  if_e	jmp	#LR__4480
2b318     02 26 06 F1 | 	add	local05, #2
2b31c     18 24 06 F1 | 	add	local04, #24
2b320     12 27 62 FC | 	wrlong	local05, local04
2b324     08 24 06 F1 | 	add	local04, #8
2b328     12 29 62 FC | 	wrlong	local06, local04
2b32c     14 27 02 F6 | 	mov	local05, local06
2b330     09 13 32 F9 | 	getword	arg01, arg01, #0
2b334     09 27 02 F1 | 	add	local05, arg01
2b338     04 24 06 F1 | 	add	local04, #4
2b33c     12 27 62 FC | 	wrlong	local05, local04
2b340     14 27 02 F6 | 	mov	local05, local06
2b344     17 27 02 F1 | 	add	local05, local09
2b348     08 24 06 F1 | 	add	local04, #8
2b34c     12 27 62 FC | 	wrlong	local05, local04
2b350     2C 24 86 F1 | 	sub	local04, #44
2b354     03 30 0E F2 | 	cmp	local10, #3 wz
2b358     5C 00 90 5D |  if_ne	jmp	#LR__4475
2b35c     34 24 06 F1 | 	add	local04, #52
2b360     12 13 02 F6 | 	mov	arg01, local04
2b364     34 24 86 F1 | 	sub	local04, #52
2b368     2A 12 06 F1 | 	add	arg01, #42
2b36c                 | ' {
2b36c                 | ' 
2b36c                 | ' 	return *((WORD*)ptr);
2b36c     09 FB E9 FA | 	rdword	result1, arg01 wz
2b370     0D FA 05 56 |  if_ne	mov	result1, #13
2b374     FC 01 90 5D |  if_ne	jmp	#LR__4480
2b378     08 24 06 F1 | 	add	local04, #8
2b37c     12 27 EA FA | 	rdword	local05, local04 wz
2b380     08 24 86 F1 | 	sub	local04, #8
2b384     0D FA 05 56 |  if_ne	mov	result1, #13
2b388     E8 01 90 5D |  if_ne	jmp	#LR__4480
2b38c     34 24 06 F1 | 	add	local04, #52
2b390     12 13 02 F6 | 	mov	arg01, local04
2b394     2C 12 06 F1 | 	add	arg01, #44
2b398                 | ' {
2b398                 | ' 
2b398                 | ' 	return *((DWORD*)ptr);
2b398     09 FB 01 FB | 	rdlong	result1, arg01
2b39c     0C 24 86 F1 | 	sub	local04, #12
2b3a0     12 FB 61 FC | 	wrlong	result1, local04
2b3a4     10 24 86 F1 | 	sub	local04, #16
2b3a8     12 33 02 FB | 	rdlong	local11, local04
2b3ac     18 24 86 F1 | 	sub	local04, #24
2b3b0     02 32 66 F0 | 	shl	local11, #2
2b3b4     6C 00 90 FD | 	jmp	#LR__4477
2b3b8                 | LR__4475
2b3b8     08 24 06 F1 | 	add	local04, #8
2b3bc     12 27 EA FA | 	rdword	local05, local04 wz
2b3c0     08 24 86 F1 | 	sub	local04, #8
2b3c4     0D FA 05 A6 |  if_e	mov	result1, #13
2b3c8     A8 01 90 AD |  if_e	jmp	#LR__4480
2b3cc     24 24 06 F1 | 	add	local04, #36
2b3d0     12 27 02 FB | 	rdlong	local05, local04
2b3d4     15 27 02 F1 | 	add	local05, local07
2b3d8     04 24 06 F1 | 	add	local04, #4
2b3dc     12 27 62 FC | 	wrlong	local05, local04
2b3e0     28 24 86 F1 | 	sub	local04, #40
2b3e4     02 30 0E F2 | 	cmp	local10, #2 wz
2b3e8     18 24 06 A1 |  if_e	add	local04, #24
2b3ec     12 27 02 AB |  if_e	rdlong	local05, local04
2b3f0     18 24 86 A1 |  if_e	sub	local04, #24
2b3f4     01 26 66 A0 |  if_e	shl	local05, #1
2b3f8     24 00 90 AD |  if_e	jmp	#LR__4476
2b3fc     18 24 06 F1 | 	add	local04, #24
2b400     12 33 02 FB | 	rdlong	local11, local04
2b404     19 27 02 F6 | 	mov	local05, local11
2b408     01 26 66 F0 | 	shl	local05, #1
2b40c     19 27 02 F1 | 	add	local05, local11
2b410     01 26 46 F0 | 	shr	local05, #1
2b414     18 24 86 F1 | 	sub	local04, #24
2b418     01 32 06 F5 | 	and	local11, #1
2b41c     19 27 02 F1 | 	add	local05, local11
2b420                 | LR__4476
2b420     13 33 02 F6 | 	mov	local11, local05
2b424                 | LR__4477
2b424     FF 33 06 F1 | 	add	local11, #511
2b428     09 32 46 F0 | 	shr	local11, #9
2b42c     1C 24 06 F1 | 	add	local04, #28
2b430     12 17 02 FB | 	rdlong	arg03, local04
2b434     1C 24 86 F1 | 	sub	local04, #28
2b438     19 17 12 F2 | 	cmp	arg03, local11 wc
2b43c     0D FA 05 C6 |  if_b	mov	result1, #13
2b440     30 01 90 CD |  if_b	jmp	#LR__4480
2b444     14 24 06 F1 | 	add	local04, #20
2b448     FF FF FF FF 
2b44c     12 FF 6B FC | 	wrlong	##-1, local04
2b450     04 24 86 F1 | 	sub	local04, #4
2b454     FF FF FF FF 
2b458     12 FF 6B FC | 	wrlong	##-1, local04
2b45c     0C 24 86 F1 | 	sub	local04, #12
2b460     12 01 49 FC | 	wrbyte	#128, local04
2b464     04 24 86 F1 | 	sub	local04, #4
2b468     03 30 0E F2 | 	cmp	local10, #3 wz
2b46c     D0 00 90 5D |  if_ne	jmp	#LR__4479
2b470     34 24 06 F1 | 	add	local04, #52
2b474     12 13 02 F6 | 	mov	arg01, local04
2b478     34 24 86 F1 | 	sub	local04, #52
2b47c     30 12 06 F1 | 	add	arg01, #48
2b480                 | ' {
2b480                 | ' 
2b480                 | ' 	return *((WORD*)ptr);
2b480     09 FB E1 FA | 	rdword	result1, arg01
2b484     FD 26 32 F9 | 	getword	local05, result1, #0
2b488     01 26 0E F2 | 	cmp	local05, #1 wz
2b48c     B0 00 90 5D |  if_ne	jmp	#LR__4479
2b490     01 28 06 F1 | 	add	local06, #1
2b494     12 13 02 F6 | 	mov	arg01, local04
2b498     14 15 02 F6 | 	mov	arg02, local06
2b49c     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b4a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4a4     98 00 90 5D |  if_ne	jmp	#LR__4479
2b4a8     04 24 06 F1 | 	add	local04, #4
2b4ac     12 01 48 FC | 	wrbyte	#0, local04
2b4b0     30 24 06 F1 | 	add	local04, #48
2b4b4     12 13 02 F6 | 	mov	arg01, local04
2b4b8     34 24 86 F1 | 	sub	local04, #52
2b4bc     FE 13 06 F1 | 	add	arg01, #510
2b4c0                 | ' {
2b4c0                 | ' 
2b4c0                 | ' 	return *((WORD*)ptr);
2b4c0     09 FB E1 FA | 	rdword	result1, arg01
2b4c4     FD 26 32 F9 | 	getword	local05, result1, #0
2b4c8     55 00 00 FF 
2b4cc     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b4d0     34 24 06 A1 |  if_e	add	local04, #52
2b4d4     12 13 02 A6 |  if_e	mov	arg01, local04
2b4d8     34 24 86 A1 |  if_e	sub	local04, #52
2b4dc                 | ' {
2b4dc                 | ' 
2b4dc                 | ' 	return *((DWORD*)ptr);
2b4dc     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b4e0     A9 B0 20 AF 
2b4e4     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b4e8     54 00 90 5D |  if_ne	jmp	#LR__4478
2b4ec     34 24 06 F1 | 	add	local04, #52
2b4f0     12 13 02 F6 | 	mov	arg01, local04
2b4f4     34 24 86 F1 | 	sub	local04, #52
2b4f8     E4 13 06 F1 | 	add	arg01, #484
2b4fc                 | ' {
2b4fc                 | ' 
2b4fc                 | ' 	return *((DWORD*)ptr);
2b4fc     09 FB 01 FB | 	rdlong	result1, arg01
2b500     B9 A0 30 FF 
2b504     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b508     34 00 90 5D |  if_ne	jmp	#LR__4478
2b50c     34 24 06 F1 | 	add	local04, #52
2b510     12 13 02 F6 | 	mov	arg01, local04
2b514     E8 13 06 F1 | 	add	arg01, #488
2b518                 | ' {
2b518                 | ' 
2b518                 | ' 	return *((DWORD*)ptr);
2b518     09 FB 01 FB | 	rdlong	result1, arg01
2b51c     20 24 86 F1 | 	sub	local04, #32
2b520     12 FB 61 FC | 	wrlong	result1, local04
2b524     20 24 06 F1 | 	add	local04, #32
2b528     12 13 02 F6 | 	mov	arg01, local04
2b52c     EC 13 06 F1 | 	add	arg01, #492
2b530                 | ' {
2b530                 | ' 
2b530                 | ' 	return *((DWORD*)ptr);
2b530     09 FB 01 FB | 	rdlong	result1, arg01
2b534     24 24 86 F1 | 	sub	local04, #36
2b538     12 FB 61 FC | 	wrlong	result1, local04
2b53c     10 24 86 F1 | 	sub	local04, #16
2b540                 | LR__4478
2b540                 | LR__4479
2b540     12 31 42 FC | 	wrbyte	local10, local04
2b544     04 E4 05 F1 | 	add	objptr, #4
2b548     F2 26 E2 FA | 	rdword	local05, objptr
2b54c     01 26 06 F1 | 	add	local05, #1
2b550     F2 26 52 FC | 	wrword	local05, objptr
2b554     F2 32 E2 FA | 	rdword	local11, objptr
2b558     06 24 06 F1 | 	add	local04, #6
2b55c     12 33 52 FC | 	wrword	local11, local04
2b560     04 E4 05 F1 | 	add	objptr, #4
2b564     06 24 06 F1 | 	add	local04, #6
2b568     12 E5 61 FC | 	wrlong	objptr, local04
2b56c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b56c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b56c                 | ' 			{
2b56c                 | ' 
2b56c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b56c                 | ' 
2b56c                 | ' 
2b56c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b56c                 | ' 
2b56c                 | ' 			}
2b56c                 | ' 		}
2b56c                 | ' 
2b56c                 | ' 
2b56c                 | ' 	}
2b56c                 | ' 
2b56c                 | ' 	fs->fs_type = (BYTE)fmt;
2b56c                 | ' 	fs->id = ++Fsid;
2b56c                 | ' 
2b56c                 | ' 	fs->lfnbuf = LfnBuf;
2b56c                 | ' #line 3567 "ff.c"
2b56c                 | ' 	return FR_OK;
2b56c     00 FA 05 F6 | 	mov	result1, #0
2b570     08 E4 85 F1 | 	sub	objptr, #8
2b574                 | LR__4480
2b574     A7 F0 03 F6 | 	mov	ptra, fp
2b578     B2 00 A0 FD | 	call	#popregs_
2b57c                 | _fatfs_cc_mount_volume_ret
2b57c     2D 00 64 FD | 	ret
2b580                 | 
2b580                 | _fatfs_cc_validate
2b580     09 01 0A F6 | 	mov	_var01, arg01 wz
2b584     09 02 06 F6 | 	mov	_var02, #9
2b588     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b58c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b590     50 00 90 AD |  if_e	jmp	#LR__4490
2b594     04 00 06 F1 | 	add	_var01, #4
2b598     00 07 E2 FA | 	rdword	_var04, _var01
2b59c     04 00 86 F1 | 	sub	_var01, #4
2b5a0     00 13 02 FB | 	rdlong	arg01, _var01
2b5a4     06 12 06 F1 | 	add	arg01, #6
2b5a8     09 FB E1 FA | 	rdword	result1, arg01
2b5ac     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b5b0     30 00 90 5D |  if_ne	jmp	#LR__4490
2b5b4     00 07 02 FB | 	rdlong	_var04, _var01
2b5b8     01 06 06 F1 | 	add	_var04, #1
2b5bc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b5c0     01 FA 05 56 |  if_ne	mov	result1, #1
2b5c4                 | ' 
2b5c4                 | ' 	return Stat;
2b5c4     01 00 00 AF 
2b5c8     20 E4 05 A1 |  if_e	add	objptr, ##544
2b5cc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b5d0     01 00 00 AF 
2b5d4     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b5d8     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b5dc     01 04 CE F7 | 	test	_var03, #1 wz
2b5e0     00 02 06 A6 |  if_e	mov	_var02, #0
2b5e4                 | LR__4490
2b5e4     00 02 0E F2 | 	cmp	_var02, #0 wz
2b5e8     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b5ec     00 04 06 56 |  if_ne	mov	_var03, #0
2b5f0     0A 05 62 FC | 	wrlong	_var03, arg02
2b5f4                 | ' 			res = FR_OK;
2b5f4                 | ' 		}
2b5f4                 | ' 
2b5f4                 | ' 	}
2b5f4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b5f4                 | ' 	return res;
2b5f4     01 FB 01 F6 | 	mov	result1, _var02
2b5f8                 | _fatfs_cc_validate_ret
2b5f8     2D 00 64 FD | 	ret
2b5fc                 | 
2b5fc                 | _fatfs_cc_f_mount
2b5fc     01 4A 05 F6 | 	mov	COUNT_, #1
2b600     A8 00 A0 FD | 	call	#pushregs_
2b604     20 F0 07 F1 | 	add	ptra, #32
2b608     04 4E 05 F1 | 	add	fp, #4
2b60c     A7 12 62 FC | 	wrlong	arg01, fp
2b610     04 4E 05 F1 | 	add	fp, #4
2b614     A7 14 62 FC | 	wrlong	arg02, fp
2b618     04 4E 05 F1 | 	add	fp, #4
2b61c     A7 16 42 FC | 	wrbyte	arg03, fp
2b620     04 4E 85 F1 | 	sub	fp, #4
2b624     A7 16 02 FB | 	rdlong	arg03, fp
2b628     14 4E 05 F1 | 	add	fp, #20
2b62c     A7 16 62 FC | 	wrlong	arg03, fp
2b630     A7 12 02 F6 | 	mov	arg01, fp
2b634     1C 4E 85 F1 | 	sub	fp, #28
2b638     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b63c     14 4E 05 F1 | 	add	fp, #20
2b640     A7 FA 61 FC | 	wrlong	result1, fp
2b644     14 4E 85 F1 | 	sub	fp, #20
2b648     00 FA 55 F2 | 	cmps	result1, #0 wc
2b64c     0B FA 05 C6 |  if_b	mov	result1, #11
2b650     C0 00 90 CD |  if_b	jmp	#LR__4501
2b654     14 4E 05 F1 | 	add	fp, #20
2b658     A7 16 02 FB | 	rdlong	arg03, fp
2b65c     02 16 66 F0 | 	shl	arg03, #2
2b660     F2 16 02 F1 | 	add	arg03, objptr
2b664     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b668     04 4E 85 F1 | 	sub	fp, #4
2b66c     A7 16 62 FC | 	wrlong	arg03, fp
2b670     10 4E 85 F1 | 	sub	fp, #16
2b674     28 00 90 AD |  if_e	jmp	#LR__4500
2b678     10 4E 05 F1 | 	add	fp, #16
2b67c     A7 16 02 FB | 	rdlong	arg03, fp
2b680     10 4E 85 F1 | 	sub	fp, #16
2b684     01 16 06 F1 | 	add	arg03, #1
2b688     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b68c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b690     10 4E 05 F1 | 	add	fp, #16
2b694     A7 16 02 FB | 	rdlong	arg03, fp
2b698     10 4E 85 F1 | 	sub	fp, #16
2b69c     0B 01 48 FC | 	wrbyte	#0, arg03
2b6a0                 | LR__4500
2b6a0     04 4E 05 F1 | 	add	fp, #4
2b6a4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b6a8     04 4E 85 F1 | 	sub	fp, #4
2b6ac     04 4E 05 51 |  if_ne	add	fp, #4
2b6b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b6b4     04 4E 85 51 |  if_ne	sub	fp, #4
2b6b8     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b6bc     14 4E 05 F1 | 	add	fp, #20
2b6c0     A7 1E 02 FB | 	rdlong	local01, fp
2b6c4     02 1E 66 F0 | 	shl	local01, #2
2b6c8     F2 1E 02 F1 | 	add	local01, objptr
2b6cc     10 4E 85 F1 | 	sub	fp, #16
2b6d0     A7 16 02 FB | 	rdlong	arg03, fp
2b6d4     0F 17 62 FC | 	wrlong	arg03, local01
2b6d8     08 4E 05 F1 | 	add	fp, #8
2b6dc     A7 1E CA FA | 	rdbyte	local01, fp wz
2b6e0     0C 4E 85 F1 | 	sub	fp, #12
2b6e4     00 FA 05 A6 |  if_e	mov	result1, #0
2b6e8     28 00 90 AD |  if_e	jmp	#LR__4501
2b6ec     08 4E 05 F1 | 	add	fp, #8
2b6f0     A7 12 02 F6 | 	mov	arg01, fp
2b6f4     04 4E 85 F1 | 	sub	fp, #4
2b6f8     A7 14 02 F6 | 	mov	arg02, fp
2b6fc     04 4E 85 F1 | 	sub	fp, #4
2b700     00 16 06 F6 | 	mov	arg03, #0
2b704     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b708     18 4E 05 F1 | 	add	fp, #24
2b70c     A7 FA 61 FC | 	wrlong	result1, fp
2b710                 | ' 
2b710                 | ' 	res = mount_volume(&path, &fs, 0);
2b710                 | ' 	return res ;
2b710     18 4E 85 F1 | 	sub	fp, #24
2b714                 | LR__4501
2b714     A7 F0 03 F6 | 	mov	ptra, fp
2b718     B2 00 A0 FD | 	call	#popregs_
2b71c                 | _fatfs_cc_f_mount_ret
2b71c     2D 00 64 FD | 	ret
2b720                 | 
2b720                 | _fatfs_cc_f_open
2b720     02 4A 05 F6 | 	mov	COUNT_, #2
2b724     A8 00 A0 FD | 	call	#pushregs_
2b728     60 F0 07 F1 | 	add	ptra, #96
2b72c     04 4E 05 F1 | 	add	fp, #4
2b730     A7 12 62 FC | 	wrlong	arg01, fp
2b734     04 4E 05 F1 | 	add	fp, #4
2b738     A7 14 62 FC | 	wrlong	arg02, fp
2b73c     04 4E 05 F1 | 	add	fp, #4
2b740     A7 16 42 FC | 	wrbyte	arg03, fp
2b744     08 4E 85 F1 | 	sub	fp, #8
2b748     A7 18 0A FB | 	rdlong	arg04, fp wz
2b74c     04 4E 85 F1 | 	sub	fp, #4
2b750     09 FA 05 A6 |  if_e	mov	result1, #9
2b754     98 06 90 AD |  if_e	jmp	#LR__4527
2b758     0C 4E 05 F1 | 	add	fp, #12
2b75c     A7 18 C2 FA | 	rdbyte	arg04, fp
2b760     3F 18 06 F5 | 	and	arg04, #63
2b764     A7 18 42 FC | 	wrbyte	arg04, fp
2b768     04 4E 85 F1 | 	sub	fp, #4
2b76c     A7 12 02 F6 | 	mov	arg01, fp
2b770     3C 4E 05 F1 | 	add	fp, #60
2b774     A7 14 02 F6 | 	mov	arg02, fp
2b778     38 4E 85 F1 | 	sub	fp, #56
2b77c     A7 16 C2 FA | 	rdbyte	arg03, fp
2b780     0C 4E 85 F1 | 	sub	fp, #12
2b784     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b788     10 4E 05 F1 | 	add	fp, #16
2b78c     A7 FA 61 FC | 	wrlong	result1, fp
2b790     10 4E 85 F1 | 	sub	fp, #16
2b794     00 FA 0D F2 | 	cmp	result1, #0 wz
2b798     2C 06 90 5D |  if_ne	jmp	#LR__4526
2b79c     44 4E 05 F1 | 	add	fp, #68
2b7a0     A7 18 02 FB | 	rdlong	arg04, fp
2b7a4     30 4E 85 F1 | 	sub	fp, #48
2b7a8     A7 18 62 FC | 	wrlong	arg04, fp
2b7ac     A7 12 02 F6 | 	mov	arg01, fp
2b7b0     0C 4E 85 F1 | 	sub	fp, #12
2b7b4     A7 1E 02 FB | 	rdlong	local01, fp
2b7b8     08 4E 85 F1 | 	sub	fp, #8
2b7bc     0F 15 02 F6 | 	mov	arg02, local01
2b7c0     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b7c4     10 4E 05 F1 | 	add	fp, #16
2b7c8     A7 FA 61 FC | 	wrlong	result1, fp
2b7cc     10 4E 85 F1 | 	sub	fp, #16
2b7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7d4     1C 00 90 5D |  if_ne	jmp	#LR__4510
2b7d8     3F 4E 05 F1 | 	add	fp, #63
2b7dc     A7 18 C2 FA | 	rdbyte	arg04, fp
2b7e0     3F 4E 85 F1 | 	sub	fp, #63
2b7e4     80 18 CE F7 | 	test	arg04, #128 wz
2b7e8     10 4E 05 51 |  if_ne	add	fp, #16
2b7ec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b7f0     10 4E 85 51 |  if_ne	sub	fp, #16
2b7f4                 | LR__4510
2b7f4     0C 4E 05 F1 | 	add	fp, #12
2b7f8     A7 18 C2 FA | 	rdbyte	arg04, fp
2b7fc     0C 4E 85 F1 | 	sub	fp, #12
2b800     1C 18 CE F7 | 	test	arg04, #28 wz
2b804     F0 01 90 AD |  if_e	jmp	#LR__4515
2b808     10 4E 05 F1 | 	add	fp, #16
2b80c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b810     10 4E 85 F1 | 	sub	fp, #16
2b814     48 00 90 AD |  if_e	jmp	#LR__4512
2b818     10 4E 05 F1 | 	add	fp, #16
2b81c     A7 18 02 FB | 	rdlong	arg04, fp
2b820     10 4E 85 F1 | 	sub	fp, #16
2b824     04 18 0E F2 | 	cmp	arg04, #4 wz
2b828     1C 00 90 5D |  if_ne	jmp	#LR__4511
2b82c     14 4E 05 F1 | 	add	fp, #20
2b830     A7 12 02 F6 | 	mov	arg01, fp
2b834     14 4E 85 F1 | 	sub	fp, #20
2b838     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b83c     10 4E 05 F1 | 	add	fp, #16
2b840     A7 FA 61 FC | 	wrlong	result1, fp
2b844     10 4E 85 F1 | 	sub	fp, #16
2b848                 | LR__4511
2b848     0C 4E 05 F1 | 	add	fp, #12
2b84c     A7 1E C2 FA | 	rdbyte	local01, fp
2b850     08 1E 46 F5 | 	or	local01, #8
2b854     A7 1E 42 FC | 	wrbyte	local01, fp
2b858     0C 4E 85 F1 | 	sub	fp, #12
2b85c     3C 00 90 FD | 	jmp	#LR__4514
2b860                 | LR__4512
2b860     1A 4E 05 F1 | 	add	fp, #26
2b864     A7 1E C2 FA | 	rdbyte	local01, fp
2b868     1A 4E 85 F1 | 	sub	fp, #26
2b86c     11 1E CE F7 | 	test	local01, #17 wz
2b870     10 4E 05 51 |  if_ne	add	fp, #16
2b874     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b878     10 4E 85 51 |  if_ne	sub	fp, #16
2b87c     1C 00 90 5D |  if_ne	jmp	#LR__4513
2b880     0C 4E 05 F1 | 	add	fp, #12
2b884     A7 1E C2 FA | 	rdbyte	local01, fp
2b888     0C 4E 85 F1 | 	sub	fp, #12
2b88c     04 1E CE F7 | 	test	local01, #4 wz
2b890     10 4E 05 51 |  if_ne	add	fp, #16
2b894     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b898     10 4E 85 51 |  if_ne	sub	fp, #16
2b89c                 | LR__4513
2b89c                 | LR__4514
2b89c     10 4E 05 F1 | 	add	fp, #16
2b8a0     A7 1E 0A FB | 	rdlong	local01, fp wz
2b8a4     10 4E 85 F1 | 	sub	fp, #16
2b8a8     A8 01 90 5D |  if_ne	jmp	#LR__4518
2b8ac     0C 4E 05 F1 | 	add	fp, #12
2b8b0     A7 1E C2 FA | 	rdbyte	local01, fp
2b8b4     0C 4E 85 F1 | 	sub	fp, #12
2b8b8     08 1E CE F7 | 	test	local01, #8 wz
2b8bc     94 01 90 AD |  if_e	jmp	#LR__4518
2b8c0     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b8c4     54 4E 05 F1 | 	add	fp, #84
2b8c8     A7 FA 61 FC | 	wrlong	result1, fp
2b8cc     24 4E 85 F1 | 	sub	fp, #36
2b8d0     A7 12 02 FB | 	rdlong	arg01, fp
2b8d4     0E 12 06 F1 | 	add	arg01, #14
2b8d8     09 FB 61 FC | 	wrlong	result1, arg01
2b8dc     A7 12 02 FB | 	rdlong	arg01, fp
2b8e0     16 12 06 F1 | 	add	arg01, #22
2b8e4     24 4E 05 F1 | 	add	fp, #36
2b8e8     A7 14 02 FB | 	rdlong	arg02, fp
2b8ec     09 15 62 FC | 	wrlong	arg02, arg01
2b8f0     10 4E 85 F1 | 	sub	fp, #16
2b8f4     A7 12 02 FB | 	rdlong	arg01, fp
2b8f8     14 4E 85 F1 | 	sub	fp, #20
2b8fc     A7 14 02 FB | 	rdlong	arg02, fp
2b900     30 4E 85 F1 | 	sub	fp, #48
2b904     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b908     48 4E 05 F1 | 	add	fp, #72
2b90c     A7 FA 61 FC | 	wrlong	result1, fp
2b910     18 4E 85 F1 | 	sub	fp, #24
2b914     A7 1E 02 FB | 	rdlong	local01, fp
2b918     0B 1E 06 F1 | 	add	local01, #11
2b91c     0F 41 48 FC | 	wrbyte	#32, local01
2b920     14 4E 05 F1 | 	add	fp, #20
2b924     A7 12 02 FB | 	rdlong	arg01, fp
2b928     14 4E 85 F1 | 	sub	fp, #20
2b92c     A7 14 02 FB | 	rdlong	arg02, fp
2b930     30 4E 85 F1 | 	sub	fp, #48
2b934     00 16 06 F6 | 	mov	arg03, #0
2b938     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b93c     30 4E 05 F1 | 	add	fp, #48
2b940     A7 12 02 FB | 	rdlong	arg01, fp
2b944     1C 12 06 F1 | 	add	arg01, #28
2b948     09 01 68 FC | 	wrlong	#0, arg01
2b94c     14 4E 05 F1 | 	add	fp, #20
2b950     A7 1E 02 FB | 	rdlong	local01, fp
2b954     03 1E 06 F1 | 	add	local01, #3
2b958     0F 03 48 FC | 	wrbyte	#1, local01
2b95c     04 4E 05 F1 | 	add	fp, #4
2b960     A7 1E 0A FB | 	rdlong	local01, fp wz
2b964     48 4E 85 F1 | 	sub	fp, #72
2b968     E8 00 90 AD |  if_e	jmp	#LR__4518
2b96c     44 4E 05 F1 | 	add	fp, #68
2b970     A7 1E 02 FB | 	rdlong	local01, fp
2b974     30 1E 06 F1 | 	add	local01, #48
2b978     0F 1F 02 FB | 	rdlong	local01, local01
2b97c     14 4E 05 F1 | 	add	fp, #20
2b980     A7 1E 62 FC | 	wrlong	local01, fp
2b984     44 4E 85 F1 | 	sub	fp, #68
2b988     A7 12 02 F6 | 	mov	arg01, fp
2b98c     34 4E 05 F1 | 	add	fp, #52
2b990     A7 14 02 FB | 	rdlong	arg02, fp
2b994     48 4E 85 F1 | 	sub	fp, #72
2b998     00 16 06 F6 | 	mov	arg03, #0
2b99c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2b9a0     10 4E 05 F1 | 	add	fp, #16
2b9a4     A7 FA 61 FC | 	wrlong	result1, fp
2b9a8     10 4E 85 F1 | 	sub	fp, #16
2b9ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9b0     A0 00 90 5D |  if_ne	jmp	#LR__4518
2b9b4     44 4E 05 F1 | 	add	fp, #68
2b9b8     A7 12 02 FB | 	rdlong	arg01, fp
2b9bc     14 4E 05 F1 | 	add	fp, #20
2b9c0     A7 14 02 FB | 	rdlong	arg02, fp
2b9c4     58 4E 85 F1 | 	sub	fp, #88
2b9c8     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2b9cc     10 4E 05 F1 | 	add	fp, #16
2b9d0     A7 FA 61 FC | 	wrlong	result1, fp
2b9d4     34 4E 05 F1 | 	add	fp, #52
2b9d8     A7 18 02 FB | 	rdlong	arg04, fp
2b9dc     04 4E 05 F1 | 	add	fp, #4
2b9e0     A7 1E 02 FB | 	rdlong	local01, fp
2b9e4     48 4E 85 F1 | 	sub	fp, #72
2b9e8     01 1E 86 F1 | 	sub	local01, #1
2b9ec     10 18 06 F1 | 	add	arg04, #16
2b9f0     0C 1F 62 FC | 	wrlong	local01, arg04
2b9f4     5C 00 90 FD | 	jmp	#LR__4518
2b9f8                 | LR__4515
2b9f8     10 4E 05 F1 | 	add	fp, #16
2b9fc     A7 18 0A FB | 	rdlong	arg04, fp wz
2ba00     10 4E 85 F1 | 	sub	fp, #16
2ba04     4C 00 90 5D |  if_ne	jmp	#LR__4517
2ba08     1A 4E 05 F1 | 	add	fp, #26
2ba0c     A7 18 C2 FA | 	rdbyte	arg04, fp
2ba10     1A 4E 85 F1 | 	sub	fp, #26
2ba14     10 18 CE F7 | 	test	arg04, #16 wz
2ba18     10 4E 05 51 |  if_ne	add	fp, #16
2ba1c     A7 08 68 5C |  if_ne	wrlong	#4, fp
2ba20     10 4E 85 51 |  if_ne	sub	fp, #16
2ba24     2C 00 90 5D |  if_ne	jmp	#LR__4516
2ba28     0C 4E 05 F1 | 	add	fp, #12
2ba2c     A7 18 C2 FA | 	rdbyte	arg04, fp
2ba30     0C 4E 85 F1 | 	sub	fp, #12
2ba34     02 18 CE F7 | 	test	arg04, #2 wz
2ba38     1A 4E 05 51 |  if_ne	add	fp, #26
2ba3c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2ba40     1A 4E 85 51 |  if_ne	sub	fp, #26
2ba44     01 1E CE 57 |  if_ne	test	local01, #1 wz
2ba48     10 4E 05 51 |  if_ne	add	fp, #16
2ba4c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ba50     10 4E 85 51 |  if_ne	sub	fp, #16
2ba54                 | LR__4516
2ba54                 | LR__4517
2ba54                 | LR__4518
2ba54     10 4E 05 F1 | 	add	fp, #16
2ba58     A7 1E 0A FB | 	rdlong	local01, fp wz
2ba5c     10 4E 85 F1 | 	sub	fp, #16
2ba60     60 00 90 5D |  if_ne	jmp	#LR__4519
2ba64     0C 4E 05 F1 | 	add	fp, #12
2ba68     A7 20 C2 FA | 	rdbyte	local02, fp
2ba6c     0C 4E 85 F1 | 	sub	fp, #12
2ba70     08 20 CE F7 | 	test	local02, #8 wz
2ba74     0C 4E 05 51 |  if_ne	add	fp, #12
2ba78     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2ba7c     40 20 46 55 |  if_ne	or	local02, #64
2ba80     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2ba84     0C 4E 85 51 |  if_ne	sub	fp, #12
2ba88     04 4E 05 F1 | 	add	fp, #4
2ba8c     A7 20 02 FB | 	rdlong	local02, fp
2ba90     40 4E 05 F1 | 	add	fp, #64
2ba94     A7 1E 02 FB | 	rdlong	local01, fp
2ba98     30 1E 06 F1 | 	add	local01, #48
2ba9c     0F 1F 02 FB | 	rdlong	local01, local01
2baa0     20 20 06 F1 | 	add	local02, #32
2baa4     10 1F 62 FC | 	wrlong	local01, local02
2baa8     40 4E 85 F1 | 	sub	fp, #64
2baac     A7 20 02 FB | 	rdlong	local02, fp
2bab0     2C 4E 05 F1 | 	add	fp, #44
2bab4     A7 1E 02 FB | 	rdlong	local01, fp
2bab8     30 4E 85 F1 | 	sub	fp, #48
2babc     24 20 06 F1 | 	add	local02, #36
2bac0     10 1F 62 FC | 	wrlong	local01, local02
2bac4                 | LR__4519
2bac4     10 4E 05 F1 | 	add	fp, #16
2bac8     A7 20 0A FB | 	rdlong	local02, fp wz
2bacc     10 4E 85 F1 | 	sub	fp, #16
2bad0     F4 02 90 5D |  if_ne	jmp	#LR__4525
2bad4     04 4E 05 F1 | 	add	fp, #4
2bad8     A7 20 02 FB | 	rdlong	local02, fp
2badc     40 4E 05 F1 | 	add	fp, #64
2bae0     A7 12 02 FB | 	rdlong	arg01, fp
2bae4     14 4E 85 F1 | 	sub	fp, #20
2bae8     A7 14 02 FB | 	rdlong	arg02, fp
2baec     30 4E 85 F1 | 	sub	fp, #48
2baf0     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2baf4     08 20 06 F1 | 	add	local02, #8
2baf8     10 FB 61 FC | 	wrlong	result1, local02
2bafc     04 4E 05 F1 | 	add	fp, #4
2bb00     A7 20 02 FB | 	rdlong	local02, fp
2bb04     2C 4E 05 F1 | 	add	fp, #44
2bb08     A7 12 02 FB | 	rdlong	arg01, fp
2bb0c     1C 12 06 F1 | 	add	arg01, #28
2bb10                 | ' {
2bb10                 | ' 
2bb10                 | ' 	return *((DWORD*)ptr);
2bb10     09 FB 01 FB | 	rdlong	result1, arg01
2bb14     0C 20 06 F1 | 	add	local02, #12
2bb18     10 FB 61 FC | 	wrlong	result1, local02
2bb1c     2C 4E 85 F1 | 	sub	fp, #44
2bb20     A7 20 02 FB | 	rdlong	local02, fp
2bb24     40 4E 05 F1 | 	add	fp, #64
2bb28     A7 1E 02 FB | 	rdlong	local01, fp
2bb2c     10 1F 62 FC | 	wrlong	local01, local02
2bb30     40 4E 85 F1 | 	sub	fp, #64
2bb34     A7 20 02 FB | 	rdlong	local02, fp
2bb38     40 4E 05 F1 | 	add	fp, #64
2bb3c     A7 1E 02 FB | 	rdlong	local01, fp
2bb40     06 1E 06 F1 | 	add	local01, #6
2bb44     0F 1F E2 FA | 	rdword	local01, local01
2bb48     04 20 06 F1 | 	add	local02, #4
2bb4c     10 1F 52 FC | 	wrword	local01, local02
2bb50     40 4E 85 F1 | 	sub	fp, #64
2bb54     A7 20 02 FB | 	rdlong	local02, fp
2bb58     08 4E 05 F1 | 	add	fp, #8
2bb5c     A7 1E C2 FA | 	rdbyte	local01, fp
2bb60     10 20 06 F1 | 	add	local02, #16
2bb64     10 1F 42 FC | 	wrbyte	local01, local02
2bb68     08 4E 85 F1 | 	sub	fp, #8
2bb6c     A7 20 02 FB | 	rdlong	local02, fp
2bb70     11 20 06 F1 | 	add	local02, #17
2bb74     10 01 48 FC | 	wrbyte	#0, local02
2bb78     A7 20 02 FB | 	rdlong	local02, fp
2bb7c     1C 20 06 F1 | 	add	local02, #28
2bb80     10 01 68 FC | 	wrlong	#0, local02
2bb84     A7 20 02 FB | 	rdlong	local02, fp
2bb88     14 20 06 F1 | 	add	local02, #20
2bb8c     10 01 68 FC | 	wrlong	#0, local02
2bb90     A7 12 02 FB | 	rdlong	arg01, fp
2bb94     04 4E 85 F1 | 	sub	fp, #4
2bb98     28 12 06 F1 | 	add	arg01, #40
2bb9c     00 14 06 F6 | 	mov	arg02, #0
2bba0     09 16 C6 F9 | 	decod	arg03, #9
2bba4     98 00 A0 FD | 	call	#\builtin_bytefill_
2bba8     0C 4E 05 F1 | 	add	fp, #12
2bbac     A7 20 C2 FA | 	rdbyte	local02, fp
2bbb0     0C 4E 85 F1 | 	sub	fp, #12
2bbb4     20 20 CE F7 | 	test	local02, #32 wz
2bbb8     0C 02 90 AD |  if_e	jmp	#LR__4524
2bbbc     04 4E 05 F1 | 	add	fp, #4
2bbc0     A7 1E 02 FB | 	rdlong	local01, fp
2bbc4     04 4E 85 F1 | 	sub	fp, #4
2bbc8     0C 1E 06 F1 | 	add	local01, #12
2bbcc     0F 21 02 FB | 	rdlong	local02, local01
2bbd0     01 20 16 F2 | 	cmp	local02, #1 wc
2bbd4     F0 01 90 CD |  if_b	jmp	#LR__4524
2bbd8     04 4E 05 F1 | 	add	fp, #4
2bbdc     A7 1E 02 FB | 	rdlong	local01, fp
2bbe0     0F 21 02 F6 | 	mov	local02, local01
2bbe4     0C 1E 06 F1 | 	add	local01, #12
2bbe8     0F 1F 02 FB | 	rdlong	local01, local01
2bbec     14 20 06 F1 | 	add	local02, #20
2bbf0     10 1F 62 FC | 	wrlong	local01, local02
2bbf4     40 4E 05 F1 | 	add	fp, #64
2bbf8     A7 20 02 FB | 	rdlong	local02, fp
2bbfc     0A 20 06 F1 | 	add	local02, #10
2bc00     10 21 E2 FA | 	rdword	local02, local02
2bc04     09 20 66 F0 | 	shl	local02, #9
2bc08     08 4E 05 F1 | 	add	fp, #8
2bc0c     A7 20 62 FC | 	wrlong	local02, fp
2bc10     48 4E 85 F1 | 	sub	fp, #72
2bc14     A7 20 02 FB | 	rdlong	local02, fp
2bc18     08 20 06 F1 | 	add	local02, #8
2bc1c     10 1F 02 FB | 	rdlong	local01, local02
2bc20     4C 4E 05 F1 | 	add	fp, #76
2bc24     A7 1E 62 FC | 	wrlong	local01, fp
2bc28                 | ' 				fp->fptr = fp->obj.objsize;
2bc28                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bc28                 | ' 				clst = fp->obj.sclust;
2bc28                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bc28     4C 4E 85 F1 | 	sub	fp, #76
2bc2c     A7 20 02 FB | 	rdlong	local02, fp
2bc30     0C 20 06 F1 | 	add	local02, #12
2bc34     10 1F 02 FB | 	rdlong	local01, local02
2bc38     58 4E 05 F1 | 	add	fp, #88
2bc3c     A7 1E 62 FC | 	wrlong	local01, fp
2bc40     5C 4E 85 F1 | 	sub	fp, #92
2bc44                 | LR__4520
2bc44     10 4E 05 F1 | 	add	fp, #16
2bc48     A7 20 0A FB | 	rdlong	local02, fp wz
2bc4c     10 4E 85 F1 | 	sub	fp, #16
2bc50     94 00 90 5D |  if_ne	jmp	#LR__4521
2bc54     5C 4E 05 F1 | 	add	fp, #92
2bc58     A7 20 02 FB | 	rdlong	local02, fp
2bc5c     10 4E 85 F1 | 	sub	fp, #16
2bc60     A7 1E 02 FB | 	rdlong	local01, fp
2bc64     4C 4E 85 F1 | 	sub	fp, #76
2bc68     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bc6c     78 00 90 ED |  if_be	jmp	#LR__4521
2bc70     04 4E 05 F1 | 	add	fp, #4
2bc74     A7 12 02 FB | 	rdlong	arg01, fp
2bc78     4C 4E 05 F1 | 	add	fp, #76
2bc7c     A7 14 02 FB | 	rdlong	arg02, fp
2bc80     50 4E 85 F1 | 	sub	fp, #80
2bc84     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bc88     50 4E 05 F1 | 	add	fp, #80
2bc8c     A7 FA 61 FC | 	wrlong	result1, fp
2bc90     50 4E 85 F1 | 	sub	fp, #80
2bc94     02 FA 15 F2 | 	cmp	result1, #2 wc
2bc98     10 4E 05 C1 |  if_b	add	fp, #16
2bc9c     A7 04 68 CC |  if_b	wrlong	#2, fp
2bca0     10 4E 85 C1 |  if_b	sub	fp, #16
2bca4     50 4E 05 F1 | 	add	fp, #80
2bca8     A7 20 02 FB | 	rdlong	local02, fp
2bcac     50 4E 85 F1 | 	sub	fp, #80
2bcb0     FF FF 7F FF 
2bcb4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bcb8     10 4E 05 A1 |  if_e	add	fp, #16
2bcbc     A7 02 68 AC |  if_e	wrlong	#1, fp
2bcc0     10 4E 85 A1 |  if_e	sub	fp, #16
2bcc4     5C 4E 05 F1 | 	add	fp, #92
2bcc8     A7 20 02 FB | 	rdlong	local02, fp
2bccc     10 4E 85 F1 | 	sub	fp, #16
2bcd0     A7 1E 02 FB | 	rdlong	local01, fp
2bcd4     0F 21 82 F1 | 	sub	local02, local01
2bcd8     10 4E 05 F1 | 	add	fp, #16
2bcdc     A7 20 62 FC | 	wrlong	local02, fp
2bce0     5C 4E 85 F1 | 	sub	fp, #92
2bce4     5C FF 9F FD | 	jmp	#LR__4520
2bce8                 | LR__4521
2bce8     04 4E 05 F1 | 	add	fp, #4
2bcec     A7 20 02 FB | 	rdlong	local02, fp
2bcf0     4C 4E 05 F1 | 	add	fp, #76
2bcf4     A7 1E 02 FB | 	rdlong	local01, fp
2bcf8     18 20 06 F1 | 	add	local02, #24
2bcfc     10 1F 62 FC | 	wrlong	local01, local02
2bd00     40 4E 85 F1 | 	sub	fp, #64
2bd04     A7 20 0A FB | 	rdlong	local02, fp wz
2bd08     10 4E 85 F1 | 	sub	fp, #16
2bd0c     B8 00 90 5D |  if_ne	jmp	#LR__4523
2bd10     5C 4E 05 F1 | 	add	fp, #92
2bd14     A7 1E 02 FB | 	rdlong	local01, fp
2bd18     5C 4E 85 F1 | 	sub	fp, #92
2bd1c     FF 1F CE F7 | 	test	local01, #511 wz
2bd20     A4 00 90 AD |  if_e	jmp	#LR__4523
2bd24     44 4E 05 F1 | 	add	fp, #68
2bd28     A7 12 02 FB | 	rdlong	arg01, fp
2bd2c     0C 4E 05 F1 | 	add	fp, #12
2bd30     A7 14 02 FB | 	rdlong	arg02, fp
2bd34     50 4E 85 F1 | 	sub	fp, #80
2bd38     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bd3c     58 4E 05 F1 | 	add	fp, #88
2bd40     A7 FA 61 FC | 	wrlong	result1, fp
2bd44     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd48     58 4E 85 F1 | 	sub	fp, #88
2bd4c     10 4E 05 A1 |  if_e	add	fp, #16
2bd50     A7 04 68 AC |  if_e	wrlong	#2, fp
2bd54     10 4E 85 A1 |  if_e	sub	fp, #16
2bd58     6C 00 90 AD |  if_e	jmp	#LR__4522
2bd5c     04 4E 05 F1 | 	add	fp, #4
2bd60     A7 20 02 FB | 	rdlong	local02, fp
2bd64     54 4E 05 F1 | 	add	fp, #84
2bd68     A7 1E 02 FB | 	rdlong	local01, fp
2bd6c     04 4E 05 F1 | 	add	fp, #4
2bd70     A7 18 02 FB | 	rdlong	arg04, fp
2bd74     09 18 46 F0 | 	shr	arg04, #9
2bd78     0C 1F 02 F1 | 	add	local01, arg04
2bd7c     1C 20 06 F1 | 	add	local02, #28
2bd80     10 1F 62 FC | 	wrlong	local01, local02
2bd84     18 4E 85 F1 | 	sub	fp, #24
2bd88     A7 20 02 FB | 	rdlong	local02, fp
2bd8c     01 20 06 F1 | 	add	local02, #1
2bd90     10 13 C2 FA | 	rdbyte	arg01, local02
2bd94     40 4E 85 F1 | 	sub	fp, #64
2bd98     A7 20 02 FB | 	rdlong	local02, fp
2bd9c     10 15 02 F6 | 	mov	arg02, local02
2bda0     28 14 06 F1 | 	add	arg02, #40
2bda4     04 4E 85 F1 | 	sub	fp, #4
2bda8     1C 20 06 F1 | 	add	local02, #28
2bdac     10 17 02 FB | 	rdlong	arg03, local02
2bdb0     01 18 06 F6 | 	mov	arg04, #1
2bdb4     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bdb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdbc     10 4E 05 51 |  if_ne	add	fp, #16
2bdc0     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bdc4     10 4E 85 51 |  if_ne	sub	fp, #16
2bdc8                 | LR__4522
2bdc8                 | LR__4523
2bdc8                 | LR__4524
2bdc8                 | LR__4525
2bdc8                 | LR__4526
2bdc8     10 4E 05 F1 | 	add	fp, #16
2bdcc     A7 20 0A FB | 	rdlong	local02, fp wz
2bdd0     10 4E 85 F1 | 	sub	fp, #16
2bdd4     04 4E 05 51 |  if_ne	add	fp, #4
2bdd8     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bddc     04 4E 85 51 |  if_ne	sub	fp, #4
2bde0     10 01 68 5C |  if_ne	wrlong	#0, local02
2bde4                 | ' 
2bde4                 | ' 	return res ;
2bde4     10 4E 05 F1 | 	add	fp, #16
2bde8     A7 FA 01 FB | 	rdlong	result1, fp
2bdec     10 4E 85 F1 | 	sub	fp, #16
2bdf0                 | LR__4527
2bdf0     A7 F0 03 F6 | 	mov	ptra, fp
2bdf4     B2 00 A0 FD | 	call	#popregs_
2bdf8                 | _fatfs_cc_f_open_ret
2bdf8     2D 00 64 FD | 	ret
2bdfc                 | 
2bdfc                 | _fatfs_cc_f_read
2bdfc     0E 4A 05 F6 | 	mov	COUNT_, #14
2be00     A8 00 A0 FD | 	call	#pushregs_
2be04     38 F0 07 F1 | 	add	ptra, #56
2be08     04 4E 05 F1 | 	add	fp, #4
2be0c     A7 12 62 FC | 	wrlong	arg01, fp
2be10     04 4E 05 F1 | 	add	fp, #4
2be14     A7 14 62 FC | 	wrlong	arg02, fp
2be18     04 4E 05 F1 | 	add	fp, #4
2be1c     A7 16 62 FC | 	wrlong	arg03, fp
2be20     04 4E 05 F1 | 	add	fp, #4
2be24     A7 18 62 FC | 	wrlong	arg04, fp
2be28     08 4E 85 F1 | 	sub	fp, #8
2be2c     A7 FA 01 FB | 	rdlong	result1, fp
2be30     2C 4E 05 F1 | 	add	fp, #44
2be34     A7 FA 61 FC | 	wrlong	result1, fp
2be38     24 4E 85 F1 | 	sub	fp, #36
2be3c     A7 FA 01 FB | 	rdlong	result1, fp
2be40     FD 00 68 FC | 	wrlong	#0, result1
2be44     0C 4E 85 F1 | 	sub	fp, #12
2be48     A7 12 02 FB | 	rdlong	arg01, fp
2be4c     14 4E 05 F1 | 	add	fp, #20
2be50     A7 14 02 F6 | 	mov	arg02, fp
2be54     18 4E 85 F1 | 	sub	fp, #24
2be58     24 F7 BF FD | 	call	#_fatfs_cc_validate
2be5c     14 4E 05 F1 | 	add	fp, #20
2be60     A7 FA 61 FC | 	wrlong	result1, fp
2be64     00 FA 4D F2 | 	cmps	result1, #0 wz
2be68     14 4E 85 F1 | 	sub	fp, #20
2be6c     20 00 90 5D |  if_ne	jmp	#LR__4530
2be70     04 4E 05 F1 | 	add	fp, #4
2be74     A7 14 02 FB | 	rdlong	arg02, fp
2be78     11 14 06 F1 | 	add	arg02, #17
2be7c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2be80     10 4E 05 F1 | 	add	fp, #16
2be84     A7 14 62 FC | 	wrlong	arg02, fp
2be88     14 4E 85 F1 | 	sub	fp, #20
2be8c     10 00 90 AD |  if_e	jmp	#LR__4531
2be90                 | LR__4530
2be90     14 4E 05 F1 | 	add	fp, #20
2be94     A7 FA 01 FB | 	rdlong	result1, fp
2be98     14 4E 85 F1 | 	sub	fp, #20
2be9c     EC 05 90 FD | 	jmp	#LR__4550
2bea0                 | LR__4531
2bea0     04 4E 05 F1 | 	add	fp, #4
2bea4     A7 18 02 FB | 	rdlong	arg04, fp
2bea8     04 4E 85 F1 | 	sub	fp, #4
2beac     10 18 06 F1 | 	add	arg04, #16
2beb0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2beb4     01 18 CE F7 | 	test	arg04, #1 wz
2beb8     07 FA 05 A6 |  if_e	mov	result1, #7
2bebc     CC 05 90 AD |  if_e	jmp	#LR__4550
2bec0     04 4E 05 F1 | 	add	fp, #4
2bec4     A7 1E 02 FB | 	rdlong	local01, fp
2bec8     0F 21 02 F6 | 	mov	local02, local01
2becc     0C 20 06 F1 | 	add	local02, #12
2bed0     10 23 02 FB | 	rdlong	local03, local02
2bed4     14 1E 06 F1 | 	add	local01, #20
2bed8     0F 1F 02 FB | 	rdlong	local01, local01
2bedc     0F 23 82 F1 | 	sub	local03, local01
2bee0     20 4E 05 F1 | 	add	fp, #32
2bee4     A7 22 62 FC | 	wrlong	local03, fp
2bee8     18 4E 85 F1 | 	sub	fp, #24
2beec     A7 24 02 FB | 	rdlong	local04, fp
2bef0     0C 4E 85 F1 | 	sub	fp, #12
2bef4     11 25 1A F2 | 	cmp	local04, local03 wcz
2bef8     24 4E 05 11 |  if_a	add	fp, #36
2befc     A7 24 02 1B |  if_a	rdlong	local04, fp
2bf00     18 4E 85 11 |  if_a	sub	fp, #24
2bf04     A7 24 62 1C |  if_a	wrlong	local04, fp
2bf08     0C 4E 85 11 |  if_a	sub	fp, #12
2bf0c                 | ' 
2bf0c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2bf0c                 | LR__4532
2bf0c     0C 4E 05 F1 | 	add	fp, #12
2bf10     A7 20 02 FB | 	rdlong	local02, fp
2bf14     0C 4E 85 F1 | 	sub	fp, #12
2bf18     10 25 02 F6 | 	mov	local04, local02
2bf1c     01 24 16 F2 | 	cmp	local04, #1 wc
2bf20     64 05 90 CD |  if_b	jmp	#LR__4549
2bf24     04 4E 05 F1 | 	add	fp, #4
2bf28     A7 22 02 FB | 	rdlong	local03, fp
2bf2c     04 4E 85 F1 | 	sub	fp, #4
2bf30     14 22 06 F1 | 	add	local03, #20
2bf34     11 23 02 FB | 	rdlong	local03, local03
2bf38     FF 23 CE F7 | 	test	local03, #511 wz
2bf3c     3C 04 90 5D |  if_ne	jmp	#LR__4547
2bf40     04 4E 05 F1 | 	add	fp, #4
2bf44     A7 1E 02 FB | 	rdlong	local01, fp
2bf48     14 1E 06 F1 | 	add	local01, #20
2bf4c     0F 23 02 FB | 	rdlong	local03, local01
2bf50     09 22 46 F0 | 	shr	local03, #9
2bf54     14 4E 05 F1 | 	add	fp, #20
2bf58     A7 26 02 FB | 	rdlong	local05, fp
2bf5c     13 29 02 F6 | 	mov	local06, local05
2bf60     0A 28 06 F1 | 	add	local06, #10
2bf64     14 2B E2 FA | 	rdword	local07, local06
2bf68     0A 28 86 F1 | 	sub	local06, #10
2bf6c     15 2D 32 F9 | 	getword	local08, local07, #0
2bf70     01 2C 86 F1 | 	sub	local08, #1
2bf74     16 23 0A F5 | 	and	local03, local08 wz
2bf78     18 4E 05 F1 | 	add	fp, #24
2bf7c     A7 22 62 FC | 	wrlong	local03, fp
2bf80     30 4E 85 F1 | 	sub	fp, #48
2bf84     E0 00 90 5D |  if_ne	jmp	#LR__4537
2bf88     04 4E 05 F1 | 	add	fp, #4
2bf8c     A7 22 02 FB | 	rdlong	local03, fp
2bf90     04 4E 85 F1 | 	sub	fp, #4
2bf94     14 22 06 F1 | 	add	local03, #20
2bf98     11 23 0A FB | 	rdlong	local03, local03 wz
2bf9c     20 00 90 5D |  if_ne	jmp	#LR__4533
2bfa0     04 4E 05 F1 | 	add	fp, #4
2bfa4     A7 22 02 FB | 	rdlong	local03, fp
2bfa8     08 22 06 F1 | 	add	local03, #8
2bfac     11 23 02 FB | 	rdlong	local03, local03
2bfb0     18 4E 05 F1 | 	add	fp, #24
2bfb4     A7 22 62 FC | 	wrlong	local03, fp
2bfb8     1C 4E 85 F1 | 	sub	fp, #28
2bfbc     28 00 90 FD | 	jmp	#LR__4534
2bfc0                 | LR__4533
2bfc0     04 4E 05 F1 | 	add	fp, #4
2bfc4     A7 2C 02 FB | 	rdlong	local08, fp
2bfc8     16 13 02 F6 | 	mov	arg01, local08
2bfcc     04 4E 85 F1 | 	sub	fp, #4
2bfd0     18 2C 06 F1 | 	add	local08, #24
2bfd4     16 15 02 FB | 	rdlong	arg02, local08
2bfd8     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2bfdc     1C 4E 05 F1 | 	add	fp, #28
2bfe0     A7 FA 61 FC | 	wrlong	result1, fp
2bfe4     1C 4E 85 F1 | 	sub	fp, #28
2bfe8                 | LR__4534
2bfe8     1C 4E 05 F1 | 	add	fp, #28
2bfec     A7 22 02 FB | 	rdlong	local03, fp
2bff0     1C 4E 85 F1 | 	sub	fp, #28
2bff4     02 22 16 F2 | 	cmp	local03, #2 wc
2bff8     1C 00 90 3D |  if_ae	jmp	#LR__4535
2bffc     04 4E 05 F1 | 	add	fp, #4
2c000     A7 22 02 FB | 	rdlong	local03, fp
2c004     04 4E 85 F1 | 	sub	fp, #4
2c008     11 22 06 F1 | 	add	local03, #17
2c00c     11 05 48 FC | 	wrbyte	#2, local03
2c010     02 FA 05 F6 | 	mov	result1, #2
2c014     74 04 90 FD | 	jmp	#LR__4550
2c018                 | LR__4535
2c018     1C 4E 05 F1 | 	add	fp, #28
2c01c     A7 22 02 FB | 	rdlong	local03, fp
2c020     1C 4E 85 F1 | 	sub	fp, #28
2c024     FF FF 7F FF 
2c028     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2c02c     1C 00 90 5D |  if_ne	jmp	#LR__4536
2c030     04 4E 05 F1 | 	add	fp, #4
2c034     A7 22 02 FB | 	rdlong	local03, fp
2c038     04 4E 85 F1 | 	sub	fp, #4
2c03c     11 22 06 F1 | 	add	local03, #17
2c040     11 03 48 FC | 	wrbyte	#1, local03
2c044     01 FA 05 F6 | 	mov	result1, #1
2c048     40 04 90 FD | 	jmp	#LR__4550
2c04c                 | LR__4536
2c04c     04 4E 05 F1 | 	add	fp, #4
2c050     A7 22 02 FB | 	rdlong	local03, fp
2c054     18 4E 05 F1 | 	add	fp, #24
2c058     A7 2C 02 FB | 	rdlong	local08, fp
2c05c     1C 4E 85 F1 | 	sub	fp, #28
2c060     18 22 06 F1 | 	add	local03, #24
2c064     11 2D 62 FC | 	wrlong	local08, local03
2c068                 | LR__4537
2c068     18 4E 05 F1 | 	add	fp, #24
2c06c     A7 12 02 FB | 	rdlong	arg01, fp
2c070     14 4E 85 F1 | 	sub	fp, #20
2c074     A7 22 02 FB | 	rdlong	local03, fp
2c078     04 4E 85 F1 | 	sub	fp, #4
2c07c     18 22 06 F1 | 	add	local03, #24
2c080     11 15 02 FB | 	rdlong	arg02, local03
2c084     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c088     20 4E 05 F1 | 	add	fp, #32
2c08c     A7 FA 61 FC | 	wrlong	result1, fp
2c090     20 4E 85 F1 | 	sub	fp, #32
2c094     00 FA 0D F2 | 	cmp	result1, #0 wz
2c098     1C 00 90 5D |  if_ne	jmp	#LR__4538
2c09c     04 4E 05 F1 | 	add	fp, #4
2c0a0     A7 22 02 FB | 	rdlong	local03, fp
2c0a4     04 4E 85 F1 | 	sub	fp, #4
2c0a8     11 22 06 F1 | 	add	local03, #17
2c0ac     11 05 48 FC | 	wrbyte	#2, local03
2c0b0     02 FA 05 F6 | 	mov	result1, #2
2c0b4     D4 03 90 FD | 	jmp	#LR__4550
2c0b8                 | LR__4538
2c0b8     20 4E 05 F1 | 	add	fp, #32
2c0bc     A7 22 02 FB | 	rdlong	local03, fp
2c0c0     10 4E 05 F1 | 	add	fp, #16
2c0c4     A7 2C 02 FB | 	rdlong	local08, fp
2c0c8     16 23 02 F1 | 	add	local03, local08
2c0cc     10 4E 85 F1 | 	sub	fp, #16
2c0d0     A7 22 62 FC | 	wrlong	local03, fp
2c0d4     14 4E 85 F1 | 	sub	fp, #20
2c0d8     A7 22 02 FB | 	rdlong	local03, fp
2c0dc     09 22 46 F0 | 	shr	local03, #9
2c0e0     20 4E 05 F1 | 	add	fp, #32
2c0e4     A7 22 62 FC | 	wrlong	local03, fp
2c0e8     2C 4E 85 F1 | 	sub	fp, #44
2c0ec     01 22 16 F2 | 	cmp	local03, #1 wc
2c0f0     5C 01 90 CD |  if_b	jmp	#LR__4542
2c0f4     30 4E 05 F1 | 	add	fp, #48
2c0f8     A7 22 02 FB | 	rdlong	local03, fp
2c0fc     04 4E 85 F1 | 	sub	fp, #4
2c100     A7 2C 02 FB | 	rdlong	local08, fp
2c104     16 23 02 F1 | 	add	local03, local08
2c108     14 4E 85 F1 | 	sub	fp, #20
2c10c     A7 2C 02 FB | 	rdlong	local08, fp
2c110     18 4E 85 F1 | 	sub	fp, #24
2c114     0A 2C 06 F1 | 	add	local08, #10
2c118     16 2D E2 FA | 	rdword	local08, local08
2c11c     16 23 1A F2 | 	cmp	local03, local08 wcz
2c120     28 00 90 ED |  if_be	jmp	#LR__4539
2c124     18 4E 05 F1 | 	add	fp, #24
2c128     A7 1E 02 FB | 	rdlong	local01, fp
2c12c     0A 1E 06 F1 | 	add	local01, #10
2c130     0F 23 E2 FA | 	rdword	local03, local01
2c134     18 4E 05 F1 | 	add	fp, #24
2c138     A7 2C 02 FB | 	rdlong	local08, fp
2c13c     16 23 82 F1 | 	sub	local03, local08
2c140     04 4E 85 F1 | 	sub	fp, #4
2c144     A7 22 62 FC | 	wrlong	local03, fp
2c148     2C 4E 85 F1 | 	sub	fp, #44
2c14c                 | LR__4539
2c14c     18 4E 05 F1 | 	add	fp, #24
2c150     A7 1E 02 FB | 	rdlong	local01, fp
2c154     01 1E 06 F1 | 	add	local01, #1
2c158     0F 13 C2 FA | 	rdbyte	arg01, local01
2c15c     1C 4E 05 F1 | 	add	fp, #28
2c160     A7 14 02 FB | 	rdlong	arg02, fp
2c164     14 4E 85 F1 | 	sub	fp, #20
2c168     A7 16 02 FB | 	rdlong	arg03, fp
2c16c     0C 4E 05 F1 | 	add	fp, #12
2c170     A7 18 02 FB | 	rdlong	arg04, fp
2c174     2C 4E 85 F1 | 	sub	fp, #44
2c178     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c17c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c180     1C 00 90 AD |  if_e	jmp	#LR__4540
2c184     04 4E 05 F1 | 	add	fp, #4
2c188     A7 22 02 FB | 	rdlong	local03, fp
2c18c     04 4E 85 F1 | 	sub	fp, #4
2c190     11 22 06 F1 | 	add	local03, #17
2c194     11 03 48 FC | 	wrbyte	#1, local03
2c198     01 FA 05 F6 | 	mov	result1, #1
2c19c     EC 02 90 FD | 	jmp	#LR__4550
2c1a0                 | LR__4540
2c1a0     04 4E 05 F1 | 	add	fp, #4
2c1a4     A7 1E 02 FB | 	rdlong	local01, fp
2c1a8     04 4E 85 F1 | 	sub	fp, #4
2c1ac     10 1E 06 F1 | 	add	local01, #16
2c1b0     0F 23 C2 FA | 	rdbyte	local03, local01
2c1b4     80 22 CE F7 | 	test	local03, #128 wz
2c1b8     78 00 90 AD |  if_e	jmp	#LR__4541
2c1bc     04 4E 05 F1 | 	add	fp, #4
2c1c0     A7 2C 02 FB | 	rdlong	local08, fp
2c1c4     1C 2C 06 F1 | 	add	local08, #28
2c1c8     16 2D 02 FB | 	rdlong	local08, local08
2c1cc     1C 4E 05 F1 | 	add	fp, #28
2c1d0     A7 2E 02 FB | 	rdlong	local09, fp
2c1d4     17 2D 82 F1 | 	sub	local08, local09
2c1d8     0C 4E 05 F1 | 	add	fp, #12
2c1dc     A7 30 02 FB | 	rdlong	local10, fp
2c1e0     2C 4E 85 F1 | 	sub	fp, #44
2c1e4     18 33 02 F6 | 	mov	local11, local10
2c1e8     19 2D 12 F2 | 	cmp	local08, local11 wc
2c1ec     44 00 90 3D |  if_ae	jmp	#LR__4541
2c1f0     34 4E 05 F1 | 	add	fp, #52
2c1f4     A7 12 02 FB | 	rdlong	arg01, fp
2c1f8     30 4E 85 F1 | 	sub	fp, #48
2c1fc     A7 14 02 FB | 	rdlong	arg02, fp
2c200     0A 33 02 F6 | 	mov	local11, arg02
2c204     1C 32 06 F1 | 	add	local11, #28
2c208     19 2F 02 FB | 	rdlong	local09, local11
2c20c     1C 4E 05 F1 | 	add	fp, #28
2c210     A7 26 02 FB | 	rdlong	local05, fp
2c214     13 2F 82 F1 | 	sub	local09, local05
2c218     09 2E 66 F0 | 	shl	local09, #9
2c21c     17 33 02 F6 | 	mov	local11, local09
2c220     17 13 02 F1 | 	add	arg01, local09
2c224     20 4E 85 F1 | 	sub	fp, #32
2c228     28 14 06 F1 | 	add	arg02, #40
2c22c     09 16 C6 F9 | 	decod	arg03, #9
2c230     28 46 BF FD | 	call	#__system____builtin_memmove
2c234                 | LR__4541
2c234     2C 4E 05 F1 | 	add	fp, #44
2c238     A7 22 02 FB | 	rdlong	local03, fp
2c23c     09 22 66 F0 | 	shl	local03, #9
2c240     04 4E 85 F1 | 	sub	fp, #4
2c244     A7 22 62 FC | 	wrlong	local03, fp
2c248     28 4E 85 F1 | 	sub	fp, #40
2c24c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c24c                 | ' 				}
2c24c                 | ' 
2c24c                 | ' 
2c24c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c24c                 | ' 				continue;
2c24c     B4 01 90 FD | 	jmp	#LR__4548
2c250                 | LR__4542
2c250     04 4E 05 F1 | 	add	fp, #4
2c254     A7 22 02 FB | 	rdlong	local03, fp
2c258     1C 22 06 F1 | 	add	local03, #28
2c25c     11 23 02 FB | 	rdlong	local03, local03
2c260     1C 4E 05 F1 | 	add	fp, #28
2c264     A7 1E 02 FB | 	rdlong	local01, fp
2c268     20 4E 85 F1 | 	sub	fp, #32
2c26c     0F 23 0A F2 | 	cmp	local03, local01 wz
2c270     EC 00 90 AD |  if_e	jmp	#LR__4546
2c274     04 4E 05 F1 | 	add	fp, #4
2c278     A7 1E 02 FB | 	rdlong	local01, fp
2c27c     04 4E 85 F1 | 	sub	fp, #4
2c280     10 1E 06 F1 | 	add	local01, #16
2c284     0F 23 C2 FA | 	rdbyte	local03, local01
2c288     80 22 CE F7 | 	test	local03, #128 wz
2c28c     7C 00 90 AD |  if_e	jmp	#LR__4544
2c290     18 4E 05 F1 | 	add	fp, #24
2c294     A7 1E 02 FB | 	rdlong	local01, fp
2c298     01 1E 06 F1 | 	add	local01, #1
2c29c     0F 13 C2 FA | 	rdbyte	arg01, local01
2c2a0     14 4E 85 F1 | 	sub	fp, #20
2c2a4     A7 22 02 FB | 	rdlong	local03, fp
2c2a8     11 15 02 F6 | 	mov	arg02, local03
2c2ac     28 14 06 F1 | 	add	arg02, #40
2c2b0     04 4E 85 F1 | 	sub	fp, #4
2c2b4     1C 22 06 F1 | 	add	local03, #28
2c2b8     11 17 02 FB | 	rdlong	arg03, local03
2c2bc     01 18 06 F6 | 	mov	arg04, #1
2c2c0     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c2c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2c8     1C 00 90 AD |  if_e	jmp	#LR__4543
2c2cc     04 4E 05 F1 | 	add	fp, #4
2c2d0     A7 22 02 FB | 	rdlong	local03, fp
2c2d4     04 4E 85 F1 | 	sub	fp, #4
2c2d8     11 22 06 F1 | 	add	local03, #17
2c2dc     11 03 48 FC | 	wrbyte	#1, local03
2c2e0     01 FA 05 F6 | 	mov	result1, #1
2c2e4     A4 01 90 FD | 	jmp	#LR__4550
2c2e8                 | LR__4543
2c2e8     04 4E 05 F1 | 	add	fp, #4
2c2ec     A7 32 02 FB | 	rdlong	local11, fp
2c2f0     19 23 02 F6 | 	mov	local03, local11
2c2f4     04 4E 85 F1 | 	sub	fp, #4
2c2f8     10 32 06 F1 | 	add	local11, #16
2c2fc     19 33 C2 FA | 	rdbyte	local11, local11
2c300     7F 32 06 F5 | 	and	local11, #127
2c304     10 22 06 F1 | 	add	local03, #16
2c308     11 33 42 FC | 	wrbyte	local11, local03
2c30c                 | LR__4544
2c30c     18 4E 05 F1 | 	add	fp, #24
2c310     A7 1E 02 FB | 	rdlong	local01, fp
2c314     01 1E 06 F1 | 	add	local01, #1
2c318     0F 13 C2 FA | 	rdbyte	arg01, local01
2c31c     14 4E 85 F1 | 	sub	fp, #20
2c320     A7 14 02 FB | 	rdlong	arg02, fp
2c324     28 14 06 F1 | 	add	arg02, #40
2c328     1C 4E 05 F1 | 	add	fp, #28
2c32c     A7 16 02 FB | 	rdlong	arg03, fp
2c330     20 4E 85 F1 | 	sub	fp, #32
2c334     01 18 06 F6 | 	mov	arg04, #1
2c338     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c33c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c340     1C 00 90 AD |  if_e	jmp	#LR__4545
2c344     04 4E 05 F1 | 	add	fp, #4
2c348     A7 22 02 FB | 	rdlong	local03, fp
2c34c     04 4E 85 F1 | 	sub	fp, #4
2c350     11 22 06 F1 | 	add	local03, #17
2c354     11 03 48 FC | 	wrbyte	#1, local03
2c358     01 FA 05 F6 | 	mov	result1, #1
2c35c     2C 01 90 FD | 	jmp	#LR__4550
2c360                 | LR__4545
2c360                 | LR__4546
2c360     04 4E 05 F1 | 	add	fp, #4
2c364     A7 22 02 FB | 	rdlong	local03, fp
2c368     1C 4E 05 F1 | 	add	fp, #28
2c36c     A7 32 02 FB | 	rdlong	local11, fp
2c370     20 4E 85 F1 | 	sub	fp, #32
2c374     1C 22 06 F1 | 	add	local03, #28
2c378     11 33 62 FC | 	wrlong	local11, local03
2c37c                 | LR__4547
2c37c     04 4E 05 F1 | 	add	fp, #4
2c380     A7 1E 02 FB | 	rdlong	local01, fp
2c384     14 1E 06 F1 | 	add	local01, #20
2c388     0F 33 02 FB | 	rdlong	local11, local01
2c38c     FF 33 06 F5 | 	and	local11, #511
2c390     09 22 C6 F9 | 	decod	local03, #9
2c394     19 23 82 F1 | 	sub	local03, local11
2c398     24 4E 05 F1 | 	add	fp, #36
2c39c     A7 22 62 FC | 	wrlong	local03, fp
2c3a0     1C 4E 85 F1 | 	sub	fp, #28
2c3a4     A7 32 02 FB | 	rdlong	local11, fp
2c3a8     0C 4E 85 F1 | 	sub	fp, #12
2c3ac     19 23 1A F2 | 	cmp	local03, local11 wcz
2c3b0     0C 4E 05 11 |  if_a	add	fp, #12
2c3b4     A7 22 02 1B |  if_a	rdlong	local03, fp
2c3b8     1C 4E 05 11 |  if_a	add	fp, #28
2c3bc     A7 22 62 1C |  if_a	wrlong	local03, fp
2c3c0     28 4E 85 11 |  if_a	sub	fp, #40
2c3c4     34 4E 05 F1 | 	add	fp, #52
2c3c8     A7 12 02 FB | 	rdlong	arg01, fp
2c3cc     30 4E 85 F1 | 	sub	fp, #48
2c3d0     A7 28 02 FB | 	rdlong	local06, fp
2c3d4     14 15 02 F6 | 	mov	arg02, local06
2c3d8     28 14 06 F1 | 	add	arg02, #40
2c3dc     14 28 06 F1 | 	add	local06, #20
2c3e0     14 33 02 FB | 	rdlong	local11, local06
2c3e4     19 2F 02 F6 | 	mov	local09, local11
2c3e8     17 31 02 F6 | 	mov	local10, local09
2c3ec     FF 31 06 F5 | 	and	local10, #511
2c3f0     18 15 02 F1 | 	add	arg02, local10
2c3f4     24 4E 05 F1 | 	add	fp, #36
2c3f8     A7 16 02 FB | 	rdlong	arg03, fp
2c3fc     28 4E 85 F1 | 	sub	fp, #40
2c400     58 44 BF FD | 	call	#__system____builtin_memmove
2c404                 | LR__4548
2c404     0C 4E 05 F1 | 	add	fp, #12
2c408     A7 22 02 FB | 	rdlong	local03, fp
2c40c     1C 4E 05 F1 | 	add	fp, #28
2c410     A7 2C 02 FB | 	rdlong	local08, fp
2c414     16 23 82 F1 | 	sub	local03, local08
2c418     1C 4E 85 F1 | 	sub	fp, #28
2c41c     A7 22 62 FC | 	wrlong	local03, fp
2c420     04 4E 05 F1 | 	add	fp, #4
2c424     A7 1E 02 FB | 	rdlong	local01, fp
2c428     0F 2B 02 FB | 	rdlong	local07, local01
2c42c     18 4E 05 F1 | 	add	fp, #24
2c430     A7 2C 02 FB | 	rdlong	local08, fp
2c434     16 2B 02 F1 | 	add	local07, local08
2c438     0F 2B 62 FC | 	wrlong	local07, local01
2c43c     0C 4E 05 F1 | 	add	fp, #12
2c440     A7 22 02 FB | 	rdlong	local03, fp
2c444     0C 4E 85 F1 | 	sub	fp, #12
2c448     A7 34 02 FB | 	rdlong	local12, fp
2c44c     1A 23 02 F1 | 	add	local03, local12
2c450     0C 4E 05 F1 | 	add	fp, #12
2c454     A7 22 62 FC | 	wrlong	local03, fp
2c458     30 4E 85 F1 | 	sub	fp, #48
2c45c     A7 36 02 FB | 	rdlong	local13, fp
2c460     1B 23 02 F6 | 	mov	local03, local13
2c464     14 36 06 F1 | 	add	local13, #20
2c468     1B 39 02 FB | 	rdlong	local14, local13
2c46c     24 4E 05 F1 | 	add	fp, #36
2c470     A7 28 02 FB | 	rdlong	local06, fp
2c474     28 4E 85 F1 | 	sub	fp, #40
2c478     14 39 02 F1 | 	add	local14, local06
2c47c     14 22 06 F1 | 	add	local03, #20
2c480     11 39 62 FC | 	wrlong	local14, local03
2c484     84 FA 9F FD | 	jmp	#LR__4532
2c488                 | LR__4549
2c488                 | ' 
2c488                 | ' 
2c488                 | ' 
2c488                 | ' 
2c488                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c488                 | ' 
2c488                 | ' 	}
2c488                 | ' 
2c488                 | ' 	return FR_OK ;
2c488     00 FA 05 F6 | 	mov	result1, #0
2c48c                 | LR__4550
2c48c     A7 F0 03 F6 | 	mov	ptra, fp
2c490     B2 00 A0 FD | 	call	#popregs_
2c494                 | _fatfs_cc_f_read_ret
2c494     2D 00 64 FD | 	ret
2c498                 | 
2c498                 | _fatfs_cc_f_write
2c498     15 4A 05 F6 | 	mov	COUNT_, #21
2c49c     A8 00 A0 FD | 	call	#pushregs_
2c4a0     34 F0 07 F1 | 	add	ptra, #52
2c4a4     04 4E 05 F1 | 	add	fp, #4
2c4a8     A7 12 62 FC | 	wrlong	arg01, fp
2c4ac     04 4E 05 F1 | 	add	fp, #4
2c4b0     A7 14 62 FC | 	wrlong	arg02, fp
2c4b4     04 4E 05 F1 | 	add	fp, #4
2c4b8     A7 16 62 FC | 	wrlong	arg03, fp
2c4bc     04 4E 05 F1 | 	add	fp, #4
2c4c0     A7 18 62 FC | 	wrlong	arg04, fp
2c4c4     08 4E 85 F1 | 	sub	fp, #8
2c4c8     A7 FA 01 FB | 	rdlong	result1, fp
2c4cc     28 4E 05 F1 | 	add	fp, #40
2c4d0     A7 FA 61 FC | 	wrlong	result1, fp
2c4d4     20 4E 85 F1 | 	sub	fp, #32
2c4d8     A7 FA 01 FB | 	rdlong	result1, fp
2c4dc     FD 00 68 FC | 	wrlong	#0, result1
2c4e0     0C 4E 85 F1 | 	sub	fp, #12
2c4e4     A7 12 02 FB | 	rdlong	arg01, fp
2c4e8     14 4E 05 F1 | 	add	fp, #20
2c4ec     A7 14 02 F6 | 	mov	arg02, fp
2c4f0     18 4E 85 F1 | 	sub	fp, #24
2c4f4     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c4f8     14 4E 05 F1 | 	add	fp, #20
2c4fc     A7 FA 61 FC | 	wrlong	result1, fp
2c500     00 FA 4D F2 | 	cmps	result1, #0 wz
2c504     14 4E 85 F1 | 	sub	fp, #20
2c508     20 00 90 5D |  if_ne	jmp	#LR__4560
2c50c     04 4E 05 F1 | 	add	fp, #4
2c510     A7 14 02 FB | 	rdlong	arg02, fp
2c514     11 14 06 F1 | 	add	arg02, #17
2c518     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c51c     10 4E 05 F1 | 	add	fp, #16
2c520     A7 14 62 FC | 	wrlong	arg02, fp
2c524     14 4E 85 F1 | 	sub	fp, #20
2c528     10 00 90 AD |  if_e	jmp	#LR__4561
2c52c                 | LR__4560
2c52c     14 4E 05 F1 | 	add	fp, #20
2c530     A7 FA 01 FB | 	rdlong	result1, fp
2c534     14 4E 85 F1 | 	sub	fp, #20
2c538     44 07 90 FD | 	jmp	#LR__4583
2c53c                 | LR__4561
2c53c     04 4E 05 F1 | 	add	fp, #4
2c540     A7 14 02 FB | 	rdlong	arg02, fp
2c544     04 4E 85 F1 | 	sub	fp, #4
2c548     10 14 06 F1 | 	add	arg02, #16
2c54c     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c550     02 14 CE F7 | 	test	arg02, #2 wz
2c554     07 FA 05 A6 |  if_e	mov	result1, #7
2c558     24 07 90 AD |  if_e	jmp	#LR__4583
2c55c     04 4E 05 F1 | 	add	fp, #4
2c560     A7 14 02 FB | 	rdlong	arg02, fp
2c564     0A 13 02 F6 | 	mov	arg01, arg02
2c568     14 12 06 F1 | 	add	arg01, #20
2c56c     09 13 02 FB | 	rdlong	arg01, arg01
2c570     08 4E 05 F1 | 	add	fp, #8
2c574     A7 FA 01 FB | 	rdlong	result1, fp
2c578     FD 12 02 F1 | 	add	arg01, result1
2c57c     0C 4E 85 F1 | 	sub	fp, #12
2c580     14 14 06 F1 | 	add	arg02, #20
2c584     0A FB 01 FB | 	rdlong	result1, arg02
2c588     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c58c     24 00 90 3D |  if_ae	jmp	#LR__4562
2c590     04 4E 05 F1 | 	add	fp, #4
2c594     A7 14 02 FB | 	rdlong	arg02, fp
2c598     01 FA 65 F6 | 	neg	result1, #1
2c59c     14 14 06 F1 | 	add	arg02, #20
2c5a0     0A 15 02 FB | 	rdlong	arg02, arg02
2c5a4     0A FB 81 F1 | 	sub	result1, arg02
2c5a8     08 4E 05 F1 | 	add	fp, #8
2c5ac     A7 FA 61 FC | 	wrlong	result1, fp
2c5b0     0C 4E 85 F1 | 	sub	fp, #12
2c5b4                 | LR__4562
2c5b4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c5b4                 | ' 	}
2c5b4                 | ' 
2c5b4                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c5b4                 | LR__4563
2c5b4     0C 4E 05 F1 | 	add	fp, #12
2c5b8     A7 FA 01 FB | 	rdlong	result1, fp
2c5bc     0C 4E 85 F1 | 	sub	fp, #12
2c5c0     01 FA 15 F2 | 	cmp	result1, #1 wc
2c5c4     90 06 90 CD |  if_b	jmp	#LR__4582
2c5c8     04 4E 05 F1 | 	add	fp, #4
2c5cc     A7 FA 01 FB | 	rdlong	result1, fp
2c5d0     04 4E 85 F1 | 	sub	fp, #4
2c5d4     14 FA 05 F1 | 	add	result1, #20
2c5d8     FD FA 01 FB | 	rdlong	result1, result1
2c5dc     FF FB CD F7 | 	test	result1, #511 wz
2c5e0     D8 04 90 5D |  if_ne	jmp	#LR__4578
2c5e4     04 4E 05 F1 | 	add	fp, #4
2c5e8     A7 FA 01 FB | 	rdlong	result1, fp
2c5ec     14 FA 05 F1 | 	add	result1, #20
2c5f0     FD FA 01 FB | 	rdlong	result1, result1
2c5f4     09 FA 45 F0 | 	shr	result1, #9
2c5f8     14 4E 05 F1 | 	add	fp, #20
2c5fc     A7 14 02 FB | 	rdlong	arg02, fp
2c600     0A 14 06 F1 | 	add	arg02, #10
2c604     0A 19 E2 FA | 	rdword	arg04, arg02
2c608     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c60c     01 14 86 F1 | 	sub	arg02, #1
2c610     0A FB 09 F5 | 	and	result1, arg02 wz
2c614     14 4E 05 F1 | 	add	fp, #20
2c618     A7 FA 61 FC | 	wrlong	result1, fp
2c61c     2C 4E 85 F1 | 	sub	fp, #44
2c620     44 01 90 5D |  if_ne	jmp	#LR__4569
2c624     04 4E 05 F1 | 	add	fp, #4
2c628     A7 FA 01 FB | 	rdlong	result1, fp
2c62c     04 4E 85 F1 | 	sub	fp, #4
2c630     14 FA 05 F1 | 	add	result1, #20
2c634     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c638     44 00 90 5D |  if_ne	jmp	#LR__4564
2c63c     04 4E 05 F1 | 	add	fp, #4
2c640     A7 14 02 FB | 	rdlong	arg02, fp
2c644     08 14 06 F1 | 	add	arg02, #8
2c648     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c64c     18 4E 05 F1 | 	add	fp, #24
2c650     A7 14 62 FC | 	wrlong	arg02, fp
2c654     1C 4E 85 F1 | 	sub	fp, #28
2c658     4C 00 90 5D |  if_ne	jmp	#LR__4565
2c65c     04 4E 05 F1 | 	add	fp, #4
2c660     A7 12 02 FB | 	rdlong	arg01, fp
2c664     04 4E 85 F1 | 	sub	fp, #4
2c668     00 14 06 F6 | 	mov	arg02, #0
2c66c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c670     1C 4E 05 F1 | 	add	fp, #28
2c674     A7 FA 61 FC | 	wrlong	result1, fp
2c678     1C 4E 85 F1 | 	sub	fp, #28
2c67c     28 00 90 FD | 	jmp	#LR__4565
2c680                 | LR__4564
2c680     04 4E 05 F1 | 	add	fp, #4
2c684     A7 18 02 FB | 	rdlong	arg04, fp
2c688     0C 13 02 F6 | 	mov	arg01, arg04
2c68c     04 4E 85 F1 | 	sub	fp, #4
2c690     18 18 06 F1 | 	add	arg04, #24
2c694     0C 15 02 FB | 	rdlong	arg02, arg04
2c698     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c69c     1C 4E 05 F1 | 	add	fp, #28
2c6a0     A7 FA 61 FC | 	wrlong	result1, fp
2c6a4     1C 4E 85 F1 | 	sub	fp, #28
2c6a8                 | LR__4565
2c6a8     1C 4E 05 F1 | 	add	fp, #28
2c6ac     A7 FA 09 FB | 	rdlong	result1, fp wz
2c6b0     1C 4E 85 F1 | 	sub	fp, #28
2c6b4     A0 05 90 AD |  if_e	jmp	#LR__4582
2c6b8     1C 4E 05 F1 | 	add	fp, #28
2c6bc     A7 FA 01 FB | 	rdlong	result1, fp
2c6c0     1C 4E 85 F1 | 	sub	fp, #28
2c6c4     01 FA 0D F2 | 	cmp	result1, #1 wz
2c6c8     1C 00 90 5D |  if_ne	jmp	#LR__4566
2c6cc     04 4E 05 F1 | 	add	fp, #4
2c6d0     A7 FA 01 FB | 	rdlong	result1, fp
2c6d4     04 4E 85 F1 | 	sub	fp, #4
2c6d8     11 FA 05 F1 | 	add	result1, #17
2c6dc     FD 04 48 FC | 	wrbyte	#2, result1
2c6e0     02 FA 05 F6 | 	mov	result1, #2
2c6e4     98 05 90 FD | 	jmp	#LR__4583
2c6e8                 | LR__4566
2c6e8     1C 4E 05 F1 | 	add	fp, #28
2c6ec     A7 FA 01 FB | 	rdlong	result1, fp
2c6f0     1C 4E 85 F1 | 	sub	fp, #28
2c6f4     FF FF 7F FF 
2c6f8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c6fc     1C 00 90 5D |  if_ne	jmp	#LR__4567
2c700     04 4E 05 F1 | 	add	fp, #4
2c704     A7 FA 01 FB | 	rdlong	result1, fp
2c708     04 4E 85 F1 | 	sub	fp, #4
2c70c     11 FA 05 F1 | 	add	result1, #17
2c710     FD 02 48 FC | 	wrbyte	#1, result1
2c714     01 FA 05 F6 | 	mov	result1, #1
2c718     64 05 90 FD | 	jmp	#LR__4583
2c71c                 | LR__4567
2c71c     04 4E 05 F1 | 	add	fp, #4
2c720     A7 FA 01 FB | 	rdlong	result1, fp
2c724     18 4E 05 F1 | 	add	fp, #24
2c728     A7 18 02 FB | 	rdlong	arg04, fp
2c72c     18 FA 05 F1 | 	add	result1, #24
2c730     FD 18 62 FC | 	wrlong	arg04, result1
2c734     18 4E 85 F1 | 	sub	fp, #24
2c738     A7 FA 01 FB | 	rdlong	result1, fp
2c73c     04 4E 85 F1 | 	sub	fp, #4
2c740     08 FA 05 F1 | 	add	result1, #8
2c744     FD FA 09 FB | 	rdlong	result1, result1 wz
2c748     1C 00 90 5D |  if_ne	jmp	#LR__4568
2c74c     04 4E 05 F1 | 	add	fp, #4
2c750     A7 18 02 FB | 	rdlong	arg04, fp
2c754     18 4E 05 F1 | 	add	fp, #24
2c758     A7 FA 01 FB | 	rdlong	result1, fp
2c75c     1C 4E 85 F1 | 	sub	fp, #28
2c760     08 18 06 F1 | 	add	arg04, #8
2c764     0C FB 61 FC | 	wrlong	result1, arg04
2c768                 | LR__4568
2c768                 | LR__4569
2c768     04 4E 05 F1 | 	add	fp, #4
2c76c     A7 18 02 FB | 	rdlong	arg04, fp
2c770     04 4E 85 F1 | 	sub	fp, #4
2c774     10 18 06 F1 | 	add	arg04, #16
2c778     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c77c     80 18 CE F7 | 	test	arg04, #128 wz
2c780     7C 00 90 AD |  if_e	jmp	#LR__4571
2c784     18 4E 05 F1 | 	add	fp, #24
2c788     A7 18 02 FB | 	rdlong	arg04, fp
2c78c     01 18 06 F1 | 	add	arg04, #1
2c790     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c794     14 4E 85 F1 | 	sub	fp, #20
2c798     A7 18 02 FB | 	rdlong	arg04, fp
2c79c     0C 15 02 F6 | 	mov	arg02, arg04
2c7a0     28 14 06 F1 | 	add	arg02, #40
2c7a4     04 4E 85 F1 | 	sub	fp, #4
2c7a8     1C 18 06 F1 | 	add	arg04, #28
2c7ac     0C 17 02 FB | 	rdlong	arg03, arg04
2c7b0     01 18 06 F6 | 	mov	arg04, #1
2c7b4     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c7b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c7bc     1C 00 90 AD |  if_e	jmp	#LR__4570
2c7c0     04 4E 05 F1 | 	add	fp, #4
2c7c4     A7 FA 01 FB | 	rdlong	result1, fp
2c7c8     04 4E 85 F1 | 	sub	fp, #4
2c7cc     11 FA 05 F1 | 	add	result1, #17
2c7d0     FD 02 48 FC | 	wrbyte	#1, result1
2c7d4     01 FA 05 F6 | 	mov	result1, #1
2c7d8     A4 04 90 FD | 	jmp	#LR__4583
2c7dc                 | LR__4570
2c7dc     04 4E 05 F1 | 	add	fp, #4
2c7e0     A7 18 02 FB | 	rdlong	arg04, fp
2c7e4     0C FB 01 F6 | 	mov	result1, arg04
2c7e8     04 4E 85 F1 | 	sub	fp, #4
2c7ec     10 18 06 F1 | 	add	arg04, #16
2c7f0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c7f4     7F 18 06 F5 | 	and	arg04, #127
2c7f8     10 FA 05 F1 | 	add	result1, #16
2c7fc     FD 18 42 FC | 	wrbyte	arg04, result1
2c800                 | LR__4571
2c800     18 4E 05 F1 | 	add	fp, #24
2c804     A7 12 02 FB | 	rdlong	arg01, fp
2c808     14 4E 85 F1 | 	sub	fp, #20
2c80c     A7 14 02 FB | 	rdlong	arg02, fp
2c810     04 4E 85 F1 | 	sub	fp, #4
2c814     18 14 06 F1 | 	add	arg02, #24
2c818     0A 15 02 FB | 	rdlong	arg02, arg02
2c81c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c820     20 4E 05 F1 | 	add	fp, #32
2c824     A7 FA 61 FC | 	wrlong	result1, fp
2c828     20 4E 85 F1 | 	sub	fp, #32
2c82c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c830     1C 00 90 5D |  if_ne	jmp	#LR__4572
2c834     04 4E 05 F1 | 	add	fp, #4
2c838     A7 FA 01 FB | 	rdlong	result1, fp
2c83c     04 4E 85 F1 | 	sub	fp, #4
2c840     11 FA 05 F1 | 	add	result1, #17
2c844     FD 04 48 FC | 	wrbyte	#2, result1
2c848     02 FA 05 F6 | 	mov	result1, #2
2c84c     30 04 90 FD | 	jmp	#LR__4583
2c850                 | LR__4572
2c850     20 4E 05 F1 | 	add	fp, #32
2c854     A7 FA 01 FB | 	rdlong	result1, fp
2c858     0C 4E 05 F1 | 	add	fp, #12
2c85c     A7 1E 02 FB | 	rdlong	local01, fp
2c860     0F FB 01 F1 | 	add	result1, local01
2c864     0C 4E 85 F1 | 	sub	fp, #12
2c868     A7 FA 61 FC | 	wrlong	result1, fp
2c86c     14 4E 85 F1 | 	sub	fp, #20
2c870     A7 FA 01 FB | 	rdlong	result1, fp
2c874     09 FA 45 F0 | 	shr	result1, #9
2c878     1C 4E 05 F1 | 	add	fp, #28
2c87c     A7 FA 61 FC | 	wrlong	result1, fp
2c880     28 4E 85 F1 | 	sub	fp, #40
2c884     01 FA 15 F2 | 	cmp	result1, #1 wc
2c888     60 01 90 CD |  if_b	jmp	#LR__4576
2c88c     2C 4E 05 F1 | 	add	fp, #44
2c890     A7 FA 01 FB | 	rdlong	result1, fp
2c894     04 4E 85 F1 | 	sub	fp, #4
2c898     A7 18 02 FB | 	rdlong	arg04, fp
2c89c     0C FB 01 F1 | 	add	result1, arg04
2c8a0     10 4E 85 F1 | 	sub	fp, #16
2c8a4     A7 18 02 FB | 	rdlong	arg04, fp
2c8a8     18 4E 85 F1 | 	sub	fp, #24
2c8ac     0A 18 06 F1 | 	add	arg04, #10
2c8b0     0C 19 E2 FA | 	rdword	arg04, arg04
2c8b4     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c8b8     28 00 90 ED |  if_be	jmp	#LR__4573
2c8bc     18 4E 05 F1 | 	add	fp, #24
2c8c0     A7 FA 01 FB | 	rdlong	result1, fp
2c8c4     0A FA 05 F1 | 	add	result1, #10
2c8c8     FD FA E1 FA | 	rdword	result1, result1
2c8cc     14 4E 05 F1 | 	add	fp, #20
2c8d0     A7 18 02 FB | 	rdlong	arg04, fp
2c8d4     0C FB 81 F1 | 	sub	result1, arg04
2c8d8     04 4E 85 F1 | 	sub	fp, #4
2c8dc     A7 FA 61 FC | 	wrlong	result1, fp
2c8e0     28 4E 85 F1 | 	sub	fp, #40
2c8e4                 | LR__4573
2c8e4     18 4E 05 F1 | 	add	fp, #24
2c8e8     A7 18 02 FB | 	rdlong	arg04, fp
2c8ec     01 18 06 F1 | 	add	arg04, #1
2c8f0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c8f4     18 4E 05 F1 | 	add	fp, #24
2c8f8     A7 14 02 FB | 	rdlong	arg02, fp
2c8fc     10 4E 85 F1 | 	sub	fp, #16
2c900     A7 16 02 FB | 	rdlong	arg03, fp
2c904     08 4E 05 F1 | 	add	fp, #8
2c908     A7 18 02 FB | 	rdlong	arg04, fp
2c90c     28 4E 85 F1 | 	sub	fp, #40
2c910     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c914     00 FA 0D F2 | 	cmp	result1, #0 wz
2c918     1C 00 90 AD |  if_e	jmp	#LR__4574
2c91c     04 4E 05 F1 | 	add	fp, #4
2c920     A7 1E 02 FB | 	rdlong	local01, fp
2c924     04 4E 85 F1 | 	sub	fp, #4
2c928     11 1E 06 F1 | 	add	local01, #17
2c92c     0F 03 48 FC | 	wrbyte	#1, local01
2c930     01 FA 05 F6 | 	mov	result1, #1
2c934     48 03 90 FD | 	jmp	#LR__4583
2c938                 | LR__4574
2c938     04 4E 05 F1 | 	add	fp, #4
2c93c     A7 FA 01 FB | 	rdlong	result1, fp
2c940     1C FA 05 F1 | 	add	result1, #28
2c944     FD FA 01 FB | 	rdlong	result1, result1
2c948     1C 4E 05 F1 | 	add	fp, #28
2c94c     A7 20 02 FB | 	rdlong	local02, fp
2c950     10 FB 81 F1 | 	sub	result1, local02
2c954     08 4E 05 F1 | 	add	fp, #8
2c958     A7 18 02 FB | 	rdlong	arg04, fp
2c95c     28 4E 85 F1 | 	sub	fp, #40
2c960     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c964     68 00 90 3D |  if_ae	jmp	#LR__4575
2c968     04 4E 05 F1 | 	add	fp, #4
2c96c     A7 12 02 FB | 	rdlong	arg01, fp
2c970     28 12 06 F1 | 	add	arg01, #40
2c974     2C 4E 05 F1 | 	add	fp, #44
2c978     A7 14 02 FB | 	rdlong	arg02, fp
2c97c     2C 4E 85 F1 | 	sub	fp, #44
2c980     A7 FA 01 FB | 	rdlong	result1, fp
2c984     1C FA 05 F1 | 	add	result1, #28
2c988     FD 22 02 FB | 	rdlong	local03, result1
2c98c     1C 4E 05 F1 | 	add	fp, #28
2c990     A7 18 02 FB | 	rdlong	arg04, fp
2c994     20 4E 85 F1 | 	sub	fp, #32
2c998     0C 23 82 F1 | 	sub	local03, arg04
2c99c     09 22 66 F0 | 	shl	local03, #9
2c9a0     11 15 02 F1 | 	add	arg02, local03
2c9a4     09 16 C6 F9 | 	decod	arg03, #9
2c9a8     B0 3E BF FD | 	call	#__system____builtin_memmove
2c9ac     04 4E 05 F1 | 	add	fp, #4
2c9b0     A7 18 02 FB | 	rdlong	arg04, fp
2c9b4     0C FB 01 F6 | 	mov	result1, arg04
2c9b8     04 4E 85 F1 | 	sub	fp, #4
2c9bc     10 18 06 F1 | 	add	arg04, #16
2c9c0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c9c4     7F 18 06 F5 | 	and	arg04, #127
2c9c8     10 FA 05 F1 | 	add	result1, #16
2c9cc     FD 18 42 FC | 	wrbyte	arg04, result1
2c9d0                 | LR__4575
2c9d0     28 4E 05 F1 | 	add	fp, #40
2c9d4     A7 FA 01 FB | 	rdlong	result1, fp
2c9d8     09 FA 65 F0 | 	shl	result1, #9
2c9dc     04 4E 85 F1 | 	sub	fp, #4
2c9e0     A7 FA 61 FC | 	wrlong	result1, fp
2c9e4     24 4E 85 F1 | 	sub	fp, #36
2c9e8                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2c9e8                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2c9e8                 | ' 				}
2c9e8                 | ' 
2c9e8                 | ' 
2c9e8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2c9e8                 | ' 				continue;
2c9e8     74 01 90 FD | 	jmp	#LR__4579
2c9ec                 | LR__4576
2c9ec     04 4E 05 F1 | 	add	fp, #4
2c9f0     A7 20 02 FB | 	rdlong	local02, fp
2c9f4     1C 20 06 F1 | 	add	local02, #28
2c9f8     10 FB 01 FB | 	rdlong	result1, local02
2c9fc     1C 4E 05 F1 | 	add	fp, #28
2ca00     A7 20 02 FB | 	rdlong	local02, fp
2ca04     20 4E 85 F1 | 	sub	fp, #32
2ca08     10 FB 09 F2 | 	cmp	result1, local02 wz
2ca0c     90 00 90 AD |  if_e	jmp	#LR__4577
2ca10     04 4E 05 F1 | 	add	fp, #4
2ca14     A7 FA 01 FB | 	rdlong	result1, fp
2ca18     FD 22 02 F6 | 	mov	local03, result1
2ca1c     04 4E 85 F1 | 	sub	fp, #4
2ca20     14 22 06 F1 | 	add	local03, #20
2ca24     11 23 02 FB | 	rdlong	local03, local03
2ca28     0C FA 05 F1 | 	add	result1, #12
2ca2c     FD 24 02 FB | 	rdlong	local04, result1
2ca30     12 27 02 F6 | 	mov	local05, local04
2ca34     13 23 12 F2 | 	cmp	local03, local05 wc
2ca38     64 00 90 3D |  if_ae	jmp	#LR__4577
2ca3c     18 4E 05 F1 | 	add	fp, #24
2ca40     A7 18 02 FB | 	rdlong	arg04, fp
2ca44     01 18 06 F1 | 	add	arg04, #1
2ca48     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ca4c     14 4E 85 F1 | 	sub	fp, #20
2ca50     A7 28 02 FB | 	rdlong	local06, fp
2ca54     28 28 06 F1 | 	add	local06, #40
2ca58     14 2B 02 F6 | 	mov	local07, local06
2ca5c     1C 4E 05 F1 | 	add	fp, #28
2ca60     A7 2C 02 FB | 	rdlong	local08, fp
2ca64     20 4E 85 F1 | 	sub	fp, #32
2ca68     01 2E 06 F6 | 	mov	local09, #1
2ca6c     15 15 02 F6 | 	mov	arg02, local07
2ca70     16 17 02 F6 | 	mov	arg03, local08
2ca74     01 18 06 F6 | 	mov	arg04, #1
2ca78     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2ca7c     FD 30 0A F6 | 	mov	local10, result1 wz
2ca80     1C 00 90 AD |  if_e	jmp	#LR__4577
2ca84     04 4E 05 F1 | 	add	fp, #4
2ca88     A7 30 02 FB | 	rdlong	local10, fp
2ca8c     04 4E 85 F1 | 	sub	fp, #4
2ca90     11 30 06 F1 | 	add	local10, #17
2ca94     18 03 48 FC | 	wrbyte	#1, local10
2ca98                 | ' 				fp->fptr < fp->obj.objsize &&
2ca98                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2ca98                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2ca98     01 FA 05 F6 | 	mov	result1, #1
2ca9c     E0 01 90 FD | 	jmp	#LR__4583
2caa0                 | LR__4577
2caa0     04 4E 05 F1 | 	add	fp, #4
2caa4     A7 18 02 FB | 	rdlong	arg04, fp
2caa8     1C 4E 05 F1 | 	add	fp, #28
2caac     A7 FA 01 FB | 	rdlong	result1, fp
2cab0     20 4E 85 F1 | 	sub	fp, #32
2cab4     1C 18 06 F1 | 	add	arg04, #28
2cab8     0C FB 61 FC | 	wrlong	result1, arg04
2cabc                 | LR__4578
2cabc     04 4E 05 F1 | 	add	fp, #4
2cac0     A7 FA 01 FB | 	rdlong	result1, fp
2cac4     14 FA 05 F1 | 	add	result1, #20
2cac8     FD FA 01 FB | 	rdlong	result1, result1
2cacc     FF FB 05 F5 | 	and	result1, #511
2cad0     09 32 C6 F9 | 	decod	local11, #9
2cad4     FD 32 82 F1 | 	sub	local11, result1
2cad8     20 4E 05 F1 | 	add	fp, #32
2cadc     A7 32 62 FC | 	wrlong	local11, fp
2cae0     18 4E 85 F1 | 	sub	fp, #24
2cae4     A7 FA 01 FB | 	rdlong	result1, fp
2cae8     0C 4E 85 F1 | 	sub	fp, #12
2caec     FD 32 1A F2 | 	cmp	local11, result1 wcz
2caf0     0C 4E 05 11 |  if_a	add	fp, #12
2caf4     A7 32 02 1B |  if_a	rdlong	local11, fp
2caf8     18 4E 05 11 |  if_a	add	fp, #24
2cafc     A7 32 62 1C |  if_a	wrlong	local11, fp
2cb00     24 4E 85 11 |  if_a	sub	fp, #36
2cb04     04 4E 05 F1 | 	add	fp, #4
2cb08     A7 32 02 FB | 	rdlong	local11, fp
2cb0c     19 13 02 F6 | 	mov	arg01, local11
2cb10     28 12 06 F1 | 	add	arg01, #40
2cb14     14 32 06 F1 | 	add	local11, #20
2cb18     19 33 02 FB | 	rdlong	local11, local11
2cb1c     FF 33 06 F5 | 	and	local11, #511
2cb20     19 13 02 F1 | 	add	arg01, local11
2cb24     2C 4E 05 F1 | 	add	fp, #44
2cb28     A7 14 02 FB | 	rdlong	arg02, fp
2cb2c     0C 4E 85 F1 | 	sub	fp, #12
2cb30     A7 16 02 FB | 	rdlong	arg03, fp
2cb34     24 4E 85 F1 | 	sub	fp, #36
2cb38     20 3D BF FD | 	call	#__system____builtin_memmove
2cb3c     04 4E 05 F1 | 	add	fp, #4
2cb40     A7 FA 01 FB | 	rdlong	result1, fp
2cb44     FD 32 02 F6 | 	mov	local11, result1
2cb48     04 4E 85 F1 | 	sub	fp, #4
2cb4c     10 FA 05 F1 | 	add	result1, #16
2cb50     FD FA C1 FA | 	rdbyte	result1, result1
2cb54     80 FA 45 F5 | 	or	result1, #128
2cb58     10 32 06 F1 | 	add	local11, #16
2cb5c     19 FB 41 FC | 	wrbyte	result1, local11
2cb60                 | LR__4579
2cb60     0C 4E 05 F1 | 	add	fp, #12
2cb64     A7 32 02 FB | 	rdlong	local11, fp
2cb68     18 4E 05 F1 | 	add	fp, #24
2cb6c     A7 FA 01 FB | 	rdlong	result1, fp
2cb70     FD 32 82 F1 | 	sub	local11, result1
2cb74     18 4E 85 F1 | 	sub	fp, #24
2cb78     A7 32 62 FC | 	wrlong	local11, fp
2cb7c     04 4E 05 F1 | 	add	fp, #4
2cb80     A7 34 02 FB | 	rdlong	local12, fp
2cb84     1A 33 02 FB | 	rdlong	local11, local12
2cb88     14 4E 05 F1 | 	add	fp, #20
2cb8c     A7 36 02 FB | 	rdlong	local13, fp
2cb90     1B 33 02 F1 | 	add	local11, local13
2cb94     1A 33 62 FC | 	wrlong	local11, local12
2cb98     0C 4E 05 F1 | 	add	fp, #12
2cb9c     A7 32 02 FB | 	rdlong	local11, fp
2cba0     0C 4E 85 F1 | 	sub	fp, #12
2cba4     A7 38 02 FB | 	rdlong	local14, fp
2cba8     1C 33 02 F1 | 	add	local11, local14
2cbac     0C 4E 05 F1 | 	add	fp, #12
2cbb0     A7 32 62 FC | 	wrlong	local11, fp
2cbb4     2C 4E 85 F1 | 	sub	fp, #44
2cbb8     A7 3A 02 FB | 	rdlong	local15, fp
2cbbc     1D 33 02 F6 | 	mov	local11, local15
2cbc0     14 3A 06 F1 | 	add	local15, #20
2cbc4     1D 3B 02 FB | 	rdlong	local15, local15
2cbc8     20 4E 05 F1 | 	add	fp, #32
2cbcc     A7 3C 02 FB | 	rdlong	local16, fp
2cbd0     1E 3B 02 F1 | 	add	local15, local16
2cbd4     14 32 06 F1 | 	add	local11, #20
2cbd8     19 3B 62 FC | 	wrlong	local15, local11
2cbdc     20 4E 85 F1 | 	sub	fp, #32
2cbe0     A7 3E 02 FB | 	rdlong	local17, fp
2cbe4     1F 33 02 F6 | 	mov	local11, local17
2cbe8     1F 41 02 F6 | 	mov	local18, local17
2cbec     04 4E 85 F1 | 	sub	fp, #4
2cbf0     14 3E 06 F1 | 	add	local17, #20
2cbf4     1F 43 02 FB | 	rdlong	local19, local17
2cbf8     0C 40 06 F1 | 	add	local18, #12
2cbfc     20 45 02 FB | 	rdlong	local20, local18
2cc00     22 43 1A F2 | 	cmp	local19, local20 wcz
2cc04     24 00 90 ED |  if_be	jmp	#LR__4580
2cc08     04 4E 05 F1 | 	add	fp, #4
2cc0c     A7 26 02 FB | 	rdlong	local05, fp
2cc10     04 4E 85 F1 | 	sub	fp, #4
2cc14     13 23 02 F6 | 	mov	local03, local05
2cc18     14 22 06 F1 | 	add	local03, #20
2cc1c     11 25 02 FB | 	rdlong	local04, local03
2cc20     14 22 86 F1 | 	sub	local03, #20
2cc24     12 47 02 F6 | 	mov	local21, local04
2cc28     20 00 90 FD | 	jmp	#LR__4581
2cc2c                 | LR__4580
2cc2c     04 4E 05 F1 | 	add	fp, #4
2cc30     A7 2A 02 FB | 	rdlong	local07, fp
2cc34     04 4E 85 F1 | 	sub	fp, #4
2cc38     15 31 02 F6 | 	mov	local10, local07
2cc3c     0C 30 06 F1 | 	add	local10, #12
2cc40     18 2D 02 FB | 	rdlong	local08, local10
2cc44     0C 30 86 F1 | 	sub	local10, #12
2cc48     16 47 02 F6 | 	mov	local21, local08
2cc4c                 | LR__4581
2cc4c     0C 32 06 F1 | 	add	local11, #12
2cc50     19 47 62 FC | 	wrlong	local21, local11
2cc54     5C F9 9F FD | 	jmp	#LR__4563
2cc58                 | LR__4582
2cc58     04 4E 05 F1 | 	add	fp, #4
2cc5c     A7 34 02 FB | 	rdlong	local12, fp
2cc60     1A 1F 02 F6 | 	mov	local01, local12
2cc64     04 4E 85 F1 | 	sub	fp, #4
2cc68     10 34 06 F1 | 	add	local12, #16
2cc6c     1A 33 C2 FA | 	rdbyte	local11, local12
2cc70     40 32 46 F5 | 	or	local11, #64
2cc74     10 1E 06 F1 | 	add	local01, #16
2cc78     0F 33 42 FC | 	wrbyte	local11, local01
2cc7c                 | ' 
2cc7c                 | ' 
2cc7c                 | ' 
2cc7c                 | ' 
2cc7c                 | ' 
2cc7c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cc7c                 | ' 		fp->flag |=  0x80 ;
2cc7c                 | ' 
2cc7c                 | ' 	}
2cc7c                 | ' 
2cc7c                 | ' 	fp->flag |=  0x40 ;
2cc7c                 | ' 
2cc7c                 | ' 	return FR_OK ;
2cc7c     00 FA 05 F6 | 	mov	result1, #0
2cc80                 | LR__4583
2cc80     A7 F0 03 F6 | 	mov	ptra, fp
2cc84     B2 00 A0 FD | 	call	#popregs_
2cc88                 | _fatfs_cc_f_write_ret
2cc88     2D 00 64 FD | 	ret
2cc8c                 | 
2cc8c                 | _fatfs_cc_f_sync
2cc8c     00 4A 05 F6 | 	mov	COUNT_, #0
2cc90     A8 00 A0 FD | 	call	#pushregs_
2cc94     18 F0 07 F1 | 	add	ptra, #24
2cc98     04 4E 05 F1 | 	add	fp, #4
2cc9c     A7 12 62 FC | 	wrlong	arg01, fp
2cca0     08 4E 05 F1 | 	add	fp, #8
2cca4     A7 14 02 F6 | 	mov	arg02, fp
2cca8     0C 4E 85 F1 | 	sub	fp, #12
2ccac     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2ccb0     08 4E 05 F1 | 	add	fp, #8
2ccb4     A7 FA 61 FC | 	wrlong	result1, fp
2ccb8     08 4E 85 F1 | 	sub	fp, #8
2ccbc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ccc0     C0 01 90 5D |  if_ne	jmp	#LR__4593
2ccc4     04 4E 05 F1 | 	add	fp, #4
2ccc8     A7 18 02 FB | 	rdlong	arg04, fp
2cccc     04 4E 85 F1 | 	sub	fp, #4
2ccd0     10 18 06 F1 | 	add	arg04, #16
2ccd4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ccd8     40 18 CE F7 | 	test	arg04, #64 wz
2ccdc     A4 01 90 AD |  if_e	jmp	#LR__4592
2cce0     04 4E 05 F1 | 	add	fp, #4
2cce4     A7 18 02 FB | 	rdlong	arg04, fp
2cce8     04 4E 85 F1 | 	sub	fp, #4
2ccec     10 18 06 F1 | 	add	arg04, #16
2ccf0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ccf4     80 18 CE F7 | 	test	arg04, #128 wz
2ccf8     64 00 90 AD |  if_e	jmp	#LR__4590
2ccfc     0C 4E 05 F1 | 	add	fp, #12
2cd00     A7 18 02 FB | 	rdlong	arg04, fp
2cd04     01 18 06 F1 | 	add	arg04, #1
2cd08     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cd0c     08 4E 85 F1 | 	sub	fp, #8
2cd10     A7 18 02 FB | 	rdlong	arg04, fp
2cd14     0C 15 02 F6 | 	mov	arg02, arg04
2cd18     28 14 06 F1 | 	add	arg02, #40
2cd1c     04 4E 85 F1 | 	sub	fp, #4
2cd20     1C 18 06 F1 | 	add	arg04, #28
2cd24     0C 17 02 FB | 	rdlong	arg03, arg04
2cd28     01 18 06 F6 | 	mov	arg04, #1
2cd2c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2cd30     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd34     01 FA 05 56 |  if_ne	mov	result1, #1
2cd38     54 01 90 5D |  if_ne	jmp	#LR__4594
2cd3c     04 4E 05 F1 | 	add	fp, #4
2cd40     A7 18 02 FB | 	rdlong	arg04, fp
2cd44     0C 17 02 F6 | 	mov	arg03, arg04
2cd48     04 4E 85 F1 | 	sub	fp, #4
2cd4c     10 18 06 F1 | 	add	arg04, #16
2cd50     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd54     7F 18 06 F5 | 	and	arg04, #127
2cd58     10 16 06 F1 | 	add	arg03, #16
2cd5c     0B 19 42 FC | 	wrbyte	arg04, arg03
2cd60                 | LR__4590
2cd60     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cd64     10 4E 05 F1 | 	add	fp, #16
2cd68     A7 FA 61 FC | 	wrlong	result1, fp
2cd6c     04 4E 85 F1 | 	sub	fp, #4
2cd70     A7 12 02 FB | 	rdlong	arg01, fp
2cd74     08 4E 85 F1 | 	sub	fp, #8
2cd78     A7 18 02 FB | 	rdlong	arg04, fp
2cd7c     04 4E 85 F1 | 	sub	fp, #4
2cd80     20 18 06 F1 | 	add	arg04, #32
2cd84     0C 15 02 FB | 	rdlong	arg02, arg04
2cd88     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cd8c     08 4E 05 F1 | 	add	fp, #8
2cd90     A7 FA 61 FC | 	wrlong	result1, fp
2cd94     08 4E 85 F1 | 	sub	fp, #8
2cd98     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd9c     E4 00 90 5D |  if_ne	jmp	#LR__4591
2cda0     04 4E 05 F1 | 	add	fp, #4
2cda4     A7 18 02 FB | 	rdlong	arg04, fp
2cda8     24 18 06 F1 | 	add	arg04, #36
2cdac     0C 19 02 FB | 	rdlong	arg04, arg04
2cdb0     10 4E 05 F1 | 	add	fp, #16
2cdb4     A7 18 62 FC | 	wrlong	arg04, fp
2cdb8     0C 17 02 F6 | 	mov	arg03, arg04
2cdbc     0B 16 06 F1 | 	add	arg03, #11
2cdc0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cdc4     20 16 46 F5 | 	or	arg03, #32
2cdc8     0B 18 06 F1 | 	add	arg04, #11
2cdcc     0C 17 42 FC | 	wrbyte	arg03, arg04
2cdd0     10 4E 85 F1 | 	sub	fp, #16
2cdd4     A7 18 02 FB | 	rdlong	arg04, fp
2cdd8     0C 13 02 FB | 	rdlong	arg01, arg04
2cddc     10 4E 05 F1 | 	add	fp, #16
2cde0     A7 14 02 FB | 	rdlong	arg02, fp
2cde4     14 4E 85 F1 | 	sub	fp, #20
2cde8     08 18 06 F1 | 	add	arg04, #8
2cdec     0C 17 02 FB | 	rdlong	arg03, arg04
2cdf0     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cdf4     14 4E 05 F1 | 	add	fp, #20
2cdf8     A7 12 02 FB | 	rdlong	arg01, fp
2cdfc     1C 12 06 F1 | 	add	arg01, #28
2ce00     10 4E 85 F1 | 	sub	fp, #16
2ce04     A7 18 02 FB | 	rdlong	arg04, fp
2ce08     0C 18 06 F1 | 	add	arg04, #12
2ce0c     0C 15 02 FB | 	rdlong	arg02, arg04
2ce10     09 15 62 FC | 	wrlong	arg02, arg01
2ce14     10 4E 05 F1 | 	add	fp, #16
2ce18     A7 12 02 FB | 	rdlong	arg01, fp
2ce1c     16 12 06 F1 | 	add	arg01, #22
2ce20     04 4E 85 F1 | 	sub	fp, #4
2ce24     A7 14 02 FB | 	rdlong	arg02, fp
2ce28     09 15 62 FC | 	wrlong	arg02, arg01
2ce2c     04 4E 05 F1 | 	add	fp, #4
2ce30     A7 12 02 FB | 	rdlong	arg01, fp
2ce34     12 12 06 F1 | 	add	arg01, #18
2ce38     09 01 58 FC | 	wrword	#0, arg01
2ce3c     08 4E 85 F1 | 	sub	fp, #8
2ce40     A7 18 02 FB | 	rdlong	arg04, fp
2ce44     03 18 06 F1 | 	add	arg04, #3
2ce48     0C 03 48 FC | 	wrbyte	#1, arg04
2ce4c     A7 12 02 FB | 	rdlong	arg01, fp
2ce50     0C 4E 85 F1 | 	sub	fp, #12
2ce54     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2ce58     08 4E 05 F1 | 	add	fp, #8
2ce5c     A7 FA 61 FC | 	wrlong	result1, fp
2ce60     04 4E 85 F1 | 	sub	fp, #4
2ce64     A7 18 02 FB | 	rdlong	arg04, fp
2ce68     0C 17 02 F6 | 	mov	arg03, arg04
2ce6c     04 4E 85 F1 | 	sub	fp, #4
2ce70     10 18 06 F1 | 	add	arg04, #16
2ce74     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce78     BF 18 06 F5 | 	and	arg04, #191
2ce7c     10 16 06 F1 | 	add	arg03, #16
2ce80     0B 19 42 FC | 	wrbyte	arg04, arg03
2ce84                 | LR__4591
2ce84                 | LR__4592
2ce84                 | LR__4593
2ce84                 | ' 					dir = fp->dir_ptr;
2ce84                 | ' 					dir[ 11 ] |=  0x20 ;
2ce84                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2ce84                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2ce84                 | ' 					st_dword(dir +  22 , tm);
2ce84                 | ' 					st_word(dir +  18 , 0);
2ce84                 | ' 					fs->wflag = 1;
2ce84                 | ' 					res = sync_fs(fs);
2ce84                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2ce84                 | ' 				}
2ce84                 | ' 			}
2ce84                 | ' 		}
2ce84                 | ' 	}
2ce84                 | ' 
2ce84                 | ' 	return res ;
2ce84     08 4E 05 F1 | 	add	fp, #8
2ce88     A7 FA 01 FB | 	rdlong	result1, fp
2ce8c     08 4E 85 F1 | 	sub	fp, #8
2ce90                 | LR__4594
2ce90     A7 F0 03 F6 | 	mov	ptra, fp
2ce94     B2 00 A0 FD | 	call	#popregs_
2ce98                 | _fatfs_cc_f_sync_ret
2ce98     2D 00 64 FD | 	ret
2ce9c                 | 
2ce9c                 | _fatfs_cc_f_close
2ce9c     01 4A 05 F6 | 	mov	COUNT_, #1
2cea0     A8 00 A0 FD | 	call	#pushregs_
2cea4     10 F0 07 F1 | 	add	ptra, #16
2cea8     04 4E 05 F1 | 	add	fp, #4
2ceac     A7 12 62 FC | 	wrlong	arg01, fp
2ceb0     04 4E 85 F1 | 	sub	fp, #4
2ceb4     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2ceb8     08 4E 05 F1 | 	add	fp, #8
2cebc     A7 FA 61 FC | 	wrlong	result1, fp
2cec0     08 4E 85 F1 | 	sub	fp, #8
2cec4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cec8     38 00 90 5D |  if_ne	jmp	#LR__4600
2cecc     04 4E 05 F1 | 	add	fp, #4
2ced0     A7 12 02 FB | 	rdlong	arg01, fp
2ced4     08 4E 05 F1 | 	add	fp, #8
2ced8     A7 14 02 F6 | 	mov	arg02, fp
2cedc     0C 4E 85 F1 | 	sub	fp, #12
2cee0     9C E6 BF FD | 	call	#_fatfs_cc_validate
2cee4     08 4E 05 F1 | 	add	fp, #8
2cee8     A7 FA 61 FC | 	wrlong	result1, fp
2ceec     08 4E 85 F1 | 	sub	fp, #8
2cef0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cef4     04 4E 05 A1 |  if_e	add	fp, #4
2cef8     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cefc     04 4E 85 A1 |  if_e	sub	fp, #4
2cf00     0F 01 68 AC |  if_e	wrlong	#0, local01
2cf04                 | LR__4600
2cf04                 | ' 
2cf04                 | ' 
2cf04                 | ' 
2cf04                 | ' 
2cf04                 | ' 			fp->obj.fs = 0;
2cf04                 | ' #line 4192 "ff.c"
2cf04                 | ' 		}
2cf04                 | ' 	}
2cf04                 | ' 	return res;
2cf04     08 4E 05 F1 | 	add	fp, #8
2cf08     A7 FA 01 FB | 	rdlong	result1, fp
2cf0c     08 4E 85 F1 | 	sub	fp, #8
2cf10     A7 F0 03 F6 | 	mov	ptra, fp
2cf14     B2 00 A0 FD | 	call	#popregs_
2cf18                 | _fatfs_cc_f_close_ret
2cf18     2D 00 64 FD | 	ret
2cf1c                 | 
2cf1c                 | _fatfs_cc_f_lseek
2cf1c     00 4A 05 F6 | 	mov	COUNT_, #0
2cf20     A8 00 A0 FD | 	call	#pushregs_
2cf24     24 F0 07 F1 | 	add	ptra, #36
2cf28     04 4E 05 F1 | 	add	fp, #4
2cf2c     A7 12 62 FC | 	wrlong	arg01, fp
2cf30     04 4E 05 F1 | 	add	fp, #4
2cf34     A7 14 62 FC | 	wrlong	arg02, fp
2cf38     04 4E 85 F1 | 	sub	fp, #4
2cf3c     A7 12 02 FB | 	rdlong	arg01, fp
2cf40     0C 4E 05 F1 | 	add	fp, #12
2cf44     A7 14 02 F6 | 	mov	arg02, fp
2cf48     10 4E 85 F1 | 	sub	fp, #16
2cf4c     30 E6 BF FD | 	call	#_fatfs_cc_validate
2cf50     0C 4E 05 F1 | 	add	fp, #12
2cf54     A7 FA 61 FC | 	wrlong	result1, fp
2cf58     0C 4E 85 F1 | 	sub	fp, #12
2cf5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf60     1C 00 90 5D |  if_ne	jmp	#LR__4610
2cf64     04 4E 05 F1 | 	add	fp, #4
2cf68     A7 18 02 FB | 	rdlong	arg04, fp
2cf6c     11 18 06 F1 | 	add	arg04, #17
2cf70     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cf74     08 4E 05 F1 | 	add	fp, #8
2cf78     A7 18 62 FC | 	wrlong	arg04, fp
2cf7c     0C 4E 85 F1 | 	sub	fp, #12
2cf80                 | LR__4610
2cf80     0C 4E 05 F1 | 	add	fp, #12
2cf84     A7 18 0A FB | 	rdlong	arg04, fp wz
2cf88     0C 4E 85 F1 | 	sub	fp, #12
2cf8c     0C 4E 05 51 |  if_ne	add	fp, #12
2cf90     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2cf94     0C 4E 85 51 |  if_ne	sub	fp, #12
2cf98     40 06 90 5D |  if_ne	jmp	#LR__4633
2cf9c     04 4E 05 F1 | 	add	fp, #4
2cfa0     A7 18 02 FB | 	rdlong	arg04, fp
2cfa4     04 4E 05 F1 | 	add	fp, #4
2cfa8     A7 16 02 FB | 	rdlong	arg03, fp
2cfac     08 4E 85 F1 | 	sub	fp, #8
2cfb0     0C 18 06 F1 | 	add	arg04, #12
2cfb4     0C 19 02 FB | 	rdlong	arg04, arg04
2cfb8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2cfbc     3C 00 90 ED |  if_be	jmp	#LR__4611
2cfc0     04 4E 05 F1 | 	add	fp, #4
2cfc4     A7 16 02 FB | 	rdlong	arg03, fp
2cfc8     04 4E 85 F1 | 	sub	fp, #4
2cfcc     10 16 06 F1 | 	add	arg03, #16
2cfd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cfd4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2cfd8     02 16 CE F7 | 	test	arg03, #2 wz
2cfdc     1C 00 90 5D |  if_ne	jmp	#LR__4611
2cfe0     04 4E 05 F1 | 	add	fp, #4
2cfe4     A7 16 02 FB | 	rdlong	arg03, fp
2cfe8     0C 16 06 F1 | 	add	arg03, #12
2cfec     0B 17 02 FB | 	rdlong	arg03, arg03
2cff0     04 4E 05 F1 | 	add	fp, #4
2cff4     A7 16 62 FC | 	wrlong	arg03, fp
2cff8     08 4E 85 F1 | 	sub	fp, #8
2cffc                 | LR__4611
2cffc     04 4E 05 F1 | 	add	fp, #4
2d000     A7 16 02 FB | 	rdlong	arg03, fp
2d004     14 16 06 F1 | 	add	arg03, #20
2d008     0B 17 02 FB | 	rdlong	arg03, arg03
2d00c     1C 4E 05 F1 | 	add	fp, #28
2d010     A7 16 62 FC | 	wrlong	arg03, fp
2d014     1C 4E 85 F1 | 	sub	fp, #28
2d018     A7 16 02 FB | 	rdlong	arg03, fp
2d01c     18 4E 05 F1 | 	add	fp, #24
2d020     A7 00 68 FC | 	wrlong	#0, fp
2d024     14 16 06 F1 | 	add	arg03, #20
2d028     0B 01 68 FC | 	wrlong	#0, arg03
2d02c     14 4E 85 F1 | 	sub	fp, #20
2d030     A7 16 02 FB | 	rdlong	arg03, fp
2d034     08 4E 85 F1 | 	sub	fp, #8
2d038     01 16 16 F2 | 	cmp	arg03, #1 wc
2d03c     E4 03 90 CD |  if_b	jmp	#LR__4627
2d040     10 4E 05 F1 | 	add	fp, #16
2d044     A7 16 02 FB | 	rdlong	arg03, fp
2d048     0A 16 06 F1 | 	add	arg03, #10
2d04c     0B 19 E2 FA | 	rdword	arg04, arg03
2d050     09 18 66 F0 | 	shl	arg04, #9
2d054     08 4E 05 F1 | 	add	fp, #8
2d058     A7 18 62 FC | 	wrlong	arg04, fp
2d05c     08 4E 05 F1 | 	add	fp, #8
2d060     A7 18 02 FB | 	rdlong	arg04, fp
2d064     20 4E 85 F1 | 	sub	fp, #32
2d068     01 18 16 F2 | 	cmp	arg04, #1 wc
2d06c     AC 00 90 CD |  if_b	jmp	#LR__4612
2d070     08 4E 05 F1 | 	add	fp, #8
2d074     A7 18 02 FB | 	rdlong	arg04, fp
2d078     01 18 86 F1 | 	sub	arg04, #1
2d07c     10 4E 05 F1 | 	add	fp, #16
2d080     A7 16 02 FB | 	rdlong	arg03, fp
2d084     0B 19 12 FD | 	qdiv	arg04, arg03
2d088     08 4E 05 F1 | 	add	fp, #8
2d08c     A7 FA 01 FB | 	rdlong	result1, fp
2d090     01 FA 85 F1 | 	sub	result1, #1
2d094     18 18 62 FD | 	getqx	arg04
2d098     0B FB 11 FD | 	qdiv	result1, arg03
2d09c     20 4E 85 F1 | 	sub	fp, #32
2d0a0     18 16 62 FD | 	getqx	arg03
2d0a4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d0a8     70 00 90 CD |  if_b	jmp	#LR__4612
2d0ac     04 4E 05 F1 | 	add	fp, #4
2d0b0     A7 16 02 FB | 	rdlong	arg03, fp
2d0b4     1C 4E 05 F1 | 	add	fp, #28
2d0b8     A7 FA 01 FB | 	rdlong	result1, fp
2d0bc     01 FA 85 F1 | 	sub	result1, #1
2d0c0     08 4E 85 F1 | 	sub	fp, #8
2d0c4     A7 18 02 FB | 	rdlong	arg04, fp
2d0c8     01 18 86 F1 | 	sub	arg04, #1
2d0cc     0C FB 21 F5 | 	andn	result1, arg04
2d0d0     14 16 06 F1 | 	add	arg03, #20
2d0d4     0B FB 61 FC | 	wrlong	result1, arg03
2d0d8     10 4E 85 F1 | 	sub	fp, #16
2d0dc     A7 16 02 FB | 	rdlong	arg03, fp
2d0e0     04 4E 85 F1 | 	sub	fp, #4
2d0e4     A7 18 02 FB | 	rdlong	arg04, fp
2d0e8     14 18 06 F1 | 	add	arg04, #20
2d0ec     0C 19 02 FB | 	rdlong	arg04, arg04
2d0f0     0C 17 82 F1 | 	sub	arg03, arg04
2d0f4     04 4E 05 F1 | 	add	fp, #4
2d0f8     A7 16 62 FC | 	wrlong	arg03, fp
2d0fc     04 4E 85 F1 | 	sub	fp, #4
2d100     A7 16 02 FB | 	rdlong	arg03, fp
2d104     18 16 06 F1 | 	add	arg03, #24
2d108     0B 17 02 FB | 	rdlong	arg03, arg03
2d10c     10 4E 05 F1 | 	add	fp, #16
2d110     A7 16 62 FC | 	wrlong	arg03, fp
2d114     14 4E 85 F1 | 	sub	fp, #20
2d118     D0 00 90 FD | 	jmp	#LR__4616
2d11c                 | LR__4612
2d11c     04 4E 05 F1 | 	add	fp, #4
2d120     A7 16 02 FB | 	rdlong	arg03, fp
2d124     08 16 06 F1 | 	add	arg03, #8
2d128     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d12c     10 4E 05 F1 | 	add	fp, #16
2d130     A7 16 62 FC | 	wrlong	arg03, fp
2d134     14 4E 85 F1 | 	sub	fp, #20
2d138     94 00 90 5D |  if_ne	jmp	#LR__4615
2d13c     04 4E 05 F1 | 	add	fp, #4
2d140     A7 12 02 FB | 	rdlong	arg01, fp
2d144     04 4E 85 F1 | 	sub	fp, #4
2d148     00 14 06 F6 | 	mov	arg02, #0
2d14c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d150     14 4E 05 F1 | 	add	fp, #20
2d154     A7 FA 61 FC | 	wrlong	result1, fp
2d158     14 4E 85 F1 | 	sub	fp, #20
2d15c     01 FA 0D F2 | 	cmp	result1, #1 wz
2d160     1C 00 90 5D |  if_ne	jmp	#LR__4613
2d164     04 4E 05 F1 | 	add	fp, #4
2d168     A7 16 02 FB | 	rdlong	arg03, fp
2d16c     04 4E 85 F1 | 	sub	fp, #4
2d170     11 16 06 F1 | 	add	arg03, #17
2d174     0B 05 48 FC | 	wrbyte	#2, arg03
2d178     02 FA 05 F6 | 	mov	result1, #2
2d17c     5C 04 90 FD | 	jmp	#LR__4633
2d180                 | LR__4613
2d180     14 4E 05 F1 | 	add	fp, #20
2d184     A7 FA 01 FB | 	rdlong	result1, fp
2d188     14 4E 85 F1 | 	sub	fp, #20
2d18c     FF FF 7F FF 
2d190     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d194     1C 00 90 5D |  if_ne	jmp	#LR__4614
2d198     04 4E 05 F1 | 	add	fp, #4
2d19c     A7 16 02 FB | 	rdlong	arg03, fp
2d1a0     04 4E 85 F1 | 	sub	fp, #4
2d1a4     11 16 06 F1 | 	add	arg03, #17
2d1a8     0B 03 48 FC | 	wrbyte	#1, arg03
2d1ac     01 FA 05 F6 | 	mov	result1, #1
2d1b0     28 04 90 FD | 	jmp	#LR__4633
2d1b4                 | LR__4614
2d1b4     04 4E 05 F1 | 	add	fp, #4
2d1b8     A7 16 02 FB | 	rdlong	arg03, fp
2d1bc     10 4E 05 F1 | 	add	fp, #16
2d1c0     A7 18 02 FB | 	rdlong	arg04, fp
2d1c4     14 4E 85 F1 | 	sub	fp, #20
2d1c8     08 16 06 F1 | 	add	arg03, #8
2d1cc     0B 19 62 FC | 	wrlong	arg04, arg03
2d1d0                 | LR__4615
2d1d0     04 4E 05 F1 | 	add	fp, #4
2d1d4     A7 16 02 FB | 	rdlong	arg03, fp
2d1d8     10 4E 05 F1 | 	add	fp, #16
2d1dc     A7 18 02 FB | 	rdlong	arg04, fp
2d1e0     14 4E 85 F1 | 	sub	fp, #20
2d1e4     18 16 06 F1 | 	add	arg03, #24
2d1e8     0B 19 62 FC | 	wrlong	arg04, arg03
2d1ec                 | LR__4616
2d1ec     14 4E 05 F1 | 	add	fp, #20
2d1f0     A7 16 0A FB | 	rdlong	arg03, fp wz
2d1f4     14 4E 85 F1 | 	sub	fp, #20
2d1f8     28 02 90 AD |  if_e	jmp	#LR__4626
2d1fc                 | ' 				while (ofs > bcs) {
2d1fc                 | LR__4617
2d1fc     08 4E 05 F1 | 	add	fp, #8
2d200     A7 18 02 FB | 	rdlong	arg04, fp
2d204     10 4E 05 F1 | 	add	fp, #16
2d208     A7 16 02 FB | 	rdlong	arg03, fp
2d20c     18 4E 85 F1 | 	sub	fp, #24
2d210     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d214     68 01 90 ED |  if_be	jmp	#LR__4623
2d218     08 4E 05 F1 | 	add	fp, #8
2d21c     A7 18 02 FB | 	rdlong	arg04, fp
2d220     10 4E 05 F1 | 	add	fp, #16
2d224     A7 16 02 FB | 	rdlong	arg03, fp
2d228     0B 19 82 F1 | 	sub	arg04, arg03
2d22c     10 4E 85 F1 | 	sub	fp, #16
2d230     A7 18 62 FC | 	wrlong	arg04, fp
2d234     04 4E 85 F1 | 	sub	fp, #4
2d238     A7 18 02 FB | 	rdlong	arg04, fp
2d23c     0C FB 01 F6 | 	mov	result1, arg04
2d240     14 18 06 F1 | 	add	arg04, #20
2d244     0C 19 02 FB | 	rdlong	arg04, arg04
2d248     14 4E 05 F1 | 	add	fp, #20
2d24c     A7 16 02 FB | 	rdlong	arg03, fp
2d250     0B 19 02 F1 | 	add	arg04, arg03
2d254     14 FA 05 F1 | 	add	result1, #20
2d258     FD 18 62 FC | 	wrlong	arg04, result1
2d25c     14 4E 85 F1 | 	sub	fp, #20
2d260     A7 16 02 FB | 	rdlong	arg03, fp
2d264     04 4E 85 F1 | 	sub	fp, #4
2d268     10 16 06 F1 | 	add	arg03, #16
2d26c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d270     02 16 CE F7 | 	test	arg03, #2 wz
2d274     3C 00 90 AD |  if_e	jmp	#LR__4618
2d278     04 4E 05 F1 | 	add	fp, #4
2d27c     A7 12 02 FB | 	rdlong	arg01, fp
2d280     10 4E 05 F1 | 	add	fp, #16
2d284     A7 14 02 FB | 	rdlong	arg02, fp
2d288     14 4E 85 F1 | 	sub	fp, #20
2d28c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d290     14 4E 05 F1 | 	add	fp, #20
2d294     A7 FA 61 FC | 	wrlong	result1, fp
2d298     00 FA 4D F2 | 	cmps	result1, #0 wz
2d29c     14 4E 85 F1 | 	sub	fp, #20
2d2a0     08 4E 05 A1 |  if_e	add	fp, #8
2d2a4     A7 00 68 AC |  if_e	wrlong	#0, fp
2d2a8     08 4E 85 A1 |  if_e	sub	fp, #8
2d2ac                 | ' 							ofs = 0; break;
2d2ac     D0 00 90 AD |  if_e	jmp	#LR__4623
2d2b0     24 00 90 FD | 	jmp	#LR__4619
2d2b4                 | LR__4618
2d2b4     04 4E 05 F1 | 	add	fp, #4
2d2b8     A7 12 02 FB | 	rdlong	arg01, fp
2d2bc     10 4E 05 F1 | 	add	fp, #16
2d2c0     A7 14 02 FB | 	rdlong	arg02, fp
2d2c4     14 4E 85 F1 | 	sub	fp, #20
2d2c8     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d2cc     14 4E 05 F1 | 	add	fp, #20
2d2d0     A7 FA 61 FC | 	wrlong	result1, fp
2d2d4     14 4E 85 F1 | 	sub	fp, #20
2d2d8                 | LR__4619
2d2d8     14 4E 05 F1 | 	add	fp, #20
2d2dc     A7 16 02 FB | 	rdlong	arg03, fp
2d2e0     14 4E 85 F1 | 	sub	fp, #20
2d2e4     FF FF 7F FF 
2d2e8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d2ec     1C 00 90 5D |  if_ne	jmp	#LR__4620
2d2f0     04 4E 05 F1 | 	add	fp, #4
2d2f4     A7 16 02 FB | 	rdlong	arg03, fp
2d2f8     04 4E 85 F1 | 	sub	fp, #4
2d2fc     11 16 06 F1 | 	add	arg03, #17
2d300     0B 03 48 FC | 	wrbyte	#1, arg03
2d304     01 FA 05 F6 | 	mov	result1, #1
2d308     D0 02 90 FD | 	jmp	#LR__4633
2d30c                 | LR__4620
2d30c     14 4E 05 F1 | 	add	fp, #20
2d310     A7 16 02 FB | 	rdlong	arg03, fp
2d314     14 4E 85 F1 | 	sub	fp, #20
2d318     02 16 16 F2 | 	cmp	arg03, #2 wc
2d31c     24 00 90 CD |  if_b	jmp	#LR__4621
2d320     10 4E 05 F1 | 	add	fp, #16
2d324     A7 18 02 FB | 	rdlong	arg04, fp
2d328     04 4E 05 F1 | 	add	fp, #4
2d32c     A7 16 02 FB | 	rdlong	arg03, fp
2d330     14 4E 85 F1 | 	sub	fp, #20
2d334     18 18 06 F1 | 	add	arg04, #24
2d338     0C 19 02 FB | 	rdlong	arg04, arg04
2d33c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d340     1C 00 90 CD |  if_b	jmp	#LR__4622
2d344                 | LR__4621
2d344     04 4E 05 F1 | 	add	fp, #4
2d348     A7 16 02 FB | 	rdlong	arg03, fp
2d34c     04 4E 85 F1 | 	sub	fp, #4
2d350     11 16 06 F1 | 	add	arg03, #17
2d354     0B 05 48 FC | 	wrbyte	#2, arg03
2d358     02 FA 05 F6 | 	mov	result1, #2
2d35c     7C 02 90 FD | 	jmp	#LR__4633
2d360                 | LR__4622
2d360     04 4E 05 F1 | 	add	fp, #4
2d364     A7 18 02 FB | 	rdlong	arg04, fp
2d368     10 4E 05 F1 | 	add	fp, #16
2d36c     A7 16 02 FB | 	rdlong	arg03, fp
2d370     14 4E 85 F1 | 	sub	fp, #20
2d374     18 18 06 F1 | 	add	arg04, #24
2d378     0C 17 62 FC | 	wrlong	arg03, arg04
2d37c     7C FE 9F FD | 	jmp	#LR__4617
2d380                 | LR__4623
2d380     04 4E 05 F1 | 	add	fp, #4
2d384     A7 16 02 FB | 	rdlong	arg03, fp
2d388     0B 13 02 F6 | 	mov	arg01, arg03
2d38c     14 16 06 F1 | 	add	arg03, #20
2d390     0B 15 02 FB | 	rdlong	arg02, arg03
2d394     04 4E 05 F1 | 	add	fp, #4
2d398     A7 16 02 FB | 	rdlong	arg03, fp
2d39c     0B 15 02 F1 | 	add	arg02, arg03
2d3a0     14 12 06 F1 | 	add	arg01, #20
2d3a4     09 15 62 FC | 	wrlong	arg02, arg01
2d3a8     A7 16 02 FB | 	rdlong	arg03, fp
2d3ac     08 4E 85 F1 | 	sub	fp, #8
2d3b0     FF 17 CE F7 | 	test	arg03, #511 wz
2d3b4     6C 00 90 AD |  if_e	jmp	#LR__4625
2d3b8     10 4E 05 F1 | 	add	fp, #16
2d3bc     A7 12 02 FB | 	rdlong	arg01, fp
2d3c0     04 4E 05 F1 | 	add	fp, #4
2d3c4     A7 14 02 FB | 	rdlong	arg02, fp
2d3c8     14 4E 85 F1 | 	sub	fp, #20
2d3cc     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d3d0     1C 4E 05 F1 | 	add	fp, #28
2d3d4     A7 FA 61 FC | 	wrlong	result1, fp
2d3d8     1C 4E 85 F1 | 	sub	fp, #28
2d3dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d3e0     1C 00 90 5D |  if_ne	jmp	#LR__4624
2d3e4     04 4E 05 F1 | 	add	fp, #4
2d3e8     A7 16 02 FB | 	rdlong	arg03, fp
2d3ec     04 4E 85 F1 | 	sub	fp, #4
2d3f0     11 16 06 F1 | 	add	arg03, #17
2d3f4     0B 05 48 FC | 	wrbyte	#2, arg03
2d3f8     02 FA 05 F6 | 	mov	result1, #2
2d3fc     DC 01 90 FD | 	jmp	#LR__4633
2d400                 | LR__4624
2d400     1C 4E 05 F1 | 	add	fp, #28
2d404     A7 18 02 FB | 	rdlong	arg04, fp
2d408     14 4E 85 F1 | 	sub	fp, #20
2d40c     A7 16 02 FB | 	rdlong	arg03, fp
2d410     09 16 46 F0 | 	shr	arg03, #9
2d414     0B 19 02 F1 | 	add	arg04, arg03
2d418     14 4E 05 F1 | 	add	fp, #20
2d41c     A7 18 62 FC | 	wrlong	arg04, fp
2d420     1C 4E 85 F1 | 	sub	fp, #28
2d424                 | LR__4625
2d424                 | LR__4626
2d424                 | LR__4627
2d424     04 4E 05 F1 | 	add	fp, #4
2d428     A7 18 02 FB | 	rdlong	arg04, fp
2d42c     0C 17 02 F6 | 	mov	arg03, arg04
2d430     04 4E 85 F1 | 	sub	fp, #4
2d434     14 16 06 F1 | 	add	arg03, #20
2d438     0B 17 02 FB | 	rdlong	arg03, arg03
2d43c     0C 18 06 F1 | 	add	arg04, #12
2d440     0C 19 02 FB | 	rdlong	arg04, arg04
2d444     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d448     3C 00 90 ED |  if_be	jmp	#LR__4628
2d44c     04 4E 05 F1 | 	add	fp, #4
2d450     A7 18 02 FB | 	rdlong	arg04, fp
2d454     0C 17 02 F6 | 	mov	arg03, arg04
2d458     14 18 06 F1 | 	add	arg04, #20
2d45c     0C 19 02 FB | 	rdlong	arg04, arg04
2d460     0C 16 06 F1 | 	add	arg03, #12
2d464     0B 19 62 FC | 	wrlong	arg04, arg03
2d468     A7 18 02 FB | 	rdlong	arg04, fp
2d46c     0C 17 02 F6 | 	mov	arg03, arg04
2d470     04 4E 85 F1 | 	sub	fp, #4
2d474     10 18 06 F1 | 	add	arg04, #16
2d478     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d47c     40 18 46 F5 | 	or	arg04, #64
2d480     10 16 06 F1 | 	add	arg03, #16
2d484     0B 19 42 FC | 	wrbyte	arg04, arg03
2d488                 | LR__4628
2d488     04 4E 05 F1 | 	add	fp, #4
2d48c     A7 16 02 FB | 	rdlong	arg03, fp
2d490     04 4E 85 F1 | 	sub	fp, #4
2d494     14 16 06 F1 | 	add	arg03, #20
2d498     0B 17 02 FB | 	rdlong	arg03, arg03
2d49c     FF 17 CE F7 | 	test	arg03, #511 wz
2d4a0     2C 01 90 AD |  if_e	jmp	#LR__4632
2d4a4     04 4E 05 F1 | 	add	fp, #4
2d4a8     A7 18 02 FB | 	rdlong	arg04, fp
2d4ac     18 4E 05 F1 | 	add	fp, #24
2d4b0     A7 16 02 FB | 	rdlong	arg03, fp
2d4b4     1C 4E 85 F1 | 	sub	fp, #28
2d4b8     1C 18 06 F1 | 	add	arg04, #28
2d4bc     0C 19 02 FB | 	rdlong	arg04, arg04
2d4c0     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d4c4     08 01 90 AD |  if_e	jmp	#LR__4632
2d4c8     04 4E 05 F1 | 	add	fp, #4
2d4cc     A7 16 02 FB | 	rdlong	arg03, fp
2d4d0     04 4E 85 F1 | 	sub	fp, #4
2d4d4     10 16 06 F1 | 	add	arg03, #16
2d4d8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d4dc     80 16 CE F7 | 	test	arg03, #128 wz
2d4e0     7C 00 90 AD |  if_e	jmp	#LR__4630
2d4e4     10 4E 05 F1 | 	add	fp, #16
2d4e8     A7 16 02 FB | 	rdlong	arg03, fp
2d4ec     01 16 06 F1 | 	add	arg03, #1
2d4f0     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d4f4     0C 4E 85 F1 | 	sub	fp, #12
2d4f8     A7 16 02 FB | 	rdlong	arg03, fp
2d4fc     0B 15 02 F6 | 	mov	arg02, arg03
2d500     28 14 06 F1 | 	add	arg02, #40
2d504     04 4E 85 F1 | 	sub	fp, #4
2d508     1C 16 06 F1 | 	add	arg03, #28
2d50c     0B 17 02 FB | 	rdlong	arg03, arg03
2d510     01 18 06 F6 | 	mov	arg04, #1
2d514     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d518     00 FA 0D F2 | 	cmp	result1, #0 wz
2d51c     1C 00 90 AD |  if_e	jmp	#LR__4629
2d520     04 4E 05 F1 | 	add	fp, #4
2d524     A7 16 02 FB | 	rdlong	arg03, fp
2d528     04 4E 85 F1 | 	sub	fp, #4
2d52c     11 16 06 F1 | 	add	arg03, #17
2d530     0B 03 48 FC | 	wrbyte	#1, arg03
2d534     01 FA 05 F6 | 	mov	result1, #1
2d538     A0 00 90 FD | 	jmp	#LR__4633
2d53c                 | LR__4629
2d53c     04 4E 05 F1 | 	add	fp, #4
2d540     A7 18 02 FB | 	rdlong	arg04, fp
2d544     0C 17 02 F6 | 	mov	arg03, arg04
2d548     04 4E 85 F1 | 	sub	fp, #4
2d54c     10 18 06 F1 | 	add	arg04, #16
2d550     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d554     7F 18 06 F5 | 	and	arg04, #127
2d558     10 16 06 F1 | 	add	arg03, #16
2d55c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d560                 | LR__4630
2d560     10 4E 05 F1 | 	add	fp, #16
2d564     A7 16 02 FB | 	rdlong	arg03, fp
2d568     01 16 06 F1 | 	add	arg03, #1
2d56c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d570     0C 4E 85 F1 | 	sub	fp, #12
2d574     A7 14 02 FB | 	rdlong	arg02, fp
2d578     28 14 06 F1 | 	add	arg02, #40
2d57c     18 4E 05 F1 | 	add	fp, #24
2d580     A7 16 02 FB | 	rdlong	arg03, fp
2d584     1C 4E 85 F1 | 	sub	fp, #28
2d588     01 18 06 F6 | 	mov	arg04, #1
2d58c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d590     00 FA 0D F2 | 	cmp	result1, #0 wz
2d594     1C 00 90 AD |  if_e	jmp	#LR__4631
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 16 02 FB | 	rdlong	arg03, fp
2d5a0     04 4E 85 F1 | 	sub	fp, #4
2d5a4     11 16 06 F1 | 	add	arg03, #17
2d5a8     0B 03 48 FC | 	wrbyte	#1, arg03
2d5ac     01 FA 05 F6 | 	mov	result1, #1
2d5b0     28 00 90 FD | 	jmp	#LR__4633
2d5b4                 | LR__4631
2d5b4     04 4E 05 F1 | 	add	fp, #4
2d5b8     A7 18 02 FB | 	rdlong	arg04, fp
2d5bc     18 4E 05 F1 | 	add	fp, #24
2d5c0     A7 16 02 FB | 	rdlong	arg03, fp
2d5c4     1C 4E 85 F1 | 	sub	fp, #28
2d5c8     1C 18 06 F1 | 	add	arg04, #28
2d5cc     0C 17 62 FC | 	wrlong	arg03, arg04
2d5d0                 | LR__4632
2d5d0                 | ' 
2d5d0                 | ' 			fp->sect = nsect;
2d5d0                 | ' 		}
2d5d0                 | ' 	}
2d5d0                 | ' 
2d5d0                 | ' 	return res ;
2d5d0     0C 4E 05 F1 | 	add	fp, #12
2d5d4     A7 FA 01 FB | 	rdlong	result1, fp
2d5d8     0C 4E 85 F1 | 	sub	fp, #12
2d5dc                 | LR__4633
2d5dc     A7 F0 03 F6 | 	mov	ptra, fp
2d5e0     B2 00 A0 FD | 	call	#popregs_
2d5e4                 | _fatfs_cc_f_lseek_ret
2d5e4     2D 00 64 FD | 	ret
2d5e8                 | 
2d5e8                 | _fatfs_cc_f_opendir
2d5e8     01 4A 05 F6 | 	mov	COUNT_, #1
2d5ec     A8 00 A0 FD | 	call	#pushregs_
2d5f0     14 F0 07 F1 | 	add	ptra, #20
2d5f4     04 4E 05 F1 | 	add	fp, #4
2d5f8     A7 12 62 FC | 	wrlong	arg01, fp
2d5fc     04 4E 05 F1 | 	add	fp, #4
2d600     A7 14 62 FC | 	wrlong	arg02, fp
2d604     04 4E 85 F1 | 	sub	fp, #4
2d608     A7 16 0A FB | 	rdlong	arg03, fp wz
2d60c     04 4E 85 F1 | 	sub	fp, #4
2d610     09 FA 05 A6 |  if_e	mov	result1, #9
2d614     78 01 90 AD |  if_e	jmp	#LR__4646
2d618     08 4E 05 F1 | 	add	fp, #8
2d61c     A7 12 02 F6 | 	mov	arg01, fp
2d620     08 4E 05 F1 | 	add	fp, #8
2d624     A7 14 02 F6 | 	mov	arg02, fp
2d628     10 4E 85 F1 | 	sub	fp, #16
2d62c     00 16 06 F6 | 	mov	arg03, #0
2d630     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d634     0C 4E 05 F1 | 	add	fp, #12
2d638     A7 FA 61 FC | 	wrlong	result1, fp
2d63c     0C 4E 85 F1 | 	sub	fp, #12
2d640     00 FA 0D F2 | 	cmp	result1, #0 wz
2d644     20 01 90 5D |  if_ne	jmp	#LR__4645
2d648     04 4E 05 F1 | 	add	fp, #4
2d64c     A7 16 02 FB | 	rdlong	arg03, fp
2d650     0C 4E 05 F1 | 	add	fp, #12
2d654     A7 FA 01 FB | 	rdlong	result1, fp
2d658     0B FB 61 FC | 	wrlong	result1, arg03
2d65c     0C 4E 85 F1 | 	sub	fp, #12
2d660     A7 12 02 FB | 	rdlong	arg01, fp
2d664     04 4E 05 F1 | 	add	fp, #4
2d668     A7 14 02 FB | 	rdlong	arg02, fp
2d66c     08 4E 85 F1 | 	sub	fp, #8
2d670     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d674     0C 4E 05 F1 | 	add	fp, #12
2d678     A7 FA 61 FC | 	wrlong	result1, fp
2d67c     0C 4E 85 F1 | 	sub	fp, #12
2d680     00 FA 0D F2 | 	cmp	result1, #0 wz
2d684     C4 00 90 5D |  if_ne	jmp	#LR__4644
2d688     04 4E 05 F1 | 	add	fp, #4
2d68c     A7 16 02 FB | 	rdlong	arg03, fp
2d690     04 4E 85 F1 | 	sub	fp, #4
2d694     2B 16 06 F1 | 	add	arg03, #43
2d698     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d69c     80 16 CE F7 | 	test	arg03, #128 wz
2d6a0     58 00 90 5D |  if_ne	jmp	#LR__4642
2d6a4     04 4E 05 F1 | 	add	fp, #4
2d6a8     A7 16 02 FB | 	rdlong	arg03, fp
2d6ac     04 4E 85 F1 | 	sub	fp, #4
2d6b0     06 16 06 F1 | 	add	arg03, #6
2d6b4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d6b8     10 16 CE F7 | 	test	arg03, #16 wz
2d6bc     30 00 90 AD |  if_e	jmp	#LR__4640
2d6c0     04 4E 05 F1 | 	add	fp, #4
2d6c4     A7 16 02 FB | 	rdlong	arg03, fp
2d6c8     0B 1F 02 F6 | 	mov	local01, arg03
2d6cc     0C 4E 05 F1 | 	add	fp, #12
2d6d0     A7 12 02 FB | 	rdlong	arg01, fp
2d6d4     10 4E 85 F1 | 	sub	fp, #16
2d6d8     1C 16 06 F1 | 	add	arg03, #28
2d6dc     0B 15 02 FB | 	rdlong	arg02, arg03
2d6e0     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d6e4     08 1E 06 F1 | 	add	local01, #8
2d6e8     0F FB 61 FC | 	wrlong	result1, local01
2d6ec     0C 00 90 FD | 	jmp	#LR__4641
2d6f0                 | LR__4640
2d6f0     0C 4E 05 F1 | 	add	fp, #12
2d6f4     A7 0A 68 FC | 	wrlong	#5, fp
2d6f8     0C 4E 85 F1 | 	sub	fp, #12
2d6fc                 | LR__4641
2d6fc                 | LR__4642
2d6fc     0C 4E 05 F1 | 	add	fp, #12
2d700     A7 1E 0A FB | 	rdlong	local01, fp wz
2d704     0C 4E 85 F1 | 	sub	fp, #12
2d708     40 00 90 5D |  if_ne	jmp	#LR__4643
2d70c     04 4E 05 F1 | 	add	fp, #4
2d710     A7 1E 02 FB | 	rdlong	local01, fp
2d714     0C 4E 05 F1 | 	add	fp, #12
2d718     A7 16 02 FB | 	rdlong	arg03, fp
2d71c     06 16 06 F1 | 	add	arg03, #6
2d720     0B 17 E2 FA | 	rdword	arg03, arg03
2d724     04 1E 06 F1 | 	add	local01, #4
2d728     0F 17 52 FC | 	wrword	arg03, local01
2d72c     0C 4E 85 F1 | 	sub	fp, #12
2d730     A7 12 02 FB | 	rdlong	arg01, fp
2d734     04 4E 85 F1 | 	sub	fp, #4
2d738     00 14 06 F6 | 	mov	arg02, #0
2d73c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d740     0C 4E 05 F1 | 	add	fp, #12
2d744     A7 FA 61 FC | 	wrlong	result1, fp
2d748     0C 4E 85 F1 | 	sub	fp, #12
2d74c                 | LR__4643
2d74c                 | LR__4644
2d74c     0C 4E 05 F1 | 	add	fp, #12
2d750     A7 1E 02 FB | 	rdlong	local01, fp
2d754     0C 4E 85 F1 | 	sub	fp, #12
2d758     04 1E 0E F2 | 	cmp	local01, #4 wz
2d75c     0C 4E 05 A1 |  if_e	add	fp, #12
2d760     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d764     0C 4E 85 A1 |  if_e	sub	fp, #12
2d768                 | LR__4645
2d768     0C 4E 05 F1 | 	add	fp, #12
2d76c     A7 1E 0A FB | 	rdlong	local01, fp wz
2d770     0C 4E 85 F1 | 	sub	fp, #12
2d774     04 4E 05 51 |  if_ne	add	fp, #4
2d778     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d77c     04 4E 85 51 |  if_ne	sub	fp, #4
2d780     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d784                 | ' 
2d784                 | ' 	return res ;
2d784     0C 4E 05 F1 | 	add	fp, #12
2d788     A7 FA 01 FB | 	rdlong	result1, fp
2d78c     0C 4E 85 F1 | 	sub	fp, #12
2d790                 | LR__4646
2d790     A7 F0 03 F6 | 	mov	ptra, fp
2d794     B2 00 A0 FD | 	call	#popregs_
2d798                 | _fatfs_cc_f_opendir_ret
2d798     2D 00 64 FD | 	ret
2d79c                 | 
2d79c                 | _fatfs_cc_f_closedir
2d79c     00 4A 05 F6 | 	mov	COUNT_, #0
2d7a0     A8 00 A0 FD | 	call	#pushregs_
2d7a4     10 F0 07 F1 | 	add	ptra, #16
2d7a8     04 4E 05 F1 | 	add	fp, #4
2d7ac     A7 12 62 FC | 	wrlong	arg01, fp
2d7b0     08 4E 05 F1 | 	add	fp, #8
2d7b4     A7 14 02 F6 | 	mov	arg02, fp
2d7b8     0C 4E 85 F1 | 	sub	fp, #12
2d7bc     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d7c0     08 4E 05 F1 | 	add	fp, #8
2d7c4     A7 FA 61 FC | 	wrlong	result1, fp
2d7c8     08 4E 85 F1 | 	sub	fp, #8
2d7cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7d0     04 4E 05 A1 |  if_e	add	fp, #4
2d7d4     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d7d8     04 4E 85 A1 |  if_e	sub	fp, #4
2d7dc     FD 00 68 AC |  if_e	wrlong	#0, result1
2d7e0                 | ' 
2d7e0                 | ' 
2d7e0                 | ' 
2d7e0                 | ' 
2d7e0                 | ' 		dp->obj.fs = 0;
2d7e0                 | ' #line 4633 "ff.c"
2d7e0                 | ' 	}
2d7e0                 | ' 	return res;
2d7e0     08 4E 05 F1 | 	add	fp, #8
2d7e4     A7 FA 01 FB | 	rdlong	result1, fp
2d7e8     08 4E 85 F1 | 	sub	fp, #8
2d7ec     A7 F0 03 F6 | 	mov	ptra, fp
2d7f0     B2 00 A0 FD | 	call	#popregs_
2d7f4                 | _fatfs_cc_f_closedir_ret
2d7f4     2D 00 64 FD | 	ret
2d7f8                 | 
2d7f8                 | _fatfs_cc_f_readdir
2d7f8     00 4A 05 F6 | 	mov	COUNT_, #0
2d7fc     A8 00 A0 FD | 	call	#pushregs_
2d800     14 F0 07 F1 | 	add	ptra, #20
2d804     04 4E 05 F1 | 	add	fp, #4
2d808     A7 12 62 FC | 	wrlong	arg01, fp
2d80c     04 4E 05 F1 | 	add	fp, #4
2d810     A7 14 62 FC | 	wrlong	arg02, fp
2d814     04 4E 85 F1 | 	sub	fp, #4
2d818     A7 12 02 FB | 	rdlong	arg01, fp
2d81c     0C 4E 05 F1 | 	add	fp, #12
2d820     A7 14 02 F6 | 	mov	arg02, fp
2d824     10 4E 85 F1 | 	sub	fp, #16
2d828     54 DD BF FD | 	call	#_fatfs_cc_validate
2d82c     0C 4E 05 F1 | 	add	fp, #12
2d830     A7 FA 61 FC | 	wrlong	result1, fp
2d834     0C 4E 85 F1 | 	sub	fp, #12
2d838     00 FA 0D F2 | 	cmp	result1, #0 wz
2d83c     BC 00 90 5D |  if_ne	jmp	#LR__4653
2d840     08 4E 05 F1 | 	add	fp, #8
2d844     A7 FA 09 FB | 	rdlong	result1, fp wz
2d848     08 4E 85 F1 | 	sub	fp, #8
2d84c     24 00 90 5D |  if_ne	jmp	#LR__4650
2d850     04 4E 05 F1 | 	add	fp, #4
2d854     A7 12 02 FB | 	rdlong	arg01, fp
2d858     04 4E 85 F1 | 	sub	fp, #4
2d85c     00 14 06 F6 | 	mov	arg02, #0
2d860     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d864     0C 4E 05 F1 | 	add	fp, #12
2d868     A7 FA 61 FC | 	wrlong	result1, fp
2d86c     0C 4E 85 F1 | 	sub	fp, #12
2d870     88 00 90 FD | 	jmp	#LR__4652
2d874                 | LR__4650
2d874     04 4E 05 F1 | 	add	fp, #4
2d878     A7 12 02 FB | 	rdlong	arg01, fp
2d87c     04 4E 85 F1 | 	sub	fp, #4
2d880     00 14 06 F6 | 	mov	arg02, #0
2d884     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d888     0C 4E 05 F1 | 	add	fp, #12
2d88c     A7 FA 61 FC | 	wrlong	result1, fp
2d890     0C 4E 85 F1 | 	sub	fp, #12
2d894     04 FA 0D F2 | 	cmp	result1, #4 wz
2d898     0C 4E 05 A1 |  if_e	add	fp, #12
2d89c     A7 00 68 AC |  if_e	wrlong	#0, fp
2d8a0     0C 4E 85 A1 |  if_e	sub	fp, #12
2d8a4     0C 4E 05 F1 | 	add	fp, #12
2d8a8     A7 FA 09 FB | 	rdlong	result1, fp wz
2d8ac     0C 4E 85 F1 | 	sub	fp, #12
2d8b0     48 00 90 5D |  if_ne	jmp	#LR__4651
2d8b4     04 4E 05 F1 | 	add	fp, #4
2d8b8     A7 12 02 FB | 	rdlong	arg01, fp
2d8bc     04 4E 05 F1 | 	add	fp, #4
2d8c0     A7 14 02 FB | 	rdlong	arg02, fp
2d8c4     08 4E 85 F1 | 	sub	fp, #8
2d8c8     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d8cc     04 4E 05 F1 | 	add	fp, #4
2d8d0     A7 12 02 FB | 	rdlong	arg01, fp
2d8d4     04 4E 85 F1 | 	sub	fp, #4
2d8d8     00 14 06 F6 | 	mov	arg02, #0
2d8dc     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d8e0     0C 4E 05 F1 | 	add	fp, #12
2d8e4     A7 FA 61 FC | 	wrlong	result1, fp
2d8e8     0C 4E 85 F1 | 	sub	fp, #12
2d8ec     04 FA 0D F2 | 	cmp	result1, #4 wz
2d8f0     0C 4E 05 A1 |  if_e	add	fp, #12
2d8f4     A7 00 68 AC |  if_e	wrlong	#0, fp
2d8f8     0C 4E 85 A1 |  if_e	sub	fp, #12
2d8fc                 | LR__4651
2d8fc                 | LR__4652
2d8fc                 | LR__4653
2d8fc                 | ' 			}
2d8fc                 | ' 			;
2d8fc                 | ' 		}
2d8fc                 | ' 	}
2d8fc                 | ' 	return res ;
2d8fc     0C 4E 05 F1 | 	add	fp, #12
2d900     A7 FA 01 FB | 	rdlong	result1, fp
2d904     0C 4E 85 F1 | 	sub	fp, #12
2d908     A7 F0 03 F6 | 	mov	ptra, fp
2d90c     B2 00 A0 FD | 	call	#popregs_
2d910                 | _fatfs_cc_f_readdir_ret
2d910     2D 00 64 FD | 	ret
2d914                 | 
2d914                 | _fatfs_cc_f_stat
2d914     00 4A 05 F6 | 	mov	COUNT_, #0
2d918     A8 00 A0 FD | 	call	#pushregs_
2d91c     40 F0 07 F1 | 	add	ptra, #64
2d920     04 4E 05 F1 | 	add	fp, #4
2d924     A7 12 62 FC | 	wrlong	arg01, fp
2d928     04 4E 05 F1 | 	add	fp, #4
2d92c     A7 14 62 FC | 	wrlong	arg02, fp
2d930     04 4E 85 F1 | 	sub	fp, #4
2d934     A7 12 02 F6 | 	mov	arg01, fp
2d938     0C 4E 05 F1 | 	add	fp, #12
2d93c     A7 14 02 F6 | 	mov	arg02, fp
2d940     10 4E 85 F1 | 	sub	fp, #16
2d944     00 16 06 F6 | 	mov	arg03, #0
2d948     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2d94c     0C 4E 05 F1 | 	add	fp, #12
2d950     A7 FA 61 FC | 	wrlong	result1, fp
2d954     0C 4E 85 F1 | 	sub	fp, #12
2d958     00 FA 0D F2 | 	cmp	result1, #0 wz
2d95c     74 00 90 5D |  if_ne	jmp	#LR__4663
2d960     10 4E 05 F1 | 	add	fp, #16
2d964     A7 12 02 F6 | 	mov	arg01, fp
2d968     0C 4E 85 F1 | 	sub	fp, #12
2d96c     A7 14 02 FB | 	rdlong	arg02, fp
2d970     04 4E 85 F1 | 	sub	fp, #4
2d974     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2d978     0C 4E 05 F1 | 	add	fp, #12
2d97c     A7 FA 61 FC | 	wrlong	result1, fp
2d980     0C 4E 85 F1 | 	sub	fp, #12
2d984     00 FA 0D F2 | 	cmp	result1, #0 wz
2d988     48 00 90 5D |  if_ne	jmp	#LR__4662
2d98c     3B 4E 05 F1 | 	add	fp, #59
2d990     A7 FA C1 FA | 	rdbyte	result1, fp
2d994     3B 4E 85 F1 | 	sub	fp, #59
2d998     80 FA CD F7 | 	test	result1, #128 wz
2d99c     0C 4E 05 51 |  if_ne	add	fp, #12
2d9a0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d9a4     0C 4E 85 51 |  if_ne	sub	fp, #12
2d9a8     28 00 90 5D |  if_ne	jmp	#LR__4661
2d9ac     08 4E 05 F1 | 	add	fp, #8
2d9b0     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9b4     08 4E 85 F1 | 	sub	fp, #8
2d9b8     18 00 90 AD |  if_e	jmp	#LR__4660
2d9bc     10 4E 05 F1 | 	add	fp, #16
2d9c0     A7 12 02 F6 | 	mov	arg01, fp
2d9c4     08 4E 85 F1 | 	sub	fp, #8
2d9c8     A7 14 02 FB | 	rdlong	arg02, fp
2d9cc     08 4E 85 F1 | 	sub	fp, #8
2d9d0     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d9d4                 | LR__4660
2d9d4                 | LR__4661
2d9d4                 | LR__4662
2d9d4                 | LR__4663
2d9d4                 | ' 			}
2d9d4                 | ' 		}
2d9d4                 | ' 		;
2d9d4                 | ' 	}
2d9d4                 | ' 
2d9d4                 | ' 	return res ;
2d9d4     0C 4E 05 F1 | 	add	fp, #12
2d9d8     A7 FA 01 FB | 	rdlong	result1, fp
2d9dc     0C 4E 85 F1 | 	sub	fp, #12
2d9e0     A7 F0 03 F6 | 	mov	ptra, fp
2d9e4     B2 00 A0 FD | 	call	#popregs_
2d9e8                 | _fatfs_cc_f_stat_ret
2d9e8     2D 00 64 FD | 	ret
2d9ec                 | 
2d9ec                 | _fatfs_cc_f_unlink
2d9ec     00 4A 05 F6 | 	mov	COUNT_, #0
2d9f0     A8 00 A0 FD | 	call	#pushregs_
2d9f4     74 F0 07 F1 | 	add	ptra, #116
2d9f8     04 4E 05 F1 | 	add	fp, #4
2d9fc     A7 12 62 FC | 	wrlong	arg01, fp
2da00     68 4E 05 F1 | 	add	fp, #104
2da04     A7 00 68 FC | 	wrlong	#0, fp
2da08     68 4E 85 F1 | 	sub	fp, #104
2da0c     A7 12 02 F6 | 	mov	arg01, fp
2da10     6C 4E 05 F1 | 	add	fp, #108
2da14     A7 14 02 F6 | 	mov	arg02, fp
2da18     70 4E 85 F1 | 	sub	fp, #112
2da1c     02 16 06 F6 | 	mov	arg03, #2
2da20     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2da24     08 4E 05 F1 | 	add	fp, #8
2da28     A7 FA 61 FC | 	wrlong	result1, fp
2da2c     08 4E 85 F1 | 	sub	fp, #8
2da30     00 FA 0D F2 | 	cmp	result1, #0 wz
2da34     E4 01 90 5D |  if_ne	jmp	#LR__4678
2da38     70 4E 05 F1 | 	add	fp, #112
2da3c     A7 16 02 FB | 	rdlong	arg03, fp
2da40     64 4E 85 F1 | 	sub	fp, #100
2da44     A7 16 62 FC | 	wrlong	arg03, fp
2da48     A7 12 02 F6 | 	mov	arg01, fp
2da4c     08 4E 85 F1 | 	sub	fp, #8
2da50     A7 14 02 FB | 	rdlong	arg02, fp
2da54     04 4E 85 F1 | 	sub	fp, #4
2da58     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2da5c     08 4E 05 F1 | 	add	fp, #8
2da60     A7 FA 61 FC | 	wrlong	result1, fp
2da64     00 FA 4D F2 | 	cmps	result1, #0 wz
2da68     08 4E 85 F1 | 	sub	fp, #8
2da6c     AC 01 90 5D |  if_ne	jmp	#LR__4677
2da70     37 4E 05 F1 | 	add	fp, #55
2da74     A7 FA C1 FA | 	rdbyte	result1, fp
2da78     37 4E 85 F1 | 	sub	fp, #55
2da7c     80 FA CD F7 | 	test	result1, #128 wz
2da80     08 4E 05 51 |  if_ne	add	fp, #8
2da84     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2da88     08 4E 85 51 |  if_ne	sub	fp, #8
2da8c     1C 00 90 5D |  if_ne	jmp	#LR__4670
2da90     12 4E 05 F1 | 	add	fp, #18
2da94     A7 FA C1 FA | 	rdbyte	result1, fp
2da98     12 4E 85 F1 | 	sub	fp, #18
2da9c     01 FA CD F7 | 	test	result1, #1 wz
2daa0     08 4E 05 51 |  if_ne	add	fp, #8
2daa4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2daa8     08 4E 85 51 |  if_ne	sub	fp, #8
2daac                 | LR__4670
2daac     08 4E 05 F1 | 	add	fp, #8
2dab0     A7 FA 09 FB | 	rdlong	result1, fp wz
2dab4     08 4E 85 F1 | 	sub	fp, #8
2dab8     C8 00 90 5D |  if_ne	jmp	#LR__4673
2dabc     70 4E 05 F1 | 	add	fp, #112
2dac0     A7 12 02 FB | 	rdlong	arg01, fp
2dac4     48 4E 85 F1 | 	sub	fp, #72
2dac8     A7 14 02 FB | 	rdlong	arg02, fp
2dacc     28 4E 85 F1 | 	sub	fp, #40
2dad0     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2dad4     6C 4E 05 F1 | 	add	fp, #108
2dad8     A7 FA 61 FC | 	wrlong	result1, fp
2dadc     5A 4E 85 F1 | 	sub	fp, #90
2dae0     A7 FA C1 FA | 	rdbyte	result1, fp
2dae4     12 4E 85 F1 | 	sub	fp, #18
2dae8     10 FA CD F7 | 	test	result1, #16 wz
2daec     94 00 90 AD |  if_e	jmp	#LR__4672
2daf0     70 4E 05 F1 | 	add	fp, #112
2daf4     A7 FA 01 FB | 	rdlong	result1, fp
2daf8     34 4E 85 F1 | 	sub	fp, #52
2dafc     A7 FA 61 FC | 	wrlong	result1, fp
2db00     30 4E 05 F1 | 	add	fp, #48
2db04     A7 16 02 FB | 	rdlong	arg03, fp
2db08     28 4E 85 F1 | 	sub	fp, #40
2db0c     A7 16 62 FC | 	wrlong	arg03, fp
2db10     08 4E 85 F1 | 	sub	fp, #8
2db14     A7 12 02 F6 | 	mov	arg01, fp
2db18     3C 4E 85 F1 | 	sub	fp, #60
2db1c     00 14 06 F6 | 	mov	arg02, #0
2db20     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2db24     08 4E 05 F1 | 	add	fp, #8
2db28     A7 FA 61 FC | 	wrlong	result1, fp
2db2c     08 4E 85 F1 | 	sub	fp, #8
2db30     00 FA 0D F2 | 	cmp	result1, #0 wz
2db34     4C 00 90 5D |  if_ne	jmp	#LR__4671
2db38     3C 4E 05 F1 | 	add	fp, #60
2db3c     A7 12 02 F6 | 	mov	arg01, fp
2db40     3C 4E 85 F1 | 	sub	fp, #60
2db44     00 14 06 F6 | 	mov	arg02, #0
2db48     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2db4c     08 4E 05 F1 | 	add	fp, #8
2db50     A7 FA 61 FC | 	wrlong	result1, fp
2db54     00 FA 4D F2 | 	cmps	result1, #0 wz
2db58     08 4E 85 F1 | 	sub	fp, #8
2db5c     08 4E 05 A1 |  if_e	add	fp, #8
2db60     A7 0E 68 AC |  if_e	wrlong	#7, fp
2db64     08 4E 85 A1 |  if_e	sub	fp, #8
2db68     08 4E 05 F1 | 	add	fp, #8
2db6c     A7 FA 01 FB | 	rdlong	result1, fp
2db70     08 4E 85 F1 | 	sub	fp, #8
2db74     04 FA 0D F2 | 	cmp	result1, #4 wz
2db78     08 4E 05 A1 |  if_e	add	fp, #8
2db7c     A7 00 68 AC |  if_e	wrlong	#0, fp
2db80     08 4E 85 A1 |  if_e	sub	fp, #8
2db84                 | LR__4671
2db84                 | LR__4672
2db84                 | LR__4673
2db84     08 4E 05 F1 | 	add	fp, #8
2db88     A7 FA 09 FB | 	rdlong	result1, fp wz
2db8c     08 4E 85 F1 | 	sub	fp, #8
2db90     88 00 90 5D |  if_ne	jmp	#LR__4676
2db94     0C 4E 05 F1 | 	add	fp, #12
2db98     A7 12 02 F6 | 	mov	arg01, fp
2db9c     0C 4E 85 F1 | 	sub	fp, #12
2dba0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2dba4     08 4E 05 F1 | 	add	fp, #8
2dba8     A7 FA 61 FC | 	wrlong	result1, fp
2dbac     08 4E 85 F1 | 	sub	fp, #8
2dbb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbb4     38 00 90 5D |  if_ne	jmp	#LR__4674
2dbb8     6C 4E 05 F1 | 	add	fp, #108
2dbbc     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbc0     6C 4E 85 F1 | 	sub	fp, #108
2dbc4     28 00 90 AD |  if_e	jmp	#LR__4674
2dbc8     0C 4E 05 F1 | 	add	fp, #12
2dbcc     A7 12 02 F6 | 	mov	arg01, fp
2dbd0     60 4E 05 F1 | 	add	fp, #96
2dbd4     A7 14 02 FB | 	rdlong	arg02, fp
2dbd8     6C 4E 85 F1 | 	sub	fp, #108
2dbdc     00 16 06 F6 | 	mov	arg03, #0
2dbe0     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2dbe4     08 4E 05 F1 | 	add	fp, #8
2dbe8     A7 FA 61 FC | 	wrlong	result1, fp
2dbec     08 4E 85 F1 | 	sub	fp, #8
2dbf0                 | LR__4674
2dbf0     08 4E 05 F1 | 	add	fp, #8
2dbf4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbf8     08 4E 85 F1 | 	sub	fp, #8
2dbfc     1C 00 90 5D |  if_ne	jmp	#LR__4675
2dc00     70 4E 05 F1 | 	add	fp, #112
2dc04     A7 12 02 FB | 	rdlong	arg01, fp
2dc08     70 4E 85 F1 | 	sub	fp, #112
2dc0c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2dc10     08 4E 05 F1 | 	add	fp, #8
2dc14     A7 FA 61 FC | 	wrlong	result1, fp
2dc18     08 4E 85 F1 | 	sub	fp, #8
2dc1c                 | LR__4675
2dc1c                 | LR__4676
2dc1c                 | LR__4677
2dc1c                 | LR__4678
2dc1c                 | ' 			}
2dc1c                 | ' 		}
2dc1c                 | ' 		;
2dc1c                 | ' 	}
2dc1c                 | ' 
2dc1c                 | ' 	return res ;
2dc1c     08 4E 05 F1 | 	add	fp, #8
2dc20     A7 FA 01 FB | 	rdlong	result1, fp
2dc24     08 4E 85 F1 | 	sub	fp, #8
2dc28     A7 F0 03 F6 | 	mov	ptra, fp
2dc2c     B2 00 A0 FD | 	call	#popregs_
2dc30                 | _fatfs_cc_f_unlink_ret
2dc30     2D 00 64 FD | 	ret
2dc34                 | 
2dc34                 | _fatfs_cc_f_mkdir
2dc34     00 4A 05 F6 | 	mov	COUNT_, #0
2dc38     A8 00 A0 FD | 	call	#pushregs_
2dc3c     5C F0 07 F1 | 	add	ptra, #92
2dc40     04 4E 05 F1 | 	add	fp, #4
2dc44     A7 12 62 FC | 	wrlong	arg01, fp
2dc48     A7 12 02 F6 | 	mov	arg01, fp
2dc4c     48 4E 05 F1 | 	add	fp, #72
2dc50     A7 14 02 F6 | 	mov	arg02, fp
2dc54     4C 4E 85 F1 | 	sub	fp, #76
2dc58     02 16 06 F6 | 	mov	arg03, #2
2dc5c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2dc60     08 4E 05 F1 | 	add	fp, #8
2dc64     A7 FA 61 FC | 	wrlong	result1, fp
2dc68     08 4E 85 F1 | 	sub	fp, #8
2dc6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc70     C4 02 90 5D |  if_ne	jmp	#LR__4685
2dc74     4C 4E 05 F1 | 	add	fp, #76
2dc78     A7 16 02 FB | 	rdlong	arg03, fp
2dc7c     40 4E 85 F1 | 	sub	fp, #64
2dc80     A7 16 62 FC | 	wrlong	arg03, fp
2dc84     A7 12 02 F6 | 	mov	arg01, fp
2dc88     08 4E 85 F1 | 	sub	fp, #8
2dc8c     A7 14 02 FB | 	rdlong	arg02, fp
2dc90     04 4E 85 F1 | 	sub	fp, #4
2dc94     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2dc98     08 4E 05 F1 | 	add	fp, #8
2dc9c     A7 FA 61 FC | 	wrlong	result1, fp
2dca0     00 FA 4D F2 | 	cmps	result1, #0 wz
2dca4     08 4E 85 F1 | 	sub	fp, #8
2dca8     08 4E 05 A1 |  if_e	add	fp, #8
2dcac     A7 10 68 AC |  if_e	wrlong	#8, fp
2dcb0     08 4E 85 A1 |  if_e	sub	fp, #8
2dcb4     08 4E 05 F1 | 	add	fp, #8
2dcb8     A7 FA 01 FB | 	rdlong	result1, fp
2dcbc     08 4E 85 F1 | 	sub	fp, #8
2dcc0     04 FA 0D F2 | 	cmp	result1, #4 wz
2dcc4     70 02 90 5D |  if_ne	jmp	#LR__4684
2dcc8     4C 4E 05 F1 | 	add	fp, #76
2dccc     A7 16 02 FB | 	rdlong	arg03, fp
2dcd0     10 4E 85 F1 | 	sub	fp, #16
2dcd4     A7 16 62 FC | 	wrlong	arg03, fp
2dcd8     A7 12 02 F6 | 	mov	arg01, fp
2dcdc     3C 4E 85 F1 | 	sub	fp, #60
2dce0     00 14 06 F6 | 	mov	arg02, #0
2dce4     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dce8     50 4E 05 F1 | 	add	fp, #80
2dcec     A7 FA 61 FC | 	wrlong	result1, fp
2dcf0     48 4E 85 F1 | 	sub	fp, #72
2dcf4     A7 00 68 FC | 	wrlong	#0, fp
2dcf8     48 4E 05 F1 | 	add	fp, #72
2dcfc     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd00     50 4E 85 F1 | 	sub	fp, #80
2dd04     08 4E 05 A1 |  if_e	add	fp, #8
2dd08     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dd0c     08 4E 85 A1 |  if_e	sub	fp, #8
2dd10     50 4E 05 F1 | 	add	fp, #80
2dd14     A7 FA 01 FB | 	rdlong	result1, fp
2dd18     50 4E 85 F1 | 	sub	fp, #80
2dd1c     01 FA 0D F2 | 	cmp	result1, #1 wz
2dd20     08 4E 05 A1 |  if_e	add	fp, #8
2dd24     A7 04 68 AC |  if_e	wrlong	#2, fp
2dd28     08 4E 85 A1 |  if_e	sub	fp, #8
2dd2c     50 4E 05 F1 | 	add	fp, #80
2dd30     A7 16 02 FB | 	rdlong	arg03, fp
2dd34     50 4E 85 F1 | 	sub	fp, #80
2dd38     FF FF 7F FF 
2dd3c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2dd40     08 4E 05 A1 |  if_e	add	fp, #8
2dd44     A7 02 68 AC |  if_e	wrlong	#1, fp
2dd48     08 4E 85 A1 |  if_e	sub	fp, #8
2dd4c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2dd50     58 4E 05 F1 | 	add	fp, #88
2dd54     A7 FA 61 FC | 	wrlong	result1, fp
2dd58     50 4E 85 F1 | 	sub	fp, #80
2dd5c     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd60     08 4E 85 F1 | 	sub	fp, #8
2dd64     1C 01 90 5D |  if_ne	jmp	#LR__4681
2dd68     4C 4E 05 F1 | 	add	fp, #76
2dd6c     A7 12 02 FB | 	rdlong	arg01, fp
2dd70     04 4E 05 F1 | 	add	fp, #4
2dd74     A7 14 02 FB | 	rdlong	arg02, fp
2dd78     50 4E 85 F1 | 	sub	fp, #80
2dd7c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2dd80     08 4E 05 F1 | 	add	fp, #8
2dd84     A7 FA 61 FC | 	wrlong	result1, fp
2dd88     00 FA 4D F2 | 	cmps	result1, #0 wz
2dd8c     08 4E 85 F1 | 	sub	fp, #8
2dd90     F0 00 90 5D |  if_ne	jmp	#LR__4680
2dd94     4C 4E 05 F1 | 	add	fp, #76
2dd98     A7 12 02 FB | 	rdlong	arg01, fp
2dd9c     4C 4E 85 F1 | 	sub	fp, #76
2dda0     34 12 06 F1 | 	add	arg01, #52
2dda4     20 14 06 F6 | 	mov	arg02, #32
2dda8     0B 16 06 F6 | 	mov	arg03, #11
2ddac     98 00 A0 FD | 	call	#\builtin_bytefill_
2ddb0     4C 4E 05 F1 | 	add	fp, #76
2ddb4     A7 FA 01 FB | 	rdlong	result1, fp
2ddb8     34 FA 05 F1 | 	add	result1, #52
2ddbc     FD 5C 48 FC | 	wrbyte	#46, result1
2ddc0     A7 16 02 FB | 	rdlong	arg03, fp
2ddc4     3F 16 06 F1 | 	add	arg03, #63
2ddc8     0B 21 48 FC | 	wrbyte	#16, arg03
2ddcc     A7 12 02 FB | 	rdlong	arg01, fp
2ddd0     4A 12 06 F1 | 	add	arg01, #74
2ddd4     0C 4E 05 F1 | 	add	fp, #12
2ddd8     A7 14 02 FB | 	rdlong	arg02, fp
2dddc     09 15 62 FC | 	wrlong	arg02, arg01
2dde0     0C 4E 85 F1 | 	sub	fp, #12
2dde4     A7 14 02 FB | 	rdlong	arg02, fp
2dde8     0A 13 02 F6 | 	mov	arg01, arg02
2ddec     34 14 06 F1 | 	add	arg02, #52
2ddf0     04 4E 05 F1 | 	add	fp, #4
2ddf4     A7 16 02 FB | 	rdlong	arg03, fp
2ddf8     50 4E 85 F1 | 	sub	fp, #80
2ddfc     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2de00     4C 4E 05 F1 | 	add	fp, #76
2de04     A7 14 02 FB | 	rdlong	arg02, fp
2de08     0A 13 02 F6 | 	mov	arg01, arg02
2de0c     54 12 06 F1 | 	add	arg01, #84
2de10     4C 4E 85 F1 | 	sub	fp, #76
2de14     34 14 06 F1 | 	add	arg02, #52
2de18     20 16 06 F6 | 	mov	arg03, #32
2de1c     3C 2A BF FD | 	call	#__system____builtin_memmove
2de20     4C 4E 05 F1 | 	add	fp, #76
2de24     A7 16 02 FB | 	rdlong	arg03, fp
2de28     55 16 06 F1 | 	add	arg03, #85
2de2c     0B 5D 48 FC | 	wrbyte	#46, arg03
2de30     38 4E 85 F1 | 	sub	fp, #56
2de34     A7 16 02 FB | 	rdlong	arg03, fp
2de38     40 4E 05 F1 | 	add	fp, #64
2de3c     A7 16 62 FC | 	wrlong	arg03, fp
2de40     08 4E 85 F1 | 	sub	fp, #8
2de44     A7 14 02 FB | 	rdlong	arg02, fp
2de48     0A 13 02 F6 | 	mov	arg01, arg02
2de4c     54 14 06 F1 | 	add	arg02, #84
2de50     4C 4E 85 F1 | 	sub	fp, #76
2de54     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2de58     4C 4E 05 F1 | 	add	fp, #76
2de5c     A7 16 02 FB | 	rdlong	arg03, fp
2de60     03 16 06 F1 | 	add	arg03, #3
2de64     0B 03 48 FC | 	wrbyte	#1, arg03
2de68     40 4E 85 F1 | 	sub	fp, #64
2de6c     A7 12 02 F6 | 	mov	arg01, fp
2de70     0C 4E 85 F1 | 	sub	fp, #12
2de74     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2de78     08 4E 05 F1 | 	add	fp, #8
2de7c     A7 FA 61 FC | 	wrlong	result1, fp
2de80     08 4E 85 F1 | 	sub	fp, #8
2de84                 | LR__4680
2de84                 | LR__4681
2de84     08 4E 05 F1 | 	add	fp, #8
2de88     A7 FA 09 FB | 	rdlong	result1, fp wz
2de8c     08 4E 85 F1 | 	sub	fp, #8
2de90     88 00 90 5D |  if_ne	jmp	#LR__4682
2de94     28 4E 05 F1 | 	add	fp, #40
2de98     A7 12 02 FB | 	rdlong	arg01, fp
2de9c     16 12 06 F1 | 	add	arg01, #22
2dea0     30 4E 05 F1 | 	add	fp, #48
2dea4     A7 14 02 FB | 	rdlong	arg02, fp
2dea8     09 15 62 FC | 	wrlong	arg02, arg01
2deac     0C 4E 85 F1 | 	sub	fp, #12
2deb0     A7 12 02 FB | 	rdlong	arg01, fp
2deb4     24 4E 85 F1 | 	sub	fp, #36
2deb8     A7 14 02 FB | 	rdlong	arg02, fp
2debc     28 4E 05 F1 | 	add	fp, #40
2dec0     A7 16 02 FB | 	rdlong	arg03, fp
2dec4     50 4E 85 F1 | 	sub	fp, #80
2dec8     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2decc     28 4E 05 F1 | 	add	fp, #40
2ded0     A7 FA 01 FB | 	rdlong	result1, fp
2ded4     0B FA 05 F1 | 	add	result1, #11
2ded8     FD 20 48 FC | 	wrbyte	#16, result1
2dedc     24 4E 05 F1 | 	add	fp, #36
2dee0     A7 FA 01 FB | 	rdlong	result1, fp
2dee4     03 FA 05 F1 | 	add	result1, #3
2dee8     FD 02 48 FC | 	wrbyte	#1, result1
2deec     44 4E 85 F1 | 	sub	fp, #68
2def0     A7 FA 09 FB | 	rdlong	result1, fp wz
2def4     08 4E 85 F1 | 	sub	fp, #8
2def8     3C 00 90 5D |  if_ne	jmp	#LR__4683
2defc     4C 4E 05 F1 | 	add	fp, #76
2df00     A7 12 02 FB | 	rdlong	arg01, fp
2df04     4C 4E 85 F1 | 	sub	fp, #76
2df08     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2df0c     08 4E 05 F1 | 	add	fp, #8
2df10     A7 FA 61 FC | 	wrlong	result1, fp
2df14     08 4E 85 F1 | 	sub	fp, #8
2df18     1C 00 90 FD | 	jmp	#LR__4683
2df1c                 | LR__4682
2df1c     3C 4E 05 F1 | 	add	fp, #60
2df20     A7 12 02 F6 | 	mov	arg01, fp
2df24     14 4E 05 F1 | 	add	fp, #20
2df28     A7 14 02 FB | 	rdlong	arg02, fp
2df2c     50 4E 85 F1 | 	sub	fp, #80
2df30     00 16 06 F6 | 	mov	arg03, #0
2df34     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2df38                 | LR__4683
2df38                 | LR__4684
2df38                 | LR__4685
2df38                 | ' 				remove_chain(&sobj, dcl, 0);
2df38                 | ' 			}
2df38                 | ' 		}
2df38                 | ' 		;
2df38                 | ' 	}
2df38                 | ' 
2df38                 | ' 	return res ;
2df38     08 4E 05 F1 | 	add	fp, #8
2df3c     A7 FA 01 FB | 	rdlong	result1, fp
2df40     08 4E 85 F1 | 	sub	fp, #8
2df44     A7 F0 03 F6 | 	mov	ptra, fp
2df48     B2 00 A0 FD | 	call	#popregs_
2df4c                 | _fatfs_cc_f_mkdir_ret
2df4c     2D 00 64 FD | 	ret
2df50                 | 
2df50                 | _fatfs_cc_f_rename
2df50     01 4A 05 F6 | 	mov	COUNT_, #1
2df54     A8 00 A0 FD | 	call	#pushregs_
2df58     9C F0 07 F1 | 	add	ptra, #156
2df5c     04 4E 05 F1 | 	add	fp, #4
2df60     A7 12 62 FC | 	wrlong	arg01, fp
2df64     04 4E 05 F1 | 	add	fp, #4
2df68     A7 14 62 FC | 	wrlong	arg02, fp
2df6c     A7 12 02 F6 | 	mov	arg01, fp
2df70     08 4E 85 F1 | 	sub	fp, #8
2df74     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2df78     04 4E 05 F1 | 	add	fp, #4
2df7c     A7 12 02 F6 | 	mov	arg01, fp
2df80     6C 4E 05 F1 | 	add	fp, #108
2df84     A7 14 02 F6 | 	mov	arg02, fp
2df88     70 4E 85 F1 | 	sub	fp, #112
2df8c     02 16 06 F6 | 	mov	arg03, #2
2df90     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2df94     0C 4E 05 F1 | 	add	fp, #12
2df98     A7 FA 61 FC | 	wrlong	result1, fp
2df9c     0C 4E 85 F1 | 	sub	fp, #12
2dfa0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dfa4     44 03 90 5D |  if_ne	jmp	#LR__4703
2dfa8     70 4E 05 F1 | 	add	fp, #112
2dfac     A7 16 02 FB | 	rdlong	arg03, fp
2dfb0     60 4E 85 F1 | 	sub	fp, #96
2dfb4     A7 16 62 FC | 	wrlong	arg03, fp
2dfb8     A7 12 02 F6 | 	mov	arg01, fp
2dfbc     0C 4E 85 F1 | 	sub	fp, #12
2dfc0     A7 14 02 FB | 	rdlong	arg02, fp
2dfc4     04 4E 85 F1 | 	sub	fp, #4
2dfc8     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2dfcc     0C 4E 05 F1 | 	add	fp, #12
2dfd0     A7 FA 61 FC | 	wrlong	result1, fp
2dfd4     00 FA 4D F2 | 	cmps	result1, #0 wz
2dfd8     0C 4E 85 F1 | 	sub	fp, #12
2dfdc     1C 00 90 5D |  if_ne	jmp	#LR__4690
2dfe0     3B 4E 05 F1 | 	add	fp, #59
2dfe4     A7 FA C1 FA | 	rdbyte	result1, fp
2dfe8     3B 4E 85 F1 | 	sub	fp, #59
2dfec     A0 FA CD F7 | 	test	result1, #160 wz
2dff0     0C 4E 05 51 |  if_ne	add	fp, #12
2dff4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dff8     0C 4E 85 51 |  if_ne	sub	fp, #12
2dffc                 | LR__4690
2dffc     0C 4E 05 F1 | 	add	fp, #12
2e000     A7 1E 0A FB | 	rdlong	local01, fp wz
2e004     0C 4E 85 F1 | 	sub	fp, #12
2e008     E0 02 90 5D |  if_ne	jmp	#LR__4702
2e00c     74 4E 05 F1 | 	add	fp, #116
2e010     A7 12 02 F6 | 	mov	arg01, fp
2e014     48 4E 85 F1 | 	sub	fp, #72
2e018     A7 14 02 FB | 	rdlong	arg02, fp
2e01c     2C 4E 85 F1 | 	sub	fp, #44
2e020     20 16 06 F6 | 	mov	arg03, #32
2e024     34 28 BF FD | 	call	#__system____builtin_memmove
2e028     40 4E 05 F1 | 	add	fp, #64
2e02c     A7 12 02 F6 | 	mov	arg01, fp
2e030     30 4E 85 F1 | 	sub	fp, #48
2e034     A7 14 02 F6 | 	mov	arg02, fp
2e038     10 4E 85 F1 | 	sub	fp, #16
2e03c     30 16 06 F6 | 	mov	arg03, #48
2e040     18 28 BF FD | 	call	#__system____builtin_memmove
2e044     40 4E 05 F1 | 	add	fp, #64
2e048     A7 12 02 F6 | 	mov	arg01, fp
2e04c     38 4E 85 F1 | 	sub	fp, #56
2e050     A7 14 02 FB | 	rdlong	arg02, fp
2e054     08 4E 85 F1 | 	sub	fp, #8
2e058     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e05c     0C 4E 05 F1 | 	add	fp, #12
2e060     A7 FA 61 FC | 	wrlong	result1, fp
2e064     0C 4E 85 F1 | 	sub	fp, #12
2e068     00 FA 0D F2 | 	cmp	result1, #0 wz
2e06c     4C 00 90 5D |  if_ne	jmp	#LR__4693
2e070     48 4E 05 F1 | 	add	fp, #72
2e074     A7 FA 01 FB | 	rdlong	result1, fp
2e078     30 4E 85 F1 | 	sub	fp, #48
2e07c     A7 16 02 FB | 	rdlong	arg03, fp
2e080     18 4E 85 F1 | 	sub	fp, #24
2e084     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e088     20 00 90 5D |  if_ne	jmp	#LR__4691
2e08c     50 4E 05 F1 | 	add	fp, #80
2e090     A7 FA 01 FB | 	rdlong	result1, fp
2e094     30 4E 85 F1 | 	sub	fp, #48
2e098     A7 16 02 FB | 	rdlong	arg03, fp
2e09c     20 4E 85 F1 | 	sub	fp, #32
2e0a0     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e0a4     04 1E 06 A6 |  if_e	mov	local01, #4
2e0a8     04 00 90 AD |  if_e	jmp	#LR__4692
2e0ac                 | LR__4691
2e0ac     08 1E 06 F6 | 	mov	local01, #8
2e0b0                 | LR__4692
2e0b0     0C 4E 05 F1 | 	add	fp, #12
2e0b4     A7 1E 62 FC | 	wrlong	local01, fp
2e0b8     0C 4E 85 F1 | 	sub	fp, #12
2e0bc                 | LR__4693
2e0bc     0C 4E 05 F1 | 	add	fp, #12
2e0c0     A7 1E 02 FB | 	rdlong	local01, fp
2e0c4     0C 4E 85 F1 | 	sub	fp, #12
2e0c8     04 1E 0E F2 | 	cmp	local01, #4 wz
2e0cc     CC 01 90 5D |  if_ne	jmp	#LR__4699
2e0d0     40 4E 05 F1 | 	add	fp, #64
2e0d4     A7 12 02 F6 | 	mov	arg01, fp
2e0d8     40 4E 85 F1 | 	sub	fp, #64
2e0dc     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e0e0     0C 4E 05 F1 | 	add	fp, #12
2e0e4     A7 FA 61 FC | 	wrlong	result1, fp
2e0e8     0C 4E 85 F1 | 	sub	fp, #12
2e0ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0f0     A8 01 90 5D |  if_ne	jmp	#LR__4698
2e0f4     5C 4E 05 F1 | 	add	fp, #92
2e0f8     A7 12 02 FB | 	rdlong	arg01, fp
2e0fc     38 4E 05 F1 | 	add	fp, #56
2e100     A7 12 62 FC | 	wrlong	arg01, fp
2e104     0D 12 06 F1 | 	add	arg01, #13
2e108     20 4E 85 F1 | 	sub	fp, #32
2e10c     A7 14 02 F6 | 	mov	arg02, fp
2e110     74 4E 85 F1 | 	sub	fp, #116
2e114     0D 14 06 F1 | 	add	arg02, #13
2e118     13 16 06 F6 | 	mov	arg03, #19
2e11c     3C 27 BF FD | 	call	#__system____builtin_memmove
2e120     94 4E 05 F1 | 	add	fp, #148
2e124     A7 1E 02 FB | 	rdlong	local01, fp
2e128     15 4E 85 F1 | 	sub	fp, #21
2e12c     A7 FA C1 FA | 	rdbyte	result1, fp
2e130     0B 1E 06 F1 | 	add	local01, #11
2e134     0F FB 41 FC | 	wrbyte	result1, local01
2e138     15 4E 05 F1 | 	add	fp, #21
2e13c     A7 1E 02 FB | 	rdlong	local01, fp
2e140     94 4E 85 F1 | 	sub	fp, #148
2e144     0B 1E 06 F1 | 	add	local01, #11
2e148     0F 1F C2 FA | 	rdbyte	local01, local01
2e14c     10 1E CE F7 | 	test	local01, #16 wz
2e150     24 00 90 5D |  if_ne	jmp	#LR__4694
2e154     94 4E 05 F1 | 	add	fp, #148
2e158     A7 FA 01 FB | 	rdlong	result1, fp
2e15c     FD 1E 02 F6 | 	mov	local01, result1
2e160     94 4E 85 F1 | 	sub	fp, #148
2e164     0B FA 05 F1 | 	add	result1, #11
2e168     FD FA C1 FA | 	rdbyte	result1, result1
2e16c     20 FA 45 F5 | 	or	result1, #32
2e170     0B 1E 06 F1 | 	add	local01, #11
2e174     0F FB 41 FC | 	wrbyte	result1, local01
2e178                 | LR__4694
2e178     70 4E 05 F1 | 	add	fp, #112
2e17c     A7 1E 02 FB | 	rdlong	local01, fp
2e180     03 1E 06 F1 | 	add	local01, #3
2e184     0F 03 48 FC | 	wrbyte	#1, local01
2e188     24 4E 05 F1 | 	add	fp, #36
2e18c     A7 1E 02 FB | 	rdlong	local01, fp
2e190     94 4E 85 F1 | 	sub	fp, #148
2e194     0B 1E 06 F1 | 	add	local01, #11
2e198     0F 1F C2 FA | 	rdbyte	local01, local01
2e19c     10 1E CE F7 | 	test	local01, #16 wz
2e1a0     F8 00 90 AD |  if_e	jmp	#LR__4697
2e1a4     18 4E 05 F1 | 	add	fp, #24
2e1a8     A7 16 02 FB | 	rdlong	arg03, fp
2e1ac     30 4E 05 F1 | 	add	fp, #48
2e1b0     A7 1E 02 FB | 	rdlong	local01, fp
2e1b4     48 4E 85 F1 | 	sub	fp, #72
2e1b8     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e1bc     DC 00 90 AD |  if_e	jmp	#LR__4697
2e1c0     70 4E 05 F1 | 	add	fp, #112
2e1c4     A7 12 02 FB | 	rdlong	arg01, fp
2e1c8     09 1F 02 F6 | 	mov	local01, arg01
2e1cc     24 4E 05 F1 | 	add	fp, #36
2e1d0     A7 14 02 FB | 	rdlong	arg02, fp
2e1d4     94 4E 85 F1 | 	sub	fp, #148
2e1d8     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e1dc     FD 14 02 F6 | 	mov	arg02, result1
2e1e0     0F 13 02 F6 | 	mov	arg01, local01
2e1e4     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e1e8     98 4E 05 F1 | 	add	fp, #152
2e1ec     A7 FA 61 FC | 	wrlong	result1, fp
2e1f0     00 FA 4D F2 | 	cmps	result1, #0 wz
2e1f4     98 4E 85 F1 | 	sub	fp, #152
2e1f8     0C 4E 05 A1 |  if_e	add	fp, #12
2e1fc     A7 04 68 AC |  if_e	wrlong	#2, fp
2e200     0C 4E 85 A1 |  if_e	sub	fp, #12
2e204     94 00 90 AD |  if_e	jmp	#LR__4696
2e208     70 4E 05 F1 | 	add	fp, #112
2e20c     A7 12 02 FB | 	rdlong	arg01, fp
2e210     28 4E 05 F1 | 	add	fp, #40
2e214     A7 14 02 FB | 	rdlong	arg02, fp
2e218     98 4E 85 F1 | 	sub	fp, #152
2e21c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e220     0C 4E 05 F1 | 	add	fp, #12
2e224     A7 FA 61 FC | 	wrlong	result1, fp
2e228     64 4E 05 F1 | 	add	fp, #100
2e22c     A7 1E 02 FB | 	rdlong	local01, fp
2e230     54 1E 06 F1 | 	add	local01, #84
2e234     24 4E 05 F1 | 	add	fp, #36
2e238     A7 1E 62 FC | 	wrlong	local01, fp
2e23c     88 4E 85 F1 | 	sub	fp, #136
2e240     A7 1E 0A FB | 	rdlong	local01, fp wz
2e244     0C 4E 85 F1 | 	sub	fp, #12
2e248     50 00 90 5D |  if_ne	jmp	#LR__4695
2e24c     94 4E 05 F1 | 	add	fp, #148
2e250     A7 1E 02 FB | 	rdlong	local01, fp
2e254     94 4E 85 F1 | 	sub	fp, #148
2e258     01 1E 06 F1 | 	add	local01, #1
2e25c     0F 1F C2 FA | 	rdbyte	local01, local01
2e260     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e264     34 00 90 5D |  if_ne	jmp	#LR__4695
2e268     70 4E 05 F1 | 	add	fp, #112
2e26c     A7 12 02 FB | 	rdlong	arg01, fp
2e270     24 4E 05 F1 | 	add	fp, #36
2e274     A7 14 02 FB | 	rdlong	arg02, fp
2e278     4C 4E 85 F1 | 	sub	fp, #76
2e27c     A7 16 02 FB | 	rdlong	arg03, fp
2e280     48 4E 85 F1 | 	sub	fp, #72
2e284     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e288     70 4E 05 F1 | 	add	fp, #112
2e28c     A7 1E 02 FB | 	rdlong	local01, fp
2e290     70 4E 85 F1 | 	sub	fp, #112
2e294     03 1E 06 F1 | 	add	local01, #3
2e298     0F 03 48 FC | 	wrbyte	#1, local01
2e29c                 | LR__4695
2e29c                 | LR__4696
2e29c                 | LR__4697
2e29c                 | LR__4698
2e29c                 | LR__4699
2e29c     0C 4E 05 F1 | 	add	fp, #12
2e2a0     A7 1E 0A FB | 	rdlong	local01, fp wz
2e2a4     0C 4E 85 F1 | 	sub	fp, #12
2e2a8     40 00 90 5D |  if_ne	jmp	#LR__4701
2e2ac     10 4E 05 F1 | 	add	fp, #16
2e2b0     A7 12 02 F6 | 	mov	arg01, fp
2e2b4     10 4E 85 F1 | 	sub	fp, #16
2e2b8     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e2bc     0C 4E 05 F1 | 	add	fp, #12
2e2c0     A7 FA 61 FC | 	wrlong	result1, fp
2e2c4     0C 4E 85 F1 | 	sub	fp, #12
2e2c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2cc     1C 00 90 5D |  if_ne	jmp	#LR__4700
2e2d0     70 4E 05 F1 | 	add	fp, #112
2e2d4     A7 12 02 FB | 	rdlong	arg01, fp
2e2d8     70 4E 85 F1 | 	sub	fp, #112
2e2dc     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e2e0     0C 4E 05 F1 | 	add	fp, #12
2e2e4     A7 FA 61 FC | 	wrlong	result1, fp
2e2e8     0C 4E 85 F1 | 	sub	fp, #12
2e2ec                 | LR__4700
2e2ec                 | LR__4701
2e2ec                 | LR__4702
2e2ec                 | LR__4703
2e2ec                 | ' 					res = sync_fs(fs);
2e2ec                 | ' 				}
2e2ec                 | ' 			}
2e2ec                 | ' 
2e2ec                 | ' 		}
2e2ec                 | ' 		;
2e2ec                 | ' 	}
2e2ec                 | ' 
2e2ec                 | ' 	return res ;
2e2ec     0C 4E 05 F1 | 	add	fp, #12
2e2f0     A7 FA 01 FB | 	rdlong	result1, fp
2e2f4     0C 4E 85 F1 | 	sub	fp, #12
2e2f8     A7 F0 03 F6 | 	mov	ptra, fp
2e2fc     B2 00 A0 FD | 	call	#popregs_
2e300                 | _fatfs_cc_f_rename_ret
2e300     2D 00 64 FD | 	ret
2e304                 | 
2e304                 | _fatfs_cc_time
2e304     00 4A 05 F6 | 	mov	COUNT_, #0
2e308     A8 00 A0 FD | 	call	#pushregs_
2e30c     14 F0 07 F1 | 	add	ptra, #20
2e310     04 4E 05 F1 | 	add	fp, #4
2e314     A7 12 62 FC | 	wrlong	arg01, fp
2e318     04 4E 05 F1 | 	add	fp, #4
2e31c     A7 12 02 F6 | 	mov	arg01, fp
2e320     08 4E 85 F1 | 	sub	fp, #8
2e324     00 14 06 F6 | 	mov	arg02, #0
2e328     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e32c     08 4E 05 F1 | 	add	fp, #8
2e330     A7 FA 01 FB | 	rdlong	result1, fp
2e334     08 4E 05 F1 | 	add	fp, #8
2e338     A7 FA 61 FC | 	wrlong	result1, fp
2e33c     0C 4E 85 F1 | 	sub	fp, #12
2e340     A7 FA 09 FB | 	rdlong	result1, fp wz
2e344     04 4E 85 F1 | 	sub	fp, #4
2e348     18 00 90 AD |  if_e	jmp	#LR__4710
2e34c     04 4E 05 F1 | 	add	fp, #4
2e350     A7 FA 01 FB | 	rdlong	result1, fp
2e354     0C 4E 05 F1 | 	add	fp, #12
2e358     A7 14 02 FB | 	rdlong	arg02, fp
2e35c     10 4E 85 F1 | 	sub	fp, #16
2e360     FD 14 62 FC | 	wrlong	arg02, result1
2e364                 | LR__4710
2e364                 | '         *tp = now;
2e364                 | '     return now;
2e364     10 4E 05 F1 | 	add	fp, #16
2e368     A7 FA 01 FB | 	rdlong	result1, fp
2e36c     10 4E 85 F1 | 	sub	fp, #16
2e370     A7 F0 03 F6 | 	mov	ptra, fp
2e374     B2 00 A0 FD | 	call	#popregs_
2e378                 | _fatfs_cc_time_ret
2e378     2D 00 64 FD | 	ret
2e37c                 | 
2e37c                 | _fatfs_cc_mktime
2e37c     06 4A 05 F6 | 	mov	COUNT_, #6
2e380     A8 00 A0 FD | 	call	#pushregs_
2e384     09 1F 02 F6 | 	mov	local01, arg01
2e388     14 1E 06 F1 | 	add	local01, #20
2e38c     0F 13 02 FB | 	rdlong	arg01, local01
2e390     14 1E 86 F1 | 	sub	local01, #20
2e394     46 12 56 F2 | 	cmps	arg01, #70 wc
2e398                 | '                 return (time_t) -1;
2e398     01 FA 65 C6 |  if_b	neg	result1, #1
2e39c     7C 01 90 CD |  if_b	jmp	#LR__4724
2e3a0     03 00 00 FF 
2e3a4     6C 21 06 F6 | 	mov	local02, ##1900
2e3a8     14 1E 06 F1 | 	add	local01, #20
2e3ac     0F FB 01 FB | 	rdlong	result1, local01
2e3b0     FD 20 02 F1 | 	add	local02, result1
2e3b4     08 1E 86 F1 | 	sub	local01, #8
2e3b8     0F 23 02 FB | 	rdlong	local03, local01
2e3bc     01 22 86 F1 | 	sub	local03, #1
2e3c0     04 1E 06 F1 | 	add	local01, #4
2e3c4     0F 13 02 FB | 	rdlong	arg01, local01
2e3c8     10 1E 86 F1 | 	sub	local01, #16
2e3cc     02 12 66 F0 | 	shl	arg01, #2
2e3d0     02 00 00 FF 
2e3d4     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e3d8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e3dc     09 FB 01 FB | 	rdlong	result1, arg01
2e3e0     FD 22 02 F1 | 	add	local03, result1
2e3e4     10 13 02 F6 | 	mov	arg01, local02
2e3e8     02 00 00 FF 
2e3ec     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e3f0     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e3f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3f8     1C 00 90 AD |  if_e	jmp	#LR__4720
2e3fc     00 24 06 F6 | 	mov	local04, #0
2e400     10 1E 06 F1 | 	add	local01, #16
2e404     0F FB 01 FB | 	rdlong	result1, local01
2e408     10 1E 86 F1 | 	sub	local01, #16
2e40c     02 FA 55 F2 | 	cmps	result1, #2 wc
2e410     01 24 06 36 |  if_ae	mov	local04, #1
2e414     04 00 90 FD | 	jmp	#LR__4721
2e418                 | LR__4720
2e418     00 24 06 F6 | 	mov	local04, #0
2e41c                 | LR__4721
2e41c     04 1E 06 F1 | 	add	local01, #4
2e420     0F FB 01 FB | 	rdlong	result1, local01
2e424     04 1E 86 F1 | 	sub	local01, #4
2e428     0F 27 02 FB | 	rdlong	local05, local01
2e42c     08 1E 06 F1 | 	add	local01, #8
2e430     0F 13 02 FB | 	rdlong	arg01, local01
2e434     07 00 00 FF 
2e438     10 12 06 FD | 	qmul	arg01, ##3600
2e43c     12 23 02 F1 | 	add	local03, local04
2e440     FD 24 02 F6 | 	mov	local04, result1
2e444     04 24 66 F0 | 	shl	local04, #4
2e448     FD 24 82 F1 | 	sub	local04, result1
2e44c     02 24 66 F0 | 	shl	local04, #2
2e450     12 27 02 F1 | 	add	local05, local04
2e454     08 1E 86 F1 | 	sub	local01, #8
2e458     18 24 62 FD | 	getqx	local04
2e45c     A8 00 00 FF 
2e460     80 23 06 FD | 	qmul	local03, ##86400
2e464     12 27 02 F1 | 	add	local05, local04
2e468     10 23 02 F6 | 	mov	local03, local02
2e46c     03 00 00 FF 
2e470     B2 23 86 F1 | 	sub	local03, ##1970
2e474     18 24 62 FD | 	getqx	local04
2e478     99 F0 00 FF 
2e47c     80 23 06 FD | 	qmul	local03, ##31536000
2e480     12 27 02 F1 | 	add	local05, local04
2e484     10 23 02 F6 | 	mov	local03, local02
2e488     03 00 00 FF 
2e48c     B1 23 86 F1 | 	sub	local03, ##1969
2e490     11 29 52 F6 | 	abs	local06, local03 wc
2e494     02 28 46 F0 | 	shr	local06, #2
2e498     14 29 82 F6 | 	negc	local06, local06
2e49c     03 00 00 FF 
2e4a0     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e4a4     18 24 62 FD | 	getqx	local04
2e4a8     12 27 02 F1 | 	add	local05, local04
2e4ac     18 00 90 CD |  if_b	jmp	#LR__4722
2e4b0     03 00 00 FF 
2e4b4     D0 21 86 F1 | 	sub	local02, ##2000
2e4b8     10 25 52 F6 | 	abs	local04, local02 wc
2e4bc     64 24 16 FD | 	qdiv	local04, #100
2e4c0     18 24 62 FD | 	getqx	local04
2e4c4     12 29 A2 F3 | 	sumnc	local06, local04
2e4c8                 | LR__4722
2e4c8     A8 00 00 FF 
2e4cc     80 29 06 FD | 	qmul	local06, ##86400
2e4d0     18 28 62 FD | 	getqx	local06
2e4d4     14 27 02 F1 | 	add	local05, local06
2e4d8     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e4dc     02 00 00 FF 
2e4e0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e4e4     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e4e8     14 27 02 F1 | 	add	local05, local06
2e4ec     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e4f0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e4f4     02 00 00 FF 
2e4f8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e4fc     01 22 0E F2 | 	cmp	local03, #1 wz
2e500     14 00 90 5D |  if_ne	jmp	#LR__4723
2e504     0F 13 02 F6 | 	mov	arg01, local01
2e508     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e50c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e510     07 00 00 5F 
2e514     10 26 86 51 |  if_ne	sub	local05, ##3600
2e518                 | LR__4723
2e518                 | '                 s -=  (3600L) ;
2e518                 | ' 
2e518                 | '         return s;
2e518     13 FB 01 F6 | 	mov	result1, local05
2e51c                 | LR__4724
2e51c     A7 F0 03 F6 | 	mov	ptra, fp
2e520     B2 00 A0 FD | 	call	#popregs_
2e524                 | _fatfs_cc_mktime_ret
2e524     2D 00 64 FD | 	ret
2e528                 | 
2e528                 | _fatfs_cc__gmtime_r
2e528     03 4A 05 F6 | 	mov	COUNT_, #3
2e52c     A8 00 A0 FD | 	call	#pushregs_
2e530     09 1F 02 FB | 	rdlong	local01, arg01
2e534     A8 00 00 FF 
2e538     80 1F 16 FD | 	qdiv	local01, ##86400
2e53c     18 FA 61 FD | 	getqx	result1
2e540     04 FA 05 F1 | 	add	result1, #4
2e544     07 FA 15 FD | 	qdiv	result1, #7
2e548     18 14 06 F1 | 	add	arg02, #24
2e54c     D1 7F 27 FF 
2e550     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e554     D1 7F 27 3F 
2e558     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e55c     03 00 00 3F 
2e560     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e564     03 00 00 CF 
2e568     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e56c                 | ' 	  year = 1970;
2e56c                 | ' 	}
2e56c                 | ' 
2e56c                 | ' 	for(;;) {
2e56c     19 FA 61 FD | 	getqy	result1
2e570     0A FB 61 FC | 	wrlong	result1, arg02
2e574     18 14 86 F1 | 	sub	arg02, #24
2e578                 | LR__4730
2e578     10 13 02 F6 | 	mov	arg01, local02
2e57c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e580     00 FA 0D F2 | 	cmp	result1, #0 wz
2e584     42 F1 00 5F 
2e588     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e58c     99 F0 00 AF 
2e590     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e594     11 1F 12 F2 | 	cmp	local01, local03 wc
2e598                 | ' 	    break;
2e598     01 20 06 31 |  if_ae	add	local02, #1
2e59c     11 1F 82 31 |  if_ae	sub	local01, local03
2e5a0     D4 FF 9F 3D |  if_ae	jmp	#LR__4730
2e5a4     A8 00 00 FF 
2e5a8     80 1F 16 FD | 	qdiv	local01, ##86400
2e5ac     10 23 02 F6 | 	mov	local03, local02
2e5b0     03 00 00 FF 
2e5b4     6C 23 86 F1 | 	sub	local03, ##1900
2e5b8     14 14 06 F1 | 	add	arg02, #20
2e5bc     0A 23 62 FC | 	wrlong	local03, arg02
2e5c0     08 14 06 F1 | 	add	arg02, #8
2e5c4     10 13 02 F6 | 	mov	arg01, local02
2e5c8     18 20 62 FD | 	getqx	local02
2e5cc     0A 21 62 FC | 	wrlong	local02, arg02
2e5d0     1C 14 86 F1 | 	sub	arg02, #28
2e5d4     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5dc     1D 22 06 56 |  if_ne	mov	local03, #29
2e5e0     1C 22 06 A6 |  if_e	mov	local03, #28
2e5e4     02 00 00 FF 
2e5e8     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e5ec     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e5f0     02 00 00 FF 
2e5f4     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e5f8                 | ' 
2e5f8                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e5f8                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e5f8     00 12 06 F6 | 	mov	arg01, #0
2e5fc     97 2A 48 FB | 	callpa	#(@LR__4732-@LR__4731)>>2,fcache_load_ptr_
2e600                 | LR__4731
2e600     09 23 02 F6 | 	mov	local03, arg01
2e604     02 22 66 F0 | 	shl	local03, #2
2e608     02 00 00 FF 
2e60c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e610     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e614     11 23 02 FB | 	rdlong	local03, local03
2e618     11 21 52 F2 | 	cmps	local02, local03 wc
2e61c     02 00 00 FF 
2e620     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e624     2C 00 90 CD |  if_b	jmp	#LR__4733
2e628     09 23 02 F6 | 	mov	local03, arg01
2e62c     02 22 66 F0 | 	shl	local03, #2
2e630     02 00 00 FF 
2e634     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e638     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e63c     11 23 02 FB | 	rdlong	local03, local03
2e640     11 21 82 F1 | 	sub	local02, local03
2e644     01 12 06 F1 | 	add	arg01, #1
2e648     02 00 00 FF 
2e64c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e650     AC FF 9F FD | 	jmp	#LR__4731
2e654                 | LR__4732
2e654                 | LR__4733
2e654     A8 00 00 FF 
2e658     80 1F 16 FD | 	qdiv	local01, ##86400
2e65c     10 14 06 F1 | 	add	arg02, #16
2e660     0A 13 62 FC | 	wrlong	arg01, arg02
2e664     01 20 06 F1 | 	add	local02, #1
2e668     04 14 86 F1 | 	sub	arg02, #4
2e66c     0A 21 62 FC | 	wrlong	local02, arg02
2e670     19 1E 62 FD | 	getqy	local01
2e674     07 00 00 FF 
2e678     10 1E 16 FD | 	qdiv	local01, ##3600
2e67c     18 22 62 FD | 	getqx	local03
2e680     07 00 00 FF 
2e684     10 1E 16 FD | 	qdiv	local01, ##3600
2e688     04 14 86 F1 | 	sub	arg02, #4
2e68c     0A 23 62 FC | 	wrlong	local03, arg02
2e690     19 1E 62 FD | 	getqy	local01
2e694     3C 1E 16 FD | 	qdiv	local01, #60
2e698     18 22 62 FD | 	getqx	local03
2e69c     3C 1E 16 FD | 	qdiv	local01, #60
2e6a0     04 14 86 F1 | 	sub	arg02, #4
2e6a4     0A 23 62 FC | 	wrlong	local03, arg02
2e6a8     04 14 86 F1 | 	sub	arg02, #4
2e6ac                 | '         stm->tm_isdst = 0;
2e6ac                 | ' 
2e6ac                 | ' ;
2e6ac                 | '         return stm;
2e6ac     0A FB 01 F6 | 	mov	result1, arg02
2e6b0     19 22 62 FD | 	getqy	local03
2e6b4     0A 23 62 FC | 	wrlong	local03, arg02
2e6b8     20 14 06 F1 | 	add	arg02, #32
2e6bc     0A 01 68 FC | 	wrlong	#0, arg02
2e6c0     A7 F0 03 F6 | 	mov	ptra, fp
2e6c4     B2 00 A0 FD | 	call	#popregs_
2e6c8                 | _fatfs_cc__gmtime_r_ret
2e6c8     2D 00 64 FD | 	ret
2e6cc                 | 
2e6cc                 | _fatfs_cc__tzset
2e6cc     81 01 00 FF 
2e6d0     11 12 06 F6 | 	mov	arg01, ##@LR__5045
2e6d4     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e6d8     FD 12 02 F6 | 	mov	arg01, result1
2e6dc     02 00 00 FF 
2e6e0     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e6e4     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e6e8     02 00 00 FF 
2e6ec     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e6f0     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e6f4     02 00 00 FF 
2e6f8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e6fc     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e700     02 00 00 FF 
2e704     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e708                 | _fatfs_cc__tzset_ret
2e708     2D 00 64 FD | 	ret
2e70c                 | 
2e70c                 | _fatfs_cc_getenv
2e70c     06 4A 05 F6 | 	mov	COUNT_, #6
2e710     A8 00 A0 FD | 	call	#pushregs_
2e714     09 1F 02 F6 | 	mov	local01, arg01
2e718     09 21 02 F6 | 	mov	local02, arg01
2e71c     97 06 48 FB | 	callpa	#(@LR__4741-@LR__4740)>>2,fcache_load_ptr_
2e720                 | LR__4740
2e720     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e724     01 20 06 51 |  if_ne	add	local02, #1
2e728     F4 FF 9F 5D |  if_ne	jmp	#LR__4740
2e72c                 | LR__4741
2e72c     09 21 82 F1 | 	sub	local02, arg01
2e730     10 FB 01 F6 | 	mov	result1, local02
2e734     02 00 00 FF 
2e738     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e73c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e740     02 00 00 FF 
2e744     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e748                 | '             return 0;
2e748     00 FA 05 A6 |  if_e	mov	result1, #0
2e74c     5C 00 90 AD |  if_e	jmp	#LR__4744
2e750                 | ' 
2e750                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e750     02 00 00 FF 
2e754     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e758     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e75c     02 00 00 FF 
2e760     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e764                 | LR__4742
2e764     11 25 0A FB | 	rdlong	local04, local03 wz
2e768     3C 00 90 AD |  if_e	jmp	#LR__4743
2e76c     12 13 02 F6 | 	mov	arg01, local04
2e770     0F 15 02 F6 | 	mov	arg02, local01
2e774     10 17 02 F6 | 	mov	arg03, local02
2e778     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e77c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e780     10 27 02 A6 |  if_e	mov	local05, local02
2e784     12 27 02 A1 |  if_e	add	local05, local04
2e788     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e78c     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e790                 | ' 			return name+len+1;
2e790     10 25 02 A1 |  if_e	add	local04, local02
2e794     01 24 06 A1 |  if_e	add	local04, #1
2e798     12 FB 01 A6 |  if_e	mov	result1, local04
2e79c     0C 00 90 AD |  if_e	jmp	#LR__4744
2e7a0     04 22 06 F1 | 	add	local03, #4
2e7a4     BC FF 9F FD | 	jmp	#LR__4742
2e7a8                 | LR__4743
2e7a8                 | ' 	}
2e7a8                 | ' 	return 0;
2e7a8     00 FA 05 F6 | 	mov	result1, #0
2e7ac                 | LR__4744
2e7ac     A7 F0 03 F6 | 	mov	ptra, fp
2e7b0     B2 00 A0 FD | 	call	#popregs_
2e7b4                 | _fatfs_cc_getenv_ret
2e7b4     2D 00 64 FD | 	ret
2e7b8                 | 
2e7b8                 | _fatfs_cc__get_fattime
2e7b8     00 4A 05 F6 | 	mov	COUNT_, #0
2e7bc     A8 00 A0 FD | 	call	#pushregs_
2e7c0     34 F0 07 F1 | 	add	ptra, #52
2e7c4     00 12 06 F6 | 	mov	arg01, #0
2e7c8     38 FB BF FD | 	call	#_fatfs_cc_time
2e7cc     04 4E 05 F1 | 	add	fp, #4
2e7d0     A7 FA 61 FC | 	wrlong	result1, fp
2e7d4     A7 12 02 F6 | 	mov	arg01, fp
2e7d8     0C 4E 05 F1 | 	add	fp, #12
2e7dc     A7 14 02 F6 | 	mov	arg02, fp
2e7e0     10 4E 85 F1 | 	sub	fp, #16
2e7e4     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e7e8     24 4E 05 F1 | 	add	fp, #36
2e7ec     A7 14 02 FB | 	rdlong	arg02, fp
2e7f0     50 14 86 F1 | 	sub	arg02, #80
2e7f4     09 14 66 F0 | 	shl	arg02, #9
2e7f8     04 4E 85 F1 | 	sub	fp, #4
2e7fc     A7 FA 01 FB | 	rdlong	result1, fp
2e800     01 FA 05 F1 | 	add	result1, #1
2e804     05 FA 65 F0 | 	shl	result1, #5
2e808     FD 14 42 F5 | 	or	arg02, result1
2e80c     04 4E 85 F1 | 	sub	fp, #4
2e810     A7 FA 01 FB | 	rdlong	result1, fp
2e814     FD 14 42 F5 | 	or	arg02, result1
2e818     14 4E 85 F1 | 	sub	fp, #20
2e81c     A7 14 62 FC | 	wrlong	arg02, fp
2e820     10 4E 05 F1 | 	add	fp, #16
2e824     A7 14 02 FB | 	rdlong	arg02, fp
2e828     0B 14 66 F0 | 	shl	arg02, #11
2e82c     04 4E 85 F1 | 	sub	fp, #4
2e830     A7 FA 01 FB | 	rdlong	result1, fp
2e834     05 FA 65 F0 | 	shl	result1, #5
2e838     FD 14 42 F5 | 	or	arg02, result1
2e83c     04 4E 85 F1 | 	sub	fp, #4
2e840     A7 FA 01 FB | 	rdlong	result1, fp
2e844     FD 14 42 F5 | 	or	arg02, result1
2e848     04 4E 85 F1 | 	sub	fp, #4
2e84c     A7 14 62 FC | 	wrlong	arg02, fp
2e850                 | ' 
2e850                 | '     now = time(0);
2e850                 | '     _gmtime_r (&now, &date);
2e850                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e850                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e850                 | '     return (ffdate << 16) | fftime;
2e850     04 4E 85 F1 | 	sub	fp, #4
2e854     A7 FA 01 FB | 	rdlong	result1, fp
2e858     10 FA 65 F0 | 	shl	result1, #16
2e85c     08 4E 85 F1 | 	sub	fp, #8
2e860     0A FB 41 F5 | 	or	result1, arg02
2e864     A7 F0 03 F6 | 	mov	ptra, fp
2e868     B2 00 A0 FD | 	call	#popregs_
2e86c                 | _fatfs_cc__get_fattime_ret
2e86c     2D 00 64 FD | 	ret
2e870                 | 
2e870                 | _fatfs_cc_unixtime_0960
2e870     00 4A 05 F6 | 	mov	COUNT_, #0
2e874     A8 00 A0 FD | 	call	#pushregs_
2e878     34 F0 07 F1 | 	add	ptra, #52
2e87c     04 4E 05 F1 | 	add	fp, #4
2e880     A7 12 62 FC | 	wrlong	arg01, fp
2e884     04 4E 05 F1 | 	add	fp, #4
2e888     A7 14 62 FC | 	wrlong	arg02, fp
2e88c     04 4E 85 F1 | 	sub	fp, #4
2e890     A7 14 02 FB | 	rdlong	arg02, fp
2e894     09 14 46 F0 | 	shr	arg02, #9
2e898     7F 14 06 F5 | 	and	arg02, #127
2e89c     50 FA 05 F6 | 	mov	result1, #80
2e8a0     0A FB 01 F1 | 	add	result1, arg02
2e8a4     20 4E 05 F1 | 	add	fp, #32
2e8a8     A7 FA 61 FC | 	wrlong	result1, fp
2e8ac     20 4E 85 F1 | 	sub	fp, #32
2e8b0     A7 FA 01 FB | 	rdlong	result1, fp
2e8b4     05 FA 45 F0 | 	shr	result1, #5
2e8b8     FD FA 41 F8 | 	getnib	result1, result1, #0
2e8bc     01 FA 85 F1 | 	sub	result1, #1
2e8c0     1C 4E 05 F1 | 	add	fp, #28
2e8c4     A7 FA 61 FC | 	wrlong	result1, fp
2e8c8     1C 4E 85 F1 | 	sub	fp, #28
2e8cc     A7 FA 01 FB | 	rdlong	result1, fp
2e8d0     1F FA 05 F5 | 	and	result1, #31
2e8d4     18 4E 05 F1 | 	add	fp, #24
2e8d8     A7 FA 61 FC | 	wrlong	result1, fp
2e8dc     14 4E 85 F1 | 	sub	fp, #20
2e8e0     A7 FA 01 FB | 	rdlong	result1, fp
2e8e4     0B FA 45 F0 | 	shr	result1, #11
2e8e8     1F FA 05 F5 | 	and	result1, #31
2e8ec     10 4E 05 F1 | 	add	fp, #16
2e8f0     A7 FA 61 FC | 	wrlong	result1, fp
2e8f4     10 4E 85 F1 | 	sub	fp, #16
2e8f8     A7 FA 01 FB | 	rdlong	result1, fp
2e8fc     05 FA 45 F0 | 	shr	result1, #5
2e900     3F FA 05 F5 | 	and	result1, #63
2e904     0C 4E 05 F1 | 	add	fp, #12
2e908     A7 FA 61 FC | 	wrlong	result1, fp
2e90c     0C 4E 85 F1 | 	sub	fp, #12
2e910     A7 14 02 FB | 	rdlong	arg02, fp
2e914     1F 14 06 F5 | 	and	arg02, #31
2e918     01 14 66 F0 | 	shl	arg02, #1
2e91c     08 4E 05 F1 | 	add	fp, #8
2e920     A7 14 62 FC | 	wrlong	arg02, fp
2e924     A7 12 02 F6 | 	mov	arg01, fp
2e928     10 4E 85 F1 | 	sub	fp, #16
2e92c     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e930     0C 4E 05 F1 | 	add	fp, #12
2e934     A7 FA 61 FC | 	wrlong	result1, fp
2e938                 | ' 
2e938                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e938                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e938                 | '     date.tm_mday = (dosdate & 0x1f);
2e938                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e938                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e938                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e938                 | ' 
2e938                 | '     t = mktime(&date);
2e938                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e938                 | '     return t;
2e938     0C 4E 85 F1 | 	sub	fp, #12
2e93c     A7 F0 03 F6 | 	mov	ptra, fp
2e940     B2 00 A0 FD | 	call	#popregs_
2e944                 | _fatfs_cc_unixtime_0960_ret
2e944     2D 00 64 FD | 	ret
2e948                 | 
2e948                 | _fatfs_cc__set_dos_error_0962
2e948     09 01 02 F6 | 	mov	_var01, arg01
2e94c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e94c                 | '     switch (derr) {
2e94c     14 00 26 F3 | 	fle	_var01, #20
2e950     30 00 62 FD | 	jmprel	_var01
2e954                 | LR__4750
2e954     50 00 90 FD | 	jmp	#LR__4751
2e958     84 00 90 FD | 	jmp	#LR__4765
2e95c     80 00 90 FD | 	jmp	#LR__4766
2e960     7C 00 90 FD | 	jmp	#LR__4767
2e964     48 00 90 FD | 	jmp	#LR__4752
2e968     44 00 90 FD | 	jmp	#LR__4753
2e96c     40 00 90 FD | 	jmp	#LR__4754
2e970     44 00 90 FD | 	jmp	#LR__4755
2e974     48 00 90 FD | 	jmp	#LR__4757
2e978     54 00 90 FD | 	jmp	#LR__4760
2e97c     38 00 90 FD | 	jmp	#LR__4756
2e980     4C 00 90 FD | 	jmp	#LR__4761
2e984     48 00 90 FD | 	jmp	#LR__4762
2e988     44 00 90 FD | 	jmp	#LR__4763
2e98c     50 00 90 FD | 	jmp	#LR__4768
2e990     4C 00 90 FD | 	jmp	#LR__4768
2e994     48 00 90 FD | 	jmp	#LR__4768
2e998     2C 00 90 FD | 	jmp	#LR__4758
2e99c     38 00 90 FD | 	jmp	#LR__4764
2e9a0     2C 00 90 FD | 	jmp	#LR__4759
2e9a4     38 00 90 FD | 	jmp	#LR__4768
2e9a8                 | LR__4751
2e9a8     00 02 06 F6 | 	mov	_var02, #0
2e9ac                 | '         r = 0;
2e9ac                 | '         break;
2e9ac     34 00 90 FD | 	jmp	#LR__4769
2e9b0                 | LR__4752
2e9b0                 | LR__4753
2e9b0                 | LR__4754
2e9b0     04 02 06 F6 | 	mov	_var02, #4
2e9b4                 | '         r =  4 ;
2e9b4                 | '         break;
2e9b4     2C 00 90 FD | 	jmp	#LR__4769
2e9b8                 | LR__4755
2e9b8                 | LR__4756
2e9b8     06 02 06 F6 | 	mov	_var02, #6
2e9bc                 | '         r =  6 ;
2e9bc                 | '         break;
2e9bc     24 00 90 FD | 	jmp	#LR__4769
2e9c0                 | LR__4757
2e9c0     09 02 06 F6 | 	mov	_var02, #9
2e9c4                 | '         r =  9 ;
2e9c4                 | '         break;
2e9c4     1C 00 90 FD | 	jmp	#LR__4769
2e9c8                 | LR__4758
2e9c8     07 02 06 F6 | 	mov	_var02, #7
2e9cc                 | '         r =  7 ;
2e9cc                 | '         break;
2e9cc     14 00 90 FD | 	jmp	#LR__4769
2e9d0                 | LR__4759
2e9d0                 | LR__4760
2e9d0                 | LR__4761
2e9d0                 | LR__4762
2e9d0                 | LR__4763
2e9d0     0A 02 06 F6 | 	mov	_var02, #10
2e9d4                 | '         r =  10 ;
2e9d4                 | '         break;
2e9d4     0C 00 90 FD | 	jmp	#LR__4769
2e9d8                 | LR__4764
2e9d8     0B 02 06 F6 | 	mov	_var02, #11
2e9dc                 | '         r =  11 ;
2e9dc                 | '         break;
2e9dc     04 00 90 FD | 	jmp	#LR__4769
2e9e0                 | LR__4765
2e9e0                 | LR__4766
2e9e0                 | LR__4767
2e9e0                 | LR__4768
2e9e0     0C 02 06 F6 | 	mov	_var02, #12
2e9e4                 | '         r =  12 ;
2e9e4                 | '         break;
2e9e4                 | LR__4769
2e9e4                 | '     }
2e9e4                 | '     return _seterror(r);
2e9e4     00 02 4E F2 | 	cmps	_var02, #0 wz
2e9e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e9ec     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2e9f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e9f4     01 FA 65 56 |  if_ne	neg	result1, #1
2e9f8     00 FA 05 A6 |  if_e	mov	result1, #0
2e9fc                 | _fatfs_cc__set_dos_error_0962_ret
2e9fc     2D 00 64 FD | 	ret
2ea00                 | 
2ea00                 | _fatfs_cc_v_creat
2ea00     04 4A 05 F6 | 	mov	COUNT_, #4
2ea04     A8 00 A0 FD | 	call	#pushregs_
2ea08     09 1F 02 F6 | 	mov	local01, arg01
2ea0c     0A 21 02 F6 | 	mov	local02, arg02
2ea10     03 00 00 FF 
2ea14     3C 12 06 F6 | 	mov	arg01, ##1596
2ea18                 | '     return _gc_alloc(size);
2ea18     10 14 06 F6 | 	mov	arg02, #16
2ea1c     28 5E BF FD | 	call	#__system___gc_doalloc
2ea20     FD 22 0A F6 | 	mov	local03, result1 wz
2ea24                 | '       return _seterror( 7 );
2ea24     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ea28     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ea2c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ea30     01 FA 65 A6 |  if_e	neg	result1, #1
2ea34     58 00 90 AD |  if_e	jmp	#LR__4771
2ea38     11 13 02 F6 | 	mov	arg01, local03
2ea3c     00 14 06 F6 | 	mov	arg02, #0
2ea40     03 00 00 FF 
2ea44     3C 16 06 F6 | 	mov	arg03, ##1596
2ea48     98 00 A0 FD | 	call	#\builtin_bytefill_
2ea4c     02 00 00 FF 
2ea50     14 22 06 F1 | 	add	local03, ##1044
2ea54     11 13 02 F6 | 	mov	arg01, local03
2ea58     02 00 00 FF 
2ea5c     14 22 86 F1 | 	sub	local03, ##1044
2ea60     10 15 02 F6 | 	mov	arg02, local02
2ea64     07 16 06 F6 | 	mov	arg03, #7
2ea68     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2ea6c     FD 24 0A F6 | 	mov	local04, result1 wz
2ea70     14 00 90 AD |  if_e	jmp	#LR__4770
2ea74     11 13 02 F6 | 	mov	arg01, local03
2ea78                 | '     return _gc_free(ptr);
2ea78     D8 5E BF FD | 	call	#__system___gc_free
2ea7c                 | '     free(f);
2ea7c                 | '     return _set_dos_error(r);
2ea7c     12 13 02 F6 | 	mov	arg01, local04
2ea80     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ea84     08 00 90 FD | 	jmp	#LR__4771
2ea88                 | LR__4770
2ea88     0F 23 62 FC | 	wrlong	local03, local01
2ea8c                 | '   }
2ea8c                 | '   fil->vfsdata = f;
2ea8c                 | '   return 0;
2ea8c     00 FA 05 F6 | 	mov	result1, #0
2ea90                 | LR__4771
2ea90     A7 F0 03 F6 | 	mov	ptra, fp
2ea94     B2 00 A0 FD | 	call	#popregs_
2ea98                 | _fatfs_cc_v_creat_ret
2ea98     2D 00 64 FD | 	ret
2ea9c                 | 
2ea9c                 | _fatfs_cc_v_close
2ea9c     02 4A 05 F6 | 	mov	COUNT_, #2
2eaa0     A8 00 A0 FD | 	call	#pushregs_
2eaa4     09 1F 02 FB | 	rdlong	local01, arg01
2eaa8     02 00 00 FF 
2eaac     14 1E 06 F1 | 	add	local01, ##1044
2eab0     0F 13 02 F6 | 	mov	arg01, local01
2eab4     02 00 00 FF 
2eab8     14 1E 86 F1 | 	sub	local01, ##1044
2eabc     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2eac0     FD 20 02 F6 | 	mov	local02, result1
2eac4     0F 13 02 F6 | 	mov	arg01, local01
2eac8                 | '     return _gc_free(ptr);
2eac8     88 5E BF FD | 	call	#__system___gc_free
2eacc                 | '     FAT_FIL *f = fil->vfsdata;
2eacc                 | '     r=f_close(&f->fil);
2eacc                 | '     free(f);
2eacc                 | '     return _set_dos_error(r);
2eacc     10 13 02 F6 | 	mov	arg01, local02
2ead0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ead4     A7 F0 03 F6 | 	mov	ptra, fp
2ead8     B2 00 A0 FD | 	call	#popregs_
2eadc                 | _fatfs_cc_v_close_ret
2eadc     2D 00 64 FD | 	ret
2eae0                 | 
2eae0                 | _fatfs_cc_v_opendir
2eae0     04 4A 05 F6 | 	mov	COUNT_, #4
2eae4     A8 00 A0 FD | 	call	#pushregs_
2eae8     09 1F 02 F6 | 	mov	local01, arg01
2eaec     0A 21 02 F6 | 	mov	local02, arg02
2eaf0     30 12 06 F6 | 	mov	arg01, #48
2eaf4                 | '     return _gc_alloc(size);
2eaf4     10 14 06 F6 | 	mov	arg02, #16
2eaf8     4C 5D BF FD | 	call	#__system___gc_doalloc
2eafc     FD 22 0A F6 | 	mov	local03, result1 wz
2eb00                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eb00                 | '       return _seterror( 7 );
2eb00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eb04     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2eb08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2eb0c     01 FA 65 A6 |  if_e	neg	result1, #1
2eb10     34 00 90 AD |  if_e	jmp	#LR__4781
2eb14     10 15 02 F6 | 	mov	arg02, local02
2eb18     11 13 02 F6 | 	mov	arg01, local03
2eb1c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2eb20     FD 24 0A F6 | 	mov	local04, result1 wz
2eb24     14 00 90 AD |  if_e	jmp	#LR__4780
2eb28     11 13 02 F6 | 	mov	arg01, local03
2eb2c                 | '     return _gc_free(ptr);
2eb2c     24 5E BF FD | 	call	#__system___gc_free
2eb30                 | '         free(f);
2eb30                 | '         return _set_dos_error(r);
2eb30     12 13 02 F6 | 	mov	arg01, local04
2eb34     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eb38     0C 00 90 FD | 	jmp	#LR__4781
2eb3c                 | LR__4780
2eb3c     04 1E 06 F1 | 	add	local01, #4
2eb40     0F 23 62 FC | 	wrlong	local03, local01
2eb44                 | '     }
2eb44                 | '     dir->vfsdata = f;
2eb44                 | '     return 0;
2eb44     00 FA 05 F6 | 	mov	result1, #0
2eb48                 | LR__4781
2eb48     A7 F0 03 F6 | 	mov	ptra, fp
2eb4c     B2 00 A0 FD | 	call	#popregs_
2eb50                 | _fatfs_cc_v_opendir_ret
2eb50     2D 00 64 FD | 	ret
2eb54                 | 
2eb54                 | _fatfs_cc_v_closedir
2eb54     02 4A 05 F6 | 	mov	COUNT_, #2
2eb58     A8 00 A0 FD | 	call	#pushregs_
2eb5c     04 12 06 F1 | 	add	arg01, #4
2eb60     09 1F 02 FB | 	rdlong	local01, arg01
2eb64     0F 13 02 F6 | 	mov	arg01, local01
2eb68     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2eb6c     FD 20 02 F6 | 	mov	local02, result1
2eb70     0F 13 02 F6 | 	mov	arg01, local01
2eb74                 | '     return _gc_free(ptr);
2eb74     DC 5D BF FD | 	call	#__system___gc_free
2eb78     00 20 0E F2 | 	cmp	local02, #0 wz
2eb7c     10 13 02 56 |  if_ne	mov	arg01, local02
2eb80     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2eb84                 | '     return r;
2eb84     10 FB 01 F6 | 	mov	result1, local02
2eb88     A7 F0 03 F6 | 	mov	ptra, fp
2eb8c     B2 00 A0 FD | 	call	#popregs_
2eb90                 | _fatfs_cc_v_closedir_ret
2eb90     2D 00 64 FD | 	ret
2eb94                 | 
2eb94                 | _fatfs_cc_v_readdir
2eb94     01 4A 05 F6 | 	mov	COUNT_, #1
2eb98     A8 00 A0 FD | 	call	#pushregs_
2eb9c     2C F1 07 F1 | 	add	ptra, #300
2eba0     04 4E 05 F1 | 	add	fp, #4
2eba4     A7 12 62 FC | 	wrlong	arg01, fp
2eba8     04 4E 05 F1 | 	add	fp, #4
2ebac     A7 14 62 FC | 	wrlong	arg02, fp
2ebb0     04 4E 85 F1 | 	sub	fp, #4
2ebb4     A7 16 02 FB | 	rdlong	arg03, fp
2ebb8     04 16 06 F1 | 	add	arg03, #4
2ebbc     0B 13 02 FB | 	rdlong	arg01, arg03
2ebc0     08 4E 05 F1 | 	add	fp, #8
2ebc4     A7 14 02 F6 | 	mov	arg02, fp
2ebc8     0C 4E 85 F1 | 	sub	fp, #12
2ebcc     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ebd0     28 4F 05 F1 | 	add	fp, #296
2ebd4     A7 FA 61 FC | 	wrlong	result1, fp
2ebd8     28 4F 85 F1 | 	sub	fp, #296
2ebdc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebe0     14 00 90 AD |  if_e	jmp	#LR__4790
2ebe4                 | '         return _set_dos_error(r);
2ebe4     28 4F 05 F1 | 	add	fp, #296
2ebe8     A7 12 02 FB | 	rdlong	arg01, fp
2ebec     28 4F 85 F1 | 	sub	fp, #296
2ebf0     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ebf4     C4 00 90 FD | 	jmp	#LR__4793
2ebf8                 | LR__4790
2ebf8     28 4E 05 F1 | 	add	fp, #40
2ebfc     A7 16 CA FA | 	rdbyte	arg03, fp wz
2ec00     28 4E 85 F1 | 	sub	fp, #40
2ec04                 | '         return -1;
2ec04     01 FA 65 A6 |  if_e	neg	result1, #1
2ec08     B0 00 90 AD |  if_e	jmp	#LR__4793
2ec0c     08 4E 05 F1 | 	add	fp, #8
2ec10     A7 12 02 FB | 	rdlong	arg01, fp
2ec14     20 4E 05 F1 | 	add	fp, #32
2ec18     A7 14 02 F6 | 	mov	arg02, fp
2ec1c     28 4E 85 F1 | 	sub	fp, #40
2ec20     3F 16 06 F6 | 	mov	arg03, #63
2ec24     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2ec28     08 4E 05 F1 | 	add	fp, #8
2ec2c     A7 16 02 FB | 	rdlong	arg03, fp
2ec30     3F 16 06 F1 | 	add	arg03, #63
2ec34     0B 01 48 FC | 	wrbyte	#0, arg03
2ec38     0C 4E 05 F1 | 	add	fp, #12
2ec3c     A7 16 C2 FA | 	rdbyte	arg03, fp
2ec40     14 4E 85 F1 | 	sub	fp, #20
2ec44     10 16 CE F7 | 	test	arg03, #16 wz
2ec48     18 00 90 AD |  if_e	jmp	#LR__4791
2ec4c     08 4E 05 F1 | 	add	fp, #8
2ec50     A7 16 02 FB | 	rdlong	arg03, fp
2ec54     08 4E 85 F1 | 	sub	fp, #8
2ec58     50 16 06 F1 | 	add	arg03, #80
2ec5c     0B 03 48 FC | 	wrbyte	#1, arg03
2ec60     14 00 90 FD | 	jmp	#LR__4792
2ec64                 | LR__4791
2ec64     08 4E 05 F1 | 	add	fp, #8
2ec68     A7 16 02 FB | 	rdlong	arg03, fp
2ec6c     08 4E 85 F1 | 	sub	fp, #8
2ec70     50 16 06 F1 | 	add	arg03, #80
2ec74     0B 01 48 FC | 	wrbyte	#0, arg03
2ec78                 | LR__4792
2ec78     08 4E 05 F1 | 	add	fp, #8
2ec7c     A7 16 02 FB | 	rdlong	arg03, fp
2ec80     04 4E 05 F1 | 	add	fp, #4
2ec84     A7 14 02 FB | 	rdlong	arg02, fp
2ec88     48 16 06 F1 | 	add	arg03, #72
2ec8c     0B 15 62 FC | 	wrlong	arg02, arg03
2ec90     04 4E 85 F1 | 	sub	fp, #4
2ec94     A7 1E 02 FB | 	rdlong	local01, fp
2ec98     08 4E 05 F1 | 	add	fp, #8
2ec9c     A7 12 E2 FA | 	rdword	arg01, fp
2eca0     02 4E 05 F1 | 	add	fp, #2
2eca4     A7 14 E2 FA | 	rdword	arg02, fp
2eca8     12 4E 85 F1 | 	sub	fp, #18
2ecac     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2ecb0     4C 1E 06 F1 | 	add	local01, #76
2ecb4     0F FB 61 FC | 	wrlong	result1, local01
2ecb8                 | '         ent->d_type =  (0) ;
2ecb8                 | '     }
2ecb8                 | '     ent->d_size = finfo.fsize;
2ecb8                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ecb8                 | '     return 0;
2ecb8     00 FA 05 F6 | 	mov	result1, #0
2ecbc                 | LR__4793
2ecbc     A7 F0 03 F6 | 	mov	ptra, fp
2ecc0     B2 00 A0 FD | 	call	#popregs_
2ecc4                 | _fatfs_cc_v_readdir_ret
2ecc4     2D 00 64 FD | 	ret
2ecc8                 | 
2ecc8                 | _fatfs_cc_v_stat
2ecc8     03 4A 05 F6 | 	mov	COUNT_, #3
2eccc     A8 00 A0 FD | 	call	#pushregs_
2ecd0     30 F1 07 F1 | 	add	ptra, #304
2ecd4     04 4E 05 F1 | 	add	fp, #4
2ecd8     A7 12 62 FC | 	wrlong	arg01, fp
2ecdc     04 4E 05 F1 | 	add	fp, #4
2ece0     A7 14 62 FC | 	wrlong	arg02, fp
2ece4     08 4E 85 F1 | 	sub	fp, #8
2ece8     0A 13 02 F6 | 	mov	arg01, arg02
2ecec     00 14 06 F6 | 	mov	arg02, #0
2ecf0     30 16 06 F6 | 	mov	arg03, #48
2ecf4     98 00 A0 FD | 	call	#\builtin_bytefill_
2ecf8     04 4E 05 F1 | 	add	fp, #4
2ecfc     A7 FA 01 FB | 	rdlong	result1, fp
2ed00     04 4E 85 F1 | 	sub	fp, #4
2ed04     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ed08     2C 00 90 AD |  if_e	jmp	#LR__4800
2ed0c     04 4E 05 F1 | 	add	fp, #4
2ed10     A7 FA 01 FB | 	rdlong	result1, fp
2ed14     04 4E 85 F1 | 	sub	fp, #4
2ed18     FD FA C1 FA | 	rdbyte	result1, result1
2ed1c     2E FA 0D F2 | 	cmp	result1, #46 wz
2ed20     04 4E 05 A1 |  if_e	add	fp, #4
2ed24     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ed28     04 4E 85 A1 |  if_e	sub	fp, #4
2ed2c     01 1E 06 A1 |  if_e	add	local01, #1
2ed30     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ed34     18 00 90 5D |  if_ne	jmp	#LR__4801
2ed38                 | LR__4800
2ed38     18 4E 05 F1 | 	add	fp, #24
2ed3c     A7 20 48 FC | 	wrbyte	#16, fp
2ed40     0C 4E 85 F1 | 	sub	fp, #12
2ed44     A7 00 68 FC | 	wrlong	#0, fp
2ed48     0C 4E 85 F1 | 	sub	fp, #12
2ed4c     24 00 90 FD | 	jmp	#LR__4802
2ed50                 | LR__4801
2ed50     04 4E 05 F1 | 	add	fp, #4
2ed54     A7 12 02 FB | 	rdlong	arg01, fp
2ed58     0C 4E 05 F1 | 	add	fp, #12
2ed5c     A7 14 02 F6 | 	mov	arg02, fp
2ed60     10 4E 85 F1 | 	sub	fp, #16
2ed64     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ed68     0C 4E 05 F1 | 	add	fp, #12
2ed6c     A7 FA 61 FC | 	wrlong	result1, fp
2ed70     0C 4E 85 F1 | 	sub	fp, #12
2ed74                 | LR__4802
2ed74     0C 4E 05 F1 | 	add	fp, #12
2ed78     A7 20 0A FB | 	rdlong	local02, fp wz
2ed7c     0C 4E 85 F1 | 	sub	fp, #12
2ed80     14 00 90 AD |  if_e	jmp	#LR__4803
2ed84                 | '         return _set_dos_error(r);
2ed84     0C 4E 05 F1 | 	add	fp, #12
2ed88     A7 12 02 FB | 	rdlong	arg01, fp
2ed8c     0C 4E 85 F1 | 	sub	fp, #12
2ed90     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ed94     14 01 90 FD | 	jmp	#LR__4804
2ed98                 | LR__4803
2ed98     2C 4F 05 F1 | 	add	fp, #300
2ed9c     A7 48 6A FC | 	wrlong	#292, fp
2eda0     14 4F 85 F1 | 	sub	fp, #276
2eda4     A7 22 C2 FA | 	rdbyte	local03, fp
2eda8     18 4E 85 F1 | 	sub	fp, #24
2edac     01 22 CE F7 | 	test	local03, #1 wz
2edb0     2C 4F 05 A1 |  if_e	add	fp, #300
2edb4     A7 22 02 AB |  if_e	rdlong	local03, fp
2edb8     92 22 46 A5 |  if_e	or	local03, #146
2edbc     A7 22 62 AC |  if_e	wrlong	local03, fp
2edc0     2C 4F 85 A1 |  if_e	sub	fp, #300
2edc4     18 4E 05 F1 | 	add	fp, #24
2edc8     A7 22 C2 FA | 	rdbyte	local03, fp
2edcc     18 4E 85 F1 | 	sub	fp, #24
2edd0     10 22 CE F7 | 	test	local03, #16 wz
2edd4     2C 4F 05 51 |  if_ne	add	fp, #300
2edd8     A7 22 02 5B |  if_ne	rdlong	local03, fp
2eddc     08 00 00 5F 
2ede0     49 22 46 55 |  if_ne	or	local03, ##4169
2ede4     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ede8     2C 4F 85 51 |  if_ne	sub	fp, #300
2edec     08 4E 05 F1 | 	add	fp, #8
2edf0     A7 22 02 FB | 	rdlong	local03, fp
2edf4     24 4F 05 F1 | 	add	fp, #292
2edf8     A7 20 02 FB | 	rdlong	local02, fp
2edfc     08 22 06 F1 | 	add	local03, #8
2ee00     11 21 62 FC | 	wrlong	local02, local03
2ee04     24 4F 85 F1 | 	sub	fp, #292
2ee08     A7 22 02 FB | 	rdlong	local03, fp
2ee0c     0C 22 06 F1 | 	add	local03, #12
2ee10     11 03 68 FC | 	wrlong	#1, local03
2ee14     A7 22 02 FB | 	rdlong	local03, fp
2ee18     08 4E 05 F1 | 	add	fp, #8
2ee1c     A7 20 02 FB | 	rdlong	local02, fp
2ee20     18 22 06 F1 | 	add	local03, #24
2ee24     11 21 62 FC | 	wrlong	local02, local03
2ee28     08 4E 85 F1 | 	sub	fp, #8
2ee2c     A7 22 02 FB | 	rdlong	local03, fp
2ee30     1C 22 06 F1 | 	add	local03, #28
2ee34     01 00 80 FF 
2ee38     11 01 68 FC | 	wrlong	##512, local03
2ee3c     A7 20 02 FB | 	rdlong	local02, fp
2ee40     10 23 02 F6 | 	mov	local03, local02
2ee44     18 20 06 F1 | 	add	local02, #24
2ee48     10 21 02 FB | 	rdlong	local02, local02
2ee4c     FF 21 06 F1 | 	add	local02, #511
2ee50     10 21 52 F6 | 	abs	local02, local02 wc
2ee54     09 20 46 F0 | 	shr	local02, #9
2ee58     10 21 82 F6 | 	negc	local02, local02
2ee5c     20 22 06 F1 | 	add	local03, #32
2ee60     11 21 62 FC | 	wrlong	local02, local03
2ee64     A7 20 02 FB | 	rdlong	local02, fp
2ee68     10 23 02 F6 | 	mov	local03, local02
2ee6c     10 1F 02 F6 | 	mov	local01, local02
2ee70     0C 4E 05 F1 | 	add	fp, #12
2ee74     A7 12 E2 FA | 	rdword	arg01, fp
2ee78     02 4E 05 F1 | 	add	fp, #2
2ee7c     A7 14 E2 FA | 	rdword	arg02, fp
2ee80     16 4E 85 F1 | 	sub	fp, #22
2ee84     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2ee88     2C 1E 06 F1 | 	add	local01, #44
2ee8c     0F FB 61 FC | 	wrlong	result1, local01
2ee90     28 20 06 F1 | 	add	local02, #40
2ee94     10 FB 61 FC | 	wrlong	result1, local02
2ee98     24 22 06 F1 | 	add	local03, #36
2ee9c     11 FB 61 FC | 	wrlong	result1, local03
2eea0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2eea0                 | '     }
2eea0                 | '     buf->st_mode = mode;
2eea0                 | '     buf->st_nlink = 1;
2eea0                 | '     buf->st_size = finfo.fsize;
2eea0                 | '     buf->st_blksize = 512;
2eea0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2eea0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2eea0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eea0                 | '     return r;
2eea0     0C 4E 05 F1 | 	add	fp, #12
2eea4     A7 FA 01 FB | 	rdlong	result1, fp
2eea8     0C 4E 85 F1 | 	sub	fp, #12
2eeac                 | LR__4804
2eeac     A7 F0 03 F6 | 	mov	ptra, fp
2eeb0     B2 00 A0 FD | 	call	#popregs_
2eeb4                 | _fatfs_cc_v_stat_ret
2eeb4     2D 00 64 FD | 	ret
2eeb8                 | 
2eeb8                 | _fatfs_cc_v_read
2eeb8     00 4A 05 F6 | 	mov	COUNT_, #0
2eebc     A8 00 A0 FD | 	call	#pushregs_
2eec0     1C F0 07 F1 | 	add	ptra, #28
2eec4     04 4E 05 F1 | 	add	fp, #4
2eec8     A7 12 62 FC | 	wrlong	arg01, fp
2eecc     04 4E 05 F1 | 	add	fp, #4
2eed0     A7 14 62 FC | 	wrlong	arg02, fp
2eed4     04 4E 05 F1 | 	add	fp, #4
2eed8     A7 16 62 FC | 	wrlong	arg03, fp
2eedc     08 4E 85 F1 | 	sub	fp, #8
2eee0     A7 12 02 FB | 	rdlong	arg01, fp
2eee4     09 13 0A FB | 	rdlong	arg01, arg01 wz
2eee8     0C 4E 05 F1 | 	add	fp, #12
2eeec     A7 12 62 FC | 	wrlong	arg01, fp
2eef0     10 4E 85 F1 | 	sub	fp, #16
2eef4                 | '         return _seterror( 5 );
2eef4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eef8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2eefc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ef00     01 FA 65 A6 |  if_e	neg	result1, #1
2ef04     B8 00 90 AD |  if_e	jmp	#LR__4812
2ef08     10 4E 05 F1 | 	add	fp, #16
2ef0c     A7 12 02 FB | 	rdlong	arg01, fp
2ef10     02 00 00 FF 
2ef14     14 12 06 F1 | 	add	arg01, ##1044
2ef18     08 4E 85 F1 | 	sub	fp, #8
2ef1c     A7 14 02 FB | 	rdlong	arg02, fp
2ef20     04 4E 05 F1 | 	add	fp, #4
2ef24     A7 16 02 FB | 	rdlong	arg03, fp
2ef28     0C 4E 05 F1 | 	add	fp, #12
2ef2c     A7 18 02 F6 | 	mov	arg04, fp
2ef30     18 4E 85 F1 | 	sub	fp, #24
2ef34     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ef38     14 4E 05 F1 | 	add	fp, #20
2ef3c     A7 FA 61 FC | 	wrlong	result1, fp
2ef40     14 4E 85 F1 | 	sub	fp, #20
2ef44     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef48     34 00 90 AD |  if_e	jmp	#LR__4810
2ef4c     04 4E 05 F1 | 	add	fp, #4
2ef50     A7 18 02 FB | 	rdlong	arg04, fp
2ef54     0C 17 02 F6 | 	mov	arg03, arg04
2ef58     08 18 06 F1 | 	add	arg04, #8
2ef5c     0C 19 02 FB | 	rdlong	arg04, arg04
2ef60     20 18 46 F5 | 	or	arg04, #32
2ef64     08 16 06 F1 | 	add	arg03, #8
2ef68     0B 19 62 FC | 	wrlong	arg04, arg03
2ef6c                 | '         fil->state |=  (0x20) ;
2ef6c                 | '         return _set_dos_error(r);
2ef6c     10 4E 05 F1 | 	add	fp, #16
2ef70     A7 12 02 FB | 	rdlong	arg01, fp
2ef74     14 4E 85 F1 | 	sub	fp, #20
2ef78     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef7c     40 00 90 FD | 	jmp	#LR__4812
2ef80                 | LR__4810
2ef80     18 4E 05 F1 | 	add	fp, #24
2ef84     A7 FA 09 FB | 	rdlong	result1, fp wz
2ef88     18 4E 85 F1 | 	sub	fp, #24
2ef8c     24 00 90 5D |  if_ne	jmp	#LR__4811
2ef90     04 4E 05 F1 | 	add	fp, #4
2ef94     A7 FA 01 FB | 	rdlong	result1, fp
2ef98     FD 18 02 F6 | 	mov	arg04, result1
2ef9c     04 4E 85 F1 | 	sub	fp, #4
2efa0     08 FA 05 F1 | 	add	result1, #8
2efa4     FD FA 01 FB | 	rdlong	result1, result1
2efa8     10 FA 45 F5 | 	or	result1, #16
2efac     08 18 06 F1 | 	add	arg04, #8
2efb0     0C FB 61 FC | 	wrlong	result1, arg04
2efb4                 | LR__4811
2efb4                 | '         fil->state |=  (0x10) ;
2efb4                 | '     }
2efb4                 | '     return x;
2efb4     18 4E 05 F1 | 	add	fp, #24
2efb8     A7 FA 01 FB | 	rdlong	result1, fp
2efbc     18 4E 85 F1 | 	sub	fp, #24
2efc0                 | LR__4812
2efc0     A7 F0 03 F6 | 	mov	ptra, fp
2efc4     B2 00 A0 FD | 	call	#popregs_
2efc8                 | _fatfs_cc_v_read_ret
2efc8     2D 00 64 FD | 	ret
2efcc                 | 
2efcc                 | _fatfs_cc_v_write
2efcc     00 4A 05 F6 | 	mov	COUNT_, #0
2efd0     A8 00 A0 FD | 	call	#pushregs_
2efd4     1C F0 07 F1 | 	add	ptra, #28
2efd8     04 4E 05 F1 | 	add	fp, #4
2efdc     A7 12 62 FC | 	wrlong	arg01, fp
2efe0     04 4E 05 F1 | 	add	fp, #4
2efe4     A7 14 62 FC | 	wrlong	arg02, fp
2efe8     04 4E 05 F1 | 	add	fp, #4
2efec     A7 16 62 FC | 	wrlong	arg03, fp
2eff0     08 4E 85 F1 | 	sub	fp, #8
2eff4     A7 12 02 FB | 	rdlong	arg01, fp
2eff8     09 13 0A FB | 	rdlong	arg01, arg01 wz
2effc     0C 4E 05 F1 | 	add	fp, #12
2f000     A7 12 62 FC | 	wrlong	arg01, fp
2f004     10 4E 85 F1 | 	sub	fp, #16
2f008                 | '         return _seterror( 5 );
2f008     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f00c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f010     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f014     01 FA 65 A6 |  if_e	neg	result1, #1
2f018     84 00 90 AD |  if_e	jmp	#LR__4821
2f01c     10 4E 05 F1 | 	add	fp, #16
2f020     A7 12 02 FB | 	rdlong	arg01, fp
2f024     02 00 00 FF 
2f028     14 12 06 F1 | 	add	arg01, ##1044
2f02c     08 4E 85 F1 | 	sub	fp, #8
2f030     A7 14 02 FB | 	rdlong	arg02, fp
2f034     04 4E 05 F1 | 	add	fp, #4
2f038     A7 16 02 FB | 	rdlong	arg03, fp
2f03c     0C 4E 05 F1 | 	add	fp, #12
2f040     A7 18 02 F6 | 	mov	arg04, fp
2f044     18 4E 85 F1 | 	sub	fp, #24
2f048     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f04c     14 4E 05 F1 | 	add	fp, #20
2f050     A7 FA 61 FC | 	wrlong	result1, fp
2f054     14 4E 85 F1 | 	sub	fp, #20
2f058     00 FA 0D F2 | 	cmp	result1, #0 wz
2f05c     34 00 90 AD |  if_e	jmp	#LR__4820
2f060     04 4E 05 F1 | 	add	fp, #4
2f064     A7 18 02 FB | 	rdlong	arg04, fp
2f068     0C 17 02 F6 | 	mov	arg03, arg04
2f06c     08 18 06 F1 | 	add	arg04, #8
2f070     0C 19 02 FB | 	rdlong	arg04, arg04
2f074     20 18 46 F5 | 	or	arg04, #32
2f078     08 16 06 F1 | 	add	arg03, #8
2f07c     0B 19 62 FC | 	wrlong	arg04, arg03
2f080                 | '         fil->state |=  (0x20) ;
2f080                 | '         return _set_dos_error(r);
2f080     10 4E 05 F1 | 	add	fp, #16
2f084     A7 12 02 FB | 	rdlong	arg01, fp
2f088     14 4E 85 F1 | 	sub	fp, #20
2f08c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f090     0C 00 90 FD | 	jmp	#LR__4821
2f094                 | LR__4820
2f094                 | '     }
2f094                 | '     return x;
2f094     18 4E 05 F1 | 	add	fp, #24
2f098     A7 FA 01 FB | 	rdlong	result1, fp
2f09c     18 4E 85 F1 | 	sub	fp, #24
2f0a0                 | LR__4821
2f0a0     A7 F0 03 F6 | 	mov	ptra, fp
2f0a4     B2 00 A0 FD | 	call	#popregs_
2f0a8                 | _fatfs_cc_v_write_ret
2f0a8     2D 00 64 FD | 	ret
2f0ac                 | 
2f0ac                 | _fatfs_cc_v_lseek
2f0ac     04 4A 05 F6 | 	mov	COUNT_, #4
2f0b0     A8 00 A0 FD | 	call	#pushregs_
2f0b4     0A 1F 02 F6 | 	mov	local01, arg02
2f0b8     0B 21 02 F6 | 	mov	local02, arg03
2f0bc     09 23 02 FB | 	rdlong	local03, arg01
2f0c0     02 00 00 FF 
2f0c4     14 22 0E F1 | 	add	local03, ##1044 wz
2f0c8                 | '         return _seterror( 5 );
2f0c8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f0cc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f0d0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f0d4     01 FA 65 A6 |  if_e	neg	result1, #1
2f0d8     4C 00 90 AD |  if_e	jmp	#LR__4832
2f0dc     00 20 0E F2 | 	cmp	local02, #0 wz
2f0e0     24 00 90 AD |  if_e	jmp	#LR__4830
2f0e4     01 20 0E F2 | 	cmp	local02, #1 wz
2f0e8     14 22 06 A1 |  if_e	add	local03, #20
2f0ec     11 25 02 AB |  if_e	rdlong	local04, local03
2f0f0     14 22 86 A1 |  if_e	sub	local03, #20
2f0f4     12 1F 02 A1 |  if_e	add	local01, local04
2f0f8     0C 22 06 51 |  if_ne	add	local03, #12
2f0fc     11 25 02 5B |  if_ne	rdlong	local04, local03
2f100     0C 22 86 51 |  if_ne	sub	local03, #12
2f104     12 1F 02 51 |  if_ne	add	local01, local04
2f108                 | LR__4830
2f108     0F 15 02 F6 | 	mov	arg02, local01
2f10c     11 13 02 F6 | 	mov	arg01, local03
2f110     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f114     FD 12 0A F6 | 	mov	arg01, result1 wz
2f118     08 00 90 AD |  if_e	jmp	#LR__4831
2f11c                 | '         return _set_dos_error(result);
2f11c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f120     04 00 90 FD | 	jmp	#LR__4832
2f124                 | LR__4831
2f124                 | '     }
2f124                 | '     return offset;
2f124     0F FB 01 F6 | 	mov	result1, local01
2f128                 | LR__4832
2f128     A7 F0 03 F6 | 	mov	ptra, fp
2f12c     B2 00 A0 FD | 	call	#popregs_
2f130                 | _fatfs_cc_v_lseek_ret
2f130     2D 00 64 FD | 	ret
2f134                 | 
2f134                 | _fatfs_cc_v_ioctl
2f134                 | ' {
2f134                 | '     return _seterror( 10 );
2f134     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f138     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f13c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f140     01 FA 65 F6 | 	neg	result1, #1
2f144                 | _fatfs_cc_v_ioctl_ret
2f144     2D 00 64 FD | 	ret
2f148                 | 
2f148                 | _fatfs_cc_v_mkdir
2f148     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f14c     FD 12 02 F6 | 	mov	arg01, result1
2f150                 | ' 
2f150                 | '     r = f_mkdir(name);
2f150                 | '     return _set_dos_error(r);
2f150     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f154                 | _fatfs_cc_v_mkdir_ret
2f154     2D 00 64 FD | 	ret
2f158                 | 
2f158                 | _fatfs_cc_v_remove
2f158     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f15c     FD 12 02 F6 | 	mov	arg01, result1
2f160                 | ' 
2f160                 | '     r = f_unlink(name);
2f160                 | '     return _set_dos_error(r);
2f160     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f164                 | _fatfs_cc_v_remove_ret
2f164     2D 00 64 FD | 	ret
2f168                 | 
2f168                 | _fatfs_cc_v_rmdir
2f168     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f16c     FD 12 02 F6 | 	mov	arg01, result1
2f170                 | ' 
2f170                 | '     r = f_unlink(name);
2f170                 | '     return _set_dos_error(r);
2f170     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f174                 | _fatfs_cc_v_rmdir_ret
2f174     2D 00 64 FD | 	ret
2f178                 | 
2f178                 | _fatfs_cc_v_rename
2f178     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f17c     FD 12 02 F6 | 	mov	arg01, result1
2f180                 | '     return _set_dos_error(r);
2f180     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f184                 | _fatfs_cc_v_rename_ret
2f184     2D 00 64 FD | 	ret
2f188                 | 
2f188                 | _fatfs_cc_v_open
2f188     07 4A 05 F6 | 	mov	COUNT_, #7
2f18c     A8 00 A0 FD | 	call	#pushregs_
2f190     09 1F 02 F6 | 	mov	local01, arg01
2f194     0A 21 02 F6 | 	mov	local02, arg02
2f198     0B 23 02 F6 | 	mov	local03, arg03
2f19c     03 00 00 FF 
2f1a0     3C 12 06 F6 | 	mov	arg01, ##1596
2f1a4                 | '     return _gc_alloc(size);
2f1a4     10 14 06 F6 | 	mov	arg02, #16
2f1a8     9C 56 BF FD | 	call	#__system___gc_doalloc
2f1ac     FD 24 0A F6 | 	mov	local04, result1 wz
2f1b0                 | '       return _seterror( 7 );
2f1b0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f1b4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f1b8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f1bc     01 FA 65 A6 |  if_e	neg	result1, #1
2f1c0     98 00 90 AD |  if_e	jmp	#LR__4846
2f1c4     12 13 02 F6 | 	mov	arg01, local04
2f1c8     00 14 06 F6 | 	mov	arg02, #0
2f1cc     03 00 00 FF 
2f1d0     3C 16 06 F6 | 	mov	arg03, ##1596
2f1d4     98 00 A0 FD | 	call	#\builtin_bytefill_
2f1d8                 | '   switch (flags & 3) {
2f1d8     11 27 02 F6 | 	mov	local05, local03
2f1dc     03 26 0E F5 | 	and	local05, #3 wz
2f1e0     0C 00 90 AD |  if_e	jmp	#LR__4840
2f1e4     01 26 0E F2 | 	cmp	local05, #1 wz
2f1e8     0C 00 90 AD |  if_e	jmp	#LR__4841
2f1ec     10 00 90 FD | 	jmp	#LR__4842
2f1f0                 | LR__4840
2f1f0     01 28 06 F6 | 	mov	local06, #1
2f1f4                 | '       fs_flags =  0x01 ;
2f1f4                 | '       break;
2f1f4     0C 00 90 FD | 	jmp	#LR__4843
2f1f8                 | LR__4841
2f1f8     02 28 06 F6 | 	mov	local06, #2
2f1fc                 | '       fs_flags =  0x02 ;
2f1fc                 | '       break;
2f1fc     04 00 90 FD | 	jmp	#LR__4843
2f200                 | LR__4842
2f200     03 28 06 F6 | 	mov	local06, #3
2f204                 | '       fs_flags =  0x01  |  0x02 ;
2f204                 | '       break;
2f204                 | LR__4843
2f204     08 22 CE F7 | 	test	local03, #8 wz
2f208     18 28 46 55 |  if_ne	or	local06, #24
2f20c     08 00 90 5D |  if_ne	jmp	#LR__4844
2f210     20 22 CE F7 | 	test	local03, #32 wz
2f214     30 28 46 55 |  if_ne	or	local06, #48
2f218                 | LR__4844
2f218     02 00 00 FF 
2f21c     14 24 06 F1 | 	add	local04, ##1044
2f220     12 13 02 F6 | 	mov	arg01, local04
2f224     02 00 00 FF 
2f228     14 24 86 F1 | 	sub	local04, ##1044
2f22c     10 15 02 F6 | 	mov	arg02, local02
2f230     14 17 02 F6 | 	mov	arg03, local06
2f234     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f238     FD 2A 0A F6 | 	mov	local07, result1 wz
2f23c     14 00 90 AD |  if_e	jmp	#LR__4845
2f240     12 13 02 F6 | 	mov	arg01, local04
2f244                 | '     return _gc_free(ptr);
2f244     0C 57 BF FD | 	call	#__system___gc_free
2f248                 | '     free(f);
2f248                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f248                 | '     return _set_dos_error(r);
2f248     15 13 02 F6 | 	mov	arg01, local07
2f24c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f250     08 00 90 FD | 	jmp	#LR__4846
2f254                 | LR__4845
2f254     0F 25 62 FC | 	wrlong	local04, local01
2f258                 | '   }
2f258                 | '   fil->vfsdata = f;
2f258                 | '   return 0;
2f258     00 FA 05 F6 | 	mov	result1, #0
2f25c                 | LR__4846
2f25c     A7 F0 03 F6 | 	mov	ptra, fp
2f260     B2 00 A0 FD | 	call	#popregs_
2f264                 | _fatfs_cc_v_open_ret
2f264     2D 00 64 FD | 	ret
2f268                 | 
2f268                 | _fatfs_cc_v_flush
2f268     09 13 02 FB | 	rdlong	arg01, arg01
2f26c     02 00 00 FF 
2f270     14 12 0E F1 | 	add	arg01, ##1044 wz
2f274                 | '         return _seterror( 5 );
2f274     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f278     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f27c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f280     01 FA 65 A6 |  if_e	neg	result1, #1
2f284     0C 00 90 AD |  if_e	jmp	#LR__4850
2f288     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f28c     FD 12 02 F6 | 	mov	arg01, result1
2f290                 | '     }
2f290                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f290                 | '     result = f_sync(f);
2f290                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f290                 | '     return _set_dos_error(result);
2f290     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f294                 | LR__4850
2f294                 | _fatfs_cc_v_flush_ret
2f294     2D 00 64 FD | 	ret
2f298                 | 
2f298                 | _fatfs_cc_v_init
2f298                 | ' {
2f298                 | '     return 0;
2f298     00 FA 05 F6 | 	mov	result1, #0
2f29c                 | _fatfs_cc_v_init_ret
2f29c     2D 00 64 FD | 	ret
2f2a0                 | 
2f2a0                 | _fatfs_cc_v_deinit
2f2a0     81 01 00 FF 
2f2a4     14 14 06 F6 | 	mov	arg02, ##@LR__5046
2f2a8     00 12 06 F6 | 	mov	arg01, #0
2f2ac     00 16 06 F6 | 	mov	arg03, #0
2f2b0     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f2b4     01 00 00 FF 
2f2b8     08 E4 05 F1 | 	add	objptr, ##520
2f2bc     F2 12 02 FB | 	rdlong	arg01, objptr
2f2c0     04 E4 05 F1 | 	add	objptr, #4
2f2c4     F2 14 02 FB | 	rdlong	arg02, objptr
2f2c8     01 00 00 FF 
2f2cc     0C E4 85 F1 | 	sub	objptr, ##524
2f2d0     F0 3D BF FD | 	call	#__system___freepins
2f2d4                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f2d4                 | '     _freepins(f_pinmask);
2f2d4                 | '     return 0;
2f2d4     00 FA 05 F6 | 	mov	result1, #0
2f2d8                 | _fatfs_cc_v_deinit_ret
2f2d8     2D 00 64 FD | 	ret
2f2dc                 | 
2f2dc                 | _fatfs_cc_get_vfs
2f2dc     01 4A 05 F6 | 	mov	COUNT_, #1
2f2e0     A8 00 A0 FD | 	call	#pushregs_
2f2e4     09 1F 02 F6 | 	mov	local01, arg01
2f2e8     50 12 06 F6 | 	mov	arg01, #80
2f2ec     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f2f0     FD 12 02 F6 | 	mov	arg01, result1
2f2f4     F2 FA 01 F6 | 	mov	result1, objptr
2f2f8     00 E8 04 FF 
2f2fc     00 FA 45 F5 | 	or	result1, ##164626432
2f300     09 FB 61 FC | 	wrlong	result1, arg01
2f304     F2 FA 01 F6 | 	mov	result1, objptr
2f308     00 F0 04 FF 
2f30c     00 FA 45 F5 | 	or	result1, ##165675008
2f310     04 12 06 F1 | 	add	arg01, #4
2f314     09 FB 61 FC | 	wrlong	result1, arg01
2f318     F2 FA 01 F6 | 	mov	result1, objptr
2f31c     00 F8 04 FF 
2f320     00 FA 45 F5 | 	or	result1, ##166723584
2f324     04 12 06 F1 | 	add	arg01, #4
2f328     09 FB 61 FC | 	wrlong	result1, arg01
2f32c     F2 FA 01 F6 | 	mov	result1, objptr
2f330     00 00 05 FF 
2f334     00 FA 45 F5 | 	or	result1, ##167772160
2f338     04 12 06 F1 | 	add	arg01, #4
2f33c     09 FB 61 FC | 	wrlong	result1, arg01
2f340     F2 FA 01 F6 | 	mov	result1, objptr
2f344     00 08 05 FF 
2f348     00 FA 45 F5 | 	or	result1, ##168820736
2f34c     04 12 06 F1 | 	add	arg01, #4
2f350     09 FB 61 FC | 	wrlong	result1, arg01
2f354     04 12 06 F1 | 	add	arg01, #4
2f358     09 01 68 FC | 	wrlong	#0, arg01
2f35c     04 12 06 F1 | 	add	arg01, #4
2f360     09 1F 62 FC | 	wrlong	local01, arg01
2f364     04 12 06 F1 | 	add	arg01, #4
2f368     09 01 68 FC | 	wrlong	#0, arg01
2f36c     F2 FA 01 F6 | 	mov	result1, objptr
2f370     00 10 05 FF 
2f374     00 FA 45 F5 | 	or	result1, ##169869312
2f378     04 12 06 F1 | 	add	arg01, #4
2f37c     09 FB 61 FC | 	wrlong	result1, arg01
2f380     F2 FA 01 F6 | 	mov	result1, objptr
2f384     00 18 05 FF 
2f388     00 FA 45 F5 | 	or	result1, ##170917888
2f38c     04 12 06 F1 | 	add	arg01, #4
2f390     09 FB 61 FC | 	wrlong	result1, arg01
2f394     F2 FA 01 F6 | 	mov	result1, objptr
2f398     00 20 05 FF 
2f39c     00 FA 45 F5 | 	or	result1, ##171966464
2f3a0     04 12 06 F1 | 	add	arg01, #4
2f3a4     09 FB 61 FC | 	wrlong	result1, arg01
2f3a8     F2 FA 01 F6 | 	mov	result1, objptr
2f3ac     00 28 05 FF 
2f3b0     00 FA 45 F5 | 	or	result1, ##173015040
2f3b4     04 12 06 F1 | 	add	arg01, #4
2f3b8     09 FB 61 FC | 	wrlong	result1, arg01
2f3bc     F2 FA 01 F6 | 	mov	result1, objptr
2f3c0     00 30 05 FF 
2f3c4     00 FA 45 F5 | 	or	result1, ##174063616
2f3c8     04 12 06 F1 | 	add	arg01, #4
2f3cc     09 FB 61 FC | 	wrlong	result1, arg01
2f3d0     F2 FA 01 F6 | 	mov	result1, objptr
2f3d4     00 38 05 FF 
2f3d8     00 FA 45 F5 | 	or	result1, ##175112192
2f3dc     04 12 06 F1 | 	add	arg01, #4
2f3e0     09 FB 61 FC | 	wrlong	result1, arg01
2f3e4     F2 FA 01 F6 | 	mov	result1, objptr
2f3e8     00 40 05 FF 
2f3ec     00 FA 45 F5 | 	or	result1, ##176160768
2f3f0     04 12 06 F1 | 	add	arg01, #4
2f3f4     09 FB 61 FC | 	wrlong	result1, arg01
2f3f8     F2 FA 01 F6 | 	mov	result1, objptr
2f3fc     00 48 05 FF 
2f400     00 FA 45 F5 | 	or	result1, ##177209344
2f404     04 12 06 F1 | 	add	arg01, #4
2f408     09 FB 61 FC | 	wrlong	result1, arg01
2f40c     F2 FA 01 F6 | 	mov	result1, objptr
2f410     00 50 05 FF 
2f414     00 FA 45 F5 | 	or	result1, ##178257920
2f418     04 12 06 F1 | 	add	arg01, #4
2f41c     09 FB 61 FC | 	wrlong	result1, arg01
2f420     F2 FA 01 F6 | 	mov	result1, objptr
2f424     00 58 05 FF 
2f428     00 FA 45 F5 | 	or	result1, ##179306496
2f42c     04 12 06 F1 | 	add	arg01, #4
2f430     09 FB 61 FC | 	wrlong	result1, arg01
2f434     F2 FA 01 F6 | 	mov	result1, objptr
2f438     00 60 05 FF 
2f43c     00 FA 45 F5 | 	or	result1, ##180355072
2f440     04 12 06 F1 | 	add	arg01, #4
2f444     09 FB 61 FC | 	wrlong	result1, arg01
2f448     F2 FA 01 F6 | 	mov	result1, objptr
2f44c     00 68 05 FF 
2f450     00 FA 45 F5 | 	or	result1, ##181403648
2f454     04 12 06 F1 | 	add	arg01, #4
2f458     09 FB 61 FC | 	wrlong	result1, arg01
2f45c     4C 12 86 F1 | 	sub	arg01, #76
2f460                 | ' 
2f460                 | '     v->close = &v_close;
2f460                 | '     v->read = &v_read;
2f460                 | '     v->write = &v_write;
2f460                 | '     v->lseek = &v_lseek;
2f460                 | '     v->ioctl = &v_ioctl;
2f460                 | '     v->flush = 0;
2f460                 | '     v->vfs_data = ptr;
2f460                 | '     v->reserved = 0;
2f460                 | ' 
2f460                 | '     v->open = &v_open;
2f460                 | '     v->creat = &v_creat;
2f460                 | '     v->opendir = &v_opendir;
2f460                 | '     v->closedir = &v_closedir;
2f460                 | '     v->readdir = &v_readdir;
2f460                 | '     v->stat = &v_stat;
2f460                 | ' 
2f460                 | '     v->mkdir = &v_mkdir;
2f460                 | '     v->rmdir = &v_rmdir;
2f460                 | ' 
2f460                 | '     v->remove = &v_remove;
2f460                 | '     v->rename = &v_rename;
2f460                 | ' 
2f460                 | '     v->init = &v_init;
2f460                 | '     v->deinit = &v_deinit;
2f460                 | ' 
2f460                 | '     return v;
2f460     09 FB 01 F6 | 	mov	result1, arg01
2f464     A7 F0 03 F6 | 	mov	ptra, fp
2f468     B2 00 A0 FD | 	call	#popregs_
2f46c                 | _fatfs_cc_get_vfs_ret
2f46c     2D 00 64 FD | 	ret
2f470                 | 
2f470                 | _fatfs_cc_xmit_mmc_1109
2f470     01 00 00 FF 
2f474     10 E4 05 F1 | 	add	objptr, ##528
2f478     F2 00 02 FB | 	rdlong	_var01, objptr
2f47c     08 E4 05 F1 | 	add	objptr, #8
2f480     F2 02 02 FB | 	rdlong	_var02, objptr
2f484     01 00 00 FF 
2f488     18 E4 85 F1 | 	sub	objptr, ##536
2f48c     40 02 62 FD | 	dirl	_var02
2f490     28 02 64 FD | 	setq	#1
2f494     09 05 02 FB | 	rdlong	_var03, arg01
2f498     69 04 62 FD | 	rev	_var03
2f49c     1B 04 FE F9 | 	movbyts	_var03, #27
2f4a0     01 05 22 FC | 	wypin	_var03, _var02
2f4a4     0A 05 02 F6 | 	mov	_var03, arg02
2f4a8     02 14 4E F0 | 	shr	arg02, #2 wz
2f4ac     03 04 66 F0 | 	shl	_var03, #3
2f4b0     00 05 22 FC | 	wypin	_var03, _var01
2f4b4     41 02 62 FD | 	dirh	_var02
2f4b8     08 12 06 F1 | 	add	arg01, #8
2f4bc     69 06 62 FD | 	rev	_var04
2f4c0     1B 06 FE F9 | 	movbyts	_var04, #27
2f4c4                 | LR__4860
2f4c4     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f4c8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f4cc     04 12 06 51 |  if_ne	add	arg01, #4
2f4d0     69 06 62 5D |  if_ne	rev	_var04
2f4d4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f4d8                 | LR__4861
2f4d8     40 02 72 5D |  if_ne	testp	_var02 wc
2f4dc     F8 FF 9F 1D |  if_a	jmp	#LR__4861
2f4e0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4860
2f4e4                 | LR__4862
2f4e4     40 00 72 FD | 	testp	_var01 wc
2f4e8     F8 FF 9F 3D |  if_ae	jmp	#LR__4862
2f4ec     40 02 62 FD | 	dirl	_var02
2f4f0     FF FF FF FF 
2f4f4     01 FF 2B FC | 	wypin	##-1, _var02
2f4f8     41 02 62 FD | 	dirh	_var02
2f4fc                 | _fatfs_cc_xmit_mmc_1109_ret
2f4fc     2D 00 64 FD | 	ret
2f500                 | 
2f500                 | _fatfs_cc_rcvr_mmc_1116
2f500     01 00 00 FF 
2f504     10 E4 05 F1 | 	add	objptr, ##528
2f508     F2 00 02 FB | 	rdlong	_var01, objptr
2f50c     0C E4 05 F1 | 	add	objptr, #12
2f510     F2 02 02 FB | 	rdlong	_var02, objptr
2f514     01 00 00 FF 
2f518     1C E4 85 F1 | 	sub	objptr, ##540
2f51c     01 03 08 FC | 	akpin	_var02
2f520     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f524     02 04 4E F0 | 	shr	_var03, #2 wz
2f528     30 00 90 AD |  if_e	jmp	#LR__4872
2f52c     02 07 02 F6 | 	mov	_var04, _var03
2f530     05 06 66 F0 | 	shl	_var04, #5
2f534     00 07 22 FC | 	wypin	_var04, _var01
2f538     01 7F 18 FC | 	wxpin	#63, _var02
2f53c                 | LR__4870
2f53c                 | LR__4871
2f53c     40 02 72 FD | 	testp	_var02 wc
2f540     F8 FF 9F 3D |  if_ae	jmp	#LR__4871
2f544     01 07 8A FA | 	rdpin	_var04, _var02
2f548     69 06 62 FD | 	rev	_var04
2f54c     1B 06 FE F9 | 	movbyts	_var04, #27
2f550     09 07 62 FC | 	wrlong	_var04, arg01
2f554     04 12 06 F1 | 	add	arg01, #4
2f558     F8 05 6E FB | 	djnz	_var03, #LR__4870
2f55c                 | LR__4872
2f55c     03 14 0E F5 | 	and	arg02, #3 wz
2f560     24 00 90 AD |  if_e	jmp	#LR__4875
2f564     01 4F 18 FC | 	wxpin	#39, _var02
2f568                 | LR__4873
2f568     00 11 28 FC | 	wypin	#8, _var01
2f56c                 | LR__4874
2f56c     40 02 72 FD | 	testp	_var02 wc
2f570     F8 FF 9F 3D |  if_ae	jmp	#LR__4874
2f574     01 07 8A FA | 	rdpin	_var04, _var02
2f578     69 06 62 FD | 	rev	_var04
2f57c     09 07 42 FC | 	wrbyte	_var04, arg01
2f580     01 12 06 F1 | 	add	arg01, #1
2f584     F8 15 6E FB | 	djnz	arg02, #LR__4873
2f588                 | LR__4875
2f588                 | _fatfs_cc_rcvr_mmc_1116_ret
2f588     2D 00 64 FD | 	ret
2f58c                 | 
2f58c                 | _fatfs_cc_wait_ready_1120
2f58c     01 4A 05 F6 | 	mov	COUNT_, #1
2f590     A8 00 A0 FD | 	call	#pushregs_
2f594     10 F0 07 F1 | 	add	ptra, #16
2f598     1A FA 61 FD | 	getct	result1
2f59c     08 4E 05 F1 | 	add	fp, #8
2f5a0     A7 FA 61 FC | 	wrlong	result1, fp
2f5a4     14 1E 06 FB | 	rdlong	local01, #20
2f5a8     01 1E 46 F0 | 	shr	local01, #1
2f5ac     04 4E 05 F1 | 	add	fp, #4
2f5b0     A7 1E 62 FC | 	wrlong	local01, fp
2f5b4     0C 4E 85 F1 | 	sub	fp, #12
2f5b8                 | ' {
2f5b8                 | ' 	BYTE d;
2f5b8                 | ' 	UINT tmr, tmout;
2f5b8                 | ' 
2f5b8                 | ' 	tmr = _cnt();
2f5b8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f5b8                 | ' 	for(;;) {
2f5b8                 | LR__4880
2f5b8     04 4E 05 F1 | 	add	fp, #4
2f5bc     A7 12 02 F6 | 	mov	arg01, fp
2f5c0     04 4E 85 F1 | 	sub	fp, #4
2f5c4     01 14 06 F6 | 	mov	arg02, #1
2f5c8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f5cc     04 4E 05 F1 | 	add	fp, #4
2f5d0     A7 1E C2 FA | 	rdbyte	local01, fp
2f5d4     04 4E 85 F1 | 	sub	fp, #4
2f5d8     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f5dc     01 FA 05 A6 |  if_e	mov	result1, #1
2f5e0     28 00 90 AD |  if_e	jmp	#LR__4881
2f5e4     1A FA 61 FD | 	getct	result1
2f5e8     08 4E 05 F1 | 	add	fp, #8
2f5ec     A7 1E 02 FB | 	rdlong	local01, fp
2f5f0     0F FB 81 F1 | 	sub	result1, local01
2f5f4     04 4E 05 F1 | 	add	fp, #4
2f5f8     A7 1E 02 FB | 	rdlong	local01, fp
2f5fc     0C 4E 85 F1 | 	sub	fp, #12
2f600     0F FB 11 F2 | 	cmp	result1, local01 wc
2f604     00 FA 05 36 |  if_ae	mov	result1, #0
2f608     AC FF 9F CD |  if_b	jmp	#LR__4880
2f60c                 | LR__4881
2f60c     A7 F0 03 F6 | 	mov	ptra, fp
2f610     B2 00 A0 FD | 	call	#popregs_
2f614                 | _fatfs_cc_wait_ready_1120_ret
2f614     2D 00 64 FD | 	ret
2f618                 | 
2f618                 | _fatfs_cc_deselect_1126
2f618     00 4A 05 F6 | 	mov	COUNT_, #0
2f61c     A8 00 A0 FD | 	call	#pushregs_
2f620     14 F0 07 F1 | 	add	ptra, #20
2f624     01 00 00 FF 
2f628     14 E4 05 F1 | 	add	objptr, ##532
2f62c     F2 14 02 FB | 	rdlong	arg02, objptr
2f630     04 4E 05 F1 | 	add	fp, #4
2f634     A7 14 62 FC | 	wrlong	arg02, fp
2f638     04 E4 85 F1 | 	sub	objptr, #4
2f63c     F2 14 02 FB | 	rdlong	arg02, objptr
2f640     04 4E 05 F1 | 	add	fp, #4
2f644     A7 14 62 FC | 	wrlong	arg02, fp
2f648     08 E4 05 F1 | 	add	objptr, #8
2f64c     F2 14 02 FB | 	rdlong	arg02, objptr
2f650     04 4E 05 F1 | 	add	fp, #4
2f654     A7 14 62 FC | 	wrlong	arg02, fp
2f658     04 E4 05 F1 | 	add	objptr, #4
2f65c     F2 14 02 FB | 	rdlong	arg02, objptr
2f660     01 00 00 FF 
2f664     1C E4 85 F1 | 	sub	objptr, ##540
2f668     04 4E 05 F1 | 	add	fp, #4
2f66c     A7 14 62 FC | 	wrlong	arg02, fp
2f670     0C 4E 85 F1 | 	sub	fp, #12
2f674     A7 12 02 FB | 	rdlong	arg01, fp
2f678     04 4E 85 F1 | 	sub	fp, #4
2f67c     59 12 62 FD | 	drvh	arg01
2f680     1F 20 64 FD | 	waitx	#16
2f684     A7 12 02 F6 | 	mov	arg01, fp
2f688     01 14 06 F6 | 	mov	arg02, #1
2f68c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f690     A7 F0 03 F6 | 	mov	ptra, fp
2f694     B2 00 A0 FD | 	call	#popregs_
2f698                 | _fatfs_cc_deselect_1126_ret
2f698     2D 00 64 FD | 	ret
2f69c                 | 
2f69c                 | _fatfs_cc_select_1130
2f69c     00 4A 05 F6 | 	mov	COUNT_, #0
2f6a0     A8 00 A0 FD | 	call	#pushregs_
2f6a4     10 F0 07 F1 | 	add	ptra, #16
2f6a8     01 00 00 FF 
2f6ac     14 E4 05 F1 | 	add	objptr, ##532
2f6b0     F2 14 02 FB | 	rdlong	arg02, objptr
2f6b4     08 4E 05 F1 | 	add	fp, #8
2f6b8     A7 14 62 FC | 	wrlong	arg02, fp
2f6bc     08 E4 05 F1 | 	add	objptr, #8
2f6c0     F2 12 02 FB | 	rdlong	arg01, objptr
2f6c4     01 00 00 FF 
2f6c8     1C E4 85 F1 | 	sub	objptr, ##540
2f6cc     04 4E 05 F1 | 	add	fp, #4
2f6d0     A7 12 62 FC | 	wrlong	arg01, fp
2f6d4     50 12 62 FD | 	fltl	arg01
2f6d8     04 4E 85 F1 | 	sub	fp, #4
2f6dc     A7 12 02 FB | 	rdlong	arg01, fp
2f6e0     58 12 62 FD | 	drvl	arg01
2f6e4     1F 20 64 FD | 	waitx	#16
2f6e8     04 4E 05 F1 | 	add	fp, #4
2f6ec     A7 12 02 FB | 	rdlong	arg01, fp
2f6f0     41 12 62 FD | 	dirh	arg01
2f6f4     08 4E 85 F1 | 	sub	fp, #8
2f6f8     A7 12 02 F6 | 	mov	arg01, fp
2f6fc     04 4E 85 F1 | 	sub	fp, #4
2f700     01 14 06 F6 | 	mov	arg02, #1
2f704     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f708     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f70c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f710     01 FA 05 56 |  if_ne	mov	result1, #1
2f714     08 00 90 5D |  if_ne	jmp	#LR__4890
2f718     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f71c                 | ' 
2f71c                 | ' 	deselect();
2f71c                 | ' 	return 0;
2f71c     00 FA 05 F6 | 	mov	result1, #0
2f720                 | LR__4890
2f720     A7 F0 03 F6 | 	mov	ptra, fp
2f724     B2 00 A0 FD | 	call	#popregs_
2f728                 | _fatfs_cc_select_1130_ret
2f728     2D 00 64 FD | 	ret
2f72c                 | 
2f72c                 | _fatfs_cc_rcvr_datablock_1134
2f72c     01 4A 05 F6 | 	mov	COUNT_, #1
2f730     A8 00 A0 FD | 	call	#pushregs_
2f734     18 F0 07 F1 | 	add	ptra, #24
2f738     04 4E 05 F1 | 	add	fp, #4
2f73c     A7 12 62 FC | 	wrlong	arg01, fp
2f740     04 4E 05 F1 | 	add	fp, #4
2f744     A7 14 62 FC | 	wrlong	arg02, fp
2f748     1A FA 61 FD | 	getct	result1
2f74c     08 4E 05 F1 | 	add	fp, #8
2f750     A7 FA 61 FC | 	wrlong	result1, fp
2f754     14 1E 06 FB | 	rdlong	local01, #20
2f758     03 1E 46 F0 | 	shr	local01, #3
2f75c     04 4E 05 F1 | 	add	fp, #4
2f760     A7 1E 62 FC | 	wrlong	local01, fp
2f764     14 4E 85 F1 | 	sub	fp, #20
2f768                 | ' 	BYTE *buff,
2f768                 | ' 	UINT btr
2f768                 | ' )
2f768                 | ' {
2f768                 | ' 	BYTE d[2];
2f768                 | ' 	UINT tmr, tmout;
2f768                 | ' 
2f768                 | ' 	tmr = _cnt();
2f768                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f768                 | ' 	for(;;) {
2f768                 | LR__4900
2f768     0C 4E 05 F1 | 	add	fp, #12
2f76c     A7 12 02 F6 | 	mov	arg01, fp
2f770     0C 4E 85 F1 | 	sub	fp, #12
2f774     01 14 06 F6 | 	mov	arg02, #1
2f778     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f77c     0C 4E 05 F1 | 	add	fp, #12
2f780     A7 1E C2 FA | 	rdbyte	local01, fp
2f784     0C 4E 85 F1 | 	sub	fp, #12
2f788     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f78c     28 00 90 5D |  if_ne	jmp	#LR__4901
2f790     1A FA 61 FD | 	getct	result1
2f794     FD 1E 02 F6 | 	mov	local01, result1
2f798     10 4E 05 F1 | 	add	fp, #16
2f79c     A7 14 02 FB | 	rdlong	arg02, fp
2f7a0     0A 1F 82 F1 | 	sub	local01, arg02
2f7a4     04 4E 05 F1 | 	add	fp, #4
2f7a8     A7 14 02 FB | 	rdlong	arg02, fp
2f7ac     14 4E 85 F1 | 	sub	fp, #20
2f7b0     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f7b4     B0 FF 9F CD |  if_b	jmp	#LR__4900
2f7b8                 | LR__4901
2f7b8     0C 4E 05 F1 | 	add	fp, #12
2f7bc     A7 1E C2 FA | 	rdbyte	local01, fp
2f7c0     0C 4E 85 F1 | 	sub	fp, #12
2f7c4     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f7c8     00 FA 05 56 |  if_ne	mov	result1, #0
2f7cc     30 00 90 5D |  if_ne	jmp	#LR__4902
2f7d0     04 4E 05 F1 | 	add	fp, #4
2f7d4     A7 12 02 FB | 	rdlong	arg01, fp
2f7d8     04 4E 05 F1 | 	add	fp, #4
2f7dc     A7 14 02 FB | 	rdlong	arg02, fp
2f7e0     08 4E 85 F1 | 	sub	fp, #8
2f7e4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f7e8     0C 4E 05 F1 | 	add	fp, #12
2f7ec     A7 12 02 F6 | 	mov	arg01, fp
2f7f0     0C 4E 85 F1 | 	sub	fp, #12
2f7f4     02 14 06 F6 | 	mov	arg02, #2
2f7f8     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f7fc                 | ' 
2f7fc                 | ' 	rcvr_mmc(buff, btr);
2f7fc                 | ' 	rcvr_mmc(d, 2);
2f7fc                 | ' 
2f7fc                 | ' 	return 1;
2f7fc     01 FA 05 F6 | 	mov	result1, #1
2f800                 | LR__4902
2f800     A7 F0 03 F6 | 	mov	ptra, fp
2f804     B2 00 A0 FD | 	call	#popregs_
2f808                 | _fatfs_cc_rcvr_datablock_1134_ret
2f808     2D 00 64 FD | 	ret
2f80c                 | 
2f80c                 | _fatfs_cc_xmit_datablock_1136
2f80c     00 4A 05 F6 | 	mov	COUNT_, #0
2f810     A8 00 A0 FD | 	call	#pushregs_
2f814     10 F0 07 F1 | 	add	ptra, #16
2f818     04 4E 05 F1 | 	add	fp, #4
2f81c     A7 12 62 FC | 	wrlong	arg01, fp
2f820     04 4E 05 F1 | 	add	fp, #4
2f824     A7 14 42 FC | 	wrbyte	arg02, fp
2f828     08 4E 85 F1 | 	sub	fp, #8
2f82c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f830     00 FA 0D F2 | 	cmp	result1, #0 wz
2f834     00 FA 05 A6 |  if_e	mov	result1, #0
2f838     90 00 90 AD |  if_e	jmp	#LR__4911
2f83c     08 4E 05 F1 | 	add	fp, #8
2f840     A7 14 C2 FA | 	rdbyte	arg02, fp
2f844     04 4E 05 F1 | 	add	fp, #4
2f848     A7 14 42 FC | 	wrbyte	arg02, fp
2f84c     A7 12 02 F6 | 	mov	arg01, fp
2f850     0C 4E 85 F1 | 	sub	fp, #12
2f854     01 14 06 F6 | 	mov	arg02, #1
2f858     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f85c     08 4E 05 F1 | 	add	fp, #8
2f860     A7 14 C2 FA | 	rdbyte	arg02, fp
2f864     08 4E 85 F1 | 	sub	fp, #8
2f868     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f86c     58 00 90 AD |  if_e	jmp	#LR__4910
2f870     04 4E 05 F1 | 	add	fp, #4
2f874     A7 12 02 FB | 	rdlong	arg01, fp
2f878     04 4E 85 F1 | 	sub	fp, #4
2f87c     09 14 C6 F9 | 	decod	arg02, #9
2f880     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f884     0C 4E 05 F1 | 	add	fp, #12
2f888     A7 12 02 F6 | 	mov	arg01, fp
2f88c     0C 4E 85 F1 | 	sub	fp, #12
2f890     02 14 06 F6 | 	mov	arg02, #2
2f894     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f898     0C 4E 05 F1 | 	add	fp, #12
2f89c     A7 12 02 F6 | 	mov	arg01, fp
2f8a0     0C 4E 85 F1 | 	sub	fp, #12
2f8a4     01 14 06 F6 | 	mov	arg02, #1
2f8a8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f8ac     0C 4E 05 F1 | 	add	fp, #12
2f8b0     A7 14 C2 FA | 	rdbyte	arg02, fp
2f8b4     0C 4E 85 F1 | 	sub	fp, #12
2f8b8     1F 14 06 F5 | 	and	arg02, #31
2f8bc     05 14 0E F2 | 	cmp	arg02, #5 wz
2f8c0                 | ' 			return 0;
2f8c0     00 FA 05 56 |  if_ne	mov	result1, #0
2f8c4     04 00 90 5D |  if_ne	jmp	#LR__4911
2f8c8                 | LR__4910
2f8c8                 | ' 	}
2f8c8                 | ' 
2f8c8                 | ' 	return 1;
2f8c8     01 FA 05 F6 | 	mov	result1, #1
2f8cc                 | LR__4911
2f8cc     A7 F0 03 F6 | 	mov	ptra, fp
2f8d0     B2 00 A0 FD | 	call	#popregs_
2f8d4                 | _fatfs_cc_xmit_datablock_1136_ret
2f8d4     2D 00 64 FD | 	ret
2f8d8                 | 
2f8d8                 | _fatfs_cc_send_cmd_1140
2f8d8     01 4A 05 F6 | 	mov	COUNT_, #1
2f8dc     A8 00 A0 FD | 	call	#pushregs_
2f8e0     1C F0 07 F1 | 	add	ptra, #28
2f8e4                 | _fatfs_cc_send_cmd_1140_enter
2f8e4     04 4E 05 F1 | 	add	fp, #4
2f8e8     A7 12 42 FC | 	wrbyte	arg01, fp
2f8ec     04 4E 05 F1 | 	add	fp, #4
2f8f0     A7 14 62 FC | 	wrlong	arg02, fp
2f8f4     04 4E 85 F1 | 	sub	fp, #4
2f8f8     A7 FA C1 FA | 	rdbyte	result1, fp
2f8fc     04 4E 85 F1 | 	sub	fp, #4
2f900     80 FA CD F7 | 	test	result1, #128 wz
2f904     44 00 90 AD |  if_e	jmp	#LR__4920
2f908     04 4E 05 F1 | 	add	fp, #4
2f90c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f910     7F 14 06 F5 | 	and	arg02, #127
2f914     A7 14 42 FC | 	wrbyte	arg02, fp
2f918     04 4E 85 F1 | 	sub	fp, #4
2f91c     37 12 06 F6 | 	mov	arg01, #55
2f920     00 14 06 F6 | 	mov	arg02, #0
2f924     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2f928     0C 4E 05 F1 | 	add	fp, #12
2f92c     A7 FA 41 FC | 	wrbyte	result1, fp
2f930     A7 14 C2 FA | 	rdbyte	arg02, fp
2f934     0C 4E 85 F1 | 	sub	fp, #12
2f938     02 14 16 F2 | 	cmp	arg02, #2 wc
2f93c     0C 4E 05 31 |  if_ae	add	fp, #12
2f940     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2f944     0C 4E 85 31 |  if_ae	sub	fp, #12
2f948     6C 01 90 3D |  if_ae	jmp	#LR__4924
2f94c                 | LR__4920
2f94c     04 4E 05 F1 | 	add	fp, #4
2f950     A7 14 C2 FA | 	rdbyte	arg02, fp
2f954     04 4E 85 F1 | 	sub	fp, #4
2f958     0C 14 0E F2 | 	cmp	arg02, #12 wz
2f95c     14 00 90 AD |  if_e	jmp	#LR__4921
2f960     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2f964     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2f968     00 FA 0D F2 | 	cmp	result1, #0 wz
2f96c     FF FA 05 A6 |  if_e	mov	result1, #255
2f970     44 01 90 AD |  if_e	jmp	#LR__4924
2f974                 | LR__4921
2f974     04 4E 05 F1 | 	add	fp, #4
2f978     A7 14 C2 FA | 	rdbyte	arg02, fp
2f97c     40 FA 05 F6 | 	mov	result1, #64
2f980     0A FB 41 F5 | 	or	result1, arg02
2f984     10 4E 05 F1 | 	add	fp, #16
2f988     A7 FA 41 FC | 	wrbyte	result1, fp
2f98c     0C 4E 85 F1 | 	sub	fp, #12
2f990     A7 FA 01 FB | 	rdlong	result1, fp
2f994     18 FA 45 F0 | 	shr	result1, #24
2f998     0D 4E 05 F1 | 	add	fp, #13
2f99c     A7 FA 41 FC | 	wrbyte	result1, fp
2f9a0     0D 4E 85 F1 | 	sub	fp, #13
2f9a4     A7 FA 01 FB | 	rdlong	result1, fp
2f9a8     10 FA 45 F0 | 	shr	result1, #16
2f9ac     0E 4E 05 F1 | 	add	fp, #14
2f9b0     A7 FA 41 FC | 	wrbyte	result1, fp
2f9b4     0E 4E 85 F1 | 	sub	fp, #14
2f9b8     A7 FA 01 FB | 	rdlong	result1, fp
2f9bc     08 FA 45 F0 | 	shr	result1, #8
2f9c0     0F 4E 05 F1 | 	add	fp, #15
2f9c4     A7 FA 41 FC | 	wrbyte	result1, fp
2f9c8     0F 4E 85 F1 | 	sub	fp, #15
2f9cc     A7 FA 01 FB | 	rdlong	result1, fp
2f9d0     10 4E 05 F1 | 	add	fp, #16
2f9d4     A7 FA 41 FC | 	wrbyte	result1, fp
2f9d8     0C 4E 85 F1 | 	sub	fp, #12
2f9dc     A7 02 48 FC | 	wrbyte	#1, fp
2f9e0     08 4E 85 F1 | 	sub	fp, #8
2f9e4     A7 FA C9 FA | 	rdbyte	result1, fp wz
2f9e8     04 4E 85 F1 | 	sub	fp, #4
2f9ec     0C 4E 05 A1 |  if_e	add	fp, #12
2f9f0     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2f9f4     0C 4E 85 A1 |  if_e	sub	fp, #12
2f9f8     04 4E 05 F1 | 	add	fp, #4
2f9fc     A7 FA C1 FA | 	rdbyte	result1, fp
2fa00     04 4E 85 F1 | 	sub	fp, #4
2fa04     08 FA 0D F2 | 	cmp	result1, #8 wz
2fa08     0C 4E 05 A1 |  if_e	add	fp, #12
2fa0c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2fa10     0C 4E 85 A1 |  if_e	sub	fp, #12
2fa14     0C 4E 05 F1 | 	add	fp, #12
2fa18     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa1c     0D 4E 05 F1 | 	add	fp, #13
2fa20     A7 14 42 FC | 	wrbyte	arg02, fp
2fa24     05 4E 85 F1 | 	sub	fp, #5
2fa28     A7 12 02 F6 | 	mov	arg01, fp
2fa2c     14 4E 85 F1 | 	sub	fp, #20
2fa30     06 14 06 F6 | 	mov	arg02, #6
2fa34     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fa38     04 4E 05 F1 | 	add	fp, #4
2fa3c     A7 1E C2 FA | 	rdbyte	local01, fp
2fa40     04 4E 85 F1 | 	sub	fp, #4
2fa44     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fa48     10 4E 05 A1 |  if_e	add	fp, #16
2fa4c     A7 12 02 A6 |  if_e	mov	arg01, fp
2fa50     10 4E 85 A1 |  if_e	sub	fp, #16
2fa54     01 14 06 A6 |  if_e	mov	arg02, #1
2fa58     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fa5c     0C 4E 05 F1 | 	add	fp, #12
2fa60     A7 14 48 FC | 	wrbyte	#10, fp
2fa64     0C 4E 85 F1 | 	sub	fp, #12
2fa68                 | ' 	n = 10;
2fa68                 | ' 	do
2fa68                 | LR__4922
2fa68     10 4E 05 F1 | 	add	fp, #16
2fa6c     A7 12 02 F6 | 	mov	arg01, fp
2fa70     10 4E 85 F1 | 	sub	fp, #16
2fa74     01 14 06 F6 | 	mov	arg02, #1
2fa78     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fa7c     10 4E 05 F1 | 	add	fp, #16
2fa80     A7 1E C2 FA | 	rdbyte	local01, fp
2fa84     10 4E 85 F1 | 	sub	fp, #16
2fa88     80 1E CE F7 | 	test	local01, #128 wz
2fa8c     1C 00 90 AD |  if_e	jmp	#LR__4923
2fa90     0C 4E 05 F1 | 	add	fp, #12
2fa94     A7 1E C2 FA | 	rdbyte	local01, fp
2fa98     01 1E 86 F1 | 	sub	local01, #1
2fa9c     A7 1E 42 FC | 	wrbyte	local01, fp
2faa0     A7 1E CA FA | 	rdbyte	local01, fp wz
2faa4     0C 4E 85 F1 | 	sub	fp, #12
2faa8     BC FF 9F 5D |  if_ne	jmp	#LR__4922
2faac                 | LR__4923
2faac                 | ' 
2faac                 | ' 	return d;
2faac     10 4E 05 F1 | 	add	fp, #16
2fab0     A7 FA C1 FA | 	rdbyte	result1, fp
2fab4     10 4E 85 F1 | 	sub	fp, #16
2fab8                 | LR__4924
2fab8     A7 F0 03 F6 | 	mov	ptra, fp
2fabc     B2 00 A0 FD | 	call	#popregs_
2fac0                 | _fatfs_cc_send_cmd_1140_ret
2fac0     2D 00 64 FD | 	ret
2fac4                 | 
2fac4                 | _fatfs_cc_disk_deinitialize
2fac4     03 4A 05 F6 | 	mov	COUNT_, #3
2fac8     A8 00 A0 FD | 	call	#pushregs_
2facc     00 12 4E F2 | 	cmps	arg01, #0 wz
2fad0     01 00 00 FF 
2fad4     14 E4 05 F1 | 	add	objptr, ##532
2fad8     F2 12 02 FB | 	rdlong	arg01, objptr
2fadc     04 E4 85 F1 | 	sub	objptr, #4
2fae0     F2 1E 02 FB | 	rdlong	local01, objptr
2fae4     08 E4 05 F1 | 	add	objptr, #8
2fae8     F2 20 02 FB | 	rdlong	local02, objptr
2faec     04 E4 05 F1 | 	add	objptr, #4
2faf0     F2 22 02 FB | 	rdlong	local03, objptr
2faf4     01 00 00 FF 
2faf8     1C E4 85 F1 | 	sub	objptr, ##540
2fafc                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fafc                 | '         return RES_NOTRDY;
2fafc     03 FA 05 56 |  if_ne	mov	result1, #3
2fb00     2C 00 90 5D |  if_ne	jmp	#LR__4930
2fb04     50 12 62 FD | 	fltl	arg01
2fb08     09 01 08 FC | 	wrpin	#0, arg01
2fb0c     50 1E 62 FD | 	fltl	local01
2fb10     0F 01 08 FC | 	wrpin	#0, local01
2fb14     50 20 62 FD | 	fltl	local02
2fb18     10 01 08 FC | 	wrpin	#0, local02
2fb1c     50 22 62 FD | 	fltl	local03
2fb20     11 01 08 FC | 	wrpin	#0, local03
2fb24     0A 12 06 F6 | 	mov	arg01, #10
2fb28     04 11 BF FD | 	call	#__system___waitms
2fb2c                 | '     }
2fb2c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fb2c                 | '     _pinclear(PIN_SS);
2fb2c                 | '     _pinclear(PIN_CLK);
2fb2c                 | '     _pinclear(PIN_DI);
2fb2c                 | '     _pinclear(PIN_DO);
2fb2c                 | ' 
2fb2c                 | '     _waitms(10);
2fb2c                 | ' 
2fb2c                 | '     return 0;
2fb2c     00 FA 05 F6 | 	mov	result1, #0
2fb30                 | LR__4930
2fb30     A7 F0 03 F6 | 	mov	ptra, fp
2fb34     B2 00 A0 FD | 	call	#popregs_
2fb38                 | _fatfs_cc_disk_deinitialize_ret
2fb38     2D 00 64 FD | 	ret
2fb3c                 | 
2fb3c                 | _fatfs_cc_gettimeofday
2fb3c     04 4A 05 F6 | 	mov	COUNT_, #4
2fb40     A8 00 A0 FD | 	call	#pushregs_
2fb44     09 1F 02 F6 | 	mov	local01, arg01
2fb48     C0 0C BF FD | 	call	#__system___getus
2fb4c     FD 12 02 F6 | 	mov	arg01, result1
2fb50     02 00 00 FF 
2fb54     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fb58     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fb5c     09 FB 01 F6 | 	mov	result1, arg01
2fb60     10 FB 81 F1 | 	sub	result1, local02
2fb64     A1 07 00 FF 
2fb68     40 FA 15 FD | 	qdiv	result1, ##1000000
2fb6c     02 00 00 FF 
2fb70     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fb74     18 20 62 FD | 	getqx	local02
2fb78     A1 07 00 FF 
2fb7c     40 FA 15 FD | 	qdiv	result1, ##1000000
2fb80     00 20 0E F2 | 	cmp	local02, #0 wz
2fb84     19 22 62 FD | 	getqy	local03
2fb88     28 00 90 AD |  if_e	jmp	#LR__4940
2fb8c     02 00 00 FF 
2fb90     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fb94     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fb98     10 25 02 F1 | 	add	local04, local02
2fb9c     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fba0     11 13 82 F1 | 	sub	arg01, local03
2fba4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fba8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fbac     02 00 00 FF 
2fbb0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fbb4                 | LR__4940
2fbb4     02 00 00 FF 
2fbb8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fbbc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fbc0     02 00 00 FF 
2fbc4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fbc8     0F 25 62 FC | 	wrlong	local04, local01
2fbcc     04 1E 06 F1 | 	add	local01, #4
2fbd0     0F 23 62 FC | 	wrlong	local03, local01
2fbd4                 | '         lastsec += secs;
2fbd4                 | '         lastus = now - leftover;
2fbd4                 | '     }
2fbd4                 | '     tv->tv_sec = lastsec;
2fbd4                 | '     tv->tv_usec = leftover;
2fbd4                 | '     return 0;
2fbd4     00 FA 05 F6 | 	mov	result1, #0
2fbd8     A7 F0 03 F6 | 	mov	ptra, fp
2fbdc     B2 00 A0 FD | 	call	#popregs_
2fbe0                 | _fatfs_cc_gettimeofday_ret
2fbe0     2D 00 64 FD | 	ret
2fbe4                 | 
2fbe4                 | _fatfs_cc__is_leap_year
2fbe4     09 FB 51 F6 | 	abs	result1, arg01 wc
2fbe8     03 FA 05 F5 | 	and	result1, #3
2fbec     FD FA 89 F6 | 	negc	result1, result1 wz
2fbf0     38 00 90 5D |  if_ne	jmp	#LR__4951
2fbf4     09 FB 51 F6 | 	abs	result1, arg01 wc
2fbf8     64 FA 15 FD | 	qdiv	result1, #100
2fbfc     19 FA 61 FD | 	getqy	result1
2fc00     FD FA 89 F6 | 	negc	result1, result1 wz
2fc04     1C 00 90 5D |  if_ne	jmp	#LR__4950
2fc08     09 FB 51 F6 | 	abs	result1, arg01 wc
2fc0c     90 FB 15 FD | 	qdiv	result1, #400
2fc10                 | '       return (0 == y % 400);
2fc10     00 FA 05 F6 | 	mov	result1, #0
2fc14     19 00 62 FD | 	getqy	_var01
2fc18     00 01 8A F6 | 	negc	_var01, _var01 wz
2fc1c     01 FA 05 A6 |  if_e	mov	result1, #1
2fc20     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fc24                 | LR__4950
2fc24                 | '     return 1;
2fc24     01 FA 05 F6 | 	mov	result1, #1
2fc28     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fc2c                 | LR__4951
2fc2c                 | '   }
2fc2c                 | '   return 0;
2fc2c     00 FA 05 F6 | 	mov	result1, #0
2fc30                 | _fatfs_cc__is_leap_year_ret
2fc30     2D 00 64 FD | 	ret
2fc34                 | 
2fc34                 | _fatfs_cc___tzoffset
2fc34     09 01 0A F6 | 	mov	_var01, arg01 wz
2fc38     FF FF FF FF 
2fc3c     0A FF 6B FC | 	wrlong	##-1, arg02
2fc40     01 02 06 F6 | 	mov	_var02, #1
2fc44     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fc48                 | '                 return 0;
2fc48     00 FA 05 A6 |  if_e	mov	result1, #0
2fc4c     94 02 90 AD |  if_e	jmp	#LR__4977
2fc50     0A 01 68 FC | 	wrlong	#0, arg02
2fc54     02 00 00 FF 
2fc58     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fc5c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fc60                 | ' 
2fc60                 | '        *hasdst = 0;
2fc60                 | ' 
2fc60                 | ' 	n = stdname;
2fc60                 | '         while (*s && isalpha(*s)) {
2fc60     02 00 00 FF 
2fc64     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fc68     97 28 48 FB | 	callpa	#(@LR__4961-@LR__4960)>>2,fcache_load_ptr_
2fc6c                 | LR__4960
2fc6c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fc70     48 00 90 AD |  if_e	jmp	#LR__4962
2fc74     00 13 C2 FA | 	rdbyte	arg01, _var01
2fc78                 | ' {
2fc78                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fc78     80 12 36 F3 | 	fle	arg01, #128 wc
2fc7c                 | '     return __ctype[c];
2fc7c     02 00 00 FF 
2fc80     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fc84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fc88     09 FB C1 FA | 	rdbyte	result1, arg01
2fc8c     02 00 00 FF 
2fc90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fc94     0C FA CD F7 | 	test	result1, #12 wz
2fc98     20 00 90 AD |  if_e	jmp	#LR__4962
2fc9c     00 09 02 F6 | 	mov	_var05, _var01
2fca0     00 0B 02 F6 | 	mov	_var06, _var01
2fca4     01 0A 06 F1 | 	add	_var06, #1
2fca8     04 0D C2 FA | 	rdbyte	_var07, _var05
2fcac     05 01 02 F6 | 	mov	_var01, _var06
2fcb0     03 0D 42 FC | 	wrbyte	_var07, _var04
2fcb4     01 06 06 F1 | 	add	_var04, #1
2fcb8     B0 FF 9F FD | 	jmp	#LR__4960
2fcbc                 | LR__4961
2fcbc                 | LR__4962
2fcbc     03 01 48 FC | 	wrbyte	#0, _var04
2fcc0     00 0E 06 F6 | 	mov	_var08, #0
2fcc4     00 05 C2 FA | 	rdbyte	_var03, _var01
2fcc8     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fccc     01 02 66 A6 |  if_e	neg	_var02, #1
2fcd0     01 00 06 A1 |  if_e	add	_var01, #1
2fcd4     97 28 48 FB | 	callpa	#(@LR__4964-@LR__4963)>>2,fcache_load_ptr_
2fcd8                 | '                 sgn = -1;
2fcd8                 | '                 s++;
2fcd8                 | '         }
2fcd8                 | '         while (isdigit(*s)) {
2fcd8                 | LR__4963
2fcd8     00 13 C2 FA | 	rdbyte	arg01, _var01
2fcdc                 | ' {
2fcdc                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fcdc     80 12 36 F3 | 	fle	arg01, #128 wc
2fce0                 | '     return __ctype[c];
2fce0     02 00 00 FF 
2fce4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fce8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fcec     09 FB C1 FA | 	rdbyte	result1, arg01
2fcf0     02 00 00 FF 
2fcf4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fcf8     02 FA CD F7 | 	test	result1, #2 wz
2fcfc     28 00 90 AD |  if_e	jmp	#LR__4965
2fd00     07 05 02 F6 | 	mov	_var03, _var08
2fd04     02 04 66 F0 | 	shl	_var03, #2
2fd08     07 05 02 F1 | 	add	_var03, _var08
2fd0c     01 04 66 F0 | 	shl	_var03, #1
2fd10     00 09 C2 FA | 	rdbyte	_var05, _var01
2fd14     30 08 86 F1 | 	sub	_var05, #48
2fd18     04 05 02 F1 | 	add	_var03, _var05
2fd1c     02 0F 02 F6 | 	mov	_var08, _var03
2fd20     01 00 06 F1 | 	add	_var01, #1
2fd24     B0 FF 9F FD | 	jmp	#LR__4963
2fd28                 | LR__4964
2fd28                 | LR__4965
2fd28     07 00 00 FF 
2fd2c     10 0E 06 FD | 	qmul	_var08, ##3600
2fd30     00 05 C2 FA | 	rdbyte	_var03, _var01
2fd34     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fd38     18 10 62 FD | 	getqx	_var09
2fd3c     70 00 90 5D |  if_ne	jmp	#LR__4969
2fd40     00 0E 06 F6 | 	mov	_var08, #0
2fd44     01 00 06 F1 | 	add	_var01, #1
2fd48     97 28 48 FB | 	callpa	#(@LR__4967-@LR__4966)>>2,fcache_load_ptr_
2fd4c                 | '                 x = 0;
2fd4c                 | '                 s++;
2fd4c                 | '                 while (isdigit(*s)) {
2fd4c                 | LR__4966
2fd4c     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd50                 | ' {
2fd50                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fd50     80 12 36 F3 | 	fle	arg01, #128 wc
2fd54                 | '     return __ctype[c];
2fd54     02 00 00 FF 
2fd58     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fd5c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd60     09 FB C1 FA | 	rdbyte	result1, arg01
2fd64     02 00 00 FF 
2fd68     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd6c     02 FA CD F7 | 	test	result1, #2 wz
2fd70     28 00 90 AD |  if_e	jmp	#LR__4968
2fd74     07 05 02 F6 | 	mov	_var03, _var08
2fd78     02 04 66 F0 | 	shl	_var03, #2
2fd7c     07 05 02 F1 | 	add	_var03, _var08
2fd80     01 04 66 F0 | 	shl	_var03, #1
2fd84     00 09 C2 FA | 	rdbyte	_var05, _var01
2fd88     30 08 86 F1 | 	sub	_var05, #48
2fd8c     04 05 02 F1 | 	add	_var03, _var05
2fd90     02 0F 02 F6 | 	mov	_var08, _var03
2fd94     01 00 06 F1 | 	add	_var01, #1
2fd98     B0 FF 9F FD | 	jmp	#LR__4966
2fd9c                 | LR__4967
2fd9c                 | LR__4968
2fd9c     07 0D 02 F6 | 	mov	_var07, _var08
2fda0     04 0C 66 F0 | 	shl	_var07, #4
2fda4     07 0D 82 F1 | 	sub	_var07, _var08
2fda8     02 0C 66 F0 | 	shl	_var07, #2
2fdac     06 11 02 F1 | 	add	_var09, _var07
2fdb0                 | LR__4969
2fdb0     02 00 00 FF 
2fdb4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fdb8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fdbc     00 13 C2 FA | 	rdbyte	arg01, _var01
2fdc0                 | ' {
2fdc0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fdc0     80 12 36 F3 | 	fle	arg01, #128 wc
2fdc4                 | '     return __ctype[c];
2fdc4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fdc8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fdcc     09 FB C1 FA | 	rdbyte	result1, arg01
2fdd0     02 00 00 FF 
2fdd4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fdd8     0C FA CD F7 | 	test	result1, #12 wz
2fddc     50 00 90 AD |  if_e	jmp	#LR__4972
2fde0     0A 03 68 FC | 	wrlong	#1, arg02
2fde4                 | '                 *hasdst = 1;
2fde4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fde4                 | LR__4970
2fde4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fde8     44 00 90 AD |  if_e	jmp	#LR__4971
2fdec     00 13 C2 FA | 	rdbyte	arg01, _var01
2fdf0                 | ' {
2fdf0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fdf0     80 12 36 F3 | 	fle	arg01, #128 wc
2fdf4                 | '     return __ctype[c];
2fdf4     02 00 00 FF 
2fdf8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fdfc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe00     09 FB C1 FA | 	rdbyte	result1, arg01
2fe04     02 00 00 FF 
2fe08     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe0c     0C FA CD F7 | 	test	result1, #12 wz
2fe10     1C 00 90 AD |  if_e	jmp	#LR__4971
2fe14     00 0B 02 F6 | 	mov	_var06, _var01
2fe18     01 0A 06 F1 | 	add	_var06, #1
2fe1c     00 0D C2 FA | 	rdbyte	_var07, _var01
2fe20     05 01 02 F6 | 	mov	_var01, _var06
2fe24     03 0D 42 FC | 	wrbyte	_var07, _var04
2fe28     01 06 06 F1 | 	add	_var04, #1
2fe2c     B4 FF 9F FD | 	jmp	#LR__4970
2fe30                 | LR__4971
2fe30                 | LR__4972
2fe30     03 01 48 FC | 	wrbyte	#0, _var04
2fe34     02 00 00 FF 
2fe38     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe3c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fe40     02 00 00 FF 
2fe44     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fe48     20 00 90 AD |  if_e	jmp	#LR__4973
2fe4c     02 00 00 FF 
2fe50     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe54     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fe58     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2fe5c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fe60     02 00 00 FF 
2fe64     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fe68     1C 00 90 FD | 	jmp	#LR__4974
2fe6c                 | LR__4973
2fe6c     02 00 00 FF 
2fe70     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fe74     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fe78     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2fe7c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fe80     02 00 00 FF 
2fe84     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fe88                 | LR__4974
2fe88     02 00 00 FF 
2fe8c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fe90     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fe94     02 00 00 FF 
2fe98     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2fe9c     20 00 90 AD |  if_e	jmp	#LR__4975
2fea0     02 00 00 FF 
2fea4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fea8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2feac     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2feb0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2feb4     02 00 00 FF 
2feb8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2febc     1C 00 90 FD | 	jmp	#LR__4976
2fec0                 | LR__4975
2fec0     02 00 00 FF 
2fec4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fec8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fecc     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2fed0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fed4     02 00 00 FF 
2fed8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fedc                 | LR__4976
2fedc     08 03 02 FD | 	qmul	_var02, _var09
2fee0                 | ' 		_tzname[1] = stdname;
2fee0                 | ' 
2fee0                 | '         return sgn * off;
2fee0     18 FA 61 FD | 	getqx	result1
2fee4                 | LR__4977
2fee4                 | _fatfs_cc___tzoffset_ret
2fee4     2D 00 64 FD | 	ret
2fee8                 | 
2fee8                 | _fatfs_cc___indst
2fee8     10 12 06 F1 | 	add	arg01, #16
2feec     09 01 02 FB | 	rdlong	_var01, arg01
2fef0     10 12 86 F1 | 	sub	arg01, #16
2fef4     02 00 0E F2 | 	cmp	_var01, #2 wz
2fef8     30 00 90 5D |  if_ne	jmp	#LR__4980
2fefc     07 00 06 F6 | 	mov	_var01, #7
2ff00     18 12 06 F1 | 	add	arg01, #24
2ff04     09 03 02 FB | 	rdlong	_var02, arg01
2ff08     01 01 02 F1 | 	add	_var01, _var02
2ff0c     0C 12 86 F1 | 	sub	arg01, #12
2ff10     09 05 02 FB | 	rdlong	_var03, arg01
2ff14     02 01 82 F1 | 	sub	_var01, _var03
2ff18     00 00 56 F2 | 	cmps	_var01, #0 wc
2ff1c                 | '                         return 1;
2ff1c     01 FA 05 C6 |  if_b	mov	result1, #1
2ff20     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2ff24                 | '                 return 0;
2ff24     00 FA 05 F6 | 	mov	result1, #0
2ff28     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ff2c                 | LR__4980
2ff2c     10 12 06 F1 | 	add	arg01, #16
2ff30     09 01 02 FB | 	rdlong	_var01, arg01
2ff34     10 12 86 F1 | 	sub	arg01, #16
2ff38     0A 00 0E F2 | 	cmp	_var01, #10 wz
2ff3c     28 00 90 5D |  if_ne	jmp	#LR__4981
2ff40     18 12 06 F1 | 	add	arg01, #24
2ff44     09 01 02 FB | 	rdlong	_var01, arg01
2ff48     0C 12 86 F1 | 	sub	arg01, #12
2ff4c     09 07 02 FB | 	rdlong	_var04, arg01
2ff50     03 01 82 F1 | 	sub	_var01, _var04
2ff54     00 00 56 F2 | 	cmps	_var01, #0 wc
2ff58                 | '                         return 0;
2ff58     00 FA 05 C6 |  if_b	mov	result1, #0
2ff5c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2ff60                 | '                 return 1;
2ff60     01 FA 05 F6 | 	mov	result1, #1
2ff64     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ff68                 | LR__4981
2ff68                 | '         }
2ff68                 | ' 
2ff68                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2ff68     00 00 06 F6 | 	mov	_var01, #0
2ff6c     10 12 06 F1 | 	add	arg01, #16
2ff70     09 03 02 FB | 	rdlong	_var02, arg01
2ff74     10 12 86 F1 | 	sub	arg01, #16
2ff78     03 02 56 F2 | 	cmps	_var02, #3 wc
2ff7c     10 00 90 CD |  if_b	jmp	#LR__4982
2ff80     10 12 06 F1 | 	add	arg01, #16
2ff84     09 05 02 FB | 	rdlong	_var03, arg01
2ff88     0A 04 56 F2 | 	cmps	_var03, #10 wc
2ff8c     01 00 06 C6 |  if_b	mov	_var01, #1
2ff90                 | LR__4982
2ff90     00 FB 01 F6 | 	mov	result1, _var01
2ff94                 | _fatfs_cc___indst_ret
2ff94     2D 00 64 FD | 	ret
2ff98                 | 
2ff98                 | ' 	
2ff98                 | ' 	FUNCTION pfunc(c as integer) as integer
2ff98                 | ___strs_cl_pfunc
2ff98                 | ' 		if (i < 16) then
2ff98     04 E4 05 F1 | 	add	objptr, #4
2ff9c     F2 FA 01 FB | 	rdlong	result1, objptr
2ffa0     04 E4 85 F1 | 	sub	objptr, #4
2ffa4     10 FA 55 F2 | 	cmps	result1, #16 wc
2ffa8     2C 00 90 3D |  if_ae	jmp	#LR__4990
2ffac     F2 FA 01 FB | 	rdlong	result1, objptr
2ffb0     04 E4 05 F1 | 	add	objptr, #4
2ffb4     F2 00 02 FB | 	rdlong	_var01, objptr
2ffb8     FD 00 02 F1 | 	add	_var01, result1
2ffbc     00 13 42 FC | 	wrbyte	arg01, _var01
2ffc0     F2 FA 01 FB | 	rdlong	result1, objptr
2ffc4     01 FA 05 F1 | 	add	result1, #1
2ffc8     F2 FA 61 FC | 	wrlong	result1, objptr
2ffcc     04 E4 85 F1 | 	sub	objptr, #4
2ffd0                 | ' 			p(i) = c
2ffd0                 | ' 			i = i+1
2ffd0                 | ' 			return 1
2ffd0     01 FA 05 F6 | 	mov	result1, #1
2ffd4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2ffd8                 | LR__4990
2ffd8                 | ' 			return -1
2ffd8     01 FA 65 F6 | 	neg	result1, #1
2ffdc                 | ___strs_cl_pfunc_ret
2ffdc     2D 00 64 FD | 	ret
2ffe0                 | 
2ffe0                 | __struct__s_vfs_file_t_putchar
2ffe0     04 4A 05 F6 | 	mov	COUNT_, #4
2ffe4     A8 00 A0 FD | 	call	#pushregs_
2ffe8     1C E4 05 F1 | 	add	objptr, #28
2ffec     F2 1E 0A FB | 	rdlong	local01, objptr wz
2fff0     1C E4 85 F1 | 	sub	objptr, #28
2fff4     00 FA 05 A6 |  if_e	mov	result1, #0
2fff8     48 00 90 AD |  if_e	jmp	#LR__5000
2fffc     1C E4 05 F1 | 	add	objptr, #28
30000     F2 20 02 FB | 	rdlong	local02, objptr
30004     10 23 02 F6 | 	mov	local03, local02
30008     1C E4 85 F1 | 	sub	objptr, #28
3000c     13 22 46 F7 | 	zerox	local03, #19
30010     14 20 46 F0 | 	shr	local02, #20
30014     02 20 66 F0 | 	shl	local02, #2
30018     ED 20 02 F1 | 	add	local02, __methods__
3001c     10 21 02 FB | 	rdlong	local02, local02
30020     F2 14 02 F6 | 	mov	arg02, objptr
30024     F2 24 02 F6 | 	mov	local04, objptr
30028     11 E5 01 F6 | 	mov	objptr, local03
3002c     2D 20 62 FD | 	call	local02
30030     12 E5 01 F6 | 	mov	objptr, local04
30034                 | '     return (i < 0) ? 0 : 1;
30034     00 FA 55 F2 | 	cmps	result1, #0 wc
30038     00 1E 06 C6 |  if_b	mov	local01, #0
3003c     01 1E 06 36 |  if_ae	mov	local01, #1
30040     0F FB 01 F6 | 	mov	result1, local01
30044                 | LR__5000
30044     A7 F0 03 F6 | 	mov	ptra, fp
30048     B2 00 A0 FD | 	call	#popregs_
3004c                 | __struct__s_vfs_file_t_putchar_ret
3004c     2D 00 64 FD | 	ret
30050                 | 
30050                 | __struct__s_vfs_file_t_getchar
30050     03 4A 05 F6 | 	mov	COUNT_, #3
30054     A8 00 A0 FD | 	call	#pushregs_
30058     20 E4 05 F1 | 	add	objptr, #32
3005c     F2 12 0A FB | 	rdlong	arg01, objptr wz
30060     20 E4 85 F1 | 	sub	objptr, #32
30064     01 FA 65 A6 |  if_e	neg	result1, #1
30068     38 00 90 AD |  if_e	jmp	#LR__5010
3006c                 | '     return getcf(__this);
3006c     20 E4 05 F1 | 	add	objptr, #32
30070     F2 1E 02 FB | 	rdlong	local01, objptr
30074     0F 21 02 F6 | 	mov	local02, local01
30078     20 E4 85 F1 | 	sub	objptr, #32
3007c     13 20 46 F7 | 	zerox	local02, #19
30080     14 1E 46 F0 | 	shr	local01, #20
30084     02 1E 66 F0 | 	shl	local01, #2
30088     ED 1E 02 F1 | 	add	local01, __methods__
3008c     0F 1F 02 FB | 	rdlong	local01, local01
30090     F2 12 02 F6 | 	mov	arg01, objptr
30094     F2 22 02 F6 | 	mov	local03, objptr
30098     10 E5 01 F6 | 	mov	objptr, local02
3009c     2D 1E 62 FD | 	call	local01
300a0     11 E5 01 F6 | 	mov	objptr, local03
300a4                 | LR__5010
300a4     A7 F0 03 F6 | 	mov	ptra, fp
300a8     B2 00 A0 FD | 	call	#popregs_
300ac                 | __struct__s_vfs_file_t_getchar_ret
300ac     2D 00 64 FD | 	ret
300b0                 | 
300b0                 | __struct___bas_wrap_sender_tx
300b0     03 4A 05 F6 | 	mov	COUNT_, #3
300b4     A8 00 A0 FD | 	call	#pushregs_
300b8     F2 1E 02 FB | 	rdlong	local01, objptr
300bc     0F 21 02 F6 | 	mov	local02, local01
300c0     13 1E 46 F7 | 	zerox	local01, #19
300c4     14 20 46 F0 | 	shr	local02, #20
300c8     02 20 66 F0 | 	shl	local02, #2
300cc     ED 20 02 F1 | 	add	local02, __methods__
300d0     10 21 02 FB | 	rdlong	local02, local02
300d4     F2 22 02 F6 | 	mov	local03, objptr
300d8     0F E5 01 F6 | 	mov	objptr, local01
300dc     2D 20 62 FD | 	call	local02
300e0     11 E5 01 F6 | 	mov	objptr, local03
300e4     01 FA 05 F6 | 	mov	result1, #1
300e8     A7 F0 03 F6 | 	mov	ptra, fp
300ec     B2 00 A0 FD | 	call	#popregs_
300f0                 | __struct___bas_wrap_sender_tx_ret
300f0     2D 00 64 FD | 	ret
300f4                 | 
300f4                 | __struct___bas_wrap_sender_rx
300f4     03 4A 05 F6 | 	mov	COUNT_, #3
300f8     A8 00 A0 FD | 	call	#pushregs_
300fc     04 E4 05 F1 | 	add	objptr, #4
30100     F2 1E 02 FB | 	rdlong	local01, objptr
30104     0F 21 02 F6 | 	mov	local02, local01
30108     04 E4 85 F1 | 	sub	objptr, #4
3010c     13 20 46 F7 | 	zerox	local02, #19
30110     14 1E 46 F0 | 	shr	local01, #20
30114     02 1E 66 F0 | 	shl	local01, #2
30118     ED 1E 02 F1 | 	add	local01, __methods__
3011c     0F 1F 02 FB | 	rdlong	local01, local01
30120     F2 22 02 F6 | 	mov	local03, objptr
30124     10 E5 01 F6 | 	mov	objptr, local02
30128     2D 1E 62 FD | 	call	local01
3012c     11 E5 01 F6 | 	mov	objptr, local03
30130     A7 F0 03 F6 | 	mov	ptra, fp
30134     B2 00 A0 FD | 	call	#popregs_
30138                 | __struct___bas_wrap_sender_rx_ret
30138     2D 00 64 FD | 	ret
3013c                 | 
3013c                 | __struct___bas_wrap_sender_close
3013c     03 4A 05 F6 | 	mov	COUNT_, #3
30140     A8 00 A0 FD | 	call	#pushregs_
30144     08 E4 05 F1 | 	add	objptr, #8
30148     F2 1E 02 FB | 	rdlong	local01, objptr
3014c     0F 21 02 F6 | 	mov	local02, local01
30150     08 E4 85 F1 | 	sub	objptr, #8
30154     13 20 46 F7 | 	zerox	local02, #19
30158     14 1E 46 F0 | 	shr	local01, #20
3015c     02 1E 66 F0 | 	shl	local01, #2
30160     ED 1E 02 F1 | 	add	local01, __methods__
30164     0F 1F 02 FB | 	rdlong	local01, local01
30168     F2 22 02 F6 | 	mov	local03, objptr
3016c     10 E5 01 F6 | 	mov	objptr, local02
30170     2D 1E 62 FD | 	call	local01
30174     11 E5 01 F6 | 	mov	objptr, local03
30178     A7 F0 03 F6 | 	mov	ptra, fp
3017c     B2 00 A0 FD | 	call	#popregs_
30180                 | __struct___bas_wrap_sender_close_ret
30180     2D 00 64 FD | 	ret
30184                 | 
30184                 | LR__5020
30184     2F          | 	byte	"/"
30185     00          | 	byte	0
30186                 | LR__5021
30186     69 6E 66    | 	byte	"inf"
30189     00          | 	byte	0
3018a                 | LR__5022
3018a     6E 61 6E    | 	byte	"nan"
3018d     00          | 	byte	0
3018e                 | LR__5023
3018e                 | 	byte	
3018e     00          | 	byte	0
3018f                 | LR__5024
3018f                 | 	byte	
3018f     00          | 	byte	0
30190                 | LR__5025
30190                 | 	byte	
30190     00          | 	byte	0
30191                 | LR__5026
30191                 | 	byte	
30191     00          | 	byte	0
30192                 | LR__5027
30192                 | 	byte	
30192     00          | 	byte	0
30193                 | LR__5028
30193                 | 	byte	
30193     00          | 	byte	0
30194                 | LR__5029
30194                 | 	byte	
30194     00          | 	byte	0
30195                 | LR__5030
30195                 | 	byte	
30195     00          | 	byte	0
30196                 | LR__5031
30196     00          | 	byte	0
30197     00          | 	byte	0
30198                 | LR__5032
30198     00          | 	byte	0
30199     00          | 	byte	0
3019a                 | LR__5033
3019a     00          | 	byte	0
3019b     00          | 	byte	0
3019c                 | LR__5034
3019c     20 21 21 21 
301a0     20 63 6F 72 
301a4     72 75 70 74 
301a8     65 64 20 68 
301ac     65 61 70 3F 
301b0     3F 3F 20 21 
301b4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
301b7     00          | 	byte	0
301b8                 | LR__5035
301b8     20 21 21 21 
301bc     20 6F 75 74 
301c0     20 6F 66 20 
301c4     68 65 61 70 
301c8     20 6D 65 6D 
301cc     6F 72 79 20 
301d0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
301d4     00          | 	byte	0
301d5                 | LR__5036
301d5     20 21 21 21 
301d9     20 63 6F 72 
301dd     72 75 70 74 
301e1     65 64 20 68 
301e5     65 61 70 20 
301e9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
301ed     00          | 	byte	0
301ee                 | LR__5037
301ee     00          | 	byte	0
301ef     00          | 	byte	0
301f0                 | LR__5038
301f0     2E          | 	byte	"."
301f1     00          | 	byte	0
301f2                 | LR__5039
301f2     00          | 	byte	0
301f3     00          | 	byte	0
301f4                 | LR__5040
301f4     00          | 	byte	0
301f5     00          | 	byte	0
301f6                 | LR__5041
301f6     00          | 	byte	0
301f7     00          | 	byte	0
301f8                 | LR__5042
301f8     2A 3A 3C 3E 
301fc     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
30200     00          | 	byte	0
30201                 | LR__5043
30201     2B 2C 3B 3D 
30205     5B 5D       | 	byte	"+,;=[]"
30207     00          | 	byte	0
30208                 | LR__5044
30208     46 41 54 33 
3020c     32 20 20 20 | 	byte	"FAT32   "
30210     00          | 	byte	0
30211                 | LR__5045
30211     54 5A       | 	byte	"TZ"
30213     00          | 	byte	0
30214                 | LR__5046
30214     00          | 	byte	0
30215     00          | 	byte	0
30216                 | LR__5047
30216                 | 	byte	
30216     00          | 	byte	0
30217                 | LR__5048
30217                 | 	byte	
30217     00          | 	byte	0
30218                 | LR__5049
30218                 | 	byte	
30218     00          | 	byte	0
30219                 | LR__5050
30219                 | 	byte	
30219     00          | 	byte	0
3021a                 | LR__5051
3021a     22          | 	byte	34
3021b     00          | 	byte	0
3021c                 | LR__5052
3021c     22          | 	byte	34
3021d     00          | 	byte	0
3021e                 | LR__5053
3021e     3A          | 	byte	":"
3021f     00          | 	byte	0
30220                 | LR__5054
30220                 | 	byte	
30220     00          | 	byte	0
30221                 | LR__5055
30221                 | 	byte	
30221     00          | 	byte	0
30222                 | LR__5056
30222                 | 	byte	
30222     00          | 	byte	0
30223                 | LR__5057
30223                 | 	byte	
30223     00          | 	byte	0
30224                 | LR__5058
30224                 | 	byte	
30224     00          | 	byte	0
30225                 | LR__5059
30225                 | 	byte	
30225     00          | 	byte	0
30226                 | LR__5060
30226                 | 	byte	
30226     00          | 	byte	0
30227                 | LR__5061
30227     30          | 	byte	"0"
30228     00          | 	byte	0
30229                 | LR__5062
30229     22          | 	byte	34
3022a     00          | 	byte	0
3022b                 | LR__5063
3022b     22          | 	byte	34
3022c     00          | 	byte	0
3022d                 | LR__5064
3022d     22          | 	byte	34
3022e     00          | 	byte	0
3022f                 | LR__5065
3022f     22          | 	byte	34
30230     00          | 	byte	0
30231                 | LR__5066
30231     22          | 	byte	34
30232     00          | 	byte	0
30233                 | LR__5067
30233     3E          | 	byte	">"
30234     00          | 	byte	0
30235                 | LR__5068
30235     3C          | 	byte	"<"
30236     00          | 	byte	0
30237                 | LR__5069
30237     2B          | 	byte	"+"
30238     00          | 	byte	0
30239                 | LR__5070
30239     2D          | 	byte	"-"
3023a     00          | 	byte	0
3023b                 | LR__5071
3023b     2A          | 	byte	"*"
3023c     00          | 	byte	0
3023d                 | LR__5072
3023d     2F          | 	byte	"/"
3023e     00          | 	byte	0
3023f                 | LR__5073
3023f     5E          | 	byte	"^"
30240     00          | 	byte	0
30241                 | LR__5074
30241     3D          | 	byte	"="
30242     00          | 	byte	0
30243                 | LR__5075
30243     2B          | 	byte	"+"
30244     00          | 	byte	0
30245                 | LR__5076
30245     2B          | 	byte	"+"
30246     00          | 	byte	0
30247                 | LR__5077
30247     2D          | 	byte	"-"
30248     00          | 	byte	0
30249                 | LR__5078
30249     2D          | 	byte	"-"
3024a     00          | 	byte	0
3024b                 | LR__5079
3024b     3C          | 	byte	"<"
3024c     00          | 	byte	0
3024d                 | LR__5080
3024d     3E          | 	byte	">"
3024e     00          | 	byte	0
3024f                 | LR__5081
3024f     22          | 	byte	34
30250     00          | 	byte	0
30251                 | LR__5082
30251     22          | 	byte	34
30252     00          | 	byte	0
30253                 | LR__5083
30253     65 6C 73 65 | 	byte	"else"
30257     00          | 	byte	0
30258                 | LR__5084
30258     74 68 65 6E | 	byte	"then"
3025c     00          | 	byte	0
3025d                 | LR__5085
3025d     2E          | 	byte	"."
3025e     00          | 	byte	0
3025f                 | LR__5086
3025f     3F          | 	byte	"?"
30260     00          | 	byte	0
30261                 | LR__5087
30261     3F          | 	byte	"?"
30262     00          | 	byte	0
30263                 | LR__5088
30263     6D 6F 75 73 
30267     65          | 	byte	"mouse"
30268     00          | 	byte	0
30269                 | LR__5089
30269     63 75 72 73 
3026d     6F 72       | 	byte	"cursor"
3026f     00          | 	byte	0
30270                 | LR__5090
30270     63 6C 69 63 
30274     6B          | 	byte	"click"
30275     00          | 	byte	0
30276                 | LR__5091
30276     6F 6E       | 	byte	"on"
30278     00          | 	byte	0
30279                 | LR__5092
30279     31          | 	byte	"1"
3027a     00          | 	byte	0
3027b                 | LR__5093
3027b     6F 66 66    | 	byte	"off"
3027e     00          | 	byte	0
3027f                 | LR__5094
3027f     30          | 	byte	"0"
30280     00          | 	byte	0
30281                 | LR__5095
30281     6D 6F 64 65 | 	byte	"mode"
30285     00          | 	byte	0
30286                 | LR__5096
30286     6D 2E       | 	byte	"m."
30288     00          | 	byte	0
30289                 | LR__5097
30289     61 74 61 72 
3028d     69          | 	byte	"atari"
3028e     00          | 	byte	0
3028f                 | LR__5098
3028f     30          | 	byte	"0"
30290     00          | 	byte	0
30291                 | LR__5099
30291     70 63 5F 61 
30295     6D 62 65 72 | 	byte	"pc_amber"
30299     00          | 	byte	0
3029a                 | LR__5100
3029a     31          | 	byte	"1"
3029b     00          | 	byte	0
3029c                 | LR__5101
3029c     70 63 5F 67 
302a0     72 65 65 6E | 	byte	"pc_green"
302a4     00          | 	byte	0
302a5                 | LR__5102
302a5     32          | 	byte	"2"
302a6     00          | 	byte	0
302a7                 | LR__5103
302a7     70 63 5F 77 
302ab     68 69 74 65 | 	byte	"pc_white"
302af     00          | 	byte	0
302b0                 | LR__5104
302b0     33          | 	byte	"3"
302b1     00          | 	byte	0
302b2                 | LR__5105
302b2     73 74       | 	byte	"st"
302b4     00          | 	byte	0
302b5                 | LR__5106
302b5     34          | 	byte	"4"
302b6     00          | 	byte	0
302b7                 | LR__5107
302b7                 | 	byte	
302b7     00          | 	byte	0
302b8                 | LR__5108
302b8     6C 6F 61 64 | 	byte	"load"
302bc     00          | 	byte	0
302bd                 | LR__5109
302bd     73 61 76 65 | 	byte	"save"
302c1     00          | 	byte	0
302c2                 | LR__5110
302c2     62 72 75 6E | 	byte	"brun"
302c6     00          | 	byte	0
302c7                 | LR__5111
302c7     72 75 6E    | 	byte	"run"
302ca     00          | 	byte	0
302cb                 | LR__5112
302cb     6C 6F 2E    | 	byte	"lo."
302ce     00          | 	byte	0
302cf                 | LR__5113
302cf     73 2E       | 	byte	"s."
302d1     00          | 	byte	0
302d2                 | LR__5114
302d2     62 72 2E    | 	byte	"br."
302d5     00          | 	byte	0
302d6                 | LR__5115
302d6     65 6E 74 65 
302da     72          | 	byte	"enter"
302db     00          | 	byte	0
302dc                 | LR__5116
302dc     65 2E       | 	byte	"e."
302de     00          | 	byte	0
302df                 | LR__5117
302df                 | 	byte	
302df     00          | 	byte	0
302e0                 | LR__5118
302e0                 | 	byte	
302e0     00          | 	byte	0
302e1                 | LR__5119
302e1                 | 	byte	
302e1     00          | 	byte	0
302e2                 | LR__5120
302e2                 | 	byte	
302e2     00          | 	byte	0
302e3                 | LR__5121
302e3                 | 	byte	
302e3     00          | 	byte	0
302e4                 | LR__5122
302e4     52 65 61 64 
302e8     79          | 	byte	"Ready"
302e9     00          | 	byte	0
302ea                 | LR__5123
302ea     2B          | 	byte	"+"
302eb     00          | 	byte	0
302ec                 | LR__5124
302ec     2D          | 	byte	"-"
302ed     00          | 	byte	0
302ee                 | LR__5125
302ee     6F 72       | 	byte	"or"
302f0     00          | 	byte	0
302f1                 | LR__5126
302f1     78 6F 72    | 	byte	"xor"
302f4     00          | 	byte	0
302f5                 | LR__5127
302f5     2A          | 	byte	"*"
302f6     00          | 	byte	0
302f7                 | LR__5128
302f7     2F          | 	byte	"/"
302f8     00          | 	byte	0
302f9                 | LR__5129
302f9     61 6E 64    | 	byte	"and"
302fc     00          | 	byte	0
302fd                 | LR__5130
302fd     64 69 76    | 	byte	"div"
30300     00          | 	byte	0
30301                 | LR__5131
30301     6D 6F 64    | 	byte	"mod"
30304     00          | 	byte	0
30305                 | LR__5132
30305     73 68 6C    | 	byte	"shl"
30308     00          | 	byte	0
30309                 | LR__5133
30309     73 68 72    | 	byte	"shr"
3030c     00          | 	byte	0
3030d                 | LR__5134
3030d     5E          | 	byte	"^"
3030e     00          | 	byte	0
3030f                 | LR__5135
3030f     6E 6F 74    | 	byte	"not"
30312     00          | 	byte	0
30313                 | LR__5136
30313     40          | 	byte	"@"
30314     00          | 	byte	0
30315                 | LR__5137
30315     3D          | 	byte	"="
30316     00          | 	byte	0
30317                 | LR__5138
30317     3E 3D       | 	byte	">="
30319     00          | 	byte	0
3031a                 | LR__5139
3031a     3C 3D       | 	byte	"<="
3031c     00          | 	byte	0
3031d                 | LR__5140
3031d     3C          | 	byte	"<"
3031e     00          | 	byte	0
3031f                 | LR__5141
3031f     3E          | 	byte	">"
30320     00          | 	byte	0
30321                 | LR__5142
30321     3C 3E       | 	byte	"<>"
30323     00          | 	byte	0
30324                 | LR__5143
30324     2B 2B       | 	byte	"++"
30326     00          | 	byte	0
30327                 | LR__5144
30327     2D 2D       | 	byte	"--"
30329     00          | 	byte	0
3032a                 | LR__5145
3032a     23          | 	byte	"#"
3032b     00          | 	byte	0
3032c                 | LR__5146
3032c     30          | 	byte	"0"
3032d     00          | 	byte	0
3032e                 | LR__5147
3032e     39          | 	byte	"9"
3032f     00          | 	byte	0
30330                 | LR__5148
30330     23 72 65 61 
30334     64          | 	byte	"#read"
30335     00          | 	byte	0
30336                 | LR__5149
30336     23 77 72 69 
3033a     74 65       | 	byte	"#write"
3033c     00          | 	byte	0
3033d                 | LR__5150
3033d     23 61 70 70 
30341     65 6E 64    | 	byte	"#append"
30344     00          | 	byte	0
30345                 | LR__5151
30345     23          | 	byte	"#"
30346     00          | 	byte	0
30347                 | LR__5152
30347     23          | 	byte	"#"
30348     00          | 	byte	0
30349                 | LR__5153
30349     2D          | 	byte	"-"
3034a     00          | 	byte	0
3034b                 | LR__5154
3034b     30          | 	byte	"0"
3034c     00          | 	byte	0
3034d                 | LR__5155
3034d     63          | 	byte	"c"
3034e     00          | 	byte	0
3034f                 | LR__5156
3034f     63 23       | 	byte	"c#"
30351     00          | 	byte	0
30352                 | LR__5157
30352     64          | 	byte	"d"
30353     00          | 	byte	0
30354                 | LR__5158
30354     64 23       | 	byte	"d#"
30356     00          | 	byte	0
30357                 | LR__5159
30357     65          | 	byte	"e"
30358     00          | 	byte	0
30359                 | LR__5160
30359     66          | 	byte	"f"
3035a     00          | 	byte	0
3035b                 | LR__5161
3035b     66 23       | 	byte	"f#"
3035d     00          | 	byte	0
3035e                 | LR__5162
3035e     67          | 	byte	"g"
3035f     00          | 	byte	0
30360                 | LR__5163
30360     67 23       | 	byte	"g#"
30362     00          | 	byte	0
30363                 | LR__5164
30363     61          | 	byte	"a"
30364     00          | 	byte	0
30365                 | LR__5165
30365     61 23       | 	byte	"a#"
30367     00          | 	byte	0
30368                 | LR__5166
30368     68          | 	byte	"h"
30369     00          | 	byte	0
3036a                 | LR__5167
3036a     62          | 	byte	"b"
3036b     00          | 	byte	0
3036c                 | LR__5168
3036c     2B          | 	byte	"+"
3036d     00          | 	byte	0
3036e                 | LR__5169
3036e     2D          | 	byte	"-"
3036f     00          | 	byte	0
30370                 | LR__5170
30370     3D          | 	byte	"="
30371     00          | 	byte	0
30372                 | LR__5171
30372     2C          | 	byte	","
30373     00          | 	byte	0
30374                 | LR__5172
30374     2A          | 	byte	"*"
30375     00          | 	byte	0
30376                 | LR__5173
30376     2F          | 	byte	"/"
30377     00          | 	byte	0
30378                 | LR__5174
30378     3B          | 	byte	";"
30379     00          | 	byte	0
3037a                 | LR__5175
3037a     22          | 	byte	34
3037b     00          | 	byte	0
3037c                 | LR__5176
3037c     5E          | 	byte	"^"
3037d     00          | 	byte	0
3037e                 | LR__5177
3037e     29          | 	byte	")"
3037f     00          | 	byte	0
30380                 | LR__5178
30380     28          | 	byte	"("
30381     00          | 	byte	0
30382                 | LR__5179
30382     3A          | 	byte	":"
30383     00          | 	byte	0
30384                 | LR__5180
30384     20          | 	byte	" "
30385     00          | 	byte	0
30386                 | LR__5181
30386     3E          | 	byte	">"
30387     00          | 	byte	0
30388                 | LR__5182
30388     3C          | 	byte	"<"
30389     00          | 	byte	0
3038a                 | LR__5183
3038a     3D          | 	byte	"="
3038b     00          | 	byte	0
3038c                 | LR__5184
3038c     62 65 65 70 | 	byte	"beep"
30390     00          | 	byte	0
30391                 | LR__5185
30391     62 2E       | 	byte	"b."
30393     00          | 	byte	0
30394                 | LR__5186
30394     62 6F 78    | 	byte	"box"
30397     00          | 	byte	0
30398                 | LR__5187
30398     62 72 75 6E | 	byte	"brun"
3039c     00          | 	byte	0
3039d                 | LR__5188
3039d     62 72 2E    | 	byte	"br."
303a0     00          | 	byte	0
303a1                 | LR__5189
303a1     63 68 61 6E 
303a5     67 65 66 72 
303a9     65 71       | 	byte	"changefreq"
303ab     00          | 	byte	0
303ac                 | LR__5190
303ac     63 66 2E    | 	byte	"cf."
303af     00          | 	byte	0
303b0                 | LR__5191
303b0     63 68 61 6E 
303b4     67 65 70 61 
303b8     6E          | 	byte	"changepan"
303b9     00          | 	byte	0
303ba                 | LR__5192
303ba     63 70 2E    | 	byte	"cp."
303bd     00          | 	byte	0
303be                 | LR__5193
303be     63 68 61 6E 
303c2     67 65 76 6F 
303c6     6C          | 	byte	"changevol"
303c7     00          | 	byte	0
303c8                 | LR__5194
303c8     63 76 2E    | 	byte	"cv."
303cb     00          | 	byte	0
303cc                 | LR__5195
303cc     63 68 61 6E 
303d0     67 65 77 61 
303d4     76 65       | 	byte	"changewave"
303d6     00          | 	byte	0
303d7                 | LR__5196
303d7     63 77 2E    | 	byte	"cw."
303da     00          | 	byte	0
303db                 | LR__5197
303db     63 69 72 63 
303df     6C 65       | 	byte	"circle"
303e1     00          | 	byte	0
303e2                 | LR__5198
303e2     63 69 2E    | 	byte	"ci."
303e5     00          | 	byte	0
303e6                 | LR__5199
303e6     63 6C 69 63 
303ea     6B          | 	byte	"click"
303eb     00          | 	byte	0
303ec                 | LR__5200
303ec     63 6C 6F 73 
303f0     65          | 	byte	"close"
303f1     00          | 	byte	0
303f2                 | LR__5201
303f2     63 6C 73    | 	byte	"cls"
303f5     00          | 	byte	0
303f6                 | LR__5202
303f6     63 6F 6C 6F 
303fa     72          | 	byte	"color"
303fb     00          | 	byte	0
303fc                 | LR__5203
303fc     63 2E       | 	byte	"c."
303fe     00          | 	byte	0
303ff                 | LR__5204
303ff     63 73 61 76 
30403     65          | 	byte	"csave"
30404     00          | 	byte	0
30405                 | LR__5205
30405     63 73 2E    | 	byte	"cs."
30408     00          | 	byte	0
30409                 | LR__5206
30409     63 75 72 73 
3040d     6F 72       | 	byte	"cursor"
3040f     00          | 	byte	0
30410                 | LR__5207
30410     64 65 66 73 
30414     6E 64       | 	byte	"defsnd"
30416     00          | 	byte	0
30417                 | LR__5208
30417     64 65 66 65 
3041b     6E 76       | 	byte	"defenv"
3041d     00          | 	byte	0
3041e                 | LR__5209
3041e     64 65 66 73 
30422     70 72 69 74 
30426     65          | 	byte	"defsprite"
30427     00          | 	byte	0
30428                 | LR__5210
30428     64 73 2E    | 	byte	"ds."
3042b     00          | 	byte	0
3042c                 | LR__5211
3042c     64 65 67    | 	byte	"deg"
3042f     00          | 	byte	0
30430                 | LR__5212
30430     64 69 6D    | 	byte	"dim"
30433     00          | 	byte	0
30434                 | LR__5213
30434     64 69 72    | 	byte	"dir"
30437     00          | 	byte	0
30438                 | LR__5214
30438     64 70 6F 6B 
3043c     65          | 	byte	"dpoke"
3043d     00          | 	byte	0
3043e                 | LR__5215
3043e     64 72 61 77 | 	byte	"draw"
30442     00          | 	byte	0
30443                 | LR__5216
30443     64 72 2E    | 	byte	"dr."
30446     00          | 	byte	0
30447                 | LR__5217
30447     65 6C 73 65 | 	byte	"else"
3044b     00          | 	byte	0
3044c                 | LR__5218
3044c     65 6E 64    | 	byte	"end"
3044f     00          | 	byte	0
30450                 | LR__5219
30450     65 6E 74 65 
30454     72          | 	byte	"enter"
30455     00          | 	byte	0
30456                 | LR__5220
30456     65 2E       | 	byte	"e."
30458     00          | 	byte	0
30459                 | LR__5221
30459     66 63 69 72 
3045d     63 6C 65    | 	byte	"fcircle"
30460     00          | 	byte	0
30461                 | LR__5222
30461     66 63 2E    | 	byte	"fc."
30464     00          | 	byte	0
30465                 | LR__5223
30465     66 69 6C 6C | 	byte	"fill"
30469     00          | 	byte	0
3046a                 | LR__5224
3046a     66 69 2E    | 	byte	"fi."
3046d     00          | 	byte	0
3046e                 | LR__5225
3046e     66 6F 6E 74 | 	byte	"font"
30472     00          | 	byte	0
30473                 | LR__5226
30473     66 6F 72    | 	byte	"for"
30476     00          | 	byte	0
30477                 | LR__5227
30477     66 2E       | 	byte	"f."
30479     00          | 	byte	0
3047a                 | LR__5228
3047a     66 72 61 6D 
3047e     65          | 	byte	"frame"
3047f     00          | 	byte	0
30480                 | LR__5229
30480     66 72 2E    | 	byte	"fr."
30483     00          | 	byte	0
30484                 | LR__5230
30484     67 65 74    | 	byte	"get"
30487     00          | 	byte	0
30488                 | LR__5231
30488     67 6F 73 75 
3048c     62          | 	byte	"gosub"
3048d     00          | 	byte	0
3048e                 | LR__5232
3048e     67 6F 74 6F | 	byte	"goto"
30492     00          | 	byte	0
30493                 | LR__5233
30493     67 2E       | 	byte	"g."
30495     00          | 	byte	0
30496                 | LR__5234
30496     69 66       | 	byte	"if"
30498     00          | 	byte	0
30499                 | LR__5235
30499     69 6E 6B    | 	byte	"ink"
3049c     00          | 	byte	0
3049d                 | LR__5236
3049d     69 2E       | 	byte	"i."
3049f     00          | 	byte	0
304a0                 | LR__5237
304a0     6C 69 73 74 | 	byte	"list"
304a4     00          | 	byte	0
304a5                 | LR__5238
304a5     6C 2E       | 	byte	"l."
304a7     00          | 	byte	0
304a8                 | LR__5239
304a8     6C 6F 61 64 | 	byte	"load"
304ac     00          | 	byte	0
304ad                 | LR__5240
304ad     6C 6F 2E    | 	byte	"lo."
304b0     00          | 	byte	0
304b1                 | LR__5241
304b1     6C 70 6F 6B 
304b5     65          | 	byte	"lpoke"
304b6     00          | 	byte	0
304b7                 | LR__5242
304b7     6D 6F 64 65 | 	byte	"mode"
304bb     00          | 	byte	0
304bc                 | LR__5243
304bc     6D 2E       | 	byte	"m."
304be     00          | 	byte	0
304bf                 | LR__5244
304bf     6D 6F 75 73 
304c3     65          | 	byte	"mouse"
304c4     00          | 	byte	0
304c5                 | LR__5245
304c5     6E 65 77    | 	byte	"new"
304c8     00          | 	byte	0
304c9                 | LR__5246
304c9     6E 65 78 74 | 	byte	"next"
304cd     00          | 	byte	0
304ce                 | LR__5247
304ce     6E 2E       | 	byte	"n."
304d0     00          | 	byte	0
304d1                 | LR__5248
304d1     6F 70 65 6E | 	byte	"open"
304d5     00          | 	byte	0
304d6                 | LR__5249
304d6     70 61 70 65 
304da     72          | 	byte	"paper"
304db     00          | 	byte	0
304dc                 | LR__5250
304dc     70 61 2E    | 	byte	"pa."
304df     00          | 	byte	0
304e0                 | LR__5251
304e0     70 69 6E 66 
304e4     6C 6F 61 74 | 	byte	"pinfloat"
304e8     00          | 	byte	0
304e9                 | LR__5252
304e9     70 69 6E 68 
304ed     69          | 	byte	"pinhi"
304ee     00          | 	byte	0
304ef                 | LR__5253
304ef     70 69 6E 6C 
304f3     6F          | 	byte	"pinlo"
304f4     00          | 	byte	0
304f5                 | LR__5254
304f5     70 69 6E 73 
304f9     74 61 72 74 | 	byte	"pinstart"
304fd     00          | 	byte	0
304fe                 | LR__5255
304fe     70 69 6E 74 
30502     6F 67 67 6C 
30506     65          | 	byte	"pintoggle"
30507     00          | 	byte	0
30508                 | LR__5256
30508     70 69 6E 77 
3050c     72 69 74 65 | 	byte	"pinwrite"
30510     00          | 	byte	0
30511                 | LR__5257
30511     70 6C 61 79 | 	byte	"play"
30515     00          | 	byte	0
30516                 | LR__5258
30516     70 2E       | 	byte	"p."
30518     00          | 	byte	0
30519                 | LR__5259
30519     70 6C 6F 74 | 	byte	"plot"
3051d     00          | 	byte	0
3051e                 | LR__5260
3051e     70 6C 2E    | 	byte	"pl."
30521     00          | 	byte	0
30522                 | LR__5261
30522     70 6F 6B 65 | 	byte	"poke"
30526     00          | 	byte	0
30527                 | LR__5262
30527     70 6F 70    | 	byte	"pop"
3052a     00          | 	byte	0
3052b                 | LR__5263
3052b     70 6F 73 69 
3052f     74 69 6F 6E | 	byte	"position"
30533     00          | 	byte	0
30534                 | LR__5264
30534     70 6F 73 2E | 	byte	"pos."
30538     00          | 	byte	0
30539                 | LR__5265
30539     70 72 69 6E 
3053d     74          | 	byte	"print"
3053e     00          | 	byte	0
3053f                 | LR__5266
3053f     3F          | 	byte	"?"
30540     00          | 	byte	0
30541                 | LR__5267
30541     70 75 74    | 	byte	"put"
30544     00          | 	byte	0
30545                 | LR__5268
30545     72 61 64    | 	byte	"rad"
30548     00          | 	byte	0
30549                 | LR__5269
30549     72 65 6C 65 
3054d     61 73 65    | 	byte	"release"
30550     00          | 	byte	0
30551                 | LR__5270
30551     72 65 6D    | 	byte	"rem"
30554     00          | 	byte	0
30555                 | LR__5271
30555     27          | 	byte	"'"
30556     00          | 	byte	0
30557                 | LR__5272
30557     72 65 74 75 
3055b     72 6E       | 	byte	"return"
3055d     00          | 	byte	0
3055e                 | LR__5273
3055e     72 75 6E    | 	byte	"run"
30561     00          | 	byte	0
30562                 | LR__5274
30562     73 61 76 65 | 	byte	"save"
30566     00          | 	byte	0
30567                 | LR__5275
30567     73 2E       | 	byte	"s."
30569     00          | 	byte	0
3056a                 | LR__5276
3056a     73 65 74 64 
3056e     65 6C 61 79 | 	byte	"setdelay"
30572     00          | 	byte	0
30573                 | LR__5277
30573     73 64 2E    | 	byte	"sd."
30576     00          | 	byte	0
30577                 | LR__5278
30577     73 65 74 65 
3057b     6E 76       | 	byte	"setenv"
3057d     00          | 	byte	0
3057e                 | LR__5279
3057e     73 65 2E    | 	byte	"se."
30581     00          | 	byte	0
30582                 | LR__5280
30582     73 65 74 6C 
30586     65 6E       | 	byte	"setlen"
30588     00          | 	byte	0
30589                 | LR__5281
30589     73 6C 2E    | 	byte	"sl."
3058c     00          | 	byte	0
3058d                 | LR__5282
3058d     73 65 74 70 
30591     61 6E       | 	byte	"setpan"
30593     00          | 	byte	0
30594                 | LR__5283
30594     73 70       | 	byte	"sp"
30596     00          | 	byte	0
30597                 | LR__5284
30597     73 65 74 73 
3059b     75 73 74 61 
3059f     69 6E       | 	byte	"setsustain"
305a1     00          | 	byte	0
305a2                 | LR__5285
305a2     73 73 2E    | 	byte	"ss."
305a5     00          | 	byte	0
305a6                 | LR__5286
305a6     73 65 74 76 
305aa     6F 6C       | 	byte	"setvol"
305ac     00          | 	byte	0
305ad                 | LR__5287
305ad     73 76 2E    | 	byte	"sv."
305b0     00          | 	byte	0
305b1                 | LR__5288
305b1     73 65 74 77 
305b5     61 76 65    | 	byte	"setwave"
305b8     00          | 	byte	0
305b9                 | LR__5289
305b9     73 77 2E    | 	byte	"sw."
305bc     00          | 	byte	0
305bd                 | LR__5290
305bd     73 65 74 77 
305c1     61 76       | 	byte	"setwav"
305c3     00          | 	byte	0
305c4                 | LR__5291
305c4     73 68 75 74 
305c8     75 70       | 	byte	"shutup"
305ca     00          | 	byte	0
305cb                 | LR__5292
305cb     73 68 2E    | 	byte	"sh."
305ce     00          | 	byte	0
305cf                 | LR__5293
305cf     73 6F 75 6E 
305d3     64          | 	byte	"sound"
305d4     00          | 	byte	0
305d5                 | LR__5294
305d5     73 6F 2E    | 	byte	"so."
305d8     00          | 	byte	0
305d9                 | LR__5295
305d9     73 70 72 69 
305dd     74 65       | 	byte	"sprite"
305df     00          | 	byte	0
305e0                 | LR__5296
305e0     73 70 72 2E | 	byte	"spr."
305e4     00          | 	byte	0
305e5                 | LR__5297
305e5     74 68 65 6E | 	byte	"then"
305e9     00          | 	byte	0
305ea                 | LR__5298
305ea     77 61 69 74 
305ee     6D 73       | 	byte	"waitms"
305f0     00          | 	byte	0
305f1                 | LR__5299
305f1     77 61 69 74 
305f5     63 6C 6F 63 
305f9     6B          | 	byte	"waitclock"
305fa     00          | 	byte	0
305fb                 | LR__5300
305fb     77 63 2E    | 	byte	"wc."
305fe     00          | 	byte	0
305ff                 | LR__5301
305ff     77 61 69 74 
30603     76 62 6C    | 	byte	"waitvbl"
30606     00          | 	byte	0
30607                 | LR__5302
30607     77 76 2E    | 	byte	"wv."
3060a     00          | 	byte	0
3060b                 | LR__5303
3060b     77 78 70 69 
3060f     6E          | 	byte	"wxpin"
30610     00          | 	byte	0
30611                 | LR__5304
30611     77 79 70 69 
30615     6E          | 	byte	"wypin"
30616     00          | 	byte	0
30617                 | LR__5305
30617     61 62 73    | 	byte	"abs"
3061a     00          | 	byte	0
3061b                 | LR__5306
3061b     61 63 6F 73 | 	byte	"acos"
3061f     00          | 	byte	0
30620                 | LR__5307
30620     61 64 72    | 	byte	"adr"
30623     00          | 	byte	0
30624                 | LR__5308
30624     61 64 64 72 | 	byte	"addr"
30628     00          | 	byte	0
30629                 | LR__5309
30629     61 73 63    | 	byte	"asc"
3062c     00          | 	byte	0
3062d                 | LR__5310
3062d     61 73 69 6E | 	byte	"asin"
30631     00          | 	byte	0
30632                 | LR__5311
30632     61 74 6E    | 	byte	"atn"
30635     00          | 	byte	0
30636                 | LR__5312
30636     62 69 6E 24 | 	byte	"bin$"
3063a     00          | 	byte	0
3063b                 | LR__5313
3063b     63 68 72 24 | 	byte	"chr$"
3063f     00          | 	byte	0
30640                 | LR__5314
30640     63 6F 73    | 	byte	"cos"
30643     00          | 	byte	0
30644                 | LR__5315
30644     64 70 65 65 
30648     6B          | 	byte	"dpeek"
30649     00          | 	byte	0
3064a                 | LR__5316
3064a     66 72 65    | 	byte	"fre"
3064d     00          | 	byte	0
3064e                 | LR__5317
3064e     67 65 74 70 
30652     69 78 65 6C | 	byte	"getpixel"
30656     00          | 	byte	0
30657                 | LR__5318
30657     67 65 2E    | 	byte	"ge."
3065a     00          | 	byte	0
3065b                 | LR__5319
3065b     67 65 74 65 
3065f     6E 76 73 75 
30663     73 74 61 69 
30667     6E          | 	byte	"getenvsustain"
30668     00          | 	byte	0
30669                 | LR__5320
30669     67 65 74 6E 
3066d     6F 74 65 76 
30671     61 6C 75 65 | 	byte	"getnotevalue"
30675     00          | 	byte	0
30676                 | LR__5321
30676     67 65 74 74 
3067a     69 6D 65    | 	byte	"gettime"
3067d     00          | 	byte	0
3067e                 | LR__5322
3067e     68 65 78 24 | 	byte	"hex$"
30682     00          | 	byte	0
30683                 | LR__5323
30683     69 6E 6B 65 
30687     79 24       | 	byte	"inkey$"
30689     00          | 	byte	0
3068a                 | LR__5324
3068a     69 6E 74    | 	byte	"int"
3068d     00          | 	byte	0
3068e                 | LR__5325
3068e     6C 65 66 74 
30692     24          | 	byte	"left$"
30693     00          | 	byte	0
30694                 | LR__5326
30694     6C 65 6E    | 	byte	"len"
30697     00          | 	byte	0
30698                 | LR__5327
30698     6C 6F 67    | 	byte	"log"
3069b     00          | 	byte	0
3069c                 | LR__5328
3069c     6C 70 65 65 
306a0     6B          | 	byte	"lpeek"
306a1     00          | 	byte	0
306a2                 | LR__5329
306a2     6D 69 64 24 | 	byte	"mid$"
306a6     00          | 	byte	0
306a7                 | LR__5330
306a7     6D 6F 75 73 
306ab     65 6B       | 	byte	"mousek"
306ad     00          | 	byte	0
306ae                 | LR__5331
306ae     6D 6F 75 73 
306b2     65 77       | 	byte	"mousew"
306b4     00          | 	byte	0
306b5                 | LR__5332
306b5     6D 6F 75 73 
306b9     65 78       | 	byte	"mousex"
306bb     00          | 	byte	0
306bc                 | LR__5333
306bc     6D 6F 75 73 
306c0     65 79       | 	byte	"mousey"
306c2     00          | 	byte	0
306c3                 | LR__5334
306c3     70 65 65 6B | 	byte	"peek"
306c7     00          | 	byte	0
306c8                 | LR__5335
306c8     70 69 6E 72 
306cc     65 61 64    | 	byte	"pinread"
306cf     00          | 	byte	0
306d0                 | LR__5336
306d0     72 64 70 69 
306d4     6E          | 	byte	"rdpin"
306d5     00          | 	byte	0
306d6                 | LR__5337
306d6     72 69 67 68 
306da     74 24       | 	byte	"right$"
306dc     00          | 	byte	0
306dd                 | LR__5338
306dd     72 71 70 69 
306e1     6E          | 	byte	"rqpin"
306e2     00          | 	byte	0
306e3                 | LR__5339
306e3     72 6F 75 6E 
306e7     64          | 	byte	"round"
306e8     00          | 	byte	0
306e9                 | LR__5340
306e9     72 6E 64    | 	byte	"rnd"
306ec     00          | 	byte	0
306ed                 | LR__5341
306ed     73 69 6E    | 	byte	"sin"
306f0     00          | 	byte	0
306f1                 | LR__5342
306f1     73 71 72    | 	byte	"sqr"
306f4     00          | 	byte	0
306f5                 | LR__5343
306f5     73 74 69 63 
306f9     6B          | 	byte	"stick"
306fa     00          | 	byte	0
306fb                 | LR__5344
306fb     73 74 72 69 
306ff     67          | 	byte	"strig"
30700     00          | 	byte	0
30701                 | LR__5345
30701     73 74 72 24 | 	byte	"str$"
30705     00          | 	byte	0
30706                 | LR__5346
30706     74 61 6E    | 	byte	"tan"
30709     00          | 	byte	0
3070a                 | LR__5347
3070a     76 61 6C    | 	byte	"val"
3070d     00          | 	byte	0
3070e                 | LR__5348
3070e     76 61 72 70 
30712     74 72       | 	byte	"varptr"
30714     00          | 	byte	0
30715                 | LR__5349
30715     61          | 	byte	"a"
30716     00          | 	byte	0
30717                 | LR__5350
30717     7A          | 	byte	"z"
30718     00          | 	byte	0
30719                 | LR__5351
30719     5F          | 	byte	"_"
3071a     00          | 	byte	0
3071b                 | LR__5352
3071b     61          | 	byte	"a"
3071c     00          | 	byte	0
3071d                 | LR__5353
3071d     7A          | 	byte	"z"
3071e     00          | 	byte	0
3071f                 | LR__5354
3071f     30          | 	byte	"0"
30720     00          | 	byte	0
30721                 | LR__5355
30721     39          | 	byte	"9"
30722     00          | 	byte	0
30723                 | LR__5356
30723     5F          | 	byte	"_"
30724     00          | 	byte	0
30725                 | LR__5357
30725     2E          | 	byte	"."
30726     00          | 	byte	0
30727                 | LR__5358
30727     61          | 	byte	"a"
30728     00          | 	byte	0
30729                 | LR__5359
30729     7A          | 	byte	"z"
3072a     00          | 	byte	0
3072b                 | LR__5360
3072b     30          | 	byte	"0"
3072c     00          | 	byte	0
3072d                 | LR__5361
3072d     39          | 	byte	"9"
3072e     00          | 	byte	0
3072f                 | LR__5362
3072f     5F          | 	byte	"_"
30730     00          | 	byte	0
30731                 | LR__5363
30731     24          | 	byte	"$"
30732     00          | 	byte	0
30733                 | LR__5364
30733     25          | 	byte	"%"
30734     00          | 	byte	0
30735                 | LR__5365
30735     21          | 	byte	"!"
30736     00          | 	byte	0
30737                 | LR__5366
30737     30          | 	byte	"0"
30738     00          | 	byte	0
30739                 | LR__5367
30739     39          | 	byte	"9"
3073a     00          | 	byte	0
3073b                 | LR__5368
3073b     2E          | 	byte	"."
3073c     00          | 	byte	0
3073d                 | LR__5369
3073d     24          | 	byte	"$"
3073e     00          | 	byte	0
3073f                 | LR__5370
3073f     25          | 	byte	"%"
30740     00          | 	byte	0
30741                 | LR__5371
30741     2D          | 	byte	"-"
30742     00          | 	byte	0
30743                 | LR__5372
30743     2E          | 	byte	"."
30744     00          | 	byte	0
30745                 | LR__5373
30745     24          | 	byte	"$"
30746     00          | 	byte	0
30747                 | LR__5374
30747     25          | 	byte	"%"
30748     00          | 	byte	0
30749                 | LR__5375
30749     30          | 	byte	"0"
3074a     00          | 	byte	0
3074b                 | LR__5376
3074b     39          | 	byte	"9"
3074c     00          | 	byte	0
3074d                 | LR__5377
3074d     5F          | 	byte	"_"
3074e     00          | 	byte	0
3074f                 | LR__5378
3074f     2E          | 	byte	"."
30750     00          | 	byte	0
30751                 | LR__5379
30751     45          | 	byte	"E"
30752     00          | 	byte	0
30753                 | LR__5380
30753     65          | 	byte	"e"
30754     00          | 	byte	0
30755                 | LR__5381
30755     2D          | 	byte	"-"
30756     00          | 	byte	0
30757                 | LR__5382
30757     61          | 	byte	"a"
30758     00          | 	byte	0
30759                 | LR__5383
30759     66          | 	byte	"f"
3075a     00          | 	byte	0
3075b                 | LR__5384
3075b     30          | 	byte	"0"
3075c     00          | 	byte	0
3075d                 | LR__5385
3075d     31          | 	byte	"1"
3075e     00          | 	byte	0
3075f                 | LR__5386
3075f     5F          | 	byte	"_"
30760     00          | 	byte	0
30761                 | LR__5387
30761     2D          | 	byte	"-"
30762     00          | 	byte	0
30763                 | LR__5388
30763     65          | 	byte	"e"
30764     00          | 	byte	0
30765                 | LR__5389
30765     2E          | 	byte	"."
30766     00          | 	byte	0
30767                 | LR__5390
30767     45          | 	byte	"E"
30768     00          | 	byte	0
30769                 | LR__5391
30769     65          | 	byte	"e"
3076a     00          | 	byte	0
3076b                 | LR__5392
3076b     30          | 	byte	"0"
3076c     00          | 	byte	0
3076d                 | LR__5393
3076d     39          | 	byte	"9"
3076e     00          | 	byte	0
3076f                 | LR__5394
3076f     24          | 	byte	"$"
30770     00          | 	byte	0
30771                 | LR__5395
30771     25          | 	byte	"%"
30772     00          | 	byte	0
30773                 | LR__5396
30773     2D          | 	byte	"-"
30774     00          | 	byte	0
30775                 | LR__5397
30775     24          | 	byte	"$"
30776     00          | 	byte	0
30777                 | LR__5398
30777     25          | 	byte	"%"
30778     00          | 	byte	0
30779                 | LR__5399
30779     30          | 	byte	"0"
3077a     00          | 	byte	0
3077b                 | LR__5400
3077b     39          | 	byte	"9"
3077c     00          | 	byte	0
3077d                 | LR__5401
3077d     5F          | 	byte	"_"
3077e     00          | 	byte	0
3077f                 | LR__5402
3077f     30          | 	byte	"0"
30780     00          | 	byte	0
30781                 | LR__5403
30781     39          | 	byte	"9"
30782     00          | 	byte	0
30783                 | LR__5404
30783     61          | 	byte	"a"
30784     00          | 	byte	0
30785                 | LR__5405
30785     66          | 	byte	"f"
30786     00          | 	byte	0
30787                 | LR__5406
30787     5F          | 	byte	"_"
30788     00          | 	byte	0
30789                 | LR__5407
30789     30          | 	byte	"0"
3078a     00          | 	byte	0
3078b                 | LR__5408
3078b     31          | 	byte	"1"
3078c     00          | 	byte	0
3078d                 | LR__5409
3078d     5F          | 	byte	"_"
3078e     00          | 	byte	0
3078f                 | LR__5410
3078f     30          | 	byte	"0"
30790     00          | 	byte	0
30791                 | LR__5411
30791     39          | 	byte	"9"
30792     00          | 	byte	0
30793                 | LR__5412
30793     5F          | 	byte	"_"
30794     00          | 	byte	0
30795                 | LR__5413
30795     22          | 	byte	34
30796     00          | 	byte	0
30797                 | LR__5414
30797     22          | 	byte	34
30798     00          | 	byte	0
30799                 | LR__5415
30799     44 69 6D 3A 
3079d     20 61 74 20 
307a1     6C 69 6E 65 
307a5     20          | 	byte	"Dim: at line "
307a6     00          | 	byte	0
307a7                 | LR__5416
307a7     3A 20 77 61 
307ab     72 6E 69 6E 
307af     67 3A 20 74 
307b3     68 65 20 76 
307b7     61 72 69 61 
307bb     62 6C 65 20 
307bf     65 78 69 73 
307c3     74 65 64 2E | 	byte	": warning: the variable existed."
307c7     00          | 	byte	0
307c8                 | LR__5417
307c8     28          | 	byte	"("
307c9     00          | 	byte	0
307ca                 | LR__5418
307ca     61 73       | 	byte	"as"
307cc     00          | 	byte	0
307cd                 | LR__5419
307cd     61 73       | 	byte	"as"
307cf     00          | 	byte	0
307d0                 | LR__5420
307d0     2C          | 	byte	","
307d1     00          | 	byte	0
307d2                 | LR__5421
307d2     29          | 	byte	")"
307d3     00          | 	byte	0
307d4                 | LR__5422
307d4     29          | 	byte	")"
307d5     00          | 	byte	0
307d6                 | LR__5423
307d6     61 73       | 	byte	"as"
307d8     00          | 	byte	0
307d9                 | LR__5424
307d9     62 79 74 65 | 	byte	"byte"
307dd     00          | 	byte	0
307de                 | LR__5425
307de     75 62 79 74 
307e2     65          | 	byte	"ubyte"
307e3     00          | 	byte	0
307e4                 | LR__5426
307e4     73 68 6F 72 
307e8     74          | 	byte	"short"
307e9     00          | 	byte	0
307ea                 | LR__5427
307ea     75 73 68 6F 
307ee     72 74       | 	byte	"ushort"
307f0     00          | 	byte	0
307f1                 | LR__5428
307f1     6C 6F 6E 67 | 	byte	"long"
307f5     00          | 	byte	0
307f6                 | LR__5429
307f6     69 6E 74 65 
307fa     67 65 72    | 	byte	"integer"
307fd     00          | 	byte	0
307fe                 | LR__5430
307fe     75 6C 6F 6E 
30802     67          | 	byte	"ulong"
30803     00          | 	byte	0
30804                 | LR__5431
30804     69 6E 74 36 
30808     34          | 	byte	"int64"
30809     00          | 	byte	0
3080a                 | LR__5432
3080a     75 69 6E 74 
3080e     36 34       | 	byte	"uint64"
30810     00          | 	byte	0
30811                 | LR__5433
30811     73 69 6E 67 
30815     6C 65       | 	byte	"single"
30817     00          | 	byte	0
30818                 | LR__5434
30818     64 6F 75 62 
3081c     6C 65       | 	byte	"double"
3081e     00          | 	byte	0
3081f                 | LR__5435
3081f     73 74 72 69 
30823     6E 67       | 	byte	"string"
30825     00          | 	byte	0
30826                 | LR__5436
30826     74 6F       | 	byte	"to"
30828     00          | 	byte	0
30829                 | LR__5437
30829     73 74 65 70 | 	byte	"step"
3082d     00          | 	byte	0
3082e                 | LR__5438
3082e     73 2E       | 	byte	"s."
30830     00          | 	byte	0
30831                 | LR__5439
30831     24          | 	byte	"$"
30832     00          | 	byte	0
30833                 | LR__5440
30833     26 68       | 	byte	"&h"
30835     00          | 	byte	0
30836                 | LR__5441
30836     25          | 	byte	"%"
30837     00          | 	byte	0
30838                 | LR__5442
30838     26 62       | 	byte	"&b"
3083a     00          | 	byte	0
3083b                 | LR__5443
3083b                 | 	byte	
3083b     00          | 	byte	0
3083c                 | LR__5444
3083c                 | 	byte	
3083c     00          | 	byte	0
3083d                 | LR__5445
3083d                 | 	byte	
3083d     00          | 	byte	0
3083e                 | LR__5446
3083e     2F 73 64 2F 
30842     6D 65 64 69 
30846     61 2F 68 2F | 	byte	"/sd/media/h/"
3084a     00          | 	byte	0
3084b                 | LR__5447
3084b     53 79 73 74 
3084f     65 6D 20 65 
30853     72 72 6F 72 
30857     20          | 	byte	"System error "
30858     00          | 	byte	0
30859                 | LR__5448
30859     3A 20       | 	byte	": "
3085b     00          | 	byte	0
3085c                 | LR__5449
3085c                 | 	byte	
3085c     00          | 	byte	0
3085d                 | LR__5450
3085d     2F          | 	byte	"/"
3085e     00          | 	byte	0
3085f                 | LR__5451
3085f     2F          | 	byte	"/"
30860     00          | 	byte	0
30861                 | LR__5452
30861     2E 62 61 73 | 	byte	".bas"
30865     00          | 	byte	0
30866                 | LR__5453
30866     53 79 73 74 
3086a     65 6D 20 65 
3086e     72 72 6F 72 
30872     20          | 	byte	"System error "
30873     00          | 	byte	0
30874                 | LR__5454
30874     3A 20       | 	byte	": "
30876     00          | 	byte	0
30877                 | LR__5455
30877     2E 62 61 73 | 	byte	".bas"
3087b     00          | 	byte	0
3087c                 | LR__5456
3087c     2F          | 	byte	"/"
3087d     00          | 	byte	0
3087e                 | LR__5457
3087e                 | 	byte	
3087e     00          | 	byte	0
3087f                 | LR__5458
3087f     4C 6F 61 64 
30883     65 64 20    | 	byte	"Loaded "
30886     00          | 	byte	0
30887                 | LR__5459
30887     2F          | 	byte	"/"
30888     00          | 	byte	0
30889                 | LR__5460
30889     53 74 6F 70 
3088d     70 65 64 20 
30891     61 74 20 6C 
30895     69 6E 65 20 | 	byte	"Stopped at line "
30899     00          | 	byte	0
3089a                 | LR__5461
3089a                 | 	byte	
3089a     00          | 	byte	0
3089b                 | LR__5462
3089b     2F          | 	byte	"/"
3089c     00          | 	byte	0
3089d                 | LR__5463
3089d                 | 	byte	
3089d     00          | 	byte	0
3089e                 | LR__5464
3089e     53 61 76 65 
308a2     64 20 61 73 
308a6     20          | 	byte	"Saved as "
308a7     00          | 	byte	0
308a8                 | LR__5465
308a8     2F          | 	byte	"/"
308a9     00          | 	byte	0
308aa                 | LR__5466
308aa                 | 	byte	
308aa     00          | 	byte	0
308ab                 | LR__5467
308ab                 | 	byte	
308ab     00          | 	byte	0
308ac                 | LR__5468
308ac     2F 73 64 2F 
308b0     6D 65 64 69 
308b4     61 2F 73 2F | 	byte	"/sd/media/s/"
308b8     00          | 	byte	0
308b9                 | LR__5469
308b9     53 79 73 74 
308bd     65 6D 20 65 
308c1     72 72 6F 72 
308c5     20          | 	byte	"System error "
308c6     00          | 	byte	0
308c7                 | LR__5470
308c7     3A 20       | 	byte	": "
308c9     00          | 	byte	0
308ca                 | LR__5471
308ca                 | 	byte	
308ca     00          | 	byte	0
308cb                 | LR__5472
308cb     6E 6F 6E 61 
308cf     6D 65 2E 62 
308d3     61 73       | 	byte	"noname.bas"
308d5     00          | 	byte	0
308d6                 | LR__5473
308d6     66 69 6C 65 
308da     6E 61 6D 65 
308de     20 65 78 70 
308e2     65 63 74 65 
308e6     64          | 	byte	"filename expected"
308e7     00          | 	byte	0
308e8                 | LR__5474
308e8     72 65 61 64 | 	byte	"read"
308ec     00          | 	byte	0
308ed                 | LR__5475
308ed     77 72 69 74 
308f1     65          | 	byte	"write"
308f2     00          | 	byte	0
308f3                 | LR__5476
308f3     61 70 70 65 
308f7     6E 64       | 	byte	"append"
308f9     00          | 	byte	0
308fa                 | LR__5477
308fa     63 68 61 6E 
308fe     6E 65 6C 23 
30902     20 65 78 70 
30906     65 63 74 65 
3090a     64          | 	byte	"channel# expected"
3090b     00          | 	byte	0
3090c                 | LR__5478
3090c     4F 70 65 6E 
30910     3A 20 69 6E 
30914     76 61 6C 69 
30918     64 20 6D 6F 
3091c     64 65       | 	byte	"Open: invalid mode"
3091e     00          | 	byte	0
3091f                 | LR__5479
3091f     63 68 61 6E 
30923     6E 65 6C 23 
30927     20 65 78 70 
3092b     65 63 74 65 
3092f     64          | 	byte	"channel# expected"
30930     00          | 	byte	0
30931                 | LR__5480
30931     45 72 72 6F 
30935     72 20       | 	byte	"Error "
30937     00          | 	byte	0
30938                 | LR__5481
30938     3A 20       | 	byte	": "
3093a     00          | 	byte	0
3093b                 | LR__5482
3093b                 | 	byte	
3093b     00          | 	byte	0
3093c                 | LR__5483
3093c     72 6E 64 3A 
30940     20          | 	byte	"rnd: "
30941     00          | 	byte	0
30942                 | LR__5484
30942     72 6E 64 3A 
30946     20          | 	byte	"rnd: "
30947     00          | 	byte	0
30948                 | LR__5485
30948     67 65 74 65 
3094c     6E 76 73 75 
30950     73 74 61 69 
30954     6E 3A 20    | 	byte	"getenvsustain: "
30957     00          | 	byte	0
30958                 | LR__5486
30958     73 69 6E 3A 
3095c     20          | 	byte	"sin: "
3095d     00          | 	byte	0
3095e                 | LR__5487
3095e     6D 69 64 24 
30962     3A 20       | 	byte	"mid$: "
30964     00          | 	byte	0
30965                 | LR__5488
30965     6D 69 64 24 
30969     3A 20       | 	byte	"mid$: "
3096b     00          | 	byte	0
3096c                 | LR__5489
3096c     72 69 67 68 
30970     74 24 3A 20 | 	byte	"right$: "
30974     00          | 	byte	0
30975                 | LR__5490
30975     72 69 67 68 
30979     74 24 3A 20 | 	byte	"right$: "
3097d     00          | 	byte	0
3097e                 | LR__5491
3097e     6C 65 66 74 
30982     24 3A 20    | 	byte	"left$: "
30985     00          | 	byte	0
30986                 | LR__5492
30986     6C 65 66 74 
3098a     24 3A 20    | 	byte	"left$: "
3098d     00          | 	byte	0
3098e                 | LR__5493
3098e     61 73 63 3A 
30992     20          | 	byte	"asc: "
30993     00          | 	byte	0
30994                 | LR__5494
30994     61 73 63 3A 
30998     20          | 	byte	"asc: "
30999     00          | 	byte	0
3099a                 | LR__5495
3099a     6C 65 6E 3A 
3099e     20          | 	byte	"len: "
3099f     00          | 	byte	0
309a0                 | LR__5496
309a0     6C 65 6E 3A 
309a4     20          | 	byte	"len: "
309a5     00          | 	byte	0
309a6                 | LR__5497
309a6     63 68 72 24 
309aa     3A 20       | 	byte	"chr$: "
309ac     00          | 	byte	0
309ad                 | LR__5498
309ad     76 61 6C 3A 
309b1     20          | 	byte	"val: "
309b2     00          | 	byte	0
309b3                 | LR__5499
309b3     76 61 6C 3A 
309b7     20          | 	byte	"val: "
309b8     00          | 	byte	0
309b9                 | LR__5500
309b9     24          | 	byte	"$"
309ba     00          | 	byte	0
309bb                 | LR__5501
309bb     26 68       | 	byte	"&h"
309bd     00          | 	byte	0
309be                 | LR__5502
309be     25          | 	byte	"%"
309bf     00          | 	byte	0
309c0                 | LR__5503
309c0     26 62       | 	byte	"&b"
309c2     00          | 	byte	0
309c3                 | LR__5504
309c3     68 65 78 24 
309c7     3A 20       | 	byte	"hex$: "
309c9     00          | 	byte	0
309ca                 | LR__5505
309ca     62 69 6E 24 
309ce     3A 20       | 	byte	"bin$: "
309d0     00          | 	byte	0
309d1                 | LR__5506
309d1     63 6F 73 3A 
309d5     20          | 	byte	"cos: "
309d6     00          | 	byte	0
309d7                 | LR__5507
309d7     74 61 6E 3A 
309db     20          | 	byte	"tan: "
309dc     00          | 	byte	0
309dd                 | LR__5508
309dd     61 73 69 6E 
309e1     3A 20       | 	byte	"asin: "
309e3     00          | 	byte	0
309e4                 | LR__5509
309e4     61 63 6F 73 
309e8     3A 20       | 	byte	"acos: "
309ea     00          | 	byte	0
309eb                 | LR__5510
309eb     61 74 6E 3A 
309ef     20          | 	byte	"atn: "
309f0     00          | 	byte	0
309f1                 | LR__5511
309f1     73 71 72 3A 
309f5     20          | 	byte	"sqr: "
309f6     00          | 	byte	0
309f7                 | LR__5512
309f7     73 74 69 63 
309fb     6B 3A 20    | 	byte	"stick: "
309fe     00          | 	byte	0
309ff                 | LR__5513
309ff     73 74 72 69 
30a03     67 3A 20    | 	byte	"strig: "
30a06     00          | 	byte	0
30a07                 | LR__5514
30a07     67 65 74 70 
30a0b     69 78 65 6C 
30a0f     3A 20       | 	byte	"getpixel: "
30a11     00          | 	byte	0
30a12                 | LR__5515
30a12     6C 6F 67 3A 
30a16     20          | 	byte	"log: "
30a17     00          | 	byte	0
30a18                 | LR__5516
30a18     50 72 69 6E 
30a1c     74 20 74 6F 
30a20     20 63 68 61 
30a24     6E 6E 65 6C 
30a28     20          | 	byte	"Print to channel "
30a29     00          | 	byte	0
30a2a                 | LR__5517
30a2a     20 42 41 53 
30a2e     49 43 20 62 
30a32     79 74 65 73 
30a36     20 66 72 65 
30a3a     65          | 	byte	" BASIC bytes free"
30a3b     00          | 	byte	0
30a3c                 | LR__5518
30a3c                 | 	byte	
30a3c     00          | 	byte	0
30a3d                 | LR__5519
30a3d     2F 73 64 2F 
30a41     62 61 73    | 	byte	"/sd/bas"
30a44     00          | 	byte	0
30a45                 | LR__5520
30a45     57 6F 72 6B 
30a49     69 6E 67 20 
30a4d     64 69 72 65 
30a51     63 74 6F 72 
30a55     79 3A 20    | 	byte	"Working directory: "
30a58     00          | 	byte	0
30a59                 | LR__5521
30a59                 | 	byte	
30a59     00          | 	byte	0
30a5a                 | LR__5522
30a5a     2A          | 	byte	"*"
30a5b     00          | 	byte	0
30a5c                 | LR__5523
30a5c                 | 	byte	
30a5c     00          | 	byte	0
30a5d                 | LR__5524
30a5d     5B 64 69 72 
30a61     5D 20       | 	byte	"[dir] "
30a63     00          | 	byte	0
30a64                 | LR__5525
30a64     4D 6F 72 65 
30a68     20 74 68 61 
30a6c     6E 20 31 32 
30a70     38 20 65 6E 
30a74     74 72 69 65 
30a78     73 20 66 6F 
30a7c     75 6E 64 3A 
30a80     20 63 6C 65 
30a84     61 6E 20 79 
30a88     6F 75 72 20 
30a8c     64 69 72 65 
30a90     63 74 6F 72 
30a94     79          | 	byte	"More than 128 entries found: clean your directory"
30a95     00          | 	byte	0
30a96                 | LR__5526
30a96     2A          | 	byte	"*"
30a97     00          | 	byte	0
30a98                 | LR__5527
30a98                 | 	byte	
30a98     00          | 	byte	0
30a99                 | LR__5528
30a99     4D 6F 72 65 
30a9d     20 74 68 61 
30aa1     6E 20 31 32 
30aa5     38 20 65 6E 
30aa9     74 72 69 65 
30aad     73 20 66 6F 
30ab1     75 6E 64 3A 
30ab5     20 63 6C 65 
30ab9     61 6E 20 79 
30abd     6F 75 72 20 
30ac1     64 69 72 65 
30ac5     63 74 6F 72 
30ac9     79          | 	byte	"More than 128 entries found: clean your directory"
30aca     00          | 	byte	0
30acb                 | LR__5529
30acb     2F          | 	byte	"/"
30acc     00          | 	byte	0
30acd                 | LR__5530
30acd     2F 73 64 2F 
30ad1     62 69 6E 2F | 	byte	"/sd/bin/"
30ad5     00          | 	byte	0
30ad6                 | LR__5531
30ad6     53 79 73 74 
30ada     65 6D 20 65 
30ade     72 72 6F 72 
30ae2     20          | 	byte	"System error "
30ae3     00          | 	byte	0
30ae4                 | LR__5532
30ae4     3A 20       | 	byte	": "
30ae6     00          | 	byte	0
30ae7                 | LR__5533
30ae7                 | 	byte	
30ae7     00          | 	byte	0
30ae8                 | LR__5534
30ae8     45 78 70 65 
30aec     63 74 65 64 
30af0     20 6E 75 6D 
30af4     62 65 72 2C 
30af8     20 67 6F 74 
30afc     20 73 6F 6D 
30b00     65 74 68 69 
30b04     6E 67 20 65 
30b08     6C 73 65 2E | 	byte	"Expected number, got something else."
30b0c     00          | 	byte	0
30b0d                 | LR__5535
30b0d     43 61 6E 6E 
30b11     6F 74 20 61 
30b15     64 64 20 61 
30b19     20 6E 75 6D 
30b1d     62 65 72 20 
30b21     74 6F 20 61 
30b25     20 73 74 72 
30b29     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30b2d     00          | 	byte	0
30b2e                 | LR__5536
30b2e     43 61 6E 6E 
30b32     6F 74 20 73 
30b36     75 62 73 74 
30b3a     72 61 63 74 
30b3e     20 73 74 72 
30b42     69 6E 67 73 
30b46     2E          | 	byte	"Cannot substract strings."
30b47     00          | 	byte	0
30b48                 | LR__5537
30b48     55 6E 6B 6E 
30b4c     6F 77 6E 20 
30b50     65 72 72 6F 
30b54     72 20 77 68 
30b58     69 6C 65 20 
30b5c     61 64 64 69 
30b60     6E 67 2E    | 	byte	"Unknown error while adding."
30b63     00          | 	byte	0
30b64                 | LR__5538
30b64     55 6E 6B 6E 
30b68     6F 77 6E 20 
30b6c     65 72 72 6F 
30b70     72 20 77 68 
30b74     69 6C 65 20 
30b78     73 75 62 73 
30b7c     74 72 61 63 
30b80     74 69 6E 67 
30b84     2E          | 	byte	"Unknown error while substracting."
30b85     00          | 	byte	0
30b86                 | LR__5539
30b86     43 61 6E 6E 
30b8a     6F 74 20 64 
30b8e     6F 20 6C 6F 
30b92     67 69 63 20 
30b96     6F 70 65 72 
30b9a     61 74 69 6F 
30b9e     6E 20 6F 6E 
30ba2     20 73 74 72 
30ba6     69 6E 67 20 
30baa     6F 72 20 66 
30bae     6C 6F 61 74 
30bb2     2E          | 	byte	"Cannot do logic operation on string or float."
30bb3     00          | 	byte	0
30bb4                 | LR__5540
30bb4     55 6E 6B 6E 
30bb8     6F 77 6E 20 
30bbc     65 72 72 6F 
30bc0     72 20 77 68 
30bc4     69 6C 65 20 
30bc8     64 6F 69 6E 
30bcc     67 20 6C 6F 
30bd0     67 69 63 20 
30bd4     6F 70 65 72 
30bd8     61 74 69 6F 
30bdc     6E 2E       | 	byte	"Unknown error while doing logic operation."
30bde     00          | 	byte	0
30bdf                 | LR__5541
30bdf     43 61 6E 6E 
30be3     6F 74 20 6D 
30be7     75 6C 74 69 
30beb     70 6C 79 20 
30bef     73 74 72 69 
30bf3     6E 67 73 2E | 	byte	"Cannot multiply strings."
30bf7     00          | 	byte	0
30bf8                 | LR__5542
30bf8     55 6E 6B 6E 
30bfc     6F 77 6E 20 
30c00     65 72 72 6F 
30c04     72 20 77 68 
30c08     69 6C 65 20 
30c0c     6D 75 6C 74 
30c10     69 70 6C 79 
30c14     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30c18     00          | 	byte	0
30c19                 | LR__5543
30c19     43 61 6E 6E 
30c1d     6F 74 20 64 
30c21     69 76 69 64 
30c25     65 20 73 74 
30c29     72 69 6E 67 
30c2d     73 2E       | 	byte	"Cannot divide strings."
30c2f     00          | 	byte	0
30c30                 | LR__5544
30c30     55 6E 6B 6E 
30c34     6F 77 6E 20 
30c38     65 72 72 6F 
30c3c     72 20 77 68 
30c40     69 6C 65 20 
30c44     64 69 76 69 
30c48     64 69 6E 67 
30c4c     2E          | 	byte	"Unknown error while dividing."
30c4d     00          | 	byte	0
30c4e                 | LR__5545
30c4e     43 61 6E 6E 
30c52     6F 74 20 63 
30c56     6F 6D 70 75 
30c5a     74 65 20 61 
30c5e     20 70 6F 77 
30c62     65 72 20 6F 
30c66     66 20 61 20 
30c6a     73 74 72 69 
30c6e     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30c71     00          | 	byte	0
30c72                 | LR__5546
30c72     55 6E 6B 6E 
30c76     6F 77 6E 20 
30c7a     65 72 72 6F 
30c7e     72 20 77 68 
30c82     69 6C 65 20 
30c86     63 6F 6D 70 
30c8a     75 74 69 6E 
30c8e     67 20 61 20 
30c92     70 6F 77 65 
30c96     72 2E       | 	byte	"Unknown error while computing a power."
30c98     00          | 	byte	0
30c99                 | LR__5547
30c99     52 69 67 68 
30c9d     74 20 70 61 
30ca1     72 65 6E 74 
30ca5     68 65 73 69 
30ca9     73 20 65 78 
30cad     70 65 63 74 
30cb1     65 64 2E    | 	byte	"Right parenthesis expected."
30cb4     00          | 	byte	0
30cb5                 | LR__5548
30cb5     45 78 70 65 
30cb9     63 74 65 64 
30cbd     20 73 74 72 
30cc1     69 6E 67 2E | 	byte	"Expected string."
30cc5     00          | 	byte	0
30cc6                 | LR__5549
30cc6     45 78 70 65 
30cca     63 74 65 64 
30cce     20 66 6C 6F 
30cd2     61 74 2E    | 	byte	"Expected float."
30cd5     00          | 	byte	0
30cd6                 | LR__5550
30cd6     45 78 70 65 
30cda     63 74 65 64 
30cde     20 75 6E 73 
30ce2     69 67 6E 65 
30ce6     64 20 69 6E 
30cea     74 65 67 65 
30cee     72 2E       | 	byte	"Expected unsigned integer."
30cf0     00          | 	byte	0
30cf1                 | LR__5551
30cf1     45 78 70 65 
30cf5     63 74 65 64 
30cf9     20 69 6E 74 
30cfd     65 67 65 72 
30d01     2E          | 	byte	"Expected integer."
30d02     00          | 	byte	0
30d03                 | LR__5552
30d03     4E 6F 20 6D 
30d07     6F 72 65 20 
30d0b     76 61 72 69 
30d0f     61 62 6C 65 
30d13     20 73 6C 6F 
30d17     74 73 2E    | 	byte	"No more variable slots."
30d1a     00          | 	byte	0
30d1b                 | LR__5553
30d1b     56 61 72 69 
30d1f     61 62 6C 65 
30d23     20 6E 6F 74 
30d27     20 66 6F 75 
30d2b     6E 64 2E    | 	byte	"Variable not found."
30d2e     00          | 	byte	0
30d2f                 | LR__5554
30d2f     43 6F 6D 6D 
30d33     61 20 65 78 
30d37     70 65 63 74 
30d3b     65 64 2E    | 	byte	"Comma expected."
30d3e     00          | 	byte	0
30d3f                 | LR__5555
30d3f     43 6F 6D 6D 
30d43     61 20 6F 72 
30d47     20 73 65 6D 
30d4b     69 63 6F 6C 
30d4f     6F 6E 20 65 
30d53     78 70 65 63 
30d57     74 65 64 2E | 	byte	"Comma or semicolon expected."
30d5b     00          | 	byte	0
30d5c                 | LR__5556
30d5c     55 6E 6B 6E 
30d60     6F 77 6E 20 
30d64     63 6F 6D 6D 
30d68     61 6E 64 2E | 	byte	"Unknown command."
30d6c     00          | 	byte	0
30d6d                 | LR__5557
30d6d     53 74 61 63 
30d71     6B 20 75 6E 
30d75     64 65 72 66 
30d79     6C 6F 77 2E | 	byte	"Stack underflow."
30d7d     00          | 	byte	0
30d7e                 | LR__5558
30d7e     43 61 6E 6E 
30d82     6F 74 20 65 
30d86     78 65 63 75 
30d8a     74 65 20 67 
30d8e     6F 74 6F 20 
30d92     6F 72 20 67 
30d96     6F 73 75 62 
30d9a     20 69 6E 20 
30d9e     74 68 65 20 
30da2     69 6D 6D 65 
30da6     64 69 61 74 
30daa     65 20 6D 6F 
30dae     64 65 2E    | 	byte	"Cannot execute goto or gosub in the immediate mode."
30db1     00          | 	byte	0
30db2                 | LR__5559
30db2     43 61 6E 6E 
30db6     6F 74 20 6C 
30dba     6F 61 64 20 
30dbe     66 72 6F 6D 
30dc2     20 74 68 69 
30dc6     73 20 66 69 
30dca     6C 65 2E    | 	byte	"Cannot load from this file."
30dcd     00          | 	byte	0
30dce                 | LR__5560
30dce     54 68 65 20 
30dd2     70 72 6F 67 
30dd6     72 61 6D 20 
30dda     69 73 20 65 
30dde     6D 70 74 79 
30de2     2E          | 	byte	"The program is empty."
30de3     00          | 	byte	0
30de4                 | LR__5561
30de4     49 66 20 61 
30de8     66 74 65 72 
30dec     20 69 66 2E | 	byte	"If after if."
30df0     00          | 	byte	0
30df1                 | LR__5562
30df1     45 6D 70 74 
30df5     79 20 65 78 
30df9     70 72 65 73 
30dfd     73 69 6F 6E 
30e01     2E          | 	byte	"Empty expression."
30e02     00          | 	byte	0
30e03                 | LR__5563
30e03     53 74 72 69 
30e07     6E 67 20 65 
30e0b     78 70 65 63 
30e0f     74 65 64 2E | 	byte	"String expected."
30e13     00          | 	byte	0
30e14                 | LR__5564
30e14     49 6E 74 65 
30e18     72 70 72 65 
30e1c     74 65 72 20 
30e20     69 6E 74 65 
30e24     72 6E 61 6C 
30e28     20 65 72 72 
30e2c     6F 72 2E    | 	byte	"Interpreter internal error."
30e2f     00          | 	byte	0
30e30                 | LR__5565
30e30     45 78 70 65 
30e34     63 74 65 64 
30e38     20 61 73 73 
30e3c     69 67 6E 2E | 	byte	"Expected assign."
30e40     00          | 	byte	0
30e41                 | LR__5566
30e41     45 78 70 65 
30e45     63 74 65 64 
30e49     20 27 74 6F 
30e4d     27 2E       | 	byte	"Expected 'to'."
30e4f     00          | 	byte	0
30e50                 | LR__5567
30e50     45 78 70 65 
30e54     63 74 65 64 
30e58     20 69 6E 74 
30e5c     65 67 65 72 
30e60     20 76 61 72 
30e64     69 61 62 6C 
30e68     65 2E       | 	byte	"Expected integer variable."
30e6a     00          | 	byte	0
30e6b                 | LR__5568
30e6b     55 6E 69 6E 
30e6f     69 74 69 61 
30e73     6C 69 7A 65 
30e77     64 20 76 61 
30e7b     72 69 61 62 
30e7f     6C 65 20 69 
30e83     6E 20 27 6E 
30e87     65 78 74 27 
30e8b     2C 20 75 73 
30e8f     65 20 27 66 
30e93     6F 72 27 20 
30e97     62 65 66 6F 
30e9b     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30e9e     00          | 	byte	0
30e9f                 | LR__5569
30e9f     4E 6F 20 6D 
30ea3     6F 72 65 20 
30ea7     73 6C 6F 74 
30eab     73 20 66 6F 
30eaf     72 20 27 66 
30eb3     6F 72 27 2E | 	byte	"No more slots for 'for'."
30eb7     00          | 	byte	0
30eb8                 | LR__5570
30eb8     27 4E 65 78 
30ebc     74 27 20 64 
30ec0     6F 65 73 6E 
30ec4     27 74 20 6D 
30ec8     61 74 63 68 
30ecc     20 27 66 6F 
30ed0     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30ed3     00          | 	byte	0
30ed4                 | LR__5571
30ed4     27 47 6F 74 
30ed8     6F 27 20 74 
30edc     61 72 67 65 
30ee0     74 20 6C 69 
30ee4     6E 65 20 6E 
30ee8     6F 74 20 66 
30eec     6F 75 6E 64 
30ef0     2E          | 	byte	"'Goto' target line not found."
30ef1     00          | 	byte	0
30ef2                 | LR__5572
30ef2     42 61 64 20 
30ef6     6E 75 6D 62 
30efa     65 72 20 6F 
30efe     66 20 70 61 
30f02     72 61 6D 65 
30f06     74 65 72 73 | 	byte	"Bad number of parameters"
30f0a     00          | 	byte	0
30f0b                 | LR__5573
30f0b     46 75 6E 63 
30f0f     74 69 6F 6E 
30f13     20 75 6E 64 
30f17     65 66 69 6E 
30f1b     65 64 20 66 
30f1f     6F 72 20 73 
30f23     74 72 69 6E 
30f27     67 73       | 	byte	"Function undefined for strings"
30f29     00          | 	byte	0
30f2a                 | LR__5574
30f2a     42 61 64 20 
30f2e     70 61 72 61 
30f32     6D 65 74 65 
30f36     72 2E       | 	byte	"Bad parameter."
30f38     00          | 	byte	0
30f39                 | LR__5575
30f39     43 61 6E 6E 
30f3d     6F 74 20 64 
30f41     65 63 6C 61 
30f45     72 65 20 61 
30f49     6E 20 61 72 
30f4d     72 61 79 3A 
30f51     20 74 68 65 
30f55     20 76 61 72 
30f59     69 61 62 6C 
30f5d     65 20 65 78 
30f61     69 73 74 73 
30f65     2E          | 	byte	"Cannot declare an array: the variable exists."
30f66     00          | 	byte	0
30f67                 | LR__5576
30f67     45 78 70 65 
30f6b     63 74 65 64 
30f6f     20 27 28 27 
30f73     2E          | 	byte	"Expected '('."
30f74     00          | 	byte	0
30f75                 | LR__5577
30f75     45 78 70 65 
30f79     63 74 65 64 
30f7d     20 27 29 27 
30f81     20 6F 72 20 
30f85     27 2C 27 2E | 	byte	"Expected ')' or ','."
30f89     00          | 	byte	0
30f8a                 | LR__5578
30f8a     4E 6F 20 6D 
30f8e     6F 72 65 20 
30f92     74 68 61 6E 
30f96     20 33 20 64 
30f9a     69 6D 65 6E 
30f9e     73 69 6F 6E 
30fa2     73 20 73 75 
30fa6     70 70 6F 72 
30faa     74 65 64    | 	byte	"No more than 3 dimensions supported"
30fad     00          | 	byte	0
30fae                 | LR__5579
30fae     56 61 72 69 
30fb2     61 62 6C 65 
30fb6     20 6E 61 6D 
30fba     65 20 65 78 
30fbe     70 65 63 74 
30fc2     65 64       | 	byte	"Variable name expected"
30fc4     00          | 	byte	0
30fc5                 | LR__5580
30fc5     54 79 70 65 
30fc9     20 6E 61 6D 
30fcd     65 20 65 78 
30fd1     70 65 63 74 
30fd5     65 64       | 	byte	"Type name expected"
30fd7     00          | 	byte	0
30fd8                 | LR__5581
30fd8     54 79 70 65 
30fdc     20 6E 6F 74 
30fe0     20 73 75 70 
30fe4     70 6F 72 74 
30fe8     65 64 20 79 
30fec     65 74       | 	byte	"Type not supported yet"
30fee     00          | 	byte	0
30fef                 | LR__5582
30fef     41 72 72 61 
30ff3     79 20 69 6E 
30ff7     64 65 78 20 
30ffb     6F 75 74 20 
30fff     6F 66 20 72 
31003     61 6E 67 65 | 	byte	"Array index out of range"
31007     00          | 	byte	0
31008                 | LR__5583
31008     42 61 64 20 
3100c     74 79 70 65 
31010     20 77 68 69 
31014     6C 65 20 61 
31018     73 73 69 67 
3101c     6E 69 6E 67 
31020     20 74 6F 20 
31024     61 72 72 61 
31028     79          | 	byte	"Bad type while assigning to array"
31029     00          | 	byte	0
3102a                 | LR__5584
3102a     54 6F 6F 20 
3102e     6D 61 6E 79 
31032     20 76 61 72 
31036     69 61 62 6C 
3103a     65 73       | 	byte	"Too many variables"
3103c     00          | 	byte	0
3103d                 | LR__5585
3103d     27 54 68 65 
31041     6E 27 20 65 
31045     78 70 65 63 
31049     74 65 64    | 	byte	"'Then' expected"
3104c     00          | 	byte	0
3104d                 | LR__5586
3104d     45 72 72 6F 
31051     72 20       | 	byte	"Error "
31053     00          | 	byte	0
31054                 | LR__5587
31054     3A 20       | 	byte	": "
31056     00          | 	byte	0
31057                 | LR__5588
31057     2F 73 64    | 	byte	"/sd"
3105a     00          | 	byte	0
3105b                 | LR__5589
3105b     2F 73 64 2F 
3105f     62 61 73    | 	byte	"/sd/bas"
31062     00          | 	byte	0
31063                 | LR__5590
31063     2F 73 64 2F 
31067     62 61 73    | 	byte	"/sd/bas"
3106a     00          | 	byte	0
3106b                 | LR__5591
3106b     20 42 41 53 
3106f     49 43 20 62 
31073     79 74 65 73 
31077     20 66 72 65 
3107b     65          | 	byte	" BASIC bytes free"
3107c     00          | 	byte	0
3107d                 | LR__5592
3107d     52 65 61 64 
31081     79          | 	byte	"Ready"
31082     00          | 	byte	0
31083                 | LR__5593
31083     6E 6F 6E 61 
31087     6D 65 2E 62 
3108b     61 73       | 	byte	"noname.bas"
3108d     00          | 	byte	0
3108e                 | LR__5594
3108e                 | 	byte	
3108e     00          | 	byte	0
3108f     00          | 	alignl
31090                 | _dat_
31090     00 00 00 00 
31094     00 00 00 00 
31098     00 00 00 00 
3109c     00 00 00 00 | 	byte	$00[16]
310a0     61 41 17 0E 
310a4     62 42 00 00 
310a8     63 43 19 10 
310ac     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
310b0     65 45 18 0F 
310b4     66 46 00 00 
310b8     67 47 00 00 
310bc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
310c0     69 49 00 00 
310c4     6A 4A 00 00 
310c8     6B 4B 00 00 
310cc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
310d0     6D 4D 00 00 
310d4     6E 4E 1A 11 
310d8     6F 4F 1E 15 
310dc     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
310e0     71 51 00 00 
310e4     72 52 00 00 
310e8     73 53 1B 12 
310ec     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
310f0     75 55 00 00 
310f4     76 56 00 00 
310f8     77 57 00 00 
310fc     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
31100     79 59 00 00 
31104     7A 5A 1D 14 
31108     31 21 04 00 
3110c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
31110     33 23 06 00 
31114     34 24 07 00 
31118     35 25 08 00 
3111c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
31120     37 26 0A 00 
31124     38 2A 0B 00 
31128     39 28 0C 00 
3112c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
31130     8D 8D 00 00 
31134     9B 9B 00 00 
31138     88 88 00 00 
3113c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
31140     20 20 00 00 
31144     2D 5F 00 00 
31148     3D 2B 00 00 
3114c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
31150     5D 7D 00 00 
31154     5C 7C 00 00 
31158     23 7E 00 00 
3115c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
31160     27 22 00 00 
31164     60 7E 03 00 
31168     2C 3C 00 00 
3116c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
31170     2F 3F 00 00 
31174     B9 B9 00 00 
31178     BA 00 00 00 
3117c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
31180     BC 00 00 00 
31184     BD 00 00 00 
31188     BE 00 00 00 
3118c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
31190     C0 00 00 00 
31194     C1 00 00 00 
31198     C2 00 00 00 
3119c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
311a0     C4 00 00 00 
311a4     C5 00 00 00 
311a8     C6 00 00 00 
311ac     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
311b0     C8 00 00 00 
311b4     C9 00 00 00 
311b8     CA 00 00 00 
311bc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
311c0     7F 7F 00 00 
311c4     CC 00 00 00 
311c8     CD 00 00 00 
311cc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
311d0     CF 00 00 00 
311d4     D0 00 00 00 
311d8     D1 00 00 00 
311dc     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
311e0     2F 2F 00 00 
311e4     2A 2A 00 00 
311e8     2D 2D 00 00 
311ec     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
311f0     8D 8D 00 00 
311f4     31 31 00 00 
311f8     32 32 00 00 
311fc     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
31200     34 34 00 00 
31204     35 35 00 00 
31208     36 36 00 00 
3120c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
31210     38 38 00 00 
31214     39 39 00 00 
31218     30 30 00 00 
3121c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
31220     5C 7C 00 00 
31224     00 00 00 00 
31228     00 00 00 00 
3122c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
31230     00 00 00 00 
      ...             
31288     00 00 00 00 
3128c     00 00 00 00 | 	byte	$00[96]
31290     2B 00 A6 F2 
31294     24 A7 09 80 
31298     5B 88 4D 89 
3129c     80 88 A5 88 | atari_spl file "atari.spl"
312a0     6D 88 B8 88 
312a4     80 88 CB 88 
312a8     92 88 A5 88 
312ac     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
312b0     A5 88 CA 88 
312b4     A6 88 DD 88 
312b8     B8 88 AB 89 
312bc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
312c0     C8 AD C6 F1 
312c4     91 06 B6 FF 
312c8     13 00 4A 00 
312cc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
312d0     5D 00 5E 00 
312d4     5D 00 5E 00 
312d8     5E 00 5D 00 
312dc     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
312e0     38 00 83 00 
312e4     25 00 83 00 
312e8     C3 FE D1 04 
312ec     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
312f0     48 88 38 85 
312f4     41 8A CB 88 
312f8     28 89 B8 88 
312fc     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
31300     15 89 03 89 
31304     02 89 15 89 
31308     16 89 15 89 
3130c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
31310     15 89 3A 89 
31314     72 89 E3 89 
31318     52 83 AD 97 
3131c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
31320     0C 02 B6 FF 
31324     E1 00 A8 00 
31328     F3 00 A8 00 
3132c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
31330     CE 00 CD 00 
31334     CD 00 BA 00 
31338     E1 00 BB 00 
3133c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
31340     DF 00 C9 FF 
31344     E6 01 B6 06 
31348     EE DD 8D 98 
3134c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
31350     97 89 73 89 
31354     3B 89 60 89 
31358     60 89 60 89 
3135c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
31360     73 89 72 89 
31364     85 89 73 89 
31368     AA 89 60 89 
3136c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
31370     E8 8A 18 86 
31374     92 88 A5 C2 
31378     E0 00 C3 05 
3137c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
31380     F2 00 64 01 
31384     06 01 3E 01 
31388     2B 01 2B 01 
3138c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
31390     2B 01 2A 01 
31394     2B 01 2B 01 
31398     2B 01 18 01 
3139c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
313a0     39 07 61 F3 
313a4     C0 AF 37 85 
313a8     0F 88 8B 8A 
313ac     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
313b0     AB 89 D0 89 
313b4     AB 89 D0 89 
313b8     D0 89 CF 89 
313bc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
313c0     D0 89 F5 89 
313c4     BD 89 08 8A 
313c8     CF 89 E8 8A 
313cc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
313d0     53 B3 0D F8 
313d4     F4 07 38 00 
313d8     63 01 63 01 
313dc     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
313e0     88 01 88 01 
313e4     76 01 88 01 
313e8     88 01 89 01 
313ec     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
313f0     75 01 AE 01 
313f4     76 01 88 01 
313f8     4A 00 46 06 
313fc     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
31400     08 8A 9A 86 
31404     33 8B 08 8A 
31408     2D 8A F5 89 
3140c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
31410     2D 8A 2D 8A 
31414     2E 8A 1B 8A 
31418     40 8A 2D 8A 
3141c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
31420     2E 8A 79 8A 
31424     66 8A C8 8B 
31428     72 82 2B 97 
3142c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
31430     1D 02 05 01 
31434     F8 01 C0 01 
31438     0B 02 C0 01 
3143c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
31440     F9 01 D3 01 
31444     F8 01 D3 01 
31448     F8 01 D2 01 
3144c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
31450     E6 01 2B 01 
31454     8E 02 5F 07 
31458     F7 E2 ED 9C 
3145c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
31460     E8 8A 78 8A 
31464     78 8A 65 8A 
31468     8B 8A 78 8A 
3146c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
31470     8B 8A 9D 8A 
31474     9D 8A 8B 8A 
31478     C2 8A 78 8A 
3147c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
31480     70 8C 18 86 
31484     8B 8A 23 C9 
31488     CB 03 C4 05 
3148c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
31490     0B 02 7B 02 
31494     1E 02 55 02 
31498     30 02 43 02 
3149c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
314a0     43 02 44 02 
314a4     43 02 30 02 
314a8     68 02 31 02 
314ac     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
314b0     07 08 3F F7 
314b4     73 B2 13 85 
314b8     15 89 ED 8B 
314bc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
314c0     B0 8A FB 8A 
314c4     D5 8A FA 8A 
314c8     E8 8A FB 8A 
314cc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
314d0     E8 8A 21 8B 
314d4     E7 8A 33 8B 
314d8     E8 8A 26 8C 
314dc     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
314e0     8D B0 27 F6 
314e4     9C 08 AD 01 
314e8     7B 02 8D 02 
314ec     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
314f0     A1 02 A0 02 
314f4     A1 02 A0 02 
314f8     A0 02 A0 02 
314fc     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
31500     7B 02 D8 02 
31504     7B 02 C6 02 
31508     3E 01 C3 05 
3150c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
31510     00 8C 2A 86 
31514     E0 8C FA 8A 
31518     6A 8B FB 8A 
3151c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
31520     45 8B 45 8B 
31524     45 8B 6B 8B 
31528     46 8B 59 8B 
3152c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
31530     6B 8B 6B 8B 
31534     6B 8B 6B 8B 
31538     7D 8B 7D 8B 
3153c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
31540     90 8B 91 8B 
31544     90 8B 90 8B 
31548     A3 8B A3 8B 
3154c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
31550     B5 8B B6 8B 
31554     B5 8B B5 8B 
31558     B6 8B C8 8B 
3155c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
31560     C8 8B DA 8B 
31564     DB 8B DB 8B 
31568     DB 8B DC 8B 
3156c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
31570     EE 8B EE 8B 
31574     00 8C 01 8C 
31578     00 8C 01 8C 
3157c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
31580     12 8C 13 8C 
31584     13 8C 26 8C 
31588     26 8C 26 8C 
3158c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
31590     38 8C 38 8C 
31594     38 8C 38 8C 
31598     4B 8C 4B 8C 
3159c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
315a0     5E 8C 5E 8C 
315a4     5E 8C 5E 8C 
315a8     70 8C 70 8C 
315ac     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
315b0     70 8C 83 8C 
315b4     83 8C 83 8C 
315b8     83 8C 96 8C 
315bc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
315c0     95 8C A9 8C 
315c4     A9 8C A8 8C 
315c8     A8 8C A8 8C 
315cc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
315d0     BB 8C BB 8C 
315d4     BB 8C CE 8C 
315d8     CE 8C CE 8C 
315dc     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
315e0     E0 8C E1 8C 
315e4     E1 8C E0 8C 
315e8     F4 8C F2 8C 
315ec     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
315f0     05 8D 05 8D 
315f4     06 8D 06 8D 
315f8     19 8D 19 8D 
315fc     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
31600     18 8D 2B 8D 
31604     2B 8D 2B 8D 
31608     2A 8D 3E 8D 
3160c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
31610     3E 8D 51 8D 
31614     50 8D 50 8D 
31618     50 8D 51 8D 
3161c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
31620     63 8D 64 8D 
31624     76 8D 75 8D 
31628     75 8D 76 8D 
3162c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
31630     88 8D 88 8D 
31634     89 8D 9B 8D 
31638     9A 8D 9B 8D 
3163c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
31640     AD 8D AE 8D 
31644     AD 8D AE 8D 
31648     C1 8D C1 8D 
3164c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
31650     D3 8D D3 8D 
31654     D3 8D D3 8D 
31658     D3 8D E6 8D 
3165c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
31660     E6 8D E6 8D 
31664     F9 8D F9 8D 
31668     F9 8D F8 8D 
3166c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
31670     0B 8E 0B 8E 
31674     1D 8E 1D 8E 
31678     1E 8E 1E 8E 
3167c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
31680     31 8E 31 8E 
31684     31 8E 42 8E 
31688     43 8E 43 8E 
3168c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
31690     56 8E 56 8E 
31694     55 8E 56 8E 
31698     68 8E 69 8E 
3169c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
316a0     69 8E 7B 8E 
316a4     7C 8E 7B 8E 
316a8     7B 8E 8D 8E 
316ac     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
316b0     8D 8E A1 8E 
316b4     A0 8E A1 8E 
316b8     A1 8E A0 8E 
316bc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
316c0     B3 8E B3 8E 
316c4     C6 8E C5 8E 
316c8     C6 8E C6 8E 
316cc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
316d0     D8 8E D9 8E 
316d4     D8 8E EC 8E 
316d8     EB 8E EC 8E 
316dc     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
316e0     FE 8E FE 8E 
316e4     FE 8E FE 8E 
316e8     10 8F 10 8F 
316ec     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
316f0     11 8F 23 8F 
316f4     24 8F 23 8F 
316f8     24 8F 37 8F 
316fc     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
31700     36 8F 36 8F 
31704     48 8F 49 8F 
31708     49 8F 49 8F 
3170c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
31710     5B 8F 5C 8F 
31714     5B 8F 6E 8F 
31718     6E 8F 6E 8F 
3171c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
31720     81 8F 81 8F 
31724     81 8F 81 8F 
31728     93 8F 93 8F 
3172c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
31730     93 8F A6 8F 
31734     A6 8F A6 8F 
31738     A6 8F B9 8F 
3173c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
31740     B9 8F B9 8F 
31744     CC 8F CB 8F 
31748     CB 8F CC 8F 
3174c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
31750     DF 8F DE 8F 
31754     DE 8F F1 8F 
31758     F1 8F F1 8F 
3175c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
31760     03 90 04 90 
31764     04 90 04 90 
31768     16 90 17 90 
3176c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
31770     29 90 28 90 
31774     29 90 28 90 
31778     29 90 3C 90 
3177c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
31780     3C 90 4F 90 
31784     4E 90 4E 90 
31788     4E 90 4E 90 
3178c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
31790     61 90 61 90 
31794     73 90 74 90 
31798     74 90 74 90 
3179c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
317a0     87 90 86 90 
317a4     87 90 86 90 
317a8     99 90 99 90 
317ac     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
317b0     AB 90 AB 90 
317b4     AC 90 AB 90 
317b8     AB 90 BF 90 
317bc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
317c0     BE 90 D1 90 
317c4     D0 90 D1 90 
317c8     D1 90 D1 90 
317cc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
317d0     E3 90 E4 90 
317d4     F6 90 F6 90 
317d8     F6 90 F6 90 
317dc     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
317e0     09 91 0A 91 
317e4     0A 91 1C 91 
317e8     1C 91 1C 91 
317ec     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
317f0     2F 91 2E 91 
317f4     2F 91 2F 91 
317f8     2E 91 41 91 
317fc     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
31800     41 91 53 91 
31804     54 91 54 91 
31808     53 91 54 91 
3180c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
31810     67 91 67 91 
31814     79 91 7A 91 
31818     79 91 78 91 
3181c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
31820     8C 91 8B 91 
31824     8C 91 8C 91 
31828     9E 91 9E 91 
3182c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
31830     B1 91 B1 91 
31834     B2 91 B1 91 
31838     B1 91 C4 91 
3183c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
31840     C4 91 D6 91 
31844     D7 91 D7 91 
31848     D7 91 D6 91 
3184c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
31850     EA 91 EA 91 
31854     EA 91 FC 91 
31858     FC 91 FB 91 
3185c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
31860     0E 92 0F 92 
31864     0F 92 0E 92 
31868     21 92 21 92 
3186c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
31870     21 92 34 92 
31874     33 92 34 92 
31878     34 92 47 92 
3187c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
31880     46 92 47 92 
31884     59 92 59 92 
31888     59 92 59 92 
3188c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
31890     6C 92 6C 92 
31894     6B 92 7E 92 
31898     7E 92 7E 92 
3189c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
318a0     92 92 91 92 
318a4     91 92 90 92 
318a8     91 92 A4 92 
318ac     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
318b0     A3 92 B6 92 
318b4     B6 92 B7 92 
318b8     B7 92 B6 92 
318bc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
318c0     CA 92 C9 92 
318c4     CA 92 DC 92 
318c8     DC 92 DC 92 
318cc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
318d0     EF 92 EF 92 
318d4     EF 92 EF 92 
318d8     01 93 01 93 
318dc     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
318e0     15 93 14 93 
318e4     14 93 14 93 
318e8     14 93 27 93 
318ec     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
318f0     27 93 39 93 
318f4     3A 93 39 93 
318f8     39 93 39 93 
318fc     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
31900     4B 93 4C 93 
31904     5F 93 5F 93 
31908     5F 93 5E 93 
3190c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
31910     5F 93 84 93 
31914     4C 93 96 93 
31918     5F 93 AE 94 
3191c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
31920     7B C1 00 00 
31924     00 00 00 00 
31928     00 00 00 00 
3192c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31930     00 00 00 00 | 	byte	$00, $00, $00, $00
31934     00 00 00 00 | zero long 0
31938     7A D7 00 80 
3193c     87 8A 48 8F 
31940     EC 8C 76 8D 
31944     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31948     3C 8D 82 8D 
3194c     42 8D 88 8D 
31950     8C 8D 8E 8D 
31954     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31958     97 8D DE 8D 
3195c     E1 8D F1 8E 
31960     D8 8C A3 83 
31964     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
31968     65 71 C9 65 
3196c     FC 64 C4 65 
31970     C1 65 BF 65 
31974     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31978     B6 65 B4 65 
3197c     B2 65 AE 65 
31980     AC 65 ED 65 
31984     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31988     5E 65 25 66 
3198c     FA 62 23 6B 
31990     B5 6C 61 0A 
31994     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
31998     5D 90 BE 8D 
3199c     47 8E C3 8D 
319a0     09 8E C9 8D 
319a4     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
319a8     15 8E 19 8E 
319ac     1B 8E 62 8E 
319b0     64 8E 68 8E 
319b4     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
319b8     B5 8E 4C 90 
319bc     FA 84 3C 9D 
319c0     98 13 79 6D 
319c4     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
319c8     D9 66 50 66 
319cc     D4 66 4B 66 
319d0     8C 66 46 66 
319d4     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
319d8     81 66 3A 66 
319dc     7C 66 36 66 
319e0     76 66 30 66 
319e4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
319e8     6B 66 88 72 
319ec     BF 37 E7 B7 
319f0     75 83 8B 8E 
319f4     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
319f8     94 8E 96 8E 
319fc     DD 8E 9C 8E 
31a00     E2 8E A2 8E 
31a04     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31a08     EE 8E AE 8E 
31a0c     38 8F B5 8E 
31a10     3F 8F FD 8E 
31a14     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31a18     A5 87 1E E3 
31a1c     6D 5D FA 71 
31a20     41 64 25 67 
31a24     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31a28     D9 66 1A 67 
31a2c     18 67 15 67 
31a30     12 67 0F 67 
31a34     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31a38     07 67 C0 66 
31a3c     01 67 BC 66 
31a40     B8 66 DE 64 
31a44     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31a48     43 E5 1F 8B 
31a4c     14 8A F1 90 
31a50     1C 8F 63 8F 
31a54     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31a58     29 8F 6E 8F 
31a5c     72 8F 75 8F 
31a60     34 8F BE 8F 
31a64     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31a68     84 8F 87 8F 
31a6c     CC 8F 56 90 
31a70     67 91 49 80 
31a74     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31a78     46 77 A6 66 
31a7c     E8 66 B0 67 
31a80     AD 67 ED 67 
31a84     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31a88     A2 67 E3 67 
31a8c     9D 67 9A 67 
31a90     98 67 94 67 
31a94     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31a98     49 67 CD 67 
31a9c     28 65 5F 6E 
31aa0     82 67 3A 01 
31aa4     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31aa8     C2 91 A9 8F 
31aac     EF 8F AE 8F 
31ab0     F4 8F B5 8F 
31ab4     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31ab8     01 90 03 90 
31abc     07 90 09 90 
31ac0     0C 90 53 90 
31ac4     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31ac8     18 90 44 93 
31acc     85 84 D6 9D 
31ad0     87 1F 2F 75 
31ad4     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31ad8     C4 68 F6 67 
31adc     BE 68 F1 67 
31ae0     76 68 2E 68 
31ae4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31ae8     27 68 24 68 
31aec     64 68 1E 68 
31af0     5F 68 19 68 
31af4     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31af8     DC 68 56 72 
31afc     7E 36 C2 B8 
31b00     D7 84 73 90 
31b04     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31b08     7B 90 7F 90 
31b0c     82 90 84 90 
31b10     CB 90 8B 90 
31b14     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31b18     D7 90 96 90 
31b1c     20 91 59 90 
31b20     25 91 A2 90 
31b24     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31b28     D0 89 40 EE 
31b2c     12 64 C4 71 
31b30     29 66 0C 69 
31b34     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31b38     C0 68 02 69 
31b3c     FE 68 FB 68 
31b40     F9 68 F6 68 
31b44     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31b48     EE 68 A8 68 
31b4c     2C 69 5F 68 
31b50     E2 68 81 66 
31b54     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31b58     1E EB A6 8A 
31b5c     73 8B 5E 93 
31b60     7B 90 48 91 
31b64     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31b68     0D 91 11 91 
31b6c     14 91 16 91 
31b70     5C 91 1C 91 
31b74     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31b78     68 91 AF 91 
31b7c     2A 91 B5 91 
31b80     75 91 1A 94 
31b84     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31b88     70 0E CB 6C 
31b8c     5D 6E C4 67 
31b90     99 69 54 69 
31b94     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31b98     D2 69 49 69 
31b9c     89 69 86 69 
31ba0     40 69 C4 69 
31ba4     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31ba8     35 69 76 69 
31bac     58 67 EB 6D 
31bb0     E9 6D 89 0F 
31bb4     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31bb8     33 94 94 91 
31bbc     D9 91 56 91 
31bc0     E0 91 9F 91 
31bc4     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31bc8     EC 91 EE 91 
31bcc     F1 91 F4 91 
31bd0     F7 91 3D 92 
31bd4     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31bd8     46 92 21 94 
31bdc     11 89 A4 9D 
31be0     FD 0E 8F 6C 
31be4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31be8     28 6A E1 69 
31bec     65 6A 1F 6A 
31bf0     5F 6A 1A 6A 
31bf4     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31bf8     54 6A 0F 6A 
31bfc     4F 6A 09 6A 
31c00     06 6A 03 6A 
31c04     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31c08     23 68 69 77 
31c0c     3A 4D 38 CA 
31c10     38 86 4E 91 
31c14     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31c18     64 92 24 92 
31c1c     6A 92 2A 92 
31c20     70 92 30 92 
31c24     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31c28     7B 92 7E 92 
31c2c     C5 92 84 92 
31c30     CB 92 8A 92 
31c34     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31c38     4D 8D F9 E2 
31c3c     97 59 FE 74 
31c40     DB 68 6D 6A 
31c44     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31c48     A8 6A A5 6A 
31c4c     A3 6A 9F 6A 
31c50     9D 6A 9B 6A 
31c54     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31c58     D6 6A 8F 6A 
31c5c     CF 6A 46 6A 
31c60     CA 6A E1 67 
31c64     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31c68     D3 F7 15 92 
31c6c     90 8C BF 94 
31c70     A6 92 EB 92 
31c74     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31c78     B1 92 F7 92 
31c7c     FA 92 FD 92 
31c80     00 93 02 93 
31c84     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31c88     4F 93 52 93 
31c8c     54 93 22 94 
31c90     5A 93 8F 88 
31c94     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31c98     1C 77 07 6C 
31c9c     E8 69 7A 6B 
31ca0     34 6B 75 6B 
31ca4     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31ca8     29 6B 26 6B 
31cac     24 6B 21 6B 
31cb0     1D 6B 5E 6B 
31cb4     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31cb8     12 6B 52 6B 
31cbc     34 69 34 6E 
31cc0     BA 73 A4 24 
31cc4     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31cc8     7A 94 B3 93 
31ccc     72 93 31 93 
31cd0     78 93 7A 93 
31cd4     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31cd8     83 93 86 93 
31cdc     89 93 D0 93 
31ce0     D2 93 D5 93 
31ce4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31ce8     DD 93 40 96 
31cec     30 8B 99 9C 
31cf0     52 10 94 71 
31cf4     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31cf8     46 6C 79 6B 
31cfc     40 6C B7 6B 
31d00     F7 6B B1 6B 
31d04     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31d08     EC 6B A5 6B 
31d0c     A2 6B 9F 6B 
31d10     9D 6B 9A 6B 
31d14     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31d18     C8 6A E4 76 
31d1c     20 4B F9 CE 
31d20     2E 8A 1A 92 
31d24     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31d28     FB 93 BA 93 
31d2c     01 94 03 94 
31d30     4A 94 09 94 
31d34     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31d38     55 94 14 94 
31d3c     9E 94 1A 94 
31d40     61 94 20 94 
31d44     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31d48     3E 87 E5 CD 
31d4c     5F 50 6C 78 
31d50     B5 6A 04 6C 
31d54     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31d58     83 6C 7F 6C 
31d5c     7C 6C 36 6C 
31d60     76 6C 74 6C 
31d64     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31d68     6B 6C 25 6C 
31d6c     66 6C 1F 6C 
31d70     1D 6C 41 6A 
31d74     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31d78     BA FA FC 94 
31d7c     5B 8D 97 96 
31d80     3B 94 C5 94 
31d84     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31d88     89 94 8C 94 
31d8c     8F 94 92 94 
31d90     94 94 DB 94 
31d94     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31d98     E4 94 E7 94 
31d9c     2D 95 74 95 
31da0     C8 96 15 89 
31da4     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31da8     CB 75 31 6F 
31dac     7E 6B 10 6D 
31db0     C9 6C 0A 6D 
31db4     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31db8     BD 6C FF 6C 
31dbc     FB 6C F9 6C 
31dc0     B2 6C F3 6C 
31dc4     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31dc8     A7 6C E8 6C 
31dcc     0D 6B 85 6F 
31dd0     C7 74 10 28 
31dd4     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31dd8     96 96 47 95 
31ddc     06 95 0A 95 
31de0     0C 95 0F 95 
31de4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31de8     17 95 5E 95 
31dec     61 95 63 95 
31df0     22 95 AC 95 
31df4     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31df8     72 95 17 98 
31dfc     59 8E 01 96 
31e00     CF FC 5A 68 
31e04     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31e08     96 6D 50 6D 
31e0c     D5 6D 4A 6D 
31e10     8C 6D 89 6D 
31e14     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31e18     80 6D 3A 6D 
31e1c     7A 6D 77 6D 
31e20     75 6D 71 6D 
31e24     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31e28     18 6C BC 78 
31e2c     9A 4F 7E CF 
31e30     1F 89 F1 93 
31e34     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31e38     D2 95 4E 95 
31e3c     D7 95 53 95 
31e40     DD 95 E0 95 
31e44     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31e48     A5 95 EB 95 
31e4c     EE 95 F0 95 
31e50     37 96 B3 95 
31e54     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31e58     1A 98 D5 8D 
31e5c     C5 9F CD 0F 
31e60     0F 71 F3 73 
31e64     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31e68     D9 6D 5E 6E 
31e6c     D3 6D 58 6E 
31e70     12 6E 0F 6E 
31e74     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31e78     49 6E BF 6D 
31e7c     87 6E 76 6D 
31e80     81 6E 11 6B 
31e84     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31e88     3F 09 44 95 
31e8c     E5 8D 3F 99 
31e90     D4 95 A2 96 
31e94     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31e98     23 96 69 96 
31e9c     6B 96 6E 96 
31ea0     71 96 74 96 
31ea4     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31ea8     BF 96 3C 96 
31eac     C6 96 C8 96 
31eb0     A3 98 51 8D 
31eb4     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31eb8     CF 75 29 73 
31ebc     90 6C EC 6E 
31ec0     62 6E E7 6E 
31ec4     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31ec8     9A 6E 98 6E 
31ecc     95 6E 91 6E 
31ed0     8E 6E CF 6E 
31ed4     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31ed8     40 6E C3 6E 
31edc     E8 6C 45 6F 
31ee0     A5 7B C9 35 
31ee4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31ee8     2D 98 23 97 
31eec     E1 96 A0 96 
31ef0     A4 96 EA 96 
31ef4     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31ef8     AF 96 F4 96 
31efc     F8 96 3E 97 
31f00     FD 96 43 97 
31f04     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31f08     08 97 6B 99 
31f0c     D6 92 88 91 
31f10     D8 EE 84 66 
31f14     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31f18     2E 6F E7 6E 
31f1c     6C 6F 24 6F 
31f20     21 6F 1F 6F 
31f24     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31f28     17 6F 13 6F 
31f2c     54 6F 0E 6F 
31f30     0B 6F 4B 6F 
31f34     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31f38     27 6D 1C 7B 
31f3c     19 59 9F DB 
31f40     66 8E BC 94 
31f44     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31f48     67 97 26 97 
31f4c     6D 97 2B 97 
31f50     72 97 32 97 
31f54     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31f58     C1 97 7F 97 
31f5c     C6 97 85 97 
31f60     CB 97 CE 97 
31f64     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31f68     EC 8A C4 C6 
31f6c     68 4C F4 7D 
31f70     63 6E E8 6E 
31f74     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
31f78     ED 6F A7 6F 
31f7c     E7 6F A0 6F 
31f80     E1 6F 9B 6F 
31f84     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
31f88     D5 6F 8F 6F 
31f8c     CE 6F 45 6F 
31f90     86 6F 68 6D 
31f94     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
31f98     C0 13 AD A2 
31f9c     A7 8E 79 99 
31fa0     E6 97 E8 97 
31fa4     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
31fa8     F1 97 F3 97 
31fac     F6 97 F9 97 
31fb0     FB 97 FE 97 
31fb4     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
31fb8     4A 98 0A 98 
31fbc     93 98 0F 98 
31fc0     7F 9B BF 8C 
31fc4     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
31fc8     91 7B 62 73 
31fcc     1A 6E B9 70 
31fd0     EB 6F B3 70 
31fd4     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
31fd8     25 70 20 70 
31fdc     1E 70 1B 70 
31fe0     18 70 15 70 
31fe4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
31fe8     0D 70 09 70 
31fec     07 70 03 70 
31ff0     01 70 FD 6F 
31ff4     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
31ff8     F6 6F F2 6F 
31ffc     EF 6F EC 6F 
32000     2C 70 E6 6F 
32004     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
32008     DD 6F 97 6F 
3200c     D7 6F 84 6E 
32010     8F 6F 3F 7D 
32014     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
32016     00 00 00 00 | zero1 long 0
3201a     FF FF FF FF 
3201e     FF FF       | atarist_spl file "atarist.spl" '512
32020     00 00 00 00 
32024     00 00 00 00 
32028     00 00       | 	byte	$00[10]
3202a     17 7F F2 7F 
3202e     B2 7F 72 7F 
32032     33 7F F4 7E 
32036     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3203a     36 7E F5 7D 
3203e     E9 51 F2 0D 
32042     8E 00 F3 FD 
32046     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
3204a     57 FD 58 FD 
3204e     5B FD 5C FD 
32052     5C FD 60 7D 
32056     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
3205a     D6 7C 98 7C 
3205e     59 7C 1A 7C 
32062     DC 7B 9E 7B 
32066     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
3206a     F3 05 00 FD 
3206e     41 FB EA FA 
32072     D9 FA DB FA 
32076     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3207a     E4 FA 9B 36 
3207e     F8 7A C0 7A 
32082     84 7A 45 7A 
32086     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3208a     8E 79 51 79 
3208e     15 79 D7 78 
32092     3C 1F EB FF 
32096     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3209a     6D F8 65 F8 
3209e     68 F8 6D F8 
320a2     70 F8 74 F8 
320a6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
320aa     AB 60 79 60 
320ae     4B 60 1A 60 
320b2     E9 5F B9 5F 
320b6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
320ba     FB 59 B2 0B 
320be     92 FA 3A F7 
320c2     96 F6 79 F6 
320c6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
320ca     82 F6 86 F6 
320ce     8C F6 DB 5D 
320d2     F1 5E C1 5E 
320d6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
320da     34 5E 04 5E 
320de     D6 5D A6 5D 
320e2     78 5D D4 3E 
320e6     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
320ea     27 F5 BA F4 
320ee     AB F4 AD F4 
320f2     B2 F4 B8 F4 
320f6     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
320fa     26 5D 2B 5D 
320fe     FC 5C CD 5C 
32102     9F 5C 70 5C 
32106     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3210a     E5 5B B8 5B 
3210e     DB 24 A7 FC 
32112     D1 F4 4D F3 
32116     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3211a     04 F3 0B F3 
3211e     11 F3 16 F3 
32122     DE 18 98 5B 
32126     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3212a     4E 4A 29 48 
3212e     A0 47 6A 47 
32132     43 47 20 47 
32136     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3213a     E2 F6 98 F2 
3213e     C5 F1 A3 F1 
32142     A3 F1 A8 F1 
32146     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3214a     BF F1 00 3D 
3214e     EF 46 CD 46 
32152     AA 46 86 46 
32156     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3215a     1C 46 F9 45 
3215e     D7 45 EE 43 
32162     DE 02 E8 F3 
32166     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3216a     61 F0 65 F0 
3216e     6D F0 74 F0 
32172     7C F0 84 F0 
32176     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3217a     8E 45 6D 45 
3217e     49 45 27 45 
32182     05 45 E1 44 
32186     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3218a     F1 2F A9 FB 
3218e     8B F1 9B EF 
32192     40 EF 36 EF 
32196     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3219a     4D EF 56 EF 
3219e     5E EF 7B 44 
321a2     8C 44 69 44 
321a6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
321aa     03 44 E1 43 
321ae     C0 43 F5 37 
321b2     69 33 0F 11 
321b6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
321ba     66 EE 37 EE 
321be     38 EE 40 EE 
321c2     48 EE 51 EE 
321c6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
321ca     7D 32 6A 32 
321ce     51 32 37 32 
321d2     1F 32 05 32 
321d6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
321da     B9 31 A1 31 
321de     F1 04 F4 F1 
321e2     50 EE A0 ED 
321e6     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
321ea     93 ED 9A ED 
321ee     A4 ED AD ED 
321f2     F4 27 C1 31 
321f6     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
321fa     78 31 5F 31 
321fe     46 31 2E 31 
32202     15 31 FC 30 
32206     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3220a     C4 EF 4A ED 
3220e     DC EC CB EC 
32212     D2 EC DA EC 
32216     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3221a     F9 EC 64 2F 
3221e     0A 31 F1 30 
32222     D9 30 C0 30 
32226     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3222a     78 30 5F 30 
3222e     46 30 38 23 
32232     A6 F6 19 EE 
32236     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3223a     20 EC 28 EC 
3223e     32 EC 3C EC 
32242     47 EC 51 EC 
32246     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3224a     A3 22 93 22 
3224e     7F 22 6E 22 
32252     5D 22 4C 22 
32256     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3225a     77 09 76 F1 
3225e     CC EC F0 EB 
32262     CD EB CE EB 
32266     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3226a     ED EB F5 EB 
3226e     3E F6 6B 22 
32272     5F 22 4E 22 
32276     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3227a     1B 22 0B 22 
3227e     FA 21 E9 21 
32282     D8 21 4D FF 
32286     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3228a     92 EB 7B EB 
3228e     82 EB 8C EB 
32292     97 EB A1 EB 
32296     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3229a     15 22 04 22 
3229e     F3 21 E3 21 
322a2     D2 21 C0 21 
322a6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
322aa     8E 21 7D 21 
322ae     9A F8 A4 ED 
322b2     8E EB 2F EB 
322b6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
322ba     37 EB 42 EB 
322be     4C EB 57 EB 
322c2     B2 17 22 19 
322c6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
322ca     FD 18 EF 18 
322ce     E3 18 D6 18 
322d2     CA 18 BD 18 
322d6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
322da     60 EC 35 EB 
322de     01 EB 01 EB 
322e2     0C EB 16 EB 
322e6     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
322ea     34 EB D0 18 
322ee     00 19 F4 18 
322f2     E8 18 DA 18 
322f6     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
322fa     B6 18 A9 18 
322fe     9D 18 91 05 
32302     F0 EF CA EB 
32306     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3230a     E8 EA F2 EA 
3230e     FE EA 07 EB 
32312     12 EB C2 EF 
32316     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3231a     D9 18 CD 18 
3231e     C0 18 B3 18 
32322     A7 18 9B 18 
32326     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3232a     B8 FC 30 EE 
3232e     61 EB DC EA 
32332     CD EA D2 EA 
32336     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3233a     F3 EA FE EA 
3233e     D2 09 D1 18 
32342     C3 18 17 18 
32346     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3234a     66 11 52 11 
3234e     49 11 41 11 
32352     38 11 E0 F4 
32356     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3235a     C9 EA C5 EA 
3235e     CF EA DB EA 
32362     E6 EA EF EA 
32366     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3236a     89 11 80 11 
3236e     78 11 6E 11 
32372     67 11 5D 11 
32376     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3237a     43 11 32 0D 
3237e     9C F1 07 EC 
32382     F8 EA CD EA 
32386     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3238a     E4 EA ED EA 
3238e     F8 EA 02 EB 
32392     55 11 91 11 
32396     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3239a     75 11 6E 11 
3239e     64 11 5E 11 
323a2     54 11 4A 11 
323a6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
323aa     A8 EB F1 EA 
323ae     D9 EA DC EA 
323b2     E8 EA F1 EA 
323b6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
323ba     A6 EB 9E 11 
323be     A0 11 96 11 
323c2     8D 11 85 11 
323c6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
323ca     6A 11 CA 0D 
323ce     36 0B 57 F8 
323d2     6C ED 57 EB 
323d6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
323da     F4 EA FF EA 
323de     09 EB 15 EB 
323e2     1E EB 1A FD 
323e6     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
323ea     ED 0A E8 0A 
323ee     E2 0A DC 0A 
323f2     D6 0A D1 0A 
323f6     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
323fa     F8 F3 BC EC 
323fe     57 EB 1E EB 
32402     18 EB 24 EB 
32406     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3240a     42 EB 4D EB 
3240e     08 09 20 0B 
32412     1A 0B 14 0B 
32416     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3241a     04 0B FE 0A 
3241e     F9 0A F2 0A 
32422     84 08 3A F1 
32426     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3242a     42 EB 42 EB 
3242e     4E EB 57 EB 
32432     62 EB 6B EB 
32436     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3243a     48 0B 43 0B 
3243e     3C 0B 36 0B 
32442     31 0B 2C 0B 
32446     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3244a     1B 0B 5C 00 
3244e     6A EF 1B EC 
32452     81 EB 6A EB 
32456     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3245a     85 EB 8E EB 
3245e     99 EB A3 EB 
32462     DD 05 E5 05 
32466     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3246a     DB 05 D8 05 
3246e     D5 05 D1 05 
32472     D0 05 CB 05 
32476     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3247a     0C EC BB EB 
3247e     B3 EB BB EB 
32482     C5 EB D0 EB 
32486     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3248a     E4 F7 2C 06 
3248e     28 06 24 06 
32492     22 06 1F 06 
32496     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3249a     16 06 14 06 
3249e     0F 06 D0 F3 
324a2     65 ED 2D EC 
324a6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
324aa     01 EC 0A EC 
324ae     14 EC 1E EC 
324b2     29 EC FB 03 
324b6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
324ba     63 06 60 06 
324be     5E 06 59 06 
324c2     58 06 54 06 
324c6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
324ca     69 F1 21 ED 
324ce     55 EC 33 EC 
324d2     36 EC 40 EC 
324d6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
324da     5C EC 68 EC 
324de     92 02 D9 02 
324e2     D7 02 D7 02 
324e6     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
324ea     D1 02 D1 02 
324ee     CE 02 CD 02 
324f2     5D FC 80 EF 
324f6     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
324fa     83 EC 8A EC 
324fe     93 EC 9C EC 
32502     A5 EC B1 EC 
32506     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3250a     2B 03 2A 03 
3250e     29 03 26 03 
32512     25 03 24 03 
32516     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3251a     1F 03 70 F7 
3251e     D0 EE 27 ED 
32522     DB EC D4 EC 
32526     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3252a     F0 EC FA EC 
3252e     02 ED F9 F4 
32532     7B 03 7C 03 
32536     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3253a     75 03 73 03 
3253e     72 03 70 03 
32542     6D 03 6C 03 
32546     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3254a     54 ED 22 ED 
3254e     22 ED 2C ED 
32552     35 ED 3F ED 
32556     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3255a     14 01 C3 03 
3255e     C1 03 C0 03 
32562     5F 01 A5 00 
32566     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3256a     7B 00 7C 00 
3256e     20 00 85 F1 
32572     2A EE 89 ED 
32576     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3257a     80 ED 87 ED 
3257e     90 ED 9A ED 
32582     A3 ED 73 00 
32586     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3258a     D0 00 D0 00 
3258e     D0 00 D0 00 
32592     D0 00 CF 00 
32596     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3259a     80 F0 3D EE 
3259e     D5 ED C7 ED 
325a2     CD ED D6 ED 
325a6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
325aa     F2 ED FA ED 
325ae     1D 01 29 01 
325b2     27 01 27 01 
325b6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
325ba     25 01 26 01 
325be     26 01 23 01 
325c2     D0 F7 EC EF 
325c6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
325ca     1C EE 24 EE 
325ce     2D EE 37 EE 
325d2     40 EE 47 EE 
325d6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
325da     7D 01 7B 01 
325de     7A 01 7A 01 
325e2     79 01 78 01 
325e6     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
325ea     84 FE DE F3 
325ee     6C EF 93 EE 
325f2     72 EE 72 EE 
325f6     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
325fa     8B EE 95 EE 
325fe     9E EE 15 FC 
32602     67 FE 67 FE 
32606     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3260a     6B FE 6B FE 
3260e     6D FE 6D FE 
32612     6D FE 6F FE 
32616     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3261a     DF EE CC EE 
3261e     CF EE D9 EE 
32622     E1 EE EA EE 
32626     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3262a     5A FE C4 FE 
3262e     C3 FE C5 FE 
32632     C6 FE C6 FE 
32636     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3263a     C8 FE C7 FE 
3263e     DA FB 85 F1 
32642     8D EF 31 EF 
32646     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3264a     34 EF 3E EF 
3264e     46 EF 4F EF 
32652     57 EF 0D FF 
32656     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3265a     1F FF 1F FF 
3265e     21 FF 21 FF 
32662     21 FF 21 FF 
32666     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3266a     15 F1 BE EF 
3266e     84 EF 7E EF 
32672     88 EF 8F EF 
32676     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3267a     A9 EF 06 F2 
3267e     A6 FC AB FC 
32682     AD FC AE FC 
32686     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3268a     B2 FC B4 FC 
3268e     B6 FC B7 FC 
32692     8B F4 BD F0 
32696     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3269a     E4 EF EE EF 
3269e     F6 EF FD EF 
326a2     04 F0 0E F0 
326a6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
326aa     0B FD 0D FD 
326ae     0F FD 11 FD 
326b2     11 FD 13 FD 
326b6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
326ba     17 FD 64 F3 
326be     CD F0 52 F0 
326c2     41 F0 45 F0 
326c6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
326ca     5B F0 64 F0 
326ce     6D F0 FB FC 
326d2     65 FD 68 FD 
326d6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
326da     6C FD 6D FD 
326de     6F FD 70 FD 
326e2     72 FD B3 FB 
326e6     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
326ea     A4 F0 99 F0 
326ee     A0 F0 A8 F0 
326f2     AE F0 B9 F0 
326f6     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
326fa     CB FB DD FB 
326fe     DE FB E0 FB 
32702     E3 FB E3 FB 
32706     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3270a     E9 FB EC FB 
3270e     62 F7 27 F2 
32712     2A F1 FF F0 
32716     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3271a     0C F1 13 F1 
3271e     1B F1 23 F1 
32722     33 F2 3C FC 
32726     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3272a     42 FC 45 FC 
3272e     47 FC 48 FC 
32732     4A FC 4C FC 
32736     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3273a     20 F2 77 F1 
3273e     5C F1 5F F1 
32742     64 F1 6C F1 
32746     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3274a     83 F1 DC F8 
3274e     9A FC 9A FC 
32752     9B FC 9E FC 
32756     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3275a     A3 FC A4 FC 
3275e     A6 FC A9 FC 
32762     90 F4 33 F2 
32766     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3276a     BA F1 BF F1 
3276e     C7 F1 CE F1 
32772     D6 F1 DC F1 
32776     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3277a     F3 FC F5 FC 
3277e     FE FB 79 FB 
32782     62 FB 5F FB 
32786     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3278a     6F FA AF F3 
3278e     53 F2 12 F2 
32792     0F F2 15 F2 
32796     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3279a     2A F2 32 F2 
3279e     38 F2 9A FB 
327a2     AF FB B1 FB 
327a6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
327aa     B7 FB B8 FB 
327ae     BA FB BC FB 
327b2     C1 FB 3B F8 
327b6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
327ba     6E F2 6C F2 
327be     74 F2 7A F2 
327c2     81 F2 87 F2 
327c6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
327ca     06 FC 09 FC 
327ce     0C FC 0E FC 
327d2     0F FC 12 FC 
327d6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
327da     17 FC 1A FC 
327de     B2 F6 7B F3 
327e2     DD F2 C5 F2 
327e6     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
327ea     D4 F2 DB F2 
327ee     E0 F2 E8 F2 
327f2     28 F8 60 FC 
327f6     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
327fa     64 FC 66 FC 
327fe     68 FC 6A FC 
32802     6D FC 52 FC 
32806     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3280a     78 F3 24 F3 
3280e     1A F3 1E F3 
32812     24 F3 2A F3 
32816     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3281a     3D F3 80 FA 
3281e     0C FB 0F FB 
32822     10 FB 14 FB 
32826     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3282a     1B FB 1D FB 
3282e     1F FB 92 FA 
32832     DE F4 AE F3 
32836     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3283a     79 F3 7E F3 
3283e     84 F3 8C F3 
32842     92 F3 97 F3 
32846     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3284a     67 FB 69 FB 
3284e     6B FB 6F FB 
32852     71 FB 72 FB 
32856     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3285a     E3 F8 BA F4 
3285e     EE F3 CC F3 
32862     CA F3 CF F3 
32866     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3286a     E2 F3 E8 F3 
3286e     ED F3 B7 FB 
32872     BC FB BE FB 
32876     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3287a     C4 FB C6 FB 
3287e     C8 FB C9 FB 
32882     CC FB 8F F7 
32886     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3288a     1E F4 1E F4 
3288e     24 F4 2A F4 
32892     30 F4 38 F4 
32896     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3289a     AD FA B1 FA 
3289e     B4 FA B6 FA 
328a2     BA FA BB FA 
328a6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
328aa     C2 FA C6 FA 
328ae     55 F6 C6 F4 
328b2     7D F4 72 F4 
328b6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
328ba     83 F4 89 F4 
328be     8F F4 94 F4 
328c2     66 FA 03 FB 
328c6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
328ca     0A FB 0E FB 
328ce     10 FB 11 FB 
328d2     16 FB 18 FB 
328d6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
328da     F9 F4 CA F4 
328de     C5 F4 CB F4 
328e2     D1 F4 D7 F4 
328e6     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
328ea     E8 F4 3F FB 
328ee     56 FB 58 FB 
328f2     5A FB 5E FB 
328f6     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
328fa     64 FB 64 FB 
328fe     69 FB 99 F9 
32902     E9 F5 33 F5 
32906     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3290a     1D F5 22 F5 
3290e     27 F5 2E F5 
32912     32 F5 37 F5 
32916     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3291a     BC FA BC FA 
3291e     C1 FA C2 FA 
32922     C4 FA C8 FA 
32926     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3292a     F9 F7 DB F5 
3292e     78 F5 69 F5 
32932     6A F5 70 F5 
32936     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3293a     7F F5 85 F5 
3293e     6E F7 06 FB 
32942     0A FB 0B FB 
32946     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3294a     14 FB 15 FB 
3294e     18 FB 1B FB 
32952     1D FB 70 F7 
32956     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3295a     B6 F5 BB F5 
3295e     C0 F5 C6 F5 
32962     CA F5 CF F5 
32966     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3296a     54 FB 56 FB 
3296e     5A FB 5B FB 
32972     5E FB 5F FB 
32976     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3297a     67 FB 52 FB 
3297e     29 F7 33 F6 
32982     06 F6 02 F6 
32986     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3298a     10 F6 16 F6 
3298e     1A F6 1F F6 
32992     81 FB 9F FB 
32996     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3299a     51 FB F2 FA 
3299e     E3 FA E3 FA 
329a2     E5 FA E9 FA 
329a6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
329aa     64 F6 4D F6 
329ae     4D F6 53 F6 
329b2     57 F6 5C F6 
329b6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
329ba     6A F6 19 FB 
329be     1E FB 22 FB 
329c2     23 FB 24 FB 
329c6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
329ca     2C FB 2E FB 
329ce     32 FB F0 F8 
329d2     01 F7 A5 F6 
329d6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
329da     9F F6 A3 F6 
329de     A6 F6 AC F6 
329e2     B0 F6 EB F7 
329e6     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
329ea     68 FB 6C FB 
329ee     6E FB 71 FB 
329f2     72 FB 74 FB 
329f6     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
329fa     71 F8 21 F7 
329fe     E5 F6 DD F6 
32a02     E1 F6 E6 F6 
32a06     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32a0a     F5 F6 F7 F6 
32a0e     F7 FA AB FB 
32a12     AD FB AF FB 
32a16     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32a1a     B6 FB B9 FB 
32a1e     BB FB BC FB 
32a22     21 FB 07 F8 
32a26     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32a2a     22 F7 26 F7 
32a2e     2B F7 2E F7 
32a32     34 F7 38 F7 
32a36     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32a3a     13 FB 16 FB 
32a3e     17 FB 1B FB 
32a42     1E FB 20 FB 
32a46     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
32a4a     26 FB 77 FA 
32a4e     F3 F7 7C F7 
32a52     67 F7 6A F7 
32a56     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
32a5a     74 F7 7A F7 
32a5e     7E F7 82 F7 
32a62     53 FB 5A FB 
32a66     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
32a6a     5F FB 63 FB 
32a6e     65 FB 67 FB 
32a72     69 FB 6A FB 
32a76     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32a7a     B5 F7 A9 F7 
32a7e     AD F7 B0 F7 
32a82     B5 F7 B8 F7 
32a86     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32a8a     6E F8 99 FB 
32a8e     9C FB 9D FB 
32a92     9F FB A4 FB 
32a96     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32a9a     A9 FB AB FB 
32a9e     AD FB 46 F9 
32aa2     26 F8 F0 F7 
32aa6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32aaa     F4 F7 F8 F7 
32aae     FB F7 FF F7 
32ab2     03 F8 65 FA 
32ab6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32aba     2B FB 2F FB 
32abe     30 FB 32 FB 
32ac2     34 FB 38 FB 
32ac6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32aca     E9 F8 4A F8 
32ace     2E F8 2C F8 
32ad2     2F F8 36 F8 
32ad6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32ada     41 F8 44 F8 
32ade     4A FB 67 FB 
32ae2     68 FB 6B FB 
32ae6     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32aea     73 FB 74 FB 
32aee     78 FB 7A FB 
32af2     14 FB E7 F8 
32af6     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32afa     6D F8 70 F8 
32afe     73 F8 78 F8 
32b02     7C F8 80 F8 
32b06     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32b0a     A6 FB A7 FB 
32b0e     A9 FB AC FB 
32b12     AF FB B1 FB 
32b16     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32b1a     B7 FB 73 FA 
32b1e     F8 F8 B4 F8 
32b22     A9 F8 AB F8 
32b26     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32b2a     B4 F8 B8 F8 
32b2e     BB F8 FA F8 
32b32     64 FB 65 FB 
32b36     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32b3a     6D FB 6F FB 
32b3e     70 FB 74 FB 
32b42     77 FB 77 FB 
32b46     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32b4a     E9 F8 E4 F8 
32b4e     E8 F8 EB F8 
32b52     EE F8 F2 F8 
32b56     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32b5a     B5 FA 9F FB 
32b5e     A1 FB A4 FB 
32b62     A5 FB A9 FB 
32b66     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32b6a     AE FB B1 FB 
32b6e     B2 FB C7 F9 
32b72     39 F9 22 F9 
32b76     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32b7a     26 F9 2A F9 
32b7e     2E F9 32 F9 
32b82     33 F9 BA FB 
32b86     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32b8a     DE FB E1 FB 
32b8e     E2 FB E4 FB 
32b92     E5 FB E7 FB 
32b96     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32b9a     C5 F9 67 F9 
32b9e     57 F9 56 F9 
32ba2     5B F9 5F F9 
32ba6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32baa     68 F9 6C F9 
32bae     0B FC 11 FC 
32bb2     14 FC 15 FC 
32bb6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32bba     B5 FB B5 FB 
32bbe     B6 FB B8 FB 
32bc2     E9 FA C8 F9 
32bc6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32bca     90 F9 94 F9 
32bce     95 F9 99 F9 
32bd2     9D F9 9F F9 
32bd6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32bda     DE FB DF FB 
32bde     E2 FB E4 FB 
32be2     E6 FB E8 FB 
32be6     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32bea     EF FB AC FA 
32bee     E9 F9 C7 F9 
32bf2     C3 F9 C8 F9 
32bf6     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32bfa     D0 F9 D4 F9 
32bfe     D6 F9 0E FB 
32c02     11 FC 13 FC 
32c06     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32c0a     19 FC 1B FC 
32c0e     1D FC 1E FC 
32c12     21 FC 22 FC 
32c16     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32c1a     F7 F9 F7 F9 
32c1e     FB F9 FE F9 
32c22     00 FA 03 FA 
32c26     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32c2a     1B FC 45 FC 
32c2e     46 FC 48 FC 
32c32     4A FC 4B FC 
32c36     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32c3a     52 FC 54 FC 
32c3e     F3 FB 82 FA 
32c42     35 FA 28 FA 
32c46     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32c4a     31 FA 32 FA 
32c4e     37 FA 37 FA 
32c52     3C FA 00 FC 
32c56     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32c5a     09 FC 0B FC 
32c5e     0F FC 12 FC 
32c62     12 FC 15 FC 
32c66     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32c6a     8D FA 60 FA 
32c6e     5B FA 5C FA 
32c72     60 FA 61 FA 
32c76     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32c7a     6C FA 6D FA 
32c7e     37 FC 3A FC 
32c82     3B FC 3D FC 
32c86     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32c8a     43 FC 44 FC 
32c8e     45 FC 47 FC 
32c92     51 FB AB FA 
32c96     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32c9a     8E FA 91 FA 
32c9e     93 FA 95 FA 
32ca2     98 FA 9B FA 
32ca6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32caa     68 FC 6A FC 
32cae     6C FC 6E FC 
32cb2     70 FC 72 FC 
32cb6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32cba     76 FC 3B FB 
32cbe     D0 FA BB FA 
32cc2     B9 FA BD FA 
32cc6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32cca     C4 FA C6 FA 
32cce     CA FA 13 FC 
32cd2     3A FC 3A FC 
32cd6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32cda     41 FC 43 FC 
32cde     44 FC 47 FC 
32ce2     48 FC 3C FC 
32ce6     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32cea     E6 FA E8 FA 
32cee     EB FA EE FA 
32cf2     F0 FA F2 FA 
32cf6     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32cfa     61 FC 66 FC 
32cfe     68 FC 6B FC 
32d02     6C FC 6E FC 
32d06     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32d0a     73 FC 75 FC 
32d0e     13 FC 3F FB 
32d12     17 FB 12 FB 
32d16     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32d1a     1A FB 1D FB 
32d1e     1F FB 20 FB 
32d22     23 FB 92 FC 
32d26     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32d2a     96 FC 97 FC 
32d2e     9A FC 9C FC 
32d32     9E FC 9F FC 
32d36     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32d3a     5A FB 41 FB 
32d3e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32d42     00 00 00 00 | zero2 long 0
32d46     01 00 00 00 
32d4a     00 00 00 00 
32d4e     00 00 00 00 
32d52     00 00 00 00 | mouse  file "mouse2.def"
32d56     00 00 00 00 
32d5a     00 00 00 00 
32d5e     00 00 00 00 
32d62     00 00 00 00 | 	byte	$00[16]
32d66     01 01 00 00 
32d6a     00 00 00 00 
32d6e     00 00 00 00 
32d72     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d76     00 00 00 00 
32d7a     00 00 00 00 
32d7e     00 00 00 00 
32d82     00 00 00 00 | 	byte	$00[16]
32d86     01 0D 01 00 
32d8a     00 00 00 00 
32d8e     00 00 00 00 
32d92     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d96     00 00 00 00 
32d9a     00 00 00 00 
32d9e     00 00 00 00 
32da2     00 00 00 00 | 	byte	$00[16]
32da6     01 0D 0D 01 
32daa     00 00 00 00 
32dae     00 00 00 00 
32db2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32db6     00 00 00 00 
32dba     00 00 00 00 
32dbe     00 00 00 00 
32dc2     00 00 00 00 | 	byte	$00[16]
32dc6     01 0D 0D 0D 
32dca     01 00 00 00 
32dce     00 00 00 00 
32dd2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32dd6     00 00 00 00 
32dda     00 00 00 00 
32dde     00 00 00 00 
32de2     00 00 00 00 | 	byte	$00[16]
32de6     01 0D 0D 0D 
32dea     0D 01 00 00 
32dee     00 00 00 00 
32df2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32df6     00 00 00 00 
32dfa     00 00 00 00 
32dfe     00 00 00 00 
32e02     00 00 00 00 | 	byte	$00[16]
32e06     01 0D 0D 0D 
32e0a     0D 0D 01 00 
32e0e     00 00 00 00 
32e12     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e16     00 00 00 00 
32e1a     00 00 00 00 
32e1e     00 00 00 00 
32e22     00 00 00 00 | 	byte	$00[16]
32e26     01 0D 0D 0D 
32e2a     0D 0D 0D 01 
32e2e     00 00 00 00 
32e32     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32e36     00 00 00 00 
32e3a     00 00 00 00 
32e3e     00 00 00 00 
32e42     00 00 00 00 | 	byte	$00[16]
32e46     01 0D 0D 0D 
32e4a     0D 0D 0D 0C 
32e4e     01 00 00 00 
32e52     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
32e56     00 00 00 00 
32e5a     00 00 00 00 
32e5e     00 00 00 00 
32e62     00 00 00 00 | 	byte	$00[16]
32e66     01 0D 0D 0D 
32e6a     0D 0D 0D 0D 
32e6e     0C 01 00 00 
32e72     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
32e76     00 00 00 00 
32e7a     00 00 00 00 
32e7e     00 00 00 00 
32e82     00 00 00 00 | 	byte	$00[16]
32e86     01 0D 0D 0D 
32e8a     0D 0D 0D 0D 
32e8e     0D 0C 01 00 
32e92     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
32e96     00 00 00 00 
32e9a     00 00 00 00 
32e9e     00 00 00 00 
32ea2     00 00 00 00 | 	byte	$00[16]
32ea6     01 0D 0D 0D 
32eaa     0D 0D 0D 0D 
32eae     0D 0D 0B 01 
32eb2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
32eb6     00 00 00 00 
32eba     00 00 00 00 
32ebe     00 00 00 00 
32ec2     00 00 00 00 | 	byte	$00[16]
32ec6     01 0D 0D 0D 
32eca     0C 0D 0D 03 
32ece     01 01 01 01 
32ed2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
32ed6     00 00 00 00 
32eda     00 00 00 00 
32ede     00 00 00 00 
32ee2     00 00 00 00 | 	byte	$00[16]
32ee6     01 0D 0D 0C 
32eea     01 09 0D 03 
32eee     00 00 00 00 
32ef2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
32ef6     00 00 00 00 
32efa     00 00 00 00 
32efe     00 00 00 00 
32f02     00 00 00 00 | 	byte	$00[16]
32f06     01 0D 0C 01 
32f0a     00 01 0D 0B 
32f0e     01 00 00 00 
32f12     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
32f16     00 00 00 00 
32f1a     00 00 00 00 
32f1e     00 00 00 00 
32f22     00 00 00 00 | 	byte	$00[16]
32f26     01 0C 01 00 
32f2a     00 01 0A 0D 
32f2e     01 00 00 00 
32f32     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
32f36     00 00 00 00 
32f3a     00 00 00 00 
32f3e     00 00 00 00 
32f42     00 00 00 00 | 	byte	$00[16]
32f46     01 01 00 00 
32f4a     00 00 01 0D 
32f4e     0B 01 00 00 
32f52     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
32f56     00 00 00 00 
32f5a     00 00 00 00 
32f5e     00 00 00 00 
32f62     00 00 00 00 
32f66     00 00 00 00 
32f6a     00 00       | 	byte	$00[22]
32f6c     01 0B 0D 01 
32f70     00 00 00 00 
32f74     00 00 00 00 
32f78     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f7c     00 00 00 00 
32f80     00 00 00 00 
32f84     00 00 00 00 
32f88     00 00 00 00 
32f8c     00          | 	byte	$00[17]
32f8d     01 01 00 00 
32f91     00 00 00 00 
32f95     00 00 00 00 
32f99     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f9d     00 00 00 00 
      ...             
33141     00 00 00 00 
33145     00          | 	byte	$00[425]
33146     73 32 00 04 
3314a     00 00 10 00 
3314e     00 00 00 00 
33152     00 00 00 00 | atari2 file "atari2.s2"
33156     43 87 43 87 
3315a     43 87 44 87 
3315e     43 87 44 87 
33162     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33166     43 87 43 87 
3316a     43 87 44 87 
3316e     43 87 43 87 
33172     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33176     44 87 43 87 
3317a     44 87 43 87 
3317e     43 87 43 87 
33182     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33186     43 87 43 87 
3318a     44 87 43 87 
3318e     44 87 44 87 
33192     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
33196     43 87 43 87 
3319a     44 87 43 87 
3319e     43 87 42 87 
331a2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
331a6     43 87 43 87 
331aa     43 87 43 87 
331ae     44 87 43 87 
331b2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
331b6     44 87 44 87 
331ba     43 87 44 87 
331be     43 87 44 87 
331c2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
331c6     44 87 43 87 
331ca     44 87 44 87 
331ce     43 87 43 87 
331d2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
331d6     43 87 44 87 
331da     44 87 43 87 
331de     43 87 44 87 
331e2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
331e6     43 87 43 87 
331ea     43 87 43 87 
331ee     43 87 43 87 
331f2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
331f6     42 87 43 87 
331fa     44 87 42 87 
331fe     43 87 43 87 
33202     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33206     43 87 44 87 
3320a     44 87 43 87 
3320e     43 87 43 87 
33212     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33216     43 87 5C 87 
3321a     EE 86 AC 87 
3321e     4C 7C A3 78 
33222     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33226     BC 78 BB 78 
3322a     BD 78 BC 78 
3322e     BB 78 BD 78 
33232     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33236     BB 78 BB 78 
3323a     BC 78 BC 78 
3323e     BC 78 BB 78 
33242     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33246     BC 78 BC 78 
3324a     BC 78 BC 78 
3324e     BC 78 BC 78 
33252     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33256     BB 78 BC 78 
3325a     A0 78 4C 7C 
3325e     11 7A 29 89 
33262     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
33266     44 87 43 87 
3326a     44 87 43 87 
3326e     43 87 42 87 
33272     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33276     43 87 43 87 
3327a     44 87 ED 85 
3327e     71 85 52 79 
33282     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
33286     BC 78 BC 78 
3328a     BC 78 BC 78 
3328e     BC 78 BC 78 
33292     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33296     BC 78 BC 78 
3329a     BC 78 A0 78 
3329e     CF 7A B9 81 
332a2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
332a6     44 87 43 87 
332aa     43 87 44 87 
332ae     43 87 44 87 
332b2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
332b6     43 87 43 87 
332ba     43 87 43 87 
332be     44 87 43 87 
332c2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
332c6     43 87 43 87 
332ca     44 87 43 87 
332ce     44 87 43 87 
332d2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
332d6     44 87 43 87 
332da     43 87 43 87 
332de     5A 87 39 81 
332e2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
332e6     A5 78 BC 78 
332ea     BB 78 BC 78 
332ee     BB 78 BC 78 
332f2     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
332f6     BC 78 BC 78 
332fa     BC 78 BC 78 
332fe     BC 78 8F 79 
33302     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33306     09 85 47 87 
3330a     43 87 43 87 
3330e     42 87 42 87 
33312     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33316     43 87 43 87 
3331a     43 87 43 87 
3331e     43 87 44 87 
33322     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33326     43 87 43 87 
3332a     44 87 43 87 
3332e     42 87 43 87 
33332     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33336     44 87 43 87 
3333a     43 87 43 87 
3333e     44 87 44 87 
33342     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
33346     94 78 55 7A 
3334a     B9 78 BC 78 
3334e     BC 78 BC 78 
33352     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33356     BC 78 BB 78 
3335a     BC 78 BC 78 
3335e     BC 78 BC 78 
33362     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33366     BB 78 BC 78 
3336a     BC 78 BC 78 
3336e     BB 78 BC 78 
33372     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33376     BC 78 BC 78 
3337a     BD 78 BC 78 
3337e     BC 78 BB 78 
33382     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
33386     94 78 B3 84 
3338a     36 84 4A 87 
3338e     43 87 43 87 
33392     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
33396     43 87 44 87 
3339a     43 87 43 87 
3339e     43 87 43 87 
333a2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
333a6     43 87 44 87 
333aa     43 87 44 87 
333ae     43 87 43 87 
333b2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
333b6     43 87 43 87 
333ba     43 87 45 87 
333be     43 87 43 87 
333c2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
333c6     43 87 44 87 
333ca     44 87 44 87 
333ce     43 87 43 87 
333d2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
333d6     43 87 42 87 
333da     43 87 43 87 
333de     44 87 43 87 
333e2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
333e6     54 87 3C 82 
333ea     36 83 52 79 
333ee     C6 78 BC 78 
333f2     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
333f6     BB 78 BB 78 
333fa     BC 78 BC 78 
333fe     BC 78 BC 78 
33402     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33406     BD 78 ED 78 
3340a     1B 79 F4 83 
3340e     4D 83 4E 87 
33412     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
33416     44 87 43 87 
3341a     42 87 44 87 
3341e     43 87 42 87 
33422     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
33426     43 87 54 87 
3342a     26 82 B3 84 
3342e     D6 77 BB 78 
33432     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
33436     BC 78 BB 78 
3343a     BB 78 BB 78 
3343e     BB 78 BB 78 
33442     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
33446     BC 78 BC 78 
3344a     26 79 18 75 
3344e     36 83 1F 84 
33452     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
33456     43 87 43 87 
3345a     43 87 43 87 
3345e     43 87 44 87 
33462     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33466     43 87 44 87 
3346a     44 87 43 87 
3346e     43 87 43 87 
33472     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
33476     43 87 43 87 
3347a     43 87 43 87 
3347e     44 87 44 87 
33482     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
33486     44 87 43 87 
3348a     43 87 43 87 
3348e     43 87 44 87 
33492     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33496     44 87 44 87 
3349a     44 87 43 87 
3349e     44 87 43 87 
334a2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
334a6     43 87 43 87 
334aa     43 87 44 87 
334ae     44 87 43 87 
334b2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
334b6     43 87 43 87 
334ba     43 87 43 87 
334be     43 87 44 87 
334c2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
334c6     43 87 44 87 
334ca     43 87 44 87 
334ce     19 87 7D 86 
334d2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
334d6     B1 78 BC 78 
334da     BC 78 BC 78 
334de     BC 78 BC 78 
334e2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
334e6     BC 78 BC 78 
334ea     BD 78 BC 78 
334ee     B7 78 3B 7B 
334f2     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
334f6     96 86 44 87 
334fa     43 87 43 87 
334fe     43 87 43 87 
33502     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33506     44 87 44 87 
3350a     43 87 44 87 
3350e     43 87 44 87 
33512     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33516     43 87 44 87 
3351a     43 87 44 87 
3351e     43 87 44 87 
33522     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33526     43 87 44 87 
3352a     43 87 43 87 
3352e     44 87 43 87 
33532     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33536     44 87 44 87 
3353a     43 87 43 87 
3353e     43 87 44 87 
33542     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33546     43 87 43 87 
3354a     43 87 43 87 
3354e     44 87 44 87 
33552     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
33556     36 83 CF 7A 
3355a     AB 78 BB 78 
3355e     BC 78 BC 78 
33562     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
33566     BB 78 BC 78 
3356a     BC 78 BC 78 
3356e     BC 78 BC 78 
33572     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33576     BC 78 BC 78 
3357a     BC 78 BB 78 
3357e     BC 78 BC 78 
33582     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33586     BB 78 BC 78 
3358a     BB 78 BC 78 
3358e     BC 78 BD 78 
33592     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
33596     BC 78 BC 78 
3359a     BC 78 BC 78 
3359e     BC 78 BD 78 
335a2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
335a6     BC 78 BB 78 
335aa     BC 78 BB 78 
335ae     BB 78 BC 78 
335b2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
335b6     BC 78 BC 78 
335ba     BC 78 BC 78 
335be     BC 78 BB 78 
335c2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
335c6     BC 78 BC 78 
335ca     BC 78 BD 78 
335ce     BB 78 BC 78 
335d2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
335d6     BC 78 BC 78 
335da     BC 78 BB 78 
335de     BC 78 BB 78 
335e2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
335e6     BB 78 BC 78 
335ea     BC 78 BC 78 
335ee     BC 78 BB 78 
335f2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
335f6     BC 78 BC 78 
335fa     BC 78 BB 78 
335fe     BC 78 BB 78 
33602     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33606     BC 78 BC 78 
3360a     BC 78 BC 78 
3360e     BB 78 BC 78 
33612     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33616     BC 78 9F 78 
3361a     52 79 B3 84 
3361e     2F 86 60 87 
33622     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33626     44 87 43 87 
3362a     43 87 43 87 
3362e     43 87 43 87 
33632     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33636     43 87 43 87 
3363a     43 87 44 87 
3363e     43 87 43 87 
33642     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33646     43 87 43 87 
3364a     43 87 43 87 
3364e     43 87 44 87 
33652     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33656     44 87 44 87 
3365a     5E 87 BC 80 
3365e     FB 80 94 78 
33662     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
33666     BD 78 BC 78 
3366a     BB 78 BC 78 
3366e     BB 78 BB 78 
33672     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33676     BC 78 BB 78 
3367a     BB 78 6B 79 
3367e     D6 77 AC 87 
33682     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
33686     43 87 44 87 
3368a     43 87 43 87 
3368e     44 87 43 87 
33692     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33696     43 87 44 87 
3369a     43 87 5C 87 
3369e     E7 80 00 80 
336a2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
336a6     BC 78 BD 78 
336aa     BC 78 BC 78 
336ae     BC 78 BB 78 
336b2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
336b6     BC 78 BC 78 
336ba     BB 78 BC 78 
336be     BB 78 BC 78 
336c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
336c6     BB 78 BC 78 
336ca     BC 78 BC 78 
336ce     BC 78 BC 78 
336d2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
336d6     BC 78 BC 78 
336da     BC 78 BC 78 
336de     A0 78 8D 7B 
336e2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
336e6     60 87 43 87 
336ea     44 87 44 87 
336ee     43 87 43 87 
336f2     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
336f6     44 87 43 87 
336fa     43 87 43 87 
336fe     44 87 73 86 
33702     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33706     51 7B B6 78 
3370a     BC 78 BD 78 
3370e     BC 78 BC 78 
33712     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33716     BB 78 BC 78 
3371a     BD 78 BB 78 
3371e     BC 78 BB 78 
33722     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33726     BC 78 BC 78 
3372a     BC 78 BC 78 
3372e     BB 78 BC 78 
33732     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33736     BC 78 BB 78 
3373a     BB 78 BC 78 
3373e     BC 78 BB 78 
33742     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
33746     22 8C AF 84 
3374a     48 87 43 87 
3374e     44 87 43 87 
33752     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
33756     43 87 42 87 
3375a     43 87 43 87 
3375e     44 87 43 87 
33762     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33766     43 87 43 87 
3376a     44 87 44 87 
3376e     43 87 43 87 
33772     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33776     43 87 43 87 
3377a     43 87 43 87 
3377e     44 87 43 87 
33782     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
33786     9F 8B D6 77 
3378a     16 7C B3 78 
3378e     BC 78 BB 78 
33792     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33796     BB 78 BC 78 
3379a     BB 78 BC 78 
3379e     BC 78 BC 78 
337a2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
337a6     BC 78 BB 78 
337aa     BB 78 BC 78 
337ae     BB 78 BC 78 
337b2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
337b6     BB 78 BB 78 
337ba     BC 78 BC 78 
337be     BC 78 BB 78 
337c2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
337c6     BC 78 BC 78 
337ca     BC 78 BD 78 
337ce     BB 78 BC 78 
337d2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
337d6     BC 78 BC 78 
337da     BC 78 BB 78 
337de     BC 78 BC 78 
337e2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
337e6     A8 78 54 7E 
337ea     F4 83 17 82 
337ee     50 87 43 87 
337f2     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
337f6     44 87 43 87 
337fa     44 87 43 87 
337fe     43 87 44 87 
33802     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33806     43 87 28 87 
3380a     20 85 CF 7A 
3380e     70 7D AD 78 
33812     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33816     BB 78 BC 78 
3381a     BC 78 BC 78 
3381e     BB 78 BB 78 
33822     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33826     BB 78 B2 78 
3382a     9A 7C CF 7A 
3382e     4A 87 0D 87 
33832     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33836     43 87 44 87 
3383a     43 87 44 87 
3383e     43 87 43 87 
33842     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33846     44 87 43 87 
3384a     28 87 51 85 
3384e     11 7A 1E 7D 
33852     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33856     BC 78 BB 78 
3385a     BC 78 BC 78 
3385e     BC 78 BC 78 
33862     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33866     BB 78 BC 78 
3386a     BB 78 BC 78 
3386e     BC 78 BC 78 
33872     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33876     BB 78 BC 78 
3387a     BC 78 BC 78 
3387e     BD 78 BB 78 
33882     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33886     BC 78 BB 78 
3388a     BC 78 BC 78 
3388e     BC 78 BB 78 
33892     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33896     BC 78 BC 78 
3389a     BC 78 BC 78 
3389e     BB 78 BC 78 
338a2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
338a6     BC 78 BD 78 
338aa     BC 78 BC 78 
338ae     BC 78 BB 78 
338b2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
338b6     BC 78 BB 78 
338ba     BB 78 BC 78 
338be     BC 78 BB 78 
338c2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
338c6     BB 78 BB 78 
338ca     BB 78 BC 78 
338ce     B6 78 48 7D 
338d2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
338d6     56 87 43 87 
338da     42 87 44 87 
338de     44 87 43 87 
338e2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
338e6     43 87 44 87 
338ea     43 87 44 87 
338ee     4C 87 7E 83 
338f2     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
338f6     F7 78 BC 78 
338fa     BC 78 BB 78 
338fe     BB 78 BC 78 
33902     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33906     BC 78 BB 78 
3390a     BC 78 BC 78 
3390e     BB 78 BC 78 
33912     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33916     BB 78 BC 78 
3391a     BC 78 BC 78 
3391e     BC 78 BB 78 
33922     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33926     BC 78 BC 78 
3392a     BC 78 BC 78 
3392e     BC 78 BB 78 
33932     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33936     BC 78 BB 78 
3393a     BB 78 BC 78 
3393e     BC 78 BB 78 
33942     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33946     BC 78 BC 78 
3394a     BB 78 BC 78 
3394e     BC 78 BC 78 
33952     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33956     73 32 00 04 
3395a     00 00 10 00 
3395e     00 00 00 00 
33962     00 00 00 00 | atari12 file "atari12.s2"
33966     00 6D 00 6D 
3396a     00 6D 00 6D 
3396e     00 6D 00 6D 
33972     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33976     00 6D 00 6D 
3397a     00 6D 00 6D 
3397e     00 6D 00 6D 
33982     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33986     00 6D 00 6D 
3398a     00 6D 00 6D 
3398e     00 6D 00 6D 
33992     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33996     00 6D 00 6D 
3399a     00 6D 00 6D 
3399e     00 6D 00 6D 
339a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339a6     00 6D 00 6D 
339aa     00 6D 00 6D 
339ae     00 6D 00 6D 
339b2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
339b6     00 6C 00 6C 
339ba     00 6C 00 6C 
339be     00 6C 00 6C 
339c2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
339c6     00 6C 00 6C 
339ca     00 6C 00 6C 
339ce     00 6C 00 6C 
339d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
339d6     00 6C 00 6C 
339da     00 6C 00 6C 
339de     00 6C 00 6C 
339e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
339e6     00 6C 00 6C 
339ea     00 6C 00 6C 
339ee     00 6C 00 6C 
339f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
339f6     00 6C 00 6C 
339fa     00 6C 00 6C 
339fe     00 6C 00 6C 
33a02     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a06     00 6C 00 6C 
33a0a     00 6C 00 6C 
33a0e     00 6C 00 6C 
33a12     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a16     00 6C 00 6C 
33a1a     00 6C 00 6C 
33a1e     00 6C 00 6C 
33a22     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a26     00 6C 00 6C 
33a2a     00 6C 00 6C 
33a2e     00 6C 00 6C 
33a32     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a36     00 6C 00 6C 
33a3a     00 6C 00 6C 
33a3e     00 6C 00 6C 
33a42     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a46     00 6C 00 6C 
33a4a     00 6C 00 6C 
33a4e     00 6C 00 6C 
33a52     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a56     00 6C 00 6C 
33a5a     00 6C 00 6C 
33a5e     00 6C 00 6C 
33a62     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a66     00 6C 00 6B 
33a6a     00 6B 00 6B 
33a6e     00 6B 00 6B 
33a72     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a76     00 6B 00 6B 
33a7a     00 6B 00 6B 
33a7e     00 6B 00 6B 
33a82     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a86     00 6B 00 6B 
33a8a     00 6B 00 6B 
33a8e     00 6B 00 6B 
33a92     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a96     00 6B 00 6B 
33a9a     00 6B 00 6B 
33a9e     00 6B 00 6B 
33aa2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33aa6     00 6B 00 6B 
33aaa     00 6B 00 6B 
33aae     00 6B 00 6B 
33ab2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ab6     00 6B 00 6B 
33aba     00 6B 00 6B 
33abe     00 6B 00 6B 
33ac2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ac6     00 6B 00 6B 
33aca     00 6B 00 6B 
33ace     00 6B 00 6B 
33ad2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ad6     00 6B 00 6B 
33ada     00 6B 00 6B 
33ade     00 6B 00 6B 
33ae2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ae6     00 6B 00 6B 
33aea     00 6B 00 6B 
33aee     00 6B 00 6B 
33af2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33af6     00 6B 00 6B 
33afa     00 6B 00 6B 
33afe     00 6A 00 9D 
33b02     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33b06     00 9E 00 9E 
33b0a     00 9E 00 9E 
33b0e     00 9E 00 9E 
33b12     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b16     00 9E 00 9E 
33b1a     00 9E 00 9E 
33b1e     00 9E 00 9E 
33b22     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b26     00 9E 00 9E 
33b2a     00 9E 00 9E 
33b2e     00 9E 00 9E 
33b32     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b36     00 9E 00 9E 
33b3a     00 9E 00 9E 
33b3e     00 9E 00 9E 
33b42     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b46     00 9E 00 9E 
33b4a     00 9E 00 9E 
33b4e     00 9E 00 9E 
33b52     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b56     00 9E 00 9E 
33b5a     00 9E 00 9E 
33b5e     00 9E 00 9E 
33b62     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b66     00 9E 00 9E 
33b6a     00 9E 00 9E 
33b6e     00 9E 00 9E 
33b72     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b76     00 9E 00 9E 
33b7a     00 9E 00 9E 
33b7e     00 9E 00 9E 
33b82     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b86     00 9E 00 9E 
33b8a     00 9E 00 9E 
33b8e     00 9E 00 9E 
33b92     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33b96     00 9F 00 9F 
33b9a     00 9F 00 9F 
33b9e     00 9F 00 9F 
33ba2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33ba6     00 9F 00 9F 
33baa     00 9F 00 9F 
33bae     00 9F 00 9F 
33bb2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33bb6     00 9F 00 9F 
33bba     00 9F 00 9F 
33bbe     00 9F 00 9F 
33bc2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33bc6     00 9F 00 9F 
33bca     00 9F 00 9F 
33bce     00 9F 00 9F 
33bd2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33bd6     00 9F 00 9F 
33bda     00 9F 00 9F 
33bde     00 9F 00 9F 
33be2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33be6     00 9F 00 9F 
33bea     00 9F 00 9F 
33bee     00 9F 00 9F 
33bf2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33bf6     00 9F 00 9F 
33bfa     00 9F 00 9F 
33bfe     00 9F 00 9F 
33c02     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c06     00 9F 00 9F 
33c0a     00 9F 00 9F 
33c0e     00 9F 00 9F 
33c12     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c16     00 9F 00 9F 
33c1a     00 9F 00 9F 
33c1e     00 9F 00 9F 
33c22     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c26     00 9F 00 9F 
33c2a     00 9F 00 9F 
33c2e     00 9F 00 9F 
33c32     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c36     00 9F 00 9F 
33c3a     00 9F 00 9F 
33c3e     00 9F 00 9F 
33c42     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c46     00 9F 00 9F 
33c4a     00 9F 00 9F 
33c4e     00 9F 00 9F 
33c52     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c56     00 9F 00 9F 
33c5a     00 9F 00 A0 
33c5e     00 A0 00 A0 
33c62     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c66     00 A0 00 A0 
33c6a     00 A0 00 A0 
33c6e     00 A0 00 A0 
33c72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c76     00 A0 00 A0 
33c7a     00 A0 00 A0 
33c7e     00 A0 00 A0 
33c82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c86     00 A0 00 A0 
33c8a     00 A0 00 A0 
33c8e     00 A0 00 A0 
33c92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c96     00 A0 00 A0 
33c9a     00 A0 00 A0 
33c9e     00 A0 00 A0 
33ca2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ca6     00 A0 00 A0 
33caa     00 A0 00 A0 
33cae     00 A0 00 A0 
33cb2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cb6     00 A0 00 A0 
33cba     00 A0 00 A0 
33cbe     00 A0 00 A0 
33cc2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cc6     00 A0 00 A0 
33cca     00 A0 00 A0 
33cce     00 A0 00 A0 
33cd2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cd6     00 A0 00 A0 
33cda     00 A0 00 A0 
33cde     00 A0 00 A0 
33ce2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ce6     00 A0 00 A0 
33cea     00 A0 00 A0 
33cee     00 A0 00 A0 
33cf2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cf6     00 A0 00 A0 
33cfa     00 A0 00 A0 
33cfe     00 A0 00 A0 
33d02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d06     00 A0 00 A0 
33d0a     00 A0 00 A0 
33d0e     00 A0 00 A0 
33d12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d16     00 A0 00 A0 
33d1a     00 A0 00 A0 
33d1e     00 A0 00 A0 
33d22     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33d26     00 6D 00 6D 
33d2a     00 6D 00 6D 
33d2e     00 6D 00 6D 
33d32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d36     00 6D 00 6D 
33d3a     00 6D 00 6D 
33d3e     00 6D 00 6D 
33d42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d46     00 6D 00 6D 
33d4a     00 6D 00 6D 
33d4e     00 6D 00 6D 
33d52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d56     00 6D 00 6D 
33d5a     00 6D 00 6D 
33d5e     00 6D 00 6D 
33d62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d66     00 6D 00 6D 
33d6a     00 6D 00 6D 
33d6e     00 6D 00 6D 
33d72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d76     00 6D 00 6D 
33d7a     00 6D 00 6D 
33d7e     00 6D 00 6D 
33d82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d86     00 6D 00 6D 
33d8a     00 6D 00 6D 
33d8e     00 6D 00 6D 
33d92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d96     00 6D 00 6D 
33d9a     00 6D 00 6D 
33d9e     00 6D 00 6D 
33da2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33da6     00 6D 00 6D 
33daa     00 A0 00 A0 
33dae     00 A0 00 A0 
33db2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33db6     00 A0 00 A0 
33dba     00 A0 00 A0 
33dbe     00 A0 00 A0 
33dc2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33dc6     00 A0 00 A0 
33dca     00 A0 00 A0 
33dce     00 A0 00 A0 
33dd2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33dd6     00 A0 00 A0 
33dda     00 A0 00 A0 
33dde     00 A0 00 A0 
33de2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33de6     00 A0 00 A0 
33dea     00 A0 00 A0 
33dee     00 A0 00 A0 
33df2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33df6     00 A0 00 A0 
33dfa     00 A0 00 A0 
33dfe     00 A0 00 A0 
33e02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e06     00 A0 00 A0 
33e0a     00 A0 00 A0 
33e0e     00 A0 00 A0 
33e12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e16     00 A0 00 A0 
33e1a     00 A0 00 A0 
33e1e     00 A0 00 A0 
33e22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e26     00 A0 00 A0 
33e2a     00 A0 00 A0 
33e2e     00 A0 00 A0 
33e32     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33e36     00 6D 00 6D 
33e3a     00 6D 00 6D 
33e3e     00 6D 00 6D 
33e42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e46     00 6D 00 6D 
33e4a     00 6D 00 6D 
33e4e     00 6D 00 6D 
33e52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e56     00 6D 00 6D 
33e5a     00 6D 00 6D 
33e5e     00 6D 00 6D 
33e62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e66     00 6D 00 6D 
33e6a     00 6D 00 6D 
33e6e     00 6D 00 6D 
33e72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e76     00 6D 00 6D 
33e7a     00 6D 00 6D 
33e7e     00 6D 00 6D 
33e82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e86     00 6D 00 6D 
33e8a     00 6D 00 6D 
33e8e     00 6D 00 6D 
33e92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e96     00 6D 00 6D 
33e9a     00 6D 00 6D 
33e9e     00 6D 00 6D 
33ea2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ea6     00 6D 00 6D 
33eaa     00 6D 00 6D 
33eae     00 6D 00 6D 
33eb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33eb6     00 6D 00 6D 
33eba     00 6C 00 A0 
33ebe     00 9F 00 A0 
33ec2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
33ec6     00 A0 00 A0 
33eca     00 A0 00 A0 
33ece     00 A0 00 A0 
33ed2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ed6     00 A0 00 A0 
33eda     00 A0 00 A0 
33ede     00 A0 00 A0 
33ee2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ee6     00 A0 00 A0 
33eea     00 A0 00 A0 
33eee     00 A0 00 A0 
33ef2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ef6     00 A0 00 A0 
33efa     00 A0 00 A0 
33efe     00 A0 00 A0 
33f02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f06     00 A0 00 A0 
33f0a     00 A0 00 A0 
33f0e     00 A0 00 A0 
33f12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f16     00 A0 00 A0 
33f1a     00 A0 00 A0 
33f1e     00 A0 00 A0 
33f22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f26     00 A0 00 A0 
33f2a     00 A0 00 A0 
33f2e     00 A0 00 A0 
33f32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f36     00 A0 00 A0 
33f3a     00 A0 00 A0 
33f3e     00 A0 00 A0 
33f42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f46     00 A0 00 A0 
33f4a     00 A0 00 A0 
33f4e     00 A0 00 A0 
33f52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f56     00 A0 00 A0 
33f5a     00 A0 00 A0 
33f5e     00 A0 00 A0 
33f62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f66     00 A0 00 A0 
33f6a     00 A0 00 A0 
33f6e     00 A0 00 A0 
33f72     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
33f76     00 A1 00 A1 
33f7a     00 A1 00 A1 
33f7e     00 A1 00 A1 
33f82     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33f86     00 A1 00 A1 
33f8a     00 A1 00 A1 
33f8e     00 A1 00 A1 
33f92     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33f96     00 A1 00 A1 
33f9a     00 A1 00 A1 
33f9e     00 A1 00 A1 
33fa2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33fa6     00 A1 00 A1 
33faa     00 A1 00 A1 
33fae     00 A1 00 A1 
33fb2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33fb6     00 A1 00 A1 
33fba     00 A1 00 A1 
33fbe     00 A1 00 A1 
33fc2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33fc6     00 A1 00 A1 
33fca     00 A1 00 A1 
33fce     00 6E 00 6E 
33fd2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33fd6     00 6E 00 6E 
33fda     00 6E 00 6E 
33fde     00 6E 00 6E 
33fe2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33fe6     00 6E 00 6E 
33fea     00 6E 00 6E 
33fee     00 6E 00 6E 
33ff2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33ff6     00 6E 00 6E 
33ffa     00 6E 00 6E 
33ffe     00 6E 00 6E 
34002     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34006     00 6E 00 6D 
3400a     00 6D 00 6D 
3400e     00 6D 00 6D 
34012     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34016     00 6D 00 6D 
3401a     00 6D 00 6D 
3401e     00 6D 00 6D 
34022     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34026     00 6D 00 6D 
3402a     00 6D 00 6D 
3402e     00 6D 00 6D 
34032     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34036     00 6D 00 6D 
3403a     00 6D 00 6D 
3403e     00 6D 00 6D 
34042     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34046     00 6D 00 6D 
3404a     00 6D 00 6D 
3404e     00 6D 00 6D 
34052     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34056     00 6D 00 6D 
3405a     00 6D 00 6D 
3405e     00 6D 00 6D 
34062     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34066     00 6D 00 6D 
3406a     00 6D 00 6D 
3406e     00 6D 00 6D 
34072     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34076     00 6D 00 6D 
3407a     00 6D 00 6D 
3407e     00 6D 00 6D 
34082     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34086     00 6D 00 6D 
3408a     00 6D 00 6D 
3408e     00 6D 00 6D 
34092     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34096     00 6D 00 6D 
3409a     00 6D 00 6D 
3409e     00 6D 00 6D 
340a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340a6     00 6D 00 6D 
340aa     00 6D 00 6D 
340ae     00 6D 00 6D 
340b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340b6     00 6D 00 6D 
340ba     00 6C 00 6C 
340be     00 6C 00 6C 
340c2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
340c6     00 6C 00 6C 
340ca     00 6C 00 6C 
340ce     00 6C 00 6C 
340d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
340d6     00 6C 00 6C 
340da     00 6C 00 6C 
340de     00 9D 00 9F 
340e2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
340e6     00 9F 00 9F 
340ea     00 9F 00 9F 
340ee     00 A0 00 A0 
340f2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340f6     00 A0 00 A0 
340fa     00 A0 00 A0 
340fe     00 A0 00 A0 
34102     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34106     00 A0 00 A0 
3410a     00 A0 00 A0 
3410e     00 A0 00 A0 
34112     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34116     00 A0 00 A0 
3411a     00 A0 00 A0 
3411e     00 A0 00 A0 
34122     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34126     00 A0 00 A0 
3412a     00 A0 00 A0 
3412e     00 A0 00 A0 
34132     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34136     00 A0 00 A0 
3413a     00 A0 00 A0 
3413e     00 A0 00 A0 
34142     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34146     00 A0 00 A0 
3414a     00 A0 00 A0 
3414e     00 A0 00 A0 
34152     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34156     00 A0 00 A0 
3415a     00 A0 00 A0 
3415e     00 A0 00 A0 
34162     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34166                 | 
34166     00 00       |              	org
34168 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3416c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
34170 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
34174 003             | 
34174 003 00 30 04 F6 |                 mov     psramaddr,#0
34178 004             | 
34178 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3417c 005 20 00 00 FF 
34180 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
34184 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
34188 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3418c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
34190 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
34194 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
34198 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3419c 00d             | 
3419c 00d 20 00 00 FF 
341a0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
341a4 00f E0 03 00 FF 
341a8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
341ac 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
341b0 012             | 
341b0 012             |                 
341b0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
341b4 013             |     
341b4 013 01 2C 60 FD |                 cogid 	t11				' get id
341b8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
341bc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
341c0 016             | 
341c0 016 00 00 00 00 | t11 		long 	0
341c4 017 00 FF 07 00 | mailbox 	long 	$7FF00
341c8 018 00 00 00 00 | psramaddr 	long 	0
341cc 019 00 00 00 00 | pslockval	long 	0
341d0 01a 00 00 00 00 | cmd             long    0
341d4 01b 00 00 00 00 | buf1            long    0
341d8 01c 00 40 00 00 | buf2            long    16384
341dc 01d E0 41 03 00 | 	long	@@@_dat_ + 12624
341e0 01e 50 32 20 52 
341e4 01f 65 74 72 6F 
341e8 020 6D 61 63 68 
341ec 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
341f0 022 42 41 53 49 
341f4 023 43 20 76 65 
341f8 024 72 73 69 6F 
341fc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
34200 026 33 31 00 00 | 	byte	$33, $31, $00, $00
34204 027             | 	alignl
34204 027             | _hg010b_spin2_dat_
34204 027             | 
34204 027 00 00 00 00 
34208 028 00 00 00 00 
3420c 029 00 00 00 00 
34210 02a 00 00 00 00 
34214 02b 00 00 00    | vga_font       file "vgafont.def"
34217 02b 7E 81 A5 81 
3421b 02c 81 BD 99 81 
3421f 02d 81 7E 00 00 
34223 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34227 02f 7E FF DB FF 
3422b 030 FF C3 E7 FF 
3422f 031 FF 7E 00 00 
34233 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34237 033 00 36 7F 7F 
3423b 034 7F 7F 3E 1C 
3423f 035 08 00 00 00 
34243 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
34247 037 00 08 1C 3E 
3424b 038 7F 3E 1C 08 
3424f 039 00 00 00 00 
34253 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
34257 03b 18 3C 3C E7 
3425b 03c E7 E7 18 18 
3425f 03d 3C 00 00 00 
34263 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34267 03f 18 3C 7E FF 
3426b 040 FF 7E 18 18 
3426f 041 3C 00 00 00 
34273 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34277 043 00 00 00 18 
3427b 044 3C 3C 18 00 
3427f 045 00 00 00 00 
34283 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
34287 047 FF FF FF E7 
3428b 048 C3 C3 E7 FF 
3428f 049 FF FF FF FF 
34293 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34297 04b 00 00 3C 66 
3429b 04c 42 42 66 3C 
3429f 04d 00 00 00 00 
342a3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
342a7 04f FF FF C3 99 
342ab 050 BD BD 99 C3 
342af 051 FF FF FF FF 
342b3 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
342b7 053 78 70 58 4C 
342bb 054 1E 33 33 33 
342bf 055 33 1E 00 00 
342c3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
342c7 057 3C 66 66 66 
342cb 058 66 3C 18 7E 
342cf 059 18 18 00 00 
342d3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
342d7 05b FC CC FC 0C 
342db 05c 0C 0C 0C 0E 
342df 05d 0F 07 00 00 
342e3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
342e7 05f FE C6 FE C6 
342eb 060 C6 C6 C6 E6 
342ef 061 E7 67 03 00 
342f3 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
342f7 063 18 18 DB 3C 
342fb 064 E7 3C DB 18 
342ff 065 18 00 00 00 
34303 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34307 067 03 07 0F 1F 
3430b 068 7F 1F 0F 07 
3430f 069 03 01 00 00 
34313 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34317 06b 60 70 78 7C 
3431b 06c 7F 7C 78 70 
3431f 06d 60 40 00 00 
34323 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34327 06f 18 3C 7E 18 
3432b 070 18 18 7E 3C 
3432f 071 18 00 00 00 
34333 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34337 073 66 66 66 66 
3433b 074 66 66 66    | 	byte	$66[7]
3433e 075 00 66 66 00 
34342 076 00 00 00 00 
34346 077 00 FE DB DB 
3434a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3434e 079 D8 D8 D8 00 
34352 07a 00 00 00 3E 
34356 07b 63 06 1C 36 
3435a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3435e 07d 30 63 3E 00 
34362 07e 00 00 00 00 
34366 07f 00 00 00 00 
3436a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3436e 081 7F 7F 7F 00 
34372 082 00 00 00 00 
34376 083 00 18 3C 7E 
3437a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3437e 085 3C 18 7E 00 
34382 086 00 00 00 00 
34386 087 00 18 3C 7E 
3438a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3438e 089 18 18 18 00 
34392 08a 00 00 00 00 
34396 08b 00 18 18 18 
3439a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3439e 08d 7E 3C 18 00 
343a2 08e 00 00 00 00 
343a6 08f 00 00 00 18 
343aa 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
343ae 091 00 00 00 00 
343b2 092 00 00 00 00 
343b6 093 00 00 00    | 	byte	$00[11]
343b9 094 0C 06 7F 06 
343bd 095 0C 00 00 00 
343c1 096 00 00 00 00 
343c5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
343c9 098 00 03 03 03 
343cd 099 7F 00 00 00 
343d1 09a 00 00 00 00 
343d5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
343d9 09c 14 36 7F 36 
343dd 09d 14 00 00 00 
343e1 09e 00 00 00 00 
343e5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
343e9 0a0 1C 1C 3E 3E 
343ed 0a1 7F 7F 00 00 
343f1 0a2 00 00 00 00 
343f5 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
343f9 0a4 7F 3E 3E 1C 
343fd 0a5 1C 08 00 00 
34401 0a6 00 00 00 00 
34405 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34409 0a8 00 00 00 00 
3440d 0a9 00 00 00 00 
34411 0aa 00 00 00 00 
34415 0ab 00 00       | 	byte	$00[14]
34417 0ab 18 3C 3C 3C 
3441b 0ac 18 18 18 00 
3441f 0ad 18 18 00 00 
34423 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34427 0af 66 24 00 00 
3442b 0b0 00 00 00 00 
3442f 0b1 00 00 00 00 
34433 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34437 0b3 00 36 36 7F 
3443b 0b4 36 36 36 7F 
3443f 0b5 36 36 00 00 
34443 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
34447 0b7 3E 63 43 03 
3444b 0b8 3E 60 60 61 
3444f 0b9 63 3E 18 18 
34453 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
34457 0bb 00 00 43 63 
3445b 0bc 30 18 0C 06 
3445f 0bd 63 61 00 00 
34463 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
34467 0bf 1C 36 36 1C 
3446b 0c0 6E 3B 33 33 
3446f 0c1 33 6E 00 00 
34473 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
34477 0c3 0C 0C 0C 06 
3447b 0c4 00 00 00 00 
3447f 0c5 00 00 00 00 
34483 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34487 0c7 30 18 0C 0C 
3448b 0c8 0C 0C 0C 0C 
3448f 0c9 18 30 00 00 
34493 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
34497 0cb 0C 18 30 30 
3449b 0cc 30 30 30 30 
3449f 0cd 18 0C 00 00 
344a3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
344a7 0cf 00 00 00 66 
344ab 0d0 3C FF 3C 66 
344af 0d1 00 00 00 00 
344b3 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
344b7 0d3 00 00 00 18 
344bb 0d4 18 7E 18 18 
344bf 0d5 00 00 00 00 
344c3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
344c7 0d7 00 00 00 00 
344cb 0d8 00 00 00 00 | 	byte	$00[8]
344cf 0d9 18 18 18 0C 
344d3 0da 00 00 00 00 
344d7 0db 00 00 00 00 
344db 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
344df 0dd 00 00 00 00 
344e3 0de 00 00 00 00 
344e7 0df 00 00 00 00 
344eb 0e0 00 00 00 00 | 	byte	$00[16]
344ef 0e1 18 18 00 00 
344f3 0e2 00 00 00 00 
344f7 0e3 00 00 40 60 
344fb 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
344ff 0e5 03 01 00 00 
34503 0e6 00 00 00 00 
34507 0e7 1C 36 63 63 
3450b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3450f 0e9 36 1C 00 00 
34513 0ea 00 00 00 00 
34517 0eb 18 1C 1E 18 
3451b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3451f 0ed 18 7E 00 00 
34523 0ee 00 00 00 00 
34527 0ef 3E 63 60 30 
3452b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3452f 0f1 63 7F 00 00 
34533 0f2 00 00 00 00 
34537 0f3 3E 63 60 60 
3453b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3453f 0f5 63 3E 00 00 
34543 0f6 00 00 00 00 
34547 0f7 30 38 3C 36 
3454b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3454f 0f9 30 78 00 00 
34553 0fa 00 00 00 00 
34557 0fb 7F 03 03 03 
3455b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3455f 0fd 63 3E 00 00 
34563 0fe 00 00 00 00 
34567 0ff 1C 06 03 03 
3456b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3456f 101 63 3E 00 00 
34573 102 00 00 00 00 
34577 103 7F 63 60 60 
3457b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3457f 105 0C 0C 00 00 
34583 106 00 00 00 00 
34587 107 3E 63 63 63 
3458b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3458f 109 63 3E 00 00 
34593 10a 00 00 00 00 
34597 10b 3E 63 63 63 
3459b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3459f 10d 30 1E 00 00 
345a3 10e 00 00 00 00 
345a7 10f 00 00 00 18 
345ab 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
345af 111 18 18 00 00 
345b3 112 00 00 00 00 
345b7 113 00 00 00 18 
345bb 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
345bf 115 18 18 0C 00 
345c3 116 00 00 00 00 
345c7 117 00 60 30 18 
345cb 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
345cf 119 30 60 00 00 
345d3 11a 00 00 00 00 
345d7 11b 00 00 00 7E 
345db 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
345df 11d 00 00 00 00 
345e3 11e 00 00 00 00 
345e7 11f 00          | 	byte	$00[9]
345e8 120 06 0C 18 30 
345ec 121 60 30 18 0C 
345f0 122 06 00 00 00 
345f4 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
345f8 124 63 63 30 18 
345fc 125 18 18 00 18 
34600 126 18 00 00 00 
34604 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34608 128 3E 63 63 7B 
3460c 129 7B 7B 3B 03 
34610 12a 3E 00 00 00 
34614 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34618 12c 1C 36 63 63 
3461c 12d 7F 63 63 63 
34620 12e 63 00 00 00 
34624 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34628 130 66 66 66 3E 
3462c 131 66 66 66 66 
34630 132 3F 00 00 00 
34634 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34638 134 66 43 03 03 
3463c 135 03 03 43 66 
34640 136 3C 00 00 00 
34644 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
34648 138 36 66 66 66 
3464c 139 66 66 66 36 
34650 13a 1F 00 00 00 
34654 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
34658 13c 66 46 16 1E 
3465c 13d 16 06 46 66 
34660 13e 7F 00 00 00 
34664 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
34668 140 66 46 16 1E 
3466c 141 16 06 06 06 
34670 142 0F 00 00 00 
34674 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34678 144 66 43 03 03 
3467c 145 7B 63 63 66 
34680 146 5C 00 00 00 
34684 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
34688 148 63 63 63 7F 
3468c 149 63 63 63 63 
34690 14a 63 00 00 00 
34694 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
34698 14c 18 18 18 18 
3469c 14d 18 18 18 18 | 	byte	$18[8]
346a0 14e 3C 00 00 00 
346a4 14f 00 00 00 78 
346a8 150 30 30 30 30 
346ac 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
346b0 152 1E 00 00 00 
346b4 153 00 00 00 67 
346b8 154 66 66 36 1E 
346bc 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
346c0 156 67 00 00 00 
346c4 157 00 00 00 0F 
346c8 158 06 06 06 06 
346cc 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
346d0 15a 7F 00 00 00 
346d4 15b 00 00 00 63 
346d8 15c 77 7F 7F 6B 
346dc 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
346e0 15e 63 00 00 00 
346e4 15f 00 00 00 63 
346e8 160 67 6F 7F 7B 
346ec 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
346f0 162 63 00 00 00 
346f4 163 00 00 00 3E 
346f8 164 63 63 63 63 
346fc 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34700 166 3E 00 00 00 
34704 167 00 00 00 3F 
34708 168 66 66 66 3E 
3470c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
34710 16a 0F 00 00 00 
34714 16b 00 00 00 3E 
34718 16c 63 63 63 63 
3471c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
34720 16e 3E 30 70 00 
34724 16f 00 00 00 3F 
34728 170 66 66 66 3E 
3472c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
34730 172 67 00 00 00 
34734 173 00 00 00 3E 
34738 174 63 63 06 1C 
3473c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34740 176 3E 00 00 00 
34744 177 00 00 00 7E 
34748 178 7E 5A 18 18 
3474c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34750 17a 3C 00 00 00 
34754 17b 00 00 00 63 
34758 17c 63 63 63 63 
3475c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34760 17e 3E 00 00 00 
34764 17f 00 00 00 63 
34768 180 63 63 63 63 
3476c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
34770 182 08 00 00 00 
34774 183 00 00 00 63 
34778 184 63 63 63 6B 
3477c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
34780 186 36 00 00 00 
34784 187 00 00 00 63 
34788 188 63 36 3E 1C 
3478c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
34790 18a 63 00 00 00 
34794 18b 00 00 00 66 
34798 18c 66 66 66 3C 
3479c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
347a0 18e 3C 00 00 00 
347a4 18f 00 00 00 7F 
347a8 190 63 61 30 18 
347ac 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
347b0 192 7F 00 00 00 
347b4 193 00 00 00 3C 
347b8 194 0C 0C 0C 0C 
347bc 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
347c0 196 3C 00 00 00 
347c4 197 00 00 00 00 
347c8 198 01 03 07 0E 
347cc 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
347d0 19a 40 00 00 00 
347d4 19b 00 00 00 3C 
347d8 19c 30 30 30 30 
347dc 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
347e0 19e 3C 00 00 00 
347e4 19f 1C 36 00 00 
347e8 1a0 00 00 00 00 
347ec 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
347f0 1a2 00 00 00 00 
347f4 1a3 00 00 00 00 
347f8 1a4 00 00 00 00 
347fc 1a5 00 00 00 00 
34800 1a6 00          | 	byte	$00[17]
34801 1a6 FF 00 00 0C 
34805 1a7 18 00 00 00 
34809 1a8 00 00 00 00 
3480d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34811 1aa 00 00 00 00 
34815 1ab 00 00 00 00 
34819 1ac 00          | 	byte	$00[9]
3481a 1ac 1E 30 3E 33 
3481e 1ad 33 33 6E 00 
34822 1ae 00 00 00 00 
34826 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3482a 1b0 1E 36 66 66 
3482e 1b1 66 66 3E 00 
34832 1b2 00 00 00 00 
34836 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3483a 1b4 3E 63 03 03 
3483e 1b5 03 63 3E 00 
34842 1b6 00 00 00 00 
34846 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3484a 1b8 3C 36 33 33 
3484e 1b9 33 33 6E 00 
34852 1ba 00 00 00 00 
34856 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3485a 1bc 3E 63 7F 03 
3485e 1bd 03 63 3E 00 
34862 1be 00 00 00 00 
34866 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3486a 1c0 0C 1E 0C 0C 
3486e 1c1 0C 0C 1E 00 
34872 1c2 00 00 00 00 
34876 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3487a 1c4 6E 33 33 33 
3487e 1c5 33 33 3E 30 
34882 1c6 33 1E 00 00 
34886 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3488a 1c8 36 6E 66 66 
3488e 1c9 66 66 67 00 
34892 1ca 00 00 00 00 
34896 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3489a 1cc 1C 18 18 18 
3489e 1cd 18 18 3C 00 
348a2 1ce 00 00 00 00 
348a6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
348aa 1d0 70 60 60 60 
348ae 1d1 60 60 60 66 
348b2 1d2 66 3C 00 00 
348b6 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
348ba 1d4 66 36 1E 1E 
348be 1d5 36 66 67 00 
348c2 1d6 00 00 00 00 
348c6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
348ca 1d8 18 18 18 18 
348ce 1d9 18 18       | 	byte	$18[6]
348d0 1da 3C 00 00 00 
348d4 1db 00 00 00 00 
348d8 1dc 00 00 37 7F 
348dc 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
348e0 1de 63 00 00 00 
348e4 1df 00 00 00 00 
348e8 1e0 00 00 3B 66 
348ec 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
348f0 1e2 66 00 00 00 
348f4 1e3 00 00 00 00 
348f8 1e4 00 00 3E 63 
348fc 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34900 1e6 3E 00 00 00 
34904 1e7 00 00 00 00 
34908 1e8 00 00 3B 66 
3490c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34910 1ea 3E 06 06 0F 
34914 1eb 00 00 00 00 
34918 1ec 00 00 6E 33 
3491c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
34920 1ee 3E 30 30 78 
34924 1ef 00 00 00 00 
34928 1f0 00 00 3B 6E 
3492c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
34930 1f2 0F 00 00 00 
34934 1f3 00 00 00 00 
34938 1f4 00 00 3E 63 
3493c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
34940 1f6 3E 00 00 00 
34944 1f7 00 00 00 08 
34948 1f8 0C 0C 3F 0C 
3494c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34950 1fa 38 00 00 00 
34954 1fb 00 00 00 00 
34958 1fc 00 00 33 33 
3495c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
34960 1fe 6E 00 00 00 
34964 1ff 00 00 00 00 
34968 200 00 00 63 63 
3496c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34970 202 1C 00 00 00 
34974 203 00 00 00 00 
34978 204 00 00 63 63 
3497c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34980 206 36 00 00 00 
34984 207 00 00 00 00 
34988 208 00 00 63 36 
3498c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
34990 20a 63 00 00 00 
34994 20b 00 00 00 00 
34998 20c 00 00 63 63 
3499c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
349a0 20e 7E 60 30 1F 
349a4 20f 00 00 00 00 
349a8 210 00 00 7F 33 
349ac 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
349b0 212 7F 00 00 00 
349b4 213 00 00 00 70 
349b8 214 18 18 18 0E 
349bc 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
349c0 216 70 00 00 00 
349c4 217 00 00 00 18 
349c8 218 18 18 18 18 
349cc 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
349d0 21a 18 00 00 00 
349d4 21b 00 00 00 0E 
349d8 21c 18 18 18 70 
349dc 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
349e0 21e 0E 00 00 00 
349e4 21f 6E 3B 00 00 
349e8 220 00 00 00 00 
349ec 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
349f0 222 00 00 00 00 
349f4 223 00 00 00 00 
349f8 224 00 00       | 	byte	$00[10]
349fa 224 08 1C 36 63 
349fe 225 63 63 7F 00 
34a02 226 00 00 00 00 
34a06 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34a0a 228 03 03 03 03 
34a0e 229 43 66 3C 18 
34a12 22a 30 1E 00 00 
34a16 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34a1a 22c 33 33 33 33 
34a1e 22d 33 33       | 	byte	$33[6]
34a20 22e 6E 00 00 00 
34a24 22f 00 00 60 30 
34a28 230 18 00 3E 63 
34a2c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34a30 232 3E 00 00 00 
34a34 233 00 00 08 1C 
34a38 234 36 00 1E 30 
34a3c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34a40 236 6E 00 00 00 
34a44 237 00 00 00 00 
34a48 238 33 00 1E 30 
34a4c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34a50 23a 6E 00 00 00 
34a54 23b 00 00 1C 36 
34a58 23c 1C 00 33 33 
34a5c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34a60 23e 6E 00 00 00 
34a64 23f 00 00 60 30 
34a68 240 18 00 3E 63 
34a6c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34a70 242 3E 00 00 00 
34a74 243 00 00 00 00 
34a78 244 00 00 3E 63 
34a7c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34a80 246 3E 18 30 1E 
34a84 247 00 00 00 1C 
34a88 248 58 78 38 18 
34a8c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34a90 24a 3C 00 00 00 
34a94 24b 00 00 00 00 
34a98 24c 63 00 3E 63 
34a9c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
34aa0 24e 3E 00 00 00 
34aa4 24f 66 33 00 3E 
34aa8 250 63 63 63 63 
34aac 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34ab0 252 3E 00 00 00 
34ab4 253 00 00 CC 66 
34ab8 254 33 00 3E 63 
34abc 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34ac0 256 3E 00 00 00 
34ac4 257 00 00 18 3C 
34ac8 258 66 00 1C 18 
34acc 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34ad0 25a 3C 00 00 00 
34ad4 25b 30 18 00 7F 
34ad8 25c 63 61 30 18 
34adc 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34ae0 25e 7F 00 00 00 
34ae4 25f 00 63 00 08 
34ae8 260 1C 36 63 63 
34aec 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34af0 262 63 00 00 00 
34af4 263 30 18 00 3C 
34af8 264 66 43 03 03 
34afc 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34b00 266 3C 00 00 00 
34b04 267 30 18 00 7F 
34b08 268 66 46 16 1E 
34b0c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34b10 26a 7F 00 00 00 
34b14 26b 0C 06 00 0F 
34b18 26c 06 06 06 06 
34b1c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34b20 26e 7F 00 00 00 
34b24 26f 30 18 00 1C 
34b28 270 18 18 18 18 
34b2c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34b30 272 3C 00 00 00 
34b34 273 00 00 08 1C 
34b38 274 36 00 3E 63 
34b3c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34b40 276 3E 00 00 00 
34b44 277 00 00 00 00 
34b48 278 63 00 3E 63 
34b4c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34b50 27a 3E 00 00 00 
34b54 27b 00 00 00 6F 
34b58 27c 46 26 06 06 
34b5c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34b60 27e 7F 00 00 00 
34b64 27f 00 00 00 6E 
34b68 280 4C 2C 0C 0C 
34b6c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34b70 282 1E 00 00 00 
34b74 283 30 18 00 3E 
34b78 284 63 63 06 1C 
34b7c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34b80 286 3E 00 00 00 
34b84 287 00 00 60 30 
34b88 288 18 00 3E 63 
34b8c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34b90 28a 3E 00 00 00 
34b94 28b 00 63 00 3E 
34b98 28c 63 63 63 63 
34b9c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34ba0 28e 3E 00 00 00 
34ba4 28f 00 63 00 63 
34ba8 290 63 63 63 63 
34bac 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34bb0 292 3E 00 00 00 
34bb4 293 6C 38 00 7E 
34bb8 294 7E 5A 18 18 
34bbc 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34bc0 296 3C 00 00 00 
34bc4 297 00 00 60 48 
34bc8 298 2C 0C 3F 0C 
34bcc 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34bd0 29a 38 00 00 00 
34bd4 29b 00 00 00 0F 
34bd8 29c 26 36 1E 0E 
34bdc 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34be0 29e 7F 00 00 00 
34be4 29f 00 00 00 00 
34be8 2a0 00 63 36 1C 
34bec 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34bf0 2a2 00 00 00 00 
34bf4 2a3 00 00       | 	byte	$00[6]
34bf6 2a3 36 1C 08 00 
34bfa 2a4 3E 63 03 03 
34bfe 2a5 03 63 3E 00 
34c02 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34c06 2a7 30 18 0C 00 
34c0a 2a8 1E 30 3E 33 
34c0e 2a9 33 33 6E 00 
34c12 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34c16 2ab 60 30 18 00 
34c1a 2ac 1C 18 18 18 
34c1e 2ad 18 18 3C 00 
34c22 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34c26 2af 60 30 18 00 
34c2a 2b0 3E 63 63 63 
34c2e 2b1 63 63 3E 00 
34c32 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34c36 2b3 30 18 0C 00 
34c3a 2b4 33 33 33 33 
34c3e 2b5 33 33 6E 00 
34c42 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34c46 2b7 00 08 1C 36 
34c4a 2b8 63 63 7F 63 
34c4e 2b9 63 63 63 18 
34c52 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34c56 2bb 00 00 00 00 
34c5a 2bc 1E 30 3E 33 
34c5e 2bd 33 33 6E 18 
34c62 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34c66 2bf 00 7F 63 61 
34c6a 2c0 30 18 0C 06 
34c6e 2c1 43 63 7F 00 
34c72 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34c76 2c3 36 1C 08 00 
34c7a 2c4 7F 33 18 0C 
34c7e 2c5 06 63 7F 00 
34c82 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34c86 2c7 00 7F 66 46 
34c8a 2c8 16 1E 16 06 
34c8e 2c9 46 66 7F 18 
34c92 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34c96 2cb 00 00 00 00 
34c9a 2cc 3E 63 7F 03 
34c9e 2cd 03 63 3E 18 
34ca2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34ca6 2cf 00 3C 66 03 
34caa 2d0 1F 03 0F 03 
34cae 2d1 03 66 3C 00 
34cb2 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34cb6 2d3 60 30 18 00 
34cba 2d4 7F 33 18 0C 
34cbe 2d5 06 63 7F 00 
34cc2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34cc6 2d7 00 3C 66 43 
34cca 2d8 03 03 03 03 
34cce 2d9 43 66 3C 00 
34cd2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34cd6 2db 00 00 00 00 
34cda 2dc 3E 63 06 1C 
34cde 2dd 30 63 3E 18 
34ce2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34ce6 2df 00 00 00 00 
34cea 2e0 00 00       | 	byte	$00[6]
34cec 2e1 6C 36 1B 36 
34cf0 2e2 6C 00 00 00 
34cf4 2e3 00 00 00 00 
34cf8 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34cfc 2e5 1B 36 6C 36 
34d00 2e6 1B 00 00 00 
34d04 2e7 88 22 88 22 
34d08 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34d0c 2e9 88 22 88 22 
34d10 2ea 88 22 88 22 
34d14 2eb AA 55 AA 55 
34d18 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34d1c 2ed AA 55 AA 55 
34d20 2ee AA 55 AA 55 
34d24 2ef BB EE BB EE 
34d28 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34d2c 2f1 BB EE BB EE 
34d30 2f2 BB EE BB EE 
34d34 2f3 18 18 18 18 
34d38 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34d3c 2f5 18 18 18 18 
34d40 2f6 18 18 18 18 
34d44 2f7 18 18 18 18 
34d48 2f8 18 18 18    | 	byte	$18[15]
34d4b 2f8 1F 18 18 18 
34d4f 2f9 18 18 18 18 
34d53 2fa 18 30 18 00 
34d57 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34d5b 2fc 63 7F 63 63 
34d5f 2fd 63 63 00 00 
34d63 2fe 00 1C 36 00 
34d67 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34d6b 300 63 7F 63 63 
34d6f 301 63 63 00 00 
34d73 302 00 36 1C 00 
34d77 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34d7b 304 1E 16 06 46 
34d7f 305 66 7F 00 00 
34d83 306 00 00 00 00 
34d87 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34d8b 308 1C 30 60 63 
34d8f 309 63 3E 18 30 
34d93 30a 1E 6C 6C 6C 
34d97 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34d9b 30c 6F 6C 6C 6C 
34d9f 30d 6C 6C 6C 6C 
34da3 30e 6C 6C 6C 6C 
34da7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34dab 310 6C 6C 6C 6C 
34daf 311 6C 6C 6C 6C 
34db3 312 6C          | 	byte	$6c[9]
34db4 313 00 00 00 00 
34db8 314 00          | 	byte	$00[5]
34db9 314 7F 60 6F 6C 
34dbd 315 6C 6C 6C 6C 
34dc1 316 6C 6C 6C 6C 
34dc5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34dc9 318 6F 60 7F 00 
34dcd 319 00 00 00 00 
34dd1 31a 00 00 00 18 
34dd5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34dd9 31c 61 30 18 0C 
34ddd 31d 06 43 63 7F 
34de1 31e 00 00 00 00 
34de5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34de9 320 00 7F 33 18 
34ded 321 0C 06 63 7F 
34df1 322 00 00 00 00 
34df5 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34df9 324 00 00 1F 18 
34dfd 325 18 18 18 18 
34e01 326 18 18 18 18 
34e05 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34e09 328 18 18 F8 00 
34e0d 329 00 00 00 00 
34e11 32a 00 00 00 18 
34e15 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34e19 32c 18 18 FF 00 
34e1d 32d 00 00 00 00 
34e21 32e 00 00 00 00 
34e25 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e29 330 00 00 FF 18 
34e2d 331 18 18 18 18 
34e31 332 18 18 18 18 
34e35 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34e39 334 18 18 F8 18 
34e3d 335 18 18 18 18 
34e41 336 18 18 18 00 
34e45 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34e49 338 00 00 FF 00 
34e4d 339 00 00 00 00 
34e51 33a 00 00 00 18 
34e55 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34e59 33c 18 18 FF 18 
34e5d 33d 18 18 18 18 
34e61 33e 18 18 18 63 
34e65 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34e69 340 36 63 63 7F 
34e6d 341 63 63 63 63 
34e71 342 00 00 00 00 
34e75 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34e79 344 00 1E 30 3E 
34e7d 345 33 33 33 6E 
34e81 346 00 00 00 6C 
34e85 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34e89 348 EC 0C FC 00 
34e8d 349 00 00 00 00 
34e91 34a 00 00 00 00 
34e95 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e99 34c FC 0C EC 6C 
34e9d 34d 6C 6C 6C 6C 
34ea1 34e 6C 6C 6C 6C 
34ea5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34ea9 350 EF 00 FF 00 
34ead 351 00 00 00 00 
34eb1 352 00 00 00 00 
34eb5 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34eb9 354 FF 00 EF 6C 
34ebd 355 6C 6C 6C 6C 
34ec1 356 6C 6C 6C 6C 
34ec5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34ec9 358 EC 0C EC 6C 
34ecd 359 6C 6C 6C 6C 
34ed1 35a 6C 6C 6C 00 
34ed5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34ed9 35c FF 00 FF 00 
34edd 35d 00 00 00 00 
34ee1 35e 00 00 00 6C 
34ee5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34ee9 360 EF 00 EF 6C 
34eed 361 6C 6C 6C 6C 
34ef1 362 6C 6C 6C 00 
34ef5 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34ef9 364 63 3E 63 63 
34efd 365 63 63 3E 63 
34f01 366 00 00 00 00 
34f05 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34f09 368 30 3C 36 33 
34f0d 369 33 33 33 6E 
34f11 36a 00 00 00 00 
34f15 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34f19 36c 66 66 6F 66 
34f1d 36d 66 66 36 1F 
34f21 36e 00 00 00 36 
34f25 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34f29 370 66 66 66 66 
34f2d 371 66 66       | 	byte	$66[6]
34f2f 371 36 1F 00 00 
34f33 372 00 00 63 00 
34f37 373 7F 66 46 16 
34f3b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34f3f 375 66 7F 00 00 
34f43 376 00 6C 38 00 
34f47 377 38 30 30 3C 
34f4b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34f4f 379 33 6E 00 00 
34f53 37a 00 36 1C 00 
34f57 37b 63 67 6F 7F 
34f5b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34f5f 37d 63 63 00 00 
34f63 37e 00 30 18 00 
34f67 37f 3C 18 18 18 
34f6b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34f6f 381 18 3C 00 00 
34f73 382 00 3C 66 00 
34f77 383 3C 18 18 18 
34f7b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34f7f 385 18 3C 00 00 
34f83 386 00 00 00 36 
34f87 387 1C 08 00 3E 
34f8b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
34f8f 389 63 3E 00 00 
34f93 38a 00 18 18 18 
34f97 38b 18 18 18 18 
34f9b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
34f9f 38d 00 00 00 00 
34fa3 38e 00 00 00 00 
34fa7 38f 00 00 00 00 | 	byte	$00[12]
34fab 390 F8 18 18 18 
34faf 391 18 18 18 18 
34fb3 392 18 FF FF FF 
34fb7 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
34fbb 394 FF FF FF FF 
34fbf 395 FF FF FF FF 
34fc3 396 FF          | 	byte	$ff[9]
34fc4 397 00 00 00 00 
34fc8 398 00 00 00    | 	byte	$00[7]
34fcb 398 FF FF FF FF 
34fcf 399 FF FF FF FF 
34fd3 39a FF          | 	byte	$ff[9]
34fd4 39b 00 00 00 7E 
34fd8 39c 7E 5A 18 18 
34fdc 39d 18 18 18 18 
34fe0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
34fe4 39f 1C 36 1C 63 
34fe8 3a0 63 63 63 63 
34fec 3a1 63 63 63 63 
34ff0 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34ff4 3a3 FF FF FF FF 
34ff8 3a4 FF FF FF    | 	byte	$ff[7]
34ffb 3a4 00 00 00 00 
34fff 3a5 00 00 00 00 
35003 3a6 00          | 	byte	$00[9]
35004 3a7 30 18 00 3E 
35008 3a8 63 63 63 63 
3500c 3a9 63 63 63 63 
35010 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35014 3ab 00 00 00 1E 
35018 3ac 33 33 33 1B 
3501c 3ad 33 63 63 63 
35020 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
35024 3af 1C 36 00 3E 
35028 3b0 63 63 63 63 
3502c 3b1 63 63 63 63 
35030 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35034 3b3 30 18 00 63 
35038 3b4 67 6F 7F 7B 
3503c 3b5 73 63 63 63 
35040 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
35044 3b7 00 00 60 30 
35048 3b8 18 00 3B 66 
3504c 3b9 66 66 66 66 
35050 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
35054 3bb 00 00 36 1C 
35058 3bc 08 00 3B 66 
3505c 3bd 66 66 66 66 
35060 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
35064 3bf 36 1C 00 3E 
35068 3c0 63 63 06 1C 
3506c 3c1 30 60 63 63 
35070 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
35074 3c3 00 00 36 1C 
35078 3c4 08 00 3E 63 
3507c 3c5 06 1C 30 63 
35080 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
35084 3c7 30 18 00 3F 
35088 3c8 66 66 66 3E 
3508c 3c9 36 66 66 66 
35090 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
35094 3cb 30 18 00 63 
35098 3cc 63 63 63 63 
3509c 3cd 63 63 63 63 
350a0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
350a4 3cf 00 00 60 30 
350a8 3d0 18 00 3B 6E 
350ac 3d1 66 06 06 06 
350b0 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
350b4 3d3 66 33 00 63 
350b8 3d4 63 63 63 63 
350bc 3d5 63 63 63 63 
350c0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
350c4 3d7 00 00 60 30 
350c8 3d8 18 00 63 63 
350cc 3d9 63 63 63 63 
350d0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
350d4 3db 30 18 00 66 
350d8 3dc 66 66 66 3C 
350dc 3dd 18 18 18 18 
350e0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
350e4 3df 00 00 00 08 
350e8 3e0 0C 0C 3F 0C 
350ec 3e1 0C 0C 0C 6C 
350f0 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
350f4 3e3 30 18 00 00 
350f8 3e4 00 00 00 00 
350fc 3e5 00 00 00 00 
35100 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35104 3e7 00 00 00 00 
35108 3e8 00 00 00 00 | 	byte	$00[8]
3510c 3e9 7F 00 00 00 
35110 3ea 00 00 00 00 
35114 3eb 66 33 00 00 
35118 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3511c 3ed 00 00 00 00 
35120 3ee 00 00 00 00 
35124 3ef 00 00 00 00 
35128 3f0 00 00 00 00 
3512c 3f1 00 00 00 00 
35130 3f2 00          | 	byte	$00[21]
35131 3f2 0C 06 3C 36 
35135 3f3 1C 00 00 00 
35139 3f4 00 00 00 00 
3513d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35141 3f6 00 00 00 63 
35145 3f7 3E 00 00 00 
35149 3f8 00 00 00 00 
3514d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35151 3fa 00 00 00 00 
35155 3fb 3E 63 06 1C 
35159 3fc 36 63 63 36 
3515d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
35161 3fe 00 00 00 00 
35165 3ff 00 00 00 00 | 	byte	$00[8]
35169 400 18 00 7E 00 
3516d 401 18 00 00 00 
35171 402 00 00 00 00 
35175 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35179 404 00 00 00 00 
3517d 405 00 00 00 00 | 	byte	$00[8]
35181 406 18 30 1E 00 
35185 407 00 00 1C 36 
35189 408 36 1C 00 00 
3518d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
35191 40a 00 00 00 00 
35195 40b 63 00 00 00 
35199 40c 00 00 00 00 
3519d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351a1 40e 00 00 00 18 
351a5 40f 18 00 00 00 
351a9 410 00 00 00 00 
351ad 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351b1 412 00 00 00 00 
351b5 413 00          | 	byte	$00[5]
351b6 413 CC 66 33 00 
351ba 414 33 33 33 33 
351be 415 33 33 6E 00 
351c2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
351c6 417 00 3F 66 66 
351ca 418 66 3E 36 66 
351ce 419 66 66 6F 00 
351d2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
351d6 41b 36 1C 08 00 
351da 41c 3B 6E 66 06 
351de 41d 06 06 0F 00 
351e2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
351e6 41f 00 00 00 7E 
351ea 420 7E 7E 7E 7E 
351ee 421 7E 7E 00 00 
351f2 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
351f6 423 00 00 00 00 
351fa 424 00 00 00 00 
351fe 425 00 00 00 00 
35202 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35204 427             | 'vga_font       file "vgafont.def"
35204 427 00 00 00 00 
      ...             
35234 433 00 00 00 00 
35238 434 00 00 00    | st_font        file "st4font.def"
3523b 434 FF FF 00 00 
3523f 435 00 00 00 00 
35243 436 00 18 18 18 
35247 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3524b 438 18 18 18 18 
3524f 439 18 18 18 18 
35253 43a 18          | 	byte	$18[9]
35254 43b 00 00 00 00 
35258 43c 00 00 00    | 	byte	$00[7]
3525b 43c FF FF 18 18 
3525f 43d 18 18 18 18 
35263 43e 18 18 18 18 
35267 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3526b 440 FF FF 00 00 
3526f 441 00 00 00 00 
35273 442 00 18 18 18 
35277 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3527b 444 1F 1F 18 18 
3527f 445 18 18 18 18 
35283 446 18 18 18 18 
35287 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3528b 448 F8 F8 18 18 
3528f 449 18 18 18 18 
35293 44a 18 00 00 00 
35297 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3529b 44c 1F 1F 18 18 
3529f 44d 18 18 18 18 
352a3 44e 18 00 00 00 
352a7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
352ab 450 F8 F8 18 18 
352af 451 18 18 18 18 
352b3 452 18 18 18 18 
352b7 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
352bb 454 1F 1F 00 00 
352bf 455 00 00 00 00 
352c3 456 00 18 18 18 
352c7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
352cb 458 F8 F8 00 00 
352cf 459 00 00 00 00 
352d3 45a 00 18 18 18 
352d7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
352db 45c FF FF 18 18 
352df 45d 18 18 18 18 
352e3 45e 18 00 00 18 
352e7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
352eb 460 66 7E 7E 66 
352ef 461 66 66 66 30 
352f3 462 18 00 00 7E 
352f7 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
352fb 464 3E 06 06 06 
352ff 465 06 7E 7E 18 
35303 466 0C 30 18 3C 
35307 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3530b 468 06 06 06 66 
3530f 469 66 7E 3C 00 
35313 46a 00 30 18 66 
35317 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3531b 46c 7E 7E 76 76 
3531f 46d 66 66 66 00 
35323 46e 00 30 18 7C 
35327 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3532b 470 1C 38 70 60 
3532f 471 60 7E 3E 00 
35333 472 00 30 18 7E 
35337 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3533b 474 18 0C 0C 06 
3533f 475 06 7E 7E 00 
35343 476 00 18 18 00 
35347 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3534b 478 18 18 0C 0C 
3534f 479 06 7E 7E 00 
35353 47a 00 30 18 3C 
35357 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3535b 47c 66 66 66 66 
3535f 47d 66          | 	byte	$66[5]
35360 47e 7E 3C 00 00 
35364 47f 00 00 06 06 
35368 480 06 06 16 1E 
3536c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
35370 482 7E 7E 00 00 
35374 483 00 00 00 00 
35378 484 00 3C 7C 60 
3537c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
35380 486 7E 7C 30 18 
35384 487 00 00 00 00 
35388 488 00 3C 7E 66 
3538c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
35390 48a 7E 7C 18 0C 
35394 48b 00 00 30 18 
35398 48c 00 3C 3E 06 
3539c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
353a0 48e 7E 7C 00 00 
353a4 48f 00 00 30 18 
353a8 490 00 3E 7E 66 
353ac 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
353b0 492 66 66 00 00 
353b4 493 00 00 30 18 
353b8 494 00 7C 7E 06 
353bc 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
353c0 496 7E 3E 00 00 
353c4 497 00 00 30 18 
353c8 498 00 7E 7E 30 
353cc 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
353d0 49a 7E 7E 00 00 
353d4 49b 00 00 18 18 
353d8 49c 00 7E 7E 30 
353dc 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
353e0 49e 7E 7E 00 00 
353e4 49f 00 00 30 18 
353e8 4a0 00 3C 7E 66 
353ec 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
353f0 4a2 7E 3C 00 00 
353f4 4a3 00 00 1C 1C 
353f8 4a4 18 18 38 3C 
353fc 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
35400 4a6 3C 3C 00 00 
35404 4a7 00 00 00 00 
35408 4a8 00 00 00 00 
3540c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35410 4aa 00 00 00 00 
35414 4ab 00 00       | 	byte	$00[6]
35416 4ab 18 18 18 18 
3541a 4ac 18 18 18 18 | 	byte	$18[8]
3541e 4ad 00 00 18 18 
35422 4ae 00 00 00 00 
35426 4af 66 66 66 66 
3542a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3542e 4b1 00 00 00 00 
35432 4b2 00 00 00 00 
35436 4b3 00          | 	byte	$00[9]
35437 4b3 66 66 FF FF 
3543b 4b4 66 66 FF FF 
3543f 4b5 66 66 00 00 
35443 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
35447 4b7 7C 7E 06 06 
3544b 4b8 3E 7C 60 60 
3544f 4b9 7E 3E 18 18 
35453 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
35457 4bb 66 30 30 18 
3545b 4bc 18 0C 0C 66 
3545f 4bd 66 00 00 00 
35463 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
35467 4bf 66 66 3C 1C 
3546b 4c0 1C FC FE 66 
3546f 4c1 66 FE FC 00 
35473 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
35477 4c3 18 18 18 18 
3547b 4c4 00 00 00 00 
3547f 4c5 00 00 00 00 
35483 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
35487 4c7 18 1C 0C 0C 
3548b 4c8 0C 0C 0C 0C 
3548f 4c9 1C 18 30 00 
35493 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
35497 4cb 18 38 30 30 
3549b 4cc 30 30 30 30 
3549f 4cd 38 18 0C 00 
354a3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
354a7 4cf 66 66 3C 3C 
354ab 4d0 FF FF 3C 3C 
354af 4d1 66 66 00 00 
354b3 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
354b7 4d3 00 18 18 18 
354bb 4d4 7E 7E 18 18 
354bf 4d5 18 00 00 00 
354c3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
354c7 4d7 00 00 00 00 
354cb 4d8 00 00       | 	byte	$00[6]
354cd 4d9 18 18 18 18 
354d1 4da 18          | 	byte	$18[5]
354d2 4da 0C 04 00 00 
354d6 4db 00 00 00 00 
354da 4dc 7E 7E 00 00 
354de 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
354e2 4de 00 00 00 00 
354e6 4df 00 00 00 00 
354ea 4e0 00 00 00 00 
354ee 4e1 00          | 	byte	$00[13]
354ef 4e1 18 18 18 00 
354f3 4e2 00 00 00 60 
354f7 4e3 60 60 30 30 
354fb 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
354ff 4e5 06 06 06 00 
35503 4e6 00 00 00 3C 
35507 4e7 7E 66 66 66 
3550b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3550f 4e9 66 7E 3C 00 
35513 4ea 00 00 00 18 
35517 4eb 18 1C 1C 18 
3551b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3551f 4ed 18 7E 7E 00 
35523 4ee 00 00 00 3C 
35527 4ef 7E 66 66 30 
3552b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3552f 4f1 0C 7E 7E 00 
35533 4f2 00 00 00 7E 
35537 4f3 7E 30 30 18 
3553b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3553f 4f5 66 7E 3C 00 
35543 4f6 00 00 00 30 
35547 4f7 30 38 38 3C 
3554b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3554f 4f9 7E 30 30 00 
35553 4fa 00 00 00 7E 
35557 4fb 7E 06 06 3E 
3555b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3555f 4fd 66 7E 3C 00 
35563 4fe 00 00 00 38 
35567 4ff 3C 0E 06 06 
3556b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3556f 501 66 7E 3C 00 
35573 502 00 00 00 7E 
35577 503 7E 60 60 30 
3557b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3557f 505 0C 0C 0C 00 
35583 506 00 00 00 3C 
35587 507 7E 66 66 3C 
3558b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3558f 509 66 7E 3C 00 
35593 50a 00 00 00 3C 
35597 50b 7E 66 66 7E 
3559b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3559f 50d 70 3C 1C 00 
355a3 50e 00 00 00 00 
355a7 50f 00 00 18 18 
355ab 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
355af 511 18 18 18 00 
355b3 512 00 00 00 00 
355b7 513 00 00 18 18 
355bb 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
355bf 515 18 18 18 0C 
355c3 516 04 00 00 00 
355c7 517 70 38 1C 0E 
355cb 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
355cf 519 70 00 00 00 
355d3 51a 00 00 00 00 
355d7 51b 00 00 7E 7E 
355db 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
355df 51d 00 00 00 00 
355e3 51e 00 00 00 00 | 	byte	$00[8]
355e7 51f 0E 1C 38 70 
355eb 520 E0 70 38 1C 
355ef 521 0E 00 00 00 
355f3 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
355f7 523 7E 66 66 30 
355fb 524 30 18 18 18 
355ff 525 00 18 18 00 
35603 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35607 527 7E 66 66 66 
3560b 528 66 36 06 66 
3560f 529 66 7E 3C 00 
35613 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35617 52b 3C 7E 66 66 
3561b 52c 66 7E 7E 66 
3561f 52d 66 66 66 00 
35623 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35627 52f 7E 66 66 7E 
3562b 530 3E 66 66 66 
3562f 531 66 7E 3E 00 
35633 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35637 533 7E 66 66 06 
3563b 534 06 06 06 66 
3563f 535 66 7E 3C 00 
35643 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
35647 537 7E 66 66 66 
3564b 538 66 66 66 66 
3564f 539 66 7E 3E 00 
35653 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
35657 53b 7E 06 06 3E 
3565b 53c 3E 06 06 06 
3565f 53d 06 7E 7E 00 
35663 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
35667 53f 7E 06 06 3E 
3566b 540 3E 06 06 06 
3566f 541 06 06 06 00 
35673 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
35677 543 7E 06 06 76 
3567b 544 76 66 66 66 
3567f 545 66 7E 3C 00 
35683 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
35687 547 66 66 66 7E 
3568b 548 7E 66 66 66 
3568f 549 66 66 66 00 
35693 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
35697 54b 7E 18 18 18 
3569b 54c 18 18 18 18 
3569f 54d 18 7E 7E 00 
356a3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
356a7 54f 60 60 60 60 
356ab 550 60 60 60    | 	byte	$60[7]
356ae 551 66 66 7E 3C 
356b2 552 00 00 00 00 
356b6 553 66 66 36 36 
356ba 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
356be 555 66 66 C6 C6 
356c2 556 00 00 00 00 
356c6 557 06 06 06 06 
356ca 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
356ce 559 06 06 7E 7E 
356d2 55a 00 00 00 00 
356d6 55b C6 C6 EE EE 
356da 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
356de 55d C6 C6 C6 C6 
356e2 55e 00 00 00 00 
356e6 55f 66 66 66 6E 
356ea 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
356ee 561 76 66 66 66 
356f2 562 00 00 00 00 
356f6 563 3C 7E 66 66 
356fa 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
356fe 565 66 66 7E 3C 
35702 566 00 00 00 00 
35706 567 3E 7E 66 66 
3570a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3570e 569 06 06 06 06 
35712 56a 00 00 00 00 
35716 56b 3C 7E 66 66 
3571a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3571e 56d 66 56 3E 6C 
35722 56e 00 00 00 00 
35726 56f 3E 7E 66 66 
3572a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3572e 571 66 66 C6 C6 
35732 572 00 00 00 00 
35736 573 7C 7E 06 06 
3573a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3573e 575 60 60 7E 3E 
35742 576 00 00 00 00 
35746 577 7E 7E 18 18 
3574a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3574e 579 18 18 18 18 
35752 57a 00 00 00 00 
35756 57b 66 66 66 66 
3575a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3575e 57d 66 66 7E 3C 
35762 57e 00 00 00 00 
35766 57f 66 66 66 66 
3576a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3576e 581 3C 3C 18 18 
35772 582 00 00 00 00 
35776 583 C6 C6 C6 C6 
3577a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3577e 585 FE EE C6 82 
35782 586 00 00 00 00 
35786 587 66 66 66 3C 
3578a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3578e 589 3C 66 66 66 
35792 58a 00 00 00 00 
35796 58b 66 66 66 66 
3579a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3579e 58d 18 18 18 18 
357a2 58e 00 00 00 00 
357a6 58f 7E 7E 30 30 
357aa 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
357ae 591 06 06 7E 7E 
357b2 592 00 00 00 00 
357b6 593 3C 3C 0C 0C 
357ba 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
357be 595 0C 0C 3C 3C 
357c2 596 00 00 00 00 
357c6 597 06 06 0C 0C 
357ca 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
357ce 599 60 60 C0 C0 
357d2 59a 00 00 00 00 
357d6 59b 3C 3C 30 30 
357da 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
357de 59d 30 30 3C 3C 
357e2 59e 00 00 00 00 
357e6 59f 18 18 3C 3C 
357ea 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
357ee 5a1 00 00 00 00 
357f2 5a2 00 00 00 00 
357f6 5a3 00 00 00 00 
357fa 5a4 00 00 00 00 
357fe 5a5 00 00       | 	byte	$00[18]
35800 5a6 FE FE 00 00 
35804 5a7 00 00 0C 0C 
35808 5a8 18 18 00 00 
3580c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
35810 5aa 00 00 00 00 
35814 5ab 00 00 00 00 
35818 5ac 00          | 	byte	$00[9]
35819 5ac 3C 7C 60 7C 
3581d 5ad 7E 66 66 7E 
35821 5ae 7C 00 00 00 
35825 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35829 5b0 3E 7E 66 66 
3582d 5b1 66 66 66 7E 
35831 5b2 3E 00 00 00 
35835 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35839 5b4 3C 3E 06 06 
3583d 5b5 06 06 06 7E 
35841 5b6 7C 00 00 00 
35845 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35849 5b8 7C 7E 66 66 
3584d 5b9 66 66 66 7E 
35851 5ba 7C 00 00 00 
35855 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35859 5bc 3C 7E 66 66 
3585d 5bd 7E 06 06 7E 
35861 5be 7C 00 00 00 
35865 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
35869 5c0 18 7E 7E 18 
3586d 5c1 18 18 18 18 
35871 5c2 18 00 00 00 
35875 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35879 5c4 7C 7E 66 66 
3587d 5c5 66 66 7E 7C 
35881 5c6 60 7E 3E 00 
35885 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35889 5c8 3E 7E 66 66 
3588d 5c9 66 66 66 66 
35891 5ca 66 00 00 00 
35895 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
35899 5cc 1C 1C 18 18 
3589d 5cd 18 18 18 3C 
358a1 5ce 3C 00 00 00 
358a5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
358a9 5d0 30 30 30 30 
358ad 5d1 30 30 30 30 
358b1 5d2 30          | 	byte	$30[9]
358b2 5d2 3E 1E 00 00 
358b6 5d3 06 06 06 36 
358ba 5d4 36 1E 1E 1E 
358be 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
358c2 5d6 00 00 00 00 
358c6 5d7 1C 1C 18 18 
358ca 5d8 18 18 18 18 
358ce 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
358d2 5da 00 00 00 00 
358d6 5db 00 00 00    | 	byte	$00[7]
358d9 5dc 6C FE FE D6 
358dd 5dd D6 C6 C6 C6 
358e1 5de C6 00 00 00 
358e5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
358e9 5e0 3E 7E 66 66 
358ed 5e1 66 66 66 66 
358f1 5e2 66 00 00 00 
358f5 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
358f9 5e4 3C 7E 66 66 
358fd 5e5 66 66 66 7E 
35901 5e6 3C 00 00 00 
35905 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35909 5e8 3E 7E 66 66 
3590d 5e9 66 66 66 7E 
35911 5ea 3E 06 06 00 
35915 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35919 5ec 7C 7E 66 66 
3591d 5ed 66 66 66 7E 
35921 5ee 7C 60 60 00 
35925 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35929 5f0 3E 7E 66 06 
3592d 5f1 06 06 06 06 
35931 5f2 06 00 00 00 
35935 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35939 5f4 7C 7E 06 0E 
3593d 5f5 3C 70 60 7E 
35941 5f6 3E 00 00 00 
35945 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35949 5f8 7E 7E 18 18 
3594d 5f9 18 18 18 78 
35951 5fa 70 00 00 00 
35955 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35959 5fc 66 66 66 66 
3595d 5fd 66 66 66    | 	byte	$66[7]
35960 5fe 7E 7C 00 00 
35964 5ff 00 00 00 00 
35968 600 00 66 66 66 
3596c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35970 602 18 18 00 00 
35974 603 00 00 00 00 
35978 604 00 C6 C6 D6 
3597c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35980 606 C6 82 00 00 
35984 607 00 00 00 00 
35988 608 00 66 66 3C 
3598c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
35990 60a 66 66 00 00 
35994 60b 00 00 00 00 
35998 60c 00 66 66 66 
3599c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
359a0 60e 7C 60 7E 3E 
359a4 60f 00 00 00 00 
359a8 610 00 7E 7E 30 
359ac 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
359b0 612 7E 7E 00 00 
359b4 613 00 00 30 18 
359b8 614 18 18 18 0C 
359bc 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
359c0 616 18 30 00 00 
359c4 617 00 00 18 18 
359c8 618 18 18 18 18 
359cc 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
359d0 61a 18 18 00 00 
359d4 61b 00 00 0C 18 
359d8 61c 18 18 18 30 
359dc 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
359e0 61e 18 0C 00 00 
359e4 61f 00 00 6C 7E 
359e8 620 36 00 00 00 
359ec 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
359f0 622 00 00 00 00 
359f4 623 00 00 00 00 
359f8 624 00          | 	byte	$00[9]
359f9 624 18 18 18 18 
359fd 625 18 18 00 00 
35a01 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35a04 627             | 'amiga_font     file "amigafont.def"
35a04 627 00 6C FE FE 
35a08 628 7C 38 10 00 
35a0c 629 18 18 18 F8 
35a10 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35a14 62b C0 C0 C0 C0 
35a18 62c C0 C0 C0 C0 | 	byte	$c0[8]
35a1c 62d 18 18 18 1F 
35a20 62e 1F 00 00 00 
35a24 62f 18 18 18 1F 
35a28 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35a2c 631 00 00 00 1F 
35a30 632 1F 18 18 18 
35a34 633 C0 E0 70 38 
35a38 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35a3c 635 03 07 0E 1C 
35a40 636 38 70 E0 C0 
35a44 637 80 C0 E0 F0 
35a48 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35a4c 639 00 00 00 00 
35a50 63a F0 F0 F0 F0 
35a54 63b 01 03 07 0F 
35a58 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35a5c 63d F0 F0 F0 F0 
35a60 63e 00 00 00 00 
35a64 63f 0F 0F 0F 0F 
35a68 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35a6c 641 FF FF 00 00 
35a70 642 00 00 00 00 
35a74 643 00 00 00 00 
35a78 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35a7c 645 00 00 00 00 
35a80 646 0F 0F 0F 0F 
35a84 647 00 38 38 EE 
35a88 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35a8c 649 00 00 00 F8 
35a90 64a F8 18 18 18 
35a94 64b 00 00 00 FF 
35a98 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35a9c 64d 18 18 18 FF 
35aa0 64e FF 18 18 18 
35aa4 64f 00 00 3C 7E 
35aa8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35aac 651 00 00 00 00 
35ab0 652 FF FF FF FF 
35ab4 653 03 03 03 03 
35ab8 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35abc 655 00 00 00 FF 
35ac0 656 FF 18 18 18 
35ac4 657 18 18 18 FF 
35ac8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35acc 659 0F 0F 0F 0F 
35ad0 65a 0F 0F 0F 0F | 	byte	$0f[8]
35ad4 65b 18 18 18 F8 
35ad8 65c F8 00 00 00 
35adc 65d 1E 06 1E 06 
35ae0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35ae4 65f 00 18 3C 7E 
35ae8 660 18 18 18 00 
35aec 661 00 18 18 18 
35af0 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35af4 663 00 18 0C 7E 
35af8 664 0C 18 00 00 
35afc 665 00 18 30 7E 
35b00 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35b04 667 00 00 00 00 
35b08 668 00 00 00 00 
35b0c 669 00          | 	byte	$00[9]
35b0d 669 18 18 18 18 
35b11 66a 00 18 00 00 
35b15 66b 66 66 66 00 
35b19 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35b1d 66d 66 FF 66 66 
35b21 66e FF 66 00 18 
35b25 66f 7C 06 3C 60 
35b29 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35b2d 671 66 36 18 0C 
35b31 672 66 62 00 38 
35b35 673 6C 38 1C F6 
35b39 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35b3d 675 18 18 18 00 
35b41 676 00 00 00 00 
35b45 677 70 38 18 18 
35b49 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35b4d 679 0E 1C 18 18 
35b51 67a 1C 0E 00 00 
35b55 67b 66 3C FF 3C 
35b59 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35b5d 67d 18 18 7E 18 
35b61 67e 18 00 00 00 
35b65 67f 00 00 00 00 
35b69 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35b6d 681 00 00 7E 00 
35b71 682 00 00 00 00 
35b75 683 00 00 00 00 
35b79 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35b7d 685 60 30 18 0C 
35b81 686 06 02 00 00 
35b85 687 3C 66 76 6E 
35b89 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35b8d 689 18 1C 18 18 
35b91 68a 18 7E 00 00 
35b95 68b 3C 66 30 18 
35b99 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35b9d 68d 7E 30 18 30 
35ba1 68e 66 3C 00 00 
35ba5 68f 30 38 3C 36 
35ba9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35bad 691 7E 06 3E 60 
35bb1 692 66 3C 00 00 
35bb5 693 3C 06 3E 66 
35bb9 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35bbd 695 7E 60 30 18 
35bc1 696 0C 0C 00 00 
35bc5 697 3C 66 3C 66 
35bc9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35bcd 699 3C 66 7C 60 
35bd1 69a 30 1C 00 00 
35bd5 69b 00 18 18 00 
35bd9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35bdd 69d 00 18 18 00 
35be1 69e 18 18 0C 60 
35be5 69f 30 18 0C 18 
35be9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35bed 6a1 00 7E 00 00 
35bf1 6a2 7E 00 00 06 
35bf5 6a3 0C 18 30 18 
35bf9 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35bfd 6a5 3C 66 30 18 
35c01 6a6 00 18 00 00 
35c05 6a7 3C 66 76 76 
35c09 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35c0d 6a9 18 3C 66 66 
35c11 6aa 7E 66 00 00 
35c15 6ab 3E 66 3E 66 
35c19 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35c1d 6ad 3C 66 06 06 
35c21 6ae 66 3C 00 00 
35c25 6af 1E 36 66 66 
35c29 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35c2d 6b1 7E 06 3E 06 
35c31 6b2 06 7E 00 00 
35c35 6b3 7E 06 3E 06 
35c39 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35c3d 6b5 7C 06 06 76 
35c41 6b6 66 7C 00 00 
35c45 6b7 66 66 7E 66 
35c49 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35c4d 6b9 7E 18 18 18 
35c51 6ba 18 7E 00 00 
35c55 6bb 60 60 60 60 
35c59 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35c5d 6bd 66 36 1E 1E 
35c61 6be 36 66 00 00 
35c65 6bf 06 06 06 06 
35c69 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35c6d 6c1 C6 EE FE D6 
35c71 6c2 C6 C6 00 00 
35c75 6c3 66 6E 7E 7E 
35c79 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35c7d 6c5 3C 66 66 66 
35c81 6c6 66 3C 00 00 
35c85 6c7 3E 66 66 3E 
35c89 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35c8d 6c9 3C 66 66 66 
35c91 6ca 36 6C 00 00 
35c95 6cb 3E 66 66 3E 
35c99 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35c9d 6cd 3C 06 3C 60 
35ca1 6ce 60 3C 00 00 
35ca5 6cf 7E 18 18 18 
35ca9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35cad 6d1 66 66 66 66 
35cb1 6d2 66          | 	byte	$66[5]
35cb2 6d2 7E 00 00 66 
35cb6 6d3 66 66 66 3C 
35cba 6d4 18 00 00 C6 
35cbe 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35cc2 6d6 C6 00 00 66 
35cc6 6d7 66 3C 3C 66 
35cca 6d8 66 00 00 66 
35cce 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35cd2 6da 18 00 00 7E 
35cd6 6db 30 18 0C 06 
35cda 6dc 7E 00 00 78 
35cde 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35ce2 6de 78 00 00 02 
35ce6 6df 06 0C 18 30 
35cea 6e0 60 00 00 1E 
35cee 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35cf2 6e2 1E 00 00 10 
35cf6 6e3 38 6C C6 00 
35cfa 6e4 00 00 00 00 
35cfe 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d02 6e6 FF 00 00 18 
35d06 6e7 3C 7E 7E 3C 
35d0a 6e8 18 00 00 00 
35d0e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35d12 6ea 7C 00 00 06 
35d16 6eb 06 3E 66 66 
35d1a 6ec 3E 00 00 00 
35d1e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35d22 6ee 3C 00 00 60 
35d26 6ef 60 7C 66 66 
35d2a 6f0 7C 00 00 00 
35d2e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35d32 6f2 3C 00 00 70 
35d36 6f3 18 7C 18 18 
35d3a 6f4 18 00 00 00 
35d3e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35d42 6f6 60 3E 00 06 
35d46 6f7 06 3E 66 66 
35d4a 6f8 66 00 00 18 
35d4e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35d52 6fa 3C 00 00 60 
35d56 6fb 00 60 60 60 
35d5a 6fc 60 3C 00 06 
35d5e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35d62 6fe 66 00 00 1C 
35d66 6ff 18 18 18 18 
35d6a 700 3C 00 00 00 
35d6e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35d72 702 C6 00 00 00 
35d76 703 3E 66 66 66 
35d7a 704 66 00 00 00 
35d7e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35d82 706 3C 00 00 00 
35d86 707 3E 66 66 3E 
35d8a 708 06 06 00 00 
35d8e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35d92 70a 60 60 00 00 
35d96 70b 3E 66 06 06 
35d9a 70c 06 00 00 00 
35d9e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35da2 70e 3E 00 00 18 
35da6 70f 7E 18 18 18 
35daa 710 70 00 00 00 
35dae 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35db2 712 7C 00 00 00 
35db6 713 66 66 66 3C 
35dba 714 18 00 00 00 
35dbe 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35dc2 716 6C 00 00 00 
35dc6 717 66 3C 18 3C 
35dca 718 66 00 00 00 
35dce 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35dd2 71a 30 1E 00 00 
35dd6 71b 7E 30 18 0C 
35dda 71c 7E 00 00 18 
35dde 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35de2 71e 3C 00 18 18 
35de6 71f 18 18 18 18 
35dea 720 18 18 00 7E 
35dee 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35df2 722 60 00 10 18 
35df6 723 1C 1E 1C 18 
35dfa 724 10 00 08 18 
35dfe 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35e02 726 08 00       | 	byte	$08, $00
35e04 727 00 00 00 00 
35e08 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35e09 728 80 00 00 00 
35e0d 729 00 80 00 00 
35e11 72a 80 80 00 00 
35e15 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35e19 72c 80 00 80 00 
35e1d 72d 00 40 80 00 
35e21 72e AA AA AA 00 
35e25 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35e29 730 FF 00 00 00 
35e2d 731 00 FF 00 00 
35e31 732 FF FF 00 00 
35e35 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35e39 734 FF 00 FF 00 
35e3d 735 00 FF FF 00 
35e41 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35e44 737 00 00 00 00 
35e48 738 00          | ataripalette   file "ataripalettep2.def"
35e49 738 11 11 11 00 
35e4d 739 22 22 22 00 
35e51 73a 33 33 33 00 
35e55 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35e59 73c 55 55 55 00 
35e5d 73d 66 66 66 00 
35e61 73e 77 77 77 00 
35e65 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35e69 740 99 99 99 00 
35e6d 741 AA AA AA 00 
35e71 742 BB BB BB 00 
35e75 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35e79 744 DD DD DD 00 
35e7d 745 EE EE EE 00 
35e81 746 FF FF FF 00 
35e85 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35e89 748 00 14 40 00 
35e8d 749 00 1E 60 00 
35e91 74a 00 28 80 00 
35e95 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35e99 74c 00 3C BF 00 
35e9d 74d 00 46 DF 00 
35ea1 74e 00 50 FF 00 
35ea5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35ea9 750 39 77 FF 00 
35ead 751 55 8A FF 00 
35eb1 752 71 9E FF 00 
35eb5 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35eb9 754 AA C5 FF 00 
35ebd 755 C6 D8 FF 00 
35ec1 756 E3 EC FF 00 
35ec5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35ec9 758 00 00 40 00 
35ecd 759 00 00 60 00 
35ed1 75a 00 00 80 00 
35ed5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35ed9 75c 00 00 BF 00 
35edd 75d 00 00 DF 00 
35ee1 75e 00 00 FF 00 
35ee5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35ee9 760 39 39 FF 00 
35eed 761 55 55 FF 00 
35ef1 762 71 71 FF 00 
35ef5 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35ef9 764 AA AA FF 00 
35efd 765 C6 C6 FF 00 
35f01 766 E3 E3 FF 00 
35f05 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35f09 768 20 00 40 00 
35f0d 769 30 00 60 00 
35f11 76a 40 00 80 00 
35f15 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35f19 76c 60 00 BF 00 
35f1d 76d 70 00 DF 00 
35f21 76e 80 00 FF 00 
35f25 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35f29 770 9C 39 FF 00 
35f2d 771 AA 55 FF 00 
35f31 772 B8 71 FF 00 
35f35 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35f39 774 D5 AA FF 00 
35f3d 775 E3 C6 FF 00 
35f41 776 F1 E3 FF 00 
35f45 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35f49 778 40 00 40 00 
35f4d 779 60 00 60 00 
35f51 77a 80 00 80 00 
35f55 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35f59 77c BF 00 BF 00 
35f5d 77d DF 00 DF 00 
35f61 77e FF 00 FF 00 
35f65 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35f69 780 FF 39 FF 00 
35f6d 781 FF 55 FF 00 
35f71 782 FF 71 FF 00 
35f75 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
35f79 784 FF AA FF 00 
35f7d 785 FF C6 FF 00 
35f81 786 FF E3 FF 00 
35f85 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
35f89 788 40 00 20 00 
35f8d 789 60 00 30 00 
35f91 78a 80 00 40 00 
35f95 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
35f99 78c BF 00 60 00 
35f9d 78d DF 00 70 00 
35fa1 78e FF 00 80 00 
35fa5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
35fa9 790 FF 39 9C 00 
35fad 791 FF 55 AA 00 
35fb1 792 FF 71 B8 00 
35fb5 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
35fb9 794 FF AA D5 00 
35fbd 795 FF C6 E3 00 
35fc1 796 FF E3 F1 00 
35fc5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
35fc9 798 40 00 00 00 
35fcd 799 60 00 00 00 
35fd1 79a 80 00 00 00 
35fd5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
35fd9 79c BF 00 00 00 
35fdd 79d DF 00 00 00 
35fe1 79e FF 00 00 00 
35fe5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
35fe9 7a0 FF 39 39 00 
35fed 7a1 FF 55 55 00 
35ff1 7a2 FF 71 71 00 
35ff5 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
35ff9 7a4 FF AA AA 00 
35ffd 7a5 FF C6 C6 00 
36001 7a6 FF E3 E3 00 
36005 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
36009 7a8 40 10 00 00 
3600d 7a9 60 18 00 00 
36011 7aa 80 20 00 00 
36015 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
36019 7ac BF 30 00 00 
3601d 7ad DF 38 00 00 
36021 7ae FF 40 00 00 
36025 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
36029 7b0 FF 6A 39 00 
3602d 7b1 FF 80 55 00 
36031 7b2 FF 95 71 00 
36035 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
36039 7b4 FF BF AA 00 
3603d 7b5 FF D5 C6 00 
36041 7b6 FF EA E3 00 
36045 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
36049 7b8 40 20 00 00 
3604d 7b9 60 30 00 00 
36051 7ba 80 40 00 00 
36055 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
36059 7bc BF 60 00 00 
3605d 7bd DF 70 00 00 
36061 7be FF 80 00 00 
36065 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
36069 7c0 FF 9C 39 00 
3606d 7c1 FF AA 55 00 
36071 7c2 FF B8 71 00 
36075 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
36079 7c4 FF D5 AA 00 
3607d 7c5 FF E3 C6 00 
36081 7c6 FF F1 E3 00 
36085 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
36089 7c8 40 30 00 00 
3608d 7c9 60 48 00 00 
36091 7ca 80 60 00 00 
36095 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
36099 7cc BF 90 00 00 
3609d 7cd DF A8 00 00 
360a1 7ce FF C0 00 00 
360a5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
360a9 7d0 FF CE 39 00 
360ad 7d1 FF D5 55 00 
360b1 7d2 FF DC 71 00 
360b5 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
360b9 7d4 FF EA AA 00 
360bd 7d5 FF F1 C6 00 
360c1 7d6 FF F8 E3 00 
360c5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
360c9 7d8 30 40 00 00 
360cd 7d9 48 60 00 00 
360d1 7da 60 80 00 00 
360d5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
360d9 7dc 90 BF 00 00 
360dd 7dd A8 DF 00 00 
360e1 7de C0 FF 00 00 
360e5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
360e9 7e0 CE FF 39 00 
360ed 7e1 D5 FF 55 00 
360f1 7e2 DC FF 71 00 
360f5 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
360f9 7e4 EA FF AA 00 
360fd 7e5 F1 FF C6 00 
36101 7e6 F8 FF E3 00 
36105 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36109 7e8 00 40 00 00 
3610d 7e9 00 60 00 00 
36111 7ea 00 80 00 00 
36115 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36119 7ec 00 BF 00 00 
3611d 7ed 00 DF 00 00 
36121 7ee 00 FF 00 00 
36125 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36129 7f0 39 FF 39 00 
3612d 7f1 55 FF 55 00 
36131 7f2 71 FF 71 00 
36135 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36139 7f4 AA FF AA 00 
3613d 7f5 C6 FF C6 00 
36141 7f6 E3 FF E3 00 
36145 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36149 7f8 00 40 14 00 
3614d 7f9 00 60 1E 00 
36151 7fa 00 80 28 00 
36155 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36159 7fc 00 BF 3C 00 
3615d 7fd 00 DF 46 00 
36161 7fe 00 FF 50 00 
36165 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
36169 800 39 FF 77 00 
3616d 801 55 FF 8A 00 
36171 802 71 FF 9E 00 
36175 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36179 804 AA FF C5 00 
3617d 805 C6 FF D8 00 
36181 806 E3 FF EC 00 
36185 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
36189 808 00 40 28 00 
3618d 809 00 60 3C 00 
36191 80a 00 80 50 00 
36195 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
36199 80c 00 BF 78 00 
3619d 80d 00 DF 8C 00 
361a1 80e 00 FF A0 00 
361a5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
361a9 810 39 FF B5 00 
361ad 811 55 FF C0 00 
361b1 812 71 FF CA 00 
361b5 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
361b9 814 AA FF DF 00 
361bd 815 C6 FF EA 00 
361c1 816 E3 FF F4 00 
361c5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
361c9 818 00 40 40 00 
361cd 819 00 60 60 00 
361d1 81a 00 80 80 00 
361d5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
361d9 81c 00 BF BF 00 
361dd 81d 00 DF DF 00 
361e1 81e 00 FF FF 00 
361e5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
361e9 820 39 FF FF 00 
361ed 821 55 FF FF 00 
361f1 822 71 FF FF 00 
361f5 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
361f9 824 AA FF FF 00 
361fd 825 C6 FF FF 00 
36201 826 E3 FF FF 00 
36205 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36209 828 00 28 40 00 
3620d 829 00 3C 60 00 
36211 82a 00 50 80 00 
36215 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36219 82c 00 78 BF 00 
3621d 82d 00 8C DF 00 
36221 82e 00 A0 FF 00 
36225 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36229 830 39 B5 FF 00 
3622d 831 55 C0 FF 00 
36231 832 71 CA FF 00 
36235 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36239 834 AA DF FF 00 
3623d 835 C6 EA FF 00 
36241 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
36244 837             | 
36244 837             | '**********************************************************************************
36244 837             | '
36244 837             | '        Timings and colors definitions
36244 837             | '
36244 837             | '**********************************************************************************
36244 837             | 
36244 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
36244 837 08 00 00 00 
36248 838 3C 00 00 00 
3624c 839 08 00 00 00 
36250 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
36254 83b 07 00 00 00 
36258 83c 04 00 00 00 
3625c 83d 01 00 00 00 
36260 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
36264 83f 58 02 00 00 
36268 840 20 9E 4B 14 
3626c 841 FB A8 9E 01 
36270 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36274 843 00 00 00 00 
36278 844 C0 00 00 00 
3627c 845 00 00 00 00 
36280 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36284 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
36284 847 00 75 C7 97 
36288 848 27 47 F6 0A 
3628c 849 05 79 CB 9B 
36290 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
36294 84b             | 
36294 84b             | ''--------  Initialization  ----------------------------------------------------------------
36294 84b             | 
36294 84b 28 0C 64 FD | hdmi            setq    #6
36298 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3629c 84d 28 10 64 FD |                 setq    #8
362a0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
362a4 84f             | 
362a4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
362a8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
362ac 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
362b0 852 D6 C6 01 F1 |                 add     t1,hbase
362b4 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
362b8 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
362bc 855 7B 0B 80 5F 
362c0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
362c4 857 66 66 86 FF 
362c8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
362cc 859             | '
362cc 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
362d0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
362d4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
362d8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
362dc 85d             | 
362dc 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
362e0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
362e4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
362e8 860             | 
362e8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
362e8 860             | 
362e8 860 28 06 64 FD | p101            setq 	#3
362ec 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
362f0 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
362f4 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
362f8 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
362fc 865 00 A0 05 F6 |                 mov     dlinum, #0
36300 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36304 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36308 868             | 
36308 868             | 
36308 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3630c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
36310 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36314 86b             |                 
36314 86b             | 
36314 86b             | 
36314 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36314 86b             |   
36314 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36318 86c 29 FE 65 3D |          if_nc  setq2   #255
3631c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
36320 86e             | 
36320 86e             | '' -----   up porch (before the picture)
36320 86e             | 
36320 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36324 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36328 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3632c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
36330 872             |  
36330 872             |    
36330 872             |  
36330 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36334 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36338 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3633c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36340 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
36344 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
36348 878             | 
36348 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3634c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
36350 87a 48 00 B0 FD | 		call    #dli
36354 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
36358 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3635c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
36360 87e             |                 	
36360 87e             |                 
36360 87e             | 
36360 87e             |  
36360 87e             | '' ------- the main screen drawing starts here
36360 87e             | 
36360 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
36364 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
36368 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3636c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
36370 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
36374 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36378 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3637c 885             |               
3637c 885             | 
3637c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
36380 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
36384 887             | 
36384 887             | ' ---------------- All visible lines displayed now, start vblank  
36384 887             | 
36384 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
36388 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3638c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
36390 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
36394 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
36398 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3639c 88d             | 
3639c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3639c 88d             | 
3639c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3639c 88d             | 
3639c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
363a0 88e             | 
363a0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
363a4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
363a8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
363ac 891             | 
363ac 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
363b0 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
363b4 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
363b8 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
363bc 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
363c0 896             | 
363c0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
363c4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
363c8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
363cc 899 70 00 90 AD |     if_z        jmp     #preload
363d0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
363d4 89b 94 00 90 AD |     if_z        jmp     #preload2
363d8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
363dc 89d 0C 00 90 AD |     if_z        jmp     #p390
363e0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
363e4 89f 28 00 90 AD |     if_z        jmp     #p391  
363e8 8a0             | 
363e8 8a0 2D 00 64 FD | p308            ret
363ec 8a1             |    
363ec 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
363f0 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
363f4 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
363f8 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
363fc 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
36400 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36404 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36408 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3640c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
36410 8aa             |  
36410 8aa             | '' --------  Reload palette. To do 
36410 8aa             | 
36410 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36414 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36418 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3641c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
36420 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36424 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36428 8b0 70 FF 9F FD |         	jmp     #dli                
3642c 8b1             |       
3642c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3642c 8b1             | 
3642c 8b1             | 
3642c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3642c 8b1             | 
3642c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
36430 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36434 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36438 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3643c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
36440 8b6             |         
36440 8b6             | '' -------------- Preload a line from PSRAM        
36440 8b6             |         
36440 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
36444 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
36448 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3644c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
36450 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
36454 8bb             | 
36454 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
36458 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3645c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
36460 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
36464 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
36468 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3646c 8c1             |  
3646c 8c1             |  
3646c 8c1             | preload2      '  incmod  dlinum,#3
3646c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
36470 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
36474 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36478 8c4 28 02 64 FD |                 setq	#1
3647c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
36480 8c6             |                 
36480 8c6             | 
36480 8c6             | '' -------------- Draw sprites
36480 8c6             | 
36480 8c6 CF 5C 02 F6 | sprite          mov t8,frames
36484 8c7 10 5C 0E F5 | 		and t8,#16 wz
36488 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3648c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
36490 8ca             | 		
36490 8ca             | 
36490 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
36494 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
36498 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3649c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
364a0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
364a4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
364a8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
364ac 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
364b0 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
364b4 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
364b8 8d4 01 52 86 F1 |                 sub     sprite_h,#1
364bc 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
364c0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
364c4 8d7             | 
364c4 8d7             | 
364c4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
364c8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
364cc 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
364d0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
364d4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
364d8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
364dc 8dd 00 5E 06 F6 |                 mov 	t9,#0
364e0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
364e4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
364e8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
364ec 8e1             |      
364ec 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
364f0 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
364f4 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
364f8 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
364fc 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
36500 8e6             |                 
36500 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36504 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36508 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3650c 8e9             |   		
3650c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
36510 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36514 8eb             | 
36514 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36518 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3651c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
36520 8ee             |  
36520 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36524 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36528 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3652c 8f1             | 	
3652c 8f1             | 	
3652c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
36530 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36534 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36538 8f4             | 
36538 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3653c 8f5             | 
3653c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
36540 8f6 01 58 86 F1 | 	 	sub     t6,#1
36544 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
36548 8f8             | 
36548 8f8 28 58 62 FD |                 setq   	t6
3654c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
36550 8fa 28 5D 02 F6 |                 mov t8,sprite_w
36554 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
36558 8fc 24 00 90 AD |         if_z    jmp #p898
3655c 8fd             |          
3655c 8fd             |         
3655c 8fd 70 5F 06 F6 |                 mov  t9,#368
36560 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
36564 8ff             | 
36564 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
36568 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3656c 901 FF FF 7F FF 
36570 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
36574 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36578 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3657c 905 2D 01 00 F5 |                 and 0-0, t7
36580 906             |                
36580 906             | 
36580 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
36584 907 E5 E0 7A FA |                 wmlong 368,t3				
36588 908             |                 
36588 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3658c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
36590 90a 2D 00 64 FD |                 ret
36594 90b             | 	
36594 90b             | 	
36594 90b             |                
36594 90b             |  
36594 90b             | '' -------------- Graphics line ------------------------------------------------------------
36594 90b             |  
36594 90b             | 
36594 90b             | '' consts and vars
36594 90b             | 
36594 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
36598 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3659c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
365a0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
365a4 90f             | 
365a4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
365a8 910             | 
365a8 910             | '------ these longs will be set by setmode function
365a8 910             | 
365a8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
365ac 911 00 00 00 00 | m_sn            long    0        'sync
365b0 912 00 00 00 00 | m_bv            long    0        'blanks before visible
365b4 913 00 00 00 00 | m_vi            long    0        'visible pixels #
365b8 914             | 'm_border        long    0        'left/right borders
365b8 914 00 00 00 00 | i_upporch       long    0        'up porch lines
365bc 915 00 00 00 00 | i_vsync         long    0        'vsync lines
365c0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
365c4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
365c8 918 00 00 00 00 | i_totalvis      long    0
365cc 919             | 
365cc 919             | '-------------------------------------
365cc 919             |  
365cc 919 00 00 00 00 | linenum         long    0
365d0 91a 00 00 00 00 | frames          long    0
365d4 91b 00 00 00 00 | dlinum long 0
365d8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
365dc 91d             | 
365dc 91d 00 00 00 00 | vblankptr       long    0
365e0 91e 00 00 00 00 | modeptr         long    0
365e4 91f 00 00 00 00 | paletteptr      long    0
365e8 920 00 00 00 00 | dlptr           long    0
365ec 921 01 00 00 00 | hbase           long    1
365f0 922 00 00 00 00 | mailbox         long    0
365f4 923 00 00 00 00 | spriteptr          long 0
365f8 924             | 
365f8 924 00 00 00 00 | cmd             long    0
365fc 925 00 B0 07 00 | buf1            long    $80000-16384-4096
36600 926 00 04 00 00 | buf2            long    1024
36604 927 01 00 00 00 | dlptr2          long    1
36608 928 01 00 00 00 | dl              long    1
3660c 929             | 
3660c 929 00 00 00 00 | buf1c long 0
36610 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36614 92b 01 00 00 00 | framebuf2       long    1
36618 92c 01 00 00 00 | hsync0          long    1
3661c 92d 01 00 00 00 | hsync1          long    1
36620 92e             | 
36620 92e 01 00 00 00 | t1              long    1
36624 92f 00 00 00 00 | t2 long 0
36628 930 00 00 00 00 | t3 long 0
3662c 931 00 00 00 00 | t4 long 0
36630 932             | 
36630 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36634 933 00 00 00 00 | rcnt2           long    0
36638 934 00 00 00 00 | rcnt2a          long    0
3663c 935 00 00 00 00 | roffset         long    0
36640 936 00 00 00 00 | rdl             long    0  'dl repeat line
36644 937 00 00 00 00 | dlc             long    0  'dl command
36648 938             | 
36648 938 FF FF FF FF | affffffff       long    $ffffffff
3664c 939 00 00 00 00 | sprite1pointer long 0
36650 93a 00 00 00 00 | sprite1xy      long 0
36654 93b 00 00 00 00 | sprite1wh      long 0
36658 93c 00 00 00 00 | sprite2pointer long 0
3665c 93d 00 00 00 00 | sprite2xy      long 0
36660 93e 00 00 00 00 | sprite2wh      long 0
36664 93f 00 00 00 00 | sprite3pointer long 0
36668 940 00 00 00 00 | sprite3xy      long 0
3666c 941 00 00 00 00 | sprite3wh      long 0
36670 942 00 00 00 00 | sprite4pointer long 0
36674 943 00 00 00 00 | sprite4xy      long 0
36678 944 00 00 00 00 | sprite4wh      long 0
3667c 945 00 00 00 00 | sprite5pointer long 0
36680 946 00 00 00 00 | sprite5xy      long 0
36684 947 00 00 00 00 | sprite5wh      long 0
36688 948 00 00 00 00 | sprite6pointer long 0
3668c 949 00 00 00 00 | sprite6xy      long 0
36690 94a 00 00 00 00 | sprite6wh      long 0
36694 94b 00 00 00 00 | sprite7pointer long 0
36698 94c 00 00 00 00 | sprite7xy      long 0
3669c 94d 00 00 00 00 | sprite7wh      long 0
366a0 94e 00 00 00 00 | sprite8pointer long 0
366a4 94f 00 00 00 00 | sprite8xy      long 0
366a8 950 00 00 00 00 | sprite8wh      long 0
366ac 951 00 00 00 00 | sprite9pointer long 0
366b0 952 00 00 00 00 | sprite9xy      long 0
366b4 953 00 00 00 00 | sprite9wh      long 0
366b8 954 00 00 00 00 | sprite10pointer long 0
366bc 955 00 00 00 00 | sprite10xy      long 0
366c0 956 00 00 00 00 | sprite10wh      long 0
366c4 957 00 00 00 00 | sprite11pointer long 0
366c8 958 00 00 00 00 | sprite11xy      long 0
366cc 959 00 00 00 00 | sprite11wh      long 0
366d0 95a 00 00 00 00 | sprite12pointer long 0
366d4 95b 00 00 00 00 | sprite12xy      long 0
366d8 95c 00 00 00 00 | sprite12wh      long 0
366dc 95d 00 00 00 00 | sprite13pointer long 0
366e0 95e 00 00 00 00 | sprite13xy      long 0
366e4 95f 00 00 00 00 | sprite13wh      long 0
366e8 960 00 00 00 00 | sprite14pointer long 0
366ec 961 00 00 00 00 | sprite14xy      long 0
366f0 962 00 00 00 00 | sprite14wh      long 0
366f4 963 00 00 00 00 | sprite15pointer long 0
366f8 964 00 00 00 00 | sprite15xy      long 0
366fc 965 00 00 00 00 | sprite15wh      long 0
36700 966 00 00 00 00 | sprite16pointer long 0
36704 967 00 00 00 00 | sprite16xy      long 0
36708 968 00 00 00 00 | sprite16wh      long 0
3670c 969 00 00 00 00 | sprite17pointer long 0
36710 96a 00 00 00 00 | sprite17xy      long 0
36714 96b 00 00 00 00 | sprite17wh      long 0
36718 96c 00 00 00 00 | sprite18pointer long 0
3671c 96d 00 00 00 00 | sprite18xy      long 0
36720 96e 00 00 00 00 | sprite18wh      long 0
36724 96f 00 00 00 00 | spritenum long 0
36728 970             | 
36728 970 00 00 00 00 | spriteline long 0
3672c 971 84 03 00 00 | sprite_x long 900
36730 972 00 00 00 00 | sprite_y long 0
36734 973 10 00 00 00 | sprite_w long 16
36738 974 40 00 00 00 | sprite_h long 64
3673c 975 00 00 00 00 | l2 long 0
36740 976 00 00 00 00 | t5 long 0
36744 977 00 00 00 00 | t6 long 0
36748 978 00 00 00 00 | t7 long 0
3674c 979 00 00 00 00 | t8 long 0
36750 97a 00 00 00 00 | t9 long 0
36754 97b 00 00 00 00 | preloadaddr long 0
36758 97c 00 00 00 00 | preloadlineaddr long 0
3675c 97d 00 04 00 00 | a1024 long 1024
36760 97e             | 
36760 97e E0 03 00 00 | aa long 992
36764 97f FF 03 00 00 | a1023 long 1023
36768 980 00 10 00 00 | a4096 long 4096
3676c 981             |  fit 368
3676c 981             | _psram_spin2_dat_
3676c 981 00 00 00 00 
      ...             
36864 9bf 00 00 00 00 
36868 9c0 00 00 00 00 |     listdata long 0[8*8]
3686c 9c1             |             orgh
3686c                 | 
3686c                 | ' driver state
3686c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
36870     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36874                 | 
36874                 | ' delay profile
36874     07 00 00 00 
36878     00 CF 7B 05 
3687c     80 D1 F0 08 
36880     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36884     80 C4 60 0F 
36888     80 39 7A 12 
3688c     40 2D D9 13 
36890     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
36894                 | 
36894                 | ' data to be passed to driver when starting it
36894                 | startupData
36894     00 00 00 00 |     long    0           ' current frequency
36898     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3689c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
368a0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
368a4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
368a8     B4 68 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
368ac     34 69 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
368b0     54 69 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
368b4                 | 
368b4                 | ' data for memory
368b4                 | deviceData
368b4                 |     ' 16 bank parameters follow (16MB per bank)
368b4     00 00 00 00 
      ...             
368ec     00 00 00 00 
368f0     00 00 00 00 |     long    0[16]                               ' banks 0-15
368f4                 |     ' 16 banks of pin parameters follow
368f4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
368f8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
368fc     FF FF FF FF 
      ...             
3692c     FF FF FF FF 
36930     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36934                 | 
36934                 | ' data for COG polling
36934                 | qosData 
36934     00 00 FF FF 
36938     00 00 FF FF 
3693c     00 00 FF FF 
36940     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36944     00 00 FF FF 
36948     00 00 FF FF 
3694c     00 00 FF FF 
36950     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36954                 |     
36954                 | ' mailbox storage
36954                 | 
36954                 | mailboxes
36954     00 00 00 00 
      ...             
369ac     00 00 00 00 
369b0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
369b4                 | 	alignl
369b4                 | _psram16drv_spin2_dat_
369b4                 |                             orgh
369b4     00 00 00 00 
      ...             
369cc     00 00 00 00 
369d0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
369d4                 | 
369d4                 | driver_start
369d4                 |                             org
369d4 000             | '..................................................................................................
369d4 000             | ' Memory layout for COG RAM once operational:
369d4 000             | '
369d4 000             | '  COG RAM address      Usage
369d4 000             | '  ---------------      ----
369d4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
369d4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
369d4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
369d4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
369d4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
369d4 000             | '  ~$198-$1F3           State and register variables
369d4 000             | '
369d4 000             | ' Also during driver COG startup:
369d4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
369d4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
369d4 000             | '..................................................................................................
369d4 000             |                             
369d4 000             | ' Mailbox storage after vector initialization
369d4 000             | 
369d4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
369d8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
369dc 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
369e0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
369e4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
369e8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
369ec 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
369f0 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
369f4 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
369f8 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
369fc 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36a00 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36a04 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36a08 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36a0c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36a10 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36a14 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36a18 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36a1c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36a20 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36a24 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36a28 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36a2c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36a30 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36a34 018             | 
36a34 018             | ' Mailbox parameter addresses per COG once patched
36a34 018             |                             
36a34 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36a38 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36a3c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36a40 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36a44 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36a48 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36a4c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36a50 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36a54 020             | 
36a54 020             | '..................................................................................................
36a54 020             | ' Per COG request and state setup and service branching
36a54 020             |         
36a54 020             | cog0                 
36a54 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36a58 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36a5c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36a60 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36a64 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a68 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a6c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36a70 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36a74 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36a78 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a7c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a80 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36a84 02c             | cog1                        
36a84 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36a88 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36a8c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36a90 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36a94 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a98 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a9c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
36aa0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36aa4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36aa8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36aac 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ab0 037 33 CA 63 FD |                             execf   request-0               'jump to service
36ab4 038             | cog2                         
36ab4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36ab8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36abc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36ac0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36ac4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ac8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36acc 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36ad0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36ad4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36ad8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36adc 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ae0 043 33 CA 63 FD |                             execf   request-0               'jump to service
36ae4 044             | cog3                        
36ae4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36ae8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36aec 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36af0 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36af4 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36af8 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36afc 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36b00 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36b04 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36b08 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b0c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b10 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36b14 050             | cog4                        
36b14 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36b18 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36b1c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36b20 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36b24 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b28 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b2c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36b30 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36b34 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36b38 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b3c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b40 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36b44 05c             | cog5                        
36b44 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36b48 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36b4c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36b50 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36b54 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b58 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b5c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36b60 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36b64 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36b68 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b6c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b70 067 33 CA 63 FD |                             execf   request-0               'jump to service
36b74 068             | cog6                        
36b74 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36b78 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36b7c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36b80 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36b84 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b88 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b8c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36b90 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36b94 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36b98 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b9c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ba0 073 33 CA 63 FD |                             execf   request-0               'jump to service
36ba4 074             | cog7                        
36ba4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36ba8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36bac 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36bb0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36bb4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36bb8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bbc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36bc0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36bc4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36bc8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36bcc 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36bd0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36bd4 080             |                             fit     128
36bd4 080             | 
36bd4 080             |                             fit     128
36bd4 080             | pad                         long    0[128-$]                'align init code to $80
36bd4 080             | 
36bd4 080             | '..................................................................................................
36bd4 080             | 
36bd4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36bd4 080             | 
36bd4 080             | init                        
36bd4 080             |                             ' get driver scratch long address in hub
36bd4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36bd8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36bdc 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36be0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36be4 084             |                     
36be4 084             |                             ' read in the additional LUT RAM code
36be4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36be8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36bec 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36bf0 087             | 
36bf0 087             |                             ' read the startup parameters
36bf0 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36bf4 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36bf8 089             | 
36bf8 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36bf8 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36bfc 08a             | 
36bfc 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36c00 08b 01 00 00 5F 
36c04 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36c08 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36c0c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36c10 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36c14 090             | 
36c14 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36c14 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36c18 091 01 00 00 FF 
36c1c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36c20 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36c24 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36c28 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36c2c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36c30 097 08 DE 47 F5 |                             or      a, #8
36c34 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36c38 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36c3c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36c40 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36c44 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36c48 09d 01 DE 07 F1 |                             add     a, #1
36c4c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36c50 09f             |  
36c50 09f             |                             ' setup device control pin states
36c50 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36c54 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36c58 0a1 01 00 00 FF 
36c5c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36c60 0a3             | 
36c60 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36c64 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36c68 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36c6c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36c70 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36c74 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36c78 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36c7c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36c80 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36c84 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36c88 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36c8c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36c90 0af             | pinloop
36c90 0af             |                             ' generate minimum CE high time before access
36c90 0af A1 07 00 FF 
36c94 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36c98 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36c9c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36ca0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36ca4 0b4 1F DE 63 FD |                             waitx   a                       'delay
36ca8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36cac 0b6             | 
36cac 0b6             |                             ' setup the COG mailboxes and addresses 
36cac 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36cb0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36cb4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36cb8 0b9             | 
36cb8 0b9 28 2E 64 FD |                             setq    #24-1
36cbc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36cc0 0bb             | 
36cc0 0bb             |                             ' setup the polling loop for active COGs 
36cc0 0bb 01 C2 63 FD |                             cogid   id
36cc4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36cc8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36ccc 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36cd0 0bf 0A F0 07 F6 |                             mov     ptra, #10
36cd4 0c0 E1 F1 03 FA |                             mul     ptra, id
36cd8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36cdc 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36ce0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36ce4 0c4 03 C2 07 FA |                             mul     id, #3
36ce8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36cec 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36cf0 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36cf4 0c8 D8 01 B0 FD |                             call    #reloadcogs
36cf8 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36cfc 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36d00 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36d00 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36d04 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36d08 0cd 08 04 DC FC |                             rep     #2, #8
36d0c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36d10 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36d14 0d0             | 
36d14 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36d14 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36d14 0d0 01 C2 63 FD |                             cogid   id
36d18 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36d1c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36d20 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36d24 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36d28 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36d2c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36d30 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36d34 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36d38 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36d3c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36d40 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36d44 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36d48 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36d4c 0de A5 E5 03 F1 |                             add     d, const512
36d50 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36d54 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36d58 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36d5c 0e2             |                             
36d5c 0e2             |                             ' setup register values for control vector loop setup after we return
36d5c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36d60 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36d64 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36d68 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36d6c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36d70 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36d74 0e8 D0 C3 8F F9 |                             altd    id, #id0
36d78 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36d7c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36d80 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36d84 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36d88 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36d8c 0ee             |  
36d8c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36d90 0ef 07 CA 07 F5 |                             and     request, #7
36d94 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36d98 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36d9c 0f2             |                             fit     $100                    'ensure all init code fits this space
36d9c 0f2             | 
36d9c 0f2             |                             fit     $100                    'ensure all init code fits this space
36d9c 0f2             | 
36d9c 0f2 00 00 00 00 
      ...             
36dcc 0fe 00 00 00 00 
36dd0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36dd4 100             | 
36dd4 100             | '..................................................................................................
36dd4 100             | ' Error result handling and COG notification of request completion
36dd4 100             | 
36dd4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36dd8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36ddc 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36de0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36de4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36de8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36dec 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36df0 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36df4 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36df8 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36dfc 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36e00 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36e04 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36e08 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36e0c 10e             | ' Poller re-starts here after a COG is serviced
36e0c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36e10 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36e14 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36e18 111             | ' Main dynamic polling loop repeats until a request arrives
36e18 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36e1c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36e20 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36e24 114             | 
36e24 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36e28 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36e2c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36e30 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36e34 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36e38 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36e3c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36e40 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36e44 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36e48 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36e4c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36e50 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36e54 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36e58 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36e5c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36e60 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36e64 124             | 
36e64 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36e68 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36e6c 126             |  
36e6c 126             | '..................................................................................................
36e6c 126             | ' List handler                               
36e6c 126             | 
36e6c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36e70 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36e74 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36e78 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36e7c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36e80 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36e84 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36e88 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36e8c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36e90 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36e94 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36e98 131 33 00 60 FD |                             execf   0-0                     'process the request 
36e9c 132             | 
36e9c 132             | '..................................................................................................
36e9c 132             | ' Restoring per COG state and resuming where we left off
36e9c 132             | 
36e9c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36ea0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36ea4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36ea8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36eac 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36eb0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36eb4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36eb8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36ebc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36ec0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36ec4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36ec8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36ecc 13e             |                    
36ecc 13e             | '..................................................................................................
36ecc 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36ecc 13e             | 
36ecc 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36ed0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36ed4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36ed8 141 D0 DF B7 F9 |                             setd    a, #id0
36edc 142 D8 DF BF F9 |                             sets    a, #addr1
36ee0 143 FE FF FF FF 
36ee4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36ee8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36eec 146 3F DE A7 F9 |                             alti    a, #%111_111 
36ef0 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36ef4 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36ef8 149 01 E2 63 FD |                             cogid   c
36efc 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36f00 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36f04 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36f08 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36f0c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36f10 14f 00 E0 03 F6 |                             mov     b, 0-0
36f14 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36f18 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36f1c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36f20 153 0C 00 90 AD |             if_z            jmp     #excluded               
36f24 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36f28 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36f2c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36f30 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36f34 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36f38 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36f3c 15a             | 
36f3c 15a             | 'determine priority cogs and build instructions for the polling sequence
36f3c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36f40 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36f44 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36f48 15d             | 
36f48 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36f4c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36f50 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36f54 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36f58 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36f5c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36f60 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36f64 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36f68 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36f6c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
36f70 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
36f74 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
36f78 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
36f7c 16a             | endprioloop
36f7c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
36f80 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
36f84 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
36f88 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
36f8c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
36f90 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
36f94 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
36f98 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
36f9c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
36fa0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
36fa4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
36fa8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
36fac 176             | 
36fac 176             | ' populate the round robin COG polling instructions
36fac 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
36fb0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
36fb4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
36fb8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
36fbc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
36fc0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
36fc4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
36fc8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
36fcc 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
36fd0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
36fd4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
36fd8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
36fdc 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
36fe0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
36fe4 184             | '..................................................................................................
36fe4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
36fe4 184             | 
36fe4 184             | set_latency                                                 '            (a) set latency
36fe4 184             | get_latency                                                 '            (b) get latency
36fe4 184             | set_burst                                                   '            (c) set burst size of bank
36fe4 184             | get_burst                                                   '            (d) get burst size of bank
36fe4 184             |                                                             '            (e) dump state
36fe4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
36fe8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
36fec 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
36ff0 187             |                                                             ' | | | | e  account for following AUGS
36ff0 187 04 00 00 FF 
36ff4 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
36ff8 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
36ffc 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
37000 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
37004 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
37008 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3700c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
37010 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
37014 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
37018 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3701c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
37020 193             | 
37020 193             | '..................................................................................................
37020 193             | ' Misc EXECF code
37020 193             | 
37020 193 33 72 63 FD | start_read_exec             execf   newburstr
37024 194 33 7C 63 FD | start_write_exec            execf   resumewrites
37028 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3702c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
37030 197             | 
37030 197             | '..................................................................................................
37030 197             | ' Variables
37030 197             | 
37030 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
37034 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
37038 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3703c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
37040 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
37044 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
37048 19d             | 
37048 19d 00 00 00 80 | xfreq1          long    $80000000
3704c 19e 00 00 00 40 | xfreq2          long    $40000000
37050 19f 03 00 00 00 | delay           long    3
37054 1a0             | 
37054 1a0             | lutcodeaddr                 
37054 1a0             | startupparams
37054 1a0             | excludedcogs                                    'careful: shared register use!
37054 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
37058 1a1 00 00 00 00 | flags           long    0
3705c 1a2             | mask                                            'careful: shared register use!
3705c 1a2 00 00 00 00 | resetmaskA      long    0
37060 1a3             | limit                                           'careful: shared register use!
37060 1a3 00 00 00 00 | resetmaskB      long    0
37064 1a4 00 00 00 00 | datapins        long    0
37068 1a5             | const512                                        'careful: shared register use!
37068 1a5 00 00 00 00 | devicelist      long    0
3706c 1a6 00 00 00 00 | coglist         long    0
37070 1a7 00 00 00 00 | mbox            long    0 
37074 1a8             | 
37074 1a8             | clkpin                                          'shared with code patched during init
37074 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
37078 1a9             | cspin                                           'shared with code patched during init
37078 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3707c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
37080 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
37084 1ac 01 00 00 00 | clkdelay        long    1
37088 1ad 00 00 00 00 | regdatabus      long    0
3708c 1ae             | 
3708c 1ae 10 00 00 00 | deviceaddr      long    $10
37090 1af             | rrcounter
37090 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
37094 1b0             | 
37094 1b0             | ' jump addresses for the per COG handlers
37094 1b0 20 00 00 00 | cog0_handler    long    cog0
37098 1b1 2C 00 00 00 | cog1_handler    long    cog1
3709c 1b2 38 00 00 00 | cog2_handler    long    cog2
370a0 1b3 44 00 00 00 | cog3_handler    long    cog3
370a4 1b4 50 00 00 00 | cog4_handler    long    cog4
370a8 1b5 5C 00 00 00 | cog5_handler    long    cog5
370ac 1b6 68 00 00 00 | cog6_handler    long    cog6
370b0 1b7 74 00 00 00 | cog7_handler    long    cog7
370b4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
370b8 1b9             | 
370b8 1b9             | ' EXECF sequences
370b8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
370bc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
370c0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
370c4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
370c8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
370cc 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
370d0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
370d4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
370d4 1c0             | 
370d4 1c0             | 
370d4 1c0             | ' SKIPF sequences
370d4 1c0             | skiptable
370d4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
370d8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
370dc 1c2 00 00 00 00 |                 long    0                      ' read modify write long
370e0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
370e4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
370e8 1c5 00 00 00 00 | pattern2        long    0
370ec 1c6 00 00 00 00 | pattern3        long    0
370f0 1c7 77 02 00 00 | singlelong      long    %1001110111  
370f4 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
370f8 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
370fc 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
37100 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37104 1cc             | 
37104 1cc             | ' LUT RAM address values
37104 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37108 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3710c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
37110 1cf F6 02 00 00 | noread          long    noread_lut
37114 1d0             | 
37114 1d0 00 00 00 00 | id0             long    0
37118 1d1 01 00 00 00 | id1             long    1
3711c 1d2 02 00 00 00 | id2             long    2
37120 1d3 03 00 00 00 | id3             long    3
37124 1d4 04 00 00 00 | id4             long    4
37128 1d5 05 00 00 00 | id5             long    5
3712c 1d6 06 00 00 00 | id6             long    6
37130 1d7 07 00 00 00 | id7             long    7
37134 1d8             | 
37134 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37134 1d8             | 'and COG updates and need to follow immediately after id0-id7
37134 1d8 00 00 00 00 | addr1           long    0
37138 1d9 00 00 00 00 | hubdata         long    0
3713c 1da 00 00 00 00 | count           long    0
37140 1db 00 00 00 00 | addr2           long    0
37144 1dc 00 00 00 00 | total           long    0
37148 1dd 00 00 00 00 | offset1         long    0
3714c 1de 00 00 00 00 | offset2         long    0
37150 1df 00 00 00 00 | link            long    0
37154 1e0             | 
37154 1e0             | burstwrite                                      'note shared register use during init
37154 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37158 1e1 00 00 00 00 | id              long    0
3715c 1e2             | 
3715c 1e2 00 00 00 00 | header          long    0
37160 1e3 00 00 00 00 | trailer         long    0
37164 1e4 00 00 00 00 | cmdaddr         long    0
37168 1e5 00 00 00 00 | request         long    0
3716c 1e6 00 00 00 00 | rrlimit         long    0
37170 1e7 00 00 00 00 | pinconfig       long    0
37174 1e8 00 00 00 00 | clks            long    0
37178 1e9 00 00 00 00 | resume          long    0
3717c 1ea 00 00 00 00 | orighubsize     long    0
37180 1eb 00 00 00 00 | wrclks          long    0
37184 1ec             | 
37184 1ec 00 00 00 00 | pattern         long    0
37188 1ed 00 00 00 00 | hubscratch      long    0
3718c 1ee 00 10 00 00 | val4k           long    4096
37190 1ef             | 
37190 1ef             | ' temporary general purpose regs
37190 1ef 00 00 00 00 | a               long    0
37194 1f0 00 00 00 00 | b               long    0
37198 1f1 00 00 00 00 | c               long    0
3719c 1f2 00 00 00 00 | d               long    0
371a0 1f3             |                 fit     502
371a0 1f3             | 
371a0 1f3             |                 fit     502
371a0 1f3             | 
371a0 1f3             | '..................................................................................................
371a0 1f3             | 
371a0 1f3             |             orgh
371a0                 | 
371a0                 | lut_code
371a0                 | 'HW init code up to 80 longs
371a0                 | 
371a0                 | '..................................................................................................
371a0                 | ' Memory layout for LUT RAM once operational:
371a0                 | '
371a0                 | '  LUT RAM address      Usage
371a0                 | '  ---------------      ----
371a0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
371a0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
371a0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
371a0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
371a0                 | '
371a0                 | ' Also during driver COG startup:
371a0                 | ' $230-$24F is used for HW init setup
371a0                 | ' $250-$26F is used as temporary vector storage 
371a0                 | '..................................................................................................
371a0                 | 
371a0                 |                 org $230    
371a0 230             | 
371a0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
371a0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
371a4 231 24 16 60 FD |                             pollxfi
371a8 232 FF AA 2A FF 
371ac 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
371b0 234 28 00 B0 FD |                             call    #sendqspi
371b4 235 07 F8 07 FF 
371b8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
371bc 237 28 00 B0 FD |                             call    #sendspi
371c0 238 F8 07 78 FF 
371c4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
371c8 23a 1C 00 B0 FD |                             call    #sendspi
371cc 23b 7F 78 78 FF 
371d0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
371d4 23d 10 00 B0 FD |                             call    #sendspi 
371d8 23e 2D 00 64 FD |                             ret
371dc 23f             | 
371dc 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
371e0 240 32 0C 64 FD |                             skipf   #%110
371e4 241 9C EF 03 F6 |                             mov     pb, xsendimm
371e8 242             | 
371e8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
371ec 243 97 EF 03 F6 |                             mov     pb, ximm8lut
371f0 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
371f4 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
371f8 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
371fc 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
37200 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37204 249 50 48 63 FD |                             fltl    datapins                'float data bus
37208 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3720c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
37210 24c             | 
37210 24c 00 00 00 00 
37214 24d 00 00 00 00 
37218 24e 00 00 00 00 
3721c 24f 00 00 00 00 |                 long    0[$270-32-$]
37220 250             |                 fit     $270-32  ' keep room for 32 vector longs
37220 250             |     
37220 250             |                 fit     $270-32  ' keep room for 32 vector longs
37220 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
37220 250             | rw_vect ' PSRAM jump vectors
37220 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37224 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37228 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3722c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37230 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37234 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37238 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3723c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
37240 258             | ro_vect ' R/O PSRAM jump vectors
37240 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37244 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37248 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3724c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37250 25c 00 01 00 00 |                 long    unsupported
37254 25d 00 01 00 00 |                 long    unsupported
37258 25e 00 01 00 00 |                 long    unsupported
3725c 25f 00 01 00 00 |                 long    unsupported
37260 260             | ctrl_vect ' Control jump vectors
37260 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
37264 261 00 01 00 00 |                 long    unsupported
37268 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3726c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
37270 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37274 265 00 01 00 00 |                 long    unsupported
37278 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3727c 267 3E 01 00 00 |                 long    reconfig 
37280 268             | no_vect ' Invalid bank jump vectors
37280 268 01 01 00 00 |                 long    invalidbank
37284 269 01 01 00 00 |                 long    invalidbank
37288 26a 01 01 00 00 |                 long    invalidbank
3728c 26b 01 01 00 00 |                 long    invalidbank
37290 26c 01 01 00 00 |                 long    invalidbank
37294 26d 01 01 00 00 |                 long    invalidbank
37298 26e 01 01 00 00 |                 long    invalidbank
3729c 26f 01 01 00 00 |                 long    invalidbank
372a0 270             |                 fit     $270
372a0 270             | 
372a0 270             |                 fit     $270
372a0 270             | '..................................................................................................
372a0 270             | ' PSRAM READS
372a0 270             |                                                             ' a b c d e f
372a0 270             |                                                             ' B W L B R L  (a) byte read
372a0 270             |                                                             ' Y O O U E O  (b) word read
372a0 270             |                                                             ' T R N R S C  (c) long read
372a0 270             |                                                             ' E D G S U K  (d) new burst read
372a0 270             |                                                             '       T M E  (e) resumed sub-burst
372a0 270             |                                                             '         E D  (f) locked sub-burst
372a0 270             | 
372a0 270             | 
372a0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
372a4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
372a8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
372ac 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
372b0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
372b4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
372b8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
372bc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
372c0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
372c4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
372c8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
372cc 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
372d0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
372d4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
372d8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
372dc 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
372e0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
372e4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
372e8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
372ec 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
372f0 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
372f4 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
372f8 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
372fc 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
37300 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37304 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37308 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3730c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
37310 28c             | 
37310 28c             |                             ' fall through to read bursts
37310 28c             |                         
37310 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
37310 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37314 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37318 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3731c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37320 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37324 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37328 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3732c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
37330 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37334 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37338 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3733c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
37340 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
37344 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
37348 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3734c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
37350 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
37354 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
37358 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3735c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
37360 2a0 E8 D1 03 F1 |                             add     clks, clks
37364 2a1             | readcommon
37364 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
37368 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3736c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
37370 2a4             | 
37370 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37374 2a5 69 C8 63 FD |                             rev     cmdaddr
37378 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3737c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
37380 2a8             | 
37380 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
37384 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
37388 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
37388 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3738c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
37390 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
37394 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
37398 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
37398 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3739c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
373a0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
373a4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
373a8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
373ac 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
373b0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
373b0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
373b4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
373b8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
373bc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
373c0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
373c4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
373c8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
373cc 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
373d0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
373d4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
373d8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
373dc 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
373e0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
373e4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
373e8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
373e8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
373ec 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
373f0 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
373f4 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
373f8 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
373fc 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
37400 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37404 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37408 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3740c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
37410 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37414 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37418 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3741c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
37420 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37424 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37428 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3742c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
37430 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37434 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37438 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3743c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
37440 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
37444 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
37448 2da 10 03 90 FD |                             jmp     #writecommon
3744c 2db             | 
3744c 2db             | '..................................................................................................
3744c 2db             | ' Burst continuation testing
3744c 2db             | 
3744c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
37450 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
37454 2dd             | continue_read_lut          
37454 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
37458 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3745c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
37460 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
37464 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
37468 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3746c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
37470 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
37474 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37478 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3747c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
37480 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
37484 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
37488 2ea             | 
37488 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3748c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
37490 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
37494 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
37498 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3749c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
374a0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
374a4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
374a8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
374ac 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
374b0 2f4 2A 1C 66 0D |             _ret_           push    #poller
374b4 2f5             | 
374b4 2f5             | 
374b4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
374b8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
374b8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
374bc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
374c0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
374c4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
374c8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
374cc 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
374d0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
374d4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
374d8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
374dc 2ff             | '..................................................................................................
374dc 2ff             | ' Completion of requests
374dc 2ff             | 
374dc 2ff             | complete_rw_lut             
374dc 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
374e0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
374e4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
374e8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
374ec 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
374f0 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
374f4 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
374f8 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
374fc 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
37500 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37504 309 32 62 64 AD |             if_z            skipf   #%110001
37508 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3750c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
37510 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37514 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37518 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3751c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
37520 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37524 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37528 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3752c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
37530 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37534 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37538 316             |                                                             ' skipcase (a) gfx copy to/from hub
37538 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37538 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37538 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3753c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
37540 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
37544 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
37548 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3754c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
37550 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
37554 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
37558 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3755c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
37560 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
37564 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
37568 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3756c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
37570 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
37574 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37578 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3757c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
37580 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
37584 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
37588 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3758c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
37590 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
37594 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
37598 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3759c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
375a0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
375a4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
375a8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
375ac 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
375b0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
375b4 335 DF B7 03 A6 |             if_z            mov     addr2, link
375b8 336 34 FF 9F AD |             if_z            jmp     #checknext
375bc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
375c0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
375c4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
375c8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
375cc 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
375d0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
375d4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
375d8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
375dc 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
375e0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
375e4 341             | 
375e4 341             | '..................................................................................................
375e4 341             | ' PSRAM WRITES
375e4 341             |                                                             '  a b c d e f g h
375e4 341             | 
375e4 341             |                                                             '  B W L F B R L L (a) byte write(s)
375e4 341             |                                                             '  Y O O I U E O O (b) word write(s)
375e4 341             |                                                             '  T R N L R S C C (c) long write(s)
375e4 341             |                                                             '  E D G L S U K K (d) resumed fill
375e4 341             |                                                             '          T M E E (e) new burst write
375e4 341             |                                                             '            E D D (f) resumed burst
375e4 341             |                                                             '              F B (g) locked fill
375e4 341             |                                                             '              I U (h) locked burst write
375e4 341             |                                                             '              L R 
375e4 341             |                                                             '              L S 
375e4 341             |                                                             '                T 
375e4 341             | 
375e4 341             | w_single                   
375e4 341             | w_fill_cont           
375e4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
375e8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
375ec 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
375f0 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
375f4 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
375f8 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
375fc 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
37600 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37604 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37608 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3760c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
37610 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37614 34d             |                ' disable call to r_resume_burst for single longs when z=0
37614 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37618 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3761c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
37620 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37624 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37628 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3762c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
37630 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37634 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37638 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3763c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
37640 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
37644 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
37648 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3764c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
37650 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
37654 35d             |         
37654 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
37654 35d             |             '
37654 35d             |             '  At least one of these 3 optional components will be sent
37654 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
37654 35d             |             '     body - N x full longs of data
37654 35d             |             '     trailer - last partial long of data
37654 35d             |             '
37654 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
37654 35d             |             '
37654 35d             |             'Case    Type                           Sends
37654 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
37654 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
37654 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
37654 35d             |             ' 4)     Multiple long fill             body only
37654 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
37654 35d             | 
37654 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
37654 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
37658 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3765c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37660 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37664 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
37668 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3766c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
37670 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
37674 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37678 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3767c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
37680 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
37684 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
37688 36a             |                             
37688 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3768c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
37690 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
37694 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
37698 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3769c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
376a0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
376a4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
376a8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
376ac 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
376b0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
376b4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
376b8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
376bc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
376c0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
376c4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
376c8 37a             | 
376c8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
376cc 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
376d0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
376d4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
376d8 37e             |                  
376d8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
376dc 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
376e0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
376e4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
376e8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
376ec 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
376f0 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
376f4 385             | 
376f4 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
376f8 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
376fc 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
37700 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37704 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37708 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3770c 38b             | 
3770c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3770c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
37710 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37714 38d 2A B0 63 FD |                             push    addr1                   'save address
37718 38e             | 
37718 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37718 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3771c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
37720 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37724 391             |             
37724 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37728 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3772c 393 2B B0 63 FD |                             pop     addr1                   'restore address
37730 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37734 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37738 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3773c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
37740 398             | 
37740 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
37744 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37748 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3774c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
37750 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
37754 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37758 39e             | 
37758 39e             |                             'trailer is done
37758 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3775c 39f             | 
3775c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
37760 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37764 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
37768 3a2             | 
37768 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3776c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
37770 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37774 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37778 3a6             |                             
37778 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3777c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37780 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
37784 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37788 3aa             |                                                          
37788 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3778c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
37790 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
37794 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
37798 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3779c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
377a0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
377a4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
377a8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
377ac 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
377b0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
377b4 3b5             |  
377b4 3b5 59 52 63 FD |                             drvh    cspin
377b8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
377bc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
377c0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
377c4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
377c8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
377cc 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
377d0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
377d4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
377d8 3be EA E5 03 F6 |                             mov     d, orighubsize
377dc 3bf EF E5 63 F0 |                             shl     d, a
377e0 3c0 F2 E3 83 F1 |                             sub     c, d
377e4 3c1 DD E3 03 F1 |                             add     c, offset1
377e8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
377ec 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
377f0 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
377f4 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
377f8 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
377fc 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
37800 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37804 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37808 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3780c 3cb BB D3 03 F6 |                             mov     resume, restorefill
37810 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37814 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37818 3ce 6C FC BF CD |             if_c            call    #yield
3781c 3cf 2D 00 64 FD |                             ret
37820 3d0             |                            
37820 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
37820 3d0             |                       '     rczl    pa                      'rotate left into address offset
37820 3d0             |                       '     rczl    c wcz                   'restore count and flags
37820 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37824 3d1 02 EC 67 F0 |                             shl     pa, #2
37828 3d2 28 06 64 AD |             if_z            setq    #3
3782c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
37830 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37834 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37838 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3783c 3d7             | 
3783c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
37840 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37844 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37848 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3784c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
37850 3dc             |                 fit 1024-32
37850 3dc             |         
37850 3dc             | 
37850 3dc             | '..................................................................................................
37850 3dc             | 
37850 3dc             |                 fit 1024-32
37850 3dc 00 00 00 00 
37854 3dd 00 00 00 00 
37858 3de 00 00 00 00 
3785c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
37860 3e0             |                 org 1024-32
37860 000             | 
37860 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
37860 000 00 00 00 00 |                 long $0000
37864 001 11 11 00 00 |                 long $1111
37868 002 22 22 00 00 |                 long $2222
3786c 003 33 33 00 00 |                 long $3333
37870 004 44 44 00 00 |                 long $4444
37874 005 55 55 00 00 |                 long $5555
37878 006 66 66 00 00 |                 long $6666
3787c 007 77 77 00 00 |                 long $7777
37880 008 88 88 00 00 |                 long $8888
37884 009 99 99 00 00 |                 long $9999
37888 00a AA AA 00 00 |                 long $aaaa
3788c 00b BB BB 00 00 |                 long $bbbb
37890 00c CC CC 00 00 |                 long $cccc
37894 00d DD DD 00 00 |                 long $dddd
37898 00e EE EE 00 00 |                 long $eeee
3789c 00f FF FF 00 00 |                 long $ffff
378a0 010             | 
378a0 010             | 'masks
378a0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
378a4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
378a8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
378ac 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
378b0 014             | 
378b0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
378b4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
378b8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
378bc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
378c0 018             | 
378c0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
378c4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
378c8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
378cc 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
378d0 01c             | 
378d0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
378d4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
378d8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
378dc 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
378e0 020             |         fit 1024
378e0 020             | 
378e0 020             |         fit 1024
378e0 020             | 
378e0 020             | '--------------------------------------------------------------------------------------------------
378e0 020             |         orgh
378e0                 | 
378e0                 | gfxexpansion
378e0                 |                             'simple line drawing graphics expansion of memory driver
378e0                 |                             'jmp     #donerepeats                'just return for now
378e0                 | 
378e0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
378e4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
378e8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
378ec     DD E1 03 F6 |                             mov     b, offset1              'get error term
378f0     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
378f4     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
378f8     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
378fc     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37900     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37904     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37908     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3790c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
37910     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37914     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37918     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3791c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
37920     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37924     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37928     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3792c     DC E5 33 F9 |                             getword d, total, #0            'get line width
37930     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37934     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37938     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3793c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
37940     C3 03 80 FD |                             jmp     #readmask               'continue filling
37944                 | 	alignl
37944                 | _usbnew_spin2_dat_
37944                 |                 org     $000
37944 000             | 
37944 000             | usb_host_start
37944 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37948 001             | 
37948 001 03 00 00 FF 
3794c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
37950 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37954 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37958 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3795c 006 29 70 63 FD |                 setq2   htmp
37960 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37964 008             | 
37964 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37968 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3796c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37970 00b             | 
37970 00b             | '------------------------------------------------------------------------------
37970 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37970 00b             | ' special because the receiving function must not respond with either STALL or
37970 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37970 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37970 00b             | ' corrupt packet, it must ignore the transaction
37970 00b             | '------------------------------------------------------------------------------
37970 00b             | ' On entry:
37970 00b             | '   PTRA - start address of the SETUP data struct.
37970 00b             | ' On exit:
37970 00b             | '   retval - PID_ACK on success, otherwise error code.
37970 00b             | '------------------------------------------------------------------------------
37970 00b             | txn_setup
37970 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37974 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37978 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3797c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37980 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37984 010             | .setup
37984 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37988 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3798c 012 2D 00 64 AD |         if_z    ret
37990 013 7C 0B B0 FD |                 call    #retry_wait
37994 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37998 015 2D 00 64 AD |         if_z    ret
3799c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
379a0 017 E0 FF 9F FD |                 jmp     #.setup
379a4 018             | 
379a4 018             | '------------------------------------------------------------------------------
379a4 018             | ' IN/INTERRUPT transaction.
379a4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
379a4 018             | '------------------------------------------------------------------------------
379a4 018             | ' On entry:
379a4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
379a4 018             | '     CRC(b19..23).
379a4 018             | ' On exit:
379a4 018             | '------------------------------------------------------------------------------
379a4 018             | txn_in
379a4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
379a8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
379ac 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
379b0 01b             | 
379b0 01b             |                 ' Fall through to urx_packet
379b0 01b             | 
379b0 01b             | '------------------------------------------------------------------------------
379b0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
379b0 01b             | ' received are handshakes and IN DATAx.
379b0 01b             | '------------------------------------------------------------------------------
379b0 01b             | ' On entry:
379b0 01b             | ' On exit:
379b0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
379b0 01b             | '     returned.
379b0 01b             | '------------------------------------------------------------------------------
379b0 01b             | urx_packet
379b0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
379b4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
379b8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
379bc 01e 1A 92 63 FD |                 getct   hct2
379c0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
379c4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
379c8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
379cc 022             | .wait_sop
379cc 022 22 A7 8A FA |                 rdpin   urx, dm
379d0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
379d4 024 08 00 90 CD |         if_c    jmp     #.get_pid
379d8 025 FC 25 CC FB |                 jnct2   #.wait_sop
379dc 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
379e0 027             | .get_pid
379e0 027 28 02 B0 FD |                 call    #urx_next
379e4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
379e8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
379ec 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
379f0 02b             | .chk_pid
379f0 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
379f4 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
379f8 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
379fc 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37a00 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37a04 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37a08 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37a0c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37a10 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37a14 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37a18 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37a1c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37a20 037             | .ack_resend
37a20 037 22 A7 82 FA |                 rqpin   urx, dm
37a24 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37a28 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37a2c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37a30 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37a34 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37a38 03d             | .chk_eop
37a38 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37a3c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37a40 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37a44 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37a48 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37a4c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37a50 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37a54 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37a58 045 2D 00 64 FD |                 ret
37a5c 046             | .idle
37a5c 046 22 A7 82 FA |                 rqpin   urx, dm
37a60 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37a64 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37a68 049 2D 00 64 FD |                 ret
37a6c 04a             | 
37a6c 04a             | '------------------------------------------------------------------------------
37a6c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37a6c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37a6c 04a             | ' if one is required.
37a6c 04a             | '------------------------------------------------------------------------------
37a6c 04a             | ' On entry:
37a6c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37a6c 04a             | ' On exit:
37a6c 04a             | '------------------------------------------------------------------------------
37a6c 04a             | utx_token
37a6c 04a 22 A7 82 FA |                 rqpin   urx, dm
37a70 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37a74 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37a78 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37a7c 04e 34 0D B0 CD |         if_c    call    #utx_pre
37a80 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37a84 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37a88 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37a8c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37a90 053             | .next_byte
37a90 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37a94 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37a98 055             | .wait
37a98 055 40 46 72 FD |                 testp   dp                      wc
37a9c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
37aa0 057 23 03 08 FC |                 akpin   dp
37aa4 058 22 A5 22 FC |                 wypin   utx, dm
37aa8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37aac 05a             | 
37aac 05a             | '------------------------------------------------------------------------------
37aac 05a             | ' SETUP/OUT/INTERRUPT transaction.
37aac 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37aac 05a             | '------------------------------------------------------------------------------
37aac 05a             | ' On entry:
37aac 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37aac 05a             | '     CRC(b19..23).
37aac 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37aac 05a             | '   pkt_data - count of DATAx payload bytes to send.
37aac 05a             | ' On exit:
37aac 05a             | '------------------------------------------------------------------------------
37aac 05a             | txn_out
37aac 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37ab0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37ab4 05c 00 00 C0 FF 
37ab8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37abc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37ac0 05f             | 
37ac0 05f             |                 ' Fall through to utx_data
37ac0 05f             | 
37ac0 05f             | '------------------------------------------------------------------------------
37ac0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37ac0 05f             | ' calculated while the data byte is being shifted out. Since data stage
37ac0 05f             | ' success/fail is not determined until the status stage of the transaction,
37ac0 05f             | ' this routine is only concerned about the current DATAx packet.
37ac0 05f             | '------------------------------------------------------------------------------
37ac0 05f             | ' On entry:
37ac0 05f             | '   PTRA - hub start address of the data to read.
37ac0 05f             | '   pkt_cnt - data payload size.
37ac0 05f             | ' On exit:
37ac0 05f             | '------------------------------------------------------------------------------
37ac0 05f             | utx_data
37ac0 05f 22 A7 82 FA |                 rqpin   urx, dm
37ac4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37ac8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37acc 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37ad0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37ad4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37ad8 065 D8 0C B0 CD |         if_c    call    #utx_pre
37adc 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37ae0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37ae4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37ae8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37aec 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37af0 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37af4 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37af8 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37afc 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37b00 06f             | .read_byte
37b00 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37b04 070 F0 00 B0 FD |                 call    #utx_byte
37b08 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37b0c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37b10 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37b14 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37b18 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37b1c 076             | .send_crc
37b1c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37b20 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37b24 078 D0 00 B0 FD |                 call    #utx_byte
37b28 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37b2c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37b30 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37b34 07c             | 
37b34 07c             | '------------------------------------------------------------------------------
37b34 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37b34 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37b34 07c             | ' expects that the packet includes at least the CRC word.
37b34 07c             | '
37b34 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37b34 07c             | ' was requested, which makes it difficult to determine where the data stops
37b34 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37b34 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37b34 07c             | ' USB-16 expected residual value of 0xB001.
37b34 07c             | '
37b34 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37b34 07c             | ' so the caller can verify IN success before writing the data to its final
37b34 07c             | ' destination.
37b34 07c             | '------------------------------------------------------------------------------
37b34 07c             | ' On entry:
37b34 07c             | '   pkt_data - max byte count expected to be in the packet.
37b34 07c             | '   newb_flg - signals new byte ready when toggled.
37b34 07c             | ' On exit:
37b34 07c             | '   pkt_cnt - actual number of bytes read.
37b34 07c             | '------------------------------------------------------------------------------
37b34 07c             | urx_data
37b34 07c F7 75 03 F6 |                 mov     htmp2, pb
37b38 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37b3c 07e 00 00 C0 FF 
37b40 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37b44 080 BA EF 03 F6 |                 mov     pb, htmp2
37b48 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37b4c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37b50 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37b54 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37b58 085             | .wait_byte
37b58 085             | ' In-line rx for max speed
37b58 085 22 A7 82 FA |                 rqpin   urx, dm
37b5c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37b60 087 53 A5 02 F5 |                 and     utx, urx
37b64 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37b68 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37b6c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37b70 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37b74 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37b78 08d DC FF 9F FD |                 jmp     #.wait_byte
37b7c 08e             | .get_byte
37b7c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37b80 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37b84 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37b88 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37b8c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37b90 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37b94 094             | .end_crc
37b94 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37b98 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37b9c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37ba0 097 2D 00 64 1D |         if_a    ret
37ba4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37ba4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37ba4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37ba4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37ba4 098 22 A7 82 FA |                 rqpin   urx, dm
37ba8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37bac 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37bb0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37bb0 09b             | .chk_crc
37bb0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37bb4 09c 58 00 00 FF 
37bb8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37bbc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37bc0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37bc4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37bc8 0a1 34 09 B0 FD |                 call    #poll_waitx
37bcc 0a2             | 
37bcc 0a2             |                 ' Fall through to utx_handshake
37bcc 0a2             | 
37bcc 0a2             | '------------------------------------------------------------------------------
37bcc 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37bcc 0a2             | ' the appropriate IP delay has been inserted.
37bcc 0a2             | '------------------------------------------------------------------------------
37bcc 0a2             | ' On entry:
37bcc 0a2             | '   retval - handshake PID to send.
37bcc 0a2             | ' On exit:
37bcc 0a2             | '   retval unchanged.
37bcc 0a2             | '------------------------------------------------------------------------------
37bcc 0a2             | utx_handshake
37bcc 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37bd0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37bd4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37bd8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37bdc 0a6 5F A5 02 F6 |                 mov     utx, retval
37be0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37be4 0a8             | .idle
37be4 0a8 22 A7 82 FA |                 rqpin   urx, dm
37be8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37bec 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37bf0 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37bf4 0ac 08 09 90 FD |                 jmp     #poll_waitx
37bf8 0ad             | 
37bf8 0ad             | '------------------------------------------------------------------------------
37bf8 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37bf8 0ad             | '------------------------------------------------------------------------------
37bf8 0ad             | ' On entry:
37bf8 0ad             | '   utx - byte to transmit.
37bf8 0ad             | ' On exit:
37bf8 0ad             | '------------------------------------------------------------------------------
37bf8 0ad             | utx_byte
37bf8 0ad 40 46 72 FD |                 testp   dp                      wc
37bfc 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37c00 0af 23 03 08 FC |                 akpin   dp
37c04 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37c08 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37c0c 0b2             | 
37c0c 0b2             | '------------------------------------------------------------------------------
37c0c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37c0c 0b2             | '------------------------------------------------------------------------------
37c0c 0b2             | ' On entry:
37c0c 0b2             | ' On exit:
37c0c 0b2             | '   retval - the byte read.
37c0c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37c0c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37c0c 0b2             | '     received.
37c0c 0b2             | '------------------------------------------------------------------------------
37c0c 0b2             | urx_next
37c0c 0b2 22 A7 8A FA |                 rdpin   urx, dm
37c10 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37c14 0b4 53 A5 02 F5 |                 and     utx, urx
37c18 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37c1c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37c20 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37c24 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37c28 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37c2c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37c30 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37c34 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37c38 0bd 2D 00 64 FD |                 ret
37c3c 0be             | 
37c3c 0be             | '------------------------------------------------------------------------------
37c3c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37c3c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37c3c 0be             | ' length, and the PID is not included in the CRC calculation:
37c3c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37c3c 0be             | '  CRC5  ENDP ADDRESS PID
37c3c 0be             | ' %00000_1111_1111111_xxxxxxxx
37c3c 0be             | '------------------------------------------------------------------------------
37c3c 0be             | ' On entry:
37c3c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37c3c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37c3c 0be             | ' On exit:
37c3c 0be             | '   ep_addr_pid - CRC value appended to the packet.
37c3c 0be             | '------------------------------------------------------------------------------
37c3c 0be             | calc_crc5
37c3c 0be FF 03 00 FF 
37c40 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37c44 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37c48 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37c4c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37c50 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37c54 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37c58 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37c5c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37c60 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37c64 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37c68 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37c6c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37c70 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37c74 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37c78 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37c7c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37c80 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37c84 0d0             | 
37c84 0d0             | '------------------------------------------------------------------------------
37c84 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37c84 0d0             | '------------------------------------------------------------------------------
37c84 0d0             | isr1_fsframe
37c84 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37c88 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c8c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37c90 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37c94 0d4             | .wait
37c94 0d4 40 46 72 FD |                 testp   dp                      wc
37c98 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37c9c 0d6 23 03 08 FC |                 akpin   dp
37ca0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37ca4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37ca8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37cac 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37cb0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37cb4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37cb8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37cbc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37cc0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37cc4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37cc8 0e1 2C FF BF FD |                 call    #utx_byte
37ccc 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37cd0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37cd4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37cd8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37cdc 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37ce0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37ce4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37ce8 0e9 5B A5 42 F5 |                 or      utx, icrc
37cec 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37cf0 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37cf4 0ec 20 00 90 FD |                 jmp     #isr1_wait
37cf8 0ed             | isr1_lsframe
37cf8 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37cfc 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37d00 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37d04 0f0             | .wait
37d04 0f0 40 46 72 FD |                 testp   dp                      wc
37d08 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37d0c 0f2 23 03 08 FC |                 akpin   dp
37d10 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37d14 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37d18 0f5             | isr1_wait
37d18 0f5 22 A5 82 FA |                 rqpin   utx, dm
37d1c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37d20 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37d24 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37d28 0f9 03 00 00 FF 
37d2c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37d30 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37d34 0fc F5 FF 3B FB |                 reti1
37d38 0fd             | 
37d38 0fd             | '------------------------------------------------------------------------------
37d38 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37d38 0fd             | ' transaction will complete before the next frame is triggered.
37d38 0fd             | '------------------------------------------------------------------------------
37d38 0fd             | ' On entry:
37d38 0fd             | ' On exit:
37d38 0fd             | '------------------------------------------------------------------------------
37d38 0fd             | wait_txn_ok
37d38 0fd 1A 74 63 FD |                 getct   htmp2
37d3c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37d40 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37d44 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37d48 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37d4c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37d50 103 2D 00 64 FD |                 ret
37d54 104             | 
37d54 104             | '------------------------------------------------------------------------------
37d54 104             | ' A device connection was detected, or a bus reset was requested by the USB
37d54 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37d54 104             | ' and perform a reset sequence prior to device enumeration.
37d54 104             | '------------------------------------------------------------------------------
37d54 104             | dev_reset
37d54 104 22 A7 82 FA |                 rqpin   urx, dm
37d58 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37d5c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37d60 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37d64 108             | reset
37d64 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37d68 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37d6c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37d70 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37d74 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37d78 10d 1A 92 62 FD |                 getct   iframe_ct_base
37d7c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37d80 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37d84 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37d88 111 24 70 07 F1 |                 add     htmp, #36
37d8c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37d90 113             | .framewait
37d90 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37d94 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37d98 115 2D 00 64 FD |                 ret
37d9c 116             | 
37d9c 116             | '------------------------------------------------------------------------------
37d9c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37d9c 116             | '------------------------------------------------------------------------------
37d9c 116             | ' On entry:
37d9c 116             | '   PTRA - source address.
37d9c 116             | '   PB - destination address.
37d9c 116             | '   hr0 - length of copy, in bytes.
37d9c 116             | ' On exit:
37d9c 116             | '------------------------------------------------------------------------------
37d9c 116             | hmemcpy
37d9c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37da0 117 F7 71 43 FC |                 wrbyte  htmp, pb
37da4 118 01 EE 07 F1 |                 add     pb, #1
37da8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37dac 11a             | 
37dac 11a             | '------------------------------------------------------------------------------
37dac 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37dac 11a             | ' loop until the errant device is disconnected.
37dac 11a             | '------------------------------------------------------------------------------
37dac 11a             | ' On entry:
37dac 11a             | ' On exit:
37dac 11a             | '------------------------------------------------------------------------------
37dac 11a             | host_error
37dac 11a             |           if ERROR_LED >= 0
37dac 11a             |           end
37dac 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37db0 11b             | 
37db0 11b             | '------------------------------------------------------------------------------
37db0 11b             | ' Get HID descriptor buffer for current port
37db0 11b             | '------------------------------------------------------------------------------
37db0 11b             | ' On entry:
37db0 11b             | ' On exit:
37db0 11b             | '   PB - HID descriptor buffer pointer
37db0 11b             | '------------------------------------------------------------------------------
37db0 11b             | get_hid_descr_buffer
37db0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37db4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37db8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37dbc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37dc0 11f             | 
37dc0 11f             | 
37dc0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37dc4 120             | 
37dc4 120             | ' USB commands and error codes
37dc4 120 00 00 00 00 | cmd_data        long    0
37dc8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37dcc 122             | 
37dcc 122             | ' Parameters block assigned at cog startup
37dcc 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37dd0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37dd4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37dd8 125             | if ACTIVITY_LED >= 0
37dd8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37dd8 125             | end
37dd8 125             | if ERROR_LED >= 0
37dd8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37dd8 125             | end
37dd8 125 00 00 00 00 | hid_descr_p     long    0
37ddc 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37ddc 126             | 'hkbd_report_p   long    0
37ddc 126 00 00 00 00 | hub_descr_p     long    0
37de0 127 00 00 00 00 | urx_buff_p      long    0
37de4 128 00 00 00 00 | dev_desc_buff_p long    0
37de8 129 00 00 00 00 | con_desc_buff_p long    0
37dec 12a 00 00 00 00 | cache_start_p   long    0
37df0 12b 00 00 00 00 | cache_end_p     long    0
37df4 12c             | if EMUPAD_MAX_PLAYER > 0
37df4 12c             | emupad_out_ptr  long    0
37df4 12c             | end
37df4 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37df8 12d             | 
37df8 12d             | hdev_init_start
37df8 12d             | hdev_port       res     1
37df8 12d             | hdev_port       res     1
37df8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37df8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37df8 12d             | kbm_next_datax  res     1
37df8 12d             | kbm_next_datax  res     1
37df8 12d             | hub_intf_num    res     1
37df8 12d             | hub_intf_num    res     1
37df8 12d             | hub_next_datax  res     1
37df8 12d             | hub_next_datax  res     1
37df8 12d             | hub_status_chg  res     1
37df8 12d             | hub_status_chg  res     1
37df8 12d             | hub_port_status res     1
37df8 12d             | hub_port_status res     1
37df8 12d             | if HAVE_MOUSE
37df8 12d             | ms_intf_num     res     1
37df8 12d             | ms_intf_num     res     1
37df8 12d             | ms_in_max_pkt   res     1
37df8 12d             | ms_in_max_pkt   res     1
37df8 12d             | end
37df8 12d             | kb_intf_num     res     1
37df8 12d             | kb_intf_num     res     1
37df8 12d             | kb_interval     res     1
37df8 12d             | kb_interval     res     1
37df8 12d             | kb_in_max_pkt   res     1
37df8 12d             | kb_in_max_pkt   res     1
37df8 12d             | kb_max_index    res     1
37df8 12d             | kb_max_index    res     1
37df8 12d             | kb_led_states   res     1
37df8 12d             | kb_led_states   res     1
37df8 12d             | gp_intf_num     res     1
37df8 12d             | gp_intf_num     res     1
37df8 12d             | gp_interval     res     1
37df8 12d             | gp_interval     res     1
37df8 12d             | gp_max_index    res     1
37df8 12d             | gp_max_index    res     1
37df8 12d             | gp_descr_len    res     1+MAX_DEVICES
37df8 12d             | gp_descr_len    res     1+MAX_DEVICES
37df8 12d             | hdev_init_end
37df8 12d             | 
37df8 12d             | ' Initialized at cog startup:
37df8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37df8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37df8 12d             | iframe_ct_new   res     1
37df8 12d             | iframe_ct_new   res     1
37df8 12d             | iframe_ct_base  res     1
37df8 12d             | iframe_ct_base  res     1
37df8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37df8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37df8 12d             | 
37df8 12d             | ' This register block is reset to zero when a USB device connects
37df8 12d             | hreg_init_start
37df8 12d             | hstatus         res     1         ' Host status flags
37df8 12d             | hstatus         res     1         ' Host status flags
37df8 12d             | hctwait         res     1         ' Poll-based wait clocks
37df8 12d             | hctwait         res     1         ' Poll-based wait clocks
37df8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37df8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37df8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37df8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37df8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37df8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37df8 12d             | xfer_retry      res     1         ' Control transfer retry count
37df8 12d             | xfer_retry      res     1         ' Control transfer retry count
37df8 12d             | retry           res     1         ' Transaction retry count
37df8 12d             | retry           res     1         ' Transaction retry count
37df8 12d             | utx             res     1         ' Byte to transmit on USB
37df8 12d             | utx             res     1         ' Byte to transmit on USB
37df8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37df8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37df8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37df8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37df8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37df8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37df8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37df8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37df8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37df8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37df8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37df8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37df8 12d             | frame           res     1         ' USB 1ms frame counter value
37df8 12d             | frame           res     1         ' USB 1ms frame counter value
37df8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37df8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37df8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37df8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37df8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37df8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37df8 12d             | crc             res     1         ' Used for CRC16 calculation
37df8 12d             | crc             res     1         ' Used for CRC16 calculation
37df8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37df8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37df8 12d             | retval          res     1         ' Global success/fail return parameter
37df8 12d             | retval          res     1         ' Global success/fail return parameter
37df8 12d             | context_retval  res     1         ' Operation contextual return parameter
37df8 12d             | context_retval  res     1         ' Operation contextual return parameter
37df8 12d             | ' Device stuff
37df8 12d             | hdev_id         res     1+MAX_DEVICES
37df8 12d             | hdev_id         res     1+MAX_DEVICES
37df8 12d             | hdev_bcd        res     1
37df8 12d             | hdev_bcd        res     1
37df8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37df8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37df8 12d             | ' Keyboard/mouse stuff
37df8 12d             | hctrl_ep_addr   res     1
37df8 12d             | hctrl_ep_addr   res     1
37df8 12d             | hctrl_max_pkt   res     1
37df8 12d             | hctrl_max_pkt   res     1
37df8 12d             | hconfig_base    res     1
37df8 12d             | hconfig_base    res     1
37df8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37df8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37df8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37df8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37df8 12d             | hdev_class      res     1
37df8 12d             | hdev_class      res     1
37df8 12d             | hdev_subclass   res     1
37df8 12d             | hdev_subclass   res     1
37df8 12d             | hdev_protocol   res     1
37df8 12d             | hdev_protocol   res     1
37df8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37df8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37df8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37df8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37df8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37df8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37df8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37df8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37df8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37df8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37df8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37df8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37df8 12d             | if HAVE_MOUSE
37df8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37df8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37df8 12d             | end
37df8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37df8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37df8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37df8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37df8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37df8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37df8 12d             | hdev_out_addr   res     1
37df8 12d             | hdev_out_addr   res     1
37df8 12d             | 
37df8 12d             | if EMUPAD_MAX_PLAYER > 0
37df8 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37df8 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37df8 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37df8 12d             | end
37df8 12d             | 
37df8 12d             | hreg_init_end
37df8 12d             | 
37df8 12d             | hidr_start
37df8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37df8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37df8 12d             | hidr_flags      res     1
37df8 12d             | hidr_flags      res     1
37df8 12d             | hidr_axis       res     3
37df8 12d             | hidr_axis       res     3
37df8 12d             | hidr_buttons    res     1
37df8 12d             | hidr_buttons    res     1
37df8 12d             | hidr_hats       res     1
37df8 12d             | hidr_hats       res     1
37df8 12d             | '' Above are actually useful values, 6 longs
37df8 12d             | hidr_id         res     1
37df8 12d             | hidr_id         res     1
37df8 12d             | hidr_state      res     1
37df8 12d             | hidr_state      res     1
37df8 12d             | hidr_size       res     1
37df8 12d             | hidr_size       res     1
37df8 12d             | hidr_count      res     1
37df8 12d             | hidr_count      res     1
37df8 12d             | hidr_offset     res     1
37df8 12d             | hidr_offset     res     1
37df8 12d             | hidr_usage_idx  res     1
37df8 12d             | hidr_usage_idx  res     1
37df8 12d             | hidr_lminmax    res     1
37df8 12d             | hidr_lminmax    res     1
37df8 12d             | hidr_pminmax    res     1
37df8 12d             | hidr_pminmax    res     1
37df8 12d             | hidr_type       res     1
37df8 12d             | hidr_type       res     1
37df8 12d             | hidr_end
37df8 12d             | 
37df8 12d             | ' Variables dependent on the system freqency
37df8 12d             | _var_64_lower_  res     1
37df8 12d             | _var_64_lower_  res     1
37df8 12d             | _var_64_upper_  res     1
37df8 12d             | _var_64_upper_  res     1
37df8 12d             | _12Mbps_        res     1
37df8 12d             | _12Mbps_        res     1
37df8 12d             | _1_5Mbps_       res     1
37df8 12d             | _1_5Mbps_       res     1
37df8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37df8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37df8 12d             | _1us_           res     1         ' 1us
37df8 12d             | _1us_           res     1         ' 1us
37df8 12d             | _10us_          res     1         ' 10us
37df8 12d             | _10us_          res     1         ' 10us
37df8 12d             | _33us_          res     1         ' 33us
37df8 12d             | _33us_          res     1         ' 33us
37df8 12d             | _txn_err_       res     1         ' 250us
37df8 12d             | _txn_err_       res     1         ' 250us
37df8 12d             | _500us_         res     1         ' 500us
37df8 12d             | _500us_         res     1         ' 500us
37df8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37df8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37df8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37df8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37df8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37df8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37df8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37df8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37df8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37df8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37df8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37df8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37df8 12d             | _preamble_wait_ res     1
37df8 12d             | _preamble_wait_ res     1
37df8 12d             | _1ms_           res     1         ' 1ms
37df8 12d             | _1ms_           res     1         ' 1ms
37df8 12d             | _2ms_           res     1         ' 2ms
37df8 12d             | _2ms_           res     1         ' 2ms
37df8 12d             | _suspend_wait_  res     1         ' 3ms
37df8 12d             | _suspend_wait_  res     1         ' 3ms
37df8 12d             | _4ms_           res     1         ' 4ms
37df8 12d             | _4ms_           res     1         ' 4ms
37df8 12d             | _xfer_wait_     res     1         ' 5ms
37df8 12d             | _xfer_wait_     res     1         ' 5ms
37df8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37df8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37df8 12d             | _reset_hold_    res     1         ' 15ms
37df8 12d             | _reset_hold_    res     1         ' 15ms
37df8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37df8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37df8 12d             | _21ms_          res     1         ' 21ms
37df8 12d             | _21ms_          res     1         ' 21ms
37df8 12d             | _100ms_         res     1         ' 100ms
37df8 12d             | _100ms_         res     1         ' 100ms
37df8 12d             | _500ms_         res     1         ' 500ms
37df8 12d             | _500ms_         res     1         ' 500ms
37df8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37df8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37df8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37df8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37df8 12d             | '------------------------------------------------------------------------------
37df8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37df8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37df8 12d             | _usb_d_ls_nco_  res     1
37df8 12d             | _usb_d_ls_nco_  res     1
37df8 12d             | _usb_h_fs_nco_  res     1
37df8 12d             | _usb_h_fs_nco_  res     1
37df8 12d             | _usb_d_fs_nco_  res     1
37df8 12d             | _usb_d_fs_nco_  res     1
37df8 12d             | '------------------------------------------------------------------------------
37df8 12d             | ' Scratch registers
37df8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37df8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37df8 12d             | htmp1           res     1
37df8 12d             | htmp1           res     1
37df8 12d             | htmp2           res     1
37df8 12d             | htmp2           res     1
37df8 12d             | htmp3           res     1
37df8 12d             | htmp3           res     1
37df8 12d             | hrep            res     1         ' Repeat count
37df8 12d             | hrep            res     1         ' Repeat count
37df8 12d             | hsave0          res     1         ' Subroutine parameter saves
37df8 12d             | hsave0          res     1         ' Subroutine parameter saves
37df8 12d             | hsave1          res     1
37df8 12d             | hsave1          res     1
37df8 12d             | hsave2          res     1
37df8 12d             | hsave2          res     1
37df8 12d             | isrtmp1         res     1
37df8 12d             | isrtmp1         res     1
37df8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37df8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37df8 12d             | hr0             res     1         ' Multi-purpose registers
37df8 12d             | hr0             res     1         ' Multi-purpose registers
37df8 12d             | hr1             res     1
37df8 12d             | hr1             res     1
37df8 12d             | hr2             res     1
37df8 12d             | hr2             res     1
37df8 12d             | hr3             res     1
37df8 12d             | hr3             res     1
37df8 12d             | hpar1           res     1         ' Routine entry/exit parameters
37df8 12d             | hpar1           res     1         ' Routine entry/exit parameters
37df8 12d             | hpar2           res     1
37df8 12d             | hpar2           res     1
37df8 12d             | hpar3           res     1
37df8 12d             | hpar3           res     1
37df8 12d             | hct2            res     1         ' Function response bus turn-around timer
37df8 12d             | hct2            res     1         ' Function response bus turn-around timer
37df8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37df8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37df8 12d             | mod_cnt         res     1         ' Used in idle loops
37df8 12d             | mod_cnt         res     1         ' Used in idle loops
37df8 12d             |                 fit     $1F0
37df8 12d             |                 org     $200
37df8 200             | hlut_start
37df8 200             | 
37df8 200             | '------------------------------------------------------------------------------
37df8 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37df8 200             | ' settings to startup defaults.
37df8 200             | '------------------------------------------------------------------------------
37df8 200             | ' On entry:
37df8 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37df8 200             | '------------------------------------------------------------------------------
37df8 200             | set_speed_full
37df8 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37dfc 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37e00 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37e04 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37e08 204             | '                ret                             wcz     ' Restore caller flags on exit
37e08 204             | 
37e08 204             | '------------------------------------------------------------------------------
37e08 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37e08 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37e08 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37e08 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37e08 204             | ' putting the smart pins into reset.
37e08 204             | '------------------------------------------------------------------------------
37e08 204             | ' On entry:
37e08 204             | ' On exit: CZ flags restored to caller states
37e08 204             | '------------------------------------------------------------------------------
37e08 204             | set_speed_low
37e08 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37e0c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37e10 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37e14 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37e18 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37e1c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37e20 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37e24 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37e28 20c             | 
37e28 20c             | '------------------------------------------------------------------------------
37e28 20c             | ' Perform configuration stuff required when a device intitially connects.
37e28 20c             | '------------------------------------------------------------------------------
37e28 20c             | ' On entry:
37e28 20c             | ' On exit:
37e28 20c             | '------------------------------------------------------------------------------
37e28 20c             | on_connect
37e28 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37e2c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37e30 20e             | .retry
37e30 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37e34 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37e38 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37e3c 211 00 08 00 FF 
37e40 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37e44 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37e48 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37e4c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37e50 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37e54 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37e58 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e5c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37e60 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37e64 21b 4C 03 B0 FD |                 call    #poll_waitx
37e68 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37e6c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37e70 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37e74 21f B8 FF 9F FD |                 jmp     #.retry
37e78 220             | .get_dev_desc
37e78 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37e7c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37e80 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37e84 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37e88 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37e8c 225 88 FB BF FD |                 call    #reset
37e90 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37e94 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37e98 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37e9c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37ea0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37ea4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37ea8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37eac 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37eb0 22e 04 00 00 FF 
37eb4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37eb8 230 34 FA BF FD |                 call    #calc_crc5
37ebc 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37ec0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37ec4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37ec8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37ecc 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37ed0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37ed4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37ed8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37edc 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37ee0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37ee4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37ee8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37eec 23d C4 02 B0 FD |                 call    #poll_waitx
37ef0 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37ef4 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37ef8 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37efc 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37f00 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37f04 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f08 244 2D 00 64 5D |         if_nz   ret
37f0c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37f10 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37f14 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37f18 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37f1c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37f20 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37f24 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37f28 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37f2c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37f30 24e 2C FB 9F CD |         if_b    jmp     #host_error
37f34 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37f38 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37f3c 251 2D EC 63 FD |                 call    pa
37f40 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37f44 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37f48 254 2C EC 63 FD |                 jmp     pa
37f4c 255             | 
37f4c 255             | '------------------------------------------------------------------------------
37f4c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37f4c 255             | ' Status reporting is always in the function-to-host direction.
37f4c 255             | '------------------------------------------------------------------------------
37f4c 255             | ' On entry:
37f4c 255             | '   PTRA - start address of the SETUP data in hub.
37f4c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37f4c 255             | '     stage.
37f4c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37f4c 255             | ' On exit:
37f4c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37f4c 255             | '     contains the count of data stage bytes actually received, which must
37f4c 255             | '     always be <= the count requested.
37f4c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37f4c 255             | '     more specific USB operation error code.
37f4c 255             | '------------------------------------------------------------------------------
37f4c 255             | control_read
37f4c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37f50 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37f54 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37f58 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37f5c 259             | .xfer_start
37f5c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37f60 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37f64 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f68 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37f6c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
37f70 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37f74 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37f78 260 61 00 00 FF 
37f7c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
37f80 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37f84 263             | .data
37f84 263 56 B1 02 F6 |                 mov     pkt_data, total_data
37f88 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
37f8c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37f90 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
37f94 267             | .nak_retry
37f94 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
37f98 268             | .in_retry
37f98 268 BC F6 BF FD |                 call    #txn_in
37f9c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
37fa0 26a 28 00 90 AD |         if_z    jmp     #.commit
37fa4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37fa8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37fac 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37fb0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37fb4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
37fb8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37fbc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37fc0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37fc4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
37fc8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
37fcc 275             | .commit
37fcc 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
37fd0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
37fd4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
37fd8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
37fdc 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
37fe0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
37fe4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
37fe8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
37fec 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
37ff0 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
37ff4 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
37ff8 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
37ffc 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
38000 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
38004 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38008 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3800c 285             | .pre_status
3800c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
38010 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
38014 287 00 B0 06 F6 |                 mov     pkt_data, #0
38018 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3801c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38020 28a 61 00 00 FF 
38024 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
38028 28c             | .out_retry
38028 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3802c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38030 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
38034 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38038 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3803c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38040 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38044 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38048 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3804c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
38050 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
38054 297             | ' I've encountered transfer STALL, even though the data looks correct, and
38054 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
38054 297             | ' ControlRead() transfer gets things unstuck most of the time...
38054 297             | .xfer_retry
38054 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
38058 298 58 01 B0 FD |                 call    #poll_waitx
3805c 299 8C F9 BF FD |                 call    #wait_txn_ok
38060 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
38064 29b C7 F1 03 F6 |                 mov     ptra, hpar2
38068 29c C8 EF 03 F6 |                 mov     pb, hpar3
3806c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
38070 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
38074 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
38078 2a0             | 
38078 2a0             | '------------------------------------------------------------------------------
38078 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
38078 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
38078 2a0             | ' the SETUP data struct is filled with the required values.
38078 2a0             | '------------------------------------------------------------------------------
38078 2a0             | ' On entry:
38078 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
38078 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
38078 2a0             | '     stage.
38078 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
38078 2a0             | ' On exit:
38078 2a0             | '   retval - used to convey the success/failure of each stage.
38078 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38078 2a0             | '     more specific USB operation error code.
38078 2a0             | '------------------------------------------------------------------------------
38078 2a0             | control_write
38078 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3807c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38080 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38084 2a3             | 
38084 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38088 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3808c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
38090 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
38094 2a7             | .xfer_start
38094 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
38098 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3809c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
380a0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
380a4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
380a8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
380ac 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
380b0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
380b4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
380b8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
380bc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
380c0 2b2             | .data
380c0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
380c4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
380c8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
380cc 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
380d0 2b6             | .out_retry
380d0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
380d4 2b7 88 F6 BF FD |                 call    #txn_out
380d8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
380dc 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
380e0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
380e4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
380e8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
380ec 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
380f0 2be             | .commit
380f0 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
380f4 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
380f8 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
380fc 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38100 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38104 2c3             | pre_status_in
38104 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38108 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3810c 2c5             | .status_retry
3810c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
38110 2c6 44 F5 BF FD |                 call    #txn_in
38114 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38118 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3811c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
38120 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38124 2cb 2D 00 64 AD |         if_z    ret
38128 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3812c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38130 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38134 2cf             | '               ret                                     ' Caller must handle transfer retirement
38134 2cf             | 
38134 2cf             | '------------------------------------------------------------------------------
38134 2cf             | ' Execute an IN interrupt transaction.
38134 2cf             | '------------------------------------------------------------------------------
38134 2cf             | ' On entry:
38134 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38134 2cf             | '   hpar2 - Address of the IN data buffer
38134 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38134 2cf             | ' On exit:
38134 2cf             | '   retval - the result of the operation.
38134 2cf             | '   hpar3 - the count of IN data bytes actually received.
38134 2cf             | '------------------------------------------------------------------------------
38134 2cf             | do_int_in
38134 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38138 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3813c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38140 2d2             | 
38140 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
38144 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38148 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3814c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
38150 2d6             | .retry
38150 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
38154 2d7 00 F5 BF FD |                 call    #txn_in
38158 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3815c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
38160 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
38164 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
38168 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3816c 2dd 54 00 B0 FD |                 call    #retry_wait
38170 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38174 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38178 2e0 D4 FF 9F FD |                 jmp     #.retry
3817c 2e1             | .commit
3817c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
38180 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
38184 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
38188 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3818c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38190 2e6             | .post_ret
38190 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
38194 2e7             | 
38194 2e7             | 
38194 2e7             | '------------------------------------------------------------------------------
38194 2e7             | ' Resets the downstream hub port to FS
38194 2e7             | '------------------------------------------------------------------------------
38194 2e7             | dwnstream_reset
38194 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38198 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3819c 2e9             | 
3819c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
381a0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
381a4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
381a8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
381ac 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
381b0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
381b4 2ef             | 
381b4 2ef             | '------------------------------------------------------------------------------
381b4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
381b4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
381b4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
381b4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
381b4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
381b4 2ef             | '------------------------------------------------------------------------------
381b4 2ef             | ' On entry:
381b4 2ef             | '   hctwait - wait interval in sysclocks.
381b4 2ef             | ' On exit:
381b4 2ef             | '------------------------------------------------------------------------------
381b4 2ef             | poll_waitx
381b4 2ef 1A 92 63 FD |                 getct   hct2
381b8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
381bc 2f1             | .wait
381bc 2f1 FF 25 CC FB |                 jnct2   #.wait
381c0 2f2 2D 00 64 FD |                 ret
381c4 2f3             | 
381c4 2f3             | '------------------------------------------------------------------------------
381c4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
381c4 2f3             | '------------------------------------------------------------------------------
381c4 2f3             | ' On entry:
381c4 2f3             | '   retval - transaction response PID or error code.
381c4 2f3             | ' On exit:
381c4 2f3             | '------------------------------------------------------------------------------
381c4 2f3             | retry_wait
381c4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
381c8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
381cc 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
381d0 2f6 14 00 90 AD |         if_z    jmp     #.nak
381d4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
381d8 2f8 D8 FF BF FD |                 call    #poll_waitx
381dc 2f9             | .dec
381dc 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
381e0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
381e4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
381e8 2fc             | .nak
381e8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
381ec 2fd C4 FF BF FD |                 call    #poll_waitx
381f0 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
381f4 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
381f8 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
381fc 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
38200 302 2D 00 64 FD |                 ret
38204 303             | 
38204 303             | host_reset
38204 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38208 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3820c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3820c 305 BD 01 05 FF 
38210 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38214 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38218 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3821c 309             | ' Check to see if the system clock has been changed.
3821c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38220 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38224 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38228 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3822c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38230 30e 40 46 62 FD |                 dirl    dp
38234 30f             | 
38234 30f 28 02 64 FD |                 setq    #1
38238 310 80 00 80 FF 
3823c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38240 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
38244 313             | .enable
38244 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38248 314 41 46 62 FD |                 dirh    dp
3824c 315 1F 36 63 FD |                 waitx   _1us_
38250 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38254 317             | 
38254 317             |                 ' Handle Port protection enable and startup delay
38254 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38258 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3825c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
38260 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
38264 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
38268 31c             | 
38268 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3826c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
38270 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38274 31f 00 00 04 F6 |                 mov     0-0, #0
38278 320             | .regloop
38278 320             | 
38278 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38278 320             | 
38278 320             | discon_entry
38278 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3827c 321             | 
3827c 321             |               
3827c 321             |         if HAVE_HIDPAD
3827c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
38280 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
38284 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38288 324 F7 01 68 FC |                 wrlong  #0,pb
3828c 325             |         end
3828c 325             |         if EMUPAD_MAX_PLAYER > 0
3828c 325             |         end
3828c 325             | 
3828c 325             |                 ' Fall through to disconnected loop
3828c 325             | 
3828c 325             | '-----------------------------------------------------------------------------------------------------------------
3828c 325             | ' Device connect handling (Section 7.1.7.3).
3828c 325             | '-----------------------------------------------------------------------------------------------------------------
3828c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3828c 325             | ' device to connect (Section 7.1.7.3).
3828c 325             | '-----------------------------------------------------------------------------------------------------------------
3828c 325             | disconnected
3828c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
38290 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
38294 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
38298 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3829c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
382a0 32a             |         if ACTIVITY_LED >= 0
382a0 32a             |         end
382a0 32a 22 A7 82 FA |                 rqpin   urx, dm
382a4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
382a8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
382ac 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
382b0 32e             | .se1_test
382b0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
382b4 32f FC FE BF FD |                 call    #poll_waitx
382b8 330 22 A7 82 FA |                 rqpin   urx, dm
382bc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
382c0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
382c4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
382c8 334             | .se1            'SE1 is a fatal error condition
382c8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
382cc 335 E4 FE BF FD |                 call    #poll_waitx
382d0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
382d4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
382d8 338             | .connect_test                                           ' Test lines until stable J/K state seen
382d8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
382dc 339 22 A7 82 FA |                 rqpin   urx, dm
382e0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
382e4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
382e8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
382ec 33d             | connected
382ec 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
382f0 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
382f4 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
382f8 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
382fc 341             | .set_pulse
382fc 341 1A 64 63 FD |                 getct   _pulse_time_
38300 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38304 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38304 343             | ' of 1ms and make a correction, if necessary.
38304 343             | '                mov     htmp, _1ms_
38304 343             | '                subs    htmp, iframe_delta
38304 343             | '                adds    _frame1ms_clks_, htmp
38304 343             | '                debug(udec(_frame1ms_clks_))
38304 343             | 
38304 343             |                 ' Fall through to idle/processing loop
38304 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38308 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3830c 345             | 
3830c 345             | hidle
3830c 345 22 A7 82 FA |                 rqpin   urx, dm
38310 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38314 347 98 00 90 CD |         if_c    jmp     #.se0_test
38318 348 24 06 70 FD |                 pollct3                         wc
3831c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
38320 34a 1A 94 63 FD |                 getct   hct3
38324 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38328 34c             | 
38328 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3832c 34d 00 70 E3 F8 |                 getbyte htmp
38330 34e             | 
38330 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38334 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38338 350 40 00 90 AD |         if_z    jmp     #.poll
3833c 351             | 
3833c 351             |         if _HAVE_GAMEPAD
3833c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
38340 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
38344 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
38348 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3834c 355 2C 00 90 AD |         if_z    jmp     #.poll
38350 356             |         end
38350 356             | 
38350 356             |         if HAVE_MOUSE
38350 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
38354 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
38358 358 20 00 90 AD |         if_z    jmp     #.poll
3835c 359             |         end
3835c 359             | 
3835c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
38360 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
38364 35b 14 00 90 AD |         if_z    jmp     #.poll
38368 35c             | 
38368 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3836c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
38370 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
38374 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38378 360             |         if HAVE_MOUSE
38378 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3837c 361             |         else
3837c 361             |         end
3837c 361             | 
3837c 361             | .poll
3837c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
38380 362 2D EC 63 FD |                 call    pa
38384 363             | .skip_poll
38384 363             | 
38384 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
38388 364             | 
38388 364             | .nopoll
38388 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3838c 365 44 00 90 AD |         if_z    jmp     #hsuspend
38390 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
38394 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
38398 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3839c 369 1A 84 63 FD |                 getct   hr0
383a0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
383a4 36b             |         if ACTIVITY_LED >= 0
383a4 36b             |         end
383a4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
383a8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
383ac 36d 5C FF 9F FD |                 jmp     #hidle
383b0 36e             | ' Check for extended SE0 state on the bus
383b0 36e             | .se0_test
383b0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
383b4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
383b8 370 22 A7 82 FA |                 rqpin   urx, dm
383bc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
383c0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
383c4 373 24 F6 BF FD |                 call    #wait_txn_ok
383c8 374 00 00 80 FF 
383cc 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
383d0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
383d0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
383d4 377             | 
383d4 377             | hsuspend
383d4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
383d8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
383dc 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
383e0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
383e4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
383e8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
383ec 37d             | 
383ec 37d             |                 ' Fall through to resume wait loop
383ec 37d             | 
383ec 37d             | hwait_resume
383ec 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
383f0 37e 02 86 47 F0 |                 shr     hr1, #2
383f4 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
383f8 380             |         if ACTIVITY_LED >= 0
383f8 380             |         end
383f8 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
383fc 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
38400 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38404 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38408 384 18 00 90 AD |         if_z    jmp     #.resume
3840c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
38410 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38414 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38418 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3841c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
38420 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38424 38b             | .resume
38424 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38428 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3842c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
38430 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38434 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38438 390 1F 70 63 FD |                 waitx   htmp
3843c 391 22 07 28 FC |                 wypin   #OUT_J, dm
38440 392 01 70 47 F0 |                 shr     htmp, #1
38444 393 1F 70 63 FD |                 waitx   htmp
38448 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3844c 395 1A 92 62 FD |                 getct   iframe_ct_base
38450 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38454 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38458 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3845c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
38460 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
38464 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
38468 39c             | 
38468 39c             | '------------------------------------------------------------------------------
38468 39c             | ' Send preamble to enable low-speed HUB ports
38468 39c             | '------------------------------------------------------------------------------
38468 39c             | ' On entry:
38468 39c             | ' On exit:
38468 39c             | '   USB baud rate set to low-speed
38468 39c             | '------------------------------------------------------------------------------
38468 39c             | utx_pre
38468 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3846c 39d 40 46 62 FD |                 dirl    dp
38470 39e 28 02 64 FD |                 setq    #1
38474 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38478 3a0 58 44 62 FD |                 drvl    dm
3847c 3a1 59 46 62 FD |                 drvh    dp
38480 3a2             | 
38480 3a2 1E 00 00 FF 
38484 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
38488 3a4             | 
38488 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3848c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
38490 3a6 28 02 64 3D |         if_nc   setq    #1
38494 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
38498 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3849c 3a9             | .l1
3849c 3a9             | 
3849c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
384a0 3aa 40 46 62 FD |                 dirl    dp
384a4 3ab 28 02 64 FD |                 setq    #1
384a8 3ac 80 00 80 FF 
384ac 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
384b0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
384b4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
384b8 3b0 41 46 62 FD |                 dirh    dp
384bc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
384c0 3b2             | 
384c0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
384c4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
384c8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
384cc 3b5             | 
384cc 3b5             | hlut_end
384cc 3b5             |                 fit     $400
384cc 3b5             |                 orgh
384cc                 | if OVERLAP_MEMORY
384cc                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
384cc                 | end
384cc                 | '------------------------------------------------------------------------------
384cc                 | ' Routines called from cog space.
384cc                 | '------------------------------------------------------------------------------
384cc                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
384cc                 | '------------------------------------------------------------------------------
384cc                 | 
384cc                 | '------------------------------------------------------------------------------
384cc                 | ' USB host cog initialization.
384cc                 | '------------------------------------------------------------------------------
384cc                 | usb_host_init
384cc                 |                 ' Initialize buffer pointers
384cc                 |         if OVERLAP_MEMORY
384cc                 |         else
384cc     40 15 B0 FE |                 loc     pb, #hid_descr
384d0                 |         end
384d0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
384d4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
384d4                 |                 {
384d4                 |                 }
384d4                 |         
384d4                 |                 {
384d4                 |                 }
384d4                 |                 'loc     pb,#hkbd_report
384d4                 |                 'mov     hkbd_report_p,pb
384d4                 | 
384d4     08 1D B0 FE |                 loc     pb, #hub_descr
384d8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
384dc     1D 1D B0 FE |                 loc     pb, #urx_buff
384e0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
384e4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
384e8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
384ec     9F 1D B0 FE |                 loc     pb, #con_desc_buff
384f0     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
384f4     18 15 B0 FE |                 loc     pb, #usb_cache_start
384f8     F7 55 02 F6 |                 mov     cache_start_p, pb
384fc     E9 1C B0 FE |                 loc     pb, #usb_cache_end
38500     F7 57 02 F6 |                 mov     cache_end_p, pb
38504                 | 
38504                 |         if ERROR_LED >= 0
38504                 |         end
38504                 | 
38504                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38504                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38504                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38504                 | ' Configure and enable the Serial Host USB port.
38504     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38508                 | 
38508                 | '------------------------------------------------------------------------------
38508                 | ' Timing calculations happen before any interrupt(s) are enabled.
38508                 | '------------------------------------------------------------------------------
38508                 | ' On entry:
38508                 | '   htmp - current CLKFREQ value.
38508                 | '------------------------------------------------------------------------------
38508                 | hinit_usb_timings
38508                 | '                getct   htmp2
38508     B8 59 02 F6 |                 mov     save_sysclk, htmp
3850c     8D 5B 80 FF 
38510     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38514     18 30 63 FD |                 getqx   _12Mbps_
38518     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3851c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
38520     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38524     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38528     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3852c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
38530     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38534     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38538     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3853c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
38540     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
38544     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
38548     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3854c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
38550     80 00 00 FF 
38554     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
38558     18 2C 63 FD |                 getqx   _var_64_lower_
3855c     19 2E 63 FD |                 getqy   _var_64_upper_
38560     28 2C 63 FD |                 setq    _var_64_lower_
38564     65 CD 1D FF 
38568     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3856c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
38570     01 00 00 FF 
38574     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38578     18 2C 63 FD |                 getqx   _var_64_lower_
3857c     19 2E 63 FD |                 getqy   _var_64_upper_
38580     28 2C 63 FD |                 setq    _var_64_lower_
38584     A1 07 00 FF 
38588     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3858c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
38590     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
38594     09 36 57 F0 |                 shr     _1us_, #9               wc
38598     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3859c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
385a0     18 38 63 FD |                 getqx   _10us_
385a4     09 38 57 F0 |                 shr     _10us_, #9              wc
385a8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
385ac     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
385b0     18 3A 63 FD |                 getqx   _33us_
385b4     09 3A 57 F0 |                 shr     _33us_, #9              wc
385b8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
385bc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
385c0     18 3C 63 FD |                 getqx   _txn_err_
385c4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
385c8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
385cc     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
385d0     18 3E 63 FD |                 getqx   _500us_
385d4     09 3E 57 F0 |                 shr     _500us_, #9             wc
385d8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
385dc     01 00 00 FF 
385e0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
385e4     18 40 63 FD |                 getqx   _txn_ok_ls_
385e8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
385ec     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
385f0     01 00 00 FF 
385f4     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
385f8     18 42 63 FD |                 getqx   _txn_ok_fs_
385fc     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
38600     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38604     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38608     05 00 00 FF 
3860c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
38610     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38614     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38618     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3861c     1C 00 00 FF 
38620     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38624     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38628     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3862c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
38630     00 00 00 FF 
38634     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38638     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3863c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
38640     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
38644     04 00 00 FF 
38648     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3864c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
38650     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
38654     8D 5B 00 FF 
38658     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3865c     18 4C 63 FD |                 getqx   _preamble_wait_
38660     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
38664     01 00 00 FF 
38668     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3866c     18 2C 63 FD |                 getqx   _var_64_lower_
38670     19 2E 63 FD |                 getqy   _var_64_upper_
38674     28 2C 63 FD |                 setq    _var_64_lower_
38678     01 00 00 FF 
3867c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
38680     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
38684     09 4E 57 F0 |                 shr     _1ms_, #9               wc
38688     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3868c     FF FF 7F FF 
38690     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
38694     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
38698     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3869c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
386a0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
386a4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
386a8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
386ac     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
386b0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
386b4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
386b8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
386bc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
386c0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
386c4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
386c8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
386cc     A7 59 03 F6 |                 mov     _8ms_, _1ms_
386d0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
386d4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
386d8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
386dc     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
386e0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
386e4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
386e8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
386ec     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
386f0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
386f4     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
386f8     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
386fc                 | '        _ret_   mov     _1sec_, save_sysclk
386fc                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
386fc                 | '                ret
386fc                 | {
386fc                 | }
386fc                 | 
386fc                 | '------------------------------------------------------------------------------
386fc                 | ' Parse a configuration descriptor chain to see if the device is a recognized
386fc                 | ' one. If it is, start the task progression that will configure the device for
386fc                 | ' use.
386fc                 | '------------------------------------------------------------------------------
386fc                 | ' On entry:
386fc                 | '   hconfig_base - start address of the cached config descriptor chain.
386fc                 | ' On exit:
386fc                 | '------------------------------------------------------------------------------
386fc                 | hparse_con_desc
386fc     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
38700     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38704     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38708     4E 70 FF F9 |                 movbyts htmp,#%%1032
3870c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
38710                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
38710                 | 
38710     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38714     6E ED 03 F1 |                 add     pa, hconfig_base
38718     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3871c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3871c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3871c                 | ' that defines a keyboard and/or mouse.
3871c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
38720                 | .next_intf
38720     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38724     BC 01 90 3D |         if_ae   jmp     #hset_config
38728     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3872c     75 F3 03 F1 |                 add     ptrb, hnext_desc
38730     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38734     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38738     0C 00 90 AD |         if_z    jmp     #.intf
3873c     80 71 C7 FA |                 rdbyte  htmp, ptrb
38740     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38744     D8 FF 9F FD |                 jmp     #.next_intf
38748                 | .intf
38748     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3874c     00 90 07 F6 |                 mov     hpar3, #0
38750     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
38754     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38758     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3875c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
38760                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
38760                 | 
38760                 | .endp
38760     80 71 C7 FA |                 rdbyte  htmp, ptrb
38764     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38768     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3876c     78 00 90 3D |         if_ae   jmp     #.get_device
38770     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38774     75 F3 03 F1 |                 add     ptrb, hnext_desc
38778     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3877c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38780     64 00 90 AD |         if_z    jmp     #.get_device
38784     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38788     04 00 90 AD |         if_z    jmp     #.get_ep
3878c     D0 FF 9F FD |                 jmp     #.endp
38790                 | .get_ep
38790     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
38794     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
38798     0F 86 67 F0 |                 shl     hr1, #8 + 7
3879c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
387a0     3F 00 00 FF 
387a4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
387a8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
387ac     00 8E 0F F2 |                 cmp     hpar2, #0               wz
387b0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
387b4     00 90 0F F2 |                 cmp     hpar3, #0               wz
387b8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
387bc     A0 FF 9F FD |                 jmp     #.endp
387c0                 | .in_ep
387c0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
387c4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
387c8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
387c8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
387cc     C2 89 DB F8 |                 setbyte hr2, hr0, #3
387d0     8C FF 9F FD |                 jmp     #.endp
387d4                 | .out_ep
387d4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
387d8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
387dc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
387dc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
387e0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
387e4     78 FF 9F FD |                 jmp     #.endp
387e8                 | 
387e8                 | .get_device
387e8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
387ec     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
387f0     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
387f4     68 00 90 AD |         if_z    jmp     #.gamepad
387f8     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
387fc     AC 00 90 AD |         if_z    jmp     #.hub
38800     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38804     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38808     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3880c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38810     4C 00 90 AD |         if_z    jmp     #.gamepad
38814     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38818     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3881c                 | .keyboard
3881c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
38820                 |         if HAVE_MOUSE
38820     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38824                 |         else
38824                 |         end
38824     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38828     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3882c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38830     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38834     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38838     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3883c                 |                 'debug(udec(kb_intf_num))
3883c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3883c     E0 FE 9F FD |                 jmp     #.next_intf
38840                 | if HAVE_MOUSE
38840                 | .mouse
38840     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38844     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38848     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3884c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
38850     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38854                 |                 'getbyte ms_interval, hr2, #3
38854     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38858     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3885c                 |                 'debug(udec(kb_intf_num))
3885c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3885c     C0 FE 9F FD |                 jmp     #.next_intf
38860                 | end
38860                 | .gamepad
38860     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38864     C7 71 63 F5 |                 xor     htmp, hpar2
38868     3F 00 00 FF 
3886c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38870     AC FE 9F AD |         if_z    jmp     #.next_intf
38874                 |         if HAVE_MOUSE
38874     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38878     C7 71 63 F5 |                 xor     htmp, hpar2
3887c     3F 00 00 FF 
38880     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38884     98 FE 9F AD |         if_z    jmp     #.next_intf
38888                 |         end
38888     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3888c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
38890     8C FE 9F 5D |         if_nz   jmp     #.next_intf
38894                 | 
38894     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38898     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3889c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
388a0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
388a4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
388a8                 |                 'debug(udec(gp_intf_num))
388a8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
388a8     74 FE 9F FD |                 jmp     #.next_intf
388ac                 | .hub
388ac     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
388b0     6C FE 9F 5D |         if_nz   jmp     #.next_intf
388b4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
388b8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
388bc     60 FE 9F 5D |         if_nz   jmp     #.next_intf
388c0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
388c4     58 FE 9F 5D |         if_nz   jmp     #.next_intf
388c8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
388cc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
388d0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
388d4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
388d8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
388dc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
388e0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
388e0     3C FE 9F FD |                 jmp     #.next_intf
388e4                 | 
388e4                 | '------------------------------------------------------------------------------
388e4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
388e4                 | ' it according to its function, or functions. In the case of this boot protocol
388e4                 | ' keyboard/mouse class driver:
388e4                 | ' - SetConfiguration(config_num)
388e4                 | ' - SetProtocol(boot)
388e4                 | ' - SetIdle(indefinite)
388e4                 | ' - Enter the device interrupt IN polling task stage.
388e4                 | '------------------------------------------------------------------------------
388e4                 | ' On entry:
388e4                 | ' On exit:
388e4                 | '------------------------------------------------------------------------------
388e4                 | hset_config
388e4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
388e4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
388e4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
388e8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
388ec     00 00 0C F2 |                 cmp     0-0, #0                 wz
388f0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
388f4                 |         if HAVE_MOUSE
388f4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
388f8                 |         end
388f8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
388fc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38900                 | .set_config
38900     6C 0E D0 FE |                 loc     ptra, #set_config
38904     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38908     6E ED 03 F1 |                 add     pa, hconfig_base
3890c     F6 8D C3 FA |                 rdbyte  hpar1, pa
38910     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38914     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38918     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3891c     A0 02 A0 FD |                 call    #control_write
38920     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38924     2D 00 64 5D |         if_nz   ret
38928                 | .kbd_config
38928     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3892c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
38930                 | 
38930     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38934     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38938     3F 00 00 FF 
3893c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38940     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38944                 | 
38944     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38948     34 0E D0 FE |                 loc     ptra, #set_protocol
3894c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38950     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38954     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38958     A0 02 A0 FD |                 call    #control_write
3895c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38960     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38964     E4 02 90 5D |         if_nz   jmp     #.notify_client
38968     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3896c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38970     30 03 B0 FD |                 call    #hset_idle
38974                 |                 'cmp     retval, #PID_ACK        wz
38974                 |         'if_nz   mov     hkbd_ep_addr, #0
38974                 |         'if_nz   jmp     #.notify_client
38974     A8 99 02 F6 |                 mov     hctwait, _2ms_
38978     EF 02 A0 FD |                 call    #poll_waitx
3897c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38980     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38984     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38988     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3898c     2C 03 B0 FD |                 call    #hset_kbdled_report
38990     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38994     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38998     B0 02 90 5D |         if_nz   jmp     #.notify_client
3899c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
389a0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389a4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389a8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
389ac     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
389b0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
389b4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
389b8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
389bc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
389c0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
389c4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
389c8                 |         if !!HAVE_MOUSE
389c8                 |         end
389c8                 | 
389c8                 | .mouse_config
389c8                 | if HAVE_MOUSE
389c8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
389cc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
389d0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
389d4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
389d8     3F 00 00 FF 
389dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
389e0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
389e4                 | 
389e4                 |                 debug("mouse passed addr check")
389e4                 | 
389e4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
389e8     00 00 80 FF 
389ec     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
389f0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
389f4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
389f8     55 02 A0 FD |                 call    #control_read
389fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a00     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38a04     44 02 90 5D |         if_nz   jmp     #.notify_client
38a08     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38a0c     56 01 00 F6 |                 mov     0-0, total_data
38a10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a14                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38a14                 | 
38a14     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38a18     64 0D D0 FE |                 loc     ptra, #set_protocol
38a1c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38a20     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38a24     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38a28     A0 02 A0 FD |                 call    #control_write
38a2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a30     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38a34     14 02 90 5D |         if_nz   jmp     #.notify_client
38a38                 |                 debug("mouse passed SetProtocol")
38a38     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38a3c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38a40     60 02 B0 FD |                 call    #hset_idle
38a44                 |                 'cmp     retval, #PID_ACK        wz
38a44                 |         'if_nz   mov     hmouse_ep_addr, #0
38a44                 |         'if_nz   jmp     #.notify_client
38a44                 |                 debug("mouse passed SetIdle")
38a44     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38a48     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38a4c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38a50     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38a54     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38a58     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38a5c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38a60     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38a64     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38a68     3F 00 00 FF 
38a6c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38a70     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38a74     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38a78     D0 01 90 FD |                 jmp     #.notify_client
38a7c                 | end
38a7c                 | .gamepad_config
38a7c                 | if _HAVE_GAMEPAD
38a7c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38a80     00 00 0C F2 |                 cmp     0-0, #0                 wz
38a84     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38a88     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38a8c     00 70 03 F6 |                 mov     htmp, 0-0
38a90     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38a94     3F 00 00 FF 
38a98     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38a9c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
38aa0                 | 
38aa0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38aa4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38aa8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38aac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38ab0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38ab4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38ab8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38abc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38ac0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38ac4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38ac8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38acc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38ad0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38ad4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38ad8                 | 
38ad8                 |                 if EMUPAD_MAX_PLAYER > 0
38ad8                 |                 
38ad8                 | .rule_loop           
38ad8                 |                 end
38ad8                 | 
38ad8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38adc     5C 00 90 AD |         if_e    jmp     #.xinput
38ae0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38ae4     00 70 03 F6 |                 mov     htmp,0-0
38ae8     01 A6 02 FF 
38aec     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38af0     7C 00 90 AD |         if_e    jmp     #.ps3
38af4                 | 
38af4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38af8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38afc     00 00 80 5F 
38b00     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38b04     03 00 80 AF 
38b08     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38b0c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38b10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b14     55 02 A0 FD |                 call    #control_read
38b18     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b1c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38b20     00 00 04 56 |         if_nz   mov     0-0, #0
38b24     24 01 90 5D |         if_nz   jmp     #.notify_client
38b28     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38b2c     56 01 00 F6 |                 mov     0-0, total_data
38b30     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b34                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38b34                 | 
38b34     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38b38     10 01 90 FD |                 jmp     #.notify_client
38b3c                 | .xinput
38b3c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38b40     2D EF 03 F6 |                 mov     pb,hdev_port
38b44     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38b48     03 EE 27 F3 |                 fle     pb,#3
38b4c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38b50     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38b54                 | 
38b54     03 B0 06 F6 |                 mov     pkt_data, #3
38b58     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38b5c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38b60     5A 00 A0 FD |                 call    #txn_out
38b64     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38b68                 | 
38b68     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38b6c     DC 00 90 FD |                 jmp     #.notify_client
38b70                 | .ps3
38b70     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38b74     2D EF 03 F6 |                 mov     pb,hdev_port
38b78     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38b7c     04 EE 27 F3 |                 fle     pb,#4
38b80     F7 EF C3 F9 |                 decod   pb
38b84     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38b88                 | 
38b88     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38b8c     00 0C D0 FE |                 loc     ptra, #set_report
38b90     01 00 80 FF 
38b94     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38b98     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38b9c     03 61 5C FC |                 wrword  #48, ptra[wLength]
38ba0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38ba4     A0 02 A0 FD |                 call    #control_write
38ba8                 | 
38ba8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38bac     E0 0B D0 FE |                 loc     ptra, #set_report
38bb0     01 00 80 FF 
38bb4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38bb8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38bbc     03 09 5C FC |                 wrword  #4, ptra[wLength]
38bc0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38bc4     A0 02 A0 FD |                 call    #control_write
38bc8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38bcc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38bd0     00 00 04 56 |         if_nz   mov     0-0, #0
38bd4     74 00 90 5D |         if_nz   jmp     #.notify_client
38bd8                 | 
38bd8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38bdc     6C 00 90 FD |                 jmp     #.notify_client
38be0                 | end
38be0                 | 
38be0                 | .hub_config
38be0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38be4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38be8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38bec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38bf0     3F 00 00 FF 
38bf4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38bf8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38bfc                 | 
38bfc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38c00     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38c04     26 EF 03 F6 |                 mov     pb, hub_descr_p
38c08     55 02 A0 FD |                 call    #control_read
38c0c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c10     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38c14     34 00 90 5D |         if_nz   jmp     #.notify_client
38c18                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38c18                 | 
38c18     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38c1c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38c20     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38c24                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38c24                 | .pwr_loop
38c24     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38c28     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38c2c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38c30     A0 02 A0 FD |                 call    #control_write
38c34     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38c38                 | 
38c38     B1 99 02 F6 |                 mov     hctwait, _500ms_
38c3c     B0 99 02 F1 |                 add     hctwait, _100ms_
38c40     EF 02 A0 FD |                 call    #poll_waitx
38c44                 | 
38c44     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38c48     00 00 90 FD |                 jmp     #.notify_client
38c4c                 | 
38c4c                 | .notify_client
38c4c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38c50     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38c54                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38c54                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38c54     2D 00 64 FD |                 ret
38c58                 | 
38c58                 | '------------------------------------------------------------------------------
38c58                 | ' Initialize the keyboard/mouse data area to start-up values.
38c58                 | '------------------------------------------------------------------------------
38c58                 | ' On entry:
38c58                 | ' On exit:
38c58                 | '------------------------------------------------------------------------------
38c58                 | init_kbdm_data
38c58     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38c5c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38c60                 | 
38c60     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38c64     2B ED 03 F6 |                 mov     pa, cache_end_p
38c68                 | .loop
38c68     61 01 4C FC |                 wrbyte  #0, ptra++
38c6c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38c70     F4 FF 9F CD |         if_b    jmp     #.loop
38c74                 |         
38c74                 |         if EMUPAD_MAX_PLAYER > 0
38c74                 |         end
38c74                 | 
38c74                 | 
38c74     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38c78                 | .regloop
38c78     00 EC 8F F9 |                 altd    pa
38c7c     00 00 04 F6 |                 mov     0-0, #0
38c80     01 EC 07 F1 |                 add     pa, #1
38c84     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38c88     EC FF 9F 5D |         if_nz   jmp     #.regloop
38c8c                 | 
38c8c     E1 E1 61 FF 
38c90     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38c94     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38c98     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38c9c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38ca0                 | 
38ca0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38ca4                 | 
38ca4                 | '------------------------------------------------------------------------------
38ca4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38ca4                 | ' function.
38ca4                 | '------------------------------------------------------------------------------
38ca4                 | ' On entry:
38ca4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38ca4                 | '   hpar2 - index number of the target interface.
38ca4                 | ' On exit:
38ca4                 | '------------------------------------------------------------------------------
38ca4                 | hset_idle
38ca4     A8 99 02 F6 |                 mov     hctwait, _2ms_
38ca8     EF 02 A0 FD |                 call    #poll_waitx
38cac     D8 0A D0 FE |                 loc     ptra, #set_idle
38cb0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38cb4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38cb8     A0 02 80 FD |                 jmp     #control_write
38cbc                 | 
38cbc                 | '------------------------------------------------------------------------------
38cbc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38cbc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38cbc                 | '------------------------------------------------------------------------------
38cbc                 | ' On entry:
38cbc                 | '   ep_addr_pid - device address and enpoint for the request.
38cbc                 | ' On exit:
38cbc                 | '   retval - transaction result.
38cbc                 | '------------------------------------------------------------------------------
38cbc                 | hset_kbdled_report
38cbc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38cc0     CC 0A D0 FE |                 loc     ptra, #set_report
38cc4     01 00 80 FF 
38cc8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38ccc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38cd0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38cd4     27 EF 03 F6 |                 mov     pb, urx_buff_p
38cd8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38cdc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38ce0                 | 
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | ' On entry:
38ce0                 | ' On exit:
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | hget_kbd_in_report
38ce0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38ce4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38ce8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38cec     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38cf0     CF 02 A0 FD |                 call    #do_int_in
38cf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38cf8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38cfc                 | 
38cfc     00 90 0F F2 |                 cmp     hpar3, #0               wz
38d00     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38d04                 | 
38d04     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38d08     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38d0c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38d10     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38d14                 | 
38d14     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38d18     18 00 B0 FD |                 call    #hkbd_compare
38d1c                 |         if EMUPAD_MAX_PLAYER > 0
38d1c                 |         end
38d1c                 | 
38d1c                 | .led_check
38d1c     3B 71 03 F6 |                 mov     htmp, kb_led_states
38d20     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38d24     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38d28     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38d2c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38d30     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38d34                 | 
38d34                 | '------------------------------------------------------------------------------
38d34                 | ' Compare current and previous keyboard data buffers for keypress changes.
38d34                 | '------------------------------------------------------------------------------
38d34                 | hkbd_compare
38d34     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38d38     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38d3c     61 73 07 FB |                 rdlong  htmp1, ptra++
38d40     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38d44     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38d48     61 73 07 FB |                 rdlong  htmp1, ptra++
38d4c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38d50     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38d54     2D 00 64 AD |         if_z    ret
38d58                 | 
38d58     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38d5c                 | 
38d5c                 |                 ' Handle modifiers
38d5c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38d60     00 87 C7 FA |                 rdbyte  hr1, ptra
38d64     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38d68     63 86 63 FD |                 mergew  hr1
38d6c     08 EC 07 F6 |                 mov     pa,#8
38d70                 | .modloop
38d70     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38d74     E8 8C 07 F6 |                 mov     hpar1,#$E8
38d78     F6 8D 83 F1 |                 sub     hpar1,pa
38d7c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38d80     FB ED 6F FB |                 djnz    pa,#.modloop
38d84                 | 
38d84     6F E0 75 FD | .release        modc    _set    wc
38d88                 |                 'alts    hdev_port, #hid_report_p
38d88                 |                 'mov     ptra, hid_report_p
38d88     02 F0 07 F1 |                 add     ptra, #2
38d8c     06 EC 07 F6 |                 mov     pa, #6
38d90     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38d94     20 00 90 AD |         if_z    jmp     #.rl3
38d98     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38d9c     02 F2 07 F1 |                 add     ptrb, #2
38da0     06 EE 07 F6 |                 mov     pb, #6
38da4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38da8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38dac     08 00 90 AD |         if_z    jmp     #.rl3
38db0     FC EF 6F FB |                 djnz    pb, #.rl2
38db4     68 00 B0 FD |                 call    #hkbd_translate
38db8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38dbc                 | 
38dbc     00 90 07 F6 |                 mov     hpar3, #0
38dc0     1F 90 27 F4 |                 bith    hpar3, #31
38dc4                 | 
38dc4     6F 00 74 FD | .press          modc    _clr    wc
38dc8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38dcc     02 F0 07 F1 |                 add     ptra, #2
38dd0     06 EC 07 F6 |                 mov     pa, #6
38dd4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38dd8     20 00 90 AD |         if_z    jmp     #.pl3
38ddc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38de0     02 F2 07 F1 |                 add     ptrb, #2
38de4     06 EE 07 F6 |                 mov     pb, #6
38de8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38dec     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38df0     08 00 90 AD |         if_z    jmp     #.pl3
38df4     FC EF 6F FB |                 djnz    pb, #.pl2
38df8     24 00 B0 FD |                 call    #hkbd_translate
38dfc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38e00                 | 
38e00     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38e04     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38e08     28 02 64 FD |                 setq #1
38e0c     61 73 07 FB |                 rdlong  htmp1, ptra++
38e10     28 02 64 FD |                 setq #1
38e14     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38e18     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38e1c                 | 
38e1c     2D 00 64 FD |                 ret
38e20                 | 
38e20                 | '------------------------------------------------------------------------------
38e20                 | ' Translate keyboard scancode to ASCII
38e20                 | '------------------------------------------------------------------------------
38e20                 | ' On entry:
38e20                 | '   hpar1 - scancode
38e20                 | '   hpar2 - key modifiers state
38e20                 | '       c - pressed (0) or released (1) flag
38e20                 | ' On exit:
38e20                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38e20                 | '               30..17 = unused
38e20                 | '                   18 = scroll-lock state 
38e20                 | '                   17 = caps-lock state
38e20                 | '                   16 = num-lock state 
38e20                 | '                15..8 = key modifiers state
38e20                 | '                 7..0 = scancode
38e20                 | '------------------------------------------------------------------------------
38e20                 | hkbd_translate
38e20     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38e24     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38e28     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38e2c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38e30     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38e34     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38e38                 | 
38e38                 |         if EMUPAD_MAX_PLAYER > 0
38e38                 | 
38e38                 |         if EMUPAD_BT0_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT1_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT2_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT3_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT4_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT5_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT6_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT7_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT8_BIT >= 0
38e38                 |         end
38e38                 |         if EMUPAD_BT9_BIT >= 0
38e38                 |         end
38e38                 | 
38e38                 |         end
38e38     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38e3c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38e40     1F 8C 47 F4 |                 bitc    hpar1, #31
38e44                 |         if KEYQUEUE_SIZE > 0
38e44     C4 09 B0 FE |                 loc pb,#keyq_head
38e48     F7 71 E3 FA |                 rdword htmp,pb
38e4c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38e50     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38e54     B8 75 03 F6 |                 mov htmp2,htmp
38e58     04 74 07 FA |                 mul htmp2,#4
38e5c     F7 75 03 F1 |                 add htmp2,pb
38e60     02 74 07 F1 |                 add htmp2,#2
38e64     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38e68     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38e6c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38e70     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38e74                 |         end
38e74     2D 00 7C FD |                 ret wcz
38e78                 | 
38e78                 | if HAVE_MOUSE
38e78                 | '------------------------------------------------------------------------------
38e78                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38e78                 | '------------------------------------------------------------------------------
38e78                 | ' On entry:
38e78                 | ' On exit:
38e78                 | '------------------------------------------------------------------------------
38e78                 | hget_mouse_in_report
38e78     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38e7c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38e80     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38e84     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38e88     CF 02 A0 FD |                 call    #do_int_in
38e8c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e90     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38e94                 | 
38e94     00 90 0F F2 |                 cmp     hpar3, #0               wz
38e98     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38e9c                 | 
38e9c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38ea0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38ea4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38ea8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38eac                 | 
38eac     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38eb0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38eb4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38eb8     01 90 87 31 |         if_ae   sub     hpar3, #1
38ebc                 | 
38ebc     40 09 90 FE |                 loc     pa, #mouse_limits
38ec0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38ec4                 | 
38ec4                 |                 ' load xacc,yacc,zacc
38ec4     28 04 64 FD |                 setq    #3-1
38ec8     80 87 07 FB |                 rdlong  hr1,ptrb
38ecc                 |                 ' load limits and outptr
38ecc     28 04 64 FD |                 setq    #3-1
38ed0     F6 73 03 FB |                 rdlong  htmp1,pa
38ed4                 | 
38ed4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38ed8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38edc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38ee0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38ee4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38ee8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38eec     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38ef0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38ef4                 |               
38ef4                 | 
38ef4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38ef8     07 70 67 F7 |                 signx   htmp, #7
38efc     B8 87 03 F1 |                 add     hr1,htmp
38f00     00 72 0F F2 |                 cmp     htmp1,#0 wz
38f04     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38f08     00 86 47 53 |         if_ne   fges    hr1,#0
38f0c                 | 
38f0c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38f10     07 70 67 F7 |                 signx   htmp, #7
38f14     B8 89 03 F1 |                 add     hr2,htmp
38f18     00 74 0F F2 |                 cmp     htmp2,#0 wz
38f1c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38f20     00 88 47 53 |         if_ne   fges    hr2,#0
38f24                 |                 
38f24                 | 
38f24     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38f28     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38f2c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38f30     B8 8B 03 A1 |         if_z    add     hr3,htmp
38f34                 | 
38f34     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38f38     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38f3c                 | 
38f3c                 |                 ' write back accumulators
38f3c     28 04 64 FD |                 setq    #3-1
38f40     80 87 67 FC |                 wrlong  hr1,ptrb
38f44                 |                 ' if outptr set, write X/Y words
38f44     00 76 0F F2 |                 cmp htmp3,#0                    wz
38f48     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38f4c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38f50     2D 00 64 FD |                 ret
38f54                 | end
38f54                 | 
38f54                 | '------------------------------------------------------------------------------
38f54                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38f54                 | '------------------------------------------------------------------------------
38f54                 | ' On entry:
38f54                 | ' On exit:
38f54                 | '------------------------------------------------------------------------------
38f54                 | if _HAVE_GAMEPAD
38f54                 | hget_gp_in_report
38f54     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38f58     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38f5c                 | 
38f5c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38f60     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38f64     00 90 E3 F8 |                 getbyte hpar3
38f68     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38f6c     CF 02 A0 FD |                 call    #do_int_in
38f70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f74     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38f78                 | 
38f78     00 90 0F F2 |                 cmp     hpar3, #0               wz
38f7c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38f80                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
38f80                 | 
38f80     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
38f84     00 70 E3 F8 |                 getbyte htmp                            ' |
38f88     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38f8c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
38f90     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
38f94     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
38f98     B8 01 C0 F8 |                 setbyte htmp                            ' |
38f9c                 | 
38f9c                 | ' Note: the following code compares the current and previous reports
38f9c                 | ' and process the data if there are changes to ease the debug output.
38f9c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
38f9c                 | ' gpPreReport buffer.
38f9c                 | 
38f9c                 |                 ' ----- start of block to remove
38f9c                 |                 {
38f9c                 |                 }
38f9c                 |                 ' ----- end of block to remove
38f9c     F4 04 90 FE |                 loc pa,#hpad_translate
38fa0     2A EC 63 FD |                 push pa
38fa4                 | 
38fa4                 |                 ' FALL THROUGH !!!!
38fa4                 | 
38fa4                 | '------------------------------------------------------------------------------
38fa4                 | ' Decode controller report
38fa4                 | '------------------------------------------------------------------------------
38fa4                 | hid_decode
38fa4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
38fa4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
38fa8     00 04 00 FF 
38fac     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
38fb0                 | 
38fb0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38fb4                 | 
38fb4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38fb8     00 2A E3 F8 |                 getbyte hidr_type
38fbc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
38fc0     34 02 90 AD |         if_z    jmp     #hpad_xinput
38fc4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
38fc8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
38fcc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
38fd0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
38fd4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
38fd8                 |                 
38fd8                 | 
38fd8                 | '------------------------------------------------------------------------------
38fd8                 | ' Handle HID controller (or mouse now
38fd8                 | ' On entry:
38fd8                 | '   ptrb - controller report
38fd8                 | '------------------------------------------------------------------------------
38fd8                 | hpad_hid
38fd8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38fdc     F7 F1 03 F6 |                 mov     ptra, pb
38fe0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
38fe4     00 EC 03 F6 |                 mov     pa, 0-0
38fe8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
38fe8     19 2A 3B FF 
38fec     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
38ff0                 | 
38ff0                 | .next
38ff0     00 EC 5F F2 |                 cmps    pa, #0      wcz
38ff4     2D 00 7C ED |         if_be   ret     wcz
38ff8                 | 
38ff8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
38ffc     01 EC 87 F1 |                 sub     pa, #1
39000     00 8E 07 F6 |                 mov     hpar2, #0
39004                 | 
39004     C6 71 03 F6 |                 mov     htmp, hpar1
39008     03 70 07 F5 |                 and     htmp, #$03
3900c     01 70 0F F2 |                 cmp     htmp, #1    wz
39010     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
39014     07 8E 67 A7 |         if_z    signx   hpar2,#7
39018     01 EC 87 A1 |         if_z    sub     pa, #1
3901c     02 70 0F F2 |                 cmp     htmp, #2    wz
39020     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
39024     0F 8E 67 A7 |         if_z    signx   hpar2,#15
39028     02 EC 87 A1 |         if_z    sub     pa, #2
3902c     03 70 0F F2 |                 cmp     htmp, #3    wz
39030     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
39034     04 EC 87 A1 |         if_z    sub     pa, #4
39038                 | 
39038     FC 8C 07 F5 |                 and     hpar1, #$FC
3903c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3903c                 | 
3903c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
39040     0C 01 90 AD |         if_z    jmp     #.report_id
39044     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
39048     24 01 90 AD |         if_z    jmp     #.usage_page
3904c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
39050     2C 01 90 AD |         if_z    jmp     #.usage
39054     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
39058     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3905c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
39060     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
39064     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
39068     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3906c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
39070     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
39074     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
39078     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3907c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
39080     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
39084     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
39088     64 FF 9F 5D |         if_nz   jmp     #.next
3908c                 | 
3908c     D8 1D A7 FB |                 tjf     hidr_state,#.next
39090                 | 
39090     03 8E 07 F5 |                 and     hpar2, #$03
39094     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
39098     18 00 90 5D |         if_nz   jmp     #.skip
3909c                 | 
3909c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
390a0     20 00 90 AD |         if_z    jmp     #.axes
390a4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
390a8     5C 00 90 AD |         if_z    jmp     #.hats
390ac     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
390b0     70 00 90 AD |         if_z    jmp     #.buttons
390b4                 | .skip
390b4     8F 71 03 F6 |                 mov     htmp, hidr_size
390b8     90 71 03 FA |                 mul     htmp, hidr_count
390bc     B8 23 03 F1 |                 add     hidr_offset, htmp
390c0     2C FF 9F FD |                 jmp     #.next
390c4                 | .axes
390c4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
390c4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
390c8     90 87 03 F6 |                 mov     hr1, hidr_count
390cc                 | .l1
390cc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
390d0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
390d4     04 03 B0 FD |                 call    #hpad_getbits
390d8     64 03 B0 FD |                 call    #hpad_normalize
390dc     06 84 1F F2 |                 cmp     hr0, #6         wcz
390e0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
390e4     00 88 43 C8 |         if_b    getnib  hr2
390e8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
390ec     5F 01 20 C9 |         if_b    setword retval
390f0     01 84 07 C1 |         if_b    add     hr0, #1
390f4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
390f8     F4 87 6F FB |                 djnz    hr1, #.l1
390fc                 | 
390fc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
39100     01 1C 07 F6 |                 mov     hidr_state, #1
39104     E8 FE 9F FD |                 jmp     #.next
39108                 | .hats
39108                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39108     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3910c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39110     C8 02 B0 FD |                 call    #hpad_getbits
39114     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39118     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3911c     01 1C 07 F6 |                 mov     hidr_state, #1
39120     90 FF 9F FD |                 jmp     #.skip
39124                 | .buttons
39124                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39124     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39128     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3912c     90 8F 03 FA |                 mul     hpar2, hidr_count
39130     A8 02 B0 FD |                 call    #hpad_getbits
39134     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39138     B8 BF 62 F0 |                 shl     retval, htmp
3913c     5F 17 43 F5 |                 or      hidr_buttons, retval
39140     90 71 03 F1 |                 add     htmp, hidr_count
39144     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39148     01 1C 07 F6 |                 mov     hidr_state, #1
3914c     64 FF 9F FD |                 jmp     #.skip
39150                 | .report_id
39150     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
39154     2D 00 7C 5D |         if_nz   ret     wcz
39158     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3915c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
39160     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
39164     01 1C 67 56 |         if_nz   neg     hidr_state,#1
39168     01 F2 87 51 |         if_nz   sub     ptrb,#1
3916c     80 FE 9F FD |                 jmp     #.next
39170                 | .usage_page
39170     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
39174     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39178     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3917c     70 FE 9F FD |                 jmp     #.next
39180                 | .usage
39180     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
39184     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
39188     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3918c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39190     5C FE 9F AD |         if_z    jmp     #.next
39194     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
39198     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3919c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
391a0     4C FE 9F AD |         if_z    jmp     #.next
391a4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
391a8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
391ac     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
391b0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
391b4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
391b8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
391bc     10 00 90 AD |         if_z    jmp     #.usage_axis
391c0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
391c4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
391c8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
391cc     20 FE 9F FD |                 jmp     #.next
391d0                 | .usage_axis
391d0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
391d4     18 FE 9F CD |         if_b    jmp     #.next
391d8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
391dc     C7 01 00 F8 |                 setnib  hpar2
391e0                 | 
391e0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
391e4     C7 8F C3 F9 |                 decod   hpar2
391e8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
391ec                 | 
391ec     01 24 07 F1 |                 add     hidr_usage_idx, #1
391f0     02 1C 07 F6 |                 mov     hidr_state, #2
391f4     F8 FD 9F FD |                 jmp     #.next
391f8                 | 
391f8                 | '------------------------------------------------------------------------------
391f8                 | ' Handle XInput controller
391f8                 | ' On entry:
391f8                 | '   ptrb - controller report
391f8                 | '------------------------------------------------------------------------------
391f8                 | '   Default implementation translates the report to a pseudo-defacto hid
391f8                 | '   standard and jumps to hpad_translate for actions.
391f8                 | '   Implementors may take specific actions for this kind of controller.
391f8                 | '------------------------------------------------------------------------------
391f8                 | hpad_xinput
391f8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
391fc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
39200     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39204     14 70 0F F2 |                 cmp     htmp, #$14      wz
39208     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3920c                 | 
3920c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3920c                 | 
3920c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
39210     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39214                 | 
39214     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39218     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3921c     5F BF 22 F6 |                 not     retval
39220     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39224     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39228     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3922c     5F BF 22 F6 |                 not     retval
39230     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39234                 | 
39234     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39238     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3923c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39240     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
39244     F8 01 B0 FD |                 call    #hpad_normalize
39248     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3924c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
39250     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39254     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39258     E4 01 B0 FD |                 call    #hpad_normalize
3925c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
39260                 | 
39260     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39264     81 BF E6 FA |                 rdword  retval, ptrb[1]
39268     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3926c     00 16 47 F4 |                 bitc    hidr_buttons, #0
39270     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39274     01 16 47 F4 |                 bitc    hidr_buttons, #1
39278     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3927c     02 16 47 F4 |                 bitc    hidr_buttons, #2
39280     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39284     03 16 47 F4 |                 bitc    hidr_buttons, #3
39288     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3928c     04 16 47 F4 |                 bitc    hidr_buttons, #4
39290     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
39294     05 16 47 F4 |                 bitc    hidr_buttons, #5
39298     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3929c     08 16 47 F4 |                 bitc    hidr_buttons, #8
392a0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
392a4     09 16 47 F4 |                 bitc    hidr_buttons, #9
392a8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
392ac     0A 16 47 F4 |                 bitc    hidr_buttons, #10
392b0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
392b4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
392b8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
392bc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
392c0                 | 
392c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
392c4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
392c8     7A BB 7A FF 
392cc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
392d0     F9 FF 7F FF 
392d4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
392d8     B9 71 5F F9 |                 altgn   htmp, #htmp1
392dc     00 70 43 F8 |                 getnib  htmp
392e0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
392e4                 | 
392e4     AC 01 90 FD |                 jmp     #hpad_translate
392e8                 | 
392e8                 | '------------------------------------------------------------------------------
392e8                 | ' Handle PS3 controller
392e8                 | ' On entry:
392e8                 | '   ptrb - controller report
392e8                 | '------------------------------------------------------------------------------
392e8                 | '   Default implementation translates the report to a pseudo-defacto hid
392e8                 | '   standard and jumps to hpad_translate for actions.
392e8                 | '   Implementors may take specific actions for this kind of controller.
392e8                 | '------------------------------------------------------------------------------
392e8                 | hpad_ps3
392e8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
392ec     01 70 0F F2 |                 cmp     htmp, #$01      wz
392f0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
392f4                 | 
392f4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
392f4                 | 
392f4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
392f8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
392fc     40 01 B0 FD |                 call    #hpad_normalize
39300     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39304     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39308     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3930c     30 01 B0 FD |                 call    #hpad_normalize
39310     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39314     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39318     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3931c     20 01 B0 FD |                 call    #hpad_normalize
39320     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39324     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39328     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3932c     10 01 B0 FD |                 call    #hpad_normalize
39330     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39334     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39338     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3933c                 | 
3933c     08 8C 07 F6 |                 mov     hpar1, #8
39340     13 8E 07 F6 |                 mov     hpar2, #19
39344     94 00 B0 FD |                 call    #hpad_getbits
39348                 | 
39348     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3934c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39350     00 16 47 F4 |                 bitc    hidr_buttons, #0
39354     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39358     01 16 47 F4 |                 bitc    hidr_buttons, #1
3935c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39360     02 16 47 F4 |                 bitc    hidr_buttons, #2
39364     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39368     03 16 47 F4 |                 bitc    hidr_buttons, #3
3936c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
39370     04 16 47 F4 |                 bitc    hidr_buttons, #4
39374     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39378     05 16 47 F4 |                 bitc    hidr_buttons, #5
3937c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
39380     06 16 47 F4 |                 bitc    hidr_buttons, #6
39384     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
39388     07 16 47 F4 |                 bitc    hidr_buttons, #7
3938c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
39390     08 16 47 F4 |                 bitc    hidr_buttons, #8
39394     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
39398     09 16 47 F4 |                 bitc    hidr_buttons, #9
3939c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
393a0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
393a4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
393a8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
393ac     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
393b0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
393b4                 | 
393b4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
393b8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
393bc     09 FA 79 FF 
393c0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
393c4     FF FA 7F FF 
393c8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
393cc     B9 71 5F F9 |                 altgn   htmp, #htmp1
393d0     00 70 43 F8 |                 getnib  htmp
393d4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
393d8                 | 
393d8     B8 00 90 FD |                 jmp     #hpad_translate
393dc                 | 
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' Read bits from report data buffer
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' On entry:
393dc                 | '   PTRB - report buffer
393dc                 | '   hpar1 - start bit
393dc                 | '   hpar2 - number of bits
393dc                 | ' On exit:
393dc                 | '   retval - bits
393dc                 | '------------------------------------------------------------------------------
393dc                 | hpad_getbits
393dc     C6 71 03 F6 |                 mov     htmp, hpar1
393e0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
393e4     F9 71 03 F1 |                 add     htmp, ptrb
393e8     B8 BF 02 FB |                 rdlong  retval, htmp
393ec                 | 
393ec     C6 73 03 F6 |                 mov     htmp1, hpar1
393f0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
393f4     B9 BF 42 F0 |                 shr     retval, htmp1
393f8                 | 
393f8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
393fc     10 00 90 1D |         if_a    jmp     #.l1
39400                 | 
39400     C7 8F C3 F9 |                 decod   hpar2
39404     01 8E 87 F1 |                 sub     hpar2, #1
39408     C7 BF 02 F5 |                 and     retval, hpar2
3940c     2D 00 64 FD |                 ret
39410                 | .l1
39410     FF 7F 00 FF 
39414     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39418     03 70 07 F1 |                 add     htmp, #3
3941c     B8 75 03 FB |                 rdlong  htmp2, htmp
39420     18 8E 87 F1 |                 sub     hpar2, #24
39424     C7 8F C3 F9 |                 decod   hpar2
39428     01 8E 87 F1 |                 sub     hpar2, #1
3942c     B9 75 43 F0 |                 shr     htmp2, htmp1
39430     C7 75 03 F5 |                 and     htmp2, hpar2
39434     18 74 67 F0 |                 shl     htmp2, #24
39438     BA BF 42 F5 |                 or      retval, htmp2
3943c     2D 00 64 FD |                 ret
39440                 | 
39440                 | '------------------------------------------------------------------------------
39440                 | ' Normalize value to signed word (-32768 / 32767)
39440                 | '------------------------------------------------------------------------------
39440                 | ' On entry:
39440                 | '   retval - value to normalize
39440                 | '   hidr_lminmax - min (word 1) max (word 0) value range
39440                 | '   - or -
39440                 | '   hidr_pminmax - min (word 1) max (word 0) value range
39440                 | '   hidr_size - value bits length
39440                 | ' On exit:
39440                 | '   retval - normalized value
39440                 | '------------------------------------------------------------------------------
39440                 | hpad_normalize
39440     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
39444     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
39448     2D 00 64 AD |         if_z    ret
3944c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
39450     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
39454     0F 72 77 F7 |                 signx   htmp1, #15      wc
39458     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3945c     00 BE 66 C7 |         if_c    signx   retval, #0-0
39460     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
39464     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
39468     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3946c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
39470     B8 71 53 F6 |                 abs     htmp            wc
39474     1F BE 0E F4 |                 testb   retval, #31     wz
39478     5F BF 42 F6 |                 abs     retval
3947c     B8 BF 12 FD |                 qdiv    retval, htmp
39480     18 BE 62 FD |                 getqx   retval
39484     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
39488     C0 FF 7F FF 
3948c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
39490     2D 00 64 FD |                 ret
39494                 | 
39494                 | '------------------------------------------------------------------------------
39494                 | ' Perform controller actions
39494                 | ' On entry:
39494                 | '    hidr_id        report id
39494                 | '    hidr_axis      axis value (signed word, 2 axes per long)
39494                 | '                      X = hidr_axis+0, #0
39494                 | '                      Y = hidr_axis+0, #1
39494                 | '                      Z = hidr_axis+1, #0
39494                 | '                     RX = hidr_axis+1, #1
39494                 | '                     RY = hidr_axis+2, #0
39494                 | '                     RZ = hidr_axis+2, #1
39494                 | '    hidr_buttons   buttons state (bits 0 to 31)
39494                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
39494                 | '
39494                 | '                     -------3 -------2 -------1 -------0 byte
39494                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
39494                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
39494                 | '                                zyx||| |||||||| ++++++++ n. buttons
39494                 | '                                |||||| ||||++++--------- n. axes
39494                 | '                                |||||| ++++------------- n. hats
39494                 | '                                ++++++------------------ valid axes
39494                 | '------------------------------------------------------------------------------
39494                 | hpad_translate
39494                 | 
39494                 | 
39494                 |         if HAVE_HIDPAD
39494     84 0C F0 FE |                 loc     ptrb,#hidpad_report
39498     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3949c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
394a0     01 70 E7 F2 |                 cmpsub  htmp,#1
394a4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
394a8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
394ac     2D 00 7C 3D |         if_ae   ret     wcz
394b0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
394b4     B8 F3 03 F1 |                 add     ptrb,htmp
394b8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
394bc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
394c0     28 0C 64 FD |                 setq    #7-1
394c4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
394c8                 |         end
394c8                 | 
394c8                 | 
394c8                 |         if EMUPAD_MAX_PLAYER > 0
394c8                 | .emupad_no_hat
394c8                 |         if EMUPAD_BT0_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT1_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT2_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT3_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT4_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT5_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT6_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT7_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT8_BIT >= 0
394c8                 |         end
394c8                 |         if EMUPAD_BT9_BIT >= 0
394c8                 |         end
394c8                 | .emupad_slot_over
394c8                 |         end
394c8                 | 
394c8                 |         if 0
394c8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
394c8                 | 
394c8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
394c8                 | 
394c8                 |         end
394c8     2D 00 64 FD |                 ret
394cc                 | end
394cc                 | 
394cc                 | if EMUPAD_MAX_PLAYER > 0
394cc                 | '------------------------------------------------------------------------------
394cc                 | ' Clear EmuPad state
394cc                 | '------------------------------------------------------------------------------
394cc                 | emupad_reset
394cc                 | 
394cc                 | '------------------------------------------------------------------------------
394cc                 | ' Get EmuPad Player number for current device (into retval)
394cc                 | ' Z flag is also set if current device is valid
394cc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
394cc                 | '------------------------------------------------------------------------------
394cc                 | emupad_getnum
394cc                 | .loop
394cc                 | '------------------------------------------------------------------------------
394cc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
394cc                 | '------------------------------------------------------------------------------
394cc                 | emupad_discon
394cc                 | .loop         
394cc                 |         
394cc                 |         ' FALL THROUGH!!!
394cc                 | 
394cc                 | '------------------------------------------------------------------------------
394cc                 | ' Update EmuPad reports (all of them...)
394cc                 | '------------------------------------------------------------------------------
394cc                 | emupad_write_reports
394cc                 | .devloop
394cc                 | 
394cc                 | end
394cc                 | 
394cc                 | 
394cc                 | '------------------------------------------------------------------------------
394cc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
394cc                 | '------------------------------------------------------------------------------
394cc                 | ' On entry:
394cc                 | ' On exit:
394cc                 | '------------------------------------------------------------------------------
394cc                 | hget_hub_status
394cc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
394d0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
394d4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
394d8     01 90 2F F9 |                 setword hpar3, #1, #1
394dc     CF 02 A0 FD |                 call    #do_int_in
394e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
394e4     0C 00 90 AD |         if_z    jmp     #.data
394e8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
394ec     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
394f0     2D 00 64 FD |                 ret
394f4                 | .data
394f4     00 90 0F F2 |                 cmp     hpar3, #0               wz
394f8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
394fc                 | 
394fc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
39500     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39504     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39508     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3950c                 |                 debug(ubin_long(hub_status_chg))
3950c                 | 
3950c     01 5A 06 F6 |                 mov     hdev_port, #1
39510                 | .loop
39510     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39514     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39518     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3951c     F0 FF 9F 3D |         if_nc   jmp     #.loop
39520     2D 00 64 FD |                 ret
39524                 | 
39524                 | hub_port_handler
39524     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39528     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3952c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39530     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39534     55 02 A0 FD |                 call    #control_read
39538     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3953c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3953c                 | 
3953c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
39540     50 01 90 5D |         if_x0   jmp     #.other
39544     68 02 D0 FE |                 loc     ptra, #clr_port_feat
39548     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3954c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39550     A0 02 A0 FD |                 call    #control_write
39554     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
39558     7C 01 90 5D |         if_x0   jmp     #.disconnect
3955c     B0 99 02 F6 |                 mov     hctwait, _100ms_
39560     EF 02 A0 FD |                 call    #poll_waitx
39564                 | 
39564     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
39568     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3956c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39570     A0 02 A0 FD |                 call    #control_write
39574                 | 
39574     02 76 07 F6 |                 mov     htmp3, #2
39578                 | .wait_reset
39578     AC 99 02 F6 |                 mov     hctwait, _8ms_
3957c     EF 02 A0 FD |                 call    #poll_waitx
39580     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39584     27 EF 03 F6 |                 mov     pb, urx_buff_p
39588     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3958c     55 02 A0 FD |                 call    #control_read
39590     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39594     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
39598     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3959c                 | 
3959c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
395a0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
395a4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395a8     A0 02 A0 FD |                 call    #control_write
395ac                 | 
395ac     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
395b0                 | .wait_recover
395b0     A7 99 02 F6 |                 mov     hctwait, _1ms_
395b4     EF 02 A0 FD |                 call    #poll_waitx
395b8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
395bc                 | 
395bc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
395c0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
395c4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
395c8                 | 
395c8     00 08 00 FF 
395cc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
395d0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
395d4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
395d8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
395dc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
395e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
395e4     48 01 90 5D |         if_nz   jmp     #.done
395e8                 | .get_dev_desc
395e8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
395ec     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
395f0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
395f4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
395f8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
395fc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
39600     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39604     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39608     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3960c     AC 99 02 F6 |                 mov     hctwait, _8ms_
39610     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39614     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39618     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3961c     BE 00 A0 FD |                 call    #calc_crc5
39620     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39624     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39628     F7 AD C2 FA |                 rdbyte  total_data, pb
3962c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
39630     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39634     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39638     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3963c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
39640     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
39644                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
39644     9F 99 02 F6 |                 mov     hctwait, _500us_
39648     EF 02 A0 FD |                 call    #poll_waitx
3964c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
39650     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
39654     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39658     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3965c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39660     CC 00 90 5D |         if_nz   jmp     #.done
39664     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
39668     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3966c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
39670     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39674     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39678     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3967c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39680     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39684     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39688     A4 00 90 CD |         if_b    jmp     #.done
3968c     6C F0 BF FD |                 call    #hparse_con_desc
39690     9C 00 90 FD |                 jmp     #.done
39694                 | 
39694                 | .other
39694     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
39698     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3969c     28 00 90 AD |         if_x1   jmp     #.reset_feature
396a0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
396a4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
396a8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
396ac     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
396b0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
396b4     10 00 90 AD |         if_x1   jmp     #.reset_feature
396b8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
396bc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
396c0     04 00 90 AD |         if_x1   jmp     #.reset_feature
396c4     68 00 90 FD |                 jmp     #.done
396c8                 | .reset_feature
396c8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
396cc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
396d0     A0 02 A0 FD |                 call    #control_write
396d4     58 00 90 FD |                 jmp     #.done
396d8                 | .disconnect
396d8                 | 
396d8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
396dc     00 70 E3 F8 |                 getbyte htmp
396e0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
396e4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
396e8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
396ec     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
396f0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
396f4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
396f8                 |         if EMUPAD_MAX_PLAYER > 0
396f8                 |         end
396f8                 |         if HAVE_MOUSE
396f8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
396fc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
39700     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39704                 |         end
39704                 |         if HAVE_HIDPAD
39704     14 0A F0 FE |                 loc ptrb,#hidpad_report
39708     2D 71 03 F6 |                 mov htmp,hdev_port
3970c     01 70 E7 F2 |                 cmpsub htmp,#1
39710     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39714     B8 F3 03 F1 |                 add ptrb,htmp
39718     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3971c     80 01 6C FC |                 wrlong #0,ptrb
39720                 |         end
39720                 | 
39720     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39724     00 00 C4 F8 |                 setbyte #0
39728     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3972c     00 00 04 F6 |                 mov     0-0, #0
39730                 | 
39730                 | .done
39730     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39734     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39738     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3973c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
39740     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39744     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39748                 | 
39748     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3974c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39750     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39754     55 02 A0 FD |                 call    #control_read
39758     00 69 06 FB |                 rdlong  hub_port_status, ptra
3975c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3975c     2D 00 64 FD |                 ret
39760                 | 
39760                 | '------------------------------------------------------------------------------
39760                 | ' Partially populated SETUP packets
39760                 | '------------------------------------------------------------------------------
39760     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39761     06          |                 byte    REQ_GET_DESC
39762     00 01       |                 word    TYPE_DEVICE << 8
39764     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39766     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39768     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39769     06          |                 byte    REQ_GET_DESC
3976a     00 02       |                 word    TYPE_CONFIG << 8
3976c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3976e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39770     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39771     09          |                 byte    REQ_SET_CONFIG
39772     00 00       |                 word    0       ' Configuration value
39774     00 00       |                 word    0       ' Zero
39776     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39778     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39779     05          |                 byte    REQ_SET_ADDR
3977a     00 00       |                 word    0       ' Zero
3977c     00 00       |                 word    0       ' Zero
3977e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
39780                 | '------------------------------------------------------------------------------
39780                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
39780                 | ' wValue field dictates which protocol should be used.
39780                 | '
39780                 | ' When initialized, all devices default to report protocol. However the host
39780                 | ' should not make any assumptions about the device state and should set the
39780                 | ' desired protocol whenever initializing a device.
39780                 | '------------------------------------------------------------------------------
39780     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39781     0B          |                 byte    HID_SET_PROTO
39782     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
39784                 |                                                 ' (HID 1.11 Section 7.2.6).
39784     00 00       |                 word    0               ' Interface index number.
39786     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39788                 | '------------------------------------------------------------------------------
39788     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39789     0A          |                 byte    HID_SET_IDLE
3978a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3978c                 |                                         ' reporting until a change is detected in the report data
3978c                 | 
3978c                 |                                         ' (HID 1.11 Section 7.2.4).
3978c     00 00       |                 word    0       ' Interface index number.
3978e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
39790     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39791     09          |                 byte    HID_SET_REPORT
39792     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
39794                 |                                         ' (HID 1.11 Section 7.2.2).
39794     00 00       |                 word    0       ' Interface index number.
39796     00 00       |                 word    0       ' Size of the report, in bytes.
39798     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
39799     06          |                 byte    REQ_GET_DESC
3979a     00 22       |                 word    TYPE_REPORT << 8
3979c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3979e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397a0                 | '------------------------------------------------------------------------------
397a0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
397a1     06          |                 byte    REQ_GET_DESC
397a2     00 29       |                 word    TYPE_HUB << 8
397a4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
397a6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397a8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
397a9     03          |                 byte    REQ_SET_FEATURE
397aa     00 00       |                 word    0       ' port power
397ac     01 00       |                 word    1       ' Port index number (1+)
397ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397b0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
397b1     01          |                 byte    REQ_CLEAR_FEATURE
397b2     00 00       |                 word    0       ' port power
397b4     01 00       |                 word    1       ' Port index number (1+)
397b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397b8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
397b9     00          |                 byte    REQ_GET_STATUS
397ba     00 00       |                 word    0
397bc     01 00       |                 word    1       ' Port index number (1+)
397be     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
397c0                 | '------------------------------------------------------------------------------
397c0                 | if _HAVE_GAMEPAD
397c0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
397c4                 | ps3_command_buff
397c4     00 00 00 00 
397c8     00          |                 byte    $00, $00, $00, $00, $00
397c9     00 00 00 00 
397cd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
397ce     FF 27 10 00 
397d2     32          |                 byte    $FF, $27, $10, $00, $32
397d3     FF 27 10 00 
397d7     32          |                 byte    $FF, $27, $10, $00, $32
397d8     FF 27 10 00 
397dc     32          |                 byte    $FF, $27, $10, $00, $32
397dd     FF 27 10 00 
397e1     32          |                 byte    $FF, $27, $10, $00, $32
397e2     00 00 00 00 
397e6     00          |                 byte    $00, $00, $00, $00, $00
397e7     00 00 00 00 
397eb     00          |                 byte    $00, $00, $00, $00, $00
397ec     00 00 00 00 
397f0     00          |                 byte    $00, $00, $00, $00, $00
397f1     00 00 00    |                 byte    $00, $00, $00
397f4                 | '------------------------------------------------------------------------------
397f4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
397f7                 |                                         ' 0x01 All blinking
397f7                 |                                         ' 0x02 1 flashes, then on
397f7                 |                                         ' 0x03 2 flashes, then on
397f7                 |                                         ' 0x04 3 flashes, then on
397f7                 |                                         ' 0x05 4 flashes, then on
397f7                 |                                         ' 0x06 1 on
397f7                 |                                         ' 0x07 2 on
397f7                 |                                         ' 0x08 3 on
397f7                 |                                         ' 0x09 4 on
397f7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
397f7                 |                                         ' 0x0B Blinking*
397f7                 |                                         ' 0x0C Slow blinking*
397f7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
397f7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
397fa     00          |                 byte    $00             ' Left rumble
397fb     00          |                 byte    $00             ' Right rumble
397fc     00 00 00    |                 byte    $00, $00, $00
397ff     00          | end
39800                 | alignl
39800                 | 
39800                 | if HAVE_MOUSE
39800     00 00 00 00 
39804     00 00 00 00 | mouse_limits long 0[2]
39808     00 00 00 00 | mouse_outptr long 0
3980c                 | end
3980c                 | 
3980c                 | if KEYQUEUE_SIZE > 0
3980c     00          | keyq_head byte 0
3980d     00          | keyq_tail byte 0
3980e     00 00 00 00 
      ...             
39a0a     00 00 00 00 
39a0e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39a10                 | alignl
39a10                 | end
39a10                 | 
39a10                 | if EMUPAD_MAX_PLAYER > 0
39a10                 | emupad_rule_buffer
39a10                 | if EMUPAD_BUILTIN_RULES
39a10                 | file "padmap_builtin.dat"
39a10                 | end
39a10                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39a10                 | '' Default rule directly follows!
39a10                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39a10                 | end
39a10                 | 
39a10                 | '------------------------------------------------------------------------------
39a10                 | ' The USB data cache area gets zero-filled at every device disconnect
39a10                 | '------------------------------------------------------------------------------
39a10                 | usb_cache_start
39a10                 | 
39a10                 | ' HID descriptor and report buffers
39a10                 | if !!OVERLAP_MEMORY
39a10     00 00 00 00 
      ...             
3a108     00 00 00 00 
3a10c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a110                 | end
3a110     00 00 00 00 
3a114     00 00 00 00 | hkbd_report     byte    0[8]
3a118     00 00 00 00 | hkbd_led_rep    byte    0
3a11c                 | alignl
3a11c                 | 
3a11c                 | if HAVE_HIDPAD
3a11c     00 00 00 00 
      ...             
3a1d8     00 00 00 00 
3a1dc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a1e0                 | end
3a1e0                 | 
3a1e0                 | ' HUB descriptor
3a1e0     00          | hub_descr       byte    0   ' bDescLength
3a1e1     00          |                 byte    0   ' bDescriptorType
3a1e2     00          |                 byte    0   ' bNbrPorts
3a1e3     00 00       |                 word    0   ' wHubCharacteristics
3a1e5     00          |                 byte    0   ' bPwrOn2PwrGood
3a1e6     00          |                 byte    0   ' bHubContrCurrent
3a1e7     00          |                 byte    0   ' DeviceRemoveable
3a1e8     00          |                 byte    0   ' PortPwrCtrlMask
3a1e9                 | 
3a1e9                 | usb_cache_end
3a1e9                 | 
3a1e9                 | if HAVE_MOUSE
3a1e9     00 00 00 00 | mouse_xacc      long 0
3a1ed     00 00 00 00 | mouse_yacc      long 0
3a1f1     00 00 00 00 | mouse_zacc      long 0
3a1f5     00          | mouse_bstate    byte 0
3a1f6     00          | mouse_lpending  byte 0
3a1f7     00          | mouse_rpending  byte 0
3a1f8     00          | mouse_mpending  byte 0
3a1f9     00          | mouse_lock      byte 0
3a1fa     00 00 00    |                 byte 0[3] ' padding
3a1fd                 | end
3a1fd                 | 
3a1fd     00 00 00 00 
      ...             
3a275     00 00 00 00 
3a279     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a27d     00 00 00 00 
3a281     00 00 00 00 
3a285     00 00 00 00 
3a289     00 00 00 00 
3a28d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a28f     00 00 00 00 
      ...             
3a387     00 00 00 00 
3a38b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a38f                 | 
3a38f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a390                 | 	alignl
3a390                 | _audio096_spin2_dat_
3a390                 | 
3a390                 | audio       org     0
3a390                 | 
3a390     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a394     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a398     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a39c                 |  
3a39c     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a3a0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a3a4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a3a8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a3ac                 | 
3a3ac     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a3b0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a3b4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a3b8     0F 24 06 FC |             wrpin   dac2,#right
3a3bc     0F 00 1E FC |             wxpin   #256,#right    
3a3c0     41 9C 64 FD |             dirh    #left addpins 1
3a3c4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a3c8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a3cc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a3d0                 |             
3a3d0                 | '---------------------------------------------------------------------------------        
3a3d0                 | '----------------- The main loop -------------------------------------------------
3a3d0                 | '---------------------------------------------------------------------------------
3a3d0                 | 
3a3d0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a3d4     10 00 90 CD |       if_c  jmp     #loop1
3a3d8                 |   
3a3d8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a3dc     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a3e0     D5 00 80 F1 |             sub     0-0,a40000000
3a3e4     FD 01 6E FB |             djnz    cn,#p402
3a3e8                 |     
3a3e8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a3ec     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a3f0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a3f4     01 00 06 C6 |     if_c    mov     cn,#1
3a3f8     DA 02 3A F3 |             fle     ct,time3 wcz
3a3fc     02 00 06 C6 |     if_c    mov     cn,#2     
3a400     DB 02 3A F3 |             fle     ct,time4 wcz
3a404     03 00 06 C6 |     if_c    mov     cn,#3
3a408     DC 02 3A F3 |             fle     ct,time5 wcz
3a40c     04 00 06 C6 |     if_c    mov     cn,#4
3a410     DD 02 3A F3 |             fle     ct,time6 wcz
3a414     05 00 06 C6 |     if_c    mov     cn,#5
3a418     DE 02 3A F3 |             fle     ct,time7 wcz
3a41c     06 00 06 C6 |     if_c    mov     cn,#6
3a420     DF 02 3A F3 |             fle     ct,time8 wcz
3a424     07 00 06 C6 |     if_c    mov     cn,#7
3a428                 | 
3a428                 | 
3a428                 | '----------------------------------------------------------------------------------
3a428                 | '------------- Compute channel samples --------------------------------------------
3a428                 | '----------------------------------------------------------------------------------
3a428                 | 
3a428                 | 
3a428     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a42c     06 C0 65 F0 |             shl     channeladd,#6
3a430     E0 F0 03 F1 |             add     ptra,channeladd
3a434                 | 
3a434     28 16 64 FD |             setq    #11                        	' read parameters
3a438     00 D7 05 FB |             rdlong  pointer0,ptra
3a43c                 |     	    
3a43c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a440     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a444     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a448     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a44c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a450     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a454     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a458     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a45c                 |             
3a45c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a460     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a464     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a468                 | 
3a468     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a46c     EC 08 3A F9 |             getword oldrs,sample0,#1
3a470     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a474     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a478     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a47c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a480                 | 
3a480     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a484     00 04 02 F6 |             mov     dt0,0-0    
3a488     D7 04 82 F1 |             sub     dt0,time0
3a48c                 |             
3a48c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a490     FB 00 00 F1 |             add     0-0,afreq0  	
3a494                 |             
3a494                 | '---- envelopes
3a494                 |             
3a494     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a498     20 00 00 AF 
3a49c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a4a0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a4a4                 | 
3a4a4     FB 48 02 F6 |             mov     envs1,afreq0
3a4a8     F5 48 02 FA |             mul     envs1,envspd0
3a4ac     24 E7 01 F1 |             add     envph0,envs1 
3a4b0                 | 
3a4b0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a4b4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a4b8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a4bc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a4c0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a4c4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a4c8     00 46 06 36 |     if_ge   mov     envlo,#0
3a4cc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a4d0     16 E6 65 30 |     if_ge   shl     envph0,#22
3a4d4                 | 
3a4d4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a4d8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a4dc     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a4e0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a4e4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a4e8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a4ec     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a4f0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a4f4     23 49 02 FA |             mul     envs1,envlo
3a4f8     25 49 02 F1 |             add     envs1,envs2
3a4fc     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a500                 |             
3a500     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a504     1B C6 61 AD |     if_z    getrnd  spl
3a508     58 00 90 AD |     if_z    jmp     #p406
3a50c                 |  
3a50c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a510     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a514     08 D6 45 F0 |             shr     pointer0,#8
3a518                 |          
3a518     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a51c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a520     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a524     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a528                 |         
3a528     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a52c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a530     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a534                 |             
3a534     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a538     ED C4 01 F1 |             add     qq,sstart0            
3a53c                 | 
3a53c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a540     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a544     1C 01 B0 1D |     if_gt   call    #cache_read
3a548                 |          
3a548     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a54c     08 C6 65 50 |     if_nz   shl     spl,#8
3a550     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a554     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a558     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a55c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a560     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a564                 | 
3a564                 | 
3a564     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a568     00 C6 01 F6 |             mov     spl,0-0
3a56c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a570     00 C6 01 F6 |             mov     spl,0-0
3a574                 | 
3a574     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a578     00 0A 02 F6 |             mov     ls0,0-0
3a57c     20 00 00 FF 
3a580     00 C4 05 F6 |             mov     qq,##16384
3a584     FE C4 81 F1 |             sub     qq,apan0
3a588     E2 C6 31 FA |             scas    spl,qq
3a58c     00 0C 02 F6 |             mov     rs0, 0-0
3a590                 | 
3a590     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a594     06 11 02 F1 |             add     rs,rs0
3a598     03 0F 82 F1 |             sub     ls,oldls
3a59c     05 0F 02 F1 |             add     ls,ls0
3a5a0                 |    
3a5a0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a5a4     05 D9 21 F9 |             setword sample0,ls0,#0
3a5a8                 |             
3a5a8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a5ac     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a5b0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a5b4                 |   '  if_z    mov     sample0,#0
3a5b4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a5b8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a5bc     04 00 00 AF 
3a5c0     00 B0 05 A1 |     if_z    add     time1,##2048
3a5c4     D8 B2 01 A6 |     if_z    mov     time2,time1
3a5c8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a5cc                 | 
3a5cc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a5d0     00 D7 65 FC |             wrlong  pointer0,ptra
3a5d4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a5d8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a5dc                 |                       
3a5dc     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a5e0     FF C3 25 A7 |     if_z    decmod  front, #511          
3a5e4                 |          
3a5e4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a5e8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a5ec     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a5f0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a5f4                 | 	    
3a5f4                 | 		    
3a5f4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a5f8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a5fc     04 15 02 F6 |             mov     newsample, oldrs       
3a600                 | 
3a600     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a604     02 AF 01 F1 |             add     time0,dt0    
3a608                 |                                      
3a608     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a60c     D8 FD 9F AD |     if_z    jmp     #loop1
3a610     02 C5 01 F6 |             mov     qq,dt0
3a614                 | 
3a614                 |     
3a614                 |             
3a614     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a618     40 00 90 3D |     if_nc   jmp     #p399
3a61c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a620     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a624     F4 FF 9F AD |     if_e    jmp     #p398   
3a628                 | 		
3a628     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a62c     20 00 90 AD |     if_z    jmp     #p302	   
3a630                 |   
3a630     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a634     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a638     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a63c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a640     60 1E 66 FC |             wrlong  scptr2,#$60
3a644     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a648     01 00 00 CF 
3a64c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a650                 | 			    
3a650     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a654     00 00 00 FF 
3a658     FF C3 05 F7 |             incmod  front, ##511
3a65c     ED C5 6D FB | p399        djnz    qq,#p301
3a660                 |             
3a660     6C FD 9F FD |             jmp     #loop            'loop
3a664                 | 
3a664                 | '----------------------------------------------------------------------------------
3a664                 | '------------- This is the end of the main loop -----------------------------------
3a664                 | '----------------------------------------------------------------------------------
3a664                 | 
3a664                 | '----------------------------------------------------------------------------------
3a664                 | '------------- PSRAM cache ----------- --------------------------------------------
3a664                 | '----------------------------------------------------------------------------------
3a664                 | 
3a664                 | ' There are 8 cache pointers for 8 channels
3a664                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a664                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a664                 | 
3a664                 | 
3a664     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a668                 |             
3a668     E2 40 02 F6 | 	    mov     addrhi,qq		
3a66c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a670     14 01 96 F9 | 	    alts    cn,#cache1            
3a674     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a678     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a67c                 | 	
3a67c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a680     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a684     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a688     08 38 66 F0 | 	    shl     cmd,#8
3a68c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a690     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a694     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a698     13 3B 02 F1 |             add     hubaddr,hubptr 
3a69c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a6a0     28 04 64 FD |             setq    #2                          ' write 3 longs
3a6a4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a6a8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a6ac     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a6b0                 |             
3a6b0                 | 	
3a6b0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a6b4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a6b8     13 C5 01 F1 | 	    add     qq,hubptr
3a6bc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a6c0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a6c4                 |           
3a6c4                 | 
3a6c4                 | '--------------------------------------------------------------------------
3a6c4                 | '------ Interrupt service -------------------------------------------------
3a6c4                 | '------ Output the sample, get the next one if exists ---------------------
3a6c4                 | '--------------------------------------------------------------------------
3a6c4                 | 
3a6c4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a6c8     0F D0 25 FC |             wypin   rsample,#right       '4
3a6cc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a6d0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a6d4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a6d8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a6dc     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a6e0                 |     
3a6e0     F5 FF 3B FB |             reti1                        '17/19 
3a6e4                 |           
3a6e4                 | '---------------------------------------------------------------------------
3a6e4                 | '-------- End of interrupt -------------------------------------------------
3a6e4                 | '---------------------------------------------------------------------------    
3a6e4                 | 
3a6e4                 | 
3a6e4                 | '---------------------------------------------------------------------------
3a6e4                 | '------- Variables ---------------------------------------------------------
3a6e4                 | '---------------------------------------------------------------------------
3a6e4                 | 
3a6e4                 | ' constants
3a6e4                 | 
3a6e4     00 00 00 40 | a40000000   long $40000000
3a6e8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a6ec                 | 
3a6ec                 | ' Time variables
3a6ec                 | 
3a6ec     00 00 00 00 | time0       long 0    ' Global sample computing time
3a6f0     01 00 00 00 | time1       long 1    ' Local channels time
3a6f4     02 00 00 00 | time2       long 2
3a6f8     03 00 00 00 | time3       long 3
3a6fc     04 00 00 00 | time4       long 4
3a700     05 00 00 00 | time5       long 5
3a704     06 00 00 00 | time6       long 6
3a708     07 00 00 00 | time7       long 7
3a70c     08 00 00 00 | time8       long 8
3a710                 | 
3a710     00 00 00 00 | channeladd long 0
3a714                 | 
3a714     00 00 00 00 | front       long 0
3a718                 | 
3a718                 | ' temporary variables 
3a718     00 00 00 00 | qq          long 0
3a71c     00 00 00 00 | spl         long 0
3a720     00 00 00 00 | zero        long 0
3a724     00 00 00 00 | mailbox     long 0
3a728     00 00 00 00 | mailbox2 long 0
3a72c                 | 
3a72c                 | ' Interrupt ISR variables
3a72c                 | 
3a72c     00 00 00 00 | lsample     long 0
3a730     00 00 00 00 | rsample     long 0
3a734     00 00 00 00 | lsnext      long 0
3a738     00 00 00 00 | rsnext      long 0 
3a73c                 | 
3a73c                 | ' channel parameter block
3a73c                 | 
3a73c     00 00 00 00 | pointer0    long 0     
3a740     00 00 00 00 | sample0     long 0
3a744     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a748     00 00 00 00 | lstart0     long 0
3a74c     00 00 00 00 | lend0       long 0
3a750     00 00 00 00 | volpan0     long 0
3a754     00 00 00 00 | freqskip0   long 0
3a758     00 00 00 00 | command0    long 0
3a75c     00 00 00 00 | envph0	    long 0
3a760     00 00 00 00 | envptr0	    long 0
3a764     00 00 00 00 | envspd0	    long 0
3a768     00 00 00 00 | envlen0	    long 0
3a76c     00 00 00 00 | res5	    long 0
3a770     00 00 00 00 | res6	    long 0
3a774     00 00 00 00 | res7	    long 0
3a778     00 00 00 00 | res8	    long 0
3a77c                 | 
3a77c     00 00 00 00 | afreq0      long 0
3a780     00 00 00 00 | askip0      long 0
3a784     00 00 00 00 | avol0       long 0
3a788     00 00 00 00 | apan0       long 0
3a78c                 | 
3a78c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a790     00 00 00 00 | cn          long 0
3a794     00 00 00 00 | ct          long 0
3a798     00 00 00 00 | dt0         long 0
3a79c                 | 
3a79c                 | ' Samples
3a79c     00 00 00 00 | oldls       long 0
3a7a0     00 00 00 00 | oldrs       long 0
3a7a4                 | 
3a7a4     00 00 00 00 | ls0         long 0
3a7a8     00 00 00 00 | rs0         long 0
3a7ac                 | 
3a7ac     00 00 00 00 | ls          long 0    
3a7b0     00 00 00 00 | rs          long 0
3a7b4                 | 
3a7b4     00 00 00 00 | oldsample   long 0
3a7b8     00 00 00 00 | newsample   long 0
3a7bc                 | 
3a7bc     00 00 00 00 | nrsample    long 0
3a7c0     00 00 00 00 | nlsample    long 0
3a7c4                 | 
3a7c4     00 00 00 00 | scbase long 0
3a7c8     00 00 00 00 | scptr long 0
3a7cc     00 00 00 00 | scptr2 long 0
3a7d0     00 00 00 00 | scope long 0
3a7d4                 | 
3a7d4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a7d8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a7dc                 | 
3a7dc     00 18 07 00 | hubptr      long $71800
3a7e0     00 00 00 00 | cache1      long 0
3a7e4     00 00 00 00 | cache2      long 0
3a7e8     00 00 00 00 | cache3      long 0
3a7ec     00 00 00 00 | cache4      long 0
3a7f0     00 00 00 00 | cache5      long 0
3a7f4     00 00 00 00 | cache6      long 0
3a7f8     00 00 00 00 | cache7      long 0
3a7fc     00 00 00 00 | cache8      long 0
3a800                 | 
3a800                 | 
3a800     00 00 00 00 | cmd         long 0
3a804     00 00 00 00 | hubaddr     long 0
3a808     00 01 00 00 | count       long 256
3a80c     00 00 00 00 | addrlo long 0
3a810     00 00 00 00 | addrhi long 0
3a814     00 00 00 00 | pointer00 long 0
3a818     00 00 00 00 | envhi long 0
3a81c     00 00 00 00 | envlo long 0
3a820     00 00 00 00 | envs1 long 0
3a824     00 00 00 00 | envs2 long 0
3a828     00 00 00 00 | noise0 long 0
3a82c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a830     00 00 00 00 
3a834     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a838                 | 	alignl
3a838                 | __system__dat_
3a838     00 00 00 00 
3a83c     00 00 00 00 | 	byte	$00[8]
3a840     03 00 00 00 
3a844     00 00 00 00 
3a848     00 00 00 00 
3a84c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a850     00 00 00 00 
      ...             
3aadc     00 00 00 00 
3aae0     00 00 00 00 | 	byte	$00[660]
3aae4     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3aae8     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3aaec     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3aaf0     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3aaf4     00 00 00 00 
3aaf8     00 00 00 00 
3aafc     00 00 00 00 
3ab00     00 00 00 00 
3ab04     00 00 00 00 
3ab08     00 00 00 00 
3ab0c     00 00 00 00 | 	byte	$00[28]
3ab10     78 AB 03 00 | 	long	@@@__system__dat_ + 832
3ab14     7B AB 03 00 | 	long	@@@__system__dat_ + 835
3ab18     9C AB 03 00 | 	long	@@@__system__dat_ + 868
3ab1c     B5 AB 03 00 | 	long	@@@__system__dat_ + 893
3ab20     D0 AB 03 00 | 	long	@@@__system__dat_ + 920
3ab24     EA AB 03 00 | 	long	@@@__system__dat_ + 946
3ab28     FA AB 03 00 | 	long	@@@__system__dat_ + 962
3ab2c     0C AC 03 00 | 	long	@@@__system__dat_ + 980
3ab30     1E AC 03 00 | 	long	@@@__system__dat_ + 998
3ab34     30 AC 03 00 | 	long	@@@__system__dat_ + 1016
3ab38     3C AC 03 00 | 	long	@@@__system__dat_ + 1028
3ab3c     4D AC 03 00 | 	long	@@@__system__dat_ + 1045
3ab40     61 AC 03 00 | 	long	@@@__system__dat_ + 1065
3ab44     6B AC 03 00 | 	long	@@@__system__dat_ + 1075
3ab48     7B AC 03 00 | 	long	@@@__system__dat_ + 1091
3ab4c     8A AC 03 00 | 	long	@@@__system__dat_ + 1106
3ab50     A0 AC 03 00 | 	long	@@@__system__dat_ + 1128
3ab54     B9 AC 03 00 | 	long	@@@__system__dat_ + 1153
3ab58     CD AC 03 00 | 	long	@@@__system__dat_ + 1173
3ab5c     DB AC 03 00 | 	long	@@@__system__dat_ + 1187
3ab60     EF AC 03 00 | 	long	@@@__system__dat_ + 1207
3ab64     FB AC 03 00 | 	long	@@@__system__dat_ + 1219
3ab68     0D AD 03 00 | 	long	@@@__system__dat_ + 1237
3ab6c     25 AD 03 00 | 	long	@@@__system__dat_ + 1261
3ab70     37 AD 03 00 | 	long	@@@__system__dat_ + 1279
3ab74     4A AD 03 00 | 	long	@@@__system__dat_ + 1298
3ab78     4F 4B 00 4E 
3ab7c     75 6D 65 72 
3ab80     69 63 61 6C 
3ab84     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ab88     75 6D 65 6E 
3ab8c     74 20 6F 75 
3ab90     74 20 6F 66 
3ab94     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3ab98     61 69 6E 00 
3ab9c     52 65 73 75 
3aba0     6C 74 20 6E 
3aba4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3aba8     65 70 72 65 
3abac     73 65 6E 74 
3abb0     61 62 6C 65 
3abb4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3abb8     65 67 61 6C 
3abbc     20 6D 75 6C 
3abc0     74 69 62 79 
3abc4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3abc8     65 71 75 65 
3abcc     6E 63 65 00 
3abd0     4E 6F 20 73 
3abd4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3abd8     66 69 6C 65 
3abdc     20 6F 72 20 
3abe0     64 69 72 65 
3abe4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3abe8     79 00 42 61 
3abec     64 20 66 69 
3abf0     6C 65 20 6E 
3abf4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3abf8     72 00 50 65 
3abfc     72 6D 69 73 
3ac00     73 69 6F 6E 
3ac04     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ac08     69 65 64 00 
3ac0c     4E 6F 74 20 
3ac10     65 6E 6F 75 
3ac14     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ac18     65 6D 6F 72 
3ac1c     79 00 54 65 
3ac20     6D 70 6F 72 
3ac24     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ac28     66 61 69 6C 
3ac2c     75 72 65 00 
3ac30     46 69 6C 65 
3ac34     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ac38     73 74 73 00 
3ac3c     49 6E 76 61 
3ac40     6C 69 64 20 
3ac44     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ac48     6D 65 6E 74 
3ac4c     00 54 6F 6F 
3ac50     20 6D 61 6E 
3ac54     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ac58     65 6E 20 66 
3ac5c     69 6C 65 73 
3ac60     00 49 2F 4F 
3ac64     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ac68     6F 72 00 4E 
3ac6c     6F 74 20 61 
3ac70     20 64 69 72 
3ac74     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ac78     72 79 00 49 
3ac7c     73 20 61 20 
3ac80     64 69 72 65 
3ac84     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ac88     79 00 52 65 
3ac8c     61 64 20 6F 
3ac90     6E 6C 79 20 
3ac94     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3ac98     20 73 79 73 
3ac9c     74 65 6D 00 
3aca0     46 75 6E 63 
3aca4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3aca8     20 6E 6F 74 
3acac     20 69 6D 70 
3acb0     6C 65 6D 65 
3acb4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3acb8     00 44 69 72 
3acbc     65 63 74 6F 
3acc0     72 79 20 6E 
3acc4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3acc8     6D 70 74 79 
3accc     00 4E 61 6D 
3acd0     65 20 74 6F 
3acd4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3acd8     6E 67 00 44 
3acdc     65 76 69 63 
3ace0     65 20 6E 6F 
3ace4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ace8     65 6B 61 62 
3acec     6C 65 00 42 
3acf0     61 64 20 61 
3acf4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3acf8     73 73 00 42 
3acfc     72 6F 6B 65 
3ad00     6E 20 63 6F 
3ad04     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ad08     74 69 6F 6E 
3ad0c     00 44 65 76 
3ad10     69 63 65 20 
3ad14     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ad18     65 73 6F 75 
3ad1c     72 63 65 20 
3ad20     62 75 73 79 
3ad24     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ad28     73 73 20 64 
3ad2c     65 76 69 63 
3ad30     65 20 6C 69 
3ad34     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ad38     6F 20 73 70 
3ad3c     61 63 65 20 
3ad40     6F 6E 20 64 
3ad44     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ad48     65 00 55 6E 
3ad4c     6B 6E 6F 77 
3ad50     6E 20 65 72 
3ad54     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ad58     00 00 00 00 
3ad5c     00 00 00 00 | 	byte	$00[8]
3ad60     05 00 00 00 
3ad64     00 00 00 00 
3ad68     00 00 00 00 
3ad6c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad70     00 00 00 00 | 	byte	$00, $00, $00, $00
3ad74     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ad78     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ad7c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ad80     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ad84     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ad88     00 00 00 00 
3ad8c     00 00 00 00 | 	byte	$00[8]
3ad90     01 00 00 00 
3ad94     06 00 00 00 
3ad98     00 00 00 00 
3ad9c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ada0     00 00 00 00 
3ada4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ada8     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3adac     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3adb0     00 00 00 00 | 	byte	$00, $00, $00, $00
3adb4     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3adb8     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3adbc     00 00 00 00 
3adc0     00 00 00 00 | 	byte	$00[8]
3adc4     01 00 00 00 
3adc8     06 00 00 00 
3adcc     00 00 00 00 
3add0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3add4     00 00 00 00 
3add8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3addc     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ade0     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ade4     00 00 00 00 | 	byte	$00, $00, $00, $00
3ade8     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3adec     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3adf0     00 00 00 00 
      ...             
3af60     00 00 00 00 
3af64     00 00 00 00 | 	byte	$00[376]
3af68     6C AF 03 00 | 	long	@@@__system__dat_ + 1844
3af6c     00 00 00 00 
3af70     00 00 00 00 
3af74     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af78                 | 	alignl
3af78                 | _fatfs_cc_dat_
3af78     C7 00 FC 00 
3af7c     E9 00 E2 00 
3af80     E4 00 E0 00 
3af84     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3af88     EA 00 EB 00 
3af8c     E8 00 EF 00 
3af90     EE 00 EC 00 
3af94     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3af98     C9 00 E6 00 
3af9c     C6 00 F4 00 
3afa0     F6 00 F2 00 
3afa4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3afa8     FF 00 D6 00 
3afac     DC 00 F8 00 
3afb0     A3 00 D8 00 
3afb4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3afb8     E1 00 ED 00 
3afbc     F3 00 FA 00 
3afc0     F1 00 D1 00 
3afc4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3afc8     BF 00 AE 00 
3afcc     AC 00 BD 00 
3afd0     BC 00 A1 00 
3afd4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3afd8     91 25 92 25 
3afdc     93 25 02 25 
3afe0     24 25 C1 00 
3afe4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3afe8     A9 00 63 25 
3afec     51 25 57 25 
3aff0     5D 25 A2 00 
3aff4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3aff8     14 25 34 25 
3affc     2C 25 1C 25 
3b000     00 25 3C 25 
3b004     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3b008     5A 25 54 25 
3b00c     69 25 66 25 
3b010     60 25 50 25 
3b014     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3b018     F0 00 D0 00 
3b01c     CA 00 CB 00 
3b020     C8 00 31 01 
3b024     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3b028     CF 00 18 25 
3b02c     0C 25 88 25 
3b030     84 25 A6 00 
3b034     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3b038     D3 00 DF 00 
3b03c     D4 00 D2 00 
3b040     F5 00 D5 00 
3b044     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3b048     DE 00 DA 00 
3b04c     DB 00 D9 00 
3b050     FD 00 DD 00 
3b054     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3b058     AD 00 B1 00 
3b05c     17 20 BE 00 
3b060     B6 00 A7 00 
3b064     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3b068     B0 00 A8 00 
3b06c     B7 00 B9 00 
3b070     B3 00 B2 00 
3b074     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3b078     61 00 1A 03 
3b07c     E0 00 17 03 
3b080     F8 00 07 03 
3b084     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3b088     78 01 00 01 
3b08c     30 01 32 01 
3b090     06 01 39 01 
3b094     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3b098     2E 01 79 01 
3b09c     06 01 80 01 
3b0a0     4D 00 43 02 
3b0a4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b0a8     82 01 84 01 
3b0ac     84 01 86 01 
3b0b0     87 01 87 01 
3b0b4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b0b8     8B 01 8B 01 
3b0bc     8D 01 8E 01 
3b0c0     8F 01 90 01 
3b0c4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b0c8     93 01 94 01 
3b0cc     F6 01 96 01 
3b0d0     97 01 98 01 
3b0d4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b0d8     9B 01 9C 01 
3b0dc     9D 01 20 02 
3b0e0     9F 01 A0 01 
3b0e4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b0e8     A2 01 A4 01 
3b0ec     A4 01 A6 01 
3b0f0     A7 01 A7 01 
3b0f4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b0f8     AB 01 AC 01 
3b0fc     AC 01 AE 01 
3b100     AF 01 AF 01 
3b104     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b108     B3 01 B3 01 
3b10c     B5 01 B5 01 
3b110     B7 01 B8 01 
3b114     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b118     BB 01 BC 01 
3b11c     BC 01 BE 01 
3b120     F7 01 C0 01 
3b124     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b128     C3 01 C4 01 
3b12c     C5 01 C4 01 
3b130     C7 01 C8 01 
3b134     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b138     CB 01 CA 01 
3b13c     CD 01 10 01 
3b140     DD 01 01 00 
3b144     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b148     12 01 F3 01 
3b14c     03 00 F1 01 
3b150     F4 01 F4 01 
3b154     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b158     22 02 12 01 
3b15c     3A 02 09 00 
3b160     65 2C 3B 02 
3b164     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b168     66 2C 3F 02 
3b16c     40 02 41 02 
3b170     41 02 46 02 
3b174     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b178     40 00 81 01 
3b17c     86 01 55 02 
3b180     89 01 8A 01 
3b184     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b188     5A 02 90 01 
3b18c     5C 02 5D 02 
3b190     5E 02 5F 02 
3b194     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b198     62 02 94 01 
3b19c     64 02 65 02 
3b1a0     66 02 67 02 
3b1a4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b1a8     6A 02 62 2C 
3b1ac     6C 02 6D 02 
3b1b0     6E 02 9C 01 
3b1b4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b1b8     9D 01 73 02 
3b1bc     74 02 9F 01 
3b1c0     76 02 77 02 
3b1c4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b1c8     7A 02 7B 02 
3b1cc     7C 02 64 2C 
3b1d0     7E 02 7F 02 
3b1d4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b1d8     82 02 A9 01 
3b1dc     84 02 85 02 
3b1e0     86 02 87 02 
3b1e4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b1e8     B1 01 B2 01 
3b1ec     45 02 8D 02 
3b1f0     8E 02 8F 02 
3b1f4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b1f8     B7 01 7B 03 
3b1fc     03 00 FD 03 
3b200     FE 03 FF 03 
3b204     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b208     86 03 88 03 
3b20c     89 03 8A 03 
3b210     B1 03 11 03 
3b214     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b218     A3 03 A3 03 
3b21c     C4 03 08 03 
3b220     CC 03 03 00 
3b224     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b228     8F 03 D8 03 
3b22c     18 01 F2 03 
3b230     0A 00 F9 03 
3b234     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b238     F5 03 F6 03 
3b23c     F7 03 F7 03 
3b240     F9 03 FA 03 
3b244     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b248     20 03 50 04 
3b24c     10 07 60 04 
3b250     22 01 8A 04 
3b254     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b258     0E 01 CF 04 
3b25c     01 00 C0 04 
3b260     D0 04 44 01 
3b264     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b268     00 00 7D 1D 
3b26c     01 00 63 2C 
3b270     00 1E 96 01 
3b274     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b278     00 1F 08 06 
3b27c     10 1F 06 06 
3b280     20 1F 08 06 
3b284     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b288     40 1F 06 06 
3b28c     51 1F 07 00 
3b290     59 1F 52 1F 
3b294     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b298     5D 1F 56 1F 
3b29c     5F 1F 60 1F 
3b2a0     08 06 70 1F 
3b2a4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b2a8     BB 1F C8 1F 
3b2ac     C9 1F CA 1F 
3b2b0     CB 1F DA 1F 
3b2b4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b2b8     F9 1F EA 1F 
3b2bc     EB 1F FA 1F 
3b2c0     FB 1F 80 1F 
3b2c4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b2c8     08 06 A0 1F 
3b2cc     08 06 B0 1F 
3b2d0     04 00 B8 1F 
3b2d4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b2d8     BC 1F CC 1F 
3b2dc     01 00 C3 1F 
3b2e0     D0 1F 02 06 
3b2e4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b2e8     E5 1F 01 00 
3b2ec     EC 1F F3 1F 
3b2f0     01 00 FC 1F 
3b2f4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b2f8     32 21 70 21 
3b2fc     10 02 84 21 
3b300     01 00 83 21 
3b304     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b308     30 2C 2F 04 
3b30c     60 2C 02 01 
3b310     67 2C 06 01 
3b314     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b318     80 2C 64 01 
3b31c     00 2D 26 08 
3b320     41 FF 1A 03 
3b324     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b328     05 07 09 0E 
3b32c     10 12 14 16 
3b330     18 1C 1E 43 
3b334     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b338     41 41 43 45 
3b33c     45 45 49 49 
3b340     49 41 41 45 
3b344     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b348     4F 55 55 59 
3b34c     4F 55 4F 9C 
3b350     4F 9E 9F 41 
3b354     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b358     A5 A6 A7 A8 
3b35c     A9 AA AB AC 
3b360     AD AE AF B0 
3b364     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b368     41 41 41 B8 
3b36c     B9 BA BB BC 
3b370     BD BE BF C0 
3b374     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b378     C5 41 41 C8 
3b37c     C9 CA CB CC 
3b380     CD CE CF D1 
3b384     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b388     49 49 49 49 
3b38c     D9 DA DB DC 
3b390     DD 49 DF 4F 
3b394     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b398     4F E6 E8 E8 
3b39c     55 55 55 59 
3b3a0     59 EE EF F0 
3b3a4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b3a8     F5 F6 F7 F8 
3b3ac     F9 FA FB FC 
3b3b0     FD FE FF 00 
3b3b4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b3b8     00 00 00 00 | 	byte	$00, $00, $00, $00
3b3bc     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b3c0     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b3c4     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b3c8     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b3cc     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b3d0     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b3d4     00 00 00 00 
3b3d8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b3dc     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b3e0     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b3e4     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b3e8     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b3ec     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b3f0     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b3f4     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b3f8     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b3fc     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b400     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b404     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b408     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b40c     FF FF FF FF 
3b410     1F 00 00 00 
3b414     1C 00 00 00 
3b418     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b41c     1E 00 00 00 
3b420     1F 00 00 00 
3b424     1E 00 00 00 
3b428     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b42c     1F 00 00 00 
3b430     1E 00 00 00 
3b434     1F 00 00 00 
3b438     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b43c     1F 00 00 00 
3b440     00 00 00 00 
3b444     1F 00 00 00 
3b448     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b44c     5A 00 00 00 
3b450     78 00 00 00 
3b454     97 00 00 00 
3b458     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b45c     D4 00 00 00 
3b460     F3 00 00 00 
3b464     11 01 00 00 
3b468     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b46c     4E 01 00 00 
3b470     6D 01 00 00 
3b474     FF FF FF FF 
3b478     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b47c     00 00 00 00 
      ...             
3b494     00 00 00 00 
3b498     00 00 00 00 | 	byte	$00[32]
3b49c     BA B4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b4a0     BE B4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b4a4     00 00 00 00 
3b4a8     00 00 00 00 
3b4ac     00 00 00 00 
3b4b0     00 00 00 00 
3b4b4     00 00       | 	byte	$00[18]
3b4b6     3F 3F 3F 00 
3b4ba     55 43 54 00 
3b4be     55 43 54 00 
3b4c2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b4c6     00 00 00 00 
3b4ca     00 00 00    | 	byte	$00[7]
3b4cd     CA 9A 3B 00 
3b4d1     00 00 00 01 
3b4d5     01 01 01 01 
3b4d9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b4dd     91 11 11 11 
3b4e1     11 01 01 01 
3b4e5     01 01 01 01 
3b4e9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b4ed     01 01 01 01 
3b4f1     01 01 01    | 	byte	$01[7]
3b4f4     90 20 20 20 
3b4f8     20 20 20 20 
3b4fc     20 20 20 20 
3b500     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b504     42 42 42 42 
3b508     42 42 42 42 
3b50c     42 42       | 	byte	$42[10]
3b50e     20 20 20 20 
3b512     20 20 20    | 	byte	$20[7]
3b515     44 44 44 44 
3b519     44 44       | 	byte	$44[6]
3b51b     04 04 04 04 
3b51f     04 04 04 04 
3b523     04 04 04 04 
3b527     04 04 04 04 
3b52b     04 04 04 04 | 	byte	$04[20]
3b52f     20 20 20 20 
3b533     20 20       | 	byte	$20[6]
3b535     48 48 48 48 
3b539     48 48       | 	byte	$48[6]
3b53b     08 08 08 08 
3b53f     08 08 08 08 
3b543     08 08 08 08 
3b547     08 08 08 08 
3b54b     08 08 08 08 | 	byte	$08[20]
3b54f     20 20 20 20 
3b553     01 00 00 00 
3b557     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b558                 | __methodtable__
3b558     50 B3 01 00 | 	long	@_do_no_command
3b55c     58 26 01 00 | 	long	@_do_plus
3b560     44 2B 01 00 | 	long	@_do_minus
3b564     0C 30 01 00 | 	long	@_do_or
3b568     24 31 01 00 | 	long	@_do_mul
3b56c     B0 36 01 00 | 	long	@_do_fdiv
3b570     F4 2E 01 00 | 	long	@_do_and
3b574     90 34 01 00 | 	long	@_do_div
3b578     78 38 01 00 | 	long	@_do_mod
3b57c     98 3A 01 00 | 	long	@_do_shl
3b580     B0 3B 01 00 | 	long	@_do_shr
3b584     C8 3C 01 00 | 	long	@_do_power
3b588     D8 19 01 00 | 	long	@_do_getvar
3b58c     B8 E7 00 00 | 	long	@_do_push
3b590     D8 13 01 00 | 	long	@_do_assign
3b594     14 81 01 00 | 	long	@_do_cls
3b598     D8 FD 00 00 | 	long	@_do_new
3b59c     8C 81 01 00 | 	long	@_do_plot
3b5a0     5C 82 01 00 | 	long	@_do_draw
3b5a4     D0 8B 01 00 | 	long	@_do_print
3b5a8     C8 84 01 00 | 	long	@_do_circle
3b5ac     50 83 01 00 | 	long	@_do_fcircle
3b5b0     40 86 01 00 | 	long	@_do_box
3b5b4     E8 89 01 00 | 	long	@_do_frame
3b5b8     54 81 01 00 | 	long	@_do_color
3b5bc     6C CF 00 00 | 	long	@_do_for
3b5c0     80 D7 00 00 | 	long	@_do_next
3b5c4     3C FB 00 00 | 	long	@_do_list
3b5c8     80 E9 00 00 | 	long	@_do_run
3b5cc     00 13 01 00 | 	long	@_do_error
3b5d0     F8 FF 00 00 | 	long	@_do_fast_goto
3b5d4     60 0F 01 00 | 	long	@_do_find_goto
3b5d8     70 11 01 00 | 	long	@_do_slow_goto
3b5dc     6C AF 01 00 | 	long	@_do_nothing
3b5e0     90 BA 00 00 | 	long	@_test_csave
3b5e4     08 ED 00 00 | 	long	@_do_save
3b5e8     F4 D2 00 00 | 	long	@_do_load
3b5ec     04 9B 01 00 | 	long	@_do_pinwrite
3b5f0     A0 A5 01 00 | 	long	@_do_waitms
3b5f4     DC A6 01 00 | 	long	@_do_waitvbl
3b5f8     04 AD 01 00 | 	long	@_do_if
3b5fc     E8 AD 01 00 | 	long	@_do_else
3b600     90 3E 01 00 | 	long	@_do_eq
3b604     08 4D 01 00 | 	long	@_do_ge
3b608     E0 51 01 00 | 	long	@_do_le
3b60c     68 43 01 00 | 	long	@_do_gt
3b610     40 48 01 00 | 	long	@_do_lt
3b614     B8 56 01 00 | 	long	@_do_ne
3b618     90 5B 01 00 | 	long	@_do_rnd
3b61c     70 AF 01 00 | 	long	@_do_brun
3b620     3C B2 01 00 | 	long	@_do_beep
3b624     0C A7 01 00 | 	long	@_do_dir
3b628     20 91 01 00 | 	long	@_do_paper
3b62c     A8 91 01 00 | 	long	@_do_ink
3b630     44 92 01 00 | 	long	@_do_font
3b634     C0 92 01 00 | 	long	@_do_mode
3b638     A8 B1 01 00 | 	long	@_do_mouse
3b63c     AC 80 01 00 | 	long	@_do_gettime
3b640     DC B1 01 00 | 	long	@_do_cursor
3b644     10 B2 01 00 | 	long	@_do_click
3b648     38 7E 01 00 | 	long	@_do_mousex
3b64c     7C 7E 01 00 | 	long	@_do_mousey
3b650     04 7F 01 00 | 	long	@_do_mousek
3b654     C0 7E 01 00 | 	long	@_do_mousew
3b658     64 5E 01 00 | 	long	@_do_sin
3b65c     08 74 01 00 | 	long	@_do_stick
3b660     8C 75 01 00 | 	long	@_do_strig
3b664     4C 7D 01 00 | 	long	@_do_sprite
3b668     D8 79 01 00 | 	long	@_do_defsprite
3b66c     10 77 01 00 | 	long	@_do_getpixel
3b670     E8 A6 01 00 | 	long	@_do_waitclock
3b674     5C B3 01 00 | 	long	@_do_negative
3b678     48 7F 01 00 | 	long	@_do_rdpin
3b67c     B4 7F 01 00 | 	long	@_do_rqpin
3b680     28 80 01 00 | 	long	@_do_pinread
3b684     9C 9D 01 00 | 	long	@_do_wrpin
3b688     1C 9E 01 00 | 	long	@_do_wxpin
3b68c     9C 9E 01 00 | 	long	@_do_wypin
3b690     8C 9B 01 00 | 	long	@_do_pinfloat
3b694     CC 9B 01 00 | 	long	@_do_pinlo
3b698     0C 9C 01 00 | 	long	@_do_pinhi
3b69c     8C 9C 01 00 | 	long	@_do_pinstart
3b6a0     4C 9C 01 00 | 	long	@_do_pintoggle
3b6a4     1C 9F 01 00 | 	long	@_do_position
3b6a8     C0 6D 01 00 | 	long	@_do_cos
3b6ac     E0 6E 01 00 | 	long	@_do_tan
3b6b0     04 72 01 00 | 	long	@_do_atn
3b6b4     EC 6F 01 00 | 	long	@_do_asin
3b6b8     F8 70 01 00 | 	long	@_do_acos
3b6bc     18 73 01 00 | 	long	@_do_sqr
3b6c0     28 88 01 00 | 	long	@_do_fill
3b6c4     50 F2 00 00 | 	long	@_do_defsnd
3b6c8     2C C4 00 00 | 	long	@_do_defenv
3b6cc     0C AE 01 00 | 	long	@_do_rad
3b6d0     34 AE 01 00 | 	long	@_do_deg
3b6d4     B0 AE 01 00 | 	long	@_do_int
3b6d8     44 DB 00 00 | 	long	@_do_play
3b6dc     64 98 01 00 | 	long	@_do_setdelay
3b6e0     BC 97 01 00 | 	long	@_do_setenv
3b6e4     0C 99 01 00 | 	long	@_do_setlen
3b6e8     5C 9A 01 00 | 	long	@_do_setpan
3b6ec     B4 99 01 00 | 	long	@_do_setvol
3b6f0     6C 96 01 00 | 	long	@_do_setwave
3b6f4     14 97 01 00 | 	long	@_do_setsustain
3b6f8     B8 F1 00 00 | 	long	@_do_release
3b6fc     58 5D 01 00 | 	long	@_do_getenvsustain
3b700     A4 9F 01 00 | 	long	@_do_poke
3b704     7C A0 01 00 | 	long	@_do_dpoke
3b708     54 A1 01 00 | 	long	@_do_lpoke
3b70c     2C A2 01 00 | 	long	@_do_peek
3b710     DC A2 01 00 | 	long	@_do_dpeek
3b714     88 A3 01 00 | 	long	@_do_lpeek
3b718     98 A4 01 00 | 	long	@_do_adr
3b71c     34 A4 01 00 | 	long	@_do_fre
3b720     9C A4 01 00 | 	long	@_do_getnotevalue
3b724     90 1F 01 00 | 	long	@_do_getaddr
3b728     80 23 01 00 | 	long	@_do_inkey
3b72c     0C B4 01 00 | 	long	@_do_abs
3b730     00 6B 01 00 | 	long	@_do_hex
3b734     60 6C 01 00 | 	long	@_do_bin
3b738     FC 67 01 00 | 	long	@_do_val
3b73c     00 67 01 00 | 	long	@_do_chr
3b740     3C 64 01 00 | 	long	@_do_asc
3b744     B8 62 01 00 | 	long	@_do_left
3b748     34 61 01 00 | 	long	@_do_right
3b74c     70 5F 01 00 | 	long	@_do_mid
3b750     94 65 01 00 | 	long	@_do_len
3b754     DC D1 00 00 | 	long	@_do_gosub
3b758     D4 E8 00 00 | 	long	@_do_return
3b75c     28 CF 00 00 | 	long	@_do_end
3b760     80 E7 00 00 | 	long	@_do_pop
3b764     60 78 01 00 | 	long	@_do_log
3b768     20 C2 00 00 | 	long	@_do_changevol
3b76c     00 C3 00 00 | 	long	@_do_changewav
3b770     10 C1 00 00 | 	long	@_do_changepan
3b774     F4 BD 00 00 | 	long	@_do_changefreq
3b778     A8 F0 00 00 | 	long	@_do_shutup
3b77c     5C AE 01 00 | 	long	@_do_round
3b780     5C CF 00 00 | 	long	@_do_enter
3b784     E8 00 01 00 | 	long	@_do_open
3b788     00 04 01 00 | 	long	@_do_close
3b78c     7C 04 01 00 | 	long	@_do_get
3b790     20 0A 01 00 | 	long	@_do_put
3b794     34 F1 01 00 | 	long	@_hg010b_spin2_putchar
3b798     B0 00 03 00 | 	long	@__struct___bas_wrap_sender_tx
3b79c     F4 00 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b7a0     3C 01 03 00 | 	long	@__struct___bas_wrap_sender_close
3b7a4     E0 FF 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3b7a8     50 00 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3b7ac     98 FF 02 00 | 	long	@___strs_cl_pfunc
3b7b0     2C 5D 02 00 | 	long	@__system____root_opendir
3b7b4     C8 5D 02 00 | 	long	@__system____root_closedir
3b7b8     44 5D 02 00 | 	long	@__system____root_readdir
3b7bc     D0 5D 02 00 | 	long	@__system____root_stat
3b7c0     1C 56 02 00 | 	long	@__system____default_putc
3b7c4     A0 55 02 00 | 	long	@__system____default_getc
3b7c8     C4 56 02 00 | 	long	@__system____default_flush
3b7cc     9C EA 02 00 | 	long	@_fatfs_cc_v_close
3b7d0     B8 EE 02 00 | 	long	@_fatfs_cc_v_read
3b7d4     CC EF 02 00 | 	long	@_fatfs_cc_v_write
3b7d8     AC F0 02 00 | 	long	@_fatfs_cc_v_lseek
3b7dc     34 F1 02 00 | 	long	@_fatfs_cc_v_ioctl
3b7e0     88 F1 02 00 | 	long	@_fatfs_cc_v_open
3b7e4     00 EA 02 00 | 	long	@_fatfs_cc_v_creat
3b7e8     E0 EA 02 00 | 	long	@_fatfs_cc_v_opendir
3b7ec     54 EB 02 00 | 	long	@_fatfs_cc_v_closedir
3b7f0     94 EB 02 00 | 	long	@_fatfs_cc_v_readdir
3b7f4     C8 EC 02 00 | 	long	@_fatfs_cc_v_stat
3b7f8     48 F1 02 00 | 	long	@_fatfs_cc_v_mkdir
3b7fc     68 F1 02 00 | 	long	@_fatfs_cc_v_rmdir
3b800     58 F1 02 00 | 	long	@_fatfs_cc_v_remove
3b804     78 F1 02 00 | 	long	@_fatfs_cc_v_rename
3b808     98 F2 02 00 | 	long	@_fatfs_cc_v_init
3b80c     A0 F2 02 00 | 	long	@_fatfs_cc_v_deinit
3b810     34 0A 02 00 | 	long	@__system___tx
3b814     74 0A 02 00 | 	long	@__system___rx
3b818     3C 69 02 00 | 	long	@__system___rxtxioctl_0696
3b81c     94 69 02 00 | 	long	@__system____dummy_flush_0697
3b820     68 F2 02 00 | 	long	@_fatfs_cc_v_flush
3b824                 | __heap_base
3b824     00 00 00 00 
      ...             
6a624     00 00 00 00 
6a628     00 00 00 00 | 	long	0[48002]
6a62c                 | objmem
6a62c     00 00 00 00 
      ...             
74a48     00 00 00 00 
74a4c     00 00 00 00 | 	long	0[10505]
74a50                 | stackspace
74a50     00 00 00 00 | 	long	0[1]
74a54 100             | 	org	COG_BSS_START
74a54 100             | _var01
74a54 100             | 	res	1
74a54 101             | _var02
74a54 101             | 	res	1
74a54 102             | _var03
74a54 102             | 	res	1
74a54 103             | _var04
74a54 103             | 	res	1
74a54 104             | _var05
74a54 104             | 	res	1
74a54 105             | _var06
74a54 105             | 	res	1
74a54 106             | _var07
74a54 106             | 	res	1
74a54 107             | _var08
74a54 107             | 	res	1
74a54 108             | _var09
74a54 108             | 	res	1
74a54 109             | arg01
74a54 109             | 	res	1
74a54 10a             | arg02
74a54 10a             | 	res	1
74a54 10b             | arg03
74a54 10b             | 	res	1
74a54 10c             | arg04
74a54 10c             | 	res	1
74a54 10d             | arg05
74a54 10d             | 	res	1
74a54 10e             | arg06
74a54 10e             | 	res	1
74a54 10f             | local01
74a54 10f             | 	res	1
74a54 110             | local02
74a54 110             | 	res	1
74a54 111             | local03
74a54 111             | 	res	1
74a54 112             | local04
74a54 112             | 	res	1
74a54 113             | local05
74a54 113             | 	res	1
74a54 114             | local06
74a54 114             | 	res	1
74a54 115             | local07
74a54 115             | 	res	1
74a54 116             | local08
74a54 116             | 	res	1
74a54 117             | local09
74a54 117             | 	res	1
74a54 118             | local10
74a54 118             | 	res	1
74a54 119             | local11
74a54 119             | 	res	1
74a54 11a             | local12
74a54 11a             | 	res	1
74a54 11b             | local13
74a54 11b             | 	res	1
74a54 11c             | local14
74a54 11c             | 	res	1
74a54 11d             | local15
74a54 11d             | 	res	1
74a54 11e             | local16
74a54 11e             | 	res	1
74a54 11f             | local17
74a54 11f             | 	res	1
74a54 120             | local18
74a54 120             | 	res	1
74a54 121             | local19
74a54 121             | 	res	1
74a54 122             | local20
74a54 122             | 	res	1
74a54 123             | local21
74a54 123             | 	res	1
74a54 124             | local22
74a54 124             | 	res	1
74a54 125             | local23
74a54 125             | 	res	1
74a54 126             | local24
74a54 126             | 	res	1
74a54 127             | local25
74a54 127             | 	res	1
74a54 128             | local26
74a54 128             | 	res	1
74a54 129             | local27
74a54 129             | 	res	1
74a54 12a             | local28
74a54 12a             | 	res	1
74a54 12b             | local29
74a54 12b             | 	res	1
74a54 12c             | local30
74a54 12c             | 	res	1
74a54 12d             | local31
74a54 12d             | 	res	1
74a54 12e             | local32
74a54 12e             | 	res	1
74a54 12f             | local33
74a54 12f             | 	res	1
74a54 130             | local34
74a54 130             | 	res	1
74a54 131             | local35
74a54 131             | 	res	1
74a54 132             | local36
74a54 132             | 	res	1
74a54 133             | local37
74a54 133             | 	res	1
74a54 134             | local38
74a54 134             | 	res	1
74a54 135             | local39
74a54 135             | 	res	1
74a54 136             | local40
74a54 136             | 	res	1
74a54 137             | local41
74a54 137             | 	res	1
74a54 138             | local42
74a54 138             | 	res	1
74a54 139             | local43
74a54 139             | 	res	1
74a54 13a             | local44
74a54 13a             | 	res	1
74a54 13b             | local45
74a54 13b             | 	res	1
74a54 13c             | local46
74a54 13c             | 	res	1
74a54 13d             | local47
74a54 13d             | 	res	1
74a54 13e             | muldiva_
74a54 13e             | 	res	1
74a54 13f             | muldivb_
74a54 13f             | 	res	1
74a54 140             | 	fit	480
74a54 140             | 
