00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic031.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 31
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 54 D9 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec EC B9 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 20 B7 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 F4 A7 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 00 AA 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 58 A5 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 58 12 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 40 B1 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 CC 43 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 60 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 7C 6B 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 34 69 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 0C 7B 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 14 4C 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     94 E9 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     C8 FA B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     DC E5 05 F1 | 	add	objptr, ##41948
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     DC E5 85 F1 | 	sub	objptr, ##41948
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     10 E5 05 F1 | 	add	objptr, ##41232
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     10 E5 85 F1 | 	sub	objptr, ##41232
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     C0 FD B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     14 05 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     0C FF B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     10 E5 05 F1 | 	add	objptr, ##41232
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     10 E5 85 F1 | 	sub	objptr, ##41232
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B4 E5 05 F1 | 	add	objptr, ##41908
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E4 E4 85 F1 | 	sub	objptr, ##36068
009c0     D0 FC B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     DC CE B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     DC E5 05 F1 | 	add	objptr, ##41948
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     DC E5 85 F1 | 	sub	objptr, ##41948
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     D8 E5 05 F1 | 	add	objptr, ##41944
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     D8 E5 85 F1 | 	sub	objptr, ##41944
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     D4 CC B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     74 CC B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     E4 E5 05 F1 | 	add	objptr, ##41956
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     A6 E5 85 F1 | 	sub	objptr, ##41894
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     A8 E5 05 F1 | 	add	objptr, ##41896
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     A6 E5 85 F1 | 	sub	objptr, ##41894
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     04 CC B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     DC E3 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     E4 E5 05 F1 | 	add	objptr, ##41956
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     E4 E5 85 F1 | 	sub	objptr, ##41956
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     F8 E6 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     10 E5 05 A1 |  if_e	add	objptr, ##41232
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     10 E5 85 A1 |  if_e	sub	objptr, ##41232
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     FC F9 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     50 01 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     4C FB B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     81 01 00 FF 
00ccc     DE 49 06 F6 | 	mov	local22, ##@LR__5047
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     98 CA B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     2C 20 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     3C FE B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     D8 E5 05 F1 | 	add	objptr, ##41944
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     D8 E5 85 F1 | 	sub	objptr, ##41944
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     48 EB B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     78 ED B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     DC 06 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     10 E5 05 F1 | 	add	objptr, ##41232
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     10 E5 85 F1 | 	sub	objptr, ##41232
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     88 F8 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     DC FF B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     D8 F9 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     34 C9 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     B8 E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     AC E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     3C E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     08 E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     28 E2 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     18 E2 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     D8 C7 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     84 C7 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     54 C7 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     E4 E5 05 F1 | 	add	objptr, ##41956
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     A6 E5 85 F1 | 	sub	objptr, ##41894
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     A8 E5 05 F1 | 	add	objptr, ##41896
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     A6 E5 85 F1 | 	sub	objptr, ##41894
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     EC C6 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     C4 DE B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     E4 E5 05 F1 | 	add	objptr, ##41956
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     E4 E5 85 F1 | 	sub	objptr, ##41956
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     A0 DF B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     D4 C5 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     80 C5 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     50 C5 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     E4 E5 05 F1 | 	add	objptr, ##41956
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     A6 E5 85 F1 | 	sub	objptr, ##41894
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     A8 E5 05 F1 | 	add	objptr, ##41896
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     A6 E5 85 F1 | 	sub	objptr, ##41894
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     E8 C4 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     C0 DC B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     E4 E5 05 F1 | 	add	objptr, ##41956
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     E4 E5 85 F1 | 	sub	objptr, ##41956
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     81 01 00 FF 
01328     DF 49 06 F6 | 	mov	local22, ##@LR__5048
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     20 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 34 C2 FA | 	rdbyte	local12, objptr
0134c     3E E4 85 F1 | 	sub	objptr, #62
01350     1A 53 02 F6 | 	mov	local27, local12
01354     01 52 86 F1 | 	sub	local27, #1
01358     29 29 02 F6 | 	mov	local06, local27
0135c     14 13 02 F6 | 	mov	arg01, local06
01360     20 DE B1 FD | 	call	#_hg010b_spin2_setcursory
01364                 | LR__0042
01364                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01364     51 32 0E F2 | 	cmp	local11, #81 wz
01368     24 00 90 5D |  if_ne	jmp	#LR__0043
0136c                 | ' return cursor_y
0136c     3E E4 05 F1 | 	add	objptr, #62
01370     F2 34 C2 FA | 	rdbyte	local12, objptr
01374     3E E4 85 F1 | 	sub	objptr, #62
01378     1A 53 02 F6 | 	mov	local27, local12
0137c     01 52 06 F1 | 	add	local27, #1
01380     24 52 36 F3 | 	fle	local27, #36 wc
01384     29 29 02 F6 | 	mov	local06, local27
01388     14 13 02 F6 | 	mov	arg01, local06
0138c     F4 DD B1 FD | 	call	#_hg010b_spin2_setcursory
01390                 | LR__0043
01390                 | '   if key4=80 then
01390     50 32 0E F2 | 	cmp	local11, #80 wz
01394     44 00 90 5D |  if_ne	jmp	#LR__0044
01398                 | ' return cursor_x
01398     3C E4 05 F1 | 	add	objptr, #60
0139c     F2 54 E2 FA | 	rdword	local28, objptr
013a0     02 54 86 F1 | 	sub	local28, #2
013a4                 | '     cx=v.getcursorx()-2 					' arrow left
013a4                 | '     if cx<editor_spaces then cx=editor_spaces			
013a4     36 00 00 FF 
013a8     F8 E5 05 F1 | 	add	objptr, ##28152
013ac     F2 34 02 FB | 	rdlong	local12, objptr
013b0     37 00 00 FF 
013b4     34 E4 85 F1 | 	sub	objptr, ##28212
013b8     1A 55 52 F2 | 	cmps	local28, local12 wc
013bc     37 00 00 CF 
013c0     34 E4 05 C1 |  if_b	add	objptr, ##28212
013c4     F2 54 02 CB |  if_b	rdlong	local28, objptr
013c8     37 00 00 CF 
013cc     34 E4 85 C1 |  if_b	sub	objptr, ##28212
013d0     2A 29 02 F6 | 	mov	local06, local28
013d4     14 13 02 F6 | 	mov	arg01, local06
013d8     78 DD B1 FD | 	call	#_hg010b_spin2_setcursorx
013dc                 | LR__0044
013dc                 | '   if key4=79 then						' arrow right
013dc     4F 32 0E F2 | 	cmp	local11, #79 wz
013e0     20 00 90 5D |  if_ne	jmp	#LR__0045
013e4                 | ' return cursor_x
013e4     3C E4 05 F1 | 	add	objptr, #60
013e8     F2 54 E2 FA | 	rdword	local28, objptr
013ec     3C E4 85 F1 | 	sub	objptr, #60
013f0     02 54 06 F1 | 	add	local28, #2
013f4                 | '     cx=v.getcursorx()+2 
013f4                 | '     if cx>254  then cx=254 
013f4     FE 54 36 F3 | 	fle	local28, #254 wc
013f8     2A 29 02 F6 | 	mov	local06, local28
013fc     14 13 02 F6 | 	mov	arg01, local06
01400     50 DD B1 FD | 	call	#_hg010b_spin2_setcursorx
01404                 | LR__0045
01404                 | ' 
01404                 | '   if key4=73 then 						' ins
01404     49 32 0E F2 | 	cmp	local11, #73 wz
01408     40 00 90 5D |  if_ne	jmp	#LR__0048
0140c     51 00 00 FF 
01410     D8 E5 05 F1 | 	add	objptr, ##41944
01414     F2 28 02 FB | 	rdlong	local06, objptr
01418     14 35 22 F6 | 	not	local12, local06
0141c     F2 34 62 FC | 	wrlong	local12, objptr
01420                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
01420     51 00 00 FF 
01424     D8 E5 85 F1 | 	sub	objptr, ##41944
01428     00 34 0E F2 | 	cmp	local12, #0 wz
0142c     10 00 90 AD |  if_e	jmp	#LR__0046
01430     0E 28 06 F6 | 	mov	local06, #14
01434     0E 12 06 F6 | 	mov	arg01, #14
01438     9C CB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0143c     0C 00 90 FD | 	jmp	#LR__0047
01440                 | LR__0046
01440     00 28 06 F6 | 	mov	local06, #0
01444     00 12 06 F6 | 	mov	arg01, #0
01448     8C CB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0144c                 | LR__0047
0144c                 | LR__0048
0144c     00 24 06 F6 | 	mov	local04, #0
01450     C8 F3 9F FD | 	jmp	#LR__0001
01454                 | LR__0049
01454     A7 F0 03 F6 | 	mov	ptra, fp
01458     B2 00 A0 FD | 	call	#popregs_
0145c                 | _edit_ret
0145c     2D 00 64 FD | 	ret
01460                 | 
01460                 | ' 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' ' 					A housekeepeer.
01460                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01460                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01460                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' 
01460                 | ' sub housekeeper
01460                 | _housekeeper
01460                 | ' 
01460                 | ' do
01460                 | LR__0050
01460                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01460     49 E4 05 F1 | 	add	objptr, #73
01464                 | LR__0051
01464     F2 12 02 FB | 	rdlong	arg01, objptr
01468     01 12 0E F2 | 	cmp	arg01, #1 wz
0146c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01470     51 00 00 FF 
01474     5B E5 05 F1 | 	add	objptr, ##41819
01478     F2 12 02 FB | 	rdlong	arg01, objptr
0147c     01 12 06 F1 | 	add	arg01, #1
01480     F2 12 62 FC | 	wrlong	arg01, objptr
01484     51 00 00 FF 
01488     A4 E5 85 F1 | 	sub	objptr, ##41892
0148c     80 00 B0 FD | 	call	#_gethdi
01490     05 12 06 F6 | 	mov	arg01, #5
01494     60 F9 B1 FD | 	call	#__system___waitms
01498     51 00 00 FF 
0149c     A4 E5 05 F1 | 	add	objptr, ##41892
014a0     F2 12 02 FB | 	rdlong	arg01, objptr
014a4     01 12 06 F1 | 	add	arg01, #1
014a8     F2 12 62 FC | 	wrlong	arg01, objptr
014ac     51 00 00 FF 
014b0     A4 E5 85 F1 | 	sub	objptr, ##41892
014b4     58 00 B0 FD | 	call	#_gethdi
014b8     05 12 06 F6 | 	mov	arg01, #5
014bc     38 F9 B1 FD | 	call	#__system___waitms
014c0     51 00 00 FF 
014c4     A4 E5 05 F1 | 	add	objptr, ##41892
014c8     F2 12 02 FB | 	rdlong	arg01, objptr
014cc     01 12 06 F1 | 	add	arg01, #1
014d0     F2 12 62 FC | 	wrlong	arg01, objptr
014d4     51 00 00 FF 
014d8     A4 E5 85 F1 | 	sub	objptr, ##41892
014dc     30 00 B0 FD | 	call	#_gethdi
014e0     05 12 06 F6 | 	mov	arg01, #5
014e4     10 F9 B1 FD | 	call	#__system___waitms
014e8     51 00 00 FF 
014ec     A4 E5 05 F1 | 	add	objptr, ##41892
014f0     F2 12 02 FB | 	rdlong	arg01, objptr
014f4     01 12 06 F1 | 	add	arg01, #1
014f8     F2 12 62 FC | 	wrlong	arg01, objptr
014fc     51 00 00 FF 
01500     A4 E5 85 F1 | 	sub	objptr, ##41892
01504     08 00 B0 FD | 	call	#_gethdi
01508     54 FF 9F FD | 	jmp	#LR__0050
0150c                 | _housekeeper_ret
0150c     2D 00 64 FD | 	ret
01510                 | 
01510                 | ' 
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' 
01510                 | ' sub gethdi
01510                 | _gethdi
01510     03 4A 05 F6 | 	mov	COUNT_, #3
01514     A8 00 A0 FD | 	call	#pushregs_
01518                 | '   x := mouse_xacc
01518     14 00 00 FF 
0151c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
01520     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
01524                 | '   y := mouse_yacc
01524     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01528     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
0152c     51 00 00 FF 
01530     1C E5 05 F1 | 	add	objptr, ##41756
01534     F2 14 62 FC | 	wrlong	arg02, objptr
01538     04 E4 05 F1 | 	add	objptr, #4
0153c     F2 12 62 FC | 	wrlong	arg01, objptr
01540                 | '   x := 0
01540                 | '   y := mouse_zacc
01540     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01544     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01548     08 E4 05 F1 | 	add	objptr, #8
0154c     F2 FA 61 FC | 	wrlong	result1, objptr
01550                 | '   return mouse_bstate&7
01550     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01554     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01558     14 00 00 FF 
0155c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01560     07 FA 05 F5 | 	and	result1, #7
01564     04 E4 85 F1 | 	sub	objptr, #4
01568     F2 FA 61 FC | 	wrlong	result1, objptr
0156c     51 00 00 FF 
01570     24 E5 85 F1 | 	sub	objptr, ##41764
01574     00 1E 06 F6 | 	mov	local01, #0
01578                 | ' 
01578                 | ' mousex,mousey=kbm.mouse_xy()
01578                 | ' dummy,mousew=kbm.mouse_scroll()
01578                 | ' mousek=kbm.mouse_buttons()
01578                 | ' i=0:
01578                 | ' for j=0 to 6
01578     00 20 06 F6 | 	mov	local02, #0
0157c                 | LR__0060
0157c                 | '   if kbm.hidpad_id(j)>0 then
0157c     10 13 02 F6 | 	mov	arg01, local02
01580     68 EE B1 FD | 	call	#_usbnew_spin2_hidpad_id
01584     01 FA 55 F2 | 	cmps	result1, #1 wc
01588     8C 00 90 CD |  if_b	jmp	#LR__0061
0158c     10 13 02 F6 | 	mov	arg01, local02
01590     00 14 06 F6 | 	mov	arg02, #0
01594     B8 EE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01598     FD 22 02 F6 | 	mov	local03, result1
0159c     10 13 02 F6 | 	mov	arg01, local02
015a0     01 14 06 F6 | 	mov	arg02, #1
015a4     A8 EE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
015a8     60 00 00 FF 
015ac     00 22 06 F1 | 	add	local03, ##49152
015b0     0F 22 46 F0 | 	shr	local03, #15
015b4     01 14 06 F6 | 	mov	arg02, #1
015b8     11 15 02 F1 | 	add	arg02, local03
015bc     60 00 00 FF 
015c0     00 FA 05 F1 | 	add	result1, ##49152
015c4     0F FA 45 F0 | 	shr	result1, #15
015c8     01 12 06 F6 | 	mov	arg01, #1
015cc     FD 12 02 F1 | 	add	arg01, result1
015d0     0F 23 02 F6 | 	mov	local03, local01
015d4     02 22 66 F0 | 	shl	local03, #2
015d8     51 00 00 FF 
015dc     2C E5 05 F1 | 	add	objptr, ##41772
015e0     F2 22 02 F1 | 	add	local03, objptr
015e4     02 12 66 F0 | 	shl	arg01, #2
015e8     09 15 02 F1 | 	add	arg02, arg01
015ec     11 15 62 FC | 	wrlong	arg02, local03
015f0     0F 23 02 F6 | 	mov	local03, local01
015f4     02 22 66 F0 | 	shl	local03, #2
015f8     1C E4 05 F1 | 	add	objptr, #28
015fc     F2 22 02 F1 | 	add	local03, objptr
01600     10 13 02 F6 | 	mov	arg01, local02
01604     51 00 00 FF 
01608     48 E5 85 F1 | 	sub	objptr, ##41800
0160c     0C EE B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
01610     11 FB 61 FC | 	wrlong	result1, local03
01614     01 1E 06 F1 | 	add	local01, #1
01618                 | LR__0061
01618     01 20 06 F1 | 	add	local02, #1
0161c     07 20 16 F2 | 	cmp	local02, #7 wc
01620     58 FF 9F CD |  if_b	jmp	#LR__0060
01624     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01628                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01628                 | LR__0062
01628     07 1E 16 F2 | 	cmp	local01, #7 wc
0162c     3C 00 90 3D |  if_ae	jmp	#LR__0064
01630     0F 23 02 F6 | 	mov	local03, local01
01634     02 22 66 F0 | 	shl	local03, #2
01638     51 00 00 FF 
0163c     2C E5 05 F1 | 	add	objptr, ##41772
01640     F2 22 02 F1 | 	add	local03, objptr
01644     11 01 68 FC | 	wrlong	#0, local03
01648     0F 23 02 F6 | 	mov	local03, local01
0164c     02 22 66 F0 | 	shl	local03, #2
01650     1C E4 05 F1 | 	add	objptr, #28
01654     F2 22 02 F1 | 	add	local03, objptr
01658     11 01 68 FC | 	wrlong	#0, local03
0165c     01 1E 06 F1 | 	add	local01, #1
01660     51 00 00 FF 
01664     48 E5 85 F1 | 	sub	objptr, ##41800
01668     BC FF 9F FD | 	jmp	#LR__0062
0166c                 | LR__0063
0166c                 | LR__0064
0166c     A7 F0 03 F6 | 	mov	ptra, fp
01670     B2 00 A0 FD | 	call	#popregs_
01674                 | _gethdi_ret
01674     2D 00 64 FD | 	ret
01678                 | 
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '
01678                 | ' '                                     LINE INTERPRETER/TOKENIZER
01678                 | ' '
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' 
01678                 | ' sub interpret
01678                 | _interpret
01678     2F 4A 05 F6 | 	mov	COUNT_, #47
0167c     A8 00 A0 FD | 	call	#pushregs_
01680     01 00 00 FF 
01684     7C F0 07 F1 | 	add	ptra, ##636
01688     37 00 00 FF 
0168c     1C E4 05 F1 | 	add	objptr, ##28188
01690     F2 12 02 FB | 	rdlong	arg01, objptr
01694     37 00 00 FF 
01698     1C E4 85 F1 | 	sub	objptr, ##28188
0169c     70 19 B2 FD | 	call	#__system__RTrim_S
016a0     FD 12 02 F6 | 	mov	arg01, result1
016a4     A8 18 B2 FD | 	call	#__system__LTrim_S
016a8     37 00 00 FF 
016ac     20 E4 05 F1 | 	add	objptr, ##28192
016b0     F2 FA 61 FC | 	wrlong	result1, objptr
016b4     04 E4 05 F1 | 	add	objptr, #4
016b8     FF FF FF FF 
016bc     F2 FE 6B FC | 	wrlong	##-1, objptr
016c0     1A 00 00 FF 
016c4     9C E5 05 F1 | 	add	objptr, ##13724
016c8     F2 00 68 FC | 	wrlong	#0, objptr
016cc     07 00 00 FF 
016d0     44 E5 85 F1 | 	sub	objptr, ##3908
016d4     F2 00 68 FC | 	wrlong	#0, objptr
016d8     4A 00 00 FF 
016dc     7C E4 85 F1 | 	sub	objptr, ##38012
016e0     00 1E 06 F6 | 	mov	local01, #0
016e4                 | LR__0070
016e4                 | ' 
016e4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
016e4                 | ' 
016e4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
016e4                 | ' 
016e4                 | ' 108 
016e4                 | ' for i=0 to 125: separators(i)=0 :next i
016e4     00 20 06 F6 | 	mov	local02, #0
016e8     38 4E 05 F1 | 	add	fp, #56
016ec     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016f0                 | LR__0071
016f0     10 23 02 F6 | 	mov	local03, local02
016f4     02 22 66 F0 | 	shl	local03, #2
016f8     A7 22 02 F1 | 	add	local03, fp
016fc     11 01 68 FC | 	wrlong	#0, local03
01700     01 20 06 F1 | 	add	local02, #1
01704     7E 20 56 F2 | 	cmps	local02, #126 wc
01708     E4 FF 9F CD |  if_b	jmp	#LR__0071
0170c                 | LR__0072
0170c     38 4E 85 F1 | 	sub	fp, #56
01710                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01710     00 20 06 F6 | 	mov	local02, #0
01714     35 00 00 FF 
01718     0C E4 05 F1 | 	add	objptr, ##27148
0171c     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01720                 | LR__0073
01720     10 25 02 F6 | 	mov	local04, local02
01724     03 24 66 F0 | 	shl	local04, #3
01728     F2 24 02 F1 | 	add	local04, objptr
0172c     81 01 00 FF 
01730     E0 17 06 F6 | 	mov	arg03, ##@LR__5049
01734     12 17 62 FC | 	wrlong	arg03, local04
01738     10 25 02 F6 | 	mov	local04, local02
0173c     03 24 66 F0 | 	shl	local04, #3
01740     F2 26 02 F6 | 	mov	local05, objptr
01744     F2 24 02 F1 | 	add	local04, objptr
01748     00 28 06 F6 | 	mov	local06, #0
0174c     04 24 06 F1 | 	add	local04, #4
01750     12 01 68 FC | 	wrlong	#0, local04
01754     01 20 06 F1 | 	add	local02, #1
01758     7E 20 56 F2 | 	cmps	local02, #126 wc
0175c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01760                 | LR__0074
01760     02 00 00 FF 
01764     10 E4 05 F1 | 	add	objptr, ##1040
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     37 00 00 FF 
01770     1C E4 85 F1 | 	sub	objptr, ##28188
01774     98 18 B2 FD | 	call	#__system__RTrim_S
01778     FD 12 02 F6 | 	mov	arg01, result1
0177c     D0 17 B2 FD | 	call	#__system__LTrim_S
01780     37 00 00 FF 
01784     1C E4 05 F1 | 	add	objptr, ##28188
01788     F2 FA 61 FC | 	wrlong	result1, objptr
0178c     81 01 00 FF 
01790     E1 25 06 F6 | 	mov	local04, ##@LR__5050
01794     1A 00 00 FF 
01798     D0 E5 05 F1 | 	add	objptr, ##13776
0179c     F2 24 62 FC | 	wrlong	local04, objptr
017a0     1A 00 00 FF 
017a4     D0 E5 85 F1 | 	sub	objptr, ##13776
017a8     F2 12 02 FB | 	rdlong	arg01, objptr
017ac     37 00 00 FF 
017b0     1C E4 85 F1 | 	sub	objptr, ##28188
017b4     09 2B 02 F6 | 	mov	local07, arg01
017b8     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
017bc                 | LR__0075
017bc     15 FB C9 FA | 	rdbyte	result1, local07 wz
017c0     01 2A 06 51 |  if_ne	add	local07, #1
017c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
017c8                 | LR__0076
017c8     09 2B 8A F1 | 	sub	local07, arg01 wz
017cc     51 00 00 FF 
017d0     F0 E5 05 F1 | 	add	objptr, ##41968
017d4     F2 2A 62 FC | 	wrlong	local07, objptr
017d8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
017d8     51 00 00 FF 
017dc     F0 E5 85 F1 | 	sub	objptr, ##41968
017e0     60 24 90 AD |  if_e	jmp	#LR__0198
017e4     00 2C 06 F6 | 	mov	local08, #0
017e8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
017e8                 | ' for i=1 to len(line$)
017e8     01 20 06 F6 | 	mov	local02, #1
017ec     37 00 00 FF 
017f0     1C E4 05 F1 | 	add	objptr, ##28188
017f4     F2 12 02 FB | 	rdlong	arg01, objptr
017f8     37 00 00 FF 
017fc     1C E4 85 F1 | 	sub	objptr, ##28188
01800     09 2B 02 F6 | 	mov	local07, arg01
01804     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01808                 | LR__0077
01808     15 FB C9 FA | 	rdbyte	result1, local07 wz
0180c     01 2A 06 51 |  if_ne	add	local07, #1
01810     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01814                 | LR__0078
01814     09 2B 82 F1 | 	sub	local07, arg01
01818     15 2F 02 F6 | 	mov	local09, local07
0181c     01 2E 06 F1 | 	add	local09, #1
01820                 | LR__0079
01820     17 21 52 F2 | 	cmps	local02, local09 wc
01824     AC 00 90 3D |  if_ae	jmp	#LR__0081
01828                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01828     37 00 00 FF 
0182c     1C E4 05 F1 | 	add	objptr, ##28188
01830     F2 12 02 FB | 	rdlong	arg01, objptr
01834     37 00 00 FF 
01838     1C E4 85 F1 | 	sub	objptr, ##28188
0183c     10 15 02 F6 | 	mov	arg02, local02
01840     01 16 06 F6 | 	mov	arg03, #1
01844     50 14 B2 FD | 	call	#__system__Mid_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     81 01 00 FF 
01850     E2 15 06 F6 | 	mov	arg02, ##@LR__5051
01854     D4 F2 B1 FD | 	call	#__system___string_cmp
01858     00 FA 0D F2 | 	cmp	result1, #0 wz
0185c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01860     01 2C 06 A6 |  if_e	mov	local08, #1
01864     3C 00 90 AD |  if_e	jmp	#LR__0080
01868     37 00 00 FF 
0186c     1C E4 05 F1 | 	add	objptr, ##28188
01870     F2 12 02 FB | 	rdlong	arg01, objptr
01874     37 00 00 FF 
01878     1C E4 85 F1 | 	sub	objptr, ##28188
0187c     10 15 02 F6 | 	mov	arg02, local02
01880     01 16 06 F6 | 	mov	arg03, #1
01884     10 14 B2 FD | 	call	#__system__Mid_S
01888     FD 12 02 F6 | 	mov	arg01, result1
0188c     81 01 00 FF 
01890     E4 15 06 F6 | 	mov	arg02, ##@LR__5052
01894     94 F2 B1 FD | 	call	#__system___string_cmp
01898     00 FA 0D F2 | 	cmp	result1, #0 wz
0189c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
018a0     00 2C 06 A6 |  if_e	mov	local08, #0
018a4                 | LR__0080
018a4     10 25 02 F6 | 	mov	local04, local02
018a8     03 24 66 F0 | 	shl	local04, #3
018ac     35 00 00 FF 
018b0     0C E4 05 F1 | 	add	objptr, ##27148
018b4     F2 26 02 F6 | 	mov	local05, objptr
018b8     F2 24 02 F1 | 	add	local04, objptr
018bc     04 24 06 F1 | 	add	local04, #4
018c0     12 2D 62 FC | 	wrlong	local08, local04
018c4     01 20 06 F1 | 	add	local02, #1
018c8     35 00 00 FF 
018cc     0C E4 85 F1 | 	sub	objptr, ##27148
018d0     4C FF 9F FD | 	jmp	#LR__0079
018d4                 | LR__0081
018d4     01 20 06 F6 | 	mov	local02, #1
018d8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
018d8                 | LR__0082
018d8     37 00 00 FF 
018dc     1C E4 05 F1 | 	add	objptr, ##28188
018e0     F2 12 02 FB | 	rdlong	arg01, objptr
018e4     37 00 00 FF 
018e8     1C E4 85 F1 | 	sub	objptr, ##28188
018ec     10 15 02 F6 | 	mov	arg02, local02
018f0     01 16 06 F6 | 	mov	arg03, #1
018f4     A0 13 B2 FD | 	call	#__system__Mid_S
018f8     FD 12 02 F6 | 	mov	arg01, result1
018fc     81 01 00 FF 
01900     E6 31 06 F6 | 	mov	local10, ##@LR__5053
01904     18 15 02 F6 | 	mov	arg02, local10
01908     20 F2 B1 FD | 	call	#__system___string_cmp
0190c     00 FA 0D F2 | 	cmp	result1, #0 wz
01910     34 00 90 5D |  if_ne	jmp	#LR__0083
01914     10 27 02 F6 | 	mov	local05, local02
01918     03 26 66 F0 | 	shl	local05, #3
0191c     35 00 00 FF 
01920     0C E4 05 F1 | 	add	objptr, ##27148
01924     F2 28 02 F6 | 	mov	local06, objptr
01928     F2 26 02 F1 | 	add	local05, objptr
0192c     04 26 06 F1 | 	add	local05, #4
01930     13 33 02 FB | 	rdlong	local11, local05
01934     04 26 86 F1 | 	sub	local05, #4
01938     19 35 0A F6 | 	mov	local12, local11 wz
0193c     35 00 00 FF 
01940     0C E4 85 F1 | 	sub	objptr, ##27148
01944     24 00 90 AD |  if_e	jmp	#LR__0084
01948                 | LR__0083
01948     51 00 00 FF 
0194c     F0 E5 05 F1 | 	add	objptr, ##41968
01950     F2 36 02 FB | 	rdlong	local13, objptr
01954     51 00 00 FF 
01958     F0 E5 85 F1 | 	sub	objptr, ##41968
0195c     1B 39 02 F6 | 	mov	local14, local13
01960     1C 21 52 F2 | 	cmps	local02, local14 wc
01964     01 20 06 C1 |  if_b	add	local02, #1
01968     6C FF 9F CD |  if_b	jmp	#LR__0082
0196c                 | LR__0084
0196c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
0196c     51 00 00 FF 
01970     F0 E5 05 F1 | 	add	objptr, ##41968
01974     F2 24 02 FB | 	rdlong	local04, objptr
01978     51 00 00 FF 
0197c     F0 E5 85 F1 | 	sub	objptr, ##41968
01980     12 21 52 F2 | 	cmps	local02, local04 wc
01984     A8 00 90 3D |  if_ae	jmp	#LR__0087
01988     37 00 00 FF 
0198c     1C E4 05 F1 | 	add	objptr, ##28188
01990     F2 28 02 FB | 	rdlong	local06, objptr
01994     37 00 00 FF 
01998     1C E4 85 F1 | 	sub	objptr, ##28188
0199c     14 13 02 F6 | 	mov	arg01, local06
019a0     09 2B 02 F6 | 	mov	local07, arg01
019a4     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
019a8                 | LR__0085
019a8     15 FB C9 FA | 	rdbyte	result1, local07 wz
019ac     01 2A 06 51 |  if_ne	add	local07, #1
019b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
019b4                 | LR__0086
019b4     09 2B 82 F1 | 	sub	local07, arg01
019b8     15 27 02 F6 | 	mov	local05, local07
019bc     13 15 02 F6 | 	mov	arg02, local05
019c0     10 15 82 F1 | 	sub	arg02, local02
019c4     14 13 02 F6 | 	mov	arg01, local06
019c8     3C 12 B2 FD | 	call	#__system__Right_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     3C 16 B2 FD | 	call	#__system__RTrim_S
019d4     FD 12 02 F6 | 	mov	arg01, result1
019d8     74 15 B2 FD | 	call	#__system__LTrim_S
019dc     51 00 00 FF 
019e0     F4 E5 05 F1 | 	add	objptr, ##41972
019e4     F2 FA 61 FC | 	wrlong	result1, objptr
019e8     1A 00 00 FF 
019ec     D8 E5 85 F1 | 	sub	objptr, ##13784
019f0     F2 12 02 FB | 	rdlong	arg01, objptr
019f4     37 00 00 FF 
019f8     1C E4 85 F1 | 	sub	objptr, ##28188
019fc     01 20 86 F1 | 	sub	local02, #1
01a00     10 15 02 F6 | 	mov	arg02, local02
01a04     78 11 B2 FD | 	call	#__system__Left_S
01a08     FD 12 02 F6 | 	mov	arg01, result1
01a0c     00 16 B2 FD | 	call	#__system__RTrim_S
01a10     FD 12 02 F6 | 	mov	arg01, result1
01a14     38 15 B2 FD | 	call	#__system__LTrim_S
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 FA 61 FC | 	wrlong	result1, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     1C 00 90 FD | 	jmp	#LR__0088
01a30                 | LR__0087
01a30     81 01 00 FF 
01a34     E8 25 06 F6 | 	mov	local04, ##@LR__5054
01a38     51 00 00 FF 
01a3c     F4 E5 05 F1 | 	add	objptr, ##41972
01a40     F2 24 62 FC | 	wrlong	local04, objptr
01a44     51 00 00 FF 
01a48     F4 E5 85 F1 | 	sub	objptr, ##41972
01a4c                 | LR__0088
01a4c                 | ' 
01a4c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01a4c     37 00 00 FF 
01a50     24 E4 05 F1 | 	add	objptr, ##28196
01a54     F2 24 02 FB | 	rdlong	local04, objptr
01a58     37 00 00 FF 
01a5c     24 E4 85 F1 | 	sub	objptr, ##28196
01a60     FF FF 7F FF 
01a64     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a68     40 00 90 5D |  if_ne	jmp	#LR__0089
01a6c     51 00 00 FF 
01a70     F4 E5 05 F1 | 	add	objptr, ##41972
01a74     F2 12 02 FB | 	rdlong	arg01, objptr
01a78     51 00 00 FF 
01a7c     F4 E5 85 F1 | 	sub	objptr, ##41972
01a80     81 01 00 FF 
01a84     E9 29 06 F6 | 	mov	local06, ##@LR__5055
01a88     14 15 02 F6 | 	mov	arg02, local06
01a8c     9C F0 B1 FD | 	call	#__system___string_cmp
01a90     00 FA 0D F2 | 	cmp	result1, #0 wz
01a94     37 00 00 5F 
01a98     24 E4 05 51 |  if_ne	add	objptr, ##28196
01a9c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01aa0     37 00 00 5F 
01aa4     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01aa8     08 01 90 5D |  if_ne	jmp	#LR__0093
01aac                 | LR__0089
01aac                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01aac     37 00 00 FF 
01ab0     24 E4 05 F1 | 	add	objptr, ##28196
01ab4     F2 24 02 FB | 	rdlong	local04, objptr
01ab8     37 00 00 FF 
01abc     24 E4 85 F1 | 	sub	objptr, ##28196
01ac0     FF FF 7F FF 
01ac4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01ac8     3C 00 90 5D |  if_ne	jmp	#LR__0090
01acc     51 00 00 FF 
01ad0     F4 E5 05 F1 | 	add	objptr, ##41972
01ad4     F2 12 02 FB | 	rdlong	arg01, objptr
01ad8     51 00 00 FF 
01adc     F4 E5 85 F1 | 	sub	objptr, ##41972
01ae0     81 01 00 FF 
01ae4     EA 15 06 F6 | 	mov	arg02, ##@LR__5056
01ae8     40 F0 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     37 00 00 AF 
01af4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01af8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01afc     37 00 00 AF 
01b00     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b04     AC 00 90 AD |  if_e	jmp	#LR__0093
01b08                 | LR__0090
01b08                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01b08     37 00 00 FF 
01b0c     24 E4 05 F1 | 	add	objptr, ##28196
01b10     F2 24 02 FB | 	rdlong	local04, objptr
01b14     37 00 00 FF 
01b18     24 E4 85 F1 | 	sub	objptr, ##28196
01b1c     04 24 0E F2 | 	cmp	local04, #4 wz
01b20     3C 00 90 5D |  if_ne	jmp	#LR__0091
01b24     51 00 00 FF 
01b28     F4 E5 05 F1 | 	add	objptr, ##41972
01b2c     F2 12 02 FB | 	rdlong	arg01, objptr
01b30     51 00 00 FF 
01b34     F4 E5 85 F1 | 	sub	objptr, ##41972
01b38     81 01 00 FF 
01b3c     EB 15 06 F6 | 	mov	arg02, ##@LR__5057
01b40     E8 EF B1 FD | 	call	#__system___string_cmp
01b44     00 FA 0D F2 | 	cmp	result1, #0 wz
01b48     37 00 00 5F 
01b4c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b50     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b54     37 00 00 5F 
01b58     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b5c     54 00 90 5D |  if_ne	jmp	#LR__0093
01b60                 | LR__0091
01b60                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01b60     37 00 00 FF 
01b64     24 E4 05 F1 | 	add	objptr, ##28196
01b68     F2 24 02 FB | 	rdlong	local04, objptr
01b6c     37 00 00 FF 
01b70     24 E4 85 F1 | 	sub	objptr, ##28196
01b74     04 24 0E F2 | 	cmp	local04, #4 wz
01b78     38 00 90 5D |  if_ne	jmp	#LR__0092
01b7c     51 00 00 FF 
01b80     F4 E5 05 F1 | 	add	objptr, ##41972
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     51 00 00 FF 
01b8c     F4 E5 85 F1 | 	sub	objptr, ##41972
01b90     81 01 00 FF 
01b94     EC 15 06 F6 | 	mov	arg02, ##@LR__5058
01b98     90 EF B1 FD | 	call	#__system___string_cmp
01b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ba0     37 00 00 AF 
01ba4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ba8     F2 04 68 AC |  if_e	wrlong	#2, objptr
01bac     37 00 00 AF 
01bb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bb4                 | LR__0092
01bb4                 | LR__0093
01bb4     38 4E 05 F1 | 	add	fp, #56
01bb8     A7 00 68 FC | 	wrlong	#0, fp
01bbc     38 4E 85 F1 | 	sub	fp, #56
01bc0     00 20 06 F6 | 	mov	local02, #0
01bc4     01 3A 06 F6 | 	mov	local15, #1
01bc8                 | ' 
01bc8                 | ' ' 1b: find separators
01bc8                 | ' 
01bc8                 | ' 107
01bc8                 | ' separators(0)=0
01bc8                 | ' i=0: j=1
01bc8                 | ' do: 
01bc8                 | LR__0094
01bc8     01 20 06 F1 | 	add	local02, #1
01bcc     37 00 00 FF 
01bd0     1C E4 05 F1 | 	add	objptr, ##28188
01bd4     F2 12 02 FB | 	rdlong	arg01, objptr
01bd8     37 00 00 FF 
01bdc     1C E4 85 F1 | 	sub	objptr, ##28188
01be0     10 15 02 F6 | 	mov	arg02, local02
01be4     01 16 06 F6 | 	mov	arg03, #1
01be8     AC 10 B2 FD | 	call	#__system__Mid_S
01bec     FD 3C 02 F6 | 	mov	local16, result1
01bf0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01bf0     1E 13 02 F6 | 	mov	arg01, local16
01bf4     2C 28 B0 FD | 	call	#_isseparator
01bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
01bfc     1C 00 90 AD |  if_e	jmp	#LR__0095
01c00     1D 23 02 F6 | 	mov	local03, local15
01c04     02 22 66 F0 | 	shl	local03, #2
01c08     38 4E 05 F1 | 	add	fp, #56
01c0c     A7 22 02 F1 | 	add	local03, fp
01c10     11 21 62 FC | 	wrlong	local02, local03
01c14     01 3A 06 F1 | 	add	local15, #1
01c18     38 4E 85 F1 | 	sub	fp, #56
01c1c                 | LR__0095
01c1c     51 00 00 FF 
01c20     F0 E5 05 F1 | 	add	objptr, ##41968
01c24     F2 24 02 FB | 	rdlong	local04, objptr
01c28     51 00 00 FF 
01c2c     F0 E5 85 F1 | 	sub	objptr, ##41968
01c30     12 21 5A F2 | 	cmps	local02, local04 wcz
01c34     90 FF 9F ED |  if_be	jmp	#LR__0094
01c38     1D 23 02 F6 | 	mov	local03, local15
01c3c     02 22 66 F0 | 	shl	local03, #2
01c40     38 4E 05 F1 | 	add	fp, #56
01c44     A7 30 02 F6 | 	mov	local10, fp
01c48     A7 22 02 F1 | 	add	local03, fp
01c4c     11 21 62 FC | 	wrlong	local02, local03
01c50     00 3E 06 F6 | 	mov	local17, #0
01c54                 | ' for i=0 to j-1 
01c54     00 20 06 F6 | 	mov	local02, #0
01c58     1D 41 02 F6 | 	mov	local18, local15
01c5c     38 4E 85 F1 | 	sub	fp, #56
01c60                 | LR__0096
01c60     20 21 52 F2 | 	cmps	local02, local18 wc
01c64     50 01 90 3D |  if_ae	jmp	#LR__0100
01c68     10 23 02 F6 | 	mov	local03, local02
01c6c     02 22 66 F0 | 	shl	local03, #2
01c70     38 4E 05 F1 | 	add	fp, #56
01c74     A7 22 02 F1 | 	add	local03, fp
01c78     11 27 02 FB | 	rdlong	local05, local03
01c7c     51 00 00 FF 
01c80     FC E5 05 F1 | 	add	objptr, ##41980
01c84     F2 26 62 FC | 	wrlong	local05, objptr
01c88     10 23 02 F6 | 	mov	local03, local02
01c8c     01 22 06 F1 | 	add	local03, #1
01c90     02 22 66 F0 | 	shl	local03, #2
01c94     A7 30 02 F6 | 	mov	local10, fp
01c98     A7 22 02 F1 | 	add	local03, fp
01c9c     11 27 02 FB | 	rdlong	local05, local03
01ca0     04 E4 05 F1 | 	add	objptr, #4
01ca4     F2 26 62 FC | 	wrlong	local05, objptr
01ca8                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ca8     04 E4 85 F1 | 	sub	objptr, #4
01cac     F2 24 02 FB | 	rdlong	local04, objptr
01cb0     51 00 00 FF 
01cb4     FC E5 85 F1 | 	sub	objptr, ##41980
01cb8     01 24 56 F2 | 	cmps	local04, #1 wc
01cbc     38 4E 85 F1 | 	sub	fp, #56
01cc0     68 00 90 CD |  if_b	jmp	#LR__0098
01cc4     37 00 00 FF 
01cc8     1C E4 05 F1 | 	add	objptr, ##28188
01ccc     F2 12 02 FB | 	rdlong	arg01, objptr
01cd0     1A 00 00 FF 
01cd4     E0 E5 05 F1 | 	add	objptr, ##13792
01cd8     F2 14 02 FB | 	rdlong	arg02, objptr
01cdc     51 00 00 FF 
01ce0     FC E5 85 F1 | 	sub	objptr, ##41980
01ce4     01 16 06 F6 | 	mov	arg03, #1
01ce8     AC 0F B2 FD | 	call	#__system__Mid_S
01cec     FD 42 02 F6 | 	mov	local19, result1
01cf0     81 01 00 FF 
01cf4     ED 15 06 F6 | 	mov	arg02, ##@LR__5059
01cf8     21 13 02 F6 | 	mov	arg01, local19
01cfc     2C EE B1 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     24 00 90 AD |  if_e	jmp	#LR__0097
01d08     1F 31 02 F6 | 	mov	local10, local17
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     35 00 00 FF 
01d14     0C E4 05 F1 | 	add	objptr, ##27148
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     18 43 62 FC | 	wrlong	local19, local10
01d20     01 3E 06 F1 | 	add	local17, #1
01d24     35 00 00 FF 
01d28     0C E4 85 F1 | 	sub	objptr, ##27148
01d2c                 | LR__0097
01d2c                 | LR__0098
01d2c     37 00 00 FF 
01d30     1C E4 05 F1 | 	add	objptr, ##28188
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     1A 00 00 FF 
01d3c     E0 E5 05 F1 | 	add	objptr, ##13792
01d40     F2 14 02 FB | 	rdlong	arg02, objptr
01d44     01 14 06 F1 | 	add	arg02, #1
01d48     04 E4 05 F1 | 	add	objptr, #4
01d4c     F2 16 02 FB | 	rdlong	arg03, objptr
01d50     04 E4 85 F1 | 	sub	objptr, #4
01d54     F2 32 02 FB | 	rdlong	local11, objptr
01d58     51 00 00 FF 
01d5c     FC E5 85 F1 | 	sub	objptr, ##41980
01d60     19 35 02 F6 | 	mov	local12, local11
01d64     1A 17 82 F1 | 	sub	arg03, local12
01d68     01 16 86 F1 | 	sub	arg03, #1
01d6c     28 0F B2 FD | 	call	#__system__Mid_S
01d70     FD 42 02 F6 | 	mov	local19, result1
01d74                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d74     81 01 00 FF 
01d78     EE 15 06 F6 | 	mov	arg02, ##@LR__5060
01d7c     21 13 02 F6 | 	mov	arg01, local19
01d80     A8 ED B1 FD | 	call	#__system___string_cmp
01d84     00 FA 0D F2 | 	cmp	result1, #0 wz
01d88     24 00 90 AD |  if_e	jmp	#LR__0099
01d8c     1F 31 02 F6 | 	mov	local10, local17
01d90     03 30 66 F0 | 	shl	local10, #3
01d94     35 00 00 FF 
01d98     0C E4 05 F1 | 	add	objptr, ##27148
01d9c     F2 30 02 F1 | 	add	local10, objptr
01da0     18 43 62 FC | 	wrlong	local19, local10
01da4     01 3E 06 F1 | 	add	local17, #1
01da8     35 00 00 FF 
01dac     0C E4 85 F1 | 	sub	objptr, ##27148
01db0                 | LR__0099
01db0     01 20 06 F1 | 	add	local02, #1
01db4     A8 FE 9F FD | 	jmp	#LR__0096
01db8                 | LR__0100
01db8                 | ' 
01db8                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01db8                 | ' 
01db8                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01db8     37 00 00 FF 
01dbc     24 E4 05 F1 | 	add	objptr, ##28196
01dc0     F2 24 0A FB | 	rdlong	local04, objptr wz
01dc4     37 00 00 FF 
01dc8     24 E4 85 F1 | 	sub	objptr, ##28196
01dcc     37 00 00 5F 
01dd0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01dd4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01dd8     37 00 00 5F 
01ddc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01de0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01de4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01de8     35 00 00 FF 
01dec     0C E4 05 F1 | 	add	objptr, ##27148
01df0     F2 32 02 FB | 	rdlong	local11, objptr
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     04 46 B0 FD | 	call	#_isdec
01e04     FD 34 02 F6 | 	mov	local12, result1
01e08     1A 29 22 F6 | 	not	local06, local12
01e0c     00 28 0E F2 | 	cmp	local06, #0 wz
01e10     8C 00 90 AD |  if_e	jmp	#LR__0103
01e14     1F 21 02 F6 | 	mov	local02, local17
01e18     35 00 00 FF 
01e1c     0C E4 05 F1 | 	add	objptr, ##27148
01e20     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01e24                 | LR__0101
01e24     10 27 02 F6 | 	mov	local05, local02
01e28     01 26 86 F1 | 	sub	local05, #1
01e2c     03 26 66 F0 | 	shl	local05, #3
01e30     F2 26 02 F1 | 	add	local05, objptr
01e34     13 25 02 FB | 	rdlong	local04, local05
01e38     10 29 02 F6 | 	mov	local06, local02
01e3c     01 28 86 F1 | 	sub	local06, #1
01e40     03 28 66 F0 | 	shl	local06, #3
01e44     F2 28 02 F1 | 	add	local06, objptr
01e48     04 28 06 F1 | 	add	local06, #4
01e4c     14 23 02 FB | 	rdlong	local03, local06
01e50     10 29 02 F6 | 	mov	local06, local02
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     F2 34 02 F6 | 	mov	local12, objptr
01e5c     F2 28 02 F1 | 	add	local06, objptr
01e60     14 25 62 FC | 	wrlong	local04, local06
01e64     10 33 02 F6 | 	mov	local11, local02
01e68     19 37 02 F6 | 	mov	local13, local11
01e6c     03 36 66 F0 | 	shl	local13, #3
01e70     F2 36 02 F1 | 	add	local13, objptr
01e74     04 36 06 F1 | 	add	local13, #4
01e78     1B 23 62 FC | 	wrlong	local03, local13
01e7c     01 20 86 F1 | 	sub	local02, #1
01e80     01 20 56 F2 | 	cmps	local02, #1 wc
01e84     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01e88                 | LR__0102
01e88     81 01 00 FF 
01e8c     EF 25 06 F6 | 	mov	local04, ##@LR__5061
01e90     F2 24 62 FC | 	wrlong	local04, objptr
01e94     35 00 00 FF 
01e98     0C E4 85 F1 | 	sub	objptr, ##27148
01e9c     01 3E 06 F1 | 	add	local17, #1
01ea0                 | LR__0103
01ea0     00 20 06 F6 | 	mov	local02, #0
01ea4                 | ' 
01ea4                 | ' ' 1e : find strings
01ea4                 | ' 
01ea4                 | ' i=0
01ea4                 | ' do
01ea4                 | LR__0104
01ea4                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01ea4     10 27 02 F6 | 	mov	local05, local02
01ea8     03 26 66 F0 | 	shl	local05, #3
01eac     35 00 00 FF 
01eb0     0C E4 05 F1 | 	add	objptr, ##27148
01eb4     F2 26 02 F1 | 	add	local05, objptr
01eb8     13 13 02 FB | 	rdlong	arg01, local05
01ebc     81 01 00 FF 
01ec0     F1 15 06 F6 | 	mov	arg02, ##@LR__5062
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     5C EC B1 FD | 	call	#__system___string_cmp
01ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ed4     01 20 06 51 |  if_ne	add	local02, #1
01ed8     20 01 90 5D |  if_ne	jmp	#LR__0109
01edc     10 45 02 F6 | 	mov	local20, local02
01ee0                 | LR__0105
01ee0     10 31 02 F6 | 	mov	local10, local02
01ee4     01 30 06 F1 | 	add	local10, #1
01ee8     03 30 66 F0 | 	shl	local10, #3
01eec     35 00 00 FF 
01ef0     0C E4 05 F1 | 	add	objptr, ##27148
01ef4     F2 30 02 F1 | 	add	local10, objptr
01ef8     18 43 02 FB | 	rdlong	local19, local10
01efc     22 31 02 F6 | 	mov	local10, local20
01f00     03 30 66 F0 | 	shl	local10, #3
01f04     F2 30 02 F1 | 	add	local10, objptr
01f08     22 33 02 F6 | 	mov	local11, local20
01f0c     19 39 02 F6 | 	mov	local14, local11
01f10     03 38 66 F0 | 	shl	local14, #3
01f14     F2 38 02 F1 | 	add	local14, objptr
01f18     1C 13 02 FB | 	rdlong	arg01, local14
01f1c     21 35 02 F6 | 	mov	local12, local19
01f20     1A 15 02 F6 | 	mov	arg02, local12
01f24     35 00 00 FF 
01f28     0C E4 85 F1 | 	sub	objptr, ##27148
01f2c     30 EC B1 FD | 	call	#__system___string_concat
01f30     18 FB 61 FC | 	wrlong	result1, local10
01f34     10 3B 02 F6 | 	mov	local15, local02
01f38     01 3A 06 F1 | 	add	local15, #1
01f3c     1F 47 02 F6 | 	mov	local21, local17
01f40     01 46 06 F1 | 	add	local21, #1
01f44     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
01f48                 | LR__0106
01f48     23 3B 52 F2 | 	cmps	local15, local21 wc
01f4c     70 00 90 3D |  if_ae	jmp	#LR__0108
01f50     1D 27 02 F6 | 	mov	local05, local15
01f54     01 26 06 F1 | 	add	local05, #1
01f58     03 26 66 F0 | 	shl	local05, #3
01f5c     35 00 00 FF 
01f60     0C E4 05 F1 | 	add	objptr, ##27148
01f64     F2 26 02 F1 | 	add	local05, objptr
01f68     13 25 02 FB | 	rdlong	local04, local05
01f6c     1D 29 02 F6 | 	mov	local06, local15
01f70     01 28 06 F1 | 	add	local06, #1
01f74     03 28 66 F0 | 	shl	local06, #3
01f78     F2 28 02 F1 | 	add	local06, objptr
01f7c     04 28 06 F1 | 	add	local06, #4
01f80     14 23 02 FB | 	rdlong	local03, local06
01f84     1D 29 02 F6 | 	mov	local06, local15
01f88     03 28 66 F0 | 	shl	local06, #3
01f8c     F2 34 02 F6 | 	mov	local12, objptr
01f90     F2 28 02 F1 | 	add	local06, objptr
01f94     14 25 62 FC | 	wrlong	local04, local06
01f98     1D 33 02 F6 | 	mov	local11, local15
01f9c     19 37 02 F6 | 	mov	local13, local11
01fa0     03 36 66 F0 | 	shl	local13, #3
01fa4     F2 36 02 F1 | 	add	local13, objptr
01fa8     04 36 06 F1 | 	add	local13, #4
01fac     1B 23 62 FC | 	wrlong	local03, local13
01fb0     01 3A 06 F1 | 	add	local15, #1
01fb4     35 00 00 FF 
01fb8     0C E4 85 F1 | 	sub	objptr, ##27148
01fbc     88 FF 9F FD | 	jmp	#LR__0106
01fc0                 | LR__0107
01fc0                 | LR__0108
01fc0     01 3E 86 F1 | 	sub	local17, #1
01fc4     81 01 00 FF 
01fc8     F3 15 06 F6 | 	mov	arg02, ##@LR__5063
01fcc     21 13 02 F6 | 	mov	arg01, local19
01fd0     58 EB B1 FD | 	call	#__system___string_cmp
01fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
01fd8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
01fdc     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
01fe0                 | '   if p$<>"""" then k+=1:i+=1
01fe0     81 01 00 FF 
01fe4     F5 15 06 F6 | 	mov	arg02, ##@LR__5064
01fe8     21 13 02 F6 | 	mov	arg01, local19
01fec     3C EB B1 FD | 	call	#__system___string_cmp
01ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ff4     01 3E 06 51 |  if_ne	add	local17, #1
01ff8     01 20 06 51 |  if_ne	add	local02, #1
01ffc                 | LR__0109
01ffc     1F 21 52 F2 | 	cmps	local02, local17 wc
02000     A0 FE 9F CD |  if_b	jmp	#LR__0104
02004     00 20 06 F6 | 	mov	local02, #0
02008                 | ' 
02008                 | ' ' 1f : concatenate strings if "" detected between
02008                 | '  
02008                 | ' i=0
02008                 | ' do
02008                 | LR__0110
02008                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
02008     10 27 02 F6 | 	mov	local05, local02
0200c     03 26 66 F0 | 	shl	local05, #3
02010     35 00 00 FF 
02014     0C E4 05 F1 | 	add	objptr, ##27148
02018     F2 28 02 F6 | 	mov	local06, objptr
0201c     F2 26 02 F1 | 	add	local05, objptr
02020     13 13 02 FB | 	rdlong	arg01, local05
02024     01 14 06 F6 | 	mov	arg02, #1
02028     35 00 00 FF 
0202c     0C E4 85 F1 | 	sub	objptr, ##27148
02030     D4 0B B2 FD | 	call	#__system__Right_S
02034     FD 12 02 F6 | 	mov	arg01, result1
02038     81 01 00 FF 
0203c     F7 15 06 F6 | 	mov	arg02, ##@LR__5065
02040     E8 EA B1 FD | 	call	#__system___string_cmp
02044     00 FA 0D F2 | 	cmp	result1, #0 wz
02048     7C 01 90 5D |  if_ne	jmp	#LR__0116
0204c     10 29 02 F6 | 	mov	local06, local02
02050     01 28 06 F1 | 	add	local06, #1
02054     03 28 66 F0 | 	shl	local06, #3
02058     35 00 00 FF 
0205c     0C E4 05 F1 | 	add	objptr, ##27148
02060     F2 34 02 F6 | 	mov	local12, objptr
02064     F2 28 02 F1 | 	add	local06, objptr
02068     14 13 02 FB | 	rdlong	arg01, local06
0206c     01 14 06 F6 | 	mov	arg02, #1
02070     35 00 00 FF 
02074     0C E4 85 F1 | 	sub	objptr, ##27148
02078     04 0B B2 FD | 	call	#__system__Left_S
0207c     FD 12 02 F6 | 	mov	arg01, result1
02080     81 01 00 FF 
02084     F9 15 06 F6 | 	mov	arg02, ##@LR__5066
02088     A0 EA B1 FD | 	call	#__system___string_cmp
0208c     00 FA 0D F2 | 	cmp	result1, #0 wz
02090     34 01 90 5D |  if_ne	jmp	#LR__0116
02094     10 31 02 F6 | 	mov	local10, local02
02098     03 30 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 30 02 F1 | 	add	local10, objptr
020a8     10 39 02 F6 | 	mov	local14, local02
020ac     03 38 66 F0 | 	shl	local14, #3
020b0     F2 38 02 F1 | 	add	local14, objptr
020b4     1C 29 02 FB | 	rdlong	local06, local14
020b8     10 37 02 F6 | 	mov	local13, local02
020bc     01 36 06 F1 | 	add	local13, #1
020c0     03 36 66 F0 | 	shl	local13, #3
020c4     F2 36 02 F1 | 	add	local13, objptr
020c8     1B 35 02 FB | 	rdlong	local12, local13
020cc     10 49 02 F6 | 	mov	local22, local02
020d0     01 48 06 F1 | 	add	local22, #1
020d4     24 4B 02 F6 | 	mov	local23, local22
020d8     03 4A 66 F0 | 	shl	local23, #3
020dc     F2 4C 02 F6 | 	mov	local24, objptr
020e0     F2 4A 02 F1 | 	add	local23, objptr
020e4     25 13 02 FB | 	rdlong	arg01, local23
020e8     35 00 00 FF 
020ec     0C E4 85 F1 | 	sub	objptr, ##27148
020f0     09 2B 02 F6 | 	mov	local07, arg01
020f4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
020f8                 | LR__0111
020f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
020fc     01 2A 06 51 |  if_ne	add	local07, #1
02100     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02104                 | LR__0112
02104     09 2B 82 F1 | 	sub	local07, arg01
02108     15 33 02 F6 | 	mov	local11, local07
0210c     01 32 86 F1 | 	sub	local11, #1
02110     1A 13 02 F6 | 	mov	arg01, local12
02114     19 15 02 F6 | 	mov	arg02, local11
02118     EC 0A B2 FD | 	call	#__system__Right_S
0211c     FD 34 02 F6 | 	mov	local12, result1
02120     14 13 02 F6 | 	mov	arg01, local06
02124     1A 15 02 F6 | 	mov	arg02, local12
02128     34 EA B1 FD | 	call	#__system___string_concat
0212c     FD 28 02 F6 | 	mov	local06, result1
02130     18 29 62 FC | 	wrlong	local06, local10
02134                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02134     10 3B 02 F6 | 	mov	local15, local02
02138     01 3A 06 F1 | 	add	local15, #1
0213c     1F 4F 02 F6 | 	mov	local25, local17
02140     01 4E 06 F1 | 	add	local25, #1
02144     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02148                 | LR__0113
02148     27 3B 52 F2 | 	cmps	local15, local25 wc
0214c     70 00 90 3D |  if_ae	jmp	#LR__0115
02150     1D 27 02 F6 | 	mov	local05, local15
02154     01 26 06 F1 | 	add	local05, #1
02158     03 26 66 F0 | 	shl	local05, #3
0215c     35 00 00 FF 
02160     0C E4 05 F1 | 	add	objptr, ##27148
02164     F2 26 02 F1 | 	add	local05, objptr
02168     13 25 02 FB | 	rdlong	local04, local05
0216c     1D 29 02 F6 | 	mov	local06, local15
02170     01 28 06 F1 | 	add	local06, #1
02174     03 28 66 F0 | 	shl	local06, #3
02178     F2 28 02 F1 | 	add	local06, objptr
0217c     04 28 06 F1 | 	add	local06, #4
02180     14 23 02 FB | 	rdlong	local03, local06
02184     1D 29 02 F6 | 	mov	local06, local15
02188     03 28 66 F0 | 	shl	local06, #3
0218c     F2 34 02 F6 | 	mov	local12, objptr
02190     F2 28 02 F1 | 	add	local06, objptr
02194     14 25 62 FC | 	wrlong	local04, local06
02198     1D 33 02 F6 | 	mov	local11, local15
0219c     19 37 02 F6 | 	mov	local13, local11
021a0     03 36 66 F0 | 	shl	local13, #3
021a4     F2 36 02 F1 | 	add	local13, objptr
021a8     04 36 06 F1 | 	add	local13, #4
021ac     1B 23 62 FC | 	wrlong	local03, local13
021b0     01 3A 06 F1 | 	add	local15, #1
021b4     35 00 00 FF 
021b8     0C E4 85 F1 | 	sub	objptr, ##27148
021bc     88 FF 9F FD | 	jmp	#LR__0113
021c0                 | LR__0114
021c0                 | LR__0115
021c0     01 20 86 F1 | 	sub	local02, #1
021c4     01 3E 86 F1 | 	sub	local17, #1
021c8                 | LR__0116
021c8     01 20 06 F1 | 	add	local02, #1
021cc     1F 21 52 F2 | 	cmps	local02, local17 wc
021d0     34 FE 9F CD |  if_b	jmp	#LR__0110
021d4     00 20 06 F6 | 	mov	local02, #0
021d8                 | '  
021d8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
021d8                 | '  
021d8                 | ' i=0 
021d8                 | ' do
021d8                 | LR__0117
021d8     10 31 02 F6 | 	mov	local10, local02
021dc     03 30 66 F0 | 	shl	local10, #3
021e0     35 00 00 FF 
021e4     0C E4 05 F1 | 	add	objptr, ##27148
021e8     F2 30 02 F1 | 	add	local10, objptr
021ec     18 51 02 FB | 	rdlong	local26, local10
021f0     10 31 02 F6 | 	mov	local10, local02
021f4     01 30 06 F1 | 	add	local10, #1
021f8     03 30 66 F0 | 	shl	local10, #3
021fc     F2 30 02 F1 | 	add	local10, objptr
02200     18 53 02 FB | 	rdlong	local27, local10
02204                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02204                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02204     81 01 00 FF 
02208     FB 15 06 F6 | 	mov	arg02, ##@LR__5067
0220c     28 13 02 F6 | 	mov	arg01, local26
02210     35 00 00 FF 
02214     0C E4 85 F1 | 	sub	objptr, ##27148
02218     10 E9 B1 FD | 	call	#__system___string_cmp
0221c     00 FA 0D F2 | 	cmp	result1, #0 wz
02220     A8 00 90 AD |  if_e	jmp	#LR__0118
02224     81 01 00 FF 
02228     FD 15 06 F6 | 	mov	arg02, ##@LR__5068
0222c     28 13 02 F6 | 	mov	arg01, local26
02230     F8 E8 B1 FD | 	call	#__system___string_cmp
02234     FD 22 0A F6 | 	mov	local03, result1 wz
02238     90 00 90 AD |  if_e	jmp	#LR__0118
0223c     81 01 00 FF 
02240     FF 29 06 F6 | 	mov	local06, ##@LR__5069
02244     28 13 02 F6 | 	mov	arg01, local26
02248     14 15 02 F6 | 	mov	arg02, local06
0224c     DC E8 B1 FD | 	call	#__system___string_cmp
02250     00 FA 0D F2 | 	cmp	result1, #0 wz
02254     74 00 90 AD |  if_e	jmp	#LR__0118
02258     82 01 00 FF 
0225c     01 34 06 F6 | 	mov	local12, ##@LR__5070
02260     28 13 02 F6 | 	mov	arg01, local26
02264     1A 15 02 F6 | 	mov	arg02, local12
02268     C0 E8 B1 FD | 	call	#__system___string_cmp
0226c     00 FA 0D F2 | 	cmp	result1, #0 wz
02270     58 00 90 AD |  if_e	jmp	#LR__0118
02274     82 01 00 FF 
02278     03 32 06 F6 | 	mov	local11, ##@LR__5071
0227c     19 35 02 F6 | 	mov	local12, local11
02280     28 13 02 F6 | 	mov	arg01, local26
02284     1A 15 02 F6 | 	mov	arg02, local12
02288     A0 E8 B1 FD | 	call	#__system___string_cmp
0228c     FD 28 0A F6 | 	mov	local06, result1 wz
02290     38 00 90 AD |  if_e	jmp	#LR__0118
02294     82 01 00 FF 
02298     05 32 06 F6 | 	mov	local11, ##@LR__5072
0229c     28 13 02 F6 | 	mov	arg01, local26
022a0     19 15 02 F6 | 	mov	arg02, local11
022a4     84 E8 B1 FD | 	call	#__system___string_cmp
022a8     FD 34 0A F6 | 	mov	local12, result1 wz
022ac     1C 00 90 AD |  if_e	jmp	#LR__0118
022b0     82 01 00 FF 
022b4     07 38 06 F6 | 	mov	local14, ##@LR__5073
022b8     28 13 02 F6 | 	mov	arg01, local26
022bc     1C 15 02 F6 | 	mov	arg02, local14
022c0     68 E8 B1 FD | 	call	#__system___string_cmp
022c4     FD 32 0A F6 | 	mov	local11, result1 wz
022c8     20 00 90 5D |  if_ne	jmp	#LR__0119
022cc                 | LR__0118
022cc     82 01 00 FF 
022d0     09 54 06 F6 | 	mov	local28, ##@LR__5074
022d4     2A 37 02 F6 | 	mov	local13, local28
022d8     29 13 02 F6 | 	mov	arg01, local27
022dc     1B 15 02 F6 | 	mov	arg02, local13
022e0     48 E8 B1 FD | 	call	#__system___string_cmp
022e4     FD 38 0A F6 | 	mov	local14, result1 wz
022e8     B8 00 90 AD |  if_e	jmp	#LR__0122
022ec                 | LR__0119
022ec     82 01 00 FF 
022f0     0B 54 06 F6 | 	mov	local28, ##@LR__5075
022f4     28 13 02 F6 | 	mov	arg01, local26
022f8     2A 15 02 F6 | 	mov	arg02, local28
022fc     2C E8 B1 FD | 	call	#__system___string_cmp
02300     FD 36 0A F6 | 	mov	local13, result1 wz
02304     20 00 90 5D |  if_ne	jmp	#LR__0120
02308     82 01 00 FF 
0230c     0D 4A 06 F6 | 	mov	local23, ##@LR__5076
02310     25 49 02 F6 | 	mov	local22, local23
02314     29 13 02 F6 | 	mov	arg01, local27
02318     24 15 02 F6 | 	mov	arg02, local22
0231c     0C E8 B1 FD | 	call	#__system___string_cmp
02320     FD 54 0A F6 | 	mov	local28, result1 wz
02324     7C 00 90 AD |  if_e	jmp	#LR__0122
02328                 | LR__0120
02328     82 01 00 FF 
0232c     0F 4A 06 F6 | 	mov	local23, ##@LR__5077
02330     28 13 02 F6 | 	mov	arg01, local26
02334     25 15 02 F6 | 	mov	arg02, local23
02338     F0 E7 B1 FD | 	call	#__system___string_cmp
0233c     FD 48 0A F6 | 	mov	local22, result1 wz
02340     20 00 90 5D |  if_ne	jmp	#LR__0121
02344     82 01 00 FF 
02348     11 56 06 F6 | 	mov	local29, ##@LR__5078
0234c     2B 4D 02 F6 | 	mov	local24, local29
02350     29 13 02 F6 | 	mov	arg01, local27
02354     26 15 02 F6 | 	mov	arg02, local24
02358     D0 E7 B1 FD | 	call	#__system___string_cmp
0235c     FD 4A 0A F6 | 	mov	local23, result1 wz
02360     40 00 90 AD |  if_e	jmp	#LR__0122
02364                 | LR__0121
02364     82 01 00 FF 
02368     13 58 06 F6 | 	mov	local30, ##@LR__5079
0236c     2C 57 02 F6 | 	mov	local29, local30
02370     28 13 02 F6 | 	mov	arg01, local26
02374     2B 15 02 F6 | 	mov	arg02, local29
02378     B0 E7 B1 FD | 	call	#__system___string_cmp
0237c     FD 4C 0A F6 | 	mov	local24, result1 wz
02380     F0 00 90 5D |  if_ne	jmp	#LR__0126
02384     82 01 00 FF 
02388     15 5A 06 F6 | 	mov	local31, ##@LR__5080
0238c     2D 59 02 F6 | 	mov	local30, local31
02390     29 13 02 F6 | 	mov	arg01, local27
02394     2C 15 02 F6 | 	mov	arg02, local30
02398     90 E7 B1 FD | 	call	#__system___string_cmp
0239c     FD 56 0A F6 | 	mov	local29, result1 wz
023a0     D0 00 90 5D |  if_ne	jmp	#LR__0126
023a4                 | LR__0122
023a4     10 31 02 F6 | 	mov	local10, local02
023a8     03 30 66 F0 | 	shl	local10, #3
023ac     35 00 00 FF 
023b0     0C E4 05 F1 | 	add	objptr, ##27148
023b4     F2 30 02 F1 | 	add	local10, objptr
023b8     29 35 02 F6 | 	mov	local12, local27
023bc     28 13 02 F6 | 	mov	arg01, local26
023c0     1A 15 02 F6 | 	mov	arg02, local12
023c4     35 00 00 FF 
023c8     0C E4 85 F1 | 	sub	objptr, ##27148
023cc     90 E7 B1 FD | 	call	#__system___string_concat
023d0     18 FB 61 FC | 	wrlong	result1, local10
023d4                 | '     lparts(i).part$=s1$+s2$
023d4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
023d4     10 3B 02 F6 | 	mov	local15, local02
023d8     01 3A 06 F1 | 	add	local15, #1
023dc     1F 5D 02 F6 | 	mov	local32, local17
023e0     01 5C 06 F1 | 	add	local32, #1
023e4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
023e8                 | LR__0123
023e8     2E 3B 52 F2 | 	cmps	local15, local32 wc
023ec     7C 00 90 3D |  if_ae	jmp	#LR__0125
023f0     1D 27 02 F6 | 	mov	local05, local15
023f4     01 26 06 F1 | 	add	local05, #1
023f8     03 26 66 F0 | 	shl	local05, #3
023fc     35 00 00 FF 
02400     0C E4 05 F1 | 	add	objptr, ##27148
02404     F2 26 02 F1 | 	add	local05, objptr
02408     13 25 02 FB | 	rdlong	local04, local05
0240c     1D 29 02 F6 | 	mov	local06, local15
02410     01 28 06 F1 | 	add	local06, #1
02414     03 28 66 F0 | 	shl	local06, #3
02418     F2 28 02 F1 | 	add	local06, objptr
0241c     04 28 06 F1 | 	add	local06, #4
02420     14 23 02 FB | 	rdlong	local03, local06
02424     1D 29 02 F6 | 	mov	local06, local15
02428     03 28 66 F0 | 	shl	local06, #3
0242c     F2 34 02 F6 | 	mov	local12, objptr
02430     F2 28 02 F1 | 	add	local06, objptr
02434     14 25 62 FC | 	wrlong	local04, local06
02438     1D 33 02 F6 | 	mov	local11, local15
0243c     19 39 02 F6 | 	mov	local14, local11
02440     1C 37 02 F6 | 	mov	local13, local14
02444     03 36 66 F0 | 	shl	local13, #3
02448     F2 54 02 F6 | 	mov	local28, objptr
0244c     F2 36 02 F1 | 	add	local13, objptr
02450     04 36 06 F1 | 	add	local13, #4
02454     1B 23 62 FC | 	wrlong	local03, local13
02458     04 36 86 F1 | 	sub	local13, #4
0245c     01 3A 06 F1 | 	add	local15, #1
02460     35 00 00 FF 
02464     0C E4 85 F1 | 	sub	objptr, ##27148
02468     7C FF 9F FD | 	jmp	#LR__0123
0246c                 | LR__0124
0246c                 | LR__0125
0246c     01 20 86 F1 | 	sub	local02, #1
02470     01 3E 86 F1 | 	sub	local17, #1
02474                 | LR__0126
02474     01 20 06 F1 | 	add	local02, #1
02478     1F 21 52 F2 | 	cmps	local02, local17 wc
0247c     58 FD 9F CD |  if_b	jmp	#LR__0117
02480                 | '  
02480                 | ' ' 1h : now remove parts that are spaces
02480                 | ' 
02480                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02480     00 20 06 F6 | 	mov	local02, #0
02484     1F 5F 02 F6 | 	mov	local33, local17
02488     01 5E 06 F1 | 	add	local33, #1
0248c                 | LR__0127
0248c     2F 21 52 F2 | 	cmps	local02, local33 wc
02490     50 00 90 3D |  if_ae	jmp	#LR__0128
02494     10 31 02 F6 | 	mov	local10, local02
02498     03 30 66 F0 | 	shl	local10, #3
0249c     35 00 00 FF 
024a0     0C E4 05 F1 | 	add	objptr, ##27148
024a4     F2 30 02 F1 | 	add	local10, objptr
024a8     10 35 02 F6 | 	mov	local12, local02
024ac     1A 33 02 F6 | 	mov	local11, local12
024b0     19 39 02 F6 | 	mov	local14, local11
024b4     03 38 66 F0 | 	shl	local14, #3
024b8     F2 36 02 F6 | 	mov	local13, objptr
024bc     F2 38 02 F1 | 	add	local14, objptr
024c0     1C 13 02 FB | 	rdlong	arg01, local14
024c4     35 00 00 FF 
024c8     0C E4 85 F1 | 	sub	objptr, ##27148
024cc     40 0B B2 FD | 	call	#__system__RTrim_S
024d0     FD 12 02 F6 | 	mov	arg01, result1
024d4     78 0A B2 FD | 	call	#__system__LTrim_S
024d8     18 FB 61 FC | 	wrlong	result1, local10
024dc     01 20 06 F1 | 	add	local02, #1
024e0     A8 FF 9F FD | 	jmp	#LR__0127
024e4                 | LR__0128
024e4     00 20 06 F6 | 	mov	local02, #0
024e8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
024ec                 | ' i=0
024ec                 | ' do 
024ec                 | LR__0129
024ec                 | '   if len(lparts(i).part$)=0 then 
024ec     10 27 02 F6 | 	mov	local05, local02
024f0     03 26 66 F0 | 	shl	local05, #3
024f4     35 00 00 FF 
024f8     0C E4 05 F1 | 	add	objptr, ##27148
024fc     F2 26 02 F1 | 	add	local05, objptr
02500     13 13 02 FB | 	rdlong	arg01, local05
02504     35 00 00 FF 
02508     0C E4 85 F1 | 	sub	objptr, ##27148
0250c     09 2B 02 F6 | 	mov	local07, arg01
02510                 | LR__0130
02510     15 FB C9 FA | 	rdbyte	result1, local07 wz
02514     01 2A 06 51 |  if_ne	add	local07, #1
02518     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
0251c     09 2B 8A F1 | 	sub	local07, arg01 wz
02520     C4 00 90 5D |  if_ne	jmp	#LR__0134
02524                 | '     if i=k-1 then k-=1  :  exit
02524     1F 25 02 F6 | 	mov	local04, local17
02528     01 24 86 F1 | 	sub	local04, #1
0252c     12 21 0A F2 | 	cmp	local02, local04 wz
02530     01 3E 86 A1 |  if_e	sub	local17, #1
02534     C4 00 90 AD |  if_e	jmp	#LR__0136
02538                 | '     if i<k-1 then 
02538     1F 25 02 F6 | 	mov	local04, local17
0253c     01 24 86 F1 | 	sub	local04, #1
02540     12 21 52 F2 | 	cmps	local02, local04 wc
02544     A0 00 90 3D |  if_ae	jmp	#LR__0133
02548                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02548     10 3B 02 F6 | 	mov	local15, local02
0254c     1F 61 02 F6 | 	mov	local34, local17
02550     01 60 86 F1 | 	sub	local34, #1
02554                 | LR__0131
02554     30 3B 52 F2 | 	cmps	local15, local34 wc
02558     80 00 90 3D |  if_ae	jmp	#LR__0132
0255c     1D 27 02 F6 | 	mov	local05, local15
02560     01 26 06 F1 | 	add	local05, #1
02564     03 26 66 F0 | 	shl	local05, #3
02568     35 00 00 FF 
0256c     0C E4 05 F1 | 	add	objptr, ##27148
02570     F2 26 02 F1 | 	add	local05, objptr
02574     13 25 02 FB | 	rdlong	local04, local05
02578     1D 29 02 F6 | 	mov	local06, local15
0257c     01 28 06 F1 | 	add	local06, #1
02580     03 28 66 F0 | 	shl	local06, #3
02584     F2 28 02 F1 | 	add	local06, objptr
02588     04 28 06 F1 | 	add	local06, #4
0258c     14 23 02 FB | 	rdlong	local03, local06
02590     1D 31 02 F6 | 	mov	local10, local15
02594     18 29 02 F6 | 	mov	local06, local10
02598     03 28 66 F0 | 	shl	local06, #3
0259c     F2 34 02 F6 | 	mov	local12, objptr
025a0     F2 28 02 F1 | 	add	local06, objptr
025a4     14 25 62 FC | 	wrlong	local04, local06
025a8     1D 33 02 F6 | 	mov	local11, local15
025ac     19 39 02 F6 | 	mov	local14, local11
025b0     1C 37 02 F6 | 	mov	local13, local14
025b4     03 36 66 F0 | 	shl	local13, #3
025b8     F2 54 02 F6 | 	mov	local28, objptr
025bc     F2 36 02 F1 | 	add	local13, objptr
025c0     04 36 06 F1 | 	add	local13, #4
025c4     1B 23 62 FC | 	wrlong	local03, local13
025c8     04 36 86 F1 | 	sub	local13, #4
025cc     01 3A 06 F1 | 	add	local15, #1
025d0     35 00 00 FF 
025d4     0C E4 85 F1 | 	sub	objptr, ##27148
025d8     78 FF 9F FD | 	jmp	#LR__0131
025dc                 | LR__0132
025dc     01 3E 86 F1 | 	sub	local17, #1
025e0                 | '       if i>0 then i-=1 
025e0     01 20 56 F2 | 	cmps	local02, #1 wc
025e4     01 20 86 31 |  if_ae	sub	local02, #1
025e8                 | LR__0133
025e8                 | LR__0134
025e8     01 20 06 F1 | 	add	local02, #1
025ec     1F 25 02 F6 | 	mov	local04, local17
025f0     01 24 86 F1 | 	sub	local04, #1
025f4     12 21 5A F2 | 	cmps	local02, local04 wcz
025f8     F0 FE 9F ED |  if_be	jmp	#LR__0129
025fc                 | LR__0135
025fc                 | LR__0136
025fc                 | ' 
025fc                 | ' ' 1i: lowercase all that is not a string
025fc                 | ' 
025fc                 | ' for j=0 to k-1
025fc     00 3A 06 F6 | 	mov	local15, #0
02600     1F 63 02 F6 | 	mov	local35, local17
02604                 | LR__0137
02604     31 3B 52 F2 | 	cmps	local15, local35 wc
02608     C8 00 90 3D |  if_ae	jmp	#LR__0140
0260c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
0260c     1D 27 02 F6 | 	mov	local05, local15
02610     03 26 66 F0 | 	shl	local05, #3
02614     35 00 00 FF 
02618     0C E4 05 F1 | 	add	objptr, ##27148
0261c     F2 26 02 F1 | 	add	local05, objptr
02620     13 13 02 FB | 	rdlong	arg01, local05
02624     01 14 06 F6 | 	mov	arg02, #1
02628     35 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##27148
02630     4C 05 B2 FD | 	call	#__system__Left_S
02634     FD 12 02 F6 | 	mov	arg01, result1
02638     82 01 00 FF 
0263c     17 14 06 F6 | 	mov	arg02, ##@LR__5081
02640     E8 E4 B1 FD | 	call	#__system___string_cmp
02644     00 FA 0D F2 | 	cmp	result1, #0 wz
02648     44 00 90 5D |  if_ne	jmp	#LR__0138
0264c     1D 29 02 F6 | 	mov	local06, local15
02650     03 28 66 F0 | 	shl	local06, #3
02654     35 00 00 FF 
02658     0C E4 05 F1 | 	add	objptr, ##27148
0265c     F2 34 02 F6 | 	mov	local12, objptr
02660     F2 28 02 F1 | 	add	local06, objptr
02664     14 13 02 FB | 	rdlong	arg01, local06
02668     01 14 06 F6 | 	mov	arg02, #1
0266c     35 00 00 FF 
02670     0C E4 85 F1 | 	sub	objptr, ##27148
02674     90 05 B2 FD | 	call	#__system__Right_S
02678     FD 12 02 F6 | 	mov	arg01, result1
0267c     82 01 00 FF 
02680     19 14 06 F6 | 	mov	arg02, ##@LR__5082
02684     A4 E4 B1 FD | 	call	#__system___string_cmp
02688     00 FA 0D F2 | 	cmp	result1, #0 wz
0268c     3C 00 90 AD |  if_e	jmp	#LR__0139
02690                 | LR__0138
02690     1D 31 02 F6 | 	mov	local10, local15
02694     03 30 66 F0 | 	shl	local10, #3
02698     35 00 00 FF 
0269c     0C E4 05 F1 | 	add	objptr, ##27148
026a0     F2 30 02 F1 | 	add	local10, objptr
026a4     1D 33 02 F6 | 	mov	local11, local15
026a8     19 39 02 F6 | 	mov	local14, local11
026ac     03 38 66 F0 | 	shl	local14, #3
026b0     F2 36 02 F6 | 	mov	local13, objptr
026b4     F2 38 02 F1 | 	add	local14, objptr
026b8     1C 13 02 FB | 	rdlong	arg01, local14
026bc     35 00 00 FF 
026c0     0C E4 85 F1 | 	sub	objptr, ##27148
026c4     C8 07 B2 FD | 	call	#__system__LCase_S
026c8     18 FB 61 FC | 	wrlong	result1, local10
026cc                 | LR__0139
026cc     01 3A 06 F1 | 	add	local15, #1
026d0     30 FF 9F FD | 	jmp	#LR__0137
026d4                 | LR__0140
026d4                 | ' 
026d4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
026d4                 | ' 
026d4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
026d4     00 20 06 F6 | 	mov	local02, #0
026d8     1F 65 02 F6 | 	mov	local36, local17
026dc     01 64 06 F1 | 	add	local36, #1
026e0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
026e4                 | LR__0141
026e4     32 21 52 F2 | 	cmps	local02, local36 wc
026e8     30 00 90 3D |  if_ae	jmp	#LR__0143
026ec     10 31 02 F6 | 	mov	local10, local02
026f0     03 30 66 F0 | 	shl	local10, #3
026f4     35 00 00 FF 
026f8     0C E4 05 F1 | 	add	objptr, ##27148
026fc     F2 30 02 F1 | 	add	local10, objptr
02700     04 30 06 F1 | 	add	local10, #4
02704     FF FF FF FF 
02708     18 FF 6B FC | 	wrlong	##-1, local10
0270c     01 20 06 F1 | 	add	local02, #1
02710     35 00 00 FF 
02714     0C E4 85 F1 | 	sub	objptr, ##27148
02718     C8 FF 9F FD | 	jmp	#LR__0141
0271c                 | LR__0142
0271c                 | LR__0143
0271c                 | ' 
0271c                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
0271c     35 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##27148
02724     F2 12 02 FB | 	rdlong	arg01, objptr
02728     35 00 00 FF 
0272c     0C E4 85 F1 | 	sub	objptr, ##27148
02730     D4 3C B0 FD | 	call	#_isdec
02734     00 FA 0D F2 | 	cmp	result1, #0 wz
02738     01 66 06 56 |  if_ne	mov	local37, #1
0273c     00 66 06 A6 |  if_e	mov	local37, #0
02740                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02740     35 00 00 FF 
02744     0C E4 05 F1 | 	add	objptr, ##27148
02748     F2 12 02 FB | 	rdlong	arg01, objptr
0274c     35 00 00 FF 
02750     0C E4 85 F1 | 	sub	objptr, ##27148
02754     82 01 00 FF 
02758     1B 14 06 F6 | 	mov	arg02, ##@LR__5083
0275c     CC E3 B1 FD | 	call	#__system___string_cmp
02760     00 FA 0D F2 | 	cmp	result1, #0 wz
02764     01 66 06 A6 |  if_e	mov	local37, #1
02768     00 20 06 F6 | 	mov	local02, #0
0276c                 | ' i=0 : do 
0276c                 | LR__0144
0276c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0276c     10 27 02 F6 | 	mov	local05, local02
02770     03 26 66 F0 | 	shl	local05, #3
02774     35 00 00 FF 
02778     0C E4 05 F1 | 	add	objptr, ##27148
0277c     F2 26 02 F1 | 	add	local05, objptr
02780     13 13 02 FB | 	rdlong	arg01, local05
02784     82 01 00 FF 
02788     20 14 06 F6 | 	mov	arg02, ##@LR__5084
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     94 E3 B1 FD | 	call	#__system___string_cmp
02798     00 FA 0D F2 | 	cmp	result1, #0 wz
0279c     0C 00 90 AD |  if_e	jmp	#LR__0145
027a0     01 20 06 F1 | 	add	local02, #1
027a4     1F 21 5A F2 | 	cmps	local02, local17 wcz
027a8     C0 FF 9F ED |  if_be	jmp	#LR__0144
027ac                 | LR__0145
027ac                 | ' if i<k then addptr=i+1	 							' then found
027ac     1F 21 52 F2 | 	cmps	local02, local17 wc
027b0     10 67 02 C6 |  if_b	mov	local37, local02
027b4     01 66 06 C1 |  if_b	add	local37, #1
027b8     35 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##27148
027c0     33 29 02 F6 | 	mov	local06, local37
027c4     03 28 66 F0 | 	shl	local06, #3
027c8     F2 34 02 F6 | 	mov	local12, objptr
027cc     F2 28 02 F1 | 	add	local06, objptr
027d0     14 15 02 FB | 	rdlong	arg02, local06
027d4     82 01 00 FF 
027d8     25 16 06 F6 | 	mov	arg03, ##@LR__5085
027dc     01 12 06 F6 | 	mov	arg01, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     DC 08 B2 FD | 	call	#__system__Instr
027ec     FD 68 02 F6 | 	mov	local38, result1
027f0                 | ' lp$=lparts(addptr).part$ 
027f0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
027f0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
027f0     01 68 56 F2 | 	cmps	local38, #1 wc
027f4     68 01 90 CD |  if_b	jmp	#LR__0152
027f8     33 27 02 F6 | 	mov	local05, local37
027fc     03 26 66 F0 | 	shl	local05, #3
02800     35 00 00 FF 
02804     0C E4 05 F1 | 	add	objptr, ##27148
02808     F2 26 02 F1 | 	add	local05, objptr
0280c     13 13 02 FB | 	rdlong	arg01, local05
02810     35 00 00 FF 
02814     0C E4 85 F1 | 	sub	objptr, ##27148
02818     09 2B 02 F6 | 	mov	local07, arg01
0281c     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02820                 | LR__0146
02820     15 FB C9 FA | 	rdbyte	result1, local07 wz
02824     01 2A 06 51 |  if_ne	add	local07, #1
02828     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
0282c                 | LR__0147
0282c     09 2B 82 F1 | 	sub	local07, arg01
02830     15 69 52 F2 | 	cmps	local38, local07 wc
02834     28 01 90 3D |  if_ae	jmp	#LR__0152
02838     01 3E 06 F1 | 	add	local17, #1
0283c                 | '   k+=1
0283c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0283c     1F 21 02 F6 | 	mov	local02, local17
02840     33 6B 02 F6 | 	mov	local39, local37
02844     01 6A 06 F1 | 	add	local39, #1
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02854                 | LR__0148
02854     10 27 02 F6 | 	mov	local05, local02
02858     01 26 86 F1 | 	sub	local05, #1
0285c     03 26 66 F0 | 	shl	local05, #3
02860     F2 26 02 F1 | 	add	local05, objptr
02864     13 25 02 FB | 	rdlong	local04, local05
02868     10 29 02 F6 | 	mov	local06, local02
0286c     01 28 86 F1 | 	sub	local06, #1
02870     03 28 66 F0 | 	shl	local06, #3
02874     F2 28 02 F1 | 	add	local06, objptr
02878     04 28 06 F1 | 	add	local06, #4
0287c     14 23 02 FB | 	rdlong	local03, local06
02880     10 29 02 F6 | 	mov	local06, local02
02884     03 28 66 F0 | 	shl	local06, #3
02888     F2 28 02 F1 | 	add	local06, objptr
0288c     14 25 62 FC | 	wrlong	local04, local06
02890     10 37 02 F6 | 	mov	local13, local02
02894     03 36 66 F0 | 	shl	local13, #3
02898     F2 36 02 F1 | 	add	local13, objptr
0289c     04 36 06 F1 | 	add	local13, #4
028a0     1B 23 62 FC | 	wrlong	local03, local13
028a4     01 20 86 F1 | 	sub	local02, #1
028a8     35 21 52 F2 | 	cmps	local02, local39 wc
028ac     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
028b0                 | LR__0149
028b0     33 31 02 F6 | 	mov	local10, local37
028b4     01 30 06 F1 | 	add	local10, #1
028b8     03 30 66 F0 | 	shl	local10, #3
028bc     F2 30 02 F1 | 	add	local10, objptr
028c0     33 39 02 F6 | 	mov	local14, local37
028c4     03 38 66 F0 | 	shl	local14, #3
028c8     F2 38 02 F1 | 	add	local14, objptr
028cc     1C 29 02 FB | 	rdlong	local06, local14
028d0     33 55 02 F6 | 	mov	local28, local37
028d4     2A 49 02 F6 | 	mov	local22, local28
028d8     03 48 66 F0 | 	shl	local22, #3
028dc     F2 4A 02 F6 | 	mov	local23, objptr
028e0     F2 48 02 F1 | 	add	local22, objptr
028e4     24 13 02 FB | 	rdlong	arg01, local22
028e8     35 00 00 FF 
028ec     0C E4 85 F1 | 	sub	objptr, ##27148
028f0     09 2B 02 F6 | 	mov	local07, arg01
028f4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
028f8                 | LR__0150
028f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
028fc     01 2A 06 51 |  if_ne	add	local07, #1
02900     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02904                 | LR__0151
02904     09 2B 82 F1 | 	sub	local07, arg01
02908     15 15 02 F6 | 	mov	arg02, local07
0290c     34 15 82 F1 | 	sub	arg02, local38
02910     14 13 02 F6 | 	mov	arg01, local06
02914     F0 02 B2 FD | 	call	#__system__Right_S
02918     18 FB 61 FC | 	wrlong	result1, local10
0291c     33 31 02 F6 | 	mov	local10, local37
02920     03 30 66 F0 | 	shl	local10, #3
02924     35 00 00 FF 
02928     0C E4 05 F1 | 	add	objptr, ##27148
0292c     F2 30 02 F1 | 	add	local10, objptr
02930     33 33 02 F6 | 	mov	local11, local37
02934     19 39 02 F6 | 	mov	local14, local11
02938     03 38 66 F0 | 	shl	local14, #3
0293c     F2 36 02 F6 | 	mov	local13, objptr
02940     F2 38 02 F1 | 	add	local14, objptr
02944     1C 13 02 FB | 	rdlong	arg01, local14
02948     34 35 02 F6 | 	mov	local12, local38
0294c     1A 15 02 F6 | 	mov	arg02, local12
02950     35 00 00 FF 
02954     0C E4 85 F1 | 	sub	objptr, ##27148
02958     24 02 B2 FD | 	call	#__system__Left_S
0295c     18 FB 61 FC | 	wrlong	result1, local10
02960                 | LR__0152
02960                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02960     33 27 02 F6 | 	mov	local05, local37
02964     03 26 66 F0 | 	shl	local05, #3
02968     35 00 00 FF 
0296c     0C E4 05 F1 | 	add	objptr, ##27148
02970     F2 26 02 F1 | 	add	local05, objptr
02974     13 13 02 FB | 	rdlong	arg01, local05
02978     01 14 06 F6 | 	mov	arg02, #1
0297c     35 00 00 FF 
02980     0C E4 85 F1 | 	sub	objptr, ##27148
02984     F8 01 B2 FD | 	call	#__system__Left_S
02988     FD 12 02 F6 | 	mov	arg01, result1
0298c     82 01 00 FF 
02990     27 14 06 F6 | 	mov	arg02, ##@LR__5086
02994     94 E1 B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     60 01 90 5D |  if_ne	jmp	#LR__0159
029a0     33 29 02 F6 | 	mov	local06, local37
029a4     03 28 66 F0 | 	shl	local06, #3
029a8     35 00 00 FF 
029ac     0C E4 05 F1 | 	add	objptr, ##27148
029b0     F2 34 02 F6 | 	mov	local12, objptr
029b4     F2 28 02 F1 | 	add	local06, objptr
029b8     14 13 02 FB | 	rdlong	arg01, local06
029bc     35 00 00 FF 
029c0     0C E4 85 F1 | 	sub	objptr, ##27148
029c4     09 2B 02 F6 | 	mov	local07, arg01
029c8     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
029cc                 | LR__0153
029cc     15 FB C9 FA | 	rdbyte	result1, local07 wz
029d0     01 2A 06 51 |  if_ne	add	local07, #1
029d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
029d8                 | LR__0154
029d8     09 2B 82 F1 | 	sub	local07, arg01
029dc     02 2A 56 F2 | 	cmps	local07, #2 wc
029e0     1C 01 90 CD |  if_b	jmp	#LR__0159
029e4     01 3E 06 F1 | 	add	local17, #1
029e8                 | '   k+=1
029e8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029e8     1F 21 02 F6 | 	mov	local02, local17
029ec     33 6D 02 F6 | 	mov	local40, local37
029f0     01 6C 06 F1 | 	add	local40, #1
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02a00                 | LR__0155
02a00     10 27 02 F6 | 	mov	local05, local02
02a04     01 26 86 F1 | 	sub	local05, #1
02a08     03 26 66 F0 | 	shl	local05, #3
02a0c     F2 26 02 F1 | 	add	local05, objptr
02a10     13 25 02 FB | 	rdlong	local04, local05
02a14     10 29 02 F6 | 	mov	local06, local02
02a18     01 28 86 F1 | 	sub	local06, #1
02a1c     03 28 66 F0 | 	shl	local06, #3
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     04 28 06 F1 | 	add	local06, #4
02a28     14 23 02 FB | 	rdlong	local03, local06
02a2c     10 29 02 F6 | 	mov	local06, local02
02a30     03 28 66 F0 | 	shl	local06, #3
02a34     F2 28 02 F1 | 	add	local06, objptr
02a38     14 25 62 FC | 	wrlong	local04, local06
02a3c     10 37 02 F6 | 	mov	local13, local02
02a40     03 36 66 F0 | 	shl	local13, #3
02a44     F2 36 02 F1 | 	add	local13, objptr
02a48     04 36 06 F1 | 	add	local13, #4
02a4c     1B 23 62 FC | 	wrlong	local03, local13
02a50     01 20 86 F1 | 	sub	local02, #1
02a54     36 21 52 F2 | 	cmps	local02, local40 wc
02a58     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02a5c                 | LR__0156
02a5c     33 31 02 F6 | 	mov	local10, local37
02a60     01 30 06 F1 | 	add	local10, #1
02a64     03 30 66 F0 | 	shl	local10, #3
02a68     F2 30 02 F1 | 	add	local10, objptr
02a6c     33 39 02 F6 | 	mov	local14, local37
02a70     03 38 66 F0 | 	shl	local14, #3
02a74     F2 38 02 F1 | 	add	local14, objptr
02a78     1C 29 02 FB | 	rdlong	local06, local14
02a7c     33 37 02 F6 | 	mov	local13, local37
02a80     1B 55 02 F6 | 	mov	local28, local13
02a84     2A 49 02 F6 | 	mov	local22, local28
02a88     03 48 66 F0 | 	shl	local22, #3
02a8c     F2 4A 02 F6 | 	mov	local23, objptr
02a90     F2 48 02 F1 | 	add	local22, objptr
02a94     24 13 02 FB | 	rdlong	arg01, local22
02a98     35 00 00 FF 
02a9c     0C E4 85 F1 | 	sub	objptr, ##27148
02aa0     09 2B 02 F6 | 	mov	local07, arg01
02aa4     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02aa8                 | LR__0157
02aa8     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aac     01 2A 06 51 |  if_ne	add	local07, #1
02ab0     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02ab4                 | LR__0158
02ab4     09 2B 82 F1 | 	sub	local07, arg01
02ab8     15 39 02 F6 | 	mov	local14, local07
02abc     1C 33 02 F6 | 	mov	local11, local14
02ac0     01 32 86 F1 | 	sub	local11, #1
02ac4     19 35 02 F6 | 	mov	local12, local11
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     1A 15 02 F6 | 	mov	arg02, local12
02ad0     34 01 B2 FD | 	call	#__system__Right_S
02ad4     18 FB 61 FC | 	wrlong	result1, local10
02ad8     33 31 02 F6 | 	mov	local10, local37
02adc     03 30 66 F0 | 	shl	local10, #3
02ae0     35 00 00 FF 
02ae4     0C E4 05 F1 | 	add	objptr, ##27148
02ae8     F2 30 02 F1 | 	add	local10, objptr
02aec     82 01 00 FF 
02af0     29 28 06 F6 | 	mov	local06, ##@LR__5087
02af4     18 29 62 FC | 	wrlong	local06, local10
02af8     35 00 00 FF 
02afc     0C E4 85 F1 | 	sub	objptr, ##27148
02b00                 | LR__0159
02b00     33 31 02 F6 | 	mov	local10, local37
02b04     03 30 66 F0 | 	shl	local10, #3
02b08     35 00 00 FF 
02b0c     0C E4 05 F1 | 	add	objptr, ##27148
02b10     F2 30 02 F1 | 	add	local10, objptr
02b14     18 6F 02 FB | 	rdlong	local41, local10
02b18                 | ' 
02b18                 | ' lp$=lparts(addptr).part$ 
02b18                 | ' 
02b18                 | ' ' process mouse/cursor/click on/off
02b18                 | ' 
02b18                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02b18     82 01 00 FF 
02b1c     2B 14 06 F6 | 	mov	arg02, ##@LR__5088
02b20     37 13 02 F6 | 	mov	arg01, local41
02b24     35 00 00 FF 
02b28     0C E4 85 F1 | 	sub	objptr, ##27148
02b2c     FC DF B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     30 00 90 AD |  if_e	jmp	#LR__0160
02b38     82 01 00 FF 
02b3c     31 14 06 F6 | 	mov	arg02, ##@LR__5089
02b40     37 13 02 F6 | 	mov	arg01, local41
02b44     E4 DF B1 FD | 	call	#__system___string_cmp
02b48     00 FA 0D F2 | 	cmp	result1, #0 wz
02b4c     18 00 90 AD |  if_e	jmp	#LR__0160
02b50     82 01 00 FF 
02b54     38 14 06 F6 | 	mov	arg02, ##@LR__5090
02b58     37 13 02 F6 | 	mov	arg01, local41
02b5c     CC DF B1 FD | 	call	#__system___string_cmp
02b60     00 FA 0D F2 | 	cmp	result1, #0 wz
02b64     E0 00 90 5D |  if_ne	jmp	#LR__0163
02b68                 | LR__0160
02b68                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02b68     33 27 02 F6 | 	mov	local05, local37
02b6c     01 26 06 F1 | 	add	local05, #1
02b70     03 26 66 F0 | 	shl	local05, #3
02b74     35 00 00 FF 
02b78     0C E4 05 F1 | 	add	objptr, ##27148
02b7c     F2 26 02 F1 | 	add	local05, objptr
02b80     13 13 02 FB | 	rdlong	arg01, local05
02b84     82 01 00 FF 
02b88     3E 14 06 F6 | 	mov	arg02, ##@LR__5091
02b8c     35 00 00 FF 
02b90     0C E4 85 F1 | 	sub	objptr, ##27148
02b94     94 DF B1 FD | 	call	#__system___string_cmp
02b98     00 FA 0D F2 | 	cmp	result1, #0 wz
02b9c     38 00 90 5D |  if_ne	jmp	#LR__0161
02ba0     33 31 02 F6 | 	mov	local10, local37
02ba4     01 30 06 F1 | 	add	local10, #1
02ba8     03 30 66 F0 | 	shl	local10, #3
02bac     35 00 00 FF 
02bb0     0C E4 05 F1 | 	add	objptr, ##27148
02bb4     F2 30 02 F1 | 	add	local10, objptr
02bb8     82 01 00 FF 
02bbc     41 28 06 F6 | 	mov	local06, ##@LR__5092
02bc0     18 29 62 FC | 	wrlong	local06, local10
02bc4     14 E4 05 F1 | 	add	objptr, #20
02bc8     01 00 80 FF 
02bcc     F2 00 68 FC | 	wrlong	##512, objptr
02bd0     35 00 00 FF 
02bd4     20 E4 85 F1 | 	sub	objptr, ##27168
02bd8                 | LR__0161
02bd8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02bd8     33 27 02 F6 | 	mov	local05, local37
02bdc     01 26 06 F1 | 	add	local05, #1
02be0     03 26 66 F0 | 	shl	local05, #3
02be4     35 00 00 FF 
02be8     0C E4 05 F1 | 	add	objptr, ##27148
02bec     F2 26 02 F1 | 	add	local05, objptr
02bf0     13 13 02 FB | 	rdlong	arg01, local05
02bf4     82 01 00 FF 
02bf8     43 14 06 F6 | 	mov	arg02, ##@LR__5093
02bfc     35 00 00 FF 
02c00     0C E4 85 F1 | 	sub	objptr, ##27148
02c04     24 DF B1 FD | 	call	#__system___string_cmp
02c08     00 FA 0D F2 | 	cmp	result1, #0 wz
02c0c     38 00 90 5D |  if_ne	jmp	#LR__0162
02c10     33 31 02 F6 | 	mov	local10, local37
02c14     01 30 06 F1 | 	add	local10, #1
02c18     03 30 66 F0 | 	shl	local10, #3
02c1c     35 00 00 FF 
02c20     0C E4 05 F1 | 	add	objptr, ##27148
02c24     F2 30 02 F1 | 	add	local10, objptr
02c28     82 01 00 FF 
02c2c     47 28 06 F6 | 	mov	local06, ##@LR__5094
02c30     18 29 62 FC | 	wrlong	local06, local10
02c34     14 E4 05 F1 | 	add	objptr, #20
02c38     01 00 80 FF 
02c3c     F2 00 68 FC | 	wrlong	##512, objptr
02c40     35 00 00 FF 
02c44     20 E4 85 F1 | 	sub	objptr, ##27168
02c48                 | LR__0162
02c48                 | LR__0163
02c48                 | ' 		
02c48                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02c48                 | ' 
02c48                 | ' if (lp$="mode" orelse lp$="m.") then 
02c48     82 01 00 FF 
02c4c     49 14 06 F6 | 	mov	arg02, ##@LR__5095
02c50     37 13 02 F6 | 	mov	arg01, local41
02c54     D4 DE B1 FD | 	call	#__system___string_cmp
02c58     00 FA 0D F2 | 	cmp	result1, #0 wz
02c5c     18 00 90 AD |  if_e	jmp	#LR__0164
02c60     82 01 00 FF 
02c64     4E 14 06 F6 | 	mov	arg02, ##@LR__5096
02c68     37 13 02 F6 | 	mov	arg01, local41
02c6c     BC DE B1 FD | 	call	#__system___string_cmp
02c70     00 FA 0D F2 | 	cmp	result1, #0 wz
02c74     F4 01 90 5D |  if_ne	jmp	#LR__0170
02c78                 | LR__0164
02c78                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02c78     33 27 02 F6 | 	mov	local05, local37
02c7c     01 26 06 F1 | 	add	local05, #1
02c80     03 26 66 F0 | 	shl	local05, #3
02c84     35 00 00 FF 
02c88     0C E4 05 F1 | 	add	objptr, ##27148
02c8c     F2 26 02 F1 | 	add	local05, objptr
02c90     13 13 02 FB | 	rdlong	arg01, local05
02c94     82 01 00 FF 
02c98     51 14 06 F6 | 	mov	arg02, ##@LR__5097
02c9c     35 00 00 FF 
02ca0     0C E4 85 F1 | 	sub	objptr, ##27148
02ca4     84 DE B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     2C 00 90 5D |  if_ne	jmp	#LR__0165
02cb0     33 31 02 F6 | 	mov	local10, local37
02cb4     01 30 06 F1 | 	add	local10, #1
02cb8     03 30 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 30 02 F1 | 	add	local10, objptr
02cc8     82 01 00 FF 
02ccc     57 28 06 F6 | 	mov	local06, ##@LR__5098
02cd0     18 29 62 FC | 	wrlong	local06, local10
02cd4     35 00 00 FF 
02cd8     0C E4 85 F1 | 	sub	objptr, ##27148
02cdc                 | LR__0165
02cdc                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02cdc     33 27 02 F6 | 	mov	local05, local37
02ce0     01 26 06 F1 | 	add	local05, #1
02ce4     03 26 66 F0 | 	shl	local05, #3
02ce8     35 00 00 FF 
02cec     0C E4 05 F1 | 	add	objptr, ##27148
02cf0     F2 26 02 F1 | 	add	local05, objptr
02cf4     13 13 02 FB | 	rdlong	arg01, local05
02cf8     82 01 00 FF 
02cfc     59 14 06 F6 | 	mov	arg02, ##@LR__5099
02d00     35 00 00 FF 
02d04     0C E4 85 F1 | 	sub	objptr, ##27148
02d08     20 DE B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     2C 00 90 5D |  if_ne	jmp	#LR__0166
02d14     33 31 02 F6 | 	mov	local10, local37
02d18     01 30 06 F1 | 	add	local10, #1
02d1c     03 30 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     0C E4 05 F1 | 	add	objptr, ##27148
02d28     F2 30 02 F1 | 	add	local10, objptr
02d2c     82 01 00 FF 
02d30     62 28 06 F6 | 	mov	local06, ##@LR__5100
02d34     18 29 62 FC | 	wrlong	local06, local10
02d38     35 00 00 FF 
02d3c     0C E4 85 F1 | 	sub	objptr, ##27148
02d40                 | LR__0166
02d40                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02d40     33 27 02 F6 | 	mov	local05, local37
02d44     01 26 06 F1 | 	add	local05, #1
02d48     03 26 66 F0 | 	shl	local05, #3
02d4c     35 00 00 FF 
02d50     0C E4 05 F1 | 	add	objptr, ##27148
02d54     F2 26 02 F1 | 	add	local05, objptr
02d58     13 13 02 FB | 	rdlong	arg01, local05
02d5c     82 01 00 FF 
02d60     64 14 06 F6 | 	mov	arg02, ##@LR__5101
02d64     35 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##27148
02d6c     BC DD B1 FD | 	call	#__system___string_cmp
02d70     00 FA 0D F2 | 	cmp	result1, #0 wz
02d74     2C 00 90 5D |  if_ne	jmp	#LR__0167
02d78     33 31 02 F6 | 	mov	local10, local37
02d7c     01 30 06 F1 | 	add	local10, #1
02d80     03 30 66 F0 | 	shl	local10, #3
02d84     35 00 00 FF 
02d88     0C E4 05 F1 | 	add	objptr, ##27148
02d8c     F2 30 02 F1 | 	add	local10, objptr
02d90     82 01 00 FF 
02d94     6D 28 06 F6 | 	mov	local06, ##@LR__5102
02d98     18 29 62 FC | 	wrlong	local06, local10
02d9c     35 00 00 FF 
02da0     0C E4 85 F1 | 	sub	objptr, ##27148
02da4                 | LR__0167
02da4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02da4     33 27 02 F6 | 	mov	local05, local37
02da8     01 26 06 F1 | 	add	local05, #1
02dac     03 26 66 F0 | 	shl	local05, #3
02db0     35 00 00 FF 
02db4     0C E4 05 F1 | 	add	objptr, ##27148
02db8     F2 26 02 F1 | 	add	local05, objptr
02dbc     13 13 02 FB | 	rdlong	arg01, local05
02dc0     82 01 00 FF 
02dc4     6F 14 06 F6 | 	mov	arg02, ##@LR__5103
02dc8     35 00 00 FF 
02dcc     0C E4 85 F1 | 	sub	objptr, ##27148
02dd0     58 DD B1 FD | 	call	#__system___string_cmp
02dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02ddc     33 31 02 F6 | 	mov	local10, local37
02de0     01 30 06 F1 | 	add	local10, #1
02de4     03 30 66 F0 | 	shl	local10, #3
02de8     35 00 00 FF 
02dec     0C E4 05 F1 | 	add	objptr, ##27148
02df0     F2 30 02 F1 | 	add	local10, objptr
02df4     82 01 00 FF 
02df8     78 28 06 F6 | 	mov	local06, ##@LR__5104
02dfc     18 29 62 FC | 	wrlong	local06, local10
02e00     35 00 00 FF 
02e04     0C E4 85 F1 | 	sub	objptr, ##27148
02e08                 | LR__0168
02e08                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02e08     33 27 02 F6 | 	mov	local05, local37
02e0c     01 26 06 F1 | 	add	local05, #1
02e10     03 26 66 F0 | 	shl	local05, #3
02e14     35 00 00 FF 
02e18     0C E4 05 F1 | 	add	objptr, ##27148
02e1c     F2 26 02 F1 | 	add	local05, objptr
02e20     13 13 02 FB | 	rdlong	arg01, local05
02e24     82 01 00 FF 
02e28     7A 14 06 F6 | 	mov	arg02, ##@LR__5105
02e2c     35 00 00 FF 
02e30     0C E4 85 F1 | 	sub	objptr, ##27148
02e34     F4 DC B1 FD | 	call	#__system___string_cmp
02e38     00 FA 0D F2 | 	cmp	result1, #0 wz
02e3c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02e40     33 31 02 F6 | 	mov	local10, local37
02e44     01 30 06 F1 | 	add	local10, #1
02e48     03 30 66 F0 | 	shl	local10, #3
02e4c     35 00 00 FF 
02e50     0C E4 05 F1 | 	add	objptr, ##27148
02e54     F2 30 02 F1 | 	add	local10, objptr
02e58     82 01 00 FF 
02e5c     7D 28 06 F6 | 	mov	local06, ##@LR__5106
02e60     18 29 62 FC | 	wrlong	local06, local10
02e64     35 00 00 FF 
02e68     0C E4 85 F1 | 	sub	objptr, ##27148
02e6c                 | LR__0169
02e6c                 | LR__0170
02e6c                 | ' 
02e6c                 | ' ' find part types 
02e6c                 | ' 
02e6c                 | ' for i=0 to k-1
02e6c     00 20 06 F6 | 	mov	local02, #0
02e70     1F 71 02 F6 | 	mov	local42, local17
02e74                 | LR__0171
02e74     38 21 52 F2 | 	cmps	local02, local42 wc
02e78     A4 07 90 3D |  if_ae	jmp	#LR__0183
02e7c     10 31 02 F6 | 	mov	local10, local02
02e80     03 30 66 F0 | 	shl	local10, #3
02e84     35 00 00 FF 
02e88     0C E4 05 F1 | 	add	objptr, ##27148
02e8c     F2 30 02 F1 | 	add	local10, objptr
02e90     10 33 02 F6 | 	mov	local11, local02
02e94     19 39 02 F6 | 	mov	local14, local11
02e98     1C 37 02 F6 | 	mov	local13, local14
02e9c     03 36 66 F0 | 	shl	local13, #3
02ea0     F2 36 02 F1 | 	add	local13, objptr
02ea4     1B 13 02 FB | 	rdlong	arg01, local13
02ea8     35 00 00 FF 
02eac     0C E4 85 F1 | 	sub	objptr, ##27148
02eb0     70 15 B0 FD | 	call	#_isseparator
02eb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02eb8     04 30 06 F1 | 	add	local10, #4
02ebc     18 FB 61 FC | 	wrlong	result1, local10
02ec0                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02ec0     10 31 02 F6 | 	mov	local10, local02
02ec4     03 30 66 F0 | 	shl	local10, #3
02ec8     35 00 00 FF 
02ecc     0C E4 05 F1 | 	add	objptr, ##27148
02ed0     F2 30 02 F1 | 	add	local10, objptr
02ed4     04 30 06 F1 | 	add	local10, #4
02ed8     18 35 02 FB | 	rdlong	local12, local10
02edc     01 34 56 F2 | 	cmps	local12, #1 wc
02ee0     35 00 00 FF 
02ee4     0C E4 85 F1 | 	sub	objptr, ##27148
02ee8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02eec     10 31 02 F6 | 	mov	local10, local02
02ef0     03 30 66 F0 | 	shl	local10, #3
02ef4     35 00 00 FF 
02ef8     0C E4 05 F1 | 	add	objptr, ##27148
02efc     F2 30 02 F1 | 	add	local10, objptr
02f00     10 33 02 F6 | 	mov	local11, local02
02f04     19 39 02 F6 | 	mov	local14, local11
02f08     1C 37 02 F6 | 	mov	local13, local14
02f0c     03 36 66 F0 | 	shl	local13, #3
02f10     F2 36 02 F1 | 	add	local13, objptr
02f14     1B 13 02 FB | 	rdlong	arg01, local13
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     4C 0D B0 FD | 	call	#_isoperator
02f24     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f28     04 30 06 F1 | 	add	local10, #4
02f2c     18 FB 61 FC | 	wrlong	result1, local10
02f30                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f30     10 31 02 F6 | 	mov	local10, local02
02f34     03 30 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 30 02 F1 | 	add	local10, objptr
02f44     04 30 06 F1 | 	add	local10, #4
02f48     18 35 02 FB | 	rdlong	local12, local10
02f4c     01 34 56 F2 | 	cmps	local12, #1 wc
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58     BC 06 90 3D |  if_ae	jmp	#LR__0182
02f5c     10 31 02 F6 | 	mov	local10, local02
02f60     03 30 66 F0 | 	shl	local10, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 30 02 F1 | 	add	local10, objptr
02f70     10 33 02 F6 | 	mov	local11, local02
02f74     19 39 02 F6 | 	mov	local14, local11
02f78     1C 37 02 F6 | 	mov	local13, local14
02f7c     03 36 66 F0 | 	shl	local13, #3
02f80     F2 36 02 F1 | 	add	local13, objptr
02f84     1B 13 02 FB | 	rdlong	arg01, local13
02f88     35 00 00 FF 
02f8c     0C E4 85 F1 | 	sub	objptr, ##27148
02f90                 | ' 
02f90                 | ' select case s
02f90     82 01 00 FF 
02f94     52 15 06 F6 | 	mov	arg02, ##@LR__5183
02f98     90 DB B1 FD | 	call	#__system___string_cmp
02f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02fa0     1B FA 05 A6 |  if_e	mov	result1, #27
02fa4     00 FA 05 56 |  if_ne	mov	result1, #0
02fa8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02fac     04 30 06 F1 | 	add	local10, #4
02fb0     18 FB 61 FC | 	wrlong	result1, local10
02fb4                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
02fb4     10 31 02 F6 | 	mov	local10, local02
02fb8     03 30 66 F0 | 	shl	local10, #3
02fbc     35 00 00 FF 
02fc0     0C E4 05 F1 | 	add	objptr, ##27148
02fc4     F2 30 02 F1 | 	add	local10, objptr
02fc8     04 30 06 F1 | 	add	local10, #4
02fcc     18 35 02 FB | 	rdlong	local12, local10
02fd0     01 34 56 F2 | 	cmps	local12, #1 wc
02fd4     35 00 00 FF 
02fd8     0C E4 85 F1 | 	sub	objptr, ##27148
02fdc     38 06 90 3D |  if_ae	jmp	#LR__0182
02fe0     10 31 02 F6 | 	mov	local10, local02
02fe4     03 30 66 F0 | 	shl	local10, #3
02fe8     35 00 00 FF 
02fec     0C E4 05 F1 | 	add	objptr, ##27148
02ff0     F2 30 02 F1 | 	add	local10, objptr
02ff4     10 33 02 F6 | 	mov	local11, local02
02ff8     19 39 02 F6 | 	mov	local14, local11
02ffc     1C 37 02 F6 | 	mov	local13, local14
03000     03 36 66 F0 | 	shl	local13, #3
03004     F2 36 02 F1 | 	add	local13, objptr
03008     1B 13 02 FB | 	rdlong	arg01, local13
0300c     35 00 00 FF 
03010     0C E4 85 F1 | 	sub	objptr, ##27148
03014     0C 16 B0 FD | 	call	#_iscommand
03018     FD FA E1 F8 | 	getbyte	result1, result1, #0
0301c     04 30 06 F1 | 	add	local10, #4
03020     18 FB 61 FC | 	wrlong	result1, local10
03024                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03024     10 31 02 F6 | 	mov	local10, local02
03028     03 30 66 F0 | 	shl	local10, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 30 02 F1 | 	add	local10, objptr
03038     04 30 06 F1 | 	add	local10, #4
0303c     18 35 02 FB | 	rdlong	local12, local10
03040     01 34 56 F2 | 	cmps	local12, #1 wc
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03050     10 31 02 F6 | 	mov	local10, local02
03054     03 30 66 F0 | 	shl	local10, #3
03058     35 00 00 FF 
0305c     0C E4 05 F1 | 	add	objptr, ##27148
03060     F2 30 02 F1 | 	add	local10, objptr
03064     10 33 02 F6 | 	mov	local11, local02
03068     19 39 02 F6 | 	mov	local14, local11
0306c     1C 37 02 F6 | 	mov	local13, local14
03070     03 36 66 F0 | 	shl	local13, #3
03074     F2 54 02 F6 | 	mov	local28, objptr
03078     F2 36 02 F1 | 	add	local13, objptr
0307c     1B 13 02 FB | 	rdlong	arg01, local13
03080     35 00 00 FF 
03084     0C E4 85 F1 | 	sub	objptr, ##27148
03088     D8 24 B0 FD | 	call	#_isfunction
0308c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03090     04 30 06 F1 | 	add	local10, #4
03094     18 FB 61 FC | 	wrlong	result1, local10
03098                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03098     10 31 02 F6 | 	mov	local10, local02
0309c     03 30 66 F0 | 	shl	local10, #3
030a0     35 00 00 FF 
030a4     0C E4 05 F1 | 	add	objptr, ##27148
030a8     F2 30 02 F1 | 	add	local10, objptr
030ac     04 30 06 F1 | 	add	local10, #4
030b0     18 35 02 FB | 	rdlong	local12, local10
030b4     01 34 56 F2 | 	cmps	local12, #1 wc
030b8     35 00 00 FF 
030bc     0C E4 85 F1 | 	sub	objptr, ##27148
030c0     54 05 90 3D |  if_ae	jmp	#LR__0182
030c4     10 31 02 F6 | 	mov	local10, local02
030c8     03 30 66 F0 | 	shl	local10, #3
030cc     35 00 00 FF 
030d0     0C E4 05 F1 | 	add	objptr, ##27148
030d4     F2 30 02 F1 | 	add	local10, objptr
030d8     10 33 02 F6 | 	mov	local11, local02
030dc     19 39 02 F6 | 	mov	local14, local11
030e0     03 38 66 F0 | 	shl	local14, #3
030e4     F2 36 02 F6 | 	mov	local13, objptr
030e8     F2 38 02 F1 | 	add	local14, objptr
030ec     1C 13 02 FB | 	rdlong	arg01, local14
030f0     35 00 00 FF 
030f4     0C E4 85 F1 | 	sub	objptr, ##27148
030f8     BC 0F B0 FD | 	call	#_isnotename
030fc     04 30 06 F1 | 	add	local10, #4
03100     18 FB 61 FC | 	wrlong	result1, local10
03104                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03104                 | ' if lparts(i).token>0 then 
03104     10 31 02 F6 | 	mov	local10, local02
03108     03 30 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 30 02 F1 | 	add	local10, objptr
03118     04 30 06 F1 | 	add	local10, #4
0311c     18 29 02 FB | 	rdlong	local06, local10
03120     01 28 56 F2 | 	cmps	local06, #1 wc
03124     35 00 00 FF 
03128     0C E4 85 F1 | 	sub	objptr, ##27148
0312c     8C 00 90 CD |  if_b	jmp	#LR__0172
03130     10 27 02 F6 | 	mov	local05, local02
03134     03 26 66 F0 | 	shl	local05, #3
03138     35 00 00 FF 
0313c     0C E4 05 F1 | 	add	objptr, ##27148
03140     F2 26 02 F1 | 	add	local05, objptr
03144     04 26 06 F1 | 	add	local05, #4
03148     13 35 02 FB | 	rdlong	local12, local05
0314c     1A 13 02 F6 | 	mov	arg01, local12
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     28 A0 B1 FD | 	call	#_getnoteval
0315c     FD 72 02 F6 | 	mov	local43, result1
03160     10 31 02 F6 | 	mov	local10, local02
03164     03 30 66 F0 | 	shl	local10, #3
03168     35 00 00 FF 
0316c     0C E4 05 F1 | 	add	objptr, ##27148
03170     F2 30 02 F1 | 	add	local10, objptr
03174     39 13 02 F6 | 	mov	arg01, local43
03178     35 00 00 FF 
0317c     0C E4 85 F1 | 	sub	objptr, ##27148
03180     F4 FB B1 FD | 	call	#__system__str_S
03184     18 FB 61 FC | 	wrlong	result1, local10
03188     10 25 02 F6 | 	mov	local04, local02
0318c     12 23 02 F6 | 	mov	local03, local04
03190     11 31 02 F6 | 	mov	local10, local03
03194     03 30 66 F0 | 	shl	local10, #3
03198     35 00 00 FF 
0319c     0C E4 05 F1 | 	add	objptr, ##27148
031a0     F2 30 02 F1 | 	add	local10, objptr
031a4     04 30 06 F1 | 	add	local10, #4
031a8     01 00 80 FF 
031ac     18 05 68 FC | 	wrlong	##514, local10
031b0     35 00 00 FF 
031b4     0C E4 85 F1 | 	sub	objptr, ##27148
031b8     5C 04 90 FD | 	jmp	#LR__0182
031bc                 | LR__0172
031bc     10 31 02 F6 | 	mov	local10, local02
031c0     03 30 66 F0 | 	shl	local10, #3
031c4     35 00 00 FF 
031c8     0C E4 05 F1 | 	add	objptr, ##27148
031cc     F2 30 02 F1 | 	add	local10, objptr
031d0     10 39 02 F6 | 	mov	local14, local02
031d4     03 38 66 F0 | 	shl	local14, #3
031d8     F2 38 02 F1 | 	add	local14, objptr
031dc     1C 13 02 FB | 	rdlong	arg01, local14
031e0     35 00 00 FF 
031e4     0C E4 85 F1 | 	sub	objptr, ##27148
031e8     64 0D B0 FD | 	call	#_ischannel
031ec     04 30 06 F1 | 	add	local10, #4
031f0     18 FB 61 FC | 	wrlong	result1, local10
031f4                 | ' 
031f4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
031f4                 | ' 
031f4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
031f4     10 31 02 F6 | 	mov	local10, local02
031f8     03 30 66 F0 | 	shl	local10, #3
031fc     35 00 00 FF 
03200     0C E4 05 F1 | 	add	objptr, ##27148
03204     F2 30 02 F1 | 	add	local10, objptr
03208     04 30 06 F1 | 	add	local10, #4
0320c     18 29 02 FB | 	rdlong	local06, local10
03210     01 28 56 F2 | 	cmps	local06, #1 wc
03214     35 00 00 FF 
03218     0C E4 85 F1 | 	sub	objptr, ##27148
0321c     74 00 90 CD |  if_b	jmp	#LR__0173
03220     10 31 02 F6 | 	mov	local10, local02
03224     03 30 66 F0 | 	shl	local10, #3
03228     35 00 00 FF 
0322c     0C E4 05 F1 | 	add	objptr, ##27148
03230     F2 30 02 F1 | 	add	local10, objptr
03234     10 33 02 F6 | 	mov	local11, local02
03238     19 39 02 F6 | 	mov	local14, local11
0323c     03 38 66 F0 | 	shl	local14, #3
03240     F2 36 02 F6 | 	mov	local13, objptr
03244     F2 38 02 F1 | 	add	local14, objptr
03248     1C 13 02 FB | 	rdlong	arg01, local14
0324c     01 34 06 F6 | 	mov	local12, #1
03250     01 14 06 F6 | 	mov	arg02, #1
03254     35 00 00 FF 
03258     0C E4 85 F1 | 	sub	objptr, ##27148
0325c     A8 F9 B1 FD | 	call	#__system__Right_S
03260     18 FB 61 FC | 	wrlong	result1, local10
03264     10 25 02 F6 | 	mov	local04, local02
03268     12 23 02 F6 | 	mov	local03, local04
0326c     11 31 02 F6 | 	mov	local10, local03
03270     03 30 66 F0 | 	shl	local10, #3
03274     35 00 00 FF 
03278     0C E4 05 F1 | 	add	objptr, ##27148
0327c     F2 30 02 F1 | 	add	local10, objptr
03280     04 30 06 F1 | 	add	local10, #4
03284     18 59 68 FC | 	wrlong	#44, local10
03288     35 00 00 FF 
0328c     0C E4 85 F1 | 	sub	objptr, ##27148
03290     84 03 90 FD | 	jmp	#LR__0182
03294                 | LR__0173
03294     10 31 02 F6 | 	mov	local10, local02
03298     03 30 66 F0 | 	shl	local10, #3
0329c     35 00 00 FF 
032a0     0C E4 05 F1 | 	add	objptr, ##27148
032a4     F2 30 02 F1 | 	add	local10, objptr
032a8     10 33 02 F6 | 	mov	local11, local02
032ac     19 39 02 F6 | 	mov	local14, local11
032b0     03 38 66 F0 | 	shl	local14, #3
032b4     F2 36 02 F6 | 	mov	local13, objptr
032b8     F2 38 02 F1 | 	add	local14, objptr
032bc     1C 13 02 FB | 	rdlong	arg01, local14
032c0     35 00 00 FF 
032c4     0C E4 85 F1 | 	sub	objptr, ##27148
032c8     6C 0D B0 FD | 	call	#_isconstant
032cc     04 30 06 F1 | 	add	local10, #4
032d0     18 FB 61 FC | 	wrlong	result1, local10
032d4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
032d4     10 31 02 F6 | 	mov	local10, local02
032d8     03 30 66 F0 | 	shl	local10, #3
032dc     35 00 00 FF 
032e0     0C E4 05 F1 | 	add	objptr, ##27148
032e4     F2 30 02 F1 | 	add	local10, objptr
032e8     04 30 06 F1 | 	add	local10, #4
032ec     18 35 02 FB | 	rdlong	local12, local10
032f0     01 34 56 F2 | 	cmps	local12, #1 wc
032f4     35 00 00 FF 
032f8     0C E4 85 F1 | 	sub	objptr, ##27148
032fc     94 00 90 CD |  if_b	jmp	#LR__0174
03300     10 31 02 F6 | 	mov	local10, local02
03304     03 30 66 F0 | 	shl	local10, #3
03308     35 00 00 FF 
0330c     0C E4 05 F1 | 	add	objptr, ##27148
03310     F2 30 02 F1 | 	add	local10, objptr
03314     10 35 02 F6 | 	mov	local12, local02
03318     1A 33 02 F6 | 	mov	local11, local12
0331c     19 39 02 F6 | 	mov	local14, local11
03320     03 38 66 F0 | 	shl	local14, #3
03324     F2 36 02 F6 | 	mov	local13, objptr
03328     F2 38 02 F1 | 	add	local14, objptr
0332c     04 38 06 F1 | 	add	local14, #4
03330     1C 13 02 FB | 	rdlong	arg01, local14
03334     04 38 86 F1 | 	sub	local14, #4
03338     35 00 00 FF 
0333c     0C E4 85 F1 | 	sub	objptr, ##27148
03340     09 13 52 F6 | 	abs	arg01, arg01 wc
03344     1F 74 C6 C9 |  if_b	decod	local44, #31
03348     00 74 06 36 |  if_ae	mov	local44, #0
0334c     64 FF B1 FD | 	call	#__system___float_fromuns
03350     3A FB 61 F5 | 	xor	result1, local44
03354     FD 12 02 F6 | 	mov	arg01, result1
03358     1C FA B1 FD | 	call	#__system__str_S
0335c     18 FB 61 FC | 	wrlong	result1, local10
03360     10 25 02 F6 | 	mov	local04, local02
03364     12 23 02 F6 | 	mov	local03, local04
03368     11 31 02 F6 | 	mov	local10, local03
0336c     03 30 66 F0 | 	shl	local10, #3
03370     35 00 00 FF 
03374     0C E4 05 F1 | 	add	objptr, ##27148
03378     F2 30 02 F1 | 	add	local10, objptr
0337c     04 30 06 F1 | 	add	local10, #4
03380     01 00 80 FF 
03384     18 03 68 FC | 	wrlong	##513, local10
03388     35 00 00 FF 
0338c     0C E4 85 F1 | 	sub	objptr, ##27148
03390     84 02 90 FD | 	jmp	#LR__0182
03394                 | LR__0174
03394     10 27 02 F6 | 	mov	local05, local02
03398     03 26 66 F0 | 	shl	local05, #3
0339c     35 00 00 FF 
033a0     0C E4 05 F1 | 	add	objptr, ##27148
033a4     F2 26 02 F1 | 	add	local05, objptr
033a8     13 13 02 FB | 	rdlong	arg01, local05
033ac     35 00 00 FF 
033b0     0C E4 85 F1 | 	sub	objptr, ##27148
033b4     C0 29 B0 FD | 	call	#_isnum
033b8     FD 76 02 F6 | 	mov	local45, result1
033bc     10 27 02 F6 | 	mov	local05, local02
033c0     03 26 66 F0 | 	shl	local05, #3
033c4     35 00 00 FF 
033c8     0C E4 05 F1 | 	add	objptr, ##27148
033cc     F2 26 02 F1 | 	add	local05, objptr
033d0     13 13 02 FB | 	rdlong	arg01, local05
033d4     35 00 00 FF 
033d8     0C E4 85 F1 | 	sub	objptr, ##27148
033dc     84 2D B0 FD | 	call	#_isint
033e0     FD 78 02 F6 | 	mov	local46, result1
033e4     10 27 02 F6 | 	mov	local05, local02
033e8     03 26 66 F0 | 	shl	local05, #3
033ec     35 00 00 FF 
033f0     0C E4 05 F1 | 	add	objptr, ##27148
033f4     F2 26 02 F1 | 	add	local05, objptr
033f8     13 13 02 FB | 	rdlong	arg01, local05
033fc     35 00 00 FF 
03400     0C E4 85 F1 | 	sub	objptr, ##27148
03404     00 30 B0 FD | 	call	#_isdec
03408     FD 7A 02 F6 | 	mov	local47, result1
0340c                 | ' 
0340c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0340c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0340c     00 76 0E F2 | 	cmp	local45, #0 wz
03410     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03414     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
03418     34 00 90 AD |  if_e	jmp	#LR__0175
0341c     10 25 02 F6 | 	mov	local04, local02
03420     12 23 02 F6 | 	mov	local03, local04
03424     11 31 02 F6 | 	mov	local10, local03
03428     03 30 66 F0 | 	shl	local10, #3
0342c     35 00 00 FF 
03430     0C E4 05 F1 | 	add	objptr, ##27148
03434     F2 30 02 F1 | 	add	local10, objptr
03438     04 30 06 F1 | 	add	local10, #4
0343c     01 00 80 FF 
03440     18 01 68 FC | 	wrlong	##512, local10
03444     35 00 00 FF 
03448     0C E4 85 F1 | 	sub	objptr, ##27148
0344c     C8 01 90 FD | 	jmp	#LR__0182
03450                 | LR__0175
03450                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03450     00 76 0E F2 | 	cmp	local45, #0 wz
03454     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03458     3D 25 22 56 |  if_ne	not	local04, local47
0345c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03460     34 00 90 AD |  if_e	jmp	#LR__0176
03464     10 25 02 F6 | 	mov	local04, local02
03468     12 23 02 F6 | 	mov	local03, local04
0346c     11 31 02 F6 | 	mov	local10, local03
03470     03 30 66 F0 | 	shl	local10, #3
03474     35 00 00 FF 
03478     0C E4 05 F1 | 	add	objptr, ##27148
0347c     F2 30 02 F1 | 	add	local10, objptr
03480     04 30 06 F1 | 	add	local10, #4
03484     01 00 80 FF 
03488     18 03 68 FC | 	wrlong	##513, local10
0348c     35 00 00 FF 
03490     0C E4 85 F1 | 	sub	objptr, ##27148
03494     80 01 90 FD | 	jmp	#LR__0182
03498                 | LR__0176
03498                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03498     00 76 0E F2 | 	cmp	local45, #0 wz
0349c     3C 25 22 56 |  if_ne	not	local04, local46
034a0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
034a4     3D 23 22 56 |  if_ne	not	local03, local47
034a8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
034ac     34 00 90 AD |  if_e	jmp	#LR__0177
034b0     10 25 02 F6 | 	mov	local04, local02
034b4     12 23 02 F6 | 	mov	local03, local04
034b8     11 31 02 F6 | 	mov	local10, local03
034bc     03 30 66 F0 | 	shl	local10, #3
034c0     35 00 00 FF 
034c4     0C E4 05 F1 | 	add	objptr, ##27148
034c8     F2 30 02 F1 | 	add	local10, objptr
034cc     04 30 06 F1 | 	add	local10, #4
034d0     01 00 80 FF 
034d4     18 05 68 FC | 	wrlong	##514, local10
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     34 01 90 FD | 	jmp	#LR__0182
034e4                 | LR__0177
034e4                 | ' 
034e4                 | ' if isstring(lparts(i).part$) then 
034e4     10 27 02 F6 | 	mov	local05, local02
034e8     03 26 66 F0 | 	shl	local05, #3
034ec     35 00 00 FF 
034f0     0C E4 05 F1 | 	add	objptr, ##27148
034f4     F2 26 02 F1 | 	add	local05, objptr
034f8     13 13 02 FB | 	rdlong	arg01, local05
034fc     35 00 00 FF 
03500     0C E4 85 F1 | 	sub	objptr, ##27148
03504     C0 2F B0 FD | 	call	#_isstring
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     A8 00 90 AD |  if_e	jmp	#LR__0180
03510     10 31 02 F6 | 	mov	local10, local02
03514     03 30 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     0C E4 05 F1 | 	add	objptr, ##27148
03520     F2 30 02 F1 | 	add	local10, objptr
03524     04 30 06 F1 | 	add	local10, #4
03528     01 00 80 FF 
0352c     18 07 68 FC | 	wrlong	##515, local10
03530     10 25 02 F6 | 	mov	local04, local02
03534     12 23 02 F6 | 	mov	local03, local04
03538     11 31 02 F6 | 	mov	local10, local03
0353c     03 30 66 F0 | 	shl	local10, #3
03540     F2 30 02 F1 | 	add	local10, objptr
03544     10 39 02 F6 | 	mov	local14, local02
03548     03 38 66 F0 | 	shl	local14, #3
0354c     F2 38 02 F1 | 	add	local14, objptr
03550     1C 29 02 FB | 	rdlong	local06, local14
03554     02 34 06 F6 | 	mov	local12, #2
03558     10 49 02 F6 | 	mov	local22, local02
0355c     24 4B 02 F6 | 	mov	local23, local22
03560     03 4A 66 F0 | 	shl	local23, #3
03564     F2 4C 02 F6 | 	mov	local24, objptr
03568     F2 4A 02 F1 | 	add	local23, objptr
0356c     25 13 02 FB | 	rdlong	arg01, local23
03570     35 00 00 FF 
03574     0C E4 85 F1 | 	sub	objptr, ##27148
03578     09 2B 02 F6 | 	mov	local07, arg01
0357c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03580                 | LR__0178
03580     15 FB C9 FA | 	rdbyte	result1, local07 wz
03584     01 2A 06 51 |  if_ne	add	local07, #1
03588     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0358c                 | LR__0179
0358c     09 2B 82 F1 | 	sub	local07, arg01
03590     15 37 02 F6 | 	mov	local13, local07
03594     1B 39 02 F6 | 	mov	local14, local13
03598     02 38 86 F1 | 	sub	local14, #2
0359c     1C 33 02 F6 | 	mov	local11, local14
035a0     14 13 02 F6 | 	mov	arg01, local06
035a4     1A 15 02 F6 | 	mov	arg02, local12
035a8     19 17 02 F6 | 	mov	arg03, local11
035ac     E8 F6 B1 FD | 	call	#__system__Mid_S
035b0     18 FB 61 FC | 	wrlong	result1, local10
035b4     60 00 90 FD | 	jmp	#LR__0182
035b8                 | LR__0180
035b8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
035b8     10 23 02 F6 | 	mov	local03, local02
035bc     11 27 02 F6 | 	mov	local05, local03
035c0     03 26 66 F0 | 	shl	local05, #3
035c4     35 00 00 FF 
035c8     0C E4 05 F1 | 	add	objptr, ##27148
035cc     F2 26 02 F1 | 	add	local05, objptr
035d0     13 13 02 FB | 	rdlong	arg01, local05
035d4     35 00 00 FF 
035d8     0C E4 85 F1 | 	sub	objptr, ##27148
035dc     24 25 B0 FD | 	call	#_isname
035e0     FD 24 0A F6 | 	mov	local04, result1 wz
035e4     30 00 90 AD |  if_e	jmp	#LR__0181
035e8     10 25 02 F6 | 	mov	local04, local02
035ec     12 23 02 F6 | 	mov	local03, local04
035f0     11 31 02 F6 | 	mov	local10, local03
035f4     03 30 66 F0 | 	shl	local10, #3
035f8     35 00 00 FF 
035fc     0C E4 05 F1 | 	add	objptr, ##27148
03600     F2 30 02 F1 | 	add	local10, objptr
03604     04 30 06 F1 | 	add	local10, #4
03608     01 00 80 FF 
0360c     18 09 68 FC | 	wrlong	##516, local10
03610     35 00 00 FF 
03614     0C E4 85 F1 | 	sub	objptr, ##27148
03618                 | LR__0181
03618                 | LR__0182
03618     01 20 06 F1 | 	add	local02, #1
0361c     54 F8 9F FD | 	jmp	#LR__0171
03620                 | LR__0183
03620     1F 31 02 F6 | 	mov	local10, local17
03624     03 30 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 30 02 F1 | 	add	local10, objptr
03634     04 30 06 F1 | 	add	local10, #4
03638     18 FD 6B FC | 	wrlong	#510, local10
0363c     1F 31 02 F6 | 	mov	local10, local17
03640     03 30 66 F0 | 	shl	local10, #3
03644     F2 26 02 F6 | 	mov	local05, objptr
03648     F2 30 02 F1 | 	add	local10, objptr
0364c     82 01 00 FF 
03650     7F 28 06 F6 | 	mov	local06, ##@LR__5107
03654     18 29 62 FC | 	wrlong	local06, local10
03658     10 00 00 FF 
0365c     54 E4 05 F1 | 	add	objptr, ##8276
03660     F2 3E 62 FC | 	wrlong	local17, objptr
03664     45 00 00 FF 
03668     60 E4 85 F1 | 	sub	objptr, ##35424
0366c                 | ' 
0366c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0366c                 | ' 
0366c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0366c                 | '  
0366c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0366c     82 01 00 FF 
03670     80 30 06 F6 | 	mov	local10, ##@LR__5108
03674     37 13 02 F6 | 	mov	arg01, local41
03678     18 15 02 F6 | 	mov	arg02, local10
0367c     AC D4 B1 FD | 	call	#__system___string_cmp
03680     00 FA 0D F2 | 	cmp	result1, #0 wz
03684     FC 00 90 AD |  if_e	jmp	#LR__0184
03688     82 01 00 FF 
0368c     85 26 06 F6 | 	mov	local05, ##@LR__5109
03690     13 31 02 F6 | 	mov	local10, local05
03694     37 13 02 F6 | 	mov	arg01, local41
03698     18 15 02 F6 | 	mov	arg02, local10
0369c     8C D4 B1 FD | 	call	#__system___string_cmp
036a0     00 FA 0D F2 | 	cmp	result1, #0 wz
036a4     DC 00 90 AD |  if_e	jmp	#LR__0184
036a8     82 01 00 FF 
036ac     8A 28 06 F6 | 	mov	local06, ##@LR__5110
036b0     14 27 02 F6 | 	mov	local05, local06
036b4     37 13 02 F6 | 	mov	arg01, local41
036b8     13 15 02 F6 | 	mov	arg02, local05
036bc     6C D4 B1 FD | 	call	#__system___string_cmp
036c0     FD 30 0A F6 | 	mov	local10, result1 wz
036c4     BC 00 90 AD |  if_e	jmp	#LR__0184
036c8     82 01 00 FF 
036cc     8F 34 06 F6 | 	mov	local12, ##@LR__5111
036d0     1A 29 02 F6 | 	mov	local06, local12
036d4     37 13 02 F6 | 	mov	arg01, local41
036d8     14 15 02 F6 | 	mov	arg02, local06
036dc     4C D4 B1 FD | 	call	#__system___string_cmp
036e0     FD 26 0A F6 | 	mov	local05, result1 wz
036e4     9C 00 90 AD |  if_e	jmp	#LR__0184
036e8     82 01 00 FF 
036ec     93 32 06 F6 | 	mov	local11, ##@LR__5112
036f0     19 35 02 F6 | 	mov	local12, local11
036f4     37 13 02 F6 | 	mov	arg01, local41
036f8     1A 15 02 F6 | 	mov	arg02, local12
036fc     2C D4 B1 FD | 	call	#__system___string_cmp
03700     FD 28 0A F6 | 	mov	local06, result1 wz
03704     7C 00 90 AD |  if_e	jmp	#LR__0184
03708     82 01 00 FF 
0370c     97 38 06 F6 | 	mov	local14, ##@LR__5113
03710     1C 33 02 F6 | 	mov	local11, local14
03714     37 13 02 F6 | 	mov	arg01, local41
03718     19 15 02 F6 | 	mov	arg02, local11
0371c     0C D4 B1 FD | 	call	#__system___string_cmp
03720     FD 34 0A F6 | 	mov	local12, result1 wz
03724     5C 00 90 AD |  if_e	jmp	#LR__0184
03728     82 01 00 FF 
0372c     9A 36 06 F6 | 	mov	local13, ##@LR__5114
03730     1B 39 02 F6 | 	mov	local14, local13
03734     37 13 02 F6 | 	mov	arg01, local41
03738     1C 15 02 F6 | 	mov	arg02, local14
0373c     EC D3 B1 FD | 	call	#__system___string_cmp
03740     FD 32 0A F6 | 	mov	local11, result1 wz
03744     3C 00 90 AD |  if_e	jmp	#LR__0184
03748     82 01 00 FF 
0374c     9E 36 06 F6 | 	mov	local13, ##@LR__5115
03750     37 13 02 F6 | 	mov	arg01, local41
03754     1B 15 02 F6 | 	mov	arg02, local13
03758     D0 D3 B1 FD | 	call	#__system___string_cmp
0375c     FD 38 0A F6 | 	mov	local14, result1 wz
03760     20 00 90 AD |  if_e	jmp	#LR__0184
03764     82 01 00 FF 
03768     A4 48 06 F6 | 	mov	local22, ##@LR__5116
0376c     24 55 02 F6 | 	mov	local28, local22
03770     37 13 02 F6 | 	mov	arg01, local41
03774     2A 15 02 F6 | 	mov	arg02, local28
03778     B0 D3 B1 FD | 	call	#__system___string_cmp
0377c     FD 36 0A F6 | 	mov	local13, result1 wz
03780     84 00 90 5D |  if_ne	jmp	#LR__0185
03784                 | LR__0184
03784     33 55 02 F6 | 	mov	local28, local37
03788     01 54 06 F1 | 	add	local28, #1
0378c     2A 49 02 F6 | 	mov	local22, local28
03790     24 4B 02 F6 | 	mov	local23, local22
03794     03 4A 66 F0 | 	shl	local23, #3
03798     35 00 00 FF 
0379c     0C E4 05 F1 | 	add	objptr, ##27148
037a0     F2 4C 02 F6 | 	mov	local24, objptr
037a4     F2 4A 02 F1 | 	add	local23, objptr
037a8     04 4A 06 F1 | 	add	local23, #4
037ac     25 59 02 FB | 	rdlong	local30, local23
037b0     04 4A 86 F1 | 	sub	local23, #4
037b4     2C 57 02 F6 | 	mov	local29, local30
037b8     01 00 00 FF 
037bc     04 56 0E F2 | 	cmp	local29, ##516 wz
037c0     35 00 00 FF 
037c4     0C E4 85 F1 | 	sub	objptr, ##27148
037c8     3C 00 90 5D |  if_ne	jmp	#LR__0185
037cc     33 31 02 F6 | 	mov	local10, local37
037d0     01 30 06 F1 | 	add	local10, #1
037d4     03 30 66 F0 | 	shl	local10, #3
037d8     35 00 00 FF 
037dc     0C E4 05 F1 | 	add	objptr, ##27148
037e0     F2 26 02 F6 | 	mov	local05, objptr
037e4     F2 30 02 F1 | 	add	local10, objptr
037e8     01 00 00 FF 
037ec     03 28 06 F6 | 	mov	local06, ##515
037f0     04 30 06 F1 | 	add	local10, #4
037f4     01 00 80 FF 
037f8     18 07 68 FC | 	wrlong	##515, local10
037fc     04 30 86 F1 | 	sub	local10, #4
03800     35 00 00 FF 
03804     0C E4 85 F1 | 	sub	objptr, ##27148
03808                 | LR__0185
03808                 | ' 
03808                 | ' ' determine a type of the line and compile it
03808                 | ' 
03808                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03808     35 00 00 FF 
0380c     0C E4 05 F1 | 	add	objptr, ##27148
03810     F2 12 02 FB | 	rdlong	arg01, objptr
03814     35 00 00 FF 
03818     0C E4 85 F1 | 	sub	objptr, ##27148
0381c     E8 2B B0 FD | 	call	#_isdec
03820     00 FA 0D F2 | 	cmp	result1, #0 wz
03824     30 00 90 AD |  if_e	jmp	#LR__0186
03828     35 00 00 FF 
0382c     0C E4 05 F1 | 	add	objptr, ##27148
03830     F2 12 02 FB | 	rdlong	arg01, objptr
03834     35 00 00 FF 
03838     0C E4 85 F1 | 	sub	objptr, ##27148
0383c     00 14 06 F6 | 	mov	arg02, #0
03840     EC 04 B2 FD | 	call	#__system____builtin_atoi
03844     51 00 00 FF 
03848     C0 E5 05 F1 | 	add	objptr, ##41920
0384c     F2 FA 61 FC | 	wrlong	result1, objptr
03850     51 00 00 FF 
03854     C0 E5 85 F1 | 	sub	objptr, ##41920
03858                 | LR__0186
03858                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03858     51 00 00 FF 
0385c     C0 E5 05 F1 | 	add	objptr, ##41920
03860     F2 24 02 FB | 	rdlong	local04, objptr
03864     51 00 00 FF 
03868     C0 E5 85 F1 | 	sub	objptr, ##41920
0386c     01 24 16 F2 | 	cmp	local04, #1 wc
03870     40 00 90 CD |  if_b	jmp	#LR__0187
03874     01 3E 0E F2 | 	cmp	local17, #1 wz
03878     37 00 00 AF 
0387c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03880     F2 26 02 AB |  if_e	rdlong	local05, objptr
03884     37 00 00 AF 
03888     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0388c     13 31 02 A6 |  if_e	mov	local10, local05
03890     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03894     1C 00 90 5D |  if_ne	jmp	#LR__0187
03898     51 00 00 FF 
0389c     C0 E5 05 F1 | 	add	objptr, ##41920
038a0     F2 12 02 FB | 	rdlong	arg01, objptr
038a4     51 00 00 FF 
038a8     C0 E5 85 F1 | 	sub	objptr, ##41920
038ac     7C 2C B0 FD | 	call	#_deleteline
038b0     70 03 90 FD | 	jmp	#LR__0197
038b4                 | LR__0187
038b4                 | ' 
038b4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
038b4     37 00 00 FF 
038b8     24 E4 05 F1 | 	add	objptr, ##28196
038bc     F2 24 0A FB | 	rdlong	local04, objptr wz
038c0     37 00 00 FF 
038c4     24 E4 85 F1 | 	sub	objptr, ##28196
038c8     37 00 00 5F 
038cc     24 E4 05 51 |  if_ne	add	objptr, ##28196
038d0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
038d4     37 00 00 5F 
038d8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
038dc     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
038e0     AC 00 90 5D |  if_ne	jmp	#LR__0189
038e4     35 00 00 FF 
038e8     20 E4 05 F1 | 	add	objptr, ##27168
038ec     F2 34 02 FB | 	rdlong	local12, objptr
038f0     35 00 00 FF 
038f4     20 E4 85 F1 | 	sub	objptr, ##27168
038f8     1B 34 0E F2 | 	cmp	local12, #27 wz
038fc     90 00 90 AD |  if_e	jmp	#LR__0189
03900     51 00 00 FF 
03904     C0 E5 05 F1 | 	add	objptr, ##41920
03908     F2 12 02 FB | 	rdlong	arg01, objptr
0390c     1A 00 00 FF 
03910     9C E5 85 F1 | 	sub	objptr, ##13724
03914     F2 16 02 FB | 	rdlong	arg03, objptr
03918     37 00 00 FF 
0391c     24 E4 85 F1 | 	sub	objptr, ##28196
03920     00 14 06 F6 | 	mov	arg02, #0
03924     A8 3F B0 FD | 	call	#_compile
03928     FD 1E 0A F6 | 	mov	local01, result1 wz
0392c                 | '   err=compile(linenum,0,cont) 
0392c                 | '   if err<>0 then printerror(err): goto 101
0392c     0C 00 90 AD |  if_e	jmp	#LR__0188
03930     0F 13 02 F6 | 	mov	arg01, local01
03934     34 9C B1 FD | 	call	#_printerror
03938     08 03 90 FD | 	jmp	#LR__0198
0393c                 | LR__0188
0393c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0393c     51 00 00 FF 
03940     F4 E5 05 F1 | 	add	objptr, ##41972
03944     F2 12 02 FB | 	rdlong	arg01, objptr
03948     51 00 00 FF 
0394c     F4 E5 85 F1 | 	sub	objptr, ##41972
03950     82 01 00 FF 
03954     A7 14 06 F6 | 	mov	arg02, ##@LR__5117
03958     D0 D1 B1 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     C0 02 90 AD |  if_e	jmp	#LR__0197
03964     51 00 00 FF 
03968     F4 E5 05 F1 | 	add	objptr, ##41972
0396c     F2 24 02 FB | 	rdlong	local04, objptr
03970     1A 00 00 FF 
03974     D8 E5 85 F1 | 	sub	objptr, ##13784
03978     F2 24 62 FC | 	wrlong	local04, objptr
0397c     08 E4 05 F1 | 	add	objptr, #8
03980     F2 08 68 FC | 	wrlong	#4, objptr
03984     37 00 00 FF 
03988     24 E4 85 F1 | 	sub	objptr, ##28196
0398c     54 DD 9F FD | 	jmp	#LR__0070
03990                 | LR__0189
03990                 | '       							
03990                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03990     37 00 00 FF 
03994     24 E4 05 F1 | 	add	objptr, ##28196
03998     F2 24 02 FB | 	rdlong	local04, objptr
0399c     37 00 00 FF 
039a0     24 E4 85 F1 | 	sub	objptr, ##28196
039a4     01 24 0E F2 | 	cmp	local04, #1 wz
039a8     37 00 00 5F 
039ac     24 E4 05 51 |  if_ne	add	objptr, ##28196
039b0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039b4     37 00 00 5F 
039b8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039bc     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
039c0     AC 00 90 5D |  if_ne	jmp	#LR__0191
039c4     35 00 00 FF 
039c8     18 E4 05 F1 | 	add	objptr, ##27160
039cc     F2 34 02 FB | 	rdlong	local12, objptr
039d0     35 00 00 FF 
039d4     18 E4 85 F1 | 	sub	objptr, ##27160
039d8     1B 34 0E F2 | 	cmp	local12, #27 wz
039dc     90 00 90 AD |  if_e	jmp	#LR__0191
039e0     51 00 00 FF 
039e4     C0 E5 05 F1 | 	add	objptr, ##41920
039e8     F2 12 02 FB | 	rdlong	arg01, objptr
039ec     1A 00 00 FF 
039f0     9C E5 85 F1 | 	sub	objptr, ##13724
039f4     F2 16 02 FB | 	rdlong	arg03, objptr
039f8     37 00 00 FF 
039fc     24 E4 85 F1 | 	sub	objptr, ##28196
03a00     00 14 06 F6 | 	mov	arg02, #0
03a04     C8 3E B0 FD | 	call	#_compile
03a08     FD 1E 0A F6 | 	mov	local01, result1 wz
03a0c                 | '   err=compile(linenum,0,cont) 
03a0c                 | '   if err<>0 then printerror(err): goto 101
03a0c     0C 00 90 AD |  if_e	jmp	#LR__0190
03a10     0F 13 02 F6 | 	mov	arg01, local01
03a14     54 9B B1 FD | 	call	#_printerror
03a18     28 02 90 FD | 	jmp	#LR__0198
03a1c                 | LR__0190
03a1c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03a1c     51 00 00 FF 
03a20     F4 E5 05 F1 | 	add	objptr, ##41972
03a24     F2 12 02 FB | 	rdlong	arg01, objptr
03a28     51 00 00 FF 
03a2c     F4 E5 85 F1 | 	sub	objptr, ##41972
03a30     82 01 00 FF 
03a34     A8 14 06 F6 | 	mov	arg02, ##@LR__5118
03a38     F0 D0 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     E0 01 90 AD |  if_e	jmp	#LR__0197
03a44     51 00 00 FF 
03a48     F4 E5 05 F1 | 	add	objptr, ##41972
03a4c     F2 24 02 FB | 	rdlong	local04, objptr
03a50     1A 00 00 FF 
03a54     D8 E5 85 F1 | 	sub	objptr, ##13784
03a58     F2 24 62 FC | 	wrlong	local04, objptr
03a5c     08 E4 05 F1 | 	add	objptr, #8
03a60     F2 08 68 FC | 	wrlong	#4, objptr
03a64     37 00 00 FF 
03a68     24 E4 85 F1 | 	sub	objptr, ##28196
03a6c     74 DC 9F FD | 	jmp	#LR__0070
03a70                 | LR__0191
03a70                 | ' 							 
03a70                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03a70     37 00 00 FF 
03a74     24 E4 05 F1 | 	add	objptr, ##28196
03a78     F2 24 0A FB | 	rdlong	local04, objptr wz
03a7c     37 00 00 FF 
03a80     24 E4 85 F1 | 	sub	objptr, ##28196
03a84     37 00 00 5F 
03a88     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a8c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a90     37 00 00 5F 
03a94     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a98     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03a9c     35 00 00 AF 
03aa0     20 E4 05 A1 |  if_e	add	objptr, ##27168
03aa4     F2 34 02 AB |  if_e	rdlong	local12, objptr
03aa8     35 00 00 AF 
03aac     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03ab0     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03ab4     90 00 90 5D |  if_ne	jmp	#LR__0193
03ab8     51 00 00 FF 
03abc     C0 E5 05 F1 | 	add	objptr, ##41920
03ac0     F2 12 02 FB | 	rdlong	arg01, objptr
03ac4     1A 00 00 FF 
03ac8     9C E5 85 F1 | 	sub	objptr, ##13724
03acc     F2 16 02 FB | 	rdlong	arg03, objptr
03ad0     37 00 00 FF 
03ad4     24 E4 85 F1 | 	sub	objptr, ##28196
03ad8     00 14 06 F6 | 	mov	arg02, #0
03adc     B8 3E B0 FD | 	call	#_compile_assign
03ae0     FD 1E 0A F6 | 	mov	local01, result1 wz
03ae4                 | '   err=compile_assign(linenum,0,cont)
03ae4                 | '   if err<>0 then printerror(err): goto 101
03ae4     0C 00 90 AD |  if_e	jmp	#LR__0192
03ae8     0F 13 02 F6 | 	mov	arg01, local01
03aec     7C 9A B1 FD | 	call	#_printerror
03af0     50 01 90 FD | 	jmp	#LR__0198
03af4                 | LR__0192
03af4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03af4     51 00 00 FF 
03af8     F4 E5 05 F1 | 	add	objptr, ##41972
03afc     F2 12 02 FB | 	rdlong	arg01, objptr
03b00     51 00 00 FF 
03b04     F4 E5 85 F1 | 	sub	objptr, ##41972
03b08     82 01 00 FF 
03b0c     A9 14 06 F6 | 	mov	arg02, ##@LR__5119
03b10     18 D0 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     08 01 90 AD |  if_e	jmp	#LR__0197
03b1c     51 00 00 FF 
03b20     F4 E5 05 F1 | 	add	objptr, ##41972
03b24     F2 24 02 FB | 	rdlong	local04, objptr
03b28     1A 00 00 FF 
03b2c     D8 E5 85 F1 | 	sub	objptr, ##13784
03b30     F2 24 62 FC | 	wrlong	local04, objptr
03b34     08 E4 05 F1 | 	add	objptr, #8
03b38     F2 08 68 FC | 	wrlong	#4, objptr
03b3c     37 00 00 FF 
03b40     24 E4 85 F1 | 	sub	objptr, ##28196
03b44     9C DB 9F FD | 	jmp	#LR__0070
03b48                 | LR__0193
03b48                 | '     							 
03b48                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03b48     37 00 00 FF 
03b4c     24 E4 05 F1 | 	add	objptr, ##28196
03b50     F2 24 02 FB | 	rdlong	local04, objptr
03b54     37 00 00 FF 
03b58     24 E4 85 F1 | 	sub	objptr, ##28196
03b5c     01 24 0E F2 | 	cmp	local04, #1 wz
03b60     37 00 00 5F 
03b64     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b68     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b6c     37 00 00 5F 
03b70     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b74     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03b78     35 00 00 AF 
03b7c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03b80     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b84     35 00 00 AF 
03b88     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03b8c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b90     90 00 90 5D |  if_ne	jmp	#LR__0196
03b94     51 00 00 FF 
03b98     C0 E5 05 F1 | 	add	objptr, ##41920
03b9c     F2 12 02 FB | 	rdlong	arg01, objptr
03ba0     1A 00 00 FF 
03ba4     9C E5 85 F1 | 	sub	objptr, ##13724
03ba8     F2 16 02 FB | 	rdlong	arg03, objptr
03bac     37 00 00 FF 
03bb0     24 E4 85 F1 | 	sub	objptr, ##28196
03bb4     00 14 06 F6 | 	mov	arg02, #0
03bb8     DC 3D B0 FD | 	call	#_compile_assign
03bbc     FD 1E 0A F6 | 	mov	local01, result1 wz
03bc0                 | '   err=compile_assign(linenum,0,cont) 
03bc0                 | '   if err<>0 then printerror(err): goto 101
03bc0     0C 00 90 AD |  if_e	jmp	#LR__0194
03bc4     0F 13 02 F6 | 	mov	arg01, local01
03bc8     A0 99 B1 FD | 	call	#_printerror
03bcc     74 00 90 FD | 	jmp	#LR__0198
03bd0                 | LR__0194
03bd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03bd0     51 00 00 FF 
03bd4     F4 E5 05 F1 | 	add	objptr, ##41972
03bd8     F2 12 02 FB | 	rdlong	arg01, objptr
03bdc     51 00 00 FF 
03be0     F4 E5 85 F1 | 	sub	objptr, ##41972
03be4     82 01 00 FF 
03be8     AA 14 06 F6 | 	mov	arg02, ##@LR__5120
03bec     3C CF B1 FD | 	call	#__system___string_cmp
03bf0     00 FA 4D F2 | 	cmps	result1, #0 wz
03bf4     2C 00 90 AD |  if_e	jmp	#LR__0195
03bf8     51 00 00 FF 
03bfc     F4 E5 05 F1 | 	add	objptr, ##41972
03c00     F2 24 02 FB | 	rdlong	local04, objptr
03c04     1A 00 00 FF 
03c08     D8 E5 85 F1 | 	sub	objptr, ##13784
03c0c     F2 24 62 FC | 	wrlong	local04, objptr
03c10     08 E4 05 F1 | 	add	objptr, #8
03c14     F2 08 68 FC | 	wrlong	#4, objptr
03c18     37 00 00 FF 
03c1c     24 E4 85 F1 | 	sub	objptr, ##28196
03c20     C0 DA 9F FD | 	jmp	#LR__0070
03c24                 | LR__0195
03c24                 | LR__0196
03c24                 | LR__0197
03c24                 | ' 
03c24                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03c24     51 00 00 FF 
03c28     C0 E5 05 F1 | 	add	objptr, ##41920
03c2c     F2 24 0A FB | 	rdlong	local04, objptr wz
03c30     51 00 00 FF 
03c34     C0 E5 85 F1 | 	sub	objptr, ##41920
03c38     28 00 90 5D |  if_ne	jmp	#LR__0199
03c3c     02 12 06 F6 | 	mov	arg01, #2
03c40     DC 74 B0 FD | 	call	#_execute_line
03c44                 | LR__0198
03c44     82 01 00 FF 
03c48     AB 12 06 F6 | 	mov	arg01, ##@LR__5121
03c4c                 | ' 
03c4c                 | ' write(text)
03c4c     98 B9 B1 FD | 	call	#_hg010b_spin2_write
03c50                 | ' crlf
03c50     94 BE B1 FD | 	call	#_hg010b_spin2_crlf
03c54     82 01 00 FF 
03c58     AC 12 06 F6 | 	mov	arg01, ##@LR__5122
03c5c                 | ' 
03c5c                 | ' write(text)
03c5c     88 B9 B1 FD | 	call	#_hg010b_spin2_write
03c60                 | ' crlf
03c60     84 BE B1 FD | 	call	#_hg010b_spin2_crlf
03c64                 | LR__0199
03c64     A7 F0 03 F6 | 	mov	ptra, fp
03c68     B2 00 A0 FD | 	call	#popregs_
03c6c                 | _interpret_ret
03c6c     2D 00 64 FD | 	ret
03c70                 | 
03c70                 | ' 
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' '
03c70                 | ' '                          END OF TOKENIZER MAIN CODE
03c70                 | ' '
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' 
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' 
03c70                 | ' ' Check if the part is an operator, return a token or 0 if not found
03c70                 | ' 
03c70                 | ' function isoperator(s as string) as ubyte
03c70                 | _isoperator
03c70     01 4A 05 F6 | 	mov	COUNT_, #1
03c74     A8 00 A0 FD | 	call	#pushregs_
03c78                 | ' 
03c78                 | ' select case s
03c78     09 1F 02 F6 | 	mov	local01, arg01
03c7c     82 01 00 FF 
03c80     B2 14 06 F6 | 	mov	arg02, ##@LR__5123
03c84     0F 13 02 F6 | 	mov	arg01, local01
03c88     A0 CE B1 FD | 	call	#__system___string_cmp
03c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c90     FC 01 90 AD |  if_e	jmp	#LR__0200
03c94     82 01 00 FF 
03c98     B4 14 06 F6 | 	mov	arg02, ##@LR__5124
03c9c     0F 13 02 F6 | 	mov	arg01, local01
03ca0     88 CE B1 FD | 	call	#__system___string_cmp
03ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca8     EC 01 90 AD |  if_e	jmp	#LR__0201
03cac     82 01 00 FF 
03cb0     B6 14 06 F6 | 	mov	arg02, ##@LR__5125
03cb4     0F 13 02 F6 | 	mov	arg01, local01
03cb8     70 CE B1 FD | 	call	#__system___string_cmp
03cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc0     DC 01 90 AD |  if_e	jmp	#LR__0202
03cc4     82 01 00 FF 
03cc8     B9 14 06 F6 | 	mov	arg02, ##@LR__5126
03ccc     0F 13 02 F6 | 	mov	arg01, local01
03cd0     58 CE B1 FD | 	call	#__system___string_cmp
03cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd8     CC 01 90 AD |  if_e	jmp	#LR__0203
03cdc     82 01 00 FF 
03ce0     BD 14 06 F6 | 	mov	arg02, ##@LR__5127
03ce4     0F 13 02 F6 | 	mov	arg01, local01
03ce8     40 CE B1 FD | 	call	#__system___string_cmp
03cec     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf0     BC 01 90 AD |  if_e	jmp	#LR__0204
03cf4     82 01 00 FF 
03cf8     BF 14 06 F6 | 	mov	arg02, ##@LR__5128
03cfc     0F 13 02 F6 | 	mov	arg01, local01
03d00     28 CE B1 FD | 	call	#__system___string_cmp
03d04     00 FA 0D F2 | 	cmp	result1, #0 wz
03d08     AC 01 90 AD |  if_e	jmp	#LR__0205
03d0c     82 01 00 FF 
03d10     C1 14 06 F6 | 	mov	arg02, ##@LR__5129
03d14     0F 13 02 F6 | 	mov	arg01, local01
03d18     10 CE B1 FD | 	call	#__system___string_cmp
03d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d20     9C 01 90 AD |  if_e	jmp	#LR__0206
03d24     82 01 00 FF 
03d28     C5 14 06 F6 | 	mov	arg02, ##@LR__5130
03d2c     0F 13 02 F6 | 	mov	arg01, local01
03d30     F8 CD B1 FD | 	call	#__system___string_cmp
03d34     00 FA 0D F2 | 	cmp	result1, #0 wz
03d38     8C 01 90 AD |  if_e	jmp	#LR__0207
03d3c     82 01 00 FF 
03d40     C9 14 06 F6 | 	mov	arg02, ##@LR__5131
03d44     0F 13 02 F6 | 	mov	arg01, local01
03d48     E0 CD B1 FD | 	call	#__system___string_cmp
03d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d50     7C 01 90 AD |  if_e	jmp	#LR__0208
03d54     82 01 00 FF 
03d58     CD 14 06 F6 | 	mov	arg02, ##@LR__5132
03d5c     0F 13 02 F6 | 	mov	arg01, local01
03d60     C8 CD B1 FD | 	call	#__system___string_cmp
03d64     00 FA 0D F2 | 	cmp	result1, #0 wz
03d68     6C 01 90 AD |  if_e	jmp	#LR__0209
03d6c     82 01 00 FF 
03d70     D1 14 06 F6 | 	mov	arg02, ##@LR__5133
03d74     0F 13 02 F6 | 	mov	arg01, local01
03d78     B0 CD B1 FD | 	call	#__system___string_cmp
03d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d80     5C 01 90 AD |  if_e	jmp	#LR__0210
03d84     82 01 00 FF 
03d88     D5 14 06 F6 | 	mov	arg02, ##@LR__5134
03d8c     0F 13 02 F6 | 	mov	arg01, local01
03d90     98 CD B1 FD | 	call	#__system___string_cmp
03d94     00 FA 0D F2 | 	cmp	result1, #0 wz
03d98     4C 01 90 AD |  if_e	jmp	#LR__0211
03d9c     82 01 00 FF 
03da0     D7 14 06 F6 | 	mov	arg02, ##@LR__5135
03da4     0F 13 02 F6 | 	mov	arg01, local01
03da8     80 CD B1 FD | 	call	#__system___string_cmp
03dac     00 FA 0D F2 | 	cmp	result1, #0 wz
03db0     3C 01 90 AD |  if_e	jmp	#LR__0212
03db4     82 01 00 FF 
03db8     DB 14 06 F6 | 	mov	arg02, ##@LR__5136
03dbc     0F 13 02 F6 | 	mov	arg01, local01
03dc0     68 CD B1 FD | 	call	#__system___string_cmp
03dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc8     2C 01 90 AD |  if_e	jmp	#LR__0213
03dcc     82 01 00 FF 
03dd0     DD 14 06 F6 | 	mov	arg02, ##@LR__5137
03dd4     0F 13 02 F6 | 	mov	arg01, local01
03dd8     50 CD B1 FD | 	call	#__system___string_cmp
03ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
03de0     1C 01 90 AD |  if_e	jmp	#LR__0214
03de4     82 01 00 FF 
03de8     DF 14 06 F6 | 	mov	arg02, ##@LR__5138
03dec     0F 13 02 F6 | 	mov	arg01, local01
03df0     38 CD B1 FD | 	call	#__system___string_cmp
03df4     00 FA 0D F2 | 	cmp	result1, #0 wz
03df8     0C 01 90 AD |  if_e	jmp	#LR__0215
03dfc     82 01 00 FF 
03e00     E2 14 06 F6 | 	mov	arg02, ##@LR__5139
03e04     0F 13 02 F6 | 	mov	arg01, local01
03e08     20 CD B1 FD | 	call	#__system___string_cmp
03e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e10     FC 00 90 AD |  if_e	jmp	#LR__0216
03e14     82 01 00 FF 
03e18     E5 14 06 F6 | 	mov	arg02, ##@LR__5140
03e1c     0F 13 02 F6 | 	mov	arg01, local01
03e20     08 CD B1 FD | 	call	#__system___string_cmp
03e24     00 FA 0D F2 | 	cmp	result1, #0 wz
03e28     EC 00 90 AD |  if_e	jmp	#LR__0217
03e2c     82 01 00 FF 
03e30     E7 14 06 F6 | 	mov	arg02, ##@LR__5141
03e34     0F 13 02 F6 | 	mov	arg01, local01
03e38     F0 CC B1 FD | 	call	#__system___string_cmp
03e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e40     DC 00 90 AD |  if_e	jmp	#LR__0218
03e44     82 01 00 FF 
03e48     E9 14 06 F6 | 	mov	arg02, ##@LR__5142
03e4c     0F 13 02 F6 | 	mov	arg01, local01
03e50     D8 CC B1 FD | 	call	#__system___string_cmp
03e54     00 FA 0D F2 | 	cmp	result1, #0 wz
03e58     CC 00 90 AD |  if_e	jmp	#LR__0219
03e5c     82 01 00 FF 
03e60     EC 14 06 F6 | 	mov	arg02, ##@LR__5143
03e64     0F 13 02 F6 | 	mov	arg01, local01
03e68     C0 CC B1 FD | 	call	#__system___string_cmp
03e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e70     BC 00 90 AD |  if_e	jmp	#LR__0220
03e74     82 01 00 FF 
03e78     EF 14 06 F6 | 	mov	arg02, ##@LR__5144
03e7c     0F 13 02 F6 | 	mov	arg01, local01
03e80     A8 CC B1 FD | 	call	#__system___string_cmp
03e84     00 FA 0D F2 | 	cmp	result1, #0 wz
03e88     AC 00 90 AD |  if_e	jmp	#LR__0221
03e8c     B0 00 90 FD | 	jmp	#LR__0222
03e90                 | LR__0200
03e90     01 FA 05 F6 | 	mov	result1, #1
03e94     AC 00 90 FD | 	jmp	#LR__0223
03e98                 | LR__0201
03e98     02 FA 05 F6 | 	mov	result1, #2
03e9c     A4 00 90 FD | 	jmp	#LR__0223
03ea0                 | LR__0202
03ea0     03 FA 05 F6 | 	mov	result1, #3
03ea4     9C 00 90 FD | 	jmp	#LR__0223
03ea8                 | LR__0203
03ea8     04 FA 05 F6 | 	mov	result1, #4
03eac     94 00 90 FD | 	jmp	#LR__0223
03eb0                 | LR__0204
03eb0     05 FA 05 F6 | 	mov	result1, #5
03eb4     8C 00 90 FD | 	jmp	#LR__0223
03eb8                 | LR__0205
03eb8     06 FA 05 F6 | 	mov	result1, #6
03ebc     84 00 90 FD | 	jmp	#LR__0223
03ec0                 | LR__0206
03ec0     07 FA 05 F6 | 	mov	result1, #7
03ec4     7C 00 90 FD | 	jmp	#LR__0223
03ec8                 | LR__0207
03ec8     08 FA 05 F6 | 	mov	result1, #8
03ecc     74 00 90 FD | 	jmp	#LR__0223
03ed0                 | LR__0208
03ed0     09 FA 05 F6 | 	mov	result1, #9
03ed4     6C 00 90 FD | 	jmp	#LR__0223
03ed8                 | LR__0209
03ed8     0A FA 05 F6 | 	mov	result1, #10
03edc     64 00 90 FD | 	jmp	#LR__0223
03ee0                 | LR__0210
03ee0     0B FA 05 F6 | 	mov	result1, #11
03ee4     5C 00 90 FD | 	jmp	#LR__0223
03ee8                 | LR__0211
03ee8     0C FA 05 F6 | 	mov	result1, #12
03eec     54 00 90 FD | 	jmp	#LR__0223
03ef0                 | LR__0212
03ef0     0D FA 05 F6 | 	mov	result1, #13
03ef4     4C 00 90 FD | 	jmp	#LR__0223
03ef8                 | LR__0213
03ef8     0E FA 05 F6 | 	mov	result1, #14
03efc     44 00 90 FD | 	jmp	#LR__0223
03f00                 | LR__0214
03f00     1B FA 05 F6 | 	mov	result1, #27
03f04     3C 00 90 FD | 	jmp	#LR__0223
03f08                 | LR__0215
03f08     27 FA 05 F6 | 	mov	result1, #39
03f0c     34 00 90 FD | 	jmp	#LR__0223
03f10                 | LR__0216
03f10     26 FA 05 F6 | 	mov	result1, #38
03f14     2C 00 90 FD | 	jmp	#LR__0223
03f18                 | LR__0217
03f18     10 FA 05 F6 | 	mov	result1, #16
03f1c     24 00 90 FD | 	jmp	#LR__0223
03f20                 | LR__0218
03f20     0F FA 05 F6 | 	mov	result1, #15
03f24     1C 00 90 FD | 	jmp	#LR__0223
03f28                 | LR__0219
03f28     2A FA 05 F6 | 	mov	result1, #42
03f2c     14 00 90 FD | 	jmp	#LR__0223
03f30                 | LR__0220
03f30     28 FA 05 F6 | 	mov	result1, #40
03f34     0C 00 90 FD | 	jmp	#LR__0223
03f38                 | LR__0221
03f38     29 FA 05 F6 | 	mov	result1, #41
03f3c     04 00 90 FD | 	jmp	#LR__0223
03f40                 | LR__0222
03f40     00 FA 05 F6 | 	mov	result1, #0
03f44                 | LR__0223
03f44     A7 F0 03 F6 | 	mov	ptra, fp
03f48     B2 00 A0 FD | 	call	#popregs_
03f4c                 | _isoperator_ret
03f4c     2D 00 64 FD | 	ret
03f50                 | 
03f50                 | ' 
03f50                 | ' ' Check if the part is a channel#, return a token or 0 if not found
03f50                 | ' 
03f50                 | ' function ischannel(s as string) as ulong
03f50                 | _ischannel
03f50     02 4A 05 F6 | 	mov	COUNT_, #2
03f54     A8 00 A0 FD | 	call	#pushregs_
03f58                 | ' if left$(s,1)<>"#" then return 0
03f58     09 1F 02 F6 | 	mov	local01, arg01
03f5c     01 14 06 F6 | 	mov	arg02, #1
03f60     1C EC B1 FD | 	call	#__system__Left_S
03f64     FD 12 02 F6 | 	mov	arg01, result1
03f68     82 01 00 FF 
03f6c     F2 14 06 F6 | 	mov	arg02, ##@LR__5145
03f70     B8 CB B1 FD | 	call	#__system___string_cmp
03f74     00 FA 0D F2 | 	cmp	result1, #0 wz
03f78     00 FA 05 56 |  if_ne	mov	result1, #0
03f7c     AC 00 90 5D |  if_ne	jmp	#LR__0234
03f80                 | ' if len(s)<>2 then return 0
03f80     0F 13 02 F6 | 	mov	arg01, local01
03f84     09 21 02 F6 | 	mov	local02, arg01
03f88     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
03f8c                 | LR__0230
03f8c     10 FB C9 FA | 	rdbyte	result1, local02 wz
03f90     01 20 06 51 |  if_ne	add	local02, #1
03f94     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
03f98                 | LR__0231
03f98     09 21 82 F1 | 	sub	local02, arg01
03f9c     10 FB 01 F6 | 	mov	result1, local02
03fa0     02 FA 0D F2 | 	cmp	result1, #2 wz
03fa4     00 FA 05 56 |  if_ne	mov	result1, #0
03fa8     80 00 90 5D |  if_ne	jmp	#LR__0234
03fac                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     01 14 06 F6 | 	mov	arg02, #1
03fb4     50 EC B1 FD | 	call	#__system__Right_S
03fb8     FD 12 02 F6 | 	mov	arg01, result1
03fbc     82 01 00 FF 
03fc0     F4 14 06 F6 | 	mov	arg02, ##@LR__5146
03fc4     64 CB B1 FD | 	call	#__system___string_cmp
03fc8     00 FA 55 F2 | 	cmps	result1, #0 wc
03fcc     24 00 90 CD |  if_b	jmp	#LR__0232
03fd0     0F 13 02 F6 | 	mov	arg01, local01
03fd4     01 14 06 F6 | 	mov	arg02, #1
03fd8     2C EC B1 FD | 	call	#__system__Right_S
03fdc     FD 12 02 F6 | 	mov	arg01, result1
03fe0     82 01 00 FF 
03fe4     F6 14 06 F6 | 	mov	arg02, ##@LR__5147
03fe8     40 CB B1 FD | 	call	#__system___string_cmp
03fec     01 FA 55 F2 | 	cmps	result1, #1 wc
03ff0     08 00 90 CD |  if_b	jmp	#LR__0233
03ff4                 | LR__0232
03ff4     00 FA 05 F6 | 	mov	result1, #0
03ff8     30 00 90 FD | 	jmp	#LR__0234
03ffc                 | LR__0233
03ffc                 | ' return token_channel+val(right$(s,1))
03ffc     0F 13 02 F6 | 	mov	arg01, local01
04000     01 14 06 F6 | 	mov	arg02, #1
04004     00 EC B1 FD | 	call	#__system__Right_S
04008     FD 12 02 F6 | 	mov	arg01, result1
0400c     B4 FE B1 FD | 	call	#__system____builtin_atof
04010     FD 14 02 F6 | 	mov	arg02, result1
04014     00 18 21 FF 
04018     00 12 06 F6 | 	mov	arg01, ##1110441984
0401c     C8 F2 B1 FD | 	call	#__system___float_add
04020     FD 12 02 F6 | 	mov	arg01, result1
04024     00 14 06 F6 | 	mov	arg02, #0
04028     54 FB B1 FD | 	call	#__system___float_tointeger
0402c                 | LR__0234
0402c     A7 F0 03 F6 | 	mov	ptra, fp
04030     B2 00 A0 FD | 	call	#popregs_
04034                 | _ischannel_ret
04034     2D 00 64 FD | 	ret
04038                 | 
04038                 | ' 
04038                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04038                 | ' ' todo: add spin2/pasm constants for pin control
04038                 | ' 
04038                 | ' function isconstant(s as string) as integer
04038                 | _isconstant
04038     01 4A 05 F6 | 	mov	COUNT_, #1
0403c     A8 00 A0 FD | 	call	#pushregs_
04040                 | ' 
04040                 | ' select case s
04040     09 1F 02 F6 | 	mov	local01, arg01
04044     82 01 00 FF 
04048     F8 14 06 F6 | 	mov	arg02, ##@LR__5148
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     D8 CA B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     34 00 90 AD |  if_e	jmp	#LR__0240
0405c     82 01 00 FF 
04060     FE 14 06 F6 | 	mov	arg02, ##@LR__5149
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     C0 CA B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     24 00 90 AD |  if_e	jmp	#LR__0241
04074     82 01 00 FF 
04078     05 15 06 F6 | 	mov	arg02, ##@LR__5150
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     A8 CA B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     14 00 90 AD |  if_e	jmp	#LR__0242
0408c     18 00 90 FD | 	jmp	#LR__0243
04090                 | LR__0240
04090     01 FA 05 F6 | 	mov	result1, #1
04094     14 00 90 FD | 	jmp	#LR__0244
04098                 | LR__0241
04098     02 FA 05 F6 | 	mov	result1, #2
0409c     0C 00 90 FD | 	jmp	#LR__0244
040a0                 | LR__0242
040a0     04 FA 05 F6 | 	mov	result1, #4
040a4     04 00 90 FD | 	jmp	#LR__0244
040a8                 | LR__0243
040a8     00 FA 05 F6 | 	mov	result1, #0
040ac                 | LR__0244
040ac     A7 F0 03 F6 | 	mov	ptra, fp
040b0     B2 00 A0 FD | 	call	#popregs_
040b4                 | _isconstant_ret
040b4     2D 00 64 FD | 	ret
040b8                 | 
040b8                 | ' 
040b8                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
040b8                 | ' 
040b8                 | ' function isnotename(s as string) as ulong
040b8                 | _isnotename
040b8     07 4A 05 F6 | 	mov	COUNT_, #7
040bc     A8 00 A0 FD | 	call	#pushregs_
040c0                 | ' if left$(s,1)<>"#" then return 0
040c0     09 1F 02 F6 | 	mov	local01, arg01
040c4     01 14 06 F6 | 	mov	arg02, #1
040c8     B4 EA B1 FD | 	call	#__system__Left_S
040cc     FD 12 02 F6 | 	mov	arg01, result1
040d0     82 01 00 FF 
040d4     0D 15 06 F6 | 	mov	arg02, ##@LR__5151
040d8     50 CA B1 FD | 	call	#__system___string_cmp
040dc     00 FA 0D F2 | 	cmp	result1, #0 wz
040e0     00 FA 05 56 |  if_ne	mov	result1, #0
040e4     30 03 90 5D |  if_ne	jmp	#LR__0273
040e8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
040e8     0F 13 02 F6 | 	mov	arg01, local01
040ec     03 14 06 F6 | 	mov	arg02, #3
040f0     01 16 06 F6 | 	mov	arg03, #1
040f4     A0 EB B1 FD | 	call	#__system__Mid_S
040f8     FD 12 02 F6 | 	mov	arg01, result1
040fc     82 01 00 FF 
04100     0F 15 06 F6 | 	mov	arg02, ##@LR__5152
04104     24 CA B1 FD | 	call	#__system___string_cmp
04108     00 FA 0D F2 | 	cmp	result1, #0 wz
0410c     18 00 90 5D |  if_ne	jmp	#LR__0250
04110     0F 13 02 F6 | 	mov	arg01, local01
04114     02 14 06 F6 | 	mov	arg02, #2
04118     02 16 06 F6 | 	mov	arg03, #2
0411c     78 EB B1 FD | 	call	#__system__Mid_S
04120     FD 20 02 F6 | 	mov	local02, result1
04124     14 00 90 FD | 	jmp	#LR__0251
04128                 | LR__0250
04128     0F 13 02 F6 | 	mov	arg01, local01
0412c     02 14 06 F6 | 	mov	arg02, #2
04130     01 16 06 F6 | 	mov	arg03, #1
04134     60 EB B1 FD | 	call	#__system__Mid_S
04138     FD 20 02 F6 | 	mov	local02, result1
0413c                 | LR__0251
0413c                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     09 23 02 F6 | 	mov	local03, arg01
04144     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04148                 | LR__0252
04148     11 FB C9 FA | 	rdbyte	result1, local03 wz
0414c     01 22 06 51 |  if_ne	add	local03, #1
04150     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
04154                 | LR__0253
04154     09 23 82 F1 | 	sub	local03, arg01
04158     11 15 02 F6 | 	mov	arg02, local03
0415c     01 14 86 F1 | 	sub	arg02, #1
04160     0F 13 02 F6 | 	mov	arg01, local01
04164     01 16 06 F6 | 	mov	arg03, #1
04168     2C EB B1 FD | 	call	#__system__Mid_S
0416c     FD 12 02 F6 | 	mov	arg01, result1
04170     82 01 00 FF 
04174     11 15 06 F6 | 	mov	arg02, ##@LR__5153
04178     B0 C9 B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     28 00 90 AD |  if_e	jmp	#LR__0254
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     01 14 06 F6 | 	mov	arg02, #1
0418c     78 EA B1 FD | 	call	#__system__Right_S
04190     FD 12 02 F6 | 	mov	arg01, result1
04194     2C FD B1 FD | 	call	#__system____builtin_atof
04198     FD 12 02 F6 | 	mov	arg01, result1
0419c     00 14 06 F6 | 	mov	arg02, #0
041a0     DC F9 B1 FD | 	call	#__system___float_tointeger
041a4     FD 24 02 F6 | 	mov	local04, result1
041a8     34 00 90 FD | 	jmp	#LR__0255
041ac                 | LR__0254
041ac     0F 13 02 F6 | 	mov	arg01, local01
041b0     01 14 06 F6 | 	mov	arg02, #1
041b4     50 EA B1 FD | 	call	#__system__Right_S
041b8     FD 12 02 F6 | 	mov	arg01, result1
041bc     04 FD B1 FD | 	call	#__system____builtin_atof
041c0     FD 14 02 F6 | 	mov	arg02, result1
041c4     00 C0 5F FF 
041c8     00 12 06 F6 | 	mov	arg01, ##-1082130432
041cc     E8 F4 B1 FD | 	call	#__system___float_mul
041d0     FD 12 02 F6 | 	mov	arg01, result1
041d4     00 14 06 F6 | 	mov	arg02, #0
041d8     A4 F9 B1 FD | 	call	#__system___float_tointeger
041dc     FD 24 02 F6 | 	mov	local04, result1
041e0                 | LR__0255
041e0                 | ' 
041e0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
041e0     00 24 0E F2 | 	cmp	local04, #0 wz
041e4     24 00 90 5D |  if_ne	jmp	#LR__0256
041e8     0F 13 02 F6 | 	mov	arg01, local01
041ec     01 14 06 F6 | 	mov	arg02, #1
041f0     14 EA B1 FD | 	call	#__system__Right_S
041f4     FD 12 02 F6 | 	mov	arg01, result1
041f8     82 01 00 FF 
041fc     13 15 06 F6 | 	mov	arg02, ##@LR__5154
04200     28 C9 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     04 24 06 56 |  if_ne	mov	local04, #4
0420c                 | LR__0256
0420c                 | ' 
0420c                 | ' select case s1
0420c     10 27 02 F6 | 	mov	local05, local02
04210     82 01 00 FF 
04214     15 15 06 F6 | 	mov	arg02, ##@LR__5155
04218     13 13 02 F6 | 	mov	arg01, local05
0421c     0C C9 B1 FD | 	call	#__system___string_cmp
04220     00 FA 0D F2 | 	cmp	result1, #0 wz
04224     24 01 90 AD |  if_e	jmp	#LR__0257
04228     82 01 00 FF 
0422c     17 15 06 F6 | 	mov	arg02, ##@LR__5156
04230     13 13 02 F6 | 	mov	arg01, local05
04234     F4 C8 B1 FD | 	call	#__system___string_cmp
04238     00 FA 0D F2 | 	cmp	result1, #0 wz
0423c     18 01 90 AD |  if_e	jmp	#LR__0258
04240     82 01 00 FF 
04244     1A 15 06 F6 | 	mov	arg02, ##@LR__5157
04248     13 13 02 F6 | 	mov	arg01, local05
0424c     DC C8 B1 FD | 	call	#__system___string_cmp
04250     00 FA 0D F2 | 	cmp	result1, #0 wz
04254     0C 01 90 AD |  if_e	jmp	#LR__0259
04258     82 01 00 FF 
0425c     1C 15 06 F6 | 	mov	arg02, ##@LR__5158
04260     13 13 02 F6 | 	mov	arg01, local05
04264     C4 C8 B1 FD | 	call	#__system___string_cmp
04268     00 FA 0D F2 | 	cmp	result1, #0 wz
0426c     00 01 90 AD |  if_e	jmp	#LR__0260
04270     82 01 00 FF 
04274     1F 15 06 F6 | 	mov	arg02, ##@LR__5159
04278     13 13 02 F6 | 	mov	arg01, local05
0427c     AC C8 B1 FD | 	call	#__system___string_cmp
04280     00 FA 0D F2 | 	cmp	result1, #0 wz
04284     F4 00 90 AD |  if_e	jmp	#LR__0261
04288     82 01 00 FF 
0428c     21 15 06 F6 | 	mov	arg02, ##@LR__5160
04290     13 13 02 F6 | 	mov	arg01, local05
04294     94 C8 B1 FD | 	call	#__system___string_cmp
04298     00 FA 0D F2 | 	cmp	result1, #0 wz
0429c     E8 00 90 AD |  if_e	jmp	#LR__0262
042a0     82 01 00 FF 
042a4     23 15 06 F6 | 	mov	arg02, ##@LR__5161
042a8     13 13 02 F6 | 	mov	arg01, local05
042ac     7C C8 B1 FD | 	call	#__system___string_cmp
042b0     00 FA 0D F2 | 	cmp	result1, #0 wz
042b4     DC 00 90 AD |  if_e	jmp	#LR__0263
042b8     82 01 00 FF 
042bc     26 15 06 F6 | 	mov	arg02, ##@LR__5162
042c0     13 13 02 F6 | 	mov	arg01, local05
042c4     64 C8 B1 FD | 	call	#__system___string_cmp
042c8     00 FA 0D F2 | 	cmp	result1, #0 wz
042cc     D0 00 90 AD |  if_e	jmp	#LR__0264
042d0     82 01 00 FF 
042d4     28 15 06 F6 | 	mov	arg02, ##@LR__5163
042d8     13 13 02 F6 | 	mov	arg01, local05
042dc     4C C8 B1 FD | 	call	#__system___string_cmp
042e0     00 FA 0D F2 | 	cmp	result1, #0 wz
042e4     C4 00 90 AD |  if_e	jmp	#LR__0265
042e8     82 01 00 FF 
042ec     2B 15 06 F6 | 	mov	arg02, ##@LR__5164
042f0     13 13 02 F6 | 	mov	arg01, local05
042f4     34 C8 B1 FD | 	call	#__system___string_cmp
042f8     00 FA 0D F2 | 	cmp	result1, #0 wz
042fc     B8 00 90 AD |  if_e	jmp	#LR__0266
04300     82 01 00 FF 
04304     2D 15 06 F6 | 	mov	arg02, ##@LR__5165
04308     13 13 02 F6 | 	mov	arg01, local05
0430c     1C C8 B1 FD | 	call	#__system___string_cmp
04310     00 FA 0D F2 | 	cmp	result1, #0 wz
04314     AC 00 90 AD |  if_e	jmp	#LR__0267
04318     82 01 00 FF 
0431c     30 15 06 F6 | 	mov	arg02, ##@LR__5166
04320     13 13 02 F6 | 	mov	arg01, local05
04324     04 C8 B1 FD | 	call	#__system___string_cmp
04328     00 FA 0D F2 | 	cmp	result1, #0 wz
0432c     A0 00 90 AD |  if_e	jmp	#LR__0268
04330     82 01 00 FF 
04334     32 15 06 F6 | 	mov	arg02, ##@LR__5167
04338     13 13 02 F6 | 	mov	arg01, local05
0433c     EC C7 B1 FD | 	call	#__system___string_cmp
04340     00 FA 0D F2 | 	cmp	result1, #0 wz
04344     94 00 90 AD |  if_e	jmp	#LR__0269
04348     9C 00 90 FD | 	jmp	#LR__0270
0434c                 | LR__0257
0434c     01 00 00 FF 
04350     00 29 06 F6 | 	mov	local06, ##768
04354     98 00 90 FD | 	jmp	#LR__0271
04358                 | LR__0258
04358     01 00 00 FF 
0435c     01 29 06 F6 | 	mov	local06, ##769
04360     8C 00 90 FD | 	jmp	#LR__0271
04364                 | LR__0259
04364     01 00 00 FF 
04368     02 29 06 F6 | 	mov	local06, ##770
0436c     80 00 90 FD | 	jmp	#LR__0271
04370                 | LR__0260
04370     01 00 00 FF 
04374     03 29 06 F6 | 	mov	local06, ##771
04378     74 00 90 FD | 	jmp	#LR__0271
0437c                 | LR__0261
0437c     01 00 00 FF 
04380     04 29 06 F6 | 	mov	local06, ##772
04384     68 00 90 FD | 	jmp	#LR__0271
04388                 | LR__0262
04388     01 00 00 FF 
0438c     05 29 06 F6 | 	mov	local06, ##773
04390     5C 00 90 FD | 	jmp	#LR__0271
04394                 | LR__0263
04394     01 00 00 FF 
04398     06 29 06 F6 | 	mov	local06, ##774
0439c     50 00 90 FD | 	jmp	#LR__0271
043a0                 | LR__0264
043a0     01 00 00 FF 
043a4     07 29 06 F6 | 	mov	local06, ##775
043a8     44 00 90 FD | 	jmp	#LR__0271
043ac                 | LR__0265
043ac     01 00 00 FF 
043b0     08 29 06 F6 | 	mov	local06, ##776
043b4     38 00 90 FD | 	jmp	#LR__0271
043b8                 | LR__0266
043b8     01 00 00 FF 
043bc     09 29 06 F6 | 	mov	local06, ##777
043c0     2C 00 90 FD | 	jmp	#LR__0271
043c4                 | LR__0267
043c4     01 00 00 FF 
043c8     0A 29 06 F6 | 	mov	local06, ##778
043cc     20 00 90 FD | 	jmp	#LR__0271
043d0                 | LR__0268
043d0     01 00 00 FF 
043d4     0B 29 06 F6 | 	mov	local06, ##779
043d8     14 00 90 FD | 	jmp	#LR__0271
043dc                 | LR__0269
043dc     01 00 00 FF 
043e0     0B 29 06 F6 | 	mov	local06, ##779
043e4     08 00 90 FD | 	jmp	#LR__0271
043e8                 | LR__0270
043e8     00 FA 05 F6 | 	mov	result1, #0
043ec     28 00 90 FD | 	jmp	#LR__0273
043f0                 | LR__0271
043f0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
043f0     FF FF 7F FF 
043f4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
043f8     18 00 90 CD |  if_b	jmp	#LR__0272
043fc     0A 24 56 F2 | 	cmps	local04, #10 wc
04400     12 2B 02 C6 |  if_b	mov	local07, local04
04404     01 2A 66 C0 |  if_b	shl	local07, #1
04408     12 2B 02 C1 |  if_b	add	local07, local04
0440c     02 2A 66 C0 |  if_b	shl	local07, #2
04410     15 29 02 C1 |  if_b	add	local06, local07
04414                 | LR__0272
04414                 | ' return token
04414     14 FB 01 F6 | 	mov	result1, local06
04418                 | LR__0273
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _isnotename_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' ' Check if the part is a separator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isseparator(s as string) as ubyte
04424                 | _isseparator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 1F 02 F6 | 	mov	local01, arg01
04430     82 01 00 FF 
04434     34 15 06 F6 | 	mov	arg02, ##@LR__5168
04438     0F 13 02 F6 | 	mov	arg01, local01
0443c     EC C6 B1 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     54 01 90 AD |  if_e	jmp	#LR__0280
04448     82 01 00 FF 
0444c     36 15 06 F6 | 	mov	arg02, ##@LR__5169
04450     0F 13 02 F6 | 	mov	arg01, local01
04454     D4 C6 B1 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     44 01 90 AD |  if_e	jmp	#LR__0281
04460     82 01 00 FF 
04464     38 15 06 F6 | 	mov	arg02, ##@LR__5170
04468     0F 13 02 F6 | 	mov	arg01, local01
0446c     BC C6 B1 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     34 01 90 AD |  if_e	jmp	#LR__0282
04478     82 01 00 FF 
0447c     3A 15 06 F6 | 	mov	arg02, ##@LR__5171
04480     0F 13 02 F6 | 	mov	arg01, local01
04484     A4 C6 B1 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     24 01 90 AD |  if_e	jmp	#LR__0283
04490     82 01 00 FF 
04494     3C 15 06 F6 | 	mov	arg02, ##@LR__5172
04498     0F 13 02 F6 | 	mov	arg01, local01
0449c     8C C6 B1 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     14 01 90 AD |  if_e	jmp	#LR__0284
044a8     82 01 00 FF 
044ac     3E 15 06 F6 | 	mov	arg02, ##@LR__5173
044b0     0F 13 02 F6 | 	mov	arg01, local01
044b4     74 C6 B1 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     04 01 90 AD |  if_e	jmp	#LR__0285
044c0     82 01 00 FF 
044c4     40 15 06 F6 | 	mov	arg02, ##@LR__5174
044c8     0F 13 02 F6 | 	mov	arg01, local01
044cc     5C C6 B1 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     F4 00 90 AD |  if_e	jmp	#LR__0286
044d8     82 01 00 FF 
044dc     42 15 06 F6 | 	mov	arg02, ##@LR__5175
044e0     0F 13 02 F6 | 	mov	arg01, local01
044e4     44 C6 B1 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     E4 00 90 AD |  if_e	jmp	#LR__0287
044f0     82 01 00 FF 
044f4     44 15 06 F6 | 	mov	arg02, ##@LR__5176
044f8     0F 13 02 F6 | 	mov	arg01, local01
044fc     2C C6 B1 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     D4 00 90 AD |  if_e	jmp	#LR__0288
04508     82 01 00 FF 
0450c     46 15 06 F6 | 	mov	arg02, ##@LR__5177
04510     0F 13 02 F6 | 	mov	arg01, local01
04514     14 C6 B1 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     C4 00 90 AD |  if_e	jmp	#LR__0289
04520     82 01 00 FF 
04524     48 15 06 F6 | 	mov	arg02, ##@LR__5178
04528     0F 13 02 F6 | 	mov	arg01, local01
0452c     FC C5 B1 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     B4 00 90 AD |  if_e	jmp	#LR__0290
04538     82 01 00 FF 
0453c     4A 15 06 F6 | 	mov	arg02, ##@LR__5179
04540     0F 13 02 F6 | 	mov	arg01, local01
04544     E4 C5 B1 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     A4 00 90 AD |  if_e	jmp	#LR__0291
04550     82 01 00 FF 
04554     4C 15 06 F6 | 	mov	arg02, ##@LR__5180
04558     0F 13 02 F6 | 	mov	arg01, local01
0455c     CC C5 B1 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     94 00 90 AD |  if_e	jmp	#LR__0292
04568     82 01 00 FF 
0456c     4E 15 06 F6 | 	mov	arg02, ##@LR__5181
04570     0F 13 02 F6 | 	mov	arg01, local01
04574     B4 C5 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     84 00 90 AD |  if_e	jmp	#LR__0293
04580     82 01 00 FF 
04584     50 15 06 F6 | 	mov	arg02, ##@LR__5182
04588     0F 13 02 F6 | 	mov	arg01, local01
0458c     9C C5 B1 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     74 00 90 AD |  if_e	jmp	#LR__0294
04598     78 00 90 FD | 	jmp	#LR__0295
0459c                 | LR__0280
0459c     01 FA 05 F6 | 	mov	result1, #1
045a0     74 00 90 FD | 	jmp	#LR__0296
045a4                 | LR__0281
045a4     02 FA 05 F6 | 	mov	result1, #2
045a8     6C 00 90 FD | 	jmp	#LR__0296
045ac                 | LR__0282
045ac     1B FA 05 F6 | 	mov	result1, #27
045b0     64 00 90 FD | 	jmp	#LR__0296
045b4                 | LR__0283
045b4     11 FA 05 F6 | 	mov	result1, #17
045b8     5C 00 90 FD | 	jmp	#LR__0296
045bc                 | LR__0284
045bc     05 FA 05 F6 | 	mov	result1, #5
045c0     54 00 90 FD | 	jmp	#LR__0296
045c4                 | LR__0285
045c4     06 FA 05 F6 | 	mov	result1, #6
045c8     4C 00 90 FD | 	jmp	#LR__0296
045cc                 | LR__0286
045cc     12 FA 05 F6 | 	mov	result1, #18
045d0     44 00 90 FD | 	jmp	#LR__0296
045d4                 | LR__0287
045d4     13 FA 05 F6 | 	mov	result1, #19
045d8     3C 00 90 FD | 	jmp	#LR__0296
045dc                 | LR__0288
045dc     0C FA 05 F6 | 	mov	result1, #12
045e0     34 00 90 FD | 	jmp	#LR__0296
045e4                 | LR__0289
045e4     14 FA 05 F6 | 	mov	result1, #20
045e8     2C 00 90 FD | 	jmp	#LR__0296
045ec                 | LR__0290
045ec     15 FA 05 F6 | 	mov	result1, #21
045f0     24 00 90 FD | 	jmp	#LR__0296
045f4                 | LR__0291
045f4     16 FA 05 F6 | 	mov	result1, #22
045f8     1C 00 90 FD | 	jmp	#LR__0296
045fc                 | LR__0292
045fc     FF FB 05 F6 | 	mov	result1, #511
04600     14 00 90 FD | 	jmp	#LR__0296
04604                 | LR__0293
04604     0F FA 05 F6 | 	mov	result1, #15
04608     0C 00 90 FD | 	jmp	#LR__0296
0460c                 | LR__0294
0460c     10 FA 05 F6 | 	mov	result1, #16
04610     04 00 90 FD | 	jmp	#LR__0296
04614                 | LR__0295
04614     00 FA 05 F6 | 	mov	result1, #0
04618                 | LR__0296
04618     A7 F0 03 F6 | 	mov	ptra, fp
0461c     B2 00 A0 FD | 	call	#popregs_
04620                 | _isseparator_ret
04620     2D 00 64 FD | 	ret
04624                 | 
04624                 | ' 
04624                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04624                 | ' 
04624                 | ' function iscommand(s as string) as ubyte
04624                 | _iscommand
04624     01 4A 05 F6 | 	mov	COUNT_, #1
04628     A8 00 A0 FD | 	call	#pushregs_
0462c                 | ' 
0462c                 | ' select case s
0462c     09 1F 02 F6 | 	mov	local01, arg01
04630     82 01 00 FF 
04634     54 15 06 F6 | 	mov	arg02, ##@LR__5184
04638     0F 13 02 F6 | 	mov	arg01, local01
0463c     EC C4 B1 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     44 0B 90 AD |  if_e	jmp	#LR__0300
04648     82 01 00 FF 
0464c     59 15 06 F6 | 	mov	arg02, ##@LR__5185
04650     0F 13 02 F6 | 	mov	arg01, local01
04654     D4 C4 B1 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     34 0B 90 AD |  if_e	jmp	#LR__0301
04660     82 01 00 FF 
04664     5C 15 06 F6 | 	mov	arg02, ##@LR__5186
04668     0F 13 02 F6 | 	mov	arg01, local01
0466c     BC C4 B1 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     24 0B 90 AD |  if_e	jmp	#LR__0302
04678     82 01 00 FF 
0467c     60 15 06 F6 | 	mov	arg02, ##@LR__5187
04680     0F 13 02 F6 | 	mov	arg01, local01
04684     A4 C4 B1 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     14 0B 90 AD |  if_e	jmp	#LR__0303
04690     82 01 00 FF 
04694     65 15 06 F6 | 	mov	arg02, ##@LR__5188
04698     0F 13 02 F6 | 	mov	arg01, local01
0469c     8C C4 B1 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     04 0B 90 AD |  if_e	jmp	#LR__0304
046a8     82 01 00 FF 
046ac     69 15 06 F6 | 	mov	arg02, ##@LR__5189
046b0     0F 13 02 F6 | 	mov	arg01, local01
046b4     74 C4 B1 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     F4 0A 90 AD |  if_e	jmp	#LR__0305
046c0     82 01 00 FF 
046c4     74 15 06 F6 | 	mov	arg02, ##@LR__5190
046c8     0F 13 02 F6 | 	mov	arg01, local01
046cc     5C C4 B1 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     E4 0A 90 AD |  if_e	jmp	#LR__0306
046d8     82 01 00 FF 
046dc     78 15 06 F6 | 	mov	arg02, ##@LR__5191
046e0     0F 13 02 F6 | 	mov	arg01, local01
046e4     44 C4 B1 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     D4 0A 90 AD |  if_e	jmp	#LR__0307
046f0     82 01 00 FF 
046f4     82 15 06 F6 | 	mov	arg02, ##@LR__5192
046f8     0F 13 02 F6 | 	mov	arg01, local01
046fc     2C C4 B1 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     C4 0A 90 AD |  if_e	jmp	#LR__0308
04708     82 01 00 FF 
0470c     86 15 06 F6 | 	mov	arg02, ##@LR__5193
04710     0F 13 02 F6 | 	mov	arg01, local01
04714     14 C4 B1 FD | 	call	#__system___string_cmp
04718     00 FA 0D F2 | 	cmp	result1, #0 wz
0471c     B4 0A 90 AD |  if_e	jmp	#LR__0309
04720     82 01 00 FF 
04724     90 15 06 F6 | 	mov	arg02, ##@LR__5194
04728     0F 13 02 F6 | 	mov	arg01, local01
0472c     FC C3 B1 FD | 	call	#__system___string_cmp
04730     00 FA 0D F2 | 	cmp	result1, #0 wz
04734     A4 0A 90 AD |  if_e	jmp	#LR__0310
04738     82 01 00 FF 
0473c     94 15 06 F6 | 	mov	arg02, ##@LR__5195
04740     0F 13 02 F6 | 	mov	arg01, local01
04744     E4 C3 B1 FD | 	call	#__system___string_cmp
04748     00 FA 0D F2 | 	cmp	result1, #0 wz
0474c     94 0A 90 AD |  if_e	jmp	#LR__0311
04750     82 01 00 FF 
04754     9F 15 06 F6 | 	mov	arg02, ##@LR__5196
04758     0F 13 02 F6 | 	mov	arg01, local01
0475c     CC C3 B1 FD | 	call	#__system___string_cmp
04760     00 FA 0D F2 | 	cmp	result1, #0 wz
04764     84 0A 90 AD |  if_e	jmp	#LR__0312
04768     82 01 00 FF 
0476c     A3 15 06 F6 | 	mov	arg02, ##@LR__5197
04770     0F 13 02 F6 | 	mov	arg01, local01
04774     B4 C3 B1 FD | 	call	#__system___string_cmp
04778     00 FA 0D F2 | 	cmp	result1, #0 wz
0477c     74 0A 90 AD |  if_e	jmp	#LR__0313
04780     82 01 00 FF 
04784     AA 15 06 F6 | 	mov	arg02, ##@LR__5198
04788     0F 13 02 F6 | 	mov	arg01, local01
0478c     9C C3 B1 FD | 	call	#__system___string_cmp
04790     00 FA 0D F2 | 	cmp	result1, #0 wz
04794     64 0A 90 AD |  if_e	jmp	#LR__0314
04798     82 01 00 FF 
0479c     AE 15 06 F6 | 	mov	arg02, ##@LR__5199
047a0     0F 13 02 F6 | 	mov	arg01, local01
047a4     84 C3 B1 FD | 	call	#__system___string_cmp
047a8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ac     54 0A 90 AD |  if_e	jmp	#LR__0315
047b0     82 01 00 FF 
047b4     B4 15 06 F6 | 	mov	arg02, ##@LR__5200
047b8     0F 13 02 F6 | 	mov	arg01, local01
047bc     6C C3 B1 FD | 	call	#__system___string_cmp
047c0     00 FA 0D F2 | 	cmp	result1, #0 wz
047c4     44 0A 90 AD |  if_e	jmp	#LR__0316
047c8     82 01 00 FF 
047cc     BA 15 06 F6 | 	mov	arg02, ##@LR__5201
047d0     0F 13 02 F6 | 	mov	arg01, local01
047d4     54 C3 B1 FD | 	call	#__system___string_cmp
047d8     00 FA 0D F2 | 	cmp	result1, #0 wz
047dc     34 0A 90 AD |  if_e	jmp	#LR__0317
047e0     82 01 00 FF 
047e4     BE 15 06 F6 | 	mov	arg02, ##@LR__5202
047e8     0F 13 02 F6 | 	mov	arg01, local01
047ec     3C C3 B1 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     24 0A 90 AD |  if_e	jmp	#LR__0318
047f8     82 01 00 FF 
047fc     C4 15 06 F6 | 	mov	arg02, ##@LR__5203
04800     0F 13 02 F6 | 	mov	arg01, local01
04804     24 C3 B1 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     14 0A 90 AD |  if_e	jmp	#LR__0319
04810     82 01 00 FF 
04814     C7 15 06 F6 | 	mov	arg02, ##@LR__5204
04818     0F 13 02 F6 | 	mov	arg01, local01
0481c     0C C3 B1 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     04 0A 90 AD |  if_e	jmp	#LR__0320
04828     82 01 00 FF 
0482c     CD 15 06 F6 | 	mov	arg02, ##@LR__5205
04830     0F 13 02 F6 | 	mov	arg01, local01
04834     F4 C2 B1 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     F4 09 90 AD |  if_e	jmp	#LR__0321
04840     82 01 00 FF 
04844     D1 15 06 F6 | 	mov	arg02, ##@LR__5206
04848     0F 13 02 F6 | 	mov	arg01, local01
0484c     DC C2 B1 FD | 	call	#__system___string_cmp
04850     00 FA 0D F2 | 	cmp	result1, #0 wz
04854     E4 09 90 AD |  if_e	jmp	#LR__0322
04858     82 01 00 FF 
0485c     D8 15 06 F6 | 	mov	arg02, ##@LR__5207
04860     0F 13 02 F6 | 	mov	arg01, local01
04864     C4 C2 B1 FD | 	call	#__system___string_cmp
04868     00 FA 0D F2 | 	cmp	result1, #0 wz
0486c     D4 09 90 AD |  if_e	jmp	#LR__0323
04870     82 01 00 FF 
04874     DF 15 06 F6 | 	mov	arg02, ##@LR__5208
04878     0F 13 02 F6 | 	mov	arg01, local01
0487c     AC C2 B1 FD | 	call	#__system___string_cmp
04880     00 FA 0D F2 | 	cmp	result1, #0 wz
04884     C4 09 90 AD |  if_e	jmp	#LR__0324
04888     82 01 00 FF 
0488c     E6 15 06 F6 | 	mov	arg02, ##@LR__5209
04890     0F 13 02 F6 | 	mov	arg01, local01
04894     94 C2 B1 FD | 	call	#__system___string_cmp
04898     00 FA 0D F2 | 	cmp	result1, #0 wz
0489c     B4 09 90 AD |  if_e	jmp	#LR__0325
048a0     82 01 00 FF 
048a4     F0 15 06 F6 | 	mov	arg02, ##@LR__5210
048a8     0F 13 02 F6 | 	mov	arg01, local01
048ac     7C C2 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     A4 09 90 AD |  if_e	jmp	#LR__0326
048b8     82 01 00 FF 
048bc     F4 15 06 F6 | 	mov	arg02, ##@LR__5211
048c0     0F 13 02 F6 | 	mov	arg01, local01
048c4     64 C2 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     94 09 90 AD |  if_e	jmp	#LR__0327
048d0     82 01 00 FF 
048d4     F8 15 06 F6 | 	mov	arg02, ##@LR__5212
048d8     0F 13 02 F6 | 	mov	arg01, local01
048dc     4C C2 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     84 09 90 AD |  if_e	jmp	#LR__0328
048e8     82 01 00 FF 
048ec     FC 15 06 F6 | 	mov	arg02, ##@LR__5213
048f0     0F 13 02 F6 | 	mov	arg01, local01
048f4     34 C2 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     74 09 90 AD |  if_e	jmp	#LR__0329
04900     83 01 00 FF 
04904     00 14 06 F6 | 	mov	arg02, ##@LR__5214
04908     0F 13 02 F6 | 	mov	arg01, local01
0490c     1C C2 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     64 09 90 AD |  if_e	jmp	#LR__0330
04918     83 01 00 FF 
0491c     06 14 06 F6 | 	mov	arg02, ##@LR__5215
04920     0F 13 02 F6 | 	mov	arg01, local01
04924     04 C2 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     54 09 90 AD |  if_e	jmp	#LR__0331
04930     83 01 00 FF 
04934     0B 14 06 F6 | 	mov	arg02, ##@LR__5216
04938     0F 13 02 F6 | 	mov	arg01, local01
0493c     EC C1 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     44 09 90 AD |  if_e	jmp	#LR__0332
04948     83 01 00 FF 
0494c     0F 14 06 F6 | 	mov	arg02, ##@LR__5217
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     D4 C1 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     34 09 90 AD |  if_e	jmp	#LR__0333
04960     83 01 00 FF 
04964     14 14 06 F6 | 	mov	arg02, ##@LR__5218
04968     0F 13 02 F6 | 	mov	arg01, local01
0496c     BC C1 B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     24 09 90 AD |  if_e	jmp	#LR__0334
04978     83 01 00 FF 
0497c     18 14 06 F6 | 	mov	arg02, ##@LR__5219
04980     0F 13 02 F6 | 	mov	arg01, local01
04984     A4 C1 B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     14 09 90 AD |  if_e	jmp	#LR__0335
04990     83 01 00 FF 
04994     1E 14 06 F6 | 	mov	arg02, ##@LR__5220
04998     0F 13 02 F6 | 	mov	arg01, local01
0499c     8C C1 B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     04 09 90 AD |  if_e	jmp	#LR__0336
049a8     83 01 00 FF 
049ac     21 14 06 F6 | 	mov	arg02, ##@LR__5221
049b0     0F 13 02 F6 | 	mov	arg01, local01
049b4     74 C1 B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     F4 08 90 AD |  if_e	jmp	#LR__0337
049c0     83 01 00 FF 
049c4     29 14 06 F6 | 	mov	arg02, ##@LR__5222
049c8     0F 13 02 F6 | 	mov	arg01, local01
049cc     5C C1 B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     E4 08 90 AD |  if_e	jmp	#LR__0338
049d8     83 01 00 FF 
049dc     2D 14 06 F6 | 	mov	arg02, ##@LR__5223
049e0     0F 13 02 F6 | 	mov	arg01, local01
049e4     44 C1 B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     D4 08 90 AD |  if_e	jmp	#LR__0339
049f0     83 01 00 FF 
049f4     32 14 06 F6 | 	mov	arg02, ##@LR__5224
049f8     0F 13 02 F6 | 	mov	arg01, local01
049fc     2C C1 B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     C4 08 90 AD |  if_e	jmp	#LR__0340
04a08     83 01 00 FF 
04a0c     36 14 06 F6 | 	mov	arg02, ##@LR__5225
04a10     0F 13 02 F6 | 	mov	arg01, local01
04a14     14 C1 B1 FD | 	call	#__system___string_cmp
04a18     00 FA 0D F2 | 	cmp	result1, #0 wz
04a1c     B4 08 90 AD |  if_e	jmp	#LR__0341
04a20     83 01 00 FF 
04a24     3B 14 06 F6 | 	mov	arg02, ##@LR__5226
04a28     0F 13 02 F6 | 	mov	arg01, local01
04a2c     FC C0 B1 FD | 	call	#__system___string_cmp
04a30     00 FA 0D F2 | 	cmp	result1, #0 wz
04a34     A4 08 90 AD |  if_e	jmp	#LR__0342
04a38     83 01 00 FF 
04a3c     3F 14 06 F6 | 	mov	arg02, ##@LR__5227
04a40     0F 13 02 F6 | 	mov	arg01, local01
04a44     E4 C0 B1 FD | 	call	#__system___string_cmp
04a48     00 FA 0D F2 | 	cmp	result1, #0 wz
04a4c     94 08 90 AD |  if_e	jmp	#LR__0343
04a50     83 01 00 FF 
04a54     42 14 06 F6 | 	mov	arg02, ##@LR__5228
04a58     0F 13 02 F6 | 	mov	arg01, local01
04a5c     CC C0 B1 FD | 	call	#__system___string_cmp
04a60     00 FA 0D F2 | 	cmp	result1, #0 wz
04a64     84 08 90 AD |  if_e	jmp	#LR__0344
04a68     83 01 00 FF 
04a6c     48 14 06 F6 | 	mov	arg02, ##@LR__5229
04a70     0F 13 02 F6 | 	mov	arg01, local01
04a74     B4 C0 B1 FD | 	call	#__system___string_cmp
04a78     00 FA 0D F2 | 	cmp	result1, #0 wz
04a7c     74 08 90 AD |  if_e	jmp	#LR__0345
04a80     83 01 00 FF 
04a84     4C 14 06 F6 | 	mov	arg02, ##@LR__5230
04a88     0F 13 02 F6 | 	mov	arg01, local01
04a8c     9C C0 B1 FD | 	call	#__system___string_cmp
04a90     00 FA 0D F2 | 	cmp	result1, #0 wz
04a94     64 08 90 AD |  if_e	jmp	#LR__0346
04a98     83 01 00 FF 
04a9c     50 14 06 F6 | 	mov	arg02, ##@LR__5231
04aa0     0F 13 02 F6 | 	mov	arg01, local01
04aa4     84 C0 B1 FD | 	call	#__system___string_cmp
04aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04aac     54 08 90 AD |  if_e	jmp	#LR__0347
04ab0     83 01 00 FF 
04ab4     56 14 06 F6 | 	mov	arg02, ##@LR__5232
04ab8     0F 13 02 F6 | 	mov	arg01, local01
04abc     6C C0 B1 FD | 	call	#__system___string_cmp
04ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac4     44 08 90 AD |  if_e	jmp	#LR__0348
04ac8     83 01 00 FF 
04acc     5B 14 06 F6 | 	mov	arg02, ##@LR__5233
04ad0     0F 13 02 F6 | 	mov	arg01, local01
04ad4     54 C0 B1 FD | 	call	#__system___string_cmp
04ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
04adc     34 08 90 AD |  if_e	jmp	#LR__0349
04ae0     83 01 00 FF 
04ae4     5E 14 06 F6 | 	mov	arg02, ##@LR__5234
04ae8     0F 13 02 F6 | 	mov	arg01, local01
04aec     3C C0 B1 FD | 	call	#__system___string_cmp
04af0     00 FA 0D F2 | 	cmp	result1, #0 wz
04af4     24 08 90 AD |  if_e	jmp	#LR__0350
04af8     83 01 00 FF 
04afc     61 14 06 F6 | 	mov	arg02, ##@LR__5235
04b00     0F 13 02 F6 | 	mov	arg01, local01
04b04     24 C0 B1 FD | 	call	#__system___string_cmp
04b08     00 FA 0D F2 | 	cmp	result1, #0 wz
04b0c     14 08 90 AD |  if_e	jmp	#LR__0351
04b10     83 01 00 FF 
04b14     65 14 06 F6 | 	mov	arg02, ##@LR__5236
04b18     0F 13 02 F6 | 	mov	arg01, local01
04b1c     0C C0 B1 FD | 	call	#__system___string_cmp
04b20     00 FA 0D F2 | 	cmp	result1, #0 wz
04b24     04 08 90 AD |  if_e	jmp	#LR__0352
04b28     83 01 00 FF 
04b2c     68 14 06 F6 | 	mov	arg02, ##@LR__5237
04b30     0F 13 02 F6 | 	mov	arg01, local01
04b34     F4 BF B1 FD | 	call	#__system___string_cmp
04b38     00 FA 0D F2 | 	cmp	result1, #0 wz
04b3c     F4 07 90 AD |  if_e	jmp	#LR__0353
04b40     83 01 00 FF 
04b44     6D 14 06 F6 | 	mov	arg02, ##@LR__5238
04b48     0F 13 02 F6 | 	mov	arg01, local01
04b4c     DC BF B1 FD | 	call	#__system___string_cmp
04b50     00 FA 0D F2 | 	cmp	result1, #0 wz
04b54     E4 07 90 AD |  if_e	jmp	#LR__0354
04b58     83 01 00 FF 
04b5c     70 14 06 F6 | 	mov	arg02, ##@LR__5239
04b60     0F 13 02 F6 | 	mov	arg01, local01
04b64     C4 BF B1 FD | 	call	#__system___string_cmp
04b68     00 FA 0D F2 | 	cmp	result1, #0 wz
04b6c     D4 07 90 AD |  if_e	jmp	#LR__0355
04b70     83 01 00 FF 
04b74     75 14 06 F6 | 	mov	arg02, ##@LR__5240
04b78     0F 13 02 F6 | 	mov	arg01, local01
04b7c     AC BF B1 FD | 	call	#__system___string_cmp
04b80     00 FA 0D F2 | 	cmp	result1, #0 wz
04b84     C4 07 90 AD |  if_e	jmp	#LR__0356
04b88     83 01 00 FF 
04b8c     79 14 06 F6 | 	mov	arg02, ##@LR__5241
04b90     0F 13 02 F6 | 	mov	arg01, local01
04b94     94 BF B1 FD | 	call	#__system___string_cmp
04b98     00 FA 0D F2 | 	cmp	result1, #0 wz
04b9c     B4 07 90 AD |  if_e	jmp	#LR__0357
04ba0     83 01 00 FF 
04ba4     7F 14 06 F6 | 	mov	arg02, ##@LR__5242
04ba8     0F 13 02 F6 | 	mov	arg01, local01
04bac     7C BF B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     A4 07 90 AD |  if_e	jmp	#LR__0358
04bb8     83 01 00 FF 
04bbc     84 14 06 F6 | 	mov	arg02, ##@LR__5243
04bc0     0F 13 02 F6 | 	mov	arg01, local01
04bc4     64 BF B1 FD | 	call	#__system___string_cmp
04bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bcc     94 07 90 AD |  if_e	jmp	#LR__0359
04bd0     83 01 00 FF 
04bd4     87 14 06 F6 | 	mov	arg02, ##@LR__5244
04bd8     0F 13 02 F6 | 	mov	arg01, local01
04bdc     4C BF B1 FD | 	call	#__system___string_cmp
04be0     00 FA 0D F2 | 	cmp	result1, #0 wz
04be4     84 07 90 AD |  if_e	jmp	#LR__0360
04be8     83 01 00 FF 
04bec     8D 14 06 F6 | 	mov	arg02, ##@LR__5245
04bf0     0F 13 02 F6 | 	mov	arg01, local01
04bf4     34 BF B1 FD | 	call	#__system___string_cmp
04bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bfc     74 07 90 AD |  if_e	jmp	#LR__0361
04c00     83 01 00 FF 
04c04     91 14 06 F6 | 	mov	arg02, ##@LR__5246
04c08     0F 13 02 F6 | 	mov	arg01, local01
04c0c     1C BF B1 FD | 	call	#__system___string_cmp
04c10     00 FA 0D F2 | 	cmp	result1, #0 wz
04c14     64 07 90 AD |  if_e	jmp	#LR__0362
04c18     83 01 00 FF 
04c1c     96 14 06 F6 | 	mov	arg02, ##@LR__5247
04c20     0F 13 02 F6 | 	mov	arg01, local01
04c24     04 BF B1 FD | 	call	#__system___string_cmp
04c28     00 FA 0D F2 | 	cmp	result1, #0 wz
04c2c     54 07 90 AD |  if_e	jmp	#LR__0363
04c30     83 01 00 FF 
04c34     99 14 06 F6 | 	mov	arg02, ##@LR__5248
04c38     0F 13 02 F6 | 	mov	arg01, local01
04c3c     EC BE B1 FD | 	call	#__system___string_cmp
04c40     00 FA 0D F2 | 	cmp	result1, #0 wz
04c44     44 07 90 AD |  if_e	jmp	#LR__0364
04c48     83 01 00 FF 
04c4c     9E 14 06 F6 | 	mov	arg02, ##@LR__5249
04c50     0F 13 02 F6 | 	mov	arg01, local01
04c54     D4 BE B1 FD | 	call	#__system___string_cmp
04c58     00 FA 0D F2 | 	cmp	result1, #0 wz
04c5c     34 07 90 AD |  if_e	jmp	#LR__0365
04c60     83 01 00 FF 
04c64     A4 14 06 F6 | 	mov	arg02, ##@LR__5250
04c68     0F 13 02 F6 | 	mov	arg01, local01
04c6c     BC BE B1 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     24 07 90 AD |  if_e	jmp	#LR__0366
04c78     83 01 00 FF 
04c7c     A8 14 06 F6 | 	mov	arg02, ##@LR__5251
04c80     0F 13 02 F6 | 	mov	arg01, local01
04c84     A4 BE B1 FD | 	call	#__system___string_cmp
04c88     00 FA 0D F2 | 	cmp	result1, #0 wz
04c8c     14 07 90 AD |  if_e	jmp	#LR__0367
04c90     83 01 00 FF 
04c94     B1 14 06 F6 | 	mov	arg02, ##@LR__5252
04c98     0F 13 02 F6 | 	mov	arg01, local01
04c9c     8C BE B1 FD | 	call	#__system___string_cmp
04ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca4     04 07 90 AD |  if_e	jmp	#LR__0368
04ca8     83 01 00 FF 
04cac     B7 14 06 F6 | 	mov	arg02, ##@LR__5253
04cb0     0F 13 02 F6 | 	mov	arg01, local01
04cb4     74 BE B1 FD | 	call	#__system___string_cmp
04cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cbc     F4 06 90 AD |  if_e	jmp	#LR__0369
04cc0     83 01 00 FF 
04cc4     BD 14 06 F6 | 	mov	arg02, ##@LR__5254
04cc8     0F 13 02 F6 | 	mov	arg01, local01
04ccc     5C BE B1 FD | 	call	#__system___string_cmp
04cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd4     E4 06 90 AD |  if_e	jmp	#LR__0370
04cd8     83 01 00 FF 
04cdc     C6 14 06 F6 | 	mov	arg02, ##@LR__5255
04ce0     0F 13 02 F6 | 	mov	arg01, local01
04ce4     44 BE B1 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     D4 06 90 AD |  if_e	jmp	#LR__0371
04cf0     83 01 00 FF 
04cf4     D0 14 06 F6 | 	mov	arg02, ##@LR__5256
04cf8     0F 13 02 F6 | 	mov	arg01, local01
04cfc     2C BE B1 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     C4 06 90 AD |  if_e	jmp	#LR__0372
04d08     83 01 00 FF 
04d0c     D9 14 06 F6 | 	mov	arg02, ##@LR__5257
04d10     0F 13 02 F6 | 	mov	arg01, local01
04d14     14 BE B1 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     B4 06 90 AD |  if_e	jmp	#LR__0373
04d20     83 01 00 FF 
04d24     DE 14 06 F6 | 	mov	arg02, ##@LR__5258
04d28     0F 13 02 F6 | 	mov	arg01, local01
04d2c     FC BD B1 FD | 	call	#__system___string_cmp
04d30     00 FA 0D F2 | 	cmp	result1, #0 wz
04d34     A4 06 90 AD |  if_e	jmp	#LR__0374
04d38     83 01 00 FF 
04d3c     E1 14 06 F6 | 	mov	arg02, ##@LR__5259
04d40     0F 13 02 F6 | 	mov	arg01, local01
04d44     E4 BD B1 FD | 	call	#__system___string_cmp
04d48     00 FA 0D F2 | 	cmp	result1, #0 wz
04d4c     94 06 90 AD |  if_e	jmp	#LR__0375
04d50     83 01 00 FF 
04d54     E6 14 06 F6 | 	mov	arg02, ##@LR__5260
04d58     0F 13 02 F6 | 	mov	arg01, local01
04d5c     CC BD B1 FD | 	call	#__system___string_cmp
04d60     00 FA 0D F2 | 	cmp	result1, #0 wz
04d64     84 06 90 AD |  if_e	jmp	#LR__0376
04d68     83 01 00 FF 
04d6c     EA 14 06 F6 | 	mov	arg02, ##@LR__5261
04d70     0F 13 02 F6 | 	mov	arg01, local01
04d74     B4 BD B1 FD | 	call	#__system___string_cmp
04d78     00 FA 0D F2 | 	cmp	result1, #0 wz
04d7c     74 06 90 AD |  if_e	jmp	#LR__0377
04d80     83 01 00 FF 
04d84     EF 14 06 F6 | 	mov	arg02, ##@LR__5262
04d88     0F 13 02 F6 | 	mov	arg01, local01
04d8c     9C BD B1 FD | 	call	#__system___string_cmp
04d90     00 FA 0D F2 | 	cmp	result1, #0 wz
04d94     64 06 90 AD |  if_e	jmp	#LR__0378
04d98     83 01 00 FF 
04d9c     F3 14 06 F6 | 	mov	arg02, ##@LR__5263
04da0     0F 13 02 F6 | 	mov	arg01, local01
04da4     84 BD B1 FD | 	call	#__system___string_cmp
04da8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dac     54 06 90 AD |  if_e	jmp	#LR__0379
04db0     83 01 00 FF 
04db4     FC 14 06 F6 | 	mov	arg02, ##@LR__5264
04db8     0F 13 02 F6 | 	mov	arg01, local01
04dbc     6C BD B1 FD | 	call	#__system___string_cmp
04dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc4     44 06 90 AD |  if_e	jmp	#LR__0380
04dc8     83 01 00 FF 
04dcc     01 15 06 F6 | 	mov	arg02, ##@LR__5265
04dd0     0F 13 02 F6 | 	mov	arg01, local01
04dd4     54 BD B1 FD | 	call	#__system___string_cmp
04dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ddc     34 06 90 AD |  if_e	jmp	#LR__0381
04de0     83 01 00 FF 
04de4     07 15 06 F6 | 	mov	arg02, ##@LR__5266
04de8     0F 13 02 F6 | 	mov	arg01, local01
04dec     3C BD B1 FD | 	call	#__system___string_cmp
04df0     00 FA 0D F2 | 	cmp	result1, #0 wz
04df4     24 06 90 AD |  if_e	jmp	#LR__0382
04df8     83 01 00 FF 
04dfc     09 15 06 F6 | 	mov	arg02, ##@LR__5267
04e00     0F 13 02 F6 | 	mov	arg01, local01
04e04     24 BD B1 FD | 	call	#__system___string_cmp
04e08     00 FA 0D F2 | 	cmp	result1, #0 wz
04e0c     14 06 90 AD |  if_e	jmp	#LR__0383
04e10     83 01 00 FF 
04e14     0D 15 06 F6 | 	mov	arg02, ##@LR__5268
04e18     0F 13 02 F6 | 	mov	arg01, local01
04e1c     0C BD B1 FD | 	call	#__system___string_cmp
04e20     00 FA 0D F2 | 	cmp	result1, #0 wz
04e24     04 06 90 AD |  if_e	jmp	#LR__0384
04e28     83 01 00 FF 
04e2c     11 15 06 F6 | 	mov	arg02, ##@LR__5269
04e30     0F 13 02 F6 | 	mov	arg01, local01
04e34     F4 BC B1 FD | 	call	#__system___string_cmp
04e38     00 FA 0D F2 | 	cmp	result1, #0 wz
04e3c     F4 05 90 AD |  if_e	jmp	#LR__0385
04e40     83 01 00 FF 
04e44     19 15 06 F6 | 	mov	arg02, ##@LR__5270
04e48     0F 13 02 F6 | 	mov	arg01, local01
04e4c     DC BC B1 FD | 	call	#__system___string_cmp
04e50     00 FA 0D F2 | 	cmp	result1, #0 wz
04e54     E4 05 90 AD |  if_e	jmp	#LR__0386
04e58     83 01 00 FF 
04e5c     1D 15 06 F6 | 	mov	arg02, ##@LR__5271
04e60     0F 13 02 F6 | 	mov	arg01, local01
04e64     C4 BC B1 FD | 	call	#__system___string_cmp
04e68     00 FA 0D F2 | 	cmp	result1, #0 wz
04e6c     D4 05 90 AD |  if_e	jmp	#LR__0387
04e70     83 01 00 FF 
04e74     1F 15 06 F6 | 	mov	arg02, ##@LR__5272
04e78     0F 13 02 F6 | 	mov	arg01, local01
04e7c     AC BC B1 FD | 	call	#__system___string_cmp
04e80     00 FA 0D F2 | 	cmp	result1, #0 wz
04e84     C4 05 90 AD |  if_e	jmp	#LR__0388
04e88     83 01 00 FF 
04e8c     26 15 06 F6 | 	mov	arg02, ##@LR__5273
04e90     0F 13 02 F6 | 	mov	arg01, local01
04e94     94 BC B1 FD | 	call	#__system___string_cmp
04e98     00 FA 0D F2 | 	cmp	result1, #0 wz
04e9c     B4 05 90 AD |  if_e	jmp	#LR__0389
04ea0     83 01 00 FF 
04ea4     2A 15 06 F6 | 	mov	arg02, ##@LR__5274
04ea8     0F 13 02 F6 | 	mov	arg01, local01
04eac     7C BC B1 FD | 	call	#__system___string_cmp
04eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb4     A4 05 90 AD |  if_e	jmp	#LR__0390
04eb8     83 01 00 FF 
04ebc     2F 15 06 F6 | 	mov	arg02, ##@LR__5275
04ec0     0F 13 02 F6 | 	mov	arg01, local01
04ec4     64 BC B1 FD | 	call	#__system___string_cmp
04ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ecc     94 05 90 AD |  if_e	jmp	#LR__0391
04ed0     83 01 00 FF 
04ed4     32 15 06 F6 | 	mov	arg02, ##@LR__5276
04ed8     0F 13 02 F6 | 	mov	arg01, local01
04edc     4C BC B1 FD | 	call	#__system___string_cmp
04ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee4     84 05 90 AD |  if_e	jmp	#LR__0392
04ee8     83 01 00 FF 
04eec     3B 15 06 F6 | 	mov	arg02, ##@LR__5277
04ef0     0F 13 02 F6 | 	mov	arg01, local01
04ef4     34 BC B1 FD | 	call	#__system___string_cmp
04ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
04efc     74 05 90 AD |  if_e	jmp	#LR__0393
04f00     83 01 00 FF 
04f04     3F 15 06 F6 | 	mov	arg02, ##@LR__5278
04f08     0F 13 02 F6 | 	mov	arg01, local01
04f0c     1C BC B1 FD | 	call	#__system___string_cmp
04f10     00 FA 0D F2 | 	cmp	result1, #0 wz
04f14     64 05 90 AD |  if_e	jmp	#LR__0394
04f18     83 01 00 FF 
04f1c     46 15 06 F6 | 	mov	arg02, ##@LR__5279
04f20     0F 13 02 F6 | 	mov	arg01, local01
04f24     04 BC B1 FD | 	call	#__system___string_cmp
04f28     00 FA 0D F2 | 	cmp	result1, #0 wz
04f2c     54 05 90 AD |  if_e	jmp	#LR__0395
04f30     83 01 00 FF 
04f34     4A 15 06 F6 | 	mov	arg02, ##@LR__5280
04f38     0F 13 02 F6 | 	mov	arg01, local01
04f3c     EC BB B1 FD | 	call	#__system___string_cmp
04f40     00 FA 0D F2 | 	cmp	result1, #0 wz
04f44     44 05 90 AD |  if_e	jmp	#LR__0396
04f48     83 01 00 FF 
04f4c     51 15 06 F6 | 	mov	arg02, ##@LR__5281
04f50     0F 13 02 F6 | 	mov	arg01, local01
04f54     D4 BB B1 FD | 	call	#__system___string_cmp
04f58     00 FA 0D F2 | 	cmp	result1, #0 wz
04f5c     34 05 90 AD |  if_e	jmp	#LR__0397
04f60     83 01 00 FF 
04f64     55 15 06 F6 | 	mov	arg02, ##@LR__5282
04f68     0F 13 02 F6 | 	mov	arg01, local01
04f6c     BC BB B1 FD | 	call	#__system___string_cmp
04f70     00 FA 0D F2 | 	cmp	result1, #0 wz
04f74     24 05 90 AD |  if_e	jmp	#LR__0398
04f78     83 01 00 FF 
04f7c     5C 15 06 F6 | 	mov	arg02, ##@LR__5283
04f80     0F 13 02 F6 | 	mov	arg01, local01
04f84     A4 BB B1 FD | 	call	#__system___string_cmp
04f88     00 FA 0D F2 | 	cmp	result1, #0 wz
04f8c     14 05 90 AD |  if_e	jmp	#LR__0399
04f90     83 01 00 FF 
04f94     5F 15 06 F6 | 	mov	arg02, ##@LR__5284
04f98     0F 13 02 F6 | 	mov	arg01, local01
04f9c     8C BB B1 FD | 	call	#__system___string_cmp
04fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa4     04 05 90 AD |  if_e	jmp	#LR__0400
04fa8     83 01 00 FF 
04fac     6A 15 06 F6 | 	mov	arg02, ##@LR__5285
04fb0     0F 13 02 F6 | 	mov	arg01, local01
04fb4     74 BB B1 FD | 	call	#__system___string_cmp
04fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fbc     F4 04 90 AD |  if_e	jmp	#LR__0401
04fc0     83 01 00 FF 
04fc4     6E 15 06 F6 | 	mov	arg02, ##@LR__5286
04fc8     0F 13 02 F6 | 	mov	arg01, local01
04fcc     5C BB B1 FD | 	call	#__system___string_cmp
04fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd4     E4 04 90 AD |  if_e	jmp	#LR__0402
04fd8     83 01 00 FF 
04fdc     75 15 06 F6 | 	mov	arg02, ##@LR__5287
04fe0     0F 13 02 F6 | 	mov	arg01, local01
04fe4     44 BB B1 FD | 	call	#__system___string_cmp
04fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fec     D4 04 90 AD |  if_e	jmp	#LR__0403
04ff0     83 01 00 FF 
04ff4     79 15 06 F6 | 	mov	arg02, ##@LR__5288
04ff8     0F 13 02 F6 | 	mov	arg01, local01
04ffc     2C BB B1 FD | 	call	#__system___string_cmp
05000     00 FA 0D F2 | 	cmp	result1, #0 wz
05004     C4 04 90 AD |  if_e	jmp	#LR__0404
05008     83 01 00 FF 
0500c     81 15 06 F6 | 	mov	arg02, ##@LR__5289
05010     0F 13 02 F6 | 	mov	arg01, local01
05014     14 BB B1 FD | 	call	#__system___string_cmp
05018     00 FA 0D F2 | 	cmp	result1, #0 wz
0501c     B4 04 90 AD |  if_e	jmp	#LR__0405
05020     83 01 00 FF 
05024     85 15 06 F6 | 	mov	arg02, ##@LR__5290
05028     0F 13 02 F6 | 	mov	arg01, local01
0502c     FC BA B1 FD | 	call	#__system___string_cmp
05030     00 FA 0D F2 | 	cmp	result1, #0 wz
05034     A4 04 90 AD |  if_e	jmp	#LR__0406
05038     83 01 00 FF 
0503c     8C 15 06 F6 | 	mov	arg02, ##@LR__5291
05040     0F 13 02 F6 | 	mov	arg01, local01
05044     E4 BA B1 FD | 	call	#__system___string_cmp
05048     00 FA 0D F2 | 	cmp	result1, #0 wz
0504c     94 04 90 AD |  if_e	jmp	#LR__0407
05050     83 01 00 FF 
05054     93 15 06 F6 | 	mov	arg02, ##@LR__5292
05058     0F 13 02 F6 | 	mov	arg01, local01
0505c     CC BA B1 FD | 	call	#__system___string_cmp
05060     00 FA 0D F2 | 	cmp	result1, #0 wz
05064     84 04 90 AD |  if_e	jmp	#LR__0408
05068     83 01 00 FF 
0506c     97 15 06 F6 | 	mov	arg02, ##@LR__5293
05070     0F 13 02 F6 | 	mov	arg01, local01
05074     B4 BA B1 FD | 	call	#__system___string_cmp
05078     00 FA 0D F2 | 	cmp	result1, #0 wz
0507c     74 04 90 AD |  if_e	jmp	#LR__0409
05080     83 01 00 FF 
05084     9D 15 06 F6 | 	mov	arg02, ##@LR__5294
05088     0F 13 02 F6 | 	mov	arg01, local01
0508c     9C BA B1 FD | 	call	#__system___string_cmp
05090     00 FA 0D F2 | 	cmp	result1, #0 wz
05094     64 04 90 AD |  if_e	jmp	#LR__0410
05098     83 01 00 FF 
0509c     A1 15 06 F6 | 	mov	arg02, ##@LR__5295
050a0     0F 13 02 F6 | 	mov	arg01, local01
050a4     84 BA B1 FD | 	call	#__system___string_cmp
050a8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ac     54 04 90 AD |  if_e	jmp	#LR__0411
050b0     83 01 00 FF 
050b4     A8 15 06 F6 | 	mov	arg02, ##@LR__5296
050b8     0F 13 02 F6 | 	mov	arg01, local01
050bc     6C BA B1 FD | 	call	#__system___string_cmp
050c0     00 FA 0D F2 | 	cmp	result1, #0 wz
050c4     44 04 90 AD |  if_e	jmp	#LR__0412
050c8     83 01 00 FF 
050cc     AD 15 06 F6 | 	mov	arg02, ##@LR__5297
050d0     0F 13 02 F6 | 	mov	arg01, local01
050d4     54 BA B1 FD | 	call	#__system___string_cmp
050d8     00 FA 0D F2 | 	cmp	result1, #0 wz
050dc     34 04 90 AD |  if_e	jmp	#LR__0413
050e0     83 01 00 FF 
050e4     B2 15 06 F6 | 	mov	arg02, ##@LR__5298
050e8     0F 13 02 F6 | 	mov	arg01, local01
050ec     3C BA B1 FD | 	call	#__system___string_cmp
050f0     00 FA 0D F2 | 	cmp	result1, #0 wz
050f4     24 04 90 AD |  if_e	jmp	#LR__0414
050f8     83 01 00 FF 
050fc     B9 15 06 F6 | 	mov	arg02, ##@LR__5299
05100     0F 13 02 F6 | 	mov	arg01, local01
05104     24 BA B1 FD | 	call	#__system___string_cmp
05108     00 FA 0D F2 | 	cmp	result1, #0 wz
0510c     14 04 90 AD |  if_e	jmp	#LR__0415
05110     83 01 00 FF 
05114     C3 15 06 F6 | 	mov	arg02, ##@LR__5300
05118     0F 13 02 F6 | 	mov	arg01, local01
0511c     0C BA B1 FD | 	call	#__system___string_cmp
05120     00 FA 0D F2 | 	cmp	result1, #0 wz
05124     04 04 90 AD |  if_e	jmp	#LR__0416
05128     83 01 00 FF 
0512c     C7 15 06 F6 | 	mov	arg02, ##@LR__5301
05130     0F 13 02 F6 | 	mov	arg01, local01
05134     F4 B9 B1 FD | 	call	#__system___string_cmp
05138     00 FA 0D F2 | 	cmp	result1, #0 wz
0513c     F4 03 90 AD |  if_e	jmp	#LR__0417
05140     83 01 00 FF 
05144     CF 15 06 F6 | 	mov	arg02, ##@LR__5302
05148     0F 13 02 F6 | 	mov	arg01, local01
0514c     DC B9 B1 FD | 	call	#__system___string_cmp
05150     00 FA 0D F2 | 	cmp	result1, #0 wz
05154     E4 03 90 AD |  if_e	jmp	#LR__0418
05158     83 01 00 FF 
0515c     D3 15 06 F6 | 	mov	arg02, ##@LR__5303
05160     0F 13 02 F6 | 	mov	arg01, local01
05164     C4 B9 B1 FD | 	call	#__system___string_cmp
05168     00 FA 0D F2 | 	cmp	result1, #0 wz
0516c     D4 03 90 AD |  if_e	jmp	#LR__0419
05170     83 01 00 FF 
05174     D9 15 06 F6 | 	mov	arg02, ##@LR__5304
05178     0F 13 02 F6 | 	mov	arg01, local01
0517c     AC B9 B1 FD | 	call	#__system___string_cmp
05180     00 FA 0D F2 | 	cmp	result1, #0 wz
05184     C4 03 90 AD |  if_e	jmp	#LR__0420
05188     C8 03 90 FD | 	jmp	#LR__0421
0518c                 | LR__0300
0518c     5C FA 05 F6 | 	mov	result1, #92
05190     C4 03 90 FD | 	jmp	#LR__0422
05194                 | LR__0301
05194     5C FA 05 F6 | 	mov	result1, #92
05198     BC 03 90 FD | 	jmp	#LR__0422
0519c                 | LR__0302
0519c     47 FA 05 F6 | 	mov	result1, #71
051a0     B4 03 90 FD | 	jmp	#LR__0422
051a4                 | LR__0303
051a4     59 FA 05 F6 | 	mov	result1, #89
051a8     AC 03 90 FD | 	jmp	#LR__0422
051ac                 | LR__0304
051ac     59 FA 05 F6 | 	mov	result1, #89
051b0     A4 03 90 FD | 	jmp	#LR__0422
051b4                 | LR__0305
051b4     AE FA 05 F6 | 	mov	result1, #174
051b8     9C 03 90 FD | 	jmp	#LR__0422
051bc                 | LR__0306
051bc     AE FA 05 F6 | 	mov	result1, #174
051c0     94 03 90 FD | 	jmp	#LR__0422
051c4                 | LR__0307
051c4     B1 FA 05 F6 | 	mov	result1, #177
051c8     8C 03 90 FD | 	jmp	#LR__0422
051cc                 | LR__0308
051cc     B1 FA 05 F6 | 	mov	result1, #177
051d0     84 03 90 FD | 	jmp	#LR__0422
051d4                 | LR__0309
051d4     AF FA 05 F6 | 	mov	result1, #175
051d8     7C 03 90 FD | 	jmp	#LR__0422
051dc                 | LR__0310
051dc     AF FA 05 F6 | 	mov	result1, #175
051e0     74 03 90 FD | 	jmp	#LR__0422
051e4                 | LR__0311
051e4     B0 FA 05 F6 | 	mov	result1, #176
051e8     6C 03 90 FD | 	jmp	#LR__0422
051ec                 | LR__0312
051ec     B0 FA 05 F6 | 	mov	result1, #176
051f0     64 03 90 FD | 	jmp	#LR__0422
051f4                 | LR__0313
051f4     45 FA 05 F6 | 	mov	result1, #69
051f8     5C 03 90 FD | 	jmp	#LR__0422
051fc                 | LR__0314
051fc     45 FA 05 F6 | 	mov	result1, #69
05200     54 03 90 FD | 	jmp	#LR__0422
05204                 | LR__0315
05204     69 FA 05 F6 | 	mov	result1, #105
05208     4C 03 90 FD | 	jmp	#LR__0422
0520c                 | LR__0316
0520c     B4 FA 05 F6 | 	mov	result1, #180
05210     44 03 90 FD | 	jmp	#LR__0422
05214                 | LR__0317
05214     40 FA 05 F6 | 	mov	result1, #64
05218     3C 03 90 FD | 	jmp	#LR__0422
0521c                 | LR__0318
0521c     49 FA 05 F6 | 	mov	result1, #73
05220     34 03 90 FD | 	jmp	#LR__0422
05224                 | LR__0319
05224     49 FA 05 F6 | 	mov	result1, #73
05228     2C 03 90 FD | 	jmp	#LR__0422
0522c                 | LR__0320
0522c     50 FA 05 F6 | 	mov	result1, #80
05230     24 03 90 FD | 	jmp	#LR__0422
05234                 | LR__0321
05234     50 FA 05 F6 | 	mov	result1, #80
05238     1C 03 90 FD | 	jmp	#LR__0422
0523c                 | LR__0322
0523c     68 FA 05 F6 | 	mov	result1, #104
05240     14 03 90 FD | 	jmp	#LR__0422
05244                 | LR__0323
05244     73 FA 05 F6 | 	mov	result1, #115
05248     0C 03 90 FD | 	jmp	#LR__0422
0524c                 | LR__0324
0524c     74 FA 05 F6 | 	mov	result1, #116
05250     04 03 90 FD | 	jmp	#LR__0422
05254                 | LR__0325
05254     6C FA 05 F6 | 	mov	result1, #108
05258     FC 02 90 FD | 	jmp	#LR__0422
0525c                 | LR__0326
0525c     6C FA 05 F6 | 	mov	result1, #108
05260     F4 02 90 FD | 	jmp	#LR__0422
05264                 | LR__0327
05264     89 FA 05 F6 | 	mov	result1, #137
05268     EC 02 90 FD | 	jmp	#LR__0422
0526c                 | LR__0328
0526c     72 FA 05 F6 | 	mov	result1, #114
05270     E4 02 90 FD | 	jmp	#LR__0422
05274                 | LR__0329
05274     5D FA 05 F6 | 	mov	result1, #93
05278     DC 02 90 FD | 	jmp	#LR__0422
0527c                 | LR__0330
0527c     96 FA 05 F6 | 	mov	result1, #150
05280     D4 02 90 FD | 	jmp	#LR__0422
05284                 | LR__0331
05284     43 FA 05 F6 | 	mov	result1, #67
05288     CC 02 90 FD | 	jmp	#LR__0422
0528c                 | LR__0332
0528c     43 FA 05 F6 | 	mov	result1, #67
05290     C4 02 90 FD | 	jmp	#LR__0422
05294                 | LR__0333
05294     5A FA 05 F6 | 	mov	result1, #90
05298     BC 02 90 FD | 	jmp	#LR__0422
0529c                 | LR__0334
0529c     AB FA 05 F6 | 	mov	result1, #171
052a0     B4 02 90 FD | 	jmp	#LR__0422
052a4                 | LR__0335
052a4     BD FA 05 F6 | 	mov	result1, #189
052a8     AC 02 90 FD | 	jmp	#LR__0422
052ac                 | LR__0336
052ac     BD FA 05 F6 | 	mov	result1, #189
052b0     A4 02 90 FD | 	jmp	#LR__0422
052b4                 | LR__0337
052b4     46 FA 05 F6 | 	mov	result1, #70
052b8     9C 02 90 FD | 	jmp	#LR__0422
052bc                 | LR__0338
052bc     46 FA 05 F6 | 	mov	result1, #70
052c0     94 02 90 FD | 	jmp	#LR__0422
052c4                 | LR__0339
052c4     71 FA 05 F6 | 	mov	result1, #113
052c8     8C 02 90 FD | 	jmp	#LR__0422
052cc                 | LR__0340
052cc     71 FA 05 F6 | 	mov	result1, #113
052d0     84 02 90 FD | 	jmp	#LR__0422
052d4                 | LR__0341
052d4     60 FA 05 F6 | 	mov	result1, #96
052d8     7C 02 90 FD | 	jmp	#LR__0422
052dc                 | LR__0342
052dc     4A FA 05 F6 | 	mov	result1, #74
052e0     74 02 90 FD | 	jmp	#LR__0422
052e4                 | LR__0343
052e4     4A FA 05 F6 | 	mov	result1, #74
052e8     6C 02 90 FD | 	jmp	#LR__0422
052ec                 | LR__0344
052ec     48 FA 05 F6 | 	mov	result1, #72
052f0     64 02 90 FD | 	jmp	#LR__0422
052f4                 | LR__0345
052f4     48 FA 05 F6 | 	mov	result1, #72
052f8     5C 02 90 FD | 	jmp	#LR__0422
052fc                 | LR__0346
052fc     BB FA 05 F6 | 	mov	result1, #187
05300     54 02 90 FD | 	jmp	#LR__0422
05304                 | LR__0347
05304     A9 FA 05 F6 | 	mov	result1, #169
05308     4C 02 90 FD | 	jmp	#LR__0422
0530c                 | LR__0348
0530c     4E FA 05 F6 | 	mov	result1, #78
05310     44 02 90 FD | 	jmp	#LR__0422
05314                 | LR__0349
05314     4E FA 05 F6 | 	mov	result1, #78
05318     3C 02 90 FD | 	jmp	#LR__0422
0531c                 | LR__0350
0531c     58 FA 05 F6 | 	mov	result1, #88
05320     34 02 90 FD | 	jmp	#LR__0422
05324                 | LR__0351
05324     5F FA 05 F6 | 	mov	result1, #95
05328     2C 02 90 FD | 	jmp	#LR__0422
0532c                 | LR__0352
0532c     5F FA 05 F6 | 	mov	result1, #95
05330     24 02 90 FD | 	jmp	#LR__0422
05334                 | LR__0353
05334     4C FA 05 F6 | 	mov	result1, #76
05338     1C 02 90 FD | 	jmp	#LR__0422
0533c                 | LR__0354
0533c     4C FA 05 F6 | 	mov	result1, #76
05340     14 02 90 FD | 	jmp	#LR__0422
05344                 | LR__0355
05344     52 FA 05 F6 | 	mov	result1, #82
05348     0C 02 90 FD | 	jmp	#LR__0422
0534c                 | LR__0356
0534c     52 FA 05 F6 | 	mov	result1, #82
05350     04 02 90 FD | 	jmp	#LR__0422
05354                 | LR__0357
05354     97 FA 05 F6 | 	mov	result1, #151
05358     FC 01 90 FD | 	jmp	#LR__0422
0535c                 | LR__0358
0535c     61 FA 05 F6 | 	mov	result1, #97
05360     F4 01 90 FD | 	jmp	#LR__0422
05364                 | LR__0359
05364     61 FA 05 F6 | 	mov	result1, #97
05368     EC 01 90 FD | 	jmp	#LR__0422
0536c                 | LR__0360
0536c     63 FA 05 F6 | 	mov	result1, #99
05370     E4 01 90 FD | 	jmp	#LR__0422
05374                 | LR__0361
05374     41 FA 05 F6 | 	mov	result1, #65
05378     DC 01 90 FD | 	jmp	#LR__0422
0537c                 | LR__0362
0537c     4B FA 05 F6 | 	mov	result1, #75
05380     D4 01 90 FD | 	jmp	#LR__0422
05384                 | LR__0363
05384     4B FA 05 F6 | 	mov	result1, #75
05388     CC 01 90 FD | 	jmp	#LR__0422
0538c                 | LR__0364
0538c     B3 FA 05 F6 | 	mov	result1, #179
05390     C4 01 90 FD | 	jmp	#LR__0422
05394                 | LR__0365
05394     5E FA 05 F6 | 	mov	result1, #94
05398     BC 01 90 FD | 	jmp	#LR__0422
0539c                 | LR__0366
0539c     5E FA 05 F6 | 	mov	result1, #94
053a0     B4 01 90 FD | 	jmp	#LR__0422
053a4                 | LR__0367
053a4     7C FA 05 F6 | 	mov	result1, #124
053a8     AC 01 90 FD | 	jmp	#LR__0422
053ac                 | LR__0368
053ac     7E FA 05 F6 | 	mov	result1, #126
053b0     A4 01 90 FD | 	jmp	#LR__0422
053b4                 | LR__0369
053b4     7D FA 05 F6 | 	mov	result1, #125
053b8     9C 01 90 FD | 	jmp	#LR__0422
053bc                 | LR__0370
053bc     7F FA 05 F6 | 	mov	result1, #127
053c0     94 01 90 FD | 	jmp	#LR__0422
053c4                 | LR__0371
053c4     80 FA 05 F6 | 	mov	result1, #128
053c8     8C 01 90 FD | 	jmp	#LR__0422
053cc                 | LR__0372
053cc     55 FA 05 F6 | 	mov	result1, #85
053d0     84 01 90 FD | 	jmp	#LR__0422
053d4                 | LR__0373
053d4     75 FA 05 F6 | 	mov	result1, #117
053d8     7C 01 90 FD | 	jmp	#LR__0422
053dc                 | LR__0374
053dc     75 FA 05 F6 | 	mov	result1, #117
053e0     74 01 90 FD | 	jmp	#LR__0422
053e4                 | LR__0375
053e4     42 FA 05 F6 | 	mov	result1, #66
053e8     6C 01 90 FD | 	jmp	#LR__0422
053ec                 | LR__0376
053ec     42 FA 05 F6 | 	mov	result1, #66
053f0     64 01 90 FD | 	jmp	#LR__0422
053f4                 | LR__0377
053f4     95 FA 05 F6 | 	mov	result1, #149
053f8     5C 01 90 FD | 	jmp	#LR__0422
053fc                 | LR__0378
053fc     AC FA 05 F6 | 	mov	result1, #172
05400     54 01 90 FD | 	jmp	#LR__0422
05404                 | LR__0379
05404     81 FA 05 F6 | 	mov	result1, #129
05408     4C 01 90 FD | 	jmp	#LR__0422
0540c                 | LR__0380
0540c     81 FA 05 F6 | 	mov	result1, #129
05410     44 01 90 FD | 	jmp	#LR__0422
05414                 | LR__0381
05414     44 FA 05 F6 | 	mov	result1, #68
05418     3C 01 90 FD | 	jmp	#LR__0422
0541c                 | LR__0382
0541c     44 FA 05 F6 | 	mov	result1, #68
05420     34 01 90 FD | 	jmp	#LR__0422
05424                 | LR__0383
05424     BC FA 05 F6 | 	mov	result1, #188
05428     2C 01 90 FD | 	jmp	#LR__0422
0542c                 | LR__0384
0542c     88 FA 05 F6 | 	mov	result1, #136
05430     24 01 90 FD | 	jmp	#LR__0422
05434                 | LR__0385
05434     92 FA 05 F6 | 	mov	result1, #146
05438     1C 01 90 FD | 	jmp	#LR__0422
0543c                 | LR__0386
0543c     BE FA 05 F6 | 	mov	result1, #190
05440     14 01 90 FD | 	jmp	#LR__0422
05444                 | LR__0387
05444     BE FA 05 F6 | 	mov	result1, #190
05448     0C 01 90 FD | 	jmp	#LR__0422
0544c                 | LR__0388
0544c     AA FA 05 F6 | 	mov	result1, #170
05450     04 01 90 FD | 	jmp	#LR__0422
05454                 | LR__0389
05454     4D FA 05 F6 | 	mov	result1, #77
05458     FC 00 90 FD | 	jmp	#LR__0422
0545c                 | LR__0390
0545c     51 FA 05 F6 | 	mov	result1, #81
05460     F4 00 90 FD | 	jmp	#LR__0422
05464                 | LR__0391
05464     51 FA 05 F6 | 	mov	result1, #81
05468     EC 00 90 FD | 	jmp	#LR__0422
0546c                 | LR__0392
0546c     8E FA 05 F6 | 	mov	result1, #142
05470     E4 00 90 FD | 	jmp	#LR__0422
05474                 | LR__0393
05474     8E FA 05 F6 | 	mov	result1, #142
05478     DC 00 90 FD | 	jmp	#LR__0422
0547c                 | LR__0394
0547c     90 FA 05 F6 | 	mov	result1, #144
05480     D4 00 90 FD | 	jmp	#LR__0422
05484                 | LR__0395
05484     90 FA 05 F6 | 	mov	result1, #144
05488     CC 00 90 FD | 	jmp	#LR__0422
0548c                 | LR__0396
0548c     8D FA 05 F6 | 	mov	result1, #141
05490     C4 00 90 FD | 	jmp	#LR__0422
05494                 | LR__0397
05494     8D FA 05 F6 | 	mov	result1, #141
05498     BC 00 90 FD | 	jmp	#LR__0422
0549c                 | LR__0398
0549c     8C FA 05 F6 | 	mov	result1, #140
054a0     B4 00 90 FD | 	jmp	#LR__0422
054a4                 | LR__0399
054a4     8C FA 05 F6 | 	mov	result1, #140
054a8     AC 00 90 FD | 	jmp	#LR__0422
054ac                 | LR__0400
054ac     91 FA 05 F6 | 	mov	result1, #145
054b0     A4 00 90 FD | 	jmp	#LR__0422
054b4                 | LR__0401
054b4     91 FA 05 F6 | 	mov	result1, #145
054b8     9C 00 90 FD | 	jmp	#LR__0422
054bc                 | LR__0402
054bc     8B FA 05 F6 | 	mov	result1, #139
054c0     94 00 90 FD | 	jmp	#LR__0422
054c4                 | LR__0403
054c4     8B FA 05 F6 | 	mov	result1, #139
054c8     8C 00 90 FD | 	jmp	#LR__0422
054cc                 | LR__0404
054cc     8F FA 05 F6 | 	mov	result1, #143
054d0     84 00 90 FD | 	jmp	#LR__0422
054d4                 | LR__0405
054d4     8F FA 05 F6 | 	mov	result1, #143
054d8     7C 00 90 FD | 	jmp	#LR__0422
054dc                 | LR__0406
054dc     8F FA 05 F6 | 	mov	result1, #143
054e0     74 00 90 FD | 	jmp	#LR__0422
054e4                 | LR__0407
054e4     B2 FA 05 F6 | 	mov	result1, #178
054e8     6C 00 90 FD | 	jmp	#LR__0422
054ec                 | LR__0408
054ec     B2 FA 05 F6 | 	mov	result1, #178
054f0     64 00 90 FD | 	jmp	#LR__0422
054f4                 | LR__0409
054f4     75 FA 05 F6 | 	mov	result1, #117
054f8     5C 00 90 FD | 	jmp	#LR__0422
054fc                 | LR__0410
054fc     75 FA 05 F6 | 	mov	result1, #117
05500     54 00 90 FD | 	jmp	#LR__0422
05504                 | LR__0411
05504     6D FA 05 F6 | 	mov	result1, #109
05508     4C 00 90 FD | 	jmp	#LR__0422
0550c                 | LR__0412
0550c     6D FA 05 F6 | 	mov	result1, #109
05510     44 00 90 FD | 	jmp	#LR__0422
05514                 | LR__0413
05514     5B FA 05 F6 | 	mov	result1, #91
05518     3C 00 90 FD | 	jmp	#LR__0422
0551c                 | LR__0414
0551c     56 FA 05 F6 | 	mov	result1, #86
05520     34 00 90 FD | 	jmp	#LR__0422
05524                 | LR__0415
05524     70 FA 05 F6 | 	mov	result1, #112
05528     2C 00 90 FD | 	jmp	#LR__0422
0552c                 | LR__0416
0552c     70 FA 05 F6 | 	mov	result1, #112
05530     24 00 90 FD | 	jmp	#LR__0422
05534                 | LR__0417
05534     57 FA 05 F6 | 	mov	result1, #87
05538     1C 00 90 FD | 	jmp	#LR__0422
0553c                 | LR__0418
0553c     57 FA 05 F6 | 	mov	result1, #87
05540     14 00 90 FD | 	jmp	#LR__0422
05544                 | LR__0419
05544     77 FA 05 F6 | 	mov	result1, #119
05548     0C 00 90 FD | 	jmp	#LR__0422
0554c                 | LR__0420
0554c     78 FA 05 F6 | 	mov	result1, #120
05550     04 00 90 FD | 	jmp	#LR__0422
05554                 | LR__0421
05554     00 FA 05 F6 | 	mov	result1, #0
05558                 | LR__0422
05558     A7 F0 03 F6 | 	mov	ptra, fp
0555c     B2 00 A0 FD | 	call	#popregs_
05560                 | _iscommand_ret
05560     2D 00 64 FD | 	ret
05564                 | 
05564                 | ' 
05564                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05564                 | ' 
05564                 | ' function isfunction(s as string) as ubyte
05564                 | _isfunction
05564     01 4A 05 F6 | 	mov	COUNT_, #1
05568     A8 00 A0 FD | 	call	#pushregs_
0556c                 | ' 
0556c                 | ' select case s
0556c     09 1F 02 F6 | 	mov	local01, arg01
05570     83 01 00 FF 
05574     DF 15 06 F6 | 	mov	arg02, ##@LR__5305
05578     0F 13 02 F6 | 	mov	arg01, local01
0557c     AC B5 B1 FD | 	call	#__system___string_cmp
05580     00 FA 0D F2 | 	cmp	result1, #0 wz
05584     0C 04 90 AD |  if_e	jmp	#LR__0430
05588     83 01 00 FF 
0558c     E3 15 06 F6 | 	mov	arg02, ##@LR__5306
05590     0F 13 02 F6 | 	mov	arg01, local01
05594     94 B5 B1 FD | 	call	#__system___string_cmp
05598     00 FA 0D F2 | 	cmp	result1, #0 wz
0559c     FC 03 90 AD |  if_e	jmp	#LR__0431
055a0     83 01 00 FF 
055a4     E8 15 06 F6 | 	mov	arg02, ##@LR__5307
055a8     0F 13 02 F6 | 	mov	arg01, local01
055ac     7C B5 B1 FD | 	call	#__system___string_cmp
055b0     00 FA 0D F2 | 	cmp	result1, #0 wz
055b4     EC 03 90 AD |  if_e	jmp	#LR__0432
055b8     83 01 00 FF 
055bc     EC 15 06 F6 | 	mov	arg02, ##@LR__5308
055c0     0F 13 02 F6 | 	mov	arg01, local01
055c4     64 B5 B1 FD | 	call	#__system___string_cmp
055c8     00 FA 0D F2 | 	cmp	result1, #0 wz
055cc     DC 03 90 AD |  if_e	jmp	#LR__0433
055d0     83 01 00 FF 
055d4     F1 15 06 F6 | 	mov	arg02, ##@LR__5309
055d8     0F 13 02 F6 | 	mov	arg01, local01
055dc     4C B5 B1 FD | 	call	#__system___string_cmp
055e0     00 FA 0D F2 | 	cmp	result1, #0 wz
055e4     CC 03 90 AD |  if_e	jmp	#LR__0434
055e8     83 01 00 FF 
055ec     F5 15 06 F6 | 	mov	arg02, ##@LR__5310
055f0     0F 13 02 F6 | 	mov	arg01, local01
055f4     34 B5 B1 FD | 	call	#__system___string_cmp
055f8     00 FA 0D F2 | 	cmp	result1, #0 wz
055fc     BC 03 90 AD |  if_e	jmp	#LR__0435
05600     83 01 00 FF 
05604     FA 15 06 F6 | 	mov	arg02, ##@LR__5311
05608     0F 13 02 F6 | 	mov	arg01, local01
0560c     1C B5 B1 FD | 	call	#__system___string_cmp
05610     00 FA 0D F2 | 	cmp	result1, #0 wz
05614     AC 03 90 AD |  if_e	jmp	#LR__0436
05618     83 01 00 FF 
0561c     FE 15 06 F6 | 	mov	arg02, ##@LR__5312
05620     0F 13 02 F6 | 	mov	arg01, local01
05624     04 B5 B1 FD | 	call	#__system___string_cmp
05628     00 FA 0D F2 | 	cmp	result1, #0 wz
0562c     9C 03 90 AD |  if_e	jmp	#LR__0437
05630     84 01 00 FF 
05634     03 14 06 F6 | 	mov	arg02, ##@LR__5313
05638     0F 13 02 F6 | 	mov	arg01, local01
0563c     EC B4 B1 FD | 	call	#__system___string_cmp
05640     00 FA 0D F2 | 	cmp	result1, #0 wz
05644     8C 03 90 AD |  if_e	jmp	#LR__0438
05648     84 01 00 FF 
0564c     08 14 06 F6 | 	mov	arg02, ##@LR__5314
05650     0F 13 02 F6 | 	mov	arg01, local01
05654     D4 B4 B1 FD | 	call	#__system___string_cmp
05658     00 FA 0D F2 | 	cmp	result1, #0 wz
0565c     7C 03 90 AD |  if_e	jmp	#LR__0439
05660     84 01 00 FF 
05664     0C 14 06 F6 | 	mov	arg02, ##@LR__5315
05668     0F 13 02 F6 | 	mov	arg01, local01
0566c     BC B4 B1 FD | 	call	#__system___string_cmp
05670     00 FA 0D F2 | 	cmp	result1, #0 wz
05674     6C 03 90 AD |  if_e	jmp	#LR__0440
05678     84 01 00 FF 
0567c     12 14 06 F6 | 	mov	arg02, ##@LR__5316
05680     0F 13 02 F6 | 	mov	arg01, local01
05684     A4 B4 B1 FD | 	call	#__system___string_cmp
05688     00 FA 0D F2 | 	cmp	result1, #0 wz
0568c     5C 03 90 AD |  if_e	jmp	#LR__0441
05690     84 01 00 FF 
05694     16 14 06 F6 | 	mov	arg02, ##@LR__5317
05698     0F 13 02 F6 | 	mov	arg01, local01
0569c     8C B4 B1 FD | 	call	#__system___string_cmp
056a0     00 FA 0D F2 | 	cmp	result1, #0 wz
056a4     4C 03 90 AD |  if_e	jmp	#LR__0442
056a8     84 01 00 FF 
056ac     1F 14 06 F6 | 	mov	arg02, ##@LR__5318
056b0     0F 13 02 F6 | 	mov	arg01, local01
056b4     74 B4 B1 FD | 	call	#__system___string_cmp
056b8     00 FA 0D F2 | 	cmp	result1, #0 wz
056bc     3C 03 90 AD |  if_e	jmp	#LR__0443
056c0     84 01 00 FF 
056c4     23 14 06 F6 | 	mov	arg02, ##@LR__5319
056c8     0F 13 02 F6 | 	mov	arg01, local01
056cc     5C B4 B1 FD | 	call	#__system___string_cmp
056d0     00 FA 0D F2 | 	cmp	result1, #0 wz
056d4     2C 03 90 AD |  if_e	jmp	#LR__0444
056d8     84 01 00 FF 
056dc     31 14 06 F6 | 	mov	arg02, ##@LR__5320
056e0     0F 13 02 F6 | 	mov	arg01, local01
056e4     44 B4 B1 FD | 	call	#__system___string_cmp
056e8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ec     1C 03 90 AD |  if_e	jmp	#LR__0445
056f0     84 01 00 FF 
056f4     3E 14 06 F6 | 	mov	arg02, ##@LR__5321
056f8     0F 13 02 F6 | 	mov	arg01, local01
056fc     2C B4 B1 FD | 	call	#__system___string_cmp
05700     00 FA 0D F2 | 	cmp	result1, #0 wz
05704     0C 03 90 AD |  if_e	jmp	#LR__0446
05708     84 01 00 FF 
0570c     46 14 06 F6 | 	mov	arg02, ##@LR__5322
05710     0F 13 02 F6 | 	mov	arg01, local01
05714     14 B4 B1 FD | 	call	#__system___string_cmp
05718     00 FA 0D F2 | 	cmp	result1, #0 wz
0571c     FC 02 90 AD |  if_e	jmp	#LR__0447
05720     84 01 00 FF 
05724     4B 14 06 F6 | 	mov	arg02, ##@LR__5323
05728     0F 13 02 F6 | 	mov	arg01, local01
0572c     FC B3 B1 FD | 	call	#__system___string_cmp
05730     00 FA 0D F2 | 	cmp	result1, #0 wz
05734     EC 02 90 AD |  if_e	jmp	#LR__0448
05738     84 01 00 FF 
0573c     52 14 06 F6 | 	mov	arg02, ##@LR__5324
05740     0F 13 02 F6 | 	mov	arg01, local01
05744     E4 B3 B1 FD | 	call	#__system___string_cmp
05748     00 FA 0D F2 | 	cmp	result1, #0 wz
0574c     DC 02 90 AD |  if_e	jmp	#LR__0449
05750     84 01 00 FF 
05754     56 14 06 F6 | 	mov	arg02, ##@LR__5325
05758     0F 13 02 F6 | 	mov	arg01, local01
0575c     CC B3 B1 FD | 	call	#__system___string_cmp
05760     00 FA 0D F2 | 	cmp	result1, #0 wz
05764     CC 02 90 AD |  if_e	jmp	#LR__0450
05768     84 01 00 FF 
0576c     5C 14 06 F6 | 	mov	arg02, ##@LR__5326
05770     0F 13 02 F6 | 	mov	arg01, local01
05774     B4 B3 B1 FD | 	call	#__system___string_cmp
05778     00 FA 0D F2 | 	cmp	result1, #0 wz
0577c     BC 02 90 AD |  if_e	jmp	#LR__0451
05780     84 01 00 FF 
05784     60 14 06 F6 | 	mov	arg02, ##@LR__5327
05788     0F 13 02 F6 | 	mov	arg01, local01
0578c     9C B3 B1 FD | 	call	#__system___string_cmp
05790     00 FA 0D F2 | 	cmp	result1, #0 wz
05794     AC 02 90 AD |  if_e	jmp	#LR__0452
05798     84 01 00 FF 
0579c     64 14 06 F6 | 	mov	arg02, ##@LR__5328
057a0     0F 13 02 F6 | 	mov	arg01, local01
057a4     84 B3 B1 FD | 	call	#__system___string_cmp
057a8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ac     9C 02 90 AD |  if_e	jmp	#LR__0453
057b0     84 01 00 FF 
057b4     6A 14 06 F6 | 	mov	arg02, ##@LR__5329
057b8     0F 13 02 F6 | 	mov	arg01, local01
057bc     6C B3 B1 FD | 	call	#__system___string_cmp
057c0     00 FA 0D F2 | 	cmp	result1, #0 wz
057c4     8C 02 90 AD |  if_e	jmp	#LR__0454
057c8     84 01 00 FF 
057cc     6F 14 06 F6 | 	mov	arg02, ##@LR__5330
057d0     0F 13 02 F6 | 	mov	arg01, local01
057d4     54 B3 B1 FD | 	call	#__system___string_cmp
057d8     00 FA 0D F2 | 	cmp	result1, #0 wz
057dc     7C 02 90 AD |  if_e	jmp	#LR__0455
057e0     84 01 00 FF 
057e4     76 14 06 F6 | 	mov	arg02, ##@LR__5331
057e8     0F 13 02 F6 | 	mov	arg01, local01
057ec     3C B3 B1 FD | 	call	#__system___string_cmp
057f0     00 FA 0D F2 | 	cmp	result1, #0 wz
057f4     6C 02 90 AD |  if_e	jmp	#LR__0456
057f8     84 01 00 FF 
057fc     7D 14 06 F6 | 	mov	arg02, ##@LR__5332
05800     0F 13 02 F6 | 	mov	arg01, local01
05804     24 B3 B1 FD | 	call	#__system___string_cmp
05808     00 FA 0D F2 | 	cmp	result1, #0 wz
0580c     5C 02 90 AD |  if_e	jmp	#LR__0457
05810     84 01 00 FF 
05814     84 14 06 F6 | 	mov	arg02, ##@LR__5333
05818     0F 13 02 F6 | 	mov	arg01, local01
0581c     0C B3 B1 FD | 	call	#__system___string_cmp
05820     00 FA 0D F2 | 	cmp	result1, #0 wz
05824     4C 02 90 AD |  if_e	jmp	#LR__0458
05828     84 01 00 FF 
0582c     8B 14 06 F6 | 	mov	arg02, ##@LR__5334
05830     0F 13 02 F6 | 	mov	arg01, local01
05834     F4 B2 B1 FD | 	call	#__system___string_cmp
05838     00 FA 0D F2 | 	cmp	result1, #0 wz
0583c     3C 02 90 AD |  if_e	jmp	#LR__0459
05840     84 01 00 FF 
05844     90 14 06 F6 | 	mov	arg02, ##@LR__5335
05848     0F 13 02 F6 | 	mov	arg01, local01
0584c     DC B2 B1 FD | 	call	#__system___string_cmp
05850     00 FA 0D F2 | 	cmp	result1, #0 wz
05854     2C 02 90 AD |  if_e	jmp	#LR__0460
05858     84 01 00 FF 
0585c     98 14 06 F6 | 	mov	arg02, ##@LR__5336
05860     0F 13 02 F6 | 	mov	arg01, local01
05864     C4 B2 B1 FD | 	call	#__system___string_cmp
05868     00 FA 0D F2 | 	cmp	result1, #0 wz
0586c     1C 02 90 AD |  if_e	jmp	#LR__0461
05870     84 01 00 FF 
05874     9E 14 06 F6 | 	mov	arg02, ##@LR__5337
05878     0F 13 02 F6 | 	mov	arg01, local01
0587c     AC B2 B1 FD | 	call	#__system___string_cmp
05880     00 FA 0D F2 | 	cmp	result1, #0 wz
05884     0C 02 90 AD |  if_e	jmp	#LR__0462
05888     84 01 00 FF 
0588c     A5 14 06 F6 | 	mov	arg02, ##@LR__5338
05890     0F 13 02 F6 | 	mov	arg01, local01
05894     94 B2 B1 FD | 	call	#__system___string_cmp
05898     00 FA 0D F2 | 	cmp	result1, #0 wz
0589c     FC 01 90 AD |  if_e	jmp	#LR__0463
058a0     84 01 00 FF 
058a4     AB 14 06 F6 | 	mov	arg02, ##@LR__5339
058a8     0F 13 02 F6 | 	mov	arg01, local01
058ac     7C B2 B1 FD | 	call	#__system___string_cmp
058b0     00 FA 0D F2 | 	cmp	result1, #0 wz
058b4     EC 01 90 AD |  if_e	jmp	#LR__0464
058b8     84 01 00 FF 
058bc     B1 14 06 F6 | 	mov	arg02, ##@LR__5340
058c0     0F 13 02 F6 | 	mov	arg01, local01
058c4     64 B2 B1 FD | 	call	#__system___string_cmp
058c8     00 FA 0D F2 | 	cmp	result1, #0 wz
058cc     DC 01 90 AD |  if_e	jmp	#LR__0465
058d0     84 01 00 FF 
058d4     B5 14 06 F6 | 	mov	arg02, ##@LR__5341
058d8     0F 13 02 F6 | 	mov	arg01, local01
058dc     4C B2 B1 FD | 	call	#__system___string_cmp
058e0     00 FA 0D F2 | 	cmp	result1, #0 wz
058e4     CC 01 90 AD |  if_e	jmp	#LR__0466
058e8     84 01 00 FF 
058ec     B9 14 06 F6 | 	mov	arg02, ##@LR__5342
058f0     0F 13 02 F6 | 	mov	arg01, local01
058f4     34 B2 B1 FD | 	call	#__system___string_cmp
058f8     00 FA 0D F2 | 	cmp	result1, #0 wz
058fc     BC 01 90 AD |  if_e	jmp	#LR__0467
05900     84 01 00 FF 
05904     BD 14 06 F6 | 	mov	arg02, ##@LR__5343
05908     0F 13 02 F6 | 	mov	arg01, local01
0590c     1C B2 B1 FD | 	call	#__system___string_cmp
05910     00 FA 0D F2 | 	cmp	result1, #0 wz
05914     AC 01 90 AD |  if_e	jmp	#LR__0468
05918     84 01 00 FF 
0591c     C3 14 06 F6 | 	mov	arg02, ##@LR__5344
05920     0F 13 02 F6 | 	mov	arg01, local01
05924     04 B2 B1 FD | 	call	#__system___string_cmp
05928     00 FA 0D F2 | 	cmp	result1, #0 wz
0592c     9C 01 90 AD |  if_e	jmp	#LR__0469
05930     84 01 00 FF 
05934     C9 14 06 F6 | 	mov	arg02, ##@LR__5345
05938     0F 13 02 F6 | 	mov	arg01, local01
0593c     EC B1 B1 FD | 	call	#__system___string_cmp
05940     00 FA 0D F2 | 	cmp	result1, #0 wz
05944     8C 01 90 AD |  if_e	jmp	#LR__0470
05948     84 01 00 FF 
0594c     CE 14 06 F6 | 	mov	arg02, ##@LR__5346
05950     0F 13 02 F6 | 	mov	arg01, local01
05954     D4 B1 B1 FD | 	call	#__system___string_cmp
05958     00 FA 0D F2 | 	cmp	result1, #0 wz
0595c     7C 01 90 AD |  if_e	jmp	#LR__0471
05960     84 01 00 FF 
05964     D2 14 06 F6 | 	mov	arg02, ##@LR__5347
05968     0F 13 02 F6 | 	mov	arg01, local01
0596c     BC B1 B1 FD | 	call	#__system___string_cmp
05970     00 FA 0D F2 | 	cmp	result1, #0 wz
05974     6C 01 90 AD |  if_e	jmp	#LR__0472
05978     84 01 00 FF 
0597c     D6 14 06 F6 | 	mov	arg02, ##@LR__5348
05980     0F 13 02 F6 | 	mov	arg01, local01
05984     A4 B1 B1 FD | 	call	#__system___string_cmp
05988     00 FA 0D F2 | 	cmp	result1, #0 wz
0598c     5C 01 90 AD |  if_e	jmp	#LR__0473
05990     60 01 90 FD | 	jmp	#LR__0474
05994                 | LR__0430
05994     9E FA 05 F6 | 	mov	result1, #158
05998     5C 01 90 FD | 	jmp	#LR__0475
0599c                 | LR__0431
0599c     85 FA 05 F6 | 	mov	result1, #133
059a0     54 01 90 FD | 	jmp	#LR__0475
059a4                 | LR__0432
059a4     9B FA 05 F6 | 	mov	result1, #155
059a8     4C 01 90 FD | 	jmp	#LR__0475
059ac                 | LR__0433
059ac     9B FA 05 F6 | 	mov	result1, #155
059b0     44 01 90 FD | 	jmp	#LR__0475
059b4                 | LR__0434
059b4     A7 FA 05 F6 | 	mov	result1, #167
059b8     3C 01 90 FD | 	jmp	#LR__0475
059bc                 | LR__0435
059bc     84 FA 05 F6 | 	mov	result1, #132
059c0     34 01 90 FD | 	jmp	#LR__0475
059c4                 | LR__0436
059c4     86 FA 05 F6 | 	mov	result1, #134
059c8     2C 01 90 FD | 	jmp	#LR__0475
059cc                 | LR__0437
059cc     A2 FA 05 F6 | 	mov	result1, #162
059d0     24 01 90 FD | 	jmp	#LR__0475
059d4                 | LR__0438
059d4     9F FA 05 F6 | 	mov	result1, #159
059d8     1C 01 90 FD | 	jmp	#LR__0475
059dc                 | LR__0439
059dc     82 FA 05 F6 | 	mov	result1, #130
059e0     14 01 90 FD | 	jmp	#LR__0475
059e4                 | LR__0440
059e4     99 FA 05 F6 | 	mov	result1, #153
059e8     0C 01 90 FD | 	jmp	#LR__0475
059ec                 | LR__0441
059ec     9C FA 05 F6 | 	mov	result1, #156
059f0     04 01 90 FD | 	jmp	#LR__0475
059f4                 | LR__0442
059f4     6F FA 05 F6 | 	mov	result1, #111
059f8     FC 00 90 FD | 	jmp	#LR__0475
059fc                 | LR__0443
059fc     6F FA 05 F6 | 	mov	result1, #111
05a00     F4 00 90 FD | 	jmp	#LR__0475
05a04                 | LR__0444
05a04     93 FA 05 F6 | 	mov	result1, #147
05a08     EC 00 90 FD | 	jmp	#LR__0475
05a0c                 | LR__0445
05a0c     94 FA 05 F6 | 	mov	result1, #148
05a10     E4 00 90 FD | 	jmp	#LR__0475
05a14                 | LR__0446
05a14     62 FA 05 F6 | 	mov	result1, #98
05a18     DC 00 90 FD | 	jmp	#LR__0475
05a1c                 | LR__0447
05a1c     A3 FA 05 F6 | 	mov	result1, #163
05a20     D4 00 90 FD | 	jmp	#LR__0475
05a24                 | LR__0448
05a24     9D FA 05 F6 | 	mov	result1, #157
05a28     CC 00 90 FD | 	jmp	#LR__0475
05a2c                 | LR__0449
05a2c     8A FA 05 F6 | 	mov	result1, #138
05a30     C4 00 90 FD | 	jmp	#LR__0475
05a34                 | LR__0450
05a34     A4 FA 05 F6 | 	mov	result1, #164
05a38     BC 00 90 FD | 	jmp	#LR__0475
05a3c                 | LR__0451
05a3c     A8 FA 05 F6 | 	mov	result1, #168
05a40     B4 00 90 FD | 	jmp	#LR__0475
05a44                 | LR__0452
05a44     AD FA 05 F6 | 	mov	result1, #173
05a48     AC 00 90 FD | 	jmp	#LR__0475
05a4c                 | LR__0453
05a4c     9A FA 05 F6 | 	mov	result1, #154
05a50     A4 00 90 FD | 	jmp	#LR__0475
05a54                 | LR__0454
05a54     A6 FA 05 F6 | 	mov	result1, #166
05a58     9C 00 90 FD | 	jmp	#LR__0475
05a5c                 | LR__0455
05a5c     66 FA 05 F6 | 	mov	result1, #102
05a60     94 00 90 FD | 	jmp	#LR__0475
05a64                 | LR__0456
05a64     67 FA 05 F6 | 	mov	result1, #103
05a68     8C 00 90 FD | 	jmp	#LR__0475
05a6c                 | LR__0457
05a6c     64 FA 05 F6 | 	mov	result1, #100
05a70     84 00 90 FD | 	jmp	#LR__0475
05a74                 | LR__0458
05a74     65 FA 05 F6 | 	mov	result1, #101
05a78     7C 00 90 FD | 	jmp	#LR__0475
05a7c                 | LR__0459
05a7c     98 FA 05 F6 | 	mov	result1, #152
05a80     74 00 90 FD | 	jmp	#LR__0475
05a84                 | LR__0460
05a84     7B FA 05 F6 | 	mov	result1, #123
05a88     6C 00 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0461
05a8c     76 FA 05 F6 | 	mov	result1, #118
05a90     64 00 90 FD | 	jmp	#LR__0475
05a94                 | LR__0462
05a94     A5 FA 05 F6 | 	mov	result1, #165
05a98     5C 00 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0463
05a9c     7A FA 05 F6 | 	mov	result1, #122
05aa0     54 00 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0464
05aa4     BF FA 05 F6 | 	mov	result1, #191
05aa8     4C 00 90 FD | 	jmp	#LR__0475
05aac                 | LR__0465
05aac     54 FA 05 F6 | 	mov	result1, #84
05ab0     44 00 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0466
05ab4     6B FA 05 F6 | 	mov	result1, #107
05ab8     3C 00 90 FD | 	jmp	#LR__0475
05abc                 | LR__0467
05abc     87 FA 05 F6 | 	mov	result1, #135
05ac0     34 00 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0468
05ac4     6A FA 05 F6 | 	mov	result1, #106
05ac8     2C 00 90 FD | 	jmp	#LR__0475
05acc                 | LR__0469
05acc     6E FA 05 F6 | 	mov	result1, #110
05ad0     24 00 90 FD | 	jmp	#LR__0475
05ad4                 | LR__0470
05ad4     A1 FA 05 F6 | 	mov	result1, #161
05ad8     1C 00 90 FD | 	jmp	#LR__0475
05adc                 | LR__0471
05adc     83 FA 05 F6 | 	mov	result1, #131
05ae0     14 00 90 FD | 	jmp	#LR__0475
05ae4                 | LR__0472
05ae4     A0 FA 05 F6 | 	mov	result1, #160
05ae8     0C 00 90 FD | 	jmp	#LR__0475
05aec                 | LR__0473
05aec     9B FA 05 F6 | 	mov	result1, #155
05af0     04 00 90 FD | 	jmp	#LR__0475
05af4                 | LR__0474
05af4     00 FA 05 F6 | 	mov	result1, #0
05af8                 | LR__0475
05af8     A7 F0 03 F6 | 	mov	ptra, fp
05afc     B2 00 A0 FD | 	call	#popregs_
05b00                 | _isfunction_ret
05b00     2D 00 64 FD | 	ret
05b04                 | 
05b04                 | ' 
05b04                 | ' ' Check if the part is a name
05b04                 | ' 
05b04                 | ' function isname(s as string) as boolean
05b04                 | _isname
05b04     0D 4A 05 F6 | 	mov	COUNT_, #13
05b08     A8 00 A0 FD | 	call	#pushregs_
05b0c     09 1F 02 F6 | 	mov	local01, arg01
05b10     09 21 02 F6 | 	mov	local02, arg01
05b14     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05b18                 | LR__0480
05b18     10 FB C9 FA | 	rdbyte	result1, local02 wz
05b1c     01 20 06 51 |  if_ne	add	local02, #1
05b20     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05b24                 | LR__0481
05b24     09 21 82 F1 | 	sub	local02, arg01
05b28     10 FB 01 F6 | 	mov	result1, local02
05b2c     FD 22 0A F6 | 	mov	local03, result1 wz
05b30     00 FA 05 A6 |  if_e	mov	result1, #0
05b34     34 02 90 AD |  if_e	jmp	#LR__0493
05b38     0F 13 02 F6 | 	mov	arg01, local01
05b3c     01 14 06 F6 | 	mov	arg02, #1
05b40     01 16 06 F6 | 	mov	arg03, #1
05b44     50 D1 B1 FD | 	call	#__system__Mid_S
05b48     FD 24 02 F6 | 	mov	local04, result1
05b4c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05b4c     84 01 00 FF 
05b50     DD 14 06 F6 | 	mov	arg02, ##@LR__5349
05b54     12 13 02 F6 | 	mov	arg01, local04
05b58     D0 AF B1 FD | 	call	#__system___string_cmp
05b5c     00 FA 55 F2 | 	cmps	result1, #0 wc
05b60     18 00 90 CD |  if_b	jmp	#LR__0482
05b64     84 01 00 FF 
05b68     DF 14 06 F6 | 	mov	arg02, ##@LR__5350
05b6c     12 13 02 F6 | 	mov	arg01, local04
05b70     B8 AF B1 FD | 	call	#__system___string_cmp
05b74     01 FA 55 F2 | 	cmps	result1, #1 wc
05b78     1C 00 90 CD |  if_b	jmp	#LR__0483
05b7c                 | LR__0482
05b7c     84 01 00 FF 
05b80     E1 14 06 F6 | 	mov	arg02, ##@LR__5351
05b84     12 13 02 F6 | 	mov	arg01, local04
05b88     A0 AF B1 FD | 	call	#__system___string_cmp
05b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b90     00 FA 05 56 |  if_ne	mov	result1, #0
05b94     D4 01 90 5D |  if_ne	jmp	#LR__0493
05b98                 | LR__0483
05b98                 | ' if l>2 then 
05b98     03 22 56 F2 | 	cmps	local03, #3 wc
05b9c     C8 01 90 CD |  if_b	jmp	#LR__0492
05ba0                 | '   for i=2 to l
05ba0     02 26 06 F6 | 	mov	local05, #2
05ba4     11 29 02 F6 | 	mov	local06, local03
05ba8     01 28 06 F1 | 	add	local06, #1
05bac                 | LR__0484
05bac     14 27 52 F2 | 	cmps	local05, local06 wc
05bb0     B4 01 90 3D |  if_ae	jmp	#LR__0491
05bb4     0F 13 02 F6 | 	mov	arg01, local01
05bb8     13 15 02 F6 | 	mov	arg02, local05
05bbc     01 16 06 F6 | 	mov	arg03, #1
05bc0     D4 D0 B1 FD | 	call	#__system__Mid_S
05bc4     FD 24 02 F6 | 	mov	local04, result1
05bc8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05bc8     11 27 52 F2 | 	cmps	local05, local03 wc
05bcc     9C 00 90 3D |  if_ae	jmp	#LR__0487
05bd0     84 01 00 FF 
05bd4     E3 14 06 F6 | 	mov	arg02, ##@LR__5352
05bd8     12 13 02 F6 | 	mov	arg01, local04
05bdc     4C AF B1 FD | 	call	#__system___string_cmp
05be0     00 FA 55 F2 | 	cmps	result1, #0 wc
05be4     18 00 90 CD |  if_b	jmp	#LR__0485
05be8     84 01 00 FF 
05bec     E5 14 06 F6 | 	mov	arg02, ##@LR__5353
05bf0     12 13 02 F6 | 	mov	arg01, local04
05bf4     34 AF B1 FD | 	call	#__system___string_cmp
05bf8     01 FA 55 F2 | 	cmps	result1, #1 wc
05bfc     6C 00 90 CD |  if_b	jmp	#LR__0487
05c00                 | LR__0485
05c00     84 01 00 FF 
05c04     E7 14 06 F6 | 	mov	arg02, ##@LR__5354
05c08     12 13 02 F6 | 	mov	arg01, local04
05c0c     1C AF B1 FD | 	call	#__system___string_cmp
05c10     00 FA 55 F2 | 	cmps	result1, #0 wc
05c14     18 00 90 CD |  if_b	jmp	#LR__0486
05c18     84 01 00 FF 
05c1c     E9 14 06 F6 | 	mov	arg02, ##@LR__5355
05c20     12 13 02 F6 | 	mov	arg01, local04
05c24     04 AF B1 FD | 	call	#__system___string_cmp
05c28     01 FA 55 F2 | 	cmps	result1, #1 wc
05c2c     3C 00 90 CD |  if_b	jmp	#LR__0487
05c30                 | LR__0486
05c30     84 01 00 FF 
05c34     EB 2A 06 F6 | 	mov	local07, ##@LR__5356
05c38     12 13 02 F6 | 	mov	arg01, local04
05c3c     15 15 02 F6 | 	mov	arg02, local07
05c40     E8 AE B1 FD | 	call	#__system___string_cmp
05c44     00 FA 0D F2 | 	cmp	result1, #0 wz
05c48     20 00 90 AD |  if_e	jmp	#LR__0487
05c4c     84 01 00 FF 
05c50     ED 2C 06 F6 | 	mov	local08, ##@LR__5357
05c54     12 13 02 F6 | 	mov	arg01, local04
05c58     16 15 02 F6 | 	mov	arg02, local08
05c5c     CC AE B1 FD | 	call	#__system___string_cmp
05c60     FD 2E 0A F6 | 	mov	local09, result1 wz
05c64     00 FA 05 56 |  if_ne	mov	result1, #0
05c68     00 01 90 5D |  if_ne	jmp	#LR__0493
05c6c                 | LR__0487
05c6c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05c6c     11 27 0A F2 | 	cmp	local05, local03 wz
05c70     EC 00 90 5D |  if_ne	jmp	#LR__0490
05c74     84 01 00 FF 
05c78     EF 30 06 F6 | 	mov	local10, ##@LR__5358
05c7c     12 13 02 F6 | 	mov	arg01, local04
05c80     18 15 02 F6 | 	mov	arg02, local10
05c84     A4 AE B1 FD | 	call	#__system___string_cmp
05c88     FD 32 02 F6 | 	mov	local11, result1
05c8c     00 32 56 F2 | 	cmps	local11, #0 wc
05c90     1C 00 90 CD |  if_b	jmp	#LR__0488
05c94     84 01 00 FF 
05c98     F1 14 06 F6 | 	mov	arg02, ##@LR__5359
05c9c     12 13 02 F6 | 	mov	arg01, local04
05ca0     88 AE B1 FD | 	call	#__system___string_cmp
05ca4     FD 30 02 F6 | 	mov	local10, result1
05ca8     01 30 56 F2 | 	cmps	local10, #1 wc
05cac     B0 00 90 CD |  if_b	jmp	#LR__0490
05cb0                 | LR__0488
05cb0     84 01 00 FF 
05cb4     F3 14 06 F6 | 	mov	arg02, ##@LR__5360
05cb8     12 13 02 F6 | 	mov	arg01, local04
05cbc     6C AE B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 55 F2 | 	cmps	result1, #0 wc
05cc4     1C 00 90 CD |  if_b	jmp	#LR__0489
05cc8     84 01 00 FF 
05ccc     F5 2E 06 F6 | 	mov	local09, ##@LR__5361
05cd0     12 13 02 F6 | 	mov	arg01, local04
05cd4     17 15 02 F6 | 	mov	arg02, local09
05cd8     50 AE B1 FD | 	call	#__system___string_cmp
05cdc     01 FA 55 F2 | 	cmps	result1, #1 wc
05ce0     7C 00 90 CD |  if_b	jmp	#LR__0490
05ce4                 | LR__0489
05ce4     84 01 00 FF 
05ce8     F7 2E 06 F6 | 	mov	local09, ##@LR__5362
05cec     12 13 02 F6 | 	mov	arg01, local04
05cf0     17 15 02 F6 | 	mov	arg02, local09
05cf4     34 AE B1 FD | 	call	#__system___string_cmp
05cf8     00 FA 4D F2 | 	cmps	result1, #0 wz
05cfc     60 00 90 AD |  if_e	jmp	#LR__0490
05d00     84 01 00 FF 
05d04     F9 2C 06 F6 | 	mov	local08, ##@LR__5363
05d08     12 13 02 F6 | 	mov	arg01, local04
05d0c     16 15 02 F6 | 	mov	arg02, local08
05d10     18 AE B1 FD | 	call	#__system___string_cmp
05d14     FD 2E 0A F6 | 	mov	local09, result1 wz
05d18     44 00 90 AD |  if_e	jmp	#LR__0490
05d1c     84 01 00 FF 
05d20     FB 34 06 F6 | 	mov	local12, ##@LR__5364
05d24     1A 2D 02 F6 | 	mov	local08, local12
05d28     12 13 02 F6 | 	mov	arg01, local04
05d2c     16 15 02 F6 | 	mov	arg02, local08
05d30     F8 AD B1 FD | 	call	#__system___string_cmp
05d34     FD 2A 0A F6 | 	mov	local07, result1 wz
05d38     24 00 90 AD |  if_e	jmp	#LR__0490
05d3c     84 01 00 FF 
05d40     FD 36 06 F6 | 	mov	local13, ##@LR__5365
05d44     1B 35 02 F6 | 	mov	local12, local13
05d48     12 13 02 F6 | 	mov	arg01, local04
05d4c     1A 15 02 F6 | 	mov	arg02, local12
05d50     D8 AD B1 FD | 	call	#__system___string_cmp
05d54     FD 2C 0A F6 | 	mov	local08, result1 wz
05d58     00 FA 05 56 |  if_ne	mov	result1, #0
05d5c     0C 00 90 5D |  if_ne	jmp	#LR__0493
05d60                 | LR__0490
05d60     01 26 06 F1 | 	add	local05, #1
05d64     44 FE 9F FD | 	jmp	#LR__0484
05d68                 | LR__0491
05d68                 | LR__0492
05d68                 | ' return true
05d68     01 FA 65 F6 | 	neg	result1, #1
05d6c                 | LR__0493
05d6c     A7 F0 03 F6 | 	mov	ptra, fp
05d70     B2 00 A0 FD | 	call	#popregs_
05d74                 | _isname_ret
05d74     2D 00 64 FD | 	ret
05d78                 | 
05d78                 | ' 
05d78                 | ' ' Check if the part is a number.  
05d78                 | ' 
05d78                 | ' function isnum(s as string) as boolean 
05d78                 | _isnum
05d78     13 4A 05 F6 | 	mov	COUNT_, #19
05d7c     A8 00 A0 FD | 	call	#pushregs_
05d80     09 1F 02 F6 | 	mov	local01, arg01
05d84     00 20 06 F6 | 	mov	local02, #0
05d88     00 22 06 F6 | 	mov	local03, #0
05d8c     0F 13 02 F6 | 	mov	arg01, local01
05d90     09 25 02 F6 | 	mov	local04, arg01
05d94     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05d98                 | LR__0500
05d98     12 FB C9 FA | 	rdbyte	result1, local04 wz
05d9c     01 24 06 51 |  if_ne	add	local04, #1
05da0     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05da4                 | LR__0501
05da4     09 25 82 F1 | 	sub	local04, arg01
05da8     12 FB 01 F6 | 	mov	result1, local04
05dac     FD 26 0A F6 | 	mov	local05, result1 wz
05db0     00 FA 05 A6 |  if_e	mov	result1, #0
05db4     A0 03 90 AD |  if_e	jmp	#LR__0516
05db8     0F 13 02 F6 | 	mov	arg01, local01
05dbc     01 14 06 F6 | 	mov	arg02, #1
05dc0     01 16 06 F6 | 	mov	arg03, #1
05dc4     D0 CE B1 FD | 	call	#__system__Mid_S
05dc8     FD 28 02 F6 | 	mov	local06, result1
05dcc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05dcc     84 01 00 FF 
05dd0     FF 14 06 F6 | 	mov	arg02, ##@LR__5366
05dd4     14 13 02 F6 | 	mov	arg01, local06
05dd8     50 AD B1 FD | 	call	#__system___string_cmp
05ddc     00 FA 55 F2 | 	cmps	result1, #0 wc
05de0     1C 00 90 CD |  if_b	jmp	#LR__0502
05de4     84 01 00 FF 
05de8     01 2B 06 F6 | 	mov	local07, ##@LR__5367
05dec     14 13 02 F6 | 	mov	arg01, local06
05df0     15 15 02 F6 | 	mov	arg02, local07
05df4     34 AD B1 FD | 	call	#__system___string_cmp
05df8     01 FA 55 F2 | 	cmps	result1, #1 wc
05dfc     84 00 90 CD |  if_b	jmp	#LR__0503
05e00                 | LR__0502
05e00     84 01 00 FF 
05e04     03 2D 06 F6 | 	mov	local08, ##@LR__5368
05e08     16 2B 02 F6 | 	mov	local07, local08
05e0c     14 13 02 F6 | 	mov	arg01, local06
05e10     15 15 02 F6 | 	mov	arg02, local07
05e14     14 AD B1 FD | 	call	#__system___string_cmp
05e18     00 FA 0D F2 | 	cmp	result1, #0 wz
05e1c     64 00 90 AD |  if_e	jmp	#LR__0503
05e20     84 01 00 FF 
05e24     05 2F 06 F6 | 	mov	local09, ##@LR__5369
05e28     17 2D 02 F6 | 	mov	local08, local09
05e2c     14 13 02 F6 | 	mov	arg01, local06
05e30     16 15 02 F6 | 	mov	arg02, local08
05e34     F4 AC B1 FD | 	call	#__system___string_cmp
05e38     FD 2A 0A F6 | 	mov	local07, result1 wz
05e3c     44 00 90 AD |  if_e	jmp	#LR__0503
05e40     84 01 00 FF 
05e44     07 31 06 F6 | 	mov	local10, ##@LR__5370
05e48     18 2F 02 F6 | 	mov	local09, local10
05e4c     14 13 02 F6 | 	mov	arg01, local06
05e50     17 15 02 F6 | 	mov	arg02, local09
05e54     D4 AC B1 FD | 	call	#__system___string_cmp
05e58     FD 2C 0A F6 | 	mov	local08, result1 wz
05e5c     24 00 90 AD |  if_e	jmp	#LR__0503
05e60     84 01 00 FF 
05e64     09 33 06 F6 | 	mov	local11, ##@LR__5371
05e68     19 31 02 F6 | 	mov	local10, local11
05e6c     14 13 02 F6 | 	mov	arg01, local06
05e70     18 15 02 F6 | 	mov	arg02, local10
05e74     B4 AC B1 FD | 	call	#__system___string_cmp
05e78     FD 2E 0A F6 | 	mov	local09, result1 wz
05e7c     00 FA 05 56 |  if_ne	mov	result1, #0
05e80     D4 02 90 5D |  if_ne	jmp	#LR__0516
05e84                 | LR__0503
05e84                 | ' if m$="." then ds=1
05e84     84 01 00 FF 
05e88     0B 15 06 F6 | 	mov	arg02, ##@LR__5372
05e8c     14 13 02 F6 | 	mov	arg01, local06
05e90     98 AC B1 FD | 	call	#__system___string_cmp
05e94     00 FA 0D F2 | 	cmp	result1, #0 wz
05e98     01 20 06 A6 |  if_e	mov	local02, #1
05e9c                 | ' if m$="$" then hex=1 else hex=0
05e9c     84 01 00 FF 
05ea0     0D 15 06 F6 | 	mov	arg02, ##@LR__5373
05ea4     14 13 02 F6 | 	mov	arg01, local06
05ea8     80 AC B1 FD | 	call	#__system___string_cmp
05eac     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb0     01 34 06 A6 |  if_e	mov	local12, #1
05eb4     00 34 06 56 |  if_ne	mov	local12, #0
05eb8                 | ' if m$="%" then bin=1 else bin=0
05eb8     84 01 00 FF 
05ebc     0F 15 06 F6 | 	mov	arg02, ##@LR__5374
05ec0     14 13 02 F6 | 	mov	arg01, local06
05ec4     64 AC B1 FD | 	call	#__system___string_cmp
05ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ecc     01 36 06 A6 |  if_e	mov	local13, #1
05ed0     00 36 06 56 |  if_ne	mov	local13, #0
05ed4                 | ' if l>1 then 
05ed4     02 26 56 F2 | 	cmps	local05, #2 wc
05ed8     78 02 90 CD |  if_b	jmp	#LR__0515
05edc                 | '   for i=2 to l
05edc     02 38 06 F6 | 	mov	local14, #2
05ee0     13 3B 02 F6 | 	mov	local15, local05
05ee4     01 3A 06 F1 | 	add	local15, #1
05ee8                 | LR__0504
05ee8     1D 39 52 F2 | 	cmps	local14, local15 wc
05eec     64 02 90 3D |  if_ae	jmp	#LR__0514
05ef0     0F 13 02 F6 | 	mov	arg01, local01
05ef4     1C 15 02 F6 | 	mov	arg02, local14
05ef8     01 16 06 F6 | 	mov	arg03, #1
05efc     98 CD B1 FD | 	call	#__system__Mid_S
05f00     FD 28 02 F6 | 	mov	local06, result1
05f04     00 3C 06 F6 | 	mov	local16, #0
05f08                 | '     m$=mid$(s,i,1) : b=false
05f08                 | '     if m$>="0" andalso m$<="9" then b=true  
05f08     84 01 00 FF 
05f0c     11 15 06 F6 | 	mov	arg02, ##@LR__5375
05f10     14 13 02 F6 | 	mov	arg01, local06
05f14     14 AC B1 FD | 	call	#__system___string_cmp
05f18     00 FA 55 F2 | 	cmps	result1, #0 wc
05f1c     1C 00 90 CD |  if_b	jmp	#LR__0505
05f20     84 01 00 FF 
05f24     13 2B 06 F6 | 	mov	local07, ##@LR__5376
05f28     14 13 02 F6 | 	mov	arg01, local06
05f2c     15 15 02 F6 | 	mov	arg02, local07
05f30     F8 AB B1 FD | 	call	#__system___string_cmp
05f34     01 FA 55 F2 | 	cmps	result1, #1 wc
05f38     01 3C 66 C6 |  if_b	neg	local16, #1
05f3c                 | LR__0505
05f3c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
05f3c     84 01 00 FF 
05f40     15 15 06 F6 | 	mov	arg02, ##@LR__5377
05f44     14 13 02 F6 | 	mov	arg01, local06
05f48     E0 AB B1 FD | 	call	#__system___string_cmp
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     7C 00 90 AD |  if_e	jmp	#LR__0506
05f54     84 01 00 FF 
05f58     17 2B 06 F6 | 	mov	local07, ##@LR__5378
05f5c     14 13 02 F6 | 	mov	arg01, local06
05f60     15 15 02 F6 | 	mov	arg02, local07
05f64     C4 AB B1 FD | 	call	#__system___string_cmp
05f68     00 FA 0D F2 | 	cmp	result1, #0 wz
05f6c     60 00 90 AD |  if_e	jmp	#LR__0506
05f70     84 01 00 FF 
05f74     19 2D 06 F6 | 	mov	local08, ##@LR__5379
05f78     16 2B 02 F6 | 	mov	local07, local08
05f7c     14 13 02 F6 | 	mov	arg01, local06
05f80     15 15 02 F6 | 	mov	arg02, local07
05f84     A4 AB B1 FD | 	call	#__system___string_cmp
05f88     00 FA 0D F2 | 	cmp	result1, #0 wz
05f8c     40 00 90 AD |  if_e	jmp	#LR__0506
05f90     84 01 00 FF 
05f94     1B 2F 06 F6 | 	mov	local09, ##@LR__5380
05f98     17 2D 02 F6 | 	mov	local08, local09
05f9c     14 13 02 F6 | 	mov	arg01, local06
05fa0     16 15 02 F6 | 	mov	arg02, local08
05fa4     84 AB B1 FD | 	call	#__system___string_cmp
05fa8     FD 2A 0A F6 | 	mov	local07, result1 wz
05fac     20 00 90 AD |  if_e	jmp	#LR__0506
05fb0     84 01 00 FF 
05fb4     1D 31 06 F6 | 	mov	local10, ##@LR__5381
05fb8     18 2F 02 F6 | 	mov	local09, local10
05fbc     14 13 02 F6 | 	mov	arg01, local06
05fc0     17 15 02 F6 | 	mov	arg02, local09
05fc4     64 AB B1 FD | 	call	#__system___string_cmp
05fc8     FD 2C 0A F6 | 	mov	local08, result1 wz
05fcc     04 00 90 5D |  if_ne	jmp	#LR__0507
05fd0                 | LR__0506
05fd0     01 3C 66 F6 | 	neg	local16, #1
05fd4                 | LR__0507
05fd4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
05fd4     01 34 0E F2 | 	cmp	local12, #1 wz
05fd8     34 00 90 5D |  if_ne	jmp	#LR__0508
05fdc     84 01 00 FF 
05fe0     1F 15 06 F6 | 	mov	arg02, ##@LR__5382
05fe4     14 13 02 F6 | 	mov	arg01, local06
05fe8     40 AB B1 FD | 	call	#__system___string_cmp
05fec     00 FA 55 F2 | 	cmps	result1, #0 wc
05ff0     1C 00 90 CD |  if_b	jmp	#LR__0508
05ff4     84 01 00 FF 
05ff8     21 2B 06 F6 | 	mov	local07, ##@LR__5383
05ffc     14 13 02 F6 | 	mov	arg01, local06
06000     15 15 02 F6 | 	mov	arg02, local07
06004     24 AB B1 FD | 	call	#__system___string_cmp
06008     01 FA 55 F2 | 	cmps	result1, #1 wc
0600c     01 3C 66 C6 |  if_b	neg	local16, #1
06010                 | LR__0508
06010                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06010     01 36 0E F2 | 	cmp	local13, #1 wz
06014     58 00 90 5D |  if_ne	jmp	#LR__0510
06018     84 01 00 FF 
0601c     23 15 06 F6 | 	mov	arg02, ##@LR__5384
06020     14 13 02 F6 | 	mov	arg01, local06
06024     04 AB B1 FD | 	call	#__system___string_cmp
06028     00 FA 55 F2 | 	cmps	result1, #0 wc
0602c     1C 00 90 CD |  if_b	jmp	#LR__0509
06030     84 01 00 FF 
06034     25 2B 06 F6 | 	mov	local07, ##@LR__5385
06038     14 13 02 F6 | 	mov	arg01, local06
0603c     15 15 02 F6 | 	mov	arg02, local07
06040     E8 AA B1 FD | 	call	#__system___string_cmp
06044     01 FA 55 F2 | 	cmps	result1, #1 wc
06048     24 00 90 CD |  if_b	jmp	#LR__0510
0604c                 | LR__0509
0604c     84 01 00 FF 
06050     27 2D 06 F6 | 	mov	local08, ##@LR__5386
06054     16 2B 02 F6 | 	mov	local07, local08
06058     14 13 02 F6 | 	mov	arg01, local06
0605c     15 15 02 F6 | 	mov	arg02, local07
06060     C8 AA B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     00 FA 05 56 |  if_ne	mov	result1, #0
0606c     E8 00 90 5D |  if_ne	jmp	#LR__0516
06070                 | LR__0510
06070                 | '     if not b then return false
06070     1E 3D 22 F6 | 	not	local16, local16
06074     00 3C 0E F2 | 	cmp	local16, #0 wz
06078     00 FA 05 56 |  if_ne	mov	result1, #0
0607c     D8 00 90 5D |  if_ne	jmp	#LR__0516
06080                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06080     84 01 00 FF 
06084     29 15 06 F6 | 	mov	arg02, ##@LR__5387
06088     14 13 02 F6 | 	mov	arg01, local06
0608c     9C AA B1 FD | 	call	#__system___string_cmp
06090     00 FA 0D F2 | 	cmp	result1, #0 wz
06094     3C 00 90 5D |  if_ne	jmp	#LR__0511
06098     1C 15 02 F6 | 	mov	arg02, local14
0609c     01 14 86 F1 | 	sub	arg02, #1
060a0     0F 13 02 F6 | 	mov	arg01, local01
060a4     01 16 06 F6 | 	mov	arg03, #1
060a8     EC CB B1 FD | 	call	#__system__Mid_S
060ac     FD 12 02 F6 | 	mov	arg01, result1
060b0     DC CD B1 FD | 	call	#__system__LCase_S
060b4     FD 12 02 F6 | 	mov	arg01, result1
060b8     84 01 00 FF 
060bc     2B 2B 06 F6 | 	mov	local07, ##@LR__5388
060c0     15 15 02 F6 | 	mov	arg02, local07
060c4     64 AA B1 FD | 	call	#__system___string_cmp
060c8     00 FA 0D F2 | 	cmp	result1, #0 wz
060cc     00 FA 05 56 |  if_ne	mov	result1, #0
060d0     84 00 90 5D |  if_ne	jmp	#LR__0516
060d4                 | LR__0511
060d4                 | '     if m$="." then ds+=1: if ds>1 then return false
060d4     84 01 00 FF 
060d8     2D 15 06 F6 | 	mov	arg02, ##@LR__5389
060dc     14 13 02 F6 | 	mov	arg01, local06
060e0     48 AA B1 FD | 	call	#__system___string_cmp
060e4     00 FA 0D F2 | 	cmp	result1, #0 wz
060e8     01 20 06 A1 |  if_e	add	local02, #1
060ec     02 20 56 A2 |  if_e	cmps	local02, #2 wc
060f0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
060f4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
060f8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
060f8     84 01 00 FF 
060fc     2F 3F 06 F6 | 	mov	local17, ##@LR__5390
06100     1F 41 02 F6 | 	mov	local18, local17
06104     14 13 02 F6 | 	mov	arg01, local06
06108     20 15 02 F6 | 	mov	arg02, local18
0610c     1C AA B1 FD | 	call	#__system___string_cmp
06110     FD 42 0A F6 | 	mov	local19, result1 wz
06114     20 00 90 AD |  if_e	jmp	#LR__0512
06118     84 01 00 FF 
0611c     31 2B 06 F6 | 	mov	local07, ##@LR__5391
06120     15 3F 02 F6 | 	mov	local17, local07
06124     14 13 02 F6 | 	mov	arg01, local06
06128     1F 15 02 F6 | 	mov	arg02, local17
0612c     FC A9 B1 FD | 	call	#__system___string_cmp
06130     FD 40 0A F6 | 	mov	local18, result1 wz
06134     14 00 90 5D |  if_ne	jmp	#LR__0513
06138                 | LR__0512
06138     01 22 06 F1 | 	add	local03, #1
0613c     00 34 0E F2 | 	cmp	local12, #0 wz
06140     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06144     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06148     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
0614c                 | LR__0513
0614c     01 38 06 F1 | 	add	local14, #1
06150     94 FD 9F FD | 	jmp	#LR__0504
06154                 | LR__0514
06154                 | LR__0515
06154                 | ' return true
06154     01 FA 65 F6 | 	neg	result1, #1
06158                 | LR__0516
06158     A7 F0 03 F6 | 	mov	ptra, fp
0615c     B2 00 A0 FD | 	call	#popregs_
06160                 | _isnum_ret
06160     2D 00 64 FD | 	ret
06164                 | 
06164                 | '   
06164                 | ' ' Check if the part is an integer number.    
06164                 | '   
06164                 | ' function isint(s as string) as boolean
06164                 | _isint
06164     0E 4A 05 F6 | 	mov	COUNT_, #14
06168     A8 00 A0 FD | 	call	#pushregs_
0616c     09 1F 02 F6 | 	mov	local01, arg01
06170     09 21 02 F6 | 	mov	local02, arg01
06174     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06178                 | LR__0520
06178     10 FB C9 FA | 	rdbyte	result1, local02 wz
0617c     01 20 06 51 |  if_ne	add	local02, #1
06180     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06184                 | LR__0521
06184     09 21 82 F1 | 	sub	local02, arg01
06188     10 FB 01 F6 | 	mov	result1, local02
0618c     FD 22 0A F6 | 	mov	local03, result1 wz
06190     00 FA 05 A6 |  if_e	mov	result1, #0
06194     64 02 90 AD |  if_e	jmp	#LR__0534
06198     0F 13 02 F6 | 	mov	arg01, local01
0619c     01 14 06 F6 | 	mov	arg02, #1
061a0     01 16 06 F6 | 	mov	arg03, #1
061a4     F0 CA B1 FD | 	call	#__system__Mid_S
061a8     FD 24 02 F6 | 	mov	local04, result1
061ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
061ac     84 01 00 FF 
061b0     33 15 06 F6 | 	mov	arg02, ##@LR__5392
061b4     12 13 02 F6 | 	mov	arg01, local04
061b8     70 A9 B1 FD | 	call	#__system___string_cmp
061bc     00 FA 55 F2 | 	cmps	result1, #0 wc
061c0     1C 00 90 CD |  if_b	jmp	#LR__0522
061c4     84 01 00 FF 
061c8     35 27 06 F6 | 	mov	local05, ##@LR__5393
061cc     12 13 02 F6 | 	mov	arg01, local04
061d0     13 15 02 F6 | 	mov	arg02, local05
061d4     54 A9 B1 FD | 	call	#__system___string_cmp
061d8     01 FA 55 F2 | 	cmps	result1, #1 wc
061dc     64 00 90 CD |  if_b	jmp	#LR__0523
061e0                 | LR__0522
061e0     84 01 00 FF 
061e4     37 29 06 F6 | 	mov	local06, ##@LR__5394
061e8     14 27 02 F6 | 	mov	local05, local06
061ec     12 13 02 F6 | 	mov	arg01, local04
061f0     13 15 02 F6 | 	mov	arg02, local05
061f4     34 A9 B1 FD | 	call	#__system___string_cmp
061f8     00 FA 0D F2 | 	cmp	result1, #0 wz
061fc     44 00 90 AD |  if_e	jmp	#LR__0523
06200     84 01 00 FF 
06204     39 2B 06 F6 | 	mov	local07, ##@LR__5395
06208     15 29 02 F6 | 	mov	local06, local07
0620c     12 13 02 F6 | 	mov	arg01, local04
06210     14 15 02 F6 | 	mov	arg02, local06
06214     14 A9 B1 FD | 	call	#__system___string_cmp
06218     FD 26 0A F6 | 	mov	local05, result1 wz
0621c     24 00 90 AD |  if_e	jmp	#LR__0523
06220     84 01 00 FF 
06224     3B 2D 06 F6 | 	mov	local08, ##@LR__5396
06228     16 2B 02 F6 | 	mov	local07, local08
0622c     12 13 02 F6 | 	mov	arg01, local04
06230     15 15 02 F6 | 	mov	arg02, local07
06234     F4 A8 B1 FD | 	call	#__system___string_cmp
06238     FD 28 0A F6 | 	mov	local06, result1 wz
0623c     00 FA 05 56 |  if_ne	mov	result1, #0
06240     B8 01 90 5D |  if_ne	jmp	#LR__0534
06244                 | LR__0523
06244                 | ' if m$="$" then hex=1 else hex=0
06244     84 01 00 FF 
06248     3D 15 06 F6 | 	mov	arg02, ##@LR__5397
0624c     12 13 02 F6 | 	mov	arg01, local04
06250     D8 A8 B1 FD | 	call	#__system___string_cmp
06254     00 FA 0D F2 | 	cmp	result1, #0 wz
06258     01 2E 06 A6 |  if_e	mov	local09, #1
0625c     00 2E 06 56 |  if_ne	mov	local09, #0
06260                 | ' if m$="%" then bin=1 else bin=0
06260     84 01 00 FF 
06264     3F 15 06 F6 | 	mov	arg02, ##@LR__5398
06268     12 13 02 F6 | 	mov	arg01, local04
0626c     BC A8 B1 FD | 	call	#__system___string_cmp
06270     00 FA 0D F2 | 	cmp	result1, #0 wz
06274     01 30 06 A6 |  if_e	mov	local10, #1
06278     00 30 06 56 |  if_ne	mov	local10, #0
0627c                 | ' if l>1 then 
0627c     02 22 56 F2 | 	cmps	local03, #2 wc
06280     74 01 90 CD |  if_b	jmp	#LR__0533
06284                 | '   for i=2 to l
06284     02 32 06 F6 | 	mov	local11, #2
06288     11 35 02 F6 | 	mov	local12, local03
0628c     01 34 06 F1 | 	add	local12, #1
06290                 | LR__0524
06290     1A 33 52 F2 | 	cmps	local11, local12 wc
06294     60 01 90 3D |  if_ae	jmp	#LR__0532
06298     0F 13 02 F6 | 	mov	arg01, local01
0629c     19 15 02 F6 | 	mov	arg02, local11
062a0     01 16 06 F6 | 	mov	arg03, #1
062a4     F0 C9 B1 FD | 	call	#__system__Mid_S
062a8     FD 24 02 F6 | 	mov	local04, result1
062ac                 | '     m$=mid$(s,i,1) 
062ac                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
062ac     00 2E 0E F2 | 	cmp	local09, #0 wz
062b0     50 00 90 5D |  if_ne	jmp	#LR__0526
062b4     84 01 00 FF 
062b8     41 15 06 F6 | 	mov	arg02, ##@LR__5399
062bc     12 13 02 F6 | 	mov	arg01, local04
062c0     68 A8 B1 FD | 	call	#__system___string_cmp
062c4     00 FA 55 F2 | 	cmps	result1, #0 wc
062c8     18 00 90 CD |  if_b	jmp	#LR__0525
062cc     84 01 00 FF 
062d0     43 15 06 F6 | 	mov	arg02, ##@LR__5400
062d4     12 13 02 F6 | 	mov	arg01, local04
062d8     50 A8 B1 FD | 	call	#__system___string_cmp
062dc     01 FA 55 F2 | 	cmps	result1, #1 wc
062e0     20 00 90 CD |  if_b	jmp	#LR__0526
062e4                 | LR__0525
062e4     84 01 00 FF 
062e8     45 29 06 F6 | 	mov	local06, ##@LR__5401
062ec     12 13 02 F6 | 	mov	arg01, local04
062f0     14 15 02 F6 | 	mov	arg02, local06
062f4     34 A8 B1 FD | 	call	#__system___string_cmp
062f8     00 FA 0D F2 | 	cmp	result1, #0 wz
062fc     00 FA 05 56 |  if_ne	mov	result1, #0
06300     F8 00 90 5D |  if_ne	jmp	#LR__0534
06304                 | LR__0526
06304                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06304     01 2E 0E F2 | 	cmp	local09, #1 wz
06308     90 00 90 5D |  if_ne	jmp	#LR__0529
0630c     84 01 00 FF 
06310     47 15 06 F6 | 	mov	arg02, ##@LR__5402
06314     12 13 02 F6 | 	mov	arg01, local04
06318     10 A8 B1 FD | 	call	#__system___string_cmp
0631c     00 FA 55 F2 | 	cmps	result1, #0 wc
06320     1C 00 90 CD |  if_b	jmp	#LR__0527
06324     84 01 00 FF 
06328     49 15 06 F6 | 	mov	arg02, ##@LR__5403
0632c     12 13 02 F6 | 	mov	arg01, local04
06330     F8 A7 B1 FD | 	call	#__system___string_cmp
06334     FD 36 02 F6 | 	mov	local13, result1
06338     01 36 56 F2 | 	cmps	local13, #1 wc
0633c     5C 00 90 CD |  if_b	jmp	#LR__0529
06340                 | LR__0527
06340     84 01 00 FF 
06344     4B 27 06 F6 | 	mov	local05, ##@LR__5404
06348     12 13 02 F6 | 	mov	arg01, local04
0634c     13 15 02 F6 | 	mov	arg02, local05
06350     D8 A7 B1 FD | 	call	#__system___string_cmp
06354     FD 38 02 F6 | 	mov	local14, result1
06358     00 38 56 F2 | 	cmps	local14, #0 wc
0635c     1C 00 90 CD |  if_b	jmp	#LR__0528
06360     84 01 00 FF 
06364     4D 2B 06 F6 | 	mov	local07, ##@LR__5405
06368     12 13 02 F6 | 	mov	arg01, local04
0636c     15 15 02 F6 | 	mov	arg02, local07
06370     B8 A7 B1 FD | 	call	#__system___string_cmp
06374     01 FA 55 F2 | 	cmps	result1, #1 wc
06378     20 00 90 CD |  if_b	jmp	#LR__0529
0637c                 | LR__0528
0637c     84 01 00 FF 
06380     4F 2D 06 F6 | 	mov	local08, ##@LR__5406
06384     12 13 02 F6 | 	mov	arg01, local04
06388     16 15 02 F6 | 	mov	arg02, local08
0638c     9C A7 B1 FD | 	call	#__system___string_cmp
06390     00 FA 0D F2 | 	cmp	result1, #0 wz
06394     00 FA 05 56 |  if_ne	mov	result1, #0
06398     60 00 90 5D |  if_ne	jmp	#LR__0534
0639c                 | LR__0529
0639c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0639c     01 30 0E F2 | 	cmp	local10, #1 wz
063a0     4C 00 90 5D |  if_ne	jmp	#LR__0531
063a4     84 01 00 FF 
063a8     51 15 06 F6 | 	mov	arg02, ##@LR__5407
063ac     12 13 02 F6 | 	mov	arg01, local04
063b0     78 A7 B1 FD | 	call	#__system___string_cmp
063b4     00 FA 55 F2 | 	cmps	result1, #0 wc
063b8     18 00 90 CD |  if_b	jmp	#LR__0530
063bc     84 01 00 FF 
063c0     53 15 06 F6 | 	mov	arg02, ##@LR__5408
063c4     12 13 02 F6 | 	mov	arg01, local04
063c8     60 A7 B1 FD | 	call	#__system___string_cmp
063cc     01 FA 55 F2 | 	cmps	result1, #1 wc
063d0     1C 00 90 CD |  if_b	jmp	#LR__0531
063d4                 | LR__0530
063d4     84 01 00 FF 
063d8     55 15 06 F6 | 	mov	arg02, ##@LR__5409
063dc     12 13 02 F6 | 	mov	arg01, local04
063e0     48 A7 B1 FD | 	call	#__system___string_cmp
063e4     00 FA 0D F2 | 	cmp	result1, #0 wz
063e8     00 FA 05 56 |  if_ne	mov	result1, #0
063ec     0C 00 90 5D |  if_ne	jmp	#LR__0534
063f0                 | LR__0531
063f0     01 32 06 F1 | 	add	local11, #1
063f4     98 FE 9F FD | 	jmp	#LR__0524
063f8                 | LR__0532
063f8                 | LR__0533
063f8                 | ' return true
063f8     01 FA 65 F6 | 	neg	result1, #1
063fc                 | LR__0534
063fc     A7 F0 03 F6 | 	mov	ptra, fp
06400     B2 00 A0 FD | 	call	#popregs_
06404                 | _isint_ret
06404     2D 00 64 FD | 	ret
06408                 | 
06408                 | ' 
06408                 | ' ' Check if the part is a positive decimal number.  
06408                 | ' 
06408                 | ' function isdec(s as string) as boolean
06408                 | _isdec
06408     05 4A 05 F6 | 	mov	COUNT_, #5
0640c     A8 00 A0 FD | 	call	#pushregs_
06410     09 1F 02 F6 | 	mov	local01, arg01
06414     09 21 02 F6 | 	mov	local02, arg01
06418     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0641c                 | LR__0540
0641c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06420     01 20 06 51 |  if_ne	add	local02, #1
06424     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06428                 | LR__0541
06428     09 21 82 F1 | 	sub	local02, arg01
0642c     10 FB 01 F6 | 	mov	result1, local02
06430     FD 20 0A F6 | 	mov	local02, result1 wz
06434     00 FA 05 A6 |  if_e	mov	result1, #0
06438     80 00 90 AD |  if_e	jmp	#LR__0546
0643c                 | ' for i=1 to l
0643c     01 22 06 F6 | 	mov	local03, #1
06440     10 25 02 F6 | 	mov	local04, local02
06444     01 24 06 F1 | 	add	local04, #1
06448                 | LR__0542
06448     12 23 52 F2 | 	cmps	local03, local04 wc
0644c     68 00 90 3D |  if_ae	jmp	#LR__0545
06450     0F 13 02 F6 | 	mov	arg01, local01
06454     11 15 02 F6 | 	mov	arg02, local03
06458     01 16 06 F6 | 	mov	arg03, #1
0645c     38 C8 B1 FD | 	call	#__system__Mid_S
06460     FD 26 02 F6 | 	mov	local05, result1
06464                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06464     84 01 00 FF 
06468     57 15 06 F6 | 	mov	arg02, ##@LR__5410
0646c     13 13 02 F6 | 	mov	arg01, local05
06470     B8 A6 B1 FD | 	call	#__system___string_cmp
06474     00 FA 55 F2 | 	cmps	result1, #0 wc
06478     18 00 90 CD |  if_b	jmp	#LR__0543
0647c     84 01 00 FF 
06480     59 15 06 F6 | 	mov	arg02, ##@LR__5411
06484     13 13 02 F6 | 	mov	arg01, local05
06488     A0 A6 B1 FD | 	call	#__system___string_cmp
0648c     01 FA 55 F2 | 	cmps	result1, #1 wc
06490     1C 00 90 CD |  if_b	jmp	#LR__0544
06494                 | LR__0543
06494     84 01 00 FF 
06498     5B 15 06 F6 | 	mov	arg02, ##@LR__5412
0649c     13 13 02 F6 | 	mov	arg01, local05
064a0     88 A6 B1 FD | 	call	#__system___string_cmp
064a4     00 FA 0D F2 | 	cmp	result1, #0 wz
064a8     00 FA 05 56 |  if_ne	mov	result1, #0
064ac     0C 00 90 5D |  if_ne	jmp	#LR__0546
064b0                 | LR__0544
064b0     01 22 06 F1 | 	add	local03, #1
064b4     90 FF 9F FD | 	jmp	#LR__0542
064b8                 | LR__0545
064b8                 | ' return true
064b8     01 FA 65 F6 | 	neg	result1, #1
064bc                 | LR__0546
064bc     A7 F0 03 F6 | 	mov	ptra, fp
064c0     B2 00 A0 FD | 	call	#popregs_
064c4                 | _isdec_ret
064c4     2D 00 64 FD | 	ret
064c8                 | 
064c8                 | ' 
064c8                 | ' ' Check if the part is a string.  
064c8                 | ' 
064c8                 | ' function isstring(s as string) as boolean
064c8                 | _isstring
064c8     01 4A 05 F6 | 	mov	COUNT_, #1
064cc     A8 00 A0 FD | 	call	#pushregs_
064d0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
064d0     09 1F 02 F6 | 	mov	local01, arg01
064d4     01 14 06 F6 | 	mov	arg02, #1
064d8     A4 C6 B1 FD | 	call	#__system__Left_S
064dc     FD 12 02 F6 | 	mov	arg01, result1
064e0     84 01 00 FF 
064e4     5D 15 06 F6 | 	mov	arg02, ##@LR__5413
064e8     40 A6 B1 FD | 	call	#__system___string_cmp
064ec     00 FA 4D F2 | 	cmps	result1, #0 wz
064f0     28 00 90 5D |  if_ne	jmp	#LR__0550
064f4     0F 13 02 F6 | 	mov	arg01, local01
064f8     01 14 06 F6 | 	mov	arg02, #1
064fc     08 C7 B1 FD | 	call	#__system__Right_S
06500     FD 12 02 F6 | 	mov	arg01, result1
06504     84 01 00 FF 
06508     5F 15 06 F6 | 	mov	arg02, ##@LR__5414
0650c     1C A6 B1 FD | 	call	#__system___string_cmp
06510     00 FA 4D F2 | 	cmps	result1, #0 wz
06514     01 FA 65 A6 |  if_e	neg	result1, #1
06518     04 00 90 AD |  if_e	jmp	#LR__0551
0651c                 | LR__0550
0651c     00 FA 05 F6 | 	mov	result1, #0
06520                 | LR__0551
06520     A7 F0 03 F6 | 	mov	ptra, fp
06524     B2 00 A0 FD | 	call	#popregs_
06528                 | _isstring_ret
06528     2D 00 64 FD | 	ret
0652c                 | 
0652c                 | ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' '
0652c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0652c                 | ' '
0652c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0652c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0652c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0652c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0652c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0652c                 | ' ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' 
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' ' Helper functions to manage program lines
0652c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0652c                 | ' 
0652c                 | ' '----- delete a line from a program
0652c                 | ' 
0652c                 | ' function deleteline(aline as ulong) as integer
0652c                 | _deleteline
0652c     02 4A 05 F6 | 	mov	COUNT_, #2
06530     A8 00 A0 FD | 	call	#pushregs_
06534     2C F0 07 F1 | 	add	ptra, #44
06538     04 4E 05 F1 | 	add	fp, #4
0653c     A7 12 62 FC | 	wrlong	arg01, fp
06540     4A 00 00 FF 
06544     84 E4 05 F1 | 	add	objptr, ##38020
06548     F2 1E 02 FB | 	rdlong	local01, objptr
0654c     0C 4E 05 F1 | 	add	fp, #12
06550     A7 1E 62 FC | 	wrlong	local01, fp
06554     10 4E 85 F1 | 	sub	fp, #16
06558                 | ' 
06558                 | ' searchptr=programstart
06558                 | ' do
06558     3E 00 00 FF 
0655c     B8 E5 85 F1 | 	sub	objptr, ##32184
06560                 | LR__0560
06560     14 4E 05 F1 | 	add	fp, #20
06564     A7 12 02 F6 | 	mov	arg01, fp
06568     04 4E 85 F1 | 	sub	fp, #4
0656c     A7 14 02 FB | 	rdlong	arg02, fp
06570     10 4E 85 F1 | 	sub	fp, #16
06574     18 16 06 F6 | 	mov	arg03, #24
06578     48 99 B1 FD | 	call	#_psram_spin2_read1
0657c     10 4E 05 F1 | 	add	fp, #16
06580     A7 1E 02 FB | 	rdlong	local01, fp
06584     08 4E 85 F1 | 	sub	fp, #8
06588     A7 1E 62 FC | 	wrlong	local01, fp
0658c     20 4E 05 F1 | 	add	fp, #32
06590     A7 1E 02 FB | 	rdlong	local01, fp
06594     18 4E 85 F1 | 	sub	fp, #24
06598     A7 1E 62 FC | 	wrlong	local01, fp
0659c     04 4E 05 F1 | 	add	fp, #4
065a0     A7 1E 02 FB | 	rdlong	local01, fp
065a4     10 4E 85 F1 | 	sub	fp, #16
065a8     A7 16 02 FB | 	rdlong	arg03, fp
065ac     04 4E 85 F1 | 	sub	fp, #4
065b0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
065b4     28 4E 05 C1 |  if_b	add	fp, #40
065b8     A7 20 02 CB |  if_b	rdlong	local02, fp
065bc     28 4E 85 C1 |  if_b	sub	fp, #40
065c0     FF FF 3F CF 
065c4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
065c8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
065cc     0B 00 00 FF 
065d0     CC E4 85 F1 | 	sub	objptr, ##5836
065d4                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
065d4     14 4E 05 F1 | 	add	fp, #20
065d8     A7 1E 02 FB | 	rdlong	local01, fp
065dc     10 4E 85 F1 | 	sub	fp, #16
065e0     A7 20 02 FB | 	rdlong	local02, fp
065e4     04 4E 85 F1 | 	sub	fp, #4
065e8     10 1F 0A F2 | 	cmp	local01, local02 wz
065ec     01 FA 65 56 |  if_ne	neg	result1, #1
065f0     34 02 90 5D |  if_ne	jmp	#LR__0565
065f4     08 4E 05 F1 | 	add	fp, #8
065f8     A7 12 02 FB | 	rdlong	arg01, fp
065fc     08 4E 85 F1 | 	sub	fp, #8
06600     01 14 66 F6 | 	neg	arg02, #1
06604     C8 70 B1 FD | 	call	#_pslpoke
06608                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06608                 | ' 
06608                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06608     28 4E 05 F1 | 	add	fp, #40
0660c     A7 1E 02 FB | 	rdlong	local01, fp
06610     28 4E 85 F1 | 	sub	fp, #40
06614     FF FF 3F FF 
06618     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0661c     24 4E 05 A1 |  if_e	add	fp, #36
06620     A7 20 02 AB |  if_e	rdlong	local02, fp
06624     24 4E 85 A1 |  if_e	sub	fp, #36
06628     FF FF 7F AF 
0662c     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
06630     88 00 90 5D |  if_ne	jmp	#LR__0561
06634     4A 00 00 FF 
06638     84 E4 05 F1 | 	add	objptr, ##38020
0663c     00 04 80 FF 
06640     F2 00 68 FC | 	wrlong	##524288, objptr
06644     07 00 00 FF 
06648     28 E4 85 F1 | 	sub	objptr, ##3624
0664c     00 04 80 FF 
06650     F2 00 68 FC | 	wrlong	##524288, objptr
06654     07 00 00 FF 
06658     2C E4 05 F1 | 	add	objptr, ##3628
0665c     F2 00 68 FC | 	wrlong	#0, objptr
06660     04 E4 05 F1 | 	add	objptr, #4
06664     FF FF FF FF 
06668     F2 FE 6B FC | 	wrlong	##-1, objptr
0666c     4A 00 00 FF 
06670     8C E4 85 F1 | 	sub	objptr, ##38028
06674     00 12 06 F6 | 	mov	arg01, #0
06678     01 14 66 F6 | 	neg	arg02, #1
0667c     50 70 B1 FD | 	call	#_pslpoke
06680     10 12 06 F6 | 	mov	arg01, #16
06684     01 14 66 F6 | 	neg	arg02, #1
06688     44 70 B1 FD | 	call	#_pslpoke
0668c     14 12 06 F6 | 	mov	arg01, #20
06690     1E 14 CE F9 | 	bmask	arg02, #30
06694     38 70 B1 FD | 	call	#_pslpoke
06698     50 00 00 FF 
0669c     B4 E4 05 F1 | 	add	objptr, ##41140
066a0     00 04 80 FF 
066a4     F2 00 68 FC | 	wrlong	##524288, objptr
066a8     04 E4 05 F1 | 	add	objptr, #4
066ac     00 04 80 FF 
066b0     F2 00 68 FC | 	wrlong	##524288, objptr
066b4     50 00 00 FF 
066b8     B8 E4 85 F1 | 	sub	objptr, ##41144
066bc                 | LR__0561
066bc                 | ' 
066bc                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
066bc     28 4E 05 F1 | 	add	fp, #40
066c0     A7 1E 02 FB | 	rdlong	local01, fp
066c4     28 4E 85 F1 | 	sub	fp, #40
066c8     FF FF 3F FF 
066cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
066d0     74 00 90 5D |  if_ne	jmp	#LR__0562
066d4     24 4E 05 F1 | 	add	fp, #36
066d8     A7 20 02 FB | 	rdlong	local02, fp
066dc     24 4E 85 F1 | 	sub	fp, #36
066e0     FF FF 7F FF 
066e4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
066e8     5C 00 90 AD |  if_e	jmp	#LR__0562
066ec     24 4E 05 F1 | 	add	fp, #36
066f0     A7 12 02 FB | 	rdlong	arg01, fp
066f4     24 4E 85 F1 | 	sub	fp, #36
066f8     14 12 06 F1 | 	add	arg01, #20
066fc     1E 14 CE F9 | 	bmask	arg02, #30
06700     CC 6F B1 FD | 	call	#_pslpoke
06704     24 4E 05 F1 | 	add	fp, #36
06708     A7 1E 02 FB | 	rdlong	local01, fp
0670c     4A 00 00 FF 
06710     8C E4 05 F1 | 	add	objptr, ##38028
06714     F2 1E 62 FC | 	wrlong	local01, objptr
06718     4A 00 00 FF 
0671c     8C E4 85 F1 | 	sub	objptr, ##38028
06720     A7 12 02 FB | 	rdlong	arg01, fp
06724     24 4E 85 F1 | 	sub	fp, #36
06728     D4 70 B1 FD | 	call	#_pslpeek
0672c     4A 00 00 FF 
06730     88 E4 05 F1 | 	add	objptr, ##38024
06734     F2 FA 61 FC | 	wrlong	result1, objptr
06738     4A 00 00 FF 
0673c     88 E4 85 F1 | 	sub	objptr, ##38024
06740                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06740                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06740                 | '   lastline=pslpeek(header(4))
06740                 | '   return 0
06740     00 FA 05 F6 | 	mov	result1, #0
06744     E0 00 90 FD | 	jmp	#LR__0565
06748                 | LR__0562
06748                 | ' 
06748                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06748     28 4E 05 F1 | 	add	fp, #40
0674c     A7 1E 02 FB | 	rdlong	local01, fp
06750     28 4E 85 F1 | 	sub	fp, #40
06754     FF FF 3F FF 
06758     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0675c     58 00 90 AD |  if_e	jmp	#LR__0563
06760     24 4E 05 F1 | 	add	fp, #36
06764     A7 20 02 FB | 	rdlong	local02, fp
06768     24 4E 85 F1 | 	sub	fp, #36
0676c     FF FF 7F FF 
06770     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06774     40 00 90 5D |  if_ne	jmp	#LR__0563
06778     28 4E 05 F1 | 	add	fp, #40
0677c     A7 12 02 FB | 	rdlong	arg01, fp
06780     28 4E 85 F1 | 	sub	fp, #40
06784     10 12 06 F1 | 	add	arg01, #16
06788     01 14 66 F6 | 	neg	arg02, #1
0678c     40 6F B1 FD | 	call	#_pslpoke
06790     28 4E 05 F1 | 	add	fp, #40
06794     A7 1E 02 FB | 	rdlong	local01, fp
06798     28 4E 85 F1 | 	sub	fp, #40
0679c     4A 00 00 FF 
067a0     84 E4 05 F1 | 	add	objptr, ##38020
067a4     F2 1E 62 FC | 	wrlong	local01, objptr
067a8     4A 00 00 FF 
067ac     84 E4 85 F1 | 	sub	objptr, ##38020
067b0                 | ' '   print "deleted first line"
067b0                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
067b0                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
067b0                 | '   return 0
067b0     00 FA 05 F6 | 	mov	result1, #0
067b4     70 00 90 FD | 	jmp	#LR__0565
067b8                 | LR__0563
067b8                 | ' 
067b8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
067b8     28 4E 05 F1 | 	add	fp, #40
067bc     A7 1E 02 FB | 	rdlong	local01, fp
067c0     28 4E 85 F1 | 	sub	fp, #40
067c4     FF FF 3F FF 
067c8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
067cc     24 4E 05 51 |  if_ne	add	fp, #36
067d0     A7 20 02 5B |  if_ne	rdlong	local02, fp
067d4     24 4E 85 51 |  if_ne	sub	fp, #36
067d8     FF FF 7F 5F 
067dc     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
067e0     40 00 90 AD |  if_e	jmp	#LR__0564
067e4     28 4E 05 F1 | 	add	fp, #40
067e8     A7 12 02 FB | 	rdlong	arg01, fp
067ec     10 12 06 F1 | 	add	arg01, #16
067f0     04 4E 85 F1 | 	sub	fp, #4
067f4     A7 14 02 FB | 	rdlong	arg02, fp
067f8     24 4E 85 F1 | 	sub	fp, #36
067fc     D0 6E B1 FD | 	call	#_pslpoke
06800     24 4E 05 F1 | 	add	fp, #36
06804     A7 12 02 FB | 	rdlong	arg01, fp
06808     14 12 06 F1 | 	add	arg01, #20
0680c     04 4E 05 F1 | 	add	fp, #4
06810     A7 14 02 FB | 	rdlong	arg02, fp
06814     28 4E 85 F1 | 	sub	fp, #40
06818     B4 6E B1 FD | 	call	#_pslpoke
0681c                 | '    pslpoke(header(5)+16,header(4))  
0681c                 | '    pslpoke(header(4)+20, header(5))
0681c                 | '    return 0
0681c     00 FA 05 F6 | 	mov	result1, #0
06820     04 00 90 FD | 	jmp	#LR__0565
06824                 | LR__0564
06824     00 FA 05 F6 | 	mov	result1, #0
06828                 | LR__0565
06828     A7 F0 03 F6 | 	mov	ptra, fp
0682c     B2 00 A0 FD | 	call	#popregs_
06830                 | _deleteline_ret
06830     2D 00 64 FD | 	ret
06834                 | 
06834                 | ' 
06834                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06834                 | ' 
06834                 | ' sub save_line
06834                 | _save_line
06834     03 4A 05 F6 | 	mov	COUNT_, #3
06838     A8 00 A0 FD | 	call	#pushregs_
0683c     4A 00 00 FF 
06840     7C E4 05 F1 | 	add	objptr, ##38012
06844     F2 16 02 FB | 	rdlong	arg03, objptr
06848     01 16 06 F1 | 	add	arg03, #1
0684c     05 00 00 FF 
06850     18 E4 85 F1 | 	sub	objptr, ##2584
06854     F2 14 02 FB | 	rdlong	arg02, objptr
06858     0B 15 02 FD | 	qmul	arg02, arg03
0685c     0E 00 00 FF 
06860     44 E4 85 F1 | 	sub	objptr, ##7236
06864     F2 12 02 FB | 	rdlong	arg01, objptr
06868     37 00 00 FF 
0686c     20 E4 85 F1 | 	sub	objptr, ##28192
06870     09 1F 02 F6 | 	mov	local01, arg01
06874     18 20 62 FD | 	getqx	local02
06878     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
0687c                 | LR__0570
0687c     0F FB C9 FA | 	rdbyte	result1, local01 wz
06880     01 1E 06 51 |  if_ne	add	local01, #1
06884     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06888                 | LR__0571
06888     09 1F 82 F1 | 	sub	local01, arg01
0688c     03 1E CE F7 | 	test	local01, #3 wz
06890     02 1E 46 50 |  if_ne	shr	local01, #2
06894     01 1E 06 51 |  if_ne	add	local01, #1
06898     02 1E 66 50 |  if_ne	shl	local01, #2
0689c     10 23 02 F6 | 	mov	local03, local02
068a0     0F 23 02 F1 | 	add	local03, local01
068a4     43 00 00 FF 
068a8     5C E4 05 F1 | 	add	objptr, ##34396
068ac     F2 16 02 FB | 	rdlong	arg03, objptr
068b0     10 17 02 F1 | 	add	arg03, local02
068b4     04 00 00 FF 
068b8     28 E4 05 F1 | 	add	objptr, ##2088
068bc     F2 16 62 FC | 	wrlong	arg03, objptr
068c0     04 E4 05 F1 | 	add	objptr, #4
068c4     F2 1E 62 FC | 	wrlong	local01, objptr
068c8     0C E4 85 F1 | 	sub	objptr, #12
068cc     F2 12 02 F6 | 	mov	arg01, objptr
068d0     04 00 00 FF 
068d4     20 E4 85 F1 | 	sub	objptr, ##2080
068d8     F2 14 02 FB | 	rdlong	arg02, objptr
068dc     10 17 02 F6 | 	mov	arg03, local02
068e0     37 00 00 FF 
068e4     90 E5 85 F1 | 	sub	objptr, ##28560
068e8     74 96 B1 FD | 	call	#_psram_spin2_write
068ec     2B 00 00 FF 
068f0     54 E5 05 F1 | 	add	objptr, ##22356
068f4     F2 12 02 FB | 	rdlong	arg01, objptr
068f8     0C 00 00 FF 
068fc     3C E4 05 F1 | 	add	objptr, ##6204
06900     F2 14 02 FB | 	rdlong	arg02, objptr
06904     10 15 02 F1 | 	add	arg02, local02
06908     0F 17 02 F6 | 	mov	arg03, local01
0690c     37 00 00 FF 
06910     90 E5 85 F1 | 	sub	objptr, ##28560
06914     48 96 B1 FD | 	call	#_psram_spin2_write
06918     37 00 00 FF 
0691c     90 E5 05 F1 | 	add	objptr, ##28560
06920     F2 1E 02 FB | 	rdlong	local01, objptr
06924     11 1F 02 F1 | 	add	local01, local03
06928     F2 1E 62 FC | 	wrlong	local01, objptr
0692c     43 00 00 FF 
06930     5C E4 85 F1 | 	sub	objptr, ##34396
06934     A7 F0 03 F6 | 	mov	ptra, fp
06938     B2 00 A0 FD | 	call	#popregs_
0693c                 | _save_line_ret
0693c     2D 00 64 FD | 	ret
06940                 | 
06940                 | ' 
06940                 | ' '----- Insert a new line into the middle of the program
06940                 | ' 
06940                 | ' function insertline(aline as ulong) as integer
06940                 | _insertline
06940     02 4A 05 F6 | 	mov	COUNT_, #2
06944     A8 00 A0 FD | 	call	#pushregs_
06948     28 F0 07 F1 | 	add	ptra, #40
0694c     04 4E 05 F1 | 	add	fp, #4
06950     A7 12 62 FC | 	wrlong	arg01, fp
06954     4A 00 00 FF 
06958     84 E4 05 F1 | 	add	objptr, ##38020
0695c     F2 1E 02 FB | 	rdlong	local01, objptr
06960     04 4E 05 F1 | 	add	fp, #4
06964     A7 1E 62 FC | 	wrlong	local01, fp
06968     08 4E 85 F1 | 	sub	fp, #8
0696c                 | ' 
0696c                 | ' do
0696c     3E 00 00 FF 
06970     B8 E5 85 F1 | 	sub	objptr, ##32184
06974                 | LR__0580
06974     10 4E 05 F1 | 	add	fp, #16
06978     A7 12 02 F6 | 	mov	arg01, fp
0697c     08 4E 85 F1 | 	sub	fp, #8
06980     A7 14 02 FB | 	rdlong	arg02, fp
06984     08 4E 85 F1 | 	sub	fp, #8
06988     18 16 06 F6 | 	mov	arg03, #24
0698c     34 95 B1 FD | 	call	#_psram_spin2_read1
06990     08 4E 05 F1 | 	add	fp, #8
06994     A7 1E 02 FB | 	rdlong	local01, fp
06998     04 4E 05 F1 | 	add	fp, #4
0699c     A7 1E 62 FC | 	wrlong	local01, fp
069a0     18 4E 05 F1 | 	add	fp, #24
069a4     A7 1E 02 FB | 	rdlong	local01, fp
069a8     1C 4E 85 F1 | 	sub	fp, #28
069ac     A7 1E 62 FC | 	wrlong	local01, fp
069b0     08 4E 05 F1 | 	add	fp, #8
069b4     A7 1E 02 FB | 	rdlong	local01, fp
069b8     0C 4E 85 F1 | 	sub	fp, #12
069bc     A7 16 02 FB | 	rdlong	arg03, fp
069c0     04 4E 85 F1 | 	sub	fp, #4
069c4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
069c8     24 4E 05 C1 |  if_b	add	fp, #36
069cc     A7 20 02 CB |  if_b	rdlong	local02, fp
069d0     24 4E 85 C1 |  if_b	sub	fp, #36
069d4     FF FF 3F CF 
069d8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
069dc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
069e0     0B 00 00 FF 
069e4     CC E4 85 F1 | 	sub	objptr, ##5836
069e8                 | ' 
069e8                 | ' if header(0)=aline then return -1 				' delete it first
069e8     10 4E 05 F1 | 	add	fp, #16
069ec     A7 1E 02 FB | 	rdlong	local01, fp
069f0     0C 4E 85 F1 | 	sub	fp, #12
069f4     A7 20 02 FB | 	rdlong	local02, fp
069f8     04 4E 85 F1 | 	sub	fp, #4
069fc     10 1F 0A F2 | 	cmp	local01, local02 wz
06a00     01 FA 65 A6 |  if_e	neg	result1, #1
06a04     48 01 90 AD |  if_e	jmp	#LR__0583
06a08                 | ' if header(0)<aline then return -2 				' end of program reached
06a08     10 4E 05 F1 | 	add	fp, #16
06a0c     A7 1E 02 FB | 	rdlong	local01, fp
06a10     0C 4E 85 F1 | 	sub	fp, #12
06a14     A7 16 02 FB | 	rdlong	arg03, fp
06a18     04 4E 85 F1 | 	sub	fp, #4
06a1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06a20     02 FA 65 C6 |  if_b	neg	result1, #2
06a24     28 01 90 CD |  if_b	jmp	#LR__0583
06a28                 | ' 
06a28                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06a28     20 4E 05 F1 | 	add	fp, #32
06a2c     A7 1E 02 FB | 	rdlong	local01, fp
06a30     20 4E 85 F1 | 	sub	fp, #32
06a34     FF FF 7F FF 
06a38     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06a3c     78 00 90 5D |  if_ne	jmp	#LR__0581
06a40     43 00 00 FF 
06a44     5C E4 05 F1 | 	add	objptr, ##34396
06a48     F2 1E 02 FB | 	rdlong	local01, objptr
06a4c     07 00 00 FF 
06a50     28 E4 05 F1 | 	add	objptr, ##3624
06a54     F2 1E 62 FC | 	wrlong	local01, objptr
06a58     0C 4E 05 F1 | 	add	fp, #12
06a5c     A7 12 02 FB | 	rdlong	arg01, fp
06a60     0C 4E 85 F1 | 	sub	fp, #12
06a64     10 12 06 F1 | 	add	arg01, #16
06a68     07 00 00 FF 
06a6c     28 E4 85 F1 | 	sub	objptr, ##3624
06a70     F2 14 02 FB | 	rdlong	arg02, objptr
06a74     43 00 00 FF 
06a78     5C E4 85 F1 | 	sub	objptr, ##34396
06a7c     50 6C B1 FD | 	call	#_pslpoke
06a80     47 00 00 FF 
06a84     8C E4 05 F1 | 	add	objptr, ##36492
06a88     FF FF FF FF 
06a8c     F2 FE 6B FC | 	wrlong	##-1, objptr
06a90     0C 4E 05 F1 | 	add	fp, #12
06a94     A7 1E 02 FB | 	rdlong	local01, fp
06a98     0C 4E 85 F1 | 	sub	fp, #12
06a9c     04 E4 05 F1 | 	add	objptr, #4
06aa0     F2 1E 62 FC | 	wrlong	local01, objptr
06aa4     47 00 00 FF 
06aa8     90 E4 85 F1 | 	sub	objptr, ##36496
06aac     84 FD BF FD | 	call	#_save_line
06ab0                 | '   programstart=programptr
06ab0                 | '   pslpoke(lineptr2+16,programptr)
06ab0                 | '   ucompiledline(4)=$FFFF_FFFF
06ab0                 | '   ucompiledline(5)=lineptr2
06ab0                 | '   save_line
06ab0                 | '   return 0
06ab0     00 FA 05 F6 | 	mov	result1, #0
06ab4     98 00 90 FD | 	jmp	#LR__0583
06ab8                 | LR__0581
06ab8                 | ' 
06ab8                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06ab8     20 4E 05 F1 | 	add	fp, #32
06abc     A7 1E 02 FB | 	rdlong	local01, fp
06ac0     20 4E 85 F1 | 	sub	fp, #32
06ac4     FF FF 7F FF 
06ac8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06acc     7C 00 90 AD |  if_e	jmp	#LR__0582
06ad0     20 4E 05 F1 | 	add	fp, #32
06ad4     A7 1E 02 FB | 	rdlong	local01, fp
06ad8     47 00 00 FF 
06adc     8C E4 05 F1 | 	add	objptr, ##36492
06ae0     F2 1E 62 FC | 	wrlong	local01, objptr
06ae4     14 4E 85 F1 | 	sub	fp, #20
06ae8     A7 1E 02 FB | 	rdlong	local01, fp
06aec     04 E4 05 F1 | 	add	objptr, #4
06af0     F2 1E 62 FC | 	wrlong	local01, objptr
06af4     A7 12 02 FB | 	rdlong	arg01, fp
06af8     0C 4E 85 F1 | 	sub	fp, #12
06afc     10 12 06 F1 | 	add	arg01, #16
06b00     04 00 00 FF 
06b04     34 E4 85 F1 | 	sub	objptr, ##2100
06b08     F2 14 02 FB | 	rdlong	arg02, objptr
06b0c     43 00 00 FF 
06b10     5C E4 85 F1 | 	sub	objptr, ##34396
06b14     B8 6B B1 FD | 	call	#_pslpoke
06b18     20 4E 05 F1 | 	add	fp, #32
06b1c     A7 12 02 FB | 	rdlong	arg01, fp
06b20     20 4E 85 F1 | 	sub	fp, #32
06b24     14 12 06 F1 | 	add	arg01, #20
06b28     43 00 00 FF 
06b2c     5C E4 05 F1 | 	add	objptr, ##34396
06b30     F2 14 02 FB | 	rdlong	arg02, objptr
06b34     43 00 00 FF 
06b38     5C E4 85 F1 | 	sub	objptr, ##34396
06b3c     90 6B B1 FD | 	call	#_pslpoke
06b40     F0 FC BF FD | 	call	#_save_line
06b44                 | '   ucompiledline(4)=header(4)
06b44                 | '   ucompiledline(5)=lineptr2
06b44                 | '   pslpoke(lineptr2+16,programptr)
06b44                 | '   pslpoke(header(4)+20,programptr)
06b44                 | '   save_line
06b44                 | '   return 0
06b44     00 FA 05 F6 | 	mov	result1, #0
06b48     04 00 90 FD | 	jmp	#LR__0583
06b4c                 | LR__0582
06b4c     00 FA 05 F6 | 	mov	result1, #0
06b50                 | LR__0583
06b50     A7 F0 03 F6 | 	mov	ptra, fp
06b54     B2 00 A0 FD | 	call	#popregs_
06b58                 | _insertline_ret
06b58     2D 00 64 FD | 	ret
06b5c                 | 
06b5c                 | ' 
06b5c                 | ' '----- Adds a new line at the end of the program
06b5c                 | ' 
06b5c                 | ' sub add_line_at_end(aline) 
06b5c                 | _add_line_at_end
06b5c     4A 00 00 FF 
06b60     88 E4 05 F1 | 	add	objptr, ##38024
06b64     F2 12 62 FC | 	wrlong	arg01, objptr
06b68     04 E4 05 F1 | 	add	objptr, #4
06b6c     F2 14 02 FB | 	rdlong	arg02, objptr
06b70     03 00 00 FF 
06b74     00 E4 85 F1 | 	sub	objptr, ##1536
06b78     F2 14 62 FC | 	wrlong	arg02, objptr
06b7c     03 00 00 FF 
06b80     00 E4 05 F1 | 	add	objptr, ##1536
06b84     F2 12 02 FB | 	rdlong	arg01, objptr
06b88     14 12 06 F1 | 	add	arg01, #20
06b8c     07 00 00 FF 
06b90     30 E4 85 F1 | 	sub	objptr, ##3632
06b94     F2 14 02 FB | 	rdlong	arg02, objptr
06b98     43 00 00 FF 
06b9c     5C E4 85 F1 | 	sub	objptr, ##34396
06ba0     2C 6B B1 FD | 	call	#_pslpoke
06ba4     43 00 00 FF 
06ba8     5C E4 05 F1 | 	add	objptr, ##34396
06bac     F2 14 02 FB | 	rdlong	arg02, objptr
06bb0     07 00 00 FF 
06bb4     30 E4 05 F1 | 	add	objptr, ##3632
06bb8     F2 14 62 FC | 	wrlong	arg02, objptr
06bbc     02 00 00 FF 
06bc0     FC E5 85 F1 | 	sub	objptr, ##1532
06bc4     FF FF BF FF 
06bc8     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06bcc                 | ' 
06bcc                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06bcc                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06bcc     04 00 00 FF 
06bd0     34 E4 85 F1 | 	sub	objptr, ##2100
06bd4     F2 14 02 FB | 	rdlong	arg02, objptr
06bd8     43 00 00 FF 
06bdc     5C E4 85 F1 | 	sub	objptr, ##34396
06be0     00 04 00 FF 
06be4     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06be8     47 00 00 AF 
06bec     8C E4 05 A1 |  if_e	add	objptr, ##36492
06bf0     FF FF FF AF 
06bf4     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06bf8     47 00 00 AF 
06bfc     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06c00     30 FC BF FD | 	call	#_save_line
06c04     43 00 00 FF 
06c08     5C E4 05 F1 | 	add	objptr, ##34396
06c0c     F2 12 02 FB | 	rdlong	arg01, objptr
06c10     43 00 00 FF 
06c14     5C E4 85 F1 | 	sub	objptr, ##34396
06c18     01 14 66 F6 | 	neg	arg02, #1
06c1c     B0 6A B1 FD | 	call	#_pslpoke
06c20                 | _add_line_at_end_ret
06c20     2D 00 64 FD | 	ret
06c24                 | 
06c24                 | ' 
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' 
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
06c24                 | ' '--------------------------------------------------------------------------------------------------------------------------
06c24                 | ' 
06c24                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
06c24                 | ' 
06c24                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
06c24                 | _compile_immediate
06c24     0A 4A 05 F6 | 	mov	COUNT_, #10
06c28     A8 00 A0 FD | 	call	#pushregs_
06c2c                 | _compile_immediate_enter
06c2c     09 25 02 F6 | 	mov	local04, arg01
06c30     0A 27 02 F6 | 	mov	local05, arg02
06c34     00 28 06 F6 | 	mov	local06, #0
06c38     00 2A 06 F6 | 	mov	local07, #0
06c3c     00 2C 06 F6 | 	mov	local08, #0
06c40                 | ' 
06c40                 | ' ' linetype=cont+1
06c40                 | ' ' 1 : this is the first part of the line that will continue
06c40                 | ' ' 2 - this is the continuation of the line
06c40                 | ' ' 3 - this is the last continued line
06c40                 | ' ' 4 - this is the one and only part
06c40                 | ' ' 5 - continued after if/else
06c40                 | ' 
06c40                 | ' err=0
06c40                 | ' cmd=0
06c40                 | ' vars=0
06c40                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
06c40     02 24 0E F2 | 	cmp	local04, #2 wz
06c44     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06c48     24 00 90 5D |  if_ne	jmp	#LR__0590
06c4c     35 00 00 FF 
06c50     10 E4 05 F1 | 	add	objptr, ##27152
06c54     F2 2A 02 FB | 	rdlong	local07, objptr
06c58     01 2E 06 F6 | 	mov	local09, #1
06c5c     02 00 00 FF 
06c60     34 E4 05 F1 | 	add	objptr, ##1076
06c64     F2 02 68 FC | 	wrlong	#1, objptr
06c68     37 00 00 FF 
06c6c     44 E4 85 F1 | 	sub	objptr, ##28228
06c70                 | LR__0590
06c70                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06c70     04 24 0E F2 | 	cmp	local04, #4 wz
06c74     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06c78     30 00 90 5D |  if_ne	jmp	#LR__0591
06c7c     35 00 00 FF 
06c80     18 E4 05 F1 | 	add	objptr, ##27160
06c84     F2 2A 02 FB | 	rdlong	local07, objptr
06c88     02 2E 06 F6 | 	mov	local09, #2
06c8c     02 00 00 FF 
06c90     2C E4 05 F1 | 	add	objptr, ##1068
06c94     F2 04 68 FC | 	wrlong	#2, objptr
06c98     13 00 00 FF 
06c9c     38 E4 05 F1 | 	add	objptr, ##9784
06ca0     F2 04 68 FC | 	wrlong	#2, objptr
06ca4     4A 00 00 FF 
06ca8     7C E4 85 F1 | 	sub	objptr, ##38012
06cac                 | LR__0591
06cac                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
06cac     05 24 0E F2 | 	cmp	local04, #5 wz
06cb0     40 00 90 5D |  if_ne	jmp	#LR__0592
06cb4     37 00 00 FF 
06cb8     44 E4 05 F1 | 	add	objptr, ##28228
06cbc     F2 FC 01 FB | 	rdlong	result2, objptr
06cc0     FE 2E 02 F6 | 	mov	local09, result2
06cc4     03 2E 66 F0 | 	shl	local09, #3
06cc8     02 00 00 FF 
06ccc     38 E4 85 F1 | 	sub	objptr, ##1080
06cd0     F2 2E 02 F1 | 	add	local09, objptr
06cd4     04 2E 06 F1 | 	add	local09, #4
06cd8     17 2B 02 FB | 	rdlong	local07, local09
06cdc     01 FC 05 F1 | 	add	result2, #1
06ce0     02 00 00 FF 
06ce4     38 E4 05 F1 | 	add	objptr, ##1080
06ce8     F2 FC 61 FC | 	wrlong	result2, objptr
06cec     37 00 00 FF 
06cf0     44 E4 85 F1 | 	sub	objptr, ##28228
06cf4                 | LR__0592
06cf4                 | ' 
06cf4                 | ' 'print  "In compile_immediate cmd=:", cmd
06cf4                 | ' 451 select case cmd
06cf4     5C 2A 0E F2 | 	cmp	local07, #92 wz
06cf8     80 02 90 AD |  if_e	jmp	#LR__0593
06cfc     47 2A 0E F2 | 	cmp	local07, #71 wz
06d00     84 02 90 AD |  if_e	jmp	#LR__0594
06d04     59 2A 0E F2 | 	cmp	local07, #89 wz
06d08     8C 02 90 AD |  if_e	jmp	#LR__0595
06d0c     45 2A 0E F2 | 	cmp	local07, #69 wz
06d10     94 02 90 AD |  if_e	jmp	#LR__0596
06d14     69 2A 0E F2 | 	cmp	local07, #105 wz
06d18     9C 02 90 AD |  if_e	jmp	#LR__0597
06d1c     40 2A 0E F2 | 	cmp	local07, #64 wz
06d20     28 06 90 AD |  if_e	jmp	#LR__0665
06d24     B4 2A 0E F2 | 	cmp	local07, #180 wz
06d28     98 02 90 AD |  if_e	jmp	#LR__0598
06d2c     49 2A 0E F2 | 	cmp	local07, #73 wz
06d30     9C 02 90 AD |  if_e	jmp	#LR__0599
06d34     50 2A 0E F2 | 	cmp	local07, #80 wz
06d38     A0 02 90 AD |  if_e	jmp	#LR__0600
06d3c     AE 2A 0E F2 | 	cmp	local07, #174 wz
06d40     A8 02 90 AD |  if_e	jmp	#LR__0601
06d44     B0 2A 0E F2 | 	cmp	local07, #176 wz
06d48     AC 02 90 AD |  if_e	jmp	#LR__0602
06d4c     AF 2A 0E F2 | 	cmp	local07, #175 wz
06d50     B0 02 90 AD |  if_e	jmp	#LR__0603
06d54     B1 2A 0E F2 | 	cmp	local07, #177 wz
06d58     B4 02 90 AD |  if_e	jmp	#LR__0604
06d5c     68 2A 0E F2 | 	cmp	local07, #104 wz
06d60     B8 02 90 AD |  if_e	jmp	#LR__0605
06d64     74 2A 0E F2 | 	cmp	local07, #116 wz
06d68     BC 02 90 AD |  if_e	jmp	#LR__0606
06d6c     73 2A 0E F2 | 	cmp	local07, #115 wz
06d70     C4 02 90 AD |  if_e	jmp	#LR__0607
06d74     6C 2A 0E F2 | 	cmp	local07, #108 wz
06d78     CC 02 90 AD |  if_e	jmp	#LR__0608
06d7c     89 2A 0E F2 | 	cmp	local07, #137 wz
06d80     C8 05 90 AD |  if_e	jmp	#LR__0665
06d84     72 2A 0E F2 | 	cmp	local07, #114 wz
06d88     CC 02 90 AD |  if_e	jmp	#LR__0609
06d8c     5D 2A 0E F2 | 	cmp	local07, #93 wz
06d90     D0 02 90 AD |  if_e	jmp	#LR__0610
06d94     96 2A 0E F2 | 	cmp	local07, #150 wz
06d98     D8 02 90 AD |  if_e	jmp	#LR__0611
06d9c     43 2A 0E F2 | 	cmp	local07, #67 wz
06da0     DC 02 90 AD |  if_e	jmp	#LR__0612
06da4     5A 2A 0E F2 | 	cmp	local07, #90 wz
06da8     E4 02 90 AD |  if_e	jmp	#LR__0613
06dac     AB 2A 0E F2 | 	cmp	local07, #171 wz
06db0     98 05 90 AD |  if_e	jmp	#LR__0665
06db4     BD 2A 0E F2 | 	cmp	local07, #189 wz
06db8     E4 02 90 AD |  if_e	jmp	#LR__0614
06dbc     BB 2A 0E F2 | 	cmp	local07, #187 wz
06dc0     EC 02 90 AD |  if_e	jmp	#LR__0615
06dc4     4E 2A 0E F2 | 	cmp	local07, #78 wz
06dc8     F4 02 90 AD |  if_e	jmp	#LR__0616
06dcc     A9 2A 0E F2 | 	cmp	local07, #169 wz
06dd0     08 03 90 AD |  if_e	jmp	#LR__0618
06dd4     46 2A 0E F2 | 	cmp	local07, #70 wz
06dd8     1C 03 90 AD |  if_e	jmp	#LR__0620
06ddc     71 2A 0E F2 | 	cmp	local07, #113 wz
06de0     24 03 90 AD |  if_e	jmp	#LR__0621
06de4     60 2A 0E F2 | 	cmp	local07, #96 wz
06de8     28 03 90 AD |  if_e	jmp	#LR__0622
06dec     4A 2A 0E F2 | 	cmp	local07, #74 wz
06df0     2C 03 90 AD |  if_e	jmp	#LR__0623
06df4     48 2A 0E F2 | 	cmp	local07, #72 wz
06df8     30 03 90 AD |  if_e	jmp	#LR__0624
06dfc     58 2A 0E F2 | 	cmp	local07, #88 wz
06e00     38 03 90 AD |  if_e	jmp	#LR__0625
06e04     5F 2A 0E F2 | 	cmp	local07, #95 wz
06e08     40 03 90 AD |  if_e	jmp	#LR__0626
06e0c     8A 2A 0E F2 | 	cmp	local07, #138 wz
06e10     44 03 90 AD |  if_e	jmp	#LR__0627
06e14     4C 2A 0E F2 | 	cmp	local07, #76 wz
06e18     48 03 90 AD |  if_e	jmp	#LR__0628
06e1c     52 2A 0E F2 | 	cmp	local07, #82 wz
06e20     50 03 90 AD |  if_e	jmp	#LR__0629
06e24     97 2A 0E F2 | 	cmp	local07, #151 wz
06e28     58 03 90 AD |  if_e	jmp	#LR__0630
06e2c     61 2A 0E F2 | 	cmp	local07, #97 wz
06e30     5C 03 90 AD |  if_e	jmp	#LR__0631
06e34     63 2A 0E F2 | 	cmp	local07, #99 wz
06e38     60 03 90 AD |  if_e	jmp	#LR__0632
06e3c     41 2A 0E F2 | 	cmp	local07, #65 wz
06e40     08 05 90 AD |  if_e	jmp	#LR__0665
06e44     4B 2A 0E F2 | 	cmp	local07, #75 wz
06e48     5C 03 90 AD |  if_e	jmp	#LR__0633
06e4c     B3 2A 0E F2 | 	cmp	local07, #179 wz
06e50     60 03 90 AD |  if_e	jmp	#LR__0634
06e54     5E 2A 0E F2 | 	cmp	local07, #94 wz
06e58     64 03 90 AD |  if_e	jmp	#LR__0635
06e5c     7C 2A 0E F2 | 	cmp	local07, #124 wz
06e60     68 03 90 AD |  if_e	jmp	#LR__0636
06e64     7D 2A 0E F2 | 	cmp	local07, #125 wz
06e68     6C 03 90 AD |  if_e	jmp	#LR__0637
06e6c     7E 2A 0E F2 | 	cmp	local07, #126 wz
06e70     70 03 90 AD |  if_e	jmp	#LR__0638
06e74     7F 2A 0E F2 | 	cmp	local07, #127 wz
06e78     74 03 90 AD |  if_e	jmp	#LR__0639
06e7c     80 2A 0E F2 | 	cmp	local07, #128 wz
06e80     78 03 90 AD |  if_e	jmp	#LR__0640
06e84     55 2A 0E F2 | 	cmp	local07, #85 wz
06e88     7C 03 90 AD |  if_e	jmp	#LR__0641
06e8c     75 2A 0E F2 | 	cmp	local07, #117 wz
06e90     80 03 90 AD |  if_e	jmp	#LR__0642
06e94     42 2A 0E F2 | 	cmp	local07, #66 wz
06e98     88 03 90 AD |  if_e	jmp	#LR__0643
06e9c     95 2A 0E F2 | 	cmp	local07, #149 wz
06ea0     90 03 90 AD |  if_e	jmp	#LR__0644
06ea4     AC 2A 0E F2 | 	cmp	local07, #172 wz
06ea8     A0 04 90 AD |  if_e	jmp	#LR__0665
06eac     81 2A 0E F2 | 	cmp	local07, #129 wz
06eb0     8C 03 90 AD |  if_e	jmp	#LR__0645
06eb4     44 2A 0E F2 | 	cmp	local07, #68 wz
06eb8     90 03 90 AD |  if_e	jmp	#LR__0646
06ebc     BC 2A 0E F2 | 	cmp	local07, #188 wz
06ec0     94 03 90 AD |  if_e	jmp	#LR__0647
06ec4     88 2A 0E F2 | 	cmp	local07, #136 wz
06ec8     80 04 90 AD |  if_e	jmp	#LR__0665
06ecc     92 2A 0E F2 | 	cmp	local07, #146 wz
06ed0     94 03 90 AD |  if_e	jmp	#LR__0648
06ed4     BE 2A 0E F2 | 	cmp	local07, #190 wz
06ed8     2C 05 90 AD |  if_e	jmp	#LR__0666
06edc     AA 2A 0E F2 | 	cmp	local07, #170 wz
06ee0     68 04 90 AD |  if_e	jmp	#LR__0665
06ee4     4D 2A 0E F2 | 	cmp	local07, #77 wz
06ee8     88 03 90 AD |  if_e	jmp	#LR__0649
06eec     51 2A 0E F2 | 	cmp	local07, #81 wz
06ef0     90 03 90 AD |  if_e	jmp	#LR__0650
06ef4     8E 2A 0E F2 | 	cmp	local07, #142 wz
06ef8     98 03 90 AD |  if_e	jmp	#LR__0651
06efc     90 2A 0E F2 | 	cmp	local07, #144 wz
06f00     9C 03 90 AD |  if_e	jmp	#LR__0652
06f04     8D 2A 0E F2 | 	cmp	local07, #141 wz
06f08     A0 03 90 AD |  if_e	jmp	#LR__0653
06f0c     8C 2A 0E F2 | 	cmp	local07, #140 wz
06f10     A4 03 90 AD |  if_e	jmp	#LR__0654
06f14     91 2A 0E F2 | 	cmp	local07, #145 wz
06f18     A8 03 90 AD |  if_e	jmp	#LR__0655
06f1c     8B 2A 0E F2 | 	cmp	local07, #139 wz
06f20     AC 03 90 AD |  if_e	jmp	#LR__0656
06f24     8F 2A 0E F2 | 	cmp	local07, #143 wz
06f28     B0 03 90 AD |  if_e	jmp	#LR__0657
06f2c     B2 2A 0E F2 | 	cmp	local07, #178 wz
06f30     B4 03 90 AD |  if_e	jmp	#LR__0658
06f34     6D 2A 0E F2 | 	cmp	local07, #109 wz
06f38     BC 03 90 AD |  if_e	jmp	#LR__0659
06f3c     70 2A 0E F2 | 	cmp	local07, #112 wz
06f40     08 04 90 AD |  if_e	jmp	#LR__0665
06f44     56 2A 0E F2 | 	cmp	local07, #86 wz
06f48     B8 03 90 AD |  if_e	jmp	#LR__0660
06f4c     57 2A 0E F2 | 	cmp	local07, #87 wz
06f50     F8 03 90 AD |  if_e	jmp	#LR__0665
06f54     79 2A 0E F2 | 	cmp	local07, #121 wz
06f58     B4 03 90 AD |  if_e	jmp	#LR__0661
06f5c     77 2A 0E F2 | 	cmp	local07, #119 wz
06f60     B8 03 90 AD |  if_e	jmp	#LR__0662
06f64     78 2A 0E F2 | 	cmp	local07, #120 wz
06f68     BC 03 90 AD |  if_e	jmp	#LR__0663
06f6c     01 00 00 FF 
06f70     04 2A 0E F2 | 	cmp	local07, ##516 wz
06f74     BC 03 90 AD |  if_e	jmp	#LR__0664
06f78     8C 04 90 FD | 	jmp	#LR__0666
06f7c                 | LR__0593
06f7c     D8 0A B0 FD | 	call	#_compile_fun_2p
06f80     FD 28 02 F6 | 	mov	local06, result1
06f84     C4 03 90 FD | 	jmp	#LR__0665
06f88                 | LR__0594
06f88     9C 0D B0 FD | 	call	#_compile_fun_varp
06f8c     FD 2C 02 F6 | 	mov	local08, result1
06f90     FE 28 02 F6 | 	mov	local06, result2
06f94     B4 03 90 FD | 	jmp	#LR__0665
06f98                 | LR__0595
06f98     8C 0D B0 FD | 	call	#_compile_fun_varp
06f9c     FD 2C 02 F6 | 	mov	local08, result1
06fa0     FE 28 02 F6 | 	mov	local06, result2
06fa4     A4 03 90 FD | 	jmp	#LR__0665
06fa8                 | LR__0596
06fa8     7C 0D B0 FD | 	call	#_compile_fun_varp
06fac     FD 2C 02 F6 | 	mov	local08, result1
06fb0     FE 28 02 F6 | 	mov	local06, result2
06fb4     94 03 90 FD | 	jmp	#LR__0665
06fb8                 | LR__0597
06fb8                 | ' return expr()
06fb8     4C 2A B0 FD | 	call	#_expr
06fbc     FD 28 02 F6 | 	mov	local06, result1
06fc0     88 03 90 FD | 	jmp	#LR__0665
06fc4                 | LR__0598
06fc4                 | ' return expr()
06fc4     40 2A B0 FD | 	call	#_expr
06fc8     FD 28 02 F6 | 	mov	local06, result1
06fcc     7C 03 90 FD | 	jmp	#LR__0665
06fd0                 | LR__0599
06fd0                 | ' return expr()
06fd0     34 2A B0 FD | 	call	#_expr
06fd4     FD 28 02 F6 | 	mov	local06, result1
06fd8     70 03 90 FD | 	jmp	#LR__0665
06fdc                 | LR__0600
06fdc     48 0D B0 FD | 	call	#_compile_fun_varp
06fe0     FD 2C 02 F6 | 	mov	local08, result1
06fe4     FE 28 02 F6 | 	mov	local06, result2
06fe8     60 03 90 FD | 	jmp	#LR__0665
06fec                 | LR__0601
06fec     68 0A B0 FD | 	call	#_compile_fun_2p
06ff0     FD 28 02 F6 | 	mov	local06, result1
06ff4     54 03 90 FD | 	jmp	#LR__0665
06ff8                 | LR__0602
06ff8     5C 0A B0 FD | 	call	#_compile_fun_2p
06ffc     FD 28 02 F6 | 	mov	local06, result1
07000     48 03 90 FD | 	jmp	#LR__0665
07004                 | LR__0603
07004     50 0A B0 FD | 	call	#_compile_fun_2p
07008     FD 28 02 F6 | 	mov	local06, result1
0700c     3C 03 90 FD | 	jmp	#LR__0665
07010                 | LR__0604
07010     44 0A B0 FD | 	call	#_compile_fun_2p
07014     FD 28 02 F6 | 	mov	local06, result1
07018     30 03 90 FD | 	jmp	#LR__0665
0701c                 | LR__0605
0701c                 | ' return expr()
0701c     E8 29 B0 FD | 	call	#_expr
07020     FD 28 02 F6 | 	mov	local06, result1
07024     24 03 90 FD | 	jmp	#LR__0665
07028                 | LR__0606
07028     FC 0C B0 FD | 	call	#_compile_fun_varp
0702c     FD 2C 02 F6 | 	mov	local08, result1
07030     FE 28 02 F6 | 	mov	local06, result2
07034     14 03 90 FD | 	jmp	#LR__0665
07038                 | LR__0607
07038     EC 0C B0 FD | 	call	#_compile_fun_varp
0703c     FD 2C 02 F6 | 	mov	local08, result1
07040     FE 28 02 F6 | 	mov	local06, result2
07044     04 03 90 FD | 	jmp	#LR__0665
07048                 | LR__0608
07048     DC 0C B0 FD | 	call	#_compile_fun_varp
0704c     FD 2C 02 F6 | 	mov	local08, result1
07050     FE 28 02 F6 | 	mov	local06, result2
07054     F4 02 90 FD | 	jmp	#LR__0665
07058                 | LR__0609
07058     A0 19 B0 FD | 	call	#_compile_dim
0705c     FD 28 02 F6 | 	mov	local06, result1
07060     A4 03 90 FD | 	jmp	#LR__0666
07064                 | LR__0610
07064     C0 0C B0 FD | 	call	#_compile_fun_varp
07068     FD 2C 02 F6 | 	mov	local08, result1
0706c     FE 28 02 F6 | 	mov	local06, result2
07070     D8 02 90 FD | 	jmp	#LR__0665
07074                 | LR__0611
07074     E0 09 B0 FD | 	call	#_compile_fun_2p
07078     FD 28 02 F6 | 	mov	local06, result1
0707c     CC 02 90 FD | 	jmp	#LR__0665
07080                 | LR__0612
07080     A4 0C B0 FD | 	call	#_compile_fun_varp
07084     FD 2C 02 F6 | 	mov	local08, result1
07088     FE 28 02 F6 | 	mov	local06, result2
0708c     BC 02 90 FD | 	jmp	#LR__0665
07090                 | LR__0613
07090     13 13 02 F6 | 	mov	arg01, local05
07094     2C 18 B0 FD | 	call	#_compile_else
07098     FD 28 02 F6 | 	mov	local06, result1
0709c     68 03 90 FD | 	jmp	#LR__0666
070a0                 | LR__0614
070a0     84 0C B0 FD | 	call	#_compile_fun_varp
070a4     FD 2C 02 F6 | 	mov	local08, result1
070a8     FE 28 02 F6 | 	mov	local06, result2
070ac     9C 02 90 FD | 	jmp	#LR__0665
070b0                 | LR__0615
070b0     74 0C B0 FD | 	call	#_compile_fun_varp
070b4     FD 2C 02 F6 | 	mov	local08, result1
070b8     FE 28 02 F6 | 	mov	local06, result2
070bc     8C 02 90 FD | 	jmp	#LR__0665
070c0                 | LR__0616
070c0     01 26 16 F2 | 	cmp	local05, #1 wc
070c4     08 00 90 CD |  if_b	jmp	#LR__0617
070c8     4C 25 B0 FD | 	call	#_compile_goto
070cc     38 03 90 FD | 	jmp	#LR__0666
070d0                 | LR__0617
070d0     19 12 06 F6 | 	mov	arg01, #25
070d4     94 64 B1 FD | 	call	#_printerror
070d8     2C 03 90 FD | 	jmp	#LR__0666
070dc                 | LR__0618
070dc     01 26 16 F2 | 	cmp	local05, #1 wc
070e0     08 00 90 CD |  if_b	jmp	#LR__0619
070e4     CC 24 B0 FD | 	call	#_compile_gosub
070e8     1C 03 90 FD | 	jmp	#LR__0666
070ec                 | LR__0619
070ec     19 12 06 F6 | 	mov	arg01, #25
070f0     78 64 B1 FD | 	call	#_printerror
070f4     10 03 90 FD | 	jmp	#LR__0666
070f8                 | LR__0620
070f8     2C 0C B0 FD | 	call	#_compile_fun_varp
070fc     FD 2C 02 F6 | 	mov	local08, result1
07100     FE 28 02 F6 | 	mov	local06, result2
07104     44 02 90 FD | 	jmp	#LR__0665
07108                 | LR__0621
07108     C4 0A B0 FD | 	call	#_compile_fun_4p
0710c     FD 28 02 F6 | 	mov	local06, result1
07110     38 02 90 FD | 	jmp	#LR__0665
07114                 | LR__0622
07114                 | ' return expr()
07114     F0 28 B0 FD | 	call	#_expr
07118     FD 28 02 F6 | 	mov	local06, result1
0711c     2C 02 90 FD | 	jmp	#LR__0665
07120                 | LR__0623
07120     B4 1F B0 FD | 	call	#_compile_for
07124     FD 28 02 F6 | 	mov	local06, result1
07128     DC 02 90 FD | 	jmp	#LR__0666
0712c                 | LR__0624
0712c     F8 0B B0 FD | 	call	#_compile_fun_varp
07130     FD 2C 02 F6 | 	mov	local08, result1
07134     FE 28 02 F6 | 	mov	local06, result2
07138     10 02 90 FD | 	jmp	#LR__0665
0713c                 | LR__0625
0713c     13 13 02 F6 | 	mov	arg01, local05
07140     F8 15 B0 FD | 	call	#_compile_if
07144     FD 28 02 F6 | 	mov	local06, result1
07148     BC 02 90 FD | 	jmp	#LR__0666
0714c                 | LR__0626
0714c                 | ' return expr()
0714c     B8 28 B0 FD | 	call	#_expr
07150     FD 28 02 F6 | 	mov	local06, result1
07154     F4 01 90 FD | 	jmp	#LR__0665
07158                 | LR__0627
07158                 | ' return expr()
07158     AC 28 B0 FD | 	call	#_expr
0715c     FD 28 02 F6 | 	mov	local06, result1
07160     E8 01 90 FD | 	jmp	#LR__0665
07164                 | LR__0628
07164     C0 0B B0 FD | 	call	#_compile_fun_varp
07168     FD 2C 02 F6 | 	mov	local08, result1
0716c     FE 28 02 F6 | 	mov	local06, result2
07170     D8 01 90 FD | 	jmp	#LR__0665
07174                 | LR__0629
07174     B0 0B B0 FD | 	call	#_compile_fun_varp
07178     FD 2C 02 F6 | 	mov	local08, result1
0717c     FE 28 02 F6 | 	mov	local06, result2
07180     C8 01 90 FD | 	jmp	#LR__0665
07184                 | LR__0630
07184     D0 08 B0 FD | 	call	#_compile_fun_2p
07188     FD 28 02 F6 | 	mov	local06, result1
0718c     BC 01 90 FD | 	jmp	#LR__0665
07190                 | LR__0631
07190                 | ' return expr()
07190     74 28 B0 FD | 	call	#_expr
07194     FD 28 02 F6 | 	mov	local06, result1
07198     B0 01 90 FD | 	jmp	#LR__0665
0719c                 | LR__0632
0719c                 | ' return expr()
0719c     68 28 B0 FD | 	call	#_expr
071a0     FD 28 02 F6 | 	mov	local06, result1
071a4     A4 01 90 FD | 	jmp	#LR__0665
071a8                 | LR__0633
071a8     70 22 B0 FD | 	call	#_compile_next
071ac     FD 28 02 F6 | 	mov	local06, result1
071b0     54 02 90 FD | 	jmp	#LR__0666
071b4                 | LR__0634
071b4     28 09 B0 FD | 	call	#_compile_fun_3p
071b8     FD 28 02 F6 | 	mov	local06, result1
071bc     8C 01 90 FD | 	jmp	#LR__0665
071c0                 | LR__0635
071c0                 | ' return expr()
071c0     44 28 B0 FD | 	call	#_expr
071c4     FD 28 02 F6 | 	mov	local06, result1
071c8     80 01 90 FD | 	jmp	#LR__0665
071cc                 | LR__0636
071cc                 | ' return expr()
071cc     38 28 B0 FD | 	call	#_expr
071d0     FD 28 02 F6 | 	mov	local06, result1
071d4     74 01 90 FD | 	jmp	#LR__0665
071d8                 | LR__0637
071d8                 | ' return expr()
071d8     2C 28 B0 FD | 	call	#_expr
071dc     FD 28 02 F6 | 	mov	local06, result1
071e0     68 01 90 FD | 	jmp	#LR__0665
071e4                 | LR__0638
071e4                 | ' return expr()
071e4     20 28 B0 FD | 	call	#_expr
071e8     FD 28 02 F6 | 	mov	local06, result1
071ec     5C 01 90 FD | 	jmp	#LR__0665
071f0                 | LR__0639
071f0     DC 09 B0 FD | 	call	#_compile_fun_4p
071f4     FD 28 02 F6 | 	mov	local06, result1
071f8     50 01 90 FD | 	jmp	#LR__0665
071fc                 | LR__0640
071fc                 | ' return expr()
071fc     08 28 B0 FD | 	call	#_expr
07200     FD 28 02 F6 | 	mov	local06, result1
07204     44 01 90 FD | 	jmp	#LR__0665
07208                 | LR__0641
07208     4C 08 B0 FD | 	call	#_compile_fun_2p
0720c     FD 28 02 F6 | 	mov	local06, result1
07210     38 01 90 FD | 	jmp	#LR__0665
07214                 | LR__0642
07214     10 0B B0 FD | 	call	#_compile_fun_varp
07218     FD 2C 02 F6 | 	mov	local08, result1
0721c     FE 28 02 F6 | 	mov	local06, result2
07220     28 01 90 FD | 	jmp	#LR__0665
07224                 | LR__0643
07224     00 0B B0 FD | 	call	#_compile_fun_varp
07228     FD 2C 02 F6 | 	mov	local08, result1
0722c     FE 28 02 F6 | 	mov	local06, result2
07230     18 01 90 FD | 	jmp	#LR__0665
07234                 | LR__0644
07234     20 08 B0 FD | 	call	#_compile_fun_2p
07238     FD 28 02 F6 | 	mov	local06, result1
0723c     0C 01 90 FD | 	jmp	#LR__0665
07240                 | LR__0645
07240     14 08 B0 FD | 	call	#_compile_fun_2p
07244     FD 28 02 F6 | 	mov	local06, result1
07248     00 01 90 FD | 	jmp	#LR__0665
0724c                 | LR__0646
0724c     14 0E B0 FD | 	call	#_compile_print
07250     FD 28 02 F6 | 	mov	local06, result1
07254     B0 01 90 FD | 	jmp	#LR__0666
07258                 | LR__0647
07258     CC 0A B0 FD | 	call	#_compile_fun_varp
0725c     FD 2C 02 F6 | 	mov	local08, result1
07260     FE 28 02 F6 | 	mov	local06, result2
07264     E4 00 90 FD | 	jmp	#LR__0665
07268                 | LR__0648
07268                 | ' return expr()
07268     9C 27 B0 FD | 	call	#_expr
0726c     FD 28 02 F6 | 	mov	local06, result1
07270     D8 00 90 FD | 	jmp	#LR__0665
07274                 | LR__0649
07274     B0 0A B0 FD | 	call	#_compile_fun_varp
07278     FD 2C 02 F6 | 	mov	local08, result1
0727c     FE 28 02 F6 | 	mov	local06, result2
07280     C8 00 90 FD | 	jmp	#LR__0665
07284                 | LR__0650
07284     A0 0A B0 FD | 	call	#_compile_fun_varp
07288     FD 2C 02 F6 | 	mov	local08, result1
0728c     FE 28 02 F6 | 	mov	local06, result2
07290     B8 00 90 FD | 	jmp	#LR__0665
07294                 | LR__0651
07294     C0 07 B0 FD | 	call	#_compile_fun_2p
07298     FD 28 02 F6 | 	mov	local06, result1
0729c     AC 00 90 FD | 	jmp	#LR__0665
072a0                 | LR__0652
072a0     B4 07 B0 FD | 	call	#_compile_fun_2p
072a4     FD 28 02 F6 | 	mov	local06, result1
072a8     A0 00 90 FD | 	jmp	#LR__0665
072ac                 | LR__0653
072ac     A8 07 B0 FD | 	call	#_compile_fun_2p
072b0     FD 28 02 F6 | 	mov	local06, result1
072b4     94 00 90 FD | 	jmp	#LR__0665
072b8                 | LR__0654
072b8     9C 07 B0 FD | 	call	#_compile_fun_2p
072bc     FD 28 02 F6 | 	mov	local06, result1
072c0     88 00 90 FD | 	jmp	#LR__0665
072c4                 | LR__0655
072c4     90 07 B0 FD | 	call	#_compile_fun_2p
072c8     FD 28 02 F6 | 	mov	local06, result1
072cc     7C 00 90 FD | 	jmp	#LR__0665
072d0                 | LR__0656
072d0     84 07 B0 FD | 	call	#_compile_fun_2p
072d4     FD 28 02 F6 | 	mov	local06, result1
072d8     70 00 90 FD | 	jmp	#LR__0665
072dc                 | LR__0657
072dc     78 07 B0 FD | 	call	#_compile_fun_2p
072e0     FD 28 02 F6 | 	mov	local06, result1
072e4     64 00 90 FD | 	jmp	#LR__0665
072e8                 | LR__0658
072e8     3C 0A B0 FD | 	call	#_compile_fun_varp
072ec     FD 2C 02 F6 | 	mov	local08, result1
072f0     FE 28 02 F6 | 	mov	local06, result2
072f4     54 00 90 FD | 	jmp	#LR__0665
072f8                 | LR__0659
072f8     E4 07 B0 FD | 	call	#_compile_fun_3p
072fc     FD 28 02 F6 | 	mov	local06, result1
07300     48 00 90 FD | 	jmp	#LR__0665
07304                 | LR__0660
07304                 | ' return expr()
07304     00 27 B0 FD | 	call	#_expr
07308     FD 28 02 F6 | 	mov	local06, result1
0730c     3C 00 90 FD | 	jmp	#LR__0665
07310                 | LR__0661
07310     44 07 B0 FD | 	call	#_compile_fun_2p
07314     FD 28 02 F6 | 	mov	local06, result1
07318     30 00 90 FD | 	jmp	#LR__0665
0731c                 | LR__0662
0731c     38 07 B0 FD | 	call	#_compile_fun_2p
07320     FD 28 02 F6 | 	mov	local06, result1
07324     24 00 90 FD | 	jmp	#LR__0665
07328                 | LR__0663
07328     2C 07 B0 FD | 	call	#_compile_fun_2p
0732c     FD 28 02 F6 | 	mov	local06, result1
07330     18 00 90 FD | 	jmp	#LR__0665
07334                 | LR__0664
07334     CC 0A B0 FD | 	call	#_compile_array_assign
07338     FD 28 02 F6 | 	mov	local06, result1
0733c     0E 28 0E F2 | 	cmp	local06, #14 wz
07340     C4 00 90 5D |  if_ne	jmp	#LR__0666
07344                 | ' return 23
07344     17 28 06 F6 | 	mov	local06, #23
07348     BC 00 90 FD | 	jmp	#LR__0666
0734c                 | ' return 23
0734c                 | LR__0665
0734c     15 23 02 F6 | 	mov	local03, local07
07350     16 1F 02 F6 | 	mov	local01, local08
07354     0F 2F 02 F6 | 	mov	local09, local01
07358     10 31 02 F6 | 	mov	local10, local02
0735c     11 2B 02 F6 | 	mov	local07, local03
07360     4A 00 00 FF 
07364     7C E4 05 F1 | 	add	objptr, ##38012
07368     F2 1E 02 FB | 	rdlong	local01, objptr
0736c     0F 2D 02 F6 | 	mov	local08, local01
07370     01 2C 66 F0 | 	shl	local08, #1
07374     0F 2D 02 F1 | 	add	local08, local01
07378     02 2C 66 F0 | 	shl	local08, #2
0737c     03 00 00 FF 
07380     00 E4 85 F1 | 	sub	objptr, ##1536
07384     F2 2C 02 F1 | 	add	local08, objptr
07388     16 2F 62 FC | 	wrlong	local09, local08
0738c     03 00 00 FF 
07390     00 E4 05 F1 | 	add	objptr, ##1536
07394     F2 1E 02 FB | 	rdlong	local01, objptr
07398     0F 2F 02 F6 | 	mov	local09, local01
0739c     01 2E 66 F0 | 	shl	local09, #1
073a0     0F 2F 02 F1 | 	add	local09, local01
073a4     02 2E 66 F0 | 	shl	local09, #2
073a8     03 00 00 FF 
073ac     00 E4 85 F1 | 	sub	objptr, ##1536
073b0     F2 2E 02 F1 | 	add	local09, objptr
073b4     04 2E 06 F1 | 	add	local09, #4
073b8     17 31 62 FC | 	wrlong	local10, local09
073bc     03 00 00 FF 
073c0     00 E4 05 F1 | 	add	objptr, ##1536
073c4     F2 1E 02 FB | 	rdlong	local01, objptr
073c8     0F 31 02 F6 | 	mov	local10, local01
073cc     01 30 66 F0 | 	shl	local10, #1
073d0     0F 31 02 F1 | 	add	local10, local01
073d4     02 30 66 F0 | 	shl	local10, #2
073d8     03 00 00 FF 
073dc     00 E4 85 F1 | 	sub	objptr, ##1536
073e0     F2 30 02 F1 | 	add	local10, objptr
073e4     08 30 06 F1 | 	add	local10, #8
073e8     18 2B 62 FC | 	wrlong	local07, local10
073ec     03 00 00 FF 
073f0     00 E4 05 F1 | 	add	objptr, ##1536
073f4     F2 2E 02 FB | 	rdlong	local09, objptr
073f8     01 2E 06 F1 | 	add	local09, #1
073fc     F2 2E 62 FC | 	wrlong	local09, objptr
07400     4A 00 00 FF 
07404     7C E4 85 F1 | 	sub	objptr, ##38012
07408                 | LR__0666
07408                 | ' 
07408                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07408                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07408     03 24 0E F2 | 	cmp	local04, #3 wz
0740c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07410     38 00 90 5D |  if_ne	jmp	#LR__0667
07414     4A 00 00 FF 
07418     7C E4 05 F1 | 	add	objptr, ##38012
0741c     F2 30 02 FB | 	rdlong	local10, objptr
07420     18 1F 02 F6 | 	mov	local01, local10
07424     01 1E 66 F0 | 	shl	local01, #1
07428     18 1F 02 F1 | 	add	local01, local10
0742c     02 1E 66 F0 | 	shl	local01, #2
07430     03 00 00 FF 
07434     00 E4 85 F1 | 	sub	objptr, ##1536
07438     F2 1E 02 F1 | 	add	local01, objptr
0743c     08 1E 06 F1 | 	add	local01, #8
07440     0F FD 6B FC | 	wrlong	#510, local01
07444     47 00 00 FF 
07448     7C E4 85 F1 | 	sub	objptr, ##36476
0744c                 | LR__0667
0744c                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
0744c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0744c     4A 00 00 FF 
07450     7C E4 05 F1 | 	add	objptr, ##38012
07454     F2 1E 02 FB | 	rdlong	local01, objptr
07458     4A 00 00 FF 
0745c     7C E4 85 F1 | 	sub	objptr, ##38012
07460     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
07464                 | LR__0668
07464     0F 31 02 F6 | 	mov	local10, local01
07468     01 30 66 F0 | 	shl	local10, #1
0746c     0F 31 02 F1 | 	add	local10, local01
07470     02 30 66 F0 | 	shl	local10, #2
07474     47 00 00 FF 
07478     7C E4 05 F1 | 	add	objptr, ##36476
0747c     F2 30 02 F1 | 	add	local10, objptr
07480     08 30 06 F1 | 	add	local10, #8
07484     18 31 02 FB | 	rdlong	local10, local10
07488     9B 30 0E F2 | 	cmp	local10, #155 wz
0748c     47 00 00 FF 
07490     7C E4 85 F1 | 	sub	objptr, ##36476
07494     70 00 90 5D |  if_ne	jmp	#LR__0669
07498     0F 2F 02 F6 | 	mov	local09, local01
0749c     01 2E 86 F1 | 	sub	local09, #1
074a0     17 31 02 F6 | 	mov	local10, local09
074a4     01 30 66 F0 | 	shl	local10, #1
074a8     17 31 02 F1 | 	add	local10, local09
074ac     02 30 66 F0 | 	shl	local10, #2
074b0     47 00 00 FF 
074b4     7C E4 05 F1 | 	add	objptr, ##36476
074b8     F2 30 02 F1 | 	add	local10, objptr
074bc     08 30 06 F1 | 	add	local10, #8
074c0     18 31 02 FB | 	rdlong	local10, local10
074c4     11 30 0E F2 | 	cmp	local10, #17 wz
074c8     47 00 00 FF 
074cc     7C E4 85 F1 | 	sub	objptr, ##36476
074d0     34 00 90 5D |  if_ne	jmp	#LR__0669
074d4     0F 2F 02 F6 | 	mov	local09, local01
074d8     01 2E 86 F1 | 	sub	local09, #1
074dc     17 31 02 F6 | 	mov	local10, local09
074e0     01 30 66 F0 | 	shl	local10, #1
074e4     17 31 02 F1 | 	add	local10, local09
074e8     02 30 66 F0 | 	shl	local10, #2
074ec     47 00 00 FF 
074f0     7C E4 05 F1 | 	add	objptr, ##36476
074f4     F2 30 02 F1 | 	add	local10, objptr
074f8     08 30 06 F1 | 	add	local10, #8
074fc     18 25 68 FC | 	wrlong	#18, local10
07500     47 00 00 FF 
07504     7C E4 85 F1 | 	sub	objptr, ##36476
07508                 | LR__0669
07508     01 1E 86 F1 | 	sub	local01, #1
0750c     01 1E 56 F2 | 	cmps	local01, #1 wc
07510     50 FF 9F 3D |  if_ae	jmp	#LR__0668
07514                 | LR__0670
07514                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07514                 | ' return err
07514     14 FB 01 F6 | 	mov	result1, local06
07518     A7 F0 03 F6 | 	mov	ptra, fp
0751c     B2 00 A0 FD | 	call	#popregs_
07520                 | _compile_immediate_ret
07520     2D 00 64 FD | 	ret
07524                 | 
07524                 | ' 
07524                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07524                 | ' 
07524                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07524                 | _compile_immediate_assign
07524     0C 4A 05 F6 | 	mov	COUNT_, #12
07528     A8 00 A0 FD | 	call	#pushregs_
0752c     09 25 02 F6 | 	mov	local04, arg01
07530     FF 22 06 F6 | 	mov	local03, #255
07534     01 26 66 F6 | 	neg	local05, #1
07538     00 28 06 F6 | 	mov	local06, #0
0753c                 | ' 
0753c                 | ' t1.result_type=result_error : t1.result.uresult=0
0753c                 | ' i=-1: j=-1 : err=0
0753c                 | ' 
0753c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0753c     02 24 0E F2 | 	cmp	local04, #2 wz
07540     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07544     35 00 00 AF 
07548     0C E4 05 A1 |  if_e	add	objptr, ##27148
0754c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07550     02 00 00 AF 
07554     38 E4 05 A1 |  if_e	add	objptr, ##1080
07558     F2 04 68 AC |  if_e	wrlong	#2, objptr
0755c     37 00 00 AF 
07560     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07564                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07564     04 24 0E F2 | 	cmp	local04, #4 wz
07568     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0756c     2C 00 90 5D |  if_ne	jmp	#LR__0680
07570     35 00 00 FF 
07574     14 E4 05 F1 | 	add	objptr, ##27156
07578     F2 2A 02 FB | 	rdlong	local07, objptr
0757c     02 00 00 FF 
07580     30 E4 05 F1 | 	add	objptr, ##1072
07584     F2 06 68 FC | 	wrlong	#3, objptr
07588     13 00 00 FF 
0758c     38 E4 05 F1 | 	add	objptr, ##9784
07590     F2 04 68 FC | 	wrlong	#2, objptr
07594     4A 00 00 FF 
07598     7C E4 85 F1 | 	sub	objptr, ##38012
0759c                 | LR__0680
0759c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0759c     05 24 0E F2 | 	cmp	local04, #5 wz
075a0     3C 00 90 5D |  if_ne	jmp	#LR__0681
075a4     37 00 00 FF 
075a8     44 E4 05 F1 | 	add	objptr, ##28228
075ac     F2 FA 01 FB | 	rdlong	result1, objptr
075b0     FD 2A 02 F6 | 	mov	local07, result1
075b4     03 2A 66 F0 | 	shl	local07, #3
075b8     02 00 00 FF 
075bc     38 E4 85 F1 | 	sub	objptr, ##1080
075c0     F2 2A 02 F1 | 	add	local07, objptr
075c4     15 2B 02 FB | 	rdlong	local07, local07
075c8     02 FA 05 F1 | 	add	result1, #2
075cc     02 00 00 FF 
075d0     38 E4 05 F1 | 	add	objptr, ##1080
075d4     F2 FA 61 FC | 	wrlong	result1, objptr
075d8     37 00 00 FF 
075dc     44 E4 85 F1 | 	sub	objptr, ##28228
075e0                 | LR__0681
075e0     15 13 02 F6 | 	mov	arg01, local07
075e4     01 14 06 F6 | 	mov	arg02, #1
075e8     1C B6 B1 FD | 	call	#__system__Right_S
075ec     FD 2C 02 F6 | 	mov	local08, result1
075f0     14 24 B0 FD | 	call	#_expr
075f4                 | ' 
075f4                 | ' suffix2$=right$(varname2$,1)
075f4                 | ' expr()
075f4                 | ' if varnum>0 then					' try to find a variable
075f4     35 00 00 FF 
075f8     08 E4 05 F1 | 	add	objptr, ##27144
075fc     F2 2E 02 FB | 	rdlong	local09, objptr
07600     35 00 00 FF 
07604     08 E4 85 F1 | 	sub	objptr, ##27144
07608     01 2E 56 F2 | 	cmps	local09, #1 wc
0760c     58 00 90 CD |  if_b	jmp	#LR__0684
07610                 | '   for i=0 to varnum-1
07610     00 30 06 F6 | 	mov	local10, #0
07614     35 00 00 FF 
07618     08 E4 05 F1 | 	add	objptr, ##27144
0761c     F2 32 02 FB | 	rdlong	local11, objptr
07620     35 00 00 FF 
07624     08 E4 85 F1 | 	sub	objptr, ##27144
07628                 | LR__0682
07628     19 31 52 F2 | 	cmps	local10, local11 wc
0762c     38 00 90 3D |  if_ae	jmp	#LR__0683
07630                 | '     if variables(i).name=varname2$ then j=i : exit
07630     18 2F 02 F6 | 	mov	local09, local10
07634     04 2E 66 F0 | 	shl	local09, #4
07638     14 00 00 FF 
0763c     F8 E5 05 F1 | 	add	objptr, ##10744
07640     F2 2E 02 F1 | 	add	local09, objptr
07644     17 13 02 FB | 	rdlong	arg01, local09
07648     15 15 02 F6 | 	mov	arg02, local07
0764c     14 00 00 FF 
07650     F8 E5 85 F1 | 	sub	objptr, ##10744
07654     D4 94 B1 FD | 	call	#__system___string_cmp
07658     00 FA 0D F2 | 	cmp	result1, #0 wz
0765c     18 27 02 A6 |  if_e	mov	local05, local10
07660     01 30 06 51 |  if_ne	add	local10, #1
07664     C0 FF 9F 5D |  if_ne	jmp	#LR__0682
07668                 | LR__0683
07668                 | LR__0684
07668                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07668     FF FF 7F FF 
0766c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07670     60 00 90 5D |  if_ne	jmp	#LR__0685
07674     35 00 00 FF 
07678     08 E4 05 F1 | 	add	objptr, ##27144
0767c     F2 2E 02 FB | 	rdlong	local09, objptr
07680     35 00 00 FF 
07684     08 E4 85 F1 | 	sub	objptr, ##27144
07688     02 00 00 FF 
0768c     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07690     40 00 90 3D |  if_ae	jmp	#LR__0685
07694     35 00 00 FF 
07698     08 E4 05 F1 | 	add	objptr, ##27144
0769c     F2 32 02 FB | 	rdlong	local11, objptr
076a0     04 32 66 F0 | 	shl	local11, #4
076a4     20 00 00 FF 
076a8     10 E4 85 F1 | 	sub	objptr, ##16400
076ac     F2 32 02 F1 | 	add	local11, objptr
076b0     19 2B 62 FC | 	wrlong	local07, local11
076b4     20 00 00 FF 
076b8     10 E4 05 F1 | 	add	objptr, ##16400
076bc     F2 2E 02 FB | 	rdlong	local09, objptr
076c0     17 27 02 F6 | 	mov	local05, local09
076c4     01 2E 06 F1 | 	add	local09, #1
076c8     F2 2E 62 FC | 	wrlong	local09, objptr
076cc     35 00 00 FF 
076d0     08 E4 85 F1 | 	sub	objptr, ##27144
076d4                 | LR__0685
076d4                 | ' if varnum>=maxvars then
076d4     35 00 00 FF 
076d8     08 E4 05 F1 | 	add	objptr, ##27144
076dc     F2 2E 02 FB | 	rdlong	local09, objptr
076e0     35 00 00 FF 
076e4     08 E4 85 F1 | 	sub	objptr, ##27144
076e8     02 00 00 FF 
076ec     00 2E 56 F2 | 	cmps	local09, ##1024 wc
076f0     2D 28 06 36 |  if_ae	mov	local06, #45
076f4     C8 01 90 3D |  if_ae	jmp	#LR__0690
076f8     13 1F 02 F6 | 	mov	local01, local05
076fc     17 22 06 F6 | 	mov	local03, #23
07700     0F 2F 02 F6 | 	mov	local09, local01
07704     10 35 02 F6 | 	mov	local12, local02
07708     11 1F 02 F6 | 	mov	local01, local03
0770c     4A 00 00 FF 
07710     7C E4 05 F1 | 	add	objptr, ##38012
07714     F2 32 02 FB | 	rdlong	local11, objptr
07718     19 31 02 F6 | 	mov	local10, local11
0771c     01 30 66 F0 | 	shl	local10, #1
07720     19 31 02 F1 | 	add	local10, local11
07724     02 30 66 F0 | 	shl	local10, #2
07728     03 00 00 FF 
0772c     00 E4 85 F1 | 	sub	objptr, ##1536
07730     F2 30 02 F1 | 	add	local10, objptr
07734     18 2F 62 FC | 	wrlong	local09, local10
07738     03 00 00 FF 
0773c     00 E4 05 F1 | 	add	objptr, ##1536
07740     F2 2E 02 FB | 	rdlong	local09, objptr
07744     17 33 02 F6 | 	mov	local11, local09
07748     01 32 66 F0 | 	shl	local11, #1
0774c     17 33 02 F1 | 	add	local11, local09
07750     02 32 66 F0 | 	shl	local11, #2
07754     03 00 00 FF 
07758     00 E4 85 F1 | 	sub	objptr, ##1536
0775c     F2 32 02 F1 | 	add	local11, objptr
07760     04 32 06 F1 | 	add	local11, #4
07764     19 35 62 FC | 	wrlong	local12, local11
07768     03 00 00 FF 
0776c     00 E4 05 F1 | 	add	objptr, ##1536
07770     F2 2E 02 FB | 	rdlong	local09, objptr
07774     17 35 02 F6 | 	mov	local12, local09
07778     01 34 66 F0 | 	shl	local12, #1
0777c     17 35 02 F1 | 	add	local12, local09
07780     02 34 66 F0 | 	shl	local12, #2
07784     03 00 00 FF 
07788     00 E4 85 F1 | 	sub	objptr, ##1536
0778c     F2 34 02 F1 | 	add	local12, objptr
07790     08 34 06 F1 | 	add	local12, #8
07794     1A 1F 62 FC | 	wrlong	local01, local12
07798     03 00 00 FF 
0779c     00 E4 05 F1 | 	add	objptr, ##1536
077a0     F2 2E 02 FB | 	rdlong	local09, objptr
077a4     01 2E 06 F1 | 	add	local09, #1
077a8     F2 2E 62 FC | 	wrlong	local09, objptr
077ac     4A 00 00 FF 
077b0     7C E4 85 F1 | 	sub	objptr, ##38012
077b4                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
077b4                 | '   compiledline(lineptr)=t1:  lineptr+=1 
077b4                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
077b4     03 24 0E F2 | 	cmp	local04, #3 wz
077b8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
077bc     38 00 90 5D |  if_ne	jmp	#LR__0686
077c0     4A 00 00 FF 
077c4     7C E4 05 F1 | 	add	objptr, ##38012
077c8     F2 34 02 FB | 	rdlong	local12, objptr
077cc     1A 1F 02 F6 | 	mov	local01, local12
077d0     01 1E 66 F0 | 	shl	local01, #1
077d4     1A 1F 02 F1 | 	add	local01, local12
077d8     02 1E 66 F0 | 	shl	local01, #2
077dc     03 00 00 FF 
077e0     00 E4 85 F1 | 	sub	objptr, ##1536
077e4     F2 1E 02 F1 | 	add	local01, objptr
077e8     08 1E 06 F1 | 	add	local01, #8
077ec     0F FD 6B FC | 	wrlong	#510, local01
077f0     47 00 00 FF 
077f4     7C E4 85 F1 | 	sub	objptr, ##36476
077f8                 | LR__0686
077f8                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
077f8     4A 00 00 FF 
077fc     7C E4 05 F1 | 	add	objptr, ##38012
07800     F2 30 02 FB | 	rdlong	local10, objptr
07804     4A 00 00 FF 
07808     7C E4 85 F1 | 	sub	objptr, ##38012
0780c     97 58 48 FB | 	callpa	#(@LR__0689-@LR__0687)>>2,fcache_load_ptr_
07810                 | LR__0687
07810     18 35 02 F6 | 	mov	local12, local10
07814     01 34 66 F0 | 	shl	local12, #1
07818     18 35 02 F1 | 	add	local12, local10
0781c     02 34 66 F0 | 	shl	local12, #2
07820     47 00 00 FF 
07824     7C E4 05 F1 | 	add	objptr, ##36476
07828     F2 34 02 F1 | 	add	local12, objptr
0782c     08 34 06 F1 | 	add	local12, #8
07830     1A 35 02 FB | 	rdlong	local12, local12
07834     9B 34 0E F2 | 	cmp	local12, #155 wz
07838     47 00 00 FF 
0783c     7C E4 85 F1 | 	sub	objptr, ##36476
07840     70 00 90 5D |  if_ne	jmp	#LR__0688
07844     18 35 02 F6 | 	mov	local12, local10
07848     01 34 86 F1 | 	sub	local12, #1
0784c     1A 1F 02 F6 | 	mov	local01, local12
07850     01 1E 66 F0 | 	shl	local01, #1
07854     1A 1F 02 F1 | 	add	local01, local12
07858     02 1E 66 F0 | 	shl	local01, #2
0785c     47 00 00 FF 
07860     7C E4 05 F1 | 	add	objptr, ##36476
07864     F2 1E 02 F1 | 	add	local01, objptr
07868     08 1E 06 F1 | 	add	local01, #8
0786c     0F 1F 02 FB | 	rdlong	local01, local01
07870     11 1E 0E F2 | 	cmp	local01, #17 wz
07874     47 00 00 FF 
07878     7C E4 85 F1 | 	sub	objptr, ##36476
0787c     34 00 90 5D |  if_ne	jmp	#LR__0688
07880     18 35 02 F6 | 	mov	local12, local10
07884     01 34 86 F1 | 	sub	local12, #1
07888     1A 1F 02 F6 | 	mov	local01, local12
0788c     01 1E 66 F0 | 	shl	local01, #1
07890     1A 1F 02 F1 | 	add	local01, local12
07894     02 1E 66 F0 | 	shl	local01, #2
07898     47 00 00 FF 
0789c     7C E4 05 F1 | 	add	objptr, ##36476
078a0     F2 1E 02 F1 | 	add	local01, objptr
078a4     08 1E 06 F1 | 	add	local01, #8
078a8     0F 25 68 FC | 	wrlong	#18, local01
078ac     47 00 00 FF 
078b0     7C E4 85 F1 | 	sub	objptr, ##36476
078b4                 | LR__0688
078b4     01 30 86 F1 | 	sub	local10, #1
078b8     01 30 56 F2 | 	cmps	local10, #1 wc
078bc     50 FF 9F 3D |  if_ae	jmp	#LR__0687
078c0                 | LR__0689
078c0                 | LR__0690
078c0                 | ' return err
078c0     14 FB 01 F6 | 	mov	result1, local06
078c4     A7 F0 03 F6 | 	mov	ptra, fp
078c8     B2 00 A0 FD | 	call	#popregs_
078cc                 | _compile_immediate_assign_ret
078cc     2D 00 64 FD | 	ret
078d0                 | 
078d0                 | ' 
078d0                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
078d0                 | ' 
078d0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
078d0                 | _compile
078d0     03 4A 05 F6 | 	mov	COUNT_, #3
078d4     A8 00 A0 FD | 	call	#pushregs_
078d8     09 1F 02 F6 | 	mov	local01, arg01
078dc     0B 21 02 F6 | 	mov	local02, arg03
078e0     47 00 00 FF 
078e4     7C E4 05 F1 | 	add	objptr, ##36476
078e8     F2 1E 62 FC | 	wrlong	local01, objptr
078ec     04 E4 05 F1 | 	add	objptr, #4
078f0     F2 14 62 FC | 	wrlong	arg02, objptr
078f4     47 00 00 FF 
078f8     80 E4 85 F1 | 	sub	objptr, ##36480
078fc     10 13 02 F6 | 	mov	arg01, local02
07900     01 12 06 F1 | 	add	arg01, #1
07904     0F 15 02 F6 | 	mov	arg02, local01
07908     18 F3 BF FD | 	call	#_compile_immediate
0790c     FD 22 0A F6 | 	mov	local03, result1 wz
07910                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07910                 | ' ucompiledline(0)=alinemajor
07910                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07910                 | ' 
07910                 | ' ' cont: 
07910                 | ' ' 0 - this is the first part of the line that will continue
07910                 | ' ' 1 - this is the continuation of the line
07910                 | ' ' 2 - this is the last continued line
07910                 | ' ' 3 - this is the one and only part
07910                 | ' 
07910                 | ' err=compile_immediate(cont+1,alinemajor) 
07910                 | ' if err=0 andalso alinemajor>0 then
07910     74 00 90 5D |  if_ne	jmp	#LR__0705
07914     01 1E 16 F2 | 	cmp	local01, #1 wc
07918     6C 00 90 CD |  if_b	jmp	#LR__0705
0791c                 | '   if cont=3 orelse cont=2 then 
0791c     03 20 0E F2 | 	cmp	local02, #3 wz
07920     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07924     60 00 90 5D |  if_ne	jmp	#LR__0704
07928                 | '     if alinemajor >lastline then 
07928     4A 00 00 FF 
0792c     88 E4 05 F1 | 	add	objptr, ##38024
07930     F2 14 02 FB | 	rdlong	arg02, objptr
07934     4A 00 00 FF 
07938     88 E4 85 F1 | 	sub	objptr, ##38024
0793c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07940     0C 00 90 ED |  if_be	jmp	#LR__0700
07944     0F 13 02 F6 | 	mov	arg01, local01
07948     10 F2 BF FD | 	call	#_add_line_at_end
0794c     38 00 90 FD | 	jmp	#LR__0703
07950                 | LR__0700
07950     0F 13 02 F6 | 	mov	arg01, local01
07954     D4 EB BF FD | 	call	#_deleteline
07958                 | '       deleteline(alinemajor)  
07958                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07958     4A 00 00 FF 
0795c     88 E4 05 F1 | 	add	objptr, ##38024
07960     F2 14 02 FB | 	rdlong	arg02, objptr
07964     4A 00 00 FF 
07968     88 E4 85 F1 | 	sub	objptr, ##38024
0796c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07970     0C 00 90 ED |  if_be	jmp	#LR__0701
07974     0F 13 02 F6 | 	mov	arg01, local01
07978     E0 F1 BF FD | 	call	#_add_line_at_end
0797c     08 00 90 FD | 	jmp	#LR__0702
07980                 | LR__0701
07980     0F 13 02 F6 | 	mov	arg01, local01
07984     B8 EF BF FD | 	call	#_insertline
07988                 | LR__0702
07988                 | LR__0703
07988                 | LR__0704
07988                 | LR__0705
07988                 | ' return err
07988     11 FB 01 F6 | 	mov	result1, local03
0798c     A7 F0 03 F6 | 	mov	ptra, fp
07990     B2 00 A0 FD | 	call	#popregs_
07994                 | _compile_ret
07994     2D 00 64 FD | 	ret
07998                 | 
07998                 | ' 
07998                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07998                 | ' 
07998                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07998                 | _compile_assign
07998     03 4A 05 F6 | 	mov	COUNT_, #3
0799c     A8 00 A0 FD | 	call	#pushregs_
079a0     09 1F 02 F6 | 	mov	local01, arg01
079a4     0B 21 02 F6 | 	mov	local02, arg03
079a8     47 00 00 FF 
079ac     7C E4 05 F1 | 	add	objptr, ##36476
079b0     F2 1E 62 FC | 	wrlong	local01, objptr
079b4     04 E4 05 F1 | 	add	objptr, #4
079b8     F2 14 62 FC | 	wrlong	arg02, objptr
079bc     47 00 00 FF 
079c0     80 E4 85 F1 | 	sub	objptr, ##36480
079c4     10 13 02 F6 | 	mov	arg01, local02
079c8     01 12 06 F1 | 	add	arg01, #1
079cc     54 FB BF FD | 	call	#_compile_immediate_assign
079d0     FD 22 02 F6 | 	mov	local03, result1
079d4                 | ' 
079d4                 | ' ucompiledline(0)=alinemajor
079d4                 | ' ucompiledline(1)=alineminor
079d4                 | ' 
079d4                 | ' err=compile_immediate_assign(cont+1) 
079d4                 | ' if alinemajor>0 then
079d4     01 1E 16 F2 | 	cmp	local01, #1 wc
079d8     6C 00 90 CD |  if_b	jmp	#LR__0715
079dc                 | '   if cont=3 orelse cont=2 then 
079dc     03 20 0E F2 | 	cmp	local02, #3 wz
079e0     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
079e4     60 00 90 5D |  if_ne	jmp	#LR__0714
079e8                 | '     if alinemajor >lastline then 
079e8     4A 00 00 FF 
079ec     88 E4 05 F1 | 	add	objptr, ##38024
079f0     F2 14 02 FB | 	rdlong	arg02, objptr
079f4     4A 00 00 FF 
079f8     88 E4 85 F1 | 	sub	objptr, ##38024
079fc     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a00     0C 00 90 ED |  if_be	jmp	#LR__0710
07a04     0F 13 02 F6 | 	mov	arg01, local01
07a08     50 F1 BF FD | 	call	#_add_line_at_end
07a0c     38 00 90 FD | 	jmp	#LR__0713
07a10                 | LR__0710
07a10     0F 13 02 F6 | 	mov	arg01, local01
07a14     14 EB BF FD | 	call	#_deleteline
07a18                 | '       deleteline(alinemajor)  
07a18                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07a18     4A 00 00 FF 
07a1c     88 E4 05 F1 | 	add	objptr, ##38024
07a20     F2 14 02 FB | 	rdlong	arg02, objptr
07a24     4A 00 00 FF 
07a28     88 E4 85 F1 | 	sub	objptr, ##38024
07a2c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a30     0C 00 90 ED |  if_be	jmp	#LR__0711
07a34     0F 13 02 F6 | 	mov	arg01, local01
07a38     20 F1 BF FD | 	call	#_add_line_at_end
07a3c     08 00 90 FD | 	jmp	#LR__0712
07a40                 | LR__0711
07a40     0F 13 02 F6 | 	mov	arg01, local01
07a44     F8 EE BF FD | 	call	#_insertline
07a48                 | LR__0712
07a48                 | LR__0713
07a48                 | LR__0714
07a48                 | LR__0715
07a48                 | ' return err
07a48     11 FB 01 F6 | 	mov	result1, local03
07a4c     A7 F0 03 F6 | 	mov	ptra, fp
07a50     B2 00 A0 FD | 	call	#popregs_
07a54                 | _compile_assign_ret
07a54     2D 00 64 FD | 	ret
07a58                 | 
07a58                 | ' 
07a58                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
07a58                 | ' 
07a58                 | ' function compile_fun_2p() as ulong
07a58                 | _compile_fun_2p
07a58     01 4A 05 F6 | 	mov	COUNT_, #1
07a5c     A8 00 A0 FD | 	call	#pushregs_
07a60     A4 1F B0 FD | 	call	#_expr
07a64     FD 1E 02 F6 | 	mov	local01, result1
07a68                 | ' err=expr() : if err>0 then return err
07a68     01 1E 16 F2 | 	cmp	local01, #1 wc
07a6c     0F FB 01 36 |  if_ae	mov	result1, local01
07a70     60 00 90 3D |  if_ae	jmp	#LR__0720
07a74                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07a74     37 00 00 FF 
07a78     44 E4 05 F1 | 	add	objptr, ##28228
07a7c     F2 1E 02 FB | 	rdlong	local01, objptr
07a80     03 1E 66 F0 | 	shl	local01, #3
07a84     02 00 00 FF 
07a88     38 E4 85 F1 | 	sub	objptr, ##1080
07a8c     F2 1E 02 F1 | 	add	local01, objptr
07a90     04 1E 06 F1 | 	add	local01, #4
07a94     0F 1F 02 FB | 	rdlong	local01, local01
07a98     11 1E 0E F2 | 	cmp	local01, #17 wz
07a9c     35 00 00 FF 
07aa0     0C E4 85 F1 | 	sub	objptr, ##27148
07aa4     15 FA 05 56 |  if_ne	mov	result1, #21
07aa8     28 00 90 5D |  if_ne	jmp	#LR__0720
07aac     37 00 00 FF 
07ab0     44 E4 05 F1 | 	add	objptr, ##28228
07ab4     F2 1E 02 FB | 	rdlong	local01, objptr
07ab8     01 1E 06 F1 | 	add	local01, #1
07abc     F2 1E 62 FC | 	wrlong	local01, objptr
07ac0     37 00 00 FF 
07ac4     44 E4 85 F1 | 	sub	objptr, ##28228
07ac8     3C 1F B0 FD | 	call	#_expr
07acc                 | ' err=expr() : if err>0 then return err
07acc     01 FA 15 F2 | 	cmp	result1, #1 wc
07ad0                 | ' return 0
07ad0     00 FA 05 C6 |  if_b	mov	result1, #0
07ad4                 | LR__0720
07ad4     A7 F0 03 F6 | 	mov	ptra, fp
07ad8     B2 00 A0 FD | 	call	#popregs_
07adc                 | _compile_fun_2p_ret
07adc     2D 00 64 FD | 	ret
07ae0                 | 
07ae0                 | ' 
07ae0                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
07ae0                 | ' 
07ae0                 | ' function compile_fun_3p() as ulong
07ae0                 | _compile_fun_3p
07ae0     01 4A 05 F6 | 	mov	COUNT_, #1
07ae4     A8 00 A0 FD | 	call	#pushregs_
07ae8     1C 1F B0 FD | 	call	#_expr
07aec     FD 1E 02 F6 | 	mov	local01, result1
07af0                 | ' err=expr() : if err>0 then return err
07af0     01 1E 16 F2 | 	cmp	local01, #1 wc
07af4     0F FB 01 36 |  if_ae	mov	result1, local01
07af8     C8 00 90 3D |  if_ae	jmp	#LR__0730
07afc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07afc     37 00 00 FF 
07b00     44 E4 05 F1 | 	add	objptr, ##28228
07b04     F2 1E 02 FB | 	rdlong	local01, objptr
07b08     03 1E 66 F0 | 	shl	local01, #3
07b0c     02 00 00 FF 
07b10     38 E4 85 F1 | 	sub	objptr, ##1080
07b14     F2 1E 02 F1 | 	add	local01, objptr
07b18     04 1E 06 F1 | 	add	local01, #4
07b1c     0F 1F 02 FB | 	rdlong	local01, local01
07b20     11 1E 0E F2 | 	cmp	local01, #17 wz
07b24     35 00 00 FF 
07b28     0C E4 85 F1 | 	sub	objptr, ##27148
07b2c     15 FA 05 56 |  if_ne	mov	result1, #21
07b30     90 00 90 5D |  if_ne	jmp	#LR__0730
07b34     37 00 00 FF 
07b38     44 E4 05 F1 | 	add	objptr, ##28228
07b3c     F2 1E 02 FB | 	rdlong	local01, objptr
07b40     01 1E 06 F1 | 	add	local01, #1
07b44     F2 1E 62 FC | 	wrlong	local01, objptr
07b48     37 00 00 FF 
07b4c     44 E4 85 F1 | 	sub	objptr, ##28228
07b50     B4 1E B0 FD | 	call	#_expr
07b54     FD 1E 02 F6 | 	mov	local01, result1
07b58                 | ' err=expr() : if err>0 then return err
07b58     01 1E 16 F2 | 	cmp	local01, #1 wc
07b5c     0F FB 01 36 |  if_ae	mov	result1, local01
07b60     60 00 90 3D |  if_ae	jmp	#LR__0730
07b64                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07b64     37 00 00 FF 
07b68     44 E4 05 F1 | 	add	objptr, ##28228
07b6c     F2 1E 02 FB | 	rdlong	local01, objptr
07b70     03 1E 66 F0 | 	shl	local01, #3
07b74     02 00 00 FF 
07b78     38 E4 85 F1 | 	sub	objptr, ##1080
07b7c     F2 1E 02 F1 | 	add	local01, objptr
07b80     04 1E 06 F1 | 	add	local01, #4
07b84     0F 1F 02 FB | 	rdlong	local01, local01
07b88     11 1E 0E F2 | 	cmp	local01, #17 wz
07b8c     35 00 00 FF 
07b90     0C E4 85 F1 | 	sub	objptr, ##27148
07b94     15 FA 05 56 |  if_ne	mov	result1, #21
07b98     28 00 90 5D |  if_ne	jmp	#LR__0730
07b9c     37 00 00 FF 
07ba0     44 E4 05 F1 | 	add	objptr, ##28228
07ba4     F2 1E 02 FB | 	rdlong	local01, objptr
07ba8     01 1E 06 F1 | 	add	local01, #1
07bac     F2 1E 62 FC | 	wrlong	local01, objptr
07bb0     37 00 00 FF 
07bb4     44 E4 85 F1 | 	sub	objptr, ##28228
07bb8     4C 1E B0 FD | 	call	#_expr
07bbc                 | ' err=expr() : if err>0 then return err
07bbc     01 FA 15 F2 | 	cmp	result1, #1 wc
07bc0                 | ' return 0
07bc0     00 FA 05 C6 |  if_b	mov	result1, #0
07bc4                 | LR__0730
07bc4     A7 F0 03 F6 | 	mov	ptra, fp
07bc8     B2 00 A0 FD | 	call	#popregs_
07bcc                 | _compile_fun_3p_ret
07bcc     2D 00 64 FD | 	ret
07bd0                 | 
07bd0                 | ' 
07bd0                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
07bd0                 | ' 
07bd0                 | ' function compile_fun_4p() as ulong
07bd0                 | _compile_fun_4p
07bd0     01 4A 05 F6 | 	mov	COUNT_, #1
07bd4     A8 00 A0 FD | 	call	#pushregs_
07bd8     2C 1E B0 FD | 	call	#_expr
07bdc     FD 1E 02 F6 | 	mov	local01, result1
07be0                 | ' err=expr() : if err>0 then return err
07be0     01 1E 16 F2 | 	cmp	local01, #1 wc
07be4     0F FB 01 36 |  if_ae	mov	result1, local01
07be8     30 01 90 3D |  if_ae	jmp	#LR__0740
07bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07bec     37 00 00 FF 
07bf0     44 E4 05 F1 | 	add	objptr, ##28228
07bf4     F2 1E 02 FB | 	rdlong	local01, objptr
07bf8     03 1E 66 F0 | 	shl	local01, #3
07bfc     02 00 00 FF 
07c00     38 E4 85 F1 | 	sub	objptr, ##1080
07c04     F2 1E 02 F1 | 	add	local01, objptr
07c08     04 1E 06 F1 | 	add	local01, #4
07c0c     0F 1F 02 FB | 	rdlong	local01, local01
07c10     11 1E 0E F2 | 	cmp	local01, #17 wz
07c14     35 00 00 FF 
07c18     0C E4 85 F1 | 	sub	objptr, ##27148
07c1c     15 FA 05 56 |  if_ne	mov	result1, #21
07c20     F8 00 90 5D |  if_ne	jmp	#LR__0740
07c24     37 00 00 FF 
07c28     44 E4 05 F1 | 	add	objptr, ##28228
07c2c     F2 1E 02 FB | 	rdlong	local01, objptr
07c30     01 1E 06 F1 | 	add	local01, #1
07c34     F2 1E 62 FC | 	wrlong	local01, objptr
07c38     37 00 00 FF 
07c3c     44 E4 85 F1 | 	sub	objptr, ##28228
07c40     C4 1D B0 FD | 	call	#_expr
07c44     FD 1E 02 F6 | 	mov	local01, result1
07c48                 | ' err=expr() : if err>0 then return err
07c48     01 1E 16 F2 | 	cmp	local01, #1 wc
07c4c     0F FB 01 36 |  if_ae	mov	result1, local01
07c50     C8 00 90 3D |  if_ae	jmp	#LR__0740
07c54                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07c54     37 00 00 FF 
07c58     44 E4 05 F1 | 	add	objptr, ##28228
07c5c     F2 1E 02 FB | 	rdlong	local01, objptr
07c60     03 1E 66 F0 | 	shl	local01, #3
07c64     02 00 00 FF 
07c68     38 E4 85 F1 | 	sub	objptr, ##1080
07c6c     F2 1E 02 F1 | 	add	local01, objptr
07c70     04 1E 06 F1 | 	add	local01, #4
07c74     0F 1F 02 FB | 	rdlong	local01, local01
07c78     11 1E 0E F2 | 	cmp	local01, #17 wz
07c7c     35 00 00 FF 
07c80     0C E4 85 F1 | 	sub	objptr, ##27148
07c84     15 FA 05 56 |  if_ne	mov	result1, #21
07c88     90 00 90 5D |  if_ne	jmp	#LR__0740
07c8c     37 00 00 FF 
07c90     44 E4 05 F1 | 	add	objptr, ##28228
07c94     F2 1E 02 FB | 	rdlong	local01, objptr
07c98     01 1E 06 F1 | 	add	local01, #1
07c9c     F2 1E 62 FC | 	wrlong	local01, objptr
07ca0     37 00 00 FF 
07ca4     44 E4 85 F1 | 	sub	objptr, ##28228
07ca8     5C 1D B0 FD | 	call	#_expr
07cac     FD 1E 02 F6 | 	mov	local01, result1
07cb0                 | ' err=expr() : if err>0 then return err
07cb0     01 1E 16 F2 | 	cmp	local01, #1 wc
07cb4     0F FB 01 36 |  if_ae	mov	result1, local01
07cb8     60 00 90 3D |  if_ae	jmp	#LR__0740
07cbc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
07cbc     37 00 00 FF 
07cc0     44 E4 05 F1 | 	add	objptr, ##28228
07cc4     F2 1E 02 FB | 	rdlong	local01, objptr
07cc8     03 1E 66 F0 | 	shl	local01, #3
07ccc     02 00 00 FF 
07cd0     38 E4 85 F1 | 	sub	objptr, ##1080
07cd4     F2 1E 02 F1 | 	add	local01, objptr
07cd8     04 1E 06 F1 | 	add	local01, #4
07cdc     0F 1F 02 FB | 	rdlong	local01, local01
07ce0     11 1E 0E F2 | 	cmp	local01, #17 wz
07ce4     35 00 00 FF 
07ce8     0C E4 85 F1 | 	sub	objptr, ##27148
07cec     15 FA 05 56 |  if_ne	mov	result1, #21
07cf0     28 00 90 5D |  if_ne	jmp	#LR__0740
07cf4     37 00 00 FF 
07cf8     44 E4 05 F1 | 	add	objptr, ##28228
07cfc     F2 1E 02 FB | 	rdlong	local01, objptr
07d00     01 1E 06 F1 | 	add	local01, #1
07d04     F2 1E 62 FC | 	wrlong	local01, objptr
07d08     37 00 00 FF 
07d0c     44 E4 85 F1 | 	sub	objptr, ##28228
07d10     F4 1C B0 FD | 	call	#_expr
07d14                 | ' err=expr() : if err>0 then return err
07d14     01 FA 15 F2 | 	cmp	result1, #1 wc
07d18                 | ' return 0
07d18     00 FA 05 C6 |  if_b	mov	result1, #0
07d1c                 | LR__0740
07d1c     A7 F0 03 F6 | 	mov	ptra, fp
07d20     B2 00 A0 FD | 	call	#popregs_
07d24                 | _compile_fun_4p_ret
07d24     2D 00 64 FD | 	ret
07d28                 | 
07d28                 | ' 
07d28                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
07d28                 | ' 
07d28                 | ' function compile_fun_varp() as ulong,ulong 
07d28                 | _compile_fun_varp
07d28     03 4A 05 F6 | 	mov	COUNT_, #3
07d2c     A8 00 A0 FD | 	call	#pushregs_
07d30     00 1E 06 F6 | 	mov	local01, #0
07d34                 | ' 
07d34                 | ' i=0 : err=0
07d34                 | ' if lparts(ct).token<>token_end then
07d34     37 00 00 FF 
07d38     44 E4 05 F1 | 	add	objptr, ##28228
07d3c     F2 20 02 FB | 	rdlong	local02, objptr
07d40     03 20 66 F0 | 	shl	local02, #3
07d44     02 00 00 FF 
07d48     38 E4 85 F1 | 	sub	objptr, ##1080
07d4c     F2 20 02 F1 | 	add	local02, objptr
07d50     04 20 06 F1 | 	add	local02, #4
07d54     10 21 02 FB | 	rdlong	local02, local02
07d58     FE 21 0E F2 | 	cmp	local02, #510 wz
07d5c     35 00 00 FF 
07d60     0C E4 85 F1 | 	sub	objptr, ##27148
07d64     88 00 90 AD |  if_e	jmp	#LR__0751
07d68                 | '   do
07d68                 | LR__0750
07d68     9C 1C B0 FD | 	call	#_expr
07d6c     01 1E 06 F1 | 	add	local01, #1
07d70                 | '     expr()
07d70                 | '     i+=1
07d70                 | '     if lparts(ct).token=token_comma then ct+=1
07d70     37 00 00 FF 
07d74     44 E4 05 F1 | 	add	objptr, ##28228
07d78     F2 20 02 FB | 	rdlong	local02, objptr
07d7c     03 20 66 F0 | 	shl	local02, #3
07d80     02 00 00 FF 
07d84     38 E4 85 F1 | 	sub	objptr, ##1080
07d88     F2 20 02 F1 | 	add	local02, objptr
07d8c     04 20 06 F1 | 	add	local02, #4
07d90     10 21 02 FB | 	rdlong	local02, local02
07d94     11 20 0E F2 | 	cmp	local02, #17 wz
07d98     35 00 00 FF 
07d9c     0C E4 85 F1 | 	sub	objptr, ##27148
07da0     37 00 00 AF 
07da4     44 E4 05 A1 |  if_e	add	objptr, ##28228
07da8     F2 22 02 AB |  if_e	rdlong	local03, objptr
07dac     01 22 06 A1 |  if_e	add	local03, #1
07db0     F2 22 62 AC |  if_e	wrlong	local03, objptr
07db4     37 00 00 AF 
07db8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07dbc                 | '     if lparts(ct).token=token_end then exit loop
07dbc     37 00 00 FF 
07dc0     44 E4 05 F1 | 	add	objptr, ##28228
07dc4     F2 20 02 FB | 	rdlong	local02, objptr
07dc8     03 20 66 F0 | 	shl	local02, #3
07dcc     02 00 00 FF 
07dd0     38 E4 85 F1 | 	sub	objptr, ##1080
07dd4     F2 20 02 F1 | 	add	local02, objptr
07dd8     04 20 06 F1 | 	add	local02, #4
07ddc     10 21 02 FB | 	rdlong	local02, local02
07de0     FE 21 0E F2 | 	cmp	local02, #510 wz
07de4     35 00 00 FF 
07de8     0C E4 85 F1 | 	sub	objptr, ##27148
07dec     78 FF 9F 5D |  if_ne	jmp	#LR__0750
07df0                 | LR__0751
07df0                 | ' return i,err
07df0     0F FB 01 F6 | 	mov	result1, local01
07df4     00 FC 05 F6 | 	mov	result2, #0
07df8     A7 F0 03 F6 | 	mov	ptra, fp
07dfc     B2 00 A0 FD | 	call	#popregs_
07e00                 | _compile_fun_varp_ret
07e00     2D 00 64 FD | 	ret
07e04                 | 
07e04                 | ' 
07e04                 | ' '----- compile assign to an array element
07e04                 | ' 
07e04                 | ' function compile_array_assign() as ulong 
07e04                 | _compile_array_assign
07e04     0B 4A 05 F6 | 	mov	COUNT_, #11
07e08     A8 00 A0 FD | 	call	#pushregs_
07e0c     00 24 06 F6 | 	mov	local04, #0
07e10     00 26 06 F6 | 	mov	local05, #0
07e14     37 00 00 FF 
07e18     44 E4 05 F1 | 	add	objptr, ##28228
07e1c     F2 28 02 FB | 	rdlong	local06, objptr
07e20     14 FB 01 F6 | 	mov	result1, local06
07e24     01 FA 85 F1 | 	sub	result1, #1
07e28     03 FA 65 F0 | 	shl	result1, #3
07e2c     02 00 00 FF 
07e30     38 E4 85 F1 | 	sub	objptr, ##1080
07e34     F2 FA 01 F1 | 	add	result1, objptr
07e38     FD 2A 02 FB | 	rdlong	local07, result1
07e3c                 | ' numpar=0 : err=0
07e3c                 | ' varname$=lparts(ct-1).part$
07e3c                 | ' if lparts(ct).token=token_lpar then
07e3c     03 28 66 F0 | 	shl	local06, #3
07e40     F2 28 02 F1 | 	add	local06, objptr
07e44     04 28 06 F1 | 	add	local06, #4
07e48     14 29 02 FB | 	rdlong	local06, local06
07e4c     15 28 0E F2 | 	cmp	local06, #21 wz
07e50     35 00 00 FF 
07e54     0C E4 85 F1 | 	sub	objptr, ##27148
07e58     F4 01 90 5D |  if_ne	jmp	#LR__0764
07e5c     37 00 00 FF 
07e60     44 E4 05 F1 | 	add	objptr, ##28228
07e64     F2 2C 02 FB | 	rdlong	local08, objptr
07e68     01 2C 06 F1 | 	add	local08, #1
07e6c     F2 2C 62 FC | 	wrlong	local08, objptr
07e70     37 00 00 FF 
07e74     44 E4 85 F1 | 	sub	objptr, ##28228
07e78                 | '   ct+=1 											' omit this lpar, this is for expr list
07e78                 | '   do
07e78                 | LR__0760
07e78     8C 1B B0 FD | 	call	#_expr
07e7c     37 00 00 FF 
07e80     44 E4 05 F1 | 	add	objptr, ##28228
07e84     F2 28 02 FB | 	rdlong	local06, objptr
07e88     01 28 06 F1 | 	add	local06, #1
07e8c     F2 28 62 FC | 	wrlong	local06, objptr
07e90     01 24 06 F1 | 	add	local04, #1
07e94     01 28 86 F1 | 	sub	local06, #1
07e98     03 28 66 F0 | 	shl	local06, #3
07e9c     02 00 00 FF 
07ea0     38 E4 85 F1 | 	sub	objptr, ##1080
07ea4     F2 28 02 F1 | 	add	local06, objptr
07ea8     04 28 06 F1 | 	add	local06, #4
07eac     14 2D 02 FB | 	rdlong	local08, local06
07eb0     14 2C 0E F2 | 	cmp	local08, #20 wz
07eb4     35 00 00 FF 
07eb8     0C E4 85 F1 | 	sub	objptr, ##27148
07ebc     34 00 90 AD |  if_e	jmp	#LR__0761
07ec0     37 00 00 FF 
07ec4     44 E4 05 F1 | 	add	objptr, ##28228
07ec8     F2 2C 02 FB | 	rdlong	local08, objptr
07ecc     03 2C 66 F0 | 	shl	local08, #3
07ed0     02 00 00 FF 
07ed4     38 E4 85 F1 | 	sub	objptr, ##1080
07ed8     F2 2C 02 F1 | 	add	local08, objptr
07edc     04 2C 06 F1 | 	add	local08, #4
07ee0     16 2D 02 FB | 	rdlong	local08, local08
07ee4     FE 2D 0E F2 | 	cmp	local08, #510 wz
07ee8     35 00 00 FF 
07eec     0C E4 85 F1 | 	sub	objptr, ##27148
07ef0     84 FF 9F 5D |  if_ne	jmp	#LR__0760
07ef4                 | LR__0761
07ef4     37 00 00 FF 
07ef8     44 E4 05 F1 | 	add	objptr, ##28228
07efc     F2 2C 02 FB | 	rdlong	local08, objptr
07f00     01 2C 06 F1 | 	add	local08, #1
07f04     F2 2C 62 FC | 	wrlong	local08, objptr
07f08     37 00 00 FF 
07f0c     44 E4 85 F1 | 	sub	objptr, ##28228
07f10     F4 1A B0 FD | 	call	#_expr
07f14     01 2E 66 F6 | 	neg	local09, #1
07f18     00 30 06 F6 | 	mov	local10, #0
07f1c                 | '   ct+=1 : expr()
07f1c                 | '   j=-1 : i=0 
07f1c                 | '   do 
07f1c                 | LR__0762
07f1c                 | '     if variables(i).name=varname$ then j=i: exit loop
07f1c     18 29 02 F6 | 	mov	local06, local10
07f20     04 28 66 F0 | 	shl	local06, #4
07f24     14 00 00 FF 
07f28     F8 E5 05 F1 | 	add	objptr, ##10744
07f2c     F2 28 02 F1 | 	add	local06, objptr
07f30     14 13 02 FB | 	rdlong	arg01, local06
07f34     15 15 02 F6 | 	mov	arg02, local07
07f38     14 00 00 FF 
07f3c     F8 E5 85 F1 | 	sub	objptr, ##10744
07f40     E8 8B B1 FD | 	call	#__system___string_cmp
07f44     00 FA 0D F2 | 	cmp	result1, #0 wz
07f48     18 2F 02 A6 |  if_e	mov	local09, local10
07f4c     20 00 90 AD |  if_e	jmp	#LR__0763
07f50     01 30 06 F1 | 	add	local10, #1
07f54     35 00 00 FF 
07f58     08 E4 05 F1 | 	add	objptr, ##27144
07f5c     F2 2C 02 FB | 	rdlong	local08, objptr
07f60     35 00 00 FF 
07f64     08 E4 85 F1 | 	sub	objptr, ##27144
07f68     16 31 5A F2 | 	cmps	local10, local08 wcz
07f6c     AC FF 9F ED |  if_be	jmp	#LR__0762
07f70                 | LR__0763
07f70     17 1F 02 F6 | 	mov	local01, local09
07f74     12 21 02 F6 | 	mov	local02, local04
07f78     17 22 06 F6 | 	mov	local03, #23
07f7c     0F 2D 02 F6 | 	mov	local08, local01
07f80     10 33 02 F6 | 	mov	local11, local02
07f84     11 2B 02 F6 | 	mov	local07, local03
07f88     4A 00 00 FF 
07f8c     7C E4 05 F1 | 	add	objptr, ##38012
07f90     F2 1E 02 FB | 	rdlong	local01, objptr
07f94     0F 2F 02 F6 | 	mov	local09, local01
07f98     01 2E 66 F0 | 	shl	local09, #1
07f9c     0F 2F 02 F1 | 	add	local09, local01
07fa0     02 2E 66 F0 | 	shl	local09, #2
07fa4     03 00 00 FF 
07fa8     00 E4 85 F1 | 	sub	objptr, ##1536
07fac     F2 2E 02 F1 | 	add	local09, objptr
07fb0     17 2D 62 FC | 	wrlong	local08, local09
07fb4     03 00 00 FF 
07fb8     00 E4 05 F1 | 	add	objptr, ##1536
07fbc     F2 1E 02 FB | 	rdlong	local01, objptr
07fc0     0F 2F 02 F6 | 	mov	local09, local01
07fc4     01 2E 66 F0 | 	shl	local09, #1
07fc8     0F 2F 02 F1 | 	add	local09, local01
07fcc     02 2E 66 F0 | 	shl	local09, #2
07fd0     03 00 00 FF 
07fd4     00 E4 85 F1 | 	sub	objptr, ##1536
07fd8     F2 2E 02 F1 | 	add	local09, objptr
07fdc     04 2E 06 F1 | 	add	local09, #4
07fe0     17 33 62 FC | 	wrlong	local11, local09
07fe4     03 00 00 FF 
07fe8     00 E4 05 F1 | 	add	objptr, ##1536
07fec     F2 32 02 FB | 	rdlong	local11, objptr
07ff0     19 1F 02 F6 | 	mov	local01, local11
07ff4     01 1E 66 F0 | 	shl	local01, #1
07ff8     19 1F 02 F1 | 	add	local01, local11
07ffc     02 1E 66 F0 | 	shl	local01, #2
08000     03 00 00 FF 
08004     00 E4 85 F1 | 	sub	objptr, ##1536
08008     F2 1E 02 F1 | 	add	local01, objptr
0800c     08 1E 06 F1 | 	add	local01, #8
08010     0F 2B 62 FC | 	wrlong	local07, local01
08014     03 00 00 FF 
08018     00 E4 05 F1 | 	add	objptr, ##1536
0801c     F2 2C 02 FB | 	rdlong	local08, objptr
08020     01 2C 06 F1 | 	add	local08, #1
08024     F2 2C 62 FC | 	wrlong	local08, objptr
08028                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08028                 | '   if numpar>3 then err=45
08028     04 24 16 F2 | 	cmp	local04, #4 wc
0802c     2D 26 06 36 |  if_ae	mov	local05, #45
08030                 | '   if i>varnum then err=20
08030     15 00 00 FF 
08034     74 E4 85 F1 | 	sub	objptr, ##10868
08038     F2 2C 02 FB | 	rdlong	local08, objptr
0803c     35 00 00 FF 
08040     08 E4 85 F1 | 	sub	objptr, ##27144
08044     16 31 5A F2 | 	cmps	local10, local08 wcz
08048     14 26 06 16 |  if_a	mov	local05, #20
0804c     04 00 90 FD | 	jmp	#LR__0765
08050                 | LR__0764
08050     0E 26 06 F6 | 	mov	local05, #14
08054                 | LR__0765
08054                 | ' return err
08054     13 FB 01 F6 | 	mov	result1, local05
08058     A7 F0 03 F6 | 	mov	ptra, fp
0805c     B2 00 A0 FD | 	call	#popregs_
08060                 | _compile_array_assign_ret
08060     2D 00 64 FD | 	ret
08064                 | 
08064                 | ' 
08064                 | ' '----- compile print command with its ";" and "," modifiers
08064                 | ' 
08064                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08064                 | _compile_print
08064     0B 4A 05 F6 | 	mov	COUNT_, #11
08068     A8 00 A0 FD | 	call	#pushregs_
0806c     00 1E 06 F6 | 	mov	local01, #0
08070     1D 22 06 F6 | 	mov	local03, #29
08074                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08074                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08074     37 00 00 FF 
08078     44 E4 05 F1 | 	add	objptr, ##28228
0807c     F2 24 02 FB | 	rdlong	local04, objptr
08080     03 24 66 F0 | 	shl	local04, #3
08084     02 00 00 FF 
08088     38 E4 85 F1 | 	sub	objptr, ##1080
0808c     F2 24 02 F1 | 	add	local04, objptr
08090     04 24 06 F1 | 	add	local04, #4
08094     12 25 02 FB | 	rdlong	local04, local04
08098     FE 25 0E F2 | 	cmp	local04, #510 wz
0809c     35 00 00 FF 
080a0     0C E4 85 F1 | 	sub	objptr, ##27148
080a4     68 01 90 5D |  if_ne	jmp	#LR__0770
080a8     20 22 06 F6 | 	mov	local03, #32
080ac     0F 27 02 F6 | 	mov	local05, local01
080b0     10 29 02 F6 | 	mov	local06, local02
080b4     11 2B 02 F6 | 	mov	local07, local03
080b8     4A 00 00 FF 
080bc     7C E4 05 F1 | 	add	objptr, ##38012
080c0     F2 2C 02 FB | 	rdlong	local08, objptr
080c4     16 2F 02 F6 | 	mov	local09, local08
080c8     01 2E 66 F0 | 	shl	local09, #1
080cc     16 2F 02 F1 | 	add	local09, local08
080d0     02 2E 66 F0 | 	shl	local09, #2
080d4     03 00 00 FF 
080d8     00 E4 85 F1 | 	sub	objptr, ##1536
080dc     F2 2E 02 F1 | 	add	local09, objptr
080e0     17 27 62 FC | 	wrlong	local05, local09
080e4     03 00 00 FF 
080e8     00 E4 05 F1 | 	add	objptr, ##1536
080ec     F2 26 02 FB | 	rdlong	local05, objptr
080f0     13 31 02 F6 | 	mov	local10, local05
080f4     01 30 66 F0 | 	shl	local10, #1
080f8     13 31 02 F1 | 	add	local10, local05
080fc     02 30 66 F0 | 	shl	local10, #2
08100     03 00 00 FF 
08104     00 E4 85 F1 | 	sub	objptr, ##1536
08108     F2 30 02 F1 | 	add	local10, objptr
0810c     04 30 06 F1 | 	add	local10, #4
08110     18 29 62 FC | 	wrlong	local06, local10
08114     03 00 00 FF 
08118     00 E4 05 F1 | 	add	objptr, ##1536
0811c     F2 26 02 FB | 	rdlong	local05, objptr
08120     13 33 02 F6 | 	mov	local11, local05
08124     01 32 66 F0 | 	shl	local11, #1
08128     13 33 02 F1 | 	add	local11, local05
0812c     02 32 66 F0 | 	shl	local11, #2
08130     03 00 00 FF 
08134     00 E4 85 F1 | 	sub	objptr, ##1536
08138     F2 32 02 F1 | 	add	local11, objptr
0813c     08 32 06 F1 | 	add	local11, #8
08140     19 2B 62 FC | 	wrlong	local07, local11
08144     03 00 00 FF 
08148     00 E4 05 F1 | 	add	objptr, ##1536
0814c     F2 26 02 FB | 	rdlong	local05, objptr
08150     01 26 06 F1 | 	add	local05, #1
08154     F2 26 62 FC | 	wrlong	local05, objptr
08158     44 22 06 F6 | 	mov	local03, #68
0815c     0F 27 02 F6 | 	mov	local05, local01
08160     10 29 02 F6 | 	mov	local06, local02
08164     11 2B 02 F6 | 	mov	local07, local03
08168     F2 2C 02 FB | 	rdlong	local08, objptr
0816c     16 2F 02 F6 | 	mov	local09, local08
08170     01 2E 66 F0 | 	shl	local09, #1
08174     16 2F 02 F1 | 	add	local09, local08
08178     02 2E 66 F0 | 	shl	local09, #2
0817c     03 00 00 FF 
08180     00 E4 85 F1 | 	sub	objptr, ##1536
08184     F2 2E 02 F1 | 	add	local09, objptr
08188     17 27 62 FC | 	wrlong	local05, local09
0818c     03 00 00 FF 
08190     00 E4 05 F1 | 	add	objptr, ##1536
08194     F2 32 02 FB | 	rdlong	local11, objptr
08198     19 31 02 F6 | 	mov	local10, local11
0819c     01 30 66 F0 | 	shl	local10, #1
081a0     19 31 02 F1 | 	add	local10, local11
081a4     02 30 66 F0 | 	shl	local10, #2
081a8     03 00 00 FF 
081ac     00 E4 85 F1 | 	sub	objptr, ##1536
081b0     F2 30 02 F1 | 	add	local10, objptr
081b4     04 30 06 F1 | 	add	local10, #4
081b8     18 29 62 FC | 	wrlong	local06, local10
081bc     03 00 00 FF 
081c0     00 E4 05 F1 | 	add	objptr, ##1536
081c4     F2 30 02 FB | 	rdlong	local10, objptr
081c8     18 33 02 F6 | 	mov	local11, local10
081cc     01 32 66 F0 | 	shl	local11, #1
081d0     18 33 02 F1 | 	add	local11, local10
081d4     02 32 66 F0 | 	shl	local11, #2
081d8     03 00 00 FF 
081dc     00 E4 85 F1 | 	sub	objptr, ##1536
081e0     F2 32 02 F1 | 	add	local11, objptr
081e4     08 32 06 F1 | 	add	local11, #8
081e8     19 2B 62 FC | 	wrlong	local07, local11
081ec     03 00 00 FF 
081f0     00 E4 05 F1 | 	add	objptr, ##1536
081f4     F2 26 02 FB | 	rdlong	local05, objptr
081f8     01 26 06 F1 | 	add	local05, #1
081fc     F2 26 62 FC | 	wrlong	local05, objptr
08200     4A 00 00 FF 
08204     7C E4 85 F1 | 	sub	objptr, ##38012
08208     00 FA 05 F6 | 	mov	result1, #0
0820c     20 05 90 FD | 	jmp	#LR__0777
08210                 | LR__0770
08210                 | ' do
08210                 | LR__0771
08210     F4 17 B0 FD | 	call	#_expr
08214                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
08214                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08214     37 00 00 FF 
08218     44 E4 05 F1 | 	add	objptr, ##28228
0821c     F2 24 02 FB | 	rdlong	local04, objptr
08220     03 24 66 F0 | 	shl	local04, #3
08224     02 00 00 FF 
08228     38 E4 85 F1 | 	sub	objptr, ##1080
0822c     F2 24 02 F1 | 	add	local04, objptr
08230     04 24 06 F1 | 	add	local04, #4
08234     12 2D 02 FB | 	rdlong	local08, local04
08238     11 2C 0E F2 | 	cmp	local08, #17 wz
0823c     35 00 00 FF 
08240     0C E4 85 F1 | 	sub	objptr, ##27148
08244     60 01 90 5D |  if_ne	jmp	#LR__0772
08248     21 22 06 F6 | 	mov	local03, #33
0824c     0F 27 02 F6 | 	mov	local05, local01
08250     10 29 02 F6 | 	mov	local06, local02
08254     11 2B 02 F6 | 	mov	local07, local03
08258     4A 00 00 FF 
0825c     7C E4 05 F1 | 	add	objptr, ##38012
08260     F2 2C 02 FB | 	rdlong	local08, objptr
08264     16 2F 02 F6 | 	mov	local09, local08
08268     01 2E 66 F0 | 	shl	local09, #1
0826c     16 2F 02 F1 | 	add	local09, local08
08270     02 2E 66 F0 | 	shl	local09, #2
08274     03 00 00 FF 
08278     00 E4 85 F1 | 	sub	objptr, ##1536
0827c     F2 2E 02 F1 | 	add	local09, objptr
08280     17 27 62 FC | 	wrlong	local05, local09
08284     03 00 00 FF 
08288     00 E4 05 F1 | 	add	objptr, ##1536
0828c     F2 32 02 FB | 	rdlong	local11, objptr
08290     19 31 02 F6 | 	mov	local10, local11
08294     01 30 66 F0 | 	shl	local10, #1
08298     19 31 02 F1 | 	add	local10, local11
0829c     02 30 66 F0 | 	shl	local10, #2
082a0     03 00 00 FF 
082a4     00 E4 85 F1 | 	sub	objptr, ##1536
082a8     F2 30 02 F1 | 	add	local10, objptr
082ac     04 30 06 F1 | 	add	local10, #4
082b0     18 29 62 FC | 	wrlong	local06, local10
082b4     03 00 00 FF 
082b8     00 E4 05 F1 | 	add	objptr, ##1536
082bc     F2 26 02 FB | 	rdlong	local05, objptr
082c0     13 33 02 F6 | 	mov	local11, local05
082c4     01 32 66 F0 | 	shl	local11, #1
082c8     13 33 02 F1 | 	add	local11, local05
082cc     02 32 66 F0 | 	shl	local11, #2
082d0     03 00 00 FF 
082d4     00 E4 85 F1 | 	sub	objptr, ##1536
082d8     F2 32 02 F1 | 	add	local11, objptr
082dc     08 32 06 F1 | 	add	local11, #8
082e0     19 2B 62 FC | 	wrlong	local07, local11
082e4     03 00 00 FF 
082e8     00 E4 05 F1 | 	add	objptr, ##1536
082ec     F2 26 02 FB | 	rdlong	local05, objptr
082f0     01 26 06 F1 | 	add	local05, #1
082f4     F2 26 62 FC | 	wrlong	local05, objptr
082f8     44 22 06 F6 | 	mov	local03, #68
082fc     0F 27 02 F6 | 	mov	local05, local01
08300     10 29 02 F6 | 	mov	local06, local02
08304     11 2B 02 F6 | 	mov	local07, local03
08308     F2 2C 02 FB | 	rdlong	local08, objptr
0830c     16 2F 02 F6 | 	mov	local09, local08
08310     01 2E 66 F0 | 	shl	local09, #1
08314     16 2F 02 F1 | 	add	local09, local08
08318     02 2E 66 F0 | 	shl	local09, #2
0831c     03 00 00 FF 
08320     00 E4 85 F1 | 	sub	objptr, ##1536
08324     F2 2E 02 F1 | 	add	local09, objptr
08328     17 27 62 FC | 	wrlong	local05, local09
0832c     03 00 00 FF 
08330     00 E4 05 F1 | 	add	objptr, ##1536
08334     F2 32 02 FB | 	rdlong	local11, objptr
08338     19 31 02 F6 | 	mov	local10, local11
0833c     01 30 66 F0 | 	shl	local10, #1
08340     19 31 02 F1 | 	add	local10, local11
08344     02 30 66 F0 | 	shl	local10, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 30 02 F1 | 	add	local10, objptr
08354     04 30 06 F1 | 	add	local10, #4
08358     18 29 62 FC | 	wrlong	local06, local10
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 30 02 FB | 	rdlong	local10, objptr
08368     18 33 02 F6 | 	mov	local11, local10
0836c     01 32 66 F0 | 	shl	local11, #1
08370     18 33 02 F1 | 	add	local11, local10
08374     02 32 66 F0 | 	shl	local11, #2
08378     03 00 00 FF 
0837c     00 E4 85 F1 | 	sub	objptr, ##1536
08380     F2 32 02 F1 | 	add	local11, objptr
08384     08 32 06 F1 | 	add	local11, #8
08388     19 2B 62 FC | 	wrlong	local07, local11
0838c     03 00 00 FF 
08390     00 E4 05 F1 | 	add	objptr, ##1536
08394     F2 26 02 FB | 	rdlong	local05, objptr
08398     01 26 06 F1 | 	add	local05, #1
0839c     F2 26 62 FC | 	wrlong	local05, objptr
083a0     4A 00 00 FF 
083a4     7C E4 85 F1 | 	sub	objptr, ##38012
083a8                 | LR__0772
083a8                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
083a8     37 00 00 FF 
083ac     44 E4 05 F1 | 	add	objptr, ##28228
083b0     F2 24 02 FB | 	rdlong	local04, objptr
083b4     03 24 66 F0 | 	shl	local04, #3
083b8     02 00 00 FF 
083bc     38 E4 85 F1 | 	sub	objptr, ##1080
083c0     F2 24 02 F1 | 	add	local04, objptr
083c4     04 24 06 F1 | 	add	local04, #4
083c8     12 2D 02 FB | 	rdlong	local08, local04
083cc     12 2C 0E F2 | 	cmp	local08, #18 wz
083d0     35 00 00 FF 
083d4     0C E4 85 F1 | 	sub	objptr, ##27148
083d8     60 01 90 5D |  if_ne	jmp	#LR__0773
083dc     22 22 06 F6 | 	mov	local03, #34
083e0     0F 27 02 F6 | 	mov	local05, local01
083e4     10 29 02 F6 | 	mov	local06, local02
083e8     11 2B 02 F6 | 	mov	local07, local03
083ec     4A 00 00 FF 
083f0     7C E4 05 F1 | 	add	objptr, ##38012
083f4     F2 2C 02 FB | 	rdlong	local08, objptr
083f8     16 2F 02 F6 | 	mov	local09, local08
083fc     01 2E 66 F0 | 	shl	local09, #1
08400     16 2F 02 F1 | 	add	local09, local08
08404     02 2E 66 F0 | 	shl	local09, #2
08408     03 00 00 FF 
0840c     00 E4 85 F1 | 	sub	objptr, ##1536
08410     F2 2E 02 F1 | 	add	local09, objptr
08414     17 27 62 FC | 	wrlong	local05, local09
08418     03 00 00 FF 
0841c     00 E4 05 F1 | 	add	objptr, ##1536
08420     F2 32 02 FB | 	rdlong	local11, objptr
08424     19 31 02 F6 | 	mov	local10, local11
08428     01 30 66 F0 | 	shl	local10, #1
0842c     19 31 02 F1 | 	add	local10, local11
08430     02 30 66 F0 | 	shl	local10, #2
08434     03 00 00 FF 
08438     00 E4 85 F1 | 	sub	objptr, ##1536
0843c     F2 30 02 F1 | 	add	local10, objptr
08440     04 30 06 F1 | 	add	local10, #4
08444     18 29 62 FC | 	wrlong	local06, local10
08448     03 00 00 FF 
0844c     00 E4 05 F1 | 	add	objptr, ##1536
08450     F2 26 02 FB | 	rdlong	local05, objptr
08454     13 33 02 F6 | 	mov	local11, local05
08458     01 32 66 F0 | 	shl	local11, #1
0845c     13 33 02 F1 | 	add	local11, local05
08460     02 32 66 F0 | 	shl	local11, #2
08464     03 00 00 FF 
08468     00 E4 85 F1 | 	sub	objptr, ##1536
0846c     F2 32 02 F1 | 	add	local11, objptr
08470     08 32 06 F1 | 	add	local11, #8
08474     19 2B 62 FC | 	wrlong	local07, local11
08478     03 00 00 FF 
0847c     00 E4 05 F1 | 	add	objptr, ##1536
08480     F2 26 02 FB | 	rdlong	local05, objptr
08484     01 26 06 F1 | 	add	local05, #1
08488     F2 26 62 FC | 	wrlong	local05, objptr
0848c     44 22 06 F6 | 	mov	local03, #68
08490     0F 27 02 F6 | 	mov	local05, local01
08494     10 29 02 F6 | 	mov	local06, local02
08498     11 2B 02 F6 | 	mov	local07, local03
0849c     F2 2C 02 FB | 	rdlong	local08, objptr
084a0     16 2F 02 F6 | 	mov	local09, local08
084a4     01 2E 66 F0 | 	shl	local09, #1
084a8     16 2F 02 F1 | 	add	local09, local08
084ac     02 2E 66 F0 | 	shl	local09, #2
084b0     03 00 00 FF 
084b4     00 E4 85 F1 | 	sub	objptr, ##1536
084b8     F2 2E 02 F1 | 	add	local09, objptr
084bc     17 27 62 FC | 	wrlong	local05, local09
084c0     03 00 00 FF 
084c4     00 E4 05 F1 | 	add	objptr, ##1536
084c8     F2 32 02 FB | 	rdlong	local11, objptr
084cc     19 31 02 F6 | 	mov	local10, local11
084d0     01 30 66 F0 | 	shl	local10, #1
084d4     19 31 02 F1 | 	add	local10, local11
084d8     02 30 66 F0 | 	shl	local10, #2
084dc     03 00 00 FF 
084e0     00 E4 85 F1 | 	sub	objptr, ##1536
084e4     F2 30 02 F1 | 	add	local10, objptr
084e8     04 30 06 F1 | 	add	local10, #4
084ec     18 29 62 FC | 	wrlong	local06, local10
084f0     03 00 00 FF 
084f4     00 E4 05 F1 | 	add	objptr, ##1536
084f8     F2 30 02 FB | 	rdlong	local10, objptr
084fc     18 33 02 F6 | 	mov	local11, local10
08500     01 32 66 F0 | 	shl	local11, #1
08504     18 33 02 F1 | 	add	local11, local10
08508     02 32 66 F0 | 	shl	local11, #2
0850c     03 00 00 FF 
08510     00 E4 85 F1 | 	sub	objptr, ##1536
08514     F2 32 02 F1 | 	add	local11, objptr
08518     08 32 06 F1 | 	add	local11, #8
0851c     19 2B 62 FC | 	wrlong	local07, local11
08520     03 00 00 FF 
08524     00 E4 05 F1 | 	add	objptr, ##1536
08528     F2 26 02 FB | 	rdlong	local05, objptr
0852c     01 26 06 F1 | 	add	local05, #1
08530     F2 26 62 FC | 	wrlong	local05, objptr
08534     4A 00 00 FF 
08538     7C E4 85 F1 | 	sub	objptr, ##38012
0853c                 | LR__0773
0853c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0853c     37 00 00 FF 
08540     44 E4 05 F1 | 	add	objptr, ##28228
08544     F2 24 02 FB | 	rdlong	local04, objptr
08548     03 24 66 F0 | 	shl	local04, #3
0854c     02 00 00 FF 
08550     38 E4 85 F1 | 	sub	objptr, ##1080
08554     F2 24 02 F1 | 	add	local04, objptr
08558     04 24 06 F1 | 	add	local04, #4
0855c     12 2D 02 FB | 	rdlong	local08, local04
08560     FE 2D 0E F2 | 	cmp	local08, #510 wz
08564     35 00 00 FF 
08568     0C E4 85 F1 | 	sub	objptr, ##27148
0856c     B8 00 90 5D |  if_ne	jmp	#LR__0774
08570     44 22 06 F6 | 	mov	local03, #68
08574     0F 27 02 F6 | 	mov	local05, local01
08578     10 29 02 F6 | 	mov	local06, local02
0857c     11 2B 02 F6 | 	mov	local07, local03
08580     4A 00 00 FF 
08584     7C E4 05 F1 | 	add	objptr, ##38012
08588     F2 2C 02 FB | 	rdlong	local08, objptr
0858c     16 2F 02 F6 | 	mov	local09, local08
08590     01 2E 66 F0 | 	shl	local09, #1
08594     16 2F 02 F1 | 	add	local09, local08
08598     02 2E 66 F0 | 	shl	local09, #2
0859c     03 00 00 FF 
085a0     00 E4 85 F1 | 	sub	objptr, ##1536
085a4     F2 2E 02 F1 | 	add	local09, objptr
085a8     17 27 62 FC | 	wrlong	local05, local09
085ac     03 00 00 FF 
085b0     00 E4 05 F1 | 	add	objptr, ##1536
085b4     F2 32 02 FB | 	rdlong	local11, objptr
085b8     19 31 02 F6 | 	mov	local10, local11
085bc     01 30 66 F0 | 	shl	local10, #1
085c0     19 31 02 F1 | 	add	local10, local11
085c4     02 30 66 F0 | 	shl	local10, #2
085c8     03 00 00 FF 
085cc     00 E4 85 F1 | 	sub	objptr, ##1536
085d0     F2 30 02 F1 | 	add	local10, objptr
085d4     04 30 06 F1 | 	add	local10, #4
085d8     18 29 62 FC | 	wrlong	local06, local10
085dc     03 00 00 FF 
085e0     00 E4 05 F1 | 	add	objptr, ##1536
085e4     F2 30 02 FB | 	rdlong	local10, objptr
085e8     18 33 02 F6 | 	mov	local11, local10
085ec     01 32 66 F0 | 	shl	local11, #1
085f0     18 33 02 F1 | 	add	local11, local10
085f4     02 32 66 F0 | 	shl	local11, #2
085f8     03 00 00 FF 
085fc     00 E4 85 F1 | 	sub	objptr, ##1536
08600     F2 32 02 F1 | 	add	local11, objptr
08604     08 32 06 F1 | 	add	local11, #8
08608     19 2B 62 FC | 	wrlong	local07, local11
0860c     03 00 00 FF 
08610     00 E4 05 F1 | 	add	objptr, ##1536
08614     F2 26 02 FB | 	rdlong	local05, objptr
08618     01 26 06 F1 | 	add	local05, #1
0861c     F2 26 62 FC | 	wrlong	local05, objptr
08620     4A 00 00 FF 
08624     7C E4 85 F1 | 	sub	objptr, ##38012
08628                 | LR__0774
08628                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08628     37 00 00 FF 
0862c     44 E4 05 F1 | 	add	objptr, ##28228
08630     F2 24 02 FB | 	rdlong	local04, objptr
08634     03 24 66 F0 | 	shl	local04, #3
08638     02 00 00 FF 
0863c     38 E4 85 F1 | 	sub	objptr, ##1080
08640     F2 24 02 F1 | 	add	local04, objptr
08644     04 24 06 F1 | 	add	local04, #4
08648     12 2D 02 FB | 	rdlong	local08, local04
0864c     11 2C 0E F2 | 	cmp	local08, #17 wz
08650     35 00 00 FF 
08654     0C E4 85 F1 | 	sub	objptr, ##27148
08658     6C 00 90 AD |  if_e	jmp	#LR__0775
0865c     37 00 00 FF 
08660     44 E4 05 F1 | 	add	objptr, ##28228
08664     F2 2C 02 FB | 	rdlong	local08, objptr
08668     03 2C 66 F0 | 	shl	local08, #3
0866c     02 00 00 FF 
08670     38 E4 85 F1 | 	sub	objptr, ##1080
08674     F2 2C 02 F1 | 	add	local08, objptr
08678     04 2C 06 F1 | 	add	local08, #4
0867c     16 2D 02 FB | 	rdlong	local08, local08
08680     12 2C 0E F2 | 	cmp	local08, #18 wz
08684     35 00 00 FF 
08688     0C E4 85 F1 | 	sub	objptr, ##27148
0868c     38 00 90 AD |  if_e	jmp	#LR__0775
08690     37 00 00 FF 
08694     44 E4 05 F1 | 	add	objptr, ##28228
08698     F2 32 02 FB | 	rdlong	local11, objptr
0869c     03 32 66 F0 | 	shl	local11, #3
086a0     02 00 00 FF 
086a4     38 E4 85 F1 | 	sub	objptr, ##1080
086a8     F2 32 02 F1 | 	add	local11, objptr
086ac     04 32 06 F1 | 	add	local11, #4
086b0     19 33 02 FB | 	rdlong	local11, local11
086b4     FE 33 0E F2 | 	cmp	local11, #510 wz
086b8     35 00 00 FF 
086bc     0C E4 85 F1 | 	sub	objptr, ##27148
086c0     16 FA 05 56 |  if_ne	mov	result1, #22
086c4     68 00 90 5D |  if_ne	jmp	#LR__0777
086c8                 | LR__0775
086c8     37 00 00 FF 
086cc     44 E4 05 F1 | 	add	objptr, ##28228
086d0     F2 24 02 FB | 	rdlong	local04, objptr
086d4     01 24 06 F1 | 	add	local04, #1
086d8     F2 24 62 FC | 	wrlong	local04, objptr
086dc     03 24 66 F0 | 	shl	local04, #3
086e0     02 00 00 FF 
086e4     38 E4 85 F1 | 	sub	objptr, ##1080
086e8     F2 24 02 F1 | 	add	local04, objptr
086ec     04 24 06 F1 | 	add	local04, #4
086f0     12 2D 02 FB | 	rdlong	local08, local04
086f4     FE 2D 0E F2 | 	cmp	local08, #510 wz
086f8     35 00 00 FF 
086fc     0C E4 85 F1 | 	sub	objptr, ##27148
08700     28 00 90 AD |  if_e	jmp	#LR__0776
08704     37 00 00 FF 
08708     44 E4 05 F1 | 	add	objptr, ##28228
0870c     F2 32 02 FB | 	rdlong	local11, objptr
08710     0E 00 00 FF 
08714     1C E4 05 F1 | 	add	objptr, ##7196
08718     F2 30 02 FB | 	rdlong	local10, objptr
0871c     45 00 00 FF 
08720     60 E4 85 F1 | 	sub	objptr, ##35424
08724     18 33 52 F2 | 	cmps	local11, local10 wc
08728     E4 FA 9F CD |  if_b	jmp	#LR__0771
0872c                 | LR__0776
0872c                 | ' return 0
0872c     00 FA 05 F6 | 	mov	result1, #0
08730                 | LR__0777
08730     A7 F0 03 F6 | 	mov	ptra, fp
08734     B2 00 A0 FD | 	call	#popregs_
08738                 | _compile_print_ret
08738     2D 00 64 FD | 	ret
0873c                 | 
0873c                 | ' 
0873c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
0873c                 | ' 
0873c                 | ' function compile_if(aline as ulong) as ulong  
0873c                 | _compile_if
0873c     09 4A 05 F6 | 	mov	COUNT_, #9
08740     A8 00 A0 FD | 	call	#pushregs_
08744                 | _compile_if_enter
08744     09 25 02 F6 | 	mov	local04, arg01
08748                 | ' return expr()
08748     BC 12 B0 FD | 	call	#_expr
0874c     37 00 00 FF 
08750     44 E4 05 F1 | 	add	objptr, ##28228
08754     F2 14 02 FB | 	rdlong	arg02, objptr
08758     0A 27 02 F6 | 	mov	local05, arg02
0875c     03 26 66 F0 | 	shl	local05, #3
08760     02 00 00 FF 
08764     38 E4 85 F1 | 	sub	objptr, ##1080
08768     F2 26 02 F1 | 	add	local05, objptr
0876c     04 26 06 F1 | 	add	local05, #4
08770     13 27 02 FB | 	rdlong	local05, local05
08774     01 14 06 F1 | 	add	arg02, #1
08778     02 00 00 FF 
0877c     38 E4 05 F1 | 	add	objptr, ##1080
08780     F2 14 62 FC | 	wrlong	arg02, objptr
08784     37 00 00 FF 
08788     44 E4 85 F1 | 	sub	objptr, ##28228
0878c                 | ' 
0878c                 | ' err=compile_fun_1p()
0878c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
0878c     5B 26 0E F2 | 	cmp	local05, #91 wz
08790     34 FA 05 56 |  if_ne	mov	result1, #52
08794     20 01 90 5D |  if_ne	jmp	#LR__0782
08798     58 22 06 F6 | 	mov	local03, #88
0879c     0F 29 02 F6 | 	mov	local06, local01
087a0     10 2B 02 F6 | 	mov	local07, local02
087a4     11 15 02 F6 | 	mov	arg02, local03
087a8     4A 00 00 FF 
087ac     7C E4 05 F1 | 	add	objptr, ##38012
087b0     F2 12 02 FB | 	rdlong	arg01, objptr
087b4     09 2D 02 F6 | 	mov	local08, arg01
087b8     01 2C 66 F0 | 	shl	local08, #1
087bc     09 2D 02 F1 | 	add	local08, arg01
087c0     02 2C 66 F0 | 	shl	local08, #2
087c4     03 00 00 FF 
087c8     00 E4 85 F1 | 	sub	objptr, ##1536
087cc     F2 2C 02 F1 | 	add	local08, objptr
087d0     16 29 62 FC | 	wrlong	local06, local08
087d4     03 00 00 FF 
087d8     00 E4 05 F1 | 	add	objptr, ##1536
087dc     F2 28 02 FB | 	rdlong	local06, objptr
087e0     14 13 02 F6 | 	mov	arg01, local06
087e4     01 12 66 F0 | 	shl	arg01, #1
087e8     14 13 02 F1 | 	add	arg01, local06
087ec     02 12 66 F0 | 	shl	arg01, #2
087f0     03 00 00 FF 
087f4     00 E4 85 F1 | 	sub	objptr, ##1536
087f8     F2 12 02 F1 | 	add	arg01, objptr
087fc     04 12 06 F1 | 	add	arg01, #4
08800     09 2B 62 FC | 	wrlong	local07, arg01
08804     03 00 00 FF 
08808     00 E4 05 F1 | 	add	objptr, ##1536
0880c     F2 28 02 FB | 	rdlong	local06, objptr
08810     14 13 02 F6 | 	mov	arg01, local06
08814     01 12 66 F0 | 	shl	arg01, #1
08818     14 13 02 F1 | 	add	arg01, local06
0881c     02 12 66 F0 | 	shl	arg01, #2
08820     03 00 00 FF 
08824     00 E4 85 F1 | 	sub	objptr, ##1536
08828     F2 12 02 F1 | 	add	arg01, objptr
0882c     08 12 06 F1 | 	add	arg01, #8
08830     09 15 62 FC | 	wrlong	arg02, arg01
08834     03 00 00 FF 
08838     00 E4 05 F1 | 	add	objptr, ##1536
0883c     F2 28 02 FB | 	rdlong	local06, objptr
08840     01 28 06 F1 | 	add	local06, #1
08844     F2 28 62 FC | 	wrlong	local06, objptr
08848                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08848                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08848     13 00 00 FF 
0884c     38 E4 85 F1 | 	sub	objptr, ##9784
08850     F2 14 02 FB | 	rdlong	arg02, objptr
08854     01 14 06 F1 | 	add	arg02, #1
08858     03 14 66 F0 | 	shl	arg02, #3
0885c     02 00 00 FF 
08860     38 E4 85 F1 | 	sub	objptr, ##1080
08864     F2 14 02 F1 | 	add	arg02, objptr
08868     0A 13 02 FB | 	rdlong	arg01, arg02
0886c     35 00 00 FF 
08870     0C E4 85 F1 | 	sub	objptr, ##27148
08874                 | ' 
08874                 | ' select case s
08874     82 01 00 FF 
08878     52 15 06 F6 | 	mov	arg02, ##@LR__5183
0887c     AC 82 B1 FD | 	call	#__system___string_cmp
08880     00 FA 0D F2 | 	cmp	result1, #0 wz
08884     1B FA 05 A6 |  if_e	mov	result1, #27
08888     00 FA 05 56 |  if_ne	mov	result1, #0
0888c     00 FA 0D F2 | 	cmp	result1, #0 wz
08890     10 00 90 AD |  if_e	jmp	#LR__0780
08894     05 12 06 F6 | 	mov	arg01, #5
08898     88 EC BF FD | 	call	#_compile_immediate_assign
0889c     FD 2E 02 F6 | 	mov	local09, result1
088a0     10 00 90 FD | 	jmp	#LR__0781
088a4                 | LR__0780
088a4     05 12 06 F6 | 	mov	arg01, #5
088a8     12 15 02 F6 | 	mov	arg02, local04
088ac     74 E3 BF FD | 	call	#_compile_immediate
088b0     FD 2E 02 F6 | 	mov	local09, result1
088b4                 | LR__0781
088b4                 | ' return err
088b4     17 FB 01 F6 | 	mov	result1, local09
088b8                 | LR__0782
088b8     A7 F0 03 F6 | 	mov	ptra, fp
088bc     B2 00 A0 FD | 	call	#popregs_
088c0                 | _compile_if_ret
088c0     2D 00 64 FD | 	ret
088c4                 | 
088c4                 | ' 
088c4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
088c4                 | ' 
088c4                 | ' function compile_else(aline as ulong) as ulong  
088c4                 | _compile_else
088c4     07 4A 05 F6 | 	mov	COUNT_, #7
088c8     A8 00 A0 FD | 	call	#pushregs_
088cc                 | _compile_else_enter
088cc     09 25 02 F6 | 	mov	local04, arg01
088d0     5A 22 06 F6 | 	mov	local03, #90
088d4     0F 27 02 F6 | 	mov	local05, local01
088d8     10 29 02 F6 | 	mov	local06, local02
088dc     11 1F 02 F6 | 	mov	local01, local03
088e0     4A 00 00 FF 
088e4     7C E4 05 F1 | 	add	objptr, ##38012
088e8     F2 14 02 FB | 	rdlong	arg02, objptr
088ec     0A 13 02 F6 | 	mov	arg01, arg02
088f0     01 12 66 F0 | 	shl	arg01, #1
088f4     0A 13 02 F1 | 	add	arg01, arg02
088f8     02 12 66 F0 | 	shl	arg01, #2
088fc     03 00 00 FF 
08900     00 E4 85 F1 | 	sub	objptr, ##1536
08904     F2 12 02 F1 | 	add	arg01, objptr
08908     09 27 62 FC | 	wrlong	local05, arg01
0890c     03 00 00 FF 
08910     00 E4 05 F1 | 	add	objptr, ##1536
08914     F2 26 02 FB | 	rdlong	local05, objptr
08918     13 15 02 F6 | 	mov	arg02, local05
0891c     01 14 66 F0 | 	shl	arg02, #1
08920     13 15 02 F1 | 	add	arg02, local05
08924     02 14 66 F0 | 	shl	arg02, #2
08928     03 00 00 FF 
0892c     00 E4 85 F1 | 	sub	objptr, ##1536
08930     F2 14 02 F1 | 	add	arg02, objptr
08934     04 14 06 F1 | 	add	arg02, #4
08938     0A 29 62 FC | 	wrlong	local06, arg02
0893c     03 00 00 FF 
08940     00 E4 05 F1 | 	add	objptr, ##1536
08944     F2 28 02 FB | 	rdlong	local06, objptr
08948     14 27 02 F6 | 	mov	local05, local06
0894c     01 26 66 F0 | 	shl	local05, #1
08950     14 27 02 F1 | 	add	local05, local06
08954     02 26 66 F0 | 	shl	local05, #2
08958     03 00 00 FF 
0895c     00 E4 85 F1 | 	sub	objptr, ##1536
08960     F2 26 02 F1 | 	add	local05, objptr
08964     08 26 06 F1 | 	add	local05, #8
08968     13 1F 62 FC | 	wrlong	local01, local05
0896c     03 00 00 FF 
08970     00 E4 05 F1 | 	add	objptr, ##1536
08974     F2 26 02 FB | 	rdlong	local05, objptr
08978     01 26 06 F1 | 	add	local05, #1
0897c     F2 26 62 FC | 	wrlong	local05, objptr
08980                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08980                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08980     13 00 00 FF 
08984     38 E4 85 F1 | 	sub	objptr, ##9784
08988     F2 28 02 FB | 	rdlong	local06, objptr
0898c     01 28 06 F1 | 	add	local06, #1
08990     03 28 66 F0 | 	shl	local06, #3
08994     02 00 00 FF 
08998     38 E4 85 F1 | 	sub	objptr, ##1080
0899c     F2 28 02 F1 | 	add	local06, objptr
089a0     14 13 02 FB | 	rdlong	arg01, local06
089a4     35 00 00 FF 
089a8     0C E4 85 F1 | 	sub	objptr, ##27148
089ac                 | ' 
089ac                 | ' select case s
089ac     82 01 00 FF 
089b0     52 15 06 F6 | 	mov	arg02, ##@LR__5183
089b4     74 81 B1 FD | 	call	#__system___string_cmp
089b8     00 FA 0D F2 | 	cmp	result1, #0 wz
089bc     1B FA 05 A6 |  if_e	mov	result1, #27
089c0     00 FA 05 56 |  if_ne	mov	result1, #0
089c4     00 FA 0D F2 | 	cmp	result1, #0 wz
089c8     10 00 90 AD |  if_e	jmp	#LR__0790
089cc     05 12 06 F6 | 	mov	arg01, #5
089d0     50 EB BF FD | 	call	#_compile_immediate_assign
089d4     FD 2A 02 F6 | 	mov	local07, result1
089d8     10 00 90 FD | 	jmp	#LR__0791
089dc                 | LR__0790
089dc     05 12 06 F6 | 	mov	arg01, #5
089e0     12 15 02 F6 | 	mov	arg02, local04
089e4     3C E2 BF FD | 	call	#_compile_immediate
089e8     FD 2A 02 F6 | 	mov	local07, result1
089ec                 | LR__0791
089ec                 | ' return err
089ec     15 FB 01 F6 | 	mov	result1, local07
089f0     A7 F0 03 F6 | 	mov	ptra, fp
089f4     B2 00 A0 FD | 	call	#popregs_
089f8                 | _compile_else_ret
089f8     2D 00 64 FD | 	ret
089fc                 | 
089fc                 | ' 
089fc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
089fc                 | ' 
089fc                 | ' function compile_dim() as ulong  
089fc                 | _compile_dim
089fc     11 4A 05 F6 | 	mov	COUNT_, #17
08a00     A8 00 A0 FD | 	call	#pushregs_
08a04     01 1E 06 F6 | 	mov	local01, #1
08a08     01 20 06 F6 | 	mov	local02, #1
08a0c     01 22 06 F6 | 	mov	local03, #1
08a10                 | ' 
08a10                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08a10                 | ' if isname(lparts(ct).part$) then 
08a10     37 00 00 FF 
08a14     44 E4 05 F1 | 	add	objptr, ##28228
08a18     F2 18 02 FB | 	rdlong	arg04, objptr
08a1c     03 18 66 F0 | 	shl	arg04, #3
08a20     02 00 00 FF 
08a24     38 E4 85 F1 | 	sub	objptr, ##1080
08a28     F2 18 02 F1 | 	add	arg04, objptr
08a2c     0C 13 02 FB | 	rdlong	arg01, arg04
08a30     35 00 00 FF 
08a34     0C E4 85 F1 | 	sub	objptr, ##27148
08a38     C8 D0 BF FD | 	call	#_isname
08a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
08a40     80 05 90 AD |  if_e	jmp	#LR__0823
08a44     37 00 00 FF 
08a48     44 E4 05 F1 | 	add	objptr, ##28228
08a4c     F2 24 02 FB | 	rdlong	local04, objptr
08a50     03 24 66 F0 | 	shl	local04, #3
08a54     02 00 00 FF 
08a58     38 E4 85 F1 | 	sub	objptr, ##1080
08a5c     F2 24 02 F1 | 	add	local04, objptr
08a60     12 27 02 FB | 	rdlong	local05, local04
08a64     01 28 66 F6 | 	neg	local06, #1
08a68                 | '   varname2$=lparts(ct).part$ 
08a68                 | '   j=-1
08a68                 | '   if varnum>0 then
08a68     04 E4 85 F1 | 	sub	objptr, #4
08a6c     F2 2A 02 FB | 	rdlong	local07, objptr
08a70     35 00 00 FF 
08a74     08 E4 85 F1 | 	sub	objptr, ##27144
08a78     01 2A 56 F2 | 	cmps	local07, #1 wc
08a7c     58 00 90 CD |  if_b	jmp	#LR__0802
08a80                 | '     for i=0 to varnum-1
08a80     00 2C 06 F6 | 	mov	local08, #0
08a84     35 00 00 FF 
08a88     08 E4 05 F1 | 	add	objptr, ##27144
08a8c     F2 2E 02 FB | 	rdlong	local09, objptr
08a90     35 00 00 FF 
08a94     08 E4 85 F1 | 	sub	objptr, ##27144
08a98                 | LR__0800
08a98     17 2D 52 F2 | 	cmps	local08, local09 wc
08a9c     38 00 90 3D |  if_ae	jmp	#LR__0801
08aa0                 | '       if variables(i).name=varname2$ then j=i : exit
08aa0     16 25 02 F6 | 	mov	local04, local08
08aa4     04 24 66 F0 | 	shl	local04, #4
08aa8     14 00 00 FF 
08aac     F8 E5 05 F1 | 	add	objptr, ##10744
08ab0     F2 24 02 F1 | 	add	local04, objptr
08ab4     12 13 02 FB | 	rdlong	arg01, local04
08ab8     13 15 02 F6 | 	mov	arg02, local05
08abc     14 00 00 FF 
08ac0     F8 E5 85 F1 | 	sub	objptr, ##10744
08ac4     64 80 B1 FD | 	call	#__system___string_cmp
08ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
08acc     16 29 02 A6 |  if_e	mov	local06, local08
08ad0     01 2C 06 51 |  if_ne	add	local08, #1
08ad4     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08ad8                 | LR__0801
08ad8                 | LR__0802
08ad8                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08ad8     FF FF 7F FF 
08adc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08ae0     35 00 00 AF 
08ae4     08 E4 05 A1 |  if_e	add	objptr, ##27144
08ae8     F2 28 02 AB |  if_e	rdlong	local06, objptr
08aec     35 00 00 AF 
08af0     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08af4     78 00 90 AD |  if_e	jmp	#LR__0803
08af8     00 12 06 F6 | 	mov	arg01, #0
08afc     68 DA B1 FD | 	call	#__system___getiolock_0540
08b00     FD 12 02 F6 | 	mov	arg01, result1
08b04     FC 7F B1 FD | 	call	#__system___lockmem
08b08     84 01 00 FF 
08b0c     61 15 06 F6 | 	mov	arg02, ##@LR__5415
08b10     00 12 06 F6 | 	mov	arg01, #0
08b14     00 16 06 F6 | 	mov	arg03, #0
08b18     DC 8C B1 FD | 	call	#__system___basic_print_string
08b1c     51 00 00 FF 
08b20     C0 E5 05 F1 | 	add	objptr, ##41920
08b24     F2 14 02 FB | 	rdlong	arg02, objptr
08b28     51 00 00 FF 
08b2c     C0 E5 85 F1 | 	sub	objptr, ##41920
08b30     00 12 06 F6 | 	mov	arg01, #0
08b34     00 16 06 F6 | 	mov	arg03, #0
08b38     0A 18 06 F6 | 	mov	arg04, #10
08b3c     3C 8D B1 FD | 	call	#__system___basic_print_unsigned
08b40     84 01 00 FF 
08b44     6F 15 06 F6 | 	mov	arg02, ##@LR__5416
08b48     00 12 06 F6 | 	mov	arg01, #0
08b4c     00 16 06 F6 | 	mov	arg03, #0
08b50     A4 8C B1 FD | 	call	#__system___basic_print_string
08b54     00 12 06 F6 | 	mov	arg01, #0
08b58     0A 14 06 F6 | 	mov	arg02, #10
08b5c     00 16 06 F6 | 	mov	arg03, #0
08b60     3C 8C B1 FD | 	call	#__system___basic_print_char
08b64     00 12 06 F6 | 	mov	arg01, #0
08b68     FC D9 B1 FD | 	call	#__system___getiolock_0540
08b6c     FD 00 68 FC | 	wrlong	#0, result1
08b70                 | LR__0803
08b70                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
08b70     37 00 00 FF 
08b74     44 E4 05 F1 | 	add	objptr, ##28228
08b78     F2 14 02 FB | 	rdlong	arg02, objptr
08b7c     01 14 06 F1 | 	add	arg02, #1
08b80     03 14 66 F0 | 	shl	arg02, #3
08b84     02 00 00 FF 
08b88     38 E4 85 F1 | 	sub	objptr, ##1080
08b8c     F2 14 02 F1 | 	add	arg02, objptr
08b90     0A 13 02 FB | 	rdlong	arg01, arg02
08b94     84 01 00 FF 
08b98     90 15 06 F6 | 	mov	arg02, ##@LR__5417
08b9c     35 00 00 FF 
08ba0     0C E4 85 F1 | 	sub	objptr, ##27148
08ba4     84 7F B1 FD | 	call	#__system___string_cmp
08ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
08bac     44 00 90 AD |  if_e	jmp	#LR__0804
08bb0     37 00 00 FF 
08bb4     44 E4 05 F1 | 	add	objptr, ##28228
08bb8     F2 2E 02 FB | 	rdlong	local09, objptr
08bbc     01 2E 06 F1 | 	add	local09, #1
08bc0     03 2E 66 F0 | 	shl	local09, #3
08bc4     02 00 00 FF 
08bc8     38 E4 85 F1 | 	sub	objptr, ##1080
08bcc     F2 2E 02 F1 | 	add	local09, objptr
08bd0     17 13 02 FB | 	rdlong	arg01, local09
08bd4     84 01 00 FF 
08bd8     92 15 06 F6 | 	mov	arg02, ##@LR__5418
08bdc     35 00 00 FF 
08be0     0C E4 85 F1 | 	sub	objptr, ##27148
08be4     44 7F B1 FD | 	call	#__system___string_cmp
08be8     00 FA 0D F2 | 	cmp	result1, #0 wz
08bec     2B FA 05 56 |  if_ne	mov	result1, #43
08bf0     D8 04 90 5D |  if_ne	jmp	#LR__0825
08bf4                 | LR__0804
08bf4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
08bf4     37 00 00 FF 
08bf8     44 E4 05 F1 | 	add	objptr, ##28228
08bfc     F2 14 02 FB | 	rdlong	arg02, objptr
08c00     01 14 06 F1 | 	add	arg02, #1
08c04     03 14 66 F0 | 	shl	arg02, #3
08c08     02 00 00 FF 
08c0c     38 E4 85 F1 | 	sub	objptr, ##1080
08c10     F2 14 02 F1 | 	add	arg02, objptr
08c14     0A 13 02 FB | 	rdlong	arg01, arg02
08c18     84 01 00 FF 
08c1c     95 15 06 F6 | 	mov	arg02, ##@LR__5419
08c20     35 00 00 FF 
08c24     0C E4 85 F1 | 	sub	objptr, ##27148
08c28     00 7F B1 FD | 	call	#__system___string_cmp
08c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c30     37 00 00 AF 
08c34     44 E4 05 A1 |  if_e	add	objptr, ##28228
08c38     F2 30 02 AB |  if_e	rdlong	local10, objptr
08c3c     37 00 00 AF 
08c40     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08c44     01 30 06 A1 |  if_e	add	local10, #1
08c48     5C 01 90 AD |  if_e	jmp	#LR__0809
08c4c     37 00 00 FF 
08c50     44 E4 05 F1 | 	add	objptr, ##28228
08c54     F2 30 02 FB | 	rdlong	local10, objptr
08c58     37 00 00 FF 
08c5c     44 E4 85 F1 | 	sub	objptr, ##28228
08c60     02 30 06 F1 | 	add	local10, #2
08c64     00 32 06 F6 | 	mov	local11, #0
08c68                 | '   l=ct+2 : m=0 : do
08c68                 | LR__0805
08c68                 | '   if isdec(lparts(l).part$) then 
08c68     18 25 02 F6 | 	mov	local04, local10
08c6c     03 24 66 F0 | 	shl	local04, #3
08c70     35 00 00 FF 
08c74     0C E4 05 F1 | 	add	objptr, ##27148
08c78     F2 24 02 F1 | 	add	local04, objptr
08c7c     12 13 02 FB | 	rdlong	arg01, local04
08c80     35 00 00 FF 
08c84     0C E4 85 F1 | 	sub	objptr, ##27148
08c88     7C D7 BF FD | 	call	#_isdec
08c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c90     44 00 90 AD |  if_e	jmp	#LR__0806
08c94     19 35 02 F6 | 	mov	local12, local11
08c98     0F 35 06 F1 | 	add	local12, #local01
08c9c     18 2F 02 F6 | 	mov	local09, local10
08ca0     03 2E 66 F0 | 	shl	local09, #3
08ca4     35 00 00 FF 
08ca8     0C E4 05 F1 | 	add	objptr, ##27148
08cac     F2 2E 02 F1 | 	add	local09, objptr
08cb0     17 13 02 FB | 	rdlong	arg01, local09
08cb4     00 14 06 F6 | 	mov	arg02, #0
08cb8     35 00 00 FF 
08cbc     0C E4 85 F1 | 	sub	objptr, ##27148
08cc0     6C B0 B1 FD | 	call	#__system____builtin_atoi
08cc4     FD 36 02 F6 | 	mov	local13, result1
08cc8                 | 	'.live	local13
08cc8                 | 	'.live	local12
08cc8     00 34 8E F9 | 	altd	local12, #0
08ccc     1B 35 02 F6 | 	mov	local12, local13
08cd0     01 32 06 F1 | 	add	local11, #1
08cd4     08 00 90 FD | 	jmp	#LR__0807
08cd8                 | LR__0806
08cd8                 | '     return(17)
08cd8     11 FA 05 F6 | 	mov	result1, #17
08cdc     EC 03 90 FD | 	jmp	#LR__0825
08ce0                 | LR__0807
08ce0                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
08ce0     18 25 02 F6 | 	mov	local04, local10
08ce4     01 24 06 F1 | 	add	local04, #1
08ce8     03 24 66 F0 | 	shl	local04, #3
08cec     35 00 00 FF 
08cf0     0C E4 05 F1 | 	add	objptr, ##27148
08cf4     F2 24 02 F1 | 	add	local04, objptr
08cf8     12 13 02 FB | 	rdlong	arg01, local04
08cfc     84 01 00 FF 
08d00     98 15 06 F6 | 	mov	arg02, ##@LR__5420
08d04     35 00 00 FF 
08d08     0C E4 85 F1 | 	sub	objptr, ##27148
08d0c     1C 7E B1 FD | 	call	#__system___string_cmp
08d10     00 FA 0D F2 | 	cmp	result1, #0 wz
08d14     3C 00 90 AD |  if_e	jmp	#LR__0808
08d18     18 37 02 F6 | 	mov	local13, local10
08d1c     01 36 06 F1 | 	add	local13, #1
08d20     03 36 66 F0 | 	shl	local13, #3
08d24     35 00 00 FF 
08d28     0C E4 05 F1 | 	add	objptr, ##27148
08d2c     F2 36 02 F1 | 	add	local13, objptr
08d30     1B 13 02 FB | 	rdlong	arg01, local13
08d34     84 01 00 FF 
08d38     9A 15 06 F6 | 	mov	arg02, ##@LR__5421
08d3c     35 00 00 FF 
08d40     0C E4 85 F1 | 	sub	objptr, ##27148
08d44     E4 7D B1 FD | 	call	#__system___string_cmp
08d48     00 FA 0D F2 | 	cmp	result1, #0 wz
08d4c     2C FA 05 56 |  if_ne	mov	result1, #44
08d50     78 03 90 5D |  if_ne	jmp	#LR__0825
08d54                 | LR__0808
08d54     02 30 06 F1 | 	add	local10, #2
08d58     18 25 02 F6 | 	mov	local04, local10
08d5c     01 24 86 F1 | 	sub	local04, #1
08d60     03 24 66 F0 | 	shl	local04, #3
08d64     35 00 00 FF 
08d68     0C E4 05 F1 | 	add	objptr, ##27148
08d6c     F2 24 02 F1 | 	add	local04, objptr
08d70     12 13 02 FB | 	rdlong	arg01, local04
08d74     84 01 00 FF 
08d78     9C 15 06 F6 | 	mov	arg02, ##@LR__5422
08d7c     35 00 00 FF 
08d80     0C E4 85 F1 | 	sub	objptr, ##27148
08d84     A4 7D B1 FD | 	call	#__system___string_cmp
08d88     00 FA 0D F2 | 	cmp	result1, #0 wz
08d8c     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08d90     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08d94                 | '   if m>3 then return 45
08d94     04 32 56 F2 | 	cmps	local11, #4 wc
08d98     2D FA 05 36 |  if_ae	mov	result1, #45
08d9c     2C 03 90 3D |  if_ae	jmp	#LR__0825
08da0     00 39 06 F6 | 	mov	local14, #256
08da4     0C 3A 06 F6 | 	mov	local15, #12
08da8                 | LR__0809
08da8                 | '   arraytype=array_no_type : esize=12
08da8                 | ' 1350 
08da8                 | '   if lparts(l).part$="as" then
08da8     18 25 02 F6 | 	mov	local04, local10
08dac     03 24 66 F0 | 	shl	local04, #3
08db0     35 00 00 FF 
08db4     0C E4 05 F1 | 	add	objptr, ##27148
08db8     F2 24 02 F1 | 	add	local04, objptr
08dbc     12 13 02 FB | 	rdlong	arg01, local04
08dc0     84 01 00 FF 
08dc4     9E 15 06 F6 | 	mov	arg02, ##@LR__5423
08dc8     35 00 00 FF 
08dcc     0C E4 85 F1 | 	sub	objptr, ##27148
08dd0     58 7D B1 FD | 	call	#__system___string_cmp
08dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
08dd8     F0 01 90 5D |  if_ne	jmp	#LR__0824
08ddc                 | '     select case lparts(l+1).part$
08ddc     18 35 02 F6 | 	mov	local12, local10
08de0     01 34 06 F1 | 	add	local12, #1
08de4     03 34 66 F0 | 	shl	local12, #3
08de8     35 00 00 FF 
08dec     0C E4 05 F1 | 	add	objptr, ##27148
08df0     F2 34 02 F1 | 	add	local12, objptr
08df4     1A 3D 02 FB | 	rdlong	local16, local12
08df8     84 01 00 FF 
08dfc     A1 15 06 F6 | 	mov	arg02, ##@LR__5424
08e00     1E 13 02 F6 | 	mov	arg01, local16
08e04     35 00 00 FF 
08e08     0C E4 85 F1 | 	sub	objptr, ##27148
08e0c     1C 7D B1 FD | 	call	#__system___string_cmp
08e10     00 FA 0D F2 | 	cmp	result1, #0 wz
08e14     0C 01 90 AD |  if_e	jmp	#LR__0810
08e18     84 01 00 FF 
08e1c     A6 15 06 F6 | 	mov	arg02, ##@LR__5425
08e20     1E 13 02 F6 | 	mov	arg01, local16
08e24     04 7D B1 FD | 	call	#__system___string_cmp
08e28     00 FA 0D F2 | 	cmp	result1, #0 wz
08e2c     00 01 90 AD |  if_e	jmp	#LR__0811
08e30     84 01 00 FF 
08e34     AC 15 06 F6 | 	mov	arg02, ##@LR__5426
08e38     1E 13 02 F6 | 	mov	arg01, local16
08e3c     EC 7C B1 FD | 	call	#__system___string_cmp
08e40     00 FA 0D F2 | 	cmp	result1, #0 wz
08e44     F4 00 90 AD |  if_e	jmp	#LR__0812
08e48     84 01 00 FF 
08e4c     B2 15 06 F6 | 	mov	arg02, ##@LR__5427
08e50     1E 13 02 F6 | 	mov	arg01, local16
08e54     D4 7C B1 FD | 	call	#__system___string_cmp
08e58     00 FA 0D F2 | 	cmp	result1, #0 wz
08e5c     E8 00 90 AD |  if_e	jmp	#LR__0813
08e60     84 01 00 FF 
08e64     B9 15 06 F6 | 	mov	arg02, ##@LR__5428
08e68     1E 13 02 F6 | 	mov	arg01, local16
08e6c     BC 7C B1 FD | 	call	#__system___string_cmp
08e70     00 FA 0D F2 | 	cmp	result1, #0 wz
08e74     DC 00 90 AD |  if_e	jmp	#LR__0814
08e78     84 01 00 FF 
08e7c     BE 15 06 F6 | 	mov	arg02, ##@LR__5429
08e80     1E 13 02 F6 | 	mov	arg01, local16
08e84     A4 7C B1 FD | 	call	#__system___string_cmp
08e88     00 FA 0D F2 | 	cmp	result1, #0 wz
08e8c     D0 00 90 AD |  if_e	jmp	#LR__0815
08e90     84 01 00 FF 
08e94     C6 15 06 F6 | 	mov	arg02, ##@LR__5430
08e98     1E 13 02 F6 | 	mov	arg01, local16
08e9c     8C 7C B1 FD | 	call	#__system___string_cmp
08ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ea4     C4 00 90 AD |  if_e	jmp	#LR__0816
08ea8     84 01 00 FF 
08eac     CC 15 06 F6 | 	mov	arg02, ##@LR__5431
08eb0     1E 13 02 F6 | 	mov	arg01, local16
08eb4     74 7C B1 FD | 	call	#__system___string_cmp
08eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
08ebc     B8 00 90 AD |  if_e	jmp	#LR__0817
08ec0     84 01 00 FF 
08ec4     D2 15 06 F6 | 	mov	arg02, ##@LR__5432
08ec8     1E 13 02 F6 | 	mov	arg01, local16
08ecc     5C 7C B1 FD | 	call	#__system___string_cmp
08ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ed4     AC 00 90 AD |  if_e	jmp	#LR__0818
08ed8     84 01 00 FF 
08edc     D9 15 06 F6 | 	mov	arg02, ##@LR__5433
08ee0     1E 13 02 F6 | 	mov	arg01, local16
08ee4     44 7C B1 FD | 	call	#__system___string_cmp
08ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
08eec     A0 00 90 AD |  if_e	jmp	#LR__0819
08ef0     84 01 00 FF 
08ef4     E0 15 06 F6 | 	mov	arg02, ##@LR__5434
08ef8     1E 13 02 F6 | 	mov	arg01, local16
08efc     2C 7C B1 FD | 	call	#__system___string_cmp
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     94 00 90 AD |  if_e	jmp	#LR__0820
08f08     84 01 00 FF 
08f0c     E7 15 06 F6 | 	mov	arg02, ##@LR__5435
08f10     1E 13 02 F6 | 	mov	arg01, local16
08f14     14 7C B1 FD | 	call	#__system___string_cmp
08f18     00 FA 0D F2 | 	cmp	result1, #0 wz
08f1c     88 00 90 AD |  if_e	jmp	#LR__0821
08f20     90 00 90 FD | 	jmp	#LR__0822
08f24                 | LR__0810
08f24     01 39 06 F6 | 	mov	local14, #257
08f28     01 3A 06 F6 | 	mov	local15, #1
08f2c     9C 00 90 FD | 	jmp	#LR__0824
08f30                 | LR__0811
08f30     02 39 06 F6 | 	mov	local14, #258
08f34     01 3A 06 F6 | 	mov	local15, #1
08f38     90 00 90 FD | 	jmp	#LR__0824
08f3c                 | LR__0812
08f3c     03 39 06 F6 | 	mov	local14, #259
08f40     02 3A 06 F6 | 	mov	local15, #2
08f44     84 00 90 FD | 	jmp	#LR__0824
08f48                 | LR__0813
08f48     04 39 06 F6 | 	mov	local14, #260
08f4c     02 3A 06 F6 | 	mov	local15, #2
08f50     78 00 90 FD | 	jmp	#LR__0824
08f54                 | LR__0814
08f54     05 39 06 F6 | 	mov	local14, #261
08f58     04 3A 06 F6 | 	mov	local15, #4
08f5c     6C 00 90 FD | 	jmp	#LR__0824
08f60                 | LR__0815
08f60     05 39 06 F6 | 	mov	local14, #261
08f64     04 3A 06 F6 | 	mov	local15, #4
08f68     60 00 90 FD | 	jmp	#LR__0824
08f6c                 | LR__0816
08f6c     06 39 06 F6 | 	mov	local14, #262
08f70     04 3A 06 F6 | 	mov	local15, #4
08f74     54 00 90 FD | 	jmp	#LR__0824
08f78                 | LR__0817
08f78     07 39 06 F6 | 	mov	local14, #263
08f7c     08 3A 06 F6 | 	mov	local15, #8
08f80     48 00 90 FD | 	jmp	#LR__0824
08f84                 | LR__0818
08f84     08 39 06 F6 | 	mov	local14, #264
08f88     08 3A 06 F6 | 	mov	local15, #8
08f8c     3C 00 90 FD | 	jmp	#LR__0824
08f90                 | LR__0819
08f90     09 39 06 F6 | 	mov	local14, #265
08f94     04 3A 06 F6 | 	mov	local15, #4
08f98     30 00 90 FD | 	jmp	#LR__0824
08f9c                 | LR__0820
08f9c     0A 39 06 F6 | 	mov	local14, #266
08fa0     08 3A 06 F6 | 	mov	local15, #8
08fa4     24 00 90 FD | 	jmp	#LR__0824
08fa8                 | LR__0821
08fa8     0B 39 06 F6 | 	mov	local14, #267
08fac     04 3A 06 F6 | 	mov	local15, #4
08fb0     18 00 90 FD | 	jmp	#LR__0824
08fb4                 | LR__0822
08fb4     2F 12 06 F6 | 	mov	arg01, #47
08fb8     B0 45 B1 FD | 	call	#_printerror
08fbc     2F FA 05 F6 | 	mov	result1, #47
08fc0     08 01 90 FD | 	jmp	#LR__0825
08fc4                 | LR__0823
08fc4                 | '   return 46
08fc4     2E FA 05 F6 | 	mov	result1, #46
08fc8     00 01 90 FD | 	jmp	#LR__0825
08fcc                 | LR__0824
08fcc     0F 3B 02 FD | 	qmul	local15, local01
08fd0     18 2A 62 FD | 	getqx	local07
08fd4     10 2B 02 FD | 	qmul	local07, local02
08fd8     18 3C 62 FD | 	getqx	local16
08fdc     11 3D 02 FD | 	qmul	local16, local03
08fe0     51 00 00 FF 
08fe4     A8 E5 05 F1 | 	add	objptr, ##41896
08fe8     F2 3E 02 FB | 	rdlong	local17, objptr
08fec     1C 15 02 F6 | 	mov	arg02, local14
08ff0     18 3C 62 FD | 	getqx	local16
08ff4     1E 3F 82 F1 | 	sub	local17, local16
08ff8     10 3E 86 F1 | 	sub	local17, #16
08ffc     0F 3E 26 F5 | 	andn	local17, #15
09000     F2 3E 62 FC | 	wrlong	local17, objptr
09004     51 00 00 FF 
09008     A8 E5 85 F1 | 	sub	objptr, ##41896
0900c     1F 13 02 F6 | 	mov	arg01, local17
09010     04 47 B1 FD | 	call	#_psdpoke
09014     1F 13 02 F6 | 	mov	arg01, local17
09018     02 12 06 F1 | 	add	arg01, #2
0901c     1D 15 02 F6 | 	mov	arg02, local15
09020     F4 46 B1 FD | 	call	#_psdpoke
09024     1F 13 02 F6 | 	mov	arg01, local17
09028     04 12 06 F1 | 	add	arg01, #4
0902c     0F 15 02 F6 | 	mov	arg02, local01
09030     9C 46 B1 FD | 	call	#_pslpoke
09034     1F 13 02 F6 | 	mov	arg01, local17
09038     08 12 06 F1 | 	add	arg01, #8
0903c     10 15 02 F6 | 	mov	arg02, local02
09040     8C 46 B1 FD | 	call	#_pslpoke
09044     1F 13 02 F6 | 	mov	arg01, local17
09048     0C 12 06 F1 | 	add	arg01, #12
0904c     11 15 02 F6 | 	mov	arg02, local03
09050     7C 46 B1 FD | 	call	#_pslpoke
09054     14 35 02 F6 | 	mov	local12, local06
09058     04 34 66 F0 | 	shl	local12, #4
0905c     14 00 00 FF 
09060     F8 E5 05 F1 | 	add	objptr, ##10744
09064     F2 34 02 F1 | 	add	local12, objptr
09068     1A 27 62 FC | 	wrlong	local05, local12
0906c     14 35 02 F6 | 	mov	local12, local06
09070     04 34 66 F0 | 	shl	local12, #4
09074     F2 34 02 F1 | 	add	local12, objptr
09078     04 34 06 F1 | 	add	local12, #4
0907c     1A 3F 62 FC | 	wrlong	local17, local12
09080     14 35 02 F6 | 	mov	local12, local06
09084     04 34 66 F0 | 	shl	local12, #4
09088     F2 34 02 F1 | 	add	local12, objptr
0908c     0C 34 06 F1 | 	add	local12, #12
09090     1A 39 62 FC | 	wrlong	local14, local12
09094                 | ' memtop=arrayptr
09094                 | ' psdpoke arrayptr,arraytype 
09094                 | ' psdpoke arrayptr+2,esize 
09094                 | ' pslpoke arrayptr+4,dims(0)
09094                 | ' pslpoke arrayptr+8,dims(1)
09094                 | ' pslpoke arrayptr+12,dims(2)
09094                 | ' variables(j).name=varname2$
09094                 | ' variables(j).value.uresult=arrayptr
09094                 | ' variables(j).vartype=arraytype
09094                 | ' if j=varnum then varnum+=1
09094     20 00 00 FF 
09098     10 E4 05 F1 | 	add	objptr, ##16400
0909c     F2 2A 02 FB | 	rdlong	local07, objptr
090a0     35 00 00 FF 
090a4     08 E4 85 F1 | 	sub	objptr, ##27144
090a8     15 29 0A F2 | 	cmp	local06, local07 wz
090ac     35 00 00 AF 
090b0     08 E4 05 A1 |  if_e	add	objptr, ##27144
090b4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
090b8     01 2A 06 A1 |  if_e	add	local07, #1
090bc     F2 2A 62 AC |  if_e	wrlong	local07, objptr
090c0     35 00 00 AF 
090c4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
090c8                 | ' return 0
090c8     00 FA 05 F6 | 	mov	result1, #0
090cc                 | LR__0825
090cc     A7 F0 03 F6 | 	mov	ptra, fp
090d0     B2 00 A0 FD | 	call	#popregs_
090d4                 | _compile_dim_ret
090d4     2D 00 64 FD | 	ret
090d8                 | 
090d8                 | ' 
090d8                 | ' '----- compile 'for' command. 
090d8                 | ' 
090d8                 | ' function compile_for() as ulong  
090d8                 | _compile_for
090d8     05 4A 05 F6 | 	mov	COUNT_, #5
090dc     A8 00 A0 FD | 	call	#pushregs_
090e0                 | ' 
090e0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
090e0     37 00 00 FF 
090e4     44 E4 05 F1 | 	add	objptr, ##28228
090e8     F2 14 02 FB | 	rdlong	arg02, objptr
090ec     01 14 06 F1 | 	add	arg02, #1
090f0     03 14 66 F0 | 	shl	arg02, #3
090f4     02 00 00 FF 
090f8     38 E4 85 F1 | 	sub	objptr, ##1080
090fc     F2 14 02 F1 | 	add	arg02, objptr
09100     0A 13 02 FB | 	rdlong	arg01, arg02
09104     35 00 00 FF 
09108     0C E4 85 F1 | 	sub	objptr, ##27148
0910c                 | ' 
0910c                 | ' select case s
0910c     82 01 00 FF 
09110     52 15 06 F6 | 	mov	arg02, ##@LR__5183
09114     14 7A B1 FD | 	call	#__system___string_cmp
09118     00 FA 0D F2 | 	cmp	result1, #0 wz
0911c     1B FA 05 A6 |  if_e	mov	result1, #27
09120     00 FA 05 56 |  if_ne	mov	result1, #0
09124     00 FA 0D F2 | 	cmp	result1, #0 wz
09128     0C 00 90 AD |  if_e	jmp	#LR__0830
0912c     05 12 06 F6 | 	mov	arg01, #5
09130     F0 E3 BF FD | 	call	#_compile_immediate_assign
09134     08 00 90 FD | 	jmp	#LR__0831
09138                 | LR__0830
09138     20 FA 05 F6 | 	mov	result1, #32
0913c     D0 02 90 FD | 	jmp	#LR__0835
09140                 | LR__0831
09140     4A 00 00 FF 
09144     7C E4 05 F1 | 	add	objptr, ##38012
09148     F2 14 02 FB | 	rdlong	arg02, objptr
0914c     0A 13 02 F6 | 	mov	arg01, arg02
09150     01 12 86 F1 | 	sub	arg01, #1
09154     09 25 02 F6 | 	mov	local04, arg01
09158     01 24 66 F0 | 	shl	local04, #1
0915c     09 25 02 F1 | 	add	local04, arg01
09160     02 24 66 F0 | 	shl	local04, #2
09164     03 00 00 FF 
09168     00 E4 85 F1 | 	sub	objptr, ##1536
0916c     F2 24 02 F1 | 	add	local04, objptr
09170     12 1F 02 FB | 	rdlong	local01, local04
09174     04 24 06 F1 | 	add	local04, #4
09178     12 25 02 FB | 	rdlong	local04, local04
0917c     01 14 86 F1 | 	sub	arg02, #1
09180     0A 13 02 F6 | 	mov	arg01, arg02
09184     01 12 66 F0 | 	shl	arg01, #1
09188     0A 13 02 F1 | 	add	arg01, arg02
0918c     02 12 66 F0 | 	shl	arg01, #2
09190     F2 12 02 F1 | 	add	arg01, objptr
09194     08 12 06 F1 | 	add	arg01, #8
09198     09 15 02 FB | 	rdlong	arg02, arg01
0919c     12 21 02 F6 | 	mov	local02, local04
091a0     0A 23 02 F6 | 	mov	local03, arg02
091a4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
091a4     17 22 0E F2 | 	cmp	local03, #23 wz
091a8     47 00 00 FF 
091ac     7C E4 85 F1 | 	sub	objptr, ##36476
091b0     22 FA 05 56 |  if_ne	mov	result1, #34
091b4     58 02 90 5D |  if_ne	jmp	#LR__0835
091b8     0F 27 02 F6 | 	mov	local05, local01
091bc                 | ' varnum=t1.result.uresult
091bc                 | ' if lparts(ct).part$<>"to" then return 33
091bc     37 00 00 FF 
091c0     44 E4 05 F1 | 	add	objptr, ##28228
091c4     F2 1E 02 FB | 	rdlong	local01, objptr
091c8     03 1E 66 F0 | 	shl	local01, #3
091cc     02 00 00 FF 
091d0     38 E4 85 F1 | 	sub	objptr, ##1080
091d4     F2 1E 02 F1 | 	add	local01, objptr
091d8     0F 13 02 FB | 	rdlong	arg01, local01
091dc     84 01 00 FF 
091e0     EE 15 06 F6 | 	mov	arg02, ##@LR__5436
091e4     35 00 00 FF 
091e8     0C E4 85 F1 | 	sub	objptr, ##27148
091ec     3C 79 B1 FD | 	call	#__system___string_cmp
091f0     00 FA 0D F2 | 	cmp	result1, #0 wz
091f4     21 FA 05 56 |  if_ne	mov	result1, #33
091f8     14 02 90 5D |  if_ne	jmp	#LR__0835
091fc     37 00 00 FF 
09200     44 E4 05 F1 | 	add	objptr, ##28228
09204     F2 24 02 FB | 	rdlong	local04, objptr
09208     01 24 06 F1 | 	add	local04, #1
0920c     F2 24 62 FC | 	wrlong	local04, objptr
09210     37 00 00 FF 
09214     44 E4 85 F1 | 	sub	objptr, ##28228
09218     EC 07 B0 FD | 	call	#_expr
0921c                 | ' ct+=1
0921c                 | ' expr()  										' there is "to" value pushed on the stack
0921c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0921c     37 00 00 FF 
09220     44 E4 05 F1 | 	add	objptr, ##28228
09224     F2 24 02 FB | 	rdlong	local04, objptr
09228     03 24 66 F0 | 	shl	local04, #3
0922c     02 00 00 FF 
09230     38 E4 85 F1 | 	sub	objptr, ##1080
09234     F2 24 02 F1 | 	add	local04, objptr
09238     12 13 02 FB | 	rdlong	arg01, local04
0923c     84 01 00 FF 
09240     F1 15 06 F6 | 	mov	arg02, ##@LR__5437
09244     35 00 00 FF 
09248     0C E4 85 F1 | 	sub	objptr, ##27148
0924c     DC 78 B1 FD | 	call	#__system___string_cmp
09250     00 FA 0D F2 | 	cmp	result1, #0 wz
09254     3C 00 90 AD |  if_e	jmp	#LR__0832
09258     37 00 00 FF 
0925c     44 E4 05 F1 | 	add	objptr, ##28228
09260     F2 24 02 FB | 	rdlong	local04, objptr
09264     03 24 66 F0 | 	shl	local04, #3
09268     02 00 00 FF 
0926c     38 E4 85 F1 | 	sub	objptr, ##1080
09270     F2 24 02 F1 | 	add	local04, objptr
09274     12 13 02 FB | 	rdlong	arg01, local04
09278     84 01 00 FF 
0927c     F6 15 06 F6 | 	mov	arg02, ##@LR__5438
09280     35 00 00 FF 
09284     0C E4 85 F1 | 	sub	objptr, ##27148
09288     A0 78 B1 FD | 	call	#__system___string_cmp
0928c     00 FA 0D F2 | 	cmp	result1, #0 wz
09290     24 00 90 5D |  if_ne	jmp	#LR__0833
09294                 | LR__0832
09294     37 00 00 FF 
09298     44 E4 05 F1 | 	add	objptr, ##28228
0929c     F2 1E 02 FB | 	rdlong	local01, objptr
092a0     01 1E 06 F1 | 	add	local01, #1
092a4     F2 1E 62 FC | 	wrlong	local01, objptr
092a8     37 00 00 FF 
092ac     44 E4 85 F1 | 	sub	objptr, ##28228
092b0     54 07 B0 FD | 	call	#_expr
092b4     78 00 90 FD | 	jmp	#LR__0834
092b8                 | LR__0833
092b8     4A 00 00 FF 
092bc     7C E4 05 F1 | 	add	objptr, ##38012
092c0     F2 1E 02 FB | 	rdlong	local01, objptr
092c4     0F 25 02 F6 | 	mov	local04, local01
092c8     01 24 66 F0 | 	shl	local04, #1
092cc     0F 25 02 F1 | 	add	local04, local01
092d0     02 24 66 F0 | 	shl	local04, #2
092d4     03 00 00 FF 
092d8     00 E4 85 F1 | 	sub	objptr, ##1536
092dc     F2 24 02 F1 | 	add	local04, objptr
092e0     08 24 06 F1 | 	add	local04, #8
092e4     12 39 68 FC | 	wrlong	#28, local04
092e8     03 00 00 FF 
092ec     00 E4 05 F1 | 	add	objptr, ##1536
092f0     F2 1E 02 FB | 	rdlong	local01, objptr
092f4     0F 25 02 F6 | 	mov	local04, local01
092f8     01 24 66 F0 | 	shl	local04, #1
092fc     0F 25 02 F1 | 	add	local04, local01
09300     02 24 66 F0 | 	shl	local04, #2
09304     03 00 00 FF 
09308     00 E4 85 F1 | 	sub	objptr, ##1536
0930c     F2 24 02 F1 | 	add	local04, objptr
09310     12 03 68 FC | 	wrlong	#1, local04
09314     03 00 00 FF 
09318     00 E4 05 F1 | 	add	objptr, ##1536
0931c     F2 1E 02 FB | 	rdlong	local01, objptr
09320     01 1E 06 F1 | 	add	local01, #1
09324     F2 1E 62 FC | 	wrlong	local01, objptr
09328     4A 00 00 FF 
0932c     7C E4 85 F1 | 	sub	objptr, ##38012
09330                 | LR__0834
09330     4A 00 00 FF 
09334     7C E4 05 F1 | 	add	objptr, ##38012
09338     F2 1E 02 FB | 	rdlong	local01, objptr
0933c     0F 25 02 F6 | 	mov	local04, local01
09340     01 24 66 F0 | 	shl	local04, #1
09344     0F 25 02 F1 | 	add	local04, local01
09348     02 24 66 F0 | 	shl	local04, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 24 02 F1 | 	add	local04, objptr
09358     08 24 06 F1 | 	add	local04, #8
0935c     12 39 68 FC | 	wrlong	#28, local04
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 1E 02 FB | 	rdlong	local01, objptr
0936c     0F 25 02 F6 | 	mov	local04, local01
09370     01 24 66 F0 | 	shl	local04, #1
09374     0F 25 02 F1 | 	add	local04, local01
09378     02 24 66 F0 | 	shl	local04, #2
0937c     03 00 00 FF 
09380     00 E4 85 F1 | 	sub	objptr, ##1536
09384     F2 24 02 F1 | 	add	local04, objptr
09388     12 27 62 FC | 	wrlong	local05, local04
0938c     03 00 00 FF 
09390     00 E4 05 F1 | 	add	objptr, ##1536
09394     F2 26 02 FB | 	rdlong	local05, objptr
09398     01 26 06 F1 | 	add	local05, #1
0939c     F2 26 62 FC | 	wrlong	local05, objptr
093a0     13 1F 02 F6 | 	mov	local01, local05
093a4     01 1E 66 F0 | 	shl	local01, #1
093a8     13 1F 02 F1 | 	add	local01, local05
093ac     02 1E 66 F0 | 	shl	local01, #2
093b0     03 00 00 FF 
093b4     00 E4 85 F1 | 	sub	objptr, ##1536
093b8     F2 1E 02 F1 | 	add	local01, objptr
093bc     08 1E 06 F1 | 	add	local01, #8
093c0     0F 95 68 FC | 	wrlong	#74, local01
093c4     03 00 00 FF 
093c8     00 E4 05 F1 | 	add	objptr, ##1536
093cc     F2 26 02 FB | 	rdlong	local05, objptr
093d0     13 1F 02 F6 | 	mov	local01, local05
093d4     01 1E 66 F0 | 	shl	local01, #1
093d8     13 1F 02 F1 | 	add	local01, local05
093dc     02 1E 66 F0 | 	shl	local01, #2
093e0     03 00 00 FF 
093e4     00 E4 85 F1 | 	sub	objptr, ##1536
093e8     F2 1E 02 F1 | 	add	local01, objptr
093ec     0F 01 68 FC | 	wrlong	#0, local01
093f0     03 00 00 FF 
093f4     00 E4 05 F1 | 	add	objptr, ##1536
093f8     F2 26 02 FB | 	rdlong	local05, objptr
093fc     01 26 06 F1 | 	add	local05, #1
09400     F2 26 62 FC | 	wrlong	local05, objptr
09404     4A 00 00 FF 
09408     7C E4 85 F1 | 	sub	objptr, ##38012
0940c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0940c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0940c                 | ' return 0
0940c     00 FA 05 F6 | 	mov	result1, #0
09410                 | LR__0835
09410     A7 F0 03 F6 | 	mov	ptra, fp
09414     B2 00 A0 FD | 	call	#popregs_
09418                 | _compile_for_ret
09418     2D 00 64 FD | 	ret
0941c                 | 
0941c                 | ' 
0941c                 | ' '----- compile 'next' command. 
0941c                 | ' 
0941c                 | ' function compile_next() as ulong
0941c                 | _compile_next
0941c     04 4A 05 F6 | 	mov	COUNT_, #4
09420     A8 00 A0 FD | 	call	#pushregs_
09424     37 00 00 FF 
09428     44 E4 05 F1 | 	add	objptr, ##28228
0942c     F2 14 02 FB | 	rdlong	arg02, objptr
09430     03 14 66 F0 | 	shl	arg02, #3
09434     02 00 00 FF 
09438     38 E4 85 F1 | 	sub	objptr, ##1080
0943c     F2 14 02 F1 | 	add	arg02, objptr
09440     0A 1F 02 FB | 	rdlong	local01, arg02
09444                 | ' 
09444                 | ' varname$=lparts(ct).part$ 
09444                 | ' if varnum=0 then return 35
09444     04 E4 85 F1 | 	sub	objptr, #4
09448     F2 14 0A FB | 	rdlong	arg02, objptr wz
0944c     35 00 00 FF 
09450     08 E4 85 F1 | 	sub	objptr, ##27144
09454     23 FA 05 A6 |  if_e	mov	result1, #35
09458     4C 01 90 AD |  if_e	jmp	#LR__0842
0945c     01 20 66 F6 | 	neg	local02, #1
09460                 | ' j=-1
09460                 | ' for i=0 to varnum-1
09460     00 22 06 F6 | 	mov	local03, #0
09464     35 00 00 FF 
09468     08 E4 05 F1 | 	add	objptr, ##27144
0946c     F2 24 02 FB | 	rdlong	local04, objptr
09470     35 00 00 FF 
09474     08 E4 85 F1 | 	sub	objptr, ##27144
09478                 | LR__0840
09478     12 23 12 F2 | 	cmp	local03, local04 wc
0947c     38 00 90 3D |  if_ae	jmp	#LR__0841
09480                 | '   if variables(i).name=varname$ then j=i : exit
09480     11 15 02 F6 | 	mov	arg02, local03
09484     04 14 66 F0 | 	shl	arg02, #4
09488     14 00 00 FF 
0948c     F8 E5 05 F1 | 	add	objptr, ##10744
09490     F2 14 02 F1 | 	add	arg02, objptr
09494     0A 13 02 FB | 	rdlong	arg01, arg02
09498     0F 15 02 F6 | 	mov	arg02, local01
0949c     14 00 00 FF 
094a0     F8 E5 85 F1 | 	sub	objptr, ##10744
094a4     84 76 B1 FD | 	call	#__system___string_cmp
094a8     00 FA 0D F2 | 	cmp	result1, #0 wz
094ac     11 21 02 A6 |  if_e	mov	local02, local03
094b0     01 22 06 51 |  if_ne	add	local03, #1
094b4     C0 FF 9F 5D |  if_ne	jmp	#LR__0840
094b8                 | LR__0841
094b8                 | ' if j=-1 then return 35
094b8     FF FF 7F FF 
094bc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
094c0     23 FA 05 A6 |  if_e	mov	result1, #35
094c4     E0 00 90 AD |  if_e	jmp	#LR__0842
094c8     4A 00 00 FF 
094cc     7C E4 05 F1 | 	add	objptr, ##38012
094d0     F2 24 02 FB | 	rdlong	local04, objptr
094d4     12 23 02 F6 | 	mov	local03, local04
094d8     01 22 66 F0 | 	shl	local03, #1
094dc     12 23 02 F1 | 	add	local03, local04
094e0     02 22 66 F0 | 	shl	local03, #2
094e4     03 00 00 FF 
094e8     00 E4 85 F1 | 	sub	objptr, ##1536
094ec     F2 22 02 F1 | 	add	local03, objptr
094f0     08 22 06 F1 | 	add	local03, #8
094f4     11 39 68 FC | 	wrlong	#28, local03
094f8     03 00 00 FF 
094fc     00 E4 05 F1 | 	add	objptr, ##1536
09500     F2 24 02 FB | 	rdlong	local04, objptr
09504     12 23 02 F6 | 	mov	local03, local04
09508     01 22 66 F0 | 	shl	local03, #1
0950c     12 23 02 F1 | 	add	local03, local04
09510     02 22 66 F0 | 	shl	local03, #2
09514     03 00 00 FF 
09518     00 E4 85 F1 | 	sub	objptr, ##1536
0951c     F2 22 02 F1 | 	add	local03, objptr
09520     11 21 62 FC | 	wrlong	local02, local03
09524     03 00 00 FF 
09528     00 E4 05 F1 | 	add	objptr, ##1536
0952c     F2 24 02 FB | 	rdlong	local04, objptr
09530     01 24 06 F1 | 	add	local04, #1
09534     F2 24 62 FC | 	wrlong	local04, objptr
09538     12 23 02 F6 | 	mov	local03, local04
0953c     01 22 66 F0 | 	shl	local03, #1
09540     12 23 02 F1 | 	add	local03, local04
09544     02 22 66 F0 | 	shl	local03, #2
09548     03 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1536
09550     F2 22 02 F1 | 	add	local03, objptr
09554     08 22 06 F1 | 	add	local03, #8
09558     11 97 68 FC | 	wrlong	#75, local03
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 24 02 FB | 	rdlong	local04, objptr
09568     12 23 02 F6 | 	mov	local03, local04
0956c     01 22 66 F0 | 	shl	local03, #1
09570     12 23 02 F1 | 	add	local03, local04
09574     02 22 66 F0 | 	shl	local03, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 22 02 F1 | 	add	local03, objptr
09584     11 01 68 FC | 	wrlong	#0, local03
09588     03 00 00 FF 
0958c     00 E4 05 F1 | 	add	objptr, ##1536
09590     F2 24 02 FB | 	rdlong	local04, objptr
09594     01 24 06 F1 | 	add	local04, #1
09598     F2 24 62 FC | 	wrlong	local04, objptr
0959c     4A 00 00 FF 
095a0     7C E4 85 F1 | 	sub	objptr, ##38012
095a4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
095a4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
095a4                 | ' return 0
095a4     00 FA 05 F6 | 	mov	result1, #0
095a8                 | LR__0842
095a8     A7 F0 03 F6 | 	mov	ptra, fp
095ac     B2 00 A0 FD | 	call	#popregs_
095b0                 | _compile_next_ret
095b0     2D 00 64 FD | 	ret
095b4                 | 
095b4                 | ' 
095b4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
095b4                 | ' 
095b4                 | ' function compile_gosub() as ulong
095b4                 | _compile_gosub
095b4     02 4A 05 F6 | 	mov	COUNT_, #2
095b8     A8 00 A0 FD | 	call	#pushregs_
095bc     4A 00 00 FF 
095c0     7C E4 05 F1 | 	add	objptr, ##38012
095c4     F2 1E 02 FB | 	rdlong	local01, objptr
095c8     0F 21 02 F6 | 	mov	local02, local01
095cc     01 20 66 F0 | 	shl	local02, #1
095d0     0F 21 02 F1 | 	add	local02, local01
095d4     02 20 66 F0 | 	shl	local02, #2
095d8     03 00 00 FF 
095dc     00 E4 85 F1 | 	sub	objptr, ##1536
095e0     F2 20 02 F1 | 	add	local02, objptr
095e4     08 20 06 F1 | 	add	local02, #8
095e8     10 53 69 FC | 	wrlong	#169, local02
095ec     03 00 00 FF 
095f0     00 E4 05 F1 | 	add	objptr, ##1536
095f4     F2 20 02 FB | 	rdlong	local02, objptr
095f8     01 20 06 F1 | 	add	local02, #1
095fc     F2 20 62 FC | 	wrlong	local02, objptr
09600     4A 00 00 FF 
09604     7C E4 85 F1 | 	sub	objptr, ##38012
09608     0C 00 B0 FD | 	call	#_compile_goto
0960c                 | ' compiledline(lineptr).result_type=token_gosub
0960c                 | ' lineptr+=1
0960c                 | ' err=compile_goto()
0960c                 | ' return err
0960c     A7 F0 03 F6 | 	mov	ptra, fp
09610     B2 00 A0 FD | 	call	#popregs_
09614                 | _compile_gosub_ret
09614     2D 00 64 FD | 	ret
09618                 | 
09618                 | ' 
09618                 | ' '----- compile 'goto' 
09618                 | ' 
09618                 | ' function compile_goto( ) as ulong
09618                 | _compile_goto
09618     03 4A 05 F6 | 	mov	COUNT_, #3
0961c     A8 00 A0 FD | 	call	#pushregs_
09620     34 F0 07 F1 | 	add	ptra, #52
09624                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09624     37 00 00 FF 
09628     44 E4 05 F1 | 	add	objptr, ##28228
0962c     F2 16 02 FB | 	rdlong	arg03, objptr
09630     03 16 66 F0 | 	shl	arg03, #3
09634     02 00 00 FF 
09638     38 E4 85 F1 | 	sub	objptr, ##1080
0963c     F2 16 02 F1 | 	add	arg03, objptr
09640     04 16 06 F1 | 	add	arg03, #4
09644     0B 17 02 FB | 	rdlong	arg03, arg03
09648     01 00 00 FF 
0964c     00 16 0E F2 | 	cmp	arg03, ##512 wz
09650     35 00 00 FF 
09654     0C E4 85 F1 | 	sub	objptr, ##27148
09658     CC 02 90 5D |  if_ne	jmp	#LR__0855
0965c     37 00 00 FF 
09660     44 E4 05 F1 | 	add	objptr, ##28228
09664     F2 16 02 FB | 	rdlong	arg03, objptr
09668     01 16 06 F1 | 	add	arg03, #1
0966c     03 16 66 F0 | 	shl	arg03, #3
09670     02 00 00 FF 
09674     38 E4 85 F1 | 	sub	objptr, ##1080
09678     F2 16 02 F1 | 	add	arg03, objptr
0967c     04 16 06 F1 | 	add	arg03, #4
09680     0B 17 02 FB | 	rdlong	arg03, arg03
09684     FE 17 0E F2 | 	cmp	arg03, #510 wz
09688     35 00 00 FF 
0968c     0C E4 85 F1 | 	sub	objptr, ##27148
09690     94 02 90 5D |  if_ne	jmp	#LR__0855
09694     37 00 00 FF 
09698     44 E4 05 F1 | 	add	objptr, ##28228
0969c     F2 16 02 FB | 	rdlong	arg03, objptr
096a0     03 16 66 F0 | 	shl	arg03, #3
096a4     02 00 00 FF 
096a8     38 E4 85 F1 | 	sub	objptr, ##1080
096ac     F2 16 02 F1 | 	add	arg03, objptr
096b0     0B 13 02 FB | 	rdlong	arg01, arg03
096b4     00 14 06 F6 | 	mov	arg02, #0
096b8     35 00 00 FF 
096bc     0C E4 85 F1 | 	sub	objptr, ##27148
096c0     6C A6 B1 FD | 	call	#__system____builtin_atoi
096c4     04 4E 05 F1 | 	add	fp, #4
096c8     A7 FA 61 FC | 	wrlong	result1, fp
096cc     4A 00 00 FF 
096d0     7C E4 05 F1 | 	add	objptr, ##38012
096d4     F2 1E 02 FB | 	rdlong	local01, objptr
096d8     0F 21 02 F6 | 	mov	local02, local01
096dc     01 20 66 F0 | 	shl	local02, #1
096e0     0F 21 02 F1 | 	add	local02, local01
096e4     02 20 66 F0 | 	shl	local02, #2
096e8     03 00 00 FF 
096ec     00 E4 85 F1 | 	sub	objptr, ##1536
096f0     F2 20 02 F1 | 	add	local02, objptr
096f4     08 20 06 F1 | 	add	local02, #8
096f8     10 9D 68 FC | 	wrlong	#78, local02
096fc     03 00 00 FF 
09700     08 E4 05 F1 | 	add	objptr, ##1544
09704     F2 22 02 FB | 	rdlong	local03, objptr
09708     4A 00 00 FF 
0970c     84 E4 85 F1 | 	sub	objptr, ##38020
09710     04 4E 05 F1 | 	add	fp, #4
09714     A7 22 62 FC | 	wrlong	local03, fp
09718     08 4E 85 F1 | 	sub	fp, #8
0971c                 | '   gotoline=val%(lparts(ct).part$) 
0971c                 | '   compiledline(lineptr).result_type=token_fast_goto
0971c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0971c                 | '   do
0971c                 | LR__0850
0971c     10 4E 05 F1 | 	add	fp, #16
09720     A7 12 02 F6 | 	mov	arg01, fp
09724     08 4E 85 F1 | 	sub	fp, #8
09728     A7 14 02 FB | 	rdlong	arg02, fp
0972c     08 4E 85 F1 | 	sub	fp, #8
09730     18 16 06 F6 | 	mov	arg03, #24
09734     0B 00 00 FF 
09738     CC E4 05 F1 | 	add	objptr, ##5836
0973c     84 67 B1 FD | 	call	#_psram_spin2_read1
09740     0B 00 00 FF 
09744     CC E4 85 F1 | 	sub	objptr, ##5836
09748                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09748                 | '     if gotoheader(0)<>$FFFFFFFF then
09748     10 4E 05 F1 | 	add	fp, #16
0974c     A7 22 02 FB | 	rdlong	local03, fp
09750     10 4E 85 F1 | 	sub	fp, #16
09754     FF FF 7F FF 
09758     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0975c     24 00 90 AD |  if_e	jmp	#LR__0851
09760     08 4E 05 F1 | 	add	fp, #8
09764     A7 22 02 FB | 	rdlong	local03, fp
09768     04 4E 05 F1 | 	add	fp, #4
0976c     A7 22 62 FC | 	wrlong	local03, fp
09770     18 4E 05 F1 | 	add	fp, #24
09774     A7 22 02 FB | 	rdlong	local03, fp
09778     1C 4E 85 F1 | 	sub	fp, #28
0977c     A7 22 62 FC | 	wrlong	local03, fp
09780     08 4E 85 F1 | 	sub	fp, #8
09784                 | LR__0851
09784     24 4E 05 F1 | 	add	fp, #36
09788     A7 22 02 FB | 	rdlong	local03, fp
0978c     24 4E 85 F1 | 	sub	fp, #36
09790     FF FF 3F FF 
09794     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09798     10 4E 05 51 |  if_ne	add	fp, #16
0979c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
097a0     10 4E 85 51 |  if_ne	sub	fp, #16
097a4     FF FF 7F 5F 
097a8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
097ac     1C 00 90 AD |  if_e	jmp	#LR__0852
097b0     10 4E 05 F1 | 	add	fp, #16
097b4     A7 22 02 FB | 	rdlong	local03, fp
097b8     0C 4E 85 F1 | 	sub	fp, #12
097bc     A7 20 02 FB | 	rdlong	local02, fp
097c0     04 4E 85 F1 | 	sub	fp, #4
097c4     10 23 0A F2 | 	cmp	local03, local02 wz
097c8     50 FF 9F 5D |  if_ne	jmp	#LR__0850
097cc                 | LR__0852
097cc                 | '   if gotoheader(0)=gotoline then
097cc     10 4E 05 F1 | 	add	fp, #16
097d0     A7 22 02 FB | 	rdlong	local03, fp
097d4     0C 4E 85 F1 | 	sub	fp, #12
097d8     A7 1E 02 FB | 	rdlong	local01, fp
097dc     04 4E 85 F1 | 	sub	fp, #4
097e0     0F 23 0A F2 | 	cmp	local03, local01 wz
097e4     7C 00 90 5D |  if_ne	jmp	#LR__0853
097e8     4A 00 00 FF 
097ec     7C E4 05 F1 | 	add	objptr, ##38012
097f0     F2 1E 02 FB | 	rdlong	local01, objptr
097f4     0F 21 02 F6 | 	mov	local02, local01
097f8     01 20 66 F0 | 	shl	local02, #1
097fc     0F 21 02 F1 | 	add	local02, local01
09800     02 20 66 F0 | 	shl	local02, #2
09804     03 00 00 FF 
09808     00 E4 85 F1 | 	sub	objptr, ##1536
0980c     F2 20 02 F1 | 	add	local02, objptr
09810     0C 4E 05 F1 | 	add	fp, #12
09814     A7 22 02 FB | 	rdlong	local03, fp
09818     10 23 62 FC | 	wrlong	local03, local02
0981c     03 00 00 FF 
09820     00 E4 05 F1 | 	add	objptr, ##1536
09824     F2 1E 02 FB | 	rdlong	local01, objptr
09828     0F 21 02 F6 | 	mov	local02, local01
0982c     01 20 66 F0 | 	shl	local02, #1
09830     0F 21 02 F1 | 	add	local02, local01
09834     02 20 66 F0 | 	shl	local02, #2
09838     03 00 00 FF 
0983c     00 E4 85 F1 | 	sub	objptr, ##1536
09840     F2 20 02 F1 | 	add	local02, objptr
09844     08 4E 85 F1 | 	sub	fp, #8
09848     A7 22 02 FB | 	rdlong	local03, fp
0984c     04 4E 85 F1 | 	sub	fp, #4
09850     04 20 06 F1 | 	add	local02, #4
09854     10 23 62 FC | 	wrlong	local03, local02
09858     47 00 00 FF 
0985c     7C E4 85 F1 | 	sub	objptr, ##36476
09860     A4 00 90 FD | 	jmp	#LR__0854
09864                 | LR__0853
09864     4A 00 00 FF 
09868     7C E4 05 F1 | 	add	objptr, ##38012
0986c     F2 1E 02 FB | 	rdlong	local01, objptr
09870     0F 21 02 F6 | 	mov	local02, local01
09874     01 20 66 F0 | 	shl	local02, #1
09878     0F 21 02 F1 | 	add	local02, local01
0987c     02 20 66 F0 | 	shl	local02, #2
09880     03 00 00 FF 
09884     00 E4 85 F1 | 	sub	objptr, ##1536
09888     F2 20 02 F1 | 	add	local02, objptr
0988c     00 00 C0 FF 
09890     10 01 68 FC | 	wrlong	##-2147483648, local02
09894     03 00 00 FF 
09898     00 E4 05 F1 | 	add	objptr, ##1536
0989c     F2 1E 02 FB | 	rdlong	local01, objptr
098a0     0F 21 02 F6 | 	mov	local02, local01
098a4     01 20 66 F0 | 	shl	local02, #1
098a8     0F 21 02 F1 | 	add	local02, local01
098ac     02 20 66 F0 | 	shl	local02, #2
098b0     03 00 00 FF 
098b4     00 E4 85 F1 | 	sub	objptr, ##1536
098b8     F2 20 02 F1 | 	add	local02, objptr
098bc     04 4E 05 F1 | 	add	fp, #4
098c0     A7 22 02 FB | 	rdlong	local03, fp
098c4     04 4E 85 F1 | 	sub	fp, #4
098c8     04 20 06 F1 | 	add	local02, #4
098cc     10 23 62 FC | 	wrlong	local03, local02
098d0     03 00 00 FF 
098d4     00 E4 05 F1 | 	add	objptr, ##1536
098d8     F2 1E 02 FB | 	rdlong	local01, objptr
098dc     0F 21 02 F6 | 	mov	local02, local01
098e0     01 20 66 F0 | 	shl	local02, #1
098e4     0F 21 02 F1 | 	add	local02, local01
098e8     02 20 66 F0 | 	shl	local02, #2
098ec     03 00 00 FF 
098f0     00 E4 85 F1 | 	sub	objptr, ##1536
098f4     F2 20 02 F1 | 	add	local02, objptr
098f8     08 20 06 F1 | 	add	local02, #8
098fc     10 A7 68 FC | 	wrlong	#83, local02
09900     47 00 00 FF 
09904     7C E4 85 F1 | 	sub	objptr, ##36476
09908                 | LR__0854
09908     4A 00 00 FF 
0990c     7C E4 05 F1 | 	add	objptr, ##38012
09910     F2 22 02 FB | 	rdlong	local03, objptr
09914     01 22 06 F1 | 	add	local03, #1
09918     F2 22 62 FC | 	wrlong	local03, objptr
0991c     4A 00 00 FF 
09920     7C E4 85 F1 | 	sub	objptr, ##38012
09924     D0 00 90 FD | 	jmp	#LR__0856
09928                 | LR__0855
09928     DC 00 B0 FD | 	call	#_expr
0992c     30 4E 05 F1 | 	add	fp, #48
09930     A7 9E 68 FC | 	wrlong	#79, fp
09934     08 4E 85 F1 | 	sub	fp, #8
09938     A7 00 68 FC | 	wrlong	#0, fp
0993c     04 4E 05 F1 | 	add	fp, #4
09940     A7 22 02 FB | 	rdlong	local03, fp
09944     04 4E 05 F1 | 	add	fp, #4
09948     A7 1E 02 FB | 	rdlong	local01, fp
0994c     30 4E 85 F1 | 	sub	fp, #48
09950     4A 00 00 FF 
09954     7C E4 05 F1 | 	add	objptr, ##38012
09958     F2 20 02 FB | 	rdlong	local02, objptr
0995c     10 17 02 F6 | 	mov	arg03, local02
09960     01 16 66 F0 | 	shl	arg03, #1
09964     10 17 02 F1 | 	add	arg03, local02
09968     02 16 66 F0 | 	shl	arg03, #2
0996c     03 00 00 FF 
09970     00 E4 85 F1 | 	sub	objptr, ##1536
09974     F2 16 02 F1 | 	add	arg03, objptr
09978     0B 01 68 FC | 	wrlong	#0, arg03
0997c     03 00 00 FF 
09980     00 E4 05 F1 | 	add	objptr, ##1536
09984     F2 20 02 FB | 	rdlong	local02, objptr
09988     10 17 02 F6 | 	mov	arg03, local02
0998c     01 16 66 F0 | 	shl	arg03, #1
09990     10 17 02 F1 | 	add	arg03, local02
09994     02 16 66 F0 | 	shl	arg03, #2
09998     03 00 00 FF 
0999c     00 E4 85 F1 | 	sub	objptr, ##1536
099a0     F2 16 02 F1 | 	add	arg03, objptr
099a4     04 16 06 F1 | 	add	arg03, #4
099a8     0B 23 62 FC | 	wrlong	local03, arg03
099ac     03 00 00 FF 
099b0     00 E4 05 F1 | 	add	objptr, ##1536
099b4     F2 22 02 FB | 	rdlong	local03, objptr
099b8     11 21 02 F6 | 	mov	local02, local03
099bc     01 20 66 F0 | 	shl	local02, #1
099c0     11 21 02 F1 | 	add	local02, local03
099c4     02 20 66 F0 | 	shl	local02, #2
099c8     03 00 00 FF 
099cc     00 E4 85 F1 | 	sub	objptr, ##1536
099d0     F2 20 02 F1 | 	add	local02, objptr
099d4     08 20 06 F1 | 	add	local02, #8
099d8     10 1F 62 FC | 	wrlong	local01, local02
099dc     03 00 00 FF 
099e0     00 E4 05 F1 | 	add	objptr, ##1536
099e4     F2 22 02 FB | 	rdlong	local03, objptr
099e8     01 22 06 F1 | 	add	local03, #1
099ec     F2 22 62 FC | 	wrlong	local03, objptr
099f0     4A 00 00 FF 
099f4     7C E4 85 F1 | 	sub	objptr, ##38012
099f8                 | LR__0856
099f8                 | ' return 0
099f8     00 FA 05 F6 | 	mov	result1, #0
099fc     A7 F0 03 F6 | 	mov	ptra, fp
09a00     B2 00 A0 FD | 	call	#popregs_
09a04                 | _compile_goto_ret
09a04     2D 00 64 FD | 	ret
09a08                 | 
09a08                 | ' 
09a08                 | ' 
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' 
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' '
09a08                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09a08                 | ' '
09a08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a08                 | ' 
09a08                 | ' function expr() as ulong 
09a08                 | _expr
09a08     07 4A 05 F6 | 	mov	COUNT_, #7
09a0c     A8 00 A0 FD | 	call	#pushregs_
09a10                 | _expr_enter
09a10     37 00 00 FF 
09a14     44 E4 05 F1 | 	add	objptr, ##28228
09a18     F2 24 02 FB | 	rdlong	local04, objptr
09a1c     03 24 66 F0 | 	shl	local04, #3
09a20     02 00 00 FF 
09a24     38 E4 85 F1 | 	sub	objptr, ##1080
09a28     F2 24 02 F1 | 	add	local04, objptr
09a2c     04 24 06 F1 | 	add	local04, #4
09a30     12 27 02 FB | 	rdlong	local05, local04
09a34                 | ' 
09a34                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09a34     FE 27 0E F2 | 	cmp	local05, #510 wz
09a38     35 00 00 FF 
09a3c     0C E4 85 F1 | 	sub	objptr, ##27148
09a40     C4 00 90 5D |  if_ne	jmp	#LR__0860
09a44     1D 1E 06 F6 | 	mov	local01, #29
09a48     FF 22 06 F6 | 	mov	local03, #255
09a4c     0F 29 02 F6 | 	mov	local06, local01
09a50     10 2B 02 F6 | 	mov	local07, local02
09a54     11 1F 02 F6 | 	mov	local01, local03
09a58     4A 00 00 FF 
09a5c     7C E4 05 F1 | 	add	objptr, ##38012
09a60     F2 26 02 FB | 	rdlong	local05, objptr
09a64     13 25 02 F6 | 	mov	local04, local05
09a68     01 24 66 F0 | 	shl	local04, #1
09a6c     13 25 02 F1 | 	add	local04, local05
09a70     02 24 66 F0 | 	shl	local04, #2
09a74     03 00 00 FF 
09a78     00 E4 85 F1 | 	sub	objptr, ##1536
09a7c     F2 24 02 F1 | 	add	local04, objptr
09a80     12 29 62 FC | 	wrlong	local06, local04
09a84     03 00 00 FF 
09a88     00 E4 05 F1 | 	add	objptr, ##1536
09a8c     F2 28 02 FB | 	rdlong	local06, objptr
09a90     14 27 02 F6 | 	mov	local05, local06
09a94     01 26 66 F0 | 	shl	local05, #1
09a98     14 27 02 F1 | 	add	local05, local06
09a9c     02 26 66 F0 | 	shl	local05, #2
09aa0     03 00 00 FF 
09aa4     00 E4 85 F1 | 	sub	objptr, ##1536
09aa8     F2 26 02 F1 | 	add	local05, objptr
09aac     04 26 06 F1 | 	add	local05, #4
09ab0     13 2B 62 FC | 	wrlong	local07, local05
09ab4     03 00 00 FF 
09ab8     00 E4 05 F1 | 	add	objptr, ##1536
09abc     F2 2A 02 FB | 	rdlong	local07, objptr
09ac0     15 29 02 F6 | 	mov	local06, local07
09ac4     01 28 66 F0 | 	shl	local06, #1
09ac8     15 29 02 F1 | 	add	local06, local07
09acc     02 28 66 F0 | 	shl	local06, #2
09ad0     03 00 00 FF 
09ad4     00 E4 85 F1 | 	sub	objptr, ##1536
09ad8     F2 28 02 F1 | 	add	local06, objptr
09adc     08 28 06 F1 | 	add	local06, #8
09ae0     14 1F 62 FC | 	wrlong	local01, local06
09ae4     03 00 00 FF 
09ae8     00 E4 05 F1 | 	add	objptr, ##1536
09aec     F2 28 02 FB | 	rdlong	local06, objptr
09af0     01 28 06 F1 | 	add	local06, #1
09af4     F2 28 62 FC | 	wrlong	local06, objptr
09af8     4A 00 00 FF 
09afc     7C E4 85 F1 | 	sub	objptr, ##38012
09b00     1D FA 05 F6 | 	mov	result1, #29
09b04     64 01 90 FD | 	jmp	#LR__0863
09b08                 | LR__0860
09b08     00 1E 06 F6 | 	mov	local01, #0
09b0c     68 01 B0 FD | 	call	#_addsub
09b10                 | ' t3.result.uresult=0
09b10                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
09b10                 | ' if err>0 then return err
09b10     01 FA 15 F2 | 	cmp	result1, #1 wc
09b14     54 01 90 3D |  if_ae	jmp	#LR__0863
09b18     37 00 00 FF 
09b1c     44 E4 05 F1 | 	add	objptr, ##28228
09b20     F2 24 02 FB | 	rdlong	local04, objptr
09b24     03 24 66 F0 | 	shl	local04, #3
09b28     02 00 00 FF 
09b2c     38 E4 85 F1 | 	sub	objptr, ##1080
09b30     F2 24 02 F1 | 	add	local04, objptr
09b34     04 24 06 F1 | 	add	local04, #4
09b38     12 27 02 FB | 	rdlong	local05, local04
09b3c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
09b3c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09b3c     35 00 00 FF 
09b40     0C E4 85 F1 | 	sub	objptr, ##27148
09b44                 | LR__0861
09b44     1B 26 0E F2 | 	cmp	local05, #27 wz
09b48     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09b4c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09b50     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09b54     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09b58     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09b5c     08 01 90 5D |  if_ne	jmp	#LR__0862
09b60     37 00 00 FF 
09b64     44 E4 05 F1 | 	add	objptr, ##28228
09b68     F2 28 02 FB | 	rdlong	local06, objptr
09b6c     01 28 06 F1 | 	add	local06, #1
09b70     F2 28 62 FC | 	wrlong	local06, objptr
09b74     37 00 00 FF 
09b78     44 E4 85 F1 | 	sub	objptr, ##28228
09b7c     F8 00 B0 FD | 	call	#_addsub
09b80                 | '   ct+=1
09b80                 | '   err=addsub() : if err>0 then return err
09b80     01 FA 15 F2 | 	cmp	result1, #1 wc
09b84     E4 00 90 3D |  if_ae	jmp	#LR__0863
09b88     13 23 02 F6 | 	mov	local03, local05
09b8c     0F 29 02 F6 | 	mov	local06, local01
09b90     10 2B 02 F6 | 	mov	local07, local02
09b94     11 27 02 F6 | 	mov	local05, local03
09b98     4A 00 00 FF 
09b9c     7C E4 05 F1 | 	add	objptr, ##38012
09ba0     F2 24 02 FB | 	rdlong	local04, objptr
09ba4     12 FB 01 F6 | 	mov	result1, local04
09ba8     01 FA 65 F0 | 	shl	result1, #1
09bac     12 FB 01 F1 | 	add	result1, local04
09bb0     02 FA 65 F0 | 	shl	result1, #2
09bb4     03 00 00 FF 
09bb8     00 E4 85 F1 | 	sub	objptr, ##1536
09bbc     F2 FA 01 F1 | 	add	result1, objptr
09bc0     FD 28 62 FC | 	wrlong	local06, result1
09bc4     03 00 00 FF 
09bc8     00 E4 05 F1 | 	add	objptr, ##1536
09bcc     F2 28 02 FB | 	rdlong	local06, objptr
09bd0     14 25 02 F6 | 	mov	local04, local06
09bd4     01 24 66 F0 | 	shl	local04, #1
09bd8     14 25 02 F1 | 	add	local04, local06
09bdc     02 24 66 F0 | 	shl	local04, #2
09be0     03 00 00 FF 
09be4     00 E4 85 F1 | 	sub	objptr, ##1536
09be8     F2 24 02 F1 | 	add	local04, objptr
09bec     04 24 06 F1 | 	add	local04, #4
09bf0     12 2B 62 FC | 	wrlong	local07, local04
09bf4     03 00 00 FF 
09bf8     00 E4 05 F1 | 	add	objptr, ##1536
09bfc     F2 2A 02 FB | 	rdlong	local07, objptr
09c00     15 29 02 F6 | 	mov	local06, local07
09c04     01 28 66 F0 | 	shl	local06, #1
09c08     15 29 02 F1 | 	add	local06, local07
09c0c     02 28 66 F0 | 	shl	local06, #2
09c10     03 00 00 FF 
09c14     00 E4 85 F1 | 	sub	objptr, ##1536
09c18     F2 28 02 F1 | 	add	local06, objptr
09c1c     08 28 06 F1 | 	add	local06, #8
09c20     14 27 62 FC | 	wrlong	local05, local06
09c24     03 00 00 FF 
09c28     00 E4 05 F1 | 	add	objptr, ##1536
09c2c     F2 28 02 FB | 	rdlong	local06, objptr
09c30     01 28 06 F1 | 	add	local06, #1
09c34     F2 28 62 FC | 	wrlong	local06, objptr
09c38     13 00 00 FF 
09c3c     38 E4 85 F1 | 	sub	objptr, ##9784
09c40     F2 24 02 FB | 	rdlong	local04, objptr
09c44     03 24 66 F0 | 	shl	local04, #3
09c48     02 00 00 FF 
09c4c     38 E4 85 F1 | 	sub	objptr, ##1080
09c50     F2 24 02 F1 | 	add	local04, objptr
09c54     04 24 06 F1 | 	add	local04, #4
09c58     12 27 02 FB | 	rdlong	local05, local04
09c5c     35 00 00 FF 
09c60     0C E4 85 F1 | 	sub	objptr, ##27148
09c64     DC FE 9F FD | 	jmp	#LR__0861
09c68                 | LR__0862
09c68                 | ' return 0  
09c68     00 FA 05 F6 | 	mov	result1, #0
09c6c                 | LR__0863
09c6c     A7 F0 03 F6 | 	mov	ptra, fp
09c70     B2 00 A0 FD | 	call	#popregs_
09c74                 | _expr_ret
09c74     2D 00 64 FD | 	ret
09c78                 | 
09c78                 | ' 
09c78                 | ' ' Second level operators : add, sub, logic
09c78                 | ' 
09c78                 | ' function addsub() as ulong
09c78                 | _addsub
09c78     07 4A 05 F6 | 	mov	COUNT_, #7
09c7c     A8 00 A0 FD | 	call	#pushregs_
09c80                 | _addsub_enter
09c80     00 1E 06 F6 | 	mov	local01, #0
09c84     60 01 B0 FD | 	call	#_muldiv
09c88                 | ' 
09c88                 | ' t3.result.uresult=0
09c88                 | ' err=muldiv() : if err>0 then return err           			 
09c88     01 FA 15 F2 | 	cmp	result1, #1 wc
09c8c     4C 01 90 3D |  if_ae	jmp	#LR__0872
09c90     37 00 00 FF 
09c94     44 E4 05 F1 | 	add	objptr, ##28228
09c98     F2 24 02 FB | 	rdlong	local04, objptr
09c9c     03 24 66 F0 | 	shl	local04, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 24 02 F1 | 	add	local04, objptr
09cac     04 24 06 F1 | 	add	local04, #4
09cb0     12 27 02 FB | 	rdlong	local05, local04
09cb4                 | ' op = lparts(ct).token				 
09cb4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09cb4     35 00 00 FF 
09cb8     0C E4 85 F1 | 	sub	objptr, ##27148
09cbc                 | LR__0870
09cbc     01 26 0E F2 | 	cmp	local05, #1 wz
09cc0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09cc4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09cc8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09ccc     08 01 90 5D |  if_ne	jmp	#LR__0871
09cd0     37 00 00 FF 
09cd4     44 E4 05 F1 | 	add	objptr, ##28228
09cd8     F2 24 02 FB | 	rdlong	local04, objptr
09cdc     01 24 06 F1 | 	add	local04, #1
09ce0     F2 24 62 FC | 	wrlong	local04, objptr
09ce4     37 00 00 FF 
09ce8     44 E4 85 F1 | 	sub	objptr, ##28228
09cec     F8 00 B0 FD | 	call	#_muldiv
09cf0                 | '   ct+=1
09cf0                 | '   err=muldiv() : if err>0 then return err   
09cf0     01 FA 15 F2 | 	cmp	result1, #1 wc
09cf4     E4 00 90 3D |  if_ae	jmp	#LR__0872
09cf8     13 23 02 F6 | 	mov	local03, local05
09cfc     0F 29 02 F6 | 	mov	local06, local01
09d00     10 2B 02 F6 | 	mov	local07, local02
09d04     11 27 02 F6 | 	mov	local05, local03
09d08     4A 00 00 FF 
09d0c     7C E4 05 F1 | 	add	objptr, ##38012
09d10     F2 24 02 FB | 	rdlong	local04, objptr
09d14     12 FB 01 F6 | 	mov	result1, local04
09d18     01 FA 65 F0 | 	shl	result1, #1
09d1c     12 FB 01 F1 | 	add	result1, local04
09d20     02 FA 65 F0 | 	shl	result1, #2
09d24     03 00 00 FF 
09d28     00 E4 85 F1 | 	sub	objptr, ##1536
09d2c     F2 FA 01 F1 | 	add	result1, objptr
09d30     FD 28 62 FC | 	wrlong	local06, result1
09d34     03 00 00 FF 
09d38     00 E4 05 F1 | 	add	objptr, ##1536
09d3c     F2 28 02 FB | 	rdlong	local06, objptr
09d40     14 25 02 F6 | 	mov	local04, local06
09d44     01 24 66 F0 | 	shl	local04, #1
09d48     14 25 02 F1 | 	add	local04, local06
09d4c     02 24 66 F0 | 	shl	local04, #2
09d50     03 00 00 FF 
09d54     00 E4 85 F1 | 	sub	objptr, ##1536
09d58     F2 24 02 F1 | 	add	local04, objptr
09d5c     04 24 06 F1 | 	add	local04, #4
09d60     12 2B 62 FC | 	wrlong	local07, local04
09d64     03 00 00 FF 
09d68     00 E4 05 F1 | 	add	objptr, ##1536
09d6c     F2 2A 02 FB | 	rdlong	local07, objptr
09d70     15 29 02 F6 | 	mov	local06, local07
09d74     01 28 66 F0 | 	shl	local06, #1
09d78     15 29 02 F1 | 	add	local06, local07
09d7c     02 28 66 F0 | 	shl	local06, #2
09d80     03 00 00 FF 
09d84     00 E4 85 F1 | 	sub	objptr, ##1536
09d88     F2 28 02 F1 | 	add	local06, objptr
09d8c     08 28 06 F1 | 	add	local06, #8
09d90     14 27 62 FC | 	wrlong	local05, local06
09d94     03 00 00 FF 
09d98     00 E4 05 F1 | 	add	objptr, ##1536
09d9c     F2 28 02 FB | 	rdlong	local06, objptr
09da0     01 28 06 F1 | 	add	local06, #1
09da4     F2 28 62 FC | 	wrlong	local06, objptr
09da8     13 00 00 FF 
09dac     38 E4 85 F1 | 	sub	objptr, ##9784
09db0     F2 24 02 FB | 	rdlong	local04, objptr
09db4     03 24 66 F0 | 	shl	local04, #3
09db8     02 00 00 FF 
09dbc     38 E4 85 F1 | 	sub	objptr, ##1080
09dc0     F2 24 02 F1 | 	add	local04, objptr
09dc4     04 24 06 F1 | 	add	local04, #4
09dc8     12 27 02 FB | 	rdlong	local05, local04
09dcc     35 00 00 FF 
09dd0     0C E4 85 F1 | 	sub	objptr, ##27148
09dd4     E4 FE 9F FD | 	jmp	#LR__0870
09dd8                 | LR__0871
09dd8                 | ' return 0
09dd8     00 FA 05 F6 | 	mov	result1, #0
09ddc                 | LR__0872
09ddc     A7 F0 03 F6 | 	mov	ptra, fp
09de0     B2 00 A0 FD | 	call	#popregs_
09de4                 | _addsub_ret
09de4     2D 00 64 FD | 	ret
09de8                 | 
09de8                 | ' 
09de8                 | ' ' Third level operators : mul,div,shift,power
09de8                 | ' 
09de8                 | ' function muldiv() as ulong
09de8                 | _muldiv
09de8     07 4A 05 F6 | 	mov	COUNT_, #7
09dec     A8 00 A0 FD | 	call	#pushregs_
09df0                 | _muldiv_enter
09df0     00 1E 06 F6 | 	mov	local01, #0
09df4     6C 01 B0 FD | 	call	#_getvalue
09df8                 | ' 
09df8                 | ' t3.result.uresult=0
09df8                 | ' err=getvalue() : if err>0 then return err     
09df8     01 FA 15 F2 | 	cmp	result1, #1 wc
09dfc     58 01 90 3D |  if_ae	jmp	#LR__0882
09e00     37 00 00 FF 
09e04     44 E4 05 F1 | 	add	objptr, ##28228
09e08     F2 24 02 FB | 	rdlong	local04, objptr
09e0c     03 24 66 F0 | 	shl	local04, #3
09e10     02 00 00 FF 
09e14     38 E4 85 F1 | 	sub	objptr, ##1080
09e18     F2 24 02 F1 | 	add	local04, objptr
09e1c     04 24 06 F1 | 	add	local04, #4
09e20     12 27 02 FB | 	rdlong	local05, local04
09e24                 | ' op = lparts(ct).token
09e24                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09e24     35 00 00 FF 
09e28     0C E4 85 F1 | 	sub	objptr, ##27148
09e2c                 | LR__0880
09e2c     05 26 0E F2 | 	cmp	local05, #5 wz
09e30     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09e34     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09e38     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09e3c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09e40     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09e44     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09e48     08 01 90 5D |  if_ne	jmp	#LR__0881
09e4c     37 00 00 FF 
09e50     44 E4 05 F1 | 	add	objptr, ##28228
09e54     F2 24 02 FB | 	rdlong	local04, objptr
09e58     01 24 06 F1 | 	add	local04, #1
09e5c     F2 24 62 FC | 	wrlong	local04, objptr
09e60     37 00 00 FF 
09e64     44 E4 85 F1 | 	sub	objptr, ##28228
09e68     F8 00 B0 FD | 	call	#_getvalue
09e6c                 | '   ct+=1
09e6c                 | '   err=getvalue() :if err>0 then return err   
09e6c     01 FA 15 F2 | 	cmp	result1, #1 wc
09e70     E4 00 90 3D |  if_ae	jmp	#LR__0882
09e74     13 23 02 F6 | 	mov	local03, local05
09e78     0F 29 02 F6 | 	mov	local06, local01
09e7c     10 2B 02 F6 | 	mov	local07, local02
09e80     11 27 02 F6 | 	mov	local05, local03
09e84     4A 00 00 FF 
09e88     7C E4 05 F1 | 	add	objptr, ##38012
09e8c     F2 24 02 FB | 	rdlong	local04, objptr
09e90     12 FB 01 F6 | 	mov	result1, local04
09e94     01 FA 65 F0 | 	shl	result1, #1
09e98     12 FB 01 F1 | 	add	result1, local04
09e9c     02 FA 65 F0 | 	shl	result1, #2
09ea0     03 00 00 FF 
09ea4     00 E4 85 F1 | 	sub	objptr, ##1536
09ea8     F2 FA 01 F1 | 	add	result1, objptr
09eac     FD 28 62 FC | 	wrlong	local06, result1
09eb0     03 00 00 FF 
09eb4     00 E4 05 F1 | 	add	objptr, ##1536
09eb8     F2 28 02 FB | 	rdlong	local06, objptr
09ebc     14 25 02 F6 | 	mov	local04, local06
09ec0     01 24 66 F0 | 	shl	local04, #1
09ec4     14 25 02 F1 | 	add	local04, local06
09ec8     02 24 66 F0 | 	shl	local04, #2
09ecc     03 00 00 FF 
09ed0     00 E4 85 F1 | 	sub	objptr, ##1536
09ed4     F2 24 02 F1 | 	add	local04, objptr
09ed8     04 24 06 F1 | 	add	local04, #4
09edc     12 2B 62 FC | 	wrlong	local07, local04
09ee0     03 00 00 FF 
09ee4     00 E4 05 F1 | 	add	objptr, ##1536
09ee8     F2 2A 02 FB | 	rdlong	local07, objptr
09eec     15 29 02 F6 | 	mov	local06, local07
09ef0     01 28 66 F0 | 	shl	local06, #1
09ef4     15 29 02 F1 | 	add	local06, local07
09ef8     02 28 66 F0 | 	shl	local06, #2
09efc     03 00 00 FF 
09f00     00 E4 85 F1 | 	sub	objptr, ##1536
09f04     F2 28 02 F1 | 	add	local06, objptr
09f08     08 28 06 F1 | 	add	local06, #8
09f0c     14 27 62 FC | 	wrlong	local05, local06
09f10     03 00 00 FF 
09f14     00 E4 05 F1 | 	add	objptr, ##1536
09f18     F2 28 02 FB | 	rdlong	local06, objptr
09f1c     01 28 06 F1 | 	add	local06, #1
09f20     F2 28 62 FC | 	wrlong	local06, objptr
09f24     13 00 00 FF 
09f28     38 E4 85 F1 | 	sub	objptr, ##9784
09f2c     F2 24 02 FB | 	rdlong	local04, objptr
09f30     03 24 66 F0 | 	shl	local04, #3
09f34     02 00 00 FF 
09f38     38 E4 85 F1 | 	sub	objptr, ##1080
09f3c     F2 24 02 F1 | 	add	local04, objptr
09f40     04 24 06 F1 | 	add	local04, #4
09f44     12 27 02 FB | 	rdlong	local05, local04
09f48     35 00 00 FF 
09f4c     0C E4 85 F1 | 	sub	objptr, ##27148
09f50     D8 FE 9F FD | 	jmp	#LR__0880
09f54                 | LR__0881
09f54                 | ' return 0
09f54     00 FA 05 F6 | 	mov	result1, #0
09f58                 | LR__0882
09f58     A7 F0 03 F6 | 	mov	ptra, fp
09f5c     B2 00 A0 FD | 	call	#popregs_
09f60                 | _muldiv_ret
09f60     2D 00 64 FD | 	ret
09f64                 | 
09f64                 | ' 
09f64                 | ' ' Get a value for operations
09f64                 | ' 
09f64                 | ' function getvalue()  as ulong
09f64                 | _getvalue
09f64     0B 4A 05 F6 | 	mov	COUNT_, #11
09f68     A8 00 A0 FD | 	call	#pushregs_
09f6c                 | _getvalue_enter
09f6c     01 24 06 F6 | 	mov	local04, #1
09f70     00 1E 06 F6 | 	mov	local01, #0
09f74     1D 22 06 F6 | 	mov	local03, #29
09f78     37 00 00 FF 
09f7c     44 E4 05 F1 | 	add	objptr, ##28228
09f80     F2 16 02 FB | 	rdlong	arg03, objptr
09f84     03 16 66 F0 | 	shl	arg03, #3
09f88     02 00 00 FF 
09f8c     38 E4 85 F1 | 	sub	objptr, ##1080
09f90     F2 16 02 F1 | 	add	arg03, objptr
09f94     04 16 06 F1 | 	add	arg03, #4
09f98     0B 27 02 FB | 	rdlong	local05, arg03
09f9c                 | ' 
09f9c                 | ' m=1											' for negative numbers
09f9c                 | ' t1.result.uresult=0: t1.result_type=result_uint
09f9c                 | ' op=lparts(ct).token
09f9c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
09f9c     02 26 0E F2 | 	cmp	local05, #2 wz
09fa0     35 00 00 FF 
09fa4     0C E4 85 F1 | 	sub	objptr, ##27148
09fa8     38 00 90 5D |  if_ne	jmp	#LR__0890
09fac     01 24 66 F6 | 	neg	local04, #1
09fb0     37 00 00 FF 
09fb4     44 E4 05 F1 | 	add	objptr, ##28228
09fb8     F2 26 02 FB | 	rdlong	local05, objptr
09fbc     01 26 06 F1 | 	add	local05, #1
09fc0     F2 26 62 FC | 	wrlong	local05, objptr
09fc4     03 26 66 F0 | 	shl	local05, #3
09fc8     02 00 00 FF 
09fcc     38 E4 85 F1 | 	sub	objptr, ##1080
09fd0     F2 26 02 F1 | 	add	local05, objptr
09fd4     04 26 06 F1 | 	add	local05, #4
09fd8     13 27 02 FB | 	rdlong	local05, local05
09fdc     35 00 00 FF 
09fe0     0C E4 85 F1 | 	sub	objptr, ##27148
09fe4                 | LR__0890
09fe4                 | ' select case op
09fe4     01 00 00 FF 
09fe8     00 26 0E F2 | 	cmp	local05, ##512 wz
09fec     44 00 90 AD |  if_e	jmp	#LR__0891
09ff0     01 00 00 FF 
09ff4     01 26 0E F2 | 	cmp	local05, ##513 wz
09ff8     90 01 90 AD |  if_e	jmp	#LR__0894
09ffc     01 00 00 FF 
0a000     02 26 0E F2 | 	cmp	local05, ##514 wz
0a004     44 04 90 AD |  if_e	jmp	#LR__0901
0a008     01 00 00 FF 
0a00c     03 26 0E F2 | 	cmp	local05, ##515 wz
0a010     A8 05 90 AD |  if_e	jmp	#LR__0904
0a014     2C 26 0E F2 | 	cmp	local05, #44 wz
0a018     78 07 90 AD |  if_e	jmp	#LR__0909
0a01c     01 00 00 FF 
0a020     04 26 0E F2 | 	cmp	local05, ##516 wz
0a024     70 08 90 AD |  if_e	jmp	#LR__0910
0a028     15 26 0E F2 | 	cmp	local05, #21 wz
0a02c     98 08 90 AD |  if_e	jmp	#LR__0911
0a030     10 09 90 FD | 	jmp	#LR__0912
0a034                 | LR__0891
0a034                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a034     01 24 0E F2 | 	cmp	local04, #1 wz
0a038     3C 00 90 5D |  if_ne	jmp	#LR__0892
0a03c     37 00 00 FF 
0a040     44 E4 05 F1 | 	add	objptr, ##28228
0a044     F2 26 02 FB | 	rdlong	local05, objptr
0a048     03 26 66 F0 | 	shl	local05, #3
0a04c     02 00 00 FF 
0a050     38 E4 85 F1 | 	sub	objptr, ##1080
0a054     F2 26 02 F1 | 	add	local05, objptr
0a058     13 13 02 FB | 	rdlong	arg01, local05
0a05c     00 14 06 F6 | 	mov	arg02, #0
0a060     35 00 00 FF 
0a064     0C E4 85 F1 | 	sub	objptr, ##27148
0a068     C4 9C B1 FD | 	call	#__system____builtin_atoi
0a06c     FD 24 02 FD | 	qmul	local04, result1
0a070     18 1E 62 FD | 	getqx	local01
0a074     1C 22 06 F6 | 	mov	local03, #28
0a078                 | LR__0892
0a078                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a078     FF FF 7F FF 
0a07c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a080     3C 00 90 5D |  if_ne	jmp	#LR__0893
0a084     37 00 00 FF 
0a088     44 E4 05 F1 | 	add	objptr, ##28228
0a08c     F2 26 02 FB | 	rdlong	local05, objptr
0a090     03 26 66 F0 | 	shl	local05, #3
0a094     02 00 00 FF 
0a098     38 E4 85 F1 | 	sub	objptr, ##1080
0a09c     F2 26 02 F1 | 	add	local05, objptr
0a0a0     13 13 02 FB | 	rdlong	arg01, local05
0a0a4     00 14 06 F6 | 	mov	arg02, #0
0a0a8     35 00 00 FF 
0a0ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a0b0     7C 9C B1 FD | 	call	#__system____builtin_atoi
0a0b4     FD 24 02 FD | 	qmul	local04, result1
0a0b8     18 1E 62 FD | 	getqx	local01
0a0bc     1C 22 06 F6 | 	mov	local03, #28
0a0c0                 | LR__0893
0a0c0     0F 29 02 F6 | 	mov	local06, local01
0a0c4     10 2B 02 F6 | 	mov	local07, local02
0a0c8     11 27 02 F6 | 	mov	local05, local03
0a0cc     4A 00 00 FF 
0a0d0     7C E4 05 F1 | 	add	objptr, ##38012
0a0d4     F2 1E 02 FB | 	rdlong	local01, objptr
0a0d8     0F 25 02 F6 | 	mov	local04, local01
0a0dc     01 24 66 F0 | 	shl	local04, #1
0a0e0     0F 25 02 F1 | 	add	local04, local01
0a0e4     02 24 66 F0 | 	shl	local04, #2
0a0e8     03 00 00 FF 
0a0ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a0f0     F2 24 02 F1 | 	add	local04, objptr
0a0f4     12 29 62 FC | 	wrlong	local06, local04
0a0f8     03 00 00 FF 
0a0fc     00 E4 05 F1 | 	add	objptr, ##1536
0a100     F2 28 02 FB | 	rdlong	local06, objptr
0a104     14 1F 02 F6 | 	mov	local01, local06
0a108     01 1E 66 F0 | 	shl	local01, #1
0a10c     14 1F 02 F1 | 	add	local01, local06
0a110     02 1E 66 F0 | 	shl	local01, #2
0a114     03 00 00 FF 
0a118     00 E4 85 F1 | 	sub	objptr, ##1536
0a11c     F2 1E 02 F1 | 	add	local01, objptr
0a120     04 1E 06 F1 | 	add	local01, #4
0a124     0F 2B 62 FC | 	wrlong	local07, local01
0a128     03 00 00 FF 
0a12c     00 E4 05 F1 | 	add	objptr, ##1536
0a130     F2 2A 02 FB | 	rdlong	local07, objptr
0a134     15 29 02 F6 | 	mov	local06, local07
0a138     01 28 66 F0 | 	shl	local06, #1
0a13c     15 29 02 F1 | 	add	local06, local07
0a140     02 28 66 F0 | 	shl	local06, #2
0a144     03 00 00 FF 
0a148     00 E4 85 F1 | 	sub	objptr, ##1536
0a14c     F2 28 02 F1 | 	add	local06, objptr
0a150     08 28 06 F1 | 	add	local06, #8
0a154     14 27 62 FC | 	wrlong	local05, local06
0a158     03 00 00 FF 
0a15c     00 E4 05 F1 | 	add	objptr, ##1536
0a160     F2 28 02 FB | 	rdlong	local06, objptr
0a164     01 28 06 F1 | 	add	local06, #1
0a168     F2 28 62 FC | 	wrlong	local06, objptr
0a16c     13 00 00 FF 
0a170     38 E4 85 F1 | 	sub	objptr, ##9784
0a174     F2 28 02 FB | 	rdlong	local06, objptr
0a178     01 28 06 F1 | 	add	local06, #1
0a17c     F2 28 62 FC | 	wrlong	local06, objptr
0a180     37 00 00 FF 
0a184     44 E4 85 F1 | 	sub	objptr, ##28228
0a188     E4 07 90 FD | 	jmp	#LR__0913
0a18c                 | LR__0894
0a18c                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a18c     37 00 00 FF 
0a190     44 E4 05 F1 | 	add	objptr, ##28228
0a194     F2 16 02 FB | 	rdlong	arg03, objptr
0a198     03 16 66 F0 | 	shl	arg03, #3
0a19c     02 00 00 FF 
0a1a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a1a4     F2 16 02 F1 | 	add	arg03, objptr
0a1a8     0B 13 02 FB | 	rdlong	arg01, arg03
0a1ac     01 14 06 F6 | 	mov	arg02, #1
0a1b0     35 00 00 FF 
0a1b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a1b8     C4 89 B1 FD | 	call	#__system__Left_S
0a1bc     FD 12 02 F6 | 	mov	arg01, result1
0a1c0     84 01 00 FF 
0a1c4     F9 15 06 F6 | 	mov	arg02, ##@LR__5439
0a1c8     60 69 B1 FD | 	call	#__system___string_cmp
0a1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1d0     94 00 90 5D |  if_ne	jmp	#LR__0897
0a1d4     37 00 00 FF 
0a1d8     44 E4 05 F1 | 	add	objptr, ##28228
0a1dc     F2 2A 02 FB | 	rdlong	local07, objptr
0a1e0     15 29 02 F6 | 	mov	local06, local07
0a1e4     03 28 66 F0 | 	shl	local06, #3
0a1e8     02 00 00 FF 
0a1ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a1f0     F2 28 02 F1 | 	add	local06, objptr
0a1f4     84 01 00 FF 
0a1f8     FB 27 06 F6 | 	mov	local05, ##@LR__5440
0a1fc     03 2A 66 F0 | 	shl	local07, #3
0a200     F2 2A 02 F1 | 	add	local07, objptr
0a204     15 2B 02 FB | 	rdlong	local07, local07
0a208     02 00 00 FF 
0a20c     38 E4 05 F1 | 	add	objptr, ##1080
0a210     F2 1E 02 FB | 	rdlong	local01, objptr
0a214     03 1E 66 F0 | 	shl	local01, #3
0a218     02 00 00 FF 
0a21c     38 E4 85 F1 | 	sub	objptr, ##1080
0a220     F2 1E 02 F1 | 	add	local01, objptr
0a224     0F 13 02 FB | 	rdlong	arg01, local01
0a228     35 00 00 FF 
0a22c     0C E4 85 F1 | 	sub	objptr, ##27148
0a230     09 2D 02 F6 | 	mov	local08, arg01
0a234     97 06 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0a238                 | LR__0895
0a238     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a23c     01 2C 06 51 |  if_ne	add	local08, #1
0a240     F4 FF 9F 5D |  if_ne	jmp	#LR__0895
0a244                 | LR__0896
0a244     09 2D 82 F1 | 	sub	local08, arg01
0a248     16 15 02 F6 | 	mov	arg02, local08
0a24c     01 14 86 F1 | 	sub	arg02, #1
0a250     15 13 02 F6 | 	mov	arg01, local07
0a254     B0 89 B1 FD | 	call	#__system__Right_S
0a258     FD 14 02 F6 | 	mov	arg02, result1
0a25c     13 13 02 F6 | 	mov	arg01, local05
0a260     FC 68 B1 FD | 	call	#__system___string_concat
0a264     14 FB 61 FC | 	wrlong	result1, local06
0a268                 | LR__0897
0a268                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a268     37 00 00 FF 
0a26c     44 E4 05 F1 | 	add	objptr, ##28228
0a270     F2 16 02 FB | 	rdlong	arg03, objptr
0a274     03 16 66 F0 | 	shl	arg03, #3
0a278     02 00 00 FF 
0a27c     38 E4 85 F1 | 	sub	objptr, ##1080
0a280     F2 16 02 F1 | 	add	arg03, objptr
0a284     0B 13 02 FB | 	rdlong	arg01, arg03
0a288     01 14 06 F6 | 	mov	arg02, #1
0a28c     35 00 00 FF 
0a290     0C E4 85 F1 | 	sub	objptr, ##27148
0a294     E8 88 B1 FD | 	call	#__system__Left_S
0a298     FD 12 02 F6 | 	mov	arg01, result1
0a29c     84 01 00 FF 
0a2a0     FE 15 06 F6 | 	mov	arg02, ##@LR__5441
0a2a4     84 68 B1 FD | 	call	#__system___string_cmp
0a2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2ac     94 00 90 5D |  if_ne	jmp	#LR__0900
0a2b0     37 00 00 FF 
0a2b4     44 E4 05 F1 | 	add	objptr, ##28228
0a2b8     F2 2A 02 FB | 	rdlong	local07, objptr
0a2bc     15 29 02 F6 | 	mov	local06, local07
0a2c0     03 28 66 F0 | 	shl	local06, #3
0a2c4     02 00 00 FF 
0a2c8     38 E4 85 F1 | 	sub	objptr, ##1080
0a2cc     F2 28 02 F1 | 	add	local06, objptr
0a2d0     85 01 00 FF 
0a2d4     00 26 06 F6 | 	mov	local05, ##@LR__5442
0a2d8     03 2A 66 F0 | 	shl	local07, #3
0a2dc     F2 2A 02 F1 | 	add	local07, objptr
0a2e0     15 2B 02 FB | 	rdlong	local07, local07
0a2e4     02 00 00 FF 
0a2e8     38 E4 05 F1 | 	add	objptr, ##1080
0a2ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a2f0     03 1E 66 F0 | 	shl	local01, #3
0a2f4     02 00 00 FF 
0a2f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a2fc     F2 1E 02 F1 | 	add	local01, objptr
0a300     0F 13 02 FB | 	rdlong	arg01, local01
0a304     35 00 00 FF 
0a308     0C E4 85 F1 | 	sub	objptr, ##27148
0a30c     09 2D 02 F6 | 	mov	local08, arg01
0a310     97 06 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0a314                 | LR__0898
0a314     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a318     01 2C 06 51 |  if_ne	add	local08, #1
0a31c     F4 FF 9F 5D |  if_ne	jmp	#LR__0898
0a320                 | LR__0899
0a320     09 2D 82 F1 | 	sub	local08, arg01
0a324     16 15 02 F6 | 	mov	arg02, local08
0a328     01 14 86 F1 | 	sub	arg02, #1
0a32c     15 13 02 F6 | 	mov	arg01, local07
0a330     D4 88 B1 FD | 	call	#__system__Right_S
0a334     FD 14 02 F6 | 	mov	arg02, result1
0a338     13 13 02 F6 | 	mov	arg01, local05
0a33c     20 68 B1 FD | 	call	#__system___string_concat
0a340     14 FB 61 FC | 	wrlong	result1, local06
0a344                 | LR__0900
0a344     37 00 00 FF 
0a348     44 E4 05 F1 | 	add	objptr, ##28228
0a34c     F2 28 02 FB | 	rdlong	local06, objptr
0a350     03 28 66 F0 | 	shl	local06, #3
0a354     02 00 00 FF 
0a358     38 E4 85 F1 | 	sub	objptr, ##1080
0a35c     F2 28 02 F1 | 	add	local06, objptr
0a360     14 13 02 FB | 	rdlong	arg01, local06
0a364     00 14 06 F6 | 	mov	arg02, #0
0a368     35 00 00 FF 
0a36c     0C E4 85 F1 | 	sub	objptr, ##27148
0a370     BC 99 B1 FD | 	call	#__system____builtin_atoi
0a374     FD 24 02 FD | 	qmul	local04, result1
0a378     4A 00 00 FF 
0a37c     7C E4 05 F1 | 	add	objptr, ##38012
0a380     F2 28 02 FB | 	rdlong	local06, objptr
0a384     14 2F 02 F6 | 	mov	local09, local06
0a388     01 2E 66 F0 | 	shl	local09, #1
0a38c     14 2F 02 F1 | 	add	local09, local06
0a390     02 2E 66 F0 | 	shl	local09, #2
0a394     03 00 00 FF 
0a398     00 E4 85 F1 | 	sub	objptr, ##1536
0a39c     F2 2E 02 F1 | 	add	local09, objptr
0a3a0     03 00 00 FF 
0a3a4     00 E4 05 F1 | 	add	objptr, ##1536
0a3a8     18 1E 62 FD | 	getqx	local01
0a3ac     1C 22 06 F6 | 	mov	local03, #28
0a3b0     0F 29 02 F6 | 	mov	local06, local01
0a3b4     10 2B 02 F6 | 	mov	local07, local02
0a3b8     17 29 62 FC | 	wrlong	local06, local09
0a3bc     11 2F 02 F6 | 	mov	local09, local03
0a3c0     F2 28 02 FB | 	rdlong	local06, objptr
0a3c4     14 27 02 F6 | 	mov	local05, local06
0a3c8     01 26 66 F0 | 	shl	local05, #1
0a3cc     14 27 02 F1 | 	add	local05, local06
0a3d0     02 26 66 F0 | 	shl	local05, #2
0a3d4     03 00 00 FF 
0a3d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3dc     F2 26 02 F1 | 	add	local05, objptr
0a3e0     04 26 06 F1 | 	add	local05, #4
0a3e4     13 2B 62 FC | 	wrlong	local07, local05
0a3e8     03 00 00 FF 
0a3ec     00 E4 05 F1 | 	add	objptr, ##1536
0a3f0     F2 2A 02 FB | 	rdlong	local07, objptr
0a3f4     15 29 02 F6 | 	mov	local06, local07
0a3f8     01 28 66 F0 | 	shl	local06, #1
0a3fc     15 29 02 F1 | 	add	local06, local07
0a400     02 28 66 F0 | 	shl	local06, #2
0a404     03 00 00 FF 
0a408     00 E4 85 F1 | 	sub	objptr, ##1536
0a40c     F2 28 02 F1 | 	add	local06, objptr
0a410     08 28 06 F1 | 	add	local06, #8
0a414     14 2F 62 FC | 	wrlong	local09, local06
0a418     03 00 00 FF 
0a41c     00 E4 05 F1 | 	add	objptr, ##1536
0a420     F2 28 02 FB | 	rdlong	local06, objptr
0a424     01 28 06 F1 | 	add	local06, #1
0a428     F2 28 62 FC | 	wrlong	local06, objptr
0a42c     13 00 00 FF 
0a430     38 E4 85 F1 | 	sub	objptr, ##9784
0a434     F2 28 02 FB | 	rdlong	local06, objptr
0a438     01 28 06 F1 | 	add	local06, #1
0a43c     F2 28 62 FC | 	wrlong	local06, objptr
0a440     37 00 00 FF 
0a444     44 E4 85 F1 | 	sub	objptr, ##28228
0a448     24 05 90 FD | 	jmp	#LR__0913
0a44c                 | LR__0901
0a44c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a44c     01 24 0E F2 | 	cmp	local04, #1 wz
0a450     48 00 90 5D |  if_ne	jmp	#LR__0902
0a454     00 C0 1F FF 
0a458     00 28 06 F6 | 	mov	local06, ##1065353216
0a45c     37 00 00 FF 
0a460     44 E4 05 F1 | 	add	objptr, ##28228
0a464     F2 2E 02 FB | 	rdlong	local09, objptr
0a468     03 2E 66 F0 | 	shl	local09, #3
0a46c     02 00 00 FF 
0a470     38 E4 85 F1 | 	sub	objptr, ##1080
0a474     F2 2E 02 F1 | 	add	local09, objptr
0a478     17 13 02 FB | 	rdlong	arg01, local09
0a47c     35 00 00 FF 
0a480     0C E4 85 F1 | 	sub	objptr, ##27148
0a484     3C 9A B1 FD | 	call	#__system____builtin_atof
0a488     FD 14 02 F6 | 	mov	arg02, result1
0a48c     14 13 02 F6 | 	mov	arg01, local06
0a490     24 92 B1 FD | 	call	#__system___float_mul
0a494     FD 1E 02 F6 | 	mov	local01, result1
0a498     1E 22 06 F6 | 	mov	local03, #30
0a49c                 | LR__0902
0a49c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a49c     FF FF 7F FF 
0a4a0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a4a4     48 00 90 5D |  if_ne	jmp	#LR__0903
0a4a8     00 C0 5F FF 
0a4ac     00 28 06 F6 | 	mov	local06, ##-1082130432
0a4b0     37 00 00 FF 
0a4b4     44 E4 05 F1 | 	add	objptr, ##28228
0a4b8     F2 2E 02 FB | 	rdlong	local09, objptr
0a4bc     03 2E 66 F0 | 	shl	local09, #3
0a4c0     02 00 00 FF 
0a4c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4c8     F2 2E 02 F1 | 	add	local09, objptr
0a4cc     17 13 02 FB | 	rdlong	arg01, local09
0a4d0     35 00 00 FF 
0a4d4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4d8     E8 99 B1 FD | 	call	#__system____builtin_atof
0a4dc     FD 14 02 F6 | 	mov	arg02, result1
0a4e0     14 13 02 F6 | 	mov	arg01, local06
0a4e4     D0 91 B1 FD | 	call	#__system___float_mul
0a4e8     FD 1E 02 F6 | 	mov	local01, result1
0a4ec     1E 22 06 F6 | 	mov	local03, #30
0a4f0                 | LR__0903
0a4f0     0F 29 02 F6 | 	mov	local06, local01
0a4f4     10 2B 02 F6 | 	mov	local07, local02
0a4f8     11 27 02 F6 | 	mov	local05, local03
0a4fc     4A 00 00 FF 
0a500     7C E4 05 F1 | 	add	objptr, ##38012
0a504     F2 1E 02 FB | 	rdlong	local01, objptr
0a508     0F 2F 02 F6 | 	mov	local09, local01
0a50c     01 2E 66 F0 | 	shl	local09, #1
0a510     0F 2F 02 F1 | 	add	local09, local01
0a514     02 2E 66 F0 | 	shl	local09, #2
0a518     03 00 00 FF 
0a51c     00 E4 85 F1 | 	sub	objptr, ##1536
0a520     F2 2E 02 F1 | 	add	local09, objptr
0a524     17 29 62 FC | 	wrlong	local06, local09
0a528     03 00 00 FF 
0a52c     00 E4 05 F1 | 	add	objptr, ##1536
0a530     F2 2E 02 FB | 	rdlong	local09, objptr
0a534     17 29 02 F6 | 	mov	local06, local09
0a538     01 28 66 F0 | 	shl	local06, #1
0a53c     17 29 02 F1 | 	add	local06, local09
0a540     02 28 66 F0 | 	shl	local06, #2
0a544     03 00 00 FF 
0a548     00 E4 85 F1 | 	sub	objptr, ##1536
0a54c     F2 28 02 F1 | 	add	local06, objptr
0a550     04 28 06 F1 | 	add	local06, #4
0a554     14 2B 62 FC | 	wrlong	local07, local06
0a558     03 00 00 FF 
0a55c     00 E4 05 F1 | 	add	objptr, ##1536
0a560     F2 2E 02 FB | 	rdlong	local09, objptr
0a564     17 2B 02 F6 | 	mov	local07, local09
0a568     01 2A 66 F0 | 	shl	local07, #1
0a56c     17 2B 02 F1 | 	add	local07, local09
0a570     02 2A 66 F0 | 	shl	local07, #2
0a574     03 00 00 FF 
0a578     00 E4 85 F1 | 	sub	objptr, ##1536
0a57c     F2 2A 02 F1 | 	add	local07, objptr
0a580     08 2A 06 F1 | 	add	local07, #8
0a584     15 27 62 FC | 	wrlong	local05, local07
0a588     03 00 00 FF 
0a58c     00 E4 05 F1 | 	add	objptr, ##1536
0a590     F2 28 02 FB | 	rdlong	local06, objptr
0a594     01 28 06 F1 | 	add	local06, #1
0a598     F2 28 62 FC | 	wrlong	local06, objptr
0a59c     13 00 00 FF 
0a5a0     38 E4 85 F1 | 	sub	objptr, ##9784
0a5a4     F2 28 02 FB | 	rdlong	local06, objptr
0a5a8     01 28 06 F1 | 	add	local06, #1
0a5ac     F2 28 62 FC | 	wrlong	local06, objptr
0a5b0     37 00 00 FF 
0a5b4     44 E4 85 F1 | 	sub	objptr, ##28228
0a5b8     B4 03 90 FD | 	jmp	#LR__0913
0a5bc                 | LR__0904
0a5bc     37 00 00 FF 
0a5c0     44 E4 05 F1 | 	add	objptr, ##28228
0a5c4     F2 16 02 FB | 	rdlong	arg03, objptr
0a5c8     03 16 66 F0 | 	shl	arg03, #3
0a5cc     02 00 00 FF 
0a5d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a5d4     F2 16 02 F1 | 	add	arg03, objptr
0a5d8     0B 13 02 FB | 	rdlong	arg01, arg03
0a5dc     35 00 00 FF 
0a5e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a5e4     09 2D 02 F6 | 	mov	local08, arg01
0a5e8     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a5ec                 | LR__0905
0a5ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a5f0     01 2C 06 51 |  if_ne	add	local08, #1
0a5f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a5f8                 | LR__0906
0a5f8     09 2D 82 F1 | 	sub	local08, arg01
0a5fc     16 FB 01 F6 | 	mov	result1, local08
0a600     51 00 00 FF 
0a604     F0 E5 05 F1 | 	add	objptr, ##41968
0a608     F2 FA 61 FC | 	wrlong	result1, objptr
0a60c     48 E4 85 F1 | 	sub	objptr, #72
0a610     F2 12 02 FB | 	rdlong	arg01, objptr
0a614     FD 12 82 F1 | 	sub	arg01, result1
0a618     04 12 86 F1 | 	sub	arg01, #4
0a61c     03 12 26 F5 | 	andn	arg01, #3
0a620     F2 12 62 FC | 	wrlong	arg01, objptr
0a624     48 E4 05 F1 | 	add	objptr, #72
0a628     F2 14 02 FB | 	rdlong	arg02, objptr
0a62c     51 00 00 FF 
0a630     F0 E5 85 F1 | 	sub	objptr, ##41968
0a634     98 30 B1 FD | 	call	#_pslpoke
0a638                 | '     pslpoke memtop,l
0a638                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a638     01 30 06 F6 | 	mov	local10, #1
0a63c     51 00 00 FF 
0a640     F0 E5 05 F1 | 	add	objptr, ##41968
0a644     F2 32 02 FB | 	rdlong	local11, objptr
0a648     51 00 00 FF 
0a64c     F0 E5 85 F1 | 	sub	objptr, ##41968
0a650     01 32 06 F1 | 	add	local11, #1
0a654                 | LR__0907
0a654     19 31 52 F2 | 	cmps	local10, local11 wc
0a658     5C 00 90 3D |  if_ae	jmp	#LR__0908
0a65c     51 00 00 FF 
0a660     A8 E5 05 F1 | 	add	objptr, ##41896
0a664     F2 2A 02 FB | 	rdlong	local07, objptr
0a668     03 2A 06 F1 | 	add	local07, #3
0a66c     18 2B 02 F1 | 	add	local07, local10
0a670     1A 00 00 FF 
0a674     64 E5 85 F1 | 	sub	objptr, ##13668
0a678     F2 2E 02 FB | 	rdlong	local09, objptr
0a67c     03 2E 66 F0 | 	shl	local09, #3
0a680     02 00 00 FF 
0a684     38 E4 85 F1 | 	sub	objptr, ##1080
0a688     F2 2E 02 F1 | 	add	local09, objptr
0a68c     17 13 02 FB | 	rdlong	arg01, local09
0a690     18 15 02 F6 | 	mov	arg02, local10
0a694     01 16 06 F6 | 	mov	arg03, #1
0a698     35 00 00 FF 
0a69c     0C E4 85 F1 | 	sub	objptr, ##27148
0a6a0     F4 85 B1 FD | 	call	#__system__Mid_S
0a6a4     FD 14 C2 FA | 	rdbyte	arg02, result1
0a6a8     15 13 02 F6 | 	mov	arg01, local07
0a6ac     B0 30 B1 FD | 	call	#_pspoke
0a6b0     01 30 06 F1 | 	add	local10, #1
0a6b4     9C FF 9F FD | 	jmp	#LR__0907
0a6b8                 | LR__0908
0a6b8     51 00 00 FF 
0a6bc     A8 E5 05 F1 | 	add	objptr, ##41896
0a6c0     F2 1E 02 FB | 	rdlong	local01, objptr
0a6c4     2B 22 06 F6 | 	mov	local03, #43
0a6c8     0F 29 02 F6 | 	mov	local06, local01
0a6cc     10 2B 02 F6 | 	mov	local07, local02
0a6d0     11 33 02 F6 | 	mov	local11, local03
0a6d4     07 00 00 FF 
0a6d8     2C E5 85 F1 | 	sub	objptr, ##3884
0a6dc     F2 30 02 FB | 	rdlong	local10, objptr
0a6e0     18 2F 02 F6 | 	mov	local09, local10
0a6e4     01 2E 66 F0 | 	shl	local09, #1
0a6e8     18 2F 02 F1 | 	add	local09, local10
0a6ec     02 2E 66 F0 | 	shl	local09, #2
0a6f0     03 00 00 FF 
0a6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f8     F2 2E 02 F1 | 	add	local09, objptr
0a6fc     17 29 62 FC | 	wrlong	local06, local09
0a700     03 00 00 FF 
0a704     00 E4 05 F1 | 	add	objptr, ##1536
0a708     F2 30 02 FB | 	rdlong	local10, objptr
0a70c     18 2F 02 F6 | 	mov	local09, local10
0a710     01 2E 66 F0 | 	shl	local09, #1
0a714     18 2F 02 F1 | 	add	local09, local10
0a718     02 2E 66 F0 | 	shl	local09, #2
0a71c     03 00 00 FF 
0a720     00 E4 85 F1 | 	sub	objptr, ##1536
0a724     F2 2E 02 F1 | 	add	local09, objptr
0a728     04 2E 06 F1 | 	add	local09, #4
0a72c     17 2B 62 FC | 	wrlong	local07, local09
0a730     03 00 00 FF 
0a734     00 E4 05 F1 | 	add	objptr, ##1536
0a738     F2 30 02 FB | 	rdlong	local10, objptr
0a73c     18 2F 02 F6 | 	mov	local09, local10
0a740     01 2E 66 F0 | 	shl	local09, #1
0a744     18 2F 02 F1 | 	add	local09, local10
0a748     02 2E 66 F0 | 	shl	local09, #2
0a74c     03 00 00 FF 
0a750     00 E4 85 F1 | 	sub	objptr, ##1536
0a754     F2 2E 02 F1 | 	add	local09, objptr
0a758     08 2E 06 F1 | 	add	local09, #8
0a75c     17 33 62 FC | 	wrlong	local11, local09
0a760     03 00 00 FF 
0a764     00 E4 05 F1 | 	add	objptr, ##1536
0a768     F2 28 02 FB | 	rdlong	local06, objptr
0a76c     01 28 06 F1 | 	add	local06, #1
0a770     F2 28 62 FC | 	wrlong	local06, objptr
0a774     13 00 00 FF 
0a778     38 E4 85 F1 | 	sub	objptr, ##9784
0a77c     F2 28 02 FB | 	rdlong	local06, objptr
0a780     01 28 06 F1 | 	add	local06, #1
0a784     F2 28 62 FC | 	wrlong	local06, objptr
0a788     37 00 00 FF 
0a78c     44 E4 85 F1 | 	sub	objptr, ##28228
0a790     DC 01 90 FD | 	jmp	#LR__0913
0a794                 | LR__0909
0a794     2C 22 06 F6 | 	mov	local03, #44
0a798     37 00 00 FF 
0a79c     44 E4 05 F1 | 	add	objptr, ##28228
0a7a0     F2 28 02 FB | 	rdlong	local06, objptr
0a7a4     03 28 66 F0 | 	shl	local06, #3
0a7a8     02 00 00 FF 
0a7ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a7b0     F2 28 02 F1 | 	add	local06, objptr
0a7b4     14 13 02 FB | 	rdlong	arg01, local06
0a7b8     00 14 06 F6 | 	mov	arg02, #0
0a7bc     35 00 00 FF 
0a7c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7c4     68 95 B1 FD | 	call	#__system____builtin_atoi
0a7c8     FD 1E 02 F6 | 	mov	local01, result1
0a7cc     0F 29 02 F6 | 	mov	local06, local01
0a7d0     10 2B 02 F6 | 	mov	local07, local02
0a7d4     11 33 02 F6 | 	mov	local11, local03
0a7d8     4A 00 00 FF 
0a7dc     7C E4 05 F1 | 	add	objptr, ##38012
0a7e0     F2 30 02 FB | 	rdlong	local10, objptr
0a7e4     18 2F 02 F6 | 	mov	local09, local10
0a7e8     01 2E 66 F0 | 	shl	local09, #1
0a7ec     18 2F 02 F1 | 	add	local09, local10
0a7f0     02 2E 66 F0 | 	shl	local09, #2
0a7f4     03 00 00 FF 
0a7f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7fc     F2 2E 02 F1 | 	add	local09, objptr
0a800     17 29 62 FC | 	wrlong	local06, local09
0a804     03 00 00 FF 
0a808     00 E4 05 F1 | 	add	objptr, ##1536
0a80c     F2 30 02 FB | 	rdlong	local10, objptr
0a810     18 2F 02 F6 | 	mov	local09, local10
0a814     01 2E 66 F0 | 	shl	local09, #1
0a818     18 2F 02 F1 | 	add	local09, local10
0a81c     02 2E 66 F0 | 	shl	local09, #2
0a820     03 00 00 FF 
0a824     00 E4 85 F1 | 	sub	objptr, ##1536
0a828     F2 2E 02 F1 | 	add	local09, objptr
0a82c     04 2E 06 F1 | 	add	local09, #4
0a830     17 2B 62 FC | 	wrlong	local07, local09
0a834     03 00 00 FF 
0a838     00 E4 05 F1 | 	add	objptr, ##1536
0a83c     F2 30 02 FB | 	rdlong	local10, objptr
0a840     18 2F 02 F6 | 	mov	local09, local10
0a844     01 2E 66 F0 | 	shl	local09, #1
0a848     18 2F 02 F1 | 	add	local09, local10
0a84c     02 2E 66 F0 | 	shl	local09, #2
0a850     03 00 00 FF 
0a854     00 E4 85 F1 | 	sub	objptr, ##1536
0a858     F2 2E 02 F1 | 	add	local09, objptr
0a85c     08 2E 06 F1 | 	add	local09, #8
0a860     17 33 62 FC | 	wrlong	local11, local09
0a864     03 00 00 FF 
0a868     00 E4 05 F1 | 	add	objptr, ##1536
0a86c     F2 28 02 FB | 	rdlong	local06, objptr
0a870     01 28 06 F1 | 	add	local06, #1
0a874     F2 28 62 FC | 	wrlong	local06, objptr
0a878     13 00 00 FF 
0a87c     38 E4 85 F1 | 	sub	objptr, ##9784
0a880     F2 28 02 FB | 	rdlong	local06, objptr
0a884     01 28 06 F1 | 	add	local06, #1
0a888     F2 28 62 FC | 	wrlong	local06, objptr
0a88c     37 00 00 FF 
0a890     44 E4 85 F1 | 	sub	objptr, ##28228
0a894     D8 00 90 FD | 	jmp	#LR__0913
0a898                 | LR__0910
0a898     12 13 02 F6 | 	mov	arg01, local04
0a89c     24 04 B0 FD | 	call	#_getvar
0a8a0     37 00 00 FF 
0a8a4     44 E4 05 F1 | 	add	objptr, ##28228
0a8a8     F2 28 02 FB | 	rdlong	local06, objptr
0a8ac     01 28 06 F1 | 	add	local06, #1
0a8b0     F2 28 62 FC | 	wrlong	local06, objptr
0a8b4     37 00 00 FF 
0a8b8     44 E4 85 F1 | 	sub	objptr, ##28228
0a8bc                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0a8bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0a8c0     B0 00 90 3D |  if_ae	jmp	#LR__0914
0a8c4     A8 00 90 FD | 	jmp	#LR__0913
0a8c8                 | LR__0911
0a8c8     37 00 00 FF 
0a8cc     44 E4 05 F1 | 	add	objptr, ##28228
0a8d0     F2 28 02 FB | 	rdlong	local06, objptr
0a8d4     01 28 06 F1 | 	add	local06, #1
0a8d8     F2 28 62 FC | 	wrlong	local06, objptr
0a8dc     37 00 00 FF 
0a8e0     44 E4 85 F1 | 	sub	objptr, ##28228
0a8e4     20 F1 BF FD | 	call	#_expr
0a8e8                 | '     ct+=1
0a8e8                 | '     err=expr() : if err>0 then return err 
0a8e8     01 FA 55 F2 | 	cmps	result1, #1 wc
0a8ec     84 00 90 3D |  if_ae	jmp	#LR__0914
0a8f0                 | '     if lparts(ct).token=token_rpar then ct+=1
0a8f0     37 00 00 FF 
0a8f4     44 E4 05 F1 | 	add	objptr, ##28228
0a8f8     F2 32 02 FB | 	rdlong	local11, objptr
0a8fc     03 32 66 F0 | 	shl	local11, #3
0a900     02 00 00 FF 
0a904     38 E4 85 F1 | 	sub	objptr, ##1080
0a908     F2 32 02 F1 | 	add	local11, objptr
0a90c     04 32 06 F1 | 	add	local11, #4
0a910     19 33 02 FB | 	rdlong	local11, local11
0a914     14 32 0E F2 | 	cmp	local11, #20 wz
0a918     35 00 00 FF 
0a91c     0C E4 85 F1 | 	sub	objptr, ##27148
0a920     4C 00 90 5D |  if_ne	jmp	#LR__0913
0a924     37 00 00 FF 
0a928     44 E4 05 F1 | 	add	objptr, ##28228
0a92c     F2 28 02 FB | 	rdlong	local06, objptr
0a930     01 28 06 F1 | 	add	local06, #1
0a934     F2 28 62 FC | 	wrlong	local06, objptr
0a938     37 00 00 FF 
0a93c     44 E4 85 F1 | 	sub	objptr, ##28228
0a940     2C 00 90 FD | 	jmp	#LR__0913
0a944                 | LR__0912
0a944     12 13 02 F6 | 	mov	arg01, local04
0a948     34 00 B0 FD | 	call	#_getfun
0a94c     37 00 00 FF 
0a950     44 E4 05 F1 | 	add	objptr, ##28228
0a954     F2 28 02 FB | 	rdlong	local06, objptr
0a958     01 28 06 F1 | 	add	local06, #1
0a95c     F2 28 62 FC | 	wrlong	local06, objptr
0a960     37 00 00 FF 
0a964     44 E4 85 F1 | 	sub	objptr, ##28228
0a968                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0a968     01 FA 55 F2 | 	cmps	result1, #1 wc
0a96c     04 00 90 3D |  if_ae	jmp	#LR__0914
0a970                 | LR__0913
0a970                 | ' return 0  
0a970     00 FA 05 F6 | 	mov	result1, #0
0a974                 | LR__0914
0a974     A7 F0 03 F6 | 	mov	ptra, fp
0a978     B2 00 A0 FD | 	call	#popregs_
0a97c                 | _getvalue_ret
0a97c     2D 00 64 FD | 	ret
0a980                 | 
0a980                 | ' 
0a980                 | ' ' Get a function result 
0a980                 | ' 
0a980                 | ' function getfun(m as integer) as ulong
0a980                 | _getfun
0a980     0F 4A 05 F6 | 	mov	COUNT_, #15
0a984     A8 00 A0 FD | 	call	#pushregs_
0a988                 | _getfun_enter
0a988     09 25 02 F6 | 	mov	local04, arg01
0a98c     37 00 00 FF 
0a990     44 E4 05 F1 | 	add	objptr, ##28228
0a994     F2 26 02 FB | 	rdlong	local05, objptr
0a998     13 29 02 F6 | 	mov	local06, local05
0a99c     00 2A 06 F6 | 	mov	local07, #0
0a9a0                 | ' oldct=ct
0a9a0                 | ' numpar=0
0a9a0                 | ' if lparts(ct+1).token=token_lpar then
0a9a0     01 26 06 F1 | 	add	local05, #1
0a9a4     03 26 66 F0 | 	shl	local05, #3
0a9a8     02 00 00 FF 
0a9ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a9b0     F2 26 02 F1 | 	add	local05, objptr
0a9b4     04 26 06 F1 | 	add	local05, #4
0a9b8     13 27 02 FB | 	rdlong	local05, local05
0a9bc     15 26 0E F2 | 	cmp	local05, #21 wz
0a9c0     35 00 00 FF 
0a9c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a9c8     54 01 90 5D |  if_ne	jmp	#LR__0924
0a9cc     37 00 00 FF 
0a9d0     44 E4 05 F1 | 	add	objptr, ##28228
0a9d4     F2 2C 02 FB | 	rdlong	local08, objptr
0a9d8     01 2C 06 F1 | 	add	local08, #1
0a9dc     F2 2C 62 FC | 	wrlong	local08, objptr
0a9e0     37 00 00 FF 
0a9e4     44 E4 85 F1 | 	sub	objptr, ##28228
0a9e8                 | '   ct+=1 											' omit this lpar, this is for expr list
0a9e8                 | '   do
0a9e8                 | LR__0920
0a9e8     37 00 00 FF 
0a9ec     44 E4 05 F1 | 	add	objptr, ##28228
0a9f0     F2 26 02 FB | 	rdlong	local05, objptr
0a9f4     01 26 06 F1 | 	add	local05, #1
0a9f8     F2 26 62 FC | 	wrlong	local05, objptr
0a9fc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a9fc                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0a9fc     03 26 66 F0 | 	shl	local05, #3
0aa00     02 00 00 FF 
0aa04     38 E4 85 F1 | 	sub	objptr, ##1080
0aa08     F2 26 02 F1 | 	add	local05, objptr
0aa0c     04 26 06 F1 | 	add	local05, #4
0aa10     13 2D 02 FB | 	rdlong	local08, local05
0aa14     15 2C 0E F2 | 	cmp	local08, #21 wz
0aa18     35 00 00 FF 
0aa1c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa20     44 00 90 5D |  if_ne	jmp	#LR__0921
0aa24     37 00 00 FF 
0aa28     44 E4 05 F1 | 	add	objptr, ##28228
0aa2c     F2 2C 02 FB | 	rdlong	local08, objptr
0aa30     01 2C 06 F1 | 	add	local08, #1
0aa34     F2 2C 62 FC | 	wrlong	local08, objptr
0aa38     37 00 00 FF 
0aa3c     44 E4 85 F1 | 	sub	objptr, ##28228
0aa40     C4 EF BF FD | 	call	#_expr
0aa44     FD 2E 02 F6 | 	mov	local09, result1
0aa48     37 00 00 FF 
0aa4c     44 E4 05 F1 | 	add	objptr, ##28228
0aa50     F2 2C 02 FB | 	rdlong	local08, objptr
0aa54     01 2C 06 F1 | 	add	local08, #1
0aa58     F2 2C 62 FC | 	wrlong	local08, objptr
0aa5c     37 00 00 FF 
0aa60     44 E4 85 F1 | 	sub	objptr, ##28228
0aa64     08 00 90 FD | 	jmp	#LR__0922
0aa68                 | LR__0921
0aa68     9C EF BF FD | 	call	#_expr
0aa6c     FD 2E 02 F6 | 	mov	local09, result1
0aa70                 | LR__0922
0aa70                 | '     if err>0 then return err
0aa70     01 2E 16 F2 | 	cmp	local09, #1 wc
0aa74     17 FB 01 36 |  if_ae	mov	result1, local09
0aa78     3C 02 90 3D |  if_ae	jmp	#LR__0926
0aa7c     01 2A 06 F1 | 	add	local07, #1
0aa80     37 00 00 FF 
0aa84     44 E4 05 F1 | 	add	objptr, ##28228
0aa88     F2 26 02 FB | 	rdlong	local05, objptr
0aa8c     03 26 66 F0 | 	shl	local05, #3
0aa90     02 00 00 FF 
0aa94     38 E4 85 F1 | 	sub	objptr, ##1080
0aa98     F2 26 02 F1 | 	add	local05, objptr
0aa9c     04 26 06 F1 | 	add	local05, #4
0aaa0     13 2F 02 FB | 	rdlong	local09, local05
0aaa4     14 2E 0E F2 | 	cmp	local09, #20 wz
0aaa8     35 00 00 FF 
0aaac     0C E4 85 F1 | 	sub	objptr, ##27148
0aab0     34 00 90 AD |  if_e	jmp	#LR__0923
0aab4     37 00 00 FF 
0aab8     44 E4 05 F1 | 	add	objptr, ##28228
0aabc     F2 2E 02 FB | 	rdlong	local09, objptr
0aac0     03 2E 66 F0 | 	shl	local09, #3
0aac4     02 00 00 FF 
0aac8     38 E4 85 F1 | 	sub	objptr, ##1080
0aacc     F2 2E 02 F1 | 	add	local09, objptr
0aad0     04 2E 06 F1 | 	add	local09, #4
0aad4     17 2F 02 FB | 	rdlong	local09, local09
0aad8     FE 2F 0E F2 | 	cmp	local09, #510 wz
0aadc     35 00 00 FF 
0aae0     0C E4 85 F1 | 	sub	objptr, ##27148
0aae4     00 FF 9F 5D |  if_ne	jmp	#LR__0920
0aae8                 | LR__0923
0aae8                 | '   if lparts(ct).token=token_end then return 14
0aae8     37 00 00 FF 
0aaec     44 E4 05 F1 | 	add	objptr, ##28228
0aaf0     F2 26 02 FB | 	rdlong	local05, objptr
0aaf4     03 26 66 F0 | 	shl	local05, #3
0aaf8     02 00 00 FF 
0aafc     38 E4 85 F1 | 	sub	objptr, ##1080
0ab00     F2 26 02 F1 | 	add	local05, objptr
0ab04     04 26 06 F1 | 	add	local05, #4
0ab08     13 2F 02 FB | 	rdlong	local09, local05
0ab0c     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ab10     35 00 00 FF 
0ab14     0C E4 85 F1 | 	sub	objptr, ##27148
0ab18     0E FA 05 A6 |  if_e	mov	result1, #14
0ab1c     98 01 90 AD |  if_e	jmp	#LR__0926
0ab20                 | LR__0924
0ab20     15 1F 02 F6 | 	mov	local01, local07
0ab24     03 28 66 F0 | 	shl	local06, #3
0ab28     35 00 00 FF 
0ab2c     0C E4 05 F1 | 	add	objptr, ##27148
0ab30     F2 28 02 F1 | 	add	local06, objptr
0ab34     04 28 06 F1 | 	add	local06, #4
0ab38     14 23 02 FB | 	rdlong	local03, local06
0ab3c     0F 2D 02 F6 | 	mov	local08, local01
0ab40     10 31 02 F6 | 	mov	local10, local02
0ab44     11 33 02 F6 | 	mov	local11, local03
0ab48     15 00 00 FF 
0ab4c     70 E4 05 F1 | 	add	objptr, ##10864
0ab50     F2 34 02 FB | 	rdlong	local12, objptr
0ab54     1A 37 02 F6 | 	mov	local13, local12
0ab58     01 36 66 F0 | 	shl	local13, #1
0ab5c     1A 37 02 F1 | 	add	local13, local12
0ab60     02 36 66 F0 | 	shl	local13, #2
0ab64     03 00 00 FF 
0ab68     00 E4 85 F1 | 	sub	objptr, ##1536
0ab6c     F2 36 02 F1 | 	add	local13, objptr
0ab70     1B 2D 62 FC | 	wrlong	local08, local13
0ab74     03 00 00 FF 
0ab78     00 E4 05 F1 | 	add	objptr, ##1536
0ab7c     F2 2C 02 FB | 	rdlong	local08, objptr
0ab80     16 39 02 F6 | 	mov	local14, local08
0ab84     01 38 66 F0 | 	shl	local14, #1
0ab88     16 39 02 F1 | 	add	local14, local08
0ab8c     02 38 66 F0 | 	shl	local14, #2
0ab90     03 00 00 FF 
0ab94     00 E4 85 F1 | 	sub	objptr, ##1536
0ab98     F2 38 02 F1 | 	add	local14, objptr
0ab9c     04 38 06 F1 | 	add	local14, #4
0aba0     1C 31 62 FC | 	wrlong	local10, local14
0aba4     03 00 00 FF 
0aba8     00 E4 05 F1 | 	add	objptr, ##1536
0abac     F2 2C 02 FB | 	rdlong	local08, objptr
0abb0     16 3B 02 F6 | 	mov	local15, local08
0abb4     01 3A 66 F0 | 	shl	local15, #1
0abb8     16 3B 02 F1 | 	add	local15, local08
0abbc     02 3A 66 F0 | 	shl	local15, #2
0abc0     03 00 00 FF 
0abc4     00 E4 85 F1 | 	sub	objptr, ##1536
0abc8     F2 3A 02 F1 | 	add	local15, objptr
0abcc     08 3A 06 F1 | 	add	local15, #8
0abd0     1D 33 62 FC | 	wrlong	local11, local15
0abd4     03 00 00 FF 
0abd8     00 E4 05 F1 | 	add	objptr, ##1536
0abdc     F2 2C 02 FB | 	rdlong	local08, objptr
0abe0     01 2C 06 F1 | 	add	local08, #1
0abe4     F2 2C 62 FC | 	wrlong	local08, objptr
0abe8     4A 00 00 FF 
0abec     7C E4 85 F1 | 	sub	objptr, ##38012
0abf0                 | ' t2.result.uresult=numpar
0abf0                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0abf0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0abf0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0abf0     FF FF 7F FF 
0abf4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0abf8     B8 00 90 5D |  if_ne	jmp	#LR__0925
0abfc     15 22 06 F6 | 	mov	local03, #21
0ac00     0F 2D 02 F6 | 	mov	local08, local01
0ac04     10 31 02 F6 | 	mov	local10, local02
0ac08     11 33 02 F6 | 	mov	local11, local03
0ac0c     4A 00 00 FF 
0ac10     7C E4 05 F1 | 	add	objptr, ##38012
0ac14     F2 34 02 FB | 	rdlong	local12, objptr
0ac18     1A 37 02 F6 | 	mov	local13, local12
0ac1c     01 36 66 F0 | 	shl	local13, #1
0ac20     1A 37 02 F1 | 	add	local13, local12
0ac24     02 36 66 F0 | 	shl	local13, #2
0ac28     03 00 00 FF 
0ac2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac30     F2 36 02 F1 | 	add	local13, objptr
0ac34     1B 2D 62 FC | 	wrlong	local08, local13
0ac38     03 00 00 FF 
0ac3c     00 E4 05 F1 | 	add	objptr, ##1536
0ac40     F2 3A 02 FB | 	rdlong	local15, objptr
0ac44     1D 39 02 F6 | 	mov	local14, local15
0ac48     01 38 66 F0 | 	shl	local14, #1
0ac4c     1D 39 02 F1 | 	add	local14, local15
0ac50     02 38 66 F0 | 	shl	local14, #2
0ac54     03 00 00 FF 
0ac58     00 E4 85 F1 | 	sub	objptr, ##1536
0ac5c     F2 38 02 F1 | 	add	local14, objptr
0ac60     04 38 06 F1 | 	add	local14, #4
0ac64     1C 31 62 FC | 	wrlong	local10, local14
0ac68     03 00 00 FF 
0ac6c     00 E4 05 F1 | 	add	objptr, ##1536
0ac70     F2 38 02 FB | 	rdlong	local14, objptr
0ac74     1C 3B 02 F6 | 	mov	local15, local14
0ac78     01 3A 66 F0 | 	shl	local15, #1
0ac7c     1C 3B 02 F1 | 	add	local15, local14
0ac80     02 3A 66 F0 | 	shl	local15, #2
0ac84     03 00 00 FF 
0ac88     00 E4 85 F1 | 	sub	objptr, ##1536
0ac8c     F2 3A 02 F1 | 	add	local15, objptr
0ac90     08 3A 06 F1 | 	add	local15, #8
0ac94     1D 33 62 FC | 	wrlong	local11, local15
0ac98     03 00 00 FF 
0ac9c     00 E4 05 F1 | 	add	objptr, ##1536
0aca0     F2 2C 02 FB | 	rdlong	local08, objptr
0aca4     01 2C 06 F1 | 	add	local08, #1
0aca8     F2 2C 62 FC | 	wrlong	local08, objptr
0acac     4A 00 00 FF 
0acb0     7C E4 85 F1 | 	sub	objptr, ##38012
0acb4                 | LR__0925
0acb4                 | ' return 0
0acb4     00 FA 05 F6 | 	mov	result1, #0
0acb8                 | LR__0926
0acb8     A7 F0 03 F6 | 	mov	ptra, fp
0acbc     B2 00 A0 FD | 	call	#popregs_
0acc0                 | _getfun_ret
0acc0     2D 00 64 FD | 	ret
0acc4                 | 
0acc4                 | '   
0acc4                 | '   
0acc4                 | ' function getvar(m as integer) as ulong
0acc4                 | _getvar
0acc4     11 4A 05 F6 | 	mov	COUNT_, #17
0acc8     A8 00 A0 FD | 	call	#pushregs_
0accc                 | _getvar_enter
0accc     09 25 02 F6 | 	mov	local04, arg01
0acd0     37 00 00 FF 
0acd4     44 E4 05 F1 | 	add	objptr, ##28228
0acd8     F2 26 02 FB | 	rdlong	local05, objptr
0acdc     03 26 66 F0 | 	shl	local05, #3
0ace0     02 00 00 FF 
0ace4     38 E4 85 F1 | 	sub	objptr, ##1080
0ace8     F2 26 02 F1 | 	add	local05, objptr
0acec     13 29 02 FB | 	rdlong	local06, local05
0acf0     01 2A 66 F6 | 	neg	local07, #1
0acf4                 | ' 
0acf4                 | ' varname$=lparts(ct).part$
0acf4                 | ' j=-1
0acf4                 | ' 
0acf4                 | ' for i=0 to varnum-1
0acf4     00 2C 06 F6 | 	mov	local08, #0
0acf8     04 E4 85 F1 | 	sub	objptr, #4
0acfc     F2 2E 02 FB | 	rdlong	local09, objptr
0ad00     35 00 00 FF 
0ad04     08 E4 85 F1 | 	sub	objptr, ##27144
0ad08                 | LR__0930
0ad08     17 2D 52 F2 | 	cmps	local08, local09 wc
0ad0c     38 00 90 3D |  if_ae	jmp	#LR__0931
0ad10                 | '   if variables(i).name=varname$ then j=i : exit
0ad10     16 27 02 F6 | 	mov	local05, local08
0ad14     04 26 66 F0 | 	shl	local05, #4
0ad18     14 00 00 FF 
0ad1c     F8 E5 05 F1 | 	add	objptr, ##10744
0ad20     F2 26 02 F1 | 	add	local05, objptr
0ad24     13 13 02 FB | 	rdlong	arg01, local05
0ad28     14 15 02 F6 | 	mov	arg02, local06
0ad2c     14 00 00 FF 
0ad30     F8 E5 85 F1 | 	sub	objptr, ##10744
0ad34     F4 5D B1 FD | 	call	#__system___string_cmp
0ad38     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad3c     16 2B 02 A6 |  if_e	mov	local07, local08
0ad40     01 2C 06 51 |  if_ne	add	local08, #1
0ad44     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0ad48                 | LR__0931
0ad48                 | ' if  j=-1 andalso varnum<maxvars then   
0ad48     FF FF 7F FF 
0ad4c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0ad50     A8 00 90 5D |  if_ne	jmp	#LR__0932
0ad54     35 00 00 FF 
0ad58     08 E4 05 F1 | 	add	objptr, ##27144
0ad5c     F2 2E 02 FB | 	rdlong	local09, objptr
0ad60     35 00 00 FF 
0ad64     08 E4 85 F1 | 	sub	objptr, ##27144
0ad68     02 00 00 FF 
0ad6c     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0ad70     88 00 90 3D |  if_ae	jmp	#LR__0932
0ad74     35 00 00 FF 
0ad78     08 E4 05 F1 | 	add	objptr, ##27144
0ad7c     F2 26 02 FB | 	rdlong	local05, objptr
0ad80     04 26 66 F0 | 	shl	local05, #4
0ad84     20 00 00 FF 
0ad88     10 E4 85 F1 | 	sub	objptr, ##16400
0ad8c     F2 26 02 F1 | 	add	local05, objptr
0ad90     13 29 62 FC | 	wrlong	local06, local05
0ad94     20 00 00 FF 
0ad98     10 E4 05 F1 | 	add	objptr, ##16400
0ad9c     F2 26 02 FB | 	rdlong	local05, objptr
0ada0     04 26 66 F0 | 	shl	local05, #4
0ada4     20 00 00 FF 
0ada8     10 E4 85 F1 | 	sub	objptr, ##16400
0adac     F2 26 02 F1 | 	add	local05, objptr
0adb0     04 26 06 F1 | 	add	local05, #4
0adb4     13 01 68 FC | 	wrlong	#0, local05
0adb8     20 00 00 FF 
0adbc     10 E4 05 F1 | 	add	objptr, ##16400
0adc0     F2 26 02 FB | 	rdlong	local05, objptr
0adc4     04 26 66 F0 | 	shl	local05, #4
0adc8     20 00 00 FF 
0adcc     10 E4 85 F1 | 	sub	objptr, ##16400
0add0     F2 26 02 F1 | 	add	local05, objptr
0add4     0C 26 06 F1 | 	add	local05, #12
0add8     13 39 68 FC | 	wrlong	#28, local05
0addc     20 00 00 FF 
0ade0     10 E4 05 F1 | 	add	objptr, ##16400
0ade4     F2 2E 02 FB | 	rdlong	local09, objptr
0ade8     17 2B 02 F6 | 	mov	local07, local09
0adec     01 2E 06 F1 | 	add	local09, #1
0adf0     F2 2E 62 FC | 	wrlong	local09, objptr
0adf4     35 00 00 FF 
0adf8     08 E4 85 F1 | 	sub	objptr, ##27144
0adfc                 | LR__0932
0adfc     00 2E 06 F6 | 	mov	local09, #0
0ae00                 | ' numpar=0
0ae00                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0ae00     37 00 00 FF 
0ae04     44 E4 05 F1 | 	add	objptr, ##28228
0ae08     F2 26 02 FB | 	rdlong	local05, objptr
0ae0c     01 26 06 F1 | 	add	local05, #1
0ae10     03 26 66 F0 | 	shl	local05, #3
0ae14     02 00 00 FF 
0ae18     38 E4 85 F1 | 	sub	objptr, ##1080
0ae1c     F2 26 02 F1 | 	add	local05, objptr
0ae20     04 26 06 F1 | 	add	local05, #4
0ae24     13 2D 02 FB | 	rdlong	local08, local05
0ae28     15 2C 0E F2 | 	cmp	local08, #21 wz
0ae2c     35 00 00 FF 
0ae30     0C E4 85 F1 | 	sub	objptr, ##27148
0ae34     54 01 90 5D |  if_ne	jmp	#LR__0937
0ae38     37 00 00 FF 
0ae3c     44 E4 05 F1 | 	add	objptr, ##28228
0ae40     F2 30 02 FB | 	rdlong	local10, objptr
0ae44     01 30 06 F1 | 	add	local10, #1
0ae48     F2 30 62 FC | 	wrlong	local10, objptr
0ae4c     37 00 00 FF 
0ae50     44 E4 85 F1 | 	sub	objptr, ##28228
0ae54                 | '   ct+=1 											' omit this lpar, this is for expr list
0ae54                 | '   do
0ae54                 | LR__0933
0ae54     37 00 00 FF 
0ae58     44 E4 05 F1 | 	add	objptr, ##28228
0ae5c     F2 26 02 FB | 	rdlong	local05, objptr
0ae60     01 26 06 F1 | 	add	local05, #1
0ae64     F2 26 62 FC | 	wrlong	local05, objptr
0ae68                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ae68                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ae68     03 26 66 F0 | 	shl	local05, #3
0ae6c     02 00 00 FF 
0ae70     38 E4 85 F1 | 	sub	objptr, ##1080
0ae74     F2 26 02 F1 | 	add	local05, objptr
0ae78     04 26 06 F1 | 	add	local05, #4
0ae7c     13 31 02 FB | 	rdlong	local10, local05
0ae80     15 30 0E F2 | 	cmp	local10, #21 wz
0ae84     35 00 00 FF 
0ae88     0C E4 85 F1 | 	sub	objptr, ##27148
0ae8c     44 00 90 5D |  if_ne	jmp	#LR__0934
0ae90     37 00 00 FF 
0ae94     44 E4 05 F1 | 	add	objptr, ##28228
0ae98     F2 30 02 FB | 	rdlong	local10, objptr
0ae9c     01 30 06 F1 | 	add	local10, #1
0aea0     F2 30 62 FC | 	wrlong	local10, objptr
0aea4     37 00 00 FF 
0aea8     44 E4 85 F1 | 	sub	objptr, ##28228
0aeac     58 EB BF FD | 	call	#_expr
0aeb0     FD 32 02 F6 | 	mov	local11, result1
0aeb4     37 00 00 FF 
0aeb8     44 E4 05 F1 | 	add	objptr, ##28228
0aebc     F2 30 02 FB | 	rdlong	local10, objptr
0aec0     01 30 06 F1 | 	add	local10, #1
0aec4     F2 30 62 FC | 	wrlong	local10, objptr
0aec8     37 00 00 FF 
0aecc     44 E4 85 F1 | 	sub	objptr, ##28228
0aed0     08 00 90 FD | 	jmp	#LR__0935
0aed4                 | LR__0934
0aed4     30 EB BF FD | 	call	#_expr
0aed8     FD 32 02 F6 | 	mov	local11, result1
0aedc                 | LR__0935
0aedc                 | '     if err>0 then return err
0aedc     01 32 56 F2 | 	cmps	local11, #1 wc
0aee0     19 FB 01 36 |  if_ae	mov	result1, local11
0aee4     2C 02 90 3D |  if_ae	jmp	#LR__0939
0aee8     01 2E 06 F1 | 	add	local09, #1
0aeec     37 00 00 FF 
0aef0     44 E4 05 F1 | 	add	objptr, ##28228
0aef4     F2 26 02 FB | 	rdlong	local05, objptr
0aef8     03 26 66 F0 | 	shl	local05, #3
0aefc     02 00 00 FF 
0af00     38 E4 85 F1 | 	sub	objptr, ##1080
0af04     F2 26 02 F1 | 	add	local05, objptr
0af08     04 26 06 F1 | 	add	local05, #4
0af0c     13 33 02 FB | 	rdlong	local11, local05
0af10     14 32 0E F2 | 	cmp	local11, #20 wz
0af14     35 00 00 FF 
0af18     0C E4 85 F1 | 	sub	objptr, ##27148
0af1c     34 00 90 AD |  if_e	jmp	#LR__0936
0af20     37 00 00 FF 
0af24     44 E4 05 F1 | 	add	objptr, ##28228
0af28     F2 32 02 FB | 	rdlong	local11, objptr
0af2c     03 32 66 F0 | 	shl	local11, #3
0af30     02 00 00 FF 
0af34     38 E4 85 F1 | 	sub	objptr, ##1080
0af38     F2 32 02 F1 | 	add	local11, objptr
0af3c     04 32 06 F1 | 	add	local11, #4
0af40     19 33 02 FB | 	rdlong	local11, local11
0af44     FE 33 0E F2 | 	cmp	local11, #510 wz
0af48     35 00 00 FF 
0af4c     0C E4 85 F1 | 	sub	objptr, ##27148
0af50     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0af54                 | LR__0936
0af54                 | '     if lparts(ct).token=token_end then return 14
0af54     37 00 00 FF 
0af58     44 E4 05 F1 | 	add	objptr, ##28228
0af5c     F2 26 02 FB | 	rdlong	local05, objptr
0af60     03 26 66 F0 | 	shl	local05, #3
0af64     02 00 00 FF 
0af68     38 E4 85 F1 | 	sub	objptr, ##1080
0af6c     F2 26 02 F1 | 	add	local05, objptr
0af70     04 26 06 F1 | 	add	local05, #4
0af74     13 33 02 FB | 	rdlong	local11, local05
0af78     FE 33 0E F2 | 	cmp	local11, #510 wz
0af7c     35 00 00 FF 
0af80     0C E4 85 F1 | 	sub	objptr, ##27148
0af84     0E FA 05 A6 |  if_e	mov	result1, #14
0af88     88 01 90 AD |  if_e	jmp	#LR__0939
0af8c                 | LR__0937
0af8c     17 21 02 F6 | 	mov	local02, local09
0af90     11 22 06 F6 | 	mov	local03, #17
0af94     15 1F 02 F6 | 	mov	local01, local07
0af98     0F 31 02 F6 | 	mov	local10, local01
0af9c     10 35 02 F6 | 	mov	local12, local02
0afa0     11 37 02 F6 | 	mov	local13, local03
0afa4     4A 00 00 FF 
0afa8     7C E4 05 F1 | 	add	objptr, ##38012
0afac     F2 38 02 FB | 	rdlong	local14, objptr
0afb0     1C 3B 02 F6 | 	mov	local15, local14
0afb4     01 3A 66 F0 | 	shl	local15, #1
0afb8     1C 3B 02 F1 | 	add	local15, local14
0afbc     02 3A 66 F0 | 	shl	local15, #2
0afc0     03 00 00 FF 
0afc4     00 E4 85 F1 | 	sub	objptr, ##1536
0afc8     F2 3A 02 F1 | 	add	local15, objptr
0afcc     1D 31 62 FC | 	wrlong	local10, local15
0afd0     03 00 00 FF 
0afd4     00 E4 05 F1 | 	add	objptr, ##1536
0afd8     F2 30 02 FB | 	rdlong	local10, objptr
0afdc     18 3D 02 F6 | 	mov	local16, local10
0afe0     01 3C 66 F0 | 	shl	local16, #1
0afe4     18 3D 02 F1 | 	add	local16, local10
0afe8     02 3C 66 F0 | 	shl	local16, #2
0afec     03 00 00 FF 
0aff0     00 E4 85 F1 | 	sub	objptr, ##1536
0aff4     F2 3C 02 F1 | 	add	local16, objptr
0aff8     04 3C 06 F1 | 	add	local16, #4
0affc     1E 35 62 FC | 	wrlong	local12, local16
0b000     03 00 00 FF 
0b004     00 E4 05 F1 | 	add	objptr, ##1536
0b008     F2 30 02 FB | 	rdlong	local10, objptr
0b00c     18 3F 02 F6 | 	mov	local17, local10
0b010     01 3E 66 F0 | 	shl	local17, #1
0b014     18 3F 02 F1 | 	add	local17, local10
0b018     02 3E 66 F0 | 	shl	local17, #2
0b01c     03 00 00 FF 
0b020     00 E4 85 F1 | 	sub	objptr, ##1536
0b024     F2 3E 02 F1 | 	add	local17, objptr
0b028     08 3E 06 F1 | 	add	local17, #8
0b02c     1F 37 62 FC | 	wrlong	local13, local17
0b030     03 00 00 FF 
0b034     00 E4 05 F1 | 	add	objptr, ##1536
0b038     F2 30 02 FB | 	rdlong	local10, objptr
0b03c     01 30 06 F1 | 	add	local10, #1
0b040     F2 30 62 FC | 	wrlong	local10, objptr
0b044     4A 00 00 FF 
0b048     7C E4 85 F1 | 	sub	objptr, ##38012
0b04c                 | ' t2.result.twowords(1)=numpar
0b04c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b04c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b04c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b04c     FF FF 7F FF 
0b050     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b054     B8 00 90 5D |  if_ne	jmp	#LR__0938
0b058     15 22 06 F6 | 	mov	local03, #21
0b05c     0F 31 02 F6 | 	mov	local10, local01
0b060     10 35 02 F6 | 	mov	local12, local02
0b064     11 37 02 F6 | 	mov	local13, local03
0b068     4A 00 00 FF 
0b06c     7C E4 05 F1 | 	add	objptr, ##38012
0b070     F2 38 02 FB | 	rdlong	local14, objptr
0b074     1C 3B 02 F6 | 	mov	local15, local14
0b078     01 3A 66 F0 | 	shl	local15, #1
0b07c     1C 3B 02 F1 | 	add	local15, local14
0b080     02 3A 66 F0 | 	shl	local15, #2
0b084     03 00 00 FF 
0b088     00 E4 85 F1 | 	sub	objptr, ##1536
0b08c     F2 3A 02 F1 | 	add	local15, objptr
0b090     1D 31 62 FC | 	wrlong	local10, local15
0b094     03 00 00 FF 
0b098     00 E4 05 F1 | 	add	objptr, ##1536
0b09c     F2 3E 02 FB | 	rdlong	local17, objptr
0b0a0     1F 3D 02 F6 | 	mov	local16, local17
0b0a4     01 3C 66 F0 | 	shl	local16, #1
0b0a8     1F 3D 02 F1 | 	add	local16, local17
0b0ac     02 3C 66 F0 | 	shl	local16, #2
0b0b0     03 00 00 FF 
0b0b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0b8     F2 3C 02 F1 | 	add	local16, objptr
0b0bc     04 3C 06 F1 | 	add	local16, #4
0b0c0     1E 35 62 FC | 	wrlong	local12, local16
0b0c4     03 00 00 FF 
0b0c8     00 E4 05 F1 | 	add	objptr, ##1536
0b0cc     F2 3C 02 FB | 	rdlong	local16, objptr
0b0d0     1E 3F 02 F6 | 	mov	local17, local16
0b0d4     01 3E 66 F0 | 	shl	local17, #1
0b0d8     1E 3F 02 F1 | 	add	local17, local16
0b0dc     02 3E 66 F0 | 	shl	local17, #2
0b0e0     03 00 00 FF 
0b0e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0e8     F2 3E 02 F1 | 	add	local17, objptr
0b0ec     08 3E 06 F1 | 	add	local17, #8
0b0f0     1F 37 62 FC | 	wrlong	local13, local17
0b0f4     03 00 00 FF 
0b0f8     00 E4 05 F1 | 	add	objptr, ##1536
0b0fc     F2 30 02 FB | 	rdlong	local10, objptr
0b100     01 30 06 F1 | 	add	local10, #1
0b104     F2 30 62 FC | 	wrlong	local10, objptr
0b108     4A 00 00 FF 
0b10c     7C E4 85 F1 | 	sub	objptr, ##38012
0b110                 | LR__0938
0b110                 | ' return 0
0b110     00 FA 05 F6 | 	mov	result1, #0
0b114                 | LR__0939
0b114     A7 F0 03 F6 | 	mov	ptra, fp
0b118     B2 00 A0 FD | 	call	#popregs_
0b11c                 | _getvar_ret
0b11c     2D 00 64 FD | 	ret
0b120                 | 
0b120                 | ' 
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' 
0b120                 | ' 
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' '                                                                                                                                       -
0b120                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b120                 | ' '                                                                                                                                       -
0b120                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' 
0b120                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b120                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b120                 | ' 
0b120                 | ' function execute_line (astart=0 as integer) as integer
0b120                 | _execute_line
0b120     04 4A 05 F6 | 	mov	COUNT_, #4
0b124     A8 00 A0 FD | 	call	#pushregs_
0b128     50 00 00 FF 
0b12c     B8 E4 05 F1 | 	add	objptr, ##41144
0b130     F2 00 68 FC | 	wrlong	#0, objptr
0b134                 | ' runptr2=0
0b134                 | ' for lineptr_e=astart to lineptr-1
0b134     06 00 00 FF 
0b138     38 E4 85 F1 | 	sub	objptr, ##3128
0b13c     F2 12 62 FC | 	wrlong	arg01, objptr
0b140     04 E4 85 F1 | 	sub	objptr, #4
0b144     F2 1E 02 FB | 	rdlong	local01, objptr
0b148     4A 00 00 FF 
0b14c     7C E4 85 F1 | 	sub	objptr, ##38012
0b150                 | LR__0940
0b150     4A 00 00 FF 
0b154     80 E4 05 F1 | 	add	objptr, ##38016
0b158     F2 FA 01 FB | 	rdlong	result1, objptr
0b15c     4A 00 00 FF 
0b160     80 E4 85 F1 | 	sub	objptr, ##38016
0b164     0F FB 51 F2 | 	cmps	result1, local01 wc
0b168     98 00 90 3D |  if_ae	jmp	#LR__0941
0b16c     4A 00 00 FF 
0b170     80 E4 05 F1 | 	add	objptr, ##38016
0b174     F2 FA 01 FB | 	rdlong	result1, objptr
0b178     FD 20 02 F6 | 	mov	local02, result1
0b17c     01 20 66 F0 | 	shl	local02, #1
0b180     FD 20 02 F1 | 	add	local02, result1
0b184     02 20 66 F0 | 	shl	local02, #2
0b188     03 00 00 FF 
0b18c     04 E4 85 F1 | 	sub	objptr, ##1540
0b190     F2 20 02 F1 | 	add	local02, objptr
0b194     08 20 06 F1 | 	add	local02, #8
0b198     10 21 02 FB | 	rdlong	local02, local02
0b19c     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b1a0     02 20 66 F0 | 	shl	local02, #2
0b1a4     04 00 00 FF 
0b1a8     1C E4 85 F1 | 	sub	objptr, ##2076
0b1ac     F2 20 02 F1 | 	add	local02, objptr
0b1b0     10 21 02 FB | 	rdlong	local02, local02
0b1b4     10 23 02 F6 | 	mov	local03, local02
0b1b8     13 20 46 F7 | 	zerox	local02, #19
0b1bc     14 22 46 F0 | 	shr	local03, #20
0b1c0     02 22 66 F0 | 	shl	local03, #2
0b1c4     ED 22 02 F1 | 	add	local03, __methods__
0b1c8     11 23 02 FB | 	rdlong	local03, local03
0b1cc     43 00 00 FF 
0b1d0     60 E4 85 F1 | 	sub	objptr, ##34400
0b1d4     F2 24 02 F6 | 	mov	local04, objptr
0b1d8     10 E5 01 F6 | 	mov	objptr, local02
0b1dc     2D 22 62 FD | 	call	local03
0b1e0     12 E5 01 F6 | 	mov	objptr, local04
0b1e4     4A 00 00 FF 
0b1e8     80 E4 05 F1 | 	add	objptr, ##38016
0b1ec     F2 24 02 FB | 	rdlong	local04, objptr
0b1f0     01 24 06 F1 | 	add	local04, #1
0b1f4     F2 24 62 FC | 	wrlong	local04, objptr
0b1f8     4A 00 00 FF 
0b1fc     80 E4 85 F1 | 	sub	objptr, ##38016
0b200     4C FF 9F FD | 	jmp	#LR__0940
0b204                 | LR__0941
0b204                 | ' return runptr2
0b204     50 00 00 FF 
0b208     B8 E4 05 F1 | 	add	objptr, ##41144
0b20c     F2 FA 01 FB | 	rdlong	result1, objptr
0b210     50 00 00 FF 
0b214     B8 E4 85 F1 | 	sub	objptr, ##41144
0b218     A7 F0 03 F6 | 	mov	ptra, fp
0b21c     B2 00 A0 FD | 	call	#popregs_
0b220                 | _execute_line_ret
0b220     2D 00 64 FD | 	ret
0b224                 | 
0b224                 | ' 
0b224                 | ' 
0b224                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b224                 | ' 
0b224                 | ' function pop() as expr_result
0b224                 | _pop
0b224                 | ' 
0b224                 | ' if stackpointer=0 then
0b224     43 00 00 FF 
0b228     58 E4 05 F1 | 	add	objptr, ##34392
0b22c     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b230     43 00 00 FF 
0b234     58 E4 85 F1 | 	sub	objptr, ##34392
0b238     FF 04 06 A6 |  if_e	mov	_var03, #255
0b23c     18 00 06 A6 |  if_e	mov	_var01, #24
0b240     68 00 90 AD |  if_e	jmp	#LR__0950
0b244     43 00 00 FF 
0b248     58 E4 05 F1 | 	add	objptr, ##34392
0b24c     F2 FA 01 FB | 	rdlong	result1, objptr
0b250     01 FA 85 F1 | 	sub	result1, #1
0b254     F2 FA 61 FC | 	wrlong	result1, objptr
0b258     FD FE 01 F6 | 	mov	result3, result1
0b25c     01 FE 65 F0 | 	shl	result3, #1
0b260     FD FE 01 F1 | 	add	result3, result1
0b264     02 FE 65 F0 | 	shl	result3, #2
0b268     0C 00 00 FF 
0b26c     0C E4 85 F1 | 	sub	objptr, ##6156
0b270     F2 FE 01 F1 | 	add	result3, objptr
0b274     FF 00 02 FB | 	rdlong	_var01, result3
0b278     04 FE 05 F1 | 	add	result3, #4
0b27c     FF FE 01 FB | 	rdlong	result3, result3
0b280     FD FC 01 F6 | 	mov	result2, result1
0b284     01 FC 65 F0 | 	shl	result2, #1
0b288     FD FC 01 F1 | 	add	result2, result1
0b28c     02 FC 65 F0 | 	shl	result2, #2
0b290     F2 FC 01 F1 | 	add	result2, objptr
0b294     08 FC 05 F1 | 	add	result2, #8
0b298     FE FA 01 FB | 	rdlong	result1, result2
0b29c     FF 02 02 F6 | 	mov	_var02, result3
0b2a0     FD 04 02 F6 | 	mov	_var03, result1
0b2a4     37 00 00 FF 
0b2a8     4C E4 85 F1 | 	sub	objptr, ##28236
0b2ac                 | LR__0950
0b2ac                 | ' return t1
0b2ac     01 FD 01 F6 | 	mov	result2, _var02
0b2b0     02 FF 01 F6 | 	mov	result3, _var03
0b2b4     00 FB 01 F6 | 	mov	result1, _var01
0b2b8                 | _pop_ret
0b2b8     2D 00 64 FD | 	ret
0b2bc                 | 
0b2bc                 | ' 
0b2bc                 | ' sub push(t1 as expr_result )
0b2bc                 | _push
0b2bc                 | ' 
0b2bc                 | ' 'print "In push: "; t1.result_type
0b2bc                 | ' 'print "In push: "; t1.result.uresult
0b2bc                 | ' 
0b2bc                 | ' if stackpointer<maxstack then 
0b2bc     43 00 00 FF 
0b2c0     58 E4 05 F1 | 	add	objptr, ##34392
0b2c4     F2 00 02 FB | 	rdlong	_var01, objptr
0b2c8     43 00 00 FF 
0b2cc     58 E4 85 F1 | 	sub	objptr, ##34392
0b2d0     01 00 00 FF 
0b2d4     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b2d8     BC 00 90 3D |  if_ae	jmp	#LR__0960
0b2dc     09 01 02 FB | 	rdlong	_var01, arg01
0b2e0     04 12 06 F1 | 	add	arg01, #4
0b2e4     09 03 02 FB | 	rdlong	_var02, arg01
0b2e8     04 12 06 F1 | 	add	arg01, #4
0b2ec     09 13 02 FB | 	rdlong	arg01, arg01
0b2f0     43 00 00 FF 
0b2f4     58 E4 05 F1 | 	add	objptr, ##34392
0b2f8     F2 04 02 FB | 	rdlong	_var03, objptr
0b2fc     02 07 02 F6 | 	mov	_var04, _var03
0b300     01 06 66 F0 | 	shl	_var04, #1
0b304     02 07 02 F1 | 	add	_var04, _var03
0b308     02 06 66 F0 | 	shl	_var04, #2
0b30c     0C 00 00 FF 
0b310     0C E4 85 F1 | 	sub	objptr, ##6156
0b314     F2 06 02 F1 | 	add	_var04, objptr
0b318     03 01 62 FC | 	wrlong	_var01, _var04
0b31c     0C 00 00 FF 
0b320     0C E4 05 F1 | 	add	objptr, ##6156
0b324     F2 06 02 FB | 	rdlong	_var04, objptr
0b328     03 05 02 F6 | 	mov	_var03, _var04
0b32c     01 04 66 F0 | 	shl	_var03, #1
0b330     03 05 02 F1 | 	add	_var03, _var04
0b334     02 04 66 F0 | 	shl	_var03, #2
0b338     0C 00 00 FF 
0b33c     0C E4 85 F1 | 	sub	objptr, ##6156
0b340     F2 04 02 F1 | 	add	_var03, objptr
0b344     04 04 06 F1 | 	add	_var03, #4
0b348     02 03 62 FC | 	wrlong	_var02, _var03
0b34c     0C 00 00 FF 
0b350     0C E4 05 F1 | 	add	objptr, ##6156
0b354     F2 06 02 FB | 	rdlong	_var04, objptr
0b358     03 05 02 F6 | 	mov	_var03, _var04
0b35c     01 04 66 F0 | 	shl	_var03, #1
0b360     03 05 02 F1 | 	add	_var03, _var04
0b364     02 04 66 F0 | 	shl	_var03, #2
0b368     0C 00 00 FF 
0b36c     0C E4 85 F1 | 	sub	objptr, ##6156
0b370     F2 04 02 F1 | 	add	_var03, objptr
0b374     08 04 06 F1 | 	add	_var03, #8
0b378     02 13 62 FC | 	wrlong	arg01, _var03
0b37c     0C 00 00 FF 
0b380     0C E4 05 F1 | 	add	objptr, ##6156
0b384     F2 00 02 FB | 	rdlong	_var01, objptr
0b388     01 00 06 F1 | 	add	_var01, #1
0b38c     F2 00 62 FC | 	wrlong	_var01, objptr
0b390     43 00 00 FF 
0b394     58 E4 85 F1 | 	sub	objptr, ##34392
0b398                 | LR__0960
0b398                 | _push_ret
0b398     2D 00 64 FD | 	ret
0b39c                 | 
0b39c                 | ' 
0b39c                 | ' 
0b39c                 | ' sub do_gosub()
0b39c                 | _do_gosub
0b39c     50 00 00 FF 
0b3a0     08 E5 05 F1 | 	add	objptr, ##41224
0b3a4     F2 00 02 FB | 	rdlong	_var01, objptr
0b3a8     01 00 06 F1 | 	add	_var01, #1
0b3ac     F2 00 62 FC | 	wrlong	_var01, objptr
0b3b0                 | ' gosubtop+=1
0b3b0                 | ' if compiledline(lineptr_e+1).result_type=token_end then
0b3b0     06 00 00 FF 
0b3b4     88 E4 85 F1 | 	sub	objptr, ##3208
0b3b8     F2 00 02 FB | 	rdlong	_var01, objptr
0b3bc     01 00 06 F1 | 	add	_var01, #1
0b3c0     00 03 02 F6 | 	mov	_var02, _var01
0b3c4     01 02 66 F0 | 	shl	_var02, #1
0b3c8     00 03 02 F1 | 	add	_var02, _var01
0b3cc     02 02 66 F0 | 	shl	_var02, #2
0b3d0     03 00 00 FF 
0b3d4     04 E4 85 F1 | 	sub	objptr, ##1540
0b3d8     F2 02 02 F1 | 	add	_var02, objptr
0b3dc     08 02 06 F1 | 	add	_var02, #8
0b3e0     01 03 02 FB | 	rdlong	_var02, _var02
0b3e4     FE 03 0E F2 | 	cmp	_var02, #510 wz
0b3e8     47 00 00 FF 
0b3ec     7C E4 85 F1 | 	sub	objptr, ##36476
0b3f0     58 00 90 5D |  if_ne	jmp	#LR__0970
0b3f4     50 00 00 FF 
0b3f8     08 E5 05 F1 | 	add	objptr, ##41224
0b3fc     F2 02 02 FB | 	rdlong	_var02, objptr
0b400     03 02 66 F0 | 	shl	_var02, #3
0b404     03 00 00 FF 
0b408     60 E5 85 F1 | 	sub	objptr, ##1888
0b40c     F2 02 02 F1 | 	add	_var02, objptr
0b410     03 00 00 FF 
0b414     0C E5 05 F1 | 	add	objptr, ##1804
0b418     F2 00 02 FB | 	rdlong	_var01, objptr
0b41c     01 01 62 FC | 	wrlong	_var01, _var02
0b420     54 E4 05 F1 | 	add	objptr, #84
0b424     F2 02 02 FB | 	rdlong	_var02, objptr
0b428     03 02 66 F0 | 	shl	_var02, #3
0b42c     03 00 00 FF 
0b430     60 E5 85 F1 | 	sub	objptr, ##1888
0b434     F2 02 02 F1 | 	add	_var02, objptr
0b438     04 02 06 F1 | 	add	_var02, #4
0b43c     01 01 68 FC | 	wrlong	#0, _var02
0b440     4C 00 00 FF 
0b444     A8 E5 85 F1 | 	sub	objptr, ##39336
0b448     64 00 90 FD | 	jmp	#LR__0971
0b44c                 | LR__0970
0b44c     50 00 00 FF 
0b450     08 E5 05 F1 | 	add	objptr, ##41224
0b454     F2 02 02 FB | 	rdlong	_var02, objptr
0b458     03 02 66 F0 | 	shl	_var02, #3
0b45c     03 00 00 FF 
0b460     60 E5 85 F1 | 	sub	objptr, ##1888
0b464     F2 02 02 F1 | 	add	_var02, objptr
0b468     03 00 00 FF 
0b46c     14 E5 05 F1 | 	add	objptr, ##1812
0b470     F2 00 02 FB | 	rdlong	_var01, objptr
0b474     01 01 62 FC | 	wrlong	_var01, _var02
0b478     4C E4 05 F1 | 	add	objptr, #76
0b47c     F2 02 02 FB | 	rdlong	_var02, objptr
0b480     03 02 66 F0 | 	shl	_var02, #3
0b484     03 00 00 FF 
0b488     60 E5 85 F1 | 	sub	objptr, ##1888
0b48c     F2 02 02 F1 | 	add	_var02, objptr
0b490     02 00 00 FF 
0b494     28 E5 85 F1 | 	sub	objptr, ##1320
0b498     F2 00 02 FB | 	rdlong	_var01, objptr
0b49c     4A 00 00 FF 
0b4a0     80 E4 85 F1 | 	sub	objptr, ##38016
0b4a4     02 00 06 F1 | 	add	_var01, #2
0b4a8     04 02 06 F1 | 	add	_var02, #4
0b4ac     01 01 62 FC | 	wrlong	_var01, _var02
0b4b0                 | LR__0971
0b4b0                 | _do_gosub_ret
0b4b0     2D 00 64 FD | 	ret
0b4b4                 | 
0b4b4                 | ' 
0b4b4                 | ' 
0b4b4                 | ' sub do_for()
0b4b4                 | _do_for
0b4b4     01 4A 05 F6 | 	mov	COUNT_, #1
0b4b8     A8 00 A0 FD | 	call	#pushregs_
0b4bc     10 F0 07 F1 | 	add	ptra, #16
0b4c0     50 00 00 FF 
0b4c4     04 E5 05 F1 | 	add	objptr, ##41220
0b4c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b4cc     01 12 06 F1 | 	add	arg01, #1
0b4d0     F2 12 62 FC | 	wrlong	arg01, objptr
0b4d4     50 00 00 FF 
0b4d8     04 E5 85 F1 | 	sub	objptr, ##41220
0b4dc     44 FD BF FD | 	call	#_pop
0b4e0     A7 FA 61 FC | 	wrlong	result1, fp
0b4e4     04 4E 05 F1 | 	add	fp, #4
0b4e8     A7 FC 61 FC | 	wrlong	result2, fp
0b4ec     04 4E 05 F1 | 	add	fp, #4
0b4f0     A7 FE 61 FC | 	wrlong	result3, fp
0b4f4     08 4E 85 F1 | 	sub	fp, #8
0b4f8     50 00 00 FF 
0b4fc     04 E5 05 F1 | 	add	objptr, ##41220
0b500     F2 12 02 FB | 	rdlong	arg01, objptr
0b504     09 1F 02 F6 | 	mov	local01, arg01
0b508     02 1E 66 F0 | 	shl	local01, #2
0b50c     09 1F 02 F1 | 	add	local01, arg01
0b510     02 1E 66 F0 | 	shl	local01, #2
0b514     06 00 00 FF 
0b518     70 E4 85 F1 | 	sub	objptr, ##3184
0b51c     F2 1E 02 F1 | 	add	local01, objptr
0b520     A7 12 02 FB | 	rdlong	arg01, fp
0b524     08 1E 06 F1 | 	add	local01, #8
0b528     0F 13 62 FC | 	wrlong	arg01, local01
0b52c     4A 00 00 FF 
0b530     94 E4 85 F1 | 	sub	objptr, ##38036
0b534     EC FC BF FD | 	call	#_pop
0b538     A7 FA 61 FC | 	wrlong	result1, fp
0b53c     04 4E 05 F1 | 	add	fp, #4
0b540     A7 FC 61 FC | 	wrlong	result2, fp
0b544     04 4E 05 F1 | 	add	fp, #4
0b548     A7 FE 61 FC | 	wrlong	result3, fp
0b54c     08 4E 85 F1 | 	sub	fp, #8
0b550     50 00 00 FF 
0b554     04 E5 05 F1 | 	add	objptr, ##41220
0b558     F2 12 02 FB | 	rdlong	arg01, objptr
0b55c     09 1F 02 F6 | 	mov	local01, arg01
0b560     02 1E 66 F0 | 	shl	local01, #2
0b564     09 1F 02 F1 | 	add	local01, arg01
0b568     02 1E 66 F0 | 	shl	local01, #2
0b56c     06 00 00 FF 
0b570     70 E4 85 F1 | 	sub	objptr, ##3184
0b574     F2 1E 02 F1 | 	add	local01, objptr
0b578     A7 12 02 F6 | 	mov	arg01, fp
0b57c     4A 00 00 FF 
0b580     94 E4 85 F1 | 	sub	objptr, ##38036
0b584     68 A6 B0 FD | 	call	#_converttoint
0b588     FD 12 02 F6 | 	mov	arg01, result1
0b58c     0C 1E 06 F1 | 	add	local01, #12
0b590     0F 13 62 FC | 	wrlong	arg01, local01
0b594     8C FC BF FD | 	call	#_pop
0b598     A7 FA 61 FC | 	wrlong	result1, fp
0b59c     04 4E 05 F1 | 	add	fp, #4
0b5a0     A7 FC 61 FC | 	wrlong	result2, fp
0b5a4     04 4E 05 F1 | 	add	fp, #4
0b5a8     A7 FE 61 FC | 	wrlong	result3, fp
0b5ac     08 4E 85 F1 | 	sub	fp, #8
0b5b0     50 00 00 FF 
0b5b4     04 E5 05 F1 | 	add	objptr, ##41220
0b5b8     F2 12 02 FB | 	rdlong	arg01, objptr
0b5bc     09 1F 02 F6 | 	mov	local01, arg01
0b5c0     02 1E 66 F0 | 	shl	local01, #2
0b5c4     09 1F 02 F1 | 	add	local01, arg01
0b5c8     02 1E 66 F0 | 	shl	local01, #2
0b5cc     06 00 00 FF 
0b5d0     70 E4 85 F1 | 	sub	objptr, ##3184
0b5d4     F2 1E 02 F1 | 	add	local01, objptr
0b5d8     A7 12 02 F6 | 	mov	arg01, fp
0b5dc     4A 00 00 FF 
0b5e0     94 E4 85 F1 | 	sub	objptr, ##38036
0b5e4     08 A6 B0 FD | 	call	#_converttoint
0b5e8     10 1E 06 F1 | 	add	local01, #16
0b5ec     0F FB 61 FC | 	wrlong	result1, local01
0b5f0                 | ' fortop+=1
0b5f0                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
0b5f0                 | ' 'if i> maxfor then printerror(36) : return
0b5f0                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
0b5f0                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
0b5f0                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
0b5f0                 | ' if compiledline(lineptr_e).result_type=token_end then
0b5f0     4A 00 00 FF 
0b5f4     80 E4 05 F1 | 	add	objptr, ##38016
0b5f8     F2 12 02 FB | 	rdlong	arg01, objptr
0b5fc     09 1F 02 F6 | 	mov	local01, arg01
0b600     01 1E 66 F0 | 	shl	local01, #1
0b604     09 1F 02 F1 | 	add	local01, arg01
0b608     02 1E 66 F0 | 	shl	local01, #2
0b60c     03 00 00 FF 
0b610     04 E4 85 F1 | 	sub	objptr, ##1540
0b614     F2 1E 02 F1 | 	add	local01, objptr
0b618     08 1E 06 F1 | 	add	local01, #8
0b61c     0F 1F 02 FB | 	rdlong	local01, local01
0b620     FE 1F 0E F2 | 	cmp	local01, #510 wz
0b624     47 00 00 FF 
0b628     7C E4 85 F1 | 	sub	objptr, ##36476
0b62c     70 00 90 5D |  if_ne	jmp	#LR__0980
0b630     50 00 00 FF 
0b634     04 E5 05 F1 | 	add	objptr, ##41220
0b638     F2 12 02 FB | 	rdlong	arg01, objptr
0b63c     09 1F 02 F6 | 	mov	local01, arg01
0b640     02 1E 66 F0 | 	shl	local01, #2
0b644     09 1F 02 F1 | 	add	local01, arg01
0b648     02 1E 66 F0 | 	shl	local01, #2
0b64c     06 00 00 FF 
0b650     70 E4 85 F1 | 	sub	objptr, ##3184
0b654     F2 1E 02 F1 | 	add	local01, objptr
0b658     06 00 00 FF 
0b65c     20 E4 05 F1 | 	add	objptr, ##3104
0b660     F2 12 02 FB | 	rdlong	arg01, objptr
0b664     0F 13 62 FC | 	wrlong	arg01, local01
0b668     50 E4 05 F1 | 	add	objptr, #80
0b66c     F2 12 02 FB | 	rdlong	arg01, objptr
0b670     09 1F 02 F6 | 	mov	local01, arg01
0b674     02 1E 66 F0 | 	shl	local01, #2
0b678     09 1F 02 F1 | 	add	local01, arg01
0b67c     02 1E 66 F0 | 	shl	local01, #2
0b680     06 00 00 FF 
0b684     70 E4 85 F1 | 	sub	objptr, ##3184
0b688     F2 1E 02 F1 | 	add	local01, objptr
0b68c     04 1E 06 F1 | 	add	local01, #4
0b690     0F 01 68 FC | 	wrlong	#0, local01
0b694     4A 00 00 FF 
0b698     94 E4 85 F1 | 	sub	objptr, ##38036
0b69c     78 00 90 FD | 	jmp	#LR__0981
0b6a0                 | LR__0980
0b6a0     50 00 00 FF 
0b6a4     04 E5 05 F1 | 	add	objptr, ##41220
0b6a8     F2 12 02 FB | 	rdlong	arg01, objptr
0b6ac     09 1F 02 F6 | 	mov	local01, arg01
0b6b0     02 1E 66 F0 | 	shl	local01, #2
0b6b4     09 1F 02 F1 | 	add	local01, arg01
0b6b8     02 1E 66 F0 | 	shl	local01, #2
0b6bc     06 00 00 FF 
0b6c0     70 E4 85 F1 | 	sub	objptr, ##3184
0b6c4     F2 1E 02 F1 | 	add	local01, objptr
0b6c8     06 00 00 FF 
0b6cc     28 E4 05 F1 | 	add	objptr, ##3112
0b6d0     F2 12 02 FB | 	rdlong	arg01, objptr
0b6d4     0F 13 62 FC | 	wrlong	arg01, local01
0b6d8     48 E4 05 F1 | 	add	objptr, #72
0b6dc     F2 12 02 FB | 	rdlong	arg01, objptr
0b6e0     09 1F 02 F6 | 	mov	local01, arg01
0b6e4     02 1E 66 F0 | 	shl	local01, #2
0b6e8     09 1F 02 F1 | 	add	local01, arg01
0b6ec     02 1E 66 F0 | 	shl	local01, #2
0b6f0     06 00 00 FF 
0b6f4     70 E4 85 F1 | 	sub	objptr, ##3184
0b6f8     F2 1E 02 F1 | 	add	local01, objptr
0b6fc     14 E4 85 F1 | 	sub	objptr, #20
0b700     F2 12 02 FB | 	rdlong	arg01, objptr
0b704     4A 00 00 FF 
0b708     80 E4 85 F1 | 	sub	objptr, ##38016
0b70c     01 12 06 F1 | 	add	arg01, #1
0b710     04 1E 06 F1 | 	add	local01, #4
0b714     0F 13 62 FC | 	wrlong	arg01, local01
0b718                 | LR__0981
0b718     A7 F0 03 F6 | 	mov	ptra, fp
0b71c     B2 00 A0 FD | 	call	#popregs_
0b720                 | _do_for_ret
0b720     2D 00 64 FD | 	ret
0b724                 | 
0b724                 | ' 
0b724                 | ' ' now do_next todo
0b724                 | ' 
0b724                 | ' sub do_return()
0b724                 | _do_return
0b724                 | ' if gosubtop>0 then
0b724     50 00 00 FF 
0b728     08 E5 05 F1 | 	add	objptr, ##41224
0b72c     F2 00 02 FB | 	rdlong	_var01, objptr
0b730     50 00 00 FF 
0b734     08 E5 85 F1 | 	sub	objptr, ##41224
0b738     01 00 56 F2 | 	cmps	_var01, #1 wc
0b73c     8C 00 90 CD |  if_b	jmp	#LR__0990
0b740     50 00 00 FF 
0b744     08 E5 05 F1 | 	add	objptr, ##41224
0b748     F2 00 02 FB | 	rdlong	_var01, objptr
0b74c     03 00 66 F0 | 	shl	_var01, #3
0b750     03 00 00 FF 
0b754     60 E5 85 F1 | 	sub	objptr, ##1888
0b758     F2 00 02 F1 | 	add	_var01, objptr
0b75c     00 01 02 FB | 	rdlong	_var01, _var01
0b760     03 00 00 FF 
0b764     0C E5 05 F1 | 	add	objptr, ##1804
0b768     F2 00 62 FC | 	wrlong	_var01, objptr
0b76c     54 E4 05 F1 | 	add	objptr, #84
0b770     F2 00 02 FB | 	rdlong	_var01, objptr
0b774     03 00 66 F0 | 	shl	_var01, #3
0b778     03 00 00 FF 
0b77c     60 E5 85 F1 | 	sub	objptr, ##1888
0b780     F2 00 02 F1 | 	add	_var01, objptr
0b784     04 00 06 F1 | 	add	_var01, #4
0b788     00 01 02 FB | 	rdlong	_var01, _var01
0b78c     03 00 00 FF 
0b790     10 E5 05 F1 | 	add	objptr, ##1808
0b794     F2 00 62 FC | 	wrlong	_var01, objptr
0b798     06 00 00 FF 
0b79c     3C E4 85 F1 | 	sub	objptr, ##3132
0b7a0     F2 00 02 FB | 	rdlong	_var01, objptr
0b7a4     01 00 86 F1 | 	sub	_var01, #1
0b7a8     04 E4 05 F1 | 	add	objptr, #4
0b7ac     F2 00 62 FC | 	wrlong	_var01, objptr
0b7b0     06 00 00 FF 
0b7b4     88 E4 05 F1 | 	add	objptr, ##3208
0b7b8     F2 00 02 FB | 	rdlong	_var01, objptr
0b7bc     01 00 86 F1 | 	sub	_var01, #1
0b7c0     F2 00 62 FC | 	wrlong	_var01, objptr
0b7c4     50 00 00 FF 
0b7c8     08 E5 85 F1 | 	sub	objptr, ##41224
0b7cc                 | LR__0990
0b7cc                 | _do_return_ret
0b7cc     2D 00 64 FD | 	ret
0b7d0                 | 
0b7d0                 | ' 
0b7d0                 | ' sub do_pop()
0b7d0                 | _do_pop
0b7d0                 | ' if gosubtop>0 then  gosubtop -=1 
0b7d0     50 00 00 FF 
0b7d4     08 E5 05 F1 | 	add	objptr, ##41224
0b7d8     F2 00 02 FB | 	rdlong	_var01, objptr
0b7dc     50 00 00 FF 
0b7e0     08 E5 85 F1 | 	sub	objptr, ##41224
0b7e4     01 00 56 F2 | 	cmps	_var01, #1 wc
0b7e8     50 00 00 3F 
0b7ec     08 E5 05 31 |  if_ae	add	objptr, ##41224
0b7f0     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
0b7f4     01 00 86 31 |  if_ae	sub	_var01, #1
0b7f8     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
0b7fc     50 00 00 3F 
0b800     08 E5 85 31 |  if_ae	sub	objptr, ##41224
0b804                 | _do_pop_ret
0b804     2D 00 64 FD | 	ret
0b808                 | 
0b808                 | ' 
0b808                 | ' sub do_next()
0b808                 | _do_next
0b808     04 4A 05 F6 | 	mov	COUNT_, #4
0b80c     A8 00 A0 FD | 	call	#pushregs_
0b810     10 FA BF FD | 	call	#_pop
0b814     FD 1E 02 F6 | 	mov	local01, result1
0b818     FE 20 02 F6 | 	mov	local02, result2
0b81c     FF 22 02 F6 | 	mov	local03, result3
0b820                 | ' 
0b820                 | ' t1=pop() :varnum=t1.result.uresult
0b820                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
0b820     50 00 00 FF 
0b824     04 E5 05 F1 | 	add	objptr, ##41220
0b828     F2 12 02 FB | 	rdlong	arg01, objptr
0b82c     09 15 02 F6 | 	mov	arg02, arg01
0b830     02 14 66 F0 | 	shl	arg02, #2
0b834     09 15 02 F1 | 	add	arg02, arg01
0b838     02 14 66 F0 | 	shl	arg02, #2
0b83c     06 00 00 FF 
0b840     70 E4 85 F1 | 	sub	objptr, ##3184
0b844     F2 14 02 F1 | 	add	arg02, objptr
0b848     08 14 06 F1 | 	add	arg02, #8
0b84c     0A 15 02 FB | 	rdlong	arg02, arg02
0b850     0F 15 0A F2 | 	cmp	arg02, local01 wz
0b854     4A 00 00 FF 
0b858     94 E4 85 F1 | 	sub	objptr, ##38036
0b85c     0C 00 90 AD |  if_e	jmp	#LR__1000
0b860     25 12 06 F6 | 	mov	arg01, #37
0b864     04 1D B1 FD | 	call	#_printerror
0b868     54 03 90 FD | 	jmp	#LR__1007
0b86c                 | LR__1000
0b86c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
0b86c     0F 15 02 F6 | 	mov	arg02, local01
0b870     04 14 66 F0 | 	shl	arg02, #4
0b874     14 00 00 FF 
0b878     F8 E5 05 F1 | 	add	objptr, ##10744
0b87c     F2 14 02 F1 | 	add	arg02, objptr
0b880     0C 14 06 F1 | 	add	arg02, #12
0b884     0A 15 02 FB | 	rdlong	arg02, arg02
0b888     1E 14 0E F2 | 	cmp	arg02, #30 wz
0b88c     14 00 00 FF 
0b890     F8 E5 85 F1 | 	sub	objptr, ##10744
0b894     54 00 90 5D |  if_ne	jmp	#LR__1001
0b898     0F 15 02 F6 | 	mov	arg02, local01
0b89c     04 14 66 F0 | 	shl	arg02, #4
0b8a0     14 00 00 FF 
0b8a4     F8 E5 05 F1 | 	add	objptr, ##10744
0b8a8     F2 14 02 F1 | 	add	arg02, objptr
0b8ac     0C 14 06 F1 | 	add	arg02, #12
0b8b0     0A 39 68 FC | 	wrlong	#28, arg02
0b8b4     0F 25 02 F6 | 	mov	local04, local01
0b8b8     04 24 66 F0 | 	shl	local04, #4
0b8bc     F2 24 02 F1 | 	add	local04, objptr
0b8c0     0F 13 02 F6 | 	mov	arg01, local01
0b8c4     04 12 66 F0 | 	shl	arg01, #4
0b8c8     F2 12 02 F1 | 	add	arg01, objptr
0b8cc     04 12 06 F1 | 	add	arg01, #4
0b8d0     09 13 02 FB | 	rdlong	arg01, arg01
0b8d4     14 00 00 FF 
0b8d8     F8 E5 85 F1 | 	sub	objptr, ##10744
0b8dc     01 14 06 F6 | 	mov	arg02, #1
0b8e0     9C 82 B1 FD | 	call	#__system___float_tointeger
0b8e4     04 24 06 F1 | 	add	local04, #4
0b8e8     12 FB 61 FC | 	wrlong	result1, local04
0b8ec                 | LR__1001
0b8ec     50 00 00 FF 
0b8f0     04 E5 05 F1 | 	add	objptr, ##41220
0b8f4     F2 12 02 FB | 	rdlong	arg01, objptr
0b8f8     09 25 02 F6 | 	mov	local04, arg01
0b8fc     02 24 66 F0 | 	shl	local04, #2
0b900     09 25 02 F1 | 	add	local04, arg01
0b904     02 24 66 F0 | 	shl	local04, #2
0b908     06 00 00 FF 
0b90c     70 E4 85 F1 | 	sub	objptr, ##3184
0b910     F2 24 02 F1 | 	add	local04, objptr
0b914     0C 24 06 F1 | 	add	local04, #12
0b918     12 25 02 FB | 	rdlong	local04, local04
0b91c     0F 13 02 F6 | 	mov	arg01, local01
0b920     04 12 66 F0 | 	shl	arg01, #4
0b924     35 00 00 FF 
0b928     9C E4 85 F1 | 	sub	objptr, ##27292
0b92c     F2 12 02 F1 | 	add	arg01, objptr
0b930     0F FF 01 F6 | 	mov	result3, local01
0b934     04 FE 65 F0 | 	shl	result3, #4
0b938     F2 FE 01 F1 | 	add	result3, objptr
0b93c     04 FE 05 F1 | 	add	result3, #4
0b940     FF FE 01 FB | 	rdlong	result3, result3
0b944     12 FF 01 F1 | 	add	result3, local04
0b948     04 12 06 F1 | 	add	arg01, #4
0b94c     09 FF 61 FC | 	wrlong	result3, arg01
0b950                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
0b950                 | ' if fortable(fortop).stepval>=0 then
0b950     3B 00 00 FF 
0b954     0C E5 05 F1 | 	add	objptr, ##30476
0b958     F2 12 02 FB | 	rdlong	arg01, objptr
0b95c     09 25 02 F6 | 	mov	local04, arg01
0b960     02 24 66 F0 | 	shl	local04, #2
0b964     09 25 02 F1 | 	add	local04, arg01
0b968     02 24 66 F0 | 	shl	local04, #2
0b96c     06 00 00 FF 
0b970     70 E4 85 F1 | 	sub	objptr, ##3184
0b974     F2 24 02 F1 | 	add	local04, objptr
0b978     0C 24 06 F1 | 	add	local04, #12
0b97c     12 25 02 FB | 	rdlong	local04, local04
0b980     00 24 56 F2 | 	cmps	local04, #0 wc
0b984     4A 00 00 FF 
0b988     94 E4 85 F1 | 	sub	objptr, ##38036
0b98c     78 00 90 CD |  if_b	jmp	#LR__1002
0b990                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
0b990     04 1E 66 F0 | 	shl	local01, #4
0b994     14 00 00 FF 
0b998     F8 E5 05 F1 | 	add	objptr, ##10744
0b99c     F2 1E 02 F1 | 	add	local01, objptr
0b9a0     3B 00 00 FF 
0b9a4     0C E5 05 F1 | 	add	objptr, ##30476
0b9a8     F2 24 02 FB | 	rdlong	local04, objptr
0b9ac     12 13 02 F6 | 	mov	arg01, local04
0b9b0     02 12 66 F0 | 	shl	arg01, #2
0b9b4     12 13 02 F1 | 	add	arg01, local04
0b9b8     02 12 66 F0 | 	shl	arg01, #2
0b9bc     06 00 00 FF 
0b9c0     70 E4 85 F1 | 	sub	objptr, ##3184
0b9c4     F2 12 02 F1 | 	add	arg01, objptr
0b9c8     04 1E 06 F1 | 	add	local01, #4
0b9cc     0F 25 02 FB | 	rdlong	local04, local01
0b9d0     10 12 06 F1 | 	add	arg01, #16
0b9d4     09 13 02 FB | 	rdlong	arg01, arg01
0b9d8     09 25 5A F2 | 	cmps	local04, arg01 wcz
0b9dc     4A 00 00 FF 
0b9e0     94 E4 85 F1 | 	sub	objptr, ##38036
0b9e4     9C 00 90 ED |  if_be	jmp	#LR__1004
0b9e8     50 00 00 FF 
0b9ec     04 E5 05 F1 | 	add	objptr, ##41220
0b9f0     F2 24 02 FB | 	rdlong	local04, objptr
0b9f4     01 24 86 F1 | 	sub	local04, #1
0b9f8     F2 24 62 FC | 	wrlong	local04, objptr
0b9fc     50 00 00 FF 
0ba00     04 E5 85 F1 | 	sub	objptr, ##41220
0ba04     B8 01 90 FD | 	jmp	#LR__1007
0ba08                 | LR__1002
0ba08                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
0ba08     0F 13 02 F6 | 	mov	arg01, local01
0ba0c     04 12 66 F0 | 	shl	arg01, #4
0ba10     14 00 00 FF 
0ba14     F8 E5 05 F1 | 	add	objptr, ##10744
0ba18     F2 12 02 F1 | 	add	arg01, objptr
0ba1c     3B 00 00 FF 
0ba20     0C E5 05 F1 | 	add	objptr, ##30476
0ba24     F2 24 02 FB | 	rdlong	local04, objptr
0ba28     12 1F 02 F6 | 	mov	local01, local04
0ba2c     02 1E 66 F0 | 	shl	local01, #2
0ba30     12 1F 02 F1 | 	add	local01, local04
0ba34     02 1E 66 F0 | 	shl	local01, #2
0ba38     06 00 00 FF 
0ba3c     70 E4 85 F1 | 	sub	objptr, ##3184
0ba40     F2 1E 02 F1 | 	add	local01, objptr
0ba44     04 12 06 F1 | 	add	arg01, #4
0ba48     09 13 02 FB | 	rdlong	arg01, arg01
0ba4c     10 1E 06 F1 | 	add	local01, #16
0ba50     0F 1F 02 FB | 	rdlong	local01, local01
0ba54     0F 13 52 F2 | 	cmps	arg01, local01 wc
0ba58     4A 00 00 FF 
0ba5c     94 E4 85 F1 | 	sub	objptr, ##38036
0ba60     20 00 90 3D |  if_ae	jmp	#LR__1003
0ba64     50 00 00 FF 
0ba68     04 E5 05 F1 | 	add	objptr, ##41220
0ba6c     F2 24 02 FB | 	rdlong	local04, objptr
0ba70     01 24 86 F1 | 	sub	local04, #1
0ba74     F2 24 62 FC | 	wrlong	local04, objptr
0ba78     50 00 00 FF 
0ba7c     04 E5 85 F1 | 	sub	objptr, ##41220
0ba80     3C 01 90 FD | 	jmp	#LR__1007
0ba84                 | LR__1003
0ba84                 | LR__1004
0ba84                 | ' ' if not returned, goto pointer 
0ba84                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
0ba84     50 00 00 FF 
0ba88     E8 E4 05 F1 | 	add	objptr, ##41192
0ba8c     F2 24 02 FB | 	rdlong	local04, objptr
0ba90     50 00 00 FF 
0ba94     E8 E4 85 F1 | 	sub	objptr, ##41192
0ba98     01 24 16 F2 | 	cmp	local04, #1 wc
0ba9c     DC 00 90 CD |  if_b	jmp	#LR__1005
0baa0     50 00 00 FF 
0baa4     04 E5 05 F1 | 	add	objptr, ##41220
0baa8     F2 1E 02 FB | 	rdlong	local01, objptr
0baac     0F 25 02 F6 | 	mov	local04, local01
0bab0     02 24 66 F0 | 	shl	local04, #2
0bab4     0F 25 02 F1 | 	add	local04, local01
0bab8     02 24 66 F0 | 	shl	local04, #2
0babc     06 00 00 FF 
0bac0     70 E4 85 F1 | 	sub	objptr, ##3184
0bac4     F2 24 02 F1 | 	add	local04, objptr
0bac8     06 00 00 FF 
0bacc     20 E4 05 F1 | 	add	objptr, ##3104
0bad0     F2 1E 02 FB | 	rdlong	local01, objptr
0bad4     50 00 00 FF 
0bad8     B4 E4 85 F1 | 	sub	objptr, ##41140
0badc     12 25 02 FB | 	rdlong	local04, local04
0bae0     12 1F 0A F2 | 	cmp	local01, local04 wz
0bae4     94 00 90 AD |  if_e	jmp	#LR__1005
0bae8     50 00 00 FF 
0baec     04 E5 05 F1 | 	add	objptr, ##41220
0baf0     F2 1E 02 FB | 	rdlong	local01, objptr
0baf4     0F 25 02 F6 | 	mov	local04, local01
0baf8     02 24 66 F0 | 	shl	local04, #2
0bafc     0F 25 02 F1 | 	add	local04, local01
0bb00     02 24 66 F0 | 	shl	local04, #2
0bb04     06 00 00 FF 
0bb08     70 E4 85 F1 | 	sub	objptr, ##3184
0bb0c     F2 24 02 F1 | 	add	local04, objptr
0bb10     12 25 02 FB | 	rdlong	local04, local04
0bb14     06 00 00 FF 
0bb18     20 E4 05 F1 | 	add	objptr, ##3104
0bb1c     F2 24 62 FC | 	wrlong	local04, objptr
0bb20     50 E4 05 F1 | 	add	objptr, #80
0bb24     F2 1E 02 FB | 	rdlong	local01, objptr
0bb28     0F 25 02 F6 | 	mov	local04, local01
0bb2c     02 24 66 F0 | 	shl	local04, #2
0bb30     0F 25 02 F1 | 	add	local04, local01
0bb34     02 24 66 F0 | 	shl	local04, #2
0bb38     06 00 00 FF 
0bb3c     70 E4 85 F1 | 	sub	objptr, ##3184
0bb40     F2 24 02 F1 | 	add	local04, objptr
0bb44     04 24 06 F1 | 	add	local04, #4
0bb48     12 25 02 FB | 	rdlong	local04, local04
0bb4c     06 00 00 FF 
0bb50     24 E4 05 F1 | 	add	objptr, ##3108
0bb54     F2 24 62 FC | 	wrlong	local04, objptr
0bb58     06 00 00 FF 
0bb5c     3C E4 85 F1 | 	sub	objptr, ##3132
0bb60     F2 24 02 FB | 	rdlong	local04, objptr
0bb64     01 24 86 F1 | 	sub	local04, #1
0bb68     04 E4 05 F1 | 	add	objptr, #4
0bb6c     F2 24 62 FC | 	wrlong	local04, objptr
0bb70     4A 00 00 FF 
0bb74     80 E4 85 F1 | 	sub	objptr, ##38016
0bb78     44 00 90 FD | 	jmp	#LR__1006
0bb7c                 | LR__1005
0bb7c     50 00 00 FF 
0bb80     04 E5 05 F1 | 	add	objptr, ##41220
0bb84     F2 24 02 FB | 	rdlong	local04, objptr
0bb88     12 1F 02 F6 | 	mov	local01, local04
0bb8c     02 1E 66 F0 | 	shl	local01, #2
0bb90     12 1F 02 F1 | 	add	local01, local04
0bb94     02 1E 66 F0 | 	shl	local01, #2
0bb98     06 00 00 FF 
0bb9c     70 E4 85 F1 | 	sub	objptr, ##3184
0bba0     F2 1E 02 F1 | 	add	local01, objptr
0bba4     04 1E 06 F1 | 	add	local01, #4
0bba8     0F 1F 02 FB | 	rdlong	local01, local01
0bbac     01 1E 86 F1 | 	sub	local01, #1
0bbb0     14 E4 85 F1 | 	sub	objptr, #20
0bbb4     F2 1E 62 FC | 	wrlong	local01, objptr
0bbb8     4A 00 00 FF 
0bbbc     80 E4 85 F1 | 	sub	objptr, ##38016
0bbc0                 | LR__1006
0bbc0                 | LR__1007
0bbc0     A7 F0 03 F6 | 	mov	ptra, fp
0bbc4     B2 00 A0 FD | 	call	#popregs_
0bbc8                 | _do_next_ret
0bbc8     2D 00 64 FD | 	ret
0bbcc                 | 
0bbcc                 | ' 
0bbcc                 | ' 
0bbcc                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0bbcc                 | ' 
0bbcc                 | ' sub do_push
0bbcc                 | _do_push
0bbcc                 | ' if stackpointer<maxstack then 
0bbcc     43 00 00 FF 
0bbd0     58 E4 05 F1 | 	add	objptr, ##34392
0bbd4     F2 00 02 FB | 	rdlong	_var01, objptr
0bbd8     43 00 00 FF 
0bbdc     58 E4 85 F1 | 	sub	objptr, ##34392
0bbe0     01 00 00 FF 
0bbe4     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bbe8     F8 00 90 3D |  if_ae	jmp	#LR__1010
0bbec     4A 00 00 FF 
0bbf0     80 E4 05 F1 | 	add	objptr, ##38016
0bbf4     F2 02 02 FB | 	rdlong	_var02, objptr
0bbf8     01 05 02 F6 | 	mov	_var03, _var02
0bbfc     01 04 66 F0 | 	shl	_var03, #1
0bc00     01 05 02 F1 | 	add	_var03, _var02
0bc04     02 04 66 F0 | 	shl	_var03, #2
0bc08     03 00 00 FF 
0bc0c     04 E4 85 F1 | 	sub	objptr, ##1540
0bc10     F2 04 02 F1 | 	add	_var03, objptr
0bc14     02 01 02 FB | 	rdlong	_var01, _var03
0bc18     04 04 06 F1 | 	add	_var03, #4
0bc1c     02 07 02 FB | 	rdlong	_var04, _var03
0bc20     01 05 02 F6 | 	mov	_var03, _var02
0bc24     01 04 66 F0 | 	shl	_var03, #1
0bc28     01 05 02 F1 | 	add	_var03, _var02
0bc2c     02 04 66 F0 | 	shl	_var03, #2
0bc30     F2 04 02 F1 | 	add	_var03, objptr
0bc34     08 04 06 F1 | 	add	_var03, #8
0bc38     02 03 02 FB | 	rdlong	_var02, _var03
0bc3c     04 00 00 FF 
0bc40     24 E4 85 F1 | 	sub	objptr, ##2084
0bc44     F2 04 02 FB | 	rdlong	_var03, objptr
0bc48     02 09 02 F6 | 	mov	_var05, _var03
0bc4c     01 08 66 F0 | 	shl	_var05, #1
0bc50     02 09 02 F1 | 	add	_var05, _var03
0bc54     02 08 66 F0 | 	shl	_var05, #2
0bc58     0C 00 00 FF 
0bc5c     0C E4 85 F1 | 	sub	objptr, ##6156
0bc60     F2 08 02 F1 | 	add	_var05, objptr
0bc64     04 01 62 FC | 	wrlong	_var01, _var05
0bc68     0C 00 00 FF 
0bc6c     0C E4 05 F1 | 	add	objptr, ##6156
0bc70     F2 08 02 FB | 	rdlong	_var05, objptr
0bc74     04 05 02 F6 | 	mov	_var03, _var05
0bc78     01 04 66 F0 | 	shl	_var03, #1
0bc7c     04 05 02 F1 | 	add	_var03, _var05
0bc80     02 04 66 F0 | 	shl	_var03, #2
0bc84     0C 00 00 FF 
0bc88     0C E4 85 F1 | 	sub	objptr, ##6156
0bc8c     F2 04 02 F1 | 	add	_var03, objptr
0bc90     04 04 06 F1 | 	add	_var03, #4
0bc94     02 07 62 FC | 	wrlong	_var04, _var03
0bc98     0C 00 00 FF 
0bc9c     0C E4 05 F1 | 	add	objptr, ##6156
0bca0     F2 08 02 FB | 	rdlong	_var05, objptr
0bca4     04 07 02 F6 | 	mov	_var04, _var05
0bca8     01 06 66 F0 | 	shl	_var04, #1
0bcac     04 07 02 F1 | 	add	_var04, _var05
0bcb0     02 06 66 F0 | 	shl	_var04, #2
0bcb4     0C 00 00 FF 
0bcb8     0C E4 85 F1 | 	sub	objptr, ##6156
0bcbc     F2 06 02 F1 | 	add	_var04, objptr
0bcc0     08 06 06 F1 | 	add	_var04, #8
0bcc4     03 03 62 FC | 	wrlong	_var02, _var04
0bcc8     0C 00 00 FF 
0bccc     0C E4 05 F1 | 	add	objptr, ##6156
0bcd0     F2 00 02 FB | 	rdlong	_var01, objptr
0bcd4     01 00 06 F1 | 	add	_var01, #1
0bcd8     F2 00 62 FC | 	wrlong	_var01, objptr
0bcdc     43 00 00 FF 
0bce0     58 E4 85 F1 | 	sub	objptr, ##34392
0bce4                 | LR__1010
0bce4                 | _do_push_ret
0bce4     2D 00 64 FD | 	ret
0bce8                 | 
0bce8                 | ' 
0bce8                 | '   
0bce8                 | ' sub csave_block(address as ulong)
0bce8                 | _csave_block
0bce8     09 01 02 F6 | 	mov	_var01, arg01
0bcec                 | ' 
0bcec                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0bcec                 | ' ' we enter it at the state of playing 1 kHz header tone
0bcec                 | ' 
0bcec                 | ' for i=0 to 63 step 2
0bcec     00 02 06 F6 | 	mov	_var02, #0
0bcf0                 | LR__1020
0bcf0                 | '   do: loop until lpeek(base+64*7)>32768
0bcf0     37 00 00 FF 
0bcf4     10 E4 05 F1 | 	add	objptr, ##28176
0bcf8     97 0C 48 FB | 	callpa	#(@LR__1022-@LR__1021)>>2,fcache_load_ptr_
0bcfc                 | LR__1021
0bcfc     F2 12 02 FB | 	rdlong	arg01, objptr
0bd00     C0 13 06 F1 | 	add	arg01, #448
0bd04     09 FB 01 FB | 	rdlong	result1, arg01
0bd08     40 00 00 FF 
0bd0c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bd10     E8 FF 9F CD |  if_b	jmp	#LR__1021
0bd14                 | LR__1022
0bd14     00 13 02 F6 | 	mov	arg01, _var01
0bd18     01 05 02 F6 | 	mov	_var03, _var02
0bd1c     02 04 66 F0 | 	shl	_var03, #2
0bd20     02 13 02 F1 | 	add	arg01, _var03
0bd24     09 07 02 FB | 	rdlong	_var04, arg01
0bd28     1A 00 00 FF 
0bd2c     F8 E5 05 F1 | 	add	objptr, ##13816
0bd30     F2 06 62 FC | 	wrlong	_var04, objptr
0bd34     52 00 00 FF 
0bd38     08 E4 85 F1 | 	sub	objptr, ##41992
0bd3c                 | '   q=lpeek(address+4*i)
0bd3c                 | '      for bit=0 to 31
0bd3c     00 08 06 F6 | 	mov	_var05, #0
0bd40     97 84 48 FB | 	callpa	#(@LR__1027-@LR__1023)>>2,fcache_load_ptr_
0bd44                 | LR__1023
0bd44                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bd44     52 00 00 FF 
0bd48     08 E4 05 F1 | 	add	objptr, ##41992
0bd4c     F2 06 02 FB | 	rdlong	_var04, objptr
0bd50     52 00 00 FF 
0bd54     08 E4 85 F1 | 	sub	objptr, ##41992
0bd58     04 05 C2 F9 | 	decod	_var03, _var05
0bd5c     02 07 CA F7 | 	test	_var04, _var03 wz
0bd60     60 00 90 AD |  if_e	jmp	#LR__1024
0bd64     04 05 02 F6 | 	mov	_var03, _var05
0bd68     02 04 66 F0 | 	shl	_var03, #2
0bd6c     4D 00 00 FF 
0bd70     B0 E5 05 F1 | 	add	objptr, ##39856
0bd74     F2 04 02 F1 | 	add	_var03, objptr
0bd78     02 FF 48 FC | 	wrbyte	#127, _var03
0bd7c     04 05 02 F6 | 	mov	_var03, _var05
0bd80     02 04 66 F0 | 	shl	_var03, #2
0bd84     01 04 06 F1 | 	add	_var03, #1
0bd88     F2 04 02 F1 | 	add	_var03, objptr
0bd8c     02 01 49 FC | 	wrbyte	#128, _var03
0bd90     04 05 02 F6 | 	mov	_var03, _var05
0bd94     02 04 66 F0 | 	shl	_var03, #2
0bd98     02 04 06 F1 | 	add	_var03, #2
0bd9c     F2 04 02 F1 | 	add	_var03, objptr
0bda0     02 FF 48 FC | 	wrbyte	#127, _var03
0bda4     04 05 02 F6 | 	mov	_var03, _var05
0bda8     02 04 66 F0 | 	shl	_var03, #2
0bdac     03 04 06 F1 | 	add	_var03, #3
0bdb0     F2 04 02 F1 | 	add	_var03, objptr
0bdb4     02 01 49 FC | 	wrbyte	#128, _var03
0bdb8     4D 00 00 FF 
0bdbc     B0 E5 85 F1 | 	sub	objptr, ##39856
0bdc0     5C 00 90 FD | 	jmp	#LR__1025
0bdc4                 | LR__1024
0bdc4     04 05 02 F6 | 	mov	_var03, _var05
0bdc8     02 04 66 F0 | 	shl	_var03, #2
0bdcc     4D 00 00 FF 
0bdd0     B0 E5 05 F1 | 	add	objptr, ##39856
0bdd4     F2 04 02 F1 | 	add	_var03, objptr
0bdd8     02 01 49 FC | 	wrbyte	#128, _var03
0bddc     04 05 02 F6 | 	mov	_var03, _var05
0bde0     02 04 66 F0 | 	shl	_var03, #2
0bde4     01 04 06 F1 | 	add	_var03, #1
0bde8     F2 04 02 F1 | 	add	_var03, objptr
0bdec     02 01 49 FC | 	wrbyte	#128, _var03
0bdf0     04 05 02 F6 | 	mov	_var03, _var05
0bdf4     02 04 66 F0 | 	shl	_var03, #2
0bdf8     02 04 06 F1 | 	add	_var03, #2
0bdfc     F2 04 02 F1 | 	add	_var03, objptr
0be00     02 FF 48 FC | 	wrbyte	#127, _var03
0be04     04 05 02 F6 | 	mov	_var03, _var05
0be08     02 04 66 F0 | 	shl	_var03, #2
0be0c     03 04 06 F1 | 	add	_var03, #3
0be10     F2 04 02 F1 | 	add	_var03, objptr
0be14     02 FF 48 FC | 	wrbyte	#127, _var03
0be18     4D 00 00 FF 
0be1c     B0 E5 85 F1 | 	sub	objptr, ##39856
0be20                 | LR__1025
0be20     01 08 06 F1 | 	add	_var05, #1
0be24     20 08 56 F2 | 	cmps	_var05, #32 wc
0be28     18 FF 9F CD |  if_b	jmp	#LR__1023
0be2c                 | '   do: loop until lpeek(base+64*7)<32768
0be2c     37 00 00 FF 
0be30     10 E4 05 F1 | 	add	objptr, ##28176
0be34                 | LR__1026
0be34     F2 12 02 FB | 	rdlong	arg01, objptr
0be38     C0 13 06 F1 | 	add	arg01, #448
0be3c     09 FB 01 FB | 	rdlong	result1, arg01
0be40     40 00 00 FF 
0be44     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0be48     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0be4c                 | LR__1027
0be4c     00 13 02 F6 | 	mov	arg01, _var01
0be50     04 12 06 F1 | 	add	arg01, #4
0be54     01 05 02 F6 | 	mov	_var03, _var02
0be58     02 04 66 F0 | 	shl	_var03, #2
0be5c     02 13 02 F1 | 	add	arg01, _var03
0be60     09 07 02 FB | 	rdlong	_var04, arg01
0be64     1A 00 00 FF 
0be68     F8 E5 05 F1 | 	add	objptr, ##13816
0be6c     F2 06 62 FC | 	wrlong	_var04, objptr
0be70     52 00 00 FF 
0be74     08 E4 85 F1 | 	sub	objptr, ##41992
0be78                 | '   q=lpeek(address+4+4*i)
0be78                 | '      for bit=0 to 31
0be78     00 08 06 F6 | 	mov	_var05, #0
0be7c     97 94 48 FB | 	callpa	#(@LR__1031-@LR__1028)>>2,fcache_load_ptr_
0be80                 | LR__1028
0be80                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0be80     52 00 00 FF 
0be84     08 E4 05 F1 | 	add	objptr, ##41992
0be88     F2 06 02 FB | 	rdlong	_var04, objptr
0be8c     52 00 00 FF 
0be90     08 E4 85 F1 | 	sub	objptr, ##41992
0be94     04 05 C2 F9 | 	decod	_var03, _var05
0be98     02 07 CA F7 | 	test	_var04, _var03 wz
0be9c     80 00 90 AD |  if_e	jmp	#LR__1029
0bea0     04 0B 02 F6 | 	mov	_var06, _var05
0bea4     02 0A 66 F0 | 	shl	_var06, #2
0bea8     80 04 06 F6 | 	mov	_var03, #128
0beac     05 05 02 F1 | 	add	_var03, _var06
0beb0     4D 00 00 FF 
0beb4     B0 E5 05 F1 | 	add	objptr, ##39856
0beb8     F2 04 02 F1 | 	add	_var03, objptr
0bebc     02 FF 48 FC | 	wrbyte	#127, _var03
0bec0     04 0B 02 F6 | 	mov	_var06, _var05
0bec4     02 0A 66 F0 | 	shl	_var06, #2
0bec8     80 04 06 F6 | 	mov	_var03, #128
0becc     05 05 02 F1 | 	add	_var03, _var06
0bed0     01 04 06 F1 | 	add	_var03, #1
0bed4     F2 04 02 F1 | 	add	_var03, objptr
0bed8     02 01 49 FC | 	wrbyte	#128, _var03
0bedc     04 0B 02 F6 | 	mov	_var06, _var05
0bee0     02 0A 66 F0 | 	shl	_var06, #2
0bee4     80 04 06 F6 | 	mov	_var03, #128
0bee8     05 05 02 F1 | 	add	_var03, _var06
0beec     02 04 06 F1 | 	add	_var03, #2
0bef0     F2 04 02 F1 | 	add	_var03, objptr
0bef4     02 FF 48 FC | 	wrbyte	#127, _var03
0bef8     04 0B 02 F6 | 	mov	_var06, _var05
0befc     02 0A 66 F0 | 	shl	_var06, #2
0bf00     80 04 06 F6 | 	mov	_var03, #128
0bf04     05 05 02 F1 | 	add	_var03, _var06
0bf08     03 04 06 F1 | 	add	_var03, #3
0bf0c     F2 04 02 F1 | 	add	_var03, objptr
0bf10     02 01 49 FC | 	wrbyte	#128, _var03
0bf14     4D 00 00 FF 
0bf18     B0 E5 85 F1 | 	sub	objptr, ##39856
0bf1c     7C 00 90 FD | 	jmp	#LR__1030
0bf20                 | LR__1029
0bf20     04 0B 02 F6 | 	mov	_var06, _var05
0bf24     02 0A 66 F0 | 	shl	_var06, #2
0bf28     80 04 06 F6 | 	mov	_var03, #128
0bf2c     05 05 02 F1 | 	add	_var03, _var06
0bf30     4D 00 00 FF 
0bf34     B0 E5 05 F1 | 	add	objptr, ##39856
0bf38     F2 04 02 F1 | 	add	_var03, objptr
0bf3c     02 01 49 FC | 	wrbyte	#128, _var03
0bf40     04 0B 02 F6 | 	mov	_var06, _var05
0bf44     02 0A 66 F0 | 	shl	_var06, #2
0bf48     80 04 06 F6 | 	mov	_var03, #128
0bf4c     05 05 02 F1 | 	add	_var03, _var06
0bf50     01 04 06 F1 | 	add	_var03, #1
0bf54     F2 04 02 F1 | 	add	_var03, objptr
0bf58     02 01 49 FC | 	wrbyte	#128, _var03
0bf5c     04 0B 02 F6 | 	mov	_var06, _var05
0bf60     02 0A 66 F0 | 	shl	_var06, #2
0bf64     80 04 06 F6 | 	mov	_var03, #128
0bf68     05 05 02 F1 | 	add	_var03, _var06
0bf6c     02 04 06 F1 | 	add	_var03, #2
0bf70     F2 04 02 F1 | 	add	_var03, objptr
0bf74     02 FF 48 FC | 	wrbyte	#127, _var03
0bf78     04 0B 02 F6 | 	mov	_var06, _var05
0bf7c     02 0A 66 F0 | 	shl	_var06, #2
0bf80     80 04 06 F6 | 	mov	_var03, #128
0bf84     05 05 02 F1 | 	add	_var03, _var06
0bf88     03 04 06 F1 | 	add	_var03, #3
0bf8c     F2 04 02 F1 | 	add	_var03, objptr
0bf90     02 FF 48 FC | 	wrbyte	#127, _var03
0bf94     4D 00 00 FF 
0bf98     B0 E5 85 F1 | 	sub	objptr, ##39856
0bf9c                 | LR__1030
0bf9c     01 08 06 F1 | 	add	_var05, #1
0bfa0     20 08 56 F2 | 	cmps	_var05, #32 wc
0bfa4     D8 FE 9F CD |  if_b	jmp	#LR__1028
0bfa8                 | LR__1031
0bfa8     02 02 06 F1 | 	add	_var02, #2
0bfac     40 02 56 F2 | 	cmps	_var02, #64 wc
0bfb0     3C FD 9F CD |  if_b	jmp	#LR__1020
0bfb4                 | ' do: loop until lpeek(base+64*7)>32768
0bfb4     37 00 00 FF 
0bfb8     10 E4 05 F1 | 	add	objptr, ##28176
0bfbc     97 84 48 FB | 	callpa	#(@LR__1040-@LR__1032)>>2,fcache_load_ptr_
0bfc0                 | LR__1032
0bfc0     F2 12 02 FB | 	rdlong	arg01, objptr
0bfc4     C0 13 06 F1 | 	add	arg01, #448
0bfc8     09 FB 01 FB | 	rdlong	result1, arg01
0bfcc     40 00 00 FF 
0bfd0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bfd4     E8 FF 9F CD |  if_b	jmp	#LR__1032
0bfd8     37 00 00 FF 
0bfdc     10 E4 85 F1 | 	sub	objptr, ##28176
0bfe0                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bfe0     00 02 06 F6 | 	mov	_var02, #0
0bfe4                 | LR__1033
0bfe4     01 07 52 F6 | 	abs	_var04, _var02 wc
0bfe8     07 06 06 F5 | 	and	_var04, #7
0bfec     03 07 82 F6 | 	negc	_var04, _var04
0bff0     04 06 56 F2 | 	cmps	_var04, #4 wc
0bff4     20 00 90 3D |  if_ae	jmp	#LR__1034
0bff8     01 0B 02 F6 | 	mov	_var06, _var02
0bffc     4D 00 00 FF 
0c000     B0 E5 05 F1 | 	add	objptr, ##39856
0c004     F2 0A 02 F1 | 	add	_var06, objptr
0c008     05 FF 48 FC | 	wrbyte	#127, _var06
0c00c     4D 00 00 FF 
0c010     B0 E5 85 F1 | 	sub	objptr, ##39856
0c014     1C 00 90 FD | 	jmp	#LR__1035
0c018                 | LR__1034
0c018     01 0B 02 F6 | 	mov	_var06, _var02
0c01c     4D 00 00 FF 
0c020     B0 E5 05 F1 | 	add	objptr, ##39856
0c024     F2 0A 02 F1 | 	add	_var06, objptr
0c028     05 01 49 FC | 	wrbyte	#128, _var06
0c02c     4D 00 00 FF 
0c030     B0 E5 85 F1 | 	sub	objptr, ##39856
0c034                 | LR__1035
0c034     01 02 06 F1 | 	add	_var02, #1
0c038     80 02 56 F2 | 	cmps	_var02, #128 wc
0c03c     A4 FF 9F CD |  if_b	jmp	#LR__1033
0c040                 | ' 
0c040                 | ' do: loop until lpeek(base+64*7)<32768
0c040     37 00 00 FF 
0c044     10 E4 05 F1 | 	add	objptr, ##28176
0c048                 | LR__1036
0c048     F2 12 02 FB | 	rdlong	arg01, objptr
0c04c     C0 13 06 F1 | 	add	arg01, #448
0c050     09 FB 01 FB | 	rdlong	result1, arg01
0c054     40 00 00 FF 
0c058     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0c05c     E8 FF 9F 3D |  if_ae	jmp	#LR__1036
0c060     37 00 00 FF 
0c064     10 E4 85 F1 | 	sub	objptr, ##28176
0c068                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c068     80 02 06 F6 | 	mov	_var02, #128
0c06c                 | LR__1037
0c06c     01 07 52 F6 | 	abs	_var04, _var02 wc
0c070     07 06 06 F5 | 	and	_var04, #7
0c074     03 07 82 F6 | 	negc	_var04, _var04
0c078     04 06 56 F2 | 	cmps	_var04, #4 wc
0c07c     20 00 90 3D |  if_ae	jmp	#LR__1038
0c080     01 0B 02 F6 | 	mov	_var06, _var02
0c084     4D 00 00 FF 
0c088     B0 E5 05 F1 | 	add	objptr, ##39856
0c08c     F2 0A 02 F1 | 	add	_var06, objptr
0c090     05 FF 48 FC | 	wrbyte	#127, _var06
0c094     4D 00 00 FF 
0c098     B0 E5 85 F1 | 	sub	objptr, ##39856
0c09c     1C 00 90 FD | 	jmp	#LR__1039
0c0a0                 | LR__1038
0c0a0     01 0B 02 F6 | 	mov	_var06, _var02
0c0a4     4D 00 00 FF 
0c0a8     B0 E5 05 F1 | 	add	objptr, ##39856
0c0ac     F2 0A 02 F1 | 	add	_var06, objptr
0c0b0     05 01 49 FC | 	wrbyte	#128, _var06
0c0b4     4D 00 00 FF 
0c0b8     B0 E5 85 F1 | 	sub	objptr, ##39856
0c0bc                 | LR__1039
0c0bc     01 02 06 F1 | 	add	_var02, #1
0c0c0     00 03 16 F2 | 	cmp	_var02, #256 wc
0c0c4     A4 FF 9F CD |  if_b	jmp	#LR__1037
0c0c8                 | LR__1040
0c0c8                 | _csave_block_ret
0c0c8     2D 00 64 FD | 	ret
0c0cc                 | 
0c0cc                 | ' 
0c0cc                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0c0cc                 | _csave_addtoblock
0c0cc     04 4A 05 F6 | 	mov	COUNT_, #4
0c0d0     A8 00 A0 FD | 	call	#pushregs_
0c0d4     09 1F 02 F6 | 	mov	local01, arg01
0c0d8                 | ' 
0c0d8                 | ' 
0c0d8                 | ' if force=0 then
0c0d8     07 14 4E F7 | 	zerox	arg02, #7 wz
0c0dc     78 00 90 5D |  if_ne	jmp	#LR__1050
0c0e0     50 00 00 FF 
0c0e4     B0 E4 05 F1 | 	add	objptr, ##41136
0c0e8     F2 14 02 FB | 	rdlong	arg02, objptr
0c0ec     02 00 00 FF 
0c0f0     00 E4 85 F1 | 	sub	objptr, ##1024
0c0f4     F2 14 02 F1 | 	add	arg02, objptr
0c0f8     0A 1F 42 FC | 	wrbyte	local01, arg02
0c0fc     02 00 00 FF 
0c100     00 E4 05 F1 | 	add	objptr, ##1024
0c104     F2 1E 02 FB | 	rdlong	local01, objptr
0c108     01 1E 06 F1 | 	add	local01, #1
0c10c     F2 1E 62 FC | 	wrlong	local01, objptr
0c110                 | '   block(blockptr)=d
0c110                 | '   blockptr+=1
0c110                 | '   if blockptr>=255 then
0c110     50 00 00 FF 
0c114     B0 E4 85 F1 | 	sub	objptr, ##41136
0c118     FF 1E 16 F2 | 	cmp	local01, #255 wc
0c11c     E4 00 90 CD |  if_b	jmp	#LR__1054
0c120     4E 00 00 FF 
0c124     B0 E4 05 F1 | 	add	objptr, ##40112
0c128     F2 12 02 F6 | 	mov	arg01, objptr
0c12c     4E 00 00 FF 
0c130     B0 E4 85 F1 | 	sub	objptr, ##40112
0c134     B0 FB BF FD | 	call	#_csave_block
0c138     50 00 00 FF 
0c13c     B0 E4 05 F1 | 	add	objptr, ##41136
0c140     F2 00 68 FC | 	wrlong	#0, objptr
0c144     50 00 00 FF 
0c148     B0 E4 85 F1 | 	sub	objptr, ##41136
0c14c     2C 13 06 F6 | 	mov	arg01, #300
0c150     A4 4C B1 FD | 	call	#__system___waitms
0c154     AC 00 90 FD | 	jmp	#LR__1054
0c158                 | LR__1050
0c158     50 00 00 FF 
0c15c     B0 E4 05 F1 | 	add	objptr, ##41136
0c160     F2 20 02 FB | 	rdlong	local02, objptr
0c164     02 00 00 FF 
0c168     00 E4 85 F1 | 	sub	objptr, ##1024
0c16c     F2 20 02 F1 | 	add	local02, objptr
0c170     10 1F 42 FC | 	wrbyte	local01, local02
0c174                 | '   block(blockptr)=d
0c174                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c174     02 00 00 FF 
0c178     00 E4 05 F1 | 	add	objptr, ##1024
0c17c     F2 22 02 FB | 	rdlong	local03, objptr
0c180     50 00 00 FF 
0c184     B0 E4 85 F1 | 	sub	objptr, ##41136
0c188     FF 22 16 F2 | 	cmp	local03, #255 wc
0c18c     40 00 90 3D |  if_ae	jmp	#LR__1053
0c190     50 00 00 FF 
0c194     B0 E4 05 F1 | 	add	objptr, ##41136
0c198     F2 24 02 FB | 	rdlong	local04, objptr
0c19c     50 00 00 FF 
0c1a0     B0 E4 85 F1 | 	sub	objptr, ##41136
0c1a4                 | LR__1051
0c1a4     00 25 56 F2 | 	cmps	local04, #256 wc
0c1a8     24 00 90 3D |  if_ae	jmp	#LR__1052
0c1ac     12 21 02 F6 | 	mov	local02, local04
0c1b0     4E 00 00 FF 
0c1b4     B0 E4 05 F1 | 	add	objptr, ##40112
0c1b8     F2 20 02 F1 | 	add	local02, objptr
0c1bc     10 01 48 FC | 	wrbyte	#0, local02
0c1c0     01 24 06 F1 | 	add	local04, #1
0c1c4     4E 00 00 FF 
0c1c8     B0 E4 85 F1 | 	sub	objptr, ##40112
0c1cc     D4 FF 9F FD | 	jmp	#LR__1051
0c1d0                 | LR__1052
0c1d0                 | LR__1053
0c1d0     4E 00 00 FF 
0c1d4     B0 E4 05 F1 | 	add	objptr, ##40112
0c1d8     F2 12 02 F6 | 	mov	arg01, objptr
0c1dc     4E 00 00 FF 
0c1e0     B0 E4 85 F1 | 	sub	objptr, ##40112
0c1e4     00 FB BF FD | 	call	#_csave_block
0c1e8     50 00 00 FF 
0c1ec     B0 E4 05 F1 | 	add	objptr, ##41136
0c1f0     F2 00 68 FC | 	wrlong	#0, objptr
0c1f4     50 00 00 FF 
0c1f8     B0 E4 85 F1 | 	sub	objptr, ##41136
0c1fc     2C 13 06 F6 | 	mov	arg01, #300
0c200     F4 4B B1 FD | 	call	#__system___waitms
0c204                 | LR__1054
0c204     A7 F0 03 F6 | 	mov	ptra, fp
0c208     B2 00 A0 FD | 	call	#popregs_
0c20c                 | _csave_addtoblock_ret
0c20c     2D 00 64 FD | 	ret
0c210                 | 
0c210                 | ' 
0c210                 | ' sub test_csave
0c210                 | _test_csave
0c210     04 4A 05 F6 | 	mov	COUNT_, #4
0c214     A8 00 A0 FD | 	call	#pushregs_
0c218     C0 F0 07 F1 | 	add	ptra, #192
0c21c                 | ' 'dim fileheader,savestart, saveptr as ulong
0c21c                 | ' 
0c21c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c21c     4A 00 00 FF 
0c220     84 E4 05 F1 | 	add	objptr, ##38020
0c224     F2 12 02 FB | 	rdlong	arg01, objptr
0c228     4A 00 00 FF 
0c22c     84 E4 85 F1 | 	sub	objptr, ##38020
0c230     CC 15 B1 FD | 	call	#_pslpeek
0c234     FF FF 7F FF 
0c238     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c23c     0C 00 90 5D |  if_ne	jmp	#LR__1060
0c240     1B 12 06 F6 | 	mov	arg01, #27
0c244     24 13 B1 FD | 	call	#_printerror
0c248     1C 03 90 FD | 	jmp	#LR__1074
0c24c                 | LR__1060
0c24c     D4 EF BF FD | 	call	#_pop
0c250     90 4E 05 F1 | 	add	fp, #144
0c254     A7 FA 61 FC | 	wrlong	result1, fp
0c258     04 4E 05 F1 | 	add	fp, #4
0c25c     A7 FC 61 FC | 	wrlong	result2, fp
0c260     04 4E 05 F1 | 	add	fp, #4
0c264     A7 FE 61 FC | 	wrlong	result3, fp
0c268                 | ' t1=pop()
0c268                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c268     98 4E 85 F1 | 	sub	fp, #152
0c26c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c270     24 00 90 AD |  if_e	jmp	#LR__1061
0c274     51 00 00 FF 
0c278     D4 E5 05 F1 | 	add	objptr, ##41940
0c27c     F2 1C 02 FB | 	rdlong	arg06, objptr
0c280     51 00 00 FF 
0c284     D4 E5 85 F1 | 	sub	objptr, ##41940
0c288     8C 4E 05 F1 | 	add	fp, #140
0c28c     A7 1C 62 FC | 	wrlong	arg06, fp
0c290     8C 4E 85 F1 | 	sub	fp, #140
0c294     14 00 90 FD | 	jmp	#LR__1062
0c298                 | LR__1061
0c298     90 4E 05 F1 | 	add	fp, #144
0c29c     A7 1C 02 FB | 	rdlong	arg06, fp
0c2a0     04 4E 85 F1 | 	sub	fp, #4
0c2a4     A7 1C 62 FC | 	wrlong	arg06, fp
0c2a8     8C 4E 85 F1 | 	sub	fp, #140
0c2ac                 | LR__1062
0c2ac                 | ' 
0c2ac                 | ' ' prepare 1 kHz header wave
0c2ac                 | ' 
0c2ac                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c2ac     A7 00 68 FC | 	wrlong	#0, fp
0c2b0     97 34 48 FB | 	callpa	#(@LR__1066-@LR__1063)>>2,fcache_load_ptr_
0c2b4                 | LR__1063
0c2b4     A7 1C 02 FB | 	rdlong	arg06, fp
0c2b8     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c2bc     07 1A 06 F5 | 	and	arg05, #7
0c2c0     0D 1B 82 F6 | 	negc	arg05, arg05
0c2c4     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c2c8     20 00 90 3D |  if_ae	jmp	#LR__1064
0c2cc     A7 1A 02 FB | 	rdlong	arg05, fp
0c2d0     4D 00 00 FF 
0c2d4     B0 E5 05 F1 | 	add	objptr, ##39856
0c2d8     F2 1A 02 F1 | 	add	arg05, objptr
0c2dc     0D FF 48 FC | 	wrbyte	#127, arg05
0c2e0     4D 00 00 FF 
0c2e4     B0 E5 85 F1 | 	sub	objptr, ##39856
0c2e8     1C 00 90 FD | 	jmp	#LR__1065
0c2ec                 | LR__1064
0c2ec     A7 1A 02 FB | 	rdlong	arg05, fp
0c2f0     4D 00 00 FF 
0c2f4     B0 E5 05 F1 | 	add	objptr, ##39856
0c2f8     F2 1A 02 F1 | 	add	arg05, objptr
0c2fc     0D 01 49 FC | 	wrbyte	#128, arg05
0c300     4D 00 00 FF 
0c304     B0 E5 85 F1 | 	sub	objptr, ##39856
0c308                 | LR__1065
0c308     A7 1A 02 FB | 	rdlong	arg05, fp
0c30c     01 1A 06 F1 | 	add	arg05, #1
0c310     A7 1A 62 FC | 	wrlong	arg05, fp
0c314     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c318     98 FF 9F CD |  if_b	jmp	#LR__1063
0c31c                 | LR__1066
0c31c     4D 00 00 FF 
0c320     B0 E5 05 F1 | 	add	objptr, ##39856
0c324     F2 14 02 F6 | 	mov	arg02, objptr
0c328     07 12 06 F6 | 	mov	arg01, #7
0c32c     0F 00 00 FF 
0c330     40 17 06 F6 | 	mov	arg03, ##8000
0c334     0E 18 C6 F9 | 	decod	arg04, #14
0c338     00 1B 06 F6 | 	mov	arg05, #256
0c33c     00 1C 06 F6 | 	mov	arg06, #0
0c340     42 00 00 FF 
0c344     E4 E4 85 F1 | 	sub	objptr, ##34020
0c348     14 44 B1 FD | 	call	#_audio096_spin2_play8
0c34c     0B 00 00 FF 
0c350     CC E4 85 F1 | 	sub	objptr, ##5836
0c354     05 00 00 FF 
0c358     B8 13 06 F6 | 	mov	arg01, ##3000
0c35c     98 4A B1 FD | 	call	#__system___waitms
0c360     50 00 00 FF 
0c364     B0 E4 05 F1 | 	add	objptr, ##41136
0c368     F2 00 68 FC | 	wrlong	#0, objptr
0c36c     50 00 00 FF 
0c370     B0 E4 85 F1 | 	sub	objptr, ##41136
0c374     72 12 06 F6 | 	mov	arg01, #114
0c378     00 14 06 F6 | 	mov	arg02, #0
0c37c     4C FD BF FD | 	call	#_csave_addtoblock
0c380     62 12 06 F6 | 	mov	arg01, #98
0c384     00 14 06 F6 | 	mov	arg02, #0
0c388     40 FD BF FD | 	call	#_csave_addtoblock
0c38c     61 12 06 F6 | 	mov	arg01, #97
0c390     00 14 06 F6 | 	mov	arg02, #0
0c394     34 FD BF FD | 	call	#_csave_addtoblock
0c398     0D 12 06 F6 | 	mov	arg01, #13
0c39c     00 14 06 F6 | 	mov	arg02, #0
0c3a0     28 FD BF FD | 	call	#_csave_addtoblock
0c3a4                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c3a4                 | ' waitms 3000 
0c3a4                 | ' 
0c3a4                 | ' blockptr=0
0c3a4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c3a4                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c3a4     A7 02 68 FC | 	wrlong	#1, fp
0c3a8     8C 4E 05 F1 | 	add	fp, #140
0c3ac     A7 12 02 FB | 	rdlong	arg01, fp
0c3b0     8C 4E 85 F1 | 	sub	fp, #140
0c3b4     09 1F 02 F6 | 	mov	local01, arg01
0c3b8     97 06 48 FB | 	callpa	#(@LR__1068-@LR__1067)>>2,fcache_load_ptr_
0c3bc                 | LR__1067
0c3bc     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c3c0     01 1E 06 51 |  if_ne	add	local01, #1
0c3c4     F4 FF 9F 5D |  if_ne	jmp	#LR__1067
0c3c8                 | LR__1068
0c3c8     09 1F 82 F1 | 	sub	local01, arg01
0c3cc     0F 21 02 F6 | 	mov	local02, local01
0c3d0     01 20 06 F1 | 	add	local02, #1
0c3d4                 | LR__1069
0c3d4     A7 1A 02 FB | 	rdlong	arg05, fp
0c3d8     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c3dc     34 00 90 3D |  if_ae	jmp	#LR__1070
0c3e0     8C 4E 05 F1 | 	add	fp, #140
0c3e4     A7 12 02 FB | 	rdlong	arg01, fp
0c3e8     8C 4E 85 F1 | 	sub	fp, #140
0c3ec     A7 14 02 FB | 	rdlong	arg02, fp
0c3f0     01 16 06 F6 | 	mov	arg03, #1
0c3f4     A0 68 B1 FD | 	call	#__system__Mid_S
0c3f8     FD 12 C2 FA | 	rdbyte	arg01, result1
0c3fc     00 14 06 F6 | 	mov	arg02, #0
0c400     C8 FC BF FD | 	call	#_csave_addtoblock
0c404     A7 1A 02 FB | 	rdlong	arg05, fp
0c408     01 1A 06 F1 | 	add	arg05, #1
0c40c     A7 1A 62 FC | 	wrlong	arg05, fp
0c410     C0 FF 9F FD | 	jmp	#LR__1069
0c414                 | LR__1070
0c414     00 12 06 F6 | 	mov	arg01, #0
0c418     00 14 06 F6 | 	mov	arg02, #0
0c41c     AC FC BF FD | 	call	#_csave_addtoblock
0c420     72 12 06 F6 | 	mov	arg01, #114
0c424     00 14 06 F6 | 	mov	arg02, #0
0c428     A0 FC BF FD | 	call	#_csave_addtoblock
0c42c     62 12 06 F6 | 	mov	arg01, #98
0c430     00 14 06 F6 | 	mov	arg02, #0
0c434     94 FC BF FD | 	call	#_csave_addtoblock
0c438     73 12 06 F6 | 	mov	arg01, #115
0c43c     00 14 06 F6 | 	mov	arg02, #0
0c440     88 FC BF FD | 	call	#_csave_addtoblock
0c444     0D 12 06 F6 | 	mov	arg01, #13
0c448     00 14 06 F6 | 	mov	arg02, #0
0c44c     7C FC BF FD | 	call	#_csave_addtoblock
0c450     4A 00 00 FF 
0c454     84 E4 05 F1 | 	add	objptr, ##38020
0c458     F2 22 02 FB | 	rdlong	local03, objptr
0c45c     4A 00 00 FF 
0c460     84 E4 85 F1 | 	sub	objptr, ##38020
0c464     9C 4E 05 F1 | 	add	fp, #156
0c468     A7 22 62 FC | 	wrlong	local03, fp
0c46c     9C 4E 85 F1 | 	sub	fp, #156
0c470                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c470                 | ' 
0c470                 | ' saveptr=programstart
0c470                 | ' do
0c470                 | LR__1071
0c470     A0 4E 05 F1 | 	add	fp, #160
0c474     A7 12 02 F6 | 	mov	arg01, fp
0c478     04 4E 85 F1 | 	sub	fp, #4
0c47c     A7 14 02 FB | 	rdlong	arg02, fp
0c480     9C 4E 85 F1 | 	sub	fp, #156
0c484     18 16 06 F6 | 	mov	arg03, #24
0c488     0B 00 00 FF 
0c48c     CC E4 05 F1 | 	add	objptr, ##5836
0c490     30 3A B1 FD | 	call	#_psram_spin2_read1
0c494     0C 4E 05 F1 | 	add	fp, #12
0c498     A7 12 02 F6 | 	mov	arg01, fp
0c49c     9C 4E 05 F1 | 	add	fp, #156
0c4a0     A7 14 02 FB | 	rdlong	arg02, fp
0c4a4     04 4E 05 F1 | 	add	fp, #4
0c4a8     A7 16 02 FB | 	rdlong	arg03, fp
0c4ac     AC 4E 85 F1 | 	sub	fp, #172
0c4b0     10 3A B1 FD | 	call	#_psram_spin2_read1
0c4b4     0B 00 00 FF 
0c4b8     CC E4 85 F1 | 	sub	objptr, ##5836
0c4bc     AC 4E 05 F1 | 	add	fp, #172
0c4c0     A7 12 02 FB | 	rdlong	arg01, fp
0c4c4     AC 4E 85 F1 | 	sub	fp, #172
0c4c8     00 14 06 F6 | 	mov	arg02, #0
0c4cc     FC FB BF FD | 	call	#_csave_addtoblock
0c4d0                 | ' 
0c4d0                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c4d0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c4d0                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c4d0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c4d0     A7 00 68 FC | 	wrlong	#0, fp
0c4d4     AC 4E 05 F1 | 	add	fp, #172
0c4d8     A7 24 02 FB | 	rdlong	local04, fp
0c4dc     AC 4E 85 F1 | 	sub	fp, #172
0c4e0                 | LR__1072
0c4e0     A7 22 02 FB | 	rdlong	local03, fp
0c4e4     12 23 52 F2 | 	cmps	local03, local04 wc
0c4e8     2C 00 90 3D |  if_ae	jmp	#LR__1073
0c4ec     A7 22 02 FB | 	rdlong	local03, fp
0c4f0     0C 4E 05 F1 | 	add	fp, #12
0c4f4     A7 22 02 F1 | 	add	local03, fp
0c4f8     11 13 C2 FA | 	rdbyte	arg01, local03
0c4fc     00 14 06 F6 | 	mov	arg02, #0
0c500     0C 4E 85 F1 | 	sub	fp, #12
0c504     C4 FB BF FD | 	call	#_csave_addtoblock
0c508     A7 22 02 FB | 	rdlong	local03, fp
0c50c     01 22 06 F1 | 	add	local03, #1
0c510     A7 22 62 FC | 	wrlong	local03, fp
0c514     C8 FF 9F FD | 	jmp	#LR__1072
0c518                 | LR__1073
0c518     B4 4E 05 F1 | 	add	fp, #180
0c51c     A7 22 02 FB | 	rdlong	local03, fp
0c520     18 4E 85 F1 | 	sub	fp, #24
0c524     A7 22 62 FC | 	wrlong	local03, fp
0c528     18 4E 05 F1 | 	add	fp, #24
0c52c     A7 22 02 FB | 	rdlong	local03, fp
0c530     B4 4E 85 F1 | 	sub	fp, #180
0c534     FF FF 3F FF 
0c538     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c53c     30 FF 9F 5D |  if_ne	jmp	#LR__1071
0c540     00 12 06 F6 | 	mov	arg01, #0
0c544     01 14 06 F6 | 	mov	arg02, #1
0c548     80 FB BF FD | 	call	#_csave_addtoblock
0c54c     37 00 00 FF 
0c550     10 E4 05 F1 | 	add	objptr, ##28176
0c554     F2 12 02 FB | 	rdlong	arg01, objptr
0c558     37 00 00 FF 
0c55c     10 E4 85 F1 | 	sub	objptr, ##28176
0c560     D4 13 06 F1 | 	add	arg01, #468
0c564     09 01 58 FC | 	wrword	#0, arg01
0c568                 | LR__1074
0c568     A7 F0 03 F6 | 	mov	ptra, fp
0c56c     B2 00 A0 FD | 	call	#popregs_
0c570                 | _test_csave_ret
0c570     2D 00 64 FD | 	ret
0c574                 | 
0c574                 | ' 
0c574                 | ' ' ----------------- Save the program
0c574                 | ' 
0c574                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0c574                 | _do_save
0c574     04 4A 05 F6 | 	mov	COUNT_, #4
0c578     A8 00 A0 FD | 	call	#pushregs_
0c57c     01 00 00 FF 
0c580     C0 F0 07 F1 | 	add	ptra, ##704
0c584     4A 00 00 FF 
0c588     80 E4 05 F1 | 	add	objptr, ##38016
0c58c     F2 1E 02 FB | 	rdlong	local01, objptr
0c590     0F 21 02 F6 | 	mov	local02, local01
0c594     01 20 66 F0 | 	shl	local02, #1
0c598     0F 21 02 F1 | 	add	local02, local01
0c59c     02 20 66 F0 | 	shl	local02, #2
0c5a0     03 00 00 FF 
0c5a4     04 E4 85 F1 | 	sub	objptr, ##1540
0c5a8     F2 20 02 F1 | 	add	local02, objptr
0c5ac     10 23 02 FB | 	rdlong	local03, local02
0c5b0     01 00 00 FF 
0c5b4     10 4E 05 F1 | 	add	fp, ##528
0c5b8     A7 22 62 FC | 	wrlong	local03, fp
0c5bc                 | ' 
0c5bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5bc                 | ' 
0c5bc                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c5bc     01 00 00 FF 
0c5c0     10 4E 85 F1 | 	sub	fp, ##528
0c5c4     01 22 56 F2 | 	cmps	local03, #1 wc
0c5c8     47 00 00 FF 
0c5cc     7C E4 85 F1 | 	sub	objptr, ##36476
0c5d0     20 00 90 CD |  if_b	jmp	#LR__1080
0c5d4     4C EC BF FD | 	call	#_pop
0c5d8     A7 FA 61 FC | 	wrlong	result1, fp
0c5dc     04 4E 05 F1 | 	add	fp, #4
0c5e0     A7 FC 61 FC | 	wrlong	result2, fp
0c5e4     04 4E 05 F1 | 	add	fp, #4
0c5e8     A7 FE 61 FC | 	wrlong	result3, fp
0c5ec     08 4E 85 F1 | 	sub	fp, #8
0c5f0     24 00 90 FD | 	jmp	#LR__1081
0c5f4                 | LR__1080
0c5f4     51 00 00 FF 
0c5f8     D4 E5 05 F1 | 	add	objptr, ##41940
0c5fc     F2 22 02 FB | 	rdlong	local03, objptr
0c600     51 00 00 FF 
0c604     D4 E5 85 F1 | 	sub	objptr, ##41940
0c608     A7 22 62 FC | 	wrlong	local03, fp
0c60c     08 4E 05 F1 | 	add	fp, #8
0c610     A7 3E 68 FC | 	wrlong	#31, fp
0c614     08 4E 85 F1 | 	sub	fp, #8
0c618                 | LR__1081
0c618                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c618     4A 00 00 FF 
0c61c     84 E4 05 F1 | 	add	objptr, ##38020
0c620     F2 12 02 FB | 	rdlong	arg01, objptr
0c624     4A 00 00 FF 
0c628     84 E4 85 F1 | 	sub	objptr, ##38020
0c62c     D0 11 B1 FD | 	call	#_pslpeek
0c630     FF FF 7F FF 
0c634     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c638     0C 00 90 5D |  if_ne	jmp	#LR__1082
0c63c     1B 12 06 F6 | 	mov	arg01, #27
0c640     28 0F B1 FD | 	call	#_printerror
0c644     1C 03 90 FD | 	jmp	#LR__1088
0c648                 | LR__1082
0c648                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c648     08 4E 05 F1 | 	add	fp, #8
0c64c     A7 22 02 FB | 	rdlong	local03, fp
0c650     08 4E 85 F1 | 	sub	fp, #8
0c654     2B 22 0E F2 | 	cmp	local03, #43 wz
0c658     18 00 90 5D |  if_ne	jmp	#LR__1083
0c65c     A7 12 02 FB | 	rdlong	arg01, fp
0c660     68 4D B0 FD | 	call	#_convertstring
0c664     A7 FA 61 FC | 	wrlong	result1, fp
0c668     08 4E 05 F1 | 	add	fp, #8
0c66c     A7 3E 68 FC | 	wrlong	#31, fp
0c670     08 4E 85 F1 | 	sub	fp, #8
0c674                 | LR__1083
0c674                 | ' if t1.result_type=result_string then
0c674     08 4E 05 F1 | 	add	fp, #8
0c678     A7 22 02 FB | 	rdlong	local03, fp
0c67c     08 4E 85 F1 | 	sub	fp, #8
0c680     1F 22 0E F2 | 	cmp	local03, #31 wz
0c684     DC 02 90 5D |  if_ne	jmp	#LR__1087
0c688                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c688     A7 12 02 FB | 	rdlong	arg01, fp
0c68c     85 01 00 FF 
0c690     03 14 06 F6 | 	mov	arg02, ##@LR__5443
0c694     94 44 B1 FD | 	call	#__system___string_cmp
0c698     00 FA 0D F2 | 	cmp	result1, #0 wz
0c69c     51 00 00 AF 
0c6a0     D4 E5 05 A1 |  if_e	add	objptr, ##41940
0c6a4     F2 22 02 AB |  if_e	rdlong	local03, objptr
0c6a8     A7 22 62 AC |  if_e	wrlong	local03, fp
0c6ac     51 00 00 AF 
0c6b0     D4 E5 85 A1 |  if_e	sub	objptr, ##41940
0c6b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c6b8     51 00 00 5F 
0c6bc     D4 E5 05 51 |  if_ne	add	objptr, ##41940
0c6c0     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0c6c4     51 00 00 5F 
0c6c8     D4 E5 85 51 |  if_ne	sub	objptr, ##41940
0c6cc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0c6cc     09 12 06 F6 | 	mov	arg01, #9
0c6d0     C4 94 B1 FD | 	call	#__system__close
0c6d4     09 22 06 F6 | 	mov	local03, #9
0c6d8     4A 00 00 FF 
0c6dc     90 E4 05 F1 | 	add	objptr, ##38032
0c6e0     F2 12 02 FB | 	rdlong	arg01, objptr
0c6e4     4A 00 00 FF 
0c6e8     90 E4 85 F1 | 	sub	objptr, ##38032
0c6ec     85 01 00 FF 
0c6f0     04 14 06 F6 | 	mov	arg02, ##@LR__5444
0c6f4     68 44 B1 FD | 	call	#__system___string_concat
0c6f8     FD 12 02 F6 | 	mov	arg01, result1
0c6fc     A7 14 02 FB | 	rdlong	arg02, fp
0c700     5C 44 B1 FD | 	call	#__system___string_concat
0c704     FD 14 02 F6 | 	mov	arg02, result1
0c708     11 13 02 F6 | 	mov	arg01, local03
0c70c     0D 16 06 F6 | 	mov	arg03, #13
0c710     F4 4F B1 FD | 	call	#__system___basic_open_string
0c714     01 00 00 FF 
0c718     0C 4E 05 F1 | 	add	fp, ##524
0c71c     A7 0A 68 FC | 	wrlong	#5, fp
0c720     4A 00 00 FF 
0c724     84 E4 05 F1 | 	add	objptr, ##38020
0c728     F2 22 02 FB | 	rdlong	local03, objptr
0c72c     4A 00 00 FF 
0c730     84 E4 85 F1 | 	sub	objptr, ##38020
0c734     10 4E 05 F1 | 	add	fp, #16
0c738     A7 22 62 FC | 	wrlong	local03, fp
0c73c     01 00 00 FF 
0c740     1C 4E 85 F1 | 	sub	fp, ##540
0c744                 | ' '  put #9,1,fileheader,1
0c744                 | '   i=5
0c744                 | '   saveptr=programstart
0c744                 | '   do
0c744                 | LR__1084
0c744     01 00 00 FF 
0c748     20 4E 05 F1 | 	add	fp, ##544
0c74c     A7 12 02 F6 | 	mov	arg01, fp
0c750     04 4E 85 F1 | 	sub	fp, #4
0c754     A7 14 02 FB | 	rdlong	arg02, fp
0c758     01 00 00 FF 
0c75c     1C 4E 85 F1 | 	sub	fp, ##540
0c760     18 16 06 F6 | 	mov	arg03, #24
0c764     0B 00 00 FF 
0c768     CC E4 05 F1 | 	add	objptr, ##5836
0c76c     54 37 B1 FD | 	call	#_psram_spin2_read1
0c770     01 00 00 FF 
0c774     38 4E 05 F1 | 	add	fp, ##568
0c778     A7 12 02 F6 | 	mov	arg01, fp
0c77c     10 4E 85 F1 | 	sub	fp, #16
0c780     A7 14 02 FB | 	rdlong	arg02, fp
0c784     04 4E 05 F1 | 	add	fp, #4
0c788     A7 16 02 FB | 	rdlong	arg03, fp
0c78c     01 00 00 FF 
0c790     2C 4E 85 F1 | 	sub	fp, ##556
0c794     2C 37 B1 FD | 	call	#_psram_spin2_read1
0c798     0B 00 00 FF 
0c79c     CC E4 85 F1 | 	sub	objptr, ##5836
0c7a0     85 01 00 FF 
0c7a4     06 22 06 F6 | 	mov	local03, ##@LR__5445
0c7a8     01 00 00 FF 
0c7ac     B8 4E 05 F1 | 	add	fp, ##696
0c7b0     A7 22 62 FC | 	wrlong	local03, fp
0c7b4                 | '     psram.read1(varptr(header(0)),saveptr,24)
0c7b4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0c7b4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0c7b4     AC 4E 85 F1 | 	sub	fp, #172
0c7b8     A7 02 68 FC | 	wrlong	#1, fp
0c7bc     20 4E 05 F1 | 	add	fp, #32
0c7c0     A7 24 02 FB | 	rdlong	local04, fp
0c7c4     01 00 00 FF 
0c7c8     2C 4E 85 F1 | 	sub	fp, ##556
0c7cc     01 24 06 F1 | 	add	local04, #1
0c7d0                 | LR__1085
0c7d0     01 00 00 FF 
0c7d4     0C 4E 05 F1 | 	add	fp, ##524
0c7d8     A7 22 02 FB | 	rdlong	local03, fp
0c7dc     01 00 00 FF 
0c7e0     0C 4E 85 F1 | 	sub	fp, ##524
0c7e4     12 23 52 F2 | 	cmps	local03, local04 wc
0c7e8     64 00 90 3D |  if_ae	jmp	#LR__1086
0c7ec     01 00 00 FF 
0c7f0     B8 4E 05 F1 | 	add	fp, ##696
0c7f4     A7 1E 02 FB | 	rdlong	local01, fp
0c7f8     AC 4E 85 F1 | 	sub	fp, #172
0c7fc     A7 22 02 FB | 	rdlong	local03, fp
0c800     01 22 86 F1 | 	sub	local03, #1
0c804     2C 4E 05 F1 | 	add	fp, #44
0c808     A7 22 02 F1 | 	add	local03, fp
0c80c     11 13 C2 FA | 	rdbyte	arg01, local03
0c810     01 00 00 FF 
0c814     38 4E 85 F1 | 	sub	fp, ##568
0c818     28 65 B1 FD | 	call	#__system__Chr_S
0c81c     FD 14 02 F6 | 	mov	arg02, result1
0c820     0F 13 02 F6 | 	mov	arg01, local01
0c824     38 43 B1 FD | 	call	#__system___string_concat
0c828     01 00 00 FF 
0c82c     B8 4E 05 F1 | 	add	fp, ##696
0c830     A7 FA 61 FC | 	wrlong	result1, fp
0c834     AC 4E 85 F1 | 	sub	fp, #172
0c838     A7 22 02 FB | 	rdlong	local03, fp
0c83c     01 22 06 F1 | 	add	local03, #1
0c840     A7 22 62 FC | 	wrlong	local03, fp
0c844     01 00 00 FF 
0c848     0C 4E 85 F1 | 	sub	fp, ##524
0c84c     80 FF 9F FD | 	jmp	#LR__1085
0c850                 | LR__1086
0c850                 | '  '   put #9,i,header(3),1 : i+=4
0c850                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0c850                 | '      print #9, saveline$
0c850     09 12 06 F6 | 	mov	arg01, #9
0c854     10 9D B1 FD | 	call	#__system___getiolock_0540
0c858     FD 12 02 F6 | 	mov	arg01, result1
0c85c     A4 42 B1 FD | 	call	#__system___lockmem
0c860     01 00 00 FF 
0c864     B8 4E 05 F1 | 	add	fp, ##696
0c868     A7 14 02 FB | 	rdlong	arg02, fp
0c86c     01 00 00 FF 
0c870     B8 4E 85 F1 | 	sub	fp, ##696
0c874     09 12 06 F6 | 	mov	arg01, #9
0c878     00 16 06 F6 | 	mov	arg03, #0
0c87c     78 4F B1 FD | 	call	#__system___basic_print_string
0c880     09 12 06 F6 | 	mov	arg01, #9
0c884     0A 14 06 F6 | 	mov	arg02, #10
0c888     00 16 06 F6 | 	mov	arg03, #0
0c88c     10 4F B1 FD | 	call	#__system___basic_print_char
0c890     09 12 06 F6 | 	mov	arg01, #9
0c894     D0 9C B1 FD | 	call	#__system___getiolock_0540
0c898     FD 00 68 FC | 	wrlong	#0, result1
0c89c     01 00 00 FF 
0c8a0     34 4E 05 F1 | 	add	fp, ##564
0c8a4     A7 22 02 FB | 	rdlong	local03, fp
0c8a8     18 4E 85 F1 | 	sub	fp, #24
0c8ac     A7 22 62 FC | 	wrlong	local03, fp
0c8b0     18 4E 05 F1 | 	add	fp, #24
0c8b4     A7 22 02 FB | 	rdlong	local03, fp
0c8b8     01 00 00 FF 
0c8bc     34 4E 85 F1 | 	sub	fp, ##564
0c8c0     FF FF 3F FF 
0c8c4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c8c8     78 FE 9F 5D |  if_ne	jmp	#LR__1084
0c8cc                 | '   close #9  
0c8cc     09 12 06 F6 | 	mov	arg01, #9
0c8d0     C4 92 B1 FD | 	call	#__system__close
0c8d4                 | '   print "Saved as ";currentdir$+"/"+loadname
0c8d4     00 12 06 F6 | 	mov	arg01, #0
0c8d8     8C 9C B1 FD | 	call	#__system___getiolock_0540
0c8dc     FD 12 02 F6 | 	mov	arg01, result1
0c8e0     20 42 B1 FD | 	call	#__system___lockmem
0c8e4     85 01 00 FF 
0c8e8     07 14 06 F6 | 	mov	arg02, ##@LR__5446
0c8ec     00 12 06 F6 | 	mov	arg01, #0
0c8f0     00 16 06 F6 | 	mov	arg03, #0
0c8f4     00 4F B1 FD | 	call	#__system___basic_print_string
0c8f8     00 20 06 F6 | 	mov	local02, #0
0c8fc     4A 00 00 FF 
0c900     90 E4 05 F1 | 	add	objptr, ##38032
0c904     F2 12 02 FB | 	rdlong	arg01, objptr
0c908     4A 00 00 FF 
0c90c     90 E4 85 F1 | 	sub	objptr, ##38032
0c910     85 01 00 FF 
0c914     11 14 06 F6 | 	mov	arg02, ##@LR__5447
0c918     44 42 B1 FD | 	call	#__system___string_concat
0c91c     FD 12 02 F6 | 	mov	arg01, result1
0c920     51 00 00 FF 
0c924     D4 E5 05 F1 | 	add	objptr, ##41940
0c928     F2 14 02 FB | 	rdlong	arg02, objptr
0c92c     51 00 00 FF 
0c930     D4 E5 85 F1 | 	sub	objptr, ##41940
0c934     28 42 B1 FD | 	call	#__system___string_concat
0c938     FD 14 02 F6 | 	mov	arg02, result1
0c93c     10 13 02 F6 | 	mov	arg01, local02
0c940     00 16 06 F6 | 	mov	arg03, #0
0c944     B0 4E B1 FD | 	call	#__system___basic_print_string
0c948     00 12 06 F6 | 	mov	arg01, #0
0c94c     0A 14 06 F6 | 	mov	arg02, #10
0c950     00 16 06 F6 | 	mov	arg03, #0
0c954     48 4E B1 FD | 	call	#__system___basic_print_char
0c958     00 12 06 F6 | 	mov	arg01, #0
0c95c     08 9C B1 FD | 	call	#__system___getiolock_0540
0c960     FD 00 68 FC | 	wrlong	#0, result1
0c964                 | LR__1087
0c964                 | LR__1088
0c964     A7 F0 03 F6 | 	mov	ptra, fp
0c968     B2 00 A0 FD | 	call	#popregs_
0c96c                 | _do_save_ret
0c96c     2D 00 64 FD | 	ret
0c970                 | 
0c970                 | ' 
0c970                 | ' '----------------- Load the program
0c970                 | ' 'lo todo: errors while loading
0c970                 | ' 
0c970                 | ' sub do_enter
0c970                 | _do_enter
0c970     02 00 00 FF 
0c974     D2 12 06 F6 | 	mov	arg01, ##1234
0c978     04 00 B0 FD | 	call	#_do_load
0c97c                 | _do_enter_ret
0c97c     2D 00 64 FD | 	ret
0c980                 | 
0c980                 | ' 
0c980                 | ' 
0c980                 | ' sub do_load(amode=0 as integer)   ' here amode = 2, why?
0c980                 | _do_load
0c980     01 4A 05 F6 | 	mov	COUNT_, #1
0c984     A8 00 A0 FD | 	call	#pushregs_
0c988     AC F0 07 F1 | 	add	ptra, #172
0c98c     A7 12 62 FC | 	wrlong	arg01, fp
0c990     4A 00 00 FF 
0c994     80 E4 05 F1 | 	add	objptr, ##38016
0c998     F2 14 02 FB | 	rdlong	arg02, objptr
0c99c     0A 13 02 F6 | 	mov	arg01, arg02
0c9a0     01 12 66 F0 | 	shl	arg01, #1
0c9a4     0A 13 02 F1 | 	add	arg01, arg02
0c9a8     02 12 66 F0 | 	shl	arg01, #2
0c9ac     03 00 00 FF 
0c9b0     04 E4 85 F1 | 	sub	objptr, ##1540
0c9b4     F2 12 02 F1 | 	add	arg01, objptr
0c9b8     09 15 02 FB | 	rdlong	arg02, arg01
0c9bc     1C 4E 05 F1 | 	add	fp, #28
0c9c0     A7 14 62 FC | 	wrlong	arg02, fp
0c9c4     8C 4E 05 F1 | 	add	fp, #140
0c9c8     A7 12 02 F6 | 	mov	arg01, fp
0c9cc     47 00 00 FF 
0c9d0     7C E4 85 F1 | 	sub	objptr, ##36476
0c9d4     80 4E 85 F1 | 	sub	fp, #128
0c9d8     09 4F 61 FC | 	wrlong	fp, arg01
0c9dc                 | ' numpar=compiledline(lineptr_e).result.uresult
0c9dc                 | ' lpoke varptr(line2$),varptr(line2)
0c9dc                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c9dc     0C 4E 85 F1 | 	sub	fp, #12
0c9e0     A7 1E 02 FB | 	rdlong	local01, fp
0c9e4     1C 4E 85 F1 | 	sub	fp, #28
0c9e8     01 1E 56 F2 | 	cmps	local01, #1 wc
0c9ec     24 00 90 CD |  if_b	jmp	#LR__1090
0c9f0     30 E8 BF FD | 	call	#_pop
0c9f4     04 4E 05 F1 | 	add	fp, #4
0c9f8     A7 FA 61 FC | 	wrlong	result1, fp
0c9fc     04 4E 05 F1 | 	add	fp, #4
0ca00     A7 FC 61 FC | 	wrlong	result2, fp
0ca04     04 4E 05 F1 | 	add	fp, #4
0ca08     A7 FE 61 FC | 	wrlong	result3, fp
0ca0c     0C 4E 85 F1 | 	sub	fp, #12
0ca10     28 00 90 FD | 	jmp	#LR__1091
0ca14                 | LR__1090
0ca14     51 00 00 FF 
0ca18     D4 E5 05 F1 | 	add	objptr, ##41940
0ca1c     F2 1E 02 FB | 	rdlong	local01, objptr
0ca20     51 00 00 FF 
0ca24     D4 E5 85 F1 | 	sub	objptr, ##41940
0ca28     04 4E 05 F1 | 	add	fp, #4
0ca2c     A7 1E 62 FC | 	wrlong	local01, fp
0ca30     08 4E 05 F1 | 	add	fp, #8
0ca34     A7 3E 68 FC | 	wrlong	#31, fp
0ca38     0C 4E 85 F1 | 	sub	fp, #12
0ca3c                 | LR__1091
0ca3c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0ca3c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0ca3c     0C 4E 05 F1 | 	add	fp, #12
0ca40     A7 1E 02 FB | 	rdlong	local01, fp
0ca44     0C 4E 85 F1 | 	sub	fp, #12
0ca48     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ca4c     24 00 90 5D |  if_ne	jmp	#LR__1092
0ca50     04 4E 05 F1 | 	add	fp, #4
0ca54     A7 12 02 FB | 	rdlong	arg01, fp
0ca58     04 4E 85 F1 | 	sub	fp, #4
0ca5c     6C 49 B0 FD | 	call	#_convertstring
0ca60     04 4E 05 F1 | 	add	fp, #4
0ca64     A7 FA 61 FC | 	wrlong	result1, fp
0ca68     08 4E 05 F1 | 	add	fp, #8
0ca6c     A7 3E 68 FC | 	wrlong	#31, fp
0ca70     0C 4E 85 F1 | 	sub	fp, #12
0ca74                 | LR__1092
0ca74                 | ' if t1.result_type=result_string then
0ca74     0C 4E 05 F1 | 	add	fp, #12
0ca78     A7 1E 02 FB | 	rdlong	local01, fp
0ca7c     0C 4E 85 F1 | 	sub	fp, #12
0ca80     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ca84     E0 02 90 5D |  if_ne	jmp	#LR__1098
0ca88                 | '   if amode<>1234 then do_new
0ca88     A7 1E 02 FB | 	rdlong	local01, fp
0ca8c     02 00 00 FF 
0ca90     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
0ca94     34 33 B0 5D |  if_ne	call	#_do_new
0ca98                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0ca98     04 4E 05 F1 | 	add	fp, #4
0ca9c     A7 12 02 FB | 	rdlong	arg01, fp
0caa0     04 4E 85 F1 | 	sub	fp, #4
0caa4     85 01 00 FF 
0caa8     13 14 06 F6 | 	mov	arg02, ##@LR__5448
0caac     7C 40 B1 FD | 	call	#__system___string_cmp
0cab0     00 FA 0D F2 | 	cmp	result1, #0 wz
0cab4     24 00 90 5D |  if_ne	jmp	#LR__1093
0cab8     51 00 00 FF 
0cabc     D4 E5 05 F1 | 	add	objptr, ##41940
0cac0     F2 1E 02 FB | 	rdlong	local01, objptr
0cac4     51 00 00 FF 
0cac8     D4 E5 85 F1 | 	sub	objptr, ##41940
0cacc     04 4E 05 F1 | 	add	fp, #4
0cad0     A7 1E 62 FC | 	wrlong	local01, fp
0cad4     04 4E 85 F1 | 	sub	fp, #4
0cad8     20 00 90 FD | 	jmp	#LR__1094
0cadc                 | LR__1093
0cadc     04 4E 05 F1 | 	add	fp, #4
0cae0     A7 1E 02 FB | 	rdlong	local01, fp
0cae4     04 4E 85 F1 | 	sub	fp, #4
0cae8     51 00 00 FF 
0caec     D4 E5 05 F1 | 	add	objptr, ##41940
0caf0     F2 1E 62 FC | 	wrlong	local01, objptr
0caf4     51 00 00 FF 
0caf8     D4 E5 85 F1 | 	sub	objptr, ##41940
0cafc                 | LR__1094
0cafc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0cafc     09 12 06 F6 | 	mov	arg01, #9
0cb00     94 90 B1 FD | 	call	#__system__close
0cb04     09 1E 06 F6 | 	mov	local01, #9
0cb08     4A 00 00 FF 
0cb0c     90 E4 05 F1 | 	add	objptr, ##38032
0cb10     F2 12 02 FB | 	rdlong	arg01, objptr
0cb14     4A 00 00 FF 
0cb18     90 E4 85 F1 | 	sub	objptr, ##38032
0cb1c     85 01 00 FF 
0cb20     14 14 06 F6 | 	mov	arg02, ##@LR__5449
0cb24     38 40 B1 FD | 	call	#__system___string_concat
0cb28     FD 12 02 F6 | 	mov	arg01, result1
0cb2c     04 4E 05 F1 | 	add	fp, #4
0cb30     A7 14 02 FB | 	rdlong	arg02, fp
0cb34     04 4E 85 F1 | 	sub	fp, #4
0cb38     24 40 B1 FD | 	call	#__system___string_concat
0cb3c     FD 14 02 F6 | 	mov	arg02, result1
0cb40     0F 13 02 F6 | 	mov	arg01, local01
0cb44     00 16 06 F6 | 	mov	arg03, #0
0cb48     BC 4B B1 FD | 	call	#__system___basic_open_string
0cb4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cb50     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cb54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cb58     14 4E 05 F1 | 	add	fp, #20
0cb5c     A7 FA 61 FC | 	wrlong	result1, fp
0cb60                 | '   r=geterr() 
0cb60                 | '   if r then 
0cb60     14 4E 85 F1 | 	sub	fp, #20
0cb64     50 01 90 AD |  if_e	jmp	#LR__1096
0cb68                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0cb68     09 12 06 F6 | 	mov	arg01, #9
0cb6c     28 90 B1 FD | 	call	#__system__close
0cb70     09 1E 06 F6 | 	mov	local01, #9
0cb74     4A 00 00 FF 
0cb78     90 E4 05 F1 | 	add	objptr, ##38032
0cb7c     F2 12 02 FB | 	rdlong	arg01, objptr
0cb80     4A 00 00 FF 
0cb84     90 E4 85 F1 | 	sub	objptr, ##38032
0cb88     85 01 00 FF 
0cb8c     16 14 06 F6 | 	mov	arg02, ##@LR__5450
0cb90     CC 3F B1 FD | 	call	#__system___string_concat
0cb94     FD 12 02 F6 | 	mov	arg01, result1
0cb98     04 4E 05 F1 | 	add	fp, #4
0cb9c     A7 14 02 FB | 	rdlong	arg02, fp
0cba0     04 4E 85 F1 | 	sub	fp, #4
0cba4     B8 3F B1 FD | 	call	#__system___string_concat
0cba8     FD 12 02 F6 | 	mov	arg01, result1
0cbac     85 01 00 FF 
0cbb0     18 14 06 F6 | 	mov	arg02, ##@LR__5451
0cbb4     A8 3F B1 FD | 	call	#__system___string_concat
0cbb8     FD 14 02 F6 | 	mov	arg02, result1
0cbbc     0F 13 02 F6 | 	mov	arg01, local01
0cbc0     00 16 06 F6 | 	mov	arg03, #0
0cbc4     40 4B B1 FD | 	call	#__system___basic_open_string
0cbc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cbcc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cbd0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cbd4     14 4E 05 F1 | 	add	fp, #20
0cbd8     A7 FA 61 FC | 	wrlong	result1, fp
0cbdc                 | '     r=geterr() 
0cbdc                 | '     if r then 
0cbdc     14 4E 85 F1 | 	sub	fp, #20
0cbe0     A0 00 90 AD |  if_e	jmp	#LR__1095
0cbe4                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0cbe4     00 12 06 F6 | 	mov	arg01, #0
0cbe8     7C 99 B1 FD | 	call	#__system___getiolock_0540
0cbec     FD 12 02 F6 | 	mov	arg01, result1
0cbf0     10 3F B1 FD | 	call	#__system___lockmem
0cbf4     85 01 00 FF 
0cbf8     1D 14 06 F6 | 	mov	arg02, ##@LR__5452
0cbfc     00 12 06 F6 | 	mov	arg01, #0
0cc00     00 16 06 F6 | 	mov	arg03, #0
0cc04     F0 4B B1 FD | 	call	#__system___basic_print_string
0cc08     14 4E 05 F1 | 	add	fp, #20
0cc0c     A7 14 02 FB | 	rdlong	arg02, fp
0cc10     14 4E 85 F1 | 	sub	fp, #20
0cc14     00 12 06 F6 | 	mov	arg01, #0
0cc18     00 16 06 F6 | 	mov	arg03, #0
0cc1c     0A 18 06 F6 | 	mov	arg04, #10
0cc20     18 4C B1 FD | 	call	#__system___basic_print_integer
0cc24     85 01 00 FF 
0cc28     2B 14 06 F6 | 	mov	arg02, ##@LR__5453
0cc2c     00 12 06 F6 | 	mov	arg01, #0
0cc30     00 16 06 F6 | 	mov	arg03, #0
0cc34     C0 4B B1 FD | 	call	#__system___basic_print_string
0cc38     00 1E 06 F6 | 	mov	local01, #0
0cc3c     14 4E 05 F1 | 	add	fp, #20
0cc40     A7 12 02 FB | 	rdlong	arg01, fp
0cc44     14 4E 85 F1 | 	sub	fp, #20
0cc48     80 65 B1 FD | 	call	#__system___strerror
0cc4c     FD 14 02 F6 | 	mov	arg02, result1
0cc50     0F 13 02 F6 | 	mov	arg01, local01
0cc54     00 16 06 F6 | 	mov	arg03, #0
0cc58     9C 4B B1 FD | 	call	#__system___basic_print_string
0cc5c     00 12 06 F6 | 	mov	arg01, #0
0cc60     0A 14 06 F6 | 	mov	arg02, #10
0cc64     00 16 06 F6 | 	mov	arg03, #0
0cc68     34 4B B1 FD | 	call	#__system___basic_print_char
0cc6c     00 12 06 F6 | 	mov	arg01, #0
0cc70     F4 98 B1 FD | 	call	#__system___getiolock_0540
0cc74     FD 00 68 FC | 	wrlong	#0, result1
0cc78     09 12 06 F6 | 	mov	arg01, #9
0cc7c     18 8F B1 FD | 	call	#__system__close
0cc80     7C 01 90 FD | 	jmp	#LR__1100
0cc84                 | LR__1095
0cc84     51 00 00 FF 
0cc88     D4 E5 05 F1 | 	add	objptr, ##41940
0cc8c     F2 12 02 FB | 	rdlong	arg01, objptr
0cc90     51 00 00 FF 
0cc94     D4 E5 85 F1 | 	sub	objptr, ##41940
0cc98     85 01 00 FF 
0cc9c     2E 14 06 F6 | 	mov	arg02, ##@LR__5454
0cca0     BC 3E B1 FD | 	call	#__system___string_concat
0cca4     51 00 00 FF 
0cca8     D4 E5 05 F1 | 	add	objptr, ##41940
0ccac     F2 FA 61 FC | 	wrlong	result1, objptr
0ccb0     51 00 00 FF 
0ccb4     D4 E5 85 F1 | 	sub	objptr, ##41940
0ccb8                 | LR__1096
0ccb8                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0ccb8     09 12 06 F6 | 	mov	arg01, #9
0ccbc     D8 8E B1 FD | 	call	#__system__close
0ccc0     09 1E 06 F6 | 	mov	local01, #9
0ccc4     4A 00 00 FF 
0ccc8     90 E4 05 F1 | 	add	objptr, ##38032
0cccc     F2 12 02 FB | 	rdlong	arg01, objptr
0ccd0     4A 00 00 FF 
0ccd4     90 E4 85 F1 | 	sub	objptr, ##38032
0ccd8     85 01 00 FF 
0ccdc     33 14 06 F6 | 	mov	arg02, ##@LR__5455
0cce0     7C 3E B1 FD | 	call	#__system___string_concat
0cce4     FD 12 02 F6 | 	mov	arg01, result1
0cce8     51 00 00 FF 
0ccec     D4 E5 05 F1 | 	add	objptr, ##41940
0ccf0     F2 14 02 FB | 	rdlong	arg02, objptr
0ccf4     51 00 00 FF 
0ccf8     D4 E5 85 F1 | 	sub	objptr, ##41940
0ccfc     60 3E B1 FD | 	call	#__system___string_concat
0cd00     FD 14 02 F6 | 	mov	arg02, result1
0cd04     0F 13 02 F6 | 	mov	arg01, local01
0cd08     00 16 06 F6 | 	mov	arg03, #0
0cd0c     F8 49 B1 FD | 	call	#__system___basic_open_string
0cd10                 | '   do
0cd10                 | LR__1097
0cd10     09 12 06 F6 | 	mov	arg01, #9
0cd14     F8 3F B1 FD | 	call	#__system___basic_read_line
0cd18     FD 1E 02 F6 | 	mov	local01, result1
0cd1c     37 00 00 FF 
0cd20     1C E4 05 F1 | 	add	objptr, ##28188
0cd24     F2 1E 62 FC | 	wrlong	local01, objptr
0cd28     37 00 00 FF 
0cd2c     1C E4 85 F1 | 	sub	objptr, ##28188
0cd30     44 49 BF FD | 	call	#_interpret
0cd34     37 00 00 FF 
0cd38     1C E4 05 F1 | 	add	objptr, ##28188
0cd3c     F2 12 02 FB | 	rdlong	arg01, objptr
0cd40     37 00 00 FF 
0cd44     1C E4 85 F1 | 	sub	objptr, ##28188
0cd48     85 01 00 FF 
0cd4c     35 14 06 F6 | 	mov	arg02, ##@LR__5456
0cd50     D8 3D B1 FD | 	call	#__system___string_cmp
0cd54     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd58     B4 FF 9F 5D |  if_ne	jmp	#LR__1097
0cd5c                 | '   close #9   
0cd5c     09 12 06 F6 | 	mov	arg01, #9
0cd60     34 8E B1 FD | 	call	#__system__close
0cd64     08 00 90 FD | 	jmp	#LR__1099
0cd68                 | LR__1098
0cd68     1E 12 06 F6 | 	mov	arg01, #30
0cd6c     FC 07 B1 FD | 	call	#_printerror
0cd70                 | LR__1099
0cd70                 | ' print "Loaded ";currentdir$+"/"+loadname
0cd70     00 12 06 F6 | 	mov	arg01, #0
0cd74     F0 97 B1 FD | 	call	#__system___getiolock_0540
0cd78     FD 12 02 F6 | 	mov	arg01, result1
0cd7c     84 3D B1 FD | 	call	#__system___lockmem
0cd80     85 01 00 FF 
0cd84     36 14 06 F6 | 	mov	arg02, ##@LR__5457
0cd88     00 12 06 F6 | 	mov	arg01, #0
0cd8c     00 16 06 F6 | 	mov	arg03, #0
0cd90     64 4A B1 FD | 	call	#__system___basic_print_string
0cd94     00 1E 06 F6 | 	mov	local01, #0
0cd98     4A 00 00 FF 
0cd9c     90 E4 05 F1 | 	add	objptr, ##38032
0cda0     F2 12 02 FB | 	rdlong	arg01, objptr
0cda4     4A 00 00 FF 
0cda8     90 E4 85 F1 | 	sub	objptr, ##38032
0cdac     85 01 00 FF 
0cdb0     3E 14 06 F6 | 	mov	arg02, ##@LR__5458
0cdb4     A8 3D B1 FD | 	call	#__system___string_concat
0cdb8     FD 12 02 F6 | 	mov	arg01, result1
0cdbc     51 00 00 FF 
0cdc0     D4 E5 05 F1 | 	add	objptr, ##41940
0cdc4     F2 14 02 FB | 	rdlong	arg02, objptr
0cdc8     51 00 00 FF 
0cdcc     D4 E5 85 F1 | 	sub	objptr, ##41940
0cdd0     8C 3D B1 FD | 	call	#__system___string_concat
0cdd4     FD 14 02 F6 | 	mov	arg02, result1
0cdd8     0F 13 02 F6 | 	mov	arg01, local01
0cddc     00 16 06 F6 | 	mov	arg03, #0
0cde0     14 4A B1 FD | 	call	#__system___basic_print_string
0cde4     00 12 06 F6 | 	mov	arg01, #0
0cde8     0A 14 06 F6 | 	mov	arg02, #10
0cdec     00 16 06 F6 | 	mov	arg03, #0
0cdf0     AC 49 B1 FD | 	call	#__system___basic_print_char
0cdf4     00 12 06 F6 | 	mov	arg01, #0
0cdf8     6C 97 B1 FD | 	call	#__system___getiolock_0540
0cdfc     FD 00 68 FC | 	wrlong	#0, result1
0ce00                 | LR__1100
0ce00     A7 F0 03 F6 | 	mov	ptra, fp
0ce04     B2 00 A0 FD | 	call	#popregs_
0ce08                 | _do_load_ret
0ce08     2D 00 64 FD | 	ret
0ce0c                 | 
0ce0c                 | ' 
0ce0c                 | ' sub do_end
0ce0c                 | _do_end
0ce0c     4A 00 00 FF 
0ce10     7C E4 05 F1 | 	add	objptr, ##38012
0ce14     F2 00 02 FB | 	rdlong	_var01, objptr
0ce18     01 00 86 F1 | 	sub	_var01, #1
0ce1c     04 E4 05 F1 | 	add	objptr, #4
0ce20     F2 00 62 FC | 	wrlong	_var01, objptr
0ce24     06 00 00 FF 
0ce28     34 E4 05 F1 | 	add	objptr, ##3124
0ce2c     FF FF BF FF 
0ce30     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0ce34     50 00 00 FF 
0ce38     B4 E4 85 F1 | 	sub	objptr, ##41140
0ce3c                 | _do_end_ret
0ce3c     2D 00 64 FD | 	ret
0ce40                 | 
0ce40                 | ' 
0ce40                 | ' '----------------- Run the program 
0ce40                 | ' 
0ce40                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0ce40                 | ' 
0ce40                 | ' sub do_run
0ce40                 | _do_run
0ce40     01 4A 05 F6 | 	mov	COUNT_, #1
0ce44     A8 00 A0 FD | 	call	#pushregs_
0ce48     4A 00 00 FF 
0ce4c     80 E4 05 F1 | 	add	objptr, ##38016
0ce50     F2 18 02 FB | 	rdlong	arg04, objptr
0ce54     0C 17 02 F6 | 	mov	arg03, arg04
0ce58     01 16 66 F0 | 	shl	arg03, #1
0ce5c     0C 17 02 F1 | 	add	arg03, arg04
0ce60     02 16 66 F0 | 	shl	arg03, #2
0ce64     03 00 00 FF 
0ce68     04 E4 85 F1 | 	sub	objptr, ##1540
0ce6c     F2 16 02 F1 | 	add	arg03, objptr
0ce70     0B 15 02 FB | 	rdlong	arg02, arg03
0ce74                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce74                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0ce74     01 14 0E F2 | 	cmp	arg02, #1 wz
0ce78     47 00 00 FF 
0ce7c     7C E4 85 F1 | 	sub	objptr, ##36476
0ce80     00 12 06 A6 |  if_e	mov	arg01, #0
0ce84     F8 FA BF AD |  if_e	call	#_do_load
0ce88     4A 00 00 FF 
0ce8c     84 E4 05 F1 | 	add	objptr, ##38020
0ce90     F2 18 02 FB | 	rdlong	arg04, objptr
0ce94     06 00 00 FF 
0ce98     30 E4 05 F1 | 	add	objptr, ##3120
0ce9c     F2 18 62 FC | 	wrlong	arg04, objptr
0cea0     04 E4 05 F1 | 	add	objptr, #4
0cea4     F2 00 68 FC | 	wrlong	#0, objptr
0cea8     04 E4 05 F1 | 	add	objptr, #4
0ceac     FF FF FF FF 
0ceb0     F2 FE 6B FC | 	wrlong	##-1, objptr
0ceb4                 | ' if inrun>0 then 
0ceb4     2C E4 05 F1 | 	add	objptr, #44
0ceb8     F2 18 02 FB | 	rdlong	arg04, objptr
0cebc     50 00 00 FF 
0cec0     E8 E4 85 F1 | 	sub	objptr, ##41192
0cec4     01 18 16 F2 | 	cmp	arg04, #1 wc
0cec8     30 00 90 CD |  if_b	jmp	#LR__1110
0cecc     50 00 00 FF 
0ced0     EC E4 05 F1 | 	add	objptr, ##41196
0ced4     F2 12 02 F6 | 	mov	arg01, objptr
0ced8     38 E4 85 F1 | 	sub	objptr, #56
0cedc     F2 14 02 FB | 	rdlong	arg02, objptr
0cee0     18 16 06 F6 | 	mov	arg03, #24
0cee4     44 00 00 FF 
0cee8     E8 E5 85 F1 | 	sub	objptr, ##35304
0ceec     D4 2F B1 FD | 	call	#_psram_spin2_read1
0cef0     0B 00 00 FF 
0cef4     CC E4 85 F1 | 	sub	objptr, ##5836
0cef8                 | '   psram.read1(varptr(runheader),runptr,24)  
0cef8                 | '   return
0cef8     88 02 90 FD | 	jmp	#LR__1116
0cefc                 | LR__1110
0cefc     50 00 00 FF 
0cf00     E8 E4 05 F1 | 	add	objptr, ##41192
0cf04     F2 02 68 FC | 	wrlong	#1, objptr
0cf08     04 E4 05 F1 | 	add	objptr, #4
0cf0c     F2 12 02 F6 | 	mov	arg01, objptr
0cf10     38 E4 85 F1 | 	sub	objptr, #56
0cf14     F2 14 02 FB | 	rdlong	arg02, objptr
0cf18     18 16 06 F6 | 	mov	arg03, #24
0cf1c     44 00 00 FF 
0cf20     E8 E5 85 F1 | 	sub	objptr, ##35304
0cf24     9C 2F B1 FD | 	call	#_psram_spin2_read1
0cf28                 | ' inrun=1
0cf28                 | ' psram.read1(varptr(runheader),runptr,24) 
0cf28                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0cf28     45 00 00 FF 
0cf2c     20 E4 05 F1 | 	add	objptr, ##35360
0cf30     F2 1E 02 FB | 	rdlong	local01, objptr
0cf34     50 00 00 FF 
0cf38     EC E4 85 F1 | 	sub	objptr, ##41196
0cf3c     FF FF 7F FF 
0cf40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0cf44     50 00 00 AF 
0cf48     E8 E4 05 A1 |  if_e	add	objptr, ##41192
0cf4c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0cf50     50 00 00 AF 
0cf54     E8 E4 85 A1 |  if_e	sub	objptr, ##41192
0cf58     28 02 90 AD |  if_e	jmp	#LR__1116
0cf5c                 | ' do 
0cf5c                 | LR__1111
0cf5c                 | '   if runptr<>oldrunptr then
0cf5c     50 00 00 FF 
0cf60     B4 E4 05 F1 | 	add	objptr, ##41140
0cf64     F2 1E 02 FB | 	rdlong	local01, objptr
0cf68     08 E4 05 F1 | 	add	objptr, #8
0cf6c     F2 18 02 FB | 	rdlong	arg04, objptr
0cf70     50 00 00 FF 
0cf74     BC E4 85 F1 | 	sub	objptr, ##41148
0cf78     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0cf7c     CC 00 90 AD |  if_e	jmp	#LR__1112
0cf80     50 00 00 FF 
0cf84     EC E4 05 F1 | 	add	objptr, ##41196
0cf88     F2 12 02 F6 | 	mov	arg01, objptr
0cf8c     38 E4 85 F1 | 	sub	objptr, #56
0cf90     F2 14 02 FB | 	rdlong	arg02, objptr
0cf94     18 16 06 F6 | 	mov	arg03, #24
0cf98     44 00 00 FF 
0cf9c     E8 E5 85 F1 | 	sub	objptr, ##35304
0cfa0     20 2F B1 FD | 	call	#_psram_spin2_read1
0cfa4     3B 00 00 FF 
0cfa8     B0 E5 05 F1 | 	add	objptr, ##30640
0cfac     F2 12 02 F6 | 	mov	arg01, objptr
0cfb0     09 00 00 FF 
0cfb4     38 E4 05 F1 | 	add	objptr, ##4664
0cfb8     F2 14 02 FB | 	rdlong	arg02, objptr
0cfbc     0B 00 00 FF 
0cfc0     50 E4 85 F1 | 	sub	objptr, ##5712
0cfc4     F2 1E 02 FB | 	rdlong	local01, objptr
0cfc8     01 1E 66 F0 | 	shl	local01, #1
0cfcc     0F 15 02 F1 | 	add	arg02, local01
0cfd0     0B 00 00 FF 
0cfd4     90 E4 05 F1 | 	add	objptr, ##5776
0cfd8     F2 16 02 FB | 	rdlong	arg03, objptr
0cfdc     40 E4 85 F1 | 	sub	objptr, #64
0cfe0     F2 1E 02 FB | 	rdlong	local01, objptr
0cfe4     0F 17 82 F1 | 	sub	arg03, local01
0cfe8     44 00 00 FF 
0cfec     E8 E5 85 F1 | 	sub	objptr, ##35304
0cff0     D0 2E B1 FD | 	call	#_psram_spin2_read1
0cff4     45 00 00 FF 
0cff8     28 E4 05 F1 | 	add	objptr, ##35368
0cffc     F2 1E 02 FB | 	rdlong	local01, objptr
0d000     40 E4 85 F1 | 	sub	objptr, #64
0d004     F2 FA 01 FB | 	rdlong	result1, objptr
0d008     FD 1E 82 F1 | 	sub	local01, result1
0d00c     0B 00 00 FF 
0d010     50 E4 85 F1 | 	sub	objptr, ##5712
0d014     F2 FA 01 FB | 	rdlong	result1, objptr
0d018     FD 1E 12 FD | 	qdiv	local01, result1
0d01c     05 00 00 FF 
0d020     18 E4 05 F1 | 	add	objptr, ##2584
0d024     18 1E 62 FD | 	getqx	local01
0d028     03 1E 86 F1 | 	sub	local01, #3
0d02c     F2 1E 62 FC | 	wrlong	local01, objptr
0d030     06 00 00 FF 
0d034     38 E4 05 F1 | 	add	objptr, ##3128
0d038     F2 1E 02 FB | 	rdlong	local01, objptr
0d03c     08 E4 05 F1 | 	add	objptr, #8
0d040     F2 1E 62 FC | 	wrlong	local01, objptr
0d044     50 00 00 FF 
0d048     BC E4 85 F1 | 	sub	objptr, ##41148
0d04c                 | LR__1112
0d04c     50 00 00 FF 
0d050     00 E5 05 F1 | 	add	objptr, ##41216
0d054     F2 1E 02 FB | 	rdlong	local01, objptr
0d058     4C E4 85 F1 | 	sub	objptr, #76
0d05c     F2 1E 62 FC | 	wrlong	local01, objptr
0d060     04 E4 05 F1 | 	add	objptr, #4
0d064     F2 12 02 FB | 	rdlong	arg01, objptr
0d068     50 00 00 FF 
0d06c     B8 E4 85 F1 | 	sub	objptr, ##41144
0d070     AC E0 BF FD | 	call	#_execute_line
0d074     50 00 00 FF 
0d078     B8 E4 05 F1 | 	add	objptr, ##41144
0d07c     F2 FA 61 FC | 	wrlong	result1, objptr
0d080     04 E4 85 F1 | 	sub	objptr, #4
0d084     F2 1E 02 FB | 	rdlong	local01, objptr
0d088     50 00 00 FF 
0d08c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d090     FF FF 3F FF 
0d094     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d098     30 00 90 AD |  if_e	jmp	#LR__1114
0d09c     E0 12 06 F6 | 	mov	arg01, #224
0d0a0     B0 31 B1 FD | 	call	#_usbnew_spin2_keystate
0d0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0a8     10 00 90 5D |  if_ne	jmp	#LR__1113
0d0ac     E4 12 06 F6 | 	mov	arg01, #228
0d0b0     A0 31 B1 FD | 	call	#_usbnew_spin2_keystate
0d0b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0b8     A0 FE 9F AD |  if_e	jmp	#LR__1111
0d0bc                 | LR__1113
0d0bc     06 12 06 F6 | 	mov	arg01, #6
0d0c0     90 31 B1 FD | 	call	#_usbnew_spin2_keystate
0d0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0c8     90 FE 9F AD |  if_e	jmp	#LR__1111
0d0cc                 | LR__1114
0d0cc                 | '   ''do whatever kbm.peek_latest_key()=$106 
0d0cc                 | ' if runptr<>$7FFF_FFFF then 
0d0cc     50 00 00 FF 
0d0d0     B4 E4 05 F1 | 	add	objptr, ##41140
0d0d4     F2 1E 02 FB | 	rdlong	local01, objptr
0d0d8     50 00 00 FF 
0d0dc     B4 E4 85 F1 | 	sub	objptr, ##41140
0d0e0     FF FF 3F FF 
0d0e4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d0e8     64 00 90 AD |  if_e	jmp	#LR__1115
0d0ec                 | '     print "Stopped at line ";runheader(0)
0d0ec     00 12 06 F6 | 	mov	arg01, #0
0d0f0     74 94 B1 FD | 	call	#__system___getiolock_0540
0d0f4     FD 12 02 F6 | 	mov	arg01, result1
0d0f8     08 3A B1 FD | 	call	#__system___lockmem
0d0fc     85 01 00 FF 
0d100     40 14 06 F6 | 	mov	arg02, ##@LR__5459
0d104     00 12 06 F6 | 	mov	arg01, #0
0d108     00 16 06 F6 | 	mov	arg03, #0
0d10c     E8 46 B1 FD | 	call	#__system___basic_print_string
0d110     50 00 00 FF 
0d114     EC E4 05 F1 | 	add	objptr, ##41196
0d118     F2 14 02 FB | 	rdlong	arg02, objptr
0d11c     50 00 00 FF 
0d120     EC E4 85 F1 | 	sub	objptr, ##41196
0d124     00 12 06 F6 | 	mov	arg01, #0
0d128     00 16 06 F6 | 	mov	arg03, #0
0d12c     0A 18 06 F6 | 	mov	arg04, #10
0d130     48 47 B1 FD | 	call	#__system___basic_print_unsigned
0d134     00 12 06 F6 | 	mov	arg01, #0
0d138     0A 14 06 F6 | 	mov	arg02, #10
0d13c     00 16 06 F6 | 	mov	arg03, #0
0d140     5C 46 B1 FD | 	call	#__system___basic_print_char
0d144     00 12 06 F6 | 	mov	arg01, #0
0d148     1C 94 B1 FD | 	call	#__system___getiolock_0540
0d14c     FD 00 68 FC | 	wrlong	#0, result1
0d150                 | LR__1115
0d150     50 00 00 FF 
0d154     E8 E4 05 F1 | 	add	objptr, ##41192
0d158     F2 00 68 FC | 	wrlong	#0, objptr
0d15c     50 00 00 FF 
0d160     E8 E4 85 F1 | 	sub	objptr, ##41192
0d164     11 12 06 F6 | 	mov	arg01, #17
0d168     08 14 06 F6 | 	mov	arg02, #8
0d16c     10 16 06 F6 | 	mov	arg03, #16
0d170     94 13 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d174     10 12 06 F6 | 	mov	arg01, #16
0d178     20 14 06 F6 | 	mov	arg02, #32
0d17c     20 16 06 F6 | 	mov	arg03, #32
0d180     84 13 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d184                 | LR__1116
0d184     A7 F0 03 F6 | 	mov	ptra, fp
0d188     B2 00 A0 FD | 	call	#popregs_
0d18c                 | _do_run_ret
0d18c     2D 00 64 FD | 	ret
0d190                 | 
0d190                 | ' 
0d190                 | ' 
0d190                 | ' 
0d190                 | ' 
0d190                 | ' 
0d190                 | ' 
0d190                 | ' 
0d190                 | ' sub do_defenv
0d190                 | _do_defenv
0d190     08 4A 05 F6 | 	mov	COUNT_, #8
0d194     A8 00 A0 FD | 	call	#pushregs_
0d198     B4 F0 07 F1 | 	add	ptra, #180
0d19c     4A 00 00 FF 
0d1a0     80 E4 05 F1 | 	add	objptr, ##38016
0d1a4     F2 1E 02 FB | 	rdlong	local01, objptr
0d1a8     0F 1B 02 F6 | 	mov	arg05, local01
0d1ac     01 1A 66 F0 | 	shl	arg05, #1
0d1b0     0F 1B 02 F1 | 	add	arg05, local01
0d1b4     02 1A 66 F0 | 	shl	arg05, #2
0d1b8     03 00 00 FF 
0d1bc     04 E4 85 F1 | 	sub	objptr, ##1540
0d1c0     F2 20 02 F6 | 	mov	local02, objptr
0d1c4     F2 1A 02 F1 | 	add	arg05, objptr
0d1c8     0D 1B 02 FB | 	rdlong	arg05, arg05
0d1cc     10 4E 05 F1 | 	add	fp, #16
0d1d0     A7 1A 62 FC | 	wrlong	arg05, fp
0d1d4                 | ' 
0d1d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d1d4                 | ' 
0d1d4                 | ' 
0d1d4                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0d1d4                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0d1d4                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0d1d4                 | ' 
0d1d4                 | ' 
0d1d4                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0d1d4     10 4E 85 F1 | 	sub	fp, #16
0d1d8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d1dc     47 00 00 FF 
0d1e0     7C E4 85 F1 | 	sub	objptr, ##36476
0d1e4     10 4E 05 51 |  if_ne	add	fp, #16
0d1e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d1ec     10 4E 85 51 |  if_ne	sub	fp, #16
0d1f0     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d1f4     10 4E 05 51 |  if_ne	add	fp, #16
0d1f8     0F 21 02 56 |  if_ne	mov	local02, local01
0d1fc     10 4E 85 51 |  if_ne	sub	fp, #16
0d200     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0d204     10 0C 90 5D |  if_ne	jmp	#LR__1141
0d208                 | ' 
0d208                 | '  
0d208                 | ' if numpar=2 then
0d208     10 4E 05 F1 | 	add	fp, #16
0d20c     A7 20 02 FB | 	rdlong	local02, fp
0d210     10 4E 85 F1 | 	sub	fp, #16
0d214     02 20 0E F2 | 	cmp	local02, #2 wz
0d218     24 04 90 5D |  if_ne	jmp	#LR__1133
0d21c     04 E0 BF FD | 	call	#_pop
0d220     FF 1A 02 F6 | 	mov	arg05, result3
0d224     5C 4E 05 F1 | 	add	fp, #92
0d228     A7 FA 61 FC | 	wrlong	result1, fp
0d22c     04 4E 05 F1 | 	add	fp, #4
0d230     A7 FC 61 FC | 	wrlong	result2, fp
0d234     04 4E 05 F1 | 	add	fp, #4
0d238     A7 1A 62 FC | 	wrlong	arg05, fp
0d23c                 | '   t1=pop()
0d23c                 | '   if t1.result_type=result_string2 then 
0d23c     64 4E 85 F1 | 	sub	fp, #100
0d240     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d244     20 00 90 5D |  if_ne	jmp	#LR__1120
0d248     5C 4E 05 F1 | 	add	fp, #92
0d24c     A7 12 02 FB | 	rdlong	arg01, fp
0d250     5C 4E 85 F1 | 	sub	fp, #92
0d254     74 41 B0 FD | 	call	#_convertstring
0d258     68 4E 05 F1 | 	add	fp, #104
0d25c     A7 FA 61 FC | 	wrlong	result1, fp
0d260     68 4E 85 F1 | 	sub	fp, #104
0d264     58 00 90 FD | 	jmp	#LR__1123
0d268                 | LR__1120
0d268     64 4E 05 F1 | 	add	fp, #100
0d26c     A7 20 02 FB | 	rdlong	local02, fp
0d270     64 4E 85 F1 | 	sub	fp, #100
0d274     1F 20 0E F2 | 	cmp	local02, #31 wz
0d278     18 00 90 5D |  if_ne	jmp	#LR__1121
0d27c     5C 4E 05 F1 | 	add	fp, #92
0d280     A7 20 02 FB | 	rdlong	local02, fp
0d284     0C 4E 05 F1 | 	add	fp, #12
0d288     A7 20 62 FC | 	wrlong	local02, fp
0d28c     68 4E 85 F1 | 	sub	fp, #104
0d290     2C 00 90 FD | 	jmp	#LR__1122
0d294                 | LR__1121
0d294     85 01 00 FF 
0d298     51 20 06 F6 | 	mov	local02, ##@LR__5460
0d29c     68 4E 05 F1 | 	add	fp, #104
0d2a0     A7 20 62 FC | 	wrlong	local02, fp
0d2a4     0C 4E 85 F1 | 	sub	fp, #12
0d2a8     A7 12 02 F6 | 	mov	arg01, fp
0d2ac     5C 4E 85 F1 | 	sub	fp, #92
0d2b0     3C 89 B0 FD | 	call	#_converttoint
0d2b4     24 4E 05 F1 | 	add	fp, #36
0d2b8     A7 FA 61 FC | 	wrlong	result1, fp
0d2bc     24 4E 85 F1 | 	sub	fp, #36
0d2c0                 | LR__1122
0d2c0                 | LR__1123
0d2c0                 | ' 
0d2c0                 | '     
0d2c0                 | '   if s1<>"" then 
0d2c0     68 4E 05 F1 | 	add	fp, #104
0d2c4     A7 12 02 FB | 	rdlong	arg01, fp
0d2c8     68 4E 85 F1 | 	sub	fp, #104
0d2cc     85 01 00 FF 
0d2d0     52 14 06 F6 | 	mov	arg02, ##@LR__5461
0d2d4     54 38 B1 FD | 	call	#__system___string_cmp
0d2d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d2dc     24 02 90 AD |  if_e	jmp	#LR__1127
0d2e0     40 DF BF FD | 	call	#_pop
0d2e4     FF 1E 02 F6 | 	mov	local01, result3
0d2e8     5C 4E 05 F1 | 	add	fp, #92
0d2ec     A7 FA 61 FC | 	wrlong	result1, fp
0d2f0     04 4E 05 F1 | 	add	fp, #4
0d2f4     A7 FC 61 FC | 	wrlong	result2, fp
0d2f8     04 4E 05 F1 | 	add	fp, #4
0d2fc     A7 1E 62 FC | 	wrlong	local01, fp
0d300     08 4E 85 F1 | 	sub	fp, #8
0d304     A7 12 02 F6 | 	mov	arg01, fp
0d308     5C 4E 85 F1 | 	sub	fp, #92
0d30c     E0 88 B0 FD | 	call	#_converttoint
0d310     20 4E 05 F1 | 	add	fp, #32
0d314     A7 FA 61 FC | 	wrlong	result1, fp
0d318     20 4E 85 F1 | 	sub	fp, #32
0d31c                 | '     t1=pop()
0d31c                 | '     channel=converttoint(t1) 
0d31c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d31c     09 12 06 F6 | 	mov	arg01, #9
0d320     74 88 B1 FD | 	call	#__system__close
0d324     09 20 06 F6 | 	mov	local02, #9
0d328     85 01 00 FF 
0d32c     53 12 06 F6 | 	mov	arg01, ##@LR__5462
0d330     68 4E 05 F1 | 	add	fp, #104
0d334     A7 14 02 FB | 	rdlong	arg02, fp
0d338     68 4E 85 F1 | 	sub	fp, #104
0d33c     20 38 B1 FD | 	call	#__system___string_concat
0d340     FD 14 02 F6 | 	mov	arg02, result1
0d344     10 13 02 F6 | 	mov	arg01, local02
0d348     00 16 06 F6 | 	mov	arg03, #0
0d34c     B8 43 B1 FD | 	call	#__system___basic_open_string
0d350     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d354     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d358     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d35c     0C 4E 05 F1 | 	add	fp, #12
0d360     A7 FA 61 FC | 	wrlong	result1, fp
0d364                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d364     0C 4E 85 F1 | 	sub	fp, #12
0d368     A0 00 90 AD |  if_e	jmp	#LR__1124
0d36c     00 12 06 F6 | 	mov	arg01, #0
0d370     F4 91 B1 FD | 	call	#__system___getiolock_0540
0d374     FD 12 02 F6 | 	mov	arg01, result1
0d378     88 37 B1 FD | 	call	#__system___lockmem
0d37c     85 01 00 FF 
0d380     60 14 06 F6 | 	mov	arg02, ##@LR__5463
0d384     00 12 06 F6 | 	mov	arg01, #0
0d388     00 16 06 F6 | 	mov	arg03, #0
0d38c     68 44 B1 FD | 	call	#__system___basic_print_string
0d390     0C 4E 05 F1 | 	add	fp, #12
0d394     A7 14 02 FB | 	rdlong	arg02, fp
0d398     0C 4E 85 F1 | 	sub	fp, #12
0d39c     00 12 06 F6 | 	mov	arg01, #0
0d3a0     00 16 06 F6 | 	mov	arg03, #0
0d3a4     0A 18 06 F6 | 	mov	arg04, #10
0d3a8     90 44 B1 FD | 	call	#__system___basic_print_integer
0d3ac     85 01 00 FF 
0d3b0     6E 14 06 F6 | 	mov	arg02, ##@LR__5464
0d3b4     00 12 06 F6 | 	mov	arg01, #0
0d3b8     00 16 06 F6 | 	mov	arg03, #0
0d3bc     38 44 B1 FD | 	call	#__system___basic_print_string
0d3c0     00 20 06 F6 | 	mov	local02, #0
0d3c4     0C 4E 05 F1 | 	add	fp, #12
0d3c8     A7 12 02 FB | 	rdlong	arg01, fp
0d3cc     0C 4E 85 F1 | 	sub	fp, #12
0d3d0     F8 5D B1 FD | 	call	#__system___strerror
0d3d4     FD 14 02 F6 | 	mov	arg02, result1
0d3d8     10 13 02 F6 | 	mov	arg01, local02
0d3dc     00 16 06 F6 | 	mov	arg03, #0
0d3e0     14 44 B1 FD | 	call	#__system___basic_print_string
0d3e4     00 12 06 F6 | 	mov	arg01, #0
0d3e8     0A 14 06 F6 | 	mov	arg02, #10
0d3ec     00 16 06 F6 | 	mov	arg03, #0
0d3f0     AC 43 B1 FD | 	call	#__system___basic_print_char
0d3f4     00 12 06 F6 | 	mov	arg01, #0
0d3f8     6C 91 B1 FD | 	call	#__system___getiolock_0540
0d3fc     FD 00 68 FC | 	wrlong	#0, result1
0d400     09 12 06 F6 | 	mov	arg01, #9
0d404     90 87 B1 FD | 	call	#__system__close
0d408     0C 0A 90 FD | 	jmp	#LR__1141
0d40c                 | LR__1124
0d40c                 | '     get #9,17,envbuf8(channel,0),256
0d40c     20 4E 05 F1 | 	add	fp, #32
0d410     A7 1A 02 FB | 	rdlong	arg05, fp
0d414     20 4E 85 F1 | 	sub	fp, #32
0d418     0D 17 02 F6 | 	mov	arg03, arg05
0d41c     09 16 66 F0 | 	shl	arg03, #9
0d420     0D 17 02 F1 | 	add	arg03, arg05
0d424     0C 00 00 FF 
0d428     D8 E4 05 F1 | 	add	objptr, ##6360
0d42c     F2 16 02 F1 | 	add	arg03, objptr
0d430     09 12 06 F6 | 	mov	arg01, #9
0d434     11 14 06 F6 | 	mov	arg02, #17
0d438     00 19 06 F6 | 	mov	arg04, #256
0d43c     01 1A 06 F6 | 	mov	arg05, #1
0d440     0C 00 00 FF 
0d444     D8 E4 85 F1 | 	sub	objptr, ##6360
0d448     28 45 B1 FD | 	call	#__system___basic_get
0d44c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d44c     14 4E 05 F1 | 	add	fp, #20
0d450     A7 FE 69 FC | 	wrlong	#255, fp
0d454     14 4E 85 F1 | 	sub	fp, #20
0d458     0C 00 00 FF 
0d45c     D8 E4 05 F1 | 	add	objptr, ##6360
0d460     97 30 48 FB | 	callpa	#(@LR__1126-@LR__1125)>>2,fcache_load_ptr_
0d464                 | LR__1125
0d464     20 4E 05 F1 | 	add	fp, #32
0d468     A7 18 02 FB | 	rdlong	arg04, fp
0d46c     0C 21 02 F6 | 	mov	local02, arg04
0d470     09 20 66 F0 | 	shl	local02, #9
0d474     F2 20 02 F1 | 	add	local02, objptr
0d478     0C 4E 85 F1 | 	sub	fp, #12
0d47c     A7 1E 02 FB | 	rdlong	local01, fp
0d480     0F 1B 02 F6 | 	mov	arg05, local01
0d484     01 1A 66 F0 | 	shl	arg05, #1
0d488     10 1B 02 F1 | 	add	arg05, local02
0d48c     0C 21 02 F6 | 	mov	local02, arg04
0d490     09 20 66 F0 | 	shl	local02, #9
0d494     0C 21 02 F1 | 	add	local02, arg04
0d498     F2 20 02 F1 | 	add	local02, objptr
0d49c     10 1F 02 F1 | 	add	local01, local02
0d4a0     0F 21 C2 FA | 	rdbyte	local02, local01
0d4a4     00 21 06 FA | 	mul	local02, #256
0d4a8     0D 21 52 FC | 	wrword	local02, arg05
0d4ac     A7 20 02 FB | 	rdlong	local02, fp
0d4b0     01 20 86 F1 | 	sub	local02, #1
0d4b4     A7 20 62 FC | 	wrlong	local02, fp
0d4b8     14 4E 85 F1 | 	sub	fp, #20
0d4bc     00 20 56 F2 | 	cmps	local02, #0 wc
0d4c0     A0 FF 9F 3D |  if_ae	jmp	#LR__1125
0d4c4                 | LR__1126
0d4c4     0C 00 00 FF 
0d4c8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d4cc                 | '     close #9
0d4cc     09 12 06 F6 | 	mov	arg01, #9
0d4d0     C4 86 B1 FD | 	call	#__system__close
0d4d4     20 4E 05 F1 | 	add	fp, #32
0d4d8     A7 20 02 FB | 	rdlong	local02, fp
0d4dc     20 4E 85 F1 | 	sub	fp, #32
0d4e0     09 20 66 F0 | 	shl	local02, #9
0d4e4     0C 00 00 FF 
0d4e8     D8 E4 05 F1 | 	add	objptr, ##6360
0d4ec     F2 20 02 F1 | 	add	local02, objptr
0d4f0     FE 21 06 F1 | 	add	local02, #510
0d4f4     10 01 58 FC | 	wrword	#0, local02
0d4f8                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0d4f8                 | '     return
0d4f8     0C 00 00 FF 
0d4fc     D8 E4 85 F1 | 	sub	objptr, ##6360
0d500     14 09 90 FD | 	jmp	#LR__1141
0d504                 | LR__1127
0d504                 | '     if wptr < ($80000 - 2048) then 
0d504     24 4E 05 F1 | 	add	fp, #36
0d508     A7 22 02 FB | 	rdlong	local03, fp
0d50c     24 4E 85 F1 | 	sub	fp, #36
0d510     FC 03 00 FF 
0d514     00 22 56 F2 | 	cmps	local03, ##522240 wc
0d518     7C 00 90 3D |  if_ae	jmp	#LR__1130
0d51c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d51c     14 4E 05 F1 | 	add	fp, #20
0d520     A7 00 68 FC | 	wrlong	#0, fp
0d524     14 4E 85 F1 | 	sub	fp, #20
0d528     0C 00 00 FF 
0d52c     D8 E4 05 F1 | 	add	objptr, ##6360
0d530     97 2C 48 FB | 	callpa	#(@LR__1129-@LR__1128)>>2,fcache_load_ptr_
0d534                 | LR__1128
0d534     20 4E 05 F1 | 	add	fp, #32
0d538     A7 22 02 FB | 	rdlong	local03, fp
0d53c     09 22 66 F0 | 	shl	local03, #9
0d540     F2 22 02 F1 | 	add	local03, objptr
0d544     0C 4E 85 F1 | 	sub	fp, #12
0d548     A7 20 02 FB | 	rdlong	local02, fp
0d54c     10 1F 02 F6 | 	mov	local01, local02
0d550     01 1E 66 F0 | 	shl	local01, #1
0d554     11 1F 02 F1 | 	add	local01, local03
0d558     10 4E 05 F1 | 	add	fp, #16
0d55c     A7 12 02 FB | 	rdlong	arg01, fp
0d560     01 20 66 F0 | 	shl	local02, #1
0d564     10 13 02 F1 | 	add	arg01, local02
0d568     09 FB E1 FA | 	rdword	result1, arg01
0d56c     0F FB 51 FC | 	wrword	result1, local01
0d570     10 4E 85 F1 | 	sub	fp, #16
0d574     A7 22 02 FB | 	rdlong	local03, fp
0d578     01 22 06 F1 | 	add	local03, #1
0d57c     A7 22 62 FC | 	wrlong	local03, fp
0d580     14 4E 85 F1 | 	sub	fp, #20
0d584     00 23 56 F2 | 	cmps	local03, #256 wc
0d588     A8 FF 9F CD |  if_b	jmp	#LR__1128
0d58c                 | LR__1129
0d58c     0C 00 00 FF 
0d590     D8 E4 85 F1 | 	sub	objptr, ##6360
0d594     78 00 90 FD | 	jmp	#LR__1132
0d598                 | LR__1130
0d598                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0d598     14 4E 05 F1 | 	add	fp, #20
0d59c     A7 00 68 FC | 	wrlong	#0, fp
0d5a0     14 4E 85 F1 | 	sub	fp, #20
0d5a4                 | LR__1131
0d5a4     20 4E 05 F1 | 	add	fp, #32
0d5a8     A7 22 02 FB | 	rdlong	local03, fp
0d5ac     09 22 66 F0 | 	shl	local03, #9
0d5b0     0C 00 00 FF 
0d5b4     D8 E4 05 F1 | 	add	objptr, ##6360
0d5b8     F2 22 02 F1 | 	add	local03, objptr
0d5bc     0C 4E 85 F1 | 	sub	fp, #12
0d5c0     A7 20 02 FB | 	rdlong	local02, fp
0d5c4     10 1F 02 F6 | 	mov	local01, local02
0d5c8     01 1E 66 F0 | 	shl	local01, #1
0d5cc     11 1F 02 F1 | 	add	local01, local03
0d5d0     10 4E 05 F1 | 	add	fp, #16
0d5d4     A7 12 02 FB | 	rdlong	arg01, fp
0d5d8     24 4E 85 F1 | 	sub	fp, #36
0d5dc     01 20 66 F0 | 	shl	local02, #1
0d5e0     10 13 02 F1 | 	add	arg01, local02
0d5e4     0C 00 00 FF 
0d5e8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d5ec     68 02 B1 FD | 	call	#_psdpeek
0d5f0     0F FB 51 FC | 	wrword	result1, local01
0d5f4     14 4E 05 F1 | 	add	fp, #20
0d5f8     A7 22 02 FB | 	rdlong	local03, fp
0d5fc     01 22 06 F1 | 	add	local03, #1
0d600     A7 22 62 FC | 	wrlong	local03, fp
0d604     14 4E 85 F1 | 	sub	fp, #20
0d608     00 23 56 F2 | 	cmps	local03, #256 wc
0d60c     94 FF 9F CD |  if_b	jmp	#LR__1131
0d610                 | LR__1132
0d610     20 4E 05 F1 | 	add	fp, #32
0d614     A7 22 02 FB | 	rdlong	local03, fp
0d618     20 4E 85 F1 | 	sub	fp, #32
0d61c     09 22 66 F0 | 	shl	local03, #9
0d620     0C 00 00 FF 
0d624     D8 E4 05 F1 | 	add	objptr, ##6360
0d628     F2 22 02 F1 | 	add	local03, objptr
0d62c     FE 23 06 F1 | 	add	local03, #510
0d630     11 01 58 FC | 	wrword	#0, local03
0d634                 | '     envbuf(channel,255)=0
0d634                 | '     return   
0d634     0C 00 00 FF 
0d638     D8 E4 85 F1 | 	sub	objptr, ##6360
0d63c     D8 07 90 FD | 	jmp	#LR__1141
0d640                 | LR__1133
0d640                 | ' 
0d640                 | ' if numpar=5 then    'simple adsr
0d640     10 4E 05 F1 | 	add	fp, #16
0d644     A7 22 02 FB | 	rdlong	local03, fp
0d648     10 4E 85 F1 | 	sub	fp, #16
0d64c     05 22 0E F2 | 	cmp	local03, #5 wz
0d650     98 07 90 5D |  if_ne	jmp	#LR__1140
0d654     CC DB BF FD | 	call	#_pop
0d658     FF 1E 02 F6 | 	mov	local01, result3
0d65c     5C 4E 05 F1 | 	add	fp, #92
0d660     A7 FA 61 FC | 	wrlong	result1, fp
0d664     04 4E 05 F1 | 	add	fp, #4
0d668     A7 FC 61 FC | 	wrlong	result2, fp
0d66c     04 4E 05 F1 | 	add	fp, #4
0d670     A7 1E 62 FC | 	wrlong	local01, fp
0d674     08 4E 85 F1 | 	sub	fp, #8
0d678     A7 12 02 F6 | 	mov	arg01, fp
0d67c     5C 4E 85 F1 | 	sub	fp, #92
0d680     28 86 B0 FD | 	call	#_converttofloat
0d684     FD 22 02 F6 | 	mov	local03, result1
0d688     34 4E 05 F1 | 	add	fp, #52
0d68c     A7 22 62 FC | 	wrlong	local03, fp
0d690     34 4E 85 F1 | 	sub	fp, #52
0d694     8C DB BF FD | 	call	#_pop
0d698     FF 1E 02 F6 | 	mov	local01, result3
0d69c     5C 4E 05 F1 | 	add	fp, #92
0d6a0     A7 FA 61 FC | 	wrlong	result1, fp
0d6a4     04 4E 05 F1 | 	add	fp, #4
0d6a8     A7 FC 61 FC | 	wrlong	result2, fp
0d6ac     04 4E 05 F1 | 	add	fp, #4
0d6b0     A7 1E 62 FC | 	wrlong	local01, fp
0d6b4     08 4E 85 F1 | 	sub	fp, #8
0d6b8     A7 12 02 F6 | 	mov	arg01, fp
0d6bc     5C 4E 85 F1 | 	sub	fp, #92
0d6c0     E8 85 B0 FD | 	call	#_converttofloat
0d6c4     FD 22 02 F6 | 	mov	local03, result1
0d6c8     30 4E 05 F1 | 	add	fp, #48
0d6cc     A7 22 62 FC | 	wrlong	local03, fp
0d6d0     30 4E 85 F1 | 	sub	fp, #48
0d6d4     4C DB BF FD | 	call	#_pop
0d6d8     FF 1E 02 F6 | 	mov	local01, result3
0d6dc     5C 4E 05 F1 | 	add	fp, #92
0d6e0     A7 FA 61 FC | 	wrlong	result1, fp
0d6e4     04 4E 05 F1 | 	add	fp, #4
0d6e8     A7 FC 61 FC | 	wrlong	result2, fp
0d6ec     04 4E 05 F1 | 	add	fp, #4
0d6f0     A7 1E 62 FC | 	wrlong	local01, fp
0d6f4     08 4E 85 F1 | 	sub	fp, #8
0d6f8     A7 12 02 F6 | 	mov	arg01, fp
0d6fc     5C 4E 85 F1 | 	sub	fp, #92
0d700     A8 85 B0 FD | 	call	#_converttofloat
0d704     FD 22 02 F6 | 	mov	local03, result1
0d708     2C 4E 05 F1 | 	add	fp, #44
0d70c     A7 22 62 FC | 	wrlong	local03, fp
0d710     2C 4E 85 F1 | 	sub	fp, #44
0d714     0C DB BF FD | 	call	#_pop
0d718     FF 1E 02 F6 | 	mov	local01, result3
0d71c     5C 4E 05 F1 | 	add	fp, #92
0d720     A7 FA 61 FC | 	wrlong	result1, fp
0d724     04 4E 05 F1 | 	add	fp, #4
0d728     A7 FC 61 FC | 	wrlong	result2, fp
0d72c     04 4E 05 F1 | 	add	fp, #4
0d730     A7 1E 62 FC | 	wrlong	local01, fp
0d734     08 4E 85 F1 | 	sub	fp, #8
0d738     A7 12 02 F6 | 	mov	arg01, fp
0d73c     5C 4E 85 F1 | 	sub	fp, #92
0d740     68 85 B0 FD | 	call	#_converttofloat
0d744     FD 22 02 F6 | 	mov	local03, result1
0d748     28 4E 05 F1 | 	add	fp, #40
0d74c     A7 22 62 FC | 	wrlong	local03, fp
0d750     28 4E 85 F1 | 	sub	fp, #40
0d754     CC DA BF FD | 	call	#_pop
0d758     FF 1E 02 F6 | 	mov	local01, result3
0d75c     5C 4E 05 F1 | 	add	fp, #92
0d760     A7 FA 61 FC | 	wrlong	result1, fp
0d764     04 4E 05 F1 | 	add	fp, #4
0d768     A7 FC 61 FC | 	wrlong	result2, fp
0d76c     04 4E 05 F1 | 	add	fp, #4
0d770     A7 1E 62 FC | 	wrlong	local01, fp
0d774     08 4E 85 F1 | 	sub	fp, #8
0d778     A7 12 02 F6 | 	mov	arg01, fp
0d77c     5C 4E 85 F1 | 	sub	fp, #92
0d780     6C 84 B0 FD | 	call	#_converttoint
0d784     20 4E 05 F1 | 	add	fp, #32
0d788     A7 FA 61 FC | 	wrlong	result1, fp
0d78c                 | ' 
0d78c                 | '   t1=pop() : rr=converttofloat(t1)
0d78c                 | '   t1=pop() : ss=converttofloat(t1) 
0d78c                 | '   t1=pop() : dd=converttofloat(t1)
0d78c                 | '   t1=pop() : aa=converttofloat(t1)
0d78c                 | '   t1=pop() : channel=converttoint(t1)
0d78c                 | '   if ss<0.0 then ss=0.0 
0d78c     10 4E 05 F1 | 	add	fp, #16
0d790     A7 12 02 FB | 	rdlong	arg01, fp
0d794     30 4E 85 F1 | 	sub	fp, #48
0d798     00 14 06 F6 | 	mov	arg02, #0
0d79c     01 16 06 F6 | 	mov	arg03, #1
0d7a0     48 63 B1 FD | 	call	#__system___float_cmp
0d7a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7a8     30 4E 05 C1 |  if_b	add	fp, #48
0d7ac     A7 00 68 CC |  if_b	wrlong	#0, fp
0d7b0     30 4E 85 C1 |  if_b	sub	fp, #48
0d7b4                 | '   if ss>1.0 then ss=1.0
0d7b4     30 4E 05 F1 | 	add	fp, #48
0d7b8     A7 12 02 FB | 	rdlong	arg01, fp
0d7bc     30 4E 85 F1 | 	sub	fp, #48
0d7c0     00 C0 1F FF 
0d7c4     00 14 06 F6 | 	mov	arg02, ##1065353216
0d7c8     01 16 66 F6 | 	neg	arg03, #1
0d7cc     1C 63 B1 FD | 	call	#__system___float_cmp
0d7d0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d7d4     30 4E 05 31 |  if_ae	add	fp, #48
0d7d8     00 C0 9F 3F 
0d7dc     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0d7e0     30 4E 85 31 |  if_ae	sub	fp, #48
0d7e4     28 4E 05 F1 | 	add	fp, #40
0d7e8     A7 12 02 FB | 	rdlong	arg01, fp
0d7ec     04 4E 05 F1 | 	add	fp, #4
0d7f0     A7 14 02 FB | 	rdlong	arg02, fp
0d7f4     2C 4E 85 F1 | 	sub	fp, #44
0d7f8     EC 5A B1 FD | 	call	#__system___float_add
0d7fc     FD 12 02 F6 | 	mov	arg01, result1
0d800     34 4E 05 F1 | 	add	fp, #52
0d804     A7 14 02 FB | 	rdlong	arg02, fp
0d808     34 4E 85 F1 | 	sub	fp, #52
0d80c     D8 5A B1 FD | 	call	#__system___float_add
0d810     4C 4E 05 F1 | 	add	fp, #76
0d814     A7 FA 61 FC | 	wrlong	result1, fp
0d818     FD 14 02 F6 | 	mov	arg02, result1
0d81c     4C 4E 85 F1 | 	sub	fp, #76
0d820     00 C0 21 FF 
0d824     00 12 06 F6 | 	mov	arg01, ##1132462080
0d828     90 60 B1 FD | 	call	#__system___float_div
0d82c     50 4E 05 F1 | 	add	fp, #80
0d830     A7 FA 61 FC | 	wrlong	result1, fp
0d834     28 4E 85 F1 | 	sub	fp, #40
0d838     A7 12 02 FB | 	rdlong	arg01, fp
0d83c     FD 14 02 F6 | 	mov	arg02, result1
0d840     28 4E 85 F1 | 	sub	fp, #40
0d844     70 5E B1 FD | 	call	#__system___float_mul
0d848     FD 12 02 F6 | 	mov	arg01, result1
0d84c     01 14 06 F6 | 	mov	arg02, #1
0d850     2C 63 B1 FD | 	call	#__system___float_tointeger
0d854     A7 FA 61 FC | 	wrlong	result1, fp
0d858     2C 4E 05 F1 | 	add	fp, #44
0d85c     A7 12 02 FB | 	rdlong	arg01, fp
0d860     24 4E 05 F1 | 	add	fp, #36
0d864     A7 14 02 FB | 	rdlong	arg02, fp
0d868     50 4E 85 F1 | 	sub	fp, #80
0d86c     48 5E B1 FD | 	call	#__system___float_mul
0d870     FD 12 02 F6 | 	mov	arg01, result1
0d874     01 14 06 F6 | 	mov	arg02, #1
0d878     04 63 B1 FD | 	call	#__system___float_tointeger
0d87c     04 4E 05 F1 | 	add	fp, #4
0d880     A7 FA 61 FC | 	wrlong	result1, fp
0d884     30 4E 05 F1 | 	add	fp, #48
0d888     A7 12 02 FB | 	rdlong	arg01, fp
0d88c     1C 4E 05 F1 | 	add	fp, #28
0d890     A7 14 02 FB | 	rdlong	arg02, fp
0d894     50 4E 85 F1 | 	sub	fp, #80
0d898     1C 5E B1 FD | 	call	#__system___float_mul
0d89c     FD 12 02 F6 | 	mov	arg01, result1
0d8a0     01 14 06 F6 | 	mov	arg02, #1
0d8a4     D8 62 B1 FD | 	call	#__system___float_tointeger
0d8a8     FD 22 02 F6 | 	mov	local03, result1
0d8ac     0C 4E 05 F1 | 	add	fp, #12
0d8b0     A7 22 62 FC | 	wrlong	local03, fp
0d8b4     0C 4E 85 F1 | 	sub	fp, #12
0d8b8                 | '   fulltime=aa+dd+rr
0d8b8                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0d8b8     00 12 06 F6 | 	mov	arg01, #0
0d8bc     A8 8C B1 FD | 	call	#__system___getiolock_0540
0d8c0     FD 12 02 F6 | 	mov	arg01, result1
0d8c4     3C 32 B1 FD | 	call	#__system___lockmem
0d8c8     A7 14 02 FB | 	rdlong	arg02, fp
0d8cc     00 12 06 F6 | 	mov	arg01, #0
0d8d0     00 16 06 F6 | 	mov	arg03, #0
0d8d4     0A 18 06 F6 | 	mov	arg04, #10
0d8d8     60 3F B1 FD | 	call	#__system___basic_print_integer
0d8dc     00 12 06 F6 | 	mov	arg01, #0
0d8e0     09 14 06 F6 | 	mov	arg02, #9
0d8e4     00 16 06 F6 | 	mov	arg03, #0
0d8e8     B4 3E B1 FD | 	call	#__system___basic_print_char
0d8ec     04 4E 05 F1 | 	add	fp, #4
0d8f0     A7 14 02 FB | 	rdlong	arg02, fp
0d8f4     04 4E 85 F1 | 	sub	fp, #4
0d8f8     00 12 06 F6 | 	mov	arg01, #0
0d8fc     00 16 06 F6 | 	mov	arg03, #0
0d900     0A 18 06 F6 | 	mov	arg04, #10
0d904     34 3F B1 FD | 	call	#__system___basic_print_integer
0d908     00 12 06 F6 | 	mov	arg01, #0
0d90c     09 14 06 F6 | 	mov	arg02, #9
0d910     00 16 06 F6 | 	mov	arg03, #0
0d914     88 3E B1 FD | 	call	#__system___basic_print_char
0d918     0C 4E 05 F1 | 	add	fp, #12
0d91c     A7 14 02 FB | 	rdlong	arg02, fp
0d920     0C 4E 85 F1 | 	sub	fp, #12
0d924     00 12 06 F6 | 	mov	arg01, #0
0d928     00 16 06 F6 | 	mov	arg03, #0
0d92c     0A 18 06 F6 | 	mov	arg04, #10
0d930     08 3F B1 FD | 	call	#__system___basic_print_integer
0d934     00 12 06 F6 | 	mov	arg01, #0
0d938     09 14 06 F6 | 	mov	arg02, #9
0d93c     00 16 06 F6 | 	mov	arg03, #0
0d940     5C 3E B1 FD | 	call	#__system___basic_print_char
0d944     A7 14 02 FB | 	rdlong	arg02, fp
0d948     04 4E 05 F1 | 	add	fp, #4
0d94c     A7 22 02 FB | 	rdlong	local03, fp
0d950     11 15 02 F1 | 	add	arg02, local03
0d954     08 4E 05 F1 | 	add	fp, #8
0d958     A7 22 02 FB | 	rdlong	local03, fp
0d95c     0C 4E 85 F1 | 	sub	fp, #12
0d960     11 15 02 F1 | 	add	arg02, local03
0d964     00 12 06 F6 | 	mov	arg01, #0
0d968     00 16 06 F6 | 	mov	arg03, #0
0d96c     0A 18 06 F6 | 	mov	arg04, #10
0d970     C8 3E B1 FD | 	call	#__system___basic_print_integer
0d974     00 12 06 F6 | 	mov	arg01, #0
0d978     0A 14 06 F6 | 	mov	arg02, #10
0d97c     00 16 06 F6 | 	mov	arg03, #0
0d980     1C 3E B1 FD | 	call	#__system___basic_print_char
0d984     00 12 06 F6 | 	mov	arg01, #0
0d988     DC 8B B1 FD | 	call	#__system___getiolock_0540
0d98c     FD 00 68 FC | 	wrlong	#0, result1
0d990     F8 BF 23 FF 
0d994     00 22 06 F6 | 	mov	local03, ##1199566848
0d998     A7 12 02 FB | 	rdlong	arg01, fp
0d99c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9a0     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9a4     00 24 06 36 |  if_ae	mov	local04, #0
0d9a8     08 59 B1 FD | 	call	#__system___float_fromuns
0d9ac     12 FB 61 F5 | 	xor	result1, local04
0d9b0     FD 14 02 F6 | 	mov	arg02, result1
0d9b4     11 13 02 F6 | 	mov	arg01, local03
0d9b8     00 5F B1 FD | 	call	#__system___float_div
0d9bc     54 4E 05 F1 | 	add	fp, #84
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     F8 BF 23 FF 
0d9c8     00 22 06 F6 | 	mov	local03, ##1199566848
0d9cc     24 4E 85 F1 | 	sub	fp, #36
0d9d0     A7 14 02 FB | 	rdlong	arg02, fp
0d9d4     30 4E 85 F1 | 	sub	fp, #48
0d9d8     F8 BF 23 FF 
0d9dc     00 12 06 F6 | 	mov	arg01, ##1199566848
0d9e0     D4 5C B1 FD | 	call	#__system___float_mul
0d9e4     FD 14 02 F6 | 	mov	arg02, result1
0d9e8     11 13 02 F6 | 	mov	arg01, local03
0d9ec     1F 14 E6 F4 | 	bitnot	arg02, #31
0d9f0     F4 58 B1 FD | 	call	#__system___float_add
0d9f4     FD 22 02 F6 | 	mov	local03, result1
0d9f8     04 4E 05 F1 | 	add	fp, #4
0d9fc     A7 12 02 FB | 	rdlong	arg01, fp
0da00     04 4E 85 F1 | 	sub	fp, #4
0da04     09 13 52 F6 | 	abs	arg01, arg01 wc
0da08     1F 24 C6 C9 |  if_b	decod	local04, #31
0da0c     00 24 06 36 |  if_ae	mov	local04, #0
0da10     A0 58 B1 FD | 	call	#__system___float_fromuns
0da14     12 FB 61 F5 | 	xor	result1, local04
0da18     FD 14 02 F6 | 	mov	arg02, result1
0da1c     11 13 02 F6 | 	mov	arg01, local03
0da20     98 5E B1 FD | 	call	#__system___float_div
0da24     2C 4E 05 F1 | 	add	fp, #44
0da28     A7 FA 61 FC | 	wrlong	result1, fp
0da2c     04 4E 05 F1 | 	add	fp, #4
0da30     A7 14 02 FB | 	rdlong	arg02, fp
0da34     30 4E 85 F1 | 	sub	fp, #48
0da38     F8 BF 23 FF 
0da3c     00 12 06 F6 | 	mov	arg01, ##1199566848
0da40     74 5C B1 FD | 	call	#__system___float_mul
0da44     FD 22 02 F6 | 	mov	local03, result1
0da48     0C 4E 05 F1 | 	add	fp, #12
0da4c     A7 12 02 FB | 	rdlong	arg01, fp
0da50     0C 4E 85 F1 | 	sub	fp, #12
0da54     09 13 52 F6 | 	abs	arg01, arg01 wc
0da58     1F 24 C6 C9 |  if_b	decod	local04, #31
0da5c     00 24 06 36 |  if_ae	mov	local04, #0
0da60     50 58 B1 FD | 	call	#__system___float_fromuns
0da64     12 FB 61 F5 | 	xor	result1, local04
0da68     FD 14 02 F6 | 	mov	arg02, result1
0da6c     11 13 02 F6 | 	mov	arg01, local03
0da70     48 5E B1 FD | 	call	#__system___float_div
0da74     FD 22 02 F6 | 	mov	local03, result1
0da78     58 4E 05 F1 | 	add	fp, #88
0da7c     A7 22 62 FC | 	wrlong	local03, fp
0da80     58 4E 85 F1 | 	sub	fp, #88
0da84                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0da84     00 12 06 F6 | 	mov	arg01, #0
0da88     DC 8A B1 FD | 	call	#__system___getiolock_0540
0da8c     FD 12 02 F6 | 	mov	arg01, result1
0da90     70 30 B1 FD | 	call	#__system___lockmem
0da94     54 4E 05 F1 | 	add	fp, #84
0da98     A7 14 02 FB | 	rdlong	arg02, fp
0da9c     54 4E 85 F1 | 	sub	fp, #84
0daa0     00 12 06 F6 | 	mov	arg01, #0
0daa4     00 16 06 F6 | 	mov	arg03, #0
0daa8     23 18 06 F6 | 	mov	arg04, #35
0daac     20 62 B1 FD | 	call	#__system___basic_print_float
0dab0     00 12 06 F6 | 	mov	arg01, #0
0dab4     09 14 06 F6 | 	mov	arg02, #9
0dab8     00 16 06 F6 | 	mov	arg03, #0
0dabc     E0 3C B1 FD | 	call	#__system___basic_print_char
0dac0     2C 4E 05 F1 | 	add	fp, #44
0dac4     A7 14 02 FB | 	rdlong	arg02, fp
0dac8     2C 4E 85 F1 | 	sub	fp, #44
0dacc     00 12 06 F6 | 	mov	arg01, #0
0dad0     00 16 06 F6 | 	mov	arg03, #0
0dad4     23 18 06 F6 | 	mov	arg04, #35
0dad8     F4 61 B1 FD | 	call	#__system___basic_print_float
0dadc     00 12 06 F6 | 	mov	arg01, #0
0dae0     09 14 06 F6 | 	mov	arg02, #9
0dae4     00 16 06 F6 | 	mov	arg03, #0
0dae8     B4 3C B1 FD | 	call	#__system___basic_print_char
0daec     58 4E 05 F1 | 	add	fp, #88
0daf0     A7 14 02 FB | 	rdlong	arg02, fp
0daf4     58 4E 85 F1 | 	sub	fp, #88
0daf8     00 12 06 F6 | 	mov	arg01, #0
0dafc     00 16 06 F6 | 	mov	arg03, #0
0db00     23 18 06 F6 | 	mov	arg04, #35
0db04     C8 61 B1 FD | 	call	#__system___basic_print_float
0db08     00 12 06 F6 | 	mov	arg01, #0
0db0c     0A 14 06 F6 | 	mov	arg02, #10
0db10     00 16 06 F6 | 	mov	arg03, #0
0db14     88 3C B1 FD | 	call	#__system___basic_print_char
0db18     00 12 06 F6 | 	mov	arg01, #0
0db1c     48 8A B1 FD | 	call	#__system___getiolock_0540
0db20     FD 00 68 FC | 	wrlong	#0, result1
0db24     20 4E 05 F1 | 	add	fp, #32
0db28     A7 26 02 FB | 	rdlong	local05, fp
0db2c     20 4E 85 F1 | 	sub	fp, #32
0db30     01 26 66 F0 | 	shl	local05, #1
0db34     51 00 00 FF 
0db38     C4 E5 05 F1 | 	add	objptr, ##41924
0db3c     F2 26 02 F1 | 	add	local05, objptr
0db40     A7 28 02 FB | 	rdlong	local06, fp
0db44     04 4E 05 F1 | 	add	fp, #4
0db48     A7 22 02 FB | 	rdlong	local03, fp
0db4c     11 29 02 F1 | 	add	local06, local03
0db50     13 29 52 FC | 	wrword	local06, local05
0db54     24 4E 05 F1 | 	add	fp, #36
0db58     A7 00 68 FC | 	wrlong	#0, fp
0db5c                 | '   suspoints(channel)=a+d
0db5c                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0db5c     14 4E 85 F1 | 	sub	fp, #20
0db60     A7 00 68 FC | 	wrlong	#0, fp
0db64     14 4E 85 F1 | 	sub	fp, #20
0db68     A7 2A 02 FB | 	rdlong	local07, fp
0db6c     51 00 00 FF 
0db70     C4 E5 85 F1 | 	sub	objptr, ##41924
0db74                 | LR__1134
0db74     14 4E 05 F1 | 	add	fp, #20
0db78     A7 22 02 FB | 	rdlong	local03, fp
0db7c     14 4E 85 F1 | 	sub	fp, #20
0db80     15 23 52 F2 | 	cmps	local03, local07 wc
0db84     80 00 90 3D |  if_ae	jmp	#LR__1135
0db88     20 4E 05 F1 | 	add	fp, #32
0db8c     A7 28 02 FB | 	rdlong	local06, fp
0db90     09 28 66 F0 | 	shl	local06, #9
0db94     0C 00 00 FF 
0db98     D8 E4 05 F1 | 	add	objptr, ##6360
0db9c     F2 28 02 F1 | 	add	local06, objptr
0dba0     0C 4E 85 F1 | 	sub	fp, #12
0dba4     A7 26 02 FB | 	rdlong	local05, fp
0dba8     01 26 66 F0 | 	shl	local05, #1
0dbac     14 27 02 F1 | 	add	local05, local06
0dbb0     14 4E 05 F1 | 	add	fp, #20
0dbb4     A7 12 02 FB | 	rdlong	arg01, fp
0dbb8     28 4E 85 F1 | 	sub	fp, #40
0dbbc     0C 00 00 FF 
0dbc0     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbc4     01 14 06 F6 | 	mov	arg02, #1
0dbc8     B4 5F B1 FD | 	call	#__system___float_tointeger
0dbcc     13 FB 51 FC | 	wrword	result1, local05
0dbd0     28 4E 05 F1 | 	add	fp, #40
0dbd4     A7 12 02 FB | 	rdlong	arg01, fp
0dbd8     2C 4E 05 F1 | 	add	fp, #44
0dbdc     A7 14 02 FB | 	rdlong	arg02, fp
0dbe0     54 4E 85 F1 | 	sub	fp, #84
0dbe4     00 57 B1 FD | 	call	#__system___float_add
0dbe8     28 4E 05 F1 | 	add	fp, #40
0dbec     A7 FA 61 FC | 	wrlong	result1, fp
0dbf0     14 4E 85 F1 | 	sub	fp, #20
0dbf4     A7 20 02 FB | 	rdlong	local02, fp
0dbf8     01 20 06 F1 | 	add	local02, #1
0dbfc     A7 20 62 FC | 	wrlong	local02, fp
0dc00     14 4E 85 F1 | 	sub	fp, #20
0dc04     6C FF 9F FD | 	jmp	#LR__1134
0dc08                 | LR__1135
0dc08                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0dc08     A7 22 02 FB | 	rdlong	local03, fp
0dc0c     14 4E 05 F1 | 	add	fp, #20
0dc10     A7 22 62 FC | 	wrlong	local03, fp
0dc14     14 4E 85 F1 | 	sub	fp, #20
0dc18     A7 2C 02 FB | 	rdlong	local08, fp
0dc1c     04 4E 05 F1 | 	add	fp, #4
0dc20     A7 22 02 FB | 	rdlong	local03, fp
0dc24     04 4E 85 F1 | 	sub	fp, #4
0dc28     11 2D 02 F1 | 	add	local08, local03
0dc2c                 | LR__1136
0dc2c     14 4E 05 F1 | 	add	fp, #20
0dc30     A7 22 02 FB | 	rdlong	local03, fp
0dc34     14 4E 85 F1 | 	sub	fp, #20
0dc38     16 23 52 F2 | 	cmps	local03, local08 wc
0dc3c     A8 00 90 3D |  if_ae	jmp	#LR__1137
0dc40     20 4E 05 F1 | 	add	fp, #32
0dc44     A7 2A 02 FB | 	rdlong	local07, fp
0dc48     09 2A 66 F0 | 	shl	local07, #9
0dc4c     0C 00 00 FF 
0dc50     D8 E4 05 F1 | 	add	objptr, ##6360
0dc54     F2 2A 02 F1 | 	add	local07, objptr
0dc58     0C 4E 85 F1 | 	sub	fp, #12
0dc5c     A7 28 02 FB | 	rdlong	local06, fp
0dc60     01 28 66 F0 | 	shl	local06, #1
0dc64     15 29 02 F1 | 	add	local06, local07
0dc68     14 4E 05 F1 | 	add	fp, #20
0dc6c     A7 12 02 FB | 	rdlong	arg01, fp
0dc70     28 4E 85 F1 | 	sub	fp, #40
0dc74     0C 00 00 FF 
0dc78     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc7c     01 14 06 F6 | 	mov	arg02, #1
0dc80     FC 5E B1 FD | 	call	#__system___float_tointeger
0dc84     14 FB 51 FC | 	wrword	result1, local06
0dc88     28 4E 05 F1 | 	add	fp, #40
0dc8c     A7 12 02 FB | 	rdlong	arg01, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 14 02 FB | 	rdlong	arg02, fp
0dc98     2C 4E 85 F1 | 	sub	fp, #44
0dc9c     1F 14 E6 F4 | 	bitnot	arg02, #31
0dca0     44 56 B1 FD | 	call	#__system___float_add
0dca4     28 4E 05 F1 | 	add	fp, #40
0dca8     A7 FA 61 FC | 	wrlong	result1, fp
0dcac     28 4E 85 F1 | 	sub	fp, #40
0dcb0     FD 12 02 F6 | 	mov	arg01, result1
0dcb4     00 14 06 F6 | 	mov	arg02, #0
0dcb8     01 16 06 F6 | 	mov	arg03, #1
0dcbc     2C 5E B1 FD | 	call	#__system___float_cmp
0dcc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0dcc4     28 4E 05 C1 |  if_b	add	fp, #40
0dcc8     A7 00 68 CC |  if_b	wrlong	#0, fp
0dccc     28 4E 85 C1 |  if_b	sub	fp, #40
0dcd0     14 4E 05 F1 | 	add	fp, #20
0dcd4     A7 20 02 FB | 	rdlong	local02, fp
0dcd8     01 20 06 F1 | 	add	local02, #1
0dcdc     A7 20 62 FC | 	wrlong	local02, fp
0dce0     14 4E 85 F1 | 	sub	fp, #20
0dce4     44 FF 9F FD | 	jmp	#LR__1136
0dce8                 | LR__1137
0dce8                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0dce8     A7 22 02 FB | 	rdlong	local03, fp
0dcec     04 4E 05 F1 | 	add	fp, #4
0dcf0     A7 2C 02 FB | 	rdlong	local08, fp
0dcf4     16 23 02 F1 | 	add	local03, local08
0dcf8     10 4E 05 F1 | 	add	fp, #16
0dcfc     A7 22 62 FC | 	wrlong	local03, fp
0dd00     14 4E 85 F1 | 	sub	fp, #20
0dd04                 | LR__1138
0dd04     14 4E 05 F1 | 	add	fp, #20
0dd08     A7 26 02 FB | 	rdlong	local05, fp
0dd0c     14 4E 85 F1 | 	sub	fp, #20
0dd10     00 27 56 F2 | 	cmps	local05, #256 wc
0dd14     A8 00 90 3D |  if_ae	jmp	#LR__1139
0dd18     20 4E 05 F1 | 	add	fp, #32
0dd1c     A7 2C 02 FB | 	rdlong	local08, fp
0dd20     09 2C 66 F0 | 	shl	local08, #9
0dd24     0C 00 00 FF 
0dd28     D8 E4 05 F1 | 	add	objptr, ##6360
0dd2c     F2 2C 02 F1 | 	add	local08, objptr
0dd30     0C 4E 85 F1 | 	sub	fp, #12
0dd34     A7 2A 02 FB | 	rdlong	local07, fp
0dd38     01 2A 66 F0 | 	shl	local07, #1
0dd3c     16 2B 02 F1 | 	add	local07, local08
0dd40     14 4E 05 F1 | 	add	fp, #20
0dd44     A7 12 02 FB | 	rdlong	arg01, fp
0dd48     28 4E 85 F1 | 	sub	fp, #40
0dd4c     0C 00 00 FF 
0dd50     D8 E4 85 F1 | 	sub	objptr, ##6360
0dd54     01 14 06 F6 | 	mov	arg02, #1
0dd58     24 5E B1 FD | 	call	#__system___float_tointeger
0dd5c     15 FB 51 FC | 	wrword	result1, local07
0dd60     28 4E 05 F1 | 	add	fp, #40
0dd64     A7 12 02 FB | 	rdlong	arg01, fp
0dd68     30 4E 05 F1 | 	add	fp, #48
0dd6c     A7 14 02 FB | 	rdlong	arg02, fp
0dd70     58 4E 85 F1 | 	sub	fp, #88
0dd74     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd78     6C 55 B1 FD | 	call	#__system___float_add
0dd7c     28 4E 05 F1 | 	add	fp, #40
0dd80     A7 FA 61 FC | 	wrlong	result1, fp
0dd84     28 4E 85 F1 | 	sub	fp, #40
0dd88     FD 12 02 F6 | 	mov	arg01, result1
0dd8c     00 14 06 F6 | 	mov	arg02, #0
0dd90     01 16 06 F6 | 	mov	arg03, #1
0dd94     54 5D B1 FD | 	call	#__system___float_cmp
0dd98     00 FA 55 F2 | 	cmps	result1, #0 wc
0dd9c     28 4E 05 C1 |  if_b	add	fp, #40
0dda0     A7 00 68 CC |  if_b	wrlong	#0, fp
0dda4     28 4E 85 C1 |  if_b	sub	fp, #40
0dda8     14 4E 05 F1 | 	add	fp, #20
0ddac     A7 2C 02 FB | 	rdlong	local08, fp
0ddb0     01 2C 06 F1 | 	add	local08, #1
0ddb4     A7 2C 62 FC | 	wrlong	local08, fp
0ddb8     14 4E 85 F1 | 	sub	fp, #20
0ddbc     44 FF 9F FD | 	jmp	#LR__1138
0ddc0                 | LR__1139
0ddc0     20 4E 05 F1 | 	add	fp, #32
0ddc4     A7 26 02 FB | 	rdlong	local05, fp
0ddc8     20 4E 85 F1 | 	sub	fp, #32
0ddcc     09 26 66 F0 | 	shl	local05, #9
0ddd0     0C 00 00 FF 
0ddd4     D8 E4 05 F1 | 	add	objptr, ##6360
0ddd8     F2 26 02 F1 | 	add	local05, objptr
0dddc     FE 27 06 F1 | 	add	local05, #510
0dde0     13 01 58 FC | 	wrword	#0, local05
0dde4     0C 00 00 FF 
0dde8     D8 E4 85 F1 | 	sub	objptr, ##6360
0ddec                 | LR__1140
0ddec     20 4E 05 F1 | 	add	fp, #32
0ddf0     A7 26 02 FB | 	rdlong	local05, fp
0ddf4     20 4E 85 F1 | 	sub	fp, #32
0ddf8     09 26 66 F0 | 	shl	local05, #9
0ddfc     0C 00 00 FF 
0de00     D8 E4 05 F1 | 	add	objptr, ##6360
0de04     F2 26 02 F1 | 	add	local05, objptr
0de08     FE 27 06 F1 | 	add	local05, #510
0de0c     13 01 58 FC | 	wrword	#0, local05
0de10     0C 00 00 FF 
0de14     D8 E4 85 F1 | 	sub	objptr, ##6360
0de18                 | LR__1141
0de18     A7 F0 03 F6 | 	mov	ptra, fp
0de1c     B2 00 A0 FD | 	call	#popregs_
0de20                 | _do_defenv_ret
0de20     2D 00 64 FD | 	ret
0de24                 | 
0de24                 | ' 
0de24                 | ' 
0de24                 | ' sub do_play
0de24                 | _do_play
0de24     06 4A 05 F6 | 	mov	COUNT_, #6
0de28     A8 00 A0 FD | 	call	#pushregs_
0de2c     7C F0 07 F1 | 	add	ptra, #124
0de30     68 4E 05 F1 | 	add	fp, #104
0de34     AB CB A1 FF 
0de38     A7 D6 6B FC | 	wrlong	##1133991915, fp
0de3c                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0de3c                 | ' 
0de3c                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0de3c     64 4E 85 F1 | 	sub	fp, #100
0de40     A7 00 68 FC | 	wrlong	#0, fp
0de44     97 18 48 FB | 	callpa	#(@LR__1151-@LR__1150)>>2,fcache_load_ptr_
0de48                 | LR__1150
0de48     A7 16 02 FB | 	rdlong	arg03, fp
0de4c     02 16 66 F0 | 	shl	arg03, #2
0de50     34 4E 05 F1 | 	add	fp, #52
0de54     A7 16 02 F1 | 	add	arg03, fp
0de58     00 00 E0 FF 
0de5c     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0de60     34 4E 85 F1 | 	sub	fp, #52
0de64     A7 1E 02 FB | 	rdlong	local01, fp
0de68     01 1E 06 F1 | 	add	local01, #1
0de6c     A7 1E 62 FC | 	wrlong	local01, fp
0de70     09 1E 56 F2 | 	cmps	local01, #9 wc
0de74     D0 FF 9F CD |  if_b	jmp	#LR__1150
0de78                 | LR__1151
0de78     04 4E 85 F1 | 	sub	fp, #4
0de7c     4A 00 00 FF 
0de80     80 E4 05 F1 | 	add	objptr, ##38016
0de84     F2 20 02 FB | 	rdlong	local02, objptr
0de88     10 23 02 F6 | 	mov	local03, local02
0de8c     01 22 66 F0 | 	shl	local03, #1
0de90     10 23 02 F1 | 	add	local03, local02
0de94     02 22 66 F0 | 	shl	local03, #2
0de98     03 00 00 FF 
0de9c     04 E4 85 F1 | 	sub	objptr, ##1540
0dea0     F2 22 02 F1 | 	add	local03, objptr
0dea4     11 25 02 FB | 	rdlong	local04, local03
0dea8     A7 24 62 FC | 	wrlong	local04, fp
0deac                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0deac                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0deac                 | ' numpar=compiledline(lineptr_e).result.uresult
0deac                 | ' for i=numpar to 1 step -1 
0deac     04 4E 05 F1 | 	add	fp, #4
0deb0     A7 24 62 FC | 	wrlong	local04, fp
0deb4     04 4E 85 F1 | 	sub	fp, #4
0deb8     47 00 00 FF 
0debc     7C E4 85 F1 | 	sub	objptr, ##36476
0dec0                 | LR__1152
0dec0     60 D3 BF FD | 	call	#_pop
0dec4     5C 4E 05 F1 | 	add	fp, #92
0dec8     A7 FA 61 FC | 	wrlong	result1, fp
0decc     04 4E 05 F1 | 	add	fp, #4
0ded0     A7 FC 61 FC | 	wrlong	result2, fp
0ded4     04 4E 05 F1 | 	add	fp, #4
0ded8     A7 FE 61 FC | 	wrlong	result3, fp
0dedc     60 4E 85 F1 | 	sub	fp, #96
0dee0     A7 22 02 FB | 	rdlong	local03, fp
0dee4     01 22 86 F1 | 	sub	local03, #1
0dee8     02 22 66 F0 | 	shl	local03, #2
0deec     34 4E 05 F1 | 	add	fp, #52
0def0     A7 22 02 F1 | 	add	local03, fp
0def4     24 4E 05 F1 | 	add	fp, #36
0def8     A7 26 02 F6 | 	mov	local05, fp
0defc     13 13 02 F6 | 	mov	arg01, local05
0df00     5C 4E 85 F1 | 	sub	fp, #92
0df04     A4 7D B0 FD | 	call	#_converttofloat
0df08     11 FB 61 FC | 	wrlong	result1, local03
0df0c     04 4E 05 F1 | 	add	fp, #4
0df10     A7 1E 02 FB | 	rdlong	local01, fp
0df14     01 1E 86 F1 | 	sub	local01, #1
0df18     A7 1E 62 FC | 	wrlong	local01, fp
0df1c     04 4E 85 F1 | 	sub	fp, #4
0df20     01 1E 56 F2 | 	cmps	local01, #1 wc
0df24     98 FF 9F 3D |  if_ae	jmp	#LR__1152
0df28                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0df28     38 4E 05 F1 | 	add	fp, #56
0df2c     A7 12 02 FB | 	rdlong	arg01, fp
0df30     38 4E 85 F1 | 	sub	fp, #56
0df34     00 14 06 F6 | 	mov	arg02, #0
0df38     01 16 06 F6 | 	mov	arg03, #1
0df3c     AC 5B B1 FD | 	call	#__system___float_cmp
0df40     00 FA 55 F2 | 	cmps	result1, #0 wc
0df44     0C 4E 05 C1 |  if_b	add	fp, #12
0df48     A7 00 68 CC |  if_b	wrlong	#0, fp
0df4c     0C 4E 85 C1 |  if_b	sub	fp, #12
0df50     2C 00 90 CD |  if_b	jmp	#LR__1153
0df54     38 4E 05 F1 | 	add	fp, #56
0df58     A7 12 02 FB | 	rdlong	arg01, fp
0df5c     38 4E 85 F1 | 	sub	fp, #56
0df60     01 14 06 F6 | 	mov	arg02, #1
0df64     18 5C B1 FD | 	call	#__system___float_tointeger
0df68     FD 1E 52 F6 | 	abs	local01, result1 wc
0df6c     07 1E 06 F5 | 	and	local01, #7
0df70     0F 1F 82 F6 | 	negc	local01, local01
0df74     0C 4E 05 F1 | 	add	fp, #12
0df78     A7 1E 62 FC | 	wrlong	local01, fp
0df7c     0C 4E 85 F1 | 	sub	fp, #12
0df80                 | LR__1153
0df80                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0df80     3C 4E 05 F1 | 	add	fp, #60
0df84     A7 12 02 FB | 	rdlong	arg01, fp
0df88     3C 4E 85 F1 | 	sub	fp, #60
0df8c     00 14 06 F6 | 	mov	arg02, #0
0df90     01 16 06 F6 | 	mov	arg03, #1
0df94     54 5B B1 FD | 	call	#__system___float_cmp
0df98     00 FA 55 F2 | 	cmps	result1, #0 wc
0df9c     40 00 90 3D |  if_ae	jmp	#LR__1154
0dfa0     0C 4E 05 F1 | 	add	fp, #12
0dfa4     A7 20 02 FB | 	rdlong	local02, fp
0dfa8     10 23 02 F6 | 	mov	local03, local02
0dfac     01 22 66 F0 | 	shl	local03, #1
0dfb0     10 23 02 F1 | 	add	local03, local02
0dfb4     03 22 66 F0 | 	shl	local03, #3
0dfb8     14 00 00 FF 
0dfbc     38 E5 05 F1 | 	add	objptr, ##10552
0dfc0     F2 22 02 F1 | 	add	local03, objptr
0dfc4     11 23 02 FB | 	rdlong	local03, local03
0dfc8     60 4E 05 F1 | 	add	fp, #96
0dfcc     A7 22 62 FC | 	wrlong	local03, fp
0dfd0     6C 4E 85 F1 | 	sub	fp, #108
0dfd4     14 00 00 FF 
0dfd8     38 E5 85 F1 | 	sub	objptr, ##10552
0dfdc     44 00 90 FD | 	jmp	#LR__1155
0dfe0                 | LR__1154
0dfe0     3C 4E 05 F1 | 	add	fp, #60
0dfe4     A7 24 02 FB | 	rdlong	local04, fp
0dfe8     30 4E 05 F1 | 	add	fp, #48
0dfec     A7 24 62 FC | 	wrlong	local04, fp
0dff0     60 4E 85 F1 | 	sub	fp, #96
0dff4     A7 20 02 FB | 	rdlong	local02, fp
0dff8     10 23 02 F6 | 	mov	local03, local02
0dffc     01 22 66 F0 | 	shl	local03, #1
0e000     10 23 02 F1 | 	add	local03, local02
0e004     03 22 66 F0 | 	shl	local03, #3
0e008     14 00 00 FF 
0e00c     38 E5 05 F1 | 	add	objptr, ##10552
0e010     F2 22 02 F1 | 	add	local03, objptr
0e014     0C 4E 85 F1 | 	sub	fp, #12
0e018     11 25 62 FC | 	wrlong	local04, local03
0e01c     14 00 00 FF 
0e020     38 E5 85 F1 | 	sub	objptr, ##10552
0e024                 | LR__1155
0e024                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0e024     44 4E 05 F1 | 	add	fp, #68
0e028     A7 12 02 FB | 	rdlong	arg01, fp
0e02c     44 4E 85 F1 | 	sub	fp, #68
0e030     00 14 06 F6 | 	mov	arg02, #0
0e034     01 16 06 F6 | 	mov	arg03, #1
0e038     B0 5A B1 FD | 	call	#__system___float_cmp
0e03c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e040     24 00 90 CD |  if_b	jmp	#LR__1156
0e044     44 4E 05 F1 | 	add	fp, #68
0e048     A7 12 02 FB | 	rdlong	arg01, fp
0e04c     44 4E 85 F1 | 	sub	fp, #68
0e050     89 C1 20 FF 
0e054     6F 14 06 F6 | 	mov	arg02, ##1099108975
0e058     01 16 66 F6 | 	neg	arg03, #1
0e05c     8C 5A B1 FD | 	call	#__system___float_cmp
0e060     01 FA 55 F2 | 	cmps	result1, #1 wc
0e064     44 00 90 CD |  if_b	jmp	#LR__1157
0e068                 | LR__1156
0e068     0C 4E 05 F1 | 	add	fp, #12
0e06c     A7 20 02 FB | 	rdlong	local02, fp
0e070     10 23 02 F6 | 	mov	local03, local02
0e074     01 22 66 F0 | 	shl	local03, #1
0e078     10 23 02 F1 | 	add	local03, local02
0e07c     03 22 66 F0 | 	shl	local03, #3
0e080     14 00 00 FF 
0e084     38 E5 05 F1 | 	add	objptr, ##10552
0e088     F2 22 02 F1 | 	add	local03, objptr
0e08c     0C 22 06 F1 | 	add	local03, #12
0e090     11 23 02 FB | 	rdlong	local03, local03
0e094     68 4E 05 F1 | 	add	fp, #104
0e098     A7 22 62 FC | 	wrlong	local03, fp
0e09c     74 4E 85 F1 | 	sub	fp, #116
0e0a0     14 00 00 FF 
0e0a4     38 E5 85 F1 | 	sub	objptr, ##10552
0e0a8     48 00 90 FD | 	jmp	#LR__1158
0e0ac                 | LR__1157
0e0ac     44 4E 05 F1 | 	add	fp, #68
0e0b0     A7 24 02 FB | 	rdlong	local04, fp
0e0b4     30 4E 05 F1 | 	add	fp, #48
0e0b8     A7 24 62 FC | 	wrlong	local04, fp
0e0bc     68 4E 85 F1 | 	sub	fp, #104
0e0c0     A7 20 02 FB | 	rdlong	local02, fp
0e0c4     10 23 02 F6 | 	mov	local03, local02
0e0c8     01 22 66 F0 | 	shl	local03, #1
0e0cc     10 23 02 F1 | 	add	local03, local02
0e0d0     03 22 66 F0 | 	shl	local03, #3
0e0d4     14 00 00 FF 
0e0d8     38 E5 05 F1 | 	add	objptr, ##10552
0e0dc     F2 22 02 F1 | 	add	local03, objptr
0e0e0     0C 4E 85 F1 | 	sub	fp, #12
0e0e4     0C 22 06 F1 | 	add	local03, #12
0e0e8     11 25 62 FC | 	wrlong	local04, local03
0e0ec     14 00 00 FF 
0e0f0     38 E5 85 F1 | 	sub	objptr, ##10552
0e0f4                 | LR__1158
0e0f4                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0e0f4     48 4E 05 F1 | 	add	fp, #72
0e0f8     A7 12 02 FB | 	rdlong	arg01, fp
0e0fc     48 4E 85 F1 | 	sub	fp, #72
0e100     00 14 06 F6 | 	mov	arg02, #0
0e104     01 16 06 F6 | 	mov	arg03, #1
0e108     E0 59 B1 FD | 	call	#__system___float_cmp
0e10c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e110     24 00 90 CD |  if_b	jmp	#LR__1159
0e114     48 4E 05 F1 | 	add	fp, #72
0e118     A7 12 02 FB | 	rdlong	arg01, fp
0e11c     48 4E 85 F1 | 	sub	fp, #72
0e120     00 00 21 FF 
0e124     00 14 06 F6 | 	mov	arg02, ##1107296256
0e128     01 16 66 F6 | 	neg	arg03, #1
0e12c     BC 59 B1 FD | 	call	#__system___float_cmp
0e130     01 FA 55 F2 | 	cmps	result1, #1 wc
0e134     48 00 90 CD |  if_b	jmp	#LR__1160
0e138                 | LR__1159
0e138     0C 4E 05 F1 | 	add	fp, #12
0e13c     A7 22 02 FB | 	rdlong	local03, fp
0e140     11 27 02 F6 | 	mov	local05, local03
0e144     01 26 66 F0 | 	shl	local05, #1
0e148     11 27 02 F1 | 	add	local05, local03
0e14c     03 26 66 F0 | 	shl	local05, #3
0e150     14 00 00 FF 
0e154     38 E5 05 F1 | 	add	objptr, ##10552
0e158     F2 26 02 F1 | 	add	local05, objptr
0e15c     04 26 06 F1 | 	add	local05, #4
0e160     13 27 C2 FA | 	rdbyte	local05, local05
0e164     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e168     14 4E 05 F1 | 	add	fp, #20
0e16c     A7 24 62 FC | 	wrlong	local04, fp
0e170     20 4E 85 F1 | 	sub	fp, #32
0e174     14 00 00 FF 
0e178     38 E5 85 F1 | 	sub	objptr, ##10552
0e17c     54 00 90 FD | 	jmp	#LR__1161
0e180                 | LR__1160
0e180     48 4E 05 F1 | 	add	fp, #72
0e184     A7 12 02 FB | 	rdlong	arg01, fp
0e188     48 4E 85 F1 | 	sub	fp, #72
0e18c     01 14 06 F6 | 	mov	arg02, #1
0e190     EC 59 B1 FD | 	call	#__system___float_tointeger
0e194     20 4E 05 F1 | 	add	fp, #32
0e198     A7 FA 61 FC | 	wrlong	result1, fp
0e19c     14 4E 85 F1 | 	sub	fp, #20
0e1a0     A7 20 02 FB | 	rdlong	local02, fp
0e1a4     10 23 02 F6 | 	mov	local03, local02
0e1a8     01 22 66 F0 | 	shl	local03, #1
0e1ac     10 23 02 F1 | 	add	local03, local02
0e1b0     03 22 66 F0 | 	shl	local03, #3
0e1b4     14 00 00 FF 
0e1b8     38 E5 05 F1 | 	add	objptr, ##10552
0e1bc     F2 22 02 F1 | 	add	local03, objptr
0e1c0     0C 4E 85 F1 | 	sub	fp, #12
0e1c4     04 22 06 F1 | 	add	local03, #4
0e1c8     11 FB 41 FC | 	wrbyte	result1, local03
0e1cc     14 00 00 FF 
0e1d0     38 E5 85 F1 | 	sub	objptr, ##10552
0e1d4                 | LR__1161
0e1d4                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0e1d4     4C 4E 05 F1 | 	add	fp, #76
0e1d8     A7 12 02 FB | 	rdlong	arg01, fp
0e1dc     4C 4E 85 F1 | 	sub	fp, #76
0e1e0     00 14 06 F6 | 	mov	arg02, #0
0e1e4     01 16 06 F6 | 	mov	arg03, #1
0e1e8     00 59 B1 FD | 	call	#__system___float_cmp
0e1ec     00 FA 55 F2 | 	cmps	result1, #0 wc
0e1f0     24 00 90 CD |  if_b	jmp	#LR__1162
0e1f4     4C 4E 05 F1 | 	add	fp, #76
0e1f8     A7 12 02 FB | 	rdlong	arg01, fp
0e1fc     4C 4E 85 F1 | 	sub	fp, #76
0e200     00 80 20 FF 
0e204     00 14 06 F6 | 	mov	arg02, ##1090519040
0e208     01 16 66 F6 | 	neg	arg03, #1
0e20c     DC 58 B1 FD | 	call	#__system___float_cmp
0e210     01 FA 55 F2 | 	cmps	result1, #1 wc
0e214     48 00 90 CD |  if_b	jmp	#LR__1163
0e218                 | LR__1162
0e218     0C 4E 05 F1 | 	add	fp, #12
0e21c     A7 22 02 FB | 	rdlong	local03, fp
0e220     11 27 02 F6 | 	mov	local05, local03
0e224     01 26 66 F0 | 	shl	local05, #1
0e228     11 27 02 F1 | 	add	local05, local03
0e22c     03 26 66 F0 | 	shl	local05, #3
0e230     14 00 00 FF 
0e234     38 E5 05 F1 | 	add	objptr, ##10552
0e238     F2 26 02 F1 | 	add	local05, objptr
0e23c     05 26 06 F1 | 	add	local05, #5
0e240     13 27 C2 FA | 	rdbyte	local05, local05
0e244     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e248     18 4E 05 F1 | 	add	fp, #24
0e24c     A7 24 62 FC | 	wrlong	local04, fp
0e250     24 4E 85 F1 | 	sub	fp, #36
0e254     14 00 00 FF 
0e258     38 E5 85 F1 | 	sub	objptr, ##10552
0e25c     54 00 90 FD | 	jmp	#LR__1164
0e260                 | LR__1163
0e260     4C 4E 05 F1 | 	add	fp, #76
0e264     A7 12 02 FB | 	rdlong	arg01, fp
0e268     4C 4E 85 F1 | 	sub	fp, #76
0e26c     01 14 06 F6 | 	mov	arg02, #1
0e270     0C 59 B1 FD | 	call	#__system___float_tointeger
0e274     24 4E 05 F1 | 	add	fp, #36
0e278     A7 FA 61 FC | 	wrlong	result1, fp
0e27c     18 4E 85 F1 | 	sub	fp, #24
0e280     A7 20 02 FB | 	rdlong	local02, fp
0e284     10 23 02 F6 | 	mov	local03, local02
0e288     01 22 66 F0 | 	shl	local03, #1
0e28c     10 23 02 F1 | 	add	local03, local02
0e290     03 22 66 F0 | 	shl	local03, #3
0e294     14 00 00 FF 
0e298     38 E5 05 F1 | 	add	objptr, ##10552
0e29c     F2 22 02 F1 | 	add	local03, objptr
0e2a0     0C 4E 85 F1 | 	sub	fp, #12
0e2a4     05 22 06 F1 | 	add	local03, #5
0e2a8     11 FB 41 FC | 	wrbyte	result1, local03
0e2ac     14 00 00 FF 
0e2b0     38 E5 85 F1 | 	sub	objptr, ##10552
0e2b4                 | LR__1164
0e2b4                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0e2b4     50 4E 05 F1 | 	add	fp, #80
0e2b8     A7 12 02 FB | 	rdlong	arg01, fp
0e2bc     50 4E 85 F1 | 	sub	fp, #80
0e2c0     00 14 06 F6 | 	mov	arg02, #0
0e2c4     01 16 06 F6 | 	mov	arg03, #1
0e2c8     20 58 B1 FD | 	call	#__system___float_cmp
0e2cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0e2d0     24 00 90 CD |  if_b	jmp	#LR__1165
0e2d4     50 4E 05 F1 | 	add	fp, #80
0e2d8     A7 12 02 FB | 	rdlong	arg01, fp
0e2dc     50 4E 85 F1 | 	sub	fp, #80
0e2e0     00 3D 22 FF 
0e2e4     00 14 06 F6 | 	mov	arg02, ##1148846080
0e2e8     01 16 66 F6 | 	neg	arg03, #1
0e2ec     FC 57 B1 FD | 	call	#__system___float_cmp
0e2f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0e2f4     44 00 90 CD |  if_b	jmp	#LR__1166
0e2f8                 | LR__1165
0e2f8     0C 4E 05 F1 | 	add	fp, #12
0e2fc     A7 20 02 FB | 	rdlong	local02, fp
0e300     10 23 02 F6 | 	mov	local03, local02
0e304     01 22 66 F0 | 	shl	local03, #1
0e308     10 23 02 F1 | 	add	local03, local02
0e30c     03 22 66 F0 | 	shl	local03, #3
0e310     14 00 00 FF 
0e314     38 E5 05 F1 | 	add	objptr, ##10552
0e318     F2 22 02 F1 | 	add	local03, objptr
0e31c     08 22 06 F1 | 	add	local03, #8
0e320     11 25 02 FB | 	rdlong	local04, local03
0e324     6C 4E 05 F1 | 	add	fp, #108
0e328     A7 24 62 FC | 	wrlong	local04, fp
0e32c     78 4E 85 F1 | 	sub	fp, #120
0e330     14 00 00 FF 
0e334     38 E5 85 F1 | 	sub	objptr, ##10552
0e338     48 00 90 FD | 	jmp	#LR__1167
0e33c                 | LR__1166
0e33c     50 4E 05 F1 | 	add	fp, #80
0e340     A7 24 02 FB | 	rdlong	local04, fp
0e344     28 4E 05 F1 | 	add	fp, #40
0e348     A7 24 62 FC | 	wrlong	local04, fp
0e34c     6C 4E 85 F1 | 	sub	fp, #108
0e350     A7 20 02 FB | 	rdlong	local02, fp
0e354     10 23 02 F6 | 	mov	local03, local02
0e358     01 22 66 F0 | 	shl	local03, #1
0e35c     10 23 02 F1 | 	add	local03, local02
0e360     03 22 66 F0 | 	shl	local03, #3
0e364     14 00 00 FF 
0e368     38 E5 05 F1 | 	add	objptr, ##10552
0e36c     F2 22 02 F1 | 	add	local03, objptr
0e370     0C 4E 85 F1 | 	sub	fp, #12
0e374     08 22 06 F1 | 	add	local03, #8
0e378     11 25 62 FC | 	wrlong	local04, local03
0e37c     14 00 00 FF 
0e380     38 E5 85 F1 | 	sub	objptr, ##10552
0e384                 | LR__1167
0e384                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0e384     40 4E 05 F1 | 	add	fp, #64
0e388     A7 12 02 FB | 	rdlong	arg01, fp
0e38c     40 4E 85 F1 | 	sub	fp, #64
0e390     00 14 06 F6 | 	mov	arg02, #0
0e394     01 16 06 F6 | 	mov	arg03, #1
0e398     50 57 B1 FD | 	call	#__system___float_cmp
0e39c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e3a0     24 00 90 CD |  if_b	jmp	#LR__1168
0e3a4     40 4E 05 F1 | 	add	fp, #64
0e3a8     A7 12 02 FB | 	rdlong	arg01, fp
0e3ac     40 4E 85 F1 | 	sub	fp, #64
0e3b0     20 0E 23 FF 
0e3b4     00 14 06 F6 | 	mov	arg02, ##1176256512
0e3b8     01 16 66 F6 | 	neg	arg03, #1
0e3bc     2C 57 B1 FD | 	call	#__system___float_cmp
0e3c0     01 FA 55 F2 | 	cmps	result1, #1 wc
0e3c4     44 00 90 CD |  if_b	jmp	#LR__1169
0e3c8                 | LR__1168
0e3c8     0C 4E 05 F1 | 	add	fp, #12
0e3cc     A7 22 02 FB | 	rdlong	local03, fp
0e3d0     11 25 02 F6 | 	mov	local04, local03
0e3d4     01 24 66 F0 | 	shl	local04, #1
0e3d8     11 25 02 F1 | 	add	local04, local03
0e3dc     03 24 66 F0 | 	shl	local04, #3
0e3e0     14 00 00 FF 
0e3e4     38 E5 05 F1 | 	add	objptr, ##10552
0e3e8     F2 24 02 F1 | 	add	local04, objptr
0e3ec     06 24 06 F1 | 	add	local04, #6
0e3f0     12 25 E2 FA | 	rdword	local04, local04
0e3f4     1C 4E 05 F1 | 	add	fp, #28
0e3f8     A7 24 62 FC | 	wrlong	local04, fp
0e3fc     28 4E 85 F1 | 	sub	fp, #40
0e400     14 00 00 FF 
0e404     38 E5 85 F1 | 	sub	objptr, ##10552
0e408     54 00 90 FD | 	jmp	#LR__1170
0e40c                 | LR__1169
0e40c     40 4E 05 F1 | 	add	fp, #64
0e410     A7 12 02 FB | 	rdlong	arg01, fp
0e414     40 4E 85 F1 | 	sub	fp, #64
0e418     01 14 06 F6 | 	mov	arg02, #1
0e41c     60 57 B1 FD | 	call	#__system___float_tointeger
0e420     28 4E 05 F1 | 	add	fp, #40
0e424     A7 FA 61 FC | 	wrlong	result1, fp
0e428     1C 4E 85 F1 | 	sub	fp, #28
0e42c     A7 20 02 FB | 	rdlong	local02, fp
0e430     10 23 02 F6 | 	mov	local03, local02
0e434     01 22 66 F0 | 	shl	local03, #1
0e438     10 23 02 F1 | 	add	local03, local02
0e43c     03 22 66 F0 | 	shl	local03, #3
0e440     14 00 00 FF 
0e444     38 E5 05 F1 | 	add	objptr, ##10552
0e448     F2 22 02 F1 | 	add	local03, objptr
0e44c     0C 4E 85 F1 | 	sub	fp, #12
0e450     06 22 06 F1 | 	add	local03, #6
0e454     11 FB 51 FC | 	wrword	result1, local03
0e458     14 00 00 FF 
0e45c     38 E5 85 F1 | 	sub	objptr, ##10552
0e460                 | LR__1170
0e460                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0e460     54 4E 05 F1 | 	add	fp, #84
0e464     A7 12 02 FB | 	rdlong	arg01, fp
0e468     54 4E 85 F1 | 	sub	fp, #84
0e46c     00 C0 5F FF 
0e470     00 14 06 F6 | 	mov	arg02, ##-1082130432
0e474     01 16 06 F6 | 	mov	arg03, #1
0e478     70 56 B1 FD | 	call	#__system___float_cmp
0e47c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e480     24 00 90 CD |  if_b	jmp	#LR__1171
0e484     54 4E 05 F1 | 	add	fp, #84
0e488     A7 12 02 FB | 	rdlong	arg01, fp
0e48c     54 4E 85 F1 | 	sub	fp, #84
0e490     00 C0 1F FF 
0e494     00 14 06 F6 | 	mov	arg02, ##1065353216
0e498     01 16 66 F6 | 	neg	arg03, #1
0e49c     4C 56 B1 FD | 	call	#__system___float_cmp
0e4a0     01 FA 55 F2 | 	cmps	result1, #1 wc
0e4a4     44 00 90 CD |  if_b	jmp	#LR__1172
0e4a8                 | LR__1171
0e4a8     0C 4E 05 F1 | 	add	fp, #12
0e4ac     A7 20 02 FB | 	rdlong	local02, fp
0e4b0     10 23 02 F6 | 	mov	local03, local02
0e4b4     01 22 66 F0 | 	shl	local03, #1
0e4b8     10 23 02 F1 | 	add	local03, local02
0e4bc     03 22 66 F0 | 	shl	local03, #3
0e4c0     14 00 00 FF 
0e4c4     38 E5 05 F1 | 	add	objptr, ##10552
0e4c8     F2 22 02 F1 | 	add	local03, objptr
0e4cc     10 22 06 F1 | 	add	local03, #16
0e4d0     11 25 02 FB | 	rdlong	local04, local03
0e4d4     64 4E 05 F1 | 	add	fp, #100
0e4d8     A7 24 62 FC | 	wrlong	local04, fp
0e4dc     70 4E 85 F1 | 	sub	fp, #112
0e4e0     14 00 00 FF 
0e4e4     38 E5 85 F1 | 	sub	objptr, ##10552
0e4e8     48 00 90 FD | 	jmp	#LR__1173
0e4ec                 | LR__1172
0e4ec     54 4E 05 F1 | 	add	fp, #84
0e4f0     A7 26 02 FB | 	rdlong	local05, fp
0e4f4     1C 4E 05 F1 | 	add	fp, #28
0e4f8     A7 26 62 FC | 	wrlong	local05, fp
0e4fc     64 4E 85 F1 | 	sub	fp, #100
0e500     A7 20 02 FB | 	rdlong	local02, fp
0e504     10 23 02 F6 | 	mov	local03, local02
0e508     01 22 66 F0 | 	shl	local03, #1
0e50c     10 23 02 F1 | 	add	local03, local02
0e510     03 22 66 F0 | 	shl	local03, #3
0e514     14 00 00 FF 
0e518     38 E5 05 F1 | 	add	objptr, ##10552
0e51c     F2 22 02 F1 | 	add	local03, objptr
0e520     0C 4E 85 F1 | 	sub	fp, #12
0e524     10 22 06 F1 | 	add	local03, #16
0e528     11 27 62 FC | 	wrlong	local05, local03
0e52c     14 00 00 FF 
0e530     38 E5 85 F1 | 	sub	objptr, ##10552
0e534                 | LR__1173
0e534                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0e534     58 4E 05 F1 | 	add	fp, #88
0e538     A7 12 02 FB | 	rdlong	arg01, fp
0e53c     58 4E 85 F1 | 	sub	fp, #88
0e540     00 14 06 F6 | 	mov	arg02, #0
0e544     01 16 06 F6 | 	mov	arg03, #1
0e548     A0 55 B1 FD | 	call	#__system___float_cmp
0e54c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e550     24 00 90 CD |  if_b	jmp	#LR__1174
0e554     58 4E 05 F1 | 	add	fp, #88
0e558     A7 12 02 FB | 	rdlong	arg01, fp
0e55c     58 4E 85 F1 | 	sub	fp, #88
0e560     80 BF 21 FF 
0e564     00 14 06 F6 | 	mov	arg02, ##1132396544
0e568     01 16 66 F6 | 	neg	arg03, #1
0e56c     7C 55 B1 FD | 	call	#__system___float_cmp
0e570     01 FA 55 F2 | 	cmps	result1, #1 wc
0e574     44 00 90 CD |  if_b	jmp	#LR__1175
0e578                 | LR__1174
0e578     0C 4E 05 F1 | 	add	fp, #12
0e57c     A7 22 02 FB | 	rdlong	local03, fp
0e580     11 27 02 F6 | 	mov	local05, local03
0e584     01 26 66 F0 | 	shl	local05, #1
0e588     11 27 02 F1 | 	add	local05, local03
0e58c     03 26 66 F0 | 	shl	local05, #3
0e590     14 00 00 FF 
0e594     38 E5 05 F1 | 	add	objptr, ##10552
0e598     F2 26 02 F1 | 	add	local05, objptr
0e59c     14 26 06 F1 | 	add	local05, #20
0e5a0     13 25 E2 FA | 	rdword	local04, local05
0e5a4     20 4E 05 F1 | 	add	fp, #32
0e5a8     A7 24 62 FC | 	wrlong	local04, fp
0e5ac     2C 4E 85 F1 | 	sub	fp, #44
0e5b0     14 00 00 FF 
0e5b4     38 E5 85 F1 | 	sub	objptr, ##10552
0e5b8     54 00 90 FD | 	jmp	#LR__1176
0e5bc                 | LR__1175
0e5bc     58 4E 05 F1 | 	add	fp, #88
0e5c0     A7 12 02 FB | 	rdlong	arg01, fp
0e5c4     58 4E 85 F1 | 	sub	fp, #88
0e5c8     01 14 06 F6 | 	mov	arg02, #1
0e5cc     B0 55 B1 FD | 	call	#__system___float_tointeger
0e5d0     2C 4E 05 F1 | 	add	fp, #44
0e5d4     A7 FA 61 FC | 	wrlong	result1, fp
0e5d8     20 4E 85 F1 | 	sub	fp, #32
0e5dc     A7 20 02 FB | 	rdlong	local02, fp
0e5e0     10 23 02 F6 | 	mov	local03, local02
0e5e4     01 22 66 F0 | 	shl	local03, #1
0e5e8     10 23 02 F1 | 	add	local03, local02
0e5ec     03 22 66 F0 | 	shl	local03, #3
0e5f0     14 00 00 FF 
0e5f4     38 E5 05 F1 | 	add	objptr, ##10552
0e5f8     F2 22 02 F1 | 	add	local03, objptr
0e5fc     0C 4E 85 F1 | 	sub	fp, #12
0e600     14 22 06 F1 | 	add	local03, #20
0e604     11 FB 51 FC | 	wrword	result1, local03
0e608     14 00 00 FF 
0e60c     38 E5 85 F1 | 	sub	objptr, ##10552
0e610                 | LR__1176
0e610     6C 4E 05 F1 | 	add	fp, #108
0e614     A7 14 02 FB | 	rdlong	arg02, fp
0e618     6C 4E 85 F1 | 	sub	fp, #108
0e61c     FC 16 20 FF 
0e620     54 12 06 F6 | 	mov	arg01, ##1076754516
0e624     60 60 B1 FD | 	call	#__system____builtin_logbase
0e628     FD 24 02 F6 | 	mov	local04, result1
0e62c     1E 14 C6 F9 | 	decod	arg02, #30
0e630     FC 16 20 FF 
0e634     54 12 06 F6 | 	mov	arg01, ##1076754516
0e638     4C 60 B1 FD | 	call	#__system____builtin_logbase
0e63c     FD 14 02 F6 | 	mov	arg02, result1
0e640     12 13 02 F6 | 	mov	arg01, local04
0e644     74 52 B1 FD | 	call	#__system___float_div
0e648     FD 12 02 F6 | 	mov	arg01, result1
0e64c     00 14 06 F6 | 	mov	arg02, #0
0e650     2C 55 B1 FD | 	call	#__system___float_tointeger
0e654     30 4E 05 F1 | 	add	fp, #48
0e658     A7 FA 61 FC | 	wrlong	result1, fp
0e65c     1E 24 C6 F9 | 	decod	local04, #30
0e660     FD 12 02 F6 | 	mov	arg01, result1
0e664     30 4E 85 F1 | 	sub	fp, #48
0e668     05 12 06 F1 | 	add	arg01, #5
0e66c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e670     1F 28 C6 C9 |  if_b	decod	local06, #31
0e674     00 28 06 36 |  if_ae	mov	local06, #0
0e678     38 4C B1 FD | 	call	#__system___float_fromuns
0e67c     14 FB 61 F5 | 	xor	result1, local06
0e680     FD 14 02 F6 | 	mov	arg02, result1
0e684     12 13 02 F6 | 	mov	arg01, local04
0e688     34 5F B1 FD | 	call	#__system____builtin_powf
0e68c     FD 12 02 F6 | 	mov	arg01, result1
0e690     01 14 06 F6 | 	mov	arg02, #1
0e694     E8 54 B1 FD | 	call	#__system___float_tointeger
0e698     10 4E 05 F1 | 	add	fp, #16
0e69c     A7 FA 61 FC | 	wrlong	result1, fp
0e6a0                 | ' skip=round(2^(lfreq+5))
0e6a0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e6a0     10 4E 85 F1 | 	sub	fp, #16
0e6a4     40 00 00 FF 
0e6a8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e6ac     30 00 90 CD |  if_b	jmp	#LR__1177
0e6b0     10 4E 05 F1 | 	add	fp, #16
0e6b4     A7 1E 02 FB | 	rdlong	local01, fp
0e6b8     0F 25 52 F6 | 	abs	local04, local01 wc
0e6bc     0F 24 46 F0 | 	shr	local04, #15
0e6c0     12 25 82 F6 | 	negc	local04, local04
0e6c4     0C 4E 85 F1 | 	sub	fp, #12
0e6c8     A7 24 62 FC | 	wrlong	local04, fp
0e6cc     0C 4E 05 F1 | 	add	fp, #12
0e6d0     40 00 80 FF 
0e6d4     A7 00 68 FC | 	wrlong	##32768, fp
0e6d8     10 4E 85 F1 | 	sub	fp, #16
0e6dc     0C 00 90 FD | 	jmp	#LR__1178
0e6e0                 | LR__1177
0e6e0     04 4E 05 F1 | 	add	fp, #4
0e6e4     A7 02 68 FC | 	wrlong	#1, fp
0e6e8     04 4E 85 F1 | 	sub	fp, #4
0e6ec                 | LR__1178
0e6ec     6C 4E 05 F1 | 	add	fp, #108
0e6f0     A7 14 02 FB | 	rdlong	arg02, fp
0e6f4     6C 4E 85 F1 | 	sub	fp, #108
0e6f8     3E 2C 25 FF 
0e6fc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e700     B8 51 B1 FD | 	call	#__system___float_div
0e704     FD 24 02 F6 | 	mov	local04, result1
0e708     04 4E 05 F1 | 	add	fp, #4
0e70c     A7 12 02 FB | 	rdlong	arg01, fp
0e710     04 4E 85 F1 | 	sub	fp, #4
0e714     09 13 52 F6 | 	abs	arg01, arg01 wc
0e718     1F 28 C6 C9 |  if_b	decod	local06, #31
0e71c     00 28 06 36 |  if_ae	mov	local06, #0
0e720     90 4B B1 FD | 	call	#__system___float_fromuns
0e724     14 FB 61 F5 | 	xor	result1, local06
0e728     FD 1E 02 F6 | 	mov	local01, result1
0e72c     1E 20 C6 F9 | 	decod	local02, #30
0e730     0D 12 06 F6 | 	mov	arg01, #13
0e734     30 4E 05 F1 | 	add	fp, #48
0e738     A7 26 02 FB | 	rdlong	local05, fp
0e73c     30 4E 85 F1 | 	sub	fp, #48
0e740     13 13 82 F1 | 	sub	arg01, local05
0e744     09 13 52 F6 | 	abs	arg01, arg01 wc
0e748     1F 28 C6 C9 |  if_b	decod	local06, #31
0e74c     00 28 06 36 |  if_ae	mov	local06, #0
0e750     60 4B B1 FD | 	call	#__system___float_fromuns
0e754     14 FB 61 F5 | 	xor	result1, local06
0e758     FD 14 02 F6 | 	mov	arg02, result1
0e75c     10 13 02 F6 | 	mov	arg01, local02
0e760     5C 5E B1 FD | 	call	#__system____builtin_powf
0e764     FD 14 02 F6 | 	mov	arg02, result1
0e768     0F 13 02 F6 | 	mov	arg01, local01
0e76c     48 4F B1 FD | 	call	#__system___float_mul
0e770     FD 14 02 F6 | 	mov	arg02, result1
0e774     12 13 02 F6 | 	mov	arg01, local04
0e778     40 51 B1 FD | 	call	#__system___float_div
0e77c     FD 12 02 F6 | 	mov	arg01, result1
0e780     01 14 06 F6 | 	mov	arg02, #1
0e784     F8 53 B1 FD | 	call	#__system___float_tointeger
0e788     34 4E 05 F1 | 	add	fp, #52
0e78c     A7 FA 61 FC | 	wrlong	result1, fp
0e790     34 4E 05 F1 | 	add	fp, #52
0e794     A7 12 02 FB | 	rdlong	arg01, fp
0e798     10 4E 05 F1 | 	add	fp, #16
0e79c     A7 14 02 FB | 	rdlong	arg02, fp
0e7a0     78 4E 85 F1 | 	sub	fp, #120
0e7a4     14 51 B1 FD | 	call	#__system___float_div
0e7a8     FD 12 02 F6 | 	mov	arg01, result1
0e7ac     01 14 06 F6 | 	mov	arg02, #1
0e7b0     CC 53 B1 FD | 	call	#__system___float_tointeger
0e7b4     FD 24 02 F6 | 	mov	local04, result1
0e7b8     14 4E 05 F1 | 	add	fp, #20
0e7bc     A7 24 62 FC | 	wrlong	local04, fp
0e7c0     5C 4E 05 F1 | 	add	fp, #92
0e7c4     A7 14 02 FB | 	rdlong	arg02, fp
0e7c8     70 4E 85 F1 | 	sub	fp, #112
0e7cc     00 00 23 FF 
0e7d0     00 12 06 F6 | 	mov	arg01, ##1174405120
0e7d4     E0 4E B1 FD | 	call	#__system___float_mul
0e7d8     FD 12 02 F6 | 	mov	arg01, result1
0e7dc     01 14 06 F6 | 	mov	arg02, #1
0e7e0     9C 53 B1 FD | 	call	#__system___float_tointeger
0e7e4     0D 24 C6 F9 | 	decod	local04, #13
0e7e8     FD 24 02 F1 | 	add	local04, result1
0e7ec     18 4E 05 F1 | 	add	fp, #24
0e7f0     A7 24 62 FC | 	wrlong	local04, fp
0e7f4     5C 4E 05 F1 | 	add	fp, #92
0e7f8     A7 14 02 FB | 	rdlong	arg02, fp
0e7fc     74 4E 85 F1 | 	sub	fp, #116
0e800     00 3D 22 FF 
0e804     00 12 06 F6 | 	mov	arg01, ##1148846080
0e808     AC 4E B1 FD | 	call	#__system___float_mul
0e80c     FD 12 02 F6 | 	mov	arg01, result1
0e810     01 14 06 F6 | 	mov	arg02, #1
0e814     68 53 B1 FD | 	call	#__system___float_tointeger
0e818     1C 4E 05 F1 | 	add	fp, #28
0e81c     A7 FA 61 FC | 	wrlong	result1, fp
0e820     37 00 00 FF 
0e824     10 E4 05 F1 | 	add	objptr, ##28176
0e828     F2 24 02 FB | 	rdlong	local04, objptr
0e82c     37 00 00 FF 
0e830     10 E4 85 F1 | 	sub	objptr, ##28176
0e834     10 4E 85 F1 | 	sub	fp, #16
0e838     A7 20 02 FB | 	rdlong	local02, fp
0e83c     06 20 66 F0 | 	shl	local02, #6
0e840     10 25 02 F1 | 	add	local04, local02
0e844     04 4E 85 F1 | 	sub	fp, #4
0e848     A7 24 62 FC | 	wrlong	local04, fp
0e84c                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0e84c                 | '  
0e84c                 | '   
0e84c                 | ' 'print period,skip
0e84c                 | ' speed=round(speed_coeff/slen)
0e84c                 | ' ipan=8192+round(8192*pan)
0e84c                 | ' ivol=round(1000.0*vol)
0e84c                 | ' base2=base+64*channel
0e84c                 | ' 'skip=round(freq*3.9827219) 
0e84c                 | ' if wave <32 then 
0e84c     18 4E 05 F1 | 	add	fp, #24
0e850     A7 24 02 FB | 	rdlong	local04, fp
0e854     20 4E 85 F1 | 	sub	fp, #32
0e858     20 24 56 F2 | 	cmps	local04, #32 wc
0e85c     2C 00 90 3D |  if_ae	jmp	#LR__1179
0e860     08 4E 05 F1 | 	add	fp, #8
0e864     A7 12 02 FB | 	rdlong	arg01, fp
0e868     08 12 06 F1 | 	add	arg01, #8
0e86c     18 4E 05 F1 | 	add	fp, #24
0e870     A7 14 02 FB | 	rdlong	arg02, fp
0e874     20 4E 85 F1 | 	sub	fp, #32
0e878     0B 14 66 F0 | 	shl	arg02, #11
0e87c     00 00 60 FF 
0e880     00 14 06 F1 | 	add	arg02, ##-1073741824
0e884     09 15 62 FC | 	wrlong	arg02, arg01
0e888     18 00 90 FD | 	jmp	#LR__1180
0e88c                 | LR__1179
0e88c     08 4E 05 F1 | 	add	fp, #8
0e890     A7 12 02 FB | 	rdlong	arg01, fp
0e894     08 4E 85 F1 | 	sub	fp, #8
0e898     08 12 06 F1 | 	add	arg01, #8
0e89c     00 00 E4 FF 
0e8a0     09 01 68 FC | 	wrlong	##-939524096, arg01
0e8a4                 | LR__1180
0e8a4     08 4E 05 F1 | 	add	fp, #8
0e8a8     A7 12 02 FB | 	rdlong	arg01, fp
0e8ac     10 12 06 F1 | 	add	arg01, #16
0e8b0     04 00 80 FF 
0e8b4     09 01 68 FC | 	wrlong	##2048, arg01
0e8b8     A7 12 02 FB | 	rdlong	arg01, fp
0e8bc     0C 12 06 F1 | 	add	arg01, #12
0e8c0     09 01 68 FC | 	wrlong	#0, arg01
0e8c4     A7 12 02 FB | 	rdlong	arg01, fp
0e8c8     14 12 06 F1 | 	add	arg01, #20
0e8cc     14 4E 05 F1 | 	add	fp, #20
0e8d0     A7 14 02 FB | 	rdlong	arg02, fp
0e8d4     09 15 52 FC | 	wrword	arg02, arg01
0e8d8     14 4E 85 F1 | 	sub	fp, #20
0e8dc     A7 12 02 FB | 	rdlong	arg01, fp
0e8e0     16 12 06 F1 | 	add	arg01, #22
0e8e4     10 4E 05 F1 | 	add	fp, #16
0e8e8     A7 14 02 FB | 	rdlong	arg02, fp
0e8ec     09 15 52 FC | 	wrword	arg02, arg01
0e8f0                 | ' lpoke base2+16,2048
0e8f0                 | ' lpoke base2+12,0
0e8f0                 | ' dpoke base2+20,ivol 
0e8f0                 | ' dpoke base2+22,ipan 
0e8f0                 | ' if wave<32 then
0e8f0     08 4E 05 F1 | 	add	fp, #8
0e8f4     A7 24 02 FB | 	rdlong	local04, fp
0e8f8     20 4E 85 F1 | 	sub	fp, #32
0e8fc     20 24 56 F2 | 	cmps	local04, #32 wc
0e900     38 00 90 3D |  if_ae	jmp	#LR__1181
0e904     08 4E 05 F1 | 	add	fp, #8
0e908     A7 12 02 FB | 	rdlong	arg01, fp
0e90c     18 12 06 F1 | 	add	arg01, #24
0e910     2C 4E 05 F1 | 	add	fp, #44
0e914     A7 14 02 FB | 	rdlong	arg02, fp
0e918     09 15 52 FC | 	wrword	arg02, arg01
0e91c     2C 4E 85 F1 | 	sub	fp, #44
0e920     A7 12 02 FB | 	rdlong	arg01, fp
0e924     1A 12 06 F1 | 	add	arg01, #26
0e928     08 4E 05 F1 | 	add	fp, #8
0e92c     A7 14 02 FB | 	rdlong	arg02, fp
0e930     10 4E 85 F1 | 	sub	fp, #16
0e934     09 15 52 FC | 	wrword	arg02, arg01
0e938     48 00 90 FD | 	jmp	#LR__1182
0e93c                 | LR__1181
0e93c     08 4E 05 F1 | 	add	fp, #8
0e940     A7 24 02 FB | 	rdlong	local04, fp
0e944     18 24 06 F1 | 	add	local04, #24
0e948     64 4E 05 F1 | 	add	fp, #100
0e94c     A7 14 02 FB | 	rdlong	arg02, fp
0e950     6C 4E 85 F1 | 	sub	fp, #108
0e954     3E 2C 25 FF 
0e958     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e95c     5C 4F B1 FD | 	call	#__system___float_div
0e960     FD 12 02 F6 | 	mov	arg01, result1
0e964     01 14 06 F6 | 	mov	arg02, #1
0e968     14 52 B1 FD | 	call	#__system___float_tointeger
0e96c     12 FB 51 FC | 	wrword	result1, local04
0e970     08 4E 05 F1 | 	add	fp, #8
0e974     A7 12 02 FB | 	rdlong	arg01, fp
0e978     08 4E 85 F1 | 	sub	fp, #8
0e97c     1A 12 06 F1 | 	add	arg01, #26
0e980     09 01 5A FC | 	wrword	#256, arg01
0e984                 | LR__1182
0e984     08 4E 05 F1 | 	add	fp, #8
0e988     A7 12 02 FB | 	rdlong	arg01, fp
0e98c     1C 12 06 F1 | 	add	arg01, #28
0e990     09 01 68 FC | 	wrlong	#0, arg01
0e994     A7 12 02 FB | 	rdlong	arg01, fp
0e998     20 12 06 F1 | 	add	arg01, #32
0e99c     09 01 68 FC | 	wrlong	#0, arg01
0e9a0                 | ' lpoke base2+28,$0000_0000
0e9a0                 | ' lpoke base2+32,0 
0e9a0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0e9a0     1C 4E 05 F1 | 	add	fp, #28
0e9a4     A7 24 02 FB | 	rdlong	local04, fp
0e9a8     24 4E 85 F1 | 	sub	fp, #36
0e9ac     08 24 0E F2 | 	cmp	local04, #8 wz
0e9b0     18 00 90 5D |  if_ne	jmp	#LR__1183
0e9b4     08 4E 05 F1 | 	add	fp, #8
0e9b8     A7 12 02 FB | 	rdlong	arg01, fp
0e9bc     08 4E 85 F1 | 	sub	fp, #8
0e9c0     24 12 06 F1 | 	add	arg01, #36
0e9c4     09 01 68 FC | 	wrlong	#0, arg01
0e9c8     34 00 90 FD | 	jmp	#LR__1184
0e9cc                 | LR__1183
0e9cc     08 4E 05 F1 | 	add	fp, #8
0e9d0     A7 12 02 FB | 	rdlong	arg01, fp
0e9d4     24 12 06 F1 | 	add	arg01, #36
0e9d8     1C 4E 05 F1 | 	add	fp, #28
0e9dc     A7 14 02 FB | 	rdlong	arg02, fp
0e9e0     24 4E 85 F1 | 	sub	fp, #36
0e9e4     09 14 66 F0 | 	shl	arg02, #9
0e9e8     0C 00 00 FF 
0e9ec     D8 E4 05 F1 | 	add	objptr, ##6360
0e9f0     F2 14 02 F1 | 	add	arg02, objptr
0e9f4     0C 00 00 FF 
0e9f8     D8 E4 85 F1 | 	sub	objptr, ##6360
0e9fc     09 15 62 FC | 	wrlong	arg02, arg01
0ea00                 | LR__1184
0ea00     08 4E 05 F1 | 	add	fp, #8
0ea04     A7 12 02 FB | 	rdlong	arg01, fp
0ea08     28 12 06 F1 | 	add	arg01, #40
0ea0c     0C 4E 05 F1 | 	add	fp, #12
0ea10     A7 14 02 FB | 	rdlong	arg02, fp
0ea14     09 15 62 FC | 	wrlong	arg02, arg01
0ea18     0C 4E 85 F1 | 	sub	fp, #12
0ea1c     A7 12 02 FB | 	rdlong	arg01, fp
0ea20     2C 12 06 F1 | 	add	arg01, #44
0ea24     24 4E 05 F1 | 	add	fp, #36
0ea28     A7 14 02 FB | 	rdlong	arg02, fp
0ea2c     09 15 62 FC | 	wrlong	arg02, arg01
0ea30                 | ' lpoke base2+40,speed' speed
0ea30                 | ' lpoke base2+44,sus 'len
0ea30                 | ' 
0ea30                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0ea30     04 4E 85 F1 | 	sub	fp, #4
0ea34     A7 24 02 FB | 	rdlong	local04, fp
0ea38     28 4E 85 F1 | 	sub	fp, #40
0ea3c     01 24 56 F2 | 	cmps	local04, #1 wc
0ea40     28 4E 05 31 |  if_ae	add	fp, #40
0ea44     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0ea48     28 4E 85 31 |  if_ae	sub	fp, #40
0ea4c     A8 23 B1 3D |  if_ae	call	#__system___waitms
0ea50     A7 F0 03 F6 | 	mov	ptra, fp
0ea54     B2 00 A0 FD | 	call	#popregs_
0ea58                 | _do_play_ret
0ea58     2D 00 64 FD | 	ret
0ea5c                 | 
0ea5c                 | ' 
0ea5c                 | ' sub do_changevol
0ea5c                 | _do_changevol
0ea5c     00 4A 05 F6 | 	mov	COUNT_, #0
0ea60     A8 00 A0 FD | 	call	#pushregs_
0ea64     14 F0 07 F1 | 	add	ptra, #20
0ea68     B8 C7 BF FD | 	call	#_pop
0ea6c     FF 14 02 F6 | 	mov	arg02, result3
0ea70     A7 FA 61 FC | 	wrlong	result1, fp
0ea74     04 4E 05 F1 | 	add	fp, #4
0ea78     A7 FC 61 FC | 	wrlong	result2, fp
0ea7c     04 4E 05 F1 | 	add	fp, #4
0ea80     A7 14 62 FC | 	wrlong	arg02, fp
0ea84     08 4E 85 F1 | 	sub	fp, #8
0ea88     A7 12 02 F6 | 	mov	arg01, fp
0ea8c     1C 72 B0 FD | 	call	#_converttofloat
0ea90     FD 12 02 F6 | 	mov	arg01, result1
0ea94     00 3D 22 FF 
0ea98     00 14 06 F6 | 	mov	arg02, ##1148846080
0ea9c     18 4C B1 FD | 	call	#__system___float_mul
0eaa0     FD 12 02 F6 | 	mov	arg01, result1
0eaa4     01 14 06 F6 | 	mov	arg02, #1
0eaa8     D4 50 B1 FD | 	call	#__system___float_tointeger
0eaac     FD 14 52 F6 | 	abs	arg02, result1 wc
0eab0     0D 14 46 F7 | 	zerox	arg02, #13
0eab4     0A 15 82 F6 | 	negc	arg02, arg02
0eab8     10 4E 05 F1 | 	add	fp, #16
0eabc     A7 14 62 FC | 	wrlong	arg02, fp
0eac0     10 4E 85 F1 | 	sub	fp, #16
0eac4     5C C7 BF FD | 	call	#_pop
0eac8     FF 14 02 F6 | 	mov	arg02, result3
0eacc     A7 FA 61 FC | 	wrlong	result1, fp
0ead0     04 4E 05 F1 | 	add	fp, #4
0ead4     A7 FC 61 FC | 	wrlong	result2, fp
0ead8     04 4E 05 F1 | 	add	fp, #4
0eadc     A7 14 62 FC | 	wrlong	arg02, fp
0eae0     08 4E 85 F1 | 	sub	fp, #8
0eae4     A7 12 02 F6 | 	mov	arg01, fp
0eae8     04 71 B0 FD | 	call	#_converttoint
0eaec     FD 14 52 F6 | 	abs	arg02, result1 wc
0eaf0     07 14 06 F5 | 	and	arg02, #7
0eaf4     0A 15 82 F6 | 	negc	arg02, arg02
0eaf8     0C 4E 05 F1 | 	add	fp, #12
0eafc     A7 14 62 FC | 	wrlong	arg02, fp
0eb00     37 00 00 FF 
0eb04     10 E4 05 F1 | 	add	objptr, ##28176
0eb08     F2 12 02 FB | 	rdlong	arg01, objptr
0eb0c     37 00 00 FF 
0eb10     10 E4 85 F1 | 	sub	objptr, ##28176
0eb14     06 14 66 F0 | 	shl	arg02, #6
0eb18     0A 13 02 F1 | 	add	arg01, arg02
0eb1c     14 12 06 F1 | 	add	arg01, #20
0eb20     04 4E 05 F1 | 	add	fp, #4
0eb24     A7 14 02 FB | 	rdlong	arg02, fp
0eb28     10 4E 85 F1 | 	sub	fp, #16
0eb2c     09 15 52 FC | 	wrword	arg02, arg01
0eb30     A7 F0 03 F6 | 	mov	ptra, fp
0eb34     B2 00 A0 FD | 	call	#popregs_
0eb38                 | _do_changevol_ret
0eb38     2D 00 64 FD | 	ret
0eb3c                 | 
0eb3c                 | ' 
0eb3c                 | ' sub do_changepan
0eb3c                 | _do_changepan
0eb3c     01 4A 05 F6 | 	mov	COUNT_, #1
0eb40     A8 00 A0 FD | 	call	#pushregs_
0eb44     14 F0 07 F1 | 	add	ptra, #20
0eb48     D8 C6 BF FD | 	call	#_pop
0eb4c     A7 FA 61 FC | 	wrlong	result1, fp
0eb50     04 4E 05 F1 | 	add	fp, #4
0eb54     A7 FC 61 FC | 	wrlong	result2, fp
0eb58     04 4E 05 F1 | 	add	fp, #4
0eb5c     A7 FE 61 FC | 	wrlong	result3, fp
0eb60     08 4E 85 F1 | 	sub	fp, #8
0eb64     00 00 23 FF 
0eb68     00 1E 06 F6 | 	mov	local01, ##1174405120
0eb6c     A7 12 02 F6 | 	mov	arg01, fp
0eb70     38 71 B0 FD | 	call	#_converttofloat
0eb74     FD 14 02 F6 | 	mov	arg02, result1
0eb78     0F 13 02 F6 | 	mov	arg01, local01
0eb7c     38 4B B1 FD | 	call	#__system___float_mul
0eb80     FD 12 02 F6 | 	mov	arg01, result1
0eb84     01 14 06 F6 | 	mov	arg02, #1
0eb88     F4 4F B1 FD | 	call	#__system___float_tointeger
0eb8c     0D 1E C6 F9 | 	decod	local01, #13
0eb90     FD 1E 02 F1 | 	add	local01, result1
0eb94     10 4E 05 F1 | 	add	fp, #16
0eb98     A7 1E 62 FC | 	wrlong	local01, fp
0eb9c                 | ' t1=pop()
0eb9c                 | ' pan=8192+round(8192*converttofloat(t1)) 
0eb9c                 | ' if pan<0 then pan=0
0eb9c     10 4E 85 F1 | 	sub	fp, #16
0eba0     00 1E 56 F2 | 	cmps	local01, #0 wc
0eba4     10 4E 05 C1 |  if_b	add	fp, #16
0eba8     A7 00 68 CC |  if_b	wrlong	#0, fp
0ebac     10 4E 85 C1 |  if_b	sub	fp, #16
0ebb0                 | ' if pan>16384 then pan=16384
0ebb0     10 4E 05 F1 | 	add	fp, #16
0ebb4     A7 1E 02 FB | 	rdlong	local01, fp
0ebb8     10 4E 85 F1 | 	sub	fp, #16
0ebbc     20 00 00 FF 
0ebc0     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0ebc4     10 4E 05 31 |  if_ae	add	fp, #16
0ebc8     20 00 80 3F 
0ebcc     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ebd0     10 4E 85 31 |  if_ae	sub	fp, #16
0ebd4     4C C6 BF FD | 	call	#_pop
0ebd8     FF 1E 02 F6 | 	mov	local01, result3
0ebdc     A7 FA 61 FC | 	wrlong	result1, fp
0ebe0     04 4E 05 F1 | 	add	fp, #4
0ebe4     A7 FC 61 FC | 	wrlong	result2, fp
0ebe8     04 4E 05 F1 | 	add	fp, #4
0ebec     A7 1E 62 FC | 	wrlong	local01, fp
0ebf0     08 4E 85 F1 | 	sub	fp, #8
0ebf4     A7 12 02 F6 | 	mov	arg01, fp
0ebf8     F4 6F B0 FD | 	call	#_converttoint
0ebfc     FD 1E 52 F6 | 	abs	local01, result1 wc
0ec00     07 1E 06 F5 | 	and	local01, #7
0ec04     0F 1F 82 F6 | 	negc	local01, local01
0ec08     0C 4E 05 F1 | 	add	fp, #12
0ec0c     A7 1E 62 FC | 	wrlong	local01, fp
0ec10     37 00 00 FF 
0ec14     10 E4 05 F1 | 	add	objptr, ##28176
0ec18     F2 12 02 FB | 	rdlong	arg01, objptr
0ec1c     37 00 00 FF 
0ec20     10 E4 85 F1 | 	sub	objptr, ##28176
0ec24     06 1E 66 F0 | 	shl	local01, #6
0ec28     0F 13 02 F1 | 	add	arg01, local01
0ec2c     16 12 06 F1 | 	add	arg01, #22
0ec30     04 4E 05 F1 | 	add	fp, #4
0ec34     A7 14 02 FB | 	rdlong	arg02, fp
0ec38     10 4E 85 F1 | 	sub	fp, #16
0ec3c     09 15 52 FC | 	wrword	arg02, arg01
0ec40     A7 F0 03 F6 | 	mov	ptra, fp
0ec44     B2 00 A0 FD | 	call	#popregs_
0ec48                 | _do_changepan_ret
0ec48     2D 00 64 FD | 	ret
0ec4c                 | 
0ec4c                 | ' 
0ec4c                 | ' sub do_changefreq
0ec4c                 | _do_changefreq
0ec4c     04 4A 05 F6 | 	mov	COUNT_, #4
0ec50     A8 00 A0 FD | 	call	#pushregs_
0ec54     28 F0 07 F1 | 	add	ptra, #40
0ec58     C8 C5 BF FD | 	call	#_pop
0ec5c     FF 14 02 F6 | 	mov	arg02, result3
0ec60     A7 FA 61 FC | 	wrlong	result1, fp
0ec64     04 4E 05 F1 | 	add	fp, #4
0ec68     A7 FC 61 FC | 	wrlong	result2, fp
0ec6c     04 4E 05 F1 | 	add	fp, #4
0ec70     A7 14 62 FC | 	wrlong	arg02, fp
0ec74     08 4E 85 F1 | 	sub	fp, #8
0ec78     A7 12 02 F6 | 	mov	arg01, fp
0ec7c     2C 70 B0 FD | 	call	#_converttofloat
0ec80     24 4E 05 F1 | 	add	fp, #36
0ec84     A7 FA 61 FC | 	wrlong	result1, fp
0ec88     24 4E 85 F1 | 	sub	fp, #36
0ec8c     FD 14 02 F6 | 	mov	arg02, result1
0ec90     FC 16 20 FF 
0ec94     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec98     EC 59 B1 FD | 	call	#__system____builtin_logbase
0ec9c     FD 1E 02 F6 | 	mov	local01, result1
0eca0     1E 14 C6 F9 | 	decod	arg02, #30
0eca4     FC 16 20 FF 
0eca8     54 12 06 F6 | 	mov	arg01, ##1076754516
0ecac     D8 59 B1 FD | 	call	#__system____builtin_logbase
0ecb0     FD 14 02 F6 | 	mov	arg02, result1
0ecb4     0F 13 02 F6 | 	mov	arg01, local01
0ecb8     00 4C B1 FD | 	call	#__system___float_div
0ecbc     FD 12 02 F6 | 	mov	arg01, result1
0ecc0     00 14 06 F6 | 	mov	arg02, #0
0ecc4     B8 4E B1 FD | 	call	#__system___float_tointeger
0ecc8     10 4E 05 F1 | 	add	fp, #16
0eccc     A7 FA 61 FC | 	wrlong	result1, fp
0ecd0     1E 1E C6 F9 | 	decod	local01, #30
0ecd4     FD 12 02 F6 | 	mov	arg01, result1
0ecd8     10 4E 85 F1 | 	sub	fp, #16
0ecdc     05 12 06 F1 | 	add	arg01, #5
0ece0     09 13 52 F6 | 	abs	arg01, arg01 wc
0ece4     1F 20 C6 C9 |  if_b	decod	local02, #31
0ece8     00 20 06 36 |  if_ae	mov	local02, #0
0ecec     C4 45 B1 FD | 	call	#__system___float_fromuns
0ecf0     10 FB 61 F5 | 	xor	result1, local02
0ecf4     FD 14 02 F6 | 	mov	arg02, result1
0ecf8     0F 13 02 F6 | 	mov	arg01, local01
0ecfc     C0 58 B1 FD | 	call	#__system____builtin_powf
0ed00     FD 12 02 F6 | 	mov	arg01, result1
0ed04     01 14 06 F6 | 	mov	arg02, #1
0ed08     74 4E B1 FD | 	call	#__system___float_tointeger
0ed0c     14 4E 05 F1 | 	add	fp, #20
0ed10     A7 FA 61 FC | 	wrlong	result1, fp
0ed14                 | ' skip=round(2^(lfreq+5))
0ed14                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed14     14 4E 85 F1 | 	sub	fp, #20
0ed18     40 00 00 FF 
0ed1c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ed20     30 00 90 CD |  if_b	jmp	#LR__1190
0ed24     14 4E 05 F1 | 	add	fp, #20
0ed28     A7 1E 02 FB | 	rdlong	local01, fp
0ed2c     0F 1F 52 F6 | 	abs	local01, local01 wc
0ed30     0F 1E 46 F0 | 	shr	local01, #15
0ed34     0F 1F 82 F6 | 	negc	local01, local01
0ed38     04 4E 05 F1 | 	add	fp, #4
0ed3c     A7 1E 62 FC | 	wrlong	local01, fp
0ed40     04 4E 85 F1 | 	sub	fp, #4
0ed44     40 00 80 FF 
0ed48     A7 00 68 FC | 	wrlong	##32768, fp
0ed4c     14 4E 85 F1 | 	sub	fp, #20
0ed50     0C 00 90 FD | 	jmp	#LR__1191
0ed54                 | LR__1190
0ed54     18 4E 05 F1 | 	add	fp, #24
0ed58     A7 02 68 FC | 	wrlong	#1, fp
0ed5c     18 4E 85 F1 | 	sub	fp, #24
0ed60                 | LR__1191
0ed60     24 4E 05 F1 | 	add	fp, #36
0ed64     A7 14 02 FB | 	rdlong	arg02, fp
0ed68     24 4E 85 F1 | 	sub	fp, #36
0ed6c     3E 2C 25 FF 
0ed70     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed74     44 4B B1 FD | 	call	#__system___float_div
0ed78     FD 1E 02 F6 | 	mov	local01, result1
0ed7c     18 4E 05 F1 | 	add	fp, #24
0ed80     A7 12 02 FB | 	rdlong	arg01, fp
0ed84     18 4E 85 F1 | 	sub	fp, #24
0ed88     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed8c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed90     00 20 06 36 |  if_ae	mov	local02, #0
0ed94     1C 45 B1 FD | 	call	#__system___float_fromuns
0ed98     10 FB 61 F5 | 	xor	result1, local02
0ed9c     FD 22 02 F6 | 	mov	local03, result1
0eda0     1E 24 C6 F9 | 	decod	local04, #30
0eda4     0D 12 06 F6 | 	mov	arg01, #13
0eda8     10 4E 05 F1 | 	add	fp, #16
0edac     A7 14 02 FB | 	rdlong	arg02, fp
0edb0     10 4E 85 F1 | 	sub	fp, #16
0edb4     0A 13 82 F1 | 	sub	arg01, arg02
0edb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0edbc     1F 20 C6 C9 |  if_b	decod	local02, #31
0edc0     00 20 06 36 |  if_ae	mov	local02, #0
0edc4     EC 44 B1 FD | 	call	#__system___float_fromuns
0edc8     10 FB 61 F5 | 	xor	result1, local02
0edcc     FD 14 02 F6 | 	mov	arg02, result1
0edd0     12 13 02 F6 | 	mov	arg01, local04
0edd4     E8 57 B1 FD | 	call	#__system____builtin_powf
0edd8     FD 14 02 F6 | 	mov	arg02, result1
0eddc     11 13 02 F6 | 	mov	arg01, local03
0ede0     D4 48 B1 FD | 	call	#__system___float_mul
0ede4     FD 14 02 F6 | 	mov	arg02, result1
0ede8     0F 13 02 F6 | 	mov	arg01, local01
0edec     CC 4A B1 FD | 	call	#__system___float_div
0edf0     FD 12 02 F6 | 	mov	arg01, result1
0edf4     01 14 06 F6 | 	mov	arg02, #1
0edf8     84 4D B1 FD | 	call	#__system___float_tointeger
0edfc     FD 1E 02 F6 | 	mov	local01, result1
0ee00     1C 4E 05 F1 | 	add	fp, #28
0ee04     A7 1E 62 FC | 	wrlong	local01, fp
0ee08     1C 4E 85 F1 | 	sub	fp, #28
0ee0c     14 C4 BF FD | 	call	#_pop
0ee10     FF 24 02 F6 | 	mov	local04, result3
0ee14     A7 FA 61 FC | 	wrlong	result1, fp
0ee18     04 4E 05 F1 | 	add	fp, #4
0ee1c     A7 FC 61 FC | 	wrlong	result2, fp
0ee20     04 4E 05 F1 | 	add	fp, #4
0ee24     A7 24 62 FC | 	wrlong	local04, fp
0ee28     08 4E 85 F1 | 	sub	fp, #8
0ee2c     A7 12 02 F6 | 	mov	arg01, fp
0ee30     BC 6D B0 FD | 	call	#_converttoint
0ee34     FD 22 52 F6 | 	abs	local03, result1 wc
0ee38     07 22 06 F5 | 	and	local03, #7
0ee3c     11 23 82 F6 | 	negc	local03, local03
0ee40     0C 4E 05 F1 | 	add	fp, #12
0ee44     A7 22 62 FC | 	wrlong	local03, fp
0ee48     08 4E 05 F1 | 	add	fp, #8
0ee4c     A7 1E 02 FB | 	rdlong	local01, fp
0ee50     10 1E 66 F0 | 	shl	local01, #16
0ee54     08 4E 05 F1 | 	add	fp, #8
0ee58     A7 24 02 FB | 	rdlong	local04, fp
0ee5c     12 1F 02 F1 | 	add	local01, local04
0ee60     04 4E 05 F1 | 	add	fp, #4
0ee64     A7 1E 62 FC | 	wrlong	local01, fp
0ee68                 | ' if channels(channel).wave<32 then 
0ee68     14 4E 85 F1 | 	sub	fp, #20
0ee6c     A7 24 02 FB | 	rdlong	local04, fp
0ee70     0C 4E 85 F1 | 	sub	fp, #12
0ee74     12 23 02 F6 | 	mov	local03, local04
0ee78     01 22 66 F0 | 	shl	local03, #1
0ee7c     12 23 02 F1 | 	add	local03, local04
0ee80     03 22 66 F0 | 	shl	local03, #3
0ee84     14 00 00 FF 
0ee88     38 E5 05 F1 | 	add	objptr, ##10552
0ee8c     F2 22 02 F1 | 	add	local03, objptr
0ee90     04 22 06 F1 | 	add	local03, #4
0ee94     11 1F C2 FA | 	rdbyte	local01, local03
0ee98     20 1E 16 F2 | 	cmp	local01, #32 wc
0ee9c     14 00 00 FF 
0eea0     38 E5 85 F1 | 	sub	objptr, ##10552
0eea4     3C 00 90 3D |  if_ae	jmp	#LR__1192
0eea8     37 00 00 FF 
0eeac     10 E4 05 F1 | 	add	objptr, ##28176
0eeb0     F2 12 02 FB | 	rdlong	arg01, objptr
0eeb4     37 00 00 FF 
0eeb8     10 E4 85 F1 | 	sub	objptr, ##28176
0eebc     0C 4E 05 F1 | 	add	fp, #12
0eec0     A7 24 02 FB | 	rdlong	local04, fp
0eec4     06 24 66 F0 | 	shl	local04, #6
0eec8     12 13 02 F1 | 	add	arg01, local04
0eecc     18 12 06 F1 | 	add	arg01, #24
0eed0     14 4E 05 F1 | 	add	fp, #20
0eed4     A7 14 02 FB | 	rdlong	arg02, fp
0eed8     20 4E 85 F1 | 	sub	fp, #32
0eedc     09 15 62 FC | 	wrlong	arg02, arg01
0eee0     80 00 90 FD | 	jmp	#LR__1193
0eee4                 | LR__1192
0eee4     37 00 00 FF 
0eee8     10 E4 05 F1 | 	add	objptr, ##28176
0eeec     F2 1E 02 FB | 	rdlong	local01, objptr
0eef0     37 00 00 FF 
0eef4     10 E4 85 F1 | 	sub	objptr, ##28176
0eef8     0C 4E 05 F1 | 	add	fp, #12
0eefc     A7 24 02 FB | 	rdlong	local04, fp
0ef00     06 24 66 F0 | 	shl	local04, #6
0ef04     12 1F 02 F1 | 	add	local01, local04
0ef08     18 1E 06 F1 | 	add	local01, #24
0ef0c     18 4E 05 F1 | 	add	fp, #24
0ef10     A7 14 02 FB | 	rdlong	arg02, fp
0ef14     24 4E 85 F1 | 	sub	fp, #36
0ef18     3E 2C 25 FF 
0ef1c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ef20     98 49 B1 FD | 	call	#__system___float_div
0ef24     FD 12 02 F6 | 	mov	arg01, result1
0ef28     01 14 06 F6 | 	mov	arg02, #1
0ef2c     50 4C B1 FD | 	call	#__system___float_tointeger
0ef30     0F FB 51 FC | 	wrword	result1, local01
0ef34     37 00 00 FF 
0ef38     10 E4 05 F1 | 	add	objptr, ##28176
0ef3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ef40     37 00 00 FF 
0ef44     10 E4 85 F1 | 	sub	objptr, ##28176
0ef48     0C 4E 05 F1 | 	add	fp, #12
0ef4c     A7 24 02 FB | 	rdlong	local04, fp
0ef50     0C 4E 85 F1 | 	sub	fp, #12
0ef54     06 24 66 F0 | 	shl	local04, #6
0ef58     12 13 02 F1 | 	add	arg01, local04
0ef5c     1A 12 06 F1 | 	add	arg01, #26
0ef60     09 01 5A FC | 	wrword	#256, arg01
0ef64                 | LR__1193
0ef64     A7 F0 03 F6 | 	mov	ptra, fp
0ef68     B2 00 A0 FD | 	call	#popregs_
0ef6c                 | _do_changefreq_ret
0ef6c     2D 00 64 FD | 	ret
0ef70                 | 
0ef70                 | ' 
0ef70                 | ' sub do_changewav
0ef70                 | _do_changewav
0ef70     00 4A 05 F6 | 	mov	COUNT_, #0
0ef74     A8 00 A0 FD | 	call	#pushregs_
0ef78     14 F0 07 F1 | 	add	ptra, #20
0ef7c     A4 C2 BF FD | 	call	#_pop
0ef80     FF 14 02 F6 | 	mov	arg02, result3
0ef84     A7 FA 61 FC | 	wrlong	result1, fp
0ef88     04 4E 05 F1 | 	add	fp, #4
0ef8c     A7 FC 61 FC | 	wrlong	result2, fp
0ef90     04 4E 05 F1 | 	add	fp, #4
0ef94     A7 14 62 FC | 	wrlong	arg02, fp
0ef98     08 4E 85 F1 | 	sub	fp, #8
0ef9c     A7 12 02 F6 | 	mov	arg01, fp
0efa0     4C 6C B0 FD | 	call	#_converttoint
0efa4     10 4E 05 F1 | 	add	fp, #16
0efa8     A7 FA 61 FC | 	wrlong	result1, fp
0efac                 | ' t1=pop()
0efac                 | ' wave=converttoint(t1)
0efac                 | ' if wave<0 then wave=0
0efac     FD 14 02 F6 | 	mov	arg02, result1
0efb0     10 4E 85 F1 | 	sub	fp, #16
0efb4     00 14 56 F2 | 	cmps	arg02, #0 wc
0efb8     10 4E 05 C1 |  if_b	add	fp, #16
0efbc     A7 00 68 CC |  if_b	wrlong	#0, fp
0efc0     10 4E 85 C1 |  if_b	sub	fp, #16
0efc4     5C C2 BF FD | 	call	#_pop
0efc8     FF 14 02 F6 | 	mov	arg02, result3
0efcc     A7 FA 61 FC | 	wrlong	result1, fp
0efd0     04 4E 05 F1 | 	add	fp, #4
0efd4     A7 FC 61 FC | 	wrlong	result2, fp
0efd8     04 4E 05 F1 | 	add	fp, #4
0efdc     A7 14 62 FC | 	wrlong	arg02, fp
0efe0     08 4E 85 F1 | 	sub	fp, #8
0efe4     A7 12 02 F6 | 	mov	arg01, fp
0efe8     04 6C B0 FD | 	call	#_converttoint
0efec     FD 14 52 F6 | 	abs	arg02, result1 wc
0eff0     07 14 06 F5 | 	and	arg02, #7
0eff4     0A 15 82 F6 | 	negc	arg02, arg02
0eff8     0C 4E 05 F1 | 	add	fp, #12
0effc     A7 14 62 FC | 	wrlong	arg02, fp
0f000                 | ' if wave <32 then 
0f000     04 4E 05 F1 | 	add	fp, #4
0f004     A7 14 02 FB | 	rdlong	arg02, fp
0f008     10 4E 85 F1 | 	sub	fp, #16
0f00c     20 14 56 F2 | 	cmps	arg02, #32 wc
0f010     48 00 90 3D |  if_ae	jmp	#LR__1200
0f014     37 00 00 FF 
0f018     10 E4 05 F1 | 	add	objptr, ##28176
0f01c     F2 12 02 FB | 	rdlong	arg01, objptr
0f020     37 00 00 FF 
0f024     10 E4 85 F1 | 	sub	objptr, ##28176
0f028     0C 4E 05 F1 | 	add	fp, #12
0f02c     A7 14 02 FB | 	rdlong	arg02, fp
0f030     06 14 66 F0 | 	shl	arg02, #6
0f034     0A 13 02 F1 | 	add	arg01, arg02
0f038     08 12 06 F1 | 	add	arg01, #8
0f03c     04 4E 05 F1 | 	add	fp, #4
0f040     A7 14 02 FB | 	rdlong	arg02, fp
0f044     10 4E 85 F1 | 	sub	fp, #16
0f048     0B 14 66 F0 | 	shl	arg02, #11
0f04c     00 00 60 FF 
0f050     00 14 06 F1 | 	add	arg02, ##-1073741824
0f054     09 15 62 FC | 	wrlong	arg02, arg01
0f058     34 00 90 FD | 	jmp	#LR__1201
0f05c                 | LR__1200
0f05c     37 00 00 FF 
0f060     10 E4 05 F1 | 	add	objptr, ##28176
0f064     F2 12 02 FB | 	rdlong	arg01, objptr
0f068     37 00 00 FF 
0f06c     10 E4 85 F1 | 	sub	objptr, ##28176
0f070     0C 4E 05 F1 | 	add	fp, #12
0f074     A7 14 02 FB | 	rdlong	arg02, fp
0f078     0C 4E 85 F1 | 	sub	fp, #12
0f07c     06 14 66 F0 | 	shl	arg02, #6
0f080     0A 13 02 F1 | 	add	arg01, arg02
0f084     08 12 06 F1 | 	add	arg01, #8
0f088     00 00 E4 FF 
0f08c     09 01 68 FC | 	wrlong	##-939524096, arg01
0f090                 | LR__1201
0f090     A7 F0 03 F6 | 	mov	ptra, fp
0f094     B2 00 A0 FD | 	call	#popregs_
0f098                 | _do_changewav_ret
0f098     2D 00 64 FD | 	ret
0f09c                 | 
0f09c                 | ' 
0f09c                 | ' 
0f09c                 | ' sub do_shutup
0f09c                 | _do_shutup
0f09c     03 4A 05 F6 | 	mov	COUNT_, #3
0f0a0     A8 00 A0 FD | 	call	#pushregs_
0f0a4     18 F0 07 F1 | 	add	ptra, #24
0f0a8     4A 00 00 FF 
0f0ac     80 E4 05 F1 | 	add	objptr, ##38016
0f0b0     F2 1E 02 FB | 	rdlong	local01, objptr
0f0b4     0F 21 02 F6 | 	mov	local02, local01
0f0b8     01 20 66 F0 | 	shl	local02, #1
0f0bc     0F 21 02 F1 | 	add	local02, local01
0f0c0     02 20 66 F0 | 	shl	local02, #2
0f0c4     03 00 00 FF 
0f0c8     04 E4 85 F1 | 	sub	objptr, ##1540
0f0cc     F2 20 02 F1 | 	add	local02, objptr
0f0d0     10 23 0A FB | 	rdlong	local03, local02 wz
0f0d4     14 4E 05 F1 | 	add	fp, #20
0f0d8     A7 22 62 FC | 	wrlong	local03, fp
0f0dc                 | ' 
0f0dc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f0dc                 | ' if numpar=0 then
0f0dc     14 4E 85 F1 | 	sub	fp, #20
0f0e0     47 00 00 FF 
0f0e4     7C E4 85 F1 | 	sub	objptr, ##36476
0f0e8     50 00 90 5D |  if_ne	jmp	#LR__1212
0f0ec                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0f0ec     10 4E 05 F1 | 	add	fp, #16
0f0f0     A7 00 68 FC | 	wrlong	#0, fp
0f0f4     37 00 00 FF 
0f0f8     10 E4 05 F1 | 	add	objptr, ##28176
0f0fc     97 16 48 FB | 	callpa	#(@LR__1211-@LR__1210)>>2,fcache_load_ptr_
0f100                 | LR__1210
0f100     F2 12 02 FB | 	rdlong	arg01, objptr
0f104     A7 22 02 FB | 	rdlong	local03, fp
0f108     06 22 66 F0 | 	shl	local03, #6
0f10c     11 13 02 F1 | 	add	arg01, local03
0f110     14 12 06 F1 | 	add	arg01, #20
0f114     09 01 58 FC | 	wrword	#0, arg01
0f118     A7 22 02 FB | 	rdlong	local03, fp
0f11c     01 22 06 F1 | 	add	local03, #1
0f120     A7 22 62 FC | 	wrlong	local03, fp
0f124     08 22 56 F2 | 	cmps	local03, #8 wc
0f128     D4 FF 9F CD |  if_b	jmp	#LR__1210
0f12c                 | LR__1211
0f12c     37 00 00 FF 
0f130     10 E4 85 F1 | 	sub	objptr, ##28176
0f134     10 4E 85 F1 | 	sub	fp, #16
0f138     64 00 90 FD | 	jmp	#LR__1213
0f13c                 | LR__1212
0f13c     E4 C0 BF FD | 	call	#_pop
0f140     FF 1E 02 F6 | 	mov	local01, result3
0f144     A7 FA 61 FC | 	wrlong	result1, fp
0f148     04 4E 05 F1 | 	add	fp, #4
0f14c     A7 FC 61 FC | 	wrlong	result2, fp
0f150     04 4E 05 F1 | 	add	fp, #4
0f154     A7 1E 62 FC | 	wrlong	local01, fp
0f158     08 4E 85 F1 | 	sub	fp, #8
0f15c     A7 12 02 F6 | 	mov	arg01, fp
0f160     8C 6A B0 FD | 	call	#_converttoint
0f164     FD 22 52 F6 | 	abs	local03, result1 wc
0f168     07 22 06 F5 | 	and	local03, #7
0f16c     11 21 82 F6 | 	negc	local02, local03
0f170     0C 4E 05 F1 | 	add	fp, #12
0f174     A7 20 62 FC | 	wrlong	local02, fp
0f178     37 00 00 FF 
0f17c     10 E4 05 F1 | 	add	objptr, ##28176
0f180     F2 12 02 FB | 	rdlong	arg01, objptr
0f184     37 00 00 FF 
0f188     10 E4 85 F1 | 	sub	objptr, ##28176
0f18c     0C 4E 85 F1 | 	sub	fp, #12
0f190     06 20 66 F0 | 	shl	local02, #6
0f194     10 13 02 F1 | 	add	arg01, local02
0f198     14 12 06 F1 | 	add	arg01, #20
0f19c     09 01 58 FC | 	wrword	#0, arg01
0f1a0                 | LR__1213
0f1a0     A7 F0 03 F6 | 	mov	ptra, fp
0f1a4     B2 00 A0 FD | 	call	#popregs_
0f1a8                 | _do_shutup_ret
0f1a8     2D 00 64 FD | 	ret
0f1ac                 | 
0f1ac                 | ' 
0f1ac                 | ' 
0f1ac                 | ' sub do_release
0f1ac                 | _do_release
0f1ac     00 4A 05 F6 | 	mov	COUNT_, #0
0f1b0     A8 00 A0 FD | 	call	#pushregs_
0f1b4     10 F0 07 F1 | 	add	ptra, #16
0f1b8     68 C0 BF FD | 	call	#_pop
0f1bc     FF 14 02 F6 | 	mov	arg02, result3
0f1c0     A7 FA 61 FC | 	wrlong	result1, fp
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 FC 61 FC | 	wrlong	result2, fp
0f1cc     04 4E 05 F1 | 	add	fp, #4
0f1d0     A7 14 62 FC | 	wrlong	arg02, fp
0f1d4     08 4E 85 F1 | 	sub	fp, #8
0f1d8     A7 12 02 F6 | 	mov	arg01, fp
0f1dc     10 6A B0 FD | 	call	#_converttoint
0f1e0     0C 4E 05 F1 | 	add	fp, #12
0f1e4     A7 FA 61 FC | 	wrlong	result1, fp
0f1e8                 | ' t1=pop()
0f1e8                 | ' channel=converttoint(t1)
0f1e8                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0f1e8     0C 4E 85 F1 | 	sub	fp, #12
0f1ec     00 FA 55 F2 | 	cmps	result1, #0 wc
0f1f0     44 00 90 CD |  if_b	jmp	#LR__1220
0f1f4     0C 4E 05 F1 | 	add	fp, #12
0f1f8     A7 14 02 FB | 	rdlong	arg02, fp
0f1fc     0C 4E 85 F1 | 	sub	fp, #12
0f200     08 14 56 F2 | 	cmps	arg02, #8 wc
0f204     30 00 90 3D |  if_ae	jmp	#LR__1220
0f208     37 00 00 FF 
0f20c     10 E4 05 F1 | 	add	objptr, ##28176
0f210     F2 12 02 FB | 	rdlong	arg01, objptr
0f214     37 00 00 FF 
0f218     10 E4 85 F1 | 	sub	objptr, ##28176
0f21c     0C 4E 05 F1 | 	add	fp, #12
0f220     A7 14 02 FB | 	rdlong	arg02, fp
0f224     0C 4E 85 F1 | 	sub	fp, #12
0f228     06 14 66 F0 | 	shl	arg02, #6
0f22c     0A 13 02 F1 | 	add	arg01, arg02
0f230     2C 12 06 F1 | 	add	arg01, #44
0f234     09 FF 69 FC | 	wrlong	#255, arg01
0f238                 | LR__1220
0f238     A7 F0 03 F6 | 	mov	ptra, fp
0f23c     B2 00 A0 FD | 	call	#popregs_
0f240                 | _do_release_ret
0f240     2D 00 64 FD | 	ret
0f244                 | 
0f244                 | ' 
0f244                 | ' 
0f244                 | ' sub do_defsnd
0f244                 | _do_defsnd
0f244     04 4A 05 F6 | 	mov	COUNT_, #4
0f248     A8 00 A0 FD | 	call	#pushregs_
0f24c     88 F0 07 F1 | 	add	ptra, #136
0f250     4A 00 00 FF 
0f254     80 E4 05 F1 | 	add	objptr, ##38016
0f258     F2 1A 02 FB | 	rdlong	arg05, objptr
0f25c     0D 19 02 F6 | 	mov	arg04, arg05
0f260     01 18 66 F0 | 	shl	arg04, #1
0f264     0D 19 02 F1 | 	add	arg04, arg05
0f268     02 18 66 F0 | 	shl	arg04, #2
0f26c     03 00 00 FF 
0f270     04 E4 85 F1 | 	sub	objptr, ##1540
0f274     F2 18 02 F1 | 	add	arg04, objptr
0f278     0C 1B 02 FB | 	rdlong	arg05, arg04
0f27c     A7 1A 62 FC | 	wrlong	arg05, fp
0f280                 | ' 
0f280                 | ' numpar=compiledline(lineptr_e).result.uresult
0f280                 | ' 
0f280                 | ' 
0f280                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f280                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f280                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f280                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f280                 | ' 
0f280                 | ' if numpar<2 then return
0f280     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f284     47 00 00 FF 
0f288     7C E4 85 F1 | 	sub	objptr, ##36476
0f28c     94 08 90 CD |  if_b	jmp	#LR__1253
0f290                 | ' 
0f290                 | '   
0f290                 | ' if numpar=2 then
0f290     A7 1A 02 FB | 	rdlong	arg05, fp
0f294     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f298     A0 03 90 5D |  if_ne	jmp	#LR__1240
0f29c     84 BF BF FD | 	call	#_pop
0f2a0     FF 1A 02 F6 | 	mov	arg05, result3
0f2a4     2C 4E 05 F1 | 	add	fp, #44
0f2a8     A7 FA 61 FC | 	wrlong	result1, fp
0f2ac     04 4E 05 F1 | 	add	fp, #4
0f2b0     A7 FC 61 FC | 	wrlong	result2, fp
0f2b4     04 4E 05 F1 | 	add	fp, #4
0f2b8     A7 1A 62 FC | 	wrlong	arg05, fp
0f2bc                 | '   t1=pop()
0f2bc                 | '   if t1.result_type=result_string2 then 
0f2bc     34 4E 85 F1 | 	sub	fp, #52
0f2c0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f2c4     20 00 90 5D |  if_ne	jmp	#LR__1230
0f2c8     2C 4E 05 F1 | 	add	fp, #44
0f2cc     A7 12 02 FB | 	rdlong	arg01, fp
0f2d0     2C 4E 85 F1 | 	sub	fp, #44
0f2d4     F4 20 B0 FD | 	call	#_convertstring
0f2d8     38 4E 05 F1 | 	add	fp, #56
0f2dc     A7 FA 61 FC | 	wrlong	result1, fp
0f2e0     38 4E 85 F1 | 	sub	fp, #56
0f2e4     58 00 90 FD | 	jmp	#LR__1233
0f2e8                 | LR__1230
0f2e8     34 4E 05 F1 | 	add	fp, #52
0f2ec     A7 1A 02 FB | 	rdlong	arg05, fp
0f2f0     34 4E 85 F1 | 	sub	fp, #52
0f2f4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f2f8     18 00 90 5D |  if_ne	jmp	#LR__1231
0f2fc     2C 4E 05 F1 | 	add	fp, #44
0f300     A7 1A 02 FB | 	rdlong	arg05, fp
0f304     0C 4E 05 F1 | 	add	fp, #12
0f308     A7 1A 62 FC | 	wrlong	arg05, fp
0f30c     38 4E 85 F1 | 	sub	fp, #56
0f310     2C 00 90 FD | 	jmp	#LR__1232
0f314                 | LR__1231
0f314     85 01 00 FF 
0f318     71 1A 06 F6 | 	mov	arg05, ##@LR__5465
0f31c     38 4E 05 F1 | 	add	fp, #56
0f320     A7 1A 62 FC | 	wrlong	arg05, fp
0f324     0C 4E 85 F1 | 	sub	fp, #12
0f328     A7 12 02 F6 | 	mov	arg01, fp
0f32c     2C 4E 85 F1 | 	sub	fp, #44
0f330     BC 68 B0 FD | 	call	#_converttoint
0f334     14 4E 05 F1 | 	add	fp, #20
0f338     A7 FA 61 FC | 	wrlong	result1, fp
0f33c     14 4E 85 F1 | 	sub	fp, #20
0f340                 | LR__1232
0f340                 | LR__1233
0f340                 | ' 
0f340                 | '     
0f340                 | '   if s<>"" then 
0f340     38 4E 05 F1 | 	add	fp, #56
0f344     A7 12 02 FB | 	rdlong	arg01, fp
0f348     38 4E 85 F1 | 	sub	fp, #56
0f34c     85 01 00 FF 
0f350     72 14 06 F6 | 	mov	arg02, ##@LR__5466
0f354     D4 17 B1 FD | 	call	#__system___string_cmp
0f358     00 FA 0D F2 | 	cmp	result1, #0 wz
0f35c     E0 01 90 AD |  if_e	jmp	#LR__1236
0f360     C0 BE BF FD | 	call	#_pop
0f364     FF 1A 02 F6 | 	mov	arg05, result3
0f368     2C 4E 05 F1 | 	add	fp, #44
0f36c     A7 FA 61 FC | 	wrlong	result1, fp
0f370     04 4E 05 F1 | 	add	fp, #4
0f374     A7 FC 61 FC | 	wrlong	result2, fp
0f378     04 4E 05 F1 | 	add	fp, #4
0f37c     A7 1A 62 FC | 	wrlong	arg05, fp
0f380     08 4E 85 F1 | 	sub	fp, #8
0f384     A7 12 02 F6 | 	mov	arg01, fp
0f388     2C 4E 85 F1 | 	sub	fp, #44
0f38c     60 68 B0 FD | 	call	#_converttoint
0f390     10 4E 05 F1 | 	add	fp, #16
0f394     A7 FA 61 FC | 	wrlong	result1, fp
0f398                 | '     t1=pop()
0f398                 | '     channel=converttoint(t1) : if channel>31 then return
0f398     FD 1A 02 F6 | 	mov	arg05, result1
0f39c     10 4E 85 F1 | 	sub	fp, #16
0f3a0     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f3a4     7C 07 90 3D |  if_ae	jmp	#LR__1253
0f3a8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f3a8     09 12 06 F6 | 	mov	arg01, #9
0f3ac     E8 67 B1 FD | 	call	#__system__close
0f3b0     09 1E 06 F6 | 	mov	local01, #9
0f3b4     85 01 00 FF 
0f3b8     73 12 06 F6 | 	mov	arg01, ##@LR__5467
0f3bc     38 4E 05 F1 | 	add	fp, #56
0f3c0     A7 14 02 FB | 	rdlong	arg02, fp
0f3c4     38 4E 85 F1 | 	sub	fp, #56
0f3c8     94 17 B1 FD | 	call	#__system___string_concat
0f3cc     FD 14 02 F6 | 	mov	arg02, result1
0f3d0     0F 13 02 F6 | 	mov	arg01, local01
0f3d4     00 16 06 F6 | 	mov	arg03, #0
0f3d8     2C 23 B1 FD | 	call	#__system___basic_open_string
0f3dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f3e0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f3e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f3e8     52 00 00 FF 
0f3ec     14 E4 05 F1 | 	add	objptr, ##42004
0f3f0     F2 FA 61 FC | 	wrlong	result1, objptr
0f3f4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f3f4     52 00 00 FF 
0f3f8     14 E4 85 F1 | 	sub	objptr, ##42004
0f3fc     B0 00 90 AD |  if_e	jmp	#LR__1234
0f400     00 12 06 F6 | 	mov	arg01, #0
0f404     60 71 B1 FD | 	call	#__system___getiolock_0540
0f408     FD 12 02 F6 | 	mov	arg01, result1
0f40c     F4 16 B1 FD | 	call	#__system___lockmem
0f410     85 01 00 FF 
0f414     80 14 06 F6 | 	mov	arg02, ##@LR__5468
0f418     00 12 06 F6 | 	mov	arg01, #0
0f41c     00 16 06 F6 | 	mov	arg03, #0
0f420     D4 23 B1 FD | 	call	#__system___basic_print_string
0f424     52 00 00 FF 
0f428     14 E4 05 F1 | 	add	objptr, ##42004
0f42c     F2 14 02 FB | 	rdlong	arg02, objptr
0f430     52 00 00 FF 
0f434     14 E4 85 F1 | 	sub	objptr, ##42004
0f438     00 12 06 F6 | 	mov	arg01, #0
0f43c     00 16 06 F6 | 	mov	arg03, #0
0f440     0A 18 06 F6 | 	mov	arg04, #10
0f444     F4 23 B1 FD | 	call	#__system___basic_print_integer
0f448     85 01 00 FF 
0f44c     8E 14 06 F6 | 	mov	arg02, ##@LR__5469
0f450     00 12 06 F6 | 	mov	arg01, #0
0f454     00 16 06 F6 | 	mov	arg03, #0
0f458     9C 23 B1 FD | 	call	#__system___basic_print_string
0f45c     00 1E 06 F6 | 	mov	local01, #0
0f460     52 00 00 FF 
0f464     14 E4 05 F1 | 	add	objptr, ##42004
0f468     F2 12 02 FB | 	rdlong	arg01, objptr
0f46c     52 00 00 FF 
0f470     14 E4 85 F1 | 	sub	objptr, ##42004
0f474     54 3D B1 FD | 	call	#__system___strerror
0f478     FD 14 02 F6 | 	mov	arg02, result1
0f47c     0F 13 02 F6 | 	mov	arg01, local01
0f480     00 16 06 F6 | 	mov	arg03, #0
0f484     70 23 B1 FD | 	call	#__system___basic_print_string
0f488     00 12 06 F6 | 	mov	arg01, #0
0f48c     0A 14 06 F6 | 	mov	arg02, #10
0f490     00 16 06 F6 | 	mov	arg03, #0
0f494     08 23 B1 FD | 	call	#__system___basic_print_char
0f498     00 12 06 F6 | 	mov	arg01, #0
0f49c     C8 70 B1 FD | 	call	#__system___getiolock_0540
0f4a0     FD 00 68 FC | 	wrlong	#0, result1
0f4a4     09 12 06 F6 | 	mov	arg01, #9
0f4a8     EC 66 B1 FD | 	call	#__system__close
0f4ac     74 06 90 FD | 	jmp	#LR__1253
0f4b0                 | LR__1234
0f4b0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f4b0     04 4E 05 F1 | 	add	fp, #4
0f4b4     A7 00 68 FC | 	wrlong	#0, fp
0f4b8                 | LR__1235
0f4b8     A7 1E 02 FB | 	rdlong	local01, fp
0f4bc     01 1E 66 F0 | 	shl	local01, #1
0f4c0     11 14 06 F6 | 	mov	arg02, #17
0f4c4     0F 15 02 F1 | 	add	arg02, local01
0f4c8     78 4E 05 F1 | 	add	fp, #120
0f4cc     A7 16 02 F6 | 	mov	arg03, fp
0f4d0     7C 4E 85 F1 | 	sub	fp, #124
0f4d4     09 12 06 F6 | 	mov	arg01, #9
0f4d8     01 18 06 F6 | 	mov	arg04, #1
0f4dc     02 1A 06 F6 | 	mov	arg05, #2
0f4e0     90 24 B1 FD | 	call	#__system___basic_get
0f4e4     10 4E 05 F1 | 	add	fp, #16
0f4e8     A7 12 02 FB | 	rdlong	arg01, fp
0f4ec     0B 12 66 F0 | 	shl	arg01, #11
0f4f0     0C 4E 85 F1 | 	sub	fp, #12
0f4f4     A7 1E 02 FB | 	rdlong	local01, fp
0f4f8     01 1E 66 F0 | 	shl	local01, #1
0f4fc     0F 13 02 F1 | 	add	arg01, local01
0f500     78 4E 05 F1 | 	add	fp, #120
0f504     A7 14 E2 FA | 	rdword	arg02, fp
0f508     7C 4E 85 F1 | 	sub	fp, #124
0f50c     0F 14 66 F7 | 	signx	arg02, #15
0f510     04 E2 B0 FD | 	call	#_psdpoke
0f514     04 4E 05 F1 | 	add	fp, #4
0f518     A7 1E 02 FB | 	rdlong	local01, fp
0f51c     01 1E 06 F1 | 	add	local01, #1
0f520     A7 1E 62 FC | 	wrlong	local01, fp
0f524     02 00 00 FF 
0f528     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f52c     88 FF 9F CD |  if_b	jmp	#LR__1235
0f530     04 4E 85 F1 | 	sub	fp, #4
0f534                 | '     close #9
0f534     09 12 06 F6 | 	mov	arg01, #9
0f538     5C 66 B1 FD | 	call	#__system__close
0f53c                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f53c                 | '     return
0f53c     E4 05 90 FD | 	jmp	#LR__1253
0f540                 | LR__1236
0f540                 | '     if wptr < ($80000 - 2048) then 
0f540     14 4E 05 F1 | 	add	fp, #20
0f544     A7 1E 02 FB | 	rdlong	local01, fp
0f548     14 4E 85 F1 | 	sub	fp, #20
0f54c     FC 03 00 FF 
0f550     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0f554     70 00 90 3D |  if_ae	jmp	#LR__1238
0f558                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f558     04 4E 05 F1 | 	add	fp, #4
0f55c     A7 00 68 FC | 	wrlong	#0, fp
0f560     04 4E 85 F1 | 	sub	fp, #4
0f564                 | LR__1237
0f564     10 4E 05 F1 | 	add	fp, #16
0f568     A7 1E 02 FB | 	rdlong	local01, fp
0f56c     0B 1E 66 F0 | 	shl	local01, #11
0f570     0C 4E 85 F1 | 	sub	fp, #12
0f574     A7 1A 02 FB | 	rdlong	arg05, fp
0f578     0D 19 02 F6 | 	mov	arg04, arg05
0f57c     01 18 66 F0 | 	shl	arg04, #1
0f580     0C 1F 02 F1 | 	add	local01, arg04
0f584     10 4E 05 F1 | 	add	fp, #16
0f588     A7 12 02 FB | 	rdlong	arg01, fp
0f58c     14 4E 85 F1 | 	sub	fp, #20
0f590     01 1A 66 F0 | 	shl	arg05, #1
0f594     0D 13 02 F1 | 	add	arg01, arg05
0f598     09 15 E2 FA | 	rdword	arg02, arg01
0f59c     0F 13 02 F6 | 	mov	arg01, local01
0f5a0     74 E1 B0 FD | 	call	#_psdpoke
0f5a4     04 4E 05 F1 | 	add	fp, #4
0f5a8     A7 1E 02 FB | 	rdlong	local01, fp
0f5ac     01 1E 06 F1 | 	add	local01, #1
0f5b0     A7 1E 62 FC | 	wrlong	local01, fp
0f5b4     04 4E 85 F1 | 	sub	fp, #4
0f5b8     02 00 00 FF 
0f5bc     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f5c0     A0 FF 9F CD |  if_b	jmp	#LR__1237
0f5c4     5C 05 90 FD | 	jmp	#LR__1253
0f5c8                 | LR__1238
0f5c8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f5c8     04 4E 05 F1 | 	add	fp, #4
0f5cc     A7 00 68 FC | 	wrlong	#0, fp
0f5d0     04 4E 85 F1 | 	sub	fp, #4
0f5d4                 | LR__1239
0f5d4     10 4E 05 F1 | 	add	fp, #16
0f5d8     A7 1E 02 FB | 	rdlong	local01, fp
0f5dc     0B 1E 66 F0 | 	shl	local01, #11
0f5e0     0C 4E 85 F1 | 	sub	fp, #12
0f5e4     A7 1A 02 FB | 	rdlong	arg05, fp
0f5e8     0D 19 02 F6 | 	mov	arg04, arg05
0f5ec     01 18 66 F0 | 	shl	arg04, #1
0f5f0     0C 1F 02 F1 | 	add	local01, arg04
0f5f4     10 4E 05 F1 | 	add	fp, #16
0f5f8     A7 12 02 FB | 	rdlong	arg01, fp
0f5fc     14 4E 85 F1 | 	sub	fp, #20
0f600     01 1A 66 F0 | 	shl	arg05, #1
0f604     0D 13 02 F1 | 	add	arg01, arg05
0f608     4C E2 B0 FD | 	call	#_psdpeek
0f60c     FD 14 02 F6 | 	mov	arg02, result1
0f610     0F 13 02 F6 | 	mov	arg01, local01
0f614     00 E1 B0 FD | 	call	#_psdpoke
0f618     04 4E 05 F1 | 	add	fp, #4
0f61c     A7 1E 02 FB | 	rdlong	local01, fp
0f620     01 1E 06 F1 | 	add	local01, #1
0f624     A7 1E 62 FC | 	wrlong	local01, fp
0f628     04 4E 85 F1 | 	sub	fp, #4
0f62c     02 00 00 FF 
0f630     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f634     9C FF 9F CD |  if_b	jmp	#LR__1239
0f638                 | '     return 
0f638     E8 04 90 FD | 	jmp	#LR__1253
0f63c                 | '   
0f63c                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f63c                 | '   return
0f63c                 | LR__1240
0f63c                 | ' for i=0 to 15 : harm(i)=0: next i  
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 00 68 FC | 	wrlong	#0, fp
0f644     97 16 48 FB | 	callpa	#(@LR__1242-@LR__1241)>>2,fcache_load_ptr_
0f648                 | LR__1241
0f648     A7 1E 02 FB | 	rdlong	local01, fp
0f64c     02 1E 66 F0 | 	shl	local01, #2
0f650     38 4E 05 F1 | 	add	fp, #56
0f654     A7 1E 02 F1 | 	add	local01, fp
0f658     0F 01 68 FC | 	wrlong	#0, local01
0f65c     38 4E 85 F1 | 	sub	fp, #56
0f660     A7 1E 02 FB | 	rdlong	local01, fp
0f664     01 1E 06 F1 | 	add	local01, #1
0f668     A7 1E 62 FC | 	wrlong	local01, fp
0f66c     10 1E 56 F2 | 	cmps	local01, #16 wc
0f670     D4 FF 9F CD |  if_b	jmp	#LR__1241
0f674                 | LR__1242
0f674     04 4E 85 F1 | 	sub	fp, #4
0f678                 | ' for i=numpar to 2 step -1 
0f678     A7 1E 02 FB | 	rdlong	local01, fp
0f67c     04 4E 05 F1 | 	add	fp, #4
0f680     A7 1E 62 FC | 	wrlong	local01, fp
0f684     04 4E 85 F1 | 	sub	fp, #4
0f688                 | LR__1243
0f688     98 BB BF FD | 	call	#_pop
0f68c     2C 4E 05 F1 | 	add	fp, #44
0f690     A7 FA 61 FC | 	wrlong	result1, fp
0f694     04 4E 05 F1 | 	add	fp, #4
0f698     A7 FC 61 FC | 	wrlong	result2, fp
0f69c     04 4E 05 F1 | 	add	fp, #4
0f6a0     A7 FE 61 FC | 	wrlong	result3, fp
0f6a4     30 4E 85 F1 | 	sub	fp, #48
0f6a8     A7 1E 02 FB | 	rdlong	local01, fp
0f6ac     02 1E 86 F1 | 	sub	local01, #2
0f6b0     02 1E 66 F0 | 	shl	local01, #2
0f6b4     38 4E 05 F1 | 	add	fp, #56
0f6b8     A7 1E 02 F1 | 	add	local01, fp
0f6bc     10 4E 85 F1 | 	sub	fp, #16
0f6c0     A7 12 02 F6 | 	mov	arg01, fp
0f6c4     2C 4E 85 F1 | 	sub	fp, #44
0f6c8     E0 65 B0 FD | 	call	#_converttofloat
0f6cc     0F FB 61 FC | 	wrlong	result1, local01
0f6d0     04 4E 05 F1 | 	add	fp, #4
0f6d4     A7 1E 02 FB | 	rdlong	local01, fp
0f6d8     01 1E 86 F1 | 	sub	local01, #1
0f6dc     A7 1E 62 FC | 	wrlong	local01, fp
0f6e0     04 4E 85 F1 | 	sub	fp, #4
0f6e4     02 1E 56 F2 | 	cmps	local01, #2 wc
0f6e8     9C FF 9F 3D |  if_ae	jmp	#LR__1243
0f6ec     34 BB BF FD | 	call	#_pop
0f6f0     FF 1E 02 F6 | 	mov	local01, result3
0f6f4     2C 4E 05 F1 | 	add	fp, #44
0f6f8     A7 FA 61 FC | 	wrlong	result1, fp
0f6fc     04 4E 05 F1 | 	add	fp, #4
0f700     A7 FC 61 FC | 	wrlong	result2, fp
0f704     04 4E 05 F1 | 	add	fp, #4
0f708     A7 1E 62 FC | 	wrlong	local01, fp
0f70c     08 4E 85 F1 | 	sub	fp, #8
0f710     A7 12 02 F6 | 	mov	arg01, fp
0f714     2C 4E 85 F1 | 	sub	fp, #44
0f718     D4 64 B0 FD | 	call	#_converttoint
0f71c     10 4E 05 F1 | 	add	fp, #16
0f720     A7 FA 61 FC | 	wrlong	result1, fp
0f724                 | ' t1=pop()
0f724                 | ' channel=converttoint(t1) : : if channel>31 then return
0f724     FD 1E 02 F6 | 	mov	local01, result1
0f728     10 4E 85 F1 | 	sub	fp, #16
0f72c     20 1E 56 F2 | 	cmps	local01, #32 wc
0f730     F0 03 90 3D |  if_ae	jmp	#LR__1253
0f734     20 4E 05 F1 | 	add	fp, #32
0f738     A7 00 68 FC | 	wrlong	#0, fp
0f73c                 | ' max=0
0f73c                 | ' if harm(0)<0 then
0f73c     1C 4E 05 F1 | 	add	fp, #28
0f740     A7 12 02 FB | 	rdlong	arg01, fp
0f744     3C 4E 85 F1 | 	sub	fp, #60
0f748     00 14 06 F6 | 	mov	arg02, #0
0f74c     01 16 06 F6 | 	mov	arg03, #1
0f750     98 43 B1 FD | 	call	#__system___float_cmp
0f754     00 FA 55 F2 | 	cmps	result1, #0 wc
0f758     04 01 90 3D |  if_ae	jmp	#LR__1246
0f75c     3C 4E 05 F1 | 	add	fp, #60
0f760     A7 FA 01 FB | 	rdlong	result1, fp
0f764     1F FA 05 F4 | 	bitl	result1, #31
0f768     24 4E 85 F1 | 	sub	fp, #36
0f76c     A7 FA 61 FC | 	wrlong	result1, fp
0f770     28 4E 05 F1 | 	add	fp, #40
0f774     A7 FA 01 FB | 	rdlong	result1, fp
0f778     1F FA 05 F4 | 	bitl	result1, #31
0f77c     24 4E 85 F1 | 	sub	fp, #36
0f780     A7 FA 61 FC | 	wrlong	result1, fp
0f784     20 4E 05 F1 | 	add	fp, #32
0f788     00 C0 9F FF 
0f78c     A7 00 68 FC | 	wrlong	##1065353216, fp
0f790     24 4E 85 F1 | 	sub	fp, #36
0f794     A7 1E 02 FB | 	rdlong	local01, fp
0f798     28 4E 05 F1 | 	add	fp, #40
0f79c     A7 1E 62 FC | 	wrlong	local01, fp
0f7a0     24 4E 85 F1 | 	sub	fp, #36
0f7a4     A7 1E 02 FB | 	rdlong	local01, fp
0f7a8     28 4E 05 F1 | 	add	fp, #40
0f7ac     A7 1E 62 FC | 	wrlong	local01, fp
0f7b0                 | '   harm(0)=1
0f7b0                 | '   harm(1)=even
0f7b0                 | '   harm(2)=odd
0f7b0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f7b0     40 4E 85 F1 | 	sub	fp, #64
0f7b4     A7 06 68 FC | 	wrlong	#3, fp
0f7b8                 | LR__1244
0f7b8     A7 1A 02 FB | 	rdlong	arg05, fp
0f7bc     0D 21 02 F6 | 	mov	local02, arg05
0f7c0     02 20 66 F0 | 	shl	local02, #2
0f7c4     38 4E 05 F1 | 	add	fp, #56
0f7c8     A7 20 02 F1 | 	add	local02, fp
0f7cc     02 1A 86 F1 | 	sub	arg05, #2
0f7d0     02 1A 66 F0 | 	shl	arg05, #2
0f7d4     A7 1A 02 F1 | 	add	arg05, fp
0f7d8     0D 13 02 FB | 	rdlong	arg01, arg05
0f7dc     24 4E 85 F1 | 	sub	fp, #36
0f7e0     A7 14 02 FB | 	rdlong	arg02, fp
0f7e4     18 4E 85 F1 | 	sub	fp, #24
0f7e8     CC 3E B1 FD | 	call	#__system___float_mul
0f7ec     10 FB 61 FC | 	wrlong	result1, local02
0f7f0     04 4E 05 F1 | 	add	fp, #4
0f7f4     A7 22 02 FB | 	rdlong	local03, fp
0f7f8     02 22 06 F1 | 	add	local03, #2
0f7fc     A7 22 62 FC | 	wrlong	local03, fp
0f800     10 22 56 F2 | 	cmps	local03, #16 wc
0f804     B0 FF 9F CD |  if_b	jmp	#LR__1244
0f808                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f808     A7 08 68 FC | 	wrlong	#4, fp
0f80c                 | LR__1245
0f80c     A7 22 02 FB | 	rdlong	local03, fp
0f810     11 21 02 F6 | 	mov	local02, local03
0f814     02 20 66 F0 | 	shl	local02, #2
0f818     38 4E 05 F1 | 	add	fp, #56
0f81c     A7 20 02 F1 | 	add	local02, fp
0f820     02 22 86 F1 | 	sub	local03, #2
0f824     02 22 66 F0 | 	shl	local03, #2
0f828     A7 22 02 F1 | 	add	local03, fp
0f82c     11 13 02 FB | 	rdlong	arg01, local03
0f830     20 4E 85 F1 | 	sub	fp, #32
0f834     A7 14 02 FB | 	rdlong	arg02, fp
0f838     1C 4E 85 F1 | 	sub	fp, #28
0f83c     78 3E B1 FD | 	call	#__system___float_mul
0f840     10 FB 61 FC | 	wrlong	result1, local02
0f844     04 4E 05 F1 | 	add	fp, #4
0f848     A7 22 02 FB | 	rdlong	local03, fp
0f84c     02 22 06 F1 | 	add	local03, #2
0f850     A7 22 62 FC | 	wrlong	local03, fp
0f854     0F 22 56 F2 | 	cmps	local03, #15 wc
0f858     B0 FF 9F CD |  if_b	jmp	#LR__1245
0f85c     04 4E 85 F1 | 	sub	fp, #4
0f860                 | LR__1246
0f860                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f860     3C 4E 05 F1 | 	add	fp, #60
0f864     A7 12 02 FB | 	rdlong	arg01, fp
0f868     3C 4E 85 F1 | 	sub	fp, #60
0f86c     00 14 06 F6 | 	mov	arg02, #0
0f870     01 16 66 F6 | 	neg	arg03, #1
0f874     74 42 B1 FD | 	call	#__system___float_cmp
0f878     00 FA 55 F2 | 	cmps	result1, #0 wc
0f87c     A4 02 90 CD |  if_b	jmp	#LR__1252
0f880                 | '   for i=0 to 1023
0f880     04 4E 05 F1 | 	add	fp, #4
0f884     A7 00 68 FC | 	wrlong	#0, fp
0f888     04 4E 85 F1 | 	sub	fp, #4
0f88c                 | LR__1247
0f88c     24 4E 05 F1 | 	add	fp, #36
0f890     A7 00 68 FC | 	wrlong	#0, fp
0f894                 | '     spl=0
0f894                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f894     1C 4E 85 F1 | 	sub	fp, #28
0f898     A7 00 68 FC | 	wrlong	#0, fp
0f89c                 | LR__1248
0f89c     A7 20 02 FB | 	rdlong	local02, fp
0f8a0     02 20 66 F0 | 	shl	local02, #2
0f8a4     34 4E 05 F1 | 	add	fp, #52
0f8a8     A7 20 02 F1 | 	add	local02, fp
0f8ac     10 23 02 FB | 	rdlong	local03, local02
0f8b0     87 E4 1D FF 
0f8b4     DB 21 06 F6 | 	mov	local02, ##1003032539
0f8b8     38 4E 85 F1 | 	sub	fp, #56
0f8bc     A7 12 02 FB | 	rdlong	arg01, fp
0f8c0     04 4E 85 F1 | 	sub	fp, #4
0f8c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8c8     1F 24 C6 C9 |  if_b	decod	local04, #31
0f8cc     00 24 06 36 |  if_ae	mov	local04, #0
0f8d0     E0 39 B1 FD | 	call	#__system___float_fromuns
0f8d4     12 FB 61 F5 | 	xor	result1, local04
0f8d8     FD 14 02 F6 | 	mov	arg02, result1
0f8dc     10 13 02 F6 | 	mov	arg01, local02
0f8e0     D4 3D B1 FD | 	call	#__system___float_mul
0f8e4     FD 20 02 F6 | 	mov	local02, result1
0f8e8     08 4E 05 F1 | 	add	fp, #8
0f8ec     A7 12 02 FB | 	rdlong	arg01, fp
0f8f0     08 4E 85 F1 | 	sub	fp, #8
0f8f4     01 12 06 F1 | 	add	arg01, #1
0f8f8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8fc     1F 24 C6 C9 |  if_b	decod	local04, #31
0f900     00 24 06 36 |  if_ae	mov	local04, #0
0f904     AC 39 B1 FD | 	call	#__system___float_fromuns
0f908     12 FB 61 F5 | 	xor	result1, local04
0f90c     FD 14 02 F6 | 	mov	arg02, result1
0f910     10 13 02 F6 | 	mov	arg01, local02
0f914     A0 3D B1 FD | 	call	#__system___float_mul
0f918     FD 12 02 F6 | 	mov	arg01, result1
0f91c     F8 46 B1 FD | 	call	#__system____builtin_sinf
0f920     FD 14 02 F6 | 	mov	arg02, result1
0f924     11 13 02 F6 | 	mov	arg01, local03
0f928     8C 3D B1 FD | 	call	#__system___float_mul
0f92c     FD 14 02 F6 | 	mov	arg02, result1
0f930     24 4E 05 F1 | 	add	fp, #36
0f934     A7 12 02 FB | 	rdlong	arg01, fp
0f938     24 4E 85 F1 | 	sub	fp, #36
0f93c     A8 39 B1 FD | 	call	#__system___float_add
0f940     24 4E 05 F1 | 	add	fp, #36
0f944     A7 FA 61 FC | 	wrlong	result1, fp
0f948     1C 4E 85 F1 | 	sub	fp, #28
0f94c     A7 16 02 FB | 	rdlong	arg03, fp
0f950     01 16 06 F1 | 	add	arg03, #1
0f954     A7 16 62 FC | 	wrlong	arg03, fp
0f958     10 16 56 F2 | 	cmps	arg03, #16 wc
0f95c     3C FF 9F CD |  if_b	jmp	#LR__1248
0f960                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0f960     1C 4E 05 F1 | 	add	fp, #28
0f964     A7 12 02 FB | 	rdlong	arg01, fp
0f968     1F 12 06 F4 | 	bitl	arg01, #31
0f96c     04 4E 85 F1 | 	sub	fp, #4
0f970     A7 14 02 FB | 	rdlong	arg02, fp
0f974     20 4E 85 F1 | 	sub	fp, #32
0f978     01 16 66 F6 | 	neg	arg03, #1
0f97c     6C 41 B1 FD | 	call	#__system___float_cmp
0f980     01 FA 55 F2 | 	cmps	result1, #1 wc
0f984     18 00 90 CD |  if_b	jmp	#LR__1249
0f988     24 4E 05 F1 | 	add	fp, #36
0f98c     A7 FA 01 FB | 	rdlong	result1, fp
0f990     1F FA 05 F4 | 	bitl	result1, #31
0f994     04 4E 85 F1 | 	sub	fp, #4
0f998     A7 FA 61 FC | 	wrlong	result1, fp
0f99c     20 4E 85 F1 | 	sub	fp, #32
0f9a0                 | LR__1249
0f9a0     04 4E 05 F1 | 	add	fp, #4
0f9a4     A7 22 02 FB | 	rdlong	local03, fp
0f9a8     01 22 06 F1 | 	add	local03, #1
0f9ac     A7 22 62 FC | 	wrlong	local03, fp
0f9b0     04 4E 85 F1 | 	sub	fp, #4
0f9b4     02 00 00 FF 
0f9b8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f9bc     CC FE 9F CD |  if_b	jmp	#LR__1247
0f9c0                 | '   for i=0 to 1023
0f9c0     04 4E 05 F1 | 	add	fp, #4
0f9c4     A7 00 68 FC | 	wrlong	#0, fp
0f9c8     04 4E 85 F1 | 	sub	fp, #4
0f9cc                 | LR__1250
0f9cc     24 4E 05 F1 | 	add	fp, #36
0f9d0     A7 00 68 FC | 	wrlong	#0, fp
0f9d4                 | '     spl=0
0f9d4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0f9d4     1C 4E 85 F1 | 	sub	fp, #28
0f9d8     A7 00 68 FC | 	wrlong	#0, fp
0f9dc                 | LR__1251
0f9dc     A7 22 02 FB | 	rdlong	local03, fp
0f9e0     02 22 66 F0 | 	shl	local03, #2
0f9e4     34 4E 05 F1 | 	add	fp, #52
0f9e8     A7 22 02 F1 | 	add	local03, fp
0f9ec     11 23 02 FB | 	rdlong	local03, local03
0f9f0     1C 4E 85 F1 | 	sub	fp, #28
0f9f4     A7 14 02 FB | 	rdlong	arg02, fp
0f9f8     20 4E 85 F1 | 	sub	fp, #32
0f9fc     58 7F 23 FF 
0fa00     00 12 06 F6 | 	mov	arg01, ##1191096320
0fa04     B4 3E B1 FD | 	call	#__system___float_div
0fa08     FD 14 02 F6 | 	mov	arg02, result1
0fa0c     11 13 02 F6 | 	mov	arg01, local03
0fa10     A4 3C B1 FD | 	call	#__system___float_mul
0fa14     FD 22 02 F6 | 	mov	local03, result1
0fa18     87 E4 1D FF 
0fa1c     DB 21 06 F6 | 	mov	local02, ##1003032539
0fa20     04 4E 05 F1 | 	add	fp, #4
0fa24     A7 12 02 FB | 	rdlong	arg01, fp
0fa28     04 4E 85 F1 | 	sub	fp, #4
0fa2c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa30     1F 24 C6 C9 |  if_b	decod	local04, #31
0fa34     00 24 06 36 |  if_ae	mov	local04, #0
0fa38     78 38 B1 FD | 	call	#__system___float_fromuns
0fa3c     12 FB 61 F5 | 	xor	result1, local04
0fa40     FD 14 02 F6 | 	mov	arg02, result1
0fa44     10 13 02 F6 | 	mov	arg01, local02
0fa48     6C 3C B1 FD | 	call	#__system___float_mul
0fa4c     FD 20 02 F6 | 	mov	local02, result1
0fa50     08 4E 05 F1 | 	add	fp, #8
0fa54     A7 12 02 FB | 	rdlong	arg01, fp
0fa58     08 4E 85 F1 | 	sub	fp, #8
0fa5c     01 12 06 F1 | 	add	arg01, #1
0fa60     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa64     1F 24 C6 C9 |  if_b	decod	local04, #31
0fa68     00 24 06 36 |  if_ae	mov	local04, #0
0fa6c     44 38 B1 FD | 	call	#__system___float_fromuns
0fa70     12 FB 61 F5 | 	xor	result1, local04
0fa74     FD 14 02 F6 | 	mov	arg02, result1
0fa78     10 13 02 F6 | 	mov	arg01, local02
0fa7c     38 3C B1 FD | 	call	#__system___float_mul
0fa80     FD 12 02 F6 | 	mov	arg01, result1
0fa84     90 45 B1 FD | 	call	#__system____builtin_sinf
0fa88     FD 14 02 F6 | 	mov	arg02, result1
0fa8c     11 13 02 F6 | 	mov	arg01, local03
0fa90     24 3C B1 FD | 	call	#__system___float_mul
0fa94     FD 14 02 F6 | 	mov	arg02, result1
0fa98     24 4E 05 F1 | 	add	fp, #36
0fa9c     A7 12 02 FB | 	rdlong	arg01, fp
0faa0     24 4E 85 F1 | 	sub	fp, #36
0faa4     40 38 B1 FD | 	call	#__system___float_add
0faa8     24 4E 05 F1 | 	add	fp, #36
0faac     A7 FA 61 FC | 	wrlong	result1, fp
0fab0     1C 4E 85 F1 | 	sub	fp, #28
0fab4     A7 22 02 FB | 	rdlong	local03, fp
0fab8     01 22 06 F1 | 	add	local03, #1
0fabc     A7 22 62 FC | 	wrlong	local03, fp
0fac0     10 22 56 F2 | 	cmps	local03, #16 wc
0fac4     14 FF 9F CD |  if_b	jmp	#LR__1251
0fac8     08 4E 05 F1 | 	add	fp, #8
0facc     A7 22 02 FB | 	rdlong	local03, fp
0fad0     0B 22 66 F0 | 	shl	local03, #11
0fad4     0C 4E 85 F1 | 	sub	fp, #12
0fad8     A7 20 02 FB | 	rdlong	local02, fp
0fadc     01 20 66 F0 | 	shl	local02, #1
0fae0     10 23 02 F1 | 	add	local03, local02
0fae4     20 4E 05 F1 | 	add	fp, #32
0fae8     A7 12 02 FB | 	rdlong	arg01, fp
0faec     24 4E 85 F1 | 	sub	fp, #36
0faf0     01 14 06 F6 | 	mov	arg02, #1
0faf4     88 40 B1 FD | 	call	#__system___float_tointeger
0faf8     FD 14 02 F6 | 	mov	arg02, result1
0fafc     11 13 02 F6 | 	mov	arg01, local03
0fb00     14 DC B0 FD | 	call	#_psdpoke
0fb04     04 4E 05 F1 | 	add	fp, #4
0fb08     A7 22 02 FB | 	rdlong	local03, fp
0fb0c     01 22 06 F1 | 	add	local03, #1
0fb10     A7 22 62 FC | 	wrlong	local03, fp
0fb14     04 4E 85 F1 | 	sub	fp, #4
0fb18     02 00 00 FF 
0fb1c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0fb20     A8 FE 9F CD |  if_b	jmp	#LR__1250
0fb24                 | LR__1252
0fb24                 | LR__1253
0fb24     A7 F0 03 F6 | 	mov	ptra, fp
0fb28     B2 00 A0 FD | 	call	#popregs_
0fb2c                 | _do_defsnd_ret
0fb2c     2D 00 64 FD | 	ret
0fb30                 | 
0fb30                 | ' 
0fb30                 | ' ' ---------------  List the program. 
0fb30                 | ' 
0fb30                 | ' sub do_list
0fb30                 | _do_list
0fb30     02 4A 05 F6 | 	mov	COUNT_, #2
0fb34     A8 00 A0 FD | 	call	#pushregs_
0fb38     B8 F0 07 F1 | 	add	ptra, #184
0fb3c     04 4E 05 F1 | 	add	fp, #4
0fb40     A7 00 68 FC | 	wrlong	#0, fp
0fb44     04 4E 05 F1 | 	add	fp, #4
0fb48     FF FF BF FF 
0fb4c     A7 FE 6B FC | 	wrlong	##2147483647, fp
0fb50     08 4E 85 F1 | 	sub	fp, #8
0fb54     4A 00 00 FF 
0fb58     80 E4 05 F1 | 	add	objptr, ##38016
0fb5c     F2 1E 02 FB | 	rdlong	local01, objptr
0fb60     0F 17 02 F6 | 	mov	arg03, local01
0fb64     01 16 66 F0 | 	shl	arg03, #1
0fb68     0F 17 02 F1 | 	add	arg03, local01
0fb6c     02 16 66 F0 | 	shl	arg03, #2
0fb70     03 00 00 FF 
0fb74     04 E4 85 F1 | 	sub	objptr, ##1540
0fb78     F2 16 02 F1 | 	add	arg03, objptr
0fb7c     0B 17 02 FB | 	rdlong	arg03, arg03
0fb80     A7 16 62 FC | 	wrlong	arg03, fp
0fb84                 | ' 
0fb84                 | ' startline=0 : endline=$7FFFFFFF
0fb84                 | ' numpar=compiledline(lineptr_e).result.uresult
0fb84                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0fb84     01 16 0E F2 | 	cmp	arg03, #1 wz
0fb88     47 00 00 FF 
0fb8c     7C E4 85 F1 | 	sub	objptr, ##36476
0fb90     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fb94     8C B6 BF FD | 	call	#_pop
0fb98     FF 1E 02 F6 | 	mov	local01, result3
0fb9c     0C 4E 05 F1 | 	add	fp, #12
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     04 4E 05 F1 | 	add	fp, #4
0fba8     A7 FC 61 FC | 	wrlong	result2, fp
0fbac     04 4E 05 F1 | 	add	fp, #4
0fbb0     A7 1E 62 FC | 	wrlong	local01, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     A7 12 02 F6 | 	mov	arg01, fp
0fbbc     0C 4E 85 F1 | 	sub	fp, #12
0fbc0     2C 60 B0 FD | 	call	#_converttoint
0fbc4     04 4E 05 F1 | 	add	fp, #4
0fbc8     A7 FA 61 FC | 	wrlong	result1, fp
0fbcc     04 4E 85 F1 | 	sub	fp, #4
0fbd0                 | LR__1260
0fbd0                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0fbd0     A7 16 02 FB | 	rdlong	arg03, fp
0fbd4     02 16 0E F2 | 	cmp	arg03, #2 wz
0fbd8     7C 00 90 5D |  if_ne	jmp	#LR__1261
0fbdc     44 B6 BF FD | 	call	#_pop
0fbe0     FF 1E 02 F6 | 	mov	local01, result3
0fbe4     0C 4E 05 F1 | 	add	fp, #12
0fbe8     A7 FA 61 FC | 	wrlong	result1, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 FC 61 FC | 	wrlong	result2, fp
0fbf4     04 4E 05 F1 | 	add	fp, #4
0fbf8     A7 1E 62 FC | 	wrlong	local01, fp
0fbfc     08 4E 85 F1 | 	sub	fp, #8
0fc00     A7 12 02 F6 | 	mov	arg01, fp
0fc04     0C 4E 85 F1 | 	sub	fp, #12
0fc08     E4 5F B0 FD | 	call	#_converttoint
0fc0c     FD 1E 02 F6 | 	mov	local01, result1
0fc10     08 4E 05 F1 | 	add	fp, #8
0fc14     A7 1E 62 FC | 	wrlong	local01, fp
0fc18     08 4E 85 F1 | 	sub	fp, #8
0fc1c     04 B6 BF FD | 	call	#_pop
0fc20     FF 1E 02 F6 | 	mov	local01, result3
0fc24     0C 4E 05 F1 | 	add	fp, #12
0fc28     A7 FA 61 FC | 	wrlong	result1, fp
0fc2c     04 4E 05 F1 | 	add	fp, #4
0fc30     A7 FC 61 FC | 	wrlong	result2, fp
0fc34     04 4E 05 F1 | 	add	fp, #4
0fc38     A7 1E 62 FC | 	wrlong	local01, fp
0fc3c     08 4E 85 F1 | 	sub	fp, #8
0fc40     A7 12 02 F6 | 	mov	arg01, fp
0fc44     0C 4E 85 F1 | 	sub	fp, #12
0fc48     A4 5F B0 FD | 	call	#_converttoint
0fc4c     04 4E 05 F1 | 	add	fp, #4
0fc50     A7 FA 61 FC | 	wrlong	result1, fp
0fc54     04 4E 85 F1 | 	sub	fp, #4
0fc58                 | LR__1261
0fc58                 | ' 
0fc58                 | ' 
0fc58                 | ' print
0fc58     00 12 06 F6 | 	mov	arg01, #0
0fc5c     08 69 B1 FD | 	call	#__system___getiolock_0540
0fc60     FD 12 02 F6 | 	mov	arg01, result1
0fc64     9C 0E B1 FD | 	call	#__system___lockmem
0fc68     00 12 06 F6 | 	mov	arg01, #0
0fc6c     0A 14 06 F6 | 	mov	arg02, #10
0fc70     00 16 06 F6 | 	mov	arg03, #0
0fc74     28 1B B1 FD | 	call	#__system___basic_print_char
0fc78     00 12 06 F6 | 	mov	arg01, #0
0fc7c     E8 68 B1 FD | 	call	#__system___getiolock_0540
0fc80     FD 00 68 FC | 	wrlong	#0, result1
0fc84     4A 00 00 FF 
0fc88     84 E4 05 F1 | 	add	objptr, ##38020
0fc8c     F2 20 02 FB | 	rdlong	local02, objptr
0fc90     07 00 00 FF 
0fc94     88 E5 05 F1 | 	add	objptr, ##3976
0fc98     F2 20 62 FC | 	wrlong	local02, objptr
0fc9c     52 00 00 FF 
0fca0     0C E4 85 F1 | 	sub	objptr, ##41996
0fca4                 | ' do 
0fca4                 | LR__1262
0fca4     20 4E 05 F1 | 	add	fp, #32
0fca8     A7 12 02 F6 | 	mov	arg01, fp
0fcac     20 4E 85 F1 | 	sub	fp, #32
0fcb0     52 00 00 FF 
0fcb4     0C E4 05 F1 | 	add	objptr, ##41996
0fcb8     F2 14 02 FB | 	rdlong	arg02, objptr
0fcbc     18 16 06 F6 | 	mov	arg03, #24
0fcc0     46 00 00 FF 
0fcc4     40 E5 85 F1 | 	sub	objptr, ##36160
0fcc8     F8 01 B1 FD | 	call	#_psram_spin2_read1
0fccc     0B 00 00 FF 
0fcd0     CC E4 85 F1 | 	sub	objptr, ##5836
0fcd4                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0fcd4                 | '   
0fcd4                 | '   if header(0)<> $FFFFFFFF then
0fcd4     20 4E 05 F1 | 	add	fp, #32
0fcd8     A7 20 02 FB | 	rdlong	local02, fp
0fcdc     20 4E 85 F1 | 	sub	fp, #32
0fce0     FF FF 7F FF 
0fce4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0fce8     A8 00 90 AD |  if_e	jmp	#LR__1264
0fcec     38 4E 05 F1 | 	add	fp, #56
0fcf0     3F 16 06 F6 | 	mov	arg03, #63
0fcf4     28 16 62 FD | 	setq	arg03
0fcf8     A7 00 68 FC | 	wrlong	#0, fp
0fcfc     A7 12 02 F6 | 	mov	arg01, fp
0fd00     10 4E 85 F1 | 	sub	fp, #16
0fd04     A7 14 02 FB | 	rdlong	arg02, fp
0fd08     04 4E 05 F1 | 	add	fp, #4
0fd0c     A7 16 02 FB | 	rdlong	arg03, fp
0fd10     2C 4E 85 F1 | 	sub	fp, #44
0fd14     0B 00 00 FF 
0fd18     CC E4 05 F1 | 	add	objptr, ##5836
0fd1c     A4 01 B1 FD | 	call	#_psram_spin2_read1
0fd20     0B 00 00 FF 
0fd24     CC E4 85 F1 | 	sub	objptr, ##5836
0fd28                 | '     longfill(linebuf,0,64)
0fd28                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0fd28                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0fd28     20 4E 05 F1 | 	add	fp, #32
0fd2c     A7 20 02 FB | 	rdlong	local02, fp
0fd30     1C 4E 85 F1 | 	sub	fp, #28
0fd34     A7 1E 02 FB | 	rdlong	local01, fp
0fd38     04 4E 85 F1 | 	sub	fp, #4
0fd3c     0F 21 52 F2 | 	cmps	local02, local01 wc
0fd40     30 00 90 CD |  if_b	jmp	#LR__1263
0fd44     20 4E 05 F1 | 	add	fp, #32
0fd48     A7 20 02 FB | 	rdlong	local02, fp
0fd4c     18 4E 85 F1 | 	sub	fp, #24
0fd50     A7 16 02 FB | 	rdlong	arg03, fp
0fd54     08 4E 85 F1 | 	sub	fp, #8
0fd58     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0fd5c     14 00 90 1D |  if_a	jmp	#LR__1263
0fd60     38 4E 05 F1 | 	add	fp, #56
0fd64     A7 12 02 F6 | 	mov	arg01, fp
0fd68     38 4E 85 F1 | 	sub	fp, #56
0fd6c                 | ' 
0fd6c                 | ' write(text)
0fd6c     78 F8 B0 FD | 	call	#_hg010b_spin2_write
0fd70                 | ' crlf
0fd70     74 FD B0 FD | 	call	#_hg010b_spin2_crlf
0fd74                 | LR__1263
0fd74     34 4E 05 F1 | 	add	fp, #52
0fd78     A7 20 02 FB | 	rdlong	local02, fp
0fd7c     34 4E 85 F1 | 	sub	fp, #52
0fd80     52 00 00 FF 
0fd84     0C E4 05 F1 | 	add	objptr, ##41996
0fd88     F2 20 62 FC | 	wrlong	local02, objptr
0fd8c     52 00 00 FF 
0fd90     0C E4 85 F1 | 	sub	objptr, ##41996
0fd94                 | LR__1264
0fd94     34 4E 05 F1 | 	add	fp, #52
0fd98     A7 20 02 FB | 	rdlong	local02, fp
0fd9c     34 4E 85 F1 | 	sub	fp, #52
0fda0     FF FF 3F FF 
0fda4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0fda8     20 4E 05 51 |  if_ne	add	fp, #32
0fdac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fdb0     20 4E 85 51 |  if_ne	sub	fp, #32
0fdb4     FF FF 7F 5F 
0fdb8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0fdbc     E4 FE 9F 5D |  if_ne	jmp	#LR__1262
0fdc0     A7 F0 03 F6 | 	mov	ptra, fp
0fdc4     B2 00 A0 FD | 	call	#popregs_
0fdc8                 | _do_list_ret
0fdc8     2D 00 64 FD | 	ret
0fdcc                 | 
0fdcc                 | ' 
0fdcc                 | ' '---------------- Clear the program
0fdcc                 | ' 
0fdcc                 | ' sub do_new
0fdcc                 | _do_new
0fdcc     03 4A 05 F6 | 	mov	COUNT_, #3
0fdd0     A8 00 A0 FD | 	call	#pushregs_
0fdd4     13 12 C6 F9 | 	decod	arg01, #19
0fdd8     01 14 66 F6 | 	neg	arg02, #1
0fddc     F0 D8 B0 FD | 	call	#_pslpoke
0fde0     35 00 00 FF 
0fde4     08 E4 05 F1 | 	add	objptr, ##27144
0fde8     F2 00 68 FC | 	wrlong	#0, objptr
0fdec                 | ' 
0fdec                 | ' pslpoke(memlo,$FFFFFFFF)
0fdec                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0fdec     00 1E 06 F6 | 	mov	local01, #0
0fdf0     20 00 00 FF 
0fdf4     10 E4 85 F1 | 	sub	objptr, ##16400
0fdf8     97 1E 48 FB | 	callpa	#(@LR__1271-@LR__1270)>>2,fcache_load_ptr_
0fdfc                 | LR__1270
0fdfc     0F 17 02 F6 | 	mov	arg03, local01
0fe00     04 16 66 F0 | 	shl	arg03, #4
0fe04     F2 16 02 F1 | 	add	arg03, objptr
0fe08     85 01 00 FF 
0fe0c     91 14 06 F6 | 	mov	arg02, ##@LR__5470
0fe10     0B 15 62 FC | 	wrlong	arg02, arg03
0fe14     0F 21 02 F6 | 	mov	local02, local01
0fe18     04 20 66 F0 | 	shl	local02, #4
0fe1c     F2 20 02 F1 | 	add	local02, objptr
0fe20     0C 20 06 F1 | 	add	local02, #12
0fe24     10 01 68 FC | 	wrlong	#0, local02
0fe28     01 1E 06 F1 | 	add	local01, #1
0fe2c     02 00 00 FF 
0fe30     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0fe34     C4 FF 9F CD |  if_b	jmp	#LR__1270
0fe38                 | LR__1271
0fe38     35 00 00 FF 
0fe3c     8C E4 05 F1 | 	add	objptr, ##27276
0fe40     00 04 80 FF 
0fe44     F2 00 68 FC | 	wrlong	##524288, objptr
0fe48     06 00 00 FF 
0fe4c     30 E4 05 F1 | 	add	objptr, ##3120
0fe50     00 04 80 FF 
0fe54     F2 00 68 FC | 	wrlong	##524288, objptr
0fe58     04 E4 05 F1 | 	add	objptr, #4
0fe5c     00 04 80 FF 
0fe60     F2 00 68 FC | 	wrlong	##524288, objptr
0fe64     0D 00 00 FF 
0fe68     60 E4 85 F1 | 	sub	objptr, ##6752
0fe6c     F2 00 68 FC | 	wrlong	#0, objptr
0fe70     07 00 00 FF 
0fe74     24 E4 05 F1 | 	add	objptr, ##3620
0fe78     F2 00 68 FC | 	wrlong	#0, objptr
0fe7c     07 00 00 FF 
0fe80     20 E4 85 F1 | 	sub	objptr, ##3616
0fe84     00 04 80 FF 
0fe88     F2 00 68 FC | 	wrlong	##524288, objptr
0fe8c     07 00 00 FF 
0fe90     2C E4 05 F1 | 	add	objptr, ##3628
0fe94     F2 00 68 FC | 	wrlong	#0, objptr
0fe98     04 E4 05 F1 | 	add	objptr, #4
0fe9c     FF FF FF FF 
0fea0     F2 FE 6B FC | 	wrlong	##-1, objptr
0fea4     06 00 00 FF 
0fea8     78 E4 05 F1 | 	add	objptr, ##3192
0feac     F2 00 68 FC | 	wrlong	#0, objptr
0feb0     04 E4 05 F1 | 	add	objptr, #4
0feb4     F2 00 68 FC | 	wrlong	#0, objptr
0feb8                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0feb8                 | ' stackpointer=0
0feb8                 | ' lineptr=0 
0feb8                 | ' programptr=memlo ': stringptr=0
0feb8                 | ' 
0feb8                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0feb8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0feb8     00 1E 06 F6 | 	mov	local01, #0
0febc     06 00 00 FF 
0fec0     74 E4 85 F1 | 	sub	objptr, ##3188
0fec4     97 16 48 FB | 	callpa	#(@LR__1273-@LR__1272)>>2,fcache_load_ptr_
0fec8                 | LR__1272
0fec8     0F 21 02 F6 | 	mov	local02, local01
0fecc     02 20 66 F0 | 	shl	local02, #2
0fed0     0F 21 02 F1 | 	add	local02, local01
0fed4     02 20 66 F0 | 	shl	local02, #2
0fed8     F2 20 02 F1 | 	add	local02, objptr
0fedc     08 20 06 F1 | 	add	local02, #8
0fee0     FF FF FF FF 
0fee4     10 FF 6B FC | 	wrlong	##-1, local02
0fee8     01 1E 06 F1 | 	add	local01, #1
0feec     41 1E 56 F2 | 	cmps	local01, #65 wc
0fef0     D4 FF 9F CD |  if_b	jmp	#LR__1272
0fef4                 | LR__1273
0fef4     4A 00 00 FF 
0fef8     94 E4 85 F1 | 	sub	objptr, ##38036
0fefc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0fefc     00 1E 06 F6 | 	mov	local01, #0
0ff00                 | LR__1274
0ff00     0F 21 02 F6 | 	mov	local02, local01
0ff04     02 20 66 F0 | 	shl	local02, #2
0ff08     51 00 00 FF 
0ff0c     64 E5 05 F1 | 	add	objptr, ##41828
0ff10     F2 20 02 F1 | 	add	local02, objptr
0ff14     10 23 0A FB | 	rdlong	local03, local02 wz
0ff18     51 00 00 FF 
0ff1c     64 E5 85 F1 | 	sub	objptr, ##41828
0ff20     34 00 90 AD |  if_e	jmp	#LR__1275
0ff24     0F 13 02 F6 | 	mov	arg01, local01
0ff28     00 14 06 F6 | 	mov	arg02, #0
0ff2c     00 16 06 F6 | 	mov	arg03, #0
0ff30     D4 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ff34     0F 21 02 F6 | 	mov	local02, local01
0ff38     02 20 66 F0 | 	shl	local02, #2
0ff3c     51 00 00 FF 
0ff40     64 E5 05 F1 | 	add	objptr, ##41828
0ff44     F2 20 02 F1 | 	add	local02, objptr
0ff48     10 13 02 FB | 	rdlong	arg01, local02
0ff4c     51 00 00 FF 
0ff50     64 E5 85 F1 | 	sub	objptr, ##41828
0ff54     C4 4B B1 FD | 	call	#__system___gc_free
0ff58                 | LR__1275
0ff58     01 1E 06 F1 | 	add	local01, #1
0ff5c     10 1E 56 F2 | 	cmps	local01, #16 wc
0ff60     9C FF 9F CD |  if_b	jmp	#LR__1274
0ff64     51 00 00 FF 
0ff68     B8 E5 05 F1 | 	add	objptr, ##41912
0ff6c     00 C0 9F FF 
0ff70     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff74     04 E4 05 F1 | 	add	objptr, #4
0ff78     00 C0 9F FF 
0ff7c     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff80     51 00 00 FF 
0ff84     B8 E5 85 F1 | 	sub	objptr, ##41912
0ff88     F2 22 02 FB | 	rdlong	local03, objptr
0ff8c     51 00 00 FF 
0ff90     A4 E5 05 F1 | 	add	objptr, ##41892
0ff94     F2 22 62 FC | 	wrlong	local03, objptr
0ff98     51 00 00 FF 
0ff9c     A8 E5 85 F1 | 	sub	objptr, ##41896
0ffa0     11 12 06 F6 | 	mov	arg01, #17
0ffa4     08 14 06 F6 | 	mov	arg02, #8
0ffa8     10 16 06 F6 | 	mov	arg03, #16
0ffac     58 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ffb0     10 12 06 F6 | 	mov	arg01, #16
0ffb4     20 14 06 F6 | 	mov	arg02, #32
0ffb8     20 16 06 F6 | 	mov	arg03, #32
0ffbc     48 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ffc0     85 01 00 FF 
0ffc4     92 22 06 F6 | 	mov	local03, ##@LR__5471
0ffc8     51 00 00 FF 
0ffcc     D4 E5 05 F1 | 	add	objptr, ##41940
0ffd0     F2 22 62 FC | 	wrlong	local03, objptr
0ffd4     51 00 00 FF 
0ffd8     D4 E5 85 F1 | 	sub	objptr, ##41940
0ffdc     2C C9 B0 FD | 	call	#_init_audio
0ffe0     A7 F0 03 F6 | 	mov	ptra, fp
0ffe4     B2 00 A0 FD | 	call	#popregs_
0ffe8                 | _do_new_ret
0ffe8     2D 00 64 FD | 	ret
0ffec                 | 
0ffec                 | ' 
0ffec                 | ' '----------------------- goto
0ffec                 | ' sub do_fast_goto
0ffec                 | _do_fast_goto
0ffec     02 4A 05 F6 | 	mov	COUNT_, #2
0fff0     A8 00 A0 FD | 	call	#pushregs_
0fff4                 | _do_fast_goto_enter
0fff4     4A 00 00 FF 
0fff8     80 E4 05 F1 | 	add	objptr, ##38016
0fffc     F2 12 02 FB | 	rdlong	arg01, objptr
10000     09 1F 02 F6 | 	mov	local01, arg01
10004     01 1E 66 F0 | 	shl	local01, #1
10008     09 1F 02 F1 | 	add	local01, arg01
1000c     02 1E 66 F0 | 	shl	local01, #2
10010     03 00 00 FF 
10014     04 E4 85 F1 | 	sub	objptr, ##1540
10018     F2 1E 02 F1 | 	add	local01, objptr
1001c     0F 21 02 FB | 	rdlong	local02, local01
10020     10 13 02 F6 | 	mov	arg01, local02
10024     47 00 00 FF 
10028     7C E4 85 F1 | 	sub	objptr, ##36476
1002c     D0 D7 B0 FD | 	call	#_pslpeek
10030     FD 12 02 F6 | 	mov	arg01, result1
10034                 | ' 
10034                 | ' testptr=compiledline(lineptr_e).result.uresult
10034                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
10034                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
10034     4A 00 00 FF 
10038     80 E4 05 F1 | 	add	objptr, ##38016
1003c     F2 FA 01 FB | 	rdlong	result1, objptr
10040     FD 1E 02 F6 | 	mov	local01, result1
10044     01 1E 66 F0 | 	shl	local01, #1
10048     FD 1E 02 F1 | 	add	local01, result1
1004c     02 1E 66 F0 | 	shl	local01, #2
10050     03 00 00 FF 
10054     04 E4 85 F1 | 	sub	objptr, ##1540
10058     F2 1E 02 F1 | 	add	local01, objptr
1005c     04 1E 06 F1 | 	add	local01, #4
10060     0F 1F 02 FB | 	rdlong	local01, local01
10064     0F 13 0A F2 | 	cmp	arg01, local01 wz
10068     47 00 00 FF 
1006c     7C E4 85 F1 | 	sub	objptr, ##36476
10070     58 00 90 5D |  if_ne	jmp	#LR__1280
10074     50 00 00 FF 
10078     B4 E4 05 F1 | 	add	objptr, ##41140
1007c     F2 20 62 FC | 	wrlong	local02, objptr
10080     06 00 00 FF 
10084     38 E4 85 F1 | 	sub	objptr, ##3128
10088     F2 20 02 FB | 	rdlong	local02, objptr
1008c     01 20 86 F1 | 	sub	local02, #1
10090     04 E4 05 F1 | 	add	objptr, #4
10094     F2 20 62 FC | 	wrlong	local02, objptr
10098                 | '   runptr=testptr
10098                 | '   lineptr_e=lineptr-1
10098                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
10098     06 00 00 FF 
1009c     80 E4 05 F1 | 	add	objptr, ##3200
100a0     F2 20 02 FB | 	rdlong	local02, objptr
100a4     50 00 00 FF 
100a8     00 E5 85 F1 | 	sub	objptr, ##41216
100ac     FF FF 3F FF 
100b0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
100b4     50 00 00 AF 
100b8     00 E5 05 A1 |  if_e	add	objptr, ##41216
100bc     F2 00 68 AC |  if_e	wrlong	#0, objptr
100c0     50 00 00 AF 
100c4     00 E5 85 A1 |  if_e	sub	objptr, ##41216
100c8     04 00 90 FD | 	jmp	#LR__1281
100cc                 | LR__1280
100cc     84 0E B0 FD | 	call	#_do_find_goto
100d0                 | LR__1281
100d0     A7 F0 03 F6 | 	mov	ptra, fp
100d4     B2 00 A0 FD | 	call	#popregs_
100d8                 | _do_fast_goto_ret
100d8     2D 00 64 FD | 	ret
100dc                 | 
100dc                 | ' 
100dc                 | ' sub do_open
100dc                 | _do_open
100dc     02 4A 05 F6 | 	mov	COUNT_, #2
100e0     A8 00 A0 FD | 	call	#pushregs_
100e4     20 F0 07 F1 | 	add	ptra, #32
100e8     4A 00 00 FF 
100ec     80 E4 05 F1 | 	add	objptr, ##38016
100f0     F2 16 02 FB | 	rdlong	arg03, objptr
100f4     0B 15 02 F6 | 	mov	arg02, arg03
100f8     01 14 66 F0 | 	shl	arg02, #1
100fc     0B 15 02 F1 | 	add	arg02, arg03
10100     02 14 66 F0 | 	shl	arg02, #2
10104     03 00 00 FF 
10108     04 E4 85 F1 | 	sub	objptr, ##1540
1010c     F2 14 02 F1 | 	add	arg02, objptr
10110     0A 17 02 FB | 	rdlong	arg03, arg02
10114     10 4E 05 F1 | 	add	fp, #16
10118     A7 16 62 FC | 	wrlong	arg03, fp
1011c     10 4E 85 F1 | 	sub	fp, #16
10120     47 00 00 FF 
10124     7C E4 85 F1 | 	sub	objptr, ##36476
10128     F8 B0 BF FD | 	call	#_pop
1012c     FF 16 02 F6 | 	mov	arg03, result3
10130     A7 FA 61 FC | 	wrlong	result1, fp
10134     04 4E 05 F1 | 	add	fp, #4
10138     A7 FC 61 FC | 	wrlong	result2, fp
1013c     04 4E 05 F1 | 	add	fp, #4
10140     A7 16 62 FC | 	wrlong	arg03, fp
10144                 | ' 
10144                 | ' numpar=compiledline(lineptr_e).result.uresult
10144                 | ' 
10144                 | ' t1=pop()
10144                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10144     08 4E 85 F1 | 	sub	fp, #8
10148     2B 16 0E F2 | 	cmp	arg03, #43 wz
1014c     18 00 90 5D |  if_ne	jmp	#LR__1290
10150     A7 12 02 FB | 	rdlong	arg01, fp
10154     74 12 B0 FD | 	call	#_convertstring
10158     A7 FA 61 FC | 	wrlong	result1, fp
1015c     08 4E 05 F1 | 	add	fp, #8
10160     A7 3E 68 FC | 	wrlong	#31, fp
10164     08 4E 85 F1 | 	sub	fp, #8
10168                 | LR__1290
10168                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
10168     08 4E 05 F1 | 	add	fp, #8
1016c     A7 16 02 FB | 	rdlong	arg03, fp
10170     08 4E 85 F1 | 	sub	fp, #8
10174     1F 16 0E F2 | 	cmp	arg03, #31 wz
10178     44 00 90 AD |  if_e	jmp	#LR__1291
1017c     00 12 06 F6 | 	mov	arg01, #0
10180     E4 63 B1 FD | 	call	#__system___getiolock_0540
10184     FD 12 02 F6 | 	mov	arg01, result1
10188     78 09 B1 FD | 	call	#__system___lockmem
1018c     85 01 00 FF 
10190     9D 14 06 F6 | 	mov	arg02, ##@LR__5472
10194     00 12 06 F6 | 	mov	arg01, #0
10198     00 16 06 F6 | 	mov	arg03, #0
1019c     58 16 B1 FD | 	call	#__system___basic_print_string
101a0     00 12 06 F6 | 	mov	arg01, #0
101a4     0A 14 06 F6 | 	mov	arg02, #10
101a8     00 16 06 F6 | 	mov	arg03, #0
101ac     F0 15 B1 FD | 	call	#__system___basic_print_char
101b0     00 12 06 F6 | 	mov	arg01, #0
101b4     B0 63 B1 FD | 	call	#__system___getiolock_0540
101b8     FD 00 68 FC | 	wrlong	#0, result1
101bc     28 02 90 FD | 	jmp	#LR__1302
101c0                 | LR__1291
101c0     A7 16 02 FB | 	rdlong	arg03, fp
101c4     0C 4E 05 F1 | 	add	fp, #12
101c8     A7 16 62 FC | 	wrlong	arg03, fp
101cc     0C 4E 85 F1 | 	sub	fp, #12
101d0     50 B0 BF FD | 	call	#_pop
101d4     FF 16 02 F6 | 	mov	arg03, result3
101d8     A7 FA 61 FC | 	wrlong	result1, fp
101dc     04 4E 05 F1 | 	add	fp, #4
101e0     A7 FC 61 FC | 	wrlong	result2, fp
101e4     04 4E 05 F1 | 	add	fp, #4
101e8     A7 16 62 FC | 	wrlong	arg03, fp
101ec                 | ' filename=t1.result.sresult
101ec                 | ' t1=pop()
101ec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
101ec     08 4E 85 F1 | 	sub	fp, #8
101f0     2B 16 0E F2 | 	cmp	arg03, #43 wz
101f4     18 00 90 5D |  if_ne	jmp	#LR__1292
101f8     A7 12 02 FB | 	rdlong	arg01, fp
101fc     CC 11 B0 FD | 	call	#_convertstring
10200     A7 FA 61 FC | 	wrlong	result1, fp
10204     08 4E 05 F1 | 	add	fp, #8
10208     A7 3E 68 FC | 	wrlong	#31, fp
1020c     08 4E 85 F1 | 	sub	fp, #8
10210                 | LR__1292
10210     14 4E 05 F1 | 	add	fp, #20
10214     A7 00 68 FC | 	wrlong	#0, fp
10218                 | ' mode=0
10218                 | ' if t1.result_type=result_string then
10218     0C 4E 85 F1 | 	sub	fp, #12
1021c     A7 14 02 FB | 	rdlong	arg02, fp
10220     08 4E 85 F1 | 	sub	fp, #8
10224     1F 14 0E F2 | 	cmp	arg02, #31 wz
10228     64 00 90 5D |  if_ne	jmp	#LR__1293
1022c                 | '   if t1.result.sresult="read" then mode=1
1022c     A7 12 02 FB | 	rdlong	arg01, fp
10230     85 01 00 FF 
10234     AF 14 06 F6 | 	mov	arg02, ##@LR__5473
10238     F0 08 B1 FD | 	call	#__system___string_cmp
1023c     00 FA 0D F2 | 	cmp	result1, #0 wz
10240     14 4E 05 A1 |  if_e	add	fp, #20
10244     A7 02 68 AC |  if_e	wrlong	#1, fp
10248     14 4E 85 A1 |  if_e	sub	fp, #20
1024c                 | '   if t1.result.sresult="write" then mode=2
1024c     A7 12 02 FB | 	rdlong	arg01, fp
10250     85 01 00 FF 
10254     B4 14 06 F6 | 	mov	arg02, ##@LR__5474
10258     D0 08 B1 FD | 	call	#__system___string_cmp
1025c     00 FA 0D F2 | 	cmp	result1, #0 wz
10260     14 4E 05 A1 |  if_e	add	fp, #20
10264     A7 04 68 AC |  if_e	wrlong	#2, fp
10268     14 4E 85 A1 |  if_e	sub	fp, #20
1026c                 | '   if t1.result.sresult="append" then mode=4
1026c     A7 12 02 FB | 	rdlong	arg01, fp
10270     85 01 00 FF 
10274     BA 14 06 F6 | 	mov	arg02, ##@LR__5475
10278     B0 08 B1 FD | 	call	#__system___string_cmp
1027c     00 FA 0D F2 | 	cmp	result1, #0 wz
10280     14 4E 05 A1 |  if_e	add	fp, #20
10284     A7 08 68 AC |  if_e	wrlong	#4, fp
10288     14 4E 85 A1 |  if_e	sub	fp, #20
1028c     14 00 90 FD | 	jmp	#LR__1294
10290                 | LR__1293
10290     A7 12 02 F6 | 	mov	arg01, fp
10294     58 59 B0 FD | 	call	#_converttoint
10298     14 4E 05 F1 | 	add	fp, #20
1029c     A7 FA 61 FC | 	wrlong	result1, fp
102a0     14 4E 85 F1 | 	sub	fp, #20
102a4                 | LR__1294
102a4     7C AF BF FD | 	call	#_pop
102a8     FF 16 02 F6 | 	mov	arg03, result3
102ac     A7 FA 61 FC | 	wrlong	result1, fp
102b0     04 4E 05 F1 | 	add	fp, #4
102b4     A7 FC 61 FC | 	wrlong	result2, fp
102b8     04 4E 05 F1 | 	add	fp, #4
102bc     A7 16 62 FC | 	wrlong	arg03, fp
102c0                 | ' t1=pop()
102c0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
102c0     08 4E 85 F1 | 	sub	fp, #8
102c4     2C 16 0E F2 | 	cmp	arg03, #44 wz
102c8     44 00 90 AD |  if_e	jmp	#LR__1295
102cc     00 12 06 F6 | 	mov	arg01, #0
102d0     94 62 B1 FD | 	call	#__system___getiolock_0540
102d4     FD 12 02 F6 | 	mov	arg01, result1
102d8     28 08 B1 FD | 	call	#__system___lockmem
102dc     85 01 00 FF 
102e0     C1 14 06 F6 | 	mov	arg02, ##@LR__5476
102e4     00 12 06 F6 | 	mov	arg01, #0
102e8     00 16 06 F6 | 	mov	arg03, #0
102ec     08 15 B1 FD | 	call	#__system___basic_print_string
102f0     00 12 06 F6 | 	mov	arg01, #0
102f4     0A 14 06 F6 | 	mov	arg02, #10
102f8     00 16 06 F6 | 	mov	arg03, #0
102fc     A0 14 B1 FD | 	call	#__system___basic_print_char
10300     00 12 06 F6 | 	mov	arg01, #0
10304     60 62 B1 FD | 	call	#__system___getiolock_0540
10308     FD 00 68 FC | 	wrlong	#0, result1
1030c     D8 00 90 FD | 	jmp	#LR__1302
10310                 | LR__1295
10310     A7 1E 02 FB | 	rdlong	local01, fp
10314     18 4E 05 F1 | 	add	fp, #24
10318     A7 1E 62 FC | 	wrlong	local01, fp
1031c                 | ' channel  = t1.result.iresult
1031c                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
1031c                 | ' select case  mode
1031c     04 4E 85 F1 | 	sub	fp, #4
10320     A7 20 02 FB | 	rdlong	local02, fp
10324     14 4E 85 F1 | 	sub	fp, #20
10328     01 20 86 F1 | 	sub	local02, #1
1032c     04 20 26 F3 | 	fle	local02, #4
10330     30 20 62 FD | 	jmprel	local02
10334                 | LR__1296
10334     10 00 90 FD | 	jmp	#LR__1297
10338     2C 00 90 FD | 	jmp	#LR__1298
1033c     68 00 90 FD | 	jmp	#LR__1300
10340     44 00 90 FD | 	jmp	#LR__1299
10344     60 00 90 FD | 	jmp	#LR__1300
10348                 | LR__1297
10348     18 4E 05 F1 | 	add	fp, #24
1034c     A7 12 02 FB | 	rdlong	arg01, fp
10350     0C 4E 85 F1 | 	sub	fp, #12
10354     A7 14 02 FB | 	rdlong	arg02, fp
10358     0C 4E 85 F1 | 	sub	fp, #12
1035c     00 16 06 F6 | 	mov	arg03, #0
10360     A4 13 B1 FD | 	call	#__system___basic_open_string
10364     80 00 90 FD | 	jmp	#LR__1301
10368                 | LR__1298
10368     18 4E 05 F1 | 	add	fp, #24
1036c     A7 12 02 FB | 	rdlong	arg01, fp
10370     0C 4E 85 F1 | 	sub	fp, #12
10374     A7 14 02 FB | 	rdlong	arg02, fp
10378     0C 4E 85 F1 | 	sub	fp, #12
1037c     0D 16 06 F6 | 	mov	arg03, #13
10380     84 13 B1 FD | 	call	#__system___basic_open_string
10384     60 00 90 FD | 	jmp	#LR__1301
10388                 | LR__1299
10388     18 4E 05 F1 | 	add	fp, #24
1038c     A7 12 02 FB | 	rdlong	arg01, fp
10390     0C 4E 85 F1 | 	sub	fp, #12
10394     A7 14 02 FB | 	rdlong	arg02, fp
10398     0C 4E 85 F1 | 	sub	fp, #12
1039c     25 16 06 F6 | 	mov	arg03, #37
103a0     64 13 B1 FD | 	call	#__system___basic_open_string
103a4     40 00 90 FD | 	jmp	#LR__1301
103a8                 | LR__1300
103a8     00 12 06 F6 | 	mov	arg01, #0
103ac     B8 61 B1 FD | 	call	#__system___getiolock_0540
103b0     FD 12 02 F6 | 	mov	arg01, result1
103b4     4C 07 B1 FD | 	call	#__system___lockmem
103b8     85 01 00 FF 
103bc     D3 14 06 F6 | 	mov	arg02, ##@LR__5477
103c0     00 12 06 F6 | 	mov	arg01, #0
103c4     00 16 06 F6 | 	mov	arg03, #0
103c8     2C 14 B1 FD | 	call	#__system___basic_print_string
103cc     00 12 06 F6 | 	mov	arg01, #0
103d0     0A 14 06 F6 | 	mov	arg02, #10
103d4     00 16 06 F6 | 	mov	arg03, #0
103d8     C4 13 B1 FD | 	call	#__system___basic_print_char
103dc     00 12 06 F6 | 	mov	arg01, #0
103e0     84 61 B1 FD | 	call	#__system___getiolock_0540
103e4     FD 00 68 FC | 	wrlong	#0, result1
103e8                 | LR__1301
103e8                 | LR__1302
103e8     A7 F0 03 F6 | 	mov	ptra, fp
103ec     B2 00 A0 FD | 	call	#popregs_
103f0                 | _do_open_ret
103f0     2D 00 64 FD | 	ret
103f4                 | 
103f4                 | ' 
103f4                 | ' 
103f4                 | ' sub do_close
103f4                 | _do_close
103f4     03 4A 05 F6 | 	mov	COUNT_, #3
103f8     A8 00 A0 FD | 	call	#pushregs_
103fc     24 AE BF FD | 	call	#_pop
10400     FD 1E 02 F6 | 	mov	local01, result1
10404     FF 16 02 F6 | 	mov	arg03, result3
10408     FE 20 02 F6 | 	mov	local02, result2
1040c     0B 23 02 F6 | 	mov	local03, arg03
10410                 | ' numpar=compiledline(lineptr_e).result.uresult
10410                 | ' 
10410                 | ' t1=pop()
10410                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10410     2C 22 0E F2 | 	cmp	local03, #44 wz
10414     44 00 90 AD |  if_e	jmp	#LR__1310
10418     00 12 06 F6 | 	mov	arg01, #0
1041c     48 61 B1 FD | 	call	#__system___getiolock_0540
10420     FD 12 02 F6 | 	mov	arg01, result1
10424     DC 06 B1 FD | 	call	#__system___lockmem
10428     85 01 00 FF 
1042c     E6 14 06 F6 | 	mov	arg02, ##@LR__5478
10430     00 12 06 F6 | 	mov	arg01, #0
10434     00 16 06 F6 | 	mov	arg03, #0
10438     BC 13 B1 FD | 	call	#__system___basic_print_string
1043c     00 12 06 F6 | 	mov	arg01, #0
10440     0A 14 06 F6 | 	mov	arg02, #10
10444     00 16 06 F6 | 	mov	arg03, #0
10448     54 13 B1 FD | 	call	#__system___basic_print_char
1044c     00 12 06 F6 | 	mov	arg01, #0
10450     14 61 B1 FD | 	call	#__system___getiolock_0540
10454     FD 00 68 FC | 	wrlong	#0, result1
10458     08 00 90 FD | 	jmp	#LR__1311
1045c                 | LR__1310
1045c                 | ' channel  = t1.result.iresult
1045c                 | ' close #channel
1045c     0F 13 02 F6 | 	mov	arg01, local01
10460     34 57 B1 FD | 	call	#__system__close
10464                 | LR__1311
10464     A7 F0 03 F6 | 	mov	ptra, fp
10468     B2 00 A0 FD | 	call	#popregs_
1046c                 | _do_close_ret
1046c     2D 00 64 FD | 	ret
10470                 | 
10470                 | ' 
10470                 | ' sub  do_get
10470                 | _do_get
10470     09 4A 05 F6 | 	mov	COUNT_, #9
10474     A8 00 A0 FD | 	call	#pushregs_
10478     40 F0 07 F1 | 	add	ptra, #64
1047c     4A 00 00 FF 
10480     80 E4 05 F1 | 	add	objptr, ##38016
10484     F2 1A 02 FB | 	rdlong	arg05, objptr
10488     0D 19 02 F6 | 	mov	arg04, arg05
1048c     01 18 66 F0 | 	shl	arg04, #1
10490     0D 19 02 F1 | 	add	arg04, arg05
10494     02 18 66 F0 | 	shl	arg04, #2
10498     03 00 00 FF 
1049c     04 E4 85 F1 | 	sub	objptr, ##1540
104a0     F2 18 02 F1 | 	add	arg04, objptr
104a4     0C 1B 02 FB | 	rdlong	arg05, arg04
104a8     A7 1A 62 FC | 	wrlong	arg05, fp
104ac                 | ' numpar=compiledline(lineptr_e).result.uresult
104ac                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
104ac     04 1A 0E F2 | 	cmp	arg05, #4 wz
104b0     47 00 00 FF 
104b4     7C E4 85 F1 | 	sub	objptr, ##36476
104b8     48 00 90 5D |  if_ne	jmp	#LR__1320
104bc     64 AD BF FD | 	call	#_pop
104c0     FF 1A 02 F6 | 	mov	arg05, result3
104c4     1C 4E 05 F1 | 	add	fp, #28
104c8     A7 FA 61 FC | 	wrlong	result1, fp
104cc     04 4E 05 F1 | 	add	fp, #4
104d0     A7 FC 61 FC | 	wrlong	result2, fp
104d4     04 4E 05 F1 | 	add	fp, #4
104d8     A7 1A 62 FC | 	wrlong	arg05, fp
104dc     08 4E 85 F1 | 	sub	fp, #8
104e0     A7 12 02 F6 | 	mov	arg01, fp
104e4     1C 4E 85 F1 | 	sub	fp, #28
104e8     04 57 B0 FD | 	call	#_converttoint
104ec     52 00 00 FF 
104f0     10 E4 05 F1 | 	add	objptr, ##42000
104f4     F2 FA 61 FC | 	wrlong	result1, objptr
104f8     52 00 00 FF 
104fc     10 E4 85 F1 | 	sub	objptr, ##42000
10500     18 00 90 FD | 	jmp	#LR__1321
10504                 | LR__1320
10504     52 00 00 FF 
10508     10 E4 05 F1 | 	add	objptr, ##42000
1050c     FF FF FF FF 
10510     F2 FE 6B FC | 	wrlong	##-1, objptr
10514     52 00 00 FF 
10518     10 E4 85 F1 | 	sub	objptr, ##42000
1051c                 | LR__1321
1051c                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
1051c     A7 16 02 FB | 	rdlong	arg03, fp
10520     03 16 56 F2 | 	cmps	arg03, #3 wc
10524     40 00 90 CD |  if_b	jmp	#LR__1322
10528     F8 AC BF FD | 	call	#_pop
1052c     FF 16 02 F6 | 	mov	arg03, result3
10530     1C 4E 05 F1 | 	add	fp, #28
10534     A7 FA 61 FC | 	wrlong	result1, fp
10538     04 4E 05 F1 | 	add	fp, #4
1053c     A7 FC 61 FC | 	wrlong	result2, fp
10540     04 4E 05 F1 | 	add	fp, #4
10544     A7 16 62 FC | 	wrlong	arg03, fp
10548     08 4E 85 F1 | 	sub	fp, #8
1054c     A7 12 02 F6 | 	mov	arg01, fp
10550     1C 4E 85 F1 | 	sub	fp, #28
10554     98 56 B0 FD | 	call	#_converttoint
10558     08 4E 05 F1 | 	add	fp, #8
1055c     A7 FA 61 FC | 	wrlong	result1, fp
10560     08 4E 85 F1 | 	sub	fp, #8
10564     0C 00 90 FD | 	jmp	#LR__1323
10568                 | LR__1322
10568     08 4E 05 F1 | 	add	fp, #8
1056c     A7 02 68 FC | 	wrlong	#1, fp
10570     08 4E 85 F1 | 	sub	fp, #8
10574                 | LR__1323
10574                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10574     A7 16 02 FB | 	rdlong	arg03, fp
10578     02 16 56 F2 | 	cmps	arg03, #2 wc
1057c     3C 00 90 CD |  if_b	jmp	#LR__1324
10580     A0 AC BF FD | 	call	#_pop
10584     FF 16 02 F6 | 	mov	arg03, result3
10588     1C 4E 05 F1 | 	add	fp, #28
1058c     A7 FA 61 FC | 	wrlong	result1, fp
10590     04 4E 05 F1 | 	add	fp, #4
10594     A7 FC 61 FC | 	wrlong	result2, fp
10598     04 4E 05 F1 | 	add	fp, #4
1059c     A7 16 62 FC | 	wrlong	arg03, fp
105a0     08 4E 85 F1 | 	sub	fp, #8
105a4     A7 12 02 F6 | 	mov	arg01, fp
105a8     1C 4E 85 F1 | 	sub	fp, #28
105ac     40 56 B0 FD | 	call	#_converttoint
105b0     0C 4E 05 F1 | 	add	fp, #12
105b4     A7 FA 61 FC | 	wrlong	result1, fp
105b8     0C 4E 85 F1 | 	sub	fp, #12
105bc                 | LR__1324
105bc     64 AC BF FD | 	call	#_pop
105c0     FF 16 02 F6 | 	mov	arg03, result3
105c4     1C 4E 05 F1 | 	add	fp, #28
105c8     A7 FA 61 FC | 	wrlong	result1, fp
105cc     04 4E 05 F1 | 	add	fp, #4
105d0     A7 FC 61 FC | 	wrlong	result2, fp
105d4     04 4E 05 F1 | 	add	fp, #4
105d8     A7 16 62 FC | 	wrlong	arg03, fp
105dc     08 4E 85 F1 | 	sub	fp, #8
105e0     A7 12 02 F6 | 	mov	arg01, fp
105e4     1C 4E 85 F1 | 	sub	fp, #28
105e8     04 56 B0 FD | 	call	#_converttoint
105ec     04 4E 05 F1 | 	add	fp, #4
105f0     A7 FA 61 FC | 	wrlong	result1, fp
105f4     10 4E 05 F1 | 	add	fp, #16
105f8     A7 16 02 FB | 	rdlong	arg03, fp
105fc     14 4E 85 F1 | 	sub	fp, #20
10600     02 16 66 F0 | 	shl	arg03, #2
10604     50 00 00 FF 
10608     C0 E4 05 F1 | 	add	objptr, ##41152
1060c     F2 1E 02 F6 | 	mov	local01, objptr
10610     F2 16 02 F1 | 	add	arg03, objptr
10614     0B 01 68 FC | 	wrlong	#0, arg03
10618                 | ' t1=pop() : channel=converttoint(t1)
10618                 | ' 
10618                 | ' getres(j)=0
10618                 | ' if pos>=0 then
10618     01 00 00 FF 
1061c     50 E5 05 F1 | 	add	objptr, ##848
10620     F2 20 02 FB | 	rdlong	local02, objptr
10624     52 00 00 FF 
10628     10 E4 85 F1 | 	sub	objptr, ##42000
1062c     00 20 56 F2 | 	cmps	local02, #0 wc
10630     F0 01 90 CD |  if_b	jmp	#LR__1331
10634                 | '   for i=0 to  amount/1024
10634     10 4E 05 F1 | 	add	fp, #16
10638     A7 00 68 FC | 	wrlong	#0, fp
1063c     08 4E 85 F1 | 	sub	fp, #8
10640     A7 22 02 FB | 	rdlong	local03, fp
10644     08 4E 85 F1 | 	sub	fp, #8
10648     11 25 52 F6 | 	abs	local04, local03 wc
1064c     0A 24 46 F0 | 	shr	local04, #10
10650     12 25 82 F6 | 	negc	local04, local04
10654     01 24 06 F1 | 	add	local04, #1
10658                 | LR__1325
10658     10 4E 05 F1 | 	add	fp, #16
1065c     A7 22 02 FB | 	rdlong	local03, fp
10660     10 4E 85 F1 | 	sub	fp, #16
10664     12 23 52 F2 | 	cmps	local03, local04 wc
10668     9C 03 90 3D |  if_ae	jmp	#LR__1339
1066c                 | '     get #channel,pos+1,block(0),amount,r
1066c     04 4E 05 F1 | 	add	fp, #4
10670     A7 12 02 FB | 	rdlong	arg01, fp
10674     52 00 00 FF 
10678     10 E4 05 F1 | 	add	objptr, ##42000
1067c     F2 14 02 FB | 	rdlong	arg02, objptr
10680     01 14 06 F1 | 	add	arg02, #1
10684     03 00 00 FF 
10688     60 E5 85 F1 | 	sub	objptr, ##1888
1068c     F2 16 02 F6 | 	mov	arg03, objptr
10690     4E 00 00 FF 
10694     B0 E4 85 F1 | 	sub	objptr, ##40112
10698     04 4E 05 F1 | 	add	fp, #4
1069c     A7 18 02 FB | 	rdlong	arg04, fp
106a0     08 4E 85 F1 | 	sub	fp, #8
106a4     01 1A 06 F6 | 	mov	arg05, #1
106a8     C8 12 B1 FD | 	call	#__system___basic_get
106ac     18 4E 05 F1 | 	add	fp, #24
106b0     A7 FA 61 FC | 	wrlong	result1, fp
106b4                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
106b4     0C 4E 85 F1 | 	sub	fp, #12
106b8     A7 20 02 FB | 	rdlong	local02, fp
106bc     0C 4E 85 F1 | 	sub	fp, #12
106c0     00 04 00 FF 
106c4     00 20 56 F2 | 	cmps	local02, ##524288 wc
106c8     7C 00 90 3D |  if_ae	jmp	#LR__1327
106cc     14 4E 05 F1 | 	add	fp, #20
106d0     A7 00 68 FC | 	wrlong	#0, fp
106d4     04 4E 05 F1 | 	add	fp, #4
106d8     A7 26 02 FB | 	rdlong	local05, fp
106dc     18 4E 85 F1 | 	sub	fp, #24
106e0                 | LR__1326
106e0     14 4E 05 F1 | 	add	fp, #20
106e4     A7 20 02 FB | 	rdlong	local02, fp
106e8     14 4E 85 F1 | 	sub	fp, #20
106ec     13 21 52 F2 | 	cmps	local02, local05 wc
106f0     D8 00 90 3D |  if_ae	jmp	#LR__1330
106f4     0C 4E 05 F1 | 	add	fp, #12
106f8     A7 12 02 FB | 	rdlong	arg01, fp
106fc     04 4E 05 F1 | 	add	fp, #4
10700     A7 22 02 FB | 	rdlong	local03, fp
10704     0A 22 66 F0 | 	shl	local03, #10
10708     11 13 02 F1 | 	add	arg01, local03
1070c     04 4E 05 F1 | 	add	fp, #4
10710     A7 22 02 FB | 	rdlong	local03, fp
10714     11 13 02 F1 | 	add	arg01, local03
10718     4E 00 00 FF 
1071c     B0 E4 05 F1 | 	add	objptr, ##40112
10720     F2 22 02 F1 | 	add	local03, objptr
10724     11 15 C2 FA | 	rdbyte	arg02, local03
10728     09 15 42 FC | 	wrbyte	arg02, arg01
1072c     4E 00 00 FF 
10730     B0 E4 85 F1 | 	sub	objptr, ##40112
10734     A7 22 02 FB | 	rdlong	local03, fp
10738     01 22 06 F1 | 	add	local03, #1
1073c     A7 22 62 FC | 	wrlong	local03, fp
10740     14 4E 85 F1 | 	sub	fp, #20
10744     98 FF 9F FD | 	jmp	#LR__1326
10748                 | LR__1327
10748     14 4E 05 F1 | 	add	fp, #20
1074c     A7 00 68 FC | 	wrlong	#0, fp
10750     04 4E 05 F1 | 	add	fp, #4
10754     A7 28 02 FB | 	rdlong	local06, fp
10758     18 4E 85 F1 | 	sub	fp, #24
1075c                 | LR__1328
1075c     14 4E 05 F1 | 	add	fp, #20
10760     A7 20 02 FB | 	rdlong	local02, fp
10764     14 4E 85 F1 | 	sub	fp, #20
10768     14 21 52 F2 | 	cmps	local02, local06 wc
1076c     5C 00 90 3D |  if_ae	jmp	#LR__1329
10770     0C 4E 05 F1 | 	add	fp, #12
10774     A7 12 02 FB | 	rdlong	arg01, fp
10778     04 4E 05 F1 | 	add	fp, #4
1077c     A7 26 02 FB | 	rdlong	local05, fp
10780     0A 26 66 F0 | 	shl	local05, #10
10784     13 13 02 F1 | 	add	arg01, local05
10788     04 4E 05 F1 | 	add	fp, #4
1078c     A7 26 02 FB | 	rdlong	local05, fp
10790     13 13 02 F1 | 	add	arg01, local05
10794     14 4E 85 F1 | 	sub	fp, #20
10798     4E 00 00 FF 
1079c     B0 E4 05 F1 | 	add	objptr, ##40112
107a0     F2 26 02 F1 | 	add	local05, objptr
107a4     13 15 C2 FA | 	rdbyte	arg02, local05
107a8     4E 00 00 FF 
107ac     B0 E4 85 F1 | 	sub	objptr, ##40112
107b0     AC CF B0 FD | 	call	#_pspoke
107b4     14 4E 05 F1 | 	add	fp, #20
107b8     A7 26 02 FB | 	rdlong	local05, fp
107bc     01 26 06 F1 | 	add	local05, #1
107c0     A7 26 62 FC | 	wrlong	local05, fp
107c4     14 4E 85 F1 | 	sub	fp, #20
107c8     90 FF 9F FD | 	jmp	#LR__1328
107cc                 | LR__1329
107cc                 | LR__1330
107cc     14 4E 05 F1 | 	add	fp, #20
107d0     A7 28 02 FB | 	rdlong	local06, fp
107d4     14 23 02 F6 | 	mov	local03, local06
107d8     02 22 66 F0 | 	shl	local03, #2
107dc     50 00 00 FF 
107e0     C0 E4 05 F1 | 	add	objptr, ##41152
107e4     F2 22 02 F1 | 	add	local03, objptr
107e8     02 28 66 F0 | 	shl	local06, #2
107ec     F2 28 02 F1 | 	add	local06, objptr
107f0     14 29 02 FB | 	rdlong	local06, local06
107f4     04 4E 05 F1 | 	add	fp, #4
107f8     A7 26 02 FB | 	rdlong	local05, fp
107fc     13 29 02 F1 | 	add	local06, local05
10800     11 29 62 FC | 	wrlong	local06, local03
10804     08 4E 85 F1 | 	sub	fp, #8
10808     A7 28 02 FB | 	rdlong	local06, fp
1080c     01 28 06 F1 | 	add	local06, #1
10810     A7 28 62 FC | 	wrlong	local06, fp
10814     10 4E 85 F1 | 	sub	fp, #16
10818     50 00 00 FF 
1081c     C0 E4 85 F1 | 	sub	objptr, ##41152
10820     34 FE 9F FD | 	jmp	#LR__1325
10824                 | LR__1331
10824                 | '   for i=0 to  amount/1024
10824     10 4E 05 F1 | 	add	fp, #16
10828     A7 00 68 FC | 	wrlong	#0, fp
1082c     08 4E 85 F1 | 	sub	fp, #8
10830     A7 22 02 FB | 	rdlong	local03, fp
10834     08 4E 85 F1 | 	sub	fp, #8
10838     11 2B 52 F6 | 	abs	local07, local03 wc
1083c     0A 2A 46 F0 | 	shr	local07, #10
10840     15 2B 82 F6 | 	negc	local07, local07
10844     01 2A 06 F1 | 	add	local07, #1
10848                 | LR__1332
10848     10 4E 05 F1 | 	add	fp, #16
1084c     A7 22 02 FB | 	rdlong	local03, fp
10850     10 4E 85 F1 | 	sub	fp, #16
10854     15 23 52 F2 | 	cmps	local03, local07 wc
10858     AC 01 90 3D |  if_ae	jmp	#LR__1338
1085c                 | '     get #channel,,block(0),amount,r
1085c     04 4E 05 F1 | 	add	fp, #4
10860     A7 12 02 FB | 	rdlong	arg01, fp
10864     4E 00 00 FF 
10868     B0 E4 05 F1 | 	add	objptr, ##40112
1086c     F2 16 02 F6 | 	mov	arg03, objptr
10870     4E 00 00 FF 
10874     B0 E4 85 F1 | 	sub	objptr, ##40112
10878     04 4E 05 F1 | 	add	fp, #4
1087c     A7 18 02 FB | 	rdlong	arg04, fp
10880     08 4E 85 F1 | 	sub	fp, #8
10884     00 14 06 F6 | 	mov	arg02, #0
10888     01 1A 06 F6 | 	mov	arg05, #1
1088c     E4 10 B1 FD | 	call	#__system___basic_get
10890     18 4E 05 F1 | 	add	fp, #24
10894     A7 FA 61 FC | 	wrlong	result1, fp
10898                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10898     0C 4E 85 F1 | 	sub	fp, #12
1089c     A7 20 02 FB | 	rdlong	local02, fp
108a0     0C 4E 85 F1 | 	sub	fp, #12
108a4     00 04 00 FF 
108a8     00 20 56 F2 | 	cmps	local02, ##524288 wc
108ac     7C 00 90 3D |  if_ae	jmp	#LR__1334
108b0     14 4E 05 F1 | 	add	fp, #20
108b4     A7 00 68 FC | 	wrlong	#0, fp
108b8     04 4E 05 F1 | 	add	fp, #4
108bc     A7 2C 02 FB | 	rdlong	local08, fp
108c0     18 4E 85 F1 | 	sub	fp, #24
108c4                 | LR__1333
108c4     14 4E 05 F1 | 	add	fp, #20
108c8     A7 20 02 FB | 	rdlong	local02, fp
108cc     14 4E 85 F1 | 	sub	fp, #20
108d0     16 21 52 F2 | 	cmps	local02, local08 wc
108d4     D8 00 90 3D |  if_ae	jmp	#LR__1337
108d8     0C 4E 05 F1 | 	add	fp, #12
108dc     A7 12 02 FB | 	rdlong	arg01, fp
108e0     04 4E 05 F1 | 	add	fp, #4
108e4     A7 28 02 FB | 	rdlong	local06, fp
108e8     0A 28 66 F0 | 	shl	local06, #10
108ec     14 13 02 F1 | 	add	arg01, local06
108f0     04 4E 05 F1 | 	add	fp, #4
108f4     A7 28 02 FB | 	rdlong	local06, fp
108f8     14 13 02 F1 | 	add	arg01, local06
108fc     4E 00 00 FF 
10900     B0 E4 05 F1 | 	add	objptr, ##40112
10904     F2 28 02 F1 | 	add	local06, objptr
10908     14 15 C2 FA | 	rdbyte	arg02, local06
1090c     09 15 42 FC | 	wrbyte	arg02, arg01
10910     4E 00 00 FF 
10914     B0 E4 85 F1 | 	sub	objptr, ##40112
10918     A7 28 02 FB | 	rdlong	local06, fp
1091c     01 28 06 F1 | 	add	local06, #1
10920     A7 28 62 FC | 	wrlong	local06, fp
10924     14 4E 85 F1 | 	sub	fp, #20
10928     98 FF 9F FD | 	jmp	#LR__1333
1092c                 | LR__1334
1092c     14 4E 05 F1 | 	add	fp, #20
10930     A7 00 68 FC | 	wrlong	#0, fp
10934     04 4E 05 F1 | 	add	fp, #4
10938     A7 2E 02 FB | 	rdlong	local09, fp
1093c     18 4E 85 F1 | 	sub	fp, #24
10940                 | LR__1335
10940     14 4E 05 F1 | 	add	fp, #20
10944     A7 20 02 FB | 	rdlong	local02, fp
10948     14 4E 85 F1 | 	sub	fp, #20
1094c     17 21 52 F2 | 	cmps	local02, local09 wc
10950     5C 00 90 3D |  if_ae	jmp	#LR__1336
10954     0C 4E 05 F1 | 	add	fp, #12
10958     A7 12 02 FB | 	rdlong	arg01, fp
1095c     04 4E 05 F1 | 	add	fp, #4
10960     A7 2C 02 FB | 	rdlong	local08, fp
10964     0A 2C 66 F0 | 	shl	local08, #10
10968     16 13 02 F1 | 	add	arg01, local08
1096c     04 4E 05 F1 | 	add	fp, #4
10970     A7 2C 02 FB | 	rdlong	local08, fp
10974     16 13 02 F1 | 	add	arg01, local08
10978     14 4E 85 F1 | 	sub	fp, #20
1097c     4E 00 00 FF 
10980     B0 E4 05 F1 | 	add	objptr, ##40112
10984     F2 2C 02 F1 | 	add	local08, objptr
10988     16 15 C2 FA | 	rdbyte	arg02, local08
1098c     4E 00 00 FF 
10990     B0 E4 85 F1 | 	sub	objptr, ##40112
10994     C8 CD B0 FD | 	call	#_pspoke
10998     14 4E 05 F1 | 	add	fp, #20
1099c     A7 2C 02 FB | 	rdlong	local08, fp
109a0     01 2C 06 F1 | 	add	local08, #1
109a4     A7 2C 62 FC | 	wrlong	local08, fp
109a8     14 4E 85 F1 | 	sub	fp, #20
109ac     90 FF 9F FD | 	jmp	#LR__1335
109b0                 | LR__1336
109b0                 | LR__1337
109b0     14 4E 05 F1 | 	add	fp, #20
109b4     A7 2E 02 FB | 	rdlong	local09, fp
109b8     17 29 02 F6 | 	mov	local06, local09
109bc     02 28 66 F0 | 	shl	local06, #2
109c0     50 00 00 FF 
109c4     C0 E4 05 F1 | 	add	objptr, ##41152
109c8     F2 28 02 F1 | 	add	local06, objptr
109cc     02 2E 66 F0 | 	shl	local09, #2
109d0     F2 2E 02 F1 | 	add	local09, objptr
109d4     17 2F 02 FB | 	rdlong	local09, local09
109d8     04 4E 05 F1 | 	add	fp, #4
109dc     A7 2C 02 FB | 	rdlong	local08, fp
109e0     16 2F 02 F1 | 	add	local09, local08
109e4     14 2F 62 FC | 	wrlong	local09, local06
109e8     08 4E 85 F1 | 	sub	fp, #8
109ec     A7 2E 02 FB | 	rdlong	local09, fp
109f0     01 2E 06 F1 | 	add	local09, #1
109f4     A7 2E 62 FC | 	wrlong	local09, fp
109f8     10 4E 85 F1 | 	sub	fp, #16
109fc     50 00 00 FF 
10a00     C0 E4 85 F1 | 	sub	objptr, ##41152
10a04     40 FE 9F FD | 	jmp	#LR__1332
10a08                 | LR__1338
10a08                 | LR__1339
10a08     A7 F0 03 F6 | 	mov	ptra, fp
10a0c     B2 00 A0 FD | 	call	#popregs_
10a10                 | _do_get_ret
10a10     2D 00 64 FD | 	ret
10a14                 | 
10a14                 | ' 
10a14                 | ' sub  do_put
10a14                 | _do_put
10a14     03 4A 05 F6 | 	mov	COUNT_, #3
10a18     A8 00 A0 FD | 	call	#pushregs_
10a1c     28 F0 07 F1 | 	add	ptra, #40
10a20     4A 00 00 FF 
10a24     80 E4 05 F1 | 	add	objptr, ##38016
10a28     F2 1A 02 FB | 	rdlong	arg05, objptr
10a2c     0D 19 02 F6 | 	mov	arg04, arg05
10a30     01 18 66 F0 | 	shl	arg04, #1
10a34     0D 19 02 F1 | 	add	arg04, arg05
10a38     02 18 66 F0 | 	shl	arg04, #2
10a3c     03 00 00 FF 
10a40     04 E4 85 F1 | 	sub	objptr, ##1540
10a44     F2 18 02 F1 | 	add	arg04, objptr
10a48     0C 1B 02 FB | 	rdlong	arg05, arg04
10a4c     A7 1A 62 FC | 	wrlong	arg05, fp
10a50                 | ' numpar=compiledline(lineptr_e).result.uresult
10a50                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10a50     04 1A 0E F2 | 	cmp	arg05, #4 wz
10a54     47 00 00 FF 
10a58     7C E4 85 F1 | 	sub	objptr, ##36476
10a5c     48 00 90 5D |  if_ne	jmp	#LR__1340
10a60     C0 A7 BF FD | 	call	#_pop
10a64     FF 1A 02 F6 | 	mov	arg05, result3
10a68     1C 4E 05 F1 | 	add	fp, #28
10a6c     A7 FA 61 FC | 	wrlong	result1, fp
10a70     04 4E 05 F1 | 	add	fp, #4
10a74     A7 FC 61 FC | 	wrlong	result2, fp
10a78     04 4E 05 F1 | 	add	fp, #4
10a7c     A7 1A 62 FC | 	wrlong	arg05, fp
10a80     08 4E 85 F1 | 	sub	fp, #8
10a84     A7 12 02 F6 | 	mov	arg01, fp
10a88     1C 4E 85 F1 | 	sub	fp, #28
10a8c     60 51 B0 FD | 	call	#_converttoint
10a90     52 00 00 FF 
10a94     10 E4 05 F1 | 	add	objptr, ##42000
10a98     F2 FA 61 FC | 	wrlong	result1, objptr
10a9c     52 00 00 FF 
10aa0     10 E4 85 F1 | 	sub	objptr, ##42000
10aa4     18 00 90 FD | 	jmp	#LR__1341
10aa8                 | LR__1340
10aa8     52 00 00 FF 
10aac     10 E4 05 F1 | 	add	objptr, ##42000
10ab0     FF FF FF FF 
10ab4     F2 FE 6B FC | 	wrlong	##-1, objptr
10ab8     52 00 00 FF 
10abc     10 E4 85 F1 | 	sub	objptr, ##42000
10ac0                 | LR__1341
10ac0                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10ac0     A7 1A 02 FB | 	rdlong	arg05, fp
10ac4     03 1A 56 F2 | 	cmps	arg05, #3 wc
10ac8     40 00 90 CD |  if_b	jmp	#LR__1342
10acc     54 A7 BF FD | 	call	#_pop
10ad0     FF 1A 02 F6 | 	mov	arg05, result3
10ad4     1C 4E 05 F1 | 	add	fp, #28
10ad8     A7 FA 61 FC | 	wrlong	result1, fp
10adc     04 4E 05 F1 | 	add	fp, #4
10ae0     A7 FC 61 FC | 	wrlong	result2, fp
10ae4     04 4E 05 F1 | 	add	fp, #4
10ae8     A7 1A 62 FC | 	wrlong	arg05, fp
10aec     08 4E 85 F1 | 	sub	fp, #8
10af0     A7 12 02 F6 | 	mov	arg01, fp
10af4     1C 4E 85 F1 | 	sub	fp, #28
10af8     F4 50 B0 FD | 	call	#_converttoint
10afc     08 4E 05 F1 | 	add	fp, #8
10b00     A7 FA 61 FC | 	wrlong	result1, fp
10b04     08 4E 85 F1 | 	sub	fp, #8
10b08     0C 00 90 FD | 	jmp	#LR__1343
10b0c                 | LR__1342
10b0c     08 4E 05 F1 | 	add	fp, #8
10b10     A7 02 68 FC | 	wrlong	#1, fp
10b14     08 4E 85 F1 | 	sub	fp, #8
10b18                 | LR__1343
10b18                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10b18     A7 18 02 FB | 	rdlong	arg04, fp
10b1c     02 18 56 F2 | 	cmps	arg04, #2 wc
10b20     3C 00 90 CD |  if_b	jmp	#LR__1344
10b24     FC A6 BF FD | 	call	#_pop
10b28     FF 18 02 F6 | 	mov	arg04, result3
10b2c     1C 4E 05 F1 | 	add	fp, #28
10b30     A7 FA 61 FC | 	wrlong	result1, fp
10b34     04 4E 05 F1 | 	add	fp, #4
10b38     A7 FC 61 FC | 	wrlong	result2, fp
10b3c     04 4E 05 F1 | 	add	fp, #4
10b40     A7 18 62 FC | 	wrlong	arg04, fp
10b44     08 4E 85 F1 | 	sub	fp, #8
10b48     A7 12 02 F6 | 	mov	arg01, fp
10b4c     1C 4E 85 F1 | 	sub	fp, #28
10b50     9C 50 B0 FD | 	call	#_converttoint
10b54     0C 4E 05 F1 | 	add	fp, #12
10b58     A7 FA 61 FC | 	wrlong	result1, fp
10b5c     0C 4E 85 F1 | 	sub	fp, #12
10b60                 | LR__1344
10b60     C0 A6 BF FD | 	call	#_pop
10b64     FF 18 02 F6 | 	mov	arg04, result3
10b68     1C 4E 05 F1 | 	add	fp, #28
10b6c     A7 FA 61 FC | 	wrlong	result1, fp
10b70     04 4E 05 F1 | 	add	fp, #4
10b74     A7 FC 61 FC | 	wrlong	result2, fp
10b78     04 4E 05 F1 | 	add	fp, #4
10b7c     A7 18 62 FC | 	wrlong	arg04, fp
10b80     08 4E 85 F1 | 	sub	fp, #8
10b84     A7 12 02 F6 | 	mov	arg01, fp
10b88     1C 4E 85 F1 | 	sub	fp, #28
10b8c     60 50 B0 FD | 	call	#_converttoint
10b90     04 4E 05 F1 | 	add	fp, #4
10b94     A7 FA 61 FC | 	wrlong	result1, fp
10b98     10 4E 05 F1 | 	add	fp, #16
10b9c     A7 1E 02 FB | 	rdlong	local01, fp
10ba0     14 4E 85 F1 | 	sub	fp, #20
10ba4     02 1E 66 F0 | 	shl	local01, #2
10ba8     50 00 00 FF 
10bac     C0 E4 05 F1 | 	add	objptr, ##41152
10bb0     F2 1E 02 F1 | 	add	local01, objptr
10bb4     0F 01 68 FC | 	wrlong	#0, local01
10bb8                 | ' t1=pop() : channel=converttoint(t1)
10bb8                 | ' 
10bb8                 | ' getres(j)=0
10bb8                 | ' if pos>=0 then
10bb8     01 00 00 FF 
10bbc     50 E5 05 F1 | 	add	objptr, ##848
10bc0     F2 20 02 FB | 	rdlong	local02, objptr
10bc4     52 00 00 FF 
10bc8     10 E4 85 F1 | 	sub	objptr, ##42000
10bcc     00 20 56 F2 | 	cmps	local02, #0 wc
10bd0     C0 01 90 CD |  if_b	jmp	#LR__1350
10bd4     10 4E 05 F1 | 	add	fp, #16
10bd8     A7 00 68 FC | 	wrlong	#0, fp
10bdc     10 4E 85 F1 | 	sub	fp, #16
10be0                 | '    i=0: do
10be0                 | LR__1345
10be0     14 4E 05 F1 | 	add	fp, #20
10be4     A7 00 68 FC | 	wrlong	#0, fp
10be8     14 4E 85 F1 | 	sub	fp, #20
10bec                 | '    j=0: do    
10bec                 | LR__1346
10bec                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10bec     0C 4E 05 F1 | 	add	fp, #12
10bf0     A7 20 02 FB | 	rdlong	local02, fp
10bf4     0C 4E 85 F1 | 	sub	fp, #12
10bf8     00 04 00 FF 
10bfc     00 20 56 F2 | 	cmps	local02, ##524288 wc
10c00     4C 00 90 3D |  if_ae	jmp	#LR__1347
10c04     14 4E 05 F1 | 	add	fp, #20
10c08     A7 20 02 FB | 	rdlong	local02, fp
10c0c     10 1F 02 F6 | 	mov	local01, local02
10c10     4E 00 00 FF 
10c14     B0 E4 05 F1 | 	add	objptr, ##40112
10c18     F2 1E 02 F1 | 	add	local01, objptr
10c1c     08 4E 85 F1 | 	sub	fp, #8
10c20     A7 12 02 FB | 	rdlong	arg01, fp
10c24     04 4E 05 F1 | 	add	fp, #4
10c28     A7 18 02 FB | 	rdlong	arg04, fp
10c2c     0A 18 66 F0 | 	shl	arg04, #10
10c30     0C 13 02 F1 | 	add	arg01, arg04
10c34     10 4E 85 F1 | 	sub	fp, #16
10c38     10 13 02 F1 | 	add	arg01, local02
10c3c     09 FB C1 FA | 	rdbyte	result1, arg01
10c40     4E 00 00 FF 
10c44     B0 E4 85 F1 | 	sub	objptr, ##40112
10c48     0F FB 41 FC | 	wrbyte	result1, local01
10c4c     48 00 90 FD | 	jmp	#LR__1348
10c50                 | LR__1347
10c50     14 4E 05 F1 | 	add	fp, #20
10c54     A7 20 02 FB | 	rdlong	local02, fp
10c58     10 1F 02 F6 | 	mov	local01, local02
10c5c     4E 00 00 FF 
10c60     B0 E4 05 F1 | 	add	objptr, ##40112
10c64     F2 1E 02 F1 | 	add	local01, objptr
10c68     08 4E 85 F1 | 	sub	fp, #8
10c6c     A7 12 02 FB | 	rdlong	arg01, fp
10c70     04 4E 05 F1 | 	add	fp, #4
10c74     A7 18 02 FB | 	rdlong	arg04, fp
10c78     0A 18 66 F0 | 	shl	arg04, #10
10c7c     0C 13 02 F1 | 	add	arg01, arg04
10c80     10 4E 85 F1 | 	sub	fp, #16
10c84     10 13 02 F1 | 	add	arg01, local02
10c88     4E 00 00 FF 
10c8c     B0 E4 85 F1 | 	sub	objptr, ##40112
10c90     14 CB B0 FD | 	call	#_pspeek
10c94     0F FB 41 FC | 	wrbyte	result1, local01
10c98                 | LR__1348
10c98     14 4E 05 F1 | 	add	fp, #20
10c9c     A7 20 02 FB | 	rdlong	local02, fp
10ca0     01 20 06 F1 | 	add	local02, #1
10ca4     A7 20 62 FC | 	wrlong	local02, fp
10ca8     14 4E 85 F1 | 	sub	fp, #20
10cac     02 00 00 FF 
10cb0     00 20 56 F2 | 	cmps	local02, ##1024 wc
10cb4     2C 00 90 3D |  if_ae	jmp	#LR__1349
10cb8     10 4E 05 F1 | 	add	fp, #16
10cbc     A7 1E 02 FB | 	rdlong	local01, fp
10cc0     0A 1E 66 F0 | 	shl	local01, #10
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 20 02 FB | 	rdlong	local02, fp
10ccc     10 1F 02 F1 | 	add	local01, local02
10cd0     0C 4E 85 F1 | 	sub	fp, #12
10cd4     A7 20 02 FB | 	rdlong	local02, fp
10cd8     08 4E 85 F1 | 	sub	fp, #8
10cdc     10 1F 5A F2 | 	cmps	local01, local02 wcz
10ce0     08 FF 9F ED |  if_be	jmp	#LR__1346
10ce4                 | LR__1349
10ce4                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 12 02 FB | 	rdlong	arg01, fp
10cec     52 00 00 FF 
10cf0     10 E4 05 F1 | 	add	objptr, ##42000
10cf4     F2 14 02 FB | 	rdlong	arg02, objptr
10cf8     01 14 06 F1 | 	add	arg02, #1
10cfc     03 00 00 FF 
10d00     60 E5 85 F1 | 	sub	objptr, ##1888
10d04     F2 16 02 F6 | 	mov	arg03, objptr
10d08     4E 00 00 FF 
10d0c     B0 E4 85 F1 | 	sub	objptr, ##40112
10d10     04 4E 05 F1 | 	add	fp, #4
10d14     A7 18 02 FB | 	rdlong	arg04, fp
10d18     08 4E 85 F1 | 	sub	fp, #8
10d1c     01 1A 06 F6 | 	mov	arg05, #1
10d20     E4 0B B1 FD | 	call	#__system___basic_put
10d24     18 4E 05 F1 | 	add	fp, #24
10d28     A7 FA 61 FC | 	wrlong	result1, fp
10d2c     14 4E 85 F1 | 	sub	fp, #20
10d30     A7 1E 02 FB | 	rdlong	local01, fp
10d34     02 1E 66 F0 | 	shl	local01, #2
10d38     50 00 00 FF 
10d3c     C0 E4 05 F1 | 	add	objptr, ##41152
10d40     F2 1E 02 F1 | 	add	local01, objptr
10d44     0F FB 61 FC | 	wrlong	result1, local01
10d48                 | '    if 1024*i+j>amount then exit loop
10d48     0C 4E 05 F1 | 	add	fp, #12
10d4c     A7 20 02 FB | 	rdlong	local02, fp
10d50     0A 20 66 F0 | 	shl	local02, #10
10d54     04 4E 05 F1 | 	add	fp, #4
10d58     A7 1E 02 FB | 	rdlong	local01, fp
10d5c     0F 21 02 F1 | 	add	local02, local01
10d60     0C 4E 85 F1 | 	sub	fp, #12
10d64     A7 1E 02 FB | 	rdlong	local01, fp
10d68     08 4E 85 F1 | 	sub	fp, #8
10d6c     0F 21 5A F2 | 	cmps	local02, local01 wcz
10d70     50 00 00 FF 
10d74     C0 E4 85 F1 | 	sub	objptr, ##41152
10d78     CC 01 90 1D |  if_a	jmp	#LR__1357
10d7c     10 4E 05 F1 | 	add	fp, #16
10d80     A7 20 02 FB | 	rdlong	local02, fp
10d84     01 20 06 F1 | 	add	local02, #1
10d88     A7 20 62 FC | 	wrlong	local02, fp
10d8c     10 4E 85 F1 | 	sub	fp, #16
10d90     4C FE 9F FD | 	jmp	#LR__1345
10d94                 | LR__1350
10d94     10 4E 05 F1 | 	add	fp, #16
10d98     A7 00 68 FC | 	wrlong	#0, fp
10d9c     10 4E 85 F1 | 	sub	fp, #16
10da0                 | '    i=0: do
10da0                 | LR__1351
10da0     14 4E 05 F1 | 	add	fp, #20
10da4     A7 00 68 FC | 	wrlong	#0, fp
10da8     14 4E 85 F1 | 	sub	fp, #20
10dac                 | '    j=0: do  
10dac                 | LR__1352
10dac                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10dac     0C 4E 05 F1 | 	add	fp, #12
10db0     A7 20 02 FB | 	rdlong	local02, fp
10db4     0C 4E 85 F1 | 	sub	fp, #12
10db8     00 04 00 FF 
10dbc     00 20 56 F2 | 	cmps	local02, ##524288 wc
10dc0     4C 00 90 3D |  if_ae	jmp	#LR__1353
10dc4     14 4E 05 F1 | 	add	fp, #20
10dc8     A7 20 02 FB | 	rdlong	local02, fp
10dcc     10 1F 02 F6 | 	mov	local01, local02
10dd0     4E 00 00 FF 
10dd4     B0 E4 05 F1 | 	add	objptr, ##40112
10dd8     F2 1E 02 F1 | 	add	local01, objptr
10ddc     08 4E 85 F1 | 	sub	fp, #8
10de0     A7 12 02 FB | 	rdlong	arg01, fp
10de4     04 4E 05 F1 | 	add	fp, #4
10de8     A7 18 02 FB | 	rdlong	arg04, fp
10dec     0A 18 66 F0 | 	shl	arg04, #10
10df0     0C 13 02 F1 | 	add	arg01, arg04
10df4     10 4E 85 F1 | 	sub	fp, #16
10df8     10 13 02 F1 | 	add	arg01, local02
10dfc     09 FB C1 FA | 	rdbyte	result1, arg01
10e00     4E 00 00 FF 
10e04     B0 E4 85 F1 | 	sub	objptr, ##40112
10e08     0F FB 41 FC | 	wrbyte	result1, local01
10e0c     48 00 90 FD | 	jmp	#LR__1354
10e10                 | LR__1353
10e10     14 4E 05 F1 | 	add	fp, #20
10e14     A7 20 02 FB | 	rdlong	local02, fp
10e18     10 1F 02 F6 | 	mov	local01, local02
10e1c     4E 00 00 FF 
10e20     B0 E4 05 F1 | 	add	objptr, ##40112
10e24     F2 1E 02 F1 | 	add	local01, objptr
10e28     08 4E 85 F1 | 	sub	fp, #8
10e2c     A7 12 02 FB | 	rdlong	arg01, fp
10e30     04 4E 05 F1 | 	add	fp, #4
10e34     A7 18 02 FB | 	rdlong	arg04, fp
10e38     0A 18 66 F0 | 	shl	arg04, #10
10e3c     0C 13 02 F1 | 	add	arg01, arg04
10e40     10 4E 85 F1 | 	sub	fp, #16
10e44     10 13 02 F1 | 	add	arg01, local02
10e48     4E 00 00 FF 
10e4c     B0 E4 85 F1 | 	sub	objptr, ##40112
10e50     54 C9 B0 FD | 	call	#_pspeek
10e54     0F FB 41 FC | 	wrbyte	result1, local01
10e58                 | LR__1354
10e58     14 4E 05 F1 | 	add	fp, #20
10e5c     A7 20 02 FB | 	rdlong	local02, fp
10e60     01 20 06 F1 | 	add	local02, #1
10e64     A7 20 62 FC | 	wrlong	local02, fp
10e68     14 4E 85 F1 | 	sub	fp, #20
10e6c     02 00 00 FF 
10e70     00 20 56 F2 | 	cmps	local02, ##1024 wc
10e74     2C 00 90 3D |  if_ae	jmp	#LR__1355
10e78     10 4E 05 F1 | 	add	fp, #16
10e7c     A7 1E 02 FB | 	rdlong	local01, fp
10e80     0A 1E 66 F0 | 	shl	local01, #10
10e84     04 4E 05 F1 | 	add	fp, #4
10e88     A7 20 02 FB | 	rdlong	local02, fp
10e8c     10 1F 02 F1 | 	add	local01, local02
10e90     0C 4E 85 F1 | 	sub	fp, #12
10e94     A7 20 02 FB | 	rdlong	local02, fp
10e98     08 4E 85 F1 | 	sub	fp, #8
10e9c     10 1F 5A F2 | 	cmps	local01, local02 wcz
10ea0     08 FF 9F ED |  if_be	jmp	#LR__1352
10ea4                 | LR__1355
10ea4                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10ea4     04 4E 05 F1 | 	add	fp, #4
10ea8     A7 12 02 FB | 	rdlong	arg01, fp
10eac     4E 00 00 FF 
10eb0     B0 E4 05 F1 | 	add	objptr, ##40112
10eb4     F2 16 02 F6 | 	mov	arg03, objptr
10eb8     4E 00 00 FF 
10ebc     B0 E4 85 F1 | 	sub	objptr, ##40112
10ec0     04 4E 05 F1 | 	add	fp, #4
10ec4     A7 18 02 FB | 	rdlong	arg04, fp
10ec8     08 4E 85 F1 | 	sub	fp, #8
10ecc     00 14 06 F6 | 	mov	arg02, #0
10ed0     01 1A 06 F6 | 	mov	arg05, #1
10ed4     30 0A B1 FD | 	call	#__system___basic_put
10ed8     18 4E 05 F1 | 	add	fp, #24
10edc     A7 FA 61 FC | 	wrlong	result1, fp
10ee0     14 4E 85 F1 | 	sub	fp, #20
10ee4     A7 1E 02 FB | 	rdlong	local01, fp
10ee8     02 1E 66 F0 | 	shl	local01, #2
10eec     50 00 00 FF 
10ef0     C0 E4 05 F1 | 	add	objptr, ##41152
10ef4     F2 1E 02 F1 | 	add	local01, objptr
10ef8     0F FB 61 FC | 	wrlong	result1, local01
10efc                 | '    if 1024*i+j>amount then exit loop
10efc     0C 4E 05 F1 | 	add	fp, #12
10f00     A7 20 02 FB | 	rdlong	local02, fp
10f04     0A 20 66 F0 | 	shl	local02, #10
10f08     04 4E 05 F1 | 	add	fp, #4
10f0c     A7 1E 02 FB | 	rdlong	local01, fp
10f10     0F 21 02 F1 | 	add	local02, local01
10f14     0C 4E 85 F1 | 	sub	fp, #12
10f18     A7 22 02 FB | 	rdlong	local03, fp
10f1c     08 4E 85 F1 | 	sub	fp, #8
10f20     11 21 5A F2 | 	cmps	local02, local03 wcz
10f24     50 00 00 FF 
10f28     C0 E4 85 F1 | 	sub	objptr, ##41152
10f2c     18 00 90 1D |  if_a	jmp	#LR__1356
10f30     10 4E 05 F1 | 	add	fp, #16
10f34     A7 20 02 FB | 	rdlong	local02, fp
10f38     01 20 06 F1 | 	add	local02, #1
10f3c     A7 20 62 FC | 	wrlong	local02, fp
10f40     10 4E 85 F1 | 	sub	fp, #16
10f44     58 FE 9F FD | 	jmp	#LR__1351
10f48                 | LR__1356
10f48                 | LR__1357
10f48     A7 F0 03 F6 | 	mov	ptra, fp
10f4c     B2 00 A0 FD | 	call	#popregs_
10f50                 | _do_put_ret
10f50     2D 00 64 FD | 	ret
10f54                 | 
10f54                 | '   
10f54                 | ' sub do_find_goto
10f54                 | _do_find_goto
10f54     03 4A 05 F6 | 	mov	COUNT_, #3
10f58     A8 00 A0 FD | 	call	#pushregs_
10f5c     24 F0 07 F1 | 	add	ptra, #36
10f60                 | _do_find_goto_enter
10f60     4A 00 00 FF 
10f64     80 E4 05 F1 | 	add	objptr, ##38016
10f68     F2 1E 02 FB | 	rdlong	local01, objptr
10f6c     0F 21 02 F6 | 	mov	local02, local01
10f70     01 20 66 F0 | 	shl	local02, #1
10f74     0F 21 02 F1 | 	add	local02, local01
10f78     02 20 66 F0 | 	shl	local02, #2
10f7c     03 00 00 FF 
10f80     04 E4 85 F1 | 	sub	objptr, ##1540
10f84     F2 20 02 F1 | 	add	local02, objptr
10f88     04 20 06 F1 | 	add	local02, #4
10f8c     10 21 02 FB | 	rdlong	local02, local02
10f90     A7 20 62 FC | 	wrlong	local02, fp
10f94     03 00 00 FF 
10f98     08 E4 05 F1 | 	add	objptr, ##1544
10f9c     F2 22 02 FB | 	rdlong	local03, objptr
10fa0     4A 00 00 FF 
10fa4     84 E4 85 F1 | 	sub	objptr, ##38020
10fa8     04 4E 05 F1 | 	add	fp, #4
10fac     A7 22 62 FC | 	wrlong	local03, fp
10fb0     04 4E 85 F1 | 	sub	fp, #4
10fb4                 | ' 
10fb4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
10fb4                 | '  ' print "find goto"                                                                     'print gotoline 
10fb4                 | ' gotoptr=programstart
10fb4                 | ' do
10fb4                 | LR__1360
10fb4     0C 4E 05 F1 | 	add	fp, #12
10fb8     A7 12 02 F6 | 	mov	arg01, fp
10fbc     08 4E 85 F1 | 	sub	fp, #8
10fc0     A7 14 02 FB | 	rdlong	arg02, fp
10fc4     04 4E 85 F1 | 	sub	fp, #4
10fc8     18 16 06 F6 | 	mov	arg03, #24
10fcc     0B 00 00 FF 
10fd0     CC E4 05 F1 | 	add	objptr, ##5836
10fd4     EC EE B0 FD | 	call	#_psram_spin2_read1
10fd8     0B 00 00 FF 
10fdc     CC E4 85 F1 | 	sub	objptr, ##5836
10fe0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10fe0                 | '   if gotoheader(0)<>$FFFFFFFF then
10fe0     0C 4E 05 F1 | 	add	fp, #12
10fe4     A7 22 02 FB | 	rdlong	local03, fp
10fe8     0C 4E 85 F1 | 	sub	fp, #12
10fec     FF FF 7F FF 
10ff0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
10ff4     24 00 90 AD |  if_e	jmp	#LR__1361
10ff8     04 4E 05 F1 | 	add	fp, #4
10ffc     A7 22 02 FB | 	rdlong	local03, fp
11000     04 4E 05 F1 | 	add	fp, #4
11004     A7 22 62 FC | 	wrlong	local03, fp
11008     18 4E 05 F1 | 	add	fp, #24
1100c     A7 22 02 FB | 	rdlong	local03, fp
11010     1C 4E 85 F1 | 	sub	fp, #28
11014     A7 22 62 FC | 	wrlong	local03, fp
11018     04 4E 85 F1 | 	sub	fp, #4
1101c                 | LR__1361
1101c     20 4E 05 F1 | 	add	fp, #32
11020     A7 22 02 FB | 	rdlong	local03, fp
11024     20 4E 85 F1 | 	sub	fp, #32
11028     FF FF 3F FF 
1102c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
11030     0C 4E 05 51 |  if_ne	add	fp, #12
11034     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11038     0C 4E 85 51 |  if_ne	sub	fp, #12
1103c     FF FF 7F 5F 
11040     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11044     18 00 90 AD |  if_e	jmp	#LR__1362
11048     0C 4E 05 F1 | 	add	fp, #12
1104c     A7 22 02 FB | 	rdlong	local03, fp
11050     0C 4E 85 F1 | 	sub	fp, #12
11054     A7 20 02 FB | 	rdlong	local02, fp
11058     10 23 0A F2 | 	cmp	local03, local02 wz
1105c     54 FF 9F 5D |  if_ne	jmp	#LR__1360
11060                 | LR__1362
11060                 | ' 
11060                 | ' if gotoheader(0)=gotoline then
11060     0C 4E 05 F1 | 	add	fp, #12
11064     A7 22 02 FB | 	rdlong	local03, fp
11068     0C 4E 85 F1 | 	sub	fp, #12
1106c     A7 1E 02 FB | 	rdlong	local01, fp
11070     0F 23 0A F2 | 	cmp	local03, local01 wz
11074     D8 00 90 5D |  if_ne	jmp	#LR__1363
11078     4A 00 00 FF 
1107c     80 E4 05 F1 | 	add	objptr, ##38016
11080     F2 1E 02 FB | 	rdlong	local01, objptr
11084     0F 21 02 F6 | 	mov	local02, local01
11088     01 20 66 F0 | 	shl	local02, #1
1108c     0F 21 02 F1 | 	add	local02, local01
11090     02 20 66 F0 | 	shl	local02, #2
11094     03 00 00 FF 
11098     04 E4 85 F1 | 	sub	objptr, ##1540
1109c     F2 20 02 F1 | 	add	local02, objptr
110a0     08 4E 05 F1 | 	add	fp, #8
110a4     A7 22 02 FB | 	rdlong	local03, fp
110a8     10 23 62 FC | 	wrlong	local03, local02
110ac     03 00 00 FF 
110b0     04 E4 05 F1 | 	add	objptr, ##1540
110b4     F2 1E 02 FB | 	rdlong	local01, objptr
110b8     0F 21 02 F6 | 	mov	local02, local01
110bc     01 20 66 F0 | 	shl	local02, #1
110c0     0F 21 02 F1 | 	add	local02, local01
110c4     02 20 66 F0 | 	shl	local02, #2
110c8     03 00 00 FF 
110cc     04 E4 85 F1 | 	sub	objptr, ##1540
110d0     F2 20 02 F1 | 	add	local02, objptr
110d4     08 20 06 F1 | 	add	local02, #8
110d8     10 9D 68 FC | 	wrlong	#78, local02
110dc     03 00 00 FF 
110e0     04 E4 05 F1 | 	add	objptr, ##1540
110e4     F2 20 02 FB | 	rdlong	local02, objptr
110e8     10 13 02 F6 | 	mov	arg01, local02
110ec     01 12 66 F0 | 	shl	arg01, #1
110f0     10 13 02 F1 | 	add	arg01, local02
110f4     02 12 66 F0 | 	shl	arg01, #2
110f8     03 00 00 FF 
110fc     04 E4 85 F1 | 	sub	objptr, ##1540
11100     F2 12 02 F1 | 	add	arg01, objptr
11104     09 00 00 FF 
11108     40 E4 05 F1 | 	add	objptr, ##4672
1110c     F2 14 02 FB | 	rdlong	arg02, objptr
11110     02 22 06 F6 | 	mov	local03, #2
11114     10 23 02 F1 | 	add	local03, local02
11118     0B 00 00 FF 
1111c     58 E4 85 F1 | 	sub	objptr, ##5720
11120     F2 16 02 FB | 	rdlong	arg03, objptr
11124     0B 23 02 FD | 	qmul	local03, arg03
11128     08 4E 85 F1 | 	sub	fp, #8
1112c     39 00 00 FF 
11130     98 E5 85 F1 | 	sub	objptr, ##29592
11134     18 22 62 FD | 	getqx	local03
11138     11 15 02 F1 | 	add	arg02, local03
1113c     20 EE B0 FD | 	call	#_psram_spin2_write
11140     0B 00 00 FF 
11144     CC E4 85 F1 | 	sub	objptr, ##5836
11148     A0 EE BF FD | 	call	#_do_fast_goto
1114c     08 00 90 FD | 	jmp	#LR__1364
11150                 | LR__1363
11150     26 12 06 F6 | 	mov	arg01, #38
11154     14 C4 B0 FD | 	call	#_printerror
11158                 | LR__1364
11158     A7 F0 03 F6 | 	mov	ptra, fp
1115c     B2 00 A0 FD | 	call	#popregs_
11160                 | _do_find_goto_ret
11160     2D 00 64 FD | 	ret
11164                 | 
11164                 | ' 
11164                 | ' sub do_slow_goto
11164                 | _do_slow_goto
11164     02 4A 05 F6 | 	mov	COUNT_, #2
11168     A8 00 A0 FD | 	call	#pushregs_
1116c     30 F0 07 F1 | 	add	ptra, #48
11170     B0 A0 BF FD | 	call	#_pop
11174     FF 1E 02 F6 | 	mov	local01, result3
11178     24 4E 05 F1 | 	add	fp, #36
1117c     A7 FA 61 FC | 	wrlong	result1, fp
11180     04 4E 05 F1 | 	add	fp, #4
11184     A7 FC 61 FC | 	wrlong	result2, fp
11188     04 4E 05 F1 | 	add	fp, #4
1118c     A7 1E 62 FC | 	wrlong	local01, fp
11190     08 4E 85 F1 | 	sub	fp, #8
11194     A7 12 02 F6 | 	mov	arg01, fp
11198     24 4E 85 F1 | 	sub	fp, #36
1119c     50 4A B0 FD | 	call	#_converttoint
111a0     A7 FA 61 FC | 	wrlong	result1, fp
111a4     4A 00 00 FF 
111a8     84 E4 05 F1 | 	add	objptr, ##38020
111ac     F2 20 02 FB | 	rdlong	local02, objptr
111b0     4A 00 00 FF 
111b4     84 E4 85 F1 | 	sub	objptr, ##38020
111b8     04 4E 05 F1 | 	add	fp, #4
111bc     A7 20 62 FC | 	wrlong	local02, fp
111c0     04 4E 85 F1 | 	sub	fp, #4
111c4                 | ' 
111c4                 | ' t1=pop() : gotoline=converttoint(t1)
111c4                 | ' gotoptr=programstart
111c4                 | ' do
111c4                 | LR__1370
111c4     0C 4E 05 F1 | 	add	fp, #12
111c8     A7 12 02 F6 | 	mov	arg01, fp
111cc     08 4E 85 F1 | 	sub	fp, #8
111d0     A7 14 02 FB | 	rdlong	arg02, fp
111d4     04 4E 85 F1 | 	sub	fp, #4
111d8     18 16 06 F6 | 	mov	arg03, #24
111dc     0B 00 00 FF 
111e0     CC E4 05 F1 | 	add	objptr, ##5836
111e4     DC EC B0 FD | 	call	#_psram_spin2_read1
111e8     0B 00 00 FF 
111ec     CC E4 85 F1 | 	sub	objptr, ##5836
111f0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
111f0                 | '   if gotoheader(0)<>$FFFFFFFF then
111f0     0C 4E 05 F1 | 	add	fp, #12
111f4     A7 20 02 FB | 	rdlong	local02, fp
111f8     0C 4E 85 F1 | 	sub	fp, #12
111fc     FF FF 7F FF 
11200     FF 21 0E F2 | 	cmp	local02, ##-1 wz
11204     24 00 90 AD |  if_e	jmp	#LR__1371
11208     04 4E 05 F1 | 	add	fp, #4
1120c     A7 20 02 FB | 	rdlong	local02, fp
11210     04 4E 05 F1 | 	add	fp, #4
11214     A7 20 62 FC | 	wrlong	local02, fp
11218     18 4E 05 F1 | 	add	fp, #24
1121c     A7 20 02 FB | 	rdlong	local02, fp
11220     1C 4E 85 F1 | 	sub	fp, #28
11224     A7 20 62 FC | 	wrlong	local02, fp
11228     04 4E 85 F1 | 	sub	fp, #4
1122c                 | LR__1371
1122c     20 4E 05 F1 | 	add	fp, #32
11230     A7 20 02 FB | 	rdlong	local02, fp
11234     20 4E 85 F1 | 	sub	fp, #32
11238     FF FF 3F FF 
1123c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11240     0C 4E 05 51 |  if_ne	add	fp, #12
11244     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11248     0C 4E 85 51 |  if_ne	sub	fp, #12
1124c     FF FF 7F 5F 
11250     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11254     18 00 90 AD |  if_e	jmp	#LR__1372
11258     0C 4E 05 F1 | 	add	fp, #12
1125c     A7 20 02 FB | 	rdlong	local02, fp
11260     0C 4E 85 F1 | 	sub	fp, #12
11264     A7 16 02 FB | 	rdlong	arg03, fp
11268     0B 21 0A F2 | 	cmp	local02, arg03 wz
1126c     54 FF 9F 5D |  if_ne	jmp	#LR__1370
11270                 | LR__1372
11270                 | ' if gotoheader(0)=gotoline then  
11270     0C 4E 05 F1 | 	add	fp, #12
11274     A7 20 02 FB | 	rdlong	local02, fp
11278     0C 4E 85 F1 | 	sub	fp, #12
1127c     A7 1E 02 FB | 	rdlong	local01, fp
11280     0F 21 0A F2 | 	cmp	local02, local01 wz
11284     60 00 90 5D |  if_ne	jmp	#LR__1373
11288     08 4E 05 F1 | 	add	fp, #8
1128c     A7 20 02 FB | 	rdlong	local02, fp
11290     08 4E 85 F1 | 	sub	fp, #8
11294     50 00 00 FF 
11298     B4 E4 05 F1 | 	add	objptr, ##41140
1129c     F2 20 62 FC | 	wrlong	local02, objptr
112a0     06 00 00 FF 
112a4     38 E4 85 F1 | 	sub	objptr, ##3128
112a8     F2 20 02 FB | 	rdlong	local02, objptr
112ac     01 20 86 F1 | 	sub	local02, #1
112b0     04 E4 05 F1 | 	add	objptr, #4
112b4     F2 20 62 FC | 	wrlong	local02, objptr
112b8                 | '    runptr=oldgotoptr
112b8                 | '    lineptr_e=lineptr-1
112b8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
112b8     06 00 00 FF 
112bc     80 E4 05 F1 | 	add	objptr, ##3200
112c0     F2 20 02 FB | 	rdlong	local02, objptr
112c4     50 00 00 FF 
112c8     00 E5 85 F1 | 	sub	objptr, ##41216
112cc     FF FF 3F FF 
112d0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
112d4     50 00 00 AF 
112d8     00 E5 05 A1 |  if_e	add	objptr, ##41216
112dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
112e0     50 00 00 AF 
112e4     00 E5 85 A1 |  if_e	sub	objptr, ##41216
112e8                 | LR__1373
112e8     A7 F0 03 F6 | 	mov	ptra, fp
112ec     B2 00 A0 FD | 	call	#popregs_
112f0                 | _do_slow_goto_ret
112f0     2D 00 64 FD | 	ret
112f4                 | 
112f4                 | ' 
112f4                 | ' '----------------------- Error processing
112f4                 | ' 
112f4                 | ' sub do_error
112f4                 | _do_error
112f4     01 4A 05 F6 | 	mov	COUNT_, #1
112f8     A8 00 A0 FD | 	call	#pushregs_
112fc     4A 00 00 FF 
11300     80 E4 05 F1 | 	add	objptr, ##38016
11304     F2 18 02 FB | 	rdlong	arg04, objptr
11308     0C 17 02 F6 | 	mov	arg03, arg04
1130c     01 16 66 F0 | 	shl	arg03, #1
11310     0C 17 02 F1 | 	add	arg03, arg04
11314     02 16 66 F0 | 	shl	arg03, #2
11318     03 00 00 FF 
1131c     04 E4 85 F1 | 	sub	objptr, ##1540
11320     F2 16 02 F1 | 	add	arg03, objptr
11324     0B 1F 02 FB | 	rdlong	local01, arg03
11328                 | ' r=compiledline(lineptr_e).result.uresult
11328                 | ' print "Error ";r;": ";errors$(r)
11328     00 12 06 F6 | 	mov	arg01, #0
1132c     47 00 00 FF 
11330     7C E4 85 F1 | 	sub	objptr, ##36476
11334     30 52 B1 FD | 	call	#__system___getiolock_0540
11338     FD 12 02 F6 | 	mov	arg01, result1
1133c     C4 F7 B0 FD | 	call	#__system___lockmem
11340     85 01 00 FF 
11344     F8 14 06 F6 | 	mov	arg02, ##@LR__5479
11348     00 12 06 F6 | 	mov	arg01, #0
1134c     00 16 06 F6 | 	mov	arg03, #0
11350     A4 04 B1 FD | 	call	#__system___basic_print_string
11354     00 12 06 F6 | 	mov	arg01, #0
11358     0F 15 02 F6 | 	mov	arg02, local01
1135c     00 16 06 F6 | 	mov	arg03, #0
11360     0A 18 06 F6 | 	mov	arg04, #10
11364     14 05 B1 FD | 	call	#__system___basic_print_unsigned
11368     85 01 00 FF 
1136c     FF 14 06 F6 | 	mov	arg02, ##@LR__5480
11370     00 12 06 F6 | 	mov	arg01, #0
11374     00 16 06 F6 | 	mov	arg03, #0
11378     7C 04 B1 FD | 	call	#__system___basic_print_string
1137c     02 1E 66 F0 | 	shl	local01, #2
11380     45 00 00 FF 
11384     7C E4 05 F1 | 	add	objptr, ##35452
11388     F2 1E 02 F1 | 	add	local01, objptr
1138c     0F 15 02 FB | 	rdlong	arg02, local01
11390     00 12 06 F6 | 	mov	arg01, #0
11394     00 16 06 F6 | 	mov	arg03, #0
11398     45 00 00 FF 
1139c     7C E4 85 F1 | 	sub	objptr, ##35452
113a0     54 04 B1 FD | 	call	#__system___basic_print_string
113a4     00 12 06 F6 | 	mov	arg01, #0
113a8     0A 14 06 F6 | 	mov	arg02, #10
113ac     00 16 06 F6 | 	mov	arg03, #0
113b0     EC 03 B1 FD | 	call	#__system___basic_print_char
113b4     00 12 06 F6 | 	mov	arg01, #0
113b8     AC 51 B1 FD | 	call	#__system___getiolock_0540
113bc     FD 00 68 FC | 	wrlong	#0, result1
113c0     A7 F0 03 F6 | 	mov	ptra, fp
113c4     B2 00 A0 FD | 	call	#popregs_
113c8                 | _do_error_ret
113c8     2D 00 64 FD | 	ret
113cc                 | 
113cc                 | ' 
113cc                 | ' 
113cc                 | ' '------------------ Assigning to a variable  
113cc                 | ' 
113cc                 | ' function  convertstring(psaddr as ulong) as string
113cc                 | _convertstring
113cc     04 4A 05 F6 | 	mov	COUNT_, #4
113d0     A8 00 A0 FD | 	call	#pushregs_
113d4     09 1F 02 F6 | 	mov	local01, arg01
113d8     24 C4 B0 FD | 	call	#_pslpeek
113dc     FD 20 02 F6 | 	mov	local02, result1
113e0     85 01 00 FF 
113e4     02 23 06 F6 | 	mov	local03, ##@LR__5481
113e8                 | ' 'print "in convertstring: psaddr=";psaddr
113e8                 | ' l=pslpeek(psaddr)
113e8                 | ' 'print "in convertstring: len=";l
113e8                 | ' s="" 
113e8                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
113e8     01 24 06 F6 | 	mov	local04, #1
113ec     01 20 06 F1 | 	add	local02, #1
113f0                 | LR__1380
113f0     10 25 52 F2 | 	cmps	local04, local02 wc
113f4     30 00 90 3D |  if_ae	jmp	#LR__1381
113f8     0F 13 02 F6 | 	mov	arg01, local01
113fc     03 12 06 F1 | 	add	arg01, #3
11400     12 13 02 F1 | 	add	arg01, local04
11404     A0 C3 B0 FD | 	call	#_pspeek
11408     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
1140c     34 19 B1 FD | 	call	#__system__Chr_S
11410     FD 14 02 F6 | 	mov	arg02, result1
11414     11 13 02 F6 | 	mov	arg01, local03
11418     44 F7 B0 FD | 	call	#__system___string_concat
1141c     FD 22 02 F6 | 	mov	local03, result1
11420     01 24 06 F1 | 	add	local04, #1
11424     C8 FF 9F FD | 	jmp	#LR__1380
11428                 | LR__1381
11428                 | ' 'print "in convertstring: str=";s
11428                 | ' return s
11428     11 FB 01 F6 | 	mov	result1, local03
1142c     A7 F0 03 F6 | 	mov	ptra, fp
11430     B2 00 A0 FD | 	call	#popregs_
11434                 | _convertstring_ret
11434     2D 00 64 FD | 	ret
11438                 | 
11438                 | ' 
11438                 | ' sub do_assign
11438                 | _do_assign
11438     05 4A 05 F6 | 	mov	COUNT_, #5
1143c     A8 00 A0 FD | 	call	#pushregs_
11440     44 F0 07 F1 | 	add	ptra, #68
11444     4A 00 00 FF 
11448     80 E4 05 F1 | 	add	objptr, ##38016
1144c     F2 16 02 FB | 	rdlong	arg03, objptr
11450     0B 15 02 F6 | 	mov	arg02, arg03
11454     01 14 66 F0 | 	shl	arg02, #1
11458     0B 15 02 F1 | 	add	arg02, arg03
1145c     02 14 66 F0 | 	shl	arg02, #2
11460     03 00 00 FF 
11464     04 E4 85 F1 | 	sub	objptr, ##1540
11468     F2 14 02 F1 | 	add	arg02, objptr
1146c     0A 15 02 FB | 	rdlong	arg02, arg02
11470     18 4E 05 F1 | 	add	fp, #24
11474     A7 14 62 FC | 	wrlong	arg02, fp
11478                 | ' 
11478                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
11478                 | ' if variables(varnum).vartype<array_no_type then 
11478     18 4E 85 F1 | 	sub	fp, #24
1147c     04 14 66 F0 | 	shl	arg02, #4
11480     32 00 00 FF 
11484     84 E4 85 F1 | 	sub	objptr, ##25732
11488     F2 14 02 F1 | 	add	arg02, objptr
1148c     0C 14 06 F1 | 	add	arg02, #12
11490     0A 17 02 FB | 	rdlong	arg03, arg02
11494     00 17 16 F2 | 	cmp	arg03, #256 wc
11498     14 00 00 FF 
1149c     F8 E5 85 F1 | 	sub	objptr, ##10744
114a0     18 01 90 3D |  if_ae	jmp	#LR__1390
114a4     7C 9D BF FD | 	call	#_pop
114a8     A7 FA 61 FC | 	wrlong	result1, fp
114ac     04 4E 05 F1 | 	add	fp, #4
114b0     A7 FC 61 FC | 	wrlong	result2, fp
114b4     04 4E 05 F1 | 	add	fp, #4
114b8     A7 FE 61 FC | 	wrlong	result3, fp
114bc     08 4E 85 F1 | 	sub	fp, #8
114c0     A7 16 02 FB | 	rdlong	arg03, fp
114c4     04 4E 05 F1 | 	add	fp, #4
114c8     A7 14 02 FB | 	rdlong	arg02, fp
114cc     14 4E 05 F1 | 	add	fp, #20
114d0     A7 12 02 FB | 	rdlong	arg01, fp
114d4     04 12 66 F0 | 	shl	arg01, #4
114d8     14 00 00 FF 
114dc     F8 E5 05 F1 | 	add	objptr, ##10744
114e0     F2 12 02 F1 | 	add	arg01, objptr
114e4     04 12 06 F1 | 	add	arg01, #4
114e8     09 17 62 FC | 	wrlong	arg03, arg01
114ec     A7 16 02 FB | 	rdlong	arg03, fp
114f0     04 16 66 F0 | 	shl	arg03, #4
114f4     F2 16 02 F1 | 	add	arg03, objptr
114f8     08 16 06 F1 | 	add	arg03, #8
114fc     0B 15 62 FC | 	wrlong	arg02, arg03
11500     A7 16 02 FB | 	rdlong	arg03, fp
11504     04 16 66 F0 | 	shl	arg03, #4
11508     F2 16 02 F1 | 	add	arg03, objptr
1150c     10 4E 85 F1 | 	sub	fp, #16
11510     A7 14 02 FB | 	rdlong	arg02, fp
11514     0C 16 06 F1 | 	add	arg03, #12
11518     0B 15 62 FC | 	wrlong	arg02, arg03
1151c                 | '   t1=pop() 
1151c                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1151c                 | '   if variables(varnum).vartype<>result_string2 then return
1151c     10 4E 05 F1 | 	add	fp, #16
11520     A7 16 02 FB | 	rdlong	arg03, fp
11524     18 4E 85 F1 | 	sub	fp, #24
11528     04 16 66 F0 | 	shl	arg03, #4
1152c     F2 16 02 F1 | 	add	arg03, objptr
11530     0C 16 06 F1 | 	add	arg03, #12
11534     0B 17 02 FB | 	rdlong	arg03, arg03
11538     2B 16 0E F2 | 	cmp	arg03, #43 wz
1153c     14 00 00 FF 
11540     F8 E5 85 F1 | 	sub	objptr, ##10744
11544     E4 04 90 5D |  if_ne	jmp	#LR__1413
11548     18 4E 05 F1 | 	add	fp, #24
1154c     A7 16 02 FB | 	rdlong	arg03, fp
11550     0B 1F 02 F6 | 	mov	local01, arg03
11554     04 1E 66 F0 | 	shl	local01, #4
11558     14 00 00 FF 
1155c     F8 E5 05 F1 | 	add	objptr, ##10744
11560     F2 1E 02 F1 | 	add	local01, objptr
11564     18 4E 85 F1 | 	sub	fp, #24
11568     04 16 66 F0 | 	shl	arg03, #4
1156c     F2 16 02 F1 | 	add	arg03, objptr
11570     04 16 06 F1 | 	add	arg03, #4
11574     0B 13 02 FB | 	rdlong	arg01, arg03
11578     14 00 00 FF 
1157c     F8 E5 85 F1 | 	sub	objptr, ##10744
11580     48 FE BF FD | 	call	#_convertstring
11584     04 1E 06 F1 | 	add	local01, #4
11588     0F FB 61 FC | 	wrlong	result1, local01
1158c     18 4E 05 F1 | 	add	fp, #24
11590     A7 1E 02 FB | 	rdlong	local01, fp
11594     18 4E 85 F1 | 	sub	fp, #24
11598     04 1E 66 F0 | 	shl	local01, #4
1159c     14 00 00 FF 
115a0     F8 E5 05 F1 | 	add	objptr, ##10744
115a4     F2 1E 02 F1 | 	add	local01, objptr
115a8     0C 1E 06 F1 | 	add	local01, #12
115ac     0F 3F 68 FC | 	wrlong	#31, local01
115b0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
115b0                 | '   variables(varnum).vartype=result_string
115b0                 | '   return
115b0     14 00 00 FF 
115b4     F8 E5 85 F1 | 	sub	objptr, ##10744
115b8     70 04 90 FD | 	jmp	#LR__1413
115bc                 | LR__1390
115bc                 | ' for i=0 to 2 : arrid(i)=0 : next i
115bc     1C 4E 05 F1 | 	add	fp, #28
115c0     A7 00 68 FC | 	wrlong	#0, fp
115c4     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
115c8                 | LR__1391
115c8     A7 1E 02 FB | 	rdlong	local01, fp
115cc     02 1E 66 F0 | 	shl	local01, #2
115d0     18 4E 05 F1 | 	add	fp, #24
115d4     A7 1E 02 F1 | 	add	local01, fp
115d8     0F 01 68 FC | 	wrlong	#0, local01
115dc     18 4E 85 F1 | 	sub	fp, #24
115e0     A7 1E 02 FB | 	rdlong	local01, fp
115e4     01 1E 06 F1 | 	add	local01, #1
115e8     A7 1E 62 FC | 	wrlong	local01, fp
115ec     03 1E 16 F2 | 	cmp	local01, #3 wc
115f0     D4 FF 9F CD |  if_b	jmp	#LR__1391
115f4                 | LR__1392
115f4     4A 00 00 FF 
115f8     80 E4 05 F1 | 	add	objptr, ##38016
115fc     F2 16 02 FB | 	rdlong	arg03, objptr
11600     0B 1F 02 F6 | 	mov	local01, arg03
11604     01 1E 66 F0 | 	shl	local01, #1
11608     0B 1F 02 F1 | 	add	local01, arg03
1160c     02 1E 66 F0 | 	shl	local01, #2
11610     03 00 00 FF 
11614     04 E4 85 F1 | 	sub	objptr, ##1540
11618     F2 1E 02 F1 | 	add	local01, objptr
1161c     04 1E 06 F1 | 	add	local01, #4
11620     0F 21 02 FB | 	rdlong	local02, local01
11624     04 4E 05 F1 | 	add	fp, #4
11628     A7 20 62 FC | 	wrlong	local02, fp
1162c     20 4E 85 F1 | 	sub	fp, #32
11630     47 00 00 FF 
11634     7C E4 85 F1 | 	sub	objptr, ##36476
11638     E8 9B BF FD | 	call	#_pop
1163c     A7 FA 61 FC | 	wrlong	result1, fp
11640     04 4E 05 F1 | 	add	fp, #4
11644     A7 FC 61 FC | 	wrlong	result2, fp
11648     04 4E 05 F1 | 	add	fp, #4
1164c     A7 FE 61 FC | 	wrlong	result3, fp
11650                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
11650                 | ' t1=pop() ' var value
11650                 | ' if numpar>0 then
11650     18 4E 05 F1 | 	add	fp, #24
11654     A7 22 02 FB | 	rdlong	local03, fp
11658     20 4E 85 F1 | 	sub	fp, #32
1165c     01 22 16 F2 | 	cmp	local03, #1 wc
11660     78 00 90 CD |  if_b	jmp	#LR__1395
11664                 | '   for i=numpar to 1 step -1
11664     20 4E 05 F1 | 	add	fp, #32
11668     A7 24 0A FB | 	rdlong	local04, fp wz
1166c     04 4E 85 F1 | 	sub	fp, #4
11670     A7 24 62 FC | 	wrlong	local04, fp
11674     1C 4E 85 F1 | 	sub	fp, #28
11678     60 00 90 AD |  if_e	jmp	#LR__1394
1167c                 | LR__1393
1167c     A4 9B BF FD | 	call	#_pop
11680     0C 4E 05 F1 | 	add	fp, #12
11684     A7 FA 61 FC | 	wrlong	result1, fp
11688     04 4E 05 F1 | 	add	fp, #4
1168c     A7 FC 61 FC | 	wrlong	result2, fp
11690     04 4E 05 F1 | 	add	fp, #4
11694     A7 FE 61 FC | 	wrlong	result3, fp
11698     08 4E 05 F1 | 	add	fp, #8
1169c     A7 22 02 FB | 	rdlong	local03, fp
116a0     01 22 86 F1 | 	sub	local03, #1
116a4     02 22 66 F0 | 	shl	local03, #2
116a8     18 4E 05 F1 | 	add	fp, #24
116ac     A7 22 02 F1 | 	add	local03, fp
116b0     28 4E 85 F1 | 	sub	fp, #40
116b4     A7 12 02 F6 | 	mov	arg01, fp
116b8     0C 4E 85 F1 | 	sub	fp, #12
116bc     30 45 B0 FD | 	call	#_converttoint
116c0     11 FB 61 FC | 	wrlong	result1, local03
116c4     1C 4E 05 F1 | 	add	fp, #28
116c8     A7 24 02 FB | 	rdlong	local04, fp
116cc     01 24 8E F1 | 	sub	local04, #1 wz
116d0     A7 24 62 FC | 	wrlong	local04, fp
116d4     1C 4E 85 F1 | 	sub	fp, #28
116d8     A0 FF 9F 5D |  if_ne	jmp	#LR__1393
116dc                 | LR__1394
116dc                 | LR__1395
116dc     18 4E 05 F1 | 	add	fp, #24
116e0     A7 1E 02 FB | 	rdlong	local01, fp
116e4     04 1E 66 F0 | 	shl	local01, #4
116e8     14 00 00 FF 
116ec     F8 E5 05 F1 | 	add	objptr, ##10744
116f0     F2 1E 02 F1 | 	add	local01, objptr
116f4     04 1E 06 F1 | 	add	local01, #4
116f8     0F 13 02 FB | 	rdlong	arg01, local01
116fc     0C 4E 05 F1 | 	add	fp, #12
11700     A7 12 62 FC | 	wrlong	arg01, fp
11704     24 4E 85 F1 | 	sub	fp, #36
11708     14 00 00 FF 
1170c     F8 E5 85 F1 | 	sub	objptr, ##10744
11710     EC C0 B0 FD | 	call	#_pslpeek
11714     FD 24 32 F9 | 	getword	local04, result1, #0
11718     28 4E 05 F1 | 	add	fp, #40
1171c     A7 24 62 FC | 	wrlong	local04, fp
11720     04 4E 85 F1 | 	sub	fp, #4
11724     A7 12 02 FB | 	rdlong	arg01, fp
11728     24 4E 85 F1 | 	sub	fp, #36
1172c     02 12 06 F1 | 	add	arg01, #2
11730     74 C0 B0 FD | 	call	#_pspeek
11734     FD FA E1 F8 | 	getbyte	result1, result1, #0
11738     2C 4E 05 F1 | 	add	fp, #44
1173c     A7 FA 61 FC | 	wrlong	result1, fp
11740                 | ' esize=pspeek(arrptr+2)
11740                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
11740     08 4E 85 F1 | 	sub	fp, #8
11744     A7 12 02 FB | 	rdlong	arg01, fp
11748     24 4E 85 F1 | 	sub	fp, #36
1174c     04 12 06 F1 | 	add	arg01, #4
11750     AC C0 B0 FD | 	call	#_pslpeek
11754     FD 24 02 F6 | 	mov	local04, result1
11758     34 4E 05 F1 | 	add	fp, #52
1175c     A7 1E 02 FB | 	rdlong	local01, fp
11760     34 4E 85 F1 | 	sub	fp, #52
11764     12 1F 12 F2 | 	cmp	local01, local04 wc
11768     54 00 90 3D |  if_ae	jmp	#LR__1396
1176c     24 4E 05 F1 | 	add	fp, #36
11770     A7 12 02 FB | 	rdlong	arg01, fp
11774     24 4E 85 F1 | 	sub	fp, #36
11778     08 12 06 F1 | 	add	arg01, #8
1177c     80 C0 B0 FD | 	call	#_pslpeek
11780     FD 1E 02 F6 | 	mov	local01, result1
11784     38 4E 05 F1 | 	add	fp, #56
11788     A7 24 02 FB | 	rdlong	local04, fp
1178c     38 4E 85 F1 | 	sub	fp, #56
11790     0F 25 12 F2 | 	cmp	local04, local01 wc
11794     28 00 90 3D |  if_ae	jmp	#LR__1396
11798     24 4E 05 F1 | 	add	fp, #36
1179c     A7 12 02 FB | 	rdlong	arg01, fp
117a0     24 4E 85 F1 | 	sub	fp, #36
117a4     0C 12 06 F1 | 	add	arg01, #12
117a8     54 C0 B0 FD | 	call	#_pslpeek
117ac     3C 4E 05 F1 | 	add	fp, #60
117b0     A7 24 02 FB | 	rdlong	local04, fp
117b4     3C 4E 85 F1 | 	sub	fp, #60
117b8     FD 24 12 F2 | 	cmp	local04, result1 wc
117bc     0C 00 90 CD |  if_b	jmp	#LR__1397
117c0                 | LR__1396
117c0     31 12 06 F6 | 	mov	arg01, #49
117c4     A4 BD B0 FD | 	call	#_printerror
117c8     60 02 90 FD | 	jmp	#LR__1413
117cc                 | LR__1397
117cc     24 4E 05 F1 | 	add	fp, #36
117d0     A7 12 02 FB | 	rdlong	arg01, fp
117d4     09 25 02 F6 | 	mov	local04, arg01
117d8     10 24 06 F1 | 	add	local04, #16
117dc     24 4E 85 F1 | 	sub	fp, #36
117e0     04 12 06 F1 | 	add	arg01, #4
117e4     18 C0 B0 FD | 	call	#_pslpeek
117e8     FD 1E 02 F6 | 	mov	local01, result1
117ec     38 4E 05 F1 | 	add	fp, #56
117f0     A7 20 02 FB | 	rdlong	local02, fp
117f4     10 1F 02 FD | 	qmul	local01, local02
117f8     04 4E 85 F1 | 	sub	fp, #4
117fc     A7 22 02 FB | 	rdlong	local03, fp
11800     10 4E 85 F1 | 	sub	fp, #16
11804     A7 12 02 FB | 	rdlong	arg01, fp
11808     24 4E 85 F1 | 	sub	fp, #36
1180c     08 12 06 F1 | 	add	arg01, #8
11810     18 20 62 FD | 	getqx	local02
11814     10 23 02 F1 | 	add	local03, local02
11818     E4 BF B0 FD | 	call	#_pslpeek
1181c     FD 20 02 F6 | 	mov	local02, result1
11820     24 4E 05 F1 | 	add	fp, #36
11824     A7 12 02 FB | 	rdlong	arg01, fp
11828     24 4E 85 F1 | 	sub	fp, #36
1182c     04 12 06 F1 | 	add	arg01, #4
11830     CC BF B0 FD | 	call	#_pslpeek
11834     FD 20 02 FD | 	qmul	local02, result1
11838     3C 4E 05 F1 | 	add	fp, #60
1183c     A7 20 02 FB | 	rdlong	local02, fp
11840     18 1E 62 FD | 	getqx	local01
11844     10 1F 02 FD | 	qmul	local01, local02
11848     10 4E 85 F1 | 	sub	fp, #16
1184c     A7 20 02 FB | 	rdlong	local02, fp
11850     18 1E 62 FD | 	getqx	local01
11854     0F 23 02 F1 | 	add	local03, local01
11858     11 21 02 FD | 	qmul	local02, local03
1185c     04 4E 05 F1 | 	add	fp, #4
11860                 | ' 
11860                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
11860                 | ' select case arrtype
11860     18 22 62 FD | 	getqx	local03
11864     11 25 02 F1 | 	add	local04, local03
11868     A7 24 62 FC | 	wrlong	local04, fp
1186c     08 4E 85 F1 | 	sub	fp, #8
11870     A7 26 02 FB | 	rdlong	local05, fp
11874     28 4E 85 F1 | 	sub	fp, #40
11878     00 27 86 F1 | 	sub	local05, #256
1187c     0C 26 26 F3 | 	fle	local05, #12
11880     30 26 62 FD | 	jmprel	local05
11884                 | LR__1398
11884     30 00 90 FD | 	jmp	#LR__1399
11888     58 00 90 FD | 	jmp	#LR__1400
1188c     6C 00 90 FD | 	jmp	#LR__1401
11890     80 00 90 FD | 	jmp	#LR__1402
11894     B0 00 90 FD | 	jmp	#LR__1403
11898     E0 00 90 FD | 	jmp	#LR__1404
1189c     F4 00 90 FD | 	jmp	#LR__1405
118a0     08 01 90 FD | 	jmp	#LR__1406
118a4     1C 01 90 FD | 	jmp	#LR__1407
118a8     30 01 90 FD | 	jmp	#LR__1408
118ac     44 01 90 FD | 	jmp	#LR__1409
118b0     58 01 90 FD | 	jmp	#LR__1410
118b4     6C 01 90 FD | 	jmp	#LR__1411
118b8                 | LR__1399
118b8     A7 12 02 F6 | 	mov	arg01, fp
118bc     30 4E 05 F1 | 	add	fp, #48
118c0     A7 14 02 FB | 	rdlong	arg02, fp
118c4     30 4E 85 F1 | 	sub	fp, #48
118c8     0C 16 06 F6 | 	mov	arg03, #12
118cc     0B 00 00 FF 
118d0     CC E4 05 F1 | 	add	objptr, ##5836
118d4     88 E6 B0 FD | 	call	#_psram_spin2_write
118d8     0B 00 00 FF 
118dc     CC E4 85 F1 | 	sub	objptr, ##5836
118e0     48 01 90 FD | 	jmp	#LR__1412
118e4                 | LR__1400
118e4     30 4E 05 F1 | 	add	fp, #48
118e8     A7 12 02 FB | 	rdlong	arg01, fp
118ec     30 4E 85 F1 | 	sub	fp, #48
118f0     A7 14 02 FB | 	rdlong	arg02, fp
118f4     68 BE B0 FD | 	call	#_pspoke
118f8     30 01 90 FD | 	jmp	#LR__1412
118fc                 | LR__1401
118fc     30 4E 05 F1 | 	add	fp, #48
11900     A7 12 02 FB | 	rdlong	arg01, fp
11904     30 4E 85 F1 | 	sub	fp, #48
11908     A7 14 02 FB | 	rdlong	arg02, fp
1190c     50 BE B0 FD | 	call	#_pspoke
11910     18 01 90 FD | 	jmp	#LR__1412
11914                 | LR__1402
11914     30 4E 05 F1 | 	add	fp, #48
11918     A7 12 02 FB | 	rdlong	arg01, fp
1191c     30 4E 85 F1 | 	sub	fp, #48
11920     A7 14 02 FB | 	rdlong	arg02, fp
11924     38 BE B0 FD | 	call	#_pspoke
11928     30 4E 05 F1 | 	add	fp, #48
1192c     A7 12 02 FB | 	rdlong	arg01, fp
11930     30 4E 85 F1 | 	sub	fp, #48
11934     01 12 06 F1 | 	add	arg01, #1
11938     A7 14 02 FB | 	rdlong	arg02, fp
1193c     08 14 46 F0 | 	shr	arg02, #8
11940     1C BE B0 FD | 	call	#_pspoke
11944     E4 00 90 FD | 	jmp	#LR__1412
11948                 | LR__1403
11948     30 4E 05 F1 | 	add	fp, #48
1194c     A7 12 02 FB | 	rdlong	arg01, fp
11950     30 4E 85 F1 | 	sub	fp, #48
11954     A7 14 02 FB | 	rdlong	arg02, fp
11958     04 BE B0 FD | 	call	#_pspoke
1195c     30 4E 05 F1 | 	add	fp, #48
11960     A7 12 02 FB | 	rdlong	arg01, fp
11964     30 4E 85 F1 | 	sub	fp, #48
11968     01 12 06 F1 | 	add	arg01, #1
1196c     A7 14 02 FB | 	rdlong	arg02, fp
11970     08 14 46 F0 | 	shr	arg02, #8
11974     E8 BD B0 FD | 	call	#_pspoke
11978     B0 00 90 FD | 	jmp	#LR__1412
1197c                 | LR__1404
1197c     30 4E 05 F1 | 	add	fp, #48
11980     A7 12 02 FB | 	rdlong	arg01, fp
11984     30 4E 85 F1 | 	sub	fp, #48
11988     A7 14 02 FB | 	rdlong	arg02, fp
1198c     40 BD B0 FD | 	call	#_pslpoke
11990     98 00 90 FD | 	jmp	#LR__1412
11994                 | LR__1405
11994     30 4E 05 F1 | 	add	fp, #48
11998     A7 12 02 FB | 	rdlong	arg01, fp
1199c     30 4E 85 F1 | 	sub	fp, #48
119a0     A7 14 02 FB | 	rdlong	arg02, fp
119a4     28 BD B0 FD | 	call	#_pslpoke
119a8     80 00 90 FD | 	jmp	#LR__1412
119ac                 | LR__1406
119ac     30 4E 05 F1 | 	add	fp, #48
119b0     A7 12 02 FB | 	rdlong	arg01, fp
119b4     30 4E 85 F1 | 	sub	fp, #48
119b8     A7 14 02 FB | 	rdlong	arg02, fp
119bc     10 BD B0 FD | 	call	#_pslpoke
119c0     68 00 90 FD | 	jmp	#LR__1412
119c4                 | LR__1407
119c4     30 4E 05 F1 | 	add	fp, #48
119c8     A7 12 02 FB | 	rdlong	arg01, fp
119cc     30 4E 85 F1 | 	sub	fp, #48
119d0     A7 14 02 FB | 	rdlong	arg02, fp
119d4     F8 BC B0 FD | 	call	#_pslpoke
119d8     50 00 90 FD | 	jmp	#LR__1412
119dc                 | LR__1408
119dc     30 4E 05 F1 | 	add	fp, #48
119e0     A7 12 02 FB | 	rdlong	arg01, fp
119e4     30 4E 85 F1 | 	sub	fp, #48
119e8     A7 14 02 FB | 	rdlong	arg02, fp
119ec     E0 BC B0 FD | 	call	#_pslpoke
119f0     38 00 90 FD | 	jmp	#LR__1412
119f4                 | LR__1409
119f4     30 4E 05 F1 | 	add	fp, #48
119f8     A7 12 02 FB | 	rdlong	arg01, fp
119fc     30 4E 85 F1 | 	sub	fp, #48
11a00     A7 14 02 FB | 	rdlong	arg02, fp
11a04     C8 BC B0 FD | 	call	#_pslpoke
11a08     20 00 90 FD | 	jmp	#LR__1412
11a0c                 | LR__1410
11a0c     30 4E 05 F1 | 	add	fp, #48
11a10     A7 12 02 FB | 	rdlong	arg01, fp
11a14     30 4E 85 F1 | 	sub	fp, #48
11a18     A7 14 02 FB | 	rdlong	arg02, fp
11a1c     B0 BC B0 FD | 	call	#_pslpoke
11a20     08 00 90 FD | 	jmp	#LR__1412
11a24                 | LR__1411
11a24     32 12 06 F6 | 	mov	arg01, #50
11a28     40 BB B0 FD | 	call	#_printerror
11a2c                 | LR__1412
11a2c                 | LR__1413
11a2c     A7 F0 03 F6 | 	mov	ptra, fp
11a30     B2 00 A0 FD | 	call	#popregs_
11a34                 | _do_assign_ret
11a34     2D 00 64 FD | 	ret
11a38                 | 
11a38                 | ' 
11a38                 | ' 
11a38                 | ' ' --------------------- Read a variable and push to the stack
11a38                 | ' 
11a38                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
11a38                 | ' 
11a38                 | ' sub do_getvar
11a38                 | _do_getvar
11a38     04 4A 05 F6 | 	mov	COUNT_, #4
11a3c     A8 00 A0 FD | 	call	#pushregs_
11a40     3C F0 07 F1 | 	add	ptra, #60
11a44                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11a44                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11a44     4A 00 00 FF 
11a48     80 E4 05 F1 | 	add	objptr, ##38016
11a4c     F2 1E 02 FB | 	rdlong	local01, objptr
11a50     0F 17 02 F6 | 	mov	arg03, local01
11a54     01 16 66 F0 | 	shl	arg03, #1
11a58     0F 17 02 F1 | 	add	arg03, local01
11a5c     02 16 66 F0 | 	shl	arg03, #2
11a60     03 00 00 FF 
11a64     04 E4 85 F1 | 	sub	objptr, ##1540
11a68     F2 16 02 F1 | 	add	arg03, objptr
11a6c     04 16 06 F1 | 	add	arg03, #4
11a70     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11a74     47 00 00 FF 
11a78     7C E4 85 F1 | 	sub	objptr, ##36476
11a7c     C4 00 90 5D |  if_ne	jmp	#LR__1421
11a80     4A 00 00 FF 
11a84     80 E4 05 F1 | 	add	objptr, ##38016
11a88     F2 1E 02 FB | 	rdlong	local01, objptr
11a8c     0F 13 02 F6 | 	mov	arg01, local01
11a90     01 12 66 F0 | 	shl	arg01, #1
11a94     0F 13 02 F1 | 	add	arg01, local01
11a98     02 12 66 F0 | 	shl	arg01, #2
11a9c     03 00 00 FF 
11aa0     04 E4 85 F1 | 	sub	objptr, ##1540
11aa4     F2 12 02 F1 | 	add	arg01, objptr
11aa8     09 1F 02 FB | 	rdlong	local01, arg01
11aac     04 1E 66 F0 | 	shl	local01, #4
11ab0     32 00 00 FF 
11ab4     84 E4 85 F1 | 	sub	objptr, ##25732
11ab8     F2 1E 02 F1 | 	add	local01, objptr
11abc     04 1E 06 F1 | 	add	local01, #4
11ac0     0F 13 02 FB | 	rdlong	arg01, local01
11ac4     04 1E 06 F1 | 	add	local01, #4
11ac8     0F 1F 02 FB | 	rdlong	local01, local01
11acc     A7 12 62 FC | 	wrlong	arg01, fp
11ad0     04 4E 05 F1 | 	add	fp, #4
11ad4     A7 1E 62 FC | 	wrlong	local01, fp
11ad8     35 00 00 FF 
11adc     88 E4 05 F1 | 	add	objptr, ##27272
11ae0     F2 1E 02 FB | 	rdlong	local01, objptr
11ae4     0F 13 02 F6 | 	mov	arg01, local01
11ae8     01 12 66 F0 | 	shl	arg01, #1
11aec     0F 13 02 F1 | 	add	arg01, local01
11af0     02 12 66 F0 | 	shl	arg01, #2
11af4     03 00 00 FF 
11af8     04 E4 85 F1 | 	sub	objptr, ##1540
11afc     F2 12 02 F1 | 	add	arg01, objptr
11b00     09 1F 02 FB | 	rdlong	local01, arg01
11b04     04 1E 66 F0 | 	shl	local01, #4
11b08     32 00 00 FF 
11b0c     84 E4 85 F1 | 	sub	objptr, ##25732
11b10     F2 1E 02 F1 | 	add	local01, objptr
11b14     0C 1E 06 F1 | 	add	local01, #12
11b18     0F 1F 02 FB | 	rdlong	local01, local01
11b1c     04 4E 05 F1 | 	add	fp, #4
11b20     A7 1E 62 FC | 	wrlong	local01, fp
11b24                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
11b24                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11b24                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
11b24     08 4E 85 F1 | 	sub	fp, #8
11b28     00 1F 16 F2 | 	cmp	local01, #256 wc
11b2c     14 00 00 FF 
11b30     F8 E5 85 F1 | 	sub	objptr, ##10744
11b34     0C 00 90 3D |  if_ae	jmp	#LR__1420
11b38     A7 12 02 F6 | 	mov	arg01, fp
11b3c     7C 97 BF FD | 	call	#_push
11b40     A0 04 90 FD | 	jmp	#LR__1442
11b44                 | LR__1420
11b44                 | LR__1421
11b44     4A 00 00 FF 
11b48     80 E4 05 F1 | 	add	objptr, ##38016
11b4c     F2 16 02 FB | 	rdlong	arg03, objptr
11b50     0B 15 02 F6 | 	mov	arg02, arg03
11b54     01 14 66 F0 | 	shl	arg02, #1
11b58     0B 15 02 F1 | 	add	arg02, arg03
11b5c     02 14 66 F0 | 	shl	arg02, #2
11b60     03 00 00 FF 
11b64     04 E4 85 F1 | 	sub	objptr, ##1540
11b68     F2 14 02 F1 | 	add	arg02, objptr
11b6c     0A 17 02 FB | 	rdlong	arg03, arg02
11b70     04 16 66 F0 | 	shl	arg03, #4
11b74     32 00 00 FF 
11b78     84 E4 85 F1 | 	sub	objptr, ##25732
11b7c     F2 16 02 F1 | 	add	arg03, objptr
11b80     04 16 06 F1 | 	add	arg03, #4
11b84     0B 13 02 FB | 	rdlong	arg01, arg03
11b88     0C 4E 05 F1 | 	add	fp, #12
11b8c     A7 12 62 FC | 	wrlong	arg01, fp
11b90     0C 4E 85 F1 | 	sub	fp, #12
11b94     14 00 00 FF 
11b98     F8 E5 85 F1 | 	sub	objptr, ##10744
11b9c     60 BC B0 FD | 	call	#_pslpeek
11ba0     FD FA 31 F9 | 	getword	result1, result1, #0
11ba4     10 4E 05 F1 | 	add	fp, #16
11ba8     A7 FA 61 FC | 	wrlong	result1, fp
11bac     4A 00 00 FF 
11bb0     80 E4 05 F1 | 	add	objptr, ##38016
11bb4     F2 16 02 FB | 	rdlong	arg03, objptr
11bb8     0B 15 02 F6 | 	mov	arg02, arg03
11bbc     01 14 66 F0 | 	shl	arg02, #1
11bc0     0B 15 02 F1 | 	add	arg02, arg03
11bc4     02 14 66 F0 | 	shl	arg02, #2
11bc8     03 00 00 FF 
11bcc     04 E4 85 F1 | 	sub	objptr, ##1540
11bd0     F2 14 02 F1 | 	add	arg02, objptr
11bd4     04 14 06 F1 | 	add	arg02, #4
11bd8     0A 17 02 FB | 	rdlong	arg03, arg02
11bdc     04 4E 05 F1 | 	add	fp, #4
11be0     A7 16 62 FC | 	wrlong	arg03, fp
11be4     08 4E 85 F1 | 	sub	fp, #8
11be8     A7 12 02 FB | 	rdlong	arg01, fp
11bec     0C 4E 85 F1 | 	sub	fp, #12
11bf0     02 12 06 F1 | 	add	arg01, #2
11bf4     47 00 00 FF 
11bf8     7C E4 85 F1 | 	sub	objptr, ##36476
11bfc     A8 BB B0 FD | 	call	#_pspeek
11c00     FD FA E1 F8 | 	getbyte	result1, result1, #0
11c04     18 4E 05 F1 | 	add	fp, #24
11c08     A7 FA 61 FC | 	wrlong	result1, fp
11c0c     0C 4E 85 F1 | 	sub	fp, #12
11c10     A7 12 02 FB | 	rdlong	arg01, fp
11c14     0C 4E 85 F1 | 	sub	fp, #12
11c18     04 12 06 F1 | 	add	arg01, #4
11c1c     E0 BB B0 FD | 	call	#_pslpeek
11c20     1C 4E 05 F1 | 	add	fp, #28
11c24     A7 FA 61 FC | 	wrlong	result1, fp
11c28     10 4E 85 F1 | 	sub	fp, #16
11c2c     A7 12 02 FB | 	rdlong	arg01, fp
11c30     0C 4E 85 F1 | 	sub	fp, #12
11c34     08 12 06 F1 | 	add	arg01, #8
11c38     C4 BB B0 FD | 	call	#_pslpeek
11c3c     20 4E 05 F1 | 	add	fp, #32
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     14 4E 85 F1 | 	sub	fp, #20
11c48     A7 12 02 FB | 	rdlong	arg01, fp
11c4c     0C 4E 85 F1 | 	sub	fp, #12
11c50     0C 12 06 F1 | 	add	arg01, #12
11c54     A8 BB B0 FD | 	call	#_pslpeek
11c58     24 4E 05 F1 | 	add	fp, #36
11c5c     A7 FA 61 FC | 	wrlong	result1, fp
11c60                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11c60                 | ' esize=pspeek(arrptr+2)
11c60                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11c60                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11c60                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11c60                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11c60     10 4E 85 F1 | 	sub	fp, #16
11c64     A7 16 02 FB | 	rdlong	arg03, fp
11c68     14 4E 85 F1 | 	sub	fp, #20
11c6c     03 16 16 F2 | 	cmp	arg03, #3 wc
11c70     38 00 90 CD |  if_b	jmp	#LR__1422
11c74     AC 95 BF FD | 	call	#_pop
11c78     FF 16 02 F6 | 	mov	arg03, result3
11c7c     A7 FA 61 FC | 	wrlong	result1, fp
11c80     04 4E 05 F1 | 	add	fp, #4
11c84     A7 FC 61 FC | 	wrlong	result2, fp
11c88     04 4E 05 F1 | 	add	fp, #4
11c8c     A7 16 62 FC | 	wrlong	arg03, fp
11c90     08 4E 85 F1 | 	sub	fp, #8
11c94     A7 12 02 F6 | 	mov	arg01, fp
11c98     54 3F B0 FD | 	call	#_converttoint
11c9c     30 4E 05 F1 | 	add	fp, #48
11ca0     A7 FA 61 FC | 	wrlong	result1, fp
11ca4     30 4E 85 F1 | 	sub	fp, #48
11ca8     0C 00 90 FD | 	jmp	#LR__1423
11cac                 | LR__1422
11cac     30 4E 05 F1 | 	add	fp, #48
11cb0     A7 00 68 FC | 	wrlong	#0, fp
11cb4     30 4E 85 F1 | 	sub	fp, #48
11cb8                 | LR__1423
11cb8                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11cb8     14 4E 05 F1 | 	add	fp, #20
11cbc     A7 16 02 FB | 	rdlong	arg03, fp
11cc0     14 4E 85 F1 | 	sub	fp, #20
11cc4     02 16 16 F2 | 	cmp	arg03, #2 wc
11cc8     38 00 90 CD |  if_b	jmp	#LR__1424
11ccc     54 95 BF FD | 	call	#_pop
11cd0     FF 16 02 F6 | 	mov	arg03, result3
11cd4     A7 FA 61 FC | 	wrlong	result1, fp
11cd8     04 4E 05 F1 | 	add	fp, #4
11cdc     A7 FC 61 FC | 	wrlong	result2, fp
11ce0     04 4E 05 F1 | 	add	fp, #4
11ce4     A7 16 62 FC | 	wrlong	arg03, fp
11ce8     08 4E 85 F1 | 	sub	fp, #8
11cec     A7 12 02 F6 | 	mov	arg01, fp
11cf0     FC 3E B0 FD | 	call	#_converttoint
11cf4     2C 4E 05 F1 | 	add	fp, #44
11cf8     A7 FA 61 FC | 	wrlong	result1, fp
11cfc     2C 4E 85 F1 | 	sub	fp, #44
11d00     0C 00 90 FD | 	jmp	#LR__1425
11d04                 | LR__1424
11d04     2C 4E 05 F1 | 	add	fp, #44
11d08     A7 00 68 FC | 	wrlong	#0, fp
11d0c     2C 4E 85 F1 | 	sub	fp, #44
11d10                 | LR__1425
11d10                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11d10     14 4E 05 F1 | 	add	fp, #20
11d14     A7 16 02 FB | 	rdlong	arg03, fp
11d18     14 4E 85 F1 | 	sub	fp, #20
11d1c     01 16 16 F2 | 	cmp	arg03, #1 wc
11d20     38 00 90 CD |  if_b	jmp	#LR__1426
11d24     FC 94 BF FD | 	call	#_pop
11d28     FF 16 02 F6 | 	mov	arg03, result3
11d2c     A7 FA 61 FC | 	wrlong	result1, fp
11d30     04 4E 05 F1 | 	add	fp, #4
11d34     A7 FC 61 FC | 	wrlong	result2, fp
11d38     04 4E 05 F1 | 	add	fp, #4
11d3c     A7 16 62 FC | 	wrlong	arg03, fp
11d40     08 4E 85 F1 | 	sub	fp, #8
11d44     A7 12 02 F6 | 	mov	arg01, fp
11d48     A4 3E B0 FD | 	call	#_converttoint
11d4c     28 4E 05 F1 | 	add	fp, #40
11d50     A7 FA 61 FC | 	wrlong	result1, fp
11d54     28 4E 85 F1 | 	sub	fp, #40
11d58     0C 00 90 FD | 	jmp	#LR__1427
11d5c                 | LR__1426
11d5c     28 4E 05 F1 | 	add	fp, #40
11d60     A7 00 68 FC | 	wrlong	#0, fp
11d64     28 4E 85 F1 | 	sub	fp, #40
11d68                 | LR__1427
11d68     0C 4E 05 F1 | 	add	fp, #12
11d6c     A7 20 02 FB | 	rdlong	local02, fp
11d70     1C 4E 05 F1 | 	add	fp, #28
11d74     A7 22 02 FB | 	rdlong	local03, fp
11d78     04 4E 05 F1 | 	add	fp, #4
11d7c     A7 FC 01 FB | 	rdlong	result2, fp
11d80     10 4E 85 F1 | 	sub	fp, #16
11d84     A7 FE 01 FB | 	rdlong	result3, fp
11d88     FF FC 01 FD | 	qmul	result2, result3
11d8c     10 20 06 F1 | 	add	local02, #16
11d90     14 4E 05 F1 | 	add	fp, #20
11d94     A7 FC 01 FB | 	rdlong	result2, fp
11d98     18 FA 61 FD | 	getqx	result1
11d9c     FF FC 01 FD | 	qmul	result2, result3
11da0     FD 22 02 F1 | 	add	local03, result1
11da4     10 4E 85 F1 | 	sub	fp, #16
11da8     A7 FE 01 FB | 	rdlong	result3, fp
11dac     18 FC 61 FD | 	getqx	result2
11db0     FF FC 01 FD | 	qmul	result2, result3
11db4     08 4E 85 F1 | 	sub	fp, #8
11db8     A7 FE 01 FB | 	rdlong	result3, fp
11dbc     18 FC 61 FD | 	getqx	result2
11dc0     FE 22 02 F1 | 	add	local03, result2
11dc4     FF 22 02 FD | 	qmul	local03, result3
11dc8     1C 4E 05 F1 | 	add	fp, #28
11dcc                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11dcc                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11dcc                 | ' 
11dcc                 | ' select case vartype
11dcc     18 FC 61 FD | 	getqx	result2
11dd0     FE 20 02 F1 | 	add	local02, result2
11dd4     A7 20 62 FC | 	wrlong	local02, fp
11dd8     24 4E 85 F1 | 	sub	fp, #36
11ddc     A7 24 02 FB | 	rdlong	local04, fp
11de0     10 4E 85 F1 | 	sub	fp, #16
11de4     00 25 86 F1 | 	sub	local04, #256
11de8     0C 24 26 F3 | 	fle	local04, #12
11dec     30 24 62 FD | 	jmprel	local04
11df0                 | LR__1428
11df0     30 00 90 FD | 	jmp	#LR__1429
11df4     58 00 90 FD | 	jmp	#LR__1430
11df8     8C 00 90 FD | 	jmp	#LR__1431
11dfc     AC 00 90 FD | 	jmp	#LR__1432
11e00     E8 00 90 FD | 	jmp	#LR__1433
11e04     08 01 90 FD | 	jmp	#LR__1434
11e08     24 01 90 FD | 	jmp	#LR__1435
11e0c     40 01 90 FD | 	jmp	#LR__1436
11e10     50 01 90 FD | 	jmp	#LR__1437
11e14     60 01 90 FD | 	jmp	#LR__1438
11e18     7C 01 90 FD | 	jmp	#LR__1439
11e1c     8C 01 90 FD | 	jmp	#LR__1440
11e20     B8 01 90 FD | 	jmp	#LR__1441
11e24                 | LR__1429
11e24     A7 12 02 F6 | 	mov	arg01, fp
11e28     34 4E 05 F1 | 	add	fp, #52
11e2c     A7 14 02 FB | 	rdlong	arg02, fp
11e30     34 4E 85 F1 | 	sub	fp, #52
11e34     0C 16 06 F6 | 	mov	arg03, #12
11e38     0B 00 00 FF 
11e3c     CC E4 05 F1 | 	add	objptr, ##5836
11e40     80 E0 B0 FD | 	call	#_psram_spin2_read1
11e44     0B 00 00 FF 
11e48     CC E4 85 F1 | 	sub	objptr, ##5836
11e4c     8C 01 90 FD | 	jmp	#LR__1441
11e50                 | LR__1430
11e50     08 4E 05 F1 | 	add	fp, #8
11e54     A7 38 68 FC | 	wrlong	#28, fp
11e58     2C 4E 05 F1 | 	add	fp, #44
11e5c     A7 12 02 FB | 	rdlong	arg01, fp
11e60     34 4E 85 F1 | 	sub	fp, #52
11e64     40 B9 B0 FD | 	call	#_pspeek
11e68     FD FA E1 F8 | 	getbyte	result1, result1, #0
11e6c     A7 FA 61 FC | 	wrlong	result1, fp
11e70     80 FA 15 F2 | 	cmp	result1, #128 wc
11e74     00 1F 66 36 |  if_ae	neg	local01, #256
11e78     A7 22 02 3B |  if_ae	rdlong	local03, fp
11e7c     11 1F 42 35 |  if_ae	or	local01, local03
11e80     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11e84     54 01 90 FD | 	jmp	#LR__1441
11e88                 | LR__1431
11e88     08 4E 05 F1 | 	add	fp, #8
11e8c     A7 3A 68 FC | 	wrlong	#29, fp
11e90     2C 4E 05 F1 | 	add	fp, #44
11e94     A7 12 02 FB | 	rdlong	arg01, fp
11e98     34 4E 85 F1 | 	sub	fp, #52
11e9c     08 B9 B0 FD | 	call	#_pspeek
11ea0     FD FA E1 F8 | 	getbyte	result1, result1, #0
11ea4     A7 FA 61 FC | 	wrlong	result1, fp
11ea8     30 01 90 FD | 	jmp	#LR__1441
11eac                 | LR__1432
11eac     08 4E 05 F1 | 	add	fp, #8
11eb0     A7 38 68 FC | 	wrlong	#28, fp
11eb4     2C 4E 05 F1 | 	add	fp, #44
11eb8     A7 12 02 FB | 	rdlong	arg01, fp
11ebc     34 4E 85 F1 | 	sub	fp, #52
11ec0     3C B9 B0 FD | 	call	#_pslpeek
11ec4     FD FA 31 F9 | 	getword	result1, result1, #0
11ec8     A7 FA 61 FC | 	wrlong	result1, fp
11ecc     40 00 00 FF 
11ed0     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11ed4     FF 7F 00 3F 
11ed8     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11edc     A7 22 02 3B |  if_ae	rdlong	local03, fp
11ee0     11 1F 42 35 |  if_ae	or	local01, local03
11ee4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11ee8     F0 00 90 FD | 	jmp	#LR__1441
11eec                 | LR__1433
11eec     08 4E 05 F1 | 	add	fp, #8
11ef0     A7 3A 68 FC | 	wrlong	#29, fp
11ef4     2C 4E 05 F1 | 	add	fp, #44
11ef8     A7 12 02 FB | 	rdlong	arg01, fp
11efc     34 4E 85 F1 | 	sub	fp, #52
11f00     FC B8 B0 FD | 	call	#_pslpeek
11f04     FD FA 31 F9 | 	getword	result1, result1, #0
11f08     A7 FA 61 FC | 	wrlong	result1, fp
11f0c     CC 00 90 FD | 	jmp	#LR__1441
11f10                 | LR__1434
11f10     08 4E 05 F1 | 	add	fp, #8
11f14     A7 38 68 FC | 	wrlong	#28, fp
11f18     2C 4E 05 F1 | 	add	fp, #44
11f1c     A7 12 02 FB | 	rdlong	arg01, fp
11f20     34 4E 85 F1 | 	sub	fp, #52
11f24     D8 B8 B0 FD | 	call	#_pslpeek
11f28     A7 FA 61 FC | 	wrlong	result1, fp
11f2c     AC 00 90 FD | 	jmp	#LR__1441
11f30                 | LR__1435
11f30     08 4E 05 F1 | 	add	fp, #8
11f34     A7 3A 68 FC | 	wrlong	#29, fp
11f38     2C 4E 05 F1 | 	add	fp, #44
11f3c     A7 12 02 FB | 	rdlong	arg01, fp
11f40     34 4E 85 F1 | 	sub	fp, #52
11f44     B8 B8 B0 FD | 	call	#_pslpeek
11f48     A7 FA 61 FC | 	wrlong	result1, fp
11f4c     8C 00 90 FD | 	jmp	#LR__1441
11f50                 | LR__1436
11f50     08 4E 05 F1 | 	add	fp, #8
11f54     A7 FE 69 FC | 	wrlong	#255, fp
11f58     08 4E 85 F1 | 	sub	fp, #8
11f5c     A7 60 68 FC | 	wrlong	#48, fp
11f60     78 00 90 FD | 	jmp	#LR__1441
11f64                 | LR__1437
11f64     08 4E 05 F1 | 	add	fp, #8
11f68     A7 FE 69 FC | 	wrlong	#255, fp
11f6c     08 4E 85 F1 | 	sub	fp, #8
11f70     A7 60 68 FC | 	wrlong	#48, fp
11f74     64 00 90 FD | 	jmp	#LR__1441
11f78                 | LR__1438
11f78     08 4E 05 F1 | 	add	fp, #8
11f7c     A7 3C 68 FC | 	wrlong	#30, fp
11f80     2C 4E 05 F1 | 	add	fp, #44
11f84     A7 12 02 FB | 	rdlong	arg01, fp
11f88     34 4E 85 F1 | 	sub	fp, #52
11f8c     70 B8 B0 FD | 	call	#_pslpeek
11f90     A7 FA 61 FC | 	wrlong	result1, fp
11f94     44 00 90 FD | 	jmp	#LR__1441
11f98                 | LR__1439
11f98     08 4E 05 F1 | 	add	fp, #8
11f9c     A7 FE 69 FC | 	wrlong	#255, fp
11fa0     08 4E 85 F1 | 	sub	fp, #8
11fa4     A7 60 68 FC | 	wrlong	#48, fp
11fa8     30 00 90 FD | 	jmp	#LR__1441
11fac                 | LR__1440
11fac     08 4E 05 F1 | 	add	fp, #8
11fb0     A7 3E 68 FC | 	wrlong	#31, fp
11fb4     2C 4E 05 F1 | 	add	fp, #44
11fb8     A7 12 02 FB | 	rdlong	arg01, fp
11fbc     34 4E 85 F1 | 	sub	fp, #52
11fc0     3C B8 B0 FD | 	call	#_pslpeek
11fc4     A7 FA 61 FC | 	wrlong	result1, fp
11fc8     00 04 00 FF 
11fcc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11fd0     08 4E 05 31 |  if_ae	add	fp, #8
11fd4     A7 56 68 3C |  if_ae	wrlong	#43, fp
11fd8     08 4E 85 31 |  if_ae	sub	fp, #8
11fdc                 | LR__1441
11fdc     A7 12 02 F6 | 	mov	arg01, fp
11fe0     D8 92 BF FD | 	call	#_push
11fe4                 | LR__1442
11fe4     A7 F0 03 F6 | 	mov	ptra, fp
11fe8     B2 00 A0 FD | 	call	#popregs_
11fec                 | _do_getvar_ret
11fec     2D 00 64 FD | 	ret
11ff0                 | 
11ff0                 | ' 
11ff0                 | ' 
11ff0                 | ' sub do_getaddr
11ff0                 | _do_getaddr
11ff0     01 4A 05 F6 | 	mov	COUNT_, #1
11ff4     A8 00 A0 FD | 	call	#pushregs_
11ff8     38 F0 07 F1 | 	add	ptra, #56
11ffc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11ffc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11ffc     4A 00 00 FF 
12000     80 E4 05 F1 | 	add	objptr, ##38016
12004     F2 12 02 FB | 	rdlong	arg01, objptr
12008     09 FD 01 F6 | 	mov	result2, arg01
1200c     01 FC 65 F0 | 	shl	result2, #1
12010     09 FD 01 F1 | 	add	result2, arg01
12014     02 FC 65 F0 | 	shl	result2, #2
12018     03 00 00 FF 
1201c     04 E4 85 F1 | 	sub	objptr, ##1540
12020     F2 FC 01 F1 | 	add	result2, objptr
12024     04 FC 05 F1 | 	add	result2, #4
12028     FE FC 09 FB | 	rdlong	result2, result2 wz
1202c     47 00 00 FF 
12030     7C E4 85 F1 | 	sub	objptr, ##36476
12034     C4 00 90 5D |  if_ne	jmp	#LR__1450
12038     4A 00 00 FF 
1203c     80 E4 05 F1 | 	add	objptr, ##38016
12040     F2 12 02 FB | 	rdlong	arg01, objptr
12044     09 FD 01 F6 | 	mov	result2, arg01
12048     01 FC 65 F0 | 	shl	result2, #1
1204c     09 FD 01 F1 | 	add	result2, arg01
12050     02 FC 65 F0 | 	shl	result2, #2
12054     03 00 00 FF 
12058     04 E4 85 F1 | 	sub	objptr, ##1540
1205c     F2 FC 01 F1 | 	add	result2, objptr
12060     FE 12 02 FB | 	rdlong	arg01, result2
12064     04 12 66 F0 | 	shl	arg01, #4
12068     32 00 00 FF 
1206c     84 E4 85 F1 | 	sub	objptr, ##25732
12070     F2 12 02 F1 | 	add	arg01, objptr
12074     0C 12 06 F1 | 	add	arg01, #12
12078     09 13 02 FB | 	rdlong	arg01, arg01
1207c     08 4E 05 F1 | 	add	fp, #8
12080     A7 12 62 FC | 	wrlong	arg01, fp
12084                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
12084                 | '    if t1.result_type>=array_no_type then goto 2200
12084     08 4E 85 F1 | 	sub	fp, #8
12088     00 13 16 F2 | 	cmp	arg01, #256 wc
1208c     14 00 00 FF 
12090     F8 E5 85 F1 | 	sub	objptr, ##10744
12094     64 00 90 3D |  if_ae	jmp	#LR__1451
12098     4A 00 00 FF 
1209c     80 E4 05 F1 | 	add	objptr, ##38016
120a0     F2 12 02 FB | 	rdlong	arg01, objptr
120a4     09 FB 01 F6 | 	mov	result1, arg01
120a8     01 FA 65 F0 | 	shl	result1, #1
120ac     09 FB 01 F1 | 	add	result1, arg01
120b0     02 FA 65 F0 | 	shl	result1, #2
120b4     03 00 00 FF 
120b8     04 E4 85 F1 | 	sub	objptr, ##1540
120bc     F2 FA 01 F1 | 	add	result1, objptr
120c0     FD FA 01 FB | 	rdlong	result1, result1
120c4     04 FA 65 F0 | 	shl	result1, #4
120c8     32 00 00 FF 
120cc     84 E4 85 F1 | 	sub	objptr, ##25732
120d0     F2 FA 01 F1 | 	add	result1, objptr
120d4     04 FA 05 F1 | 	add	result1, #4
120d8     14 00 00 FF 
120dc     F8 E5 85 F1 | 	sub	objptr, ##10744
120e0     A7 FA 61 FC | 	wrlong	result1, fp
120e4     08 4E 05 F1 | 	add	fp, #8
120e8     A7 3A 68 FC | 	wrlong	#29, fp
120ec     08 4E 85 F1 | 	sub	fp, #8
120f0     A7 12 02 F6 | 	mov	arg01, fp
120f4     C4 91 BF FD | 	call	#_push
120f8                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
120f8                 | '   t1.result_type=result_uint
120f8                 | '   push t1 : return
120f8     D8 02 90 FD | 	jmp	#LR__1460
120fc                 | LR__1450
120fc                 | LR__1451
120fc     4A 00 00 FF 
12100     80 E4 05 F1 | 	add	objptr, ##38016
12104     F2 FE 01 FB | 	rdlong	result3, objptr
12108     FF 12 02 F6 | 	mov	arg01, result3
1210c     01 12 66 F0 | 	shl	arg01, #1
12110     FF 12 02 F1 | 	add	arg01, result3
12114     02 12 66 F0 | 	shl	arg01, #2
12118     03 00 00 FF 
1211c     04 E4 85 F1 | 	sub	objptr, ##1540
12120     F2 12 02 F1 | 	add	arg01, objptr
12124     09 13 02 FB | 	rdlong	arg01, arg01
12128     04 12 66 F0 | 	shl	arg01, #4
1212c     32 00 00 FF 
12130     84 E4 85 F1 | 	sub	objptr, ##25732
12134     F2 12 02 F1 | 	add	arg01, objptr
12138     04 12 06 F1 | 	add	arg01, #4
1213c     09 13 02 FB | 	rdlong	arg01, arg01
12140     0C 4E 05 F1 | 	add	fp, #12
12144     A7 12 62 FC | 	wrlong	arg01, fp
12148     0C 4E 85 F1 | 	sub	fp, #12
1214c     14 00 00 FF 
12150     F8 E5 85 F1 | 	sub	objptr, ##10744
12154     A8 B6 B0 FD | 	call	#_pslpeek
12158     FD FA 31 F9 | 	getword	result1, result1, #0
1215c     10 4E 05 F1 | 	add	fp, #16
12160     A7 FA 61 FC | 	wrlong	result1, fp
12164     4A 00 00 FF 
12168     80 E4 05 F1 | 	add	objptr, ##38016
1216c     F2 FE 01 FB | 	rdlong	result3, objptr
12170     FF 12 02 F6 | 	mov	arg01, result3
12174     01 12 66 F0 | 	shl	arg01, #1
12178     FF 12 02 F1 | 	add	arg01, result3
1217c     02 12 66 F0 | 	shl	arg01, #2
12180     03 00 00 FF 
12184     04 E4 85 F1 | 	sub	objptr, ##1540
12188     F2 12 02 F1 | 	add	arg01, objptr
1218c     04 12 06 F1 | 	add	arg01, #4
12190     09 13 02 FB | 	rdlong	arg01, arg01
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 12 62 FC | 	wrlong	arg01, fp
1219c     08 4E 85 F1 | 	sub	fp, #8
121a0     A7 12 02 FB | 	rdlong	arg01, fp
121a4     0C 4E 85 F1 | 	sub	fp, #12
121a8     02 12 06 F1 | 	add	arg01, #2
121ac     47 00 00 FF 
121b0     7C E4 85 F1 | 	sub	objptr, ##36476
121b4     F0 B5 B0 FD | 	call	#_pspeek
121b8     FD FA E1 F8 | 	getbyte	result1, result1, #0
121bc     18 4E 05 F1 | 	add	fp, #24
121c0     A7 FA 61 FC | 	wrlong	result1, fp
121c4     0C 4E 85 F1 | 	sub	fp, #12
121c8     A7 12 02 FB | 	rdlong	arg01, fp
121cc     0C 4E 85 F1 | 	sub	fp, #12
121d0     04 12 06 F1 | 	add	arg01, #4
121d4     28 B6 B0 FD | 	call	#_pslpeek
121d8     1C 4E 05 F1 | 	add	fp, #28
121dc     A7 FA 61 FC | 	wrlong	result1, fp
121e0     10 4E 85 F1 | 	sub	fp, #16
121e4     A7 12 02 FB | 	rdlong	arg01, fp
121e8     0C 4E 85 F1 | 	sub	fp, #12
121ec     08 12 06 F1 | 	add	arg01, #8
121f0     0C B6 B0 FD | 	call	#_pslpeek
121f4     20 4E 05 F1 | 	add	fp, #32
121f8     A7 FA 61 FC | 	wrlong	result1, fp
121fc     14 4E 85 F1 | 	sub	fp, #20
12200     A7 12 02 FB | 	rdlong	arg01, fp
12204     0C 4E 85 F1 | 	sub	fp, #12
12208     0C 12 06 F1 | 	add	arg01, #12
1220c     F0 B5 B0 FD | 	call	#_pslpeek
12210     24 4E 05 F1 | 	add	fp, #36
12214     A7 FA 61 FC | 	wrlong	result1, fp
12218                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
12218                 | ' esize=pspeek(arrptr+2)
12218                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
12218                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
12218                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
12218                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
12218     10 4E 85 F1 | 	sub	fp, #16
1221c     A7 12 02 FB | 	rdlong	arg01, fp
12220     14 4E 85 F1 | 	sub	fp, #20
12224     03 12 16 F2 | 	cmp	arg01, #3 wc
12228     34 00 90 CD |  if_b	jmp	#LR__1452
1222c     F4 8F BF FD | 	call	#_pop
12230     A7 FA 61 FC | 	wrlong	result1, fp
12234     04 4E 05 F1 | 	add	fp, #4
12238     A7 FC 61 FC | 	wrlong	result2, fp
1223c     04 4E 05 F1 | 	add	fp, #4
12240     A7 FE 61 FC | 	wrlong	result3, fp
12244     08 4E 85 F1 | 	sub	fp, #8
12248     A7 12 02 F6 | 	mov	arg01, fp
1224c     A0 39 B0 FD | 	call	#_converttoint
12250     30 4E 05 F1 | 	add	fp, #48
12254     A7 FA 61 FC | 	wrlong	result1, fp
12258     30 4E 85 F1 | 	sub	fp, #48
1225c     0C 00 90 FD | 	jmp	#LR__1453
12260                 | LR__1452
12260     30 4E 05 F1 | 	add	fp, #48
12264     A7 00 68 FC | 	wrlong	#0, fp
12268     30 4E 85 F1 | 	sub	fp, #48
1226c                 | LR__1453
1226c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1226c     14 4E 05 F1 | 	add	fp, #20
12270     A7 12 02 FB | 	rdlong	arg01, fp
12274     14 4E 85 F1 | 	sub	fp, #20
12278     02 12 16 F2 | 	cmp	arg01, #2 wc
1227c     34 00 90 CD |  if_b	jmp	#LR__1454
12280     A0 8F BF FD | 	call	#_pop
12284     A7 FA 61 FC | 	wrlong	result1, fp
12288     04 4E 05 F1 | 	add	fp, #4
1228c     A7 FC 61 FC | 	wrlong	result2, fp
12290     04 4E 05 F1 | 	add	fp, #4
12294     A7 FE 61 FC | 	wrlong	result3, fp
12298     08 4E 85 F1 | 	sub	fp, #8
1229c     A7 12 02 F6 | 	mov	arg01, fp
122a0     4C 39 B0 FD | 	call	#_converttoint
122a4     2C 4E 05 F1 | 	add	fp, #44
122a8     A7 FA 61 FC | 	wrlong	result1, fp
122ac     2C 4E 85 F1 | 	sub	fp, #44
122b0     0C 00 90 FD | 	jmp	#LR__1455
122b4                 | LR__1454
122b4     2C 4E 05 F1 | 	add	fp, #44
122b8     A7 00 68 FC | 	wrlong	#0, fp
122bc     2C 4E 85 F1 | 	sub	fp, #44
122c0                 | LR__1455
122c0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
122c0     14 4E 05 F1 | 	add	fp, #20
122c4     A7 12 02 FB | 	rdlong	arg01, fp
122c8     14 4E 85 F1 | 	sub	fp, #20
122cc     01 12 16 F2 | 	cmp	arg01, #1 wc
122d0     34 00 90 CD |  if_b	jmp	#LR__1456
122d4     4C 8F BF FD | 	call	#_pop
122d8     A7 FA 61 FC | 	wrlong	result1, fp
122dc     04 4E 05 F1 | 	add	fp, #4
122e0     A7 FC 61 FC | 	wrlong	result2, fp
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 FE 61 FC | 	wrlong	result3, fp
122ec     08 4E 85 F1 | 	sub	fp, #8
122f0     A7 12 02 F6 | 	mov	arg01, fp
122f4     F8 38 B0 FD | 	call	#_converttoint
122f8     28 4E 05 F1 | 	add	fp, #40
122fc     A7 FA 61 FC | 	wrlong	result1, fp
12300     28 4E 85 F1 | 	sub	fp, #40
12304     0C 00 90 FD | 	jmp	#LR__1457
12308                 | LR__1456
12308     28 4E 05 F1 | 	add	fp, #40
1230c     A7 00 68 FC | 	wrlong	#0, fp
12310     28 4E 85 F1 | 	sub	fp, #40
12314                 | LR__1457
12314                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
12314                 | ' if numpar>0 then
12314     14 4E 05 F1 | 	add	fp, #20
12318     A7 FE 01 FB | 	rdlong	result3, fp
1231c     14 4E 85 F1 | 	sub	fp, #20
12320     01 FE 15 F2 | 	cmp	result3, #1 wc
12324     8C 00 90 CD |  if_b	jmp	#LR__1458
12328     0C 4E 05 F1 | 	add	fp, #12
1232c     A7 FC 01 FB | 	rdlong	result2, fp
12330     1C 4E 05 F1 | 	add	fp, #28
12334     A7 FE 01 FB | 	rdlong	result3, fp
12338     04 4E 05 F1 | 	add	fp, #4
1233c     A7 12 02 FB | 	rdlong	arg01, fp
12340     10 4E 85 F1 | 	sub	fp, #16
12344     A7 FA 01 FB | 	rdlong	result1, fp
12348     FD 12 02 FD | 	qmul	arg01, result1
1234c     10 FC 05 F1 | 	add	result2, #16
12350     14 4E 05 F1 | 	add	fp, #20
12354     A7 1E 02 FB | 	rdlong	local01, fp
12358     18 12 62 FD | 	getqx	arg01
1235c     FD 1E 02 FD | 	qmul	local01, result1
12360     09 FF 01 F1 | 	add	result3, arg01
12364     10 4E 85 F1 | 	sub	fp, #16
12368     A7 1E 02 FB | 	rdlong	local01, fp
1236c     18 FA 61 FD | 	getqx	result1
12370     0F FB 01 FD | 	qmul	result1, local01
12374     08 4E 85 F1 | 	sub	fp, #8
12378     A7 1E 02 FB | 	rdlong	local01, fp
1237c     18 FA 61 FD | 	getqx	result1
12380     FD FE 01 F1 | 	add	result3, result1
12384     0F FF 01 FD | 	qmul	result3, local01
12388     1C 4E 05 F1 | 	add	fp, #28
1238c     18 1E 62 FD | 	getqx	local01
12390     0F FD 01 F1 | 	add	result2, local01
12394     A7 FC 61 FC | 	wrlong	result2, fp
12398     2C 4E 85 F1 | 	sub	fp, #44
1239c     A7 3A 68 FC | 	wrlong	#29, fp
123a0     2C 4E 05 F1 | 	add	fp, #44
123a4     A7 1E 02 FB | 	rdlong	local01, fp
123a8     34 4E 85 F1 | 	sub	fp, #52
123ac     A7 1E 62 FC | 	wrlong	local01, fp
123b0     18 00 90 FD | 	jmp	#LR__1459
123b4                 | LR__1458
123b4     08 4E 05 F1 | 	add	fp, #8
123b8     A7 3A 68 FC | 	wrlong	#29, fp
123bc     04 4E 05 F1 | 	add	fp, #4
123c0     A7 1E 02 FB | 	rdlong	local01, fp
123c4     0C 4E 85 F1 | 	sub	fp, #12
123c8     A7 1E 62 FC | 	wrlong	local01, fp
123cc                 | LR__1459
123cc     A7 12 02 F6 | 	mov	arg01, fp
123d0     E8 8E BF FD | 	call	#_push
123d4                 | LR__1460
123d4     A7 F0 03 F6 | 	mov	ptra, fp
123d8     B2 00 A0 FD | 	call	#popregs_
123dc                 | _do_getaddr_ret
123dc     2D 00 64 FD | 	ret
123e0                 | 
123e0                 | ' 
123e0                 | ' 
123e0                 | ' sub do_inkey
123e0                 | _do_inkey
123e0     02 4A 05 F6 | 	mov	COUNT_, #2
123e4     A8 00 A0 FD | 	call	#pushregs_
123e8     0C F0 07 F1 | 	add	ptra, #12
123ec     00 DF B0 FD | 	call	#_usbnew_spin2_get_key
123f0     45 00 00 FF 
123f4     74 E4 05 F1 | 	add	objptr, ##35444
123f8     F2 FA 61 FC | 	wrlong	result1, objptr
123fc                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
123fc     45 00 00 FF 
12400     74 E4 85 F1 | 	sub	objptr, ##35444
12404     00 FA 0D F2 | 	cmp	result1, #0 wz
12408     94 00 90 AD |  if_e	jmp	#LR__1471
1240c     45 00 00 FF 
12410     74 E4 05 F1 | 	add	objptr, ##35444
12414     F2 1C 02 FB | 	rdlong	arg06, objptr
12418     45 00 00 FF 
1241c     74 E4 85 F1 | 	sub	objptr, ##35444
12420     00 00 40 FF 
12424     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12428     45 00 00 CF 
1242c     74 E4 05 C1 |  if_b	add	objptr, ##35444
12430     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12434     45 00 00 CF 
12438     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1243c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
12440     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
12444     58 00 90 3D |  if_ae	jmp	#LR__1471
12448                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12448     50 00 00 FF 
1244c     10 E5 05 F1 | 	add	objptr, ##41232
12450     F2 1C 02 FB | 	rdlong	arg06, objptr
12454     50 00 00 FF 
12458     10 E5 85 F1 | 	sub	objptr, ##41232
1245c     01 1C 0E F2 | 	cmp	arg06, #1 wz
12460     3C 00 90 5D |  if_ne	jmp	#LR__1470
12464     51 00 00 FF 
12468     B4 E5 05 F1 | 	add	objptr, ##41908
1246c     F2 14 02 FB | 	rdlong	arg02, objptr
12470     04 E4 85 F1 | 	sub	objptr, #4
12474     F2 1A 02 FB | 	rdlong	arg05, objptr
12478     07 12 06 F6 | 	mov	arg01, #7
1247c     56 00 00 FF 
12480     44 16 06 F6 | 	mov	arg03, ##44100
12484     0C 18 C6 F9 | 	decod	arg04, #12
12488     01 1C 66 F6 | 	neg	arg06, #1
1248c     46 00 00 FF 
12490     E4 E4 85 F1 | 	sub	objptr, ##36068
12494     FC E1 B0 FD | 	call	#_audio096_spin2_play
12498     0B 00 00 FF 
1249c     CC E4 85 F1 | 	sub	objptr, ##5836
124a0                 | LR__1470
124a0                 | LR__1471
124a0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
124a0     45 00 00 FF 
124a4     74 E4 05 F1 | 	add	objptr, ##35444
124a8     F2 1C 0A FB | 	rdlong	arg06, objptr wz
124ac     45 00 00 FF 
124b0     74 E4 85 F1 | 	sub	objptr, ##35444
124b4     D4 01 90 AD |  if_e	jmp	#LR__1480
124b8     45 00 00 FF 
124bc     74 E4 05 F1 | 	add	objptr, ##35444
124c0     F2 1C 02 FB | 	rdlong	arg06, objptr
124c4     45 00 00 FF 
124c8     74 E4 85 F1 | 	sub	objptr, ##35444
124cc     00 00 40 FF 
124d0     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
124d4     45 00 00 CF 
124d8     74 E4 05 C1 |  if_b	add	objptr, ##35444
124dc     F2 1E 02 CB |  if_b	rdlong	local01, objptr
124e0     45 00 00 CF 
124e4     74 E4 85 C1 |  if_b	sub	objptr, ##35444
124e8     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
124ec     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
124f0     98 01 90 3D |  if_ae	jmp	#LR__1480
124f4                 | '   if leds and 2 = 2 then 
124f4     51 00 00 FF 
124f8     DC E5 05 F1 | 	add	objptr, ##41948
124fc     F2 1E 0A FB | 	rdlong	local01, objptr wz
12500     51 00 00 FF 
12504     DC E5 85 F1 | 	sub	objptr, ##41948
12508     58 01 90 AD |  if_e	jmp	#LR__1479
1250c                 | '     if key>96 andalso key<123 then
1250c     45 00 00 FF 
12510     74 E4 05 F1 | 	add	objptr, ##35444
12514     F2 1E 02 FB | 	rdlong	local01, objptr
12518     45 00 00 FF 
1251c     74 E4 85 F1 | 	sub	objptr, ##35444
12520     61 1E 16 F2 | 	cmp	local01, #97 wc
12524     3C 00 90 CD |  if_b	jmp	#LR__1472
12528     45 00 00 FF 
1252c     74 E4 05 F1 | 	add	objptr, ##35444
12530     F2 1E 02 FB | 	rdlong	local01, objptr
12534     45 00 00 FF 
12538     74 E4 85 F1 | 	sub	objptr, ##35444
1253c     7B 1E 16 F2 | 	cmp	local01, #123 wc
12540     20 00 90 3D |  if_ae	jmp	#LR__1472
12544     45 00 00 FF 
12548     74 E4 05 F1 | 	add	objptr, ##35444
1254c     F2 1E 02 FB | 	rdlong	local01, objptr
12550     20 1E 86 F1 | 	sub	local01, #32
12554     F2 1E 62 FC | 	wrlong	local01, objptr
12558     45 00 00 FF 
1255c     74 E4 85 F1 | 	sub	objptr, ##35444
12560     00 01 90 FD | 	jmp	#LR__1478
12564                 | LR__1472
12564     45 00 00 FF 
12568     74 E4 05 F1 | 	add	objptr, ##35444
1256c     F2 1E 02 FB | 	rdlong	local01, objptr
12570     45 00 00 FF 
12574     74 E4 85 F1 | 	sub	objptr, ##35444
12578     41 1E 16 F2 | 	cmp	local01, #65 wc
1257c     3C 00 90 CD |  if_b	jmp	#LR__1473
12580     45 00 00 FF 
12584     74 E4 05 F1 | 	add	objptr, ##35444
12588     F2 1E 02 FB | 	rdlong	local01, objptr
1258c     45 00 00 FF 
12590     74 E4 85 F1 | 	sub	objptr, ##35444
12594     5B 1E 16 F2 | 	cmp	local01, #91 wc
12598     20 00 90 3D |  if_ae	jmp	#LR__1473
1259c     45 00 00 FF 
125a0     74 E4 05 F1 | 	add	objptr, ##35444
125a4     F2 1E 02 FB | 	rdlong	local01, objptr
125a8     20 1E 06 F1 | 	add	local01, #32
125ac     F2 1E 62 FC | 	wrlong	local01, objptr
125b0     45 00 00 FF 
125b4     74 E4 85 F1 | 	sub	objptr, ##35444
125b8     A8 00 90 FD | 	jmp	#LR__1477
125bc                 | LR__1473
125bc     45 00 00 FF 
125c0     74 E4 05 F1 | 	add	objptr, ##35444
125c4     F2 1E 02 FB | 	rdlong	local01, objptr
125c8     45 00 00 FF 
125cc     74 E4 85 F1 | 	sub	objptr, ##35444
125d0     17 1E 16 F2 | 	cmp	local01, #23 wc
125d4     3C 00 90 CD |  if_b	jmp	#LR__1474
125d8     45 00 00 FF 
125dc     74 E4 05 F1 | 	add	objptr, ##35444
125e0     F2 1E 02 FB | 	rdlong	local01, objptr
125e4     45 00 00 FF 
125e8     74 E4 85 F1 | 	sub	objptr, ##35444
125ec     20 1E 16 F2 | 	cmp	local01, #32 wc
125f0     20 00 90 3D |  if_ae	jmp	#LR__1474
125f4     45 00 00 FF 
125f8     74 E4 05 F1 | 	add	objptr, ##35444
125fc     F2 1E 02 FB | 	rdlong	local01, objptr
12600     09 1E 86 F1 | 	sub	local01, #9
12604     F2 1E 62 FC | 	wrlong	local01, objptr
12608     45 00 00 FF 
1260c     74 E4 85 F1 | 	sub	objptr, ##35444
12610     50 00 90 FD | 	jmp	#LR__1476
12614                 | LR__1474
12614     45 00 00 FF 
12618     74 E4 05 F1 | 	add	objptr, ##35444
1261c     F2 20 02 FB | 	rdlong	local02, objptr
12620     45 00 00 FF 
12624     74 E4 85 F1 | 	sub	objptr, ##35444
12628     0E 20 16 F2 | 	cmp	local02, #14 wc
1262c     34 00 90 CD |  if_b	jmp	#LR__1475
12630     45 00 00 FF 
12634     74 E4 05 F1 | 	add	objptr, ##35444
12638     F2 1E 02 FB | 	rdlong	local01, objptr
1263c     45 00 00 FF 
12640     74 E4 85 F1 | 	sub	objptr, ##35444
12644     17 1E 16 F2 | 	cmp	local01, #23 wc
12648     51 00 00 CF 
1264c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
12650     F2 20 02 CB |  if_b	rdlong	local02, objptr
12654     27 20 06 C1 |  if_b	add	local02, #39
12658     F2 20 62 CC |  if_b	wrlong	local02, objptr
1265c     51 00 00 CF 
12660     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
12664                 | LR__1475
12664                 | LR__1476
12664                 | LR__1477
12664                 | LR__1478
12664                 | LR__1479
12664     45 00 00 FF 
12668     74 E4 05 F1 | 	add	objptr, ##35444
1266c     F2 12 02 FB | 	rdlong	arg01, objptr
12670     45 00 00 FF 
12674     74 E4 85 F1 | 	sub	objptr, ##35444
12678     34 B2 B0 FD | 	call	#_scantochar
1267c     FD 12 02 F6 | 	mov	arg01, result1
12680     C0 06 B1 FD | 	call	#__system__Chr_S
12684     A7 FA 61 FC | 	wrlong	result1, fp
12688     0C 00 90 FD | 	jmp	#LR__1481
1268c                 | LR__1480
1268c     85 01 00 FF 
12690     03 21 06 F6 | 	mov	local02, ##@LR__5482
12694     A7 20 62 FC | 	wrlong	local02, fp
12698                 | LR__1481
12698     08 4E 05 F1 | 	add	fp, #8
1269c     A7 3E 68 FC | 	wrlong	#31, fp
126a0     08 4E 85 F1 | 	sub	fp, #8
126a4     A7 12 02 F6 | 	mov	arg01, fp
126a8     10 8C BF FD | 	call	#_push
126ac     A7 F0 03 F6 | 	mov	ptra, fp
126b0     B2 00 A0 FD | 	call	#popregs_
126b4                 | _do_inkey_ret
126b4     2D 00 64 FD | 	ret
126b8                 | 
126b8                 | '  
126b8                 | ' '------------------------ Operators 
126b8                 | ' 
126b8                 | ' sub do_plus 
126b8                 | _do_plus
126b8     05 4A 05 F6 | 	mov	COUNT_, #5
126bc     A8 00 A0 FD | 	call	#pushregs_
126c0     18 F0 07 F1 | 	add	ptra, #24
126c4     5C 8B BF FD | 	call	#_pop
126c8     FD 1E 02 F6 | 	mov	local01, result1
126cc     FE 20 02 F6 | 	mov	local02, result2
126d0     FF 22 02 F6 | 	mov	local03, result3
126d4     0C 4E 05 F1 | 	add	fp, #12
126d8     A7 1E 62 FC | 	wrlong	local01, fp
126dc     04 4E 05 F1 | 	add	fp, #4
126e0     A7 20 62 FC | 	wrlong	local02, fp
126e4     04 4E 05 F1 | 	add	fp, #4
126e8     A7 22 62 FC | 	wrlong	local03, fp
126ec     14 4E 85 F1 | 	sub	fp, #20
126f0     30 8B BF FD | 	call	#_pop
126f4     FF 22 02 F6 | 	mov	local03, result3
126f8     A7 FA 61 FC | 	wrlong	result1, fp
126fc     04 4E 05 F1 | 	add	fp, #4
12700     A7 FC 61 FC | 	wrlong	result2, fp
12704     04 4E 05 F1 | 	add	fp, #4
12708     A7 22 62 FC | 	wrlong	local03, fp
1270c                 | ' 
1270c                 | ' t2=pop()
1270c                 | ' t1=pop()
1270c                 | ' 
1270c                 | ' 
1270c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1270c     08 4E 85 F1 | 	sub	fp, #8
12710     1D 22 0E F2 | 	cmp	local03, #29 wz
12714     14 4E 05 A1 |  if_e	add	fp, #20
12718     A7 24 02 AB |  if_e	rdlong	local04, fp
1271c     14 4E 85 A1 |  if_e	sub	fp, #20
12720     12 23 02 A6 |  if_e	mov	local03, local04
12724     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12728     1C 00 90 5D |  if_ne	jmp	#LR__1490
1272c     A7 1E 02 FB | 	rdlong	local01, fp
12730     0C 4E 05 F1 | 	add	fp, #12
12734     A7 20 02 FB | 	rdlong	local02, fp
12738     0C 4E 85 F1 | 	sub	fp, #12
1273c     10 1F 02 F1 | 	add	local01, local02
12740     A7 1E 62 FC | 	wrlong	local01, fp
12744     48 04 90 FD | 	jmp	#LR__1505
12748                 | LR__1490
12748                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
12748     08 4E 05 F1 | 	add	fp, #8
1274c     A7 1E 02 FB | 	rdlong	local01, fp
12750     08 4E 85 F1 | 	sub	fp, #8
12754     1D 1E 0E F2 | 	cmp	local01, #29 wz
12758     14 4E 05 A1 |  if_e	add	fp, #20
1275c     A7 24 02 AB |  if_e	rdlong	local04, fp
12760     14 4E 85 A1 |  if_e	sub	fp, #20
12764     12 23 02 A6 |  if_e	mov	local03, local04
12768     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1276c     28 00 90 5D |  if_ne	jmp	#LR__1491
12770     A7 1E 02 FB | 	rdlong	local01, fp
12774     0C 4E 05 F1 | 	add	fp, #12
12778     A7 20 02 FB | 	rdlong	local02, fp
1277c     0C 4E 85 F1 | 	sub	fp, #12
12780     10 1F 02 F1 | 	add	local01, local02
12784     A7 1E 62 FC | 	wrlong	local01, fp
12788     08 4E 05 F1 | 	add	fp, #8
1278c     A7 38 68 FC | 	wrlong	#28, fp
12790     08 4E 85 F1 | 	sub	fp, #8
12794     F8 03 90 FD | 	jmp	#LR__1505
12798                 | LR__1491
12798                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12798     08 4E 05 F1 | 	add	fp, #8
1279c     A7 1E 02 FB | 	rdlong	local01, fp
127a0     08 4E 85 F1 | 	sub	fp, #8
127a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
127a8     14 4E 05 A1 |  if_e	add	fp, #20
127ac     A7 24 02 AB |  if_e	rdlong	local04, fp
127b0     14 4E 85 A1 |  if_e	sub	fp, #20
127b4     12 23 02 A6 |  if_e	mov	local03, local04
127b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
127bc     30 00 90 5D |  if_ne	jmp	#LR__1492
127c0     A7 12 02 FB | 	rdlong	arg01, fp
127c4     EC 0A B1 FD | 	call	#__system___float_fromuns
127c8     FD 12 02 F6 | 	mov	arg01, result1
127cc     0C 4E 05 F1 | 	add	fp, #12
127d0     A7 14 02 FB | 	rdlong	arg02, fp
127d4     0C 4E 85 F1 | 	sub	fp, #12
127d8     0C 0B B1 FD | 	call	#__system___float_add
127dc     A7 FA 61 FC | 	wrlong	result1, fp
127e0     08 4E 05 F1 | 	add	fp, #8
127e4     A7 3C 68 FC | 	wrlong	#30, fp
127e8     08 4E 85 F1 | 	sub	fp, #8
127ec     A0 03 90 FD | 	jmp	#LR__1505
127f0                 | LR__1492
127f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
127f0     08 4E 05 F1 | 	add	fp, #8
127f4     A7 1E 02 FB | 	rdlong	local01, fp
127f8     08 4E 85 F1 | 	sub	fp, #8
127fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12800     14 4E 05 A1 |  if_e	add	fp, #20
12804     A7 24 02 AB |  if_e	rdlong	local04, fp
12808     14 4E 85 A1 |  if_e	sub	fp, #20
1280c     12 23 02 A6 |  if_e	mov	local03, local04
12810     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12814     1C 00 90 5D |  if_ne	jmp	#LR__1493
12818     A7 1E 02 FB | 	rdlong	local01, fp
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 20 02 FB | 	rdlong	local02, fp
12824     0C 4E 85 F1 | 	sub	fp, #12
12828     10 1F 02 F1 | 	add	local01, local02
1282c     A7 1E 62 FC | 	wrlong	local01, fp
12830     5C 03 90 FD | 	jmp	#LR__1505
12834                 | LR__1493
12834                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
12834     08 4E 05 F1 | 	add	fp, #8
12838     A7 1E 02 FB | 	rdlong	local01, fp
1283c     08 4E 85 F1 | 	sub	fp, #8
12840     1C 1E 0E F2 | 	cmp	local01, #28 wz
12844     14 4E 05 A1 |  if_e	add	fp, #20
12848     A7 24 02 AB |  if_e	rdlong	local04, fp
1284c     14 4E 85 A1 |  if_e	sub	fp, #20
12850     12 23 02 A6 |  if_e	mov	local03, local04
12854     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12858     1C 00 90 5D |  if_ne	jmp	#LR__1494
1285c     A7 1E 02 FB | 	rdlong	local01, fp
12860     0C 4E 05 F1 | 	add	fp, #12
12864     A7 20 02 FB | 	rdlong	local02, fp
12868     0C 4E 85 F1 | 	sub	fp, #12
1286c     10 1F 02 F1 | 	add	local01, local02
12870     A7 1E 62 FC | 	wrlong	local01, fp
12874     18 03 90 FD | 	jmp	#LR__1505
12878                 | LR__1494
12878                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12878     08 4E 05 F1 | 	add	fp, #8
1287c     A7 1E 02 FB | 	rdlong	local01, fp
12880     08 4E 85 F1 | 	sub	fp, #8
12884     1C 1E 0E F2 | 	cmp	local01, #28 wz
12888     14 4E 05 A1 |  if_e	add	fp, #20
1288c     A7 24 02 AB |  if_e	rdlong	local04, fp
12890     14 4E 85 A1 |  if_e	sub	fp, #20
12894     12 23 02 A6 |  if_e	mov	local03, local04
12898     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1289c     40 00 90 5D |  if_ne	jmp	#LR__1495
128a0     A7 12 02 FB | 	rdlong	arg01, fp
128a4     09 13 52 F6 | 	abs	arg01, arg01 wc
128a8     1F 26 C6 C9 |  if_b	decod	local05, #31
128ac     00 26 06 36 |  if_ae	mov	local05, #0
128b0     00 0A B1 FD | 	call	#__system___float_fromuns
128b4     13 FB 61 F5 | 	xor	result1, local05
128b8     FD 12 02 F6 | 	mov	arg01, result1
128bc     0C 4E 05 F1 | 	add	fp, #12
128c0     A7 14 02 FB | 	rdlong	arg02, fp
128c4     0C 4E 85 F1 | 	sub	fp, #12
128c8     1C 0A B1 FD | 	call	#__system___float_add
128cc     A7 FA 61 FC | 	wrlong	result1, fp
128d0     08 4E 05 F1 | 	add	fp, #8
128d4     A7 3C 68 FC | 	wrlong	#30, fp
128d8     08 4E 85 F1 | 	sub	fp, #8
128dc     B0 02 90 FD | 	jmp	#LR__1505
128e0                 | LR__1495
128e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
128e0     08 4E 05 F1 | 	add	fp, #8
128e4     A7 1E 02 FB | 	rdlong	local01, fp
128e8     08 4E 85 F1 | 	sub	fp, #8
128ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
128f0     14 4E 05 A1 |  if_e	add	fp, #20
128f4     A7 24 02 AB |  if_e	rdlong	local04, fp
128f8     14 4E 85 A1 |  if_e	sub	fp, #20
128fc     12 23 02 A6 |  if_e	mov	local03, local04
12900     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12904     28 00 90 5D |  if_ne	jmp	#LR__1496
12908     A7 1E 02 FB | 	rdlong	local01, fp
1290c     0C 4E 05 F1 | 	add	fp, #12
12910     A7 12 02 FB | 	rdlong	arg01, fp
12914     0C 4E 85 F1 | 	sub	fp, #12
12918     98 09 B1 FD | 	call	#__system___float_fromuns
1291c     FD 14 02 F6 | 	mov	arg02, result1
12920     0F 13 02 F6 | 	mov	arg01, local01
12924     C0 09 B1 FD | 	call	#__system___float_add
12928     A7 FA 61 FC | 	wrlong	result1, fp
1292c     60 02 90 FD | 	jmp	#LR__1505
12930                 | LR__1496
12930                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
12930     08 4E 05 F1 | 	add	fp, #8
12934     A7 1E 02 FB | 	rdlong	local01, fp
12938     08 4E 85 F1 | 	sub	fp, #8
1293c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12940     14 4E 05 A1 |  if_e	add	fp, #20
12944     A7 24 02 AB |  if_e	rdlong	local04, fp
12948     14 4E 85 A1 |  if_e	sub	fp, #20
1294c     12 23 02 A6 |  if_e	mov	local03, local04
12950     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12954     38 00 90 5D |  if_ne	jmp	#LR__1497
12958     A7 1E 02 FB | 	rdlong	local01, fp
1295c     0C 4E 05 F1 | 	add	fp, #12
12960     A7 12 02 FB | 	rdlong	arg01, fp
12964     0C 4E 85 F1 | 	sub	fp, #12
12968     09 13 52 F6 | 	abs	arg01, arg01 wc
1296c     1F 26 C6 C9 |  if_b	decod	local05, #31
12970     00 26 06 36 |  if_ae	mov	local05, #0
12974     3C 09 B1 FD | 	call	#__system___float_fromuns
12978     13 FB 61 F5 | 	xor	result1, local05
1297c     FD 14 02 F6 | 	mov	arg02, result1
12980     0F 13 02 F6 | 	mov	arg01, local01
12984     60 09 B1 FD | 	call	#__system___float_add
12988     A7 FA 61 FC | 	wrlong	result1, fp
1298c     00 02 90 FD | 	jmp	#LR__1505
12990                 | LR__1497
12990                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
12990     08 4E 05 F1 | 	add	fp, #8
12994     A7 1E 02 FB | 	rdlong	local01, fp
12998     08 4E 85 F1 | 	sub	fp, #8
1299c     1E 1E 0E F2 | 	cmp	local01, #30 wz
129a0     14 4E 05 A1 |  if_e	add	fp, #20
129a4     A7 24 02 AB |  if_e	rdlong	local04, fp
129a8     14 4E 85 A1 |  if_e	sub	fp, #20
129ac     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
129b0     1C 00 90 5D |  if_ne	jmp	#LR__1498
129b4     A7 12 02 FB | 	rdlong	arg01, fp
129b8     0C 4E 05 F1 | 	add	fp, #12
129bc     A7 14 02 FB | 	rdlong	arg02, fp
129c0     0C 4E 85 F1 | 	sub	fp, #12
129c4     20 09 B1 FD | 	call	#__system___float_add
129c8     A7 FA 61 FC | 	wrlong	result1, fp
129cc     C0 01 90 FD | 	jmp	#LR__1505
129d0                 | LR__1498
129d0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
129d0     08 4E 05 F1 | 	add	fp, #8
129d4     A7 1E 02 FB | 	rdlong	local01, fp
129d8     08 4E 85 F1 | 	sub	fp, #8
129dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
129e0     24 00 90 5D |  if_ne	jmp	#LR__1499
129e4     14 4E 05 F1 | 	add	fp, #20
129e8     A7 22 02 FB | 	rdlong	local03, fp
129ec     14 4E 85 F1 | 	sub	fp, #20
129f0     1F 22 0E F2 | 	cmp	local03, #31 wz
129f4     A7 04 68 5C |  if_ne	wrlong	#2, fp
129f8     08 4E 05 51 |  if_ne	add	fp, #8
129fc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12a00     08 4E 85 51 |  if_ne	sub	fp, #8
12a04     88 01 90 5D |  if_ne	jmp	#LR__1505
12a08                 | LR__1499
12a08                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12a08     14 4E 05 F1 | 	add	fp, #20
12a0c     A7 1E 02 FB | 	rdlong	local01, fp
12a10     14 4E 85 F1 | 	sub	fp, #20
12a14     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a18     24 00 90 5D |  if_ne	jmp	#LR__1500
12a1c     08 4E 05 F1 | 	add	fp, #8
12a20     A7 22 02 FB | 	rdlong	local03, fp
12a24     08 4E 85 F1 | 	sub	fp, #8
12a28     1F 22 0E F2 | 	cmp	local03, #31 wz
12a2c     A7 04 68 5C |  if_ne	wrlong	#2, fp
12a30     08 4E 05 51 |  if_ne	add	fp, #8
12a34     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12a38     08 4E 85 51 |  if_ne	sub	fp, #8
12a3c     50 01 90 5D |  if_ne	jmp	#LR__1505
12a40                 | LR__1500
12a40                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
12a40     08 4E 05 F1 | 	add	fp, #8
12a44     A7 1E 02 FB | 	rdlong	local01, fp
12a48     08 4E 85 F1 | 	sub	fp, #8
12a4c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a50     14 4E 05 A1 |  if_e	add	fp, #20
12a54     A7 22 02 AB |  if_e	rdlong	local03, fp
12a58     14 4E 85 A1 |  if_e	sub	fp, #20
12a5c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a60     1C 00 90 5D |  if_ne	jmp	#LR__1501
12a64     A7 12 02 FB | 	rdlong	arg01, fp
12a68     0C 4E 05 F1 | 	add	fp, #12
12a6c     A7 14 02 FB | 	rdlong	arg02, fp
12a70     0C 4E 85 F1 | 	sub	fp, #12
12a74     E8 E0 B0 FD | 	call	#__system___string_concat
12a78     A7 FA 61 FC | 	wrlong	result1, fp
12a7c     10 01 90 FD | 	jmp	#LR__1505
12a80                 | LR__1501
12a80                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
12a80     08 4E 05 F1 | 	add	fp, #8
12a84     A7 1E 02 FB | 	rdlong	local01, fp
12a88     08 4E 85 F1 | 	sub	fp, #8
12a8c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a90     14 4E 05 A1 |  if_e	add	fp, #20
12a94     A7 22 02 AB |  if_e	rdlong	local03, fp
12a98     14 4E 85 A1 |  if_e	sub	fp, #20
12a9c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12aa0     30 00 90 5D |  if_ne	jmp	#LR__1502
12aa4     A7 12 02 FB | 	rdlong	arg01, fp
12aa8     20 E9 BF FD | 	call	#_convertstring
12aac     FD 12 02 F6 | 	mov	arg01, result1
12ab0     0C 4E 05 F1 | 	add	fp, #12
12ab4     A7 14 02 FB | 	rdlong	arg02, fp
12ab8     0C 4E 85 F1 | 	sub	fp, #12
12abc     A0 E0 B0 FD | 	call	#__system___string_concat
12ac0     A7 FA 61 FC | 	wrlong	result1, fp
12ac4     08 4E 05 F1 | 	add	fp, #8
12ac8     A7 3E 68 FC | 	wrlong	#31, fp
12acc     08 4E 85 F1 | 	sub	fp, #8
12ad0     BC 00 90 FD | 	jmp	#LR__1505
12ad4                 | LR__1502
12ad4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
12ad4     08 4E 05 F1 | 	add	fp, #8
12ad8     A7 1E 02 FB | 	rdlong	local01, fp
12adc     08 4E 85 F1 | 	sub	fp, #8
12ae0     1F 1E 0E F2 | 	cmp	local01, #31 wz
12ae4     14 4E 05 A1 |  if_e	add	fp, #20
12ae8     A7 22 02 AB |  if_e	rdlong	local03, fp
12aec     14 4E 85 A1 |  if_e	sub	fp, #20
12af0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12af4     28 00 90 5D |  if_ne	jmp	#LR__1503
12af8     A7 1E 02 FB | 	rdlong	local01, fp
12afc     0C 4E 05 F1 | 	add	fp, #12
12b00     A7 12 02 FB | 	rdlong	arg01, fp
12b04     0C 4E 85 F1 | 	sub	fp, #12
12b08     C0 E8 BF FD | 	call	#_convertstring
12b0c     FD 14 02 F6 | 	mov	arg02, result1
12b10     0F 13 02 F6 | 	mov	arg01, local01
12b14     48 E0 B0 FD | 	call	#__system___string_concat
12b18     A7 FA 61 FC | 	wrlong	result1, fp
12b1c     70 00 90 FD | 	jmp	#LR__1505
12b20                 | LR__1503
12b20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
12b20     08 4E 05 F1 | 	add	fp, #8
12b24     A7 1E 02 FB | 	rdlong	local01, fp
12b28     08 4E 85 F1 | 	sub	fp, #8
12b2c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12b30     14 4E 05 A1 |  if_e	add	fp, #20
12b34     A7 22 02 AB |  if_e	rdlong	local03, fp
12b38     14 4E 85 A1 |  if_e	sub	fp, #20
12b3c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12b40     3C 00 90 5D |  if_ne	jmp	#LR__1504
12b44     A7 12 02 FB | 	rdlong	arg01, fp
12b48     80 E8 BF FD | 	call	#_convertstring
12b4c     FD 1E 02 F6 | 	mov	local01, result1
12b50     0C 4E 05 F1 | 	add	fp, #12
12b54     A7 12 02 FB | 	rdlong	arg01, fp
12b58     0C 4E 85 F1 | 	sub	fp, #12
12b5c     6C E8 BF FD | 	call	#_convertstring
12b60     FD 14 02 F6 | 	mov	arg02, result1
12b64     0F 13 02 F6 | 	mov	arg01, local01
12b68     F4 DF B0 FD | 	call	#__system___string_concat
12b6c     A7 FA 61 FC | 	wrlong	result1, fp
12b70     08 4E 05 F1 | 	add	fp, #8
12b74     A7 3E 68 FC | 	wrlong	#31, fp
12b78     08 4E 85 F1 | 	sub	fp, #8
12b7c     10 00 90 FD | 	jmp	#LR__1505
12b80                 | LR__1504
12b80     A7 08 68 FC | 	wrlong	#4, fp
12b84     08 4E 05 F1 | 	add	fp, #8
12b88     A7 FE 69 FC | 	wrlong	#255, fp
12b8c     08 4E 85 F1 | 	sub	fp, #8
12b90                 | LR__1505
12b90     A7 12 02 F6 | 	mov	arg01, fp
12b94     24 87 BF FD | 	call	#_push
12b98     A7 F0 03 F6 | 	mov	ptra, fp
12b9c     B2 00 A0 FD | 	call	#popregs_
12ba0                 | _do_plus_ret
12ba0     2D 00 64 FD | 	ret
12ba4                 | 
12ba4                 | ' 
12ba4                 | ' sub do_minus
12ba4                 | _do_minus
12ba4     05 4A 05 F6 | 	mov	COUNT_, #5
12ba8     A8 00 A0 FD | 	call	#pushregs_
12bac     18 F0 07 F1 | 	add	ptra, #24
12bb0     70 86 BF FD | 	call	#_pop
12bb4     FD 1E 02 F6 | 	mov	local01, result1
12bb8     FE 20 02 F6 | 	mov	local02, result2
12bbc     FF 22 02 F6 | 	mov	local03, result3
12bc0     0C 4E 05 F1 | 	add	fp, #12
12bc4     A7 1E 62 FC | 	wrlong	local01, fp
12bc8     04 4E 05 F1 | 	add	fp, #4
12bcc     A7 20 62 FC | 	wrlong	local02, fp
12bd0     04 4E 05 F1 | 	add	fp, #4
12bd4     A7 22 62 FC | 	wrlong	local03, fp
12bd8     14 4E 85 F1 | 	sub	fp, #20
12bdc     44 86 BF FD | 	call	#_pop
12be0     FF 22 02 F6 | 	mov	local03, result3
12be4     A7 FA 61 FC | 	wrlong	result1, fp
12be8     04 4E 05 F1 | 	add	fp, #4
12bec     A7 FC 61 FC | 	wrlong	result2, fp
12bf0     04 4E 05 F1 | 	add	fp, #4
12bf4     A7 22 62 FC | 	wrlong	local03, fp
12bf8                 | ' 
12bf8                 | ' t2=pop()
12bf8                 | ' t1=pop()
12bf8                 | ' 
12bf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
12bf8     08 4E 85 F1 | 	sub	fp, #8
12bfc     1D 22 0E F2 | 	cmp	local03, #29 wz
12c00     14 4E 05 A1 |  if_e	add	fp, #20
12c04     A7 24 02 AB |  if_e	rdlong	local04, fp
12c08     14 4E 85 A1 |  if_e	sub	fp, #20
12c0c     12 23 02 A6 |  if_e	mov	local03, local04
12c10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12c14     5C 00 90 5D |  if_ne	jmp	#LR__1511
12c18                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
12c18     0C 4E 05 F1 | 	add	fp, #12
12c1c     A7 1E 02 FB | 	rdlong	local01, fp
12c20     0C 4E 85 F1 | 	sub	fp, #12
12c24     A7 22 02 FB | 	rdlong	local03, fp
12c28     11 1F 12 F2 | 	cmp	local01, local03 wc
12c2c     1C 00 90 3D |  if_ae	jmp	#LR__1510
12c30     A7 1E 02 FB | 	rdlong	local01, fp
12c34     0C 4E 05 F1 | 	add	fp, #12
12c38     A7 20 02 FB | 	rdlong	local02, fp
12c3c     0C 4E 85 F1 | 	sub	fp, #12
12c40     10 1F 82 F1 | 	sub	local01, local02
12c44     A7 1E 62 FC | 	wrlong	local01, fp
12c48     F4 02 90 FD | 	jmp	#LR__1520
12c4c                 | LR__1510
12c4c     A7 1E 02 FB | 	rdlong	local01, fp
12c50     0C 4E 05 F1 | 	add	fp, #12
12c54     A7 20 02 FB | 	rdlong	local02, fp
12c58     0C 4E 85 F1 | 	sub	fp, #12
12c5c     10 1F 82 F1 | 	sub	local01, local02
12c60     A7 1E 62 FC | 	wrlong	local01, fp
12c64     08 4E 05 F1 | 	add	fp, #8
12c68     A7 38 68 FC | 	wrlong	#28, fp
12c6c     08 4E 85 F1 | 	sub	fp, #8
12c70     CC 02 90 FD | 	jmp	#LR__1520
12c74                 | LR__1511
12c74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12c74     08 4E 05 F1 | 	add	fp, #8
12c78     A7 1E 02 FB | 	rdlong	local01, fp
12c7c     08 4E 85 F1 | 	sub	fp, #8
12c80     1D 1E 0E F2 | 	cmp	local01, #29 wz
12c84     14 4E 05 A1 |  if_e	add	fp, #20
12c88     A7 24 02 AB |  if_e	rdlong	local04, fp
12c8c     14 4E 85 A1 |  if_e	sub	fp, #20
12c90     12 23 02 A6 |  if_e	mov	local03, local04
12c94     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c98     28 00 90 5D |  if_ne	jmp	#LR__1512
12c9c     A7 1E 02 FB | 	rdlong	local01, fp
12ca0     0C 4E 05 F1 | 	add	fp, #12
12ca4     A7 20 02 FB | 	rdlong	local02, fp
12ca8     0C 4E 85 F1 | 	sub	fp, #12
12cac     10 1F 82 F1 | 	sub	local01, local02
12cb0     A7 1E 62 FC | 	wrlong	local01, fp
12cb4     08 4E 05 F1 | 	add	fp, #8
12cb8     A7 38 68 FC | 	wrlong	#28, fp
12cbc     08 4E 85 F1 | 	sub	fp, #8
12cc0     7C 02 90 FD | 	jmp	#LR__1520
12cc4                 | LR__1512
12cc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12cc4     08 4E 05 F1 | 	add	fp, #8
12cc8     A7 1E 02 FB | 	rdlong	local01, fp
12ccc     08 4E 85 F1 | 	sub	fp, #8
12cd0     1D 1E 0E F2 | 	cmp	local01, #29 wz
12cd4     14 4E 05 A1 |  if_e	add	fp, #20
12cd8     A7 24 02 AB |  if_e	rdlong	local04, fp
12cdc     14 4E 85 A1 |  if_e	sub	fp, #20
12ce0     12 23 02 A6 |  if_e	mov	local03, local04
12ce4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12ce8     34 00 90 5D |  if_ne	jmp	#LR__1513
12cec     A7 12 02 FB | 	rdlong	arg01, fp
12cf0     C0 05 B1 FD | 	call	#__system___float_fromuns
12cf4     FD 12 02 F6 | 	mov	arg01, result1
12cf8     0C 4E 05 F1 | 	add	fp, #12
12cfc     A7 14 02 FB | 	rdlong	arg02, fp
12d00     0C 4E 85 F1 | 	sub	fp, #12
12d04     1F 14 E6 F4 | 	bitnot	arg02, #31
12d08     DC 05 B1 FD | 	call	#__system___float_add
12d0c     A7 FA 61 FC | 	wrlong	result1, fp
12d10     08 4E 05 F1 | 	add	fp, #8
12d14     A7 3C 68 FC | 	wrlong	#30, fp
12d18     08 4E 85 F1 | 	sub	fp, #8
12d1c     20 02 90 FD | 	jmp	#LR__1520
12d20                 | LR__1513
12d20                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
12d20     08 4E 05 F1 | 	add	fp, #8
12d24     A7 1E 02 FB | 	rdlong	local01, fp
12d28     08 4E 85 F1 | 	sub	fp, #8
12d2c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d30     14 4E 05 A1 |  if_e	add	fp, #20
12d34     A7 24 02 AB |  if_e	rdlong	local04, fp
12d38     14 4E 85 A1 |  if_e	sub	fp, #20
12d3c     12 23 02 A6 |  if_e	mov	local03, local04
12d40     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12d44     1C 00 90 5D |  if_ne	jmp	#LR__1514
12d48     A7 1E 02 FB | 	rdlong	local01, fp
12d4c     0C 4E 05 F1 | 	add	fp, #12
12d50     A7 20 02 FB | 	rdlong	local02, fp
12d54     0C 4E 85 F1 | 	sub	fp, #12
12d58     10 1F 82 F1 | 	sub	local01, local02
12d5c     A7 1E 62 FC | 	wrlong	local01, fp
12d60     DC 01 90 FD | 	jmp	#LR__1520
12d64                 | LR__1514
12d64                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12d64     08 4E 05 F1 | 	add	fp, #8
12d68     A7 1E 02 FB | 	rdlong	local01, fp
12d6c     08 4E 85 F1 | 	sub	fp, #8
12d70     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d74     14 4E 05 A1 |  if_e	add	fp, #20
12d78     A7 24 02 AB |  if_e	rdlong	local04, fp
12d7c     14 4E 85 A1 |  if_e	sub	fp, #20
12d80     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12d84     1C 00 90 5D |  if_ne	jmp	#LR__1515
12d88     A7 1E 02 FB | 	rdlong	local01, fp
12d8c     0C 4E 05 F1 | 	add	fp, #12
12d90     A7 20 02 FB | 	rdlong	local02, fp
12d94     0C 4E 85 F1 | 	sub	fp, #12
12d98     10 1F 82 F1 | 	sub	local01, local02
12d9c     A7 1E 62 FC | 	wrlong	local01, fp
12da0     9C 01 90 FD | 	jmp	#LR__1520
12da4                 | LR__1515
12da4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12da4     08 4E 05 F1 | 	add	fp, #8
12da8     A7 1E 02 FB | 	rdlong	local01, fp
12dac     08 4E 85 F1 | 	sub	fp, #8
12db0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12db4     14 4E 05 A1 |  if_e	add	fp, #20
12db8     A7 22 02 AB |  if_e	rdlong	local03, fp
12dbc     14 4E 85 A1 |  if_e	sub	fp, #20
12dc0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12dc4     44 00 90 5D |  if_ne	jmp	#LR__1516
12dc8     A7 12 02 FB | 	rdlong	arg01, fp
12dcc     09 13 52 F6 | 	abs	arg01, arg01 wc
12dd0     1F 26 C6 C9 |  if_b	decod	local05, #31
12dd4     00 26 06 36 |  if_ae	mov	local05, #0
12dd8     D8 04 B1 FD | 	call	#__system___float_fromuns
12ddc     13 FB 61 F5 | 	xor	result1, local05
12de0     FD 12 02 F6 | 	mov	arg01, result1
12de4     0C 4E 05 F1 | 	add	fp, #12
12de8     A7 14 02 FB | 	rdlong	arg02, fp
12dec     0C 4E 85 F1 | 	sub	fp, #12
12df0     1F 14 E6 F4 | 	bitnot	arg02, #31
12df4     F0 04 B1 FD | 	call	#__system___float_add
12df8     A7 FA 61 FC | 	wrlong	result1, fp
12dfc     08 4E 05 F1 | 	add	fp, #8
12e00     A7 3C 68 FC | 	wrlong	#30, fp
12e04     08 4E 85 F1 | 	sub	fp, #8
12e08     34 01 90 FD | 	jmp	#LR__1520
12e0c                 | LR__1516
12e0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
12e0c     08 4E 05 F1 | 	add	fp, #8
12e10     A7 1E 02 FB | 	rdlong	local01, fp
12e14     08 4E 85 F1 | 	sub	fp, #8
12e18     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e1c     14 4E 05 A1 |  if_e	add	fp, #20
12e20     A7 22 02 AB |  if_e	rdlong	local03, fp
12e24     14 4E 85 A1 |  if_e	sub	fp, #20
12e28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12e2c     2C 00 90 5D |  if_ne	jmp	#LR__1517
12e30     A7 1E 02 FB | 	rdlong	local01, fp
12e34     0C 4E 05 F1 | 	add	fp, #12
12e38     A7 12 02 FB | 	rdlong	arg01, fp
12e3c     0C 4E 85 F1 | 	sub	fp, #12
12e40     70 04 B1 FD | 	call	#__system___float_fromuns
12e44     FD 14 02 F6 | 	mov	arg02, result1
12e48     0F 13 02 F6 | 	mov	arg01, local01
12e4c     1F 14 E6 F4 | 	bitnot	arg02, #31
12e50     94 04 B1 FD | 	call	#__system___float_add
12e54     A7 FA 61 FC | 	wrlong	result1, fp
12e58     E4 00 90 FD | 	jmp	#LR__1520
12e5c                 | LR__1517
12e5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12e5c     08 4E 05 F1 | 	add	fp, #8
12e60     A7 1E 02 FB | 	rdlong	local01, fp
12e64     08 4E 85 F1 | 	sub	fp, #8
12e68     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e6c     14 4E 05 A1 |  if_e	add	fp, #20
12e70     A7 22 02 AB |  if_e	rdlong	local03, fp
12e74     14 4E 85 A1 |  if_e	sub	fp, #20
12e78     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e7c     3C 00 90 5D |  if_ne	jmp	#LR__1518
12e80     A7 1E 02 FB | 	rdlong	local01, fp
12e84     0C 4E 05 F1 | 	add	fp, #12
12e88     A7 12 02 FB | 	rdlong	arg01, fp
12e8c     0C 4E 85 F1 | 	sub	fp, #12
12e90     09 13 52 F6 | 	abs	arg01, arg01 wc
12e94     1F 26 C6 C9 |  if_b	decod	local05, #31
12e98     00 26 06 36 |  if_ae	mov	local05, #0
12e9c     14 04 B1 FD | 	call	#__system___float_fromuns
12ea0     13 FB 61 F5 | 	xor	result1, local05
12ea4     FD 14 02 F6 | 	mov	arg02, result1
12ea8     0F 13 02 F6 | 	mov	arg01, local01
12eac     1F 14 E6 F4 | 	bitnot	arg02, #31
12eb0     34 04 B1 FD | 	call	#__system___float_add
12eb4     A7 FA 61 FC | 	wrlong	result1, fp
12eb8     84 00 90 FD | 	jmp	#LR__1520
12ebc                 | LR__1518
12ebc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12ebc     08 4E 05 F1 | 	add	fp, #8
12ec0     A7 1E 02 FB | 	rdlong	local01, fp
12ec4     08 4E 85 F1 | 	sub	fp, #8
12ec8     1E 1E 0E F2 | 	cmp	local01, #30 wz
12ecc     14 4E 05 A1 |  if_e	add	fp, #20
12ed0     A7 22 02 AB |  if_e	rdlong	local03, fp
12ed4     14 4E 85 A1 |  if_e	sub	fp, #20
12ed8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12edc     20 00 90 5D |  if_ne	jmp	#LR__1519
12ee0     A7 12 02 FB | 	rdlong	arg01, fp
12ee4     0C 4E 05 F1 | 	add	fp, #12
12ee8     A7 14 02 FB | 	rdlong	arg02, fp
12eec     0C 4E 85 F1 | 	sub	fp, #12
12ef0     1F 14 E6 F4 | 	bitnot	arg02, #31
12ef4     F0 03 B1 FD | 	call	#__system___float_add
12ef8     A7 FA 61 FC | 	wrlong	result1, fp
12efc     40 00 90 FD | 	jmp	#LR__1520
12f00                 | LR__1519
12f00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
12f00     08 4E 05 F1 | 	add	fp, #8
12f04     A7 1E 02 FB | 	rdlong	local01, fp
12f08     08 4E 85 F1 | 	sub	fp, #8
12f0c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f10     14 4E 05 51 |  if_ne	add	fp, #20
12f14     A7 22 02 5B |  if_ne	rdlong	local03, fp
12f18     14 4E 85 51 |  if_ne	sub	fp, #20
12f1c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12f20     A7 06 68 AC |  if_e	wrlong	#3, fp
12f24     08 4E 05 A1 |  if_e	add	fp, #8
12f28     A7 FE 69 AC |  if_e	wrlong	#255, fp
12f2c     08 4E 85 A1 |  if_e	sub	fp, #8
12f30     A7 0A 68 5C |  if_ne	wrlong	#5, fp
12f34     08 4E 05 51 |  if_ne	add	fp, #8
12f38     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12f3c     08 4E 85 51 |  if_ne	sub	fp, #8
12f40                 | LR__1520
12f40     A7 12 02 F6 | 	mov	arg01, fp
12f44     74 83 BF FD | 	call	#_push
12f48     A7 F0 03 F6 | 	mov	ptra, fp
12f4c     B2 00 A0 FD | 	call	#popregs_
12f50                 | _do_minus_ret
12f50     2D 00 64 FD | 	ret
12f54                 | 
12f54                 | ' 
12f54                 | ' sub do_and 
12f54                 | _do_and
12f54     03 4A 05 F6 | 	mov	COUNT_, #3
12f58     A8 00 A0 FD | 	call	#pushregs_
12f5c     18 F0 07 F1 | 	add	ptra, #24
12f60     C0 82 BF FD | 	call	#_pop
12f64     FD 12 02 F6 | 	mov	arg01, result1
12f68     FE 1E 02 F6 | 	mov	local01, result2
12f6c     FF 20 02 F6 | 	mov	local02, result3
12f70     0C 4E 05 F1 | 	add	fp, #12
12f74     A7 12 62 FC | 	wrlong	arg01, fp
12f78     04 4E 05 F1 | 	add	fp, #4
12f7c     A7 1E 62 FC | 	wrlong	local01, fp
12f80     04 4E 05 F1 | 	add	fp, #4
12f84     A7 20 62 FC | 	wrlong	local02, fp
12f88     14 4E 85 F1 | 	sub	fp, #20
12f8c     94 82 BF FD | 	call	#_pop
12f90     FF 22 02 F6 | 	mov	local03, result3
12f94     A7 FA 61 FC | 	wrlong	result1, fp
12f98     04 4E 05 F1 | 	add	fp, #4
12f9c     A7 FC 61 FC | 	wrlong	result2, fp
12fa0     04 4E 05 F1 | 	add	fp, #4
12fa4     A7 22 62 FC | 	wrlong	local03, fp
12fa8                 | ' 
12fa8                 | ' t2=pop()
12fa8                 | ' t1=pop()
12fa8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12fa8     08 4E 85 F1 | 	sub	fp, #8
12fac     1C 22 0E F2 | 	cmp	local03, #28 wz
12fb0     A7 22 02 AB |  if_e	rdlong	local03, fp
12fb4     A7 22 62 AC |  if_e	wrlong	local03, fp
12fb8     08 4E 05 A1 |  if_e	add	fp, #8
12fbc     A7 3A 68 AC |  if_e	wrlong	#29, fp
12fc0     08 4E 85 A1 |  if_e	sub	fp, #8
12fc4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12fc4     14 4E 05 F1 | 	add	fp, #20
12fc8     A7 22 02 FB | 	rdlong	local03, fp
12fcc     14 4E 85 F1 | 	sub	fp, #20
12fd0     1C 22 0E F2 | 	cmp	local03, #28 wz
12fd4     18 00 90 5D |  if_ne	jmp	#LR__1530
12fd8     0C 4E 05 F1 | 	add	fp, #12
12fdc     A7 22 02 FB | 	rdlong	local03, fp
12fe0     A7 22 62 FC | 	wrlong	local03, fp
12fe4     08 4E 05 F1 | 	add	fp, #8
12fe8     A7 3A 68 FC | 	wrlong	#29, fp
12fec     14 4E 85 F1 | 	sub	fp, #20
12ff0                 | LR__1530
12ff0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
12ff0     08 4E 05 F1 | 	add	fp, #8
12ff4     A7 22 02 FB | 	rdlong	local03, fp
12ff8     08 4E 85 F1 | 	sub	fp, #8
12ffc     1F 22 0E F2 | 	cmp	local03, #31 wz
13000     14 4E 05 51 |  if_ne	add	fp, #20
13004     A7 20 02 5B |  if_ne	rdlong	local02, fp
13008     14 4E 85 51 |  if_ne	sub	fp, #20
1300c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13010     08 4E 05 51 |  if_ne	add	fp, #8
13014     A7 22 02 5B |  if_ne	rdlong	local03, fp
13018     08 4E 85 51 |  if_ne	sub	fp, #8
1301c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13020     14 4E 05 51 |  if_ne	add	fp, #20
13024     14 4E 85 51 |  if_ne	sub	fp, #20
13028     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1302c     A7 0C 68 AC |  if_e	wrlong	#6, fp
13030     08 4E 05 A1 |  if_e	add	fp, #8
13034     A7 FE 69 AC |  if_e	wrlong	#255, fp
13038     08 4E 85 A1 |  if_e	sub	fp, #8
1303c     18 00 90 AD |  if_e	jmp	#LR__1531
13040     A7 22 02 FB | 	rdlong	local03, fp
13044     0C 4E 05 F1 | 	add	fp, #12
13048     A7 1E 02 FB | 	rdlong	local01, fp
1304c     0C 4E 85 F1 | 	sub	fp, #12
13050     0F 23 02 F5 | 	and	local03, local01
13054     A7 22 62 FC | 	wrlong	local03, fp
13058                 | LR__1531
13058     A7 12 02 F6 | 	mov	arg01, fp
1305c     5C 82 BF FD | 	call	#_push
13060     A7 F0 03 F6 | 	mov	ptra, fp
13064     B2 00 A0 FD | 	call	#popregs_
13068                 | _do_and_ret
13068     2D 00 64 FD | 	ret
1306c                 | 
1306c                 | ' 
1306c                 | ' sub do_or 
1306c                 | _do_or
1306c     03 4A 05 F6 | 	mov	COUNT_, #3
13070     A8 00 A0 FD | 	call	#pushregs_
13074     18 F0 07 F1 | 	add	ptra, #24
13078     A8 81 BF FD | 	call	#_pop
1307c     FD 12 02 F6 | 	mov	arg01, result1
13080     FE 1E 02 F6 | 	mov	local01, result2
13084     FF 20 02 F6 | 	mov	local02, result3
13088     0C 4E 05 F1 | 	add	fp, #12
1308c     A7 12 62 FC | 	wrlong	arg01, fp
13090     04 4E 05 F1 | 	add	fp, #4
13094     A7 1E 62 FC | 	wrlong	local01, fp
13098     04 4E 05 F1 | 	add	fp, #4
1309c     A7 20 62 FC | 	wrlong	local02, fp
130a0     14 4E 85 F1 | 	sub	fp, #20
130a4     7C 81 BF FD | 	call	#_pop
130a8     FF 22 02 F6 | 	mov	local03, result3
130ac     A7 FA 61 FC | 	wrlong	result1, fp
130b0     04 4E 05 F1 | 	add	fp, #4
130b4     A7 FC 61 FC | 	wrlong	result2, fp
130b8     04 4E 05 F1 | 	add	fp, #4
130bc     A7 22 62 FC | 	wrlong	local03, fp
130c0                 | ' 
130c0                 | ' t2=pop()
130c0                 | ' t1=pop()
130c0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
130c0     08 4E 85 F1 | 	sub	fp, #8
130c4     1C 22 0E F2 | 	cmp	local03, #28 wz
130c8     A7 22 02 AB |  if_e	rdlong	local03, fp
130cc     A7 22 62 AC |  if_e	wrlong	local03, fp
130d0     08 4E 05 A1 |  if_e	add	fp, #8
130d4     A7 3A 68 AC |  if_e	wrlong	#29, fp
130d8     08 4E 85 A1 |  if_e	sub	fp, #8
130dc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
130dc     14 4E 05 F1 | 	add	fp, #20
130e0     A7 22 02 FB | 	rdlong	local03, fp
130e4     14 4E 85 F1 | 	sub	fp, #20
130e8     1C 22 0E F2 | 	cmp	local03, #28 wz
130ec     18 00 90 5D |  if_ne	jmp	#LR__1540
130f0     0C 4E 05 F1 | 	add	fp, #12
130f4     A7 22 02 FB | 	rdlong	local03, fp
130f8     A7 22 62 FC | 	wrlong	local03, fp
130fc     08 4E 05 F1 | 	add	fp, #8
13100     A7 3A 68 FC | 	wrlong	#29, fp
13104     14 4E 85 F1 | 	sub	fp, #20
13108                 | LR__1540
13108                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
13108     08 4E 05 F1 | 	add	fp, #8
1310c     A7 22 02 FB | 	rdlong	local03, fp
13110     08 4E 85 F1 | 	sub	fp, #8
13114     1F 22 0E F2 | 	cmp	local03, #31 wz
13118     14 4E 05 51 |  if_ne	add	fp, #20
1311c     A7 20 02 5B |  if_ne	rdlong	local02, fp
13120     14 4E 85 51 |  if_ne	sub	fp, #20
13124     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13128     08 4E 05 51 |  if_ne	add	fp, #8
1312c     A7 22 02 5B |  if_ne	rdlong	local03, fp
13130     08 4E 85 51 |  if_ne	sub	fp, #8
13134     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13138     14 4E 05 51 |  if_ne	add	fp, #20
1313c     14 4E 85 51 |  if_ne	sub	fp, #20
13140     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13144     A7 0C 68 AC |  if_e	wrlong	#6, fp
13148     08 4E 05 A1 |  if_e	add	fp, #8
1314c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13150     08 4E 85 A1 |  if_e	sub	fp, #8
13154     18 00 90 AD |  if_e	jmp	#LR__1541
13158     A7 22 02 FB | 	rdlong	local03, fp
1315c     0C 4E 05 F1 | 	add	fp, #12
13160     A7 1E 02 FB | 	rdlong	local01, fp
13164     0C 4E 85 F1 | 	sub	fp, #12
13168     0F 23 42 F5 | 	or	local03, local01
1316c     A7 22 62 FC | 	wrlong	local03, fp
13170                 | LR__1541
13170     A7 12 02 F6 | 	mov	arg01, fp
13174     44 81 BF FD | 	call	#_push
13178     A7 F0 03 F6 | 	mov	ptra, fp
1317c     B2 00 A0 FD | 	call	#popregs_
13180                 | _do_or_ret
13180     2D 00 64 FD | 	ret
13184                 | 
13184                 | ' 
13184                 | ' sub do_mul
13184                 | _do_mul
13184     05 4A 05 F6 | 	mov	COUNT_, #5
13188     A8 00 A0 FD | 	call	#pushregs_
1318c     18 F0 07 F1 | 	add	ptra, #24
13190     90 80 BF FD | 	call	#_pop
13194     FD 1E 02 F6 | 	mov	local01, result1
13198     FE 20 02 F6 | 	mov	local02, result2
1319c     FF 22 02 F6 | 	mov	local03, result3
131a0     0C 4E 05 F1 | 	add	fp, #12
131a4     A7 1E 62 FC | 	wrlong	local01, fp
131a8     04 4E 05 F1 | 	add	fp, #4
131ac     A7 20 62 FC | 	wrlong	local02, fp
131b0     04 4E 05 F1 | 	add	fp, #4
131b4     A7 22 62 FC | 	wrlong	local03, fp
131b8     14 4E 85 F1 | 	sub	fp, #20
131bc     64 80 BF FD | 	call	#_pop
131c0     FF 22 02 F6 | 	mov	local03, result3
131c4     A7 FA 61 FC | 	wrlong	result1, fp
131c8     04 4E 05 F1 | 	add	fp, #4
131cc     A7 FC 61 FC | 	wrlong	result2, fp
131d0     04 4E 05 F1 | 	add	fp, #4
131d4     A7 22 62 FC | 	wrlong	local03, fp
131d8                 | ' 
131d8                 | ' t2=pop()
131d8                 | ' t1=pop()
131d8                 | ' 
131d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
131d8     08 4E 85 F1 | 	sub	fp, #8
131dc     1D 22 0E F2 | 	cmp	local03, #29 wz
131e0     14 4E 05 A1 |  if_e	add	fp, #20
131e4     A7 24 02 AB |  if_e	rdlong	local04, fp
131e8     14 4E 85 A1 |  if_e	sub	fp, #20
131ec     12 23 02 A6 |  if_e	mov	local03, local04
131f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
131f4     20 00 90 5D |  if_ne	jmp	#LR__1550
131f8     A7 20 02 FB | 	rdlong	local02, fp
131fc     0C 4E 05 F1 | 	add	fp, #12
13200     A7 22 02 FB | 	rdlong	local03, fp
13204     11 21 02 FD | 	qmul	local02, local03
13208     0C 4E 85 F1 | 	sub	fp, #12
1320c     18 1E 62 FD | 	getqx	local01
13210     A7 1E 62 FC | 	wrlong	local01, fp
13214     C4 02 90 FD | 	jmp	#LR__1559
13218                 | LR__1550
13218                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
13218     08 4E 05 F1 | 	add	fp, #8
1321c     A7 1E 02 FB | 	rdlong	local01, fp
13220     08 4E 85 F1 | 	sub	fp, #8
13224     1D 1E 0E F2 | 	cmp	local01, #29 wz
13228     14 4E 05 A1 |  if_e	add	fp, #20
1322c     A7 24 02 AB |  if_e	rdlong	local04, fp
13230     14 4E 85 A1 |  if_e	sub	fp, #20
13234     12 23 02 A6 |  if_e	mov	local03, local04
13238     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1323c     2C 00 90 5D |  if_ne	jmp	#LR__1551
13240     A7 20 02 FB | 	rdlong	local02, fp
13244     0C 4E 05 F1 | 	add	fp, #12
13248     A7 22 02 FB | 	rdlong	local03, fp
1324c     11 21 02 FD | 	qmul	local02, local03
13250     0C 4E 85 F1 | 	sub	fp, #12
13254     18 1E 62 FD | 	getqx	local01
13258     A7 1E 62 FC | 	wrlong	local01, fp
1325c     08 4E 05 F1 | 	add	fp, #8
13260     A7 38 68 FC | 	wrlong	#28, fp
13264     08 4E 85 F1 | 	sub	fp, #8
13268     70 02 90 FD | 	jmp	#LR__1559
1326c                 | LR__1551
1326c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1326c     08 4E 05 F1 | 	add	fp, #8
13270     A7 1E 02 FB | 	rdlong	local01, fp
13274     08 4E 85 F1 | 	sub	fp, #8
13278     1D 1E 0E F2 | 	cmp	local01, #29 wz
1327c     14 4E 05 A1 |  if_e	add	fp, #20
13280     A7 24 02 AB |  if_e	rdlong	local04, fp
13284     14 4E 85 A1 |  if_e	sub	fp, #20
13288     12 23 02 A6 |  if_e	mov	local03, local04
1328c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13290     30 00 90 5D |  if_ne	jmp	#LR__1552
13294     A7 12 02 FB | 	rdlong	arg01, fp
13298     18 00 B1 FD | 	call	#__system___float_fromuns
1329c     FD 12 02 F6 | 	mov	arg01, result1
132a0     0C 4E 05 F1 | 	add	fp, #12
132a4     A7 14 02 FB | 	rdlong	arg02, fp
132a8     0C 4E 85 F1 | 	sub	fp, #12
132ac     08 04 B1 FD | 	call	#__system___float_mul
132b0     A7 FA 61 FC | 	wrlong	result1, fp
132b4     08 4E 05 F1 | 	add	fp, #8
132b8     A7 3C 68 FC | 	wrlong	#30, fp
132bc     08 4E 85 F1 | 	sub	fp, #8
132c0     18 02 90 FD | 	jmp	#LR__1559
132c4                 | LR__1552
132c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
132c4     08 4E 05 F1 | 	add	fp, #8
132c8     A7 1E 02 FB | 	rdlong	local01, fp
132cc     08 4E 85 F1 | 	sub	fp, #8
132d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
132d4     14 4E 05 A1 |  if_e	add	fp, #20
132d8     A7 24 02 AB |  if_e	rdlong	local04, fp
132dc     14 4E 85 A1 |  if_e	sub	fp, #20
132e0     12 23 02 A6 |  if_e	mov	local03, local04
132e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
132e8     20 00 90 5D |  if_ne	jmp	#LR__1553
132ec     A7 20 02 FB | 	rdlong	local02, fp
132f0     0C 4E 05 F1 | 	add	fp, #12
132f4     A7 22 02 FB | 	rdlong	local03, fp
132f8     11 21 02 FD | 	qmul	local02, local03
132fc     0C 4E 85 F1 | 	sub	fp, #12
13300     18 1E 62 FD | 	getqx	local01
13304     A7 1E 62 FC | 	wrlong	local01, fp
13308     D0 01 90 FD | 	jmp	#LR__1559
1330c                 | LR__1553
1330c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1330c     08 4E 05 F1 | 	add	fp, #8
13310     A7 1E 02 FB | 	rdlong	local01, fp
13314     08 4E 85 F1 | 	sub	fp, #8
13318     1C 1E 0E F2 | 	cmp	local01, #28 wz
1331c     14 4E 05 A1 |  if_e	add	fp, #20
13320     A7 24 02 AB |  if_e	rdlong	local04, fp
13324     14 4E 85 A1 |  if_e	sub	fp, #20
13328     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1332c     20 00 90 5D |  if_ne	jmp	#LR__1554
13330     A7 20 02 FB | 	rdlong	local02, fp
13334     0C 4E 05 F1 | 	add	fp, #12
13338     A7 22 02 FB | 	rdlong	local03, fp
1333c     11 21 02 FD | 	qmul	local02, local03
13340     0C 4E 85 F1 | 	sub	fp, #12
13344     18 1E 62 FD | 	getqx	local01
13348     A7 1E 62 FC | 	wrlong	local01, fp
1334c     8C 01 90 FD | 	jmp	#LR__1559
13350                 | LR__1554
13350                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
13350     08 4E 05 F1 | 	add	fp, #8
13354     A7 1E 02 FB | 	rdlong	local01, fp
13358     08 4E 85 F1 | 	sub	fp, #8
1335c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13360     14 4E 05 A1 |  if_e	add	fp, #20
13364     A7 22 02 AB |  if_e	rdlong	local03, fp
13368     14 4E 85 A1 |  if_e	sub	fp, #20
1336c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13370     40 00 90 5D |  if_ne	jmp	#LR__1555
13374     A7 12 02 FB | 	rdlong	arg01, fp
13378     09 13 52 F6 | 	abs	arg01, arg01 wc
1337c     1F 26 C6 C9 |  if_b	decod	local05, #31
13380     00 26 06 36 |  if_ae	mov	local05, #0
13384     2C FF B0 FD | 	call	#__system___float_fromuns
13388     13 FB 61 F5 | 	xor	result1, local05
1338c     FD 12 02 F6 | 	mov	arg01, result1
13390     0C 4E 05 F1 | 	add	fp, #12
13394     A7 14 02 FB | 	rdlong	arg02, fp
13398     0C 4E 85 F1 | 	sub	fp, #12
1339c     18 03 B1 FD | 	call	#__system___float_mul
133a0     A7 FA 61 FC | 	wrlong	result1, fp
133a4     08 4E 05 F1 | 	add	fp, #8
133a8     A7 3C 68 FC | 	wrlong	#30, fp
133ac     08 4E 85 F1 | 	sub	fp, #8
133b0     28 01 90 FD | 	jmp	#LR__1559
133b4                 | LR__1555
133b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
133b4     08 4E 05 F1 | 	add	fp, #8
133b8     A7 1E 02 FB | 	rdlong	local01, fp
133bc     08 4E 85 F1 | 	sub	fp, #8
133c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
133c4     14 4E 05 A1 |  if_e	add	fp, #20
133c8     A7 22 02 AB |  if_e	rdlong	local03, fp
133cc     14 4E 85 A1 |  if_e	sub	fp, #20
133d0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
133d4     28 00 90 5D |  if_ne	jmp	#LR__1556
133d8     A7 1E 02 FB | 	rdlong	local01, fp
133dc     0C 4E 05 F1 | 	add	fp, #12
133e0     A7 12 02 FB | 	rdlong	arg01, fp
133e4     0C 4E 85 F1 | 	sub	fp, #12
133e8     C8 FE B0 FD | 	call	#__system___float_fromuns
133ec     FD 14 02 F6 | 	mov	arg02, result1
133f0     0F 13 02 F6 | 	mov	arg01, local01
133f4     C0 02 B1 FD | 	call	#__system___float_mul
133f8     A7 FA 61 FC | 	wrlong	result1, fp
133fc     DC 00 90 FD | 	jmp	#LR__1559
13400                 | LR__1556
13400                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
13400     08 4E 05 F1 | 	add	fp, #8
13404     A7 1E 02 FB | 	rdlong	local01, fp
13408     08 4E 85 F1 | 	sub	fp, #8
1340c     1E 1E 0E F2 | 	cmp	local01, #30 wz
13410     14 4E 05 A1 |  if_e	add	fp, #20
13414     A7 22 02 AB |  if_e	rdlong	local03, fp
13418     14 4E 85 A1 |  if_e	sub	fp, #20
1341c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13420     38 00 90 5D |  if_ne	jmp	#LR__1557
13424     A7 1E 02 FB | 	rdlong	local01, fp
13428     0C 4E 05 F1 | 	add	fp, #12
1342c     A7 12 02 FB | 	rdlong	arg01, fp
13430     0C 4E 85 F1 | 	sub	fp, #12
13434     09 13 52 F6 | 	abs	arg01, arg01 wc
13438     1F 26 C6 C9 |  if_b	decod	local05, #31
1343c     00 26 06 36 |  if_ae	mov	local05, #0
13440     70 FE B0 FD | 	call	#__system___float_fromuns
13444     13 FB 61 F5 | 	xor	result1, local05
13448     FD 14 02 F6 | 	mov	arg02, result1
1344c     0F 13 02 F6 | 	mov	arg01, local01
13450     64 02 B1 FD | 	call	#__system___float_mul
13454     A7 FA 61 FC | 	wrlong	result1, fp
13458     80 00 90 FD | 	jmp	#LR__1559
1345c                 | LR__1557
1345c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1345c     08 4E 05 F1 | 	add	fp, #8
13460     A7 1E 02 FB | 	rdlong	local01, fp
13464     08 4E 85 F1 | 	sub	fp, #8
13468     1E 1E 0E F2 | 	cmp	local01, #30 wz
1346c     14 4E 05 A1 |  if_e	add	fp, #20
13470     A7 22 02 AB |  if_e	rdlong	local03, fp
13474     14 4E 85 A1 |  if_e	sub	fp, #20
13478     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1347c     1C 00 90 5D |  if_ne	jmp	#LR__1558
13480     A7 12 02 FB | 	rdlong	arg01, fp
13484     0C 4E 05 F1 | 	add	fp, #12
13488     A7 14 02 FB | 	rdlong	arg02, fp
1348c     0C 4E 85 F1 | 	sub	fp, #12
13490     24 02 B1 FD | 	call	#__system___float_mul
13494     A7 FA 61 FC | 	wrlong	result1, fp
13498     40 00 90 FD | 	jmp	#LR__1559
1349c                 | LR__1558
1349c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1349c     08 4E 05 F1 | 	add	fp, #8
134a0     A7 1E 02 FB | 	rdlong	local01, fp
134a4     08 4E 85 F1 | 	sub	fp, #8
134a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
134ac     14 4E 05 51 |  if_ne	add	fp, #20
134b0     A7 22 02 5B |  if_ne	rdlong	local03, fp
134b4     14 4E 85 51 |  if_ne	sub	fp, #20
134b8     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
134bc     A7 10 68 AC |  if_e	wrlong	#8, fp
134c0     08 4E 05 A1 |  if_e	add	fp, #8
134c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
134c8     08 4E 85 A1 |  if_e	sub	fp, #8
134cc     A7 12 68 5C |  if_ne	wrlong	#9, fp
134d0     08 4E 05 51 |  if_ne	add	fp, #8
134d4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
134d8     08 4E 85 51 |  if_ne	sub	fp, #8
134dc                 | LR__1559
134dc     A7 12 02 F6 | 	mov	arg01, fp
134e0     D8 7D BF FD | 	call	#_push
134e4     A7 F0 03 F6 | 	mov	ptra, fp
134e8     B2 00 A0 FD | 	call	#popregs_
134ec                 | _do_mul_ret
134ec     2D 00 64 FD | 	ret
134f0                 | 
134f0                 | ' 
134f0                 | ' sub do_div 
134f0                 | _do_div
134f0     01 4A 05 F6 | 	mov	COUNT_, #1
134f4     A8 00 A0 FD | 	call	#pushregs_
134f8     18 F0 07 F1 | 	add	ptra, #24
134fc     24 7D BF FD | 	call	#_pop
13500     FD 7E 02 F6 | 	mov	muldivb_, result1
13504     FE 7C 02 F6 | 	mov	muldiva_, result2
13508     FF 1E 02 F6 | 	mov	local01, result3
1350c     0C 4E 05 F1 | 	add	fp, #12
13510     A7 7E 62 FC | 	wrlong	muldivb_, fp
13514     04 4E 05 F1 | 	add	fp, #4
13518     A7 7C 62 FC | 	wrlong	muldiva_, fp
1351c     04 4E 05 F1 | 	add	fp, #4
13520     A7 1E 62 FC | 	wrlong	local01, fp
13524     14 4E 85 F1 | 	sub	fp, #20
13528     F8 7C BF FD | 	call	#_pop
1352c     A7 FA 61 FC | 	wrlong	result1, fp
13530     04 4E 05 F1 | 	add	fp, #4
13534     A7 FC 61 FC | 	wrlong	result2, fp
13538     04 4E 05 F1 | 	add	fp, #4
1353c     A7 FE 61 FC | 	wrlong	result3, fp
13540                 | ' 
13540                 | ' t2=pop()
13540                 | ' t1=pop()
13540                 | ' 
13540                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
13540     08 4E 85 F1 | 	sub	fp, #8
13544     1F FE 0D F2 | 	cmp	result3, #31 wz
13548     14 4E 05 51 |  if_ne	add	fp, #20
1354c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13550     14 4E 85 51 |  if_ne	sub	fp, #20
13554     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
13558     A7 14 68 AC |  if_e	wrlong	#10, fp
1355c     08 4E 05 A1 |  if_e	add	fp, #8
13560     A7 FE 69 AC |  if_e	wrlong	#255, fp
13564     08 4E 85 A1 |  if_e	sub	fp, #8
13568     90 01 90 AD |  if_e	jmp	#LR__1566
1356c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1356c     08 4E 05 F1 | 	add	fp, #8
13570     A7 7E 02 FB | 	rdlong	muldivb_, fp
13574     08 4E 85 F1 | 	sub	fp, #8
13578     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1357c     1C 00 90 5D |  if_ne	jmp	#LR__1560
13580     08 4E 05 F1 | 	add	fp, #8
13584     A7 38 68 FC | 	wrlong	#28, fp
13588     08 4E 85 F1 | 	sub	fp, #8
1358c     A7 12 02 FB | 	rdlong	arg01, fp
13590     00 14 06 F6 | 	mov	arg02, #0
13594     E8 05 B1 FD | 	call	#__system___float_tointeger
13598     A7 FA 61 FC | 	wrlong	result1, fp
1359c                 | LR__1560
1359c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1359c     14 4E 05 F1 | 	add	fp, #20
135a0     A7 7E 02 FB | 	rdlong	muldivb_, fp
135a4     14 4E 85 F1 | 	sub	fp, #20
135a8     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
135ac     28 00 90 5D |  if_ne	jmp	#LR__1561
135b0     14 4E 05 F1 | 	add	fp, #20
135b4     A7 38 68 FC | 	wrlong	#28, fp
135b8     08 4E 85 F1 | 	sub	fp, #8
135bc     A7 12 02 FB | 	rdlong	arg01, fp
135c0     0C 4E 85 F1 | 	sub	fp, #12
135c4     00 14 06 F6 | 	mov	arg02, #0
135c8     B4 05 B1 FD | 	call	#__system___float_tointeger
135cc     0C 4E 05 F1 | 	add	fp, #12
135d0     A7 FA 61 FC | 	wrlong	result1, fp
135d4     0C 4E 85 F1 | 	sub	fp, #12
135d8                 | LR__1561
135d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
135d8     08 4E 05 F1 | 	add	fp, #8
135dc     A7 7E 02 FB | 	rdlong	muldivb_, fp
135e0     08 4E 85 F1 | 	sub	fp, #8
135e4     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
135e8     14 4E 05 A1 |  if_e	add	fp, #20
135ec     A7 1E 02 AB |  if_e	rdlong	local01, fp
135f0     14 4E 85 A1 |  if_e	sub	fp, #20
135f4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
135f8     20 00 90 5D |  if_ne	jmp	#LR__1562
135fc     0C 4E 05 F1 | 	add	fp, #12
13600     A7 1E 02 FB | 	rdlong	local01, fp
13604     0C 4E 85 F1 | 	sub	fp, #12
13608     A7 7E 02 FB | 	rdlong	muldivb_, fp
1360c     0F 7F 12 FD | 	qdiv	muldivb_, local01
13610     18 1E 62 FD | 	getqx	local01
13614     A7 1E 62 FC | 	wrlong	local01, fp
13618     E0 00 90 FD | 	jmp	#LR__1566
1361c                 | LR__1562
1361c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1361c     08 4E 05 F1 | 	add	fp, #8
13620     A7 7E 02 FB | 	rdlong	muldivb_, fp
13624     08 4E 85 F1 | 	sub	fp, #8
13628     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
1362c     14 4E 05 A1 |  if_e	add	fp, #20
13630     A7 1E 02 AB |  if_e	rdlong	local01, fp
13634     14 4E 85 A1 |  if_e	sub	fp, #20
13638     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1363c     2C 00 90 5D |  if_ne	jmp	#LR__1563
13640     0C 4E 05 F1 | 	add	fp, #12
13644     A7 1E 02 FB | 	rdlong	local01, fp
13648     0C 4E 85 F1 | 	sub	fp, #12
1364c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13650     0F 7F 12 FD | 	qdiv	muldivb_, local01
13654     18 1E 62 FD | 	getqx	local01
13658     A7 1E 62 FC | 	wrlong	local01, fp
1365c     08 4E 05 F1 | 	add	fp, #8
13660     A7 38 68 FC | 	wrlong	#28, fp
13664     08 4E 85 F1 | 	sub	fp, #8
13668     90 00 90 FD | 	jmp	#LR__1566
1366c                 | LR__1563
1366c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1366c     08 4E 05 F1 | 	add	fp, #8
13670     A7 7E 02 FB | 	rdlong	muldivb_, fp
13674     08 4E 85 F1 | 	sub	fp, #8
13678     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1367c     14 4E 05 A1 |  if_e	add	fp, #20
13680     A7 1E 02 AB |  if_e	rdlong	local01, fp
13684     14 4E 85 A1 |  if_e	sub	fp, #20
13688     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1368c     1C 00 90 5D |  if_ne	jmp	#LR__1564
13690     A7 7C 02 FB | 	rdlong	muldiva_, fp
13694     0C 4E 05 F1 | 	add	fp, #12
13698     A7 7E 02 FB | 	rdlong	muldivb_, fp
1369c     0C 4E 85 F1 | 	sub	fp, #12
136a0     BA 00 A0 FD | 	call	#divide_
136a4     A7 7E 62 FC | 	wrlong	muldivb_, fp
136a8     50 00 90 FD | 	jmp	#LR__1566
136ac                 | LR__1564
136ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
136ac     08 4E 05 F1 | 	add	fp, #8
136b0     A7 7E 02 FB | 	rdlong	muldivb_, fp
136b4     08 4E 85 F1 | 	sub	fp, #8
136b8     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
136bc     14 4E 05 A1 |  if_e	add	fp, #20
136c0     A7 1E 02 AB |  if_e	rdlong	local01, fp
136c4     14 4E 85 A1 |  if_e	sub	fp, #20
136c8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
136cc     1C 00 90 5D |  if_ne	jmp	#LR__1565
136d0     A7 7C 02 FB | 	rdlong	muldiva_, fp
136d4     0C 4E 05 F1 | 	add	fp, #12
136d8     A7 7E 02 FB | 	rdlong	muldivb_, fp
136dc     0C 4E 85 F1 | 	sub	fp, #12
136e0     BA 00 A0 FD | 	call	#divide_
136e4     A7 7E 62 FC | 	wrlong	muldivb_, fp
136e8     10 00 90 FD | 	jmp	#LR__1566
136ec                 | LR__1565
136ec     A7 16 68 FC | 	wrlong	#11, fp
136f0     08 4E 05 F1 | 	add	fp, #8
136f4     A7 FE 69 FC | 	wrlong	#255, fp
136f8     08 4E 85 F1 | 	sub	fp, #8
136fc                 | LR__1566
136fc     A7 12 02 F6 | 	mov	arg01, fp
13700     B8 7B BF FD | 	call	#_push
13704     A7 F0 03 F6 | 	mov	ptra, fp
13708     B2 00 A0 FD | 	call	#popregs_
1370c                 | _do_div_ret
1370c     2D 00 64 FD | 	ret
13710                 | 
13710                 | ' 
13710                 | ' sub do_fdiv 
13710                 | _do_fdiv
13710     02 4A 05 F6 | 	mov	COUNT_, #2
13714     A8 00 A0 FD | 	call	#pushregs_
13718     18 F0 07 F1 | 	add	ptra, #24
1371c     04 7B BF FD | 	call	#_pop
13720     FD 14 02 F6 | 	mov	arg02, result1
13724     FE 12 02 F6 | 	mov	arg01, result2
13728     FF 1E 02 F6 | 	mov	local01, result3
1372c     0C 4E 05 F1 | 	add	fp, #12
13730     A7 14 62 FC | 	wrlong	arg02, fp
13734     04 4E 05 F1 | 	add	fp, #4
13738     A7 12 62 FC | 	wrlong	arg01, fp
1373c     04 4E 05 F1 | 	add	fp, #4
13740     A7 1E 62 FC | 	wrlong	local01, fp
13744     14 4E 85 F1 | 	sub	fp, #20
13748     D8 7A BF FD | 	call	#_pop
1374c     A7 FA 61 FC | 	wrlong	result1, fp
13750     04 4E 05 F1 | 	add	fp, #4
13754     A7 FC 61 FC | 	wrlong	result2, fp
13758     04 4E 05 F1 | 	add	fp, #4
1375c     A7 FE 61 FC | 	wrlong	result3, fp
13760                 | ' 
13760                 | ' t2=pop()
13760                 | ' t1=pop()
13760                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
13760     08 4E 85 F1 | 	sub	fp, #8
13764     1F FE 0D F2 | 	cmp	result3, #31 wz
13768     14 4E 05 51 |  if_ne	add	fp, #20
1376c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13770     14 4E 85 51 |  if_ne	sub	fp, #20
13774     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13778     A7 14 68 AC |  if_e	wrlong	#10, fp
1377c     08 4E 05 A1 |  if_e	add	fp, #8
13780     A7 FE 69 AC |  if_e	wrlong	#255, fp
13784     08 4E 85 A1 |  if_e	sub	fp, #8
13788     38 01 90 AD |  if_e	jmp	#LR__1575
1378c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1378c     08 4E 05 F1 | 	add	fp, #8
13790     A7 14 02 FB | 	rdlong	arg02, fp
13794     08 4E 85 F1 | 	sub	fp, #8
13798     1C 14 0E F2 | 	cmp	arg02, #28 wz
1379c     28 00 90 5D |  if_ne	jmp	#LR__1570
137a0     08 4E 05 F1 | 	add	fp, #8
137a4     A7 3C 68 FC | 	wrlong	#30, fp
137a8     08 4E 85 F1 | 	sub	fp, #8
137ac     A7 12 02 FB | 	rdlong	arg01, fp
137b0     09 13 52 F6 | 	abs	arg01, arg01 wc
137b4     1F 20 C6 C9 |  if_b	decod	local02, #31
137b8     00 20 06 36 |  if_ae	mov	local02, #0
137bc     F4 FA B0 FD | 	call	#__system___float_fromuns
137c0     10 FB 61 F5 | 	xor	result1, local02
137c4     A7 FA 61 FC | 	wrlong	result1, fp
137c8                 | LR__1570
137c8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
137c8     08 4E 05 F1 | 	add	fp, #8
137cc     A7 14 02 FB | 	rdlong	arg02, fp
137d0     08 4E 85 F1 | 	sub	fp, #8
137d4     1D 14 0E F2 | 	cmp	arg02, #29 wz
137d8     18 00 90 5D |  if_ne	jmp	#LR__1571
137dc     08 4E 05 F1 | 	add	fp, #8
137e0     A7 3C 68 FC | 	wrlong	#30, fp
137e4     08 4E 85 F1 | 	sub	fp, #8
137e8     A7 12 02 FB | 	rdlong	arg01, fp
137ec     C4 FA B0 FD | 	call	#__system___float_fromuns
137f0     A7 FA 61 FC | 	wrlong	result1, fp
137f4                 | LR__1571
137f4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
137f4     14 4E 05 F1 | 	add	fp, #20
137f8     A7 14 02 FB | 	rdlong	arg02, fp
137fc     14 4E 85 F1 | 	sub	fp, #20
13800     1C 14 0E F2 | 	cmp	arg02, #28 wz
13804     34 00 90 5D |  if_ne	jmp	#LR__1572
13808     14 4E 05 F1 | 	add	fp, #20
1380c     A7 3C 68 FC | 	wrlong	#30, fp
13810     08 4E 85 F1 | 	sub	fp, #8
13814     A7 12 02 FB | 	rdlong	arg01, fp
13818     0C 4E 85 F1 | 	sub	fp, #12
1381c     09 13 52 F6 | 	abs	arg01, arg01 wc
13820     1F 20 C6 C9 |  if_b	decod	local02, #31
13824     00 20 06 36 |  if_ae	mov	local02, #0
13828     88 FA B0 FD | 	call	#__system___float_fromuns
1382c     10 FB 61 F5 | 	xor	result1, local02
13830     0C 4E 05 F1 | 	add	fp, #12
13834     A7 FA 61 FC | 	wrlong	result1, fp
13838     0C 4E 85 F1 | 	sub	fp, #12
1383c                 | LR__1572
1383c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1383c     14 4E 05 F1 | 	add	fp, #20
13840     A7 14 02 FB | 	rdlong	arg02, fp
13844     14 4E 85 F1 | 	sub	fp, #20
13848     1D 14 0E F2 | 	cmp	arg02, #29 wz
1384c     24 00 90 5D |  if_ne	jmp	#LR__1573
13850     14 4E 05 F1 | 	add	fp, #20
13854     A7 3C 68 FC | 	wrlong	#30, fp
13858     08 4E 85 F1 | 	sub	fp, #8
1385c     A7 12 02 FB | 	rdlong	arg01, fp
13860     0C 4E 85 F1 | 	sub	fp, #12
13864     4C FA B0 FD | 	call	#__system___float_fromuns
13868     0C 4E 05 F1 | 	add	fp, #12
1386c     A7 FA 61 FC | 	wrlong	result1, fp
13870     0C 4E 85 F1 | 	sub	fp, #12
13874                 | LR__1573
13874                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
13874     08 4E 05 F1 | 	add	fp, #8
13878     A7 14 02 FB | 	rdlong	arg02, fp
1387c     08 4E 85 F1 | 	sub	fp, #8
13880     1E 14 0E F2 | 	cmp	arg02, #30 wz
13884     14 4E 05 A1 |  if_e	add	fp, #20
13888     A7 1E 02 AB |  if_e	rdlong	local01, fp
1388c     14 4E 85 A1 |  if_e	sub	fp, #20
13890     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13894     1C 00 90 5D |  if_ne	jmp	#LR__1574
13898     A7 12 02 FB | 	rdlong	arg01, fp
1389c     0C 4E 05 F1 | 	add	fp, #12
138a0     A7 14 02 FB | 	rdlong	arg02, fp
138a4     0C 4E 85 F1 | 	sub	fp, #12
138a8     10 00 B1 FD | 	call	#__system___float_div
138ac     A7 FA 61 FC | 	wrlong	result1, fp
138b0     10 00 90 FD | 	jmp	#LR__1575
138b4                 | LR__1574
138b4     A7 16 68 FC | 	wrlong	#11, fp
138b8     08 4E 05 F1 | 	add	fp, #8
138bc     A7 FE 69 FC | 	wrlong	#255, fp
138c0     08 4E 85 F1 | 	sub	fp, #8
138c4                 | LR__1575
138c4     A7 12 02 F6 | 	mov	arg01, fp
138c8     F0 79 BF FD | 	call	#_push
138cc     A7 F0 03 F6 | 	mov	ptra, fp
138d0     B2 00 A0 FD | 	call	#popregs_
138d4                 | _do_fdiv_ret
138d4     2D 00 64 FD | 	ret
138d8                 | 
138d8                 | ' 
138d8                 | ' 
138d8                 | ' sub do_mod 
138d8                 | _do_mod
138d8     01 4A 05 F6 | 	mov	COUNT_, #1
138dc     A8 00 A0 FD | 	call	#pushregs_
138e0     18 F0 07 F1 | 	add	ptra, #24
138e4     3C 79 BF FD | 	call	#_pop
138e8     FD 7E 02 F6 | 	mov	muldivb_, result1
138ec     FE 7C 02 F6 | 	mov	muldiva_, result2
138f0     FF 1E 02 F6 | 	mov	local01, result3
138f4     0C 4E 05 F1 | 	add	fp, #12
138f8     A7 7E 62 FC | 	wrlong	muldivb_, fp
138fc     04 4E 05 F1 | 	add	fp, #4
13900     A7 7C 62 FC | 	wrlong	muldiva_, fp
13904     04 4E 05 F1 | 	add	fp, #4
13908     A7 1E 62 FC | 	wrlong	local01, fp
1390c     14 4E 85 F1 | 	sub	fp, #20
13910     10 79 BF FD | 	call	#_pop
13914     A7 FA 61 FC | 	wrlong	result1, fp
13918     04 4E 05 F1 | 	add	fp, #4
1391c     A7 FC 61 FC | 	wrlong	result2, fp
13920     04 4E 05 F1 | 	add	fp, #4
13924     A7 FE 61 FC | 	wrlong	result3, fp
13928                 | ' 
13928                 | ' t2=pop()
13928                 | ' t1=pop()
13928                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
13928     08 4E 85 F1 | 	sub	fp, #8
1392c     1F FE 0D F2 | 	cmp	result3, #31 wz
13930     14 4E 05 51 |  if_ne	add	fp, #20
13934     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13938     14 4E 85 51 |  if_ne	sub	fp, #20
1393c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
13940     A7 14 68 AC |  if_e	wrlong	#10, fp
13944     08 4E 05 A1 |  if_e	add	fp, #8
13948     A7 FE 69 AC |  if_e	wrlong	#255, fp
1394c     08 4E 85 A1 |  if_e	sub	fp, #8
13950     90 01 90 AD |  if_e	jmp	#LR__1586
13954                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
13954     08 4E 05 F1 | 	add	fp, #8
13958     A7 7E 02 FB | 	rdlong	muldivb_, fp
1395c     08 4E 85 F1 | 	sub	fp, #8
13960     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13964     1C 00 90 5D |  if_ne	jmp	#LR__1580
13968     08 4E 05 F1 | 	add	fp, #8
1396c     A7 38 68 FC | 	wrlong	#28, fp
13970     08 4E 85 F1 | 	sub	fp, #8
13974     A7 12 02 FB | 	rdlong	arg01, fp
13978     00 14 06 F6 | 	mov	arg02, #0
1397c     00 02 B1 FD | 	call	#__system___float_tointeger
13980     A7 FA 61 FC | 	wrlong	result1, fp
13984                 | LR__1580
13984                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
13984     14 4E 05 F1 | 	add	fp, #20
13988     A7 7E 02 FB | 	rdlong	muldivb_, fp
1398c     14 4E 85 F1 | 	sub	fp, #20
13990     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13994     28 00 90 5D |  if_ne	jmp	#LR__1581
13998     14 4E 05 F1 | 	add	fp, #20
1399c     A7 38 68 FC | 	wrlong	#28, fp
139a0     08 4E 85 F1 | 	sub	fp, #8
139a4     A7 12 02 FB | 	rdlong	arg01, fp
139a8     0C 4E 85 F1 | 	sub	fp, #12
139ac     00 14 06 F6 | 	mov	arg02, #0
139b0     CC 01 B1 FD | 	call	#__system___float_tointeger
139b4     0C 4E 05 F1 | 	add	fp, #12
139b8     A7 FA 61 FC | 	wrlong	result1, fp
139bc     0C 4E 85 F1 | 	sub	fp, #12
139c0                 | LR__1581
139c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
139c0     08 4E 05 F1 | 	add	fp, #8
139c4     A7 7E 02 FB | 	rdlong	muldivb_, fp
139c8     08 4E 85 F1 | 	sub	fp, #8
139cc     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
139d0     14 4E 05 A1 |  if_e	add	fp, #20
139d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
139d8     14 4E 85 A1 |  if_e	sub	fp, #20
139dc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
139e0     20 00 90 5D |  if_ne	jmp	#LR__1582
139e4     0C 4E 05 F1 | 	add	fp, #12
139e8     A7 1E 02 FB | 	rdlong	local01, fp
139ec     0C 4E 85 F1 | 	sub	fp, #12
139f0     A7 7E 02 FB | 	rdlong	muldivb_, fp
139f4     0F 7F 12 FD | 	qdiv	muldivb_, local01
139f8     19 1E 62 FD | 	getqy	local01
139fc     A7 1E 62 FC | 	wrlong	local01, fp
13a00     E0 00 90 FD | 	jmp	#LR__1586
13a04                 | LR__1582
13a04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
13a04     08 4E 05 F1 | 	add	fp, #8
13a08     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a0c     08 4E 85 F1 | 	sub	fp, #8
13a10     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13a14     14 4E 05 A1 |  if_e	add	fp, #20
13a18     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a1c     14 4E 85 A1 |  if_e	sub	fp, #20
13a20     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13a24     2C 00 90 5D |  if_ne	jmp	#LR__1583
13a28     0C 4E 05 F1 | 	add	fp, #12
13a2c     A7 1E 02 FB | 	rdlong	local01, fp
13a30     0C 4E 85 F1 | 	sub	fp, #12
13a34     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a38     0F 7F 12 FD | 	qdiv	muldivb_, local01
13a3c     19 1E 62 FD | 	getqy	local01
13a40     A7 1E 62 FC | 	wrlong	local01, fp
13a44     08 4E 05 F1 | 	add	fp, #8
13a48     A7 38 68 FC | 	wrlong	#28, fp
13a4c     08 4E 85 F1 | 	sub	fp, #8
13a50     90 00 90 FD | 	jmp	#LR__1586
13a54                 | LR__1583
13a54                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
13a54     08 4E 05 F1 | 	add	fp, #8
13a58     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a5c     08 4E 85 F1 | 	sub	fp, #8
13a60     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13a64     14 4E 05 A1 |  if_e	add	fp, #20
13a68     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a6c     14 4E 85 A1 |  if_e	sub	fp, #20
13a70     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13a74     1C 00 90 5D |  if_ne	jmp	#LR__1584
13a78     A7 7C 02 FB | 	rdlong	muldiva_, fp
13a7c     0C 4E 05 F1 | 	add	fp, #12
13a80     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a84     0C 4E 85 F1 | 	sub	fp, #12
13a88     BA 00 A0 FD | 	call	#divide_
13a8c     A7 7C 62 FC | 	wrlong	muldiva_, fp
13a90     50 00 90 FD | 	jmp	#LR__1586
13a94                 | LR__1584
13a94                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
13a94     08 4E 05 F1 | 	add	fp, #8
13a98     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a9c     08 4E 85 F1 | 	sub	fp, #8
13aa0     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13aa4     14 4E 05 A1 |  if_e	add	fp, #20
13aa8     A7 1E 02 AB |  if_e	rdlong	local01, fp
13aac     14 4E 85 A1 |  if_e	sub	fp, #20
13ab0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13ab4     1C 00 90 5D |  if_ne	jmp	#LR__1585
13ab8     A7 7C 02 FB | 	rdlong	muldiva_, fp
13abc     0C 4E 05 F1 | 	add	fp, #12
13ac0     A7 7E 02 FB | 	rdlong	muldivb_, fp
13ac4     0C 4E 85 F1 | 	sub	fp, #12
13ac8     BA 00 A0 FD | 	call	#divide_
13acc     A7 7C 62 FC | 	wrlong	muldiva_, fp
13ad0     10 00 90 FD | 	jmp	#LR__1586
13ad4                 | LR__1585
13ad4     A7 16 68 FC | 	wrlong	#11, fp
13ad8     08 4E 05 F1 | 	add	fp, #8
13adc     A7 FE 69 FC | 	wrlong	#255, fp
13ae0     08 4E 85 F1 | 	sub	fp, #8
13ae4                 | LR__1586
13ae4     A7 12 02 F6 | 	mov	arg01, fp
13ae8     D0 77 BF FD | 	call	#_push
13aec     A7 F0 03 F6 | 	mov	ptra, fp
13af0     B2 00 A0 FD | 	call	#popregs_
13af4                 | _do_mod_ret
13af4     2D 00 64 FD | 	ret
13af8                 | 
13af8                 | ' 
13af8                 | ' sub do_shl 
13af8                 | _do_shl
13af8     03 4A 05 F6 | 	mov	COUNT_, #3
13afc     A8 00 A0 FD | 	call	#pushregs_
13b00     18 F0 07 F1 | 	add	ptra, #24
13b04     1C 77 BF FD | 	call	#_pop
13b08     FD 12 02 F6 | 	mov	arg01, result1
13b0c     FE 1E 02 F6 | 	mov	local01, result2
13b10     FF 20 02 F6 | 	mov	local02, result3
13b14     0C 4E 05 F1 | 	add	fp, #12
13b18     A7 12 62 FC | 	wrlong	arg01, fp
13b1c     04 4E 05 F1 | 	add	fp, #4
13b20     A7 1E 62 FC | 	wrlong	local01, fp
13b24     04 4E 05 F1 | 	add	fp, #4
13b28     A7 20 62 FC | 	wrlong	local02, fp
13b2c     14 4E 85 F1 | 	sub	fp, #20
13b30     F0 76 BF FD | 	call	#_pop
13b34     FF 22 02 F6 | 	mov	local03, result3
13b38     A7 FA 61 FC | 	wrlong	result1, fp
13b3c     04 4E 05 F1 | 	add	fp, #4
13b40     A7 FC 61 FC | 	wrlong	result2, fp
13b44     04 4E 05 F1 | 	add	fp, #4
13b48     A7 22 62 FC | 	wrlong	local03, fp
13b4c                 | ' 
13b4c                 | ' t2=pop()
13b4c                 | ' t1=pop()
13b4c                 | ' 
13b4c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13b4c     08 4E 85 F1 | 	sub	fp, #8
13b50     1C 22 0E F2 | 	cmp	local03, #28 wz
13b54     A7 22 02 AB |  if_e	rdlong	local03, fp
13b58     A7 22 62 AC |  if_e	wrlong	local03, fp
13b5c     08 4E 05 A1 |  if_e	add	fp, #8
13b60     A7 3A 68 AC |  if_e	wrlong	#29, fp
13b64     08 4E 85 A1 |  if_e	sub	fp, #8
13b68                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13b68     14 4E 05 F1 | 	add	fp, #20
13b6c     A7 22 02 FB | 	rdlong	local03, fp
13b70     14 4E 85 F1 | 	sub	fp, #20
13b74     1C 22 0E F2 | 	cmp	local03, #28 wz
13b78     18 00 90 5D |  if_ne	jmp	#LR__1590
13b7c     0C 4E 05 F1 | 	add	fp, #12
13b80     A7 22 02 FB | 	rdlong	local03, fp
13b84     A7 22 62 FC | 	wrlong	local03, fp
13b88     08 4E 05 F1 | 	add	fp, #8
13b8c     A7 3A 68 FC | 	wrlong	#29, fp
13b90     14 4E 85 F1 | 	sub	fp, #20
13b94                 | LR__1590
13b94                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13b94     08 4E 05 F1 | 	add	fp, #8
13b98     A7 22 02 FB | 	rdlong	local03, fp
13b9c     08 4E 85 F1 | 	sub	fp, #8
13ba0     1F 22 0E F2 | 	cmp	local03, #31 wz
13ba4     14 4E 05 51 |  if_ne	add	fp, #20
13ba8     A7 20 02 5B |  if_ne	rdlong	local02, fp
13bac     14 4E 85 51 |  if_ne	sub	fp, #20
13bb0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13bb4     08 4E 05 51 |  if_ne	add	fp, #8
13bb8     A7 22 02 5B |  if_ne	rdlong	local03, fp
13bbc     08 4E 85 51 |  if_ne	sub	fp, #8
13bc0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13bc4     14 4E 05 51 |  if_ne	add	fp, #20
13bc8     14 4E 85 51 |  if_ne	sub	fp, #20
13bcc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13bd0     A7 0C 68 AC |  if_e	wrlong	#6, fp
13bd4     08 4E 05 A1 |  if_e	add	fp, #8
13bd8     A7 FE 69 AC |  if_e	wrlong	#255, fp
13bdc     08 4E 85 A1 |  if_e	sub	fp, #8
13be0     18 00 90 AD |  if_e	jmp	#LR__1591
13be4     A7 22 02 FB | 	rdlong	local03, fp
13be8     0C 4E 05 F1 | 	add	fp, #12
13bec     A7 1E 02 FB | 	rdlong	local01, fp
13bf0     0C 4E 85 F1 | 	sub	fp, #12
13bf4     0F 23 62 F0 | 	shl	local03, local01
13bf8     A7 22 62 FC | 	wrlong	local03, fp
13bfc                 | LR__1591
13bfc     A7 12 02 F6 | 	mov	arg01, fp
13c00     B8 76 BF FD | 	call	#_push
13c04     A7 F0 03 F6 | 	mov	ptra, fp
13c08     B2 00 A0 FD | 	call	#popregs_
13c0c                 | _do_shl_ret
13c0c     2D 00 64 FD | 	ret
13c10                 | 
13c10                 | ' 
13c10                 | ' sub do_shr 
13c10                 | _do_shr
13c10     03 4A 05 F6 | 	mov	COUNT_, #3
13c14     A8 00 A0 FD | 	call	#pushregs_
13c18     18 F0 07 F1 | 	add	ptra, #24
13c1c     04 76 BF FD | 	call	#_pop
13c20     FD 12 02 F6 | 	mov	arg01, result1
13c24     FE 1E 02 F6 | 	mov	local01, result2
13c28     FF 20 02 F6 | 	mov	local02, result3
13c2c     0C 4E 05 F1 | 	add	fp, #12
13c30     A7 12 62 FC | 	wrlong	arg01, fp
13c34     04 4E 05 F1 | 	add	fp, #4
13c38     A7 1E 62 FC | 	wrlong	local01, fp
13c3c     04 4E 05 F1 | 	add	fp, #4
13c40     A7 20 62 FC | 	wrlong	local02, fp
13c44     14 4E 85 F1 | 	sub	fp, #20
13c48     D8 75 BF FD | 	call	#_pop
13c4c     FF 22 02 F6 | 	mov	local03, result3
13c50     A7 FA 61 FC | 	wrlong	result1, fp
13c54     04 4E 05 F1 | 	add	fp, #4
13c58     A7 FC 61 FC | 	wrlong	result2, fp
13c5c     04 4E 05 F1 | 	add	fp, #4
13c60     A7 22 62 FC | 	wrlong	local03, fp
13c64                 | ' t2=pop()
13c64                 | ' t1=pop()
13c64                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13c64     08 4E 85 F1 | 	sub	fp, #8
13c68     1C 22 0E F2 | 	cmp	local03, #28 wz
13c6c     A7 22 02 AB |  if_e	rdlong	local03, fp
13c70     A7 22 62 AC |  if_e	wrlong	local03, fp
13c74     08 4E 05 A1 |  if_e	add	fp, #8
13c78     A7 3A 68 AC |  if_e	wrlong	#29, fp
13c7c     08 4E 85 A1 |  if_e	sub	fp, #8
13c80                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13c80     14 4E 05 F1 | 	add	fp, #20
13c84     A7 22 02 FB | 	rdlong	local03, fp
13c88     14 4E 85 F1 | 	sub	fp, #20
13c8c     1C 22 0E F2 | 	cmp	local03, #28 wz
13c90     18 00 90 5D |  if_ne	jmp	#LR__1600
13c94     0C 4E 05 F1 | 	add	fp, #12
13c98     A7 22 02 FB | 	rdlong	local03, fp
13c9c     A7 22 62 FC | 	wrlong	local03, fp
13ca0     08 4E 05 F1 | 	add	fp, #8
13ca4     A7 3A 68 FC | 	wrlong	#29, fp
13ca8     14 4E 85 F1 | 	sub	fp, #20
13cac                 | LR__1600
13cac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13cac     08 4E 05 F1 | 	add	fp, #8
13cb0     A7 22 02 FB | 	rdlong	local03, fp
13cb4     08 4E 85 F1 | 	sub	fp, #8
13cb8     1F 22 0E F2 | 	cmp	local03, #31 wz
13cbc     14 4E 05 51 |  if_ne	add	fp, #20
13cc0     A7 20 02 5B |  if_ne	rdlong	local02, fp
13cc4     14 4E 85 51 |  if_ne	sub	fp, #20
13cc8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13ccc     08 4E 05 51 |  if_ne	add	fp, #8
13cd0     A7 22 02 5B |  if_ne	rdlong	local03, fp
13cd4     08 4E 85 51 |  if_ne	sub	fp, #8
13cd8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13cdc     14 4E 05 51 |  if_ne	add	fp, #20
13ce0     14 4E 85 51 |  if_ne	sub	fp, #20
13ce4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13ce8     A7 0C 68 AC |  if_e	wrlong	#6, fp
13cec     08 4E 05 A1 |  if_e	add	fp, #8
13cf0     A7 FE 69 AC |  if_e	wrlong	#255, fp
13cf4     08 4E 85 A1 |  if_e	sub	fp, #8
13cf8     18 00 90 AD |  if_e	jmp	#LR__1601
13cfc     A7 22 02 FB | 	rdlong	local03, fp
13d00     0C 4E 05 F1 | 	add	fp, #12
13d04     A7 1E 02 FB | 	rdlong	local01, fp
13d08     0C 4E 85 F1 | 	sub	fp, #12
13d0c     0F 23 42 F0 | 	shr	local03, local01
13d10     A7 22 62 FC | 	wrlong	local03, fp
13d14                 | LR__1601
13d14     A7 12 02 F6 | 	mov	arg01, fp
13d18     A0 75 BF FD | 	call	#_push
13d1c     A7 F0 03 F6 | 	mov	ptra, fp
13d20     B2 00 A0 FD | 	call	#popregs_
13d24                 | _do_shr_ret
13d24     2D 00 64 FD | 	ret
13d28                 | 
13d28                 | ' 
13d28                 | ' sub do_power 
13d28                 | _do_power
13d28     02 4A 05 F6 | 	mov	COUNT_, #2
13d2c     A8 00 A0 FD | 	call	#pushregs_
13d30     18 F0 07 F1 | 	add	ptra, #24
13d34     EC 74 BF FD | 	call	#_pop
13d38     FD 14 02 F6 | 	mov	arg02, result1
13d3c     FE 12 02 F6 | 	mov	arg01, result2
13d40     FF 1E 02 F6 | 	mov	local01, result3
13d44     0C 4E 05 F1 | 	add	fp, #12
13d48     A7 14 62 FC | 	wrlong	arg02, fp
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 12 62 FC | 	wrlong	arg01, fp
13d54     04 4E 05 F1 | 	add	fp, #4
13d58     A7 1E 62 FC | 	wrlong	local01, fp
13d5c     14 4E 85 F1 | 	sub	fp, #20
13d60     C0 74 BF FD | 	call	#_pop
13d64     A7 FA 61 FC | 	wrlong	result1, fp
13d68     04 4E 05 F1 | 	add	fp, #4
13d6c     A7 FC 61 FC | 	wrlong	result2, fp
13d70     04 4E 05 F1 | 	add	fp, #4
13d74     A7 FE 61 FC | 	wrlong	result3, fp
13d78                 | ' t2=pop()
13d78                 | ' t1=pop()
13d78                 | ' 
13d78                 | ' 
13d78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
13d78     08 4E 85 F1 | 	sub	fp, #8
13d7c     1F FE 0D F2 | 	cmp	result3, #31 wz
13d80     14 4E 05 51 |  if_ne	add	fp, #20
13d84     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13d88     14 4E 85 51 |  if_ne	sub	fp, #20
13d8c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13d90     A7 18 68 AC |  if_e	wrlong	#12, fp
13d94     08 4E 05 A1 |  if_e	add	fp, #8
13d98     A7 FE 69 AC |  if_e	wrlong	#255, fp
13d9c     08 4E 85 A1 |  if_e	sub	fp, #8
13da0     38 01 90 AD |  if_e	jmp	#LR__1615
13da4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13da4     08 4E 05 F1 | 	add	fp, #8
13da8     A7 14 02 FB | 	rdlong	arg02, fp
13dac     08 4E 85 F1 | 	sub	fp, #8
13db0     1C 14 0E F2 | 	cmp	arg02, #28 wz
13db4     28 00 90 5D |  if_ne	jmp	#LR__1610
13db8     08 4E 05 F1 | 	add	fp, #8
13dbc     A7 3C 68 FC | 	wrlong	#30, fp
13dc0     08 4E 85 F1 | 	sub	fp, #8
13dc4     A7 12 02 FB | 	rdlong	arg01, fp
13dc8     09 13 52 F6 | 	abs	arg01, arg01 wc
13dcc     1F 20 C6 C9 |  if_b	decod	local02, #31
13dd0     00 20 06 36 |  if_ae	mov	local02, #0
13dd4     DC F4 B0 FD | 	call	#__system___float_fromuns
13dd8     10 FB 61 F5 | 	xor	result1, local02
13ddc     A7 FA 61 FC | 	wrlong	result1, fp
13de0                 | LR__1610
13de0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13de0     08 4E 05 F1 | 	add	fp, #8
13de4     A7 14 02 FB | 	rdlong	arg02, fp
13de8     08 4E 85 F1 | 	sub	fp, #8
13dec     1D 14 0E F2 | 	cmp	arg02, #29 wz
13df0     18 00 90 5D |  if_ne	jmp	#LR__1611
13df4     08 4E 05 F1 | 	add	fp, #8
13df8     A7 3C 68 FC | 	wrlong	#30, fp
13dfc     08 4E 85 F1 | 	sub	fp, #8
13e00     A7 12 02 FB | 	rdlong	arg01, fp
13e04     AC F4 B0 FD | 	call	#__system___float_fromuns
13e08     A7 FA 61 FC | 	wrlong	result1, fp
13e0c                 | LR__1611
13e0c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13e0c     14 4E 05 F1 | 	add	fp, #20
13e10     A7 14 02 FB | 	rdlong	arg02, fp
13e14     14 4E 85 F1 | 	sub	fp, #20
13e18     1C 14 0E F2 | 	cmp	arg02, #28 wz
13e1c     34 00 90 5D |  if_ne	jmp	#LR__1612
13e20     14 4E 05 F1 | 	add	fp, #20
13e24     A7 3C 68 FC | 	wrlong	#30, fp
13e28     08 4E 85 F1 | 	sub	fp, #8
13e2c     A7 12 02 FB | 	rdlong	arg01, fp
13e30     0C 4E 85 F1 | 	sub	fp, #12
13e34     09 13 52 F6 | 	abs	arg01, arg01 wc
13e38     1F 20 C6 C9 |  if_b	decod	local02, #31
13e3c     00 20 06 36 |  if_ae	mov	local02, #0
13e40     70 F4 B0 FD | 	call	#__system___float_fromuns
13e44     10 FB 61 F5 | 	xor	result1, local02
13e48     0C 4E 05 F1 | 	add	fp, #12
13e4c     A7 FA 61 FC | 	wrlong	result1, fp
13e50     0C 4E 85 F1 | 	sub	fp, #12
13e54                 | LR__1612
13e54                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13e54     14 4E 05 F1 | 	add	fp, #20
13e58     A7 14 02 FB | 	rdlong	arg02, fp
13e5c     14 4E 85 F1 | 	sub	fp, #20
13e60     1D 14 0E F2 | 	cmp	arg02, #29 wz
13e64     24 00 90 5D |  if_ne	jmp	#LR__1613
13e68     14 4E 05 F1 | 	add	fp, #20
13e6c     A7 3C 68 FC | 	wrlong	#30, fp
13e70     08 4E 85 F1 | 	sub	fp, #8
13e74     A7 12 02 FB | 	rdlong	arg01, fp
13e78     0C 4E 85 F1 | 	sub	fp, #12
13e7c     34 F4 B0 FD | 	call	#__system___float_fromuns
13e80     0C 4E 05 F1 | 	add	fp, #12
13e84     A7 FA 61 FC | 	wrlong	result1, fp
13e88     0C 4E 85 F1 | 	sub	fp, #12
13e8c                 | LR__1613
13e8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13e8c     08 4E 05 F1 | 	add	fp, #8
13e90     A7 14 02 FB | 	rdlong	arg02, fp
13e94     08 4E 85 F1 | 	sub	fp, #8
13e98     1E 14 0E F2 | 	cmp	arg02, #30 wz
13e9c     14 4E 05 A1 |  if_e	add	fp, #20
13ea0     A7 1E 02 AB |  if_e	rdlong	local01, fp
13ea4     14 4E 85 A1 |  if_e	sub	fp, #20
13ea8     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13eac     1C 00 90 5D |  if_ne	jmp	#LR__1614
13eb0     A7 12 02 FB | 	rdlong	arg01, fp
13eb4     0C 4E 05 F1 | 	add	fp, #12
13eb8     A7 14 02 FB | 	rdlong	arg02, fp
13ebc     0C 4E 85 F1 | 	sub	fp, #12
13ec0     FC 06 B1 FD | 	call	#__system____builtin_powf
13ec4     A7 FA 61 FC | 	wrlong	result1, fp
13ec8     10 00 90 FD | 	jmp	#LR__1615
13ecc                 | LR__1614
13ecc     A7 1A 68 FC | 	wrlong	#13, fp
13ed0     08 4E 05 F1 | 	add	fp, #8
13ed4     A7 FE 69 FC | 	wrlong	#255, fp
13ed8     08 4E 85 F1 | 	sub	fp, #8
13edc                 | LR__1615
13edc     A7 12 02 F6 | 	mov	arg01, fp
13ee0     D8 73 BF FD | 	call	#_push
13ee4     A7 F0 03 F6 | 	mov	ptra, fp
13ee8     B2 00 A0 FD | 	call	#popregs_
13eec                 | _do_power_ret
13eec     2D 00 64 FD | 	ret
13ef0                 | 
13ef0                 | ' 
13ef0                 | ' 
13ef0                 | ' sub do_eq
13ef0                 | _do_eq
13ef0     05 4A 05 F6 | 	mov	COUNT_, #5
13ef4     A8 00 A0 FD | 	call	#pushregs_
13ef8     18 F0 07 F1 | 	add	ptra, #24
13efc     24 73 BF FD | 	call	#_pop
13f00     FD 1E 02 F6 | 	mov	local01, result1
13f04     FE 20 02 F6 | 	mov	local02, result2
13f08     FF 22 02 F6 | 	mov	local03, result3
13f0c     0C 4E 05 F1 | 	add	fp, #12
13f10     A7 1E 62 FC | 	wrlong	local01, fp
13f14     04 4E 05 F1 | 	add	fp, #4
13f18     A7 20 62 FC | 	wrlong	local02, fp
13f1c     04 4E 05 F1 | 	add	fp, #4
13f20     A7 22 62 FC | 	wrlong	local03, fp
13f24     14 4E 85 F1 | 	sub	fp, #20
13f28     F8 72 BF FD | 	call	#_pop
13f2c     FF 22 02 F6 | 	mov	local03, result3
13f30     A7 FA 61 FC | 	wrlong	result1, fp
13f34     04 4E 05 F1 | 	add	fp, #4
13f38     A7 FC 61 FC | 	wrlong	result2, fp
13f3c     04 4E 05 F1 | 	add	fp, #4
13f40     A7 22 62 FC | 	wrlong	local03, fp
13f44                 | ' t2=pop()
13f44                 | ' t1=pop()
13f44                 | ' 
13f44                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
13f44     08 4E 85 F1 | 	sub	fp, #8
13f48     1F 22 0E F2 | 	cmp	local03, #31 wz
13f4c     14 4E 05 A1 |  if_e	add	fp, #20
13f50     A7 24 02 AB |  if_e	rdlong	local04, fp
13f54     14 4E 85 A1 |  if_e	sub	fp, #20
13f58     12 23 02 A6 |  if_e	mov	local03, local04
13f5c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13f60     28 00 90 5D |  if_ne	jmp	#LR__1620
13f64     00 1E 06 F6 | 	mov	local01, #0
13f68     A7 12 02 FB | 	rdlong	arg01, fp
13f6c     0C 4E 05 F1 | 	add	fp, #12
13f70     A7 14 02 FB | 	rdlong	arg02, fp
13f74     0C 4E 85 F1 | 	sub	fp, #12
13f78     B0 CB B0 FD | 	call	#__system___string_cmp
13f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
13f80     00 1E 26 A6 |  if_e	not	local01, #0
13f84     A7 1E 62 FC | 	wrlong	local01, fp
13f88     1C 04 90 FD | 	jmp	#LR__1633
13f8c                 | LR__1620
13f8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
13f8c     08 4E 05 F1 | 	add	fp, #8
13f90     A7 1E 02 FB | 	rdlong	local01, fp
13f94     08 4E 85 F1 | 	sub	fp, #8
13f98     1E 1E 0E F2 | 	cmp	local01, #30 wz
13f9c     14 4E 05 A1 |  if_e	add	fp, #20
13fa0     A7 24 02 AB |  if_e	rdlong	local04, fp
13fa4     14 4E 85 A1 |  if_e	sub	fp, #20
13fa8     12 23 02 A6 |  if_e	mov	local03, local04
13fac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13fb0     2C 00 90 5D |  if_ne	jmp	#LR__1621
13fb4     00 1E 06 F6 | 	mov	local01, #0
13fb8     A7 12 02 FB | 	rdlong	arg01, fp
13fbc     0C 4E 05 F1 | 	add	fp, #12
13fc0     A7 14 02 FB | 	rdlong	arg02, fp
13fc4     0C 4E 85 F1 | 	sub	fp, #12
13fc8     01 16 06 F6 | 	mov	arg03, #1
13fcc     1C FB B0 FD | 	call	#__system___float_cmp
13fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
13fd4     00 1E 26 A6 |  if_e	not	local01, #0
13fd8     A7 1E 62 FC | 	wrlong	local01, fp
13fdc     C8 03 90 FD | 	jmp	#LR__1633
13fe0                 | LR__1621
13fe0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
13fe0     08 4E 05 F1 | 	add	fp, #8
13fe4     A7 1E 02 FB | 	rdlong	local01, fp
13fe8     08 4E 85 F1 | 	sub	fp, #8
13fec     1E 1E 0E F2 | 	cmp	local01, #30 wz
13ff0     14 4E 05 A1 |  if_e	add	fp, #20
13ff4     A7 24 02 AB |  if_e	rdlong	local04, fp
13ff8     14 4E 85 A1 |  if_e	sub	fp, #20
13ffc     12 23 02 A6 |  if_e	mov	local03, local04
14000     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14004     48 00 90 5D |  if_ne	jmp	#LR__1622
14008     00 1E 06 F6 | 	mov	local01, #0
1400c     A7 20 02 FB | 	rdlong	local02, fp
14010     0C 4E 05 F1 | 	add	fp, #12
14014     A7 12 02 FB | 	rdlong	arg01, fp
14018     0C 4E 85 F1 | 	sub	fp, #12
1401c     09 13 52 F6 | 	abs	arg01, arg01 wc
14020     1F 26 C6 C9 |  if_b	decod	local05, #31
14024     00 26 06 36 |  if_ae	mov	local05, #0
14028     88 F2 B0 FD | 	call	#__system___float_fromuns
1402c     13 FB 61 F5 | 	xor	result1, local05
14030     FD 14 02 F6 | 	mov	arg02, result1
14034     10 13 02 F6 | 	mov	arg01, local02
14038     01 16 06 F6 | 	mov	arg03, #1
1403c     AC FA B0 FD | 	call	#__system___float_cmp
14040     00 FA 0D F2 | 	cmp	result1, #0 wz
14044     00 1E 26 A6 |  if_e	not	local01, #0
14048     A7 1E 62 FC | 	wrlong	local01, fp
1404c     58 03 90 FD | 	jmp	#LR__1633
14050                 | LR__1622
14050                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
14050     08 4E 05 F1 | 	add	fp, #8
14054     A7 1E 02 FB | 	rdlong	local01, fp
14058     08 4E 85 F1 | 	sub	fp, #8
1405c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14060     14 4E 05 A1 |  if_e	add	fp, #20
14064     A7 24 02 AB |  if_e	rdlong	local04, fp
14068     14 4E 85 A1 |  if_e	sub	fp, #20
1406c     12 23 02 A6 |  if_e	mov	local03, local04
14070     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14074     38 00 90 5D |  if_ne	jmp	#LR__1623
14078     00 1E 06 F6 | 	mov	local01, #0
1407c     A7 20 02 FB | 	rdlong	local02, fp
14080     0C 4E 05 F1 | 	add	fp, #12
14084     A7 12 02 FB | 	rdlong	arg01, fp
14088     0C 4E 85 F1 | 	sub	fp, #12
1408c     24 F2 B0 FD | 	call	#__system___float_fromuns
14090     FD 14 02 F6 | 	mov	arg02, result1
14094     10 13 02 F6 | 	mov	arg01, local02
14098     01 16 06 F6 | 	mov	arg03, #1
1409c     4C FA B0 FD | 	call	#__system___float_cmp
140a0     00 FA 0D F2 | 	cmp	result1, #0 wz
140a4     00 1E 26 A6 |  if_e	not	local01, #0
140a8     A7 1E 62 FC | 	wrlong	local01, fp
140ac     F8 02 90 FD | 	jmp	#LR__1633
140b0                 | LR__1623
140b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
140b0     08 4E 05 F1 | 	add	fp, #8
140b4     A7 1E 02 FB | 	rdlong	local01, fp
140b8     08 4E 85 F1 | 	sub	fp, #8
140bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
140c0     14 4E 05 A1 |  if_e	add	fp, #20
140c4     A7 24 02 AB |  if_e	rdlong	local04, fp
140c8     14 4E 85 A1 |  if_e	sub	fp, #20
140cc     12 23 02 A6 |  if_e	mov	local03, local04
140d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
140d4     44 00 90 5D |  if_ne	jmp	#LR__1624
140d8     00 1E 06 F6 | 	mov	local01, #0
140dc     A7 12 02 FB | 	rdlong	arg01, fp
140e0     09 13 52 F6 | 	abs	arg01, arg01 wc
140e4     1F 26 C6 C9 |  if_b	decod	local05, #31
140e8     00 26 06 36 |  if_ae	mov	local05, #0
140ec     C4 F1 B0 FD | 	call	#__system___float_fromuns
140f0     13 FB 61 F5 | 	xor	result1, local05
140f4     FD 12 02 F6 | 	mov	arg01, result1
140f8     0C 4E 05 F1 | 	add	fp, #12
140fc     A7 14 02 FB | 	rdlong	arg02, fp
14100     0C 4E 85 F1 | 	sub	fp, #12
14104     01 16 06 F6 | 	mov	arg03, #1
14108     E0 F9 B0 FD | 	call	#__system___float_cmp
1410c     00 FA 0D F2 | 	cmp	result1, #0 wz
14110     00 1E 26 A6 |  if_e	not	local01, #0
14114     A7 1E 62 FC | 	wrlong	local01, fp
14118     8C 02 90 FD | 	jmp	#LR__1633
1411c                 | LR__1624
1411c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1411c     08 4E 05 F1 | 	add	fp, #8
14120     A7 1E 02 FB | 	rdlong	local01, fp
14124     08 4E 85 F1 | 	sub	fp, #8
14128     1C 1E 0E F2 | 	cmp	local01, #28 wz
1412c     14 4E 05 A1 |  if_e	add	fp, #20
14130     A7 24 02 AB |  if_e	rdlong	local04, fp
14134     14 4E 85 A1 |  if_e	sub	fp, #20
14138     12 23 02 A6 |  if_e	mov	local03, local04
1413c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14140     24 00 90 5D |  if_ne	jmp	#LR__1625
14144     00 1E 06 F6 | 	mov	local01, #0
14148     A7 20 02 FB | 	rdlong	local02, fp
1414c     0C 4E 05 F1 | 	add	fp, #12
14150     A7 22 02 FB | 	rdlong	local03, fp
14154     0C 4E 85 F1 | 	sub	fp, #12
14158     11 21 0A F2 | 	cmp	local02, local03 wz
1415c     01 1E 66 A6 |  if_e	neg	local01, #1
14160     A7 1E 62 FC | 	wrlong	local01, fp
14164     40 02 90 FD | 	jmp	#LR__1633
14168                 | LR__1625
14168                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
14168     08 4E 05 F1 | 	add	fp, #8
1416c     A7 1E 02 FB | 	rdlong	local01, fp
14170     08 4E 85 F1 | 	sub	fp, #8
14174     1C 1E 0E F2 | 	cmp	local01, #28 wz
14178     14 4E 05 A1 |  if_e	add	fp, #20
1417c     A7 24 02 AB |  if_e	rdlong	local04, fp
14180     14 4E 85 A1 |  if_e	sub	fp, #20
14184     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14188     24 00 90 5D |  if_ne	jmp	#LR__1626
1418c     00 1E 06 F6 | 	mov	local01, #0
14190     A7 20 02 FB | 	rdlong	local02, fp
14194     0C 4E 05 F1 | 	add	fp, #12
14198     A7 22 02 FB | 	rdlong	local03, fp
1419c     0C 4E 85 F1 | 	sub	fp, #12
141a0     11 21 0A F2 | 	cmp	local02, local03 wz
141a4     01 1E 66 A6 |  if_e	neg	local01, #1
141a8     A7 1E 62 FC | 	wrlong	local01, fp
141ac     F8 01 90 FD | 	jmp	#LR__1633
141b0                 | LR__1626
141b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
141b0     08 4E 05 F1 | 	add	fp, #8
141b4     A7 1E 02 FB | 	rdlong	local01, fp
141b8     08 4E 85 F1 | 	sub	fp, #8
141bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
141c0     14 4E 05 A1 |  if_e	add	fp, #20
141c4     A7 22 02 AB |  if_e	rdlong	local03, fp
141c8     14 4E 85 A1 |  if_e	sub	fp, #20
141cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
141d0     34 00 90 5D |  if_ne	jmp	#LR__1627
141d4     00 1E 06 F6 | 	mov	local01, #0
141d8     A7 12 02 FB | 	rdlong	arg01, fp
141dc     D4 F0 B0 FD | 	call	#__system___float_fromuns
141e0     FD 12 02 F6 | 	mov	arg01, result1
141e4     0C 4E 05 F1 | 	add	fp, #12
141e8     A7 14 02 FB | 	rdlong	arg02, fp
141ec     0C 4E 85 F1 | 	sub	fp, #12
141f0     01 16 06 F6 | 	mov	arg03, #1
141f4     F4 F8 B0 FD | 	call	#__system___float_cmp
141f8     00 FA 0D F2 | 	cmp	result1, #0 wz
141fc     00 1E 26 A6 |  if_e	not	local01, #0
14200     A7 1E 62 FC | 	wrlong	local01, fp
14204     A0 01 90 FD | 	jmp	#LR__1633
14208                 | LR__1627
14208                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
14208     08 4E 05 F1 | 	add	fp, #8
1420c     A7 1E 02 FB | 	rdlong	local01, fp
14210     08 4E 85 F1 | 	sub	fp, #8
14214     1D 1E 0E F2 | 	cmp	local01, #29 wz
14218     14 4E 05 A1 |  if_e	add	fp, #20
1421c     A7 22 02 AB |  if_e	rdlong	local03, fp
14220     14 4E 85 A1 |  if_e	sub	fp, #20
14224     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14228     24 00 90 5D |  if_ne	jmp	#LR__1628
1422c     00 1E 06 F6 | 	mov	local01, #0
14230     A7 20 02 FB | 	rdlong	local02, fp
14234     0C 4E 05 F1 | 	add	fp, #12
14238     A7 22 02 FB | 	rdlong	local03, fp
1423c     0C 4E 85 F1 | 	sub	fp, #12
14240     11 21 0A F2 | 	cmp	local02, local03 wz
14244     01 1E 66 A6 |  if_e	neg	local01, #1
14248     A7 1E 62 FC | 	wrlong	local01, fp
1424c     58 01 90 FD | 	jmp	#LR__1633
14250                 | LR__1628
14250                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
14250     08 4E 05 F1 | 	add	fp, #8
14254     A7 1E 02 FB | 	rdlong	local01, fp
14258     08 4E 85 F1 | 	sub	fp, #8
1425c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14260     14 4E 05 A1 |  if_e	add	fp, #20
14264     A7 22 02 AB |  if_e	rdlong	local03, fp
14268     14 4E 85 A1 |  if_e	sub	fp, #20
1426c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14270     24 00 90 5D |  if_ne	jmp	#LR__1629
14274     00 1E 06 F6 | 	mov	local01, #0
14278     A7 20 02 FB | 	rdlong	local02, fp
1427c     0C 4E 05 F1 | 	add	fp, #12
14280     A7 22 02 FB | 	rdlong	local03, fp
14284     0C 4E 85 F1 | 	sub	fp, #12
14288     11 21 0A F2 | 	cmp	local02, local03 wz
1428c     01 1E 66 A6 |  if_e	neg	local01, #1
14290     A7 1E 62 FC | 	wrlong	local01, fp
14294     10 01 90 FD | 	jmp	#LR__1633
14298                 | LR__1629
14298                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
14298     08 4E 05 F1 | 	add	fp, #8
1429c     A7 1E 02 FB | 	rdlong	local01, fp
142a0     08 4E 85 F1 | 	sub	fp, #8
142a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
142a8     14 4E 05 A1 |  if_e	add	fp, #20
142ac     A7 22 02 AB |  if_e	rdlong	local03, fp
142b0     14 4E 85 A1 |  if_e	sub	fp, #20
142b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
142b8     30 00 90 5D |  if_ne	jmp	#LR__1630
142bc     00 1E 06 F6 | 	mov	local01, #0
142c0     A7 12 02 FB | 	rdlong	arg01, fp
142c4     04 D1 BF FD | 	call	#_convertstring
142c8     FD 12 02 F6 | 	mov	arg01, result1
142cc     0C 4E 05 F1 | 	add	fp, #12
142d0     A7 14 02 FB | 	rdlong	arg02, fp
142d4     0C 4E 85 F1 | 	sub	fp, #12
142d8     50 C8 B0 FD | 	call	#__system___string_cmp
142dc     00 FA 0D F2 | 	cmp	result1, #0 wz
142e0     00 1E 26 A6 |  if_e	not	local01, #0
142e4     A7 1E 62 FC | 	wrlong	local01, fp
142e8     BC 00 90 FD | 	jmp	#LR__1633
142ec                 | LR__1630
142ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
142ec     08 4E 05 F1 | 	add	fp, #8
142f0     A7 1E 02 FB | 	rdlong	local01, fp
142f4     08 4E 85 F1 | 	sub	fp, #8
142f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
142fc     14 4E 05 A1 |  if_e	add	fp, #20
14300     A7 22 02 AB |  if_e	rdlong	local03, fp
14304     14 4E 85 A1 |  if_e	sub	fp, #20
14308     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1430c     34 00 90 5D |  if_ne	jmp	#LR__1631
14310     00 1E 06 F6 | 	mov	local01, #0
14314     A7 20 02 FB | 	rdlong	local02, fp
14318     0C 4E 05 F1 | 	add	fp, #12
1431c     A7 12 02 FB | 	rdlong	arg01, fp
14320     0C 4E 85 F1 | 	sub	fp, #12
14324     A4 D0 BF FD | 	call	#_convertstring
14328     FD 14 02 F6 | 	mov	arg02, result1
1432c     10 13 02 F6 | 	mov	arg01, local02
14330     F8 C7 B0 FD | 	call	#__system___string_cmp
14334     00 FA 0D F2 | 	cmp	result1, #0 wz
14338     00 1E 26 A6 |  if_e	not	local01, #0
1433c     A7 1E 62 FC | 	wrlong	local01, fp
14340     64 00 90 FD | 	jmp	#LR__1633
14344                 | LR__1631
14344                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
14344     08 4E 05 F1 | 	add	fp, #8
14348     A7 1E 02 FB | 	rdlong	local01, fp
1434c     08 4E 85 F1 | 	sub	fp, #8
14350     2B 1E 0E F2 | 	cmp	local01, #43 wz
14354     14 4E 05 A1 |  if_e	add	fp, #20
14358     A7 22 02 AB |  if_e	rdlong	local03, fp
1435c     14 4E 85 A1 |  if_e	sub	fp, #20
14360     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14364     3C 00 90 5D |  if_ne	jmp	#LR__1632
14368     00 1E 06 F6 | 	mov	local01, #0
1436c     A7 12 02 FB | 	rdlong	arg01, fp
14370     58 D0 BF FD | 	call	#_convertstring
14374     FD 20 02 F6 | 	mov	local02, result1
14378     0C 4E 05 F1 | 	add	fp, #12
1437c     A7 12 02 FB | 	rdlong	arg01, fp
14380     0C 4E 85 F1 | 	sub	fp, #12
14384     44 D0 BF FD | 	call	#_convertstring
14388     FD 14 02 F6 | 	mov	arg02, result1
1438c     10 13 02 F6 | 	mov	arg01, local02
14390     98 C7 B0 FD | 	call	#__system___string_cmp
14394     00 FA 0D F2 | 	cmp	result1, #0 wz
14398     00 1E 26 A6 |  if_e	not	local01, #0
1439c     A7 1E 62 FC | 	wrlong	local01, fp
143a0     04 00 90 FD | 	jmp	#LR__1633
143a4                 | LR__1632
143a4     A7 00 68 FC | 	wrlong	#0, fp
143a8                 | LR__1633
143a8     08 4E 05 F1 | 	add	fp, #8
143ac     A7 38 68 FC | 	wrlong	#28, fp
143b0     08 4E 85 F1 | 	sub	fp, #8
143b4     A7 12 02 F6 | 	mov	arg01, fp
143b8     00 6F BF FD | 	call	#_push
143bc     A7 F0 03 F6 | 	mov	ptra, fp
143c0     B2 00 A0 FD | 	call	#popregs_
143c4                 | _do_eq_ret
143c4     2D 00 64 FD | 	ret
143c8                 | 
143c8                 | ' 
143c8                 | ' sub do_gt
143c8                 | _do_gt
143c8     05 4A 05 F6 | 	mov	COUNT_, #5
143cc     A8 00 A0 FD | 	call	#pushregs_
143d0     18 F0 07 F1 | 	add	ptra, #24
143d4     4C 6E BF FD | 	call	#_pop
143d8     FD 1E 02 F6 | 	mov	local01, result1
143dc     FE 20 02 F6 | 	mov	local02, result2
143e0     FF 22 02 F6 | 	mov	local03, result3
143e4     0C 4E 05 F1 | 	add	fp, #12
143e8     A7 1E 62 FC | 	wrlong	local01, fp
143ec     04 4E 05 F1 | 	add	fp, #4
143f0     A7 20 62 FC | 	wrlong	local02, fp
143f4     04 4E 05 F1 | 	add	fp, #4
143f8     A7 22 62 FC | 	wrlong	local03, fp
143fc     14 4E 85 F1 | 	sub	fp, #20
14400     20 6E BF FD | 	call	#_pop
14404     FF 22 02 F6 | 	mov	local03, result3
14408     A7 FA 61 FC | 	wrlong	result1, fp
1440c     04 4E 05 F1 | 	add	fp, #4
14410     A7 FC 61 FC | 	wrlong	result2, fp
14414     04 4E 05 F1 | 	add	fp, #4
14418     A7 22 62 FC | 	wrlong	local03, fp
1441c                 | ' t2=pop()
1441c                 | ' t1=pop()
1441c                 | ' 
1441c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1441c     08 4E 85 F1 | 	sub	fp, #8
14420     1F 22 0E F2 | 	cmp	local03, #31 wz
14424     14 4E 05 A1 |  if_e	add	fp, #20
14428     A7 24 02 AB |  if_e	rdlong	local04, fp
1442c     14 4E 85 A1 |  if_e	sub	fp, #20
14430     12 23 02 A6 |  if_e	mov	local03, local04
14434     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14438     28 00 90 5D |  if_ne	jmp	#LR__1640
1443c     00 1E 06 F6 | 	mov	local01, #0
14440     A7 12 02 FB | 	rdlong	arg01, fp
14444     0C 4E 05 F1 | 	add	fp, #12
14448     A7 14 02 FB | 	rdlong	arg02, fp
1444c     0C 4E 85 F1 | 	sub	fp, #12
14450     D8 C6 B0 FD | 	call	#__system___string_cmp
14454     01 FA 55 F2 | 	cmps	result1, #1 wc
14458     00 1E 26 36 |  if_ae	not	local01, #0
1445c     A7 1E 62 FC | 	wrlong	local01, fp
14460     1C 04 90 FD | 	jmp	#LR__1653
14464                 | LR__1640
14464                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
14464     08 4E 05 F1 | 	add	fp, #8
14468     A7 1E 02 FB | 	rdlong	local01, fp
1446c     08 4E 85 F1 | 	sub	fp, #8
14470     1E 1E 0E F2 | 	cmp	local01, #30 wz
14474     14 4E 05 A1 |  if_e	add	fp, #20
14478     A7 24 02 AB |  if_e	rdlong	local04, fp
1447c     14 4E 85 A1 |  if_e	sub	fp, #20
14480     12 23 02 A6 |  if_e	mov	local03, local04
14484     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14488     2C 00 90 5D |  if_ne	jmp	#LR__1641
1448c     00 1E 06 F6 | 	mov	local01, #0
14490     A7 12 02 FB | 	rdlong	arg01, fp
14494     0C 4E 05 F1 | 	add	fp, #12
14498     A7 14 02 FB | 	rdlong	arg02, fp
1449c     0C 4E 85 F1 | 	sub	fp, #12
144a0     01 16 66 F6 | 	neg	arg03, #1
144a4     44 F6 B0 FD | 	call	#__system___float_cmp
144a8     01 FA 55 F2 | 	cmps	result1, #1 wc
144ac     00 1E 26 36 |  if_ae	not	local01, #0
144b0     A7 1E 62 FC | 	wrlong	local01, fp
144b4     C8 03 90 FD | 	jmp	#LR__1653
144b8                 | LR__1641
144b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
144b8     08 4E 05 F1 | 	add	fp, #8
144bc     A7 1E 02 FB | 	rdlong	local01, fp
144c0     08 4E 85 F1 | 	sub	fp, #8
144c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
144c8     14 4E 05 A1 |  if_e	add	fp, #20
144cc     A7 24 02 AB |  if_e	rdlong	local04, fp
144d0     14 4E 85 A1 |  if_e	sub	fp, #20
144d4     12 23 02 A6 |  if_e	mov	local03, local04
144d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
144dc     48 00 90 5D |  if_ne	jmp	#LR__1642
144e0     00 1E 06 F6 | 	mov	local01, #0
144e4     A7 20 02 FB | 	rdlong	local02, fp
144e8     0C 4E 05 F1 | 	add	fp, #12
144ec     A7 12 02 FB | 	rdlong	arg01, fp
144f0     0C 4E 85 F1 | 	sub	fp, #12
144f4     09 13 52 F6 | 	abs	arg01, arg01 wc
144f8     1F 26 C6 C9 |  if_b	decod	local05, #31
144fc     00 26 06 36 |  if_ae	mov	local05, #0
14500     B0 ED B0 FD | 	call	#__system___float_fromuns
14504     13 FB 61 F5 | 	xor	result1, local05
14508     FD 14 02 F6 | 	mov	arg02, result1
1450c     10 13 02 F6 | 	mov	arg01, local02
14510     01 16 66 F6 | 	neg	arg03, #1
14514     D4 F5 B0 FD | 	call	#__system___float_cmp
14518     01 FA 55 F2 | 	cmps	result1, #1 wc
1451c     00 1E 26 36 |  if_ae	not	local01, #0
14520     A7 1E 62 FC | 	wrlong	local01, fp
14524     58 03 90 FD | 	jmp	#LR__1653
14528                 | LR__1642
14528                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
14528     08 4E 05 F1 | 	add	fp, #8
1452c     A7 1E 02 FB | 	rdlong	local01, fp
14530     08 4E 85 F1 | 	sub	fp, #8
14534     1E 1E 0E F2 | 	cmp	local01, #30 wz
14538     14 4E 05 A1 |  if_e	add	fp, #20
1453c     A7 24 02 AB |  if_e	rdlong	local04, fp
14540     14 4E 85 A1 |  if_e	sub	fp, #20
14544     12 23 02 A6 |  if_e	mov	local03, local04
14548     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1454c     38 00 90 5D |  if_ne	jmp	#LR__1643
14550     00 1E 06 F6 | 	mov	local01, #0
14554     A7 20 02 FB | 	rdlong	local02, fp
14558     0C 4E 05 F1 | 	add	fp, #12
1455c     A7 12 02 FB | 	rdlong	arg01, fp
14560     0C 4E 85 F1 | 	sub	fp, #12
14564     4C ED B0 FD | 	call	#__system___float_fromuns
14568     FD 14 02 F6 | 	mov	arg02, result1
1456c     10 13 02 F6 | 	mov	arg01, local02
14570     01 16 66 F6 | 	neg	arg03, #1
14574     74 F5 B0 FD | 	call	#__system___float_cmp
14578     01 FA 55 F2 | 	cmps	result1, #1 wc
1457c     00 1E 26 36 |  if_ae	not	local01, #0
14580     A7 1E 62 FC | 	wrlong	local01, fp
14584     F8 02 90 FD | 	jmp	#LR__1653
14588                 | LR__1643
14588                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
14588     08 4E 05 F1 | 	add	fp, #8
1458c     A7 1E 02 FB | 	rdlong	local01, fp
14590     08 4E 85 F1 | 	sub	fp, #8
14594     1C 1E 0E F2 | 	cmp	local01, #28 wz
14598     14 4E 05 A1 |  if_e	add	fp, #20
1459c     A7 24 02 AB |  if_e	rdlong	local04, fp
145a0     14 4E 85 A1 |  if_e	sub	fp, #20
145a4     12 23 02 A6 |  if_e	mov	local03, local04
145a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
145ac     44 00 90 5D |  if_ne	jmp	#LR__1644
145b0     00 1E 06 F6 | 	mov	local01, #0
145b4     A7 12 02 FB | 	rdlong	arg01, fp
145b8     09 13 52 F6 | 	abs	arg01, arg01 wc
145bc     1F 26 C6 C9 |  if_b	decod	local05, #31
145c0     00 26 06 36 |  if_ae	mov	local05, #0
145c4     EC EC B0 FD | 	call	#__system___float_fromuns
145c8     13 FB 61 F5 | 	xor	result1, local05
145cc     FD 12 02 F6 | 	mov	arg01, result1
145d0     0C 4E 05 F1 | 	add	fp, #12
145d4     A7 14 02 FB | 	rdlong	arg02, fp
145d8     0C 4E 85 F1 | 	sub	fp, #12
145dc     01 16 66 F6 | 	neg	arg03, #1
145e0     08 F5 B0 FD | 	call	#__system___float_cmp
145e4     01 FA 55 F2 | 	cmps	result1, #1 wc
145e8     00 1E 26 36 |  if_ae	not	local01, #0
145ec     A7 1E 62 FC | 	wrlong	local01, fp
145f0     8C 02 90 FD | 	jmp	#LR__1653
145f4                 | LR__1644
145f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
145f4     08 4E 05 F1 | 	add	fp, #8
145f8     A7 1E 02 FB | 	rdlong	local01, fp
145fc     08 4E 85 F1 | 	sub	fp, #8
14600     1C 1E 0E F2 | 	cmp	local01, #28 wz
14604     14 4E 05 A1 |  if_e	add	fp, #20
14608     A7 24 02 AB |  if_e	rdlong	local04, fp
1460c     14 4E 85 A1 |  if_e	sub	fp, #20
14610     12 23 02 A6 |  if_e	mov	local03, local04
14614     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14618     24 00 90 5D |  if_ne	jmp	#LR__1645
1461c     00 1E 06 F6 | 	mov	local01, #0
14620     A7 20 02 FB | 	rdlong	local02, fp
14624     0C 4E 05 F1 | 	add	fp, #12
14628     A7 22 02 FB | 	rdlong	local03, fp
1462c     0C 4E 85 F1 | 	sub	fp, #12
14630     11 21 5A F2 | 	cmps	local02, local03 wcz
14634     01 1E 66 16 |  if_a	neg	local01, #1
14638     A7 1E 62 FC | 	wrlong	local01, fp
1463c     40 02 90 FD | 	jmp	#LR__1653
14640                 | LR__1645
14640                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
14640     08 4E 05 F1 | 	add	fp, #8
14644     A7 1E 02 FB | 	rdlong	local01, fp
14648     08 4E 85 F1 | 	sub	fp, #8
1464c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14650     14 4E 05 A1 |  if_e	add	fp, #20
14654     A7 24 02 AB |  if_e	rdlong	local04, fp
14658     14 4E 85 A1 |  if_e	sub	fp, #20
1465c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14660     24 00 90 5D |  if_ne	jmp	#LR__1646
14664     00 1E 06 F6 | 	mov	local01, #0
14668     A7 20 02 FB | 	rdlong	local02, fp
1466c     0C 4E 05 F1 | 	add	fp, #12
14670     A7 22 02 FB | 	rdlong	local03, fp
14674     0C 4E 85 F1 | 	sub	fp, #12
14678     11 21 5A F2 | 	cmps	local02, local03 wcz
1467c     01 1E 66 16 |  if_a	neg	local01, #1
14680     A7 1E 62 FC | 	wrlong	local01, fp
14684     F8 01 90 FD | 	jmp	#LR__1653
14688                 | LR__1646
14688                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
14688     08 4E 05 F1 | 	add	fp, #8
1468c     A7 1E 02 FB | 	rdlong	local01, fp
14690     08 4E 85 F1 | 	sub	fp, #8
14694     1D 1E 0E F2 | 	cmp	local01, #29 wz
14698     14 4E 05 A1 |  if_e	add	fp, #20
1469c     A7 22 02 AB |  if_e	rdlong	local03, fp
146a0     14 4E 85 A1 |  if_e	sub	fp, #20
146a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
146a8     34 00 90 5D |  if_ne	jmp	#LR__1647
146ac     00 1E 06 F6 | 	mov	local01, #0
146b0     A7 12 02 FB | 	rdlong	arg01, fp
146b4     FC EB B0 FD | 	call	#__system___float_fromuns
146b8     FD 12 02 F6 | 	mov	arg01, result1
146bc     0C 4E 05 F1 | 	add	fp, #12
146c0     A7 14 02 FB | 	rdlong	arg02, fp
146c4     0C 4E 85 F1 | 	sub	fp, #12
146c8     01 16 66 F6 | 	neg	arg03, #1
146cc     1C F4 B0 FD | 	call	#__system___float_cmp
146d0     01 FA 55 F2 | 	cmps	result1, #1 wc
146d4     00 1E 26 36 |  if_ae	not	local01, #0
146d8     A7 1E 62 FC | 	wrlong	local01, fp
146dc     A0 01 90 FD | 	jmp	#LR__1653
146e0                 | LR__1647
146e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
146e0     08 4E 05 F1 | 	add	fp, #8
146e4     A7 1E 02 FB | 	rdlong	local01, fp
146e8     08 4E 85 F1 | 	sub	fp, #8
146ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
146f0     14 4E 05 A1 |  if_e	add	fp, #20
146f4     A7 22 02 AB |  if_e	rdlong	local03, fp
146f8     14 4E 85 A1 |  if_e	sub	fp, #20
146fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14700     24 00 90 5D |  if_ne	jmp	#LR__1648
14704     00 1E 06 F6 | 	mov	local01, #0
14708     A7 20 02 FB | 	rdlong	local02, fp
1470c     0C 4E 05 F1 | 	add	fp, #12
14710     A7 22 02 FB | 	rdlong	local03, fp
14714     0C 4E 85 F1 | 	sub	fp, #12
14718     11 21 5A F2 | 	cmps	local02, local03 wcz
1471c     01 1E 66 16 |  if_a	neg	local01, #1
14720     A7 1E 62 FC | 	wrlong	local01, fp
14724     58 01 90 FD | 	jmp	#LR__1653
14728                 | LR__1648
14728                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
14728     08 4E 05 F1 | 	add	fp, #8
1472c     A7 1E 02 FB | 	rdlong	local01, fp
14730     08 4E 85 F1 | 	sub	fp, #8
14734     1D 1E 0E F2 | 	cmp	local01, #29 wz
14738     14 4E 05 A1 |  if_e	add	fp, #20
1473c     A7 22 02 AB |  if_e	rdlong	local03, fp
14740     14 4E 85 A1 |  if_e	sub	fp, #20
14744     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14748     24 00 90 5D |  if_ne	jmp	#LR__1649
1474c     00 1E 06 F6 | 	mov	local01, #0
14750     A7 20 02 FB | 	rdlong	local02, fp
14754     0C 4E 05 F1 | 	add	fp, #12
14758     A7 22 02 FB | 	rdlong	local03, fp
1475c     0C 4E 85 F1 | 	sub	fp, #12
14760     11 21 1A F2 | 	cmp	local02, local03 wcz
14764     01 1E 66 16 |  if_a	neg	local01, #1
14768     A7 1E 62 FC | 	wrlong	local01, fp
1476c     10 01 90 FD | 	jmp	#LR__1653
14770                 | LR__1649
14770                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
14770     08 4E 05 F1 | 	add	fp, #8
14774     A7 1E 02 FB | 	rdlong	local01, fp
14778     08 4E 85 F1 | 	sub	fp, #8
1477c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14780     14 4E 05 A1 |  if_e	add	fp, #20
14784     A7 22 02 AB |  if_e	rdlong	local03, fp
14788     14 4E 85 A1 |  if_e	sub	fp, #20
1478c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14790     30 00 90 5D |  if_ne	jmp	#LR__1650
14794     00 1E 06 F6 | 	mov	local01, #0
14798     A7 12 02 FB | 	rdlong	arg01, fp
1479c     2C CC BF FD | 	call	#_convertstring
147a0     FD 12 02 F6 | 	mov	arg01, result1
147a4     0C 4E 05 F1 | 	add	fp, #12
147a8     A7 14 02 FB | 	rdlong	arg02, fp
147ac     0C 4E 85 F1 | 	sub	fp, #12
147b0     78 C3 B0 FD | 	call	#__system___string_cmp
147b4     01 FA 55 F2 | 	cmps	result1, #1 wc
147b8     00 1E 26 36 |  if_ae	not	local01, #0
147bc     A7 1E 62 FC | 	wrlong	local01, fp
147c0     BC 00 90 FD | 	jmp	#LR__1653
147c4                 | LR__1650
147c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
147c4     08 4E 05 F1 | 	add	fp, #8
147c8     A7 1E 02 FB | 	rdlong	local01, fp
147cc     08 4E 85 F1 | 	sub	fp, #8
147d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
147d4     14 4E 05 A1 |  if_e	add	fp, #20
147d8     A7 22 02 AB |  if_e	rdlong	local03, fp
147dc     14 4E 85 A1 |  if_e	sub	fp, #20
147e0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
147e4     34 00 90 5D |  if_ne	jmp	#LR__1651
147e8     00 1E 06 F6 | 	mov	local01, #0
147ec     A7 20 02 FB | 	rdlong	local02, fp
147f0     0C 4E 05 F1 | 	add	fp, #12
147f4     A7 12 02 FB | 	rdlong	arg01, fp
147f8     0C 4E 85 F1 | 	sub	fp, #12
147fc     CC CB BF FD | 	call	#_convertstring
14800     FD 14 02 F6 | 	mov	arg02, result1
14804     10 13 02 F6 | 	mov	arg01, local02
14808     20 C3 B0 FD | 	call	#__system___string_cmp
1480c     01 FA 55 F2 | 	cmps	result1, #1 wc
14810     00 1E 26 36 |  if_ae	not	local01, #0
14814     A7 1E 62 FC | 	wrlong	local01, fp
14818     64 00 90 FD | 	jmp	#LR__1653
1481c                 | LR__1651
1481c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1481c     08 4E 05 F1 | 	add	fp, #8
14820     A7 1E 02 FB | 	rdlong	local01, fp
14824     08 4E 85 F1 | 	sub	fp, #8
14828     2B 1E 0E F2 | 	cmp	local01, #43 wz
1482c     14 4E 05 A1 |  if_e	add	fp, #20
14830     A7 22 02 AB |  if_e	rdlong	local03, fp
14834     14 4E 85 A1 |  if_e	sub	fp, #20
14838     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1483c     3C 00 90 5D |  if_ne	jmp	#LR__1652
14840     00 1E 06 F6 | 	mov	local01, #0
14844     A7 12 02 FB | 	rdlong	arg01, fp
14848     80 CB BF FD | 	call	#_convertstring
1484c     FD 20 02 F6 | 	mov	local02, result1
14850     0C 4E 05 F1 | 	add	fp, #12
14854     A7 12 02 FB | 	rdlong	arg01, fp
14858     0C 4E 85 F1 | 	sub	fp, #12
1485c     6C CB BF FD | 	call	#_convertstring
14860     FD 14 02 F6 | 	mov	arg02, result1
14864     10 13 02 F6 | 	mov	arg01, local02
14868     C0 C2 B0 FD | 	call	#__system___string_cmp
1486c     01 FA 55 F2 | 	cmps	result1, #1 wc
14870     00 1E 26 36 |  if_ae	not	local01, #0
14874     A7 1E 62 FC | 	wrlong	local01, fp
14878     04 00 90 FD | 	jmp	#LR__1653
1487c                 | LR__1652
1487c     A7 00 68 FC | 	wrlong	#0, fp
14880                 | LR__1653
14880     08 4E 05 F1 | 	add	fp, #8
14884     A7 38 68 FC | 	wrlong	#28, fp
14888     08 4E 85 F1 | 	sub	fp, #8
1488c     A7 12 02 F6 | 	mov	arg01, fp
14890     28 6A BF FD | 	call	#_push
14894     A7 F0 03 F6 | 	mov	ptra, fp
14898     B2 00 A0 FD | 	call	#popregs_
1489c                 | _do_gt_ret
1489c     2D 00 64 FD | 	ret
148a0                 | 
148a0                 | ' 
148a0                 | ' sub do_lt
148a0                 | _do_lt
148a0     05 4A 05 F6 | 	mov	COUNT_, #5
148a4     A8 00 A0 FD | 	call	#pushregs_
148a8     18 F0 07 F1 | 	add	ptra, #24
148ac     74 69 BF FD | 	call	#_pop
148b0     FD 1E 02 F6 | 	mov	local01, result1
148b4     FE 20 02 F6 | 	mov	local02, result2
148b8     FF 22 02 F6 | 	mov	local03, result3
148bc     0C 4E 05 F1 | 	add	fp, #12
148c0     A7 1E 62 FC | 	wrlong	local01, fp
148c4     04 4E 05 F1 | 	add	fp, #4
148c8     A7 20 62 FC | 	wrlong	local02, fp
148cc     04 4E 05 F1 | 	add	fp, #4
148d0     A7 22 62 FC | 	wrlong	local03, fp
148d4     14 4E 85 F1 | 	sub	fp, #20
148d8     48 69 BF FD | 	call	#_pop
148dc     FF 22 02 F6 | 	mov	local03, result3
148e0     A7 FA 61 FC | 	wrlong	result1, fp
148e4     04 4E 05 F1 | 	add	fp, #4
148e8     A7 FC 61 FC | 	wrlong	result2, fp
148ec     04 4E 05 F1 | 	add	fp, #4
148f0     A7 22 62 FC | 	wrlong	local03, fp
148f4                 | ' t2=pop()
148f4                 | ' t1=pop()
148f4                 | ' 
148f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
148f4     08 4E 85 F1 | 	sub	fp, #8
148f8     1F 22 0E F2 | 	cmp	local03, #31 wz
148fc     14 4E 05 A1 |  if_e	add	fp, #20
14900     A7 24 02 AB |  if_e	rdlong	local04, fp
14904     14 4E 85 A1 |  if_e	sub	fp, #20
14908     12 23 02 A6 |  if_e	mov	local03, local04
1490c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14910     28 00 90 5D |  if_ne	jmp	#LR__1660
14914     00 1E 06 F6 | 	mov	local01, #0
14918     A7 12 02 FB | 	rdlong	arg01, fp
1491c     0C 4E 05 F1 | 	add	fp, #12
14920     A7 14 02 FB | 	rdlong	arg02, fp
14924     0C 4E 85 F1 | 	sub	fp, #12
14928     00 C2 B0 FD | 	call	#__system___string_cmp
1492c     00 FA 55 F2 | 	cmps	result1, #0 wc
14930     00 1E 26 C6 |  if_b	not	local01, #0
14934     A7 1E 62 FC | 	wrlong	local01, fp
14938     0C 04 90 FD | 	jmp	#LR__1673
1493c                 | LR__1660
1493c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1493c     08 4E 05 F1 | 	add	fp, #8
14940     A7 1E 02 FB | 	rdlong	local01, fp
14944     08 4E 85 F1 | 	sub	fp, #8
14948     1E 1E 0E F2 | 	cmp	local01, #30 wz
1494c     14 4E 05 A1 |  if_e	add	fp, #20
14950     A7 24 02 AB |  if_e	rdlong	local04, fp
14954     14 4E 85 A1 |  if_e	sub	fp, #20
14958     12 23 02 A6 |  if_e	mov	local03, local04
1495c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14960     2C 00 90 5D |  if_ne	jmp	#LR__1661
14964     00 1E 06 F6 | 	mov	local01, #0
14968     A7 12 02 FB | 	rdlong	arg01, fp
1496c     0C 4E 05 F1 | 	add	fp, #12
14970     A7 14 02 FB | 	rdlong	arg02, fp
14974     0C 4E 85 F1 | 	sub	fp, #12
14978     01 16 06 F6 | 	mov	arg03, #1
1497c     6C F1 B0 FD | 	call	#__system___float_cmp
14980     00 FA 55 F2 | 	cmps	result1, #0 wc
14984     00 1E 26 C6 |  if_b	not	local01, #0
14988     A7 1E 62 FC | 	wrlong	local01, fp
1498c     B8 03 90 FD | 	jmp	#LR__1673
14990                 | LR__1661
14990                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
14990     08 4E 05 F1 | 	add	fp, #8
14994     A7 1E 02 FB | 	rdlong	local01, fp
14998     08 4E 85 F1 | 	sub	fp, #8
1499c     1E 1E 0E F2 | 	cmp	local01, #30 wz
149a0     14 4E 05 A1 |  if_e	add	fp, #20
149a4     A7 24 02 AB |  if_e	rdlong	local04, fp
149a8     14 4E 85 A1 |  if_e	sub	fp, #20
149ac     12 23 02 A6 |  if_e	mov	local03, local04
149b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
149b4     48 00 90 5D |  if_ne	jmp	#LR__1662
149b8     00 1E 06 F6 | 	mov	local01, #0
149bc     A7 20 02 FB | 	rdlong	local02, fp
149c0     0C 4E 05 F1 | 	add	fp, #12
149c4     A7 12 02 FB | 	rdlong	arg01, fp
149c8     0C 4E 85 F1 | 	sub	fp, #12
149cc     09 13 52 F6 | 	abs	arg01, arg01 wc
149d0     1F 26 C6 C9 |  if_b	decod	local05, #31
149d4     00 26 06 36 |  if_ae	mov	local05, #0
149d8     D8 E8 B0 FD | 	call	#__system___float_fromuns
149dc     13 FB 61 F5 | 	xor	result1, local05
149e0     FD 14 02 F6 | 	mov	arg02, result1
149e4     10 13 02 F6 | 	mov	arg01, local02
149e8     01 16 06 F6 | 	mov	arg03, #1
149ec     FC F0 B0 FD | 	call	#__system___float_cmp
149f0     00 FA 55 F2 | 	cmps	result1, #0 wc
149f4     00 1E 26 C6 |  if_b	not	local01, #0
149f8     A7 1E 62 FC | 	wrlong	local01, fp
149fc     48 03 90 FD | 	jmp	#LR__1673
14a00                 | LR__1662
14a00                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
14a00     08 4E 05 F1 | 	add	fp, #8
14a04     A7 1E 02 FB | 	rdlong	local01, fp
14a08     08 4E 85 F1 | 	sub	fp, #8
14a0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14a10     14 4E 05 A1 |  if_e	add	fp, #20
14a14     A7 24 02 AB |  if_e	rdlong	local04, fp
14a18     14 4E 85 A1 |  if_e	sub	fp, #20
14a1c     12 23 02 A6 |  if_e	mov	local03, local04
14a20     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14a24     38 00 90 5D |  if_ne	jmp	#LR__1663
14a28     00 1E 06 F6 | 	mov	local01, #0
14a2c     A7 20 02 FB | 	rdlong	local02, fp
14a30     0C 4E 05 F1 | 	add	fp, #12
14a34     A7 12 02 FB | 	rdlong	arg01, fp
14a38     0C 4E 85 F1 | 	sub	fp, #12
14a3c     74 E8 B0 FD | 	call	#__system___float_fromuns
14a40     FD 14 02 F6 | 	mov	arg02, result1
14a44     10 13 02 F6 | 	mov	arg01, local02
14a48     01 16 06 F6 | 	mov	arg03, #1
14a4c     9C F0 B0 FD | 	call	#__system___float_cmp
14a50     00 FA 55 F2 | 	cmps	result1, #0 wc
14a54     00 1E 26 C6 |  if_b	not	local01, #0
14a58     A7 1E 62 FC | 	wrlong	local01, fp
14a5c     E8 02 90 FD | 	jmp	#LR__1673
14a60                 | LR__1663
14a60                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
14a60     08 4E 05 F1 | 	add	fp, #8
14a64     A7 1E 02 FB | 	rdlong	local01, fp
14a68     08 4E 85 F1 | 	sub	fp, #8
14a6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a70     14 4E 05 A1 |  if_e	add	fp, #20
14a74     A7 24 02 AB |  if_e	rdlong	local04, fp
14a78     14 4E 85 A1 |  if_e	sub	fp, #20
14a7c     12 23 02 A6 |  if_e	mov	local03, local04
14a80     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14a84     44 00 90 5D |  if_ne	jmp	#LR__1664
14a88     00 1E 06 F6 | 	mov	local01, #0
14a8c     A7 12 02 FB | 	rdlong	arg01, fp
14a90     09 13 52 F6 | 	abs	arg01, arg01 wc
14a94     1F 26 C6 C9 |  if_b	decod	local05, #31
14a98     00 26 06 36 |  if_ae	mov	local05, #0
14a9c     14 E8 B0 FD | 	call	#__system___float_fromuns
14aa0     13 FB 61 F5 | 	xor	result1, local05
14aa4     FD 12 02 F6 | 	mov	arg01, result1
14aa8     0C 4E 05 F1 | 	add	fp, #12
14aac     A7 14 02 FB | 	rdlong	arg02, fp
14ab0     0C 4E 85 F1 | 	sub	fp, #12
14ab4     01 16 06 F6 | 	mov	arg03, #1
14ab8     30 F0 B0 FD | 	call	#__system___float_cmp
14abc     00 FA 55 F2 | 	cmps	result1, #0 wc
14ac0     00 1E 26 C6 |  if_b	not	local01, #0
14ac4     A7 1E 62 FC | 	wrlong	local01, fp
14ac8     7C 02 90 FD | 	jmp	#LR__1673
14acc                 | LR__1664
14acc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14acc     08 4E 05 F1 | 	add	fp, #8
14ad0     A7 1E 02 FB | 	rdlong	local01, fp
14ad4     08 4E 85 F1 | 	sub	fp, #8
14ad8     1C 1E 0E F2 | 	cmp	local01, #28 wz
14adc     14 4E 05 A1 |  if_e	add	fp, #20
14ae0     A7 24 02 AB |  if_e	rdlong	local04, fp
14ae4     14 4E 85 A1 |  if_e	sub	fp, #20
14ae8     12 23 02 A6 |  if_e	mov	local03, local04
14aec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14af0     20 00 90 5D |  if_ne	jmp	#LR__1665
14af4     A7 20 02 FB | 	rdlong	local02, fp
14af8     0C 4E 05 F1 | 	add	fp, #12
14afc     A7 22 02 FB | 	rdlong	local03, fp
14b00     0C 4E 85 F1 | 	sub	fp, #12
14b04     11 21 52 F2 | 	cmps	local02, local03 wc
14b08     0F 1F A2 F1 | 	subx	local01, local01
14b0c     A7 1E 62 FC | 	wrlong	local01, fp
14b10     34 02 90 FD | 	jmp	#LR__1673
14b14                 | LR__1665
14b14                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
14b14     08 4E 05 F1 | 	add	fp, #8
14b18     A7 1E 02 FB | 	rdlong	local01, fp
14b1c     08 4E 85 F1 | 	sub	fp, #8
14b20     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b24     14 4E 05 A1 |  if_e	add	fp, #20
14b28     A7 24 02 AB |  if_e	rdlong	local04, fp
14b2c     14 4E 85 A1 |  if_e	sub	fp, #20
14b30     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14b34     20 00 90 5D |  if_ne	jmp	#LR__1666
14b38     A7 20 02 FB | 	rdlong	local02, fp
14b3c     0C 4E 05 F1 | 	add	fp, #12
14b40     A7 22 02 FB | 	rdlong	local03, fp
14b44     0C 4E 85 F1 | 	sub	fp, #12
14b48     11 21 52 F2 | 	cmps	local02, local03 wc
14b4c     0F 1F A2 F1 | 	subx	local01, local01
14b50     A7 1E 62 FC | 	wrlong	local01, fp
14b54     F0 01 90 FD | 	jmp	#LR__1673
14b58                 | LR__1666
14b58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
14b58     08 4E 05 F1 | 	add	fp, #8
14b5c     A7 1E 02 FB | 	rdlong	local01, fp
14b60     08 4E 85 F1 | 	sub	fp, #8
14b64     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b68     14 4E 05 A1 |  if_e	add	fp, #20
14b6c     A7 22 02 AB |  if_e	rdlong	local03, fp
14b70     14 4E 85 A1 |  if_e	sub	fp, #20
14b74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14b78     34 00 90 5D |  if_ne	jmp	#LR__1667
14b7c     00 1E 06 F6 | 	mov	local01, #0
14b80     A7 12 02 FB | 	rdlong	arg01, fp
14b84     2C E7 B0 FD | 	call	#__system___float_fromuns
14b88     FD 12 02 F6 | 	mov	arg01, result1
14b8c     0C 4E 05 F1 | 	add	fp, #12
14b90     A7 14 02 FB | 	rdlong	arg02, fp
14b94     0C 4E 85 F1 | 	sub	fp, #12
14b98     01 16 06 F6 | 	mov	arg03, #1
14b9c     4C EF B0 FD | 	call	#__system___float_cmp
14ba0     00 FA 55 F2 | 	cmps	result1, #0 wc
14ba4     00 1E 26 C6 |  if_b	not	local01, #0
14ba8     A7 1E 62 FC | 	wrlong	local01, fp
14bac     98 01 90 FD | 	jmp	#LR__1673
14bb0                 | LR__1667
14bb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14bb0     08 4E 05 F1 | 	add	fp, #8
14bb4     A7 1E 02 FB | 	rdlong	local01, fp
14bb8     08 4E 85 F1 | 	sub	fp, #8
14bbc     1D 1E 0E F2 | 	cmp	local01, #29 wz
14bc0     14 4E 05 A1 |  if_e	add	fp, #20
14bc4     A7 22 02 AB |  if_e	rdlong	local03, fp
14bc8     14 4E 85 A1 |  if_e	sub	fp, #20
14bcc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14bd0     20 00 90 5D |  if_ne	jmp	#LR__1668
14bd4     A7 20 02 FB | 	rdlong	local02, fp
14bd8     0C 4E 05 F1 | 	add	fp, #12
14bdc     A7 22 02 FB | 	rdlong	local03, fp
14be0     0C 4E 85 F1 | 	sub	fp, #12
14be4     11 21 52 F2 | 	cmps	local02, local03 wc
14be8     0F 1F A2 F1 | 	subx	local01, local01
14bec     A7 1E 62 FC | 	wrlong	local01, fp
14bf0     54 01 90 FD | 	jmp	#LR__1673
14bf4                 | LR__1668
14bf4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14bf4     08 4E 05 F1 | 	add	fp, #8
14bf8     A7 1E 02 FB | 	rdlong	local01, fp
14bfc     08 4E 85 F1 | 	sub	fp, #8
14c00     1D 1E 0E F2 | 	cmp	local01, #29 wz
14c04     14 4E 05 A1 |  if_e	add	fp, #20
14c08     A7 22 02 AB |  if_e	rdlong	local03, fp
14c0c     14 4E 85 A1 |  if_e	sub	fp, #20
14c10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14c14     20 00 90 5D |  if_ne	jmp	#LR__1669
14c18     A7 20 02 FB | 	rdlong	local02, fp
14c1c     0C 4E 05 F1 | 	add	fp, #12
14c20     A7 22 02 FB | 	rdlong	local03, fp
14c24     0C 4E 85 F1 | 	sub	fp, #12
14c28     11 21 12 F2 | 	cmp	local02, local03 wc
14c2c     0F 1F A2 F1 | 	subx	local01, local01
14c30     A7 1E 62 FC | 	wrlong	local01, fp
14c34     10 01 90 FD | 	jmp	#LR__1673
14c38                 | LR__1669
14c38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
14c38     08 4E 05 F1 | 	add	fp, #8
14c3c     A7 1E 02 FB | 	rdlong	local01, fp
14c40     08 4E 85 F1 | 	sub	fp, #8
14c44     2B 1E 0E F2 | 	cmp	local01, #43 wz
14c48     14 4E 05 A1 |  if_e	add	fp, #20
14c4c     A7 22 02 AB |  if_e	rdlong	local03, fp
14c50     14 4E 85 A1 |  if_e	sub	fp, #20
14c54     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14c58     30 00 90 5D |  if_ne	jmp	#LR__1670
14c5c     00 1E 06 F6 | 	mov	local01, #0
14c60     A7 12 02 FB | 	rdlong	arg01, fp
14c64     64 C7 BF FD | 	call	#_convertstring
14c68     FD 12 02 F6 | 	mov	arg01, result1
14c6c     0C 4E 05 F1 | 	add	fp, #12
14c70     A7 14 02 FB | 	rdlong	arg02, fp
14c74     0C 4E 85 F1 | 	sub	fp, #12
14c78     B0 BE B0 FD | 	call	#__system___string_cmp
14c7c     00 FA 55 F2 | 	cmps	result1, #0 wc
14c80     00 1E 26 C6 |  if_b	not	local01, #0
14c84     A7 1E 62 FC | 	wrlong	local01, fp
14c88     BC 00 90 FD | 	jmp	#LR__1673
14c8c                 | LR__1670
14c8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14c8c     08 4E 05 F1 | 	add	fp, #8
14c90     A7 1E 02 FB | 	rdlong	local01, fp
14c94     08 4E 85 F1 | 	sub	fp, #8
14c98     1F 1E 0E F2 | 	cmp	local01, #31 wz
14c9c     14 4E 05 A1 |  if_e	add	fp, #20
14ca0     A7 22 02 AB |  if_e	rdlong	local03, fp
14ca4     14 4E 85 A1 |  if_e	sub	fp, #20
14ca8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14cac     34 00 90 5D |  if_ne	jmp	#LR__1671
14cb0     00 1E 06 F6 | 	mov	local01, #0
14cb4     A7 20 02 FB | 	rdlong	local02, fp
14cb8     0C 4E 05 F1 | 	add	fp, #12
14cbc     A7 12 02 FB | 	rdlong	arg01, fp
14cc0     0C 4E 85 F1 | 	sub	fp, #12
14cc4     04 C7 BF FD | 	call	#_convertstring
14cc8     FD 14 02 F6 | 	mov	arg02, result1
14ccc     10 13 02 F6 | 	mov	arg01, local02
14cd0     58 BE B0 FD | 	call	#__system___string_cmp
14cd4     00 FA 55 F2 | 	cmps	result1, #0 wc
14cd8     00 1E 26 C6 |  if_b	not	local01, #0
14cdc     A7 1E 62 FC | 	wrlong	local01, fp
14ce0     64 00 90 FD | 	jmp	#LR__1673
14ce4                 | LR__1671
14ce4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14ce4     08 4E 05 F1 | 	add	fp, #8
14ce8     A7 1E 02 FB | 	rdlong	local01, fp
14cec     08 4E 85 F1 | 	sub	fp, #8
14cf0     2B 1E 0E F2 | 	cmp	local01, #43 wz
14cf4     14 4E 05 A1 |  if_e	add	fp, #20
14cf8     A7 22 02 AB |  if_e	rdlong	local03, fp
14cfc     14 4E 85 A1 |  if_e	sub	fp, #20
14d00     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14d04     3C 00 90 5D |  if_ne	jmp	#LR__1672
14d08     00 1E 06 F6 | 	mov	local01, #0
14d0c     A7 12 02 FB | 	rdlong	arg01, fp
14d10     B8 C6 BF FD | 	call	#_convertstring
14d14     FD 20 02 F6 | 	mov	local02, result1
14d18     0C 4E 05 F1 | 	add	fp, #12
14d1c     A7 12 02 FB | 	rdlong	arg01, fp
14d20     0C 4E 85 F1 | 	sub	fp, #12
14d24     A4 C6 BF FD | 	call	#_convertstring
14d28     FD 14 02 F6 | 	mov	arg02, result1
14d2c     10 13 02 F6 | 	mov	arg01, local02
14d30     F8 BD B0 FD | 	call	#__system___string_cmp
14d34     00 FA 55 F2 | 	cmps	result1, #0 wc
14d38     00 1E 26 C6 |  if_b	not	local01, #0
14d3c     A7 1E 62 FC | 	wrlong	local01, fp
14d40     04 00 90 FD | 	jmp	#LR__1673
14d44                 | LR__1672
14d44     A7 00 68 FC | 	wrlong	#0, fp
14d48                 | LR__1673
14d48     08 4E 05 F1 | 	add	fp, #8
14d4c     A7 38 68 FC | 	wrlong	#28, fp
14d50     08 4E 85 F1 | 	sub	fp, #8
14d54     A7 12 02 F6 | 	mov	arg01, fp
14d58     60 65 BF FD | 	call	#_push
14d5c     A7 F0 03 F6 | 	mov	ptra, fp
14d60     B2 00 A0 FD | 	call	#popregs_
14d64                 | _do_lt_ret
14d64     2D 00 64 FD | 	ret
14d68                 | 
14d68                 | ' 
14d68                 | ' sub do_ge
14d68                 | _do_ge
14d68     05 4A 05 F6 | 	mov	COUNT_, #5
14d6c     A8 00 A0 FD | 	call	#pushregs_
14d70     18 F0 07 F1 | 	add	ptra, #24
14d74     AC 64 BF FD | 	call	#_pop
14d78     FD 1E 02 F6 | 	mov	local01, result1
14d7c     FE 20 02 F6 | 	mov	local02, result2
14d80     FF 22 02 F6 | 	mov	local03, result3
14d84     0C 4E 05 F1 | 	add	fp, #12
14d88     A7 1E 62 FC | 	wrlong	local01, fp
14d8c     04 4E 05 F1 | 	add	fp, #4
14d90     A7 20 62 FC | 	wrlong	local02, fp
14d94     04 4E 05 F1 | 	add	fp, #4
14d98     A7 22 62 FC | 	wrlong	local03, fp
14d9c     14 4E 85 F1 | 	sub	fp, #20
14da0     80 64 BF FD | 	call	#_pop
14da4     FF 22 02 F6 | 	mov	local03, result3
14da8     A7 FA 61 FC | 	wrlong	result1, fp
14dac     04 4E 05 F1 | 	add	fp, #4
14db0     A7 FC 61 FC | 	wrlong	result2, fp
14db4     04 4E 05 F1 | 	add	fp, #4
14db8     A7 22 62 FC | 	wrlong	local03, fp
14dbc                 | ' t2=pop()
14dbc                 | ' t1=pop()
14dbc                 | ' 
14dbc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14dbc     08 4E 85 F1 | 	sub	fp, #8
14dc0     1F 22 0E F2 | 	cmp	local03, #31 wz
14dc4     14 4E 05 A1 |  if_e	add	fp, #20
14dc8     A7 24 02 AB |  if_e	rdlong	local04, fp
14dcc     14 4E 85 A1 |  if_e	sub	fp, #20
14dd0     12 23 02 A6 |  if_e	mov	local03, local04
14dd4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14dd8     28 00 90 5D |  if_ne	jmp	#LR__1680
14ddc     00 1E 06 F6 | 	mov	local01, #0
14de0     A7 12 02 FB | 	rdlong	arg01, fp
14de4     0C 4E 05 F1 | 	add	fp, #12
14de8     A7 14 02 FB | 	rdlong	arg02, fp
14dec     0C 4E 85 F1 | 	sub	fp, #12
14df0     38 BD B0 FD | 	call	#__system___string_cmp
14df4     00 FA 55 F2 | 	cmps	result1, #0 wc
14df8     00 1E 26 36 |  if_ae	not	local01, #0
14dfc     A7 1E 62 FC | 	wrlong	local01, fp
14e00     1C 04 90 FD | 	jmp	#LR__1693
14e04                 | LR__1680
14e04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
14e04     08 4E 05 F1 | 	add	fp, #8
14e08     A7 1E 02 FB | 	rdlong	local01, fp
14e0c     08 4E 85 F1 | 	sub	fp, #8
14e10     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e14     14 4E 05 A1 |  if_e	add	fp, #20
14e18     A7 24 02 AB |  if_e	rdlong	local04, fp
14e1c     14 4E 85 A1 |  if_e	sub	fp, #20
14e20     12 23 02 A6 |  if_e	mov	local03, local04
14e24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14e28     2C 00 90 5D |  if_ne	jmp	#LR__1681
14e2c     00 1E 06 F6 | 	mov	local01, #0
14e30     A7 12 02 FB | 	rdlong	arg01, fp
14e34     0C 4E 05 F1 | 	add	fp, #12
14e38     A7 14 02 FB | 	rdlong	arg02, fp
14e3c     0C 4E 85 F1 | 	sub	fp, #12
14e40     01 16 66 F6 | 	neg	arg03, #1
14e44     A4 EC B0 FD | 	call	#__system___float_cmp
14e48     00 FA 55 F2 | 	cmps	result1, #0 wc
14e4c     00 1E 26 36 |  if_ae	not	local01, #0
14e50     A7 1E 62 FC | 	wrlong	local01, fp
14e54     C8 03 90 FD | 	jmp	#LR__1693
14e58                 | LR__1681
14e58                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
14e58     08 4E 05 F1 | 	add	fp, #8
14e5c     A7 1E 02 FB | 	rdlong	local01, fp
14e60     08 4E 85 F1 | 	sub	fp, #8
14e64     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e68     14 4E 05 A1 |  if_e	add	fp, #20
14e6c     A7 24 02 AB |  if_e	rdlong	local04, fp
14e70     14 4E 85 A1 |  if_e	sub	fp, #20
14e74     12 23 02 A6 |  if_e	mov	local03, local04
14e78     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14e7c     48 00 90 5D |  if_ne	jmp	#LR__1682
14e80     00 1E 06 F6 | 	mov	local01, #0
14e84     A7 20 02 FB | 	rdlong	local02, fp
14e88     0C 4E 05 F1 | 	add	fp, #12
14e8c     A7 12 02 FB | 	rdlong	arg01, fp
14e90     0C 4E 85 F1 | 	sub	fp, #12
14e94     09 13 52 F6 | 	abs	arg01, arg01 wc
14e98     1F 26 C6 C9 |  if_b	decod	local05, #31
14e9c     00 26 06 36 |  if_ae	mov	local05, #0
14ea0     10 E4 B0 FD | 	call	#__system___float_fromuns
14ea4     13 FB 61 F5 | 	xor	result1, local05
14ea8     FD 14 02 F6 | 	mov	arg02, result1
14eac     10 13 02 F6 | 	mov	arg01, local02
14eb0     01 16 66 F6 | 	neg	arg03, #1
14eb4     34 EC B0 FD | 	call	#__system___float_cmp
14eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
14ebc     00 1E 26 36 |  if_ae	not	local01, #0
14ec0     A7 1E 62 FC | 	wrlong	local01, fp
14ec4     58 03 90 FD | 	jmp	#LR__1693
14ec8                 | LR__1682
14ec8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
14ec8     08 4E 05 F1 | 	add	fp, #8
14ecc     A7 1E 02 FB | 	rdlong	local01, fp
14ed0     08 4E 85 F1 | 	sub	fp, #8
14ed4     1E 1E 0E F2 | 	cmp	local01, #30 wz
14ed8     14 4E 05 A1 |  if_e	add	fp, #20
14edc     A7 24 02 AB |  if_e	rdlong	local04, fp
14ee0     14 4E 85 A1 |  if_e	sub	fp, #20
14ee4     12 23 02 A6 |  if_e	mov	local03, local04
14ee8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14eec     38 00 90 5D |  if_ne	jmp	#LR__1683
14ef0     00 1E 06 F6 | 	mov	local01, #0
14ef4     A7 20 02 FB | 	rdlong	local02, fp
14ef8     0C 4E 05 F1 | 	add	fp, #12
14efc     A7 12 02 FB | 	rdlong	arg01, fp
14f00     0C 4E 85 F1 | 	sub	fp, #12
14f04     AC E3 B0 FD | 	call	#__system___float_fromuns
14f08     FD 14 02 F6 | 	mov	arg02, result1
14f0c     10 13 02 F6 | 	mov	arg01, local02
14f10     01 16 66 F6 | 	neg	arg03, #1
14f14     D4 EB B0 FD | 	call	#__system___float_cmp
14f18     00 FA 55 F2 | 	cmps	result1, #0 wc
14f1c     00 1E 26 36 |  if_ae	not	local01, #0
14f20     A7 1E 62 FC | 	wrlong	local01, fp
14f24     F8 02 90 FD | 	jmp	#LR__1693
14f28                 | LR__1683
14f28                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
14f28     08 4E 05 F1 | 	add	fp, #8
14f2c     A7 1E 02 FB | 	rdlong	local01, fp
14f30     08 4E 85 F1 | 	sub	fp, #8
14f34     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f38     14 4E 05 A1 |  if_e	add	fp, #20
14f3c     A7 24 02 AB |  if_e	rdlong	local04, fp
14f40     14 4E 85 A1 |  if_e	sub	fp, #20
14f44     12 23 02 A6 |  if_e	mov	local03, local04
14f48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14f4c     44 00 90 5D |  if_ne	jmp	#LR__1684
14f50     00 1E 06 F6 | 	mov	local01, #0
14f54     A7 12 02 FB | 	rdlong	arg01, fp
14f58     09 13 52 F6 | 	abs	arg01, arg01 wc
14f5c     1F 26 C6 C9 |  if_b	decod	local05, #31
14f60     00 26 06 36 |  if_ae	mov	local05, #0
14f64     4C E3 B0 FD | 	call	#__system___float_fromuns
14f68     13 FB 61 F5 | 	xor	result1, local05
14f6c     FD 12 02 F6 | 	mov	arg01, result1
14f70     0C 4E 05 F1 | 	add	fp, #12
14f74     A7 14 02 FB | 	rdlong	arg02, fp
14f78     0C 4E 85 F1 | 	sub	fp, #12
14f7c     01 16 66 F6 | 	neg	arg03, #1
14f80     68 EB B0 FD | 	call	#__system___float_cmp
14f84     00 FA 55 F2 | 	cmps	result1, #0 wc
14f88     00 1E 26 36 |  if_ae	not	local01, #0
14f8c     A7 1E 62 FC | 	wrlong	local01, fp
14f90     8C 02 90 FD | 	jmp	#LR__1693
14f94                 | LR__1684
14f94                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
14f94     08 4E 05 F1 | 	add	fp, #8
14f98     A7 1E 02 FB | 	rdlong	local01, fp
14f9c     08 4E 85 F1 | 	sub	fp, #8
14fa0     1C 1E 0E F2 | 	cmp	local01, #28 wz
14fa4     14 4E 05 A1 |  if_e	add	fp, #20
14fa8     A7 24 02 AB |  if_e	rdlong	local04, fp
14fac     14 4E 85 A1 |  if_e	sub	fp, #20
14fb0     12 23 02 A6 |  if_e	mov	local03, local04
14fb4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14fb8     24 00 90 5D |  if_ne	jmp	#LR__1685
14fbc     00 1E 06 F6 | 	mov	local01, #0
14fc0     A7 20 02 FB | 	rdlong	local02, fp
14fc4     0C 4E 05 F1 | 	add	fp, #12
14fc8     A7 22 02 FB | 	rdlong	local03, fp
14fcc     0C 4E 85 F1 | 	sub	fp, #12
14fd0     11 21 52 F2 | 	cmps	local02, local03 wc
14fd4     01 1E 66 36 |  if_ae	neg	local01, #1
14fd8     A7 1E 62 FC | 	wrlong	local01, fp
14fdc     40 02 90 FD | 	jmp	#LR__1693
14fe0                 | LR__1685
14fe0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
14fe0     08 4E 05 F1 | 	add	fp, #8
14fe4     A7 1E 02 FB | 	rdlong	local01, fp
14fe8     08 4E 85 F1 | 	sub	fp, #8
14fec     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ff0     14 4E 05 A1 |  if_e	add	fp, #20
14ff4     A7 24 02 AB |  if_e	rdlong	local04, fp
14ff8     14 4E 85 A1 |  if_e	sub	fp, #20
14ffc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15000     24 00 90 5D |  if_ne	jmp	#LR__1686
15004     00 1E 06 F6 | 	mov	local01, #0
15008     A7 20 02 FB | 	rdlong	local02, fp
1500c     0C 4E 05 F1 | 	add	fp, #12
15010     A7 22 02 FB | 	rdlong	local03, fp
15014     0C 4E 85 F1 | 	sub	fp, #12
15018     11 21 52 F2 | 	cmps	local02, local03 wc
1501c     01 1E 66 36 |  if_ae	neg	local01, #1
15020     A7 1E 62 FC | 	wrlong	local01, fp
15024     F8 01 90 FD | 	jmp	#LR__1693
15028                 | LR__1686
15028                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
15028     08 4E 05 F1 | 	add	fp, #8
1502c     A7 1E 02 FB | 	rdlong	local01, fp
15030     08 4E 85 F1 | 	sub	fp, #8
15034     1D 1E 0E F2 | 	cmp	local01, #29 wz
15038     14 4E 05 A1 |  if_e	add	fp, #20
1503c     A7 22 02 AB |  if_e	rdlong	local03, fp
15040     14 4E 85 A1 |  if_e	sub	fp, #20
15044     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15048     34 00 90 5D |  if_ne	jmp	#LR__1687
1504c     00 1E 06 F6 | 	mov	local01, #0
15050     A7 12 02 FB | 	rdlong	arg01, fp
15054     5C E2 B0 FD | 	call	#__system___float_fromuns
15058     FD 12 02 F6 | 	mov	arg01, result1
1505c     0C 4E 05 F1 | 	add	fp, #12
15060     A7 14 02 FB | 	rdlong	arg02, fp
15064     0C 4E 85 F1 | 	sub	fp, #12
15068     01 16 66 F6 | 	neg	arg03, #1
1506c     7C EA B0 FD | 	call	#__system___float_cmp
15070     00 FA 55 F2 | 	cmps	result1, #0 wc
15074     00 1E 26 36 |  if_ae	not	local01, #0
15078     A7 1E 62 FC | 	wrlong	local01, fp
1507c     A0 01 90 FD | 	jmp	#LR__1693
15080                 | LR__1687
15080                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
15080     08 4E 05 F1 | 	add	fp, #8
15084     A7 1E 02 FB | 	rdlong	local01, fp
15088     08 4E 85 F1 | 	sub	fp, #8
1508c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15090     14 4E 05 A1 |  if_e	add	fp, #20
15094     A7 22 02 AB |  if_e	rdlong	local03, fp
15098     14 4E 85 A1 |  if_e	sub	fp, #20
1509c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
150a0     24 00 90 5D |  if_ne	jmp	#LR__1688
150a4     00 1E 06 F6 | 	mov	local01, #0
150a8     A7 20 02 FB | 	rdlong	local02, fp
150ac     0C 4E 05 F1 | 	add	fp, #12
150b0     A7 22 02 FB | 	rdlong	local03, fp
150b4     0C 4E 85 F1 | 	sub	fp, #12
150b8     11 21 52 F2 | 	cmps	local02, local03 wc
150bc     01 1E 66 36 |  if_ae	neg	local01, #1
150c0     A7 1E 62 FC | 	wrlong	local01, fp
150c4     58 01 90 FD | 	jmp	#LR__1693
150c8                 | LR__1688
150c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
150c8     08 4E 05 F1 | 	add	fp, #8
150cc     A7 1E 02 FB | 	rdlong	local01, fp
150d0     08 4E 85 F1 | 	sub	fp, #8
150d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
150d8     14 4E 05 A1 |  if_e	add	fp, #20
150dc     A7 22 02 AB |  if_e	rdlong	local03, fp
150e0     14 4E 85 A1 |  if_e	sub	fp, #20
150e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
150e8     24 00 90 5D |  if_ne	jmp	#LR__1689
150ec     00 1E 06 F6 | 	mov	local01, #0
150f0     A7 20 02 FB | 	rdlong	local02, fp
150f4     0C 4E 05 F1 | 	add	fp, #12
150f8     A7 22 02 FB | 	rdlong	local03, fp
150fc     0C 4E 85 F1 | 	sub	fp, #12
15100     11 21 12 F2 | 	cmp	local02, local03 wc
15104     01 1E 66 36 |  if_ae	neg	local01, #1
15108     A7 1E 62 FC | 	wrlong	local01, fp
1510c     10 01 90 FD | 	jmp	#LR__1693
15110                 | LR__1689
15110                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
15110     08 4E 05 F1 | 	add	fp, #8
15114     A7 1E 02 FB | 	rdlong	local01, fp
15118     08 4E 85 F1 | 	sub	fp, #8
1511c     2B 1E 0E F2 | 	cmp	local01, #43 wz
15120     14 4E 05 A1 |  if_e	add	fp, #20
15124     A7 22 02 AB |  if_e	rdlong	local03, fp
15128     14 4E 85 A1 |  if_e	sub	fp, #20
1512c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15130     30 00 90 5D |  if_ne	jmp	#LR__1690
15134     00 1E 06 F6 | 	mov	local01, #0
15138     A7 12 02 FB | 	rdlong	arg01, fp
1513c     8C C2 BF FD | 	call	#_convertstring
15140     FD 12 02 F6 | 	mov	arg01, result1
15144     0C 4E 05 F1 | 	add	fp, #12
15148     A7 14 02 FB | 	rdlong	arg02, fp
1514c     0C 4E 85 F1 | 	sub	fp, #12
15150     D8 B9 B0 FD | 	call	#__system___string_cmp
15154     00 FA 55 F2 | 	cmps	result1, #0 wc
15158     00 1E 26 36 |  if_ae	not	local01, #0
1515c     A7 1E 62 FC | 	wrlong	local01, fp
15160     BC 00 90 FD | 	jmp	#LR__1693
15164                 | LR__1690
15164                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
15164     08 4E 05 F1 | 	add	fp, #8
15168     A7 1E 02 FB | 	rdlong	local01, fp
1516c     08 4E 85 F1 | 	sub	fp, #8
15170     1F 1E 0E F2 | 	cmp	local01, #31 wz
15174     14 4E 05 A1 |  if_e	add	fp, #20
15178     A7 22 02 AB |  if_e	rdlong	local03, fp
1517c     14 4E 85 A1 |  if_e	sub	fp, #20
15180     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15184     34 00 90 5D |  if_ne	jmp	#LR__1691
15188     00 1E 06 F6 | 	mov	local01, #0
1518c     A7 20 02 FB | 	rdlong	local02, fp
15190     0C 4E 05 F1 | 	add	fp, #12
15194     A7 12 02 FB | 	rdlong	arg01, fp
15198     0C 4E 85 F1 | 	sub	fp, #12
1519c     2C C2 BF FD | 	call	#_convertstring
151a0     FD 14 02 F6 | 	mov	arg02, result1
151a4     10 13 02 F6 | 	mov	arg01, local02
151a8     80 B9 B0 FD | 	call	#__system___string_cmp
151ac     00 FA 55 F2 | 	cmps	result1, #0 wc
151b0     00 1E 26 36 |  if_ae	not	local01, #0
151b4     A7 1E 62 FC | 	wrlong	local01, fp
151b8     64 00 90 FD | 	jmp	#LR__1693
151bc                 | LR__1691
151bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
151bc     08 4E 05 F1 | 	add	fp, #8
151c0     A7 1E 02 FB | 	rdlong	local01, fp
151c4     08 4E 85 F1 | 	sub	fp, #8
151c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
151cc     14 4E 05 A1 |  if_e	add	fp, #20
151d0     A7 22 02 AB |  if_e	rdlong	local03, fp
151d4     14 4E 85 A1 |  if_e	sub	fp, #20
151d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
151dc     3C 00 90 5D |  if_ne	jmp	#LR__1692
151e0     00 1E 06 F6 | 	mov	local01, #0
151e4     A7 12 02 FB | 	rdlong	arg01, fp
151e8     E0 C1 BF FD | 	call	#_convertstring
151ec     FD 20 02 F6 | 	mov	local02, result1
151f0     0C 4E 05 F1 | 	add	fp, #12
151f4     A7 12 02 FB | 	rdlong	arg01, fp
151f8     0C 4E 85 F1 | 	sub	fp, #12
151fc     CC C1 BF FD | 	call	#_convertstring
15200     FD 14 02 F6 | 	mov	arg02, result1
15204     10 13 02 F6 | 	mov	arg01, local02
15208     20 B9 B0 FD | 	call	#__system___string_cmp
1520c     00 FA 55 F2 | 	cmps	result1, #0 wc
15210     00 1E 26 36 |  if_ae	not	local01, #0
15214     A7 1E 62 FC | 	wrlong	local01, fp
15218     04 00 90 FD | 	jmp	#LR__1693
1521c                 | LR__1692
1521c     A7 00 68 FC | 	wrlong	#0, fp
15220                 | LR__1693
15220     08 4E 05 F1 | 	add	fp, #8
15224     A7 38 68 FC | 	wrlong	#28, fp
15228     08 4E 85 F1 | 	sub	fp, #8
1522c     A7 12 02 F6 | 	mov	arg01, fp
15230     88 60 BF FD | 	call	#_push
15234     A7 F0 03 F6 | 	mov	ptra, fp
15238     B2 00 A0 FD | 	call	#popregs_
1523c                 | _do_ge_ret
1523c     2D 00 64 FD | 	ret
15240                 | 
15240                 | ' 
15240                 | ' sub do_le
15240                 | _do_le
15240     05 4A 05 F6 | 	mov	COUNT_, #5
15244     A8 00 A0 FD | 	call	#pushregs_
15248     18 F0 07 F1 | 	add	ptra, #24
1524c     D4 5F BF FD | 	call	#_pop
15250     FD 1E 02 F6 | 	mov	local01, result1
15254     FE 20 02 F6 | 	mov	local02, result2
15258     FF 22 02 F6 | 	mov	local03, result3
1525c     0C 4E 05 F1 | 	add	fp, #12
15260     A7 1E 62 FC | 	wrlong	local01, fp
15264     04 4E 05 F1 | 	add	fp, #4
15268     A7 20 62 FC | 	wrlong	local02, fp
1526c     04 4E 05 F1 | 	add	fp, #4
15270     A7 22 62 FC | 	wrlong	local03, fp
15274     14 4E 85 F1 | 	sub	fp, #20
15278     A8 5F BF FD | 	call	#_pop
1527c     FF 22 02 F6 | 	mov	local03, result3
15280     A7 FA 61 FC | 	wrlong	result1, fp
15284     04 4E 05 F1 | 	add	fp, #4
15288     A7 FC 61 FC | 	wrlong	result2, fp
1528c     04 4E 05 F1 | 	add	fp, #4
15290     A7 22 62 FC | 	wrlong	local03, fp
15294                 | ' t2=pop()
15294                 | ' t1=pop()
15294                 | ' 
15294                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
15294     08 4E 85 F1 | 	sub	fp, #8
15298     1F 22 0E F2 | 	cmp	local03, #31 wz
1529c     14 4E 05 A1 |  if_e	add	fp, #20
152a0     A7 24 02 AB |  if_e	rdlong	local04, fp
152a4     14 4E 85 A1 |  if_e	sub	fp, #20
152a8     12 23 02 A6 |  if_e	mov	local03, local04
152ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
152b0     28 00 90 5D |  if_ne	jmp	#LR__1700
152b4     00 1E 06 F6 | 	mov	local01, #0
152b8     A7 12 02 FB | 	rdlong	arg01, fp
152bc     0C 4E 05 F1 | 	add	fp, #12
152c0     A7 14 02 FB | 	rdlong	arg02, fp
152c4     0C 4E 85 F1 | 	sub	fp, #12
152c8     60 B8 B0 FD | 	call	#__system___string_cmp
152cc     01 FA 55 F2 | 	cmps	result1, #1 wc
152d0     00 1E 26 C6 |  if_b	not	local01, #0
152d4     A7 1E 62 FC | 	wrlong	local01, fp
152d8     1C 04 90 FD | 	jmp	#LR__1713
152dc                 | LR__1700
152dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
152dc     08 4E 05 F1 | 	add	fp, #8
152e0     A7 1E 02 FB | 	rdlong	local01, fp
152e4     08 4E 85 F1 | 	sub	fp, #8
152e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
152ec     14 4E 05 A1 |  if_e	add	fp, #20
152f0     A7 24 02 AB |  if_e	rdlong	local04, fp
152f4     14 4E 85 A1 |  if_e	sub	fp, #20
152f8     12 23 02 A6 |  if_e	mov	local03, local04
152fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15300     2C 00 90 5D |  if_ne	jmp	#LR__1701
15304     00 1E 06 F6 | 	mov	local01, #0
15308     A7 12 02 FB | 	rdlong	arg01, fp
1530c     0C 4E 05 F1 | 	add	fp, #12
15310     A7 14 02 FB | 	rdlong	arg02, fp
15314     0C 4E 85 F1 | 	sub	fp, #12
15318     01 16 06 F6 | 	mov	arg03, #1
1531c     CC E7 B0 FD | 	call	#__system___float_cmp
15320     01 FA 55 F2 | 	cmps	result1, #1 wc
15324     00 1E 26 C6 |  if_b	not	local01, #0
15328     A7 1E 62 FC | 	wrlong	local01, fp
1532c     C8 03 90 FD | 	jmp	#LR__1713
15330                 | LR__1701
15330                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
15330     08 4E 05 F1 | 	add	fp, #8
15334     A7 1E 02 FB | 	rdlong	local01, fp
15338     08 4E 85 F1 | 	sub	fp, #8
1533c     1E 1E 0E F2 | 	cmp	local01, #30 wz
15340     14 4E 05 A1 |  if_e	add	fp, #20
15344     A7 24 02 AB |  if_e	rdlong	local04, fp
15348     14 4E 85 A1 |  if_e	sub	fp, #20
1534c     12 23 02 A6 |  if_e	mov	local03, local04
15350     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15354     48 00 90 5D |  if_ne	jmp	#LR__1702
15358     00 1E 06 F6 | 	mov	local01, #0
1535c     A7 20 02 FB | 	rdlong	local02, fp
15360     0C 4E 05 F1 | 	add	fp, #12
15364     A7 12 02 FB | 	rdlong	arg01, fp
15368     0C 4E 85 F1 | 	sub	fp, #12
1536c     09 13 52 F6 | 	abs	arg01, arg01 wc
15370     1F 26 C6 C9 |  if_b	decod	local05, #31
15374     00 26 06 36 |  if_ae	mov	local05, #0
15378     38 DF B0 FD | 	call	#__system___float_fromuns
1537c     13 FB 61 F5 | 	xor	result1, local05
15380     FD 14 02 F6 | 	mov	arg02, result1
15384     10 13 02 F6 | 	mov	arg01, local02
15388     01 16 06 F6 | 	mov	arg03, #1
1538c     5C E7 B0 FD | 	call	#__system___float_cmp
15390     01 FA 55 F2 | 	cmps	result1, #1 wc
15394     00 1E 26 C6 |  if_b	not	local01, #0
15398     A7 1E 62 FC | 	wrlong	local01, fp
1539c     58 03 90 FD | 	jmp	#LR__1713
153a0                 | LR__1702
153a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
153a0     08 4E 05 F1 | 	add	fp, #8
153a4     A7 1E 02 FB | 	rdlong	local01, fp
153a8     08 4E 85 F1 | 	sub	fp, #8
153ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
153b0     14 4E 05 A1 |  if_e	add	fp, #20
153b4     A7 24 02 AB |  if_e	rdlong	local04, fp
153b8     14 4E 85 A1 |  if_e	sub	fp, #20
153bc     12 23 02 A6 |  if_e	mov	local03, local04
153c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
153c4     38 00 90 5D |  if_ne	jmp	#LR__1703
153c8     00 1E 06 F6 | 	mov	local01, #0
153cc     A7 20 02 FB | 	rdlong	local02, fp
153d0     0C 4E 05 F1 | 	add	fp, #12
153d4     A7 12 02 FB | 	rdlong	arg01, fp
153d8     0C 4E 85 F1 | 	sub	fp, #12
153dc     D4 DE B0 FD | 	call	#__system___float_fromuns
153e0     FD 14 02 F6 | 	mov	arg02, result1
153e4     10 13 02 F6 | 	mov	arg01, local02
153e8     01 16 06 F6 | 	mov	arg03, #1
153ec     FC E6 B0 FD | 	call	#__system___float_cmp
153f0     01 FA 55 F2 | 	cmps	result1, #1 wc
153f4     00 1E 26 C6 |  if_b	not	local01, #0
153f8     A7 1E 62 FC | 	wrlong	local01, fp
153fc     F8 02 90 FD | 	jmp	#LR__1713
15400                 | LR__1703
15400                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
15400     08 4E 05 F1 | 	add	fp, #8
15404     A7 1E 02 FB | 	rdlong	local01, fp
15408     08 4E 85 F1 | 	sub	fp, #8
1540c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15410     14 4E 05 A1 |  if_e	add	fp, #20
15414     A7 24 02 AB |  if_e	rdlong	local04, fp
15418     14 4E 85 A1 |  if_e	sub	fp, #20
1541c     12 23 02 A6 |  if_e	mov	local03, local04
15420     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15424     44 00 90 5D |  if_ne	jmp	#LR__1704
15428     00 1E 06 F6 | 	mov	local01, #0
1542c     A7 12 02 FB | 	rdlong	arg01, fp
15430     09 13 52 F6 | 	abs	arg01, arg01 wc
15434     1F 26 C6 C9 |  if_b	decod	local05, #31
15438     00 26 06 36 |  if_ae	mov	local05, #0
1543c     74 DE B0 FD | 	call	#__system___float_fromuns
15440     13 FB 61 F5 | 	xor	result1, local05
15444     FD 12 02 F6 | 	mov	arg01, result1
15448     0C 4E 05 F1 | 	add	fp, #12
1544c     A7 14 02 FB | 	rdlong	arg02, fp
15450     0C 4E 85 F1 | 	sub	fp, #12
15454     01 16 06 F6 | 	mov	arg03, #1
15458     90 E6 B0 FD | 	call	#__system___float_cmp
1545c     01 FA 55 F2 | 	cmps	result1, #1 wc
15460     00 1E 26 C6 |  if_b	not	local01, #0
15464     A7 1E 62 FC | 	wrlong	local01, fp
15468     8C 02 90 FD | 	jmp	#LR__1713
1546c                 | LR__1704
1546c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1546c     08 4E 05 F1 | 	add	fp, #8
15470     A7 1E 02 FB | 	rdlong	local01, fp
15474     08 4E 85 F1 | 	sub	fp, #8
15478     1C 1E 0E F2 | 	cmp	local01, #28 wz
1547c     14 4E 05 A1 |  if_e	add	fp, #20
15480     A7 24 02 AB |  if_e	rdlong	local04, fp
15484     14 4E 85 A1 |  if_e	sub	fp, #20
15488     12 23 02 A6 |  if_e	mov	local03, local04
1548c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15490     24 00 90 5D |  if_ne	jmp	#LR__1705
15494     00 1E 06 F6 | 	mov	local01, #0
15498     A7 20 02 FB | 	rdlong	local02, fp
1549c     0C 4E 05 F1 | 	add	fp, #12
154a0     A7 22 02 FB | 	rdlong	local03, fp
154a4     0C 4E 85 F1 | 	sub	fp, #12
154a8     11 21 5A F2 | 	cmps	local02, local03 wcz
154ac     01 1E 66 E6 |  if_be	neg	local01, #1
154b0     A7 1E 62 FC | 	wrlong	local01, fp
154b4     40 02 90 FD | 	jmp	#LR__1713
154b8                 | LR__1705
154b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
154b8     08 4E 05 F1 | 	add	fp, #8
154bc     A7 1E 02 FB | 	rdlong	local01, fp
154c0     08 4E 85 F1 | 	sub	fp, #8
154c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
154c8     14 4E 05 A1 |  if_e	add	fp, #20
154cc     A7 24 02 AB |  if_e	rdlong	local04, fp
154d0     14 4E 85 A1 |  if_e	sub	fp, #20
154d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
154d8     24 00 90 5D |  if_ne	jmp	#LR__1706
154dc     00 1E 06 F6 | 	mov	local01, #0
154e0     A7 20 02 FB | 	rdlong	local02, fp
154e4     0C 4E 05 F1 | 	add	fp, #12
154e8     A7 22 02 FB | 	rdlong	local03, fp
154ec     0C 4E 85 F1 | 	sub	fp, #12
154f0     11 21 5A F2 | 	cmps	local02, local03 wcz
154f4     01 1E 66 E6 |  if_be	neg	local01, #1
154f8     A7 1E 62 FC | 	wrlong	local01, fp
154fc     F8 01 90 FD | 	jmp	#LR__1713
15500                 | LR__1706
15500                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
15500     08 4E 05 F1 | 	add	fp, #8
15504     A7 1E 02 FB | 	rdlong	local01, fp
15508     08 4E 85 F1 | 	sub	fp, #8
1550c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15510     14 4E 05 A1 |  if_e	add	fp, #20
15514     A7 22 02 AB |  if_e	rdlong	local03, fp
15518     14 4E 85 A1 |  if_e	sub	fp, #20
1551c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15520     34 00 90 5D |  if_ne	jmp	#LR__1707
15524     00 1E 06 F6 | 	mov	local01, #0
15528     A7 12 02 FB | 	rdlong	arg01, fp
1552c     84 DD B0 FD | 	call	#__system___float_fromuns
15530     FD 12 02 F6 | 	mov	arg01, result1
15534     0C 4E 05 F1 | 	add	fp, #12
15538     A7 14 02 FB | 	rdlong	arg02, fp
1553c     0C 4E 85 F1 | 	sub	fp, #12
15540     01 16 06 F6 | 	mov	arg03, #1
15544     A4 E5 B0 FD | 	call	#__system___float_cmp
15548     01 FA 55 F2 | 	cmps	result1, #1 wc
1554c     00 1E 26 C6 |  if_b	not	local01, #0
15550     A7 1E 62 FC | 	wrlong	local01, fp
15554     A0 01 90 FD | 	jmp	#LR__1713
15558                 | LR__1707
15558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
15558     08 4E 05 F1 | 	add	fp, #8
1555c     A7 1E 02 FB | 	rdlong	local01, fp
15560     08 4E 85 F1 | 	sub	fp, #8
15564     1D 1E 0E F2 | 	cmp	local01, #29 wz
15568     14 4E 05 A1 |  if_e	add	fp, #20
1556c     A7 22 02 AB |  if_e	rdlong	local03, fp
15570     14 4E 85 A1 |  if_e	sub	fp, #20
15574     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15578     24 00 90 5D |  if_ne	jmp	#LR__1708
1557c     00 1E 06 F6 | 	mov	local01, #0
15580     A7 20 02 FB | 	rdlong	local02, fp
15584     0C 4E 05 F1 | 	add	fp, #12
15588     A7 22 02 FB | 	rdlong	local03, fp
1558c     0C 4E 85 F1 | 	sub	fp, #12
15590     11 21 5A F2 | 	cmps	local02, local03 wcz
15594     01 1E 66 E6 |  if_be	neg	local01, #1
15598     A7 1E 62 FC | 	wrlong	local01, fp
1559c     58 01 90 FD | 	jmp	#LR__1713
155a0                 | LR__1708
155a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
155a0     08 4E 05 F1 | 	add	fp, #8
155a4     A7 1E 02 FB | 	rdlong	local01, fp
155a8     08 4E 85 F1 | 	sub	fp, #8
155ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
155b0     14 4E 05 A1 |  if_e	add	fp, #20
155b4     A7 22 02 AB |  if_e	rdlong	local03, fp
155b8     14 4E 85 A1 |  if_e	sub	fp, #20
155bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
155c0     24 00 90 5D |  if_ne	jmp	#LR__1709
155c4     00 1E 06 F6 | 	mov	local01, #0
155c8     A7 20 02 FB | 	rdlong	local02, fp
155cc     0C 4E 05 F1 | 	add	fp, #12
155d0     A7 22 02 FB | 	rdlong	local03, fp
155d4     0C 4E 85 F1 | 	sub	fp, #12
155d8     11 21 1A F2 | 	cmp	local02, local03 wcz
155dc     01 1E 66 E6 |  if_be	neg	local01, #1
155e0     A7 1E 62 FC | 	wrlong	local01, fp
155e4     10 01 90 FD | 	jmp	#LR__1713
155e8                 | LR__1709
155e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
155e8     08 4E 05 F1 | 	add	fp, #8
155ec     A7 1E 02 FB | 	rdlong	local01, fp
155f0     08 4E 85 F1 | 	sub	fp, #8
155f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
155f8     14 4E 05 A1 |  if_e	add	fp, #20
155fc     A7 22 02 AB |  if_e	rdlong	local03, fp
15600     14 4E 85 A1 |  if_e	sub	fp, #20
15604     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15608     30 00 90 5D |  if_ne	jmp	#LR__1710
1560c     00 1E 06 F6 | 	mov	local01, #0
15610     A7 12 02 FB | 	rdlong	arg01, fp
15614     B4 BD BF FD | 	call	#_convertstring
15618     FD 12 02 F6 | 	mov	arg01, result1
1561c     0C 4E 05 F1 | 	add	fp, #12
15620     A7 14 02 FB | 	rdlong	arg02, fp
15624     0C 4E 85 F1 | 	sub	fp, #12
15628     00 B5 B0 FD | 	call	#__system___string_cmp
1562c     01 FA 55 F2 | 	cmps	result1, #1 wc
15630     00 1E 26 C6 |  if_b	not	local01, #0
15634     A7 1E 62 FC | 	wrlong	local01, fp
15638     BC 00 90 FD | 	jmp	#LR__1713
1563c                 | LR__1710
1563c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1563c     08 4E 05 F1 | 	add	fp, #8
15640     A7 1E 02 FB | 	rdlong	local01, fp
15644     08 4E 85 F1 | 	sub	fp, #8
15648     1F 1E 0E F2 | 	cmp	local01, #31 wz
1564c     14 4E 05 A1 |  if_e	add	fp, #20
15650     A7 22 02 AB |  if_e	rdlong	local03, fp
15654     14 4E 85 A1 |  if_e	sub	fp, #20
15658     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1565c     34 00 90 5D |  if_ne	jmp	#LR__1711
15660     00 1E 06 F6 | 	mov	local01, #0
15664     A7 20 02 FB | 	rdlong	local02, fp
15668     0C 4E 05 F1 | 	add	fp, #12
1566c     A7 12 02 FB | 	rdlong	arg01, fp
15670     0C 4E 85 F1 | 	sub	fp, #12
15674     54 BD BF FD | 	call	#_convertstring
15678     FD 14 02 F6 | 	mov	arg02, result1
1567c     10 13 02 F6 | 	mov	arg01, local02
15680     A8 B4 B0 FD | 	call	#__system___string_cmp
15684     01 FA 55 F2 | 	cmps	result1, #1 wc
15688     00 1E 26 C6 |  if_b	not	local01, #0
1568c     A7 1E 62 FC | 	wrlong	local01, fp
15690     64 00 90 FD | 	jmp	#LR__1713
15694                 | LR__1711
15694                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
15694     08 4E 05 F1 | 	add	fp, #8
15698     A7 1E 02 FB | 	rdlong	local01, fp
1569c     08 4E 85 F1 | 	sub	fp, #8
156a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
156a4     14 4E 05 A1 |  if_e	add	fp, #20
156a8     A7 22 02 AB |  if_e	rdlong	local03, fp
156ac     14 4E 85 A1 |  if_e	sub	fp, #20
156b0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
156b4     3C 00 90 5D |  if_ne	jmp	#LR__1712
156b8     00 1E 06 F6 | 	mov	local01, #0
156bc     A7 12 02 FB | 	rdlong	arg01, fp
156c0     08 BD BF FD | 	call	#_convertstring
156c4     FD 20 02 F6 | 	mov	local02, result1
156c8     0C 4E 05 F1 | 	add	fp, #12
156cc     A7 12 02 FB | 	rdlong	arg01, fp
156d0     0C 4E 85 F1 | 	sub	fp, #12
156d4     F4 BC BF FD | 	call	#_convertstring
156d8     FD 14 02 F6 | 	mov	arg02, result1
156dc     10 13 02 F6 | 	mov	arg01, local02
156e0     48 B4 B0 FD | 	call	#__system___string_cmp
156e4     01 FA 55 F2 | 	cmps	result1, #1 wc
156e8     00 1E 26 C6 |  if_b	not	local01, #0
156ec     A7 1E 62 FC | 	wrlong	local01, fp
156f0     04 00 90 FD | 	jmp	#LR__1713
156f4                 | LR__1712
156f4     A7 00 68 FC | 	wrlong	#0, fp
156f8                 | LR__1713
156f8     08 4E 05 F1 | 	add	fp, #8
156fc     A7 38 68 FC | 	wrlong	#28, fp
15700     08 4E 85 F1 | 	sub	fp, #8
15704     A7 12 02 F6 | 	mov	arg01, fp
15708     B0 5B BF FD | 	call	#_push
1570c     A7 F0 03 F6 | 	mov	ptra, fp
15710     B2 00 A0 FD | 	call	#popregs_
15714                 | _do_le_ret
15714     2D 00 64 FD | 	ret
15718                 | 
15718                 | ' 
15718                 | ' 
15718                 | ' sub do_ne
15718                 | _do_ne
15718     05 4A 05 F6 | 	mov	COUNT_, #5
1571c     A8 00 A0 FD | 	call	#pushregs_
15720     18 F0 07 F1 | 	add	ptra, #24
15724     FC 5A BF FD | 	call	#_pop
15728     FD 1E 02 F6 | 	mov	local01, result1
1572c     FE 20 02 F6 | 	mov	local02, result2
15730     FF 22 02 F6 | 	mov	local03, result3
15734     0C 4E 05 F1 | 	add	fp, #12
15738     A7 1E 62 FC | 	wrlong	local01, fp
1573c     04 4E 05 F1 | 	add	fp, #4
15740     A7 20 62 FC | 	wrlong	local02, fp
15744     04 4E 05 F1 | 	add	fp, #4
15748     A7 22 62 FC | 	wrlong	local03, fp
1574c     14 4E 85 F1 | 	sub	fp, #20
15750     D0 5A BF FD | 	call	#_pop
15754     FF 22 02 F6 | 	mov	local03, result3
15758     A7 FA 61 FC | 	wrlong	result1, fp
1575c     04 4E 05 F1 | 	add	fp, #4
15760     A7 FC 61 FC | 	wrlong	result2, fp
15764     04 4E 05 F1 | 	add	fp, #4
15768     A7 22 62 FC | 	wrlong	local03, fp
1576c                 | ' t2=pop()
1576c                 | ' t1=pop()
1576c                 | ' 
1576c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1576c     08 4E 85 F1 | 	sub	fp, #8
15770     1F 22 0E F2 | 	cmp	local03, #31 wz
15774     14 4E 05 A1 |  if_e	add	fp, #20
15778     A7 24 02 AB |  if_e	rdlong	local04, fp
1577c     14 4E 85 A1 |  if_e	sub	fp, #20
15780     12 23 02 A6 |  if_e	mov	local03, local04
15784     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15788     28 00 90 5D |  if_ne	jmp	#LR__1720
1578c     00 1E 06 F6 | 	mov	local01, #0
15790     A7 12 02 FB | 	rdlong	arg01, fp
15794     0C 4E 05 F1 | 	add	fp, #12
15798     A7 14 02 FB | 	rdlong	arg02, fp
1579c     0C 4E 85 F1 | 	sub	fp, #12
157a0     88 B3 B0 FD | 	call	#__system___string_cmp
157a4     00 FA 0D F2 | 	cmp	result1, #0 wz
157a8     00 1E 26 56 |  if_ne	not	local01, #0
157ac     A7 1E 62 FC | 	wrlong	local01, fp
157b0     1C 04 90 FD | 	jmp	#LR__1733
157b4                 | LR__1720
157b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
157b4     08 4E 05 F1 | 	add	fp, #8
157b8     A7 1E 02 FB | 	rdlong	local01, fp
157bc     08 4E 85 F1 | 	sub	fp, #8
157c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
157c4     14 4E 05 A1 |  if_e	add	fp, #20
157c8     A7 24 02 AB |  if_e	rdlong	local04, fp
157cc     14 4E 85 A1 |  if_e	sub	fp, #20
157d0     12 23 02 A6 |  if_e	mov	local03, local04
157d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
157d8     2C 00 90 5D |  if_ne	jmp	#LR__1721
157dc     00 1E 06 F6 | 	mov	local01, #0
157e0     A7 12 02 FB | 	rdlong	arg01, fp
157e4     0C 4E 05 F1 | 	add	fp, #12
157e8     A7 14 02 FB | 	rdlong	arg02, fp
157ec     0C 4E 85 F1 | 	sub	fp, #12
157f0     01 16 06 F6 | 	mov	arg03, #1
157f4     F4 E2 B0 FD | 	call	#__system___float_cmp
157f8     00 FA 0D F2 | 	cmp	result1, #0 wz
157fc     00 1E 26 56 |  if_ne	not	local01, #0
15800     A7 1E 62 FC | 	wrlong	local01, fp
15804     C8 03 90 FD | 	jmp	#LR__1733
15808                 | LR__1721
15808                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
15808     08 4E 05 F1 | 	add	fp, #8
1580c     A7 1E 02 FB | 	rdlong	local01, fp
15810     08 4E 85 F1 | 	sub	fp, #8
15814     1E 1E 0E F2 | 	cmp	local01, #30 wz
15818     14 4E 05 A1 |  if_e	add	fp, #20
1581c     A7 24 02 AB |  if_e	rdlong	local04, fp
15820     14 4E 85 A1 |  if_e	sub	fp, #20
15824     12 23 02 A6 |  if_e	mov	local03, local04
15828     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1582c     48 00 90 5D |  if_ne	jmp	#LR__1722
15830     00 1E 06 F6 | 	mov	local01, #0
15834     A7 20 02 FB | 	rdlong	local02, fp
15838     0C 4E 05 F1 | 	add	fp, #12
1583c     A7 12 02 FB | 	rdlong	arg01, fp
15840     0C 4E 85 F1 | 	sub	fp, #12
15844     09 13 52 F6 | 	abs	arg01, arg01 wc
15848     1F 26 C6 C9 |  if_b	decod	local05, #31
1584c     00 26 06 36 |  if_ae	mov	local05, #0
15850     60 DA B0 FD | 	call	#__system___float_fromuns
15854     13 FB 61 F5 | 	xor	result1, local05
15858     FD 14 02 F6 | 	mov	arg02, result1
1585c     10 13 02 F6 | 	mov	arg01, local02
15860     01 16 06 F6 | 	mov	arg03, #1
15864     84 E2 B0 FD | 	call	#__system___float_cmp
15868     00 FA 0D F2 | 	cmp	result1, #0 wz
1586c     00 1E 26 56 |  if_ne	not	local01, #0
15870     A7 1E 62 FC | 	wrlong	local01, fp
15874     58 03 90 FD | 	jmp	#LR__1733
15878                 | LR__1722
15878                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
15878     08 4E 05 F1 | 	add	fp, #8
1587c     A7 1E 02 FB | 	rdlong	local01, fp
15880     08 4E 85 F1 | 	sub	fp, #8
15884     1E 1E 0E F2 | 	cmp	local01, #30 wz
15888     14 4E 05 A1 |  if_e	add	fp, #20
1588c     A7 24 02 AB |  if_e	rdlong	local04, fp
15890     14 4E 85 A1 |  if_e	sub	fp, #20
15894     12 23 02 A6 |  if_e	mov	local03, local04
15898     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1589c     38 00 90 5D |  if_ne	jmp	#LR__1723
158a0     00 1E 06 F6 | 	mov	local01, #0
158a4     A7 20 02 FB | 	rdlong	local02, fp
158a8     0C 4E 05 F1 | 	add	fp, #12
158ac     A7 12 02 FB | 	rdlong	arg01, fp
158b0     0C 4E 85 F1 | 	sub	fp, #12
158b4     FC D9 B0 FD | 	call	#__system___float_fromuns
158b8     FD 14 02 F6 | 	mov	arg02, result1
158bc     10 13 02 F6 | 	mov	arg01, local02
158c0     01 16 06 F6 | 	mov	arg03, #1
158c4     24 E2 B0 FD | 	call	#__system___float_cmp
158c8     00 FA 0D F2 | 	cmp	result1, #0 wz
158cc     00 1E 26 56 |  if_ne	not	local01, #0
158d0     A7 1E 62 FC | 	wrlong	local01, fp
158d4     F8 02 90 FD | 	jmp	#LR__1733
158d8                 | LR__1723
158d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
158d8     08 4E 05 F1 | 	add	fp, #8
158dc     A7 1E 02 FB | 	rdlong	local01, fp
158e0     08 4E 85 F1 | 	sub	fp, #8
158e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
158e8     14 4E 05 A1 |  if_e	add	fp, #20
158ec     A7 24 02 AB |  if_e	rdlong	local04, fp
158f0     14 4E 85 A1 |  if_e	sub	fp, #20
158f4     12 23 02 A6 |  if_e	mov	local03, local04
158f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
158fc     44 00 90 5D |  if_ne	jmp	#LR__1724
15900     00 1E 06 F6 | 	mov	local01, #0
15904     A7 12 02 FB | 	rdlong	arg01, fp
15908     09 13 52 F6 | 	abs	arg01, arg01 wc
1590c     1F 26 C6 C9 |  if_b	decod	local05, #31
15910     00 26 06 36 |  if_ae	mov	local05, #0
15914     9C D9 B0 FD | 	call	#__system___float_fromuns
15918     13 FB 61 F5 | 	xor	result1, local05
1591c     FD 12 02 F6 | 	mov	arg01, result1
15920     0C 4E 05 F1 | 	add	fp, #12
15924     A7 14 02 FB | 	rdlong	arg02, fp
15928     0C 4E 85 F1 | 	sub	fp, #12
1592c     01 16 06 F6 | 	mov	arg03, #1
15930     B8 E1 B0 FD | 	call	#__system___float_cmp
15934     00 FA 0D F2 | 	cmp	result1, #0 wz
15938     00 1E 26 56 |  if_ne	not	local01, #0
1593c     A7 1E 62 FC | 	wrlong	local01, fp
15940     8C 02 90 FD | 	jmp	#LR__1733
15944                 | LR__1724
15944                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
15944     08 4E 05 F1 | 	add	fp, #8
15948     A7 1E 02 FB | 	rdlong	local01, fp
1594c     08 4E 85 F1 | 	sub	fp, #8
15950     1C 1E 0E F2 | 	cmp	local01, #28 wz
15954     14 4E 05 A1 |  if_e	add	fp, #20
15958     A7 24 02 AB |  if_e	rdlong	local04, fp
1595c     14 4E 85 A1 |  if_e	sub	fp, #20
15960     12 23 02 A6 |  if_e	mov	local03, local04
15964     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15968     24 00 90 5D |  if_ne	jmp	#LR__1725
1596c     00 1E 06 F6 | 	mov	local01, #0
15970     A7 20 02 FB | 	rdlong	local02, fp
15974     0C 4E 05 F1 | 	add	fp, #12
15978     A7 22 02 FB | 	rdlong	local03, fp
1597c     0C 4E 85 F1 | 	sub	fp, #12
15980     11 21 0A F2 | 	cmp	local02, local03 wz
15984     01 1E 66 56 |  if_ne	neg	local01, #1
15988     A7 1E 62 FC | 	wrlong	local01, fp
1598c     40 02 90 FD | 	jmp	#LR__1733
15990                 | LR__1725
15990                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
15990     08 4E 05 F1 | 	add	fp, #8
15994     A7 1E 02 FB | 	rdlong	local01, fp
15998     08 4E 85 F1 | 	sub	fp, #8
1599c     1C 1E 0E F2 | 	cmp	local01, #28 wz
159a0     14 4E 05 A1 |  if_e	add	fp, #20
159a4     A7 24 02 AB |  if_e	rdlong	local04, fp
159a8     14 4E 85 A1 |  if_e	sub	fp, #20
159ac     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
159b0     24 00 90 5D |  if_ne	jmp	#LR__1726
159b4     00 1E 06 F6 | 	mov	local01, #0
159b8     A7 20 02 FB | 	rdlong	local02, fp
159bc     0C 4E 05 F1 | 	add	fp, #12
159c0     A7 22 02 FB | 	rdlong	local03, fp
159c4     0C 4E 85 F1 | 	sub	fp, #12
159c8     11 21 0A F2 | 	cmp	local02, local03 wz
159cc     01 1E 66 56 |  if_ne	neg	local01, #1
159d0     A7 1E 62 FC | 	wrlong	local01, fp
159d4     F8 01 90 FD | 	jmp	#LR__1733
159d8                 | LR__1726
159d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
159d8     08 4E 05 F1 | 	add	fp, #8
159dc     A7 1E 02 FB | 	rdlong	local01, fp
159e0     08 4E 85 F1 | 	sub	fp, #8
159e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
159e8     14 4E 05 A1 |  if_e	add	fp, #20
159ec     A7 22 02 AB |  if_e	rdlong	local03, fp
159f0     14 4E 85 A1 |  if_e	sub	fp, #20
159f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
159f8     34 00 90 5D |  if_ne	jmp	#LR__1727
159fc     00 1E 06 F6 | 	mov	local01, #0
15a00     A7 12 02 FB | 	rdlong	arg01, fp
15a04     AC D8 B0 FD | 	call	#__system___float_fromuns
15a08     FD 12 02 F6 | 	mov	arg01, result1
15a0c     0C 4E 05 F1 | 	add	fp, #12
15a10     A7 14 02 FB | 	rdlong	arg02, fp
15a14     0C 4E 85 F1 | 	sub	fp, #12
15a18     01 16 06 F6 | 	mov	arg03, #1
15a1c     CC E0 B0 FD | 	call	#__system___float_cmp
15a20     00 FA 0D F2 | 	cmp	result1, #0 wz
15a24     00 1E 26 56 |  if_ne	not	local01, #0
15a28     A7 1E 62 FC | 	wrlong	local01, fp
15a2c     A0 01 90 FD | 	jmp	#LR__1733
15a30                 | LR__1727
15a30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
15a30     08 4E 05 F1 | 	add	fp, #8
15a34     A7 1E 02 FB | 	rdlong	local01, fp
15a38     08 4E 85 F1 | 	sub	fp, #8
15a3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15a40     14 4E 05 A1 |  if_e	add	fp, #20
15a44     A7 22 02 AB |  if_e	rdlong	local03, fp
15a48     14 4E 85 A1 |  if_e	sub	fp, #20
15a4c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15a50     24 00 90 5D |  if_ne	jmp	#LR__1728
15a54     00 1E 06 F6 | 	mov	local01, #0
15a58     A7 20 02 FB | 	rdlong	local02, fp
15a5c     0C 4E 05 F1 | 	add	fp, #12
15a60     A7 22 02 FB | 	rdlong	local03, fp
15a64     0C 4E 85 F1 | 	sub	fp, #12
15a68     11 21 0A F2 | 	cmp	local02, local03 wz
15a6c     01 1E 66 56 |  if_ne	neg	local01, #1
15a70     A7 1E 62 FC | 	wrlong	local01, fp
15a74     58 01 90 FD | 	jmp	#LR__1733
15a78                 | LR__1728
15a78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
15a78     08 4E 05 F1 | 	add	fp, #8
15a7c     A7 1E 02 FB | 	rdlong	local01, fp
15a80     08 4E 85 F1 | 	sub	fp, #8
15a84     1D 1E 0E F2 | 	cmp	local01, #29 wz
15a88     14 4E 05 A1 |  if_e	add	fp, #20
15a8c     A7 22 02 AB |  if_e	rdlong	local03, fp
15a90     14 4E 85 A1 |  if_e	sub	fp, #20
15a94     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15a98     24 00 90 5D |  if_ne	jmp	#LR__1729
15a9c     00 1E 06 F6 | 	mov	local01, #0
15aa0     A7 20 02 FB | 	rdlong	local02, fp
15aa4     0C 4E 05 F1 | 	add	fp, #12
15aa8     A7 22 02 FB | 	rdlong	local03, fp
15aac     0C 4E 85 F1 | 	sub	fp, #12
15ab0     11 21 0A F2 | 	cmp	local02, local03 wz
15ab4     01 1E 66 56 |  if_ne	neg	local01, #1
15ab8     A7 1E 62 FC | 	wrlong	local01, fp
15abc     10 01 90 FD | 	jmp	#LR__1733
15ac0                 | LR__1729
15ac0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
15ac0     08 4E 05 F1 | 	add	fp, #8
15ac4     A7 1E 02 FB | 	rdlong	local01, fp
15ac8     08 4E 85 F1 | 	sub	fp, #8
15acc     2B 1E 0E F2 | 	cmp	local01, #43 wz
15ad0     14 4E 05 A1 |  if_e	add	fp, #20
15ad4     A7 22 02 AB |  if_e	rdlong	local03, fp
15ad8     14 4E 85 A1 |  if_e	sub	fp, #20
15adc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15ae0     30 00 90 5D |  if_ne	jmp	#LR__1730
15ae4     00 1E 06 F6 | 	mov	local01, #0
15ae8     A7 12 02 FB | 	rdlong	arg01, fp
15aec     DC B8 BF FD | 	call	#_convertstring
15af0     FD 12 02 F6 | 	mov	arg01, result1
15af4     0C 4E 05 F1 | 	add	fp, #12
15af8     A7 14 02 FB | 	rdlong	arg02, fp
15afc     0C 4E 85 F1 | 	sub	fp, #12
15b00     28 B0 B0 FD | 	call	#__system___string_cmp
15b04     00 FA 0D F2 | 	cmp	result1, #0 wz
15b08     00 1E 26 56 |  if_ne	not	local01, #0
15b0c     A7 1E 62 FC | 	wrlong	local01, fp
15b10     BC 00 90 FD | 	jmp	#LR__1733
15b14                 | LR__1730
15b14                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
15b14     08 4E 05 F1 | 	add	fp, #8
15b18     A7 1E 02 FB | 	rdlong	local01, fp
15b1c     08 4E 85 F1 | 	sub	fp, #8
15b20     1F 1E 0E F2 | 	cmp	local01, #31 wz
15b24     14 4E 05 A1 |  if_e	add	fp, #20
15b28     A7 22 02 AB |  if_e	rdlong	local03, fp
15b2c     14 4E 85 A1 |  if_e	sub	fp, #20
15b30     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15b34     34 00 90 5D |  if_ne	jmp	#LR__1731
15b38     00 1E 06 F6 | 	mov	local01, #0
15b3c     A7 20 02 FB | 	rdlong	local02, fp
15b40     0C 4E 05 F1 | 	add	fp, #12
15b44     A7 12 02 FB | 	rdlong	arg01, fp
15b48     0C 4E 85 F1 | 	sub	fp, #12
15b4c     7C B8 BF FD | 	call	#_convertstring
15b50     FD 14 02 F6 | 	mov	arg02, result1
15b54     10 13 02 F6 | 	mov	arg01, local02
15b58     D0 AF B0 FD | 	call	#__system___string_cmp
15b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
15b60     00 1E 26 56 |  if_ne	not	local01, #0
15b64     A7 1E 62 FC | 	wrlong	local01, fp
15b68     64 00 90 FD | 	jmp	#LR__1733
15b6c                 | LR__1731
15b6c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
15b6c     08 4E 05 F1 | 	add	fp, #8
15b70     A7 1E 02 FB | 	rdlong	local01, fp
15b74     08 4E 85 F1 | 	sub	fp, #8
15b78     2B 1E 0E F2 | 	cmp	local01, #43 wz
15b7c     14 4E 05 A1 |  if_e	add	fp, #20
15b80     A7 22 02 AB |  if_e	rdlong	local03, fp
15b84     14 4E 85 A1 |  if_e	sub	fp, #20
15b88     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15b8c     3C 00 90 5D |  if_ne	jmp	#LR__1732
15b90     00 1E 06 F6 | 	mov	local01, #0
15b94     A7 12 02 FB | 	rdlong	arg01, fp
15b98     30 B8 BF FD | 	call	#_convertstring
15b9c     FD 20 02 F6 | 	mov	local02, result1
15ba0     0C 4E 05 F1 | 	add	fp, #12
15ba4     A7 12 02 FB | 	rdlong	arg01, fp
15ba8     0C 4E 85 F1 | 	sub	fp, #12
15bac     1C B8 BF FD | 	call	#_convertstring
15bb0     FD 14 02 F6 | 	mov	arg02, result1
15bb4     10 13 02 F6 | 	mov	arg01, local02
15bb8     70 AF B0 FD | 	call	#__system___string_cmp
15bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
15bc0     00 1E 26 56 |  if_ne	not	local01, #0
15bc4     A7 1E 62 FC | 	wrlong	local01, fp
15bc8     04 00 90 FD | 	jmp	#LR__1733
15bcc                 | LR__1732
15bcc     A7 00 68 FC | 	wrlong	#0, fp
15bd0                 | LR__1733
15bd0     08 4E 05 F1 | 	add	fp, #8
15bd4     A7 38 68 FC | 	wrlong	#28, fp
15bd8     08 4E 85 F1 | 	sub	fp, #8
15bdc     A7 12 02 F6 | 	mov	arg01, fp
15be0     D8 56 BF FD | 	call	#_push
15be4     A7 F0 03 F6 | 	mov	ptra, fp
15be8     B2 00 A0 FD | 	call	#popregs_
15bec                 | _do_ne_ret
15bec     2D 00 64 FD | 	ret
15bf0                 | 
15bf0                 | ' 
15bf0                 | ' 
15bf0                 | ' 
15bf0                 | ' function converttoint (t1 as expr_result) as integer 
15bf0                 | _converttoint
15bf0     02 4A 05 F6 | 	mov	COUNT_, #2
15bf4     A8 00 A0 FD | 	call	#pushregs_
15bf8     09 1F 02 F6 | 	mov	local01, arg01
15bfc                 | ' 
15bfc                 | ' select case t1.result_type
15bfc     08 1E 06 F1 | 	add	local01, #8
15c00     0F 21 02 FB | 	rdlong	local02, local01
15c04     08 1E 86 F1 | 	sub	local01, #8
15c08     1C 20 0E F2 | 	cmp	local02, #28 wz
15c0c     2C 00 90 AD |  if_e	jmp	#LR__1740
15c10     1D 20 0E F2 | 	cmp	local02, #29 wz
15c14     2C 00 90 AD |  if_e	jmp	#LR__1741
15c18     1E 20 0E F2 | 	cmp	local02, #30 wz
15c1c     2C 00 90 AD |  if_e	jmp	#LR__1742
15c20     1F 20 0E F2 | 	cmp	local02, #31 wz
15c24     34 00 90 AD |  if_e	jmp	#LR__1743
15c28     2B 20 0E F2 | 	cmp	local02, #43 wz
15c2c     44 00 90 AD |  if_e	jmp	#LR__1744
15c30     2C 20 0E F2 | 	cmp	local02, #44 wz
15c34     5C 00 90 AD |  if_e	jmp	#LR__1745
15c38     60 00 90 FD | 	jmp	#LR__1746
15c3c                 | LR__1740
15c3c     0F FB 01 FB | 	rdlong	result1, local01
15c40     5C 00 90 FD | 	jmp	#LR__1747
15c44                 | LR__1741
15c44     0F FB 01 FB | 	rdlong	result1, local01
15c48     54 00 90 FD | 	jmp	#LR__1747
15c4c                 | LR__1742
15c4c     0F 13 02 FB | 	rdlong	arg01, local01
15c50     01 14 06 F6 | 	mov	arg02, #1
15c54     28 DF B0 FD | 	call	#__system___float_tointeger
15c58     44 00 90 FD | 	jmp	#LR__1747
15c5c                 | LR__1743
15c5c     0F 13 02 FB | 	rdlong	arg01, local01
15c60     60 E2 B0 FD | 	call	#__system____builtin_atof
15c64     FD 12 02 F6 | 	mov	arg01, result1
15c68     01 14 06 F6 | 	mov	arg02, #1
15c6c     10 DF B0 FD | 	call	#__system___float_tointeger
15c70     2C 00 90 FD | 	jmp	#LR__1747
15c74                 | LR__1744
15c74     0F 13 02 FB | 	rdlong	arg01, local01
15c78     50 B7 BF FD | 	call	#_convertstring
15c7c     FD 12 02 F6 | 	mov	arg01, result1
15c80     40 E2 B0 FD | 	call	#__system____builtin_atof
15c84     FD 12 02 F6 | 	mov	arg01, result1
15c88     01 14 06 F6 | 	mov	arg02, #1
15c8c     F0 DE B0 FD | 	call	#__system___float_tointeger
15c90     0C 00 90 FD | 	jmp	#LR__1747
15c94                 | LR__1745
15c94     0F FB 01 FB | 	rdlong	result1, local01
15c98     04 00 90 FD | 	jmp	#LR__1747
15c9c                 | LR__1746
15c9c     00 FA 05 F6 | 	mov	result1, #0
15ca0                 | LR__1747
15ca0     A7 F0 03 F6 | 	mov	ptra, fp
15ca4     B2 00 A0 FD | 	call	#popregs_
15ca8                 | _converttoint_ret
15ca8     2D 00 64 FD | 	ret
15cac                 | 
15cac                 | ' 
15cac                 | ' function converttofloat (t1 as expr_result) as single
15cac                 | _converttofloat
15cac     03 4A 05 F6 | 	mov	COUNT_, #3
15cb0     A8 00 A0 FD | 	call	#pushregs_
15cb4     09 1F 02 F6 | 	mov	local01, arg01
15cb8                 | ' 
15cb8                 | ' select case t1.result_type
15cb8     08 1E 06 F1 | 	add	local01, #8
15cbc     0F 21 02 FB | 	rdlong	local02, local01
15cc0     08 1E 86 F1 | 	sub	local01, #8
15cc4     1C 20 0E F2 | 	cmp	local02, #28 wz
15cc8     24 00 90 AD |  if_e	jmp	#LR__1750
15ccc     1D 20 0E F2 | 	cmp	local02, #29 wz
15cd0     38 00 90 AD |  if_e	jmp	#LR__1751
15cd4     1E 20 0E F2 | 	cmp	local02, #30 wz
15cd8     3C 00 90 AD |  if_e	jmp	#LR__1752
15cdc     1F 20 0E F2 | 	cmp	local02, #31 wz
15ce0     3C 00 90 AD |  if_e	jmp	#LR__1753
15ce4     2B 20 0E F2 | 	cmp	local02, #43 wz
15ce8     40 00 90 AD |  if_e	jmp	#LR__1754
15cec     50 00 90 FD | 	jmp	#LR__1755
15cf0                 | LR__1750
15cf0     0F 13 02 FB | 	rdlong	arg01, local01
15cf4     09 13 52 F6 | 	abs	arg01, arg01 wc
15cf8     1F 22 C6 C9 |  if_b	decod	local03, #31
15cfc     00 22 06 36 |  if_ae	mov	local03, #0
15d00     B0 D5 B0 FD | 	call	#__system___float_fromuns
15d04     11 FB 61 F5 | 	xor	result1, local03
15d08     38 00 90 FD | 	jmp	#LR__1756
15d0c                 | LR__1751
15d0c     0F 13 02 FB | 	rdlong	arg01, local01
15d10     A0 D5 B0 FD | 	call	#__system___float_fromuns
15d14     2C 00 90 FD | 	jmp	#LR__1756
15d18                 | LR__1752
15d18     0F FB 01 FB | 	rdlong	result1, local01
15d1c     24 00 90 FD | 	jmp	#LR__1756
15d20                 | LR__1753
15d20     0F 13 02 FB | 	rdlong	arg01, local01
15d24     9C E1 B0 FD | 	call	#__system____builtin_atof
15d28     18 00 90 FD | 	jmp	#LR__1756
15d2c                 | LR__1754
15d2c     0F 13 02 FB | 	rdlong	arg01, local01
15d30     98 B6 BF FD | 	call	#_convertstring
15d34     FD 12 02 F6 | 	mov	arg01, result1
15d38     88 E1 B0 FD | 	call	#__system____builtin_atof
15d3c     04 00 90 FD | 	jmp	#LR__1756
15d40                 | LR__1755
15d40     00 FA 05 F6 | 	mov	result1, #0
15d44                 | LR__1756
15d44     A7 F0 03 F6 | 	mov	ptra, fp
15d48     B2 00 A0 FD | 	call	#popregs_
15d4c                 | _converttofloat_ret
15d4c     2D 00 64 FD | 	ret
15d50                 | 
15d50                 | ' 
15d50                 | ' sub do_rnd
15d50                 | _do_rnd
15d50     01 4A 05 F6 | 	mov	COUNT_, #1
15d54     A8 00 A0 FD | 	call	#pushregs_
15d58     10 F0 07 F1 | 	add	ptra, #16
15d5c     4A 00 00 FF 
15d60     80 E4 05 F1 | 	add	objptr, ##38016
15d64     F2 1E 02 FB | 	rdlong	local01, objptr
15d68     0F 17 02 F6 | 	mov	arg03, local01
15d6c     01 16 66 F0 | 	shl	arg03, #1
15d70     0F 17 02 F1 | 	add	arg03, local01
15d74     02 16 66 F0 | 	shl	arg03, #2
15d78     03 00 00 FF 
15d7c     04 E4 85 F1 | 	sub	objptr, ##1540
15d80     F2 16 02 F1 | 	add	arg03, objptr
15d84     0B 17 02 FB | 	rdlong	arg03, arg03
15d88     0C 4E 05 F1 | 	add	fp, #12
15d8c     A7 16 62 FC | 	wrlong	arg03, fp
15d90                 | ' 
15d90                 | ' numpar=compiledline(lineptr_e).result.uresult
15d90                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15d90     0C 4E 85 F1 | 	sub	fp, #12
15d94     02 16 16 F2 | 	cmp	arg03, #2 wc
15d98     47 00 00 FF 
15d9c     7C E4 85 F1 | 	sub	objptr, ##36476
15da0     3C 00 90 CD |  if_b	jmp	#LR__1760
15da4     00 12 06 F6 | 	mov	arg01, #0
15da8     BC 07 B1 FD | 	call	#__system___getiolock_0540
15dac     FD 12 02 F6 | 	mov	arg01, result1
15db0     50 AD B0 FD | 	call	#__system___lockmem
15db4     85 01 00 FF 
15db8     04 15 06 F6 | 	mov	arg02, ##@LR__5483
15dbc     00 12 06 F6 | 	mov	arg01, #0
15dc0     00 16 06 F6 | 	mov	arg03, #0
15dc4     30 BA B0 FD | 	call	#__system___basic_print_string
15dc8     00 12 06 F6 | 	mov	arg01, #0
15dcc     98 07 B1 FD | 	call	#__system___getiolock_0540
15dd0     FD 00 68 FC | 	wrlong	#0, result1
15dd4     27 12 06 F6 | 	mov	arg01, #39
15dd8     90 77 B0 FD | 	call	#_printerror
15ddc     2C 01 90 FD | 	jmp	#LR__1767
15de0                 | LR__1760
15de0                 | ' if numpar=0 then
15de0     0C 4E 05 F1 | 	add	fp, #12
15de4     A7 FE 09 FB | 	rdlong	result3, fp wz
15de8     0C 4E 85 F1 | 	sub	fp, #12
15dec     20 00 90 5D |  if_ne	jmp	#LR__1761
15df0     08 4E 05 F1 | 	add	fp, #8
15df4     A7 3A 68 FC | 	wrlong	#29, fp
15df8     08 4E 85 F1 | 	sub	fp, #8
15dfc     1B FA 61 FD | 	getrnd	result1
15e00     A7 FA 61 FC | 	wrlong	result1, fp
15e04     A7 12 02 F6 | 	mov	arg01, fp
15e08     B0 54 BF FD | 	call	#_push
15e0c     FC 00 90 FD | 	jmp	#LR__1766
15e10                 | LR__1761
15e10     10 54 BF FD | 	call	#_pop
15e14     A7 FA 61 FC | 	wrlong	result1, fp
15e18     04 4E 05 F1 | 	add	fp, #4
15e1c     A7 FC 61 FC | 	wrlong	result2, fp
15e20     04 4E 05 F1 | 	add	fp, #4
15e24     A7 FE 61 FC | 	wrlong	result3, fp
15e28                 | '   t1=pop()
15e28                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15e28     08 4E 85 F1 | 	sub	fp, #8
15e2c     1C FE 0D F2 | 	cmp	result3, #28 wz
15e30     08 4E 05 51 |  if_ne	add	fp, #8
15e34     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15e38     08 4E 85 51 |  if_ne	sub	fp, #8
15e3c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15e40     2C 00 90 5D |  if_ne	jmp	#LR__1762
15e44     1B FA 61 FD | 	getrnd	result1
15e48     A7 1E 02 FB | 	rdlong	local01, fp
15e4c     0F FB 11 FD | 	qdiv	result1, local01
15e50     A7 12 02 F6 | 	mov	arg01, fp
15e54     19 1E 62 FD | 	getqy	local01
15e58     A7 1E 62 FC | 	wrlong	local01, fp
15e5c     08 4E 05 F1 | 	add	fp, #8
15e60     A7 3A 68 FC | 	wrlong	#29, fp
15e64     08 4E 85 F1 | 	sub	fp, #8
15e68     50 54 BF FD | 	call	#_push
15e6c     9C 00 90 FD | 	jmp	#LR__1765
15e70                 | LR__1762
15e70     08 4E 05 F1 | 	add	fp, #8
15e74     A7 1E 02 FB | 	rdlong	local01, fp
15e78     08 4E 85 F1 | 	sub	fp, #8
15e7c     1E 1E 0E F2 | 	cmp	local01, #30 wz
15e80     48 00 90 5D |  if_ne	jmp	#LR__1763
15e84     A7 12 02 FB | 	rdlong	arg01, fp
15e88     00 C0 24 FF 
15e8c     00 14 06 F6 | 	mov	arg02, ##1233125376
15e90     28 DA B0 FD | 	call	#__system___float_div
15e94     FD 1E 02 F6 | 	mov	local01, result1
15e98     1B 12 62 FD | 	getrnd	arg01
15e9c     74 13 06 F4 | 	bitl	arg01, #372
15ea0     10 D4 B0 FD | 	call	#__system___float_fromuns
15ea4     FD 14 02 F6 | 	mov	arg02, result1
15ea8     0F 13 02 F6 | 	mov	arg01, local01
15eac     08 D8 B0 FD | 	call	#__system___float_mul
15eb0     A7 FA 61 FC | 	wrlong	result1, fp
15eb4     08 4E 05 F1 | 	add	fp, #8
15eb8     A7 3C 68 FC | 	wrlong	#30, fp
15ebc     08 4E 85 F1 | 	sub	fp, #8
15ec0     A7 12 02 F6 | 	mov	arg01, fp
15ec4     F4 53 BF FD | 	call	#_push
15ec8     40 00 90 FD | 	jmp	#LR__1764
15ecc                 | LR__1763
15ecc                 | '     print "rnd: "; : printerror(40) 
15ecc     00 12 06 F6 | 	mov	arg01, #0
15ed0     94 06 B1 FD | 	call	#__system___getiolock_0540
15ed4     FD 12 02 F6 | 	mov	arg01, result1
15ed8     28 AC B0 FD | 	call	#__system___lockmem
15edc     85 01 00 FF 
15ee0     0A 15 06 F6 | 	mov	arg02, ##@LR__5484
15ee4     00 12 06 F6 | 	mov	arg01, #0
15ee8     00 16 06 F6 | 	mov	arg03, #0
15eec     08 B9 B0 FD | 	call	#__system___basic_print_string
15ef0     00 12 06 F6 | 	mov	arg01, #0
15ef4     70 06 B1 FD | 	call	#__system___getiolock_0540
15ef8     FD 00 68 FC | 	wrlong	#0, result1
15efc     28 12 06 F6 | 	mov	arg01, #40
15f00     68 76 B0 FD | 	call	#_printerror
15f04     A7 12 02 F6 | 	mov	arg01, fp
15f08     B0 53 BF FD | 	call	#_push
15f0c                 | LR__1764
15f0c                 | LR__1765
15f0c                 | LR__1766
15f0c                 | LR__1767
15f0c     A7 F0 03 F6 | 	mov	ptra, fp
15f10     B2 00 A0 FD | 	call	#popregs_
15f14                 | _do_rnd_ret
15f14     2D 00 64 FD | 	ret
15f18                 | 
15f18                 | ' 
15f18                 | ' sub do_getenvsustain
15f18                 | _do_getenvsustain
15f18     01 4A 05 F6 | 	mov	COUNT_, #1
15f1c     A8 00 A0 FD | 	call	#pushregs_
15f20     10 F0 07 F1 | 	add	ptra, #16
15f24     4A 00 00 FF 
15f28     80 E4 05 F1 | 	add	objptr, ##38016
15f2c     F2 1E 02 FB | 	rdlong	local01, objptr
15f30     0F 17 02 F6 | 	mov	arg03, local01
15f34     01 16 66 F0 | 	shl	arg03, #1
15f38     0F 17 02 F1 | 	add	arg03, local01
15f3c     02 16 66 F0 | 	shl	arg03, #2
15f40     03 00 00 FF 
15f44     04 E4 85 F1 | 	sub	objptr, ##1540
15f48     F2 16 02 F1 | 	add	arg03, objptr
15f4c     0B 17 02 FB | 	rdlong	arg03, arg03
15f50     0C 4E 05 F1 | 	add	fp, #12
15f54     A7 16 62 FC | 	wrlong	arg03, fp
15f58                 | ' 
15f58                 | ' numpar=compiledline(lineptr_e).result.uresult
15f58                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
15f58     0C 4E 85 F1 | 	sub	fp, #12
15f5c     02 16 16 F2 | 	cmp	arg03, #2 wc
15f60     47 00 00 FF 
15f64     7C E4 85 F1 | 	sub	objptr, ##36476
15f68     0C 4E 05 C1 |  if_b	add	fp, #12
15f6c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15f70     0C 4E 85 C1 |  if_b	sub	fp, #12
15f74     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15f78     00 12 06 F6 | 	mov	arg01, #0
15f7c     E8 05 B1 FD | 	call	#__system___getiolock_0540
15f80     FD 12 02 F6 | 	mov	arg01, result1
15f84     7C AB B0 FD | 	call	#__system___lockmem
15f88     85 01 00 FF 
15f8c     10 15 06 F6 | 	mov	arg02, ##@LR__5485
15f90     00 12 06 F6 | 	mov	arg01, #0
15f94     00 16 06 F6 | 	mov	arg03, #0
15f98     5C B8 B0 FD | 	call	#__system___basic_print_string
15f9c     00 12 06 F6 | 	mov	arg01, #0
15fa0     C4 05 B1 FD | 	call	#__system___getiolock_0540
15fa4     FD 00 68 FC | 	wrlong	#0, result1
15fa8     27 12 06 F6 | 	mov	arg01, #39
15fac     BC 75 B0 FD | 	call	#_printerror
15fb0     64 00 90 FD | 	jmp	#LR__1771
15fb4                 | LR__1770
15fb4     6C 52 BF FD | 	call	#_pop
15fb8     FD 1E 02 F6 | 	mov	local01, result1
15fbc     FE 16 02 F6 | 	mov	arg03, result2
15fc0     A7 1E 62 FC | 	wrlong	local01, fp
15fc4     04 4E 05 F1 | 	add	fp, #4
15fc8     A7 16 62 FC | 	wrlong	arg03, fp
15fcc     04 4E 05 F1 | 	add	fp, #4
15fd0     A7 FE 61 FC | 	wrlong	result3, fp
15fd4     08 4E 85 F1 | 	sub	fp, #8
15fd8     A7 12 02 F6 | 	mov	arg01, fp
15fdc     10 FC BF FD | 	call	#_converttoint
15fe0     FD 1E 02 F6 | 	mov	local01, result1
15fe4     01 1E 66 F0 | 	shl	local01, #1
15fe8     51 00 00 FF 
15fec     C4 E5 05 F1 | 	add	objptr, ##41924
15ff0     F2 1E 02 F1 | 	add	local01, objptr
15ff4     0F 1F E2 FA | 	rdword	local01, local01
15ff8     A7 1E 62 FC | 	wrlong	local01, fp
15ffc     08 4E 05 F1 | 	add	fp, #8
16000     A7 38 68 FC | 	wrlong	#28, fp
16004     08 4E 85 F1 | 	sub	fp, #8
16008     A7 12 02 F6 | 	mov	arg01, fp
1600c     51 00 00 FF 
16010     C4 E5 85 F1 | 	sub	objptr, ##41924
16014     A4 52 BF FD | 	call	#_push
16018                 | LR__1771
16018     A7 F0 03 F6 | 	mov	ptra, fp
1601c     B2 00 A0 FD | 	call	#popregs_
16020                 | _do_getenvsustain_ret
16020     2D 00 64 FD | 	ret
16024                 | 
16024                 | ' 
16024                 | ' sub do_sin
16024                 | _do_sin
16024     01 4A 05 F6 | 	mov	COUNT_, #1
16028     A8 00 A0 FD | 	call	#pushregs_
1602c     10 F0 07 F1 | 	add	ptra, #16
16030     4A 00 00 FF 
16034     80 E4 05 F1 | 	add	objptr, ##38016
16038     F2 1E 02 FB | 	rdlong	local01, objptr
1603c     0F 17 02 F6 | 	mov	arg03, local01
16040     01 16 66 F0 | 	shl	arg03, #1
16044     0F 17 02 F1 | 	add	arg03, local01
16048     02 16 66 F0 | 	shl	arg03, #2
1604c     03 00 00 FF 
16050     04 E4 85 F1 | 	sub	objptr, ##1540
16054     F2 16 02 F1 | 	add	arg03, objptr
16058     0B 17 02 FB | 	rdlong	arg03, arg03
1605c     0C 4E 05 F1 | 	add	fp, #12
16060     A7 16 62 FC | 	wrlong	arg03, fp
16064                 | ' 
16064                 | ' numpar=compiledline(lineptr_e).result.uresult
16064                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
16064     0C 4E 85 F1 | 	sub	fp, #12
16068     02 16 16 F2 | 	cmp	arg03, #2 wc
1606c     47 00 00 FF 
16070     7C E4 85 F1 | 	sub	objptr, ##36476
16074     0C 4E 05 C1 |  if_b	add	fp, #12
16078     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1607c     0C 4E 85 C1 |  if_b	sub	fp, #12
16080     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
16084     00 12 06 F6 | 	mov	arg01, #0
16088     DC 04 B1 FD | 	call	#__system___getiolock_0540
1608c     FD 12 02 F6 | 	mov	arg01, result1
16090     70 AA B0 FD | 	call	#__system___lockmem
16094     85 01 00 FF 
16098     20 15 06 F6 | 	mov	arg02, ##@LR__5486
1609c     00 12 06 F6 | 	mov	arg01, #0
160a0     00 16 06 F6 | 	mov	arg03, #0
160a4     50 B7 B0 FD | 	call	#__system___basic_print_string
160a8     00 12 06 F6 | 	mov	arg01, #0
160ac     B8 04 B1 FD | 	call	#__system___getiolock_0540
160b0     FD 00 68 FC | 	wrlong	#0, result1
160b4     27 12 06 F6 | 	mov	arg01, #39
160b8     B0 74 B0 FD | 	call	#_printerror
160bc     64 00 90 FD | 	jmp	#LR__1781
160c0                 | LR__1780
160c0     60 51 BF FD | 	call	#_pop
160c4     A7 FA 61 FC | 	wrlong	result1, fp
160c8     04 4E 05 F1 | 	add	fp, #4
160cc     A7 FC 61 FC | 	wrlong	result2, fp
160d0     04 4E 05 F1 | 	add	fp, #4
160d4     A7 FE 61 FC | 	wrlong	result3, fp
160d8     08 4E 85 F1 | 	sub	fp, #8
160dc     51 00 00 FF 
160e0     B8 E5 05 F1 | 	add	objptr, ##41912
160e4     F2 1E 02 FB | 	rdlong	local01, objptr
160e8     51 00 00 FF 
160ec     B8 E5 85 F1 | 	sub	objptr, ##41912
160f0     A7 12 02 F6 | 	mov	arg01, fp
160f4     B4 FB BF FD | 	call	#_converttofloat
160f8     FD 14 02 F6 | 	mov	arg02, result1
160fc     0F 13 02 F6 | 	mov	arg01, local01
16100     B4 D5 B0 FD | 	call	#__system___float_mul
16104     FD 12 02 F6 | 	mov	arg01, result1
16108     0C DF B0 FD | 	call	#__system____builtin_sinf
1610c     A7 FA 61 FC | 	wrlong	result1, fp
16110     08 4E 05 F1 | 	add	fp, #8
16114     A7 3C 68 FC | 	wrlong	#30, fp
16118     08 4E 85 F1 | 	sub	fp, #8
1611c     A7 12 02 F6 | 	mov	arg01, fp
16120     98 51 BF FD | 	call	#_push
16124                 | LR__1781
16124     A7 F0 03 F6 | 	mov	ptra, fp
16128     B2 00 A0 FD | 	call	#popregs_
1612c                 | _do_sin_ret
1612c     2D 00 64 FD | 	ret
16130                 | 
16130                 | ' 
16130                 | ' 
16130                 | ' sub do_mid
16130                 | _do_mid
16130     00 4A 05 F6 | 	mov	COUNT_, #0
16134     A8 00 A0 FD | 	call	#pushregs_
16138     18 F0 07 F1 | 	add	ptra, #24
1613c     4A 00 00 FF 
16140     80 E4 05 F1 | 	add	objptr, ##38016
16144     F2 16 02 FB | 	rdlong	arg03, objptr
16148     0B 15 02 F6 | 	mov	arg02, arg03
1614c     01 14 66 F0 | 	shl	arg02, #1
16150     0B 15 02 F1 | 	add	arg02, arg03
16154     02 14 66 F0 | 	shl	arg02, #2
16158     03 00 00 FF 
1615c     04 E4 85 F1 | 	sub	objptr, ##1540
16160     F2 14 02 F1 | 	add	arg02, objptr
16164     0A 17 02 FB | 	rdlong	arg03, arg02
16168     0C 4E 05 F1 | 	add	fp, #12
1616c     A7 16 62 FC | 	wrlong	arg03, fp
16170                 | ' 
16170                 | ' numpar=compiledline(lineptr_e).result.uresult
16170                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
16170     0C 4E 85 F1 | 	sub	fp, #12
16174     03 16 0E F2 | 	cmp	arg03, #3 wz
16178     47 00 00 FF 
1617c     7C E4 85 F1 | 	sub	objptr, ##36476
16180     3C 00 90 AD |  if_e	jmp	#LR__1790
16184     00 12 06 F6 | 	mov	arg01, #0
16188     DC 03 B1 FD | 	call	#__system___getiolock_0540
1618c     FD 12 02 F6 | 	mov	arg01, result1
16190     70 A9 B0 FD | 	call	#__system___lockmem
16194     85 01 00 FF 
16198     26 15 06 F6 | 	mov	arg02, ##@LR__5487
1619c     00 12 06 F6 | 	mov	arg01, #0
161a0     00 16 06 F6 | 	mov	arg03, #0
161a4     50 B6 B0 FD | 	call	#__system___basic_print_string
161a8     00 12 06 F6 | 	mov	arg01, #0
161ac     B8 03 B1 FD | 	call	#__system___getiolock_0540
161b0     FD 00 68 FC | 	wrlong	#0, result1
161b4     27 12 06 F6 | 	mov	arg01, #39
161b8     B0 73 B0 FD | 	call	#_printerror
161bc     28 01 90 FD | 	jmp	#LR__1793
161c0                 | LR__1790
161c0     60 50 BF FD | 	call	#_pop
161c4     FF 16 02 F6 | 	mov	arg03, result3
161c8     A7 FA 61 FC | 	wrlong	result1, fp
161cc     04 4E 05 F1 | 	add	fp, #4
161d0     A7 FC 61 FC | 	wrlong	result2, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 16 62 FC | 	wrlong	arg03, fp
161dc     08 4E 85 F1 | 	sub	fp, #8
161e0     A7 12 02 F6 | 	mov	arg01, fp
161e4     08 FA BF FD | 	call	#_converttoint
161e8     FD 16 02 F6 | 	mov	arg03, result1
161ec     14 4E 05 F1 | 	add	fp, #20
161f0     A7 16 62 FC | 	wrlong	arg03, fp
161f4     14 4E 85 F1 | 	sub	fp, #20
161f8     28 50 BF FD | 	call	#_pop
161fc     FF 16 02 F6 | 	mov	arg03, result3
16200     A7 FA 61 FC | 	wrlong	result1, fp
16204     04 4E 05 F1 | 	add	fp, #4
16208     A7 FC 61 FC | 	wrlong	result2, fp
1620c     04 4E 05 F1 | 	add	fp, #4
16210     A7 16 62 FC | 	wrlong	arg03, fp
16214     08 4E 85 F1 | 	sub	fp, #8
16218     A7 12 02 F6 | 	mov	arg01, fp
1621c     D0 F9 BF FD | 	call	#_converttoint
16220     FD 16 02 F6 | 	mov	arg03, result1
16224     10 4E 05 F1 | 	add	fp, #16
16228     A7 16 62 FC | 	wrlong	arg03, fp
1622c     10 4E 85 F1 | 	sub	fp, #16
16230     F0 4F BF FD | 	call	#_pop
16234     FF 16 02 F6 | 	mov	arg03, result3
16238     A7 FA 61 FC | 	wrlong	result1, fp
1623c     04 4E 05 F1 | 	add	fp, #4
16240     A7 FC 61 FC | 	wrlong	result2, fp
16244     04 4E 05 F1 | 	add	fp, #4
16248     A7 16 62 FC | 	wrlong	arg03, fp
1624c                 | ' t1=pop() : arg2=converttoint(t1)
1624c                 | ' t1=pop() : arg1=converttoint(t1)
1624c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1624c     08 4E 85 F1 | 	sub	fp, #8
16250     2B 16 0E F2 | 	cmp	arg03, #43 wz
16254     18 00 90 5D |  if_ne	jmp	#LR__1791
16258     A7 12 02 FB | 	rdlong	arg01, fp
1625c     6C B1 BF FD | 	call	#_convertstring
16260     A7 FA 61 FC | 	wrlong	result1, fp
16264     08 4E 05 F1 | 	add	fp, #8
16268     A7 3E 68 FC | 	wrlong	#31, fp
1626c     08 4E 85 F1 | 	sub	fp, #8
16270                 | LR__1791
16270                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
16270     08 4E 05 F1 | 	add	fp, #8
16274     A7 16 02 FB | 	rdlong	arg03, fp
16278     08 4E 85 F1 | 	sub	fp, #8
1627c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16280     3C 00 90 AD |  if_e	jmp	#LR__1792
16284     00 12 06 F6 | 	mov	arg01, #0
16288     DC 02 B1 FD | 	call	#__system___getiolock_0540
1628c     FD 12 02 F6 | 	mov	arg01, result1
16290     70 A8 B0 FD | 	call	#__system___lockmem
16294     85 01 00 FF 
16298     2D 15 06 F6 | 	mov	arg02, ##@LR__5488
1629c     00 12 06 F6 | 	mov	arg01, #0
162a0     00 16 06 F6 | 	mov	arg03, #0
162a4     50 B5 B0 FD | 	call	#__system___basic_print_string
162a8     00 12 06 F6 | 	mov	arg01, #0
162ac     B8 02 B1 FD | 	call	#__system___getiolock_0540
162b0     FD 00 68 FC | 	wrlong	#0, result1
162b4     0F 12 06 F6 | 	mov	arg01, #15
162b8     B0 72 B0 FD | 	call	#_printerror
162bc     28 00 90 FD | 	jmp	#LR__1793
162c0                 | LR__1792
162c0     A7 12 02 FB | 	rdlong	arg01, fp
162c4     10 4E 05 F1 | 	add	fp, #16
162c8     A7 14 02 FB | 	rdlong	arg02, fp
162cc     04 4E 05 F1 | 	add	fp, #4
162d0     A7 16 02 FB | 	rdlong	arg03, fp
162d4     14 4E 85 F1 | 	sub	fp, #20
162d8     BC C9 B0 FD | 	call	#__system__Mid_S
162dc     A7 FA 61 FC | 	wrlong	result1, fp
162e0     A7 12 02 F6 | 	mov	arg01, fp
162e4     D4 4F BF FD | 	call	#_push
162e8                 | LR__1793
162e8     A7 F0 03 F6 | 	mov	ptra, fp
162ec     B2 00 A0 FD | 	call	#popregs_
162f0                 | _do_mid_ret
162f0     2D 00 64 FD | 	ret
162f4                 | 
162f4                 | ' 
162f4                 | ' sub do_right
162f4                 | _do_right
162f4     00 4A 05 F6 | 	mov	COUNT_, #0
162f8     A8 00 A0 FD | 	call	#pushregs_
162fc     14 F0 07 F1 | 	add	ptra, #20
16300     4A 00 00 FF 
16304     80 E4 05 F1 | 	add	objptr, ##38016
16308     F2 16 02 FB | 	rdlong	arg03, objptr
1630c     0B 15 02 F6 | 	mov	arg02, arg03
16310     01 14 66 F0 | 	shl	arg02, #1
16314     0B 15 02 F1 | 	add	arg02, arg03
16318     02 14 66 F0 | 	shl	arg02, #2
1631c     03 00 00 FF 
16320     04 E4 85 F1 | 	sub	objptr, ##1540
16324     F2 14 02 F1 | 	add	arg02, objptr
16328     0A 17 02 FB | 	rdlong	arg03, arg02
1632c     0C 4E 05 F1 | 	add	fp, #12
16330     A7 16 62 FC | 	wrlong	arg03, fp
16334                 | ' 
16334                 | ' numpar=compiledline(lineptr_e).result.uresult
16334                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
16334     0C 4E 85 F1 | 	sub	fp, #12
16338     02 16 0E F2 | 	cmp	arg03, #2 wz
1633c     47 00 00 FF 
16340     7C E4 85 F1 | 	sub	objptr, ##36476
16344     3C 00 90 AD |  if_e	jmp	#LR__1800
16348     00 12 06 F6 | 	mov	arg01, #0
1634c     18 02 B1 FD | 	call	#__system___getiolock_0540
16350     FD 12 02 F6 | 	mov	arg01, result1
16354     AC A7 B0 FD | 	call	#__system___lockmem
16358     85 01 00 FF 
1635c     34 15 06 F6 | 	mov	arg02, ##@LR__5489
16360     00 12 06 F6 | 	mov	arg01, #0
16364     00 16 06 F6 | 	mov	arg03, #0
16368     8C B4 B0 FD | 	call	#__system___basic_print_string
1636c     00 12 06 F6 | 	mov	arg01, #0
16370     F4 01 B1 FD | 	call	#__system___getiolock_0540
16374     FD 00 68 FC | 	wrlong	#0, result1
16378     27 12 06 F6 | 	mov	arg01, #39
1637c     EC 71 B0 FD | 	call	#_printerror
16380     E8 00 90 FD | 	jmp	#LR__1803
16384                 | LR__1800
16384     9C 4E BF FD | 	call	#_pop
16388     FF 16 02 F6 | 	mov	arg03, result3
1638c     A7 FA 61 FC | 	wrlong	result1, fp
16390     04 4E 05 F1 | 	add	fp, #4
16394     A7 FC 61 FC | 	wrlong	result2, fp
16398     04 4E 05 F1 | 	add	fp, #4
1639c     A7 16 62 FC | 	wrlong	arg03, fp
163a0     08 4E 85 F1 | 	sub	fp, #8
163a4     A7 12 02 F6 | 	mov	arg01, fp
163a8     44 F8 BF FD | 	call	#_converttoint
163ac     FD 16 02 F6 | 	mov	arg03, result1
163b0     10 4E 05 F1 | 	add	fp, #16
163b4     A7 16 62 FC | 	wrlong	arg03, fp
163b8     10 4E 85 F1 | 	sub	fp, #16
163bc     64 4E BF FD | 	call	#_pop
163c0     FF 16 02 F6 | 	mov	arg03, result3
163c4     A7 FA 61 FC | 	wrlong	result1, fp
163c8     04 4E 05 F1 | 	add	fp, #4
163cc     A7 FC 61 FC | 	wrlong	result2, fp
163d0     04 4E 05 F1 | 	add	fp, #4
163d4     A7 16 62 FC | 	wrlong	arg03, fp
163d8                 | ' t1=pop() : arg=converttoint(t1)
163d8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
163d8     08 4E 85 F1 | 	sub	fp, #8
163dc     2B 16 0E F2 | 	cmp	arg03, #43 wz
163e0     18 00 90 5D |  if_ne	jmp	#LR__1801
163e4     A7 12 02 FB | 	rdlong	arg01, fp
163e8     E0 AF BF FD | 	call	#_convertstring
163ec     A7 FA 61 FC | 	wrlong	result1, fp
163f0     08 4E 05 F1 | 	add	fp, #8
163f4     A7 3E 68 FC | 	wrlong	#31, fp
163f8     08 4E 85 F1 | 	sub	fp, #8
163fc                 | LR__1801
163fc                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
163fc     08 4E 05 F1 | 	add	fp, #8
16400     A7 16 02 FB | 	rdlong	arg03, fp
16404     08 4E 85 F1 | 	sub	fp, #8
16408     1F 16 0E F2 | 	cmp	arg03, #31 wz
1640c     3C 00 90 AD |  if_e	jmp	#LR__1802
16410     00 12 06 F6 | 	mov	arg01, #0
16414     50 01 B1 FD | 	call	#__system___getiolock_0540
16418     FD 12 02 F6 | 	mov	arg01, result1
1641c     E4 A6 B0 FD | 	call	#__system___lockmem
16420     85 01 00 FF 
16424     3D 15 06 F6 | 	mov	arg02, ##@LR__5490
16428     00 12 06 F6 | 	mov	arg01, #0
1642c     00 16 06 F6 | 	mov	arg03, #0
16430     C4 B3 B0 FD | 	call	#__system___basic_print_string
16434     00 12 06 F6 | 	mov	arg01, #0
16438     2C 01 B1 FD | 	call	#__system___getiolock_0540
1643c     FD 00 68 FC | 	wrlong	#0, result1
16440     0F 12 06 F6 | 	mov	arg01, #15
16444     24 71 B0 FD | 	call	#_printerror
16448     20 00 90 FD | 	jmp	#LR__1803
1644c                 | LR__1802
1644c     A7 12 02 FB | 	rdlong	arg01, fp
16450     10 4E 05 F1 | 	add	fp, #16
16454     A7 14 02 FB | 	rdlong	arg02, fp
16458     10 4E 85 F1 | 	sub	fp, #16
1645c     A8 C7 B0 FD | 	call	#__system__Right_S
16460     A7 FA 61 FC | 	wrlong	result1, fp
16464     A7 12 02 F6 | 	mov	arg01, fp
16468     50 4E BF FD | 	call	#_push
1646c                 | LR__1803
1646c     A7 F0 03 F6 | 	mov	ptra, fp
16470     B2 00 A0 FD | 	call	#popregs_
16474                 | _do_right_ret
16474     2D 00 64 FD | 	ret
16478                 | 
16478                 | ' 
16478                 | ' sub do_left
16478                 | _do_left
16478     00 4A 05 F6 | 	mov	COUNT_, #0
1647c     A8 00 A0 FD | 	call	#pushregs_
16480     14 F0 07 F1 | 	add	ptra, #20
16484     4A 00 00 FF 
16488     80 E4 05 F1 | 	add	objptr, ##38016
1648c     F2 16 02 FB | 	rdlong	arg03, objptr
16490     0B 15 02 F6 | 	mov	arg02, arg03
16494     01 14 66 F0 | 	shl	arg02, #1
16498     0B 15 02 F1 | 	add	arg02, arg03
1649c     02 14 66 F0 | 	shl	arg02, #2
164a0     03 00 00 FF 
164a4     04 E4 85 F1 | 	sub	objptr, ##1540
164a8     F2 14 02 F1 | 	add	arg02, objptr
164ac     0A 17 02 FB | 	rdlong	arg03, arg02
164b0     0C 4E 05 F1 | 	add	fp, #12
164b4     A7 16 62 FC | 	wrlong	arg03, fp
164b8                 | ' 
164b8                 | ' numpar=compiledline(lineptr_e).result.uresult
164b8                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
164b8     0C 4E 85 F1 | 	sub	fp, #12
164bc     02 16 0E F2 | 	cmp	arg03, #2 wz
164c0     47 00 00 FF 
164c4     7C E4 85 F1 | 	sub	objptr, ##36476
164c8     3C 00 90 AD |  if_e	jmp	#LR__1810
164cc     00 12 06 F6 | 	mov	arg01, #0
164d0     94 00 B1 FD | 	call	#__system___getiolock_0540
164d4     FD 12 02 F6 | 	mov	arg01, result1
164d8     28 A6 B0 FD | 	call	#__system___lockmem
164dc     85 01 00 FF 
164e0     46 15 06 F6 | 	mov	arg02, ##@LR__5491
164e4     00 12 06 F6 | 	mov	arg01, #0
164e8     00 16 06 F6 | 	mov	arg03, #0
164ec     08 B3 B0 FD | 	call	#__system___basic_print_string
164f0     00 12 06 F6 | 	mov	arg01, #0
164f4     70 00 B1 FD | 	call	#__system___getiolock_0540
164f8     FD 00 68 FC | 	wrlong	#0, result1
164fc     27 12 06 F6 | 	mov	arg01, #39
16500     68 70 B0 FD | 	call	#_printerror
16504     E8 00 90 FD | 	jmp	#LR__1813
16508                 | LR__1810
16508     18 4D BF FD | 	call	#_pop
1650c     FF 16 02 F6 | 	mov	arg03, result3
16510     A7 FA 61 FC | 	wrlong	result1, fp
16514     04 4E 05 F1 | 	add	fp, #4
16518     A7 FC 61 FC | 	wrlong	result2, fp
1651c     04 4E 05 F1 | 	add	fp, #4
16520     A7 16 62 FC | 	wrlong	arg03, fp
16524     08 4E 85 F1 | 	sub	fp, #8
16528     A7 12 02 F6 | 	mov	arg01, fp
1652c     C0 F6 BF FD | 	call	#_converttoint
16530     FD 16 02 F6 | 	mov	arg03, result1
16534     10 4E 05 F1 | 	add	fp, #16
16538     A7 16 62 FC | 	wrlong	arg03, fp
1653c     10 4E 85 F1 | 	sub	fp, #16
16540     E0 4C BF FD | 	call	#_pop
16544     FF 16 02 F6 | 	mov	arg03, result3
16548     A7 FA 61 FC | 	wrlong	result1, fp
1654c     04 4E 05 F1 | 	add	fp, #4
16550     A7 FC 61 FC | 	wrlong	result2, fp
16554     04 4E 05 F1 | 	add	fp, #4
16558     A7 16 62 FC | 	wrlong	arg03, fp
1655c                 | ' t1=pop() : arg=converttoint(t1)
1655c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1655c     08 4E 85 F1 | 	sub	fp, #8
16560     2B 16 0E F2 | 	cmp	arg03, #43 wz
16564     18 00 90 5D |  if_ne	jmp	#LR__1811
16568     A7 12 02 FB | 	rdlong	arg01, fp
1656c     5C AE BF FD | 	call	#_convertstring
16570     A7 FA 61 FC | 	wrlong	result1, fp
16574     08 4E 05 F1 | 	add	fp, #8
16578     A7 3E 68 FC | 	wrlong	#31, fp
1657c     08 4E 85 F1 | 	sub	fp, #8
16580                 | LR__1811
16580                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
16580     08 4E 05 F1 | 	add	fp, #8
16584     A7 16 02 FB | 	rdlong	arg03, fp
16588     08 4E 85 F1 | 	sub	fp, #8
1658c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16590     3C 00 90 AD |  if_e	jmp	#LR__1812
16594     00 12 06 F6 | 	mov	arg01, #0
16598     CC FF B0 FD | 	call	#__system___getiolock_0540
1659c     FD 12 02 F6 | 	mov	arg01, result1
165a0     60 A5 B0 FD | 	call	#__system___lockmem
165a4     85 01 00 FF 
165a8     4E 15 06 F6 | 	mov	arg02, ##@LR__5492
165ac     00 12 06 F6 | 	mov	arg01, #0
165b0     00 16 06 F6 | 	mov	arg03, #0
165b4     40 B2 B0 FD | 	call	#__system___basic_print_string
165b8     00 12 06 F6 | 	mov	arg01, #0
165bc     A8 FF B0 FD | 	call	#__system___getiolock_0540
165c0     FD 00 68 FC | 	wrlong	#0, result1
165c4     0F 12 06 F6 | 	mov	arg01, #15
165c8     A0 6F B0 FD | 	call	#_printerror
165cc     20 00 90 FD | 	jmp	#LR__1813
165d0                 | LR__1812
165d0     A7 12 02 FB | 	rdlong	arg01, fp
165d4     10 4E 05 F1 | 	add	fp, #16
165d8     A7 14 02 FB | 	rdlong	arg02, fp
165dc     10 4E 85 F1 | 	sub	fp, #16
165e0     9C C5 B0 FD | 	call	#__system__Left_S
165e4     A7 FA 61 FC | 	wrlong	result1, fp
165e8     A7 12 02 F6 | 	mov	arg01, fp
165ec     CC 4C BF FD | 	call	#_push
165f0                 | LR__1813
165f0     A7 F0 03 F6 | 	mov	ptra, fp
165f4     B2 00 A0 FD | 	call	#popregs_
165f8                 | _do_left_ret
165f8     2D 00 64 FD | 	ret
165fc                 | 
165fc                 | ' 
165fc                 | ' sub do_asc
165fc                 | _do_asc
165fc     01 4A 05 F6 | 	mov	COUNT_, #1
16600     A8 00 A0 FD | 	call	#pushregs_
16604     14 F0 07 F1 | 	add	ptra, #20
16608     4A 00 00 FF 
1660c     80 E4 05 F1 | 	add	objptr, ##38016
16610     F2 1E 02 FB | 	rdlong	local01, objptr
16614     0F 17 02 F6 | 	mov	arg03, local01
16618     01 16 66 F0 | 	shl	arg03, #1
1661c     0F 17 02 F1 | 	add	arg03, local01
16620     02 16 66 F0 | 	shl	arg03, #2
16624     03 00 00 FF 
16628     04 E4 85 F1 | 	sub	objptr, ##1540
1662c     F2 16 02 F1 | 	add	arg03, objptr
16630     0B 17 02 FB | 	rdlong	arg03, arg03
16634     0C 4E 05 F1 | 	add	fp, #12
16638     A7 16 62 FC | 	wrlong	arg03, fp
1663c                 | ' 
1663c                 | ' numpar=compiledline(lineptr_e).result.uresult
1663c                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
1663c     0C 4E 85 F1 | 	sub	fp, #12
16640     02 16 16 F2 | 	cmp	arg03, #2 wc
16644     47 00 00 FF 
16648     7C E4 85 F1 | 	sub	objptr, ##36476
1664c     0C 4E 05 C1 |  if_b	add	fp, #12
16650     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16654     0C 4E 85 C1 |  if_b	sub	fp, #12
16658     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
1665c     00 12 06 F6 | 	mov	arg01, #0
16660     04 FF B0 FD | 	call	#__system___getiolock_0540
16664     FD 12 02 F6 | 	mov	arg01, result1
16668     98 A4 B0 FD | 	call	#__system___lockmem
1666c     85 01 00 FF 
16670     56 15 06 F6 | 	mov	arg02, ##@LR__5493
16674     00 12 06 F6 | 	mov	arg01, #0
16678     00 16 06 F6 | 	mov	arg03, #0
1667c     78 B1 B0 FD | 	call	#__system___basic_print_string
16680     00 12 06 F6 | 	mov	arg01, #0
16684     E0 FE B0 FD | 	call	#__system___getiolock_0540
16688     FD 00 68 FC | 	wrlong	#0, result1
1668c     27 12 06 F6 | 	mov	arg01, #39
16690     D8 6E B0 FD | 	call	#_printerror
16694     B0 00 90 FD | 	jmp	#LR__1823
16698                 | LR__1820
16698     88 4B BF FD | 	call	#_pop
1669c     FF 16 02 F6 | 	mov	arg03, result3
166a0     A7 FA 61 FC | 	wrlong	result1, fp
166a4     04 4E 05 F1 | 	add	fp, #4
166a8     A7 FC 61 FC | 	wrlong	result2, fp
166ac     04 4E 05 F1 | 	add	fp, #4
166b0     A7 16 62 FC | 	wrlong	arg03, fp
166b4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
166b4     08 4E 85 F1 | 	sub	fp, #8
166b8     2B 16 0E F2 | 	cmp	arg03, #43 wz
166bc     18 00 90 5D |  if_ne	jmp	#LR__1821
166c0     A7 12 02 FB | 	rdlong	arg01, fp
166c4     04 AD BF FD | 	call	#_convertstring
166c8     A7 FA 61 FC | 	wrlong	result1, fp
166cc     08 4E 05 F1 | 	add	fp, #8
166d0     A7 3E 68 FC | 	wrlong	#31, fp
166d4     08 4E 85 F1 | 	sub	fp, #8
166d8                 | LR__1821
166d8                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
166d8     08 4E 05 F1 | 	add	fp, #8
166dc     A7 16 02 FB | 	rdlong	arg03, fp
166e0     08 4E 85 F1 | 	sub	fp, #8
166e4     1F 16 0E F2 | 	cmp	arg03, #31 wz
166e8     3C 00 90 AD |  if_e	jmp	#LR__1822
166ec     00 12 06 F6 | 	mov	arg01, #0
166f0     74 FE B0 FD | 	call	#__system___getiolock_0540
166f4     FD 12 02 F6 | 	mov	arg01, result1
166f8     08 A4 B0 FD | 	call	#__system___lockmem
166fc     85 01 00 FF 
16700     5C 15 06 F6 | 	mov	arg02, ##@LR__5494
16704     00 12 06 F6 | 	mov	arg01, #0
16708     00 16 06 F6 | 	mov	arg03, #0
1670c     E8 B0 B0 FD | 	call	#__system___basic_print_string
16710     00 12 06 F6 | 	mov	arg01, #0
16714     50 FE B0 FD | 	call	#__system___getiolock_0540
16718     FD 00 68 FC | 	wrlong	#0, result1
1671c     0F 12 06 F6 | 	mov	arg01, #15
16720     48 6E B0 FD | 	call	#_printerror
16724     20 00 90 FD | 	jmp	#LR__1823
16728                 | LR__1822
16728     A7 1E 02 FB | 	rdlong	local01, fp
1672c     0F 1F C2 FA | 	rdbyte	local01, local01
16730     A7 1E 62 FC | 	wrlong	local01, fp
16734     08 4E 05 F1 | 	add	fp, #8
16738     A7 38 68 FC | 	wrlong	#28, fp
1673c     08 4E 85 F1 | 	sub	fp, #8
16740     A7 12 02 F6 | 	mov	arg01, fp
16744     74 4B BF FD | 	call	#_push
16748                 | LR__1823
16748     A7 F0 03 F6 | 	mov	ptra, fp
1674c     B2 00 A0 FD | 	call	#popregs_
16750                 | _do_asc_ret
16750     2D 00 64 FD | 	ret
16754                 | 
16754                 | ' 
16754                 | ' sub do_len
16754                 | _do_len
16754     02 4A 05 F6 | 	mov	COUNT_, #2
16758     A8 00 A0 FD | 	call	#pushregs_
1675c     14 F0 07 F1 | 	add	ptra, #20
16760     4A 00 00 FF 
16764     80 E4 05 F1 | 	add	objptr, ##38016
16768     F2 1E 02 FB | 	rdlong	local01, objptr
1676c     0F 17 02 F6 | 	mov	arg03, local01
16770     01 16 66 F0 | 	shl	arg03, #1
16774     0F 17 02 F1 | 	add	arg03, local01
16778     02 16 66 F0 | 	shl	arg03, #2
1677c     03 00 00 FF 
16780     04 E4 85 F1 | 	sub	objptr, ##1540
16784     F2 16 02 F1 | 	add	arg03, objptr
16788     0B 17 02 FB | 	rdlong	arg03, arg03
1678c     0C 4E 05 F1 | 	add	fp, #12
16790     A7 16 62 FC | 	wrlong	arg03, fp
16794                 | ' 
16794                 | ' numpar=compiledline(lineptr_e).result.uresult
16794                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
16794     0C 4E 85 F1 | 	sub	fp, #12
16798     02 16 16 F2 | 	cmp	arg03, #2 wc
1679c     47 00 00 FF 
167a0     7C E4 85 F1 | 	sub	objptr, ##36476
167a4     0C 4E 05 C1 |  if_b	add	fp, #12
167a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
167ac     0C 4E 85 C1 |  if_b	sub	fp, #12
167b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
167b4     00 12 06 F6 | 	mov	arg01, #0
167b8     AC FD B0 FD | 	call	#__system___getiolock_0540
167bc     FD 12 02 F6 | 	mov	arg01, result1
167c0     40 A3 B0 FD | 	call	#__system___lockmem
167c4     85 01 00 FF 
167c8     62 15 06 F6 | 	mov	arg02, ##@LR__5495
167cc     00 12 06 F6 | 	mov	arg01, #0
167d0     00 16 06 F6 | 	mov	arg03, #0
167d4     20 B0 B0 FD | 	call	#__system___basic_print_string
167d8     00 12 06 F6 | 	mov	arg01, #0
167dc     88 FD B0 FD | 	call	#__system___getiolock_0540
167e0     FD 00 68 FC | 	wrlong	#0, result1
167e4     27 12 06 F6 | 	mov	arg01, #39
167e8     80 6D B0 FD | 	call	#_printerror
167ec     C4 00 90 FD | 	jmp	#LR__1835
167f0                 | LR__1830
167f0     30 4A BF FD | 	call	#_pop
167f4     FF 16 02 F6 | 	mov	arg03, result3
167f8     A7 FA 61 FC | 	wrlong	result1, fp
167fc     04 4E 05 F1 | 	add	fp, #4
16800     A7 FC 61 FC | 	wrlong	result2, fp
16804     04 4E 05 F1 | 	add	fp, #4
16808     A7 16 62 FC | 	wrlong	arg03, fp
1680c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1680c     08 4E 85 F1 | 	sub	fp, #8
16810     2B 16 0E F2 | 	cmp	arg03, #43 wz
16814     18 00 90 5D |  if_ne	jmp	#LR__1831
16818     A7 12 02 FB | 	rdlong	arg01, fp
1681c     AC AB BF FD | 	call	#_convertstring
16820     A7 FA 61 FC | 	wrlong	result1, fp
16824     08 4E 05 F1 | 	add	fp, #8
16828     A7 3E 68 FC | 	wrlong	#31, fp
1682c     08 4E 85 F1 | 	sub	fp, #8
16830                 | LR__1831
16830                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
16830     08 4E 05 F1 | 	add	fp, #8
16834     A7 16 02 FB | 	rdlong	arg03, fp
16838     08 4E 85 F1 | 	sub	fp, #8
1683c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16840     3C 00 90 AD |  if_e	jmp	#LR__1832
16844     00 12 06 F6 | 	mov	arg01, #0
16848     1C FD B0 FD | 	call	#__system___getiolock_0540
1684c     FD 12 02 F6 | 	mov	arg01, result1
16850     B0 A2 B0 FD | 	call	#__system___lockmem
16854     85 01 00 FF 
16858     68 15 06 F6 | 	mov	arg02, ##@LR__5496
1685c     00 12 06 F6 | 	mov	arg01, #0
16860     00 16 06 F6 | 	mov	arg03, #0
16864     90 AF B0 FD | 	call	#__system___basic_print_string
16868     00 12 06 F6 | 	mov	arg01, #0
1686c     F8 FC B0 FD | 	call	#__system___getiolock_0540
16870     FD 00 68 FC | 	wrlong	#0, result1
16874     0F 12 06 F6 | 	mov	arg01, #15
16878     F0 6C B0 FD | 	call	#_printerror
1687c     34 00 90 FD | 	jmp	#LR__1835
16880                 | LR__1832
16880     A7 12 02 FB | 	rdlong	arg01, fp
16884     09 21 02 F6 | 	mov	local02, arg01
16888     97 06 48 FB | 	callpa	#(@LR__1834-@LR__1833)>>2,fcache_load_ptr_
1688c                 | LR__1833
1688c     10 FB C9 FA | 	rdbyte	result1, local02 wz
16890     01 20 06 51 |  if_ne	add	local02, #1
16894     F4 FF 9F 5D |  if_ne	jmp	#LR__1833
16898                 | LR__1834
16898     09 21 82 F1 | 	sub	local02, arg01
1689c     A7 20 62 FC | 	wrlong	local02, fp
168a0     08 4E 05 F1 | 	add	fp, #8
168a4     A7 38 68 FC | 	wrlong	#28, fp
168a8     08 4E 85 F1 | 	sub	fp, #8
168ac     A7 12 02 F6 | 	mov	arg01, fp
168b0     08 4A BF FD | 	call	#_push
168b4                 | LR__1835
168b4     A7 F0 03 F6 | 	mov	ptra, fp
168b8     B2 00 A0 FD | 	call	#popregs_
168bc                 | _do_len_ret
168bc     2D 00 64 FD | 	ret
168c0                 | 
168c0                 | ' 
168c0                 | ' sub do_chr
168c0                 | _do_chr
168c0     01 4A 05 F6 | 	mov	COUNT_, #1
168c4     A8 00 A0 FD | 	call	#pushregs_
168c8     14 F0 07 F1 | 	add	ptra, #20
168cc     4A 00 00 FF 
168d0     80 E4 05 F1 | 	add	objptr, ##38016
168d4     F2 1E 02 FB | 	rdlong	local01, objptr
168d8     0F 17 02 F6 | 	mov	arg03, local01
168dc     01 16 66 F0 | 	shl	arg03, #1
168e0     0F 17 02 F1 | 	add	arg03, local01
168e4     02 16 66 F0 | 	shl	arg03, #2
168e8     03 00 00 FF 
168ec     04 E4 85 F1 | 	sub	objptr, ##1540
168f0     F2 16 02 F1 | 	add	arg03, objptr
168f4     0B 17 02 FB | 	rdlong	arg03, arg03
168f8     0C 4E 05 F1 | 	add	fp, #12
168fc     A7 16 62 FC | 	wrlong	arg03, fp
16900                 | ' 
16900                 | ' numpar=compiledline(lineptr_e).result.uresult
16900                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
16900     0C 4E 85 F1 | 	sub	fp, #12
16904     02 16 16 F2 | 	cmp	arg03, #2 wc
16908     47 00 00 FF 
1690c     7C E4 85 F1 | 	sub	objptr, ##36476
16910     0C 4E 05 C1 |  if_b	add	fp, #12
16914     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16918     0C 4E 85 C1 |  if_b	sub	fp, #12
1691c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
16920     00 12 06 F6 | 	mov	arg01, #0
16924     40 FC B0 FD | 	call	#__system___getiolock_0540
16928     FD 12 02 F6 | 	mov	arg01, result1
1692c     D4 A1 B0 FD | 	call	#__system___lockmem
16930     85 01 00 FF 
16934     6E 15 06 F6 | 	mov	arg02, ##@LR__5497
16938     00 12 06 F6 | 	mov	arg01, #0
1693c     00 16 06 F6 | 	mov	arg03, #0
16940     B4 AE B0 FD | 	call	#__system___basic_print_string
16944     00 12 06 F6 | 	mov	arg01, #0
16948     1C FC B0 FD | 	call	#__system___getiolock_0540
1694c     FD 00 68 FC | 	wrlong	#0, result1
16950     27 12 06 F6 | 	mov	arg01, #39
16954     14 6C B0 FD | 	call	#_printerror
16958     54 00 90 FD | 	jmp	#LR__1841
1695c                 | LR__1840
1695c     C4 48 BF FD | 	call	#_pop
16960     FF 1E 02 F6 | 	mov	local01, result3
16964     A7 FA 61 FC | 	wrlong	result1, fp
16968     04 4E 05 F1 | 	add	fp, #4
1696c     A7 FC 61 FC | 	wrlong	result2, fp
16970     04 4E 05 F1 | 	add	fp, #4
16974     A7 1E 62 FC | 	wrlong	local01, fp
16978     08 4E 85 F1 | 	sub	fp, #8
1697c     A7 12 02 F6 | 	mov	arg01, fp
16980     6C F2 BF FD | 	call	#_converttoint
16984     10 4E 05 F1 | 	add	fp, #16
16988     A7 FA 61 FC | 	wrlong	result1, fp
1698c     FD 12 02 F6 | 	mov	arg01, result1
16990     10 4E 85 F1 | 	sub	fp, #16
16994     AC C3 B0 FD | 	call	#__system__Chr_S
16998     A7 FA 61 FC | 	wrlong	result1, fp
1699c     08 4E 05 F1 | 	add	fp, #8
169a0     A7 3E 68 FC | 	wrlong	#31, fp
169a4     08 4E 85 F1 | 	sub	fp, #8
169a8     A7 12 02 F6 | 	mov	arg01, fp
169ac     0C 49 BF FD | 	call	#_push
169b0                 | LR__1841
169b0     A7 F0 03 F6 | 	mov	ptra, fp
169b4     B2 00 A0 FD | 	call	#popregs_
169b8                 | _do_chr_ret
169b8     2D 00 64 FD | 	ret
169bc                 | 
169bc                 | ' 
169bc                 | ' sub do_val
169bc                 | _do_val
169bc     03 4A 05 F6 | 	mov	COUNT_, #3
169c0     A8 00 A0 FD | 	call	#pushregs_
169c4     20 F0 07 F1 | 	add	ptra, #32
169c8     4A 00 00 FF 
169cc     80 E4 05 F1 | 	add	objptr, ##38016
169d0     F2 16 02 FB | 	rdlong	arg03, objptr
169d4     0B 1F 02 F6 | 	mov	local01, arg03
169d8     01 1E 66 F0 | 	shl	local01, #1
169dc     0B 1F 02 F1 | 	add	local01, arg03
169e0     02 1E 66 F0 | 	shl	local01, #2
169e4     03 00 00 FF 
169e8     04 E4 85 F1 | 	sub	objptr, ##1540
169ec     F2 1E 02 F1 | 	add	local01, objptr
169f0     0F 17 02 FB | 	rdlong	arg03, local01
169f4     0C 4E 05 F1 | 	add	fp, #12
169f8     A7 16 62 FC | 	wrlong	arg03, fp
169fc                 | ' 
169fc                 | ' numpar=compiledline(lineptr_e).result.uresult
169fc                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
169fc     0C 4E 85 F1 | 	sub	fp, #12
16a00     02 16 16 F2 | 	cmp	arg03, #2 wc
16a04     47 00 00 FF 
16a08     7C E4 85 F1 | 	sub	objptr, ##36476
16a0c     0C 4E 05 C1 |  if_b	add	fp, #12
16a10     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16a14     0C 4E 85 C1 |  if_b	sub	fp, #12
16a18     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
16a1c     00 12 06 F6 | 	mov	arg01, #0
16a20     44 FB B0 FD | 	call	#__system___getiolock_0540
16a24     FD 12 02 F6 | 	mov	arg01, result1
16a28     D8 A0 B0 FD | 	call	#__system___lockmem
16a2c     85 01 00 FF 
16a30     75 15 06 F6 | 	mov	arg02, ##@LR__5498
16a34     00 12 06 F6 | 	mov	arg01, #0
16a38     00 16 06 F6 | 	mov	arg03, #0
16a3c     B8 AD B0 FD | 	call	#__system___basic_print_string
16a40     00 12 06 F6 | 	mov	arg01, #0
16a44     20 FB B0 FD | 	call	#__system___getiolock_0540
16a48     FD 00 68 FC | 	wrlong	#0, result1
16a4c     27 12 06 F6 | 	mov	arg01, #39
16a50     18 6B B0 FD | 	call	#_printerror
16a54     5C 02 90 FD | 	jmp	#LR__1863
16a58                 | LR__1850
16a58     C8 47 BF FD | 	call	#_pop
16a5c     FF 16 02 F6 | 	mov	arg03, result3
16a60     A7 FA 61 FC | 	wrlong	result1, fp
16a64     04 4E 05 F1 | 	add	fp, #4
16a68     A7 FC 61 FC | 	wrlong	result2, fp
16a6c     04 4E 05 F1 | 	add	fp, #4
16a70     A7 16 62 FC | 	wrlong	arg03, fp
16a74                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16a74     08 4E 85 F1 | 	sub	fp, #8
16a78     2B 16 0E F2 | 	cmp	arg03, #43 wz
16a7c     18 00 90 5D |  if_ne	jmp	#LR__1851
16a80     A7 12 02 FB | 	rdlong	arg01, fp
16a84     44 A9 BF FD | 	call	#_convertstring
16a88     A7 FA 61 FC | 	wrlong	result1, fp
16a8c     08 4E 05 F1 | 	add	fp, #8
16a90     A7 3E 68 FC | 	wrlong	#31, fp
16a94     08 4E 85 F1 | 	sub	fp, #8
16a98                 | LR__1851
16a98                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
16a98     08 4E 05 F1 | 	add	fp, #8
16a9c     A7 16 02 FB | 	rdlong	arg03, fp
16aa0     08 4E 85 F1 | 	sub	fp, #8
16aa4     1F 16 0E F2 | 	cmp	arg03, #31 wz
16aa8     3C 00 90 AD |  if_e	jmp	#LR__1852
16aac     00 12 06 F6 | 	mov	arg01, #0
16ab0     B4 FA B0 FD | 	call	#__system___getiolock_0540
16ab4     FD 12 02 F6 | 	mov	arg01, result1
16ab8     48 A0 B0 FD | 	call	#__system___lockmem
16abc     85 01 00 FF 
16ac0     7B 15 06 F6 | 	mov	arg02, ##@LR__5499
16ac4     00 12 06 F6 | 	mov	arg01, #0
16ac8     00 16 06 F6 | 	mov	arg03, #0
16acc     28 AD B0 FD | 	call	#__system___basic_print_string
16ad0     00 12 06 F6 | 	mov	arg01, #0
16ad4     90 FA B0 FD | 	call	#__system___getiolock_0540
16ad8     FD 00 68 FC | 	wrlong	#0, result1
16adc     0F 12 06 F6 | 	mov	arg01, #15
16ae0     88 6A B0 FD | 	call	#_printerror
16ae4     CC 01 90 FD | 	jmp	#LR__1863
16ae8                 | LR__1852
16ae8                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16ae8     A7 12 02 FB | 	rdlong	arg01, fp
16aec     01 14 06 F6 | 	mov	arg02, #1
16af0     8C C0 B0 FD | 	call	#__system__Left_S
16af4     FD 12 02 F6 | 	mov	arg01, result1
16af8     85 01 00 FF 
16afc     81 15 06 F6 | 	mov	arg02, ##@LR__5500
16b00     28 A0 B0 FD | 	call	#__system___string_cmp
16b04     00 FA 0D F2 | 	cmp	result1, #0 wz
16b08     48 00 90 5D |  if_ne	jmp	#LR__1855
16b0c     85 01 00 FF 
16b10     83 1F 06 F6 | 	mov	local01, ##@LR__5501
16b14     A7 16 02 FB | 	rdlong	arg03, fp
16b18     0B 13 02 F6 | 	mov	arg01, arg03
16b1c     09 21 02 F6 | 	mov	local02, arg01
16b20     97 06 48 FB | 	callpa	#(@LR__1854-@LR__1853)>>2,fcache_load_ptr_
16b24                 | LR__1853
16b24     10 FB C9 FA | 	rdbyte	result1, local02 wz
16b28     01 20 06 51 |  if_ne	add	local02, #1
16b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__1853
16b30                 | LR__1854
16b30     09 21 82 F1 | 	sub	local02, arg01
16b34     10 15 02 F6 | 	mov	arg02, local02
16b38     01 14 86 F1 | 	sub	arg02, #1
16b3c     0B 13 02 F6 | 	mov	arg01, arg03
16b40     C4 C0 B0 FD | 	call	#__system__Right_S
16b44     FD 14 02 F6 | 	mov	arg02, result1
16b48     0F 13 02 F6 | 	mov	arg01, local01
16b4c     10 A0 B0 FD | 	call	#__system___string_concat
16b50     A7 FA 61 FC | 	wrlong	result1, fp
16b54                 | LR__1855
16b54                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16b54     A7 12 02 FB | 	rdlong	arg01, fp
16b58     01 14 06 F6 | 	mov	arg02, #1
16b5c     20 C0 B0 FD | 	call	#__system__Left_S
16b60     FD 12 02 F6 | 	mov	arg01, result1
16b64     85 01 00 FF 
16b68     86 15 06 F6 | 	mov	arg02, ##@LR__5502
16b6c     BC 9F B0 FD | 	call	#__system___string_cmp
16b70     00 FA 0D F2 | 	cmp	result1, #0 wz
16b74     48 00 90 5D |  if_ne	jmp	#LR__1858
16b78     85 01 00 FF 
16b7c     88 1F 06 F6 | 	mov	local01, ##@LR__5503
16b80     A7 16 02 FB | 	rdlong	arg03, fp
16b84     0B 13 02 F6 | 	mov	arg01, arg03
16b88     09 21 02 F6 | 	mov	local02, arg01
16b8c     97 06 48 FB | 	callpa	#(@LR__1857-@LR__1856)>>2,fcache_load_ptr_
16b90                 | LR__1856
16b90     10 FB C9 FA | 	rdbyte	result1, local02 wz
16b94     01 20 06 51 |  if_ne	add	local02, #1
16b98     F4 FF 9F 5D |  if_ne	jmp	#LR__1856
16b9c                 | LR__1857
16b9c     09 21 82 F1 | 	sub	local02, arg01
16ba0     10 15 02 F6 | 	mov	arg02, local02
16ba4     01 14 86 F1 | 	sub	arg02, #1
16ba8     0B 13 02 F6 | 	mov	arg01, arg03
16bac     58 C0 B0 FD | 	call	#__system__Right_S
16bb0     FD 14 02 F6 | 	mov	arg02, result1
16bb4     0F 13 02 F6 | 	mov	arg01, local01
16bb8     A4 9F B0 FD | 	call	#__system___string_concat
16bbc     A7 FA 61 FC | 	wrlong	result1, fp
16bc0                 | LR__1858
16bc0     A7 12 02 FB | 	rdlong	arg01, fp
16bc4     FC D2 B0 FD | 	call	#__system____builtin_atof
16bc8     1C 4E 05 F1 | 	add	fp, #28
16bcc     A7 FA 61 FC | 	wrlong	result1, fp
16bd0     1C 4E 85 F1 | 	sub	fp, #28
16bd4     A7 12 02 FB | 	rdlong	arg01, fp
16bd8     00 14 06 F6 | 	mov	arg02, #0
16bdc     50 D1 B0 FD | 	call	#__system____builtin_atoi
16be0     18 4E 05 F1 | 	add	fp, #24
16be4     A7 FA 61 FC | 	wrlong	result1, fp
16be8                 | ' fval=val(t1.result.sresult)
16be8                 | ' ival=val%(t1.result.sresult)
16be8                 | ' if fval=ival then
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 1E 02 FB | 	rdlong	local01, fp
16bf0     1C 4E 85 F1 | 	sub	fp, #28
16bf4     FD 12 52 F6 | 	abs	arg01, result1 wc
16bf8     1F 22 C6 C9 |  if_b	decod	local03, #31
16bfc     00 22 06 36 |  if_ae	mov	local03, #0
16c00     B0 C6 B0 FD | 	call	#__system___float_fromuns
16c04     11 FB 61 F5 | 	xor	result1, local03
16c08     FD 14 02 F6 | 	mov	arg02, result1
16c0c     0F 13 02 F6 | 	mov	arg01, local01
16c10     01 16 06 F6 | 	mov	arg03, #1
16c14     D4 CE B0 FD | 	call	#__system___float_cmp
16c18     00 FA 0D F2 | 	cmp	result1, #0 wz
16c1c     20 00 90 5D |  if_ne	jmp	#LR__1859
16c20     18 4E 05 F1 | 	add	fp, #24
16c24     A7 1E 02 FB | 	rdlong	local01, fp
16c28     18 4E 85 F1 | 	sub	fp, #24
16c2c     A7 1E 62 FC | 	wrlong	local01, fp
16c30     08 4E 05 F1 | 	add	fp, #8
16c34     A7 38 68 FC | 	wrlong	#28, fp
16c38     08 4E 85 F1 | 	sub	fp, #8
16c3c     6C 00 90 FD | 	jmp	#LR__1862
16c40                 | LR__1859
16c40                 | '   if fval=0 andalso ival<>0 then
16c40     1C 4E 05 F1 | 	add	fp, #28
16c44     A7 12 02 FB | 	rdlong	arg01, fp
16c48     1C 4E 85 F1 | 	sub	fp, #28
16c4c     00 14 06 F6 | 	mov	arg02, #0
16c50     01 16 06 F6 | 	mov	arg03, #1
16c54     94 CE B0 FD | 	call	#__system___float_cmp
16c58     00 FA 0D F2 | 	cmp	result1, #0 wz
16c5c     30 00 90 5D |  if_ne	jmp	#LR__1860
16c60     18 4E 05 F1 | 	add	fp, #24
16c64     A7 1E 0A FB | 	rdlong	local01, fp wz
16c68     18 4E 85 F1 | 	sub	fp, #24
16c6c     20 00 90 AD |  if_e	jmp	#LR__1860
16c70     18 4E 05 F1 | 	add	fp, #24
16c74     A7 1E 02 FB | 	rdlong	local01, fp
16c78     18 4E 85 F1 | 	sub	fp, #24
16c7c     A7 1E 62 FC | 	wrlong	local01, fp
16c80     08 4E 05 F1 | 	add	fp, #8
16c84     A7 38 68 FC | 	wrlong	#28, fp
16c88     08 4E 85 F1 | 	sub	fp, #8
16c8c     1C 00 90 FD | 	jmp	#LR__1861
16c90                 | LR__1860
16c90     1C 4E 05 F1 | 	add	fp, #28
16c94     A7 1E 02 FB | 	rdlong	local01, fp
16c98     1C 4E 85 F1 | 	sub	fp, #28
16c9c     A7 1E 62 FC | 	wrlong	local01, fp
16ca0     08 4E 05 F1 | 	add	fp, #8
16ca4     A7 3C 68 FC | 	wrlong	#30, fp
16ca8     08 4E 85 F1 | 	sub	fp, #8
16cac                 | LR__1861
16cac                 | LR__1862
16cac     A7 12 02 F6 | 	mov	arg01, fp
16cb0     08 46 BF FD | 	call	#_push
16cb4                 | LR__1863
16cb4     A7 F0 03 F6 | 	mov	ptra, fp
16cb8     B2 00 A0 FD | 	call	#popregs_
16cbc                 | _do_val_ret
16cbc     2D 00 64 FD | 	ret
16cc0                 | 
16cc0                 | ' 
16cc0                 | ' 
16cc0                 | ' sub do_hex
16cc0                 | _do_hex
16cc0     01 4A 05 F6 | 	mov	COUNT_, #1
16cc4     A8 00 A0 FD | 	call	#pushregs_
16cc8     18 F0 07 F1 | 	add	ptra, #24
16ccc     4A 00 00 FF 
16cd0     80 E4 05 F1 | 	add	objptr, ##38016
16cd4     F2 1E 02 FB | 	rdlong	local01, objptr
16cd8     0F 17 02 F6 | 	mov	arg03, local01
16cdc     01 16 66 F0 | 	shl	arg03, #1
16ce0     0F 17 02 F1 | 	add	arg03, local01
16ce4     02 16 66 F0 | 	shl	arg03, #2
16ce8     03 00 00 FF 
16cec     04 E4 85 F1 | 	sub	objptr, ##1540
16cf0     F2 16 02 F1 | 	add	arg03, objptr
16cf4     0B 17 02 FB | 	rdlong	arg03, arg03
16cf8     0C 4E 05 F1 | 	add	fp, #12
16cfc     A7 16 62 FC | 	wrlong	arg03, fp
16d00                 | ' 
16d00                 | ' numpar=compiledline(lineptr_e).result.uresult
16d00                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
16d00     0C 4E 85 F1 | 	sub	fp, #12
16d04     03 16 16 F2 | 	cmp	arg03, #3 wc
16d08     47 00 00 FF 
16d0c     7C E4 85 F1 | 	sub	objptr, ##36476
16d10     0C 4E 05 C1 |  if_b	add	fp, #12
16d14     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16d18     0C 4E 85 C1 |  if_b	sub	fp, #12
16d1c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
16d20     00 12 06 F6 | 	mov	arg01, #0
16d24     40 F8 B0 FD | 	call	#__system___getiolock_0540
16d28     FD 12 02 F6 | 	mov	arg01, result1
16d2c     D4 9D B0 FD | 	call	#__system___lockmem
16d30     85 01 00 FF 
16d34     8B 15 06 F6 | 	mov	arg02, ##@LR__5504
16d38     00 12 06 F6 | 	mov	arg01, #0
16d3c     00 16 06 F6 | 	mov	arg03, #0
16d40     B4 AA B0 FD | 	call	#__system___basic_print_string
16d44     00 12 06 F6 | 	mov	arg01, #0
16d48     1C F8 B0 FD | 	call	#__system___getiolock_0540
16d4c     FD 00 68 FC | 	wrlong	#0, result1
16d50     27 12 06 F6 | 	mov	arg01, #39
16d54     14 68 B0 FD | 	call	#_printerror
16d58     B8 00 90 FD | 	jmp	#LR__1873
16d5c                 | LR__1870
16d5c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16d5c     0C 4E 05 F1 | 	add	fp, #12
16d60     A7 1E 02 FB | 	rdlong	local01, fp
16d64     0C 4E 85 F1 | 	sub	fp, #12
16d68     02 1E 0E F2 | 	cmp	local01, #2 wz
16d6c     38 00 90 5D |  if_ne	jmp	#LR__1871
16d70     B0 44 BF FD | 	call	#_pop
16d74     FF 1E 02 F6 | 	mov	local01, result3
16d78     A7 FA 61 FC | 	wrlong	result1, fp
16d7c     04 4E 05 F1 | 	add	fp, #4
16d80     A7 FC 61 FC | 	wrlong	result2, fp
16d84     04 4E 05 F1 | 	add	fp, #4
16d88     A7 1E 62 FC | 	wrlong	local01, fp
16d8c     08 4E 85 F1 | 	sub	fp, #8
16d90     A7 12 02 F6 | 	mov	arg01, fp
16d94     58 EE BF FD | 	call	#_converttoint
16d98     14 4E 05 F1 | 	add	fp, #20
16d9c     A7 FA 61 FC | 	wrlong	result1, fp
16da0     14 4E 85 F1 | 	sub	fp, #20
16da4     0C 00 90 FD | 	jmp	#LR__1872
16da8                 | LR__1871
16da8     14 4E 05 F1 | 	add	fp, #20
16dac     A7 10 68 FC | 	wrlong	#8, fp
16db0     14 4E 85 F1 | 	sub	fp, #20
16db4                 | LR__1872
16db4     6C 44 BF FD | 	call	#_pop
16db8     FF 1E 02 F6 | 	mov	local01, result3
16dbc     A7 FA 61 FC | 	wrlong	result1, fp
16dc0     04 4E 05 F1 | 	add	fp, #4
16dc4     A7 FC 61 FC | 	wrlong	result2, fp
16dc8     04 4E 05 F1 | 	add	fp, #4
16dcc     A7 1E 62 FC | 	wrlong	local01, fp
16dd0     08 4E 85 F1 | 	sub	fp, #8
16dd4     A7 12 02 F6 | 	mov	arg01, fp
16dd8     14 EE BF FD | 	call	#_converttoint
16ddc     10 4E 05 F1 | 	add	fp, #16
16de0     A7 FA 61 FC | 	wrlong	result1, fp
16de4     FD 12 02 F6 | 	mov	arg01, result1
16de8     04 4E 05 F1 | 	add	fp, #4
16dec     A7 14 02 FB | 	rdlong	arg02, fp
16df0     14 4E 85 F1 | 	sub	fp, #20
16df4     10 16 06 F6 | 	mov	arg03, #16
16df8     D8 BF B0 FD | 	call	#__system__Number_S
16dfc     A7 FA 61 FC | 	wrlong	result1, fp
16e00     08 4E 05 F1 | 	add	fp, #8
16e04     A7 3E 68 FC | 	wrlong	#31, fp
16e08     08 4E 85 F1 | 	sub	fp, #8
16e0c     A7 12 02 F6 | 	mov	arg01, fp
16e10     A8 44 BF FD | 	call	#_push
16e14                 | LR__1873
16e14     A7 F0 03 F6 | 	mov	ptra, fp
16e18     B2 00 A0 FD | 	call	#popregs_
16e1c                 | _do_hex_ret
16e1c     2D 00 64 FD | 	ret
16e20                 | 
16e20                 | ' 
16e20                 | ' sub do_bin
16e20                 | _do_bin
16e20     01 4A 05 F6 | 	mov	COUNT_, #1
16e24     A8 00 A0 FD | 	call	#pushregs_
16e28     18 F0 07 F1 | 	add	ptra, #24
16e2c     4A 00 00 FF 
16e30     80 E4 05 F1 | 	add	objptr, ##38016
16e34     F2 1E 02 FB | 	rdlong	local01, objptr
16e38     0F 17 02 F6 | 	mov	arg03, local01
16e3c     01 16 66 F0 | 	shl	arg03, #1
16e40     0F 17 02 F1 | 	add	arg03, local01
16e44     02 16 66 F0 | 	shl	arg03, #2
16e48     03 00 00 FF 
16e4c     04 E4 85 F1 | 	sub	objptr, ##1540
16e50     F2 16 02 F1 | 	add	arg03, objptr
16e54     0B 17 02 FB | 	rdlong	arg03, arg03
16e58     0C 4E 05 F1 | 	add	fp, #12
16e5c     A7 16 62 FC | 	wrlong	arg03, fp
16e60                 | ' 
16e60                 | ' numpar=compiledline(lineptr_e).result.uresult
16e60                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16e60     0C 4E 85 F1 | 	sub	fp, #12
16e64     03 16 16 F2 | 	cmp	arg03, #3 wc
16e68     47 00 00 FF 
16e6c     7C E4 85 F1 | 	sub	objptr, ##36476
16e70     0C 4E 05 C1 |  if_b	add	fp, #12
16e74     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16e78     0C 4E 85 C1 |  if_b	sub	fp, #12
16e7c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
16e80     00 12 06 F6 | 	mov	arg01, #0
16e84     E0 F6 B0 FD | 	call	#__system___getiolock_0540
16e88     FD 12 02 F6 | 	mov	arg01, result1
16e8c     74 9C B0 FD | 	call	#__system___lockmem
16e90     85 01 00 FF 
16e94     92 15 06 F6 | 	mov	arg02, ##@LR__5505
16e98     00 12 06 F6 | 	mov	arg01, #0
16e9c     00 16 06 F6 | 	mov	arg03, #0
16ea0     54 A9 B0 FD | 	call	#__system___basic_print_string
16ea4     00 12 06 F6 | 	mov	arg01, #0
16ea8     BC F6 B0 FD | 	call	#__system___getiolock_0540
16eac     FD 00 68 FC | 	wrlong	#0, result1
16eb0     27 12 06 F6 | 	mov	arg01, #39
16eb4     B4 66 B0 FD | 	call	#_printerror
16eb8     B8 00 90 FD | 	jmp	#LR__1883
16ebc                 | LR__1880
16ebc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16ebc     0C 4E 05 F1 | 	add	fp, #12
16ec0     A7 1E 02 FB | 	rdlong	local01, fp
16ec4     0C 4E 85 F1 | 	sub	fp, #12
16ec8     02 1E 0E F2 | 	cmp	local01, #2 wz
16ecc     38 00 90 5D |  if_ne	jmp	#LR__1881
16ed0     50 43 BF FD | 	call	#_pop
16ed4     FF 1E 02 F6 | 	mov	local01, result3
16ed8     A7 FA 61 FC | 	wrlong	result1, fp
16edc     04 4E 05 F1 | 	add	fp, #4
16ee0     A7 FC 61 FC | 	wrlong	result2, fp
16ee4     04 4E 05 F1 | 	add	fp, #4
16ee8     A7 1E 62 FC | 	wrlong	local01, fp
16eec     08 4E 85 F1 | 	sub	fp, #8
16ef0     A7 12 02 F6 | 	mov	arg01, fp
16ef4     F8 EC BF FD | 	call	#_converttoint
16ef8     14 4E 05 F1 | 	add	fp, #20
16efc     A7 FA 61 FC | 	wrlong	result1, fp
16f00     14 4E 85 F1 | 	sub	fp, #20
16f04     0C 00 90 FD | 	jmp	#LR__1882
16f08                 | LR__1881
16f08     14 4E 05 F1 | 	add	fp, #20
16f0c     A7 00 68 FC | 	wrlong	#0, fp
16f10     14 4E 85 F1 | 	sub	fp, #20
16f14                 | LR__1882
16f14     0C 43 BF FD | 	call	#_pop
16f18     FF 1E 02 F6 | 	mov	local01, result3
16f1c     A7 FA 61 FC | 	wrlong	result1, fp
16f20     04 4E 05 F1 | 	add	fp, #4
16f24     A7 FC 61 FC | 	wrlong	result2, fp
16f28     04 4E 05 F1 | 	add	fp, #4
16f2c     A7 1E 62 FC | 	wrlong	local01, fp
16f30     08 4E 85 F1 | 	sub	fp, #8
16f34     A7 12 02 F6 | 	mov	arg01, fp
16f38     B4 EC BF FD | 	call	#_converttoint
16f3c     10 4E 05 F1 | 	add	fp, #16
16f40     A7 FA 61 FC | 	wrlong	result1, fp
16f44     FD 12 02 F6 | 	mov	arg01, result1
16f48     04 4E 05 F1 | 	add	fp, #4
16f4c     A7 14 02 FB | 	rdlong	arg02, fp
16f50     14 4E 85 F1 | 	sub	fp, #20
16f54     02 16 06 F6 | 	mov	arg03, #2
16f58     78 BE B0 FD | 	call	#__system__Number_S
16f5c     A7 FA 61 FC | 	wrlong	result1, fp
16f60     08 4E 05 F1 | 	add	fp, #8
16f64     A7 3E 68 FC | 	wrlong	#31, fp
16f68     08 4E 85 F1 | 	sub	fp, #8
16f6c     A7 12 02 F6 | 	mov	arg01, fp
16f70     48 43 BF FD | 	call	#_push
16f74                 | LR__1883
16f74     A7 F0 03 F6 | 	mov	ptra, fp
16f78     B2 00 A0 FD | 	call	#popregs_
16f7c                 | _do_bin_ret
16f7c     2D 00 64 FD | 	ret
16f80                 | 
16f80                 | ' 
16f80                 | ' sub do_cos
16f80                 | _do_cos
16f80     01 4A 05 F6 | 	mov	COUNT_, #1
16f84     A8 00 A0 FD | 	call	#pushregs_
16f88     10 F0 07 F1 | 	add	ptra, #16
16f8c     4A 00 00 FF 
16f90     80 E4 05 F1 | 	add	objptr, ##38016
16f94     F2 1E 02 FB | 	rdlong	local01, objptr
16f98     0F 17 02 F6 | 	mov	arg03, local01
16f9c     01 16 66 F0 | 	shl	arg03, #1
16fa0     0F 17 02 F1 | 	add	arg03, local01
16fa4     02 16 66 F0 | 	shl	arg03, #2
16fa8     03 00 00 FF 
16fac     04 E4 85 F1 | 	sub	objptr, ##1540
16fb0     F2 16 02 F1 | 	add	arg03, objptr
16fb4     0B 17 02 FB | 	rdlong	arg03, arg03
16fb8     0C 4E 05 F1 | 	add	fp, #12
16fbc     A7 16 62 FC | 	wrlong	arg03, fp
16fc0                 | ' 
16fc0                 | ' numpar=compiledline(lineptr_e).result.uresult
16fc0                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
16fc0     0C 4E 85 F1 | 	sub	fp, #12
16fc4     02 16 16 F2 | 	cmp	arg03, #2 wc
16fc8     47 00 00 FF 
16fcc     7C E4 85 F1 | 	sub	objptr, ##36476
16fd0     0C 4E 05 C1 |  if_b	add	fp, #12
16fd4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16fd8     0C 4E 85 C1 |  if_b	sub	fp, #12
16fdc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16fe0     00 12 06 F6 | 	mov	arg01, #0
16fe4     80 F5 B0 FD | 	call	#__system___getiolock_0540
16fe8     FD 12 02 F6 | 	mov	arg01, result1
16fec     14 9B B0 FD | 	call	#__system___lockmem
16ff0     85 01 00 FF 
16ff4     99 15 06 F6 | 	mov	arg02, ##@LR__5506
16ff8     00 12 06 F6 | 	mov	arg01, #0
16ffc     00 16 06 F6 | 	mov	arg03, #0
17000     F4 A7 B0 FD | 	call	#__system___basic_print_string
17004     00 12 06 F6 | 	mov	arg01, #0
17008     5C F5 B0 FD | 	call	#__system___getiolock_0540
1700c     FD 00 68 FC | 	wrlong	#0, result1
17010     27 12 06 F6 | 	mov	arg01, #39
17014     54 65 B0 FD | 	call	#_printerror
17018     78 00 90 FD | 	jmp	#LR__1891
1701c                 | LR__1890
1701c     04 42 BF FD | 	call	#_pop
17020     A7 FA 61 FC | 	wrlong	result1, fp
17024     04 4E 05 F1 | 	add	fp, #4
17028     A7 FC 61 FC | 	wrlong	result2, fp
1702c     04 4E 05 F1 | 	add	fp, #4
17030     A7 FE 61 FC | 	wrlong	result3, fp
17034     08 4E 85 F1 | 	sub	fp, #8
17038     51 00 00 FF 
1703c     B8 E5 05 F1 | 	add	objptr, ##41912
17040     F2 1E 02 FB | 	rdlong	local01, objptr
17044     51 00 00 FF 
17048     B8 E5 85 F1 | 	sub	objptr, ##41912
1704c     A7 12 02 F6 | 	mov	arg01, fp
17050     58 EC BF FD | 	call	#_converttofloat
17054     FD 14 02 F6 | 	mov	arg02, result1
17058     0F 13 02 F6 | 	mov	arg01, local01
1705c     58 C6 B0 FD | 	call	#__system___float_mul
17060     FD 14 02 F6 | 	mov	arg02, result1
17064     87 E4 1F FF 
17068     DB 13 06 F6 | 	mov	arg01, ##1070141403
1706c     1F 14 E6 F4 | 	bitnot	arg02, #31
17070     74 C2 B0 FD | 	call	#__system___float_add
17074     FD 12 02 F6 | 	mov	arg01, result1
17078     9C CF B0 FD | 	call	#__system____builtin_sinf
1707c     A7 FA 61 FC | 	wrlong	result1, fp
17080     08 4E 05 F1 | 	add	fp, #8
17084     A7 3C 68 FC | 	wrlong	#30, fp
17088     08 4E 85 F1 | 	sub	fp, #8
1708c     A7 12 02 F6 | 	mov	arg01, fp
17090     28 42 BF FD | 	call	#_push
17094                 | LR__1891
17094     A7 F0 03 F6 | 	mov	ptra, fp
17098     B2 00 A0 FD | 	call	#popregs_
1709c                 | _do_cos_ret
1709c     2D 00 64 FD | 	ret
170a0                 | 
170a0                 | ' 
170a0                 | ' sub do_tan
170a0                 | _do_tan
170a0     01 4A 05 F6 | 	mov	COUNT_, #1
170a4     A8 00 A0 FD | 	call	#pushregs_
170a8     10 F0 07 F1 | 	add	ptra, #16
170ac     4A 00 00 FF 
170b0     80 E4 05 F1 | 	add	objptr, ##38016
170b4     F2 1E 02 FB | 	rdlong	local01, objptr
170b8     0F 17 02 F6 | 	mov	arg03, local01
170bc     01 16 66 F0 | 	shl	arg03, #1
170c0     0F 17 02 F1 | 	add	arg03, local01
170c4     02 16 66 F0 | 	shl	arg03, #2
170c8     03 00 00 FF 
170cc     04 E4 85 F1 | 	sub	objptr, ##1540
170d0     F2 16 02 F1 | 	add	arg03, objptr
170d4     0B 17 02 FB | 	rdlong	arg03, arg03
170d8     0C 4E 05 F1 | 	add	fp, #12
170dc     A7 16 62 FC | 	wrlong	arg03, fp
170e0                 | ' 
170e0                 | ' numpar=compiledline(lineptr_e).result.uresult
170e0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
170e0     0C 4E 85 F1 | 	sub	fp, #12
170e4     02 16 16 F2 | 	cmp	arg03, #2 wc
170e8     47 00 00 FF 
170ec     7C E4 85 F1 | 	sub	objptr, ##36476
170f0     0C 4E 05 C1 |  if_b	add	fp, #12
170f4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
170f8     0C 4E 85 C1 |  if_b	sub	fp, #12
170fc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
17100     00 12 06 F6 | 	mov	arg01, #0
17104     60 F4 B0 FD | 	call	#__system___getiolock_0540
17108     FD 12 02 F6 | 	mov	arg01, result1
1710c     F4 99 B0 FD | 	call	#__system___lockmem
17110     85 01 00 FF 
17114     9F 15 06 F6 | 	mov	arg02, ##@LR__5507
17118     00 12 06 F6 | 	mov	arg01, #0
1711c     00 16 06 F6 | 	mov	arg03, #0
17120     D4 A6 B0 FD | 	call	#__system___basic_print_string
17124     00 12 06 F6 | 	mov	arg01, #0
17128     3C F4 B0 FD | 	call	#__system___getiolock_0540
1712c     FD 00 68 FC | 	wrlong	#0, result1
17130     27 12 06 F6 | 	mov	arg01, #39
17134     34 64 B0 FD | 	call	#_printerror
17138     64 00 90 FD | 	jmp	#LR__1901
1713c                 | LR__1900
1713c     E4 40 BF FD | 	call	#_pop
17140     A7 FA 61 FC | 	wrlong	result1, fp
17144     04 4E 05 F1 | 	add	fp, #4
17148     A7 FC 61 FC | 	wrlong	result2, fp
1714c     04 4E 05 F1 | 	add	fp, #4
17150     A7 FE 61 FC | 	wrlong	result3, fp
17154     08 4E 85 F1 | 	sub	fp, #8
17158     51 00 00 FF 
1715c     B8 E5 05 F1 | 	add	objptr, ##41912
17160     F2 1E 02 FB | 	rdlong	local01, objptr
17164     51 00 00 FF 
17168     B8 E5 85 F1 | 	sub	objptr, ##41912
1716c     A7 12 02 F6 | 	mov	arg01, fp
17170     38 EB BF FD | 	call	#_converttofloat
17174     FD 14 02 F6 | 	mov	arg02, result1
17178     0F 13 02 F6 | 	mov	arg01, local01
1717c     38 C5 B0 FD | 	call	#__system___float_mul
17180     FD 12 02 F6 | 	mov	arg01, result1
17184     DC CF B0 FD | 	call	#__system____builtin_tanf
17188     A7 FA 61 FC | 	wrlong	result1, fp
1718c     08 4E 05 F1 | 	add	fp, #8
17190     A7 3C 68 FC | 	wrlong	#30, fp
17194     08 4E 85 F1 | 	sub	fp, #8
17198     A7 12 02 F6 | 	mov	arg01, fp
1719c     1C 41 BF FD | 	call	#_push
171a0                 | LR__1901
171a0     A7 F0 03 F6 | 	mov	ptra, fp
171a4     B2 00 A0 FD | 	call	#popregs_
171a8                 | _do_tan_ret
171a8     2D 00 64 FD | 	ret
171ac                 | 
171ac                 | ' 
171ac                 | ' sub do_asin
171ac                 | _do_asin
171ac     01 4A 05 F6 | 	mov	COUNT_, #1
171b0     A8 00 A0 FD | 	call	#pushregs_
171b4     10 F0 07 F1 | 	add	ptra, #16
171b8     4A 00 00 FF 
171bc     80 E4 05 F1 | 	add	objptr, ##38016
171c0     F2 1E 02 FB | 	rdlong	local01, objptr
171c4     0F 17 02 F6 | 	mov	arg03, local01
171c8     01 16 66 F0 | 	shl	arg03, #1
171cc     0F 17 02 F1 | 	add	arg03, local01
171d0     02 16 66 F0 | 	shl	arg03, #2
171d4     03 00 00 FF 
171d8     04 E4 85 F1 | 	sub	objptr, ##1540
171dc     F2 16 02 F1 | 	add	arg03, objptr
171e0     0B 17 02 FB | 	rdlong	arg03, arg03
171e4     0C 4E 05 F1 | 	add	fp, #12
171e8     A7 16 62 FC | 	wrlong	arg03, fp
171ec                 | ' 
171ec                 | ' numpar=compiledline(lineptr_e).result.uresult
171ec                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
171ec     0C 4E 85 F1 | 	sub	fp, #12
171f0     02 16 16 F2 | 	cmp	arg03, #2 wc
171f4     47 00 00 FF 
171f8     7C E4 85 F1 | 	sub	objptr, ##36476
171fc     0C 4E 05 C1 |  if_b	add	fp, #12
17200     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17204     0C 4E 85 C1 |  if_b	sub	fp, #12
17208     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1910
1720c     00 12 06 F6 | 	mov	arg01, #0
17210     54 F3 B0 FD | 	call	#__system___getiolock_0540
17214     FD 12 02 F6 | 	mov	arg01, result1
17218     E8 98 B0 FD | 	call	#__system___lockmem
1721c     85 01 00 FF 
17220     A5 15 06 F6 | 	mov	arg02, ##@LR__5508
17224     00 12 06 F6 | 	mov	arg01, #0
17228     00 16 06 F6 | 	mov	arg03, #0
1722c     C8 A5 B0 FD | 	call	#__system___basic_print_string
17230     00 12 06 F6 | 	mov	arg01, #0
17234     30 F3 B0 FD | 	call	#__system___getiolock_0540
17238     FD 00 68 FC | 	wrlong	#0, result1
1723c     27 12 06 F6 | 	mov	arg01, #39
17240     28 63 B0 FD | 	call	#_printerror
17244     64 00 90 FD | 	jmp	#LR__1911
17248                 | LR__1910
17248     D8 3F BF FD | 	call	#_pop
1724c     FF 1E 02 F6 | 	mov	local01, result3
17250     A7 FA 61 FC | 	wrlong	result1, fp
17254     04 4E 05 F1 | 	add	fp, #4
17258     A7 FC 61 FC | 	wrlong	result2, fp
1725c     04 4E 05 F1 | 	add	fp, #4
17260     A7 1E 62 FC | 	wrlong	local01, fp
17264     08 4E 85 F1 | 	sub	fp, #8
17268     A7 12 02 F6 | 	mov	arg01, fp
1726c     3C EA BF FD | 	call	#_converttofloat
17270     FD 12 02 F6 | 	mov	arg01, result1
17274     34 CF B0 FD | 	call	#__system____builtin_asinf
17278     FD 12 02 F6 | 	mov	arg01, result1
1727c     51 00 00 FF 
17280     BC E5 05 F1 | 	add	objptr, ##41916
17284     F2 14 02 FB | 	rdlong	arg02, objptr
17288     51 00 00 FF 
1728c     BC E5 85 F1 | 	sub	objptr, ##41916
17290     24 C4 B0 FD | 	call	#__system___float_mul
17294     A7 FA 61 FC | 	wrlong	result1, fp
17298     08 4E 05 F1 | 	add	fp, #8
1729c     A7 3C 68 FC | 	wrlong	#30, fp
172a0     08 4E 85 F1 | 	sub	fp, #8
172a4     A7 12 02 F6 | 	mov	arg01, fp
172a8     10 40 BF FD | 	call	#_push
172ac                 | LR__1911
172ac     A7 F0 03 F6 | 	mov	ptra, fp
172b0     B2 00 A0 FD | 	call	#popregs_
172b4                 | _do_asin_ret
172b4     2D 00 64 FD | 	ret
172b8                 | 
172b8                 | ' 
172b8                 | ' sub do_acos
172b8                 | _do_acos
172b8     01 4A 05 F6 | 	mov	COUNT_, #1
172bc     A8 00 A0 FD | 	call	#pushregs_
172c0     10 F0 07 F1 | 	add	ptra, #16
172c4     4A 00 00 FF 
172c8     80 E4 05 F1 | 	add	objptr, ##38016
172cc     F2 1E 02 FB | 	rdlong	local01, objptr
172d0     0F 17 02 F6 | 	mov	arg03, local01
172d4     01 16 66 F0 | 	shl	arg03, #1
172d8     0F 17 02 F1 | 	add	arg03, local01
172dc     02 16 66 F0 | 	shl	arg03, #2
172e0     03 00 00 FF 
172e4     04 E4 85 F1 | 	sub	objptr, ##1540
172e8     F2 16 02 F1 | 	add	arg03, objptr
172ec     0B 17 02 FB | 	rdlong	arg03, arg03
172f0     0C 4E 05 F1 | 	add	fp, #12
172f4     A7 16 62 FC | 	wrlong	arg03, fp
172f8                 | ' 
172f8                 | ' numpar=compiledline(lineptr_e).result.uresult
172f8                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
172f8     0C 4E 85 F1 | 	sub	fp, #12
172fc     02 16 16 F2 | 	cmp	arg03, #2 wc
17300     47 00 00 FF 
17304     7C E4 85 F1 | 	sub	objptr, ##36476
17308     0C 4E 05 C1 |  if_b	add	fp, #12
1730c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17310     0C 4E 85 C1 |  if_b	sub	fp, #12
17314     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
17318     00 12 06 F6 | 	mov	arg01, #0
1731c     48 F2 B0 FD | 	call	#__system___getiolock_0540
17320     FD 12 02 F6 | 	mov	arg01, result1
17324     DC 97 B0 FD | 	call	#__system___lockmem
17328     85 01 00 FF 
1732c     AC 15 06 F6 | 	mov	arg02, ##@LR__5509
17330     00 12 06 F6 | 	mov	arg01, #0
17334     00 16 06 F6 | 	mov	arg03, #0
17338     BC A4 B0 FD | 	call	#__system___basic_print_string
1733c     00 12 06 F6 | 	mov	arg01, #0
17340     24 F2 B0 FD | 	call	#__system___getiolock_0540
17344     FD 00 68 FC | 	wrlong	#0, result1
17348     27 12 06 F6 | 	mov	arg01, #39
1734c     1C 62 B0 FD | 	call	#_printerror
17350     64 00 90 FD | 	jmp	#LR__1921
17354                 | LR__1920
17354     CC 3E BF FD | 	call	#_pop
17358     FF 1E 02 F6 | 	mov	local01, result3
1735c     A7 FA 61 FC | 	wrlong	result1, fp
17360     04 4E 05 F1 | 	add	fp, #4
17364     A7 FC 61 FC | 	wrlong	result2, fp
17368     04 4E 05 F1 | 	add	fp, #4
1736c     A7 1E 62 FC | 	wrlong	local01, fp
17370     08 4E 85 F1 | 	sub	fp, #8
17374     A7 12 02 F6 | 	mov	arg01, fp
17378     30 E9 BF FD | 	call	#_converttofloat
1737c     FD 12 02 F6 | 	mov	arg01, result1
17380     74 CE B0 FD | 	call	#__system____builtin_acosf
17384     FD 12 02 F6 | 	mov	arg01, result1
17388     51 00 00 FF 
1738c     BC E5 05 F1 | 	add	objptr, ##41916
17390     F2 14 02 FB | 	rdlong	arg02, objptr
17394     51 00 00 FF 
17398     BC E5 85 F1 | 	sub	objptr, ##41916
1739c     18 C3 B0 FD | 	call	#__system___float_mul
173a0     A7 FA 61 FC | 	wrlong	result1, fp
173a4     08 4E 05 F1 | 	add	fp, #8
173a8     A7 3C 68 FC | 	wrlong	#30, fp
173ac     08 4E 85 F1 | 	sub	fp, #8
173b0     A7 12 02 F6 | 	mov	arg01, fp
173b4     04 3F BF FD | 	call	#_push
173b8                 | LR__1921
173b8     A7 F0 03 F6 | 	mov	ptra, fp
173bc     B2 00 A0 FD | 	call	#popregs_
173c0                 | _do_acos_ret
173c0     2D 00 64 FD | 	ret
173c4                 | 
173c4                 | ' 
173c4                 | ' sub do_atn
173c4                 | _do_atn
173c4     01 4A 05 F6 | 	mov	COUNT_, #1
173c8     A8 00 A0 FD | 	call	#pushregs_
173cc     10 F0 07 F1 | 	add	ptra, #16
173d0     4A 00 00 FF 
173d4     80 E4 05 F1 | 	add	objptr, ##38016
173d8     F2 1E 02 FB | 	rdlong	local01, objptr
173dc     0F 17 02 F6 | 	mov	arg03, local01
173e0     01 16 66 F0 | 	shl	arg03, #1
173e4     0F 17 02 F1 | 	add	arg03, local01
173e8     02 16 66 F0 | 	shl	arg03, #2
173ec     03 00 00 FF 
173f0     04 E4 85 F1 | 	sub	objptr, ##1540
173f4     F2 16 02 F1 | 	add	arg03, objptr
173f8     0B 17 02 FB | 	rdlong	arg03, arg03
173fc     0C 4E 05 F1 | 	add	fp, #12
17400     A7 16 62 FC | 	wrlong	arg03, fp
17404                 | ' 
17404                 | ' numpar=compiledline(lineptr_e).result.uresult
17404                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
17404     0C 4E 85 F1 | 	sub	fp, #12
17408     02 16 16 F2 | 	cmp	arg03, #2 wc
1740c     47 00 00 FF 
17410     7C E4 85 F1 | 	sub	objptr, ##36476
17414     0C 4E 05 C1 |  if_b	add	fp, #12
17418     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1741c     0C 4E 85 C1 |  if_b	sub	fp, #12
17420     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1930
17424     00 12 06 F6 | 	mov	arg01, #0
17428     3C F1 B0 FD | 	call	#__system___getiolock_0540
1742c     FD 12 02 F6 | 	mov	arg01, result1
17430     D0 96 B0 FD | 	call	#__system___lockmem
17434     85 01 00 FF 
17438     B3 15 06 F6 | 	mov	arg02, ##@LR__5510
1743c     00 12 06 F6 | 	mov	arg01, #0
17440     00 16 06 F6 | 	mov	arg03, #0
17444     B0 A3 B0 FD | 	call	#__system___basic_print_string
17448     00 12 06 F6 | 	mov	arg01, #0
1744c     18 F1 B0 FD | 	call	#__system___getiolock_0540
17450     FD 00 68 FC | 	wrlong	#0, result1
17454     27 12 06 F6 | 	mov	arg01, #39
17458     10 61 B0 FD | 	call	#_printerror
1745c     6C 00 90 FD | 	jmp	#LR__1931
17460                 | LR__1930
17460     C0 3D BF FD | 	call	#_pop
17464     FF 1E 02 F6 | 	mov	local01, result3
17468     A7 FA 61 FC | 	wrlong	result1, fp
1746c     04 4E 05 F1 | 	add	fp, #4
17470     A7 FC 61 FC | 	wrlong	result2, fp
17474     04 4E 05 F1 | 	add	fp, #4
17478     A7 1E 62 FC | 	wrlong	local01, fp
1747c     08 4E 85 F1 | 	sub	fp, #8
17480     A7 12 02 F6 | 	mov	arg01, fp
17484     24 E8 BF FD | 	call	#_converttofloat
17488     FD 12 02 F6 | 	mov	arg01, result1
1748c     00 C0 1F FF 
17490     00 14 06 F6 | 	mov	arg02, ##1065353216
17494     AC CD B0 FD | 	call	#__system____builtin_atan2f
17498     FD 12 02 F6 | 	mov	arg01, result1
1749c     51 00 00 FF 
174a0     BC E5 05 F1 | 	add	objptr, ##41916
174a4     F2 14 02 FB | 	rdlong	arg02, objptr
174a8     51 00 00 FF 
174ac     BC E5 85 F1 | 	sub	objptr, ##41916
174b0     04 C2 B0 FD | 	call	#__system___float_mul
174b4     A7 FA 61 FC | 	wrlong	result1, fp
174b8     08 4E 05 F1 | 	add	fp, #8
174bc     A7 3C 68 FC | 	wrlong	#30, fp
174c0     08 4E 85 F1 | 	sub	fp, #8
174c4     A7 12 02 F6 | 	mov	arg01, fp
174c8     F0 3D BF FD | 	call	#_push
174cc                 | LR__1931
174cc     A7 F0 03 F6 | 	mov	ptra, fp
174d0     B2 00 A0 FD | 	call	#popregs_
174d4                 | _do_atn_ret
174d4     2D 00 64 FD | 	ret
174d8                 | 
174d8                 | ' 
174d8                 | ' sub do_sqr
174d8                 | _do_sqr
174d8     01 4A 05 F6 | 	mov	COUNT_, #1
174dc     A8 00 A0 FD | 	call	#pushregs_
174e0     10 F0 07 F1 | 	add	ptra, #16
174e4     4A 00 00 FF 
174e8     80 E4 05 F1 | 	add	objptr, ##38016
174ec     F2 1E 02 FB | 	rdlong	local01, objptr
174f0     0F 17 02 F6 | 	mov	arg03, local01
174f4     01 16 66 F0 | 	shl	arg03, #1
174f8     0F 17 02 F1 | 	add	arg03, local01
174fc     02 16 66 F0 | 	shl	arg03, #2
17500     03 00 00 FF 
17504     04 E4 85 F1 | 	sub	objptr, ##1540
17508     F2 16 02 F1 | 	add	arg03, objptr
1750c     0B 17 02 FB | 	rdlong	arg03, arg03
17510     0C 4E 05 F1 | 	add	fp, #12
17514     A7 16 62 FC | 	wrlong	arg03, fp
17518                 | ' 
17518                 | ' numpar=compiledline(lineptr_e).result.uresult
17518                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17518     0C 4E 85 F1 | 	sub	fp, #12
1751c     02 16 16 F2 | 	cmp	arg03, #2 wc
17520     47 00 00 FF 
17524     7C E4 85 F1 | 	sub	objptr, ##36476
17528     0C 4E 05 C1 |  if_b	add	fp, #12
1752c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17530     0C 4E 85 C1 |  if_b	sub	fp, #12
17534     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1940
17538     00 12 06 F6 | 	mov	arg01, #0
1753c     28 F0 B0 FD | 	call	#__system___getiolock_0540
17540     FD 12 02 F6 | 	mov	arg01, result1
17544     BC 95 B0 FD | 	call	#__system___lockmem
17548     85 01 00 FF 
1754c     B9 15 06 F6 | 	mov	arg02, ##@LR__5511
17550     00 12 06 F6 | 	mov	arg01, #0
17554     00 16 06 F6 | 	mov	arg03, #0
17558     9C A2 B0 FD | 	call	#__system___basic_print_string
1755c     00 12 06 F6 | 	mov	arg01, #0
17560     04 F0 B0 FD | 	call	#__system___getiolock_0540
17564     FD 00 68 FC | 	wrlong	#0, result1
17568     27 12 06 F6 | 	mov	arg01, #39
1756c     FC 5F B0 FD | 	call	#_printerror
17570     48 00 90 FD | 	jmp	#LR__1941
17574                 | LR__1940
17574     AC 3C BF FD | 	call	#_pop
17578     FF 1E 02 F6 | 	mov	local01, result3
1757c     A7 FA 61 FC | 	wrlong	result1, fp
17580     04 4E 05 F1 | 	add	fp, #4
17584     A7 FC 61 FC | 	wrlong	result2, fp
17588     04 4E 05 F1 | 	add	fp, #4
1758c     A7 1E 62 FC | 	wrlong	local01, fp
17590     08 4E 85 F1 | 	sub	fp, #8
17594     A7 12 02 F6 | 	mov	arg01, fp
17598     10 E7 BF FD | 	call	#_converttofloat
1759c     FD 12 02 F6 | 	mov	arg01, result1
175a0     3C C0 B0 FD | 	call	#__system___float_sqrt
175a4     A7 FA 61 FC | 	wrlong	result1, fp
175a8     08 4E 05 F1 | 	add	fp, #8
175ac     A7 3C 68 FC | 	wrlong	#30, fp
175b0     08 4E 85 F1 | 	sub	fp, #8
175b4     A7 12 02 F6 | 	mov	arg01, fp
175b8     00 3D BF FD | 	call	#_push
175bc                 | LR__1941
175bc     A7 F0 03 F6 | 	mov	ptra, fp
175c0     B2 00 A0 FD | 	call	#popregs_
175c4                 | _do_sqr_ret
175c4     2D 00 64 FD | 	ret
175c8                 | 
175c8                 | ' 
175c8                 | ' sub do_stick
175c8                 | _do_stick
175c8     01 4A 05 F6 | 	mov	COUNT_, #1
175cc     A8 00 A0 FD | 	call	#pushregs_
175d0     10 F0 07 F1 | 	add	ptra, #16
175d4     4A 00 00 FF 
175d8     80 E4 05 F1 | 	add	objptr, ##38016
175dc     F2 1E 02 FB | 	rdlong	local01, objptr
175e0     0F 17 02 F6 | 	mov	arg03, local01
175e4     01 16 66 F0 | 	shl	arg03, #1
175e8     0F 17 02 F1 | 	add	arg03, local01
175ec     02 16 66 F0 | 	shl	arg03, #2
175f0     03 00 00 FF 
175f4     04 E4 85 F1 | 	sub	objptr, ##1540
175f8     F2 16 02 F1 | 	add	arg03, objptr
175fc     0B 17 02 FB | 	rdlong	arg03, arg03
17600     0C 4E 05 F1 | 	add	fp, #12
17604     A7 16 62 FC | 	wrlong	arg03, fp
17608                 | ' 
17608                 | ' numpar=compiledline(lineptr_e).result.uresult
17608                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17608     0C 4E 85 F1 | 	sub	fp, #12
1760c     02 16 16 F2 | 	cmp	arg03, #2 wc
17610     47 00 00 FF 
17614     7C E4 85 F1 | 	sub	objptr, ##36476
17618     3C 00 90 CD |  if_b	jmp	#LR__1950
1761c     00 12 06 F6 | 	mov	arg01, #0
17620     44 EF B0 FD | 	call	#__system___getiolock_0540
17624     FD 12 02 F6 | 	mov	arg01, result1
17628     D8 94 B0 FD | 	call	#__system___lockmem
1762c     85 01 00 FF 
17630     BF 15 06 F6 | 	mov	arg02, ##@LR__5512
17634     00 12 06 F6 | 	mov	arg01, #0
17638     00 16 06 F6 | 	mov	arg03, #0
1763c     B8 A1 B0 FD | 	call	#__system___basic_print_string
17640     00 12 06 F6 | 	mov	arg01, #0
17644     20 EF B0 FD | 	call	#__system___getiolock_0540
17648     FD 00 68 FC | 	wrlong	#0, result1
1764c     27 12 06 F6 | 	mov	arg01, #39
17650     18 5F B0 FD | 	call	#_printerror
17654     E8 00 90 FD | 	jmp	#LR__1954
17658                 | LR__1950
17658                 | ' 
17658                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
17658     0C 4E 05 F1 | 	add	fp, #12
1765c     A7 FE 09 FB | 	rdlong	result3, fp wz
17660     0C 4E 85 F1 | 	sub	fp, #12
17664     30 00 90 5D |  if_ne	jmp	#LR__1951
17668     51 00 00 FF 
1766c     2C E5 05 F1 | 	add	objptr, ##41772
17670     F2 1E 02 FB | 	rdlong	local01, objptr
17674     51 00 00 FF 
17678     2C E5 85 F1 | 	sub	objptr, ##41772
1767c     A7 1E 62 FC | 	wrlong	local01, fp
17680     08 4E 05 F1 | 	add	fp, #8
17684     A7 3A 68 FC | 	wrlong	#29, fp
17688     08 4E 85 F1 | 	sub	fp, #8
1768c     A7 12 02 F6 | 	mov	arg01, fp
17690     28 3C BF FD | 	call	#_push
17694     A8 00 90 FD | 	jmp	#LR__1954
17698                 | LR__1951
17698     88 3B BF FD | 	call	#_pop
1769c     A7 FA 61 FC | 	wrlong	result1, fp
176a0     04 4E 05 F1 | 	add	fp, #4
176a4     A7 FC 61 FC | 	wrlong	result2, fp
176a8     04 4E 05 F1 | 	add	fp, #4
176ac     A7 FE 61 FC | 	wrlong	result3, fp
176b0                 | ' 
176b0                 | ' t1=pop()
176b0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
176b0     08 4E 85 F1 | 	sub	fp, #8
176b4     1C FE 0D F2 | 	cmp	result3, #28 wz
176b8     08 4E 05 51 |  if_ne	add	fp, #8
176bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
176c0     08 4E 85 51 |  if_ne	sub	fp, #8
176c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
176c8     6C 00 90 5D |  if_ne	jmp	#LR__1953
176cc     A7 1E 02 FB | 	rdlong	local01, fp
176d0     52 00 00 FF 
176d4     08 E4 05 F1 | 	add	objptr, ##41992
176d8     F2 1E 62 FC | 	wrlong	local01, objptr
176dc                 | '   q=t1.result.uresult
176dc                 | '   if q<7 then 
176dc     52 00 00 FF 
176e0     08 E4 85 F1 | 	sub	objptr, ##41992
176e4     07 1E 56 F2 | 	cmps	local01, #7 wc
176e8     40 00 90 3D |  if_ae	jmp	#LR__1952
176ec     52 00 00 FF 
176f0     08 E4 05 F1 | 	add	objptr, ##41992
176f4     F2 1E 02 FB | 	rdlong	local01, objptr
176f8     02 1E 66 F0 | 	shl	local01, #2
176fc     DC E4 85 F1 | 	sub	objptr, #220
17700     F2 1E 02 F1 | 	add	local01, objptr
17704     0F 1F 02 FB | 	rdlong	local01, local01
17708     A7 1E 62 FC | 	wrlong	local01, fp
1770c     08 4E 05 F1 | 	add	fp, #8
17710     A7 3A 68 FC | 	wrlong	#29, fp
17714     08 4E 85 F1 | 	sub	fp, #8
17718     A7 12 02 F6 | 	mov	arg01, fp
1771c     51 00 00 FF 
17720     2C E5 85 F1 | 	sub	objptr, ##41772
17724     94 3B BF FD | 	call	#_push
17728                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
17728     14 00 90 FD | 	jmp	#LR__1954
1772c                 | LR__1952
1772c     29 12 06 F6 | 	mov	arg01, #41
17730     38 5E B0 FD | 	call	#_printerror
17734                 | '      printerror(41) : return
17734     08 00 90 FD | 	jmp	#LR__1954
17738                 | LR__1953
17738     29 12 06 F6 | 	mov	arg01, #41
1773c     2C 5E B0 FD | 	call	#_printerror
17740                 | LR__1954
17740     A7 F0 03 F6 | 	mov	ptra, fp
17744     B2 00 A0 FD | 	call	#popregs_
17748                 | _do_stick_ret
17748     2D 00 64 FD | 	ret
1774c                 | 
1774c                 | ' 
1774c                 | ' sub do_strig
1774c                 | _do_strig
1774c     01 4A 05 F6 | 	mov	COUNT_, #1
17750     A8 00 A0 FD | 	call	#pushregs_
17754     10 F0 07 F1 | 	add	ptra, #16
17758     4A 00 00 FF 
1775c     80 E4 05 F1 | 	add	objptr, ##38016
17760     F2 1E 02 FB | 	rdlong	local01, objptr
17764     0F 17 02 F6 | 	mov	arg03, local01
17768     01 16 66 F0 | 	shl	arg03, #1
1776c     0F 17 02 F1 | 	add	arg03, local01
17770     02 16 66 F0 | 	shl	arg03, #2
17774     03 00 00 FF 
17778     04 E4 85 F1 | 	sub	objptr, ##1540
1777c     F2 16 02 F1 | 	add	arg03, objptr
17780     0B 17 02 FB | 	rdlong	arg03, arg03
17784     0C 4E 05 F1 | 	add	fp, #12
17788     A7 16 62 FC | 	wrlong	arg03, fp
1778c                 | ' 
1778c                 | ' numpar=compiledline(lineptr_e).result.uresult
1778c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1778c     0C 4E 85 F1 | 	sub	fp, #12
17790     02 16 16 F2 | 	cmp	arg03, #2 wc
17794     47 00 00 FF 
17798     7C E4 85 F1 | 	sub	objptr, ##36476
1779c     3C 00 90 CD |  if_b	jmp	#LR__1960
177a0     00 12 06 F6 | 	mov	arg01, #0
177a4     C0 ED B0 FD | 	call	#__system___getiolock_0540
177a8     FD 12 02 F6 | 	mov	arg01, result1
177ac     54 93 B0 FD | 	call	#__system___lockmem
177b0     85 01 00 FF 
177b4     C7 15 06 F6 | 	mov	arg02, ##@LR__5513
177b8     00 12 06 F6 | 	mov	arg01, #0
177bc     00 16 06 F6 | 	mov	arg03, #0
177c0     34 A0 B0 FD | 	call	#__system___basic_print_string
177c4     00 12 06 F6 | 	mov	arg01, #0
177c8     9C ED B0 FD | 	call	#__system___getiolock_0540
177cc     FD 00 68 FC | 	wrlong	#0, result1
177d0     27 12 06 F6 | 	mov	arg01, #39
177d4     94 5D B0 FD | 	call	#_printerror
177d8     E8 00 90 FD | 	jmp	#LR__1964
177dc                 | LR__1960
177dc                 | ' 
177dc                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
177dc     0C 4E 05 F1 | 	add	fp, #12
177e0     A7 FE 09 FB | 	rdlong	result3, fp wz
177e4     0C 4E 85 F1 | 	sub	fp, #12
177e8     30 00 90 5D |  if_ne	jmp	#LR__1961
177ec     51 00 00 FF 
177f0     48 E5 05 F1 | 	add	objptr, ##41800
177f4     F2 1E 02 FB | 	rdlong	local01, objptr
177f8     51 00 00 FF 
177fc     48 E5 85 F1 | 	sub	objptr, ##41800
17800     A7 1E 62 FC | 	wrlong	local01, fp
17804     08 4E 05 F1 | 	add	fp, #8
17808     A7 3A 68 FC | 	wrlong	#29, fp
1780c     08 4E 85 F1 | 	sub	fp, #8
17810     A7 12 02 F6 | 	mov	arg01, fp
17814     A4 3A BF FD | 	call	#_push
17818     A8 00 90 FD | 	jmp	#LR__1964
1781c                 | LR__1961
1781c     04 3A BF FD | 	call	#_pop
17820     A7 FA 61 FC | 	wrlong	result1, fp
17824     04 4E 05 F1 | 	add	fp, #4
17828     A7 FC 61 FC | 	wrlong	result2, fp
1782c     04 4E 05 F1 | 	add	fp, #4
17830     A7 FE 61 FC | 	wrlong	result3, fp
17834                 | ' 
17834                 | ' t1=pop()
17834                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17834     08 4E 85 F1 | 	sub	fp, #8
17838     1C FE 0D F2 | 	cmp	result3, #28 wz
1783c     08 4E 05 51 |  if_ne	add	fp, #8
17840     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17844     08 4E 85 51 |  if_ne	sub	fp, #8
17848     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1784c     6C 00 90 5D |  if_ne	jmp	#LR__1963
17850     A7 1E 02 FB | 	rdlong	local01, fp
17854     52 00 00 FF 
17858     08 E4 05 F1 | 	add	objptr, ##41992
1785c     F2 1E 62 FC | 	wrlong	local01, objptr
17860                 | '   q=t1.result.uresult
17860                 | '   if q<7 then 
17860     52 00 00 FF 
17864     08 E4 85 F1 | 	sub	objptr, ##41992
17868     07 1E 56 F2 | 	cmps	local01, #7 wc
1786c     40 00 90 3D |  if_ae	jmp	#LR__1962
17870     52 00 00 FF 
17874     08 E4 05 F1 | 	add	objptr, ##41992
17878     F2 1E 02 FB | 	rdlong	local01, objptr
1787c     02 1E 66 F0 | 	shl	local01, #2
17880     C0 E4 85 F1 | 	sub	objptr, #192
17884     F2 1E 02 F1 | 	add	local01, objptr
17888     0F 1F 02 FB | 	rdlong	local01, local01
1788c     A7 1E 62 FC | 	wrlong	local01, fp
17890     08 4E 05 F1 | 	add	fp, #8
17894     A7 3A 68 FC | 	wrlong	#29, fp
17898     08 4E 85 F1 | 	sub	fp, #8
1789c     A7 12 02 F6 | 	mov	arg01, fp
178a0     51 00 00 FF 
178a4     48 E5 85 F1 | 	sub	objptr, ##41800
178a8     10 3A BF FD | 	call	#_push
178ac                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
178ac     14 00 90 FD | 	jmp	#LR__1964
178b0                 | LR__1962
178b0     29 12 06 F6 | 	mov	arg01, #41
178b4     B4 5C B0 FD | 	call	#_printerror
178b8                 | '      printerror(41) : return
178b8     08 00 90 FD | 	jmp	#LR__1964
178bc                 | LR__1963
178bc     29 12 06 F6 | 	mov	arg01, #41
178c0     A8 5C B0 FD | 	call	#_printerror
178c4                 | LR__1964
178c4     A7 F0 03 F6 | 	mov	ptra, fp
178c8     B2 00 A0 FD | 	call	#popregs_
178cc                 | _do_strig_ret
178cc     2D 00 64 FD | 	ret
178d0                 | 
178d0                 | ' 
178d0                 | ' sub do_getpixel
178d0                 | _do_getpixel
178d0     00 4A 05 F6 | 	mov	COUNT_, #0
178d4     A8 00 A0 FD | 	call	#pushregs_
178d8     24 F0 07 F1 | 	add	ptra, #36
178dc     4A 00 00 FF 
178e0     80 E4 05 F1 | 	add	objptr, ##38016
178e4     F2 16 02 FB | 	rdlong	arg03, objptr
178e8     0B 15 02 F6 | 	mov	arg02, arg03
178ec     01 14 66 F0 | 	shl	arg02, #1
178f0     0B 15 02 F1 | 	add	arg02, arg03
178f4     02 14 66 F0 | 	shl	arg02, #2
178f8     03 00 00 FF 
178fc     04 E4 85 F1 | 	sub	objptr, ##1540
17900     F2 14 02 F1 | 	add	arg02, objptr
17904     0A 17 02 FB | 	rdlong	arg03, arg02
17908     18 4E 05 F1 | 	add	fp, #24
1790c     A7 16 62 FC | 	wrlong	arg03, fp
17910                 | ' 
17910                 | ' numpar=compiledline(lineptr_e).result.uresult
17910                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
17910     18 4E 85 F1 | 	sub	fp, #24
17914     02 16 0E F2 | 	cmp	arg03, #2 wz
17918     47 00 00 FF 
1791c     7C E4 85 F1 | 	sub	objptr, ##36476
17920     3C 00 90 AD |  if_e	jmp	#LR__1970
17924     00 12 06 F6 | 	mov	arg01, #0
17928     3C EC B0 FD | 	call	#__system___getiolock_0540
1792c     FD 12 02 F6 | 	mov	arg01, result1
17930     D0 91 B0 FD | 	call	#__system___lockmem
17934     85 01 00 FF 
17938     CF 15 06 F6 | 	mov	arg02, ##@LR__5514
1793c     00 12 06 F6 | 	mov	arg01, #0
17940     00 16 06 F6 | 	mov	arg03, #0
17944     B0 9E B0 FD | 	call	#__system___basic_print_string
17948     00 12 06 F6 | 	mov	arg01, #0
1794c     18 EC B0 FD | 	call	#__system___getiolock_0540
17950     FD 00 68 FC | 	wrlong	#0, result1
17954     27 12 06 F6 | 	mov	arg01, #39
17958     10 5C B0 FD | 	call	#_printerror
1795c     B4 00 90 FD | 	jmp	#LR__1971
17960                 | LR__1970
17960     C0 38 BF FD | 	call	#_pop
17964     FD 16 02 F6 | 	mov	arg03, result1
17968     FE 14 02 F6 | 	mov	arg02, result2
1796c     FF 12 02 F6 | 	mov	arg01, result3
17970     0C 4E 05 F1 | 	add	fp, #12
17974     A7 16 62 FC | 	wrlong	arg03, fp
17978     04 4E 05 F1 | 	add	fp, #4
1797c     A7 14 62 FC | 	wrlong	arg02, fp
17980     04 4E 05 F1 | 	add	fp, #4
17984     A7 12 62 FC | 	wrlong	arg01, fp
17988     14 4E 85 F1 | 	sub	fp, #20
1798c     94 38 BF FD | 	call	#_pop
17990     FF 16 02 F6 | 	mov	arg03, result3
17994     A7 FA 61 FC | 	wrlong	result1, fp
17998     04 4E 05 F1 | 	add	fp, #4
1799c     A7 FC 61 FC | 	wrlong	result2, fp
179a0     04 4E 05 F1 | 	add	fp, #4
179a4     A7 16 62 FC | 	wrlong	arg03, fp
179a8     08 4E 85 F1 | 	sub	fp, #8
179ac     A7 12 02 F6 | 	mov	arg01, fp
179b0     3C E2 BF FD | 	call	#_converttoint
179b4     1C 4E 05 F1 | 	add	fp, #28
179b8     A7 FA 61 FC | 	wrlong	result1, fp
179bc     10 4E 85 F1 | 	sub	fp, #16
179c0     A7 12 02 F6 | 	mov	arg01, fp
179c4     0C 4E 85 F1 | 	sub	fp, #12
179c8     24 E2 BF FD | 	call	#_converttoint
179cc     FD 16 02 F6 | 	mov	arg03, result1
179d0     20 4E 05 F1 | 	add	fp, #32
179d4     A7 16 62 FC | 	wrlong	arg03, fp
179d8     F2 12 02 FB | 	rdlong	arg01, objptr
179dc     04 4E 85 F1 | 	sub	fp, #4
179e0     A7 FE 01 FB | 	rdlong	result3, fp
179e4     FF 12 02 F1 | 	add	arg01, result3
179e8     1C 4E 85 F1 | 	sub	fp, #28
179ec     0A 16 66 F0 | 	shl	arg03, #10
179f0     0B 13 02 F1 | 	add	arg01, arg03
179f4     B0 5D B0 FD | 	call	#_pspeek
179f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
179fc     A7 FA 61 FC | 	wrlong	result1, fp
17a00     08 4E 05 F1 | 	add	fp, #8
17a04     A7 3A 68 FC | 	wrlong	#29, fp
17a08     08 4E 85 F1 | 	sub	fp, #8
17a0c     A7 12 02 F6 | 	mov	arg01, fp
17a10     A8 38 BF FD | 	call	#_push
17a14                 | LR__1971
17a14     A7 F0 03 F6 | 	mov	ptra, fp
17a18     B2 00 A0 FD | 	call	#popregs_
17a1c                 | _do_getpixel_ret
17a1c     2D 00 64 FD | 	ret
17a20                 | 
17a20                 | ' 
17a20                 | ' sub do_log
17a20                 | _do_log
17a20     01 4A 05 F6 | 	mov	COUNT_, #1
17a24     A8 00 A0 FD | 	call	#pushregs_
17a28     14 F0 07 F1 | 	add	ptra, #20
17a2c     4A 00 00 FF 
17a30     80 E4 05 F1 | 	add	objptr, ##38016
17a34     F2 1E 02 FB | 	rdlong	local01, objptr
17a38     0F 17 02 F6 | 	mov	arg03, local01
17a3c     01 16 66 F0 | 	shl	arg03, #1
17a40     0F 17 02 F1 | 	add	arg03, local01
17a44     02 16 66 F0 | 	shl	arg03, #2
17a48     03 00 00 FF 
17a4c     04 E4 85 F1 | 	sub	objptr, ##1540
17a50     F2 16 02 F1 | 	add	arg03, objptr
17a54     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17a58     0C 4E 05 F1 | 	add	fp, #12
17a5c     A7 16 62 FC | 	wrlong	arg03, fp
17a60                 | ' 
17a60                 | ' numpar=compiledline(lineptr_e).result.uresult
17a60                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
17a60     0C 4E 85 F1 | 	sub	fp, #12
17a64     47 00 00 FF 
17a68     7C E4 85 F1 | 	sub	objptr, ##36476
17a6c     0C 4E 05 51 |  if_ne	add	fp, #12
17a70     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17a74     0C 4E 85 51 |  if_ne	sub	fp, #12
17a78     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
17a7c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1980
17a80     00 12 06 F6 | 	mov	arg01, #0
17a84     E0 EA B0 FD | 	call	#__system___getiolock_0540
17a88     FD 12 02 F6 | 	mov	arg01, result1
17a8c     74 90 B0 FD | 	call	#__system___lockmem
17a90     85 01 00 FF 
17a94     DA 15 06 F6 | 	mov	arg02, ##@LR__5515
17a98     00 12 06 F6 | 	mov	arg01, #0
17a9c     00 16 06 F6 | 	mov	arg03, #0
17aa0     54 9D B0 FD | 	call	#__system___basic_print_string
17aa4     00 12 06 F6 | 	mov	arg01, #0
17aa8     BC EA B0 FD | 	call	#__system___getiolock_0540
17aac     FD 00 68 FC | 	wrlong	#0, result1
17ab0     27 12 06 F6 | 	mov	arg01, #39
17ab4     B4 5A B0 FD | 	call	#_printerror
17ab8     D0 00 90 FD | 	jmp	#LR__1983
17abc                 | LR__1980
17abc                 | ' 
17abc                 | ' if numpar=2 then 
17abc     0C 4E 05 F1 | 	add	fp, #12
17ac0     A7 1E 02 FB | 	rdlong	local01, fp
17ac4     0C 4E 85 F1 | 	sub	fp, #12
17ac8     02 1E 0E F2 | 	cmp	local01, #2 wz
17acc     48 00 90 5D |  if_ne	jmp	#LR__1981
17ad0     50 37 BF FD | 	call	#_pop
17ad4     FF 1E 02 F6 | 	mov	local01, result3
17ad8     A7 FA 61 FC | 	wrlong	result1, fp
17adc     04 4E 05 F1 | 	add	fp, #4
17ae0     A7 FC 61 FC | 	wrlong	result2, fp
17ae4     04 4E 05 F1 | 	add	fp, #4
17ae8     A7 1E 62 FC | 	wrlong	local01, fp
17aec     08 4E 85 F1 | 	sub	fp, #8
17af0     A7 12 02 F6 | 	mov	arg01, fp
17af4     B4 E1 BF FD | 	call	#_converttofloat
17af8     FD 14 02 F6 | 	mov	arg02, result1
17afc     FC 16 20 FF 
17b00     54 12 06 F6 | 	mov	arg01, ##1076754516
17b04     80 CB B0 FD | 	call	#__system____builtin_logbase
17b08     10 4E 05 F1 | 	add	fp, #16
17b0c     A7 FA 61 FC | 	wrlong	result1, fp
17b10     10 4E 85 F1 | 	sub	fp, #16
17b14     10 00 90 FD | 	jmp	#LR__1982
17b18                 | LR__1981
17b18     10 4E 05 F1 | 	add	fp, #16
17b1c     00 C0 9F FF 
17b20     A7 00 68 FC | 	wrlong	##1065353216, fp
17b24     10 4E 85 F1 | 	sub	fp, #16
17b28                 | LR__1982
17b28     F8 36 BF FD | 	call	#_pop
17b2c     FF 1E 02 F6 | 	mov	local01, result3
17b30     A7 FA 61 FC | 	wrlong	result1, fp
17b34     04 4E 05 F1 | 	add	fp, #4
17b38     A7 FC 61 FC | 	wrlong	result2, fp
17b3c     04 4E 05 F1 | 	add	fp, #4
17b40     A7 1E 62 FC | 	wrlong	local01, fp
17b44     08 4E 85 F1 | 	sub	fp, #8
17b48     A7 12 02 F6 | 	mov	arg01, fp
17b4c     5C E1 BF FD | 	call	#_converttofloat
17b50     FD 14 02 F6 | 	mov	arg02, result1
17b54     FC 16 20 FF 
17b58     54 12 06 F6 | 	mov	arg01, ##1076754516
17b5c     28 CB B0 FD | 	call	#__system____builtin_logbase
17b60     FD 12 02 F6 | 	mov	arg01, result1
17b64     10 4E 05 F1 | 	add	fp, #16
17b68     A7 14 02 FB | 	rdlong	arg02, fp
17b6c     10 4E 85 F1 | 	sub	fp, #16
17b70     48 BD B0 FD | 	call	#__system___float_div
17b74     A7 FA 61 FC | 	wrlong	result1, fp
17b78     08 4E 05 F1 | 	add	fp, #8
17b7c     A7 3C 68 FC | 	wrlong	#30, fp
17b80     08 4E 85 F1 | 	sub	fp, #8
17b84     A7 12 02 F6 | 	mov	arg01, fp
17b88     30 37 BF FD | 	call	#_push
17b8c                 | LR__1983
17b8c     A7 F0 03 F6 | 	mov	ptra, fp
17b90     B2 00 A0 FD | 	call	#popregs_
17b94                 | _do_log_ret
17b94     2D 00 64 FD | 	ret
17b98                 | 
17b98                 | ' 
17b98                 | ' sub do_defsprite
17b98                 | _do_defsprite
17b98     07 4A 05 F6 | 	mov	COUNT_, #7
17b9c     A8 00 A0 FD | 	call	#pushregs_
17ba0     60 F0 07 F1 | 	add	ptra, #96
17ba4     7C 36 BF FD | 	call	#_pop
17ba8     FD 16 02 F6 | 	mov	arg03, result1
17bac     FE 14 02 F6 | 	mov	arg02, result2
17bb0     FF 12 02 F6 | 	mov	arg01, result3
17bb4     30 4E 05 F1 | 	add	fp, #48
17bb8     A7 16 62 FC | 	wrlong	arg03, fp
17bbc     04 4E 05 F1 | 	add	fp, #4
17bc0     A7 14 62 FC | 	wrlong	arg02, fp
17bc4     04 4E 05 F1 | 	add	fp, #4
17bc8     A7 12 62 FC | 	wrlong	arg01, fp
17bcc     38 4E 85 F1 | 	sub	fp, #56
17bd0     50 36 BF FD | 	call	#_pop
17bd4     FD 16 02 F6 | 	mov	arg03, result1
17bd8     FE 14 02 F6 | 	mov	arg02, result2
17bdc     FF 12 02 F6 | 	mov	arg01, result3
17be0     24 4E 05 F1 | 	add	fp, #36
17be4     A7 16 62 FC | 	wrlong	arg03, fp
17be8     04 4E 05 F1 | 	add	fp, #4
17bec     A7 14 62 FC | 	wrlong	arg02, fp
17bf0     04 4E 05 F1 | 	add	fp, #4
17bf4     A7 12 62 FC | 	wrlong	arg01, fp
17bf8     2C 4E 85 F1 | 	sub	fp, #44
17bfc     24 36 BF FD | 	call	#_pop
17c00     FD 16 02 F6 | 	mov	arg03, result1
17c04     FE 14 02 F6 | 	mov	arg02, result2
17c08     FF 12 02 F6 | 	mov	arg01, result3
17c0c     18 4E 05 F1 | 	add	fp, #24
17c10     A7 16 62 FC | 	wrlong	arg03, fp
17c14     04 4E 05 F1 | 	add	fp, #4
17c18     A7 14 62 FC | 	wrlong	arg02, fp
17c1c     04 4E 05 F1 | 	add	fp, #4
17c20     A7 12 62 FC | 	wrlong	arg01, fp
17c24     20 4E 85 F1 | 	sub	fp, #32
17c28     F8 35 BF FD | 	call	#_pop
17c2c     FD 16 02 F6 | 	mov	arg03, result1
17c30     FE 14 02 F6 | 	mov	arg02, result2
17c34     FF 12 02 F6 | 	mov	arg01, result3
17c38     0C 4E 05 F1 | 	add	fp, #12
17c3c     A7 16 62 FC | 	wrlong	arg03, fp
17c40     04 4E 05 F1 | 	add	fp, #4
17c44     A7 14 62 FC | 	wrlong	arg02, fp
17c48     04 4E 05 F1 | 	add	fp, #4
17c4c     A7 12 62 FC | 	wrlong	arg01, fp
17c50     14 4E 85 F1 | 	sub	fp, #20
17c54     CC 35 BF FD | 	call	#_pop
17c58     FF 16 02 F6 | 	mov	arg03, result3
17c5c     A7 FA 61 FC | 	wrlong	result1, fp
17c60     04 4E 05 F1 | 	add	fp, #4
17c64     A7 FC 61 FC | 	wrlong	result2, fp
17c68     04 4E 05 F1 | 	add	fp, #4
17c6c     A7 16 62 FC | 	wrlong	arg03, fp
17c70     08 4E 85 F1 | 	sub	fp, #8
17c74     A7 12 02 F6 | 	mov	arg01, fp
17c78     74 DF BF FD | 	call	#_converttoint
17c7c     3C 4E 05 F1 | 	add	fp, #60
17c80     A7 FA 61 FC | 	wrlong	result1, fp
17c84     30 4E 85 F1 | 	sub	fp, #48
17c88     A7 12 02 F6 | 	mov	arg01, fp
17c8c     0C 4E 85 F1 | 	sub	fp, #12
17c90     5C DF BF FD | 	call	#_converttoint
17c94     40 4E 05 F1 | 	add	fp, #64
17c98     A7 FA 61 FC | 	wrlong	result1, fp
17c9c     28 4E 85 F1 | 	sub	fp, #40
17ca0     A7 12 02 F6 | 	mov	arg01, fp
17ca4     18 4E 85 F1 | 	sub	fp, #24
17ca8     44 DF BF FD | 	call	#_converttoint
17cac     44 4E 05 F1 | 	add	fp, #68
17cb0     A7 FA 61 FC | 	wrlong	result1, fp
17cb4     20 4E 85 F1 | 	sub	fp, #32
17cb8     A7 12 02 F6 | 	mov	arg01, fp
17cbc     24 4E 85 F1 | 	sub	fp, #36
17cc0     2C DF BF FD | 	call	#_converttoint
17cc4     48 4E 05 F1 | 	add	fp, #72
17cc8     A7 FA 61 FC | 	wrlong	result1, fp
17ccc     18 4E 85 F1 | 	sub	fp, #24
17cd0     A7 12 02 F6 | 	mov	arg01, fp
17cd4     30 4E 85 F1 | 	sub	fp, #48
17cd8     14 DF BF FD | 	call	#_converttoint
17cdc     4C 4E 05 F1 | 	add	fp, #76
17ce0     A7 FA 61 FC | 	wrlong	result1, fp
17ce4                 | ' 
17ce4                 | ' t5=pop()
17ce4                 | ' t4=pop()
17ce4                 | ' t3=pop()
17ce4                 | ' t2=pop()
17ce4                 | ' t1=pop()
17ce4                 | ' 
17ce4                 | ' ' do convert, defsprite is not a racing command
17ce4                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17ce4                 | '  
17ce4                 | ' ' todo: check parameters for linits
17ce4                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17ce4     10 4E 85 F1 | 	sub	fp, #16
17ce8     A7 16 02 FB | 	rdlong	arg03, fp
17cec     3C 4E 85 F1 | 	sub	fp, #60
17cf0     02 16 66 F0 | 	shl	arg03, #2
17cf4     51 00 00 FF 
17cf8     64 E5 05 F1 | 	add	objptr, ##41828
17cfc     F2 16 02 F1 | 	add	arg03, objptr
17d00     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17d04     51 00 00 FF 
17d08     64 E5 85 F1 | 	sub	objptr, ##41828
17d0c     2C 00 90 AD |  if_e	jmp	#LR__1990
17d10     3C 4E 05 F1 | 	add	fp, #60
17d14     A7 16 02 FB | 	rdlong	arg03, fp
17d18     3C 4E 85 F1 | 	sub	fp, #60
17d1c     02 16 66 F0 | 	shl	arg03, #2
17d20     51 00 00 FF 
17d24     64 E5 05 F1 | 	add	objptr, ##41828
17d28     F2 16 02 F1 | 	add	arg03, objptr
17d2c     0B 13 02 FB | 	rdlong	arg01, arg03
17d30     51 00 00 FF 
17d34     64 E5 85 F1 | 	sub	objptr, ##41828
17d38     E0 CD B0 FD | 	call	#__system___gc_free
17d3c                 | LR__1990
17d3c     3C 4E 05 F1 | 	add	fp, #60
17d40     A7 1E 02 FB | 	rdlong	local01, fp
17d44     0C 4E 05 F1 | 	add	fp, #12
17d48     A7 16 02 FB | 	rdlong	arg03, fp
17d4c     04 4E 05 F1 | 	add	fp, #4
17d50     A7 14 02 FB | 	rdlong	arg02, fp
17d54     0A 17 02 FD | 	qmul	arg03, arg02
17d58     02 1E 66 F0 | 	shl	local01, #2
17d5c     51 00 00 FF 
17d60     64 E5 05 F1 | 	add	objptr, ##41828
17d64     F2 1E 02 F1 | 	add	local01, objptr
17d68     4C 4E 85 F1 | 	sub	fp, #76
17d6c     51 00 00 FF 
17d70     64 E5 85 F1 | 	sub	objptr, ##41828
17d74     18 12 62 FD | 	getqx	arg01
17d78     64 CC B0 FD | 	call	#__system___gc_alloc_managed
17d7c     0F FB 61 FC | 	wrlong	result1, local01
17d80                 | ' for y=a3 to a3+a5-1
17d80     44 4E 05 F1 | 	add	fp, #68
17d84     A7 20 02 FB | 	rdlong	local02, fp
17d88     0C 4E 05 F1 | 	add	fp, #12
17d8c     A7 20 62 FC | 	wrlong	local02, fp
17d90     0C 4E 85 F1 | 	sub	fp, #12
17d94     A7 22 02 FB | 	rdlong	local03, fp
17d98     08 4E 05 F1 | 	add	fp, #8
17d9c     A7 24 02 FB | 	rdlong	local04, fp
17da0     4C 4E 85 F1 | 	sub	fp, #76
17da4     12 23 02 F1 | 	add	local03, local04
17da8                 | LR__1991
17da8     50 4E 05 F1 | 	add	fp, #80
17dac     A7 20 02 FB | 	rdlong	local02, fp
17db0     50 4E 85 F1 | 	sub	fp, #80
17db4     11 21 52 F2 | 	cmps	local02, local03 wc
17db8     F4 00 90 3D |  if_ae	jmp	#LR__1994
17dbc                 | '   for x=a2 to a4+a2-1
17dbc     40 4E 05 F1 | 	add	fp, #64
17dc0     A7 1E 02 FB | 	rdlong	local01, fp
17dc4     14 4E 05 F1 | 	add	fp, #20
17dc8     A7 1E 62 FC | 	wrlong	local01, fp
17dcc     0C 4E 85 F1 | 	sub	fp, #12
17dd0     A7 26 02 FB | 	rdlong	local05, fp
17dd4     08 4E 85 F1 | 	sub	fp, #8
17dd8     A7 28 02 FB | 	rdlong	local06, fp
17ddc     40 4E 85 F1 | 	sub	fp, #64
17de0     14 27 02 F1 | 	add	local05, local06
17de4                 | LR__1992
17de4     54 4E 05 F1 | 	add	fp, #84
17de8     A7 1E 02 FB | 	rdlong	local01, fp
17dec     54 4E 85 F1 | 	sub	fp, #84
17df0     13 1F 52 F2 | 	cmps	local01, local05 wc
17df4     A0 00 90 3D |  if_ae	jmp	#LR__1993
17df8     3C 4E 05 F1 | 	add	fp, #60
17dfc     A7 28 02 FB | 	rdlong	local06, fp
17e00     18 4E 05 F1 | 	add	fp, #24
17e04     A7 24 02 FB | 	rdlong	local04, fp
17e08     14 4E 85 F1 | 	sub	fp, #20
17e0c     A7 20 02 FB | 	rdlong	local02, fp
17e10     10 4E 05 F1 | 	add	fp, #16
17e14     A7 1E 02 FB | 	rdlong	local01, fp
17e18     0F 17 02 F6 | 	mov	arg03, local01
17e1c     0C 4E 85 F1 | 	sub	fp, #12
17e20     A7 14 02 FB | 	rdlong	arg02, fp
17e24     0A 17 82 F1 | 	sub	arg03, arg02
17e28     04 4E 05 F1 | 	add	fp, #4
17e2c     A7 14 02 FB | 	rdlong	arg02, fp
17e30     0A 17 02 FD | 	qmul	arg03, arg02
17e34     02 28 66 F0 | 	shl	local06, #2
17e38     51 00 00 FF 
17e3c     64 E5 05 F1 | 	add	objptr, ##41828
17e40     F2 28 02 F1 | 	add	local06, objptr
17e44     14 29 02 FB | 	rdlong	local06, local06
17e48     12 2B 02 F6 | 	mov	local07, local04
17e4c     10 2B 82 F1 | 	sub	local07, local02
17e50     51 00 00 FF 
17e54     64 E5 85 F1 | 	sub	objptr, ##41828
17e58     F2 12 02 FB | 	rdlong	arg01, objptr
17e5c     12 13 02 F1 | 	add	arg01, local04
17e60     48 4E 85 F1 | 	sub	fp, #72
17e64     0A 1E 66 F0 | 	shl	local01, #10
17e68     0F 13 02 F1 | 	add	arg01, local01
17e6c     18 24 62 FD | 	getqx	local04
17e70     12 2B 02 F1 | 	add	local07, local04
17e74     14 2B 02 F1 | 	add	local07, local06
17e78     2C 59 B0 FD | 	call	#_pspeek
17e7c     15 FB 41 FC | 	wrbyte	result1, local07
17e80     54 4E 05 F1 | 	add	fp, #84
17e84     A7 2A 02 FB | 	rdlong	local07, fp
17e88     01 2A 06 F1 | 	add	local07, #1
17e8c     A7 2A 62 FC | 	wrlong	local07, fp
17e90     54 4E 85 F1 | 	sub	fp, #84
17e94     4C FF 9F FD | 	jmp	#LR__1992
17e98                 | LR__1993
17e98     50 4E 05 F1 | 	add	fp, #80
17e9c     A7 2A 02 FB | 	rdlong	local07, fp
17ea0     01 2A 06 F1 | 	add	local07, #1
17ea4     A7 2A 62 FC | 	wrlong	local07, fp
17ea8     50 4E 85 F1 | 	sub	fp, #80
17eac     F8 FE 9F FD | 	jmp	#LR__1991
17eb0                 | LR__1994
17eb0     3C 4E 05 F1 | 	add	fp, #60
17eb4     A7 2A 02 FB | 	rdlong	local07, fp
17eb8     15 13 02 F6 | 	mov	arg01, local07
17ebc     3C 4E 85 F1 | 	sub	fp, #60
17ec0     02 2A 66 F0 | 	shl	local07, #2
17ec4     51 00 00 FF 
17ec8     64 E5 05 F1 | 	add	objptr, ##41828
17ecc     F2 2A 02 F1 | 	add	local07, objptr
17ed0     15 15 02 FB | 	rdlong	arg02, local07
17ed4     51 00 00 FF 
17ed8     64 E5 85 F1 | 	sub	objptr, ##41828
17edc     98 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17ee0     3C 4E 05 F1 | 	add	fp, #60
17ee4     A7 12 02 FB | 	rdlong	arg01, fp
17ee8     0C 4E 05 F1 | 	add	fp, #12
17eec     A7 14 02 FB | 	rdlong	arg02, fp
17ef0     04 4E 05 F1 | 	add	fp, #4
17ef4     A7 16 02 FB | 	rdlong	arg03, fp
17ef8     4C 4E 85 F1 | 	sub	fp, #76
17efc     08 66 B0 FD | 	call	#_hg010b_spin2_setspritesize
17f00     A7 F0 03 F6 | 	mov	ptra, fp
17f04     B2 00 A0 FD | 	call	#popregs_
17f08                 | _do_defsprite_ret
17f08     2D 00 64 FD | 	ret
17f0c                 | 
17f0c                 | ' 
17f0c                 | ' sub do_sprite
17f0c                 | _do_sprite
17f0c     00 4A 05 F6 | 	mov	COUNT_, #0
17f10     A8 00 A0 FD | 	call	#pushregs_
17f14     30 F0 07 F1 | 	add	ptra, #48
17f18     08 33 BF FD | 	call	#_pop
17f1c     FD 16 02 F6 | 	mov	arg03, result1
17f20     FE 14 02 F6 | 	mov	arg02, result2
17f24     FF 12 02 F6 | 	mov	arg01, result3
17f28     18 4E 05 F1 | 	add	fp, #24
17f2c     A7 16 62 FC | 	wrlong	arg03, fp
17f30     04 4E 05 F1 | 	add	fp, #4
17f34     A7 14 62 FC | 	wrlong	arg02, fp
17f38     04 4E 05 F1 | 	add	fp, #4
17f3c     A7 12 62 FC | 	wrlong	arg01, fp
17f40     20 4E 85 F1 | 	sub	fp, #32
17f44     DC 32 BF FD | 	call	#_pop
17f48     FD 16 02 F6 | 	mov	arg03, result1
17f4c     FE 14 02 F6 | 	mov	arg02, result2
17f50     FF 12 02 F6 | 	mov	arg01, result3
17f54     0C 4E 05 F1 | 	add	fp, #12
17f58     A7 16 62 FC | 	wrlong	arg03, fp
17f5c     04 4E 05 F1 | 	add	fp, #4
17f60     A7 14 62 FC | 	wrlong	arg02, fp
17f64     04 4E 05 F1 | 	add	fp, #4
17f68     A7 12 62 FC | 	wrlong	arg01, fp
17f6c     14 4E 85 F1 | 	sub	fp, #20
17f70     B0 32 BF FD | 	call	#_pop
17f74     FF 16 02 F6 | 	mov	arg03, result3
17f78     A7 FA 61 FC | 	wrlong	result1, fp
17f7c     04 4E 05 F1 | 	add	fp, #4
17f80     A7 FC 61 FC | 	wrlong	result2, fp
17f84     04 4E 05 F1 | 	add	fp, #4
17f88     A7 16 62 FC | 	wrlong	arg03, fp
17f8c     08 4E 85 F1 | 	sub	fp, #8
17f90     A7 12 02 F6 | 	mov	arg01, fp
17f94     58 DC BF FD | 	call	#_converttoint
17f98     24 4E 05 F1 | 	add	fp, #36
17f9c     A7 FA 61 FC | 	wrlong	result1, fp
17fa0     18 4E 85 F1 | 	sub	fp, #24
17fa4     A7 12 02 F6 | 	mov	arg01, fp
17fa8     0C 4E 85 F1 | 	sub	fp, #12
17fac     40 DC BF FD | 	call	#_converttoint
17fb0     28 4E 05 F1 | 	add	fp, #40
17fb4     A7 FA 61 FC | 	wrlong	result1, fp
17fb8     10 4E 85 F1 | 	sub	fp, #16
17fbc     A7 12 02 F6 | 	mov	arg01, fp
17fc0     18 4E 85 F1 | 	sub	fp, #24
17fc4     28 DC BF FD | 	call	#_converttoint
17fc8     2C 4E 05 F1 | 	add	fp, #44
17fcc     A7 FA 61 FC | 	wrlong	result1, fp
17fd0     08 4E 85 F1 | 	sub	fp, #8
17fd4     A7 12 02 FB | 	rdlong	arg01, fp
17fd8     04 4E 05 F1 | 	add	fp, #4
17fdc     A7 14 02 FB | 	rdlong	arg02, fp
17fe0     FD 16 02 F6 | 	mov	arg03, result1
17fe4     28 4E 85 F1 | 	sub	fp, #40
17fe8     B4 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
17fec     A7 F0 03 F6 | 	mov	ptra, fp
17ff0     B2 00 A0 FD | 	call	#popregs_
17ff4                 | _do_sprite_ret
17ff4     2D 00 64 FD | 	ret
17ff8                 | 
17ff8                 | ' 
17ff8                 | ' sub do_mousex
17ff8                 | _do_mousex
17ff8     00 4A 05 F6 | 	mov	COUNT_, #0
17ffc     A8 00 A0 FD | 	call	#pushregs_
18000     0C F0 07 F1 | 	add	ptra, #12
18004     08 4E 05 F1 | 	add	fp, #8
18008     A7 3A 68 FC | 	wrlong	#29, fp
1800c     08 4E 85 F1 | 	sub	fp, #8
18010     51 00 00 FF 
18014     1C E5 05 F1 | 	add	objptr, ##41756
18018     F2 12 02 FB | 	rdlong	arg01, objptr
1801c     51 00 00 FF 
18020     1C E5 85 F1 | 	sub	objptr, ##41756
18024     A7 12 62 FC | 	wrlong	arg01, fp
18028     A7 12 02 F6 | 	mov	arg01, fp
1802c     8C 32 BF FD | 	call	#_push
18030     A7 F0 03 F6 | 	mov	ptra, fp
18034     B2 00 A0 FD | 	call	#popregs_
18038                 | _do_mousex_ret
18038     2D 00 64 FD | 	ret
1803c                 | 
1803c                 | ' 
1803c                 | ' sub do_mousey
1803c                 | _do_mousey
1803c     00 4A 05 F6 | 	mov	COUNT_, #0
18040     A8 00 A0 FD | 	call	#pushregs_
18044     0C F0 07 F1 | 	add	ptra, #12
18048     08 4E 05 F1 | 	add	fp, #8
1804c     A7 3A 68 FC | 	wrlong	#29, fp
18050     08 4E 85 F1 | 	sub	fp, #8
18054     51 00 00 FF 
18058     20 E5 05 F1 | 	add	objptr, ##41760
1805c     F2 12 02 FB | 	rdlong	arg01, objptr
18060     51 00 00 FF 
18064     20 E5 85 F1 | 	sub	objptr, ##41760
18068     A7 12 62 FC | 	wrlong	arg01, fp
1806c     A7 12 02 F6 | 	mov	arg01, fp
18070     48 32 BF FD | 	call	#_push
18074     A7 F0 03 F6 | 	mov	ptra, fp
18078     B2 00 A0 FD | 	call	#popregs_
1807c                 | _do_mousey_ret
1807c     2D 00 64 FD | 	ret
18080                 | 
18080                 | ' 
18080                 | ' sub do_mousew
18080                 | _do_mousew
18080     00 4A 05 F6 | 	mov	COUNT_, #0
18084     A8 00 A0 FD | 	call	#pushregs_
18088     0C F0 07 F1 | 	add	ptra, #12
1808c     08 4E 05 F1 | 	add	fp, #8
18090     A7 38 68 FC | 	wrlong	#28, fp
18094     08 4E 85 F1 | 	sub	fp, #8
18098     51 00 00 FF 
1809c     28 E5 05 F1 | 	add	objptr, ##41768
180a0     F2 12 02 FB | 	rdlong	arg01, objptr
180a4     51 00 00 FF 
180a8     28 E5 85 F1 | 	sub	objptr, ##41768
180ac     A7 12 62 FC | 	wrlong	arg01, fp
180b0     A7 12 02 F6 | 	mov	arg01, fp
180b4     04 32 BF FD | 	call	#_push
180b8     A7 F0 03 F6 | 	mov	ptra, fp
180bc     B2 00 A0 FD | 	call	#popregs_
180c0                 | _do_mousew_ret
180c0     2D 00 64 FD | 	ret
180c4                 | 
180c4                 | ' 
180c4                 | ' sub do_mousek
180c4                 | _do_mousek
180c4     00 4A 05 F6 | 	mov	COUNT_, #0
180c8     A8 00 A0 FD | 	call	#pushregs_
180cc     0C F0 07 F1 | 	add	ptra, #12
180d0     08 4E 05 F1 | 	add	fp, #8
180d4     A7 3A 68 FC | 	wrlong	#29, fp
180d8     08 4E 85 F1 | 	sub	fp, #8
180dc     51 00 00 FF 
180e0     24 E5 05 F1 | 	add	objptr, ##41764
180e4     F2 12 02 FB | 	rdlong	arg01, objptr
180e8     51 00 00 FF 
180ec     24 E5 85 F1 | 	sub	objptr, ##41764
180f0     A7 12 62 FC | 	wrlong	arg01, fp
180f4     A7 12 02 F6 | 	mov	arg01, fp
180f8     C0 31 BF FD | 	call	#_push
180fc     A7 F0 03 F6 | 	mov	ptra, fp
18100     B2 00 A0 FD | 	call	#popregs_
18104                 | _do_mousek_ret
18104     2D 00 64 FD | 	ret
18108                 | 
18108                 | ' 
18108                 | ' 
18108                 | ' sub do_rdpin
18108                 | _do_rdpin
18108     00 4A 05 F6 | 	mov	COUNT_, #0
1810c     A8 00 A0 FD | 	call	#pushregs_
18110     0C F0 07 F1 | 	add	ptra, #12
18114     0C 31 BF FD | 	call	#_pop
18118     A7 FA 61 FC | 	wrlong	result1, fp
1811c     04 4E 05 F1 | 	add	fp, #4
18120     A7 FC 61 FC | 	wrlong	result2, fp
18124     04 4E 05 F1 | 	add	fp, #4
18128     A7 FE 61 FC | 	wrlong	result3, fp
1812c     08 4E 85 F1 | 	sub	fp, #8
18130     A7 12 02 F6 | 	mov	arg01, fp
18134     B8 DA BF FD | 	call	#_converttoint
18138     FD FA 89 FA | 	rdpin	result1, result1
1813c     52 00 00 FF 
18140     14 E4 05 F1 | 	add	objptr, ##42004
18144     F2 FA 61 FC | 	wrlong	result1, objptr
18148     52 00 00 FF 
1814c     14 E4 85 F1 | 	sub	objptr, ##42004
18150     08 4E 05 F1 | 	add	fp, #8
18154     A7 3A 68 FC | 	wrlong	#29, fp
18158     08 4E 85 F1 | 	sub	fp, #8
1815c     A7 08 68 FC | 	wrlong	#4, fp
18160     A7 12 02 F6 | 	mov	arg01, fp
18164     54 31 BF FD | 	call	#_push
18168     A7 F0 03 F6 | 	mov	ptra, fp
1816c     B2 00 A0 FD | 	call	#popregs_
18170                 | _do_rdpin_ret
18170     2D 00 64 FD | 	ret
18174                 | 
18174                 | ' 
18174                 | ' sub do_rqpin
18174                 | _do_rqpin
18174     00 4A 05 F6 | 	mov	COUNT_, #0
18178     A8 00 A0 FD | 	call	#pushregs_
1817c     0C F0 07 F1 | 	add	ptra, #12
18180     A0 30 BF FD | 	call	#_pop
18184     A7 FA 61 FC | 	wrlong	result1, fp
18188     04 4E 05 F1 | 	add	fp, #4
1818c     A7 FC 61 FC | 	wrlong	result2, fp
18190     04 4E 05 F1 | 	add	fp, #4
18194     A7 FE 61 FC | 	wrlong	result3, fp
18198     08 4E 85 F1 | 	sub	fp, #8
1819c     A7 12 02 F6 | 	mov	arg01, fp
181a0     4C DA BF FD | 	call	#_converttoint
181a4     FD 12 02 F6 | 	mov	arg01, result1
181a8     00 FA 05 F6 | 	mov	result1, #0
181ac     09 FB 81 FA | 	rqpin	result1, arg01
181b0     52 00 00 FF 
181b4     14 E4 05 F1 | 	add	objptr, ##42004
181b8     F2 FA 61 FC | 	wrlong	result1, objptr
181bc     52 00 00 FF 
181c0     14 E4 85 F1 | 	sub	objptr, ##42004
181c4     08 4E 05 F1 | 	add	fp, #8
181c8     A7 3A 68 FC | 	wrlong	#29, fp
181cc     08 4E 85 F1 | 	sub	fp, #8
181d0     A7 08 68 FC | 	wrlong	#4, fp
181d4     A7 12 02 F6 | 	mov	arg01, fp
181d8     E0 30 BF FD | 	call	#_push
181dc     A7 F0 03 F6 | 	mov	ptra, fp
181e0     B2 00 A0 FD | 	call	#popregs_
181e4                 | _do_rqpin_ret
181e4     2D 00 64 FD | 	ret
181e8                 | 
181e8                 | ' 
181e8                 | ' sub do_pinread
181e8                 | _do_pinread
181e8     00 4A 05 F6 | 	mov	COUNT_, #0
181ec     A8 00 A0 FD | 	call	#pushregs_
181f0     0C F0 07 F1 | 	add	ptra, #12
181f4     2C 30 BF FD | 	call	#_pop
181f8     A7 FA 61 FC | 	wrlong	result1, fp
181fc     04 4E 05 F1 | 	add	fp, #4
18200     A7 FC 61 FC | 	wrlong	result2, fp
18204     04 4E 05 F1 | 	add	fp, #4
18208     A7 FE 61 FC | 	wrlong	result3, fp
1820c     08 4E 85 F1 | 	sub	fp, #8
18210     A7 12 02 F6 | 	mov	arg01, fp
18214     D8 D9 BF FD | 	call	#_converttoint
18218     FD 12 02 F6 | 	mov	arg01, result1
1821c     20 12 CE F7 | 	test	arg01, #32 wz
18220     FF FB 01 56 |  if_ne	mov	result1, inb
18224     FE FB 01 A6 |  if_e	mov	result1, ina
18228     09 FB 41 F0 | 	shr	result1, arg01
1822c     06 12 46 F0 | 	shr	arg01, #6
18230     09 FB 41 F7 | 	zerox	result1, arg01
18234     52 00 00 FF 
18238     14 E4 05 F1 | 	add	objptr, ##42004
1823c     F2 FA 61 FC | 	wrlong	result1, objptr
18240     52 00 00 FF 
18244     14 E4 85 F1 | 	sub	objptr, ##42004
18248     08 4E 05 F1 | 	add	fp, #8
1824c     A7 3A 68 FC | 	wrlong	#29, fp
18250     08 4E 85 F1 | 	sub	fp, #8
18254     A7 08 68 FC | 	wrlong	#4, fp
18258     A7 12 02 F6 | 	mov	arg01, fp
1825c     5C 30 BF FD | 	call	#_push
18260     A7 F0 03 F6 | 	mov	ptra, fp
18264     B2 00 A0 FD | 	call	#popregs_
18268                 | _do_pinread_ret
18268     2D 00 64 FD | 	ret
1826c                 | 
1826c                 | ' 
1826c                 | ' sub do_gettime
1826c                 | _do_gettime
1826c     02 4A 05 F6 | 	mov	COUNT_, #2
18270     A8 00 A0 FD | 	call	#pushregs_
18274     14 F0 07 F1 | 	add	ptra, #20
18278                 | ' 
18278                 | ' const asm 
18278     1A 1E 72 FD | 	getct	local01 wc
1827c     1A 20 62 FD | 	getct	local02
18280                 | ' 
18280                 | ' return hi1, lo1
18280     10 FD 01 F6 | 	mov	result2, local02
18284     A7 1E 62 FC | 	wrlong	local01, fp
18288     04 4E 05 F1 | 	add	fp, #4
1828c     A7 FC 61 FC | 	wrlong	result2, fp
18290     0C 4E 05 F1 | 	add	fp, #12
18294     A7 3A 68 FC | 	wrlong	#29, fp
18298     0C 4E 85 F1 | 	sub	fp, #12
1829c     A7 12 02 FB | 	rdlong	arg01, fp
182a0     04 4E 05 F1 | 	add	fp, #4
182a4     A7 12 62 FC | 	wrlong	arg01, fp
182a8     08 4E 85 F1 | 	sub	fp, #8
182ac     A7 12 02 FB | 	rdlong	arg01, fp
182b0     0C 4E 05 F1 | 	add	fp, #12
182b4     A7 12 62 FC | 	wrlong	arg01, fp
182b8     04 4E 85 F1 | 	sub	fp, #4
182bc     A7 12 02 F6 | 	mov	arg01, fp
182c0     08 4E 85 F1 | 	sub	fp, #8
182c4     F4 2F BF FD | 	call	#_push
182c8     A7 F0 03 F6 | 	mov	ptra, fp
182cc     B2 00 A0 FD | 	call	#popregs_
182d0                 | _do_gettime_ret
182d0     2D 00 64 FD | 	ret
182d4                 | 
182d4                 | '    
182d4                 | ' 
182d4                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
182d4                 | ' 
182d4                 | ' '' ----------------------------- Clear the screen
182d4                 | ' 
182d4                 | ' sub do_cls
182d4                 | _do_cls
182d4     37 00 00 FF 
182d8     3C E4 05 F1 | 	add	objptr, ##28220
182dc     F2 12 02 FB | 	rdlong	arg01, objptr
182e0     04 E4 85 F1 | 	sub	objptr, #4
182e4     F2 14 02 FB | 	rdlong	arg02, objptr
182e8     37 00 00 FF 
182ec     38 E4 85 F1 | 	sub	objptr, ##28216
182f0     34 6F B0 FD | 	call	#_hg010b_spin2_cls
182f4     37 00 00 FF 
182f8     3C E4 05 F1 | 	add	objptr, ##28220
182fc     F2 14 02 FB | 	rdlong	arg02, objptr
18300     14 E4 85 F1 | 	sub	objptr, #20
18304     F2 14 62 FC | 	wrlong	arg02, objptr
18308     37 00 00 FF 
1830c     28 E4 85 F1 | 	sub	objptr, ##28200
18310                 | _do_cls_ret
18310     2D 00 64 FD | 	ret
18314                 | 
18314                 | ' 
18314                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
18314                 | ' 
18314                 | ' sub do_color
18314                 | _do_color
18314     03 4A 05 F6 | 	mov	COUNT_, #3
18318     A8 00 A0 FD | 	call	#pushregs_
1831c     04 2F BF FD | 	call	#_pop
18320     FD 1E 02 F6 | 	mov	local01, result1
18324     FE 20 02 F6 | 	mov	local02, result2
18328     FF 22 02 F6 | 	mov	local03, result3
1832c     37 00 00 FF 
18330     28 E4 05 F1 | 	add	objptr, ##28200
18334     F2 1E 62 FC | 	wrlong	local01, objptr
18338     37 00 00 FF 
1833c     28 E4 85 F1 | 	sub	objptr, ##28200
18340     A7 F0 03 F6 | 	mov	ptra, fp
18344     B2 00 A0 FD | 	call	#popregs_
18348                 | _do_color_ret
18348     2D 00 64 FD | 	ret
1834c                 | 
1834c                 | ' 
1834c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
1834c                 | ' 
1834c                 | ' sub do_plot
1834c                 | _do_plot
1834c     00 4A 05 F6 | 	mov	COUNT_, #0
18350     A8 00 A0 FD | 	call	#pushregs_
18354     20 F0 07 F1 | 	add	ptra, #32
18358     C8 2E BF FD | 	call	#_pop
1835c     FD 16 02 F6 | 	mov	arg03, result1
18360     FE 14 02 F6 | 	mov	arg02, result2
18364     FF 12 02 F6 | 	mov	arg01, result3
18368     0C 4E 05 F1 | 	add	fp, #12
1836c     A7 16 62 FC | 	wrlong	arg03, fp
18370     04 4E 05 F1 | 	add	fp, #4
18374     A7 14 62 FC | 	wrlong	arg02, fp
18378     04 4E 05 F1 | 	add	fp, #4
1837c     A7 12 62 FC | 	wrlong	arg01, fp
18380     14 4E 85 F1 | 	sub	fp, #20
18384     9C 2E BF FD | 	call	#_pop
18388     FF 16 02 F6 | 	mov	arg03, result3
1838c     A7 FA 61 FC | 	wrlong	result1, fp
18390     04 4E 05 F1 | 	add	fp, #4
18394     A7 FC 61 FC | 	wrlong	result2, fp
18398     04 4E 05 F1 | 	add	fp, #4
1839c     A7 16 62 FC | 	wrlong	arg03, fp
183a0     08 4E 85 F1 | 	sub	fp, #8
183a4     A7 12 02 F6 | 	mov	arg01, fp
183a8     44 D8 BF FD | 	call	#_converttoint
183ac     18 4E 05 F1 | 	add	fp, #24
183b0     A7 FA 61 FC | 	wrlong	result1, fp
183b4     0C 4E 85 F1 | 	sub	fp, #12
183b8     A7 12 02 F6 | 	mov	arg01, fp
183bc     0C 4E 85 F1 | 	sub	fp, #12
183c0     2C D8 BF FD | 	call	#_converttoint
183c4     1C 4E 05 F1 | 	add	fp, #28
183c8     A7 FA 61 FC | 	wrlong	result1, fp
183cc     04 4E 85 F1 | 	sub	fp, #4
183d0     A7 16 02 FB | 	rdlong	arg03, fp
183d4     37 00 00 FF 
183d8     2C E4 05 F1 | 	add	objptr, ##28204
183dc     F2 16 62 FC | 	wrlong	arg03, objptr
183e0     04 4E 05 F1 | 	add	fp, #4
183e4     A7 14 02 FB | 	rdlong	arg02, fp
183e8     1C 4E 85 F1 | 	sub	fp, #28
183ec     04 E4 05 F1 | 	add	objptr, #4
183f0     F2 14 62 FC | 	wrlong	arg02, objptr
183f4     04 E4 85 F1 | 	sub	objptr, #4
183f8     F2 12 02 FB | 	rdlong	arg01, objptr
183fc     04 E4 85 F1 | 	sub	objptr, #4
18400     F2 16 02 FB | 	rdlong	arg03, objptr
18404     37 00 00 FF 
18408     28 E4 85 F1 | 	sub	objptr, ##28200
1840c     44 61 B0 FD | 	call	#_hg010b_spin2_putpixel
18410     A7 F0 03 F6 | 	mov	ptra, fp
18414     B2 00 A0 FD | 	call	#popregs_
18418                 | _do_plot_ret
18418     2D 00 64 FD | 	ret
1841c                 | 
1841c                 | ' 
1841c                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
1841c                 | ' 
1841c                 | ' sub do_draw
1841c                 | _do_draw
1841c     00 4A 05 F6 | 	mov	COUNT_, #0
18420     A8 00 A0 FD | 	call	#pushregs_
18424     20 F0 07 F1 | 	add	ptra, #32
18428     F8 2D BF FD | 	call	#_pop
1842c     FD 1A 02 F6 | 	mov	arg05, result1
18430     FE 18 02 F6 | 	mov	arg04, result2
18434     FF 16 02 F6 | 	mov	arg03, result3
18438     0C 4E 05 F1 | 	add	fp, #12
1843c     A7 1A 62 FC | 	wrlong	arg05, fp
18440     04 4E 05 F1 | 	add	fp, #4
18444     A7 18 62 FC | 	wrlong	arg04, fp
18448     04 4E 05 F1 | 	add	fp, #4
1844c     A7 16 62 FC | 	wrlong	arg03, fp
18450     14 4E 85 F1 | 	sub	fp, #20
18454     CC 2D BF FD | 	call	#_pop
18458     FF 1A 02 F6 | 	mov	arg05, result3
1845c     A7 FA 61 FC | 	wrlong	result1, fp
18460     04 4E 05 F1 | 	add	fp, #4
18464     A7 FC 61 FC | 	wrlong	result2, fp
18468     04 4E 05 F1 | 	add	fp, #4
1846c     A7 1A 62 FC | 	wrlong	arg05, fp
18470     08 4E 85 F1 | 	sub	fp, #8
18474     A7 12 02 F6 | 	mov	arg01, fp
18478     74 D7 BF FD | 	call	#_converttoint
1847c     18 4E 05 F1 | 	add	fp, #24
18480     A7 FA 61 FC | 	wrlong	result1, fp
18484     0C 4E 85 F1 | 	sub	fp, #12
18488     A7 12 02 F6 | 	mov	arg01, fp
1848c     0C 4E 85 F1 | 	sub	fp, #12
18490     5C D7 BF FD | 	call	#_converttoint
18494     1C 4E 05 F1 | 	add	fp, #28
18498     A7 FA 61 FC | 	wrlong	result1, fp
1849c     37 00 00 FF 
184a0     2C E4 05 F1 | 	add	objptr, ##28204
184a4     F2 12 02 FB | 	rdlong	arg01, objptr
184a8     04 E4 05 F1 | 	add	objptr, #4
184ac     F2 14 02 FB | 	rdlong	arg02, objptr
184b0     04 4E 85 F1 | 	sub	fp, #4
184b4     A7 16 02 FB | 	rdlong	arg03, fp
184b8     FD 18 02 F6 | 	mov	arg04, result1
184bc     18 4E 85 F1 | 	sub	fp, #24
184c0     08 E4 85 F1 | 	sub	objptr, #8
184c4     F2 1A 02 FB | 	rdlong	arg05, objptr
184c8     37 00 00 FF 
184cc     28 E4 85 F1 | 	sub	objptr, ##28200
184d0     30 63 B0 FD | 	call	#_hg010b_spin2_draw
184d4     18 4E 05 F1 | 	add	fp, #24
184d8     A7 1A 02 FB | 	rdlong	arg05, fp
184dc     37 00 00 FF 
184e0     2C E4 05 F1 | 	add	objptr, ##28204
184e4     F2 1A 62 FC | 	wrlong	arg05, objptr
184e8     04 4E 05 F1 | 	add	fp, #4
184ec     A7 1A 02 FB | 	rdlong	arg05, fp
184f0     1C 4E 85 F1 | 	sub	fp, #28
184f4     04 E4 05 F1 | 	add	objptr, #4
184f8     F2 1A 62 FC | 	wrlong	arg05, objptr
184fc     37 00 00 FF 
18500     30 E4 85 F1 | 	sub	objptr, ##28208
18504     A7 F0 03 F6 | 	mov	ptra, fp
18508     B2 00 A0 FD | 	call	#popregs_
1850c                 | _do_draw_ret
1850c     2D 00 64 FD | 	ret
18510                 | 
18510                 | ' 
18510                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
18510                 | ' 
18510                 | ' sub do_fcircle
18510                 | _do_fcircle
18510     02 4A 05 F6 | 	mov	COUNT_, #2
18514     A8 00 A0 FD | 	call	#pushregs_
18518     24 F0 07 F1 | 	add	ptra, #36
1851c     04 2D BF FD | 	call	#_pop
18520     FD 18 02 F6 | 	mov	arg04, result1
18524     FE 16 02 F6 | 	mov	arg03, result2
18528     FF 14 02 F6 | 	mov	arg02, result3
1852c     18 4E 05 F1 | 	add	fp, #24
18530     A7 18 62 FC | 	wrlong	arg04, fp
18534     04 4E 05 F1 | 	add	fp, #4
18538     A7 16 62 FC | 	wrlong	arg03, fp
1853c     04 4E 05 F1 | 	add	fp, #4
18540     A7 14 62 FC | 	wrlong	arg02, fp
18544     20 4E 85 F1 | 	sub	fp, #32
18548     D8 2C BF FD | 	call	#_pop
1854c     FD 18 02 F6 | 	mov	arg04, result1
18550     FE 16 02 F6 | 	mov	arg03, result2
18554     FF 1E 02 F6 | 	mov	local01, result3
18558     0C 4E 05 F1 | 	add	fp, #12
1855c     A7 18 62 FC | 	wrlong	arg04, fp
18560     04 4E 05 F1 | 	add	fp, #4
18564     A7 16 62 FC | 	wrlong	arg03, fp
18568     04 4E 05 F1 | 	add	fp, #4
1856c     A7 1E 62 FC | 	wrlong	local01, fp
18570     14 4E 85 F1 | 	sub	fp, #20
18574     AC 2C BF FD | 	call	#_pop
18578     A7 FA 61 FC | 	wrlong	result1, fp
1857c     04 4E 05 F1 | 	add	fp, #4
18580     A7 FC 61 FC | 	wrlong	result2, fp
18584     04 4E 05 F1 | 	add	fp, #4
18588     A7 FE 61 FC | 	wrlong	result3, fp
1858c                 | ' 
1858c                 | ' t3=pop()
1858c                 | ' t2=pop()
1858c                 | ' t1=pop()
1858c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1858c     FF 18 02 F6 | 	mov	arg04, result3
18590     08 4E 85 F1 | 	sub	fp, #8
18594     1C 18 0E F2 | 	cmp	arg04, #28 wz
18598     08 4E 05 51 |  if_ne	add	fp, #8
1859c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
185a0     08 4E 85 51 |  if_ne	sub	fp, #8
185a4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
185a8     7C 00 90 5D |  if_ne	jmp	#LR__2000
185ac     14 4E 05 F1 | 	add	fp, #20
185b0     A7 1E 02 FB | 	rdlong	local01, fp
185b4     14 4E 85 F1 | 	sub	fp, #20
185b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
185bc     14 4E 05 51 |  if_ne	add	fp, #20
185c0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185c4     14 4E 85 51 |  if_ne	sub	fp, #20
185c8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185cc     58 00 90 5D |  if_ne	jmp	#LR__2000
185d0     20 4E 05 F1 | 	add	fp, #32
185d4     A7 1E 02 FB | 	rdlong	local01, fp
185d8     20 4E 85 F1 | 	sub	fp, #32
185dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
185e0     20 4E 05 51 |  if_ne	add	fp, #32
185e4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185e8     20 4E 85 51 |  if_ne	sub	fp, #32
185ec     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185f0     34 00 90 5D |  if_ne	jmp	#LR__2000
185f4     A7 12 02 FB | 	rdlong	arg01, fp
185f8     0C 4E 05 F1 | 	add	fp, #12
185fc     A7 14 02 FB | 	rdlong	arg02, fp
18600     0C 4E 05 F1 | 	add	fp, #12
18604     A7 16 02 FB | 	rdlong	arg03, fp
18608     18 4E 85 F1 | 	sub	fp, #24
1860c     37 00 00 FF 
18610     28 E4 05 F1 | 	add	objptr, ##28200
18614     F2 18 02 FB | 	rdlong	arg04, objptr
18618     37 00 00 FF 
1861c     28 E4 85 F1 | 	sub	objptr, ##28200
18620     64 66 B0 FD | 	call	#_hg010b_spin2_fcircle
18624                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
18624     54 00 90 FD | 	jmp	#LR__2001
18628                 | LR__2000
18628     A7 12 02 F6 | 	mov	arg01, fp
1862c     C0 D5 BF FD | 	call	#_converttoint
18630     FD 1E 02 F6 | 	mov	local01, result1
18634     0C 4E 05 F1 | 	add	fp, #12
18638     A7 12 02 F6 | 	mov	arg01, fp
1863c     0C 4E 85 F1 | 	sub	fp, #12
18640     AC D5 BF FD | 	call	#_converttoint
18644     FD 20 02 F6 | 	mov	local02, result1
18648     18 4E 05 F1 | 	add	fp, #24
1864c     A7 12 02 F6 | 	mov	arg01, fp
18650     18 4E 85 F1 | 	sub	fp, #24
18654     98 D5 BF FD | 	call	#_converttoint
18658     FD 16 02 F6 | 	mov	arg03, result1
1865c     37 00 00 FF 
18660     28 E4 05 F1 | 	add	objptr, ##28200
18664     F2 18 02 FB | 	rdlong	arg04, objptr
18668     37 00 00 FF 
1866c     28 E4 85 F1 | 	sub	objptr, ##28200
18670     0F 13 02 F6 | 	mov	arg01, local01
18674     10 15 02 F6 | 	mov	arg02, local02
18678     0C 66 B0 FD | 	call	#_hg010b_spin2_fcircle
1867c                 | LR__2001
1867c     A7 F0 03 F6 | 	mov	ptra, fp
18680     B2 00 A0 FD | 	call	#popregs_
18684                 | _do_fcircle_ret
18684     2D 00 64 FD | 	ret
18688                 | 
18688                 | ' 
18688                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
18688                 | ' 
18688                 | ' sub do_circle
18688                 | _do_circle
18688     02 4A 05 F6 | 	mov	COUNT_, #2
1868c     A8 00 A0 FD | 	call	#pushregs_
18690     24 F0 07 F1 | 	add	ptra, #36
18694     8C 2B BF FD | 	call	#_pop
18698     FD 18 02 F6 | 	mov	arg04, result1
1869c     FE 16 02 F6 | 	mov	arg03, result2
186a0     FF 14 02 F6 | 	mov	arg02, result3
186a4     18 4E 05 F1 | 	add	fp, #24
186a8     A7 18 62 FC | 	wrlong	arg04, fp
186ac     04 4E 05 F1 | 	add	fp, #4
186b0     A7 16 62 FC | 	wrlong	arg03, fp
186b4     04 4E 05 F1 | 	add	fp, #4
186b8     A7 14 62 FC | 	wrlong	arg02, fp
186bc     20 4E 85 F1 | 	sub	fp, #32
186c0     60 2B BF FD | 	call	#_pop
186c4     FD 18 02 F6 | 	mov	arg04, result1
186c8     FE 16 02 F6 | 	mov	arg03, result2
186cc     FF 1E 02 F6 | 	mov	local01, result3
186d0     0C 4E 05 F1 | 	add	fp, #12
186d4     A7 18 62 FC | 	wrlong	arg04, fp
186d8     04 4E 05 F1 | 	add	fp, #4
186dc     A7 16 62 FC | 	wrlong	arg03, fp
186e0     04 4E 05 F1 | 	add	fp, #4
186e4     A7 1E 62 FC | 	wrlong	local01, fp
186e8     14 4E 85 F1 | 	sub	fp, #20
186ec     34 2B BF FD | 	call	#_pop
186f0     A7 FA 61 FC | 	wrlong	result1, fp
186f4     04 4E 05 F1 | 	add	fp, #4
186f8     A7 FC 61 FC | 	wrlong	result2, fp
186fc     04 4E 05 F1 | 	add	fp, #4
18700     A7 FE 61 FC | 	wrlong	result3, fp
18704                 | ' 
18704                 | ' t3=pop()
18704                 | ' t2=pop()
18704                 | ' t1=pop()
18704                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
18704     FF 18 02 F6 | 	mov	arg04, result3
18708     08 4E 85 F1 | 	sub	fp, #8
1870c     1C 18 0E F2 | 	cmp	arg04, #28 wz
18710     08 4E 05 51 |  if_ne	add	fp, #8
18714     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18718     08 4E 85 51 |  if_ne	sub	fp, #8
1871c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18720     7C 00 90 5D |  if_ne	jmp	#LR__2010
18724     14 4E 05 F1 | 	add	fp, #20
18728     A7 1E 02 FB | 	rdlong	local01, fp
1872c     14 4E 85 F1 | 	sub	fp, #20
18730     1C 1E 0E F2 | 	cmp	local01, #28 wz
18734     14 4E 05 51 |  if_ne	add	fp, #20
18738     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1873c     14 4E 85 51 |  if_ne	sub	fp, #20
18740     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18744     58 00 90 5D |  if_ne	jmp	#LR__2010
18748     20 4E 05 F1 | 	add	fp, #32
1874c     A7 1E 02 FB | 	rdlong	local01, fp
18750     20 4E 85 F1 | 	sub	fp, #32
18754     1C 1E 0E F2 | 	cmp	local01, #28 wz
18758     20 4E 05 51 |  if_ne	add	fp, #32
1875c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18760     20 4E 85 51 |  if_ne	sub	fp, #32
18764     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18768     34 00 90 5D |  if_ne	jmp	#LR__2010
1876c     A7 12 02 FB | 	rdlong	arg01, fp
18770     0C 4E 05 F1 | 	add	fp, #12
18774     A7 14 02 FB | 	rdlong	arg02, fp
18778     0C 4E 05 F1 | 	add	fp, #12
1877c     A7 16 02 FB | 	rdlong	arg03, fp
18780     18 4E 85 F1 | 	sub	fp, #24
18784     37 00 00 FF 
18788     28 E4 05 F1 | 	add	objptr, ##28200
1878c     F2 18 02 FB | 	rdlong	arg04, objptr
18790     37 00 00 FF 
18794     28 E4 85 F1 | 	sub	objptr, ##28200
18798     F8 65 B0 FD | 	call	#_hg010b_spin2_circle
1879c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1879c     54 00 90 FD | 	jmp	#LR__2011
187a0                 | LR__2010
187a0     A7 12 02 F6 | 	mov	arg01, fp
187a4     48 D4 BF FD | 	call	#_converttoint
187a8     FD 1E 02 F6 | 	mov	local01, result1
187ac     0C 4E 05 F1 | 	add	fp, #12
187b0     A7 12 02 F6 | 	mov	arg01, fp
187b4     0C 4E 85 F1 | 	sub	fp, #12
187b8     34 D4 BF FD | 	call	#_converttoint
187bc     FD 20 02 F6 | 	mov	local02, result1
187c0     18 4E 05 F1 | 	add	fp, #24
187c4     A7 12 02 F6 | 	mov	arg01, fp
187c8     18 4E 85 F1 | 	sub	fp, #24
187cc     20 D4 BF FD | 	call	#_converttoint
187d0     FD 16 02 F6 | 	mov	arg03, result1
187d4     37 00 00 FF 
187d8     28 E4 05 F1 | 	add	objptr, ##28200
187dc     F2 18 02 FB | 	rdlong	arg04, objptr
187e0     37 00 00 FF 
187e4     28 E4 85 F1 | 	sub	objptr, ##28200
187e8     0F 13 02 F6 | 	mov	arg01, local01
187ec     10 15 02 F6 | 	mov	arg02, local02
187f0     A0 65 B0 FD | 	call	#_hg010b_spin2_circle
187f4                 | LR__2011
187f4     A7 F0 03 F6 | 	mov	ptra, fp
187f8     B2 00 A0 FD | 	call	#popregs_
187fc                 | _do_circle_ret
187fc     2D 00 64 FD | 	ret
18800                 | 
18800                 | ' 
18800                 | ' ' -------------------------- Draw a rectangle
18800                 | ' 
18800                 | ' sub do_box
18800                 | _do_box
18800     03 4A 05 F6 | 	mov	COUNT_, #3
18804     A8 00 A0 FD | 	call	#pushregs_
18808     30 F0 07 F1 | 	add	ptra, #48
1880c     14 2A BF FD | 	call	#_pop
18810     FD 1A 02 F6 | 	mov	arg05, result1
18814     FE 18 02 F6 | 	mov	arg04, result2
18818     FF 16 02 F6 | 	mov	arg03, result3
1881c     24 4E 05 F1 | 	add	fp, #36
18820     A7 1A 62 FC | 	wrlong	arg05, fp
18824     04 4E 05 F1 | 	add	fp, #4
18828     A7 18 62 FC | 	wrlong	arg04, fp
1882c     04 4E 05 F1 | 	add	fp, #4
18830     A7 16 62 FC | 	wrlong	arg03, fp
18834     2C 4E 85 F1 | 	sub	fp, #44
18838     E8 29 BF FD | 	call	#_pop
1883c     FD 1A 02 F6 | 	mov	arg05, result1
18840     FE 18 02 F6 | 	mov	arg04, result2
18844     FF 16 02 F6 | 	mov	arg03, result3
18848     18 4E 05 F1 | 	add	fp, #24
1884c     A7 1A 62 FC | 	wrlong	arg05, fp
18850     04 4E 05 F1 | 	add	fp, #4
18854     A7 18 62 FC | 	wrlong	arg04, fp
18858     04 4E 05 F1 | 	add	fp, #4
1885c     A7 16 62 FC | 	wrlong	arg03, fp
18860     20 4E 85 F1 | 	sub	fp, #32
18864     BC 29 BF FD | 	call	#_pop
18868     FD 1A 02 F6 | 	mov	arg05, result1
1886c     FE 18 02 F6 | 	mov	arg04, result2
18870     FF 1E 02 F6 | 	mov	local01, result3
18874     0C 4E 05 F1 | 	add	fp, #12
18878     A7 1A 62 FC | 	wrlong	arg05, fp
1887c     04 4E 05 F1 | 	add	fp, #4
18880     A7 18 62 FC | 	wrlong	arg04, fp
18884     04 4E 05 F1 | 	add	fp, #4
18888     A7 1E 62 FC | 	wrlong	local01, fp
1888c     14 4E 85 F1 | 	sub	fp, #20
18890     90 29 BF FD | 	call	#_pop
18894     A7 FA 61 FC | 	wrlong	result1, fp
18898     04 4E 05 F1 | 	add	fp, #4
1889c     A7 FC 61 FC | 	wrlong	result2, fp
188a0     04 4E 05 F1 | 	add	fp, #4
188a4     A7 FE 61 FC | 	wrlong	result3, fp
188a8                 | ' 
188a8                 | ' t4=pop()
188a8                 | ' t3=pop()
188a8                 | ' t2=pop()
188a8                 | ' t1=pop()
188a8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
188a8     FF 1A 02 F6 | 	mov	arg05, result3
188ac     08 4E 85 F1 | 	sub	fp, #8
188b0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
188b4     08 4E 05 51 |  if_ne	add	fp, #8
188b8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
188bc     08 4E 85 51 |  if_ne	sub	fp, #8
188c0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
188c4     A8 00 90 5D |  if_ne	jmp	#LR__2020
188c8     14 4E 05 F1 | 	add	fp, #20
188cc     A7 1E 02 FB | 	rdlong	local01, fp
188d0     14 4E 85 F1 | 	sub	fp, #20
188d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
188d8     14 4E 05 51 |  if_ne	add	fp, #20
188dc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
188e0     14 4E 85 51 |  if_ne	sub	fp, #20
188e4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
188e8     84 00 90 5D |  if_ne	jmp	#LR__2020
188ec     20 4E 05 F1 | 	add	fp, #32
188f0     A7 1E 02 FB | 	rdlong	local01, fp
188f4     20 4E 85 F1 | 	sub	fp, #32
188f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
188fc     20 4E 05 51 |  if_ne	add	fp, #32
18900     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18904     20 4E 85 51 |  if_ne	sub	fp, #32
18908     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1890c     60 00 90 5D |  if_ne	jmp	#LR__2020
18910     2C 4E 05 F1 | 	add	fp, #44
18914     A7 1E 02 FB | 	rdlong	local01, fp
18918     2C 4E 85 F1 | 	sub	fp, #44
1891c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18920     2C 4E 05 51 |  if_ne	add	fp, #44
18924     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18928     2C 4E 85 51 |  if_ne	sub	fp, #44
1892c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18930     3C 00 90 5D |  if_ne	jmp	#LR__2020
18934     A7 12 02 FB | 	rdlong	arg01, fp
18938     0C 4E 05 F1 | 	add	fp, #12
1893c     A7 14 02 FB | 	rdlong	arg02, fp
18940     0C 4E 05 F1 | 	add	fp, #12
18944     A7 16 02 FB | 	rdlong	arg03, fp
18948     0C 4E 05 F1 | 	add	fp, #12
1894c     A7 18 02 FB | 	rdlong	arg04, fp
18950     24 4E 85 F1 | 	sub	fp, #36
18954     37 00 00 FF 
18958     28 E4 05 F1 | 	add	objptr, ##28200
1895c     F2 1A 02 FB | 	rdlong	arg05, objptr
18960     37 00 00 FF 
18964     28 E4 85 F1 | 	sub	objptr, ##28200
18968     F4 65 B0 FD | 	call	#_hg010b_spin2_box
1896c                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
1896c     6C 00 90 FD | 	jmp	#LR__2021
18970                 | LR__2020
18970     A7 12 02 F6 | 	mov	arg01, fp
18974     78 D2 BF FD | 	call	#_converttoint
18978     FD 20 02 F6 | 	mov	local02, result1
1897c     0C 4E 05 F1 | 	add	fp, #12
18980     A7 12 02 F6 | 	mov	arg01, fp
18984     0C 4E 85 F1 | 	sub	fp, #12
18988     64 D2 BF FD | 	call	#_converttoint
1898c     FD 22 02 F6 | 	mov	local03, result1
18990     18 4E 05 F1 | 	add	fp, #24
18994     A7 12 02 F6 | 	mov	arg01, fp
18998     18 4E 85 F1 | 	sub	fp, #24
1899c     50 D2 BF FD | 	call	#_converttoint
189a0     FD 1E 02 F6 | 	mov	local01, result1
189a4     24 4E 05 F1 | 	add	fp, #36
189a8     A7 12 02 F6 | 	mov	arg01, fp
189ac     24 4E 85 F1 | 	sub	fp, #36
189b0     3C D2 BF FD | 	call	#_converttoint
189b4     FD 18 02 F6 | 	mov	arg04, result1
189b8     37 00 00 FF 
189bc     28 E4 05 F1 | 	add	objptr, ##28200
189c0     F2 1A 02 FB | 	rdlong	arg05, objptr
189c4     37 00 00 FF 
189c8     28 E4 85 F1 | 	sub	objptr, ##28200
189cc     10 13 02 F6 | 	mov	arg01, local02
189d0     11 15 02 F6 | 	mov	arg02, local03
189d4     0F 17 02 F6 | 	mov	arg03, local01
189d8     84 65 B0 FD | 	call	#_hg010b_spin2_box
189dc                 | LR__2021
189dc     A7 F0 03 F6 | 	mov	ptra, fp
189e0     B2 00 A0 FD | 	call	#popregs_
189e4                 | _do_box_ret
189e4     2D 00 64 FD | 	ret
189e8                 | 
189e8                 | ' 
189e8                 | ' sub do_fill
189e8                 | _do_fill
189e8     03 4A 05 F6 | 	mov	COUNT_, #3
189ec     A8 00 A0 FD | 	call	#pushregs_
189f0     30 F0 07 F1 | 	add	ptra, #48
189f4     2C 28 BF FD | 	call	#_pop
189f8     FD 18 02 F6 | 	mov	arg04, result1
189fc     FE 16 02 F6 | 	mov	arg03, result2
18a00     FF 14 02 F6 | 	mov	arg02, result3
18a04     24 4E 05 F1 | 	add	fp, #36
18a08     A7 18 62 FC | 	wrlong	arg04, fp
18a0c     04 4E 05 F1 | 	add	fp, #4
18a10     A7 16 62 FC | 	wrlong	arg03, fp
18a14     04 4E 05 F1 | 	add	fp, #4
18a18     A7 14 62 FC | 	wrlong	arg02, fp
18a1c     2C 4E 85 F1 | 	sub	fp, #44
18a20     00 28 BF FD | 	call	#_pop
18a24     FD 18 02 F6 | 	mov	arg04, result1
18a28     FE 16 02 F6 | 	mov	arg03, result2
18a2c     FF 14 02 F6 | 	mov	arg02, result3
18a30     18 4E 05 F1 | 	add	fp, #24
18a34     A7 18 62 FC | 	wrlong	arg04, fp
18a38     04 4E 05 F1 | 	add	fp, #4
18a3c     A7 16 62 FC | 	wrlong	arg03, fp
18a40     04 4E 05 F1 | 	add	fp, #4
18a44     A7 14 62 FC | 	wrlong	arg02, fp
18a48     20 4E 85 F1 | 	sub	fp, #32
18a4c     D4 27 BF FD | 	call	#_pop
18a50     FD 18 02 F6 | 	mov	arg04, result1
18a54     FE 16 02 F6 | 	mov	arg03, result2
18a58     FF 1E 02 F6 | 	mov	local01, result3
18a5c     0C 4E 05 F1 | 	add	fp, #12
18a60     A7 18 62 FC | 	wrlong	arg04, fp
18a64     04 4E 05 F1 | 	add	fp, #4
18a68     A7 16 62 FC | 	wrlong	arg03, fp
18a6c     04 4E 05 F1 | 	add	fp, #4
18a70     A7 1E 62 FC | 	wrlong	local01, fp
18a74     14 4E 85 F1 | 	sub	fp, #20
18a78     A8 27 BF FD | 	call	#_pop
18a7c     A7 FA 61 FC | 	wrlong	result1, fp
18a80     04 4E 05 F1 | 	add	fp, #4
18a84     A7 FC 61 FC | 	wrlong	result2, fp
18a88     04 4E 05 F1 | 	add	fp, #4
18a8c     A7 FE 61 FC | 	wrlong	result3, fp
18a90                 | ' 
18a90                 | ' t4=pop()
18a90                 | ' t3=pop()
18a90                 | ' t2=pop()
18a90                 | ' t1=pop()
18a90                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18a90     FF 18 02 F6 | 	mov	arg04, result3
18a94     08 4E 85 F1 | 	sub	fp, #8
18a98     1C 18 0E F2 | 	cmp	arg04, #28 wz
18a9c     08 4E 05 51 |  if_ne	add	fp, #8
18aa0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18aa4     08 4E 85 51 |  if_ne	sub	fp, #8
18aa8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18aac     94 00 90 5D |  if_ne	jmp	#LR__2030
18ab0     14 4E 05 F1 | 	add	fp, #20
18ab4     A7 1E 02 FB | 	rdlong	local01, fp
18ab8     14 4E 85 F1 | 	sub	fp, #20
18abc     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ac0     14 4E 05 51 |  if_ne	add	fp, #20
18ac4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18ac8     14 4E 85 51 |  if_ne	sub	fp, #20
18acc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18ad0     70 00 90 5D |  if_ne	jmp	#LR__2030
18ad4     20 4E 05 F1 | 	add	fp, #32
18ad8     A7 1E 02 FB | 	rdlong	local01, fp
18adc     20 4E 85 F1 | 	sub	fp, #32
18ae0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ae4     20 4E 05 51 |  if_ne	add	fp, #32
18ae8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18aec     20 4E 85 51 |  if_ne	sub	fp, #32
18af0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18af4     4C 00 90 5D |  if_ne	jmp	#LR__2030
18af8     2C 4E 05 F1 | 	add	fp, #44
18afc     A7 1E 02 FB | 	rdlong	local01, fp
18b00     2C 4E 85 F1 | 	sub	fp, #44
18b04     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b08     2C 4E 05 51 |  if_ne	add	fp, #44
18b0c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18b10     2C 4E 85 51 |  if_ne	sub	fp, #44
18b14     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18b18     28 00 90 5D |  if_ne	jmp	#LR__2030
18b1c     A7 12 02 FB | 	rdlong	arg01, fp
18b20     0C 4E 05 F1 | 	add	fp, #12
18b24     A7 14 02 FB | 	rdlong	arg02, fp
18b28     0C 4E 05 F1 | 	add	fp, #12
18b2c     A7 16 02 FB | 	rdlong	arg03, fp
18b30     0C 4E 05 F1 | 	add	fp, #12
18b34     A7 18 02 FB | 	rdlong	arg04, fp
18b38     24 4E 85 F1 | 	sub	fp, #36
18b3c     B4 5E B0 FD | 	call	#_hg010b_spin2_fill
18b40                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
18b40     58 00 90 FD | 	jmp	#LR__2031
18b44                 | LR__2030
18b44     A7 12 02 F6 | 	mov	arg01, fp
18b48     A4 D0 BF FD | 	call	#_converttoint
18b4c     FD 20 02 F6 | 	mov	local02, result1
18b50     0C 4E 05 F1 | 	add	fp, #12
18b54     A7 12 02 F6 | 	mov	arg01, fp
18b58     0C 4E 85 F1 | 	sub	fp, #12
18b5c     90 D0 BF FD | 	call	#_converttoint
18b60     FD 22 02 F6 | 	mov	local03, result1
18b64     18 4E 05 F1 | 	add	fp, #24
18b68     A7 12 02 F6 | 	mov	arg01, fp
18b6c     18 4E 85 F1 | 	sub	fp, #24
18b70     7C D0 BF FD | 	call	#_converttoint
18b74     FD 1E 02 F6 | 	mov	local01, result1
18b78     24 4E 05 F1 | 	add	fp, #36
18b7c     A7 12 02 F6 | 	mov	arg01, fp
18b80     24 4E 85 F1 | 	sub	fp, #36
18b84     68 D0 BF FD | 	call	#_converttoint
18b88     FD 18 02 F6 | 	mov	arg04, result1
18b8c     10 13 02 F6 | 	mov	arg01, local02
18b90     11 15 02 F6 | 	mov	arg02, local03
18b94     0F 17 02 F6 | 	mov	arg03, local01
18b98     58 5E B0 FD | 	call	#_hg010b_spin2_fill
18b9c                 | LR__2031
18b9c     A7 F0 03 F6 | 	mov	ptra, fp
18ba0     B2 00 A0 FD | 	call	#popregs_
18ba4                 | _do_fill_ret
18ba4     2D 00 64 FD | 	ret
18ba8                 | 
18ba8                 | ' 
18ba8                 | ' ' -------------------------- Draw a frane
18ba8                 | ' 
18ba8                 | ' sub do_frame
18ba8                 | _do_frame
18ba8     03 4A 05 F6 | 	mov	COUNT_, #3
18bac     A8 00 A0 FD | 	call	#pushregs_
18bb0     30 F0 07 F1 | 	add	ptra, #48
18bb4     6C 26 BF FD | 	call	#_pop
18bb8     FD 1A 02 F6 | 	mov	arg05, result1
18bbc     FE 18 02 F6 | 	mov	arg04, result2
18bc0     FF 16 02 F6 | 	mov	arg03, result3
18bc4     24 4E 05 F1 | 	add	fp, #36
18bc8     A7 1A 62 FC | 	wrlong	arg05, fp
18bcc     04 4E 05 F1 | 	add	fp, #4
18bd0     A7 18 62 FC | 	wrlong	arg04, fp
18bd4     04 4E 05 F1 | 	add	fp, #4
18bd8     A7 16 62 FC | 	wrlong	arg03, fp
18bdc     2C 4E 85 F1 | 	sub	fp, #44
18be0     40 26 BF FD | 	call	#_pop
18be4     FD 1A 02 F6 | 	mov	arg05, result1
18be8     FE 18 02 F6 | 	mov	arg04, result2
18bec     FF 16 02 F6 | 	mov	arg03, result3
18bf0     18 4E 05 F1 | 	add	fp, #24
18bf4     A7 1A 62 FC | 	wrlong	arg05, fp
18bf8     04 4E 05 F1 | 	add	fp, #4
18bfc     A7 18 62 FC | 	wrlong	arg04, fp
18c00     04 4E 05 F1 | 	add	fp, #4
18c04     A7 16 62 FC | 	wrlong	arg03, fp
18c08     20 4E 85 F1 | 	sub	fp, #32
18c0c     14 26 BF FD | 	call	#_pop
18c10     FD 1A 02 F6 | 	mov	arg05, result1
18c14     FE 18 02 F6 | 	mov	arg04, result2
18c18     FF 1E 02 F6 | 	mov	local01, result3
18c1c     0C 4E 05 F1 | 	add	fp, #12
18c20     A7 1A 62 FC | 	wrlong	arg05, fp
18c24     04 4E 05 F1 | 	add	fp, #4
18c28     A7 18 62 FC | 	wrlong	arg04, fp
18c2c     04 4E 05 F1 | 	add	fp, #4
18c30     A7 1E 62 FC | 	wrlong	local01, fp
18c34     14 4E 85 F1 | 	sub	fp, #20
18c38     E8 25 BF FD | 	call	#_pop
18c3c     A7 FA 61 FC | 	wrlong	result1, fp
18c40     04 4E 05 F1 | 	add	fp, #4
18c44     A7 FC 61 FC | 	wrlong	result2, fp
18c48     04 4E 05 F1 | 	add	fp, #4
18c4c     A7 FE 61 FC | 	wrlong	result3, fp
18c50                 | ' 
18c50                 | ' t4=pop()
18c50                 | ' t3=pop()
18c50                 | ' t2=pop()
18c50                 | ' t1=pop()
18c50                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18c50     FF 1A 02 F6 | 	mov	arg05, result3
18c54     08 4E 85 F1 | 	sub	fp, #8
18c58     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18c5c     08 4E 05 51 |  if_ne	add	fp, #8
18c60     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18c64     08 4E 85 51 |  if_ne	sub	fp, #8
18c68     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18c6c     A8 00 90 5D |  if_ne	jmp	#LR__2040
18c70     14 4E 05 F1 | 	add	fp, #20
18c74     A7 1E 02 FB | 	rdlong	local01, fp
18c78     14 4E 85 F1 | 	sub	fp, #20
18c7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18c80     14 4E 05 51 |  if_ne	add	fp, #20
18c84     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18c88     14 4E 85 51 |  if_ne	sub	fp, #20
18c8c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18c90     84 00 90 5D |  if_ne	jmp	#LR__2040
18c94     20 4E 05 F1 | 	add	fp, #32
18c98     A7 1E 02 FB | 	rdlong	local01, fp
18c9c     20 4E 85 F1 | 	sub	fp, #32
18ca0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ca4     20 4E 05 51 |  if_ne	add	fp, #32
18ca8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18cac     20 4E 85 51 |  if_ne	sub	fp, #32
18cb0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18cb4     60 00 90 5D |  if_ne	jmp	#LR__2040
18cb8     2C 4E 05 F1 | 	add	fp, #44
18cbc     A7 1E 02 FB | 	rdlong	local01, fp
18cc0     2C 4E 85 F1 | 	sub	fp, #44
18cc4     1C 1E 0E F2 | 	cmp	local01, #28 wz
18cc8     2C 4E 05 51 |  if_ne	add	fp, #44
18ccc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18cd0     2C 4E 85 51 |  if_ne	sub	fp, #44
18cd4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18cd8     3C 00 90 5D |  if_ne	jmp	#LR__2040
18cdc     A7 12 02 FB | 	rdlong	arg01, fp
18ce0     0C 4E 05 F1 | 	add	fp, #12
18ce4     A7 14 02 FB | 	rdlong	arg02, fp
18ce8     0C 4E 05 F1 | 	add	fp, #12
18cec     A7 16 02 FB | 	rdlong	arg03, fp
18cf0     0C 4E 05 F1 | 	add	fp, #12
18cf4     A7 18 02 FB | 	rdlong	arg04, fp
18cf8     24 4E 85 F1 | 	sub	fp, #36
18cfc     37 00 00 FF 
18d00     28 E4 05 F1 | 	add	objptr, ##28200
18d04     F2 1A 02 FB | 	rdlong	arg05, objptr
18d08     37 00 00 FF 
18d0c     28 E4 85 F1 | 	sub	objptr, ##28200
18d10     CC 61 B0 FD | 	call	#_hg010b_spin2_frame
18d14                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18d14     6C 00 90 FD | 	jmp	#LR__2041
18d18                 | LR__2040
18d18     A7 12 02 F6 | 	mov	arg01, fp
18d1c     D0 CE BF FD | 	call	#_converttoint
18d20     FD 20 02 F6 | 	mov	local02, result1
18d24     0C 4E 05 F1 | 	add	fp, #12
18d28     A7 12 02 F6 | 	mov	arg01, fp
18d2c     0C 4E 85 F1 | 	sub	fp, #12
18d30     BC CE BF FD | 	call	#_converttoint
18d34     FD 22 02 F6 | 	mov	local03, result1
18d38     18 4E 05 F1 | 	add	fp, #24
18d3c     A7 12 02 F6 | 	mov	arg01, fp
18d40     18 4E 85 F1 | 	sub	fp, #24
18d44     A8 CE BF FD | 	call	#_converttoint
18d48     FD 1E 02 F6 | 	mov	local01, result1
18d4c     24 4E 05 F1 | 	add	fp, #36
18d50     A7 12 02 F6 | 	mov	arg01, fp
18d54     24 4E 85 F1 | 	sub	fp, #36
18d58     94 CE BF FD | 	call	#_converttoint
18d5c     FD 18 02 F6 | 	mov	arg04, result1
18d60     37 00 00 FF 
18d64     28 E4 05 F1 | 	add	objptr, ##28200
18d68     F2 1A 02 FB | 	rdlong	arg05, objptr
18d6c     37 00 00 FF 
18d70     28 E4 85 F1 | 	sub	objptr, ##28200
18d74     10 13 02 F6 | 	mov	arg01, local02
18d78     11 15 02 F6 | 	mov	arg02, local03
18d7c     0F 17 02 F6 | 	mov	arg03, local01
18d80     5C 61 B0 FD | 	call	#_hg010b_spin2_frame
18d84                 | LR__2041
18d84     A7 F0 03 F6 | 	mov	ptra, fp
18d88     B2 00 A0 FD | 	call	#popregs_
18d8c                 | _do_frame_ret
18d8c     2D 00 64 FD | 	ret
18d90                 | 
18d90                 | ' 
18d90                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18d90                 | ' 
18d90                 | ' ' ------------------------- Print to the screem
18d90                 | ' 
18d90                 | ' sub do_print  
18d90                 | _do_print
18d90     0B 4A 05 F6 | 	mov	COUNT_, #11
18d94     A8 00 A0 FD | 	call	#pushregs_
18d98     00 24 06 F6 | 	mov	local04, #0
18d9c     84 24 BF FD | 	call	#_pop
18da0     FD 26 02 F6 | 	mov	local05, result1
18da4     FE 28 02 F6 | 	mov	local06, result2
18da8     FF 2A 02 F6 | 	mov	local07, result3
18dac     13 1F 02 F6 | 	mov	local01, local05
18db0     14 21 02 F6 | 	mov	local02, local06
18db4     15 23 02 F6 | 	mov	local03, local07
18db8                 | '  
18db8                 | ' r=0
18db8                 | ' t1=pop() 
18db8                 | ' 'print t1.result_type,t1.result.uresult
18db8                 | ' 
18db8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18db8     21 22 0E F2 | 	cmp	local03, #33 wz
18dbc     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18dc0     20 00 90 5D |  if_ne	jmp	#LR__2050
18dc4     11 25 02 F6 | 	mov	local04, local03
18dc8     58 24 BF FD | 	call	#_pop
18dcc     FD 26 02 F6 | 	mov	local05, result1
18dd0     FE 28 02 F6 | 	mov	local06, result2
18dd4     FF 2A 02 F6 | 	mov	local07, result3
18dd8     13 1F 02 F6 | 	mov	local01, local05
18ddc     14 21 02 F6 | 	mov	local02, local06
18de0     15 23 02 F6 | 	mov	local03, local07
18de4                 | LR__2050
18de4                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18de4     20 22 0E F2 | 	cmp	local03, #32 wz
18de8     11 25 02 A6 |  if_e	mov	local04, local03
18dec                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18dec     FF 22 0E F2 | 	cmp	local03, #255 wz
18df0     0C 00 90 5D |  if_ne	jmp	#LR__2051
18df4     0F 13 02 F6 | 	mov	arg01, local01
18df8     70 47 B0 FD | 	call	#_printerror
18dfc     D4 04 90 FD | 	jmp	#LR__2070
18e00                 | LR__2051
18e00                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18e00     2B 22 0E F2 | 	cmp	local03, #43 wz
18e04     14 00 90 5D |  if_ne	jmp	#LR__2052
18e08     0F 13 02 F6 | 	mov	arg01, local01
18e0c     BC 85 BF FD | 	call	#_convertstring
18e10     FD 26 02 F6 | 	mov	local05, result1
18e14     13 1F 02 F6 | 	mov	local01, local05
18e18     1F 22 06 F6 | 	mov	local03, #31
18e1c                 | LR__2052
18e1c                 | ' 
18e1c                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
18e1c     2C 22 0E F2 | 	cmp	local03, #44 wz
18e20     80 00 90 5D |  if_ne	jmp	#LR__2053
18e24     00 12 06 F6 | 	mov	arg01, #0
18e28     3C D7 B0 FD | 	call	#__system___getiolock_0540
18e2c     FD 12 02 F6 | 	mov	arg01, result1
18e30     D0 7C B0 FD | 	call	#__system___lockmem
18e34     85 01 00 FF 
18e38     E0 15 06 F6 | 	mov	arg02, ##@LR__5516
18e3c     00 12 06 F6 | 	mov	arg01, #0
18e40     00 16 06 F6 | 	mov	arg03, #0
18e44     B0 89 B0 FD | 	call	#__system___basic_print_string
18e48     0A 2C 06 F6 | 	mov	local08, #10
18e4c     00 12 06 F6 | 	mov	arg01, #0
18e50     0F 15 02 F6 | 	mov	arg02, local01
18e54     00 16 06 F6 | 	mov	arg03, #0
18e58     0A 18 06 F6 | 	mov	arg04, #10
18e5c     DC 89 B0 FD | 	call	#__system___basic_print_integer
18e60     FD 2E 02 F6 | 	mov	local09, result1
18e64     00 12 06 F6 | 	mov	arg01, #0
18e68     0A 14 06 F6 | 	mov	arg02, #10
18e6c     00 16 06 F6 | 	mov	arg03, #0
18e70     2C 89 B0 FD | 	call	#__system___basic_print_char
18e74     01 30 06 F6 | 	mov	local10, #1
18e78     00 12 06 F6 | 	mov	arg01, #0
18e7c     E8 D6 B0 FD | 	call	#__system___getiolock_0540
18e80     FD 00 68 FC | 	wrlong	#0, result1
18e84     00 32 06 F6 | 	mov	local11, #0
18e88     98 23 BF FD | 	call	#_pop
18e8c     FD 26 02 F6 | 	mov	local05, result1
18e90     FE 28 02 F6 | 	mov	local06, result2
18e94     FF 2A 02 F6 | 	mov	local07, result3
18e98     13 1F 02 F6 | 	mov	local01, local05
18e9c     14 21 02 F6 | 	mov	local02, local06
18ea0     15 23 02 F6 | 	mov	local03, local07
18ea4                 | LR__2053
18ea4                 | ' 
18ea4                 | ' if r=print_mod_comma  then
18ea4     21 24 0E F2 | 	cmp	local04, #33 wz
18ea8     AC 01 90 5D |  if_ne	jmp	#LR__2058
18eac                 | '   if t1.result_type=result_int then print t1.result.iresult,
18eac     1C 22 0E F2 | 	cmp	local03, #28 wz
18eb0     64 00 90 5D |  if_ne	jmp	#LR__2054
18eb4     00 12 06 F6 | 	mov	arg01, #0
18eb8     AC D6 B0 FD | 	call	#__system___getiolock_0540
18ebc     FD 12 02 F6 | 	mov	arg01, result1
18ec0     40 7C B0 FD | 	call	#__system___lockmem
18ec4     00 28 06 F6 | 	mov	local06, #0
18ec8     00 12 06 F6 | 	mov	arg01, #0
18ecc     0F 15 02 F6 | 	mov	arg02, local01
18ed0     00 16 06 F6 | 	mov	arg03, #0
18ed4     0A 18 06 F6 | 	mov	arg04, #10
18ed8     60 89 B0 FD | 	call	#__system___basic_print_integer
18edc     FD 2A 02 F6 | 	mov	local07, result1
18ee0     14 27 02 F6 | 	mov	local05, local06
18ee4     15 27 02 F1 | 	add	local05, local07
18ee8     00 32 06 F6 | 	mov	local11, #0
18eec     00 12 06 F6 | 	mov	arg01, #0
18ef0     09 14 06 F6 | 	mov	arg02, #9
18ef4     00 16 06 F6 | 	mov	arg03, #0
18ef8     A4 88 B0 FD | 	call	#__system___basic_print_char
18efc     FD 2E 02 F6 | 	mov	local09, result1
18f00     FD 26 02 F1 | 	add	local05, result1
18f04     00 12 06 F6 | 	mov	arg01, #0
18f08     5C D6 B0 FD | 	call	#__system___getiolock_0540
18f0c     FD 00 68 FC | 	wrlong	#0, result1
18f10     00 FA 05 F6 | 	mov	result1, #0
18f14     00 30 06 F6 | 	mov	local10, #0
18f18                 | LR__2054
18f18                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18f18     1D 22 0E F2 | 	cmp	local03, #29 wz
18f1c     64 00 90 5D |  if_ne	jmp	#LR__2055
18f20     00 12 06 F6 | 	mov	arg01, #0
18f24     40 D6 B0 FD | 	call	#__system___getiolock_0540
18f28     FD 12 02 F6 | 	mov	arg01, result1
18f2c     D4 7B B0 FD | 	call	#__system___lockmem
18f30     00 28 06 F6 | 	mov	local06, #0
18f34     00 12 06 F6 | 	mov	arg01, #0
18f38     0F 15 02 F6 | 	mov	arg02, local01
18f3c     00 16 06 F6 | 	mov	arg03, #0
18f40     0A 18 06 F6 | 	mov	arg04, #10
18f44     34 89 B0 FD | 	call	#__system___basic_print_unsigned
18f48     FD 2A 02 F6 | 	mov	local07, result1
18f4c     14 27 02 F6 | 	mov	local05, local06
18f50     15 27 02 F1 | 	add	local05, local07
18f54     00 32 06 F6 | 	mov	local11, #0
18f58     00 12 06 F6 | 	mov	arg01, #0
18f5c     09 14 06 F6 | 	mov	arg02, #9
18f60     00 16 06 F6 | 	mov	arg03, #0
18f64     38 88 B0 FD | 	call	#__system___basic_print_char
18f68     FD 2E 02 F6 | 	mov	local09, result1
18f6c     FD 26 02 F1 | 	add	local05, result1
18f70     00 12 06 F6 | 	mov	arg01, #0
18f74     F0 D5 B0 FD | 	call	#__system___getiolock_0540
18f78     FD 00 68 FC | 	wrlong	#0, result1
18f7c     00 FA 05 F6 | 	mov	result1, #0
18f80     00 30 06 F6 | 	mov	local10, #0
18f84                 | LR__2055
18f84                 | '   if t1.result_type=result_float then print t1.result.fresult,
18f84     1E 22 0E F2 | 	cmp	local03, #30 wz
18f88     64 00 90 5D |  if_ne	jmp	#LR__2056
18f8c     00 12 06 F6 | 	mov	arg01, #0
18f90     D4 D5 B0 FD | 	call	#__system___getiolock_0540
18f94     FD 12 02 F6 | 	mov	arg01, result1
18f98     68 7B B0 FD | 	call	#__system___lockmem
18f9c     00 28 06 F6 | 	mov	local06, #0
18fa0     00 12 06 F6 | 	mov	arg01, #0
18fa4     0F 15 02 F6 | 	mov	arg02, local01
18fa8     00 16 06 F6 | 	mov	arg03, #0
18fac     23 18 06 F6 | 	mov	arg04, #35
18fb0     1C AD B0 FD | 	call	#__system___basic_print_float
18fb4     FD 2A 02 F6 | 	mov	local07, result1
18fb8     14 27 02 F6 | 	mov	local05, local06
18fbc     15 27 02 F1 | 	add	local05, local07
18fc0     00 32 06 F6 | 	mov	local11, #0
18fc4     00 12 06 F6 | 	mov	arg01, #0
18fc8     09 14 06 F6 | 	mov	arg02, #9
18fcc     00 16 06 F6 | 	mov	arg03, #0
18fd0     CC 87 B0 FD | 	call	#__system___basic_print_char
18fd4     FD 2E 02 F6 | 	mov	local09, result1
18fd8     FD 26 02 F1 | 	add	local05, result1
18fdc     00 12 06 F6 | 	mov	arg01, #0
18fe0     84 D5 B0 FD | 	call	#__system___getiolock_0540
18fe4     FD 00 68 FC | 	wrlong	#0, result1
18fe8     00 FA 05 F6 | 	mov	result1, #0
18fec     00 30 06 F6 | 	mov	local10, #0
18ff0                 | LR__2056
18ff0                 | '   if t1.result_type=result_string then print t1.result.sresult,
18ff0     1F 22 0E F2 | 	cmp	local03, #31 wz
18ff4     60 00 90 5D |  if_ne	jmp	#LR__2057
18ff8     00 12 06 F6 | 	mov	arg01, #0
18ffc     68 D5 B0 FD | 	call	#__system___getiolock_0540
19000     FD 12 02 F6 | 	mov	arg01, result1
19004     FC 7A B0 FD | 	call	#__system___lockmem
19008     00 28 06 F6 | 	mov	local06, #0
1900c     00 12 06 F6 | 	mov	arg01, #0
19010     0F 15 02 F6 | 	mov	arg02, local01
19014     00 16 06 F6 | 	mov	arg03, #0
19018     DC 87 B0 FD | 	call	#__system___basic_print_string
1901c     FD 2A 02 F6 | 	mov	local07, result1
19020     14 27 02 F6 | 	mov	local05, local06
19024     15 27 02 F1 | 	add	local05, local07
19028     00 32 06 F6 | 	mov	local11, #0
1902c     00 12 06 F6 | 	mov	arg01, #0
19030     09 14 06 F6 | 	mov	arg02, #9
19034     00 16 06 F6 | 	mov	arg03, #0
19038     64 87 B0 FD | 	call	#__system___basic_print_char
1903c     FD 2E 02 F6 | 	mov	local09, result1
19040     FD 26 02 F1 | 	add	local05, result1
19044     00 12 06 F6 | 	mov	arg01, #0
19048     1C D5 B0 FD | 	call	#__system___getiolock_0540
1904c     FD 00 68 FC | 	wrlong	#0, result1
19050     00 FA 05 F6 | 	mov	result1, #0
19054     00 30 06 F6 | 	mov	local10, #0
19058                 | LR__2057
19058                 | LR__2058
19058                 | ' if r=print_mod_semicolon then 
19058     22 24 0E F2 | 	cmp	local04, #34 wz
1905c     1C 01 90 5D |  if_ne	jmp	#LR__2063
19060                 | '   if t1.result_type=result_int then print t1.result.iresult;
19060     1C 22 0E F2 | 	cmp	local03, #28 wz
19064     50 00 90 5D |  if_ne	jmp	#LR__2059
19068     00 12 06 F6 | 	mov	arg01, #0
1906c     F8 D4 B0 FD | 	call	#__system___getiolock_0540
19070     FD 12 02 F6 | 	mov	arg01, result1
19074     8C 7A B0 FD | 	call	#__system___lockmem
19078     00 28 06 F6 | 	mov	local06, #0
1907c     00 30 06 F6 | 	mov	local10, #0
19080     0A 32 06 F6 | 	mov	local11, #10
19084     00 12 06 F6 | 	mov	arg01, #0
19088     0F 15 02 F6 | 	mov	arg02, local01
1908c     00 16 06 F6 | 	mov	arg03, #0
19090     0A 18 06 F6 | 	mov	arg04, #10
19094     A4 87 B0 FD | 	call	#__system___basic_print_integer
19098     FD 2A 02 F6 | 	mov	local07, result1
1909c     14 27 02 F6 | 	mov	local05, local06
190a0     15 27 02 F1 | 	add	local05, local07
190a4     00 12 06 F6 | 	mov	arg01, #0
190a8     BC D4 B0 FD | 	call	#__system___getiolock_0540
190ac     FD 00 68 FC | 	wrlong	#0, result1
190b0     00 FA 05 F6 | 	mov	result1, #0
190b4     00 2E 06 F6 | 	mov	local09, #0
190b8                 | LR__2059
190b8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
190b8     1D 22 0E F2 | 	cmp	local03, #29 wz
190bc     50 00 90 5D |  if_ne	jmp	#LR__2060
190c0     00 12 06 F6 | 	mov	arg01, #0
190c4     A0 D4 B0 FD | 	call	#__system___getiolock_0540
190c8     FD 12 02 F6 | 	mov	arg01, result1
190cc     34 7A B0 FD | 	call	#__system___lockmem
190d0     00 28 06 F6 | 	mov	local06, #0
190d4     00 30 06 F6 | 	mov	local10, #0
190d8     0A 32 06 F6 | 	mov	local11, #10
190dc     00 12 06 F6 | 	mov	arg01, #0
190e0     0F 15 02 F6 | 	mov	arg02, local01
190e4     00 16 06 F6 | 	mov	arg03, #0
190e8     0A 18 06 F6 | 	mov	arg04, #10
190ec     8C 87 B0 FD | 	call	#__system___basic_print_unsigned
190f0     FD 2A 02 F6 | 	mov	local07, result1
190f4     14 27 02 F6 | 	mov	local05, local06
190f8     15 27 02 F1 | 	add	local05, local07
190fc     00 12 06 F6 | 	mov	arg01, #0
19100     64 D4 B0 FD | 	call	#__system___getiolock_0540
19104     FD 00 68 FC | 	wrlong	#0, result1
19108     00 FA 05 F6 | 	mov	result1, #0
1910c     00 2E 06 F6 | 	mov	local09, #0
19110                 | LR__2060
19110                 | '   if t1.result_type=result_float then print t1.result.fresult;
19110     1E 22 0E F2 | 	cmp	local03, #30 wz
19114     30 00 90 5D |  if_ne	jmp	#LR__2061
19118     00 12 06 F6 | 	mov	arg01, #0
1911c     48 D4 B0 FD | 	call	#__system___getiolock_0540
19120     FD 12 02 F6 | 	mov	arg01, result1
19124     DC 79 B0 FD | 	call	#__system___lockmem
19128     00 12 06 F6 | 	mov	arg01, #0
1912c     0F 15 02 F6 | 	mov	arg02, local01
19130     00 16 06 F6 | 	mov	arg03, #0
19134     23 18 06 F6 | 	mov	arg04, #35
19138     94 AB B0 FD | 	call	#__system___basic_print_float
1913c     00 12 06 F6 | 	mov	arg01, #0
19140     24 D4 B0 FD | 	call	#__system___getiolock_0540
19144     FD 00 68 FC | 	wrlong	#0, result1
19148                 | LR__2061
19148                 | '   if t1.result_type=result_string then print t1.result.sresult;
19148     1F 22 0E F2 | 	cmp	local03, #31 wz
1914c     2C 00 90 5D |  if_ne	jmp	#LR__2062
19150     00 12 06 F6 | 	mov	arg01, #0
19154     10 D4 B0 FD | 	call	#__system___getiolock_0540
19158     FD 12 02 F6 | 	mov	arg01, result1
1915c     A4 79 B0 FD | 	call	#__system___lockmem
19160     00 12 06 F6 | 	mov	arg01, #0
19164     0F 15 02 F6 | 	mov	arg02, local01
19168     00 16 06 F6 | 	mov	arg03, #0
1916c     88 86 B0 FD | 	call	#__system___basic_print_string
19170     00 12 06 F6 | 	mov	arg01, #0
19174     F0 D3 B0 FD | 	call	#__system___getiolock_0540
19178     FD 00 68 FC | 	wrlong	#0, result1
1917c                 | LR__2062
1917c                 | LR__2063
1917c                 | ' if r=0 then 
1917c     00 24 0E F2 | 	cmp	local04, #0 wz
19180     1C 01 90 5D |  if_ne	jmp	#LR__2068
19184                 | '   if t1.result_type=result_int then print t1.result.iresult
19184     1C 22 0E F2 | 	cmp	local03, #28 wz
19188     40 00 90 5D |  if_ne	jmp	#LR__2064
1918c     00 12 06 F6 | 	mov	arg01, #0
19190     D4 D3 B0 FD | 	call	#__system___getiolock_0540
19194     FD 12 02 F6 | 	mov	arg01, result1
19198     68 79 B0 FD | 	call	#__system___lockmem
1919c     00 12 06 F6 | 	mov	arg01, #0
191a0     0F 15 02 F6 | 	mov	arg02, local01
191a4     00 16 06 F6 | 	mov	arg03, #0
191a8     0A 18 06 F6 | 	mov	arg04, #10
191ac     8C 86 B0 FD | 	call	#__system___basic_print_integer
191b0     00 12 06 F6 | 	mov	arg01, #0
191b4     0A 14 06 F6 | 	mov	arg02, #10
191b8     00 16 06 F6 | 	mov	arg03, #0
191bc     E0 85 B0 FD | 	call	#__system___basic_print_char
191c0     00 12 06 F6 | 	mov	arg01, #0
191c4     A0 D3 B0 FD | 	call	#__system___getiolock_0540
191c8     FD 00 68 FC | 	wrlong	#0, result1
191cc                 | LR__2064
191cc                 | '   if t1.result_type=result_uint then print t1.result.uresult
191cc     1D 22 0E F2 | 	cmp	local03, #29 wz
191d0     40 00 90 5D |  if_ne	jmp	#LR__2065
191d4     00 12 06 F6 | 	mov	arg01, #0
191d8     8C D3 B0 FD | 	call	#__system___getiolock_0540
191dc     FD 12 02 F6 | 	mov	arg01, result1
191e0     20 79 B0 FD | 	call	#__system___lockmem
191e4     00 12 06 F6 | 	mov	arg01, #0
191e8     0F 15 02 F6 | 	mov	arg02, local01
191ec     00 16 06 F6 | 	mov	arg03, #0
191f0     0A 18 06 F6 | 	mov	arg04, #10
191f4     84 86 B0 FD | 	call	#__system___basic_print_unsigned
191f8     00 12 06 F6 | 	mov	arg01, #0
191fc     0A 14 06 F6 | 	mov	arg02, #10
19200     00 16 06 F6 | 	mov	arg03, #0
19204     98 85 B0 FD | 	call	#__system___basic_print_char
19208     00 12 06 F6 | 	mov	arg01, #0
1920c     58 D3 B0 FD | 	call	#__system___getiolock_0540
19210     FD 00 68 FC | 	wrlong	#0, result1
19214                 | LR__2065
19214                 | '   if t1.result_type=result_float then print t1.result.fresult
19214     1E 22 0E F2 | 	cmp	local03, #30 wz
19218     40 00 90 5D |  if_ne	jmp	#LR__2066
1921c     00 12 06 F6 | 	mov	arg01, #0
19220     44 D3 B0 FD | 	call	#__system___getiolock_0540
19224     FD 12 02 F6 | 	mov	arg01, result1
19228     D8 78 B0 FD | 	call	#__system___lockmem
1922c     00 12 06 F6 | 	mov	arg01, #0
19230     0F 15 02 F6 | 	mov	arg02, local01
19234     00 16 06 F6 | 	mov	arg03, #0
19238     23 18 06 F6 | 	mov	arg04, #35
1923c     90 AA B0 FD | 	call	#__system___basic_print_float
19240     00 12 06 F6 | 	mov	arg01, #0
19244     0A 14 06 F6 | 	mov	arg02, #10
19248     00 16 06 F6 | 	mov	arg03, #0
1924c     50 85 B0 FD | 	call	#__system___basic_print_char
19250     00 12 06 F6 | 	mov	arg01, #0
19254     10 D3 B0 FD | 	call	#__system___getiolock_0540
19258     FD 00 68 FC | 	wrlong	#0, result1
1925c                 | LR__2066
1925c                 | '   if t1.result_type=result_string then print t1.result.sresult
1925c     1F 22 0E F2 | 	cmp	local03, #31 wz
19260     3C 00 90 5D |  if_ne	jmp	#LR__2067
19264     00 12 06 F6 | 	mov	arg01, #0
19268     FC D2 B0 FD | 	call	#__system___getiolock_0540
1926c     FD 12 02 F6 | 	mov	arg01, result1
19270     90 78 B0 FD | 	call	#__system___lockmem
19274     00 12 06 F6 | 	mov	arg01, #0
19278     0F 15 02 F6 | 	mov	arg02, local01
1927c     00 16 06 F6 | 	mov	arg03, #0
19280     74 85 B0 FD | 	call	#__system___basic_print_string
19284     00 12 06 F6 | 	mov	arg01, #0
19288     0A 14 06 F6 | 	mov	arg02, #10
1928c     00 16 06 F6 | 	mov	arg03, #0
19290     0C 85 B0 FD | 	call	#__system___basic_print_char
19294     00 12 06 F6 | 	mov	arg01, #0
19298     CC D2 B0 FD | 	call	#__system___getiolock_0540
1929c     FD 00 68 FC | 	wrlong	#0, result1
192a0                 | LR__2067
192a0                 | LR__2068
192a0                 | ' if r=print_mod_empty then print
192a0     20 24 0E F2 | 	cmp	local04, #32 wz
192a4     2C 00 90 5D |  if_ne	jmp	#LR__2069
192a8     00 12 06 F6 | 	mov	arg01, #0
192ac     B8 D2 B0 FD | 	call	#__system___getiolock_0540
192b0     FD 12 02 F6 | 	mov	arg01, result1
192b4     4C 78 B0 FD | 	call	#__system___lockmem
192b8     00 12 06 F6 | 	mov	arg01, #0
192bc     0A 14 06 F6 | 	mov	arg02, #10
192c0     00 16 06 F6 | 	mov	arg03, #0
192c4     D8 84 B0 FD | 	call	#__system___basic_print_char
192c8     00 12 06 F6 | 	mov	arg01, #0
192cc     98 D2 B0 FD | 	call	#__system___getiolock_0540
192d0     FD 00 68 FC | 	wrlong	#0, result1
192d4                 | LR__2069
192d4                 | LR__2070
192d4     A7 F0 03 F6 | 	mov	ptra, fp
192d8     B2 00 A0 FD | 	call	#popregs_
192dc                 | _do_print_ret
192dc     2D 00 64 FD | 	ret
192e0                 | 
192e0                 | ' 
192e0                 | ' 
192e0                 | ' sub do_paper
192e0                 | _do_paper
192e0     03 4A 05 F6 | 	mov	COUNT_, #3
192e4     A8 00 A0 FD | 	call	#pushregs_
192e8     38 1F BF FD | 	call	#_pop
192ec     FD 1E 02 F6 | 	mov	local01, result1
192f0     FE 20 02 F6 | 	mov	local02, result2
192f4     FF 22 02 F6 | 	mov	local03, result3
192f8                 | ' t1=pop() 
192f8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
192f8     1E 22 0E F2 | 	cmp	local03, #30 wz
192fc     10 00 90 5D |  if_ne	jmp	#LR__2080
19300     0F 13 02 F6 | 	mov	arg01, local01
19304     00 14 06 F6 | 	mov	arg02, #0
19308     74 A8 B0 FD | 	call	#__system___float_tointeger
1930c     FD 1E 02 F6 | 	mov	local01, result1
19310                 | LR__2080
19310                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19310     1F 22 0E F2 | 	cmp	local03, #31 wz
19314     18 00 90 5D |  if_ne	jmp	#LR__2081
19318     0F 13 02 F6 | 	mov	arg01, local01
1931c     A4 AB B0 FD | 	call	#__system____builtin_atof
19320     FD 12 02 F6 | 	mov	arg01, result1
19324     00 14 06 F6 | 	mov	arg02, #0
19328     54 A8 B0 FD | 	call	#__system___float_tointeger
1932c     FD 1E 02 F6 | 	mov	local01, result1
19330                 | LR__2081
19330     37 00 00 FF 
19334     38 E4 05 F1 | 	add	objptr, ##28216
19338     F2 1E 62 FC | 	wrlong	local01, objptr
1933c     04 E4 05 F1 | 	add	objptr, #4
19340     F2 12 02 FB | 	rdlong	arg01, objptr
19344                 | ' 
19344                 | ' write_color:=ff
19344     36 00 00 FF 
19348     FB E5 85 F1 | 	sub	objptr, ##28155
1934c     F2 12 62 FC | 	wrlong	arg01, objptr
19350                 | ' write_background:=bb
19350     04 E4 05 F1 | 	add	objptr, #4
19354     F2 1E 62 FC | 	wrlong	local01, objptr
19358     45 E4 85 F1 | 	sub	objptr, #69
1935c     A7 F0 03 F6 | 	mov	ptra, fp
19360     B2 00 A0 FD | 	call	#popregs_
19364                 | _do_paper_ret
19364     2D 00 64 FD | 	ret
19368                 | 
19368                 | ' 
19368                 | ' sub do_ink
19368                 | _do_ink
19368     03 4A 05 F6 | 	mov	COUNT_, #3
1936c     A8 00 A0 FD | 	call	#pushregs_
19370     B0 1E BF FD | 	call	#_pop
19374     FD 1E 02 F6 | 	mov	local01, result1
19378     FE 20 02 F6 | 	mov	local02, result2
1937c     FF 22 02 F6 | 	mov	local03, result3
19380                 | ' t1=pop() 
19380                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19380     1E 22 0E F2 | 	cmp	local03, #30 wz
19384     10 00 90 5D |  if_ne	jmp	#LR__2090
19388     0F 13 02 F6 | 	mov	arg01, local01
1938c     00 14 06 F6 | 	mov	arg02, #0
19390     EC A7 B0 FD | 	call	#__system___float_tointeger
19394     FD 1E 02 F6 | 	mov	local01, result1
19398                 | LR__2090
19398                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19398     1F 22 0E F2 | 	cmp	local03, #31 wz
1939c     18 00 90 5D |  if_ne	jmp	#LR__2091
193a0     0F 13 02 F6 | 	mov	arg01, local01
193a4     1C AB B0 FD | 	call	#__system____builtin_atof
193a8     FD 12 02 F6 | 	mov	arg01, result1
193ac     00 14 06 F6 | 	mov	arg02, #0
193b0     CC A7 B0 FD | 	call	#__system___float_tointeger
193b4     FD 1E 02 F6 | 	mov	local01, result1
193b8                 | LR__2091
193b8     37 00 00 FF 
193bc     3C E4 05 F1 | 	add	objptr, ##28220
193c0     F2 1E 62 FC | 	wrlong	local01, objptr
193c4     04 E4 85 F1 | 	sub	objptr, #4
193c8     F2 14 02 FB | 	rdlong	arg02, objptr
193cc                 | ' 
193cc                 | ' write_color:=ff
193cc     36 00 00 FF 
193d0     F7 E5 85 F1 | 	sub	objptr, ##28151
193d4     F2 1E 62 FC | 	wrlong	local01, objptr
193d8                 | ' write_background:=bb
193d8     04 E4 05 F1 | 	add	objptr, #4
193dc     F2 14 62 FC | 	wrlong	arg02, objptr
193e0     36 00 00 FF 
193e4     F7 E5 05 F1 | 	add	objptr, ##28151
193e8     F2 12 02 FB | 	rdlong	arg01, objptr
193ec     37 00 00 FF 
193f0     3C E4 85 F1 | 	sub	objptr, ##28220
193f4     9C 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
193f8     A7 F0 03 F6 | 	mov	ptra, fp
193fc     B2 00 A0 FD | 	call	#popregs_
19400                 | _do_ink_ret
19400     2D 00 64 FD | 	ret
19404                 | 
19404                 | ' 
19404                 | ' 
19404                 | ' sub do_font
19404                 | _do_font
19404     03 4A 05 F6 | 	mov	COUNT_, #3
19408     A8 00 A0 FD | 	call	#pushregs_
1940c     14 1E BF FD | 	call	#_pop
19410     FD 1E 02 F6 | 	mov	local01, result1
19414     FE 20 02 F6 | 	mov	local02, result2
19418     FF 22 02 F6 | 	mov	local03, result3
1941c                 | ' t1=pop() 
1941c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1941c     1E 22 0E F2 | 	cmp	local03, #30 wz
19420     10 00 90 5D |  if_ne	jmp	#LR__2100
19424     0F 13 02 F6 | 	mov	arg01, local01
19428     00 14 06 F6 | 	mov	arg02, #0
1942c     50 A7 B0 FD | 	call	#__system___float_tointeger
19430     FD 1E 02 F6 | 	mov	local01, result1
19434                 | LR__2100
19434                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19434     1F 22 0E F2 | 	cmp	local03, #31 wz
19438     18 00 90 5D |  if_ne	jmp	#LR__2101
1943c     0F 13 02 F6 | 	mov	arg01, local01
19440     80 AA B0 FD | 	call	#__system____builtin_atof
19444     FD 12 02 F6 | 	mov	arg01, result1
19448     00 14 06 F6 | 	mov	arg02, #0
1944c     30 A7 B0 FD | 	call	#__system___float_tointeger
19450     FD 1E 02 F6 | 	mov	local01, result1
19454                 | LR__2101
19454     37 00 00 FF 
19458     40 E4 05 F1 | 	add	objptr, ##28224
1945c     F2 1E 62 FC | 	wrlong	local01, objptr
19460     37 00 00 FF 
19464     40 E4 85 F1 | 	sub	objptr, ##28224
19468     02 1E 66 F0 | 	shl	local01, #2
1946c     0F 13 02 F6 | 	mov	arg01, local01
19470     64 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
19474     A7 F0 03 F6 | 	mov	ptra, fp
19478     B2 00 A0 FD | 	call	#popregs_
1947c                 | _do_font_ret
1947c     2D 00 64 FD | 	ret
19480                 | 
19480                 | ' 
19480                 | ' sub do_mode
19480                 | _do_mode
19480     05 4A 05 F6 | 	mov	COUNT_, #5
19484     A8 00 A0 FD | 	call	#pushregs_
19488     98 1D BF FD | 	call	#_pop
1948c     FD 1E 02 F6 | 	mov	local01, result1
19490     FE 20 02 F6 | 	mov	local02, result2
19494     FF 22 02 F6 | 	mov	local03, result3
19498                 | ' t1=pop() 
19498                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19498     1E 22 0E F2 | 	cmp	local03, #30 wz
1949c     10 00 90 5D |  if_ne	jmp	#LR__2110
194a0     0F 13 02 F6 | 	mov	arg01, local01
194a4     00 14 06 F6 | 	mov	arg02, #0
194a8     D4 A6 B0 FD | 	call	#__system___float_tointeger
194ac     FD 1E 02 F6 | 	mov	local01, result1
194b0                 | LR__2110
194b0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
194b0     1F 22 0E F2 | 	cmp	local03, #31 wz
194b4     18 00 90 5D |  if_ne	jmp	#LR__2111
194b8     0F 13 02 F6 | 	mov	arg01, local01
194bc     04 AA B0 FD | 	call	#__system____builtin_atof
194c0     FD 12 02 F6 | 	mov	arg01, result1
194c4     00 14 06 F6 | 	mov	arg02, #0
194c8     B4 A6 B0 FD | 	call	#__system___float_tointeger
194cc     FD 1E 02 F6 | 	mov	local01, result1
194d0                 | LR__2111
194d0                 | ' select case t1.result.iresult
194d0     0F 25 02 F6 | 	mov	local04, local01
194d4     05 24 26 F3 | 	fle	local04, #5
194d8     30 24 62 FD | 	jmprel	local04
194dc                 | LR__2112
194dc     14 00 90 FD | 	jmp	#LR__2113
194e0     A8 00 90 FD | 	jmp	#LR__2114
194e4     10 01 90 FD | 	jmp	#LR__2115
194e8     78 01 90 FD | 	jmp	#LR__2116
194ec     E0 01 90 FD | 	jmp	#LR__2117
194f0     70 02 90 FD | 	jmp	#LR__2118
194f4                 | LR__2113
194f4     37 00 00 FF 
194f8     40 E4 05 F1 | 	add	objptr, ##28224
194fc     F2 02 68 FC | 	wrlong	#1, objptr
19500     04 E4 85 F1 | 	sub	objptr, #4
19504     F2 34 69 FC | 	wrlong	#154, objptr
19508     19 00 00 FF 
1950c     D4 E4 05 F1 | 	add	objptr, ##13012
19510     F2 02 68 FC | 	wrlong	#1, objptr
19514     19 00 00 FF 
19518     D8 E4 85 F1 | 	sub	objptr, ##13016
1951c     F2 26 69 FC | 	wrlong	#147, objptr
19520     37 00 00 FF 
19524     38 E4 85 F1 | 	sub	objptr, ##28216
19528     04 12 06 F6 | 	mov	arg01, #4
1952c     A8 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
19530     37 00 00 FF 
19534     3C E4 05 F1 | 	add	objptr, ##28220
19538     F2 12 02 FB | 	rdlong	arg01, objptr
1953c     04 E4 85 F1 | 	sub	objptr, #4
19540     F2 14 02 FB | 	rdlong	arg02, objptr
19544                 | ' 
19544                 | ' write_color:=ff
19544     36 00 00 FF 
19548     F7 E5 85 F1 | 	sub	objptr, ##28151
1954c     F2 12 62 FC | 	wrlong	arg01, objptr
19550                 | ' write_background:=bb
19550     04 E4 05 F1 | 	add	objptr, #4
19554     F2 14 62 FC | 	wrlong	arg02, objptr
19558     01 00 00 FF 
1955c     00 EA 05 F1 | 	add	ptr__dat__, ##512
19560     51 00 00 FF 
19564     6F E5 05 F1 | 	add	objptr, ##41839
19568     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1956c     04 E4 85 F1 | 	sub	objptr, #4
19570     03 00 80 FF 
19574     F2 30 69 FC | 	wrlong	##1688, objptr
19578     51 00 00 FF 
1957c     B0 E5 85 F1 | 	sub	objptr, ##41904
19580     01 00 00 FF 
19584     00 EA 85 F1 | 	sub	ptr__dat__, ##512
19588     D8 01 90 FD | 	jmp	#LR__2118
1958c                 | LR__2114
1958c     37 00 00 FF 
19590     40 E4 05 F1 | 	add	objptr, ##28224
19594     F2 00 68 FC | 	wrlong	#0, objptr
19598     04 E4 85 F1 | 	sub	objptr, #4
1959c     F2 2E 68 FC | 	wrlong	#23, objptr
195a0     19 00 00 FF 
195a4     D4 E4 05 F1 | 	add	objptr, ##13012
195a8     F2 00 68 FC | 	wrlong	#0, objptr
195ac     19 00 00 FF 
195b0     D8 E4 85 F1 | 	sub	objptr, ##13016
195b4     F2 00 68 FC | 	wrlong	#0, objptr
195b8     37 00 00 FF 
195bc     38 E4 85 F1 | 	sub	objptr, ##28216
195c0     00 12 06 F6 | 	mov	arg01, #0
195c4     10 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
195c8     37 00 00 FF 
195cc     3C E4 05 F1 | 	add	objptr, ##28220
195d0     F2 12 02 FB | 	rdlong	arg01, objptr
195d4     04 E4 85 F1 | 	sub	objptr, #4
195d8     F2 14 02 FB | 	rdlong	arg02, objptr
195dc                 | ' 
195dc                 | ' write_color:=ff
195dc     36 00 00 FF 
195e0     F7 E5 85 F1 | 	sub	objptr, ##28151
195e4     F2 12 62 FC | 	wrlong	arg01, objptr
195e8                 | ' write_background:=bb
195e8     04 E4 05 F1 | 	add	objptr, #4
195ec     F2 14 62 FC | 	wrlong	arg02, objptr
195f0     45 E4 85 F1 | 	sub	objptr, #69
195f4     6C 01 90 FD | 	jmp	#LR__2118
195f8                 | LR__2115
195f8     37 00 00 FF 
195fc     40 E4 05 F1 | 	add	objptr, ##28224
19600     F2 00 68 FC | 	wrlong	#0, objptr
19604     04 E4 85 F1 | 	sub	objptr, #4
19608     F2 6A 69 FC | 	wrlong	#181, objptr
1960c     19 00 00 FF 
19610     D4 E4 05 F1 | 	add	objptr, ##13012
19614     F2 00 68 FC | 	wrlong	#0, objptr
19618     19 00 00 FF 
1961c     D8 E4 85 F1 | 	sub	objptr, ##13016
19620     F2 00 68 FC | 	wrlong	#0, objptr
19624     37 00 00 FF 
19628     38 E4 85 F1 | 	sub	objptr, ##28216
1962c     00 12 06 F6 | 	mov	arg01, #0
19630     A4 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19634     37 00 00 FF 
19638     3C E4 05 F1 | 	add	objptr, ##28220
1963c     F2 12 02 FB | 	rdlong	arg01, objptr
19640     04 E4 85 F1 | 	sub	objptr, #4
19644     F2 14 02 FB | 	rdlong	arg02, objptr
19648                 | ' 
19648                 | ' write_color:=ff
19648     36 00 00 FF 
1964c     F7 E5 85 F1 | 	sub	objptr, ##28151
19650     F2 12 62 FC | 	wrlong	arg01, objptr
19654                 | ' write_background:=bb
19654     04 E4 05 F1 | 	add	objptr, #4
19658     F2 14 62 FC | 	wrlong	arg02, objptr
1965c     45 E4 85 F1 | 	sub	objptr, #69
19660     00 01 90 FD | 	jmp	#LR__2118
19664                 | LR__2116
19664     37 00 00 FF 
19668     40 E4 05 F1 | 	add	objptr, ##28224
1966c     F2 00 68 FC | 	wrlong	#0, objptr
19670     04 E4 85 F1 | 	sub	objptr, #4
19674     F2 1E 68 FC | 	wrlong	#15, objptr
19678     19 00 00 FF 
1967c     D4 E4 05 F1 | 	add	objptr, ##13012
19680     F2 00 68 FC | 	wrlong	#0, objptr
19684     19 00 00 FF 
19688     D8 E4 85 F1 | 	sub	objptr, ##13016
1968c     F2 00 68 FC | 	wrlong	#0, objptr
19690     37 00 00 FF 
19694     38 E4 85 F1 | 	sub	objptr, ##28216
19698     00 12 06 F6 | 	mov	arg01, #0
1969c     38 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
196a0     37 00 00 FF 
196a4     3C E4 05 F1 | 	add	objptr, ##28220
196a8     F2 12 02 FB | 	rdlong	arg01, objptr
196ac     04 E4 85 F1 | 	sub	objptr, #4
196b0     F2 14 02 FB | 	rdlong	arg02, objptr
196b4                 | ' 
196b4                 | ' write_color:=ff
196b4     36 00 00 FF 
196b8     F7 E5 85 F1 | 	sub	objptr, ##28151
196bc     F2 12 62 FC | 	wrlong	arg01, objptr
196c0                 | ' write_background:=bb
196c0     04 E4 05 F1 | 	add	objptr, #4
196c4     F2 14 62 FC | 	wrlong	arg02, objptr
196c8     45 E4 85 F1 | 	sub	objptr, #69
196cc     94 00 90 FD | 	jmp	#LR__2118
196d0                 | LR__2117
196d0     37 00 00 FF 
196d4     40 E4 05 F1 | 	add	objptr, ##28224
196d8     F2 02 68 FC | 	wrlong	#1, objptr
196dc     04 E4 85 F1 | 	sub	objptr, #4
196e0     F2 02 68 FC | 	wrlong	#1, objptr
196e4     19 00 00 FF 
196e8     D4 E4 05 F1 | 	add	objptr, ##13012
196ec     F2 02 68 FC | 	wrlong	#1, objptr
196f0     19 00 00 FF 
196f4     D8 E4 85 F1 | 	sub	objptr, ##13016
196f8     F2 1C 68 FC | 	wrlong	#14, objptr
196fc     37 00 00 FF 
19700     38 E4 85 F1 | 	sub	objptr, ##28216
19704     04 12 06 F6 | 	mov	arg01, #4
19708     CC 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1970c     37 00 00 FF 
19710     3C E4 05 F1 | 	add	objptr, ##28220
19714     F2 12 02 FB | 	rdlong	arg01, objptr
19718     04 E4 85 F1 | 	sub	objptr, #4
1971c     F2 14 02 FB | 	rdlong	arg02, objptr
19720                 | ' 
19720                 | ' write_color:=ff
19720     36 00 00 FF 
19724     F7 E5 85 F1 | 	sub	objptr, ##28151
19728     F2 12 62 FC | 	wrlong	arg01, objptr
1972c                 | ' write_background:=bb
1972c     04 E4 05 F1 | 	add	objptr, #4
19730     F2 14 62 FC | 	wrlong	arg02, objptr
19734     07 00 00 FF 
19738     8A EB 05 F1 | 	add	ptr__dat__, ##3978
1973c     51 00 00 FF 
19740     6F E5 05 F1 | 	add	objptr, ##41839
19744     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19748     04 E4 85 F1 | 	sub	objptr, #4
1974c     03 00 80 FF 
19750     F2 30 69 FC | 	wrlong	##1688, objptr
19754     51 00 00 FF 
19758     B0 E5 85 F1 | 	sub	objptr, ##41904
1975c     07 00 00 FF 
19760     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
19764                 | LR__2118
19764     51 00 00 FF 
19768     AC E5 05 F1 | 	add	objptr, ##41900
1976c     F2 1E 62 FC | 	wrlong	local01, objptr
19770     04 E4 85 F1 | 	sub	objptr, #4
19774     F2 12 02 FB | 	rdlong	arg01, objptr
19778     0E 00 00 FF 
1977c     4C E5 85 F1 | 	sub	objptr, ##7500
19780     F2 26 02 FB | 	rdlong	local05, objptr
19784     43 00 00 FF 
19788     5C E4 85 F1 | 	sub	objptr, ##34396
1978c     13 13 82 F1 | 	sub	arg01, local05
19790     00 14 06 F6 | 	mov	arg02, #0
19794     0A 16 06 F6 | 	mov	arg03, #10
19798     38 96 B0 FD | 	call	#__system__Number_S
1979c     FD 12 02 F6 | 	mov	arg01, result1
197a0     85 01 00 FF 
197a4     F2 15 06 F6 | 	mov	arg02, ##@LR__5517
197a8     B4 73 B0 FD | 	call	#__system___string_concat
197ac     50 00 00 FF 
197b0     0C E5 05 F1 | 	add	objptr, ##41228
197b4     F2 FA 61 FC | 	wrlong	result1, objptr
197b8     19 00 00 FF 
197bc     D0 E4 85 F1 | 	sub	objptr, ##13008
197c0     F2 12 02 FB | 	rdlong	arg01, objptr
197c4     04 E4 85 F1 | 	sub	objptr, #4
197c8     F2 14 02 FB | 	rdlong	arg02, objptr
197cc     37 00 00 FF 
197d0     38 E4 85 F1 | 	sub	objptr, ##28216
197d4     50 5A B0 FD | 	call	#_hg010b_spin2_cls
197d8     86 01 00 FF 
197dc     04 12 06 F6 | 	mov	arg01, ##@LR__5518
197e0                 | ' 
197e0                 | ' write(text)
197e0     04 5E B0 FD | 	call	#_hg010b_spin2_write
197e4                 | ' crlf
197e4     00 63 B0 FD | 	call	#_hg010b_spin2_crlf
197e8     18 00 00 FF 
197ec     4C EB 05 F1 | 	add	ptr__dat__, ##12620
197f0     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
197f4     18 00 00 FF 
197f8     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
197fc                 | ' 
197fc                 | ' write(text)
197fc     E8 5D B0 FD | 	call	#_hg010b_spin2_write
19800                 | ' crlf
19800     E4 62 B0 FD | 	call	#_hg010b_spin2_crlf
19804     50 00 00 FF 
19808     0C E5 05 F1 | 	add	objptr, ##41228
1980c     F2 12 02 FB | 	rdlong	arg01, objptr
19810     50 00 00 FF 
19814     0C E5 85 F1 | 	sub	objptr, ##41228
19818                 | ' 
19818                 | ' write(text)
19818     CC 5D B0 FD | 	call	#_hg010b_spin2_write
1981c                 | ' crlf
1981c     C8 62 B0 FD | 	call	#_hg010b_spin2_crlf
19820     A7 F0 03 F6 | 	mov	ptra, fp
19824     B2 00 A0 FD | 	call	#popregs_
19828                 | _do_mode_ret
19828     2D 00 64 FD | 	ret
1982c                 | 
1982c                 | ' 
1982c                 | ' sub do_setwave
1982c                 | _do_setwave
1982c     02 4A 05 F6 | 	mov	COUNT_, #2
19830     A8 00 A0 FD | 	call	#pushregs_
19834     18 F0 07 F1 | 	add	ptra, #24
19838     E8 19 BF FD | 	call	#_pop
1983c     FD 12 02 F6 | 	mov	arg01, result1
19840     FE 1E 02 F6 | 	mov	local01, result2
19844     FF 20 02 F6 | 	mov	local02, result3
19848     A7 12 62 FC | 	wrlong	arg01, fp
1984c     04 4E 05 F1 | 	add	fp, #4
19850     A7 1E 62 FC | 	wrlong	local01, fp
19854     04 4E 05 F1 | 	add	fp, #4
19858     A7 20 62 FC | 	wrlong	local02, fp
1985c     08 4E 85 F1 | 	sub	fp, #8
19860     C0 19 BF FD | 	call	#_pop
19864     FD 20 02 F6 | 	mov	local02, result1
19868     0C 4E 05 F1 | 	add	fp, #12
1986c     A7 20 62 FC | 	wrlong	local02, fp
19870     04 4E 05 F1 | 	add	fp, #4
19874     A7 FC 61 FC | 	wrlong	result2, fp
19878     04 4E 05 F1 | 	add	fp, #4
1987c     A7 FE 61 FC | 	wrlong	result3, fp
19880     08 4E 85 F1 | 	sub	fp, #8
19884     A7 12 02 F6 | 	mov	arg01, fp
19888     0C 4E 85 F1 | 	sub	fp, #12
1988c     60 C3 BF FD | 	call	#_converttoint
19890     FD 20 02 F6 | 	mov	local02, result1
19894     10 1F 02 F6 | 	mov	local01, local02
19898     01 1E 66 F0 | 	shl	local01, #1
1989c     10 1F 02 F1 | 	add	local01, local02
198a0     03 1E 66 F0 | 	shl	local01, #3
198a4     14 00 00 FF 
198a8     38 E5 05 F1 | 	add	objptr, ##10552
198ac     F2 1E 02 F1 | 	add	local01, objptr
198b0     A7 12 02 F6 | 	mov	arg01, fp
198b4     14 00 00 FF 
198b8     38 E5 85 F1 | 	sub	objptr, ##10552
198bc     30 C3 BF FD | 	call	#_converttoint
198c0     04 1E 06 F1 | 	add	local01, #4
198c4     0F FB 41 FC | 	wrbyte	result1, local01
198c8     A7 F0 03 F6 | 	mov	ptra, fp
198cc     B2 00 A0 FD | 	call	#popregs_
198d0                 | _do_setwave_ret
198d0     2D 00 64 FD | 	ret
198d4                 | 
198d4                 | ' 
198d4                 | ' sub do_setsustain
198d4                 | _do_setsustain
198d4     02 4A 05 F6 | 	mov	COUNT_, #2
198d8     A8 00 A0 FD | 	call	#pushregs_
198dc     18 F0 07 F1 | 	add	ptra, #24
198e0     40 19 BF FD | 	call	#_pop
198e4     FD 12 02 F6 | 	mov	arg01, result1
198e8     FE 1E 02 F6 | 	mov	local01, result2
198ec     FF 20 02 F6 | 	mov	local02, result3
198f0     A7 12 62 FC | 	wrlong	arg01, fp
198f4     04 4E 05 F1 | 	add	fp, #4
198f8     A7 1E 62 FC | 	wrlong	local01, fp
198fc     04 4E 05 F1 | 	add	fp, #4
19900     A7 20 62 FC | 	wrlong	local02, fp
19904     08 4E 85 F1 | 	sub	fp, #8
19908     18 19 BF FD | 	call	#_pop
1990c     FD 20 02 F6 | 	mov	local02, result1
19910     0C 4E 05 F1 | 	add	fp, #12
19914     A7 20 62 FC | 	wrlong	local02, fp
19918     04 4E 05 F1 | 	add	fp, #4
1991c     A7 FC 61 FC | 	wrlong	result2, fp
19920     04 4E 05 F1 | 	add	fp, #4
19924     A7 FE 61 FC | 	wrlong	result3, fp
19928     08 4E 85 F1 | 	sub	fp, #8
1992c     A7 12 02 F6 | 	mov	arg01, fp
19930     0C 4E 85 F1 | 	sub	fp, #12
19934     B8 C2 BF FD | 	call	#_converttoint
19938     FD 20 02 F6 | 	mov	local02, result1
1993c     10 1F 02 F6 | 	mov	local01, local02
19940     01 1E 66 F0 | 	shl	local01, #1
19944     10 1F 02 F1 | 	add	local01, local02
19948     03 1E 66 F0 | 	shl	local01, #3
1994c     14 00 00 FF 
19950     38 E5 05 F1 | 	add	objptr, ##10552
19954     F2 1E 02 F1 | 	add	local01, objptr
19958     A7 12 02 F6 | 	mov	arg01, fp
1995c     14 00 00 FF 
19960     38 E5 85 F1 | 	sub	objptr, ##10552
19964     88 C2 BF FD | 	call	#_converttoint
19968     14 1E 06 F1 | 	add	local01, #20
1996c     0F FB 51 FC | 	wrword	result1, local01
19970     A7 F0 03 F6 | 	mov	ptra, fp
19974     B2 00 A0 FD | 	call	#popregs_
19978                 | _do_setsustain_ret
19978     2D 00 64 FD | 	ret
1997c                 | 
1997c                 | ' 
1997c                 | ' sub do_setenv
1997c                 | _do_setenv
1997c     02 4A 05 F6 | 	mov	COUNT_, #2
19980     A8 00 A0 FD | 	call	#pushregs_
19984     18 F0 07 F1 | 	add	ptra, #24
19988     98 18 BF FD | 	call	#_pop
1998c     FD 12 02 F6 | 	mov	arg01, result1
19990     FE 1E 02 F6 | 	mov	local01, result2
19994     FF 20 02 F6 | 	mov	local02, result3
19998     A7 12 62 FC | 	wrlong	arg01, fp
1999c     04 4E 05 F1 | 	add	fp, #4
199a0     A7 1E 62 FC | 	wrlong	local01, fp
199a4     04 4E 05 F1 | 	add	fp, #4
199a8     A7 20 62 FC | 	wrlong	local02, fp
199ac     08 4E 85 F1 | 	sub	fp, #8
199b0     70 18 BF FD | 	call	#_pop
199b4     FD 20 02 F6 | 	mov	local02, result1
199b8     0C 4E 05 F1 | 	add	fp, #12
199bc     A7 20 62 FC | 	wrlong	local02, fp
199c0     04 4E 05 F1 | 	add	fp, #4
199c4     A7 FC 61 FC | 	wrlong	result2, fp
199c8     04 4E 05 F1 | 	add	fp, #4
199cc     A7 FE 61 FC | 	wrlong	result3, fp
199d0     08 4E 85 F1 | 	sub	fp, #8
199d4     A7 12 02 F6 | 	mov	arg01, fp
199d8     0C 4E 85 F1 | 	sub	fp, #12
199dc     10 C2 BF FD | 	call	#_converttoint
199e0     FD 20 02 F6 | 	mov	local02, result1
199e4     10 1F 02 F6 | 	mov	local01, local02
199e8     01 1E 66 F0 | 	shl	local01, #1
199ec     10 1F 02 F1 | 	add	local01, local02
199f0     03 1E 66 F0 | 	shl	local01, #3
199f4     14 00 00 FF 
199f8     38 E5 05 F1 | 	add	objptr, ##10552
199fc     F2 1E 02 F1 | 	add	local01, objptr
19a00     A7 12 02 F6 | 	mov	arg01, fp
19a04     14 00 00 FF 
19a08     38 E5 85 F1 | 	sub	objptr, ##10552
19a0c     E0 C1 BF FD | 	call	#_converttoint
19a10     05 1E 06 F1 | 	add	local01, #5
19a14     0F FB 41 FC | 	wrbyte	result1, local01
19a18     A7 F0 03 F6 | 	mov	ptra, fp
19a1c     B2 00 A0 FD | 	call	#popregs_
19a20                 | _do_setenv_ret
19a20     2D 00 64 FD | 	ret
19a24                 | 
19a24                 | ' 
19a24                 | ' sub do_setdelay
19a24                 | _do_setdelay
19a24     02 4A 05 F6 | 	mov	COUNT_, #2
19a28     A8 00 A0 FD | 	call	#pushregs_
19a2c     18 F0 07 F1 | 	add	ptra, #24
19a30     F0 17 BF FD | 	call	#_pop
19a34     FD 12 02 F6 | 	mov	arg01, result1
19a38     FE 1E 02 F6 | 	mov	local01, result2
19a3c     FF 20 02 F6 | 	mov	local02, result3
19a40     A7 12 62 FC | 	wrlong	arg01, fp
19a44     04 4E 05 F1 | 	add	fp, #4
19a48     A7 1E 62 FC | 	wrlong	local01, fp
19a4c     04 4E 05 F1 | 	add	fp, #4
19a50     A7 20 62 FC | 	wrlong	local02, fp
19a54     08 4E 85 F1 | 	sub	fp, #8
19a58     C8 17 BF FD | 	call	#_pop
19a5c     FD 20 02 F6 | 	mov	local02, result1
19a60     0C 4E 05 F1 | 	add	fp, #12
19a64     A7 20 62 FC | 	wrlong	local02, fp
19a68     04 4E 05 F1 | 	add	fp, #4
19a6c     A7 FC 61 FC | 	wrlong	result2, fp
19a70     04 4E 05 F1 | 	add	fp, #4
19a74     A7 FE 61 FC | 	wrlong	result3, fp
19a78     08 4E 85 F1 | 	sub	fp, #8
19a7c     A7 12 02 F6 | 	mov	arg01, fp
19a80     0C 4E 85 F1 | 	sub	fp, #12
19a84     68 C1 BF FD | 	call	#_converttoint
19a88     FD 20 02 F6 | 	mov	local02, result1
19a8c     10 1F 02 F6 | 	mov	local01, local02
19a90     01 1E 66 F0 | 	shl	local01, #1
19a94     10 1F 02 F1 | 	add	local01, local02
19a98     03 1E 66 F0 | 	shl	local01, #3
19a9c     14 00 00 FF 
19aa0     38 E5 05 F1 | 	add	objptr, ##10552
19aa4     F2 1E 02 F1 | 	add	local01, objptr
19aa8     A7 12 02 F6 | 	mov	arg01, fp
19aac     14 00 00 FF 
19ab0     38 E5 85 F1 | 	sub	objptr, ##10552
19ab4     38 C1 BF FD | 	call	#_converttoint
19ab8     06 1E 06 F1 | 	add	local01, #6
19abc     0F FB 51 FC | 	wrword	result1, local01
19ac0     A7 F0 03 F6 | 	mov	ptra, fp
19ac4     B2 00 A0 FD | 	call	#popregs_
19ac8                 | _do_setdelay_ret
19ac8     2D 00 64 FD | 	ret
19acc                 | 
19acc                 | ' 
19acc                 | ' sub do_setlen
19acc                 | _do_setlen
19acc     02 4A 05 F6 | 	mov	COUNT_, #2
19ad0     A8 00 A0 FD | 	call	#pushregs_
19ad4     18 F0 07 F1 | 	add	ptra, #24
19ad8     48 17 BF FD | 	call	#_pop
19adc     FD 12 02 F6 | 	mov	arg01, result1
19ae0     FE 1E 02 F6 | 	mov	local01, result2
19ae4     FF 20 02 F6 | 	mov	local02, result3
19ae8     A7 12 62 FC | 	wrlong	arg01, fp
19aec     04 4E 05 F1 | 	add	fp, #4
19af0     A7 1E 62 FC | 	wrlong	local01, fp
19af4     04 4E 05 F1 | 	add	fp, #4
19af8     A7 20 62 FC | 	wrlong	local02, fp
19afc     08 4E 85 F1 | 	sub	fp, #8
19b00     20 17 BF FD | 	call	#_pop
19b04     FD 20 02 F6 | 	mov	local02, result1
19b08     0C 4E 05 F1 | 	add	fp, #12
19b0c     A7 20 62 FC | 	wrlong	local02, fp
19b10     04 4E 05 F1 | 	add	fp, #4
19b14     A7 FC 61 FC | 	wrlong	result2, fp
19b18     04 4E 05 F1 | 	add	fp, #4
19b1c     A7 FE 61 FC | 	wrlong	result3, fp
19b20     08 4E 85 F1 | 	sub	fp, #8
19b24     A7 12 02 F6 | 	mov	arg01, fp
19b28     0C 4E 85 F1 | 	sub	fp, #12
19b2c     C0 C0 BF FD | 	call	#_converttoint
19b30     FD 20 02 F6 | 	mov	local02, result1
19b34     10 1F 02 F6 | 	mov	local01, local02
19b38     01 1E 66 F0 | 	shl	local01, #1
19b3c     10 1F 02 F1 | 	add	local01, local02
19b40     03 1E 66 F0 | 	shl	local01, #3
19b44     14 00 00 FF 
19b48     38 E5 05 F1 | 	add	objptr, ##10552
19b4c     F2 1E 02 F1 | 	add	local01, objptr
19b50     A7 12 02 F6 | 	mov	arg01, fp
19b54     14 00 00 FF 
19b58     38 E5 85 F1 | 	sub	objptr, ##10552
19b5c     4C C1 BF FD | 	call	#_converttofloat
19b60     08 1E 06 F1 | 	add	local01, #8
19b64     0F FB 61 FC | 	wrlong	result1, local01
19b68     A7 F0 03 F6 | 	mov	ptra, fp
19b6c     B2 00 A0 FD | 	call	#popregs_
19b70                 | _do_setlen_ret
19b70     2D 00 64 FD | 	ret
19b74                 | 
19b74                 | ' 
19b74                 | ' sub do_setvol
19b74                 | _do_setvol
19b74     02 4A 05 F6 | 	mov	COUNT_, #2
19b78     A8 00 A0 FD | 	call	#pushregs_
19b7c     18 F0 07 F1 | 	add	ptra, #24
19b80     A0 16 BF FD | 	call	#_pop
19b84     FD 12 02 F6 | 	mov	arg01, result1
19b88     FE 1E 02 F6 | 	mov	local01, result2
19b8c     FF 20 02 F6 | 	mov	local02, result3
19b90     A7 12 62 FC | 	wrlong	arg01, fp
19b94     04 4E 05 F1 | 	add	fp, #4
19b98     A7 1E 62 FC | 	wrlong	local01, fp
19b9c     04 4E 05 F1 | 	add	fp, #4
19ba0     A7 20 62 FC | 	wrlong	local02, fp
19ba4     08 4E 85 F1 | 	sub	fp, #8
19ba8     78 16 BF FD | 	call	#_pop
19bac     FD 20 02 F6 | 	mov	local02, result1
19bb0     0C 4E 05 F1 | 	add	fp, #12
19bb4     A7 20 62 FC | 	wrlong	local02, fp
19bb8     04 4E 05 F1 | 	add	fp, #4
19bbc     A7 FC 61 FC | 	wrlong	result2, fp
19bc0     04 4E 05 F1 | 	add	fp, #4
19bc4     A7 FE 61 FC | 	wrlong	result3, fp
19bc8     08 4E 85 F1 | 	sub	fp, #8
19bcc     A7 12 02 F6 | 	mov	arg01, fp
19bd0     0C 4E 85 F1 | 	sub	fp, #12
19bd4     18 C0 BF FD | 	call	#_converttoint
19bd8     FD 20 02 F6 | 	mov	local02, result1
19bdc     10 1F 02 F6 | 	mov	local01, local02
19be0     01 1E 66 F0 | 	shl	local01, #1
19be4     10 1F 02 F1 | 	add	local01, local02
19be8     03 1E 66 F0 | 	shl	local01, #3
19bec     14 00 00 FF 
19bf0     38 E5 05 F1 | 	add	objptr, ##10552
19bf4     F2 1E 02 F1 | 	add	local01, objptr
19bf8     A7 12 02 F6 | 	mov	arg01, fp
19bfc     14 00 00 FF 
19c00     38 E5 85 F1 | 	sub	objptr, ##10552
19c04     A4 C0 BF FD | 	call	#_converttofloat
19c08     0C 1E 06 F1 | 	add	local01, #12
19c0c     0F FB 61 FC | 	wrlong	result1, local01
19c10     A7 F0 03 F6 | 	mov	ptra, fp
19c14     B2 00 A0 FD | 	call	#popregs_
19c18                 | _do_setvol_ret
19c18     2D 00 64 FD | 	ret
19c1c                 | 
19c1c                 | ' 
19c1c                 | ' sub do_setpan
19c1c                 | _do_setpan
19c1c     02 4A 05 F6 | 	mov	COUNT_, #2
19c20     A8 00 A0 FD | 	call	#pushregs_
19c24     18 F0 07 F1 | 	add	ptra, #24
19c28     F8 15 BF FD | 	call	#_pop
19c2c     FD 12 02 F6 | 	mov	arg01, result1
19c30     FE 1E 02 F6 | 	mov	local01, result2
19c34     FF 20 02 F6 | 	mov	local02, result3
19c38     A7 12 62 FC | 	wrlong	arg01, fp
19c3c     04 4E 05 F1 | 	add	fp, #4
19c40     A7 1E 62 FC | 	wrlong	local01, fp
19c44     04 4E 05 F1 | 	add	fp, #4
19c48     A7 20 62 FC | 	wrlong	local02, fp
19c4c     08 4E 85 F1 | 	sub	fp, #8
19c50     D0 15 BF FD | 	call	#_pop
19c54     FD 20 02 F6 | 	mov	local02, result1
19c58     0C 4E 05 F1 | 	add	fp, #12
19c5c     A7 20 62 FC | 	wrlong	local02, fp
19c60     04 4E 05 F1 | 	add	fp, #4
19c64     A7 FC 61 FC | 	wrlong	result2, fp
19c68     04 4E 05 F1 | 	add	fp, #4
19c6c     A7 FE 61 FC | 	wrlong	result3, fp
19c70     08 4E 85 F1 | 	sub	fp, #8
19c74     A7 12 02 F6 | 	mov	arg01, fp
19c78     0C 4E 85 F1 | 	sub	fp, #12
19c7c     70 BF BF FD | 	call	#_converttoint
19c80     FD 20 02 F6 | 	mov	local02, result1
19c84     10 1F 02 F6 | 	mov	local01, local02
19c88     01 1E 66 F0 | 	shl	local01, #1
19c8c     10 1F 02 F1 | 	add	local01, local02
19c90     03 1E 66 F0 | 	shl	local01, #3
19c94     14 00 00 FF 
19c98     38 E5 05 F1 | 	add	objptr, ##10552
19c9c     F2 1E 02 F1 | 	add	local01, objptr
19ca0     A7 12 02 F6 | 	mov	arg01, fp
19ca4     14 00 00 FF 
19ca8     38 E5 85 F1 | 	sub	objptr, ##10552
19cac     FC BF BF FD | 	call	#_converttofloat
19cb0     10 1E 06 F1 | 	add	local01, #16
19cb4     0F FB 61 FC | 	wrlong	result1, local01
19cb8     A7 F0 03 F6 | 	mov	ptra, fp
19cbc     B2 00 A0 FD | 	call	#popregs_
19cc0                 | _do_setpan_ret
19cc0     2D 00 64 FD | 	ret
19cc4                 | 
19cc4                 | ' 
19cc4                 | ' 
19cc4                 | ' sub do_pinwrite
19cc4                 | _do_pinwrite
19cc4     01 4A 05 F6 | 	mov	COUNT_, #1
19cc8     A8 00 A0 FD | 	call	#pushregs_
19ccc     18 F0 07 F1 | 	add	ptra, #24
19cd0     50 15 BF FD | 	call	#_pop
19cd4     FD 14 02 F6 | 	mov	arg02, result1
19cd8     FE 12 02 F6 | 	mov	arg01, result2
19cdc     FF 1E 02 F6 | 	mov	local01, result3
19ce0     A7 14 62 FC | 	wrlong	arg02, fp
19ce4     04 4E 05 F1 | 	add	fp, #4
19ce8     A7 12 62 FC | 	wrlong	arg01, fp
19cec     04 4E 05 F1 | 	add	fp, #4
19cf0     A7 1E 62 FC | 	wrlong	local01, fp
19cf4     08 4E 85 F1 | 	sub	fp, #8
19cf8     28 15 BF FD | 	call	#_pop
19cfc     FF 1E 02 F6 | 	mov	local01, result3
19d00     0C 4E 05 F1 | 	add	fp, #12
19d04     A7 FA 61 FC | 	wrlong	result1, fp
19d08     04 4E 05 F1 | 	add	fp, #4
19d0c     A7 FC 61 FC | 	wrlong	result2, fp
19d10     04 4E 05 F1 | 	add	fp, #4
19d14     A7 1E 62 FC | 	wrlong	local01, fp
19d18     08 4E 85 F1 | 	sub	fp, #8
19d1c     A7 12 02 F6 | 	mov	arg01, fp
19d20     0C 4E 85 F1 | 	sub	fp, #12
19d24     C8 BE BF FD | 	call	#_converttoint
19d28     FD 1E 02 F6 | 	mov	local01, result1
19d2c     A7 12 02 F6 | 	mov	arg01, fp
19d30     BC BE BF FD | 	call	#_converttoint
19d34     FD 14 02 F6 | 	mov	arg02, result1
19d38     0F 13 02 F6 | 	mov	arg01, local01
19d3c     78 6F B0 FD | 	call	#__system___pinwrite
19d40     A7 F0 03 F6 | 	mov	ptra, fp
19d44     B2 00 A0 FD | 	call	#popregs_
19d48                 | _do_pinwrite_ret
19d48     2D 00 64 FD | 	ret
19d4c                 | 
19d4c                 | ' 
19d4c                 | ' sub do_pinfloat
19d4c                 | _do_pinfloat
19d4c     00 4A 05 F6 | 	mov	COUNT_, #0
19d50     A8 00 A0 FD | 	call	#pushregs_
19d54     0C F0 07 F1 | 	add	ptra, #12
19d58     C8 14 BF FD | 	call	#_pop
19d5c     A7 FA 61 FC | 	wrlong	result1, fp
19d60     04 4E 05 F1 | 	add	fp, #4
19d64     A7 FC 61 FC | 	wrlong	result2, fp
19d68     04 4E 05 F1 | 	add	fp, #4
19d6c     A7 FE 61 FC | 	wrlong	result3, fp
19d70     08 4E 85 F1 | 	sub	fp, #8
19d74     A7 12 02 F6 | 	mov	arg01, fp
19d78     74 BE BF FD | 	call	#_converttoint
19d7c     50 FA 61 FD | 	fltl	result1
19d80     A7 F0 03 F6 | 	mov	ptra, fp
19d84     B2 00 A0 FD | 	call	#popregs_
19d88                 | _do_pinfloat_ret
19d88     2D 00 64 FD | 	ret
19d8c                 | 
19d8c                 | ' 
19d8c                 | ' sub do_pinlo
19d8c                 | _do_pinlo
19d8c     00 4A 05 F6 | 	mov	COUNT_, #0
19d90     A8 00 A0 FD | 	call	#pushregs_
19d94     0C F0 07 F1 | 	add	ptra, #12
19d98     88 14 BF FD | 	call	#_pop
19d9c     A7 FA 61 FC | 	wrlong	result1, fp
19da0     04 4E 05 F1 | 	add	fp, #4
19da4     A7 FC 61 FC | 	wrlong	result2, fp
19da8     04 4E 05 F1 | 	add	fp, #4
19dac     A7 FE 61 FC | 	wrlong	result3, fp
19db0     08 4E 85 F1 | 	sub	fp, #8
19db4     A7 12 02 F6 | 	mov	arg01, fp
19db8     34 BE BF FD | 	call	#_converttoint
19dbc     58 FA 61 FD | 	drvl	result1
19dc0     A7 F0 03 F6 | 	mov	ptra, fp
19dc4     B2 00 A0 FD | 	call	#popregs_
19dc8                 | _do_pinlo_ret
19dc8     2D 00 64 FD | 	ret
19dcc                 | 
19dcc                 | ' 
19dcc                 | ' sub do_pinhi
19dcc                 | _do_pinhi
19dcc     00 4A 05 F6 | 	mov	COUNT_, #0
19dd0     A8 00 A0 FD | 	call	#pushregs_
19dd4     0C F0 07 F1 | 	add	ptra, #12
19dd8     48 14 BF FD | 	call	#_pop
19ddc     A7 FA 61 FC | 	wrlong	result1, fp
19de0     04 4E 05 F1 | 	add	fp, #4
19de4     A7 FC 61 FC | 	wrlong	result2, fp
19de8     04 4E 05 F1 | 	add	fp, #4
19dec     A7 FE 61 FC | 	wrlong	result3, fp
19df0     08 4E 85 F1 | 	sub	fp, #8
19df4     A7 12 02 F6 | 	mov	arg01, fp
19df8     F4 BD BF FD | 	call	#_converttoint
19dfc     59 FA 61 FD | 	drvh	result1
19e00     A7 F0 03 F6 | 	mov	ptra, fp
19e04     B2 00 A0 FD | 	call	#popregs_
19e08                 | _do_pinhi_ret
19e08     2D 00 64 FD | 	ret
19e0c                 | 
19e0c                 | ' 
19e0c                 | ' sub do_pintoggle
19e0c                 | _do_pintoggle
19e0c     00 4A 05 F6 | 	mov	COUNT_, #0
19e10     A8 00 A0 FD | 	call	#pushregs_
19e14     0C F0 07 F1 | 	add	ptra, #12
19e18     08 14 BF FD | 	call	#_pop
19e1c     A7 FA 61 FC | 	wrlong	result1, fp
19e20     04 4E 05 F1 | 	add	fp, #4
19e24     A7 FC 61 FC | 	wrlong	result2, fp
19e28     04 4E 05 F1 | 	add	fp, #4
19e2c     A7 FE 61 FC | 	wrlong	result3, fp
19e30     08 4E 85 F1 | 	sub	fp, #8
19e34     A7 12 02 F6 | 	mov	arg01, fp
19e38     B4 BD BF FD | 	call	#_converttoint
19e3c     5F FA 61 FD | 	drvnot	result1
19e40     A7 F0 03 F6 | 	mov	ptra, fp
19e44     B2 00 A0 FD | 	call	#popregs_
19e48                 | _do_pintoggle_ret
19e48     2D 00 64 FD | 	ret
19e4c                 | 
19e4c                 | ' 
19e4c                 | ' 
19e4c                 | ' sub do_pinstart
19e4c                 | _do_pinstart
19e4c     03 4A 05 F6 | 	mov	COUNT_, #3
19e50     A8 00 A0 FD | 	call	#pushregs_
19e54     30 F0 07 F1 | 	add	ptra, #48
19e58     C8 13 BF FD | 	call	#_pop
19e5c     FD 16 02 F6 | 	mov	arg03, result1
19e60     FE 14 02 F6 | 	mov	arg02, result2
19e64     FF 18 02 F6 | 	mov	arg04, result3
19e68     A7 16 62 FC | 	wrlong	arg03, fp
19e6c     04 4E 05 F1 | 	add	fp, #4
19e70     A7 14 62 FC | 	wrlong	arg02, fp
19e74     04 4E 05 F1 | 	add	fp, #4
19e78     A7 18 62 FC | 	wrlong	arg04, fp
19e7c     08 4E 85 F1 | 	sub	fp, #8
19e80     A0 13 BF FD | 	call	#_pop
19e84     FD 16 02 F6 | 	mov	arg03, result1
19e88     FE 14 02 F6 | 	mov	arg02, result2
19e8c     FF 18 02 F6 | 	mov	arg04, result3
19e90     0C 4E 05 F1 | 	add	fp, #12
19e94     A7 16 62 FC | 	wrlong	arg03, fp
19e98     04 4E 05 F1 | 	add	fp, #4
19e9c     A7 14 62 FC | 	wrlong	arg02, fp
19ea0     04 4E 05 F1 | 	add	fp, #4
19ea4     A7 18 62 FC | 	wrlong	arg04, fp
19ea8     14 4E 85 F1 | 	sub	fp, #20
19eac     74 13 BF FD | 	call	#_pop
19eb0     FD 16 02 F6 | 	mov	arg03, result1
19eb4     FE 14 02 F6 | 	mov	arg02, result2
19eb8     FF 18 02 F6 | 	mov	arg04, result3
19ebc     18 4E 05 F1 | 	add	fp, #24
19ec0     A7 16 62 FC | 	wrlong	arg03, fp
19ec4     04 4E 05 F1 | 	add	fp, #4
19ec8     A7 14 62 FC | 	wrlong	arg02, fp
19ecc     04 4E 05 F1 | 	add	fp, #4
19ed0     A7 18 62 FC | 	wrlong	arg04, fp
19ed4     20 4E 85 F1 | 	sub	fp, #32
19ed8     48 13 BF FD | 	call	#_pop
19edc     FF 16 02 F6 | 	mov	arg03, result3
19ee0     24 4E 05 F1 | 	add	fp, #36
19ee4     A7 FA 61 FC | 	wrlong	result1, fp
19ee8     04 4E 05 F1 | 	add	fp, #4
19eec     A7 FC 61 FC | 	wrlong	result2, fp
19ef0     04 4E 05 F1 | 	add	fp, #4
19ef4     A7 16 62 FC | 	wrlong	arg03, fp
19ef8     08 4E 85 F1 | 	sub	fp, #8
19efc     A7 12 02 F6 | 	mov	arg01, fp
19f00     24 4E 85 F1 | 	sub	fp, #36
19f04     E8 BC BF FD | 	call	#_converttoint
19f08     FD 1E 02 F6 | 	mov	local01, result1
19f0c     18 4E 05 F1 | 	add	fp, #24
19f10     A7 12 02 F6 | 	mov	arg01, fp
19f14     18 4E 85 F1 | 	sub	fp, #24
19f18     D4 BC BF FD | 	call	#_converttoint
19f1c     FD 20 02 F6 | 	mov	local02, result1
19f20     0C 4E 05 F1 | 	add	fp, #12
19f24     A7 12 02 F6 | 	mov	arg01, fp
19f28     0C 4E 85 F1 | 	sub	fp, #12
19f2c     C0 BC BF FD | 	call	#_converttoint
19f30     FD 22 02 F6 | 	mov	local03, result1
19f34     A7 12 02 F6 | 	mov	arg01, fp
19f38     B4 BC BF FD | 	call	#_converttoint
19f3c     40 1E 62 FD | 	dirl	local01
19f40     0F 21 02 FC | 	wrpin	local02, local01
19f44     0F 23 12 FC | 	wxpin	local03, local01
19f48     0F FB 21 FC | 	wypin	result1, local01
19f4c     41 1E 62 FD | 	dirh	local01
19f50     A7 F0 03 F6 | 	mov	ptra, fp
19f54     B2 00 A0 FD | 	call	#popregs_
19f58                 | _do_pinstart_ret
19f58     2D 00 64 FD | 	ret
19f5c                 | 
19f5c                 | ' 
19f5c                 | ' 
19f5c                 | ' sub do_wrpin
19f5c                 | _do_wrpin
19f5c     01 4A 05 F6 | 	mov	COUNT_, #1
19f60     A8 00 A0 FD | 	call	#pushregs_
19f64     18 F0 07 F1 | 	add	ptra, #24
19f68     B8 12 BF FD | 	call	#_pop
19f6c     FD 14 02 F6 | 	mov	arg02, result1
19f70     FE 12 02 F6 | 	mov	arg01, result2
19f74     FF 1E 02 F6 | 	mov	local01, result3
19f78     A7 14 62 FC | 	wrlong	arg02, fp
19f7c     04 4E 05 F1 | 	add	fp, #4
19f80     A7 12 62 FC | 	wrlong	arg01, fp
19f84     04 4E 05 F1 | 	add	fp, #4
19f88     A7 1E 62 FC | 	wrlong	local01, fp
19f8c     08 4E 85 F1 | 	sub	fp, #8
19f90     90 12 BF FD | 	call	#_pop
19f94     FF 1E 02 F6 | 	mov	local01, result3
19f98     0C 4E 05 F1 | 	add	fp, #12
19f9c     A7 FA 61 FC | 	wrlong	result1, fp
19fa0     04 4E 05 F1 | 	add	fp, #4
19fa4     A7 FC 61 FC | 	wrlong	result2, fp
19fa8     04 4E 05 F1 | 	add	fp, #4
19fac     A7 1E 62 FC | 	wrlong	local01, fp
19fb0     08 4E 85 F1 | 	sub	fp, #8
19fb4     A7 12 02 F6 | 	mov	arg01, fp
19fb8     0C 4E 85 F1 | 	sub	fp, #12
19fbc     30 BC BF FD | 	call	#_converttoint
19fc0     FD 1E 02 F6 | 	mov	local01, result1
19fc4     A7 12 02 F6 | 	mov	arg01, fp
19fc8     24 BC BF FD | 	call	#_converttoint
19fcc     0F FB 01 FC | 	wrpin	result1, local01
19fd0     A7 F0 03 F6 | 	mov	ptra, fp
19fd4     B2 00 A0 FD | 	call	#popregs_
19fd8                 | _do_wrpin_ret
19fd8     2D 00 64 FD | 	ret
19fdc                 | 
19fdc                 | ' 
19fdc                 | ' sub do_wxpin
19fdc                 | _do_wxpin
19fdc     01 4A 05 F6 | 	mov	COUNT_, #1
19fe0     A8 00 A0 FD | 	call	#pushregs_
19fe4     18 F0 07 F1 | 	add	ptra, #24
19fe8     38 12 BF FD | 	call	#_pop
19fec     FD 14 02 F6 | 	mov	arg02, result1
19ff0     FE 12 02 F6 | 	mov	arg01, result2
19ff4     FF 1E 02 F6 | 	mov	local01, result3
19ff8     A7 14 62 FC | 	wrlong	arg02, fp
19ffc     04 4E 05 F1 | 	add	fp, #4
1a000     A7 12 62 FC | 	wrlong	arg01, fp
1a004     04 4E 05 F1 | 	add	fp, #4
1a008     A7 1E 62 FC | 	wrlong	local01, fp
1a00c     08 4E 85 F1 | 	sub	fp, #8
1a010     10 12 BF FD | 	call	#_pop
1a014     FF 1E 02 F6 | 	mov	local01, result3
1a018     0C 4E 05 F1 | 	add	fp, #12
1a01c     A7 FA 61 FC | 	wrlong	result1, fp
1a020     04 4E 05 F1 | 	add	fp, #4
1a024     A7 FC 61 FC | 	wrlong	result2, fp
1a028     04 4E 05 F1 | 	add	fp, #4
1a02c     A7 1E 62 FC | 	wrlong	local01, fp
1a030     08 4E 85 F1 | 	sub	fp, #8
1a034     A7 12 02 F6 | 	mov	arg01, fp
1a038     0C 4E 85 F1 | 	sub	fp, #12
1a03c     B0 BB BF FD | 	call	#_converttoint
1a040     FD 1E 02 F6 | 	mov	local01, result1
1a044     A7 12 02 F6 | 	mov	arg01, fp
1a048     A4 BB BF FD | 	call	#_converttoint
1a04c     0F FB 11 FC | 	wxpin	result1, local01
1a050     A7 F0 03 F6 | 	mov	ptra, fp
1a054     B2 00 A0 FD | 	call	#popregs_
1a058                 | _do_wxpin_ret
1a058     2D 00 64 FD | 	ret
1a05c                 | 
1a05c                 | ' 
1a05c                 | ' sub do_wypin
1a05c                 | _do_wypin
1a05c     01 4A 05 F6 | 	mov	COUNT_, #1
1a060     A8 00 A0 FD | 	call	#pushregs_
1a064     18 F0 07 F1 | 	add	ptra, #24
1a068     B8 11 BF FD | 	call	#_pop
1a06c     FD 14 02 F6 | 	mov	arg02, result1
1a070     FE 12 02 F6 | 	mov	arg01, result2
1a074     FF 1E 02 F6 | 	mov	local01, result3
1a078     A7 14 62 FC | 	wrlong	arg02, fp
1a07c     04 4E 05 F1 | 	add	fp, #4
1a080     A7 12 62 FC | 	wrlong	arg01, fp
1a084     04 4E 05 F1 | 	add	fp, #4
1a088     A7 1E 62 FC | 	wrlong	local01, fp
1a08c     08 4E 85 F1 | 	sub	fp, #8
1a090     90 11 BF FD | 	call	#_pop
1a094     FF 1E 02 F6 | 	mov	local01, result3
1a098     0C 4E 05 F1 | 	add	fp, #12
1a09c     A7 FA 61 FC | 	wrlong	result1, fp
1a0a0     04 4E 05 F1 | 	add	fp, #4
1a0a4     A7 FC 61 FC | 	wrlong	result2, fp
1a0a8     04 4E 05 F1 | 	add	fp, #4
1a0ac     A7 1E 62 FC | 	wrlong	local01, fp
1a0b0     08 4E 85 F1 | 	sub	fp, #8
1a0b4     A7 12 02 F6 | 	mov	arg01, fp
1a0b8     0C 4E 85 F1 | 	sub	fp, #12
1a0bc     30 BB BF FD | 	call	#_converttoint
1a0c0     FD 1E 02 F6 | 	mov	local01, result1
1a0c4     A7 12 02 F6 | 	mov	arg01, fp
1a0c8     24 BB BF FD | 	call	#_converttoint
1a0cc     0F FB 21 FC | 	wypin	result1, local01
1a0d0     A7 F0 03 F6 | 	mov	ptra, fp
1a0d4     B2 00 A0 FD | 	call	#popregs_
1a0d8                 | _do_wypin_ret
1a0d8     2D 00 64 FD | 	ret
1a0dc                 | 
1a0dc                 | ' 
1a0dc                 | ' sub do_position
1a0dc                 | _do_position
1a0dc     01 4A 05 F6 | 	mov	COUNT_, #1
1a0e0     A8 00 A0 FD | 	call	#pushregs_
1a0e4     18 F0 07 F1 | 	add	ptra, #24
1a0e8     38 11 BF FD | 	call	#_pop
1a0ec     FD 14 02 F6 | 	mov	arg02, result1
1a0f0     FE 12 02 F6 | 	mov	arg01, result2
1a0f4     FF 1E 02 F6 | 	mov	local01, result3
1a0f8     A7 14 62 FC | 	wrlong	arg02, fp
1a0fc     04 4E 05 F1 | 	add	fp, #4
1a100     A7 12 62 FC | 	wrlong	arg01, fp
1a104     04 4E 05 F1 | 	add	fp, #4
1a108     A7 1E 62 FC | 	wrlong	local01, fp
1a10c     08 4E 85 F1 | 	sub	fp, #8
1a110     10 11 BF FD | 	call	#_pop
1a114     FF 1E 02 F6 | 	mov	local01, result3
1a118     0C 4E 05 F1 | 	add	fp, #12
1a11c     A7 FA 61 FC | 	wrlong	result1, fp
1a120     04 4E 05 F1 | 	add	fp, #4
1a124     A7 FC 61 FC | 	wrlong	result2, fp
1a128     04 4E 05 F1 | 	add	fp, #4
1a12c     A7 1E 62 FC | 	wrlong	local01, fp
1a130     08 4E 85 F1 | 	sub	fp, #8
1a134     A7 12 02 F6 | 	mov	arg01, fp
1a138     0C 4E 85 F1 | 	sub	fp, #12
1a13c     B0 BA BF FD | 	call	#_converttoint
1a140     FD 1E 02 F6 | 	mov	local01, result1
1a144     A7 12 02 F6 | 	mov	arg01, fp
1a148     A4 BA BF FD | 	call	#_converttoint
1a14c     FD 14 02 F6 | 	mov	arg02, result1
1a150     0F 13 02 F6 | 	mov	arg01, local01
1a154     C0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a158     A7 F0 03 F6 | 	mov	ptra, fp
1a15c     B2 00 A0 FD | 	call	#popregs_
1a160                 | _do_position_ret
1a160     2D 00 64 FD | 	ret
1a164                 | 
1a164                 | ' 
1a164                 | ' sub do_poke
1a164                 | _do_poke
1a164     01 4A 05 F6 | 	mov	COUNT_, #1
1a168     A8 00 A0 FD | 	call	#pushregs_
1a16c     20 F0 07 F1 | 	add	ptra, #32
1a170     B0 10 BF FD | 	call	#_pop
1a174     FD 14 02 F6 | 	mov	arg02, result1
1a178     FE 12 02 F6 | 	mov	arg01, result2
1a17c     FF 1E 02 F6 | 	mov	local01, result3
1a180     A7 14 62 FC | 	wrlong	arg02, fp
1a184     04 4E 05 F1 | 	add	fp, #4
1a188     A7 12 62 FC | 	wrlong	arg01, fp
1a18c     04 4E 05 F1 | 	add	fp, #4
1a190     A7 1E 62 FC | 	wrlong	local01, fp
1a194     08 4E 85 F1 | 	sub	fp, #8
1a198     88 10 BF FD | 	call	#_pop
1a19c     FF 1E 02 F6 | 	mov	local01, result3
1a1a0     0C 4E 05 F1 | 	add	fp, #12
1a1a4     A7 FA 61 FC | 	wrlong	result1, fp
1a1a8     04 4E 05 F1 | 	add	fp, #4
1a1ac     A7 FC 61 FC | 	wrlong	result2, fp
1a1b0     04 4E 05 F1 | 	add	fp, #4
1a1b4     A7 1E 62 FC | 	wrlong	local01, fp
1a1b8     08 4E 85 F1 | 	sub	fp, #8
1a1bc     A7 12 02 F6 | 	mov	arg01, fp
1a1c0     0C 4E 85 F1 | 	sub	fp, #12
1a1c4     28 BA BF FD | 	call	#_converttoint
1a1c8     18 4E 05 F1 | 	add	fp, #24
1a1cc     A7 FA 61 FC | 	wrlong	result1, fp
1a1d0     18 4E 85 F1 | 	sub	fp, #24
1a1d4     A7 12 02 F6 | 	mov	arg01, fp
1a1d8     14 BA BF FD | 	call	#_converttoint
1a1dc     1C 4E 05 F1 | 	add	fp, #28
1a1e0     A7 FA 61 FC | 	wrlong	result1, fp
1a1e4                 | ' t1=pop() 'value
1a1e4                 | ' t2=pop() 
1a1e4                 | ' a=converttoint(t2) : v=converttoint(t1)
1a1e4                 | ' if a<$80000 then poke a,v else pspoke a,v
1a1e4     04 4E 85 F1 | 	sub	fp, #4
1a1e8     A7 1E 02 FB | 	rdlong	local01, fp
1a1ec     18 4E 85 F1 | 	sub	fp, #24
1a1f0     00 04 00 FF 
1a1f4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a1f8     1C 00 90 3D |  if_ae	jmp	#LR__2120
1a1fc     18 4E 05 F1 | 	add	fp, #24
1a200     A7 12 02 FB | 	rdlong	arg01, fp
1a204     04 4E 05 F1 | 	add	fp, #4
1a208     A7 14 02 FB | 	rdlong	arg02, fp
1a20c     1C 4E 85 F1 | 	sub	fp, #28
1a210     09 15 42 FC | 	wrbyte	arg02, arg01
1a214     18 00 90 FD | 	jmp	#LR__2121
1a218                 | LR__2120
1a218     18 4E 05 F1 | 	add	fp, #24
1a21c     A7 12 02 FB | 	rdlong	arg01, fp
1a220     04 4E 05 F1 | 	add	fp, #4
1a224     A7 14 02 FB | 	rdlong	arg02, fp
1a228     1C 4E 85 F1 | 	sub	fp, #28
1a22c     30 35 B0 FD | 	call	#_pspoke
1a230                 | LR__2121
1a230     A7 F0 03 F6 | 	mov	ptra, fp
1a234     B2 00 A0 FD | 	call	#popregs_
1a238                 | _do_poke_ret
1a238     2D 00 64 FD | 	ret
1a23c                 | 
1a23c                 | ' 
1a23c                 | ' sub do_dpoke
1a23c                 | _do_dpoke
1a23c     01 4A 05 F6 | 	mov	COUNT_, #1
1a240     A8 00 A0 FD | 	call	#pushregs_
1a244     20 F0 07 F1 | 	add	ptra, #32
1a248     D8 0F BF FD | 	call	#_pop
1a24c     FD 14 02 F6 | 	mov	arg02, result1
1a250     FE 12 02 F6 | 	mov	arg01, result2
1a254     FF 1E 02 F6 | 	mov	local01, result3
1a258     A7 14 62 FC | 	wrlong	arg02, fp
1a25c     04 4E 05 F1 | 	add	fp, #4
1a260     A7 12 62 FC | 	wrlong	arg01, fp
1a264     04 4E 05 F1 | 	add	fp, #4
1a268     A7 1E 62 FC | 	wrlong	local01, fp
1a26c     08 4E 85 F1 | 	sub	fp, #8
1a270     B0 0F BF FD | 	call	#_pop
1a274     FF 1E 02 F6 | 	mov	local01, result3
1a278     0C 4E 05 F1 | 	add	fp, #12
1a27c     A7 FA 61 FC | 	wrlong	result1, fp
1a280     04 4E 05 F1 | 	add	fp, #4
1a284     A7 FC 61 FC | 	wrlong	result2, fp
1a288     04 4E 05 F1 | 	add	fp, #4
1a28c     A7 1E 62 FC | 	wrlong	local01, fp
1a290     08 4E 85 F1 | 	sub	fp, #8
1a294     A7 12 02 F6 | 	mov	arg01, fp
1a298     0C 4E 85 F1 | 	sub	fp, #12
1a29c     50 B9 BF FD | 	call	#_converttoint
1a2a0     18 4E 05 F1 | 	add	fp, #24
1a2a4     A7 FA 61 FC | 	wrlong	result1, fp
1a2a8     18 4E 85 F1 | 	sub	fp, #24
1a2ac     A7 12 02 F6 | 	mov	arg01, fp
1a2b0     3C B9 BF FD | 	call	#_converttoint
1a2b4     1C 4E 05 F1 | 	add	fp, #28
1a2b8     A7 FA 61 FC | 	wrlong	result1, fp
1a2bc                 | ' t1=pop() 'value
1a2bc                 | ' t2=pop() 
1a2bc                 | ' a=converttoint(t2) : v=converttoint(t1)
1a2bc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1a2bc     04 4E 85 F1 | 	sub	fp, #4
1a2c0     A7 1E 02 FB | 	rdlong	local01, fp
1a2c4     18 4E 85 F1 | 	sub	fp, #24
1a2c8     00 04 00 FF 
1a2cc     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a2d0     1C 00 90 3D |  if_ae	jmp	#LR__2130
1a2d4     18 4E 05 F1 | 	add	fp, #24
1a2d8     A7 12 02 FB | 	rdlong	arg01, fp
1a2dc     04 4E 05 F1 | 	add	fp, #4
1a2e0     A7 14 02 FB | 	rdlong	arg02, fp
1a2e4     1C 4E 85 F1 | 	sub	fp, #28
1a2e8     09 15 52 FC | 	wrword	arg02, arg01
1a2ec     18 00 90 FD | 	jmp	#LR__2131
1a2f0                 | LR__2130
1a2f0     18 4E 05 F1 | 	add	fp, #24
1a2f4     A7 12 02 FB | 	rdlong	arg01, fp
1a2f8     04 4E 05 F1 | 	add	fp, #4
1a2fc     A7 14 02 FB | 	rdlong	arg02, fp
1a300     1C 4E 85 F1 | 	sub	fp, #28
1a304     10 34 B0 FD | 	call	#_psdpoke
1a308                 | LR__2131
1a308     A7 F0 03 F6 | 	mov	ptra, fp
1a30c     B2 00 A0 FD | 	call	#popregs_
1a310                 | _do_dpoke_ret
1a310     2D 00 64 FD | 	ret
1a314                 | 
1a314                 | ' 
1a314                 | ' sub do_lpoke
1a314                 | _do_lpoke
1a314     01 4A 05 F6 | 	mov	COUNT_, #1
1a318     A8 00 A0 FD | 	call	#pushregs_
1a31c     20 F0 07 F1 | 	add	ptra, #32
1a320     00 0F BF FD | 	call	#_pop
1a324     FD 14 02 F6 | 	mov	arg02, result1
1a328     FE 12 02 F6 | 	mov	arg01, result2
1a32c     FF 1E 02 F6 | 	mov	local01, result3
1a330     A7 14 62 FC | 	wrlong	arg02, fp
1a334     04 4E 05 F1 | 	add	fp, #4
1a338     A7 12 62 FC | 	wrlong	arg01, fp
1a33c     04 4E 05 F1 | 	add	fp, #4
1a340     A7 1E 62 FC | 	wrlong	local01, fp
1a344     08 4E 85 F1 | 	sub	fp, #8
1a348     D8 0E BF FD | 	call	#_pop
1a34c     FF 1E 02 F6 | 	mov	local01, result3
1a350     0C 4E 05 F1 | 	add	fp, #12
1a354     A7 FA 61 FC | 	wrlong	result1, fp
1a358     04 4E 05 F1 | 	add	fp, #4
1a35c     A7 FC 61 FC | 	wrlong	result2, fp
1a360     04 4E 05 F1 | 	add	fp, #4
1a364     A7 1E 62 FC | 	wrlong	local01, fp
1a368     08 4E 85 F1 | 	sub	fp, #8
1a36c     A7 12 02 F6 | 	mov	arg01, fp
1a370     0C 4E 85 F1 | 	sub	fp, #12
1a374     78 B8 BF FD | 	call	#_converttoint
1a378     18 4E 05 F1 | 	add	fp, #24
1a37c     A7 FA 61 FC | 	wrlong	result1, fp
1a380     18 4E 85 F1 | 	sub	fp, #24
1a384     A7 12 02 F6 | 	mov	arg01, fp
1a388     64 B8 BF FD | 	call	#_converttoint
1a38c     1C 4E 05 F1 | 	add	fp, #28
1a390     A7 FA 61 FC | 	wrlong	result1, fp
1a394                 | ' t1=pop() 'value
1a394                 | ' t2=pop() 
1a394                 | ' a=converttoint(t2) : v=converttoint(t1)
1a394                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1a394     04 4E 85 F1 | 	sub	fp, #4
1a398     A7 1E 02 FB | 	rdlong	local01, fp
1a39c     18 4E 85 F1 | 	sub	fp, #24
1a3a0     00 04 00 FF 
1a3a4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a3a8     1C 00 90 3D |  if_ae	jmp	#LR__2140
1a3ac     18 4E 05 F1 | 	add	fp, #24
1a3b0     A7 12 02 FB | 	rdlong	arg01, fp
1a3b4     04 4E 05 F1 | 	add	fp, #4
1a3b8     A7 14 02 FB | 	rdlong	arg02, fp
1a3bc     1C 4E 85 F1 | 	sub	fp, #28
1a3c0     09 15 62 FC | 	wrlong	arg02, arg01
1a3c4     18 00 90 FD | 	jmp	#LR__2141
1a3c8                 | LR__2140
1a3c8     18 4E 05 F1 | 	add	fp, #24
1a3cc     A7 12 02 FB | 	rdlong	arg01, fp
1a3d0     04 4E 05 F1 | 	add	fp, #4
1a3d4     A7 14 02 FB | 	rdlong	arg02, fp
1a3d8     1C 4E 85 F1 | 	sub	fp, #28
1a3dc     F0 32 B0 FD | 	call	#_pslpoke
1a3e0                 | LR__2141
1a3e0     A7 F0 03 F6 | 	mov	ptra, fp
1a3e4     B2 00 A0 FD | 	call	#popregs_
1a3e8                 | _do_lpoke_ret
1a3e8     2D 00 64 FD | 	ret
1a3ec                 | 
1a3ec                 | ' 
1a3ec                 | ' sub do_peek
1a3ec                 | _do_peek
1a3ec     00 4A 05 F6 | 	mov	COUNT_, #0
1a3f0     A8 00 A0 FD | 	call	#pushregs_
1a3f4     14 F0 07 F1 | 	add	ptra, #20
1a3f8     28 0E BF FD | 	call	#_pop
1a3fc     A7 FA 61 FC | 	wrlong	result1, fp
1a400     04 4E 05 F1 | 	add	fp, #4
1a404     A7 FC 61 FC | 	wrlong	result2, fp
1a408     04 4E 05 F1 | 	add	fp, #4
1a40c     A7 FE 61 FC | 	wrlong	result3, fp
1a410     08 4E 85 F1 | 	sub	fp, #8
1a414     A7 12 02 F6 | 	mov	arg01, fp
1a418     D4 B7 BF FD | 	call	#_converttoint
1a41c     0C 4E 05 F1 | 	add	fp, #12
1a420     A7 FA 61 FC | 	wrlong	result1, fp
1a424                 | ' t1=pop()
1a424                 | ' a=converttoint(t1)
1a424                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1a424     0C 4E 85 F1 | 	sub	fp, #12
1a428     00 04 00 FF 
1a42c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a430     1C 00 90 3D |  if_ae	jmp	#LR__2150
1a434     0C 4E 05 F1 | 	add	fp, #12
1a438     A7 12 02 FB | 	rdlong	arg01, fp
1a43c     09 FB C1 FA | 	rdbyte	result1, arg01
1a440     04 4E 05 F1 | 	add	fp, #4
1a444     A7 FA 61 FC | 	wrlong	result1, fp
1a448     10 4E 85 F1 | 	sub	fp, #16
1a44c     20 00 90 FD | 	jmp	#LR__2151
1a450                 | LR__2150
1a450     0C 4E 05 F1 | 	add	fp, #12
1a454     A7 12 02 FB | 	rdlong	arg01, fp
1a458     0C 4E 85 F1 | 	sub	fp, #12
1a45c     48 33 B0 FD | 	call	#_pspeek
1a460     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a464     10 4E 05 F1 | 	add	fp, #16
1a468     A7 FA 61 FC | 	wrlong	result1, fp
1a46c     10 4E 85 F1 | 	sub	fp, #16
1a470                 | LR__2151
1a470     08 4E 05 F1 | 	add	fp, #8
1a474     A7 3A 68 FC | 	wrlong	#29, fp
1a478     08 4E 05 F1 | 	add	fp, #8
1a47c     A7 12 02 FB | 	rdlong	arg01, fp
1a480     10 4E 85 F1 | 	sub	fp, #16
1a484     A7 12 62 FC | 	wrlong	arg01, fp
1a488     A7 12 02 F6 | 	mov	arg01, fp
1a48c     2C 0E BF FD | 	call	#_push
1a490     A7 F0 03 F6 | 	mov	ptra, fp
1a494     B2 00 A0 FD | 	call	#popregs_
1a498                 | _do_peek_ret
1a498     2D 00 64 FD | 	ret
1a49c                 | 
1a49c                 | ' 
1a49c                 | ' sub do_dpeek
1a49c                 | _do_dpeek
1a49c     00 4A 05 F6 | 	mov	COUNT_, #0
1a4a0     A8 00 A0 FD | 	call	#pushregs_
1a4a4     14 F0 07 F1 | 	add	ptra, #20
1a4a8     78 0D BF FD | 	call	#_pop
1a4ac     A7 FA 61 FC | 	wrlong	result1, fp
1a4b0     04 4E 05 F1 | 	add	fp, #4
1a4b4     A7 FC 61 FC | 	wrlong	result2, fp
1a4b8     04 4E 05 F1 | 	add	fp, #4
1a4bc     A7 FE 61 FC | 	wrlong	result3, fp
1a4c0     08 4E 85 F1 | 	sub	fp, #8
1a4c4     A7 12 02 F6 | 	mov	arg01, fp
1a4c8     24 B7 BF FD | 	call	#_converttoint
1a4cc     0C 4E 05 F1 | 	add	fp, #12
1a4d0     A7 FA 61 FC | 	wrlong	result1, fp
1a4d4                 | ' t1=pop()
1a4d4                 | ' a=converttoint(t1)
1a4d4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1a4d4     0C 4E 85 F1 | 	sub	fp, #12
1a4d8     00 04 00 FF 
1a4dc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a4e0     1C 00 90 3D |  if_ae	jmp	#LR__2160
1a4e4     0C 4E 05 F1 | 	add	fp, #12
1a4e8     A7 12 02 FB | 	rdlong	arg01, fp
1a4ec     09 FB E1 FA | 	rdword	result1, arg01
1a4f0     04 4E 05 F1 | 	add	fp, #4
1a4f4     A7 FA 61 FC | 	wrlong	result1, fp
1a4f8     10 4E 85 F1 | 	sub	fp, #16
1a4fc     1C 00 90 FD | 	jmp	#LR__2161
1a500                 | LR__2160
1a500     0C 4E 05 F1 | 	add	fp, #12
1a504     A7 12 02 FB | 	rdlong	arg01, fp
1a508     0C 4E 85 F1 | 	sub	fp, #12
1a50c     48 33 B0 FD | 	call	#_psdpeek
1a510     10 4E 05 F1 | 	add	fp, #16
1a514     A7 FA 61 FC | 	wrlong	result1, fp
1a518     10 4E 85 F1 | 	sub	fp, #16
1a51c                 | LR__2161
1a51c     08 4E 05 F1 | 	add	fp, #8
1a520     A7 3A 68 FC | 	wrlong	#29, fp
1a524     08 4E 05 F1 | 	add	fp, #8
1a528     A7 12 02 FB | 	rdlong	arg01, fp
1a52c     10 4E 85 F1 | 	sub	fp, #16
1a530     A7 12 62 FC | 	wrlong	arg01, fp
1a534     A7 12 02 F6 | 	mov	arg01, fp
1a538     80 0D BF FD | 	call	#_push
1a53c     A7 F0 03 F6 | 	mov	ptra, fp
1a540     B2 00 A0 FD | 	call	#popregs_
1a544                 | _do_dpeek_ret
1a544     2D 00 64 FD | 	ret
1a548                 | 
1a548                 | ' 
1a548                 | ' 
1a548                 | ' sub do_lpeek
1a548                 | _do_lpeek
1a548     00 4A 05 F6 | 	mov	COUNT_, #0
1a54c     A8 00 A0 FD | 	call	#pushregs_
1a550     14 F0 07 F1 | 	add	ptra, #20
1a554     CC 0C BF FD | 	call	#_pop
1a558     A7 FA 61 FC | 	wrlong	result1, fp
1a55c     04 4E 05 F1 | 	add	fp, #4
1a560     A7 FC 61 FC | 	wrlong	result2, fp
1a564     04 4E 05 F1 | 	add	fp, #4
1a568     A7 FE 61 FC | 	wrlong	result3, fp
1a56c     08 4E 85 F1 | 	sub	fp, #8
1a570     A7 12 02 F6 | 	mov	arg01, fp
1a574     78 B6 BF FD | 	call	#_converttoint
1a578     0C 4E 05 F1 | 	add	fp, #12
1a57c     A7 FA 61 FC | 	wrlong	result1, fp
1a580                 | ' t1=pop()
1a580                 | ' a=converttoint(t1)
1a580                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1a580     0C 4E 85 F1 | 	sub	fp, #12
1a584     00 04 00 FF 
1a588     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a58c     1C 00 90 3D |  if_ae	jmp	#LR__2170
1a590     0C 4E 05 F1 | 	add	fp, #12
1a594     A7 12 02 FB | 	rdlong	arg01, fp
1a598     09 FB 01 FB | 	rdlong	result1, arg01
1a59c     04 4E 05 F1 | 	add	fp, #4
1a5a0     A7 FA 61 FC | 	wrlong	result1, fp
1a5a4     10 4E 85 F1 | 	sub	fp, #16
1a5a8     1C 00 90 FD | 	jmp	#LR__2171
1a5ac                 | LR__2170
1a5ac     0C 4E 05 F1 | 	add	fp, #12
1a5b0     A7 12 02 FB | 	rdlong	arg01, fp
1a5b4     0C 4E 85 F1 | 	sub	fp, #12
1a5b8     44 32 B0 FD | 	call	#_pslpeek
1a5bc     10 4E 05 F1 | 	add	fp, #16
1a5c0     A7 FA 61 FC | 	wrlong	result1, fp
1a5c4     10 4E 85 F1 | 	sub	fp, #16
1a5c8                 | LR__2171
1a5c8     08 4E 05 F1 | 	add	fp, #8
1a5cc     A7 3A 68 FC | 	wrlong	#29, fp
1a5d0     08 4E 05 F1 | 	add	fp, #8
1a5d4     A7 12 02 FB | 	rdlong	arg01, fp
1a5d8     10 4E 85 F1 | 	sub	fp, #16
1a5dc     A7 12 62 FC | 	wrlong	arg01, fp
1a5e0     A7 12 02 F6 | 	mov	arg01, fp
1a5e4     D4 0C BF FD | 	call	#_push
1a5e8     A7 F0 03 F6 | 	mov	ptra, fp
1a5ec     B2 00 A0 FD | 	call	#popregs_
1a5f0                 | _do_lpeek_ret
1a5f0     2D 00 64 FD | 	ret
1a5f4                 | 
1a5f4                 | ' 
1a5f4                 | ' sub do_fre
1a5f4                 | _do_fre
1a5f4     01 4A 05 F6 | 	mov	COUNT_, #1
1a5f8     A8 00 A0 FD | 	call	#pushregs_
1a5fc     0C F0 07 F1 | 	add	ptra, #12
1a600     51 00 00 FF 
1a604     A8 E5 05 F1 | 	add	objptr, ##41896
1a608     F2 12 02 FB | 	rdlong	arg01, objptr
1a60c     0E 00 00 FF 
1a610     4C E5 85 F1 | 	sub	objptr, ##7500
1a614     F2 1E 02 FB | 	rdlong	local01, objptr
1a618     0F 13 82 F1 | 	sub	arg01, local01
1a61c     0E 00 00 FF 
1a620     B8 E5 05 F1 | 	add	objptr, ##7608
1a624     F2 12 62 FC | 	wrlong	arg01, objptr
1a628     08 4E 05 F1 | 	add	fp, #8
1a62c     A7 3A 68 FC | 	wrlong	#29, fp
1a630     08 4E 85 F1 | 	sub	fp, #8
1a634     F2 1E 02 FB | 	rdlong	local01, objptr
1a638     52 00 00 FF 
1a63c     14 E4 85 F1 | 	sub	objptr, ##42004
1a640     A7 1E 62 FC | 	wrlong	local01, fp
1a644     A7 12 02 F6 | 	mov	arg01, fp
1a648     70 0C BF FD | 	call	#_push
1a64c     A7 F0 03 F6 | 	mov	ptra, fp
1a650     B2 00 A0 FD | 	call	#popregs_
1a654                 | _do_fre_ret
1a654     2D 00 64 FD | 	ret
1a658                 | 
1a658                 | ' 
1a658                 | ' sub do_adr
1a658                 | _do_adr
1a658                 | _do_adr_ret
1a658     2D 00 64 FD | 	ret
1a65c                 | 
1a65c                 | ' 
1a65c                 | ' sub do_getnotevalue
1a65c                 | _do_getnotevalue
1a65c     01 4A 05 F6 | 	mov	COUNT_, #1
1a660     A8 00 A0 FD | 	call	#pushregs_
1a664     1C F0 07 F1 | 	add	ptra, #28
1a668     B8 0B BF FD | 	call	#_pop
1a66c     FF 14 02 F6 | 	mov	arg02, result3
1a670     10 4E 05 F1 | 	add	fp, #16
1a674     A7 FA 61 FC | 	wrlong	result1, fp
1a678     04 4E 05 F1 | 	add	fp, #4
1a67c     A7 FC 61 FC | 	wrlong	result2, fp
1a680     04 4E 05 F1 | 	add	fp, #4
1a684     A7 14 62 FC | 	wrlong	arg02, fp
1a688     08 4E 85 F1 | 	sub	fp, #8
1a68c     A7 12 02 F6 | 	mov	arg01, fp
1a690     10 4E 85 F1 | 	sub	fp, #16
1a694     58 B5 BF FD | 	call	#_converttoint
1a698     FD 14 52 F6 | 	abs	arg02, result1 wc
1a69c     0C 14 16 FD | 	qdiv	arg02, #12
1a6a0     0C 4E 05 F1 | 	add	fp, #12
1a6a4     A7 FA 61 FC | 	wrlong	result1, fp
1a6a8     14 00 00 FF 
1a6ac     D8 E4 05 F1 | 	add	objptr, ##10456
1a6b0     08 4E 85 F1 | 	sub	fp, #8
1a6b4     19 14 62 FD | 	getqy	arg02
1a6b8     0A 15 82 F6 | 	negc	arg02, arg02
1a6bc     02 14 66 F0 | 	shl	arg02, #2
1a6c0     F2 14 02 F1 | 	add	arg02, objptr
1a6c4     0A 15 02 FB | 	rdlong	arg02, arg02
1a6c8     A7 14 62 FC | 	wrlong	arg02, fp
1a6cc     08 4E 05 F1 | 	add	fp, #8
1a6d0     A7 14 02 FB | 	rdlong	arg02, fp
1a6d4     0A 15 52 F6 | 	abs	arg02, arg02 wc
1a6d8     0C 14 16 FD | 	qdiv	arg02, #12
1a6dc     0C 4E 85 F1 | 	sub	fp, #12
1a6e0     14 00 00 FF 
1a6e4     D8 E4 85 F1 | 	sub	objptr, ##10456
1a6e8     18 14 62 FD | 	getqx	arg02
1a6ec     0A 13 82 F6 | 	negc	arg01, arg02
1a6f0     09 13 52 F6 | 	abs	arg01, arg01 wc
1a6f4     1F 1E C6 C9 |  if_b	decod	local01, #31
1a6f8     00 1E 06 36 |  if_ae	mov	local01, #0
1a6fc     B4 8B B0 FD | 	call	#__system___float_fromuns
1a700     0F FB 61 F5 | 	xor	result1, local01
1a704     08 4E 05 F1 | 	add	fp, #8
1a708     A7 FA 61 FC | 	wrlong	result1, fp
1a70c     FD 14 02 F6 | 	mov	arg02, result1
1a710     08 4E 85 F1 | 	sub	fp, #8
1a714     1E 12 C6 F9 | 	decod	arg01, #30
1a718     A4 9E B0 FD | 	call	#__system____builtin_powf
1a71c     FD 12 02 F6 | 	mov	arg01, result1
1a720     04 4E 05 F1 | 	add	fp, #4
1a724     A7 14 02 FB | 	rdlong	arg02, fp
1a728     04 4E 85 F1 | 	sub	fp, #4
1a72c     88 8F B0 FD | 	call	#__system___float_mul
1a730     A7 FA 61 FC | 	wrlong	result1, fp
1a734     10 4E 05 F1 | 	add	fp, #16
1a738     A7 FA 61 FC | 	wrlong	result1, fp
1a73c     08 4E 05 F1 | 	add	fp, #8
1a740     A7 3C 68 FC | 	wrlong	#30, fp
1a744     08 4E 85 F1 | 	sub	fp, #8
1a748     A7 12 02 F6 | 	mov	arg01, fp
1a74c     10 4E 85 F1 | 	sub	fp, #16
1a750     68 0B BF FD | 	call	#_push
1a754     A7 F0 03 F6 | 	mov	ptra, fp
1a758     B2 00 A0 FD | 	call	#popregs_
1a75c                 | _do_getnotevalue_ret
1a75c     2D 00 64 FD | 	ret
1a760                 | 
1a760                 | ' 
1a760                 | ' 
1a760                 | ' sub do_waitms
1a760                 | _do_waitms
1a760     01 4A 05 F6 | 	mov	COUNT_, #1
1a764     A8 00 A0 FD | 	call	#pushregs_
1a768     18 F0 07 F1 | 	add	ptra, #24
1a76c     B4 0A BF FD | 	call	#_pop
1a770     A7 FA 61 FC | 	wrlong	result1, fp
1a774     04 4E 05 F1 | 	add	fp, #4
1a778     A7 FC 61 FC | 	wrlong	result2, fp
1a77c     04 4E 05 F1 | 	add	fp, #4
1a780     A7 FE 61 FC | 	wrlong	result3, fp
1a784                 | ' 
1a784                 | ' t1=pop() 'value
1a784                 | ' 
1a784                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1a784     08 4E 85 F1 | 	sub	fp, #8
1a788     1C FE 0D F2 | 	cmp	result3, #28 wz
1a78c     08 4E 05 51 |  if_ne	add	fp, #8
1a790     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a794     08 4E 85 51 |  if_ne	sub	fp, #8
1a798     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1a79c     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a7a0     0C 4E 05 A1 |  if_e	add	fp, #12
1a7a4     A7 12 62 AC |  if_e	wrlong	arg01, fp
1a7a8     0C 4E 85 A1 |  if_e	sub	fp, #12
1a7ac     14 00 90 AD |  if_e	jmp	#LR__2180
1a7b0     A7 12 02 F6 | 	mov	arg01, fp
1a7b4     38 B4 BF FD | 	call	#_converttoint
1a7b8     0C 4E 05 F1 | 	add	fp, #12
1a7bc     A7 FA 61 FC | 	wrlong	result1, fp
1a7c0     0C 4E 85 F1 | 	sub	fp, #12
1a7c4                 | LR__2180
1a7c4                 | ' if t<0 then return
1a7c4     0C 4E 05 F1 | 	add	fp, #12
1a7c8     A7 12 02 FB | 	rdlong	arg01, fp
1a7cc     0C 4E 85 F1 | 	sub	fp, #12
1a7d0     00 12 56 F2 | 	cmps	arg01, #0 wc
1a7d4     B8 00 90 CD |  if_b	jmp	#LR__2185
1a7d8                 | ' if t < 5000 then 
1a7d8     0C 4E 05 F1 | 	add	fp, #12
1a7dc     A7 12 02 FB | 	rdlong	arg01, fp
1a7e0     0C 4E 85 F1 | 	sub	fp, #12
1a7e4     09 00 00 FF 
1a7e8     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1a7ec     14 00 90 3D |  if_ae	jmp	#LR__2181
1a7f0     0C 4E 05 F1 | 	add	fp, #12
1a7f4     A7 12 02 FB | 	rdlong	arg01, fp
1a7f8     0C 4E 85 F1 | 	sub	fp, #12
1a7fc     F8 65 B0 FD | 	call	#__system___waitms
1a800     8C 00 90 FD | 	jmp	#LR__2184
1a804                 | LR__2181
1a804     10 4E 05 F1 | 	add	fp, #16
1a808     A7 02 68 FC | 	wrlong	#1, fp
1a80c     04 4E 85 F1 | 	sub	fp, #4
1a810     A7 12 02 FB | 	rdlong	arg01, fp
1a814     09 13 52 F6 | 	abs	arg01, arg01 wc
1a818     09 00 00 FF 
1a81c     88 13 16 FD | 	qdiv	arg01, ##5000
1a820                 | '   for i=1 to t/5000
1a820     0C 4E 85 F1 | 	sub	fp, #12
1a824     18 1E 62 FD | 	getqx	local01
1a828     0F 1F 82 F6 | 	negc	local01, local01
1a82c     01 1E 06 F1 | 	add	local01, #1
1a830                 | LR__2182
1a830     10 4E 05 F1 | 	add	fp, #16
1a834     A7 12 02 FB | 	rdlong	arg01, fp
1a838     10 4E 85 F1 | 	sub	fp, #16
1a83c     0F 13 52 F2 | 	cmps	arg01, local01 wc
1a840     28 00 90 3D |  if_ae	jmp	#LR__2183
1a844     0C 4E 05 F1 | 	add	fp, #12
1a848     A7 12 02 FB | 	rdlong	arg01, fp
1a84c     0C 4E 85 F1 | 	sub	fp, #12
1a850     A4 65 B0 FD | 	call	#__system___waitms
1a854     10 4E 05 F1 | 	add	fp, #16
1a858     A7 12 02 FB | 	rdlong	arg01, fp
1a85c     01 12 06 F1 | 	add	arg01, #1
1a860     A7 12 62 FC | 	wrlong	arg01, fp
1a864     10 4E 85 F1 | 	sub	fp, #16
1a868     C4 FF 9F FD | 	jmp	#LR__2182
1a86c                 | LR__2183
1a86c     0C 4E 05 F1 | 	add	fp, #12
1a870     A7 1E 02 FB | 	rdlong	local01, fp
1a874     0F 1F 52 F6 | 	abs	local01, local01 wc
1a878     09 00 00 FF 
1a87c     88 1F 16 FD | 	qdiv	local01, ##5000
1a880     0C 4E 85 F1 | 	sub	fp, #12
1a884     19 1E 62 FD | 	getqy	local01
1a888     0F 13 82 F6 | 	negc	arg01, local01
1a88c     68 65 B0 FD | 	call	#__system___waitms
1a890                 | LR__2184
1a890                 | LR__2185
1a890     A7 F0 03 F6 | 	mov	ptra, fp
1a894     B2 00 A0 FD | 	call	#popregs_
1a898                 | _do_waitms_ret
1a898     2D 00 64 FD | 	ret
1a89c                 | 
1a89c                 | ' 
1a89c                 | ' sub do_waitvbl
1a89c                 | _do_waitvbl
1a89c     01 12 06 F6 | 	mov	arg01, #1
1a8a0     14 49 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a8a4                 | _do_waitvbl_ret
1a8a4     2D 00 64 FD | 	ret
1a8a8                 | 
1a8a8                 | ' 
1a8a8                 | ' sub do_waitclock
1a8a8                 | _do_waitclock
1a8a8     51 00 00 FF 
1a8ac     A4 E5 05 F1 | 	add	objptr, ##41892
1a8b0     F2 00 02 FB | 	rdlong	_var01, objptr
1a8b4                 | ' c=hkcnt
1a8b4                 | ' do: loop until hkcnt<>c
1a8b4                 | LR__2190
1a8b4     F2 02 02 FB | 	rdlong	_var02, objptr
1a8b8     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a8bc     F4 FF 9F AD |  if_e	jmp	#LR__2190
1a8c0     51 00 00 FF 
1a8c4     A4 E5 85 F1 | 	sub	objptr, ##41892
1a8c8                 | _do_waitclock_ret
1a8c8     2D 00 64 FD | 	ret
1a8cc                 | 
1a8cc                 | ' 
1a8cc                 | ' 
1a8cc                 | ' 
1a8cc                 | ' sub do_dir
1a8cc                 | _do_dir
1a8cc     13 4A 05 F6 | 	mov	COUNT_, #19
1a8d0     A8 00 A0 FD | 	call	#pushregs_
1a8d4     01 00 00 FF 
1a8d8     38 F0 07 F1 | 	add	ptra, ##568
1a8dc     86 01 00 FF 
1a8e0     05 12 06 F6 | 	mov	arg01, ##@LR__5519
1a8e4     A8 68 B0 FD | 	call	#__system___chdir
1a8e8                 | ' 
1a8e8                 | ' chdir("/sd/bas")       ' set working directory
1a8e8                 | ' print "Working directory: "; currentdir$ 
1a8e8     00 12 06 F6 | 	mov	arg01, #0
1a8ec     78 BC B0 FD | 	call	#__system___getiolock_0540
1a8f0     FD 12 02 F6 | 	mov	arg01, result1
1a8f4     0C 62 B0 FD | 	call	#__system___lockmem
1a8f8     86 01 00 FF 
1a8fc     0D 14 06 F6 | 	mov	arg02, ##@LR__5520
1a900     00 12 06 F6 | 	mov	arg01, #0
1a904     00 16 06 F6 | 	mov	arg03, #0
1a908     EC 6E B0 FD | 	call	#__system___basic_print_string
1a90c     4A 00 00 FF 
1a910     90 E4 05 F1 | 	add	objptr, ##38032
1a914     F2 14 02 FB | 	rdlong	arg02, objptr
1a918     4A 00 00 FF 
1a91c     90 E4 85 F1 | 	sub	objptr, ##38032
1a920     00 12 06 F6 | 	mov	arg01, #0
1a924     00 16 06 F6 | 	mov	arg03, #0
1a928     CC 6E B0 FD | 	call	#__system___basic_print_string
1a92c     00 12 06 F6 | 	mov	arg01, #0
1a930     0A 14 06 F6 | 	mov	arg02, #10
1a934     00 16 06 F6 | 	mov	arg03, #0
1a938     64 6E B0 FD | 	call	#__system___basic_print_char
1a93c     01 1E 06 F6 | 	mov	local01, #1
1a940     00 12 06 F6 | 	mov	arg01, #0
1a944     20 BC B0 FD | 	call	#__system___getiolock_0540
1a948     FD 00 68 FC | 	wrlong	#0, result1
1a94c     00 20 06 F6 | 	mov	local02, #0
1a950     00 22 06 F6 | 	mov	local03, #0
1a954                 | ' px=0
1a954                 | ' for i=0 to 127: filelist(i)="" : next i
1a954     00 24 06 F6 | 	mov	local04, #0
1a958     1C 4E 05 F1 | 	add	fp, #28
1a95c     97 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a960                 | LR__2200
1a960     12 27 02 F6 | 	mov	local05, local04
1a964     02 26 66 F0 | 	shl	local05, #2
1a968     A7 26 02 F1 | 	add	local05, fp
1a96c     86 01 00 FF 
1a970     21 28 06 F6 | 	mov	local06, ##@LR__5521
1a974     13 29 62 FC | 	wrlong	local06, local05
1a978     01 24 06 F1 | 	add	local04, #1
1a97c     80 24 56 F2 | 	cmps	local04, #128 wc
1a980     DC FF 9F CD |  if_b	jmp	#LR__2200
1a984                 | LR__2201
1a984     1C 4E 85 F1 | 	sub	fp, #28
1a988     86 01 00 FF 
1a98c     22 12 06 F6 | 	mov	arg01, ##@LR__5522
1a990     10 14 06 F6 | 	mov	arg02, #16
1a994     08 BD B0 FD | 	call	#__system___basic_dir
1a998     FD 2A 02 F6 | 	mov	local07, result1
1a99c     00 2C 06 F6 | 	mov	local08, #0
1a9a0                 | ' filename=dir$("*", fbDirectory)
1a9a0                 | ' n=0
1a9a0                 | ' while filename <> "" andalso filename <> nil andalso n<128
1a9a0                 | LR__2202
1a9a0     86 01 00 FF 
1a9a4     24 2E 06 F6 | 	mov	local09, ##@LR__5523
1a9a8     15 13 02 F6 | 	mov	arg01, local07
1a9ac     17 15 02 F6 | 	mov	arg02, local09
1a9b0     78 61 B0 FD | 	call	#__system___string_cmp
1a9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9b8     68 00 90 AD |  if_e	jmp	#LR__2203
1a9bc     00 2E 06 F6 | 	mov	local09, #0
1a9c0     15 13 02 F6 | 	mov	arg01, local07
1a9c4     00 14 06 F6 | 	mov	arg02, #0
1a9c8     60 61 B0 FD | 	call	#__system___string_cmp
1a9cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9d0     50 00 90 AD |  if_e	jmp	#LR__2203
1a9d4     80 2C 56 F2 | 	cmps	local08, #128 wc
1a9d8     48 00 90 3D |  if_ae	jmp	#LR__2203
1a9dc     86 01 00 FF 
1a9e0     25 12 06 F6 | 	mov	arg01, ##@LR__5524
1a9e4     15 15 02 F6 | 	mov	arg02, local07
1a9e8     74 61 B0 FD | 	call	#__system___string_concat
1a9ec     FD 2A 02 F6 | 	mov	local07, result1
1a9f0     16 27 02 F6 | 	mov	local05, local08
1a9f4     02 26 66 F0 | 	shl	local05, #2
1a9f8     1C 4E 05 F1 | 	add	fp, #28
1a9fc     A7 26 02 F1 | 	add	local05, fp
1aa00     13 2B 62 FC | 	wrlong	local07, local05
1aa04     01 2C 06 F1 | 	add	local08, #1
1aa08     00 26 06 F6 | 	mov	local05, #0
1aa0c     00 12 06 F6 | 	mov	arg01, #0
1aa10     00 14 06 F6 | 	mov	arg02, #0
1aa14     1C 4E 85 F1 | 	sub	fp, #28
1aa18     84 BC B0 FD | 	call	#__system___basic_dir
1aa1c     FD 2A 02 F6 | 	mov	local07, result1
1aa20     7C FF 9F FD | 	jmp	#LR__2202
1aa24                 | LR__2203
1aa24                 | ' ' now sort this
1aa24                 | ' 
1aa24                 | ' for i =0 to n-1
1aa24     00 24 06 F6 | 	mov	local04, #0
1aa28     16 31 02 F6 | 	mov	local10, local08
1aa2c                 | LR__2204
1aa2c     18 25 52 F2 | 	cmps	local04, local10 wc
1aa30     DC 00 90 3D |  if_ae	jmp	#LR__2208
1aa34     00 32 06 F6 | 	mov	local11, #0
1aa38                 | '   swapped=false
1aa38                 | '   for j=0 to n-i-2
1aa38     00 34 06 F6 | 	mov	local12, #0
1aa3c     16 37 02 F6 | 	mov	local13, local08
1aa40     12 37 82 F1 | 	sub	local13, local04
1aa44     01 36 86 F1 | 	sub	local13, #1
1aa48                 | LR__2205
1aa48     1B 35 52 F2 | 	cmps	local12, local13 wc
1aa4c     B0 00 90 3D |  if_ae	jmp	#LR__2207
1aa50                 | '     if filelist(j) > filelist(j+1) then
1aa50     1A 2F 02 F6 | 	mov	local09, local12
1aa54     02 2E 66 F0 | 	shl	local09, #2
1aa58     1C 4E 05 F1 | 	add	fp, #28
1aa5c     A7 2E 02 F1 | 	add	local09, fp
1aa60     17 13 02 FB | 	rdlong	arg01, local09
1aa64     1A 2F 02 F6 | 	mov	local09, local12
1aa68     01 2E 06 F1 | 	add	local09, #1
1aa6c     17 29 02 F6 | 	mov	local06, local09
1aa70     02 28 66 F0 | 	shl	local06, #2
1aa74     A7 1E 02 F6 | 	mov	local01, fp
1aa78     A7 28 02 F1 | 	add	local06, fp
1aa7c     14 27 02 FB | 	rdlong	local05, local06
1aa80     13 15 02 F6 | 	mov	arg02, local05
1aa84     1C 4E 85 F1 | 	sub	fp, #28
1aa88     A0 60 B0 FD | 	call	#__system___string_cmp
1aa8c     01 FA 55 F2 | 	cmps	result1, #1 wc
1aa90     64 00 90 CD |  if_b	jmp	#LR__2206
1aa94     1A 2F 02 F6 | 	mov	local09, local12
1aa98     01 2E 06 F1 | 	add	local09, #1
1aa9c     02 2E 66 F0 | 	shl	local09, #2
1aaa0     1C 4E 05 F1 | 	add	fp, #28
1aaa4     A7 2E 02 F1 | 	add	local09, fp
1aaa8     17 33 02 FB | 	rdlong	local11, local09
1aaac     1A 29 02 F6 | 	mov	local06, local12
1aab0     02 28 66 F0 | 	shl	local06, #2
1aab4     A7 28 02 F1 | 	add	local06, fp
1aab8     14 27 02 FB | 	rdlong	local05, local06
1aabc     1A 2F 02 F6 | 	mov	local09, local12
1aac0     17 29 02 F6 | 	mov	local06, local09
1aac4     02 28 66 F0 | 	shl	local06, #2
1aac8     A7 1E 02 F6 | 	mov	local01, fp
1aacc     A7 28 02 F1 | 	add	local06, fp
1aad0     14 33 62 FC | 	wrlong	local11, local06
1aad4     1A 21 02 F6 | 	mov	local02, local12
1aad8     01 20 06 F1 | 	add	local02, #1
1aadc     10 39 02 F6 | 	mov	local14, local02
1aae0     02 38 66 F0 | 	shl	local14, #2
1aae4     A7 3A 02 F6 | 	mov	local15, fp
1aae8     A7 38 02 F1 | 	add	local14, fp
1aaec     1C 27 62 FC | 	wrlong	local05, local14
1aaf0     01 32 66 F6 | 	neg	local11, #1
1aaf4     1C 4E 85 F1 | 	sub	fp, #28
1aaf8                 | LR__2206
1aaf8     01 34 06 F1 | 	add	local12, #1
1aafc     48 FF 9F FD | 	jmp	#LR__2205
1ab00                 | LR__2207
1ab00                 | ' if not swapped then exit for
1ab00     19 3D 22 F6 | 	not	local16, local11
1ab04     00 3C 0E F2 | 	cmp	local16, #0 wz
1ab08     01 24 06 A1 |  if_e	add	local04, #1
1ab0c     1C FF 9F AD |  if_e	jmp	#LR__2204
1ab10                 | LR__2208
1ab10                 | ' for i=0 to n-1
1ab10     00 24 06 F6 | 	mov	local04, #0
1ab14     16 3F 02 F6 | 	mov	local17, local08
1ab18                 | LR__2209
1ab18     1F 25 52 F2 | 	cmps	local04, local17 wc
1ab1c     94 00 90 3D |  if_ae	jmp	#LR__2211
1ab20                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1ab20     00 12 06 F6 | 	mov	arg01, #0
1ab24     40 BA B0 FD | 	call	#__system___getiolock_0540
1ab28     FD 12 02 F6 | 	mov	arg01, result1
1ab2c     D4 5F B0 FD | 	call	#__system___lockmem
1ab30     12 21 02 F6 | 	mov	local02, local04
1ab34     02 20 66 F0 | 	shl	local02, #2
1ab38     1C 4E 05 F1 | 	add	fp, #28
1ab3c     A7 38 02 F6 | 	mov	local14, fp
1ab40     A7 20 02 F1 | 	add	local02, fp
1ab44     10 15 02 FB | 	rdlong	arg02, local02
1ab48     00 1E 06 F6 | 	mov	local01, #0
1ab4c     00 12 06 F6 | 	mov	arg01, #0
1ab50     00 16 06 F6 | 	mov	arg03, #0
1ab54     1C 4E 85 F1 | 	sub	fp, #28
1ab58     9C 6C B0 FD | 	call	#__system___basic_print_string
1ab5c     00 12 06 F6 | 	mov	arg01, #0
1ab60     04 BA B0 FD | 	call	#__system___getiolock_0540
1ab64     FD 00 68 FC | 	wrlong	#0, result1
1ab68     40 22 06 F1 | 	add	local03, #64
1ab6c     11 13 02 F6 | 	mov	arg01, local03
1ab70     E0 45 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ab74     00 23 56 F2 | 	cmps	local03, #256 wc
1ab78     30 00 90 CD |  if_b	jmp	#LR__2210
1ab7c     00 22 06 F6 | 	mov	local03, #0
1ab80     00 12 06 F6 | 	mov	arg01, #0
1ab84     E0 B9 B0 FD | 	call	#__system___getiolock_0540
1ab88     FD 12 02 F6 | 	mov	arg01, result1
1ab8c     74 5F B0 FD | 	call	#__system___lockmem
1ab90     00 12 06 F6 | 	mov	arg01, #0
1ab94     0A 14 06 F6 | 	mov	arg02, #10
1ab98     00 16 06 F6 | 	mov	arg03, #0
1ab9c     00 6C B0 FD | 	call	#__system___basic_print_char
1aba0     00 12 06 F6 | 	mov	arg01, #0
1aba4     C0 B9 B0 FD | 	call	#__system___getiolock_0540
1aba8     FD 00 68 FC | 	wrlong	#0, result1
1abac                 | LR__2210
1abac     01 24 06 F1 | 	add	local04, #1
1abb0     64 FF 9F FD | 	jmp	#LR__2209
1abb4                 | LR__2211
1abb4                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1abb4     80 2C 56 F2 | 	cmps	local08, #128 wc
1abb8     44 00 90 CD |  if_b	jmp	#LR__2212
1abbc     00 12 06 F6 | 	mov	arg01, #0
1abc0     A4 B9 B0 FD | 	call	#__system___getiolock_0540
1abc4     FD 12 02 F6 | 	mov	arg01, result1
1abc8     38 5F B0 FD | 	call	#__system___lockmem
1abcc     86 01 00 FF 
1abd0     2C 14 06 F6 | 	mov	arg02, ##@LR__5525
1abd4     00 12 06 F6 | 	mov	arg01, #0
1abd8     00 16 06 F6 | 	mov	arg03, #0
1abdc     18 6C B0 FD | 	call	#__system___basic_print_string
1abe0     00 12 06 F6 | 	mov	arg01, #0
1abe4     0A 14 06 F6 | 	mov	arg02, #10
1abe8     00 16 06 F6 | 	mov	arg03, #0
1abec     B0 6B B0 FD | 	call	#__system___basic_print_char
1abf0     00 12 06 F6 | 	mov	arg01, #0
1abf4     70 B9 B0 FD | 	call	#__system___getiolock_0540
1abf8     FD 00 68 FC | 	wrlong	#0, result1
1abfc     00 1E 06 F6 | 	mov	local01, #0
1ac00                 | LR__2212
1ac00                 | ' print
1ac00     00 12 06 F6 | 	mov	arg01, #0
1ac04     60 B9 B0 FD | 	call	#__system___getiolock_0540
1ac08     FD 12 02 F6 | 	mov	arg01, result1
1ac0c     F4 5E B0 FD | 	call	#__system___lockmem
1ac10     00 12 06 F6 | 	mov	arg01, #0
1ac14     0A 14 06 F6 | 	mov	arg02, #10
1ac18     00 16 06 F6 | 	mov	arg03, #0
1ac1c     80 6B B0 FD | 	call	#__system___basic_print_char
1ac20     00 12 06 F6 | 	mov	arg01, #0
1ac24     40 B9 B0 FD | 	call	#__system___getiolock_0540
1ac28     FD 00 68 FC | 	wrlong	#0, result1
1ac2c     00 28 06 F6 | 	mov	local06, #0
1ac30     00 2C 06 F6 | 	mov	local08, #0
1ac34     00 22 06 F6 | 	mov	local03, #0
1ac38                 | ' return cursor_y
1ac38     3E E4 05 F1 | 	add	objptr, #62
1ac3c     F2 40 C2 FA | 	rdbyte	local18, objptr
1ac40     3E E4 85 F1 | 	sub	objptr, #62
1ac44     86 01 00 FF 
1ac48     5E 12 06 F6 | 	mov	arg01, ##@LR__5526
1ac4c     21 14 06 F6 | 	mov	arg02, #33
1ac50     4C BA B0 FD | 	call	#__system___basic_dir
1ac54     FD 2A 02 F6 | 	mov	local07, result1
1ac58                 | ' n=0
1ac58                 | ' 
1ac58                 | ' px=0: py=v.getcursory()
1ac58                 | ' 
1ac58                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1ac58                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1ac58                 | LR__2213
1ac58     86 01 00 FF 
1ac5c     60 2E 06 F6 | 	mov	local09, ##@LR__5527
1ac60     15 13 02 F6 | 	mov	arg01, local07
1ac64     17 15 02 F6 | 	mov	arg02, local09
1ac68     C0 5E B0 FD | 	call	#__system___string_cmp
1ac6c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac70     54 00 90 AD |  if_e	jmp	#LR__2214
1ac74     00 2E 06 F6 | 	mov	local09, #0
1ac78     15 13 02 F6 | 	mov	arg01, local07
1ac7c     00 14 06 F6 | 	mov	arg02, #0
1ac80     A8 5E B0 FD | 	call	#__system___string_cmp
1ac84     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac88     3C 00 90 AD |  if_e	jmp	#LR__2214
1ac8c     80 2C 56 F2 | 	cmps	local08, #128 wc
1ac90     34 00 90 3D |  if_ae	jmp	#LR__2214
1ac94     16 27 02 F6 | 	mov	local05, local08
1ac98     02 26 66 F0 | 	shl	local05, #2
1ac9c     1C 4E 05 F1 | 	add	fp, #28
1aca0     A7 26 02 F1 | 	add	local05, fp
1aca4     13 2B 62 FC | 	wrlong	local07, local05
1aca8     01 2C 06 F1 | 	add	local08, #1
1acac     00 26 06 F6 | 	mov	local05, #0
1acb0     00 12 06 F6 | 	mov	arg01, #0
1acb4     00 14 06 F6 | 	mov	arg02, #0
1acb8     1C 4E 85 F1 | 	sub	fp, #28
1acbc     E0 B9 B0 FD | 	call	#__system___basic_dir
1acc0     FD 2A 02 F6 | 	mov	local07, result1
1acc4     90 FF 9F FD | 	jmp	#LR__2213
1acc8                 | LR__2214
1acc8                 | ' 
1acc8                 | ' for i =0 to n-1
1acc8     00 24 06 F6 | 	mov	local04, #0
1accc                 | LR__2215
1accc     16 25 52 F2 | 	cmps	local04, local08 wc
1acd0     D8 00 90 3D |  if_ae	jmp	#LR__2219
1acd4     00 32 06 F6 | 	mov	local11, #0
1acd8                 | '   swapped=false
1acd8                 | '   for j=0 to n-i-2
1acd8     00 34 06 F6 | 	mov	local12, #0
1acdc     16 43 02 F6 | 	mov	local19, local08
1ace0     12 43 82 F1 | 	sub	local19, local04
1ace4     01 42 86 F1 | 	sub	local19, #1
1ace8                 | LR__2216
1ace8     21 35 52 F2 | 	cmps	local12, local19 wc
1acec     AC 00 90 3D |  if_ae	jmp	#LR__2218
1acf0                 | '     if filelist(j) > filelist(j+1) then
1acf0     1A 2F 02 F6 | 	mov	local09, local12
1acf4     02 2E 66 F0 | 	shl	local09, #2
1acf8     1C 4E 05 F1 | 	add	fp, #28
1acfc     A7 2E 02 F1 | 	add	local09, fp
1ad00     17 13 02 FB | 	rdlong	arg01, local09
1ad04     1A 2F 02 F6 | 	mov	local09, local12
1ad08     01 2E 06 F1 | 	add	local09, #1
1ad0c     17 29 02 F6 | 	mov	local06, local09
1ad10     02 28 66 F0 | 	shl	local06, #2
1ad14     A7 1E 02 F6 | 	mov	local01, fp
1ad18     A7 28 02 F1 | 	add	local06, fp
1ad1c     14 27 02 FB | 	rdlong	local05, local06
1ad20     13 15 02 F6 | 	mov	arg02, local05
1ad24     1C 4E 85 F1 | 	sub	fp, #28
1ad28     00 5E B0 FD | 	call	#__system___string_cmp
1ad2c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ad30     60 00 90 CD |  if_b	jmp	#LR__2217
1ad34     1A 2F 02 F6 | 	mov	local09, local12
1ad38     01 2E 06 F1 | 	add	local09, #1
1ad3c     02 2E 66 F0 | 	shl	local09, #2
1ad40     1C 4E 05 F1 | 	add	fp, #28
1ad44     A7 2E 02 F1 | 	add	local09, fp
1ad48     17 3D 02 FB | 	rdlong	local16, local09
1ad4c     1A 29 02 F6 | 	mov	local06, local12
1ad50     02 28 66 F0 | 	shl	local06, #2
1ad54     A7 28 02 F1 | 	add	local06, fp
1ad58     14 27 02 FB | 	rdlong	local05, local06
1ad5c     1A 2F 02 F6 | 	mov	local09, local12
1ad60     17 29 02 F6 | 	mov	local06, local09
1ad64     02 28 66 F0 | 	shl	local06, #2
1ad68     A7 1E 02 F6 | 	mov	local01, fp
1ad6c     A7 28 02 F1 | 	add	local06, fp
1ad70     14 3D 62 FC | 	wrlong	local16, local06
1ad74     1A 39 02 F6 | 	mov	local14, local12
1ad78     01 38 06 F1 | 	add	local14, #1
1ad7c     02 38 66 F0 | 	shl	local14, #2
1ad80     A7 3A 02 F6 | 	mov	local15, fp
1ad84     A7 38 02 F1 | 	add	local14, fp
1ad88     1C 27 62 FC | 	wrlong	local05, local14
1ad8c     01 32 66 F6 | 	neg	local11, #1
1ad90     1C 4E 85 F1 | 	sub	fp, #28
1ad94                 | LR__2217
1ad94     01 34 06 F1 | 	add	local12, #1
1ad98     4C FF 9F FD | 	jmp	#LR__2216
1ad9c                 | LR__2218
1ad9c                 | ' if not swapped then exit for
1ad9c     19 3D 22 F6 | 	not	local16, local11
1ada0     00 3C 0E F2 | 	cmp	local16, #0 wz
1ada4     01 24 06 A1 |  if_e	add	local04, #1
1ada8     20 FF 9F AD |  if_e	jmp	#LR__2215
1adac                 | LR__2219
1adac                 | ' for i=0 to n-1
1adac     00 24 06 F6 | 	mov	local04, #0
1adb0                 | LR__2220
1adb0     16 25 52 F2 | 	cmps	local04, local08 wc
1adb4     8C 00 90 3D |  if_ae	jmp	#LR__2222
1adb8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1adb8     00 12 06 F6 | 	mov	arg01, #0
1adbc     A8 B7 B0 FD | 	call	#__system___getiolock_0540
1adc0     FD 12 02 F6 | 	mov	arg01, result1
1adc4     3C 5D B0 FD | 	call	#__system___lockmem
1adc8     12 21 02 F6 | 	mov	local02, local04
1adcc     02 20 66 F0 | 	shl	local02, #2
1add0     1C 4E 05 F1 | 	add	fp, #28
1add4     A7 20 02 F1 | 	add	local02, fp
1add8     10 15 02 FB | 	rdlong	arg02, local02
1addc     00 12 06 F6 | 	mov	arg01, #0
1ade0     00 16 06 F6 | 	mov	arg03, #0
1ade4     1C 4E 85 F1 | 	sub	fp, #28
1ade8     0C 6A B0 FD | 	call	#__system___basic_print_string
1adec     00 12 06 F6 | 	mov	arg01, #0
1adf0     74 B7 B0 FD | 	call	#__system___getiolock_0540
1adf4     FD 00 68 FC | 	wrlong	#0, result1
1adf8     40 22 06 F1 | 	add	local03, #64
1adfc     11 13 02 F6 | 	mov	arg01, local03
1ae00     50 43 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ae04     00 23 56 F2 | 	cmps	local03, #256 wc
1ae08     30 00 90 CD |  if_b	jmp	#LR__2221
1ae0c     00 22 06 F6 | 	mov	local03, #0
1ae10     00 12 06 F6 | 	mov	arg01, #0
1ae14     50 B7 B0 FD | 	call	#__system___getiolock_0540
1ae18     FD 12 02 F6 | 	mov	arg01, result1
1ae1c     E4 5C B0 FD | 	call	#__system___lockmem
1ae20     00 12 06 F6 | 	mov	arg01, #0
1ae24     0A 14 06 F6 | 	mov	arg02, #10
1ae28     00 16 06 F6 | 	mov	arg03, #0
1ae2c     70 69 B0 FD | 	call	#__system___basic_print_char
1ae30     00 12 06 F6 | 	mov	arg01, #0
1ae34     30 B7 B0 FD | 	call	#__system___getiolock_0540
1ae38     FD 00 68 FC | 	wrlong	#0, result1
1ae3c                 | LR__2221
1ae3c     01 24 06 F1 | 	add	local04, #1
1ae40     6C FF 9F FD | 	jmp	#LR__2220
1ae44                 | LR__2222
1ae44                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1ae44     80 2C 56 F2 | 	cmps	local08, #128 wc
1ae48     40 00 90 CD |  if_b	jmp	#LR__2223
1ae4c     00 12 06 F6 | 	mov	arg01, #0
1ae50     14 B7 B0 FD | 	call	#__system___getiolock_0540
1ae54     FD 12 02 F6 | 	mov	arg01, result1
1ae58     A8 5C B0 FD | 	call	#__system___lockmem
1ae5c     86 01 00 FF 
1ae60     61 14 06 F6 | 	mov	arg02, ##@LR__5528
1ae64     00 12 06 F6 | 	mov	arg01, #0
1ae68     00 16 06 F6 | 	mov	arg03, #0
1ae6c     88 69 B0 FD | 	call	#__system___basic_print_string
1ae70     00 12 06 F6 | 	mov	arg01, #0
1ae74     0A 14 06 F6 | 	mov	arg02, #10
1ae78     00 16 06 F6 | 	mov	arg03, #0
1ae7c     20 69 B0 FD | 	call	#__system___basic_print_char
1ae80     00 12 06 F6 | 	mov	arg01, #0
1ae84     E0 B6 B0 FD | 	call	#__system___getiolock_0540
1ae88     FD 00 68 FC | 	wrlong	#0, result1
1ae8c                 | LR__2223
1ae8c                 | ' print
1ae8c     00 12 06 F6 | 	mov	arg01, #0
1ae90     D4 B6 B0 FD | 	call	#__system___getiolock_0540
1ae94     FD 12 02 F6 | 	mov	arg01, result1
1ae98     68 5C B0 FD | 	call	#__system___lockmem
1ae9c     00 12 06 F6 | 	mov	arg01, #0
1aea0     0A 14 06 F6 | 	mov	arg02, #10
1aea4     00 16 06 F6 | 	mov	arg03, #0
1aea8     F4 68 B0 FD | 	call	#__system___basic_print_char
1aeac     00 12 06 F6 | 	mov	arg01, #0
1aeb0     B4 B6 B0 FD | 	call	#__system___getiolock_0540
1aeb4     FD 00 68 FC | 	wrlong	#0, result1
1aeb8     A7 F0 03 F6 | 	mov	ptra, fp
1aebc     B2 00 A0 FD | 	call	#popregs_
1aec0                 | _do_dir_ret
1aec0     2D 00 64 FD | 	ret
1aec4                 | 
1aec4                 | ' 
1aec4                 | ' sub do_if
1aec4                 | _do_if
1aec4     05 4A 05 F6 | 	mov	COUNT_, #5
1aec8     A8 00 A0 FD | 	call	#pushregs_
1aecc     54 03 BF FD | 	call	#_pop
1aed0     FD 1E 0A F6 | 	mov	local01, result1 wz
1aed4     FE 20 02 F6 | 	mov	local02, result2
1aed8     FF 22 02 F6 | 	mov	local03, result3
1aedc                 | ' t1=pop()
1aedc                 | ' ' if uresult=0, jump over else
1aedc                 | ' if t1.result.uresult = 0 then 
1aedc     BC 00 90 5D |  if_ne	jmp	#LR__2232
1aee0                 | '   for i=lineptr_e to lineptr-1
1aee0     4A 00 00 FF 
1aee4     80 E4 05 F1 | 	add	objptr, ##38016
1aee8     F2 24 02 FB | 	rdlong	local04, objptr
1aeec     04 E4 85 F1 | 	sub	objptr, #4
1aef0     F2 26 02 FB | 	rdlong	local05, objptr
1aef4     4A 00 00 FF 
1aef8     7C E4 85 F1 | 	sub	objptr, ##38012
1aefc                 | LR__2230
1aefc     13 25 52 F2 | 	cmps	local04, local05 wc
1af00     78 00 90 3D |  if_ae	jmp	#LR__2231
1af04     12 FF 01 F6 | 	mov	result3, local04
1af08     01 FE 65 F0 | 	shl	result3, #1
1af0c     12 FF 01 F1 | 	add	result3, local04
1af10     02 FE 65 F0 | 	shl	result3, #2
1af14     47 00 00 FF 
1af18     7C E4 05 F1 | 	add	objptr, ##36476
1af1c     F2 FE 01 F1 | 	add	result3, objptr
1af20     FF 1E 02 FB | 	rdlong	local01, result3
1af24     04 FE 05 F1 | 	add	result3, #4
1af28     FF FC 01 FB | 	rdlong	result2, result3
1af2c     12 FF 01 F6 | 	mov	result3, local04
1af30     01 FE 65 F0 | 	shl	result3, #1
1af34     12 FF 01 F1 | 	add	result3, local04
1af38     02 FE 65 F0 | 	shl	result3, #2
1af3c     F2 FE 01 F1 | 	add	result3, objptr
1af40     08 FE 05 F1 | 	add	result3, #8
1af44     FF FE 01 FB | 	rdlong	result3, result3
1af48     FE 20 02 F6 | 	mov	local02, result2
1af4c     FF 22 02 F6 | 	mov	local03, result3
1af50                 | '     t1=compiledline(i)
1af50                 | '     if t1.result_type=token_else then lineptr_e=i : return
1af50     5A 22 0E F2 | 	cmp	local03, #90 wz
1af54     47 00 00 FF 
1af58     7C E4 85 F1 | 	sub	objptr, ##36476
1af5c     4A 00 00 AF 
1af60     80 E4 05 A1 |  if_e	add	objptr, ##38016
1af64     F2 24 62 AC |  if_e	wrlong	local04, objptr
1af68     4A 00 00 AF 
1af6c     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1af70     28 00 90 AD |  if_e	jmp	#LR__2233
1af74     01 24 06 F1 | 	add	local04, #1
1af78     80 FF 9F FD | 	jmp	#LR__2230
1af7c                 | LR__2231
1af7c     4A 00 00 FF 
1af80     7C E4 05 F1 | 	add	objptr, ##38012
1af84     F2 26 02 FB | 	rdlong	local05, objptr
1af88     01 26 86 F1 | 	sub	local05, #1
1af8c     04 E4 05 F1 | 	add	objptr, #4
1af90     F2 26 62 FC | 	wrlong	local05, objptr
1af94     4A 00 00 FF 
1af98     80 E4 85 F1 | 	sub	objptr, ##38016
1af9c                 | LR__2232
1af9c                 | LR__2233
1af9c     A7 F0 03 F6 | 	mov	ptra, fp
1afa0     B2 00 A0 FD | 	call	#popregs_
1afa4                 | _do_if_ret
1afa4     2D 00 64 FD | 	ret
1afa8                 | 
1afa8                 | ' 
1afa8                 | ' sub do_else
1afa8                 | _do_else
1afa8     4A 00 00 FF 
1afac     7C E4 05 F1 | 	add	objptr, ##38012
1afb0     F2 00 02 FB | 	rdlong	_var01, objptr
1afb4     01 00 86 F1 | 	sub	_var01, #1
1afb8     04 E4 05 F1 | 	add	objptr, #4
1afbc     F2 00 62 FC | 	wrlong	_var01, objptr
1afc0     4A 00 00 FF 
1afc4     80 E4 85 F1 | 	sub	objptr, ##38016
1afc8                 | _do_else_ret
1afc8     2D 00 64 FD | 	ret
1afcc                 | 
1afcc                 | ' 
1afcc                 | ' sub do_rad
1afcc                 | _do_rad
1afcc     51 00 00 FF 
1afd0     B8 E5 05 F1 | 	add	objptr, ##41912
1afd4     00 C0 9F FF 
1afd8     F2 00 68 FC | 	wrlong	##1065353216, objptr
1afdc     04 E4 05 F1 | 	add	objptr, #4
1afe0     00 C0 9F FF 
1afe4     F2 00 68 FC | 	wrlong	##1065353216, objptr
1afe8     51 00 00 FF 
1afec     BC E5 85 F1 | 	sub	objptr, ##41916
1aff0                 | _do_rad_ret
1aff0     2D 00 64 FD | 	ret
1aff4                 | 
1aff4                 | ' 
1aff4                 | ' sub do_deg
1aff4                 | _do_deg
1aff4     51 00 00 FF 
1aff8     B8 E5 05 F1 | 	add	objptr, ##41912
1affc     7D 47 9E FF 
1b000     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1b004     04 E4 05 F1 | 	add	objptr, #4
1b008     97 32 A1 FF 
1b00c     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1b010     51 00 00 FF 
1b014     BC E5 85 F1 | 	sub	objptr, ##41916
1b018                 | _do_deg_ret
1b018     2D 00 64 FD | 	ret
1b01c                 | 
1b01c                 | ' 
1b01c                 | ' sub do_round
1b01c                 | _do_round
1b01c     00 4A 05 F6 | 	mov	COUNT_, #0
1b020     A8 00 A0 FD | 	call	#pushregs_
1b024     0C F0 07 F1 | 	add	ptra, #12
1b028     F8 01 BF FD | 	call	#_pop
1b02c     A7 FA 61 FC | 	wrlong	result1, fp
1b030     04 4E 05 F1 | 	add	fp, #4
1b034     A7 FC 61 FC | 	wrlong	result2, fp
1b038     04 4E 05 F1 | 	add	fp, #4
1b03c     A7 FE 61 FC | 	wrlong	result3, fp
1b040     08 4E 85 F1 | 	sub	fp, #8
1b044     A7 12 02 F6 | 	mov	arg01, fp
1b048     A4 AB BF FD | 	call	#_converttoint
1b04c     A7 FA 61 FC | 	wrlong	result1, fp
1b050     08 4E 05 F1 | 	add	fp, #8
1b054     A7 38 68 FC | 	wrlong	#28, fp
1b058     08 4E 85 F1 | 	sub	fp, #8
1b05c     A7 12 02 F6 | 	mov	arg01, fp
1b060     58 02 BF FD | 	call	#_push
1b064     A7 F0 03 F6 | 	mov	ptra, fp
1b068     B2 00 A0 FD | 	call	#popregs_
1b06c                 | _do_round_ret
1b06c     2D 00 64 FD | 	ret
1b070                 | 
1b070                 | ' 
1b070                 | ' sub do_int
1b070                 | _do_int
1b070     02 4A 05 F6 | 	mov	COUNT_, #2
1b074     A8 00 A0 FD | 	call	#pushregs_
1b078     10 F0 07 F1 | 	add	ptra, #16
1b07c     A4 01 BF FD | 	call	#_pop
1b080     FE 1E 02 F6 | 	mov	local01, result2
1b084     FF 20 02 F6 | 	mov	local02, result3
1b088     A7 FA 61 FC | 	wrlong	result1, fp
1b08c     04 4E 05 F1 | 	add	fp, #4
1b090     A7 1E 62 FC | 	wrlong	local01, fp
1b094     04 4E 05 F1 | 	add	fp, #4
1b098     A7 20 62 FC | 	wrlong	local02, fp
1b09c                 | ' 
1b09c                 | ' t1=pop()
1b09c                 | ' select case t1.result_type
1b09c     08 4E 85 F1 | 	sub	fp, #8
1b0a0     1E 20 0E F2 | 	cmp	local02, #30 wz
1b0a4     14 00 90 AD |  if_e	jmp	#LR__2240
1b0a8     1F 20 0E F2 | 	cmp	local02, #31 wz
1b0ac     20 00 90 AD |  if_e	jmp	#LR__2241
1b0b0     2B 20 0E F2 | 	cmp	local02, #43 wz
1b0b4     34 00 90 AD |  if_e	jmp	#LR__2242
1b0b8     50 00 90 FD | 	jmp	#LR__2243
1b0bc                 | LR__2240
1b0bc     A7 12 02 FB | 	rdlong	arg01, fp
1b0c0     00 14 06 F6 | 	mov	arg02, #0
1b0c4     B8 8A B0 FD | 	call	#__system___float_tointeger
1b0c8     A7 FA 61 FC | 	wrlong	result1, fp
1b0cc     3C 00 90 FD | 	jmp	#LR__2243
1b0d0                 | LR__2241
1b0d0     A7 12 02 FB | 	rdlong	arg01, fp
1b0d4     EC 8D B0 FD | 	call	#__system____builtin_atof
1b0d8     FD 12 02 F6 | 	mov	arg01, result1
1b0dc     00 14 06 F6 | 	mov	arg02, #0
1b0e0     9C 8A B0 FD | 	call	#__system___float_tointeger
1b0e4     A7 FA 61 FC | 	wrlong	result1, fp
1b0e8     20 00 90 FD | 	jmp	#LR__2243
1b0ec                 | LR__2242
1b0ec     A7 12 02 FB | 	rdlong	arg01, fp
1b0f0     D8 62 BF FD | 	call	#_convertstring
1b0f4     FD 12 02 F6 | 	mov	arg01, result1
1b0f8     C8 8D B0 FD | 	call	#__system____builtin_atof
1b0fc     FD 12 02 F6 | 	mov	arg01, result1
1b100     00 14 06 F6 | 	mov	arg02, #0
1b104     78 8A B0 FD | 	call	#__system___float_tointeger
1b108     A7 FA 61 FC | 	wrlong	result1, fp
1b10c                 | LR__2243
1b10c     08 4E 05 F1 | 	add	fp, #8
1b110     A7 38 68 FC | 	wrlong	#28, fp
1b114     08 4E 85 F1 | 	sub	fp, #8
1b118     A7 12 02 F6 | 	mov	arg01, fp
1b11c     9C 01 BF FD | 	call	#_push
1b120     A7 F0 03 F6 | 	mov	ptra, fp
1b124     B2 00 A0 FD | 	call	#popregs_
1b128                 | _do_int_ret
1b128     2D 00 64 FD | 	ret
1b12c                 | 
1b12c                 | ' 
1b12c                 | ' 
1b12c                 | ' sub do_nothing
1b12c                 | _do_nothing
1b12c                 | _do_nothing_ret
1b12c     2D 00 64 FD | 	ret
1b130                 | 
1b130                 | ' 
1b130                 | ' sub do_brun
1b130                 | _do_brun
1b130     08 4A 05 F6 | 	mov	COUNT_, #8
1b134     A8 00 A0 FD | 	call	#pushregs_
1b138     E8 00 BF FD | 	call	#_pop
1b13c     FE 1A 02 F6 | 	mov	arg05, result2
1b140     FF 18 02 F6 | 	mov	arg04, result3
1b144     FD 1E 02 F6 | 	mov	local01, result1
1b148     0D 21 02 F6 | 	mov	local02, arg05
1b14c     0C 23 02 F6 | 	mov	local03, arg04
1b150                 | ' 
1b150                 | ' t1=pop() 
1b150                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b150     2B 22 0E F2 | 	cmp	local03, #43 wz
1b154     10 00 90 5D |  if_ne	jmp	#LR__2250
1b158     0F 13 02 F6 | 	mov	arg01, local01
1b15c     6C 62 BF FD | 	call	#_convertstring
1b160     FD 1E 02 F6 | 	mov	local01, result1
1b164     1F 22 06 F6 | 	mov	local03, #31
1b168                 | LR__2250
1b168                 | ' if t1.result_type=result_string then
1b168     1F 22 0E F2 | 	cmp	local03, #31 wz
1b16c     EC 01 90 5D |  if_ne	jmp	#LR__2254
1b170     0F 25 02 F6 | 	mov	local04, local01
1b174                 | '   filename=t1.result.sresult
1b174                 | '   if left$(filename,1)="/" then 
1b174     12 13 02 F6 | 	mov	arg01, local04
1b178     01 14 06 F6 | 	mov	arg02, #1
1b17c     00 7A B0 FD | 	call	#__system__Left_S
1b180     FD 12 02 F6 | 	mov	arg01, result1
1b184     86 01 00 FF 
1b188     93 14 06 F6 | 	mov	arg02, ##@LR__5529
1b18c     9C 59 B0 FD | 	call	#__system___string_cmp
1b190     00 FA 0D F2 | 	cmp	result1, #0 wz
1b194     12 27 02 A6 |  if_e	mov	local05, local04
1b198     14 00 90 AD |  if_e	jmp	#LR__2251
1b19c     86 01 00 FF 
1b1a0     95 12 06 F6 | 	mov	arg01, ##@LR__5530
1b1a4     12 15 02 F6 | 	mov	arg02, local04
1b1a8     B4 59 B0 FD | 	call	#__system___string_concat
1b1ac     FD 26 02 F6 | 	mov	local05, result1
1b1b0                 | LR__2251
1b1b0                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1b1b0                 | '   open fullfilename for input as #9
1b1b0     09 12 06 F6 | 	mov	arg01, #9
1b1b4     13 15 02 F6 | 	mov	arg02, local05
1b1b8     00 16 06 F6 | 	mov	arg03, #0
1b1bc     48 65 B0 FD | 	call	#__system___basic_open_string
1b1c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b1c4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b1c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b1cc     FD 28 0A F6 | 	mov	local06, result1 wz
1b1d0                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1b1d0     8C 00 90 AD |  if_e	jmp	#LR__2252
1b1d4     00 12 06 F6 | 	mov	arg01, #0
1b1d8     8C B3 B0 FD | 	call	#__system___getiolock_0540
1b1dc     FD 12 02 F6 | 	mov	arg01, result1
1b1e0     20 59 B0 FD | 	call	#__system___lockmem
1b1e4     86 01 00 FF 
1b1e8     9E 14 06 F6 | 	mov	arg02, ##@LR__5531
1b1ec     00 12 06 F6 | 	mov	arg01, #0
1b1f0     00 16 06 F6 | 	mov	arg03, #0
1b1f4     00 66 B0 FD | 	call	#__system___basic_print_string
1b1f8     00 12 06 F6 | 	mov	arg01, #0
1b1fc     14 15 02 F6 | 	mov	arg02, local06
1b200     00 16 06 F6 | 	mov	arg03, #0
1b204     0A 18 06 F6 | 	mov	arg04, #10
1b208     30 66 B0 FD | 	call	#__system___basic_print_integer
1b20c     86 01 00 FF 
1b210     AC 14 06 F6 | 	mov	arg02, ##@LR__5532
1b214     00 12 06 F6 | 	mov	arg01, #0
1b218     00 16 06 F6 | 	mov	arg03, #0
1b21c     D8 65 B0 FD | 	call	#__system___basic_print_string
1b220     14 13 02 F6 | 	mov	arg01, local06
1b224     A4 7F B0 FD | 	call	#__system___strerror
1b228     FD 14 02 F6 | 	mov	arg02, result1
1b22c     00 12 06 F6 | 	mov	arg01, #0
1b230     00 16 06 F6 | 	mov	arg03, #0
1b234     C0 65 B0 FD | 	call	#__system___basic_print_string
1b238     00 12 06 F6 | 	mov	arg01, #0
1b23c     0A 14 06 F6 | 	mov	arg02, #10
1b240     00 16 06 F6 | 	mov	arg03, #0
1b244     58 65 B0 FD | 	call	#__system___basic_print_char
1b248     00 12 06 F6 | 	mov	arg01, #0
1b24c     18 B3 B0 FD | 	call	#__system___getiolock_0540
1b250     FD 00 68 FC | 	wrlong	#0, result1
1b254     09 12 06 F6 | 	mov	arg01, #9
1b258     3C A9 B0 FD | 	call	#__system__close
1b25c     FC 00 90 FD | 	jmp	#LR__2255
1b260                 | LR__2252
1b260     01 2A 06 F6 | 	mov	local07, #1
1b264     00 2C 06 F6 | 	mov	local08, #0
1b268                 | '   do
1b268                 | LR__2253
1b268                 | '     get #9,pos,block(0),1024,r : pos+=r	
1b268     4E 00 00 FF 
1b26c     B0 E4 05 F1 | 	add	objptr, ##40112
1b270     F2 16 02 F6 | 	mov	arg03, objptr
1b274     4E 00 00 FF 
1b278     B0 E4 85 F1 | 	sub	objptr, ##40112
1b27c     09 12 06 F6 | 	mov	arg01, #9
1b280     15 15 02 F6 | 	mov	arg02, local07
1b284     0A 18 C6 F9 | 	decod	arg04, #10
1b288     01 1A 06 F6 | 	mov	arg05, #1
1b28c     E4 66 B0 FD | 	call	#__system___basic_get
1b290     FD 28 02 F6 | 	mov	local06, result1
1b294     FD 2A 02 F1 | 	add	local07, result1
1b298     4E 00 00 FF 
1b29c     B0 E4 05 F1 | 	add	objptr, ##40112
1b2a0     F2 12 02 F6 | 	mov	arg01, objptr
1b2a4     16 15 02 F6 | 	mov	arg02, local08
1b2a8     0A 16 C6 F9 | 	decod	arg03, #10
1b2ac     42 00 00 FF 
1b2b0     E4 E5 85 F1 | 	sub	objptr, ##34276
1b2b4     A8 4C B0 FD | 	call	#_psram_spin2_write
1b2b8     0B 00 00 FF 
1b2bc     CC E4 85 F1 | 	sub	objptr, ##5836
1b2c0     14 2D 02 F1 | 	add	local08, local06
1b2c4     02 00 00 FF 
1b2c8     00 28 0E F2 | 	cmp	local06, ##1024 wz
1b2cc     E0 03 00 AF 
1b2d0     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1b2d4     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2253
1b2d8     36 00 00 FF 
1b2dc     FC E5 05 F1 | 	add	objptr, ##28156
1b2e0     F2 12 02 FB | 	rdlong	arg01, objptr
1b2e4     03 12 62 FD | 	cogstop	arg01
1b2e8     04 E4 05 F1 | 	add	objptr, #4
1b2ec     F2 12 02 FB | 	rdlong	arg01, objptr
1b2f0     03 12 62 FD | 	cogstop	arg01
1b2f4     04 E4 05 F1 | 	add	objptr, #4
1b2f8     F2 12 02 FB | 	rdlong	arg01, objptr
1b2fc     03 12 62 FD | 	cogstop	arg01
1b300     19 00 00 FF 
1b304     10 E5 05 F1 | 	add	objptr, ##13072
1b308     F2 12 02 FB | 	rdlong	arg01, objptr
1b30c     03 12 62 FD | 	cogstop	arg01
1b310     18 00 00 FF 
1b314     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1b318     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b31c     18 00 00 FF 
1b320     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1b324     19 00 00 FF 
1b328     08 E5 85 F1 | 	sub	objptr, ##13064
1b32c     1E 2C 06 F6 | 	mov	local08, #30
1b330     28 E4 61 FD | 	setq	objptr
1b334     0A 2D F2 FC | 	coginit	local08, arg02 wc
1b338     01 2C 66 C6 |  if_b	neg	local08, #1
1b33c     1B 00 00 FF 
1b340     10 E4 05 F1 | 	add	objptr, ##13840
1b344     F2 2C 62 FC | 	wrlong	local08, objptr
1b348     52 00 00 FF 
1b34c     1C E4 85 F1 | 	sub	objptr, ##42012
1b350     00 12 06 F6 | 	mov	arg01, #0
1b354     01 12 62 FD | 	cogid	arg01
1b358     03 12 62 FD | 	cogstop	arg01
1b35c                 | LR__2254
1b35c                 | LR__2255
1b35c     A7 F0 03 F6 | 	mov	ptra, fp
1b360     B2 00 A0 FD | 	call	#popregs_
1b364                 | _do_brun_ret
1b364     2D 00 64 FD | 	ret
1b368                 | 
1b368                 | ' 
1b368                 | ' 
1b368                 | ' sub do_mouse
1b368                 | _do_mouse
1b368     B8 FE BE FD | 	call	#_pop
1b36c     00 FA 4D F2 | 	cmps	result1, #0 wz
1b370                 | ' t1=pop()
1b370                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1b370     14 00 90 5D |  if_ne	jmp	#LR__2260
1b374     10 12 06 F6 | 	mov	arg01, #16
1b378     00 14 06 F6 | 	mov	arg02, #0
1b37c     00 16 06 F6 | 	mov	arg03, #0
1b380     84 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b384     10 00 90 FD | 	jmp	#LR__2261
1b388                 | LR__2260
1b388     10 12 06 F6 | 	mov	arg01, #16
1b38c     20 14 06 F6 | 	mov	arg02, #32
1b390     20 16 06 F6 | 	mov	arg03, #32
1b394     70 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b398                 | LR__2261
1b398                 | _do_mouse_ret
1b398     2D 00 64 FD | 	ret
1b39c                 | 
1b39c                 | ' 
1b39c                 | ' sub do_cursor
1b39c                 | _do_cursor
1b39c     84 FE BE FD | 	call	#_pop
1b3a0     00 FA 4D F2 | 	cmps	result1, #0 wz
1b3a4                 | ' t1=pop()
1b3a4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1b3a4     14 00 90 5D |  if_ne	jmp	#LR__2270
1b3a8     11 12 06 F6 | 	mov	arg01, #17
1b3ac     00 14 06 F6 | 	mov	arg02, #0
1b3b0     00 16 06 F6 | 	mov	arg03, #0
1b3b4     50 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b3b8     10 00 90 FD | 	jmp	#LR__2271
1b3bc                 | LR__2270
1b3bc     11 12 06 F6 | 	mov	arg01, #17
1b3c0     08 14 06 F6 | 	mov	arg02, #8
1b3c4     10 16 06 F6 | 	mov	arg03, #16
1b3c8     3C 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b3cc                 | LR__2271
1b3cc                 | _do_cursor_ret
1b3cc     2D 00 64 FD | 	ret
1b3d0                 | 
1b3d0                 | ' 
1b3d0                 | ' 
1b3d0                 | ' sub do_click
1b3d0                 | _do_click
1b3d0     50 FE BE FD | 	call	#_pop
1b3d4     00 FA 4D F2 | 	cmps	result1, #0 wz
1b3d8                 | ' t1=pop()
1b3d8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1b3d8     50 00 00 AF 
1b3dc     10 E5 05 A1 |  if_e	add	objptr, ##41232
1b3e0     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b3e4     50 00 00 FF 
1b3e8     10 E5 C5 F3 | 	sumz	objptr, ##41232
1b3ec     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1b3f0     50 00 00 5F 
1b3f4     10 E5 85 51 |  if_ne	sub	objptr, ##41232
1b3f8                 | _do_click_ret
1b3f8     2D 00 64 FD | 	ret
1b3fc                 | 
1b3fc                 | ' 
1b3fc                 | ' 
1b3fc                 | ' sub do_beep
1b3fc                 | _do_beep
1b3fc     02 4A 05 F6 | 	mov	COUNT_, #2
1b400     A8 00 A0 FD | 	call	#pushregs_
1b404     20 F0 07 F1 | 	add	ptra, #32
1b408     18 FE BE FD | 	call	#_pop
1b40c     FD 1E 02 F6 | 	mov	local01, result1
1b410     FE 1C 02 F6 | 	mov	arg06, result2
1b414     FF 20 02 F6 | 	mov	local02, result3
1b418     0C 4E 05 F1 | 	add	fp, #12
1b41c     A7 1E 62 FC | 	wrlong	local01, fp
1b420     04 4E 05 F1 | 	add	fp, #4
1b424     A7 1C 62 FC | 	wrlong	arg06, fp
1b428     04 4E 05 F1 | 	add	fp, #4
1b42c     A7 20 62 FC | 	wrlong	local02, fp
1b430     14 4E 85 F1 | 	sub	fp, #20
1b434     EC FD BE FD | 	call	#_pop
1b438     A7 FA 61 FC | 	wrlong	result1, fp
1b43c     04 4E 05 F1 | 	add	fp, #4
1b440     A7 FC 61 FC | 	wrlong	result2, fp
1b444     04 4E 05 F1 | 	add	fp, #4
1b448     A7 FE 61 FC | 	wrlong	result3, fp
1b44c                 | ' 
1b44c                 | ' t2=pop()
1b44c                 | ' t1=pop()
1b44c                 | ' 
1b44c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1b44c     08 4E 85 F1 | 	sub	fp, #8
1b450     1C FE 0D F2 | 	cmp	result3, #28 wz
1b454     08 4E 05 51 |  if_ne	add	fp, #8
1b458     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b45c     08 4E 85 51 |  if_ne	sub	fp, #8
1b460     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1b464     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b468     18 4E 05 A1 |  if_e	add	fp, #24
1b46c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b470     18 4E 85 A1 |  if_e	sub	fp, #24
1b474     14 00 90 AD |  if_e	jmp	#LR__2280
1b478     A7 12 02 F6 | 	mov	arg01, fp
1b47c     70 A7 BF FD | 	call	#_converttoint
1b480     18 4E 05 F1 | 	add	fp, #24
1b484     A7 FA 61 FC | 	wrlong	result1, fp
1b488     18 4E 85 F1 | 	sub	fp, #24
1b48c                 | LR__2280
1b48c     1C 4E 05 F1 | 	add	fp, #28
1b490     A7 FE 48 FC | 	wrbyte	#127, fp
1b494     01 4E 05 F1 | 	add	fp, #1
1b498     A7 00 49 FC | 	wrbyte	#128, fp
1b49c     01 4E 85 F1 | 	sub	fp, #1
1b4a0     A7 14 02 F6 | 	mov	arg02, fp
1b4a4     04 4E 85 F1 | 	sub	fp, #4
1b4a8     A7 16 02 FB | 	rdlong	arg03, fp
1b4ac     18 4E 85 F1 | 	sub	fp, #24
1b4b0     01 16 66 F0 | 	shl	arg03, #1
1b4b4     07 12 06 F6 | 	mov	arg01, #7
1b4b8     0E 18 C6 F9 | 	decod	arg04, #14
1b4bc     02 1A 06 F6 | 	mov	arg05, #2
1b4c0     00 1C 06 F6 | 	mov	arg06, #0
1b4c4     0B 00 00 FF 
1b4c8     CC E4 05 F1 | 	add	objptr, ##5836
1b4cc     90 52 B0 FD | 	call	#_audio096_spin2_play8
1b4d0     0B 00 00 FF 
1b4d4     CC E4 85 F1 | 	sub	objptr, ##5836
1b4d8     0C 4E 05 F1 | 	add	fp, #12
1b4dc     A7 12 02 F6 | 	mov	arg01, fp
1b4e0     0C 4E 85 F1 | 	sub	fp, #12
1b4e4     D4 FD BE FD | 	call	#_push
1b4e8     74 F2 BF FD | 	call	#_do_waitms
1b4ec     07 12 06 F6 | 	mov	arg01, #7
1b4f0     0B 00 00 FF 
1b4f4     CC E4 05 F1 | 	add	objptr, ##5836
1b4f8     08 53 B0 FD | 	call	#_audio096_spin2_stop
1b4fc     0B 00 00 FF 
1b500     CC E4 85 F1 | 	sub	objptr, ##5836
1b504     A7 F0 03 F6 | 	mov	ptra, fp
1b508     B2 00 A0 FD | 	call	#popregs_
1b50c                 | _do_beep_ret
1b50c     2D 00 64 FD | 	ret
1b510                 | 
1b510                 | ' 
1b510                 | ' sub do_no_command
1b510                 | _do_no_command
1b510     17 12 06 F6 | 	mov	arg01, #23
1b514     54 20 B0 FD | 	call	#_printerror
1b518                 | _do_no_command_ret
1b518     2D 00 64 FD | 	ret
1b51c                 | 
1b51c                 | ' 
1b51c                 | ' sub do_negative
1b51c                 | _do_negative
1b51c     02 4A 05 F6 | 	mov	COUNT_, #2
1b520     A8 00 A0 FD | 	call	#pushregs_
1b524     0C F0 07 F1 | 	add	ptra, #12
1b528     F8 FC BE FD | 	call	#_pop
1b52c     FF 1E 02 F6 | 	mov	local01, result3
1b530     A7 FA 61 FC | 	wrlong	result1, fp
1b534     04 4E 05 F1 | 	add	fp, #4
1b538     A7 FC 61 FC | 	wrlong	result2, fp
1b53c     04 4E 05 F1 | 	add	fp, #4
1b540     A7 1E 62 FC | 	wrlong	local01, fp
1b544                 | ' t1=pop()
1b544                 | ' if t1.result_type=result_int then 
1b544     08 4E 85 F1 | 	sub	fp, #8
1b548     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b54c     A7 20 02 AB |  if_e	rdlong	local02, fp
1b550     10 1F 62 A6 |  if_e	neg	local01, local02
1b554     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b558     5C 00 90 AD |  if_e	jmp	#LR__2292
1b55c     08 4E 05 F1 | 	add	fp, #8
1b560     A7 1E 02 FB | 	rdlong	local01, fp
1b564     08 4E 85 F1 | 	sub	fp, #8
1b568     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b56c     1C 00 90 5D |  if_ne	jmp	#LR__2290
1b570     A7 20 02 FB | 	rdlong	local02, fp
1b574     10 1F 62 F6 | 	neg	local01, local02
1b578     A7 1E 62 FC | 	wrlong	local01, fp
1b57c     08 4E 05 F1 | 	add	fp, #8
1b580     A7 38 68 FC | 	wrlong	#28, fp
1b584     08 4E 85 F1 | 	sub	fp, #8
1b588     2C 00 90 FD | 	jmp	#LR__2291
1b58c                 | LR__2290
1b58c     08 4E 05 F1 | 	add	fp, #8
1b590     A7 1E 02 FB | 	rdlong	local01, fp
1b594     08 4E 85 F1 | 	sub	fp, #8
1b598     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b59c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b5a0     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b5a4     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b5a8     08 4E 05 51 |  if_ne	add	fp, #8
1b5ac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b5b0     08 4E 85 51 |  if_ne	sub	fp, #8
1b5b4     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b5b8                 | LR__2291
1b5b8                 | LR__2292
1b5b8     A7 12 02 F6 | 	mov	arg01, fp
1b5bc     FC FC BE FD | 	call	#_push
1b5c0     A7 F0 03 F6 | 	mov	ptra, fp
1b5c4     B2 00 A0 FD | 	call	#popregs_
1b5c8                 | _do_negative_ret
1b5c8     2D 00 64 FD | 	ret
1b5cc                 | 
1b5cc                 | ' 
1b5cc                 | ' sub do_abs
1b5cc                 | _do_abs
1b5cc     01 4A 05 F6 | 	mov	COUNT_, #1
1b5d0     A8 00 A0 FD | 	call	#pushregs_
1b5d4     0C F0 07 F1 | 	add	ptra, #12
1b5d8     48 FC BE FD | 	call	#_pop
1b5dc     FF 1E 02 F6 | 	mov	local01, result3
1b5e0     A7 FA 61 FC | 	wrlong	result1, fp
1b5e4     04 4E 05 F1 | 	add	fp, #4
1b5e8     A7 FC 61 FC | 	wrlong	result2, fp
1b5ec     04 4E 05 F1 | 	add	fp, #4
1b5f0     A7 1E 62 FC | 	wrlong	local01, fp
1b5f4                 | ' t1=pop()
1b5f4                 | ' if t1.result_type=result_int then 
1b5f4     08 4E 85 F1 | 	sub	fp, #8
1b5f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b5fc     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b600     09 1F 42 A6 |  if_e	abs	local01, arg01
1b604     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b608     2C 00 90 AD |  if_e	jmp	#LR__2300
1b60c     08 4E 05 F1 | 	add	fp, #8
1b610     A7 1E 02 FB | 	rdlong	local01, fp
1b614     08 4E 85 F1 | 	sub	fp, #8
1b618     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b61c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b620     1F FA 05 A4 |  if_e	bitl	result1, #31
1b624     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b628     08 4E 05 51 |  if_ne	add	fp, #8
1b62c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b630     08 4E 85 51 |  if_ne	sub	fp, #8
1b634     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b638                 | LR__2300
1b638     A7 12 02 F6 | 	mov	arg01, fp
1b63c     7C FC BE FD | 	call	#_push
1b640     A7 F0 03 F6 | 	mov	ptra, fp
1b644     B2 00 A0 FD | 	call	#popregs_
1b648                 | _do_abs_ret
1b648     2D 00 64 FD | 	ret
1b64c                 | 
1b64c                 | ' 
1b64c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b64c                 | ' 
1b64c                 | ' ''----------------------------------------------------------------------------------------------------
1b64c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b64c                 | ' ''----------------------------------------------------------------------------------------------------
1b64c                 | ' 
1b64c                 | ' ''--------------------------- Command function pointers
1b64c                 | ' 
1b64c                 | ' sub init_commands
1b64c                 | _init_commands
1b64c                 | ' 
1b64c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b64c     00 00 06 F6 | 	mov	_var01, #0
1b650     97 16 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1b654                 | LR__2310
1b654     00 FB 01 F6 | 	mov	result1, _var01
1b658     02 FA 65 F0 | 	shl	result1, #2
1b65c     43 00 00 FF 
1b660     60 E4 05 F1 | 	add	objptr, ##34400
1b664     F2 FA 01 F1 | 	add	result1, objptr
1b668     43 00 00 FF 
1b66c     60 E4 85 F1 | 	sub	objptr, ##34400
1b670     FD E4 61 FC | 	wrlong	objptr, result1
1b674     01 00 06 F1 | 	add	_var01, #1
1b678     00 01 56 F2 | 	cmps	_var01, #256 wc
1b67c     D4 FF 9F CD |  if_b	jmp	#LR__2310
1b680                 | LR__2311
1b680     F2 FA 01 F6 | 	mov	result1, objptr
1b684     14 FA 25 F4 | 	bith	result1, #20
1b688     43 00 00 FF 
1b68c     64 E4 05 F1 | 	add	objptr, ##34404
1b690     F2 FA 61 FC | 	wrlong	result1, objptr
1b694     43 00 00 FF 
1b698     64 E4 85 F1 | 	sub	objptr, ##34404
1b69c     F2 FA 01 F6 | 	mov	result1, objptr
1b6a0     15 FA 25 F4 | 	bith	result1, #21
1b6a4     43 00 00 FF 
1b6a8     68 E4 05 F1 | 	add	objptr, ##34408
1b6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b6b0     43 00 00 FF 
1b6b4     68 E4 85 F1 | 	sub	objptr, ##34408
1b6b8     F2 FA 01 F6 | 	mov	result1, objptr
1b6bc     34 FA 25 F4 | 	bith	result1, #52
1b6c0     43 00 00 FF 
1b6c4     6C E4 05 F1 | 	add	objptr, ##34412
1b6c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6cc     43 00 00 FF 
1b6d0     6C E4 85 F1 | 	sub	objptr, ##34412
1b6d4     F2 FA 01 F6 | 	mov	result1, objptr
1b6d8     16 FA 25 F4 | 	bith	result1, #22
1b6dc     43 00 00 FF 
1b6e0     74 E4 05 F1 | 	add	objptr, ##34420
1b6e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b6e8     43 00 00 FF 
1b6ec     74 E4 85 F1 | 	sub	objptr, ##34420
1b6f0     F2 FA 01 F6 | 	mov	result1, objptr
1b6f4     00 28 00 FF 
1b6f8     00 FA 45 F5 | 	or	result1, ##5242880
1b6fc     43 00 00 FF 
1b700     78 E4 05 F1 | 	add	objptr, ##34424
1b704     F2 FA 61 FC | 	wrlong	result1, objptr
1b708     43 00 00 FF 
1b70c     78 E4 85 F1 | 	sub	objptr, ##34424
1b710     F2 FA 01 F6 | 	mov	result1, objptr
1b714     35 FA 25 F4 | 	bith	result1, #53
1b718     43 00 00 FF 
1b71c     7C E4 05 F1 | 	add	objptr, ##34428
1b720     F2 FA 61 FC | 	wrlong	result1, objptr
1b724     43 00 00 FF 
1b728     7C E4 85 F1 | 	sub	objptr, ##34428
1b72c     F2 FA 01 F6 | 	mov	result1, objptr
1b730     54 FA 25 F4 | 	bith	result1, #84
1b734     43 00 00 FF 
1b738     80 E4 05 F1 | 	add	objptr, ##34432
1b73c     F2 FA 61 FC | 	wrlong	result1, objptr
1b740     43 00 00 FF 
1b744     80 E4 85 F1 | 	sub	objptr, ##34432
1b748     F2 FA 01 F6 | 	mov	result1, objptr
1b74c     17 FA 25 F4 | 	bith	result1, #23
1b750     43 00 00 FF 
1b754     84 E4 05 F1 | 	add	objptr, ##34436
1b758     F2 FA 61 FC | 	wrlong	result1, objptr
1b75c     43 00 00 FF 
1b760     84 E4 85 F1 | 	sub	objptr, ##34436
1b764     F2 FA 01 F6 | 	mov	result1, objptr
1b768     00 48 00 FF 
1b76c     00 FA 45 F5 | 	or	result1, ##9437184
1b770     43 00 00 FF 
1b774     88 E4 05 F1 | 	add	objptr, ##34440
1b778     F2 FA 61 FC | 	wrlong	result1, objptr
1b77c     43 00 00 FF 
1b780     88 E4 85 F1 | 	sub	objptr, ##34440
1b784     F2 FA 01 F6 | 	mov	result1, objptr
1b788     00 50 00 FF 
1b78c     00 FA 45 F5 | 	or	result1, ##10485760
1b790     43 00 00 FF 
1b794     8C E4 05 F1 | 	add	objptr, ##34444
1b798     F2 FA 61 FC | 	wrlong	result1, objptr
1b79c     43 00 00 FF 
1b7a0     8C E4 85 F1 | 	sub	objptr, ##34444
1b7a4     F2 FA 01 F6 | 	mov	result1, objptr
1b7a8     00 58 00 FF 
1b7ac     00 FA 45 F5 | 	or	result1, ##11534336
1b7b0     43 00 00 FF 
1b7b4     90 E4 05 F1 | 	add	objptr, ##34448
1b7b8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7bc     43 00 00 FF 
1b7c0     90 E4 85 F1 | 	sub	objptr, ##34448
1b7c4     F2 FA 01 F6 | 	mov	result1, objptr
1b7c8     36 FA 25 F4 | 	bith	result1, #54
1b7cc     43 00 00 FF 
1b7d0     A4 E4 05 F1 | 	add	objptr, ##34468
1b7d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b7d8     43 00 00 FF 
1b7dc     A4 E4 85 F1 | 	sub	objptr, ##34468
1b7e0     F2 FA 01 F6 | 	mov	result1, objptr
1b7e4     00 68 00 FF 
1b7e8     00 FA 45 F5 | 	or	result1, ##13631488
1b7ec     43 00 00 FF 
1b7f0     D4 E4 05 F1 | 	add	objptr, ##34516
1b7f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b7f8     43 00 00 FF 
1b7fc     D4 E4 85 F1 | 	sub	objptr, ##34516
1b800     F2 FA 01 F6 | 	mov	result1, objptr
1b804     00 68 00 FF 
1b808     00 FA 45 F5 | 	or	result1, ##13631488
1b80c     43 00 00 FF 
1b810     D0 E4 05 F1 | 	add	objptr, ##34512
1b814     F2 FA 61 FC | 	wrlong	result1, objptr
1b818     43 00 00 FF 
1b81c     D0 E4 85 F1 | 	sub	objptr, ##34512
1b820     F2 FA 01 F6 | 	mov	result1, objptr
1b824     00 68 00 FF 
1b828     00 FA 45 F5 | 	or	result1, ##13631488
1b82c     43 00 00 FF 
1b830     D8 E4 05 F1 | 	add	objptr, ##34520
1b834     F2 FA 61 FC | 	wrlong	result1, objptr
1b838     43 00 00 FF 
1b83c     D8 E4 85 F1 | 	sub	objptr, ##34520
1b840     F2 FA 01 F6 | 	mov	result1, objptr
1b844     00 68 00 FF 
1b848     00 FA 45 F5 | 	or	result1, ##13631488
1b84c     43 00 00 FF 
1b850     DC E4 05 F1 | 	add	objptr, ##34524
1b854     F2 FA 61 FC | 	wrlong	result1, objptr
1b858     43 00 00 FF 
1b85c     DC E4 85 F1 | 	sub	objptr, ##34524
1b860     F2 FA 01 F6 | 	mov	result1, objptr
1b864     00 68 00 FF 
1b868     00 FA 45 F5 | 	or	result1, ##13631488
1b86c     43 00 00 FF 
1b870     0C E5 05 F1 | 	add	objptr, ##34572
1b874     F2 FA 61 FC | 	wrlong	result1, objptr
1b878     43 00 00 FF 
1b87c     0C E5 85 F1 | 	sub	objptr, ##34572
1b880     F2 FA 01 F6 | 	mov	result1, objptr
1b884     55 FA 25 F4 | 	bith	result1, #85
1b888     43 00 00 FF 
1b88c     BC E4 05 F1 | 	add	objptr, ##34492
1b890     F2 FA 61 FC | 	wrlong	result1, objptr
1b894     43 00 00 FF 
1b898     BC E4 85 F1 | 	sub	objptr, ##34492
1b89c     F2 FA 01 F6 | 	mov	result1, objptr
1b8a0     00 68 00 FF 
1b8a4     00 FA 45 F5 | 	or	result1, ##13631488
1b8a8     43 00 00 FF 
1b8ac     10 E5 05 F1 | 	add	objptr, ##34576
1b8b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8b4     43 00 00 FF 
1b8b8     10 E5 85 F1 | 	sub	objptr, ##34576
1b8bc     F2 FA 01 F6 | 	mov	result1, objptr
1b8c0     00 68 00 FF 
1b8c4     00 FA 45 F5 | 	or	result1, ##13631488
1b8c8     43 00 00 FF 
1b8cc     E0 E4 05 F1 | 	add	objptr, ##34528
1b8d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8d4     43 00 00 FF 
1b8d8     E0 E4 85 F1 | 	sub	objptr, ##34528
1b8dc     F2 FA 01 F6 | 	mov	result1, objptr
1b8e0     00 68 00 FF 
1b8e4     00 FA 45 F5 | 	or	result1, ##13631488
1b8e8     43 00 00 FF 
1b8ec     E4 E4 05 F1 | 	add	objptr, ##34532
1b8f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8f4     43 00 00 FF 
1b8f8     E4 E4 85 F1 | 	sub	objptr, ##34532
1b8fc     F2 FA 01 F6 | 	mov	result1, objptr
1b900     00 68 00 FF 
1b904     00 FA 45 F5 | 	or	result1, ##13631488
1b908     43 00 00 FF 
1b90c     E8 E4 05 F1 | 	add	objptr, ##34536
1b910     F2 FA 61 FC | 	wrlong	result1, objptr
1b914     43 00 00 FF 
1b918     E8 E4 85 F1 | 	sub	objptr, ##34536
1b91c     F2 FA 01 F6 | 	mov	result1, objptr
1b920     74 FA 25 F4 | 	bith	result1, #116
1b924     43 00 00 FF 
1b928     60 E5 05 F1 | 	add	objptr, ##34656
1b92c     F2 FA 61 FC | 	wrlong	result1, objptr
1b930     43 00 00 FF 
1b934     60 E5 85 F1 | 	sub	objptr, ##34656
1b938     F2 FA 01 F6 | 	mov	result1, objptr
1b93c     18 FA 25 F4 | 	bith	result1, #24
1b940     43 00 00 FF 
1b944     64 E5 05 F1 | 	add	objptr, ##34660
1b948     F2 FA 61 FC | 	wrlong	result1, objptr
1b94c     43 00 00 FF 
1b950     64 E5 85 F1 | 	sub	objptr, ##34660
1b954     F2 FA 01 F6 | 	mov	result1, objptr
1b958     00 88 00 FF 
1b95c     00 FA 45 F5 | 	or	result1, ##17825792
1b960     43 00 00 FF 
1b964     68 E5 05 F1 | 	add	objptr, ##34664
1b968     F2 FA 61 FC | 	wrlong	result1, objptr
1b96c     43 00 00 FF 
1b970     68 E5 85 F1 | 	sub	objptr, ##34664
1b974     F2 FA 01 F6 | 	mov	result1, objptr
1b978     00 90 00 FF 
1b97c     00 FA 45 F5 | 	or	result1, ##18874368
1b980     43 00 00 FF 
1b984     6C E5 05 F1 | 	add	objptr, ##34668
1b988     F2 FA 61 FC | 	wrlong	result1, objptr
1b98c     43 00 00 FF 
1b990     6C E5 85 F1 | 	sub	objptr, ##34668
1b994     F2 FA 01 F6 | 	mov	result1, objptr
1b998     00 98 00 FF 
1b99c     00 FA 45 F5 | 	or	result1, ##19922944
1b9a0     43 00 00 FF 
1b9a4     70 E5 05 F1 | 	add	objptr, ##34672
1b9a8     F2 FA 61 FC | 	wrlong	result1, objptr
1b9ac     43 00 00 FF 
1b9b0     70 E5 85 F1 | 	sub	objptr, ##34672
1b9b4     F2 FA 01 F6 | 	mov	result1, objptr
1b9b8     00 A0 00 FF 
1b9bc     00 FA 45 F5 | 	or	result1, ##20971520
1b9c0     43 00 00 FF 
1b9c4     74 E5 05 F1 | 	add	objptr, ##34676
1b9c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b9cc     43 00 00 FF 
1b9d0     74 E5 85 F1 | 	sub	objptr, ##34676
1b9d4     F2 FA 01 F6 | 	mov	result1, objptr
1b9d8     00 A8 00 FF 
1b9dc     00 FA 45 F5 | 	or	result1, ##22020096
1b9e0     43 00 00 FF 
1b9e4     78 E5 05 F1 | 	add	objptr, ##34680
1b9e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b9ec     43 00 00 FF 
1b9f0     78 E5 85 F1 | 	sub	objptr, ##34680
1b9f4     F2 FA 01 F6 | 	mov	result1, objptr
1b9f8     00 B0 00 FF 
1b9fc     00 FA 45 F5 | 	or	result1, ##23068672
1ba00     43 00 00 FF 
1ba04     7C E5 05 F1 | 	add	objptr, ##34684
1ba08     F2 FA 61 FC | 	wrlong	result1, objptr
1ba0c     43 00 00 FF 
1ba10     7C E5 85 F1 | 	sub	objptr, ##34684
1ba14     F2 FA 01 F6 | 	mov	result1, objptr
1ba18     00 B8 00 FF 
1ba1c     00 FA 45 F5 | 	or	result1, ##24117248
1ba20     43 00 00 FF 
1ba24     80 E5 05 F1 | 	add	objptr, ##34688
1ba28     F2 FA 61 FC | 	wrlong	result1, objptr
1ba2c     43 00 00 FF 
1ba30     80 E5 85 F1 | 	sub	objptr, ##34688
1ba34     F2 FA 01 F6 | 	mov	result1, objptr
1ba38     37 FA 25 F4 | 	bith	result1, #55
1ba3c     43 00 00 FF 
1ba40     84 E5 05 F1 | 	add	objptr, ##34692
1ba44     F2 FA 61 FC | 	wrlong	result1, objptr
1ba48     43 00 00 FF 
1ba4c     84 E5 85 F1 | 	sub	objptr, ##34692
1ba50     F2 FA 01 F6 | 	mov	result1, objptr
1ba54     00 C8 00 FF 
1ba58     00 FA 45 F5 | 	or	result1, ##26214400
1ba5c     43 00 00 FF 
1ba60     88 E5 05 F1 | 	add	objptr, ##34696
1ba64     F2 FA 61 FC | 	wrlong	result1, objptr
1ba68     43 00 00 FF 
1ba6c     88 E5 85 F1 | 	sub	objptr, ##34696
1ba70     F2 FA 01 F6 | 	mov	result1, objptr
1ba74     00 D0 00 FF 
1ba78     00 FA 45 F5 | 	or	result1, ##27262976
1ba7c     43 00 00 FF 
1ba80     8C E5 05 F1 | 	add	objptr, ##34700
1ba84     F2 FA 61 FC | 	wrlong	result1, objptr
1ba88     43 00 00 FF 
1ba8c     8C E5 85 F1 | 	sub	objptr, ##34700
1ba90     F2 FA 01 F6 | 	mov	result1, objptr
1ba94     00 D8 00 FF 
1ba98     00 FA 45 F5 | 	or	result1, ##28311552
1ba9c     43 00 00 FF 
1baa0     90 E5 05 F1 | 	add	objptr, ##34704
1baa4     F2 FA 61 FC | 	wrlong	result1, objptr
1baa8     43 00 00 FF 
1baac     90 E5 85 F1 | 	sub	objptr, ##34704
1bab0     F2 FA 01 F6 | 	mov	result1, objptr
1bab4     56 FA 25 F4 | 	bith	result1, #86
1bab8     43 00 00 FF 
1babc     94 E5 05 F1 | 	add	objptr, ##34708
1bac0     F2 FA 61 FC | 	wrlong	result1, objptr
1bac4     43 00 00 FF 
1bac8     94 E5 85 F1 | 	sub	objptr, ##34708
1bacc     F2 FA 01 F6 | 	mov	result1, objptr
1bad0     00 E8 00 FF 
1bad4     00 FA 45 F5 | 	or	result1, ##30408704
1bad8     45 00 00 FF 
1badc     5C E4 05 F1 | 	add	objptr, ##35420
1bae0     F2 FA 61 FC | 	wrlong	result1, objptr
1bae4     45 00 00 FF 
1bae8     5C E4 85 F1 | 	sub	objptr, ##35420
1baec     F2 FA 01 F6 | 	mov	result1, objptr
1baf0     75 FA 25 F4 | 	bith	result1, #117
1baf4     43 00 00 FF 
1baf8     98 E5 05 F1 | 	add	objptr, ##34712
1bafc     F2 FA 61 FC | 	wrlong	result1, objptr
1bb00     43 00 00 FF 
1bb04     98 E5 85 F1 | 	sub	objptr, ##34712
1bb08     F2 FA 01 F6 | 	mov	result1, objptr
1bb0c     94 FA 25 F4 | 	bith	result1, #148
1bb10     43 00 00 FF 
1bb14     AC E5 05 F1 | 	add	objptr, ##34732
1bb18     F2 FA 61 FC | 	wrlong	result1, objptr
1bb1c     43 00 00 FF 
1bb20     AC E5 85 F1 | 	sub	objptr, ##34732
1bb24     F2 FA 01 F6 | 	mov	result1, objptr
1bb28     19 FA 25 F4 | 	bith	result1, #25
1bb2c     43 00 00 FF 
1bb30     9C E5 05 F1 | 	add	objptr, ##34716
1bb34     F2 FA 61 FC | 	wrlong	result1, objptr
1bb38     43 00 00 FF 
1bb3c     9C E5 85 F1 | 	sub	objptr, ##34716
1bb40     F2 FA 01 F6 | 	mov	result1, objptr
1bb44     00 08 01 FF 
1bb48     00 FA 45 F5 | 	or	result1, ##34603008
1bb4c     43 00 00 FF 
1bb50     B8 E4 05 F1 | 	add	objptr, ##34488
1bb54     F2 FA 61 FC | 	wrlong	result1, objptr
1bb58     43 00 00 FF 
1bb5c     B8 E4 85 F1 | 	sub	objptr, ##34488
1bb60     F2 FA 01 F6 | 	mov	result1, objptr
1bb64     00 10 01 FF 
1bb68     00 FA 45 F5 | 	or	result1, ##35651584
1bb6c     43 00 00 FF 
1bb70     A0 E5 05 F1 | 	add	objptr, ##34720
1bb74     F2 FA 61 FC | 	wrlong	result1, objptr
1bb78     43 00 00 FF 
1bb7c     A0 E5 85 F1 | 	sub	objptr, ##34720
1bb80     F2 FA 01 F6 | 	mov	result1, objptr
1bb84     00 18 01 FF 
1bb88     00 FA 45 F5 | 	or	result1, ##36700160
1bb8c     43 00 00 FF 
1bb90     A4 E5 05 F1 | 	add	objptr, ##34724
1bb94     F2 FA 61 FC | 	wrlong	result1, objptr
1bb98     43 00 00 FF 
1bb9c     A4 E5 85 F1 | 	sub	objptr, ##34724
1bba0     F2 FA 01 F6 | 	mov	result1, objptr
1bba4     00 20 01 FF 
1bba8     00 FA 45 F5 | 	or	result1, ##37748736
1bbac     43 00 00 FF 
1bbb0     A8 E5 05 F1 | 	add	objptr, ##34728
1bbb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb8     43 00 00 FF 
1bbbc     A8 E5 85 F1 | 	sub	objptr, ##34728
1bbc0     F2 FA 01 F6 | 	mov	result1, objptr
1bbc4     00 28 01 FF 
1bbc8     00 FA 45 F5 | 	or	result1, ##38797312
1bbcc     43 00 00 FF 
1bbd0     B4 E5 05 F1 | 	add	objptr, ##34740
1bbd4     F2 FA 61 FC | 	wrlong	result1, objptr
1bbd8     43 00 00 FF 
1bbdc     B4 E5 85 F1 | 	sub	objptr, ##34740
1bbe0     F2 FA 01 F6 | 	mov	result1, objptr
1bbe4     00 30 01 FF 
1bbe8     00 FA 45 F5 | 	or	result1, ##39845888
1bbec     43 00 00 FF 
1bbf0     B8 E5 05 F1 | 	add	objptr, ##34744
1bbf4     F2 FA 61 FC | 	wrlong	result1, objptr
1bbf8     43 00 00 FF 
1bbfc     B8 E5 85 F1 | 	sub	objptr, ##34744
1bc00     F2 FA 01 F6 | 	mov	result1, objptr
1bc04     00 38 01 FF 
1bc08     00 FA 45 F5 | 	or	result1, ##40894464
1bc0c     43 00 00 FF 
1bc10     BC E5 05 F1 | 	add	objptr, ##34748
1bc14     F2 FA 61 FC | 	wrlong	result1, objptr
1bc18     43 00 00 FF 
1bc1c     BC E5 85 F1 | 	sub	objptr, ##34748
1bc20     F2 FA 01 F6 | 	mov	result1, objptr
1bc24     00 40 01 FF 
1bc28     00 FA 45 F5 | 	or	result1, ##41943040
1bc2c     43 00 00 FF 
1bc30     C0 E5 05 F1 | 	add	objptr, ##34752
1bc34     F2 FA 61 FC | 	wrlong	result1, objptr
1bc38     43 00 00 FF 
1bc3c     C0 E5 85 F1 | 	sub	objptr, ##34752
1bc40     F2 FA 01 F6 | 	mov	result1, objptr
1bc44     00 48 01 FF 
1bc48     00 FA 45 F5 | 	or	result1, ##42991616
1bc4c     43 00 00 FF 
1bc50     C8 E5 05 F1 | 	add	objptr, ##34760
1bc54     F2 FA 61 FC | 	wrlong	result1, objptr
1bc58     43 00 00 FF 
1bc5c     C8 E5 85 F1 | 	sub	objptr, ##34760
1bc60     F2 FA 01 F6 | 	mov	result1, objptr
1bc64     00 08 01 FF 
1bc68     00 FA 45 F5 | 	or	result1, ##34603008
1bc6c     43 00 00 FF 
1bc70     CC E5 05 F1 | 	add	objptr, ##34764
1bc74     F2 FA 61 FC | 	wrlong	result1, objptr
1bc78     43 00 00 FF 
1bc7c     CC E5 85 F1 | 	sub	objptr, ##34764
1bc80     F2 FA 01 F6 | 	mov	result1, objptr
1bc84     00 50 01 FF 
1bc88     00 FA 45 F5 | 	or	result1, ##44040192
1bc8c     43 00 00 FF 
1bc90     CC E4 05 F1 | 	add	objptr, ##34508
1bc94     F2 FA 61 FC | 	wrlong	result1, objptr
1bc98     43 00 00 FF 
1bc9c     CC E4 85 F1 | 	sub	objptr, ##34508
1bca0     F2 FA 01 F6 | 	mov	result1, objptr
1bca4     00 58 01 FF 
1bca8     00 FA 45 F5 | 	or	result1, ##45088768
1bcac     43 00 00 FF 
1bcb0     FC E4 05 F1 | 	add	objptr, ##34556
1bcb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bcb8     43 00 00 FF 
1bcbc     FC E4 85 F1 | 	sub	objptr, ##34556
1bcc0     F2 FA 01 F6 | 	mov	result1, objptr
1bcc4     00 60 01 FF 
1bcc8     00 FA 45 F5 | 	or	result1, ##46137344
1bccc     43 00 00 FF 
1bcd0     F8 E4 05 F1 | 	add	objptr, ##34552
1bcd4     F2 FA 61 FC | 	wrlong	result1, objptr
1bcd8     43 00 00 FF 
1bcdc     F8 E4 85 F1 | 	sub	objptr, ##34552
1bce0     F2 FA 01 F6 | 	mov	result1, objptr
1bce4     00 68 01 FF 
1bce8     00 FA 45 F5 | 	or	result1, ##47185920
1bcec     43 00 00 FF 
1bcf0     9C E4 05 F1 | 	add	objptr, ##34460
1bcf4     F2 FA 61 FC | 	wrlong	result1, objptr
1bcf8     43 00 00 FF 
1bcfc     9C E4 85 F1 | 	sub	objptr, ##34460
1bd00     F2 FA 01 F6 | 	mov	result1, objptr
1bd04     00 70 01 FF 
1bd08     00 FA 45 F5 | 	or	result1, ##48234496
1bd0c     43 00 00 FF 
1bd10     A0 E4 05 F1 | 	add	objptr, ##34464
1bd14     F2 FA 61 FC | 	wrlong	result1, objptr
1bd18     43 00 00 FF 
1bd1c     A0 E4 85 F1 | 	sub	objptr, ##34464
1bd20     F2 FA 01 F6 | 	mov	result1, objptr
1bd24     00 78 01 FF 
1bd28     00 FA 45 F5 | 	or	result1, ##49283072
1bd2c     43 00 00 FF 
1bd30     08 E5 05 F1 | 	add	objptr, ##34568
1bd34     F2 FA 61 FC | 	wrlong	result1, objptr
1bd38     43 00 00 FF 
1bd3c     08 E5 85 F1 | 	sub	objptr, ##34568
1bd40     F2 FA 01 F6 | 	mov	result1, objptr
1bd44     38 FA 25 F4 | 	bith	result1, #56
1bd48     43 00 00 FF 
1bd4c     B0 E5 05 F1 | 	add	objptr, ##34736
1bd50     F2 FA 61 FC | 	wrlong	result1, objptr
1bd54     43 00 00 FF 
1bd58     B0 E5 85 F1 | 	sub	objptr, ##34736
1bd5c     F2 FA 01 F6 | 	mov	result1, objptr
1bd60     00 88 01 FF 
1bd64     00 FA 45 F5 | 	or	result1, ##51380224
1bd68     43 00 00 FF 
1bd6c     C4 E5 05 F1 | 	add	objptr, ##34756
1bd70     F2 FA 61 FC | 	wrlong	result1, objptr
1bd74     43 00 00 FF 
1bd78     C4 E5 85 F1 | 	sub	objptr, ##34756
1bd7c     F2 FA 01 F6 | 	mov	result1, objptr
1bd80     00 90 01 FF 
1bd84     00 FA 45 F5 | 	or	result1, ##52428800
1bd88     43 00 00 FF 
1bd8c     D0 E5 05 F1 | 	add	objptr, ##34768
1bd90     F2 FA 61 FC | 	wrlong	result1, objptr
1bd94     43 00 00 FF 
1bd98     D0 E5 85 F1 | 	sub	objptr, ##34768
1bd9c     F2 FA 01 F6 | 	mov	result1, objptr
1bda0     00 98 01 FF 
1bda4     00 FA 45 F5 | 	or	result1, ##53477376
1bda8     43 00 00 FF 
1bdac     D4 E5 05 F1 | 	add	objptr, ##34772
1bdb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdb4     43 00 00 FF 
1bdb8     D4 E5 85 F1 | 	sub	objptr, ##34772
1bdbc     F2 FA 01 F6 | 	mov	result1, objptr
1bdc0     00 A0 01 FF 
1bdc4     00 FA 45 F5 | 	or	result1, ##54525952
1bdc8     43 00 00 FF 
1bdcc     D8 E5 05 F1 | 	add	objptr, ##34776
1bdd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdd4     43 00 00 FF 
1bdd8     D8 E5 85 F1 | 	sub	objptr, ##34776
1bddc     F2 FA 01 F6 | 	mov	result1, objptr
1bde0     00 A8 01 FF 
1bde4     00 FA 45 F5 | 	or	result1, ##55574528
1bde8     43 00 00 FF 
1bdec     DC E5 05 F1 | 	add	objptr, ##34780
1bdf0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdf4     43 00 00 FF 
1bdf8     DC E5 85 F1 | 	sub	objptr, ##34780
1bdfc     F2 FA 01 F6 | 	mov	result1, objptr
1be00     00 B0 01 FF 
1be04     00 FA 45 F5 | 	or	result1, ##56623104
1be08     43 00 00 FF 
1be0c     E0 E5 05 F1 | 	add	objptr, ##34784
1be10     F2 FA 61 FC | 	wrlong	result1, objptr
1be14     43 00 00 FF 
1be18     E0 E5 85 F1 | 	sub	objptr, ##34784
1be1c     F2 FA 01 F6 | 	mov	result1, objptr
1be20     00 B8 01 FF 
1be24     00 FA 45 F5 | 	or	result1, ##57671680
1be28     43 00 00 FF 
1be2c     E4 E5 05 F1 | 	add	objptr, ##34788
1be30     F2 FA 61 FC | 	wrlong	result1, objptr
1be34     43 00 00 FF 
1be38     E4 E5 85 F1 | 	sub	objptr, ##34788
1be3c     F2 FA 01 F6 | 	mov	result1, objptr
1be40     94 FA 25 F4 | 	bith	result1, #148
1be44     43 00 00 FF 
1be48     AC E5 05 F1 | 	add	objptr, ##34732
1be4c     F2 FA 61 FC | 	wrlong	result1, objptr
1be50     43 00 00 FF 
1be54     AC E5 85 F1 | 	sub	objptr, ##34732
1be58     F2 FA 01 F6 | 	mov	result1, objptr
1be5c     57 FA 25 F4 | 	bith	result1, #87
1be60     43 00 00 FF 
1be64     EC E5 05 F1 | 	add	objptr, ##34796
1be68     F2 FA 61 FC | 	wrlong	result1, objptr
1be6c     43 00 00 FF 
1be70     EC E5 85 F1 | 	sub	objptr, ##34796
1be74     F2 FA 01 F6 | 	mov	result1, objptr
1be78     00 C8 01 FF 
1be7c     00 FA 45 F5 | 	or	result1, ##59768832
1be80     43 00 00 FF 
1be84     E8 E5 05 F1 | 	add	objptr, ##34792
1be88     F2 FA 61 FC | 	wrlong	result1, objptr
1be8c     43 00 00 FF 
1be90     E8 E5 85 F1 | 	sub	objptr, ##34792
1be94     F2 FA 01 F6 | 	mov	result1, objptr
1be98     00 D0 01 FF 
1be9c     00 FA 45 F5 | 	or	result1, ##60817408
1bea0     44 00 00 FF 
1bea4     00 E4 05 F1 | 	add	objptr, ##34816
1bea8     F2 FA 61 FC | 	wrlong	result1, objptr
1beac     44 00 00 FF 
1beb0     00 E4 85 F1 | 	sub	objptr, ##34816
1beb4     F2 FA 01 F6 | 	mov	result1, objptr
1beb8     00 D8 01 FF 
1bebc     00 FA 45 F5 | 	or	result1, ##61865984
1bec0     44 00 00 FF 
1bec4     04 E4 05 F1 | 	add	objptr, ##34820
1bec8     F2 FA 61 FC | 	wrlong	result1, objptr
1becc     44 00 00 FF 
1bed0     04 E4 85 F1 | 	sub	objptr, ##34820
1bed4     F2 FA 01 F6 | 	mov	result1, objptr
1bed8     76 FA 25 F4 | 	bith	result1, #118
1bedc     43 00 00 FF 
1bee0     F0 E5 05 F1 | 	add	objptr, ##34800
1bee4     F2 FA 61 FC | 	wrlong	result1, objptr
1bee8     43 00 00 FF 
1beec     F0 E5 85 F1 | 	sub	objptr, ##34800
1bef0     F2 FA 01 F6 | 	mov	result1, objptr
1bef4     00 E8 01 FF 
1bef8     00 FA 45 F5 | 	or	result1, ##63963136
1befc     43 00 00 FF 
1bf00     F4 E5 05 F1 | 	add	objptr, ##34804
1bf04     F2 FA 61 FC | 	wrlong	result1, objptr
1bf08     43 00 00 FF 
1bf0c     F4 E5 85 F1 | 	sub	objptr, ##34804
1bf10     F2 FA 01 F6 | 	mov	result1, objptr
1bf14     95 FA 25 F4 | 	bith	result1, #149
1bf18     43 00 00 FF 
1bf1c     F8 E5 05 F1 | 	add	objptr, ##34808
1bf20     F2 FA 61 FC | 	wrlong	result1, objptr
1bf24     43 00 00 FF 
1bf28     F8 E5 85 F1 | 	sub	objptr, ##34808
1bf2c     F2 FA 01 F6 | 	mov	result1, objptr
1bf30     B4 FA 25 F4 | 	bith	result1, #180
1bf34     43 00 00 FF 
1bf38     FC E5 05 F1 | 	add	objptr, ##34812
1bf3c     F2 FA 61 FC | 	wrlong	result1, objptr
1bf40     43 00 00 FF 
1bf44     FC E5 85 F1 | 	sub	objptr, ##34812
1bf48     F2 FA 01 F6 | 	mov	result1, objptr
1bf4c     1A FA 25 F4 | 	bith	result1, #26
1bf50     44 00 00 FF 
1bf54     0C E4 05 F1 | 	add	objptr, ##34828
1bf58     F2 FA 61 FC | 	wrlong	result1, objptr
1bf5c     44 00 00 FF 
1bf60     0C E4 85 F1 | 	sub	objptr, ##34828
1bf64     F2 FA 01 F6 | 	mov	result1, objptr
1bf68     00 08 02 FF 
1bf6c     00 FA 45 F5 | 	or	result1, ##68157440
1bf70     44 00 00 FF 
1bf74     08 E4 05 F1 | 	add	objptr, ##34824
1bf78     F2 FA 61 FC | 	wrlong	result1, objptr
1bf7c     44 00 00 FF 
1bf80     08 E4 85 F1 | 	sub	objptr, ##34824
1bf84     F2 FA 01 F6 | 	mov	result1, objptr
1bf88     00 10 02 FF 
1bf8c     00 FA 45 F5 | 	or	result1, ##69206016
1bf90     44 00 00 FF 
1bf94     18 E4 05 F1 | 	add	objptr, ##34840
1bf98     F2 FA 61 FC | 	wrlong	result1, objptr
1bf9c     44 00 00 FF 
1bfa0     18 E4 85 F1 | 	sub	objptr, ##34840
1bfa4     F2 FA 01 F6 | 	mov	result1, objptr
1bfa8     00 18 02 FF 
1bfac     00 FA 45 F5 | 	or	result1, ##70254592
1bfb0     44 00 00 FF 
1bfb4     14 E4 05 F1 | 	add	objptr, ##34836
1bfb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfbc     44 00 00 FF 
1bfc0     14 E4 85 F1 | 	sub	objptr, ##34836
1bfc4     F2 FA 01 F6 | 	mov	result1, objptr
1bfc8     00 20 02 FF 
1bfcc     00 FA 45 F5 | 	or	result1, ##71303168
1bfd0     44 00 00 FF 
1bfd4     10 E4 05 F1 | 	add	objptr, ##34832
1bfd8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfdc     44 00 00 FF 
1bfe0     10 E4 85 F1 | 	sub	objptr, ##34832
1bfe4     F2 FA 01 F6 | 	mov	result1, objptr
1bfe8     00 28 02 FF 
1bfec     00 FA 45 F5 | 	or	result1, ##72351744
1bff0     44 00 00 FF 
1bff4     1C E4 05 F1 | 	add	objptr, ##34844
1bff8     F2 FA 61 FC | 	wrlong	result1, objptr
1bffc     44 00 00 FF 
1c000     1C E4 85 F1 | 	sub	objptr, ##34844
1c004     F2 FA 01 F6 | 	mov	result1, objptr
1c008     00 30 02 FF 
1c00c     00 FA 45 F5 | 	or	result1, ##73400320
1c010     44 00 00 FF 
1c014     20 E4 05 F1 | 	add	objptr, ##34848
1c018     F2 FA 61 FC | 	wrlong	result1, objptr
1c01c     44 00 00 FF 
1c020     20 E4 85 F1 | 	sub	objptr, ##34848
1c024     F2 FA 01 F6 | 	mov	result1, objptr
1c028     00 38 02 FF 
1c02c     00 FA 45 F5 | 	or	result1, ##74448896
1c030     43 00 00 FF 
1c034     B4 E4 05 F1 | 	add	objptr, ##34484
1c038     F2 FA 61 FC | 	wrlong	result1, objptr
1c03c     43 00 00 FF 
1c040     B4 E4 85 F1 | 	sub	objptr, ##34484
1c044     F2 FA 01 F6 | 	mov	result1, objptr
1c048     00 40 02 FF 
1c04c     00 FA 45 F5 | 	or	result1, ##75497472
1c050     44 00 00 FF 
1c054     38 E4 05 F1 | 	add	objptr, ##34872
1c058     F2 FA 61 FC | 	wrlong	result1, objptr
1c05c     44 00 00 FF 
1c060     38 E4 85 F1 | 	sub	objptr, ##34872
1c064     F2 FA 01 F6 | 	mov	result1, objptr
1c068     00 48 02 FF 
1c06c     00 FA 45 F5 | 	or	result1, ##76546048
1c070     44 00 00 FF 
1c074     48 E4 05 F1 | 	add	objptr, ##34888
1c078     F2 FA 61 FC | 	wrlong	result1, objptr
1c07c     44 00 00 FF 
1c080     48 E4 85 F1 | 	sub	objptr, ##34888
1c084     F2 FA 01 F6 | 	mov	result1, objptr
1c088     00 50 02 FF 
1c08c     00 FA 45 F5 | 	or	result1, ##77594624
1c090     44 00 00 FF 
1c094     4C E4 05 F1 | 	add	objptr, ##34892
1c098     F2 FA 61 FC | 	wrlong	result1, objptr
1c09c     44 00 00 FF 
1c0a0     4C E4 85 F1 | 	sub	objptr, ##34892
1c0a4     F2 FA 01 F6 | 	mov	result1, objptr
1c0a8     00 58 02 FF 
1c0ac     00 FA 45 F5 | 	or	result1, ##78643200
1c0b0     44 00 00 FF 
1c0b4     44 E4 05 F1 | 	add	objptr, ##34884
1c0b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0bc     44 00 00 FF 
1c0c0     44 E4 85 F1 | 	sub	objptr, ##34884
1c0c4     F2 FA 01 F6 | 	mov	result1, objptr
1c0c8     00 60 02 FF 
1c0cc     00 FA 45 F5 | 	or	result1, ##79691776
1c0d0     44 00 00 FF 
1c0d4     3C E4 05 F1 | 	add	objptr, ##34876
1c0d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0dc     44 00 00 FF 
1c0e0     3C E4 85 F1 | 	sub	objptr, ##34876
1c0e4     F2 FA 01 F6 | 	mov	result1, objptr
1c0e8     00 68 02 FF 
1c0ec     00 FA 45 F5 | 	or	result1, ##80740352
1c0f0     44 00 00 FF 
1c0f4     40 E4 05 F1 | 	add	objptr, ##34880
1c0f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0fc     44 00 00 FF 
1c100     40 E4 85 F1 | 	sub	objptr, ##34880
1c104     F2 FA 01 F6 | 	mov	result1, objptr
1c108     00 70 02 FF 
1c10c     00 FA 45 F5 | 	or	result1, ##81788928
1c110     44 00 00 FF 
1c114     50 E4 05 F1 | 	add	objptr, ##34896
1c118     F2 FA 61 FC | 	wrlong	result1, objptr
1c11c     44 00 00 FF 
1c120     50 E4 85 F1 | 	sub	objptr, ##34896
1c124     F2 FA 01 F6 | 	mov	result1, objptr
1c128     00 78 02 FF 
1c12c     00 FA 45 F5 | 	or	result1, ##82837504
1c130     44 00 00 FF 
1c134     54 E4 05 F1 | 	add	objptr, ##34900
1c138     F2 FA 61 FC | 	wrlong	result1, objptr
1c13c     44 00 00 FF 
1c140     54 E4 85 F1 | 	sub	objptr, ##34900
1c144     F2 FA 01 F6 | 	mov	result1, objptr
1c148     00 80 02 FF 
1c14c     00 FA 45 F5 | 	or	result1, ##83886080
1c150     44 00 00 FF 
1c154     58 E4 05 F1 | 	add	objptr, ##34904
1c158     F2 FA 61 FC | 	wrlong	result1, objptr
1c15c     44 00 00 FF 
1c160     58 E4 85 F1 | 	sub	objptr, ##34904
1c164     F2 FA 01 F6 | 	mov	result1, objptr
1c168     00 88 02 FF 
1c16c     00 FA 45 F5 | 	or	result1, ##84934656
1c170     44 00 00 FF 
1c174     5C E4 05 F1 | 	add	objptr, ##34908
1c178     F2 FA 61 FC | 	wrlong	result1, objptr
1c17c     44 00 00 FF 
1c180     5C E4 85 F1 | 	sub	objptr, ##34908
1c184     F2 FA 01 F6 | 	mov	result1, objptr
1c188     00 90 02 FF 
1c18c     00 FA 45 F5 | 	or	result1, ##85983232
1c190     44 00 00 FF 
1c194     60 E4 05 F1 | 	add	objptr, ##34912
1c198     F2 FA 61 FC | 	wrlong	result1, objptr
1c19c     44 00 00 FF 
1c1a0     60 E4 85 F1 | 	sub	objptr, ##34912
1c1a4     F2 FA 01 F6 | 	mov	result1, objptr
1c1a8     00 98 02 FF 
1c1ac     00 FA 45 F5 | 	or	result1, ##87031808
1c1b0     44 00 00 FF 
1c1b4     64 E4 05 F1 | 	add	objptr, ##34916
1c1b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1bc     44 00 00 FF 
1c1c0     64 E4 85 F1 | 	sub	objptr, ##34916
1c1c4     F2 FA 01 F6 | 	mov	result1, objptr
1c1c8     00 A0 02 FF 
1c1cc     00 FA 45 F5 | 	or	result1, ##88080384
1c1d0     44 00 00 FF 
1c1d4     68 E4 05 F1 | 	add	objptr, ##34920
1c1d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1dc     44 00 00 FF 
1c1e0     68 E4 85 F1 | 	sub	objptr, ##34920
1c1e4     F2 FA 01 F6 | 	mov	result1, objptr
1c1e8     00 A8 02 FF 
1c1ec     00 FA 45 F5 | 	or	result1, ##89128960
1c1f0     44 00 00 FF 
1c1f4     6C E4 05 F1 | 	add	objptr, ##34924
1c1f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1fc     44 00 00 FF 
1c200     6C E4 85 F1 | 	sub	objptr, ##34924
1c204     F2 FA 01 F6 | 	mov	result1, objptr
1c208     00 B0 02 FF 
1c20c     00 FA 45 F5 | 	or	result1, ##90177536
1c210     44 00 00 FF 
1c214     78 E4 05 F1 | 	add	objptr, ##34936
1c218     F2 FA 61 FC | 	wrlong	result1, objptr
1c21c     44 00 00 FF 
1c220     78 E4 85 F1 | 	sub	objptr, ##34936
1c224     F2 FA 01 F6 | 	mov	result1, objptr
1c228     00 B8 02 FF 
1c22c     00 FA 45 F5 | 	or	result1, ##91226112
1c230     44 00 00 FF 
1c234     70 E4 05 F1 | 	add	objptr, ##34928
1c238     F2 FA 61 FC | 	wrlong	result1, objptr
1c23c     44 00 00 FF 
1c240     70 E4 85 F1 | 	sub	objptr, ##34928
1c244     F2 FA 01 F6 | 	mov	result1, objptr
1c248     00 C0 02 FF 
1c24c     00 FA 45 F5 | 	or	result1, ##92274688
1c250     44 00 00 FF 
1c254     74 E4 05 F1 | 	add	objptr, ##34932
1c258     F2 FA 61 FC | 	wrlong	result1, objptr
1c25c     44 00 00 FF 
1c260     74 E4 85 F1 | 	sub	objptr, ##34932
1c264     F2 FA 01 F6 | 	mov	result1, objptr
1c268     00 C8 02 FF 
1c26c     00 FA 45 F5 | 	or	result1, ##93323264
1c270     44 00 00 FF 
1c274     7C E4 05 F1 | 	add	objptr, ##34940
1c278     F2 FA 61 FC | 	wrlong	result1, objptr
1c27c     44 00 00 FF 
1c280     7C E4 85 F1 | 	sub	objptr, ##34940
1c284     F2 FA 01 F6 | 	mov	result1, objptr
1c288     00 D0 02 FF 
1c28c     00 FA 45 F5 | 	or	result1, ##94371840
1c290     44 00 00 FF 
1c294     24 E4 05 F1 | 	add	objptr, ##34852
1c298     F2 FA 61 FC | 	wrlong	result1, objptr
1c29c     44 00 00 FF 
1c2a0     24 E4 85 F1 | 	sub	objptr, ##34852
1c2a4     F2 FA 01 F6 | 	mov	result1, objptr
1c2a8     00 D8 02 FF 
1c2ac     00 FA 45 F5 | 	or	result1, ##95420416
1c2b0     44 00 00 FF 
1c2b4     2C E4 05 F1 | 	add	objptr, ##34860
1c2b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c2bc     44 00 00 FF 
1c2c0     2C E4 85 F1 | 	sub	objptr, ##34860
1c2c4     F2 FA 01 F6 | 	mov	result1, objptr
1c2c8     00 E0 02 FF 
1c2cc     00 FA 45 F5 | 	or	result1, ##96468992
1c2d0     44 00 00 FF 
1c2d4     30 E4 05 F1 | 	add	objptr, ##34864
1c2d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c2dc     44 00 00 FF 
1c2e0     30 E4 85 F1 | 	sub	objptr, ##34864
1c2e4     F2 FA 01 F6 | 	mov	result1, objptr
1c2e8     00 E8 02 FF 
1c2ec     00 FA 45 F5 | 	or	result1, ##97517568
1c2f0     44 00 00 FF 
1c2f4     80 E4 05 F1 | 	add	objptr, ##34944
1c2f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c2fc     44 00 00 FF 
1c300     80 E4 85 F1 | 	sub	objptr, ##34944
1c304     F2 FA 01 F6 | 	mov	result1, objptr
1c308     00 F0 02 FF 
1c30c     00 FA 45 F5 | 	or	result1, ##98566144
1c310     44 00 00 FF 
1c314     84 E4 05 F1 | 	add	objptr, ##34948
1c318     F2 FA 61 FC | 	wrlong	result1, objptr
1c31c     44 00 00 FF 
1c320     84 E4 85 F1 | 	sub	objptr, ##34948
1c324     F2 FA 01 F6 | 	mov	result1, objptr
1c328     00 F8 02 FF 
1c32c     00 FA 45 F5 | 	or	result1, ##99614720
1c330     44 00 00 FF 
1c334     88 E4 05 F1 | 	add	objptr, ##34952
1c338     F2 FA 61 FC | 	wrlong	result1, objptr
1c33c     44 00 00 FF 
1c340     88 E4 85 F1 | 	sub	objptr, ##34952
1c344     F2 FA 01 F6 | 	mov	result1, objptr
1c348     39 FA 25 F4 | 	bith	result1, #57
1c34c     44 00 00 FF 
1c350     34 E4 05 F1 | 	add	objptr, ##34868
1c354     F2 FA 61 FC | 	wrlong	result1, objptr
1c358     44 00 00 FF 
1c35c     34 E4 85 F1 | 	sub	objptr, ##34868
1c360     F2 FA 01 F6 | 	mov	result1, objptr
1c364     00 08 03 FF 
1c368     00 FA 45 F5 | 	or	result1, ##101711872
1c36c     44 00 00 FF 
1c370     98 E4 05 F1 | 	add	objptr, ##34968
1c374     F2 FA 61 FC | 	wrlong	result1, objptr
1c378     44 00 00 FF 
1c37c     98 E4 85 F1 | 	sub	objptr, ##34968
1c380     F2 FA 01 F6 | 	mov	result1, objptr
1c384     00 10 03 FF 
1c388     00 FA 45 F5 | 	or	result1, ##102760448
1c38c     44 00 00 FF 
1c390     A0 E4 05 F1 | 	add	objptr, ##34976
1c394     F2 FA 61 FC | 	wrlong	result1, objptr
1c398     44 00 00 FF 
1c39c     A0 E4 85 F1 | 	sub	objptr, ##34976
1c3a0     F2 FA 01 F6 | 	mov	result1, objptr
1c3a4     00 18 03 FF 
1c3a8     00 FA 45 F5 | 	or	result1, ##103809024
1c3ac     44 00 00 FF 
1c3b0     94 E4 05 F1 | 	add	objptr, ##34964
1c3b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3b8     44 00 00 FF 
1c3bc     94 E4 85 F1 | 	sub	objptr, ##34964
1c3c0     F2 FA 01 F6 | 	mov	result1, objptr
1c3c4     00 20 03 FF 
1c3c8     00 FA 45 F5 | 	or	result1, ##104857600
1c3cc     44 00 00 FF 
1c3d0     90 E4 05 F1 | 	add	objptr, ##34960
1c3d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3d8     44 00 00 FF 
1c3dc     90 E4 85 F1 | 	sub	objptr, ##34960
1c3e0     F2 FA 01 F6 | 	mov	result1, objptr
1c3e4     00 28 03 FF 
1c3e8     00 FA 45 F5 | 	or	result1, ##105906176
1c3ec     44 00 00 FF 
1c3f0     8C E4 05 F1 | 	add	objptr, ##34956
1c3f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3f8     44 00 00 FF 
1c3fc     8C E4 85 F1 | 	sub	objptr, ##34956
1c400     F2 FA 01 F6 | 	mov	result1, objptr
1c404     00 30 03 FF 
1c408     00 FA 45 F5 | 	or	result1, ##106954752
1c40c     44 00 00 FF 
1c410     9C E4 05 F1 | 	add	objptr, ##34972
1c414     F2 FA 61 FC | 	wrlong	result1, objptr
1c418     44 00 00 FF 
1c41c     9C E4 85 F1 | 	sub	objptr, ##34972
1c420     F2 FA 01 F6 | 	mov	result1, objptr
1c424     00 38 03 FF 
1c428     00 FA 45 F5 | 	or	result1, ##108003328
1c42c     44 00 00 FF 
1c430     A4 E4 05 F1 | 	add	objptr, ##34980
1c434     F2 FA 61 FC | 	wrlong	result1, objptr
1c438     44 00 00 FF 
1c43c     A4 E4 85 F1 | 	sub	objptr, ##34980
1c440     F2 FA 01 F6 | 	mov	result1, objptr
1c444     00 40 03 FF 
1c448     00 FA 45 F5 | 	or	result1, ##109051904
1c44c     44 00 00 FF 
1c450     A8 E4 05 F1 | 	add	objptr, ##34984
1c454     F2 FA 61 FC | 	wrlong	result1, objptr
1c458     44 00 00 FF 
1c45c     A8 E4 85 F1 | 	sub	objptr, ##34984
1c460     F2 FA 01 F6 | 	mov	result1, objptr
1c464     00 48 03 FF 
1c468     00 FA 45 F5 | 	or	result1, ##110100480
1c46c     44 00 00 FF 
1c470     AC E4 05 F1 | 	add	objptr, ##34988
1c474     F2 FA 61 FC | 	wrlong	result1, objptr
1c478     44 00 00 FF 
1c47c     AC E4 85 F1 | 	sub	objptr, ##34988
1c480     F2 FA 01 F6 | 	mov	result1, objptr
1c484     00 50 03 FF 
1c488     00 FA 45 F5 | 	or	result1, ##111149056
1c48c     44 00 00 FF 
1c490     B4 E4 05 F1 | 	add	objptr, ##34996
1c494     F2 FA 61 FC | 	wrlong	result1, objptr
1c498     44 00 00 FF 
1c49c     B4 E4 85 F1 | 	sub	objptr, ##34996
1c4a0     F2 FA 01 F6 | 	mov	result1, objptr
1c4a4     00 58 03 FF 
1c4a8     00 FA 45 F5 | 	or	result1, ##112197632
1c4ac     44 00 00 FF 
1c4b0     B8 E4 05 F1 | 	add	objptr, ##35000
1c4b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4b8     44 00 00 FF 
1c4bc     B8 E4 85 F1 | 	sub	objptr, ##35000
1c4c0     F2 FA 01 F6 | 	mov	result1, objptr
1c4c4     00 60 03 FF 
1c4c8     00 FA 45 F5 | 	or	result1, ##113246208
1c4cc     44 00 00 FF 
1c4d0     BC E4 05 F1 | 	add	objptr, ##35004
1c4d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4d8     44 00 00 FF 
1c4dc     BC E4 85 F1 | 	sub	objptr, ##35004
1c4e0     F2 FA 01 F6 | 	mov	result1, objptr
1c4e4     00 68 03 FF 
1c4e8     00 FA 45 F5 | 	or	result1, ##114294784
1c4ec     44 00 00 FF 
1c4f0     C0 E4 05 F1 | 	add	objptr, ##35008
1c4f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4f8     44 00 00 FF 
1c4fc     C0 E4 85 F1 | 	sub	objptr, ##35008
1c500     F2 FA 01 F6 | 	mov	result1, objptr
1c504     00 70 03 FF 
1c508     00 FA 45 F5 | 	or	result1, ##115343360
1c50c     44 00 00 FF 
1c510     C4 E4 05 F1 | 	add	objptr, ##35012
1c514     F2 FA 61 FC | 	wrlong	result1, objptr
1c518     44 00 00 FF 
1c51c     C4 E4 85 F1 | 	sub	objptr, ##35012
1c520     F2 FA 01 F6 | 	mov	result1, objptr
1c524     00 78 03 FF 
1c528     00 FA 45 F5 | 	or	result1, ##116391936
1c52c     44 00 00 FF 
1c530     C8 E4 05 F1 | 	add	objptr, ##35016
1c534     F2 FA 61 FC | 	wrlong	result1, objptr
1c538     44 00 00 FF 
1c53c     C8 E4 85 F1 | 	sub	objptr, ##35016
1c540     F2 FA 01 F6 | 	mov	result1, objptr
1c544     58 FA 25 F4 | 	bith	result1, #88
1c548     44 00 00 FF 
1c54c     CC E4 05 F1 | 	add	objptr, ##35020
1c550     F2 FA 61 FC | 	wrlong	result1, objptr
1c554     44 00 00 FF 
1c558     CC E4 85 F1 | 	sub	objptr, ##35020
1c55c     F2 FA 01 F6 | 	mov	result1, objptr
1c560     00 88 03 FF 
1c564     00 FA 45 F5 | 	or	result1, ##118489088
1c568     44 00 00 FF 
1c56c     D0 E4 05 F1 | 	add	objptr, ##35024
1c570     F2 FA 61 FC | 	wrlong	result1, objptr
1c574     44 00 00 FF 
1c578     D0 E4 85 F1 | 	sub	objptr, ##35024
1c57c     F2 FA 01 F6 | 	mov	result1, objptr
1c580     00 90 03 FF 
1c584     00 FA 45 F5 | 	or	result1, ##119537664
1c588     44 00 00 FF 
1c58c     B0 E4 05 F1 | 	add	objptr, ##34992
1c590     F2 FA 61 FC | 	wrlong	result1, objptr
1c594     44 00 00 FF 
1c598     B0 E4 85 F1 | 	sub	objptr, ##34992
1c59c     F2 FA 01 F6 | 	mov	result1, objptr
1c5a0     00 98 03 FF 
1c5a4     00 FA 45 F5 | 	or	result1, ##120586240
1c5a8     43 00 00 FF 
1c5ac     A8 E4 05 F1 | 	add	objptr, ##34472
1c5b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b4     43 00 00 FF 
1c5b8     A8 E4 85 F1 | 	sub	objptr, ##34472
1c5bc     F2 FA 01 F6 | 	mov	result1, objptr
1c5c0     00 A0 03 FF 
1c5c4     00 FA 45 F5 | 	or	result1, ##121634816
1c5c8     44 00 00 FF 
1c5cc     D4 E4 05 F1 | 	add	objptr, ##35028
1c5d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c5d4     44 00 00 FF 
1c5d8     D4 E4 85 F1 | 	sub	objptr, ##35028
1c5dc     F2 FA 01 F6 | 	mov	result1, objptr
1c5e0     00 A8 03 FF 
1c5e4     00 FA 45 F5 | 	or	result1, ##122683392
1c5e8     44 00 00 FF 
1c5ec     D8 E4 05 F1 | 	add	objptr, ##35032
1c5f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c5f4     44 00 00 FF 
1c5f8     D8 E4 85 F1 | 	sub	objptr, ##35032
1c5fc     F2 FA 01 F6 | 	mov	result1, objptr
1c600     00 B0 03 FF 
1c604     00 FA 45 F5 | 	or	result1, ##123731968
1c608     44 00 00 FF 
1c60c     EC E4 05 F1 | 	add	objptr, ##35052
1c610     F2 FA 61 FC | 	wrlong	result1, objptr
1c614     44 00 00 FF 
1c618     EC E4 85 F1 | 	sub	objptr, ##35052
1c61c     F2 FA 01 F6 | 	mov	result1, objptr
1c620     00 B8 03 FF 
1c624     00 FA 45 F5 | 	or	result1, ##124780544
1c628     44 00 00 FF 
1c62c     E8 E4 05 F1 | 	add	objptr, ##35048
1c630     F2 FA 61 FC | 	wrlong	result1, objptr
1c634     44 00 00 FF 
1c638     E8 E4 85 F1 | 	sub	objptr, ##35048
1c63c     F2 FA 01 F6 | 	mov	result1, objptr
1c640     77 FA 25 F4 | 	bith	result1, #119
1c644     44 00 00 FF 
1c648     E0 E4 05 F1 | 	add	objptr, ##35040
1c64c     F2 FA 61 FC | 	wrlong	result1, objptr
1c650     44 00 00 FF 
1c654     E0 E4 85 F1 | 	sub	objptr, ##35040
1c658     F2 FA 01 F6 | 	mov	result1, objptr
1c65c     00 C8 03 FF 
1c660     00 FA 45 F5 | 	or	result1, ##126877696
1c664     44 00 00 FF 
1c668     DC E4 05 F1 | 	add	objptr, ##35036
1c66c     F2 FA 61 FC | 	wrlong	result1, objptr
1c670     44 00 00 FF 
1c674     DC E4 85 F1 | 	sub	objptr, ##35036
1c678     F2 FA 01 F6 | 	mov	result1, objptr
1c67c     00 D0 03 FF 
1c680     00 FA 45 F5 | 	or	result1, ##127926272
1c684     44 00 00 FF 
1c688     FC E4 05 F1 | 	add	objptr, ##35068
1c68c     F2 FA 61 FC | 	wrlong	result1, objptr
1c690     44 00 00 FF 
1c694     FC E4 85 F1 | 	sub	objptr, ##35068
1c698     F2 FA 01 F6 | 	mov	result1, objptr
1c69c     00 D8 03 FF 
1c6a0     00 FA 45 F5 | 	or	result1, ##128974848
1c6a4     44 00 00 FF 
1c6a8     F0 E4 05 F1 | 	add	objptr, ##35056
1c6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b0     44 00 00 FF 
1c6b4     F0 E4 85 F1 | 	sub	objptr, ##35056
1c6b8     F2 FA 01 F6 | 	mov	result1, objptr
1c6bc     96 FA 25 F4 | 	bith	result1, #150
1c6c0     44 00 00 FF 
1c6c4     F4 E4 05 F1 | 	add	objptr, ##35060
1c6c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6cc     44 00 00 FF 
1c6d0     F4 E4 85 F1 | 	sub	objptr, ##35060
1c6d4     F2 FA 01 F6 | 	mov	result1, objptr
1c6d8     00 E8 03 FF 
1c6dc     00 FA 45 F5 | 	or	result1, ##131072000
1c6e0     44 00 00 FF 
1c6e4     F8 E4 05 F1 | 	add	objptr, ##35064
1c6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6ec     44 00 00 FF 
1c6f0     F8 E4 85 F1 | 	sub	objptr, ##35064
1c6f4     F2 FA 01 F6 | 	mov	result1, objptr
1c6f8     B5 FA 25 F4 | 	bith	result1, #181
1c6fc     44 00 00 FF 
1c700     00 E5 05 F1 | 	add	objptr, ##35072
1c704     F2 FA 61 FC | 	wrlong	result1, objptr
1c708     44 00 00 FF 
1c70c     00 E5 85 F1 | 	sub	objptr, ##35072
1c710     F2 FA 01 F6 | 	mov	result1, objptr
1c714     D4 FA 25 F4 | 	bith	result1, #212
1c718     44 00 00 FF 
1c71c     04 E5 05 F1 | 	add	objptr, ##35076
1c720     F2 FA 61 FC | 	wrlong	result1, objptr
1c724     44 00 00 FF 
1c728     04 E5 85 F1 | 	sub	objptr, ##35076
1c72c     F2 FA 01 F6 | 	mov	result1, objptr
1c730     1B FA 25 F4 | 	bith	result1, #27
1c734     44 00 00 FF 
1c738     08 E5 05 F1 | 	add	objptr, ##35080
1c73c     F2 FA 61 FC | 	wrlong	result1, objptr
1c740     44 00 00 FF 
1c744     08 E5 85 F1 | 	sub	objptr, ##35080
1c748     F2 FA 01 F6 | 	mov	result1, objptr
1c74c     00 08 04 FF 
1c750     00 FA 45 F5 | 	or	result1, ##135266304
1c754     44 00 00 FF 
1c758     0C E5 05 F1 | 	add	objptr, ##35084
1c75c     F2 FA 61 FC | 	wrlong	result1, objptr
1c760     44 00 00 FF 
1c764     0C E5 85 F1 | 	sub	objptr, ##35084
1c768     F2 FA 01 F6 | 	mov	result1, objptr
1c76c     00 10 04 FF 
1c770     00 FA 45 F5 | 	or	result1, ##136314880
1c774     44 00 00 FF 
1c778     10 E5 05 F1 | 	add	objptr, ##35088
1c77c     F2 FA 61 FC | 	wrlong	result1, objptr
1c780     44 00 00 FF 
1c784     10 E5 85 F1 | 	sub	objptr, ##35088
1c788     F2 FA 01 F6 | 	mov	result1, objptr
1c78c     00 18 04 FF 
1c790     00 FA 45 F5 | 	or	result1, ##137363456
1c794     44 00 00 FF 
1c798     14 E5 05 F1 | 	add	objptr, ##35092
1c79c     F2 FA 61 FC | 	wrlong	result1, objptr
1c7a0     44 00 00 FF 
1c7a4     14 E5 85 F1 | 	sub	objptr, ##35092
1c7a8     F2 FA 01 F6 | 	mov	result1, objptr
1c7ac     00 20 04 FF 
1c7b0     00 FA 45 F5 | 	or	result1, ##138412032
1c7b4     44 00 00 FF 
1c7b8     1C E5 05 F1 | 	add	objptr, ##35100
1c7bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c7c0     44 00 00 FF 
1c7c4     1C E5 85 F1 | 	sub	objptr, ##35100
1c7c8     F2 FA 01 F6 | 	mov	result1, objptr
1c7cc     00 28 04 FF 
1c7d0     00 FA 45 F5 | 	or	result1, ##139460608
1c7d4     44 00 00 FF 
1c7d8     20 E5 05 F1 | 	add	objptr, ##35104
1c7dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c7e0     44 00 00 FF 
1c7e4     20 E5 85 F1 | 	sub	objptr, ##35104
1c7e8     F2 FA 01 F6 | 	mov	result1, objptr
1c7ec     00 30 04 FF 
1c7f0     00 FA 45 F5 | 	or	result1, ##140509184
1c7f4     44 00 00 FF 
1c7f8     24 E5 05 F1 | 	add	objptr, ##35108
1c7fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c800     44 00 00 FF 
1c804     24 E5 85 F1 | 	sub	objptr, ##35108
1c808     F2 FA 01 F6 | 	mov	result1, objptr
1c80c     00 38 04 FF 
1c810     00 FA 45 F5 | 	or	result1, ##141557760
1c814     44 00 00 FF 
1c818     18 E5 05 F1 | 	add	objptr, ##35096
1c81c     F2 FA 61 FC | 	wrlong	result1, objptr
1c820     44 00 00 FF 
1c824     18 E5 85 F1 | 	sub	objptr, ##35096
1c828     F2 FA 01 F6 | 	mov	result1, objptr
1c82c     00 40 04 FF 
1c830     00 FA 45 F5 | 	or	result1, ##142606336
1c834     44 00 00 FF 
1c838     28 E5 05 F1 | 	add	objptr, ##35112
1c83c     F2 FA 61 FC | 	wrlong	result1, objptr
1c840     44 00 00 FF 
1c844     28 E5 85 F1 | 	sub	objptr, ##35112
1c848     F2 FA 01 F6 | 	mov	result1, objptr
1c84c     00 48 04 FF 
1c850     00 FA 45 F5 | 	or	result1, ##143654912
1c854     44 00 00 FF 
1c858     5C E5 05 F1 | 	add	objptr, ##35164
1c85c     F2 FA 61 FC | 	wrlong	result1, objptr
1c860     44 00 00 FF 
1c864     5C E5 85 F1 | 	sub	objptr, ##35164
1c868     F2 FA 01 F6 | 	mov	result1, objptr
1c86c     00 50 04 FF 
1c870     00 FA 45 F5 | 	or	result1, ##144703488
1c874     44 00 00 FF 
1c878     54 E5 05 F1 | 	add	objptr, ##35156
1c87c     F2 FA 61 FC | 	wrlong	result1, objptr
1c880     44 00 00 FF 
1c884     54 E5 85 F1 | 	sub	objptr, ##35156
1c888     F2 FA 01 F6 | 	mov	result1, objptr
1c88c     00 58 04 FF 
1c890     00 FA 45 F5 | 	or	result1, ##145752064
1c894     44 00 00 FF 
1c898     2C E5 05 F1 | 	add	objptr, ##35116
1c89c     F2 FA 61 FC | 	wrlong	result1, objptr
1c8a0     44 00 00 FF 
1c8a4     2C E5 85 F1 | 	sub	objptr, ##35116
1c8a8     F2 FA 01 F6 | 	mov	result1, objptr
1c8ac     00 60 04 FF 
1c8b0     00 FA 45 F5 | 	or	result1, ##146800640
1c8b4     44 00 00 FF 
1c8b8     30 E5 05 F1 | 	add	objptr, ##35120
1c8bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c8c0     44 00 00 FF 
1c8c4     30 E5 85 F1 | 	sub	objptr, ##35120
1c8c8     F2 FA 01 F6 | 	mov	result1, objptr
1c8cc     00 68 04 FF 
1c8d0     00 FA 45 F5 | 	or	result1, ##147849216
1c8d4     44 00 00 FF 
1c8d8     4C E5 05 F1 | 	add	objptr, ##35148
1c8dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c8e0     44 00 00 FF 
1c8e4     4C E5 85 F1 | 	sub	objptr, ##35148
1c8e8     F2 FA 01 F6 | 	mov	result1, objptr
1c8ec     00 70 04 FF 
1c8f0     00 FA 45 F5 | 	or	result1, ##148897792
1c8f4     44 00 00 FF 
1c8f8     50 E5 05 F1 | 	add	objptr, ##35152
1c8fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c900     44 00 00 FF 
1c904     50 E5 85 F1 | 	sub	objptr, ##35152
1c908                 | _init_commands_ret
1c908     2D 00 64 FD | 	ret
1c90c                 | 
1c90c                 | ' 
1c90c                 | ' ''--------------------------------Error strings -------------------------------------
1c90c                 | ' sub init_audio
1c90c                 | _init_audio
1c90c     06 4A 05 F6 | 	mov	COUNT_, #6
1c910     A8 00 A0 FD | 	call	#pushregs_
1c914     00 C0 1F FF 
1c918     00 1E 06 F6 | 	mov	local01, ##1065353216
1c91c                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c91c                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1c91c                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c91c                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1c91c                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1c91c                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1c91c                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c91c                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c91c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c91c     00 20 06 F6 | 	mov	local02, #0
1c920                 | LR__2320
1c920     10 23 02 F6 | 	mov	local03, local02
1c924     01 22 66 F0 | 	shl	local03, #1
1c928     58 7F 23 FF 
1c92c     00 24 06 F6 | 	mov	local04, ##1191096320
1c930     10 13 52 F6 | 	abs	arg01, local02 wc
1c934     1F 26 C6 C9 |  if_b	decod	local05, #31
1c938     00 26 06 36 |  if_ae	mov	local05, #0
1c93c     74 69 B0 FD | 	call	#__system___float_fromuns
1c940     13 FB 61 F5 | 	xor	result1, local05
1c944     FD 12 02 F6 | 	mov	arg01, result1
1c948     87 24 20 FF 
1c94c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c950     64 6D B0 FD | 	call	#__system___float_mul
1c954     FD 12 02 F6 | 	mov	arg01, result1
1c958     00 00 22 FF 
1c95c     00 14 06 F6 | 	mov	arg02, ##1140850688
1c960     58 6F B0 FD | 	call	#__system___float_div
1c964     FD 12 02 F6 | 	mov	arg01, result1
1c968     AC 76 B0 FD | 	call	#__system____builtin_sinf
1c96c     FD 14 02 F6 | 	mov	arg02, result1
1c970     12 13 02 F6 | 	mov	arg01, local04
1c974     40 6D B0 FD | 	call	#__system___float_mul
1c978     FD 12 02 F6 | 	mov	arg01, result1
1c97c     01 14 06 F6 | 	mov	arg02, #1
1c980     FC 71 B0 FD | 	call	#__system___float_tointeger
1c984     FD 14 02 F6 | 	mov	arg02, result1
1c988     11 13 02 F6 | 	mov	arg01, local03
1c98c     88 0D B0 FD | 	call	#_psdpoke
1c990     01 20 06 F1 | 	add	local02, #1
1c994     02 00 00 FF 
1c998     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c99c     80 FF 9F CD |  if_b	jmp	#LR__2320
1c9a0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c9a0     00 20 06 F6 | 	mov	local02, #0
1c9a4                 | LR__2321
1c9a4     10 15 02 F6 | 	mov	arg02, local02
1c9a8     01 14 66 F0 | 	shl	arg02, #1
1c9ac     0B 12 C6 F9 | 	decod	arg01, #11
1c9b0     0A 13 02 F1 | 	add	arg01, arg02
1c9b4     10 25 02 F6 | 	mov	local04, local02
1c9b8     07 24 66 F0 | 	shl	local04, #7
1c9bc     10 25 82 F1 | 	sub	local04, local02
1c9c0     C0 FF 7F FF 
1c9c4     00 15 06 F6 | 	mov	arg02, ##-32512
1c9c8     12 15 02 F1 | 	add	arg02, local04
1c9cc     48 0D B0 FD | 	call	#_psdpoke
1c9d0     09 24 C6 F9 | 	decod	local04, #9
1c9d4     10 25 02 F1 | 	add	local04, local02
1c9d8     01 24 66 F0 | 	shl	local04, #1
1c9dc     0B 12 C6 F9 | 	decod	arg01, #11
1c9e0     12 13 02 F1 | 	add	arg01, local04
1c9e4     10 27 02 F6 | 	mov	local05, local02
1c9e8     07 26 66 F0 | 	shl	local05, #7
1c9ec     10 27 82 F1 | 	sub	local05, local02
1c9f0     3F 00 00 FF 
1c9f4     00 15 06 F6 | 	mov	arg02, ##32512
1c9f8     13 15 82 F1 | 	sub	arg02, local05
1c9fc     18 0D B0 FD | 	call	#_psdpoke
1ca00     01 20 06 F1 | 	add	local02, #1
1ca04     01 00 00 FF 
1ca08     00 20 56 F2 | 	cmps	local02, ##512 wc
1ca0c     94 FF 9F CD |  if_b	jmp	#LR__2321
1ca10                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1ca10     00 20 06 F6 | 	mov	local02, #0
1ca14                 | LR__2322
1ca14     10 27 02 F6 | 	mov	local05, local02
1ca18     01 26 66 F0 | 	shl	local05, #1
1ca1c     0C 12 C6 F9 | 	decod	arg01, #12
1ca20     13 13 02 F1 | 	add	arg01, local05
1ca24     10 27 02 F6 | 	mov	local05, local02
1ca28     06 26 66 F0 | 	shl	local05, #6
1ca2c     10 27 82 F1 | 	sub	local05, local02
1ca30     C1 FF 7F FF 
1ca34     00 14 06 F6 | 	mov	arg02, ##-32256
1ca38     13 15 02 F1 | 	add	arg02, local05
1ca3c     D8 0C B0 FD | 	call	#_psdpoke
1ca40     01 20 06 F1 | 	add	local02, #1
1ca44     02 00 00 FF 
1ca48     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca4c     C4 FF 9F CD |  if_b	jmp	#LR__2322
1ca50                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1ca50     00 20 06 F6 | 	mov	local02, #0
1ca54                 | LR__2323
1ca54     10 27 02 F6 | 	mov	local05, local02
1ca58     01 26 66 F0 | 	shl	local05, #1
1ca5c     0C 00 00 FF 
1ca60     00 12 06 F6 | 	mov	arg01, ##6144
1ca64     13 13 02 F1 | 	add	arg01, local05
1ca68     C0 FF 7F FF 
1ca6c     A8 14 06 F6 | 	mov	arg02, ##-32600
1ca70     A4 0C B0 FD | 	call	#_psdpoke
1ca74     01 20 06 F1 | 	add	local02, #1
1ca78     80 20 56 F2 | 	cmps	local02, #128 wc
1ca7c     D4 FF 9F CD |  if_b	jmp	#LR__2323
1ca80     80 20 06 F6 | 	mov	local02, #128
1ca84                 | LR__2324
1ca84     10 27 02 F6 | 	mov	local05, local02
1ca88     01 26 66 F0 | 	shl	local05, #1
1ca8c     0C 00 00 FF 
1ca90     00 12 06 F6 | 	mov	arg01, ##6144
1ca94     13 13 02 F1 | 	add	arg01, local05
1ca98     3F 00 00 FF 
1ca9c     58 15 06 F6 | 	mov	arg02, ##32600
1caa0     74 0C B0 FD | 	call	#_psdpoke
1caa4     01 20 06 F1 | 	add	local02, #1
1caa8     02 00 00 FF 
1caac     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cab0     D0 FF 9F CD |  if_b	jmp	#LR__2324
1cab4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1cab4     00 20 06 F6 | 	mov	local02, #0
1cab8                 | LR__2325
1cab8     10 27 02 F6 | 	mov	local05, local02
1cabc     01 26 66 F0 | 	shl	local05, #1
1cac0     0D 12 C6 F9 | 	decod	arg01, #13
1cac4     13 13 02 F1 | 	add	arg01, local05
1cac8     C0 FF 7F FF 
1cacc     A8 14 06 F6 | 	mov	arg02, ##-32600
1cad0     44 0C B0 FD | 	call	#_psdpoke
1cad4     01 20 06 F1 | 	add	local02, #1
1cad8     01 00 00 FF 
1cadc     00 20 56 F2 | 	cmps	local02, ##512 wc
1cae0     D4 FF 9F CD |  if_b	jmp	#LR__2325
1cae4     09 20 C6 F9 | 	decod	local02, #9
1cae8                 | LR__2326
1cae8     10 27 02 F6 | 	mov	local05, local02
1caec     01 26 66 F0 | 	shl	local05, #1
1caf0     0D 12 C6 F9 | 	decod	arg01, #13
1caf4     13 13 02 F1 | 	add	arg01, local05
1caf8     3F 00 00 FF 
1cafc     58 15 06 F6 | 	mov	arg02, ##32600
1cb00     14 0C B0 FD | 	call	#_psdpoke
1cb04     01 20 06 F1 | 	add	local02, #1
1cb08     02 00 00 FF 
1cb0c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cb10     D4 FF 9F CD |  if_b	jmp	#LR__2326
1cb14                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1cb14     00 20 06 F6 | 	mov	local02, #0
1cb18                 | LR__2327
1cb18     10 27 02 F6 | 	mov	local05, local02
1cb1c     01 26 66 F0 | 	shl	local05, #1
1cb20     14 00 00 FF 
1cb24     00 12 06 F6 | 	mov	arg01, ##10240
1cb28     13 13 02 F1 | 	add	arg01, local05
1cb2c     C0 FF 7F FF 
1cb30     A8 14 06 F6 | 	mov	arg02, ##-32600
1cb34     E0 0B B0 FD | 	call	#_psdpoke
1cb38     01 20 06 F1 | 	add	local02, #1
1cb3c     00 21 56 F2 | 	cmps	local02, #256 wc
1cb40     D4 FF 9F CD |  if_b	jmp	#LR__2327
1cb44     00 21 06 F6 | 	mov	local02, #256
1cb48                 | LR__2328
1cb48     10 27 02 F6 | 	mov	local05, local02
1cb4c     01 26 66 F0 | 	shl	local05, #1
1cb50     14 00 00 FF 
1cb54     00 12 06 F6 | 	mov	arg01, ##10240
1cb58     13 13 02 F1 | 	add	arg01, local05
1cb5c     3F 00 00 FF 
1cb60     58 15 06 F6 | 	mov	arg02, ##32600
1cb64     B0 0B B0 FD | 	call	#_psdpoke
1cb68     01 20 06 F1 | 	add	local02, #1
1cb6c     02 00 00 FF 
1cb70     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cb74     D0 FF 9F CD |  if_b	jmp	#LR__2328
1cb78                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1cb78     18 00 00 FF 
1cb7c     00 20 06 F6 | 	mov	local02, ##12288
1cb80                 | LR__2329
1cb80     10 13 02 F6 | 	mov	arg01, local02
1cb84     00 14 06 F6 | 	mov	arg02, #0
1cb88     44 0B B0 FD | 	call	#_pslpoke
1cb8c     04 20 06 F1 | 	add	local02, #4
1cb90     77 00 00 FF 
1cb94     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1cb98     E4 FF 9F CD |  if_b	jmp	#LR__2329
1cb9c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1cb9c     00 20 06 F6 | 	mov	local02, #0
1cba0                 | LR__2330
1cba0     10 27 02 F6 | 	mov	local05, local02
1cba4     01 26 66 F0 | 	shl	local05, #1
1cba8     78 00 00 FF 
1cbac     00 22 06 F6 | 	mov	local03, ##61440
1cbb0     13 23 02 F1 | 	add	local03, local05
1cbb4     14 00 00 FF 
1cbb8     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1cbbc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cbc0     14 00 00 FF 
1cbc4     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1cbc8     10 12 06 F1 | 	add	arg01, #16
1cbcc     10 15 02 F6 | 	mov	arg02, local02
1cbd0     01 14 66 F0 | 	shl	arg02, #1
1cbd4     0A 13 02 F1 | 	add	arg01, arg02
1cbd8     09 15 E2 FA | 	rdword	arg02, arg01
1cbdc     11 13 02 F6 | 	mov	arg01, local03
1cbe0     34 0B B0 FD | 	call	#_psdpoke
1cbe4     01 20 06 F1 | 	add	local02, #1
1cbe8     02 00 00 FF 
1cbec     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cbf0     AC FF 9F CD |  if_b	jmp	#LR__2330
1cbf4                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1cbf4     00 20 06 F6 | 	mov	local02, #0
1cbf8                 | LR__2331
1cbf8     10 27 02 F6 | 	mov	local05, local02
1cbfc     01 26 66 F0 | 	shl	local05, #1
1cc00     7C 00 00 FF 
1cc04     00 22 06 F6 | 	mov	local03, ##63488
1cc08     13 23 02 F1 | 	add	local03, local05
1cc0c     10 00 00 FF 
1cc10     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1cc14     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cc18     10 00 00 FF 
1cc1c     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1cc20     10 12 06 F1 | 	add	arg01, #16
1cc24     10 15 02 F6 | 	mov	arg02, local02
1cc28     01 14 66 F0 | 	shl	arg02, #1
1cc2c     0A 13 02 F1 | 	add	arg01, arg02
1cc30     09 15 E2 FA | 	rdword	arg02, arg01
1cc34     11 13 02 F6 | 	mov	arg01, local03
1cc38     DC 0A B0 FD | 	call	#_psdpoke
1cc3c     01 20 06 F1 | 	add	local02, #1
1cc40     02 00 00 FF 
1cc44     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cc48     AC FF 9F CD |  if_b	jmp	#LR__2331
1cc4c                 | ' 
1cc4c                 | ' 
1cc4c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1cc4c     00 20 06 F6 | 	mov	local02, #0
1cc50     0C 00 00 FF 
1cc54     D8 E4 05 F1 | 	add	objptr, ##6360
1cc58     97 18 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
1cc5c                 | LR__2332
1cc5c     10 27 02 F6 | 	mov	local05, local02
1cc60     01 26 66 F0 | 	shl	local05, #1
1cc64     F2 26 02 F1 | 	add	local05, objptr
1cc68     10 23 02 F6 | 	mov	local03, local02
1cc6c     08 22 66 F0 | 	shl	local03, #8
1cc70     7F 00 00 FF 
1cc74     00 29 06 F6 | 	mov	local06, ##65280
1cc78     11 29 82 F1 | 	sub	local06, local03
1cc7c     13 29 52 FC | 	wrword	local06, local05
1cc80     01 20 06 F1 | 	add	local02, #1
1cc84     00 21 56 F2 | 	cmps	local02, #256 wc
1cc88     D0 FF 9F CD |  if_b	jmp	#LR__2332
1cc8c                 | LR__2333
1cc8c     0C 00 00 FF 
1cc90     D8 E4 85 F1 | 	sub	objptr, ##6360
1cc94                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cc94     00 20 06 F6 | 	mov	local02, #0
1cc98                 | LR__2334
1cc98     10 27 02 F6 | 	mov	local05, local02
1cc9c     01 26 66 F0 | 	shl	local05, #1
1cca0     0D 00 00 FF 
1cca4     D8 E4 05 F1 | 	add	objptr, ##6872
1cca8     F2 26 02 F1 | 	add	local05, objptr
1ccac     80 BF 23 FF 
1ccb0     00 12 06 F6 | 	mov	arg01, ##1199505408
1ccb4     0F 15 02 F6 | 	mov	arg02, local01
1ccb8     0D 00 00 FF 
1ccbc     D8 E4 85 F1 | 	sub	objptr, ##6872
1ccc0     F4 69 B0 FD | 	call	#__system___float_mul
1ccc4     FD 12 02 F6 | 	mov	arg01, result1
1ccc8     01 14 06 F6 | 	mov	arg02, #1
1cccc     B0 6E B0 FD | 	call	#__system___float_tointeger
1ccd0     13 FB 51 FC | 	wrword	result1, local05
1ccd4     0F 13 02 F6 | 	mov	arg01, local01
1ccd8     CC BC 1F FF 
1ccdc     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cce0     D4 69 B0 FD | 	call	#__system___float_mul
1cce4     FD 1E 02 F6 | 	mov	local01, result1
1cce8     01 20 06 F1 | 	add	local02, #1
1ccec     00 21 56 F2 | 	cmps	local02, #256 wc
1ccf0     A4 FF 9F CD |  if_b	jmp	#LR__2334
1ccf4     0E 00 00 FF 
1ccf8     D6 E4 05 F1 | 	add	objptr, ##7382
1ccfc     F2 00 58 FC | 	wrword	#0, objptr
1cd00                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cd00     00 20 06 F6 | 	mov	local02, #0
1cd04     02 E4 05 F1 | 	add	objptr, #2
1cd08     97 10 48 FB | 	callpa	#(@LR__2336-@LR__2335)>>2,fcache_load_ptr_
1cd0c                 | LR__2335
1cd0c     10 27 02 F6 | 	mov	local05, local02
1cd10     01 26 66 F0 | 	shl	local05, #1
1cd14     F2 26 02 F1 | 	add	local05, objptr
1cd18     7F 00 80 FF 
1cd1c     13 01 5A FC | 	wrword	##65280, local05
1cd20     01 20 06 F1 | 	add	local02, #1
1cd24     FF 20 56 F2 | 	cmps	local02, #255 wc
1cd28     E0 FF 9F CD |  if_b	jmp	#LR__2335
1cd2c                 | LR__2336
1cd2c     FE E5 05 F1 | 	add	objptr, #510
1cd30     F2 00 58 FC | 	wrword	#0, objptr
1cd34                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cd34     00 20 06 F6 | 	mov	local02, #0
1cd38     02 E4 05 F1 | 	add	objptr, #2
1cd3c     97 52 48 FB | 	callpa	#(@LR__2341-@LR__2337)>>2,fcache_load_ptr_
1cd40                 | LR__2337
1cd40     10 27 02 F6 | 	mov	local05, local02
1cd44     01 26 66 F0 | 	shl	local05, #1
1cd48     F2 26 02 F1 | 	add	local05, objptr
1cd4c     10 29 02 F6 | 	mov	local06, local02
1cd50     0C 28 66 F0 | 	shl	local06, #12
1cd54     13 29 52 FC | 	wrword	local06, local05
1cd58     01 20 06 F1 | 	add	local02, #1
1cd5c     10 20 56 F2 | 	cmps	local02, #16 wc
1cd60     DC FF 9F CD |  if_b	jmp	#LR__2337
1cd64                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cd64     10 20 06 F6 | 	mov	local02, #16
1cd68                 | LR__2338
1cd68     10 27 02 F6 | 	mov	local05, local02
1cd6c     01 26 66 F0 | 	shl	local05, #1
1cd70     F2 26 02 F1 | 	add	local05, objptr
1cd74     7F 00 80 FF 
1cd78     13 01 5A FC | 	wrword	##65280, local05
1cd7c     01 20 06 F1 | 	add	local02, #1
1cd80     F0 20 16 F2 | 	cmp	local02, #240 wc
1cd84     E0 FF 9F CD |  if_b	jmp	#LR__2338
1cd88                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cd88     F0 20 06 F6 | 	mov	local02, #240
1cd8c                 | LR__2339
1cd8c     10 27 02 F6 | 	mov	local05, local02
1cd90     01 26 66 F0 | 	shl	local05, #1
1cd94     F2 26 02 F1 | 	add	local05, objptr
1cd98     FF 22 06 F6 | 	mov	local03, #255
1cd9c     10 23 82 F1 | 	sub	local03, local02
1cda0     0C 22 66 F0 | 	shl	local03, #12
1cda4     13 23 52 FC | 	wrword	local03, local05
1cda8     01 20 06 F1 | 	add	local02, #1
1cdac     00 21 16 F2 | 	cmp	local02, #256 wc
1cdb0     D8 FF 9F CD |  if_b	jmp	#LR__2339
1cdb4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cdb4     00 20 06 F6 | 	mov	local02, #0
1cdb8     01 00 00 FF 
1cdbc     00 E4 05 F1 | 	add	objptr, ##512
1cdc0                 | LR__2340
1cdc0     10 27 02 F6 | 	mov	local05, local02
1cdc4     01 26 66 F0 | 	shl	local05, #1
1cdc8     F2 26 02 F1 | 	add	local05, objptr
1cdcc     10 29 02 F6 | 	mov	local06, local02
1cdd0     08 28 66 F0 | 	shl	local06, #8
1cdd4     13 29 52 FC | 	wrword	local06, local05
1cdd8     01 20 06 F1 | 	add	local02, #1
1cddc     00 21 56 F2 | 	cmps	local02, #256 wc
1cde0     DC FF 9F CD |  if_b	jmp	#LR__2340
1cde4                 | LR__2341
1cde4     FE E5 05 F1 | 	add	objptr, #510
1cde8     F2 00 58 FC | 	wrword	#0, objptr
1cdec                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cdec     00 20 06 F6 | 	mov	local02, #0
1cdf0     02 E4 05 F1 | 	add	objptr, #2
1cdf4     97 6A 48 FB | 	callpa	#(@LR__2346-@LR__2342)>>2,fcache_load_ptr_
1cdf8                 | LR__2342
1cdf8     10 27 02 F6 | 	mov	local05, local02
1cdfc     01 26 66 F0 | 	shl	local05, #1
1ce00     F2 26 02 F1 | 	add	local05, objptr
1ce04     10 29 02 F6 | 	mov	local06, local02
1ce08     04 28 66 F0 | 	shl	local06, #4
1ce0c     10 29 02 F1 | 	add	local06, local02
1ce10     04 28 66 F0 | 	shl	local06, #4
1ce14     13 29 52 FC | 	wrword	local06, local05
1ce18     01 20 06 F1 | 	add	local02, #1
1ce1c     F0 20 56 F2 | 	cmps	local02, #240 wc
1ce20     D4 FF 9F CD |  if_b	jmp	#LR__2342
1ce24     F0 20 06 F6 | 	mov	local02, #240
1ce28                 | LR__2343
1ce28     10 27 02 F6 | 	mov	local05, local02
1ce2c     01 26 66 F0 | 	shl	local05, #1
1ce30     F2 26 02 F1 | 	add	local05, objptr
1ce34     FF 22 06 F6 | 	mov	local03, #255
1ce38     10 23 82 F1 | 	sub	local03, local02
1ce3c     0C 22 66 F0 | 	shl	local03, #12
1ce40     13 23 52 FC | 	wrword	local03, local05
1ce44     01 20 06 F1 | 	add	local02, #1
1ce48     00 21 16 F2 | 	cmp	local02, #256 wc
1ce4c     D8 FF 9F CD |  if_b	jmp	#LR__2343
1ce50                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1ce50     00 20 06 F6 | 	mov	local02, #0
1ce54     01 00 00 FF 
1ce58     00 E4 05 F1 | 	add	objptr, ##512
1ce5c                 | LR__2344
1ce5c     10 27 02 F6 | 	mov	local05, local02
1ce60     01 26 66 F0 | 	shl	local05, #1
1ce64     F2 26 02 F1 | 	add	local05, objptr
1ce68     10 29 02 F6 | 	mov	local06, local02
1ce6c     09 28 66 F0 | 	shl	local06, #9
1ce70     13 29 52 FC | 	wrword	local06, local05
1ce74     FF 26 06 F6 | 	mov	local05, #255
1ce78     10 27 82 F1 | 	sub	local05, local02
1ce7c     01 26 66 F0 | 	shl	local05, #1
1ce80     F2 26 02 F1 | 	add	local05, objptr
1ce84     10 29 02 F6 | 	mov	local06, local02
1ce88     09 28 66 F0 | 	shl	local06, #9
1ce8c     13 29 52 FC | 	wrword	local06, local05
1ce90     01 20 06 F1 | 	add	local02, #1
1ce94     80 20 56 F2 | 	cmps	local02, #128 wc
1ce98     C0 FF 9F CD |  if_b	jmp	#LR__2344
1ce9c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1ce9c     00 20 06 F6 | 	mov	local02, #0
1cea0     01 00 00 FF 
1cea4     00 E4 05 F1 | 	add	objptr, ##512
1cea8                 | LR__2345
1cea8     10 27 02 F6 | 	mov	local05, local02
1ceac     01 26 66 F0 | 	shl	local05, #1
1ceb0     F2 26 02 F1 | 	add	local05, objptr
1ceb4     10 29 02 F6 | 	mov	local06, local02
1ceb8     0D 28 66 F0 | 	shl	local06, #13
1cebc     13 29 52 FC | 	wrword	local06, local05
1cec0     01 20 06 F1 | 	add	local02, #1
1cec4     08 20 56 F2 | 	cmps	local02, #8 wc
1cec8     DC FF 9F CD |  if_b	jmp	#LR__2345
1cecc                 | LR__2346
1cecc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cecc     08 20 06 F6 | 	mov	local02, #8
1ced0     97 42 48 FB | 	callpa	#(@LR__2350-@LR__2347)>>2,fcache_load_ptr_
1ced4                 | LR__2347
1ced4     10 27 02 F6 | 	mov	local05, local02
1ced8     01 26 66 F0 | 	shl	local05, #1
1cedc     F2 26 02 F1 | 	add	local05, objptr
1cee0     10 1F 02 F6 | 	mov	local01, local02
1cee4     08 1E 86 F1 | 	sub	local01, #8
1cee8     0B 1E 66 F0 | 	shl	local01, #11
1ceec     7F 00 00 FF 
1cef0     00 29 06 F6 | 	mov	local06, ##65280
1cef4     0F 29 82 F1 | 	sub	local06, local01
1cef8     13 29 52 FC | 	wrword	local06, local05
1cefc     01 20 06 F1 | 	add	local02, #1
1cf00     18 20 16 F2 | 	cmp	local02, #24 wc
1cf04     CC FF 9F CD |  if_b	jmp	#LR__2347
1cf08                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cf08     18 20 06 F6 | 	mov	local02, #24
1cf0c                 | LR__2348
1cf0c     10 27 02 F6 | 	mov	local05, local02
1cf10     01 26 66 F0 | 	shl	local05, #1
1cf14     F2 26 02 F1 | 	add	local05, objptr
1cf18     40 00 80 FF 
1cf1c     13 01 58 FC | 	wrword	##32768, local05
1cf20     01 20 06 F1 | 	add	local02, #1
1cf24     81 20 16 F2 | 	cmp	local02, #129 wc
1cf28     E0 FF 9F CD |  if_b	jmp	#LR__2348
1cf2c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cf2c     81 20 06 F6 | 	mov	local02, #129
1cf30                 | LR__2349
1cf30     10 27 02 F6 | 	mov	local05, local02
1cf34     01 26 66 F0 | 	shl	local05, #1
1cf38     F2 26 02 F1 | 	add	local05, objptr
1cf3c     FF 22 06 F6 | 	mov	local03, #255
1cf40     10 23 82 F1 | 	sub	local03, local02
1cf44     08 22 66 F0 | 	shl	local03, #8
1cf48     13 23 52 FC | 	wrword	local03, local05
1cf4c     01 20 06 F1 | 	add	local02, #1
1cf50     00 21 16 F2 | 	cmp	local02, #256 wc
1cf54     D8 FF 9F CD |  if_b	jmp	#LR__2349
1cf58                 | LR__2350
1cf58     3E 00 00 FF 
1cf5c     FA E4 05 F1 | 	add	objptr, ##31994
1cf60     F2 00 59 FC | 	wrword	#128, objptr
1cf64     51 00 00 FF 
1cf68     D2 E5 85 F1 | 	sub	objptr, ##41938
1cf6c                 | ' for i=0 to 7
1cf6c     00 20 06 F6 | 	mov	local02, #0
1cf70     97 8E 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1cf74                 | LR__2351
1cf74     10 27 02 F6 | 	mov	local05, local02
1cf78     01 26 66 F0 | 	shl	local05, #1
1cf7c     10 27 02 F1 | 	add	local05, local02
1cf80     03 26 66 F0 | 	shl	local05, #3
1cf84     14 00 00 FF 
1cf88     38 E5 05 F1 | 	add	objptr, ##10552
1cf8c     F2 26 02 F1 | 	add	local05, objptr
1cf90     00 EE A1 FF 
1cf94     13 01 68 FC | 	wrlong	##1138491392, local05
1cf98     10 27 02 F6 | 	mov	local05, local02
1cf9c     01 26 66 F0 | 	shl	local05, #1
1cfa0     10 27 02 F1 | 	add	local05, local02
1cfa4     03 26 66 F0 | 	shl	local05, #3
1cfa8     F2 26 02 F1 | 	add	local05, objptr
1cfac     04 26 06 F1 | 	add	local05, #4
1cfb0     13 21 42 FC | 	wrbyte	local02, local05
1cfb4     10 27 02 F6 | 	mov	local05, local02
1cfb8     01 26 66 F0 | 	shl	local05, #1
1cfbc     10 27 02 F1 | 	add	local05, local02
1cfc0     03 26 66 F0 | 	shl	local05, #3
1cfc4     F2 26 02 F1 | 	add	local05, objptr
1cfc8     05 26 06 F1 | 	add	local05, #5
1cfcc     13 21 42 FC | 	wrbyte	local02, local05
1cfd0     10 27 02 F6 | 	mov	local05, local02
1cfd4     01 26 66 F0 | 	shl	local05, #1
1cfd8     10 27 02 F1 | 	add	local05, local02
1cfdc     03 26 66 F0 | 	shl	local05, #3
1cfe0     F2 26 02 F1 | 	add	local05, objptr
1cfe4     06 26 06 F1 | 	add	local05, #6
1cfe8     13 01 58 FC | 	wrword	#0, local05
1cfec     10 27 02 F6 | 	mov	local05, local02
1cff0     01 26 66 F0 | 	shl	local05, #1
1cff4     10 27 02 F1 | 	add	local05, local02
1cff8     03 26 66 F0 | 	shl	local05, #3
1cffc     F2 26 02 F1 | 	add	local05, objptr
1d000     08 26 06 F1 | 	add	local05, #8
1d004     00 C0 9F FF 
1d008     13 01 68 FC | 	wrlong	##1065353216, local05
1d00c     10 27 02 F6 | 	mov	local05, local02
1d010     01 26 66 F0 | 	shl	local05, #1
1d014     10 27 02 F1 | 	add	local05, local02
1d018     03 26 66 F0 | 	shl	local05, #3
1d01c     F2 26 02 F1 | 	add	local05, objptr
1d020     0C 26 06 F1 | 	add	local05, #12
1d024     00 40 A0 FF 
1d028     13 01 68 FC | 	wrlong	##1082130432, local05
1d02c     10 27 02 F6 | 	mov	local05, local02
1d030     01 26 66 F0 | 	shl	local05, #1
1d034     10 27 02 F1 | 	add	local05, local02
1d038     03 26 66 F0 | 	shl	local05, #3
1d03c     F2 26 02 F1 | 	add	local05, objptr
1d040     10 26 06 F1 | 	add	local05, #16
1d044     13 01 68 FC | 	wrlong	#0, local05
1d048     10 27 02 F6 | 	mov	local05, local02
1d04c     01 26 66 F0 | 	shl	local05, #1
1d050     10 27 02 F1 | 	add	local05, local02
1d054     03 26 66 F0 | 	shl	local05, #3
1d058     F2 26 02 F1 | 	add	local05, objptr
1d05c     14 26 06 F1 | 	add	local05, #20
1d060     13 FF 59 FC | 	wrword	#255, local05
1d064     10 27 02 F6 | 	mov	local05, local02
1d068     01 26 66 F0 | 	shl	local05, #1
1d06c     3D 00 00 FF 
1d070     8C E4 05 F1 | 	add	objptr, ##31372
1d074     F2 26 02 F1 | 	add	local05, objptr
1d078     13 FF 59 FC | 	wrword	#255, local05
1d07c     01 20 06 F1 | 	add	local02, #1
1d080     08 20 56 F2 | 	cmps	local02, #8 wc
1d084     51 00 00 FF 
1d088     C4 E5 85 F1 | 	sub	objptr, ##41924
1d08c     E4 FE 9F CD |  if_b	jmp	#LR__2351
1d090                 | LR__2352
1d090     00 6E 20 FF 
1d094     00 28 06 F6 | 	mov	local06, ##1088159744
1d098                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1d098     03 26 06 F6 | 	mov	local05, #3
1d09c                 | LR__2353
1d09c     14 13 02 F6 | 	mov	arg01, local06
1d0a0     CE C3 1F FF 
1d0a4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d0a8     0C 66 B0 FD | 	call	#__system___float_mul
1d0ac     FD 28 02 F6 | 	mov	local06, result1
1d0b0     FA 27 6E FB | 	djnz	local05, #LR__2353
1d0b4     00 20 06 F6 | 	mov	local02, #0
1d0b8                 | LR__2354
1d0b8     10 25 02 F6 | 	mov	local04, local02
1d0bc     02 24 66 F0 | 	shl	local04, #2
1d0c0     14 00 00 FF 
1d0c4     D8 E4 05 F1 | 	add	objptr, ##10456
1d0c8     F2 24 02 F1 | 	add	local04, objptr
1d0cc     12 29 62 FC | 	wrlong	local06, local04
1d0d0     14 13 02 F6 | 	mov	arg01, local06
1d0d4     CE C3 1F FF 
1d0d8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d0dc     14 00 00 FF 
1d0e0     D8 E4 85 F1 | 	sub	objptr, ##10456
1d0e4     D0 65 B0 FD | 	call	#__system___float_mul
1d0e8     FD 28 02 F6 | 	mov	local06, result1
1d0ec     01 20 06 F1 | 	add	local02, #1
1d0f0     0C 20 56 F2 | 	cmps	local02, #12 wc
1d0f4     C0 FF 9F CD |  if_b	jmp	#LR__2354
1d0f8     14 00 00 FF 
1d0fc     08 E5 05 F1 | 	add	objptr, ##10504
1d100     F2 50 6B FC | 	wrlong	#424, objptr
1d104     04 E4 05 F1 | 	add	objptr, #4
1d108     F2 20 6B FC | 	wrlong	#400, objptr
1d10c     04 E4 05 F1 | 	add	objptr, #4
1d110     F2 F2 6A FC | 	wrlong	#377, objptr
1d114     04 E4 05 F1 | 	add	objptr, #4
1d118     F2 C8 6A FC | 	wrlong	#356, objptr
1d11c     04 E4 05 F1 | 	add	objptr, #4
1d120     F2 A0 6A FC | 	wrlong	#336, objptr
1d124     04 E4 05 F1 | 	add	objptr, #4
1d128     F2 7A 6A FC | 	wrlong	#317, objptr
1d12c     04 E4 05 F1 | 	add	objptr, #4
1d130     F2 58 6A FC | 	wrlong	#300, objptr
1d134     04 E4 05 F1 | 	add	objptr, #4
1d138     F2 36 6A FC | 	wrlong	#283, objptr
1d13c     04 E4 05 F1 | 	add	objptr, #4
1d140     F2 16 6A FC | 	wrlong	#267, objptr
1d144     04 E4 05 F1 | 	add	objptr, #4
1d148     F2 F8 69 FC | 	wrlong	#252, objptr
1d14c     04 E4 05 F1 | 	add	objptr, #4
1d150     F2 DC 69 FC | 	wrlong	#238, objptr
1d154     04 E4 05 F1 | 	add	objptr, #4
1d158     F2 C0 69 FC | 	wrlong	#224, objptr
1d15c     3D 00 00 FF 
1d160     9E E4 05 F1 | 	add	objptr, ##31390
1d164     F2 00 59 FC | 	wrword	#128, objptr
1d168     02 E4 85 F1 | 	sub	objptr, #2
1d16c     F2 00 59 FC | 	wrword	#128, objptr
1d170     51 00 00 FF 
1d174     D0 E5 85 F1 | 	sub	objptr, ##41936
1d178     A7 F0 03 F6 | 	mov	ptra, fp
1d17c     B2 00 A0 FD | 	call	#popregs_
1d180                 | _init_audio_ret
1d180     2D 00 64 FD | 	ret
1d184                 | 
1d184                 | ' 
1d184                 | ' 
1d184                 | ' function getnoteval(token) as single
1d184                 | _getnoteval
1d184     02 4A 05 F6 | 	mov	COUNT_, #2
1d188     A8 00 A0 FD | 	call	#pushregs_
1d18c     01 00 00 FF 
1d190     00 13 86 F1 | 	sub	arg01, ##768
1d194     09 15 52 F6 | 	abs	arg02, arg01 wc
1d198     0C 14 16 FD | 	qdiv	arg02, #12
1d19c     14 00 00 FF 
1d1a0     D8 E4 05 F1 | 	add	objptr, ##10456
1d1a4     19 14 62 FD | 	getqy	arg02
1d1a8     0A 15 82 F6 | 	negc	arg02, arg02
1d1ac     02 14 66 F0 | 	shl	arg02, #2
1d1b0     F2 14 02 F1 | 	add	arg02, objptr
1d1b4     0A 1F 02 FB | 	rdlong	local01, arg02
1d1b8     09 15 52 F6 | 	abs	arg02, arg01 wc
1d1bc     0C 14 16 FD | 	qdiv	arg02, #12
1d1c0     14 00 00 FF 
1d1c4     D8 E4 85 F1 | 	sub	objptr, ##10456
1d1c8     01 12 06 F6 | 	mov	arg01, #1
1d1cc                 | ' noteexp=1+(note/12) 
1d1cc                 | ' return (2.0^noteexp)*notebase
1d1cc     18 14 62 FD | 	getqx	arg02
1d1d0     0A 13 82 F3 | 	sumc	arg01, arg02
1d1d4     09 13 52 F6 | 	abs	arg01, arg01 wc
1d1d8     1F 20 C6 C9 |  if_b	decod	local02, #31
1d1dc     00 20 06 36 |  if_ae	mov	local02, #0
1d1e0     D0 60 B0 FD | 	call	#__system___float_fromuns
1d1e4     10 FB 61 F5 | 	xor	result1, local02
1d1e8     FD 14 02 F6 | 	mov	arg02, result1
1d1ec     1E 12 C6 F9 | 	decod	arg01, #30
1d1f0     CC 73 B0 FD | 	call	#__system____builtin_powf
1d1f4     FD 12 02 F6 | 	mov	arg01, result1
1d1f8     0F 15 02 F6 | 	mov	arg02, local01
1d1fc     B8 64 B0 FD | 	call	#__system___float_mul
1d200     A7 F0 03 F6 | 	mov	ptra, fp
1d204     B2 00 A0 FD | 	call	#popregs_
1d208                 | _getnoteval_ret
1d208     2D 00 64 FD | 	ret
1d20c                 | 
1d20c                 | ' 
1d20c                 | ' 
1d20c                 | ' 
1d20c                 | ' sub init_error_strings
1d20c                 | _init_error_strings
1d20c     86 01 00 FF 
1d210     AF 00 06 F6 | 	mov	_var01, ##@LR__5533
1d214     45 00 00 FF 
1d218     7C E4 05 F1 | 	add	objptr, ##35452
1d21c     F2 00 62 FC | 	wrlong	_var01, objptr
1d220     86 01 00 FF 
1d224     B0 00 06 F6 | 	mov	_var01, ##@LR__5534
1d228     04 E4 05 F1 | 	add	objptr, #4
1d22c     F2 00 62 FC | 	wrlong	_var01, objptr
1d230     86 01 00 FF 
1d234     D5 00 06 F6 | 	mov	_var01, ##@LR__5535
1d238     04 E4 05 F1 | 	add	objptr, #4
1d23c     F2 00 62 FC | 	wrlong	_var01, objptr
1d240     86 01 00 FF 
1d244     F6 00 06 F6 | 	mov	_var01, ##@LR__5536
1d248     04 E4 05 F1 | 	add	objptr, #4
1d24c     F2 00 62 FC | 	wrlong	_var01, objptr
1d250     86 01 00 FF 
1d254     10 01 06 F6 | 	mov	_var01, ##@LR__5537
1d258     04 E4 05 F1 | 	add	objptr, #4
1d25c     F2 00 62 FC | 	wrlong	_var01, objptr
1d260     86 01 00 FF 
1d264     2C 01 06 F6 | 	mov	_var01, ##@LR__5538
1d268     04 E4 05 F1 | 	add	objptr, #4
1d26c     F2 00 62 FC | 	wrlong	_var01, objptr
1d270     86 01 00 FF 
1d274     4E 01 06 F6 | 	mov	_var01, ##@LR__5539
1d278     04 E4 05 F1 | 	add	objptr, #4
1d27c     F2 00 62 FC | 	wrlong	_var01, objptr
1d280     86 01 00 FF 
1d284     7C 01 06 F6 | 	mov	_var01, ##@LR__5540
1d288     04 E4 05 F1 | 	add	objptr, #4
1d28c     F2 00 62 FC | 	wrlong	_var01, objptr
1d290     86 01 00 FF 
1d294     A7 01 06 F6 | 	mov	_var01, ##@LR__5541
1d298     04 E4 05 F1 | 	add	objptr, #4
1d29c     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a0     86 01 00 FF 
1d2a4     C0 01 06 F6 | 	mov	_var01, ##@LR__5542
1d2a8     04 E4 05 F1 | 	add	objptr, #4
1d2ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b0     86 01 00 FF 
1d2b4     E1 01 06 F6 | 	mov	_var01, ##@LR__5543
1d2b8     04 E4 05 F1 | 	add	objptr, #4
1d2bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c0     86 01 00 FF 
1d2c4     F8 01 06 F6 | 	mov	_var01, ##@LR__5544
1d2c8     04 E4 05 F1 | 	add	objptr, #4
1d2cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d0     87 01 00 FF 
1d2d4     16 00 06 F6 | 	mov	_var01, ##@LR__5545
1d2d8     04 E4 05 F1 | 	add	objptr, #4
1d2dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e0     87 01 00 FF 
1d2e4     3A 00 06 F6 | 	mov	_var01, ##@LR__5546
1d2e8     04 E4 05 F1 | 	add	objptr, #4
1d2ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f0     87 01 00 FF 
1d2f4     61 00 06 F6 | 	mov	_var01, ##@LR__5547
1d2f8     04 E4 05 F1 | 	add	objptr, #4
1d2fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d300     87 01 00 FF 
1d304     7D 00 06 F6 | 	mov	_var01, ##@LR__5548
1d308     04 E4 05 F1 | 	add	objptr, #4
1d30c     F2 00 62 FC | 	wrlong	_var01, objptr
1d310     87 01 00 FF 
1d314     8E 00 06 F6 | 	mov	_var01, ##@LR__5549
1d318     04 E4 05 F1 | 	add	objptr, #4
1d31c     F2 00 62 FC | 	wrlong	_var01, objptr
1d320     87 01 00 FF 
1d324     9E 00 06 F6 | 	mov	_var01, ##@LR__5550
1d328     04 E4 05 F1 | 	add	objptr, #4
1d32c     F2 00 62 FC | 	wrlong	_var01, objptr
1d330     87 01 00 FF 
1d334     B9 00 06 F6 | 	mov	_var01, ##@LR__5551
1d338     04 E4 05 F1 | 	add	objptr, #4
1d33c     F2 00 62 FC | 	wrlong	_var01, objptr
1d340     87 01 00 FF 
1d344     CB 00 06 F6 | 	mov	_var01, ##@LR__5552
1d348     04 E4 05 F1 | 	add	objptr, #4
1d34c     F2 00 62 FC | 	wrlong	_var01, objptr
1d350     87 01 00 FF 
1d354     E3 00 06 F6 | 	mov	_var01, ##@LR__5553
1d358     04 E4 05 F1 | 	add	objptr, #4
1d35c     F2 00 62 FC | 	wrlong	_var01, objptr
1d360     87 01 00 FF 
1d364     F7 00 06 F6 | 	mov	_var01, ##@LR__5554
1d368     04 E4 05 F1 | 	add	objptr, #4
1d36c     F2 00 62 FC | 	wrlong	_var01, objptr
1d370     87 01 00 FF 
1d374     07 01 06 F6 | 	mov	_var01, ##@LR__5555
1d378     04 E4 05 F1 | 	add	objptr, #4
1d37c     F2 00 62 FC | 	wrlong	_var01, objptr
1d380     87 01 00 FF 
1d384     24 01 06 F6 | 	mov	_var01, ##@LR__5556
1d388     04 E4 05 F1 | 	add	objptr, #4
1d38c     F2 00 62 FC | 	wrlong	_var01, objptr
1d390     87 01 00 FF 
1d394     35 01 06 F6 | 	mov	_var01, ##@LR__5557
1d398     04 E4 05 F1 | 	add	objptr, #4
1d39c     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a0     87 01 00 FF 
1d3a4     46 01 06 F6 | 	mov	_var01, ##@LR__5558
1d3a8     04 E4 05 F1 | 	add	objptr, #4
1d3ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d3b0     87 01 00 FF 
1d3b4     7A 01 06 F6 | 	mov	_var01, ##@LR__5559
1d3b8     04 E4 05 F1 | 	add	objptr, #4
1d3bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d3c0     87 01 00 FF 
1d3c4     96 01 06 F6 | 	mov	_var01, ##@LR__5560
1d3c8     04 E4 05 F1 | 	add	objptr, #4
1d3cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d3d0     87 01 00 FF 
1d3d4     AC 01 06 F6 | 	mov	_var01, ##@LR__5561
1d3d8     04 E4 05 F1 | 	add	objptr, #4
1d3dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d3e0     87 01 00 FF 
1d3e4     B9 01 06 F6 | 	mov	_var01, ##@LR__5562
1d3e8     04 E4 05 F1 | 	add	objptr, #4
1d3ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d3f0     87 01 00 FF 
1d3f4     CB 01 06 F6 | 	mov	_var01, ##@LR__5563
1d3f8     04 E4 05 F1 | 	add	objptr, #4
1d3fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d400     87 01 00 FF 
1d404     DC 01 06 F6 | 	mov	_var01, ##@LR__5564
1d408     04 E4 05 F1 | 	add	objptr, #4
1d40c     F2 00 62 FC | 	wrlong	_var01, objptr
1d410     87 01 00 FF 
1d414     F8 01 06 F6 | 	mov	_var01, ##@LR__5565
1d418     04 E4 05 F1 | 	add	objptr, #4
1d41c     F2 00 62 FC | 	wrlong	_var01, objptr
1d420     88 01 00 FF 
1d424     09 00 06 F6 | 	mov	_var01, ##@LR__5566
1d428     04 E4 05 F1 | 	add	objptr, #4
1d42c     F2 00 62 FC | 	wrlong	_var01, objptr
1d430     88 01 00 FF 
1d434     18 00 06 F6 | 	mov	_var01, ##@LR__5567
1d438     04 E4 05 F1 | 	add	objptr, #4
1d43c     F2 00 62 FC | 	wrlong	_var01, objptr
1d440     88 01 00 FF 
1d444     33 00 06 F6 | 	mov	_var01, ##@LR__5568
1d448     04 E4 05 F1 | 	add	objptr, #4
1d44c     F2 00 62 FC | 	wrlong	_var01, objptr
1d450     88 01 00 FF 
1d454     67 00 06 F6 | 	mov	_var01, ##@LR__5569
1d458     04 E4 05 F1 | 	add	objptr, #4
1d45c     F2 00 62 FC | 	wrlong	_var01, objptr
1d460     88 01 00 FF 
1d464     80 00 06 F6 | 	mov	_var01, ##@LR__5570
1d468     04 E4 05 F1 | 	add	objptr, #4
1d46c     F2 00 62 FC | 	wrlong	_var01, objptr
1d470     88 01 00 FF 
1d474     9C 00 06 F6 | 	mov	_var01, ##@LR__5571
1d478     04 E4 05 F1 | 	add	objptr, #4
1d47c     F2 00 62 FC | 	wrlong	_var01, objptr
1d480     88 01 00 FF 
1d484     BA 00 06 F6 | 	mov	_var01, ##@LR__5572
1d488     04 E4 05 F1 | 	add	objptr, #4
1d48c     F2 00 62 FC | 	wrlong	_var01, objptr
1d490     88 01 00 FF 
1d494     D3 00 06 F6 | 	mov	_var01, ##@LR__5573
1d498     04 E4 05 F1 | 	add	objptr, #4
1d49c     F2 00 62 FC | 	wrlong	_var01, objptr
1d4a0     88 01 00 FF 
1d4a4     F2 00 06 F6 | 	mov	_var01, ##@LR__5574
1d4a8     04 E4 05 F1 | 	add	objptr, #4
1d4ac     F2 00 62 FC | 	wrlong	_var01, objptr
1d4b0     88 01 00 FF 
1d4b4     01 01 06 F6 | 	mov	_var01, ##@LR__5575
1d4b8     04 E4 05 F1 | 	add	objptr, #4
1d4bc     F2 00 62 FC | 	wrlong	_var01, objptr
1d4c0     88 01 00 FF 
1d4c4     2F 01 06 F6 | 	mov	_var01, ##@LR__5576
1d4c8     04 E4 05 F1 | 	add	objptr, #4
1d4cc     F2 00 62 FC | 	wrlong	_var01, objptr
1d4d0     88 01 00 FF 
1d4d4     3D 01 06 F6 | 	mov	_var01, ##@LR__5577
1d4d8     04 E4 05 F1 | 	add	objptr, #4
1d4dc     F2 00 62 FC | 	wrlong	_var01, objptr
1d4e0     88 01 00 FF 
1d4e4     52 01 06 F6 | 	mov	_var01, ##@LR__5578
1d4e8     04 E4 05 F1 | 	add	objptr, #4
1d4ec     F2 00 62 FC | 	wrlong	_var01, objptr
1d4f0     88 01 00 FF 
1d4f4     76 01 06 F6 | 	mov	_var01, ##@LR__5579
1d4f8     04 E4 05 F1 | 	add	objptr, #4
1d4fc     F2 00 62 FC | 	wrlong	_var01, objptr
1d500     88 01 00 FF 
1d504     8D 01 06 F6 | 	mov	_var01, ##@LR__5580
1d508     04 E4 05 F1 | 	add	objptr, #4
1d50c     F2 00 62 FC | 	wrlong	_var01, objptr
1d510     88 01 00 FF 
1d514     A0 01 06 F6 | 	mov	_var01, ##@LR__5581
1d518     04 E4 05 F1 | 	add	objptr, #4
1d51c     F2 00 62 FC | 	wrlong	_var01, objptr
1d520     88 01 00 FF 
1d524     B7 01 06 F6 | 	mov	_var01, ##@LR__5582
1d528     04 E4 05 F1 | 	add	objptr, #4
1d52c     F2 00 62 FC | 	wrlong	_var01, objptr
1d530     88 01 00 FF 
1d534     D0 01 06 F6 | 	mov	_var01, ##@LR__5583
1d538     04 E4 05 F1 | 	add	objptr, #4
1d53c     F2 00 62 FC | 	wrlong	_var01, objptr
1d540     88 01 00 FF 
1d544     F2 01 06 F6 | 	mov	_var01, ##@LR__5584
1d548     04 E4 05 F1 | 	add	objptr, #4
1d54c     F2 00 62 FC | 	wrlong	_var01, objptr
1d550     89 01 00 FF 
1d554     05 00 06 F6 | 	mov	_var01, ##@LR__5585
1d558     04 E4 05 F1 | 	add	objptr, #4
1d55c     F2 00 62 FC | 	wrlong	_var01, objptr
1d560     45 00 00 FF 
1d564     4C E5 85 F1 | 	sub	objptr, ##35660
1d568                 | _init_error_strings_ret
1d568     2D 00 64 FD | 	ret
1d56c                 | 
1d56c                 | '         
1d56c                 | ' sub printerror(err as integer)
1d56c                 | _printerror
1d56c     01 4A 05 F6 | 	mov	COUNT_, #1
1d570     A8 00 A0 FD | 	call	#pushregs_
1d574     09 1F 02 F6 | 	mov	local01, arg01
1d578     89 01 00 FF 
1d57c     15 12 06 F6 | 	mov	arg01, ##@LR__5586
1d580     64 20 B0 FD | 	call	#_hg010b_spin2_write
1d584     0F 13 02 F6 | 	mov	arg01, local01
1d588     00 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1d58c     FD 12 02 F6 | 	mov	arg01, result1
1d590     54 20 B0 FD | 	call	#_hg010b_spin2_write
1d594     89 01 00 FF 
1d598     1C 12 06 F6 | 	mov	arg01, ##@LR__5587
1d59c     48 20 B0 FD | 	call	#_hg010b_spin2_write
1d5a0     02 1E 66 F0 | 	shl	local01, #2
1d5a4     45 00 00 FF 
1d5a8     7C E4 05 F1 | 	add	objptr, ##35452
1d5ac     F2 1E 02 F1 | 	add	local01, objptr
1d5b0     0F 13 02 FB | 	rdlong	arg01, local01
1d5b4     45 00 00 FF 
1d5b8     7C E4 85 F1 | 	sub	objptr, ##35452
1d5bc                 | ' 
1d5bc                 | ' write(text)
1d5bc     28 20 B0 FD | 	call	#_hg010b_spin2_write
1d5c0                 | ' crlf
1d5c0     24 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d5c4     A7 F0 03 F6 | 	mov	ptra, fp
1d5c8     B2 00 A0 FD | 	call	#popregs_
1d5cc                 | _printerror_ret
1d5cc     2D 00 64 FD | 	ret
1d5d0                 | 
1d5d0                 | ' 
1d5d0                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d5d0                 | ' 
1d5d0                 | ' sub startpsram
1d5d0                 | _startpsram
1d5d0     00 12 06 F6 | 	mov	arg01, #0
1d5d4     0A 14 C6 F9 | 	decod	arg02, #10
1d5d8     0B 16 06 F6 | 	mov	arg03, #11
1d5dc     07 18 06 F6 | 	mov	arg04, #7
1d5e0     0B 00 00 FF 
1d5e4     CC E4 05 F1 | 	add	objptr, ##5836
1d5e8     AC 26 B0 FD | 	call	#_psram_spin2_startx
1d5ec     2B 00 00 FF 
1d5f0     3C E5 05 F1 | 	add	objptr, ##22332
1d5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1d5f8                 | '     return $7FF00 + cog*12
1d5f8     0C E4 05 F1 | 	add	objptr, #12
1d5fc     FF 03 80 FF 
1d600     F2 00 6A FC | 	wrlong	##524032, objptr
1d604     37 00 00 FF 
1d608     14 E4 85 F1 | 	sub	objptr, ##28180
1d60c                 | _startpsram_ret
1d60c     2D 00 64 FD | 	ret
1d610                 | 
1d610                 | ' 
1d610                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d610                 | _startvideo
1d610     01 4A 05 F6 | 	mov	COUNT_, #1
1d614     A8 00 A0 FD | 	call	#pushregs_
1d618     37 00 00 FF 
1d61c     14 E4 05 F1 | 	add	objptr, ##28180
1d620     F2 18 02 FB | 	rdlong	arg04, objptr
1d624     37 00 00 FF 
1d628     14 E4 85 F1 | 	sub	objptr, ##28180
1d62c     0A 13 02 F6 | 	mov	arg01, arg02
1d630     0C 15 02 F6 | 	mov	arg02, arg04
1d634     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1d638     37 00 00 FF 
1d63c     00 E4 05 F1 | 	add	objptr, ##28160
1d640     F2 FA 61 FC | 	wrlong	result1, objptr
1d644                 | ' 
1d644                 | ' videocog=v.start(pin,mbox)
1d644                 | ' 
1d644                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d644     00 1E 06 F6 | 	mov	local01, #0
1d648     2B 00 00 FF 
1d64c     34 E5 85 F1 | 	sub	objptr, ##22324
1d650                 | LR__2360
1d650     0F 13 02 F6 | 	mov	arg01, local01
1d654     00 28 00 FF 
1d658     00 14 06 F6 | 	mov	arg02, ##5242880
1d65c     90 2A B0 FD | 	call	#_psram_spin2_setQos
1d660     01 1E 06 F1 | 	add	local01, #1
1d664     08 1E 56 F2 | 	cmps	local01, #8 wc
1d668     E4 FF 9F CD |  if_b	jmp	#LR__2360
1d66c     2B 00 00 FF 
1d670     34 E5 05 F1 | 	add	objptr, ##22324
1d674     F2 12 02 FB | 	rdlong	arg01, objptr
1d678     7A 00 02 FF 
1d67c     00 14 06 F6 | 	mov	arg02, ##67171328
1d680     2B 00 00 FF 
1d684     34 E5 85 F1 | 	sub	objptr, ##22324
1d688     64 2A B0 FD | 	call	#_psram_spin2_setQos
1d68c     0B 00 00 FF 
1d690     CC E4 85 F1 | 	sub	objptr, ##5836
1d694                 | ' psram.setQoS(videocog, $0400f400) 
1d694                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d694     F2 14 02 F6 | 	mov	arg02, objptr
1d698     00 78 04 FF 
1d69c     00 14 46 F5 | 	or	arg02, ##149946368
1d6a0     00 16 06 F6 | 	mov	arg03, #0
1d6a4     00 18 06 F6 | 	mov	arg04, #0
1d6a8     00 12 06 F6 | 	mov	arg01, #0
1d6ac     FC 3E B0 FD | 	call	#__system___basic_open
1d6b0                 | ' return videocog
1d6b0     37 00 00 FF 
1d6b4     00 E4 05 F1 | 	add	objptr, ##28160
1d6b8     F2 FA 01 FB | 	rdlong	result1, objptr
1d6bc     37 00 00 FF 
1d6c0     00 E4 85 F1 | 	sub	objptr, ##28160
1d6c4     A7 F0 03 F6 | 	mov	ptra, fp
1d6c8     B2 00 A0 FD | 	call	#popregs_
1d6cc                 | _startvideo_ret
1d6cc     2D 00 64 FD | 	ret
1d6d0                 | 
1d6d0                 | ' 
1d6d0                 | ' 
1d6d0                 | ' 
1d6d0                 | ' 
1d6d0                 | ' '' ------------------------------- Convenient psram peek/poke
1d6d0                 | ' 
1d6d0                 | ' sub pslpoke(addr as ulong,value as ulong)
1d6d0                 | _pslpoke
1d6d0     00 4A 05 F6 | 	mov	COUNT_, #0
1d6d4     A8 00 A0 FD | 	call	#pushregs_
1d6d8     08 F0 07 F1 | 	add	ptra, #8
1d6dc     A7 12 62 FC | 	wrlong	arg01, fp
1d6e0     04 4E 05 F1 | 	add	fp, #4
1d6e4     A7 14 62 FC | 	wrlong	arg02, fp
1d6e8     A7 12 02 F6 | 	mov	arg01, fp
1d6ec     04 4E 85 F1 | 	sub	fp, #4
1d6f0     A7 14 02 FB | 	rdlong	arg02, fp
1d6f4     04 16 06 F6 | 	mov	arg03, #4
1d6f8     0B 00 00 FF 
1d6fc     CC E4 05 F1 | 	add	objptr, ##5836
1d700     5C 28 B0 FD | 	call	#_psram_spin2_write
1d704     0B 00 00 FF 
1d708     CC E4 85 F1 | 	sub	objptr, ##5836
1d70c     A7 F0 03 F6 | 	mov	ptra, fp
1d710     B2 00 A0 FD | 	call	#popregs_
1d714                 | _pslpoke_ret
1d714     2D 00 64 FD | 	ret
1d718                 | 
1d718                 | ' 
1d718                 | ' sub psdpoke(addr as ulong,value as ulong)
1d718                 | _psdpoke
1d718     00 4A 05 F6 | 	mov	COUNT_, #0
1d71c     A8 00 A0 FD | 	call	#pushregs_
1d720     08 F0 07 F1 | 	add	ptra, #8
1d724     A7 12 62 FC | 	wrlong	arg01, fp
1d728     04 4E 05 F1 | 	add	fp, #4
1d72c     A7 14 62 FC | 	wrlong	arg02, fp
1d730     A7 12 02 F6 | 	mov	arg01, fp
1d734     04 4E 85 F1 | 	sub	fp, #4
1d738     A7 14 02 FB | 	rdlong	arg02, fp
1d73c     02 16 06 F6 | 	mov	arg03, #2
1d740     0B 00 00 FF 
1d744     CC E4 05 F1 | 	add	objptr, ##5836
1d748     14 28 B0 FD | 	call	#_psram_spin2_write
1d74c     0B 00 00 FF 
1d750     CC E4 85 F1 | 	sub	objptr, ##5836
1d754     A7 F0 03 F6 | 	mov	ptra, fp
1d758     B2 00 A0 FD | 	call	#popregs_
1d75c                 | _psdpoke_ret
1d75c     2D 00 64 FD | 	ret
1d760                 | 
1d760                 | ' 
1d760                 | ' sub pspoke(addr as ulong,value as ulong)
1d760                 | _pspoke
1d760     00 4A 05 F6 | 	mov	COUNT_, #0
1d764     A8 00 A0 FD | 	call	#pushregs_
1d768     08 F0 07 F1 | 	add	ptra, #8
1d76c     A7 12 62 FC | 	wrlong	arg01, fp
1d770     04 4E 05 F1 | 	add	fp, #4
1d774     A7 14 62 FC | 	wrlong	arg02, fp
1d778     A7 12 02 F6 | 	mov	arg01, fp
1d77c     04 4E 85 F1 | 	sub	fp, #4
1d780     A7 14 02 FB | 	rdlong	arg02, fp
1d784     01 16 06 F6 | 	mov	arg03, #1
1d788     0B 00 00 FF 
1d78c     CC E4 05 F1 | 	add	objptr, ##5836
1d790     CC 27 B0 FD | 	call	#_psram_spin2_write
1d794     0B 00 00 FF 
1d798     CC E4 85 F1 | 	sub	objptr, ##5836
1d79c     A7 F0 03 F6 | 	mov	ptra, fp
1d7a0     B2 00 A0 FD | 	call	#popregs_
1d7a4                 | _pspoke_ret
1d7a4     2D 00 64 FD | 	ret
1d7a8                 | 
1d7a8                 | ' 
1d7a8                 | ' function pspeek(adr as ulong) as ubyte
1d7a8                 | _pspeek
1d7a8     00 4A 05 F6 | 	mov	COUNT_, #0
1d7ac     A8 00 A0 FD | 	call	#pushregs_
1d7b0     0C F0 07 F1 | 	add	ptra, #12
1d7b4     04 4E 05 F1 | 	add	fp, #4
1d7b8     A7 12 62 FC | 	wrlong	arg01, fp
1d7bc     04 4E 05 F1 | 	add	fp, #4
1d7c0     A7 12 02 F6 | 	mov	arg01, fp
1d7c4     04 4E 85 F1 | 	sub	fp, #4
1d7c8     A7 14 02 FB | 	rdlong	arg02, fp
1d7cc     04 4E 85 F1 | 	sub	fp, #4
1d7d0     01 16 06 F6 | 	mov	arg03, #1
1d7d4     0B 00 00 FF 
1d7d8     CC E4 05 F1 | 	add	objptr, ##5836
1d7dc     E4 26 B0 FD | 	call	#_psram_spin2_read1
1d7e0     0B 00 00 FF 
1d7e4     CC E4 85 F1 | 	sub	objptr, ##5836
1d7e8                 | ' psram.read1(varptr(res),adr,1)
1d7e8                 | ' return res
1d7e8     08 4E 05 F1 | 	add	fp, #8
1d7ec     A7 FA C1 FA | 	rdbyte	result1, fp
1d7f0     08 4E 85 F1 | 	sub	fp, #8
1d7f4     A7 F0 03 F6 | 	mov	ptra, fp
1d7f8     B2 00 A0 FD | 	call	#popregs_
1d7fc                 | _pspeek_ret
1d7fc     2D 00 64 FD | 	ret
1d800                 | 
1d800                 | ' 
1d800                 | ' function pslpeek(adr as ulong) as ulong
1d800                 | _pslpeek
1d800     00 4A 05 F6 | 	mov	COUNT_, #0
1d804     A8 00 A0 FD | 	call	#pushregs_
1d808     0C F0 07 F1 | 	add	ptra, #12
1d80c     04 4E 05 F1 | 	add	fp, #4
1d810     A7 12 62 FC | 	wrlong	arg01, fp
1d814     04 4E 05 F1 | 	add	fp, #4
1d818     A7 12 02 F6 | 	mov	arg01, fp
1d81c     04 4E 85 F1 | 	sub	fp, #4
1d820     A7 14 02 FB | 	rdlong	arg02, fp
1d824     04 4E 85 F1 | 	sub	fp, #4
1d828     04 16 06 F6 | 	mov	arg03, #4
1d82c     0B 00 00 FF 
1d830     CC E4 05 F1 | 	add	objptr, ##5836
1d834     8C 26 B0 FD | 	call	#_psram_spin2_read1
1d838     0B 00 00 FF 
1d83c     CC E4 85 F1 | 	sub	objptr, ##5836
1d840                 | ' psram.read1(varptr(res),adr,4)
1d840                 | ' return res
1d840     08 4E 05 F1 | 	add	fp, #8
1d844     A7 FA 01 FB | 	rdlong	result1, fp
1d848     08 4E 85 F1 | 	sub	fp, #8
1d84c     A7 F0 03 F6 | 	mov	ptra, fp
1d850     B2 00 A0 FD | 	call	#popregs_
1d854                 | _pslpeek_ret
1d854     2D 00 64 FD | 	ret
1d858                 | 
1d858                 | ' 
1d858                 | ' function psdpeek(adr as ulong) as ulong
1d858                 | _psdpeek
1d858     00 4A 05 F6 | 	mov	COUNT_, #0
1d85c     A8 00 A0 FD | 	call	#pushregs_
1d860     0C F0 07 F1 | 	add	ptra, #12
1d864     04 4E 05 F1 | 	add	fp, #4
1d868     A7 12 62 FC | 	wrlong	arg01, fp
1d86c     04 4E 05 F1 | 	add	fp, #4
1d870     A7 12 02 F6 | 	mov	arg01, fp
1d874     04 4E 85 F1 | 	sub	fp, #4
1d878     A7 14 02 FB | 	rdlong	arg02, fp
1d87c     04 4E 85 F1 | 	sub	fp, #4
1d880     02 16 06 F6 | 	mov	arg03, #2
1d884     0B 00 00 FF 
1d888     CC E4 05 F1 | 	add	objptr, ##5836
1d88c     34 26 B0 FD | 	call	#_psram_spin2_read1
1d890     0B 00 00 FF 
1d894     CC E4 85 F1 | 	sub	objptr, ##5836
1d898                 | ' psram.read1(varptr(res),adr,2)
1d898                 | ' return res
1d898     08 4E 05 F1 | 	add	fp, #8
1d89c     A7 FA E1 FA | 	rdword	result1, fp
1d8a0     08 4E 85 F1 | 	sub	fp, #8
1d8a4     A7 F0 03 F6 | 	mov	ptra, fp
1d8a8     B2 00 A0 FD | 	call	#popregs_
1d8ac                 | _psdpeek_ret
1d8ac     2D 00 64 FD | 	ret
1d8b0                 | 
1d8b0                 | ' 
1d8b0                 | ' '' ------------------------------- USB keyboard scan to char translator
1d8b0                 | ' 
1d8b0                 | ' function scantochar(key)
1d8b0                 | _scantochar
1d8b0                 | ' 
1d8b0                 | ' select case (key shr 8) and 255
1d8b0     09 01 02 F6 | 	mov	_var01, arg01
1d8b4     08 00 C6 F0 | 	sar	_var01, #8
1d8b8     FF 00 0E F5 | 	and	_var01, #255 wz
1d8bc     24 00 90 AD |  if_e	jmp	#LR__2370
1d8c0     02 00 0E F2 | 	cmp	_var01, #2 wz
1d8c4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d8c8     30 00 90 AD |  if_e	jmp	#LR__2371
1d8cc     40 00 0E F2 | 	cmp	_var01, #64 wz
1d8d0     44 00 90 AD |  if_e	jmp	#LR__2372
1d8d4     42 00 0E F2 | 	cmp	_var01, #66 wz
1d8d8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d8dc     70 00 90 5D |  if_ne	jmp	#LR__2374
1d8e0     50 00 90 FD | 	jmp	#LR__2373
1d8e4                 | LR__2370
1d8e4     09 FB 01 F6 | 	mov	result1, arg01
1d8e8     7F FA 05 F5 | 	and	result1, #127
1d8ec     02 FA 65 F0 | 	shl	result1, #2
1d8f0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d8f4     FD FA C1 FA | 	rdbyte	result1, result1
1d8f8     54 00 90 FD | 	jmp	#_scantochar_ret
1d8fc                 | LR__2371
1d8fc     09 FB 01 F6 | 	mov	result1, arg01
1d900     7F FA 05 F5 | 	and	result1, #127
1d904     02 FA 65 F0 | 	shl	result1, #2
1d908     01 FA 05 F1 | 	add	result1, #1
1d90c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d910     FD FA C1 FA | 	rdbyte	result1, result1
1d914     38 00 90 FD | 	jmp	#_scantochar_ret
1d918                 | LR__2372
1d918     09 FB 01 F6 | 	mov	result1, arg01
1d91c     7F FA 05 F5 | 	and	result1, #127
1d920     02 FA 65 F0 | 	shl	result1, #2
1d924     02 FA 05 F1 | 	add	result1, #2
1d928     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d92c     FD FA C1 FA | 	rdbyte	result1, result1
1d930     1C 00 90 FD | 	jmp	#_scantochar_ret
1d934                 | LR__2373
1d934     09 FB 01 F6 | 	mov	result1, arg01
1d938     7F FA 05 F5 | 	and	result1, #127
1d93c     02 FA 65 F0 | 	shl	result1, #2
1d940     03 FA 05 F1 | 	add	result1, #3
1d944     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d948     FD FA C1 FA | 	rdbyte	result1, result1
1d94c     00 00 90 FD | 	jmp	#_scantochar_ret
1d950                 | LR__2374
1d950                 | _scantochar_ret
1d950     2D 00 64 FD | 	ret
1d954                 | 
1d954                 | _program
1d954     01 4A 05 F6 | 	mov	COUNT_, #1
1d958     A8 00 A0 FD | 	call	#pushregs_
1d95c     70 FC BF FD | 	call	#_startpsram
1d960     40 12 06 F6 | 	mov	arg01, #64
1d964     00 14 06 F6 | 	mov	arg02, #0
1d968     00 16 06 F6 | 	mov	arg03, #0
1d96c     A0 FC BF FD | 	call	#_startvideo
1d970     37 00 00 FF 
1d974     14 E4 05 F1 | 	add	objptr, ##28180
1d978     F2 12 02 FB | 	rdlong	arg01, objptr
1d97c     00 14 06 F6 | 	mov	arg02, #0
1d980     FB 03 00 FF 
1d984     00 17 06 F6 | 	mov	arg03, ##521984
1d988     2B 00 00 FF 
1d98c     48 E5 85 F1 | 	sub	objptr, ##22344
1d990     0C 2B B0 FD | 	call	#_audio096_spin2_start
1d994     FE 16 02 F6 | 	mov	arg03, result2
1d998     2B 00 00 FF 
1d99c     30 E5 05 F1 | 	add	objptr, ##22320
1d9a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d9a4     14 E4 05 F1 | 	add	objptr, #20
1d9a8     F2 16 62 FC | 	wrlong	arg03, objptr
1d9ac     37 00 00 FF 
1d9b0     10 E4 85 F1 | 	sub	objptr, ##28176
1d9b4     32 12 06 F6 | 	mov	arg01, #50
1d9b8     3C 34 B0 FD | 	call	#__system___waitms
1d9bc     37 00 00 FF 
1d9c0     10 E4 05 F1 | 	add	objptr, ##28176
1d9c4     F2 12 02 FB | 	rdlong	arg01, objptr
1d9c8     37 00 00 FF 
1d9cc     10 E4 85 F1 | 	sub	objptr, ##28176
1d9d0     14 12 06 F1 | 	add	arg01, #20
1d9d4     20 00 80 FF 
1d9d8     09 01 58 FC | 	wrword	##16384, arg01
1d9dc     18 28 B0 FD | 	call	#_usbnew_spin2_start
1d9e0     37 00 00 FF 
1d9e4     04 E4 05 F1 | 	add	objptr, ##28164
1d9e8     F2 FA 61 FC | 	wrlong	result1, objptr
1d9ec                 | '   mouse_limits[0] := xlim
1d9ec     0F 00 00 FF 
1d9f0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d9f4     01 00 80 FF 
1d9f8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d9fc                 | '   mouse_limits[1] := ylim
1d9fc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1da00     01 00 80 FF 
1da04     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1da08     36 00 00 FF 
1da0c     F3 E4 85 F1 | 	sub	objptr, ##27891
1da10     F2 12 02 F6 | 	mov	arg01, objptr
1da14     11 E5 85 F1 | 	sub	objptr, #273
1da18     C4 12 06 F1 | 	add	arg01, #196
1da1c                 | '   mouse_outptr := ptr
1da1c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1da20     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1da24     0F 00 00 FF 
1da28     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1da2c     0E 00 00 FF 
1da30     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1da34     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1da38     0E 00 00 FF 
1da3c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1da40     10 12 06 F6 | 	mov	arg01, #16
1da44     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1da48     10 12 06 F6 | 	mov	arg01, #16
1da4c     20 14 06 F6 | 	mov	arg02, #32
1da50     20 16 06 F6 | 	mov	arg03, #32
1da54     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1da58     09 12 C6 F9 | 	decod	arg01, #9
1da5c     2C 15 06 F6 | 	mov	arg02, #300
1da60     EC 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1da64     F2 16 02 F6 | 	mov	arg03, objptr
1da68     50 00 00 FF 
1da6c     18 E5 05 F1 | 	add	objptr, ##41240
1da70     F2 14 02 F6 | 	mov	arg02, objptr
1da74     0A 17 62 FC | 	wrlong	arg03, arg02
1da78     04 14 06 F1 | 	add	arg02, #4
1da7c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1da80     EF 14 02 F6 | 	mov	arg02, entryptr__
1da84     1E FA 05 F6 | 	mov	result1, #30
1da88     28 E4 61 FD | 	setq	objptr
1da8c     0A FB F1 FC | 	coginit	result1, arg02 wc
1da90     01 FA 65 C6 |  if_b	neg	result1, #1
1da94     04 E4 85 F1 | 	sub	objptr, #4
1da98     F2 FA 61 FC | 	wrlong	result1, objptr
1da9c     01 00 00 FF 
1daa0     90 E4 05 F1 | 	add	objptr, ##656
1daa4     F2 00 68 FC | 	wrlong	#0, objptr
1daa8     1A 00 00 FF 
1daac     70 E5 85 F1 | 	sub	objptr, ##13680
1dab0     F2 04 68 FC | 	wrlong	#2, objptr
1dab4     04 E4 05 F1 | 	add	objptr, #4
1dab8     F2 26 69 FC | 	wrlong	#147, objptr
1dabc     04 E4 05 F1 | 	add	objptr, #4
1dac0     F2 34 69 FC | 	wrlong	#154, objptr
1dac4     04 E4 05 F1 | 	add	objptr, #4
1dac8     F2 08 68 FC | 	wrlong	#4, objptr
1dacc     04 E4 85 F1 | 	sub	objptr, #4
1dad0     F2 16 02 FB | 	rdlong	arg03, objptr
1dad4     14 E4 85 F1 | 	sub	objptr, #20
1dad8     F2 16 62 FC | 	wrlong	arg03, objptr
1dadc     04 E4 05 F1 | 	add	objptr, #4
1dae0     F2 00 68 FC | 	wrlong	#0, objptr
1dae4     04 E4 05 F1 | 	add	objptr, #4
1dae8     F2 00 68 FC | 	wrlong	#0, objptr
1daec     19 00 00 FF 
1daf0     E0 E4 05 F1 | 	add	objptr, ##13024
1daf4     F2 02 68 FC | 	wrlong	#1, objptr
1daf8     01 00 00 FF 
1dafc     9C E4 05 F1 | 	add	objptr, ##668
1db00     F2 00 68 FC | 	wrlong	#0, objptr
1db04     01 00 00 FF 
1db08     00 EA 05 F1 | 	add	ptr__dat__, ##512
1db0c     08 E4 05 F1 | 	add	objptr, #8
1db10     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1db14     04 E4 85 F1 | 	sub	objptr, #4
1db18     03 00 80 FF 
1db1c     F2 3C 69 FC | 	wrlong	##1694, objptr
1db20     0C 00 00 FF 
1db24     4C E5 85 F1 | 	sub	objptr, ##6476
1db28     F2 18 68 FC | 	wrlong	#12, objptr
1db2c     45 00 00 FF 
1db30     64 E4 85 F1 | 	sub	objptr, ##35428
1db34     01 00 00 FF 
1db38     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1db3c     0C DB BF FD | 	call	#_init_commands
1db40     C8 F6 BF FD | 	call	#_init_error_strings
1db44     C4 ED BF FD | 	call	#_init_audio
1db48     80 22 BF FD | 	call	#_do_new
1db4c     37 00 00 FF 
1db50     3C E4 05 F1 | 	add	objptr, ##28220
1db54     F2 12 02 FB | 	rdlong	arg01, objptr
1db58     04 E4 85 F1 | 	sub	objptr, #4
1db5c     F2 14 02 FB | 	rdlong	arg02, objptr
1db60     37 00 00 FF 
1db64     38 E4 85 F1 | 	sub	objptr, ##28216
1db68     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1db6c     37 00 00 FF 
1db70     40 E4 05 F1 | 	add	objptr, ##28224
1db74     F2 12 02 FB | 	rdlong	arg01, objptr
1db78     37 00 00 FF 
1db7c     40 E4 85 F1 | 	sub	objptr, ##28224
1db80     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1db84                 | ' 
1db84                 | ' leading_spaces:=amount
1db84     01 00 00 FF 
1db88     B6 E4 05 F1 | 	add	objptr, ##694
1db8c     F2 04 68 FC | 	wrlong	#2, objptr
1db90     01 00 00 FF 
1db94     B6 E4 85 F1 | 	sub	objptr, ##694
1db98     89 01 00 FF 
1db9c     1F 1E 06 F6 | 	mov	local01, ##@LR__5588
1dba0     3D 12 06 F6 | 	mov	arg01, #61
1dba4     3C 14 06 F6 | 	mov	arg02, #60
1dba8     3B 16 06 F6 | 	mov	arg03, #59
1dbac     3A 18 06 F6 | 	mov	arg04, #58
1dbb0     10 7A B0 FD | 	call	#__system___vfs_open_sdcardx
1dbb4     FD 14 02 F6 | 	mov	arg02, result1
1dbb8     0F 13 02 F6 | 	mov	arg01, local01
1dbbc     10 33 B0 FD | 	call	#__system___mount
1dbc0     89 01 00 FF 
1dbc4     23 12 06 F6 | 	mov	arg01, ##@LR__5589
1dbc8     C4 35 B0 FD | 	call	#__system___chdir
1dbcc     89 01 00 FF 
1dbd0     2B 1E 06 F6 | 	mov	local01, ##@LR__5590
1dbd4     4A 00 00 FF 
1dbd8     90 E4 05 F1 | 	add	objptr, ##38032
1dbdc     F2 1E 62 FC | 	wrlong	local01, objptr
1dbe0     13 00 00 FF 
1dbe4     5C E4 85 F1 | 	sub	objptr, ##9820
1dbe8     F2 12 02 FB | 	rdlong	arg01, objptr
1dbec     37 00 00 FF 
1dbf0     34 E4 85 F1 | 	sub	objptr, ##28212
1dbf4     01 12 66 F0 | 	shl	arg01, #1
1dbf8     01 14 06 F6 | 	mov	arg02, #1
1dbfc     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dc00                 | ' init_commands
1dc00                 | ' init_error_strings
1dc00                 | ' init_audio
1dc00                 | ' do_new
1dc00                 | ' cls(ink, paper)
1dc00                 | ' v.setfontfamily(font) 				' use ST Mono font
1dc00                 | ' v.setleadingspaces(2)
1dc00                 | ' mount "/sd", _vfs_open_sdcard()
1dc00                 | ' chdir "/sd/bas"
1dc00                 | ' currentdir$="/sd/bas"
1dc00                 | ' position 2*editor_spaces,1 : print ver$
1dc00     00 12 06 F6 | 	mov	arg01, #0
1dc04     60 89 B0 FD | 	call	#__system___getiolock_0540
1dc08     FD 12 02 F6 | 	mov	arg01, result1
1dc0c     F4 2E B0 FD | 	call	#__system___lockmem
1dc10     18 00 00 FF 
1dc14     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1dc18     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1dc1c     18 00 00 FF 
1dc20     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1dc24     00 12 06 F6 | 	mov	arg01, #0
1dc28     00 16 06 F6 | 	mov	arg03, #0
1dc2c     C8 3B B0 FD | 	call	#__system___basic_print_string
1dc30     00 12 06 F6 | 	mov	arg01, #0
1dc34     0A 14 06 F6 | 	mov	arg02, #10
1dc38     00 16 06 F6 | 	mov	arg03, #0
1dc3c     60 3B B0 FD | 	call	#__system___basic_print_char
1dc40     00 12 06 F6 | 	mov	arg01, #0
1dc44     20 89 B0 FD | 	call	#__system___getiolock_0540
1dc48     FD 00 68 FC | 	wrlong	#0, result1
1dc4c     51 00 00 FF 
1dc50     A8 E5 05 F1 | 	add	objptr, ##41896
1dc54     F2 12 02 FB | 	rdlong	arg01, objptr
1dc58     0E 00 00 FF 
1dc5c     4C E5 85 F1 | 	sub	objptr, ##7500
1dc60     F2 1E 02 FB | 	rdlong	local01, objptr
1dc64     43 00 00 FF 
1dc68     5C E4 85 F1 | 	sub	objptr, ##34396
1dc6c     0F 13 82 F1 | 	sub	arg01, local01
1dc70     00 14 06 F6 | 	mov	arg02, #0
1dc74     0A 16 06 F6 | 	mov	arg03, #10
1dc78     58 51 B0 FD | 	call	#__system__Number_S
1dc7c     FD 12 02 F6 | 	mov	arg01, result1
1dc80     89 01 00 FF 
1dc84     33 14 06 F6 | 	mov	arg02, ##@LR__5591
1dc88     D4 2E B0 FD | 	call	#__system___string_concat
1dc8c     FD 1E 02 F6 | 	mov	local01, result1
1dc90     50 00 00 FF 
1dc94     0C E5 05 F1 | 	add	objptr, ##41228
1dc98     F2 1E 62 FC | 	wrlong	local01, objptr
1dc9c     50 00 00 FF 
1dca0     0C E5 85 F1 | 	sub	objptr, ##41228
1dca4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1dca4     00 12 06 F6 | 	mov	arg01, #0
1dca8     BC 88 B0 FD | 	call	#__system___getiolock_0540
1dcac     FD 12 02 F6 | 	mov	arg01, result1
1dcb0     50 2E B0 FD | 	call	#__system___lockmem
1dcb4     50 00 00 FF 
1dcb8     0C E5 05 F1 | 	add	objptr, ##41228
1dcbc     F2 14 02 FB | 	rdlong	arg02, objptr
1dcc0     50 00 00 FF 
1dcc4     0C E5 85 F1 | 	sub	objptr, ##41228
1dcc8     00 12 06 F6 | 	mov	arg01, #0
1dccc     00 16 06 F6 | 	mov	arg03, #0
1dcd0     24 3B B0 FD | 	call	#__system___basic_print_string
1dcd4     00 12 06 F6 | 	mov	arg01, #0
1dcd8     0A 14 06 F6 | 	mov	arg02, #10
1dcdc     00 16 06 F6 | 	mov	arg03, #0
1dce0     BC 3A B0 FD | 	call	#__system___basic_print_char
1dce4     00 12 06 F6 | 	mov	arg01, #0
1dce8     7C 88 B0 FD | 	call	#__system___getiolock_0540
1dcec     FD 00 68 FC | 	wrlong	#0, result1
1dcf0     37 00 00 FF 
1dcf4     34 E4 05 F1 | 	add	objptr, ##28212
1dcf8     F2 12 02 FB | 	rdlong	arg01, objptr
1dcfc     37 00 00 FF 
1dd00     34 E4 85 F1 | 	sub	objptr, ##28212
1dd04     01 12 66 F0 | 	shl	arg01, #1
1dd08     04 14 06 F6 | 	mov	arg02, #4
1dd0c     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dd10                 | ' position 2*editor_spaces,4 : print "Ready"
1dd10     00 12 06 F6 | 	mov	arg01, #0
1dd14     50 88 B0 FD | 	call	#__system___getiolock_0540
1dd18     FD 12 02 F6 | 	mov	arg01, result1
1dd1c     E4 2D B0 FD | 	call	#__system___lockmem
1dd20     89 01 00 FF 
1dd24     45 14 06 F6 | 	mov	arg02, ##@LR__5592
1dd28     00 12 06 F6 | 	mov	arg01, #0
1dd2c     00 16 06 F6 | 	mov	arg03, #0
1dd30     C4 3A B0 FD | 	call	#__system___basic_print_string
1dd34     00 12 06 F6 | 	mov	arg01, #0
1dd38     0A 14 06 F6 | 	mov	arg02, #10
1dd3c     00 16 06 F6 | 	mov	arg03, #0
1dd40     5C 3A B0 FD | 	call	#__system___basic_print_char
1dd44     00 12 06 F6 | 	mov	arg01, #0
1dd48     1C 88 B0 FD | 	call	#__system___getiolock_0540
1dd4c     FD 00 68 FC | 	wrlong	#0, result1
1dd50     00 14 06 F6 | 	mov	arg02, #0
1dd54     01 14 D6 F7 | 	test	arg02, #1 wc
1dd58     5A 4C 64 FD | 	drvc	#38
1dd5c     01 14 D6 F7 | 	test	arg02, #1 wc
1dd60     5A 4E 64 FD | 	drvc	#39
1dd64     89 01 00 FF 
1dd68     4B 1E 06 F6 | 	mov	local01, ##@LR__5593
1dd6c     51 00 00 FF 
1dd70     D4 E5 05 F1 | 	add	objptr, ##41940
1dd74     F2 1E 62 FC | 	wrlong	local01, objptr
1dd78     04 E4 05 F1 | 	add	objptr, #4
1dd7c     FF FF FF FF 
1dd80     F2 FE 6B FC | 	wrlong	##-1, objptr
1dd84     51 00 00 FF 
1dd88     D8 E5 85 F1 | 	sub	objptr, ##41944
1dd8c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dd8c                 | ' loadname="noname.bas"
1dd8c                 | ' do_insert=-1
1dd8c                 | ' 
1dd8c                 | ' '-------------------------------------------------------------------------------------------------------- 
1dd8c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dd8c                 | ' '--------------------------------------------------------------------------------------------------------
1dd8c                 | ' 
1dd8c                 | ' do
1dd8c                 | LR__2380
1dd8c     01 12 06 F6 | 	mov	arg01, #1
1dd90     24 14 B0 FD | 	call	#_hg010b_spin2_waitvbl
1dd94     6C 2A BE FD | 	call	#_edit
1dd98     FD 1E 02 F6 | 	mov	local01, result1
1dd9c     37 00 00 FF 
1dda0     1C E4 05 F1 | 	add	objptr, ##28188
1dda4     F2 1E 62 FC | 	wrlong	local01, objptr
1dda8     37 00 00 FF 
1ddac     1C E4 85 F1 | 	sub	objptr, ##28188
1ddb0     C4 38 BE FD | 	call	#_interpret
1ddb4     89 01 00 FF 
1ddb8     56 1E 06 F6 | 	mov	local01, ##@LR__5594
1ddbc     37 00 00 FF 
1ddc0     1C E4 05 F1 | 	add	objptr, ##28188
1ddc4     F2 1E 62 FC | 	wrlong	local01, objptr
1ddc8     37 00 00 FF 
1ddcc     1C E4 85 F1 | 	sub	objptr, ##28188
1ddd0     B8 FF 9F FD | 	jmp	#LR__2380
1ddd4     A7 F0 03 F6 | 	mov	ptra, fp
1ddd8     B2 00 A0 FD | 	call	#popregs_
1dddc                 | _program_ret
1dddc     2D 00 64 FD | 	ret
1dde0                 | 
1dde0                 | ' '' this is not a main program.
1dde0                 | ' 
1dde0                 | ' '****************************************************************************************************************
1dde0                 | ' '                                                                                                             	*
1dde0                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1dde0                 | ' '                                                                                                            	*
1dde0                 | ' ' base - HDMI base pin												*
1dde0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1dde0                 | ' '														*
1dde0                 | ' '														*
1dde0                 | ' '****************************************************************************************************************
1dde0                 | ' 
1dde0                 | ' pub start(base,mb):result |i
1dde0                 | _hg010b_spin2_start
1dde0                 | ' 
1dde0                 | ' '--------------------------- initialize pointers and variables
1dde0                 | ' 
1dde0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1dde0     34 E4 05 F1 | 	add	objptr, #52
1dde4     F2 FA 01 F6 | 	mov	result1, objptr
1dde8     28 E4 85 F1 | 	sub	objptr, #40
1ddec     F2 FA 61 FC | 	wrlong	result1, objptr
1ddf0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1ddf0                 | ' hdmibase:=base							' HDMI base pin, 8*n
1ddf0     18 E4 05 F1 | 	add	objptr, #24
1ddf4     F2 12 62 FC | 	wrlong	arg01, objptr
1ddf8                 | ' mailbox_ptr:=mb		
1ddf8     04 E4 05 F1 | 	add	objptr, #4
1ddfc     F2 14 62 FC | 	wrlong	arg02, objptr
1de00                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1de00     C1 E5 05 F1 | 	add	objptr, #449
1de04     F2 14 62 FC | 	wrlong	arg02, objptr
1de08                 | ' sprite_ptr:=@spr1ptr
1de08     D8 E4 85 F1 | 	sub	objptr, #216
1de0c     F2 FA 01 F6 | 	mov	result1, objptr
1de10     E5 E4 85 F1 | 	sub	objptr, #229
1de14     F2 FA 61 FC | 	wrlong	result1, objptr
1de18                 | ' 
1de18                 | ' 		'
1de18                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1de18     E5 E4 05 F1 | 	add	objptr, #229
1de1c     F2 FA 01 FB | 	rdlong	result1, objptr
1de20     D0 FA 05 F1 | 	add	result1, #208
1de24     FD 10 58 FC | 	wrword	#8, result1
1de28                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1de28     F2 16 02 FB | 	rdlong	arg03, objptr
1de2c     D2 16 06 F1 | 	add	arg03, #210
1de30     0B 21 58 FC | 	wrword	#16, arg03
1de34                 | ' leading_spaces:=0				'
1de34     A5 E5 05 F1 | 	add	objptr, #421
1de38     F2 00 68 FC | 	wrlong	#0, objptr
1de3c                 | ' 
1de3c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1de3c     99 E4 85 F1 | 	sub	objptr, #153
1de40     00 00 A0 FF 
1de44     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1de48                 | ' emptydl[1]:=0
1de48     04 E4 05 F1 | 	add	objptr, #4
1de4c     F2 00 68 FC | 	wrlong	#0, objptr
1de50                 | ' 
1de50                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1de50                 | ' 
1de50                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1de50     28 E5 85 F1 | 	sub	objptr, #296
1de54     F2 02 68 FC | 	wrlong	#1, objptr
1de58                 | ' if s_debug<>0
1de58                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1de58     20 00 80 FF 
1de5c     F2 00 68 FC | 	wrlong	##16384, objptr
1de60     F9 E4 85 F1 | 	sub	objptr, #249
1de64                 | ' setmode()							' set the mode, see below
1de64     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1de68                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1de68     49 E4 05 F1 | 	add	objptr, #73
1de6c     F2 FA 01 F6 | 	mov	result1, objptr
1de70     35 E4 85 F1 | 	sub	objptr, #53
1de74     F2 FA 61 FC | 	wrlong	result1, objptr
1de78                 | ' cursor_ptr:=@cursor_x						
1de78     28 E4 05 F1 | 	add	objptr, #40
1de7c     F2 16 02 F6 | 	mov	arg03, objptr
1de80     2C E4 85 F1 | 	sub	objptr, #44
1de84     F2 16 62 FC | 	wrlong	arg03, objptr
1de88                 | ' fontnum:=0  							' start with a PC type font 
1de88     55 E4 05 F1 | 	add	objptr, #85
1de8c     F2 00 68 FC | 	wrlong	#0, objptr
1de90                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1de90     1C E4 05 F1 | 	add	objptr, #28
1de94     F2 12 02 F6 | 	mov	arg01, objptr
1de98     81 E4 85 F1 | 	sub	objptr, #129
1de9c     10 00 00 FF 
1dea0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1dea4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dea8     10 00 00 FF 
1deac     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1deb0     10 16 06 F6 | 	mov	arg03, #16
1deb4     6C 2B B0 FD | 	call	#__system____builtin_memmove
1deb8                 | ' leading_spaces:=0
1deb8     01 00 00 FF 
1debc     B6 E4 05 F1 | 	add	objptr, ##694
1dec0     F2 00 68 FC | 	wrlong	#0, objptr
1dec4     01 00 00 FF 
1dec8     B6 E4 85 F1 | 	sub	objptr, ##694
1decc                 | ' '---------------------------- initialize a cursor (MSDOS type)
1decc                 | ' 
1decc                 | ' initcursor(154)
1decc     9A 12 06 F6 | 	mov	arg01, #154
1ded0     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1ded4                 | ' 
1ded4                 | ' '---------------------------- start the cog
1ded4                 | ' 
1ded4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1ded4     10 00 00 FF 
1ded8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dedc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dee0     10 00 00 FF 
1dee4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1dee8     14 E4 05 F1 | 	add	objptr, #20
1deec     10 FA 05 F6 | 	mov	result1, #16
1def0     28 E4 61 FD | 	setq	objptr
1def4     0A FB F1 FC | 	coginit	result1, arg02 wc
1def8     01 FA 65 C6 |  if_b	neg	result1, #1
1defc     1C E4 05 F1 | 	add	objptr, #28
1df00     F2 FA 61 FC | 	wrlong	result1, objptr
1df04     30 E4 85 F1 | 	sub	objptr, #48
1df08                 | ' waitms(40)							' wait for stabilize
1df08     28 12 06 F6 | 	mov	arg01, #40
1df0c     E8 2E B0 FD | 	call	#__system___waitms
1df10                 | ' return cog							' return the driver's cog #
1df10     30 E4 05 F1 | 	add	objptr, #48
1df14     F2 FA 01 FB | 	rdlong	result1, objptr
1df18     30 E4 85 F1 | 	sub	objptr, #48
1df1c                 | _hg010b_spin2_start_ret
1df1c     2D 00 64 FD | 	ret
1df20                 | 
1df20                 | ' 
1df20                 | ' 
1df20                 | ' '**************************************************************************************************************** 
1df20                 | ' '                                                                                                             	*
1df20                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1df20                 | ' '  Mode number - see start() above or bits below								*
1df20                 | ' '                                                                                                             	*
1df20                 | ' '****************************************************************************************************************
1df20                 | ' 
1df20                 | ' '---------------------------- initialize a cursor (MSDOS type)
1df20                 | ' pub initcursor(color) |i
1df20                 | _hg010b_spin2_initcursor
1df20     03 4A 05 F6 | 	mov	COUNT_, #3
1df24     A8 00 A0 FD | 	call	#pushregs_
1df28     09 1F 02 F6 | 	mov	local01, arg01
1df2c                 | ' 
1df2c                 | ' cursor_x:=0							' place the cursor at 0:0
1df2c     3C E4 05 F1 | 	add	objptr, #60
1df30     F2 00 58 FC | 	wrword	#0, objptr
1df34                 | ' cursor_y:=0
1df34     02 E4 05 F1 | 	add	objptr, #2
1df38     F2 00 48 FC | 	wrbyte	#0, objptr
1df3c                 | ' repeat i from 0 to 111
1df3c     00 20 06 F6 | 	mov	local02, #0
1df40     F8 E5 05 F1 | 	add	objptr, #504
1df44     97 1A 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1df48                 | LR__2390
1df48                 | '   cursor[i]:=0
1df48     10 23 02 F6 | 	mov	local03, local02
1df4c     F2 22 02 F1 | 	add	local03, objptr
1df50     11 01 48 FC | 	wrbyte	#0, local03
1df54     01 20 06 F1 | 	add	local02, #1
1df58     70 20 56 F2 | 	cmps	local02, #112 wc
1df5c     E8 FF 9F CD |  if_b	jmp	#LR__2390
1df60                 | ' repeat i from 112 to 127
1df60     70 20 06 F6 | 	mov	local02, #112
1df64                 | LR__2391
1df64                 | '   cursor[i]:=color  
1df64     10 23 02 F6 | 	mov	local03, local02
1df68     F2 22 02 F1 | 	add	local03, objptr
1df6c     11 1F 42 FC | 	wrbyte	local01, local03
1df70     01 20 06 F1 | 	add	local02, #1
1df74     80 20 16 F2 | 	cmp	local02, #128 wc
1df78     E8 FF 9F CD |  if_b	jmp	#LR__2391
1df7c                 | LR__2392
1df7c                 | ' 'repeat i from 0 to 127
1df7c                 | ' '  if ((i/8)//2)
1df7c                 | ' '    cursor[i]:=15
1df7c                 | ' '  else
1df7c                 | ' '    cursor[i]:=0
1df7c                 | ' '  if i>=120    
1df7c                 | ' '    cursor[i]:=40
1df7c                 | ' setspriteptr(17,@cursor)
1df7c     F2 14 02 F6 | 	mov	arg02, objptr
1df80     01 00 00 FF 
1df84     36 E4 85 F1 | 	sub	objptr, ##566
1df88     11 12 06 F6 | 	mov	arg01, #17
1df8c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1df90                 | ' setspritesize(17,8,16)
1df90     11 12 06 F6 | 	mov	arg01, #17
1df94     08 14 06 F6 | 	mov	arg02, #8
1df98     10 16 06 F6 | 	mov	arg03, #16
1df9c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1dfa0                 | ' setspritepos(17,0,0)
1dfa0     11 12 06 F6 | 	mov	arg01, #17
1dfa4     00 14 06 F6 | 	mov	arg02, #0
1dfa8     00 16 06 F6 | 	mov	arg03, #0
1dfac     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1dfb0                 | ' cursorshape:=14
1dfb0     0B 00 00 FF 
1dfb4     C6 E4 05 F1 | 	add	objptr, ##5830
1dfb8     F2 1C 68 FC | 	wrlong	#14, objptr
1dfbc                 | ' cursorcolor:=color
1dfbc     04 E4 85 F1 | 	sub	objptr, #4
1dfc0     F2 1E 62 FC | 	wrlong	local01, objptr
1dfc4     0B 00 00 FF 
1dfc8     C2 E4 85 F1 | 	sub	objptr, ##5826
1dfcc     A7 F0 03 F6 | 	mov	ptra, fp
1dfd0     B2 00 A0 FD | 	call	#popregs_
1dfd4                 | _hg010b_spin2_initcursor_ret
1dfd4     2D 00 64 FD | 	ret
1dfd8                 | 
1dfd8                 | ' 
1dfd8                 | ' pub setcursorshape(shape) | i
1dfd8                 | _hg010b_spin2_setcursorshape
1dfd8                 | ' 
1dfd8                 | ' cursorshape:=shape
1dfd8     0B 00 00 FF 
1dfdc     C6 E4 05 F1 | 	add	objptr, ##5830
1dfe0     F2 12 62 FC | 	wrlong	arg01, objptr
1dfe4                 | ' repeat i from 0 to (8*cursorshape)-1
1dfe4     00 00 06 F6 | 	mov	_var01, #0
1dfe8     09 03 02 F6 | 	mov	_var02, arg01
1dfec     03 02 66 F0 | 	shl	_var02, #3
1dff0     01 02 86 F1 | 	sub	_var02, #1
1dff4     00 02 56 F2 | 	cmps	_var02, #0 wc
1dff8     01 04 86 F6 | 	negc	_var03, #1
1dffc     02 07 02 F6 | 	mov	_var04, _var03
1e000     02 03 02 F1 | 	add	_var02, _var03
1e004     0A 00 00 FF 
1e008     90 E4 85 F1 | 	sub	objptr, ##5264
1e00c     97 0C 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1e010                 | LR__2400
1e010                 | '   cursor[i]:=0
1e010     00 05 02 F6 | 	mov	_var03, _var01
1e014     F2 04 02 F1 | 	add	_var03, objptr
1e018     02 01 48 FC | 	wrbyte	#0, _var03
1e01c     03 01 02 F1 | 	add	_var01, _var04
1e020     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e024     E8 FF 9F 5D |  if_ne	jmp	#LR__2400
1e028                 | LR__2401
1e028                 | ' repeat i from 8*cursorshape to 127
1e028     0A 00 00 FF 
1e02c     90 E4 05 F1 | 	add	objptr, ##5264
1e030     F2 06 02 FB | 	rdlong	_var04, objptr
1e034     03 01 02 F6 | 	mov	_var01, _var04
1e038     03 00 66 F0 | 	shl	_var01, #3
1e03c     0B 00 00 FF 
1e040     C6 E4 85 F1 | 	sub	objptr, ##5830
1e044     03 06 66 F0 | 	shl	_var04, #3
1e048     80 06 56 F2 | 	cmps	_var04, #128 wc
1e04c     01 04 A6 F6 | 	negnc	_var03, #1
1e050     7F 02 06 F6 | 	mov	_var02, #127
1e054     02 03 02 F1 | 	add	_var02, _var03
1e058     97 1A 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1e05c                 | LR__2402
1e05c                 | '   cursor[i]:=cursorcolor
1e05c     00 07 02 F6 | 	mov	_var04, _var01
1e060     01 00 00 FF 
1e064     36 E4 05 F1 | 	add	objptr, ##566
1e068     F2 06 02 F1 | 	add	_var04, objptr
1e06c     0A 00 00 FF 
1e070     8C E4 05 F1 | 	add	objptr, ##5260
1e074     F2 12 02 FB | 	rdlong	arg01, objptr
1e078     0B 00 00 FF 
1e07c     C2 E4 85 F1 | 	sub	objptr, ##5826
1e080     03 13 42 FC | 	wrbyte	arg01, _var04
1e084     02 01 02 F1 | 	add	_var01, _var03
1e088     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e08c     CC FF 9F 5D |  if_ne	jmp	#LR__2402
1e090                 | LR__2403
1e090                 | _hg010b_spin2_setcursorshape_ret
1e090     2D 00 64 FD | 	ret
1e094                 | 
1e094                 | ' 
1e094                 | ' pub setcursorcolor(color) | i
1e094                 | _hg010b_spin2_setcursorcolor
1e094                 | ' 
1e094                 | ' cursorcolor:=color
1e094     0B 00 00 FF 
1e098     C2 E4 05 F1 | 	add	objptr, ##5826
1e09c     F2 12 62 FC | 	wrlong	arg01, objptr
1e0a0                 | ' repeat i from 0 to (8*cursorshape)-1
1e0a0     00 12 06 F6 | 	mov	arg01, #0
1e0a4     04 E4 05 F1 | 	add	objptr, #4
1e0a8     F2 00 02 FB | 	rdlong	_var01, objptr
1e0ac     03 00 66 F0 | 	shl	_var01, #3
1e0b0     01 00 86 F1 | 	sub	_var01, #1
1e0b4     00 00 56 F2 | 	cmps	_var01, #0 wc
1e0b8     01 02 86 F6 | 	negc	_var02, #1
1e0bc     01 05 02 F6 | 	mov	_var03, _var02
1e0c0     01 01 02 F1 | 	add	_var01, _var02
1e0c4     0A 00 00 FF 
1e0c8     90 E4 85 F1 | 	sub	objptr, ##5264
1e0cc     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1e0d0                 | LR__2410
1e0d0                 | '   cursor[i]:=0
1e0d0     09 03 02 F6 | 	mov	_var02, arg01
1e0d4     F2 02 02 F1 | 	add	_var02, objptr
1e0d8     01 01 48 FC | 	wrbyte	#0, _var02
1e0dc     02 13 02 F1 | 	add	arg01, _var03
1e0e0     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e0e4     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1e0e8                 | LR__2411
1e0e8                 | ' repeat i from 8*cursorshape to 127
1e0e8     0A 00 00 FF 
1e0ec     90 E4 05 F1 | 	add	objptr, ##5264
1e0f0     F2 04 02 FB | 	rdlong	_var03, objptr
1e0f4     02 13 02 F6 | 	mov	arg01, _var03
1e0f8     03 12 66 F0 | 	shl	arg01, #3
1e0fc     0B 00 00 FF 
1e100     C6 E4 85 F1 | 	sub	objptr, ##5830
1e104     03 04 66 F0 | 	shl	_var03, #3
1e108     80 04 56 F2 | 	cmps	_var03, #128 wc
1e10c     01 02 A6 F6 | 	negnc	_var02, #1
1e110     7F 00 06 F6 | 	mov	_var01, #127
1e114     01 01 02 F1 | 	add	_var01, _var02
1e118     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1e11c                 | LR__2412
1e11c                 | '   cursor[i]:=cursorcolor
1e11c     09 05 02 F6 | 	mov	_var03, arg01
1e120     01 00 00 FF 
1e124     36 E4 05 F1 | 	add	objptr, ##566
1e128     F2 04 02 F1 | 	add	_var03, objptr
1e12c     0A 00 00 FF 
1e130     8C E4 05 F1 | 	add	objptr, ##5260
1e134     F2 06 02 FB | 	rdlong	_var04, objptr
1e138     0B 00 00 FF 
1e13c     C2 E4 85 F1 | 	sub	objptr, ##5826
1e140     02 07 42 FC | 	wrbyte	_var04, _var03
1e144     01 13 02 F1 | 	add	arg01, _var02
1e148     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e14c     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1e150                 | LR__2413
1e150                 | _hg010b_spin2_setcursorcolor_ret
1e150     2D 00 64 FD | 	ret
1e154                 | 
1e154                 | '   
1e154                 | '   
1e154                 | '   
1e154                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1e154                 | _hg010b_spin2_setmode
1e154     02 4A 05 F6 | 	mov	COUNT_, #2
1e158     A8 00 A0 FD | 	call	#pushregs_
1e15c                 | ' 
1e15c                 | ' 
1e15c                 | ' dl_ptr:=@emptydl[0]
1e15c     01 00 00 FF 
1e160     1D E4 05 F1 | 	add	objptr, ##541
1e164     F2 1A 02 F6 | 	mov	arg05, objptr
1e168     FD E5 85 F1 | 	sub	objptr, #509
1e16c     F2 1A 62 FC | 	wrlong	arg05, objptr
1e170                 | ' 
1e170                 | ' if cog>0 
1e170     10 E4 05 F1 | 	add	objptr, #16
1e174     F2 1A 02 FB | 	rdlong	arg05, objptr
1e178     30 E4 85 F1 | 	sub	objptr, #48
1e17c     01 1A 56 F2 | 	cmps	arg05, #1 wc
1e180                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1e180     01 12 06 36 |  if_ae	mov	arg01, #1
1e184     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1e188                 | ' xres:=1024
1e188     01 00 00 FF 
1e18c     26 E4 05 F1 | 	add	objptr, ##550
1e190     02 00 80 FF 
1e194     F2 00 68 FC | 	wrlong	##1024, objptr
1e198                 | ' yres:=600
1e198     04 E4 05 F1 | 	add	objptr, #4
1e19c     01 00 80 FF 
1e1a0     F2 B0 68 FC | 	wrlong	##600, objptr
1e1a4                 | ' ppl:=(timings[3])
1e1a4     10 00 00 FF 
1e1a8     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e1ac     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e1b0     51 E5 85 F1 | 	sub	objptr, #337
1e1b4     F2 1A 62 FC | 	wrlong	arg05, objptr
1e1b8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e1b8     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e1bc     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e1c0     01 1E 66 F0 | 	shl	local01, #1
1e1c4     80 E4 85 F1 | 	sub	objptr, #128
1e1c8     F2 1E 62 FC | 	wrlong	local01, objptr
1e1cc                 | ' cpl1:=cpl '' todo remove
1e1cc     04 E4 05 F1 | 	add	objptr, #4
1e1d0     F2 1E 62 FC | 	wrlong	local01, objptr
1e1d4                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e1d4     02 00 00 FF 
1e1d8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e1dc     41 E4 85 F1 | 	sub	objptr, #65
1e1e0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e1e4                 | ' repeat i from 0 to 3
1e1e4     00 20 06 F6 | 	mov	local02, #0
1e1e8     02 00 00 FF 
1e1ec     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e1f0     08 E4 05 F1 | 	add	objptr, #8
1e1f4     97 20 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e1f8                 | LR__2420
1e1f8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e1f8     10 1F 02 F6 | 	mov	local01, local02
1e1fc     02 1E 66 F0 | 	shl	local01, #2
1e200     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e204     F2 1A 02 FB | 	rdlong	arg05, objptr
1e208     11 1A 66 F0 | 	shl	arg05, #17
1e20c     0F 1F 02 FB | 	rdlong	local01, local01
1e210     0D 1F 02 F1 | 	add	local01, arg05
1e214     80 40 38 FF 
1e218     00 1E 06 F1 | 	add	local01, ##1887502336
1e21c     10 1B 02 F6 | 	mov	arg05, local02
1e220     02 1A 66 F0 | 	shl	arg05, #2
1e224     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e228     0D 1F 62 FC | 	wrlong	local01, arg05
1e22c     01 20 06 F1 | 	add	local02, #1
1e230     04 20 56 F2 | 	cmps	local02, #4 wc
1e234     C0 FF 9F CD |  if_b	jmp	#LR__2420
1e238                 | LR__2421
1e238     24 E4 85 F1 | 	sub	objptr, #36
1e23c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e23c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e240     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e244     14 1E 66 FC | 	wrlong	local01, #20
1e248                 | ' hubset(timings[10])
1e248     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e24c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e250     10 00 00 FF 
1e254     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e258     00 12 62 FD | 	hubset	arg01
1e25c                 | ' waitms(1)                                                   	' wait for stabilization
1e25c     01 12 06 F6 | 	mov	arg01, #1
1e260     94 2B B0 FD | 	call	#__system___waitms
1e264     10 00 00 FF 
1e268     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e26c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e270     61 E4 05 F1 | 	add	objptr, #97
1e274     F2 20 62 FC | 	wrlong	local02, objptr
1e278     10 1F 52 F6 | 	abs	local01, local02 wc
1e27c     04 1E 46 F0 | 	shr	local01, #4
1e280     0F 1F 82 F6 | 	negc	local01, local01
1e284     9C E4 05 F1 | 	add	objptr, #156
1e288     F2 1E 62 FC | 	wrlong	local01, objptr
1e28c     A4 E4 85 F1 | 	sub	objptr, #164
1e290     F2 20 02 FB | 	rdlong	local02, objptr
1e294     08 E4 05 F1 | 	add	objptr, #8
1e298     F2 1E 02 FB | 	rdlong	local01, objptr
1e29c     0F 21 02 FD | 	qmul	local02, local01
1e2a0                 | ' lines:=timings[11]
1e2a0                 | ' t_lines:=lines/16
1e2a0                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e2a0     29 E4 85 F1 | 	sub	objptr, #41
1e2a4     19 1E C6 F9 | 	decod	local01, #25
1e2a8     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e2ac     18 20 62 FD | 	getqx	local02
1e2b0     F2 20 62 FC | 	wrlong	local02, objptr
1e2b4     38 E4 85 F1 | 	sub	objptr, #56
1e2b8     02 20 66 F0 | 	shl	local02, #2
1e2bc     10 1F 82 F1 | 	sub	local01, local02
1e2c0     F2 1E 62 FC | 	wrlong	local01, objptr
1e2c4     FD E4 05 F1 | 	add	objptr, #253
1e2c8     F2 20 02 FB | 	rdlong	local02, objptr
1e2cc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e2d0     0D 21 02 FD | 	qmul	local02, arg05
1e2d4                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e2d4                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e2d4     F9 E4 85 F1 | 	sub	objptr, #249
1e2d8                 | ' mode_ptr:=@timings						' set pointers to timings
1e2d8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e2dc                 | ' graphmode:=1024+512+192+48							' det global variable
1e2dc                 | ' makedl(graphmode)							' make a DL for the mode
1e2dc     03 00 00 FF 
1e2e0     F0 12 06 F6 | 	mov	arg01, ##1776
1e2e4     18 20 62 FD | 	getqx	local02
1e2e8     10 1F 82 F1 | 	sub	local01, local02
1e2ec     F2 1E 62 FC | 	wrlong	local01, objptr
1e2f0     14 E4 05 F1 | 	add	objptr, #20
1e2f4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e2f8     79 E4 05 F1 | 	add	objptr, #121
1e2fc     03 00 80 FF 
1e300     F2 E0 69 FC | 	wrlong	##1776, objptr
1e304     91 E4 85 F1 | 	sub	objptr, #145
1e308     10 00 00 FF 
1e30c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e310     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e314                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e314     F2 1E 02 FB | 	rdlong	local01, objptr
1e318     DD E4 05 F1 | 	add	objptr, #221
1e31c     F2 1E 62 FC | 	wrlong	local01, objptr
1e320                 | ' s_font_ptr:=font_ptr
1e320     D5 E4 85 F1 | 	sub	objptr, #213
1e324     F2 1E 02 FB | 	rdlong	local01, objptr
1e328     D9 E4 05 F1 | 	add	objptr, #217
1e32c     F2 1E 62 FC | 	wrlong	local01, objptr
1e330                 | ' s_lines:=lines
1e330     80 E4 85 F1 | 	sub	objptr, #128
1e334     F2 1E 02 FB | 	rdlong	local01, objptr
1e338     84 E4 05 F1 | 	add	objptr, #132
1e33c     F2 1E 62 FC | 	wrlong	local01, objptr
1e340                 | ' s_buflen:=buflen
1e340     AD E4 85 F1 | 	sub	objptr, #173
1e344     F2 1E 02 FB | 	rdlong	local01, objptr
1e348     B5 E4 05 F1 | 	add	objptr, #181
1e34c     F2 1E 62 FC | 	wrlong	local01, objptr
1e350                 | ' s_cpl:=cpl
1e350     94 E4 85 F1 | 	sub	objptr, #148
1e354     F2 1E 02 FB | 	rdlong	local01, objptr
1e358     90 E4 05 F1 | 	add	objptr, #144
1e35c     F2 1E 62 FC | 	wrlong	local01, objptr
1e360                 | ' s_cpl1:=cpl
1e360     90 E4 85 F1 | 	sub	objptr, #144
1e364     F2 1E 02 FB | 	rdlong	local01, objptr
1e368     98 E4 05 F1 | 	add	objptr, #152
1e36c     F2 1E 62 FC | 	wrlong	local01, objptr
1e370                 | ' st_lines:=t_lines
1e370     0C E4 05 F1 | 	add	objptr, #12
1e374     F2 1E 02 FB | 	rdlong	local01, objptr
1e378     04 E4 05 F1 | 	add	objptr, #4
1e37c     F2 1E 62 FC | 	wrlong	local01, objptr
1e380                 | ' ppl:=ppl/xzoom  
1e380     28 E4 85 F1 | 	sub	objptr, #40
1e384     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e388     2C E4 05 F1 | 	add	objptr, #44
1e38c     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e390     05 E5 85 F1 | 	sub	objptr, #261
1e394     BA 00 A0 FD | 	call	#divide_
1e398     D9 E4 05 F1 | 	add	objptr, #217
1e39c     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e3a0                 | ' s_ppl:=ppl
1e3a0     1C E4 05 F1 | 	add	objptr, #28
1e3a4     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e3a8     F5 E4 85 F1 | 	sub	objptr, #245
1e3ac                 | ' waitms(20)							' wait 
1e3ac     14 12 06 F6 | 	mov	arg01, #20
1e3b0     44 2A B0 FD | 	call	#__system___waitms
1e3b4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e3b4     04 E4 05 F1 | 	add	objptr, #4
1e3b8     F2 12 02 FB | 	rdlong	arg01, objptr
1e3bc     04 E4 85 F1 | 	sub	objptr, #4
1e3c0     F2 16 02 FB | 	rdlong	arg03, objptr
1e3c4     09 17 82 F1 | 	sub	arg03, arg01
1e3c8     20 14 06 F6 | 	mov	arg02, #32
1e3cc     00 18 06 F6 | 	mov	arg04, #0
1e3d0     01 1A 06 F6 | 	mov	arg05, #1
1e3d4     0B 00 00 FF 
1e3d8     CC E4 05 F1 | 	add	objptr, ##5836
1e3dc     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e3e0     0B 00 00 FF 
1e3e4     CC E4 85 F1 | 	sub	objptr, ##5836
1e3e8     A7 F0 03 F6 | 	mov	ptra, fp
1e3ec     B2 00 A0 FD | 	call	#popregs_
1e3f0                 | _hg010b_spin2_setmode_ret
1e3f0     2D 00 64 FD | 	ret
1e3f4                 | 
1e3f4                 | ' 
1e3f4                 | ' '****************************************************************************************************************
1e3f4                 | ' '                                                                                                             	*
1e3f4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e3f4                 | ' '                                                                                                             	*
1e3f4                 | ' '****************************************************************************************************************
1e3f4                 | ' 
1e3f4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e3f4                 | _hg010b_spin2_makedl
1e3f4                 | ' 
1e3f4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e3f4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e3f4                 | ' repeat i from 0 to 11                                                           ' clear DL
1e3f4     00 00 06 F6 | 	mov	_var01, #0
1e3f8     ED E5 05 F1 | 	add	objptr, #493
1e3fc     97 0E 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e400                 | LR__2430
1e400                 | '   displaylist[i]:=0 
1e400     00 03 02 F6 | 	mov	_var02, _var01
1e404     02 02 66 F0 | 	shl	_var02, #2
1e408     F2 02 02 F1 | 	add	_var02, objptr
1e40c     01 01 68 FC | 	wrlong	#0, _var02
1e410     01 00 06 F1 | 	add	_var01, #1
1e414     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e418     E4 FF 9F CD |  if_b	jmp	#LR__2430
1e41c                 | LR__2431
1e41c                 | '                         ' 
1e41c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e41c     8C E5 85 F1 | 	sub	objptr, #396
1e420     F2 02 02 FB | 	rdlong	_var02, objptr
1e424     14 02 66 F0 | 	shl	_var02, #20
1e428     01 02 06 F1 | 	add	_var02, #1
1e42c     04 E4 85 F1 | 	sub	objptr, #4
1e430     F2 00 02 FB | 	rdlong	_var01, objptr
1e434     02 00 66 F0 | 	shl	_var01, #2
1e438     04 00 66 F0 | 	shl	_var01, #4
1e43c     00 03 02 F1 | 	add	_var02, _var01
1e440     90 E5 05 F1 | 	add	objptr, #400
1e444     F2 02 62 FC | 	wrlong	_var02, objptr
1e448     ED E5 85 F1 | 	sub	objptr, #493
1e44c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e44c     F2 02 02 FB | 	rdlong	_var02, objptr
1e450     04 02 66 F0 | 	shl	_var02, #4
1e454     02 02 06 F1 | 	add	_var02, #2
1e458     F1 E5 05 F1 | 	add	objptr, #497
1e45c     F2 02 62 FC | 	wrlong	_var02, objptr
1e460                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e460     04 E4 85 F1 | 	sub	objptr, #4
1e464     F2 02 02 F6 | 	mov	_var02, objptr
1e468     CD E5 85 F1 | 	sub	objptr, #461
1e46c     F2 02 62 FC | 	wrlong	_var02, objptr
1e470     20 E4 85 F1 | 	sub	objptr, #32
1e474                 | _hg010b_spin2_makedl_ret
1e474     2D 00 64 FD | 	ret
1e478                 | 
1e478                 | ' 
1e478                 | ' 
1e478                 | ' '****************************************************************************************************************
1e478                 | ' '                                                                        					*
1e478                 | ' '  Graphic primitives                                                    					*
1e478                 | ' '                                                                        					*
1e478                 | ' '****************************************************************************************************************
1e478                 | ' 
1e478                 | ' pub setspriteptr(num,ptr)
1e478                 | _hg010b_spin2_setspriteptr
1e478                 | ' long[@spr1ptr+12*num]:=ptr
1e478     11 E5 05 F1 | 	add	objptr, #273
1e47c     F2 00 02 F6 | 	mov	_var01, objptr
1e480     09 03 02 F6 | 	mov	_var02, arg01
1e484     01 02 66 F0 | 	shl	_var02, #1
1e488     09 03 02 F1 | 	add	_var02, arg01
1e48c     02 02 66 F0 | 	shl	_var02, #2
1e490     01 01 02 F1 | 	add	_var01, _var02
1e494     00 15 62 FC | 	wrlong	arg02, _var01
1e498     11 E5 85 F1 | 	sub	objptr, #273
1e49c                 | _hg010b_spin2_setspriteptr_ret
1e49c     2D 00 64 FD | 	ret
1e4a0                 | 
1e4a0                 | ' 
1e4a0                 | ' pub setspritepos(num,x,y)
1e4a0                 | _hg010b_spin2_setspritepos
1e4a0                 | ' if y>601
1e4a0     01 00 00 FF 
1e4a4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e4a8                 | '   y:=601
1e4a8     01 00 00 3F 
1e4ac     59 16 06 36 |  if_ae	mov	arg03, ##601
1e4b0                 | ' if x>1024
1e4b0     02 00 00 FF 
1e4b4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e4b8                 | '   x:=1024
1e4b8     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e4bc                 | ' word[@spr1ptr+12*num+4]:=x
1e4bc     11 E5 05 F1 | 	add	objptr, #273
1e4c0     F2 00 02 F6 | 	mov	_var01, objptr
1e4c4     09 03 02 F6 | 	mov	_var02, arg01
1e4c8     01 02 66 F0 | 	shl	_var02, #1
1e4cc     09 03 02 F1 | 	add	_var02, arg01
1e4d0     02 02 66 F0 | 	shl	_var02, #2
1e4d4     01 01 02 F1 | 	add	_var01, _var02
1e4d8     04 00 06 F1 | 	add	_var01, #4
1e4dc     00 15 52 FC | 	wrword	arg02, _var01
1e4e0                 | ' word[@spr1ptr+12*num+6]:=y
1e4e0     F2 00 02 F6 | 	mov	_var01, objptr
1e4e4     09 03 02 F6 | 	mov	_var02, arg01
1e4e8     01 02 66 F0 | 	shl	_var02, #1
1e4ec     09 03 02 F1 | 	add	_var02, arg01
1e4f0     02 02 66 F0 | 	shl	_var02, #2
1e4f4     01 01 02 F1 | 	add	_var01, _var02
1e4f8     06 00 06 F1 | 	add	_var01, #6
1e4fc     00 17 52 FC | 	wrword	arg03, _var01
1e500     11 E5 85 F1 | 	sub	objptr, #273
1e504                 | _hg010b_spin2_setspritepos_ret
1e504     2D 00 64 FD | 	ret
1e508                 | 
1e508                 | ' 
1e508                 | ' pub setspritesize(num,w,h)
1e508                 | _hg010b_spin2_setspritesize
1e508                 | ' word[@spr1ptr+12*num+8]:=w
1e508     11 E5 05 F1 | 	add	objptr, #273
1e50c     F2 00 02 F6 | 	mov	_var01, objptr
1e510     09 03 02 F6 | 	mov	_var02, arg01
1e514     01 02 66 F0 | 	shl	_var02, #1
1e518     09 03 02 F1 | 	add	_var02, arg01
1e51c     02 02 66 F0 | 	shl	_var02, #2
1e520     01 01 02 F1 | 	add	_var01, _var02
1e524     08 00 06 F1 | 	add	_var01, #8
1e528     00 15 52 FC | 	wrword	arg02, _var01
1e52c                 | ' word[@spr1ptr+12*num+10]:=h
1e52c     F2 00 02 F6 | 	mov	_var01, objptr
1e530     09 03 02 F6 | 	mov	_var02, arg01
1e534     01 02 66 F0 | 	shl	_var02, #1
1e538     09 03 02 F1 | 	add	_var02, arg01
1e53c     02 02 66 F0 | 	shl	_var02, #2
1e540     01 01 02 F1 | 	add	_var01, _var02
1e544     0A 00 06 F1 | 	add	_var01, #10
1e548     00 17 52 FC | 	wrword	arg03, _var01
1e54c     11 E5 85 F1 | 	sub	objptr, #273
1e550                 | _hg010b_spin2_setspritesize_ret
1e550     2D 00 64 FD | 	ret
1e554                 | 
1e554                 | ' 
1e554                 | ' 
1e554                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e554                 | ' 
1e554                 | ' 
1e554                 | ' pub putpixel(x,y,c)
1e554                 | _hg010b_spin2_putpixel
1e554     04 4A 05 F6 | 	mov	COUNT_, #4
1e558     A8 00 A0 FD | 	call	#pushregs_
1e55c     09 1F 02 F6 | 	mov	local01, arg01
1e560                 | ' 
1e560                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e560     00 20 06 F6 | 	mov	local02, #0
1e564     00 1E 56 F2 | 	cmps	local01, #0 wc
1e568     01 20 66 36 |  if_ae	neg	local02, #1
1e56c     E9 E4 05 F1 | 	add	objptr, #233
1e570     F2 1A 02 FB | 	rdlong	arg05, objptr
1e574     02 1A 66 F0 | 	shl	arg05, #2
1e578     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e57c     11 23 A2 F1 | 	subx	local03, local03
1e580     11 21 02 F5 | 	and	local02, local03
1e584     00 22 06 F6 | 	mov	local03, #0
1e588     00 14 56 F2 | 	cmps	arg02, #0 wc
1e58c     01 22 66 36 |  if_ae	neg	local03, #1
1e590     11 21 02 F5 | 	and	local02, local03
1e594     04 E4 85 F1 | 	sub	objptr, #4
1e598     F2 22 02 FB | 	rdlong	local03, objptr
1e59c     E5 E4 85 F1 | 	sub	objptr, #229
1e5a0     11 15 52 F2 | 	cmps	arg02, local03 wc
1e5a4     12 25 A2 F1 | 	subx	local04, local04
1e5a8     12 21 CA F7 | 	test	local02, local04 wz
1e5ac     48 00 90 AD |  if_e	jmp	#LR__2440
1e5b0     DD E4 05 F1 | 	add	objptr, #221
1e5b4     F2 12 02 FB | 	rdlong	arg01, objptr
1e5b8     14 E4 05 F1 | 	add	objptr, #20
1e5bc     F2 24 02 FB | 	rdlong	local04, objptr
1e5c0     02 24 66 F0 | 	shl	local04, #2
1e5c4     0A 25 02 FD | 	qmul	local04, arg02
1e5c8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e5c8     0B 15 02 F6 | 	mov	arg02, arg03
1e5cc     01 16 06 F6 | 	mov	arg03, #1
1e5d0     00 18 06 F6 | 	mov	arg04, #0
1e5d4     01 1A 06 F6 | 	mov	arg05, #1
1e5d8     0A 00 00 FF 
1e5dc     DB E5 05 F1 | 	add	objptr, ##5595
1e5e0     18 24 62 FD | 	getqx	local04
1e5e4     0F 25 02 F1 | 	add	local04, local01
1e5e8     12 13 02 F1 | 	add	arg01, local04
1e5ec     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e5f0     0B 00 00 FF 
1e5f4     CC E4 85 F1 | 	sub	objptr, ##5836
1e5f8                 | LR__2440
1e5f8     A7 F0 03 F6 | 	mov	ptra, fp
1e5fc     B2 00 A0 FD | 	call	#popregs_
1e600                 | _hg010b_spin2_putpixel_ret
1e600     2D 00 64 FD | 	ret
1e604                 | 
1e604                 | ' 
1e604                 | ' pub putpixel2(x,y,c)
1e604                 | _hg010b_spin2_putpixel2
1e604     02 4A 05 F6 | 	mov	COUNT_, #2
1e608     A8 00 A0 FD | 	call	#pushregs_
1e60c     DD E4 05 F1 | 	add	objptr, #221
1e610     F2 1E 02 FB | 	rdlong	local01, objptr
1e614     14 E4 05 F1 | 	add	objptr, #20
1e618     F2 1A 02 FB | 	rdlong	arg05, objptr
1e61c     02 1A 66 F0 | 	shl	arg05, #2
1e620     0A 1B 02 FD | 	qmul	arg05, arg02
1e624                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e624     0B 15 02 F6 | 	mov	arg02, arg03
1e628     01 16 06 F6 | 	mov	arg03, #1
1e62c     00 18 06 F6 | 	mov	arg04, #0
1e630     01 1A 06 F6 | 	mov	arg05, #1
1e634     0A 00 00 FF 
1e638     DB E5 05 F1 | 	add	objptr, ##5595
1e63c     18 20 62 FD | 	getqx	local02
1e640     09 21 02 F1 | 	add	local02, arg01
1e644     10 1F 02 F1 | 	add	local01, local02
1e648     0F 13 02 F6 | 	mov	arg01, local01
1e64c     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e650     0B 00 00 FF 
1e654     CC E4 85 F1 | 	sub	objptr, ##5836
1e658     A7 F0 03 F6 | 	mov	ptra, fp
1e65c     B2 00 A0 FD | 	call	#popregs_
1e660                 | _hg010b_spin2_putpixel2_ret
1e660     2D 00 64 FD | 	ret
1e664                 | 
1e664                 | ' 
1e664                 | ' pub getpixel2(x,y): c 
1e664                 | _hg010b_spin2_getpixel2
1e664     02 4A 05 F6 | 	mov	COUNT_, #2
1e668     A8 00 A0 FD | 	call	#pushregs_
1e66c     0C F0 07 F1 | 	add	ptra, #12
1e670     04 4E 05 F1 | 	add	fp, #4
1e674     A7 12 62 FC | 	wrlong	arg01, fp
1e678     04 4E 05 F1 | 	add	fp, #4
1e67c     A7 14 62 FC | 	wrlong	arg02, fp
1e680     08 4E 85 F1 | 	sub	fp, #8
1e684     A7 00 68 FC | 	wrlong	#0, fp
1e688     A7 12 02 F6 | 	mov	arg01, fp
1e68c     DD E4 05 F1 | 	add	objptr, #221
1e690     F2 14 02 FB | 	rdlong	arg02, objptr
1e694     14 E4 05 F1 | 	add	objptr, #20
1e698     F2 16 02 FB | 	rdlong	arg03, objptr
1e69c     02 16 66 F0 | 	shl	arg03, #2
1e6a0     08 4E 05 F1 | 	add	fp, #8
1e6a4     A7 FA 01 FB | 	rdlong	result1, fp
1e6a8     FD 16 02 FD | 	qmul	arg03, result1
1e6ac                 | ' 
1e6ac                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e6ac     04 4E 85 F1 | 	sub	fp, #4
1e6b0     A7 1E 02 FB | 	rdlong	local01, fp
1e6b4     04 4E 85 F1 | 	sub	fp, #4
1e6b8     01 16 06 F6 | 	mov	arg03, #1
1e6bc     0A 00 00 FF 
1e6c0     DB E5 05 F1 | 	add	objptr, ##5595
1e6c4     18 20 62 FD | 	getqx	local02
1e6c8     0F 21 02 F1 | 	add	local02, local01
1e6cc     10 15 02 F1 | 	add	arg02, local02
1e6d0     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e6d4     0B 00 00 FF 
1e6d8     CC E4 85 F1 | 	sub	objptr, ##5836
1e6dc                 | ' return c
1e6dc     A7 FA 01 FB | 	rdlong	result1, fp
1e6e0     A7 F0 03 F6 | 	mov	ptra, fp
1e6e4     B2 00 A0 FD | 	call	#popregs_
1e6e8                 | _hg010b_spin2_getpixel2_ret
1e6e8     2D 00 64 FD | 	ret
1e6ec                 | 
1e6ec                 | '   
1e6ec                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e6ec                 | ' 
1e6ec                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e6ec                 | _hg010b_spin2_fastline
1e6ec     02 4A 05 F6 | 	mov	COUNT_, #2
1e6f0     A8 00 A0 FD | 	call	#pushregs_
1e6f4     09 1F 02 F6 | 	mov	local01, arg01
1e6f8     0A 21 02 F6 | 	mov	local02, arg02
1e6fc                 | ' 
1e6fc                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e6fc     00 16 56 F2 | 	cmps	arg03, #0 wc
1e700     F4 00 90 CD |  if_b	jmp	#LR__2450
1e704     01 00 00 FF 
1e708     2A E4 05 F1 | 	add	objptr, ##554
1e70c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e710     01 00 00 FF 
1e714     2A E4 85 F1 | 	sub	objptr, ##554
1e718     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e71c     D8 00 90 3D |  if_ae	jmp	#LR__2450
1e720     00 1E 56 F2 | 	cmps	local01, #0 wc
1e724     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e728     CC 00 90 CD |  if_b	jmp	#LR__2450
1e72c     01 00 00 FF 
1e730     26 E4 05 F1 | 	add	objptr, ##550
1e734     F2 1A 02 FB | 	rdlong	arg05, objptr
1e738     01 00 00 FF 
1e73c     26 E4 85 F1 | 	sub	objptr, ##550
1e740     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e744     01 00 00 1F 
1e748     26 E4 05 11 |  if_a	add	objptr, ##550
1e74c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e750     01 00 00 1F 
1e754     26 E4 85 11 |  if_a	sub	objptr, ##550
1e758     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e75c                 | '   return
1e75c     98 00 90 1D |  if_a	jmp	#LR__2450
1e760     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e764     0F 1B 02 16 |  if_a	mov	arg05, local01
1e768     10 1F 02 16 |  if_a	mov	local01, local02
1e76c     0D 21 02 16 |  if_a	mov	local02, arg05
1e770     00 1E 56 F2 | 	cmps	local01, #0 wc
1e774     00 1E 06 C6 |  if_b	mov	local01, #0
1e778     01 00 00 FF 
1e77c     26 E4 05 F1 | 	add	objptr, ##550
1e780     F2 1A 02 FB | 	rdlong	arg05, objptr
1e784     01 00 00 FF 
1e788     26 E4 85 F1 | 	sub	objptr, ##550
1e78c     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e790     01 00 00 3F 
1e794     26 E4 05 31 |  if_ae	add	objptr, ##550
1e798     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e79c     01 00 00 3F 
1e7a0     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e7a4     DD E4 05 F1 | 	add	objptr, #221
1e7a8     F2 12 02 FB | 	rdlong	arg01, objptr
1e7ac     14 E4 05 F1 | 	add	objptr, #20
1e7b0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e7b4     02 1A 66 F0 | 	shl	arg05, #2
1e7b8     0B 1B 02 FD | 	qmul	arg05, arg03
1e7bc                 | ' if x1>x2
1e7bc                 | '   x1,x2:=x2,x1
1e7bc                 | ' if x1<0 
1e7bc                 | '   x1:=0
1e7bc                 | ' if x2>=xres
1e7bc                 | '   x2:=xres-1  
1e7bc     01 20 86 31 |  if_ae	sub	local02, #1
1e7c0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e7c0     01 16 06 F6 | 	mov	arg03, #1
1e7c4     10 17 02 F1 | 	add	arg03, local02
1e7c8     0F 17 82 F1 | 	sub	arg03, local01
1e7cc     0C 15 02 F6 | 	mov	arg02, arg04
1e7d0     00 18 06 F6 | 	mov	arg04, #0
1e7d4     01 1A 06 F6 | 	mov	arg05, #1
1e7d8     0A 00 00 FF 
1e7dc     DB E5 05 F1 | 	add	objptr, ##5595
1e7e0     18 20 62 FD | 	getqx	local02
1e7e4     0F 21 02 F1 | 	add	local02, local01
1e7e8     10 13 02 F1 | 	add	arg01, local02
1e7ec     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e7f0     0B 00 00 FF 
1e7f4     CC E4 85 F1 | 	sub	objptr, ##5836
1e7f8                 | LR__2450
1e7f8     A7 F0 03 F6 | 	mov	ptra, fp
1e7fc     B2 00 A0 FD | 	call	#popregs_
1e800                 | _hg010b_spin2_fastline_ret
1e800     2D 00 64 FD | 	ret
1e804                 | 
1e804                 | ' 
1e804                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e804                 | _hg010b_spin2_draw
1e804     0E 4A 05 F6 | 	mov	COUNT_, #14
1e808     A8 00 A0 FD | 	call	#pushregs_
1e80c     09 1F 02 F6 | 	mov	local01, arg01
1e810     0A 21 02 F6 | 	mov	local02, arg02
1e814     0B 23 02 F6 | 	mov	local03, arg03
1e818     0C 25 02 F6 | 	mov	local04, arg04
1e81c     0D 27 02 F6 | 	mov	local05, arg05
1e820                 | ' 
1e820                 | ' if (y1==y2)
1e820     12 21 0A F2 | 	cmp	local02, local04 wz
1e824     18 00 90 5D |  if_ne	jmp	#LR__2460
1e828                 | '   fastline(x1,x2,y1,c)
1e828     0F 13 02 F6 | 	mov	arg01, local01
1e82c     11 15 02 F6 | 	mov	arg02, local03
1e830     10 17 02 F6 | 	mov	arg03, local02
1e834     13 19 02 F6 | 	mov	arg04, local05
1e838     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e83c     F8 00 90 FD | 	jmp	#LR__2466
1e840                 | LR__2460
1e840                 | ' else  
1e840                 | '   x:=x1
1e840     0F 29 02 F6 | 	mov	local06, local01
1e844                 | '   y:=y1
1e844     10 2B 02 F6 | 	mov	local07, local02
1e848                 | ' 
1e848                 | '   if (x1<x2) 
1e848     11 1F 52 F2 | 	cmps	local01, local03 wc
1e84c                 | '     xi:=1
1e84c     01 2C 06 C6 |  if_b	mov	local08, #1
1e850                 | '     dx:=x2-x1
1e850     11 2F 02 C6 |  if_b	mov	local09, local03
1e854     0F 2F 82 C1 |  if_b	sub	local09, local01
1e858                 | '   else
1e858                 | '     xi:=-1
1e858     01 2C 66 36 |  if_ae	neg	local08, #1
1e85c                 | '     dx:=x1-x2
1e85c     11 1F 82 31 |  if_ae	sub	local01, local03
1e860     0F 2F 02 36 |  if_ae	mov	local09, local01
1e864                 | '   
1e864                 | '   if (y1<y2) 
1e864     12 21 52 F2 | 	cmps	local02, local04 wc
1e868                 | '     yi:=1
1e868     01 30 06 C6 |  if_b	mov	local10, #1
1e86c                 | '     dy:=y2-y1
1e86c     12 33 02 C6 |  if_b	mov	local11, local04
1e870     10 33 82 C1 |  if_b	sub	local11, local02
1e874                 | '   else
1e874                 | '     yi:=-1
1e874     01 30 66 36 |  if_ae	neg	local10, #1
1e878                 | '     dy:=y1-y2
1e878     12 21 82 31 |  if_ae	sub	local02, local04
1e87c     10 33 02 36 |  if_ae	mov	local11, local02
1e880                 | ' 
1e880                 | '   putpixel(x,y,c)
1e880     13 17 02 F6 | 	mov	arg03, local05
1e884     14 13 02 F6 | 	mov	arg01, local06
1e888     15 15 02 F6 | 	mov	arg02, local07
1e88c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e890                 | ' 
1e890                 | '   if (dx>dy)
1e890     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e894     50 00 90 ED |  if_be	jmp	#LR__2462
1e898                 | '     ai:=(dy-dx)*2
1e898     19 35 02 F6 | 	mov	local12, local11
1e89c     17 35 82 F1 | 	sub	local12, local09
1e8a0     01 34 66 F0 | 	shl	local12, #1
1e8a4                 | '     bi:=dy*2
1e8a4     01 32 66 F0 | 	shl	local11, #1
1e8a8     19 37 02 F6 | 	mov	local13, local11
1e8ac                 | '     d:= bi-dx
1e8ac     1B 39 02 F6 | 	mov	local14, local13
1e8b0     17 39 82 F1 | 	sub	local14, local09
1e8b4                 | '     repeat while (x<>x2) 
1e8b4                 | LR__2461
1e8b4     11 29 0A F2 | 	cmp	local06, local03 wz
1e8b8     7C 00 90 AD |  if_e	jmp	#LR__2465
1e8bc                 | '       if (d>=0) 
1e8bc     00 38 56 F2 | 	cmps	local14, #0 wc
1e8c0                 | '         x+=xi
1e8c0     16 29 02 31 |  if_ae	add	local06, local08
1e8c4                 | '         y+=yi
1e8c4     18 2B 02 31 |  if_ae	add	local07, local10
1e8c8                 | '         d+=ai
1e8c8     1A 39 02 31 |  if_ae	add	local14, local12
1e8cc                 | '       else
1e8cc                 | '         d+=bi
1e8cc     1B 39 02 C1 |  if_b	add	local14, local13
1e8d0                 | '         x+=xi
1e8d0     16 29 02 C1 |  if_b	add	local06, local08
1e8d4                 | '       putpixel(x,y,c)
1e8d4     14 13 02 F6 | 	mov	arg01, local06
1e8d8     15 15 02 F6 | 	mov	arg02, local07
1e8dc     13 17 02 F6 | 	mov	arg03, local05
1e8e0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e8e4     CC FF 9F FD | 	jmp	#LR__2461
1e8e8                 | LR__2462
1e8e8                 | '   else
1e8e8                 | '     ai:=(dx-dy)*2
1e8e8     17 35 02 F6 | 	mov	local12, local09
1e8ec     19 35 82 F1 | 	sub	local12, local11
1e8f0     01 34 66 F0 | 	shl	local12, #1
1e8f4                 | '     bi:=dx*2
1e8f4     01 2E 66 F0 | 	shl	local09, #1
1e8f8     17 37 02 F6 | 	mov	local13, local09
1e8fc                 | '     d:=bi-dy
1e8fc     1B 39 02 F6 | 	mov	local14, local13
1e900     19 39 82 F1 | 	sub	local14, local11
1e904                 | '     repeat while (y<>y2)
1e904                 | LR__2463
1e904     12 2B 0A F2 | 	cmp	local07, local04 wz
1e908     2C 00 90 AD |  if_e	jmp	#LR__2464
1e90c                 | '       if (d>=0)
1e90c     00 38 56 F2 | 	cmps	local14, #0 wc
1e910                 | '         x+=xi
1e910     16 29 02 31 |  if_ae	add	local06, local08
1e914                 | '         y+=yi
1e914     18 2B 02 31 |  if_ae	add	local07, local10
1e918                 | '         d+=ai
1e918     1A 39 02 31 |  if_ae	add	local14, local12
1e91c                 | '       else
1e91c                 | '         d+=bi
1e91c     1B 39 02 C1 |  if_b	add	local14, local13
1e920                 | '         y+=yi
1e920     18 2B 02 C1 |  if_b	add	local07, local10
1e924                 | '       putpixel(x, y,c)
1e924     14 13 02 F6 | 	mov	arg01, local06
1e928     15 15 02 F6 | 	mov	arg02, local07
1e92c     13 17 02 F6 | 	mov	arg03, local05
1e930     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e934     CC FF 9F FD | 	jmp	#LR__2463
1e938                 | LR__2464
1e938                 | LR__2465
1e938                 | LR__2466
1e938     A7 F0 03 F6 | 	mov	ptra, fp
1e93c     B2 00 A0 FD | 	call	#popregs_
1e940                 | _hg010b_spin2_draw_ret
1e940     2D 00 64 FD | 	ret
1e944                 | 
1e944                 | '  
1e944                 | ' pub fillpush(val) 
1e944                 | _hg010b_spin2_fillpush
1e944                 | ' fillstack[fillptr]:=val
1e944     0B 00 00 FF 
1e948     BA E4 05 F1 | 	add	objptr, ##5818
1e94c     F2 00 02 FB | 	rdlong	_var01, objptr
1e950     02 00 66 F0 | 	shl	_var01, #2
1e954     0A 00 00 FF 
1e958     00 E4 85 F1 | 	sub	objptr, ##5120
1e95c     F2 00 02 F1 | 	add	_var01, objptr
1e960     00 13 62 FC | 	wrlong	arg01, _var01
1e964                 | ' fillptr+=1   
1e964     0A 00 00 FF 
1e968     00 E4 05 F1 | 	add	objptr, ##5120
1e96c     F2 00 02 FB | 	rdlong	_var01, objptr
1e970     01 00 06 F1 | 	add	_var01, #1
1e974     F2 00 62 FC | 	wrlong	_var01, objptr
1e978     0B 00 00 FF 
1e97c     BA E4 85 F1 | 	sub	objptr, ##5818
1e980                 | _hg010b_spin2_fillpush_ret
1e980     2D 00 64 FD | 	ret
1e984                 | 
1e984                 | ' 
1e984                 | '     
1e984                 | ' pub fillpop() : val
1e984                 | _hg010b_spin2_fillpop
1e984                 | ' 
1e984                 | ' fillptr-=1
1e984     0B 00 00 FF 
1e988     BA E4 05 F1 | 	add	objptr, ##5818
1e98c     F2 FA 01 FB | 	rdlong	result1, objptr
1e990     01 FA 85 F1 | 	sub	result1, #1
1e994     F2 FA 61 FC | 	wrlong	result1, objptr
1e998                 | ' if fillptr<0
1e998     0B 00 00 FF 
1e99c     BA E4 85 F1 | 	sub	objptr, ##5818
1e9a0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e9a4                 | '   fillptr:=0
1e9a4     0B 00 00 CF 
1e9a8     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e9ac     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e9b0     0B 00 00 CF 
1e9b4     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e9b8                 | '   val:=-12345
1e9b8     E7 FF 7F CF 
1e9bc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e9c0     28 00 90 CD |  if_b	jmp	#LR__2470
1e9c4                 | ' else 
1e9c4                 | '   val:=fillstack[fillptr]
1e9c4     0B 00 00 FF 
1e9c8     BA E4 05 F1 | 	add	objptr, ##5818
1e9cc     F2 00 02 FB | 	rdlong	_var01, objptr
1e9d0     02 00 66 F0 | 	shl	_var01, #2
1e9d4     0A 00 00 FF 
1e9d8     00 E4 85 F1 | 	sub	objptr, ##5120
1e9dc     F2 00 02 F1 | 	add	_var01, objptr
1e9e0     00 01 02 FB | 	rdlong	_var01, _var01
1e9e4     01 00 00 FF 
1e9e8     BA E4 85 F1 | 	sub	objptr, ##698
1e9ec                 | LR__2470
1e9ec                 | ' return val
1e9ec     00 FB 01 F6 | 	mov	result1, _var01
1e9f0                 | _hg010b_spin2_fillpop_ret
1e9f0     2D 00 64 FD | 	ret
1e9f4                 | 
1e9f4                 | ' 
1e9f4                 | '       
1e9f4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e9f4                 | _hg010b_spin2_fill
1e9f4     0B 4A 05 F6 | 	mov	COUNT_, #11
1e9f8     A8 00 A0 FD | 	call	#pushregs_
1e9fc                 | ' 
1e9fc                 | ' newcolor:=newcolor & 255
1e9fc     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1ea00                 | ' oldcolor:=oldcolor & 255
1ea00     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1ea04                 | ' 
1ea04                 | ' if (oldcolor == newcolor) 
1ea04     0F 21 0A F2 | 	cmp	local02, local01 wz
1ea08                 | '   return
1ea08     70 02 90 AD |  if_e	jmp	#LR__2489
1ea0c                 | ' 
1ea0c                 | ' fillptr:=0
1ea0c     0B 00 00 FF 
1ea10     BA E4 05 F1 | 	add	objptr, ##5818
1ea14     F2 00 68 FC | 	wrlong	#0, objptr
1ea18                 | ' fillmax:=0
1ea18     04 E4 05 F1 | 	add	objptr, #4
1ea1c     F2 00 68 FC | 	wrlong	#0, objptr
1ea20     0B 00 00 FF 
1ea24     BE E4 85 F1 | 	sub	objptr, ##5822
1ea28                 | ' fillpush(x)
1ea28     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ea2c                 | ' fillpush(y)
1ea2c     0A 13 02 F6 | 	mov	arg01, arg02
1ea30     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ea34                 | ' y:=fillpop()
1ea34     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1ea38     FD 22 02 F6 | 	mov	local03, result1
1ea3c                 | ' x:=fillpop()
1ea3c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1ea40     FD 24 02 F6 | 	mov	local04, result1
1ea44                 | ' 'pinhigh(38)
1ea44                 | ' repeat while (x>-1)       
1ea44                 | LR__2480
1ea44     00 24 56 F2 | 	cmps	local04, #0 wc
1ea48     30 02 90 CD |  if_b	jmp	#LR__2488
1ea4c                 | '  ' pintoggle(39)
1ea4c                 | '   x1 := x
1ea4c     12 27 02 F6 | 	mov	local05, local04
1ea50                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1ea50                 | LR__2481
1ea50     00 28 06 F6 | 	mov	local06, #0
1ea54     00 2A 06 F6 | 	mov	local07, #0
1ea58     00 26 56 F2 | 	cmps	local05, #0 wc
1ea5c     01 2A 66 36 |  if_ae	neg	local07, #1
1ea60     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea64     00 28 26 56 |  if_ne	not	local06, #0
1ea68     00 2C 06 F6 | 	mov	local08, #0
1ea6c     00 2E 06 F6 | 	mov	local09, #0
1ea70     11 15 02 F6 | 	mov	arg02, local03
1ea74     13 13 02 F6 | 	mov	arg01, local05
1ea78     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ea7c     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea80     00 2E 26 A6 |  if_e	not	local09, #0
1ea84     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea88     00 2C 26 56 |  if_ne	not	local08, #0
1ea8c     16 29 CA F7 | 	test	local06, local08 wz
1ea90                 | '     x1--
1ea90     01 26 86 51 |  if_ne	sub	local05, #1
1ea94     B8 FF 9F 5D |  if_ne	jmp	#LR__2481
1ea98                 | '   x1++
1ea98     01 26 06 F1 | 	add	local05, #1
1ea9c                 | '   spanabove := 0
1ea9c     00 30 06 F6 | 	mov	local10, #0
1eaa0                 | '   spanbelow := 0
1eaa0     00 32 06 F6 | 	mov	local11, #0
1eaa4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1eaa4                 | LR__2482
1eaa4     00 28 06 F6 | 	mov	local06, #0
1eaa8     02 00 00 FF 
1eaac     00 26 56 F2 | 	cmps	local05, ##1024 wc
1eab0     00 28 26 C6 |  if_b	not	local06, #0
1eab4     00 2C 06 F6 | 	mov	local08, #0
1eab8     00 2E 06 F6 | 	mov	local09, #0
1eabc     11 15 02 F6 | 	mov	arg02, local03
1eac0     13 13 02 F6 | 	mov	arg01, local05
1eac4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eac8     10 FB 09 F2 | 	cmp	result1, local02 wz
1eacc     00 2E 26 A6 |  if_e	not	local09, #0
1ead0     00 2E 0E F2 | 	cmp	local09, #0 wz
1ead4     00 2C 26 56 |  if_ne	not	local08, #0
1ead8     16 29 CA F7 | 	test	local06, local08 wz
1eadc     88 01 90 AD |  if_e	jmp	#LR__2487
1eae0                 | '     putpixel2 (x1,y, newcolor & 255)
1eae0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1eae4     13 13 02 F6 | 	mov	arg01, local05
1eae8     11 15 02 F6 | 	mov	arg02, local03
1eaec     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1eaf0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1eaf0     00 28 06 F6 | 	mov	local06, #0
1eaf4     00 2A 06 F6 | 	mov	local07, #0
1eaf8     00 30 0E F2 | 	cmp	local10, #0 wz
1eafc     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1eb00     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1eb04     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb08     00 28 26 56 |  if_ne	not	local06, #0
1eb0c     00 2C 06 F6 | 	mov	local08, #0
1eb10     00 2E 06 F6 | 	mov	local09, #0
1eb14     11 15 02 F6 | 	mov	arg02, local03
1eb18     01 14 86 F1 | 	sub	arg02, #1
1eb1c     13 13 02 F6 | 	mov	arg01, local05
1eb20     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eb24     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb28     00 2E 26 A6 |  if_e	not	local09, #0
1eb2c     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb30     00 2C 26 56 |  if_ne	not	local08, #0
1eb34     16 29 CA F7 | 	test	local06, local08 wz
1eb38     1C 00 90 AD |  if_e	jmp	#LR__2483
1eb3c                 | '       fillpush(x1)
1eb3c     13 13 02 F6 | 	mov	arg01, local05
1eb40     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1eb44                 | '       fillpush(y-1)
1eb44     11 13 02 F6 | 	mov	arg01, local03
1eb48     01 12 86 F1 | 	sub	arg01, #1
1eb4c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1eb50                 | '       spanabove := 1 
1eb50     01 30 06 F6 | 	mov	local10, #1
1eb54     4C 00 90 FD | 	jmp	#LR__2484
1eb58                 | LR__2483
1eb58                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1eb58     00 28 06 F6 | 	mov	local06, #0
1eb5c     00 2A 06 F6 | 	mov	local07, #0
1eb60     00 30 0E F2 | 	cmp	local10, #0 wz
1eb64     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1eb68     01 2A 66 16 |  if_a	neg	local07, #1
1eb6c     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb70     00 28 26 56 |  if_ne	not	local06, #0
1eb74     00 2C 06 F6 | 	mov	local08, #0
1eb78     00 2E 06 F6 | 	mov	local09, #0
1eb7c     11 15 02 F6 | 	mov	arg02, local03
1eb80     01 14 86 F1 | 	sub	arg02, #1
1eb84     13 13 02 F6 | 	mov	arg01, local05
1eb88     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eb8c     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb90     00 2E 26 56 |  if_ne	not	local09, #0
1eb94     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb98     00 2C 26 56 |  if_ne	not	local08, #0
1eb9c     16 29 CA F7 | 	test	local06, local08 wz
1eba0                 | '       spanabove := 0 
1eba0     00 30 06 56 |  if_ne	mov	local10, #0
1eba4                 | LR__2484
1eba4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1eba4     00 28 06 F6 | 	mov	local06, #0
1eba8     00 2A 06 F6 | 	mov	local07, #0
1ebac     00 32 0E F2 | 	cmp	local11, #0 wz
1ebb0     01 00 00 AF 
1ebb4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ebb8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ebbc     00 2A 0E F2 | 	cmp	local07, #0 wz
1ebc0     00 28 26 56 |  if_ne	not	local06, #0
1ebc4     00 2C 06 F6 | 	mov	local08, #0
1ebc8     00 2E 06 F6 | 	mov	local09, #0
1ebcc     11 15 02 F6 | 	mov	arg02, local03
1ebd0     01 14 06 F1 | 	add	arg02, #1
1ebd4     13 13 02 F6 | 	mov	arg01, local05
1ebd8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ebdc     10 FB 09 F2 | 	cmp	result1, local02 wz
1ebe0     00 2E 26 A6 |  if_e	not	local09, #0
1ebe4     00 2E 0E F2 | 	cmp	local09, #0 wz
1ebe8     00 2C 26 56 |  if_ne	not	local08, #0
1ebec     16 29 CA F7 | 	test	local06, local08 wz
1ebf0     1C 00 90 AD |  if_e	jmp	#LR__2485
1ebf4                 | '       fillpush(x1)
1ebf4     13 13 02 F6 | 	mov	arg01, local05
1ebf8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ebfc                 | '       fillpush(y + 1)
1ebfc     11 13 02 F6 | 	mov	arg01, local03
1ec00     01 12 06 F1 | 	add	arg01, #1
1ec04     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ec08                 | '       spanBelow := 1
1ec08     01 32 06 F6 | 	mov	local11, #1
1ec0c     50 00 90 FD | 	jmp	#LR__2486
1ec10                 | LR__2485
1ec10                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ec10     00 28 06 F6 | 	mov	local06, #0
1ec14     00 2A 06 F6 | 	mov	local07, #0
1ec18     00 32 0E F2 | 	cmp	local11, #0 wz
1ec1c     01 00 00 5F 
1ec20     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ec24     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ec28     00 2A 0E F2 | 	cmp	local07, #0 wz
1ec2c     00 28 26 56 |  if_ne	not	local06, #0
1ec30     00 2C 06 F6 | 	mov	local08, #0
1ec34     00 2E 06 F6 | 	mov	local09, #0
1ec38     11 15 02 F6 | 	mov	arg02, local03
1ec3c     01 14 06 F1 | 	add	arg02, #1
1ec40     13 13 02 F6 | 	mov	arg01, local05
1ec44     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ec48     10 FB 09 F2 | 	cmp	result1, local02 wz
1ec4c     00 2E 26 56 |  if_ne	not	local09, #0
1ec50     00 2E 0E F2 | 	cmp	local09, #0 wz
1ec54     00 2C 26 56 |  if_ne	not	local08, #0
1ec58     16 29 CA F7 | 	test	local06, local08 wz
1ec5c                 | '       spanbelow := 0
1ec5c     00 32 06 56 |  if_ne	mov	local11, #0
1ec60                 | LR__2486
1ec60                 | '     x1++
1ec60     01 26 06 F1 | 	add	local05, #1
1ec64     3C FE 9F FD | 	jmp	#LR__2482
1ec68                 | LR__2487
1ec68                 | '   y:=fillpop()
1ec68     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ec6c     FD 22 02 F6 | 	mov	local03, result1
1ec70                 | '   x:=fillpop()
1ec70     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ec74     FD 24 02 F6 | 	mov	local04, result1
1ec78     C8 FD 9F FD | 	jmp	#LR__2480
1ec7c                 | LR__2488
1ec7c                 | LR__2489
1ec7c     A7 F0 03 F6 | 	mov	ptra, fp
1ec80     B2 00 A0 FD | 	call	#popregs_
1ec84                 | _hg010b_spin2_fill_ret
1ec84     2D 00 64 FD | 	ret
1ec88                 | 
1ec88                 | ' 'pinlow(38)    
1ec88                 | ' 
1ec88                 | ' '-- A filled circle -----------------------------------------------------
1ec88                 | ' 
1ec88                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1ec88                 | _hg010b_spin2_fcircle
1ec88     08 4A 05 F6 | 	mov	COUNT_, #8
1ec8c     A8 00 A0 FD | 	call	#pushregs_
1ec90     0B 1F 02 F6 | 	mov	local01, arg03
1ec94     FF FF 7F FF 
1ec98     FE 1F 06 FD | 	qmul	local01, ##-2
1ec9c     09 21 02 F6 | 	mov	local02, arg01
1eca0     0A 23 02 F6 | 	mov	local03, arg02
1eca4     0C 25 02 F6 | 	mov	local04, arg04
1eca8                 | ' 
1eca8                 | ' d:=5-4*r
1eca8     0F 19 02 F6 | 	mov	arg04, local01
1ecac     02 18 66 F0 | 	shl	arg04, #2
1ecb0     05 26 06 F6 | 	mov	local05, #5
1ecb4     0C 27 82 F1 | 	sub	local05, arg04
1ecb8                 | ' x:=0
1ecb8     00 28 06 F6 | 	mov	local06, #0
1ecbc                 | ' y:=r
1ecbc                 | ' da:=(-2*r+5)*4
1ecbc                 | ' db:=3*4
1ecbc     0C 2A 06 F6 | 	mov	local07, #12
1ecc0                 | ' repeat while (x<=y) 
1ecc0     18 2C 62 FD | 	getqx	local08
1ecc4     05 2C 06 F1 | 	add	local08, #5
1ecc8     02 2C 66 F0 | 	shl	local08, #2
1eccc                 | LR__2490
1eccc     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ecd0     B4 00 90 1D |  if_a	jmp	#LR__2492
1ecd4                 | '   fastline(x0-x,x0+x,y0-y,c)
1ecd4     10 13 02 F6 | 	mov	arg01, local02
1ecd8     14 13 82 F1 | 	sub	arg01, local06
1ecdc     10 15 02 F6 | 	mov	arg02, local02
1ece0     14 15 02 F1 | 	add	arg02, local06
1ece4     11 17 02 F6 | 	mov	arg03, local03
1ece8     0F 17 82 F1 | 	sub	arg03, local01
1ecec     12 19 02 F6 | 	mov	arg04, local04
1ecf0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ecf4                 | '   fastline(x0-x,x0+x,y0+y,c)
1ecf4     10 13 02 F6 | 	mov	arg01, local02
1ecf8     14 13 82 F1 | 	sub	arg01, local06
1ecfc     10 15 02 F6 | 	mov	arg02, local02
1ed00     14 15 02 F1 | 	add	arg02, local06
1ed04     11 17 02 F6 | 	mov	arg03, local03
1ed08     0F 17 02 F1 | 	add	arg03, local01
1ed0c     12 19 02 F6 | 	mov	arg04, local04
1ed10     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed14                 | '   fastline(x0-y,x0+y,y0-x,c)
1ed14     10 13 02 F6 | 	mov	arg01, local02
1ed18     0F 13 82 F1 | 	sub	arg01, local01
1ed1c     10 15 02 F6 | 	mov	arg02, local02
1ed20     0F 15 02 F1 | 	add	arg02, local01
1ed24     11 17 02 F6 | 	mov	arg03, local03
1ed28     14 17 82 F1 | 	sub	arg03, local06
1ed2c     12 19 02 F6 | 	mov	arg04, local04
1ed30     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed34                 | '   fastline(x0-y,x0+y,y0+x,c)
1ed34     10 13 02 F6 | 	mov	arg01, local02
1ed38     0F 13 82 F1 | 	sub	arg01, local01
1ed3c     10 15 02 F6 | 	mov	arg02, local02
1ed40     0F 15 02 F1 | 	add	arg02, local01
1ed44     11 17 02 F6 | 	mov	arg03, local03
1ed48     14 17 02 F1 | 	add	arg03, local06
1ed4c     12 19 02 F6 | 	mov	arg04, local04
1ed50     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed54                 | '   if d>0 
1ed54     01 26 56 F2 | 	cmps	local05, #1 wc
1ed58     18 00 90 CD |  if_b	jmp	#LR__2491
1ed5c                 | '     d+=da
1ed5c     16 27 02 F1 | 	add	local05, local08
1ed60                 | '     y-=1
1ed60     01 1E 86 F1 | 	sub	local01, #1
1ed64                 | '     x+=1
1ed64     01 28 06 F1 | 	add	local06, #1
1ed68                 | '     da+=4*4
1ed68     10 2C 06 F1 | 	add	local08, #16
1ed6c                 | '     db+=2*4
1ed6c     08 2A 06 F1 | 	add	local07, #8
1ed70     58 FF 9F FD | 	jmp	#LR__2490
1ed74                 | LR__2491
1ed74                 | '   else
1ed74                 | '     d+=db
1ed74     15 27 02 F1 | 	add	local05, local07
1ed78                 | '     x+=1
1ed78     01 28 06 F1 | 	add	local06, #1
1ed7c                 | '     da+=2*4
1ed7c     08 2C 06 F1 | 	add	local08, #8
1ed80                 | '     db+=2*4
1ed80     08 2A 06 F1 | 	add	local07, #8
1ed84     44 FF 9F FD | 	jmp	#LR__2490
1ed88                 | LR__2492
1ed88     A7 F0 03 F6 | 	mov	ptra, fp
1ed8c     B2 00 A0 FD | 	call	#popregs_
1ed90                 | _hg010b_spin2_fcircle_ret
1ed90     2D 00 64 FD | 	ret
1ed94                 | 
1ed94                 | '  
1ed94                 | ' '-- A circle ------------------------------------------------------------ 
1ed94                 | '  
1ed94                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ed94                 | _hg010b_spin2_circle
1ed94     08 4A 05 F6 | 	mov	COUNT_, #8
1ed98     A8 00 A0 FD | 	call	#pushregs_
1ed9c     0B 1F 02 F6 | 	mov	local01, arg03
1eda0     FF FF 7F FF 
1eda4     FE 1F 06 FD | 	qmul	local01, ##-2
1eda8     09 21 02 F6 | 	mov	local02, arg01
1edac     0A 23 02 F6 | 	mov	local03, arg02
1edb0     0C 25 02 F6 | 	mov	local04, arg04
1edb4                 | ' 
1edb4                 | '  
1edb4                 | ' d:=5-4*r
1edb4     0F 19 02 F6 | 	mov	arg04, local01
1edb8     02 18 66 F0 | 	shl	arg04, #2
1edbc     05 26 06 F6 | 	mov	local05, #5
1edc0     0C 27 82 F1 | 	sub	local05, arg04
1edc4                 | ' x:=0
1edc4     00 28 06 F6 | 	mov	local06, #0
1edc8                 | ' y:=r
1edc8                 | ' da:=(-2*r+5)*4
1edc8                 | ' db:=3*4
1edc8     0C 2A 06 F6 | 	mov	local07, #12
1edcc                 | ' repeat while (x<=y) 
1edcc     18 2C 62 FD | 	getqx	local08
1edd0     05 2C 06 F1 | 	add	local08, #5
1edd4     02 2C 66 F0 | 	shl	local08, #2
1edd8                 | LR__2500
1edd8     0F 29 5A F2 | 	cmps	local06, local01 wcz
1eddc     F4 00 90 1D |  if_a	jmp	#LR__2502
1ede0                 | '   putpixel(x0-x,y0-y,c)
1ede0     10 13 02 F6 | 	mov	arg01, local02
1ede4     14 13 82 F1 | 	sub	arg01, local06
1ede8     11 15 02 F6 | 	mov	arg02, local03
1edec     0F 15 82 F1 | 	sub	arg02, local01
1edf0     12 17 02 F6 | 	mov	arg03, local04
1edf4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1edf8                 | '   putpixel(x0-x,y0+y,c)
1edf8     10 13 02 F6 | 	mov	arg01, local02
1edfc     14 13 82 F1 | 	sub	arg01, local06
1ee00     11 15 02 F6 | 	mov	arg02, local03
1ee04     0F 15 02 F1 | 	add	arg02, local01
1ee08     12 17 02 F6 | 	mov	arg03, local04
1ee0c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee10                 | '   putpixel(x0+x,y0-y,c)
1ee10     10 13 02 F6 | 	mov	arg01, local02
1ee14     14 13 02 F1 | 	add	arg01, local06
1ee18     11 15 02 F6 | 	mov	arg02, local03
1ee1c     0F 15 82 F1 | 	sub	arg02, local01
1ee20     12 17 02 F6 | 	mov	arg03, local04
1ee24     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee28                 | '   putpixel(x0+x,y0+y,c)
1ee28     10 13 02 F6 | 	mov	arg01, local02
1ee2c     14 13 02 F1 | 	add	arg01, local06
1ee30     11 15 02 F6 | 	mov	arg02, local03
1ee34     0F 15 02 F1 | 	add	arg02, local01
1ee38     12 17 02 F6 | 	mov	arg03, local04
1ee3c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee40                 | '   putpixel(x0-y,y0-x,c)
1ee40     10 13 02 F6 | 	mov	arg01, local02
1ee44     0F 13 82 F1 | 	sub	arg01, local01
1ee48     11 15 02 F6 | 	mov	arg02, local03
1ee4c     14 15 82 F1 | 	sub	arg02, local06
1ee50     12 17 02 F6 | 	mov	arg03, local04
1ee54     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee58                 | '   putpixel(x0-y,y0+x,c)
1ee58     10 13 02 F6 | 	mov	arg01, local02
1ee5c     0F 13 82 F1 | 	sub	arg01, local01
1ee60     11 15 02 F6 | 	mov	arg02, local03
1ee64     14 15 02 F1 | 	add	arg02, local06
1ee68     12 17 02 F6 | 	mov	arg03, local04
1ee6c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee70                 | '   putpixel(x0+y,y0-x,c)
1ee70     10 13 02 F6 | 	mov	arg01, local02
1ee74     0F 13 02 F1 | 	add	arg01, local01
1ee78     11 15 02 F6 | 	mov	arg02, local03
1ee7c     14 15 82 F1 | 	sub	arg02, local06
1ee80     12 17 02 F6 | 	mov	arg03, local04
1ee84     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee88                 | '   putpixel(x0+y,y0+x,c)
1ee88     10 13 02 F6 | 	mov	arg01, local02
1ee8c     0F 13 02 F1 | 	add	arg01, local01
1ee90     11 15 02 F6 | 	mov	arg02, local03
1ee94     14 15 02 F1 | 	add	arg02, local06
1ee98     12 17 02 F6 | 	mov	arg03, local04
1ee9c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eea0                 | '   if d>0 
1eea0     01 26 56 F2 | 	cmps	local05, #1 wc
1eea4     18 00 90 CD |  if_b	jmp	#LR__2501
1eea8                 | '     d+=da
1eea8     16 27 02 F1 | 	add	local05, local08
1eeac                 | '     y-=1
1eeac     01 1E 86 F1 | 	sub	local01, #1
1eeb0                 | '     x+=1
1eeb0     01 28 06 F1 | 	add	local06, #1
1eeb4                 | '     da+=4*4
1eeb4     10 2C 06 F1 | 	add	local08, #16
1eeb8                 | '     db+=2*4
1eeb8     08 2A 06 F1 | 	add	local07, #8
1eebc     18 FF 9F FD | 	jmp	#LR__2500
1eec0                 | LR__2501
1eec0                 | '   else
1eec0                 | '     d+=db
1eec0     15 27 02 F1 | 	add	local05, local07
1eec4                 | '     x+=1
1eec4     01 28 06 F1 | 	add	local06, #1
1eec8                 | '     da+=2*4
1eec8     08 2C 06 F1 | 	add	local08, #8
1eecc                 | '     db+=2*4
1eecc     08 2A 06 F1 | 	add	local07, #8
1eed0     04 FF 9F FD | 	jmp	#LR__2500
1eed4                 | LR__2502
1eed4     A7 F0 03 F6 | 	mov	ptra, fp
1eed8     B2 00 A0 FD | 	call	#popregs_
1eedc                 | _hg010b_spin2_circle_ret
1eedc     2D 00 64 FD | 	ret
1eee0                 | 
1eee0                 | '     
1eee0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1eee0                 | ' 
1eee0                 | ' pub frame(x1,y1,x2,y2,c)
1eee0                 | _hg010b_spin2_frame
1eee0     05 4A 05 F6 | 	mov	COUNT_, #5
1eee4     A8 00 A0 FD | 	call	#pushregs_
1eee8     09 1F 02 F6 | 	mov	local01, arg01
1eeec     0A 21 02 F6 | 	mov	local02, arg02
1eef0     0B 23 02 F6 | 	mov	local03, arg03
1eef4     0C 25 02 F6 | 	mov	local04, arg04
1eef8     0D 27 02 F6 | 	mov	local05, arg05
1eefc                 | ' 
1eefc                 | ' fastline(x1,x2,y1,c)
1eefc     0F 13 02 F6 | 	mov	arg01, local01
1ef00     11 15 02 F6 | 	mov	arg02, local03
1ef04     10 17 02 F6 | 	mov	arg03, local02
1ef08     13 19 02 F6 | 	mov	arg04, local05
1ef0c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef10                 | ' fastline(x1,x2,y2,c)
1ef10     0F 13 02 F6 | 	mov	arg01, local01
1ef14     11 15 02 F6 | 	mov	arg02, local03
1ef18     12 17 02 F6 | 	mov	arg03, local04
1ef1c     13 19 02 F6 | 	mov	arg04, local05
1ef20     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef24                 | ' line(x1,y1,x1,y2,c)
1ef24     0F 13 02 F6 | 	mov	arg01, local01
1ef28     10 15 02 F6 | 	mov	arg02, local02
1ef2c     0F 17 02 F6 | 	mov	arg03, local01
1ef30     12 19 02 F6 | 	mov	arg04, local04
1ef34     13 1B 02 F6 | 	mov	arg05, local05
1ef38                 | ' draw(x1,y1,x2,y2,c)
1ef38     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ef3c                 | ' line(x2,y1,x2,y2,c)
1ef3c     11 13 02 F6 | 	mov	arg01, local03
1ef40     10 15 02 F6 | 	mov	arg02, local02
1ef44     11 17 02 F6 | 	mov	arg03, local03
1ef48     12 19 02 F6 | 	mov	arg04, local04
1ef4c     13 1B 02 F6 | 	mov	arg05, local05
1ef50                 | ' draw(x1,y1,x2,y2,c)
1ef50     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ef54     A7 F0 03 F6 | 	mov	ptra, fp
1ef58     B2 00 A0 FD | 	call	#popregs_
1ef5c                 | _hg010b_spin2_frame_ret
1ef5c     2D 00 64 FD | 	ret
1ef60                 | 
1ef60                 | ' 
1ef60                 | ' '-- A box (a filled rectangle) ----------------------------------------
1ef60                 | ' 
1ef60                 | ' pub box(x1,y1,x2,y2,c) |yy
1ef60                 | _hg010b_spin2_box
1ef60     06 4A 05 F6 | 	mov	COUNT_, #6
1ef64     A8 00 A0 FD | 	call	#pushregs_
1ef68     09 1F 02 F6 | 	mov	local01, arg01
1ef6c     0A 21 02 F6 | 	mov	local02, arg02
1ef70     0B 23 02 F6 | 	mov	local03, arg03
1ef74     0C 25 02 F6 | 	mov	local04, arg04
1ef78     0D 27 02 F6 | 	mov	local05, arg05
1ef7c                 | ' 
1ef7c                 | ' repeat yy from y1 to y2
1ef7c     10 25 52 F2 | 	cmps	local04, local02 wc
1ef80     01 28 86 F6 | 	negc	local06, #1
1ef84     14 25 02 F1 | 	add	local04, local06
1ef88                 | LR__2510
1ef88                 | '   fastline(x1,x2,yy,c)
1ef88     0F 13 02 F6 | 	mov	arg01, local01
1ef8c     11 15 02 F6 | 	mov	arg02, local03
1ef90     13 19 02 F6 | 	mov	arg04, local05
1ef94     10 17 02 F6 | 	mov	arg03, local02
1ef98     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef9c     14 21 02 F1 | 	add	local02, local06
1efa0     12 21 0A F2 | 	cmp	local02, local04 wz
1efa4     E0 FF 9F 5D |  if_ne	jmp	#LR__2510
1efa8     A7 F0 03 F6 | 	mov	ptra, fp
1efac     B2 00 A0 FD | 	call	#popregs_
1efb0                 | _hg010b_spin2_box_ret
1efb0     2D 00 64 FD | 	ret
1efb4                 | 
1efb4                 | '       
1efb4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1efb4                 | _hg010b_spin2_putcharxycgf
1efb4                 | ' 
1efb4                 | '  
1efb4                 | ' repeat yy from 0 to 15
1efb4     00 00 06 F6 | 	mov	_var01, #0
1efb8     97 8C 48 FB | 	callpa	#(@LR__2522-@LR__2520)>>2,fcache_load_ptr_
1efbc                 | LR__2520
1efbc                 | ' 
1efbc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1efbc     95 E4 05 F1 | 	add	objptr, #149
1efc0     F2 02 02 FB | 	rdlong	_var02, objptr
1efc4     0A 02 66 F0 | 	shl	_var02, #10
1efc8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1efcc     01 05 02 F1 | 	add	_var03, _var02
1efd0     0B 03 02 F6 | 	mov	_var02, arg03
1efd4     04 02 66 F0 | 	shl	_var02, #4
1efd8     01 05 02 F1 | 	add	_var03, _var02
1efdc     00 05 02 F1 | 	add	_var03, _var01
1efe0     02 05 C2 FA | 	rdbyte	_var03, _var03
1efe4                 | '   asm
1efe4     00 04 0E F4 | 	testb	_var03, #0 wz
1efe8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1efec     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1eff0     01 04 0E F4 | 	testb	_var03, #1 wz
1eff4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1eff8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1effc     02 04 0E F4 | 	testb	_var03, #2 wz
1f000     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1f004     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1f008     03 04 0E F4 | 	testb	_var03, #3 wz
1f00c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1f010     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1f014     04 04 0E F4 | 	testb	_var03, #4 wz
1f018     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1f01c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1f020     05 04 0E F4 | 	testb	_var03, #5 wz
1f024     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1f028     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1f02c     06 04 0E F4 | 	testb	_var03, #6 wz
1f030     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1f034     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1f038     07 04 0E F4 | 	testb	_var03, #7 wz
1f03c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1f040     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1f044                 | '   
1f044                 | '   ccc[0]:=c1
1f044     99 E5 05 F1 | 	add	objptr, #409
1f048     F2 06 62 FC | 	wrlong	_var04, objptr
1f04c                 | '   ccc[1]:=c2 
1f04c     04 E4 05 F1 | 	add	objptr, #4
1f050     F2 08 62 FC | 	wrlong	_var05, objptr
1f054                 | '   long[mailbox0][2]:=8
1f054     49 E4 85 F1 | 	sub	objptr, #73
1f058     F2 04 02 FB | 	rdlong	_var03, objptr
1f05c     08 04 06 F1 | 	add	_var03, #8
1f060     02 11 68 FC | 	wrlong	#8, _var03
1f064                 | '   long[mailbox0][1]:=@ccc
1f064     45 E4 05 F1 | 	add	objptr, #69
1f068     F2 04 02 F6 | 	mov	_var03, objptr
1f06c     45 E4 85 F1 | 	sub	objptr, #69
1f070     F2 02 02 FB | 	rdlong	_var02, objptr
1f074     04 02 06 F1 | 	add	_var02, #4
1f078     01 05 62 FC | 	wrlong	_var03, _var02
1f07c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1f07c     0C E5 85 F1 | 	sub	objptr, #268
1f080     F2 04 02 FB | 	rdlong	_var03, objptr
1f084     0A 03 02 F6 | 	mov	_var02, arg02
1f088     00 03 02 F1 | 	add	_var02, _var01
1f08c     0A 02 66 F0 | 	shl	_var02, #10
1f090     09 0B 02 F6 | 	mov	_var06, arg01
1f094     02 0A 66 F0 | 	shl	_var06, #2
1f098     05 03 02 F1 | 	add	_var02, _var06
1f09c     01 05 02 F1 | 	add	_var03, _var02
1f0a0     00 00 78 FF 
1f0a4     00 04 06 F1 | 	add	_var03, ##-268435456
1f0a8     0C E5 05 F1 | 	add	objptr, #268
1f0ac     F2 0A 02 FB | 	rdlong	_var06, objptr
1f0b0     05 05 62 FC | 	wrlong	_var03, _var06
1f0b4                 | '   repeat
1f0b4                 | LR__2521
1f0b4     F2 04 02 FB | 	rdlong	_var03, objptr
1f0b8     02 03 02 FB | 	rdlong	_var02, _var03
1f0bc     00 02 56 F2 | 	cmps	_var02, #0 wc
1f0c0     F0 FF 9F CD |  if_b	jmp	#LR__2521
1f0c4     E9 E5 85 F1 | 	sub	objptr, #489
1f0c8     01 00 06 F1 | 	add	_var01, #1
1f0cc     10 00 56 F2 | 	cmps	_var01, #16 wc
1f0d0     E8 FE 9F CD |  if_b	jmp	#LR__2520
1f0d4                 | LR__2522
1f0d4                 | _hg010b_spin2_putcharxycgf_ret
1f0d4     2D 00 64 FD | 	ret
1f0d8                 | 
1f0d8                 | ' 
1f0d8                 | ' 
1f0d8                 | ' '**********************************************************************r***
1f0d8                 | ' '                                                                        *
1f0d8                 | ' ' Font related functions                                                 *
1f0d8                 | ' '                                                                        *
1f0d8                 | ' '*************************************************************************
1f0d8                 | ' 
1f0d8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1f0d8                 | ' 
1f0d8                 | ' pub setfontfamily(afontnum)
1f0d8                 | _hg010b_spin2_setfontfamily
1f0d8                 | ' 
1f0d8                 | ' font_family:=afontnum
1f0d8     95 E4 05 F1 | 	add	objptr, #149
1f0dc     F2 12 62 FC | 	wrlong	arg01, objptr
1f0e0     95 E4 85 F1 | 	sub	objptr, #149
1f0e4                 | ' 'if afontnum==8
1f0e4                 | ' '  font_ptr:=@amiga_font
1f0e4                 | ' 
1f0e4                 | ' if afontnum==4
1f0e4     04 12 0E F2 | 	cmp	arg01, #4 wz
1f0e8                 | '   font_ptr:=@st_font
1f0e8     08 00 00 AF 
1f0ec     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1f0f0     08 E4 05 A1 |  if_e	add	objptr, #8
1f0f4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f0f8     08 E4 85 A1 |  if_e	sub	objptr, #8
1f0fc     08 00 00 AF 
1f100     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1f104                 | ' if afontnum==0
1f104     00 12 0E F2 | 	cmp	arg01, #0 wz
1f108                 | '   font_ptr:=@vga_font
1f108     08 E4 05 A1 |  if_e	add	objptr, #8
1f10c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f110     08 E4 85 A1 |  if_e	sub	objptr, #8
1f114                 | _hg010b_spin2_setfontfamily_ret
1f114     2D 00 64 FD | 	ret
1f118                 | 
1f118                 | ' 
1f118                 | ' '*************************************************************************
1f118                 | ' '                                                                        *
1f118                 | ' '  Cursor functions                                                      *
1f118                 | ' '                                                                        *
1f118                 | ' '*************************************************************************
1f118                 | ' 
1f118                 | ' 
1f118                 | ' pub setcursorpos(x,y)
1f118                 | _hg010b_spin2_setcursorpos
1f118                 | ' 
1f118                 | ' ''---------- Set the (x,y) position of cursor
1f118                 | ' 
1f118                 | ' cursor_x:=x
1f118     3C E4 05 F1 | 	add	objptr, #60
1f11c     F2 12 52 FC | 	wrword	arg01, objptr
1f120                 | ' cursor_y:=y
1f120     02 E4 05 F1 | 	add	objptr, #2
1f124     F2 14 42 FC | 	wrbyte	arg02, objptr
1f128                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f128     02 E4 85 F1 | 	sub	objptr, #2
1f12c     F2 14 E2 FA | 	rdword	arg02, objptr
1f130     02 14 66 F0 | 	shl	arg02, #2
1f134     02 E4 05 F1 | 	add	objptr, #2
1f138     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f13c     3E E4 85 F1 | 	sub	objptr, #62
1f140     04 16 66 F0 | 	shl	arg03, #4
1f144     04 16 06 F1 | 	add	arg03, #4
1f148     11 12 06 F6 | 	mov	arg01, #17
1f14c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f150                 | _hg010b_spin2_setcursorpos_ret
1f150     2D 00 64 FD | 	ret
1f154                 | 
1f154                 | ' 
1f154                 | ' pub setcursorx(x)
1f154                 | _hg010b_spin2_setcursorx
1f154                 | ' cursor_x:=x
1f154     3C E4 05 F1 | 	add	objptr, #60
1f158     F2 12 52 FC | 	wrword	arg01, objptr
1f15c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f15c     F2 14 E2 FA | 	rdword	arg02, objptr
1f160     02 14 66 F0 | 	shl	arg02, #2
1f164     02 E4 05 F1 | 	add	objptr, #2
1f168     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f16c     3E E4 85 F1 | 	sub	objptr, #62
1f170     04 16 66 F0 | 	shl	arg03, #4
1f174     04 16 06 F1 | 	add	arg03, #4
1f178     11 12 06 F6 | 	mov	arg01, #17
1f17c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f180                 | _hg010b_spin2_setcursorx_ret
1f180     2D 00 64 FD | 	ret
1f184                 | 
1f184                 | ' 
1f184                 | ' pub setcursory(y) 
1f184                 | _hg010b_spin2_setcursory
1f184                 | ' cursor_y:=y
1f184     3E E4 05 F1 | 	add	objptr, #62
1f188     F2 12 42 FC | 	wrbyte	arg01, objptr
1f18c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1f18c     02 E4 85 F1 | 	sub	objptr, #2
1f190     F2 14 E2 FA | 	rdword	arg02, objptr
1f194     02 14 66 F0 | 	shl	arg02, #2
1f198     02 E4 05 F1 | 	add	objptr, #2
1f19c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f1a0     3E E4 85 F1 | 	sub	objptr, #62
1f1a4     04 16 66 F0 | 	shl	arg03, #4
1f1a8     04 16 06 F1 | 	add	arg03, #4
1f1ac     11 12 06 F6 | 	mov	arg01, #17
1f1b0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f1b4                 | _hg010b_spin2_setcursory_ret
1f1b4     2D 00 64 FD | 	ret
1f1b8                 | 
1f1b8                 | ' 
1f1b8                 | ' '*************************************************************************
1f1b8                 | ' '                                                                        *
1f1b8                 | ' '  VBlank functions                                                      *
1f1b8                 | ' '                                                                        *
1f1b8                 | ' '*************************************************************************
1f1b8                 | ' 
1f1b8                 | ' pub waitvbl(amount) | i
1f1b8                 | _hg010b_spin2_waitvbl
1f1b8     03 4A 05 F6 | 	mov	COUNT_, #3
1f1bc     A8 00 A0 FD | 	call	#pushregs_
1f1c0     09 1F 02 F6 | 	mov	local01, arg01
1f1c4                 | ' 
1f1c4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f1c4                 | ' 
1f1c4                 | ' repeat i from 1 to amount
1f1c4     01 20 06 F6 | 	mov	local02, #1
1f1c8     01 1E 56 F2 | 	cmps	local01, #1 wc
1f1cc     01 22 86 F6 | 	negc	local03, #1
1f1d0     11 1F 02 F1 | 	add	local01, local03
1f1d4                 | LR__2530
1f1d4                 | '   repeat until vblank==0
1f1d4                 | LR__2531
1f1d4     49 E4 05 F1 | 	add	objptr, #73
1f1d8     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f1dc     49 E4 85 F1 | 	sub	objptr, #73
1f1e0     0C 00 90 AD |  if_e	jmp	#LR__2532
1f1e4                 | '     waitus(100)
1f1e4     64 12 06 F6 | 	mov	arg01, #100
1f1e8     78 1C B0 FD | 	call	#__system___waitus
1f1ec     E4 FF 9F FD | 	jmp	#LR__2531
1f1f0                 | LR__2532
1f1f0                 | '   repeat until vblank==1
1f1f0                 | LR__2533
1f1f0     49 E4 05 F1 | 	add	objptr, #73
1f1f4     F2 12 02 FB | 	rdlong	arg01, objptr
1f1f8     49 E4 85 F1 | 	sub	objptr, #73
1f1fc     01 12 0E F2 | 	cmp	arg01, #1 wz
1f200     0C 00 90 AD |  if_e	jmp	#LR__2534
1f204                 | '     waitus(100)
1f204     64 12 06 F6 | 	mov	arg01, #100
1f208     58 1C B0 FD | 	call	#__system___waitus
1f20c     E0 FF 9F FD | 	jmp	#LR__2533
1f210                 | LR__2534
1f210     11 21 02 F1 | 	add	local02, local03
1f214     0F 21 0A F2 | 	cmp	local02, local01 wz
1f218     B8 FF 9F 5D |  if_ne	jmp	#LR__2530
1f21c     A7 F0 03 F6 | 	mov	ptra, fp
1f220     B2 00 A0 FD | 	call	#popregs_
1f224                 | _hg010b_spin2_waitvbl_ret
1f224     2D 00 64 FD | 	ret
1f228                 | 
1f228                 | ' 
1f228                 | ' 
1f228                 | ' pub cls(fc,bc)   :c,i
1f228                 | _hg010b_spin2_cls
1f228     02 4A 05 F6 | 	mov	COUNT_, #2
1f22c     A8 00 A0 FD | 	call	#pushregs_
1f230     09 1F 02 F6 | 	mov	local01, arg01
1f234     0A 21 02 F6 | 	mov	local02, arg02
1f238                 | ' 
1f238                 | ' c:=bc
1f238                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f238     DD E4 05 F1 | 	add	objptr, #221
1f23c     F2 12 02 FB | 	rdlong	arg01, objptr
1f240     A5 E4 85 F1 | 	sub	objptr, #165
1f244     F2 16 02 FB | 	rdlong	arg03, objptr
1f248     02 16 66 F0 | 	shl	arg03, #2
1f24c     10 15 02 F6 | 	mov	arg02, local02
1f250     00 18 06 F6 | 	mov	arg04, #0
1f254     01 1A 06 F6 | 	mov	arg05, #1
1f258     0B 00 00 FF 
1f25c     94 E4 05 F1 | 	add	objptr, ##5780
1f260     98 0D B0 FD | 	call	#_psram_spin2_fill
1f264                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f264     0B 00 00 FF 
1f268     C8 E4 85 F1 | 	sub	objptr, ##5832
1f26c     F2 12 02 FB | 	rdlong	arg01, objptr
1f270     04 E4 85 F1 | 	sub	objptr, #4
1f274     F2 16 02 FB | 	rdlong	arg03, objptr
1f278     09 17 82 F1 | 	sub	arg03, arg01
1f27c     20 14 06 F6 | 	mov	arg02, #32
1f280     00 18 06 F6 | 	mov	arg04, #0
1f284     01 1A 06 F6 | 	mov	arg05, #1
1f288     0B 00 00 FF 
1f28c     CC E4 05 F1 | 	add	objptr, ##5836
1f290     68 0D B0 FD | 	call	#_psram_spin2_fill
1f294                 | ' setwritecolors(fc,bc)
1f294                 | ' 
1f294                 | ' write_color:=ff
1f294     0B 00 00 FF 
1f298     8B E4 85 F1 | 	sub	objptr, ##5771
1f29c     F2 1E 62 FC | 	wrlong	local01, objptr
1f2a0                 | ' write_background:=bb
1f2a0     04 E4 05 F1 | 	add	objptr, #4
1f2a4     F2 20 62 FC | 	wrlong	local02, objptr
1f2a8                 | ' cursor_x:=0
1f2a8     09 E4 85 F1 | 	sub	objptr, #9
1f2ac     F2 00 58 FC | 	wrword	#0, objptr
1f2b0                 | ' cursor_y:=0
1f2b0     02 E4 05 F1 | 	add	objptr, #2
1f2b4     F2 00 48 FC | 	wrbyte	#0, objptr
1f2b8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f2b8     02 E4 85 F1 | 	sub	objptr, #2
1f2bc     F2 14 E2 FA | 	rdword	arg02, objptr
1f2c0     02 14 66 F0 | 	shl	arg02, #2
1f2c4     02 E4 05 F1 | 	add	objptr, #2
1f2c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2cc     3E E4 85 F1 | 	sub	objptr, #62
1f2d0     04 16 66 F0 | 	shl	arg03, #4
1f2d4     04 16 06 F1 | 	add	arg03, #4
1f2d8     11 12 06 F6 | 	mov	arg01, #17
1f2dc     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f2e0                 | ' setcursorcolor(fc)
1f2e0     0F 13 02 F6 | 	mov	arg01, local01
1f2e4     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f2e8     10 FB 01 F6 | 	mov	result1, local02
1f2ec     00 FC 05 F6 | 	mov	result2, #0
1f2f0     A7 F0 03 F6 | 	mov	ptra, fp
1f2f4     B2 00 A0 FD | 	call	#popregs_
1f2f8                 | _hg010b_spin2_cls_ret
1f2f8     2D 00 64 FD | 	ret
1f2fc                 | 
1f2fc                 | ' 
1f2fc                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f2fc                 | ' 
1f2fc                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f2fc                 | _hg010b_spin2_putchar
1f2fc     02 4A 05 F6 | 	mov	COUNT_, #2
1f300     A8 00 A0 FD | 	call	#pushregs_
1f304     09 1F 02 F6 | 	mov	local01, arg01
1f308                 | ' 
1f308                 | ' if achar==10
1f308     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f30c                 | '   crlf()
1f30c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f310                 | ' if achar==9
1f310     09 1E 0E F2 | 	cmp	local01, #9 wz
1f314     18 00 90 5D |  if_ne	jmp	#LR__2540
1f318                 | '   cursor_x:=(cursor_x& %11110000)+16
1f318     3C E4 05 F1 | 	add	objptr, #60
1f31c     F2 16 E2 FA | 	rdword	arg03, objptr
1f320     F0 16 06 F5 | 	and	arg03, #240
1f324     10 16 06 F1 | 	add	arg03, #16
1f328     F2 16 52 FC | 	wrword	arg03, objptr
1f32c     3C E4 85 F1 | 	sub	objptr, #60
1f330                 | LR__2540
1f330                 | '   
1f330                 | ' if (achar<>9) && (achar<>10) 
1f330     09 1E 0E F2 | 	cmp	local01, #9 wz
1f334     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f338     A8 00 90 AD |  if_e	jmp	#LR__2541
1f33c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f33c     3C E4 05 F1 | 	add	objptr, #60
1f340     F2 12 E2 FA | 	rdword	arg01, objptr
1f344     02 E4 05 F1 | 	add	objptr, #2
1f348     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f34c     04 14 66 F0 | 	shl	arg02, #4
1f350     04 14 06 F1 | 	add	arg02, #4
1f354     03 E4 05 F1 | 	add	objptr, #3
1f358     F2 18 02 FB | 	rdlong	arg04, objptr
1f35c     04 E4 05 F1 | 	add	objptr, #4
1f360     F2 1A 02 FB | 	rdlong	arg05, objptr
1f364     45 E4 85 F1 | 	sub	objptr, #69
1f368     0F 17 02 F6 | 	mov	arg03, local01
1f36c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f370     04 E4 05 F1 | 	add	objptr, #4
1f374     F2 12 02 FB | 	rdlong	arg01, objptr
1f378     10 00 00 FF 
1f37c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f380     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f384     3A E4 05 F1 | 	add	objptr, #58
1f388     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f38c     0D 17 02 FD | 	qmul	arg03, arg05
1f390                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f390     10 00 00 FF 
1f394     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f398     02 E4 85 F1 | 	sub	objptr, #2
1f39c     F2 20 E2 FA | 	rdword	local02, objptr
1f3a0     01 20 46 F0 | 	shr	local02, #1
1f3a4     0F 15 02 F6 | 	mov	arg02, local01
1f3a8     01 16 06 F6 | 	mov	arg03, #1
1f3ac     00 18 06 F6 | 	mov	arg04, #0
1f3b0     01 1A 06 F6 | 	mov	arg05, #1
1f3b4     0B 00 00 FF 
1f3b8     90 E4 05 F1 | 	add	objptr, ##5776
1f3bc     18 1E 62 FD | 	getqx	local01
1f3c0     10 1F 02 F1 | 	add	local01, local02
1f3c4     0F 13 02 F1 | 	add	arg01, local01
1f3c8     30 0C B0 FD | 	call	#_psram_spin2_fill
1f3cc                 | '   cursor_x+=2
1f3cc     0B 00 00 FF 
1f3d0     90 E4 85 F1 | 	sub	objptr, ##5776
1f3d4     F2 20 E2 FA | 	rdword	local02, objptr
1f3d8     02 20 06 F1 | 	add	local02, #2
1f3dc     F2 20 52 FC | 	wrword	local02, objptr
1f3e0     3C E4 85 F1 | 	sub	objptr, #60
1f3e4                 | LR__2541
1f3e4                 | ' 
1f3e4                 | ' if cursor_x>=256
1f3e4     3C E4 05 F1 | 	add	objptr, #60
1f3e8     F2 20 E2 FA | 	rdword	local02, objptr
1f3ec     3C E4 85 F1 | 	sub	objptr, #60
1f3f0     00 21 56 F2 | 	cmps	local02, #256 wc
1f3f4     64 00 90 CD |  if_b	jmp	#LR__2543
1f3f8                 | '   cursor_x:=0
1f3f8     3C E4 05 F1 | 	add	objptr, #60
1f3fc     F2 00 58 FC | 	wrword	#0, objptr
1f400                 | '   cursor_y+=1
1f400     02 E4 05 F1 | 	add	objptr, #2
1f404     F2 20 C2 FA | 	rdbyte	local02, objptr
1f408     01 20 06 F1 | 	add	local02, #1
1f40c     F2 20 42 FC | 	wrbyte	local02, objptr
1f410                 | '   if cursor_y>st_lines-1
1f410     C3 E4 05 F1 | 	add	objptr, #195
1f414     F2 20 02 FB | 	rdlong	local02, objptr
1f418     01 20 86 F1 | 	sub	local02, #1
1f41c     C3 E4 85 F1 | 	sub	objptr, #195
1f420     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f424     3E E4 85 F1 | 	sub	objptr, #62
1f428     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f42c     2C 00 90 ED |  if_be	jmp	#LR__2542
1f430                 | '     scrollup2()
1f430     00 12 06 F6 | 	mov	arg01, #0
1f434     01 00 00 FF 
1f438     58 14 06 F6 | 	mov	arg02, ##600
1f43c     10 16 06 F6 | 	mov	arg03, #16
1f440     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f444                 | '     cursor_y:=st_lines-1
1f444     01 E5 05 F1 | 	add	objptr, #257
1f448     F2 20 02 FB | 	rdlong	local02, objptr
1f44c     01 20 86 F1 | 	sub	local02, #1
1f450     C3 E4 85 F1 | 	sub	objptr, #195
1f454     F2 20 42 FC | 	wrbyte	local02, objptr
1f458     3E E4 85 F1 | 	sub	objptr, #62
1f45c                 | LR__2542
1f45c                 | LR__2543
1f45c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f45c     3C E4 05 F1 | 	add	objptr, #60
1f460     F2 14 E2 FA | 	rdword	arg02, objptr
1f464     02 14 66 F0 | 	shl	arg02, #2
1f468     02 E4 05 F1 | 	add	objptr, #2
1f46c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f470     3E E4 85 F1 | 	sub	objptr, #62
1f474     04 16 66 F0 | 	shl	arg03, #4
1f478     04 16 06 F1 | 	add	arg03, #4
1f47c     11 12 06 F6 | 	mov	arg01, #17
1f480     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f484     A7 F0 03 F6 | 	mov	ptra, fp
1f488     B2 00 A0 FD | 	call	#popregs_
1f48c                 | _hg010b_spin2_putchar_ret
1f48c     2D 00 64 FD | 	ret
1f490                 | 
1f490                 | '     
1f490                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f490                 | ' 
1f490                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f490                 | _hg010b_spin2_putchar2
1f490     02 4A 05 F6 | 	mov	COUNT_, #2
1f494     A8 00 A0 FD | 	call	#pushregs_
1f498     09 1F 02 F6 | 	mov	local01, arg01
1f49c                 | ' 
1f49c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f49c     3C E4 05 F1 | 	add	objptr, #60
1f4a0     F2 12 E2 FA | 	rdword	arg01, objptr
1f4a4     02 E4 05 F1 | 	add	objptr, #2
1f4a8     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f4ac     04 14 66 F0 | 	shl	arg02, #4
1f4b0     04 14 06 F1 | 	add	arg02, #4
1f4b4     03 E4 05 F1 | 	add	objptr, #3
1f4b8     F2 18 02 FB | 	rdlong	arg04, objptr
1f4bc     04 E4 05 F1 | 	add	objptr, #4
1f4c0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4c4     45 E4 85 F1 | 	sub	objptr, #69
1f4c8     0F 17 02 F6 | 	mov	arg03, local01
1f4cc     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f4d0     04 E4 05 F1 | 	add	objptr, #4
1f4d4     F2 12 02 FB | 	rdlong	arg01, objptr
1f4d8     10 00 00 FF 
1f4dc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f4e0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f4e4     3A E4 05 F1 | 	add	objptr, #58
1f4e8     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f4ec     0D 17 02 FD | 	qmul	arg03, arg05
1f4f0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f4f0     10 00 00 FF 
1f4f4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f4f8     02 E4 85 F1 | 	sub	objptr, #2
1f4fc     F2 20 E2 FA | 	rdword	local02, objptr
1f500     01 20 46 F0 | 	shr	local02, #1
1f504     0F 15 02 F6 | 	mov	arg02, local01
1f508     01 16 06 F6 | 	mov	arg03, #1
1f50c     00 18 06 F6 | 	mov	arg04, #0
1f510     01 1A 06 F6 | 	mov	arg05, #1
1f514     0B 00 00 FF 
1f518     90 E4 05 F1 | 	add	objptr, ##5776
1f51c     18 1E 62 FD | 	getqx	local01
1f520     10 1F 02 F1 | 	add	local01, local02
1f524     0F 13 02 F1 | 	add	arg01, local01
1f528     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f52c                 | ' 
1f52c                 | ' cursor_x+=2
1f52c     0B 00 00 FF 
1f530     90 E4 85 F1 | 	sub	objptr, ##5776
1f534     F2 20 E2 FA | 	rdword	local02, objptr
1f538     02 20 06 F1 | 	add	local02, #2
1f53c     F2 20 52 FC | 	wrword	local02, objptr
1f540                 | ' if cursor_x>=256
1f540     F2 20 E2 FA | 	rdword	local02, objptr
1f544     3C E4 85 F1 | 	sub	objptr, #60
1f548     00 21 56 F2 | 	cmps	local02, #256 wc
1f54c     64 00 90 CD |  if_b	jmp	#LR__2551
1f550                 | '   cursor_x:=0
1f550     3C E4 05 F1 | 	add	objptr, #60
1f554     F2 00 58 FC | 	wrword	#0, objptr
1f558                 | '   cursor_y+=1
1f558     02 E4 05 F1 | 	add	objptr, #2
1f55c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f560     01 20 06 F1 | 	add	local02, #1
1f564     F2 20 42 FC | 	wrbyte	local02, objptr
1f568                 | '   if cursor_y>st_lines-1
1f568     C3 E4 05 F1 | 	add	objptr, #195
1f56c     F2 20 02 FB | 	rdlong	local02, objptr
1f570     01 20 86 F1 | 	sub	local02, #1
1f574     C3 E4 85 F1 | 	sub	objptr, #195
1f578     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f57c     3E E4 85 F1 | 	sub	objptr, #62
1f580     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f584     2C 00 90 ED |  if_be	jmp	#LR__2550
1f588                 | '     scrollup2()
1f588     00 12 06 F6 | 	mov	arg01, #0
1f58c     01 00 00 FF 
1f590     58 14 06 F6 | 	mov	arg02, ##600
1f594     10 16 06 F6 | 	mov	arg03, #16
1f598     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f59c                 | '     cursor_y:=st_lines-1
1f59c     01 E5 05 F1 | 	add	objptr, #257
1f5a0     F2 20 02 FB | 	rdlong	local02, objptr
1f5a4     01 20 86 F1 | 	sub	local02, #1
1f5a8     C3 E4 85 F1 | 	sub	objptr, #195
1f5ac     F2 20 42 FC | 	wrbyte	local02, objptr
1f5b0     3E E4 85 F1 | 	sub	objptr, #62
1f5b4                 | LR__2550
1f5b4                 | LR__2551
1f5b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f5b4     3C E4 05 F1 | 	add	objptr, #60
1f5b8     F2 14 E2 FA | 	rdword	arg02, objptr
1f5bc     02 14 66 F0 | 	shl	arg02, #2
1f5c0     02 E4 05 F1 | 	add	objptr, #2
1f5c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f5c8     3E E4 85 F1 | 	sub	objptr, #62
1f5cc     04 16 66 F0 | 	shl	arg03, #4
1f5d0     04 16 06 F1 | 	add	arg03, #4
1f5d4     11 12 06 F6 | 	mov	arg01, #17
1f5d8     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f5dc     A7 F0 03 F6 | 	mov	ptra, fp
1f5e0     B2 00 A0 FD | 	call	#popregs_
1f5e4                 | _hg010b_spin2_putchar2_ret
1f5e4     2D 00 64 FD | 	ret
1f5e8                 | 
1f5e8                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f5e8                 | ' 
1f5e8                 | ' pub write(text) | iii,c,ncx,ncy
1f5e8                 | _hg010b_spin2_write
1f5e8     04 4A 05 F6 | 	mov	COUNT_, #4
1f5ec     A8 00 A0 FD | 	call	#pushregs_
1f5f0     09 1F 02 F6 | 	mov	local01, arg01
1f5f4                 | ' 
1f5f4                 | ' repeat iii from 0 to strsize(text)-1
1f5f4     00 20 06 F6 | 	mov	local02, #0
1f5f8     0F 13 02 F6 | 	mov	arg01, local01
1f5fc     09 23 02 F6 | 	mov	local03, arg01
1f600     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f604                 | LR__2560
1f604     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f608     01 22 06 51 |  if_ne	add	local03, #1
1f60c     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1f610                 | LR__2561
1f610     09 23 82 F1 | 	sub	local03, arg01
1f614     01 22 86 F1 | 	sub	local03, #1
1f618     00 22 56 F2 | 	cmps	local03, #0 wc
1f61c     01 24 86 F6 | 	negc	local04, #1
1f620     12 23 02 F1 | 	add	local03, local04
1f624                 | LR__2562
1f624                 | '   putchar2(byte[text+iii])
1f624     0F 13 02 F6 | 	mov	arg01, local01
1f628     10 13 02 F1 | 	add	arg01, local02
1f62c     09 13 C2 FA | 	rdbyte	arg01, arg01
1f630     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f634     12 21 02 F1 | 	add	local02, local04
1f638     11 21 0A F2 | 	cmp	local02, local03 wz
1f63c     E4 FF 9F 5D |  if_ne	jmp	#LR__2562
1f640     A7 F0 03 F6 | 	mov	ptra, fp
1f644     B2 00 A0 FD | 	call	#popregs_
1f648                 | _hg010b_spin2_write_ret
1f648     2D 00 64 FD | 	ret
1f64c                 | 
1f64c                 | '    
1f64c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f64c                 | ' 
1f64c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f64c                 | _hg010b_spin2_scrollup2
1f64c     03 4A 05 F6 | 	mov	COUNT_, #3
1f650     A8 00 A0 FD | 	call	#pushregs_
1f654                 | ' 	
1f654                 | ' repeat i from 4 to 579 
1f654     04 1E 06 F6 | 	mov	local01, #4
1f658                 | LR__2570
1f658     F9 E4 05 F1 | 	add	objptr, #249
1f65c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f660     1C E4 85 F1 | 	sub	objptr, #28
1f664     F2 14 02 FB | 	rdlong	arg02, objptr
1f668     0F 19 02 F6 | 	mov	arg04, local01
1f66c     10 18 06 F1 | 	add	arg04, #16
1f670     02 18 66 F0 | 	shl	arg04, #2
1f674     14 E4 05 F1 | 	add	objptr, #20
1f678     F2 16 02 FB | 	rdlong	arg03, objptr
1f67c     0B 19 02 FD | 	qmul	arg04, arg03
1f680                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f680     F6 03 00 FF 
1f684     00 12 06 F6 | 	mov	arg01, ##519168
1f688     0D 13 82 F1 | 	sub	arg01, arg05
1f68c     02 16 66 F0 | 	shl	arg03, #2
1f690     0A 00 00 FF 
1f694     DB E5 05 F1 | 	add	objptr, ##5595
1f698     18 1A 62 FD | 	getqx	arg05
1f69c     0D 15 02 F1 | 	add	arg02, arg05
1f6a0     20 08 B0 FD | 	call	#_psram_spin2_read1
1f6a4     0A 00 00 FF 
1f6a8     D3 E5 85 F1 | 	sub	objptr, ##5587
1f6ac     F2 1A 02 FB | 	rdlong	arg05, objptr
1f6b0     1C E4 85 F1 | 	sub	objptr, #28
1f6b4     F2 14 02 FB | 	rdlong	arg02, objptr
1f6b8     0F 19 02 F6 | 	mov	arg04, local01
1f6bc     02 18 66 F0 | 	shl	arg04, #2
1f6c0     14 E4 05 F1 | 	add	objptr, #20
1f6c4     F2 16 02 FB | 	rdlong	arg03, objptr
1f6c8     0B 19 02 FD | 	qmul	arg04, arg03
1f6cc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f6cc     F6 03 00 FF 
1f6d0     00 12 06 F6 | 	mov	arg01, ##519168
1f6d4     0D 13 82 F1 | 	sub	arg01, arg05
1f6d8     02 16 66 F0 | 	shl	arg03, #2
1f6dc     0A 00 00 FF 
1f6e0     DB E5 05 F1 | 	add	objptr, ##5595
1f6e4     18 1A 62 FD | 	getqx	arg05
1f6e8     0D 15 02 F1 | 	add	arg02, arg05
1f6ec     70 08 B0 FD | 	call	#_psram_spin2_write
1f6f0     0B 00 00 FF 
1f6f4     CC E4 85 F1 | 	sub	objptr, ##5836
1f6f8     01 1E 06 F1 | 	add	local01, #1
1f6fc     01 00 00 FF 
1f700     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f704     50 FF 9F CD |  if_b	jmp	#LR__2570
1f708                 | ' 
1f708                 | ' repeat i from 580 to 599
1f708     01 00 00 FF 
1f70c     44 1E 06 F6 | 	mov	local01, ##580
1f710                 | LR__2571
1f710                 | '    fastline(0,1023,i,write_background)   
1f710     45 E4 05 F1 | 	add	objptr, #69
1f714     F2 18 02 FB | 	rdlong	arg04, objptr
1f718     45 E4 85 F1 | 	sub	objptr, #69
1f71c     00 12 06 F6 | 	mov	arg01, #0
1f720     09 14 CE F9 | 	bmask	arg02, #9
1f724     0F 17 02 F6 | 	mov	arg03, local01
1f728     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f72c     01 1E 06 F1 | 	add	local01, #1
1f730     01 00 00 FF 
1f734     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f738     D4 FF 9F CD |  if_b	jmp	#LR__2571
1f73c                 | ' repeat i from 0 to 3
1f73c     00 1E 06 F6 | 	mov	local01, #0
1f740                 | LR__2572
1f740                 | '    fastline(0,1023,i,write_background)      
1f740     45 E4 05 F1 | 	add	objptr, #69
1f744     F2 18 02 FB | 	rdlong	arg04, objptr
1f748     45 E4 85 F1 | 	sub	objptr, #69
1f74c     00 12 06 F6 | 	mov	arg01, #0
1f750     09 14 CE F9 | 	bmask	arg02, #9
1f754     0F 17 02 F6 | 	mov	arg03, local01
1f758     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f75c     01 1E 06 F1 | 	add	local01, #1
1f760     04 1E 56 F2 | 	cmps	local01, #4 wc
1f764     D8 FF 9F CD |  if_b	jmp	#LR__2572
1f768                 | ' 
1f768                 | ' repeat i from 0 to 35
1f768     00 1E 06 F6 | 	mov	local01, #0
1f76c                 | LR__2573
1f76c     0F 1B 02 F6 | 	mov	arg05, local01
1f770     01 1A 06 F1 | 	add	arg05, #1
1f774     10 00 00 FF 
1f778     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f77c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f780     0B 1B 02 FD | 	qmul	arg05, arg03
1f784                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f784     F6 03 00 FF 
1f788     00 12 06 F6 | 	mov	arg01, ##519168
1f78c     F9 E4 05 F1 | 	add	objptr, #249
1f790     F2 1A 02 FB | 	rdlong	arg05, objptr
1f794     0D 13 82 F1 | 	sub	arg01, arg05
1f798     F5 E4 85 F1 | 	sub	objptr, #245
1f79c     F2 14 02 FB | 	rdlong	arg02, objptr
1f7a0     10 00 00 FF 
1f7a4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f7a8     0B 00 00 FF 
1f7ac     C8 E4 05 F1 | 	add	objptr, ##5832
1f7b0     18 1A 62 FD | 	getqx	arg05
1f7b4     0D 15 02 F1 | 	add	arg02, arg05
1f7b8     08 07 B0 FD | 	call	#_psram_spin2_read1
1f7bc     10 00 00 FF 
1f7c0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f7c4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f7c8     0B 1F 02 FD | 	qmul	local01, arg03
1f7cc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f7cc     F6 03 00 FF 
1f7d0     00 12 06 F6 | 	mov	arg01, ##519168
1f7d4     0A 00 00 FF 
1f7d8     D3 E5 85 F1 | 	sub	objptr, ##5587
1f7dc     F2 1A 02 FB | 	rdlong	arg05, objptr
1f7e0     0D 13 82 F1 | 	sub	arg01, arg05
1f7e4     F5 E4 85 F1 | 	sub	objptr, #245
1f7e8     F2 14 02 FB | 	rdlong	arg02, objptr
1f7ec     10 00 00 FF 
1f7f0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f7f4     0B 00 00 FF 
1f7f8     C8 E4 05 F1 | 	add	objptr, ##5832
1f7fc     18 1A 62 FD | 	getqx	arg05
1f800     0D 15 02 F1 | 	add	arg02, arg05
1f804     58 07 B0 FD | 	call	#_psram_spin2_write
1f808     0B 00 00 FF 
1f80c     CC E4 85 F1 | 	sub	objptr, ##5836
1f810     01 1E 06 F1 | 	add	local01, #1
1f814     24 1E 56 F2 | 	cmps	local01, #36 wc
1f818     50 FF 9F CD |  if_b	jmp	#LR__2573
1f81c                 | ' repeat i from 0 to timings[7]-1
1f81c     00 1E 06 F6 | 	mov	local01, #0
1f820     10 00 00 FF 
1f824     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f828     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f82c     10 00 00 FF 
1f830     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f834     01 20 86 F1 | 	sub	local02, #1
1f838     00 20 56 F2 | 	cmps	local02, #0 wc
1f83c     01 22 86 F6 | 	negc	local03, #1
1f840     11 21 02 F1 | 	add	local02, local03
1f844                 | LR__2574
1f844                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f844     04 E4 05 F1 | 	add	objptr, #4
1f848     F2 12 02 FB | 	rdlong	arg01, objptr
1f84c     10 00 00 FF 
1f850     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f854     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f858     10 00 00 FF 
1f85c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f860     0D 19 02 F6 | 	mov	arg04, arg05
1f864     03 18 66 F0 | 	shl	arg04, #3
1f868     0D 19 02 F1 | 	add	arg04, arg05
1f86c     02 18 66 F0 | 	shl	arg04, #2
1f870     0F 19 02 F1 | 	add	arg04, local01
1f874     0C 13 02 F1 | 	add	arg01, arg04
1f878     20 14 06 F6 | 	mov	arg02, #32
1f87c     01 16 06 F6 | 	mov	arg03, #1
1f880     00 18 06 F6 | 	mov	arg04, #0
1f884     01 1A 06 F6 | 	mov	arg05, #1
1f888     0B 00 00 FF 
1f88c     C8 E4 05 F1 | 	add	objptr, ##5832
1f890     68 07 B0 FD | 	call	#_psram_spin2_fill
1f894     0B 00 00 FF 
1f898     CC E4 85 F1 | 	sub	objptr, ##5836
1f89c     11 1F 02 F1 | 	add	local01, local03
1f8a0     10 1F 0A F2 | 	cmp	local01, local02 wz
1f8a4     9C FF 9F 5D |  if_ne	jmp	#LR__2574
1f8a8     A7 F0 03 F6 | 	mov	ptra, fp
1f8ac     B2 00 A0 FD | 	call	#popregs_
1f8b0                 | _hg010b_spin2_scrollup2_ret
1f8b0     2D 00 64 FD | 	ret
1f8b4                 | 
1f8b4                 | '  
1f8b4                 | ' ''----------- Scroll the screen one line down 
1f8b4                 | ' 
1f8b4                 | ' pub scrolldown(start=0) | i
1f8b4                 | _hg010b_spin2_scrolldown
1f8b4     05 4A 05 F6 | 	mov	COUNT_, #5
1f8b8     A8 00 A0 FD | 	call	#pushregs_
1f8bc     09 1F 02 F6 | 	mov	local01, arg01
1f8c0                 | ' 
1f8c0                 | ' repeat i from 579 to (start*16)+4
1f8c0     01 00 00 FF 
1f8c4     43 20 06 F6 | 	mov	local02, ##579
1f8c8     0F 23 02 F6 | 	mov	local03, local01
1f8cc     04 22 66 F0 | 	shl	local03, #4
1f8d0     04 22 06 F1 | 	add	local03, #4
1f8d4     01 00 00 FF 
1f8d8     43 22 56 F2 | 	cmps	local03, ##579 wc
1f8dc     01 24 86 F6 | 	negc	local04, #1
1f8e0     12 27 02 F6 | 	mov	local05, local04
1f8e4     12 23 02 F1 | 	add	local03, local04
1f8e8                 | LR__2580
1f8e8     F9 E4 05 F1 | 	add	objptr, #249
1f8ec     F2 24 02 FB | 	rdlong	local04, objptr
1f8f0     1C E4 85 F1 | 	sub	objptr, #28
1f8f4     F2 14 02 FB | 	rdlong	arg02, objptr
1f8f8     10 1B 02 F6 | 	mov	arg05, local02
1f8fc     02 1A 66 F0 | 	shl	arg05, #2
1f900     14 E4 05 F1 | 	add	objptr, #20
1f904     F2 16 02 FB | 	rdlong	arg03, objptr
1f908     0B 1B 02 FD | 	qmul	arg05, arg03
1f90c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f90c     F6 03 00 FF 
1f910     00 12 06 F6 | 	mov	arg01, ##519168
1f914     12 13 82 F1 | 	sub	arg01, local04
1f918     02 16 66 F0 | 	shl	arg03, #2
1f91c     0A 00 00 FF 
1f920     DB E5 05 F1 | 	add	objptr, ##5595
1f924     18 24 62 FD | 	getqx	local04
1f928     12 15 02 F1 | 	add	arg02, local04
1f92c     94 05 B0 FD | 	call	#_psram_spin2_read1
1f930     0A 00 00 FF 
1f934     D3 E5 85 F1 | 	sub	objptr, ##5587
1f938     F2 24 02 FB | 	rdlong	local04, objptr
1f93c     1C E4 85 F1 | 	sub	objptr, #28
1f940     F2 14 02 FB | 	rdlong	arg02, objptr
1f944     10 1B 02 F6 | 	mov	arg05, local02
1f948     10 1A 06 F1 | 	add	arg05, #16
1f94c     02 1A 66 F0 | 	shl	arg05, #2
1f950     14 E4 05 F1 | 	add	objptr, #20
1f954     F2 16 02 FB | 	rdlong	arg03, objptr
1f958     0B 1B 02 FD | 	qmul	arg05, arg03
1f95c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f95c     F6 03 00 FF 
1f960     00 12 06 F6 | 	mov	arg01, ##519168
1f964     12 13 82 F1 | 	sub	arg01, local04
1f968     02 16 66 F0 | 	shl	arg03, #2
1f96c     0A 00 00 FF 
1f970     DB E5 05 F1 | 	add	objptr, ##5595
1f974     18 24 62 FD | 	getqx	local04
1f978     12 15 02 F1 | 	add	arg02, local04
1f97c     E0 05 B0 FD | 	call	#_psram_spin2_write
1f980     0B 00 00 FF 
1f984     CC E4 85 F1 | 	sub	objptr, ##5836
1f988     13 21 02 F1 | 	add	local02, local05
1f98c     11 21 0A F2 | 	cmp	local02, local03 wz
1f990     54 FF 9F 5D |  if_ne	jmp	#LR__2580
1f994                 | ' 
1f994                 | ' repeat i from (start*16)+4 to (start*16)+19
1f994     0F 21 02 F6 | 	mov	local02, local01
1f998     04 20 66 F0 | 	shl	local02, #4
1f99c     04 20 06 F1 | 	add	local02, #4
1f9a0     0F 27 02 F6 | 	mov	local05, local01
1f9a4     04 26 66 F0 | 	shl	local05, #4
1f9a8     13 26 06 F1 | 	add	local05, #19
1f9ac     0F 25 02 F6 | 	mov	local04, local01
1f9b0     04 24 66 F0 | 	shl	local04, #4
1f9b4     04 24 06 F1 | 	add	local04, #4
1f9b8     12 27 52 F2 | 	cmps	local05, local04 wc
1f9bc     01 24 86 F6 | 	negc	local04, #1
1f9c0     12 23 02 F6 | 	mov	local03, local04
1f9c4     12 27 02 F1 | 	add	local05, local04
1f9c8                 | LR__2581
1f9c8                 | '    fastline(0,1023,i,write_background)    
1f9c8     45 E4 05 F1 | 	add	objptr, #69
1f9cc     F2 18 02 FB | 	rdlong	arg04, objptr
1f9d0     45 E4 85 F1 | 	sub	objptr, #69
1f9d4     00 12 06 F6 | 	mov	arg01, #0
1f9d8     09 14 CE F9 | 	bmask	arg02, #9
1f9dc     10 17 02 F6 | 	mov	arg03, local02
1f9e0     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f9e4     11 21 02 F1 | 	add	local02, local03
1f9e8     13 21 0A F2 | 	cmp	local02, local05 wz
1f9ec     D8 FF 9F 5D |  if_ne	jmp	#LR__2581
1f9f0                 | '    
1f9f0                 | ' repeat i from 35 to start
1f9f0     23 20 06 F6 | 	mov	local02, #35
1f9f4     23 1E 56 F2 | 	cmps	local01, #35 wc
1f9f8     01 24 86 F6 | 	negc	local04, #1
1f9fc     0F 27 02 F6 | 	mov	local05, local01
1fa00     12 27 02 F1 | 	add	local05, local04
1fa04                 | LR__2582
1fa04                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1fa04     F6 03 00 FF 
1fa08     00 12 06 F6 | 	mov	arg01, ##519168
1fa0c     F9 E4 05 F1 | 	add	objptr, #249
1fa10     F2 22 02 FB | 	rdlong	local03, objptr
1fa14     11 13 82 F1 | 	sub	arg01, local03
1fa18     F5 E4 85 F1 | 	sub	objptr, #245
1fa1c     F2 14 02 FB | 	rdlong	arg02, objptr
1fa20     10 23 02 F6 | 	mov	local03, local02
1fa24     07 22 66 F0 | 	shl	local03, #7
1fa28     11 15 02 F1 | 	add	arg02, local03
1fa2c     80 16 06 F6 | 	mov	arg03, #128
1fa30     0B 00 00 FF 
1fa34     C8 E4 05 F1 | 	add	objptr, ##5832
1fa38     88 04 B0 FD | 	call	#_psram_spin2_read1
1fa3c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1fa3c     F6 03 00 FF 
1fa40     00 12 06 F6 | 	mov	arg01, ##519168
1fa44     0A 00 00 FF 
1fa48     D3 E5 85 F1 | 	sub	objptr, ##5587
1fa4c     F2 22 02 FB | 	rdlong	local03, objptr
1fa50     11 13 82 F1 | 	sub	arg01, local03
1fa54     F5 E4 85 F1 | 	sub	objptr, #245
1fa58     F2 14 02 FB | 	rdlong	arg02, objptr
1fa5c     10 23 02 F6 | 	mov	local03, local02
1fa60     01 22 06 F1 | 	add	local03, #1
1fa64     07 22 66 F0 | 	shl	local03, #7
1fa68     11 15 02 F1 | 	add	arg02, local03
1fa6c     80 16 06 F6 | 	mov	arg03, #128
1fa70     0B 00 00 FF 
1fa74     C8 E4 05 F1 | 	add	objptr, ##5832
1fa78     E4 04 B0 FD | 	call	#_psram_spin2_write
1fa7c     0B 00 00 FF 
1fa80     CC E4 85 F1 | 	sub	objptr, ##5836
1fa84     12 21 02 F1 | 	add	local02, local04
1fa88     13 21 0A F2 | 	cmp	local02, local05 wz
1fa8c     74 FF 9F 5D |  if_ne	jmp	#LR__2582
1fa90                 | ' repeat i from 0 to 127
1fa90     00 20 06 F6 | 	mov	local02, #0
1fa94                 | LR__2583
1fa94                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1fa94     04 E4 05 F1 | 	add	objptr, #4
1fa98     F2 12 02 FB | 	rdlong	arg01, objptr
1fa9c     0F 27 02 F6 | 	mov	local05, local01
1faa0     07 26 66 F0 | 	shl	local05, #7
1faa4     13 13 02 F1 | 	add	arg01, local05
1faa8     10 13 02 F1 | 	add	arg01, local02
1faac     20 14 06 F6 | 	mov	arg02, #32
1fab0     01 16 06 F6 | 	mov	arg03, #1
1fab4     00 18 06 F6 | 	mov	arg04, #0
1fab8     01 1A 06 F6 | 	mov	arg05, #1
1fabc     0B 00 00 FF 
1fac0     C8 E4 05 F1 | 	add	objptr, ##5832
1fac4     34 05 B0 FD | 	call	#_psram_spin2_fill
1fac8     0B 00 00 FF 
1facc     CC E4 85 F1 | 	sub	objptr, ##5836
1fad0     01 20 06 F1 | 	add	local02, #1
1fad4     80 20 56 F2 | 	cmps	local02, #128 wc
1fad8     B8 FF 9F CD |  if_b	jmp	#LR__2583
1fadc     A7 F0 03 F6 | 	mov	ptra, fp
1fae0     B2 00 A0 FD | 	call	#popregs_
1fae4                 | _hg010b_spin2_scrolldown_ret
1fae4     2D 00 64 FD | 	ret
1fae8                 | 
1fae8                 | ' 
1fae8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1fae8                 | ' 
1fae8                 | ' pub crlf()
1fae8                 | _hg010b_spin2_crlf
1fae8                 | ' 
1fae8                 | ' cursor_x:=leading_spaces*2
1fae8     01 00 00 FF 
1faec     B6 E4 05 F1 | 	add	objptr, ##694
1faf0     F2 16 02 FB | 	rdlong	arg03, objptr
1faf4     01 16 66 F0 | 	shl	arg03, #1
1faf8     01 00 00 FF 
1fafc     7A E4 85 F1 | 	sub	objptr, ##634
1fb00     F2 16 52 FC | 	wrword	arg03, objptr
1fb04                 | ' cursor_y+=1
1fb04     02 E4 05 F1 | 	add	objptr, #2
1fb08     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fb0c     01 16 06 F1 | 	add	arg03, #1
1fb10     F2 16 42 FC | 	wrbyte	arg03, objptr
1fb14                 | ' if cursor_y>st_lines-1
1fb14     C3 E4 05 F1 | 	add	objptr, #195
1fb18     F2 16 02 FB | 	rdlong	arg03, objptr
1fb1c     01 16 86 F1 | 	sub	arg03, #1
1fb20     C3 E4 85 F1 | 	sub	objptr, #195
1fb24     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fb28     3E E4 85 F1 | 	sub	objptr, #62
1fb2c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1fb30     2C 00 90 ED |  if_be	jmp	#LR__2590
1fb34                 | '   scrollup2()
1fb34     00 12 06 F6 | 	mov	arg01, #0
1fb38     01 00 00 FF 
1fb3c     58 14 06 F6 | 	mov	arg02, ##600
1fb40     10 16 06 F6 | 	mov	arg03, #16
1fb44     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1fb48                 | '   cursor_y:=st_lines-1
1fb48     01 E5 05 F1 | 	add	objptr, #257
1fb4c     F2 16 02 FB | 	rdlong	arg03, objptr
1fb50     01 16 86 F1 | 	sub	arg03, #1
1fb54     C3 E4 85 F1 | 	sub	objptr, #195
1fb58     F2 16 42 FC | 	wrbyte	arg03, objptr
1fb5c     3E E4 85 F1 | 	sub	objptr, #62
1fb60                 | LR__2590
1fb60                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1fb60     3C E4 05 F1 | 	add	objptr, #60
1fb64     F2 14 E2 FA | 	rdword	arg02, objptr
1fb68     02 14 66 F0 | 	shl	arg02, #2
1fb6c     02 E4 05 F1 | 	add	objptr, #2
1fb70     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fb74     3E E4 85 F1 | 	sub	objptr, #62
1fb78     04 16 66 F0 | 	shl	arg03, #4
1fb7c     04 16 06 F1 | 	add	arg03, #4
1fb80     11 12 06 F6 | 	mov	arg01, #17
1fb84     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1fb88                 | _hg010b_spin2_crlf_ret
1fb88     2D 00 64 FD | 	ret
1fb8c                 | 
1fb8c                 | ' 
1fb8c                 | ' 
1fb8c                 | ' '*************************************************************************
1fb8c                 | ' '                                                                        *
1fb8c                 | ' '  Conversions                                                           *
1fb8c                 | ' '                                                                        *
1fb8c                 | ' '*************************************************************************
1fb8c                 | ' 
1fb8c                 | ' ''---------- Convert a integer to dec string, return a pointer
1fb8c                 | ' 
1fb8c                 | ' pub inttostr(i):result |q,pos,k,j
1fb8c                 | _hg010b_spin2_inttostr
1fb8c     03 4A 05 F6 | 	mov	COUNT_, #3
1fb90     A8 00 A0 FD | 	call	#pushregs_
1fb94     09 1F 0A F6 | 	mov	local01, arg01 wz
1fb98                 | ' 
1fb98                 | ' j:=i
1fb98                 | ' pos:=10
1fb98     0A 20 06 F6 | 	mov	local02, #10
1fb9c                 | ' k:=0
1fb9c     00 22 06 F6 | 	mov	local03, #0
1fba0                 | ' 
1fba0                 | ' if (j==0)
1fba0     18 00 90 5D |  if_ne	jmp	#LR__2600
1fba4                 | '   n_string[0]:=48
1fba4     4D E4 05 F1 | 	add	objptr, #77
1fba8     F2 60 48 FC | 	wrbyte	#48, objptr
1fbac                 | '   n_string[1]:=0
1fbac     01 E4 05 F1 | 	add	objptr, #1
1fbb0     F2 00 48 FC | 	wrbyte	#0, objptr
1fbb4     4E E4 85 F1 | 	sub	objptr, #78
1fbb8     C4 00 90 FD | 	jmp	#LR__2607
1fbbc                 | LR__2600
1fbbc                 | ' 
1fbbc                 | ' else
1fbbc                 | '   if (j<0)
1fbbc     0F 1F 52 F6 | 	abs	local01, local01 wc
1fbc0                 | '     j:=0-j
1fbc0                 | '     k:=45
1fbc0     2D 22 06 C6 |  if_b	mov	local03, #45
1fbc4                 | ' 
1fbc4                 | '   n_string[11]:=0
1fbc4     58 E4 05 F1 | 	add	objptr, #88
1fbc8     F2 00 48 FC | 	wrbyte	#0, objptr
1fbcc     58 E4 85 F1 | 	sub	objptr, #88
1fbd0     97 24 48 FB | 	callpa	#(@LR__2602-@LR__2601)>>2,fcache_load_ptr_
1fbd4                 | '   repeat while (pos>-1)
1fbd4                 | LR__2601
1fbd4     00 20 56 F2 | 	cmps	local02, #0 wc
1fbd8     40 00 90 CD |  if_b	jmp	#LR__2603
1fbdc     0F FB 51 F6 | 	abs	result1, local01 wc
1fbe0     0A FA 15 FD | 	qdiv	result1, #10
1fbe4                 | '     q:=j//10
1fbe4     19 FA 61 FD | 	getqy	result1
1fbe8     FD FA 81 F6 | 	negc	result1, result1
1fbec     0F 1F 52 F6 | 	abs	local01, local01 wc
1fbf0     0A 1E 16 FD | 	qdiv	local01, #10
1fbf4                 | '     q:=48+q
1fbf4     30 FA 05 F1 | 	add	result1, #48
1fbf8                 | '     n_string[pos]:=q
1fbf8     10 1F 02 F6 | 	mov	local01, local02
1fbfc     4D E4 05 F1 | 	add	objptr, #77
1fc00     F2 1E 02 F1 | 	add	local01, objptr
1fc04     0F FB 41 FC | 	wrbyte	result1, local01
1fc08                 | '     j:=j/10
1fc08     4D E4 85 F1 | 	sub	objptr, #77
1fc0c                 | '     pos-=1
1fc0c     01 20 86 F1 | 	sub	local02, #1
1fc10     18 1E 62 FD | 	getqx	local01
1fc14     0F 1F 82 F6 | 	negc	local01, local01
1fc18     B8 FF 9F FD | 	jmp	#LR__2601
1fc1c                 | LR__2602
1fc1c                 | LR__2603
1fc1c                 | '   repeat while n_string[0]==48
1fc1c                 | LR__2604
1fc1c     4D E4 05 F1 | 	add	objptr, #77
1fc20     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fc24     4D E4 85 F1 | 	sub	objptr, #77
1fc28     30 16 0E F2 | 	cmp	arg03, #48 wz
1fc2c     20 00 90 5D |  if_ne	jmp	#LR__2605
1fc30                 | '     bytemove(@n_string,@n_string+1,12)
1fc30     4D E4 05 F1 | 	add	objptr, #77
1fc34     F2 12 02 F6 | 	mov	arg01, objptr
1fc38     F2 14 02 F6 | 	mov	arg02, objptr
1fc3c     4D E4 85 F1 | 	sub	objptr, #77
1fc40     01 14 06 F1 | 	add	arg02, #1
1fc44     0C 16 06 F6 | 	mov	arg03, #12
1fc48     D8 0D B0 FD | 	call	#__system____builtin_memmove
1fc4c     CC FF 9F FD | 	jmp	#LR__2604
1fc50                 | LR__2605
1fc50                 | ' 
1fc50                 | '   if k==45
1fc50     2D 22 0E F2 | 	cmp	local03, #45 wz
1fc54     28 00 90 5D |  if_ne	jmp	#LR__2606
1fc58                 | '      bytemove(@n_string+1,@n_string,12)
1fc58     4D E4 05 F1 | 	add	objptr, #77
1fc5c     F2 12 02 F6 | 	mov	arg01, objptr
1fc60     01 12 06 F1 | 	add	arg01, #1
1fc64     F2 14 02 F6 | 	mov	arg02, objptr
1fc68     4D E4 85 F1 | 	sub	objptr, #77
1fc6c     0C 16 06 F6 | 	mov	arg03, #12
1fc70     B0 0D B0 FD | 	call	#__system____builtin_memmove
1fc74                 | '      n_string[0]:=k
1fc74     4D E4 05 F1 | 	add	objptr, #77
1fc78     F2 22 42 FC | 	wrbyte	local03, objptr
1fc7c     4D E4 85 F1 | 	sub	objptr, #77
1fc80                 | LR__2606
1fc80                 | LR__2607
1fc80                 | ' 
1fc80                 | ' q:=@n_string
1fc80     4D E4 05 F1 | 	add	objptr, #77
1fc84     F2 FA 01 F6 | 	mov	result1, objptr
1fc88     4D E4 85 F1 | 	sub	objptr, #77
1fc8c                 | ' return q
1fc8c     A7 F0 03 F6 | 	mov	ptra, fp
1fc90     B2 00 A0 FD | 	call	#popregs_
1fc94                 | _hg010b_spin2_inttostr_ret
1fc94     2D 00 64 FD | 	ret
1fc98                 | 
1fc98                 | ' 
1fc98                 | ' '..............................................................................
1fc98                 | ' 
1fc98                 | ' {{
1fc98                 | ' }}
1fc98                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1fc98                 | _psram_spin2_startx
1fc98     04 4A 05 F6 | 	mov	COUNT_, #4
1fc9c     A8 00 A0 FD | 	call	#pushregs_
1fca0     09 1F 02 F6 | 	mov	local01, arg01
1fca4     0B 21 02 F6 | 	mov	local02, arg03
1fca8     0C 23 02 F6 | 	mov	local03, arg04
1fcac                 | '     stop() ' restart driver if required
1fcac     54 01 B0 FD | 	call	#_psram_spin2_stop
1fcb0     00 1E 0E F2 | 	cmp	local01, #0 wz
1fcb4     14 1E 06 AB |  if_e	rdlong	local01, #20
1fcb8     0F 15 52 F6 | 	abs	arg02, local01 wc
1fcbc     A1 07 00 FF 
1fcc0     40 14 16 FD | 	qdiv	arg02, ##1000000
1fcc4                 | ' 
1fcc4                 | '     ' use current frequency if none specified
1fcc4                 | ' 
1fcc4                 | '     if freq == 0 
1fcc4                 | '         freq := clkfreq 
1fcc4                 | ' 
1fcc4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fcc4                 | ' 
1fcc4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fcc4                 | '     if burst < 0
1fcc4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fcc4     18 14 62 FD | 	getqx	arg02
1fcc8     0A 19 82 F6 | 	negc	arg04, arg02
1fccc     03 18 66 F0 | 	shl	arg04, #3
1fcd0     84 18 86 F1 | 	sub	arg04, #132
1fcd4     04 18 46 F0 | 	shr	arg04, #4
1fcd8     04 18 66 F0 | 	shl	arg04, #4
1fcdc     00 18 56 F2 | 	cmps	arg04, #0 wc
1fce0     0E FA 65 C6 |  if_b	neg	result1, #14
1fce4     10 01 90 CD |  if_b	jmp	#LR__2613
1fce8                 | ' 
1fce8                 | '     ' compute the input delay
1fce8                 | ' 
1fce8                 | '     if delay <= 0
1fce8     01 20 56 F2 | 	cmps	local02, #1 wc
1fcec     10 00 90 3D |  if_ae	jmp	#LR__2610
1fcf0                 | '         delay := lookupDelay(freq)
1fcf0     0F 13 02 F6 | 	mov	arg01, local01
1fcf4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fcf8     FD 20 02 F6 | 	mov	local02, result1
1fcfc     04 00 90 FD | 	jmp	#LR__2611
1fd00                 | LR__2610
1fd00                 | '     else
1fd00                 | '         delay <#= $f ' limit to 15
1fd00     0F 20 66 F3 | 	fles	local02, #15
1fd04                 | LR__2611
1fd04                 | ' 
1fd04                 | '     ' create our lock
1fd04                 | ' 
1fd04                 | '     driverlock := LOCKNEW()  
1fd04     00 FA 05 F6 | 	mov	result1, #0
1fd08     04 FA 61 FD | 	locknew	result1
1fd0c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fd10     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fd14                 | '     if driverlock == -1
1fd14     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fd18     FF FF 7F FF 
1fd1c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fd20                 | '         return ERR_NO_LOCK
1fd20     1A FA 65 A6 |  if_e	neg	result1, #26
1fd24     D0 00 90 AD |  if_e	jmp	#LR__2613
1fd28                 | ' 
1fd28                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fd28                 | ' 
1fd28                 | '     long[@startupData][0]:=clkfreq
1fd28     14 1E 06 FB | 	rdlong	local01, #20
1fd2c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fd30     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fd34                 | ' '    long[@startupData][1]:=$1000_0000
1fd34                 | '     long[@startupData][5]:=@deviceData
1fd34     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fd38     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fd3c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fd40     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fd44     14 14 06 F1 | 	add	arg02, #20
1fd48     0A 1F 62 FC | 	wrlong	local01, arg02
1fd4c                 | '     long[@startupData][6]:=@qosData
1fd4c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fd50     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fd54     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fd58     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fd5c     18 14 06 F1 | 	add	arg02, #24
1fd60     0A 1F 62 FC | 	wrlong	local01, arg02
1fd64                 | '     long[@startupData][7]:=$7FF00
1fd64     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fd68     1C 1E 06 F1 | 	add	local01, #28
1fd6c     FF 03 80 FF 
1fd70     0F 01 6A FC | 	wrlong	##524032, local01
1fd74                 | ' 
1fd74                 | '     ' setup some default bank and QoS parameter values
1fd74                 | ' 
1fd74                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fd74     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fd78     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fd7c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fd80     10 18 66 F0 | 	shl	arg04, #16
1fd84     0C 20 66 F0 | 	shl	local02, #12
1fd88     10 19 42 F5 | 	or	arg04, local02
1fd8c     18 18 46 F5 | 	or	arg04, #24
1fd90     0C 15 02 F6 | 	mov	arg02, arg04
1fd94     02 16 06 F6 | 	mov	arg03, #2
1fd98     A0 00 A0 FD | 	call	#\builtin_longfill_
1fd9c                 | '     longfill(@qosData, $FFFF0000, 8)
1fd9c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fda0     07 16 06 F6 | 	mov	arg03, #7
1fda4     28 16 62 FD | 	setq	arg03
1fda8     80 FF FF FF 
1fdac     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fdb0                 | ' 
1fdb0                 | '     ' get the address of the PSRAM memory driver so we can start it
1fdb0                 | ' 
1fdb0                 | '     driverAddr:= driver.getDriverAddr()
1fdb0                 | '     return @driver_start
1fdb0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fdb4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fdb8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fdbc                 | ' 
1fdbc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fdbc                 | ' 
1fdbc                 | '     if desiredcog < 0
1fdbc     00 22 56 F2 | 	cmps	local03, #0 wc
1fdc0                 | '         desiredcog := NEWCOG
1fdc0     10 22 06 C6 |  if_b	mov	local03, #16
1fdc4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fdc4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fdc8     11 25 02 F6 | 	mov	local04, local03
1fdcc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fdd0     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fdd4     01 24 66 C6 |  if_b	neg	local04, #1
1fdd8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fddc     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fde0                 | '     repeat until long[@startupData] == 0 
1fde0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fde4                 | LR__2612
1fde4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fde8     F8 FF 9F 5D |  if_ne	jmp	#LR__2612
1fdec                 | ' 
1fdec                 | '     return drivercog
1fdec     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fdf0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fdf4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fdf8                 | LR__2613
1fdf8     A7 F0 03 F6 | 	mov	ptra, fp
1fdfc     B2 00 A0 FD | 	call	#popregs_
1fe00                 | _psram_spin2_startx_ret
1fe00     2D 00 64 FD | 	ret
1fe04                 | 
1fe04                 | ' 
1fe04                 | ' '..............................................................................
1fe04                 | ' 
1fe04                 | ' {{
1fe04                 | ' }}
1fe04                 | ' PUB stop() : i
1fe04                 | _psram_spin2_stop
1fe04     00 00 06 F6 | 	mov	_var01, #0
1fe08                 | '     if drivercog <> -1
1fe08     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe0c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fe10     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe14     FF FF 7F FF 
1fe18     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fe1c     70 00 90 AD |  if_e	jmp	#LR__2623
1fe20                 | '         cogstop(drivercog) ' a rather brutal stop
1fe20     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe24     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fe28     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe2c     03 12 62 FD | 	cogstop	arg01
1fe30     97 26 48 FB | 	callpa	#(@LR__2622-@LR__2620)>>2,fcache_load_ptr_
1fe34                 | '         repeat i from 0 to 7
1fe34                 | LR__2620
1fe34                 | '             if long[$7FF00][i*3] < 0
1fe34     00 FB 01 F6 | 	mov	result1, _var01
1fe38     01 FA 65 F0 | 	shl	result1, #1
1fe3c     00 FB 01 F1 | 	add	result1, _var01
1fe40     02 FA 65 F0 | 	shl	result1, #2
1fe44     FF 03 00 FF 
1fe48     00 FB 05 F1 | 	add	result1, ##524032
1fe4c     FD FA 01 FB | 	rdlong	result1, result1
1fe50     00 FA 55 F2 | 	cmps	result1, #0 wc
1fe54     1C 00 90 3D |  if_ae	jmp	#LR__2621
1fe58                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fe58     00 FB 01 F6 | 	mov	result1, _var01
1fe5c     01 FA 65 F0 | 	shl	result1, #1
1fe60     00 FB 01 F1 | 	add	result1, _var01
1fe64     02 FA 65 F0 | 	shl	result1, #2
1fe68     FF 03 00 FF 
1fe6c     00 FB 05 F1 | 	add	result1, ##524032
1fe70     FD 20 68 FC | 	wrlong	#16, result1
1fe74                 | LR__2621
1fe74     01 00 06 F1 | 	add	_var01, #1
1fe78     08 00 56 F2 | 	cmps	_var01, #8 wc
1fe7c     B4 FF 9F CD |  if_b	jmp	#LR__2620
1fe80                 | LR__2622
1fe80                 | '         drivercog := -1
1fe80     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe84     FF FF FF FF 
1fe88     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fe8c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe90                 | LR__2623
1fe90                 | '     if driverlock <> -1
1fe90     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fe94     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fe98     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fe9c     FF FF 7F FF 
1fea0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fea4                 | '         LOCKRET(driverlock)
1fea4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fea8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1feac     05 12 62 5D |  if_ne	lockret	arg01
1feb0                 | '         driverlock := -1
1feb0     FF FF FF 5F 
1feb4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1feb8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1febc     00 FB 01 F6 | 	mov	result1, _var01
1fec0                 | _psram_spin2_stop_ret
1fec0     2D 00 64 FD | 	ret
1fec4                 | 
1fec4                 | ' 
1fec4                 | ' '..............................................................................
1fec4                 | ' 
1fec4                 | ' {{
1fec4                 | ' }}
1fec4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fec4                 | _psram_spin2_read1
1fec4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fec4                 | '     if drivercog == -1 ' driver must be running
1fec4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fec8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fecc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fed0     FF FF 7F FF 
1fed4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fed8                 | '         return ERR_INACTIVE
1fed8     0F FA 65 A6 |  if_e	neg	result1, #15
1fedc     7C 00 90 AD |  if_e	jmp	#LR__2631
1fee0                 | '     if count == 0 ' don't even bother reading
1fee0     00 16 0E F2 | 	cmp	arg03, #0 wz
1fee4                 | '         return 0
1fee4     00 FA 05 A6 |  if_e	mov	result1, #0
1fee8     70 00 90 AD |  if_e	jmp	#LR__2631
1feec                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1feec     00 FA 05 F6 | 	mov	result1, #0
1fef0     01 FA 61 FD | 	cogid	result1
1fef4     FD 00 02 F6 | 	mov	_var01, result1
1fef8     01 00 66 F0 | 	shl	_var01, #1
1fefc     FD 00 02 F1 | 	add	_var01, result1
1ff00     02 00 66 F0 | 	shl	_var01, #2
1ff04     FF 03 00 FF 
1ff08     00 03 06 F6 | 	mov	_var02, ##524032
1ff0c     00 03 02 F1 | 	add	_var02, _var01
1ff10                 | '     if long[mailbox] < 0
1ff10     01 01 02 FB | 	rdlong	_var01, _var02
1ff14     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff18                 | '         return ERR_MAILBOX_BUSY
1ff18     1C FA 65 C6 |  if_b	neg	result1, #28
1ff1c     3C 00 90 CD |  if_b	jmp	#LR__2631
1ff20                 | '     long[mailbox][2] := count
1ff20     08 02 06 F1 | 	add	_var02, #8
1ff24     01 17 62 FC | 	wrlong	arg03, _var02
1ff28                 | '     long[mailbox][1] := dstHubAddr
1ff28     04 02 86 F1 | 	sub	_var02, #4
1ff2c     01 13 62 FC | 	wrlong	arg01, _var02
1ff30     04 02 86 F1 | 	sub	_var02, #4
1ff34                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1ff34     0A 05 02 F6 | 	mov	_var03, arg02
1ff38     D9 04 06 F4 | 	bitl	_var03, #217
1ff3c     00 00 58 FF 
1ff40     00 00 06 F6 | 	mov	_var01, ##-1342177280
1ff44     02 01 02 F1 | 	add	_var01, _var03
1ff48     01 01 62 FC | 	wrlong	_var01, _var02
1ff4c                 | '     repeat
1ff4c                 | LR__2630
1ff4c                 | '         result := long[mailbox]    
1ff4c     01 05 02 FB | 	rdlong	_var03, _var02
1ff50     00 04 56 F2 | 	cmps	_var03, #0 wc
1ff54     F4 FF 9F CD |  if_b	jmp	#LR__2630
1ff58                 | '     while result < 0   
1ff58                 | '     return -result                       'return success or error
1ff58     02 FB 61 F6 | 	neg	result1, _var03
1ff5c                 | LR__2631
1ff5c                 | _psram_spin2_read1_ret
1ff5c     2D 00 64 FD | 	ret
1ff60                 | 
1ff60                 | ' 
1ff60                 | ' '..............................................................................
1ff60                 | ' 
1ff60                 | ' {{
1ff60                 | ' }}
1ff60                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1ff60                 | _psram_spin2_write
1ff60                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1ff60                 | '     if drivercog == -1 ' driver must be running
1ff60     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff64     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1ff68     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff6c     FF FF 7F FF 
1ff70     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1ff74                 | '         return ERR_INACTIVE
1ff74     0F FA 65 A6 |  if_e	neg	result1, #15
1ff78     7C 00 90 AD |  if_e	jmp	#LR__2641
1ff7c                 | '     if count == 0 ' don't even bother writing
1ff7c     00 16 0E F2 | 	cmp	arg03, #0 wz
1ff80                 | '         return 0
1ff80     00 FA 05 A6 |  if_e	mov	result1, #0
1ff84     70 00 90 AD |  if_e	jmp	#LR__2641
1ff88                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1ff88     00 FA 05 F6 | 	mov	result1, #0
1ff8c     01 FA 61 FD | 	cogid	result1
1ff90     FD 00 02 F6 | 	mov	_var01, result1
1ff94     01 00 66 F0 | 	shl	_var01, #1
1ff98     FD 00 02 F1 | 	add	_var01, result1
1ff9c     02 00 66 F0 | 	shl	_var01, #2
1ffa0     FF 03 00 FF 
1ffa4     00 03 06 F6 | 	mov	_var02, ##524032
1ffa8     00 03 02 F1 | 	add	_var02, _var01
1ffac                 | '     if long[mailbox] < 0
1ffac     01 01 02 FB | 	rdlong	_var01, _var02
1ffb0     00 00 56 F2 | 	cmps	_var01, #0 wc
1ffb4                 | '         return ERR_MAILBOX_BUSY
1ffb4     1C FA 65 C6 |  if_b	neg	result1, #28
1ffb8     3C 00 90 CD |  if_b	jmp	#LR__2641
1ffbc                 | '     long[mailbox][2] := count
1ffbc     08 02 06 F1 | 	add	_var02, #8
1ffc0     01 17 62 FC | 	wrlong	arg03, _var02
1ffc4                 | '     long[mailbox][1] := srcHubAddr
1ffc4     04 02 86 F1 | 	sub	_var02, #4
1ffc8     01 13 62 FC | 	wrlong	arg01, _var02
1ffcc     04 02 86 F1 | 	sub	_var02, #4
1ffd0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1ffd0     0A 05 02 F6 | 	mov	_var03, arg02
1ffd4     D9 04 06 F4 | 	bitl	_var03, #217
1ffd8     00 00 78 FF 
1ffdc     00 00 06 F6 | 	mov	_var01, ##-268435456
1ffe0     02 01 02 F1 | 	add	_var01, _var03
1ffe4     01 01 62 FC | 	wrlong	_var01, _var02
1ffe8                 | '     repeat
1ffe8                 | LR__2640
1ffe8                 | '         result := long[mailbox]    
1ffe8     01 05 02 FB | 	rdlong	_var03, _var02
1ffec     00 04 56 F2 | 	cmps	_var03, #0 wc
1fff0     F4 FF 9F CD |  if_b	jmp	#LR__2640
1fff4                 | '     while result < 0   
1fff4                 | '     return -result                       'return success or error
1fff4     02 FB 61 F6 | 	neg	result1, _var03
1fff8                 | LR__2641
1fff8                 | _psram_spin2_write_ret
1fff8     2D 00 64 FD | 	ret
1fffc                 | 
1fffc                 | ' 
1fffc                 | ' ' generalized fill
1fffc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fffc                 | _psram_spin2_fill
1fffc     09 01 02 F6 | 	mov	_var01, arg01
20000     0A 03 02 F6 | 	mov	_var02, arg02
20004     0B 05 02 F6 | 	mov	_var03, arg03
20008     0D 07 02 F6 | 	mov	_var04, arg05
2000c                 | '     case datasize 
2000c     01 06 86 F1 | 	sub	_var04, #1
20010     04 06 26 F3 | 	fle	_var04, #4
20014     30 06 62 FD | 	jmprel	_var04
20018                 | LR__2650
20018     10 00 90 FD | 	jmp	#LR__2651
2001c     18 00 90 FD | 	jmp	#LR__2652
20020     2C 00 90 FD | 	jmp	#LR__2654
20024     1C 00 90 FD | 	jmp	#LR__2653
20028     24 00 90 FD | 	jmp	#LR__2654
2002c                 | LR__2651
2002c                 | '         1: req := driver.R_WRITEBYTE
2002c     00 00 60 FF 
20030     00 08 06 F6 | 	mov	_var05, ##-1073741824
20034     20 00 90 FD | 	jmp	#LR__2655
20038                 | LR__2652
20038                 | '         2: req := driver.R_WRITEWORD
20038     00 00 68 FF 
2003c     00 08 06 F6 | 	mov	_var05, ##-805306368
20040     14 00 90 FD | 	jmp	#LR__2655
20044                 | LR__2653
20044                 | '         4: req := driver.R_WRITELONG
20044     00 00 70 FF 
20048     00 08 06 F6 | 	mov	_var05, ##-536870912
2004c     08 00 90 FD | 	jmp	#LR__2655
20050                 | LR__2654
20050                 | '         other : return ERR_INVALID
20050     06 FA 65 F6 | 	neg	result1, #6
20054     94 00 90 FD | 	jmp	#LR__2657
20058                 | LR__2655
20058                 | '     if count == 0   ' nothing to do
20058     00 04 0E F2 | 	cmp	_var03, #0 wz
2005c                 | '         return 0
2005c     00 FA 05 A6 |  if_e	mov	result1, #0
20060     88 00 90 AD |  if_e	jmp	#LR__2657
20064                 | '     if drivercog == -1
20064     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20068     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
2006c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20070     FF FF 7F FF 
20074     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
20078                 | '         return ERR_INACTIVE
20078     0F FA 65 A6 |  if_e	neg	result1, #15
2007c     6C 00 90 AD |  if_e	jmp	#LR__2657
20080                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
20080     00 FA 05 F6 | 	mov	result1, #0
20084     01 FA 61 FD | 	cogid	result1
20088     FD 06 02 F6 | 	mov	_var04, result1
2008c     01 06 66 F0 | 	shl	_var04, #1
20090     FD 06 02 F1 | 	add	_var04, result1
20094     02 06 66 F0 | 	shl	_var04, #2
20098     FF 03 00 FF 
2009c     00 0B 06 F6 | 	mov	_var06, ##524032
200a0     03 0B 02 F1 | 	add	_var06, _var04
200a4                 | '     if long[mailbox] < 0
200a4     05 07 02 FB | 	rdlong	_var04, _var06
200a8     00 06 56 F2 | 	cmps	_var04, #0 wc
200ac                 | '         return ERR_MAILBOX_BUSY
200ac     1C FA 65 C6 |  if_b	neg	result1, #28
200b0     38 00 90 CD |  if_b	jmp	#LR__2657
200b4                 | '     long[mailbox][2] := count
200b4     08 0A 06 F1 | 	add	_var06, #8
200b8     05 05 62 FC | 	wrlong	_var03, _var06
200bc                 | '     long[mailbox][1] := pattern
200bc     04 0A 86 F1 | 	sub	_var06, #4
200c0     05 03 62 FC | 	wrlong	_var02, _var06
200c4     04 0A 86 F1 | 	sub	_var06, #4
200c8                 | '     long[mailbox] := req + (addr & $1ffffff)
200c8     04 0D 02 F6 | 	mov	_var07, _var05
200cc     00 0F 02 F6 | 	mov	_var08, _var01
200d0     D9 0E 06 F4 | 	bitl	_var08, #217
200d4     07 0D 02 F1 | 	add	_var07, _var08
200d8     05 0D 62 FC | 	wrlong	_var07, _var06
200dc                 | '     repeat
200dc                 | LR__2656
200dc                 | '         r := long[mailbox]
200dc     05 0F 02 FB | 	rdlong	_var08, _var06
200e0     00 0E 56 F2 | 	cmps	_var08, #0 wc
200e4     F4 FF 9F CD |  if_b	jmp	#LR__2656
200e8                 | '     while r < 0
200e8                 | '     return -r                  ' return 0 for success or negated error code
200e8     07 FB 61 F6 | 	neg	result1, _var08
200ec                 | LR__2657
200ec                 | _psram_spin2_fill_ret
200ec     2D 00 64 FD | 	ret
200f0                 | 
200f0                 | ' 
200f0                 | ' '..............................................................................
200f0                 | ' 
200f0                 | ' {{
200f0                 | ' }}
200f0                 | ' PUB setQos(cog, qos) : result | mailbox
200f0                 | _psram_spin2_setQos
200f0     09 01 02 F6 | 	mov	_var01, arg01
200f4                 | '     if drivercog == -1 ' driver must be running
200f4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
200f8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
200fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20100     FF FF 7F FF 
20104     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20108                 | '         return ERR_INACTIVE
20108     0F FA 65 A6 |  if_e	neg	result1, #15
2010c     9C 00 90 AD |  if_e	jmp	#LR__2664
20110                 | '     if cog < 0 or cog > 7 ' enforce cog id range
20110     00 00 56 F2 | 	cmps	_var01, #0 wc
20114     08 00 90 CD |  if_b	jmp	#LR__2660
20118     08 00 56 F2 | 	cmps	_var01, #8 wc
2011c     08 00 90 CD |  if_b	jmp	#LR__2661
20120                 | LR__2660
20120                 | '         return ERR_INVALID
20120     06 FA 65 F6 | 	neg	result1, #6
20124     84 00 90 FD | 	jmp	#LR__2664
20128                 | LR__2661
20128                 | '     long[@qosData][cog] := qos & !$1ff
20128     FF 15 26 F5 | 	andn	arg02, #511
2012c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20130     02 00 66 F0 | 	shl	_var01, #2
20134     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
20138     00 15 62 FC | 	wrlong	arg02, _var01
2013c                 | '     mailbox := $7FF00 + drivercog*12
2013c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
20140     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
20144     02 07 02 F6 | 	mov	_var04, _var03
20148     01 06 66 F0 | 	shl	_var04, #1
2014c     02 07 02 F1 | 	add	_var04, _var03
20150     02 06 66 F0 | 	shl	_var04, #2
20154     FF 03 00 FF 
20158     00 09 06 F6 | 	mov	_var05, ##524032
2015c     03 09 02 F1 | 	add	_var05, _var04
20160                 | '     repeat until LOCKTRY(driverlock)
20160     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
20164                 | LR__2662
20164     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20168     06 12 72 FD | 	locktry	arg01 wc
2016c     F4 FF 9F 3D |  if_ae	jmp	#LR__2662
20170     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20174                 | '     long[mailbox] := driver.R_CONFIG + cogid()
20174     00 06 06 F6 | 	mov	_var04, #0
20178     01 06 62 FD | 	cogid	_var04
2017c     00 00 78 FF 
20180     00 02 06 F6 | 	mov	_var02, ##-268435456
20184     03 03 02 F1 | 	add	_var02, _var04
20188     04 03 62 FC | 	wrlong	_var02, _var05
2018c                 | '     repeat while long[mailbox] < 0
2018c                 | LR__2663
2018c     04 03 02 FB | 	rdlong	_var02, _var05
20190     00 02 56 F2 | 	cmps	_var02, #0 wc
20194     F4 FF 9F CD |  if_b	jmp	#LR__2663
20198                 | '     LOCKREL(driverlock)
20198     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2019c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
201a0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
201a4     07 12 72 FD | 	lockrel	arg01 wc
201a8     00 FA 05 F6 | 	mov	result1, #0
201ac                 | LR__2664
201ac                 | _psram_spin2_setQos_ret
201ac     2D 00 64 FD | 	ret
201b0                 | 
201b0                 | ' 
201b0                 | ' '..............................................................................
201b0                 | ' 
201b0                 | ' {{
201b0                 | ' }}
201b0                 | ' PRI lookupDelay(freq) : delay | profile
201b0                 | _psram_spin2_lookupDelay
201b0                 | '     profile := @delayTable
201b0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
201b4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
201b8                 | '     delay := long[profile][0]
201b8     00 03 02 FB | 	rdlong	_var02, _var01
201bc                 | '     repeat while long[profile][1] 
201bc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
201c0     97 16 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
201c4                 | LR__2670
201c4     04 00 06 F1 | 	add	_var01, #4
201c8     00 FB 09 FB | 	rdlong	result1, _var01 wz
201cc     04 00 86 F1 | 	sub	_var01, #4
201d0     1C 00 90 AD |  if_e	jmp	#LR__2672
201d4                 | '         if freq +< long[profile][1] 
201d4     04 00 06 F1 | 	add	_var01, #4
201d8     00 FB 01 FB | 	rdlong	result1, _var01
201dc     04 00 86 F1 | 	sub	_var01, #4
201e0     FD 12 12 F2 | 	cmp	arg01, result1 wc
201e4                 | '             quit
201e4                 | '         profile += 4
201e4     04 00 06 31 |  if_ae	add	_var01, #4
201e8                 | '         delay++
201e8     01 02 06 31 |  if_ae	add	_var02, #1
201ec     D4 FF 9F 3D |  if_ae	jmp	#LR__2670
201f0                 | LR__2671
201f0                 | LR__2672
201f0     01 FB 01 F6 | 	mov	result1, _var02
201f4                 | _psram_spin2_lookupDelay_ret
201f4     2D 00 64 FD | 	ret
201f8                 | 
201f8                 | ' 
201f8                 | ' PUB start() : r
201f8                 | _usbnew_spin2_start
201f8     00 00 06 F6 | 	mov	_var01, #0
201fc                 | '   ifnot driver_cog
201fc     15 00 00 FF 
20200     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
20204     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20208     15 00 00 FF 
2020c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
20210     38 00 90 5D |  if_ne	jmp	#LR__2680
20214                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
20214     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20218     10 00 06 F6 | 	mov	_var01, #16
2021c     00 16 06 F6 | 	mov	arg03, #0
20220     28 16 62 FD | 	setq	arg03
20224     0A 01 F2 FC | 	coginit	_var01, arg02 wc
20228     01 00 66 C6 |  if_b	neg	_var01, #1
2022c                 | '     if r >= 0
2022c     00 00 56 F2 | 	cmps	_var01, #0 wc
20230                 | '       driver_cog := r+1
20230     00 03 02 36 |  if_ae	mov	_var02, _var01
20234     01 02 06 31 |  if_ae	add	_var02, #1
20238     15 00 00 3F 
2023c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
20240     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
20244     15 00 00 3F 
20248     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
2024c                 | LR__2680
2024c     00 FB 01 F6 | 	mov	result1, _var01
20250                 | _usbnew_spin2_start_ret
20250     2D 00 64 FD | 	ret
20254                 | 
20254                 | '     '' (Always enabled)
20254                 | ' 
20254                 | ' '' Get current pressed state of a keyboard key
20254                 | ' PUB keystate(key) : r | buf[2],tmp
20254                 | _usbnew_spin2_keystate
20254     00 04 06 F6 | 	mov	_var03, #0
20258                 | '   if key >= $E0 && key < $E8
20258     E0 12 56 F2 | 	cmps	arg01, #224 wc
2025c     34 00 90 CD |  if_b	jmp	#LR__2690
20260     E8 12 56 F2 | 	cmps	arg01, #232 wc
20264     2C 00 90 3D |  if_ae	jmp	#LR__2690
20268                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
20268     00 FA 05 F6 | 	mov	result1, #0
2026c     13 00 00 FF 
20270     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20274     09 07 02 F6 | 	mov	_var04, arg01
20278     E0 06 86 F1 | 	sub	_var04, #224
2027c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
20280     03 09 4A F0 | 	shr	_var05, _var04 wz
20284     13 00 00 FF 
20288     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2028c     01 FA 65 56 |  if_ne	neg	result1, #1
20290     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
20294                 | LR__2690
20294                 | '   else
20294                 | '     '' Do this in inline ASM to ensure atomicity
20294                 | '     tmp := @hkbd_report
20294     13 00 00 FF 
20298     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
2029c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
202a0                 | '     org
202a0     13 00 00 FF 
202a4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
202a8     97 1E 48 FB | 	callpa	#(@LR__2692-@LR__2691)>>2,fcache_load_ptr_
202ac                 | LR__2691
202ac 000             | 	org	0
202ac 000 28 02 64 FD | 	setq	#1
202b0 001 04 01 02 FB | 	rdlong	_var01, _var05
202b4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
202b8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
202bc 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
202c0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202c4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
202c8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202cc 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
202d0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202d4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
202d8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202dc 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
202e0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202e4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
202e8 00f             | LR__2692
202e8                 | 	orgh
202e8     02 FB 01 F6 | 	mov	result1, _var03
202ec                 | _usbnew_spin2_keystate_ret
202ec     2D 00 64 FD | 	ret
202f0                 | 
202f0                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
202f0                 | ' 
202f0                 | ' '' Return key event from buffer if there is one
202f0                 | ' PUB get_key() : r | tail
202f0                 | _usbnew_spin2_get_key
202f0                 | '   tail := keyq_tail
202f0     0F 00 00 FF 
202f4     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
202f8     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
202fc                 | '   if keyq_head == tail
202fc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20300     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20304     0F 00 00 FF 
20308     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2030c     00 03 0A F2 | 	cmp	_var02, _var01 wz
20310                 | '     return 0 ' No event
20310     00 FA 05 A6 |  if_e	mov	result1, #0
20314     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20318                 | '   r := keyq_data[tail]
20318     00 03 02 F6 | 	mov	_var02, _var01
2031c     02 02 66 F0 | 	shl	_var02, #2
20320     0F 00 00 FF 
20324     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20328     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2032c     01 FB 01 FB | 	rdlong	result1, _var02
20330                 | '   if ++tail == KEYQUEUE_SIZE
20330     01 00 06 F1 | 	add	_var01, #1
20334     80 00 0E F2 | 	cmp	_var01, #128 wz
20338                 | '     tail := 0
20338     00 00 06 A6 |  if_e	mov	_var01, #0
2033c                 | '   keyq_tail := tail
2033c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20340     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20344     0F 00 00 FF 
20348     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
2034c                 | _usbnew_spin2_get_key_ret
2034c     2D 00 64 FD | 	ret
20350                 | 
20350                 | ' 
20350                 | ' '' Emulate mouse movement
20350                 | ' PUB mouse_move(x,y)
20350                 | _usbnew_spin2_mouse_move
20350     02 4A 05 F6 | 	mov	COUNT_, #2
20354     A8 00 A0 FD | 	call	#pushregs_
20358     09 1F 02 F6 | 	mov	local01, arg01
2035c     0A 21 02 F6 | 	mov	local02, arg02
20360                 | '   mouse_lock := 1
20360     14 00 00 FF 
20364     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20368     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2036c     14 00 00 FF 
20370     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20374                 | '   waitus(2) ' hope driver is now done
20374     02 12 06 F6 | 	mov	arg01, #2
20378     E8 0A B0 FD | 	call	#__system___waitus
2037c                 | '   mouse_xacc := x
2037c     14 00 00 FF 
20380     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
20384     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
20388                 | '   mouse_yacc := y
20388     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2038c     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
20390                 | '   if mouse_outptr
20390     04 00 00 FF 
20394     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
20398     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
2039c     0F 00 00 FF 
203a0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
203a4     24 00 90 AD |  if_e	jmp	#LR__2700
203a8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
203a8     10 20 66 F0 | 	shl	local02, #16
203ac     0F 1F 32 F9 | 	getword	local01, local01, #0
203b0     0F 21 42 F5 | 	or	local02, local01
203b4     0F 00 00 FF 
203b8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
203bc     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
203c0     0F 00 00 FF 
203c4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
203c8     0F 21 62 FC | 	wrlong	local02, local01
203cc                 | LR__2700
203cc                 | '   mouse_lock := 0
203cc     14 00 00 FF 
203d0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
203d4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
203d8     14 00 00 FF 
203dc     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
203e0     A7 F0 03 F6 | 	mov	ptra, fp
203e4     B2 00 A0 FD | 	call	#popregs_
203e8                 | _usbnew_spin2_mouse_move_ret
203e8     2D 00 64 FD | 	ret
203ec                 | 
203ec                 | '     '' Set HAVE_HIDPAD to enable.
203ec                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
203ec                 | ' 
203ec                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
203ec                 | ' PUB hidpad_id(dev) : r
203ec                 | _usbnew_spin2_hidpad_id
203ec                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
203ec     13 00 00 FF 
203f0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
203f4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
203f8     09 01 02 F6 | 	mov	_var01, arg01
203fc     03 00 66 F0 | 	shl	_var01, #3
20400     09 01 82 F1 | 	sub	_var01, arg01
20404     02 00 66 F0 | 	shl	_var01, #2
20408     00 FB 01 F1 | 	add	result1, _var01
2040c     FD FA 01 FB | 	rdlong	result1, result1
20410     13 00 00 FF 
20414     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20418                 | _usbnew_spin2_hidpad_id_ret
20418     2D 00 64 FD | 	ret
2041c                 | 
2041c                 | ' 
2041c                 | ' '' Get all button states for a device
2041c                 | ' PUB hidpad_buttons(dev) : r 
2041c                 | _usbnew_spin2_hidpad_buttons
2041c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2041c     13 00 00 FF 
20420     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20424     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20428     09 01 02 F6 | 	mov	_var01, arg01
2042c     03 00 66 F0 | 	shl	_var01, #3
20430     09 01 82 F1 | 	sub	_var01, arg01
20434     02 00 66 F0 | 	shl	_var01, #2
20438     00 FB 01 F1 | 	add	result1, _var01
2043c     14 FA 05 F1 | 	add	result1, #20
20440     FD FA 01 FB | 	rdlong	result1, result1
20444     13 00 00 FF 
20448     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2044c                 | _usbnew_spin2_hidpad_buttons_ret
2044c     2D 00 64 FD | 	ret
20450                 | 
20450                 | ' 
20450                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20450                 | ' PUB hidpad_axis(dev,axnum) : r
20450                 | _usbnew_spin2_hidpad_axis
20450                 | '   if axnum +>= 6
20450     06 14 16 F2 | 	cmp	arg02, #6 wc
20454                 | '     return 0
20454     00 FA 05 36 |  if_ae	mov	result1, #0
20458     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2045c                 | '   else 
2045c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2045c     13 00 00 FF 
20460     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20464     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20468     09 01 02 F6 | 	mov	_var01, arg01
2046c     03 00 66 F0 | 	shl	_var01, #3
20470     09 01 82 F1 | 	sub	_var01, arg01
20474     02 00 66 F0 | 	shl	_var01, #2
20478     00 FB 01 F1 | 	add	result1, _var01
2047c     04 00 06 F6 | 	mov	_var01, #4
20480     0A 01 02 F1 | 	add	_var01, arg02
20484     01 00 66 F0 | 	shl	_var01, #1
20488     FD 00 02 F1 | 	add	_var01, result1
2048c     00 FB E1 FA | 	rdword	result1, _var01
20490     0F FA 65 F7 | 	signx	result1, #15
20494     13 00 00 FF 
20498     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2049c                 | _usbnew_spin2_hidpad_axis_ret
2049c     2D 00 64 FD | 	ret
204a0                 | 
204a0                 | ' 
204a0                 | ' 
204a0                 | ' '--------------------------------------------------------------
204a0                 | ' '---------- Init the variables, start the cog. ----------------
204a0                 | ' '--------------------------------------------------------------
204a0                 | ' 
204a0                 | ' pub start(mbox,scope,cache) :cog,base | iii
204a0                 | _audio096_spin2_start
204a0     04 4A 05 F6 | 	mov	COUNT_, #4
204a4     A8 00 A0 FD | 	call	#pushregs_
204a8     09 1F 02 F6 | 	mov	local01, arg01
204ac                 | ' 
204ac                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
204ac                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
204ac                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
204ac                 | ' 
204ac                 | ' mailboxaddr:=mbox 
204ac     F2 1E 62 FC | 	wrlong	local01, objptr
204b0                 | ' scope_ptr:=scope
204b0     04 E4 05 F1 | 	add	objptr, #4
204b4     F2 14 62 FC | 	wrlong	arg02, objptr
204b8                 | ' cache_ptr:=cache
204b8     04 E4 05 F1 | 	add	objptr, #4
204bc     F2 16 62 FC | 	wrlong	arg03, objptr
204c0                 | ' base:=@channel1[0]
204c0     04 E4 05 F1 | 	add	objptr, #4
204c4     F2 20 02 F6 | 	mov	local02, objptr
204c8                 | ' long[$40]:=mbox
204c8     40 1E 66 FC | 	wrlong	local01, #64
204cc                 | ' repeat iii from 0 to 7
204cc     00 22 06 F6 | 	mov	local03, #0
204d0     02 00 00 FF 
204d4     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
204d8     0C E4 85 F1 | 	sub	objptr, #12
204dc     97 BC 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
204e0                 | LR__2710
204e0                 | '   long[base+64*iii]:=0
204e0     10 1F 02 F6 | 	mov	local01, local02
204e4     11 FD 01 F6 | 	mov	result2, local03
204e8     06 FC 65 F0 | 	shl	result2, #6
204ec     FE 1E 02 F1 | 	add	local01, result2
204f0     0F 01 68 FC | 	wrlong	#0, local01
204f4                 | '   long[base+64*iii+4]:=0
204f4     10 1F 02 F6 | 	mov	local01, local02
204f8     11 FD 01 F6 | 	mov	result2, local03
204fc     06 FC 65 F0 | 	shl	result2, #6
20500     FE 1E 02 F1 | 	add	local01, result2
20504     04 1E 06 F1 | 	add	local01, #4
20508     0F 01 68 FC | 	wrlong	#0, local01
2050c                 | '   long[base+64*iii+12]:=0
2050c     10 25 02 F6 | 	mov	local04, local02
20510     11 1F 02 F6 | 	mov	local01, local03
20514     06 1E 66 F0 | 	shl	local01, #6
20518     0F 25 02 F1 | 	add	local04, local01
2051c     0C 24 06 F1 | 	add	local04, #12
20520     12 01 68 FC | 	wrlong	#0, local04
20524                 | '   long[base+64*iii+16]:=2 
20524     10 25 02 F6 | 	mov	local04, local02
20528     11 1F 02 F6 | 	mov	local01, local03
2052c     06 1E 66 F0 | 	shl	local01, #6
20530     0F 25 02 F1 | 	add	local04, local01
20534     10 24 06 F1 | 	add	local04, #16
20538     12 05 68 FC | 	wrlong	#2, local04
2053c                 | '   word[base+64*iii+20]:=0
2053c     10 25 02 F6 | 	mov	local04, local02
20540     11 1F 02 F6 | 	mov	local01, local03
20544     06 1E 66 F0 | 	shl	local01, #6
20548     0F 25 02 F1 | 	add	local04, local01
2054c     14 24 06 F1 | 	add	local04, #20
20550     12 01 58 FC | 	wrword	#0, local04
20554                 | '   word[base+64*iii+22]:=8192
20554     10 25 02 F6 | 	mov	local04, local02
20558     11 1F 02 F6 | 	mov	local01, local03
2055c     06 1E 66 F0 | 	shl	local01, #6
20560     0F 25 02 F1 | 	add	local04, local01
20564     16 24 06 F1 | 	add	local04, #22
20568     10 00 80 FF 
2056c     12 01 58 FC | 	wrword	##8192, local04
20570                 | '   word[base+64*iii+24]:=4000+2*iii
20570     11 25 02 F6 | 	mov	local04, local03
20574     01 24 66 F0 | 	shl	local04, #1
20578     07 00 00 FF 
2057c     A0 1F 06 F6 | 	mov	local01, ##4000
20580     12 1F 02 F1 | 	add	local01, local04
20584     10 25 02 F6 | 	mov	local04, local02
20588     11 FD 01 F6 | 	mov	result2, local03
2058c     06 FC 65 F0 | 	shl	result2, #6
20590     FE 24 02 F1 | 	add	local04, result2
20594     18 24 06 F1 | 	add	local04, #24
20598     12 1F 52 FC | 	wrword	local01, local04
2059c                 | '   word[base+64*iii+26]:=2
2059c     10 25 02 F6 | 	mov	local04, local02
205a0     11 1F 02 F6 | 	mov	local01, local03
205a4     06 1E 66 F0 | 	shl	local01, #6
205a8     0F 25 02 F1 | 	add	local04, local01
205ac     1A 24 06 F1 | 	add	local04, #26
205b0     12 05 58 FC | 	wrword	#2, local04
205b4                 | '   long [base+64*iii+8]:=@null | $C0000000
205b4     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
205b8     3E 1E 26 F4 | 	bith	local01, #62
205bc     10 25 02 F6 | 	mov	local04, local02
205c0     11 17 02 F6 | 	mov	arg03, local03
205c4     06 16 66 F0 | 	shl	arg03, #6
205c8     0B 25 02 F1 | 	add	local04, arg03
205cc     08 24 06 F1 | 	add	local04, #8
205d0     12 1F 62 FC | 	wrlong	local01, local04
205d4                 | '   long[base+64*iii+32]:=0
205d4     10 25 02 F6 | 	mov	local04, local02
205d8     11 1F 02 F6 | 	mov	local01, local03
205dc     06 1E 66 F0 | 	shl	local01, #6
205e0     0F 25 02 F1 | 	add	local04, local01
205e4     20 24 06 F1 | 	add	local04, #32
205e8     12 01 68 FC | 	wrlong	#0, local04
205ec                 | '   long[base+64*iii+36]:=0
205ec     10 25 02 F6 | 	mov	local04, local02
205f0     11 1F 02 F6 | 	mov	local01, local03
205f4     06 1E 66 F0 | 	shl	local01, #6
205f8     0F 25 02 F1 | 	add	local04, local01
205fc     24 24 06 F1 | 	add	local04, #36
20600     12 01 68 FC | 	wrlong	#0, local04
20604                 | '   long[base+64*iii+40]:=0
20604     10 25 02 F6 | 	mov	local04, local02
20608     11 1F 02 F6 | 	mov	local01, local03
2060c     06 1E 66 F0 | 	shl	local01, #6
20610     0F 25 02 F1 | 	add	local04, local01
20614     28 24 06 F1 | 	add	local04, #40
20618     12 01 68 FC | 	wrlong	#0, local04
2061c                 | '   long[base+64*iii+44]:=0
2061c     10 25 02 F6 | 	mov	local04, local02
20620     11 1F 02 F6 | 	mov	local01, local03
20624     06 1E 66 F0 | 	shl	local01, #6
20628     0F 25 02 F1 | 	add	local04, local01
2062c     2C 24 06 F1 | 	add	local04, #44
20630     12 01 68 FC | 	wrlong	#0, local04
20634                 | '   long[base+64*iii+28]:=0
20634     10 25 02 F6 | 	mov	local04, local02
20638     11 1F 02 F6 | 	mov	local01, local03
2063c     06 1E 66 F0 | 	shl	local01, #6
20640     0F 25 02 F1 | 	add	local04, local01
20644     1C 24 06 F1 | 	add	local04, #28
20648     12 01 68 FC | 	wrlong	#0, local04
2064c     01 22 06 F1 | 	add	local03, #1
20650     08 22 56 F2 | 	cmps	local03, #8 wc
20654     88 FE 9F CD |  if_b	jmp	#LR__2710
20658                 | LR__2711
20658     02 00 00 FF 
2065c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20660                 | '   
20660                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20660     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
20664     F2 16 02 F6 | 	mov	arg03, objptr
20668     10 24 06 F6 | 	mov	local04, #16
2066c     28 16 62 FD | 	setq	arg03
20670     0A 25 F2 FC | 	coginit	local04, arg02 wc
20674     01 24 66 C6 |  if_b	neg	local04, #1
20678                 | ' waitms(100)
20678     64 12 06 F6 | 	mov	arg01, #100
2067c     78 07 B0 FD | 	call	#__system___waitms
20680                 | ' return cog,base
20680     10 FD 01 F6 | 	mov	result2, local02
20684     12 FB 01 F6 | 	mov	result1, local04
20688     A7 F0 03 F6 | 	mov	ptra, fp
2068c     B2 00 A0 FD | 	call	#popregs_
20690                 | _audio096_spin2_start_ret
20690     2D 00 64 FD | 	ret
20694                 | 
20694                 | ' 
20694                 | ' ' a simple play procedure to not poke everything. 
20694                 | ' 
20694                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
20694                 | _audio096_spin2_play
20694     0C E4 05 F1 | 	add	objptr, #12
20698     F2 00 02 F6 | 	mov	_var01, objptr
2069c     06 12 66 F0 | 	shl	arg01, #6
206a0     09 01 02 F1 | 	add	_var01, arg01
206a4     00 13 02 F6 | 	mov	arg01, _var01
206a8     0C 12 06 F1 | 	add	arg01, #12
206ac     09 1B 62 FC | 	wrlong	arg05, arg01
206b0     00 1C 56 F2 | 	cmps	arg06, #0 wc
206b4     00 13 02 36 |  if_ae	mov	arg01, _var01
206b8     10 12 06 31 |  if_ae	add	arg01, #16
206bc     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
206c0     02 1A 06 C1 |  if_b	add	arg05, #2
206c4     00 13 02 C6 |  if_b	mov	arg01, _var01
206c8     10 12 06 C1 |  if_b	add	arg01, #16
206cc     09 1B 62 CC |  if_b	wrlong	arg05, arg01
206d0     0B 13 52 F6 | 	abs	arg01, arg03 wc
206d4     0F 1B 80 FF 
206d8     09 1F 1A FD | 	qdiv	##3546895, arg01
206dc                 | ' 
206dc                 | ' base2:=@channel1[0]+64*channel
206dc                 | ' 
206dc                 | ' 
206dc                 | ' long[base2+12]:= len
206dc                 | ' if loop >=0 
206dc                 | '   long[base2+16]:= loop
206dc     0C E4 85 F1 | 	sub	objptr, #12
206e0                 | ' else
206e0                 | '   long[base2+16]:= len+2
206e0                 | ' word[base2+20]:=vol
206e0     00 13 02 F6 | 	mov	arg01, _var01
206e4     14 12 06 F1 | 	add	arg01, #20
206e8     09 19 52 FC | 	wrword	arg04, arg01
206ec                 | ' word[base2+24]:= 3546895/splfreq 
206ec     00 19 02 F6 | 	mov	arg04, _var01
206f0     18 18 06 F1 | 	add	arg04, #24
206f4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
206f4                 | ' long[base2+28]:=$40000000    
206f4                 | ' long[base2+32]:=0    
206f4                 | ' long[base2+36]:=0    
206f4                 | ' long[base2+40]:=0    
206f4                 | ' long[base2+44]:=0    
206f4                 | ' long[base2+8]:=sample+$C0000000     
206f4     00 00 60 FF 
206f8     00 14 06 F1 | 	add	arg02, ##-1073741824
206fc     18 12 62 FD | 	getqx	arg01
20700     09 13 82 F6 | 	negc	arg01, arg01
20704     0C 13 52 FC | 	wrword	arg01, arg04
20708     00 13 02 F6 | 	mov	arg01, _var01
2070c     1A 12 06 F1 | 	add	arg01, #26
20710     09 01 5A FC | 	wrword	#256, arg01
20714     00 13 02 F6 | 	mov	arg01, _var01
20718     1C 12 06 F1 | 	add	arg01, #28
2071c     00 00 A0 FF 
20720     09 01 68 FC | 	wrlong	##1073741824, arg01
20724     00 13 02 F6 | 	mov	arg01, _var01
20728     20 12 06 F1 | 	add	arg01, #32
2072c     09 01 68 FC | 	wrlong	#0, arg01
20730     00 13 02 F6 | 	mov	arg01, _var01
20734     24 12 06 F1 | 	add	arg01, #36
20738     09 01 68 FC | 	wrlong	#0, arg01
2073c     00 13 02 F6 | 	mov	arg01, _var01
20740     28 12 06 F1 | 	add	arg01, #40
20744     09 01 68 FC | 	wrlong	#0, arg01
20748     00 13 02 F6 | 	mov	arg01, _var01
2074c     2C 12 06 F1 | 	add	arg01, #44
20750     09 01 68 FC | 	wrlong	#0, arg01
20754     08 00 06 F1 | 	add	_var01, #8
20758     00 15 62 FC | 	wrlong	arg02, _var01
2075c                 | _audio096_spin2_play_ret
2075c     2D 00 64 FD | 	ret
20760                 | 
20760                 | ' 
20760                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
20760                 | _audio096_spin2_play8
20760                 | ' 
20760                 | ' base2:=@channel1[0]+64*channel
20760     0C E4 05 F1 | 	add	objptr, #12
20764     F2 00 02 F6 | 	mov	_var01, objptr
20768     06 12 66 F0 | 	shl	arg01, #6
2076c     09 01 02 F1 | 	add	_var01, arg01
20770                 | ' long[base2]:=0
20770     00 01 68 FC | 	wrlong	#0, _var01
20774                 | ' long[base2+8]:=sample+$40000000 
20774     00 00 20 FF 
20778     00 14 06 F1 | 	add	arg02, ##1073741824
2077c     00 13 02 F6 | 	mov	arg01, _var01
20780     08 12 06 F1 | 	add	arg01, #8
20784     09 15 62 FC | 	wrlong	arg02, arg01
20788                 | ' if loop>=0
20788     00 1C 56 F2 | 	cmps	arg06, #0 wc
2078c     0C E4 85 F1 | 	sub	objptr, #12
20790     1C 00 90 CD |  if_b	jmp	#LR__2720
20794                 | '   long[base2+12]:=loop
20794     00 15 02 F6 | 	mov	arg02, _var01
20798     0C 14 06 F1 | 	add	arg02, #12
2079c     0A 1D 62 FC | 	wrlong	arg06, arg02
207a0                 | '   long[base2+16]:= len
207a0     00 1D 02 F6 | 	mov	arg06, _var01
207a4     10 1C 06 F1 | 	add	arg06, #16
207a8     0E 1B 62 FC | 	wrlong	arg05, arg06
207ac     1C 00 90 FD | 	jmp	#LR__2721
207b0                 | LR__2720
207b0                 | ' else
207b0                 | '   long[base2+12]:= len
207b0     00 1D 02 F6 | 	mov	arg06, _var01
207b4     0C 1C 06 F1 | 	add	arg06, #12
207b8     0E 1B 62 FC | 	wrlong	arg05, arg06
207bc                 | '   long[base2+16]:= len+1
207bc     01 1A 06 F1 | 	add	arg05, #1
207c0     00 13 02 F6 | 	mov	arg01, _var01
207c4     10 12 06 F1 | 	add	arg01, #16
207c8     09 1B 62 FC | 	wrlong	arg05, arg01
207cc                 | LR__2721
207cc     0B 17 52 F6 | 	abs	arg03, arg03 wc
207d0     0F 1B 80 FF 
207d4     0B 1F 1A FD | 	qdiv	##3546895, arg03
207d8                 | ' word[base2+20]:=vol
207d8     00 17 02 F6 | 	mov	arg03, _var01
207dc     14 16 06 F1 | 	add	arg03, #20
207e0     0B 19 52 FC | 	wrword	arg04, arg03
207e4                 | ' word[base2+24]:= 3546895 /splfreq 
207e4     00 13 02 F6 | 	mov	arg01, _var01
207e8     18 12 06 F1 | 	add	arg01, #24
207ec                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
207ec     1A 00 06 F1 | 	add	_var01, #26
207f0     18 18 62 FD | 	getqx	arg04
207f4     0C 19 82 F6 | 	negc	arg04, arg04
207f8     09 19 52 FC | 	wrword	arg04, arg01
207fc     00 01 5A FC | 	wrword	#256, _var01
20800                 | _audio096_spin2_play8_ret
20800     2D 00 64 FD | 	ret
20804                 | 
20804                 | ' 'long[base2+28]:=$40000000
20804                 | ' 
20804                 | '     
20804                 | ' pub stop(channel) 'silence it
20804                 | _audio096_spin2_stop
20804                 | ' 
20804                 | ' word[@channel1[0]+64*channel+20]:=0
20804     0C E4 05 F1 | 	add	objptr, #12
20808     F2 00 02 F6 | 	mov	_var01, objptr
2080c     09 03 02 F6 | 	mov	_var02, arg01
20810     06 02 66 F0 | 	shl	_var02, #6
20814     01 01 02 F1 | 	add	_var01, _var02
20818     14 00 06 F1 | 	add	_var01, #20
2081c     00 01 58 FC | 	wrword	#0, _var01
20820                 | ' word[@channel1[0]+64*channel+20]:=0
20820     F2 00 02 F6 | 	mov	_var01, objptr
20824     06 12 66 F0 | 	shl	arg01, #6
20828     09 01 02 F1 | 	add	_var01, arg01
2082c     14 00 06 F1 | 	add	_var01, #20
20830     00 01 58 FC | 	wrword	#0, _var01
20834     0C E4 85 F1 | 	sub	objptr, #12
20838                 | _audio096_spin2_stop_ret
20838     2D 00 64 FD | 	ret
2083c                 | hubexit
2083c     81 00 80 FD | 	jmp	#cogexit
20840                 | 
20840                 | __system___setbaud
20840     14 7C 06 FB | 	rdlong	muldiva_, #20
20844     09 7F 02 F6 | 	mov	muldivb_, arg01
20848     BA 00 A0 FD | 	call	#divide_
2084c     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
20850                 | LR__2730
20850     3E FA 9D FA | 	rdpin	result1, #62 wc
20854     FE FC A1 F1 | 	subx	result2, result2
20858     F4 FF 9F CD |  if_b	jmp	#LR__2730
2085c                 | LR__2731
2085c     40 7C 64 FD | 	dirl	#62
20860     40 7E 64 FD | 	dirl	#63
20864     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
20868     10 7E 66 F0 | 	shl	muldivb_, #16
2086c     07 14 06 F6 | 	mov	arg02, #7
20870     3F 15 02 F1 | 	add	arg02, muldivb_
20874     3E F8 0C FC | 	wrpin	#124, #62
20878     3E 14 16 FC | 	wxpin	arg02, #62
2087c     3F 7C 0C FC | 	wrpin	#62, #63
20880     14 14 06 F1 | 	add	arg02, #20
20884     3F 14 16 FC | 	wxpin	arg02, #63
20888     41 7C 64 FD | 	dirh	#62
2088c     41 7E 64 FD | 	dirh	#63
20890                 | __system___setbaud_ret
20890     2D 00 64 FD | 	ret
20894                 | 
20894                 | __system___txraw
20894     01 4A 05 F6 | 	mov	COUNT_, #1
20898     A8 00 A0 FD | 	call	#pushregs_
2089c     09 1F 02 F6 | 	mov	local01, arg01
208a0     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
208a4                 | LR__2740
208a4     3E FA 9D FA | 	rdpin	result1, #62 wc
208a8     FE FC A1 F1 | 	subx	result2, result2
208ac     F4 FF 9F CD |  if_b	jmp	#LR__2740
208b0                 | LR__2741
208b0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
208b4     C2 01 00 AF 
208b8     00 12 06 A6 |  if_e	mov	arg01, ##230400
208bc     80 FF BF AD |  if_e	call	#__system___setbaud
208c0     58 7C 64 FD | 	drvl	#62
208c4     3E 1E 26 FC | 	wypin	local01, #62
208c8     01 FA 05 F6 | 	mov	result1, #1
208cc     A7 F0 03 F6 | 	mov	ptra, fp
208d0     B2 00 A0 FD | 	call	#popregs_
208d4                 | __system___txraw_ret
208d4     2D 00 64 FD | 	ret
208d8                 | 
208d8                 | __system___rxraw
208d8     0D 4A 05 F6 | 	mov	COUNT_, #13
208dc     A8 00 A0 FD | 	call	#pushregs_
208e0     09 1F 02 F6 | 	mov	local01, arg01
208e4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
208e8     C2 01 00 AF 
208ec     00 12 06 A6 |  if_e	mov	arg01, ##230400
208f0     4C FF BF AD |  if_e	call	#__system___setbaud
208f4     00 1E 0E F2 | 	cmp	local01, #0 wz
208f8     20 00 90 AD |  if_e	jmp	#LR__2750
208fc     14 22 06 FB | 	rdlong	local03, #20
20900     0A 22 46 F0 | 	shr	local03, #10
20904     11 1F 02 FD | 	qmul	local01, local03
20908     1A FA 61 FD | 	getct	result1
2090c     18 24 62 FD | 	getqx	local04
20910     12 FB 01 F1 | 	add	result1, local04
20914     FD 26 02 F6 | 	mov	local05, result1
20918     04 00 90 FD | 	jmp	#LR__2751
2091c                 | LR__2750
2091c     00 26 06 F6 | 	mov	local05, #0
20920                 | LR__2751
20920     01 28 66 F6 | 	neg	local06, #1
20924     3F 2A 06 F6 | 	mov	local07, #63
20928     00 2C 06 F6 | 	mov	local08, #0
2092c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20930     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20934     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20938                 | LR__2752
20938     08 2E 16 F4 | 	testb	local09, #8 wc
2093c     09 2E 76 F4 | 	testbn	local09, #9 andc
20940     0A 2E 46 F0 | 	shr	local09, #10
20944     01 2C 06 C6 |  if_b	mov	local08, #1
20948     40 7E 6C 3D |  if_ae	testp	#63 wz
2094c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20950     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
20954     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
20958                 | LR__2753
20958     00 20 06 F6 | 	mov	local02, #0
2095c     00 2C 0E F2 | 	cmp	local08, #0 wz
20960     01 20 66 56 |  if_ne	neg	local02, #1
20964     00 30 06 F6 | 	mov	local10, #0
20968     00 22 06 F6 | 	mov	local03, #0
2096c     00 1E 0E F2 | 	cmp	local01, #0 wz
20970     01 22 66 56 |  if_ne	neg	local03, #1
20974     00 24 06 F6 | 	mov	local04, #0
20978     00 32 06 F6 | 	mov	local11, #0
2097c     13 35 02 F6 | 	mov	local12, local05
20980     1A FA 61 FD | 	getct	result1
20984     FD 36 02 F6 | 	mov	local13, result1
20988     1B 35 82 F1 | 	sub	local12, local13
2098c     00 34 56 F2 | 	cmps	local12, #0 wc
20990     00 32 26 C6 |  if_b	not	local11, #0
20994     00 32 0E F2 | 	cmp	local11, #0 wz
20998     00 24 26 56 |  if_ne	not	local04, #0
2099c     12 23 CA F7 | 	test	local03, local04 wz
209a0     00 30 26 56 |  if_ne	not	local10, #0
209a4     18 21 4A F5 | 	or	local02, local10 wz
209a8     8C FF 9F AD |  if_e	jmp	#LR__2752
209ac     00 2C 0E F2 | 	cmp	local08, #0 wz
209b0     17 29 02 56 |  if_ne	mov	local06, local09
209b4     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
209b8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
209bc     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
209c0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
209c4     14 FB 01 F6 | 	mov	result1, local06
209c8     A7 F0 03 F6 | 	mov	ptra, fp
209cc     B2 00 A0 FD | 	call	#popregs_
209d0                 | __system___rxraw_ret
209d0     2D 00 64 FD | 	ret
209d4                 | 
209d4                 | __system___getus
209d4     1A FC 71 FD | 	getct	result2 wc
209d8     1A 00 62 FD | 	getct	_var01
209dc     10 E6 05 F1 | 	add	ptr___system__dat__, #16
209e0     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
209e4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
209e8     20 00 90 5D |  if_ne	jmp	#LR__2760
209ec     14 02 06 FB | 	rdlong	_var02, #20
209f0     A1 07 00 FF 
209f4     40 02 16 FD | 	qdiv	_var02, ##1000000
209f8     10 E6 05 F1 | 	add	ptr___system__dat__, #16
209fc     18 FA 61 FD | 	getqx	result1
20a00     FD 02 02 F6 | 	mov	_var02, result1
20a04     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20a08     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20a0c                 | LR__2760
20a0c     01 FD 11 FD | 	qdiv	result2, _var02
20a10     19 FC 61 FD | 	getqy	result2
20a14     28 FC 61 FD | 	setq	result2
20a18     01 01 12 FD | 	qdiv	_var01, _var02
20a1c     18 FA 61 FD | 	getqx	result1
20a20                 | __system___getus_ret
20a20     2D 00 64 FD | 	ret
20a24                 | 
20a24                 | __system____builtin_memmove
20a24     09 01 02 F6 | 	mov	_var01, arg01
20a28     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20a2c     10 00 90 CD |  if_b	jmp	#LR__2770
20a30     0A 03 02 F6 | 	mov	_var02, arg02
20a34     0B 03 02 F1 | 	add	_var02, arg03
20a38     01 13 52 F2 | 	cmps	arg01, _var02 wc
20a3c     48 00 90 CD |  if_b	jmp	#LR__2776
20a40                 | LR__2770
20a40     0B 05 02 F6 | 	mov	_var03, arg03
20a44     02 04 4E F0 | 	shr	_var03, #2 wz
20a48     18 00 90 AD |  if_e	jmp	#LR__2775
20a4c     97 0A 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
20a50                 | LR__2771
20a50     02 09 D8 FC | 	rep	@LR__2774, _var03
20a54                 | LR__2772
20a54     0A 05 02 FB | 	rdlong	_var03, arg02
20a58     09 05 62 FC | 	wrlong	_var03, arg01
20a5c     04 12 06 F1 | 	add	arg01, #4
20a60     04 14 06 F1 | 	add	arg02, #4
20a64                 | LR__2773
20a64                 | LR__2774
20a64                 | LR__2775
20a64     02 16 CE F7 | 	test	arg03, #2 wz
20a68     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20a6c     09 03 52 5C |  if_ne	wrword	_var02, arg01
20a70     02 12 06 51 |  if_ne	add	arg01, #2
20a74     02 14 06 51 |  if_ne	add	arg02, #2
20a78     01 16 CE F7 | 	test	arg03, #1 wz
20a7c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
20a80     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
20a84     28 00 90 FD | 	jmp	#LR__2782
20a88                 | LR__2776
20a88     0B 13 02 F1 | 	add	arg01, arg03
20a8c     0B 15 02 F1 | 	add	arg02, arg03
20a90     0B 07 0A F6 | 	mov	_var04, arg03 wz
20a94     18 00 90 AD |  if_e	jmp	#LR__2781
20a98     97 0A 48 FB | 	callpa	#(@LR__2779-@LR__2777)>>2,fcache_load_ptr_
20a9c                 | LR__2777
20a9c     03 09 D8 FC | 	rep	@LR__2780, _var04
20aa0                 | LR__2778
20aa0     01 12 86 F1 | 	sub	arg01, #1
20aa4     01 14 86 F1 | 	sub	arg02, #1
20aa8     0A 03 C2 FA | 	rdbyte	_var02, arg02
20aac     09 03 42 FC | 	wrbyte	_var02, arg01
20ab0                 | LR__2779
20ab0                 | LR__2780
20ab0                 | LR__2781
20ab0                 | LR__2782
20ab0     00 FB 01 F6 | 	mov	result1, _var01
20ab4                 | __system____builtin_memmove_ret
20ab4     2D 00 64 FD | 	ret
20ab8                 | 
20ab8                 | __system____builtin_strcpy
20ab8     09 01 02 F6 | 	mov	_var01, arg01
20abc     97 0A 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
20ac0                 | LR__2790
20ac0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
20ac4     09 FB 41 FC | 	wrbyte	result1, arg01
20ac8     01 14 06 F1 | 	add	arg02, #1
20acc     01 12 06 F1 | 	add	arg01, #1
20ad0     EC FF 9F 5D |  if_ne	jmp	#LR__2790
20ad4                 | LR__2791
20ad4     00 FB 01 F6 | 	mov	result1, _var01
20ad8                 | __system____builtin_strcpy_ret
20ad8     2D 00 64 FD | 	ret
20adc                 | 
20adc                 | __system____topofstack
20adc     00 4A 05 F6 | 	mov	COUNT_, #0
20ae0     A8 00 A0 FD | 	call	#pushregs_
20ae4     08 F0 07 F1 | 	add	ptra, #8
20ae8     04 4E 05 F1 | 	add	fp, #4
20aec     A7 12 62 FC | 	wrlong	arg01, fp
20af0     A7 FA 01 F6 | 	mov	result1, fp
20af4     04 4E 85 F1 | 	sub	fp, #4
20af8     A7 F0 03 F6 | 	mov	ptra, fp
20afc     B2 00 A0 FD | 	call	#popregs_
20b00                 | __system____topofstack_ret
20b00     2D 00 64 FD | 	ret
20b04                 | 
20b04                 | __system___lockmem
20b04     00 FA 05 F6 | 	mov	result1, #0
20b08     01 FA 61 FD | 	cogid	result1
20b0c     00 FB 05 F1 | 	add	result1, #256
20b10                 | LR__2800
20b10     09 01 0A FB | 	rdlong	_var01, arg01 wz
20b14     09 FB 61 AC |  if_e	wrlong	result1, arg01
20b18     09 01 02 AB |  if_e	rdlong	_var01, arg01
20b1c     09 01 02 AB |  if_e	rdlong	_var01, arg01
20b20     FD 00 0A F2 | 	cmp	_var01, result1 wz
20b24     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
20b28                 | __system___lockmem_ret
20b28     2D 00 64 FD | 	ret
20b2c                 | 
20b2c                 | __system___string_cmp
20b2c     97 14 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
20b30                 | LR__2810
20b30     09 01 C2 FA | 	rdbyte	_var01, arg01
20b34     0A 03 C2 FA | 	rdbyte	_var02, arg02
20b38     00 05 02 F6 | 	mov	_var03, _var01
20b3c     01 05 8A F1 | 	sub	_var03, _var02 wz
20b40     01 12 06 F1 | 	add	arg01, #1
20b44     01 14 06 F1 | 	add	arg02, #1
20b48     0C 00 90 5D |  if_ne	jmp	#LR__2812
20b4c     00 00 0E F2 | 	cmp	_var01, #0 wz
20b50     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20b54     D8 FF 9F 5D |  if_ne	jmp	#LR__2810
20b58                 | LR__2811
20b58                 | LR__2812
20b58     02 FB 01 F6 | 	mov	result1, _var03
20b5c                 | __system___string_cmp_ret
20b5c     2D 00 64 FD | 	ret
20b60                 | 
20b60                 | __system___string_concat
20b60     05 4A 05 F6 | 	mov	COUNT_, #5
20b64     A8 00 A0 FD | 	call	#pushregs_
20b68     09 1F 02 F6 | 	mov	local01, arg01
20b6c     0A 21 02 F6 | 	mov	local02, arg02
20b70     0F 13 02 F6 | 	mov	arg01, local01
20b74     09 23 02 F6 | 	mov	local03, arg01
20b78     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
20b7c                 | LR__2820
20b7c     11 FB C9 FA | 	rdbyte	result1, local03 wz
20b80     01 22 06 51 |  if_ne	add	local03, #1
20b84     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
20b88                 | LR__2821
20b88     09 23 82 F1 | 	sub	local03, arg01
20b8c     11 25 02 F6 | 	mov	local04, local03
20b90     10 13 02 F6 | 	mov	arg01, local02
20b94     09 23 02 F6 | 	mov	local03, arg01
20b98     97 06 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
20b9c                 | LR__2822
20b9c     11 FB C9 FA | 	rdbyte	result1, local03 wz
20ba0     01 22 06 51 |  if_ne	add	local03, #1
20ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__2822
20ba8                 | LR__2823
20ba8     09 23 82 F1 | 	sub	local03, arg01
20bac     12 13 02 F6 | 	mov	arg01, local04
20bb0     11 13 02 F1 | 	add	arg01, local03
20bb4     01 12 06 F1 | 	add	arg01, #1
20bb8     24 3E B0 FD | 	call	#__system___gc_alloc_managed
20bbc     FD 26 0A F6 | 	mov	local05, result1 wz
20bc0     28 00 90 AD |  if_e	jmp	#LR__2824
20bc4     13 13 02 F6 | 	mov	arg01, local05
20bc8     0F 15 02 F6 | 	mov	arg02, local01
20bcc     12 17 02 F6 | 	mov	arg03, local04
20bd0     50 FE BF FD | 	call	#__system____builtin_memmove
20bd4     13 13 02 F6 | 	mov	arg01, local05
20bd8     12 13 02 F1 | 	add	arg01, local04
20bdc     01 22 06 F1 | 	add	local03, #1
20be0     10 15 02 F6 | 	mov	arg02, local02
20be4     11 17 02 F6 | 	mov	arg03, local03
20be8     38 FE BF FD | 	call	#__system____builtin_memmove
20bec                 | LR__2824
20bec     13 FB 01 F6 | 	mov	result1, local05
20bf0     A7 F0 03 F6 | 	mov	ptra, fp
20bf4     B2 00 A0 FD | 	call	#popregs_
20bf8                 | __system___string_concat_ret
20bf8     2D 00 64 FD | 	ret
20bfc                 | 
20bfc                 | __system___tx
20bfc     02 4A 05 F6 | 	mov	COUNT_, #2
20c00     A8 00 A0 FD | 	call	#pushregs_
20c04     09 1F 02 F6 | 	mov	local01, arg01
20c08     0A 1E 0E F2 | 	cmp	local01, #10 wz
20c0c     18 00 90 5D |  if_ne	jmp	#LR__2830
20c10     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c14     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20c18     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c1c     02 20 CE F7 | 	test	local02, #2 wz
20c20     0D 12 06 56 |  if_ne	mov	arg01, #13
20c24     6C FC BF 5D |  if_ne	call	#__system___txraw
20c28                 | LR__2830
20c28     0F 13 02 F6 | 	mov	arg01, local01
20c2c     64 FC BF FD | 	call	#__system___txraw
20c30     A7 F0 03 F6 | 	mov	ptra, fp
20c34     B2 00 A0 FD | 	call	#popregs_
20c38                 | __system___tx_ret
20c38     2D 00 64 FD | 	ret
20c3c                 | 
20c3c                 | __system___rx
20c3c     01 4A 05 F6 | 	mov	COUNT_, #1
20c40     A8 00 A0 FD | 	call	#pushregs_
20c44                 | LR__2840
20c44     00 12 06 F6 | 	mov	arg01, #0
20c48     8C FC BF FD | 	call	#__system___rxraw
20c4c     FD 1E 02 F6 | 	mov	local01, result1
20c50     FF FF 7F FF 
20c54     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20c58     E8 FF 9F AD |  if_e	jmp	#LR__2840
20c5c     0D 1E 0E F2 | 	cmp	local01, #13 wz
20c60     14 00 90 5D |  if_ne	jmp	#LR__2841
20c64     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c68     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20c6c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c70     02 FA CD F7 | 	test	result1, #2 wz
20c74     0A 1E 06 56 |  if_ne	mov	local01, #10
20c78                 | LR__2841
20c78     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c7c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20c80     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c84     01 12 CE F7 | 	test	arg01, #1 wz
20c88     1C 00 90 AD |  if_e	jmp	#LR__2844
20c8c     7F 1E 0E F2 | 	cmp	local01, #127 wz
20c90     0C 00 90 5D |  if_ne	jmp	#LR__2842
20c94     08 12 06 F6 | 	mov	arg01, #8
20c98     60 FF BF FD | 	call	#__system___tx
20c9c     08 00 90 FD | 	jmp	#LR__2843
20ca0                 | LR__2842
20ca0     0F 13 02 F6 | 	mov	arg01, local01
20ca4     54 FF BF FD | 	call	#__system___tx
20ca8                 | LR__2843
20ca8                 | LR__2844
20ca8     0F FB 01 F6 | 	mov	result1, local01
20cac     A7 F0 03 F6 | 	mov	ptra, fp
20cb0     B2 00 A0 FD | 	call	#popregs_
20cb4                 | __system___rx_ret
20cb4     2D 00 64 FD | 	ret
20cb8                 | 
20cb8                 | __system___pinwrite
20cb8     09 01 02 F6 | 	mov	_var01, arg01
20cbc     1F 00 06 F5 | 	and	_var01, #31
20cc0     20 12 CE F7 | 	test	arg01, #32 wz
20cc4     06 12 46 F0 | 	shr	arg01, #6
20cc8     09 13 CA F9 | 	bmask	arg01, arg01
20ccc     00 13 62 F0 | 	shl	arg01, _var01
20cd0     00 15 62 F0 | 	shl	arg02, _var01
20cd4     1C 00 90 AD |  if_e	jmp	#LR__2850
20cd8     09 F7 43 F5 | 	or	dirb, arg01
20cdc     FD 01 02 F6 | 	mov	_var01, outb
20ce0     09 01 22 F5 | 	andn	_var01, arg01
20ce4     09 15 02 F5 | 	and	arg02, arg01
20ce8     0A 01 42 F5 | 	or	_var01, arg02
20cec     00 FB 03 F6 | 	mov	outb, _var01
20cf0     18 00 90 FD | 	jmp	#LR__2851
20cf4                 | LR__2850
20cf4     09 F5 43 F5 | 	or	dira, arg01
20cf8     FC 01 02 F6 | 	mov	_var01, outa
20cfc     09 01 22 F5 | 	andn	_var01, arg01
20d00     09 15 02 F5 | 	and	arg02, arg01
20d04     0A 01 42 F5 | 	or	_var01, arg02
20d08     00 F9 03 F6 | 	mov	outa, _var01
20d0c                 | LR__2851
20d0c                 | __system___pinwrite_ret
20d0c     2D 00 64 FD | 	ret
20d10                 | 
20d10                 | __system___basic_read_line
20d10     06 4A 05 F6 | 	mov	COUNT_, #6
20d14     A8 00 A0 FD | 	call	#pushregs_
20d18     09 1F 02 F6 | 	mov	local01, arg01
20d1c     00 20 06 F6 | 	mov	local02, #0
20d20     18 22 06 F6 | 	mov	local03, #24
20d24     00 24 06 F6 | 	mov	local04, #0
20d28     18 12 06 F6 | 	mov	arg01, #24
20d2c     B0 3C B0 FD | 	call	#__system___gc_alloc_managed
20d30     FD 26 0A F6 | 	mov	local05, result1 wz
20d34     13 FB 01 A6 |  if_e	mov	result1, local05
20d38     B0 00 90 AD |  if_e	jmp	#LR__2863
20d3c                 | LR__2860
20d3c     0F 13 02 F6 | 	mov	arg01, local01
20d40     78 0B B0 FD | 	call	#__system___basic_get_char
20d44     FD 28 02 F6 | 	mov	local06, result1
20d48     01 28 56 F2 | 	cmps	local06, #1 wc
20d4c     8C 00 90 CD |  if_b	jmp	#LR__2862
20d50     0A 28 0E F2 | 	cmp	local06, #10 wz
20d54     10 00 90 5D |  if_ne	jmp	#LR__2861
20d58     00 24 0E F2 | 	cmp	local04, #0 wz
20d5c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20d60     01 20 86 11 |  if_a	sub	local02, #1
20d64     74 00 90 FD | 	jmp	#LR__2862
20d68                 | LR__2861
20d68     0D 28 0E F2 | 	cmp	local06, #13 wz
20d6c     01 24 06 A6 |  if_e	mov	local04, #1
20d70     00 24 06 56 |  if_ne	mov	local04, #0
20d74     08 28 0E F2 | 	cmp	local06, #8 wz
20d78     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20d7c     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20d80     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20d84     B4 FF 9F AD |  if_e	jmp	#LR__2860
20d88     13 17 02 F6 | 	mov	arg03, local05
20d8c     10 17 02 F1 | 	add	arg03, local02
20d90     0B 29 42 FC | 	wrbyte	local06, arg03
20d94     01 20 06 F1 | 	add	local02, #1
20d98     11 21 0A F2 | 	cmp	local02, local03 wz
20d9c     9C FF 9F 5D |  if_ne	jmp	#LR__2860
20da0     11 13 02 F6 | 	mov	arg01, local03
20da4     20 12 06 F1 | 	add	arg01, #32
20da8     34 3C B0 FD | 	call	#__system___gc_alloc_managed
20dac     FD 28 0A F6 | 	mov	local06, result1 wz
20db0     14 FB 01 A6 |  if_e	mov	result1, local06
20db4     34 00 90 AD |  if_e	jmp	#LR__2863
20db8     14 13 02 F6 | 	mov	arg01, local06
20dbc     13 15 02 F6 | 	mov	arg02, local05
20dc0     11 17 02 F6 | 	mov	arg03, local03
20dc4     5C FC BF FD | 	call	#__system____builtin_memmove
20dc8     20 22 06 F1 | 	add	local03, #32
20dcc     13 13 02 F6 | 	mov	arg01, local05
20dd0     48 3D B0 FD | 	call	#__system___gc_free
20dd4     14 27 02 F6 | 	mov	local05, local06
20dd8     60 FF 9F FD | 	jmp	#LR__2860
20ddc                 | LR__2862
20ddc     13 29 02 F6 | 	mov	local06, local05
20de0     10 29 02 F1 | 	add	local06, local02
20de4     14 01 48 FC | 	wrbyte	#0, local06
20de8     13 FB 01 F6 | 	mov	result1, local05
20dec                 | LR__2863
20dec     A7 F0 03 F6 | 	mov	ptra, fp
20df0     B2 00 A0 FD | 	call	#popregs_
20df4                 | __system___basic_read_line_ret
20df4     2D 00 64 FD | 	ret
20df8                 | 
20df8                 | __system___waitms
20df8     09 01 02 F6 | 	mov	_var01, arg01
20dfc     1A 02 62 FD | 	getct	_var02
20e00     14 04 06 FB | 	rdlong	_var03, #20
20e04     97 14 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20e08                 | LR__2870
20e08     01 00 00 FF 
20e0c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20e10     1C 00 90 CD |  if_b	jmp	#LR__2872
20e14     02 03 02 F1 | 	add	_var02, _var03
20e18     01 13 02 F6 | 	mov	arg01, _var02
20e1c     00 12 66 FA | 	addct1	arg01, #0
20e20     24 22 60 FD | 	waitct1
20e24     01 00 00 FF 
20e28     E8 01 86 F1 | 	sub	_var01, ##1000
20e2c     D8 FF 9F FD | 	jmp	#LR__2870
20e30                 | LR__2871
20e30                 | LR__2872
20e30     01 00 56 F2 | 	cmps	_var01, #1 wc
20e34     28 00 90 CD |  if_b	jmp	#LR__2873
20e38     02 01 02 FD | 	qmul	_var01, _var03
20e3c     01 00 00 FF 
20e40     E8 17 06 F6 | 	mov	arg03, ##1000
20e44     19 FA 61 FD | 	getqy	result1
20e48     18 12 62 FD | 	getqx	arg01
20e4c     28 FA 61 FD | 	setq	result1
20e50     0B 13 12 FD | 	qdiv	arg01, arg03
20e54     18 12 62 FD | 	getqx	arg01
20e58     01 13 62 FA | 	addct1	arg01, _var02
20e5c     24 22 60 FD | 	waitct1
20e60                 | LR__2873
20e60                 | __system___waitms_ret
20e60     2D 00 64 FD | 	ret
20e64                 | 
20e64                 | __system___waitus
20e64     09 01 02 F6 | 	mov	_var01, arg01
20e68     1A 02 62 FD | 	getct	_var02
20e6c     14 04 06 FB | 	rdlong	_var03, #20
20e70     97 14 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20e74                 | LR__2880
20e74     A1 07 00 FF 
20e78     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20e7c     1C 00 90 CD |  if_b	jmp	#LR__2882
20e80     02 03 02 F1 | 	add	_var02, _var03
20e84     01 13 02 F6 | 	mov	arg01, _var02
20e88     00 12 66 FA | 	addct1	arg01, #0
20e8c     24 22 60 FD | 	waitct1
20e90     A1 07 00 FF 
20e94     40 00 86 F1 | 	sub	_var01, ##1000000
20e98     D8 FF 9F FD | 	jmp	#LR__2880
20e9c                 | LR__2881
20e9c                 | LR__2882
20e9c     01 00 56 F2 | 	cmps	_var01, #1 wc
20ea0     28 00 90 CD |  if_b	jmp	#LR__2883
20ea4     02 01 02 FD | 	qmul	_var01, _var03
20ea8     A1 07 00 FF 
20eac     40 16 06 F6 | 	mov	arg03, ##1000000
20eb0     19 FA 61 FD | 	getqy	result1
20eb4     18 12 62 FD | 	getqx	arg01
20eb8     28 FA 61 FD | 	setq	result1
20ebc     0B 13 12 FD | 	qdiv	arg01, arg03
20ec0     18 FA 61 FD | 	getqx	result1
20ec4     FD 02 62 FA | 	addct1	_var02, result1
20ec8     24 22 60 FD | 	waitct1
20ecc                 | LR__2883
20ecc                 | __system___waitus_ret
20ecc     2D 00 64 FD | 	ret
20ed0                 | 
20ed0                 | __system___mount
20ed0     0B 4A 05 F6 | 	mov	COUNT_, #11
20ed4     A8 00 A0 FD | 	call	#pushregs_
20ed8     09 1F 02 F6 | 	mov	local01, arg01
20edc     0A 21 0A F6 | 	mov	local02, arg02 wz
20ee0     01 22 66 F6 | 	neg	local03, #1
20ee4     01 FA 65 A6 |  if_e	neg	result1, #1
20ee8     98 02 90 AD |  if_e	jmp	#LR__2905
20eec     0F FB C1 FA | 	rdbyte	result1, local01
20ef0     2F FA 0D F2 | 	cmp	result1, #47 wz
20ef4     28 00 90 5D |  if_ne	jmp	#LR__2892
20ef8     0F 13 02 F6 | 	mov	arg01, local01
20efc     09 25 02 F6 | 	mov	local04, arg01
20f00     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20f04                 | LR__2890
20f04     12 FB C9 FA | 	rdbyte	result1, local04 wz
20f08     01 24 06 51 |  if_ne	add	local04, #1
20f0c     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20f10                 | LR__2891
20f10     09 25 82 F1 | 	sub	local04, arg01
20f14     12 FB 01 F6 | 	mov	result1, local04
20f18     10 FA 55 F2 | 	cmps	result1, #16 wc
20f1c     14 00 90 CD |  if_b	jmp	#LR__2893
20f20                 | LR__2892
20f20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20f24     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20f28     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20f2c     01 FA 65 F6 | 	neg	result1, #1
20f30     50 02 90 FD | 	jmp	#LR__2905
20f34                 | LR__2893
20f34     00 26 06 F6 | 	mov	local05, #0
20f38                 | LR__2894
20f38     04 26 56 F2 | 	cmps	local05, #4 wc
20f3c     B0 00 90 3D |  if_ae	jmp	#LR__2899
20f40     13 13 02 F6 | 	mov	arg01, local05
20f44     02 12 66 F0 | 	shl	arg01, #2
20f48     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f4c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20f50     09 FB 09 FB | 	rdlong	result1, arg01 wz
20f54     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f58     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20f5c     13 23 02 86 |  if_c_and_z	mov	local03, local05
20f60     84 00 90 8D |  if_c_and_z	jmp	#LR__2898
20f64     13 13 02 F6 | 	mov	arg01, local05
20f68     02 12 66 F0 | 	shl	arg01, #2
20f6c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f70     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20f74     09 13 02 FB | 	rdlong	arg01, arg01
20f78     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f7c     09 25 02 F6 | 	mov	local04, arg01
20f80     97 06 48 FB | 	callpa	#(@LR__2896-@LR__2895)>>2,fcache_load_ptr_
20f84                 | LR__2895
20f84     12 FB C9 FA | 	rdbyte	result1, local04 wz
20f88     01 24 06 51 |  if_ne	add	local04, #1
20f8c     F4 FF 9F 5D |  if_ne	jmp	#LR__2895
20f90                 | LR__2896
20f90     09 25 82 F1 | 	sub	local04, arg01
20f94     12 29 02 F6 | 	mov	local06, local04
20f98     14 13 02 F6 | 	mov	arg01, local06
20f9c     0F 13 02 F1 | 	add	arg01, local01
20fa0     09 FB C1 FA | 	rdbyte	result1, arg01
20fa4     2F FA 0D F2 | 	cmp	result1, #47 wz
20fa8     14 2B 02 56 |  if_ne	mov	local07, local06
20fac     0F 2B 02 51 |  if_ne	add	local07, local01
20fb0     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20fb4     30 00 90 5D |  if_ne	jmp	#LR__2897
20fb8     13 17 02 F6 | 	mov	arg03, local05
20fbc     02 16 66 F0 | 	shl	arg03, #2
20fc0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20fc4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20fc8     0B 15 02 FB | 	rdlong	arg02, arg03
20fcc     0F 13 02 F6 | 	mov	arg01, local01
20fd0     14 17 02 F6 | 	mov	arg03, local06
20fd4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20fd8     84 4E B0 FD | 	call	#__system__strncmp
20fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
20fe0     13 23 02 A6 |  if_e	mov	local03, local05
20fe4     08 00 90 AD |  if_e	jmp	#LR__2899
20fe8                 | LR__2897
20fe8                 | LR__2898
20fe8     01 26 06 F1 | 	add	local05, #1
20fec     48 FF 9F FD | 	jmp	#LR__2894
20ff0                 | LR__2899
20ff0     FF FF 7F FF 
20ff4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20ff8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20ffc     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
21000     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21004     01 FA 65 A6 |  if_e	neg	result1, #1
21008     78 01 90 AD |  if_e	jmp	#LR__2905
2100c     11 27 02 F6 | 	mov	local05, local03
21010     13 2B 02 F6 | 	mov	local07, local05
21014     02 2A 66 F0 | 	shl	local07, #2
21018     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2101c     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
21020     15 29 0A FB | 	rdlong	local06, local07 wz
21024     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21028     58 00 90 AD |  if_e	jmp	#LR__2900
2102c     4C 28 06 F1 | 	add	local06, #76
21030     14 2B 0A FB | 	rdlong	local07, local06 wz
21034     4C 28 86 F1 | 	sub	local06, #76
21038     48 00 90 AD |  if_e	jmp	#LR__2900
2103c     4C 28 06 F1 | 	add	local06, #76
21040     14 2B 02 FB | 	rdlong	local07, local06
21044     15 23 02 F6 | 	mov	local03, local07
21048     13 2A 46 F7 | 	zerox	local07, #19
2104c     14 22 46 F0 | 	shr	local03, #20
21050     02 22 66 F0 | 	shl	local03, #2
21054     ED 22 02 F1 | 	add	local03, __methods__
21058     11 23 02 FB | 	rdlong	local03, local03
2105c     13 29 02 F6 | 	mov	local06, local05
21060     02 28 66 F0 | 	shl	local06, #2
21064     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21068     F3 28 02 F1 | 	add	local06, ptr___system__dat__
2106c     14 13 02 FB | 	rdlong	arg01, local06
21070     F2 28 02 F6 | 	mov	local06, objptr
21074     15 E5 01 F6 | 	mov	objptr, local07
21078     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2107c     2D 22 62 FD | 	call	local03
21080     14 E5 01 F6 | 	mov	objptr, local06
21084                 | LR__2900
21084     13 2D 02 F6 | 	mov	local08, local05
21088     02 2C 66 F0 | 	shl	local08, #2
2108c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21090     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21094     16 21 62 FC | 	wrlong	local02, local08
21098     00 20 0E F2 | 	cmp	local02, #0 wz
2109c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
210a0     18 00 90 5D |  if_ne	jmp	#LR__2901
210a4     02 26 66 F0 | 	shl	local05, #2
210a8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
210ac     F3 26 02 F1 | 	add	local05, ptr___system__dat__
210b0     13 01 68 FC | 	wrlong	#0, local05
210b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
210b8     C4 00 90 FD | 	jmp	#LR__2904
210bc                 | LR__2901
210bc     13 2F 02 F6 | 	mov	local09, local05
210c0     04 2E 66 F0 | 	shl	local09, #4
210c4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
210c8     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
210cc     17 13 02 F6 | 	mov	arg01, local09
210d0     0F 15 02 F6 | 	mov	arg02, local01
210d4     10 16 06 F6 | 	mov	arg03, #16
210d8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
210dc     D4 4C B0 FD | 	call	#__system__strncpy
210e0     48 20 06 F1 | 	add	local02, #72
210e4     10 2D 0A FB | 	rdlong	local08, local02 wz
210e8     48 20 86 F1 | 	sub	local02, #72
210ec     7C 00 90 AD |  if_e	jmp	#LR__2903
210f0     48 20 06 F1 | 	add	local02, #72
210f4     10 2D 02 FB | 	rdlong	local08, local02
210f8     16 31 02 F6 | 	mov	local10, local08
210fc     13 2C 46 F7 | 	zerox	local08, #19
21100     14 30 46 F0 | 	shr	local10, #20
21104     02 30 66 F0 | 	shl	local10, #2
21108     ED 30 02 F1 | 	add	local10, __methods__
2110c     18 31 02 FB | 	rdlong	local10, local10
21110     17 13 02 F6 | 	mov	arg01, local09
21114     F2 32 02 F6 | 	mov	local11, objptr
21118     16 E5 01 F6 | 	mov	objptr, local08
2111c     2D 30 62 FD | 	call	local10
21120     19 E5 01 F6 | 	mov	objptr, local11
21124     FD 12 0A F6 | 	mov	arg01, result1 wz
21128     40 00 90 AD |  if_e	jmp	#LR__2902
2112c     13 2D 02 F6 | 	mov	local08, local05
21130     02 2C 66 F0 | 	shl	local08, #2
21134     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21138     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
2113c     16 01 68 FC | 	wrlong	#0, local08
21140     02 26 66 F0 | 	shl	local05, #2
21144     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21148     F3 26 02 F1 | 	add	local05, ptr___system__dat__
2114c     13 01 68 FC | 	wrlong	#0, local05
21150     09 13 6A F6 | 	neg	arg01, arg01 wz
21154     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
21158     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2115c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21160     01 FA 65 56 |  if_ne	neg	result1, #1
21164     00 FA 05 A6 |  if_e	mov	result1, #0
21168     18 00 90 FD | 	jmp	#LR__2905
2116c                 | LR__2902
2116c                 | LR__2903
2116c     02 26 66 F0 | 	shl	local05, #2
21170     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21174     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21178     13 2F 62 FC | 	wrlong	local09, local05
2117c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21180                 | LR__2904
21180     00 FA 05 F6 | 	mov	result1, #0
21184                 | LR__2905
21184     A7 F0 03 F6 | 	mov	ptra, fp
21188     B2 00 A0 FD | 	call	#popregs_
2118c                 | __system___mount_ret
2118c     2D 00 64 FD | 	ret
21190                 | 
21190                 | __system___chdir
21190     00 4A 05 F6 | 	mov	COUNT_, #0
21194     A8 00 A0 FD | 	call	#pushregs_
21198     40 F0 07 F1 | 	add	ptra, #64
2119c     04 4E 05 F1 | 	add	fp, #4
211a0     A7 12 62 FC | 	wrlong	arg01, fp
211a4     04 4E 05 F1 | 	add	fp, #4
211a8     A7 14 02 F6 | 	mov	arg02, fp
211ac     08 4E 85 F1 | 	sub	fp, #8
211b0     A4 48 B0 FD | 	call	#__system__stat
211b4     3C 4E 05 F1 | 	add	fp, #60
211b8     A7 FA 61 FC | 	wrlong	result1, fp
211bc     3C 4E 85 F1 | 	sub	fp, #60
211c0     00 FA 0D F2 | 	cmp	result1, #0 wz
211c4     3C 4E 05 51 |  if_ne	add	fp, #60
211c8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
211cc     3C 4E 85 51 |  if_ne	sub	fp, #60
211d0     BC 00 90 5D |  if_ne	jmp	#LR__2912
211d4     10 4E 05 F1 | 	add	fp, #16
211d8     A7 12 02 FB | 	rdlong	arg01, fp
211dc     10 4E 85 F1 | 	sub	fp, #16
211e0     78 00 00 FF 
211e4     00 12 06 F5 | 	and	arg01, ##61440
211e8     08 00 00 FF 
211ec     00 12 0E F2 | 	cmp	arg01, ##4096 wz
211f0     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
211f4     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
211f8     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
211fc     01 FA 65 56 |  if_ne	neg	result1, #1
21200     8C 00 90 5D |  if_ne	jmp	#LR__2912
21204     04 4E 05 F1 | 	add	fp, #4
21208     A7 16 02 FB | 	rdlong	arg03, fp
2120c     04 4E 85 F1 | 	sub	fp, #4
21210     0B 17 C2 FA | 	rdbyte	arg03, arg03
21214     2F 16 0E F2 | 	cmp	arg03, #47 wz
21218     24 00 90 5D |  if_ne	jmp	#LR__2910
2121c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21220     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21224     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21228     04 4E 05 F1 | 	add	fp, #4
2122c     A7 14 02 FB | 	rdlong	arg02, fp
21230     04 4E 85 F1 | 	sub	fp, #4
21234     00 17 06 F6 | 	mov	arg03, #256
21238     78 4B B0 FD | 	call	#__system__strncpy
2123c     4C 00 90 FD | 	jmp	#LR__2911
21240                 | LR__2910
21240     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21244     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21248     38 4E 05 F1 | 	add	fp, #56
2124c     A7 12 62 FC | 	wrlong	arg01, fp
21250     38 4E 85 F1 | 	sub	fp, #56
21254     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
21258     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2125c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21260     00 17 06 F6 | 	mov	arg03, #256
21264     4C 4B B0 FD | 	call	#__system__strncpy
21268     38 4E 05 F1 | 	add	fp, #56
2126c     A7 12 02 FB | 	rdlong	arg01, fp
21270     34 4E 85 F1 | 	sub	fp, #52
21274     A7 14 02 FB | 	rdlong	arg02, fp
21278     04 4E 85 F1 | 	sub	fp, #4
2127c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21280     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
21284     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21288     10 00 B0 FD | 	call	#__system____getvfsforfile
2128c                 | LR__2911
2128c     00 FA 05 F6 | 	mov	result1, #0
21290                 | LR__2912
21290     A7 F0 03 F6 | 	mov	ptra, fp
21294     B2 00 A0 FD | 	call	#popregs_
21298                 | __system___chdir_ret
21298     2D 00 64 FD | 	ret
2129c                 | 
2129c                 | __system____getvfsforfile
2129c     0E 4A 05 F6 | 	mov	COUNT_, #14
212a0     A8 00 A0 FD | 	call	#pushregs_
212a4     09 1F 02 F6 | 	mov	local01, arg01
212a8     0A 21 02 F6 | 	mov	local02, arg02
212ac     0B 23 02 F6 | 	mov	local03, arg03
212b0     97 10 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
212b4                 | LR__2920
212b4     10 FB C1 FA | 	rdbyte	result1, local02
212b8     2F FA 0D F2 | 	cmp	result1, #47 wz
212bc     01 20 06 A1 |  if_e	add	local02, #1
212c0     10 25 C2 AA |  if_e	rdbyte	local04, local02
212c4     01 20 86 A1 |  if_e	sub	local02, #1
212c8     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
212cc     01 20 06 A1 |  if_e	add	local02, #1
212d0     E0 FF 9F AD |  if_e	jmp	#LR__2920
212d4                 | LR__2921
212d4     10 25 C2 FA | 	rdbyte	local04, local02
212d8     2F 24 0E F2 | 	cmp	local04, #47 wz
212dc     14 00 90 5D |  if_ne	jmp	#LR__2922
212e0     0F 13 02 F6 | 	mov	arg01, local01
212e4     10 15 02 F6 | 	mov	arg02, local02
212e8     00 17 06 F6 | 	mov	arg03, #256
212ec     C4 4A B0 FD | 	call	#__system__strncpy
212f0     7C 00 90 FD | 	jmp	#LR__2924
212f4                 | LR__2922
212f4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
212f8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
212fc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21300     0F 13 02 F6 | 	mov	arg01, local01
21304     00 17 06 F6 | 	mov	arg03, #256
21308     A8 4A B0 FD | 	call	#__system__strncpy
2130c     10 25 CA FA | 	rdbyte	local04, local02 wz
21310     5C 00 90 AD |  if_e	jmp	#LR__2923
21314     10 25 C2 FA | 	rdbyte	local04, local02
21318     2E 24 0E F2 | 	cmp	local04, #46 wz
2131c     01 20 06 A1 |  if_e	add	local02, #1
21320     10 27 C2 AA |  if_e	rdbyte	local05, local02
21324     01 20 86 A1 |  if_e	sub	local02, #1
21328     13 29 02 A6 |  if_e	mov	local06, local05
2132c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21330     3C 00 90 AD |  if_e	jmp	#LR__2923
21334     0F 27 C2 FA | 	rdbyte	local05, local01
21338     2F 26 0E F2 | 	cmp	local05, #47 wz
2133c     01 1E 06 A1 |  if_e	add	local01, #1
21340     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21344     01 1E 86 A1 |  if_e	sub	local01, #1
21348     00 24 4E A2 |  if_e	cmps	local04, #0 wz
2134c     81 01 00 5F 
21350     4C 15 06 56 |  if_ne	mov	arg02, ##@LR__5020
21354     0F 13 02 56 |  if_ne	mov	arg01, local01
21358     00 17 06 56 |  if_ne	mov	arg03, #256
2135c     A0 4A B0 5D |  if_ne	call	#__system__strncat
21360     0F 13 02 F6 | 	mov	arg01, local01
21364     10 15 02 F6 | 	mov	arg02, local02
21368     00 17 06 F6 | 	mov	arg03, #256
2136c     90 4A B0 FD | 	call	#__system__strncat
21370                 | LR__2923
21370                 | LR__2924
21370     0F 13 02 F6 | 	mov	arg01, local01
21374     48 4C B0 FD | 	call	#__system___normalizeName
21378     0F 25 CA FA | 	rdbyte	local04, local01 wz
2137c     1C 00 90 AD |  if_e	jmp	#LR__2925
21380     0F 25 C2 FA | 	rdbyte	local04, local01
21384     2F 24 0E F2 | 	cmp	local04, #47 wz
21388     01 1E 06 A1 |  if_e	add	local01, #1
2138c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
21390     01 1E 86 A1 |  if_e	sub	local01, #1
21394     00 28 4E A2 |  if_e	cmps	local06, #0 wz
21398     18 00 90 5D |  if_ne	jmp	#LR__2926
2139c                 | LR__2925
2139c     01 00 00 FF 
213a0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
213a4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
213a8     01 00 00 FF 
213ac     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
213b0     EC 01 90 FD | 	jmp	#LR__2940
213b4                 | LR__2926
213b4     00 2A 06 F6 | 	mov	local07, #0
213b8                 | LR__2927
213b8     04 2A 56 F2 | 	cmps	local07, #4 wc
213bc     CC 01 90 3D |  if_ae	jmp	#LR__2939
213c0     15 29 02 F6 | 	mov	local06, local07
213c4     02 28 66 F0 | 	shl	local06, #2
213c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
213cc     F3 28 02 F1 | 	add	local06, ptr___system__dat__
213d0     14 29 0A FB | 	rdlong	local06, local06 wz
213d4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
213d8     A8 01 90 AD |  if_e	jmp	#LR__2938
213dc     15 25 02 F6 | 	mov	local04, local07
213e0     02 24 66 F0 | 	shl	local04, #2
213e4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
213e8     F3 24 02 F1 | 	add	local04, ptr___system__dat__
213ec     12 13 02 FB | 	rdlong	arg01, local04
213f0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
213f4     09 2D 02 F6 | 	mov	local08, arg01
213f8     97 06 48 FB | 	callpa	#(@LR__2929-@LR__2928)>>2,fcache_load_ptr_
213fc                 | LR__2928
213fc     16 FB C9 FA | 	rdbyte	result1, local08 wz
21400     01 2C 06 51 |  if_ne	add	local08, #1
21404     F4 FF 9F 5D |  if_ne	jmp	#LR__2928
21408                 | LR__2929
21408     09 2D 82 F1 | 	sub	local08, arg01
2140c     16 2F 02 F6 | 	mov	local09, local08
21410     17 25 02 F6 | 	mov	local04, local09
21414     0F 25 02 F1 | 	add	local04, local01
21418     12 29 C2 FA | 	rdbyte	local06, local04
2141c     2F 28 0E F2 | 	cmp	local06, #47 wz
21420     17 31 02 56 |  if_ne	mov	local10, local09
21424     0F 31 02 51 |  if_ne	add	local10, local01
21428     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
2142c     54 01 90 5D |  if_ne	jmp	#LR__2937
21430     15 17 02 F6 | 	mov	arg03, local07
21434     02 16 66 F0 | 	shl	arg03, #2
21438     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2143c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21440     0B 15 02 FB | 	rdlong	arg02, arg03
21444     17 17 02 F6 | 	mov	arg03, local09
21448     0F 13 02 F6 | 	mov	arg01, local01
2144c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21450     0C 4A B0 FD | 	call	#__system__strncmp
21454     00 FA 4D F2 | 	cmps	result1, #0 wz
21458     28 01 90 5D |  if_ne	jmp	#LR__2937
2145c     15 33 02 F6 | 	mov	local11, local07
21460     02 32 66 F0 | 	shl	local11, #2
21464     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21468     F3 32 02 F1 | 	add	local11, ptr___system__dat__
2146c     19 35 02 FB | 	rdlong	local12, local11
21470     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21474     97 22 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
21478                 | LR__2930
21478     17 29 02 F6 | 	mov	local06, local09
2147c     01 28 06 F1 | 	add	local06, #1
21480     0F 29 02 F1 | 	add	local06, local01
21484     14 33 C2 FA | 	rdbyte	local11, local06
21488     2E 32 0E F2 | 	cmp	local11, #46 wz
2148c     2C 00 90 5D |  if_ne	jmp	#LR__2932
21490     17 33 02 F6 | 	mov	local11, local09
21494     02 32 06 F1 | 	add	local11, #2
21498     0F 33 02 F1 | 	add	local11, local01
2149c     19 31 C2 FA | 	rdbyte	local10, local11
214a0     2F 30 0E F2 | 	cmp	local10, #47 wz
214a4     17 37 02 56 |  if_ne	mov	local13, local09
214a8     02 36 06 51 |  if_ne	add	local13, #2
214ac     0F 37 02 51 |  if_ne	add	local13, local01
214b0     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
214b4     01 2E 06 A1 |  if_e	add	local09, #1
214b8     BC FF 9F AD |  if_e	jmp	#LR__2930
214bc                 | LR__2931
214bc                 | LR__2932
214bc     00 22 0E F2 | 	cmp	local03, #0 wz
214c0     11 13 02 56 |  if_ne	mov	arg01, local03
214c4     0F 15 02 56 |  if_ne	mov	arg02, local01
214c8     00 17 06 56 |  if_ne	mov	arg03, #256
214cc     E4 48 B0 5D |  if_ne	call	#__system__strncpy
214d0     0F 15 02 F6 | 	mov	arg02, local01
214d4     17 15 02 F1 | 	add	arg02, local09
214d8     01 14 06 F1 | 	add	arg02, #1
214dc     0F 13 02 F6 | 	mov	arg01, local01
214e0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
214e4     0F 13 02 F6 | 	mov	arg01, local01
214e8     09 2D 02 F6 | 	mov	local08, arg01
214ec     97 06 48 FB | 	callpa	#(@LR__2934-@LR__2933)>>2,fcache_load_ptr_
214f0                 | LR__2933
214f0     16 FB C9 FA | 	rdbyte	result1, local08 wz
214f4     01 2C 06 51 |  if_ne	add	local08, #1
214f8     F4 FF 9F 5D |  if_ne	jmp	#LR__2933
214fc                 | LR__2934
214fc     09 2D 82 F1 | 	sub	local08, arg01
21500     16 2F 02 F6 | 	mov	local09, local08
21504                 | LR__2935
21504     01 2E 56 F2 | 	cmps	local09, #1 wc
21508     70 00 90 CD |  if_b	jmp	#LR__2936
2150c     17 25 02 F6 | 	mov	local04, local09
21510     0F 25 02 F1 | 	add	local04, local01
21514     12 33 C2 FA | 	rdbyte	local11, local04
21518     2F 32 0E F2 | 	cmp	local11, #47 wz
2151c     17 33 02 A6 |  if_e	mov	local11, local09
21520     0F 33 02 A1 |  if_e	add	local11, local01
21524     19 01 48 AC |  if_e	wrbyte	#0, local11
21528     01 2E 86 A1 |  if_e	sub	local09, #1
2152c     D4 FF 9F AD |  if_e	jmp	#LR__2935
21530     17 25 02 F6 | 	mov	local04, local09
21534     0F 25 02 F1 | 	add	local04, local01
21538     12 33 C2 FA | 	rdbyte	local11, local04
2153c     2E 32 0E F2 | 	cmp	local11, #46 wz
21540     38 00 90 5D |  if_ne	jmp	#LR__2936
21544     02 2E 56 F2 | 	cmps	local09, #2 wc
21548     30 00 90 CD |  if_b	jmp	#LR__2936
2154c     17 39 02 F6 | 	mov	local14, local09
21550     01 38 86 F1 | 	sub	local14, #1
21554     0F 39 02 F1 | 	add	local14, local01
21558     1C 27 C2 FA | 	rdbyte	local05, local14
2155c     2F 26 0E F2 | 	cmp	local05, #47 wz
21560     18 00 90 5D |  if_ne	jmp	#LR__2936
21564     17 25 02 F6 | 	mov	local04, local09
21568     01 24 86 F1 | 	sub	local04, #1
2156c     0F 25 02 F1 | 	add	local04, local01
21570     12 01 48 FC | 	wrbyte	#0, local04
21574     02 2E 86 F1 | 	sub	local09, #2
21578     88 FF 9F FD | 	jmp	#LR__2935
2157c                 | LR__2936
2157c     1A FB 01 F6 | 	mov	result1, local12
21580     1C 00 90 FD | 	jmp	#LR__2940
21584                 | LR__2937
21584                 | LR__2938
21584     01 2A 06 F1 | 	add	local07, #1
21588     2C FE 9F FD | 	jmp	#LR__2927
2158c                 | LR__2939
2158c     03 00 00 FF 
21590     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
21594     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21598     03 00 00 FF 
2159c     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
215a0                 | LR__2940
215a0     A7 F0 03 F6 | 	mov	ptra, fp
215a4     B2 00 A0 FD | 	call	#popregs_
215a8                 | __system____getvfsforfile_ret
215a8     2D 00 64 FD | 	ret
215ac                 | 
215ac                 | __system___basic_open
215ac     05 4A 05 F6 | 	mov	COUNT_, #5
215b0     A8 00 A0 FD | 	call	#pushregs_
215b4     0A 1F 02 F6 | 	mov	local01, arg02
215b8     0B 21 02 F6 | 	mov	local02, arg03
215bc     0C 23 02 F6 | 	mov	local03, arg04
215c0     00 24 06 F6 | 	mov	local04, #0
215c4     C4 47 B0 FD | 	call	#__system____getftab
215c8     FD 26 0A F6 | 	mov	local05, result1 wz
215cc     18 00 90 5D |  if_ne	jmp	#LR__2950
215d0     EE 12 02 F6 | 	mov	arg01, abortchain
215d4     0C 14 06 F6 | 	mov	arg02, #12
215d8     01 16 06 F6 | 	mov	arg03, #1
215dc     DA 00 A0 FD | 	call	#__longjmp
215e0     01 FA 65 F6 | 	neg	result1, #1
215e4     14 01 90 FD | 	jmp	#LR__2959
215e8                 | LR__2950
215e8     08 26 06 F1 | 	add	local05, #8
215ec     13 FB 09 FB | 	rdlong	result1, local05 wz
215f0     08 26 86 F1 | 	sub	local05, #8
215f4     13 13 02 56 |  if_ne	mov	arg01, local05
215f8     E4 3E B0 5D |  if_ne	call	#__system___closeraw
215fc     00 1E 0E F2 | 	cmp	local01, #0 wz
21600     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21604     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21608     3C 00 90 AD |  if_e	jmp	#LR__2952
2160c     0C 12 06 F6 | 	mov	arg01, #12
21610     CC 33 B0 FD | 	call	#__system___gc_alloc_managed
21614     FD 24 0A F6 | 	mov	local04, result1 wz
21618     18 00 90 5D |  if_ne	jmp	#LR__2951
2161c     EE 12 02 F6 | 	mov	arg01, abortchain
21620     07 14 06 F6 | 	mov	arg02, #7
21624     01 16 06 F6 | 	mov	arg03, #1
21628     DA 00 A0 FD | 	call	#__longjmp
2162c     01 FA 65 F6 | 	neg	result1, #1
21630     C8 00 90 FD | 	jmp	#LR__2959
21634                 | LR__2951
21634     12 01 68 FC | 	wrlong	#0, local04
21638     04 24 06 F1 | 	add	local04, #4
2163c     12 01 68 FC | 	wrlong	#0, local04
21640     04 24 86 F1 | 	sub	local04, #4
21644     13 25 62 FC | 	wrlong	local04, local05
21648                 | LR__2952
21648     00 1E 0E F2 | 	cmp	local01, #0 wz
2164c     20 00 90 AD |  if_e	jmp	#LR__2953
21650     12 1F 62 FC | 	wrlong	local01, local04
21654     12 FB 01 F6 | 	mov	result1, local04
21658     00 80 04 FF 
2165c     00 FA 45 F5 | 	or	result1, ##150994944
21660     1C 26 06 F1 | 	add	local05, #28
21664     13 FB 61 FC | 	wrlong	result1, local05
21668     1C 26 86 F1 | 	sub	local05, #28
2166c     0C 00 90 FD | 	jmp	#LR__2954
21670                 | LR__2953
21670     1C 26 06 F1 | 	add	local05, #28
21674     13 01 68 FC | 	wrlong	#0, local05
21678     1C 26 86 F1 | 	sub	local05, #28
2167c                 | LR__2954
2167c     00 20 0E F2 | 	cmp	local02, #0 wz
21680     28 00 90 AD |  if_e	jmp	#LR__2955
21684     04 24 06 F1 | 	add	local04, #4
21688     12 21 62 FC | 	wrlong	local02, local04
2168c     04 24 86 F1 | 	sub	local04, #4
21690     12 FB 01 F6 | 	mov	result1, local04
21694     00 88 04 FF 
21698     00 FA 45 F5 | 	or	result1, ##152043520
2169c     20 26 06 F1 | 	add	local05, #32
216a0     13 FB 61 FC | 	wrlong	result1, local05
216a4     20 26 86 F1 | 	sub	local05, #32
216a8     0C 00 90 FD | 	jmp	#LR__2956
216ac                 | LR__2955
216ac     20 26 06 F1 | 	add	local05, #32
216b0     13 01 68 FC | 	wrlong	#0, local05
216b4     20 26 86 F1 | 	sub	local05, #32
216b8                 | LR__2956
216b8     00 22 0E F2 | 	cmp	local03, #0 wz
216bc     24 00 90 AD |  if_e	jmp	#LR__2957
216c0     08 24 06 F1 | 	add	local04, #8
216c4     12 23 62 FC | 	wrlong	local03, local04
216c8     08 24 86 F1 | 	sub	local04, #8
216cc     00 90 04 FF 
216d0     00 24 46 F5 | 	or	local04, ##153092096
216d4     24 26 06 F1 | 	add	local05, #36
216d8     13 25 62 FC | 	wrlong	local04, local05
216dc     24 26 86 F1 | 	sub	local05, #36
216e0     0C 00 90 FD | 	jmp	#LR__2958
216e4                 | LR__2957
216e4     24 26 06 F1 | 	add	local05, #36
216e8     13 01 68 FC | 	wrlong	#0, local05
216ec     24 26 86 F1 | 	sub	local05, #36
216f0                 | LR__2958
216f0     08 26 06 F1 | 	add	local05, #8
216f4     13 0F 68 FC | 	wrlong	#7, local05
216f8     00 FA 05 F6 | 	mov	result1, #0
216fc                 | LR__2959
216fc     A7 F0 03 F6 | 	mov	ptra, fp
21700     B2 00 A0 FD | 	call	#popregs_
21704                 | __system___basic_open_ret
21704     2D 00 64 FD | 	ret
21708                 | 
21708                 | __system___basic_open_string
21708     04 4A 05 F6 | 	mov	COUNT_, #4
2170c     A8 00 A0 FD | 	call	#pushregs_
21710     0A 1F 02 F6 | 	mov	local01, arg02
21714     0B 21 02 F6 | 	mov	local02, arg03
21718     70 46 B0 FD | 	call	#__system____getftab
2171c     FD 22 0A F6 | 	mov	local03, result1 wz
21720     18 00 90 5D |  if_ne	jmp	#LR__2960
21724     EE 12 02 F6 | 	mov	arg01, abortchain
21728     0C 14 06 F6 | 	mov	arg02, #12
2172c     01 16 06 F6 | 	mov	arg03, #1
21730     DA 00 A0 FD | 	call	#__longjmp
21734     01 FA 65 F6 | 	neg	result1, #1
21738     58 00 90 FD | 	jmp	#LR__2962
2173c                 | LR__2960
2173c     08 22 06 F1 | 	add	local03, #8
21740     11 19 0A FB | 	rdlong	arg04, local03 wz
21744     08 22 86 F1 | 	sub	local03, #8
21748     11 13 02 56 |  if_ne	mov	arg01, local03
2174c     90 3D B0 5D |  if_ne	call	#__system___closeraw
21750     0F 15 02 F6 | 	mov	arg02, local01
21754     10 17 02 F6 | 	mov	arg03, local02
21758     11 13 02 F6 | 	mov	arg01, local03
2175c     B6 19 06 F6 | 	mov	arg04, #438
21760     78 3A B0 FD | 	call	#__system___openraw
21764     FD 24 02 F6 | 	mov	local04, result1
21768     00 24 56 F2 | 	cmps	local04, #0 wc
2176c     20 00 90 3D |  if_ae	jmp	#LR__2961
21770     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21774     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21778     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2177c     EE 12 02 F6 | 	mov	arg01, abortchain
21780     01 16 06 F6 | 	mov	arg03, #1
21784     DA 00 A0 FD | 	call	#__longjmp
21788     01 FA 65 F6 | 	neg	result1, #1
2178c     04 00 90 FD | 	jmp	#LR__2962
21790                 | LR__2961
21790     12 FB 01 F6 | 	mov	result1, local04
21794                 | LR__2962
21794     A7 F0 03 F6 | 	mov	ptra, fp
21798     B2 00 A0 FD | 	call	#popregs_
2179c                 | __system___basic_open_string_ret
2179c     2D 00 64 FD | 	ret
217a0                 | 
217a0                 | __system___basic_print_char
217a0     03 4A 05 F6 | 	mov	COUNT_, #3
217a4     A8 00 A0 FD | 	call	#pushregs_
217a8     0A 1F 02 F6 | 	mov	local01, arg02
217ac     30 4D B0 FD | 	call	#__system___gettxfunc
217b0     FD 20 0A F6 | 	mov	local02, result1 wz
217b4     00 FA 05 A6 |  if_e	mov	result1, #0
217b8     30 00 90 AD |  if_e	jmp	#LR__2970
217bc     10 23 02 F6 | 	mov	local03, local02
217c0     13 20 46 F7 | 	zerox	local02, #19
217c4     14 22 46 F0 | 	shr	local03, #20
217c8     02 22 66 F0 | 	shl	local03, #2
217cc     ED 22 02 F1 | 	add	local03, __methods__
217d0     11 23 02 FB | 	rdlong	local03, local03
217d4     0F 13 02 F6 | 	mov	arg01, local01
217d8     F2 1E 02 F6 | 	mov	local01, objptr
217dc     10 E5 01 F6 | 	mov	objptr, local02
217e0     2D 22 62 FD | 	call	local03
217e4     0F E5 01 F6 | 	mov	objptr, local01
217e8     01 FA 05 F6 | 	mov	result1, #1
217ec                 | LR__2970
217ec     A7 F0 03 F6 | 	mov	ptra, fp
217f0     B2 00 A0 FD | 	call	#popregs_
217f4                 | __system___basic_print_char_ret
217f4     2D 00 64 FD | 	ret
217f8                 | 
217f8                 | __system___basic_print_string
217f8     03 4A 05 F6 | 	mov	COUNT_, #3
217fc     A8 00 A0 FD | 	call	#pushregs_
21800     0A 1F 02 F6 | 	mov	local01, arg02
21804     0B 21 02 F6 | 	mov	local02, arg03
21808     D4 4C B0 FD | 	call	#__system___gettxfunc
2180c     FD 22 0A F6 | 	mov	local03, result1 wz
21810     00 FA 05 A6 |  if_e	mov	result1, #0
21814     18 00 90 AD |  if_e	jmp	#LR__2980
21818     00 1E 0E F2 | 	cmp	local01, #0 wz
2181c     00 FA 05 A6 |  if_e	mov	result1, #0
21820     11 13 02 56 |  if_ne	mov	arg01, local03
21824     10 15 02 56 |  if_ne	mov	arg02, local02
21828     0F 17 02 56 |  if_ne	mov	arg03, local01
2182c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21830                 | LR__2980
21830     A7 F0 03 F6 | 	mov	ptra, fp
21834     B2 00 A0 FD | 	call	#popregs_
21838                 | __system___basic_print_string_ret
21838     2D 00 64 FD | 	ret
2183c                 | 
2183c                 | __system___basic_print_integer
2183c     04 4A 05 F6 | 	mov	COUNT_, #4
21840     A8 00 A0 FD | 	call	#pushregs_
21844     0A 1F 02 F6 | 	mov	local01, arg02
21848     0B 21 02 F6 | 	mov	local02, arg03
2184c     0C 23 02 F6 | 	mov	local03, arg04
21850     8C 4C B0 FD | 	call	#__system___gettxfunc
21854     FD 24 0A F6 | 	mov	local04, result1 wz
21858     00 FA 05 A6 |  if_e	mov	result1, #0
2185c     12 13 02 56 |  if_ne	mov	arg01, local04
21860     10 15 02 56 |  if_ne	mov	arg02, local02
21864     0F 17 02 56 |  if_ne	mov	arg03, local01
21868     11 19 02 56 |  if_ne	mov	arg04, local03
2186c     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21870     A7 F0 03 F6 | 	mov	ptra, fp
21874     B2 00 A0 FD | 	call	#popregs_
21878                 | __system___basic_print_integer_ret
21878     2D 00 64 FD | 	ret
2187c                 | 
2187c                 | __system___basic_print_unsigned
2187c     03 4A 05 F6 | 	mov	COUNT_, #3
21880     A8 00 A0 FD | 	call	#pushregs_
21884     0A 1F 02 F6 | 	mov	local01, arg02
21888     0B 21 02 F6 | 	mov	local02, arg03
2188c     0C 23 02 F6 | 	mov	local03, arg04
21890     4C 4C B0 FD | 	call	#__system___gettxfunc
21894     FD 12 0A F6 | 	mov	arg01, result1 wz
21898     00 FA 05 A6 |  if_e	mov	result1, #0
2189c     3A 20 26 54 |  if_ne	bith	local02, #58
218a0     10 15 02 56 |  if_ne	mov	arg02, local02
218a4     0F 17 02 56 |  if_ne	mov	arg03, local01
218a8     11 19 02 56 |  if_ne	mov	arg04, local03
218ac     74 02 B0 5D |  if_ne	call	#__system___fmtnum
218b0     A7 F0 03 F6 | 	mov	ptra, fp
218b4     B2 00 A0 FD | 	call	#popregs_
218b8                 | __system___basic_print_unsigned_ret
218b8     2D 00 64 FD | 	ret
218bc                 | 
218bc                 | __system___basic_get_char
218bc     03 4A 05 F6 | 	mov	COUNT_, #3
218c0     A8 00 A0 FD | 	call	#pushregs_
218c4     5C 4C B0 FD | 	call	#__system___getrxfunc
218c8     FD 1E 0A F6 | 	mov	local01, result1 wz
218cc     01 FA 65 A6 |  if_e	neg	result1, #1
218d0     28 00 90 AD |  if_e	jmp	#LR__2990
218d4     0F 21 02 F6 | 	mov	local02, local01
218d8     13 1E 46 F7 | 	zerox	local01, #19
218dc     14 20 46 F0 | 	shr	local02, #20
218e0     02 20 66 F0 | 	shl	local02, #2
218e4     ED 20 02 F1 | 	add	local02, __methods__
218e8     10 21 02 FB | 	rdlong	local02, local02
218ec     F2 22 02 F6 | 	mov	local03, objptr
218f0     0F E5 01 F6 | 	mov	objptr, local01
218f4     2D 20 62 FD | 	call	local02
218f8     11 E5 01 F6 | 	mov	objptr, local03
218fc                 | LR__2990
218fc     A7 F0 03 F6 | 	mov	ptra, fp
21900     B2 00 A0 FD | 	call	#popregs_
21904                 | __system___basic_get_char_ret
21904     2D 00 64 FD | 	ret
21908                 | 
21908                 | __system___basic_put
21908     04 4A 05 F6 | 	mov	COUNT_, #4
2190c     A8 00 A0 FD | 	call	#pushregs_
21910     0D 1F 02 F6 | 	mov	local01, arg05
21914     0F 19 02 FD | 	qmul	arg04, local01
21918     09 21 02 F6 | 	mov	local02, arg01
2191c     0B 23 02 F6 | 	mov	local03, arg03
21920     00 14 0E F2 | 	cmp	arg02, #0 wz
21924     01 14 86 51 |  if_ne	sub	arg02, #1
21928     10 13 02 56 |  if_ne	mov	arg01, local02
2192c     00 16 06 56 |  if_ne	mov	arg03, #0
21930     18 24 62 FD | 	getqx	local04
21934     9C 42 B0 5D |  if_ne	call	#__system__lseek
21938     11 15 02 F6 | 	mov	arg02, local03
2193c     12 17 02 F6 | 	mov	arg03, local04
21940     10 13 02 F6 | 	mov	arg01, local02
21944     D8 41 B0 FD | 	call	#__system__write
21948     FD 24 02 F6 | 	mov	local04, result1
2194c     01 24 56 F2 | 	cmps	local04, #1 wc
21950     10 00 90 CD |  if_b	jmp	#LR__3000
21954     12 7D 02 F6 | 	mov	muldiva_, local04
21958     0F 7F 02 F6 | 	mov	muldivb_, local01
2195c     BA 00 A0 FD | 	call	#divide_
21960     3F 25 02 F6 | 	mov	local04, muldivb_
21964                 | LR__3000
21964     12 FB 01 F6 | 	mov	result1, local04
21968     A7 F0 03 F6 | 	mov	ptra, fp
2196c     B2 00 A0 FD | 	call	#popregs_
21970                 | __system___basic_put_ret
21970     2D 00 64 FD | 	ret
21974                 | 
21974                 | __system___basic_get
21974     04 4A 05 F6 | 	mov	COUNT_, #4
21978     A8 00 A0 FD | 	call	#pushregs_
2197c     0D 1F 02 F6 | 	mov	local01, arg05
21980     0F 19 02 FD | 	qmul	arg04, local01
21984     09 21 02 F6 | 	mov	local02, arg01
21988     0B 23 02 F6 | 	mov	local03, arg03
2198c     00 14 0E F2 | 	cmp	arg02, #0 wz
21990     01 14 86 51 |  if_ne	sub	arg02, #1
21994     10 13 02 56 |  if_ne	mov	arg01, local02
21998     00 16 06 56 |  if_ne	mov	arg03, #0
2199c     18 24 62 FD | 	getqx	local04
219a0     30 42 B0 5D |  if_ne	call	#__system__lseek
219a4     11 15 02 F6 | 	mov	arg02, local03
219a8     12 17 02 F6 | 	mov	arg03, local04
219ac     10 13 02 F6 | 	mov	arg01, local02
219b0     A8 41 B0 FD | 	call	#__system__read
219b4     FD 24 02 F6 | 	mov	local04, result1
219b8     01 24 56 F2 | 	cmps	local04, #1 wc
219bc     10 00 90 CD |  if_b	jmp	#LR__3010
219c0     12 7D 02 F6 | 	mov	muldiva_, local04
219c4     0F 7F 02 F6 | 	mov	muldivb_, local01
219c8     BA 00 A0 FD | 	call	#divide_
219cc     3F 25 02 F6 | 	mov	local04, muldivb_
219d0                 | LR__3010
219d0     12 FB 01 F6 | 	mov	result1, local04
219d4     A7 F0 03 F6 | 	mov	ptra, fp
219d8     B2 00 A0 FD | 	call	#popregs_
219dc                 | __system___basic_get_ret
219dc     2D 00 64 FD | 	ret
219e0                 | 
219e0                 | __system___fmtchar
219e0     00 4A 05 F6 | 	mov	COUNT_, #0
219e4     A8 00 A0 FD | 	call	#pushregs_
219e8     10 F0 07 F1 | 	add	ptra, #16
219ec     04 4E 05 F1 | 	add	fp, #4
219f0     A7 12 62 FC | 	wrlong	arg01, fp
219f4     04 4E 05 F1 | 	add	fp, #4
219f8     A7 14 62 FC | 	wrlong	arg02, fp
219fc     04 4E 05 F1 | 	add	fp, #4
21a00     A7 16 62 FC | 	wrlong	arg03, fp
21a04     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21a08     A7 16 62 FC | 	wrlong	arg03, fp
21a0c     08 4E 85 F1 | 	sub	fp, #8
21a10     A7 12 02 FB | 	rdlong	arg01, fp
21a14     04 4E 05 F1 | 	add	fp, #4
21a18     A7 14 02 FB | 	rdlong	arg02, fp
21a1c     04 4E 05 F1 | 	add	fp, #4
21a20     A7 16 02 F6 | 	mov	arg03, fp
21a24     0C 4E 85 F1 | 	sub	fp, #12
21a28     0C 00 B0 FD | 	call	#__system___fmtstr
21a2c     A7 F0 03 F6 | 	mov	ptra, fp
21a30     B2 00 A0 FD | 	call	#popregs_
21a34                 | __system___fmtchar_ret
21a34     2D 00 64 FD | 	ret
21a38                 | 
21a38                 | __system___fmtstr
21a38     09 4A 05 F6 | 	mov	COUNT_, #9
21a3c     A8 00 A0 FD | 	call	#pushregs_
21a40     09 1F 02 F6 | 	mov	local01, arg01
21a44     0A 21 02 F6 | 	mov	local02, arg02
21a48     0B 23 02 F6 | 	mov	local03, arg03
21a4c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21a50     11 13 02 F6 | 	mov	arg01, local03
21a54     09 25 02 F6 | 	mov	local04, arg01
21a58     97 06 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
21a5c                 | LR__3020
21a5c     12 FB C9 FA | 	rdbyte	result1, local04 wz
21a60     01 24 06 51 |  if_ne	add	local04, #1
21a64     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
21a68                 | LR__3021
21a68     09 25 82 F1 | 	sub	local04, arg01
21a6c     00 18 0E F2 | 	cmp	arg04, #0 wz
21a70     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
21a74     10 15 02 F6 | 	mov	arg02, local02
21a78     12 17 02 F6 | 	mov	arg03, local04
21a7c     0F 13 02 F6 | 	mov	arg01, local01
21a80     02 18 06 F6 | 	mov	arg04, #2
21a84     F8 46 B0 FD | 	call	#__system___fmtpad
21a88     FD 26 02 F6 | 	mov	local05, result1
21a8c     00 26 56 F2 | 	cmps	local05, #0 wc
21a90     13 FB 01 C6 |  if_b	mov	result1, local05
21a94     80 00 90 CD |  if_b	jmp	#LR__3024
21a98     01 24 56 F2 | 	cmps	local04, #1 wc
21a9c     50 00 90 CD |  if_b	jmp	#LR__3023
21aa0     12 29 02 F6 | 	mov	local06, local04
21aa4                 | LR__3022
21aa4     0F 2B 02 F6 | 	mov	local07, local01
21aa8     0F 2D 02 F6 | 	mov	local08, local01
21aac     13 2A 46 F7 | 	zerox	local07, #19
21ab0     14 2C 46 F0 | 	shr	local08, #20
21ab4     02 2C 66 F0 | 	shl	local08, #2
21ab8     ED 2C 02 F1 | 	add	local08, __methods__
21abc     16 2D 02 FB | 	rdlong	local08, local08
21ac0     11 13 C2 FA | 	rdbyte	arg01, local03
21ac4     F2 2E 02 F6 | 	mov	local09, objptr
21ac8     15 E5 01 F6 | 	mov	objptr, local07
21acc     01 22 06 F1 | 	add	local03, #1
21ad0     2D 2C 62 FD | 	call	local08
21ad4     17 E5 01 F6 | 	mov	objptr, local09
21ad8     FD 2E 02 F6 | 	mov	local09, result1
21adc     00 2E 56 F2 | 	cmps	local09, #0 wc
21ae0     17 FB 01 C6 |  if_b	mov	result1, local09
21ae4     30 00 90 CD |  if_b	jmp	#LR__3024
21ae8     17 27 02 F1 | 	add	local05, local09
21aec     ED 29 6E FB | 	djnz	local06, #LR__3022
21af0                 | LR__3023
21af0     10 15 02 F6 | 	mov	arg02, local02
21af4     12 17 02 F6 | 	mov	arg03, local04
21af8     0F 13 02 F6 | 	mov	arg01, local01
21afc     01 18 06 F6 | 	mov	arg04, #1
21b00     7C 46 B0 FD | 	call	#__system___fmtpad
21b04     FD 2E 02 F6 | 	mov	local09, result1
21b08     00 2E 56 F2 | 	cmps	local09, #0 wc
21b0c     17 FB 01 C6 |  if_b	mov	result1, local09
21b10     17 27 02 31 |  if_ae	add	local05, local09
21b14     13 FB 01 36 |  if_ae	mov	result1, local05
21b18                 | LR__3024
21b18     A7 F0 03 F6 | 	mov	ptra, fp
21b1c     B2 00 A0 FD | 	call	#popregs_
21b20                 | __system___fmtstr_ret
21b20     2D 00 64 FD | 	ret
21b24                 | 
21b24                 | __system___fmtnum
21b24     0B 4A 05 F6 | 	mov	COUNT_, #11
21b28     A8 00 A0 FD | 	call	#pushregs_
21b2c     09 1F 02 F6 | 	mov	local01, arg01
21b30     0A 21 02 F6 | 	mov	local02, arg02
21b34     0B 23 02 F6 | 	mov	local03, arg03
21b38     0C 25 02 F6 | 	mov	local04, arg04
21b3c     F8 27 02 F6 | 	mov	local05, ptra
21b40     13 29 02 F6 | 	mov	local06, local05
21b44     00 2A 06 F6 | 	mov	local07, #0
21b48     10 2D 02 F6 | 	mov	local08, local02
21b4c     10 2C 46 F0 | 	shr	local08, #16
21b50     3F 2C 06 F5 | 	and	local08, #63
21b54     10 2F E2 F8 | 	getbyte	local09, local02, #0
21b58     10 31 02 F6 | 	mov	local10, local02
21b5c     1A 30 46 F0 | 	shr	local10, #26
21b60     03 30 06 F5 | 	and	local10, #3
21b64     18 33 02 F6 | 	mov	local11, local10
21b68     01 2C 56 F2 | 	cmps	local08, #1 wc
21b6c     44 F0 07 F1 | 	add	ptra, #68
21b70     01 2C 86 31 |  if_ae	sub	local08, #1
21b74     41 2E 56 F2 | 	cmps	local09, #65 wc
21b78     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
21b7c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
21b80     03 32 0E F2 | 	cmp	local11, #3 wz
21b84     00 32 06 A6 |  if_e	mov	local11, #0
21b88     00 22 56 52 |  if_ne	cmps	local03, #0 wc
21b8c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
21b90     11 23 62 46 |  if_c_and_nz	neg	local03, local03
21b94     00 32 0E F2 | 	cmp	local11, #0 wz
21b98     4C 00 90 AD |  if_e	jmp	#LR__3033
21b9c     01 2A 06 F6 | 	mov	local07, #1
21ba0     17 2D 0A F2 | 	cmp	local08, local09 wz
21ba4     18 00 90 5D |  if_ne	jmp	#LR__3031
21ba8     05 2C 6E FB | 	djnz	local08, #LR__3030
21bac     0F 13 02 F6 | 	mov	arg01, local01
21bb0     10 15 02 F6 | 	mov	arg02, local02
21bb4     23 16 06 F6 | 	mov	arg03, #35
21bb8     24 FE BF FD | 	call	#__system___fmtchar
21bbc     88 00 90 FD | 	jmp	#LR__3037
21bc0                 | LR__3030
21bc0                 | LR__3031
21bc0     02 32 0E F2 | 	cmp	local11, #2 wz
21bc4     14 31 02 A6 |  if_e	mov	local10, local06
21bc8     01 28 06 A1 |  if_e	add	local06, #1
21bcc     18 41 48 AC |  if_e	wrbyte	#32, local10
21bd0     14 00 90 AD |  if_e	jmp	#LR__3032
21bd4     04 32 0E F2 | 	cmp	local11, #4 wz
21bd8     14 5B 48 AC |  if_e	wrbyte	#45, local06
21bdc     01 28 06 A1 |  if_e	add	local06, #1
21be0     14 57 48 5C |  if_ne	wrbyte	#43, local06
21be4     01 28 06 51 |  if_ne	add	local06, #1
21be8                 | LR__3032
21be8                 | LR__3033
21be8     14 13 02 F6 | 	mov	arg01, local06
21bec     11 15 02 F6 | 	mov	arg02, local03
21bf0     12 17 02 F6 | 	mov	arg03, local04
21bf4     16 19 02 F6 | 	mov	arg04, local08
21bf8     00 1A 06 F6 | 	mov	arg05, #0
21bfc     1D 20 2E F4 | 	testbn	local02, #29 wz
21c00     01 1A 06 56 |  if_ne	mov	arg05, #1
21c04     40 46 B0 FD | 	call	#__system___uitoa
21c08     FD 2A 02 F1 | 	add	local07, result1
21c0c     17 2B 5A F2 | 	cmps	local07, local09 wcz
21c10     24 00 90 ED |  if_be	jmp	#LR__3036
21c14     97 0E 48 FB | 	callpa	#(@LR__3035-@LR__3034)>>2,fcache_load_ptr_
21c18                 | LR__3034
21c18     17 31 02 F6 | 	mov	local10, local09
21c1c     01 30 56 F2 | 	cmps	local10, #1 wc
21c20     01 2E 86 F1 | 	sub	local09, #1
21c24     14 31 02 36 |  if_ae	mov	local10, local06
21c28     01 28 06 31 |  if_ae	add	local06, #1
21c2c     18 47 48 3C |  if_ae	wrbyte	#35, local10
21c30     E4 FF 9F 3D |  if_ae	jmp	#LR__3034
21c34                 | LR__3035
21c34     14 01 48 FC | 	wrbyte	#0, local06
21c38                 | LR__3036
21c38     0F 13 02 F6 | 	mov	arg01, local01
21c3c     10 15 02 F6 | 	mov	arg02, local02
21c40     13 17 02 F6 | 	mov	arg03, local05
21c44     F0 FD BF FD | 	call	#__system___fmtstr
21c48                 | LR__3037
21c48     A7 F0 03 F6 | 	mov	ptra, fp
21c4c     B2 00 A0 FD | 	call	#popregs_
21c50                 | __system___fmtnum_ret
21c50     2D 00 64 FD | 	ret
21c54                 | 
21c54                 | __system___fmtfloat
21c54     10 4A 05 F6 | 	mov	COUNT_, #16
21c58     A8 00 A0 FD | 	call	#pushregs_
21c5c     24 F1 07 F1 | 	add	ptra, #292
21c60     04 4E 05 F1 | 	add	fp, #4
21c64     A7 12 62 FC | 	wrlong	arg01, fp
21c68     04 4E 05 F1 | 	add	fp, #4
21c6c     A7 14 62 FC | 	wrlong	arg02, fp
21c70     04 4E 05 F1 | 	add	fp, #4
21c74     A7 16 62 FC | 	wrlong	arg03, fp
21c78     04 4E 05 F1 | 	add	fp, #4
21c7c     A7 18 62 FC | 	wrlong	arg04, fp
21c80     0C 4E 05 F1 | 	add	fp, #12
21c84     A7 14 68 FC | 	wrlong	#10, fp
21c88     08 4E 05 F1 | 	add	fp, #8
21c8c     A7 00 68 FC | 	wrlong	#0, fp
21c90     08 4E 05 F1 | 	add	fp, #8
21c94     A7 00 68 FC | 	wrlong	#0, fp
21c98     08 4E 05 F1 | 	add	fp, #8
21c9c     A7 00 68 FC | 	wrlong	#0, fp
21ca0     04 4E 05 F1 | 	add	fp, #4
21ca4     A7 04 68 FC | 	wrlong	#2, fp
21ca8     04 4E 05 F1 | 	add	fp, #4
21cac     A7 00 68 FC | 	wrlong	#0, fp
21cb0     04 4E 05 F1 | 	add	fp, #4
21cb4     A7 00 68 FC | 	wrlong	#0, fp
21cb8     04 4E 05 F1 | 	add	fp, #4
21cbc     A7 00 68 FC | 	wrlong	#0, fp
21cc0     04 4E 05 F1 | 	add	fp, #4
21cc4     A7 00 68 FC | 	wrlong	#0, fp
21cc8     18 4E 05 F1 | 	add	fp, #24
21ccc     A7 00 68 FC | 	wrlong	#0, fp
21cd0     68 4E 05 F1 | 	add	fp, #104
21cd4     A7 1E 02 F6 | 	mov	local01, fp
21cd8     08 4E 85 F1 | 	sub	fp, #8
21cdc     A7 1E 62 FC | 	wrlong	local01, fp
21ce0     04 4E 05 F1 | 	add	fp, #4
21ce4     A7 1E 62 FC | 	wrlong	local01, fp
21ce8     BC 4E 85 F1 | 	sub	fp, #188
21cec     A7 1E 02 FB | 	rdlong	local01, fp
21cf0     10 1E 46 F0 | 	shr	local01, #16
21cf4     3F 1E 06 F5 | 	and	local01, #63
21cf8     B0 4E 05 F1 | 	add	fp, #176
21cfc     A7 1E 62 FC | 	wrlong	local01, fp
21d00     B0 4E 85 F1 | 	sub	fp, #176
21d04     A7 1E 02 FB | 	rdlong	local01, fp
21d08     1C 1E 46 F0 | 	shr	local01, #28
21d0c     01 1E 06 F5 | 	and	local01, #1
21d10     08 4F 05 F1 | 	add	fp, #264
21d14     A7 1E 62 FC | 	wrlong	local01, fp
21d18     58 4E 85 F1 | 	sub	fp, #88
21d1c     A7 1E 0A FB | 	rdlong	local01, fp wz
21d20     B8 4E 85 F1 | 	sub	fp, #184
21d24     3C 00 90 5D |  if_ne	jmp	#LR__3041
21d28     10 4E 05 F1 | 	add	fp, #16
21d2c     A7 1E 02 FB | 	rdlong	local01, fp
21d30     10 4E 85 F1 | 	sub	fp, #16
21d34     61 1E 0E F2 | 	cmp	local01, #97 wz
21d38     18 00 90 5D |  if_ne	jmp	#LR__3040
21d3c     B8 4E 05 F1 | 	add	fp, #184
21d40     A7 1A 68 FC | 	wrlong	#13, fp
21d44     84 4E 85 F1 | 	sub	fp, #132
21d48     A7 02 68 FC | 	wrlong	#1, fp
21d4c     34 4E 85 F1 | 	sub	fp, #52
21d50     24 00 90 FD | 	jmp	#LR__3042
21d54                 | LR__3040
21d54     B8 4E 05 F1 | 	add	fp, #184
21d58     A7 0C 68 FC | 	wrlong	#6, fp
21d5c     B8 4E 85 F1 | 	sub	fp, #184
21d60     14 00 90 FD | 	jmp	#LR__3042
21d64                 | LR__3041
21d64     B8 4E 05 F1 | 	add	fp, #184
21d68     A7 1E 02 FB | 	rdlong	local01, fp
21d6c     01 1E 86 F1 | 	sub	local01, #1
21d70     A7 1E 62 FC | 	wrlong	local01, fp
21d74     B8 4E 85 F1 | 	sub	fp, #184
21d78                 | LR__3042
21d78     08 4E 05 F1 | 	add	fp, #8
21d7c     A7 1E 02 FB | 	rdlong	local01, fp
21d80     16 1E 46 F0 | 	shr	local01, #22
21d84     03 1E 06 F5 | 	and	local01, #3
21d88     04 4F 05 F1 | 	add	fp, #260
21d8c     A7 1E 62 FC | 	wrlong	local01, fp
21d90     04 4F 85 F1 | 	sub	fp, #260
21d94     A7 1E 02 FB | 	rdlong	local01, fp
21d98     1D 1E 46 F0 | 	shr	local01, #29
21d9c     01 1E 06 F5 | 	and	local01, #1
21da0     B4 4E 05 F1 | 	add	fp, #180
21da4     A7 1E 62 FC | 	wrlong	local01, fp
21da8     B4 4E 85 F1 | 	sub	fp, #180
21dac     A7 1E 02 FB | 	rdlong	local01, fp
21db0     0F 1F EA F8 | 	getbyte	local01, local01, #1
21db4     60 4E 05 F1 | 	add	fp, #96
21db8     A7 1E 62 FC | 	wrlong	local01, fp
21dbc     60 4E 85 F1 | 	sub	fp, #96
21dc0     A7 1E 02 FB | 	rdlong	local01, fp
21dc4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21dc8     64 4E 05 F1 | 	add	fp, #100
21dcc     A7 1E 62 FC | 	wrlong	local01, fp
21dd0     00 1E 06 F6 | 	mov	local01, #0
21dd4     5C 4E 85 F1 | 	sub	fp, #92
21dd8     A7 1A 02 FB | 	rdlong	arg05, fp
21ddc     65 1A 0E F2 | 	cmp	arg05, #101 wz
21de0     01 1E 06 A6 |  if_e	mov	local01, #1
21de4     14 4E 05 F1 | 	add	fp, #20
21de8     A7 1E 62 FC | 	wrlong	local01, fp
21dec     98 4E 05 F1 | 	add	fp, #152
21df0     A7 20 0A FB | 	rdlong	local02, fp wz
21df4     45 1E 06 56 |  if_ne	mov	local01, #69
21df8     65 1E 06 A6 |  if_e	mov	local01, #101
21dfc     8C 4E 85 F1 | 	sub	fp, #140
21e00     A7 1E 62 FC | 	wrlong	local01, fp
21e04     20 4E 85 F1 | 	sub	fp, #32
21e08     A7 1E 02 FB | 	rdlong	local01, fp
21e0c     10 4E 85 F1 | 	sub	fp, #16
21e10     61 1E 0E F2 | 	cmp	local01, #97 wz
21e14     4C 00 90 5D |  if_ne	jmp	#LR__3043
21e18     24 4E 05 F1 | 	add	fp, #36
21e1c     A7 02 68 FC | 	wrlong	#1, fp
21e20     98 4E 05 F1 | 	add	fp, #152
21e24     A7 20 0A FB | 	rdlong	local02, fp wz
21e28     50 1E 06 56 |  if_ne	mov	local01, #80
21e2c     70 1E 06 A6 |  if_e	mov	local01, #112
21e30     8C 4E 85 F1 | 	sub	fp, #140
21e34     A7 1E 62 FC | 	wrlong	local01, fp
21e38     14 4E 85 F1 | 	sub	fp, #20
21e3c     A7 04 68 FC | 	wrlong	#2, fp
21e40     1C 4E 05 F1 | 	add	fp, #28
21e44     A7 02 68 FC | 	wrlong	#1, fp
21e48     84 4E 05 F1 | 	add	fp, #132
21e4c     A7 20 0A FB | 	rdlong	local02, fp wz
21e50     58 1E 06 56 |  if_ne	mov	local01, #88
21e54     78 1E 06 A6 |  if_e	mov	local01, #120
21e58     7C 4E 85 F1 | 	sub	fp, #124
21e5c     A7 1E 62 FC | 	wrlong	local01, fp
21e60     40 4E 85 F1 | 	sub	fp, #64
21e64                 | LR__3043
21e64     10 4E 05 F1 | 	add	fp, #16
21e68     A7 1E 02 FB | 	rdlong	local01, fp
21e6c     10 4E 85 F1 | 	sub	fp, #16
21e70     23 1E 0E F2 | 	cmp	local01, #35 wz
21e74     3C 00 90 5D |  if_ne	jmp	#LR__3046
21e78     48 4E 05 F1 | 	add	fp, #72
21e7c     A7 02 68 FC | 	wrlong	#1, fp
21e80     C8 4E 05 F1 | 	add	fp, #200
21e84     A7 1E 0A FB | 	rdlong	local01, fp wz
21e88     10 4F 85 F1 | 	sub	fp, #272
21e8c     18 00 90 AD |  if_e	jmp	#LR__3044
21e90     10 4E 05 F1 | 	add	fp, #16
21e94     A7 CC 68 FC | 	wrlong	#102, fp
21e98     00 4F 05 F1 | 	add	fp, #256
21e9c     A7 00 68 FC | 	wrlong	#0, fp
21ea0     10 4F 85 F1 | 	sub	fp, #272
21ea4     0C 00 90 FD | 	jmp	#LR__3045
21ea8                 | LR__3044
21ea8     10 4F 05 F1 | 	add	fp, #272
21eac     A7 02 68 FC | 	wrlong	#1, fp
21eb0     10 4F 85 F1 | 	sub	fp, #272
21eb4                 | LR__3045
21eb4                 | LR__3046
21eb4     08 4E 05 F1 | 	add	fp, #8
21eb8     A7 1E 02 FB | 	rdlong	local01, fp
21ebc     1A 1E 46 F0 | 	shr	local01, #26
21ec0     03 1E 06 F5 | 	and	local01, #3
21ec4     5C 4E 05 F1 | 	add	fp, #92
21ec8     A7 1E 62 FC | 	wrlong	local01, fp
21ecc     58 4E 85 F1 | 	sub	fp, #88
21ed0     A7 FA 01 FB | 	rdlong	result1, fp
21ed4     0C 4E 85 F1 | 	sub	fp, #12
21ed8     1F FA 4D F0 | 	shr	result1, #31 wz
21edc     20 00 90 AD |  if_e	jmp	#LR__3047
21ee0     2C 4E 05 F1 | 	add	fp, #44
21ee4     A7 5A 68 FC | 	wrlong	#45, fp
21ee8     20 4E 85 F1 | 	sub	fp, #32
21eec     A7 FA 01 FB | 	rdlong	result1, fp
21ef0     1F FA E5 F4 | 	bitnot	result1, #31
21ef4     A7 FA 61 FC | 	wrlong	result1, fp
21ef8     0C 4E 85 F1 | 	sub	fp, #12
21efc     3C 00 90 FD | 	jmp	#LR__3049
21f00                 | LR__3047
21f00     64 4E 05 F1 | 	add	fp, #100
21f04     A7 1E 02 FB | 	rdlong	local01, fp
21f08     64 4E 85 F1 | 	sub	fp, #100
21f0c     01 1E 0E F2 | 	cmp	local01, #1 wz
21f10     2C 4E 05 A1 |  if_e	add	fp, #44
21f14     A7 56 68 AC |  if_e	wrlong	#43, fp
21f18     2C 4E 85 A1 |  if_e	sub	fp, #44
21f1c     1C 00 90 AD |  if_e	jmp	#LR__3048
21f20     64 4E 05 F1 | 	add	fp, #100
21f24     A7 1E 02 FB | 	rdlong	local01, fp
21f28     64 4E 85 F1 | 	sub	fp, #100
21f2c     02 1E 0E F2 | 	cmp	local01, #2 wz
21f30     2C 4E 05 A1 |  if_e	add	fp, #44
21f34     A7 40 68 AC |  if_e	wrlong	#32, fp
21f38     2C 4E 85 A1 |  if_e	sub	fp, #44
21f3c                 | LR__3048
21f3c                 | LR__3049
21f3c     08 4E 05 F1 | 	add	fp, #8
21f40     A7 1E 02 FB | 	rdlong	local01, fp
21f44     18 1E 46 F0 | 	shr	local01, #24
21f48     03 1E 06 F5 | 	and	local01, #3
21f4c     3C 4E 05 F1 | 	add	fp, #60
21f50     A7 1E 62 FC | 	wrlong	local01, fp
21f54     00 1E 06 F6 | 	mov	local01, #0
21f58     18 4E 85 F1 | 	sub	fp, #24
21f5c     A7 22 0A FB | 	rdlong	local03, fp wz
21f60     2C 4E 85 F1 | 	sub	fp, #44
21f64     18 00 90 5D |  if_ne	jmp	#LR__3050
21f68     1C 4E 05 F1 | 	add	fp, #28
21f6c     A7 24 02 FB | 	rdlong	local04, fp
21f70     1C 4E 85 F1 | 	sub	fp, #28
21f74     12 27 02 F6 | 	mov	local05, local04
21f78     0A 26 0E F2 | 	cmp	local05, #10 wz
21f7c     04 00 90 AD |  if_e	jmp	#LR__3051
21f80                 | LR__3050
21f80     01 1E 66 F5 | 	xor	local01, #1
21f84                 | LR__3051
21f84     3C 4E 05 F1 | 	add	fp, #60
21f88     A7 1E 62 FC | 	wrlong	local01, fp
21f8c     3C 4E 85 F1 | 	sub	fp, #60
21f90     00 1E 0E F2 | 	cmp	local01, #0 wz
21f94     0C 01 90 AD |  if_e	jmp	#LR__3053
21f98     44 4E 05 F1 | 	add	fp, #68
21f9c     A7 26 02 FB | 	rdlong	local05, fp
21fa0     44 4E 85 F1 | 	sub	fp, #68
21fa4     13 23 02 F6 | 	mov	local03, local05
21fa8     02 22 0E F2 | 	cmp	local03, #2 wz
21fac     F4 00 90 5D |  if_ne	jmp	#LR__3053
21fb0     0C 4F 05 F1 | 	add	fp, #268
21fb4     A7 28 02 FB | 	rdlong	local06, fp
21fb8     0C 4F 85 F1 | 	sub	fp, #268
21fbc     14 25 02 F6 | 	mov	local04, local06
21fc0     02 24 0E F2 | 	cmp	local04, #2 wz
21fc4     DC 00 90 AD |  if_e	jmp	#LR__3053
21fc8     C0 4E 05 F1 | 	add	fp, #192
21fcc     A7 12 02 FB | 	rdlong	arg01, fp
21fd0     94 4E 85 F1 | 	sub	fp, #148
21fd4     A7 14 02 FB | 	rdlong	arg02, fp
21fd8     14 4E 05 F1 | 	add	fp, #20
21fdc     A7 16 02 FB | 	rdlong	arg03, fp
21fe0     40 4E 85 F1 | 	sub	fp, #64
21fe4     C8 44 B0 FD | 	call	#__system__emitsign_0500
21fe8     14 4F 05 F1 | 	add	fp, #276
21fec     A7 FA 61 FC | 	wrlong	result1, fp
21ff0     14 4F 85 F1 | 	sub	fp, #276
21ff4     00 FA 55 F2 | 	cmps	result1, #0 wc
21ff8     14 4F 05 C1 |  if_b	add	fp, #276
21ffc     A7 FA 01 CB |  if_b	rdlong	result1, fp
22000     14 4F 85 C1 |  if_b	sub	fp, #276
22004     6C 0B 90 CD |  if_b	jmp	#LR__3103
22008     C0 4E 05 F1 | 	add	fp, #192
2200c     A7 1E 02 FB | 	rdlong	local01, fp
22010     54 4E 05 F1 | 	add	fp, #84
22014     A7 26 02 FB | 	rdlong	local05, fp
22018     13 23 02 F6 | 	mov	local03, local05
2201c     13 1F 02 F1 | 	add	local01, local05
22020     54 4E 85 F1 | 	sub	fp, #84
22024     A7 1E 62 FC | 	wrlong	local01, fp
22028     58 4E 85 F1 | 	sub	fp, #88
2202c     A7 1E 0A FB | 	rdlong	local01, fp wz
22030     68 4E 85 F1 | 	sub	fp, #104
22034     60 00 90 AD |  if_e	jmp	#LR__3052
22038     68 4E 05 F1 | 	add	fp, #104
2203c     A7 1E 02 FB | 	rdlong	local01, fp
22040     AC 4E 05 F1 | 	add	fp, #172
22044     A7 22 02 FB | 	rdlong	local03, fp
22048     11 1F 82 F1 | 	sub	local01, local03
2204c     AC 4E 85 F1 | 	sub	fp, #172
22050     A7 1E 62 FC | 	wrlong	local01, fp
22054     68 4E 85 F1 | 	sub	fp, #104
22058     00 1E 56 F2 | 	cmps	local01, #0 wc
2205c     68 4E 05 C1 |  if_b	add	fp, #104
22060     A7 00 68 CC |  if_b	wrlong	#0, fp
22064     68 4E 85 C1 |  if_b	sub	fp, #104
22068     08 4E 05 F1 | 	add	fp, #8
2206c     A7 1E 02 FB | 	rdlong	local01, fp
22070     E8 1E 06 F4 | 	bitl	local01, #232
22074     A7 1E 62 FC | 	wrlong	local01, fp
22078     60 4E 05 F1 | 	add	fp, #96
2207c     A7 26 02 FB | 	rdlong	local05, fp
22080     13 23 02 F6 | 	mov	local03, local05
22084     08 22 66 F0 | 	shl	local03, #8
22088     11 1F 42 F5 | 	or	local01, local03
2208c     60 4E 85 F1 | 	sub	fp, #96
22090     A7 1E 62 FC | 	wrlong	local01, fp
22094     08 4E 85 F1 | 	sub	fp, #8
22098                 | LR__3052
22098     3C 4E 05 F1 | 	add	fp, #60
2209c     A7 00 68 FC | 	wrlong	#0, fp
220a0     3C 4E 85 F1 | 	sub	fp, #60
220a4                 | LR__3053
220a4     0C 4E 05 F1 | 	add	fp, #12
220a8     A7 12 02 FB | 	rdlong	arg01, fp
220ac     0C 4E 85 F1 | 	sub	fp, #12
220b0     28 1F B0 FD | 	call	#__system____builtin_ilogb
220b4     FF FF 3F FF 
220b8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
220bc     50 00 90 5D |  if_ne	jmp	#LR__3055
220c0     2C 4E 05 F1 | 	add	fp, #44
220c4     A7 1E 0A FB | 	rdlong	local01, fp wz
220c8     2C 4E 85 F1 | 	sub	fp, #44
220cc     24 00 90 AD |  if_e	jmp	#LR__3054
220d0     C0 4E 05 F1 | 	add	fp, #192
220d4     A7 20 02 FB | 	rdlong	local02, fp
220d8     10 23 02 F6 | 	mov	local03, local02
220dc     01 22 06 F1 | 	add	local03, #1
220e0     A7 22 62 FC | 	wrlong	local03, fp
220e4     94 4E 85 F1 | 	sub	fp, #148
220e8     A7 24 02 FB | 	rdlong	local04, fp
220ec     2C 4E 85 F1 | 	sub	fp, #44
220f0     10 25 42 FC | 	wrbyte	local04, local02
220f4                 | LR__3054
220f4     C0 4E 05 F1 | 	add	fp, #192
220f8     A7 12 02 FB | 	rdlong	arg01, fp
220fc     C0 4E 85 F1 | 	sub	fp, #192
22100     81 01 00 FF 
22104     4E 15 06 F6 | 	mov	arg02, ##@LR__5021
22108     AC E9 BF FD | 	call	#__system____builtin_strcpy
2210c     A4 08 90 FD | 	jmp	#LR__3091
22110                 | LR__3055
22110     0C 4E 05 F1 | 	add	fp, #12
22114     A7 20 02 FB | 	rdlong	local02, fp
22118     0C 4E 85 F1 | 	sub	fp, #12
2211c     10 13 02 F6 | 	mov	arg01, local02
22120     B8 1E B0 FD | 	call	#__system____builtin_ilogb
22124     00 00 40 FF 
22128     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2212c     50 00 90 5D |  if_ne	jmp	#LR__3057
22130     2C 4E 05 F1 | 	add	fp, #44
22134     A7 1E 0A FB | 	rdlong	local01, fp wz
22138     2C 4E 85 F1 | 	sub	fp, #44
2213c     24 00 90 AD |  if_e	jmp	#LR__3056
22140     C0 4E 05 F1 | 	add	fp, #192
22144     A7 20 02 FB | 	rdlong	local02, fp
22148     10 23 02 F6 | 	mov	local03, local02
2214c     01 22 06 F1 | 	add	local03, #1
22150     A7 22 62 FC | 	wrlong	local03, fp
22154     94 4E 85 F1 | 	sub	fp, #148
22158     A7 24 02 FB | 	rdlong	local04, fp
2215c     2C 4E 85 F1 | 	sub	fp, #44
22160     10 25 42 FC | 	wrbyte	local04, local02
22164                 | LR__3056
22164     C0 4E 05 F1 | 	add	fp, #192
22168     A7 12 02 FB | 	rdlong	arg01, fp
2216c     C0 4E 85 F1 | 	sub	fp, #192
22170     81 01 00 FF 
22174     52 15 06 F6 | 	mov	arg02, ##@LR__5022
22178     3C E9 BF FD | 	call	#__system____builtin_strcpy
2217c     34 08 90 FD | 	jmp	#LR__3091
22180                 | LR__3057
22180     10 4E 05 F1 | 	add	fp, #16
22184     A7 1E 02 FB | 	rdlong	local01, fp
22188     10 4E 85 F1 | 	sub	fp, #16
2218c     67 1E 0E F2 | 	cmp	local01, #103 wz
22190     10 4E 05 51 |  if_ne	add	fp, #16
22194     A7 22 02 5B |  if_ne	rdlong	local03, fp
22198     10 4E 85 51 |  if_ne	sub	fp, #16
2219c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
221a0     94 01 90 5D |  if_ne	jmp	#LR__3062
221a4     0C 4E 05 F1 | 	add	fp, #12
221a8     A7 12 02 FB | 	rdlong	arg01, fp
221ac     08 4E 05 F1 | 	add	fp, #8
221b0     A7 14 02 F6 | 	mov	arg02, fp
221b4     0C 4E 05 F1 | 	add	fp, #12
221b8     A7 16 02 F6 | 	mov	arg03, fp
221bc     98 4E 05 F1 | 	add	fp, #152
221c0     A7 18 02 FB | 	rdlong	arg04, fp
221c4     9C 4E 85 F1 | 	sub	fp, #156
221c8     A7 1A 02 FB | 	rdlong	arg05, fp
221cc     1C 4E 85 F1 | 	sub	fp, #28
221d0     E8 40 B0 FD | 	call	#__system__disassemble_0498
221d4     10 4E 05 F1 | 	add	fp, #16
221d8     A7 1E 02 FB | 	rdlong	local01, fp
221dc     10 4E 85 F1 | 	sub	fp, #16
221e0     23 1E 0E F2 | 	cmp	local01, #35 wz
221e4     A0 00 90 5D |  if_ne	jmp	#LR__3059
221e8     20 4E 05 F1 | 	add	fp, #32
221ec     A7 1E 02 FB | 	rdlong	local01, fp
221f0     98 4E 05 F1 | 	add	fp, #152
221f4     A7 22 02 FB | 	rdlong	local03, fp
221f8     B8 4E 85 F1 | 	sub	fp, #184
221fc     11 1F 5A F2 | 	cmps	local01, local03 wcz
22200     24 4E 05 11 |  if_a	add	fp, #36
22204     A7 02 68 1C |  if_a	wrlong	#1, fp
22208     24 4E 85 11 |  if_a	sub	fp, #36
2220c     A4 01 90 1D |  if_a	jmp	#LR__3065
22210     20 4E 05 F1 | 	add	fp, #32
22214     A7 1E 02 FB | 	rdlong	local01, fp
22218     20 4E 85 F1 | 	sub	fp, #32
2221c     00 1E 56 F2 | 	cmps	local01, #0 wc
22220     2C 00 90 3D |  if_ae	jmp	#LR__3058
22224     B8 4E 05 F1 | 	add	fp, #184
22228     A7 1E 02 FB | 	rdlong	local01, fp
2222c     0F 1F 62 F6 | 	neg	local01, local01
22230     98 4E 85 F1 | 	sub	fp, #152
22234     A7 22 02 FB | 	rdlong	local03, fp
22238     20 4E 85 F1 | 	sub	fp, #32
2223c     0F 23 5A F2 | 	cmps	local03, local01 wcz
22240     24 4E 05 E1 |  if_be	add	fp, #36
22244     A7 02 68 EC |  if_be	wrlong	#1, fp
22248     24 4E 85 E1 |  if_be	sub	fp, #36
2224c     64 01 90 FD | 	jmp	#LR__3065
22250                 | LR__3058
22250     20 4E 05 F1 | 	add	fp, #32
22254     A7 1E 02 FB | 	rdlong	local01, fp
22258     20 4E 85 F1 | 	sub	fp, #32
2225c     01 1E 56 F2 | 	cmps	local01, #1 wc
22260     50 01 90 CD |  if_b	jmp	#LR__3065
22264     B8 4E 05 F1 | 	add	fp, #184
22268     A7 1E 02 FB | 	rdlong	local01, fp
2226c     98 4E 85 F1 | 	sub	fp, #152
22270     A7 22 02 FB | 	rdlong	local03, fp
22274     11 1F 82 F1 | 	sub	local01, local03
22278     98 4E 05 F1 | 	add	fp, #152
2227c     A7 1E 62 FC | 	wrlong	local01, fp
22280     B8 4E 85 F1 | 	sub	fp, #184
22284     2C 01 90 FD | 	jmp	#LR__3065
22288                 | LR__3059
22288     00 1E 06 F6 | 	mov	local01, #0
2228c     08 4E 05 F1 | 	add	fp, #8
22290     A7 20 02 FB | 	rdlong	local02, fp
22294     1C 20 46 F0 | 	shr	local02, #28
22298     01 20 0E F5 | 	and	local02, #1 wz
2229c     01 1E 06 A6 |  if_e	mov	local01, #1
222a0     2C 4E 05 F1 | 	add	fp, #44
222a4     A7 1E 62 FC | 	wrlong	local01, fp
222a8     14 4E 85 F1 | 	sub	fp, #20
222ac     A7 1E 02 FB | 	rdlong	local01, fp
222b0     98 4E 05 F1 | 	add	fp, #152
222b4     A7 22 02 FB | 	rdlong	local03, fp
222b8     B8 4E 85 F1 | 	sub	fp, #184
222bc     11 1F 52 F2 | 	cmps	local01, local03 wc
222c0     18 00 90 3D |  if_ae	jmp	#LR__3060
222c4     20 4E 05 F1 | 	add	fp, #32
222c8     A7 24 02 FB | 	rdlong	local04, fp
222cc     20 4E 85 F1 | 	sub	fp, #32
222d0     FF FF 7F FF 
222d4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
222d8     10 00 90 3D |  if_ae	jmp	#LR__3061
222dc                 | LR__3060
222dc     24 4E 05 F1 | 	add	fp, #36
222e0     A7 02 68 FC | 	wrlong	#1, fp
222e4     24 4E 85 F1 | 	sub	fp, #36
222e8     C8 00 90 FD | 	jmp	#LR__3065
222ec                 | LR__3061
222ec     B8 4E 05 F1 | 	add	fp, #184
222f0     A7 24 02 FB | 	rdlong	local04, fp
222f4     98 4E 85 F1 | 	sub	fp, #152
222f8     A7 22 02 FB | 	rdlong	local03, fp
222fc     11 25 82 F1 | 	sub	local04, local03
22300     98 4E 05 F1 | 	add	fp, #152
22304     A7 24 62 FC | 	wrlong	local04, fp
22308     AC 4E 85 F1 | 	sub	fp, #172
2230c     A7 12 02 FB | 	rdlong	arg01, fp
22310     08 4E 05 F1 | 	add	fp, #8
22314     A7 14 02 F6 | 	mov	arg02, fp
22318     0C 4E 05 F1 | 	add	fp, #12
2231c     A7 16 02 F6 | 	mov	arg03, fp
22320     12 19 62 F6 | 	neg	arg04, local04
22324     04 4E 85 F1 | 	sub	fp, #4
22328     A7 1A 02 FB | 	rdlong	arg05, fp
2232c     1C 4E 85 F1 | 	sub	fp, #28
22330     88 3F B0 FD | 	call	#__system__disassemble_0498
22334     7C 00 90 FD | 	jmp	#LR__3065
22338                 | LR__3062
22338     24 4E 05 F1 | 	add	fp, #36
2233c     A7 1E 0A FB | 	rdlong	local01, fp wz
22340     24 4E 85 F1 | 	sub	fp, #36
22344     34 00 90 AD |  if_e	jmp	#LR__3063
22348     0C 4E 05 F1 | 	add	fp, #12
2234c     A7 12 02 FB | 	rdlong	arg01, fp
22350     08 4E 05 F1 | 	add	fp, #8
22354     A7 14 02 F6 | 	mov	arg02, fp
22358     0C 4E 05 F1 | 	add	fp, #12
2235c     A7 16 02 F6 | 	mov	arg03, fp
22360     98 4E 05 F1 | 	add	fp, #152
22364     A7 18 02 FB | 	rdlong	arg04, fp
22368     9C 4E 85 F1 | 	sub	fp, #156
2236c     A7 1A 02 FB | 	rdlong	arg05, fp
22370     1C 4E 85 F1 | 	sub	fp, #28
22374     44 3F B0 FD | 	call	#__system__disassemble_0498
22378     38 00 90 FD | 	jmp	#LR__3064
2237c                 | LR__3063
2237c     0C 4E 05 F1 | 	add	fp, #12
22380     A7 12 02 FB | 	rdlong	arg01, fp
22384     08 4E 05 F1 | 	add	fp, #8
22388     A7 14 02 F6 | 	mov	arg02, fp
2238c     0C 4E 05 F1 | 	add	fp, #12
22390     A7 16 02 F6 | 	mov	arg03, fp
22394     98 4E 05 F1 | 	add	fp, #152
22398     A7 24 02 FB | 	rdlong	local04, fp
2239c     01 24 06 F1 | 	add	local04, #1
223a0     12 19 62 F6 | 	neg	arg04, local04
223a4     9C 4E 85 F1 | 	sub	fp, #156
223a8     A7 1A 02 FB | 	rdlong	arg05, fp
223ac     1C 4E 85 F1 | 	sub	fp, #28
223b0     08 3F B0 FD | 	call	#__system__disassemble_0498
223b4                 | LR__3064
223b4                 | LR__3065
223b4     1C 4E 05 F1 | 	add	fp, #28
223b8     A7 1E 02 FB | 	rdlong	local01, fp
223bc     1C 4E 85 F1 | 	sub	fp, #28
223c0     02 1E 0E F2 | 	cmp	local01, #2 wz
223c4     4C 00 90 5D |  if_ne	jmp	#LR__3068
223c8     1C 4E 05 F1 | 	add	fp, #28
223cc     A7 20 68 FC | 	wrlong	#16, fp
223d0     1C 4E 85 F1 | 	sub	fp, #28
223d4                 | LR__3066
223d4     14 4E 05 F1 | 	add	fp, #20
223d8     A7 1E 0A FB | 	rdlong	local01, fp wz
223dc     14 4E 85 F1 | 	sub	fp, #20
223e0     30 00 90 AD |  if_e	jmp	#LR__3067
223e4     14 4E 05 F1 | 	add	fp, #20
223e8     A7 22 02 FB | 	rdlong	local03, fp
223ec     14 4E 85 F1 | 	sub	fp, #20
223f0     00 80 00 FF 
223f4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
223f8     18 00 90 3D |  if_ae	jmp	#LR__3067
223fc     14 4E 05 F1 | 	add	fp, #20
22400     A7 1E 02 FB | 	rdlong	local01, fp
22404     01 1E 66 F0 | 	shl	local01, #1
22408     A7 1E 62 FC | 	wrlong	local01, fp
2240c     14 4E 85 F1 | 	sub	fp, #20
22410     C0 FF 9F FD | 	jmp	#LR__3066
22414                 | LR__3067
22414                 | LR__3068
22414     70 4E 05 F1 | 	add	fp, #112
22418     A7 12 02 F6 | 	mov	arg01, fp
2241c     5C 4E 85 F1 | 	sub	fp, #92
22420     A7 14 02 FB | 	rdlong	arg02, fp
22424     08 4E 05 F1 | 	add	fp, #8
22428     A7 16 02 FB | 	rdlong	arg03, fp
2242c     A0 4E 05 F1 | 	add	fp, #160
22430     A7 1A 02 FB | 	rdlong	arg05, fp
22434     BC 4E 85 F1 | 	sub	fp, #188
22438     01 18 06 F6 | 	mov	arg04, #1
2243c     08 3E B0 FD | 	call	#__system___uitoa
22440     58 4E 05 F1 | 	add	fp, #88
22444     A7 FA 61 FC | 	wrlong	result1, fp
22448     38 4E 85 F1 | 	sub	fp, #56
2244c     A7 1E 02 FB | 	rdlong	local01, fp
22450     20 4E 85 F1 | 	sub	fp, #32
22454     00 1E 56 F2 | 	cmps	local01, #0 wc
22458     50 00 90 3D |  if_ae	jmp	#LR__3069
2245c     60 4E 05 F1 | 	add	fp, #96
22460     A7 5A 68 FC | 	wrlong	#45, fp
22464     50 4E 05 F1 | 	add	fp, #80
22468     A7 12 02 F6 | 	mov	arg01, fp
2246c     90 4E 85 F1 | 	sub	fp, #144
22470     A7 22 02 FB | 	rdlong	local03, fp
22474     11 15 62 F6 | 	neg	arg02, local03
22478     18 4E 05 F1 | 	add	fp, #24
2247c     A7 18 02 FB | 	rdlong	arg04, fp
22480     84 4E 05 F1 | 	add	fp, #132
22484     A7 28 02 FB | 	rdlong	local06, fp
22488     BC 4E 85 F1 | 	sub	fp, #188
2248c     14 25 02 F6 | 	mov	local04, local06
22490     0A 16 06 F6 | 	mov	arg03, #10
22494     12 1B 02 F6 | 	mov	arg05, local04
22498     AC 3D B0 FD | 	call	#__system___uitoa
2249c     5C 4E 05 F1 | 	add	fp, #92
224a0     A7 FA 61 FC | 	wrlong	result1, fp
224a4     5C 4E 85 F1 | 	sub	fp, #92
224a8     48 00 90 FD | 	jmp	#LR__3070
224ac                 | LR__3069
224ac     60 4E 05 F1 | 	add	fp, #96
224b0     A7 56 68 FC | 	wrlong	#43, fp
224b4     50 4E 05 F1 | 	add	fp, #80
224b8     A7 12 02 F6 | 	mov	arg01, fp
224bc     90 4E 85 F1 | 	sub	fp, #144
224c0     A7 14 02 FB | 	rdlong	arg02, fp
224c4     18 4E 05 F1 | 	add	fp, #24
224c8     A7 18 02 FB | 	rdlong	arg04, fp
224cc     84 4E 05 F1 | 	add	fp, #132
224d0     A7 28 02 FB | 	rdlong	local06, fp
224d4     BC 4E 85 F1 | 	sub	fp, #188
224d8     14 25 02 F6 | 	mov	local04, local06
224dc     0A 16 06 F6 | 	mov	arg03, #10
224e0     12 1B 02 F6 | 	mov	arg05, local04
224e4     60 3D B0 FD | 	call	#__system___uitoa
224e8     5C 4E 05 F1 | 	add	fp, #92
224ec     A7 FA 61 FC | 	wrlong	result1, fp
224f0     5C 4E 85 F1 | 	sub	fp, #92
224f4                 | LR__3070
224f4     24 4E 05 F1 | 	add	fp, #36
224f8     A7 1E 0A FB | 	rdlong	local01, fp wz
224fc     24 4E 85 F1 | 	sub	fp, #36
22500     2C 00 90 AD |  if_e	jmp	#LR__3071
22504     50 4E 05 F1 | 	add	fp, #80
22508     A7 00 68 FC | 	wrlong	#0, fp
2250c     04 4E 85 F1 | 	sub	fp, #4
22510     A7 00 68 FC | 	wrlong	#0, fp
22514     6C 4E 05 F1 | 	add	fp, #108
22518     A7 1E 02 FB | 	rdlong	local01, fp
2251c     01 1E 06 F1 | 	add	local01, #1
22520     64 4E 85 F1 | 	sub	fp, #100
22524     A7 1E 62 FC | 	wrlong	local01, fp
22528     54 4E 85 F1 | 	sub	fp, #84
2252c     88 00 90 FD | 	jmp	#LR__3074
22530                 | LR__3071
22530     20 4E 05 F1 | 	add	fp, #32
22534     A7 1E 02 FB | 	rdlong	local01, fp
22538     20 4E 85 F1 | 	sub	fp, #32
2253c     00 1E 56 F2 | 	cmps	local01, #0 wc
22540     40 00 90 3D |  if_ae	jmp	#LR__3072
22544     20 4E 05 F1 | 	add	fp, #32
22548     A7 20 02 FB | 	rdlong	local02, fp
2254c     30 4E 05 F1 | 	add	fp, #48
22550     A7 20 62 FC | 	wrlong	local02, fp
22554     04 4E 85 F1 | 	sub	fp, #4
22558     A7 20 62 FC | 	wrlong	local02, fp
2255c     2C 4E 85 F1 | 	sub	fp, #44
22560     A7 1E 02 FB | 	rdlong	local01, fp
22564     98 4E 05 F1 | 	add	fp, #152
22568     A7 22 02 FB | 	rdlong	local03, fp
2256c     11 1F 02 F1 | 	add	local01, local03
22570     01 1E 06 F1 | 	add	local01, #1
22574     64 4E 85 F1 | 	sub	fp, #100
22578     A7 1E 62 FC | 	wrlong	local01, fp
2257c     54 4E 85 F1 | 	sub	fp, #84
22580     34 00 90 FD | 	jmp	#LR__3073
22584                 | LR__3072
22584     4C 4E 05 F1 | 	add	fp, #76
22588     A7 00 68 FC | 	wrlong	#0, fp
2258c     2C 4E 85 F1 | 	sub	fp, #44
22590     A7 1E 02 FB | 	rdlong	local01, fp
22594     30 4E 05 F1 | 	add	fp, #48
22598     A7 1E 62 FC | 	wrlong	local01, fp
2259c     68 4E 05 F1 | 	add	fp, #104
225a0     A7 22 02 FB | 	rdlong	local03, fp
225a4     11 1F 02 F1 | 	add	local01, local03
225a8     01 1E 06 F1 | 	add	local01, #1
225ac     64 4E 85 F1 | 	sub	fp, #100
225b0     A7 1E 62 FC | 	wrlong	local01, fp
225b4     54 4E 85 F1 | 	sub	fp, #84
225b8                 | LR__3073
225b8                 | LR__3074
225b8     54 4E 05 F1 | 	add	fp, #84
225bc     A7 1E 02 FB | 	rdlong	local01, fp
225c0     08 4E 85 F1 | 	sub	fp, #8
225c4     A7 22 02 FB | 	rdlong	local03, fp
225c8     11 1F 82 F1 | 	sub	local01, local03
225cc     01 1E 06 F1 | 	add	local01, #1
225d0     24 4E 85 F1 | 	sub	fp, #36
225d4     A7 1E 62 FC | 	wrlong	local01, fp
225d8     04 4E 05 F1 | 	add	fp, #4
225dc     A7 1E 0A FB | 	rdlong	local01, fp wz
225e0     2C 4E 85 F1 | 	sub	fp, #44
225e4     28 4E 05 51 |  if_ne	add	fp, #40
225e8     A7 22 02 5B |  if_ne	rdlong	local03, fp
225ec     01 22 06 51 |  if_ne	add	local03, #1
225f0     A7 22 62 5C |  if_ne	wrlong	local03, fp
225f4     28 4E 85 51 |  if_ne	sub	fp, #40
225f8     1C 4E 05 F1 | 	add	fp, #28
225fc     A7 1E 02 FB | 	rdlong	local01, fp
22600     1C 4E 85 F1 | 	sub	fp, #28
22604     10 1E 0E F2 | 	cmp	local01, #16 wz
22608     28 4E 05 A1 |  if_e	add	fp, #40
2260c     A7 1E 02 AB |  if_e	rdlong	local01, fp
22610     02 1E 06 A1 |  if_e	add	local01, #2
22614     A7 1E 62 AC |  if_e	wrlong	local01, fp
22618     28 4E 85 A1 |  if_e	sub	fp, #40
2261c     24 4E 05 F1 | 	add	fp, #36
22620     A7 1E 0A FB | 	rdlong	local01, fp wz
22624     24 4E 85 F1 | 	sub	fp, #36
22628     28 00 90 AD |  if_e	jmp	#LR__3075
2262c     28 4E 05 F1 | 	add	fp, #40
22630     A7 1E 02 FB | 	rdlong	local01, fp
22634     02 22 06 F6 | 	mov	local03, #2
22638     34 4E 05 F1 | 	add	fp, #52
2263c     A7 26 02 FB | 	rdlong	local05, fp
22640     13 23 02 F1 | 	add	local03, local05
22644     11 1F 02 F1 | 	add	local01, local03
22648     34 4E 85 F1 | 	sub	fp, #52
2264c     A7 1E 62 FC | 	wrlong	local01, fp
22650     28 4E 85 F1 | 	sub	fp, #40
22654                 | LR__3075
22654     28 4E 05 F1 | 	add	fp, #40
22658     A7 1E 02 FB | 	rdlong	local01, fp
2265c     28 4E 85 F1 | 	sub	fp, #40
22660     41 1E 56 F2 | 	cmps	local01, #65 wc
22664     01 FA 65 36 |  if_ae	neg	result1, #1
22668     08 05 90 3D |  if_ae	jmp	#LR__3103
2266c     3C 4E 05 F1 | 	add	fp, #60
22670     A7 1E 0A FB | 	rdlong	local01, fp wz
22674     3C 4E 85 F1 | 	sub	fp, #60
22678     60 00 90 AD |  if_e	jmp	#LR__3076
2267c     C0 4E 05 F1 | 	add	fp, #192
22680     A7 12 02 FB | 	rdlong	arg01, fp
22684     94 4E 85 F1 | 	sub	fp, #148
22688     A7 14 02 FB | 	rdlong	arg02, fp
2268c     14 4E 05 F1 | 	add	fp, #20
22690     A7 16 02 FB | 	rdlong	arg03, fp
22694     40 4E 85 F1 | 	sub	fp, #64
22698     14 3E B0 FD | 	call	#__system__emitsign_0500
2269c     18 4F 05 F1 | 	add	fp, #280
226a0     A7 FA 61 FC | 	wrlong	result1, fp
226a4     18 4F 85 F1 | 	sub	fp, #280
226a8     00 FA 55 F2 | 	cmps	result1, #0 wc
226ac     18 4F 05 C1 |  if_b	add	fp, #280
226b0     A7 FA 01 CB |  if_b	rdlong	result1, fp
226b4     18 4F 85 C1 |  if_b	sub	fp, #280
226b8     B8 04 90 CD |  if_b	jmp	#LR__3103
226bc     C0 4E 05 F1 | 	add	fp, #192
226c0     A7 1E 02 FB | 	rdlong	local01, fp
226c4     58 4E 05 F1 | 	add	fp, #88
226c8     A7 22 02 FB | 	rdlong	local03, fp
226cc     11 1F 02 F1 | 	add	local01, local03
226d0     58 4E 85 F1 | 	sub	fp, #88
226d4     A7 1E 62 FC | 	wrlong	local01, fp
226d8     C0 4E 85 F1 | 	sub	fp, #192
226dc                 | LR__3076
226dc     4C 4E 05 F1 | 	add	fp, #76
226e0     A7 1E 02 FB | 	rdlong	local01, fp
226e4     34 4E 85 F1 | 	sub	fp, #52
226e8     A7 1E 62 FC | 	wrlong	local01, fp
226ec     18 4E 85 F1 | 	sub	fp, #24
226f0     97 9E 48 FB | 	callpa	#(@LR__3082-@LR__3077)>>2,fcache_load_ptr_
226f4                 | LR__3077
226f4     18 4E 05 F1 | 	add	fp, #24
226f8     A7 20 02 FB | 	rdlong	local02, fp
226fc     3C 4E 05 F1 | 	add	fp, #60
22700     A7 26 02 FB | 	rdlong	local05, fp
22704     54 4E 85 F1 | 	sub	fp, #84
22708     13 21 52 F2 | 	cmps	local02, local05 wc
2270c     20 01 90 3D |  if_ae	jmp	#LR__3083
22710     18 4E 05 F1 | 	add	fp, #24
22714     A7 28 02 FB | 	rdlong	local06, fp
22718     18 4E 85 F1 | 	sub	fp, #24
2271c     00 28 56 F2 | 	cmps	local06, #0 wc
22720     58 00 90 CD |  if_b	jmp	#LR__3078
22724     18 4E 05 F1 | 	add	fp, #24
22728     A7 28 02 FB | 	rdlong	local06, fp
2272c     40 4E 05 F1 | 	add	fp, #64
22730     A7 2A 02 FB | 	rdlong	local07, fp
22734     58 4E 85 F1 | 	sub	fp, #88
22738     15 29 52 F2 | 	cmps	local06, local07 wc
2273c     3C 00 90 3D |  if_ae	jmp	#LR__3078
22740     C0 4E 05 F1 | 	add	fp, #192
22744     A7 2C 02 FB | 	rdlong	local08, fp
22748     16 2B 02 F6 | 	mov	local07, local08
2274c     01 2A 06 F1 | 	add	local07, #1
22750     A7 2A 62 FC | 	wrlong	local07, fp
22754     A8 4E 85 F1 | 	sub	fp, #168
22758     A7 2A 02 FB | 	rdlong	local07, fp
2275c     15 2F 02 F6 | 	mov	local09, local07
22760     58 4E 05 F1 | 	add	fp, #88
22764     A7 30 02 F6 | 	mov	local10, fp
22768     A7 2E 02 F1 | 	add	local09, fp
2276c     17 33 C2 FA | 	rdbyte	local11, local09
22770     16 33 42 FC | 	wrbyte	local11, local08
22774     70 4E 85 F1 | 	sub	fp, #112
22778     20 00 90 FD | 	jmp	#LR__3079
2277c                 | LR__3078
2277c     C0 4E 05 F1 | 	add	fp, #192
22780     A7 2C 02 FB | 	rdlong	local08, fp
22784     16 2F 02 F6 | 	mov	local09, local08
22788     01 2E 06 F1 | 	add	local09, #1
2278c     A7 2E 62 FC | 	wrlong	local09, fp
22790     C0 4E 85 F1 | 	sub	fp, #192
22794     30 2E 06 F6 | 	mov	local09, #48
22798     16 61 48 FC | 	wrbyte	#48, local08
2279c                 | LR__3079
2279c     18 4E 05 F1 | 	add	fp, #24
227a0     A7 28 02 FB | 	rdlong	local06, fp
227a4     38 4E 05 F1 | 	add	fp, #56
227a8     A7 34 02 FB | 	rdlong	local12, fp
227ac     50 4E 85 F1 | 	sub	fp, #80
227b0     1A 29 0A F2 | 	cmp	local06, local12 wz
227b4     5C 00 90 5D |  if_ne	jmp	#LR__3081
227b8     10 4F 05 F1 | 	add	fp, #272
227bc     A7 2A 02 FB | 	rdlong	local07, fp
227c0     10 4F 85 F1 | 	sub	fp, #272
227c4     15 2F 0A F6 | 	mov	local09, local07 wz
227c8     28 00 90 5D |  if_ne	jmp	#LR__3080
227cc     54 4E 05 F1 | 	add	fp, #84
227d0     A7 32 02 FB | 	rdlong	local11, fp
227d4     19 31 02 F6 | 	mov	local10, local11
227d8     01 30 86 F1 | 	sub	local10, #1
227dc     3C 4E 85 F1 | 	sub	fp, #60
227e0     A7 36 02 FB | 	rdlong	local13, fp
227e4     18 4E 85 F1 | 	sub	fp, #24
227e8     1B 39 02 F6 | 	mov	local14, local13
227ec     18 39 52 F2 | 	cmps	local14, local10 wc
227f0     20 00 90 3D |  if_ae	jmp	#LR__3081
227f4                 | LR__3080
227f4     C0 4E 05 F1 | 	add	fp, #192
227f8     A7 2C 02 FB | 	rdlong	local08, fp
227fc     16 35 02 F6 | 	mov	local12, local08
22800     01 34 06 F1 | 	add	local12, #1
22804     A7 34 62 FC | 	wrlong	local12, fp
22808     C0 4E 85 F1 | 	sub	fp, #192
2280c     2E 2E 06 F6 | 	mov	local09, #46
22810     16 5D 48 FC | 	wrbyte	#46, local08
22814                 | LR__3081
22814     18 4E 05 F1 | 	add	fp, #24
22818     A7 3A 02 FB | 	rdlong	local15, fp
2281c     1D 35 02 F6 | 	mov	local12, local15
22820     01 34 06 F1 | 	add	local12, #1
22824     A7 34 62 FC | 	wrlong	local12, fp
22828     18 4E 85 F1 | 	sub	fp, #24
2282c     C4 FE 9F FD | 	jmp	#LR__3077
22830                 | LR__3082
22830                 | LR__3083
22830     34 4E 05 F1 | 	add	fp, #52
22834     A7 1E 0A FB | 	rdlong	local01, fp wz
22838     34 4E 85 F1 | 	sub	fp, #52
2283c     A0 00 90 AD |  if_e	jmp	#LR__3087
22840     C0 4E 05 F1 | 	add	fp, #192
22844     A7 1E 02 FB | 	rdlong	local01, fp
22848     01 1E 86 F1 | 	sub	local01, #1
2284c     A7 1E 62 FC | 	wrlong	local01, fp
22850     C0 4E 85 F1 | 	sub	fp, #192
22854     97 26 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
22858                 | LR__3084
22858     C0 4E 05 F1 | 	add	fp, #192
2285c     A7 1E 02 FB | 	rdlong	local01, fp
22860     04 4E 05 F1 | 	add	fp, #4
22864     A7 22 02 FB | 	rdlong	local03, fp
22868     C4 4E 85 F1 | 	sub	fp, #196
2286c     11 1F 5A F2 | 	cmps	local01, local03 wcz
22870     30 00 90 ED |  if_be	jmp	#LR__3086
22874     C0 4E 05 F1 | 	add	fp, #192
22878     A7 28 02 FB | 	rdlong	local06, fp
2287c     C0 4E 85 F1 | 	sub	fp, #192
22880     14 25 C2 FA | 	rdbyte	local04, local06
22884     30 24 0E F2 | 	cmp	local04, #48 wz
22888     18 00 90 5D |  if_ne	jmp	#LR__3086
2288c     C0 4E 05 F1 | 	add	fp, #192
22890     A7 1E 02 FB | 	rdlong	local01, fp
22894     01 1E 86 F1 | 	sub	local01, #1
22898     A7 1E 62 FC | 	wrlong	local01, fp
2289c     C0 4E 85 F1 | 	sub	fp, #192
228a0     B4 FF 9F FD | 	jmp	#LR__3084
228a4                 | LR__3085
228a4                 | LR__3086
228a4     C0 4E 05 F1 | 	add	fp, #192
228a8     A7 20 02 FB | 	rdlong	local02, fp
228ac     C0 4E 85 F1 | 	sub	fp, #192
228b0     10 1F C2 FA | 	rdbyte	local01, local02
228b4     2E 1E 0E F2 | 	cmp	local01, #46 wz
228b8     C0 4E 05 A1 |  if_e	add	fp, #192
228bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
228c0     01 1E 86 A1 |  if_e	sub	local01, #1
228c4     A7 1E 62 AC |  if_e	wrlong	local01, fp
228c8     C0 4E 85 A1 |  if_e	sub	fp, #192
228cc     C0 4E 05 F1 | 	add	fp, #192
228d0     A7 22 02 FB | 	rdlong	local03, fp
228d4     01 22 06 F1 | 	add	local03, #1
228d8     A7 22 62 FC | 	wrlong	local03, fp
228dc     C0 4E 85 F1 | 	sub	fp, #192
228e0                 | LR__3087
228e0     24 4E 05 F1 | 	add	fp, #36
228e4     A7 1E 0A FB | 	rdlong	local01, fp wz
228e8     24 4E 85 F1 | 	sub	fp, #36
228ec     B4 00 90 AD |  if_e	jmp	#LR__3090
228f0     C0 4E 05 F1 | 	add	fp, #192
228f4     A7 20 02 FB | 	rdlong	local02, fp
228f8     10 23 02 F6 | 	mov	local03, local02
228fc     01 22 06 F1 | 	add	local03, #1
22900     A7 22 62 FC | 	wrlong	local03, fp
22904     90 4E 85 F1 | 	sub	fp, #144
22908     A7 24 02 FB | 	rdlong	local04, fp
2290c     10 25 42 FC | 	wrbyte	local04, local02
22910     90 4E 05 F1 | 	add	fp, #144
22914     A7 20 02 FB | 	rdlong	local02, fp
22918     10 23 02 F6 | 	mov	local03, local02
2291c     01 22 06 F1 | 	add	local03, #1
22920     A7 22 62 FC | 	wrlong	local03, fp
22924     60 4E 85 F1 | 	sub	fp, #96
22928     A7 24 02 FB | 	rdlong	local04, fp
2292c     10 25 42 FC | 	wrbyte	local04, local02
22930     48 4E 85 F1 | 	sub	fp, #72
22934     A7 00 68 FC | 	wrlong	#0, fp
22938     18 4E 85 F1 | 	sub	fp, #24
2293c                 | LR__3088
2293c     18 4E 05 F1 | 	add	fp, #24
22940     A7 20 02 FB | 	rdlong	local02, fp
22944     44 4E 05 F1 | 	add	fp, #68
22948     A7 26 02 FB | 	rdlong	local05, fp
2294c     5C 4E 85 F1 | 	sub	fp, #92
22950     13 21 52 F2 | 	cmps	local02, local05 wc
22954     4C 00 90 3D |  if_ae	jmp	#LR__3089
22958     C0 4E 05 F1 | 	add	fp, #192
2295c     A7 2C 02 FB | 	rdlong	local08, fp
22960     16 35 02 F6 | 	mov	local12, local08
22964     01 34 06 F1 | 	add	local12, #1
22968     A7 34 62 FC | 	wrlong	local12, fp
2296c     A8 4E 85 F1 | 	sub	fp, #168
22970     A7 2A 02 FB | 	rdlong	local07, fp
22974     15 2F 02 F6 | 	mov	local09, local07
22978     98 4E 05 F1 | 	add	fp, #152
2297c     A7 30 02 F6 | 	mov	local10, fp
22980     A7 2E 02 F1 | 	add	local09, fp
22984     17 33 C2 FA | 	rdbyte	local11, local09
22988     16 33 42 FC | 	wrbyte	local11, local08
2298c     98 4E 85 F1 | 	sub	fp, #152
22990     A7 34 02 FB | 	rdlong	local12, fp
22994     01 34 06 F1 | 	add	local12, #1
22998     A7 34 62 FC | 	wrlong	local12, fp
2299c     18 4E 85 F1 | 	sub	fp, #24
229a0     98 FF 9F FD | 	jmp	#LR__3088
229a4                 | LR__3089
229a4                 | LR__3090
229a4     C0 4E 05 F1 | 	add	fp, #192
229a8     A7 1E 02 FB | 	rdlong	local01, fp
229ac     C0 4E 85 F1 | 	sub	fp, #192
229b0     0F 01 48 FC | 	wrbyte	#0, local01
229b4                 | LR__3091
229b4     6C 4E 05 F1 | 	add	fp, #108
229b8     A7 1E 0A FB | 	rdlong	local01, fp wz
229bc     6C 4E 85 F1 | 	sub	fp, #108
229c0     90 01 90 AD |  if_e	jmp	#LR__3102
229c4     48 4E 05 F1 | 	add	fp, #72
229c8     A7 22 0A FB | 	rdlong	local03, fp wz
229cc     48 4E 85 F1 | 	sub	fp, #72
229d0     80 01 90 AD |  if_e	jmp	#LR__3102
229d4     C4 4E 05 F1 | 	add	fp, #196
229d8     A7 12 02 FB | 	rdlong	arg01, fp
229dc     C4 4E 85 F1 | 	sub	fp, #196
229e0     09 3D 02 F6 | 	mov	local16, arg01
229e4     97 06 48 FB | 	callpa	#(@LR__3093-@LR__3092)>>2,fcache_load_ptr_
229e8                 | LR__3092
229e8     1E FB C9 FA | 	rdbyte	result1, local16 wz
229ec     01 3C 06 51 |  if_ne	add	local16, #1
229f0     F4 FF 9F 5D |  if_ne	jmp	#LR__3092
229f4                 | LR__3093
229f4     09 3D 82 F1 | 	sub	local16, arg01
229f8     1E 25 02 F6 | 	mov	local04, local16
229fc     6C 4E 05 F1 | 	add	fp, #108
22a00     A7 28 02 FB | 	rdlong	local06, fp
22a04     6C 4E 85 F1 | 	sub	fp, #108
22a08     14 25 5A F2 | 	cmps	local04, local06 wcz
22a0c     44 01 90 ED |  if_be	jmp	#LR__3102
22a10     C4 4E 05 F1 | 	add	fp, #196
22a14     A7 1E 02 FB | 	rdlong	local01, fp
22a18     5C 4E 05 F1 | 	add	fp, #92
22a1c     A7 1E 62 FC | 	wrlong	local01, fp
22a20     FC 4E 85 F1 | 	sub	fp, #252
22a24     A7 1E 0A FB | 	rdlong	local01, fp wz
22a28     24 4E 85 F1 | 	sub	fp, #36
22a2c     20 00 90 AD |  if_e	jmp	#LR__3094
22a30     B8 4E 05 F1 | 	add	fp, #184
22a34     A7 00 68 FC | 	wrlong	#0, fp
22a38     4C 4E 85 F1 | 	sub	fp, #76
22a3c     A7 1E 02 FB | 	rdlong	local01, fp
22a40     B0 4E 05 F1 | 	add	fp, #176
22a44     A7 1E 62 FC | 	wrlong	local01, fp
22a48     1C 4F 85 F1 | 	sub	fp, #284
22a4c     24 00 90 FD | 	jmp	#LR__3095
22a50                 | LR__3094
22a50     6C 4E 05 F1 | 	add	fp, #108
22a54     A7 1E 02 FB | 	rdlong	local01, fp
22a58     01 1E 86 F1 | 	sub	local01, #1
22a5c     4C 4E 05 F1 | 	add	fp, #76
22a60     A7 22 02 FB | 	rdlong	local03, fp
22a64     11 1F 82 F1 | 	sub	local01, local03
22a68     64 4E 05 F1 | 	add	fp, #100
22a6c     A7 1E 62 FC | 	wrlong	local01, fp
22a70     1C 4F 85 F1 | 	sub	fp, #284
22a74                 | LR__3095
22a74     97 20 48 FB | 	callpa	#(@LR__3097-@LR__3096)>>2,fcache_load_ptr_
22a78                 | LR__3096
22a78     1C 4F 05 F1 | 	add	fp, #284
22a7c     A7 1E 0A FB | 	rdlong	local01, fp wz
22a80     1C 4F 85 F1 | 	sub	fp, #284
22a84     30 00 90 AD |  if_e	jmp	#LR__3098
22a88     20 4F 05 F1 | 	add	fp, #288
22a8c     A7 20 02 FB | 	rdlong	local02, fp
22a90     10 23 02 F6 | 	mov	local03, local02
22a94     01 22 06 F1 | 	add	local03, #1
22a98     A7 22 62 FC | 	wrlong	local03, fp
22a9c     10 55 48 FC | 	wrbyte	#42, local02
22aa0     04 4E 85 F1 | 	sub	fp, #4
22aa4     A7 1E 02 FB | 	rdlong	local01, fp
22aa8     01 1E 86 F1 | 	sub	local01, #1
22aac     A7 1E 62 FC | 	wrlong	local01, fp
22ab0     1C 4F 85 F1 | 	sub	fp, #284
22ab4     C0 FF 9F FD | 	jmp	#LR__3096
22ab8                 | LR__3097
22ab8                 | LR__3098
22ab8     B8 4E 05 F1 | 	add	fp, #184
22abc     A7 1E 0A FB | 	rdlong	local01, fp wz
22ac0     B8 4E 85 F1 | 	sub	fp, #184
22ac4     70 00 90 AD |  if_e	jmp	#LR__3101
22ac8     20 4F 05 F1 | 	add	fp, #288
22acc     A7 20 02 FB | 	rdlong	local02, fp
22ad0     10 23 02 F6 | 	mov	local03, local02
22ad4     01 22 06 F1 | 	add	local03, #1
22ad8     A7 22 62 FC | 	wrlong	local03, fp
22adc     10 5D 48 FC | 	wrbyte	#46, local02
22ae0     04 4E 85 F1 | 	sub	fp, #4
22ae4     A7 00 68 FC | 	wrlong	#0, fp
22ae8     1C 4F 85 F1 | 	sub	fp, #284
22aec                 | LR__3099
22aec     1C 4F 05 F1 | 	add	fp, #284
22af0     A7 20 02 FB | 	rdlong	local02, fp
22af4     64 4E 85 F1 | 	sub	fp, #100
22af8     A7 26 02 FB | 	rdlong	local05, fp
22afc     B8 4E 85 F1 | 	sub	fp, #184
22b00     13 21 52 F2 | 	cmps	local02, local05 wc
22b04     30 00 90 3D |  if_ae	jmp	#LR__3100
22b08     20 4F 05 F1 | 	add	fp, #288
22b0c     A7 2C 02 FB | 	rdlong	local08, fp
22b10     16 35 02 F6 | 	mov	local12, local08
22b14     01 34 06 F1 | 	add	local12, #1
22b18     A7 34 62 FC | 	wrlong	local12, fp
22b1c     16 55 48 FC | 	wrbyte	#42, local08
22b20     04 4E 85 F1 | 	sub	fp, #4
22b24     A7 34 02 FB | 	rdlong	local12, fp
22b28     01 34 06 F1 | 	add	local12, #1
22b2c     A7 34 62 FC | 	wrlong	local12, fp
22b30     1C 4F 85 F1 | 	sub	fp, #284
22b34     B4 FF 9F FD | 	jmp	#LR__3099
22b38                 | LR__3100
22b38                 | LR__3101
22b38     20 4F 05 F1 | 	add	fp, #288
22b3c     A7 20 02 FB | 	rdlong	local02, fp
22b40     10 23 02 F6 | 	mov	local03, local02
22b44     01 22 06 F1 | 	add	local03, #1
22b48     A7 22 62 FC | 	wrlong	local03, fp
22b4c     20 4F 85 F1 | 	sub	fp, #288
22b50     10 01 48 FC | 	wrbyte	#0, local02
22b54                 | LR__3102
22b54     04 4E 05 F1 | 	add	fp, #4
22b58     A7 12 02 FB | 	rdlong	arg01, fp
22b5c     04 4E 05 F1 | 	add	fp, #4
22b60     A7 14 02 FB | 	rdlong	arg02, fp
22b64     BC 4E 05 F1 | 	add	fp, #188
22b68     A7 16 02 FB | 	rdlong	arg03, fp
22b6c     C4 4E 85 F1 | 	sub	fp, #196
22b70     C4 EE BF FD | 	call	#__system___fmtstr
22b74                 | LR__3103
22b74     A7 F0 03 F6 | 	mov	ptra, fp
22b78     B2 00 A0 FD | 	call	#popregs_
22b7c                 | __system___fmtfloat_ret
22b7c     2D 00 64 FD | 	ret
22b80                 | 
22b80                 | __system__Left_S
22b80     04 4A 05 F6 | 	mov	COUNT_, #4
22b84     A8 00 A0 FD | 	call	#pushregs_
22b88     09 1F 02 F6 | 	mov	local01, arg01
22b8c     0A 21 02 F6 | 	mov	local02, arg02
22b90     01 20 56 F2 | 	cmps	local02, #1 wc
22b94     81 01 00 CF 
22b98     56 FB 05 C6 |  if_b	mov	result1, ##@LR__5023
22b9c     5C 00 90 CD |  if_b	jmp	#LR__3113
22ba0     0F 13 02 F6 | 	mov	arg01, local01
22ba4     09 23 02 F6 | 	mov	local03, arg01
22ba8     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22bac                 | LR__3110
22bac     11 FB C9 FA | 	rdbyte	result1, local03 wz
22bb0     01 22 06 51 |  if_ne	add	local03, #1
22bb4     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
22bb8                 | LR__3111
22bb8     09 23 82 F1 | 	sub	local03, arg01
22bbc     11 FB 01 F6 | 	mov	result1, local03
22bc0     10 FB 59 F2 | 	cmps	result1, local02 wcz
22bc4     0F FB 01 E6 |  if_be	mov	result1, local01
22bc8     30 00 90 ED |  if_be	jmp	#LR__3113
22bcc     10 13 02 F6 | 	mov	arg01, local02
22bd0     02 12 06 F1 | 	add	arg01, #2
22bd4     08 1E B0 FD | 	call	#__system___gc_alloc_managed
22bd8     FD 24 0A F6 | 	mov	local04, result1 wz
22bdc     18 00 90 AD |  if_e	jmp	#LR__3112
22be0     12 13 02 F6 | 	mov	arg01, local04
22be4     0F 15 02 F6 | 	mov	arg02, local01
22be8     10 17 02 F6 | 	mov	arg03, local02
22bec     34 DE BF FD | 	call	#__system____builtin_memmove
22bf0     12 21 02 F1 | 	add	local02, local04
22bf4     10 01 48 FC | 	wrbyte	#0, local02
22bf8                 | LR__3112
22bf8     12 FB 01 F6 | 	mov	result1, local04
22bfc                 | LR__3113
22bfc     A7 F0 03 F6 | 	mov	ptra, fp
22c00     B2 00 A0 FD | 	call	#popregs_
22c04                 | __system__Left_S_ret
22c04     2D 00 64 FD | 	ret
22c08                 | 
22c08                 | __system__Right_S
22c08     05 4A 05 F6 | 	mov	COUNT_, #5
22c0c     A8 00 A0 FD | 	call	#pushregs_
22c10     09 1F 02 F6 | 	mov	local01, arg01
22c14     0A 21 02 F6 | 	mov	local02, arg02
22c18     01 20 56 F2 | 	cmps	local02, #1 wc
22c1c     81 01 00 CF 
22c20     57 FB 05 C6 |  if_b	mov	result1, ##@LR__5024
22c24     64 00 90 CD |  if_b	jmp	#LR__3123
22c28     0F 13 02 F6 | 	mov	arg01, local01
22c2c     09 23 02 F6 | 	mov	local03, arg01
22c30     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22c34                 | LR__3120
22c34     11 FB C9 FA | 	rdbyte	result1, local03 wz
22c38     01 22 06 51 |  if_ne	add	local03, #1
22c3c     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22c40                 | LR__3121
22c40     09 23 82 F1 | 	sub	local03, arg01
22c44     11 FB 01 F6 | 	mov	result1, local03
22c48     FD 24 02 F6 | 	mov	local04, result1
22c4c     10 25 5A F2 | 	cmps	local04, local02 wcz
22c50     0F FB 01 E6 |  if_be	mov	result1, local01
22c54     34 00 90 ED |  if_be	jmp	#LR__3123
22c58     10 13 02 F6 | 	mov	arg01, local02
22c5c     02 12 06 F1 | 	add	arg01, #2
22c60     7C 1D B0 FD | 	call	#__system___gc_alloc_managed
22c64     FD 26 0A F6 | 	mov	local05, result1 wz
22c68     1C 00 90 AD |  if_e	jmp	#LR__3122
22c6c     10 25 82 F1 | 	sub	local04, local02
22c70     0F 25 02 F1 | 	add	local04, local01
22c74     01 20 06 F1 | 	add	local02, #1
22c78     13 13 02 F6 | 	mov	arg01, local05
22c7c     12 15 02 F6 | 	mov	arg02, local04
22c80     10 17 02 F6 | 	mov	arg03, local02
22c84     9C DD BF FD | 	call	#__system____builtin_memmove
22c88                 | LR__3122
22c88     13 FB 01 F6 | 	mov	result1, local05
22c8c                 | LR__3123
22c8c     A7 F0 03 F6 | 	mov	ptra, fp
22c90     B2 00 A0 FD | 	call	#popregs_
22c94                 | __system__Right_S_ret
22c94     2D 00 64 FD | 	ret
22c98                 | 
22c98                 | __system__Mid_S
22c98     05 4A 05 F6 | 	mov	COUNT_, #5
22c9c     A8 00 A0 FD | 	call	#pushregs_
22ca0     09 1F 02 F6 | 	mov	local01, arg01
22ca4     0A 21 02 F6 | 	mov	local02, arg02
22ca8     01 16 56 F2 | 	cmps	arg03, #1 wc
22cac     81 01 00 CF 
22cb0     58 FB 05 C6 |  if_b	mov	result1, ##@LR__5025
22cb4     80 00 90 CD |  if_b	jmp	#LR__3133
22cb8     01 20 86 F1 | 	sub	local02, #1
22cbc     00 20 56 F3 | 	fges	local02, #0 wc
22cc0     0F 13 02 F6 | 	mov	arg01, local01
22cc4     09 23 02 F6 | 	mov	local03, arg01
22cc8     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22ccc                 | LR__3130
22ccc     11 FB C9 FA | 	rdbyte	result1, local03 wz
22cd0     01 22 06 51 |  if_ne	add	local03, #1
22cd4     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22cd8                 | LR__3131
22cd8     09 23 82 F1 | 	sub	local03, arg01
22cdc     11 FB 01 F6 | 	mov	result1, local03
22ce0     FD 14 02 F6 | 	mov	arg02, result1
22ce4     10 15 52 F2 | 	cmps	arg02, local02 wc
22ce8     81 01 00 CF 
22cec     59 FB 05 C6 |  if_b	mov	result1, ##@LR__5026
22cf0     44 00 90 CD |  if_b	jmp	#LR__3133
22cf4     0A 25 02 F6 | 	mov	local04, arg02
22cf8     10 25 82 F1 | 	sub	local04, local02
22cfc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22d00     0B 25 02 16 |  if_a	mov	local04, arg03
22d04     12 13 02 F6 | 	mov	arg01, local04
22d08     02 12 06 F1 | 	add	arg01, #2
22d0c     D0 1C B0 FD | 	call	#__system___gc_alloc_managed
22d10     FD 26 0A F6 | 	mov	local05, result1 wz
22d14     1C 00 90 AD |  if_e	jmp	#LR__3132
22d18     0F 21 02 F1 | 	add	local02, local01
22d1c     13 13 02 F6 | 	mov	arg01, local05
22d20     10 15 02 F6 | 	mov	arg02, local02
22d24     12 17 02 F6 | 	mov	arg03, local04
22d28     F8 DC BF FD | 	call	#__system____builtin_memmove
22d2c     13 25 02 F1 | 	add	local04, local05
22d30     12 01 48 FC | 	wrbyte	#0, local04
22d34                 | LR__3132
22d34     13 FB 01 F6 | 	mov	result1, local05
22d38                 | LR__3133
22d38     A7 F0 03 F6 | 	mov	ptra, fp
22d3c     B2 00 A0 FD | 	call	#popregs_
22d40                 | __system__Mid_S_ret
22d40     2D 00 64 FD | 	ret
22d44                 | 
22d44                 | __system__Chr_S
22d44     01 4A 05 F6 | 	mov	COUNT_, #1
22d48     A8 00 A0 FD | 	call	#pushregs_
22d4c     09 1F 02 F6 | 	mov	local01, arg01
22d50     03 12 06 F6 | 	mov	arg01, #3
22d54     88 1C B0 FD | 	call	#__system___gc_alloc_managed
22d58     00 FA 4D F2 | 	cmps	result1, #0 wz
22d5c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22d60     01 FA 05 51 |  if_ne	add	result1, #1
22d64     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22d68     01 FA 85 51 |  if_ne	sub	result1, #1
22d6c     A7 F0 03 F6 | 	mov	ptra, fp
22d70     B2 00 A0 FD | 	call	#popregs_
22d74                 | __system__Chr_S_ret
22d74     2D 00 64 FD | 	ret
22d78                 | 
22d78                 | __system__str_S
22d78     02 4A 05 F6 | 	mov	COUNT_, #2
22d7c     A8 00 A0 FD | 	call	#pushregs_
22d80     09 1F 02 F6 | 	mov	local01, arg01
22d84     10 12 06 F6 | 	mov	arg01, #16
22d88     54 1C B0 FD | 	call	#__system___gc_alloc_managed
22d8c     FD 20 0A F6 | 	mov	local02, result1 wz
22d90     30 00 90 AD |  if_e	jmp	#LR__3140
22d94     F8 13 02 F6 | 	mov	arg01, ptra
22d98     08 F0 07 F1 | 	add	ptra, #8
22d9c     09 21 62 FC | 	wrlong	local02, arg01
22da0     04 12 06 F1 | 	add	arg01, #4
22da4     09 01 68 FC | 	wrlong	#0, arg01
22da8     04 12 86 F1 | 	sub	arg01, #4
22dac     00 A8 04 FF 
22db0     00 12 46 F5 | 	or	arg01, ##156237824
22db4     00 14 06 F6 | 	mov	arg02, #0
22db8     0F 17 02 F6 | 	mov	arg03, local01
22dbc     67 18 06 F6 | 	mov	arg04, #103
22dc0     90 EE BF FD | 	call	#__system___fmtfloat
22dc4                 | LR__3140
22dc4     10 FB 01 F6 | 	mov	result1, local02
22dc8     A7 F0 03 F6 | 	mov	ptra, fp
22dcc     B2 00 A0 FD | 	call	#popregs_
22dd0                 | __system__str_S_ret
22dd0     2D 00 64 FD | 	ret
22dd4                 | 
22dd4                 | __system__Number_S
22dd4     08 4A 05 F6 | 	mov	COUNT_, #8
22dd8     A8 00 A0 FD | 	call	#pushregs_
22ddc     09 1F 02 F6 | 	mov	local01, arg01
22de0     0A 21 0A F6 | 	mov	local02, arg02 wz
22de4     0B 23 02 F6 | 	mov	local03, arg03
22de8     3C 00 90 5D |  if_ne	jmp	#LR__3152
22dec     01 20 06 F6 | 	mov	local02, #1
22df0     11 25 02 F6 | 	mov	local04, local03
22df4     01 26 06 F6 | 	mov	local05, #1
22df8     97 16 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22dfc                 | LR__3150
22dfc     00 28 06 F6 | 	mov	local06, #0
22e00     0F 25 1A F2 | 	cmp	local04, local01 wcz
22e04     01 28 66 E6 |  if_be	neg	local06, #1
22e08     12 27 12 F2 | 	cmp	local05, local04 wc
22e0c     15 2B A2 F1 | 	subx	local07, local07
22e10     15 29 CA F7 | 	test	local06, local07 wz
22e14     11 25 02 5D |  if_ne	qmul	local04, local03
22e18     12 27 02 56 |  if_ne	mov	local05, local04
22e1c     01 20 06 51 |  if_ne	add	local02, #1
22e20     18 24 62 5D |  if_ne	getqx	local04
22e24     D4 FF 9F 5D |  if_ne	jmp	#LR__3150
22e28                 | LR__3151
22e28                 | LR__3152
22e28     20 20 36 F3 | 	fle	local02, #32 wc
22e2c     10 13 02 F6 | 	mov	arg01, local02
22e30     02 12 06 F1 | 	add	arg01, #2
22e34     A8 1B B0 FD | 	call	#__system___gc_alloc_managed
22e38     FD 28 02 F6 | 	mov	local06, result1
22e3c     10 2B 02 F6 | 	mov	local07, local02
22e40     14 2B 02 F1 | 	add	local07, local06
22e44     15 01 48 FC | 	wrbyte	#0, local07
22e48     97 1A 48 FB | 	callpa	#(@LR__3154-@LR__3153)>>2,fcache_load_ptr_
22e4c                 | LR__3153
22e4c     01 20 16 F2 | 	cmp	local02, #1 wc
22e50     2C 00 90 CD |  if_b	jmp	#LR__3155
22e54     11 1F 12 FD | 	qdiv	local01, local03
22e58     01 20 86 F1 | 	sub	local02, #1
22e5c     10 2B 02 F6 | 	mov	local07, local02
22e60     14 2B 02 F1 | 	add	local07, local06
22e64     19 2C 62 FD | 	getqy	local08
22e68     0A 2C 16 F2 | 	cmp	local08, #10 wc
22e6c     30 2C 06 C1 |  if_b	add	local08, #48
22e70     37 2C 06 31 |  if_ae	add	local08, #55
22e74     15 2D 42 FC | 	wrbyte	local08, local07
22e78     18 1E 62 FD | 	getqx	local01
22e7c     CC FF 9F FD | 	jmp	#LR__3153
22e80                 | LR__3154
22e80                 | LR__3155
22e80     14 FB 01 F6 | 	mov	result1, local06
22e84     A7 F0 03 F6 | 	mov	ptra, fp
22e88     B2 00 A0 FD | 	call	#popregs_
22e8c                 | __system__Number_S_ret
22e8c     2D 00 64 FD | 	ret
22e90                 | 
22e90                 | __system__LCase_S
22e90     07 4A 05 F6 | 	mov	COUNT_, #7
22e94     A8 00 A0 FD | 	call	#pushregs_
22e98     09 1F 02 F6 | 	mov	local01, arg01
22e9c     09 21 02 F6 | 	mov	local02, arg01
22ea0     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22ea4                 | LR__3160
22ea4     10 FB C9 FA | 	rdbyte	result1, local02 wz
22ea8     01 20 06 51 |  if_ne	add	local02, #1
22eac     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22eb0                 | LR__3161
22eb0     09 21 82 F1 | 	sub	local02, arg01
22eb4     10 FB 01 F6 | 	mov	result1, local02
22eb8     FD 20 0A F6 | 	mov	local02, result1 wz
22ebc     81 01 00 AF 
22ec0     5A FB 05 A6 |  if_e	mov	result1, ##@LR__5027
22ec4     7C 00 90 AD |  if_e	jmp	#LR__3167
22ec8     10 13 02 F6 | 	mov	arg01, local02
22ecc     02 12 06 F1 | 	add	arg01, #2
22ed0     0C 1B B0 FD | 	call	#__system___gc_alloc_managed
22ed4     FD 22 0A F6 | 	mov	local03, result1 wz
22ed8     64 00 90 AD |  if_e	jmp	#LR__3166
22edc     01 24 66 F6 | 	neg	local04, #1
22ee0     97 26 48 FB | 	callpa	#(@LR__3165-@LR__3162)>>2,fcache_load_ptr_
22ee4                 | LR__3162
22ee4     01 24 06 F1 | 	add	local04, #1
22ee8     12 27 02 F6 | 	mov	local05, local04
22eec     0F 27 02 F1 | 	add	local05, local01
22ef0     13 29 C2 FA | 	rdbyte	local06, local05
22ef4     41 28 56 F2 | 	cmps	local06, #65 wc
22ef8     18 00 90 CD |  if_b	jmp	#LR__3163
22efc     5B 28 56 F2 | 	cmps	local06, #91 wc
22f00     12 2B 02 C6 |  if_b	mov	local07, local04
22f04     11 2B 02 C1 |  if_b	add	local07, local03
22f08     20 28 06 C1 |  if_b	add	local06, #32
22f0c     15 29 42 CC |  if_b	wrbyte	local06, local07
22f10     0C 00 90 CD |  if_b	jmp	#LR__3164
22f14                 | LR__3163
22f14     12 2B 02 F6 | 	mov	local07, local04
22f18     11 2B 02 F1 | 	add	local07, local03
22f1c     15 29 42 FC | 	wrbyte	local06, local07
22f20                 | LR__3164
22f20     10 29 02 F6 | 	mov	local06, local02
22f24     01 28 86 F1 | 	sub	local06, #1
22f28     14 25 0A F2 | 	cmp	local04, local06 wz
22f2c     B4 FF 9F 5D |  if_ne	jmp	#LR__3162
22f30                 | LR__3165
22f30     11 21 02 F1 | 	add	local02, local03
22f34     10 01 48 FC | 	wrbyte	#0, local02
22f38     11 FB 01 F6 | 	mov	result1, local03
22f3c     04 00 90 FD | 	jmp	#LR__3167
22f40                 | LR__3166
22f40     11 FB 01 F6 | 	mov	result1, local03
22f44                 | LR__3167
22f44     A7 F0 03 F6 | 	mov	ptra, fp
22f48     B2 00 A0 FD | 	call	#popregs_
22f4c                 | __system__LCase_S_ret
22f4c     2D 00 64 FD | 	ret
22f50                 | 
22f50                 | __system__LTrim_S
22f50     05 4A 05 F6 | 	mov	COUNT_, #5
22f54     A8 00 A0 FD | 	call	#pushregs_
22f58     09 1F 02 F6 | 	mov	local01, arg01
22f5c     09 21 02 F6 | 	mov	local02, arg01
22f60     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
22f64                 | LR__3170
22f64     10 FB C9 FA | 	rdbyte	result1, local02 wz
22f68     01 20 06 51 |  if_ne	add	local02, #1
22f6c     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
22f70                 | LR__3171
22f70     09 21 82 F1 | 	sub	local02, arg01
22f74     10 FB 01 F6 | 	mov	result1, local02
22f78     FD 20 0A F6 | 	mov	local02, result1 wz
22f7c     81 01 00 AF 
22f80     5B FB 05 A6 |  if_e	mov	result1, ##@LR__5028
22f84     7C 00 90 AD |  if_e	jmp	#LR__3176
22f88     00 22 06 F6 | 	mov	local03, #0
22f8c     10 25 02 F6 | 	mov	local04, local02
22f90                 | LR__3172
22f90     12 23 52 F2 | 	cmps	local03, local04 wc
22f94     68 00 90 3D |  if_ae	jmp	#LR__3175
22f98     11 17 02 F6 | 	mov	arg03, local03
22f9c     0F 17 02 F1 | 	add	arg03, local01
22fa0     0B 17 C2 FA | 	rdbyte	arg03, arg03
22fa4     20 16 0E F2 | 	cmp	arg03, #32 wz
22fa8     4C 00 90 AD |  if_e	jmp	#LR__3174
22fac     10 13 02 F6 | 	mov	arg01, local02
22fb0     11 13 82 F1 | 	sub	arg01, local03
22fb4     02 12 06 F1 | 	add	arg01, #2
22fb8     24 1A B0 FD | 	call	#__system___gc_alloc_managed
22fbc     FD 26 0A F6 | 	mov	local05, result1 wz
22fc0     2C 00 90 AD |  if_e	jmp	#LR__3173
22fc4     11 15 02 F6 | 	mov	arg02, local03
22fc8     0F 15 02 F1 | 	add	arg02, local01
22fcc     10 17 02 F6 | 	mov	arg03, local02
22fd0     11 17 82 F1 | 	sub	arg03, local03
22fd4     13 13 02 F6 | 	mov	arg01, local05
22fd8     48 DA BF FD | 	call	#__system____builtin_memmove
22fdc     11 21 82 F1 | 	sub	local02, local03
22fe0     13 21 02 F1 | 	add	local02, local05
22fe4     10 01 48 FC | 	wrbyte	#0, local02
22fe8     13 FB 01 F6 | 	mov	result1, local05
22fec     14 00 90 FD | 	jmp	#LR__3176
22ff0                 | LR__3173
22ff0     13 FB 01 F6 | 	mov	result1, local05
22ff4     0C 00 90 FD | 	jmp	#LR__3176
22ff8                 | LR__3174
22ff8     01 22 06 F1 | 	add	local03, #1
22ffc     90 FF 9F FD | 	jmp	#LR__3172
23000                 | LR__3175
23000     0F FB 01 F6 | 	mov	result1, local01
23004                 | LR__3176
23004     A7 F0 03 F6 | 	mov	ptra, fp
23008     B2 00 A0 FD | 	call	#popregs_
2300c                 | __system__LTrim_S_ret
2300c     2D 00 64 FD | 	ret
23010                 | 
23010                 | __system__RTrim_S
23010     04 4A 05 F6 | 	mov	COUNT_, #4
23014     A8 00 A0 FD | 	call	#pushregs_
23018     09 1F 02 F6 | 	mov	local01, arg01
2301c     09 21 02 F6 | 	mov	local02, arg01
23020     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
23024                 | LR__3180
23024     10 FB C9 FA | 	rdbyte	result1, local02 wz
23028     01 20 06 51 |  if_ne	add	local02, #1
2302c     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
23030                 | LR__3181
23030     09 21 82 F1 | 	sub	local02, arg01
23034     10 FB 01 F6 | 	mov	result1, local02
23038     FD 20 0A F6 | 	mov	local02, result1 wz
2303c     81 01 00 AF 
23040     5C FB 05 A6 |  if_e	mov	result1, ##@LR__5029
23044     74 00 90 AD |  if_e	jmp	#LR__3185
23048     10 23 02 F6 | 	mov	local03, local02
2304c     01 22 86 F1 | 	sub	local03, #1
23050                 | LR__3182
23050     11 15 02 F6 | 	mov	arg02, local03
23054     0F 15 02 F1 | 	add	arg02, local01
23058     0A 21 C2 FA | 	rdbyte	local02, arg02
2305c     20 20 0E F2 | 	cmp	local02, #32 wz
23060     44 00 90 AD |  if_e	jmp	#LR__3184
23064     11 13 02 F6 | 	mov	arg01, local03
23068     02 12 06 F1 | 	add	arg01, #2
2306c     70 19 B0 FD | 	call	#__system___gc_alloc_managed
23070     FD 24 0A F6 | 	mov	local04, result1 wz
23074     28 00 90 AD |  if_e	jmp	#LR__3183
23078     11 17 02 F6 | 	mov	arg03, local03
2307c     01 16 06 F1 | 	add	arg03, #1
23080     12 13 02 F6 | 	mov	arg01, local04
23084     0F 15 02 F6 | 	mov	arg02, local01
23088     98 D9 BF FD | 	call	#__system____builtin_memmove
2308c     01 22 06 F1 | 	add	local03, #1
23090     12 23 02 F1 | 	add	local03, local04
23094     11 01 48 FC | 	wrbyte	#0, local03
23098     12 FB 01 F6 | 	mov	result1, local04
2309c     1C 00 90 FD | 	jmp	#LR__3185
230a0                 | LR__3183
230a0     12 FB 01 F6 | 	mov	result1, local04
230a4     14 00 90 FD | 	jmp	#LR__3185
230a8                 | LR__3184
230a8     01 22 86 F1 | 	sub	local03, #1
230ac     00 22 56 F2 | 	cmps	local03, #0 wc
230b0     9C FF 9F 3D |  if_ae	jmp	#LR__3182
230b4     81 01 00 FF 
230b8     5D FB 05 F6 | 	mov	result1, ##@LR__5030
230bc                 | LR__3185
230bc     A7 F0 03 F6 | 	mov	ptra, fp
230c0     B2 00 A0 FD | 	call	#popregs_
230c4                 | __system__RTrim_S_ret
230c4     2D 00 64 FD | 	ret
230c8                 | 
230c8                 | __system__Instr
230c8     07 4A 05 F6 | 	mov	COUNT_, #7
230cc     A8 00 A0 FD | 	call	#pushregs_
230d0     09 1F 02 F6 | 	mov	local01, arg01
230d4     0A 21 02 F6 | 	mov	local02, arg02
230d8     0B 23 02 F6 | 	mov	local03, arg03
230dc     11 13 02 F6 | 	mov	arg01, local03
230e0     09 25 02 F6 | 	mov	local04, arg01
230e4     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
230e8                 | LR__3190
230e8     12 FB C9 FA | 	rdbyte	result1, local04 wz
230ec     01 24 06 51 |  if_ne	add	local04, #1
230f0     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
230f4                 | LR__3191
230f4     09 25 82 F1 | 	sub	local04, arg01
230f8     12 27 02 F6 | 	mov	local05, local04
230fc     10 13 02 F6 | 	mov	arg01, local02
23100     09 25 02 F6 | 	mov	local04, arg01
23104     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
23108                 | LR__3192
23108     12 FB C9 FA | 	rdbyte	result1, local04 wz
2310c     01 24 06 51 |  if_ne	add	local04, #1
23110     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
23114                 | LR__3193
23114     09 25 82 F1 | 	sub	local04, arg01
23118     12 FB 01 F6 | 	mov	result1, local04
2311c     FD 18 0A F6 | 	mov	arg04, result1 wz
23120     00 FA 05 A6 |  if_e	mov	result1, #0
23124     98 00 90 AD |  if_e	jmp	#LR__3197
23128     00 26 0E F2 | 	cmp	local05, #0 wz
2312c     00 FA 05 A6 |  if_e	mov	result1, #0
23130     8C 00 90 AD |  if_e	jmp	#LR__3197
23134     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
23138     00 FA 05 16 |  if_a	mov	result1, #0
2313c     80 00 90 1D |  if_a	jmp	#LR__3197
23140     01 1E 56 F2 | 	cmps	local01, #1 wc
23144     01 1E 06 C6 |  if_b	mov	local01, #1
23148     11 29 C2 FA | 	rdbyte	local06, local03
2314c     01 26 0E F2 | 	cmp	local05, #1 wz
23150     18 00 90 5D |  if_ne	jmp	#LR__3194
23154     10 13 02 F6 | 	mov	arg01, local02
23158     14 15 02 F6 | 	mov	arg02, local06
2315c     0F 17 02 F6 | 	mov	arg03, local01
23160     00 18 06 F6 | 	mov	arg04, #0
23164     50 34 B0 FD | 	call	#__system____ScanForChar
23168     54 00 90 FD | 	jmp	#LR__3197
2316c                 | LR__3194
2316c     0F 2B 02 F6 | 	mov	local07, local01
23170                 | LR__3195
23170     10 13 02 F6 | 	mov	arg01, local02
23174     14 15 02 F6 | 	mov	arg02, local06
23178     15 17 02 F6 | 	mov	arg03, local07
2317c     00 18 06 F6 | 	mov	arg04, #0
23180     34 34 B0 FD | 	call	#__system____ScanForChar
23184     FD 2A 0A F6 | 	mov	local07, result1 wz
23188     30 00 90 AD |  if_e	jmp	#LR__3196
2318c     13 17 02 F6 | 	mov	arg03, local05
23190     10 13 02 F6 | 	mov	arg01, local02
23194     15 15 02 F6 | 	mov	arg02, local07
23198     FC FA BF FD | 	call	#__system__Mid_S
2319c     FD 12 02 F6 | 	mov	arg01, result1
231a0     11 15 02 F6 | 	mov	arg02, local03
231a4     84 D9 BF FD | 	call	#__system___string_cmp
231a8     00 FA 0D F2 | 	cmp	result1, #0 wz
231ac     15 FB 01 A6 |  if_e	mov	result1, local07
231b0     0C 00 90 AD |  if_e	jmp	#LR__3197
231b4     13 2B 02 F1 | 	add	local07, local05
231b8     B4 FF 9F FD | 	jmp	#LR__3195
231bc                 | LR__3196
231bc     00 FA 05 F6 | 	mov	result1, #0
231c0                 | LR__3197
231c0     A7 F0 03 F6 | 	mov	ptra, fp
231c4     B2 00 A0 FD | 	call	#popregs_
231c8                 | __system__Instr_ret
231c8     2D 00 64 FD | 	ret
231cc                 | 
231cc                 | __system___strerror
231cc     00 12 56 F2 | 	cmps	arg01, #0 wc
231d0     08 00 90 CD |  if_b	jmp	#LR__3200
231d4     1A 12 56 F2 | 	cmps	arg01, #26 wc
231d8     04 00 90 CD |  if_b	jmp	#LR__3201
231dc                 | LR__3200
231dc     19 12 06 F6 | 	mov	arg01, #25
231e0                 | LR__3201
231e0     02 12 66 F0 | 	shl	arg01, #2
231e4     01 00 00 FF 
231e8     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
231ec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
231f0     09 FB 01 FB | 	rdlong	result1, arg01
231f4     01 00 00 FF 
231f8     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
231fc                 | __system___strerror_ret
231fc     2D 00 64 FD | 	ret
23200                 | 
23200                 | __system___int64_shl
23200     20 16 CE F7 | 	test	arg03, #32 wz
23204     09 15 02 56 |  if_ne	mov	arg02, arg01
23208     00 12 06 56 |  if_ne	mov	arg01, #0
2320c     1F 16 CE F7 | 	test	arg03, #31 wz
23210     18 00 90 AD |  if_e	jmp	#LR__3210
23214     0B 15 62 F0 | 	shl	arg02, arg03
23218     09 FB 01 F6 | 	mov	result1, arg01
2321c     0B FD 61 F6 | 	neg	result2, arg03
23220     FE FA 41 F0 | 	shr	result1, result2
23224     FD 14 42 F5 | 	or	arg02, result1
23228     0B 13 62 F0 | 	shl	arg01, arg03
2322c                 | LR__3210
2322c     0A FD 01 F6 | 	mov	result2, arg02
23230     09 FB 01 F6 | 	mov	result1, arg01
23234                 | __system___int64_shl_ret
23234     2D 00 64 FD | 	ret
23238                 | 
23238                 | __system___usepins
23238     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2323c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23240     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
23244     00 13 CA F7 | 	test	arg01, _var01 wz
23248     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2324c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23250     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
23254     01 15 CA A7 |  if_e	test	arg02, _var02 wz
23258     00 FA 05 56 |  if_ne	mov	result1, #0
2325c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23260     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23264     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23268     09 03 42 F5 | 	or	_var02, arg01
2326c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23270     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23274     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23278     0A 03 42 F5 | 	or	_var02, arg02
2327c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23280     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23284     01 FA 65 F6 | 	neg	result1, #1
23288                 | __system___usepins_ret
23288     2D 00 64 FD | 	ret
2328c                 | 
2328c                 | __system___freepins
2328c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23290     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23294     09 01 22 F5 | 	andn	_var01, arg01
23298     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2329c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
232a0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
232a4     0A 01 22 F5 | 	andn	_var01, arg02
232a8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
232ac     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
232b0                 | __system___freepins_ret
232b0     2D 00 64 FD | 	ret
232b4                 | 
232b4                 | __system___float_fromuns
232b4     09 17 0A F6 | 	mov	arg03, arg01 wz
232b8     0B FB 01 A6 |  if_e	mov	result1, arg03
232bc     24 00 90 AD |  if_e	jmp	#LR__3220
232c0     0B 15 92 F7 | 	encod	arg02, arg03 wc
232c4     01 14 06 C1 |  if_b	add	arg02, #1
232c8     01 14 86 F1 | 	sub	arg02, #1
232cc     1F 12 06 F6 | 	mov	arg01, #31
232d0     0A 13 82 F1 | 	sub	arg01, arg02
232d4     09 17 62 F0 | 	shl	arg03, arg01
232d8     02 16 46 F0 | 	shr	arg03, #2
232dc     00 12 06 F6 | 	mov	arg01, #0
232e0     4C 09 B0 FD | 	call	#__system___float_Pack
232e4                 | LR__3220
232e4                 | __system___float_fromuns_ret
232e4     2D 00 64 FD | 	ret
232e8                 | 
232e8                 | __system___float_add
232e8     0F 4A 05 F6 | 	mov	COUNT_, #15
232ec     A8 00 A0 FD | 	call	#pushregs_
232f0     09 1F 02 F6 | 	mov	local01, arg01
232f4     0A 21 02 F6 | 	mov	local02, arg02
232f8     00 22 06 F6 | 	mov	local03, #0
232fc     0F 25 02 F6 | 	mov	local04, local01
23300     12 27 02 F6 | 	mov	local05, local04
23304     16 26 46 F7 | 	zerox	local05, #22
23308     12 29 02 F6 | 	mov	local06, local04
2330c     01 28 66 F0 | 	shl	local06, #1
23310     18 28 46 F0 | 	shr	local06, #24
23314     1F 24 46 F0 | 	shr	local04, #31
23318     10 13 02 F6 | 	mov	arg01, local02
2331c     09 FB 01 F6 | 	mov	result1, arg01
23320     FD 2A 02 F6 | 	mov	local07, result1
23324     15 2D 02 F6 | 	mov	local08, local07
23328     16 2C 46 F7 | 	zerox	local08, #22
2332c     15 2F 02 F6 | 	mov	local09, local07
23330     01 2E 66 F0 | 	shl	local09, #1
23334     18 2E 46 F0 | 	shr	local09, #24
23338     17 31 02 F6 | 	mov	local10, local09
2333c     1F 2A 46 F0 | 	shr	local07, #31
23340     00 32 06 F6 | 	mov	local11, #0
23344     00 34 06 F6 | 	mov	local12, #0
23348     18 29 12 F2 | 	cmp	local06, local10 wc
2334c     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23350     2C 00 90 1D |  if_a	jmp	#LR__3230
23354     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23358     24 00 90 3D |  if_ae	jmp	#LR__3230
2335c     13 37 02 F6 | 	mov	local13, local05
23360     16 27 02 F6 | 	mov	local05, local08
23364     1B 2D 02 F6 | 	mov	local08, local13
23368     14 37 02 F6 | 	mov	local13, local06
2336c     18 29 02 F6 | 	mov	local06, local10
23370     1B 31 02 F6 | 	mov	local10, local13
23374     12 37 02 F6 | 	mov	local13, local04
23378     15 25 02 F6 | 	mov	local04, local07
2337c     1B 2B 02 F6 | 	mov	local07, local13
23380                 | LR__3230
23380     FF 28 0E F2 | 	cmp	local06, #255 wz
23384     70 01 90 AD |  if_e	jmp	#LR__3245
23388     00 28 0E F2 | 	cmp	local06, #0 wz
2338c     AC 01 90 AD |  if_e	jmp	#LR__3247
23390     17 26 26 F4 | 	bith	local05, #23
23394                 | LR__3231
23394     00 30 0E F2 | 	cmp	local10, #0 wz
23398     F0 01 90 AD |  if_e	jmp	#LR__3251
2339c     17 2C 26 F4 | 	bith	local08, #23
233a0                 | LR__3232
233a0     7F 28 86 F1 | 	sub	local06, #127
233a4     7F 30 86 F1 | 	sub	local10, #127
233a8     14 39 02 F6 | 	mov	local14, local06
233ac     18 39 82 F1 | 	sub	local14, local10
233b0     97 14 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
233b4                 | LR__3233
233b4     20 38 56 F2 | 	cmps	local14, #32 wc
233b8     20 00 90 CD |  if_b	jmp	#LR__3235
233bc     16 2F 02 F6 | 	mov	local09, local08
233c0     00 32 0E F2 | 	cmp	local11, #0 wz
233c4     6F 32 62 FD | 	wrnz	local11
233c8     19 2F 42 F5 | 	or	local09, local11
233cc     17 33 02 F6 | 	mov	local11, local09
233d0     00 2C 06 F6 | 	mov	local08, #0
233d4     20 38 86 F1 | 	sub	local14, #32
233d8     D8 FF 9F FD | 	jmp	#LR__3233
233dc                 | LR__3234
233dc                 | LR__3235
233dc     00 38 0E F2 | 	cmp	local14, #0 wz
233e0     38 00 90 AD |  if_e	jmp	#LR__3236
233e4     16 37 02 F6 | 	mov	local13, local08
233e8     20 30 06 F6 | 	mov	local10, #32
233ec     1C 31 82 F1 | 	sub	local10, local14
233f0     18 37 62 F0 | 	shl	local13, local10
233f4     19 31 02 F6 | 	mov	local10, local11
233f8     20 2E 06 F6 | 	mov	local09, #32
233fc     1C 2F 82 F1 | 	sub	local09, local14
23400     17 31 6A F0 | 	shl	local10, local09 wz
23404     1C 33 42 F0 | 	shr	local11, local14
23408     1C 2D 42 F0 | 	shr	local08, local14
2340c     1B 33 42 F5 | 	or	local11, local13
23410     00 3A 06 F6 | 	mov	local15, #0
23414     01 3A 06 56 |  if_ne	mov	local15, #1
23418     1D 33 42 F5 | 	or	local11, local15
2341c                 | LR__3236
2341c     12 3B 02 F6 | 	mov	local15, local04
23420     15 3B 62 F5 | 	xor	local15, local07
23424     01 3A CE F7 | 	test	local15, #1 wz
23428     18 00 90 AD |  if_e	jmp	#LR__3237
2342c     16 2D 22 F6 | 	not	local08, local08
23430     19 33 22 F6 | 	not	local11, local11
23434     01 32 0E F1 | 	add	local11, #1 wz
23438     00 3A 06 F6 | 	mov	local15, #0
2343c     01 3A 06 A6 |  if_e	mov	local15, #1
23440     1D 2D 02 F1 | 	add	local08, local15
23444                 | LR__3237
23444     19 35 12 F1 | 	add	local12, local11 wc
23448     16 27 22 F1 | 	addx	local05, local08
2344c     00 26 56 F2 | 	cmps	local05, #0 wc
23450     1C 00 90 3D |  if_ae	jmp	#LR__3238
23454     01 24 66 F5 | 	xor	local04, #1
23458     13 27 22 F6 | 	not	local05, local05
2345c     1A 35 22 F6 | 	not	local12, local12
23460     01 34 0E F1 | 	add	local12, #1 wz
23464     00 3A 06 F6 | 	mov	local15, #0
23468     01 3A 06 A6 |  if_e	mov	local15, #1
2346c     1D 27 02 F1 | 	add	local05, local15
23470                 | LR__3238
23470     00 80 00 FF 
23474     00 26 16 F2 | 	cmp	local05, ##16777216 wc
23478     28 00 90 CD |  if_b	jmp	#LR__3239
2347c     01 28 06 F1 | 	add	local06, #1
23480     1A 39 02 F6 | 	mov	local14, local12
23484     01 38 06 F5 | 	and	local14, #1
23488     01 34 46 F0 | 	shr	local12, #1
2348c     13 3B 02 F6 | 	mov	local15, local05
23490     1F 3A 66 F0 | 	shl	local15, #31
23494     1D 35 42 F5 | 	or	local12, local15
23498     1C 35 42 F5 | 	or	local12, local14
2349c     01 26 46 F0 | 	shr	local05, #1
234a0     3C 00 90 FD | 	jmp	#LR__3244
234a4                 | LR__3239
234a4     00 40 00 FF 
234a8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
234ac     30 00 90 3D |  if_ae	jmp	#LR__3243
234b0     00 26 0E F2 | 	cmp	local05, #0 wz
234b4     00 34 0E A2 |  if_e	cmp	local12, #0 wz
234b8     08 24 46 A5 |  if_e	or	local04, #8
234bc     01 24 26 A5 |  if_e	andn	local04, #1
234c0     1C 00 90 AD |  if_e	jmp	#LR__3242
234c4                 | LR__3240
234c4     00 40 00 FF 
234c8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
234cc     10 00 90 3D |  if_ae	jmp	#LR__3241
234d0     1A 35 12 F1 | 	add	local12, local12 wc
234d4     13 27 22 F1 | 	addx	local05, local05
234d8     01 28 86 F1 | 	sub	local06, #1
234dc     E4 FF 9F FD | 	jmp	#LR__3240
234e0                 | LR__3241
234e0                 | LR__3242
234e0                 | LR__3243
234e0                 | LR__3244
234e0     13 13 02 F6 | 	mov	arg01, local05
234e4     1A 15 02 F6 | 	mov	arg02, local12
234e8     14 17 02 F6 | 	mov	arg03, local06
234ec     12 19 02 F6 | 	mov	arg04, local04
234f0     08 35 B0 FD | 	call	#__system__pack_0606
234f4     DC 00 90 FD | 	jmp	#LR__3255
234f8                 | LR__3245
234f8     FF 30 0E F2 | 	cmp	local10, #255 wz
234fc     10 00 90 5D |  if_ne	jmp	#LR__3246
23500     12 2B 0A F2 | 	cmp	local07, local04 wz
23504     00 F8 3F 5F 
23508     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2350c     C4 00 90 5D |  if_ne	jmp	#LR__3255
23510                 | LR__3246
23510     00 26 0E F2 | 	cmp	local05, #0 wz
23514     00 F8 3F 5F 
23518     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2351c     B4 00 90 5D |  if_ne	jmp	#LR__3255
23520     1A 15 02 F6 | 	mov	arg02, local12
23524     14 17 02 F6 | 	mov	arg03, local06
23528     12 19 02 F6 | 	mov	arg04, local04
2352c     02 18 46 F5 | 	or	arg04, #2
23530     13 13 02 F6 | 	mov	arg01, local05
23534     C4 34 B0 FD | 	call	#__system__pack_0606
23538     98 00 90 FD | 	jmp	#LR__3255
2353c                 | LR__3247
2353c     00 26 0E F2 | 	cmp	local05, #0 wz
23540     28 00 90 AD |  if_e	jmp	#LR__3250
23544     01 26 66 F0 | 	shl	local05, #1
23548     97 0E 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
2354c                 | LR__3248
2354c     00 40 00 FF 
23550     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23554     14 3B 02 C6 |  if_b	mov	local15, local06
23558     01 3A 86 C1 |  if_b	sub	local15, #1
2355c     1D 29 02 C6 |  if_b	mov	local06, local15
23560     01 26 66 C0 |  if_b	shl	local05, #1
23564     E4 FF 9F CD |  if_b	jmp	#LR__3248
23568                 | LR__3249
23568     28 FE 9F FD | 	jmp	#LR__3231
2356c                 | LR__3250
2356c     15 25 02 F5 | 	and	local04, local07
23570     12 19 02 F6 | 	mov	arg04, local04
23574     08 18 46 F5 | 	or	arg04, #8
23578     00 12 06 F6 | 	mov	arg01, #0
2357c     00 14 06 F6 | 	mov	arg02, #0
23580     00 16 06 F6 | 	mov	arg03, #0
23584     74 34 B0 FD | 	call	#__system__pack_0606
23588     48 00 90 FD | 	jmp	#LR__3255
2358c                 | LR__3251
2358c     00 2C 0E F2 | 	cmp	local08, #0 wz
23590     28 00 90 AD |  if_e	jmp	#LR__3254
23594     01 2C 66 F0 | 	shl	local08, #1
23598     97 0E 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
2359c                 | LR__3252
2359c     00 40 00 FF 
235a0     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
235a4     18 3B 02 C6 |  if_b	mov	local15, local10
235a8     01 3A 86 C1 |  if_b	sub	local15, #1
235ac     1D 31 02 C6 |  if_b	mov	local10, local15
235b0     01 2C 66 C0 |  if_b	shl	local08, #1
235b4     E4 FF 9F CD |  if_b	jmp	#LR__3252
235b8                 | LR__3253
235b8     E4 FD 9F FD | 	jmp	#LR__3232
235bc                 | LR__3254
235bc     7F 28 86 F1 | 	sub	local06, #127
235c0     13 13 02 F6 | 	mov	arg01, local05
235c4     1A 15 02 F6 | 	mov	arg02, local12
235c8     14 17 02 F6 | 	mov	arg03, local06
235cc     12 19 02 F6 | 	mov	arg04, local04
235d0     28 34 B0 FD | 	call	#__system__pack_0606
235d4                 | LR__3255
235d4     A7 F0 03 F6 | 	mov	ptra, fp
235d8     B2 00 A0 FD | 	call	#popregs_
235dc                 | __system___float_add_ret
235dc     2D 00 64 FD | 	ret
235e0                 | 
235e0                 | __system___float_sqrt
235e0     04 4A 05 F6 | 	mov	COUNT_, #4
235e4     A8 00 A0 FD | 	call	#pushregs_
235e8     09 1F 02 F6 | 	mov	local01, arg01
235ec     09 FB 01 F6 | 	mov	result1, arg01
235f0     FD 20 02 F6 | 	mov	local02, result1
235f4     10 23 02 F6 | 	mov	local03, local02
235f8     16 22 46 F7 | 	zerox	local03, #22
235fc     10 25 02 F6 | 	mov	local04, local02
23600     01 24 66 F0 | 	shl	local04, #1
23604     18 24 4E F0 | 	shr	local04, #24 wz
23608     1F 20 46 F0 | 	shr	local02, #31
2360c     70 00 90 AD |  if_e	jmp	#LR__3261
23610     17 22 26 F4 | 	bith	local03, #23
23614                 | LR__3260
23614     00 20 0E F2 | 	cmp	local02, #0 wz
23618     00 F8 3F 5F 
2361c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23620     88 00 90 5D |  if_ne	jmp	#LR__3264
23624     FF 24 0E F2 | 	cmp	local04, #255 wz
23628     0F FB 01 A6 |  if_e	mov	result1, local01
2362c     7C 00 90 AD |  if_e	jmp	#LR__3264
23630     7F 24 86 F1 | 	sub	local04, #127
23634     01 24 CE F7 | 	test	local04, #1 wz
23638     01 22 66 50 |  if_ne	shl	local03, #1
2363c     05 22 66 F0 | 	shl	local03, #5
23640     11 01 38 FD | 	qsqrt	#0, local03
23644     01 24 86 51 |  if_ne	sub	local04, #1
23648     12 25 52 F6 | 	abs	local04, local04 wc
2364c     01 24 46 F0 | 	shr	local04, #1
23650     12 17 82 F6 | 	negc	arg03, local04
23654     10 19 02 F6 | 	mov	arg04, local02
23658     18 12 62 FD | 	getqx	arg01
2365c     09 15 02 F6 | 	mov	arg02, arg01
23660     19 14 66 F0 | 	shl	arg02, #25
23664     07 12 46 F0 | 	shr	arg01, #7
23668     00 80 00 FF 
2366c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
23670     01 16 06 31 |  if_ae	add	arg03, #1
23674     01 12 46 30 |  if_ae	shr	arg01, #1
23678     80 33 B0 FD | 	call	#__system__pack_0606
2367c     2C 00 90 FD | 	jmp	#LR__3264
23680                 | LR__3261
23680     00 22 0E F2 | 	cmp	local03, #0 wz
23684     0F FB 01 A6 |  if_e	mov	result1, local01
23688     20 00 90 AD |  if_e	jmp	#LR__3264
2368c     01 22 66 F0 | 	shl	local03, #1
23690     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
23694                 | LR__3262
23694     00 40 00 FF 
23698     00 22 16 F2 | 	cmp	local03, ##8388608 wc
2369c     01 24 86 C1 |  if_b	sub	local04, #1
236a0     01 22 66 C0 |  if_b	shl	local03, #1
236a4     EC FF 9F CD |  if_b	jmp	#LR__3262
236a8                 | LR__3263
236a8     68 FF 9F FD | 	jmp	#LR__3260
236ac                 | LR__3264
236ac     A7 F0 03 F6 | 	mov	ptra, fp
236b0     B2 00 A0 FD | 	call	#popregs_
236b4                 | __system___float_sqrt_ret
236b4     2D 00 64 FD | 	ret
236b8                 | 
236b8                 | __system___float_mul
236b8     0B 4A 05 F6 | 	mov	COUNT_, #11
236bc     A8 00 A0 FD | 	call	#pushregs_
236c0     09 1F 02 F6 | 	mov	local01, arg01
236c4     0A 21 02 F6 | 	mov	local02, arg02
236c8     0F 23 02 F6 | 	mov	local03, local01
236cc     11 25 02 F6 | 	mov	local04, local03
236d0     16 24 46 F7 | 	zerox	local04, #22
236d4     11 27 02 F6 | 	mov	local05, local03
236d8     01 26 66 F0 | 	shl	local05, #1
236dc     18 26 46 F0 | 	shr	local05, #24
236e0     1F 22 46 F0 | 	shr	local03, #31
236e4     10 FB 01 F6 | 	mov	result1, local02
236e8     FD 28 02 F6 | 	mov	local06, result1
236ec     14 2B 02 F6 | 	mov	local07, local06
236f0     16 2A 46 F7 | 	zerox	local07, #22
236f4     14 2D 02 F6 | 	mov	local08, local06
236f8     01 2C 66 F0 | 	shl	local08, #1
236fc     18 2C 46 F0 | 	shr	local08, #24
23700     1F 28 46 F0 | 	shr	local06, #31
23704     14 23 62 F5 | 	xor	local03, local06
23708     FF 26 0E F2 | 	cmp	local05, #255 wz
2370c     90 00 90 AD |  if_e	jmp	#LR__3273
23710     FF 2C 0E F2 | 	cmp	local08, #255 wz
23714     D8 00 90 AD |  if_e	jmp	#LR__3275
23718     00 26 0E F2 | 	cmp	local05, #0 wz
2371c     0C 01 90 AD |  if_e	jmp	#LR__3276
23720     17 24 26 F4 | 	bith	local04, #23
23724                 | LR__3270
23724     00 2C 0E F2 | 	cmp	local08, #0 wz
23728     44 01 90 AD |  if_e	jmp	#LR__3280
2372c     17 2A 26 F4 | 	bith	local07, #23
23730                 | LR__3271
23730     12 21 02 F6 | 	mov	local02, local04
23734     04 20 66 F0 | 	shl	local02, #4
23738     15 29 02 F6 | 	mov	local06, local07
2373c     05 28 66 F0 | 	shl	local06, #5
23740     14 21 02 FD | 	qmul	local02, local06
23744     16 27 02 F1 | 	add	local05, local08
23748     FE 26 86 F1 | 	sub	local05, #254
2374c     13 2F 02 F6 | 	mov	local09, local05
23750     04 24 66 F0 | 	shl	local04, #4
23754     05 2A 66 F0 | 	shl	local07, #5
23758     18 30 62 FD | 	getqx	local10
2375c     15 25 02 FD | 	qmul	local04, local07
23760     19 32 62 FD | 	getqy	local11
23764     00 80 00 FF 
23768     00 32 16 F2 | 	cmp	local11, ##16777216 wc
2376c     18 00 90 CD |  if_b	jmp	#LR__3272
23770     01 2E 06 F1 | 	add	local09, #1
23774     01 30 46 F0 | 	shr	local10, #1
23778     19 2D 02 F6 | 	mov	local08, local11
2377c     1F 2C 66 F0 | 	shl	local08, #31
23780     16 31 42 F5 | 	or	local10, local08
23784     01 32 46 F0 | 	shr	local11, #1
23788                 | LR__3272
23788     19 13 02 F6 | 	mov	arg01, local11
2378c     18 15 02 F6 | 	mov	arg02, local10
23790     17 17 02 F6 | 	mov	arg03, local09
23794     11 19 02 F6 | 	mov	arg04, local03
23798     60 32 B0 FD | 	call	#__system__pack_0606
2379c     10 01 90 FD | 	jmp	#LR__3284
237a0                 | LR__3273
237a0     00 24 0E F2 | 	cmp	local04, #0 wz
237a4     0F FB 01 56 |  if_ne	mov	result1, local01
237a8     04 01 90 5D |  if_ne	jmp	#LR__3284
237ac     FF 2C 56 F2 | 	cmps	local08, #255 wc
237b0     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
237b4     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
237b8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3274
237bc     00 F8 3F CF 
237c0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
237c4     E8 00 90 CD |  if_b	jmp	#LR__3284
237c8     00 2A 0E F2 | 	cmp	local07, #0 wz
237cc     10 FB 01 56 |  if_ne	mov	result1, local02
237d0     DC 00 90 5D |  if_ne	jmp	#LR__3284
237d4                 | LR__3274
237d4     02 22 46 F5 | 	or	local03, #2
237d8     00 12 06 F6 | 	mov	arg01, #0
237dc     00 14 06 F6 | 	mov	arg02, #0
237e0     13 17 02 F6 | 	mov	arg03, local05
237e4     11 19 02 F6 | 	mov	arg04, local03
237e8     10 32 B0 FD | 	call	#__system__pack_0606
237ec     C0 00 90 FD | 	jmp	#LR__3284
237f0                 | LR__3275
237f0     00 26 0E F2 | 	cmp	local05, #0 wz
237f4     00 24 0E A2 |  if_e	cmp	local04, #0 wz
237f8     00 F8 3F AF 
237fc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23800     AC 00 90 AD |  if_e	jmp	#LR__3284
23804     00 2A 0E F2 | 	cmp	local07, #0 wz
23808     10 FB 01 56 |  if_ne	mov	result1, local02
2380c     A0 00 90 5D |  if_ne	jmp	#LR__3284
23810     16 17 02 F6 | 	mov	arg03, local08
23814     11 19 02 F6 | 	mov	arg04, local03
23818     02 18 46 F5 | 	or	arg04, #2
2381c     00 12 06 F6 | 	mov	arg01, #0
23820     00 14 06 F6 | 	mov	arg02, #0
23824     D4 31 B0 FD | 	call	#__system__pack_0606
23828     84 00 90 FD | 	jmp	#LR__3284
2382c                 | LR__3276
2382c     00 24 0E F2 | 	cmp	local04, #0 wz
23830     20 00 90 AD |  if_e	jmp	#LR__3279
23834     01 24 66 F0 | 	shl	local04, #1
23838     97 0A 48 FB | 	callpa	#(@LR__3278-@LR__3277)>>2,fcache_load_ptr_
2383c                 | LR__3277
2383c     00 40 00 FF 
23840     00 24 16 F2 | 	cmp	local04, ##8388608 wc
23844     01 26 86 C1 |  if_b	sub	local05, #1
23848     01 24 66 C0 |  if_b	shl	local04, #1
2384c     EC FF 9F CD |  if_b	jmp	#LR__3277
23850                 | LR__3278
23850     D0 FE 9F FD | 	jmp	#LR__3270
23854                 | LR__3279
23854     08 22 46 F5 | 	or	local03, #8
23858     00 12 06 F6 | 	mov	arg01, #0
2385c     00 14 06 F6 | 	mov	arg02, #0
23860     00 16 06 F6 | 	mov	arg03, #0
23864     11 19 02 F6 | 	mov	arg04, local03
23868     90 31 B0 FD | 	call	#__system__pack_0606
2386c     40 00 90 FD | 	jmp	#LR__3284
23870                 | LR__3280
23870     00 2A 0E F2 | 	cmp	local07, #0 wz
23874     20 00 90 AD |  if_e	jmp	#LR__3283
23878     01 2A 66 F0 | 	shl	local07, #1
2387c     97 0A 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
23880                 | LR__3281
23880     00 40 00 FF 
23884     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
23888     01 2C 86 C1 |  if_b	sub	local08, #1
2388c     01 2A 66 C0 |  if_b	shl	local07, #1
23890     EC FF 9F CD |  if_b	jmp	#LR__3281
23894                 | LR__3282
23894     98 FE 9F FD | 	jmp	#LR__3271
23898                 | LR__3283
23898     08 22 46 F5 | 	or	local03, #8
2389c     00 12 06 F6 | 	mov	arg01, #0
238a0     00 14 06 F6 | 	mov	arg02, #0
238a4     00 16 06 F6 | 	mov	arg03, #0
238a8     11 19 02 F6 | 	mov	arg04, local03
238ac     4C 31 B0 FD | 	call	#__system__pack_0606
238b0                 | LR__3284
238b0     A7 F0 03 F6 | 	mov	ptra, fp
238b4     B2 00 A0 FD | 	call	#popregs_
238b8                 | __system___float_mul_ret
238b8     2D 00 64 FD | 	ret
238bc                 | 
238bc                 | __system___float_div
238bc     0E 4A 05 F6 | 	mov	COUNT_, #14
238c0     A8 00 A0 FD | 	call	#pushregs_
238c4     09 23 02 F6 | 	mov	local03, arg01
238c8     0A 25 02 F6 | 	mov	local04, arg02
238cc     11 27 02 F6 | 	mov	local05, local03
238d0     13 29 02 F6 | 	mov	local06, local05
238d4     16 28 46 F7 | 	zerox	local06, #22
238d8     13 2B 02 F6 | 	mov	local07, local05
238dc     01 2A 66 F0 | 	shl	local07, #1
238e0     18 2A 46 F0 | 	shr	local07, #24
238e4     1F 26 46 F0 | 	shr	local05, #31
238e8     12 FB 01 F6 | 	mov	result1, local04
238ec     FD 2C 02 F6 | 	mov	local08, result1
238f0     16 2F 02 F6 | 	mov	local09, local08
238f4     16 2E 46 F7 | 	zerox	local09, #22
238f8     16 31 02 F6 | 	mov	local10, local08
238fc     01 30 66 F0 | 	shl	local10, #1
23900     18 30 46 F0 | 	shr	local10, #24
23904     1F 2C 46 F0 | 	shr	local08, #31
23908     16 27 62 F5 | 	xor	local05, local08
2390c     FF 2A 0E F2 | 	cmp	local07, #255 wz
23910     D4 00 90 AD |  if_e	jmp	#LR__3295
23914     FF 30 0E F2 | 	cmp	local10, #255 wz
23918     04 01 90 AD |  if_e	jmp	#LR__3296
2391c     00 2A 0E F2 | 	cmp	local07, #0 wz
23920     24 01 90 AD |  if_e	jmp	#LR__3297
23924     17 28 26 F4 | 	bith	local06, #23
23928                 | LR__3290
23928     00 30 0E F2 | 	cmp	local10, #0 wz
2392c     70 01 90 AD |  if_e	jmp	#LR__3301
23930     17 2E 26 F4 | 	bith	local09, #23
23934                 | LR__3291
23934     18 2B 82 F1 | 	sub	local07, local10
23938     15 33 02 F6 | 	mov	local11, local07
2393c     14 13 02 F6 | 	mov	arg01, local06
23940     02 12 46 F0 | 	shr	arg01, #2
23944     1E 28 66 F0 | 	shl	local06, #30
23948     14 15 02 F6 | 	mov	arg02, local06
2394c     17 17 02 F6 | 	mov	arg03, local09
23950     28 12 62 FD | 	setq	arg01
23954     0B 15 12 FD | 	qdiv	arg02, arg03
23958     00 34 06 F6 | 	mov	local12, #0
2395c     18 1E 62 FD | 	getqx	local01
23960     19 FC 61 FD | 	getqy	result2
23964     FE 20 02 F6 | 	mov	local02, result2
23968     0F 37 02 F6 | 	mov	local13, local01
2396c     00 20 4E F2 | 	cmps	local02, #0 wz
23970     1B 39 02 F6 | 	mov	local14, local13
23974     19 38 66 F0 | 	shl	local14, #25
23978     01 34 06 56 |  if_ne	mov	local12, #1
2397c     1A 39 42 F5 | 	or	local14, local12
23980     07 36 46 F0 | 	shr	local13, #7
23984     00 80 00 FF 
23988     00 36 16 F2 | 	cmp	local13, ##16777216 wc
2398c     1C 00 90 CD |  if_b	jmp	#LR__3292
23990     01 32 06 F1 | 	add	local11, #1
23994     01 38 46 F0 | 	shr	local14, #1
23998     1B 35 02 F6 | 	mov	local12, local13
2399c     1F 34 66 F0 | 	shl	local12, #31
239a0     1A 39 42 F5 | 	or	local14, local12
239a4     01 36 46 F0 | 	shr	local13, #1
239a8     24 00 90 FD | 	jmp	#LR__3294
239ac                 | LR__3292
239ac     00 40 00 FF 
239b0     00 36 16 F2 | 	cmp	local13, ##8388608 wc
239b4     18 00 90 3D |  if_ae	jmp	#LR__3293
239b8     01 32 86 F1 | 	sub	local11, #1
239bc     01 36 66 F0 | 	shl	local13, #1
239c0     1C 35 02 F6 | 	mov	local12, local14
239c4     1F 34 46 F0 | 	shr	local12, #31
239c8     1A 37 42 F5 | 	or	local13, local12
239cc     01 38 66 F0 | 	shl	local14, #1
239d0                 | LR__3293
239d0                 | LR__3294
239d0     1B 13 02 F6 | 	mov	arg01, local13
239d4     1C 15 02 F6 | 	mov	arg02, local14
239d8     19 17 02 F6 | 	mov	arg03, local11
239dc     13 19 02 F6 | 	mov	arg04, local05
239e0     18 30 B0 FD | 	call	#__system__pack_0606
239e4     F8 00 90 FD | 	jmp	#LR__3305
239e8                 | LR__3295
239e8     00 28 0E F2 | 	cmp	local06, #0 wz
239ec     11 FB 01 56 |  if_ne	mov	result1, local03
239f0     EC 00 90 5D |  if_ne	jmp	#LR__3305
239f4     FF 30 0E F2 | 	cmp	local10, #255 wz
239f8     00 F8 3F AF 
239fc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23a00     DC 00 90 AD |  if_e	jmp	#LR__3305
23a04     02 26 46 F5 | 	or	local05, #2
23a08     00 12 06 F6 | 	mov	arg01, #0
23a0c     00 14 06 F6 | 	mov	arg02, #0
23a10     15 17 02 F6 | 	mov	arg03, local07
23a14     13 19 02 F6 | 	mov	arg04, local05
23a18     E0 2F B0 FD | 	call	#__system__pack_0606
23a1c     C0 00 90 FD | 	jmp	#LR__3305
23a20                 | LR__3296
23a20     00 2E 0E F2 | 	cmp	local09, #0 wz
23a24     12 FB 01 56 |  if_ne	mov	result1, local04
23a28     B4 00 90 5D |  if_ne	jmp	#LR__3305
23a2c     13 19 02 F6 | 	mov	arg04, local05
23a30     08 18 46 F5 | 	or	arg04, #8
23a34     00 12 06 F6 | 	mov	arg01, #0
23a38     00 14 06 F6 | 	mov	arg02, #0
23a3c     00 16 06 F6 | 	mov	arg03, #0
23a40     B8 2F B0 FD | 	call	#__system__pack_0606
23a44     98 00 90 FD | 	jmp	#LR__3305
23a48                 | LR__3297
23a48     00 28 0E F2 | 	cmp	local06, #0 wz
23a4c     20 00 90 AD |  if_e	jmp	#LR__3300
23a50     01 28 66 F0 | 	shl	local06, #1
23a54     97 0A 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
23a58                 | LR__3298
23a58     00 40 00 FF 
23a5c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
23a60     01 2A 86 C1 |  if_b	sub	local07, #1
23a64     01 28 66 C0 |  if_b	shl	local06, #1
23a68     EC FF 9F CD |  if_b	jmp	#LR__3298
23a6c                 | LR__3299
23a6c     B8 FE 9F FD | 	jmp	#LR__3290
23a70                 | LR__3300
23a70     00 30 0E F2 | 	cmp	local10, #0 wz
23a74     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
23a78     00 F8 3F AF 
23a7c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23a80     5C 00 90 AD |  if_e	jmp	#LR__3305
23a84     13 19 02 F6 | 	mov	arg04, local05
23a88     08 18 46 F5 | 	or	arg04, #8
23a8c     00 12 06 F6 | 	mov	arg01, #0
23a90     00 14 06 F6 | 	mov	arg02, #0
23a94     00 16 06 F6 | 	mov	arg03, #0
23a98     60 2F B0 FD | 	call	#__system__pack_0606
23a9c     40 00 90 FD | 	jmp	#LR__3305
23aa0                 | LR__3301
23aa0     00 2E 0E F2 | 	cmp	local09, #0 wz
23aa4     20 00 90 AD |  if_e	jmp	#LR__3304
23aa8     01 2E 66 F0 | 	shl	local09, #1
23aac     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
23ab0                 | LR__3302
23ab0     00 40 00 FF 
23ab4     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
23ab8     01 30 86 C1 |  if_b	sub	local10, #1
23abc     01 2E 66 C0 |  if_b	shl	local09, #1
23ac0     EC FF 9F CD |  if_b	jmp	#LR__3302
23ac4                 | LR__3303
23ac4     6C FE 9F FD | 	jmp	#LR__3291
23ac8                 | LR__3304
23ac8     02 26 46 F5 | 	or	local05, #2
23acc     00 12 06 F6 | 	mov	arg01, #0
23ad0     00 14 06 F6 | 	mov	arg02, #0
23ad4     00 16 06 F6 | 	mov	arg03, #0
23ad8     13 19 02 F6 | 	mov	arg04, local05
23adc     1C 2F B0 FD | 	call	#__system__pack_0606
23ae0                 | LR__3305
23ae0     A7 F0 03 F6 | 	mov	ptra, fp
23ae4     B2 00 A0 FD | 	call	#popregs_
23ae8                 | __system___float_div_ret
23ae8     2D 00 64 FD | 	ret
23aec                 | 
23aec                 | __system___float_cmp
23aec     00 C0 3F FF 
23af0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23af4     00 C0 3F CF 
23af8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23afc     0B FB 01 36 |  if_ae	mov	result1, arg03
23b00     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23b04     00 C0 7F FF 
23b08     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23b0c     00 C0 7F CF 
23b10     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23b14     0B FB 01 36 |  if_ae	mov	result1, arg03
23b18     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23b1c     00 12 56 F2 | 	cmps	arg01, #0 wc
23b20     2C 00 90 3D |  if_ae	jmp	#LR__3310
23b24     00 14 56 F2 | 	cmps	arg02, #0 wc
23b28     0A FB 01 C6 |  if_b	mov	result1, arg02
23b2c     09 FB 81 C1 |  if_b	sub	result1, arg01
23b30     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23b34     00 14 0E F2 | 	cmp	arg02, #0 wz
23b38     00 00 40 AF 
23b3c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23b40     00 FA 05 A6 |  if_e	mov	result1, #0
23b44     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23b48     01 FA 65 F6 | 	neg	result1, #1
23b4c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23b50                 | LR__3310
23b50     00 14 56 F2 | 	cmps	arg02, #0 wc
23b54     1C 00 90 3D |  if_ae	jmp	#LR__3311
23b58     00 12 0E F2 | 	cmp	arg01, #0 wz
23b5c     00 00 40 AF 
23b60     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23b64     00 FA 05 A6 |  if_e	mov	result1, #0
23b68     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23b6c     01 FA 05 F6 | 	mov	result1, #1
23b70     08 00 90 FD | 	jmp	#__system___float_cmp_ret
23b74                 | LR__3311
23b74     0A 13 82 F1 | 	sub	arg01, arg02
23b78     09 FB 01 F6 | 	mov	result1, arg01
23b7c                 | __system___float_cmp_ret
23b7c     2D 00 64 FD | 	ret
23b80                 | 
23b80                 | __system___float_tointeger
23b80     02 4A 05 F6 | 	mov	COUNT_, #2
23b84     A8 00 A0 FD | 	call	#pushregs_
23b88     50 00 B0 FD | 	call	#__system___float_Unpack
23b8c     FF FF 7F FF 
23b90     FF FD 55 F2 | 	cmps	result2, ##-1 wc
23b94     34 00 90 CD |  if_b	jmp	#LR__3320
23b98     1F FC 55 F2 | 	cmps	result2, #31 wc
23b9c     2C 00 90 3D |  if_ae	jmp	#LR__3320
23ba0     02 FE 65 F0 | 	shl	result3, #2
23ba4     1E 1E 06 F6 | 	mov	local01, #30
23ba8     FE 1E 82 F1 | 	sub	local01, result2
23bac     0F FF 41 F0 | 	shr	result3, local01
23bb0     FF 20 02 F6 | 	mov	local02, result3
23bb4     0A 21 02 F1 | 	add	local02, arg02
23bb8     01 20 46 F0 | 	shr	local02, #1
23bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
23bc0     10 21 62 56 |  if_ne	neg	local02, local02
23bc4     10 FB 01 F6 | 	mov	result1, local02
23bc8     04 00 90 FD | 	jmp	#LR__3321
23bcc                 | LR__3320
23bcc     00 FA 05 F6 | 	mov	result1, #0
23bd0                 | LR__3321
23bd0     A7 F0 03 F6 | 	mov	ptra, fp
23bd4     B2 00 A0 FD | 	call	#popregs_
23bd8                 | __system___float_tointeger_ret
23bd8     2D 00 64 FD | 	ret
23bdc                 | 
23bdc                 | __system___float_Unpack
23bdc     09 01 02 F6 | 	mov	_var01, arg01
23be0     1F 00 46 F0 | 	shr	_var01, #31
23be4     09 03 02 F6 | 	mov	_var02, arg01
23be8     01 02 66 F0 | 	shl	_var02, #1
23bec     18 02 4E F0 | 	shr	_var02, #24 wz
23bf0     17 13 06 F4 | 	bitl	arg01, #279
23bf4     06 12 66 50 |  if_ne	shl	arg01, #6
23bf8     1D 12 26 54 |  if_ne	bith	arg01, #29
23bfc     1C 00 90 5D |  if_ne	jmp	#LR__3330
23c00     09 05 92 F7 | 	encod	_var03, arg01 wc
23c04     01 04 06 C1 |  if_b	add	_var03, #1
23c08     17 04 86 F1 | 	sub	_var03, #23
23c0c     02 03 02 F6 | 	mov	_var02, _var03
23c10     07 FC 05 F6 | 	mov	result2, #7
23c14     02 FD 81 F1 | 	sub	result2, _var03
23c18     FE 12 62 F0 | 	shl	arg01, result2
23c1c                 | LR__3330
23c1c     7F 02 86 F1 | 	sub	_var02, #127
23c20     09 FF 01 F6 | 	mov	result3, arg01
23c24     00 FB 01 F6 | 	mov	result1, _var01
23c28     01 FD 01 F6 | 	mov	result2, _var02
23c2c                 | __system___float_Unpack_ret
23c2c     2D 00 64 FD | 	ret
23c30                 | 
23c30                 | __system___float_Pack
23c30     00 00 06 F6 | 	mov	_var01, #0
23c34     00 16 0E F2 | 	cmp	arg03, #0 wz
23c38     8C 00 90 AD |  if_e	jmp	#LR__3341
23c3c     0B 03 92 F7 | 	encod	_var02, arg03 wc
23c40     01 02 06 C1 |  if_b	add	_var02, #1
23c44     21 00 06 F6 | 	mov	_var01, #33
23c48     01 01 82 F1 | 	sub	_var01, _var02
23c4c     00 17 62 F0 | 	shl	arg03, _var01
23c50     03 02 06 F6 | 	mov	_var02, #3
23c54     00 03 82 F1 | 	sub	_var02, _var01
23c58     01 15 02 F1 | 	add	arg02, _var02
23c5c     0A 05 02 F6 | 	mov	_var03, arg02
23c60     00 17 06 F1 | 	add	arg03, #256
23c64     0B 03 02 F6 | 	mov	_var02, arg03
23c68     FF 02 2E F5 | 	andn	_var02, #255 wz
23c6c     01 04 06 A1 |  if_e	add	_var03, #1
23c70     7F 04 06 F1 | 	add	_var03, #127
23c74     FF FF 7F FF 
23c78     E9 05 46 F3 | 	fges	_var03, ##-23
23c7c     FF 04 66 F3 | 	fles	_var03, #255
23c80     01 04 56 F2 | 	cmps	_var03, #1 wc
23c84     1C 00 90 3D |  if_ae	jmp	#LR__3340
23c88     01 16 46 F0 | 	shr	arg03, #1
23c8c     1F 02 C6 F9 | 	decod	_var02, #31
23c90     0B 03 02 F1 | 	add	_var02, arg03
23c94     02 05 62 F6 | 	neg	_var03, _var03
23c98     02 03 42 F0 | 	shr	_var02, _var03
23c9c     01 17 02 F6 | 	mov	arg03, _var02
23ca0     00 04 06 F6 | 	mov	_var03, #0
23ca4                 | LR__3340
23ca4     09 FB 01 F6 | 	mov	result1, arg01
23ca8     1F FA 65 F0 | 	shl	result1, #31
23cac     02 03 02 F6 | 	mov	_var02, _var03
23cb0     17 02 66 F0 | 	shl	_var02, #23
23cb4     01 FB 41 F5 | 	or	result1, _var02
23cb8     0B 07 02 F6 | 	mov	_var04, arg03
23cbc     09 06 46 F0 | 	shr	_var04, #9
23cc0     03 FB 41 F5 | 	or	result1, _var04
23cc4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23cc8                 | LR__3341
23cc8     00 FB 01 F6 | 	mov	result1, _var01
23ccc                 | __system___float_Pack_ret
23ccc     2D 00 64 FD | 	ret
23cd0                 | 
23cd0                 | __system___basic_print_float
23cd0     05 4A 05 F6 | 	mov	COUNT_, #5
23cd4     A8 00 A0 FD | 	call	#pushregs_
23cd8     09 1F 02 F6 | 	mov	local01, arg01
23cdc     0A 21 02 F6 | 	mov	local02, arg02
23ce0     0B 23 0A F6 | 	mov	local03, arg03 wz
23ce4     0C 25 02 F6 | 	mov	local04, arg04
23ce8     14 00 90 5D |  if_ne	jmp	#LR__3350
23cec     23 24 0E F2 | 	cmp	local04, #35 wz
23cf0     80 02 10 AF 
23cf4     00 26 06 A6 |  if_e	mov	local05, ##537198592
23cf8     1D 26 C6 59 |  if_ne	decod	local05, #29
23cfc     13 23 02 F6 | 	mov	local03, local05
23d00                 | LR__3350
23d00     0F 13 02 F6 | 	mov	arg01, local01
23d04     D8 27 B0 FD | 	call	#__system___gettxfunc
23d08     FD 26 0A F6 | 	mov	local05, result1 wz
23d0c     00 FA 05 A6 |  if_e	mov	result1, #0
23d10     13 13 02 56 |  if_ne	mov	arg01, local05
23d14     11 15 02 56 |  if_ne	mov	arg02, local03
23d18     10 17 02 56 |  if_ne	mov	arg03, local02
23d1c     12 19 02 56 |  if_ne	mov	arg04, local04
23d20     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23d24     A7 F0 03 F6 | 	mov	ptra, fp
23d28     B2 00 A0 FD | 	call	#popregs_
23d2c                 | __system___basic_print_float_ret
23d2c     2D 00 64 FD | 	ret
23d30                 | 
23d30                 | __system____builtin_atoi
23d30     07 4A 05 F6 | 	mov	COUNT_, #7
23d34     A8 00 A0 FD | 	call	#pushregs_
23d38                 | __system____builtin_atoi_enter
23d38     09 1F 02 F6 | 	mov	local01, arg01
23d3c     0A 21 02 F6 | 	mov	local02, arg02
23d40     00 22 06 F6 | 	mov	local03, #0
23d44     00 24 06 F6 | 	mov	local04, #0
23d48     00 26 06 F6 | 	mov	local05, #0
23d4c     97 1C 48 FB | 	callpa	#(@LR__3362-@LR__3360)>>2,fcache_load_ptr_
23d50                 | LR__3360
23d50     0F 29 C2 FA | 	rdbyte	local06, local01
23d54     20 28 0E F2 | 	cmp	local06, #32 wz
23d58     01 1E 06 A1 |  if_e	add	local01, #1
23d5c     F0 FF 9F AD |  if_e	jmp	#LR__3360
23d60     0F 2B C2 FA | 	rdbyte	local07, local01
23d64                 | LR__3361
23d64     2D 2A 0E F2 | 	cmp	local07, #45 wz
23d68     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23d6c     18 00 90 5D |  if_ne	jmp	#LR__3363
23d70     01 1E 06 F1 | 	add	local01, #1
23d74     2D 2A 0E F2 | 	cmp	local07, #45 wz
23d78     01 28 06 A6 |  if_e	mov	local06, #1
23d7c     14 27 C2 A2 |  if_e	subr	local05, local06
23d80     0F 2B C2 FA | 	rdbyte	local07, local01
23d84     DC FF 9F FD | 	jmp	#LR__3361
23d88                 | LR__3362
23d88                 | LR__3363
23d88     00 20 0E F2 | 	cmp	local02, #0 wz
23d8c     1C 00 90 5D |  if_ne	jmp	#LR__3365
23d90     24 2A 0E F2 | 	cmp	local07, #36 wz
23d94     10 20 06 A6 |  if_e	mov	local02, #16
23d98     01 1E 06 A1 |  if_e	add	local01, #1
23d9c     0C 00 90 AD |  if_e	jmp	#LR__3364
23da0     25 2A 0E F2 | 	cmp	local07, #37 wz
23da4     02 20 06 A6 |  if_e	mov	local02, #2
23da8     01 1E 06 A1 |  if_e	add	local01, #1
23dac                 | LR__3364
23dac                 | LR__3365
23dac     97 48 48 FB | 	callpa	#(@LR__3373-@LR__3366)>>2,fcache_load_ptr_
23db0                 | LR__3366
23db0                 | LR__3367
23db0     0F 2B C2 FA | 	rdbyte	local07, local01
23db4     5F 2A 0E F2 | 	cmp	local07, #95 wz
23db8     01 1E 06 F1 | 	add	local01, #1
23dbc     F0 FF 9F AD |  if_e	jmp	#LR__3367
23dc0     30 2A 0E F2 | 	cmp	local07, #48 wz
23dc4     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23dc8     00 24 06 A6 |  if_e	mov	local04, #0
23dcc     60 00 90 AD |  if_e	jmp	#LR__3372
23dd0     31 2A 56 F2 | 	cmps	local07, #49 wc
23dd4     18 00 90 CD |  if_b	jmp	#LR__3368
23dd8     3A 2A 56 F2 | 	cmps	local07, #58 wc
23ddc     15 25 02 C6 |  if_b	mov	local04, local07
23de0     30 24 86 C1 |  if_b	sub	local04, #48
23de4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23de8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23dec     40 00 90 CD |  if_b	jmp	#LR__3371
23df0                 | LR__3368
23df0     0B 20 56 F2 | 	cmps	local02, #11 wc
23df4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23df8     14 00 90 CD |  if_b	jmp	#LR__3369
23dfc     67 2A 56 F2 | 	cmps	local07, #103 wc
23e00     61 2A 86 C1 |  if_b	sub	local07, #97
23e04     0A 24 06 C6 |  if_b	mov	local04, #10
23e08     15 25 02 C1 |  if_b	add	local04, local07
23e0c     20 00 90 CD |  if_b	jmp	#LR__3370
23e10                 | LR__3369
23e10     0B 20 56 F2 | 	cmps	local02, #11 wc
23e14     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23e18     24 00 90 CD |  if_b	jmp	#LR__3374
23e1c     47 2A 56 F2 | 	cmps	local07, #71 wc
23e20     41 2A 86 C1 |  if_b	sub	local07, #65
23e24     0A 24 06 C6 |  if_b	mov	local04, #10
23e28     15 25 02 C1 |  if_b	add	local04, local07
23e2c     10 00 90 3D |  if_ae	jmp	#LR__3374
23e30                 | LR__3370
23e30                 | LR__3371
23e30                 | LR__3372
23e30     11 21 02 FD | 	qmul	local02, local03
23e34     18 22 62 FD | 	getqx	local03
23e38     12 23 02 F1 | 	add	local03, local04
23e3c     70 FF 9F FD | 	jmp	#LR__3366
23e40                 | LR__3373
23e40                 | LR__3374
23e40     00 20 0E F2 | 	cmp	local02, #0 wz
23e44     64 00 90 5D |  if_ne	jmp	#LR__3380
23e48     78 2A 0E F2 | 	cmp	local07, #120 wz
23e4c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23e50     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23e54     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23e58     14 00 90 5D |  if_ne	jmp	#LR__3375
23e5c     0F 13 02 F6 | 	mov	arg01, local01
23e60     10 14 06 F6 | 	mov	arg02, #16
23e64     C8 FE BF FD | 	call	#__system____builtin_atoi
23e68     FD 22 02 F6 | 	mov	local03, result1
23e6c     3C 00 90 FD | 	jmp	#LR__3379
23e70                 | LR__3375
23e70     62 2A 0E F2 | 	cmp	local07, #98 wz
23e74     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23e78     14 00 90 5D |  if_ne	jmp	#LR__3376
23e7c     0F 13 02 F6 | 	mov	arg01, local01
23e80     02 14 06 F6 | 	mov	arg02, #2
23e84     A8 FE BF FD | 	call	#__system____builtin_atoi
23e88     FD 22 02 F6 | 	mov	local03, result1
23e8c     1C 00 90 FD | 	jmp	#LR__3378
23e90                 | LR__3376
23e90     6F 2A 0E F2 | 	cmp	local07, #111 wz
23e94     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23e98     10 00 90 5D |  if_ne	jmp	#LR__3377
23e9c     0F 13 02 F6 | 	mov	arg01, local01
23ea0     08 14 06 F6 | 	mov	arg02, #8
23ea4     88 FE BF FD | 	call	#__system____builtin_atoi
23ea8     FD 22 02 F6 | 	mov	local03, result1
23eac                 | LR__3377
23eac                 | LR__3378
23eac                 | LR__3379
23eac                 | LR__3380
23eac     00 26 0E F2 | 	cmp	local05, #0 wz
23eb0     11 23 62 56 |  if_ne	neg	local03, local03
23eb4     11 FB 01 F6 | 	mov	result1, local03
23eb8     A7 F0 03 F6 | 	mov	ptra, fp
23ebc     B2 00 A0 FD | 	call	#popregs_
23ec0                 | __system____builtin_atoi_ret
23ec0     2D 00 64 FD | 	ret
23ec4                 | 
23ec4                 | __system____builtin_atof
23ec4     07 4A 05 F6 | 	mov	COUNT_, #7
23ec8     A8 00 A0 FD | 	call	#pushregs_
23ecc     09 1F 02 F6 | 	mov	local01, arg01
23ed0     00 20 06 F6 | 	mov	local02, #0
23ed4     00 22 06 F6 | 	mov	local03, #0
23ed8     00 24 06 F6 | 	mov	local04, #0
23edc     00 26 06 F6 | 	mov	local05, #0
23ee0     97 08 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
23ee4                 | LR__3390
23ee4     0F 17 C2 FA | 	rdbyte	arg03, local01
23ee8     20 16 0E F2 | 	cmp	arg03, #32 wz
23eec     01 1E 06 A1 |  if_e	add	local01, #1
23ef0     F0 FF 9F AD |  if_e	jmp	#LR__3390
23ef4                 | LR__3391
23ef4     0F 29 C2 FA | 	rdbyte	local06, local01
23ef8                 | LR__3392
23ef8     2B 28 0E F2 | 	cmp	local06, #43 wz
23efc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23f00     14 00 90 5D |  if_ne	jmp	#LR__3393
23f04     2D 28 0E F2 | 	cmp	local06, #45 wz
23f08     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23f0c     01 1E 06 F1 | 	add	local01, #1
23f10     0F 29 C2 FA | 	rdbyte	local06, local01
23f14     E0 FF 9F FD | 	jmp	#LR__3392
23f18                 | LR__3393
23f18                 | LR__3394
23f18     97 08 48 FB | 	callpa	#(@LR__3396-@LR__3395)>>2,fcache_load_ptr_
23f1c                 | LR__3395
23f1c     0F 29 C2 FA | 	rdbyte	local06, local01
23f20     5F 28 0E F2 | 	cmp	local06, #95 wz
23f24     01 1E 06 F1 | 	add	local01, #1
23f28     F0 FF 9F AD |  if_e	jmp	#LR__3395
23f2c                 | LR__3396
23f2c     00 28 0E F2 | 	cmp	local06, #0 wz
23f30     5C 00 90 AD |  if_e	jmp	#LR__3398
23f34     30 28 56 F2 | 	cmps	local06, #48 wc
23f38     44 00 90 CD |  if_b	jmp	#LR__3397
23f3c     3A 28 56 F2 | 	cmps	local06, #58 wc
23f40     3C 00 90 3D |  if_ae	jmp	#LR__3397
23f44     10 13 02 F6 | 	mov	arg01, local02
23f48     00 90 20 FF 
23f4c     00 14 06 F6 | 	mov	arg02, ##1092616192
23f50     64 F7 BF FD | 	call	#__system___float_mul
23f54     FD 20 02 F6 | 	mov	local02, result1
23f58     30 28 86 F1 | 	sub	local06, #48
23f5c     14 13 02 F6 | 	mov	arg01, local06
23f60     50 F3 BF FD | 	call	#__system___float_fromuns
23f64     FD 14 02 F6 | 	mov	arg02, result1
23f68     10 13 02 F6 | 	mov	arg01, local02
23f6c     78 F3 BF FD | 	call	#__system___float_add
23f70     FD 20 02 F6 | 	mov	local02, result1
23f74     00 26 0E F2 | 	cmp	local05, #0 wz
23f78     01 22 86 51 |  if_ne	sub	local03, #1
23f7c     98 FF 9F FD | 	jmp	#LR__3394
23f80                 | LR__3397
23f80     2E 28 0E F2 | 	cmp	local06, #46 wz
23f84     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23f88     01 26 06 A6 |  if_e	mov	local05, #1
23f8c     88 FF 9F AD |  if_e	jmp	#LR__3394
23f90                 | LR__3398
23f90     45 28 0E F2 | 	cmp	local06, #69 wz
23f94     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23f98     18 00 90 5D |  if_ne	jmp	#LR__3399
23f9c     0F 13 02 F6 | 	mov	arg01, local01
23fa0     00 14 06 F6 | 	mov	arg02, #0
23fa4     88 FD BF FD | 	call	#__system____builtin_atoi
23fa8     11 FB 01 F1 | 	add	result1, local03
23fac     FD 2A 02 F6 | 	mov	local07, result1
23fb0     04 00 90 FD | 	jmp	#LR__3400
23fb4                 | LR__3399
23fb4     11 2B 02 F6 | 	mov	local07, local03
23fb8                 | LR__3400
23fb8     15 17 02 F6 | 	mov	arg03, local07
23fbc     10 13 02 F6 | 	mov	arg01, local02
23fc0     00 90 20 FF 
23fc4     00 14 06 F6 | 	mov	arg02, ##1092616192
23fc8     F4 06 B0 FD | 	call	#__system___float_pow_n
23fcc     12 FB 61 F5 | 	xor	result1, local04
23fd0     A7 F0 03 F6 | 	mov	ptra, fp
23fd4     B2 00 A0 FD | 	call	#popregs_
23fd8                 | __system____builtin_atof_ret
23fd8     2D 00 64 FD | 	ret
23fdc                 | 
23fdc                 | __system____builtin_ilogb
23fdc     FC FB BF FD | 	call	#__system___float_Unpack
23fe0     00 FE 0D F2 | 	cmp	result3, #0 wz
23fe4     00 00 40 AF 
23fe8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23fec     24 00 90 AD |  if_e	jmp	#LR__3411
23ff0     80 FC 0D F2 | 	cmp	result2, #128 wz
23ff4     18 00 90 5D |  if_ne	jmp	#LR__3410
23ff8     00 00 10 FF 
23ffc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
24000     1E FA CD A9 |  if_e	bmask	result1, #30
24004     0C 00 90 AD |  if_e	jmp	#LR__3411
24008     1F FA C5 F9 | 	decod	result1, #31
2400c     04 00 90 FD | 	jmp	#LR__3411
24010                 | LR__3410
24010     FE FA 01 F6 | 	mov	result1, result2
24014                 | LR__3411
24014                 | __system____builtin_ilogb_ret
24014     2D 00 64 FD | 	ret
24018                 | 
24018                 | __system____builtin_sinf
24018     03 4A 05 F6 | 	mov	COUNT_, #3
2401c     A8 00 A0 FD | 	call	#pushregs_
24020     09 1F 02 F6 | 	mov	local01, arg01
24024     87 64 20 FF 
24028     DB 15 06 F6 | 	mov	arg02, ##1086918619
2402c     8C F8 BF FD | 	call	#__system___float_div
24030     FD 12 02 F6 | 	mov	arg01, result1
24034     00 14 06 F6 | 	mov	arg02, #0
24038     44 FB BF FD | 	call	#__system___float_tointeger
2403c     FD 16 0A F6 | 	mov	arg03, result1 wz
24040     44 00 90 AD |  if_e	jmp	#LR__3420
24044     0B 13 52 F6 | 	abs	arg01, arg03 wc
24048     1F 20 C6 C9 |  if_b	decod	local02, #31
2404c     00 20 06 36 |  if_ae	mov	local02, #0
24050     60 F2 BF FD | 	call	#__system___float_fromuns
24054     10 FB 61 F5 | 	xor	result1, local02
24058     FD 12 02 F6 | 	mov	arg01, result1
2405c     1E 14 C6 F9 | 	decod	arg02, #30
24060     54 F6 BF FD | 	call	#__system___float_mul
24064     FD 12 02 F6 | 	mov	arg01, result1
24068     87 24 20 FF 
2406c     DB 15 06 F6 | 	mov	arg02, ##1078530011
24070     44 F6 BF FD | 	call	#__system___float_mul
24074     FD 14 02 F6 | 	mov	arg02, result1
24078     0F 13 02 F6 | 	mov	arg01, local01
2407c     1F 14 E6 F4 | 	bitnot	arg02, #31
24080     64 F2 BF FD | 	call	#__system___float_add
24084     FD 1E 02 F6 | 	mov	local01, result1
24088                 | LR__3420
24088     0F 13 02 F6 | 	mov	arg01, local01
2408c     66 E6 1E FF 
24090     CD 14 06 F6 | 	mov	arg02, ##1036831949
24094     01 16 06 F6 | 	mov	arg03, #1
24098     50 FA BF FD | 	call	#__system___float_cmp
2409c     00 FA 55 F2 | 	cmps	result1, #0 wc
240a0     5C 00 90 3D |  if_ae	jmp	#LR__3421
240a4     0F 13 02 F6 | 	mov	arg01, local01
240a8     66 E6 5E FF 
240ac     CD 14 06 F6 | 	mov	arg02, ##-1110651699
240b0     01 16 66 F6 | 	neg	arg03, #1
240b4     34 FA BF FD | 	call	#__system___float_cmp
240b8     01 FA 55 F2 | 	cmps	result1, #1 wc
240bc     40 00 90 CD |  if_b	jmp	#LR__3421
240c0     0F 13 02 F6 | 	mov	arg01, local01
240c4     0F 15 02 F6 | 	mov	arg02, local01
240c8     EC F5 BF FD | 	call	#__system___float_mul
240cc     FD 12 02 F6 | 	mov	arg01, result1
240d0     0F 15 02 F6 | 	mov	arg02, local01
240d4     E0 F5 BF FD | 	call	#__system___float_mul
240d8     FD 12 02 F6 | 	mov	arg01, result1
240dc     00 60 20 FF 
240e0     00 14 06 F6 | 	mov	arg02, ##1086324736
240e4     D4 F7 BF FD | 	call	#__system___float_div
240e8     FD 14 02 F6 | 	mov	arg02, result1
240ec     0F 13 02 F6 | 	mov	arg01, local01
240f0     1F 14 E6 F4 | 	bitnot	arg02, #31
240f4     F0 F1 BF FD | 	call	#__system___float_add
240f8     FD 22 02 F6 | 	mov	local03, result1
240fc     54 00 90 FD | 	jmp	#LR__3422
24100                 | LR__3421
24100     0F 13 02 F6 | 	mov	arg01, local01
24104     7C 91 26 FF 
24108     83 15 06 F6 | 	mov	arg02, ##1294137731
2410c     A8 F5 BF FD | 	call	#__system___float_mul
24110     FD 12 02 F6 | 	mov	arg01, result1
24114     00 14 06 F6 | 	mov	arg02, #0
24118     64 FA BF FD | 	call	#__system___float_tointeger
2411c     02 FA 65 F0 | 	shl	result1, #2
24120     00 00 A0 FF 
24124     FD 00 48 FD | 	qrotate	##1073741824, result1
24128     19 12 62 FD | 	getqy	arg01
2412c     09 13 52 F6 | 	abs	arg01, arg01 wc
24130     1F 20 C6 C9 |  if_b	decod	local02, #31
24134     00 20 06 36 |  if_ae	mov	local02, #0
24138     78 F1 BF FD | 	call	#__system___float_fromuns
2413c     10 FB 61 F5 | 	xor	result1, local02
24140     FD 12 02 F6 | 	mov	arg01, result1
24144     00 40 27 FF 
24148     00 14 06 F6 | 	mov	arg02, ##1317011456
2414c     6C F7 BF FD | 	call	#__system___float_div
24150     FD 22 02 F6 | 	mov	local03, result1
24154                 | LR__3422
24154     11 FB 01 F6 | 	mov	result1, local03
24158     A7 F0 03 F6 | 	mov	ptra, fp
2415c     B2 00 A0 FD | 	call	#popregs_
24160                 | __system____builtin_sinf_ret
24160     2D 00 64 FD | 	ret
24164                 | 
24164                 | __system____builtin_tanf
24164     02 4A 05 F6 | 	mov	COUNT_, #2
24168     A8 00 A0 FD | 	call	#pushregs_
2416c     09 1F 02 F6 | 	mov	local01, arg01
24170     A4 FE BF FD | 	call	#__system____builtin_sinf
24174     FD 20 02 F6 | 	mov	local02, result1
24178     0F 15 02 F6 | 	mov	arg02, local01
2417c     87 E4 1F FF 
24180     DB 13 06 F6 | 	mov	arg01, ##1070141403
24184     1F 14 E6 F4 | 	bitnot	arg02, #31
24188     5C F1 BF FD | 	call	#__system___float_add
2418c     FD 12 02 F6 | 	mov	arg01, result1
24190     84 FE BF FD | 	call	#__system____builtin_sinf
24194     FD 14 02 F6 | 	mov	arg02, result1
24198     10 13 02 F6 | 	mov	arg01, local02
2419c     1C F7 BF FD | 	call	#__system___float_div
241a0     A7 F0 03 F6 | 	mov	ptra, fp
241a4     B2 00 A0 FD | 	call	#popregs_
241a8                 | __system____builtin_tanf_ret
241a8     2D 00 64 FD | 	ret
241ac                 | 
241ac                 | __system____builtin_asinf
241ac     01 4A 05 F6 | 	mov	COUNT_, #1
241b0     A8 00 A0 FD | 	call	#pushregs_
241b4     09 1F 02 F6 | 	mov	local01, arg01
241b8     0F 15 02 F6 | 	mov	arg02, local01
241bc     0F 13 02 F6 | 	mov	arg01, local01
241c0     F4 F4 BF FD | 	call	#__system___float_mul
241c4     FD 14 02 F6 | 	mov	arg02, result1
241c8     00 C0 1F FF 
241cc     00 12 06 F6 | 	mov	arg01, ##1065353216
241d0     1F 14 E6 F4 | 	bitnot	arg02, #31
241d4     10 F1 BF FD | 	call	#__system___float_add
241d8     FD 12 02 F6 | 	mov	arg01, result1
241dc     00 F4 BF FD | 	call	#__system___float_sqrt
241e0     FD 14 02 F6 | 	mov	arg02, result1
241e4     0F 13 02 F6 | 	mov	arg01, local01
241e8     58 00 B0 FD | 	call	#__system____builtin_atan2f
241ec     A7 F0 03 F6 | 	mov	ptra, fp
241f0     B2 00 A0 FD | 	call	#popregs_
241f4                 | __system____builtin_asinf_ret
241f4     2D 00 64 FD | 	ret
241f8                 | 
241f8                 | __system____builtin_acosf
241f8     01 4A 05 F6 | 	mov	COUNT_, #1
241fc     A8 00 A0 FD | 	call	#pushregs_
24200     09 1F 02 F6 | 	mov	local01, arg01
24204     0F 15 02 F6 | 	mov	arg02, local01
24208     0F 13 02 F6 | 	mov	arg01, local01
2420c     A8 F4 BF FD | 	call	#__system___float_mul
24210     FD 14 02 F6 | 	mov	arg02, result1
24214     00 C0 1F FF 
24218     00 12 06 F6 | 	mov	arg01, ##1065353216
2421c     1F 14 E6 F4 | 	bitnot	arg02, #31
24220     C4 F0 BF FD | 	call	#__system___float_add
24224     FD 12 02 F6 | 	mov	arg01, result1
24228     B4 F3 BF FD | 	call	#__system___float_sqrt
2422c     FD 12 02 F6 | 	mov	arg01, result1
24230     0F 15 02 F6 | 	mov	arg02, local01
24234     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24238     A7 F0 03 F6 | 	mov	ptra, fp
2423c     B2 00 A0 FD | 	call	#popregs_
24240                 | __system____builtin_acosf_ret
24240     2D 00 64 FD | 	ret
24244                 | 
24244                 | __system____builtin_atan2f
24244     04 4A 05 F6 | 	mov	COUNT_, #4
24248     A8 00 A0 FD | 	call	#pushregs_
2424c     09 1F 02 F6 | 	mov	local01, arg01
24250     0A 21 02 F6 | 	mov	local02, arg02
24254     0F 13 02 F6 | 	mov	arg01, local01
24258     00 14 06 F6 | 	mov	arg02, #0
2425c     01 16 06 F6 | 	mov	arg03, #1
24260     88 F8 BF FD | 	call	#__system___float_cmp
24264     00 FA 0D F2 | 	cmp	result1, #0 wz
24268     28 00 90 5D |  if_ne	jmp	#LR__3430
2426c     10 13 02 F6 | 	mov	arg01, local02
24270     00 14 06 F6 | 	mov	arg02, #0
24274     01 16 06 F6 | 	mov	arg03, #1
24278     70 F8 BF FD | 	call	#__system___float_cmp
2427c     00 FA 55 F2 | 	cmps	result1, #0 wc
24280     87 24 60 CF 
24284     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
24288     DC 00 90 CD |  if_b	jmp	#LR__3431
2428c     00 FA 05 F6 | 	mov	result1, #0
24290     D4 00 90 FD | 	jmp	#LR__3431
24294                 | LR__3430
24294     10 13 02 F6 | 	mov	arg01, local02
24298     10 15 02 F6 | 	mov	arg02, local02
2429c     18 F4 BF FD | 	call	#__system___float_mul
242a0     FD 22 02 F6 | 	mov	local03, result1
242a4     0F 13 02 F6 | 	mov	arg01, local01
242a8     0F 15 02 F6 | 	mov	arg02, local01
242ac     08 F4 BF FD | 	call	#__system___float_mul
242b0     FD 14 02 F6 | 	mov	arg02, result1
242b4     11 13 02 F6 | 	mov	arg01, local03
242b8     2C F0 BF FD | 	call	#__system___float_add
242bc     FD 12 02 F6 | 	mov	arg01, result1
242c0     1C F3 BF FD | 	call	#__system___float_sqrt
242c4     FD 22 02 F6 | 	mov	local03, result1
242c8     10 13 02 F6 | 	mov	arg01, local02
242cc     11 15 02 F6 | 	mov	arg02, local03
242d0     E8 F5 BF FD | 	call	#__system___float_div
242d4     FD 20 02 F6 | 	mov	local02, result1
242d8     0F 13 02 F6 | 	mov	arg01, local01
242dc     11 15 02 F6 | 	mov	arg02, local03
242e0     D8 F5 BF FD | 	call	#__system___float_div
242e4     FD 1E 02 F6 | 	mov	local01, result1
242e8     00 40 27 FF 
242ec     00 12 06 F6 | 	mov	arg01, ##1317011456
242f0     10 15 02 F6 | 	mov	arg02, local02
242f4     C0 F3 BF FD | 	call	#__system___float_mul
242f8     FD 12 02 F6 | 	mov	arg01, result1
242fc     00 14 06 F6 | 	mov	arg02, #0
24300     7C F8 BF FD | 	call	#__system___float_tointeger
24304     FD 22 02 F6 | 	mov	local03, result1
24308     00 40 27 FF 
2430c     00 12 06 F6 | 	mov	arg01, ##1317011456
24310     0F 15 02 F6 | 	mov	arg02, local01
24314     A0 F3 BF FD | 	call	#__system___float_mul
24318     FD 12 02 F6 | 	mov	arg01, result1
2431c     00 14 06 F6 | 	mov	arg02, #0
24320     5C F8 BF FD | 	call	#__system___float_tointeger
24324     FD 22 52 FD | 	qvector	local03, result1
24328     87 24 20 FF 
2432c     DB 23 06 F6 | 	mov	local03, ##1078530011
24330     19 12 62 FD | 	getqy	arg01
24334     01 12 C6 F0 | 	sar	arg01, #1
24338     09 13 52 F6 | 	abs	arg01, arg01 wc
2433c     1F 24 C6 C9 |  if_b	decod	local04, #31
24340     00 24 06 36 |  if_ae	mov	local04, #0
24344     6C EF BF FD | 	call	#__system___float_fromuns
24348     12 FB 61 F5 | 	xor	result1, local04
2434c     FD 12 02 F6 | 	mov	arg01, result1
24350     00 40 27 FF 
24354     00 14 06 F6 | 	mov	arg02, ##1317011456
24358     60 F5 BF FD | 	call	#__system___float_div
2435c     FD 14 02 F6 | 	mov	arg02, result1
24360     11 13 02 F6 | 	mov	arg01, local03
24364     50 F3 BF FD | 	call	#__system___float_mul
24368                 | LR__3431
24368     A7 F0 03 F6 | 	mov	ptra, fp
2436c     B2 00 A0 FD | 	call	#popregs_
24370                 | __system____builtin_atan2f_ret
24370     2D 00 64 FD | 	ret
24374                 | 
24374                 | __system____builtin_exp2f
24374     04 4A 05 F6 | 	mov	COUNT_, #4
24378     A8 00 A0 FD | 	call	#pushregs_
2437c     09 1F 02 F6 | 	mov	local01, arg01
24380     00 7F 21 FF 
24384     00 14 06 F6 | 	mov	arg02, ##1123942400
24388     01 16 66 F6 | 	neg	arg03, #1
2438c     5C F7 BF FD | 	call	#__system___float_cmp
24390     00 FA 55 F2 | 	cmps	result1, #0 wc
24394     00 C0 3F 3F 
24398     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2439c     DC 00 90 3D |  if_ae	jmp	#LR__3441
243a0     0F 13 02 F6 | 	mov	arg01, local01
243a4     00 7F 61 FF 
243a8     00 14 06 F6 | 	mov	arg02, ##-1023541248
243ac     01 16 06 F6 | 	mov	arg03, #1
243b0     38 F7 BF FD | 	call	#__system___float_cmp
243b4     00 FA 55 F2 | 	cmps	result1, #0 wc
243b8     00 FA 05 C6 |  if_b	mov	result1, #0
243bc     BC 00 90 CD |  if_b	jmp	#LR__3441
243c0     0F 13 02 F6 | 	mov	arg01, local01
243c4     00 14 06 F6 | 	mov	arg02, #0
243c8     B4 F7 BF FD | 	call	#__system___float_tointeger
243cc     FD 20 02 F6 | 	mov	local02, result1
243d0     10 13 52 F6 | 	abs	arg01, local02 wc
243d4     1F 22 C6 C9 |  if_b	decod	local03, #31
243d8     00 22 06 36 |  if_ae	mov	local03, #0
243dc     D4 EE BF FD | 	call	#__system___float_fromuns
243e0     11 FB 61 F5 | 	xor	result1, local03
243e4     FD 14 02 F6 | 	mov	arg02, result1
243e8     0F 13 02 F6 | 	mov	arg01, local01
243ec     1F 14 E6 F4 | 	bitnot	arg02, #31
243f0     F4 EE BF FD | 	call	#__system___float_add
243f4     FD 24 02 F6 | 	mov	local04, result1
243f8     12 13 02 F6 | 	mov	arg01, local04
243fc     00 14 06 F6 | 	mov	arg02, #0
24400     01 16 06 F6 | 	mov	arg03, #1
24404     E4 F6 BF FD | 	call	#__system___float_cmp
24408     00 FA 55 F2 | 	cmps	result1, #0 wc
2440c     18 00 90 3D |  if_ae	jmp	#LR__3440
24410     12 13 02 F6 | 	mov	arg01, local04
24414     00 C0 1F FF 
24418     00 14 06 F6 | 	mov	arg02, ##1065353216
2441c     C8 EE BF FD | 	call	#__system___float_add
24420     FD 24 02 F6 | 	mov	local04, result1
24424     01 20 86 F1 | 	sub	local02, #1
24428                 | LR__3440
24428     7F 20 06 F1 | 	add	local02, #127
2442c     17 20 66 F0 | 	shl	local02, #23
24430     12 13 02 F6 | 	mov	arg01, local04
24434     00 80 26 FF 
24438     00 14 06 F6 | 	mov	arg02, ##1291845632
2443c     78 F2 BF FD | 	call	#__system___float_mul
24440     FD 12 02 F6 | 	mov	arg01, result1
24444     00 14 06 F6 | 	mov	arg02, #0
24448     34 F7 BF FD | 	call	#__system___float_tointeger
2444c     FD 24 0A F6 | 	mov	local04, result1 wz
24450     10 FB 01 A6 |  if_e	mov	result1, local02
24454     24 00 90 AD |  if_e	jmp	#LR__3441
24458     3E 24 26 F4 | 	bith	local04, #62
2445c     0F 24 62 FD | 	qexp	local04
24460     10 13 02 F6 | 	mov	arg01, local02
24464     18 14 62 FD | 	getqx	arg02
24468     01 14 06 F1 | 	add	arg02, #1
2446c     01 14 46 F0 | 	shr	arg02, #1
24470     00 80 1F FF 
24474     00 14 06 F1 | 	add	arg02, ##1056964608
24478     3C F2 BF FD | 	call	#__system___float_mul
2447c                 | LR__3441
2447c     A7 F0 03 F6 | 	mov	ptra, fp
24480     B2 00 A0 FD | 	call	#popregs_
24484                 | __system____builtin_exp2f_ret
24484     2D 00 64 FD | 	ret
24488                 | 
24488                 | __system____builtin_log2f
24488     06 4A 05 F6 | 	mov	COUNT_, #6
2448c     A8 00 A0 FD | 	call	#pushregs_
24490     09 1F 02 F6 | 	mov	local01, arg01
24494     09 21 0A F6 | 	mov	local02, arg01 wz
24498     00 00 40 5F 
2449c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
244a0     00 40 00 AF 
244a4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
244a8     08 01 90 AD |  if_e	jmp	#LR__3454
244ac     00 20 56 F2 | 	cmps	local02, #0 wc
244b0     00 E0 3F CF 
244b4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
244b8     F8 00 90 CD |  if_b	jmp	#LR__3454
244bc     0F 13 02 F6 | 	mov	arg01, local01
244c0     00 90 20 FF 
244c4     00 14 06 F6 | 	mov	arg02, ##1092616192
244c8     01 16 06 F6 | 	mov	arg03, #1
244cc     1C F6 BF FD | 	call	#__system___float_cmp
244d0     00 FA 0D F2 | 	cmp	result1, #0 wz
244d4     4D 2A 20 AF 
244d8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
244dc     D4 00 90 AD |  if_e	jmp	#LR__3454
244e0     0F 13 02 F6 | 	mov	arg01, local01
244e4     FC 16 20 FF 
244e8     54 14 06 F6 | 	mov	arg02, ##1076754516
244ec     01 16 06 F6 | 	mov	arg03, #1
244f0     F8 F5 BF FD | 	call	#__system___float_cmp
244f4     00 FA 0D F2 | 	cmp	result1, #0 wz
244f8     55 DC 1F AF 
244fc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24500     B0 00 90 AD |  if_e	jmp	#LR__3454
24504     10 23 02 F6 | 	mov	local03, local02
24508     17 22 46 F0 | 	shr	local03, #23
2450c     11 23 E2 F8 | 	getbyte	local03, local03, #0
24510     17 21 06 F4 | 	bitl	local02, #279
24514     10 25 02 F6 | 	mov	local04, local02
24518     FF 22 0E F2 | 	cmp	local03, #255 wz
2451c     1C 00 90 5D |  if_ne	jmp	#LR__3450
24520     00 24 0E F2 | 	cmp	local04, #0 wz
24524     00 C0 3F 5F 
24528     00 26 06 56 |  if_ne	mov	local05, ##2139095040
2452c     00 E0 3F AF 
24530     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24534     13 FB 01 F6 | 	mov	result1, local05
24538     78 00 90 FD | 	jmp	#LR__3454
2453c                 | LR__3450
2453c     00 22 0E F2 | 	cmp	local03, #0 wz
24540     17 24 26 54 |  if_ne	bith	local04, #23
24544     7F 22 86 51 |  if_ne	sub	local03, #127
24548     28 00 90 5D |  if_ne	jmp	#LR__3453
2454c     00 24 0E F2 | 	cmp	local04, #0 wz
24550     00 40 00 AF 
24554     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24558     58 00 90 AD |  if_e	jmp	#LR__3454
2455c     7E 22 66 F6 | 	neg	local03, #126
24560     97 08 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
24564                 | LR__3451
24564     17 24 2E F4 | 	testbn	local04, #23 wz
24568     01 24 66 A0 |  if_e	shl	local04, #1
2456c     01 22 06 A1 |  if_e	add	local03, #1
24570     F0 FF 9F AD |  if_e	jmp	#LR__3451
24574                 | LR__3452
24574                 | LR__3453
24574     0E 24 62 FD | 	qlog	local04
24578     01 22 86 F1 | 	sub	local03, #1
2457c     11 13 52 F6 | 	abs	arg01, local03 wc
24580     1F 28 C6 C9 |  if_b	decod	local06, #31
24584     00 28 06 36 |  if_ae	mov	local06, #0
24588     18 26 62 FD | 	getqx	local05
2458c     9B 26 06 F4 | 	bitl	local05, #155
24590     08 26 06 F1 | 	add	local05, #8
24594     04 26 46 F0 | 	shr	local05, #4
24598     00 C0 1F FF 
2459c     00 26 06 F1 | 	add	local05, ##1065353216
245a0     10 ED BF FD | 	call	#__system___float_fromuns
245a4     14 FB 61 F5 | 	xor	result1, local06
245a8     FD 14 02 F6 | 	mov	arg02, result1
245ac     13 13 02 F6 | 	mov	arg01, local05
245b0     34 ED BF FD | 	call	#__system___float_add
245b4                 | LR__3454
245b4     A7 F0 03 F6 | 	mov	ptra, fp
245b8     B2 00 A0 FD | 	call	#popregs_
245bc                 | __system____builtin_log2f_ret
245bc     2D 00 64 FD | 	ret
245c0                 | 
245c0                 | __system____builtin_powf
245c0     04 4A 05 F6 | 	mov	COUNT_, #4
245c4     A8 00 A0 FD | 	call	#pushregs_
245c8     09 1F 02 F6 | 	mov	local01, arg01
245cc     0A 21 02 F6 | 	mov	local02, arg02
245d0     10 13 02 F6 | 	mov	arg01, local02
245d4     00 14 06 F6 | 	mov	arg02, #0
245d8     A4 F5 BF FD | 	call	#__system___float_tointeger
245dc     FD 22 02 F6 | 	mov	local03, result1
245e0     11 13 52 F6 | 	abs	arg01, local03 wc
245e4     1F 24 C6 C9 |  if_b	decod	local04, #31
245e8     00 24 06 36 |  if_ae	mov	local04, #0
245ec     C4 EC BF FD | 	call	#__system___float_fromuns
245f0     12 FB 61 F5 | 	xor	result1, local04
245f4     FD 12 02 F6 | 	mov	arg01, result1
245f8     10 15 02 F6 | 	mov	arg02, local02
245fc     01 16 06 F6 | 	mov	arg03, #1
24600     E8 F4 BF FD | 	call	#__system___float_cmp
24604     00 FA 0D F2 | 	cmp	result1, #0 wz
24608     18 00 90 5D |  if_ne	jmp	#LR__3460
2460c     00 C0 1F FF 
24610     00 12 06 F6 | 	mov	arg01, ##1065353216
24614     0F 15 02 F6 | 	mov	arg02, local01
24618     11 17 02 F6 | 	mov	arg03, local03
2461c     A0 00 B0 FD | 	call	#__system___float_pow_n
24620     58 00 90 FD | 	jmp	#LR__3461
24624                 | LR__3460
24624     0F 13 02 F6 | 	mov	arg01, local01
24628     00 14 06 F6 | 	mov	arg02, #0
2462c     01 16 06 F6 | 	mov	arg03, #1
24630     B8 F4 BF FD | 	call	#__system___float_cmp
24634     00 FA 55 F2 | 	cmps	result1, #0 wc
24638     00 E0 3F CF 
2463c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24640     38 00 90 CD |  if_b	jmp	#LR__3461
24644     0F 13 02 F6 | 	mov	arg01, local01
24648     00 14 06 F6 | 	mov	arg02, #0
2464c     01 16 06 F6 | 	mov	arg03, #1
24650     98 F4 BF FD | 	call	#__system___float_cmp
24654     00 FA 0D F2 | 	cmp	result1, #0 wz
24658     00 FA 05 A6 |  if_e	mov	result1, #0
2465c     1C 00 90 AD |  if_e	jmp	#LR__3461
24660     0F 13 02 F6 | 	mov	arg01, local01
24664     20 FE BF FD | 	call	#__system____builtin_log2f
24668     FD 12 02 F6 | 	mov	arg01, result1
2466c     10 15 02 F6 | 	mov	arg02, local02
24670     44 F0 BF FD | 	call	#__system___float_mul
24674     FD 12 02 F6 | 	mov	arg01, result1
24678     F8 FC BF FD | 	call	#__system____builtin_exp2f
2467c                 | LR__3461
2467c     A7 F0 03 F6 | 	mov	ptra, fp
24680     B2 00 A0 FD | 	call	#popregs_
24684                 | __system____builtin_powf_ret
24684     2D 00 64 FD | 	ret
24688                 | 
24688                 | __system____builtin_logbase
24688     02 4A 05 F6 | 	mov	COUNT_, #2
2468c     A8 00 A0 FD | 	call	#pushregs_
24690     09 1F 02 F6 | 	mov	local01, arg01
24694     0A 13 02 F6 | 	mov	arg01, arg02
24698     EC FD BF FD | 	call	#__system____builtin_log2f
2469c     FD 20 02 F6 | 	mov	local02, result1
246a0     0F 13 02 F6 | 	mov	arg01, local01
246a4     E0 FD BF FD | 	call	#__system____builtin_log2f
246a8     FD 14 02 F6 | 	mov	arg02, result1
246ac     10 13 02 F6 | 	mov	arg01, local02
246b0     08 F2 BF FD | 	call	#__system___float_div
246b4     A7 F0 03 F6 | 	mov	ptra, fp
246b8     B2 00 A0 FD | 	call	#popregs_
246bc                 | __system____builtin_logbase_ret
246bc     2D 00 64 FD | 	ret
246c0                 | 
246c0                 | __system___float_pow_n
246c0     05 4A 05 F6 | 	mov	COUNT_, #5
246c4     A8 00 A0 FD | 	call	#pushregs_
246c8     09 1F 02 F6 | 	mov	local01, arg01
246cc     0A 21 02 F6 | 	mov	local02, arg02
246d0     0B 23 02 F6 | 	mov	local03, arg03
246d4     00 22 56 F2 | 	cmps	local03, #0 wc
246d8     18 00 90 3D |  if_ae	jmp	#LR__3470
246dc     01 24 06 F6 | 	mov	local04, #1
246e0     11 23 62 F6 | 	neg	local03, local03
246e4     00 22 56 F2 | 	cmps	local03, #0 wc
246e8     00 FA 05 C6 |  if_b	mov	result1, #0
246ec     94 00 90 CD |  if_b	jmp	#LR__3478
246f0     04 00 90 FD | 	jmp	#LR__3471
246f4                 | LR__3470
246f4     00 24 06 F6 | 	mov	local04, #0
246f8                 | LR__3471
246f8     00 C0 1F FF 
246fc     00 26 06 F6 | 	mov	local05, ##1065353216
24700                 | LR__3472
24700     01 22 56 F2 | 	cmps	local03, #1 wc
24704     30 00 90 CD |  if_b	jmp	#LR__3474
24708     01 22 CE F7 | 	test	local03, #1 wz
2470c     10 00 90 AD |  if_e	jmp	#LR__3473
24710     13 13 02 F6 | 	mov	arg01, local05
24714     10 15 02 F6 | 	mov	arg02, local02
24718     9C EF BF FD | 	call	#__system___float_mul
2471c     FD 26 02 F6 | 	mov	local05, result1
24720                 | LR__3473
24720     01 22 C6 F0 | 	sar	local03, #1
24724     10 13 02 F6 | 	mov	arg01, local02
24728     10 15 02 F6 | 	mov	arg02, local02
2472c     88 EF BF FD | 	call	#__system___float_mul
24730     FD 20 02 F6 | 	mov	local02, result1
24734     C8 FF 9F FD | 	jmp	#LR__3472
24738                 | LR__3474
24738     00 24 0E F2 | 	cmp	local04, #0 wz
2473c     14 00 90 AD |  if_e	jmp	#LR__3475
24740     0F 13 02 F6 | 	mov	arg01, local01
24744     13 15 02 F6 | 	mov	arg02, local05
24748     70 F1 BF FD | 	call	#__system___float_div
2474c     FD 26 02 F6 | 	mov	local05, result1
24750     2C 00 90 FD | 	jmp	#LR__3477
24754                 | LR__3475
24754     0F 13 02 F6 | 	mov	arg01, local01
24758     00 C0 1F FF 
2475c     00 14 06 F6 | 	mov	arg02, ##1065353216
24760     01 16 06 F6 | 	mov	arg03, #1
24764     84 F3 BF FD | 	call	#__system___float_cmp
24768     00 FA 0D F2 | 	cmp	result1, #0 wz
2476c     10 00 90 AD |  if_e	jmp	#LR__3476
24770     0F 13 02 F6 | 	mov	arg01, local01
24774     13 15 02 F6 | 	mov	arg02, local05
24778     3C EF BF FD | 	call	#__system___float_mul
2477c     FD 26 02 F6 | 	mov	local05, result1
24780                 | LR__3476
24780                 | LR__3477
24780     13 FB 01 F6 | 	mov	result1, local05
24784                 | LR__3478
24784     A7 F0 03 F6 | 	mov	ptra, fp
24788     B2 00 A0 FD | 	call	#popregs_
2478c                 | __system___float_pow_n_ret
2478c     2D 00 64 FD | 	ret
24790                 | 
24790                 | __system___gc_ptrs
24790     EC 00 02 F6 | 	mov	_var01, __heap_ptr
24794     00 03 02 F6 | 	mov	_var02, _var01
24798     76 01 00 FF 
2479c     F8 03 06 F1 | 	add	_var02, ##191992
247a0     00 FD 09 FB | 	rdlong	result2, _var01 wz
247a4     74 00 90 5D |  if_ne	jmp	#LR__3480
247a8     01 FD 01 F6 | 	mov	result2, _var02
247ac     00 FD 81 F1 | 	sub	result2, _var01
247b0     00 03 58 FC | 	wrword	#1, _var01
247b4     00 FB 01 F6 | 	mov	result1, _var01
247b8     02 FA 05 F1 | 	add	result1, #2
247bc     36 00 80 FF 
247c0     FD 20 59 FC | 	wrword	##27792, result1
247c4     00 FB 01 F6 | 	mov	result1, _var01
247c8     04 FA 05 F1 | 	add	result1, #4
247cc     FD 00 58 FC | 	wrword	#0, result1
247d0     00 FB 01 F6 | 	mov	result1, _var01
247d4     06 FA 05 F1 | 	add	result1, #6
247d8     FD 02 58 FC | 	wrword	#1, result1
247dc     10 00 06 F1 | 	add	_var01, #16
247e0     FE FC 51 F6 | 	abs	result2, result2 wc
247e4     04 FC 45 F0 | 	shr	result2, #4
247e8     FE FC 81 F6 | 	negc	result2, result2
247ec     00 FD 51 FC | 	wrword	result2, _var01
247f0     00 FD 01 F6 | 	mov	result2, _var01
247f4     02 FC 05 F1 | 	add	result2, #2
247f8     36 00 80 FF 
247fc     FE 1E 59 FC | 	wrword	##27791, result2
24800     00 FD 01 F6 | 	mov	result2, _var01
24804     04 FC 05 F1 | 	add	result2, #4
24808     FE 00 58 FC | 	wrword	#0, result2
2480c     00 FD 01 F6 | 	mov	result2, _var01
24810     06 FC 05 F1 | 	add	result2, #6
24814     FE 00 58 FC | 	wrword	#0, result2
24818     10 00 86 F1 | 	sub	_var01, #16
2481c                 | LR__3480
2481c     00 FB 01 F6 | 	mov	result1, _var01
24820     01 FD 01 F6 | 	mov	result2, _var02
24824                 | __system___gc_ptrs_ret
24824     2D 00 64 FD | 	ret
24828                 | 
24828                 | __system___gc_tryalloc
24828     0B 4A 05 F6 | 	mov	COUNT_, #11
2482c     A8 00 A0 FD | 	call	#pushregs_
24830     09 1F 02 F6 | 	mov	local01, arg01
24834     0A 21 02 F6 | 	mov	local02, arg02
24838     54 FF BF FD | 	call	#__system___gc_ptrs
2483c     FD 22 02 F6 | 	mov	local03, result1
24840     FE 24 02 F6 | 	mov	local04, result2
24844     11 27 02 F6 | 	mov	local05, local03
24848     00 28 06 F6 | 	mov	local06, #0
2484c     97 1E 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
24850                 | LR__3490
24850     13 2B 02 F6 | 	mov	local07, local05
24854     06 26 06 F1 | 	add	local05, #6
24858     13 15 EA FA | 	rdword	arg02, local05 wz
2485c     11 13 02 F6 | 	mov	arg01, local03
24860     00 FA 05 A6 |  if_e	mov	result1, #0
24864     04 14 66 50 |  if_ne	shl	arg02, #4
24868     0A 13 02 51 |  if_ne	add	arg01, arg02
2486c     09 FB 01 56 |  if_ne	mov	result1, arg01
24870     FD 26 0A F6 | 	mov	local05, result1 wz
24874     13 29 E2 5A |  if_ne	rdword	local06, local05
24878     00 26 0E F2 | 	cmp	local05, #0 wz
2487c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
24880     08 00 90 1D |  if_a	jmp	#LR__3492
24884     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
24888     C4 FF 9F 1D |  if_a	jmp	#LR__3490
2488c                 | LR__3491
2488c                 | LR__3492
2488c     00 26 0E F2 | 	cmp	local05, #0 wz
24890     13 FB 01 A6 |  if_e	mov	result1, local05
24894     3C 01 90 AD |  if_e	jmp	#LR__3495
24898     13 FD 01 F6 | 	mov	result2, local05
2489c     06 FC 05 F1 | 	add	result2, #6
248a0     FE 2C E2 FA | 	rdword	local08, result2
248a4     14 1F 52 F2 | 	cmps	local01, local06 wc
248a8     C0 00 90 3D |  if_ae	jmp	#LR__3494
248ac     13 1F 52 FC | 	wrword	local01, local05
248b0     13 13 02 F6 | 	mov	arg01, local05
248b4     0F 2D 02 F6 | 	mov	local08, local01
248b8     04 2C 66 F0 | 	shl	local08, #4
248bc     16 13 02 F1 | 	add	arg01, local08
248c0     0F 29 82 F1 | 	sub	local06, local01
248c4     09 29 52 FC | 	wrword	local06, arg01
248c8     09 2D 02 F6 | 	mov	local08, arg01
248cc     02 2C 06 F1 | 	add	local08, #2
248d0     36 00 80 FF 
248d4     16 1F 59 FC | 	wrword	##27791, local08
248d8     13 15 0A F6 | 	mov	arg02, local05 wz
248dc     00 FA 05 A6 |  if_e	mov	result1, #0
248e0     11 15 82 51 |  if_ne	sub	arg02, local03
248e4     04 14 46 50 |  if_ne	shr	arg02, #4
248e8     0A FB 01 56 |  if_ne	mov	result1, arg02
248ec     09 2D 02 F6 | 	mov	local08, arg01
248f0     04 2C 06 F1 | 	add	local08, #4
248f4     16 FB 51 FC | 	wrword	result1, local08
248f8     13 2D 02 F6 | 	mov	local08, local05
248fc     06 2C 06 F1 | 	add	local08, #6
24900     09 15 02 F6 | 	mov	arg02, arg01
24904     16 2D E2 FA | 	rdword	local08, local08
24908     06 14 06 F1 | 	add	arg02, #6
2490c     0A 2D 52 FC | 	wrword	local08, arg02
24910     09 2F 02 F6 | 	mov	local09, arg01
24914     17 15 0A F6 | 	mov	arg02, local09 wz
24918     00 FA 05 A6 |  if_e	mov	result1, #0
2491c     11 15 82 51 |  if_ne	sub	arg02, local03
24920     04 14 46 50 |  if_ne	shr	arg02, #4
24924     0A FB 01 56 |  if_ne	mov	result1, arg02
24928     FD 2C 02 F6 | 	mov	local08, result1
2492c     09 31 EA FA | 	rdword	local10, arg01 wz
24930     00 FA 05 A6 |  if_e	mov	result1, #0
24934     04 30 66 50 |  if_ne	shl	local10, #4
24938     18 13 02 51 |  if_ne	add	arg01, local10
2493c     09 FB 01 56 |  if_ne	mov	result1, arg01
24940     FD 32 0A F6 | 	mov	local11, result1 wz
24944     24 00 90 AD |  if_e	jmp	#LR__3493
24948     12 33 52 F2 | 	cmps	local11, local04 wc
2494c     1C 00 90 3D |  if_ae	jmp	#LR__3493
24950     17 15 0A F6 | 	mov	arg02, local09 wz
24954     00 FA 05 A6 |  if_e	mov	result1, #0
24958     11 15 82 51 |  if_ne	sub	arg02, local03
2495c     04 14 46 50 |  if_ne	shr	arg02, #4
24960     0A FB 01 56 |  if_ne	mov	result1, arg02
24964     04 32 06 F1 | 	add	local11, #4
24968     19 FB 51 FC | 	wrword	result1, local11
2496c                 | LR__3493
2496c                 | LR__3494
2496c     06 2A 06 F1 | 	add	local07, #6
24970     15 2D 52 FC | 	wrword	local08, local07
24974     36 00 00 FF 
24978     80 2E 06 F6 | 	mov	local09, ##27776
2497c     10 2F 42 F5 | 	or	local09, local02
24980     00 FA 05 F6 | 	mov	result1, #0
24984     01 FA 61 FD | 	cogid	result1
24988     FD 2E 42 F5 | 	or	local09, result1
2498c     13 33 02 F6 | 	mov	local11, local05
24990     02 32 06 F1 | 	add	local11, #2
24994     19 2F 52 FC | 	wrword	local09, local11
24998     11 2F 02 F6 | 	mov	local09, local03
2499c     08 2E 06 F1 | 	add	local09, #8
249a0     13 33 02 F6 | 	mov	local11, local05
249a4     17 2F E2 FA | 	rdword	local09, local09
249a8     06 32 06 F1 | 	add	local11, #6
249ac     19 2F 52 FC | 	wrword	local09, local11
249b0     13 15 0A F6 | 	mov	arg02, local05 wz
249b4     00 FA 05 A6 |  if_e	mov	result1, #0
249b8     11 15 82 51 |  if_ne	sub	arg02, local03
249bc     04 14 46 50 |  if_ne	shr	arg02, #4
249c0     0A FB 01 56 |  if_ne	mov	result1, arg02
249c4     08 22 06 F1 | 	add	local03, #8
249c8     11 FB 51 FC | 	wrword	result1, local03
249cc     08 26 06 F1 | 	add	local05, #8
249d0     13 FB 01 F6 | 	mov	result1, local05
249d4                 | LR__3495
249d4     A7 F0 03 F6 | 	mov	ptra, fp
249d8     B2 00 A0 FD | 	call	#popregs_
249dc                 | __system___gc_tryalloc_ret
249dc     2D 00 64 FD | 	ret
249e0                 | 
249e0                 | __system___gc_alloc_managed
249e0     01 4A 05 F6 | 	mov	COUNT_, #1
249e4     A8 00 A0 FD | 	call	#pushregs_
249e8     09 1F 02 F6 | 	mov	local01, arg01
249ec     00 14 06 F6 | 	mov	arg02, #0
249f0     1C 00 B0 FD | 	call	#__system___gc_doalloc
249f4     FD 14 0A F6 | 	mov	arg02, result1 wz
249f8     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
249fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24a00     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24a04     A7 F0 03 F6 | 	mov	ptra, fp
24a08     B2 00 A0 FD | 	call	#popregs_
24a0c                 | __system___gc_alloc_managed_ret
24a0c     2D 00 64 FD | 	ret
24a10                 | 
24a10                 | __system___gc_doalloc
24a10     06 4A 05 F6 | 	mov	COUNT_, #6
24a14     A8 00 A0 FD | 	call	#pushregs_
24a18     09 1F 0A F6 | 	mov	local01, arg01 wz
24a1c     0A 21 02 F6 | 	mov	local02, arg02
24a20     00 FA 05 A6 |  if_e	mov	result1, #0
24a24     8C 00 90 AD |  if_e	jmp	#LR__3507
24a28     17 1E 06 F1 | 	add	local01, #23
24a2c     0F 1E 26 F5 | 	andn	local01, #15
24a30     04 1E 46 F0 | 	shr	local01, #4
24a34     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24a38     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24a3c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24a40     C0 C0 BF FD | 	call	#__system___lockmem
24a44     0F 13 02 F6 | 	mov	arg01, local01
24a48     10 15 02 F6 | 	mov	arg02, local02
24a4c     D8 FD BF FD | 	call	#__system___gc_tryalloc
24a50     FD 22 0A F6 | 	mov	local03, result1 wz
24a54     14 00 90 5D |  if_ne	jmp	#LR__3500
24a58     70 03 B0 FD | 	call	#__system___gc_docollect
24a5c     0F 13 02 F6 | 	mov	arg01, local01
24a60     10 15 02 F6 | 	mov	arg02, local02
24a64     C0 FD BF FD | 	call	#__system___gc_tryalloc
24a68     FD 22 02 F6 | 	mov	local03, result1
24a6c                 | LR__3500
24a6c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24a70     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24a74     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24a78     09 01 68 FC | 	wrlong	#0, arg01
24a7c     00 22 0E F2 | 	cmp	local03, #0 wz
24a80     2C 00 90 AD |  if_e	jmp	#LR__3506
24a84     04 1E 66 F0 | 	shl	local01, #4
24a88     08 1E 86 F1 | 	sub	local01, #8
24a8c     0F 25 52 F6 | 	abs	local04, local01 wc
24a90     02 24 46 F0 | 	shr	local04, #2
24a94     12 27 8A F6 | 	negc	local05, local04 wz
24a98     11 29 02 F6 | 	mov	local06, local03
24a9c     10 00 90 AD |  if_e	jmp	#LR__3505
24aa0     97 06 48 FB | 	callpa	#(@LR__3503-@LR__3501)>>2,fcache_load_ptr_
24aa4                 | LR__3501
24aa4     13 05 D8 FC | 	rep	@LR__3504, local05
24aa8                 | LR__3502
24aa8     14 01 68 FC | 	wrlong	#0, local06
24aac     04 28 06 F1 | 	add	local06, #4
24ab0                 | LR__3503
24ab0                 | LR__3504
24ab0                 | LR__3505
24ab0                 | LR__3506
24ab0     11 FB 01 F6 | 	mov	result1, local03
24ab4                 | LR__3507
24ab4     A7 F0 03 F6 | 	mov	ptra, fp
24ab8     B2 00 A0 FD | 	call	#popregs_
24abc                 | __system___gc_doalloc_ret
24abc     2D 00 64 FD | 	ret
24ac0                 | 
24ac0                 | __system___gc_isvalidptr
24ac0     F8 16 06 F4 | 	bitl	arg03, #248
24ac4     08 16 86 F1 | 	sub	arg03, #8
24ac8     09 17 52 F2 | 	cmps	arg03, arg01 wc
24acc     08 00 90 CD |  if_b	jmp	#LR__3510
24ad0     0A 17 52 F2 | 	cmps	arg03, arg02 wc
24ad4     08 00 90 CD |  if_b	jmp	#LR__3511
24ad8                 | LR__3510
24ad8     00 FA 05 F6 | 	mov	result1, #0
24adc     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24ae0                 | LR__3511
24ae0     0B 01 02 F6 | 	mov	_var01, arg03
24ae4     09 01 62 F5 | 	xor	_var01, arg01
24ae8     0F 00 CE F7 | 	test	_var01, #15 wz
24aec     00 FA 05 56 |  if_ne	mov	result1, #0
24af0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
24af4     0B 01 02 F6 | 	mov	_var01, arg03
24af8     02 00 06 F1 | 	add	_var01, #2
24afc     00 01 E2 FA | 	rdword	_var01, _var01
24b00     7F 00 00 FF 
24b04     C0 01 06 F5 | 	and	_var01, ##65472
24b08     36 00 00 FF 
24b0c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24b10     00 FA 05 56 |  if_ne	mov	result1, #0
24b14     0B FB 01 A6 |  if_e	mov	result1, arg03
24b18                 | __system___gc_isvalidptr_ret
24b18     2D 00 64 FD | 	ret
24b1c                 | 
24b1c                 | __system___gc_free
24b1c     09 17 02 F6 | 	mov	arg03, arg01
24b20     6C FC BF FD | 	call	#__system___gc_ptrs
24b24     FD 12 02 F6 | 	mov	arg01, result1
24b28     FE 14 02 F6 | 	mov	arg02, result2
24b2c     90 FF BF FD | 	call	#__system___gc_isvalidptr
24b30     FD 14 0A F6 | 	mov	arg02, result1 wz
24b34     28 00 90 AD |  if_e	jmp	#LR__3520
24b38     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24b3c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24b40     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24b44     BC BF BF FD | 	call	#__system___lockmem
24b48     0A 13 02 F6 | 	mov	arg01, arg02
24b4c     14 00 B0 FD | 	call	#__system___gc_dofree
24b50     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24b54     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24b58     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24b5c     09 01 68 FC | 	wrlong	#0, arg01
24b60                 | LR__3520
24b60                 | __system___gc_free_ret
24b60     2D 00 64 FD | 	ret
24b64                 | 
24b64                 | __system___gc_dofree
24b64     06 4A 05 F6 | 	mov	COUNT_, #6
24b68     A8 00 A0 FD | 	call	#pushregs_
24b6c     09 1F 02 F6 | 	mov	local01, arg01
24b70     1C FC BF FD | 	call	#__system___gc_ptrs
24b74     FD 20 02 F6 | 	mov	local02, result1
24b78     FE 22 02 F6 | 	mov	local03, result2
24b7c     0F 15 02 F6 | 	mov	arg02, local01
24b80     02 14 06 F1 | 	add	arg02, #2
24b84     36 00 80 FF 
24b88     0A 1F 59 FC | 	wrword	##27791, arg02
24b8c     0F 25 02 F6 | 	mov	local04, local01
24b90     0F 13 02 F6 | 	mov	arg01, local01
24b94     09 27 EA FA | 	rdword	local05, arg01 wz
24b98     00 FA 05 A6 |  if_e	mov	result1, #0
24b9c     04 26 66 50 |  if_ne	shl	local05, #4
24ba0     13 13 02 51 |  if_ne	add	arg01, local05
24ba4     09 FB 01 56 |  if_ne	mov	result1, arg01
24ba8     FD 28 02 F6 | 	mov	local06, result1
24bac     97 24 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
24bb0                 | LR__3530
24bb0     04 24 06 F1 | 	add	local04, #4
24bb4     12 15 EA FA | 	rdword	arg02, local04 wz
24bb8     10 13 02 F6 | 	mov	arg01, local02
24bbc     00 FA 05 A6 |  if_e	mov	result1, #0
24bc0     04 14 66 50 |  if_ne	shl	arg02, #4
24bc4     0A 13 02 51 |  if_ne	add	arg01, arg02
24bc8     09 FB 01 56 |  if_ne	mov	result1, arg01
24bcc     FD 24 0A F6 | 	mov	local04, result1 wz
24bd0     24 00 90 AD |  if_e	jmp	#LR__3532
24bd4     12 13 02 F6 | 	mov	arg01, local04
24bd8     00 FA 05 F6 | 	mov	result1, #0
24bdc     02 12 06 F1 | 	add	arg01, #2
24be0     09 13 E2 FA | 	rdword	arg01, arg01
24be4     36 00 00 FF 
24be8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24bec     01 FA 65 A6 |  if_e	neg	result1, #1
24bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
24bf4     B8 FF 9F AD |  if_e	jmp	#LR__3530
24bf8                 | LR__3531
24bf8                 | LR__3532
24bf8     00 24 0E F2 | 	cmp	local04, #0 wz
24bfc     10 25 02 A6 |  if_e	mov	local04, local02
24c00     12 15 02 F6 | 	mov	arg02, local04
24c04     06 14 06 F1 | 	add	arg02, #6
24c08     0F 13 02 F6 | 	mov	arg01, local01
24c0c     0A 15 E2 FA | 	rdword	arg02, arg02
24c10     06 12 06 F1 | 	add	arg01, #6
24c14     09 15 52 FC | 	wrword	arg02, arg01
24c18     0F 15 0A F6 | 	mov	arg02, local01 wz
24c1c     00 FA 05 A6 |  if_e	mov	result1, #0
24c20     10 15 82 51 |  if_ne	sub	arg02, local02
24c24     04 14 46 50 |  if_ne	shr	arg02, #4
24c28     0A FB 01 56 |  if_ne	mov	result1, arg02
24c2c     12 15 02 F6 | 	mov	arg02, local04
24c30     06 14 06 F1 | 	add	arg02, #6
24c34     0A FB 51 FC | 	wrword	result1, arg02
24c38     10 25 0A F2 | 	cmp	local04, local02 wz
24c3c     A4 00 90 AD |  if_e	jmp	#LR__3535
24c40     12 13 02 F6 | 	mov	arg01, local04
24c44     09 27 EA FA | 	rdword	local05, arg01 wz
24c48     00 FA 05 A6 |  if_e	mov	result1, #0
24c4c     04 26 66 50 |  if_ne	shl	local05, #4
24c50     13 13 02 51 |  if_ne	add	arg01, local05
24c54     09 FB 01 56 |  if_ne	mov	result1, arg01
24c58     0F FB 09 F2 | 	cmp	result1, local01 wz
24c5c     84 00 90 5D |  if_ne	jmp	#LR__3534
24c60     12 29 E2 FA | 	rdword	local06, local04
24c64     0F 15 E2 FA | 	rdword	arg02, local01
24c68     0A 29 02 F1 | 	add	local06, arg02
24c6c     12 29 52 FC | 	wrword	local06, local04
24c70     0F 29 02 F6 | 	mov	local06, local01
24c74     02 28 06 F1 | 	add	local06, #2
24c78     14 01 58 FC | 	wrword	#0, local06
24c7c     0F 13 02 F6 | 	mov	arg01, local01
24c80     09 27 EA FA | 	rdword	local05, arg01 wz
24c84     00 FA 05 A6 |  if_e	mov	result1, #0
24c88     04 26 66 50 |  if_ne	shl	local05, #4
24c8c     13 13 02 51 |  if_ne	add	arg01, local05
24c90     09 FB 01 56 |  if_ne	mov	result1, arg01
24c94     FD 28 02 F6 | 	mov	local06, result1
24c98     11 29 52 F2 | 	cmps	local06, local03 wc
24c9c     20 00 90 3D |  if_ae	jmp	#LR__3533
24ca0     12 15 0A F6 | 	mov	arg02, local04 wz
24ca4     00 FA 05 A6 |  if_e	mov	result1, #0
24ca8     10 15 82 51 |  if_ne	sub	arg02, local02
24cac     04 14 46 50 |  if_ne	shr	arg02, #4
24cb0     0A FB 01 56 |  if_ne	mov	result1, arg02
24cb4     14 15 02 F6 | 	mov	arg02, local06
24cb8     04 14 06 F1 | 	add	arg02, #4
24cbc     0A FB 51 FC | 	wrword	result1, arg02
24cc0                 | LR__3533
24cc0     0F 15 02 F6 | 	mov	arg02, local01
24cc4     06 14 06 F1 | 	add	arg02, #6
24cc8     12 FD 01 F6 | 	mov	result2, local04
24ccc     0A 15 E2 FA | 	rdword	arg02, arg02
24cd0     06 FC 05 F1 | 	add	result2, #6
24cd4     FE 14 52 FC | 	wrword	arg02, result2
24cd8     06 1E 06 F1 | 	add	local01, #6
24cdc     0F 01 58 FC | 	wrword	#0, local01
24ce0     12 1F 02 F6 | 	mov	local01, local04
24ce4                 | LR__3534
24ce4                 | LR__3535
24ce4     0F 13 02 F6 | 	mov	arg01, local01
24ce8     09 27 EA FA | 	rdword	local05, arg01 wz
24cec     00 FA 05 A6 |  if_e	mov	result1, #0
24cf0     04 26 66 50 |  if_ne	shl	local05, #4
24cf4     13 13 02 51 |  if_ne	add	arg01, local05
24cf8     09 FB 01 56 |  if_ne	mov	result1, arg01
24cfc     FD 14 0A F6 | 	mov	arg02, result1 wz
24d00     B8 00 90 AD |  if_e	jmp	#LR__3537
24d04     11 15 52 F2 | 	cmps	arg02, local03 wc
24d08     B0 00 90 3D |  if_ae	jmp	#LR__3537
24d0c     0A 13 02 F6 | 	mov	arg01, arg02
24d10     00 FA 05 F6 | 	mov	result1, #0
24d14     02 12 06 F1 | 	add	arg01, #2
24d18     09 13 E2 FA | 	rdword	arg01, arg01
24d1c     36 00 00 FF 
24d20     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24d24     01 FA 65 A6 |  if_e	neg	result1, #1
24d28     00 FA 0D F2 | 	cmp	result1, #0 wz
24d2c     8C 00 90 AD |  if_e	jmp	#LR__3537
24d30     0F 25 02 F6 | 	mov	local04, local01
24d34     12 29 E2 FA | 	rdword	local06, local04
24d38     0A 13 02 F6 | 	mov	arg01, arg02
24d3c     09 1F E2 FA | 	rdword	local01, arg01
24d40     0F 29 02 F1 | 	add	local06, local01
24d44     12 29 52 FC | 	wrword	local06, local04
24d48     09 29 02 F6 | 	mov	local06, arg01
24d4c     06 28 06 F1 | 	add	local06, #6
24d50     12 1F 02 F6 | 	mov	local01, local04
24d54     14 29 E2 FA | 	rdword	local06, local06
24d58     06 1E 06 F1 | 	add	local01, #6
24d5c     0F 29 52 FC | 	wrword	local06, local01
24d60     09 29 02 F6 | 	mov	local06, arg01
24d64     02 28 06 F1 | 	add	local06, #2
24d68     14 55 59 FC | 	wrword	#170, local06
24d6c     09 29 02 F6 | 	mov	local06, arg01
24d70     06 28 06 F1 | 	add	local06, #6
24d74     14 01 58 FC | 	wrword	#0, local06
24d78     09 27 EA FA | 	rdword	local05, arg01 wz
24d7c     00 FA 05 A6 |  if_e	mov	result1, #0
24d80     04 26 66 50 |  if_ne	shl	local05, #4
24d84     13 13 02 51 |  if_ne	add	arg01, local05
24d88     09 FB 01 56 |  if_ne	mov	result1, arg01
24d8c     FD 28 0A F6 | 	mov	local06, result1 wz
24d90     28 00 90 AD |  if_e	jmp	#LR__3536
24d94     11 29 52 F2 | 	cmps	local06, local03 wc
24d98     20 00 90 3D |  if_ae	jmp	#LR__3536
24d9c     12 15 0A F6 | 	mov	arg02, local04 wz
24da0     00 FA 05 A6 |  if_e	mov	result1, #0
24da4     10 15 82 51 |  if_ne	sub	arg02, local02
24da8     04 14 46 50 |  if_ne	shr	arg02, #4
24dac     0A FB 01 56 |  if_ne	mov	result1, arg02
24db0     14 25 02 F6 | 	mov	local04, local06
24db4     04 24 06 F1 | 	add	local04, #4
24db8     12 FB 51 FC | 	wrword	result1, local04
24dbc                 | LR__3536
24dbc                 | LR__3537
24dbc     14 FB 01 F6 | 	mov	result1, local06
24dc0     A7 F0 03 F6 | 	mov	ptra, fp
24dc4     B2 00 A0 FD | 	call	#popregs_
24dc8                 | __system___gc_dofree_ret
24dc8     2D 00 64 FD | 	ret
24dcc                 | 
24dcc                 | __system___gc_docollect
24dcc     05 4A 05 F6 | 	mov	COUNT_, #5
24dd0     A8 00 A0 FD | 	call	#pushregs_
24dd4     B8 F9 BF FD | 	call	#__system___gc_ptrs
24dd8     FE 1E 02 F6 | 	mov	local01, result2
24ddc     FD 20 02 F6 | 	mov	local02, result1
24de0     10 13 02 F6 | 	mov	arg01, local02
24de4     09 23 EA FA | 	rdword	local03, arg01 wz
24de8     00 FA 05 A6 |  if_e	mov	result1, #0
24dec     04 22 66 50 |  if_ne	shl	local03, #4
24df0     11 13 02 51 |  if_ne	add	arg01, local03
24df4     09 FB 01 56 |  if_ne	mov	result1, arg01
24df8     FD 24 0A F6 | 	mov	local04, result1 wz
24dfc     00 FA 05 F6 | 	mov	result1, #0
24e00     01 FA 61 FD | 	cogid	result1
24e04     FD 26 02 F6 | 	mov	local05, result1
24e08     48 00 90 AD |  if_e	jmp	#LR__3542
24e0c     97 22 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
24e10                 | LR__3540
24e10     0F 25 52 F2 | 	cmps	local04, local01 wc
24e14     3C 00 90 3D |  if_ae	jmp	#LR__3542
24e18     12 15 02 F6 | 	mov	arg02, local04
24e1c     02 14 06 F1 | 	add	arg02, #2
24e20     0A 15 E2 FA | 	rdword	arg02, arg02
24e24     20 14 26 F5 | 	andn	arg02, #32
24e28     12 13 02 F6 | 	mov	arg01, local04
24e2c     02 12 06 F1 | 	add	arg01, #2
24e30     09 15 52 FC | 	wrword	arg02, arg01
24e34     12 13 02 F6 | 	mov	arg01, local04
24e38     09 23 EA FA | 	rdword	local03, arg01 wz
24e3c     00 FA 05 A6 |  if_e	mov	result1, #0
24e40     04 22 66 50 |  if_ne	shl	local03, #4
24e44     11 13 02 51 |  if_ne	add	arg01, local03
24e48     09 FB 01 56 |  if_ne	mov	result1, arg01
24e4c     FD 24 0A F6 | 	mov	local04, result1 wz
24e50     BC FF 9F 5D |  if_ne	jmp	#LR__3540
24e54                 | LR__3541
24e54                 | LR__3542
24e54     00 22 06 F6 | 	mov	local03, #0
24e58     00 12 06 F6 | 	mov	arg01, #0
24e5c     7C BC BF FD | 	call	#__system____topofstack
24e60     FD 14 02 F6 | 	mov	arg02, result1
24e64     11 13 02 F6 | 	mov	arg01, local03
24e68     90 00 B0 FD | 	call	#__system___gc_markhub
24e6c     1C 01 B0 FD | 	call	#__system___gc_markcog
24e70     10 13 02 F6 | 	mov	arg01, local02
24e74     09 23 EA FA | 	rdword	local03, arg01 wz
24e78     00 FA 05 A6 |  if_e	mov	result1, #0
24e7c     04 22 66 50 |  if_ne	shl	local03, #4
24e80     11 13 02 51 |  if_ne	add	arg01, local03
24e84     09 FB 01 56 |  if_ne	mov	result1, arg01
24e88     FD 20 0A F6 | 	mov	local02, result1 wz
24e8c     60 00 90 AD |  if_e	jmp	#LR__3546
24e90                 | LR__3543
24e90     10 25 02 F6 | 	mov	local04, local02
24e94     12 13 02 F6 | 	mov	arg01, local04
24e98     09 23 EA FA | 	rdword	local03, arg01 wz
24e9c     00 FA 05 A6 |  if_e	mov	result1, #0
24ea0     04 22 66 50 |  if_ne	shl	local03, #4
24ea4     11 13 02 51 |  if_ne	add	arg01, local03
24ea8     09 FB 01 56 |  if_ne	mov	result1, arg01
24eac     FD 20 02 F6 | 	mov	local02, result1
24eb0     12 15 02 F6 | 	mov	arg02, local04
24eb4     02 14 06 F1 | 	add	arg02, #2
24eb8     0A 15 E2 FA | 	rdword	arg02, arg02
24ebc     20 14 CE F7 | 	test	arg02, #32 wz
24ec0     10 14 CE A7 |  if_e	test	arg02, #16 wz
24ec4     1C 00 90 5D |  if_ne	jmp	#LR__3545
24ec8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24ecc     13 15 0A F2 | 	cmp	arg02, local05 wz
24ed0     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24ed4     0C 00 90 5D |  if_ne	jmp	#LR__3544
24ed8     12 13 02 F6 | 	mov	arg01, local04
24edc     84 FC BF FD | 	call	#__system___gc_dofree
24ee0     FD 20 02 F6 | 	mov	local02, result1
24ee4                 | LR__3544
24ee4                 | LR__3545
24ee4     00 20 0E F2 | 	cmp	local02, #0 wz
24ee8     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24eec     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3543
24ef0                 | LR__3546
24ef0     A7 F0 03 F6 | 	mov	ptra, fp
24ef4     B2 00 A0 FD | 	call	#popregs_
24ef8                 | __system___gc_docollect_ret
24ef8     2D 00 64 FD | 	ret
24efc                 | 
24efc                 | __system___gc_markhub
24efc     04 4A 05 F6 | 	mov	COUNT_, #4
24f00     A8 00 A0 FD | 	call	#pushregs_
24f04     09 1F 02 F6 | 	mov	local01, arg01
24f08     0A 21 02 F6 | 	mov	local02, arg02
24f0c     80 F8 BF FD | 	call	#__system___gc_ptrs
24f10     FD 22 02 F6 | 	mov	local03, result1
24f14     FE 24 02 F6 | 	mov	local04, result2
24f18                 | LR__3550
24f18     10 1F 52 F2 | 	cmps	local01, local02 wc
24f1c     60 00 90 3D |  if_ae	jmp	#LR__3551
24f20     0F 17 02 FB | 	rdlong	arg03, local01
24f24     04 1E 06 F1 | 	add	local01, #4
24f28     12 15 02 F6 | 	mov	arg02, local04
24f2c     11 13 02 F6 | 	mov	arg01, local03
24f30     8C FB BF FD | 	call	#__system___gc_isvalidptr
24f34     FD 16 0A F6 | 	mov	arg03, result1 wz
24f38     DC FF 9F AD |  if_e	jmp	#LR__3550
24f3c     0B 13 02 F6 | 	mov	arg01, arg03
24f40     00 FA 05 F6 | 	mov	result1, #0
24f44     02 12 06 F1 | 	add	arg01, #2
24f48     09 13 E2 FA | 	rdword	arg01, arg01
24f4c     36 00 00 FF 
24f50     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24f54     01 FA 65 A6 |  if_e	neg	result1, #1
24f58     00 FA 0D F2 | 	cmp	result1, #0 wz
24f5c     B8 FF 9F 5D |  if_ne	jmp	#LR__3550
24f60     0B FD 01 F6 | 	mov	result2, arg03
24f64     02 FC 05 F1 | 	add	result2, #2
24f68     FE FC E1 FA | 	rdword	result2, result2
24f6c     0F FC 25 F5 | 	andn	result2, #15
24f70     2E FC 45 F5 | 	or	result2, #46
24f74     02 16 06 F1 | 	add	arg03, #2
24f78     0B FD 51 FC | 	wrword	result2, arg03
24f7c     98 FF 9F FD | 	jmp	#LR__3550
24f80                 | LR__3551
24f80     A7 F0 03 F6 | 	mov	ptra, fp
24f84     B2 00 A0 FD | 	call	#popregs_
24f88                 | __system___gc_markhub_ret
24f88     2D 00 64 FD | 	ret
24f8c                 | 
24f8c                 | __system___gc_markcog
24f8c     04 4A 05 F6 | 	mov	COUNT_, #4
24f90     A8 00 A0 FD | 	call	#pushregs_
24f94     F8 F7 BF FD | 	call	#__system___gc_ptrs
24f98     FD 1E 02 F6 | 	mov	local01, result1
24f9c     FE 20 02 F6 | 	mov	local02, result2
24fa0     EF 23 06 F6 | 	mov	local03, #495
24fa4                 | LR__3560
24fa4                 | 	'.live	local03
24fa4     00 22 96 F9 | 	alts	local03, #0
24fa8     11 25 02 F6 | 	mov	local04, local03
24fac     0F 13 02 F6 | 	mov	arg01, local01
24fb0     10 15 02 F6 | 	mov	arg02, local02
24fb4     12 17 02 F6 | 	mov	arg03, local04
24fb8     04 FB BF FD | 	call	#__system___gc_isvalidptr
24fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
24fc0     18 00 90 AD |  if_e	jmp	#LR__3561
24fc4     FD 24 02 F6 | 	mov	local04, result1
24fc8     02 24 06 F1 | 	add	local04, #2
24fcc     12 25 E2 FA | 	rdword	local04, local04
24fd0     20 24 46 F5 | 	or	local04, #32
24fd4     02 FA 05 F1 | 	add	result1, #2
24fd8     FD 24 52 FC | 	wrword	local04, result1
24fdc                 | LR__3561
24fdc     01 22 86 F1 | 	sub	local03, #1
24fe0     00 22 56 F2 | 	cmps	local03, #0 wc
24fe4     BC FF 9F 3D |  if_ae	jmp	#LR__3560
24fe8     A7 F0 03 F6 | 	mov	ptra, fp
24fec     B2 00 A0 FD | 	call	#popregs_
24ff0                 | __system___gc_markcog_ret
24ff0     2D 00 64 FD | 	ret
24ff4                 | 
24ff4                 | __system__opendir
24ff4     06 4A 05 F6 | 	mov	COUNT_, #6
24ff8     A8 00 A0 FD | 	call	#pushregs_
24ffc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25000     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
25004     09 15 02 F6 | 	mov	arg02, arg01
25008     0F 13 02 F6 | 	mov	arg01, local01
2500c     00 16 06 F6 | 	mov	arg03, #0
25010     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25014     84 C2 BF FD | 	call	#__system____getvfsforfile
25018     FD 20 0A F6 | 	mov	local02, result1 wz
2501c     10 00 90 AD |  if_e	jmp	#LR__3570
25020     28 20 06 F1 | 	add	local02, #40
25024     10 17 0A FB | 	rdlong	arg03, local02 wz
25028     28 20 86 F1 | 	sub	local02, #40
2502c     14 00 90 5D |  if_ne	jmp	#LR__3571
25030                 | LR__3570
25030     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25034     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25038     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2503c     00 FA 05 F6 | 	mov	result1, #0
25040     90 00 90 FD | 	jmp	#LR__3573
25044                 | LR__3571
25044     5C 12 06 F6 | 	mov	arg01, #92
25048     10 14 06 F6 | 	mov	arg02, #16
2504c     C0 F9 BF FD | 	call	#__system___gc_doalloc
25050     FD 22 0A F6 | 	mov	local03, result1 wz
25054     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25058     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2505c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25060     00 FA 05 A6 |  if_e	mov	result1, #0
25064     6C 00 90 AD |  if_e	jmp	#LR__3573
25068     28 20 06 F1 | 	add	local02, #40
2506c     10 25 02 FB | 	rdlong	local04, local02
25070     12 27 02 F6 | 	mov	local05, local04
25074     28 20 86 F1 | 	sub	local02, #40
25078     13 26 46 F7 | 	zerox	local05, #19
2507c     14 24 46 F0 | 	shr	local04, #20
25080     02 24 66 F0 | 	shl	local04, #2
25084     ED 24 02 F1 | 	add	local04, __methods__
25088     12 25 02 FB | 	rdlong	local04, local04
2508c     11 13 02 F6 | 	mov	arg01, local03
25090     0F 15 02 F6 | 	mov	arg02, local01
25094     F2 28 02 F6 | 	mov	local06, objptr
25098     13 E5 01 F6 | 	mov	objptr, local05
2509c     2D 24 62 FD | 	call	local04
250a0     14 E5 01 F6 | 	mov	objptr, local06
250a4     FD 16 0A F6 | 	mov	arg03, result1 wz
250a8     20 00 90 AD |  if_e	jmp	#LR__3572
250ac     00 16 4E F2 | 	cmps	arg03, #0 wz
250b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
250b4     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
250b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
250bc     11 13 02 F6 | 	mov	arg01, local03
250c0     58 FA BF FD | 	call	#__system___gc_free
250c4     00 FA 05 F6 | 	mov	result1, #0
250c8     08 00 90 FD | 	jmp	#LR__3573
250cc                 | LR__3572
250cc     11 21 62 FC | 	wrlong	local02, local03
250d0     11 FB 01 F6 | 	mov	result1, local03
250d4                 | LR__3573
250d4     A7 F0 03 F6 | 	mov	ptra, fp
250d8     B2 00 A0 FD | 	call	#popregs_
250dc                 | __system__opendir_ret
250dc     2D 00 64 FD | 	ret
250e0                 | 
250e0                 | __system__closedir
250e0     04 4A 05 F6 | 	mov	COUNT_, #4
250e4     A8 00 A0 FD | 	call	#pushregs_
250e8     09 1F 02 F6 | 	mov	local01, arg01
250ec     0F 13 02 FB | 	rdlong	arg01, local01
250f0     2C 12 06 F1 | 	add	arg01, #44
250f4     09 21 02 FB | 	rdlong	local02, arg01
250f8     10 23 02 F6 | 	mov	local03, local02
250fc     13 22 46 F7 | 	zerox	local03, #19
25100     14 20 46 F0 | 	shr	local02, #20
25104     02 20 66 F0 | 	shl	local02, #2
25108     ED 20 02 F1 | 	add	local02, __methods__
2510c     10 21 02 FB | 	rdlong	local02, local02
25110     0F 13 02 F6 | 	mov	arg01, local01
25114     F2 24 02 F6 | 	mov	local04, objptr
25118     11 E5 01 F6 | 	mov	objptr, local03
2511c     2D 20 62 FD | 	call	local02
25120     12 E5 01 F6 | 	mov	objptr, local04
25124     FD 24 02 F6 | 	mov	local04, result1
25128     0F 13 02 F6 | 	mov	arg01, local01
2512c     EC F9 BF FD | 	call	#__system___gc_free
25130     00 24 4E F2 | 	cmps	local04, #0 wz
25134     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25138     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
2513c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25140     01 FA 65 56 |  if_ne	neg	result1, #1
25144     00 FA 05 A6 |  if_e	mov	result1, #0
25148     A7 F0 03 F6 | 	mov	ptra, fp
2514c     B2 00 A0 FD | 	call	#popregs_
25150                 | __system__closedir_ret
25150     2D 00 64 FD | 	ret
25154                 | 
25154                 | __system__readdir
25154     04 4A 05 F6 | 	mov	COUNT_, #4
25158     A8 00 A0 FD | 	call	#pushregs_
2515c     09 15 0A FB | 	rdlong	arg02, arg01 wz
25160     08 12 06 F1 | 	add	arg01, #8
25164     09 1F 02 F6 | 	mov	local01, arg01
25168     08 12 86 F1 | 	sub	arg01, #8
2516c     00 FA 05 A6 |  if_e	mov	result1, #0
25170     5C 00 90 AD |  if_e	jmp	#LR__3581
25174     30 14 06 F1 | 	add	arg02, #48
25178     0A 21 02 FB | 	rdlong	local02, arg02
2517c     10 23 02 F6 | 	mov	local03, local02
25180     13 22 46 F7 | 	zerox	local03, #19
25184     14 20 46 F0 | 	shr	local02, #20
25188     02 20 66 F0 | 	shl	local02, #2
2518c     ED 20 02 F1 | 	add	local02, __methods__
25190     10 21 02 FB | 	rdlong	local02, local02
25194     0F 15 02 F6 | 	mov	arg02, local01
25198     F2 24 02 F6 | 	mov	local04, objptr
2519c     11 E5 01 F6 | 	mov	objptr, local03
251a0     2D 20 62 FD | 	call	local02
251a4     12 E5 01 F6 | 	mov	objptr, local04
251a8     00 FA 4D F2 | 	cmps	result1, #0 wz
251ac     1C 00 90 AD |  if_e	jmp	#LR__3580
251b0     01 FA 55 F2 | 	cmps	result1, #1 wc
251b4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
251b8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
251bc     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
251c0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
251c4     00 FA 05 F6 | 	mov	result1, #0
251c8     04 00 90 FD | 	jmp	#LR__3581
251cc                 | LR__3580
251cc     0F FB 01 F6 | 	mov	result1, local01
251d0                 | LR__3581
251d0     A7 F0 03 F6 | 	mov	ptra, fp
251d4     B2 00 A0 FD | 	call	#popregs_
251d8                 | __system__readdir_ret
251d8     2D 00 64 FD | 	ret
251dc                 | 
251dc                 | __system___openraw
251dc     15 4A 05 F6 | 	mov	COUNT_, #21
251e0     A8 00 A0 FD | 	call	#pushregs_
251e4     09 1F 02 F6 | 	mov	local01, arg01
251e8     0A 21 02 F6 | 	mov	local02, arg02
251ec     0B 23 02 F6 | 	mov	local03, arg03
251f0     0C 25 02 F6 | 	mov	local04, arg04
251f4     04 26 06 F6 | 	mov	local05, #4
251f8     0F 29 02 F6 | 	mov	local06, local01
251fc     00 2A 06 F6 | 	mov	local07, #0
25200     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25204     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
25208     16 13 02 F6 | 	mov	arg01, local08
2520c     10 15 02 F6 | 	mov	arg02, local02
25210     00 16 06 F6 | 	mov	arg03, #0
25214     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25218     80 C0 BF FD | 	call	#__system____getvfsforfile
2521c     FD 2E 0A F6 | 	mov	local09, result1 wz
25220     10 00 90 AD |  if_e	jmp	#LR__3590
25224     20 2E 06 F1 | 	add	local09, #32
25228     17 FB 09 FB | 	rdlong	result1, local09 wz
2522c     20 2E 86 F1 | 	sub	local09, #32
25230     14 00 90 5D |  if_ne	jmp	#LR__3591
25234                 | LR__3590
25234     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25238     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2523c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25240     01 FA 65 F6 | 	neg	result1, #1
25244     8C 02 90 FD | 	jmp	#LR__3604
25248                 | LR__3591
25248     14 13 02 F6 | 	mov	arg01, local06
2524c     00 14 06 F6 | 	mov	arg02, #0
25250     34 16 06 F6 | 	mov	arg03, #52
25254     09 31 02 F6 | 	mov	local10, arg01
25258     98 00 A0 FD | 	call	#\builtin_bytefill_
2525c     20 2E 06 F1 | 	add	local09, #32
25260     17 33 02 FB | 	rdlong	local11, local09
25264     19 35 02 F6 | 	mov	local12, local11
25268     19 37 02 F6 | 	mov	local13, local11
2526c     20 2E 86 F1 | 	sub	local09, #32
25270     1B 39 02 F6 | 	mov	local14, local13
25274     13 34 46 F7 | 	zerox	local12, #19
25278     14 38 46 F0 | 	shr	local14, #20
2527c     02 38 66 F0 | 	shl	local14, #2
25280     ED 38 02 F1 | 	add	local14, __methods__
25284     1C 39 02 FB | 	rdlong	local14, local14
25288     14 3B 02 F6 | 	mov	local15, local06
2528c     16 3D 02 F6 | 	mov	local16, local08
25290     11 3F 02 F6 | 	mov	local17, local03
25294     1D 13 02 F6 | 	mov	arg01, local15
25298     1E 15 02 F6 | 	mov	arg02, local16
2529c     1F 17 02 F6 | 	mov	arg03, local17
252a0     F2 40 02 F6 | 	mov	local18, objptr
252a4     1A E5 01 F6 | 	mov	objptr, local12
252a8     2D 38 62 FD | 	call	local14
252ac     20 E5 01 F6 | 	mov	objptr, local18
252b0     FD 42 0A F6 | 	mov	local19, result1 wz
252b4     04 22 CE 57 |  if_ne	test	local03, #4 wz
252b8     58 00 90 AD |  if_e	jmp	#LR__3592
252bc     24 2E 06 F1 | 	add	local09, #36
252c0     17 33 02 FB | 	rdlong	local11, local09
252c4     19 35 02 F6 | 	mov	local12, local11
252c8     19 37 02 F6 | 	mov	local13, local11
252cc     24 2E 86 F1 | 	sub	local09, #36
252d0     1B 39 02 F6 | 	mov	local14, local13
252d4     13 34 46 F7 | 	zerox	local12, #19
252d8     14 38 46 F0 | 	shr	local14, #20
252dc     02 38 66 F0 | 	shl	local14, #2
252e0     ED 38 02 F1 | 	add	local14, __methods__
252e4     1C 39 02 FB | 	rdlong	local14, local14
252e8     14 3B 02 F6 | 	mov	local15, local06
252ec     16 3D 02 F6 | 	mov	local16, local08
252f0     12 3F 02 F6 | 	mov	local17, local04
252f4     1D 13 02 F6 | 	mov	arg01, local15
252f8     1E 15 02 F6 | 	mov	arg02, local16
252fc     1F 17 02 F6 | 	mov	arg03, local17
25300     F2 40 02 F6 | 	mov	local18, objptr
25304     1A E5 01 F6 | 	mov	objptr, local12
25308     2D 38 62 FD | 	call	local14
2530c     20 E5 01 F6 | 	mov	objptr, local18
25310     FD 42 02 F6 | 	mov	local19, result1
25314                 | LR__3592
25314     00 42 0E F2 | 	cmp	local19, #0 wz
25318     8C 01 90 5D |  if_ne	jmp	#LR__3602
2531c     11 45 02 F6 | 	mov	local20, local03
25320     03 44 0E F5 | 	and	local20, #3 wz
25324     02 26 46 55 |  if_ne	or	local05, #2
25328     01 44 0E F2 | 	cmp	local20, #1 wz
2532c     01 26 46 55 |  if_ne	or	local05, #1
25330     20 22 CE F7 | 	test	local03, #32 wz
25334     C0 26 46 55 |  if_ne	or	local05, #192
25338     08 28 06 F1 | 	add	local06, #8
2533c     14 27 62 FC | 	wrlong	local05, local06
25340     0C 28 06 F1 | 	add	local06, #12
25344     14 47 0A FB | 	rdlong	local21, local06 wz
25348     14 28 86 F1 | 	sub	local06, #20
2534c     18 00 90 5D |  if_ne	jmp	#LR__3593
25350     04 2E 06 F1 | 	add	local09, #4
25354     17 47 02 FB | 	rdlong	local21, local09
25358     04 2E 86 F1 | 	sub	local09, #4
2535c     14 28 06 F1 | 	add	local06, #20
25360     14 47 62 FC | 	wrlong	local21, local06
25364     14 28 86 F1 | 	sub	local06, #20
25368                 | LR__3593
25368     18 28 06 F1 | 	add	local06, #24
2536c     14 47 0A FB | 	rdlong	local21, local06 wz
25370     18 28 86 F1 | 	sub	local06, #24
25374     18 00 90 5D |  if_ne	jmp	#LR__3594
25378     08 2E 06 F1 | 	add	local09, #8
2537c     17 47 02 FB | 	rdlong	local21, local09
25380     08 2E 86 F1 | 	sub	local09, #8
25384     18 28 06 F1 | 	add	local06, #24
25388     14 47 62 FC | 	wrlong	local21, local06
2538c     18 28 86 F1 | 	sub	local06, #24
25390                 | LR__3594
25390     24 28 06 F1 | 	add	local06, #36
25394     14 47 0A FB | 	rdlong	local21, local06 wz
25398     24 28 86 F1 | 	sub	local06, #36
2539c     17 47 02 AB |  if_e	rdlong	local21, local09
253a0     24 28 06 A1 |  if_e	add	local06, #36
253a4     14 47 62 AC |  if_e	wrlong	local21, local06
253a8     24 28 86 A1 |  if_e	sub	local06, #36
253ac     28 28 06 F1 | 	add	local06, #40
253b0     14 47 0A FB | 	rdlong	local21, local06 wz
253b4     28 28 86 F1 | 	sub	local06, #40
253b8     18 00 90 5D |  if_ne	jmp	#LR__3595
253bc     10 2E 06 F1 | 	add	local09, #16
253c0     17 47 02 FB | 	rdlong	local21, local09
253c4     10 2E 86 F1 | 	sub	local09, #16
253c8     28 28 06 F1 | 	add	local06, #40
253cc     14 47 62 FC | 	wrlong	local21, local06
253d0     28 28 86 F1 | 	sub	local06, #40
253d4                 | LR__3595
253d4     30 28 06 F1 | 	add	local06, #48
253d8     14 47 0A FB | 	rdlong	local21, local06 wz
253dc     30 28 86 F1 | 	sub	local06, #48
253e0     18 00 90 5D |  if_ne	jmp	#LR__3596
253e4     0C 2E 06 F1 | 	add	local09, #12
253e8     17 47 02 FB | 	rdlong	local21, local09
253ec     0C 2E 86 F1 | 	sub	local09, #12
253f0     30 28 06 F1 | 	add	local06, #48
253f4     14 47 62 FC | 	wrlong	local21, local06
253f8     30 28 86 F1 | 	sub	local06, #48
253fc                 | LR__3596
253fc     1C 28 06 F1 | 	add	local06, #28
25400     14 47 0A FB | 	rdlong	local21, local06 wz
25404     1C 28 86 F1 | 	sub	local06, #28
25408     1C 00 90 5D |  if_ne	jmp	#LR__3597
2540c     01 2A 06 F6 | 	mov	local07, #1
25410     F2 12 02 F6 | 	mov	arg01, objptr
25414     00 D0 04 FF 
25418     00 12 46 F5 | 	or	arg01, ##161480704
2541c     1C 28 06 F1 | 	add	local06, #28
25420     14 13 62 FC | 	wrlong	arg01, local06
25424     1C 28 86 F1 | 	sub	local06, #28
25428                 | LR__3597
25428     20 28 06 F1 | 	add	local06, #32
2542c     14 47 0A FB | 	rdlong	local21, local06 wz
25430     20 28 86 F1 | 	sub	local06, #32
25434     1C 00 90 5D |  if_ne	jmp	#LR__3598
25438     01 2A 06 F6 | 	mov	local07, #1
2543c     F2 12 02 F6 | 	mov	arg01, objptr
25440     00 D8 04 FF 
25444     00 12 46 F5 | 	or	arg01, ##162529280
25448     20 28 06 F1 | 	add	local06, #32
2544c     14 13 62 FC | 	wrlong	arg01, local06
25450     20 28 86 F1 | 	sub	local06, #32
25454                 | LR__3598
25454     2C 28 06 F1 | 	add	local06, #44
25458     14 47 0A FB | 	rdlong	local21, local06 wz
2545c     2C 28 86 F1 | 	sub	local06, #44
25460     44 00 90 5D |  if_ne	jmp	#LR__3601
25464     14 2E 06 F1 | 	add	local09, #20
25468     17 47 0A FB | 	rdlong	local21, local09 wz
2546c     14 2E 86 F1 | 	sub	local09, #20
25470     18 00 90 AD |  if_e	jmp	#LR__3599
25474     14 2E 06 F1 | 	add	local09, #20
25478     17 47 02 FB | 	rdlong	local21, local09
2547c     2C 28 06 F1 | 	add	local06, #44
25480     14 47 62 FC | 	wrlong	local21, local06
25484     2C 28 86 F1 | 	sub	local06, #44
25488     1C 00 90 FD | 	jmp	#LR__3600
2548c                 | LR__3599
2548c     01 2A 06 F6 | 	mov	local07, #1
25490     F2 12 02 F6 | 	mov	arg01, objptr
25494     00 E0 04 FF 
25498     00 12 46 F5 | 	or	arg01, ##163577856
2549c     2C 28 06 F1 | 	add	local06, #44
254a0     14 13 62 FC | 	wrlong	arg01, local06
254a4     2C 28 86 F1 | 	sub	local06, #44
254a8                 | LR__3600
254a8                 | LR__3601
254a8                 | LR__3602
254a8     00 2A 0E F2 | 	cmp	local07, #0 wz
254ac     14 13 02 56 |  if_ne	mov	arg01, local06
254b0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
254b4     00 42 0E F2 | 	cmp	local19, #0 wz
254b8     00 12 06 A6 |  if_e	mov	arg01, #0
254bc     10 00 90 5D |  if_ne	jmp	#LR__3603
254c0     00 12 4E F2 | 	cmps	arg01, #0 wz
254c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
254c8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
254cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
254d0                 | LR__3603
254d0     21 FB 01 F6 | 	mov	result1, local19
254d4                 | LR__3604
254d4     A7 F0 03 F6 | 	mov	ptra, fp
254d8     B2 00 A0 FD | 	call	#popregs_
254dc                 | __system___openraw_ret
254dc     2D 00 64 FD | 	ret
254e0                 | 
254e0                 | __system___closeraw
254e0     05 4A 05 F6 | 	mov	COUNT_, #5
254e4     A8 00 A0 FD | 	call	#pushregs_
254e8     09 1F 02 F6 | 	mov	local01, arg01
254ec     00 20 06 F6 | 	mov	local02, #0
254f0     08 1E 06 F1 | 	add	local01, #8
254f4     0F FB 09 FB | 	rdlong	result1, local01 wz
254f8     08 1E 86 F1 | 	sub	local01, #8
254fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25500     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25504     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25508     01 FA 65 A6 |  if_e	neg	result1, #1
2550c     A8 00 90 AD |  if_e	jmp	#LR__3612
25510     2C 1E 06 F1 | 	add	local01, #44
25514     0F FB 09 FB | 	rdlong	result1, local01 wz
25518     2C 1E 86 F1 | 	sub	local01, #44
2551c     38 00 90 AD |  if_e	jmp	#LR__3610
25520     2C 1E 06 F1 | 	add	local01, #44
25524     0F 23 02 FB | 	rdlong	local03, local01
25528     11 25 02 F6 | 	mov	local04, local03
2552c     2C 1E 86 F1 | 	sub	local01, #44
25530     13 24 46 F7 | 	zerox	local04, #19
25534     14 22 46 F0 | 	shr	local03, #20
25538     02 22 66 F0 | 	shl	local03, #2
2553c     ED 22 02 F1 | 	add	local03, __methods__
25540     11 23 02 FB | 	rdlong	local03, local03
25544     0F 13 02 F6 | 	mov	arg01, local01
25548     F2 26 02 F6 | 	mov	local05, objptr
2554c     12 E5 01 F6 | 	mov	objptr, local04
25550     2D 22 62 FD | 	call	local03
25554     13 E5 01 F6 | 	mov	objptr, local05
25558                 | LR__3610
25558     24 1E 06 F1 | 	add	local01, #36
2555c     0F 27 0A FB | 	rdlong	local05, local01 wz
25560     24 1E 86 F1 | 	sub	local01, #36
25564     3C 00 90 AD |  if_e	jmp	#LR__3611
25568     24 1E 06 F1 | 	add	local01, #36
2556c     0F 23 02 FB | 	rdlong	local03, local01
25570     11 25 02 F6 | 	mov	local04, local03
25574     24 1E 86 F1 | 	sub	local01, #36
25578     13 24 46 F7 | 	zerox	local04, #19
2557c     14 22 46 F0 | 	shr	local03, #20
25580     02 22 66 F0 | 	shl	local03, #2
25584     ED 22 02 F1 | 	add	local03, __methods__
25588     11 23 02 FB | 	rdlong	local03, local03
2558c     0F 13 02 F6 | 	mov	arg01, local01
25590     F2 26 02 F6 | 	mov	local05, objptr
25594     12 E5 01 F6 | 	mov	objptr, local04
25598     2D 22 62 FD | 	call	local03
2559c     13 E5 01 F6 | 	mov	objptr, local05
255a0     FD 20 02 F6 | 	mov	local02, result1
255a4                 | LR__3611
255a4     0F 13 02 F6 | 	mov	arg01, local01
255a8     00 14 06 F6 | 	mov	arg02, #0
255ac     34 16 06 F6 | 	mov	arg03, #52
255b0     98 00 A0 FD | 	call	#\builtin_bytefill_
255b4     10 FB 01 F6 | 	mov	result1, local02
255b8                 | LR__3612
255b8     A7 F0 03 F6 | 	mov	ptra, fp
255bc     B2 00 A0 FD | 	call	#popregs_
255c0                 | __system___closeraw_ret
255c0     2D 00 64 FD | 	ret
255c4                 | 
255c4                 | __system___vfs_open_sdcardx
255c4     0B 4A 05 F6 | 	mov	COUNT_, #11
255c8     A8 00 A0 FD | 	call	#pushregs_
255cc     09 23 02 F6 | 	mov	local03, arg01
255d0     0A 25 02 F6 | 	mov	local04, arg02
255d4     0B 27 02 F6 | 	mov	local05, arg03
255d8     0C 29 02 F6 | 	mov	local06, arg04
255dc     01 00 00 FF 
255e0     24 12 06 F6 | 	mov	arg01, ##548
255e4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
255e8     FD 2A 02 F6 | 	mov	local07, result1
255ec     01 00 00 FF 
255f0     34 12 06 F6 | 	mov	arg01, ##564
255f4     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
255f8     FD 2C 02 F6 | 	mov	local08, result1
255fc     11 19 02 F6 | 	mov	arg04, local03
25600     1F 18 C6 F0 | 	sar	arg04, #31
25604     11 17 02 F6 | 	mov	arg03, local03
25608     01 12 06 F6 | 	mov	arg01, #1
2560c     00 14 06 F6 | 	mov	arg02, #0
25610     EC DB BF FD | 	call	#__system___int64_shl
25614     FD 1E 02 F6 | 	mov	local01, result1
25618     FE 2E 02 F6 | 	mov	local09, result2
2561c     12 19 02 F6 | 	mov	arg04, local04
25620     1F 18 C6 F0 | 	sar	arg04, #31
25624     12 17 02 F6 | 	mov	arg03, local04
25628     01 12 06 F6 | 	mov	arg01, #1
2562c     00 14 06 F6 | 	mov	arg02, #0
25630     CC DB BF FD | 	call	#__system___int64_shl
25634     FD 1E 42 F5 | 	or	local01, result1
25638     FE 2E 42 F5 | 	or	local09, result2
2563c     13 19 02 F6 | 	mov	arg04, local05
25640     1F 18 C6 F0 | 	sar	arg04, #31
25644     13 17 02 F6 | 	mov	arg03, local05
25648     01 12 06 F6 | 	mov	arg01, #1
2564c     00 14 06 F6 | 	mov	arg02, #0
25650     AC DB BF FD | 	call	#__system___int64_shl
25654     FD 1E 42 F5 | 	or	local01, result1
25658     FE 2E 42 F5 | 	or	local09, result2
2565c     14 19 02 F6 | 	mov	arg04, local06
25660     1F 18 C6 F0 | 	sar	arg04, #31
25664     14 17 02 F6 | 	mov	arg03, local06
25668     01 12 06 F6 | 	mov	arg01, #1
2566c     00 14 06 F6 | 	mov	arg02, #0
25670     8C DB BF FD | 	call	#__system___int64_shl
25674     17 15 02 F6 | 	mov	arg02, local09
25678     FD 1E 42 F5 | 	or	local01, result1
2567c     0A FD 41 F5 | 	or	result2, arg02
25680     FE 20 02 F6 | 	mov	local02, result2
25684     0F 13 02 F6 | 	mov	arg01, local01
25688     10 15 02 F6 | 	mov	arg02, local02
2568c     A8 DB BF FD | 	call	#__system___usepins
25690     00 FA 0D F2 | 	cmp	result1, #0 wz
25694     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25698     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2569c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
256a0     00 FA 05 A6 |  if_e	mov	result1, #0
256a4     B4 00 90 AD |  if_e	jmp	#LR__3622
256a8     0F 31 02 F6 | 	mov	local10, local01
256ac     10 2F 02 F6 | 	mov	local09, local02
256b0     01 00 00 FF 
256b4     08 2A 06 F1 | 	add	local07, ##520
256b8     15 31 62 FC | 	wrlong	local10, local07
256bc     04 2A 06 F1 | 	add	local07, #4
256c0     15 2F 62 FC | 	wrlong	local09, local07
256c4     01 00 00 FF 
256c8     0C 2A 86 F1 | 	sub	local07, ##524
256cc     14 1B 02 F6 | 	mov	arg05, local06
256d0     00 12 06 F6 | 	mov	arg01, #0
256d4     11 15 02 F6 | 	mov	arg02, local03
256d8     12 17 02 F6 | 	mov	arg03, local04
256dc     13 19 02 F6 | 	mov	arg04, local05
256e0     F2 30 02 F6 | 	mov	local10, objptr
256e4     15 E5 01 F6 | 	mov	objptr, local07
256e8     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
256ec     18 E5 01 F6 | 	mov	objptr, local10
256f0     FD 32 0A F6 | 	mov	local11, result1 wz
256f4     24 00 90 5D |  if_ne	jmp	#LR__3620
256f8     81 01 00 FF 
256fc     B6 15 06 F6 | 	mov	arg02, ##@LR__5037
25700     16 13 02 F6 | 	mov	arg01, local08
25704     00 16 06 F6 | 	mov	arg03, #0
25708     F2 32 02 F6 | 	mov	local11, objptr
2570c     15 E5 01 F6 | 	mov	objptr, local07
25710     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25714     19 E5 01 F6 | 	mov	objptr, local11
25718     FD 32 02 F6 | 	mov	local11, result1
2571c                 | LR__3620
2571c     00 32 0E F2 | 	cmp	local11, #0 wz
25720     24 00 90 AD |  if_e	jmp	#LR__3621
25724     0F 13 02 F6 | 	mov	arg01, local01
25728     10 15 02 F6 | 	mov	arg02, local02
2572c     5C DB BF FD | 	call	#__system___freepins
25730     19 13 6A F6 | 	neg	arg01, local11 wz
25734     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25738     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2573c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25740     00 FA 05 F6 | 	mov	result1, #0
25744     14 00 90 FD | 	jmp	#LR__3622
25748                 | LR__3621
25748     15 13 02 F6 | 	mov	arg01, local07
2574c     F2 32 02 F6 | 	mov	local11, objptr
25750     15 E5 01 F6 | 	mov	objptr, local07
25754     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25758     19 E5 01 F6 | 	mov	objptr, local11
2575c                 | LR__3622
2575c     A7 F0 03 F6 | 	mov	ptra, fp
25760     B2 00 A0 FD | 	call	#popregs_
25764                 | __system___vfs_open_sdcardx_ret
25764     2D 00 64 FD | 	ret
25768                 | 
25768                 | __system____default_getc
25768     03 4A 05 F6 | 	mov	COUNT_, #3
2576c     A8 00 A0 FD | 	call	#pushregs_
25770     09 1F 02 F6 | 	mov	local01, arg01
25774     0F 21 02 FB | 	rdlong	local02, local01
25778     08 20 06 F1 | 	add	local02, #8
2577c     10 23 02 FB | 	rdlong	local03, local02
25780     02 22 CE F7 | 	test	local03, #2 wz
25784     0F 13 02 56 |  if_ne	mov	arg01, local01
25788     00 01 B0 5D |  if_ne	call	#__system____default_flush
2578c     10 23 02 FB | 	rdlong	local03, local02
25790     01 22 46 F5 | 	or	local03, #1
25794     10 23 62 FC | 	wrlong	local03, local02
25798     08 20 86 F1 | 	sub	local02, #8
2579c     10 23 0A FB | 	rdlong	local03, local02 wz
257a0     0C 00 90 5D |  if_ne	jmp	#LR__3630
257a4     0F 13 02 F6 | 	mov	arg01, local01
257a8     68 18 B0 FD | 	call	#__system____default_filbuf
257ac     FD 22 02 F6 | 	mov	local03, result1
257b0                 | LR__3630
257b0     01 22 56 F2 | 	cmps	local03, #1 wc
257b4     01 FA 65 C6 |  if_b	neg	result1, #1
257b8     1C 00 90 CD |  if_b	jmp	#LR__3631
257bc     01 22 86 F1 | 	sub	local03, #1
257c0     10 23 62 FC | 	wrlong	local03, local02
257c4     04 20 06 F1 | 	add	local02, #4
257c8     10 23 02 FB | 	rdlong	local03, local02
257cc     11 FB C1 FA | 	rdbyte	result1, local03
257d0     01 22 06 F1 | 	add	local03, #1
257d4     10 23 62 FC | 	wrlong	local03, local02
257d8                 | LR__3631
257d8     A7 F0 03 F6 | 	mov	ptra, fp
257dc     B2 00 A0 FD | 	call	#popregs_
257e0                 | __system____default_getc_ret
257e0     2D 00 64 FD | 	ret
257e4                 | 
257e4                 | __system____default_putc
257e4     06 4A 05 F6 | 	mov	COUNT_, #6
257e8     A8 00 A0 FD | 	call	#pushregs_
257ec     09 1F 02 F6 | 	mov	local01, arg01
257f0     0A 21 02 F6 | 	mov	local02, arg02
257f4     10 23 02 FB | 	rdlong	local03, local02
257f8     08 22 06 F1 | 	add	local03, #8
257fc     11 FB 01 FB | 	rdlong	result1, local03
25800     01 FA CD F7 | 	test	result1, #1 wz
25804     10 13 02 56 |  if_ne	mov	arg01, local02
25808     80 00 B0 5D |  if_ne	call	#__system____default_flush
2580c     11 25 02 FB | 	rdlong	local04, local03
25810     02 24 46 F5 | 	or	local04, #2
25814     11 25 62 FC | 	wrlong	local04, local03
25818     08 22 86 F1 | 	sub	local03, #8
2581c     11 27 02 FB | 	rdlong	local05, local03
25820     10 22 06 F1 | 	add	local03, #16
25824     11 15 02 FB | 	rdlong	arg02, local03
25828     10 22 86 F1 | 	sub	local03, #16
2582c     13 FB 01 F6 | 	mov	result1, local05
25830     0A FB 01 F1 | 	add	result1, arg02
25834     FD 1E 42 FC | 	wrbyte	local01, result1
25838     0F 1F E2 F8 | 	getbyte	local01, local01, #0
2583c     01 26 06 F1 | 	add	local05, #1
25840     11 27 62 FC | 	wrlong	local05, local03
25844     06 20 06 F1 | 	add	local02, #6
25848     10 29 EA FA | 	rdword	local06, local02 wz
2584c     06 20 86 F1 | 	sub	local02, #6
25850     0C 22 06 51 |  if_ne	add	local03, #12
25854     11 25 02 5B |  if_ne	rdlong	local04, local03
25858     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
2585c     0C 00 90 AD |  if_e	jmp	#LR__3640
25860     0A 1E 0E F2 | 	cmp	local01, #10 wz
25864     01 28 0E A2 |  if_e	cmp	local06, #1 wz
25868     10 00 90 5D |  if_ne	jmp	#LR__3641
2586c                 | LR__3640
2586c     10 13 02 F6 | 	mov	arg01, local02
25870     18 00 B0 FD | 	call	#__system____default_flush
25874     00 FA 0D F2 | 	cmp	result1, #0 wz
25878     01 1E 66 56 |  if_ne	neg	local01, #1
2587c                 | LR__3641
2587c     0F FB 01 F6 | 	mov	result1, local01
25880     A7 F0 03 F6 | 	mov	ptra, fp
25884     B2 00 A0 FD | 	call	#popregs_
25888                 | __system____default_putc_ret
25888     2D 00 64 FD | 	ret
2588c                 | 
2588c                 | __system____default_flush
2588c     06 4A 05 F6 | 	mov	COUNT_, #6
25890     A8 00 A0 FD | 	call	#pushregs_
25894     09 1F 02 F6 | 	mov	local01, arg01
25898     0F 21 02 FB | 	rdlong	local02, local01
2589c     10 23 02 FB | 	rdlong	local03, local02
258a0     08 20 06 F1 | 	add	local02, #8
258a4     10 FB 01 FB | 	rdlong	result1, local02
258a8     08 20 86 F1 | 	sub	local02, #8
258ac     02 FA CD F7 | 	test	result1, #2 wz
258b0     D0 00 90 AD |  if_e	jmp	#LR__3652
258b4     01 22 56 F2 | 	cmps	local03, #1 wc
258b8     20 01 90 CD |  if_b	jmp	#LR__3654
258bc     08 1E 06 F1 | 	add	local01, #8
258c0     0F FB 01 FB | 	rdlong	result1, local01
258c4     08 1E 86 F1 | 	sub	local01, #8
258c8     40 FA CD F7 | 	test	result1, #64 wz
258cc     68 00 90 AD |  if_e	jmp	#LR__3651
258d0     08 1E 06 F1 | 	add	local01, #8
258d4     0F 17 02 FB | 	rdlong	arg03, local01
258d8     08 1E 86 F1 | 	sub	local01, #8
258dc     80 16 CE F7 | 	test	arg03, #128 wz
258e0     54 00 90 AD |  if_e	jmp	#LR__3650
258e4     30 1E 06 F1 | 	add	local01, #48
258e8     0F 25 02 FB | 	rdlong	local04, local01
258ec     12 27 02 F6 | 	mov	local05, local04
258f0     30 1E 86 F1 | 	sub	local01, #48
258f4     13 26 46 F7 | 	zerox	local05, #19
258f8     14 24 46 F0 | 	shr	local04, #20
258fc     02 24 66 F0 | 	shl	local04, #2
25900     ED 24 02 F1 | 	add	local04, __methods__
25904     12 25 02 FB | 	rdlong	local04, local04
25908     0F 13 02 F6 | 	mov	arg01, local01
2590c     00 14 06 F6 | 	mov	arg02, #0
25910     02 16 06 F6 | 	mov	arg03, #2
25914     F2 28 02 F6 | 	mov	local06, objptr
25918     13 E5 01 F6 | 	mov	objptr, local05
2591c     2D 24 62 FD | 	call	local04
25920     14 E5 01 F6 | 	mov	objptr, local06
25924     08 1E 06 F1 | 	add	local01, #8
25928     0F 29 02 FB | 	rdlong	local06, local01
2592c     80 28 26 F5 | 	andn	local06, #128
25930     0F 29 62 FC | 	wrlong	local06, local01
25934     08 1E 86 F1 | 	sub	local01, #8
25938                 | LR__3650
25938                 | LR__3651
25938     18 1E 06 F1 | 	add	local01, #24
2593c     0F 25 02 FB | 	rdlong	local04, local01
25940     12 27 02 F6 | 	mov	local05, local04
25944     18 1E 86 F1 | 	sub	local01, #24
25948     13 26 46 F7 | 	zerox	local05, #19
2594c     14 24 46 F0 | 	shr	local04, #20
25950     02 24 66 F0 | 	shl	local04, #2
25954     ED 24 02 F1 | 	add	local04, __methods__
25958     12 25 02 FB | 	rdlong	local04, local04
2595c     10 20 06 F1 | 	add	local02, #16
25960     10 15 02 FB | 	rdlong	arg02, local02
25964     10 20 86 F1 | 	sub	local02, #16
25968     0F 13 02 F6 | 	mov	arg01, local01
2596c     11 17 02 F6 | 	mov	arg03, local03
25970     F2 28 02 F6 | 	mov	local06, objptr
25974     13 E5 01 F6 | 	mov	objptr, local05
25978     2D 24 62 FD | 	call	local04
2597c     14 E5 01 F6 | 	mov	objptr, local06
25980     58 00 90 FD | 	jmp	#LR__3654
25984                 | LR__3652
25984     08 20 06 F1 | 	add	local02, #8
25988     10 29 02 FB | 	rdlong	local06, local02
2598c     08 20 86 F1 | 	sub	local02, #8
25990     01 28 CE F7 | 	test	local06, #1 wz
25994     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
25998     40 00 90 AD |  if_e	jmp	#LR__3653
2599c     30 1E 06 F1 | 	add	local01, #48
259a0     0F 25 02 FB | 	rdlong	local04, local01
259a4     12 27 02 F6 | 	mov	local05, local04
259a8     30 1E 86 F1 | 	sub	local01, #48
259ac     13 26 46 F7 | 	zerox	local05, #19
259b0     14 24 46 F0 | 	shr	local04, #20
259b4     02 24 66 F0 | 	shl	local04, #2
259b8     ED 24 02 F1 | 	add	local04, __methods__
259bc     12 25 02 FB | 	rdlong	local04, local04
259c0     0F 13 02 F6 | 	mov	arg01, local01
259c4     11 15 62 F6 | 	neg	arg02, local03
259c8     01 16 06 F6 | 	mov	arg03, #1
259cc     F2 28 02 F6 | 	mov	local06, objptr
259d0     13 E5 01 F6 | 	mov	objptr, local05
259d4     2D 24 62 FD | 	call	local04
259d8     14 E5 01 F6 | 	mov	objptr, local06
259dc                 | LR__3653
259dc                 | LR__3654
259dc     10 01 68 FC | 	wrlong	#0, local02
259e0     04 20 06 F1 | 	add	local02, #4
259e4     10 01 68 FC | 	wrlong	#0, local02
259e8     04 20 06 F1 | 	add	local02, #4
259ec     10 01 68 FC | 	wrlong	#0, local02
259f0     00 FA 05 F6 | 	mov	result1, #0
259f4     A7 F0 03 F6 | 	mov	ptra, fp
259f8     B2 00 A0 FD | 	call	#popregs_
259fc                 | __system____default_flush_ret
259fc     2D 00 64 FD | 	ret
25a00                 | 
25a00                 | __system____default_buffer_init
25a00     02 4A 05 F6 | 	mov	COUNT_, #2
25a04     A8 00 A0 FD | 	call	#pushregs_
25a08     09 1F 02 F6 | 	mov	local01, arg01
25a0c     0F 21 02 FB | 	rdlong	local02, local01
25a10     0F 13 02 F6 | 	mov	arg01, local01
25a14     34 03 B0 FD | 	call	#__system___isatty
25a18     00 FA 0D F2 | 	cmp	result1, #0 wz
25a1c     06 1E 06 51 |  if_ne	add	local01, #6
25a20     0F 0B 58 5C |  if_ne	wrword	#5, local01
25a24     06 1E 06 A1 |  if_e	add	local01, #6
25a28     0F 0D 58 AC |  if_e	wrword	#6, local01
25a2c     14 20 06 F1 | 	add	local02, #20
25a30     10 1F 02 F6 | 	mov	local01, local02
25a34     04 20 86 F1 | 	sub	local02, #4
25a38     10 1F 62 FC | 	wrlong	local01, local02
25a3c     04 20 86 F1 | 	sub	local02, #4
25a40     02 00 80 FF 
25a44     10 01 68 FC | 	wrlong	##1024, local02
25a48     00 FA 05 F6 | 	mov	result1, #0
25a4c     A7 F0 03 F6 | 	mov	ptra, fp
25a50     B2 00 A0 FD | 	call	#popregs_
25a54                 | __system____default_buffer_init_ret
25a54     2D 00 64 FD | 	ret
25a58                 | 
25a58                 | __system__stat
25a58     04 4A 05 F6 | 	mov	COUNT_, #4
25a5c     A8 00 A0 FD | 	call	#pushregs_
25a60     0A 1F 02 F6 | 	mov	local01, arg02
25a64     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25a68     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
25a6c     09 15 02 F6 | 	mov	arg02, arg01
25a70     10 13 02 F6 | 	mov	arg01, local02
25a74     00 16 06 F6 | 	mov	arg03, #0
25a78     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25a7c     1C B8 BF FD | 	call	#__system____getvfsforfile
25a80     FD 22 0A F6 | 	mov	local03, result1 wz
25a84     10 00 90 AD |  if_e	jmp	#LR__3660
25a88     34 22 06 F1 | 	add	local03, #52
25a8c     11 17 0A FB | 	rdlong	arg03, local03 wz
25a90     34 22 86 F1 | 	sub	local03, #52
25a94     14 00 90 5D |  if_ne	jmp	#LR__3661
25a98                 | LR__3660
25a98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25a9c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25aa0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25aa4     01 FA 65 F6 | 	neg	result1, #1
25aa8     68 00 90 FD | 	jmp	#LR__3662
25aac                 | LR__3661
25aac     0F 13 02 F6 | 	mov	arg01, local01
25ab0     00 14 06 F6 | 	mov	arg02, #0
25ab4     30 16 06 F6 | 	mov	arg03, #48
25ab8     09 25 02 F6 | 	mov	local04, arg01
25abc     98 00 A0 FD | 	call	#\builtin_bytefill_
25ac0     12 FB 01 F6 | 	mov	result1, local04
25ac4     10 13 CA FA | 	rdbyte	arg01, local02 wz
25ac8     08 1E 06 A1 |  if_e	add	local01, #8
25acc     08 00 80 AF 
25ad0     0F FF 6B AC |  if_e	wrlong	##4607, local01
25ad4     00 FA 05 A6 |  if_e	mov	result1, #0
25ad8     38 00 90 AD |  if_e	jmp	#LR__3662
25adc     34 22 06 F1 | 	add	local03, #52
25ae0     11 23 02 FB | 	rdlong	local03, local03
25ae4     11 25 02 F6 | 	mov	local04, local03
25ae8     13 22 46 F7 | 	zerox	local03, #19
25aec     14 24 46 F0 | 	shr	local04, #20
25af0     02 24 66 F0 | 	shl	local04, #2
25af4     ED 24 02 F1 | 	add	local04, __methods__
25af8     12 25 02 FB | 	rdlong	local04, local04
25afc     10 13 02 F6 | 	mov	arg01, local02
25b00     0F 15 02 F6 | 	mov	arg02, local01
25b04     F2 20 02 F6 | 	mov	local02, objptr
25b08     11 E5 01 F6 | 	mov	objptr, local03
25b0c     2D 24 62 FD | 	call	local04
25b10     10 E5 01 F6 | 	mov	objptr, local02
25b14                 | LR__3662
25b14     A7 F0 03 F6 | 	mov	ptra, fp
25b18     B2 00 A0 FD | 	call	#popregs_
25b1c                 | __system__stat_ret
25b1c     2D 00 64 FD | 	ret
25b20                 | 
25b20                 | __system__write
25b20     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b24     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25b28     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25b2c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25b30     01 FA 65 36 |  if_ae	neg	result1, #1
25b34     20 00 90 3D |  if_ae	jmp	#LR__3670
25b38     34 12 06 FD | 	qmul	arg01, #52
25b3c     02 00 00 FF 
25b40     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25b44     18 12 62 FD | 	getqx	arg01
25b48     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25b4c     02 00 00 FF 
25b50     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b54     0C 10 B0 FD | 	call	#__system___vfswrite
25b58                 | LR__3670
25b58                 | __system__write_ret
25b58     2D 00 64 FD | 	ret
25b5c                 | 
25b5c                 | __system__read
25b5c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b60     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25b64     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25b68     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25b6c     01 FA 65 36 |  if_ae	neg	result1, #1
25b70     20 00 90 3D |  if_ae	jmp	#LR__3680
25b74     34 12 06 FD | 	qmul	arg01, #52
25b78     02 00 00 FF 
25b7c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25b80     18 12 62 FD | 	getqx	arg01
25b84     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25b88     02 00 00 FF 
25b8c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b90     98 11 B0 FD | 	call	#__system___vfsread
25b94                 | LR__3680
25b94                 | __system__read_ret
25b94     2D 00 64 FD | 	ret
25b98                 | 
25b98                 | __system__close
25b98     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b9c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25ba0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25ba4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25ba8     01 FA 65 36 |  if_ae	neg	result1, #1
25bac     20 00 90 3D |  if_ae	jmp	#LR__3690
25bb0     34 12 06 FD | 	qmul	arg01, #52
25bb4     02 00 00 FF 
25bb8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25bbc     18 12 62 FD | 	getqx	arg01
25bc0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25bc4     02 00 00 FF 
25bc8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25bcc     10 F9 BF FD | 	call	#__system___closeraw
25bd0                 | LR__3690
25bd0                 | __system__close_ret
25bd0     2D 00 64 FD | 	ret
25bd4                 | 
25bd4                 | __system__lseek
25bd4     06 4A 05 F6 | 	mov	COUNT_, #6
25bd8     A8 00 A0 FD | 	call	#pushregs_
25bdc     0A 12 16 F2 | 	cmp	arg01, #10 wc
25be0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25be4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25be8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25bec     01 FA 65 36 |  if_ae	neg	result1, #1
25bf0     C4 00 90 3D |  if_ae	jmp	#LR__3701
25bf4     34 12 06 FD | 	qmul	arg01, #52
25bf8     02 00 00 FF 
25bfc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25c00     18 1E 62 FD | 	getqx	local01
25c04     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25c08     30 1E 06 F1 | 	add	local01, #48
25c0c     0F 13 0A FB | 	rdlong	arg01, local01 wz
25c10     30 1E 86 F1 | 	sub	local01, #48
25c14     02 00 00 FF 
25c18     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25c1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25c20     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25c24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25c28     01 FA 65 A6 |  if_e	neg	result1, #1
25c2c     88 00 90 AD |  if_e	jmp	#LR__3701
25c30     08 1E 06 F1 | 	add	local01, #8
25c34     0F 21 02 FB | 	rdlong	local02, local01
25c38     08 1E 86 F1 | 	sub	local01, #8
25c3c     40 20 CE F7 | 	test	local02, #64 wz
25c40     08 1E 06 51 |  if_ne	add	local01, #8
25c44     0F 21 02 5B |  if_ne	rdlong	local02, local01
25c48     80 20 46 55 |  if_ne	or	local02, #128
25c4c     0F 21 62 5C |  if_ne	wrlong	local02, local01
25c50     08 1E 86 51 |  if_ne	sub	local01, #8
25c54     30 1E 06 F1 | 	add	local01, #48
25c58     0F 23 02 FB | 	rdlong	local03, local01
25c5c     11 25 02 F6 | 	mov	local04, local03
25c60     30 1E 86 F1 | 	sub	local01, #48
25c64     13 24 46 F7 | 	zerox	local04, #19
25c68     14 22 46 F0 | 	shr	local03, #20
25c6c     02 22 66 F0 | 	shl	local03, #2
25c70     ED 22 02 F1 | 	add	local03, __methods__
25c74     11 23 02 FB | 	rdlong	local03, local03
25c78     0F 13 02 F6 | 	mov	arg01, local01
25c7c     F2 26 02 F6 | 	mov	local05, objptr
25c80     12 E5 01 F6 | 	mov	objptr, local04
25c84     2D 22 62 FD | 	call	local03
25c88     13 E5 01 F6 | 	mov	objptr, local05
25c8c     FD 28 02 F6 | 	mov	local06, result1
25c90     00 28 56 F2 | 	cmps	local06, #0 wc
25c94     1C 00 90 3D |  if_ae	jmp	#LR__3700
25c98     14 13 6A F6 | 	neg	arg01, local06 wz
25c9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25ca0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25ca4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25ca8     01 FA 65 56 |  if_ne	neg	result1, #1
25cac     00 FA 05 A6 |  if_e	mov	result1, #0
25cb0     04 00 90 FD | 	jmp	#LR__3701
25cb4                 | LR__3700
25cb4     14 FB 01 F6 | 	mov	result1, local06
25cb8                 | LR__3701
25cb8     A7 F0 03 F6 | 	mov	ptra, fp
25cbc     B2 00 A0 FD | 	call	#popregs_
25cc0                 | __system__lseek_ret
25cc0     2D 00 64 FD | 	ret
25cc4                 | 
25cc4                 | __system___ioctl
25cc4     03 4A 05 F6 | 	mov	COUNT_, #3
25cc8     A8 00 A0 FD | 	call	#pushregs_
25ccc     00 12 4E F2 | 	cmps	arg01, #0 wz
25cd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25cd4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25cd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25cdc     01 FA 65 A6 |  if_e	neg	result1, #1
25ce0     5C 00 90 AD |  if_e	jmp	#LR__3711
25ce4     28 12 06 F1 | 	add	arg01, #40
25ce8     09 1F 02 FB | 	rdlong	local01, arg01
25cec     0F 21 02 F6 | 	mov	local02, local01
25cf0     28 12 86 F1 | 	sub	arg01, #40
25cf4     13 20 46 F7 | 	zerox	local02, #19
25cf8     14 1E 46 F0 | 	shr	local01, #20
25cfc     02 1E 66 F0 | 	shl	local01, #2
25d00     ED 1E 02 F1 | 	add	local01, __methods__
25d04     0F 1F 02 FB | 	rdlong	local01, local01
25d08     F2 22 02 F6 | 	mov	local03, objptr
25d0c     10 E5 01 F6 | 	mov	objptr, local02
25d10     2D 1E 62 FD | 	call	local01
25d14     11 E5 01 F6 | 	mov	objptr, local03
25d18     FD 12 0A F6 | 	mov	arg01, result1 wz
25d1c     1C 00 90 AD |  if_e	jmp	#LR__3710
25d20     00 12 4E F2 | 	cmps	arg01, #0 wz
25d24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25d28     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25d2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25d30     01 FA 65 56 |  if_ne	neg	result1, #1
25d34     00 FA 05 A6 |  if_e	mov	result1, #0
25d38     04 00 90 FD | 	jmp	#LR__3711
25d3c                 | LR__3710
25d3c     00 FA 05 F6 | 	mov	result1, #0
25d40                 | LR__3711
25d40     A7 F0 03 F6 | 	mov	ptra, fp
25d44     B2 00 A0 FD | 	call	#popregs_
25d48                 | __system___ioctl_ret
25d48     2D 00 64 FD | 	ret
25d4c                 | 
25d4c                 | __system___isatty
25d4c     00 4A 05 F6 | 	mov	COUNT_, #0
25d50     A8 00 A0 FD | 	call	#pushregs_
25d54     0C F0 07 F1 | 	add	ptra, #12
25d58     04 4E 05 F1 | 	add	fp, #4
25d5c     A7 12 62 FC | 	wrlong	arg01, fp
25d60     04 4E 05 F1 | 	add	fp, #4
25d64     A7 16 02 F6 | 	mov	arg03, fp
25d68     08 4E 85 F1 | 	sub	fp, #8
25d6c     00 15 06 F6 | 	mov	arg02, #256
25d70     50 FF BF FD | 	call	#__system___ioctl
25d74     00 FA 0D F2 | 	cmp	result1, #0 wz
25d78     01 FA 05 A6 |  if_e	mov	result1, #1
25d7c     00 FA 05 56 |  if_ne	mov	result1, #0
25d80     A7 F0 03 F6 | 	mov	ptra, fp
25d84     B2 00 A0 FD | 	call	#popregs_
25d88                 | __system___isatty_ret
25d88     2D 00 64 FD | 	ret
25d8c                 | 
25d8c                 | __system____getftab
25d8c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25d90     34 12 06 CD |  if_b	qmul	arg01, #52
25d94     00 FA 05 36 |  if_ae	mov	result1, #0
25d98     02 00 00 CF 
25d9c     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25da0     18 FA 61 CD |  if_b	getqx	result1
25da4     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25da8     02 00 00 CF 
25dac     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25db0                 | __system____getftab_ret
25db0     2D 00 64 FD | 	ret
25db4                 | 
25db4                 | __system__strncpy
25db4     09 01 02 F6 | 	mov	_var01, arg01
25db8                 | LR__3720
25db8     01 16 86 F1 | 	sub	arg03, #1
25dbc     00 16 56 F2 | 	cmps	arg03, #0 wc
25dc0     18 00 90 CD |  if_b	jmp	#LR__3721
25dc4     0A FB C1 FA | 	rdbyte	result1, arg02
25dc8     00 FB 41 FC | 	wrbyte	result1, _var01
25dcc     01 14 06 F1 | 	add	arg02, #1
25dd0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25dd4     01 00 06 F1 | 	add	_var01, #1
25dd8     DC FF 9F 5D |  if_ne	jmp	#LR__3720
25ddc                 | LR__3721
25ddc     97 0C 48 FB | 	callpa	#(@LR__3723-@LR__3722)>>2,fcache_load_ptr_
25de0                 | LR__3722
25de0     01 16 86 F1 | 	sub	arg03, #1
25de4     00 16 56 F2 | 	cmps	arg03, #0 wc
25de8     00 03 02 36 |  if_ae	mov	_var02, _var01
25dec     01 00 06 31 |  if_ae	add	_var01, #1
25df0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25df4     E8 FF 9F 3D |  if_ae	jmp	#LR__3722
25df8                 | LR__3723
25df8     09 FB 01 F6 | 	mov	result1, arg01
25dfc                 | __system__strncpy_ret
25dfc     2D 00 64 FD | 	ret
25e00                 | 
25e00                 | __system__strncat
25e00     00 14 4E F2 | 	cmps	arg02, #0 wz
25e04     50 00 90 AD |  if_e	jmp	#LR__3734
25e08     01 16 16 F2 | 	cmp	arg03, #1 wc
25e0c     48 00 90 CD |  if_b	jmp	#LR__3734
25e10     09 01 02 F6 | 	mov	_var01, arg01
25e14     97 1E 48 FB | 	callpa	#(@LR__3732-@LR__3730)>>2,fcache_load_ptr_
25e18                 | LR__3730
25e18     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25e1c     01 00 06 51 |  if_ne	add	_var01, #1
25e20     F4 FF 9F 5D |  if_ne	jmp	#LR__3730
25e24     0B 03 02 F6 | 	mov	_var02, arg03
25e28                 | LR__3731
25e28     0A 05 C2 FA | 	rdbyte	_var03, arg02
25e2c     02 07 02 F6 | 	mov	_var04, _var03
25e30     07 06 4E F7 | 	zerox	_var04, #7 wz
25e34     01 14 06 F1 | 	add	arg02, #1
25e38     18 00 90 AD |  if_e	jmp	#LR__3733
25e3c     01 02 86 F1 | 	sub	_var02, #1
25e40     00 02 56 F2 | 	cmps	_var02, #0 wc
25e44     00 07 02 36 |  if_ae	mov	_var04, _var01
25e48     01 00 06 31 |  if_ae	add	_var01, #1
25e4c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25e50     D4 FF 9F 3D |  if_ae	jmp	#LR__3731
25e54                 | LR__3732
25e54                 | LR__3733
25e54     00 01 48 FC | 	wrbyte	#0, _var01
25e58                 | LR__3734
25e58     09 FB 01 F6 | 	mov	result1, arg01
25e5c                 | __system__strncat_ret
25e5c     2D 00 64 FD | 	ret
25e60                 | 
25e60                 | __system__strncmp
25e60     09 01 0A F6 | 	mov	_var01, arg01 wz
25e64     14 00 90 5D |  if_ne	jmp	#LR__3740
25e68     00 14 0E F2 | 	cmp	arg02, #0 wz
25e6c     01 02 66 56 |  if_ne	neg	_var02, #1
25e70     00 02 06 A6 |  if_e	mov	_var02, #0
25e74     01 FB 01 F6 | 	mov	result1, _var02
25e78     74 00 90 FD | 	jmp	#__system__strncmp_ret
25e7c                 | LR__3740
25e7c     00 14 0E F2 | 	cmp	arg02, #0 wz
25e80     01 FA 05 A6 |  if_e	mov	result1, #1
25e84     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25e88     0B 05 02 F6 | 	mov	_var03, arg03
25e8c     97 16 48 FB | 	callpa	#(@LR__3742-@LR__3741)>>2,fcache_load_ptr_
25e90                 | LR__3741
25e90     00 07 C2 FA | 	rdbyte	_var04, _var01
25e94     0A 09 02 F6 | 	mov	_var05, arg02
25e98     04 0B C2 FA | 	rdbyte	_var06, _var05
25e9c     01 04 86 F1 | 	sub	_var03, #1
25ea0     00 04 56 F2 | 	cmps	_var03, #0 wc
25ea4     01 00 06 F1 | 	add	_var01, #1
25ea8     01 14 06 F1 | 	add	arg02, #1
25eac     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25eb0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3743
25eb4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25eb8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3741
25ebc                 | LR__3742
25ebc                 | LR__3743
25ebc     00 04 56 F2 | 	cmps	_var03, #0 wc
25ec0     00 FA 05 C6 |  if_b	mov	result1, #0
25ec4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25ec8     05 07 0A F2 | 	cmp	_var04, _var06 wz
25ecc     00 FA 05 A6 |  if_e	mov	result1, #0
25ed0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25ed4     00 06 0E F2 | 	cmp	_var04, #0 wz
25ed8     01 FA 65 A6 |  if_e	neg	result1, #1
25edc     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25ee0     00 0A 0E F2 | 	cmp	_var06, #0 wz
25ee4     01 FA 05 A6 |  if_e	mov	result1, #1
25ee8     03 FB 01 56 |  if_ne	mov	result1, _var04
25eec     05 FB 81 51 |  if_ne	sub	result1, _var06
25ef0                 | __system__strncmp_ret
25ef0     2D 00 64 FD | 	ret
25ef4                 | 
25ef4                 | __system____root_opendir
25ef4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25ef8     04 12 06 F1 | 	add	arg01, #4
25efc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25f00     00 FA 05 F6 | 	mov	result1, #0
25f04     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25f08                 | __system____root_opendir_ret
25f08     2D 00 64 FD | 	ret
25f0c                 | 
25f0c                 | __system____root_readdir
25f0c     03 4A 05 F6 | 	mov	COUNT_, #3
25f10     A8 00 A0 FD | 	call	#pushregs_
25f14     09 1F 02 F6 | 	mov	local01, arg01
25f18     0A 21 02 F6 | 	mov	local02, arg02
25f1c     04 1E 06 F1 | 	add	local01, #4
25f20     0F 23 02 FB | 	rdlong	local03, local01
25f24     04 1E 86 F1 | 	sub	local01, #4
25f28                 | LR__3750
25f28     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25f2c     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25f30     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25f34     01 FA 65 A6 |  if_e	neg	result1, #1
25f38     48 00 90 AD |  if_e	jmp	#LR__3751
25f3c     11 17 0A FB | 	rdlong	arg03, local03 wz
25f40     04 22 06 A1 |  if_e	add	local03, #4
25f44     E0 FF 9F AD |  if_e	jmp	#LR__3750
25f48     11 15 02 FB | 	rdlong	arg02, local03
25f4c     01 14 06 F1 | 	add	arg02, #1
25f50     10 13 02 F6 | 	mov	arg01, local02
25f54     40 16 06 F6 | 	mov	arg03, #64
25f58     58 FE BF FD | 	call	#__system__strncpy
25f5c     50 20 06 F1 | 	add	local02, #80
25f60     10 03 48 FC | 	wrbyte	#1, local02
25f64     08 20 86 F1 | 	sub	local02, #8
25f68     10 01 68 FC | 	wrlong	#0, local02
25f6c     04 20 06 F1 | 	add	local02, #4
25f70     10 01 68 FC | 	wrlong	#0, local02
25f74     04 22 06 F1 | 	add	local03, #4
25f78     04 1E 06 F1 | 	add	local01, #4
25f7c     0F 23 62 FC | 	wrlong	local03, local01
25f80     00 FA 05 F6 | 	mov	result1, #0
25f84                 | LR__3751
25f84     A7 F0 03 F6 | 	mov	ptra, fp
25f88     B2 00 A0 FD | 	call	#popregs_
25f8c                 | __system____root_readdir_ret
25f8c     2D 00 64 FD | 	ret
25f90                 | 
25f90                 | __system____root_closedir
25f90     00 FA 05 F6 | 	mov	result1, #0
25f94                 | __system____root_closedir_ret
25f94     2D 00 64 FD | 	ret
25f98                 | 
25f98                 | __system____root_stat
25f98     0A 01 02 F6 | 	mov	_var01, arg02
25f9c     00 13 02 F6 | 	mov	arg01, _var01
25fa0     00 14 06 F6 | 	mov	arg02, #0
25fa4     30 16 06 F6 | 	mov	arg03, #48
25fa8     98 00 A0 FD | 	call	#\builtin_bytefill_
25fac     08 00 06 F1 | 	add	_var01, #8
25fb0     08 00 80 FF 
25fb4     00 FF 6B FC | 	wrlong	##4607, _var01
25fb8     00 FA 05 F6 | 	mov	result1, #0
25fbc                 | __system____root_stat_ret
25fbc     2D 00 64 FD | 	ret
25fc0                 | 
25fc0                 | __system___normalizeName
25fc0     00 00 06 F6 | 	mov	_var01, #0
25fc4     09 03 02 F6 | 	mov	_var02, arg01
25fc8     01 05 02 F6 | 	mov	_var03, _var02
25fcc                 | LR__3760
25fcc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25fd0     5C 01 90 AD |  if_e	jmp	#LR__3779
25fd4     00 00 0E F2 | 	cmp	_var01, #0 wz
25fd8     02 07 02 56 |  if_ne	mov	_var04, _var03
25fdc     01 04 06 51 |  if_ne	add	_var03, #1
25fe0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25fe4     00 00 06 56 |  if_ne	mov	_var01, #0
25fe8     01 07 C2 FA | 	rdbyte	_var04, _var02
25fec     2E 06 0E F2 | 	cmp	_var04, #46 wz
25ff0     D8 00 90 5D |  if_ne	jmp	#LR__3772
25ff4     01 02 06 F1 | 	add	_var02, #1
25ff8     01 07 C2 FA | 	rdbyte	_var04, _var02
25ffc     01 02 86 F1 | 	sub	_var02, #1
26000     2F 06 0E F2 | 	cmp	_var04, #47 wz
26004     18 00 90 AD |  if_e	jmp	#LR__3761
26008     01 02 06 F1 | 	add	_var02, #1
2600c     01 09 C2 FA | 	rdbyte	_var05, _var02
26010     01 02 86 F1 | 	sub	_var02, #1
26014     04 0B 02 F6 | 	mov	_var06, _var05
26018     07 0A 4E F7 | 	zerox	_var06, #7 wz
2601c     10 00 90 5D |  if_ne	jmp	#LR__3762
26020                 | LR__3761
26020     01 0D 02 F6 | 	mov	_var07, _var02
26024     01 0C 06 F1 | 	add	_var07, #1
26028     06 03 02 F6 | 	mov	_var02, _var07
2602c     E0 00 90 FD | 	jmp	#LR__3776
26030                 | LR__3762
26030     01 02 06 F1 | 	add	_var02, #1
26034     01 0D C2 FA | 	rdbyte	_var07, _var02
26038     01 02 86 F1 | 	sub	_var02, #1
2603c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26040     2E 06 0E F2 | 	cmp	_var04, #46 wz
26044     84 00 90 5D |  if_ne	jmp	#LR__3771
26048     02 02 06 F1 | 	add	_var02, #2
2604c     01 0D C2 FA | 	rdbyte	_var07, _var02
26050     02 02 86 F1 | 	sub	_var02, #2
26054     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26058     2F 06 0E F2 | 	cmp	_var04, #47 wz
2605c     18 00 90 AD |  if_e	jmp	#LR__3763
26060     02 02 06 F1 | 	add	_var02, #2
26064     01 09 C2 FA | 	rdbyte	_var05, _var02
26068     02 02 86 F1 | 	sub	_var02, #2
2606c     04 0B 02 F6 | 	mov	_var06, _var05
26070     07 0A 4E F7 | 	zerox	_var06, #7 wz
26074     54 00 90 5D |  if_ne	jmp	#LR__3770
26078                 | LR__3763
26078     02 02 06 F1 | 	add	_var02, #2
2607c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
26080     40 00 90 ED |  if_be	jmp	#LR__3769
26084     02 0F 02 F6 | 	mov	_var08, _var03
26088     01 0E 86 F1 | 	sub	_var08, #1
2608c                 | LR__3764
2608c     07 07 C2 FA | 	rdbyte	_var04, _var08
26090     2F 06 0E F2 | 	cmp	_var04, #47 wz
26094     0C 00 90 5D |  if_ne	jmp	#LR__3765
26098     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2609c     01 0E 86 11 |  if_a	sub	_var08, #1
260a0     E8 FF 9F 1D |  if_a	jmp	#LR__3764
260a4                 | LR__3765
260a4     97 0C 48 FB | 	callpa	#(@LR__3767-@LR__3766)>>2,fcache_load_ptr_
260a8                 | LR__3766
260a8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
260ac     10 00 90 ED |  if_be	jmp	#LR__3768
260b0     07 07 C2 FA | 	rdbyte	_var04, _var08
260b4     2F 06 0E F2 | 	cmp	_var04, #47 wz
260b8     01 0E 86 51 |  if_ne	sub	_var08, #1
260bc     E8 FF 9F 5D |  if_ne	jmp	#LR__3766
260c0                 | LR__3767
260c0                 | LR__3768
260c0     07 05 02 F6 | 	mov	_var03, _var08
260c4                 | LR__3769
260c4     01 00 06 F6 | 	mov	_var01, #1
260c8     44 00 90 FD | 	jmp	#LR__3776
260cc                 | LR__3770
260cc                 | LR__3771
260cc                 | LR__3772
260cc     97 18 48 FB | 	callpa	#(@LR__3774-@LR__3773)>>2,fcache_load_ptr_
260d0                 | LR__3773
260d0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
260d4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
260d8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
260dc     20 00 90 AD |  if_e	jmp	#LR__3775
260e0     01 0B 02 F6 | 	mov	_var06, _var02
260e4     01 09 02 F6 | 	mov	_var05, _var02
260e8     01 08 06 F1 | 	add	_var05, #1
260ec     05 11 C2 FA | 	rdbyte	_var09, _var06
260f0     04 03 02 F6 | 	mov	_var02, _var05
260f4     02 11 42 FC | 	wrbyte	_var09, _var03
260f8     01 04 06 F1 | 	add	_var03, #1
260fc     D0 FF 9F FD | 	jmp	#LR__3773
26100                 | LR__3774
26100                 | LR__3775
26100     01 07 C2 FA | 	rdbyte	_var04, _var02
26104     2F 06 0E F2 | 	cmp	_var04, #47 wz
26108     C0 FE 9F 5D |  if_ne	jmp	#LR__3760
2610c     01 00 06 F6 | 	mov	_var01, #1
26110                 | LR__3776
26110     97 0C 48 FB | 	callpa	#(@LR__3778-@LR__3777)>>2,fcache_load_ptr_
26114                 | LR__3777
26114     01 07 C2 FA | 	rdbyte	_var04, _var02
26118     2F 06 0E F2 | 	cmp	_var04, #47 wz
2611c     01 0D 02 A6 |  if_e	mov	_var07, _var02
26120     01 0C 06 A1 |  if_e	add	_var07, #1
26124     06 03 02 A6 |  if_e	mov	_var02, _var07
26128     E8 FF 9F AD |  if_e	jmp	#LR__3777
2612c                 | LR__3778
2612c     9C FE 9F FD | 	jmp	#LR__3760
26130                 | LR__3779
26130     02 01 48 FC | 	wrbyte	#0, _var03
26134                 | __system___normalizeName_ret
26134     2D 00 64 FD | 	ret
26138                 | 
26138                 | __system___strrev
26138     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2613c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
26140     09 03 02 F6 | 	mov	_var02, arg01
26144     97 1A 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
26148                 | LR__3780
26148     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2614c     01 02 06 51 |  if_ne	add	_var02, #1
26150     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
26154     01 02 86 F1 | 	sub	_var02, #1
26158                 | LR__3781
26158     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2615c     1C 00 90 ED |  if_be	jmp	#LR__3783
26160     09 01 C2 FA | 	rdbyte	_var01, arg01
26164     01 05 C2 FA | 	rdbyte	_var03, _var02
26168     09 05 42 FC | 	wrbyte	_var03, arg01
2616c     01 01 42 FC | 	wrbyte	_var01, _var02
26170     01 12 06 F1 | 	add	arg01, #1
26174     01 02 86 F1 | 	sub	_var02, #1
26178     DC FF 9F FD | 	jmp	#LR__3781
2617c                 | LR__3782
2617c                 | LR__3783
2617c                 | __system___strrev_ret
2617c     2D 00 64 FD | 	ret
26180                 | 
26180                 | __system___fmtpad
26180     06 4A 05 F6 | 	mov	COUNT_, #6
26184     A8 00 A0 FD | 	call	#pushregs_
26188     09 1F 02 F6 | 	mov	local01, arg01
2618c     0A 21 02 F6 | 	mov	local02, arg02
26190     0B 23 02 F6 | 	mov	local03, arg03
26194     10 13 EA F8 | 	getbyte	arg01, local02, #1
26198     16 20 46 F0 | 	shr	local02, #22
2619c     03 20 0E F5 | 	and	local02, #3 wz
261a0     00 24 06 F6 | 	mov	local04, #0
261a4     01 20 06 A6 |  if_e	mov	local02, #1
261a8     0C 21 CA F7 | 	test	local02, arg04 wz
261ac     00 FA 05 A6 |  if_e	mov	result1, #0
261b0     88 00 90 AD |  if_e	jmp	#LR__3793
261b4     09 23 C2 F2 | 	subr	local03, arg01
261b8     01 22 56 F2 | 	cmps	local03, #1 wc
261bc     00 FA 05 C6 |  if_b	mov	result1, #0
261c0     78 00 90 CD |  if_b	jmp	#LR__3793
261c4     03 20 0E F2 | 	cmp	local02, #3 wz
261c8     18 00 90 5D |  if_ne	jmp	#LR__3790
261cc     01 18 0E F2 | 	cmp	arg04, #1 wz
261d0     6E 20 62 FD | 	wrz	local02
261d4     10 23 02 F1 | 	add	local03, local02
261d8     11 23 52 F6 | 	abs	local03, local03 wc
261dc     01 22 46 F0 | 	shr	local03, #1
261e0     11 23 82 F6 | 	negc	local03, local03
261e4                 | LR__3790
261e4     01 22 56 F2 | 	cmps	local03, #1 wc
261e8     4C 00 90 CD |  if_b	jmp	#LR__3792
261ec     11 27 02 F6 | 	mov	local05, local03
261f0                 | LR__3791
261f0     0F 21 02 F6 | 	mov	local02, local01
261f4     0F 29 02 F6 | 	mov	local06, local01
261f8     13 20 46 F7 | 	zerox	local02, #19
261fc     14 28 46 F0 | 	shr	local06, #20
26200     02 28 66 F0 | 	shl	local06, #2
26204     ED 28 02 F1 | 	add	local06, __methods__
26208     14 29 02 FB | 	rdlong	local06, local06
2620c     20 12 06 F6 | 	mov	arg01, #32
26210     F2 22 02 F6 | 	mov	local03, objptr
26214     10 E5 01 F6 | 	mov	objptr, local02
26218     2D 28 62 FD | 	call	local06
2621c     11 E5 01 F6 | 	mov	objptr, local03
26220     FD 28 02 F6 | 	mov	local06, result1
26224     00 28 56 F2 | 	cmps	local06, #0 wc
26228     14 FB 01 C6 |  if_b	mov	result1, local06
2622c     0C 00 90 CD |  if_b	jmp	#LR__3793
26230     14 25 02 F1 | 	add	local04, local06
26234     EE 27 6E FB | 	djnz	local05, #LR__3791
26238                 | LR__3792
26238     12 FB 01 F6 | 	mov	result1, local04
2623c                 | LR__3793
2623c     A7 F0 03 F6 | 	mov	ptra, fp
26240     B2 00 A0 FD | 	call	#popregs_
26244                 | __system___fmtpad_ret
26244     2D 00 64 FD | 	ret
26248                 | 
26248                 | __system___uitoa
26248     04 4A 05 F6 | 	mov	COUNT_, #4
2624c     A8 00 A0 FD | 	call	#pushregs_
26250     09 1F 02 F6 | 	mov	local01, arg01
26254     00 1A 4E F2 | 	cmps	arg05, #0 wz
26258     0F 1B 02 F6 | 	mov	arg05, local01
2625c     00 20 06 F6 | 	mov	local02, #0
26260     37 22 06 56 |  if_ne	mov	local03, #55
26264     57 22 06 A6 |  if_e	mov	local03, #87
26268                 | LR__3800
26268     0B 15 12 FD | 	qdiv	arg02, arg03
2626c     19 24 62 FD | 	getqy	local04
26270     0B 15 12 FD | 	qdiv	arg02, arg03
26274     0A 24 16 F2 | 	cmp	local04, #10 wc
26278     30 24 06 C1 |  if_b	add	local04, #48
2627c     11 25 02 31 |  if_ae	add	local04, local03
26280     0D 25 42 FC | 	wrbyte	local04, arg05
26284     01 1A 06 F1 | 	add	arg05, #1
26288     01 20 06 F1 | 	add	local02, #1
2628c     18 14 62 FD | 	getqx	arg02
26290     00 14 0E F2 | 	cmp	arg02, #0 wz
26294     D0 FF 9F 5D |  if_ne	jmp	#LR__3800
26298     0C 21 12 F2 | 	cmp	local02, arg04 wc
2629c     C8 FF 9F CD |  if_b	jmp	#LR__3800
262a0     0D 01 48 FC | 	wrbyte	#0, arg05
262a4     0F 13 02 F6 | 	mov	arg01, local01
262a8     8C FE BF FD | 	call	#__system___strrev
262ac     10 FB 01 F6 | 	mov	result1, local02
262b0     A7 F0 03 F6 | 	mov	ptra, fp
262b4     B2 00 A0 FD | 	call	#popregs_
262b8                 | __system___uitoa_ret
262b8     2D 00 64 FD | 	ret
262bc                 | 
262bc                 | __system__disassemble_0498
262bc     10 4A 05 F6 | 	mov	COUNT_, #16
262c0     A8 00 A0 FD | 	call	#pushregs_
262c4     09 1F 02 F6 | 	mov	local01, arg01
262c8     0A 21 02 F6 | 	mov	local02, arg02
262cc     0B 23 02 F6 | 	mov	local03, arg03
262d0     0C 25 02 F6 | 	mov	local04, arg04
262d4     0D 27 02 F6 | 	mov	local05, arg05
262d8     13 13 52 F6 | 	abs	arg01, local05 wc
262dc     1F 28 C6 C9 |  if_b	decod	local06, #31
262e0     00 28 06 36 |  if_ae	mov	local06, #0
262e4     CC CF BF FD | 	call	#__system___float_fromuns
262e8     14 FB 61 F5 | 	xor	result1, local06
262ec     FD 2A 02 F6 | 	mov	local07, result1
262f0     00 2C 06 F6 | 	mov	local08, #0
262f4     0F 13 02 F6 | 	mov	arg01, local01
262f8     00 14 06 F6 | 	mov	arg02, #0
262fc     01 16 06 F6 | 	mov	arg03, #1
26300     E8 D7 BF FD | 	call	#__system___float_cmp
26304     00 FA 0D F2 | 	cmp	result1, #0 wz
26308     00 2E 06 A6 |  if_e	mov	local09, #0
2630c     10 01 68 AC |  if_e	wrlong	#0, local02
26310     11 2F 62 AC |  if_e	wrlong	local09, local03
26314     8C 01 90 AD |  if_e	jmp	#LR__3822
26318     0F 13 02 F6 | 	mov	arg01, local01
2631c     BC DC BF FD | 	call	#__system____builtin_ilogb
26320     FD 30 02 F6 | 	mov	local10, result1
26324     0A 26 0E F2 | 	cmp	local05, #10 wz
26328     24 00 90 5D |  if_ne	jmp	#LR__3810
2632c     18 2F 02 F6 | 	mov	local09, local10
26330     01 2E 66 F0 | 	shl	local09, #1
26334     18 2F 02 F1 | 	add	local09, local10
26338     17 31 52 F6 | 	abs	local10, local09 wc
2633c     0A 30 16 FD | 	qdiv	local10, #10
26340     09 32 06 F6 | 	mov	local11, #9
26344     18 30 62 FD | 	getqx	local10
26348     18 31 82 F6 | 	negc	local10, local10
2634c     04 00 90 FD | 	jmp	#LR__3811
26350                 | LR__3810
26350     18 32 06 F6 | 	mov	local11, #24
26354                 | LR__3811
26354                 | LR__3812
26354     08 2C 56 F2 | 	cmps	local08, #8 wc
26358     01 2C 06 F1 | 	add	local08, #1
2635c     60 00 90 3D |  if_ae	jmp	#LR__3813
26360     00 C0 1F FF 
26364     00 12 06 F6 | 	mov	arg01, ##1065353216
26368     15 15 02 F6 | 	mov	arg02, local07
2636c     18 17 02 F6 | 	mov	arg03, local10
26370     4C E3 BF FD | 	call	#__system___float_pow_n
26374     FD 14 02 F6 | 	mov	arg02, result1
26378     0F 13 02 F6 | 	mov	arg01, local01
2637c     3C D5 BF FD | 	call	#__system___float_div
26380     FD 34 02 F6 | 	mov	local12, result1
26384     1A 13 02 F6 | 	mov	arg01, local12
26388     00 C0 1F FF 
2638c     00 14 06 F6 | 	mov	arg02, ##1065353216
26390     01 16 06 F6 | 	mov	arg03, #1
26394     54 D7 BF FD | 	call	#__system___float_cmp
26398     00 FA 55 F2 | 	cmps	result1, #0 wc
2639c     01 30 86 C1 |  if_b	sub	local10, #1
263a0     B0 FF 9F CD |  if_b	jmp	#LR__3812
263a4     15 15 02 F6 | 	mov	arg02, local07
263a8     1A 13 02 F6 | 	mov	arg01, local12
263ac     01 16 66 F6 | 	neg	arg03, #1
263b0     38 D7 BF FD | 	call	#__system___float_cmp
263b4     00 FA 55 F2 | 	cmps	result1, #0 wc
263b8     01 30 06 31 |  if_ae	add	local10, #1
263bc     94 FF 9F 3D |  if_ae	jmp	#LR__3812
263c0                 | LR__3813
263c0     1A 13 02 F6 | 	mov	arg01, local12
263c4     14 DC BF FD | 	call	#__system____builtin_ilogb
263c8     FD 36 02 F6 | 	mov	local13, result1
263cc     1A 39 02 F6 | 	mov	local14, local12
263d0     17 39 06 F4 | 	bitl	local14, #279
263d4     17 38 26 F4 | 	bith	local14, #23
263d8     1B 39 62 F0 | 	shl	local14, local13
263dc     02 26 0E F2 | 	cmp	local05, #2 wz
263e0     02 24 66 A0 |  if_e	shl	local04, #2
263e4     00 3A 06 F6 | 	mov	local15, #0
263e8     00 24 56 F2 | 	cmps	local04, #0 wc
263ec     10 00 90 3D |  if_ae	jmp	#LR__3814
263f0     18 25 C2 F2 | 	subr	local04, local10
263f4     00 24 56 F2 | 	cmps	local04, #0 wc
263f8     A0 00 90 CD |  if_b	jmp	#LR__3821
263fc     04 00 90 FD | 	jmp	#LR__3815
26400                 | LR__3814
26400     01 24 06 F1 | 	add	local04, #1
26404                 | LR__3815
26404     19 25 7A F3 | 	fles	local04, local11 wcz
26408     01 3C 06 F6 | 	mov	local16, #1
2640c     97 22 48 FB | 	callpa	#(@LR__3817-@LR__3816)>>2,fcache_load_ptr_
26410                 | LR__3816
26410     00 40 00 FF 
26414     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26418     38 00 90 3D |  if_ae	jmp	#LR__3818
2641c     01 24 56 F2 | 	cmps	local04, #1 wc
26420     01 24 86 F1 | 	sub	local04, #1
26424     2C 00 90 CD |  if_b	jmp	#LR__3818
26428     13 3B 02 FD | 	qmul	local15, local05
2642c     1C 37 02 F6 | 	mov	local13, local14
26430     17 36 46 F0 | 	shr	local13, #23
26434     17 39 06 F4 | 	bitl	local14, #279
26438     18 3A 62 FD | 	getqx	local15
2643c     13 3D 02 FD | 	qmul	local16, local05
26440     18 3C 62 FD | 	getqx	local16
26444     13 39 02 FD | 	qmul	local14, local05
26448     1B 3B 02 F1 | 	add	local15, local13
2644c     18 38 62 FD | 	getqx	local14
26450     BC FF 9F FD | 	jmp	#LR__3816
26454                 | LR__3817
26454                 | LR__3818
26454     13 2F 02 F6 | 	mov	local09, local05
26458     17 2E 66 F0 | 	shl	local09, #23
2645c     17 37 52 F6 | 	abs	local13, local09 wc
26460     01 36 46 F0 | 	shr	local13, #1
26464     1B 37 82 F6 | 	negc	local13, local13
26468     1B 39 1A F2 | 	cmp	local14, local13 wcz
2646c     20 00 90 1D |  if_a	jmp	#LR__3819
26470     17 26 66 F0 | 	shl	local05, #23
26474     13 37 52 F6 | 	abs	local13, local05 wc
26478     01 36 46 F0 | 	shr	local13, #1
2647c     1B 37 82 F6 | 	negc	local13, local13
26480     1B 39 0A F2 | 	cmp	local14, local13 wz
26484     14 00 90 5D |  if_ne	jmp	#LR__3820
26488     01 3A CE F7 | 	test	local15, #1 wz
2648c     0C 00 90 AD |  if_e	jmp	#LR__3820
26490                 | LR__3819
26490     01 3A 06 F1 | 	add	local15, #1
26494     1E 3B 0A F2 | 	cmp	local15, local16 wz
26498     01 30 06 A1 |  if_e	add	local10, #1
2649c                 | LR__3820
2649c                 | LR__3821
2649c     10 3B 62 FC | 	wrlong	local15, local02
264a0     11 31 62 FC | 	wrlong	local10, local03
264a4                 | LR__3822
264a4     A7 F0 03 F6 | 	mov	ptra, fp
264a8     B2 00 A0 FD | 	call	#popregs_
264ac                 | __system__disassemble_0498_ret
264ac     2D 00 64 FD | 	ret
264b0                 | 
264b0                 | __system__emitsign_0500
264b0     00 FA 05 F6 | 	mov	result1, #0
264b4     00 14 0E F2 | 	cmp	arg02, #0 wz
264b8     09 01 02 56 |  if_ne	mov	_var01, arg01
264bc     01 12 06 51 |  if_ne	add	arg01, #1
264c0     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
264c4     01 FA 05 56 |  if_ne	mov	result1, #1
264c8     00 16 0E F2 | 	cmp	arg03, #0 wz
264cc     09 61 48 5C |  if_ne	wrbyte	#48, arg01
264d0     01 12 06 51 |  if_ne	add	arg01, #1
264d4     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
264d8     02 FA 05 51 |  if_ne	add	result1, #2
264dc                 | __system__emitsign_0500_ret
264dc     2D 00 64 FD | 	ret
264e0                 | 
264e0                 | __system___gettxfunc
264e0     01 4A 05 F6 | 	mov	COUNT_, #1
264e4     A8 00 A0 FD | 	call	#pushregs_
264e8     A0 F8 BF FD | 	call	#__system____getftab
264ec     FD 1E 0A F6 | 	mov	local01, result1 wz
264f0     10 00 90 AD |  if_e	jmp	#LR__3830
264f4     08 1E 06 F1 | 	add	local01, #8
264f8     0F 15 0A FB | 	rdlong	arg02, local01 wz
264fc     08 1E 86 F1 | 	sub	local01, #8
26500     08 00 90 5D |  if_ne	jmp	#LR__3831
26504                 | LR__3830
26504     00 FA 05 F6 | 	mov	result1, #0
26508     0C 00 90 FD | 	jmp	#LR__3832
2650c                 | LR__3831
2650c     00 98 04 FF 
26510     00 1E 46 F5 | 	or	local01, ##154140672
26514     0F FB 01 F6 | 	mov	result1, local01
26518                 | LR__3832
26518     A7 F0 03 F6 | 	mov	ptra, fp
2651c     B2 00 A0 FD | 	call	#popregs_
26520                 | __system___gettxfunc_ret
26520     2D 00 64 FD | 	ret
26524                 | 
26524                 | __system___getrxfunc
26524     01 4A 05 F6 | 	mov	COUNT_, #1
26528     A8 00 A0 FD | 	call	#pushregs_
2652c     5C F8 BF FD | 	call	#__system____getftab
26530     FD 1E 0A F6 | 	mov	local01, result1 wz
26534     10 00 90 AD |  if_e	jmp	#LR__3840
26538     08 1E 06 F1 | 	add	local01, #8
2653c     0F 15 0A FB | 	rdlong	arg02, local01 wz
26540     08 1E 86 F1 | 	sub	local01, #8
26544     08 00 90 5D |  if_ne	jmp	#LR__3841
26548                 | LR__3840
26548     00 FA 05 F6 | 	mov	result1, #0
2654c     0C 00 90 FD | 	jmp	#LR__3842
26550                 | LR__3841
26550     00 A0 04 FF 
26554     00 1E 46 F5 | 	or	local01, ##155189248
26558     0F FB 01 F6 | 	mov	result1, local01
2655c                 | LR__3842
2655c     A7 F0 03 F6 | 	mov	ptra, fp
26560     B2 00 A0 FD | 	call	#popregs_
26564                 | __system___getrxfunc_ret
26564     2D 00 64 FD | 	ret
26568                 | 
26568                 | __system___getiolock_0540
26568     01 4A 05 F6 | 	mov	COUNT_, #1
2656c     A8 00 A0 FD | 	call	#pushregs_
26570     18 F8 BF FD | 	call	#__system____getftab
26574     FD 1E 0A F6 | 	mov	local01, result1 wz
26578     10 00 90 AD |  if_e	jmp	#LR__3850
2657c     08 1E 06 F1 | 	add	local01, #8
26580     0F FB 09 FB | 	rdlong	result1, local01 wz
26584     08 1E 86 F1 | 	sub	local01, #8
26588     18 00 90 5D |  if_ne	jmp	#LR__3851
2658c                 | LR__3850
2658c     01 00 00 FF 
26590     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
26594     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26598     01 00 00 FF 
2659c     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
265a0     08 00 90 FD | 	jmp	#LR__3852
265a4                 | LR__3851
265a4     0C 1E 06 F1 | 	add	local01, #12
265a8     0F FB 01 F6 | 	mov	result1, local01
265ac                 | LR__3852
265ac     A7 F0 03 F6 | 	mov	ptra, fp
265b0     B2 00 A0 FD | 	call	#popregs_
265b4                 | __system___getiolock_0540_ret
265b4     2D 00 64 FD | 	ret
265b8                 | 
265b8                 | __system____ScanForChar
265b8     09 01 02 F6 | 	mov	_var01, arg01
265bc     09 03 02 F6 | 	mov	_var02, arg01
265c0     97 06 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
265c4                 | LR__3860
265c4     01 FB C9 FA | 	rdbyte	result1, _var02 wz
265c8     01 02 06 51 |  if_ne	add	_var02, #1
265cc     F4 FF 9F 5D |  if_ne	jmp	#LR__3860
265d0                 | LR__3861
265d0     09 03 82 F1 | 	sub	_var02, arg01
265d4     01 FB 01 F6 | 	mov	result1, _var02
265d8     FD 12 0A F6 | 	mov	arg01, result1 wz
265dc     00 FA 05 A6 |  if_e	mov	result1, #0
265e0     B8 00 90 AD |  if_e	jmp	#LR__3868
265e4     0A 05 02 F6 | 	mov	_var03, arg02
265e8     07 04 4E F7 | 	zerox	_var03, #7 wz
265ec     00 FA 05 A6 |  if_e	mov	result1, #0
265f0     A8 00 90 AD |  if_e	jmp	#LR__3868
265f4     01 16 16 F2 | 	cmp	arg03, #1 wc
265f8     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
265fc     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26600     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
26604     94 00 90 4D |  if_c_and_nz	jmp	#LR__3868
26608     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2660c     10 00 90 ED |  if_be	jmp	#LR__3862
26610     00 18 0E F2 | 	cmp	arg04, #0 wz
26614     00 FA 05 A6 |  if_e	mov	result1, #0
26618     80 00 90 AD |  if_e	jmp	#LR__3868
2661c     09 17 02 F6 | 	mov	arg03, arg01
26620                 | LR__3862
26620     01 16 86 F1 | 	sub	arg03, #1
26624     00 18 0E F2 | 	cmp	arg04, #0 wz
26628     38 00 90 5D |  if_ne	jmp	#LR__3864
2662c     0B 07 02 F6 | 	mov	_var04, arg03
26630     09 09 02 F6 | 	mov	_var05, arg01
26634                 | LR__3863
26634     04 07 12 F2 | 	cmp	_var04, _var05 wc
26638     5C 00 90 3D |  if_ae	jmp	#LR__3867
2663c     03 05 02 F6 | 	mov	_var03, _var04
26640     00 05 02 F1 | 	add	_var03, _var01
26644     02 05 C2 FA | 	rdbyte	_var03, _var03
26648     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2664c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26650     01 06 06 A1 |  if_e	add	_var04, #1
26654     03 FB 01 A6 |  if_e	mov	result1, _var04
26658     40 00 90 AD |  if_e	jmp	#LR__3868
2665c     01 06 06 F1 | 	add	_var04, #1
26660     D0 FF 9F FD | 	jmp	#LR__3863
26664                 | LR__3864
26664     0B 07 02 F6 | 	mov	_var04, arg03
26668                 | LR__3865
26668     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2666c     28 00 90 1D |  if_a	jmp	#LR__3866
26670     03 09 02 F6 | 	mov	_var05, _var04
26674     00 09 02 F1 | 	add	_var05, _var01
26678     04 05 C2 FA | 	rdbyte	_var03, _var05
2667c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
26680     04 05 0A F2 | 	cmp	_var03, _var05 wz
26684     01 06 06 A1 |  if_e	add	_var04, #1
26688     03 FB 01 A6 |  if_e	mov	result1, _var04
2668c     0C 00 90 AD |  if_e	jmp	#LR__3868
26690     01 06 86 F1 | 	sub	_var04, #1
26694     D0 FF 9F FD | 	jmp	#LR__3865
26698                 | LR__3866
26698                 | LR__3867
26698     00 FA 05 F6 | 	mov	result1, #0
2669c                 | LR__3868
2669c                 | __system____ScanForChar_ret
2669c     2D 00 64 FD | 	ret
266a0                 | 
266a0                 | __system___basic_dir
266a0     05 4A 05 F6 | 	mov	COUNT_, #5
266a4     A8 00 A0 FD | 	call	#pushregs_
266a8     4C F0 07 F1 | 	add	ptra, #76
266ac     04 4E 05 F1 | 	add	fp, #4
266b0     A7 12 62 FC | 	wrlong	arg01, fp
266b4     04 4E 05 F1 | 	add	fp, #4
266b8     A7 14 62 FC | 	wrlong	arg02, fp
266bc     04 4E 85 F1 | 	sub	fp, #4
266c0     A7 14 0A FB | 	rdlong	arg02, fp wz
266c4     04 4E 85 F1 | 	sub	fp, #4
266c8     04 4E 05 51 |  if_ne	add	fp, #4
266cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
266d0     04 4E 85 51 |  if_ne	sub	fp, #4
266d4     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
266d8     70 00 90 AD |  if_e	jmp	#LR__3870
266dc     03 00 00 FF 
266e0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
266e4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
266e8     03 00 00 FF 
266ec     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
266f0     03 00 00 5F 
266f4     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
266f8     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
266fc     03 00 00 5F 
26700     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
26704     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26708     81 01 00 FF 
2670c     B8 13 06 F6 | 	mov	arg01, ##@LR__5038
26710     E0 E8 BF FD | 	call	#__system__opendir
26714     03 00 00 FF 
26718     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2671c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26720     08 4E 05 F1 | 	add	fp, #8
26724     A7 20 02 FB | 	rdlong	local02, fp
26728     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2672c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26730     04 4E 85 F1 | 	sub	fp, #4
26734     A7 20 02 FB | 	rdlong	local02, fp
26738     04 4E 85 F1 | 	sub	fp, #4
2673c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26740     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26744     03 00 00 FF 
26748     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2674c                 | LR__3870
2674c     03 00 00 FF 
26750     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26754     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26758     03 00 00 FF 
2675c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26760     81 01 00 AF 
26764     BA FB 05 A6 |  if_e	mov	result1, ##@LR__5039
26768     84 02 90 AD |  if_e	jmp	#LR__3883
2676c                 | LR__3871
2676c     03 00 00 FF 
26770     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26774     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26778     03 00 00 FF 
2677c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26780     D0 E9 BF FD | 	call	#__system__readdir
26784     0C 4E 05 F1 | 	add	fp, #12
26788     A7 FA 61 FC | 	wrlong	result1, fp
2678c     0C 4E 85 F1 | 	sub	fp, #12
26790     00 FA 0D F2 | 	cmp	result1, #0 wz
26794     38 00 90 5D |  if_ne	jmp	#LR__3872
26798     03 00 00 FF 
2679c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
267a0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
267a4     03 00 00 FF 
267a8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
267ac     30 E9 BF FD | 	call	#__system__closedir
267b0     03 00 00 FF 
267b4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
267b8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
267bc     03 00 00 FF 
267c0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
267c4     81 01 00 FF 
267c8     BC FB 05 F6 | 	mov	result1, ##@LR__5040
267cc     20 02 90 FD | 	jmp	#LR__3883
267d0                 | LR__3872
267d0     0C 4E 05 F1 | 	add	fp, #12
267d4     A7 12 02 FB | 	rdlong	arg01, fp
267d8     0C 4E 85 F1 | 	sub	fp, #12
267dc     03 00 00 FF 
267e0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
267e4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
267e8     03 00 00 FF 
267ec     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
267f0     10 09 B0 FD | 	call	#__system___pat_match
267f4     00 FA 0D F2 | 	cmp	result1, #0 wz
267f8     70 FF 9F AD |  if_e	jmp	#LR__3871
267fc     03 00 00 FF 
26800     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26804     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26808     03 00 00 FF 
2680c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26810     78 01 90 AD |  if_e	jmp	#LR__3879
26814     0C 4E 05 F1 | 	add	fp, #12
26818     A7 12 02 FB | 	rdlong	arg01, fp
2681c     04 4E 05 F1 | 	add	fp, #4
26820     A7 14 02 F6 | 	mov	arg02, fp
26824     10 4E 85 F1 | 	sub	fp, #16
26828     2C F2 BF FD | 	call	#__system__stat
2682c     40 4E 05 F1 | 	add	fp, #64
26830     A7 FA 61 FC | 	wrlong	result1, fp
26834     40 4E 85 F1 | 	sub	fp, #64
26838     00 FA 0D F2 | 	cmp	result1, #0 wz
2683c     81 01 00 5F 
26840     BE FB 05 56 |  if_ne	mov	result1, ##@LR__5041
26844     A8 01 90 5D |  if_ne	jmp	#LR__3883
26848     18 4E 05 F1 | 	add	fp, #24
2684c     A7 20 02 FB | 	rdlong	local02, fp
26850     78 00 00 FF 
26854     00 20 06 F5 | 	and	local02, ##61440
26858     2C 4E 05 F1 | 	add	fp, #44
2685c     A7 20 62 FC | 	wrlong	local02, fp
26860     38 4E 85 F1 | 	sub	fp, #56
26864     A7 20 02 FB | 	rdlong	local02, fp
26868     0C 4E 85 F1 | 	sub	fp, #12
2686c     10 21 C2 FA | 	rdbyte	local02, local02
26870     2E 20 0E F2 | 	cmp	local02, #46 wz
26874     08 4E 05 A1 |  if_e	add	fp, #8
26878     A7 04 68 AC |  if_e	wrlong	#2, fp
2687c     08 4E C5 F3 | 	sumz	fp, #8
26880     A7 00 68 5C |  if_ne	wrlong	#0, fp
26884     08 4E 85 51 |  if_ne	sub	fp, #8
26888     44 4E 05 F1 | 	add	fp, #68
2688c     A7 20 02 FB | 	rdlong	local02, fp
26890     44 4E 85 F1 | 	sub	fp, #68
26894     08 00 00 FF 
26898     00 20 0E F2 | 	cmp	local02, ##4096 wz
2689c     18 00 90 5D |  if_ne	jmp	#LR__3873
268a0     08 4E 05 F1 | 	add	fp, #8
268a4     A7 20 02 FB | 	rdlong	local02, fp
268a8     10 20 46 F5 | 	or	local02, #16
268ac     A7 20 62 FC | 	wrlong	local02, fp
268b0     08 4E 85 F1 | 	sub	fp, #8
268b4     AC 00 90 FD | 	jmp	#LR__3878
268b8                 | LR__3873
268b8     44 4E 05 F1 | 	add	fp, #68
268bc     A7 20 02 FB | 	rdlong	local02, fp
268c0     44 4E 85 F1 | 	sub	fp, #68
268c4     10 00 00 FF 
268c8     00 20 0E F2 | 	cmp	local02, ##8192 wz
268cc     44 4E 05 51 |  if_ne	add	fp, #68
268d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
268d4     44 4E 85 51 |  if_ne	sub	fp, #68
268d8     18 00 00 5F 
268dc     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
268e0     44 4E 05 51 |  if_ne	add	fp, #68
268e4     0F 23 02 56 |  if_ne	mov	local03, local01
268e8     44 4E 85 51 |  if_ne	sub	fp, #68
268ec     20 00 00 5F 
268f0     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
268f4     18 00 90 5D |  if_ne	jmp	#LR__3874
268f8     08 4E 05 F1 | 	add	fp, #8
268fc     A7 20 02 FB | 	rdlong	local02, fp
26900     04 20 46 F5 | 	or	local02, #4
26904     A7 20 62 FC | 	wrlong	local02, fp
26908     08 4E 85 F1 | 	sub	fp, #8
2690c     54 00 90 FD | 	jmp	#LR__3877
26910                 | LR__3874
26910     18 4E 05 F1 | 	add	fp, #24
26914     A7 20 02 FB | 	rdlong	local02, fp
26918     18 4E 85 F1 | 	sub	fp, #24
2691c     92 20 CE F7 | 	test	local02, #146 wz
26920     18 00 90 5D |  if_ne	jmp	#LR__3875
26924     08 4E 05 F1 | 	add	fp, #8
26928     A7 20 02 FB | 	rdlong	local02, fp
2692c     01 20 46 F5 | 	or	local02, #1
26930     A7 20 62 FC | 	wrlong	local02, fp
26934     08 4E 85 F1 | 	sub	fp, #8
26938     28 00 90 FD | 	jmp	#LR__3876
2693c                 | LR__3875
2693c     44 4E 05 F1 | 	add	fp, #68
26940     A7 24 02 FB | 	rdlong	local04, fp
26944     44 4E 85 F1 | 	sub	fp, #68
26948     08 00 00 FF 
2694c     00 24 0E F2 | 	cmp	local04, ##4096 wz
26950     08 4E 05 51 |  if_ne	add	fp, #8
26954     A7 24 02 5B |  if_ne	rdlong	local04, fp
26958     20 24 46 55 |  if_ne	or	local04, #32
2695c     A7 24 62 5C |  if_ne	wrlong	local04, fp
26960     08 4E 85 51 |  if_ne	sub	fp, #8
26964                 | LR__3876
26964                 | LR__3877
26964                 | LR__3878
26964     08 4E 05 F1 | 	add	fp, #8
26968     A7 24 02 FB | 	rdlong	local04, fp
2696c     08 4E 85 F1 | 	sub	fp, #8
26970     03 00 00 FF 
26974     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26978     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
2697c     03 00 00 FF 
26980     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26984     0F 25 CA F7 | 	test	local04, local01 wz
26988     E0 FD 9F AD |  if_e	jmp	#LR__3871
2698c                 | LR__3879
2698c     0C 4E 05 F1 | 	add	fp, #12
26990     A7 12 02 FB | 	rdlong	arg01, fp
26994     0C 4E 85 F1 | 	sub	fp, #12
26998     09 27 02 F6 | 	mov	local05, arg01
2699c     97 06 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
269a0                 | LR__3880
269a0     13 FB C9 FA | 	rdbyte	result1, local05 wz
269a4     01 26 06 51 |  if_ne	add	local05, #1
269a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3880
269ac                 | LR__3881
269ac     13 13 C2 F2 | 	subr	arg01, local05
269b0     01 12 06 F1 | 	add	arg01, #1
269b4     28 E0 BF FD | 	call	#__system___gc_alloc_managed
269b8     48 4E 05 F1 | 	add	fp, #72
269bc     A7 FA 61 FC | 	wrlong	result1, fp
269c0     48 4E 85 F1 | 	sub	fp, #72
269c4     00 FA 0D F2 | 	cmp	result1, #0 wz
269c8     18 00 90 AD |  if_e	jmp	#LR__3882
269cc     48 4E 05 F1 | 	add	fp, #72
269d0     A7 12 02 FB | 	rdlong	arg01, fp
269d4     3C 4E 85 F1 | 	sub	fp, #60
269d8     A7 14 02 FB | 	rdlong	arg02, fp
269dc     0C 4E 85 F1 | 	sub	fp, #12
269e0     D4 A0 BF FD | 	call	#__system____builtin_strcpy
269e4                 | LR__3882
269e4     48 4E 05 F1 | 	add	fp, #72
269e8     A7 FA 01 FB | 	rdlong	result1, fp
269ec     48 4E 85 F1 | 	sub	fp, #72
269f0                 | LR__3883
269f0     A7 F0 03 F6 | 	mov	ptra, fp
269f4     B2 00 A0 FD | 	call	#popregs_
269f8                 | __system___basic_dir_ret
269f8     2D 00 64 FD | 	ret
269fc                 | 
269fc                 | __system__pack_0606
269fc     09 01 02 F6 | 	mov	_var01, arg01
26a00     7F 16 06 F1 | 	add	arg03, #127
26a04     04 18 CE F7 | 	test	arg04, #4 wz
26a08     10 00 90 AD |  if_e	jmp	#LR__3890
26a0c     00 00 0E F2 | 	cmp	_var01, #0 wz
26a10     16 00 C6 A9 |  if_e	decod	_var01, #22
26a14     F7 00 26 F4 | 	bith	_var01, #247
26a18     B4 00 90 FD | 	jmp	#LR__3899
26a1c                 | LR__3890
26a1c     02 18 CE F7 | 	test	arg04, #2 wz
26a20     00 C0 3F 5F 
26a24     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26a28     00 14 06 56 |  if_ne	mov	arg02, #0
26a2c     A0 00 90 5D |  if_ne	jmp	#LR__3898
26a30     08 18 CE F7 | 	test	arg04, #8 wz
26a34     00 00 06 56 |  if_ne	mov	_var01, #0
26a38     94 00 90 5D |  if_ne	jmp	#LR__3897
26a3c     FF 16 56 F2 | 	cmps	arg03, #255 wc
26a40     00 C0 3F 3F 
26a44     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26a48     00 14 06 36 |  if_ae	mov	arg02, #0
26a4c     80 00 90 3D |  if_ae	jmp	#LR__3896
26a50     01 16 56 F2 | 	cmps	arg03, #1 wc
26a54     6C 00 90 3D |  if_ae	jmp	#LR__3894
26a58     01 14 46 F0 | 	shr	arg02, #1
26a5c     00 03 02 F6 | 	mov	_var02, _var01
26a60     01 02 06 F5 | 	and	_var02, #1
26a64     1F 02 66 F0 | 	shl	_var02, #31
26a68     01 15 42 F5 | 	or	arg02, _var02
26a6c     01 00 46 F0 | 	shr	_var01, #1
26a70     97 1E 48 FB | 	callpa	#(@LR__3892-@LR__3891)>>2,fcache_load_ptr_
26a74                 | LR__3891
26a74     00 16 56 F2 | 	cmps	arg03, #0 wc
26a78     34 00 90 3D |  if_ae	jmp	#LR__3893
26a7c     00 00 0E F2 | 	cmp	_var01, #0 wz
26a80     2C 00 90 AD |  if_e	jmp	#LR__3893
26a84     0A 13 02 F6 | 	mov	arg01, arg02
26a88     01 12 06 F5 | 	and	arg01, #1
26a8c     01 16 06 F1 | 	add	arg03, #1
26a90     01 14 46 F0 | 	shr	arg02, #1
26a94     00 03 02 F6 | 	mov	_var02, _var01
26a98     01 02 06 F5 | 	and	_var02, #1
26a9c     1F 02 66 F0 | 	shl	_var02, #31
26aa0     01 15 42 F5 | 	or	arg02, _var02
26aa4     09 15 42 F5 | 	or	arg02, arg01
26aa8     01 00 46 F0 | 	shr	_var01, #1
26aac     C4 FF 9F FD | 	jmp	#LR__3891
26ab0                 | LR__3892
26ab0                 | LR__3893
26ab0     00 16 56 F2 | 	cmps	arg03, #0 wc
26ab4     18 00 90 3D |  if_ae	jmp	#LR__3895
26ab8     00 14 0E F2 | 	cmp	arg02, #0 wz
26abc     6F 14 62 FD | 	wrnz	arg02
26ac0     0C 00 90 FD | 	jmp	#LR__3895
26ac4                 | LR__3894
26ac4     17 01 06 F4 | 	bitl	_var01, #279
26ac8     17 16 66 F0 | 	shl	arg03, #23
26acc     0B 01 42 F5 | 	or	_var01, arg03
26ad0                 | LR__3895
26ad0                 | LR__3896
26ad0                 | LR__3897
26ad0                 | LR__3898
26ad0                 | LR__3899
26ad0     01 00 CE F7 | 	test	_var01, #1 wz
26ad4     01 14 46 55 |  if_ne	or	arg02, #1
26ad8     0A 17 02 F6 | 	mov	arg03, arg02
26adc     00 02 06 F6 | 	mov	_var02, #0
26ae0     FF FF 3F FF 
26ae4     FF 15 06 F1 | 	add	arg02, ##2147483647
26ae8     0B 15 12 F2 | 	cmp	arg02, arg03 wc
26aec     01 02 06 C6 |  if_b	mov	_var02, #1
26af0     01 01 02 F1 | 	add	_var01, _var02
26af4     01 18 CE F7 | 	test	arg04, #1 wz
26af8     1F 00 26 54 |  if_ne	bith	_var01, #31
26afc     00 FB 01 F6 | 	mov	result1, _var01
26b00                 | __system__pack_0606_ret
26b00     2D 00 64 FD | 	ret
26b04                 | 
26b04                 | __system___rxtxioctl_0696
26b04     00 15 0E F2 | 	cmp	arg02, #256 wz
26b08     0C 00 90 AD |  if_e	jmp	#LR__3900
26b0c     01 15 0E F2 | 	cmp	arg02, #257 wz
26b10     1C 00 90 AD |  if_e	jmp	#LR__3901
26b14     30 00 90 FD | 	jmp	#LR__3902
26b18                 | LR__3900
26b18     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26b1c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26b20     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26b24     0B FB 61 FC | 	wrlong	result1, arg03
26b28     00 FA 05 F6 | 	mov	result1, #0
26b2c     28 00 90 FD | 	jmp	#LR__3903
26b30                 | LR__3901
26b30     0B 13 02 FB | 	rdlong	arg01, arg03
26b34     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26b38     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26b3c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26b40     00 FA 05 F6 | 	mov	result1, #0
26b44     10 00 90 FD | 	jmp	#LR__3903
26b48                 | LR__3902
26b48     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b4c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26b50     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b54     01 FA 65 F6 | 	neg	result1, #1
26b58                 | LR__3903
26b58                 | __system___rxtxioctl_0696_ret
26b58     2D 00 64 FD | 	ret
26b5c                 | 
26b5c                 | __system____dummy_flush_0697
26b5c     00 FA 05 F6 | 	mov	result1, #0
26b60                 | __system____dummy_flush_0697_ret
26b60     2D 00 64 FD | 	ret
26b64                 | 
26b64                 | __system___vfswrite
26b64     09 4A 05 F6 | 	mov	COUNT_, #9
26b68     A8 00 A0 FD | 	call	#pushregs_
26b6c     09 1F 02 F6 | 	mov	local01, arg01
26b70     0A 21 02 F6 | 	mov	local02, arg02
26b74     0B 23 02 F6 | 	mov	local03, arg03
26b78     10 25 02 F6 | 	mov	local04, local02
26b7c     08 1E 06 F1 | 	add	local01, #8
26b80     0F 13 02 FB | 	rdlong	arg01, local01
26b84     08 1E 86 F1 | 	sub	local01, #8
26b88     02 12 CE F7 | 	test	arg01, #2 wz
26b8c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26b90     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26b94     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b98     01 FA 65 A6 |  if_e	neg	result1, #1
26b9c     80 01 90 AD |  if_e	jmp	#LR__3916
26ba0     08 1E 06 F1 | 	add	local01, #8
26ba4     0F FB 01 FB | 	rdlong	result1, local01
26ba8     08 1E 86 F1 | 	sub	local01, #8
26bac     40 FA CD F7 | 	test	result1, #64 wz
26bb0     68 00 90 AD |  if_e	jmp	#LR__3911
26bb4     08 1E 06 F1 | 	add	local01, #8
26bb8     0F 15 02 FB | 	rdlong	arg02, local01
26bbc     08 1E 86 F1 | 	sub	local01, #8
26bc0     80 14 CE F7 | 	test	arg02, #128 wz
26bc4     54 00 90 AD |  if_e	jmp	#LR__3910
26bc8     30 1E 06 F1 | 	add	local01, #48
26bcc     0F 27 02 FB | 	rdlong	local05, local01
26bd0     13 29 02 F6 | 	mov	local06, local05
26bd4     30 1E 86 F1 | 	sub	local01, #48
26bd8     13 28 46 F7 | 	zerox	local06, #19
26bdc     14 26 46 F0 | 	shr	local05, #20
26be0     02 26 66 F0 | 	shl	local05, #2
26be4     ED 26 02 F1 | 	add	local05, __methods__
26be8     13 27 02 FB | 	rdlong	local05, local05
26bec     0F 13 02 F6 | 	mov	arg01, local01
26bf0     00 14 06 F6 | 	mov	arg02, #0
26bf4     02 16 06 F6 | 	mov	arg03, #2
26bf8     F2 2A 02 F6 | 	mov	local07, objptr
26bfc     14 E5 01 F6 | 	mov	objptr, local06
26c00     2D 26 62 FD | 	call	local05
26c04     15 E5 01 F6 | 	mov	objptr, local07
26c08     08 1E 06 F1 | 	add	local01, #8
26c0c     0F 2B 02 FB | 	rdlong	local07, local01
26c10     80 2A 26 F5 | 	andn	local07, #128
26c14     0F 2B 62 FC | 	wrlong	local07, local01
26c18     08 1E 86 F1 | 	sub	local01, #8
26c1c                 | LR__3910
26c1c                 | LR__3911
26c1c     18 1E 06 F1 | 	add	local01, #24
26c20     0F 2B 0A FB | 	rdlong	local07, local01 wz
26c24     18 1E 86 F1 | 	sub	local01, #24
26c28     80 00 90 AD |  if_e	jmp	#LR__3913
26c2c     18 1E 06 F1 | 	add	local01, #24
26c30     0F 27 02 FB | 	rdlong	local05, local01
26c34     13 29 02 F6 | 	mov	local06, local05
26c38     18 1E 86 F1 | 	sub	local01, #24
26c3c     13 28 46 F7 | 	zerox	local06, #19
26c40     14 26 46 F0 | 	shr	local05, #20
26c44     02 26 66 F0 | 	shl	local05, #2
26c48     ED 26 02 F1 | 	add	local05, __methods__
26c4c     13 27 02 FB | 	rdlong	local05, local05
26c50     10 15 02 F6 | 	mov	arg02, local02
26c54     11 17 02 F6 | 	mov	arg03, local03
26c58     0F 13 02 F6 | 	mov	arg01, local01
26c5c     F2 2A 02 F6 | 	mov	local07, objptr
26c60     14 E5 01 F6 | 	mov	objptr, local06
26c64     2D 26 62 FD | 	call	local05
26c68     15 E5 01 F6 | 	mov	objptr, local07
26c6c     FD 2C 02 F6 | 	mov	local08, result1
26c70     00 2C 56 F2 | 	cmps	local08, #0 wc
26c74     2C 00 90 3D |  if_ae	jmp	#LR__3912
26c78     08 1E 06 F1 | 	add	local01, #8
26c7c     0F 2B 02 FB | 	rdlong	local07, local01
26c80     20 2A 46 F5 | 	or	local07, #32
26c84     0F 2B 62 FC | 	wrlong	local07, local01
26c88     00 2C 4E F2 | 	cmps	local08, #0 wz
26c8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26c90     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26c94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26c98     01 FA 65 56 |  if_ne	neg	result1, #1
26c9c     00 FA 05 A6 |  if_e	mov	result1, #0
26ca0     7C 00 90 FD | 	jmp	#LR__3916
26ca4                 | LR__3912
26ca4     16 FB 01 F6 | 	mov	result1, local08
26ca8     74 00 90 FD | 	jmp	#LR__3916
26cac                 | LR__3913
26cac     1C 1E 06 F1 | 	add	local01, #28
26cb0     0F 2F 0A FB | 	rdlong	local09, local01 wz
26cb4     1C 1E 86 F1 | 	sub	local01, #28
26cb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26cbc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26cc0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26cc4     01 FA 65 A6 |  if_e	neg	result1, #1
26cc8     54 00 90 AD |  if_e	jmp	#LR__3916
26ccc     00 2C 06 F6 | 	mov	local08, #0
26cd0                 | LR__3914
26cd0     01 22 16 F2 | 	cmp	local03, #1 wc
26cd4     44 00 90 CD |  if_b	jmp	#LR__3915
26cd8     17 29 02 F6 | 	mov	local06, local09
26cdc     17 27 02 F6 | 	mov	local05, local09
26ce0     13 28 46 F7 | 	zerox	local06, #19
26ce4     14 26 46 F0 | 	shr	local05, #20
26ce8     02 26 66 F0 | 	shl	local05, #2
26cec     ED 26 02 F1 | 	add	local05, __methods__
26cf0     13 27 02 FB | 	rdlong	local05, local05
26cf4     12 13 C2 FA | 	rdbyte	arg01, local04
26cf8     0F 15 02 F6 | 	mov	arg02, local01
26cfc     F2 2A 02 F6 | 	mov	local07, objptr
26d00     14 E5 01 F6 | 	mov	objptr, local06
26d04     01 24 06 F1 | 	add	local04, #1
26d08     2D 26 62 FD | 	call	local05
26d0c     15 E5 01 F6 | 	mov	objptr, local07
26d10     FD 2C 02 F1 | 	add	local08, result1
26d14     01 22 86 F1 | 	sub	local03, #1
26d18     B4 FF 9F FD | 	jmp	#LR__3914
26d1c                 | LR__3915
26d1c     16 FB 01 F6 | 	mov	result1, local08
26d20                 | LR__3916
26d20     A7 F0 03 F6 | 	mov	ptra, fp
26d24     B2 00 A0 FD | 	call	#popregs_
26d28                 | __system___vfswrite_ret
26d28     2D 00 64 FD | 	ret
26d2c                 | 
26d2c                 | __system___vfsread
26d2c     03 4A 05 F6 | 	mov	COUNT_, #3
26d30     A8 00 A0 FD | 	call	#pushregs_
26d34     28 F0 07 F1 | 	add	ptra, #40
26d38     04 4E 05 F1 | 	add	fp, #4
26d3c     A7 12 62 FC | 	wrlong	arg01, fp
26d40     04 4E 05 F1 | 	add	fp, #4
26d44     A7 14 62 FC | 	wrlong	arg02, fp
26d48     04 4E 05 F1 | 	add	fp, #4
26d4c     A7 16 62 FC | 	wrlong	arg03, fp
26d50     04 4E 85 F1 | 	sub	fp, #4
26d54     A7 FA 01 FB | 	rdlong	result1, fp
26d58     14 4E 05 F1 | 	add	fp, #20
26d5c     A7 FA 61 FC | 	wrlong	result1, fp
26d60     04 4E 05 F1 | 	add	fp, #4
26d64     A7 00 68 FC | 	wrlong	#0, fp
26d68     1C 4E 85 F1 | 	sub	fp, #28
26d6c     A7 12 02 FB | 	rdlong	arg01, fp
26d70     04 4E 85 F1 | 	sub	fp, #4
26d74     08 12 06 F1 | 	add	arg01, #8
26d78     09 FB 01 FB | 	rdlong	result1, arg01
26d7c     01 FA CD F7 | 	test	result1, #1 wz
26d80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26d84     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26d88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26d8c     01 FA 65 A6 |  if_e	neg	result1, #1
26d90     74 02 90 AD |  if_e	jmp	#LR__3926
26d94     04 4E 05 F1 | 	add	fp, #4
26d98     A7 12 02 FB | 	rdlong	arg01, fp
26d9c     04 4E 85 F1 | 	sub	fp, #4
26da0     14 12 06 F1 | 	add	arg01, #20
26da4     09 FB 09 FB | 	rdlong	result1, arg01 wz
26da8     B8 00 90 AD |  if_e	jmp	#LR__3921
26dac     04 4E 05 F1 | 	add	fp, #4
26db0     A7 12 02 FB | 	rdlong	arg01, fp
26db4     09 17 02 F6 | 	mov	arg03, arg01
26db8     14 16 06 F1 | 	add	arg03, #20
26dbc     0B 1F 02 FB | 	rdlong	local01, arg03
26dc0     0F 21 02 F6 | 	mov	local02, local01
26dc4     13 1E 46 F7 | 	zerox	local01, #19
26dc8     14 20 46 F0 | 	shr	local02, #20
26dcc     02 20 66 F0 | 	shl	local02, #2
26dd0     ED 20 02 F1 | 	add	local02, __methods__
26dd4     10 21 02 FB | 	rdlong	local02, local02
26dd8     04 4E 05 F1 | 	add	fp, #4
26ddc     A7 14 02 FB | 	rdlong	arg02, fp
26de0     04 4E 05 F1 | 	add	fp, #4
26de4     A7 16 02 FB | 	rdlong	arg03, fp
26de8     0C 4E 85 F1 | 	sub	fp, #12
26dec     F2 22 02 F6 | 	mov	local03, objptr
26df0     0F E5 01 F6 | 	mov	objptr, local01
26df4     2D 20 62 FD | 	call	local02
26df8     11 E5 01 F6 | 	mov	objptr, local03
26dfc     10 4E 05 F1 | 	add	fp, #16
26e00     A7 FA 61 FC | 	wrlong	result1, fp
26e04     10 4E 85 F1 | 	sub	fp, #16
26e08     00 FA 55 F2 | 	cmps	result1, #0 wc
26e0c     44 00 90 3D |  if_ae	jmp	#LR__3920
26e10     04 4E 05 F1 | 	add	fp, #4
26e14     A7 22 02 FB | 	rdlong	local03, fp
26e18     11 1F 02 F6 | 	mov	local01, local03
26e1c     08 22 06 F1 | 	add	local03, #8
26e20     11 21 02 FB | 	rdlong	local02, local03
26e24     20 20 46 F5 | 	or	local02, #32
26e28     08 1E 06 F1 | 	add	local01, #8
26e2c     0F 21 62 FC | 	wrlong	local02, local01
26e30     0C 4E 05 F1 | 	add	fp, #12
26e34     A7 12 0A FB | 	rdlong	arg01, fp wz
26e38     10 4E 85 F1 | 	sub	fp, #16
26e3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26e40     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26e44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26e48     01 FA 65 56 |  if_ne	neg	result1, #1
26e4c     00 FA 05 A6 |  if_e	mov	result1, #0
26e50     B4 01 90 FD | 	jmp	#LR__3926
26e54                 | LR__3920
26e54     10 4E 05 F1 | 	add	fp, #16
26e58     A7 FA 01 FB | 	rdlong	result1, fp
26e5c     10 4E 85 F1 | 	sub	fp, #16
26e60     A4 01 90 FD | 	jmp	#LR__3926
26e64                 | LR__3921
26e64     04 4E 05 F1 | 	add	fp, #4
26e68     A7 12 02 FB | 	rdlong	arg01, fp
26e6c     20 12 06 F1 | 	add	arg01, #32
26e70     09 13 0A FB | 	rdlong	arg01, arg01 wz
26e74     14 4E 05 F1 | 	add	fp, #20
26e78     A7 12 62 FC | 	wrlong	arg01, fp
26e7c     18 4E 85 F1 | 	sub	fp, #24
26e80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26e84     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26e88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26e8c     01 FA 65 A6 |  if_e	neg	result1, #1
26e90     74 01 90 AD |  if_e	jmp	#LR__3926
26e94     04 4E 05 F1 | 	add	fp, #4
26e98     A7 22 02 FB | 	rdlong	local03, fp
26e9c     04 4E 85 F1 | 	sub	fp, #4
26ea0     28 22 06 F1 | 	add	local03, #40
26ea4     11 21 0A FB | 	rdlong	local02, local03 wz
26ea8     7C 00 90 AD |  if_e	jmp	#LR__3923
26eac     04 4E 05 F1 | 	add	fp, #4
26eb0     A7 12 02 FB | 	rdlong	arg01, fp
26eb4     09 23 02 F6 | 	mov	local03, arg01
26eb8     28 22 06 F1 | 	add	local03, #40
26ebc     11 1F 02 FB | 	rdlong	local01, local03
26ec0     0F 21 02 F6 | 	mov	local02, local01
26ec4     13 1E 46 F7 | 	zerox	local01, #19
26ec8     14 20 46 F0 | 	shr	local02, #20
26ecc     02 20 66 F0 | 	shl	local02, #2
26ed0     ED 20 02 F1 | 	add	local02, __methods__
26ed4     10 21 02 FB | 	rdlong	local02, local02
26ed8     20 4E 05 F1 | 	add	fp, #32
26edc     A7 16 02 F6 | 	mov	arg03, fp
26ee0     24 4E 85 F1 | 	sub	fp, #36
26ee4     00 15 06 F6 | 	mov	arg02, #256
26ee8     F2 22 02 F6 | 	mov	local03, objptr
26eec     0F E5 01 F6 | 	mov	objptr, local01
26ef0     2D 20 62 FD | 	call	local02
26ef4     11 E5 01 F6 | 	mov	objptr, local03
26ef8     10 4E 05 F1 | 	add	fp, #16
26efc     A7 FA 61 FC | 	wrlong	result1, fp
26f00     00 FA 4D F2 | 	cmps	result1, #0 wz
26f04     10 4E 85 F1 | 	sub	fp, #16
26f08     1C 00 90 5D |  if_ne	jmp	#LR__3922
26f0c     24 4E 05 F1 | 	add	fp, #36
26f10     A7 20 02 FB | 	rdlong	local02, fp
26f14     24 4E 85 F1 | 	sub	fp, #36
26f18     02 20 CE F7 | 	test	local02, #2 wz
26f1c     20 4E 05 51 |  if_ne	add	fp, #32
26f20     A7 02 68 5C |  if_ne	wrlong	#1, fp
26f24     20 4E 85 51 |  if_ne	sub	fp, #32
26f28                 | LR__3922
26f28                 | LR__3923
26f28     10 4E 05 F1 | 	add	fp, #16
26f2c     A7 00 68 FC | 	wrlong	#0, fp
26f30     10 4E 85 F1 | 	sub	fp, #16
26f34                 | LR__3924
26f34     0C 4E 05 F1 | 	add	fp, #12
26f38     A7 22 02 FB | 	rdlong	local03, fp
26f3c     0C 4E 85 F1 | 	sub	fp, #12
26f40     01 22 16 F2 | 	cmp	local03, #1 wc
26f44     B4 00 90 CD |  if_b	jmp	#LR__3925
26f48     18 4E 05 F1 | 	add	fp, #24
26f4c     A7 20 02 FB | 	rdlong	local02, fp
26f50     10 23 02 F6 | 	mov	local03, local02
26f54     13 22 46 F7 | 	zerox	local03, #19
26f58     14 20 46 F0 | 	shr	local02, #20
26f5c     02 20 66 F0 | 	shl	local02, #2
26f60     ED 20 02 F1 | 	add	local02, __methods__
26f64     10 21 02 FB | 	rdlong	local02, local02
26f68     14 4E 85 F1 | 	sub	fp, #20
26f6c     A7 12 02 FB | 	rdlong	arg01, fp
26f70     04 4E 85 F1 | 	sub	fp, #4
26f74     F2 1E 02 F6 | 	mov	local01, objptr
26f78     11 E5 01 F6 | 	mov	objptr, local03
26f7c     2D 20 62 FD | 	call	local02
26f80     0F E5 01 F6 | 	mov	objptr, local01
26f84     14 4E 05 F1 | 	add	fp, #20
26f88     A7 FA 61 FC | 	wrlong	result1, fp
26f8c     14 4E 85 F1 | 	sub	fp, #20
26f90     00 FA 55 F2 | 	cmps	result1, #0 wc
26f94     64 00 90 CD |  if_b	jmp	#LR__3925
26f98     1C 4E 05 F1 | 	add	fp, #28
26f9c     A7 22 02 FB | 	rdlong	local03, fp
26fa0     11 21 02 F6 | 	mov	local02, local03
26fa4     01 20 06 F1 | 	add	local02, #1
26fa8     A7 20 62 FC | 	wrlong	local02, fp
26fac     08 4E 85 F1 | 	sub	fp, #8
26fb0     A7 20 02 FB | 	rdlong	local02, fp
26fb4     11 21 42 FC | 	wrbyte	local02, local03
26fb8     04 4E 85 F1 | 	sub	fp, #4
26fbc     A7 22 02 FB | 	rdlong	local03, fp
26fc0     01 22 06 F1 | 	add	local03, #1
26fc4     A7 22 62 FC | 	wrlong	local03, fp
26fc8     04 4E 85 F1 | 	sub	fp, #4
26fcc     A7 22 02 FB | 	rdlong	local03, fp
26fd0     01 22 86 F1 | 	sub	local03, #1
26fd4     A7 22 62 FC | 	wrlong	local03, fp
26fd8     14 4E 05 F1 | 	add	fp, #20
26fdc     A7 22 0A FB | 	rdlong	local03, fp wz
26fe0     20 4E 85 F1 | 	sub	fp, #32
26fe4     4C FF 9F AD |  if_e	jmp	#LR__3924
26fe8     14 4E 05 F1 | 	add	fp, #20
26fec     A7 20 02 FB | 	rdlong	local02, fp
26ff0     14 4E 85 F1 | 	sub	fp, #20
26ff4     0A 20 0E F2 | 	cmp	local02, #10 wz
26ff8     38 FF 9F 5D |  if_ne	jmp	#LR__3924
26ffc                 | LR__3925
26ffc     10 4E 05 F1 | 	add	fp, #16
27000     A7 FA 01 FB | 	rdlong	result1, fp
27004     10 4E 85 F1 | 	sub	fp, #16
27008                 | LR__3926
27008     A7 F0 03 F6 | 	mov	ptra, fp
2700c     B2 00 A0 FD | 	call	#popregs_
27010                 | __system___vfsread_ret
27010     2D 00 64 FD | 	ret
27014                 | 
27014                 | __system____default_filbuf
27014     04 4A 05 F6 | 	mov	COUNT_, #4
27018     A8 00 A0 FD | 	call	#pushregs_
2701c     09 1F 02 F6 | 	mov	local01, arg01
27020     0F 21 02 FB | 	rdlong	local02, local01
27024     0C 20 06 F1 | 	add	local02, #12
27028     10 FB 09 FB | 	rdlong	result1, local02 wz
2702c     0C 20 86 F1 | 	sub	local02, #12
27030     20 00 90 5D |  if_ne	jmp	#LR__3930
27034     14 20 06 F1 | 	add	local02, #20
27038     10 FB 01 F6 | 	mov	result1, local02
2703c     04 20 86 F1 | 	sub	local02, #4
27040     10 FB 61 FC | 	wrlong	result1, local02
27044     04 20 86 F1 | 	sub	local02, #4
27048     02 00 80 FF 
2704c     10 01 68 FC | 	wrlong	##1024, local02
27050     0C 20 86 F1 | 	sub	local02, #12
27054                 | LR__3930
27054     14 1E 06 F1 | 	add	local01, #20
27058     0F 23 02 FB | 	rdlong	local03, local01
2705c     11 25 02 F6 | 	mov	local04, local03
27060     14 1E 86 F1 | 	sub	local01, #20
27064     13 24 46 F7 | 	zerox	local04, #19
27068     14 22 46 F0 | 	shr	local03, #20
2706c     02 22 66 F0 | 	shl	local03, #2
27070     ED 22 02 F1 | 	add	local03, __methods__
27074     11 23 02 FB | 	rdlong	local03, local03
27078     10 20 06 F1 | 	add	local02, #16
2707c     10 15 02 FB | 	rdlong	arg02, local02
27080     04 20 86 F1 | 	sub	local02, #4
27084     10 17 02 FB | 	rdlong	arg03, local02
27088     0C 20 86 F1 | 	sub	local02, #12
2708c     0F 13 02 F6 | 	mov	arg01, local01
27090     F2 1E 02 F6 | 	mov	local01, objptr
27094     12 E5 01 F6 | 	mov	objptr, local04
27098     2D 22 62 FD | 	call	local03
2709c     0F E5 01 F6 | 	mov	objptr, local01
270a0     FD 24 02 F6 | 	mov	local04, result1
270a4     00 24 56 F2 | 	cmps	local04, #0 wc
270a8     01 FA 65 C6 |  if_b	neg	result1, #1
270ac     28 00 90 CD |  if_b	jmp	#LR__3931
270b0     10 25 62 FC | 	wrlong	local04, local02
270b4     10 20 06 F1 | 	add	local02, #16
270b8     10 23 02 FB | 	rdlong	local03, local02
270bc     0C 20 86 F1 | 	sub	local02, #12
270c0     10 23 62 FC | 	wrlong	local03, local02
270c4     04 20 06 F1 | 	add	local02, #4
270c8     10 23 02 FB | 	rdlong	local03, local02
270cc     01 22 46 F5 | 	or	local03, #1
270d0     10 23 62 FC | 	wrlong	local03, local02
270d4     12 FB 01 F6 | 	mov	result1, local04
270d8                 | LR__3931
270d8     A7 F0 03 F6 | 	mov	ptra, fp
270dc     B2 00 A0 FD | 	call	#popregs_
270e0                 | __system____default_filbuf_ret
270e0     2D 00 64 FD | 	ret
270e4                 | 
270e4                 | __system__getlower_1082
270e4     41 12 56 F2 | 	cmps	arg01, #65 wc
270e8     10 00 90 CD |  if_b	jmp	#LR__3940
270ec     5B 12 56 F2 | 	cmps	arg01, #91 wc
270f0     09 FB 01 C6 |  if_b	mov	result1, arg01
270f4     20 FA 05 C1 |  if_b	add	result1, #32
270f8     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
270fc                 | LR__3940
270fc     09 FB 01 F6 | 	mov	result1, arg01
27100                 | __system__getlower_1082_ret
27100     2D 00 64 FD | 	ret
27104                 | 
27104                 | __system___pat_match
27104     08 4A 05 F6 | 	mov	COUNT_, #8
27108     A8 00 A0 FD | 	call	#pushregs_
2710c     09 1F 02 F6 | 	mov	local01, arg01
27110                 | LR__3950
27110     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
27114     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
27118     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
2711c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
27120     2C 00 90 AD |  if_e	jmp	#LR__3951
27124     0A 13 C2 FA | 	rdbyte	arg01, arg02
27128     B8 FF BF FD | 	call	#__system__getlower_1082
2712c     FD 22 02 F6 | 	mov	local03, result1
27130     0F 13 C2 FA | 	rdbyte	arg01, local01
27134     AC FF BF FD | 	call	#__system__getlower_1082
27138     11 FB 09 F2 | 	cmp	result1, local03 wz
2713c     00 FA 05 56 |  if_ne	mov	result1, #0
27140     FC 00 90 5D |  if_ne	jmp	#LR__3959
27144     01 1E 06 F1 | 	add	local01, #1
27148     01 14 06 F1 | 	add	arg02, #1
2714c     C0 FF 9F FD | 	jmp	#LR__3950
27150                 | LR__3951
27150     0A 23 C2 FA | 	rdbyte	local03, arg02
27154     2A 22 0E F2 | 	cmp	local03, #42 wz
27158     D4 00 90 5D |  if_ne	jmp	#LR__3958
2715c     01 14 06 F1 | 	add	arg02, #1
27160     0A 21 C2 FA | 	rdbyte	local02, arg02
27164     01 14 86 F1 | 	sub	arg02, #1
27168     2E 20 0E F2 | 	cmp	local02, #46 wz
2716c     28 00 90 5D |  if_ne	jmp	#LR__3952
27170     02 14 06 F1 | 	add	arg02, #2
27174     0A 21 C2 FA | 	rdbyte	local02, arg02
27178     02 14 86 F1 | 	sub	arg02, #2
2717c     2A 20 0E F2 | 	cmp	local02, #42 wz
27180     03 14 06 A1 |  if_e	add	arg02, #3
27184     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
27188     03 14 86 A1 |  if_e	sub	arg02, #3
2718c     12 27 0A A6 |  if_e	mov	local05, local04 wz
27190     01 FA 05 A6 |  if_e	mov	result1, #1
27194     A8 00 90 AD |  if_e	jmp	#LR__3959
27198                 | LR__3952
27198     01 14 06 F1 | 	add	arg02, #1
2719c     00 28 06 F6 | 	mov	local06, #0
271a0     97 1E 48 FB | 	callpa	#(@LR__3955-@LR__3953)>>2,fcache_load_ptr_
271a4                 | LR__3953
271a4     14 2B 02 F6 | 	mov	local07, local06
271a8     0A 2B 02 F1 | 	add	local07, arg02
271ac     15 2B CA FA | 	rdbyte	local07, local07 wz
271b0     14 27 02 56 |  if_ne	mov	local05, local06
271b4     01 26 06 51 |  if_ne	add	local05, #1
271b8     13 29 02 56 |  if_ne	mov	local06, local05
271bc     E4 FF 9F 5D |  if_ne	jmp	#LR__3953
271c0     00 2C 06 F6 | 	mov	local08, #0
271c4                 | LR__3954
271c4     16 2B 02 F6 | 	mov	local07, local08
271c8     0F 2B 02 F1 | 	add	local07, local01
271cc     15 2B CA FA | 	rdbyte	local07, local07 wz
271d0     16 27 02 56 |  if_ne	mov	local05, local08
271d4     01 26 06 51 |  if_ne	add	local05, #1
271d8     13 2D 02 56 |  if_ne	mov	local08, local05
271dc     E4 FF 9F 5D |  if_ne	jmp	#LR__3954
271e0                 | LR__3955
271e0     14 2D 52 F2 | 	cmps	local08, local06 wc
271e4     00 FA 05 C6 |  if_b	mov	result1, #0
271e8     54 00 90 CD |  if_b	jmp	#LR__3959
271ec     16 21 02 F6 | 	mov	local02, local08
271f0     14 21 82 F1 | 	sub	local02, local06
271f4     10 1F 02 F1 | 	add	local01, local02
271f8                 | LR__3956
271f8     01 28 56 F2 | 	cmps	local06, #1 wc
271fc     30 00 90 CD |  if_b	jmp	#LR__3957
27200     0F 13 C2 FA | 	rdbyte	arg01, local01
27204     DC FE BF FD | 	call	#__system__getlower_1082
27208     FD 2C 02 F6 | 	mov	local08, result1
2720c     0A 13 C2 FA | 	rdbyte	arg01, arg02
27210     D0 FE BF FD | 	call	#__system__getlower_1082
27214     FD 2C 0A F2 | 	cmp	local08, result1 wz
27218     00 FA 05 56 |  if_ne	mov	result1, #0
2721c     20 00 90 5D |  if_ne	jmp	#LR__3959
27220     01 1E 06 F1 | 	add	local01, #1
27224     01 14 06 F1 | 	add	arg02, #1
27228     01 28 86 F1 | 	sub	local06, #1
2722c     C8 FF 9F FD | 	jmp	#LR__3956
27230                 | LR__3957
27230                 | LR__3958
27230     0A 2D CA FA | 	rdbyte	local08, arg02 wz
27234     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27238     01 FA 05 A6 |  if_e	mov	result1, #1
2723c     00 FA 05 56 |  if_ne	mov	result1, #0
27240                 | LR__3959
27240     A7 F0 03 F6 | 	mov	ptra, fp
27244     B2 00 A0 FD | 	call	#popregs_
27248                 | __system___pat_match_ret
27248     2D 00 64 FD | 	ret
2724c                 | 
2724c                 | _fatfs_cc_ff_uni2oem
2724c     00 00 06 F6 | 	mov	_var01, #0
27250     80 12 16 F2 | 	cmp	arg01, #128 wc
27254     09 01 02 C6 |  if_b	mov	_var01, arg01
27258     58 00 90 CD |  if_b	jmp	#LR__3964
2725c     80 00 00 FF 
27260     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27264     4C 00 90 3D |  if_ae	jmp	#LR__3963
27268     0A FB 31 F9 | 	getword	result1, arg02, #0
2726c     01 00 00 FF 
27270     52 FB 0D F2 | 	cmp	result1, ##850 wz
27274     3C 00 90 5D |  if_ne	jmp	#LR__3963
27278                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
27278     00 00 06 F6 | 	mov	_var01, #0
2727c     97 14 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
27280                 | LR__3960
27280     00 FB 31 F9 | 	getword	result1, _var01, #0
27284     80 FA 15 F2 | 	cmp	result1, #128 wc
27288     1C 00 90 3D |  if_ae	jmp	#LR__3962
2728c     00 FB 31 F9 | 	getword	result1, _var01, #0
27290     01 FA 65 F0 | 	shl	result1, #1
27294     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
27298     FD FA E1 FA | 	rdword	result1, result1
2729c     FD 12 0A F2 | 	cmp	arg01, result1 wz
272a0     01 00 06 51 |  if_ne	add	_var01, #1
272a4     D8 FF 9F 5D |  if_ne	jmp	#LR__3960
272a8                 | LR__3961
272a8                 | LR__3962
272a8     00 01 32 F9 | 	getword	_var01, _var01, #0
272ac     80 00 06 F1 | 	add	_var01, #128
272b0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
272b4                 | LR__3963
272b4                 | LR__3964
272b4                 | ' 			c = (c + 0x80) & 0xFF;
272b4                 | ' 		}
272b4                 | ' 	}
272b4                 | ' 
272b4                 | ' 	return c;
272b4     00 FB 01 F6 | 	mov	result1, _var01
272b8                 | _fatfs_cc_ff_uni2oem_ret
272b8     2D 00 64 FD | 	ret
272bc                 | 
272bc                 | _fatfs_cc_ff_oem2uni
272bc     00 00 06 F6 | 	mov	_var01, #0
272c0     09 FB 31 F9 | 	getword	result1, arg01, #0
272c4     80 FA 15 F2 | 	cmp	result1, #128 wc
272c8     09 01 02 C6 |  if_b	mov	_var01, arg01
272cc     2C 00 90 CD |  if_b	jmp	#LR__3971
272d0     0A 15 32 F9 | 	getword	arg02, arg02, #0
272d4     01 00 00 FF 
272d8     52 15 0E F2 | 	cmp	arg02, ##850 wz
272dc     1C 00 90 5D |  if_ne	jmp	#LR__3970
272e0     09 FB 31 F9 | 	getword	result1, arg01, #0
272e4     00 FB 15 F2 | 	cmp	result1, #256 wc
272e8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
272ec     80 12 86 C1 |  if_b	sub	arg01, #128
272f0     01 12 66 C0 |  if_b	shl	arg01, #1
272f4     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
272f8     09 01 E2 CA |  if_b	rdword	_var01, arg01
272fc                 | LR__3970
272fc                 | LR__3971
272fc                 | ' 		}
272fc                 | ' 	}
272fc                 | ' 
272fc                 | ' 	return c;
272fc     00 FB 01 F6 | 	mov	result1, _var01
27300                 | _fatfs_cc_ff_oem2uni_ret
27300     2D 00 64 FD | 	ret
27304                 | 
27304                 | _fatfs_cc_ff_wtoupper
27304     09 01 02 F6 | 	mov	_var01, arg01
27308     80 00 00 FF 
2730c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27310     60 01 90 3D |  if_ae	jmp	#LR__3993
27314     00 03 02 F6 | 	mov	_var02, _var01
27318     01 01 32 F9 | 	getword	_var01, _var02, #0
2731c     08 00 00 FF 
27320     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27324     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27328     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2732c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27330     01 00 00 3F 
27334     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27338     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2733c     01 00 00 3F 
27340     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
27344     02 07 02 F6 | 	mov	_var04, _var03
27348                 | ' 		uc = (WORD)uni;
27348                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27348                 | ' 		for (;;) {
27348                 | LR__3980
27348     03 09 E2 FA | 	rdword	_var05, _var04
2734c     04 05 02 F6 | 	mov	_var03, _var05
27350     0F 04 4E F7 | 	zerox	_var03, #15 wz
27354     02 06 06 F1 | 	add	_var04, #2
27358     14 01 90 AD |  if_e	jmp	#LR__3992
2735c     01 05 32 F9 | 	getword	_var03, _var02, #0
27360     04 01 32 F9 | 	getword	_var01, _var05, #0
27364     00 05 12 F2 | 	cmp	_var03, _var01 wc
27368     04 01 90 CD |  if_b	jmp	#LR__3992
2736c     03 0B E2 FA | 	rdword	_var06, _var04
27370     05 0D 32 F9 | 	getword	_var07, _var06, #0
27374     08 0C 46 F0 | 	shr	_var07, #8
27378     05 0B 32 F9 | 	getword	_var06, _var06, #0
2737c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
27380     01 05 32 F9 | 	getword	_var03, _var02, #0
27384     04 0F 32 F9 | 	getword	_var08, _var05, #0
27388     05 01 32 F9 | 	getword	_var01, _var06, #0
2738c     00 0F 02 F1 | 	add	_var08, _var01
27390     07 05 52 F2 | 	cmps	_var03, _var08 wc
27394     02 06 06 F1 | 	add	_var04, #2
27398     C4 00 90 3D |  if_ae	jmp	#LR__3991
2739c                 | ' 				switch (cmd) {
2739c     06 11 32 F9 | 	getword	_var09, _var07, #0
273a0     09 10 26 F3 | 	fle	_var09, #9
273a4     30 10 62 FD | 	jmprel	_var09
273a8                 | LR__3981
273a8     24 00 90 FD | 	jmp	#LR__3982
273ac     3C 00 90 FD | 	jmp	#LR__3983
273b0     54 00 90 FD | 	jmp	#LR__3984
273b4     5C 00 90 FD | 	jmp	#LR__3985
273b8     64 00 90 FD | 	jmp	#LR__3986
273bc     6C 00 90 FD | 	jmp	#LR__3987
273c0     74 00 90 FD | 	jmp	#LR__3988
273c4     7C 00 90 FD | 	jmp	#LR__3989
273c8     84 00 90 FD | 	jmp	#LR__3990
273cc     A0 00 90 FD | 	jmp	#LR__3992
273d0                 | LR__3982
273d0     01 03 32 F9 | 	getword	_var02, _var02, #0
273d4     04 09 32 F9 | 	getword	_var05, _var05, #0
273d8     04 03 82 F1 | 	sub	_var02, _var05
273dc     01 02 66 F0 | 	shl	_var02, #1
273e0     03 03 02 F1 | 	add	_var02, _var04
273e4     01 03 E2 FA | 	rdword	_var02, _var02
273e8     84 00 90 FD | 	jmp	#LR__3992
273ec                 | LR__3983
273ec     01 05 32 F9 | 	getword	_var03, _var02, #0
273f0     01 03 32 F9 | 	getword	_var02, _var02, #0
273f4     04 09 32 F9 | 	getword	_var05, _var05, #0
273f8     04 03 82 F1 | 	sub	_var02, _var05
273fc     01 02 06 F5 | 	and	_var02, #1
27400     02 03 C2 F2 | 	subr	_var02, _var03
27404     68 00 90 FD | 	jmp	#LR__3992
27408                 | LR__3984
27408     01 03 32 F9 | 	getword	_var02, _var02, #0
2740c     10 02 86 F1 | 	sub	_var02, #16
27410     5C 00 90 FD | 	jmp	#LR__3992
27414                 | LR__3985
27414     01 03 32 F9 | 	getword	_var02, _var02, #0
27418     20 02 86 F1 | 	sub	_var02, #32
2741c     50 00 90 FD | 	jmp	#LR__3992
27420                 | LR__3986
27420     01 03 32 F9 | 	getword	_var02, _var02, #0
27424     30 02 86 F1 | 	sub	_var02, #48
27428     44 00 90 FD | 	jmp	#LR__3992
2742c                 | LR__3987
2742c     01 03 32 F9 | 	getword	_var02, _var02, #0
27430     1A 02 86 F1 | 	sub	_var02, #26
27434     38 00 90 FD | 	jmp	#LR__3992
27438                 | LR__3988
27438     01 03 32 F9 | 	getword	_var02, _var02, #0
2743c     08 02 06 F1 | 	add	_var02, #8
27440     2C 00 90 FD | 	jmp	#LR__3992
27444                 | LR__3989
27444     01 03 32 F9 | 	getword	_var02, _var02, #0
27448     50 02 86 F1 | 	sub	_var02, #80
2744c     20 00 90 FD | 	jmp	#LR__3992
27450                 | LR__3990
27450     01 03 32 F9 | 	getword	_var02, _var02, #0
27454     0E 00 00 FF 
27458     60 02 86 F1 | 	sub	_var02, ##7264
2745c                 | ' 				}
2745c                 | ' 				break;
2745c     10 00 90 FD | 	jmp	#LR__3992
27460                 | LR__3991
27460     0F 0C 4E F7 | 	zerox	_var07, #15 wz
27464     02 0A 06 AA |  if_e	mul	_var06, #2
27468     05 07 02 A1 |  if_e	add	_var04, _var06
2746c     D8 FE 9F FD | 	jmp	#LR__3980
27470                 | LR__3992
27470     01 01 32 F9 | 	getword	_var01, _var02, #0
27474                 | LR__3993
27474                 | ' 		}
27474                 | ' 		uni = uc;
27474                 | ' 	}
27474                 | ' 
27474                 | ' 	return uni;
27474     00 FB 01 F6 | 	mov	result1, _var01
27478                 | _fatfs_cc_ff_wtoupper_ret
27478     2D 00 64 FD | 	ret
2747c                 | 
2747c                 | _fatfs_cc_strncpy
2747c     09 01 02 F6 | 	mov	_var01, arg01
27480     97 12 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
27484                 | ' 
27484                 | ' 	dscan = dst;
27484                 | ' 	sscan = src;
27484                 | ' 	count = n;
27484                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
27484                 | LR__4000
27484     01 16 86 F1 | 	sub	arg03, #1
27488     00 16 56 F2 | 	cmps	arg03, #0 wc
2748c     18 00 90 CD |  if_b	jmp	#LR__4002
27490     0A FB C1 FA | 	rdbyte	result1, arg02
27494     00 FB 41 FC | 	wrbyte	result1, _var01
27498     01 14 06 F1 | 	add	arg02, #1
2749c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
274a0                 | ' 		continue;
274a0     01 00 06 F1 | 	add	_var01, #1
274a4     DC FF 9F 5D |  if_ne	jmp	#LR__4000
274a8                 | LR__4001
274a8                 | LR__4002
274a8     97 0C 48 FB | 	callpa	#(@LR__4004-@LR__4003)>>2,fcache_load_ptr_
274ac                 | ' 	while (--count >= 0)
274ac                 | LR__4003
274ac     01 16 86 F1 | 	sub	arg03, #1
274b0     00 16 56 F2 | 	cmps	arg03, #0 wc
274b4     00 03 02 36 |  if_ae	mov	_var02, _var01
274b8     01 00 06 31 |  if_ae	add	_var01, #1
274bc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
274c0     E8 FF 9F 3D |  if_ae	jmp	#LR__4003
274c4                 | LR__4004
274c4                 | ' 		*dscan++ = '\0';
274c4                 | ' 	return(dst);
274c4     09 FB 01 F6 | 	mov	result1, arg01
274c8                 | _fatfs_cc_strncpy_ret
274c8     2D 00 64 FD | 	ret
274cc                 | 
274cc                 | _fatfs_cc_memcmp
274cc                 | ' 	for (n = size; n > 0; n--)
274cc     00 16 0E F2 | 	cmp	arg03, #0 wz
274d0     28 00 90 AD |  if_e	jmp	#LR__4011
274d4                 | LR__4010
274d4     09 01 C2 FA | 	rdbyte	_var01, arg01
274d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
274dc     01 01 0A F2 | 	cmp	_var01, _var02 wz
274e0     01 12 06 A1 |  if_e	add	arg01, #1
274e4     01 14 06 A1 |  if_e	add	arg02, #1
274e8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
274e8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
274ec     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
274f0     01 FB 81 51 |  if_ne	sub	result1, _var02
274f4     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
274f8     F6 17 6E FB | 	djnz	arg03, #LR__4010
274fc                 | LR__4011
274fc                 | ' 
274fc                 | ' 	return(0);
274fc     00 FA 05 F6 | 	mov	result1, #0
27500                 | _fatfs_cc_memcmp_ret
27500     2D 00 64 FD | 	ret
27504                 | 
27504                 | _fatfs_cc_strncmp
27504     09 01 0A F6 | 	mov	_var01, arg01 wz
27508     14 00 90 5D |  if_ne	jmp	#LR__4020
2750c                 | ' 		return scan2 ? -1 : 0;
2750c     00 14 0E F2 | 	cmp	arg02, #0 wz
27510     01 02 66 56 |  if_ne	neg	_var02, #1
27514     00 02 06 A6 |  if_e	mov	_var02, #0
27518     01 FB 01 F6 | 	mov	result1, _var02
2751c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27520                 | LR__4020
27520     00 14 0E F2 | 	cmp	arg02, #0 wz
27524     01 FA 05 A6 |  if_e	mov	result1, #1
27528     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2752c     0B 05 02 F6 | 	mov	_var03, arg03
27530     97 16 48 FB | 	callpa	#(@LR__4022-@LR__4021)>>2,fcache_load_ptr_
27534                 | ' 	count = n;
27534                 | ' 	do {
27534                 | LR__4021
27534     00 07 C2 FA | 	rdbyte	_var04, _var01
27538     0A 09 02 F6 | 	mov	_var05, arg02
2753c     04 0B C2 FA | 	rdbyte	_var06, _var05
27540     01 04 86 F1 | 	sub	_var03, #1
27544     00 04 56 F2 | 	cmps	_var03, #0 wc
27548     01 00 06 F1 | 	add	_var01, #1
2754c     01 14 06 F1 | 	add	arg02, #1
27550     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27554     08 00 90 2D |  if_nc_and_z	jmp	#LR__4023
27558     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2755c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4021
27560                 | LR__4022
27560                 | LR__4023
27560     00 04 56 F2 | 	cmps	_var03, #0 wc
27564                 | ' 		return(0);
27564     00 FA 05 C6 |  if_b	mov	result1, #0
27568     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2756c     05 07 0A F2 | 	cmp	_var04, _var06 wz
27570                 | ' 		return(0);
27570     00 FA 05 A6 |  if_e	mov	result1, #0
27574     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27578     00 06 0E F2 | 	cmp	_var04, #0 wz
2757c                 | ' 		return(-1);
2757c     01 FA 65 A6 |  if_e	neg	result1, #1
27580     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27584     00 0A 0E F2 | 	cmp	_var06, #0 wz
27588                 | ' 		return(1);
27588     01 FA 05 A6 |  if_e	mov	result1, #1
2758c                 | ' 		return(c1 - c2);
2758c     03 FB 01 56 |  if_ne	mov	result1, _var04
27590     05 FB 81 51 |  if_ne	sub	result1, _var06
27594                 | _fatfs_cc_strncmp_ret
27594     2D 00 64 FD | 	ret
27598                 | 
27598                 | _fatfs_cc_strchr
27598                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
27598                 | ' 	while ((c = *s++) != (char) charwanted)
27598                 | LR__4030
27598     09 01 02 F6 | 	mov	_var01, arg01
2759c     00 03 C2 FA | 	rdbyte	_var02, _var01
275a0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
275a4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
275a8     03 05 0A F2 | 	cmp	_var03, _var04 wz
275ac     01 12 06 F1 | 	add	arg01, #1
275b0     14 00 90 AD |  if_e	jmp	#LR__4031
275b4     01 05 02 F6 | 	mov	_var03, _var02
275b8     07 04 4E F7 | 	zerox	_var03, #7 wz
275bc     00 FA 05 A6 |  if_e	mov	result1, #0
275c0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
275c4     D0 FF 9F FD | 	jmp	#LR__4030
275c8                 | LR__4031
275c8                 | ' 	return((char *)--s);
275c8     01 12 86 F1 | 	sub	arg01, #1
275cc     09 FB 01 F6 | 	mov	result1, arg01
275d0                 | _fatfs_cc_strchr_ret
275d0     2D 00 64 FD | 	ret
275d4                 | 
275d4                 | _fatfs_cc_disk_initialize
275d4     04 4A 05 F6 | 	mov	COUNT_, #4
275d8     A8 00 A0 FD | 	call	#pushregs_
275dc     40 F0 07 F1 | 	add	ptra, #64
275e0     04 4E 05 F1 | 	add	fp, #4
275e4     A7 12 42 FC | 	wrbyte	arg01, fp
275e8     01 00 00 FF 
275ec     14 E4 05 F1 | 	add	objptr, ##532
275f0     F2 18 02 FB | 	rdlong	arg04, objptr
275f4     2C 4E 05 F1 | 	add	fp, #44
275f8     A7 18 62 FC | 	wrlong	arg04, fp
275fc     04 E4 85 F1 | 	sub	objptr, #4
27600     F2 18 02 FB | 	rdlong	arg04, objptr
27604     04 4E 05 F1 | 	add	fp, #4
27608     A7 18 62 FC | 	wrlong	arg04, fp
2760c     08 E4 05 F1 | 	add	objptr, #8
27610     F2 18 02 FB | 	rdlong	arg04, objptr
27614     04 4E 05 F1 | 	add	fp, #4
27618     A7 18 62 FC | 	wrlong	arg04, fp
2761c     04 E4 05 F1 | 	add	objptr, #4
27620     F2 18 02 FB | 	rdlong	arg04, objptr
27624     04 4E 05 F1 | 	add	fp, #4
27628     A7 18 62 FC | 	wrlong	arg04, fp
2762c     04 E4 05 F1 | 	add	objptr, #4
27630     F2 02 48 FC | 	wrbyte	#1, objptr
27634     01 00 00 FF 
27638     20 E4 85 F1 | 	sub	objptr, ##544
2763c     38 4E 85 F1 | 	sub	fp, #56
27640     A7 18 CA FA | 	rdbyte	arg04, fp wz
27644     04 4E 85 F1 | 	sub	fp, #4
27648                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27648                 | '             return RES_NOTRDY;
27648     03 FA 05 56 |  if_ne	mov	result1, #3
2764c     D8 05 90 5D |  if_ne	jmp	#LR__4058
27650     13 00 00 FF 
27654     10 13 06 F6 | 	mov	arg01, ##10000
27658     08 98 BF FD | 	call	#__system___waitus
2765c     30 4E 05 F1 | 	add	fp, #48
27660     A7 12 02 FB | 	rdlong	arg01, fp
27664     09 01 08 FC | 	wrpin	#0, arg01
27668     04 4E 05 F1 | 	add	fp, #4
2766c     A7 12 02 FB | 	rdlong	arg01, fp
27670     09 01 08 FC | 	wrpin	#0, arg01
27674     04 4E 05 F1 | 	add	fp, #4
27678     A7 12 02 FB | 	rdlong	arg01, fp
2767c     09 01 08 FC | 	wrpin	#0, arg01
27680     04 4E 05 F1 | 	add	fp, #4
27684     A7 12 02 FB | 	rdlong	arg01, fp
27688     09 00 80 FF 
2768c     09 01 08 FC | 	wrpin	##4608, arg01
27690     0C 4E 85 F1 | 	sub	fp, #12
27694     A7 12 02 FB | 	rdlong	arg01, fp
27698     59 12 62 FD | 	drvh	arg01
2769c     04 4E 05 F1 | 	add	fp, #4
276a0     A7 12 02 FB | 	rdlong	arg01, fp
276a4     59 12 62 FD | 	drvh	arg01
276a8     04 4E 05 F1 | 	add	fp, #4
276ac     A7 12 02 FB | 	rdlong	arg01, fp
276b0     59 12 62 FD | 	drvh	arg01
276b4     04 4E 05 F1 | 	add	fp, #4
276b8     A7 12 02 FB | 	rdlong	arg01, fp
276bc     59 12 62 FD | 	drvh	arg01
276c0     20 4E 85 F1 | 	sub	fp, #32
276c4     00 04 80 FF 
276c8     A7 20 68 FC | 	wrlong	##524304, fp
276cc     04 4E 05 F1 | 	add	fp, #4
276d0     20 03 80 FF 
276d4     A7 90 68 FC | 	wrlong	##409672, fp
276d8     14 4E 05 F1 | 	add	fp, #20
276dc     A7 1E 02 FB | 	rdlong	local01, fp
276e0     18 4E 85 F1 | 	sub	fp, #24
276e4     A7 16 02 FB | 	rdlong	arg03, fp
276e8     40 1E 62 FD | 	dirl	local01
276ec     A0 03 80 FF 
276f0     0F 91 08 FC | 	wrpin	##475208, local01
276f4     0F 17 12 FC | 	wxpin	arg03, local01
276f8     0F 01 28 FC | 	wypin	#0, local01
276fc     41 1E 62 FD | 	dirh	local01
27700     1C 4E 05 F1 | 	add	fp, #28
27704     A7 20 02 FB | 	rdlong	local02, fp
27708     10 1F 82 F1 | 	sub	local01, local02
2770c     07 1E 06 F5 | 	and	local01, #7
27710     18 1E 66 F0 | 	shl	local01, #24
27714     78 14 06 F6 | 	mov	arg02, #120
27718     0F 15 42 F5 | 	or	arg02, local01
2771c     14 4E 85 F1 | 	sub	fp, #20
27720     A7 14 62 FC | 	wrlong	arg02, fp
27724     14 4E 05 F1 | 	add	fp, #20
27728     A7 12 02 FB | 	rdlong	arg01, fp
2772c     10 14 26 F4 | 	bith	arg02, #16
27730     40 12 62 FD | 	dirl	arg01
27734     09 15 02 FC | 	wrpin	arg02, arg01
27738     09 3F 18 FC | 	wxpin	#31, arg01
2773c     FF FF FF FF 
27740     09 FF 2B FC | 	wypin	##-1, arg01
27744     41 12 62 FD | 	dirh	arg01
27748     04 4E 85 F1 | 	sub	fp, #4
2774c     A7 14 02 FB | 	rdlong	arg02, fp
27750     08 4E 05 F1 | 	add	fp, #8
27754     A7 22 02 FB | 	rdlong	local03, fp
27758     11 15 82 F1 | 	sub	arg02, local03
2775c     07 14 06 F5 | 	and	arg02, #7
27760     18 14 66 F0 | 	shl	arg02, #24
27764     14 4E 85 F1 | 	sub	fp, #20
27768     A7 14 62 FC | 	wrlong	arg02, fp
2776c     29 00 00 FF 
27770     7A 14 46 F5 | 	or	arg02, ##21114
27774     A7 14 62 FC | 	wrlong	arg02, fp
27778     14 4E 05 F1 | 	add	fp, #20
2777c     A7 12 02 FB | 	rdlong	arg01, fp
27780     40 12 62 FD | 	dirl	arg01
27784     09 15 02 FC | 	wrpin	arg02, arg01
27788     09 4F 18 FC | 	wxpin	#39, arg01
2778c     09 01 28 FC | 	wypin	#0, arg01
27790     41 12 62 FD | 	dirh	arg01
27794     28 4E 85 F1 | 	sub	fp, #40
27798     A7 12 02 F6 | 	mov	arg01, fp
2779c     14 4E 85 F1 | 	sub	fp, #20
277a0     0A 14 06 F6 | 	mov	arg02, #10
277a4     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
277a8     00 12 06 F6 | 	mov	arg01, #0
277ac     00 14 06 F6 | 	mov	arg02, #0
277b0     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277b4     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
277b8     64 12 06 F6 | 	mov	arg01, #100
277bc     A4 96 BF FD | 	call	#__system___waitus
277c0     14 4E 05 F1 | 	add	fp, #20
277c4     A7 12 02 F6 | 	mov	arg01, fp
277c8     14 4E 85 F1 | 	sub	fp, #20
277cc     0A 14 06 F6 | 	mov	arg02, #10
277d0     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
277d4     0C 4E 05 F1 | 	add	fp, #12
277d8     A7 00 48 FC | 	wrbyte	#0, fp
277dc     0C 4E 85 F1 | 	sub	fp, #12
277e0     00 12 06 F6 | 	mov	arg01, #0
277e4     00 14 06 F6 | 	mov	arg02, #0
277e8     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277ec     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
277f0     01 18 0E F2 | 	cmp	arg04, #1 wz
277f4     B8 03 90 5D |  if_ne	jmp	#LR__4057
277f8     08 12 06 F6 | 	mov	arg01, #8
277fc     AA 15 06 F6 | 	mov	arg02, #426
27800     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27804     FD FA E1 F8 | 	getbyte	result1, result1, #0
27808     01 FA 0D F2 | 	cmp	result1, #1 wz
2780c     98 01 90 5D |  if_ne	jmp	#LR__4043
27810     14 4E 05 F1 | 	add	fp, #20
27814     A7 12 02 F6 | 	mov	arg01, fp
27818     14 4E 85 F1 | 	sub	fp, #20
2781c     04 14 06 F6 | 	mov	arg02, #4
27820     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27824     16 4E 05 F1 | 	add	fp, #22
27828     A7 24 C2 FA | 	rdbyte	local04, fp
2782c     16 4E 85 F1 | 	sub	fp, #22
27830     01 24 0E F2 | 	cmp	local04, #1 wz
27834     17 4E 05 A1 |  if_e	add	fp, #23
27838     A7 22 C2 AA |  if_e	rdbyte	local03, fp
2783c     17 4E 85 A1 |  if_e	sub	fp, #23
27840     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27844     68 03 90 5D |  if_ne	jmp	#LR__4056
27848                 | ' 				for (tmr = 1000; tmr; tmr--) {
27848     18 4E 05 F1 | 	add	fp, #24
2784c     01 00 80 FF 
27850     A7 D0 6B FC | 	wrlong	##1000, fp
27854     18 4E 85 F1 | 	sub	fp, #24
27858                 | LR__4040
27858     18 4E 05 F1 | 	add	fp, #24
2785c     A7 1E 0A FB | 	rdlong	local01, fp wz
27860     18 4E 85 F1 | 	sub	fp, #24
27864     3C 00 90 AD |  if_e	jmp	#LR__4041
27868     A9 12 06 F6 | 	mov	arg01, #169
2786c     1E 14 C6 F9 | 	decod	arg02, #30
27870     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27874     FD 24 02 F6 | 	mov	local04, result1
27878     07 24 4E F7 | 	zerox	local04, #7 wz
2787c     24 00 90 AD |  if_e	jmp	#LR__4041
27880     01 00 00 FF 
27884     E8 13 06 F6 | 	mov	arg01, ##1000
27888     D8 95 BF FD | 	call	#__system___waitus
2788c     18 4E 05 F1 | 	add	fp, #24
27890     A7 24 02 FB | 	rdlong	local04, fp
27894     01 24 86 F1 | 	sub	local04, #1
27898     A7 24 62 FC | 	wrlong	local04, fp
2789c     18 4E 85 F1 | 	sub	fp, #24
278a0     B4 FF 9F FD | 	jmp	#LR__4040
278a4                 | LR__4041
278a4     18 4E 05 F1 | 	add	fp, #24
278a8     A7 24 0A FB | 	rdlong	local04, fp wz
278ac     18 4E 85 F1 | 	sub	fp, #24
278b0     4C 00 90 AD |  if_e	jmp	#LR__4042
278b4     3A 12 06 F6 | 	mov	arg01, #58
278b8     00 14 06 F6 | 	mov	arg02, #0
278bc     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
278c0     FD 22 02 F6 | 	mov	local03, result1
278c4     07 22 4E F7 | 	zerox	local03, #7 wz
278c8     34 00 90 5D |  if_ne	jmp	#LR__4042
278cc     14 4E 05 F1 | 	add	fp, #20
278d0     A7 12 02 F6 | 	mov	arg01, fp
278d4     14 4E 85 F1 | 	sub	fp, #20
278d8     04 14 06 F6 | 	mov	arg02, #4
278dc     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
278e0     14 4E 05 F1 | 	add	fp, #20
278e4     A7 1E C2 FA | 	rdbyte	local01, fp
278e8     40 1E CE F7 | 	test	local01, #64 wz
278ec     0C 24 06 56 |  if_ne	mov	local04, #12
278f0     04 24 06 A6 |  if_e	mov	local04, #4
278f4     08 4E 85 F1 | 	sub	fp, #8
278f8     A7 24 42 FC | 	wrbyte	local04, fp
278fc     0C 4E 85 F1 | 	sub	fp, #12
27900                 | LR__4042
27900     14 24 06 FB | 	rdlong	local04, #20
27904     18 4E 05 F1 | 	add	fp, #24
27908     A7 24 62 FC | 	wrlong	local04, fp
2790c     0C 4E 05 F1 | 	add	fp, #12
27910     A7 24 02 FB | 	rdlong	local04, fp
27914     1B 24 26 F4 | 	bith	local04, #27
27918     A7 24 62 FC | 	wrlong	local04, fp
2791c     0C 4E 85 F1 | 	sub	fp, #12
27920     A7 24 02 FB | 	rdlong	local04, fp
27924     18 4E 85 F1 | 	sub	fp, #24
27928     68 78 04 FF 
2792c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27930     1C 4E 05 C1 |  if_b	add	fp, #28
27934     00 01 80 CF 
27938     A7 08 68 CC |  if_b	wrlong	##131076, fp
2793c     1C 4E 85 C1 |  if_b	sub	fp, #28
27940     6C 02 90 CD |  if_b	jmp	#LR__4056
27944     18 4E 05 F1 | 	add	fp, #24
27948     A7 24 02 FB | 	rdlong	local04, fp
2794c     18 4E 85 F1 | 	sub	fp, #24
27950     E1 F5 05 FF 
27954     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27958     1C 4E 05 C1 |  if_b	add	fp, #28
2795c     00 01 80 CF 
27960     A7 0A 68 CC |  if_b	wrlong	##131077, fp
27964     1C 4E 85 C1 |  if_b	sub	fp, #28
27968     44 02 90 CD |  if_b	jmp	#LR__4056
2796c     18 4E 05 F1 | 	add	fp, #24
27970     A7 24 02 FB | 	rdlong	local04, fp
27974     18 4E 85 F1 | 	sub	fp, #24
27978     3B 58 08 FF 
2797c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
27980     1C 4E 05 C1 |  if_b	add	fp, #28
27984     00 01 80 CF 
27988     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2798c     1C 4E 85 C1 |  if_b	sub	fp, #28
27990     1C 02 90 CD |  if_b	jmp	#LR__4056
27994     1C 4E 05 F1 | 	add	fp, #28
27998     80 01 80 FF 
2799c     A7 10 68 FC | 	wrlong	##196616, fp
279a0     1C 4E 85 F1 | 	sub	fp, #28
279a4     08 02 90 FD | 	jmp	#LR__4056
279a8                 | LR__4043
279a8     A9 12 06 F6 | 	mov	arg01, #169
279ac     00 14 06 F6 | 	mov	arg02, #0
279b0     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
279b4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
279b8     02 24 16 F2 | 	cmp	local04, #2 wc
279bc     18 00 90 3D |  if_ae	jmp	#LR__4044
279c0     0C 4E 05 F1 | 	add	fp, #12
279c4     A7 04 48 FC | 	wrbyte	#2, fp
279c8     04 4E 05 F1 | 	add	fp, #4
279cc     A7 52 49 FC | 	wrbyte	#169, fp
279d0     10 4E 85 F1 | 	sub	fp, #16
279d4     14 00 90 FD | 	jmp	#LR__4045
279d8                 | LR__4044
279d8     0C 4E 05 F1 | 	add	fp, #12
279dc     A7 02 48 FC | 	wrbyte	#1, fp
279e0     04 4E 05 F1 | 	add	fp, #4
279e4     A7 02 48 FC | 	wrbyte	#1, fp
279e8     10 4E 85 F1 | 	sub	fp, #16
279ec                 | LR__4045
279ec                 | ' 				ty =  0x01 ; cmd =  (1) ;
279ec                 | ' 			}
279ec                 | ' 			for (tmr = 1000; tmr; tmr--) {
279ec     18 4E 05 F1 | 	add	fp, #24
279f0     01 00 80 FF 
279f4     A7 D0 6B FC | 	wrlong	##1000, fp
279f8     18 4E 85 F1 | 	sub	fp, #24
279fc                 | LR__4046
279fc     18 4E 05 F1 | 	add	fp, #24
27a00     A7 22 0A FB | 	rdlong	local03, fp wz
27a04     18 4E 85 F1 | 	sub	fp, #24
27a08     44 00 90 AD |  if_e	jmp	#LR__4047
27a0c     10 4E 05 F1 | 	add	fp, #16
27a10     A7 12 C2 FA | 	rdbyte	arg01, fp
27a14     10 4E 85 F1 | 	sub	fp, #16
27a18     00 14 06 F6 | 	mov	arg02, #0
27a1c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27a20     FD 24 02 F6 | 	mov	local04, result1
27a24     07 24 4E F7 | 	zerox	local04, #7 wz
27a28     24 00 90 AD |  if_e	jmp	#LR__4047
27a2c     01 00 00 FF 
27a30     E8 13 06 F6 | 	mov	arg01, ##1000
27a34     2C 94 BF FD | 	call	#__system___waitus
27a38     18 4E 05 F1 | 	add	fp, #24
27a3c     A7 24 02 FB | 	rdlong	local04, fp
27a40     01 24 86 F1 | 	sub	local04, #1
27a44     A7 24 62 FC | 	wrlong	local04, fp
27a48     18 4E 85 F1 | 	sub	fp, #24
27a4c     AC FF 9F FD | 	jmp	#LR__4046
27a50                 | LR__4047
27a50     18 4E 05 F1 | 	add	fp, #24
27a54     A7 24 0A FB | 	rdlong	local04, fp wz
27a58     18 4E 85 F1 | 	sub	fp, #24
27a5c     14 00 90 AD |  if_e	jmp	#LR__4048
27a60     10 12 06 F6 | 	mov	arg01, #16
27a64     09 14 C6 F9 | 	decod	arg02, #9
27a68     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27a6c     07 FA 4D F7 | 	zerox	result1, #7 wz
27a70     0C 00 90 AD |  if_e	jmp	#LR__4049
27a74                 | LR__4048
27a74     0C 4E 05 F1 | 	add	fp, #12
27a78     A7 00 48 FC | 	wrbyte	#0, fp
27a7c     0C 4E 85 F1 | 	sub	fp, #12
27a80                 | LR__4049
27a80     14 24 06 FB | 	rdlong	local04, #20
27a84     18 4E 05 F1 | 	add	fp, #24
27a88     A7 24 62 FC | 	wrlong	local04, fp
27a8c     18 4E 85 F1 | 	sub	fp, #24
27a90     F0 FA 02 FF 
27a94     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27a98     18 00 90 3D |  if_ae	jmp	#LR__4050
27a9c     24 4E 05 F1 | 	add	fp, #36
27aa0     A7 24 02 FB | 	rdlong	local04, fp
27aa4     1B 24 26 F4 | 	bith	local04, #27
27aa8     A7 24 62 FC | 	wrlong	local04, fp
27aac     24 4E 85 F1 | 	sub	fp, #36
27ab0     2C 00 90 FD | 	jmp	#LR__4051
27ab4                 | LR__4050
27ab4     18 4E 05 F1 | 	add	fp, #24
27ab8     A7 24 02 FB | 	rdlong	local04, fp
27abc     18 4E 85 F1 | 	sub	fp, #24
27ac0     E1 F5 05 FF 
27ac4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27ac8     24 4E 05 C1 |  if_b	add	fp, #36
27acc     A7 24 02 CB |  if_b	rdlong	local04, fp
27ad0     80 00 04 CF 
27ad4     00 24 46 C5 |  if_b	or	local04, ##134283264
27ad8     A7 24 62 CC |  if_b	wrlong	local04, fp
27adc     24 4E 85 C1 |  if_b	sub	fp, #36
27ae0                 | LR__4051
27ae0     18 4E 05 F1 | 	add	fp, #24
27ae4     A7 24 02 FB | 	rdlong	local04, fp
27ae8     18 4E 85 F1 | 	sub	fp, #24
27aec     F0 FA 02 FF 
27af0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27af4     1C 4E 05 C1 |  if_b	add	fp, #28
27af8     00 01 80 CF 
27afc     A7 08 68 CC |  if_b	wrlong	##131076, fp
27b00     1C 4E 85 C1 |  if_b	sub	fp, #28
27b04     A8 00 90 CD |  if_b	jmp	#LR__4055
27b08     18 4E 05 F1 | 	add	fp, #24
27b0c     A7 24 02 FB | 	rdlong	local04, fp
27b10     18 4E 85 F1 | 	sub	fp, #24
27b14     68 78 04 FF 
27b18     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27b1c     1C 4E 05 C1 |  if_b	add	fp, #28
27b20     80 01 80 CF 
27b24     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27b28     1C 4E 85 C1 |  if_b	sub	fp, #28
27b2c     80 00 90 CD |  if_b	jmp	#LR__4054
27b30     18 4E 05 F1 | 	add	fp, #24
27b34     A7 24 02 FB | 	rdlong	local04, fp
27b38     18 4E 85 F1 | 	sub	fp, #24
27b3c     E1 F5 05 FF 
27b40     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27b44     1C 4E 05 C1 |  if_b	add	fp, #28
27b48     00 02 80 CF 
27b4c     A7 10 68 CC |  if_b	wrlong	##262152, fp
27b50     1C 4E 85 C1 |  if_b	sub	fp, #28
27b54     58 00 90 CD |  if_b	jmp	#LR__4053
27b58     18 4E 05 F1 | 	add	fp, #24
27b5c     A7 24 02 FB | 	rdlong	local04, fp
27b60     18 4E 85 F1 | 	sub	fp, #24
27b64     59 73 07 FF 
27b68     81 24 16 F2 | 	cmp	local04, ##250000001 wc
27b6c     1C 4E 05 C1 |  if_b	add	fp, #28
27b70     80 02 80 CF 
27b74     A7 14 68 CC |  if_b	wrlong	##327690, fp
27b78     1C 4E 85 C1 |  if_b	sub	fp, #28
27b7c     30 00 90 CD |  if_b	jmp	#LR__4052
27b80     18 4E 05 F1 | 	add	fp, #24
27b84     A7 24 02 FB | 	rdlong	local04, fp
27b88     18 4E 85 F1 | 	sub	fp, #24
27b8c     D1 F0 08 FF 
27b90     01 25 16 F2 | 	cmp	local04, ##300000001 wc
27b94     1C 4E 05 C1 |  if_b	add	fp, #28
27b98     00 03 80 CF 
27b9c     A7 18 68 CC |  if_b	wrlong	##393228, fp
27ba0     1C 4E 85 F3 | 	sumc	fp, #28
27ba4     80 03 80 3F 
27ba8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
27bac     1C 4E 85 31 |  if_ae	sub	fp, #28
27bb0                 | LR__4052
27bb0                 | LR__4053
27bb0                 | LR__4054
27bb0                 | LR__4055
27bb0                 | LR__4056
27bb0                 | LR__4057
27bb0     0C 4E 05 F1 | 	add	fp, #12
27bb4     A7 24 C2 FA | 	rdbyte	local04, fp
27bb8     01 00 00 FF 
27bbc     21 E4 05 F1 | 	add	objptr, ##545
27bc0     F2 24 42 FC | 	wrbyte	local04, objptr
27bc4     A7 1E CA FA | 	rdbyte	local01, fp wz
27bc8     00 24 06 56 |  if_ne	mov	local04, #0
27bcc     01 24 06 A6 |  if_e	mov	local04, #1
27bd0     20 4E 05 F1 | 	add	fp, #32
27bd4     A7 24 42 FC | 	wrbyte	local04, fp
27bd8     A7 24 C2 FA | 	rdbyte	local04, fp
27bdc     2C 4E 85 F1 | 	sub	fp, #44
27be0     01 E4 85 F1 | 	sub	objptr, #1
27be4     F2 24 42 FC | 	wrbyte	local04, objptr
27be8     01 00 00 FF 
27bec     20 E4 85 F1 | 	sub	objptr, ##544
27bf0     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
27bf4     34 4E 05 F1 | 	add	fp, #52
27bf8     A7 12 02 FB | 	rdlong	arg01, fp
27bfc     18 4E 85 F1 | 	sub	fp, #24
27c00     A7 14 02 FB | 	rdlong	arg02, fp
27c04     09 15 12 FC | 	wxpin	arg02, arg01
27c08     1C 4E 05 F1 | 	add	fp, #28
27c0c     A7 12 02 FB | 	rdlong	arg01, fp
27c10     14 4E 85 F1 | 	sub	fp, #20
27c14     A7 14 02 FB | 	rdlong	arg02, fp
27c18     09 15 02 FC | 	wrpin	arg02, arg01
27c1c                 | ' 
27c1c                 | ' 		}
27c1c                 | ' 	}
27c1c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27c1c                 | ' 	CardType = ty;
27c1c                 | ' 	s = ty ? 0 :  0x01 ;
27c1c                 | ' 	Stat = s;
27c1c                 | ' 
27c1c                 | ' 	deselect();
27c1c                 | ' 
27c1c                 | ' 
27c1c                 | ' 	_wxpin( PIN_CLK, ck_div );
27c1c                 | ' 	_wrpin( PIN_DI, spm_tx );
27c1c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27c1c                 | ' 	return s;
27c1c     08 4E 05 F1 | 	add	fp, #8
27c20     A7 FA C1 FA | 	rdbyte	result1, fp
27c24     2C 4E 85 F1 | 	sub	fp, #44
27c28                 | LR__4058
27c28     A7 F0 03 F6 | 	mov	ptra, fp
27c2c     B2 00 A0 FD | 	call	#popregs_
27c30                 | _fatfs_cc_disk_initialize_ret
27c30     2D 00 64 FD | 	ret
27c34                 | 
27c34                 | _fatfs_cc_disk_read
27c34     05 4A 05 F6 | 	mov	COUNT_, #5
27c38     A8 00 A0 FD | 	call	#pushregs_
27c3c     0A 1F 02 F6 | 	mov	local01, arg02
27c40     0B 21 02 F6 | 	mov	local02, arg03
27c44     0C 23 02 F6 | 	mov	local03, arg04
27c48     00 12 0E F2 | 	cmp	arg01, #0 wz
27c4c     01 FA 05 56 |  if_ne	mov	result1, #1
27c50                 | ' 
27c50                 | ' 	return Stat;
27c50     01 00 00 AF 
27c54     20 E4 05 A1 |  if_e	add	objptr, ##544
27c58     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27c5c     01 00 00 AF 
27c60     20 E4 85 A1 |  if_e	sub	objptr, ##544
27c64     FD FA E1 F8 | 	getbyte	result1, result1, #0
27c68     01 FA CD F7 | 	test	result1, #1 wz
27c6c     03 FA 05 56 |  if_ne	mov	result1, #3
27c70     84 00 90 5D |  if_ne	jmp	#LR__4062
27c74     01 00 00 FF 
27c78     21 E4 05 F1 | 	add	objptr, ##545
27c7c     F2 24 C2 FA | 	rdbyte	local04, objptr
27c80     01 00 00 FF 
27c84     21 E4 85 F1 | 	sub	objptr, ##545
27c88     08 24 CE F7 | 	test	local04, #8 wz
27c8c     09 20 66 A0 |  if_e	shl	local02, #9
27c90     02 22 16 F2 | 	cmp	local03, #2 wc
27c94     12 24 06 36 |  if_ae	mov	local04, #18
27c98     11 24 06 C6 |  if_b	mov	local04, #17
27c9c     10 15 02 F6 | 	mov	arg02, local02
27ca0     12 13 02 F6 | 	mov	arg01, local04
27ca4     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27ca8     FD 26 02 F6 | 	mov	local05, result1
27cac     07 26 4E F7 | 	zerox	local05, #7 wz
27cb0     30 00 90 5D |  if_ne	jmp	#LR__4061
27cb4                 | ' 		do {
27cb4                 | LR__4060
27cb4     0F 13 02 F6 | 	mov	arg01, local01
27cb8     09 14 C6 F9 | 	decod	arg02, #9
27cbc     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
27cc4     01 00 00 5F 
27cc8     00 1E 06 51 |  if_ne	add	local01, ##512
27ccc     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4060
27cd0     12 25 E2 F8 | 	getbyte	local04, local04, #0
27cd4     12 24 0E F2 | 	cmp	local04, #18 wz
27cd8     0C 12 06 A6 |  if_e	mov	arg01, #12
27cdc     00 14 06 A6 |  if_e	mov	arg02, #0
27ce0     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27ce4                 | LR__4061
27ce4     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27ce8                 | ' 	}
27ce8                 | ' 	deselect();
27ce8                 | ' 
27ce8                 | ' 	return count ? RES_ERROR : RES_OK;
27ce8     00 22 0E F2 | 	cmp	local03, #0 wz
27cec     01 26 06 56 |  if_ne	mov	local05, #1
27cf0     00 26 06 A6 |  if_e	mov	local05, #0
27cf4     13 FB 01 F6 | 	mov	result1, local05
27cf8                 | LR__4062
27cf8     A7 F0 03 F6 | 	mov	ptra, fp
27cfc     B2 00 A0 FD | 	call	#popregs_
27d00                 | _fatfs_cc_disk_read_ret
27d00     2D 00 64 FD | 	ret
27d04                 | 
27d04                 | _fatfs_cc_disk_write
27d04     04 4A 05 F6 | 	mov	COUNT_, #4
27d08     A8 00 A0 FD | 	call	#pushregs_
27d0c     0A 1F 02 F6 | 	mov	local01, arg02
27d10     0C 21 02 F6 | 	mov	local02, arg04
27d14     0B 23 02 F6 | 	mov	local03, arg03
27d18     00 12 0E F2 | 	cmp	arg01, #0 wz
27d1c     01 FA 05 56 |  if_ne	mov	result1, #1
27d20                 | ' 
27d20                 | ' 	return Stat;
27d20     01 00 00 AF 
27d24     20 E4 05 A1 |  if_e	add	objptr, ##544
27d28     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27d2c     01 00 00 AF 
27d30     20 E4 85 A1 |  if_e	sub	objptr, ##544
27d34     FD FA E1 F8 | 	getbyte	result1, result1, #0
27d38     01 FA CD F7 | 	test	result1, #1 wz
27d3c     03 FA 05 56 |  if_ne	mov	result1, #3
27d40     D4 00 90 5D |  if_ne	jmp	#LR__4074
27d44     01 00 00 FF 
27d48     21 E4 05 F1 | 	add	objptr, ##545
27d4c     F2 16 C2 FA | 	rdbyte	arg03, objptr
27d50     01 00 00 FF 
27d54     21 E4 85 F1 | 	sub	objptr, ##545
27d58     08 16 CE F7 | 	test	arg03, #8 wz
27d5c     09 22 66 A0 |  if_e	shl	local03, #9
27d60     01 20 0E F2 | 	cmp	local02, #1 wz
27d64     30 00 90 5D |  if_ne	jmp	#LR__4070
27d68     18 12 06 F6 | 	mov	arg01, #24
27d6c     11 15 02 F6 | 	mov	arg02, local03
27d70     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27d74     FD 24 02 F6 | 	mov	local04, result1
27d78     07 24 4E F7 | 	zerox	local04, #7 wz
27d7c     84 00 90 5D |  if_ne	jmp	#LR__4073
27d80     0F 13 02 F6 | 	mov	arg01, local01
27d84     FE 14 06 F6 | 	mov	arg02, #254
27d88     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
27d90     00 20 06 56 |  if_ne	mov	local02, #0
27d94     6C 00 90 FD | 	jmp	#LR__4073
27d98                 | LR__4070
27d98     01 00 00 FF 
27d9c     21 E4 05 F1 | 	add	objptr, ##545
27da0     F2 24 C2 FA | 	rdbyte	local04, objptr
27da4     01 00 00 FF 
27da8     21 E4 85 F1 | 	sub	objptr, ##545
27dac     06 24 CE F7 | 	test	local04, #6 wz
27db0     97 12 06 56 |  if_ne	mov	arg01, #151
27db4     10 15 02 56 |  if_ne	mov	arg02, local02
27db8     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27dbc     11 15 02 F6 | 	mov	arg02, local03
27dc0     19 12 06 F6 | 	mov	arg01, #25
27dc4     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27dc8     FD 24 02 F6 | 	mov	local04, result1
27dcc     07 24 4E F7 | 	zerox	local04, #7 wz
27dd0     30 00 90 5D |  if_ne	jmp	#LR__4072
27dd4                 | ' 			do {
27dd4                 | LR__4071
27dd4     0F 13 02 F6 | 	mov	arg01, local01
27dd8     FC 14 06 F6 | 	mov	arg02, #252
27ddc     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27de0     00 FA 0D F2 | 	cmp	result1, #0 wz
27de4     01 00 00 5F 
27de8     00 1E 06 51 |  if_ne	add	local01, ##512
27dec     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4071
27df0     00 12 06 F6 | 	mov	arg01, #0
27df4     FD 14 06 F6 | 	mov	arg02, #253
27df8     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
27e00     01 20 06 A6 |  if_e	mov	local02, #1
27e04                 | LR__4072
27e04                 | LR__4073
27e04     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27e08                 | ' 				count = 1;
27e08                 | ' 		}
27e08                 | ' 	}
27e08                 | ' 	deselect();
27e08                 | ' 
27e08                 | ' 	return count ? RES_ERROR : RES_OK;
27e08     00 20 0E F2 | 	cmp	local02, #0 wz
27e0c     01 24 06 56 |  if_ne	mov	local04, #1
27e10     00 24 06 A6 |  if_e	mov	local04, #0
27e14     12 FB 01 F6 | 	mov	result1, local04
27e18                 | LR__4074
27e18     A7 F0 03 F6 | 	mov	ptra, fp
27e1c     B2 00 A0 FD | 	call	#popregs_
27e20                 | _fatfs_cc_disk_write_ret
27e20     2D 00 64 FD | 	ret
27e24                 | 
27e24                 | _fatfs_cc_disk_ioctl
27e24     01 4A 05 F6 | 	mov	COUNT_, #1
27e28     A8 00 A0 FD | 	call	#pushregs_
27e2c     30 F0 07 F1 | 	add	ptra, #48
27e30     04 4E 05 F1 | 	add	fp, #4
27e34     A7 12 42 FC | 	wrbyte	arg01, fp
27e38     04 4E 05 F1 | 	add	fp, #4
27e3c     A7 14 42 FC | 	wrbyte	arg02, fp
27e40     04 4E 05 F1 | 	add	fp, #4
27e44     A7 16 62 FC | 	wrlong	arg03, fp
27e48     08 4E 85 F1 | 	sub	fp, #8
27e4c     A7 12 CA FA | 	rdbyte	arg01, fp wz
27e50     04 4E 85 F1 | 	sub	fp, #4
27e54     01 FA 05 56 |  if_ne	mov	result1, #1
27e58                 | ' 
27e58                 | ' 	return Stat;
27e58     01 00 00 AF 
27e5c     20 E4 05 A1 |  if_e	add	objptr, ##544
27e60     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27e64     01 00 00 AF 
27e68     20 E4 85 A1 |  if_e	sub	objptr, ##544
27e6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27e70     01 FA CD F7 | 	test	result1, #1 wz
27e74     03 FA 05 56 |  if_ne	mov	result1, #3
27e78     E4 01 90 5D |  if_ne	jmp	#LR__4088
27e7c     10 4E 05 F1 | 	add	fp, #16
27e80     A7 02 68 FC | 	wrlong	#1, fp
27e84                 | ' 
27e84                 | ' 	res = RES_ERROR;
27e84                 | ' 	switch (ctrl) {
27e84     08 4E 85 F1 | 	sub	fp, #8
27e88     A7 1E C2 FA | 	rdbyte	local01, fp
27e8c     08 4E 85 F1 | 	sub	fp, #8
27e90     04 1E 26 F3 | 	fle	local01, #4
27e94     30 1E 62 FD | 	jmprel	local01
27e98                 | LR__4080
27e98     10 00 90 FD | 	jmp	#LR__4081
27e9c     24 00 90 FD | 	jmp	#LR__4082
27ea0     A0 01 90 FD | 	jmp	#LR__4086
27ea4     80 01 90 FD | 	jmp	#LR__4085
27ea8     98 01 90 FD | 	jmp	#LR__4086
27eac                 | LR__4081
27eac     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
27eb4     10 4E 05 51 |  if_ne	add	fp, #16
27eb8     A7 00 68 5C |  if_ne	wrlong	#0, fp
27ebc     10 4E 85 51 |  if_ne	sub	fp, #16
27ec0                 | ' 			break;
27ec0     8C 01 90 FD | 	jmp	#LR__4087
27ec4                 | LR__4082
27ec4     09 12 06 F6 | 	mov	arg01, #9
27ec8     00 14 06 F6 | 	mov	arg02, #0
27ecc     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27ed0     FD 1E 02 F6 | 	mov	local01, result1
27ed4     07 1E 4E F7 | 	zerox	local01, #7 wz
27ed8     74 01 90 5D |  if_ne	jmp	#LR__4087
27edc     18 4E 05 F1 | 	add	fp, #24
27ee0     A7 12 02 F6 | 	mov	arg01, fp
27ee4     18 4E 85 F1 | 	sub	fp, #24
27ee8     10 14 06 F6 | 	mov	arg02, #16
27eec     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ef4     58 01 90 AD |  if_e	jmp	#LR__4087
27ef8     18 4E 05 F1 | 	add	fp, #24
27efc     A7 1E C2 FA | 	rdbyte	local01, fp
27f00     18 4E 85 F1 | 	sub	fp, #24
27f04     06 1E 46 F0 | 	shr	local01, #6
27f08     01 1E 0E F2 | 	cmp	local01, #1 wz
27f0c     5C 00 90 5D |  if_ne	jmp	#LR__4083
27f10     21 4E 05 F1 | 	add	fp, #33
27f14     A7 1E C2 FA | 	rdbyte	local01, fp
27f18     01 4E 85 F1 | 	sub	fp, #1
27f1c     A7 FA C1 FA | 	rdbyte	result1, fp
27f20     FD FA 31 F9 | 	getword	result1, result1, #0
27f24     08 FA 65 F0 | 	shl	result1, #8
27f28     FD 1E 02 F1 | 	add	local01, result1
27f2c     01 4E 85 F1 | 	sub	fp, #1
27f30     A7 FA C1 FA | 	rdbyte	result1, fp
27f34     3F FA 05 F5 | 	and	result1, #63
27f38     10 FA 65 F0 | 	shl	result1, #16
27f3c     FD 1E 02 F1 | 	add	local01, result1
27f40     01 1E 06 F1 | 	add	local01, #1
27f44     09 4E 05 F1 | 	add	fp, #9
27f48     A7 1E 62 FC | 	wrlong	local01, fp
27f4c     1C 4E 85 F1 | 	sub	fp, #28
27f50     A7 1E 02 FB | 	rdlong	local01, fp
27f54     1C 4E 05 F1 | 	add	fp, #28
27f58     A7 FA 01 FB | 	rdlong	result1, fp
27f5c     28 4E 85 F1 | 	sub	fp, #40
27f60     0A FA 65 F0 | 	shl	result1, #10
27f64     0F FB 61 FC | 	wrlong	result1, local01
27f68     AC 00 90 FD | 	jmp	#LR__4084
27f6c                 | LR__4083
27f6c     1D 4E 05 F1 | 	add	fp, #29
27f70     A7 1E C2 FA | 	rdbyte	local01, fp
27f74     0F 1F 42 F8 | 	getnib	local01, local01, #0
27f78     05 4E 05 F1 | 	add	fp, #5
27f7c     A7 FA C1 FA | 	rdbyte	result1, fp
27f80     80 FA 05 F5 | 	and	result1, #128
27f84     07 FA C5 F0 | 	sar	result1, #7
27f88     FD 1E 02 F1 | 	add	local01, result1
27f8c     01 4E 85 F1 | 	sub	fp, #1
27f90     A7 FA C1 FA | 	rdbyte	result1, fp
27f94     03 FA 05 F5 | 	and	result1, #3
27f98     01 FA 65 F0 | 	shl	result1, #1
27f9c     FD 1E 02 F1 | 	add	local01, result1
27fa0     02 1E 06 F1 | 	add	local01, #2
27fa4     0D 4E 85 F1 | 	sub	fp, #13
27fa8     A7 1E 42 FC | 	wrbyte	local01, fp
27fac     0C 4E 05 F1 | 	add	fp, #12
27fb0     A7 1E C2 FA | 	rdbyte	local01, fp
27fb4     06 1E 46 F0 | 	shr	local01, #6
27fb8     01 4E 85 F1 | 	sub	fp, #1
27fbc     A7 FA C1 FA | 	rdbyte	result1, fp
27fc0     FD FA 31 F9 | 	getword	result1, result1, #0
27fc4     02 FA 65 F0 | 	shl	result1, #2
27fc8     FD 1E 02 F1 | 	add	local01, result1
27fcc     01 4E 85 F1 | 	sub	fp, #1
27fd0     A7 FA C1 FA | 	rdbyte	result1, fp
27fd4     03 FA 05 F5 | 	and	result1, #3
27fd8     FD FA 31 F9 | 	getword	result1, result1, #0
27fdc     0A FA 65 F0 | 	shl	result1, #10
27fe0     FD 1E 02 F1 | 	add	local01, result1
27fe4     01 1E 06 F1 | 	add	local01, #1
27fe8     0A 4E 05 F1 | 	add	fp, #10
27fec     A7 1E 62 FC | 	wrlong	local01, fp
27ff0     1C 4E 85 F1 | 	sub	fp, #28
27ff4     A7 1E 02 FB | 	rdlong	local01, fp
27ff8     1C 4E 05 F1 | 	add	fp, #28
27ffc     A7 FA 01 FB | 	rdlong	result1, fp
28000     14 4E 85 F1 | 	sub	fp, #20
28004     A7 16 C2 FA | 	rdbyte	arg03, fp
28008     14 4E 85 F1 | 	sub	fp, #20
2800c     09 16 86 F1 | 	sub	arg03, #9
28010     0B FB 61 F0 | 	shl	result1, arg03
28014     0F FB 61 FC | 	wrlong	result1, local01
28018                 | LR__4084
28018     10 4E 05 F1 | 	add	fp, #16
2801c     A7 00 68 FC | 	wrlong	#0, fp
28020     10 4E 85 F1 | 	sub	fp, #16
28024                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
28024                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
28024                 | ' 					*(LBA_t*)buff = cs << (n - 9);
28024                 | ' 				}
28024                 | ' 				res = RES_OK;
28024                 | ' 			}
28024                 | ' 			break;
28024     28 00 90 FD | 	jmp	#LR__4087
28028                 | LR__4085
28028     0C 4E 05 F1 | 	add	fp, #12
2802c     A7 1E 02 FB | 	rdlong	local01, fp
28030     0F 01 69 FC | 	wrlong	#128, local01
28034     04 4E 05 F1 | 	add	fp, #4
28038     A7 00 68 FC | 	wrlong	#0, fp
2803c     10 4E 85 F1 | 	sub	fp, #16
28040                 | ' 			*(DWORD*)buff = 128;
28040                 | ' 			res = RES_OK;
28040                 | ' 			break;
28040     0C 00 90 FD | 	jmp	#LR__4087
28044                 | LR__4086
28044     10 4E 05 F1 | 	add	fp, #16
28048     A7 08 68 FC | 	wrlong	#4, fp
2804c     10 4E 85 F1 | 	sub	fp, #16
28050                 | LR__4087
28050     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
28054                 | ' 			res = RES_PARERR;
28054                 | ' 	}
28054                 | ' 
28054                 | ' 	deselect();
28054                 | ' 
28054                 | ' 	return res;
28054     10 4E 05 F1 | 	add	fp, #16
28058     A7 FA 01 FB | 	rdlong	result1, fp
2805c     10 4E 85 F1 | 	sub	fp, #16
28060                 | LR__4088
28060     A7 F0 03 F6 | 	mov	ptra, fp
28064     B2 00 A0 FD | 	call	#popregs_
28068                 | _fatfs_cc_disk_ioctl_ret
28068     2D 00 64 FD | 	ret
2806c                 | 
2806c                 | _fatfs_cc_disk_setpins
2806c     00 12 0E F2 | 	cmp	arg01, #0 wz
28070     01 FA 65 56 |  if_ne	neg	result1, #1
28074     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
28078     01 00 00 FF 
2807c     10 E4 05 F1 | 	add	objptr, ##528
28080     F2 14 62 FC | 	wrlong	arg02, objptr
28084     04 E4 05 F1 | 	add	objptr, #4
28088     F2 16 62 FC | 	wrlong	arg03, objptr
2808c     04 E4 05 F1 | 	add	objptr, #4
28090     F2 18 62 FC | 	wrlong	arg04, objptr
28094     04 E4 05 F1 | 	add	objptr, #4
28098     F2 1A 62 FC | 	wrlong	arg05, objptr
2809c     01 00 00 FF 
280a0     1C E4 85 F1 | 	sub	objptr, ##540
280a4     00 FA 05 F6 | 	mov	result1, #0
280a8                 | _fatfs_cc_disk_setpins_ret
280a8     2D 00 64 FD | 	ret
280ac                 | 
280ac                 | _fatfs_cc_tchar2uni
280ac     09 01 02 FB | 	rdlong	_var01, arg01
280b0     00 03 02 F6 | 	mov	_var02, _var01
280b4     01 00 06 F1 | 	add	_var01, #1
280b8     00 05 02 F6 | 	mov	_var03, _var01
280bc     01 07 C2 FA | 	rdbyte	_var04, _var02
280c0     80 06 CE F7 | 	test	_var04, #128 wz
280c4     E8 00 90 AD |  if_e	jmp	#LR__4097
280c8     03 09 02 F6 | 	mov	_var05, _var04
280cc     E0 08 06 F5 | 	and	_var05, #224
280d0     C0 08 0E F2 | 	cmp	_var05, #192 wz
280d4     1F 06 06 A5 |  if_e	and	_var04, #31
280d8     01 0A 06 A6 |  if_e	mov	_var06, #1
280dc     34 00 90 AD |  if_e	jmp	#LR__4091
280e0     03 09 02 F6 | 	mov	_var05, _var04
280e4     F0 08 06 F5 | 	and	_var05, #240
280e8     E0 08 0E F2 | 	cmp	_var05, #224 wz
280ec     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
280f0     02 0A 06 A6 |  if_e	mov	_var06, #2
280f4     1C 00 90 AD |  if_e	jmp	#LR__4090
280f8     03 09 02 F6 | 	mov	_var05, _var04
280fc     F8 08 06 F5 | 	and	_var05, #248
28100     F0 08 0E F2 | 	cmp	_var05, #240 wz
28104     07 06 06 A5 |  if_e	and	_var04, #7
28108     03 0A 06 A6 |  if_e	mov	_var06, #3
2810c                 | ' 			return 0xFFFFFFFF;
2810c     01 FA 65 56 |  if_ne	neg	result1, #1
28110     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28114                 | LR__4090
28114                 | LR__4091
28114                 | ' 		}
28114                 | ' 		do {
28114                 | LR__4092
28114     02 0D C2 FA | 	rdbyte	_var07, _var03
28118     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2811c     C0 08 06 F5 | 	and	_var05, #192
28120     80 08 0E F2 | 	cmp	_var05, #128 wz
28124     01 04 06 F1 | 	add	_var03, #1
28128     01 FA 65 56 |  if_ne	neg	result1, #1
2812c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28130     06 06 66 F0 | 	shl	_var04, #6
28134     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
28138     3F 02 06 F5 | 	and	_var02, #63
2813c     01 07 42 F5 | 	or	_var04, _var02
28140     F4 0B 6E FB | 	djnz	_var06, #LR__4092
28144     80 06 16 F2 | 	cmp	_var04, #128 wc
28148     24 00 90 CD |  if_b	jmp	#LR__4094
2814c     6C 00 00 FF 
28150     00 06 16 F2 | 	cmp	_var04, ##55296 wc
28154     0C 00 90 CD |  if_b	jmp	#LR__4093
28158     70 00 00 FF 
2815c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
28160     0C 00 90 CD |  if_b	jmp	#LR__4094
28164                 | LR__4093
28164     80 08 00 FF 
28168     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2816c     08 00 90 CD |  if_b	jmp	#LR__4095
28170                 | LR__4094
28170     01 FA 65 F6 | 	neg	result1, #1
28174     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
28178                 | LR__4095
28178     80 00 00 FF 
2817c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
28180     2C 00 90 CD |  if_b	jmp	#LR__4096
28184     03 03 02 F6 | 	mov	_var02, _var04
28188     80 00 00 FF 
2818c     00 02 86 F1 | 	sub	_var02, ##65536
28190     06 02 66 F0 | 	shl	_var02, #6
28194     80 FF 01 FF 
28198     00 02 06 F5 | 	and	_var02, ##67043328
2819c     6E 00 6C FF 
281a0     00 08 06 F6 | 	mov	_var05, ##-671032320
281a4     01 09 42 F5 | 	or	_var05, _var02
281a8     09 06 46 F7 | 	zerox	_var04, #9
281ac     04 07 42 F5 | 	or	_var04, _var05
281b0                 | LR__4096
281b0                 | LR__4097
281b0     09 05 62 FC | 	wrlong	_var03, arg01
281b4                 | ' 	}
281b4                 | ' #line 811 "ff.c"
281b4                 | ' 	*str = p;
281b4                 | ' 	return uc;
281b4     03 FB 01 F6 | 	mov	result1, _var04
281b8                 | _fatfs_cc_tchar2uni_ret
281b8     2D 00 64 FD | 	ret
281bc                 | 
281bc                 | _fatfs_cc_put_utf
281bc     80 12 16 F2 | 	cmp	arg01, #128 wc
281c0     18 00 90 3D |  if_ae	jmp	#LR__4100
281c4     01 16 16 F2 | 	cmp	arg03, #1 wc
281c8     00 FA 05 C6 |  if_b	mov	result1, #0
281cc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
281d0     0A 13 42 FC | 	wrbyte	arg01, arg02
281d4                 | ' 		*buf = (TCHAR)chr;
281d4                 | ' 		return 1;
281d4     01 FA 05 F6 | 	mov	result1, #1
281d8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
281dc                 | LR__4100
281dc     04 00 00 FF 
281e0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
281e4     40 00 90 3D |  if_ae	jmp	#LR__4101
281e8     02 16 16 F2 | 	cmp	arg03, #2 wc
281ec     00 FA 05 C6 |  if_b	mov	result1, #0
281f0     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
281f4     09 FB 01 F6 | 	mov	result1, arg01
281f8     06 FA 45 F0 | 	shr	result1, #6
281fc     1F FA 05 F5 | 	and	result1, #31
28200     C0 16 06 F6 | 	mov	arg03, #192
28204     FD 16 42 F5 | 	or	arg03, result1
28208     0A 17 42 FC | 	wrbyte	arg03, arg02
2820c     01 14 06 F1 | 	add	arg02, #1
28210     3F 12 06 F5 | 	and	arg01, #63
28214     80 FA 05 F6 | 	mov	result1, #128
28218     09 FB 41 F5 | 	or	result1, arg01
2821c     0A FB 41 FC | 	wrbyte	result1, arg02
28220                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28220                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28220                 | ' 		return 2;
28220     02 FA 05 F6 | 	mov	result1, #2
28224     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28228                 | LR__4101
28228     80 00 00 FF 
2822c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28230     70 00 90 3D |  if_ae	jmp	#LR__4104
28234     03 16 16 F2 | 	cmp	arg03, #3 wc
28238     18 00 90 CD |  if_b	jmp	#LR__4102
2823c     6C 00 00 FF 
28240     00 12 16 F2 | 	cmp	arg01, ##55296 wc
28244     14 00 90 CD |  if_b	jmp	#LR__4103
28248     70 00 00 FF 
2824c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28250     08 00 90 3D |  if_ae	jmp	#LR__4103
28254                 | LR__4102
28254     00 FA 05 F6 | 	mov	result1, #0
28258     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2825c                 | LR__4103
2825c     09 FB 59 F8 | 	getnib	result1, arg01, #3
28260     E0 16 06 F6 | 	mov	arg03, #224
28264     FD 16 42 F5 | 	or	arg03, result1
28268     0A 17 42 FC | 	wrbyte	arg03, arg02
2826c     01 14 06 F1 | 	add	arg02, #1
28270     09 FB 01 F6 | 	mov	result1, arg01
28274     06 FA 45 F0 | 	shr	result1, #6
28278     3F FA 05 F5 | 	and	result1, #63
2827c     80 16 06 F6 | 	mov	arg03, #128
28280     FD 16 42 F5 | 	or	arg03, result1
28284     0A 17 42 FC | 	wrbyte	arg03, arg02
28288     01 14 06 F1 | 	add	arg02, #1
2828c     3F 12 06 F5 | 	and	arg01, #63
28290     80 FA 05 F6 | 	mov	result1, #128
28294     09 FB 41 F5 | 	or	result1, arg01
28298     0A FB 41 FC | 	wrbyte	result1, arg02
2829c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2829c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2829c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2829c                 | ' 		return 3;
2829c     03 FA 05 F6 | 	mov	result1, #3
282a0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
282a4                 | LR__4104
282a4     04 16 16 F2 | 	cmp	arg03, #4 wc
282a8     00 FA 05 C6 |  if_b	mov	result1, #0
282ac     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
282b0     09 01 02 F6 | 	mov	_var01, arg01
282b4     E0 01 06 F4 | 	bitl	_var01, #480
282b8     00 00 6C FF 
282bc     00 00 86 F1 | 	sub	_var01, ##-671088640
282c0     06 00 46 F0 | 	shr	_var01, #6
282c4     09 13 32 F9 | 	getword	arg01, arg01, #0
282c8     6E 00 00 FF 
282cc     00 12 86 F1 | 	sub	arg01, ##56320
282d0     00 08 00 FF 
282d4     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
282d8     02 00 00 CF 
282dc     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
282e0     00 FA 05 36 |  if_ae	mov	result1, #0
282e4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
282e8     09 01 42 F5 | 	or	_var01, arg01
282ec     80 00 00 FF 
282f0     00 00 06 F1 | 	add	_var01, ##65536
282f4     00 FB 01 F6 | 	mov	result1, _var01
282f8     12 FA 45 F0 | 	shr	result1, #18
282fc     07 FA 05 F5 | 	and	result1, #7
28300     F0 16 06 F6 | 	mov	arg03, #240
28304     FD 16 42 F5 | 	or	arg03, result1
28308     0A 17 42 FC | 	wrbyte	arg03, arg02
2830c     01 14 06 F1 | 	add	arg02, #1
28310     00 FB 01 F6 | 	mov	result1, _var01
28314     0C FA 45 F0 | 	shr	result1, #12
28318     3F FA 05 F5 | 	and	result1, #63
2831c     80 16 06 F6 | 	mov	arg03, #128
28320     FD 16 42 F5 | 	or	arg03, result1
28324     0A 17 42 FC | 	wrbyte	arg03, arg02
28328     01 14 06 F1 | 	add	arg02, #1
2832c     00 FB 01 F6 | 	mov	result1, _var01
28330     06 FA 45 F0 | 	shr	result1, #6
28334     3F FA 05 F5 | 	and	result1, #63
28338     80 16 06 F6 | 	mov	arg03, #128
2833c     FD 16 42 F5 | 	or	arg03, result1
28340     0A 17 42 FC | 	wrbyte	arg03, arg02
28344     01 14 06 F1 | 	add	arg02, #1
28348     3F 00 06 F5 | 	and	_var01, #63
2834c     80 FA 05 F6 | 	mov	result1, #128
28350     00 FB 41 F5 | 	or	result1, _var01
28354     0A FB 41 FC | 	wrbyte	result1, arg02
28358                 | ' 	chr = (hc | chr) + 0x10000;
28358                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28358                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28358                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28358                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28358                 | ' 	return 4;
28358     04 FA 05 F6 | 	mov	result1, #4
2835c                 | _fatfs_cc_put_utf_ret
2835c     2D 00 64 FD | 	ret
28360                 | 
28360                 | _fatfs_cc_sync_window
28360     02 4A 05 F6 | 	mov	COUNT_, #2
28364     A8 00 A0 FD | 	call	#pushregs_
28368     09 1F 02 F6 | 	mov	local01, arg01
2836c     00 20 06 F6 | 	mov	local02, #0
28370     03 1E 06 F1 | 	add	local01, #3
28374     0F FB C9 FA | 	rdbyte	result1, local01 wz
28378     03 1E 86 F1 | 	sub	local01, #3
2837c     A4 00 90 AD |  if_e	jmp	#LR__4112
28380     01 1E 06 F1 | 	add	local01, #1
28384     0F 13 C2 FA | 	rdbyte	arg01, local01
28388     33 1E 06 F1 | 	add	local01, #51
2838c     0F 15 02 F6 | 	mov	arg02, local01
28390     04 1E 86 F1 | 	sub	local01, #4
28394     0F 17 02 FB | 	rdlong	arg03, local01
28398     30 1E 86 F1 | 	sub	local01, #48
2839c     01 18 06 F6 | 	mov	arg04, #1
283a0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
283a4     00 FA 0D F2 | 	cmp	result1, #0 wz
283a8     74 00 90 5D |  if_ne	jmp	#LR__4110
283ac     03 1E 06 F1 | 	add	local01, #3
283b0     0F 01 48 FC | 	wrbyte	#0, local01
283b4     2D 1E 06 F1 | 	add	local01, #45
283b8     0F FB 01 FB | 	rdlong	result1, local01
283bc     0C 1E 86 F1 | 	sub	local01, #12
283c0     0F 19 02 FB | 	rdlong	arg04, local01
283c4     0C FB 81 F1 | 	sub	result1, arg04
283c8     08 1E 86 F1 | 	sub	local01, #8
283cc     0F 19 02 FB | 	rdlong	arg04, local01
283d0     1C 1E 86 F1 | 	sub	local01, #28
283d4     0C FB 11 F2 | 	cmp	result1, arg04 wc
283d8     48 00 90 3D |  if_ae	jmp	#LR__4111
283dc     02 1E 06 F1 | 	add	local01, #2
283e0     0F 19 C2 FA | 	rdbyte	arg04, local01
283e4     02 1E 86 F1 | 	sub	local01, #2
283e8     02 18 0E F2 | 	cmp	arg04, #2 wz
283ec     34 00 90 5D |  if_ne	jmp	#LR__4111
283f0     01 1E 06 F1 | 	add	local01, #1
283f4     0F 13 C2 FA | 	rdbyte	arg01, local01
283f8     33 1E 06 F1 | 	add	local01, #51
283fc     0F 15 02 F6 | 	mov	arg02, local01
28400     04 1E 86 F1 | 	sub	local01, #4
28404     0F 17 02 FB | 	rdlong	arg03, local01
28408     14 1E 86 F1 | 	sub	local01, #20
2840c     0F 1F 02 FB | 	rdlong	local01, local01
28410     0F 17 02 F1 | 	add	arg03, local01
28414     01 18 06 F6 | 	mov	arg04, #1
28418     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2841c     04 00 90 FD | 	jmp	#LR__4111
28420                 | LR__4110
28420     01 20 06 F6 | 	mov	local02, #1
28424                 | LR__4111
28424                 | LR__4112
28424                 | ' 			res = FR_DISK_ERR;
28424                 | ' 		}
28424                 | ' 	}
28424                 | ' 	return res;
28424     10 FB 01 F6 | 	mov	result1, local02
28428     A7 F0 03 F6 | 	mov	ptra, fp
2842c     B2 00 A0 FD | 	call	#popregs_
28430                 | _fatfs_cc_sync_window_ret
28430     2D 00 64 FD | 	ret
28434                 | 
28434                 | _fatfs_cc_move_window
28434     03 4A 05 F6 | 	mov	COUNT_, #3
28438     A8 00 A0 FD | 	call	#pushregs_
2843c     09 1F 02 F6 | 	mov	local01, arg01
28440     0A 21 02 F6 | 	mov	local02, arg02
28444     00 22 06 F6 | 	mov	local03, #0
28448     30 1E 06 F1 | 	add	local01, #48
2844c     0F 19 02 FB | 	rdlong	arg04, local01
28450     30 1E 86 F1 | 	sub	local01, #48
28454     0C 21 0A F2 | 	cmp	local02, arg04 wz
28458     40 00 90 AD |  if_e	jmp	#LR__4121
2845c     0F 13 02 F6 | 	mov	arg01, local01
28460     FC FE BF FD | 	call	#_fatfs_cc_sync_window
28464     FD 22 0A F6 | 	mov	local03, result1 wz
28468     30 00 90 5D |  if_ne	jmp	#LR__4120
2846c     01 1E 06 F1 | 	add	local01, #1
28470     0F 13 C2 FA | 	rdbyte	arg01, local01
28474     33 1E 06 F1 | 	add	local01, #51
28478     0F 15 02 F6 | 	mov	arg02, local01
2847c     10 17 02 F6 | 	mov	arg03, local02
28480     01 18 06 F6 | 	mov	arg04, #1
28484     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
28488     00 FA 0D F2 | 	cmp	result1, #0 wz
2848c     01 20 66 56 |  if_ne	neg	local02, #1
28490     01 22 06 56 |  if_ne	mov	local03, #1
28494     04 1E 86 F1 | 	sub	local01, #4
28498     0F 21 62 FC | 	wrlong	local02, local01
2849c                 | LR__4120
2849c                 | LR__4121
2849c                 | ' 				sect = (LBA_t)0 - 1;
2849c                 | ' 				res = FR_DISK_ERR;
2849c                 | ' 			}
2849c                 | ' 			fs->winsect = sect;
2849c                 | ' 		}
2849c                 | ' 	}
2849c                 | ' 	return res;
2849c     11 FB 01 F6 | 	mov	result1, local03
284a0     A7 F0 03 F6 | 	mov	ptra, fp
284a4     B2 00 A0 FD | 	call	#popregs_
284a8                 | _fatfs_cc_move_window_ret
284a8     2D 00 64 FD | 	ret
284ac                 | 
284ac                 | _fatfs_cc_sync_fs
284ac     02 4A 05 F6 | 	mov	COUNT_, #2
284b0     A8 00 A0 FD | 	call	#pushregs_
284b4     09 1F 02 F6 | 	mov	local01, arg01
284b8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
284bc     FD 20 0A F6 | 	mov	local02, result1 wz
284c0     D8 00 90 5D |  if_ne	jmp	#LR__4131
284c4     0F 19 C2 FA | 	rdbyte	arg04, local01
284c8     03 18 0E F2 | 	cmp	arg04, #3 wz
284cc     04 1E 06 A1 |  if_e	add	local01, #4
284d0     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
284d4     04 1E 86 A1 |  if_e	sub	local01, #4
284d8     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
284dc     A0 00 90 5D |  if_ne	jmp	#LR__4130
284e0     34 1E 06 F1 | 	add	local01, #52
284e4     0F 13 02 F6 | 	mov	arg01, local01
284e8     00 14 06 F6 | 	mov	arg02, #0
284ec     09 16 C6 F9 | 	decod	arg03, #9
284f0     98 00 A0 FD | 	call	#\builtin_bytefill_
284f4     0F 13 02 F6 | 	mov	arg01, local01
284f8     FE 13 06 F1 | 	add	arg01, #510
284fc     55 00 80 FF 
28500     09 AB 58 FC | 	wrword	##43605, arg01
28504     A9 B0 A0 FF 
28508     0F A5 68 FC | 	wrlong	##1096897106, local01
2850c     0F 13 02 F6 | 	mov	arg01, local01
28510     E4 13 06 F1 | 	add	arg01, #484
28514     B9 A0 B0 FF 
28518     09 E5 68 FC | 	wrlong	##1631679090, arg01
2851c     0F 13 02 F6 | 	mov	arg01, local01
28520     E8 13 06 F1 | 	add	arg01, #488
28524     20 1E 86 F1 | 	sub	local01, #32
28528     0F 15 02 FB | 	rdlong	arg02, local01
2852c     09 15 62 FC | 	wrlong	arg02, arg01
28530     20 1E 06 F1 | 	add	local01, #32
28534     0F 13 02 F6 | 	mov	arg01, local01
28538     EC 13 06 F1 | 	add	arg01, #492
2853c     24 1E 86 F1 | 	sub	local01, #36
28540     0F 15 02 FB | 	rdlong	arg02, local01
28544     09 15 62 FC | 	wrlong	arg02, arg01
28548     10 1E 06 F1 | 	add	local01, #16
2854c     0F 17 02 FB | 	rdlong	arg03, local01
28550     01 16 06 F1 | 	add	arg03, #1
28554     10 1E 06 F1 | 	add	local01, #16
28558     0F 17 62 FC | 	wrlong	arg03, local01
2855c     2F 1E 86 F1 | 	sub	local01, #47
28560     0F 13 C2 FA | 	rdbyte	arg01, local01
28564     33 1E 06 F1 | 	add	local01, #51
28568     0F 15 02 F6 | 	mov	arg02, local01
2856c     01 18 06 F6 | 	mov	arg04, #1
28570     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
28574     30 1E 86 F1 | 	sub	local01, #48
28578     0F 01 48 FC | 	wrbyte	#0, local01
2857c     04 1E 86 F1 | 	sub	local01, #4
28580                 | LR__4130
28580     01 1E 06 F1 | 	add	local01, #1
28584     0F 13 C2 FA | 	rdbyte	arg01, local01
28588     00 14 06 F6 | 	mov	arg02, #0
2858c     00 16 06 F6 | 	mov	arg03, #0
28590     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
28594     00 FA 0D F2 | 	cmp	result1, #0 wz
28598     01 20 06 56 |  if_ne	mov	local02, #1
2859c                 | LR__4131
2859c                 | ' 	}
2859c                 | ' 
2859c                 | ' 	return res;
2859c     10 FB 01 F6 | 	mov	result1, local02
285a0     A7 F0 03 F6 | 	mov	ptra, fp
285a4     B2 00 A0 FD | 	call	#popregs_
285a8                 | _fatfs_cc_sync_fs_ret
285a8     2D 00 64 FD | 	ret
285ac                 | 
285ac                 | _fatfs_cc_clst2sect
285ac     02 14 86 F1 | 	sub	arg02, #2
285b0     18 12 06 F1 | 	add	arg01, #24
285b4     09 01 02 FB | 	rdlong	_var01, arg01
285b8     18 12 86 F1 | 	sub	arg01, #24
285bc     02 00 86 F1 | 	sub	_var01, #2
285c0     00 15 12 F2 | 	cmp	arg02, _var01 wc
285c4     00 FA 05 36 |  if_ae	mov	result1, #0
285c8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
285cc     0A 12 06 F1 | 	add	arg01, #10
285d0     09 01 E2 FA | 	rdword	_var01, arg01
285d4     0A 01 02 FD | 	qmul	_var01, arg02
285d8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
285d8     22 12 06 F1 | 	add	arg01, #34
285dc     09 FB 01 FB | 	rdlong	result1, arg01
285e0     18 00 62 FD | 	getqx	_var01
285e4     00 FB 01 F1 | 	add	result1, _var01
285e8                 | _fatfs_cc_clst2sect_ret
285e8     2D 00 64 FD | 	ret
285ec                 | 
285ec                 | _fatfs_cc_get_fat
285ec     07 4A 05 F6 | 	mov	COUNT_, #7
285f0     A8 00 A0 FD | 	call	#pushregs_
285f4     0A 1F 02 F6 | 	mov	local01, arg02
285f8     09 21 02 FB | 	rdlong	local02, arg01
285fc     02 1E 16 F2 | 	cmp	local01, #2 wc
28600     14 00 90 CD |  if_b	jmp	#LR__4140
28604     18 20 06 F1 | 	add	local02, #24
28608     10 23 02 FB | 	rdlong	local03, local02
2860c     18 20 86 F1 | 	sub	local02, #24
28610     11 1F 12 F2 | 	cmp	local01, local03 wc
28614     08 00 90 CD |  if_b	jmp	#LR__4141
28618                 | LR__4140
28618     01 24 06 F6 | 	mov	local04, #1
2861c     60 01 90 FD | 	jmp	#LR__4148
28620                 | LR__4141
28620     01 24 66 F6 | 	neg	local04, #1
28624                 | ' 		val = 0xFFFFFFFF;
28624                 | ' 
28624                 | ' 		switch (fs->fs_type) {
28624     10 27 C2 FA | 	rdbyte	local05, local02
28628     01 26 86 F1 | 	sub	local05, #1
2862c     03 26 26 F3 | 	fle	local05, #3
28630     30 26 62 FD | 	jmprel	local05
28634                 | LR__4142
28634     0C 00 90 FD | 	jmp	#LR__4143
28638     B8 00 90 FD | 	jmp	#LR__4144
2863c     F8 00 90 FD | 	jmp	#LR__4145
28640     38 01 90 FD | 	jmp	#LR__4146
28644                 | LR__4143
28644     0F 27 02 F6 | 	mov	local05, local01
28648     0F 13 02 F6 | 	mov	arg01, local01
2864c     01 12 46 F0 | 	shr	arg01, #1
28650     09 27 02 F1 | 	add	local05, arg01
28654     10 13 02 F6 | 	mov	arg01, local02
28658     13 29 02 F6 | 	mov	local06, local05
2865c     09 28 46 F0 | 	shr	local06, #9
28660     24 20 06 F1 | 	add	local02, #36
28664     10 15 02 FB | 	rdlong	arg02, local02
28668     24 20 86 F1 | 	sub	local02, #36
2866c     14 15 02 F1 | 	add	arg02, local06
28670     C0 FD BF FD | 	call	#_fatfs_cc_move_window
28674     00 FA 0D F2 | 	cmp	result1, #0 wz
28678     04 01 90 5D |  if_ne	jmp	#LR__4147
2867c     13 29 02 F6 | 	mov	local06, local05
28680     FF 29 06 F5 | 	and	local06, #511
28684     34 20 06 F1 | 	add	local02, #52
28688     10 29 02 F1 | 	add	local06, local02
2868c     14 2B C2 FA | 	rdbyte	local07, local06
28690     34 20 86 F1 | 	sub	local02, #52
28694     10 13 02 F6 | 	mov	arg01, local02
28698     01 26 06 F1 | 	add	local05, #1
2869c     13 29 02 F6 | 	mov	local06, local05
286a0     09 28 46 F0 | 	shr	local06, #9
286a4     24 20 06 F1 | 	add	local02, #36
286a8     10 15 02 FB | 	rdlong	arg02, local02
286ac     24 20 86 F1 | 	sub	local02, #36
286b0     14 15 02 F1 | 	add	arg02, local06
286b4     7C FD BF FD | 	call	#_fatfs_cc_move_window
286b8     00 FA 0D F2 | 	cmp	result1, #0 wz
286bc     C0 00 90 5D |  if_ne	jmp	#LR__4147
286c0     FF 27 06 F5 | 	and	local05, #511
286c4     34 20 06 F1 | 	add	local02, #52
286c8     10 27 02 F1 | 	add	local05, local02
286cc     13 29 C2 FA | 	rdbyte	local06, local05
286d0     08 28 66 F0 | 	shl	local06, #8
286d4     14 2B 42 F5 | 	or	local07, local06
286d8     01 1E CE F7 | 	test	local01, #1 wz
286dc     04 2A 46 50 |  if_ne	shr	local07, #4
286e0     15 23 02 56 |  if_ne	mov	local03, local07
286e4     0B 2A 46 A7 |  if_e	zerox	local07, #11
286e8     15 23 02 A6 |  if_e	mov	local03, local07
286ec     11 25 02 F6 | 	mov	local04, local03
286f0                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
286f0                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
286f0                 | ' 			break;
286f0     8C 00 90 FD | 	jmp	#LR__4147
286f4                 | LR__4144
286f4     10 13 02 F6 | 	mov	arg01, local02
286f8     0F 29 02 F6 | 	mov	local06, local01
286fc     08 28 46 F0 | 	shr	local06, #8
28700     24 20 06 F1 | 	add	local02, #36
28704     10 15 02 FB | 	rdlong	arg02, local02
28708     24 20 86 F1 | 	sub	local02, #36
2870c     14 15 02 F1 | 	add	arg02, local06
28710     20 FD BF FD | 	call	#_fatfs_cc_move_window
28714     00 FA 0D F2 | 	cmp	result1, #0 wz
28718     64 00 90 5D |  if_ne	jmp	#LR__4147
2871c     34 20 06 F1 | 	add	local02, #52
28720     01 1E 66 F0 | 	shl	local01, #1
28724     FF 1F 06 F5 | 	and	local01, #511
28728     0F 21 02 F1 | 	add	local02, local01
2872c                 | ' {
2872c                 | ' 
2872c                 | ' 	return *((WORD*)ptr);
2872c     10 FB E1 FA | 	rdword	result1, local02
28730     FD 24 32 F9 | 	getword	local04, result1, #0
28734                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
28734                 | ' 			break;
28734     48 00 90 FD | 	jmp	#LR__4147
28738                 | LR__4145
28738     10 13 02 F6 | 	mov	arg01, local02
2873c     0F 29 02 F6 | 	mov	local06, local01
28740     07 28 46 F0 | 	shr	local06, #7
28744     24 20 06 F1 | 	add	local02, #36
28748     10 15 02 FB | 	rdlong	arg02, local02
2874c     24 20 86 F1 | 	sub	local02, #36
28750     14 15 02 F1 | 	add	arg02, local06
28754     DC FC BF FD | 	call	#_fatfs_cc_move_window
28758     00 FA 0D F2 | 	cmp	result1, #0 wz
2875c     20 00 90 5D |  if_ne	jmp	#LR__4147
28760     34 20 06 F1 | 	add	local02, #52
28764     02 1E 66 F0 | 	shl	local01, #2
28768     FF 1F 06 F5 | 	and	local01, #511
2876c     0F 21 02 F1 | 	add	local02, local01
28770                 | ' {
28770                 | ' 
28770                 | ' 	return *((DWORD*)ptr);
28770     10 25 02 FB | 	rdlong	local04, local02
28774     7C 24 06 F4 | 	bitl	local04, #124
28778                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
28778                 | ' 			break;
28778     04 00 90 FD | 	jmp	#LR__4147
2877c                 | LR__4146
2877c     01 24 06 F6 | 	mov	local04, #1
28780                 | LR__4147
28780                 | LR__4148
28780                 | ' 			val = 1;
28780                 | ' 		}
28780                 | ' 	}
28780                 | ' 
28780                 | ' 	return val;
28780     12 FB 01 F6 | 	mov	result1, local04
28784     A7 F0 03 F6 | 	mov	ptra, fp
28788     B2 00 A0 FD | 	call	#popregs_
2878c                 | _fatfs_cc_get_fat_ret
2878c     2D 00 64 FD | 	ret
28790                 | 
28790                 | _fatfs_cc_put_fat
28790     08 4A 05 F6 | 	mov	COUNT_, #8
28794     A8 00 A0 FD | 	call	#pushregs_
28798     09 1F 02 F6 | 	mov	local01, arg01
2879c     0A 21 02 F6 | 	mov	local02, arg02
287a0     0B 23 02 F6 | 	mov	local03, arg03
287a4     02 24 06 F6 | 	mov	local04, #2
287a8     02 20 16 F2 | 	cmp	local02, #2 wc
287ac     E0 01 90 CD |  if_b	jmp	#LR__4157
287b0     18 1E 06 F1 | 	add	local01, #24
287b4     0F 27 02 FB | 	rdlong	local05, local01
287b8     18 1E 86 F1 | 	sub	local01, #24
287bc     13 21 12 F2 | 	cmp	local02, local05 wc
287c0     CC 01 90 3D |  if_ae	jmp	#LR__4157
287c4                 | ' 		switch (fs->fs_type) {
287c4     0F 29 C2 FA | 	rdbyte	local06, local01
287c8     01 28 86 F1 | 	sub	local06, #1
287cc     03 28 26 F3 | 	fle	local06, #3
287d0     30 28 62 FD | 	jmprel	local06
287d4                 | LR__4150
287d4     0C 00 90 FD | 	jmp	#LR__4151
287d8     F8 00 90 FD | 	jmp	#LR__4154
287dc     40 01 90 FD | 	jmp	#LR__4155
287e0     AC 01 90 FD | 	jmp	#LR__4156
287e4                 | LR__4151
287e4     10 2B 02 F6 | 	mov	local07, local02
287e8     10 27 02 F6 | 	mov	local05, local02
287ec     01 26 46 F0 | 	shr	local05, #1
287f0     13 2B 02 F1 | 	add	local07, local05
287f4     0F 13 02 F6 | 	mov	arg01, local01
287f8     15 29 02 F6 | 	mov	local06, local07
287fc     09 28 46 F0 | 	shr	local06, #9
28800     24 1E 06 F1 | 	add	local01, #36
28804     0F 15 02 FB | 	rdlong	arg02, local01
28808     24 1E 86 F1 | 	sub	local01, #36
2880c     14 15 02 F1 | 	add	arg02, local06
28810     20 FC BF FD | 	call	#_fatfs_cc_move_window
28814     FD 24 0A F6 | 	mov	local04, result1 wz
28818     74 01 90 5D |  if_ne	jmp	#LR__4156
2881c     34 1E 06 F1 | 	add	local01, #52
28820     0F 2D 02 F6 | 	mov	local08, local01
28824     15 27 02 F6 | 	mov	local05, local07
28828     FF 27 06 F5 | 	and	local05, #511
2882c     13 2D 02 F1 | 	add	local08, local05
28830     01 20 CE F7 | 	test	local02, #1 wz
28834     34 1E 86 F1 | 	sub	local01, #52
28838     01 2A 06 F1 | 	add	local07, #1
2883c     18 00 90 AD |  if_e	jmp	#LR__4152
28840     16 27 C2 FA | 	rdbyte	local05, local08
28844     13 27 42 F8 | 	getnib	local05, local05, #0
28848     11 29 E2 F8 | 	getbyte	local06, local03, #0
2884c     04 28 66 F0 | 	shl	local06, #4
28850     14 27 42 F5 | 	or	local05, local06
28854     04 00 90 FD | 	jmp	#LR__4153
28858                 | LR__4152
28858     11 27 02 F6 | 	mov	local05, local03
2885c                 | LR__4153
2885c     16 27 42 FC | 	wrbyte	local05, local08
28860     03 1E 06 F1 | 	add	local01, #3
28864     0F 03 48 FC | 	wrbyte	#1, local01
28868     03 1E 86 F1 | 	sub	local01, #3
2886c     0F 13 02 F6 | 	mov	arg01, local01
28870     15 2D 02 F6 | 	mov	local08, local07
28874     09 2C 46 F0 | 	shr	local08, #9
28878     24 1E 06 F1 | 	add	local01, #36
2887c     0F 15 02 FB | 	rdlong	arg02, local01
28880     24 1E 86 F1 | 	sub	local01, #36
28884     16 15 02 F1 | 	add	arg02, local08
28888     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2888c     FD 24 0A F6 | 	mov	local04, result1 wz
28890     FC 00 90 5D |  if_ne	jmp	#LR__4156
28894     34 1E 06 F1 | 	add	local01, #52
28898     0F 2D 02 F6 | 	mov	local08, local01
2889c     FF 2B 06 F5 | 	and	local07, #511
288a0     15 2D 02 F1 | 	add	local08, local07
288a4     01 20 CE F7 | 	test	local02, #1 wz
288a8     04 22 46 50 |  if_ne	shr	local03, #4
288ac     11 27 02 56 |  if_ne	mov	local05, local03
288b0     16 27 C2 AA |  if_e	rdbyte	local05, local08
288b4     F0 26 06 A5 |  if_e	and	local05, #240
288b8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
288bc     11 23 42 A8 |  if_e	getnib	local03, local03, #0
288c0     11 27 42 A5 |  if_e	or	local05, local03
288c4     16 27 42 FC | 	wrbyte	local05, local08
288c8     31 1E 86 F1 | 	sub	local01, #49
288cc     0F 03 48 FC | 	wrbyte	#1, local01
288d0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
288d0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
288d0                 | ' 			fs->wflag = 1;
288d0                 | ' 			break;
288d0     BC 00 90 FD | 	jmp	#LR__4156
288d4                 | LR__4154
288d4     0F 13 02 F6 | 	mov	arg01, local01
288d8     10 2D 02 F6 | 	mov	local08, local02
288dc     08 2C 46 F0 | 	shr	local08, #8
288e0     24 1E 06 F1 | 	add	local01, #36
288e4     0F 15 02 FB | 	rdlong	arg02, local01
288e8     24 1E 86 F1 | 	sub	local01, #36
288ec     16 15 02 F1 | 	add	arg02, local08
288f0     40 FB BF FD | 	call	#_fatfs_cc_move_window
288f4     FD 24 0A F6 | 	mov	local04, result1 wz
288f8     94 00 90 5D |  if_ne	jmp	#LR__4156
288fc     34 1E 06 F1 | 	add	local01, #52
28900     0F 13 02 F6 | 	mov	arg01, local01
28904     01 20 66 F0 | 	shl	local02, #1
28908     FF 21 06 F5 | 	and	local02, #511
2890c     10 13 02 F1 | 	add	arg01, local02
28910     09 23 52 FC | 	wrword	local03, arg01
28914     31 1E 86 F1 | 	sub	local01, #49
28918     0F 03 48 FC | 	wrbyte	#1, local01
2891c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2891c                 | ' 			fs->wflag = 1;
2891c                 | ' 			break;
2891c     70 00 90 FD | 	jmp	#LR__4156
28920                 | LR__4155
28920     0F 13 02 F6 | 	mov	arg01, local01
28924     10 2D 02 F6 | 	mov	local08, local02
28928     07 2C 46 F0 | 	shr	local08, #7
2892c     24 1E 06 F1 | 	add	local01, #36
28930     0F 15 02 FB | 	rdlong	arg02, local01
28934     24 1E 86 F1 | 	sub	local01, #36
28938     16 15 02 F1 | 	add	arg02, local08
2893c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28940     FD 24 0A F6 | 	mov	local04, result1 wz
28944     48 00 90 5D |  if_ne	jmp	#LR__4156
28948     7C 22 06 F4 | 	bitl	local03, #124
2894c     34 1E 06 F1 | 	add	local01, #52
28950     10 2D 02 F6 | 	mov	local08, local02
28954     02 2C 66 F0 | 	shl	local08, #2
28958     FF 2D 06 F5 | 	and	local08, #511
2895c     0F 13 02 F6 | 	mov	arg01, local01
28960     16 13 02 F1 | 	add	arg01, local08
28964                 | ' {
28964                 | ' 
28964                 | ' 	return *((DWORD*)ptr);
28964     09 2D 02 FB | 	rdlong	local08, arg01
28968     00 00 78 FF 
2896c     00 2C 06 F5 | 	and	local08, ##-268435456
28970     16 23 42 F5 | 	or	local03, local08
28974     0F 13 02 F6 | 	mov	arg01, local01
28978     02 20 66 F0 | 	shl	local02, #2
2897c     FF 21 06 F5 | 	and	local02, #511
28980     10 13 02 F1 | 	add	arg01, local02
28984     09 23 62 FC | 	wrlong	local03, arg01
28988     31 1E 86 F1 | 	sub	local01, #49
2898c     0F 03 48 FC | 	wrbyte	#1, local01
28990                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
28990                 | ' 			}
28990                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
28990                 | ' 			fs->wflag = 1;
28990                 | ' 			break;
28990                 | LR__4156
28990                 | LR__4157
28990                 | ' 		}
28990                 | ' 	}
28990                 | ' 	return res;
28990     12 FB 01 F6 | 	mov	result1, local04
28994     A7 F0 03 F6 | 	mov	ptra, fp
28998     B2 00 A0 FD | 	call	#popregs_
2899c                 | _fatfs_cc_put_fat_ret
2899c     2D 00 64 FD | 	ret
289a0                 | 
289a0                 | _fatfs_cc_remove_chain
289a0     05 4A 05 F6 | 	mov	COUNT_, #5
289a4     A8 00 A0 FD | 	call	#pushregs_
289a8     09 1F 02 F6 | 	mov	local01, arg01
289ac     0A 21 02 F6 | 	mov	local02, arg02
289b0     0B 23 02 F6 | 	mov	local03, arg03
289b4     0F 25 02 FB | 	rdlong	local04, local01
289b8     02 20 16 F2 | 	cmp	local02, #2 wc
289bc     14 00 90 CD |  if_b	jmp	#LR__4160
289c0     18 24 06 F1 | 	add	local04, #24
289c4     12 FB 01 FB | 	rdlong	result1, local04
289c8     18 24 86 F1 | 	sub	local04, #24
289cc     FD 20 12 F2 | 	cmp	local02, result1 wc
289d0     08 00 90 CD |  if_b	jmp	#LR__4161
289d4                 | LR__4160
289d4     02 FA 05 F6 | 	mov	result1, #2
289d8     CC 00 90 FD | 	jmp	#LR__4166
289dc                 | LR__4161
289dc     00 22 0E F2 | 	cmp	local03, #0 wz
289e0     18 00 90 AD |  if_e	jmp	#LR__4162
289e4     11 15 02 F6 | 	mov	arg02, local03
289e8     12 13 02 F6 | 	mov	arg01, local04
289ec     01 16 66 F6 | 	neg	arg03, #1
289f0     9C FD BF FD | 	call	#_fatfs_cc_put_fat
289f4     00 FA 0D F2 | 	cmp	result1, #0 wz
289f8     AC 00 90 5D |  if_ne	jmp	#LR__4166
289fc                 | LR__4162
289fc                 | ' 	}
289fc                 | ' 
289fc                 | ' 
289fc                 | ' 	do {
289fc                 | LR__4163
289fc     10 15 02 F6 | 	mov	arg02, local02
28a00     0F 13 02 F6 | 	mov	arg01, local01
28a04     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28a08     FD 26 0A F6 | 	mov	local05, result1 wz
28a0c     94 00 90 AD |  if_e	jmp	#LR__4165
28a10     01 26 0E F2 | 	cmp	local05, #1 wz
28a14     02 FA 05 A6 |  if_e	mov	result1, #2
28a18     8C 00 90 AD |  if_e	jmp	#LR__4166
28a1c     FF FF 7F FF 
28a20     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28a24     01 FA 05 A6 |  if_e	mov	result1, #1
28a28     7C 00 90 AD |  if_e	jmp	#LR__4166
28a2c     10 15 02 F6 | 	mov	arg02, local02
28a30     12 13 02 F6 | 	mov	arg01, local04
28a34     00 16 06 F6 | 	mov	arg03, #0
28a38     54 FD BF FD | 	call	#_fatfs_cc_put_fat
28a3c     FD 22 0A F6 | 	mov	local03, result1 wz
28a40     11 FB 01 56 |  if_ne	mov	result1, local03
28a44     60 00 90 5D |  if_ne	jmp	#LR__4166
28a48     18 24 06 F1 | 	add	local04, #24
28a4c     12 23 02 FB | 	rdlong	local03, local04
28a50     02 22 86 F1 | 	sub	local03, #2
28a54     04 24 86 F1 | 	sub	local04, #4
28a58     12 21 02 FB | 	rdlong	local02, local04
28a5c     14 24 86 F1 | 	sub	local04, #20
28a60     11 21 12 F2 | 	cmp	local02, local03 wc
28a64     24 00 90 3D |  if_ae	jmp	#LR__4164
28a68     14 24 06 F1 | 	add	local04, #20
28a6c     12 23 02 FB | 	rdlong	local03, local04
28a70     01 22 06 F1 | 	add	local03, #1
28a74     12 23 62 FC | 	wrlong	local03, local04
28a78     10 24 86 F1 | 	sub	local04, #16
28a7c     12 23 C2 FA | 	rdbyte	local03, local04
28a80     01 22 46 F5 | 	or	local03, #1
28a84     12 23 42 FC | 	wrbyte	local03, local04
28a88     04 24 86 F1 | 	sub	local04, #4
28a8c                 | LR__4164
28a8c     13 21 02 F6 | 	mov	local02, local05
28a90     18 24 06 F1 | 	add	local04, #24
28a94     12 27 02 FB | 	rdlong	local05, local04
28a98     18 24 86 F1 | 	sub	local04, #24
28a9c     13 21 12 F2 | 	cmp	local02, local05 wc
28aa0     58 FF 9F CD |  if_b	jmp	#LR__4163
28aa4                 | LR__4165
28aa4                 | ' #line 1500 "ff.c"
28aa4                 | ' 	return FR_OK;
28aa4     00 FA 05 F6 | 	mov	result1, #0
28aa8                 | LR__4166
28aa8     A7 F0 03 F6 | 	mov	ptra, fp
28aac     B2 00 A0 FD | 	call	#popregs_
28ab0                 | _fatfs_cc_remove_chain_ret
28ab0     2D 00 64 FD | 	ret
28ab4                 | 
28ab4                 | _fatfs_cc_create_chain
28ab4     09 4A 05 F6 | 	mov	COUNT_, #9
28ab8     A8 00 A0 FD | 	call	#pushregs_
28abc     09 1F 02 F6 | 	mov	local01, arg01
28ac0     0A 21 0A F6 | 	mov	local02, arg02 wz
28ac4     0F 23 02 FB | 	rdlong	local03, local01
28ac8     28 00 90 5D |  if_ne	jmp	#LR__4170
28acc     10 22 06 F1 | 	add	local03, #16
28ad0     11 25 0A FB | 	rdlong	local04, local03 wz
28ad4     10 22 86 F1 | 	sub	local03, #16
28ad8     18 22 06 51 |  if_ne	add	local03, #24
28adc     11 27 02 5B |  if_ne	rdlong	local05, local03
28ae0     18 22 86 51 |  if_ne	sub	local03, #24
28ae4     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28ae8     50 00 90 4D |  if_c_and_nz	jmp	#LR__4171
28aec     01 24 06 F6 | 	mov	local04, #1
28af0     48 00 90 FD | 	jmp	#LR__4171
28af4                 | LR__4170
28af4     10 15 02 F6 | 	mov	arg02, local02
28af8     0F 13 02 F6 | 	mov	arg01, local01
28afc     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28b00     FD 24 02 F6 | 	mov	local04, result1
28b04     02 24 16 F2 | 	cmp	local04, #2 wc
28b08     01 FA 05 C6 |  if_b	mov	result1, #1
28b0c     BC 01 90 CD |  if_b	jmp	#LR__4181
28b10     FF FF 7F FF 
28b14     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28b18     12 FB 01 A6 |  if_e	mov	result1, local04
28b1c     AC 01 90 AD |  if_e	jmp	#LR__4181
28b20     18 22 06 F1 | 	add	local03, #24
28b24     11 27 02 FB | 	rdlong	local05, local03
28b28     18 22 86 F1 | 	sub	local03, #24
28b2c     13 25 12 F2 | 	cmp	local04, local05 wc
28b30     12 FB 01 C6 |  if_b	mov	result1, local04
28b34     94 01 90 CD |  if_b	jmp	#LR__4181
28b38     10 25 02 F6 | 	mov	local04, local02
28b3c                 | LR__4171
28b3c     14 22 06 F1 | 	add	local03, #20
28b40     11 27 0A FB | 	rdlong	local05, local03 wz
28b44     14 22 86 F1 | 	sub	local03, #20
28b48     00 FA 05 A6 |  if_e	mov	result1, #0
28b4c     7C 01 90 AD |  if_e	jmp	#LR__4181
28b50     00 28 06 F6 | 	mov	local06, #0
28b54     10 25 0A F2 | 	cmp	local04, local02 wz
28b58     74 00 90 5D |  if_ne	jmp	#LR__4174
28b5c     12 29 02 F6 | 	mov	local06, local04
28b60     01 28 06 F1 | 	add	local06, #1
28b64     18 22 06 F1 | 	add	local03, #24
28b68     11 27 02 FB | 	rdlong	local05, local03
28b6c     18 22 86 F1 | 	sub	local03, #24
28b70     13 29 12 F2 | 	cmp	local06, local05 wc
28b74     02 28 06 36 |  if_ae	mov	local06, #2
28b78     14 15 02 F6 | 	mov	arg02, local06
28b7c     0F 13 02 F6 | 	mov	arg01, local01
28b80     68 FA BF FD | 	call	#_fatfs_cc_get_fat
28b84     FD 26 02 F6 | 	mov	local05, result1
28b88     01 26 0E F2 | 	cmp	local05, #1 wz
28b8c     FF FF 7F 5F 
28b90     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
28b94     13 FB 01 A6 |  if_e	mov	result1, local05
28b98     30 01 90 AD |  if_e	jmp	#LR__4181
28b9c     00 26 0E F2 | 	cmp	local05, #0 wz
28ba0     2C 00 90 AD |  if_e	jmp	#LR__4173
28ba4     10 22 06 F1 | 	add	local03, #16
28ba8     11 2B 02 FB | 	rdlong	local07, local03
28bac     10 22 86 F1 | 	sub	local03, #16
28bb0     02 2A 16 F2 | 	cmp	local07, #2 wc
28bb4     14 00 90 CD |  if_b	jmp	#LR__4172
28bb8     18 22 06 F1 | 	add	local03, #24
28bbc     11 27 02 FB | 	rdlong	local05, local03
28bc0     18 22 86 F1 | 	sub	local03, #24
28bc4     13 2B 12 F2 | 	cmp	local07, local05 wc
28bc8     15 25 02 C6 |  if_b	mov	local04, local07
28bcc                 | LR__4172
28bcc     00 28 06 F6 | 	mov	local06, #0
28bd0                 | LR__4173
28bd0                 | LR__4174
28bd0     00 28 0E F2 | 	cmp	local06, #0 wz
28bd4     60 00 90 5D |  if_ne	jmp	#LR__4177
28bd8     12 29 02 F6 | 	mov	local06, local04
28bdc                 | ' 			ncl = scl;
28bdc                 | ' 			for (;;) {
28bdc                 | LR__4175
28bdc     01 28 06 F1 | 	add	local06, #1
28be0     18 22 06 F1 | 	add	local03, #24
28be4     11 27 02 FB | 	rdlong	local05, local03
28be8     18 22 86 F1 | 	sub	local03, #24
28bec     13 29 12 F2 | 	cmp	local06, local05 wc
28bf0     02 28 06 36 |  if_ae	mov	local06, #2
28bf4     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28bf8     00 FA 05 16 |  if_a	mov	result1, #0
28bfc     CC 00 90 1D |  if_a	jmp	#LR__4181
28c00     14 15 02 F6 | 	mov	arg02, local06
28c04     0F 13 02 F6 | 	mov	arg01, local01
28c08     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28c0c     FD 2A 0A F6 | 	mov	local07, result1 wz
28c10     24 00 90 AD |  if_e	jmp	#LR__4176
28c14     01 2A 0E F2 | 	cmp	local07, #1 wz
28c18     FF FF 7F 5F 
28c1c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28c20     15 FB 01 A6 |  if_e	mov	result1, local07
28c24     A4 00 90 AD |  if_e	jmp	#LR__4181
28c28     12 29 0A F2 | 	cmp	local06, local04 wz
28c2c     00 FA 05 A6 |  if_e	mov	result1, #0
28c30     98 00 90 AD |  if_e	jmp	#LR__4181
28c34     A4 FF 9F FD | 	jmp	#LR__4175
28c38                 | LR__4176
28c38                 | LR__4177
28c38     11 13 02 F6 | 	mov	arg01, local03
28c3c     14 15 02 F6 | 	mov	arg02, local06
28c40     01 16 66 F6 | 	neg	arg03, #1
28c44     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28c48     FD 2C 0A F6 | 	mov	local08, result1 wz
28c4c     1C 00 90 5D |  if_ne	jmp	#LR__4178
28c50     00 20 0E F2 | 	cmp	local02, #0 wz
28c54     14 00 90 AD |  if_e	jmp	#LR__4178
28c58     11 13 02 F6 | 	mov	arg01, local03
28c5c     10 15 02 F6 | 	mov	arg02, local02
28c60     14 17 02 F6 | 	mov	arg03, local06
28c64     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28c68     FD 2C 02 F6 | 	mov	local08, result1
28c6c                 | LR__4178
28c6c     00 2C 0E F2 | 	cmp	local08, #0 wz
28c70     4C 00 90 5D |  if_ne	jmp	#LR__4179
28c74     10 22 06 F1 | 	add	local03, #16
28c78     11 29 62 FC | 	wrlong	local06, local03
28c7c     08 22 06 F1 | 	add	local03, #8
28c80     11 27 02 FB | 	rdlong	local05, local03
28c84     02 26 86 F1 | 	sub	local05, #2
28c88     04 22 86 F1 | 	sub	local03, #4
28c8c     11 2F 02 FB | 	rdlong	local09, local03
28c90     14 22 86 F1 | 	sub	local03, #20
28c94     13 2F 1A F2 | 	cmp	local09, local05 wcz
28c98     14 22 06 E1 |  if_be	add	local03, #20
28c9c     11 2F 02 EB |  if_be	rdlong	local09, local03
28ca0     01 2E 86 E1 |  if_be	sub	local09, #1
28ca4     11 2F 62 EC |  if_be	wrlong	local09, local03
28ca8     14 22 86 E1 |  if_be	sub	local03, #20
28cac     04 22 06 F1 | 	add	local03, #4
28cb0     11 27 C2 FA | 	rdbyte	local05, local03
28cb4     01 26 46 F5 | 	or	local05, #1
28cb8     11 27 42 FC | 	wrbyte	local05, local03
28cbc     08 00 90 FD | 	jmp	#LR__4180
28cc0                 | LR__4179
28cc0     01 2C 0E F2 | 	cmp	local08, #1 wz
28cc4     01 28 C6 F6 | 	negz	local06, #1
28cc8                 | LR__4180
28cc8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28cc8                 | ' 	}
28cc8                 | ' 
28cc8                 | ' 	return ncl;
28cc8     14 FB 01 F6 | 	mov	result1, local06
28ccc                 | LR__4181
28ccc     A7 F0 03 F6 | 	mov	ptra, fp
28cd0     B2 00 A0 FD | 	call	#popregs_
28cd4                 | _fatfs_cc_create_chain_ret
28cd4     2D 00 64 FD | 	ret
28cd8                 | 
28cd8                 | _fatfs_cc_dir_clear
28cd8     06 4A 05 F6 | 	mov	COUNT_, #6
28cdc     A8 00 A0 FD | 	call	#pushregs_
28ce0     09 1F 02 F6 | 	mov	local01, arg01
28ce4     0A 21 02 F6 | 	mov	local02, arg02
28ce8     0F 13 02 F6 | 	mov	arg01, local01
28cec     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
28cf4     01 FA 05 56 |  if_ne	mov	result1, #1
28cf8     90 00 90 5D |  if_ne	jmp	#LR__4192
28cfc     0F 13 02 F6 | 	mov	arg01, local01
28d00     10 15 02 F6 | 	mov	arg02, local02
28d04     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28d08     FD 22 02 F6 | 	mov	local03, result1
28d0c     30 1E 06 F1 | 	add	local01, #48
28d10     0F 23 62 FC | 	wrlong	local03, local01
28d14     04 1E 06 F1 | 	add	local01, #4
28d18     0F 13 02 F6 | 	mov	arg01, local01
28d1c     00 14 06 F6 | 	mov	arg02, #0
28d20     09 16 C6 F9 | 	decod	arg03, #9
28d24     98 00 A0 FD | 	call	#\builtin_bytefill_
28d28     0F 25 02 F6 | 	mov	local04, local01
28d2c                 | ' #line 1667 "ff.c"
28d2c                 | ' 	{
28d2c                 | ' 		ibuf = fs->win; szb = 1;
28d2c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28d2c     00 26 06 F6 | 	mov	local05, #0
28d30     34 1E 86 F1 | 	sub	local01, #52
28d34                 | LR__4190
28d34     0A 1E 06 F1 | 	add	local01, #10
28d38     0F 29 E2 FA | 	rdword	local06, local01
28d3c     0A 1E 86 F1 | 	sub	local01, #10
28d40     14 27 12 F2 | 	cmp	local05, local06 wc
28d44     2C 00 90 3D |  if_ae	jmp	#LR__4191
28d48     01 1E 06 F1 | 	add	local01, #1
28d4c     0F 13 C2 FA | 	rdbyte	arg01, local01
28d50     01 1E 86 F1 | 	sub	local01, #1
28d54     12 15 02 F6 | 	mov	arg02, local04
28d58     11 17 02 F6 | 	mov	arg03, local03
28d5c     13 17 02 F1 | 	add	arg03, local05
28d60     01 18 06 F6 | 	mov	arg04, #1
28d64     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28d68     00 FA 0D F2 | 	cmp	result1, #0 wz
28d6c     01 26 06 A1 |  if_e	add	local05, #1
28d70     C0 FF 9F AD |  if_e	jmp	#LR__4190
28d74                 | LR__4191
28d74                 | ' 	}
28d74                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28d74     0A 1E 06 F1 | 	add	local01, #10
28d78     0F 25 E2 FA | 	rdword	local04, local01
28d7c     12 27 0A F2 | 	cmp	local05, local04 wz
28d80     00 28 06 A6 |  if_e	mov	local06, #0
28d84     01 28 06 56 |  if_ne	mov	local06, #1
28d88     14 FB 01 F6 | 	mov	result1, local06
28d8c                 | LR__4192
28d8c     A7 F0 03 F6 | 	mov	ptra, fp
28d90     B2 00 A0 FD | 	call	#popregs_
28d94                 | _fatfs_cc_dir_clear_ret
28d94     2D 00 64 FD | 	ret
28d98                 | 
28d98                 | _fatfs_cc_dir_sdi
28d98     06 4A 05 F6 | 	mov	COUNT_, #6
28d9c     A8 00 A0 FD | 	call	#pushregs_
28da0     09 1F 02 F6 | 	mov	local01, arg01
28da4     0A 21 02 F6 | 	mov	local02, arg02
28da8     0F 23 02 FB | 	rdlong	local03, local01
28dac     00 10 00 FF 
28db0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28db4     1F 20 CE C7 |  if_b	test	local02, #31 wz
28db8                 | ' 		return FR_INT_ERR;
28db8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28dbc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4206
28dc0     10 1E 06 F1 | 	add	local01, #16
28dc4     0F 21 62 FC | 	wrlong	local02, local01
28dc8     08 1E 86 F1 | 	sub	local01, #8
28dcc     0F 25 0A FB | 	rdlong	local04, local01 wz
28dd0     08 1E 86 F1 | 	sub	local01, #8
28dd4     11 27 C2 AA |  if_e	rdbyte	local05, local03
28dd8     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28ddc     28 22 06 21 |  if_nc_and_z	add	local03, #40
28de0     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28de4     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28de8     00 24 0E F2 | 	cmp	local04, #0 wz
28dec     3C 00 90 5D |  if_ne	jmp	#LR__4200
28df0     10 27 02 F6 | 	mov	local05, local02
28df4     05 26 46 F0 | 	shr	local05, #5
28df8     08 22 06 F1 | 	add	local03, #8
28dfc     11 15 E2 FA | 	rdword	arg02, local03
28e00     08 22 86 F1 | 	sub	local03, #8
28e04     0A 27 12 F2 | 	cmp	local05, arg02 wc
28e08     02 FA 05 36 |  if_ae	mov	result1, #2
28e0c     E4 00 90 3D |  if_ae	jmp	#LR__4206
28e10     28 22 06 F1 | 	add	local03, #40
28e14     11 27 02 FB | 	rdlong	local05, local03
28e18     28 22 86 F1 | 	sub	local03, #40
28e1c     18 1E 06 F1 | 	add	local01, #24
28e20     0F 27 62 FC | 	wrlong	local05, local01
28e24     18 1E 86 F1 | 	sub	local01, #24
28e28     7C 00 90 FD | 	jmp	#LR__4205
28e2c                 | LR__4200
28e2c     0A 22 06 F1 | 	add	local03, #10
28e30     11 29 E2 FA | 	rdword	local06, local03
28e34     0A 22 86 F1 | 	sub	local03, #10
28e38     09 28 66 F0 | 	shl	local06, #9
28e3c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28e3c                 | ' 		while (ofs >= csz) {
28e3c                 | LR__4201
28e3c     14 21 12 F2 | 	cmp	local02, local06 wc
28e40     4C 00 90 CD |  if_b	jmp	#LR__4204
28e44     0F 13 02 F6 | 	mov	arg01, local01
28e48     12 15 02 F6 | 	mov	arg02, local04
28e4c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28e50     FD 24 02 F6 | 	mov	local04, result1
28e54     FF FF 7F FF 
28e58     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28e5c     01 FA 05 A6 |  if_e	mov	result1, #1
28e60     90 00 90 AD |  if_e	jmp	#LR__4206
28e64     02 24 16 F2 | 	cmp	local04, #2 wc
28e68     14 00 90 CD |  if_b	jmp	#LR__4202
28e6c     18 22 06 F1 | 	add	local03, #24
28e70     11 27 02 FB | 	rdlong	local05, local03
28e74     18 22 86 F1 | 	sub	local03, #24
28e78     13 25 12 F2 | 	cmp	local04, local05 wc
28e7c     08 00 90 CD |  if_b	jmp	#LR__4203
28e80                 | LR__4202
28e80     02 FA 05 F6 | 	mov	result1, #2
28e84     6C 00 90 FD | 	jmp	#LR__4206
28e88                 | LR__4203
28e88     14 21 82 F1 | 	sub	local02, local06
28e8c     AC FF 9F FD | 	jmp	#LR__4201
28e90                 | LR__4204
28e90     11 13 02 F6 | 	mov	arg01, local03
28e94     12 15 02 F6 | 	mov	arg02, local04
28e98     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28e9c     18 1E 06 F1 | 	add	local01, #24
28ea0     0F FB 61 FC | 	wrlong	result1, local01
28ea4     18 1E 86 F1 | 	sub	local01, #24
28ea8                 | LR__4205
28ea8     14 1E 06 F1 | 	add	local01, #20
28eac     0F 25 62 FC | 	wrlong	local04, local01
28eb0     04 1E 06 F1 | 	add	local01, #4
28eb4     0F 27 0A FB | 	rdlong	local05, local01 wz
28eb8     18 1E 86 F1 | 	sub	local01, #24
28ebc     02 FA 05 A6 |  if_e	mov	result1, #2
28ec0     30 00 90 AD |  if_e	jmp	#LR__4206
28ec4     10 29 02 F6 | 	mov	local06, local02
28ec8     09 28 46 F0 | 	shr	local06, #9
28ecc     18 1E 06 F1 | 	add	local01, #24
28ed0     0F 27 02 FB | 	rdlong	local05, local01
28ed4     14 27 02 F1 | 	add	local05, local06
28ed8     0F 27 62 FC | 	wrlong	local05, local01
28edc     34 22 06 F1 | 	add	local03, #52
28ee0     FF 21 06 F5 | 	and	local02, #511
28ee4     10 23 02 F1 | 	add	local03, local02
28ee8     04 1E 06 F1 | 	add	local01, #4
28eec     0F 23 62 FC | 	wrlong	local03, local01
28ef0                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28ef0                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28ef0                 | ' 
28ef0                 | ' 	return FR_OK;
28ef0     00 FA 05 F6 | 	mov	result1, #0
28ef4                 | LR__4206
28ef4     A7 F0 03 F6 | 	mov	ptra, fp
28ef8     B2 00 A0 FD | 	call	#popregs_
28efc                 | _fatfs_cc_dir_sdi_ret
28efc     2D 00 64 FD | 	ret
28f00                 | 
28f00                 | _fatfs_cc_dir_next
28f00     05 4A 05 F6 | 	mov	COUNT_, #5
28f04     A8 00 A0 FD | 	call	#pushregs_
28f08     09 1F 02 F6 | 	mov	local01, arg01
28f0c     0A 21 02 F6 | 	mov	local02, arg02
28f10     0F 23 02 FB | 	rdlong	local03, local01
28f14     10 1E 06 F1 | 	add	local01, #16
28f18     0F 25 02 FB | 	rdlong	local04, local01
28f1c     10 1E 86 F1 | 	sub	local01, #16
28f20     20 24 06 F1 | 	add	local04, #32
28f24     00 10 00 FF 
28f28     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28f2c     18 1E 06 31 |  if_ae	add	local01, #24
28f30     0F 01 68 3C |  if_ae	wrlong	#0, local01
28f34     18 1E 86 31 |  if_ae	sub	local01, #24
28f38     18 1E 06 F1 | 	add	local01, #24
28f3c     0F 15 0A FB | 	rdlong	arg02, local01 wz
28f40     18 1E 86 F1 | 	sub	local01, #24
28f44     04 FA 05 A6 |  if_e	mov	result1, #4
28f48     64 01 90 AD |  if_e	jmp	#LR__4215
28f4c     FF 25 CE F7 | 	test	local04, #511 wz
28f50     3C 01 90 5D |  if_ne	jmp	#LR__4214
28f54     18 1E 06 F1 | 	add	local01, #24
28f58     0F 15 02 FB | 	rdlong	arg02, local01
28f5c     01 14 06 F1 | 	add	arg02, #1
28f60     0F 15 62 FC | 	wrlong	arg02, local01
28f64     04 1E 86 F1 | 	sub	local01, #4
28f68     0F 15 0A FB | 	rdlong	arg02, local01 wz
28f6c     14 1E 86 F1 | 	sub	local01, #20
28f70     2C 00 90 5D |  if_ne	jmp	#LR__4210
28f74     12 15 02 F6 | 	mov	arg02, local04
28f78     05 14 46 F0 | 	shr	arg02, #5
28f7c     08 22 06 F1 | 	add	local03, #8
28f80     11 21 E2 FA | 	rdword	local02, local03
28f84     08 22 86 F1 | 	sub	local03, #8
28f88     10 15 12 F2 | 	cmp	arg02, local02 wc
28f8c     18 1E 06 31 |  if_ae	add	local01, #24
28f90     0F 01 68 3C |  if_ae	wrlong	#0, local01
28f94                 | ' 				dp->sect = 0; return FR_NO_FILE;
28f94     04 FA 05 36 |  if_ae	mov	result1, #4
28f98     14 01 90 3D |  if_ae	jmp	#LR__4215
28f9c     F0 00 90 FD | 	jmp	#LR__4213
28fa0                 | LR__4210
28fa0     12 13 02 F6 | 	mov	arg01, local04
28fa4     09 12 46 F0 | 	shr	arg01, #9
28fa8     0A 22 06 F1 | 	add	local03, #10
28fac     11 15 E2 FA | 	rdword	arg02, local03
28fb0     0A 22 86 F1 | 	sub	local03, #10
28fb4     01 14 86 F1 | 	sub	arg02, #1
28fb8     0A 13 CA F7 | 	test	arg01, arg02 wz
28fbc     D0 00 90 5D |  if_ne	jmp	#LR__4212
28fc0     0F 13 02 F6 | 	mov	arg01, local01
28fc4     14 1E 06 F1 | 	add	local01, #20
28fc8     0F 15 02 FB | 	rdlong	arg02, local01
28fcc     14 1E 86 F1 | 	sub	local01, #20
28fd0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28fd4     FD 26 02 F6 | 	mov	local05, result1
28fd8     02 26 16 F2 | 	cmp	local05, #2 wc
28fdc     02 FA 05 C6 |  if_b	mov	result1, #2
28fe0     CC 00 90 CD |  if_b	jmp	#LR__4215
28fe4     FF FF 7F FF 
28fe8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28fec     01 FA 05 A6 |  if_e	mov	result1, #1
28ff0     BC 00 90 AD |  if_e	jmp	#LR__4215
28ff4     18 22 06 F1 | 	add	local03, #24
28ff8     11 15 02 FB | 	rdlong	arg02, local03
28ffc     18 22 86 F1 | 	sub	local03, #24
29000     0A 27 12 F2 | 	cmp	local05, arg02 wc
29004     68 00 90 CD |  if_b	jmp	#LR__4211
29008     00 20 0E F2 | 	cmp	local02, #0 wz
2900c     18 1E 06 A1 |  if_e	add	local01, #24
29010     0F 01 68 AC |  if_e	wrlong	#0, local01
29014                 | ' 						dp->sect = 0; return FR_NO_FILE;
29014     04 FA 05 A6 |  if_e	mov	result1, #4
29018     94 00 90 AD |  if_e	jmp	#LR__4215
2901c     0F 13 02 F6 | 	mov	arg01, local01
29020     14 1E 06 F1 | 	add	local01, #20
29024     0F 15 02 FB | 	rdlong	arg02, local01
29028     14 1E 86 F1 | 	sub	local01, #20
2902c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
29030     FD 26 0A F6 | 	mov	local05, result1 wz
29034     07 FA 05 A6 |  if_e	mov	result1, #7
29038     74 00 90 AD |  if_e	jmp	#LR__4215
2903c     01 26 0E F2 | 	cmp	local05, #1 wz
29040     02 FA 05 A6 |  if_e	mov	result1, #2
29044     68 00 90 AD |  if_e	jmp	#LR__4215
29048     FF FF 7F FF 
2904c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29050     01 FA 05 A6 |  if_e	mov	result1, #1
29054     58 00 90 AD |  if_e	jmp	#LR__4215
29058     13 15 02 F6 | 	mov	arg02, local05
2905c     11 13 02 F6 | 	mov	arg01, local03
29060     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
29064     00 FA 0D F2 | 	cmp	result1, #0 wz
29068     01 FA 05 56 |  if_ne	mov	result1, #1
2906c     40 00 90 5D |  if_ne	jmp	#LR__4215
29070                 | LR__4211
29070     14 1E 06 F1 | 	add	local01, #20
29074     0F 27 62 FC | 	wrlong	local05, local01
29078     11 13 02 F6 | 	mov	arg01, local03
2907c     13 15 02 F6 | 	mov	arg02, local05
29080     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
29084     04 1E 06 F1 | 	add	local01, #4
29088     0F FB 61 FC | 	wrlong	result1, local01
2908c     18 1E 86 F1 | 	sub	local01, #24
29090                 | LR__4212
29090                 | LR__4213
29090                 | LR__4214
29090     10 1E 06 F1 | 	add	local01, #16
29094     0F 25 62 FC | 	wrlong	local04, local01
29098     34 22 06 F1 | 	add	local03, #52
2909c     FF 25 06 F5 | 	and	local04, #511
290a0     12 23 02 F1 | 	add	local03, local04
290a4     0C 1E 06 F1 | 	add	local01, #12
290a8     0F 23 62 FC | 	wrlong	local03, local01
290ac                 | ' #line 1771 "ff.c"
290ac                 | ' 				}
290ac                 | ' 				dp->clust = clst;
290ac                 | ' 				dp->sect = clst2sect(fs, clst);
290ac                 | ' 			}
290ac                 | ' 		}
290ac                 | ' 	}
290ac                 | ' 	dp->dptr = ofs;
290ac                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
290ac                 | ' 
290ac                 | ' 	return FR_OK;
290ac     00 FA 05 F6 | 	mov	result1, #0
290b0                 | LR__4215
290b0     A7 F0 03 F6 | 	mov	ptra, fp
290b4     B2 00 A0 FD | 	call	#popregs_
290b8                 | _fatfs_cc_dir_next_ret
290b8     2D 00 64 FD | 	ret
290bc                 | 
290bc                 | _fatfs_cc_dir_alloc
290bc     08 4A 05 F6 | 	mov	COUNT_, #8
290c0     A8 00 A0 FD | 	call	#pushregs_
290c4     09 1F 02 F6 | 	mov	local01, arg01
290c8     0A 21 02 F6 | 	mov	local02, arg02
290cc     0F 23 02 FB | 	rdlong	local03, local01
290d0     0F 13 02 F6 | 	mov	arg01, local01
290d4     00 14 06 F6 | 	mov	arg02, #0
290d8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
290dc     FD 24 0A F6 | 	mov	local04, result1 wz
290e0     70 00 90 5D |  if_ne	jmp	#LR__4224
290e4     00 26 06 F6 | 	mov	local05, #0
290e8                 | ' 		n = 0;
290e8                 | ' 		do {
290e8                 | LR__4220
290e8     18 1E 06 F1 | 	add	local01, #24
290ec     0F 15 02 FB | 	rdlong	arg02, local01
290f0     18 1E 86 F1 | 	sub	local01, #24
290f4     11 13 02 F6 | 	mov	arg01, local03
290f8     38 F3 BF FD | 	call	#_fatfs_cc_move_window
290fc     FD 24 0A F6 | 	mov	local04, result1 wz
29100     50 00 90 5D |  if_ne	jmp	#LR__4223
29104     1C 1E 06 F1 | 	add	local01, #28
29108     0F 29 02 FB | 	rdlong	local06, local01
2910c     1C 1E 86 F1 | 	sub	local01, #28
29110     14 29 C2 FA | 	rdbyte	local06, local06
29114     E5 28 0E F2 | 	cmp	local06, #229 wz
29118     1C 1E 06 51 |  if_ne	add	local01, #28
2911c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
29120     1C 1E 86 51 |  if_ne	sub	local01, #28
29124     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
29128     10 00 90 5D |  if_ne	jmp	#LR__4221
2912c     01 26 06 F1 | 	add	local05, #1
29130     10 27 0A F2 | 	cmp	local05, local02 wz
29134     1C 00 90 AD |  if_e	jmp	#LR__4223
29138     04 00 90 FD | 	jmp	#LR__4222
2913c                 | LR__4221
2913c     00 26 06 F6 | 	mov	local05, #0
29140                 | LR__4222
29140     0F 13 02 F6 | 	mov	arg01, local01
29144     01 14 06 F6 | 	mov	arg02, #1
29148     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2914c     FD 24 0A F6 | 	mov	local04, result1 wz
29150     94 FF 9F AD |  if_e	jmp	#LR__4220
29154                 | LR__4223
29154                 | LR__4224
29154     04 24 0E F2 | 	cmp	local04, #4 wz
29158     07 24 06 A6 |  if_e	mov	local04, #7
2915c                 | ' 	return res;
2915c     12 FB 01 F6 | 	mov	result1, local04
29160     A7 F0 03 F6 | 	mov	ptra, fp
29164     B2 00 A0 FD | 	call	#popregs_
29168                 | _fatfs_cc_dir_alloc_ret
29168     2D 00 64 FD | 	ret
2916c                 | 
2916c                 | _fatfs_cc_ld_clust
2916c     09 01 02 F6 | 	mov	_var01, arg01
29170     0A 13 02 F6 | 	mov	arg01, arg02
29174     1A 12 06 F1 | 	add	arg01, #26
29178                 | ' {
29178                 | ' 
29178                 | ' 	return *((WORD*)ptr);
29178     09 FB E1 FA | 	rdword	result1, arg01
2917c     FD 12 32 F9 | 	getword	arg01, result1, #0
29180     00 01 C2 FA | 	rdbyte	_var01, _var01
29184     03 00 0E F2 | 	cmp	_var01, #3 wz
29188     14 14 06 A1 |  if_e	add	arg02, #20
2918c                 | ' {
2918c                 | ' 
2918c                 | ' 	return *((WORD*)ptr);
2918c     0A FB E1 AA |  if_e	rdword	result1, arg02
29190     10 FA 65 A0 |  if_e	shl	result1, #16
29194     FD 12 42 A5 |  if_e	or	arg01, result1
29198                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
29198                 | ' 	}
29198                 | ' 
29198                 | ' 	return cl;
29198     09 FB 01 F6 | 	mov	result1, arg01
2919c                 | _fatfs_cc_ld_clust_ret
2919c     2D 00 64 FD | 	ret
291a0                 | 
291a0                 | _fatfs_cc_st_clust
291a0     09 01 02 F6 | 	mov	_var01, arg01
291a4     0A 13 02 F6 | 	mov	arg01, arg02
291a8     1A 12 06 F1 | 	add	arg01, #26
291ac     09 17 52 FC | 	wrword	arg03, arg01
291b0     00 01 C2 FA | 	rdbyte	_var01, _var01
291b4     03 00 0E F2 | 	cmp	_var01, #3 wz
291b8     14 14 06 A1 |  if_e	add	arg02, #20
291bc     10 16 46 A0 |  if_e	shr	arg03, #16
291c0     0A 17 52 AC |  if_e	wrword	arg03, arg02
291c4                 | _fatfs_cc_st_clust_ret
291c4     2D 00 64 FD | 	ret
291c8                 | 
291c8                 | _fatfs_cc_cmp_lfn
291c8     07 4A 05 F6 | 	mov	COUNT_, #7
291cc     A8 00 A0 FD | 	call	#pushregs_
291d0     09 1F 02 F6 | 	mov	local01, arg01
291d4     0A 13 02 F6 | 	mov	arg01, arg02
291d8     1A 12 06 F1 | 	add	arg01, #26
291dc                 | ' {
291dc                 | ' 
291dc                 | ' 	return *((WORD*)ptr);
291dc     09 FB E9 FA | 	rdword	result1, arg01 wz
291e0     00 FA 05 56 |  if_ne	mov	result1, #0
291e4     E0 00 90 5D |  if_ne	jmp	#LR__4236
291e8     0A 21 C2 FA | 	rdbyte	local02, arg02
291ec     3F 20 06 F5 | 	and	local02, #63
291f0     01 20 86 F1 | 	sub	local02, #1
291f4     0D 20 06 FD | 	qmul	local02, #13
291f8                 | ' 
291f8                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
291f8                 | ' 
291f8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
291f8     01 22 06 F6 | 	mov	local03, #1
291fc     00 24 06 F6 | 	mov	local04, #0
29200     18 26 62 FD | 	getqx	local05
29204                 | LR__4230
29204     0D 24 16 F2 | 	cmp	local04, #13 wc
29208     9C 00 90 3D |  if_ae	jmp	#LR__4235
2920c     0A 13 02 F6 | 	mov	arg01, arg02
29210     12 21 02 F6 | 	mov	local02, local04
29214     01 00 00 FF 
29218     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2921c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29220     10 21 C2 FA | 	rdbyte	local02, local02
29224     01 20 06 FA | 	mul	local02, #1
29228     10 13 02 F1 | 	add	arg01, local02
2922c     01 00 00 FF 
29230     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29234                 | ' {
29234                 | ' 
29234                 | ' 	return *((WORD*)ptr);
29234     09 FB E1 FA | 	rdword	result1, arg01
29238     FD 28 02 F6 | 	mov	local06, result1
2923c     11 21 02 F6 | 	mov	local02, local03
29240     0F 20 4E F7 | 	zerox	local02, #15 wz
29244     44 00 90 AD |  if_e	jmp	#LR__4233
29248     00 27 16 F2 | 	cmp	local05, #256 wc
2924c     2C 00 90 3D |  if_ae	jmp	#LR__4231
29250     14 13 32 F9 | 	getword	arg01, local06, #0
29254     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29258     FD 20 02 F6 | 	mov	local02, result1
2925c     13 23 02 F6 | 	mov	local03, local05
29260     01 22 66 F0 | 	shl	local03, #1
29264     0F 23 02 F1 | 	add	local03, local01
29268     11 13 E2 FA | 	rdword	arg01, local03
2926c     01 26 06 F1 | 	add	local05, #1
29270     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29274     FD 20 0A F2 | 	cmp	local02, result1 wz
29278     08 00 90 AD |  if_e	jmp	#LR__4232
2927c                 | LR__4231
2927c                 | ' 				return 0;
2927c     00 FA 05 F6 | 	mov	result1, #0
29280     44 00 90 FD | 	jmp	#LR__4236
29284                 | LR__4232
29284     14 23 02 F6 | 	mov	local03, local06
29288     14 00 90 FD | 	jmp	#LR__4234
2928c                 | LR__4233
2928c     14 29 32 F9 | 	getword	local06, local06, #0
29290     7F 00 00 FF 
29294     FF 29 0E F2 | 	cmp	local06, ##65535 wz
29298     00 FA 05 56 |  if_ne	mov	result1, #0
2929c     28 00 90 5D |  if_ne	jmp	#LR__4236
292a0                 | LR__4234
292a0     01 24 06 F1 | 	add	local04, #1
292a4     5C FF 9F FD | 	jmp	#LR__4230
292a8                 | LR__4235
292a8     0A 21 C2 FA | 	rdbyte	local02, arg02
292ac     40 20 CE F7 | 	test	local02, #64 wz
292b0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
292b4     01 26 66 50 |  if_ne	shl	local05, #1
292b8     0F 27 02 51 |  if_ne	add	local05, local01
292bc     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
292c0     00 FA 05 56 |  if_ne	mov	result1, #0
292c4                 | ' 
292c4                 | ' 	return 1;
292c4     01 FA 05 A6 |  if_e	mov	result1, #1
292c8                 | LR__4236
292c8     A7 F0 03 F6 | 	mov	ptra, fp
292cc     B2 00 A0 FD | 	call	#popregs_
292d0                 | _fatfs_cc_cmp_lfn_ret
292d0     2D 00 64 FD | 	ret
292d4                 | 
292d4                 | _fatfs_cc_pick_lfn
292d4     09 01 02 F6 | 	mov	_var01, arg01
292d8     0A 13 02 F6 | 	mov	arg01, arg02
292dc     1A 12 06 F1 | 	add	arg01, #26
292e0                 | ' {
292e0                 | ' 
292e0                 | ' 	return *((WORD*)ptr);
292e0     09 FB E9 FA | 	rdword	result1, arg01 wz
292e4     00 FA 05 56 |  if_ne	mov	result1, #0
292e8     D4 00 90 5D |  if_ne	jmp	#LR__4245
292ec     0A 03 C2 FA | 	rdbyte	_var02, arg02
292f0     40 02 26 F5 | 	andn	_var02, #64
292f4     01 02 86 F1 | 	sub	_var02, #1
292f8     0D 02 06 FD | 	qmul	_var02, #13
292fc                 | ' 
292fc                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
292fc                 | ' 
292fc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
292fc     01 04 06 F6 | 	mov	_var03, #1
29300     00 06 06 F6 | 	mov	_var04, #0
29304     18 08 62 FD | 	getqx	_var05
29308                 | LR__4240
29308     0D 06 16 F2 | 	cmp	_var04, #13 wc
2930c     80 00 90 3D |  if_ae	jmp	#LR__4243
29310     0A 13 02 F6 | 	mov	arg01, arg02
29314     03 03 02 F6 | 	mov	_var02, _var04
29318     01 00 00 FF 
2931c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29320     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29324     01 03 C2 FA | 	rdbyte	_var02, _var02
29328     01 02 06 FA | 	mul	_var02, #1
2932c     01 13 02 F1 | 	add	arg01, _var02
29330     01 00 00 FF 
29334     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29338                 | ' {
29338                 | ' 
29338                 | ' 	return *((WORD*)ptr);
29338     09 FB E1 FA | 	rdword	result1, arg01
2933c     FD 0A 02 F6 | 	mov	_var06, result1
29340     02 03 02 F6 | 	mov	_var02, _var03
29344     0F 02 4E F7 | 	zerox	_var02, #15 wz
29348     28 00 90 AD |  if_e	jmp	#LR__4241
2934c     00 09 16 F2 | 	cmp	_var05, #256 wc
29350     00 FA 05 36 |  if_ae	mov	result1, #0
29354     68 00 90 3D |  if_ae	jmp	#LR__4245
29358     04 03 02 F6 | 	mov	_var02, _var05
2935c     01 02 66 F0 | 	shl	_var02, #1
29360     00 03 02 F1 | 	add	_var02, _var01
29364     05 05 02 F6 | 	mov	_var03, _var06
29368     01 05 52 FC | 	wrword	_var03, _var02
2936c     01 08 06 F1 | 	add	_var05, #1
29370     14 00 90 FD | 	jmp	#LR__4242
29374                 | LR__4241
29374     05 0B 32 F9 | 	getword	_var06, _var06, #0
29378     7F 00 00 FF 
2937c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
29380     00 FA 05 56 |  if_ne	mov	result1, #0
29384     38 00 90 5D |  if_ne	jmp	#LR__4245
29388                 | LR__4242
29388     01 06 06 F1 | 	add	_var04, #1
2938c     78 FF 9F FD | 	jmp	#LR__4240
29390                 | LR__4243
29390     0A 03 C2 FA | 	rdbyte	_var02, arg02
29394     40 02 CE F7 | 	test	_var02, #64 wz
29398     02 0D 02 56 |  if_ne	mov	_var07, _var03
2939c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
293a0     18 00 90 AD |  if_e	jmp	#LR__4244
293a4     00 09 16 F2 | 	cmp	_var05, #256 wc
293a8     00 FA 05 36 |  if_ae	mov	result1, #0
293ac     10 00 90 3D |  if_ae	jmp	#LR__4245
293b0     01 08 66 F0 | 	shl	_var05, #1
293b4     00 09 02 F1 | 	add	_var05, _var01
293b8     04 01 58 FC | 	wrword	#0, _var05
293bc                 | LR__4244
293bc                 | ' 		lfnbuf[i] = 0;
293bc                 | ' 	}
293bc                 | ' 
293bc                 | ' 	return 1;
293bc     01 FA 05 F6 | 	mov	result1, #1
293c0                 | LR__4245
293c0                 | _fatfs_cc_pick_lfn_ret
293c0     2D 00 64 FD | 	ret
293c4                 | 
293c4                 | _fatfs_cc_put_lfn
293c4     0D 14 06 F1 | 	add	arg02, #13
293c8     0A 19 42 FC | 	wrbyte	arg04, arg02
293cc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
293d0     01 18 86 F1 | 	sub	arg04, #1
293d4     0D 18 06 FD | 	qmul	arg04, #13
293d8     09 01 02 F6 | 	mov	_var01, arg01
293dc     02 14 86 F1 | 	sub	arg02, #2
293e0     0A 1F 48 FC | 	wrbyte	#15, arg02
293e4     01 14 06 F1 | 	add	arg02, #1
293e8     0A 01 48 FC | 	wrbyte	#0, arg02
293ec     0C 14 86 F1 | 	sub	arg02, #12
293f0     0A 13 02 F6 | 	mov	arg01, arg02
293f4     1A 12 06 F1 | 	add	arg01, #26
293f8     09 01 58 FC | 	wrword	#0, arg01
293fc     00 02 06 F6 | 	mov	_var02, #0
29400     00 04 06 F6 | 	mov	_var03, #0
29404                 | ' 	BYTE* dir,
29404                 | ' 	BYTE ord,
29404                 | ' 	BYTE sum
29404                 | ' )
29404                 | ' {
29404                 | ' 	UINT i, s;
29404                 | ' 	WCHAR wc;
29404                 | ' 
29404                 | ' 
29404                 | ' 	dir[ 13 ] = sum;
29404                 | ' 	dir[ 11 ] =  0x0F ;
29404                 | ' 	dir[ 12 ] = 0;
29404                 | ' 	st_word(dir +  26 , 0);
29404                 | ' 
29404                 | ' 	i = (ord - 1) * 13;
29404                 | ' 	s = wc = 0;
29404                 | ' 	do {
29404     01 00 00 FF 
29408     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2940c     18 06 62 FD | 	getqx	_var04
29410     97 2A 48 FB | 	callpa	#(@LR__4251-@LR__4250)>>2,fcache_load_ptr_
29414                 | LR__4250
29414     01 19 32 F9 | 	getword	arg04, _var02, #0
29418     7F 00 00 FF 
2941c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29420     03 13 02 56 |  if_ne	mov	arg01, _var04
29424     01 06 06 51 |  if_ne	add	_var04, #1
29428     01 12 66 50 |  if_ne	shl	arg01, #1
2942c     00 13 02 51 |  if_ne	add	arg01, _var01
29430     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29434     0A 13 02 F6 | 	mov	arg01, arg02
29438     02 19 02 F6 | 	mov	arg04, _var03
2943c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29440     0C 19 C2 FA | 	rdbyte	arg04, arg04
29444     01 18 06 FA | 	mul	arg04, #1
29448     0C 13 02 F1 | 	add	arg01, arg04
2944c     09 03 52 FC | 	wrword	_var02, arg01
29450     01 19 02 F6 | 	mov	arg04, _var02
29454     0F 18 4E F7 | 	zerox	arg04, #15 wz
29458     0F 02 CE A9 |  if_e	bmask	_var02, #15
2945c     01 04 06 F1 | 	add	_var03, #1
29460     0D 04 16 F2 | 	cmp	_var03, #13 wc
29464     AC FF 9F CD |  if_b	jmp	#LR__4250
29468                 | LR__4251
29468     01 00 00 FF 
2946c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29470     01 03 32 F9 | 	getword	_var02, _var02, #0
29474     7F 00 00 FF 
29478     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2947c     01 06 66 50 |  if_ne	shl	_var04, #1
29480     00 07 02 51 |  if_ne	add	_var04, _var01
29484     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
29488     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2948c     40 16 46 A5 |  if_e	or	arg03, #64
29490     0A 17 42 FC | 	wrbyte	arg03, arg02
29494                 | _fatfs_cc_put_lfn_ret
29494     2D 00 64 FD | 	ret
29498                 | 
29498                 | _fatfs_cc_gen_numname
29498     08 4A 05 F6 | 	mov	COUNT_, #8
2949c     A8 00 A0 FD | 	call	#pushregs_
294a0     2C F0 07 F1 | 	add	ptra, #44
294a4     09 1F 02 F6 | 	mov	local01, arg01
294a8     0A 21 02 F6 | 	mov	local02, arg02
294ac     0B 23 02 F6 | 	mov	local03, arg03
294b0     0C 25 02 F6 | 	mov	local04, arg04
294b4     0F 13 02 F6 | 	mov	arg01, local01
294b8     10 15 02 F6 | 	mov	arg02, local02
294bc     0B 16 06 F6 | 	mov	arg03, #11
294c0     60 75 BF FD | 	call	#__system____builtin_memmove
294c4     06 24 16 F2 | 	cmp	local04, #6 wc
294c8     48 00 90 CD |  if_b	jmp	#LR__4265
294cc     12 27 02 F6 | 	mov	local05, local04
294d0     97 1E 48 FB | 	callpa	#(@LR__4263-@LR__4260)>>2,fcache_load_ptr_
294d4                 | ' 		sreg = seq;
294d4                 | ' 		while (*lfn) {
294d4                 | LR__4260
294d4     11 29 EA FA | 	rdword	local06, local03 wz
294d8     34 00 90 AD |  if_e	jmp	#LR__4264
294dc     11 2B E2 FA | 	rdword	local07, local03
294e0                 | ' 			wc = *lfn++;
294e0                 | ' 			for (i = 0; i < 16; i++) {
294e0     02 22 06 F1 | 	add	local03, #2
294e4     10 12 DC FC | 	rep	@LR__4262, #16
294e8                 | LR__4261
294e8     01 26 66 F0 | 	shl	local05, #1
294ec     15 29 32 F9 | 	getword	local06, local07, #0
294f0     01 28 06 F5 | 	and	local06, #1
294f4     14 27 02 F1 | 	add	local05, local06
294f8     15 2B 32 F9 | 	getword	local07, local07, #0
294fc     01 2A 46 F0 | 	shr	local07, #1
29500     10 26 2E F4 | 	testbn	local05, #16 wz
29504     88 00 00 5F 
29508     21 26 66 55 |  if_ne	xor	local05, ##69665
2950c                 | LR__4262
2950c     C4 FF 9F FD | 	jmp	#LR__4260
29510                 | LR__4263
29510                 | LR__4264
29510     13 25 02 F6 | 	mov	local04, local05
29514                 | LR__4265
29514     07 2A 06 F6 | 	mov	local07, #7
29518                 | ' 			}
29518                 | ' 		}
29518                 | ' 		seq = (UINT)sreg;
29518                 | ' 	}
29518                 | ' 
29518                 | ' 
29518                 | ' 	i = 7;
29518                 | ' 	do {
29518     10 4E 05 F1 | 	add	fp, #16
2951c     97 1A 48 FB | 	callpa	#(@LR__4267-@LR__4266)>>2,fcache_load_ptr_
29520                 | LR__4266
29520     12 27 42 F8 | 	getnib	local05, local04, #0
29524     30 26 06 F1 | 	add	local05, #48
29528     04 24 46 F0 | 	shr	local04, #4
2952c     13 29 E2 F8 | 	getbyte	local06, local05, #0
29530     3A 28 16 F2 | 	cmp	local06, #58 wc
29534     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29538     07 26 06 31 |  if_ae	add	local05, #7
2953c     15 29 02 F6 | 	mov	local06, local07
29540     01 2A 8E F1 | 	sub	local07, #1 wz
29544     A7 28 02 F1 | 	add	local06, fp
29548     14 27 42 FC | 	wrbyte	local05, local06
2954c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29550     CC FF 9F 5D |  if_ne	jmp	#LR__4266
29554                 | LR__4267
29554     15 29 02 F6 | 	mov	local06, local07
29558     A7 28 02 F1 | 	add	local06, fp
2955c     14 FD 48 FC | 	wrbyte	#126, local06
29560                 | ' 	ns[i] = '~';
29560                 | ' 
29560                 | ' 
29560                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29560     00 26 06 F6 | 	mov	local05, #0
29564     10 4E 85 F1 | 	sub	fp, #16
29568     97 2A 48 FB | 	callpa	#(@LR__4270-@LR__4268)>>2,fcache_load_ptr_
2956c                 | LR__4268
2956c     15 27 12 F2 | 	cmp	local05, local07 wc
29570     4C 00 90 3D |  if_ae	jmp	#LR__4271
29574     13 29 02 F6 | 	mov	local06, local05
29578     0F 29 02 F1 | 	add	local06, local01
2957c     14 29 C2 FA | 	rdbyte	local06, local06
29580     20 28 0E F2 | 	cmp	local06, #32 wz
29584     38 00 90 AD |  if_e	jmp	#LR__4271
29588     13 13 02 F6 | 	mov	arg01, local05
2958c     0F 13 02 F1 | 	add	arg01, local01
29590     09 13 CA FA | 	rdbyte	arg01, arg01 wz
29594     00 FA 05 56 |  if_ne	mov	result1, #0
29598                 | ' 
29598                 | ' 	return 0;
29598     00 FA 05 A6 |  if_e	mov	result1, #0
2959c     00 FA 0D F2 | 	cmp	result1, #0 wz
295a0     14 00 90 AD |  if_e	jmp	#LR__4269
295a4     15 29 02 F6 | 	mov	local06, local07
295a8     01 28 86 F1 | 	sub	local06, #1
295ac     14 27 0A F2 | 	cmp	local05, local06 wz
295b0     0C 00 90 AD |  if_e	jmp	#LR__4271
295b4     01 26 06 F1 | 	add	local05, #1
295b8                 | LR__4269
295b8     01 26 06 F1 | 	add	local05, #1
295bc     AC FF 9F FD | 	jmp	#LR__4268
295c0                 | LR__4270
295c0                 | LR__4271
295c0     97 20 48 FB | 	callpa	#(@LR__4275-@LR__4272)>>2,fcache_load_ptr_
295c4                 | ' 			j++;
295c4                 | ' 		}
295c4                 | ' 	}
295c4                 | ' 	do {
295c4                 | LR__4272
295c4     13 29 02 F6 | 	mov	local06, local05
295c8     0F 29 02 F1 | 	add	local06, local01
295cc     08 2A 16 F2 | 	cmp	local07, #8 wc
295d0     01 26 06 F1 | 	add	local05, #1
295d4     1C 00 90 3D |  if_ae	jmp	#LR__4273
295d8     15 25 02 F6 | 	mov	local04, local07
295dc     10 4E 05 F1 | 	add	fp, #16
295e0     A7 24 02 F1 | 	add	local04, fp
295e4     12 2D C2 FA | 	rdbyte	local08, local04
295e8     01 2A 06 F1 | 	add	local07, #1
295ec     10 4E 85 F1 | 	sub	fp, #16
295f0     04 00 90 FD | 	jmp	#LR__4274
295f4                 | LR__4273
295f4     20 2C 06 F6 | 	mov	local08, #32
295f8                 | LR__4274
295f8     14 2D 42 FC | 	wrbyte	local08, local06
295fc     08 26 16 F2 | 	cmp	local05, #8 wc
29600     C0 FF 9F CD |  if_b	jmp	#LR__4272
29604                 | LR__4275
29604     A7 F0 03 F6 | 	mov	ptra, fp
29608     B2 00 A0 FD | 	call	#popregs_
2960c                 | _fatfs_cc_gen_numname_ret
2960c     2D 00 64 FD | 	ret
29610                 | 
29610                 | _fatfs_cc_sum_sfn
29610     00 00 06 F6 | 	mov	_var01, #0
29614                 | ' )
29614                 | ' {
29614                 | ' 	BYTE sum = 0;
29614                 | ' 	UINT n = 11;
29614                 | ' 
29614                 | ' 	do {
29614     97 12 48 FB | 	callpa	#(@LR__4282-@LR__4280)>>2,fcache_load_ptr_
29618                 | LR__4280
29618     0B 10 DC FC | 	rep	@LR__4283, #11
2961c                 | LR__4281
2961c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29620     01 FA 45 F0 | 	shr	result1, #1
29624     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29628     07 00 66 F0 | 	shl	_var01, #7
2962c     00 FB 01 F1 | 	add	result1, _var01
29630     09 01 C2 FA | 	rdbyte	_var01, arg01
29634     FD 00 02 F1 | 	add	_var01, result1
29638     01 12 06 F1 | 	add	arg01, #1
2963c                 | LR__4282
2963c                 | LR__4283
2963c                 | ' 	return sum;
2963c     00 FB 01 F6 | 	mov	result1, _var01
29640                 | _fatfs_cc_sum_sfn_ret
29640     2D 00 64 FD | 	ret
29644                 | 
29644                 | _fatfs_cc_dir_read
29644     0C 4A 05 F6 | 	mov	COUNT_, #12
29648     A8 00 A0 FD | 	call	#pushregs_
2964c     09 1F 02 F6 | 	mov	local01, arg01
29650     0A 21 02 F6 | 	mov	local02, arg02
29654     04 22 06 F6 | 	mov	local03, #4
29658     0F 25 02 FB | 	rdlong	local04, local01
2965c     FF 26 06 F6 | 	mov	local05, #255
29660     FF 28 06 F6 | 	mov	local06, #255
29664                 | ' )
29664                 | ' {
29664                 | ' 	FRESULT res = FR_NO_FILE;
29664                 | ' 	FATFS *fs = dp->obj.fs;
29664                 | ' 	BYTE attr, b;
29664                 | ' 
29664                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
29664                 | ' 
29664                 | ' 
29664                 | ' 	while (dp->sect) {
29664                 | LR__4290
29664     18 1E 06 F1 | 	add	local01, #24
29668     0F FB 09 FB | 	rdlong	result1, local01 wz
2966c     18 1E 86 F1 | 	sub	local01, #24
29670     AC 01 90 AD |  if_e	jmp	#LR__4300
29674     18 1E 06 F1 | 	add	local01, #24
29678     0F 15 02 FB | 	rdlong	arg02, local01
2967c     18 1E 86 F1 | 	sub	local01, #24
29680     12 13 02 F6 | 	mov	arg01, local04
29684     AC ED BF FD | 	call	#_fatfs_cc_move_window
29688     FD 22 0A F6 | 	mov	local03, result1 wz
2968c     90 01 90 5D |  if_ne	jmp	#LR__4300
29690     1C 1E 06 F1 | 	add	local01, #28
29694     0F FB 01 FB | 	rdlong	result1, local01
29698     1C 1E 86 F1 | 	sub	local01, #28
2969c     FD 2A C2 FA | 	rdbyte	local07, result1
296a0     15 FB 01 F6 | 	mov	result1, local07
296a4     07 FA 4D F7 | 	zerox	result1, #7 wz
296a8     04 22 06 A6 |  if_e	mov	local03, #4
296ac                 | ' 			res = FR_NO_FILE; break;
296ac     70 01 90 AD |  if_e	jmp	#LR__4300
296b0     1C 1E 06 F1 | 	add	local01, #28
296b4     0F 2D 02 FB | 	rdlong	local08, local01
296b8     0B 2C 06 F1 | 	add	local08, #11
296bc     16 2F C2 FA | 	rdbyte	local09, local08
296c0     3F 2E 06 F5 | 	and	local09, #63
296c4     16 1E 86 F1 | 	sub	local01, #22
296c8     0F 2F 42 FC | 	wrbyte	local09, local01
296cc     06 1E 86 F1 | 	sub	local01, #6
296d0     15 FB E1 F8 | 	getbyte	result1, local07, #0
296d4     E5 FA 0D F2 | 	cmp	result1, #229 wz
296d8     15 2D 02 56 |  if_ne	mov	local08, local07
296dc     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
296e0     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
296e4     1C 00 90 AD |  if_e	jmp	#LR__4291
296e8     00 30 06 F6 | 	mov	local10, #0
296ec     17 2D E2 F8 | 	getbyte	local08, local09, #0
296f0     20 2C 26 F5 | 	andn	local08, #32
296f4     08 2C 0E F2 | 	cmp	local08, #8 wz
296f8     01 30 06 A6 |  if_e	mov	local10, #1
296fc     10 31 0A F2 | 	cmp	local10, local02 wz
29700     08 00 90 AD |  if_e	jmp	#LR__4292
29704                 | LR__4291
29704     FF 26 06 F6 | 	mov	local05, #255
29708     00 01 90 FD | 	jmp	#LR__4299
2970c                 | LR__4292
2970c     17 2F E2 F8 | 	getbyte	local09, local09, #0
29710     0F 2E 0E F2 | 	cmp	local09, #15 wz
29714     B4 00 90 5D |  if_ne	jmp	#LR__4296
29718     15 33 E2 F8 | 	getbyte	local11, local07, #0
2971c     40 32 CE F7 | 	test	local11, #64 wz
29720     30 00 90 AD |  if_e	jmp	#LR__4293
29724     1C 1E 06 F1 | 	add	local01, #28
29728     0F 33 02 FB | 	rdlong	local11, local01
2972c     0D 32 06 F1 | 	add	local11, #13
29730     19 29 C2 FA | 	rdbyte	local06, local11
29734     15 2B E2 F8 | 	getbyte	local07, local07, #0
29738     BF 2A 06 F5 | 	and	local07, #191
2973c     15 27 02 F6 | 	mov	local05, local07
29740     0C 1E 86 F1 | 	sub	local01, #12
29744     0F 33 02 FB | 	rdlong	local11, local01
29748     1C 1E 06 F1 | 	add	local01, #28
2974c     0F 33 62 FC | 	wrlong	local11, local01
29750     2C 1E 86 F1 | 	sub	local01, #44
29754                 | LR__4293
29754     15 2D E2 F8 | 	getbyte	local08, local07, #0
29758     13 31 E2 F8 | 	getbyte	local10, local05, #0
2975c     18 2D 0A F2 | 	cmp	local08, local10 wz
29760     5C 00 90 5D |  if_ne	jmp	#LR__4294
29764     14 31 E2 F8 | 	getbyte	local10, local06, #0
29768     1C 1E 06 F1 | 	add	local01, #28
2976c     0F 2F 02 FB | 	rdlong	local09, local01
29770     1C 1E 86 F1 | 	sub	local01, #28
29774     0D 2E 06 F1 | 	add	local09, #13
29778     17 2D C2 FA | 	rdbyte	local08, local09
2977c     16 2F E2 F8 | 	getbyte	local09, local08, #0
29780     17 31 0A F2 | 	cmp	local10, local09 wz
29784     38 00 90 5D |  if_ne	jmp	#LR__4294
29788     0C 24 06 F1 | 	add	local04, #12
2978c     12 13 02 FB | 	rdlong	arg01, local04
29790     0C 24 86 F1 | 	sub	local04, #12
29794     1C 1E 06 F1 | 	add	local01, #28
29798     0F 35 02 FB | 	rdlong	local12, local01
2979c     1C 1E 86 F1 | 	sub	local01, #28
297a0     1A 15 02 F6 | 	mov	arg02, local12
297a4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
297a8     00 FA 4D F2 | 	cmps	result1, #0 wz
297ac     13 35 02 56 |  if_ne	mov	local12, local05
297b0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
297b4     01 34 86 51 |  if_ne	sub	local12, #1
297b8     1A 33 02 56 |  if_ne	mov	local11, local12
297bc     04 00 90 5D |  if_ne	jmp	#LR__4295
297c0                 | LR__4294
297c0     FF 32 06 F6 | 	mov	local11, #255
297c4                 | LR__4295
297c4     19 27 02 F6 | 	mov	local05, local11
297c8     40 00 90 FD | 	jmp	#LR__4298
297cc                 | LR__4296
297cc     13 33 02 F6 | 	mov	local11, local05
297d0     07 32 4E F7 | 	zerox	local11, #7 wz
297d4     20 00 90 5D |  if_ne	jmp	#LR__4297
297d8     14 29 E2 F8 | 	getbyte	local06, local06, #0
297dc     1C 1E 06 F1 | 	add	local01, #28
297e0     0F 13 02 FB | 	rdlong	arg01, local01
297e4     1C 1E 86 F1 | 	sub	local01, #28
297e8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
297ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
297f0     FD 28 0A F2 | 	cmp	local06, result1 wz
297f4     28 00 90 AD |  if_e	jmp	#LR__4300
297f8                 | LR__4297
297f8     2C 1E 06 F1 | 	add	local01, #44
297fc     FF FF FF FF 
29800     0F FF 6B FC | 	wrlong	##-1, local01
29804     2C 1E 86 F1 | 	sub	local01, #44
29808                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29808                 | ' 					}
29808                 | ' 					break;
29808     14 00 90 FD | 	jmp	#LR__4300
2980c                 | LR__4298
2980c                 | LR__4299
2980c     0F 13 02 F6 | 	mov	arg01, local01
29810     00 14 06 F6 | 	mov	arg02, #0
29814     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29818     FD 22 0A F6 | 	mov	local03, result1 wz
2981c     44 FE 9F AD |  if_e	jmp	#LR__4290
29820                 | LR__4300
29820     00 22 0E F2 | 	cmp	local03, #0 wz
29824     18 1E 06 51 |  if_ne	add	local01, #24
29828     0F 01 68 5C |  if_ne	wrlong	#0, local01
2982c                 | ' 	return res;
2982c     11 FB 01 F6 | 	mov	result1, local03
29830     A7 F0 03 F6 | 	mov	ptra, fp
29834     B2 00 A0 FD | 	call	#popregs_
29838                 | _fatfs_cc_dir_read_ret
29838     2D 00 64 FD | 	ret
2983c                 | 
2983c                 | _fatfs_cc_dir_find
2983c     0B 4A 05 F6 | 	mov	COUNT_, #11
29840     A8 00 A0 FD | 	call	#pushregs_
29844     09 1F 02 F6 | 	mov	local01, arg01
29848     0F 21 02 FB | 	rdlong	local02, local01
2984c     0F 13 02 F6 | 	mov	arg01, local01
29850     00 14 06 F6 | 	mov	arg02, #0
29854     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29858     00 FA 0D F2 | 	cmp	result1, #0 wz
2985c     18 02 90 5D |  if_ne	jmp	#LR__4322
29860     FF 22 06 F6 | 	mov	local03, #255
29864     FF 24 06 F6 | 	mov	local04, #255
29868     2C 1E 06 F1 | 	add	local01, #44
2986c     FF FF FF FF 
29870     0F FF 6B FC | 	wrlong	##-1, local01
29874     2C 1E 86 F1 | 	sub	local01, #44
29878                 | ' #line 2404 "ff.c"
29878                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
29878                 | ' 
29878                 | ' 	do {
29878                 | LR__4310
29878     18 1E 06 F1 | 	add	local01, #24
2987c     0F 15 02 FB | 	rdlong	arg02, local01
29880     18 1E 86 F1 | 	sub	local01, #24
29884     10 13 02 F6 | 	mov	arg01, local02
29888     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2988c     FD 26 0A F6 | 	mov	local05, result1 wz
29890     E0 01 90 5D |  if_ne	jmp	#LR__4321
29894     1C 1E 06 F1 | 	add	local01, #28
29898     0F 17 02 FB | 	rdlong	arg03, local01
2989c     1C 1E 86 F1 | 	sub	local01, #28
298a0     0B 29 C2 FA | 	rdbyte	local06, arg03
298a4     14 17 02 F6 | 	mov	arg03, local06
298a8     07 16 4E F7 | 	zerox	arg03, #7 wz
298ac     04 26 06 A6 |  if_e	mov	local05, #4
298b0     C0 01 90 AD |  if_e	jmp	#LR__4321
298b4     1C 1E 06 F1 | 	add	local01, #28
298b8     0F 2B 02 FB | 	rdlong	local07, local01
298bc     15 17 02 F6 | 	mov	arg03, local07
298c0     0B 16 06 F1 | 	add	arg03, #11
298c4     0B 2D C2 FA | 	rdbyte	local08, arg03
298c8     3F 2C 06 F5 | 	and	local08, #63
298cc     16 1E 86 F1 | 	sub	local01, #22
298d0     0F 2D 42 FC | 	wrbyte	local08, local01
298d4     06 1E 86 F1 | 	sub	local01, #6
298d8     14 17 E2 F8 | 	getbyte	arg03, local06, #0
298dc     E5 16 0E F2 | 	cmp	arg03, #229 wz
298e0     18 00 90 AD |  if_e	jmp	#LR__4311
298e4     16 17 E2 F8 | 	getbyte	arg03, local08, #0
298e8     08 16 CE F7 | 	test	arg03, #8 wz
298ec     16 2B 02 56 |  if_ne	mov	local07, local08
298f0     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
298f4     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
298f8     18 00 90 AD |  if_e	jmp	#LR__4312
298fc                 | LR__4311
298fc     FF 24 06 F6 | 	mov	local04, #255
29900     2C 1E 06 F1 | 	add	local01, #44
29904     FF FF FF FF 
29908     0F FF 6B FC | 	wrlong	##-1, local01
2990c     2C 1E 86 F1 | 	sub	local01, #44
29910     4C 01 90 FD | 	jmp	#LR__4320
29914                 | LR__4312
29914     16 2D E2 F8 | 	getbyte	local08, local08, #0
29918     0F 2C 0E F2 | 	cmp	local08, #15 wz
2991c     C8 00 90 5D |  if_ne	jmp	#LR__4316
29920     2B 1E 06 F1 | 	add	local01, #43
29924     0F 2D C2 FA | 	rdbyte	local08, local01
29928     2B 1E 86 F1 | 	sub	local01, #43
2992c     40 2C CE F7 | 	test	local08, #64 wz
29930     2C 01 90 5D |  if_ne	jmp	#LR__4319
29934     14 2F E2 F8 | 	getbyte	local09, local06, #0
29938     40 2E CE F7 | 	test	local09, #64 wz
2993c     30 00 90 AD |  if_e	jmp	#LR__4313
29940     1C 1E 06 F1 | 	add	local01, #28
29944     0F 2F 02 FB | 	rdlong	local09, local01
29948     0D 2E 06 F1 | 	add	local09, #13
2994c     17 23 C2 FA | 	rdbyte	local03, local09
29950     14 29 E2 F8 | 	getbyte	local06, local06, #0
29954     BF 28 06 F5 | 	and	local06, #191
29958     14 25 02 F6 | 	mov	local04, local06
2995c     0C 1E 86 F1 | 	sub	local01, #12
29960     0F 2F 02 FB | 	rdlong	local09, local01
29964     1C 1E 06 F1 | 	add	local01, #28
29968     0F 2F 62 FC | 	wrlong	local09, local01
2996c     2C 1E 86 F1 | 	sub	local01, #44
29970                 | LR__4313
29970     14 31 E2 F8 | 	getbyte	local10, local06, #0
29974     12 2B E2 F8 | 	getbyte	local07, local04, #0
29978     15 31 0A F2 | 	cmp	local10, local07 wz
2997c     5C 00 90 5D |  if_ne	jmp	#LR__4314
29980     11 2D E2 F8 | 	getbyte	local08, local03, #0
29984     1C 1E 06 F1 | 	add	local01, #28
29988     0F 2B 02 FB | 	rdlong	local07, local01
2998c     1C 1E 86 F1 | 	sub	local01, #28
29990     0D 2A 06 F1 | 	add	local07, #13
29994     15 29 C2 FA | 	rdbyte	local06, local07
29998     14 2B E2 F8 | 	getbyte	local07, local06, #0
2999c     15 2D 0A F2 | 	cmp	local08, local07 wz
299a0     38 00 90 5D |  if_ne	jmp	#LR__4314
299a4     0C 20 06 F1 | 	add	local02, #12
299a8     10 13 02 FB | 	rdlong	arg01, local02
299ac     0C 20 86 F1 | 	sub	local02, #12
299b0     1C 1E 06 F1 | 	add	local01, #28
299b4     0F 33 02 FB | 	rdlong	local11, local01
299b8     1C 1E 86 F1 | 	sub	local01, #28
299bc     19 15 02 F6 | 	mov	arg02, local11
299c0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
299c4     00 FA 4D F2 | 	cmps	result1, #0 wz
299c8     12 33 02 56 |  if_ne	mov	local11, local04
299cc     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
299d0     01 32 86 51 |  if_ne	sub	local11, #1
299d4     19 2F 02 56 |  if_ne	mov	local09, local11
299d8     04 00 90 5D |  if_ne	jmp	#LR__4315
299dc                 | LR__4314
299dc     FF 2E 06 F6 | 	mov	local09, #255
299e0                 | LR__4315
299e0     17 25 02 F6 | 	mov	local04, local09
299e4     78 00 90 FD | 	jmp	#LR__4319
299e8                 | LR__4316
299e8     12 2F 02 F6 | 	mov	local09, local04
299ec     07 2E 4E F7 | 	zerox	local09, #7 wz
299f0     20 00 90 5D |  if_ne	jmp	#LR__4317
299f4     11 31 E2 F8 | 	getbyte	local10, local03, #0
299f8     1C 1E 06 F1 | 	add	local01, #28
299fc     0F 13 02 FB | 	rdlong	arg01, local01
29a00     1C 1E 86 F1 | 	sub	local01, #28
29a04     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29a08     FD FA E1 F8 | 	getbyte	result1, result1, #0
29a0c     FD 30 0A F2 | 	cmp	local10, result1 wz
29a10     60 00 90 AD |  if_e	jmp	#LR__4321
29a14                 | LR__4317
29a14     2B 1E 06 F1 | 	add	local01, #43
29a18     0F 2F C2 FA | 	rdbyte	local09, local01
29a1c     2B 1E 86 F1 | 	sub	local01, #43
29a20     01 2E CE F7 | 	test	local09, #1 wz
29a24     24 00 90 5D |  if_ne	jmp	#LR__4318
29a28     1C 1E 06 F1 | 	add	local01, #28
29a2c     0F 13 02 FB | 	rdlong	arg01, local01
29a30     04 1E 06 F1 | 	add	local01, #4
29a34     0F 15 02 F6 | 	mov	arg02, local01
29a38     20 1E 86 F1 | 	sub	local01, #32
29a3c     0B 16 06 F6 | 	mov	arg03, #11
29a40     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29a44     00 FA 0D F2 | 	cmp	result1, #0 wz
29a48     28 00 90 AD |  if_e	jmp	#LR__4321
29a4c                 | LR__4318
29a4c     FF 24 06 F6 | 	mov	local04, #255
29a50     2C 1E 06 F1 | 	add	local01, #44
29a54     FF FF FF FF 
29a58     0F FF 6B FC | 	wrlong	##-1, local01
29a5c     2C 1E 86 F1 | 	sub	local01, #44
29a60                 | LR__4319
29a60                 | LR__4320
29a60     0F 13 02 F6 | 	mov	arg01, local01
29a64     00 14 06 F6 | 	mov	arg02, #0
29a68     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
29a6c     FD 26 0A F6 | 	mov	local05, result1 wz
29a70     04 FE 9F AD |  if_e	jmp	#LR__4310
29a74                 | LR__4321
29a74                 | ' 
29a74                 | ' 	return res;
29a74     13 FB 01 F6 | 	mov	result1, local05
29a78                 | LR__4322
29a78     A7 F0 03 F6 | 	mov	ptra, fp
29a7c     B2 00 A0 FD | 	call	#popregs_
29a80                 | _fatfs_cc_dir_find_ret
29a80     2D 00 64 FD | 	ret
29a84                 | 
29a84                 | _fatfs_cc_dir_register
29a84     0A 4A 05 F6 | 	mov	COUNT_, #10
29a88     A8 00 A0 FD | 	call	#pushregs_
29a8c     2C F0 07 F1 | 	add	ptra, #44
29a90     04 4E 05 F1 | 	add	fp, #4
29a94     A7 12 62 FC | 	wrlong	arg01, fp
29a98     09 1F 02 FB | 	rdlong	local01, arg01
29a9c     08 4E 05 F1 | 	add	fp, #8
29aa0     A7 1E 62 FC | 	wrlong	local01, fp
29aa4     08 4E 85 F1 | 	sub	fp, #8
29aa8     A7 20 02 FB | 	rdlong	local02, fp
29aac     04 4E 85 F1 | 	sub	fp, #4
29ab0     2B 20 06 F1 | 	add	local02, #43
29ab4     10 21 C2 FA | 	rdbyte	local02, local02
29ab8     A0 20 CE F7 | 	test	local02, #160 wz
29abc     06 FA 05 56 |  if_ne	mov	result1, #6
29ac0     F8 03 90 5D |  if_ne	jmp	#LR__4345
29ac4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
29ac4     14 4E 05 F1 | 	add	fp, #20
29ac8     A7 00 68 FC | 	wrlong	#0, fp
29acc     14 4E 85 F1 | 	sub	fp, #20
29ad0     97 28 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
29ad4                 | LR__4330
29ad4     0C 4E 05 F1 | 	add	fp, #12
29ad8     A7 20 02 FB | 	rdlong	local02, fp
29adc     0C 20 06 F1 | 	add	local02, #12
29ae0     10 23 02 FB | 	rdlong	local03, local02
29ae4     08 4E 05 F1 | 	add	fp, #8
29ae8     A7 24 02 FB | 	rdlong	local04, fp
29aec     14 4E 85 F1 | 	sub	fp, #20
29af0     01 24 66 F0 | 	shl	local04, #1
29af4     11 25 02 F1 | 	add	local04, local03
29af8     12 21 EA FA | 	rdword	local02, local04 wz
29afc     24 00 90 AD |  if_e	jmp	#LR__4332
29b00     14 4E 05 F1 | 	add	fp, #20
29b04     A7 26 02 FB | 	rdlong	local05, fp
29b08     13 29 02 F6 | 	mov	local06, local05
29b0c     13 2B 02 F6 | 	mov	local07, local05
29b10     15 2D 02 F6 | 	mov	local08, local07
29b14     01 2C 06 F1 | 	add	local08, #1
29b18     A7 2C 62 FC | 	wrlong	local08, fp
29b1c     14 4E 85 F1 | 	sub	fp, #20
29b20     B0 FF 9F FD | 	jmp	#LR__4330
29b24                 | LR__4331
29b24                 | LR__4332
29b24     1C 4E 05 F1 | 	add	fp, #28
29b28     A7 12 02 F6 | 	mov	arg01, fp
29b2c     18 4E 85 F1 | 	sub	fp, #24
29b30     A7 14 02 FB | 	rdlong	arg02, fp
29b34     04 4E 85 F1 | 	sub	fp, #4
29b38     20 14 06 F1 | 	add	arg02, #32
29b3c     0C 16 06 F6 | 	mov	arg03, #12
29b40     E0 6E BF FD | 	call	#__system____builtin_memmove
29b44     27 4E 05 F1 | 	add	fp, #39
29b48     A7 2E C2 FA | 	rdbyte	local09, fp
29b4c     27 4E 85 F1 | 	sub	fp, #39
29b50     01 2E CE F7 | 	test	local09, #1 wz
29b54     F4 00 90 AD |  if_e	jmp	#LR__4335
29b58     04 4E 05 F1 | 	add	fp, #4
29b5c     A7 30 02 FB | 	rdlong	local10, fp
29b60     2B 30 06 F1 | 	add	local10, #43
29b64     18 81 48 FC | 	wrbyte	#64, local10
29b68                 | ' 		dp->fn[ 11 ] =  0x40 ;
29b68                 | ' 		for (n = 1; n < 100; n++) {
29b68     0C 4E 05 F1 | 	add	fp, #12
29b6c     A7 02 68 FC | 	wrlong	#1, fp
29b70     10 4E 85 F1 | 	sub	fp, #16
29b74                 | LR__4333
29b74     10 4E 05 F1 | 	add	fp, #16
29b78     A7 20 02 FB | 	rdlong	local02, fp
29b7c     10 4E 85 F1 | 	sub	fp, #16
29b80     64 20 16 F2 | 	cmp	local02, #100 wc
29b84     70 00 90 3D |  if_ae	jmp	#LR__4334
29b88     04 4E 05 F1 | 	add	fp, #4
29b8c     A7 12 02 FB | 	rdlong	arg01, fp
29b90     20 12 06 F1 | 	add	arg01, #32
29b94     18 4E 05 F1 | 	add	fp, #24
29b98     A7 14 02 F6 | 	mov	arg02, fp
29b9c     10 4E 85 F1 | 	sub	fp, #16
29ba0     A7 30 02 FB | 	rdlong	local10, fp
29ba4     0C 30 06 F1 | 	add	local10, #12
29ba8     18 17 02 FB | 	rdlong	arg03, local10
29bac     04 4E 05 F1 | 	add	fp, #4
29bb0     A7 18 02 FB | 	rdlong	arg04, fp
29bb4     10 4E 85 F1 | 	sub	fp, #16
29bb8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
29bbc     04 4E 05 F1 | 	add	fp, #4
29bc0     A7 12 02 FB | 	rdlong	arg01, fp
29bc4     04 4E 85 F1 | 	sub	fp, #4
29bc8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29bcc     08 4E 05 F1 | 	add	fp, #8
29bd0     A7 FA 61 FC | 	wrlong	result1, fp
29bd4     00 FA 4D F2 | 	cmps	result1, #0 wz
29bd8     08 4E 85 F1 | 	sub	fp, #8
29bdc     18 00 90 5D |  if_ne	jmp	#LR__4334
29be0     10 4E 05 F1 | 	add	fp, #16
29be4     A7 30 02 FB | 	rdlong	local10, fp
29be8     01 30 06 F1 | 	add	local10, #1
29bec     A7 30 62 FC | 	wrlong	local10, fp
29bf0     10 4E 85 F1 | 	sub	fp, #16
29bf4     7C FF 9F FD | 	jmp	#LR__4333
29bf8                 | LR__4334
29bf8     10 4E 05 F1 | 	add	fp, #16
29bfc     A7 30 02 FB | 	rdlong	local10, fp
29c00     10 4E 85 F1 | 	sub	fp, #16
29c04     64 30 0E F2 | 	cmp	local10, #100 wz
29c08     07 FA 05 A6 |  if_e	mov	result1, #7
29c0c     AC 02 90 AD |  if_e	jmp	#LR__4345
29c10     08 4E 05 F1 | 	add	fp, #8
29c14     A7 30 02 FB | 	rdlong	local10, fp
29c18     08 4E 85 F1 | 	sub	fp, #8
29c1c     04 30 0E F2 | 	cmp	local10, #4 wz
29c20     08 4E 05 51 |  if_ne	add	fp, #8
29c24     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29c28     08 4E 85 51 |  if_ne	sub	fp, #8
29c2c     8C 02 90 5D |  if_ne	jmp	#LR__4345
29c30     04 4E 05 F1 | 	add	fp, #4
29c34     A7 30 02 FB | 	rdlong	local10, fp
29c38     23 4E 05 F1 | 	add	fp, #35
29c3c     A7 1E C2 FA | 	rdbyte	local01, fp
29c40     27 4E 85 F1 | 	sub	fp, #39
29c44     2B 30 06 F1 | 	add	local10, #43
29c48     18 1F 42 FC | 	wrbyte	local01, local10
29c4c                 | LR__4335
29c4c     27 4E 05 F1 | 	add	fp, #39
29c50     A7 20 C2 FA | 	rdbyte	local02, fp
29c54     27 4E 85 F1 | 	sub	fp, #39
29c58     02 20 CE F7 | 	test	local02, #2 wz
29c5c     20 00 90 AD |  if_e	jmp	#LR__4336
29c60     14 4E 05 F1 | 	add	fp, #20
29c64     A7 30 02 FB | 	rdlong	local10, fp
29c68     0C 30 06 F1 | 	add	local10, #12
29c6c     0D 30 16 FD | 	qdiv	local10, #13
29c70     14 4E 85 F1 | 	sub	fp, #20
29c74     18 30 62 FD | 	getqx	local10
29c78     01 30 06 F1 | 	add	local10, #1
29c7c     04 00 90 FD | 	jmp	#LR__4337
29c80                 | LR__4336
29c80     01 30 06 F6 | 	mov	local10, #1
29c84                 | LR__4337
29c84     18 4E 05 F1 | 	add	fp, #24
29c88     A7 30 62 FC | 	wrlong	local10, fp
29c8c     14 4E 85 F1 | 	sub	fp, #20
29c90     A7 12 02 FB | 	rdlong	arg01, fp
29c94     18 15 02 F6 | 	mov	arg02, local10
29c98     04 4E 85 F1 | 	sub	fp, #4
29c9c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29ca0     08 4E 05 F1 | 	add	fp, #8
29ca4     A7 FA 61 FC | 	wrlong	result1, fp
29ca8     08 4E 85 F1 | 	sub	fp, #8
29cac     00 FA 0D F2 | 	cmp	result1, #0 wz
29cb0     38 01 90 5D |  if_ne	jmp	#LR__4342
29cb4     18 4E 05 F1 | 	add	fp, #24
29cb8     A7 30 02 FB | 	rdlong	local10, fp
29cbc     01 30 8E F1 | 	sub	local10, #1 wz
29cc0     A7 30 62 FC | 	wrlong	local10, fp
29cc4     18 4E 85 F1 | 	sub	fp, #24
29cc8     20 01 90 AD |  if_e	jmp	#LR__4342
29ccc     04 4E 05 F1 | 	add	fp, #4
29cd0     A7 30 02 FB | 	rdlong	local10, fp
29cd4     18 13 02 F6 | 	mov	arg01, local10
29cd8     14 4E 05 F1 | 	add	fp, #20
29cdc     A7 18 02 FB | 	rdlong	arg04, fp
29ce0     18 4E 85 F1 | 	sub	fp, #24
29ce4     05 18 66 F0 | 	shl	arg04, #5
29ce8     10 30 06 F1 | 	add	local10, #16
29cec     18 15 02 FB | 	rdlong	arg02, local10
29cf0     0C 15 82 F1 | 	sub	arg02, arg04
29cf4     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29cf8     08 4E 05 F1 | 	add	fp, #8
29cfc     A7 FA 61 FC | 	wrlong	result1, fp
29d00     08 4E 85 F1 | 	sub	fp, #8
29d04     00 FA 0D F2 | 	cmp	result1, #0 wz
29d08     E0 00 90 5D |  if_ne	jmp	#LR__4341
29d0c     04 4E 05 F1 | 	add	fp, #4
29d10     A7 12 02 FB | 	rdlong	arg01, fp
29d14     04 4E 85 F1 | 	sub	fp, #4
29d18     20 12 06 F1 | 	add	arg01, #32
29d1c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29d20     FD 30 02 F6 | 	mov	local10, result1
29d24     28 4E 05 F1 | 	add	fp, #40
29d28     A7 30 42 FC | 	wrbyte	local10, fp
29d2c     28 4E 85 F1 | 	sub	fp, #40
29d30                 | ' 			sum = sum_sfn(dp->fn);
29d30                 | ' 			do {
29d30                 | LR__4338
29d30     0C 4E 05 F1 | 	add	fp, #12
29d34     A7 12 02 FB | 	rdlong	arg01, fp
29d38     08 4E 85 F1 | 	sub	fp, #8
29d3c     A7 1E 02 FB | 	rdlong	local01, fp
29d40     04 4E 85 F1 | 	sub	fp, #4
29d44     18 1E 06 F1 | 	add	local01, #24
29d48     0F 15 02 FB | 	rdlong	arg02, local01
29d4c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29d50     08 4E 05 F1 | 	add	fp, #8
29d54     A7 FA 61 FC | 	wrlong	result1, fp
29d58     00 FA 4D F2 | 	cmps	result1, #0 wz
29d5c     08 4E 85 F1 | 	sub	fp, #8
29d60     88 00 90 5D |  if_ne	jmp	#LR__4340
29d64     0C 4E 05 F1 | 	add	fp, #12
29d68     A7 20 02 FB | 	rdlong	local02, fp
29d6c     0C 20 06 F1 | 	add	local02, #12
29d70     10 13 02 FB | 	rdlong	arg01, local02
29d74     08 4E 85 F1 | 	sub	fp, #8
29d78     A7 1E 02 FB | 	rdlong	local01, fp
29d7c     1C 1E 06 F1 | 	add	local01, #28
29d80     0F 15 02 FB | 	rdlong	arg02, local01
29d84     14 4E 05 F1 | 	add	fp, #20
29d88     A7 16 02 FB | 	rdlong	arg03, fp
29d8c     10 4E 05 F1 | 	add	fp, #16
29d90     A7 18 C2 FA | 	rdbyte	arg04, fp
29d94     28 4E 85 F1 | 	sub	fp, #40
29d98     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29d9c     0C 4E 05 F1 | 	add	fp, #12
29da0     A7 30 02 FB | 	rdlong	local10, fp
29da4     03 30 06 F1 | 	add	local10, #3
29da8     18 03 48 FC | 	wrbyte	#1, local10
29dac     08 4E 85 F1 | 	sub	fp, #8
29db0     A7 12 02 FB | 	rdlong	arg01, fp
29db4     04 4E 85 F1 | 	sub	fp, #4
29db8     00 14 06 F6 | 	mov	arg02, #0
29dbc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29dc0     08 4E 05 F1 | 	add	fp, #8
29dc4     A7 FA 61 FC | 	wrlong	result1, fp
29dc8     00 FA 4D F2 | 	cmps	result1, #0 wz
29dcc     08 4E 85 F1 | 	sub	fp, #8
29dd0     18 00 90 5D |  if_ne	jmp	#LR__4339
29dd4     18 4E 05 F1 | 	add	fp, #24
29dd8     A7 30 02 FB | 	rdlong	local10, fp
29ddc     01 30 8E F1 | 	sub	local10, #1 wz
29de0     A7 30 62 FC | 	wrlong	local10, fp
29de4     18 4E 85 F1 | 	sub	fp, #24
29de8     44 FF 9F 5D |  if_ne	jmp	#LR__4338
29dec                 | LR__4339
29dec                 | LR__4340
29dec                 | LR__4341
29dec                 | LR__4342
29dec     08 4E 05 F1 | 	add	fp, #8
29df0     A7 30 0A FB | 	rdlong	local10, fp wz
29df4     08 4E 85 F1 | 	sub	fp, #8
29df8     B4 00 90 5D |  if_ne	jmp	#LR__4344
29dfc     0C 4E 05 F1 | 	add	fp, #12
29e00     A7 12 02 FB | 	rdlong	arg01, fp
29e04     08 4E 85 F1 | 	sub	fp, #8
29e08     A7 1E 02 FB | 	rdlong	local01, fp
29e0c     04 4E 85 F1 | 	sub	fp, #4
29e10     18 1E 06 F1 | 	add	local01, #24
29e14     0F 15 02 FB | 	rdlong	arg02, local01
29e18     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29e1c     08 4E 05 F1 | 	add	fp, #8
29e20     A7 FA 61 FC | 	wrlong	result1, fp
29e24     08 4E 85 F1 | 	sub	fp, #8
29e28     00 FA 0D F2 | 	cmp	result1, #0 wz
29e2c     80 00 90 5D |  if_ne	jmp	#LR__4343
29e30     04 4E 05 F1 | 	add	fp, #4
29e34     A7 20 02 FB | 	rdlong	local02, fp
29e38     04 4E 85 F1 | 	sub	fp, #4
29e3c     1C 20 06 F1 | 	add	local02, #28
29e40     10 13 02 FB | 	rdlong	arg01, local02
29e44     00 14 06 F6 | 	mov	arg02, #0
29e48     20 16 06 F6 | 	mov	arg03, #32
29e4c     98 00 A0 FD | 	call	#\builtin_bytefill_
29e50     04 4E 05 F1 | 	add	fp, #4
29e54     A7 14 02 FB | 	rdlong	arg02, fp
29e58     0A 1F 02 F6 | 	mov	local01, arg02
29e5c     1C 1E 06 F1 | 	add	local01, #28
29e60     0F 13 02 FB | 	rdlong	arg01, local01
29e64     04 4E 85 F1 | 	sub	fp, #4
29e68     20 14 06 F1 | 	add	arg02, #32
29e6c     0B 16 06 F6 | 	mov	arg03, #11
29e70     B0 6B BF FD | 	call	#__system____builtin_memmove
29e74     04 4E 05 F1 | 	add	fp, #4
29e78     A7 2E 02 FB | 	rdlong	local09, fp
29e7c     17 31 02 F6 | 	mov	local10, local09
29e80     1C 30 06 F1 | 	add	local10, #28
29e84     18 1F 02 FB | 	rdlong	local01, local10
29e88     2B 2E 06 F1 | 	add	local09, #43
29e8c     17 31 C2 FA | 	rdbyte	local10, local09
29e90     18 30 06 F5 | 	and	local10, #24
29e94     0C 1E 06 F1 | 	add	local01, #12
29e98     0F 31 42 FC | 	wrbyte	local10, local01
29e9c     08 4E 05 F1 | 	add	fp, #8
29ea0     A7 30 02 FB | 	rdlong	local10, fp
29ea4     0C 4E 85 F1 | 	sub	fp, #12
29ea8     03 30 06 F1 | 	add	local10, #3
29eac     18 03 48 FC | 	wrbyte	#1, local10
29eb0                 | LR__4343
29eb0                 | LR__4344
29eb0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29eb0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29eb0                 | ' 
29eb0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29eb0                 | ' 
29eb0                 | ' 			fs->wflag = 1;
29eb0                 | ' 		}
29eb0                 | ' 	}
29eb0                 | ' 
29eb0                 | ' 	return res;
29eb0     08 4E 05 F1 | 	add	fp, #8
29eb4     A7 FA 01 FB | 	rdlong	result1, fp
29eb8     08 4E 85 F1 | 	sub	fp, #8
29ebc                 | LR__4345
29ebc     A7 F0 03 F6 | 	mov	ptra, fp
29ec0     B2 00 A0 FD | 	call	#popregs_
29ec4                 | _fatfs_cc_dir_register_ret
29ec4     2D 00 64 FD | 	ret
29ec8                 | 
29ec8                 | _fatfs_cc_dir_remove
29ec8     05 4A 05 F6 | 	mov	COUNT_, #5
29ecc     A8 00 A0 FD | 	call	#pushregs_
29ed0     09 1F 02 F6 | 	mov	local01, arg01
29ed4     0F 21 02 FB | 	rdlong	local02, local01
29ed8     10 1E 06 F1 | 	add	local01, #16
29edc     0F 23 02 FB | 	rdlong	local03, local01
29ee0     1C 1E 06 F1 | 	add	local01, #28
29ee4     0F 15 02 FB | 	rdlong	arg02, local01
29ee8     2C 1E 86 F1 | 	sub	local01, #44
29eec     FF FF 7F FF 
29ef0     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29ef4     00 24 06 A6 |  if_e	mov	local04, #0
29ef8     18 00 90 AD |  if_e	jmp	#LR__4350
29efc     0F 13 02 F6 | 	mov	arg01, local01
29f00     2C 1E 06 F1 | 	add	local01, #44
29f04     0F 15 02 FB | 	rdlong	arg02, local01
29f08     2C 1E 86 F1 | 	sub	local01, #44
29f0c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29f10     FD 24 02 F6 | 	mov	local04, result1
29f14                 | LR__4350
29f14     12 27 0A F6 | 	mov	local05, local04 wz
29f18     64 00 90 5D |  if_ne	jmp	#LR__4353
29f1c                 | ' 		do {
29f1c                 | LR__4351
29f1c     18 1E 06 F1 | 	add	local01, #24
29f20     0F 15 02 FB | 	rdlong	arg02, local01
29f24     18 1E 86 F1 | 	sub	local01, #24
29f28     10 13 02 F6 | 	mov	arg01, local02
29f2c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29f30     FD 26 0A F6 | 	mov	local05, result1 wz
29f34     40 00 90 5D |  if_ne	jmp	#LR__4352
29f38     1C 1E 06 F1 | 	add	local01, #28
29f3c     0F 25 02 FB | 	rdlong	local04, local01
29f40     12 CB 49 FC | 	wrbyte	#229, local04
29f44     03 20 06 F1 | 	add	local02, #3
29f48     10 03 48 FC | 	wrbyte	#1, local02
29f4c     03 20 86 F1 | 	sub	local02, #3
29f50     0C 1E 86 F1 | 	sub	local01, #12
29f54     0F 25 02 FB | 	rdlong	local04, local01
29f58     10 1E 86 F1 | 	sub	local01, #16
29f5c     11 25 12 F2 | 	cmp	local04, local03 wc
29f60     14 00 90 3D |  if_ae	jmp	#LR__4352
29f64     0F 13 02 F6 | 	mov	arg01, local01
29f68     00 14 06 F6 | 	mov	arg02, #0
29f6c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29f70     FD 26 0A F6 | 	mov	local05, result1 wz
29f74     A4 FF 9F AD |  if_e	jmp	#LR__4351
29f78                 | LR__4352
29f78     04 26 0E F2 | 	cmp	local05, #4 wz
29f7c     02 26 06 A6 |  if_e	mov	local05, #2
29f80                 | LR__4353
29f80                 | ' 	}
29f80                 | ' #line 2590 "ff.c"
29f80                 | ' 	return res;
29f80     13 FB 01 F6 | 	mov	result1, local05
29f84     A7 F0 03 F6 | 	mov	ptra, fp
29f88     B2 00 A0 FD | 	call	#popregs_
29f8c                 | _fatfs_cc_dir_remove_ret
29f8c     2D 00 64 FD | 	ret
29f90                 | 
29f90                 | _fatfs_cc_get_fileinfo
29f90     0F 4A 05 F6 | 	mov	COUNT_, #15
29f94     A8 00 A0 FD | 	call	#pushregs_
29f98     09 1F 02 F6 | 	mov	local01, arg01
29f9c     0A 21 02 F6 | 	mov	local02, arg02
29fa0     0F 23 02 FB | 	rdlong	local03, local01
29fa4     1C 20 06 F1 | 	add	local02, #28
29fa8     10 01 48 FC | 	wrbyte	#0, local02
29fac     1C 20 86 F1 | 	sub	local02, #28
29fb0     18 1E 06 F1 | 	add	local01, #24
29fb4     0F 25 0A FB | 	rdlong	local04, local01 wz
29fb8     18 1E 86 F1 | 	sub	local01, #24
29fbc     90 03 90 AD |  if_e	jmp	#LR__4374
29fc0     2C 1E 06 F1 | 	add	local01, #44
29fc4     0F 25 02 FB | 	rdlong	local04, local01
29fc8     2C 1E 86 F1 | 	sub	local01, #44
29fcc     FF FF 7F FF 
29fd0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29fd4     D8 00 90 AD |  if_e	jmp	#LR__4363
29fd8     00 26 06 F6 | 	mov	local05, #0
29fdc     00 28 06 F6 | 	mov	local06, #0
29fe0     00 2A 06 F6 | 	mov	local07, #0
29fe4                 | ' 			si = di = 0;
29fe4                 | ' 			hs = 0;
29fe4                 | ' 			while (fs->lfnbuf[si] != 0) {
29fe4                 | LR__4360
29fe4     0C 22 06 F1 | 	add	local03, #12
29fe8     11 25 02 FB | 	rdlong	local04, local03
29fec     0C 22 86 F1 | 	sub	local03, #12
29ff0     14 2D 02 F6 | 	mov	local08, local06
29ff4     01 2C 66 F0 | 	shl	local08, #1
29ff8     12 2D 02 F1 | 	add	local08, local04
29ffc     16 25 EA FA | 	rdword	local04, local08 wz
2a000     90 00 90 AD |  if_e	jmp	#LR__4362
2a004     0C 22 06 F1 | 	add	local03, #12
2a008     11 2F 02 FB | 	rdlong	local09, local03
2a00c     0C 22 86 F1 | 	sub	local03, #12
2a010     14 31 02 F6 | 	mov	local10, local06
2a014     01 30 66 F0 | 	shl	local10, #1
2a018     17 31 02 F1 | 	add	local10, local09
2a01c     18 33 E2 FA | 	rdword	local11, local10
2a020     15 25 02 F6 | 	mov	local04, local07
2a024     0F 24 4E F7 | 	zerox	local04, #15 wz
2a028     01 28 06 F1 | 	add	local06, #1
2a02c     24 00 90 5D |  if_ne	jmp	#LR__4361
2a030     19 35 32 F9 | 	getword	local12, local11, #0
2a034     6C 00 00 FF 
2a038     00 34 16 F2 | 	cmp	local12, ##55296 wc
2a03c     14 00 90 CD |  if_b	jmp	#LR__4361
2a040     19 37 32 F9 | 	getword	local13, local11, #0
2a044     70 00 00 FF 
2a048     00 36 16 F2 | 	cmp	local13, ##57344 wc
2a04c     19 2B 02 C6 |  if_b	mov	local07, local11
2a050                 | ' 					hs = wc; continue;
2a050     90 FF 9F CD |  if_b	jmp	#LR__4360
2a054                 | LR__4361
2a054     15 13 32 F9 | 	getword	arg01, local07, #0
2a058     10 12 66 F0 | 	shl	arg01, #16
2a05c     19 33 32 F9 | 	getword	local11, local11, #0
2a060     19 13 42 F5 | 	or	arg01, local11
2a064     13 15 02 F6 | 	mov	arg02, local05
2a068     1C 20 06 F1 | 	add	local02, #28
2a06c     10 15 02 F1 | 	add	arg02, local02
2a070     FF 16 06 F6 | 	mov	arg03, #255
2a074     13 17 82 F1 | 	sub	arg03, local05
2a078     1C 20 86 F1 | 	sub	local02, #28
2a07c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2a080     FD 38 0A F6 | 	mov	local14, result1 wz
2a084     00 26 06 A6 |  if_e	mov	local05, #0
2a088     1C 27 02 51 |  if_ne	add	local05, local14
2a08c     00 2A 06 56 |  if_ne	mov	local07, #0
2a090     50 FF 9F 5D |  if_ne	jmp	#LR__4360
2a094                 | LR__4362
2a094     15 25 02 F6 | 	mov	local04, local07
2a098     0F 24 4E F7 | 	zerox	local04, #15 wz
2a09c     00 26 06 56 |  if_ne	mov	local05, #0
2a0a0     1C 20 06 F1 | 	add	local02, #28
2a0a4     10 27 02 F1 | 	add	local05, local02
2a0a8     13 01 48 FC | 	wrbyte	#0, local05
2a0ac     1C 20 86 F1 | 	sub	local02, #28
2a0b0                 | LR__4363
2a0b0     00 26 06 F6 | 	mov	local05, #0
2a0b4     00 28 06 F6 | 	mov	local06, #0
2a0b8                 | ' 			fno->fname[di] = 0;
2a0b8                 | ' 		}
2a0b8                 | ' 	}
2a0b8                 | ' 
2a0b8                 | ' 	si = di = 0;
2a0b8                 | ' 	while (si < 11) {
2a0b8                 | LR__4364
2a0b8     0B 28 16 F2 | 	cmp	local06, #11 wc
2a0bc     20 01 90 3D |  if_ae	jmp	#LR__4367
2a0c0     1C 1E 06 F1 | 	add	local01, #28
2a0c4     0F 2F 02 FB | 	rdlong	local09, local01
2a0c8     1C 1E 86 F1 | 	sub	local01, #28
2a0cc     14 31 02 F6 | 	mov	local10, local06
2a0d0     17 31 02 F1 | 	add	local10, local09
2a0d4     18 33 C2 FA | 	rdbyte	local11, local10
2a0d8     19 25 32 F9 | 	getword	local04, local11, #0
2a0dc     20 24 0E F2 | 	cmp	local04, #32 wz
2a0e0     01 28 06 F1 | 	add	local06, #1
2a0e4     D0 FF 9F AD |  if_e	jmp	#LR__4364
2a0e8     19 25 32 F9 | 	getword	local04, local11, #0
2a0ec     05 24 0E F2 | 	cmp	local04, #5 wz
2a0f0     E5 32 06 A6 |  if_e	mov	local11, #229
2a0f4     09 28 0E F2 | 	cmp	local06, #9 wz
2a0f8     20 00 90 5D |  if_ne	jmp	#LR__4365
2a0fc     0C 26 16 F2 | 	cmp	local05, #12 wc
2a100     18 00 90 3D |  if_ae	jmp	#LR__4365
2a104     13 37 02 F6 | 	mov	local13, local05
2a108     0C 20 06 F1 | 	add	local02, #12
2a10c     10 37 02 F1 | 	add	local13, local02
2a110     1B 5D 48 FC | 	wrbyte	#46, local13
2a114     01 26 06 F1 | 	add	local05, #1
2a118     0C 20 86 F1 | 	sub	local02, #12
2a11c                 | LR__4365
2a11c     19 13 32 F9 | 	getword	arg01, local11, #0
2a120     07 12 4E F7 | 	zerox	arg01, #7 wz
2a124     00 FA 05 56 |  if_ne	mov	result1, #0
2a128                 | ' 
2a128                 | ' 	return 0;
2a128     00 FA 05 A6 |  if_e	mov	result1, #0
2a12c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a130     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2a134     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2a138     50 00 90 AD |  if_e	jmp	#LR__4366
2a13c     1C 1E 06 F1 | 	add	local01, #28
2a140     0F 31 02 FB | 	rdlong	local10, local01
2a144     1C 1E 86 F1 | 	sub	local01, #28
2a148     14 2D 02 F6 | 	mov	local08, local06
2a14c     18 2D 02 F1 | 	add	local08, local10
2a150     16 13 CA FA | 	rdbyte	arg01, local08 wz
2a154     00 FA 05 56 |  if_ne	mov	result1, #0
2a158                 | ' 
2a158                 | ' 	return 0;
2a158     00 FA 05 A6 |  if_e	mov	result1, #0
2a15c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a160     28 00 90 AD |  if_e	jmp	#LR__4366
2a164     19 33 32 F9 | 	getword	local11, local11, #0
2a168     08 32 66 F0 | 	shl	local11, #8
2a16c     1C 1E 06 F1 | 	add	local01, #28
2a170     0F 39 02 FB | 	rdlong	local14, local01
2a174     1C 1E 86 F1 | 	sub	local01, #28
2a178     14 2F 02 F6 | 	mov	local09, local06
2a17c     1C 2F 02 F1 | 	add	local09, local14
2a180     17 35 C2 FA | 	rdbyte	local12, local09
2a184     1A 33 42 F5 | 	or	local11, local12
2a188     01 28 06 F1 | 	add	local06, #1
2a18c                 | LR__4366
2a18c     19 13 02 F6 | 	mov	arg01, local11
2a190     01 00 00 FF 
2a194     52 15 06 F6 | 	mov	arg02, ##850
2a198     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2a19c     FD 32 02 F6 | 	mov	local11, result1
2a1a0     19 25 02 F6 | 	mov	local04, local11
2a1a4     0F 24 4E F7 | 	zerox	local04, #15 wz
2a1a8     00 26 06 A6 |  if_e	mov	local05, #0
2a1ac     30 00 90 AD |  if_e	jmp	#LR__4367
2a1b0     19 13 32 F9 | 	getword	arg01, local11, #0
2a1b4     13 15 02 F6 | 	mov	arg02, local05
2a1b8     0C 20 06 F1 | 	add	local02, #12
2a1bc     10 15 02 F1 | 	add	arg02, local02
2a1c0     0C 16 06 F6 | 	mov	arg03, #12
2a1c4     13 17 82 F1 | 	sub	arg03, local05
2a1c8     0C 20 86 F1 | 	sub	local02, #12
2a1cc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2a1d0     FD 38 0A F6 | 	mov	local14, result1 wz
2a1d4     00 26 06 A6 |  if_e	mov	local05, #0
2a1d8     1C 27 02 51 |  if_ne	add	local05, local14
2a1dc     D8 FE 9F 5D |  if_ne	jmp	#LR__4364
2a1e0                 | LR__4367
2a1e0     13 25 02 F6 | 	mov	local04, local05
2a1e4     0C 20 06 F1 | 	add	local02, #12
2a1e8     10 25 02 F1 | 	add	local04, local02
2a1ec     12 01 48 FC | 	wrbyte	#0, local04
2a1f0     10 20 06 F1 | 	add	local02, #16
2a1f4     10 25 CA FA | 	rdbyte	local04, local02 wz
2a1f8     1C 20 86 F1 | 	sub	local02, #28
2a1fc     F8 00 90 5D |  if_ne	jmp	#LR__4373
2a200     00 26 0E F2 | 	cmp	local05, #0 wz
2a204     1C 00 90 5D |  if_ne	jmp	#LR__4368
2a208     13 37 02 F6 | 	mov	local13, local05
2a20c     1C 20 06 F1 | 	add	local02, #28
2a210     10 37 02 F1 | 	add	local13, local02
2a214     1B 7F 48 FC | 	wrbyte	#63, local13
2a218     01 26 06 F1 | 	add	local05, #1
2a21c     1C 20 86 F1 | 	sub	local02, #28
2a220     A4 00 90 FD | 	jmp	#LR__4372
2a224                 | LR__4368
2a224                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a224     00 26 06 F6 | 	mov	local05, #0
2a228     00 28 06 F6 | 	mov	local06, #0
2a22c     08 3A 06 F6 | 	mov	local15, #8
2a230                 | LR__4369
2a230     14 25 02 F6 | 	mov	local04, local06
2a234     0C 20 06 F1 | 	add	local02, #12
2a238     10 25 02 F1 | 	add	local04, local02
2a23c     12 37 CA FA | 	rdbyte	local13, local04 wz
2a240     0C 20 86 F1 | 	sub	local02, #12
2a244     80 00 90 AD |  if_e	jmp	#LR__4371
2a248     14 2D 02 F6 | 	mov	local08, local06
2a24c     0C 20 06 F1 | 	add	local02, #12
2a250     10 2D 02 F1 | 	add	local08, local02
2a254     16 33 C2 FA | 	rdbyte	local11, local08
2a258     19 39 32 F9 | 	getword	local14, local11, #0
2a25c     2E 38 0E F2 | 	cmp	local14, #46 wz
2a260     0C 20 86 F1 | 	sub	local02, #12
2a264     10 3A 06 A6 |  if_e	mov	local15, #16
2a268     19 39 32 F9 | 	getword	local14, local11, #0
2a26c     41 38 16 F2 | 	cmp	local14, #65 wc
2a270     30 00 90 CD |  if_b	jmp	#LR__4370
2a274     19 2D 32 F9 | 	getword	local08, local11, #0
2a278     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a27c     24 00 90 3D |  if_ae	jmp	#LR__4370
2a280     1C 1E 06 F1 | 	add	local01, #28
2a284     0F 2F 02 FB | 	rdlong	local09, local01
2a288     1C 1E 86 F1 | 	sub	local01, #28
2a28c     0C 2E 06 F1 | 	add	local09, #12
2a290     17 31 C2 FA | 	rdbyte	local10, local09
2a294     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a298     1C 31 CA F7 | 	test	local10, local14 wz
2a29c     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a2a0     20 32 06 51 |  if_ne	add	local11, #32
2a2a4                 | LR__4370
2a2a4     13 39 02 F6 | 	mov	local14, local05
2a2a8     1C 20 06 F1 | 	add	local02, #28
2a2ac     10 39 02 F1 | 	add	local14, local02
2a2b0     19 33 32 F9 | 	getword	local11, local11, #0
2a2b4     1C 33 42 FC | 	wrbyte	local11, local14
2a2b8     01 28 06 F1 | 	add	local06, #1
2a2bc     01 26 06 F1 | 	add	local05, #1
2a2c0     1C 20 86 F1 | 	sub	local02, #28
2a2c4     68 FF 9F FD | 	jmp	#LR__4369
2a2c8                 | LR__4371
2a2c8                 | LR__4372
2a2c8     1C 20 06 F1 | 	add	local02, #28
2a2cc     10 27 02 F1 | 	add	local05, local02
2a2d0     13 01 48 FC | 	wrbyte	#0, local05
2a2d4     1C 1E 06 F1 | 	add	local01, #28
2a2d8     0F 25 02 FB | 	rdlong	local04, local01
2a2dc     1C 1E 86 F1 | 	sub	local01, #28
2a2e0     0C 24 06 F1 | 	add	local04, #12
2a2e4     12 37 CA FA | 	rdbyte	local13, local04 wz
2a2e8     1C 20 86 F1 | 	sub	local02, #28
2a2ec     0C 20 06 A1 |  if_e	add	local02, #12
2a2f0     10 01 48 AC |  if_e	wrbyte	#0, local02
2a2f4     0C 20 86 A1 |  if_e	sub	local02, #12
2a2f8                 | LR__4373
2a2f8     1C 1E 06 F1 | 	add	local01, #28
2a2fc     0F 35 02 FB | 	rdlong	local12, local01
2a300     0B 34 06 F1 | 	add	local12, #11
2a304     1A 25 C2 FA | 	rdbyte	local04, local12
2a308     3F 24 06 F5 | 	and	local04, #63
2a30c     08 20 06 F1 | 	add	local02, #8
2a310     10 25 42 FC | 	wrbyte	local04, local02
2a314     08 20 86 F1 | 	sub	local02, #8
2a318     0F 13 02 FB | 	rdlong	arg01, local01
2a31c     1C 12 06 F1 | 	add	arg01, #28
2a320                 | ' {
2a320                 | ' 
2a320                 | ' 	return *((DWORD*)ptr);
2a320     09 FB 01 FB | 	rdlong	result1, arg01
2a324     10 FB 61 FC | 	wrlong	result1, local02
2a328     0F 13 02 FB | 	rdlong	arg01, local01
2a32c     16 12 06 F1 | 	add	arg01, #22
2a330                 | ' {
2a330                 | ' 
2a330                 | ' 	return *((WORD*)ptr);
2a330     09 FB E1 FA | 	rdword	result1, arg01
2a334     06 20 06 F1 | 	add	local02, #6
2a338     10 FB 51 FC | 	wrword	result1, local02
2a33c     0F 13 02 FB | 	rdlong	arg01, local01
2a340     18 12 06 F1 | 	add	arg01, #24
2a344                 | ' {
2a344                 | ' 
2a344                 | ' 	return *((WORD*)ptr);
2a344     09 FB E1 FA | 	rdword	result1, arg01
2a348     02 20 86 F1 | 	sub	local02, #2
2a34c     10 FB 51 FC | 	wrword	result1, local02
2a350                 | LR__4374
2a350     A7 F0 03 F6 | 	mov	ptra, fp
2a354     B2 00 A0 FD | 	call	#popregs_
2a358                 | _fatfs_cc_get_fileinfo_ret
2a358     2D 00 64 FD | 	ret
2a35c                 | 
2a35c                 | _fatfs_cc_create_name
2a35c     0D 4A 05 F6 | 	mov	COUNT_, #13
2a360     A8 00 A0 FD | 	call	#pushregs_
2a364     34 F0 07 F1 | 	add	ptra, #52
2a368     04 4E 05 F1 | 	add	fp, #4
2a36c     A7 12 62 FC | 	wrlong	arg01, fp
2a370     04 4E 05 F1 | 	add	fp, #4
2a374     A7 14 62 FC | 	wrlong	arg02, fp
2a378     0A FB 01 FB | 	rdlong	result1, arg02
2a37c     28 4E 05 F1 | 	add	fp, #40
2a380     A7 FA 61 FC | 	wrlong	result1, fp
2a384     2C 4E 85 F1 | 	sub	fp, #44
2a388     A7 FA 01 FB | 	rdlong	result1, fp
2a38c     FD 1E 02 FB | 	rdlong	local01, result1
2a390     0C 1E 06 F1 | 	add	local01, #12
2a394     0F 21 02 FB | 	rdlong	local02, local01
2a398     14 4E 05 F1 | 	add	fp, #20
2a39c     A7 20 62 FC | 	wrlong	local02, fp
2a3a0     14 4E 05 F1 | 	add	fp, #20
2a3a4     A7 00 68 FC | 	wrlong	#0, fp
2a3a8     2C 4E 85 F1 | 	sub	fp, #44
2a3ac                 | ' 
2a3ac                 | ' 
2a3ac                 | ' 
2a3ac                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a3ac                 | ' 	for (;;) {
2a3ac                 | LR__4380
2a3ac     30 4E 05 F1 | 	add	fp, #48
2a3b0     A7 12 02 F6 | 	mov	arg01, fp
2a3b4     30 4E 85 F1 | 	sub	fp, #48
2a3b8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a3bc     1C 4E 05 F1 | 	add	fp, #28
2a3c0     A7 FA 61 FC | 	wrlong	result1, fp
2a3c4     1C 4E 85 F1 | 	sub	fp, #28
2a3c8     FF FF 7F FF 
2a3cc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a3d0     06 FA 05 A6 |  if_e	mov	result1, #6
2a3d4     74 08 90 AD |  if_e	jmp	#LR__4420
2a3d8     1C 4E 05 F1 | 	add	fp, #28
2a3dc     A7 1E 02 FB | 	rdlong	local01, fp
2a3e0     1C 4E 85 F1 | 	sub	fp, #28
2a3e4     80 00 00 FF 
2a3e8     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a3ec     3C 00 90 CD |  if_b	jmp	#LR__4381
2a3f0     18 4E 05 F1 | 	add	fp, #24
2a3f4     A7 22 02 FB | 	rdlong	local03, fp
2a3f8     14 4E 05 F1 | 	add	fp, #20
2a3fc     A7 1E 02 FB | 	rdlong	local01, fp
2a400     0F 25 02 F6 | 	mov	local04, local01
2a404     01 24 06 F1 | 	add	local04, #1
2a408     A7 24 62 FC | 	wrlong	local04, fp
2a40c     01 1E 66 F0 | 	shl	local01, #1
2a410     11 1F 02 F1 | 	add	local01, local03
2a414     10 4E 85 F1 | 	sub	fp, #16
2a418     A7 26 02 FB | 	rdlong	local05, fp
2a41c     1C 4E 85 F1 | 	sub	fp, #28
2a420     13 29 02 F6 | 	mov	local06, local05
2a424     10 28 46 F0 | 	shr	local06, #16
2a428     0F 29 52 FC | 	wrword	local06, local01
2a42c                 | LR__4381
2a42c     1C 4E 05 F1 | 	add	fp, #28
2a430     A7 1E 02 FB | 	rdlong	local01, fp
2a434     08 4E 85 F1 | 	sub	fp, #8
2a438     A7 1E 52 FC | 	wrword	local01, fp
2a43c     A7 1E E2 FA | 	rdword	local01, fp
2a440     14 4E 85 F1 | 	sub	fp, #20
2a444     20 1E 16 F2 | 	cmp	local01, #32 wc
2a448     B0 00 90 CD |  if_b	jmp	#LR__4383
2a44c     14 4E 05 F1 | 	add	fp, #20
2a450     A7 1E E2 FA | 	rdword	local01, fp
2a454     14 4E 85 F1 | 	sub	fp, #20
2a458     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a45c     14 4E 05 51 |  if_ne	add	fp, #20
2a460     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a464     14 4E 85 51 |  if_ne	sub	fp, #20
2a468     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a46c     8C 00 90 AD |  if_e	jmp	#LR__4383
2a470     14 4E 05 F1 | 	add	fp, #20
2a474     A7 12 E2 FA | 	rdword	arg01, fp
2a478     14 4E 85 F1 | 	sub	fp, #20
2a47c     80 12 16 F2 | 	cmp	arg01, #128 wc
2a480     24 00 90 3D |  if_ae	jmp	#LR__4382
2a484     81 01 00 FF 
2a488     C0 13 06 F6 | 	mov	arg01, ##@LR__5042
2a48c     14 4E 05 F1 | 	add	fp, #20
2a490     A7 14 E2 FA | 	rdword	arg02, fp
2a494     14 4E 85 F1 | 	sub	fp, #20
2a498     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a49c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a4a0     06 FA 05 56 |  if_ne	mov	result1, #6
2a4a4     A4 07 90 5D |  if_ne	jmp	#LR__4420
2a4a8                 | LR__4382
2a4a8     2C 4E 05 F1 | 	add	fp, #44
2a4ac     A7 28 02 FB | 	rdlong	local06, fp
2a4b0     2C 4E 85 F1 | 	sub	fp, #44
2a4b4     FF 28 16 F2 | 	cmp	local06, #255 wc
2a4b8     06 FA 05 36 |  if_ae	mov	result1, #6
2a4bc     8C 07 90 3D |  if_ae	jmp	#LR__4420
2a4c0     18 4E 05 F1 | 	add	fp, #24
2a4c4     A7 22 02 FB | 	rdlong	local03, fp
2a4c8     14 4E 05 F1 | 	add	fp, #20
2a4cc     A7 20 02 FB | 	rdlong	local02, fp
2a4d0     10 25 02 F6 | 	mov	local04, local02
2a4d4     01 24 06 F1 | 	add	local04, #1
2a4d8     A7 24 62 FC | 	wrlong	local04, fp
2a4dc     10 1F 02 F6 | 	mov	local01, local02
2a4e0     01 1E 66 F0 | 	shl	local01, #1
2a4e4     11 1F 02 F1 | 	add	local01, local03
2a4e8     18 4E 85 F1 | 	sub	fp, #24
2a4ec     A7 28 E2 FA | 	rdword	local06, fp
2a4f0     14 4E 85 F1 | 	sub	fp, #20
2a4f4     0F 29 52 FC | 	wrword	local06, local01
2a4f8     B0 FE 9F FD | 	jmp	#LR__4380
2a4fc                 | LR__4383
2a4fc     14 4E 05 F1 | 	add	fp, #20
2a500     A7 2A E2 FA | 	rdword	local07, fp
2a504     14 4E 85 F1 | 	sub	fp, #20
2a508     20 2A 16 F2 | 	cmp	local07, #32 wc
2a50c     10 4E 05 C1 |  if_b	add	fp, #16
2a510     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a514     10 4E 85 C1 |  if_b	sub	fp, #16
2a518     74 00 90 CD |  if_b	jmp	#LR__4388
2a51c     97 24 48 FB | 	callpa	#(@LR__4386-@LR__4384)>>2,fcache_load_ptr_
2a520                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a520                 | LR__4384
2a520     30 4E 05 F1 | 	add	fp, #48
2a524     A7 24 02 FB | 	rdlong	local04, fp
2a528     30 4E 85 F1 | 	sub	fp, #48
2a52c     12 2B C2 FA | 	rdbyte	local07, local04
2a530     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a534     18 00 90 AD |  if_e	jmp	#LR__4385
2a538     30 4E 05 F1 | 	add	fp, #48
2a53c     A7 24 02 FB | 	rdlong	local04, fp
2a540     30 4E 85 F1 | 	sub	fp, #48
2a544     12 21 C2 FA | 	rdbyte	local02, local04
2a548     5C 20 0E F2 | 	cmp	local02, #92 wz
2a54c     18 00 90 5D |  if_ne	jmp	#LR__4387
2a550                 | LR__4385
2a550     30 4E 05 F1 | 	add	fp, #48
2a554     A7 1E 02 FB | 	rdlong	local01, fp
2a558     01 1E 06 F1 | 	add	local01, #1
2a55c     A7 1E 62 FC | 	wrlong	local01, fp
2a560     30 4E 85 F1 | 	sub	fp, #48
2a564     B8 FF 9F FD | 	jmp	#LR__4384
2a568                 | LR__4386
2a568                 | LR__4387
2a568     10 4E 05 F1 | 	add	fp, #16
2a56c     A7 00 48 FC | 	wrbyte	#0, fp
2a570     20 4E 05 F1 | 	add	fp, #32
2a574     A7 28 02 FB | 	rdlong	local06, fp
2a578     30 4E 85 F1 | 	sub	fp, #48
2a57c     14 2B C2 FA | 	rdbyte	local07, local06
2a580     20 2A 16 F2 | 	cmp	local07, #32 wc
2a584     10 4E 05 C1 |  if_b	add	fp, #16
2a588     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a58c     10 4E 85 C1 |  if_b	sub	fp, #16
2a590                 | LR__4388
2a590     08 4E 05 F1 | 	add	fp, #8
2a594     A7 2A 02 FB | 	rdlong	local07, fp
2a598     28 4E 05 F1 | 	add	fp, #40
2a59c     A7 1E 02 FB | 	rdlong	local01, fp
2a5a0     30 4E 85 F1 | 	sub	fp, #48
2a5a4     15 1F 62 FC | 	wrlong	local01, local07
2a5a8     97 38 48 FB | 	callpa	#(@LR__4390-@LR__4389)>>2,fcache_load_ptr_
2a5ac                 | ' 	}
2a5ac                 | ' 	*path = p;
2a5ac                 | ' #line 2862 "ff.c"
2a5ac                 | ' 	while (di) {
2a5ac                 | LR__4389
2a5ac     2C 4E 05 F1 | 	add	fp, #44
2a5b0     A7 2A 0A FB | 	rdlong	local07, fp wz
2a5b4     2C 4E 85 F1 | 	sub	fp, #44
2a5b8     60 00 90 AD |  if_e	jmp	#LR__4391
2a5bc     18 4E 05 F1 | 	add	fp, #24
2a5c0     A7 28 02 FB | 	rdlong	local06, fp
2a5c4     14 4E 05 F1 | 	add	fp, #20
2a5c8     A7 24 02 FB | 	rdlong	local04, fp
2a5cc     01 24 86 F1 | 	sub	local04, #1
2a5d0     01 24 66 F0 | 	shl	local04, #1
2a5d4     14 25 02 F1 | 	add	local04, local06
2a5d8     12 29 E2 FA | 	rdword	local06, local04
2a5dc     18 4E 85 F1 | 	sub	fp, #24
2a5e0     A7 28 52 FC | 	wrword	local06, fp
2a5e4     A7 2A E2 FA | 	rdword	local07, fp
2a5e8     14 4E 85 F1 | 	sub	fp, #20
2a5ec     20 2A 0E F2 | 	cmp	local07, #32 wz
2a5f0     14 4E 05 51 |  if_ne	add	fp, #20
2a5f4     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a5f8     14 4E 85 51 |  if_ne	sub	fp, #20
2a5fc     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a600     18 00 90 5D |  if_ne	jmp	#LR__4391
2a604     2C 4E 05 F1 | 	add	fp, #44
2a608     A7 1E 02 FB | 	rdlong	local01, fp
2a60c     01 1E 86 F1 | 	sub	local01, #1
2a610     A7 1E 62 FC | 	wrlong	local01, fp
2a614     2C 4E 85 F1 | 	sub	fp, #44
2a618     90 FF 9F FD | 	jmp	#LR__4389
2a61c                 | LR__4390
2a61c                 | LR__4391
2a61c     18 4E 05 F1 | 	add	fp, #24
2a620     A7 2C 02 FB | 	rdlong	local08, fp
2a624     14 4E 05 F1 | 	add	fp, #20
2a628     A7 24 02 FB | 	rdlong	local04, fp
2a62c     01 24 66 F0 | 	shl	local04, #1
2a630     16 25 02 F1 | 	add	local04, local08
2a634     12 01 58 FC | 	wrword	#0, local04
2a638     A7 2A 0A FB | 	rdlong	local07, fp wz
2a63c     2C 4E 85 F1 | 	sub	fp, #44
2a640     06 FA 05 A6 |  if_e	mov	result1, #6
2a644     04 06 90 AD |  if_e	jmp	#LR__4420
2a648                 | ' 
2a648                 | ' 
2a648                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a648     28 4E 05 F1 | 	add	fp, #40
2a64c     A7 00 68 FC | 	wrlong	#0, fp
2a650     28 4E 85 F1 | 	sub	fp, #40
2a654     97 22 48 FB | 	callpa	#(@LR__4393-@LR__4392)>>2,fcache_load_ptr_
2a658                 | LR__4392
2a658     18 4E 05 F1 | 	add	fp, #24
2a65c     A7 2E 02 FB | 	rdlong	local09, fp
2a660     10 4E 05 F1 | 	add	fp, #16
2a664     A7 30 02 FB | 	rdlong	local10, fp
2a668     28 4E 85 F1 | 	sub	fp, #40
2a66c     01 30 66 F0 | 	shl	local10, #1
2a670     17 31 02 F1 | 	add	local10, local09
2a674     18 33 E2 FA | 	rdword	local11, local10
2a678     20 32 0E F2 | 	cmp	local11, #32 wz
2a67c     1C 00 90 5D |  if_ne	jmp	#LR__4394
2a680     28 4E 05 F1 | 	add	fp, #40
2a684     A7 34 02 FB | 	rdlong	local12, fp
2a688     1A 27 02 F6 | 	mov	local05, local12
2a68c     01 26 06 F1 | 	add	local05, #1
2a690     A7 26 62 FC | 	wrlong	local05, fp
2a694     28 4E 85 F1 | 	sub	fp, #40
2a698     BC FF 9F FD | 	jmp	#LR__4392
2a69c                 | LR__4393
2a69c                 | LR__4394
2a69c     28 4E 05 F1 | 	add	fp, #40
2a6a0     A7 2A 02 FB | 	rdlong	local07, fp
2a6a4     28 4E 85 F1 | 	sub	fp, #40
2a6a8     01 2A 16 F2 | 	cmp	local07, #1 wc
2a6ac     28 00 90 3D |  if_ae	jmp	#LR__4395
2a6b0     18 4E 05 F1 | 	add	fp, #24
2a6b4     A7 22 02 FB | 	rdlong	local03, fp
2a6b8     10 4E 05 F1 | 	add	fp, #16
2a6bc     A7 2E 02 FB | 	rdlong	local09, fp
2a6c0     28 4E 85 F1 | 	sub	fp, #40
2a6c4     01 2E 66 F0 | 	shl	local09, #1
2a6c8     11 2F 02 F1 | 	add	local09, local03
2a6cc     17 1F E2 FA | 	rdword	local01, local09
2a6d0     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a6d4     14 00 90 5D |  if_ne	jmp	#LR__4396
2a6d8                 | LR__4395
2a6d8     10 4E 05 F1 | 	add	fp, #16
2a6dc     A7 2A C2 FA | 	rdbyte	local07, fp
2a6e0     03 2A 46 F5 | 	or	local07, #3
2a6e4     A7 2A 42 FC | 	wrbyte	local07, fp
2a6e8     10 4E 85 F1 | 	sub	fp, #16
2a6ec                 | LR__4396
2a6ec     97 2C 48 FB | 	callpa	#(@LR__4398-@LR__4397)>>2,fcache_load_ptr_
2a6f0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a6f0                 | LR__4397
2a6f0     2C 4E 05 F1 | 	add	fp, #44
2a6f4     A7 2A 02 FB | 	rdlong	local07, fp
2a6f8     2C 4E 85 F1 | 	sub	fp, #44
2a6fc     01 2A 16 F2 | 	cmp	local07, #1 wc
2a700     44 00 90 CD |  if_b	jmp	#LR__4399
2a704     18 4E 05 F1 | 	add	fp, #24
2a708     A7 28 02 FB | 	rdlong	local06, fp
2a70c     14 4E 05 F1 | 	add	fp, #20
2a710     A7 22 02 FB | 	rdlong	local03, fp
2a714     2C 4E 85 F1 | 	sub	fp, #44
2a718     01 22 86 F1 | 	sub	local03, #1
2a71c     01 22 66 F0 | 	shl	local03, #1
2a720     14 23 02 F1 | 	add	local03, local06
2a724     11 1F E2 FA | 	rdword	local01, local03
2a728     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a72c     18 00 90 AD |  if_e	jmp	#LR__4399
2a730     2C 4E 05 F1 | 	add	fp, #44
2a734     A7 1E 02 FB | 	rdlong	local01, fp
2a738     01 1E 86 F1 | 	sub	local01, #1
2a73c     A7 1E 62 FC | 	wrlong	local01, fp
2a740     2C 4E 85 F1 | 	sub	fp, #44
2a744     A8 FF 9F FD | 	jmp	#LR__4397
2a748                 | LR__4398
2a748                 | LR__4399
2a748     04 4E 05 F1 | 	add	fp, #4
2a74c     A7 12 02 FB | 	rdlong	arg01, fp
2a750     04 4E 85 F1 | 	sub	fp, #4
2a754     20 12 06 F1 | 	add	arg01, #32
2a758     20 14 06 F6 | 	mov	arg02, #32
2a75c     0B 16 06 F6 | 	mov	arg03, #11
2a760     09 37 02 F6 | 	mov	local13, arg01
2a764     98 00 A0 FD | 	call	#\builtin_bytefill_
2a768     1B FB 01 F6 | 	mov	result1, local13
2a76c     0C 4E 05 F1 | 	add	fp, #12
2a770     A7 00 48 FC | 	wrbyte	#0, fp
2a774     A7 2A C2 FA | 	rdbyte	local07, fp
2a778     14 4E 05 F1 | 	add	fp, #20
2a77c     A7 2A 62 FC | 	wrlong	local07, fp
2a780     04 4E 05 F1 | 	add	fp, #4
2a784     A7 10 68 FC | 	wrlong	#8, fp
2a788     24 4E 85 F1 | 	sub	fp, #36
2a78c                 | ' 
2a78c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a78c                 | ' 	i = b = 0; ni = 8;
2a78c                 | ' 	for (;;) {
2a78c                 | LR__4400
2a78c     18 4E 05 F1 | 	add	fp, #24
2a790     A7 22 02 FB | 	rdlong	local03, fp
2a794     10 4E 05 F1 | 	add	fp, #16
2a798     A7 2E 02 FB | 	rdlong	local09, fp
2a79c     17 25 02 F6 | 	mov	local04, local09
2a7a0     01 24 06 F1 | 	add	local04, #1
2a7a4     A7 24 62 FC | 	wrlong	local04, fp
2a7a8     01 2E 66 F0 | 	shl	local09, #1
2a7ac     11 2F 02 F1 | 	add	local09, local03
2a7b0     17 29 E2 FA | 	rdword	local06, local09
2a7b4     14 4E 85 F1 | 	sub	fp, #20
2a7b8     A7 28 52 FC | 	wrword	local06, fp
2a7bc     A7 2A EA FA | 	rdword	local07, fp wz
2a7c0     14 4E 85 F1 | 	sub	fp, #20
2a7c4     74 03 90 AD |  if_e	jmp	#LR__4416
2a7c8     14 4E 05 F1 | 	add	fp, #20
2a7cc     A7 2A E2 FA | 	rdword	local07, fp
2a7d0     14 4E 85 F1 | 	sub	fp, #20
2a7d4     20 2A 0E F2 | 	cmp	local07, #32 wz
2a7d8     30 00 90 AD |  if_e	jmp	#LR__4401
2a7dc     14 4E 05 F1 | 	add	fp, #20
2a7e0     A7 1E E2 FA | 	rdword	local01, fp
2a7e4     14 4E 85 F1 | 	sub	fp, #20
2a7e8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a7ec     34 00 90 5D |  if_ne	jmp	#LR__4402
2a7f0     28 4E 05 F1 | 	add	fp, #40
2a7f4     A7 24 02 FB | 	rdlong	local04, fp
2a7f8     04 4E 05 F1 | 	add	fp, #4
2a7fc     A7 30 02 FB | 	rdlong	local10, fp
2a800     2C 4E 85 F1 | 	sub	fp, #44
2a804     18 25 0A F2 | 	cmp	local04, local10 wz
2a808     18 00 90 AD |  if_e	jmp	#LR__4402
2a80c                 | LR__4401
2a80c     10 4E 05 F1 | 	add	fp, #16
2a810     A7 2A C2 FA | 	rdbyte	local07, fp
2a814     03 2A 46 F5 | 	or	local07, #3
2a818     A7 2A 42 FC | 	wrbyte	local07, fp
2a81c     10 4E 85 F1 | 	sub	fp, #16
2a820                 | ' 			cf |=  0x01  |  0x02 ;
2a820                 | ' 			continue;
2a820     68 FF 9F FD | 	jmp	#LR__4400
2a824                 | LR__4402
2a824     20 4E 05 F1 | 	add	fp, #32
2a828     A7 2A 02 FB | 	rdlong	local07, fp
2a82c     04 4E 05 F1 | 	add	fp, #4
2a830     A7 1E 02 FB | 	rdlong	local01, fp
2a834     24 4E 85 F1 | 	sub	fp, #36
2a838     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a83c     1C 00 90 3D |  if_ae	jmp	#LR__4403
2a840     28 4E 05 F1 | 	add	fp, #40
2a844     A7 2C 02 FB | 	rdlong	local08, fp
2a848     04 4E 05 F1 | 	add	fp, #4
2a84c     A7 30 02 FB | 	rdlong	local10, fp
2a850     2C 4E 85 F1 | 	sub	fp, #44
2a854     18 2D 0A F2 | 	cmp	local08, local10 wz
2a858     B0 00 90 5D |  if_ne	jmp	#LR__4405
2a85c                 | LR__4403
2a85c     24 4E 05 F1 | 	add	fp, #36
2a860     A7 2A 02 FB | 	rdlong	local07, fp
2a864     24 4E 85 F1 | 	sub	fp, #36
2a868     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a86c     18 00 90 5D |  if_ne	jmp	#LR__4404
2a870     10 4E 05 F1 | 	add	fp, #16
2a874     A7 2A C2 FA | 	rdbyte	local07, fp
2a878     03 2A 46 F5 | 	or	local07, #3
2a87c     A7 2A 42 FC | 	wrbyte	local07, fp
2a880     10 4E 85 F1 | 	sub	fp, #16
2a884                 | ' 				cf |=  0x01  |  0x02 ;
2a884                 | ' 				break;
2a884     B4 02 90 FD | 	jmp	#LR__4416
2a888                 | LR__4404
2a888     28 4E 05 F1 | 	add	fp, #40
2a88c     A7 2A 02 FB | 	rdlong	local07, fp
2a890     04 4E 05 F1 | 	add	fp, #4
2a894     A7 1E 02 FB | 	rdlong	local01, fp
2a898     2C 4E 85 F1 | 	sub	fp, #44
2a89c     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a8a0     10 4E 05 51 |  if_ne	add	fp, #16
2a8a4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a8a8     03 2A 46 55 |  if_ne	or	local07, #3
2a8ac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a8b0     10 4E 85 51 |  if_ne	sub	fp, #16
2a8b4     28 4E 05 F1 | 	add	fp, #40
2a8b8     A7 2A 02 FB | 	rdlong	local07, fp
2a8bc     04 4E 05 F1 | 	add	fp, #4
2a8c0     A7 20 02 FB | 	rdlong	local02, fp
2a8c4     2C 4E 85 F1 | 	sub	fp, #44
2a8c8     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a8cc     6C 02 90 1D |  if_a	jmp	#LR__4416
2a8d0     2C 4E 05 F1 | 	add	fp, #44
2a8d4     A7 2A 02 FB | 	rdlong	local07, fp
2a8d8     04 4E 85 F1 | 	sub	fp, #4
2a8dc     A7 2A 62 FC | 	wrlong	local07, fp
2a8e0     08 4E 85 F1 | 	sub	fp, #8
2a8e4     A7 10 68 FC | 	wrlong	#8, fp
2a8e8     04 4E 05 F1 | 	add	fp, #4
2a8ec     A7 16 68 FC | 	wrlong	#11, fp
2a8f0     18 4E 85 F1 | 	sub	fp, #24
2a8f4     A7 32 C2 FA | 	rdbyte	local11, fp
2a8f8     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a8fc     02 2A 66 F0 | 	shl	local07, #2
2a900     A7 2A 42 FC | 	wrbyte	local07, fp
2a904     0C 4E 85 F1 | 	sub	fp, #12
2a908                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a908                 | ' 			continue;
2a908     80 FE 9F FD | 	jmp	#LR__4400
2a90c                 | LR__4405
2a90c     14 4E 05 F1 | 	add	fp, #20
2a910     A7 2A E2 FA | 	rdword	local07, fp
2a914     14 4E 85 F1 | 	sub	fp, #20
2a918     80 2A 16 F2 | 	cmp	local07, #128 wc
2a91c     6C 00 90 CD |  if_b	jmp	#LR__4407
2a920     10 4E 05 F1 | 	add	fp, #16
2a924     A7 2A C2 FA | 	rdbyte	local07, fp
2a928     02 2A 46 F5 | 	or	local07, #2
2a92c     A7 2A 42 FC | 	wrbyte	local07, fp
2a930     04 4E 05 F1 | 	add	fp, #4
2a934     A7 12 E2 FA | 	rdword	arg01, fp
2a938     14 4E 85 F1 | 	sub	fp, #20
2a93c     01 00 00 FF 
2a940     52 15 06 F6 | 	mov	arg02, ##850
2a944     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a948     14 4E 05 F1 | 	add	fp, #20
2a94c     A7 FA 51 FC | 	wrword	result1, fp
2a950     A7 2A E2 FA | 	rdword	local07, fp
2a954     14 4E 85 F1 | 	sub	fp, #20
2a958     80 2A CE F7 | 	test	local07, #128 wz
2a95c     2C 00 90 AD |  if_e	jmp	#LR__4406
2a960     14 4E 05 F1 | 	add	fp, #20
2a964     A7 20 E2 FA | 	rdword	local02, fp
2a968     7F 20 06 F5 | 	and	local02, #127
2a96c     01 00 00 FF 
2a970     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a974     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a978     10 2B C2 FA | 	rdbyte	local07, local02
2a97c     A7 2A 52 FC | 	wrword	local07, fp
2a980     14 4E 85 F1 | 	sub	fp, #20
2a984     01 00 00 FF 
2a988     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a98c                 | LR__4406
2a98c                 | LR__4407
2a98c     14 4E 05 F1 | 	add	fp, #20
2a990     A7 2A E2 FA | 	rdword	local07, fp
2a994     14 4E 85 F1 | 	sub	fp, #20
2a998     00 2B 16 F2 | 	cmp	local07, #256 wc
2a99c     88 00 90 CD |  if_b	jmp	#LR__4409
2a9a0     24 4E 05 F1 | 	add	fp, #36
2a9a4     A7 2A 02 FB | 	rdlong	local07, fp
2a9a8     01 2A 86 F1 | 	sub	local07, #1
2a9ac     04 4E 85 F1 | 	sub	fp, #4
2a9b0     A7 20 02 FB | 	rdlong	local02, fp
2a9b4     20 4E 85 F1 | 	sub	fp, #32
2a9b8     15 21 12 F2 | 	cmp	local02, local07 wc
2a9bc     2C 00 90 CD |  if_b	jmp	#LR__4408
2a9c0     10 4E 05 F1 | 	add	fp, #16
2a9c4     A7 32 C2 FA | 	rdbyte	local11, fp
2a9c8     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a9cc     03 2A 46 F5 | 	or	local07, #3
2a9d0     A7 2A 42 FC | 	wrbyte	local07, fp
2a9d4     14 4E 05 F1 | 	add	fp, #20
2a9d8     A7 2A 02 FB | 	rdlong	local07, fp
2a9dc     04 4E 85 F1 | 	sub	fp, #4
2a9e0     A7 2A 62 FC | 	wrlong	local07, fp
2a9e4     20 4E 85 F1 | 	sub	fp, #32
2a9e8                 | ' 				cf |=  0x01  |  0x02 ;
2a9e8                 | ' 				i = ni; continue;
2a9e8     A0 FD 9F FD | 	jmp	#LR__4400
2a9ec                 | LR__4408
2a9ec     04 4E 05 F1 | 	add	fp, #4
2a9f0     A7 2E 02 FB | 	rdlong	local09, fp
2a9f4     1C 4E 05 F1 | 	add	fp, #28
2a9f8     A7 30 02 FB | 	rdlong	local10, fp
2a9fc     18 25 02 F6 | 	mov	local04, local10
2aa00     01 24 06 F1 | 	add	local04, #1
2aa04     A7 24 62 FC | 	wrlong	local04, fp
2aa08     20 2E 06 F1 | 	add	local09, #32
2aa0c     17 31 02 F1 | 	add	local10, local09
2aa10     0C 4E 85 F1 | 	sub	fp, #12
2aa14     A7 22 E2 FA | 	rdword	local03, fp
2aa18     14 4E 85 F1 | 	sub	fp, #20
2aa1c     08 22 46 F0 | 	shr	local03, #8
2aa20     18 23 42 FC | 	wrbyte	local03, local10
2aa24     D4 00 90 FD | 	jmp	#LR__4415
2aa28                 | LR__4409
2aa28     14 4E 05 F1 | 	add	fp, #20
2aa2c     A7 2A EA FA | 	rdword	local07, fp wz
2aa30     14 4E 85 F1 | 	sub	fp, #20
2aa34     20 00 90 AD |  if_e	jmp	#LR__4410
2aa38     81 01 00 FF 
2aa3c     C9 13 06 F6 | 	mov	arg01, ##@LR__5043
2aa40     14 4E 05 F1 | 	add	fp, #20
2aa44     A7 14 E2 FA | 	rdword	arg02, fp
2aa48     14 4E 85 F1 | 	sub	fp, #20
2aa4c     48 CB BF FD | 	call	#_fatfs_cc_strchr
2aa50     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa54     20 00 90 AD |  if_e	jmp	#LR__4411
2aa58                 | LR__4410
2aa58     14 4E 05 F1 | 	add	fp, #20
2aa5c     A7 BE 58 FC | 	wrword	#95, fp
2aa60     04 4E 85 F1 | 	sub	fp, #4
2aa64     A7 2A C2 FA | 	rdbyte	local07, fp
2aa68     03 2A 46 F5 | 	or	local07, #3
2aa6c     A7 2A 42 FC | 	wrbyte	local07, fp
2aa70     10 4E 85 F1 | 	sub	fp, #16
2aa74     84 00 90 FD | 	jmp	#LR__4414
2aa78                 | LR__4411
2aa78     14 4E 05 F1 | 	add	fp, #20
2aa7c     A7 2A E2 FA | 	rdword	local07, fp
2aa80     14 4E 85 F1 | 	sub	fp, #20
2aa84     41 2A 16 F2 | 	cmp	local07, #65 wc
2aa88     24 00 90 CD |  if_b	jmp	#LR__4412
2aa8c     14 4E 05 F1 | 	add	fp, #20
2aa90     A7 1E E2 FA | 	rdword	local01, fp
2aa94     14 4E 85 F1 | 	sub	fp, #20
2aa98     5B 1E 16 F2 | 	cmp	local01, #91 wc
2aa9c     0C 4E 05 C1 |  if_b	add	fp, #12
2aaa0     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2aaa4     02 2A 46 C5 |  if_b	or	local07, #2
2aaa8     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2aaac     0C 4E 85 C1 |  if_b	sub	fp, #12
2aab0                 | LR__4412
2aab0     14 4E 05 F1 | 	add	fp, #20
2aab4     A7 2A E2 FA | 	rdword	local07, fp
2aab8     14 4E 85 F1 | 	sub	fp, #20
2aabc     61 2A 16 F2 | 	cmp	local07, #97 wc
2aac0     38 00 90 CD |  if_b	jmp	#LR__4413
2aac4     14 4E 05 F1 | 	add	fp, #20
2aac8     A7 1E E2 FA | 	rdword	local01, fp
2aacc     14 4E 85 F1 | 	sub	fp, #20
2aad0     7B 1E 16 F2 | 	cmp	local01, #123 wc
2aad4     24 00 90 3D |  if_ae	jmp	#LR__4413
2aad8     0C 4E 05 F1 | 	add	fp, #12
2aadc     A7 2A C2 FA | 	rdbyte	local07, fp
2aae0     01 2A 46 F5 | 	or	local07, #1
2aae4     A7 2A 42 FC | 	wrbyte	local07, fp
2aae8     08 4E 05 F1 | 	add	fp, #8
2aaec     A7 2A E2 FA | 	rdword	local07, fp
2aaf0     20 2A 86 F1 | 	sub	local07, #32
2aaf4     A7 2A 52 FC | 	wrword	local07, fp
2aaf8     14 4E 85 F1 | 	sub	fp, #20
2aafc                 | LR__4413
2aafc                 | LR__4414
2aafc                 | LR__4415
2aafc     04 4E 05 F1 | 	add	fp, #4
2ab00     A7 32 02 FB | 	rdlong	local11, fp
2ab04     19 2F 02 F6 | 	mov	local09, local11
2ab08     1C 4E 05 F1 | 	add	fp, #28
2ab0c     A7 20 02 FB | 	rdlong	local02, fp
2ab10     10 25 02 F6 | 	mov	local04, local02
2ab14     01 24 06 F1 | 	add	local04, #1
2ab18     A7 24 62 FC | 	wrlong	local04, fp
2ab1c     10 31 02 F6 | 	mov	local10, local02
2ab20     20 2E 06 F1 | 	add	local09, #32
2ab24     17 31 02 F1 | 	add	local10, local09
2ab28     0C 4E 85 F1 | 	sub	fp, #12
2ab2c     A7 22 E2 FA | 	rdword	local03, fp
2ab30     14 4E 85 F1 | 	sub	fp, #20
2ab34     18 23 42 FC | 	wrbyte	local03, local10
2ab38     50 FC 9F FD | 	jmp	#LR__4400
2ab3c                 | LR__4416
2ab3c     04 4E 05 F1 | 	add	fp, #4
2ab40     A7 32 02 FB | 	rdlong	local11, fp
2ab44     04 4E 85 F1 | 	sub	fp, #4
2ab48     20 32 06 F1 | 	add	local11, #32
2ab4c     19 2B C2 FA | 	rdbyte	local07, local11
2ab50     E5 2A 0E F2 | 	cmp	local07, #229 wz
2ab54     04 4E 05 A1 |  if_e	add	fp, #4
2ab58     A7 2A 02 AB |  if_e	rdlong	local07, fp
2ab5c     04 4E 85 A1 |  if_e	sub	fp, #4
2ab60     20 2A 06 A1 |  if_e	add	local07, #32
2ab64     15 0B 48 AC |  if_e	wrbyte	#5, local07
2ab68     24 4E 05 F1 | 	add	fp, #36
2ab6c     A7 2A 02 FB | 	rdlong	local07, fp
2ab70     24 4E 85 F1 | 	sub	fp, #36
2ab74     08 2A 0E F2 | 	cmp	local07, #8 wz
2ab78     0C 4E 05 A1 |  if_e	add	fp, #12
2ab7c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2ab80     02 2A 66 A0 |  if_e	shl	local07, #2
2ab84     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2ab88     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab8c     0C 4E 05 F1 | 	add	fp, #12
2ab90     A7 2A C2 FA | 	rdbyte	local07, fp
2ab94     0C 4E 85 F1 | 	sub	fp, #12
2ab98     0C 2A 06 F5 | 	and	local07, #12
2ab9c     0C 2A 0E F2 | 	cmp	local07, #12 wz
2aba0     18 00 90 AD |  if_e	jmp	#LR__4417
2aba4     0C 4E 05 F1 | 	add	fp, #12
2aba8     A7 1E C2 FA | 	rdbyte	local01, fp
2abac     0C 4E 85 F1 | 	sub	fp, #12
2abb0     03 1E 06 F5 | 	and	local01, #3
2abb4     03 1E 0E F2 | 	cmp	local01, #3 wz
2abb8     14 00 90 5D |  if_ne	jmp	#LR__4418
2abbc                 | LR__4417
2abbc     10 4E 05 F1 | 	add	fp, #16
2abc0     A7 2A C2 FA | 	rdbyte	local07, fp
2abc4     02 2A 46 F5 | 	or	local07, #2
2abc8     A7 2A 42 FC | 	wrbyte	local07, fp
2abcc     10 4E 85 F1 | 	sub	fp, #16
2abd0                 | LR__4418
2abd0     10 4E 05 F1 | 	add	fp, #16
2abd4     A7 2A C2 FA | 	rdbyte	local07, fp
2abd8     10 4E 85 F1 | 	sub	fp, #16
2abdc     02 2A CE F7 | 	test	local07, #2 wz
2abe0     48 00 90 5D |  if_ne	jmp	#LR__4419
2abe4     0C 4E 05 F1 | 	add	fp, #12
2abe8     A7 2A C2 FA | 	rdbyte	local07, fp
2abec     0C 4E 85 F1 | 	sub	fp, #12
2abf0     01 2A CE F7 | 	test	local07, #1 wz
2abf4     10 4E 05 51 |  if_ne	add	fp, #16
2abf8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2abfc     10 2A 46 55 |  if_ne	or	local07, #16
2ac00     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2ac04     10 4E 85 51 |  if_ne	sub	fp, #16
2ac08     0C 4E 05 F1 | 	add	fp, #12
2ac0c     A7 2A C2 FA | 	rdbyte	local07, fp
2ac10     0C 4E 85 F1 | 	sub	fp, #12
2ac14     04 2A CE F7 | 	test	local07, #4 wz
2ac18     10 4E 05 51 |  if_ne	add	fp, #16
2ac1c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2ac20     08 2A 46 55 |  if_ne	or	local07, #8
2ac24     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2ac28     10 4E 85 51 |  if_ne	sub	fp, #16
2ac2c                 | LR__4419
2ac2c     04 4E 05 F1 | 	add	fp, #4
2ac30     A7 2A 02 FB | 	rdlong	local07, fp
2ac34     0C 4E 05 F1 | 	add	fp, #12
2ac38     A7 1E C2 FA | 	rdbyte	local01, fp
2ac3c     10 4E 85 F1 | 	sub	fp, #16
2ac40     2B 2A 06 F1 | 	add	local07, #43
2ac44     15 1F 42 FC | 	wrbyte	local01, local07
2ac48                 | ' 	}
2ac48                 | ' 
2ac48                 | ' 	dp->fn[ 11 ] = cf;
2ac48                 | ' 
2ac48                 | ' 	return FR_OK;
2ac48     00 FA 05 F6 | 	mov	result1, #0
2ac4c                 | LR__4420
2ac4c     A7 F0 03 F6 | 	mov	ptra, fp
2ac50     B2 00 A0 FD | 	call	#popregs_
2ac54                 | _fatfs_cc_create_name_ret
2ac54     2D 00 64 FD | 	ret
2ac58                 | 
2ac58                 | _fatfs_cc_follow_path
2ac58     02 4A 05 F6 | 	mov	COUNT_, #2
2ac5c     A8 00 A0 FD | 	call	#pushregs_
2ac60     18 F0 07 F1 | 	add	ptra, #24
2ac64     04 4E 05 F1 | 	add	fp, #4
2ac68     A7 12 62 FC | 	wrlong	arg01, fp
2ac6c     04 4E 05 F1 | 	add	fp, #4
2ac70     A7 14 62 FC | 	wrlong	arg02, fp
2ac74     04 4E 85 F1 | 	sub	fp, #4
2ac78     A7 FA 01 FB | 	rdlong	result1, fp
2ac7c     FD 1E 02 FB | 	rdlong	local01, result1
2ac80     10 4E 05 F1 | 	add	fp, #16
2ac84     A7 1E 62 FC | 	wrlong	local01, fp
2ac88     14 4E 85 F1 | 	sub	fp, #20
2ac8c     97 24 48 FB | 	callpa	#(@LR__4432-@LR__4430)>>2,fcache_load_ptr_
2ac90                 | ' )
2ac90                 | ' {
2ac90                 | ' 	FRESULT res;
2ac90                 | ' 	BYTE ns;
2ac90                 | ' 	FATFS *fs = dp->obj.fs;
2ac90                 | ' #line 3034 "ff.c"
2ac90                 | ' 	{
2ac90                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ac90                 | LR__4430
2ac90     08 4E 05 F1 | 	add	fp, #8
2ac94     A7 1E 02 FB | 	rdlong	local01, fp
2ac98     08 4E 85 F1 | 	sub	fp, #8
2ac9c     0F 1F C2 FA | 	rdbyte	local01, local01
2aca0     2F 1E 0E F2 | 	cmp	local01, #47 wz
2aca4     18 00 90 AD |  if_e	jmp	#LR__4431
2aca8     08 4E 05 F1 | 	add	fp, #8
2acac     A7 1E 02 FB | 	rdlong	local01, fp
2acb0     08 4E 85 F1 | 	sub	fp, #8
2acb4     0F 1F C2 FA | 	rdbyte	local01, local01
2acb8     5C 1E 0E F2 | 	cmp	local01, #92 wz
2acbc     18 00 90 5D |  if_ne	jmp	#LR__4433
2acc0                 | LR__4431
2acc0     08 4E 05 F1 | 	add	fp, #8
2acc4     A7 1E 02 FB | 	rdlong	local01, fp
2acc8     01 1E 06 F1 | 	add	local01, #1
2accc     A7 1E 62 FC | 	wrlong	local01, fp
2acd0     08 4E 85 F1 | 	sub	fp, #8
2acd4     B8 FF 9F FD | 	jmp	#LR__4430
2acd8                 | LR__4432
2acd8                 | LR__4433
2acd8     04 4E 05 F1 | 	add	fp, #4
2acdc     A7 1E 02 FB | 	rdlong	local01, fp
2ace0     08 1E 06 F1 | 	add	local01, #8
2ace4     0F 01 68 FC | 	wrlong	#0, local01
2ace8     04 4E 05 F1 | 	add	fp, #4
2acec     A7 1E 02 FB | 	rdlong	local01, fp
2acf0     08 4E 85 F1 | 	sub	fp, #8
2acf4     0F 1F C2 FA | 	rdbyte	local01, local01
2acf8     20 1E 16 F2 | 	cmp	local01, #32 wc
2acfc     30 00 90 3D |  if_ae	jmp	#LR__4434
2ad00     04 4E 05 F1 | 	add	fp, #4
2ad04     A7 1E 02 FB | 	rdlong	local01, fp
2ad08     2B 1E 06 F1 | 	add	local01, #43
2ad0c     0F 01 49 FC | 	wrbyte	#128, local01
2ad10     A7 12 02 FB | 	rdlong	arg01, fp
2ad14     04 4E 85 F1 | 	sub	fp, #4
2ad18     00 14 06 F6 | 	mov	arg02, #0
2ad1c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ad20     0C 4E 05 F1 | 	add	fp, #12
2ad24     A7 FA 61 FC | 	wrlong	result1, fp
2ad28     0C 4E 85 F1 | 	sub	fp, #12
2ad2c     1C 01 90 FD | 	jmp	#LR__4438
2ad30                 | LR__4434
2ad30                 | ' 		for (;;) {
2ad30                 | LR__4435
2ad30     04 4E 05 F1 | 	add	fp, #4
2ad34     A7 12 02 FB | 	rdlong	arg01, fp
2ad38     04 4E 05 F1 | 	add	fp, #4
2ad3c     A7 14 02 F6 | 	mov	arg02, fp
2ad40     08 4E 85 F1 | 	sub	fp, #8
2ad44     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2ad48     0C 4E 05 F1 | 	add	fp, #12
2ad4c     A7 FA 61 FC | 	wrlong	result1, fp
2ad50     00 FA 4D F2 | 	cmps	result1, #0 wz
2ad54     0C 4E 85 F1 | 	sub	fp, #12
2ad58     F0 00 90 5D |  if_ne	jmp	#LR__4437
2ad5c     04 4E 05 F1 | 	add	fp, #4
2ad60     A7 12 02 FB | 	rdlong	arg01, fp
2ad64     04 4E 85 F1 | 	sub	fp, #4
2ad68     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2ad6c     0C 4E 05 F1 | 	add	fp, #12
2ad70     A7 FA 61 FC | 	wrlong	result1, fp
2ad74     08 4E 85 F1 | 	sub	fp, #8
2ad78     A7 1E 02 FB | 	rdlong	local01, fp
2ad7c     2B 1E 06 F1 | 	add	local01, #43
2ad80     0F 1F C2 FA | 	rdbyte	local01, local01
2ad84     0C 4E 05 F1 | 	add	fp, #12
2ad88     A7 1E 42 FC | 	wrbyte	local01, fp
2ad8c     04 4E 85 F1 | 	sub	fp, #4
2ad90     A7 1E 0A FB | 	rdlong	local01, fp wz
2ad94     0C 4E 85 F1 | 	sub	fp, #12
2ad98     34 00 90 AD |  if_e	jmp	#LR__4436
2ad9c     0C 4E 05 F1 | 	add	fp, #12
2ada0     A7 1E 02 FB | 	rdlong	local01, fp
2ada4     0C 4E 85 F1 | 	sub	fp, #12
2ada8     04 1E 0E F2 | 	cmp	local01, #4 wz
2adac     9C 00 90 5D |  if_ne	jmp	#LR__4437
2adb0     10 4E 05 F1 | 	add	fp, #16
2adb4     A7 1E C2 FA | 	rdbyte	local01, fp
2adb8     10 4E 85 F1 | 	sub	fp, #16
2adbc     04 1E CE F7 | 	test	local01, #4 wz
2adc0     0C 4E 05 A1 |  if_e	add	fp, #12
2adc4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2adc8     0C 4E 85 A1 |  if_e	sub	fp, #12
2adcc                 | ' 					}
2adcc                 | ' 				}
2adcc                 | ' 				break;
2adcc     7C 00 90 FD | 	jmp	#LR__4437
2add0                 | LR__4436
2add0     10 4E 05 F1 | 	add	fp, #16
2add4     A7 1E C2 FA | 	rdbyte	local01, fp
2add8     10 4E 85 F1 | 	sub	fp, #16
2addc     04 1E CE F7 | 	test	local01, #4 wz
2ade0     68 00 90 5D |  if_ne	jmp	#LR__4437
2ade4     04 4E 05 F1 | 	add	fp, #4
2ade8     A7 1E 02 FB | 	rdlong	local01, fp
2adec     04 4E 85 F1 | 	sub	fp, #4
2adf0     06 1E 06 F1 | 	add	local01, #6
2adf4     0F 1F C2 FA | 	rdbyte	local01, local01
2adf8     10 1E CE F7 | 	test	local01, #16 wz
2adfc     0C 4E 05 A1 |  if_e	add	fp, #12
2ae00     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ae04     0C 4E 85 A1 |  if_e	sub	fp, #12
2ae08                 | ' 				res = FR_NO_PATH; break;
2ae08     40 00 90 AD |  if_e	jmp	#LR__4437
2ae0c     04 4E 05 F1 | 	add	fp, #4
2ae10     A7 20 02 FB | 	rdlong	local02, fp
2ae14     10 1F 02 F6 | 	mov	local01, local02
2ae18     10 4E 05 F1 | 	add	fp, #16
2ae1c     A7 14 02 FB | 	rdlong	arg02, fp
2ae20     0A 13 02 F6 | 	mov	arg01, arg02
2ae24     34 14 06 F1 | 	add	arg02, #52
2ae28     14 4E 85 F1 | 	sub	fp, #20
2ae2c     10 20 06 F1 | 	add	local02, #16
2ae30     10 21 02 FB | 	rdlong	local02, local02
2ae34     FF 21 06 F5 | 	and	local02, #511
2ae38     10 15 02 F1 | 	add	arg02, local02
2ae3c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ae40     08 1E 06 F1 | 	add	local01, #8
2ae44     0F FB 61 FC | 	wrlong	result1, local01
2ae48     E4 FE 9F FD | 	jmp	#LR__4435
2ae4c                 | LR__4437
2ae4c                 | LR__4438
2ae4c                 | ' 			}
2ae4c                 | ' #line 3090 "ff.c"
2ae4c                 | ' 			{
2ae4c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ae4c                 | ' 			}
2ae4c                 | ' 		}
2ae4c                 | ' 	}
2ae4c                 | ' 
2ae4c                 | ' 	return res;
2ae4c     0C 4E 05 F1 | 	add	fp, #12
2ae50     A7 FA 01 FB | 	rdlong	result1, fp
2ae54     0C 4E 85 F1 | 	sub	fp, #12
2ae58     A7 F0 03 F6 | 	mov	ptra, fp
2ae5c     B2 00 A0 FD | 	call	#popregs_
2ae60                 | _fatfs_cc_follow_path_ret
2ae60     2D 00 64 FD | 	ret
2ae64                 | 
2ae64                 | _fatfs_cc_get_ldnumber
2ae64     01 00 66 F6 | 	neg	_var01, #1
2ae68     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ae6c     01 05 02 F6 | 	mov	_var03, _var02
2ae70     01 FA 65 A6 |  if_e	neg	result1, #1
2ae74     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ae78     97 10 48 FB | 	callpa	#(@LR__4441-@LR__4440)>>2,fcache_load_ptr_
2ae7c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ae7c                 | LR__4440
2ae7c     02 07 C2 FA | 	rdbyte	_var04, _var03
2ae80     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2ae84     20 FA 15 F2 | 	cmp	result1, #32 wc
2ae88     01 04 06 F1 | 	add	_var03, #1
2ae8c     03 09 02 36 |  if_ae	mov	_var05, _var04
2ae90     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ae94     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2ae98     E0 FF 9F 1D |  if_a	jmp	#LR__4440
2ae9c                 | LR__4441
2ae9c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2aea0     3A 06 0E F2 | 	cmp	_var04, #58 wz
2aea4     40 00 90 5D |  if_ne	jmp	#LR__4443
2aea8     01 0A 06 F6 | 	mov	_var06, #1
2aeac     01 09 C2 FA | 	rdbyte	_var05, _var02
2aeb0     30 08 16 F2 | 	cmp	_var05, #48 wc
2aeb4     1C 00 90 CD |  if_b	jmp	#LR__4442
2aeb8     01 09 C2 FA | 	rdbyte	_var05, _var02
2aebc     3A 08 16 F2 | 	cmp	_var05, #58 wc
2aec0     01 0D 02 C6 |  if_b	mov	_var07, _var02
2aec4     02 0C 06 C1 |  if_b	add	_var07, #2
2aec8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2aecc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2aed0     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2aed4                 | LR__4442
2aed4     01 0A 56 F2 | 	cmps	_var06, #1 wc
2aed8     05 01 02 C6 |  if_b	mov	_var01, _var06
2aedc     09 05 62 CC |  if_b	wrlong	_var03, arg01
2aee0                 | ' 			vol = i;
2aee0                 | ' 			*path = tt;
2aee0                 | ' 		}
2aee0                 | ' 		return vol;
2aee0     00 FB 01 F6 | 	mov	result1, _var01
2aee4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2aee8                 | LR__4443
2aee8                 | ' 	}
2aee8                 | ' #line 3170 "ff.c"
2aee8                 | ' 	vol = 0;
2aee8                 | ' 
2aee8                 | ' 	return vol;
2aee8     00 FA 05 F6 | 	mov	result1, #0
2aeec                 | _fatfs_cc_get_ldnumber_ret
2aeec     2D 00 64 FD | 	ret
2aef0                 | 
2aef0                 | _fatfs_cc_check_fs
2aef0     04 4A 05 F6 | 	mov	COUNT_, #4
2aef4     A8 00 A0 FD | 	call	#pushregs_
2aef8     09 1F 02 F6 | 	mov	local01, arg01
2aefc     03 1E 06 F1 | 	add	local01, #3
2af00     0F 01 48 FC | 	wrbyte	#0, local01
2af04     2D 1E 06 F1 | 	add	local01, #45
2af08     FF FF FF FF 
2af0c     0F FF 6B FC | 	wrlong	##-1, local01
2af10     30 1E 86 F1 | 	sub	local01, #48
2af14     0F 13 02 F6 | 	mov	arg01, local01
2af18     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2af1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2af20     04 FA 05 56 |  if_ne	mov	result1, #4
2af24     94 01 90 5D |  if_ne	jmp	#LR__4454
2af28     34 1E 06 F1 | 	add	local01, #52
2af2c     0F 13 02 F6 | 	mov	arg01, local01
2af30     FE 13 06 F1 | 	add	arg01, #510
2af34                 | ' {
2af34                 | ' 
2af34                 | ' 	return *((WORD*)ptr);
2af34     09 21 E2 FA | 	rdword	local02, arg01
2af38     0F 23 C2 FA | 	rdbyte	local03, local01
2af3c     34 1E 86 F1 | 	sub	local01, #52
2af40     11 25 E2 F8 | 	getbyte	local04, local03, #0
2af44     EB 24 0E F2 | 	cmp	local04, #235 wz
2af48     11 17 02 56 |  if_ne	mov	arg03, local03
2af4c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2af50     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2af54     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2af58     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2af5c     44 01 90 5D |  if_ne	jmp	#LR__4453
2af60     10 25 32 F9 | 	getword	local04, local02, #0
2af64     55 00 00 FF 
2af68     55 24 0E F2 | 	cmp	local04, ##43605 wz
2af6c     2C 00 90 5D |  if_ne	jmp	#LR__4450
2af70     34 1E 06 F1 | 	add	local01, #52
2af74     0F 13 02 F6 | 	mov	arg01, local01
2af78     34 1E 86 F1 | 	sub	local01, #52
2af7c     52 12 06 F1 | 	add	arg01, #82
2af80     81 01 00 FF 
2af84     D0 15 06 F6 | 	mov	arg02, ##@LR__5044
2af88     08 16 06 F6 | 	mov	arg03, #8
2af8c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2af90     00 FA 0D F2 | 	cmp	result1, #0 wz
2af94                 | ' 			return 0;
2af94     00 FA 05 A6 |  if_e	mov	result1, #0
2af98     20 01 90 AD |  if_e	jmp	#LR__4454
2af9c                 | LR__4450
2af9c     34 1E 06 F1 | 	add	local01, #52
2afa0     0F 13 02 F6 | 	mov	arg01, local01
2afa4     0B 12 06 F1 | 	add	arg01, #11
2afa8                 | ' {
2afa8                 | ' 
2afa8                 | ' 	return *((WORD*)ptr);
2afa8     09 FB E1 FA | 	rdword	result1, arg01
2afac     0D 1E 06 F1 | 	add	local01, #13
2afb0     0F 23 C2 FA | 	rdbyte	local03, local01
2afb4     41 1E 86 F1 | 	sub	local01, #65
2afb8     FD 24 32 F9 | 	getword	local04, result1, #0
2afbc     FD 14 32 F9 | 	getword	arg02, result1, #0
2afc0     01 14 86 F1 | 	sub	arg02, #1
2afc4     0A 25 CA F7 | 	test	local04, arg02 wz
2afc8     D8 00 90 5D |  if_ne	jmp	#LR__4452
2afcc     FD 14 32 F9 | 	getword	arg02, result1, #0
2afd0     01 00 00 FF 
2afd4     00 14 16 F2 | 	cmp	arg02, ##512 wc
2afd8     C8 00 90 CD |  if_b	jmp	#LR__4452
2afdc     FD 14 32 F9 | 	getword	arg02, result1, #0
2afe0     01 00 00 FF 
2afe4     01 14 16 F2 | 	cmp	arg02, ##513 wc
2afe8     B8 00 90 3D |  if_ae	jmp	#LR__4452
2afec     11 13 02 F6 | 	mov	arg01, local03
2aff0     07 12 4E F7 | 	zerox	arg01, #7 wz
2aff4     AC 00 90 AD |  if_e	jmp	#LR__4452
2aff8     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2affc     11 23 E2 F8 | 	getbyte	local03, local03, #0
2b000     01 22 86 F1 | 	sub	local03, #1
2b004     11 13 CA F7 | 	test	arg01, local03 wz
2b008     98 00 90 5D |  if_ne	jmp	#LR__4452
2b00c     34 1E 06 F1 | 	add	local01, #52
2b010     0F 13 02 F6 | 	mov	arg01, local01
2b014     34 1E 86 F1 | 	sub	local01, #52
2b018     0E 12 06 F1 | 	add	arg01, #14
2b01c                 | ' {
2b01c                 | ' 
2b01c                 | ' 	return *((WORD*)ptr);
2b01c     09 FB E9 FA | 	rdword	result1, arg01 wz
2b020     80 00 90 AD |  if_e	jmp	#LR__4452
2b024     44 1E 06 F1 | 	add	local01, #68
2b028     0F 13 C2 FA | 	rdbyte	arg01, local01
2b02c     44 1E 86 F1 | 	sub	local01, #68
2b030     01 12 86 F1 | 	sub	arg01, #1
2b034     02 12 16 F2 | 	cmp	arg01, #2 wc
2b038     68 00 90 3D |  if_ae	jmp	#LR__4452
2b03c     34 1E 06 F1 | 	add	local01, #52
2b040     0F 13 02 F6 | 	mov	arg01, local01
2b044     34 1E 86 F1 | 	sub	local01, #52
2b048     11 12 06 F1 | 	add	arg01, #17
2b04c                 | ' {
2b04c                 | ' 
2b04c                 | ' 	return *((WORD*)ptr);
2b04c     09 FB E9 FA | 	rdword	result1, arg01 wz
2b050     50 00 90 AD |  if_e	jmp	#LR__4452
2b054     34 1E 06 F1 | 	add	local01, #52
2b058     0F 13 02 F6 | 	mov	arg01, local01
2b05c     34 1E 86 F1 | 	sub	local01, #52
2b060     13 12 06 F1 | 	add	arg01, #19
2b064                 | ' {
2b064                 | ' 
2b064                 | ' 	return *((WORD*)ptr);
2b064     09 FB E1 FA | 	rdword	result1, arg01
2b068     FD 22 32 F9 | 	getword	local03, result1, #0
2b06c     80 22 16 F2 | 	cmp	local03, #128 wc
2b070     20 00 90 3D |  if_ae	jmp	#LR__4451
2b074     34 1E 06 F1 | 	add	local01, #52
2b078     0F 13 02 F6 | 	mov	arg01, local01
2b07c     34 1E 86 F1 | 	sub	local01, #52
2b080     20 12 06 F1 | 	add	arg01, #32
2b084                 | ' {
2b084                 | ' 
2b084                 | ' 	return *((DWORD*)ptr);
2b084     09 FB 01 FB | 	rdlong	result1, arg01
2b088     80 00 00 FF 
2b08c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2b090     10 00 90 CD |  if_b	jmp	#LR__4452
2b094                 | LR__4451
2b094     4A 1E 06 F1 | 	add	local01, #74
2b098                 | ' {
2b098                 | ' 
2b098                 | ' 	return *((WORD*)ptr);
2b098     0F FB E9 FA | 	rdword	result1, local01 wz
2b09c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2b09c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2b09c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2b09c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2b09c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2b09c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2b09c                 | ' 				return 0;
2b09c     00 FA 05 56 |  if_ne	mov	result1, #0
2b0a0     18 00 90 5D |  if_ne	jmp	#LR__4454
2b0a4                 | LR__4452
2b0a4                 | LR__4453
2b0a4                 | ' 		}
2b0a4                 | ' 	}
2b0a4                 | ' 	return sign == 0xAA55 ? 2 : 3;
2b0a4     10 23 32 F9 | 	getword	local03, local02, #0
2b0a8     55 00 00 FF 
2b0ac     55 22 0E F2 | 	cmp	local03, ##43605 wz
2b0b0     02 24 06 A6 |  if_e	mov	local04, #2
2b0b4     03 24 06 56 |  if_ne	mov	local04, #3
2b0b8     12 FB 01 F6 | 	mov	result1, local04
2b0bc                 | LR__4454
2b0bc     A7 F0 03 F6 | 	mov	ptra, fp
2b0c0     B2 00 A0 FD | 	call	#popregs_
2b0c4                 | _fatfs_cc_check_fs_ret
2b0c4     2D 00 64 FD | 	ret
2b0c8                 | 
2b0c8                 | _fatfs_cc_find_volume
2b0c8     05 4A 05 F6 | 	mov	COUNT_, #5
2b0cc     A8 00 A0 FD | 	call	#pushregs_
2b0d0     24 F0 07 F1 | 	add	ptra, #36
2b0d4     09 1F 02 F6 | 	mov	local01, arg01
2b0d8     0A 21 02 F6 | 	mov	local02, arg02
2b0dc     0F 13 02 F6 | 	mov	arg01, local01
2b0e0     00 14 06 F6 | 	mov	arg02, #0
2b0e4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2b0e8     02 FA 0D F2 | 	cmp	result1, #2 wz
2b0ec     0C 00 90 AD |  if_e	jmp	#LR__4460
2b0f0     03 FA 15 F2 | 	cmp	result1, #3 wc
2b0f4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2b0f8     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4468
2b0fc                 | LR__4460
2b0fc                 | ' 	for (i = 0; i < 4; i++) {
2b0fc     00 22 06 F6 | 	mov	local03, #0
2b100     97 26 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2b104                 | LR__4461
2b104     04 22 16 F2 | 	cmp	local03, #4 wc
2b108     44 00 90 3D |  if_ae	jmp	#LR__4463
2b10c     11 25 02 F6 | 	mov	local04, local03
2b110     02 24 66 F0 | 	shl	local04, #2
2b114     14 4E 05 F1 | 	add	fp, #20
2b118     A7 24 02 F1 | 	add	local04, fp
2b11c     34 1E 06 F1 | 	add	local01, #52
2b120     0F 13 02 F6 | 	mov	arg01, local01
2b124     34 1E 86 F1 | 	sub	local01, #52
2b128     BE 13 06 F1 | 	add	arg01, #446
2b12c     11 15 02 F6 | 	mov	arg02, local03
2b130     04 14 66 F0 | 	shl	arg02, #4
2b134     0A 13 02 F1 | 	add	arg01, arg02
2b138     08 12 06 F1 | 	add	arg01, #8
2b13c                 | ' {
2b13c                 | ' 
2b13c                 | ' 	return *((DWORD*)ptr);
2b13c     09 FB 01 FB | 	rdlong	result1, arg01
2b140     14 4E 85 F1 | 	sub	fp, #20
2b144     12 FB 61 FC | 	wrlong	result1, local04
2b148     01 22 06 F1 | 	add	local03, #1
2b14c     B4 FF 9F FD | 	jmp	#LR__4461
2b150                 | LR__4462
2b150                 | LR__4463
2b150     00 20 0E F2 | 	cmp	local02, #0 wz
2b154     10 25 02 56 |  if_ne	mov	local04, local02
2b158     01 24 86 51 |  if_ne	sub	local04, #1
2b15c     00 24 06 A6 |  if_e	mov	local04, #0
2b160     12 23 02 F6 | 	mov	local03, local04
2b164                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2b164                 | ' 	}
2b164                 | ' 	i = part ? part - 1 : 0;
2b164                 | ' 	do {
2b164                 | LR__4464
2b164     11 25 02 F6 | 	mov	local04, local03
2b168     02 24 66 F0 | 	shl	local04, #2
2b16c     14 4E 05 F1 | 	add	fp, #20
2b170     A7 24 02 F1 | 	add	local04, fp
2b174     12 25 0A FB | 	rdlong	local04, local04 wz
2b178     14 4E 85 F1 | 	sub	fp, #20
2b17c     28 00 90 AD |  if_e	jmp	#LR__4465
2b180     11 25 02 F6 | 	mov	local04, local03
2b184     02 24 66 F0 | 	shl	local04, #2
2b188     14 4E 05 F1 | 	add	fp, #20
2b18c     A7 24 02 F1 | 	add	local04, fp
2b190     12 15 02 FB | 	rdlong	arg02, local04
2b194     0F 13 02 F6 | 	mov	arg01, local01
2b198     14 4E 85 F1 | 	sub	fp, #20
2b19c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2b1a0     FD 24 02 F6 | 	mov	local04, result1
2b1a4     04 00 90 FD | 	jmp	#LR__4466
2b1a8                 | LR__4465
2b1a8     03 24 06 F6 | 	mov	local04, #3
2b1ac                 | LR__4466
2b1ac     12 27 02 F6 | 	mov	local05, local04
2b1b0     00 20 0E F2 | 	cmp	local02, #0 wz
2b1b4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2b1b8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4467
2b1bc     01 22 06 A1 |  if_e	add	local03, #1
2b1c0     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2b1c4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4464
2b1c8                 | LR__4467
2b1c8                 | ' 	return fmt;
2b1c8     13 FB 01 F6 | 	mov	result1, local05
2b1cc                 | LR__4468
2b1cc     A7 F0 03 F6 | 	mov	ptra, fp
2b1d0     B2 00 A0 FD | 	call	#popregs_
2b1d4                 | _fatfs_cc_find_volume_ret
2b1d4     2D 00 64 FD | 	ret
2b1d8                 | 
2b1d8                 | _fatfs_cc_mount_volume
2b1d8     0B 4A 05 F6 | 	mov	COUNT_, #11
2b1dc     A8 00 A0 FD | 	call	#pushregs_
2b1e0     0A 1F 02 F6 | 	mov	local01, arg02
2b1e4     0B 21 02 F6 | 	mov	local02, arg03
2b1e8     0F 01 68 FC | 	wrlong	#0, local01
2b1ec     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2b1f0     FD 22 02 F6 | 	mov	local03, result1
2b1f4     00 22 56 F2 | 	cmps	local03, #0 wc
2b1f8     0B FA 05 C6 |  if_b	mov	result1, #11
2b1fc     3C 05 90 CD |  if_b	jmp	#LR__4480
2b200     11 17 02 F6 | 	mov	arg03, local03
2b204     02 16 66 F0 | 	shl	arg03, #2
2b208     F2 16 02 F1 | 	add	arg03, objptr
2b20c     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b210     0C FA 05 A6 |  if_e	mov	result1, #12
2b214     24 05 90 AD |  if_e	jmp	#LR__4480
2b218     0F 25 62 FC | 	wrlong	local04, local01
2b21c     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b220     FE 20 06 F5 | 	and	local02, #254
2b224     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b228     4C 00 90 AD |  if_e	jmp	#LR__4471
2b22c     01 24 06 F1 | 	add	local04, #1
2b230     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b234     01 24 86 F1 | 	sub	local04, #1
2b238     01 FA 05 56 |  if_ne	mov	result1, #1
2b23c                 | ' 
2b23c                 | ' 	return Stat;
2b23c     01 00 00 AF 
2b240     20 E4 05 A1 |  if_e	add	objptr, ##544
2b244     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b248     01 00 00 AF 
2b24c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b250     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b254     01 16 CE F7 | 	test	arg03, #1 wz
2b258     1C 00 90 5D |  if_ne	jmp	#LR__4470
2b25c     00 20 0E F2 | 	cmp	local02, #0 wz
2b260     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b264     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b268                 | ' 				return FR_WRITE_PROTECTED;
2b268     0A FA 05 56 |  if_ne	mov	result1, #10
2b26c     CC 04 90 5D |  if_ne	jmp	#LR__4480
2b270                 | ' 			}
2b270                 | ' 			return FR_OK;
2b270     00 FA 05 F6 | 	mov	result1, #0
2b274     C4 04 90 FD | 	jmp	#LR__4480
2b278                 | LR__4470
2b278                 | LR__4471
2b278     12 01 48 FC | 	wrbyte	#0, local04
2b27c     01 24 06 F1 | 	add	local04, #1
2b280     12 23 42 FC | 	wrbyte	local03, local04
2b284     12 13 C2 FA | 	rdbyte	arg01, local04
2b288     01 24 86 F1 | 	sub	local04, #1
2b28c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b290     FD 16 02 F6 | 	mov	arg03, result1
2b294     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b298     01 26 CE F7 | 	test	local05, #1 wz
2b29c                 | ' 		return FR_NOT_READY;
2b29c     03 FA 05 56 |  if_ne	mov	result1, #3
2b2a0     98 04 90 5D |  if_ne	jmp	#LR__4480
2b2a4     00 20 0E F2 | 	cmp	local02, #0 wz
2b2a8     0B 27 02 56 |  if_ne	mov	local05, arg03
2b2ac     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b2b0     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b2b4                 | ' 		return FR_WRITE_PROTECTED;
2b2b4     0A FA 05 56 |  if_ne	mov	result1, #10
2b2b8     80 04 90 5D |  if_ne	jmp	#LR__4480
2b2bc     12 13 02 F6 | 	mov	arg01, local04
2b2c0     00 14 06 F6 | 	mov	arg02, #0
2b2c4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b2c8     FD 12 02 F6 | 	mov	arg01, result1
2b2cc     04 12 0E F2 | 	cmp	arg01, #4 wz
2b2d0     01 FA 05 A6 |  if_e	mov	result1, #1
2b2d4     64 04 90 AD |  if_e	jmp	#LR__4480
2b2d8     02 12 16 F2 | 	cmp	arg01, #2 wc
2b2dc     0D FA 05 36 |  if_ae	mov	result1, #13
2b2e0     58 04 90 3D |  if_ae	jmp	#LR__4480
2b2e4     30 24 06 F1 | 	add	local04, #48
2b2e8     12 29 02 FB | 	rdlong	local06, local04
2b2ec     04 24 06 F1 | 	add	local04, #4
2b2f0     12 13 02 F6 | 	mov	arg01, local04
2b2f4     34 24 86 F1 | 	sub	local04, #52
2b2f8     0B 12 06 F1 | 	add	arg01, #11
2b2fc                 | ' {
2b2fc                 | ' 
2b2fc                 | ' 	return *((WORD*)ptr);
2b2fc     09 FB E1 FA | 	rdword	result1, arg01
2b300     01 00 00 FF 
2b304     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b308     0D FA 05 56 |  if_ne	mov	result1, #13
2b30c     2C 04 90 5D |  if_ne	jmp	#LR__4480
2b310     34 24 06 F1 | 	add	local04, #52
2b314     12 13 02 F6 | 	mov	arg01, local04
2b318     34 24 86 F1 | 	sub	local04, #52
2b31c     16 12 06 F1 | 	add	arg01, #22
2b320                 | ' {
2b320                 | ' 
2b320                 | ' 	return *((WORD*)ptr);
2b320     09 FB E1 FA | 	rdword	result1, arg01
2b324     FD 2A 0A F6 | 	mov	local07, result1 wz
2b328     18 00 90 5D |  if_ne	jmp	#LR__4472
2b32c     34 24 06 F1 | 	add	local04, #52
2b330     12 13 02 F6 | 	mov	arg01, local04
2b334     34 24 86 F1 | 	sub	local04, #52
2b338     24 12 06 F1 | 	add	arg01, #36
2b33c                 | ' {
2b33c                 | ' 
2b33c                 | ' 	return *((DWORD*)ptr);
2b33c     09 FB 01 FB | 	rdlong	result1, arg01
2b340     FD 2A 02 F6 | 	mov	local07, result1
2b344                 | LR__4472
2b344     1C 24 06 F1 | 	add	local04, #28
2b348     12 2B 62 FC | 	wrlong	local07, local04
2b34c     28 24 06 F1 | 	add	local04, #40
2b350     12 27 C2 FA | 	rdbyte	local05, local04
2b354     42 24 86 F1 | 	sub	local04, #66
2b358     12 27 42 FC | 	wrbyte	local05, local04
2b35c     12 27 C2 FA | 	rdbyte	local05, local04
2b360     02 24 86 F1 | 	sub	local04, #2
2b364     01 26 0E F2 | 	cmp	local05, #1 wz
2b368     02 24 06 51 |  if_ne	add	local04, #2
2b36c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b370     02 24 86 51 |  if_ne	sub	local04, #2
2b374     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b378     0D FA 05 56 |  if_ne	mov	result1, #13
2b37c     BC 03 90 5D |  if_ne	jmp	#LR__4480
2b380     02 24 06 F1 | 	add	local04, #2
2b384     12 27 C2 FA | 	rdbyte	local05, local04
2b388     13 2B 02 FD | 	qmul	local07, local05
2b38c     3F 24 06 F1 | 	add	local04, #63
2b390     12 27 C2 FA | 	rdbyte	local05, local04
2b394     37 24 86 F1 | 	sub	local04, #55
2b398     12 27 52 FC | 	wrword	local05, local04
2b39c     12 27 EA FA | 	rdword	local05, local04 wz
2b3a0     0A 24 86 F1 | 	sub	local04, #10
2b3a4     18 2A 62 FD | 	getqx	local07
2b3a8     20 00 90 AD |  if_e	jmp	#LR__4473
2b3ac     0A 24 06 F1 | 	add	local04, #10
2b3b0     12 27 E2 FA | 	rdword	local05, local04
2b3b4     13 23 32 F9 | 	getword	local03, local05, #0
2b3b8     0A 24 86 F1 | 	sub	local04, #10
2b3bc     13 27 32 F9 | 	getword	local05, local05, #0
2b3c0     01 26 86 F1 | 	sub	local05, #1
2b3c4     13 23 CA F7 | 	test	local03, local05 wz
2b3c8     08 00 90 AD |  if_e	jmp	#LR__4474
2b3cc                 | LR__4473
2b3cc     0D FA 05 F6 | 	mov	result1, #13
2b3d0     68 03 90 FD | 	jmp	#LR__4480
2b3d4                 | LR__4474
2b3d4     34 24 06 F1 | 	add	local04, #52
2b3d8     12 13 02 F6 | 	mov	arg01, local04
2b3dc     11 12 06 F1 | 	add	arg01, #17
2b3e0                 | ' {
2b3e0                 | ' 
2b3e0                 | ' 	return *((WORD*)ptr);
2b3e0     09 FB E1 FA | 	rdword	result1, arg01
2b3e4     2C 24 86 F1 | 	sub	local04, #44
2b3e8     12 FB 51 FC | 	wrword	result1, local04
2b3ec     12 27 E2 FA | 	rdword	local05, local04
2b3f0     08 24 86 F1 | 	sub	local04, #8
2b3f4     13 13 52 F6 | 	abs	arg01, local05 wc
2b3f8     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b3fc     09 13 8A F6 | 	negc	arg01, arg01 wz
2b400     0D FA 05 56 |  if_ne	mov	result1, #13
2b404     34 03 90 5D |  if_ne	jmp	#LR__4480
2b408     34 24 06 F1 | 	add	local04, #52
2b40c     12 13 02 F6 | 	mov	arg01, local04
2b410     34 24 86 F1 | 	sub	local04, #52
2b414     13 12 06 F1 | 	add	arg01, #19
2b418                 | ' {
2b418                 | ' 
2b418                 | ' 	return *((WORD*)ptr);
2b418     09 FB E1 FA | 	rdword	result1, arg01
2b41c     FD 2C 0A F6 | 	mov	local08, result1 wz
2b420     34 24 06 A1 |  if_e	add	local04, #52
2b424     12 13 02 A6 |  if_e	mov	arg01, local04
2b428     34 24 86 A1 |  if_e	sub	local04, #52
2b42c     20 12 06 A1 |  if_e	add	arg01, #32
2b430                 | ' {
2b430                 | ' 
2b430                 | ' 	return *((DWORD*)ptr);
2b430     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b434     34 24 06 F1 | 	add	local04, #52
2b438     12 13 02 F6 | 	mov	arg01, local04
2b43c     34 24 86 F1 | 	sub	local04, #52
2b440     0E 12 06 F1 | 	add	arg01, #14
2b444                 | ' {
2b444                 | ' 
2b444                 | ' 	return *((WORD*)ptr);
2b444     09 FB E1 FA | 	rdword	result1, arg01
2b448     FD 12 02 F6 | 	mov	arg01, result1
2b44c     09 27 02 F6 | 	mov	local05, arg01
2b450     0F 26 4E F7 | 	zerox	local05, #15 wz
2b454     0D FA 05 A6 |  if_e	mov	result1, #13
2b458     E0 02 90 AD |  if_e	jmp	#LR__4480
2b45c     09 2F 32 F9 | 	getword	local09, arg01, #0
2b460     15 2F 02 F1 | 	add	local09, local07
2b464     08 24 06 F1 | 	add	local04, #8
2b468     12 27 E2 FA | 	rdword	local05, local04
2b46c     08 24 86 F1 | 	sub	local04, #8
2b470     13 27 52 F6 | 	abs	local05, local05 wc
2b474     04 26 46 F0 | 	shr	local05, #4
2b478     13 2F 82 F3 | 	sumc	local09, local05
2b47c     17 2D 12 F2 | 	cmp	local08, local09 wc
2b480     0D FA 05 C6 |  if_b	mov	result1, #13
2b484     B4 02 90 CD |  if_b	jmp	#LR__4480
2b488     17 2D 82 F1 | 	sub	local08, local09
2b48c     0A 24 06 F1 | 	add	local04, #10
2b490     12 27 E2 FA | 	rdword	local05, local04
2b494     13 2D 12 FD | 	qdiv	local08, local05
2b498     0A 24 86 F1 | 	sub	local04, #10
2b49c     18 26 62 FD | 	getqx	local05
2b4a0     00 26 0E F2 | 	cmp	local05, #0 wz
2b4a4     0D FA 05 A6 |  if_e	mov	result1, #13
2b4a8     90 02 90 AD |  if_e	jmp	#LR__4480
2b4ac     00 30 06 F6 | 	mov	local10, #0
2b4b0     FF FF 07 FF 
2b4b4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b4b8     03 30 06 C6 |  if_b	mov	local10, #3
2b4bc     7F 00 00 FF 
2b4c0     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b4c4     02 30 06 C6 |  if_b	mov	local10, #2
2b4c8     07 00 00 FF 
2b4cc     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b4d0     01 30 06 C6 |  if_b	mov	local10, #1
2b4d4     00 30 0E F2 | 	cmp	local10, #0 wz
2b4d8     0D FA 05 A6 |  if_e	mov	result1, #13
2b4dc     5C 02 90 AD |  if_e	jmp	#LR__4480
2b4e0     02 26 06 F1 | 	add	local05, #2
2b4e4     18 24 06 F1 | 	add	local04, #24
2b4e8     12 27 62 FC | 	wrlong	local05, local04
2b4ec     08 24 06 F1 | 	add	local04, #8
2b4f0     12 29 62 FC | 	wrlong	local06, local04
2b4f4     14 27 02 F6 | 	mov	local05, local06
2b4f8     09 13 32 F9 | 	getword	arg01, arg01, #0
2b4fc     09 27 02 F1 | 	add	local05, arg01
2b500     04 24 06 F1 | 	add	local04, #4
2b504     12 27 62 FC | 	wrlong	local05, local04
2b508     14 27 02 F6 | 	mov	local05, local06
2b50c     17 27 02 F1 | 	add	local05, local09
2b510     08 24 06 F1 | 	add	local04, #8
2b514     12 27 62 FC | 	wrlong	local05, local04
2b518     2C 24 86 F1 | 	sub	local04, #44
2b51c     03 30 0E F2 | 	cmp	local10, #3 wz
2b520     5C 00 90 5D |  if_ne	jmp	#LR__4475
2b524     34 24 06 F1 | 	add	local04, #52
2b528     12 13 02 F6 | 	mov	arg01, local04
2b52c     34 24 86 F1 | 	sub	local04, #52
2b530     2A 12 06 F1 | 	add	arg01, #42
2b534                 | ' {
2b534                 | ' 
2b534                 | ' 	return *((WORD*)ptr);
2b534     09 FB E9 FA | 	rdword	result1, arg01 wz
2b538     0D FA 05 56 |  if_ne	mov	result1, #13
2b53c     FC 01 90 5D |  if_ne	jmp	#LR__4480
2b540     08 24 06 F1 | 	add	local04, #8
2b544     12 27 EA FA | 	rdword	local05, local04 wz
2b548     08 24 86 F1 | 	sub	local04, #8
2b54c     0D FA 05 56 |  if_ne	mov	result1, #13
2b550     E8 01 90 5D |  if_ne	jmp	#LR__4480
2b554     34 24 06 F1 | 	add	local04, #52
2b558     12 13 02 F6 | 	mov	arg01, local04
2b55c     2C 12 06 F1 | 	add	arg01, #44
2b560                 | ' {
2b560                 | ' 
2b560                 | ' 	return *((DWORD*)ptr);
2b560     09 FB 01 FB | 	rdlong	result1, arg01
2b564     0C 24 86 F1 | 	sub	local04, #12
2b568     12 FB 61 FC | 	wrlong	result1, local04
2b56c     10 24 86 F1 | 	sub	local04, #16
2b570     12 33 02 FB | 	rdlong	local11, local04
2b574     18 24 86 F1 | 	sub	local04, #24
2b578     02 32 66 F0 | 	shl	local11, #2
2b57c     6C 00 90 FD | 	jmp	#LR__4477
2b580                 | LR__4475
2b580     08 24 06 F1 | 	add	local04, #8
2b584     12 27 EA FA | 	rdword	local05, local04 wz
2b588     08 24 86 F1 | 	sub	local04, #8
2b58c     0D FA 05 A6 |  if_e	mov	result1, #13
2b590     A8 01 90 AD |  if_e	jmp	#LR__4480
2b594     24 24 06 F1 | 	add	local04, #36
2b598     12 27 02 FB | 	rdlong	local05, local04
2b59c     15 27 02 F1 | 	add	local05, local07
2b5a0     04 24 06 F1 | 	add	local04, #4
2b5a4     12 27 62 FC | 	wrlong	local05, local04
2b5a8     28 24 86 F1 | 	sub	local04, #40
2b5ac     02 30 0E F2 | 	cmp	local10, #2 wz
2b5b0     18 24 06 A1 |  if_e	add	local04, #24
2b5b4     12 27 02 AB |  if_e	rdlong	local05, local04
2b5b8     18 24 86 A1 |  if_e	sub	local04, #24
2b5bc     01 26 66 A0 |  if_e	shl	local05, #1
2b5c0     24 00 90 AD |  if_e	jmp	#LR__4476
2b5c4     18 24 06 F1 | 	add	local04, #24
2b5c8     12 33 02 FB | 	rdlong	local11, local04
2b5cc     19 27 02 F6 | 	mov	local05, local11
2b5d0     01 26 66 F0 | 	shl	local05, #1
2b5d4     19 27 02 F1 | 	add	local05, local11
2b5d8     01 26 46 F0 | 	shr	local05, #1
2b5dc     18 24 86 F1 | 	sub	local04, #24
2b5e0     01 32 06 F5 | 	and	local11, #1
2b5e4     19 27 02 F1 | 	add	local05, local11
2b5e8                 | LR__4476
2b5e8     13 33 02 F6 | 	mov	local11, local05
2b5ec                 | LR__4477
2b5ec     FF 33 06 F1 | 	add	local11, #511
2b5f0     09 32 46 F0 | 	shr	local11, #9
2b5f4     1C 24 06 F1 | 	add	local04, #28
2b5f8     12 17 02 FB | 	rdlong	arg03, local04
2b5fc     1C 24 86 F1 | 	sub	local04, #28
2b600     19 17 12 F2 | 	cmp	arg03, local11 wc
2b604     0D FA 05 C6 |  if_b	mov	result1, #13
2b608     30 01 90 CD |  if_b	jmp	#LR__4480
2b60c     14 24 06 F1 | 	add	local04, #20
2b610     FF FF FF FF 
2b614     12 FF 6B FC | 	wrlong	##-1, local04
2b618     04 24 86 F1 | 	sub	local04, #4
2b61c     FF FF FF FF 
2b620     12 FF 6B FC | 	wrlong	##-1, local04
2b624     0C 24 86 F1 | 	sub	local04, #12
2b628     12 01 49 FC | 	wrbyte	#128, local04
2b62c     04 24 86 F1 | 	sub	local04, #4
2b630     03 30 0E F2 | 	cmp	local10, #3 wz
2b634     D0 00 90 5D |  if_ne	jmp	#LR__4479
2b638     34 24 06 F1 | 	add	local04, #52
2b63c     12 13 02 F6 | 	mov	arg01, local04
2b640     34 24 86 F1 | 	sub	local04, #52
2b644     30 12 06 F1 | 	add	arg01, #48
2b648                 | ' {
2b648                 | ' 
2b648                 | ' 	return *((WORD*)ptr);
2b648     09 FB E1 FA | 	rdword	result1, arg01
2b64c     FD 26 32 F9 | 	getword	local05, result1, #0
2b650     01 26 0E F2 | 	cmp	local05, #1 wz
2b654     B0 00 90 5D |  if_ne	jmp	#LR__4479
2b658     01 28 06 F1 | 	add	local06, #1
2b65c     12 13 02 F6 | 	mov	arg01, local04
2b660     14 15 02 F6 | 	mov	arg02, local06
2b664     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b668     00 FA 0D F2 | 	cmp	result1, #0 wz
2b66c     98 00 90 5D |  if_ne	jmp	#LR__4479
2b670     04 24 06 F1 | 	add	local04, #4
2b674     12 01 48 FC | 	wrbyte	#0, local04
2b678     30 24 06 F1 | 	add	local04, #48
2b67c     12 13 02 F6 | 	mov	arg01, local04
2b680     34 24 86 F1 | 	sub	local04, #52
2b684     FE 13 06 F1 | 	add	arg01, #510
2b688                 | ' {
2b688                 | ' 
2b688                 | ' 	return *((WORD*)ptr);
2b688     09 FB E1 FA | 	rdword	result1, arg01
2b68c     FD 26 32 F9 | 	getword	local05, result1, #0
2b690     55 00 00 FF 
2b694     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b698     34 24 06 A1 |  if_e	add	local04, #52
2b69c     12 13 02 A6 |  if_e	mov	arg01, local04
2b6a0     34 24 86 A1 |  if_e	sub	local04, #52
2b6a4                 | ' {
2b6a4                 | ' 
2b6a4                 | ' 	return *((DWORD*)ptr);
2b6a4     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b6a8     A9 B0 20 AF 
2b6ac     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b6b0     54 00 90 5D |  if_ne	jmp	#LR__4478
2b6b4     34 24 06 F1 | 	add	local04, #52
2b6b8     12 13 02 F6 | 	mov	arg01, local04
2b6bc     34 24 86 F1 | 	sub	local04, #52
2b6c0     E4 13 06 F1 | 	add	arg01, #484
2b6c4                 | ' {
2b6c4                 | ' 
2b6c4                 | ' 	return *((DWORD*)ptr);
2b6c4     09 FB 01 FB | 	rdlong	result1, arg01
2b6c8     B9 A0 30 FF 
2b6cc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b6d0     34 00 90 5D |  if_ne	jmp	#LR__4478
2b6d4     34 24 06 F1 | 	add	local04, #52
2b6d8     12 13 02 F6 | 	mov	arg01, local04
2b6dc     E8 13 06 F1 | 	add	arg01, #488
2b6e0                 | ' {
2b6e0                 | ' 
2b6e0                 | ' 	return *((DWORD*)ptr);
2b6e0     09 FB 01 FB | 	rdlong	result1, arg01
2b6e4     20 24 86 F1 | 	sub	local04, #32
2b6e8     12 FB 61 FC | 	wrlong	result1, local04
2b6ec     20 24 06 F1 | 	add	local04, #32
2b6f0     12 13 02 F6 | 	mov	arg01, local04
2b6f4     EC 13 06 F1 | 	add	arg01, #492
2b6f8                 | ' {
2b6f8                 | ' 
2b6f8                 | ' 	return *((DWORD*)ptr);
2b6f8     09 FB 01 FB | 	rdlong	result1, arg01
2b6fc     24 24 86 F1 | 	sub	local04, #36
2b700     12 FB 61 FC | 	wrlong	result1, local04
2b704     10 24 86 F1 | 	sub	local04, #16
2b708                 | LR__4478
2b708                 | LR__4479
2b708     12 31 42 FC | 	wrbyte	local10, local04
2b70c     04 E4 05 F1 | 	add	objptr, #4
2b710     F2 26 E2 FA | 	rdword	local05, objptr
2b714     01 26 06 F1 | 	add	local05, #1
2b718     F2 26 52 FC | 	wrword	local05, objptr
2b71c     F2 32 E2 FA | 	rdword	local11, objptr
2b720     06 24 06 F1 | 	add	local04, #6
2b724     12 33 52 FC | 	wrword	local11, local04
2b728     04 E4 05 F1 | 	add	objptr, #4
2b72c     06 24 06 F1 | 	add	local04, #6
2b730     12 E5 61 FC | 	wrlong	objptr, local04
2b734                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b734                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b734                 | ' 			{
2b734                 | ' 
2b734                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b734                 | ' 
2b734                 | ' 
2b734                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b734                 | ' 
2b734                 | ' 			}
2b734                 | ' 		}
2b734                 | ' 
2b734                 | ' 
2b734                 | ' 	}
2b734                 | ' 
2b734                 | ' 	fs->fs_type = (BYTE)fmt;
2b734                 | ' 	fs->id = ++Fsid;
2b734                 | ' 
2b734                 | ' 	fs->lfnbuf = LfnBuf;
2b734                 | ' #line 3567 "ff.c"
2b734                 | ' 	return FR_OK;
2b734     00 FA 05 F6 | 	mov	result1, #0
2b738     08 E4 85 F1 | 	sub	objptr, #8
2b73c                 | LR__4480
2b73c     A7 F0 03 F6 | 	mov	ptra, fp
2b740     B2 00 A0 FD | 	call	#popregs_
2b744                 | _fatfs_cc_mount_volume_ret
2b744     2D 00 64 FD | 	ret
2b748                 | 
2b748                 | _fatfs_cc_validate
2b748     09 01 0A F6 | 	mov	_var01, arg01 wz
2b74c     09 02 06 F6 | 	mov	_var02, #9
2b750     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b754     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b758     50 00 90 AD |  if_e	jmp	#LR__4490
2b75c     04 00 06 F1 | 	add	_var01, #4
2b760     00 07 E2 FA | 	rdword	_var04, _var01
2b764     04 00 86 F1 | 	sub	_var01, #4
2b768     00 13 02 FB | 	rdlong	arg01, _var01
2b76c     06 12 06 F1 | 	add	arg01, #6
2b770     09 FB E1 FA | 	rdword	result1, arg01
2b774     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b778     30 00 90 5D |  if_ne	jmp	#LR__4490
2b77c     00 07 02 FB | 	rdlong	_var04, _var01
2b780     01 06 06 F1 | 	add	_var04, #1
2b784     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b788     01 FA 05 56 |  if_ne	mov	result1, #1
2b78c                 | ' 
2b78c                 | ' 	return Stat;
2b78c     01 00 00 AF 
2b790     20 E4 05 A1 |  if_e	add	objptr, ##544
2b794     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b798     01 00 00 AF 
2b79c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b7a0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b7a4     01 04 CE F7 | 	test	_var03, #1 wz
2b7a8     00 02 06 A6 |  if_e	mov	_var02, #0
2b7ac                 | LR__4490
2b7ac     00 02 0E F2 | 	cmp	_var02, #0 wz
2b7b0     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b7b4     00 04 06 56 |  if_ne	mov	_var03, #0
2b7b8     0A 05 62 FC | 	wrlong	_var03, arg02
2b7bc                 | ' 			res = FR_OK;
2b7bc                 | ' 		}
2b7bc                 | ' 
2b7bc                 | ' 	}
2b7bc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b7bc                 | ' 	return res;
2b7bc     01 FB 01 F6 | 	mov	result1, _var02
2b7c0                 | _fatfs_cc_validate_ret
2b7c0     2D 00 64 FD | 	ret
2b7c4                 | 
2b7c4                 | _fatfs_cc_f_mount
2b7c4     01 4A 05 F6 | 	mov	COUNT_, #1
2b7c8     A8 00 A0 FD | 	call	#pushregs_
2b7cc     20 F0 07 F1 | 	add	ptra, #32
2b7d0     04 4E 05 F1 | 	add	fp, #4
2b7d4     A7 12 62 FC | 	wrlong	arg01, fp
2b7d8     04 4E 05 F1 | 	add	fp, #4
2b7dc     A7 14 62 FC | 	wrlong	arg02, fp
2b7e0     04 4E 05 F1 | 	add	fp, #4
2b7e4     A7 16 42 FC | 	wrbyte	arg03, fp
2b7e8     04 4E 85 F1 | 	sub	fp, #4
2b7ec     A7 16 02 FB | 	rdlong	arg03, fp
2b7f0     14 4E 05 F1 | 	add	fp, #20
2b7f4     A7 16 62 FC | 	wrlong	arg03, fp
2b7f8     A7 12 02 F6 | 	mov	arg01, fp
2b7fc     1C 4E 85 F1 | 	sub	fp, #28
2b800     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b804     14 4E 05 F1 | 	add	fp, #20
2b808     A7 FA 61 FC | 	wrlong	result1, fp
2b80c     14 4E 85 F1 | 	sub	fp, #20
2b810     00 FA 55 F2 | 	cmps	result1, #0 wc
2b814     0B FA 05 C6 |  if_b	mov	result1, #11
2b818     C0 00 90 CD |  if_b	jmp	#LR__4501
2b81c     14 4E 05 F1 | 	add	fp, #20
2b820     A7 16 02 FB | 	rdlong	arg03, fp
2b824     02 16 66 F0 | 	shl	arg03, #2
2b828     F2 16 02 F1 | 	add	arg03, objptr
2b82c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b830     04 4E 85 F1 | 	sub	fp, #4
2b834     A7 16 62 FC | 	wrlong	arg03, fp
2b838     10 4E 85 F1 | 	sub	fp, #16
2b83c     28 00 90 AD |  if_e	jmp	#LR__4500
2b840     10 4E 05 F1 | 	add	fp, #16
2b844     A7 16 02 FB | 	rdlong	arg03, fp
2b848     10 4E 85 F1 | 	sub	fp, #16
2b84c     01 16 06 F1 | 	add	arg03, #1
2b850     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b854     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b858     10 4E 05 F1 | 	add	fp, #16
2b85c     A7 16 02 FB | 	rdlong	arg03, fp
2b860     10 4E 85 F1 | 	sub	fp, #16
2b864     0B 01 48 FC | 	wrbyte	#0, arg03
2b868                 | LR__4500
2b868     04 4E 05 F1 | 	add	fp, #4
2b86c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b870     04 4E 85 F1 | 	sub	fp, #4
2b874     04 4E 05 51 |  if_ne	add	fp, #4
2b878     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b87c     04 4E 85 51 |  if_ne	sub	fp, #4
2b880     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b884     14 4E 05 F1 | 	add	fp, #20
2b888     A7 1E 02 FB | 	rdlong	local01, fp
2b88c     02 1E 66 F0 | 	shl	local01, #2
2b890     F2 1E 02 F1 | 	add	local01, objptr
2b894     10 4E 85 F1 | 	sub	fp, #16
2b898     A7 16 02 FB | 	rdlong	arg03, fp
2b89c     0F 17 62 FC | 	wrlong	arg03, local01
2b8a0     08 4E 05 F1 | 	add	fp, #8
2b8a4     A7 1E CA FA | 	rdbyte	local01, fp wz
2b8a8     0C 4E 85 F1 | 	sub	fp, #12
2b8ac     00 FA 05 A6 |  if_e	mov	result1, #0
2b8b0     28 00 90 AD |  if_e	jmp	#LR__4501
2b8b4     08 4E 05 F1 | 	add	fp, #8
2b8b8     A7 12 02 F6 | 	mov	arg01, fp
2b8bc     04 4E 85 F1 | 	sub	fp, #4
2b8c0     A7 14 02 F6 | 	mov	arg02, fp
2b8c4     04 4E 85 F1 | 	sub	fp, #4
2b8c8     00 16 06 F6 | 	mov	arg03, #0
2b8cc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b8d0     18 4E 05 F1 | 	add	fp, #24
2b8d4     A7 FA 61 FC | 	wrlong	result1, fp
2b8d8                 | ' 
2b8d8                 | ' 	res = mount_volume(&path, &fs, 0);
2b8d8                 | ' 	return res ;
2b8d8     18 4E 85 F1 | 	sub	fp, #24
2b8dc                 | LR__4501
2b8dc     A7 F0 03 F6 | 	mov	ptra, fp
2b8e0     B2 00 A0 FD | 	call	#popregs_
2b8e4                 | _fatfs_cc_f_mount_ret
2b8e4     2D 00 64 FD | 	ret
2b8e8                 | 
2b8e8                 | _fatfs_cc_f_open
2b8e8     02 4A 05 F6 | 	mov	COUNT_, #2
2b8ec     A8 00 A0 FD | 	call	#pushregs_
2b8f0     60 F0 07 F1 | 	add	ptra, #96
2b8f4     04 4E 05 F1 | 	add	fp, #4
2b8f8     A7 12 62 FC | 	wrlong	arg01, fp
2b8fc     04 4E 05 F1 | 	add	fp, #4
2b900     A7 14 62 FC | 	wrlong	arg02, fp
2b904     04 4E 05 F1 | 	add	fp, #4
2b908     A7 16 42 FC | 	wrbyte	arg03, fp
2b90c     08 4E 85 F1 | 	sub	fp, #8
2b910     A7 18 0A FB | 	rdlong	arg04, fp wz
2b914     04 4E 85 F1 | 	sub	fp, #4
2b918     09 FA 05 A6 |  if_e	mov	result1, #9
2b91c     98 06 90 AD |  if_e	jmp	#LR__4527
2b920     0C 4E 05 F1 | 	add	fp, #12
2b924     A7 18 C2 FA | 	rdbyte	arg04, fp
2b928     3F 18 06 F5 | 	and	arg04, #63
2b92c     A7 18 42 FC | 	wrbyte	arg04, fp
2b930     04 4E 85 F1 | 	sub	fp, #4
2b934     A7 12 02 F6 | 	mov	arg01, fp
2b938     3C 4E 05 F1 | 	add	fp, #60
2b93c     A7 14 02 F6 | 	mov	arg02, fp
2b940     38 4E 85 F1 | 	sub	fp, #56
2b944     A7 16 C2 FA | 	rdbyte	arg03, fp
2b948     0C 4E 85 F1 | 	sub	fp, #12
2b94c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b950     10 4E 05 F1 | 	add	fp, #16
2b954     A7 FA 61 FC | 	wrlong	result1, fp
2b958     10 4E 85 F1 | 	sub	fp, #16
2b95c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b960     2C 06 90 5D |  if_ne	jmp	#LR__4526
2b964     44 4E 05 F1 | 	add	fp, #68
2b968     A7 18 02 FB | 	rdlong	arg04, fp
2b96c     30 4E 85 F1 | 	sub	fp, #48
2b970     A7 18 62 FC | 	wrlong	arg04, fp
2b974     A7 12 02 F6 | 	mov	arg01, fp
2b978     0C 4E 85 F1 | 	sub	fp, #12
2b97c     A7 1E 02 FB | 	rdlong	local01, fp
2b980     08 4E 85 F1 | 	sub	fp, #8
2b984     0F 15 02 F6 | 	mov	arg02, local01
2b988     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b98c     10 4E 05 F1 | 	add	fp, #16
2b990     A7 FA 61 FC | 	wrlong	result1, fp
2b994     10 4E 85 F1 | 	sub	fp, #16
2b998     00 FA 0D F2 | 	cmp	result1, #0 wz
2b99c     1C 00 90 5D |  if_ne	jmp	#LR__4510
2b9a0     3F 4E 05 F1 | 	add	fp, #63
2b9a4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b9a8     3F 4E 85 F1 | 	sub	fp, #63
2b9ac     80 18 CE F7 | 	test	arg04, #128 wz
2b9b0     10 4E 05 51 |  if_ne	add	fp, #16
2b9b4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b9b8     10 4E 85 51 |  if_ne	sub	fp, #16
2b9bc                 | LR__4510
2b9bc     0C 4E 05 F1 | 	add	fp, #12
2b9c0     A7 18 C2 FA | 	rdbyte	arg04, fp
2b9c4     0C 4E 85 F1 | 	sub	fp, #12
2b9c8     1C 18 CE F7 | 	test	arg04, #28 wz
2b9cc     F0 01 90 AD |  if_e	jmp	#LR__4515
2b9d0     10 4E 05 F1 | 	add	fp, #16
2b9d4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b9d8     10 4E 85 F1 | 	sub	fp, #16
2b9dc     48 00 90 AD |  if_e	jmp	#LR__4512
2b9e0     10 4E 05 F1 | 	add	fp, #16
2b9e4     A7 18 02 FB | 	rdlong	arg04, fp
2b9e8     10 4E 85 F1 | 	sub	fp, #16
2b9ec     04 18 0E F2 | 	cmp	arg04, #4 wz
2b9f0     1C 00 90 5D |  if_ne	jmp	#LR__4511
2b9f4     14 4E 05 F1 | 	add	fp, #20
2b9f8     A7 12 02 F6 | 	mov	arg01, fp
2b9fc     14 4E 85 F1 | 	sub	fp, #20
2ba00     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2ba04     10 4E 05 F1 | 	add	fp, #16
2ba08     A7 FA 61 FC | 	wrlong	result1, fp
2ba0c     10 4E 85 F1 | 	sub	fp, #16
2ba10                 | LR__4511
2ba10     0C 4E 05 F1 | 	add	fp, #12
2ba14     A7 1E C2 FA | 	rdbyte	local01, fp
2ba18     08 1E 46 F5 | 	or	local01, #8
2ba1c     A7 1E 42 FC | 	wrbyte	local01, fp
2ba20     0C 4E 85 F1 | 	sub	fp, #12
2ba24     3C 00 90 FD | 	jmp	#LR__4514
2ba28                 | LR__4512
2ba28     1A 4E 05 F1 | 	add	fp, #26
2ba2c     A7 1E C2 FA | 	rdbyte	local01, fp
2ba30     1A 4E 85 F1 | 	sub	fp, #26
2ba34     11 1E CE F7 | 	test	local01, #17 wz
2ba38     10 4E 05 51 |  if_ne	add	fp, #16
2ba3c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ba40     10 4E 85 51 |  if_ne	sub	fp, #16
2ba44     1C 00 90 5D |  if_ne	jmp	#LR__4513
2ba48     0C 4E 05 F1 | 	add	fp, #12
2ba4c     A7 1E C2 FA | 	rdbyte	local01, fp
2ba50     0C 4E 85 F1 | 	sub	fp, #12
2ba54     04 1E CE F7 | 	test	local01, #4 wz
2ba58     10 4E 05 51 |  if_ne	add	fp, #16
2ba5c     A7 10 68 5C |  if_ne	wrlong	#8, fp
2ba60     10 4E 85 51 |  if_ne	sub	fp, #16
2ba64                 | LR__4513
2ba64                 | LR__4514
2ba64     10 4E 05 F1 | 	add	fp, #16
2ba68     A7 1E 0A FB | 	rdlong	local01, fp wz
2ba6c     10 4E 85 F1 | 	sub	fp, #16
2ba70     A8 01 90 5D |  if_ne	jmp	#LR__4518
2ba74     0C 4E 05 F1 | 	add	fp, #12
2ba78     A7 1E C2 FA | 	rdbyte	local01, fp
2ba7c     0C 4E 85 F1 | 	sub	fp, #12
2ba80     08 1E CE F7 | 	test	local01, #8 wz
2ba84     94 01 90 AD |  if_e	jmp	#LR__4518
2ba88     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2ba8c     54 4E 05 F1 | 	add	fp, #84
2ba90     A7 FA 61 FC | 	wrlong	result1, fp
2ba94     24 4E 85 F1 | 	sub	fp, #36
2ba98     A7 12 02 FB | 	rdlong	arg01, fp
2ba9c     0E 12 06 F1 | 	add	arg01, #14
2baa0     09 FB 61 FC | 	wrlong	result1, arg01
2baa4     A7 12 02 FB | 	rdlong	arg01, fp
2baa8     16 12 06 F1 | 	add	arg01, #22
2baac     24 4E 05 F1 | 	add	fp, #36
2bab0     A7 14 02 FB | 	rdlong	arg02, fp
2bab4     09 15 62 FC | 	wrlong	arg02, arg01
2bab8     10 4E 85 F1 | 	sub	fp, #16
2babc     A7 12 02 FB | 	rdlong	arg01, fp
2bac0     14 4E 85 F1 | 	sub	fp, #20
2bac4     A7 14 02 FB | 	rdlong	arg02, fp
2bac8     30 4E 85 F1 | 	sub	fp, #48
2bacc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2bad0     48 4E 05 F1 | 	add	fp, #72
2bad4     A7 FA 61 FC | 	wrlong	result1, fp
2bad8     18 4E 85 F1 | 	sub	fp, #24
2badc     A7 1E 02 FB | 	rdlong	local01, fp
2bae0     0B 1E 06 F1 | 	add	local01, #11
2bae4     0F 41 48 FC | 	wrbyte	#32, local01
2bae8     14 4E 05 F1 | 	add	fp, #20
2baec     A7 12 02 FB | 	rdlong	arg01, fp
2baf0     14 4E 85 F1 | 	sub	fp, #20
2baf4     A7 14 02 FB | 	rdlong	arg02, fp
2baf8     30 4E 85 F1 | 	sub	fp, #48
2bafc     00 16 06 F6 | 	mov	arg03, #0
2bb00     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2bb04     30 4E 05 F1 | 	add	fp, #48
2bb08     A7 12 02 FB | 	rdlong	arg01, fp
2bb0c     1C 12 06 F1 | 	add	arg01, #28
2bb10     09 01 68 FC | 	wrlong	#0, arg01
2bb14     14 4E 05 F1 | 	add	fp, #20
2bb18     A7 1E 02 FB | 	rdlong	local01, fp
2bb1c     03 1E 06 F1 | 	add	local01, #3
2bb20     0F 03 48 FC | 	wrbyte	#1, local01
2bb24     04 4E 05 F1 | 	add	fp, #4
2bb28     A7 1E 0A FB | 	rdlong	local01, fp wz
2bb2c     48 4E 85 F1 | 	sub	fp, #72
2bb30     E8 00 90 AD |  if_e	jmp	#LR__4518
2bb34     44 4E 05 F1 | 	add	fp, #68
2bb38     A7 1E 02 FB | 	rdlong	local01, fp
2bb3c     30 1E 06 F1 | 	add	local01, #48
2bb40     0F 1F 02 FB | 	rdlong	local01, local01
2bb44     14 4E 05 F1 | 	add	fp, #20
2bb48     A7 1E 62 FC | 	wrlong	local01, fp
2bb4c     44 4E 85 F1 | 	sub	fp, #68
2bb50     A7 12 02 F6 | 	mov	arg01, fp
2bb54     34 4E 05 F1 | 	add	fp, #52
2bb58     A7 14 02 FB | 	rdlong	arg02, fp
2bb5c     48 4E 85 F1 | 	sub	fp, #72
2bb60     00 16 06 F6 | 	mov	arg03, #0
2bb64     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2bb68     10 4E 05 F1 | 	add	fp, #16
2bb6c     A7 FA 61 FC | 	wrlong	result1, fp
2bb70     10 4E 85 F1 | 	sub	fp, #16
2bb74     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb78     A0 00 90 5D |  if_ne	jmp	#LR__4518
2bb7c     44 4E 05 F1 | 	add	fp, #68
2bb80     A7 12 02 FB | 	rdlong	arg01, fp
2bb84     14 4E 05 F1 | 	add	fp, #20
2bb88     A7 14 02 FB | 	rdlong	arg02, fp
2bb8c     58 4E 85 F1 | 	sub	fp, #88
2bb90     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2bb94     10 4E 05 F1 | 	add	fp, #16
2bb98     A7 FA 61 FC | 	wrlong	result1, fp
2bb9c     34 4E 05 F1 | 	add	fp, #52
2bba0     A7 18 02 FB | 	rdlong	arg04, fp
2bba4     04 4E 05 F1 | 	add	fp, #4
2bba8     A7 1E 02 FB | 	rdlong	local01, fp
2bbac     48 4E 85 F1 | 	sub	fp, #72
2bbb0     01 1E 86 F1 | 	sub	local01, #1
2bbb4     10 18 06 F1 | 	add	arg04, #16
2bbb8     0C 1F 62 FC | 	wrlong	local01, arg04
2bbbc     5C 00 90 FD | 	jmp	#LR__4518
2bbc0                 | LR__4515
2bbc0     10 4E 05 F1 | 	add	fp, #16
2bbc4     A7 18 0A FB | 	rdlong	arg04, fp wz
2bbc8     10 4E 85 F1 | 	sub	fp, #16
2bbcc     4C 00 90 5D |  if_ne	jmp	#LR__4517
2bbd0     1A 4E 05 F1 | 	add	fp, #26
2bbd4     A7 18 C2 FA | 	rdbyte	arg04, fp
2bbd8     1A 4E 85 F1 | 	sub	fp, #26
2bbdc     10 18 CE F7 | 	test	arg04, #16 wz
2bbe0     10 4E 05 51 |  if_ne	add	fp, #16
2bbe4     A7 08 68 5C |  if_ne	wrlong	#4, fp
2bbe8     10 4E 85 51 |  if_ne	sub	fp, #16
2bbec     2C 00 90 5D |  if_ne	jmp	#LR__4516
2bbf0     0C 4E 05 F1 | 	add	fp, #12
2bbf4     A7 18 C2 FA | 	rdbyte	arg04, fp
2bbf8     0C 4E 85 F1 | 	sub	fp, #12
2bbfc     02 18 CE F7 | 	test	arg04, #2 wz
2bc00     1A 4E 05 51 |  if_ne	add	fp, #26
2bc04     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2bc08     1A 4E 85 51 |  if_ne	sub	fp, #26
2bc0c     01 1E CE 57 |  if_ne	test	local01, #1 wz
2bc10     10 4E 05 51 |  if_ne	add	fp, #16
2bc14     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2bc18     10 4E 85 51 |  if_ne	sub	fp, #16
2bc1c                 | LR__4516
2bc1c                 | LR__4517
2bc1c                 | LR__4518
2bc1c     10 4E 05 F1 | 	add	fp, #16
2bc20     A7 1E 0A FB | 	rdlong	local01, fp wz
2bc24     10 4E 85 F1 | 	sub	fp, #16
2bc28     60 00 90 5D |  if_ne	jmp	#LR__4519
2bc2c     0C 4E 05 F1 | 	add	fp, #12
2bc30     A7 20 C2 FA | 	rdbyte	local02, fp
2bc34     0C 4E 85 F1 | 	sub	fp, #12
2bc38     08 20 CE F7 | 	test	local02, #8 wz
2bc3c     0C 4E 05 51 |  if_ne	add	fp, #12
2bc40     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2bc44     40 20 46 55 |  if_ne	or	local02, #64
2bc48     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2bc4c     0C 4E 85 51 |  if_ne	sub	fp, #12
2bc50     04 4E 05 F1 | 	add	fp, #4
2bc54     A7 20 02 FB | 	rdlong	local02, fp
2bc58     40 4E 05 F1 | 	add	fp, #64
2bc5c     A7 1E 02 FB | 	rdlong	local01, fp
2bc60     30 1E 06 F1 | 	add	local01, #48
2bc64     0F 1F 02 FB | 	rdlong	local01, local01
2bc68     20 20 06 F1 | 	add	local02, #32
2bc6c     10 1F 62 FC | 	wrlong	local01, local02
2bc70     40 4E 85 F1 | 	sub	fp, #64
2bc74     A7 20 02 FB | 	rdlong	local02, fp
2bc78     2C 4E 05 F1 | 	add	fp, #44
2bc7c     A7 1E 02 FB | 	rdlong	local01, fp
2bc80     30 4E 85 F1 | 	sub	fp, #48
2bc84     24 20 06 F1 | 	add	local02, #36
2bc88     10 1F 62 FC | 	wrlong	local01, local02
2bc8c                 | LR__4519
2bc8c     10 4E 05 F1 | 	add	fp, #16
2bc90     A7 20 0A FB | 	rdlong	local02, fp wz
2bc94     10 4E 85 F1 | 	sub	fp, #16
2bc98     F4 02 90 5D |  if_ne	jmp	#LR__4525
2bc9c     04 4E 05 F1 | 	add	fp, #4
2bca0     A7 20 02 FB | 	rdlong	local02, fp
2bca4     40 4E 05 F1 | 	add	fp, #64
2bca8     A7 12 02 FB | 	rdlong	arg01, fp
2bcac     14 4E 85 F1 | 	sub	fp, #20
2bcb0     A7 14 02 FB | 	rdlong	arg02, fp
2bcb4     30 4E 85 F1 | 	sub	fp, #48
2bcb8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2bcbc     08 20 06 F1 | 	add	local02, #8
2bcc0     10 FB 61 FC | 	wrlong	result1, local02
2bcc4     04 4E 05 F1 | 	add	fp, #4
2bcc8     A7 20 02 FB | 	rdlong	local02, fp
2bccc     2C 4E 05 F1 | 	add	fp, #44
2bcd0     A7 12 02 FB | 	rdlong	arg01, fp
2bcd4     1C 12 06 F1 | 	add	arg01, #28
2bcd8                 | ' {
2bcd8                 | ' 
2bcd8                 | ' 	return *((DWORD*)ptr);
2bcd8     09 FB 01 FB | 	rdlong	result1, arg01
2bcdc     0C 20 06 F1 | 	add	local02, #12
2bce0     10 FB 61 FC | 	wrlong	result1, local02
2bce4     2C 4E 85 F1 | 	sub	fp, #44
2bce8     A7 20 02 FB | 	rdlong	local02, fp
2bcec     40 4E 05 F1 | 	add	fp, #64
2bcf0     A7 1E 02 FB | 	rdlong	local01, fp
2bcf4     10 1F 62 FC | 	wrlong	local01, local02
2bcf8     40 4E 85 F1 | 	sub	fp, #64
2bcfc     A7 20 02 FB | 	rdlong	local02, fp
2bd00     40 4E 05 F1 | 	add	fp, #64
2bd04     A7 1E 02 FB | 	rdlong	local01, fp
2bd08     06 1E 06 F1 | 	add	local01, #6
2bd0c     0F 1F E2 FA | 	rdword	local01, local01
2bd10     04 20 06 F1 | 	add	local02, #4
2bd14     10 1F 52 FC | 	wrword	local01, local02
2bd18     40 4E 85 F1 | 	sub	fp, #64
2bd1c     A7 20 02 FB | 	rdlong	local02, fp
2bd20     08 4E 05 F1 | 	add	fp, #8
2bd24     A7 1E C2 FA | 	rdbyte	local01, fp
2bd28     10 20 06 F1 | 	add	local02, #16
2bd2c     10 1F 42 FC | 	wrbyte	local01, local02
2bd30     08 4E 85 F1 | 	sub	fp, #8
2bd34     A7 20 02 FB | 	rdlong	local02, fp
2bd38     11 20 06 F1 | 	add	local02, #17
2bd3c     10 01 48 FC | 	wrbyte	#0, local02
2bd40     A7 20 02 FB | 	rdlong	local02, fp
2bd44     1C 20 06 F1 | 	add	local02, #28
2bd48     10 01 68 FC | 	wrlong	#0, local02
2bd4c     A7 20 02 FB | 	rdlong	local02, fp
2bd50     14 20 06 F1 | 	add	local02, #20
2bd54     10 01 68 FC | 	wrlong	#0, local02
2bd58     A7 12 02 FB | 	rdlong	arg01, fp
2bd5c     04 4E 85 F1 | 	sub	fp, #4
2bd60     28 12 06 F1 | 	add	arg01, #40
2bd64     00 14 06 F6 | 	mov	arg02, #0
2bd68     09 16 C6 F9 | 	decod	arg03, #9
2bd6c     98 00 A0 FD | 	call	#\builtin_bytefill_
2bd70     0C 4E 05 F1 | 	add	fp, #12
2bd74     A7 20 C2 FA | 	rdbyte	local02, fp
2bd78     0C 4E 85 F1 | 	sub	fp, #12
2bd7c     20 20 CE F7 | 	test	local02, #32 wz
2bd80     0C 02 90 AD |  if_e	jmp	#LR__4524
2bd84     04 4E 05 F1 | 	add	fp, #4
2bd88     A7 1E 02 FB | 	rdlong	local01, fp
2bd8c     04 4E 85 F1 | 	sub	fp, #4
2bd90     0C 1E 06 F1 | 	add	local01, #12
2bd94     0F 21 02 FB | 	rdlong	local02, local01
2bd98     01 20 16 F2 | 	cmp	local02, #1 wc
2bd9c     F0 01 90 CD |  if_b	jmp	#LR__4524
2bda0     04 4E 05 F1 | 	add	fp, #4
2bda4     A7 1E 02 FB | 	rdlong	local01, fp
2bda8     0F 21 02 F6 | 	mov	local02, local01
2bdac     0C 1E 06 F1 | 	add	local01, #12
2bdb0     0F 1F 02 FB | 	rdlong	local01, local01
2bdb4     14 20 06 F1 | 	add	local02, #20
2bdb8     10 1F 62 FC | 	wrlong	local01, local02
2bdbc     40 4E 05 F1 | 	add	fp, #64
2bdc0     A7 20 02 FB | 	rdlong	local02, fp
2bdc4     0A 20 06 F1 | 	add	local02, #10
2bdc8     10 21 E2 FA | 	rdword	local02, local02
2bdcc     09 20 66 F0 | 	shl	local02, #9
2bdd0     08 4E 05 F1 | 	add	fp, #8
2bdd4     A7 20 62 FC | 	wrlong	local02, fp
2bdd8     48 4E 85 F1 | 	sub	fp, #72
2bddc     A7 20 02 FB | 	rdlong	local02, fp
2bde0     08 20 06 F1 | 	add	local02, #8
2bde4     10 1F 02 FB | 	rdlong	local01, local02
2bde8     4C 4E 05 F1 | 	add	fp, #76
2bdec     A7 1E 62 FC | 	wrlong	local01, fp
2bdf0                 | ' 				fp->fptr = fp->obj.objsize;
2bdf0                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bdf0                 | ' 				clst = fp->obj.sclust;
2bdf0                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bdf0     4C 4E 85 F1 | 	sub	fp, #76
2bdf4     A7 20 02 FB | 	rdlong	local02, fp
2bdf8     0C 20 06 F1 | 	add	local02, #12
2bdfc     10 1F 02 FB | 	rdlong	local01, local02
2be00     58 4E 05 F1 | 	add	fp, #88
2be04     A7 1E 62 FC | 	wrlong	local01, fp
2be08     5C 4E 85 F1 | 	sub	fp, #92
2be0c                 | LR__4520
2be0c     10 4E 05 F1 | 	add	fp, #16
2be10     A7 20 0A FB | 	rdlong	local02, fp wz
2be14     10 4E 85 F1 | 	sub	fp, #16
2be18     94 00 90 5D |  if_ne	jmp	#LR__4521
2be1c     5C 4E 05 F1 | 	add	fp, #92
2be20     A7 20 02 FB | 	rdlong	local02, fp
2be24     10 4E 85 F1 | 	sub	fp, #16
2be28     A7 1E 02 FB | 	rdlong	local01, fp
2be2c     4C 4E 85 F1 | 	sub	fp, #76
2be30     0F 21 1A F2 | 	cmp	local02, local01 wcz
2be34     78 00 90 ED |  if_be	jmp	#LR__4521
2be38     04 4E 05 F1 | 	add	fp, #4
2be3c     A7 12 02 FB | 	rdlong	arg01, fp
2be40     4C 4E 05 F1 | 	add	fp, #76
2be44     A7 14 02 FB | 	rdlong	arg02, fp
2be48     50 4E 85 F1 | 	sub	fp, #80
2be4c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2be50     50 4E 05 F1 | 	add	fp, #80
2be54     A7 FA 61 FC | 	wrlong	result1, fp
2be58     50 4E 85 F1 | 	sub	fp, #80
2be5c     02 FA 15 F2 | 	cmp	result1, #2 wc
2be60     10 4E 05 C1 |  if_b	add	fp, #16
2be64     A7 04 68 CC |  if_b	wrlong	#2, fp
2be68     10 4E 85 C1 |  if_b	sub	fp, #16
2be6c     50 4E 05 F1 | 	add	fp, #80
2be70     A7 20 02 FB | 	rdlong	local02, fp
2be74     50 4E 85 F1 | 	sub	fp, #80
2be78     FF FF 7F FF 
2be7c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2be80     10 4E 05 A1 |  if_e	add	fp, #16
2be84     A7 02 68 AC |  if_e	wrlong	#1, fp
2be88     10 4E 85 A1 |  if_e	sub	fp, #16
2be8c     5C 4E 05 F1 | 	add	fp, #92
2be90     A7 20 02 FB | 	rdlong	local02, fp
2be94     10 4E 85 F1 | 	sub	fp, #16
2be98     A7 1E 02 FB | 	rdlong	local01, fp
2be9c     0F 21 82 F1 | 	sub	local02, local01
2bea0     10 4E 05 F1 | 	add	fp, #16
2bea4     A7 20 62 FC | 	wrlong	local02, fp
2bea8     5C 4E 85 F1 | 	sub	fp, #92
2beac     5C FF 9F FD | 	jmp	#LR__4520
2beb0                 | LR__4521
2beb0     04 4E 05 F1 | 	add	fp, #4
2beb4     A7 20 02 FB | 	rdlong	local02, fp
2beb8     4C 4E 05 F1 | 	add	fp, #76
2bebc     A7 1E 02 FB | 	rdlong	local01, fp
2bec0     18 20 06 F1 | 	add	local02, #24
2bec4     10 1F 62 FC | 	wrlong	local01, local02
2bec8     40 4E 85 F1 | 	sub	fp, #64
2becc     A7 20 0A FB | 	rdlong	local02, fp wz
2bed0     10 4E 85 F1 | 	sub	fp, #16
2bed4     B8 00 90 5D |  if_ne	jmp	#LR__4523
2bed8     5C 4E 05 F1 | 	add	fp, #92
2bedc     A7 1E 02 FB | 	rdlong	local01, fp
2bee0     5C 4E 85 F1 | 	sub	fp, #92
2bee4     FF 1F CE F7 | 	test	local01, #511 wz
2bee8     A4 00 90 AD |  if_e	jmp	#LR__4523
2beec     44 4E 05 F1 | 	add	fp, #68
2bef0     A7 12 02 FB | 	rdlong	arg01, fp
2bef4     0C 4E 05 F1 | 	add	fp, #12
2bef8     A7 14 02 FB | 	rdlong	arg02, fp
2befc     50 4E 85 F1 | 	sub	fp, #80
2bf00     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bf04     58 4E 05 F1 | 	add	fp, #88
2bf08     A7 FA 61 FC | 	wrlong	result1, fp
2bf0c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bf10     58 4E 85 F1 | 	sub	fp, #88
2bf14     10 4E 05 A1 |  if_e	add	fp, #16
2bf18     A7 04 68 AC |  if_e	wrlong	#2, fp
2bf1c     10 4E 85 A1 |  if_e	sub	fp, #16
2bf20     6C 00 90 AD |  if_e	jmp	#LR__4522
2bf24     04 4E 05 F1 | 	add	fp, #4
2bf28     A7 20 02 FB | 	rdlong	local02, fp
2bf2c     54 4E 05 F1 | 	add	fp, #84
2bf30     A7 1E 02 FB | 	rdlong	local01, fp
2bf34     04 4E 05 F1 | 	add	fp, #4
2bf38     A7 18 02 FB | 	rdlong	arg04, fp
2bf3c     09 18 46 F0 | 	shr	arg04, #9
2bf40     0C 1F 02 F1 | 	add	local01, arg04
2bf44     1C 20 06 F1 | 	add	local02, #28
2bf48     10 1F 62 FC | 	wrlong	local01, local02
2bf4c     18 4E 85 F1 | 	sub	fp, #24
2bf50     A7 20 02 FB | 	rdlong	local02, fp
2bf54     01 20 06 F1 | 	add	local02, #1
2bf58     10 13 C2 FA | 	rdbyte	arg01, local02
2bf5c     40 4E 85 F1 | 	sub	fp, #64
2bf60     A7 20 02 FB | 	rdlong	local02, fp
2bf64     10 15 02 F6 | 	mov	arg02, local02
2bf68     28 14 06 F1 | 	add	arg02, #40
2bf6c     04 4E 85 F1 | 	sub	fp, #4
2bf70     1C 20 06 F1 | 	add	local02, #28
2bf74     10 17 02 FB | 	rdlong	arg03, local02
2bf78     01 18 06 F6 | 	mov	arg04, #1
2bf7c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bf80     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf84     10 4E 05 51 |  if_ne	add	fp, #16
2bf88     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bf8c     10 4E 85 51 |  if_ne	sub	fp, #16
2bf90                 | LR__4522
2bf90                 | LR__4523
2bf90                 | LR__4524
2bf90                 | LR__4525
2bf90                 | LR__4526
2bf90     10 4E 05 F1 | 	add	fp, #16
2bf94     A7 20 0A FB | 	rdlong	local02, fp wz
2bf98     10 4E 85 F1 | 	sub	fp, #16
2bf9c     04 4E 05 51 |  if_ne	add	fp, #4
2bfa0     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bfa4     04 4E 85 51 |  if_ne	sub	fp, #4
2bfa8     10 01 68 5C |  if_ne	wrlong	#0, local02
2bfac                 | ' 
2bfac                 | ' 	return res ;
2bfac     10 4E 05 F1 | 	add	fp, #16
2bfb0     A7 FA 01 FB | 	rdlong	result1, fp
2bfb4     10 4E 85 F1 | 	sub	fp, #16
2bfb8                 | LR__4527
2bfb8     A7 F0 03 F6 | 	mov	ptra, fp
2bfbc     B2 00 A0 FD | 	call	#popregs_
2bfc0                 | _fatfs_cc_f_open_ret
2bfc0     2D 00 64 FD | 	ret
2bfc4                 | 
2bfc4                 | _fatfs_cc_f_read
2bfc4     0E 4A 05 F6 | 	mov	COUNT_, #14
2bfc8     A8 00 A0 FD | 	call	#pushregs_
2bfcc     38 F0 07 F1 | 	add	ptra, #56
2bfd0     04 4E 05 F1 | 	add	fp, #4
2bfd4     A7 12 62 FC | 	wrlong	arg01, fp
2bfd8     04 4E 05 F1 | 	add	fp, #4
2bfdc     A7 14 62 FC | 	wrlong	arg02, fp
2bfe0     04 4E 05 F1 | 	add	fp, #4
2bfe4     A7 16 62 FC | 	wrlong	arg03, fp
2bfe8     04 4E 05 F1 | 	add	fp, #4
2bfec     A7 18 62 FC | 	wrlong	arg04, fp
2bff0     08 4E 85 F1 | 	sub	fp, #8
2bff4     A7 FA 01 FB | 	rdlong	result1, fp
2bff8     2C 4E 05 F1 | 	add	fp, #44
2bffc     A7 FA 61 FC | 	wrlong	result1, fp
2c000     24 4E 85 F1 | 	sub	fp, #36
2c004     A7 FA 01 FB | 	rdlong	result1, fp
2c008     FD 00 68 FC | 	wrlong	#0, result1
2c00c     0C 4E 85 F1 | 	sub	fp, #12
2c010     A7 12 02 FB | 	rdlong	arg01, fp
2c014     14 4E 05 F1 | 	add	fp, #20
2c018     A7 14 02 F6 | 	mov	arg02, fp
2c01c     18 4E 85 F1 | 	sub	fp, #24
2c020     24 F7 BF FD | 	call	#_fatfs_cc_validate
2c024     14 4E 05 F1 | 	add	fp, #20
2c028     A7 FA 61 FC | 	wrlong	result1, fp
2c02c     00 FA 4D F2 | 	cmps	result1, #0 wz
2c030     14 4E 85 F1 | 	sub	fp, #20
2c034     20 00 90 5D |  if_ne	jmp	#LR__4530
2c038     04 4E 05 F1 | 	add	fp, #4
2c03c     A7 14 02 FB | 	rdlong	arg02, fp
2c040     11 14 06 F1 | 	add	arg02, #17
2c044     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c048     10 4E 05 F1 | 	add	fp, #16
2c04c     A7 14 62 FC | 	wrlong	arg02, fp
2c050     14 4E 85 F1 | 	sub	fp, #20
2c054     10 00 90 AD |  if_e	jmp	#LR__4531
2c058                 | LR__4530
2c058     14 4E 05 F1 | 	add	fp, #20
2c05c     A7 FA 01 FB | 	rdlong	result1, fp
2c060     14 4E 85 F1 | 	sub	fp, #20
2c064     EC 05 90 FD | 	jmp	#LR__4550
2c068                 | LR__4531
2c068     04 4E 05 F1 | 	add	fp, #4
2c06c     A7 18 02 FB | 	rdlong	arg04, fp
2c070     04 4E 85 F1 | 	sub	fp, #4
2c074     10 18 06 F1 | 	add	arg04, #16
2c078     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c07c     01 18 CE F7 | 	test	arg04, #1 wz
2c080     07 FA 05 A6 |  if_e	mov	result1, #7
2c084     CC 05 90 AD |  if_e	jmp	#LR__4550
2c088     04 4E 05 F1 | 	add	fp, #4
2c08c     A7 1E 02 FB | 	rdlong	local01, fp
2c090     0F 21 02 F6 | 	mov	local02, local01
2c094     0C 20 06 F1 | 	add	local02, #12
2c098     10 23 02 FB | 	rdlong	local03, local02
2c09c     14 1E 06 F1 | 	add	local01, #20
2c0a0     0F 1F 02 FB | 	rdlong	local01, local01
2c0a4     0F 23 82 F1 | 	sub	local03, local01
2c0a8     20 4E 05 F1 | 	add	fp, #32
2c0ac     A7 22 62 FC | 	wrlong	local03, fp
2c0b0     18 4E 85 F1 | 	sub	fp, #24
2c0b4     A7 24 02 FB | 	rdlong	local04, fp
2c0b8     0C 4E 85 F1 | 	sub	fp, #12
2c0bc     11 25 1A F2 | 	cmp	local04, local03 wcz
2c0c0     24 4E 05 11 |  if_a	add	fp, #36
2c0c4     A7 24 02 1B |  if_a	rdlong	local04, fp
2c0c8     18 4E 85 11 |  if_a	sub	fp, #24
2c0cc     A7 24 62 1C |  if_a	wrlong	local04, fp
2c0d0     0C 4E 85 11 |  if_a	sub	fp, #12
2c0d4                 | ' 
2c0d4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2c0d4                 | LR__4532
2c0d4     0C 4E 05 F1 | 	add	fp, #12
2c0d8     A7 20 02 FB | 	rdlong	local02, fp
2c0dc     0C 4E 85 F1 | 	sub	fp, #12
2c0e0     10 25 02 F6 | 	mov	local04, local02
2c0e4     01 24 16 F2 | 	cmp	local04, #1 wc
2c0e8     64 05 90 CD |  if_b	jmp	#LR__4549
2c0ec     04 4E 05 F1 | 	add	fp, #4
2c0f0     A7 22 02 FB | 	rdlong	local03, fp
2c0f4     04 4E 85 F1 | 	sub	fp, #4
2c0f8     14 22 06 F1 | 	add	local03, #20
2c0fc     11 23 02 FB | 	rdlong	local03, local03
2c100     FF 23 CE F7 | 	test	local03, #511 wz
2c104     3C 04 90 5D |  if_ne	jmp	#LR__4547
2c108     04 4E 05 F1 | 	add	fp, #4
2c10c     A7 1E 02 FB | 	rdlong	local01, fp
2c110     14 1E 06 F1 | 	add	local01, #20
2c114     0F 23 02 FB | 	rdlong	local03, local01
2c118     09 22 46 F0 | 	shr	local03, #9
2c11c     14 4E 05 F1 | 	add	fp, #20
2c120     A7 26 02 FB | 	rdlong	local05, fp
2c124     13 29 02 F6 | 	mov	local06, local05
2c128     0A 28 06 F1 | 	add	local06, #10
2c12c     14 2B E2 FA | 	rdword	local07, local06
2c130     0A 28 86 F1 | 	sub	local06, #10
2c134     15 2D 32 F9 | 	getword	local08, local07, #0
2c138     01 2C 86 F1 | 	sub	local08, #1
2c13c     16 23 0A F5 | 	and	local03, local08 wz
2c140     18 4E 05 F1 | 	add	fp, #24
2c144     A7 22 62 FC | 	wrlong	local03, fp
2c148     30 4E 85 F1 | 	sub	fp, #48
2c14c     E0 00 90 5D |  if_ne	jmp	#LR__4537
2c150     04 4E 05 F1 | 	add	fp, #4
2c154     A7 22 02 FB | 	rdlong	local03, fp
2c158     04 4E 85 F1 | 	sub	fp, #4
2c15c     14 22 06 F1 | 	add	local03, #20
2c160     11 23 0A FB | 	rdlong	local03, local03 wz
2c164     20 00 90 5D |  if_ne	jmp	#LR__4533
2c168     04 4E 05 F1 | 	add	fp, #4
2c16c     A7 22 02 FB | 	rdlong	local03, fp
2c170     08 22 06 F1 | 	add	local03, #8
2c174     11 23 02 FB | 	rdlong	local03, local03
2c178     18 4E 05 F1 | 	add	fp, #24
2c17c     A7 22 62 FC | 	wrlong	local03, fp
2c180     1C 4E 85 F1 | 	sub	fp, #28
2c184     28 00 90 FD | 	jmp	#LR__4534
2c188                 | LR__4533
2c188     04 4E 05 F1 | 	add	fp, #4
2c18c     A7 2C 02 FB | 	rdlong	local08, fp
2c190     16 13 02 F6 | 	mov	arg01, local08
2c194     04 4E 85 F1 | 	sub	fp, #4
2c198     18 2C 06 F1 | 	add	local08, #24
2c19c     16 15 02 FB | 	rdlong	arg02, local08
2c1a0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2c1a4     1C 4E 05 F1 | 	add	fp, #28
2c1a8     A7 FA 61 FC | 	wrlong	result1, fp
2c1ac     1C 4E 85 F1 | 	sub	fp, #28
2c1b0                 | LR__4534
2c1b0     1C 4E 05 F1 | 	add	fp, #28
2c1b4     A7 22 02 FB | 	rdlong	local03, fp
2c1b8     1C 4E 85 F1 | 	sub	fp, #28
2c1bc     02 22 16 F2 | 	cmp	local03, #2 wc
2c1c0     1C 00 90 3D |  if_ae	jmp	#LR__4535
2c1c4     04 4E 05 F1 | 	add	fp, #4
2c1c8     A7 22 02 FB | 	rdlong	local03, fp
2c1cc     04 4E 85 F1 | 	sub	fp, #4
2c1d0     11 22 06 F1 | 	add	local03, #17
2c1d4     11 05 48 FC | 	wrbyte	#2, local03
2c1d8     02 FA 05 F6 | 	mov	result1, #2
2c1dc     74 04 90 FD | 	jmp	#LR__4550
2c1e0                 | LR__4535
2c1e0     1C 4E 05 F1 | 	add	fp, #28
2c1e4     A7 22 02 FB | 	rdlong	local03, fp
2c1e8     1C 4E 85 F1 | 	sub	fp, #28
2c1ec     FF FF 7F FF 
2c1f0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2c1f4     1C 00 90 5D |  if_ne	jmp	#LR__4536
2c1f8     04 4E 05 F1 | 	add	fp, #4
2c1fc     A7 22 02 FB | 	rdlong	local03, fp
2c200     04 4E 85 F1 | 	sub	fp, #4
2c204     11 22 06 F1 | 	add	local03, #17
2c208     11 03 48 FC | 	wrbyte	#1, local03
2c20c     01 FA 05 F6 | 	mov	result1, #1
2c210     40 04 90 FD | 	jmp	#LR__4550
2c214                 | LR__4536
2c214     04 4E 05 F1 | 	add	fp, #4
2c218     A7 22 02 FB | 	rdlong	local03, fp
2c21c     18 4E 05 F1 | 	add	fp, #24
2c220     A7 2C 02 FB | 	rdlong	local08, fp
2c224     1C 4E 85 F1 | 	sub	fp, #28
2c228     18 22 06 F1 | 	add	local03, #24
2c22c     11 2D 62 FC | 	wrlong	local08, local03
2c230                 | LR__4537
2c230     18 4E 05 F1 | 	add	fp, #24
2c234     A7 12 02 FB | 	rdlong	arg01, fp
2c238     14 4E 85 F1 | 	sub	fp, #20
2c23c     A7 22 02 FB | 	rdlong	local03, fp
2c240     04 4E 85 F1 | 	sub	fp, #4
2c244     18 22 06 F1 | 	add	local03, #24
2c248     11 15 02 FB | 	rdlong	arg02, local03
2c24c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c250     20 4E 05 F1 | 	add	fp, #32
2c254     A7 FA 61 FC | 	wrlong	result1, fp
2c258     20 4E 85 F1 | 	sub	fp, #32
2c25c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c260     1C 00 90 5D |  if_ne	jmp	#LR__4538
2c264     04 4E 05 F1 | 	add	fp, #4
2c268     A7 22 02 FB | 	rdlong	local03, fp
2c26c     04 4E 85 F1 | 	sub	fp, #4
2c270     11 22 06 F1 | 	add	local03, #17
2c274     11 05 48 FC | 	wrbyte	#2, local03
2c278     02 FA 05 F6 | 	mov	result1, #2
2c27c     D4 03 90 FD | 	jmp	#LR__4550
2c280                 | LR__4538
2c280     20 4E 05 F1 | 	add	fp, #32
2c284     A7 22 02 FB | 	rdlong	local03, fp
2c288     10 4E 05 F1 | 	add	fp, #16
2c28c     A7 2C 02 FB | 	rdlong	local08, fp
2c290     16 23 02 F1 | 	add	local03, local08
2c294     10 4E 85 F1 | 	sub	fp, #16
2c298     A7 22 62 FC | 	wrlong	local03, fp
2c29c     14 4E 85 F1 | 	sub	fp, #20
2c2a0     A7 22 02 FB | 	rdlong	local03, fp
2c2a4     09 22 46 F0 | 	shr	local03, #9
2c2a8     20 4E 05 F1 | 	add	fp, #32
2c2ac     A7 22 62 FC | 	wrlong	local03, fp
2c2b0     2C 4E 85 F1 | 	sub	fp, #44
2c2b4     01 22 16 F2 | 	cmp	local03, #1 wc
2c2b8     5C 01 90 CD |  if_b	jmp	#LR__4542
2c2bc     30 4E 05 F1 | 	add	fp, #48
2c2c0     A7 22 02 FB | 	rdlong	local03, fp
2c2c4     04 4E 85 F1 | 	sub	fp, #4
2c2c8     A7 2C 02 FB | 	rdlong	local08, fp
2c2cc     16 23 02 F1 | 	add	local03, local08
2c2d0     14 4E 85 F1 | 	sub	fp, #20
2c2d4     A7 2C 02 FB | 	rdlong	local08, fp
2c2d8     18 4E 85 F1 | 	sub	fp, #24
2c2dc     0A 2C 06 F1 | 	add	local08, #10
2c2e0     16 2D E2 FA | 	rdword	local08, local08
2c2e4     16 23 1A F2 | 	cmp	local03, local08 wcz
2c2e8     28 00 90 ED |  if_be	jmp	#LR__4539
2c2ec     18 4E 05 F1 | 	add	fp, #24
2c2f0     A7 1E 02 FB | 	rdlong	local01, fp
2c2f4     0A 1E 06 F1 | 	add	local01, #10
2c2f8     0F 23 E2 FA | 	rdword	local03, local01
2c2fc     18 4E 05 F1 | 	add	fp, #24
2c300     A7 2C 02 FB | 	rdlong	local08, fp
2c304     16 23 82 F1 | 	sub	local03, local08
2c308     04 4E 85 F1 | 	sub	fp, #4
2c30c     A7 22 62 FC | 	wrlong	local03, fp
2c310     2C 4E 85 F1 | 	sub	fp, #44
2c314                 | LR__4539
2c314     18 4E 05 F1 | 	add	fp, #24
2c318     A7 1E 02 FB | 	rdlong	local01, fp
2c31c     01 1E 06 F1 | 	add	local01, #1
2c320     0F 13 C2 FA | 	rdbyte	arg01, local01
2c324     1C 4E 05 F1 | 	add	fp, #28
2c328     A7 14 02 FB | 	rdlong	arg02, fp
2c32c     14 4E 85 F1 | 	sub	fp, #20
2c330     A7 16 02 FB | 	rdlong	arg03, fp
2c334     0C 4E 05 F1 | 	add	fp, #12
2c338     A7 18 02 FB | 	rdlong	arg04, fp
2c33c     2C 4E 85 F1 | 	sub	fp, #44
2c340     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c344     00 FA 0D F2 | 	cmp	result1, #0 wz
2c348     1C 00 90 AD |  if_e	jmp	#LR__4540
2c34c     04 4E 05 F1 | 	add	fp, #4
2c350     A7 22 02 FB | 	rdlong	local03, fp
2c354     04 4E 85 F1 | 	sub	fp, #4
2c358     11 22 06 F1 | 	add	local03, #17
2c35c     11 03 48 FC | 	wrbyte	#1, local03
2c360     01 FA 05 F6 | 	mov	result1, #1
2c364     EC 02 90 FD | 	jmp	#LR__4550
2c368                 | LR__4540
2c368     04 4E 05 F1 | 	add	fp, #4
2c36c     A7 1E 02 FB | 	rdlong	local01, fp
2c370     04 4E 85 F1 | 	sub	fp, #4
2c374     10 1E 06 F1 | 	add	local01, #16
2c378     0F 23 C2 FA | 	rdbyte	local03, local01
2c37c     80 22 CE F7 | 	test	local03, #128 wz
2c380     78 00 90 AD |  if_e	jmp	#LR__4541
2c384     04 4E 05 F1 | 	add	fp, #4
2c388     A7 2C 02 FB | 	rdlong	local08, fp
2c38c     1C 2C 06 F1 | 	add	local08, #28
2c390     16 2D 02 FB | 	rdlong	local08, local08
2c394     1C 4E 05 F1 | 	add	fp, #28
2c398     A7 2E 02 FB | 	rdlong	local09, fp
2c39c     17 2D 82 F1 | 	sub	local08, local09
2c3a0     0C 4E 05 F1 | 	add	fp, #12
2c3a4     A7 30 02 FB | 	rdlong	local10, fp
2c3a8     2C 4E 85 F1 | 	sub	fp, #44
2c3ac     18 33 02 F6 | 	mov	local11, local10
2c3b0     19 2D 12 F2 | 	cmp	local08, local11 wc
2c3b4     44 00 90 3D |  if_ae	jmp	#LR__4541
2c3b8     34 4E 05 F1 | 	add	fp, #52
2c3bc     A7 12 02 FB | 	rdlong	arg01, fp
2c3c0     30 4E 85 F1 | 	sub	fp, #48
2c3c4     A7 14 02 FB | 	rdlong	arg02, fp
2c3c8     0A 33 02 F6 | 	mov	local11, arg02
2c3cc     1C 32 06 F1 | 	add	local11, #28
2c3d0     19 2F 02 FB | 	rdlong	local09, local11
2c3d4     1C 4E 05 F1 | 	add	fp, #28
2c3d8     A7 26 02 FB | 	rdlong	local05, fp
2c3dc     13 2F 82 F1 | 	sub	local09, local05
2c3e0     09 2E 66 F0 | 	shl	local09, #9
2c3e4     17 33 02 F6 | 	mov	local11, local09
2c3e8     17 13 02 F1 | 	add	arg01, local09
2c3ec     20 4E 85 F1 | 	sub	fp, #32
2c3f0     28 14 06 F1 | 	add	arg02, #40
2c3f4     09 16 C6 F9 | 	decod	arg03, #9
2c3f8     28 46 BF FD | 	call	#__system____builtin_memmove
2c3fc                 | LR__4541
2c3fc     2C 4E 05 F1 | 	add	fp, #44
2c400     A7 22 02 FB | 	rdlong	local03, fp
2c404     09 22 66 F0 | 	shl	local03, #9
2c408     04 4E 85 F1 | 	sub	fp, #4
2c40c     A7 22 62 FC | 	wrlong	local03, fp
2c410     28 4E 85 F1 | 	sub	fp, #40
2c414                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c414                 | ' 				}
2c414                 | ' 
2c414                 | ' 
2c414                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c414                 | ' 				continue;
2c414     B4 01 90 FD | 	jmp	#LR__4548
2c418                 | LR__4542
2c418     04 4E 05 F1 | 	add	fp, #4
2c41c     A7 22 02 FB | 	rdlong	local03, fp
2c420     1C 22 06 F1 | 	add	local03, #28
2c424     11 23 02 FB | 	rdlong	local03, local03
2c428     1C 4E 05 F1 | 	add	fp, #28
2c42c     A7 1E 02 FB | 	rdlong	local01, fp
2c430     20 4E 85 F1 | 	sub	fp, #32
2c434     0F 23 0A F2 | 	cmp	local03, local01 wz
2c438     EC 00 90 AD |  if_e	jmp	#LR__4546
2c43c     04 4E 05 F1 | 	add	fp, #4
2c440     A7 1E 02 FB | 	rdlong	local01, fp
2c444     04 4E 85 F1 | 	sub	fp, #4
2c448     10 1E 06 F1 | 	add	local01, #16
2c44c     0F 23 C2 FA | 	rdbyte	local03, local01
2c450     80 22 CE F7 | 	test	local03, #128 wz
2c454     7C 00 90 AD |  if_e	jmp	#LR__4544
2c458     18 4E 05 F1 | 	add	fp, #24
2c45c     A7 1E 02 FB | 	rdlong	local01, fp
2c460     01 1E 06 F1 | 	add	local01, #1
2c464     0F 13 C2 FA | 	rdbyte	arg01, local01
2c468     14 4E 85 F1 | 	sub	fp, #20
2c46c     A7 22 02 FB | 	rdlong	local03, fp
2c470     11 15 02 F6 | 	mov	arg02, local03
2c474     28 14 06 F1 | 	add	arg02, #40
2c478     04 4E 85 F1 | 	sub	fp, #4
2c47c     1C 22 06 F1 | 	add	local03, #28
2c480     11 17 02 FB | 	rdlong	arg03, local03
2c484     01 18 06 F6 | 	mov	arg04, #1
2c488     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c48c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c490     1C 00 90 AD |  if_e	jmp	#LR__4543
2c494     04 4E 05 F1 | 	add	fp, #4
2c498     A7 22 02 FB | 	rdlong	local03, fp
2c49c     04 4E 85 F1 | 	sub	fp, #4
2c4a0     11 22 06 F1 | 	add	local03, #17
2c4a4     11 03 48 FC | 	wrbyte	#1, local03
2c4a8     01 FA 05 F6 | 	mov	result1, #1
2c4ac     A4 01 90 FD | 	jmp	#LR__4550
2c4b0                 | LR__4543
2c4b0     04 4E 05 F1 | 	add	fp, #4
2c4b4     A7 32 02 FB | 	rdlong	local11, fp
2c4b8     19 23 02 F6 | 	mov	local03, local11
2c4bc     04 4E 85 F1 | 	sub	fp, #4
2c4c0     10 32 06 F1 | 	add	local11, #16
2c4c4     19 33 C2 FA | 	rdbyte	local11, local11
2c4c8     7F 32 06 F5 | 	and	local11, #127
2c4cc     10 22 06 F1 | 	add	local03, #16
2c4d0     11 33 42 FC | 	wrbyte	local11, local03
2c4d4                 | LR__4544
2c4d4     18 4E 05 F1 | 	add	fp, #24
2c4d8     A7 1E 02 FB | 	rdlong	local01, fp
2c4dc     01 1E 06 F1 | 	add	local01, #1
2c4e0     0F 13 C2 FA | 	rdbyte	arg01, local01
2c4e4     14 4E 85 F1 | 	sub	fp, #20
2c4e8     A7 14 02 FB | 	rdlong	arg02, fp
2c4ec     28 14 06 F1 | 	add	arg02, #40
2c4f0     1C 4E 05 F1 | 	add	fp, #28
2c4f4     A7 16 02 FB | 	rdlong	arg03, fp
2c4f8     20 4E 85 F1 | 	sub	fp, #32
2c4fc     01 18 06 F6 | 	mov	arg04, #1
2c500     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c504     00 FA 0D F2 | 	cmp	result1, #0 wz
2c508     1C 00 90 AD |  if_e	jmp	#LR__4545
2c50c     04 4E 05 F1 | 	add	fp, #4
2c510     A7 22 02 FB | 	rdlong	local03, fp
2c514     04 4E 85 F1 | 	sub	fp, #4
2c518     11 22 06 F1 | 	add	local03, #17
2c51c     11 03 48 FC | 	wrbyte	#1, local03
2c520     01 FA 05 F6 | 	mov	result1, #1
2c524     2C 01 90 FD | 	jmp	#LR__4550
2c528                 | LR__4545
2c528                 | LR__4546
2c528     04 4E 05 F1 | 	add	fp, #4
2c52c     A7 22 02 FB | 	rdlong	local03, fp
2c530     1C 4E 05 F1 | 	add	fp, #28
2c534     A7 32 02 FB | 	rdlong	local11, fp
2c538     20 4E 85 F1 | 	sub	fp, #32
2c53c     1C 22 06 F1 | 	add	local03, #28
2c540     11 33 62 FC | 	wrlong	local11, local03
2c544                 | LR__4547
2c544     04 4E 05 F1 | 	add	fp, #4
2c548     A7 1E 02 FB | 	rdlong	local01, fp
2c54c     14 1E 06 F1 | 	add	local01, #20
2c550     0F 33 02 FB | 	rdlong	local11, local01
2c554     FF 33 06 F5 | 	and	local11, #511
2c558     09 22 C6 F9 | 	decod	local03, #9
2c55c     19 23 82 F1 | 	sub	local03, local11
2c560     24 4E 05 F1 | 	add	fp, #36
2c564     A7 22 62 FC | 	wrlong	local03, fp
2c568     1C 4E 85 F1 | 	sub	fp, #28
2c56c     A7 32 02 FB | 	rdlong	local11, fp
2c570     0C 4E 85 F1 | 	sub	fp, #12
2c574     19 23 1A F2 | 	cmp	local03, local11 wcz
2c578     0C 4E 05 11 |  if_a	add	fp, #12
2c57c     A7 22 02 1B |  if_a	rdlong	local03, fp
2c580     1C 4E 05 11 |  if_a	add	fp, #28
2c584     A7 22 62 1C |  if_a	wrlong	local03, fp
2c588     28 4E 85 11 |  if_a	sub	fp, #40
2c58c     34 4E 05 F1 | 	add	fp, #52
2c590     A7 12 02 FB | 	rdlong	arg01, fp
2c594     30 4E 85 F1 | 	sub	fp, #48
2c598     A7 28 02 FB | 	rdlong	local06, fp
2c59c     14 15 02 F6 | 	mov	arg02, local06
2c5a0     28 14 06 F1 | 	add	arg02, #40
2c5a4     14 28 06 F1 | 	add	local06, #20
2c5a8     14 33 02 FB | 	rdlong	local11, local06
2c5ac     19 2F 02 F6 | 	mov	local09, local11
2c5b0     17 31 02 F6 | 	mov	local10, local09
2c5b4     FF 31 06 F5 | 	and	local10, #511
2c5b8     18 15 02 F1 | 	add	arg02, local10
2c5bc     24 4E 05 F1 | 	add	fp, #36
2c5c0     A7 16 02 FB | 	rdlong	arg03, fp
2c5c4     28 4E 85 F1 | 	sub	fp, #40
2c5c8     58 44 BF FD | 	call	#__system____builtin_memmove
2c5cc                 | LR__4548
2c5cc     0C 4E 05 F1 | 	add	fp, #12
2c5d0     A7 22 02 FB | 	rdlong	local03, fp
2c5d4     1C 4E 05 F1 | 	add	fp, #28
2c5d8     A7 2C 02 FB | 	rdlong	local08, fp
2c5dc     16 23 82 F1 | 	sub	local03, local08
2c5e0     1C 4E 85 F1 | 	sub	fp, #28
2c5e4     A7 22 62 FC | 	wrlong	local03, fp
2c5e8     04 4E 05 F1 | 	add	fp, #4
2c5ec     A7 1E 02 FB | 	rdlong	local01, fp
2c5f0     0F 2B 02 FB | 	rdlong	local07, local01
2c5f4     18 4E 05 F1 | 	add	fp, #24
2c5f8     A7 2C 02 FB | 	rdlong	local08, fp
2c5fc     16 2B 02 F1 | 	add	local07, local08
2c600     0F 2B 62 FC | 	wrlong	local07, local01
2c604     0C 4E 05 F1 | 	add	fp, #12
2c608     A7 22 02 FB | 	rdlong	local03, fp
2c60c     0C 4E 85 F1 | 	sub	fp, #12
2c610     A7 34 02 FB | 	rdlong	local12, fp
2c614     1A 23 02 F1 | 	add	local03, local12
2c618     0C 4E 05 F1 | 	add	fp, #12
2c61c     A7 22 62 FC | 	wrlong	local03, fp
2c620     30 4E 85 F1 | 	sub	fp, #48
2c624     A7 36 02 FB | 	rdlong	local13, fp
2c628     1B 23 02 F6 | 	mov	local03, local13
2c62c     14 36 06 F1 | 	add	local13, #20
2c630     1B 39 02 FB | 	rdlong	local14, local13
2c634     24 4E 05 F1 | 	add	fp, #36
2c638     A7 28 02 FB | 	rdlong	local06, fp
2c63c     28 4E 85 F1 | 	sub	fp, #40
2c640     14 39 02 F1 | 	add	local14, local06
2c644     14 22 06 F1 | 	add	local03, #20
2c648     11 39 62 FC | 	wrlong	local14, local03
2c64c     84 FA 9F FD | 	jmp	#LR__4532
2c650                 | LR__4549
2c650                 | ' 
2c650                 | ' 
2c650                 | ' 
2c650                 | ' 
2c650                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c650                 | ' 
2c650                 | ' 	}
2c650                 | ' 
2c650                 | ' 	return FR_OK ;
2c650     00 FA 05 F6 | 	mov	result1, #0
2c654                 | LR__4550
2c654     A7 F0 03 F6 | 	mov	ptra, fp
2c658     B2 00 A0 FD | 	call	#popregs_
2c65c                 | _fatfs_cc_f_read_ret
2c65c     2D 00 64 FD | 	ret
2c660                 | 
2c660                 | _fatfs_cc_f_write
2c660     15 4A 05 F6 | 	mov	COUNT_, #21
2c664     A8 00 A0 FD | 	call	#pushregs_
2c668     34 F0 07 F1 | 	add	ptra, #52
2c66c     04 4E 05 F1 | 	add	fp, #4
2c670     A7 12 62 FC | 	wrlong	arg01, fp
2c674     04 4E 05 F1 | 	add	fp, #4
2c678     A7 14 62 FC | 	wrlong	arg02, fp
2c67c     04 4E 05 F1 | 	add	fp, #4
2c680     A7 16 62 FC | 	wrlong	arg03, fp
2c684     04 4E 05 F1 | 	add	fp, #4
2c688     A7 18 62 FC | 	wrlong	arg04, fp
2c68c     08 4E 85 F1 | 	sub	fp, #8
2c690     A7 FA 01 FB | 	rdlong	result1, fp
2c694     28 4E 05 F1 | 	add	fp, #40
2c698     A7 FA 61 FC | 	wrlong	result1, fp
2c69c     20 4E 85 F1 | 	sub	fp, #32
2c6a0     A7 FA 01 FB | 	rdlong	result1, fp
2c6a4     FD 00 68 FC | 	wrlong	#0, result1
2c6a8     0C 4E 85 F1 | 	sub	fp, #12
2c6ac     A7 12 02 FB | 	rdlong	arg01, fp
2c6b0     14 4E 05 F1 | 	add	fp, #20
2c6b4     A7 14 02 F6 | 	mov	arg02, fp
2c6b8     18 4E 85 F1 | 	sub	fp, #24
2c6bc     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c6c0     14 4E 05 F1 | 	add	fp, #20
2c6c4     A7 FA 61 FC | 	wrlong	result1, fp
2c6c8     00 FA 4D F2 | 	cmps	result1, #0 wz
2c6cc     14 4E 85 F1 | 	sub	fp, #20
2c6d0     20 00 90 5D |  if_ne	jmp	#LR__4560
2c6d4     04 4E 05 F1 | 	add	fp, #4
2c6d8     A7 14 02 FB | 	rdlong	arg02, fp
2c6dc     11 14 06 F1 | 	add	arg02, #17
2c6e0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c6e4     10 4E 05 F1 | 	add	fp, #16
2c6e8     A7 14 62 FC | 	wrlong	arg02, fp
2c6ec     14 4E 85 F1 | 	sub	fp, #20
2c6f0     10 00 90 AD |  if_e	jmp	#LR__4561
2c6f4                 | LR__4560
2c6f4     14 4E 05 F1 | 	add	fp, #20
2c6f8     A7 FA 01 FB | 	rdlong	result1, fp
2c6fc     14 4E 85 F1 | 	sub	fp, #20
2c700     44 07 90 FD | 	jmp	#LR__4583
2c704                 | LR__4561
2c704     04 4E 05 F1 | 	add	fp, #4
2c708     A7 14 02 FB | 	rdlong	arg02, fp
2c70c     04 4E 85 F1 | 	sub	fp, #4
2c710     10 14 06 F1 | 	add	arg02, #16
2c714     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c718     02 14 CE F7 | 	test	arg02, #2 wz
2c71c     07 FA 05 A6 |  if_e	mov	result1, #7
2c720     24 07 90 AD |  if_e	jmp	#LR__4583
2c724     04 4E 05 F1 | 	add	fp, #4
2c728     A7 14 02 FB | 	rdlong	arg02, fp
2c72c     0A 13 02 F6 | 	mov	arg01, arg02
2c730     14 12 06 F1 | 	add	arg01, #20
2c734     09 13 02 FB | 	rdlong	arg01, arg01
2c738     08 4E 05 F1 | 	add	fp, #8
2c73c     A7 FA 01 FB | 	rdlong	result1, fp
2c740     FD 12 02 F1 | 	add	arg01, result1
2c744     0C 4E 85 F1 | 	sub	fp, #12
2c748     14 14 06 F1 | 	add	arg02, #20
2c74c     0A FB 01 FB | 	rdlong	result1, arg02
2c750     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c754     24 00 90 3D |  if_ae	jmp	#LR__4562
2c758     04 4E 05 F1 | 	add	fp, #4
2c75c     A7 14 02 FB | 	rdlong	arg02, fp
2c760     01 FA 65 F6 | 	neg	result1, #1
2c764     14 14 06 F1 | 	add	arg02, #20
2c768     0A 15 02 FB | 	rdlong	arg02, arg02
2c76c     0A FB 81 F1 | 	sub	result1, arg02
2c770     08 4E 05 F1 | 	add	fp, #8
2c774     A7 FA 61 FC | 	wrlong	result1, fp
2c778     0C 4E 85 F1 | 	sub	fp, #12
2c77c                 | LR__4562
2c77c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c77c                 | ' 	}
2c77c                 | ' 
2c77c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c77c                 | LR__4563
2c77c     0C 4E 05 F1 | 	add	fp, #12
2c780     A7 FA 01 FB | 	rdlong	result1, fp
2c784     0C 4E 85 F1 | 	sub	fp, #12
2c788     01 FA 15 F2 | 	cmp	result1, #1 wc
2c78c     90 06 90 CD |  if_b	jmp	#LR__4582
2c790     04 4E 05 F1 | 	add	fp, #4
2c794     A7 FA 01 FB | 	rdlong	result1, fp
2c798     04 4E 85 F1 | 	sub	fp, #4
2c79c     14 FA 05 F1 | 	add	result1, #20
2c7a0     FD FA 01 FB | 	rdlong	result1, result1
2c7a4     FF FB CD F7 | 	test	result1, #511 wz
2c7a8     D8 04 90 5D |  if_ne	jmp	#LR__4578
2c7ac     04 4E 05 F1 | 	add	fp, #4
2c7b0     A7 FA 01 FB | 	rdlong	result1, fp
2c7b4     14 FA 05 F1 | 	add	result1, #20
2c7b8     FD FA 01 FB | 	rdlong	result1, result1
2c7bc     09 FA 45 F0 | 	shr	result1, #9
2c7c0     14 4E 05 F1 | 	add	fp, #20
2c7c4     A7 14 02 FB | 	rdlong	arg02, fp
2c7c8     0A 14 06 F1 | 	add	arg02, #10
2c7cc     0A 19 E2 FA | 	rdword	arg04, arg02
2c7d0     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c7d4     01 14 86 F1 | 	sub	arg02, #1
2c7d8     0A FB 09 F5 | 	and	result1, arg02 wz
2c7dc     14 4E 05 F1 | 	add	fp, #20
2c7e0     A7 FA 61 FC | 	wrlong	result1, fp
2c7e4     2C 4E 85 F1 | 	sub	fp, #44
2c7e8     44 01 90 5D |  if_ne	jmp	#LR__4569
2c7ec     04 4E 05 F1 | 	add	fp, #4
2c7f0     A7 FA 01 FB | 	rdlong	result1, fp
2c7f4     04 4E 85 F1 | 	sub	fp, #4
2c7f8     14 FA 05 F1 | 	add	result1, #20
2c7fc     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c800     44 00 90 5D |  if_ne	jmp	#LR__4564
2c804     04 4E 05 F1 | 	add	fp, #4
2c808     A7 14 02 FB | 	rdlong	arg02, fp
2c80c     08 14 06 F1 | 	add	arg02, #8
2c810     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c814     18 4E 05 F1 | 	add	fp, #24
2c818     A7 14 62 FC | 	wrlong	arg02, fp
2c81c     1C 4E 85 F1 | 	sub	fp, #28
2c820     4C 00 90 5D |  if_ne	jmp	#LR__4565
2c824     04 4E 05 F1 | 	add	fp, #4
2c828     A7 12 02 FB | 	rdlong	arg01, fp
2c82c     04 4E 85 F1 | 	sub	fp, #4
2c830     00 14 06 F6 | 	mov	arg02, #0
2c834     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c838     1C 4E 05 F1 | 	add	fp, #28
2c83c     A7 FA 61 FC | 	wrlong	result1, fp
2c840     1C 4E 85 F1 | 	sub	fp, #28
2c844     28 00 90 FD | 	jmp	#LR__4565
2c848                 | LR__4564
2c848     04 4E 05 F1 | 	add	fp, #4
2c84c     A7 18 02 FB | 	rdlong	arg04, fp
2c850     0C 13 02 F6 | 	mov	arg01, arg04
2c854     04 4E 85 F1 | 	sub	fp, #4
2c858     18 18 06 F1 | 	add	arg04, #24
2c85c     0C 15 02 FB | 	rdlong	arg02, arg04
2c860     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c864     1C 4E 05 F1 | 	add	fp, #28
2c868     A7 FA 61 FC | 	wrlong	result1, fp
2c86c     1C 4E 85 F1 | 	sub	fp, #28
2c870                 | LR__4565
2c870     1C 4E 05 F1 | 	add	fp, #28
2c874     A7 FA 09 FB | 	rdlong	result1, fp wz
2c878     1C 4E 85 F1 | 	sub	fp, #28
2c87c     A0 05 90 AD |  if_e	jmp	#LR__4582
2c880     1C 4E 05 F1 | 	add	fp, #28
2c884     A7 FA 01 FB | 	rdlong	result1, fp
2c888     1C 4E 85 F1 | 	sub	fp, #28
2c88c     01 FA 0D F2 | 	cmp	result1, #1 wz
2c890     1C 00 90 5D |  if_ne	jmp	#LR__4566
2c894     04 4E 05 F1 | 	add	fp, #4
2c898     A7 FA 01 FB | 	rdlong	result1, fp
2c89c     04 4E 85 F1 | 	sub	fp, #4
2c8a0     11 FA 05 F1 | 	add	result1, #17
2c8a4     FD 04 48 FC | 	wrbyte	#2, result1
2c8a8     02 FA 05 F6 | 	mov	result1, #2
2c8ac     98 05 90 FD | 	jmp	#LR__4583
2c8b0                 | LR__4566
2c8b0     1C 4E 05 F1 | 	add	fp, #28
2c8b4     A7 FA 01 FB | 	rdlong	result1, fp
2c8b8     1C 4E 85 F1 | 	sub	fp, #28
2c8bc     FF FF 7F FF 
2c8c0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c8c4     1C 00 90 5D |  if_ne	jmp	#LR__4567
2c8c8     04 4E 05 F1 | 	add	fp, #4
2c8cc     A7 FA 01 FB | 	rdlong	result1, fp
2c8d0     04 4E 85 F1 | 	sub	fp, #4
2c8d4     11 FA 05 F1 | 	add	result1, #17
2c8d8     FD 02 48 FC | 	wrbyte	#1, result1
2c8dc     01 FA 05 F6 | 	mov	result1, #1
2c8e0     64 05 90 FD | 	jmp	#LR__4583
2c8e4                 | LR__4567
2c8e4     04 4E 05 F1 | 	add	fp, #4
2c8e8     A7 FA 01 FB | 	rdlong	result1, fp
2c8ec     18 4E 05 F1 | 	add	fp, #24
2c8f0     A7 18 02 FB | 	rdlong	arg04, fp
2c8f4     18 FA 05 F1 | 	add	result1, #24
2c8f8     FD 18 62 FC | 	wrlong	arg04, result1
2c8fc     18 4E 85 F1 | 	sub	fp, #24
2c900     A7 FA 01 FB | 	rdlong	result1, fp
2c904     04 4E 85 F1 | 	sub	fp, #4
2c908     08 FA 05 F1 | 	add	result1, #8
2c90c     FD FA 09 FB | 	rdlong	result1, result1 wz
2c910     1C 00 90 5D |  if_ne	jmp	#LR__4568
2c914     04 4E 05 F1 | 	add	fp, #4
2c918     A7 18 02 FB | 	rdlong	arg04, fp
2c91c     18 4E 05 F1 | 	add	fp, #24
2c920     A7 FA 01 FB | 	rdlong	result1, fp
2c924     1C 4E 85 F1 | 	sub	fp, #28
2c928     08 18 06 F1 | 	add	arg04, #8
2c92c     0C FB 61 FC | 	wrlong	result1, arg04
2c930                 | LR__4568
2c930                 | LR__4569
2c930     04 4E 05 F1 | 	add	fp, #4
2c934     A7 18 02 FB | 	rdlong	arg04, fp
2c938     04 4E 85 F1 | 	sub	fp, #4
2c93c     10 18 06 F1 | 	add	arg04, #16
2c940     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c944     80 18 CE F7 | 	test	arg04, #128 wz
2c948     7C 00 90 AD |  if_e	jmp	#LR__4571
2c94c     18 4E 05 F1 | 	add	fp, #24
2c950     A7 18 02 FB | 	rdlong	arg04, fp
2c954     01 18 06 F1 | 	add	arg04, #1
2c958     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c95c     14 4E 85 F1 | 	sub	fp, #20
2c960     A7 18 02 FB | 	rdlong	arg04, fp
2c964     0C 15 02 F6 | 	mov	arg02, arg04
2c968     28 14 06 F1 | 	add	arg02, #40
2c96c     04 4E 85 F1 | 	sub	fp, #4
2c970     1C 18 06 F1 | 	add	arg04, #28
2c974     0C 17 02 FB | 	rdlong	arg03, arg04
2c978     01 18 06 F6 | 	mov	arg04, #1
2c97c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c980     00 FA 0D F2 | 	cmp	result1, #0 wz
2c984     1C 00 90 AD |  if_e	jmp	#LR__4570
2c988     04 4E 05 F1 | 	add	fp, #4
2c98c     A7 FA 01 FB | 	rdlong	result1, fp
2c990     04 4E 85 F1 | 	sub	fp, #4
2c994     11 FA 05 F1 | 	add	result1, #17
2c998     FD 02 48 FC | 	wrbyte	#1, result1
2c99c     01 FA 05 F6 | 	mov	result1, #1
2c9a0     A4 04 90 FD | 	jmp	#LR__4583
2c9a4                 | LR__4570
2c9a4     04 4E 05 F1 | 	add	fp, #4
2c9a8     A7 18 02 FB | 	rdlong	arg04, fp
2c9ac     0C FB 01 F6 | 	mov	result1, arg04
2c9b0     04 4E 85 F1 | 	sub	fp, #4
2c9b4     10 18 06 F1 | 	add	arg04, #16
2c9b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c9bc     7F 18 06 F5 | 	and	arg04, #127
2c9c0     10 FA 05 F1 | 	add	result1, #16
2c9c4     FD 18 42 FC | 	wrbyte	arg04, result1
2c9c8                 | LR__4571
2c9c8     18 4E 05 F1 | 	add	fp, #24
2c9cc     A7 12 02 FB | 	rdlong	arg01, fp
2c9d0     14 4E 85 F1 | 	sub	fp, #20
2c9d4     A7 14 02 FB | 	rdlong	arg02, fp
2c9d8     04 4E 85 F1 | 	sub	fp, #4
2c9dc     18 14 06 F1 | 	add	arg02, #24
2c9e0     0A 15 02 FB | 	rdlong	arg02, arg02
2c9e4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c9e8     20 4E 05 F1 | 	add	fp, #32
2c9ec     A7 FA 61 FC | 	wrlong	result1, fp
2c9f0     20 4E 85 F1 | 	sub	fp, #32
2c9f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9f8     1C 00 90 5D |  if_ne	jmp	#LR__4572
2c9fc     04 4E 05 F1 | 	add	fp, #4
2ca00     A7 FA 01 FB | 	rdlong	result1, fp
2ca04     04 4E 85 F1 | 	sub	fp, #4
2ca08     11 FA 05 F1 | 	add	result1, #17
2ca0c     FD 04 48 FC | 	wrbyte	#2, result1
2ca10     02 FA 05 F6 | 	mov	result1, #2
2ca14     30 04 90 FD | 	jmp	#LR__4583
2ca18                 | LR__4572
2ca18     20 4E 05 F1 | 	add	fp, #32
2ca1c     A7 FA 01 FB | 	rdlong	result1, fp
2ca20     0C 4E 05 F1 | 	add	fp, #12
2ca24     A7 1E 02 FB | 	rdlong	local01, fp
2ca28     0F FB 01 F1 | 	add	result1, local01
2ca2c     0C 4E 85 F1 | 	sub	fp, #12
2ca30     A7 FA 61 FC | 	wrlong	result1, fp
2ca34     14 4E 85 F1 | 	sub	fp, #20
2ca38     A7 FA 01 FB | 	rdlong	result1, fp
2ca3c     09 FA 45 F0 | 	shr	result1, #9
2ca40     1C 4E 05 F1 | 	add	fp, #28
2ca44     A7 FA 61 FC | 	wrlong	result1, fp
2ca48     28 4E 85 F1 | 	sub	fp, #40
2ca4c     01 FA 15 F2 | 	cmp	result1, #1 wc
2ca50     60 01 90 CD |  if_b	jmp	#LR__4576
2ca54     2C 4E 05 F1 | 	add	fp, #44
2ca58     A7 FA 01 FB | 	rdlong	result1, fp
2ca5c     04 4E 85 F1 | 	sub	fp, #4
2ca60     A7 18 02 FB | 	rdlong	arg04, fp
2ca64     0C FB 01 F1 | 	add	result1, arg04
2ca68     10 4E 85 F1 | 	sub	fp, #16
2ca6c     A7 18 02 FB | 	rdlong	arg04, fp
2ca70     18 4E 85 F1 | 	sub	fp, #24
2ca74     0A 18 06 F1 | 	add	arg04, #10
2ca78     0C 19 E2 FA | 	rdword	arg04, arg04
2ca7c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2ca80     28 00 90 ED |  if_be	jmp	#LR__4573
2ca84     18 4E 05 F1 | 	add	fp, #24
2ca88     A7 FA 01 FB | 	rdlong	result1, fp
2ca8c     0A FA 05 F1 | 	add	result1, #10
2ca90     FD FA E1 FA | 	rdword	result1, result1
2ca94     14 4E 05 F1 | 	add	fp, #20
2ca98     A7 18 02 FB | 	rdlong	arg04, fp
2ca9c     0C FB 81 F1 | 	sub	result1, arg04
2caa0     04 4E 85 F1 | 	sub	fp, #4
2caa4     A7 FA 61 FC | 	wrlong	result1, fp
2caa8     28 4E 85 F1 | 	sub	fp, #40
2caac                 | LR__4573
2caac     18 4E 05 F1 | 	add	fp, #24
2cab0     A7 18 02 FB | 	rdlong	arg04, fp
2cab4     01 18 06 F1 | 	add	arg04, #1
2cab8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cabc     18 4E 05 F1 | 	add	fp, #24
2cac0     A7 14 02 FB | 	rdlong	arg02, fp
2cac4     10 4E 85 F1 | 	sub	fp, #16
2cac8     A7 16 02 FB | 	rdlong	arg03, fp
2cacc     08 4E 05 F1 | 	add	fp, #8
2cad0     A7 18 02 FB | 	rdlong	arg04, fp
2cad4     28 4E 85 F1 | 	sub	fp, #40
2cad8     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2cadc     00 FA 0D F2 | 	cmp	result1, #0 wz
2cae0     1C 00 90 AD |  if_e	jmp	#LR__4574
2cae4     04 4E 05 F1 | 	add	fp, #4
2cae8     A7 1E 02 FB | 	rdlong	local01, fp
2caec     04 4E 85 F1 | 	sub	fp, #4
2caf0     11 1E 06 F1 | 	add	local01, #17
2caf4     0F 03 48 FC | 	wrbyte	#1, local01
2caf8     01 FA 05 F6 | 	mov	result1, #1
2cafc     48 03 90 FD | 	jmp	#LR__4583
2cb00                 | LR__4574
2cb00     04 4E 05 F1 | 	add	fp, #4
2cb04     A7 FA 01 FB | 	rdlong	result1, fp
2cb08     1C FA 05 F1 | 	add	result1, #28
2cb0c     FD FA 01 FB | 	rdlong	result1, result1
2cb10     1C 4E 05 F1 | 	add	fp, #28
2cb14     A7 20 02 FB | 	rdlong	local02, fp
2cb18     10 FB 81 F1 | 	sub	result1, local02
2cb1c     08 4E 05 F1 | 	add	fp, #8
2cb20     A7 18 02 FB | 	rdlong	arg04, fp
2cb24     28 4E 85 F1 | 	sub	fp, #40
2cb28     0C FB 11 F2 | 	cmp	result1, arg04 wc
2cb2c     68 00 90 3D |  if_ae	jmp	#LR__4575
2cb30     04 4E 05 F1 | 	add	fp, #4
2cb34     A7 12 02 FB | 	rdlong	arg01, fp
2cb38     28 12 06 F1 | 	add	arg01, #40
2cb3c     2C 4E 05 F1 | 	add	fp, #44
2cb40     A7 14 02 FB | 	rdlong	arg02, fp
2cb44     2C 4E 85 F1 | 	sub	fp, #44
2cb48     A7 FA 01 FB | 	rdlong	result1, fp
2cb4c     1C FA 05 F1 | 	add	result1, #28
2cb50     FD 22 02 FB | 	rdlong	local03, result1
2cb54     1C 4E 05 F1 | 	add	fp, #28
2cb58     A7 18 02 FB | 	rdlong	arg04, fp
2cb5c     20 4E 85 F1 | 	sub	fp, #32
2cb60     0C 23 82 F1 | 	sub	local03, arg04
2cb64     09 22 66 F0 | 	shl	local03, #9
2cb68     11 15 02 F1 | 	add	arg02, local03
2cb6c     09 16 C6 F9 | 	decod	arg03, #9
2cb70     B0 3E BF FD | 	call	#__system____builtin_memmove
2cb74     04 4E 05 F1 | 	add	fp, #4
2cb78     A7 18 02 FB | 	rdlong	arg04, fp
2cb7c     0C FB 01 F6 | 	mov	result1, arg04
2cb80     04 4E 85 F1 | 	sub	fp, #4
2cb84     10 18 06 F1 | 	add	arg04, #16
2cb88     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cb8c     7F 18 06 F5 | 	and	arg04, #127
2cb90     10 FA 05 F1 | 	add	result1, #16
2cb94     FD 18 42 FC | 	wrbyte	arg04, result1
2cb98                 | LR__4575
2cb98     28 4E 05 F1 | 	add	fp, #40
2cb9c     A7 FA 01 FB | 	rdlong	result1, fp
2cba0     09 FA 65 F0 | 	shl	result1, #9
2cba4     04 4E 85 F1 | 	sub	fp, #4
2cba8     A7 FA 61 FC | 	wrlong	result1, fp
2cbac     24 4E 85 F1 | 	sub	fp, #36
2cbb0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2cbb0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2cbb0                 | ' 				}
2cbb0                 | ' 
2cbb0                 | ' 
2cbb0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2cbb0                 | ' 				continue;
2cbb0     74 01 90 FD | 	jmp	#LR__4579
2cbb4                 | LR__4576
2cbb4     04 4E 05 F1 | 	add	fp, #4
2cbb8     A7 20 02 FB | 	rdlong	local02, fp
2cbbc     1C 20 06 F1 | 	add	local02, #28
2cbc0     10 FB 01 FB | 	rdlong	result1, local02
2cbc4     1C 4E 05 F1 | 	add	fp, #28
2cbc8     A7 20 02 FB | 	rdlong	local02, fp
2cbcc     20 4E 85 F1 | 	sub	fp, #32
2cbd0     10 FB 09 F2 | 	cmp	result1, local02 wz
2cbd4     90 00 90 AD |  if_e	jmp	#LR__4577
2cbd8     04 4E 05 F1 | 	add	fp, #4
2cbdc     A7 FA 01 FB | 	rdlong	result1, fp
2cbe0     FD 22 02 F6 | 	mov	local03, result1
2cbe4     04 4E 85 F1 | 	sub	fp, #4
2cbe8     14 22 06 F1 | 	add	local03, #20
2cbec     11 23 02 FB | 	rdlong	local03, local03
2cbf0     0C FA 05 F1 | 	add	result1, #12
2cbf4     FD 24 02 FB | 	rdlong	local04, result1
2cbf8     12 27 02 F6 | 	mov	local05, local04
2cbfc     13 23 12 F2 | 	cmp	local03, local05 wc
2cc00     64 00 90 3D |  if_ae	jmp	#LR__4577
2cc04     18 4E 05 F1 | 	add	fp, #24
2cc08     A7 18 02 FB | 	rdlong	arg04, fp
2cc0c     01 18 06 F1 | 	add	arg04, #1
2cc10     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cc14     14 4E 85 F1 | 	sub	fp, #20
2cc18     A7 28 02 FB | 	rdlong	local06, fp
2cc1c     28 28 06 F1 | 	add	local06, #40
2cc20     14 2B 02 F6 | 	mov	local07, local06
2cc24     1C 4E 05 F1 | 	add	fp, #28
2cc28     A7 2C 02 FB | 	rdlong	local08, fp
2cc2c     20 4E 85 F1 | 	sub	fp, #32
2cc30     01 2E 06 F6 | 	mov	local09, #1
2cc34     15 15 02 F6 | 	mov	arg02, local07
2cc38     16 17 02 F6 | 	mov	arg03, local08
2cc3c     01 18 06 F6 | 	mov	arg04, #1
2cc40     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2cc44     FD 30 0A F6 | 	mov	local10, result1 wz
2cc48     1C 00 90 AD |  if_e	jmp	#LR__4577
2cc4c     04 4E 05 F1 | 	add	fp, #4
2cc50     A7 30 02 FB | 	rdlong	local10, fp
2cc54     04 4E 85 F1 | 	sub	fp, #4
2cc58     11 30 06 F1 | 	add	local10, #17
2cc5c     18 03 48 FC | 	wrbyte	#1, local10
2cc60                 | ' 				fp->fptr < fp->obj.objsize &&
2cc60                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2cc60                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2cc60     01 FA 05 F6 | 	mov	result1, #1
2cc64     E0 01 90 FD | 	jmp	#LR__4583
2cc68                 | LR__4577
2cc68     04 4E 05 F1 | 	add	fp, #4
2cc6c     A7 18 02 FB | 	rdlong	arg04, fp
2cc70     1C 4E 05 F1 | 	add	fp, #28
2cc74     A7 FA 01 FB | 	rdlong	result1, fp
2cc78     20 4E 85 F1 | 	sub	fp, #32
2cc7c     1C 18 06 F1 | 	add	arg04, #28
2cc80     0C FB 61 FC | 	wrlong	result1, arg04
2cc84                 | LR__4578
2cc84     04 4E 05 F1 | 	add	fp, #4
2cc88     A7 FA 01 FB | 	rdlong	result1, fp
2cc8c     14 FA 05 F1 | 	add	result1, #20
2cc90     FD FA 01 FB | 	rdlong	result1, result1
2cc94     FF FB 05 F5 | 	and	result1, #511
2cc98     09 32 C6 F9 | 	decod	local11, #9
2cc9c     FD 32 82 F1 | 	sub	local11, result1
2cca0     20 4E 05 F1 | 	add	fp, #32
2cca4     A7 32 62 FC | 	wrlong	local11, fp
2cca8     18 4E 85 F1 | 	sub	fp, #24
2ccac     A7 FA 01 FB | 	rdlong	result1, fp
2ccb0     0C 4E 85 F1 | 	sub	fp, #12
2ccb4     FD 32 1A F2 | 	cmp	local11, result1 wcz
2ccb8     0C 4E 05 11 |  if_a	add	fp, #12
2ccbc     A7 32 02 1B |  if_a	rdlong	local11, fp
2ccc0     18 4E 05 11 |  if_a	add	fp, #24
2ccc4     A7 32 62 1C |  if_a	wrlong	local11, fp
2ccc8     24 4E 85 11 |  if_a	sub	fp, #36
2cccc     04 4E 05 F1 | 	add	fp, #4
2ccd0     A7 32 02 FB | 	rdlong	local11, fp
2ccd4     19 13 02 F6 | 	mov	arg01, local11
2ccd8     28 12 06 F1 | 	add	arg01, #40
2ccdc     14 32 06 F1 | 	add	local11, #20
2cce0     19 33 02 FB | 	rdlong	local11, local11
2cce4     FF 33 06 F5 | 	and	local11, #511
2cce8     19 13 02 F1 | 	add	arg01, local11
2ccec     2C 4E 05 F1 | 	add	fp, #44
2ccf0     A7 14 02 FB | 	rdlong	arg02, fp
2ccf4     0C 4E 85 F1 | 	sub	fp, #12
2ccf8     A7 16 02 FB | 	rdlong	arg03, fp
2ccfc     24 4E 85 F1 | 	sub	fp, #36
2cd00     20 3D BF FD | 	call	#__system____builtin_memmove
2cd04     04 4E 05 F1 | 	add	fp, #4
2cd08     A7 FA 01 FB | 	rdlong	result1, fp
2cd0c     FD 32 02 F6 | 	mov	local11, result1
2cd10     04 4E 85 F1 | 	sub	fp, #4
2cd14     10 FA 05 F1 | 	add	result1, #16
2cd18     FD FA C1 FA | 	rdbyte	result1, result1
2cd1c     80 FA 45 F5 | 	or	result1, #128
2cd20     10 32 06 F1 | 	add	local11, #16
2cd24     19 FB 41 FC | 	wrbyte	result1, local11
2cd28                 | LR__4579
2cd28     0C 4E 05 F1 | 	add	fp, #12
2cd2c     A7 32 02 FB | 	rdlong	local11, fp
2cd30     18 4E 05 F1 | 	add	fp, #24
2cd34     A7 FA 01 FB | 	rdlong	result1, fp
2cd38     FD 32 82 F1 | 	sub	local11, result1
2cd3c     18 4E 85 F1 | 	sub	fp, #24
2cd40     A7 32 62 FC | 	wrlong	local11, fp
2cd44     04 4E 05 F1 | 	add	fp, #4
2cd48     A7 34 02 FB | 	rdlong	local12, fp
2cd4c     1A 33 02 FB | 	rdlong	local11, local12
2cd50     14 4E 05 F1 | 	add	fp, #20
2cd54     A7 36 02 FB | 	rdlong	local13, fp
2cd58     1B 33 02 F1 | 	add	local11, local13
2cd5c     1A 33 62 FC | 	wrlong	local11, local12
2cd60     0C 4E 05 F1 | 	add	fp, #12
2cd64     A7 32 02 FB | 	rdlong	local11, fp
2cd68     0C 4E 85 F1 | 	sub	fp, #12
2cd6c     A7 38 02 FB | 	rdlong	local14, fp
2cd70     1C 33 02 F1 | 	add	local11, local14
2cd74     0C 4E 05 F1 | 	add	fp, #12
2cd78     A7 32 62 FC | 	wrlong	local11, fp
2cd7c     2C 4E 85 F1 | 	sub	fp, #44
2cd80     A7 3A 02 FB | 	rdlong	local15, fp
2cd84     1D 33 02 F6 | 	mov	local11, local15
2cd88     14 3A 06 F1 | 	add	local15, #20
2cd8c     1D 3B 02 FB | 	rdlong	local15, local15
2cd90     20 4E 05 F1 | 	add	fp, #32
2cd94     A7 3C 02 FB | 	rdlong	local16, fp
2cd98     1E 3B 02 F1 | 	add	local15, local16
2cd9c     14 32 06 F1 | 	add	local11, #20
2cda0     19 3B 62 FC | 	wrlong	local15, local11
2cda4     20 4E 85 F1 | 	sub	fp, #32
2cda8     A7 3E 02 FB | 	rdlong	local17, fp
2cdac     1F 33 02 F6 | 	mov	local11, local17
2cdb0     1F 41 02 F6 | 	mov	local18, local17
2cdb4     04 4E 85 F1 | 	sub	fp, #4
2cdb8     14 3E 06 F1 | 	add	local17, #20
2cdbc     1F 43 02 FB | 	rdlong	local19, local17
2cdc0     0C 40 06 F1 | 	add	local18, #12
2cdc4     20 45 02 FB | 	rdlong	local20, local18
2cdc8     22 43 1A F2 | 	cmp	local19, local20 wcz
2cdcc     24 00 90 ED |  if_be	jmp	#LR__4580
2cdd0     04 4E 05 F1 | 	add	fp, #4
2cdd4     A7 26 02 FB | 	rdlong	local05, fp
2cdd8     04 4E 85 F1 | 	sub	fp, #4
2cddc     13 23 02 F6 | 	mov	local03, local05
2cde0     14 22 06 F1 | 	add	local03, #20
2cde4     11 25 02 FB | 	rdlong	local04, local03
2cde8     14 22 86 F1 | 	sub	local03, #20
2cdec     12 47 02 F6 | 	mov	local21, local04
2cdf0     20 00 90 FD | 	jmp	#LR__4581
2cdf4                 | LR__4580
2cdf4     04 4E 05 F1 | 	add	fp, #4
2cdf8     A7 2A 02 FB | 	rdlong	local07, fp
2cdfc     04 4E 85 F1 | 	sub	fp, #4
2ce00     15 31 02 F6 | 	mov	local10, local07
2ce04     0C 30 06 F1 | 	add	local10, #12
2ce08     18 2D 02 FB | 	rdlong	local08, local10
2ce0c     0C 30 86 F1 | 	sub	local10, #12
2ce10     16 47 02 F6 | 	mov	local21, local08
2ce14                 | LR__4581
2ce14     0C 32 06 F1 | 	add	local11, #12
2ce18     19 47 62 FC | 	wrlong	local21, local11
2ce1c     5C F9 9F FD | 	jmp	#LR__4563
2ce20                 | LR__4582
2ce20     04 4E 05 F1 | 	add	fp, #4
2ce24     A7 34 02 FB | 	rdlong	local12, fp
2ce28     1A 1F 02 F6 | 	mov	local01, local12
2ce2c     04 4E 85 F1 | 	sub	fp, #4
2ce30     10 34 06 F1 | 	add	local12, #16
2ce34     1A 33 C2 FA | 	rdbyte	local11, local12
2ce38     40 32 46 F5 | 	or	local11, #64
2ce3c     10 1E 06 F1 | 	add	local01, #16
2ce40     0F 33 42 FC | 	wrbyte	local11, local01
2ce44                 | ' 
2ce44                 | ' 
2ce44                 | ' 
2ce44                 | ' 
2ce44                 | ' 
2ce44                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2ce44                 | ' 		fp->flag |=  0x80 ;
2ce44                 | ' 
2ce44                 | ' 	}
2ce44                 | ' 
2ce44                 | ' 	fp->flag |=  0x40 ;
2ce44                 | ' 
2ce44                 | ' 	return FR_OK ;
2ce44     00 FA 05 F6 | 	mov	result1, #0
2ce48                 | LR__4583
2ce48     A7 F0 03 F6 | 	mov	ptra, fp
2ce4c     B2 00 A0 FD | 	call	#popregs_
2ce50                 | _fatfs_cc_f_write_ret
2ce50     2D 00 64 FD | 	ret
2ce54                 | 
2ce54                 | _fatfs_cc_f_sync
2ce54     00 4A 05 F6 | 	mov	COUNT_, #0
2ce58     A8 00 A0 FD | 	call	#pushregs_
2ce5c     18 F0 07 F1 | 	add	ptra, #24
2ce60     04 4E 05 F1 | 	add	fp, #4
2ce64     A7 12 62 FC | 	wrlong	arg01, fp
2ce68     08 4E 05 F1 | 	add	fp, #8
2ce6c     A7 14 02 F6 | 	mov	arg02, fp
2ce70     0C 4E 85 F1 | 	sub	fp, #12
2ce74     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2ce78     08 4E 05 F1 | 	add	fp, #8
2ce7c     A7 FA 61 FC | 	wrlong	result1, fp
2ce80     08 4E 85 F1 | 	sub	fp, #8
2ce84     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce88     C0 01 90 5D |  if_ne	jmp	#LR__4593
2ce8c     04 4E 05 F1 | 	add	fp, #4
2ce90     A7 18 02 FB | 	rdlong	arg04, fp
2ce94     04 4E 85 F1 | 	sub	fp, #4
2ce98     10 18 06 F1 | 	add	arg04, #16
2ce9c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cea0     40 18 CE F7 | 	test	arg04, #64 wz
2cea4     A4 01 90 AD |  if_e	jmp	#LR__4592
2cea8     04 4E 05 F1 | 	add	fp, #4
2ceac     A7 18 02 FB | 	rdlong	arg04, fp
2ceb0     04 4E 85 F1 | 	sub	fp, #4
2ceb4     10 18 06 F1 | 	add	arg04, #16
2ceb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cebc     80 18 CE F7 | 	test	arg04, #128 wz
2cec0     64 00 90 AD |  if_e	jmp	#LR__4590
2cec4     0C 4E 05 F1 | 	add	fp, #12
2cec8     A7 18 02 FB | 	rdlong	arg04, fp
2cecc     01 18 06 F1 | 	add	arg04, #1
2ced0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ced4     08 4E 85 F1 | 	sub	fp, #8
2ced8     A7 18 02 FB | 	rdlong	arg04, fp
2cedc     0C 15 02 F6 | 	mov	arg02, arg04
2cee0     28 14 06 F1 | 	add	arg02, #40
2cee4     04 4E 85 F1 | 	sub	fp, #4
2cee8     1C 18 06 F1 | 	add	arg04, #28
2ceec     0C 17 02 FB | 	rdlong	arg03, arg04
2cef0     01 18 06 F6 | 	mov	arg04, #1
2cef4     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2cef8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cefc     01 FA 05 56 |  if_ne	mov	result1, #1
2cf00     54 01 90 5D |  if_ne	jmp	#LR__4594
2cf04     04 4E 05 F1 | 	add	fp, #4
2cf08     A7 18 02 FB | 	rdlong	arg04, fp
2cf0c     0C 17 02 F6 | 	mov	arg03, arg04
2cf10     04 4E 85 F1 | 	sub	fp, #4
2cf14     10 18 06 F1 | 	add	arg04, #16
2cf18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cf1c     7F 18 06 F5 | 	and	arg04, #127
2cf20     10 16 06 F1 | 	add	arg03, #16
2cf24     0B 19 42 FC | 	wrbyte	arg04, arg03
2cf28                 | LR__4590
2cf28     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cf2c     10 4E 05 F1 | 	add	fp, #16
2cf30     A7 FA 61 FC | 	wrlong	result1, fp
2cf34     04 4E 85 F1 | 	sub	fp, #4
2cf38     A7 12 02 FB | 	rdlong	arg01, fp
2cf3c     08 4E 85 F1 | 	sub	fp, #8
2cf40     A7 18 02 FB | 	rdlong	arg04, fp
2cf44     04 4E 85 F1 | 	sub	fp, #4
2cf48     20 18 06 F1 | 	add	arg04, #32
2cf4c     0C 15 02 FB | 	rdlong	arg02, arg04
2cf50     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cf54     08 4E 05 F1 | 	add	fp, #8
2cf58     A7 FA 61 FC | 	wrlong	result1, fp
2cf5c     08 4E 85 F1 | 	sub	fp, #8
2cf60     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf64     E4 00 90 5D |  if_ne	jmp	#LR__4591
2cf68     04 4E 05 F1 | 	add	fp, #4
2cf6c     A7 18 02 FB | 	rdlong	arg04, fp
2cf70     24 18 06 F1 | 	add	arg04, #36
2cf74     0C 19 02 FB | 	rdlong	arg04, arg04
2cf78     10 4E 05 F1 | 	add	fp, #16
2cf7c     A7 18 62 FC | 	wrlong	arg04, fp
2cf80     0C 17 02 F6 | 	mov	arg03, arg04
2cf84     0B 16 06 F1 | 	add	arg03, #11
2cf88     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cf8c     20 16 46 F5 | 	or	arg03, #32
2cf90     0B 18 06 F1 | 	add	arg04, #11
2cf94     0C 17 42 FC | 	wrbyte	arg03, arg04
2cf98     10 4E 85 F1 | 	sub	fp, #16
2cf9c     A7 18 02 FB | 	rdlong	arg04, fp
2cfa0     0C 13 02 FB | 	rdlong	arg01, arg04
2cfa4     10 4E 05 F1 | 	add	fp, #16
2cfa8     A7 14 02 FB | 	rdlong	arg02, fp
2cfac     14 4E 85 F1 | 	sub	fp, #20
2cfb0     08 18 06 F1 | 	add	arg04, #8
2cfb4     0C 17 02 FB | 	rdlong	arg03, arg04
2cfb8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cfbc     14 4E 05 F1 | 	add	fp, #20
2cfc0     A7 12 02 FB | 	rdlong	arg01, fp
2cfc4     1C 12 06 F1 | 	add	arg01, #28
2cfc8     10 4E 85 F1 | 	sub	fp, #16
2cfcc     A7 18 02 FB | 	rdlong	arg04, fp
2cfd0     0C 18 06 F1 | 	add	arg04, #12
2cfd4     0C 15 02 FB | 	rdlong	arg02, arg04
2cfd8     09 15 62 FC | 	wrlong	arg02, arg01
2cfdc     10 4E 05 F1 | 	add	fp, #16
2cfe0     A7 12 02 FB | 	rdlong	arg01, fp
2cfe4     16 12 06 F1 | 	add	arg01, #22
2cfe8     04 4E 85 F1 | 	sub	fp, #4
2cfec     A7 14 02 FB | 	rdlong	arg02, fp
2cff0     09 15 62 FC | 	wrlong	arg02, arg01
2cff4     04 4E 05 F1 | 	add	fp, #4
2cff8     A7 12 02 FB | 	rdlong	arg01, fp
2cffc     12 12 06 F1 | 	add	arg01, #18
2d000     09 01 58 FC | 	wrword	#0, arg01
2d004     08 4E 85 F1 | 	sub	fp, #8
2d008     A7 18 02 FB | 	rdlong	arg04, fp
2d00c     03 18 06 F1 | 	add	arg04, #3
2d010     0C 03 48 FC | 	wrbyte	#1, arg04
2d014     A7 12 02 FB | 	rdlong	arg01, fp
2d018     0C 4E 85 F1 | 	sub	fp, #12
2d01c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2d020     08 4E 05 F1 | 	add	fp, #8
2d024     A7 FA 61 FC | 	wrlong	result1, fp
2d028     04 4E 85 F1 | 	sub	fp, #4
2d02c     A7 18 02 FB | 	rdlong	arg04, fp
2d030     0C 17 02 F6 | 	mov	arg03, arg04
2d034     04 4E 85 F1 | 	sub	fp, #4
2d038     10 18 06 F1 | 	add	arg04, #16
2d03c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d040     BF 18 06 F5 | 	and	arg04, #191
2d044     10 16 06 F1 | 	add	arg03, #16
2d048     0B 19 42 FC | 	wrbyte	arg04, arg03
2d04c                 | LR__4591
2d04c                 | LR__4592
2d04c                 | LR__4593
2d04c                 | ' 					dir = fp->dir_ptr;
2d04c                 | ' 					dir[ 11 ] |=  0x20 ;
2d04c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2d04c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2d04c                 | ' 					st_dword(dir +  22 , tm);
2d04c                 | ' 					st_word(dir +  18 , 0);
2d04c                 | ' 					fs->wflag = 1;
2d04c                 | ' 					res = sync_fs(fs);
2d04c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2d04c                 | ' 				}
2d04c                 | ' 			}
2d04c                 | ' 		}
2d04c                 | ' 	}
2d04c                 | ' 
2d04c                 | ' 	return res ;
2d04c     08 4E 05 F1 | 	add	fp, #8
2d050     A7 FA 01 FB | 	rdlong	result1, fp
2d054     08 4E 85 F1 | 	sub	fp, #8
2d058                 | LR__4594
2d058     A7 F0 03 F6 | 	mov	ptra, fp
2d05c     B2 00 A0 FD | 	call	#popregs_
2d060                 | _fatfs_cc_f_sync_ret
2d060     2D 00 64 FD | 	ret
2d064                 | 
2d064                 | _fatfs_cc_f_close
2d064     01 4A 05 F6 | 	mov	COUNT_, #1
2d068     A8 00 A0 FD | 	call	#pushregs_
2d06c     10 F0 07 F1 | 	add	ptra, #16
2d070     04 4E 05 F1 | 	add	fp, #4
2d074     A7 12 62 FC | 	wrlong	arg01, fp
2d078     04 4E 85 F1 | 	sub	fp, #4
2d07c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2d080     08 4E 05 F1 | 	add	fp, #8
2d084     A7 FA 61 FC | 	wrlong	result1, fp
2d088     08 4E 85 F1 | 	sub	fp, #8
2d08c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d090     38 00 90 5D |  if_ne	jmp	#LR__4600
2d094     04 4E 05 F1 | 	add	fp, #4
2d098     A7 12 02 FB | 	rdlong	arg01, fp
2d09c     08 4E 05 F1 | 	add	fp, #8
2d0a0     A7 14 02 F6 | 	mov	arg02, fp
2d0a4     0C 4E 85 F1 | 	sub	fp, #12
2d0a8     9C E6 BF FD | 	call	#_fatfs_cc_validate
2d0ac     08 4E 05 F1 | 	add	fp, #8
2d0b0     A7 FA 61 FC | 	wrlong	result1, fp
2d0b4     08 4E 85 F1 | 	sub	fp, #8
2d0b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d0bc     04 4E 05 A1 |  if_e	add	fp, #4
2d0c0     A7 1E 02 AB |  if_e	rdlong	local01, fp
2d0c4     04 4E 85 A1 |  if_e	sub	fp, #4
2d0c8     0F 01 68 AC |  if_e	wrlong	#0, local01
2d0cc                 | LR__4600
2d0cc                 | ' 
2d0cc                 | ' 
2d0cc                 | ' 
2d0cc                 | ' 
2d0cc                 | ' 			fp->obj.fs = 0;
2d0cc                 | ' #line 4192 "ff.c"
2d0cc                 | ' 		}
2d0cc                 | ' 	}
2d0cc                 | ' 	return res;
2d0cc     08 4E 05 F1 | 	add	fp, #8
2d0d0     A7 FA 01 FB | 	rdlong	result1, fp
2d0d4     08 4E 85 F1 | 	sub	fp, #8
2d0d8     A7 F0 03 F6 | 	mov	ptra, fp
2d0dc     B2 00 A0 FD | 	call	#popregs_
2d0e0                 | _fatfs_cc_f_close_ret
2d0e0     2D 00 64 FD | 	ret
2d0e4                 | 
2d0e4                 | _fatfs_cc_f_lseek
2d0e4     00 4A 05 F6 | 	mov	COUNT_, #0
2d0e8     A8 00 A0 FD | 	call	#pushregs_
2d0ec     24 F0 07 F1 | 	add	ptra, #36
2d0f0     04 4E 05 F1 | 	add	fp, #4
2d0f4     A7 12 62 FC | 	wrlong	arg01, fp
2d0f8     04 4E 05 F1 | 	add	fp, #4
2d0fc     A7 14 62 FC | 	wrlong	arg02, fp
2d100     04 4E 85 F1 | 	sub	fp, #4
2d104     A7 12 02 FB | 	rdlong	arg01, fp
2d108     0C 4E 05 F1 | 	add	fp, #12
2d10c     A7 14 02 F6 | 	mov	arg02, fp
2d110     10 4E 85 F1 | 	sub	fp, #16
2d114     30 E6 BF FD | 	call	#_fatfs_cc_validate
2d118     0C 4E 05 F1 | 	add	fp, #12
2d11c     A7 FA 61 FC | 	wrlong	result1, fp
2d120     0C 4E 85 F1 | 	sub	fp, #12
2d124     00 FA 0D F2 | 	cmp	result1, #0 wz
2d128     1C 00 90 5D |  if_ne	jmp	#LR__4610
2d12c     04 4E 05 F1 | 	add	fp, #4
2d130     A7 18 02 FB | 	rdlong	arg04, fp
2d134     11 18 06 F1 | 	add	arg04, #17
2d138     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d13c     08 4E 05 F1 | 	add	fp, #8
2d140     A7 18 62 FC | 	wrlong	arg04, fp
2d144     0C 4E 85 F1 | 	sub	fp, #12
2d148                 | LR__4610
2d148     0C 4E 05 F1 | 	add	fp, #12
2d14c     A7 18 0A FB | 	rdlong	arg04, fp wz
2d150     0C 4E 85 F1 | 	sub	fp, #12
2d154     0C 4E 05 51 |  if_ne	add	fp, #12
2d158     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2d15c     0C 4E 85 51 |  if_ne	sub	fp, #12
2d160     40 06 90 5D |  if_ne	jmp	#LR__4633
2d164     04 4E 05 F1 | 	add	fp, #4
2d168     A7 18 02 FB | 	rdlong	arg04, fp
2d16c     04 4E 05 F1 | 	add	fp, #4
2d170     A7 16 02 FB | 	rdlong	arg03, fp
2d174     08 4E 85 F1 | 	sub	fp, #8
2d178     0C 18 06 F1 | 	add	arg04, #12
2d17c     0C 19 02 FB | 	rdlong	arg04, arg04
2d180     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d184     3C 00 90 ED |  if_be	jmp	#LR__4611
2d188     04 4E 05 F1 | 	add	fp, #4
2d18c     A7 16 02 FB | 	rdlong	arg03, fp
2d190     04 4E 85 F1 | 	sub	fp, #4
2d194     10 16 06 F1 | 	add	arg03, #16
2d198     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d19c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2d1a0     02 16 CE F7 | 	test	arg03, #2 wz
2d1a4     1C 00 90 5D |  if_ne	jmp	#LR__4611
2d1a8     04 4E 05 F1 | 	add	fp, #4
2d1ac     A7 16 02 FB | 	rdlong	arg03, fp
2d1b0     0C 16 06 F1 | 	add	arg03, #12
2d1b4     0B 17 02 FB | 	rdlong	arg03, arg03
2d1b8     04 4E 05 F1 | 	add	fp, #4
2d1bc     A7 16 62 FC | 	wrlong	arg03, fp
2d1c0     08 4E 85 F1 | 	sub	fp, #8
2d1c4                 | LR__4611
2d1c4     04 4E 05 F1 | 	add	fp, #4
2d1c8     A7 16 02 FB | 	rdlong	arg03, fp
2d1cc     14 16 06 F1 | 	add	arg03, #20
2d1d0     0B 17 02 FB | 	rdlong	arg03, arg03
2d1d4     1C 4E 05 F1 | 	add	fp, #28
2d1d8     A7 16 62 FC | 	wrlong	arg03, fp
2d1dc     1C 4E 85 F1 | 	sub	fp, #28
2d1e0     A7 16 02 FB | 	rdlong	arg03, fp
2d1e4     18 4E 05 F1 | 	add	fp, #24
2d1e8     A7 00 68 FC | 	wrlong	#0, fp
2d1ec     14 16 06 F1 | 	add	arg03, #20
2d1f0     0B 01 68 FC | 	wrlong	#0, arg03
2d1f4     14 4E 85 F1 | 	sub	fp, #20
2d1f8     A7 16 02 FB | 	rdlong	arg03, fp
2d1fc     08 4E 85 F1 | 	sub	fp, #8
2d200     01 16 16 F2 | 	cmp	arg03, #1 wc
2d204     E4 03 90 CD |  if_b	jmp	#LR__4627
2d208     10 4E 05 F1 | 	add	fp, #16
2d20c     A7 16 02 FB | 	rdlong	arg03, fp
2d210     0A 16 06 F1 | 	add	arg03, #10
2d214     0B 19 E2 FA | 	rdword	arg04, arg03
2d218     09 18 66 F0 | 	shl	arg04, #9
2d21c     08 4E 05 F1 | 	add	fp, #8
2d220     A7 18 62 FC | 	wrlong	arg04, fp
2d224     08 4E 05 F1 | 	add	fp, #8
2d228     A7 18 02 FB | 	rdlong	arg04, fp
2d22c     20 4E 85 F1 | 	sub	fp, #32
2d230     01 18 16 F2 | 	cmp	arg04, #1 wc
2d234     AC 00 90 CD |  if_b	jmp	#LR__4612
2d238     08 4E 05 F1 | 	add	fp, #8
2d23c     A7 18 02 FB | 	rdlong	arg04, fp
2d240     01 18 86 F1 | 	sub	arg04, #1
2d244     10 4E 05 F1 | 	add	fp, #16
2d248     A7 16 02 FB | 	rdlong	arg03, fp
2d24c     0B 19 12 FD | 	qdiv	arg04, arg03
2d250     08 4E 05 F1 | 	add	fp, #8
2d254     A7 FA 01 FB | 	rdlong	result1, fp
2d258     01 FA 85 F1 | 	sub	result1, #1
2d25c     18 18 62 FD | 	getqx	arg04
2d260     0B FB 11 FD | 	qdiv	result1, arg03
2d264     20 4E 85 F1 | 	sub	fp, #32
2d268     18 16 62 FD | 	getqx	arg03
2d26c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d270     70 00 90 CD |  if_b	jmp	#LR__4612
2d274     04 4E 05 F1 | 	add	fp, #4
2d278     A7 16 02 FB | 	rdlong	arg03, fp
2d27c     1C 4E 05 F1 | 	add	fp, #28
2d280     A7 FA 01 FB | 	rdlong	result1, fp
2d284     01 FA 85 F1 | 	sub	result1, #1
2d288     08 4E 85 F1 | 	sub	fp, #8
2d28c     A7 18 02 FB | 	rdlong	arg04, fp
2d290     01 18 86 F1 | 	sub	arg04, #1
2d294     0C FB 21 F5 | 	andn	result1, arg04
2d298     14 16 06 F1 | 	add	arg03, #20
2d29c     0B FB 61 FC | 	wrlong	result1, arg03
2d2a0     10 4E 85 F1 | 	sub	fp, #16
2d2a4     A7 16 02 FB | 	rdlong	arg03, fp
2d2a8     04 4E 85 F1 | 	sub	fp, #4
2d2ac     A7 18 02 FB | 	rdlong	arg04, fp
2d2b0     14 18 06 F1 | 	add	arg04, #20
2d2b4     0C 19 02 FB | 	rdlong	arg04, arg04
2d2b8     0C 17 82 F1 | 	sub	arg03, arg04
2d2bc     04 4E 05 F1 | 	add	fp, #4
2d2c0     A7 16 62 FC | 	wrlong	arg03, fp
2d2c4     04 4E 85 F1 | 	sub	fp, #4
2d2c8     A7 16 02 FB | 	rdlong	arg03, fp
2d2cc     18 16 06 F1 | 	add	arg03, #24
2d2d0     0B 17 02 FB | 	rdlong	arg03, arg03
2d2d4     10 4E 05 F1 | 	add	fp, #16
2d2d8     A7 16 62 FC | 	wrlong	arg03, fp
2d2dc     14 4E 85 F1 | 	sub	fp, #20
2d2e0     D0 00 90 FD | 	jmp	#LR__4616
2d2e4                 | LR__4612
2d2e4     04 4E 05 F1 | 	add	fp, #4
2d2e8     A7 16 02 FB | 	rdlong	arg03, fp
2d2ec     08 16 06 F1 | 	add	arg03, #8
2d2f0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d2f4     10 4E 05 F1 | 	add	fp, #16
2d2f8     A7 16 62 FC | 	wrlong	arg03, fp
2d2fc     14 4E 85 F1 | 	sub	fp, #20
2d300     94 00 90 5D |  if_ne	jmp	#LR__4615
2d304     04 4E 05 F1 | 	add	fp, #4
2d308     A7 12 02 FB | 	rdlong	arg01, fp
2d30c     04 4E 85 F1 | 	sub	fp, #4
2d310     00 14 06 F6 | 	mov	arg02, #0
2d314     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d318     14 4E 05 F1 | 	add	fp, #20
2d31c     A7 FA 61 FC | 	wrlong	result1, fp
2d320     14 4E 85 F1 | 	sub	fp, #20
2d324     01 FA 0D F2 | 	cmp	result1, #1 wz
2d328     1C 00 90 5D |  if_ne	jmp	#LR__4613
2d32c     04 4E 05 F1 | 	add	fp, #4
2d330     A7 16 02 FB | 	rdlong	arg03, fp
2d334     04 4E 85 F1 | 	sub	fp, #4
2d338     11 16 06 F1 | 	add	arg03, #17
2d33c     0B 05 48 FC | 	wrbyte	#2, arg03
2d340     02 FA 05 F6 | 	mov	result1, #2
2d344     5C 04 90 FD | 	jmp	#LR__4633
2d348                 | LR__4613
2d348     14 4E 05 F1 | 	add	fp, #20
2d34c     A7 FA 01 FB | 	rdlong	result1, fp
2d350     14 4E 85 F1 | 	sub	fp, #20
2d354     FF FF 7F FF 
2d358     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d35c     1C 00 90 5D |  if_ne	jmp	#LR__4614
2d360     04 4E 05 F1 | 	add	fp, #4
2d364     A7 16 02 FB | 	rdlong	arg03, fp
2d368     04 4E 85 F1 | 	sub	fp, #4
2d36c     11 16 06 F1 | 	add	arg03, #17
2d370     0B 03 48 FC | 	wrbyte	#1, arg03
2d374     01 FA 05 F6 | 	mov	result1, #1
2d378     28 04 90 FD | 	jmp	#LR__4633
2d37c                 | LR__4614
2d37c     04 4E 05 F1 | 	add	fp, #4
2d380     A7 16 02 FB | 	rdlong	arg03, fp
2d384     10 4E 05 F1 | 	add	fp, #16
2d388     A7 18 02 FB | 	rdlong	arg04, fp
2d38c     14 4E 85 F1 | 	sub	fp, #20
2d390     08 16 06 F1 | 	add	arg03, #8
2d394     0B 19 62 FC | 	wrlong	arg04, arg03
2d398                 | LR__4615
2d398     04 4E 05 F1 | 	add	fp, #4
2d39c     A7 16 02 FB | 	rdlong	arg03, fp
2d3a0     10 4E 05 F1 | 	add	fp, #16
2d3a4     A7 18 02 FB | 	rdlong	arg04, fp
2d3a8     14 4E 85 F1 | 	sub	fp, #20
2d3ac     18 16 06 F1 | 	add	arg03, #24
2d3b0     0B 19 62 FC | 	wrlong	arg04, arg03
2d3b4                 | LR__4616
2d3b4     14 4E 05 F1 | 	add	fp, #20
2d3b8     A7 16 0A FB | 	rdlong	arg03, fp wz
2d3bc     14 4E 85 F1 | 	sub	fp, #20
2d3c0     28 02 90 AD |  if_e	jmp	#LR__4626
2d3c4                 | ' 				while (ofs > bcs) {
2d3c4                 | LR__4617
2d3c4     08 4E 05 F1 | 	add	fp, #8
2d3c8     A7 18 02 FB | 	rdlong	arg04, fp
2d3cc     10 4E 05 F1 | 	add	fp, #16
2d3d0     A7 16 02 FB | 	rdlong	arg03, fp
2d3d4     18 4E 85 F1 | 	sub	fp, #24
2d3d8     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d3dc     68 01 90 ED |  if_be	jmp	#LR__4623
2d3e0     08 4E 05 F1 | 	add	fp, #8
2d3e4     A7 18 02 FB | 	rdlong	arg04, fp
2d3e8     10 4E 05 F1 | 	add	fp, #16
2d3ec     A7 16 02 FB | 	rdlong	arg03, fp
2d3f0     0B 19 82 F1 | 	sub	arg04, arg03
2d3f4     10 4E 85 F1 | 	sub	fp, #16
2d3f8     A7 18 62 FC | 	wrlong	arg04, fp
2d3fc     04 4E 85 F1 | 	sub	fp, #4
2d400     A7 18 02 FB | 	rdlong	arg04, fp
2d404     0C FB 01 F6 | 	mov	result1, arg04
2d408     14 18 06 F1 | 	add	arg04, #20
2d40c     0C 19 02 FB | 	rdlong	arg04, arg04
2d410     14 4E 05 F1 | 	add	fp, #20
2d414     A7 16 02 FB | 	rdlong	arg03, fp
2d418     0B 19 02 F1 | 	add	arg04, arg03
2d41c     14 FA 05 F1 | 	add	result1, #20
2d420     FD 18 62 FC | 	wrlong	arg04, result1
2d424     14 4E 85 F1 | 	sub	fp, #20
2d428     A7 16 02 FB | 	rdlong	arg03, fp
2d42c     04 4E 85 F1 | 	sub	fp, #4
2d430     10 16 06 F1 | 	add	arg03, #16
2d434     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d438     02 16 CE F7 | 	test	arg03, #2 wz
2d43c     3C 00 90 AD |  if_e	jmp	#LR__4618
2d440     04 4E 05 F1 | 	add	fp, #4
2d444     A7 12 02 FB | 	rdlong	arg01, fp
2d448     10 4E 05 F1 | 	add	fp, #16
2d44c     A7 14 02 FB | 	rdlong	arg02, fp
2d450     14 4E 85 F1 | 	sub	fp, #20
2d454     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d458     14 4E 05 F1 | 	add	fp, #20
2d45c     A7 FA 61 FC | 	wrlong	result1, fp
2d460     00 FA 4D F2 | 	cmps	result1, #0 wz
2d464     14 4E 85 F1 | 	sub	fp, #20
2d468     08 4E 05 A1 |  if_e	add	fp, #8
2d46c     A7 00 68 AC |  if_e	wrlong	#0, fp
2d470     08 4E 85 A1 |  if_e	sub	fp, #8
2d474                 | ' 							ofs = 0; break;
2d474     D0 00 90 AD |  if_e	jmp	#LR__4623
2d478     24 00 90 FD | 	jmp	#LR__4619
2d47c                 | LR__4618
2d47c     04 4E 05 F1 | 	add	fp, #4
2d480     A7 12 02 FB | 	rdlong	arg01, fp
2d484     10 4E 05 F1 | 	add	fp, #16
2d488     A7 14 02 FB | 	rdlong	arg02, fp
2d48c     14 4E 85 F1 | 	sub	fp, #20
2d490     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d494     14 4E 05 F1 | 	add	fp, #20
2d498     A7 FA 61 FC | 	wrlong	result1, fp
2d49c     14 4E 85 F1 | 	sub	fp, #20
2d4a0                 | LR__4619
2d4a0     14 4E 05 F1 | 	add	fp, #20
2d4a4     A7 16 02 FB | 	rdlong	arg03, fp
2d4a8     14 4E 85 F1 | 	sub	fp, #20
2d4ac     FF FF 7F FF 
2d4b0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d4b4     1C 00 90 5D |  if_ne	jmp	#LR__4620
2d4b8     04 4E 05 F1 | 	add	fp, #4
2d4bc     A7 16 02 FB | 	rdlong	arg03, fp
2d4c0     04 4E 85 F1 | 	sub	fp, #4
2d4c4     11 16 06 F1 | 	add	arg03, #17
2d4c8     0B 03 48 FC | 	wrbyte	#1, arg03
2d4cc     01 FA 05 F6 | 	mov	result1, #1
2d4d0     D0 02 90 FD | 	jmp	#LR__4633
2d4d4                 | LR__4620
2d4d4     14 4E 05 F1 | 	add	fp, #20
2d4d8     A7 16 02 FB | 	rdlong	arg03, fp
2d4dc     14 4E 85 F1 | 	sub	fp, #20
2d4e0     02 16 16 F2 | 	cmp	arg03, #2 wc
2d4e4     24 00 90 CD |  if_b	jmp	#LR__4621
2d4e8     10 4E 05 F1 | 	add	fp, #16
2d4ec     A7 18 02 FB | 	rdlong	arg04, fp
2d4f0     04 4E 05 F1 | 	add	fp, #4
2d4f4     A7 16 02 FB | 	rdlong	arg03, fp
2d4f8     14 4E 85 F1 | 	sub	fp, #20
2d4fc     18 18 06 F1 | 	add	arg04, #24
2d500     0C 19 02 FB | 	rdlong	arg04, arg04
2d504     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d508     1C 00 90 CD |  if_b	jmp	#LR__4622
2d50c                 | LR__4621
2d50c     04 4E 05 F1 | 	add	fp, #4
2d510     A7 16 02 FB | 	rdlong	arg03, fp
2d514     04 4E 85 F1 | 	sub	fp, #4
2d518     11 16 06 F1 | 	add	arg03, #17
2d51c     0B 05 48 FC | 	wrbyte	#2, arg03
2d520     02 FA 05 F6 | 	mov	result1, #2
2d524     7C 02 90 FD | 	jmp	#LR__4633
2d528                 | LR__4622
2d528     04 4E 05 F1 | 	add	fp, #4
2d52c     A7 18 02 FB | 	rdlong	arg04, fp
2d530     10 4E 05 F1 | 	add	fp, #16
2d534     A7 16 02 FB | 	rdlong	arg03, fp
2d538     14 4E 85 F1 | 	sub	fp, #20
2d53c     18 18 06 F1 | 	add	arg04, #24
2d540     0C 17 62 FC | 	wrlong	arg03, arg04
2d544     7C FE 9F FD | 	jmp	#LR__4617
2d548                 | LR__4623
2d548     04 4E 05 F1 | 	add	fp, #4
2d54c     A7 16 02 FB | 	rdlong	arg03, fp
2d550     0B 13 02 F6 | 	mov	arg01, arg03
2d554     14 16 06 F1 | 	add	arg03, #20
2d558     0B 15 02 FB | 	rdlong	arg02, arg03
2d55c     04 4E 05 F1 | 	add	fp, #4
2d560     A7 16 02 FB | 	rdlong	arg03, fp
2d564     0B 15 02 F1 | 	add	arg02, arg03
2d568     14 12 06 F1 | 	add	arg01, #20
2d56c     09 15 62 FC | 	wrlong	arg02, arg01
2d570     A7 16 02 FB | 	rdlong	arg03, fp
2d574     08 4E 85 F1 | 	sub	fp, #8
2d578     FF 17 CE F7 | 	test	arg03, #511 wz
2d57c     6C 00 90 AD |  if_e	jmp	#LR__4625
2d580     10 4E 05 F1 | 	add	fp, #16
2d584     A7 12 02 FB | 	rdlong	arg01, fp
2d588     04 4E 05 F1 | 	add	fp, #4
2d58c     A7 14 02 FB | 	rdlong	arg02, fp
2d590     14 4E 85 F1 | 	sub	fp, #20
2d594     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d598     1C 4E 05 F1 | 	add	fp, #28
2d59c     A7 FA 61 FC | 	wrlong	result1, fp
2d5a0     1C 4E 85 F1 | 	sub	fp, #28
2d5a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5a8     1C 00 90 5D |  if_ne	jmp	#LR__4624
2d5ac     04 4E 05 F1 | 	add	fp, #4
2d5b0     A7 16 02 FB | 	rdlong	arg03, fp
2d5b4     04 4E 85 F1 | 	sub	fp, #4
2d5b8     11 16 06 F1 | 	add	arg03, #17
2d5bc     0B 05 48 FC | 	wrbyte	#2, arg03
2d5c0     02 FA 05 F6 | 	mov	result1, #2
2d5c4     DC 01 90 FD | 	jmp	#LR__4633
2d5c8                 | LR__4624
2d5c8     1C 4E 05 F1 | 	add	fp, #28
2d5cc     A7 18 02 FB | 	rdlong	arg04, fp
2d5d0     14 4E 85 F1 | 	sub	fp, #20
2d5d4     A7 16 02 FB | 	rdlong	arg03, fp
2d5d8     09 16 46 F0 | 	shr	arg03, #9
2d5dc     0B 19 02 F1 | 	add	arg04, arg03
2d5e0     14 4E 05 F1 | 	add	fp, #20
2d5e4     A7 18 62 FC | 	wrlong	arg04, fp
2d5e8     1C 4E 85 F1 | 	sub	fp, #28
2d5ec                 | LR__4625
2d5ec                 | LR__4626
2d5ec                 | LR__4627
2d5ec     04 4E 05 F1 | 	add	fp, #4
2d5f0     A7 18 02 FB | 	rdlong	arg04, fp
2d5f4     0C 17 02 F6 | 	mov	arg03, arg04
2d5f8     04 4E 85 F1 | 	sub	fp, #4
2d5fc     14 16 06 F1 | 	add	arg03, #20
2d600     0B 17 02 FB | 	rdlong	arg03, arg03
2d604     0C 18 06 F1 | 	add	arg04, #12
2d608     0C 19 02 FB | 	rdlong	arg04, arg04
2d60c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d610     3C 00 90 ED |  if_be	jmp	#LR__4628
2d614     04 4E 05 F1 | 	add	fp, #4
2d618     A7 18 02 FB | 	rdlong	arg04, fp
2d61c     0C 17 02 F6 | 	mov	arg03, arg04
2d620     14 18 06 F1 | 	add	arg04, #20
2d624     0C 19 02 FB | 	rdlong	arg04, arg04
2d628     0C 16 06 F1 | 	add	arg03, #12
2d62c     0B 19 62 FC | 	wrlong	arg04, arg03
2d630     A7 18 02 FB | 	rdlong	arg04, fp
2d634     0C 17 02 F6 | 	mov	arg03, arg04
2d638     04 4E 85 F1 | 	sub	fp, #4
2d63c     10 18 06 F1 | 	add	arg04, #16
2d640     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d644     40 18 46 F5 | 	or	arg04, #64
2d648     10 16 06 F1 | 	add	arg03, #16
2d64c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d650                 | LR__4628
2d650     04 4E 05 F1 | 	add	fp, #4
2d654     A7 16 02 FB | 	rdlong	arg03, fp
2d658     04 4E 85 F1 | 	sub	fp, #4
2d65c     14 16 06 F1 | 	add	arg03, #20
2d660     0B 17 02 FB | 	rdlong	arg03, arg03
2d664     FF 17 CE F7 | 	test	arg03, #511 wz
2d668     2C 01 90 AD |  if_e	jmp	#LR__4632
2d66c     04 4E 05 F1 | 	add	fp, #4
2d670     A7 18 02 FB | 	rdlong	arg04, fp
2d674     18 4E 05 F1 | 	add	fp, #24
2d678     A7 16 02 FB | 	rdlong	arg03, fp
2d67c     1C 4E 85 F1 | 	sub	fp, #28
2d680     1C 18 06 F1 | 	add	arg04, #28
2d684     0C 19 02 FB | 	rdlong	arg04, arg04
2d688     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d68c     08 01 90 AD |  if_e	jmp	#LR__4632
2d690     04 4E 05 F1 | 	add	fp, #4
2d694     A7 16 02 FB | 	rdlong	arg03, fp
2d698     04 4E 85 F1 | 	sub	fp, #4
2d69c     10 16 06 F1 | 	add	arg03, #16
2d6a0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d6a4     80 16 CE F7 | 	test	arg03, #128 wz
2d6a8     7C 00 90 AD |  if_e	jmp	#LR__4630
2d6ac     10 4E 05 F1 | 	add	fp, #16
2d6b0     A7 16 02 FB | 	rdlong	arg03, fp
2d6b4     01 16 06 F1 | 	add	arg03, #1
2d6b8     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d6bc     0C 4E 85 F1 | 	sub	fp, #12
2d6c0     A7 16 02 FB | 	rdlong	arg03, fp
2d6c4     0B 15 02 F6 | 	mov	arg02, arg03
2d6c8     28 14 06 F1 | 	add	arg02, #40
2d6cc     04 4E 85 F1 | 	sub	fp, #4
2d6d0     1C 16 06 F1 | 	add	arg03, #28
2d6d4     0B 17 02 FB | 	rdlong	arg03, arg03
2d6d8     01 18 06 F6 | 	mov	arg04, #1
2d6dc     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d6e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6e4     1C 00 90 AD |  if_e	jmp	#LR__4629
2d6e8     04 4E 05 F1 | 	add	fp, #4
2d6ec     A7 16 02 FB | 	rdlong	arg03, fp
2d6f0     04 4E 85 F1 | 	sub	fp, #4
2d6f4     11 16 06 F1 | 	add	arg03, #17
2d6f8     0B 03 48 FC | 	wrbyte	#1, arg03
2d6fc     01 FA 05 F6 | 	mov	result1, #1
2d700     A0 00 90 FD | 	jmp	#LR__4633
2d704                 | LR__4629
2d704     04 4E 05 F1 | 	add	fp, #4
2d708     A7 18 02 FB | 	rdlong	arg04, fp
2d70c     0C 17 02 F6 | 	mov	arg03, arg04
2d710     04 4E 85 F1 | 	sub	fp, #4
2d714     10 18 06 F1 | 	add	arg04, #16
2d718     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d71c     7F 18 06 F5 | 	and	arg04, #127
2d720     10 16 06 F1 | 	add	arg03, #16
2d724     0B 19 42 FC | 	wrbyte	arg04, arg03
2d728                 | LR__4630
2d728     10 4E 05 F1 | 	add	fp, #16
2d72c     A7 16 02 FB | 	rdlong	arg03, fp
2d730     01 16 06 F1 | 	add	arg03, #1
2d734     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d738     0C 4E 85 F1 | 	sub	fp, #12
2d73c     A7 14 02 FB | 	rdlong	arg02, fp
2d740     28 14 06 F1 | 	add	arg02, #40
2d744     18 4E 05 F1 | 	add	fp, #24
2d748     A7 16 02 FB | 	rdlong	arg03, fp
2d74c     1C 4E 85 F1 | 	sub	fp, #28
2d750     01 18 06 F6 | 	mov	arg04, #1
2d754     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d758     00 FA 0D F2 | 	cmp	result1, #0 wz
2d75c     1C 00 90 AD |  if_e	jmp	#LR__4631
2d760     04 4E 05 F1 | 	add	fp, #4
2d764     A7 16 02 FB | 	rdlong	arg03, fp
2d768     04 4E 85 F1 | 	sub	fp, #4
2d76c     11 16 06 F1 | 	add	arg03, #17
2d770     0B 03 48 FC | 	wrbyte	#1, arg03
2d774     01 FA 05 F6 | 	mov	result1, #1
2d778     28 00 90 FD | 	jmp	#LR__4633
2d77c                 | LR__4631
2d77c     04 4E 05 F1 | 	add	fp, #4
2d780     A7 18 02 FB | 	rdlong	arg04, fp
2d784     18 4E 05 F1 | 	add	fp, #24
2d788     A7 16 02 FB | 	rdlong	arg03, fp
2d78c     1C 4E 85 F1 | 	sub	fp, #28
2d790     1C 18 06 F1 | 	add	arg04, #28
2d794     0C 17 62 FC | 	wrlong	arg03, arg04
2d798                 | LR__4632
2d798                 | ' 
2d798                 | ' 			fp->sect = nsect;
2d798                 | ' 		}
2d798                 | ' 	}
2d798                 | ' 
2d798                 | ' 	return res ;
2d798     0C 4E 05 F1 | 	add	fp, #12
2d79c     A7 FA 01 FB | 	rdlong	result1, fp
2d7a0     0C 4E 85 F1 | 	sub	fp, #12
2d7a4                 | LR__4633
2d7a4     A7 F0 03 F6 | 	mov	ptra, fp
2d7a8     B2 00 A0 FD | 	call	#popregs_
2d7ac                 | _fatfs_cc_f_lseek_ret
2d7ac     2D 00 64 FD | 	ret
2d7b0                 | 
2d7b0                 | _fatfs_cc_f_opendir
2d7b0     01 4A 05 F6 | 	mov	COUNT_, #1
2d7b4     A8 00 A0 FD | 	call	#pushregs_
2d7b8     14 F0 07 F1 | 	add	ptra, #20
2d7bc     04 4E 05 F1 | 	add	fp, #4
2d7c0     A7 12 62 FC | 	wrlong	arg01, fp
2d7c4     04 4E 05 F1 | 	add	fp, #4
2d7c8     A7 14 62 FC | 	wrlong	arg02, fp
2d7cc     04 4E 85 F1 | 	sub	fp, #4
2d7d0     A7 16 0A FB | 	rdlong	arg03, fp wz
2d7d4     04 4E 85 F1 | 	sub	fp, #4
2d7d8     09 FA 05 A6 |  if_e	mov	result1, #9
2d7dc     78 01 90 AD |  if_e	jmp	#LR__4646
2d7e0     08 4E 05 F1 | 	add	fp, #8
2d7e4     A7 12 02 F6 | 	mov	arg01, fp
2d7e8     08 4E 05 F1 | 	add	fp, #8
2d7ec     A7 14 02 F6 | 	mov	arg02, fp
2d7f0     10 4E 85 F1 | 	sub	fp, #16
2d7f4     00 16 06 F6 | 	mov	arg03, #0
2d7f8     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d7fc     0C 4E 05 F1 | 	add	fp, #12
2d800     A7 FA 61 FC | 	wrlong	result1, fp
2d804     0C 4E 85 F1 | 	sub	fp, #12
2d808     00 FA 0D F2 | 	cmp	result1, #0 wz
2d80c     20 01 90 5D |  if_ne	jmp	#LR__4645
2d810     04 4E 05 F1 | 	add	fp, #4
2d814     A7 16 02 FB | 	rdlong	arg03, fp
2d818     0C 4E 05 F1 | 	add	fp, #12
2d81c     A7 FA 01 FB | 	rdlong	result1, fp
2d820     0B FB 61 FC | 	wrlong	result1, arg03
2d824     0C 4E 85 F1 | 	sub	fp, #12
2d828     A7 12 02 FB | 	rdlong	arg01, fp
2d82c     04 4E 05 F1 | 	add	fp, #4
2d830     A7 14 02 FB | 	rdlong	arg02, fp
2d834     08 4E 85 F1 | 	sub	fp, #8
2d838     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d83c     0C 4E 05 F1 | 	add	fp, #12
2d840     A7 FA 61 FC | 	wrlong	result1, fp
2d844     0C 4E 85 F1 | 	sub	fp, #12
2d848     00 FA 0D F2 | 	cmp	result1, #0 wz
2d84c     C4 00 90 5D |  if_ne	jmp	#LR__4644
2d850     04 4E 05 F1 | 	add	fp, #4
2d854     A7 16 02 FB | 	rdlong	arg03, fp
2d858     04 4E 85 F1 | 	sub	fp, #4
2d85c     2B 16 06 F1 | 	add	arg03, #43
2d860     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d864     80 16 CE F7 | 	test	arg03, #128 wz
2d868     58 00 90 5D |  if_ne	jmp	#LR__4642
2d86c     04 4E 05 F1 | 	add	fp, #4
2d870     A7 16 02 FB | 	rdlong	arg03, fp
2d874     04 4E 85 F1 | 	sub	fp, #4
2d878     06 16 06 F1 | 	add	arg03, #6
2d87c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d880     10 16 CE F7 | 	test	arg03, #16 wz
2d884     30 00 90 AD |  if_e	jmp	#LR__4640
2d888     04 4E 05 F1 | 	add	fp, #4
2d88c     A7 16 02 FB | 	rdlong	arg03, fp
2d890     0B 1F 02 F6 | 	mov	local01, arg03
2d894     0C 4E 05 F1 | 	add	fp, #12
2d898     A7 12 02 FB | 	rdlong	arg01, fp
2d89c     10 4E 85 F1 | 	sub	fp, #16
2d8a0     1C 16 06 F1 | 	add	arg03, #28
2d8a4     0B 15 02 FB | 	rdlong	arg02, arg03
2d8a8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d8ac     08 1E 06 F1 | 	add	local01, #8
2d8b0     0F FB 61 FC | 	wrlong	result1, local01
2d8b4     0C 00 90 FD | 	jmp	#LR__4641
2d8b8                 | LR__4640
2d8b8     0C 4E 05 F1 | 	add	fp, #12
2d8bc     A7 0A 68 FC | 	wrlong	#5, fp
2d8c0     0C 4E 85 F1 | 	sub	fp, #12
2d8c4                 | LR__4641
2d8c4                 | LR__4642
2d8c4     0C 4E 05 F1 | 	add	fp, #12
2d8c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2d8cc     0C 4E 85 F1 | 	sub	fp, #12
2d8d0     40 00 90 5D |  if_ne	jmp	#LR__4643
2d8d4     04 4E 05 F1 | 	add	fp, #4
2d8d8     A7 1E 02 FB | 	rdlong	local01, fp
2d8dc     0C 4E 05 F1 | 	add	fp, #12
2d8e0     A7 16 02 FB | 	rdlong	arg03, fp
2d8e4     06 16 06 F1 | 	add	arg03, #6
2d8e8     0B 17 E2 FA | 	rdword	arg03, arg03
2d8ec     04 1E 06 F1 | 	add	local01, #4
2d8f0     0F 17 52 FC | 	wrword	arg03, local01
2d8f4     0C 4E 85 F1 | 	sub	fp, #12
2d8f8     A7 12 02 FB | 	rdlong	arg01, fp
2d8fc     04 4E 85 F1 | 	sub	fp, #4
2d900     00 14 06 F6 | 	mov	arg02, #0
2d904     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d908     0C 4E 05 F1 | 	add	fp, #12
2d90c     A7 FA 61 FC | 	wrlong	result1, fp
2d910     0C 4E 85 F1 | 	sub	fp, #12
2d914                 | LR__4643
2d914                 | LR__4644
2d914     0C 4E 05 F1 | 	add	fp, #12
2d918     A7 1E 02 FB | 	rdlong	local01, fp
2d91c     0C 4E 85 F1 | 	sub	fp, #12
2d920     04 1E 0E F2 | 	cmp	local01, #4 wz
2d924     0C 4E 05 A1 |  if_e	add	fp, #12
2d928     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d92c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d930                 | LR__4645
2d930     0C 4E 05 F1 | 	add	fp, #12
2d934     A7 1E 0A FB | 	rdlong	local01, fp wz
2d938     0C 4E 85 F1 | 	sub	fp, #12
2d93c     04 4E 05 51 |  if_ne	add	fp, #4
2d940     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d944     04 4E 85 51 |  if_ne	sub	fp, #4
2d948     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d94c                 | ' 
2d94c                 | ' 	return res ;
2d94c     0C 4E 05 F1 | 	add	fp, #12
2d950     A7 FA 01 FB | 	rdlong	result1, fp
2d954     0C 4E 85 F1 | 	sub	fp, #12
2d958                 | LR__4646
2d958     A7 F0 03 F6 | 	mov	ptra, fp
2d95c     B2 00 A0 FD | 	call	#popregs_
2d960                 | _fatfs_cc_f_opendir_ret
2d960     2D 00 64 FD | 	ret
2d964                 | 
2d964                 | _fatfs_cc_f_closedir
2d964     00 4A 05 F6 | 	mov	COUNT_, #0
2d968     A8 00 A0 FD | 	call	#pushregs_
2d96c     10 F0 07 F1 | 	add	ptra, #16
2d970     04 4E 05 F1 | 	add	fp, #4
2d974     A7 12 62 FC | 	wrlong	arg01, fp
2d978     08 4E 05 F1 | 	add	fp, #8
2d97c     A7 14 02 F6 | 	mov	arg02, fp
2d980     0C 4E 85 F1 | 	sub	fp, #12
2d984     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d988     08 4E 05 F1 | 	add	fp, #8
2d98c     A7 FA 61 FC | 	wrlong	result1, fp
2d990     08 4E 85 F1 | 	sub	fp, #8
2d994     00 FA 0D F2 | 	cmp	result1, #0 wz
2d998     04 4E 05 A1 |  if_e	add	fp, #4
2d99c     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d9a0     04 4E 85 A1 |  if_e	sub	fp, #4
2d9a4     FD 00 68 AC |  if_e	wrlong	#0, result1
2d9a8                 | ' 
2d9a8                 | ' 
2d9a8                 | ' 
2d9a8                 | ' 
2d9a8                 | ' 		dp->obj.fs = 0;
2d9a8                 | ' #line 4633 "ff.c"
2d9a8                 | ' 	}
2d9a8                 | ' 	return res;
2d9a8     08 4E 05 F1 | 	add	fp, #8
2d9ac     A7 FA 01 FB | 	rdlong	result1, fp
2d9b0     08 4E 85 F1 | 	sub	fp, #8
2d9b4     A7 F0 03 F6 | 	mov	ptra, fp
2d9b8     B2 00 A0 FD | 	call	#popregs_
2d9bc                 | _fatfs_cc_f_closedir_ret
2d9bc     2D 00 64 FD | 	ret
2d9c0                 | 
2d9c0                 | _fatfs_cc_f_readdir
2d9c0     00 4A 05 F6 | 	mov	COUNT_, #0
2d9c4     A8 00 A0 FD | 	call	#pushregs_
2d9c8     14 F0 07 F1 | 	add	ptra, #20
2d9cc     04 4E 05 F1 | 	add	fp, #4
2d9d0     A7 12 62 FC | 	wrlong	arg01, fp
2d9d4     04 4E 05 F1 | 	add	fp, #4
2d9d8     A7 14 62 FC | 	wrlong	arg02, fp
2d9dc     04 4E 85 F1 | 	sub	fp, #4
2d9e0     A7 12 02 FB | 	rdlong	arg01, fp
2d9e4     0C 4E 05 F1 | 	add	fp, #12
2d9e8     A7 14 02 F6 | 	mov	arg02, fp
2d9ec     10 4E 85 F1 | 	sub	fp, #16
2d9f0     54 DD BF FD | 	call	#_fatfs_cc_validate
2d9f4     0C 4E 05 F1 | 	add	fp, #12
2d9f8     A7 FA 61 FC | 	wrlong	result1, fp
2d9fc     0C 4E 85 F1 | 	sub	fp, #12
2da00     00 FA 0D F2 | 	cmp	result1, #0 wz
2da04     BC 00 90 5D |  if_ne	jmp	#LR__4653
2da08     08 4E 05 F1 | 	add	fp, #8
2da0c     A7 FA 09 FB | 	rdlong	result1, fp wz
2da10     08 4E 85 F1 | 	sub	fp, #8
2da14     24 00 90 5D |  if_ne	jmp	#LR__4650
2da18     04 4E 05 F1 | 	add	fp, #4
2da1c     A7 12 02 FB | 	rdlong	arg01, fp
2da20     04 4E 85 F1 | 	sub	fp, #4
2da24     00 14 06 F6 | 	mov	arg02, #0
2da28     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2da2c     0C 4E 05 F1 | 	add	fp, #12
2da30     A7 FA 61 FC | 	wrlong	result1, fp
2da34     0C 4E 85 F1 | 	sub	fp, #12
2da38     88 00 90 FD | 	jmp	#LR__4652
2da3c                 | LR__4650
2da3c     04 4E 05 F1 | 	add	fp, #4
2da40     A7 12 02 FB | 	rdlong	arg01, fp
2da44     04 4E 85 F1 | 	sub	fp, #4
2da48     00 14 06 F6 | 	mov	arg02, #0
2da4c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2da50     0C 4E 05 F1 | 	add	fp, #12
2da54     A7 FA 61 FC | 	wrlong	result1, fp
2da58     0C 4E 85 F1 | 	sub	fp, #12
2da5c     04 FA 0D F2 | 	cmp	result1, #4 wz
2da60     0C 4E 05 A1 |  if_e	add	fp, #12
2da64     A7 00 68 AC |  if_e	wrlong	#0, fp
2da68     0C 4E 85 A1 |  if_e	sub	fp, #12
2da6c     0C 4E 05 F1 | 	add	fp, #12
2da70     A7 FA 09 FB | 	rdlong	result1, fp wz
2da74     0C 4E 85 F1 | 	sub	fp, #12
2da78     48 00 90 5D |  if_ne	jmp	#LR__4651
2da7c     04 4E 05 F1 | 	add	fp, #4
2da80     A7 12 02 FB | 	rdlong	arg01, fp
2da84     04 4E 05 F1 | 	add	fp, #4
2da88     A7 14 02 FB | 	rdlong	arg02, fp
2da8c     08 4E 85 F1 | 	sub	fp, #8
2da90     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2da94     04 4E 05 F1 | 	add	fp, #4
2da98     A7 12 02 FB | 	rdlong	arg01, fp
2da9c     04 4E 85 F1 | 	sub	fp, #4
2daa0     00 14 06 F6 | 	mov	arg02, #0
2daa4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2daa8     0C 4E 05 F1 | 	add	fp, #12
2daac     A7 FA 61 FC | 	wrlong	result1, fp
2dab0     0C 4E 85 F1 | 	sub	fp, #12
2dab4     04 FA 0D F2 | 	cmp	result1, #4 wz
2dab8     0C 4E 05 A1 |  if_e	add	fp, #12
2dabc     A7 00 68 AC |  if_e	wrlong	#0, fp
2dac0     0C 4E 85 A1 |  if_e	sub	fp, #12
2dac4                 | LR__4651
2dac4                 | LR__4652
2dac4                 | LR__4653
2dac4                 | ' 			}
2dac4                 | ' 			;
2dac4                 | ' 		}
2dac4                 | ' 	}
2dac4                 | ' 	return res ;
2dac4     0C 4E 05 F1 | 	add	fp, #12
2dac8     A7 FA 01 FB | 	rdlong	result1, fp
2dacc     0C 4E 85 F1 | 	sub	fp, #12
2dad0     A7 F0 03 F6 | 	mov	ptra, fp
2dad4     B2 00 A0 FD | 	call	#popregs_
2dad8                 | _fatfs_cc_f_readdir_ret
2dad8     2D 00 64 FD | 	ret
2dadc                 | 
2dadc                 | _fatfs_cc_f_stat
2dadc     00 4A 05 F6 | 	mov	COUNT_, #0
2dae0     A8 00 A0 FD | 	call	#pushregs_
2dae4     40 F0 07 F1 | 	add	ptra, #64
2dae8     04 4E 05 F1 | 	add	fp, #4
2daec     A7 12 62 FC | 	wrlong	arg01, fp
2daf0     04 4E 05 F1 | 	add	fp, #4
2daf4     A7 14 62 FC | 	wrlong	arg02, fp
2daf8     04 4E 85 F1 | 	sub	fp, #4
2dafc     A7 12 02 F6 | 	mov	arg01, fp
2db00     0C 4E 05 F1 | 	add	fp, #12
2db04     A7 14 02 F6 | 	mov	arg02, fp
2db08     10 4E 85 F1 | 	sub	fp, #16
2db0c     00 16 06 F6 | 	mov	arg03, #0
2db10     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2db14     0C 4E 05 F1 | 	add	fp, #12
2db18     A7 FA 61 FC | 	wrlong	result1, fp
2db1c     0C 4E 85 F1 | 	sub	fp, #12
2db20     00 FA 0D F2 | 	cmp	result1, #0 wz
2db24     74 00 90 5D |  if_ne	jmp	#LR__4663
2db28     10 4E 05 F1 | 	add	fp, #16
2db2c     A7 12 02 F6 | 	mov	arg01, fp
2db30     0C 4E 85 F1 | 	sub	fp, #12
2db34     A7 14 02 FB | 	rdlong	arg02, fp
2db38     04 4E 85 F1 | 	sub	fp, #4
2db3c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2db40     0C 4E 05 F1 | 	add	fp, #12
2db44     A7 FA 61 FC | 	wrlong	result1, fp
2db48     0C 4E 85 F1 | 	sub	fp, #12
2db4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db50     48 00 90 5D |  if_ne	jmp	#LR__4662
2db54     3B 4E 05 F1 | 	add	fp, #59
2db58     A7 FA C1 FA | 	rdbyte	result1, fp
2db5c     3B 4E 85 F1 | 	sub	fp, #59
2db60     80 FA CD F7 | 	test	result1, #128 wz
2db64     0C 4E 05 51 |  if_ne	add	fp, #12
2db68     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2db6c     0C 4E 85 51 |  if_ne	sub	fp, #12
2db70     28 00 90 5D |  if_ne	jmp	#LR__4661
2db74     08 4E 05 F1 | 	add	fp, #8
2db78     A7 FA 09 FB | 	rdlong	result1, fp wz
2db7c     08 4E 85 F1 | 	sub	fp, #8
2db80     18 00 90 AD |  if_e	jmp	#LR__4660
2db84     10 4E 05 F1 | 	add	fp, #16
2db88     A7 12 02 F6 | 	mov	arg01, fp
2db8c     08 4E 85 F1 | 	sub	fp, #8
2db90     A7 14 02 FB | 	rdlong	arg02, fp
2db94     08 4E 85 F1 | 	sub	fp, #8
2db98     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2db9c                 | LR__4660
2db9c                 | LR__4661
2db9c                 | LR__4662
2db9c                 | LR__4663
2db9c                 | ' 			}
2db9c                 | ' 		}
2db9c                 | ' 		;
2db9c                 | ' 	}
2db9c                 | ' 
2db9c                 | ' 	return res ;
2db9c     0C 4E 05 F1 | 	add	fp, #12
2dba0     A7 FA 01 FB | 	rdlong	result1, fp
2dba4     0C 4E 85 F1 | 	sub	fp, #12
2dba8     A7 F0 03 F6 | 	mov	ptra, fp
2dbac     B2 00 A0 FD | 	call	#popregs_
2dbb0                 | _fatfs_cc_f_stat_ret
2dbb0     2D 00 64 FD | 	ret
2dbb4                 | 
2dbb4                 | _fatfs_cc_f_unlink
2dbb4     00 4A 05 F6 | 	mov	COUNT_, #0
2dbb8     A8 00 A0 FD | 	call	#pushregs_
2dbbc     74 F0 07 F1 | 	add	ptra, #116
2dbc0     04 4E 05 F1 | 	add	fp, #4
2dbc4     A7 12 62 FC | 	wrlong	arg01, fp
2dbc8     68 4E 05 F1 | 	add	fp, #104
2dbcc     A7 00 68 FC | 	wrlong	#0, fp
2dbd0     68 4E 85 F1 | 	sub	fp, #104
2dbd4     A7 12 02 F6 | 	mov	arg01, fp
2dbd8     6C 4E 05 F1 | 	add	fp, #108
2dbdc     A7 14 02 F6 | 	mov	arg02, fp
2dbe0     70 4E 85 F1 | 	sub	fp, #112
2dbe4     02 16 06 F6 | 	mov	arg03, #2
2dbe8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2dbec     08 4E 05 F1 | 	add	fp, #8
2dbf0     A7 FA 61 FC | 	wrlong	result1, fp
2dbf4     08 4E 85 F1 | 	sub	fp, #8
2dbf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbfc     E4 01 90 5D |  if_ne	jmp	#LR__4678
2dc00     70 4E 05 F1 | 	add	fp, #112
2dc04     A7 16 02 FB | 	rdlong	arg03, fp
2dc08     64 4E 85 F1 | 	sub	fp, #100
2dc0c     A7 16 62 FC | 	wrlong	arg03, fp
2dc10     A7 12 02 F6 | 	mov	arg01, fp
2dc14     08 4E 85 F1 | 	sub	fp, #8
2dc18     A7 14 02 FB | 	rdlong	arg02, fp
2dc1c     04 4E 85 F1 | 	sub	fp, #4
2dc20     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2dc24     08 4E 05 F1 | 	add	fp, #8
2dc28     A7 FA 61 FC | 	wrlong	result1, fp
2dc2c     00 FA 4D F2 | 	cmps	result1, #0 wz
2dc30     08 4E 85 F1 | 	sub	fp, #8
2dc34     AC 01 90 5D |  if_ne	jmp	#LR__4677
2dc38     37 4E 05 F1 | 	add	fp, #55
2dc3c     A7 FA C1 FA | 	rdbyte	result1, fp
2dc40     37 4E 85 F1 | 	sub	fp, #55
2dc44     80 FA CD F7 | 	test	result1, #128 wz
2dc48     08 4E 05 51 |  if_ne	add	fp, #8
2dc4c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dc50     08 4E 85 51 |  if_ne	sub	fp, #8
2dc54     1C 00 90 5D |  if_ne	jmp	#LR__4670
2dc58     12 4E 05 F1 | 	add	fp, #18
2dc5c     A7 FA C1 FA | 	rdbyte	result1, fp
2dc60     12 4E 85 F1 | 	sub	fp, #18
2dc64     01 FA CD F7 | 	test	result1, #1 wz
2dc68     08 4E 05 51 |  if_ne	add	fp, #8
2dc6c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2dc70     08 4E 85 51 |  if_ne	sub	fp, #8
2dc74                 | LR__4670
2dc74     08 4E 05 F1 | 	add	fp, #8
2dc78     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc7c     08 4E 85 F1 | 	sub	fp, #8
2dc80     C8 00 90 5D |  if_ne	jmp	#LR__4673
2dc84     70 4E 05 F1 | 	add	fp, #112
2dc88     A7 12 02 FB | 	rdlong	arg01, fp
2dc8c     48 4E 85 F1 | 	sub	fp, #72
2dc90     A7 14 02 FB | 	rdlong	arg02, fp
2dc94     28 4E 85 F1 | 	sub	fp, #40
2dc98     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2dc9c     6C 4E 05 F1 | 	add	fp, #108
2dca0     A7 FA 61 FC | 	wrlong	result1, fp
2dca4     5A 4E 85 F1 | 	sub	fp, #90
2dca8     A7 FA C1 FA | 	rdbyte	result1, fp
2dcac     12 4E 85 F1 | 	sub	fp, #18
2dcb0     10 FA CD F7 | 	test	result1, #16 wz
2dcb4     94 00 90 AD |  if_e	jmp	#LR__4672
2dcb8     70 4E 05 F1 | 	add	fp, #112
2dcbc     A7 FA 01 FB | 	rdlong	result1, fp
2dcc0     34 4E 85 F1 | 	sub	fp, #52
2dcc4     A7 FA 61 FC | 	wrlong	result1, fp
2dcc8     30 4E 05 F1 | 	add	fp, #48
2dccc     A7 16 02 FB | 	rdlong	arg03, fp
2dcd0     28 4E 85 F1 | 	sub	fp, #40
2dcd4     A7 16 62 FC | 	wrlong	arg03, fp
2dcd8     08 4E 85 F1 | 	sub	fp, #8
2dcdc     A7 12 02 F6 | 	mov	arg01, fp
2dce0     3C 4E 85 F1 | 	sub	fp, #60
2dce4     00 14 06 F6 | 	mov	arg02, #0
2dce8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2dcec     08 4E 05 F1 | 	add	fp, #8
2dcf0     A7 FA 61 FC | 	wrlong	result1, fp
2dcf4     08 4E 85 F1 | 	sub	fp, #8
2dcf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcfc     4C 00 90 5D |  if_ne	jmp	#LR__4671
2dd00     3C 4E 05 F1 | 	add	fp, #60
2dd04     A7 12 02 F6 | 	mov	arg01, fp
2dd08     3C 4E 85 F1 | 	sub	fp, #60
2dd0c     00 14 06 F6 | 	mov	arg02, #0
2dd10     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2dd14     08 4E 05 F1 | 	add	fp, #8
2dd18     A7 FA 61 FC | 	wrlong	result1, fp
2dd1c     00 FA 4D F2 | 	cmps	result1, #0 wz
2dd20     08 4E 85 F1 | 	sub	fp, #8
2dd24     08 4E 05 A1 |  if_e	add	fp, #8
2dd28     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dd2c     08 4E 85 A1 |  if_e	sub	fp, #8
2dd30     08 4E 05 F1 | 	add	fp, #8
2dd34     A7 FA 01 FB | 	rdlong	result1, fp
2dd38     08 4E 85 F1 | 	sub	fp, #8
2dd3c     04 FA 0D F2 | 	cmp	result1, #4 wz
2dd40     08 4E 05 A1 |  if_e	add	fp, #8
2dd44     A7 00 68 AC |  if_e	wrlong	#0, fp
2dd48     08 4E 85 A1 |  if_e	sub	fp, #8
2dd4c                 | LR__4671
2dd4c                 | LR__4672
2dd4c                 | LR__4673
2dd4c     08 4E 05 F1 | 	add	fp, #8
2dd50     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd54     08 4E 85 F1 | 	sub	fp, #8
2dd58     88 00 90 5D |  if_ne	jmp	#LR__4676
2dd5c     0C 4E 05 F1 | 	add	fp, #12
2dd60     A7 12 02 F6 | 	mov	arg01, fp
2dd64     0C 4E 85 F1 | 	sub	fp, #12
2dd68     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2dd6c     08 4E 05 F1 | 	add	fp, #8
2dd70     A7 FA 61 FC | 	wrlong	result1, fp
2dd74     08 4E 85 F1 | 	sub	fp, #8
2dd78     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd7c     38 00 90 5D |  if_ne	jmp	#LR__4674
2dd80     6C 4E 05 F1 | 	add	fp, #108
2dd84     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd88     6C 4E 85 F1 | 	sub	fp, #108
2dd8c     28 00 90 AD |  if_e	jmp	#LR__4674
2dd90     0C 4E 05 F1 | 	add	fp, #12
2dd94     A7 12 02 F6 | 	mov	arg01, fp
2dd98     60 4E 05 F1 | 	add	fp, #96
2dd9c     A7 14 02 FB | 	rdlong	arg02, fp
2dda0     6C 4E 85 F1 | 	sub	fp, #108
2dda4     00 16 06 F6 | 	mov	arg03, #0
2dda8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2ddac     08 4E 05 F1 | 	add	fp, #8
2ddb0     A7 FA 61 FC | 	wrlong	result1, fp
2ddb4     08 4E 85 F1 | 	sub	fp, #8
2ddb8                 | LR__4674
2ddb8     08 4E 05 F1 | 	add	fp, #8
2ddbc     A7 FA 09 FB | 	rdlong	result1, fp wz
2ddc0     08 4E 85 F1 | 	sub	fp, #8
2ddc4     1C 00 90 5D |  if_ne	jmp	#LR__4675
2ddc8     70 4E 05 F1 | 	add	fp, #112
2ddcc     A7 12 02 FB | 	rdlong	arg01, fp
2ddd0     70 4E 85 F1 | 	sub	fp, #112
2ddd4     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2ddd8     08 4E 05 F1 | 	add	fp, #8
2dddc     A7 FA 61 FC | 	wrlong	result1, fp
2dde0     08 4E 85 F1 | 	sub	fp, #8
2dde4                 | LR__4675
2dde4                 | LR__4676
2dde4                 | LR__4677
2dde4                 | LR__4678
2dde4                 | ' 			}
2dde4                 | ' 		}
2dde4                 | ' 		;
2dde4                 | ' 	}
2dde4                 | ' 
2dde4                 | ' 	return res ;
2dde4     08 4E 05 F1 | 	add	fp, #8
2dde8     A7 FA 01 FB | 	rdlong	result1, fp
2ddec     08 4E 85 F1 | 	sub	fp, #8
2ddf0     A7 F0 03 F6 | 	mov	ptra, fp
2ddf4     B2 00 A0 FD | 	call	#popregs_
2ddf8                 | _fatfs_cc_f_unlink_ret
2ddf8     2D 00 64 FD | 	ret
2ddfc                 | 
2ddfc                 | _fatfs_cc_f_mkdir
2ddfc     00 4A 05 F6 | 	mov	COUNT_, #0
2de00     A8 00 A0 FD | 	call	#pushregs_
2de04     5C F0 07 F1 | 	add	ptra, #92
2de08     04 4E 05 F1 | 	add	fp, #4
2de0c     A7 12 62 FC | 	wrlong	arg01, fp
2de10     A7 12 02 F6 | 	mov	arg01, fp
2de14     48 4E 05 F1 | 	add	fp, #72
2de18     A7 14 02 F6 | 	mov	arg02, fp
2de1c     4C 4E 85 F1 | 	sub	fp, #76
2de20     02 16 06 F6 | 	mov	arg03, #2
2de24     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2de28     08 4E 05 F1 | 	add	fp, #8
2de2c     A7 FA 61 FC | 	wrlong	result1, fp
2de30     08 4E 85 F1 | 	sub	fp, #8
2de34     00 FA 0D F2 | 	cmp	result1, #0 wz
2de38     C4 02 90 5D |  if_ne	jmp	#LR__4685
2de3c     4C 4E 05 F1 | 	add	fp, #76
2de40     A7 16 02 FB | 	rdlong	arg03, fp
2de44     40 4E 85 F1 | 	sub	fp, #64
2de48     A7 16 62 FC | 	wrlong	arg03, fp
2de4c     A7 12 02 F6 | 	mov	arg01, fp
2de50     08 4E 85 F1 | 	sub	fp, #8
2de54     A7 14 02 FB | 	rdlong	arg02, fp
2de58     04 4E 85 F1 | 	sub	fp, #4
2de5c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2de60     08 4E 05 F1 | 	add	fp, #8
2de64     A7 FA 61 FC | 	wrlong	result1, fp
2de68     00 FA 4D F2 | 	cmps	result1, #0 wz
2de6c     08 4E 85 F1 | 	sub	fp, #8
2de70     08 4E 05 A1 |  if_e	add	fp, #8
2de74     A7 10 68 AC |  if_e	wrlong	#8, fp
2de78     08 4E 85 A1 |  if_e	sub	fp, #8
2de7c     08 4E 05 F1 | 	add	fp, #8
2de80     A7 FA 01 FB | 	rdlong	result1, fp
2de84     08 4E 85 F1 | 	sub	fp, #8
2de88     04 FA 0D F2 | 	cmp	result1, #4 wz
2de8c     70 02 90 5D |  if_ne	jmp	#LR__4684
2de90     4C 4E 05 F1 | 	add	fp, #76
2de94     A7 16 02 FB | 	rdlong	arg03, fp
2de98     10 4E 85 F1 | 	sub	fp, #16
2de9c     A7 16 62 FC | 	wrlong	arg03, fp
2dea0     A7 12 02 F6 | 	mov	arg01, fp
2dea4     3C 4E 85 F1 | 	sub	fp, #60
2dea8     00 14 06 F6 | 	mov	arg02, #0
2deac     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2deb0     50 4E 05 F1 | 	add	fp, #80
2deb4     A7 FA 61 FC | 	wrlong	result1, fp
2deb8     48 4E 85 F1 | 	sub	fp, #72
2debc     A7 00 68 FC | 	wrlong	#0, fp
2dec0     48 4E 05 F1 | 	add	fp, #72
2dec4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dec8     50 4E 85 F1 | 	sub	fp, #80
2decc     08 4E 05 A1 |  if_e	add	fp, #8
2ded0     A7 0E 68 AC |  if_e	wrlong	#7, fp
2ded4     08 4E 85 A1 |  if_e	sub	fp, #8
2ded8     50 4E 05 F1 | 	add	fp, #80
2dedc     A7 FA 01 FB | 	rdlong	result1, fp
2dee0     50 4E 85 F1 | 	sub	fp, #80
2dee4     01 FA 0D F2 | 	cmp	result1, #1 wz
2dee8     08 4E 05 A1 |  if_e	add	fp, #8
2deec     A7 04 68 AC |  if_e	wrlong	#2, fp
2def0     08 4E 85 A1 |  if_e	sub	fp, #8
2def4     50 4E 05 F1 | 	add	fp, #80
2def8     A7 16 02 FB | 	rdlong	arg03, fp
2defc     50 4E 85 F1 | 	sub	fp, #80
2df00     FF FF 7F FF 
2df04     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2df08     08 4E 05 A1 |  if_e	add	fp, #8
2df0c     A7 02 68 AC |  if_e	wrlong	#1, fp
2df10     08 4E 85 A1 |  if_e	sub	fp, #8
2df14     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2df18     58 4E 05 F1 | 	add	fp, #88
2df1c     A7 FA 61 FC | 	wrlong	result1, fp
2df20     50 4E 85 F1 | 	sub	fp, #80
2df24     A7 FA 09 FB | 	rdlong	result1, fp wz
2df28     08 4E 85 F1 | 	sub	fp, #8
2df2c     1C 01 90 5D |  if_ne	jmp	#LR__4681
2df30     4C 4E 05 F1 | 	add	fp, #76
2df34     A7 12 02 FB | 	rdlong	arg01, fp
2df38     04 4E 05 F1 | 	add	fp, #4
2df3c     A7 14 02 FB | 	rdlong	arg02, fp
2df40     50 4E 85 F1 | 	sub	fp, #80
2df44     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2df48     08 4E 05 F1 | 	add	fp, #8
2df4c     A7 FA 61 FC | 	wrlong	result1, fp
2df50     00 FA 4D F2 | 	cmps	result1, #0 wz
2df54     08 4E 85 F1 | 	sub	fp, #8
2df58     F0 00 90 5D |  if_ne	jmp	#LR__4680
2df5c     4C 4E 05 F1 | 	add	fp, #76
2df60     A7 12 02 FB | 	rdlong	arg01, fp
2df64     4C 4E 85 F1 | 	sub	fp, #76
2df68     34 12 06 F1 | 	add	arg01, #52
2df6c     20 14 06 F6 | 	mov	arg02, #32
2df70     0B 16 06 F6 | 	mov	arg03, #11
2df74     98 00 A0 FD | 	call	#\builtin_bytefill_
2df78     4C 4E 05 F1 | 	add	fp, #76
2df7c     A7 FA 01 FB | 	rdlong	result1, fp
2df80     34 FA 05 F1 | 	add	result1, #52
2df84     FD 5C 48 FC | 	wrbyte	#46, result1
2df88     A7 16 02 FB | 	rdlong	arg03, fp
2df8c     3F 16 06 F1 | 	add	arg03, #63
2df90     0B 21 48 FC | 	wrbyte	#16, arg03
2df94     A7 12 02 FB | 	rdlong	arg01, fp
2df98     4A 12 06 F1 | 	add	arg01, #74
2df9c     0C 4E 05 F1 | 	add	fp, #12
2dfa0     A7 14 02 FB | 	rdlong	arg02, fp
2dfa4     09 15 62 FC | 	wrlong	arg02, arg01
2dfa8     0C 4E 85 F1 | 	sub	fp, #12
2dfac     A7 14 02 FB | 	rdlong	arg02, fp
2dfb0     0A 13 02 F6 | 	mov	arg01, arg02
2dfb4     34 14 06 F1 | 	add	arg02, #52
2dfb8     04 4E 05 F1 | 	add	fp, #4
2dfbc     A7 16 02 FB | 	rdlong	arg03, fp
2dfc0     50 4E 85 F1 | 	sub	fp, #80
2dfc4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dfc8     4C 4E 05 F1 | 	add	fp, #76
2dfcc     A7 14 02 FB | 	rdlong	arg02, fp
2dfd0     0A 13 02 F6 | 	mov	arg01, arg02
2dfd4     54 12 06 F1 | 	add	arg01, #84
2dfd8     4C 4E 85 F1 | 	sub	fp, #76
2dfdc     34 14 06 F1 | 	add	arg02, #52
2dfe0     20 16 06 F6 | 	mov	arg03, #32
2dfe4     3C 2A BF FD | 	call	#__system____builtin_memmove
2dfe8     4C 4E 05 F1 | 	add	fp, #76
2dfec     A7 16 02 FB | 	rdlong	arg03, fp
2dff0     55 16 06 F1 | 	add	arg03, #85
2dff4     0B 5D 48 FC | 	wrbyte	#46, arg03
2dff8     38 4E 85 F1 | 	sub	fp, #56
2dffc     A7 16 02 FB | 	rdlong	arg03, fp
2e000     40 4E 05 F1 | 	add	fp, #64
2e004     A7 16 62 FC | 	wrlong	arg03, fp
2e008     08 4E 85 F1 | 	sub	fp, #8
2e00c     A7 14 02 FB | 	rdlong	arg02, fp
2e010     0A 13 02 F6 | 	mov	arg01, arg02
2e014     54 14 06 F1 | 	add	arg02, #84
2e018     4C 4E 85 F1 | 	sub	fp, #76
2e01c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2e020     4C 4E 05 F1 | 	add	fp, #76
2e024     A7 16 02 FB | 	rdlong	arg03, fp
2e028     03 16 06 F1 | 	add	arg03, #3
2e02c     0B 03 48 FC | 	wrbyte	#1, arg03
2e030     40 4E 85 F1 | 	sub	fp, #64
2e034     A7 12 02 F6 | 	mov	arg01, fp
2e038     0C 4E 85 F1 | 	sub	fp, #12
2e03c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2e040     08 4E 05 F1 | 	add	fp, #8
2e044     A7 FA 61 FC | 	wrlong	result1, fp
2e048     08 4E 85 F1 | 	sub	fp, #8
2e04c                 | LR__4680
2e04c                 | LR__4681
2e04c     08 4E 05 F1 | 	add	fp, #8
2e050     A7 FA 09 FB | 	rdlong	result1, fp wz
2e054     08 4E 85 F1 | 	sub	fp, #8
2e058     88 00 90 5D |  if_ne	jmp	#LR__4682
2e05c     28 4E 05 F1 | 	add	fp, #40
2e060     A7 12 02 FB | 	rdlong	arg01, fp
2e064     16 12 06 F1 | 	add	arg01, #22
2e068     30 4E 05 F1 | 	add	fp, #48
2e06c     A7 14 02 FB | 	rdlong	arg02, fp
2e070     09 15 62 FC | 	wrlong	arg02, arg01
2e074     0C 4E 85 F1 | 	sub	fp, #12
2e078     A7 12 02 FB | 	rdlong	arg01, fp
2e07c     24 4E 85 F1 | 	sub	fp, #36
2e080     A7 14 02 FB | 	rdlong	arg02, fp
2e084     28 4E 05 F1 | 	add	fp, #40
2e088     A7 16 02 FB | 	rdlong	arg03, fp
2e08c     50 4E 85 F1 | 	sub	fp, #80
2e090     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2e094     28 4E 05 F1 | 	add	fp, #40
2e098     A7 FA 01 FB | 	rdlong	result1, fp
2e09c     0B FA 05 F1 | 	add	result1, #11
2e0a0     FD 20 48 FC | 	wrbyte	#16, result1
2e0a4     24 4E 05 F1 | 	add	fp, #36
2e0a8     A7 FA 01 FB | 	rdlong	result1, fp
2e0ac     03 FA 05 F1 | 	add	result1, #3
2e0b0     FD 02 48 FC | 	wrbyte	#1, result1
2e0b4     44 4E 85 F1 | 	sub	fp, #68
2e0b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2e0bc     08 4E 85 F1 | 	sub	fp, #8
2e0c0     3C 00 90 5D |  if_ne	jmp	#LR__4683
2e0c4     4C 4E 05 F1 | 	add	fp, #76
2e0c8     A7 12 02 FB | 	rdlong	arg01, fp
2e0cc     4C 4E 85 F1 | 	sub	fp, #76
2e0d0     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2e0d4     08 4E 05 F1 | 	add	fp, #8
2e0d8     A7 FA 61 FC | 	wrlong	result1, fp
2e0dc     08 4E 85 F1 | 	sub	fp, #8
2e0e0     1C 00 90 FD | 	jmp	#LR__4683
2e0e4                 | LR__4682
2e0e4     3C 4E 05 F1 | 	add	fp, #60
2e0e8     A7 12 02 F6 | 	mov	arg01, fp
2e0ec     14 4E 05 F1 | 	add	fp, #20
2e0f0     A7 14 02 FB | 	rdlong	arg02, fp
2e0f4     50 4E 85 F1 | 	sub	fp, #80
2e0f8     00 16 06 F6 | 	mov	arg03, #0
2e0fc     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2e100                 | LR__4683
2e100                 | LR__4684
2e100                 | LR__4685
2e100                 | ' 				remove_chain(&sobj, dcl, 0);
2e100                 | ' 			}
2e100                 | ' 		}
2e100                 | ' 		;
2e100                 | ' 	}
2e100                 | ' 
2e100                 | ' 	return res ;
2e100     08 4E 05 F1 | 	add	fp, #8
2e104     A7 FA 01 FB | 	rdlong	result1, fp
2e108     08 4E 85 F1 | 	sub	fp, #8
2e10c     A7 F0 03 F6 | 	mov	ptra, fp
2e110     B2 00 A0 FD | 	call	#popregs_
2e114                 | _fatfs_cc_f_mkdir_ret
2e114     2D 00 64 FD | 	ret
2e118                 | 
2e118                 | _fatfs_cc_f_rename
2e118     01 4A 05 F6 | 	mov	COUNT_, #1
2e11c     A8 00 A0 FD | 	call	#pushregs_
2e120     9C F0 07 F1 | 	add	ptra, #156
2e124     04 4E 05 F1 | 	add	fp, #4
2e128     A7 12 62 FC | 	wrlong	arg01, fp
2e12c     04 4E 05 F1 | 	add	fp, #4
2e130     A7 14 62 FC | 	wrlong	arg02, fp
2e134     A7 12 02 F6 | 	mov	arg01, fp
2e138     08 4E 85 F1 | 	sub	fp, #8
2e13c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2e140     04 4E 05 F1 | 	add	fp, #4
2e144     A7 12 02 F6 | 	mov	arg01, fp
2e148     6C 4E 05 F1 | 	add	fp, #108
2e14c     A7 14 02 F6 | 	mov	arg02, fp
2e150     70 4E 85 F1 | 	sub	fp, #112
2e154     02 16 06 F6 | 	mov	arg03, #2
2e158     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2e15c     0C 4E 05 F1 | 	add	fp, #12
2e160     A7 FA 61 FC | 	wrlong	result1, fp
2e164     0C 4E 85 F1 | 	sub	fp, #12
2e168     00 FA 0D F2 | 	cmp	result1, #0 wz
2e16c     44 03 90 5D |  if_ne	jmp	#LR__4703
2e170     70 4E 05 F1 | 	add	fp, #112
2e174     A7 16 02 FB | 	rdlong	arg03, fp
2e178     60 4E 85 F1 | 	sub	fp, #96
2e17c     A7 16 62 FC | 	wrlong	arg03, fp
2e180     A7 12 02 F6 | 	mov	arg01, fp
2e184     0C 4E 85 F1 | 	sub	fp, #12
2e188     A7 14 02 FB | 	rdlong	arg02, fp
2e18c     04 4E 85 F1 | 	sub	fp, #4
2e190     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2e194     0C 4E 05 F1 | 	add	fp, #12
2e198     A7 FA 61 FC | 	wrlong	result1, fp
2e19c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e1a0     0C 4E 85 F1 | 	sub	fp, #12
2e1a4     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e1a8     3B 4E 05 F1 | 	add	fp, #59
2e1ac     A7 FA C1 FA | 	rdbyte	result1, fp
2e1b0     3B 4E 85 F1 | 	sub	fp, #59
2e1b4     A0 FA CD F7 | 	test	result1, #160 wz
2e1b8     0C 4E 05 51 |  if_ne	add	fp, #12
2e1bc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e1c0     0C 4E 85 51 |  if_ne	sub	fp, #12
2e1c4                 | LR__4690
2e1c4     0C 4E 05 F1 | 	add	fp, #12
2e1c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2e1cc     0C 4E 85 F1 | 	sub	fp, #12
2e1d0     E0 02 90 5D |  if_ne	jmp	#LR__4702
2e1d4     74 4E 05 F1 | 	add	fp, #116
2e1d8     A7 12 02 F6 | 	mov	arg01, fp
2e1dc     48 4E 85 F1 | 	sub	fp, #72
2e1e0     A7 14 02 FB | 	rdlong	arg02, fp
2e1e4     2C 4E 85 F1 | 	sub	fp, #44
2e1e8     20 16 06 F6 | 	mov	arg03, #32
2e1ec     34 28 BF FD | 	call	#__system____builtin_memmove
2e1f0     40 4E 05 F1 | 	add	fp, #64
2e1f4     A7 12 02 F6 | 	mov	arg01, fp
2e1f8     30 4E 85 F1 | 	sub	fp, #48
2e1fc     A7 14 02 F6 | 	mov	arg02, fp
2e200     10 4E 85 F1 | 	sub	fp, #16
2e204     30 16 06 F6 | 	mov	arg03, #48
2e208     18 28 BF FD | 	call	#__system____builtin_memmove
2e20c     40 4E 05 F1 | 	add	fp, #64
2e210     A7 12 02 F6 | 	mov	arg01, fp
2e214     38 4E 85 F1 | 	sub	fp, #56
2e218     A7 14 02 FB | 	rdlong	arg02, fp
2e21c     08 4E 85 F1 | 	sub	fp, #8
2e220     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e224     0C 4E 05 F1 | 	add	fp, #12
2e228     A7 FA 61 FC | 	wrlong	result1, fp
2e22c     0C 4E 85 F1 | 	sub	fp, #12
2e230     00 FA 0D F2 | 	cmp	result1, #0 wz
2e234     4C 00 90 5D |  if_ne	jmp	#LR__4693
2e238     48 4E 05 F1 | 	add	fp, #72
2e23c     A7 FA 01 FB | 	rdlong	result1, fp
2e240     30 4E 85 F1 | 	sub	fp, #48
2e244     A7 16 02 FB | 	rdlong	arg03, fp
2e248     18 4E 85 F1 | 	sub	fp, #24
2e24c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e250     20 00 90 5D |  if_ne	jmp	#LR__4691
2e254     50 4E 05 F1 | 	add	fp, #80
2e258     A7 FA 01 FB | 	rdlong	result1, fp
2e25c     30 4E 85 F1 | 	sub	fp, #48
2e260     A7 16 02 FB | 	rdlong	arg03, fp
2e264     20 4E 85 F1 | 	sub	fp, #32
2e268     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e26c     04 1E 06 A6 |  if_e	mov	local01, #4
2e270     04 00 90 AD |  if_e	jmp	#LR__4692
2e274                 | LR__4691
2e274     08 1E 06 F6 | 	mov	local01, #8
2e278                 | LR__4692
2e278     0C 4E 05 F1 | 	add	fp, #12
2e27c     A7 1E 62 FC | 	wrlong	local01, fp
2e280     0C 4E 85 F1 | 	sub	fp, #12
2e284                 | LR__4693
2e284     0C 4E 05 F1 | 	add	fp, #12
2e288     A7 1E 02 FB | 	rdlong	local01, fp
2e28c     0C 4E 85 F1 | 	sub	fp, #12
2e290     04 1E 0E F2 | 	cmp	local01, #4 wz
2e294     CC 01 90 5D |  if_ne	jmp	#LR__4699
2e298     40 4E 05 F1 | 	add	fp, #64
2e29c     A7 12 02 F6 | 	mov	arg01, fp
2e2a0     40 4E 85 F1 | 	sub	fp, #64
2e2a4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e2a8     0C 4E 05 F1 | 	add	fp, #12
2e2ac     A7 FA 61 FC | 	wrlong	result1, fp
2e2b0     0C 4E 85 F1 | 	sub	fp, #12
2e2b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2b8     A8 01 90 5D |  if_ne	jmp	#LR__4698
2e2bc     5C 4E 05 F1 | 	add	fp, #92
2e2c0     A7 12 02 FB | 	rdlong	arg01, fp
2e2c4     38 4E 05 F1 | 	add	fp, #56
2e2c8     A7 12 62 FC | 	wrlong	arg01, fp
2e2cc     0D 12 06 F1 | 	add	arg01, #13
2e2d0     20 4E 85 F1 | 	sub	fp, #32
2e2d4     A7 14 02 F6 | 	mov	arg02, fp
2e2d8     74 4E 85 F1 | 	sub	fp, #116
2e2dc     0D 14 06 F1 | 	add	arg02, #13
2e2e0     13 16 06 F6 | 	mov	arg03, #19
2e2e4     3C 27 BF FD | 	call	#__system____builtin_memmove
2e2e8     94 4E 05 F1 | 	add	fp, #148
2e2ec     A7 1E 02 FB | 	rdlong	local01, fp
2e2f0     15 4E 85 F1 | 	sub	fp, #21
2e2f4     A7 FA C1 FA | 	rdbyte	result1, fp
2e2f8     0B 1E 06 F1 | 	add	local01, #11
2e2fc     0F FB 41 FC | 	wrbyte	result1, local01
2e300     15 4E 05 F1 | 	add	fp, #21
2e304     A7 1E 02 FB | 	rdlong	local01, fp
2e308     94 4E 85 F1 | 	sub	fp, #148
2e30c     0B 1E 06 F1 | 	add	local01, #11
2e310     0F 1F C2 FA | 	rdbyte	local01, local01
2e314     10 1E CE F7 | 	test	local01, #16 wz
2e318     24 00 90 5D |  if_ne	jmp	#LR__4694
2e31c     94 4E 05 F1 | 	add	fp, #148
2e320     A7 FA 01 FB | 	rdlong	result1, fp
2e324     FD 1E 02 F6 | 	mov	local01, result1
2e328     94 4E 85 F1 | 	sub	fp, #148
2e32c     0B FA 05 F1 | 	add	result1, #11
2e330     FD FA C1 FA | 	rdbyte	result1, result1
2e334     20 FA 45 F5 | 	or	result1, #32
2e338     0B 1E 06 F1 | 	add	local01, #11
2e33c     0F FB 41 FC | 	wrbyte	result1, local01
2e340                 | LR__4694
2e340     70 4E 05 F1 | 	add	fp, #112
2e344     A7 1E 02 FB | 	rdlong	local01, fp
2e348     03 1E 06 F1 | 	add	local01, #3
2e34c     0F 03 48 FC | 	wrbyte	#1, local01
2e350     24 4E 05 F1 | 	add	fp, #36
2e354     A7 1E 02 FB | 	rdlong	local01, fp
2e358     94 4E 85 F1 | 	sub	fp, #148
2e35c     0B 1E 06 F1 | 	add	local01, #11
2e360     0F 1F C2 FA | 	rdbyte	local01, local01
2e364     10 1E CE F7 | 	test	local01, #16 wz
2e368     F8 00 90 AD |  if_e	jmp	#LR__4697
2e36c     18 4E 05 F1 | 	add	fp, #24
2e370     A7 16 02 FB | 	rdlong	arg03, fp
2e374     30 4E 05 F1 | 	add	fp, #48
2e378     A7 1E 02 FB | 	rdlong	local01, fp
2e37c     48 4E 85 F1 | 	sub	fp, #72
2e380     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e384     DC 00 90 AD |  if_e	jmp	#LR__4697
2e388     70 4E 05 F1 | 	add	fp, #112
2e38c     A7 12 02 FB | 	rdlong	arg01, fp
2e390     09 1F 02 F6 | 	mov	local01, arg01
2e394     24 4E 05 F1 | 	add	fp, #36
2e398     A7 14 02 FB | 	rdlong	arg02, fp
2e39c     94 4E 85 F1 | 	sub	fp, #148
2e3a0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e3a4     FD 14 02 F6 | 	mov	arg02, result1
2e3a8     0F 13 02 F6 | 	mov	arg01, local01
2e3ac     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e3b0     98 4E 05 F1 | 	add	fp, #152
2e3b4     A7 FA 61 FC | 	wrlong	result1, fp
2e3b8     00 FA 4D F2 | 	cmps	result1, #0 wz
2e3bc     98 4E 85 F1 | 	sub	fp, #152
2e3c0     0C 4E 05 A1 |  if_e	add	fp, #12
2e3c4     A7 04 68 AC |  if_e	wrlong	#2, fp
2e3c8     0C 4E 85 A1 |  if_e	sub	fp, #12
2e3cc     94 00 90 AD |  if_e	jmp	#LR__4696
2e3d0     70 4E 05 F1 | 	add	fp, #112
2e3d4     A7 12 02 FB | 	rdlong	arg01, fp
2e3d8     28 4E 05 F1 | 	add	fp, #40
2e3dc     A7 14 02 FB | 	rdlong	arg02, fp
2e3e0     98 4E 85 F1 | 	sub	fp, #152
2e3e4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e3e8     0C 4E 05 F1 | 	add	fp, #12
2e3ec     A7 FA 61 FC | 	wrlong	result1, fp
2e3f0     64 4E 05 F1 | 	add	fp, #100
2e3f4     A7 1E 02 FB | 	rdlong	local01, fp
2e3f8     54 1E 06 F1 | 	add	local01, #84
2e3fc     24 4E 05 F1 | 	add	fp, #36
2e400     A7 1E 62 FC | 	wrlong	local01, fp
2e404     88 4E 85 F1 | 	sub	fp, #136
2e408     A7 1E 0A FB | 	rdlong	local01, fp wz
2e40c     0C 4E 85 F1 | 	sub	fp, #12
2e410     50 00 90 5D |  if_ne	jmp	#LR__4695
2e414     94 4E 05 F1 | 	add	fp, #148
2e418     A7 1E 02 FB | 	rdlong	local01, fp
2e41c     94 4E 85 F1 | 	sub	fp, #148
2e420     01 1E 06 F1 | 	add	local01, #1
2e424     0F 1F C2 FA | 	rdbyte	local01, local01
2e428     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e42c     34 00 90 5D |  if_ne	jmp	#LR__4695
2e430     70 4E 05 F1 | 	add	fp, #112
2e434     A7 12 02 FB | 	rdlong	arg01, fp
2e438     24 4E 05 F1 | 	add	fp, #36
2e43c     A7 14 02 FB | 	rdlong	arg02, fp
2e440     4C 4E 85 F1 | 	sub	fp, #76
2e444     A7 16 02 FB | 	rdlong	arg03, fp
2e448     48 4E 85 F1 | 	sub	fp, #72
2e44c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e450     70 4E 05 F1 | 	add	fp, #112
2e454     A7 1E 02 FB | 	rdlong	local01, fp
2e458     70 4E 85 F1 | 	sub	fp, #112
2e45c     03 1E 06 F1 | 	add	local01, #3
2e460     0F 03 48 FC | 	wrbyte	#1, local01
2e464                 | LR__4695
2e464                 | LR__4696
2e464                 | LR__4697
2e464                 | LR__4698
2e464                 | LR__4699
2e464     0C 4E 05 F1 | 	add	fp, #12
2e468     A7 1E 0A FB | 	rdlong	local01, fp wz
2e46c     0C 4E 85 F1 | 	sub	fp, #12
2e470     40 00 90 5D |  if_ne	jmp	#LR__4701
2e474     10 4E 05 F1 | 	add	fp, #16
2e478     A7 12 02 F6 | 	mov	arg01, fp
2e47c     10 4E 85 F1 | 	sub	fp, #16
2e480     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e484     0C 4E 05 F1 | 	add	fp, #12
2e488     A7 FA 61 FC | 	wrlong	result1, fp
2e48c     0C 4E 85 F1 | 	sub	fp, #12
2e490     00 FA 0D F2 | 	cmp	result1, #0 wz
2e494     1C 00 90 5D |  if_ne	jmp	#LR__4700
2e498     70 4E 05 F1 | 	add	fp, #112
2e49c     A7 12 02 FB | 	rdlong	arg01, fp
2e4a0     70 4E 85 F1 | 	sub	fp, #112
2e4a4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e4a8     0C 4E 05 F1 | 	add	fp, #12
2e4ac     A7 FA 61 FC | 	wrlong	result1, fp
2e4b0     0C 4E 85 F1 | 	sub	fp, #12
2e4b4                 | LR__4700
2e4b4                 | LR__4701
2e4b4                 | LR__4702
2e4b4                 | LR__4703
2e4b4                 | ' 					res = sync_fs(fs);
2e4b4                 | ' 				}
2e4b4                 | ' 			}
2e4b4                 | ' 
2e4b4                 | ' 		}
2e4b4                 | ' 		;
2e4b4                 | ' 	}
2e4b4                 | ' 
2e4b4                 | ' 	return res ;
2e4b4     0C 4E 05 F1 | 	add	fp, #12
2e4b8     A7 FA 01 FB | 	rdlong	result1, fp
2e4bc     0C 4E 85 F1 | 	sub	fp, #12
2e4c0     A7 F0 03 F6 | 	mov	ptra, fp
2e4c4     B2 00 A0 FD | 	call	#popregs_
2e4c8                 | _fatfs_cc_f_rename_ret
2e4c8     2D 00 64 FD | 	ret
2e4cc                 | 
2e4cc                 | _fatfs_cc_time
2e4cc     00 4A 05 F6 | 	mov	COUNT_, #0
2e4d0     A8 00 A0 FD | 	call	#pushregs_
2e4d4     14 F0 07 F1 | 	add	ptra, #20
2e4d8     04 4E 05 F1 | 	add	fp, #4
2e4dc     A7 12 62 FC | 	wrlong	arg01, fp
2e4e0     04 4E 05 F1 | 	add	fp, #4
2e4e4     A7 12 02 F6 | 	mov	arg01, fp
2e4e8     08 4E 85 F1 | 	sub	fp, #8
2e4ec     00 14 06 F6 | 	mov	arg02, #0
2e4f0     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e4f4     08 4E 05 F1 | 	add	fp, #8
2e4f8     A7 FA 01 FB | 	rdlong	result1, fp
2e4fc     08 4E 05 F1 | 	add	fp, #8
2e500     A7 FA 61 FC | 	wrlong	result1, fp
2e504     0C 4E 85 F1 | 	sub	fp, #12
2e508     A7 FA 09 FB | 	rdlong	result1, fp wz
2e50c     04 4E 85 F1 | 	sub	fp, #4
2e510     18 00 90 AD |  if_e	jmp	#LR__4710
2e514     04 4E 05 F1 | 	add	fp, #4
2e518     A7 FA 01 FB | 	rdlong	result1, fp
2e51c     0C 4E 05 F1 | 	add	fp, #12
2e520     A7 14 02 FB | 	rdlong	arg02, fp
2e524     10 4E 85 F1 | 	sub	fp, #16
2e528     FD 14 62 FC | 	wrlong	arg02, result1
2e52c                 | LR__4710
2e52c                 | '         *tp = now;
2e52c                 | '     return now;
2e52c     10 4E 05 F1 | 	add	fp, #16
2e530     A7 FA 01 FB | 	rdlong	result1, fp
2e534     10 4E 85 F1 | 	sub	fp, #16
2e538     A7 F0 03 F6 | 	mov	ptra, fp
2e53c     B2 00 A0 FD | 	call	#popregs_
2e540                 | _fatfs_cc_time_ret
2e540     2D 00 64 FD | 	ret
2e544                 | 
2e544                 | _fatfs_cc_mktime
2e544     06 4A 05 F6 | 	mov	COUNT_, #6
2e548     A8 00 A0 FD | 	call	#pushregs_
2e54c     09 1F 02 F6 | 	mov	local01, arg01
2e550     14 1E 06 F1 | 	add	local01, #20
2e554     0F 13 02 FB | 	rdlong	arg01, local01
2e558     14 1E 86 F1 | 	sub	local01, #20
2e55c     46 12 56 F2 | 	cmps	arg01, #70 wc
2e560                 | '                 return (time_t) -1;
2e560     01 FA 65 C6 |  if_b	neg	result1, #1
2e564     7C 01 90 CD |  if_b	jmp	#LR__4724
2e568     03 00 00 FF 
2e56c     6C 21 06 F6 | 	mov	local02, ##1900
2e570     14 1E 06 F1 | 	add	local01, #20
2e574     0F FB 01 FB | 	rdlong	result1, local01
2e578     FD 20 02 F1 | 	add	local02, result1
2e57c     08 1E 86 F1 | 	sub	local01, #8
2e580     0F 23 02 FB | 	rdlong	local03, local01
2e584     01 22 86 F1 | 	sub	local03, #1
2e588     04 1E 06 F1 | 	add	local01, #4
2e58c     0F 13 02 FB | 	rdlong	arg01, local01
2e590     10 1E 86 F1 | 	sub	local01, #16
2e594     02 12 66 F0 | 	shl	arg01, #2
2e598     02 00 00 FF 
2e59c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e5a0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e5a4     09 FB 01 FB | 	rdlong	result1, arg01
2e5a8     FD 22 02 F1 | 	add	local03, result1
2e5ac     10 13 02 F6 | 	mov	arg01, local02
2e5b0     02 00 00 FF 
2e5b4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e5b8     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e5bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5c0     1C 00 90 AD |  if_e	jmp	#LR__4720
2e5c4     00 24 06 F6 | 	mov	local04, #0
2e5c8     10 1E 06 F1 | 	add	local01, #16
2e5cc     0F FB 01 FB | 	rdlong	result1, local01
2e5d0     10 1E 86 F1 | 	sub	local01, #16
2e5d4     02 FA 55 F2 | 	cmps	result1, #2 wc
2e5d8     01 24 06 36 |  if_ae	mov	local04, #1
2e5dc     04 00 90 FD | 	jmp	#LR__4721
2e5e0                 | LR__4720
2e5e0     00 24 06 F6 | 	mov	local04, #0
2e5e4                 | LR__4721
2e5e4     04 1E 06 F1 | 	add	local01, #4
2e5e8     0F FB 01 FB | 	rdlong	result1, local01
2e5ec     04 1E 86 F1 | 	sub	local01, #4
2e5f0     0F 27 02 FB | 	rdlong	local05, local01
2e5f4     08 1E 06 F1 | 	add	local01, #8
2e5f8     0F 13 02 FB | 	rdlong	arg01, local01
2e5fc     07 00 00 FF 
2e600     10 12 06 FD | 	qmul	arg01, ##3600
2e604     12 23 02 F1 | 	add	local03, local04
2e608     FD 24 02 F6 | 	mov	local04, result1
2e60c     04 24 66 F0 | 	shl	local04, #4
2e610     FD 24 82 F1 | 	sub	local04, result1
2e614     02 24 66 F0 | 	shl	local04, #2
2e618     12 27 02 F1 | 	add	local05, local04
2e61c     08 1E 86 F1 | 	sub	local01, #8
2e620     18 24 62 FD | 	getqx	local04
2e624     A8 00 00 FF 
2e628     80 23 06 FD | 	qmul	local03, ##86400
2e62c     12 27 02 F1 | 	add	local05, local04
2e630     10 23 02 F6 | 	mov	local03, local02
2e634     03 00 00 FF 
2e638     B2 23 86 F1 | 	sub	local03, ##1970
2e63c     18 24 62 FD | 	getqx	local04
2e640     99 F0 00 FF 
2e644     80 23 06 FD | 	qmul	local03, ##31536000
2e648     12 27 02 F1 | 	add	local05, local04
2e64c     10 23 02 F6 | 	mov	local03, local02
2e650     03 00 00 FF 
2e654     B1 23 86 F1 | 	sub	local03, ##1969
2e658     11 29 52 F6 | 	abs	local06, local03 wc
2e65c     02 28 46 F0 | 	shr	local06, #2
2e660     14 29 82 F6 | 	negc	local06, local06
2e664     03 00 00 FF 
2e668     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e66c     18 24 62 FD | 	getqx	local04
2e670     12 27 02 F1 | 	add	local05, local04
2e674     18 00 90 CD |  if_b	jmp	#LR__4722
2e678     03 00 00 FF 
2e67c     D0 21 86 F1 | 	sub	local02, ##2000
2e680     10 25 52 F6 | 	abs	local04, local02 wc
2e684     64 24 16 FD | 	qdiv	local04, #100
2e688     18 24 62 FD | 	getqx	local04
2e68c     12 29 A2 F3 | 	sumnc	local06, local04
2e690                 | LR__4722
2e690     A8 00 00 FF 
2e694     80 29 06 FD | 	qmul	local06, ##86400
2e698     18 28 62 FD | 	getqx	local06
2e69c     14 27 02 F1 | 	add	local05, local06
2e6a0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e6a4     02 00 00 FF 
2e6a8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e6ac     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e6b0     14 27 02 F1 | 	add	local05, local06
2e6b4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e6b8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e6bc     02 00 00 FF 
2e6c0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e6c4     01 22 0E F2 | 	cmp	local03, #1 wz
2e6c8     14 00 90 5D |  if_ne	jmp	#LR__4723
2e6cc     0F 13 02 F6 | 	mov	arg01, local01
2e6d0     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6d8     07 00 00 5F 
2e6dc     10 26 86 51 |  if_ne	sub	local05, ##3600
2e6e0                 | LR__4723
2e6e0                 | '                 s -=  (3600L) ;
2e6e0                 | ' 
2e6e0                 | '         return s;
2e6e0     13 FB 01 F6 | 	mov	result1, local05
2e6e4                 | LR__4724
2e6e4     A7 F0 03 F6 | 	mov	ptra, fp
2e6e8     B2 00 A0 FD | 	call	#popregs_
2e6ec                 | _fatfs_cc_mktime_ret
2e6ec     2D 00 64 FD | 	ret
2e6f0                 | 
2e6f0                 | _fatfs_cc__gmtime_r
2e6f0     03 4A 05 F6 | 	mov	COUNT_, #3
2e6f4     A8 00 A0 FD | 	call	#pushregs_
2e6f8     09 1F 02 FB | 	rdlong	local01, arg01
2e6fc     A8 00 00 FF 
2e700     80 1F 16 FD | 	qdiv	local01, ##86400
2e704     18 FA 61 FD | 	getqx	result1
2e708     04 FA 05 F1 | 	add	result1, #4
2e70c     07 FA 15 FD | 	qdiv	result1, #7
2e710     18 14 06 F1 | 	add	arg02, #24
2e714     D1 7F 27 FF 
2e718     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e71c     D1 7F 27 3F 
2e720     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e724     03 00 00 3F 
2e728     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e72c     03 00 00 CF 
2e730     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e734                 | ' 	  year = 1970;
2e734                 | ' 	}
2e734                 | ' 
2e734                 | ' 	for(;;) {
2e734     19 FA 61 FD | 	getqy	result1
2e738     0A FB 61 FC | 	wrlong	result1, arg02
2e73c     18 14 86 F1 | 	sub	arg02, #24
2e740                 | LR__4730
2e740     10 13 02 F6 | 	mov	arg01, local02
2e744     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e748     00 FA 0D F2 | 	cmp	result1, #0 wz
2e74c     42 F1 00 5F 
2e750     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e754     99 F0 00 AF 
2e758     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e75c     11 1F 12 F2 | 	cmp	local01, local03 wc
2e760                 | ' 	    break;
2e760     01 20 06 31 |  if_ae	add	local02, #1
2e764     11 1F 82 31 |  if_ae	sub	local01, local03
2e768     D4 FF 9F 3D |  if_ae	jmp	#LR__4730
2e76c     A8 00 00 FF 
2e770     80 1F 16 FD | 	qdiv	local01, ##86400
2e774     10 23 02 F6 | 	mov	local03, local02
2e778     03 00 00 FF 
2e77c     6C 23 86 F1 | 	sub	local03, ##1900
2e780     14 14 06 F1 | 	add	arg02, #20
2e784     0A 23 62 FC | 	wrlong	local03, arg02
2e788     08 14 06 F1 | 	add	arg02, #8
2e78c     10 13 02 F6 | 	mov	arg01, local02
2e790     18 20 62 FD | 	getqx	local02
2e794     0A 21 62 FC | 	wrlong	local02, arg02
2e798     1C 14 86 F1 | 	sub	arg02, #28
2e79c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e7a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7a4     1D 22 06 56 |  if_ne	mov	local03, #29
2e7a8     1C 22 06 A6 |  if_e	mov	local03, #28
2e7ac     02 00 00 FF 
2e7b0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e7b4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e7b8     02 00 00 FF 
2e7bc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e7c0                 | ' 
2e7c0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e7c0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e7c0     00 12 06 F6 | 	mov	arg01, #0
2e7c4     97 2A 48 FB | 	callpa	#(@LR__4732-@LR__4731)>>2,fcache_load_ptr_
2e7c8                 | LR__4731
2e7c8     09 23 02 F6 | 	mov	local03, arg01
2e7cc     02 22 66 F0 | 	shl	local03, #2
2e7d0     02 00 00 FF 
2e7d4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e7d8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e7dc     11 23 02 FB | 	rdlong	local03, local03
2e7e0     11 21 52 F2 | 	cmps	local02, local03 wc
2e7e4     02 00 00 FF 
2e7e8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e7ec     2C 00 90 CD |  if_b	jmp	#LR__4733
2e7f0     09 23 02 F6 | 	mov	local03, arg01
2e7f4     02 22 66 F0 | 	shl	local03, #2
2e7f8     02 00 00 FF 
2e7fc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e800     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e804     11 23 02 FB | 	rdlong	local03, local03
2e808     11 21 82 F1 | 	sub	local02, local03
2e80c     01 12 06 F1 | 	add	arg01, #1
2e810     02 00 00 FF 
2e814     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e818     AC FF 9F FD | 	jmp	#LR__4731
2e81c                 | LR__4732
2e81c                 | LR__4733
2e81c     A8 00 00 FF 
2e820     80 1F 16 FD | 	qdiv	local01, ##86400
2e824     10 14 06 F1 | 	add	arg02, #16
2e828     0A 13 62 FC | 	wrlong	arg01, arg02
2e82c     01 20 06 F1 | 	add	local02, #1
2e830     04 14 86 F1 | 	sub	arg02, #4
2e834     0A 21 62 FC | 	wrlong	local02, arg02
2e838     19 1E 62 FD | 	getqy	local01
2e83c     07 00 00 FF 
2e840     10 1E 16 FD | 	qdiv	local01, ##3600
2e844     18 22 62 FD | 	getqx	local03
2e848     07 00 00 FF 
2e84c     10 1E 16 FD | 	qdiv	local01, ##3600
2e850     04 14 86 F1 | 	sub	arg02, #4
2e854     0A 23 62 FC | 	wrlong	local03, arg02
2e858     19 1E 62 FD | 	getqy	local01
2e85c     3C 1E 16 FD | 	qdiv	local01, #60
2e860     18 22 62 FD | 	getqx	local03
2e864     3C 1E 16 FD | 	qdiv	local01, #60
2e868     04 14 86 F1 | 	sub	arg02, #4
2e86c     0A 23 62 FC | 	wrlong	local03, arg02
2e870     04 14 86 F1 | 	sub	arg02, #4
2e874                 | '         stm->tm_isdst = 0;
2e874                 | ' 
2e874                 | ' ;
2e874                 | '         return stm;
2e874     0A FB 01 F6 | 	mov	result1, arg02
2e878     19 22 62 FD | 	getqy	local03
2e87c     0A 23 62 FC | 	wrlong	local03, arg02
2e880     20 14 06 F1 | 	add	arg02, #32
2e884     0A 01 68 FC | 	wrlong	#0, arg02
2e888     A7 F0 03 F6 | 	mov	ptra, fp
2e88c     B2 00 A0 FD | 	call	#popregs_
2e890                 | _fatfs_cc__gmtime_r_ret
2e890     2D 00 64 FD | 	ret
2e894                 | 
2e894                 | _fatfs_cc__tzset
2e894     81 01 00 FF 
2e898     D9 13 06 F6 | 	mov	arg01, ##@LR__5045
2e89c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e8a0     FD 12 02 F6 | 	mov	arg01, result1
2e8a4     02 00 00 FF 
2e8a8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e8ac     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e8b0     02 00 00 FF 
2e8b4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e8b8     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e8bc     02 00 00 FF 
2e8c0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e8c4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e8c8     02 00 00 FF 
2e8cc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e8d0                 | _fatfs_cc__tzset_ret
2e8d0     2D 00 64 FD | 	ret
2e8d4                 | 
2e8d4                 | _fatfs_cc_getenv
2e8d4     06 4A 05 F6 | 	mov	COUNT_, #6
2e8d8     A8 00 A0 FD | 	call	#pushregs_
2e8dc     09 1F 02 F6 | 	mov	local01, arg01
2e8e0     09 21 02 F6 | 	mov	local02, arg01
2e8e4     97 06 48 FB | 	callpa	#(@LR__4741-@LR__4740)>>2,fcache_load_ptr_
2e8e8                 | LR__4740
2e8e8     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e8ec     01 20 06 51 |  if_ne	add	local02, #1
2e8f0     F4 FF 9F 5D |  if_ne	jmp	#LR__4740
2e8f4                 | LR__4741
2e8f4     09 21 82 F1 | 	sub	local02, arg01
2e8f8     10 FB 01 F6 | 	mov	result1, local02
2e8fc     02 00 00 FF 
2e900     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e904     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e908     02 00 00 FF 
2e90c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e910                 | '             return 0;
2e910     00 FA 05 A6 |  if_e	mov	result1, #0
2e914     5C 00 90 AD |  if_e	jmp	#LR__4744
2e918                 | ' 
2e918                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e918     02 00 00 FF 
2e91c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e920     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e924     02 00 00 FF 
2e928     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e92c                 | LR__4742
2e92c     11 25 0A FB | 	rdlong	local04, local03 wz
2e930     3C 00 90 AD |  if_e	jmp	#LR__4743
2e934     12 13 02 F6 | 	mov	arg01, local04
2e938     0F 15 02 F6 | 	mov	arg02, local01
2e93c     10 17 02 F6 | 	mov	arg03, local02
2e940     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e944     00 FA 0D F2 | 	cmp	result1, #0 wz
2e948     10 27 02 A6 |  if_e	mov	local05, local02
2e94c     12 27 02 A1 |  if_e	add	local05, local04
2e950     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e954     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e958                 | ' 			return name+len+1;
2e958     10 25 02 A1 |  if_e	add	local04, local02
2e95c     01 24 06 A1 |  if_e	add	local04, #1
2e960     12 FB 01 A6 |  if_e	mov	result1, local04
2e964     0C 00 90 AD |  if_e	jmp	#LR__4744
2e968     04 22 06 F1 | 	add	local03, #4
2e96c     BC FF 9F FD | 	jmp	#LR__4742
2e970                 | LR__4743
2e970                 | ' 	}
2e970                 | ' 	return 0;
2e970     00 FA 05 F6 | 	mov	result1, #0
2e974                 | LR__4744
2e974     A7 F0 03 F6 | 	mov	ptra, fp
2e978     B2 00 A0 FD | 	call	#popregs_
2e97c                 | _fatfs_cc_getenv_ret
2e97c     2D 00 64 FD | 	ret
2e980                 | 
2e980                 | _fatfs_cc__get_fattime
2e980     00 4A 05 F6 | 	mov	COUNT_, #0
2e984     A8 00 A0 FD | 	call	#pushregs_
2e988     34 F0 07 F1 | 	add	ptra, #52
2e98c     00 12 06 F6 | 	mov	arg01, #0
2e990     38 FB BF FD | 	call	#_fatfs_cc_time
2e994     04 4E 05 F1 | 	add	fp, #4
2e998     A7 FA 61 FC | 	wrlong	result1, fp
2e99c     A7 12 02 F6 | 	mov	arg01, fp
2e9a0     0C 4E 05 F1 | 	add	fp, #12
2e9a4     A7 14 02 F6 | 	mov	arg02, fp
2e9a8     10 4E 85 F1 | 	sub	fp, #16
2e9ac     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e9b0     24 4E 05 F1 | 	add	fp, #36
2e9b4     A7 14 02 FB | 	rdlong	arg02, fp
2e9b8     50 14 86 F1 | 	sub	arg02, #80
2e9bc     09 14 66 F0 | 	shl	arg02, #9
2e9c0     04 4E 85 F1 | 	sub	fp, #4
2e9c4     A7 FA 01 FB | 	rdlong	result1, fp
2e9c8     01 FA 05 F1 | 	add	result1, #1
2e9cc     05 FA 65 F0 | 	shl	result1, #5
2e9d0     FD 14 42 F5 | 	or	arg02, result1
2e9d4     04 4E 85 F1 | 	sub	fp, #4
2e9d8     A7 FA 01 FB | 	rdlong	result1, fp
2e9dc     FD 14 42 F5 | 	or	arg02, result1
2e9e0     14 4E 85 F1 | 	sub	fp, #20
2e9e4     A7 14 62 FC | 	wrlong	arg02, fp
2e9e8     10 4E 05 F1 | 	add	fp, #16
2e9ec     A7 14 02 FB | 	rdlong	arg02, fp
2e9f0     0B 14 66 F0 | 	shl	arg02, #11
2e9f4     04 4E 85 F1 | 	sub	fp, #4
2e9f8     A7 FA 01 FB | 	rdlong	result1, fp
2e9fc     05 FA 65 F0 | 	shl	result1, #5
2ea00     FD 14 42 F5 | 	or	arg02, result1
2ea04     04 4E 85 F1 | 	sub	fp, #4
2ea08     A7 FA 01 FB | 	rdlong	result1, fp
2ea0c     FD 14 42 F5 | 	or	arg02, result1
2ea10     04 4E 85 F1 | 	sub	fp, #4
2ea14     A7 14 62 FC | 	wrlong	arg02, fp
2ea18                 | ' 
2ea18                 | '     now = time(0);
2ea18                 | '     _gmtime_r (&now, &date);
2ea18                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2ea18                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2ea18                 | '     return (ffdate << 16) | fftime;
2ea18     04 4E 85 F1 | 	sub	fp, #4
2ea1c     A7 FA 01 FB | 	rdlong	result1, fp
2ea20     10 FA 65 F0 | 	shl	result1, #16
2ea24     08 4E 85 F1 | 	sub	fp, #8
2ea28     0A FB 41 F5 | 	or	result1, arg02
2ea2c     A7 F0 03 F6 | 	mov	ptra, fp
2ea30     B2 00 A0 FD | 	call	#popregs_
2ea34                 | _fatfs_cc__get_fattime_ret
2ea34     2D 00 64 FD | 	ret
2ea38                 | 
2ea38                 | _fatfs_cc_unixtime_0960
2ea38     00 4A 05 F6 | 	mov	COUNT_, #0
2ea3c     A8 00 A0 FD | 	call	#pushregs_
2ea40     34 F0 07 F1 | 	add	ptra, #52
2ea44     04 4E 05 F1 | 	add	fp, #4
2ea48     A7 12 62 FC | 	wrlong	arg01, fp
2ea4c     04 4E 05 F1 | 	add	fp, #4
2ea50     A7 14 62 FC | 	wrlong	arg02, fp
2ea54     04 4E 85 F1 | 	sub	fp, #4
2ea58     A7 14 02 FB | 	rdlong	arg02, fp
2ea5c     09 14 46 F0 | 	shr	arg02, #9
2ea60     7F 14 06 F5 | 	and	arg02, #127
2ea64     50 FA 05 F6 | 	mov	result1, #80
2ea68     0A FB 01 F1 | 	add	result1, arg02
2ea6c     20 4E 05 F1 | 	add	fp, #32
2ea70     A7 FA 61 FC | 	wrlong	result1, fp
2ea74     20 4E 85 F1 | 	sub	fp, #32
2ea78     A7 FA 01 FB | 	rdlong	result1, fp
2ea7c     05 FA 45 F0 | 	shr	result1, #5
2ea80     FD FA 41 F8 | 	getnib	result1, result1, #0
2ea84     01 FA 85 F1 | 	sub	result1, #1
2ea88     1C 4E 05 F1 | 	add	fp, #28
2ea8c     A7 FA 61 FC | 	wrlong	result1, fp
2ea90     1C 4E 85 F1 | 	sub	fp, #28
2ea94     A7 FA 01 FB | 	rdlong	result1, fp
2ea98     1F FA 05 F5 | 	and	result1, #31
2ea9c     18 4E 05 F1 | 	add	fp, #24
2eaa0     A7 FA 61 FC | 	wrlong	result1, fp
2eaa4     14 4E 85 F1 | 	sub	fp, #20
2eaa8     A7 FA 01 FB | 	rdlong	result1, fp
2eaac     0B FA 45 F0 | 	shr	result1, #11
2eab0     1F FA 05 F5 | 	and	result1, #31
2eab4     10 4E 05 F1 | 	add	fp, #16
2eab8     A7 FA 61 FC | 	wrlong	result1, fp
2eabc     10 4E 85 F1 | 	sub	fp, #16
2eac0     A7 FA 01 FB | 	rdlong	result1, fp
2eac4     05 FA 45 F0 | 	shr	result1, #5
2eac8     3F FA 05 F5 | 	and	result1, #63
2eacc     0C 4E 05 F1 | 	add	fp, #12
2ead0     A7 FA 61 FC | 	wrlong	result1, fp
2ead4     0C 4E 85 F1 | 	sub	fp, #12
2ead8     A7 14 02 FB | 	rdlong	arg02, fp
2eadc     1F 14 06 F5 | 	and	arg02, #31
2eae0     01 14 66 F0 | 	shl	arg02, #1
2eae4     08 4E 05 F1 | 	add	fp, #8
2eae8     A7 14 62 FC | 	wrlong	arg02, fp
2eaec     A7 12 02 F6 | 	mov	arg01, fp
2eaf0     10 4E 85 F1 | 	sub	fp, #16
2eaf4     4C FA BF FD | 	call	#_fatfs_cc_mktime
2eaf8     0C 4E 05 F1 | 	add	fp, #12
2eafc     A7 FA 61 FC | 	wrlong	result1, fp
2eb00                 | ' 
2eb00                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2eb00                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2eb00                 | '     date.tm_mday = (dosdate & 0x1f);
2eb00                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2eb00                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2eb00                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2eb00                 | ' 
2eb00                 | '     t = mktime(&date);
2eb00                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eb00                 | '     return t;
2eb00     0C 4E 85 F1 | 	sub	fp, #12
2eb04     A7 F0 03 F6 | 	mov	ptra, fp
2eb08     B2 00 A0 FD | 	call	#popregs_
2eb0c                 | _fatfs_cc_unixtime_0960_ret
2eb0c     2D 00 64 FD | 	ret
2eb10                 | 
2eb10                 | _fatfs_cc__set_dos_error_0962
2eb10     09 01 02 F6 | 	mov	_var01, arg01
2eb14                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eb14                 | '     switch (derr) {
2eb14     14 00 26 F3 | 	fle	_var01, #20
2eb18     30 00 62 FD | 	jmprel	_var01
2eb1c                 | LR__4750
2eb1c     50 00 90 FD | 	jmp	#LR__4751
2eb20     84 00 90 FD | 	jmp	#LR__4765
2eb24     80 00 90 FD | 	jmp	#LR__4766
2eb28     7C 00 90 FD | 	jmp	#LR__4767
2eb2c     48 00 90 FD | 	jmp	#LR__4752
2eb30     44 00 90 FD | 	jmp	#LR__4753
2eb34     40 00 90 FD | 	jmp	#LR__4754
2eb38     44 00 90 FD | 	jmp	#LR__4755
2eb3c     48 00 90 FD | 	jmp	#LR__4757
2eb40     54 00 90 FD | 	jmp	#LR__4760
2eb44     38 00 90 FD | 	jmp	#LR__4756
2eb48     4C 00 90 FD | 	jmp	#LR__4761
2eb4c     48 00 90 FD | 	jmp	#LR__4762
2eb50     44 00 90 FD | 	jmp	#LR__4763
2eb54     50 00 90 FD | 	jmp	#LR__4768
2eb58     4C 00 90 FD | 	jmp	#LR__4768
2eb5c     48 00 90 FD | 	jmp	#LR__4768
2eb60     2C 00 90 FD | 	jmp	#LR__4758
2eb64     38 00 90 FD | 	jmp	#LR__4764
2eb68     2C 00 90 FD | 	jmp	#LR__4759
2eb6c     38 00 90 FD | 	jmp	#LR__4768
2eb70                 | LR__4751
2eb70     00 02 06 F6 | 	mov	_var02, #0
2eb74                 | '         r = 0;
2eb74                 | '         break;
2eb74     34 00 90 FD | 	jmp	#LR__4769
2eb78                 | LR__4752
2eb78                 | LR__4753
2eb78                 | LR__4754
2eb78     04 02 06 F6 | 	mov	_var02, #4
2eb7c                 | '         r =  4 ;
2eb7c                 | '         break;
2eb7c     2C 00 90 FD | 	jmp	#LR__4769
2eb80                 | LR__4755
2eb80                 | LR__4756
2eb80     06 02 06 F6 | 	mov	_var02, #6
2eb84                 | '         r =  6 ;
2eb84                 | '         break;
2eb84     24 00 90 FD | 	jmp	#LR__4769
2eb88                 | LR__4757
2eb88     09 02 06 F6 | 	mov	_var02, #9
2eb8c                 | '         r =  9 ;
2eb8c                 | '         break;
2eb8c     1C 00 90 FD | 	jmp	#LR__4769
2eb90                 | LR__4758
2eb90     07 02 06 F6 | 	mov	_var02, #7
2eb94                 | '         r =  7 ;
2eb94                 | '         break;
2eb94     14 00 90 FD | 	jmp	#LR__4769
2eb98                 | LR__4759
2eb98                 | LR__4760
2eb98                 | LR__4761
2eb98                 | LR__4762
2eb98                 | LR__4763
2eb98     0A 02 06 F6 | 	mov	_var02, #10
2eb9c                 | '         r =  10 ;
2eb9c                 | '         break;
2eb9c     0C 00 90 FD | 	jmp	#LR__4769
2eba0                 | LR__4764
2eba0     0B 02 06 F6 | 	mov	_var02, #11
2eba4                 | '         r =  11 ;
2eba4                 | '         break;
2eba4     04 00 90 FD | 	jmp	#LR__4769
2eba8                 | LR__4765
2eba8                 | LR__4766
2eba8                 | LR__4767
2eba8                 | LR__4768
2eba8     0C 02 06 F6 | 	mov	_var02, #12
2ebac                 | '         r =  12 ;
2ebac                 | '         break;
2ebac                 | LR__4769
2ebac                 | '     }
2ebac                 | '     return _seterror(r);
2ebac     00 02 4E F2 | 	cmps	_var02, #0 wz
2ebb0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ebb4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ebb8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ebbc     01 FA 65 56 |  if_ne	neg	result1, #1
2ebc0     00 FA 05 A6 |  if_e	mov	result1, #0
2ebc4                 | _fatfs_cc__set_dos_error_0962_ret
2ebc4     2D 00 64 FD | 	ret
2ebc8                 | 
2ebc8                 | _fatfs_cc_v_creat
2ebc8     04 4A 05 F6 | 	mov	COUNT_, #4
2ebcc     A8 00 A0 FD | 	call	#pushregs_
2ebd0     09 1F 02 F6 | 	mov	local01, arg01
2ebd4     0A 21 02 F6 | 	mov	local02, arg02
2ebd8     03 00 00 FF 
2ebdc     3C 12 06 F6 | 	mov	arg01, ##1596
2ebe0                 | '     return _gc_alloc(size);
2ebe0     10 14 06 F6 | 	mov	arg02, #16
2ebe4     28 5E BF FD | 	call	#__system___gc_doalloc
2ebe8     FD 22 0A F6 | 	mov	local03, result1 wz
2ebec                 | '       return _seterror( 7 );
2ebec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ebf0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ebf4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ebf8     01 FA 65 A6 |  if_e	neg	result1, #1
2ebfc     58 00 90 AD |  if_e	jmp	#LR__4771
2ec00     11 13 02 F6 | 	mov	arg01, local03
2ec04     00 14 06 F6 | 	mov	arg02, #0
2ec08     03 00 00 FF 
2ec0c     3C 16 06 F6 | 	mov	arg03, ##1596
2ec10     98 00 A0 FD | 	call	#\builtin_bytefill_
2ec14     02 00 00 FF 
2ec18     14 22 06 F1 | 	add	local03, ##1044
2ec1c     11 13 02 F6 | 	mov	arg01, local03
2ec20     02 00 00 FF 
2ec24     14 22 86 F1 | 	sub	local03, ##1044
2ec28     10 15 02 F6 | 	mov	arg02, local02
2ec2c     07 16 06 F6 | 	mov	arg03, #7
2ec30     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2ec34     FD 24 0A F6 | 	mov	local04, result1 wz
2ec38     14 00 90 AD |  if_e	jmp	#LR__4770
2ec3c     11 13 02 F6 | 	mov	arg01, local03
2ec40                 | '     return _gc_free(ptr);
2ec40     D8 5E BF FD | 	call	#__system___gc_free
2ec44                 | '     free(f);
2ec44                 | '     return _set_dos_error(r);
2ec44     12 13 02 F6 | 	mov	arg01, local04
2ec48     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ec4c     08 00 90 FD | 	jmp	#LR__4771
2ec50                 | LR__4770
2ec50     0F 23 62 FC | 	wrlong	local03, local01
2ec54                 | '   }
2ec54                 | '   fil->vfsdata = f;
2ec54                 | '   return 0;
2ec54     00 FA 05 F6 | 	mov	result1, #0
2ec58                 | LR__4771
2ec58     A7 F0 03 F6 | 	mov	ptra, fp
2ec5c     B2 00 A0 FD | 	call	#popregs_
2ec60                 | _fatfs_cc_v_creat_ret
2ec60     2D 00 64 FD | 	ret
2ec64                 | 
2ec64                 | _fatfs_cc_v_close
2ec64     02 4A 05 F6 | 	mov	COUNT_, #2
2ec68     A8 00 A0 FD | 	call	#pushregs_
2ec6c     09 1F 02 FB | 	rdlong	local01, arg01
2ec70     02 00 00 FF 
2ec74     14 1E 06 F1 | 	add	local01, ##1044
2ec78     0F 13 02 F6 | 	mov	arg01, local01
2ec7c     02 00 00 FF 
2ec80     14 1E 86 F1 | 	sub	local01, ##1044
2ec84     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ec88     FD 20 02 F6 | 	mov	local02, result1
2ec8c     0F 13 02 F6 | 	mov	arg01, local01
2ec90                 | '     return _gc_free(ptr);
2ec90     88 5E BF FD | 	call	#__system___gc_free
2ec94                 | '     FAT_FIL *f = fil->vfsdata;
2ec94                 | '     r=f_close(&f->fil);
2ec94                 | '     free(f);
2ec94                 | '     return _set_dos_error(r);
2ec94     10 13 02 F6 | 	mov	arg01, local02
2ec98     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ec9c     A7 F0 03 F6 | 	mov	ptra, fp
2eca0     B2 00 A0 FD | 	call	#popregs_
2eca4                 | _fatfs_cc_v_close_ret
2eca4     2D 00 64 FD | 	ret
2eca8                 | 
2eca8                 | _fatfs_cc_v_opendir
2eca8     04 4A 05 F6 | 	mov	COUNT_, #4
2ecac     A8 00 A0 FD | 	call	#pushregs_
2ecb0     09 1F 02 F6 | 	mov	local01, arg01
2ecb4     0A 21 02 F6 | 	mov	local02, arg02
2ecb8     30 12 06 F6 | 	mov	arg01, #48
2ecbc                 | '     return _gc_alloc(size);
2ecbc     10 14 06 F6 | 	mov	arg02, #16
2ecc0     4C 5D BF FD | 	call	#__system___gc_doalloc
2ecc4     FD 22 0A F6 | 	mov	local03, result1 wz
2ecc8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ecc8                 | '       return _seterror( 7 );
2ecc8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eccc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ecd0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ecd4     01 FA 65 A6 |  if_e	neg	result1, #1
2ecd8     34 00 90 AD |  if_e	jmp	#LR__4781
2ecdc     10 15 02 F6 | 	mov	arg02, local02
2ece0     11 13 02 F6 | 	mov	arg01, local03
2ece4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ece8     FD 24 0A F6 | 	mov	local04, result1 wz
2ecec     14 00 90 AD |  if_e	jmp	#LR__4780
2ecf0     11 13 02 F6 | 	mov	arg01, local03
2ecf4                 | '     return _gc_free(ptr);
2ecf4     24 5E BF FD | 	call	#__system___gc_free
2ecf8                 | '         free(f);
2ecf8                 | '         return _set_dos_error(r);
2ecf8     12 13 02 F6 | 	mov	arg01, local04
2ecfc     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ed00     0C 00 90 FD | 	jmp	#LR__4781
2ed04                 | LR__4780
2ed04     04 1E 06 F1 | 	add	local01, #4
2ed08     0F 23 62 FC | 	wrlong	local03, local01
2ed0c                 | '     }
2ed0c                 | '     dir->vfsdata = f;
2ed0c                 | '     return 0;
2ed0c     00 FA 05 F6 | 	mov	result1, #0
2ed10                 | LR__4781
2ed10     A7 F0 03 F6 | 	mov	ptra, fp
2ed14     B2 00 A0 FD | 	call	#popregs_
2ed18                 | _fatfs_cc_v_opendir_ret
2ed18     2D 00 64 FD | 	ret
2ed1c                 | 
2ed1c                 | _fatfs_cc_v_closedir
2ed1c     02 4A 05 F6 | 	mov	COUNT_, #2
2ed20     A8 00 A0 FD | 	call	#pushregs_
2ed24     04 12 06 F1 | 	add	arg01, #4
2ed28     09 1F 02 FB | 	rdlong	local01, arg01
2ed2c     0F 13 02 F6 | 	mov	arg01, local01
2ed30     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ed34     FD 20 02 F6 | 	mov	local02, result1
2ed38     0F 13 02 F6 | 	mov	arg01, local01
2ed3c                 | '     return _gc_free(ptr);
2ed3c     DC 5D BF FD | 	call	#__system___gc_free
2ed40     00 20 0E F2 | 	cmp	local02, #0 wz
2ed44     10 13 02 56 |  if_ne	mov	arg01, local02
2ed48     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2ed4c                 | '     return r;
2ed4c     10 FB 01 F6 | 	mov	result1, local02
2ed50     A7 F0 03 F6 | 	mov	ptra, fp
2ed54     B2 00 A0 FD | 	call	#popregs_
2ed58                 | _fatfs_cc_v_closedir_ret
2ed58     2D 00 64 FD | 	ret
2ed5c                 | 
2ed5c                 | _fatfs_cc_v_readdir
2ed5c     01 4A 05 F6 | 	mov	COUNT_, #1
2ed60     A8 00 A0 FD | 	call	#pushregs_
2ed64     2C F1 07 F1 | 	add	ptra, #300
2ed68     04 4E 05 F1 | 	add	fp, #4
2ed6c     A7 12 62 FC | 	wrlong	arg01, fp
2ed70     04 4E 05 F1 | 	add	fp, #4
2ed74     A7 14 62 FC | 	wrlong	arg02, fp
2ed78     04 4E 85 F1 | 	sub	fp, #4
2ed7c     A7 16 02 FB | 	rdlong	arg03, fp
2ed80     04 16 06 F1 | 	add	arg03, #4
2ed84     0B 13 02 FB | 	rdlong	arg01, arg03
2ed88     08 4E 05 F1 | 	add	fp, #8
2ed8c     A7 14 02 F6 | 	mov	arg02, fp
2ed90     0C 4E 85 F1 | 	sub	fp, #12
2ed94     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ed98     28 4F 05 F1 | 	add	fp, #296
2ed9c     A7 FA 61 FC | 	wrlong	result1, fp
2eda0     28 4F 85 F1 | 	sub	fp, #296
2eda4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eda8     14 00 90 AD |  if_e	jmp	#LR__4790
2edac                 | '         return _set_dos_error(r);
2edac     28 4F 05 F1 | 	add	fp, #296
2edb0     A7 12 02 FB | 	rdlong	arg01, fp
2edb4     28 4F 85 F1 | 	sub	fp, #296
2edb8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2edbc     C4 00 90 FD | 	jmp	#LR__4793
2edc0                 | LR__4790
2edc0     28 4E 05 F1 | 	add	fp, #40
2edc4     A7 16 CA FA | 	rdbyte	arg03, fp wz
2edc8     28 4E 85 F1 | 	sub	fp, #40
2edcc                 | '         return -1;
2edcc     01 FA 65 A6 |  if_e	neg	result1, #1
2edd0     B0 00 90 AD |  if_e	jmp	#LR__4793
2edd4     08 4E 05 F1 | 	add	fp, #8
2edd8     A7 12 02 FB | 	rdlong	arg01, fp
2eddc     20 4E 05 F1 | 	add	fp, #32
2ede0     A7 14 02 F6 | 	mov	arg02, fp
2ede4     28 4E 85 F1 | 	sub	fp, #40
2ede8     3F 16 06 F6 | 	mov	arg03, #63
2edec     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2edf0     08 4E 05 F1 | 	add	fp, #8
2edf4     A7 16 02 FB | 	rdlong	arg03, fp
2edf8     3F 16 06 F1 | 	add	arg03, #63
2edfc     0B 01 48 FC | 	wrbyte	#0, arg03
2ee00     0C 4E 05 F1 | 	add	fp, #12
2ee04     A7 16 C2 FA | 	rdbyte	arg03, fp
2ee08     14 4E 85 F1 | 	sub	fp, #20
2ee0c     10 16 CE F7 | 	test	arg03, #16 wz
2ee10     18 00 90 AD |  if_e	jmp	#LR__4791
2ee14     08 4E 05 F1 | 	add	fp, #8
2ee18     A7 16 02 FB | 	rdlong	arg03, fp
2ee1c     08 4E 85 F1 | 	sub	fp, #8
2ee20     50 16 06 F1 | 	add	arg03, #80
2ee24     0B 03 48 FC | 	wrbyte	#1, arg03
2ee28     14 00 90 FD | 	jmp	#LR__4792
2ee2c                 | LR__4791
2ee2c     08 4E 05 F1 | 	add	fp, #8
2ee30     A7 16 02 FB | 	rdlong	arg03, fp
2ee34     08 4E 85 F1 | 	sub	fp, #8
2ee38     50 16 06 F1 | 	add	arg03, #80
2ee3c     0B 01 48 FC | 	wrbyte	#0, arg03
2ee40                 | LR__4792
2ee40     08 4E 05 F1 | 	add	fp, #8
2ee44     A7 16 02 FB | 	rdlong	arg03, fp
2ee48     04 4E 05 F1 | 	add	fp, #4
2ee4c     A7 14 02 FB | 	rdlong	arg02, fp
2ee50     48 16 06 F1 | 	add	arg03, #72
2ee54     0B 15 62 FC | 	wrlong	arg02, arg03
2ee58     04 4E 85 F1 | 	sub	fp, #4
2ee5c     A7 1E 02 FB | 	rdlong	local01, fp
2ee60     08 4E 05 F1 | 	add	fp, #8
2ee64     A7 12 E2 FA | 	rdword	arg01, fp
2ee68     02 4E 05 F1 | 	add	fp, #2
2ee6c     A7 14 E2 FA | 	rdword	arg02, fp
2ee70     12 4E 85 F1 | 	sub	fp, #18
2ee74     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2ee78     4C 1E 06 F1 | 	add	local01, #76
2ee7c     0F FB 61 FC | 	wrlong	result1, local01
2ee80                 | '         ent->d_type =  (0) ;
2ee80                 | '     }
2ee80                 | '     ent->d_size = finfo.fsize;
2ee80                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ee80                 | '     return 0;
2ee80     00 FA 05 F6 | 	mov	result1, #0
2ee84                 | LR__4793
2ee84     A7 F0 03 F6 | 	mov	ptra, fp
2ee88     B2 00 A0 FD | 	call	#popregs_
2ee8c                 | _fatfs_cc_v_readdir_ret
2ee8c     2D 00 64 FD | 	ret
2ee90                 | 
2ee90                 | _fatfs_cc_v_stat
2ee90     03 4A 05 F6 | 	mov	COUNT_, #3
2ee94     A8 00 A0 FD | 	call	#pushregs_
2ee98     30 F1 07 F1 | 	add	ptra, #304
2ee9c     04 4E 05 F1 | 	add	fp, #4
2eea0     A7 12 62 FC | 	wrlong	arg01, fp
2eea4     04 4E 05 F1 | 	add	fp, #4
2eea8     A7 14 62 FC | 	wrlong	arg02, fp
2eeac     08 4E 85 F1 | 	sub	fp, #8
2eeb0     0A 13 02 F6 | 	mov	arg01, arg02
2eeb4     00 14 06 F6 | 	mov	arg02, #0
2eeb8     30 16 06 F6 | 	mov	arg03, #48
2eebc     98 00 A0 FD | 	call	#\builtin_bytefill_
2eec0     04 4E 05 F1 | 	add	fp, #4
2eec4     A7 FA 01 FB | 	rdlong	result1, fp
2eec8     04 4E 85 F1 | 	sub	fp, #4
2eecc     FD FA C9 FA | 	rdbyte	result1, result1 wz
2eed0     2C 00 90 AD |  if_e	jmp	#LR__4800
2eed4     04 4E 05 F1 | 	add	fp, #4
2eed8     A7 FA 01 FB | 	rdlong	result1, fp
2eedc     04 4E 85 F1 | 	sub	fp, #4
2eee0     FD FA C1 FA | 	rdbyte	result1, result1
2eee4     2E FA 0D F2 | 	cmp	result1, #46 wz
2eee8     04 4E 05 A1 |  if_e	add	fp, #4
2eeec     A7 1E 02 AB |  if_e	rdlong	local01, fp
2eef0     04 4E 85 A1 |  if_e	sub	fp, #4
2eef4     01 1E 06 A1 |  if_e	add	local01, #1
2eef8     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2eefc     18 00 90 5D |  if_ne	jmp	#LR__4801
2ef00                 | LR__4800
2ef00     18 4E 05 F1 | 	add	fp, #24
2ef04     A7 20 48 FC | 	wrbyte	#16, fp
2ef08     0C 4E 85 F1 | 	sub	fp, #12
2ef0c     A7 00 68 FC | 	wrlong	#0, fp
2ef10     0C 4E 85 F1 | 	sub	fp, #12
2ef14     24 00 90 FD | 	jmp	#LR__4802
2ef18                 | LR__4801
2ef18     04 4E 05 F1 | 	add	fp, #4
2ef1c     A7 12 02 FB | 	rdlong	arg01, fp
2ef20     0C 4E 05 F1 | 	add	fp, #12
2ef24     A7 14 02 F6 | 	mov	arg02, fp
2ef28     10 4E 85 F1 | 	sub	fp, #16
2ef2c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ef30     0C 4E 05 F1 | 	add	fp, #12
2ef34     A7 FA 61 FC | 	wrlong	result1, fp
2ef38     0C 4E 85 F1 | 	sub	fp, #12
2ef3c                 | LR__4802
2ef3c     0C 4E 05 F1 | 	add	fp, #12
2ef40     A7 20 0A FB | 	rdlong	local02, fp wz
2ef44     0C 4E 85 F1 | 	sub	fp, #12
2ef48     14 00 90 AD |  if_e	jmp	#LR__4803
2ef4c                 | '         return _set_dos_error(r);
2ef4c     0C 4E 05 F1 | 	add	fp, #12
2ef50     A7 12 02 FB | 	rdlong	arg01, fp
2ef54     0C 4E 85 F1 | 	sub	fp, #12
2ef58     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef5c     14 01 90 FD | 	jmp	#LR__4804
2ef60                 | LR__4803
2ef60     2C 4F 05 F1 | 	add	fp, #300
2ef64     A7 48 6A FC | 	wrlong	#292, fp
2ef68     14 4F 85 F1 | 	sub	fp, #276
2ef6c     A7 22 C2 FA | 	rdbyte	local03, fp
2ef70     18 4E 85 F1 | 	sub	fp, #24
2ef74     01 22 CE F7 | 	test	local03, #1 wz
2ef78     2C 4F 05 A1 |  if_e	add	fp, #300
2ef7c     A7 22 02 AB |  if_e	rdlong	local03, fp
2ef80     92 22 46 A5 |  if_e	or	local03, #146
2ef84     A7 22 62 AC |  if_e	wrlong	local03, fp
2ef88     2C 4F 85 A1 |  if_e	sub	fp, #300
2ef8c     18 4E 05 F1 | 	add	fp, #24
2ef90     A7 22 C2 FA | 	rdbyte	local03, fp
2ef94     18 4E 85 F1 | 	sub	fp, #24
2ef98     10 22 CE F7 | 	test	local03, #16 wz
2ef9c     2C 4F 05 51 |  if_ne	add	fp, #300
2efa0     A7 22 02 5B |  if_ne	rdlong	local03, fp
2efa4     08 00 00 5F 
2efa8     49 22 46 55 |  if_ne	or	local03, ##4169
2efac     A7 22 62 5C |  if_ne	wrlong	local03, fp
2efb0     2C 4F 85 51 |  if_ne	sub	fp, #300
2efb4     08 4E 05 F1 | 	add	fp, #8
2efb8     A7 22 02 FB | 	rdlong	local03, fp
2efbc     24 4F 05 F1 | 	add	fp, #292
2efc0     A7 20 02 FB | 	rdlong	local02, fp
2efc4     08 22 06 F1 | 	add	local03, #8
2efc8     11 21 62 FC | 	wrlong	local02, local03
2efcc     24 4F 85 F1 | 	sub	fp, #292
2efd0     A7 22 02 FB | 	rdlong	local03, fp
2efd4     0C 22 06 F1 | 	add	local03, #12
2efd8     11 03 68 FC | 	wrlong	#1, local03
2efdc     A7 22 02 FB | 	rdlong	local03, fp
2efe0     08 4E 05 F1 | 	add	fp, #8
2efe4     A7 20 02 FB | 	rdlong	local02, fp
2efe8     18 22 06 F1 | 	add	local03, #24
2efec     11 21 62 FC | 	wrlong	local02, local03
2eff0     08 4E 85 F1 | 	sub	fp, #8
2eff4     A7 22 02 FB | 	rdlong	local03, fp
2eff8     1C 22 06 F1 | 	add	local03, #28
2effc     01 00 80 FF 
2f000     11 01 68 FC | 	wrlong	##512, local03
2f004     A7 20 02 FB | 	rdlong	local02, fp
2f008     10 23 02 F6 | 	mov	local03, local02
2f00c     18 20 06 F1 | 	add	local02, #24
2f010     10 21 02 FB | 	rdlong	local02, local02
2f014     FF 21 06 F1 | 	add	local02, #511
2f018     10 21 52 F6 | 	abs	local02, local02 wc
2f01c     09 20 46 F0 | 	shr	local02, #9
2f020     10 21 82 F6 | 	negc	local02, local02
2f024     20 22 06 F1 | 	add	local03, #32
2f028     11 21 62 FC | 	wrlong	local02, local03
2f02c     A7 20 02 FB | 	rdlong	local02, fp
2f030     10 23 02 F6 | 	mov	local03, local02
2f034     10 1F 02 F6 | 	mov	local01, local02
2f038     0C 4E 05 F1 | 	add	fp, #12
2f03c     A7 12 E2 FA | 	rdword	arg01, fp
2f040     02 4E 05 F1 | 	add	fp, #2
2f044     A7 14 E2 FA | 	rdword	arg02, fp
2f048     16 4E 85 F1 | 	sub	fp, #22
2f04c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2f050     2C 1E 06 F1 | 	add	local01, #44
2f054     0F FB 61 FC | 	wrlong	result1, local01
2f058     28 20 06 F1 | 	add	local02, #40
2f05c     10 FB 61 FC | 	wrlong	result1, local02
2f060     24 22 06 F1 | 	add	local03, #36
2f064     11 FB 61 FC | 	wrlong	result1, local03
2f068                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2f068                 | '     }
2f068                 | '     buf->st_mode = mode;
2f068                 | '     buf->st_nlink = 1;
2f068                 | '     buf->st_size = finfo.fsize;
2f068                 | '     buf->st_blksize = 512;
2f068                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2f068                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2f068                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f068                 | '     return r;
2f068     0C 4E 05 F1 | 	add	fp, #12
2f06c     A7 FA 01 FB | 	rdlong	result1, fp
2f070     0C 4E 85 F1 | 	sub	fp, #12
2f074                 | LR__4804
2f074     A7 F0 03 F6 | 	mov	ptra, fp
2f078     B2 00 A0 FD | 	call	#popregs_
2f07c                 | _fatfs_cc_v_stat_ret
2f07c     2D 00 64 FD | 	ret
2f080                 | 
2f080                 | _fatfs_cc_v_read
2f080     00 4A 05 F6 | 	mov	COUNT_, #0
2f084     A8 00 A0 FD | 	call	#pushregs_
2f088     1C F0 07 F1 | 	add	ptra, #28
2f08c     04 4E 05 F1 | 	add	fp, #4
2f090     A7 12 62 FC | 	wrlong	arg01, fp
2f094     04 4E 05 F1 | 	add	fp, #4
2f098     A7 14 62 FC | 	wrlong	arg02, fp
2f09c     04 4E 05 F1 | 	add	fp, #4
2f0a0     A7 16 62 FC | 	wrlong	arg03, fp
2f0a4     08 4E 85 F1 | 	sub	fp, #8
2f0a8     A7 12 02 FB | 	rdlong	arg01, fp
2f0ac     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f0b0     0C 4E 05 F1 | 	add	fp, #12
2f0b4     A7 12 62 FC | 	wrlong	arg01, fp
2f0b8     10 4E 85 F1 | 	sub	fp, #16
2f0bc                 | '         return _seterror( 5 );
2f0bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f0c0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f0c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f0c8     01 FA 65 A6 |  if_e	neg	result1, #1
2f0cc     B8 00 90 AD |  if_e	jmp	#LR__4812
2f0d0     10 4E 05 F1 | 	add	fp, #16
2f0d4     A7 12 02 FB | 	rdlong	arg01, fp
2f0d8     02 00 00 FF 
2f0dc     14 12 06 F1 | 	add	arg01, ##1044
2f0e0     08 4E 85 F1 | 	sub	fp, #8
2f0e4     A7 14 02 FB | 	rdlong	arg02, fp
2f0e8     04 4E 05 F1 | 	add	fp, #4
2f0ec     A7 16 02 FB | 	rdlong	arg03, fp
2f0f0     0C 4E 05 F1 | 	add	fp, #12
2f0f4     A7 18 02 F6 | 	mov	arg04, fp
2f0f8     18 4E 85 F1 | 	sub	fp, #24
2f0fc     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2f100     14 4E 05 F1 | 	add	fp, #20
2f104     A7 FA 61 FC | 	wrlong	result1, fp
2f108     14 4E 85 F1 | 	sub	fp, #20
2f10c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f110     34 00 90 AD |  if_e	jmp	#LR__4810
2f114     04 4E 05 F1 | 	add	fp, #4
2f118     A7 18 02 FB | 	rdlong	arg04, fp
2f11c     0C 17 02 F6 | 	mov	arg03, arg04
2f120     08 18 06 F1 | 	add	arg04, #8
2f124     0C 19 02 FB | 	rdlong	arg04, arg04
2f128     20 18 46 F5 | 	or	arg04, #32
2f12c     08 16 06 F1 | 	add	arg03, #8
2f130     0B 19 62 FC | 	wrlong	arg04, arg03
2f134                 | '         fil->state |=  (0x20) ;
2f134                 | '         return _set_dos_error(r);
2f134     10 4E 05 F1 | 	add	fp, #16
2f138     A7 12 02 FB | 	rdlong	arg01, fp
2f13c     14 4E 85 F1 | 	sub	fp, #20
2f140     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f144     40 00 90 FD | 	jmp	#LR__4812
2f148                 | LR__4810
2f148     18 4E 05 F1 | 	add	fp, #24
2f14c     A7 FA 09 FB | 	rdlong	result1, fp wz
2f150     18 4E 85 F1 | 	sub	fp, #24
2f154     24 00 90 5D |  if_ne	jmp	#LR__4811
2f158     04 4E 05 F1 | 	add	fp, #4
2f15c     A7 FA 01 FB | 	rdlong	result1, fp
2f160     FD 18 02 F6 | 	mov	arg04, result1
2f164     04 4E 85 F1 | 	sub	fp, #4
2f168     08 FA 05 F1 | 	add	result1, #8
2f16c     FD FA 01 FB | 	rdlong	result1, result1
2f170     10 FA 45 F5 | 	or	result1, #16
2f174     08 18 06 F1 | 	add	arg04, #8
2f178     0C FB 61 FC | 	wrlong	result1, arg04
2f17c                 | LR__4811
2f17c                 | '         fil->state |=  (0x10) ;
2f17c                 | '     }
2f17c                 | '     return x;
2f17c     18 4E 05 F1 | 	add	fp, #24
2f180     A7 FA 01 FB | 	rdlong	result1, fp
2f184     18 4E 85 F1 | 	sub	fp, #24
2f188                 | LR__4812
2f188     A7 F0 03 F6 | 	mov	ptra, fp
2f18c     B2 00 A0 FD | 	call	#popregs_
2f190                 | _fatfs_cc_v_read_ret
2f190     2D 00 64 FD | 	ret
2f194                 | 
2f194                 | _fatfs_cc_v_write
2f194     00 4A 05 F6 | 	mov	COUNT_, #0
2f198     A8 00 A0 FD | 	call	#pushregs_
2f19c     1C F0 07 F1 | 	add	ptra, #28
2f1a0     04 4E 05 F1 | 	add	fp, #4
2f1a4     A7 12 62 FC | 	wrlong	arg01, fp
2f1a8     04 4E 05 F1 | 	add	fp, #4
2f1ac     A7 14 62 FC | 	wrlong	arg02, fp
2f1b0     04 4E 05 F1 | 	add	fp, #4
2f1b4     A7 16 62 FC | 	wrlong	arg03, fp
2f1b8     08 4E 85 F1 | 	sub	fp, #8
2f1bc     A7 12 02 FB | 	rdlong	arg01, fp
2f1c0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f1c4     0C 4E 05 F1 | 	add	fp, #12
2f1c8     A7 12 62 FC | 	wrlong	arg01, fp
2f1cc     10 4E 85 F1 | 	sub	fp, #16
2f1d0                 | '         return _seterror( 5 );
2f1d0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f1d4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f1d8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f1dc     01 FA 65 A6 |  if_e	neg	result1, #1
2f1e0     84 00 90 AD |  if_e	jmp	#LR__4821
2f1e4     10 4E 05 F1 | 	add	fp, #16
2f1e8     A7 12 02 FB | 	rdlong	arg01, fp
2f1ec     02 00 00 FF 
2f1f0     14 12 06 F1 | 	add	arg01, ##1044
2f1f4     08 4E 85 F1 | 	sub	fp, #8
2f1f8     A7 14 02 FB | 	rdlong	arg02, fp
2f1fc     04 4E 05 F1 | 	add	fp, #4
2f200     A7 16 02 FB | 	rdlong	arg03, fp
2f204     0C 4E 05 F1 | 	add	fp, #12
2f208     A7 18 02 F6 | 	mov	arg04, fp
2f20c     18 4E 85 F1 | 	sub	fp, #24
2f210     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f214     14 4E 05 F1 | 	add	fp, #20
2f218     A7 FA 61 FC | 	wrlong	result1, fp
2f21c     14 4E 85 F1 | 	sub	fp, #20
2f220     00 FA 0D F2 | 	cmp	result1, #0 wz
2f224     34 00 90 AD |  if_e	jmp	#LR__4820
2f228     04 4E 05 F1 | 	add	fp, #4
2f22c     A7 18 02 FB | 	rdlong	arg04, fp
2f230     0C 17 02 F6 | 	mov	arg03, arg04
2f234     08 18 06 F1 | 	add	arg04, #8
2f238     0C 19 02 FB | 	rdlong	arg04, arg04
2f23c     20 18 46 F5 | 	or	arg04, #32
2f240     08 16 06 F1 | 	add	arg03, #8
2f244     0B 19 62 FC | 	wrlong	arg04, arg03
2f248                 | '         fil->state |=  (0x20) ;
2f248                 | '         return _set_dos_error(r);
2f248     10 4E 05 F1 | 	add	fp, #16
2f24c     A7 12 02 FB | 	rdlong	arg01, fp
2f250     14 4E 85 F1 | 	sub	fp, #20
2f254     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f258     0C 00 90 FD | 	jmp	#LR__4821
2f25c                 | LR__4820
2f25c                 | '     }
2f25c                 | '     return x;
2f25c     18 4E 05 F1 | 	add	fp, #24
2f260     A7 FA 01 FB | 	rdlong	result1, fp
2f264     18 4E 85 F1 | 	sub	fp, #24
2f268                 | LR__4821
2f268     A7 F0 03 F6 | 	mov	ptra, fp
2f26c     B2 00 A0 FD | 	call	#popregs_
2f270                 | _fatfs_cc_v_write_ret
2f270     2D 00 64 FD | 	ret
2f274                 | 
2f274                 | _fatfs_cc_v_lseek
2f274     04 4A 05 F6 | 	mov	COUNT_, #4
2f278     A8 00 A0 FD | 	call	#pushregs_
2f27c     0A 1F 02 F6 | 	mov	local01, arg02
2f280     0B 21 02 F6 | 	mov	local02, arg03
2f284     09 23 02 FB | 	rdlong	local03, arg01
2f288     02 00 00 FF 
2f28c     14 22 0E F1 | 	add	local03, ##1044 wz
2f290                 | '         return _seterror( 5 );
2f290     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f294     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f298     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f29c     01 FA 65 A6 |  if_e	neg	result1, #1
2f2a0     4C 00 90 AD |  if_e	jmp	#LR__4832
2f2a4     00 20 0E F2 | 	cmp	local02, #0 wz
2f2a8     24 00 90 AD |  if_e	jmp	#LR__4830
2f2ac     01 20 0E F2 | 	cmp	local02, #1 wz
2f2b0     14 22 06 A1 |  if_e	add	local03, #20
2f2b4     11 25 02 AB |  if_e	rdlong	local04, local03
2f2b8     14 22 86 A1 |  if_e	sub	local03, #20
2f2bc     12 1F 02 A1 |  if_e	add	local01, local04
2f2c0     0C 22 06 51 |  if_ne	add	local03, #12
2f2c4     11 25 02 5B |  if_ne	rdlong	local04, local03
2f2c8     0C 22 86 51 |  if_ne	sub	local03, #12
2f2cc     12 1F 02 51 |  if_ne	add	local01, local04
2f2d0                 | LR__4830
2f2d0     0F 15 02 F6 | 	mov	arg02, local01
2f2d4     11 13 02 F6 | 	mov	arg01, local03
2f2d8     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f2dc     FD 12 0A F6 | 	mov	arg01, result1 wz
2f2e0     08 00 90 AD |  if_e	jmp	#LR__4831
2f2e4                 | '         return _set_dos_error(result);
2f2e4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2e8     04 00 90 FD | 	jmp	#LR__4832
2f2ec                 | LR__4831
2f2ec                 | '     }
2f2ec                 | '     return offset;
2f2ec     0F FB 01 F6 | 	mov	result1, local01
2f2f0                 | LR__4832
2f2f0     A7 F0 03 F6 | 	mov	ptra, fp
2f2f4     B2 00 A0 FD | 	call	#popregs_
2f2f8                 | _fatfs_cc_v_lseek_ret
2f2f8     2D 00 64 FD | 	ret
2f2fc                 | 
2f2fc                 | _fatfs_cc_v_ioctl
2f2fc                 | ' {
2f2fc                 | '     return _seterror( 10 );
2f2fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f300     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f304     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f308     01 FA 65 F6 | 	neg	result1, #1
2f30c                 | _fatfs_cc_v_ioctl_ret
2f30c     2D 00 64 FD | 	ret
2f310                 | 
2f310                 | _fatfs_cc_v_mkdir
2f310     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f314     FD 12 02 F6 | 	mov	arg01, result1
2f318                 | ' 
2f318                 | '     r = f_mkdir(name);
2f318                 | '     return _set_dos_error(r);
2f318     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f31c                 | _fatfs_cc_v_mkdir_ret
2f31c     2D 00 64 FD | 	ret
2f320                 | 
2f320                 | _fatfs_cc_v_remove
2f320     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f324     FD 12 02 F6 | 	mov	arg01, result1
2f328                 | ' 
2f328                 | '     r = f_unlink(name);
2f328                 | '     return _set_dos_error(r);
2f328     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f32c                 | _fatfs_cc_v_remove_ret
2f32c     2D 00 64 FD | 	ret
2f330                 | 
2f330                 | _fatfs_cc_v_rmdir
2f330     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f334     FD 12 02 F6 | 	mov	arg01, result1
2f338                 | ' 
2f338                 | '     r = f_unlink(name);
2f338                 | '     return _set_dos_error(r);
2f338     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f33c                 | _fatfs_cc_v_rmdir_ret
2f33c     2D 00 64 FD | 	ret
2f340                 | 
2f340                 | _fatfs_cc_v_rename
2f340     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f344     FD 12 02 F6 | 	mov	arg01, result1
2f348                 | '     return _set_dos_error(r);
2f348     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f34c                 | _fatfs_cc_v_rename_ret
2f34c     2D 00 64 FD | 	ret
2f350                 | 
2f350                 | _fatfs_cc_v_open
2f350     07 4A 05 F6 | 	mov	COUNT_, #7
2f354     A8 00 A0 FD | 	call	#pushregs_
2f358     09 1F 02 F6 | 	mov	local01, arg01
2f35c     0A 21 02 F6 | 	mov	local02, arg02
2f360     0B 23 02 F6 | 	mov	local03, arg03
2f364     03 00 00 FF 
2f368     3C 12 06 F6 | 	mov	arg01, ##1596
2f36c                 | '     return _gc_alloc(size);
2f36c     10 14 06 F6 | 	mov	arg02, #16
2f370     9C 56 BF FD | 	call	#__system___gc_doalloc
2f374     FD 24 0A F6 | 	mov	local04, result1 wz
2f378                 | '       return _seterror( 7 );
2f378     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f37c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f380     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f384     01 FA 65 A6 |  if_e	neg	result1, #1
2f388     98 00 90 AD |  if_e	jmp	#LR__4846
2f38c     12 13 02 F6 | 	mov	arg01, local04
2f390     00 14 06 F6 | 	mov	arg02, #0
2f394     03 00 00 FF 
2f398     3C 16 06 F6 | 	mov	arg03, ##1596
2f39c     98 00 A0 FD | 	call	#\builtin_bytefill_
2f3a0                 | '   switch (flags & 3) {
2f3a0     11 27 02 F6 | 	mov	local05, local03
2f3a4     03 26 0E F5 | 	and	local05, #3 wz
2f3a8     0C 00 90 AD |  if_e	jmp	#LR__4840
2f3ac     01 26 0E F2 | 	cmp	local05, #1 wz
2f3b0     0C 00 90 AD |  if_e	jmp	#LR__4841
2f3b4     10 00 90 FD | 	jmp	#LR__4842
2f3b8                 | LR__4840
2f3b8     01 28 06 F6 | 	mov	local06, #1
2f3bc                 | '       fs_flags =  0x01 ;
2f3bc                 | '       break;
2f3bc     0C 00 90 FD | 	jmp	#LR__4843
2f3c0                 | LR__4841
2f3c0     02 28 06 F6 | 	mov	local06, #2
2f3c4                 | '       fs_flags =  0x02 ;
2f3c4                 | '       break;
2f3c4     04 00 90 FD | 	jmp	#LR__4843
2f3c8                 | LR__4842
2f3c8     03 28 06 F6 | 	mov	local06, #3
2f3cc                 | '       fs_flags =  0x01  |  0x02 ;
2f3cc                 | '       break;
2f3cc                 | LR__4843
2f3cc     08 22 CE F7 | 	test	local03, #8 wz
2f3d0     18 28 46 55 |  if_ne	or	local06, #24
2f3d4     08 00 90 5D |  if_ne	jmp	#LR__4844
2f3d8     20 22 CE F7 | 	test	local03, #32 wz
2f3dc     30 28 46 55 |  if_ne	or	local06, #48
2f3e0                 | LR__4844
2f3e0     02 00 00 FF 
2f3e4     14 24 06 F1 | 	add	local04, ##1044
2f3e8     12 13 02 F6 | 	mov	arg01, local04
2f3ec     02 00 00 FF 
2f3f0     14 24 86 F1 | 	sub	local04, ##1044
2f3f4     10 15 02 F6 | 	mov	arg02, local02
2f3f8     14 17 02 F6 | 	mov	arg03, local06
2f3fc     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f400     FD 2A 0A F6 | 	mov	local07, result1 wz
2f404     14 00 90 AD |  if_e	jmp	#LR__4845
2f408     12 13 02 F6 | 	mov	arg01, local04
2f40c                 | '     return _gc_free(ptr);
2f40c     0C 57 BF FD | 	call	#__system___gc_free
2f410                 | '     free(f);
2f410                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f410                 | '     return _set_dos_error(r);
2f410     15 13 02 F6 | 	mov	arg01, local07
2f414     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f418     08 00 90 FD | 	jmp	#LR__4846
2f41c                 | LR__4845
2f41c     0F 25 62 FC | 	wrlong	local04, local01
2f420                 | '   }
2f420                 | '   fil->vfsdata = f;
2f420                 | '   return 0;
2f420     00 FA 05 F6 | 	mov	result1, #0
2f424                 | LR__4846
2f424     A7 F0 03 F6 | 	mov	ptra, fp
2f428     B2 00 A0 FD | 	call	#popregs_
2f42c                 | _fatfs_cc_v_open_ret
2f42c     2D 00 64 FD | 	ret
2f430                 | 
2f430                 | _fatfs_cc_v_flush
2f430     09 13 02 FB | 	rdlong	arg01, arg01
2f434     02 00 00 FF 
2f438     14 12 0E F1 | 	add	arg01, ##1044 wz
2f43c                 | '         return _seterror( 5 );
2f43c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f440     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f444     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f448     01 FA 65 A6 |  if_e	neg	result1, #1
2f44c     0C 00 90 AD |  if_e	jmp	#LR__4850
2f450     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f454     FD 12 02 F6 | 	mov	arg01, result1
2f458                 | '     }
2f458                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f458                 | '     result = f_sync(f);
2f458                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f458                 | '     return _set_dos_error(result);
2f458     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f45c                 | LR__4850
2f45c                 | _fatfs_cc_v_flush_ret
2f45c     2D 00 64 FD | 	ret
2f460                 | 
2f460                 | _fatfs_cc_v_init
2f460                 | ' {
2f460                 | '     return 0;
2f460     00 FA 05 F6 | 	mov	result1, #0
2f464                 | _fatfs_cc_v_init_ret
2f464     2D 00 64 FD | 	ret
2f468                 | 
2f468                 | _fatfs_cc_v_deinit
2f468     81 01 00 FF 
2f46c     DC 15 06 F6 | 	mov	arg02, ##@LR__5046
2f470     00 12 06 F6 | 	mov	arg01, #0
2f474     00 16 06 F6 | 	mov	arg03, #0
2f478     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f47c     01 00 00 FF 
2f480     08 E4 05 F1 | 	add	objptr, ##520
2f484     F2 12 02 FB | 	rdlong	arg01, objptr
2f488     04 E4 05 F1 | 	add	objptr, #4
2f48c     F2 14 02 FB | 	rdlong	arg02, objptr
2f490     01 00 00 FF 
2f494     0C E4 85 F1 | 	sub	objptr, ##524
2f498     F0 3D BF FD | 	call	#__system___freepins
2f49c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f49c                 | '     _freepins(f_pinmask);
2f49c                 | '     return 0;
2f49c     00 FA 05 F6 | 	mov	result1, #0
2f4a0                 | _fatfs_cc_v_deinit_ret
2f4a0     2D 00 64 FD | 	ret
2f4a4                 | 
2f4a4                 | _fatfs_cc_get_vfs
2f4a4     01 4A 05 F6 | 	mov	COUNT_, #1
2f4a8     A8 00 A0 FD | 	call	#pushregs_
2f4ac     09 1F 02 F6 | 	mov	local01, arg01
2f4b0     50 12 06 F6 | 	mov	arg01, #80
2f4b4     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f4b8     FD 12 02 F6 | 	mov	arg01, result1
2f4bc     F2 FA 01 F6 | 	mov	result1, objptr
2f4c0     00 E8 04 FF 
2f4c4     00 FA 45 F5 | 	or	result1, ##164626432
2f4c8     09 FB 61 FC | 	wrlong	result1, arg01
2f4cc     F2 FA 01 F6 | 	mov	result1, objptr
2f4d0     00 F0 04 FF 
2f4d4     00 FA 45 F5 | 	or	result1, ##165675008
2f4d8     04 12 06 F1 | 	add	arg01, #4
2f4dc     09 FB 61 FC | 	wrlong	result1, arg01
2f4e0     F2 FA 01 F6 | 	mov	result1, objptr
2f4e4     00 F8 04 FF 
2f4e8     00 FA 45 F5 | 	or	result1, ##166723584
2f4ec     04 12 06 F1 | 	add	arg01, #4
2f4f0     09 FB 61 FC | 	wrlong	result1, arg01
2f4f4     F2 FA 01 F6 | 	mov	result1, objptr
2f4f8     00 00 05 FF 
2f4fc     00 FA 45 F5 | 	or	result1, ##167772160
2f500     04 12 06 F1 | 	add	arg01, #4
2f504     09 FB 61 FC | 	wrlong	result1, arg01
2f508     F2 FA 01 F6 | 	mov	result1, objptr
2f50c     00 08 05 FF 
2f510     00 FA 45 F5 | 	or	result1, ##168820736
2f514     04 12 06 F1 | 	add	arg01, #4
2f518     09 FB 61 FC | 	wrlong	result1, arg01
2f51c     04 12 06 F1 | 	add	arg01, #4
2f520     09 01 68 FC | 	wrlong	#0, arg01
2f524     04 12 06 F1 | 	add	arg01, #4
2f528     09 1F 62 FC | 	wrlong	local01, arg01
2f52c     04 12 06 F1 | 	add	arg01, #4
2f530     09 01 68 FC | 	wrlong	#0, arg01
2f534     F2 FA 01 F6 | 	mov	result1, objptr
2f538     00 10 05 FF 
2f53c     00 FA 45 F5 | 	or	result1, ##169869312
2f540     04 12 06 F1 | 	add	arg01, #4
2f544     09 FB 61 FC | 	wrlong	result1, arg01
2f548     F2 FA 01 F6 | 	mov	result1, objptr
2f54c     00 18 05 FF 
2f550     00 FA 45 F5 | 	or	result1, ##170917888
2f554     04 12 06 F1 | 	add	arg01, #4
2f558     09 FB 61 FC | 	wrlong	result1, arg01
2f55c     F2 FA 01 F6 | 	mov	result1, objptr
2f560     00 20 05 FF 
2f564     00 FA 45 F5 | 	or	result1, ##171966464
2f568     04 12 06 F1 | 	add	arg01, #4
2f56c     09 FB 61 FC | 	wrlong	result1, arg01
2f570     F2 FA 01 F6 | 	mov	result1, objptr
2f574     00 28 05 FF 
2f578     00 FA 45 F5 | 	or	result1, ##173015040
2f57c     04 12 06 F1 | 	add	arg01, #4
2f580     09 FB 61 FC | 	wrlong	result1, arg01
2f584     F2 FA 01 F6 | 	mov	result1, objptr
2f588     00 30 05 FF 
2f58c     00 FA 45 F5 | 	or	result1, ##174063616
2f590     04 12 06 F1 | 	add	arg01, #4
2f594     09 FB 61 FC | 	wrlong	result1, arg01
2f598     F2 FA 01 F6 | 	mov	result1, objptr
2f59c     00 38 05 FF 
2f5a0     00 FA 45 F5 | 	or	result1, ##175112192
2f5a4     04 12 06 F1 | 	add	arg01, #4
2f5a8     09 FB 61 FC | 	wrlong	result1, arg01
2f5ac     F2 FA 01 F6 | 	mov	result1, objptr
2f5b0     00 40 05 FF 
2f5b4     00 FA 45 F5 | 	or	result1, ##176160768
2f5b8     04 12 06 F1 | 	add	arg01, #4
2f5bc     09 FB 61 FC | 	wrlong	result1, arg01
2f5c0     F2 FA 01 F6 | 	mov	result1, objptr
2f5c4     00 48 05 FF 
2f5c8     00 FA 45 F5 | 	or	result1, ##177209344
2f5cc     04 12 06 F1 | 	add	arg01, #4
2f5d0     09 FB 61 FC | 	wrlong	result1, arg01
2f5d4     F2 FA 01 F6 | 	mov	result1, objptr
2f5d8     00 50 05 FF 
2f5dc     00 FA 45 F5 | 	or	result1, ##178257920
2f5e0     04 12 06 F1 | 	add	arg01, #4
2f5e4     09 FB 61 FC | 	wrlong	result1, arg01
2f5e8     F2 FA 01 F6 | 	mov	result1, objptr
2f5ec     00 58 05 FF 
2f5f0     00 FA 45 F5 | 	or	result1, ##179306496
2f5f4     04 12 06 F1 | 	add	arg01, #4
2f5f8     09 FB 61 FC | 	wrlong	result1, arg01
2f5fc     F2 FA 01 F6 | 	mov	result1, objptr
2f600     00 60 05 FF 
2f604     00 FA 45 F5 | 	or	result1, ##180355072
2f608     04 12 06 F1 | 	add	arg01, #4
2f60c     09 FB 61 FC | 	wrlong	result1, arg01
2f610     F2 FA 01 F6 | 	mov	result1, objptr
2f614     00 68 05 FF 
2f618     00 FA 45 F5 | 	or	result1, ##181403648
2f61c     04 12 06 F1 | 	add	arg01, #4
2f620     09 FB 61 FC | 	wrlong	result1, arg01
2f624     4C 12 86 F1 | 	sub	arg01, #76
2f628                 | ' 
2f628                 | '     v->close = &v_close;
2f628                 | '     v->read = &v_read;
2f628                 | '     v->write = &v_write;
2f628                 | '     v->lseek = &v_lseek;
2f628                 | '     v->ioctl = &v_ioctl;
2f628                 | '     v->flush = 0;
2f628                 | '     v->vfs_data = ptr;
2f628                 | '     v->reserved = 0;
2f628                 | ' 
2f628                 | '     v->open = &v_open;
2f628                 | '     v->creat = &v_creat;
2f628                 | '     v->opendir = &v_opendir;
2f628                 | '     v->closedir = &v_closedir;
2f628                 | '     v->readdir = &v_readdir;
2f628                 | '     v->stat = &v_stat;
2f628                 | ' 
2f628                 | '     v->mkdir = &v_mkdir;
2f628                 | '     v->rmdir = &v_rmdir;
2f628                 | ' 
2f628                 | '     v->remove = &v_remove;
2f628                 | '     v->rename = &v_rename;
2f628                 | ' 
2f628                 | '     v->init = &v_init;
2f628                 | '     v->deinit = &v_deinit;
2f628                 | ' 
2f628                 | '     return v;
2f628     09 FB 01 F6 | 	mov	result1, arg01
2f62c     A7 F0 03 F6 | 	mov	ptra, fp
2f630     B2 00 A0 FD | 	call	#popregs_
2f634                 | _fatfs_cc_get_vfs_ret
2f634     2D 00 64 FD | 	ret
2f638                 | 
2f638                 | _fatfs_cc_xmit_mmc_1109
2f638     01 00 00 FF 
2f63c     10 E4 05 F1 | 	add	objptr, ##528
2f640     F2 00 02 FB | 	rdlong	_var01, objptr
2f644     08 E4 05 F1 | 	add	objptr, #8
2f648     F2 02 02 FB | 	rdlong	_var02, objptr
2f64c     01 00 00 FF 
2f650     18 E4 85 F1 | 	sub	objptr, ##536
2f654     40 02 62 FD | 	dirl	_var02
2f658     28 02 64 FD | 	setq	#1
2f65c     09 05 02 FB | 	rdlong	_var03, arg01
2f660     69 04 62 FD | 	rev	_var03
2f664     1B 04 FE F9 | 	movbyts	_var03, #27
2f668     01 05 22 FC | 	wypin	_var03, _var02
2f66c     0A 05 02 F6 | 	mov	_var03, arg02
2f670     02 14 4E F0 | 	shr	arg02, #2 wz
2f674     03 04 66 F0 | 	shl	_var03, #3
2f678     00 05 22 FC | 	wypin	_var03, _var01
2f67c     41 02 62 FD | 	dirh	_var02
2f680     08 12 06 F1 | 	add	arg01, #8
2f684     69 06 62 FD | 	rev	_var04
2f688     1B 06 FE F9 | 	movbyts	_var04, #27
2f68c                 | LR__4860
2f68c     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f690     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f694     04 12 06 51 |  if_ne	add	arg01, #4
2f698     69 06 62 5D |  if_ne	rev	_var04
2f69c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f6a0                 | LR__4861
2f6a0     40 02 72 5D |  if_ne	testp	_var02 wc
2f6a4     F8 FF 9F 1D |  if_a	jmp	#LR__4861
2f6a8     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4860
2f6ac                 | LR__4862
2f6ac     40 00 72 FD | 	testp	_var01 wc
2f6b0     F8 FF 9F 3D |  if_ae	jmp	#LR__4862
2f6b4     40 02 62 FD | 	dirl	_var02
2f6b8     FF FF FF FF 
2f6bc     01 FF 2B FC | 	wypin	##-1, _var02
2f6c0     41 02 62 FD | 	dirh	_var02
2f6c4                 | _fatfs_cc_xmit_mmc_1109_ret
2f6c4     2D 00 64 FD | 	ret
2f6c8                 | 
2f6c8                 | _fatfs_cc_rcvr_mmc_1116
2f6c8     01 00 00 FF 
2f6cc     10 E4 05 F1 | 	add	objptr, ##528
2f6d0     F2 00 02 FB | 	rdlong	_var01, objptr
2f6d4     0C E4 05 F1 | 	add	objptr, #12
2f6d8     F2 02 02 FB | 	rdlong	_var02, objptr
2f6dc     01 00 00 FF 
2f6e0     1C E4 85 F1 | 	sub	objptr, ##540
2f6e4     01 03 08 FC | 	akpin	_var02
2f6e8     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f6ec     02 04 4E F0 | 	shr	_var03, #2 wz
2f6f0     30 00 90 AD |  if_e	jmp	#LR__4872
2f6f4     02 07 02 F6 | 	mov	_var04, _var03
2f6f8     05 06 66 F0 | 	shl	_var04, #5
2f6fc     00 07 22 FC | 	wypin	_var04, _var01
2f700     01 7F 18 FC | 	wxpin	#63, _var02
2f704                 | LR__4870
2f704                 | LR__4871
2f704     40 02 72 FD | 	testp	_var02 wc
2f708     F8 FF 9F 3D |  if_ae	jmp	#LR__4871
2f70c     01 07 8A FA | 	rdpin	_var04, _var02
2f710     69 06 62 FD | 	rev	_var04
2f714     1B 06 FE F9 | 	movbyts	_var04, #27
2f718     09 07 62 FC | 	wrlong	_var04, arg01
2f71c     04 12 06 F1 | 	add	arg01, #4
2f720     F8 05 6E FB | 	djnz	_var03, #LR__4870
2f724                 | LR__4872
2f724     03 14 0E F5 | 	and	arg02, #3 wz
2f728     24 00 90 AD |  if_e	jmp	#LR__4875
2f72c     01 4F 18 FC | 	wxpin	#39, _var02
2f730                 | LR__4873
2f730     00 11 28 FC | 	wypin	#8, _var01
2f734                 | LR__4874
2f734     40 02 72 FD | 	testp	_var02 wc
2f738     F8 FF 9F 3D |  if_ae	jmp	#LR__4874
2f73c     01 07 8A FA | 	rdpin	_var04, _var02
2f740     69 06 62 FD | 	rev	_var04
2f744     09 07 42 FC | 	wrbyte	_var04, arg01
2f748     01 12 06 F1 | 	add	arg01, #1
2f74c     F8 15 6E FB | 	djnz	arg02, #LR__4873
2f750                 | LR__4875
2f750                 | _fatfs_cc_rcvr_mmc_1116_ret
2f750     2D 00 64 FD | 	ret
2f754                 | 
2f754                 | _fatfs_cc_wait_ready_1120
2f754     01 4A 05 F6 | 	mov	COUNT_, #1
2f758     A8 00 A0 FD | 	call	#pushregs_
2f75c     10 F0 07 F1 | 	add	ptra, #16
2f760     1A FA 61 FD | 	getct	result1
2f764     08 4E 05 F1 | 	add	fp, #8
2f768     A7 FA 61 FC | 	wrlong	result1, fp
2f76c     14 1E 06 FB | 	rdlong	local01, #20
2f770     01 1E 46 F0 | 	shr	local01, #1
2f774     04 4E 05 F1 | 	add	fp, #4
2f778     A7 1E 62 FC | 	wrlong	local01, fp
2f77c     0C 4E 85 F1 | 	sub	fp, #12
2f780                 | ' {
2f780                 | ' 	BYTE d;
2f780                 | ' 	UINT tmr, tmout;
2f780                 | ' 
2f780                 | ' 	tmr = _cnt();
2f780                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f780                 | ' 	for(;;) {
2f780                 | LR__4880
2f780     04 4E 05 F1 | 	add	fp, #4
2f784     A7 12 02 F6 | 	mov	arg01, fp
2f788     04 4E 85 F1 | 	sub	fp, #4
2f78c     01 14 06 F6 | 	mov	arg02, #1
2f790     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f794     04 4E 05 F1 | 	add	fp, #4
2f798     A7 1E C2 FA | 	rdbyte	local01, fp
2f79c     04 4E 85 F1 | 	sub	fp, #4
2f7a0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f7a4     01 FA 05 A6 |  if_e	mov	result1, #1
2f7a8     28 00 90 AD |  if_e	jmp	#LR__4881
2f7ac     1A FA 61 FD | 	getct	result1
2f7b0     08 4E 05 F1 | 	add	fp, #8
2f7b4     A7 1E 02 FB | 	rdlong	local01, fp
2f7b8     0F FB 81 F1 | 	sub	result1, local01
2f7bc     04 4E 05 F1 | 	add	fp, #4
2f7c0     A7 1E 02 FB | 	rdlong	local01, fp
2f7c4     0C 4E 85 F1 | 	sub	fp, #12
2f7c8     0F FB 11 F2 | 	cmp	result1, local01 wc
2f7cc     00 FA 05 36 |  if_ae	mov	result1, #0
2f7d0     AC FF 9F CD |  if_b	jmp	#LR__4880
2f7d4                 | LR__4881
2f7d4     A7 F0 03 F6 | 	mov	ptra, fp
2f7d8     B2 00 A0 FD | 	call	#popregs_
2f7dc                 | _fatfs_cc_wait_ready_1120_ret
2f7dc     2D 00 64 FD | 	ret
2f7e0                 | 
2f7e0                 | _fatfs_cc_deselect_1126
2f7e0     00 4A 05 F6 | 	mov	COUNT_, #0
2f7e4     A8 00 A0 FD | 	call	#pushregs_
2f7e8     14 F0 07 F1 | 	add	ptra, #20
2f7ec     01 00 00 FF 
2f7f0     14 E4 05 F1 | 	add	objptr, ##532
2f7f4     F2 14 02 FB | 	rdlong	arg02, objptr
2f7f8     04 4E 05 F1 | 	add	fp, #4
2f7fc     A7 14 62 FC | 	wrlong	arg02, fp
2f800     04 E4 85 F1 | 	sub	objptr, #4
2f804     F2 14 02 FB | 	rdlong	arg02, objptr
2f808     04 4E 05 F1 | 	add	fp, #4
2f80c     A7 14 62 FC | 	wrlong	arg02, fp
2f810     08 E4 05 F1 | 	add	objptr, #8
2f814     F2 14 02 FB | 	rdlong	arg02, objptr
2f818     04 4E 05 F1 | 	add	fp, #4
2f81c     A7 14 62 FC | 	wrlong	arg02, fp
2f820     04 E4 05 F1 | 	add	objptr, #4
2f824     F2 14 02 FB | 	rdlong	arg02, objptr
2f828     01 00 00 FF 
2f82c     1C E4 85 F1 | 	sub	objptr, ##540
2f830     04 4E 05 F1 | 	add	fp, #4
2f834     A7 14 62 FC | 	wrlong	arg02, fp
2f838     0C 4E 85 F1 | 	sub	fp, #12
2f83c     A7 12 02 FB | 	rdlong	arg01, fp
2f840     04 4E 85 F1 | 	sub	fp, #4
2f844     59 12 62 FD | 	drvh	arg01
2f848     1F 20 64 FD | 	waitx	#16
2f84c     A7 12 02 F6 | 	mov	arg01, fp
2f850     01 14 06 F6 | 	mov	arg02, #1
2f854     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f858     A7 F0 03 F6 | 	mov	ptra, fp
2f85c     B2 00 A0 FD | 	call	#popregs_
2f860                 | _fatfs_cc_deselect_1126_ret
2f860     2D 00 64 FD | 	ret
2f864                 | 
2f864                 | _fatfs_cc_select_1130
2f864     00 4A 05 F6 | 	mov	COUNT_, #0
2f868     A8 00 A0 FD | 	call	#pushregs_
2f86c     10 F0 07 F1 | 	add	ptra, #16
2f870     01 00 00 FF 
2f874     14 E4 05 F1 | 	add	objptr, ##532
2f878     F2 14 02 FB | 	rdlong	arg02, objptr
2f87c     08 4E 05 F1 | 	add	fp, #8
2f880     A7 14 62 FC | 	wrlong	arg02, fp
2f884     08 E4 05 F1 | 	add	objptr, #8
2f888     F2 12 02 FB | 	rdlong	arg01, objptr
2f88c     01 00 00 FF 
2f890     1C E4 85 F1 | 	sub	objptr, ##540
2f894     04 4E 05 F1 | 	add	fp, #4
2f898     A7 12 62 FC | 	wrlong	arg01, fp
2f89c     50 12 62 FD | 	fltl	arg01
2f8a0     04 4E 85 F1 | 	sub	fp, #4
2f8a4     A7 12 02 FB | 	rdlong	arg01, fp
2f8a8     58 12 62 FD | 	drvl	arg01
2f8ac     1F 20 64 FD | 	waitx	#16
2f8b0     04 4E 05 F1 | 	add	fp, #4
2f8b4     A7 12 02 FB | 	rdlong	arg01, fp
2f8b8     41 12 62 FD | 	dirh	arg01
2f8bc     08 4E 85 F1 | 	sub	fp, #8
2f8c0     A7 12 02 F6 | 	mov	arg01, fp
2f8c4     04 4E 85 F1 | 	sub	fp, #4
2f8c8     01 14 06 F6 | 	mov	arg02, #1
2f8cc     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f8d0     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f8d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f8d8     01 FA 05 56 |  if_ne	mov	result1, #1
2f8dc     08 00 90 5D |  if_ne	jmp	#LR__4890
2f8e0     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f8e4                 | ' 
2f8e4                 | ' 	deselect();
2f8e4                 | ' 	return 0;
2f8e4     00 FA 05 F6 | 	mov	result1, #0
2f8e8                 | LR__4890
2f8e8     A7 F0 03 F6 | 	mov	ptra, fp
2f8ec     B2 00 A0 FD | 	call	#popregs_
2f8f0                 | _fatfs_cc_select_1130_ret
2f8f0     2D 00 64 FD | 	ret
2f8f4                 | 
2f8f4                 | _fatfs_cc_rcvr_datablock_1134
2f8f4     01 4A 05 F6 | 	mov	COUNT_, #1
2f8f8     A8 00 A0 FD | 	call	#pushregs_
2f8fc     18 F0 07 F1 | 	add	ptra, #24
2f900     04 4E 05 F1 | 	add	fp, #4
2f904     A7 12 62 FC | 	wrlong	arg01, fp
2f908     04 4E 05 F1 | 	add	fp, #4
2f90c     A7 14 62 FC | 	wrlong	arg02, fp
2f910     1A FA 61 FD | 	getct	result1
2f914     08 4E 05 F1 | 	add	fp, #8
2f918     A7 FA 61 FC | 	wrlong	result1, fp
2f91c     14 1E 06 FB | 	rdlong	local01, #20
2f920     03 1E 46 F0 | 	shr	local01, #3
2f924     04 4E 05 F1 | 	add	fp, #4
2f928     A7 1E 62 FC | 	wrlong	local01, fp
2f92c     14 4E 85 F1 | 	sub	fp, #20
2f930                 | ' 	BYTE *buff,
2f930                 | ' 	UINT btr
2f930                 | ' )
2f930                 | ' {
2f930                 | ' 	BYTE d[2];
2f930                 | ' 	UINT tmr, tmout;
2f930                 | ' 
2f930                 | ' 	tmr = _cnt();
2f930                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f930                 | ' 	for(;;) {
2f930                 | LR__4900
2f930     0C 4E 05 F1 | 	add	fp, #12
2f934     A7 12 02 F6 | 	mov	arg01, fp
2f938     0C 4E 85 F1 | 	sub	fp, #12
2f93c     01 14 06 F6 | 	mov	arg02, #1
2f940     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f944     0C 4E 05 F1 | 	add	fp, #12
2f948     A7 1E C2 FA | 	rdbyte	local01, fp
2f94c     0C 4E 85 F1 | 	sub	fp, #12
2f950     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f954     28 00 90 5D |  if_ne	jmp	#LR__4901
2f958     1A FA 61 FD | 	getct	result1
2f95c     FD 1E 02 F6 | 	mov	local01, result1
2f960     10 4E 05 F1 | 	add	fp, #16
2f964     A7 14 02 FB | 	rdlong	arg02, fp
2f968     0A 1F 82 F1 | 	sub	local01, arg02
2f96c     04 4E 05 F1 | 	add	fp, #4
2f970     A7 14 02 FB | 	rdlong	arg02, fp
2f974     14 4E 85 F1 | 	sub	fp, #20
2f978     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f97c     B0 FF 9F CD |  if_b	jmp	#LR__4900
2f980                 | LR__4901
2f980     0C 4E 05 F1 | 	add	fp, #12
2f984     A7 1E C2 FA | 	rdbyte	local01, fp
2f988     0C 4E 85 F1 | 	sub	fp, #12
2f98c     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f990     00 FA 05 56 |  if_ne	mov	result1, #0
2f994     30 00 90 5D |  if_ne	jmp	#LR__4902
2f998     04 4E 05 F1 | 	add	fp, #4
2f99c     A7 12 02 FB | 	rdlong	arg01, fp
2f9a0     04 4E 05 F1 | 	add	fp, #4
2f9a4     A7 14 02 FB | 	rdlong	arg02, fp
2f9a8     08 4E 85 F1 | 	sub	fp, #8
2f9ac     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f9b0     0C 4E 05 F1 | 	add	fp, #12
2f9b4     A7 12 02 F6 | 	mov	arg01, fp
2f9b8     0C 4E 85 F1 | 	sub	fp, #12
2f9bc     02 14 06 F6 | 	mov	arg02, #2
2f9c0     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f9c4                 | ' 
2f9c4                 | ' 	rcvr_mmc(buff, btr);
2f9c4                 | ' 	rcvr_mmc(d, 2);
2f9c4                 | ' 
2f9c4                 | ' 	return 1;
2f9c4     01 FA 05 F6 | 	mov	result1, #1
2f9c8                 | LR__4902
2f9c8     A7 F0 03 F6 | 	mov	ptra, fp
2f9cc     B2 00 A0 FD | 	call	#popregs_
2f9d0                 | _fatfs_cc_rcvr_datablock_1134_ret
2f9d0     2D 00 64 FD | 	ret
2f9d4                 | 
2f9d4                 | _fatfs_cc_xmit_datablock_1136
2f9d4     00 4A 05 F6 | 	mov	COUNT_, #0
2f9d8     A8 00 A0 FD | 	call	#pushregs_
2f9dc     10 F0 07 F1 | 	add	ptra, #16
2f9e0     04 4E 05 F1 | 	add	fp, #4
2f9e4     A7 12 62 FC | 	wrlong	arg01, fp
2f9e8     04 4E 05 F1 | 	add	fp, #4
2f9ec     A7 14 42 FC | 	wrbyte	arg02, fp
2f9f0     08 4E 85 F1 | 	sub	fp, #8
2f9f4     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f9f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9fc     00 FA 05 A6 |  if_e	mov	result1, #0
2fa00     90 00 90 AD |  if_e	jmp	#LR__4911
2fa04     08 4E 05 F1 | 	add	fp, #8
2fa08     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa0c     04 4E 05 F1 | 	add	fp, #4
2fa10     A7 14 42 FC | 	wrbyte	arg02, fp
2fa14     A7 12 02 F6 | 	mov	arg01, fp
2fa18     0C 4E 85 F1 | 	sub	fp, #12
2fa1c     01 14 06 F6 | 	mov	arg02, #1
2fa20     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fa24     08 4E 05 F1 | 	add	fp, #8
2fa28     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa2c     08 4E 85 F1 | 	sub	fp, #8
2fa30     FD 14 0E F2 | 	cmp	arg02, #253 wz
2fa34     58 00 90 AD |  if_e	jmp	#LR__4910
2fa38     04 4E 05 F1 | 	add	fp, #4
2fa3c     A7 12 02 FB | 	rdlong	arg01, fp
2fa40     04 4E 85 F1 | 	sub	fp, #4
2fa44     09 14 C6 F9 | 	decod	arg02, #9
2fa48     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fa4c     0C 4E 05 F1 | 	add	fp, #12
2fa50     A7 12 02 F6 | 	mov	arg01, fp
2fa54     0C 4E 85 F1 | 	sub	fp, #12
2fa58     02 14 06 F6 | 	mov	arg02, #2
2fa5c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fa60     0C 4E 05 F1 | 	add	fp, #12
2fa64     A7 12 02 F6 | 	mov	arg01, fp
2fa68     0C 4E 85 F1 | 	sub	fp, #12
2fa6c     01 14 06 F6 | 	mov	arg02, #1
2fa70     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fa74     0C 4E 05 F1 | 	add	fp, #12
2fa78     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa7c     0C 4E 85 F1 | 	sub	fp, #12
2fa80     1F 14 06 F5 | 	and	arg02, #31
2fa84     05 14 0E F2 | 	cmp	arg02, #5 wz
2fa88                 | ' 			return 0;
2fa88     00 FA 05 56 |  if_ne	mov	result1, #0
2fa8c     04 00 90 5D |  if_ne	jmp	#LR__4911
2fa90                 | LR__4910
2fa90                 | ' 	}
2fa90                 | ' 
2fa90                 | ' 	return 1;
2fa90     01 FA 05 F6 | 	mov	result1, #1
2fa94                 | LR__4911
2fa94     A7 F0 03 F6 | 	mov	ptra, fp
2fa98     B2 00 A0 FD | 	call	#popregs_
2fa9c                 | _fatfs_cc_xmit_datablock_1136_ret
2fa9c     2D 00 64 FD | 	ret
2faa0                 | 
2faa0                 | _fatfs_cc_send_cmd_1140
2faa0     01 4A 05 F6 | 	mov	COUNT_, #1
2faa4     A8 00 A0 FD | 	call	#pushregs_
2faa8     1C F0 07 F1 | 	add	ptra, #28
2faac                 | _fatfs_cc_send_cmd_1140_enter
2faac     04 4E 05 F1 | 	add	fp, #4
2fab0     A7 12 42 FC | 	wrbyte	arg01, fp
2fab4     04 4E 05 F1 | 	add	fp, #4
2fab8     A7 14 62 FC | 	wrlong	arg02, fp
2fabc     04 4E 85 F1 | 	sub	fp, #4
2fac0     A7 FA C1 FA | 	rdbyte	result1, fp
2fac4     04 4E 85 F1 | 	sub	fp, #4
2fac8     80 FA CD F7 | 	test	result1, #128 wz
2facc     44 00 90 AD |  if_e	jmp	#LR__4920
2fad0     04 4E 05 F1 | 	add	fp, #4
2fad4     A7 14 C2 FA | 	rdbyte	arg02, fp
2fad8     7F 14 06 F5 | 	and	arg02, #127
2fadc     A7 14 42 FC | 	wrbyte	arg02, fp
2fae0     04 4E 85 F1 | 	sub	fp, #4
2fae4     37 12 06 F6 | 	mov	arg01, #55
2fae8     00 14 06 F6 | 	mov	arg02, #0
2faec     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2faf0     0C 4E 05 F1 | 	add	fp, #12
2faf4     A7 FA 41 FC | 	wrbyte	result1, fp
2faf8     A7 14 C2 FA | 	rdbyte	arg02, fp
2fafc     0C 4E 85 F1 | 	sub	fp, #12
2fb00     02 14 16 F2 | 	cmp	arg02, #2 wc
2fb04     0C 4E 05 31 |  if_ae	add	fp, #12
2fb08     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2fb0c     0C 4E 85 31 |  if_ae	sub	fp, #12
2fb10     6C 01 90 3D |  if_ae	jmp	#LR__4924
2fb14                 | LR__4920
2fb14     04 4E 05 F1 | 	add	fp, #4
2fb18     A7 14 C2 FA | 	rdbyte	arg02, fp
2fb1c     04 4E 85 F1 | 	sub	fp, #4
2fb20     0C 14 0E F2 | 	cmp	arg02, #12 wz
2fb24     14 00 90 AD |  if_e	jmp	#LR__4921
2fb28     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2fb2c     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2fb30     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb34     FF FA 05 A6 |  if_e	mov	result1, #255
2fb38     44 01 90 AD |  if_e	jmp	#LR__4924
2fb3c                 | LR__4921
2fb3c     04 4E 05 F1 | 	add	fp, #4
2fb40     A7 14 C2 FA | 	rdbyte	arg02, fp
2fb44     40 FA 05 F6 | 	mov	result1, #64
2fb48     0A FB 41 F5 | 	or	result1, arg02
2fb4c     10 4E 05 F1 | 	add	fp, #16
2fb50     A7 FA 41 FC | 	wrbyte	result1, fp
2fb54     0C 4E 85 F1 | 	sub	fp, #12
2fb58     A7 FA 01 FB | 	rdlong	result1, fp
2fb5c     18 FA 45 F0 | 	shr	result1, #24
2fb60     0D 4E 05 F1 | 	add	fp, #13
2fb64     A7 FA 41 FC | 	wrbyte	result1, fp
2fb68     0D 4E 85 F1 | 	sub	fp, #13
2fb6c     A7 FA 01 FB | 	rdlong	result1, fp
2fb70     10 FA 45 F0 | 	shr	result1, #16
2fb74     0E 4E 05 F1 | 	add	fp, #14
2fb78     A7 FA 41 FC | 	wrbyte	result1, fp
2fb7c     0E 4E 85 F1 | 	sub	fp, #14
2fb80     A7 FA 01 FB | 	rdlong	result1, fp
2fb84     08 FA 45 F0 | 	shr	result1, #8
2fb88     0F 4E 05 F1 | 	add	fp, #15
2fb8c     A7 FA 41 FC | 	wrbyte	result1, fp
2fb90     0F 4E 85 F1 | 	sub	fp, #15
2fb94     A7 FA 01 FB | 	rdlong	result1, fp
2fb98     10 4E 05 F1 | 	add	fp, #16
2fb9c     A7 FA 41 FC | 	wrbyte	result1, fp
2fba0     0C 4E 85 F1 | 	sub	fp, #12
2fba4     A7 02 48 FC | 	wrbyte	#1, fp
2fba8     08 4E 85 F1 | 	sub	fp, #8
2fbac     A7 FA C9 FA | 	rdbyte	result1, fp wz
2fbb0     04 4E 85 F1 | 	sub	fp, #4
2fbb4     0C 4E 05 A1 |  if_e	add	fp, #12
2fbb8     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2fbbc     0C 4E 85 A1 |  if_e	sub	fp, #12
2fbc0     04 4E 05 F1 | 	add	fp, #4
2fbc4     A7 FA C1 FA | 	rdbyte	result1, fp
2fbc8     04 4E 85 F1 | 	sub	fp, #4
2fbcc     08 FA 0D F2 | 	cmp	result1, #8 wz
2fbd0     0C 4E 05 A1 |  if_e	add	fp, #12
2fbd4     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2fbd8     0C 4E 85 A1 |  if_e	sub	fp, #12
2fbdc     0C 4E 05 F1 | 	add	fp, #12
2fbe0     A7 14 C2 FA | 	rdbyte	arg02, fp
2fbe4     0D 4E 05 F1 | 	add	fp, #13
2fbe8     A7 14 42 FC | 	wrbyte	arg02, fp
2fbec     05 4E 85 F1 | 	sub	fp, #5
2fbf0     A7 12 02 F6 | 	mov	arg01, fp
2fbf4     14 4E 85 F1 | 	sub	fp, #20
2fbf8     06 14 06 F6 | 	mov	arg02, #6
2fbfc     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fc00     04 4E 05 F1 | 	add	fp, #4
2fc04     A7 1E C2 FA | 	rdbyte	local01, fp
2fc08     04 4E 85 F1 | 	sub	fp, #4
2fc0c     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fc10     10 4E 05 A1 |  if_e	add	fp, #16
2fc14     A7 12 02 A6 |  if_e	mov	arg01, fp
2fc18     10 4E 85 A1 |  if_e	sub	fp, #16
2fc1c     01 14 06 A6 |  if_e	mov	arg02, #1
2fc20     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fc24     0C 4E 05 F1 | 	add	fp, #12
2fc28     A7 14 48 FC | 	wrbyte	#10, fp
2fc2c     0C 4E 85 F1 | 	sub	fp, #12
2fc30                 | ' 	n = 10;
2fc30                 | ' 	do
2fc30                 | LR__4922
2fc30     10 4E 05 F1 | 	add	fp, #16
2fc34     A7 12 02 F6 | 	mov	arg01, fp
2fc38     10 4E 85 F1 | 	sub	fp, #16
2fc3c     01 14 06 F6 | 	mov	arg02, #1
2fc40     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fc44     10 4E 05 F1 | 	add	fp, #16
2fc48     A7 1E C2 FA | 	rdbyte	local01, fp
2fc4c     10 4E 85 F1 | 	sub	fp, #16
2fc50     80 1E CE F7 | 	test	local01, #128 wz
2fc54     1C 00 90 AD |  if_e	jmp	#LR__4923
2fc58     0C 4E 05 F1 | 	add	fp, #12
2fc5c     A7 1E C2 FA | 	rdbyte	local01, fp
2fc60     01 1E 86 F1 | 	sub	local01, #1
2fc64     A7 1E 42 FC | 	wrbyte	local01, fp
2fc68     A7 1E CA FA | 	rdbyte	local01, fp wz
2fc6c     0C 4E 85 F1 | 	sub	fp, #12
2fc70     BC FF 9F 5D |  if_ne	jmp	#LR__4922
2fc74                 | LR__4923
2fc74                 | ' 
2fc74                 | ' 	return d;
2fc74     10 4E 05 F1 | 	add	fp, #16
2fc78     A7 FA C1 FA | 	rdbyte	result1, fp
2fc7c     10 4E 85 F1 | 	sub	fp, #16
2fc80                 | LR__4924
2fc80     A7 F0 03 F6 | 	mov	ptra, fp
2fc84     B2 00 A0 FD | 	call	#popregs_
2fc88                 | _fatfs_cc_send_cmd_1140_ret
2fc88     2D 00 64 FD | 	ret
2fc8c                 | 
2fc8c                 | _fatfs_cc_disk_deinitialize
2fc8c     03 4A 05 F6 | 	mov	COUNT_, #3
2fc90     A8 00 A0 FD | 	call	#pushregs_
2fc94     00 12 4E F2 | 	cmps	arg01, #0 wz
2fc98     01 00 00 FF 
2fc9c     14 E4 05 F1 | 	add	objptr, ##532
2fca0     F2 12 02 FB | 	rdlong	arg01, objptr
2fca4     04 E4 85 F1 | 	sub	objptr, #4
2fca8     F2 1E 02 FB | 	rdlong	local01, objptr
2fcac     08 E4 05 F1 | 	add	objptr, #8
2fcb0     F2 20 02 FB | 	rdlong	local02, objptr
2fcb4     04 E4 05 F1 | 	add	objptr, #4
2fcb8     F2 22 02 FB | 	rdlong	local03, objptr
2fcbc     01 00 00 FF 
2fcc0     1C E4 85 F1 | 	sub	objptr, ##540
2fcc4                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fcc4                 | '         return RES_NOTRDY;
2fcc4     03 FA 05 56 |  if_ne	mov	result1, #3
2fcc8     2C 00 90 5D |  if_ne	jmp	#LR__4930
2fccc     50 12 62 FD | 	fltl	arg01
2fcd0     09 01 08 FC | 	wrpin	#0, arg01
2fcd4     50 1E 62 FD | 	fltl	local01
2fcd8     0F 01 08 FC | 	wrpin	#0, local01
2fcdc     50 20 62 FD | 	fltl	local02
2fce0     10 01 08 FC | 	wrpin	#0, local02
2fce4     50 22 62 FD | 	fltl	local03
2fce8     11 01 08 FC | 	wrpin	#0, local03
2fcec     0A 12 06 F6 | 	mov	arg01, #10
2fcf0     04 11 BF FD | 	call	#__system___waitms
2fcf4                 | '     }
2fcf4                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fcf4                 | '     _pinclear(PIN_SS);
2fcf4                 | '     _pinclear(PIN_CLK);
2fcf4                 | '     _pinclear(PIN_DI);
2fcf4                 | '     _pinclear(PIN_DO);
2fcf4                 | ' 
2fcf4                 | '     _waitms(10);
2fcf4                 | ' 
2fcf4                 | '     return 0;
2fcf4     00 FA 05 F6 | 	mov	result1, #0
2fcf8                 | LR__4930
2fcf8     A7 F0 03 F6 | 	mov	ptra, fp
2fcfc     B2 00 A0 FD | 	call	#popregs_
2fd00                 | _fatfs_cc_disk_deinitialize_ret
2fd00     2D 00 64 FD | 	ret
2fd04                 | 
2fd04                 | _fatfs_cc_gettimeofday
2fd04     04 4A 05 F6 | 	mov	COUNT_, #4
2fd08     A8 00 A0 FD | 	call	#pushregs_
2fd0c     09 1F 02 F6 | 	mov	local01, arg01
2fd10     C0 0C BF FD | 	call	#__system___getus
2fd14     FD 12 02 F6 | 	mov	arg01, result1
2fd18     02 00 00 FF 
2fd1c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fd20     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fd24     09 FB 01 F6 | 	mov	result1, arg01
2fd28     10 FB 81 F1 | 	sub	result1, local02
2fd2c     A1 07 00 FF 
2fd30     40 FA 15 FD | 	qdiv	result1, ##1000000
2fd34     02 00 00 FF 
2fd38     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fd3c     18 20 62 FD | 	getqx	local02
2fd40     A1 07 00 FF 
2fd44     40 FA 15 FD | 	qdiv	result1, ##1000000
2fd48     00 20 0E F2 | 	cmp	local02, #0 wz
2fd4c     19 22 62 FD | 	getqy	local03
2fd50     28 00 90 AD |  if_e	jmp	#LR__4940
2fd54     02 00 00 FF 
2fd58     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fd5c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fd60     10 25 02 F1 | 	add	local04, local02
2fd64     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fd68     11 13 82 F1 | 	sub	arg01, local03
2fd6c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fd70     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fd74     02 00 00 FF 
2fd78     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fd7c                 | LR__4940
2fd7c     02 00 00 FF 
2fd80     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fd84     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fd88     02 00 00 FF 
2fd8c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fd90     0F 25 62 FC | 	wrlong	local04, local01
2fd94     04 1E 06 F1 | 	add	local01, #4
2fd98     0F 23 62 FC | 	wrlong	local03, local01
2fd9c                 | '         lastsec += secs;
2fd9c                 | '         lastus = now - leftover;
2fd9c                 | '     }
2fd9c                 | '     tv->tv_sec = lastsec;
2fd9c                 | '     tv->tv_usec = leftover;
2fd9c                 | '     return 0;
2fd9c     00 FA 05 F6 | 	mov	result1, #0
2fda0     A7 F0 03 F6 | 	mov	ptra, fp
2fda4     B2 00 A0 FD | 	call	#popregs_
2fda8                 | _fatfs_cc_gettimeofday_ret
2fda8     2D 00 64 FD | 	ret
2fdac                 | 
2fdac                 | _fatfs_cc__is_leap_year
2fdac     09 FB 51 F6 | 	abs	result1, arg01 wc
2fdb0     03 FA 05 F5 | 	and	result1, #3
2fdb4     FD FA 89 F6 | 	negc	result1, result1 wz
2fdb8     38 00 90 5D |  if_ne	jmp	#LR__4951
2fdbc     09 FB 51 F6 | 	abs	result1, arg01 wc
2fdc0     64 FA 15 FD | 	qdiv	result1, #100
2fdc4     19 FA 61 FD | 	getqy	result1
2fdc8     FD FA 89 F6 | 	negc	result1, result1 wz
2fdcc     1C 00 90 5D |  if_ne	jmp	#LR__4950
2fdd0     09 FB 51 F6 | 	abs	result1, arg01 wc
2fdd4     90 FB 15 FD | 	qdiv	result1, #400
2fdd8                 | '       return (0 == y % 400);
2fdd8     00 FA 05 F6 | 	mov	result1, #0
2fddc     19 00 62 FD | 	getqy	_var01
2fde0     00 01 8A F6 | 	negc	_var01, _var01 wz
2fde4     01 FA 05 A6 |  if_e	mov	result1, #1
2fde8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fdec                 | LR__4950
2fdec                 | '     return 1;
2fdec     01 FA 05 F6 | 	mov	result1, #1
2fdf0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fdf4                 | LR__4951
2fdf4                 | '   }
2fdf4                 | '   return 0;
2fdf4     00 FA 05 F6 | 	mov	result1, #0
2fdf8                 | _fatfs_cc__is_leap_year_ret
2fdf8     2D 00 64 FD | 	ret
2fdfc                 | 
2fdfc                 | _fatfs_cc___tzoffset
2fdfc     09 01 0A F6 | 	mov	_var01, arg01 wz
2fe00     FF FF FF FF 
2fe04     0A FF 6B FC | 	wrlong	##-1, arg02
2fe08     01 02 06 F6 | 	mov	_var02, #1
2fe0c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fe10                 | '                 return 0;
2fe10     00 FA 05 A6 |  if_e	mov	result1, #0
2fe14     94 02 90 AD |  if_e	jmp	#LR__4977
2fe18     0A 01 68 FC | 	wrlong	#0, arg02
2fe1c     02 00 00 FF 
2fe20     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe24     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fe28                 | ' 
2fe28                 | '        *hasdst = 0;
2fe28                 | ' 
2fe28                 | ' 	n = stdname;
2fe28                 | '         while (*s && isalpha(*s)) {
2fe28     02 00 00 FF 
2fe2c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fe30     97 28 48 FB | 	callpa	#(@LR__4961-@LR__4960)>>2,fcache_load_ptr_
2fe34                 | LR__4960
2fe34     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fe38     48 00 90 AD |  if_e	jmp	#LR__4962
2fe3c     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe40                 | ' {
2fe40                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fe40     80 12 36 F3 | 	fle	arg01, #128 wc
2fe44                 | '     return __ctype[c];
2fe44     02 00 00 FF 
2fe48     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fe4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe50     09 FB C1 FA | 	rdbyte	result1, arg01
2fe54     02 00 00 FF 
2fe58     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe5c     0C FA CD F7 | 	test	result1, #12 wz
2fe60     20 00 90 AD |  if_e	jmp	#LR__4962
2fe64     00 09 02 F6 | 	mov	_var05, _var01
2fe68     00 0B 02 F6 | 	mov	_var06, _var01
2fe6c     01 0A 06 F1 | 	add	_var06, #1
2fe70     04 0D C2 FA | 	rdbyte	_var07, _var05
2fe74     05 01 02 F6 | 	mov	_var01, _var06
2fe78     03 0D 42 FC | 	wrbyte	_var07, _var04
2fe7c     01 06 06 F1 | 	add	_var04, #1
2fe80     B0 FF 9F FD | 	jmp	#LR__4960
2fe84                 | LR__4961
2fe84                 | LR__4962
2fe84     03 01 48 FC | 	wrbyte	#0, _var04
2fe88     00 0E 06 F6 | 	mov	_var08, #0
2fe8c     00 05 C2 FA | 	rdbyte	_var03, _var01
2fe90     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fe94     01 02 66 A6 |  if_e	neg	_var02, #1
2fe98     01 00 06 A1 |  if_e	add	_var01, #1
2fe9c     97 28 48 FB | 	callpa	#(@LR__4964-@LR__4963)>>2,fcache_load_ptr_
2fea0                 | '                 sgn = -1;
2fea0                 | '                 s++;
2fea0                 | '         }
2fea0                 | '         while (isdigit(*s)) {
2fea0                 | LR__4963
2fea0     00 13 C2 FA | 	rdbyte	arg01, _var01
2fea4                 | ' {
2fea4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fea4     80 12 36 F3 | 	fle	arg01, #128 wc
2fea8                 | '     return __ctype[c];
2fea8     02 00 00 FF 
2feac     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2feb0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2feb4     09 FB C1 FA | 	rdbyte	result1, arg01
2feb8     02 00 00 FF 
2febc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fec0     02 FA CD F7 | 	test	result1, #2 wz
2fec4     28 00 90 AD |  if_e	jmp	#LR__4965
2fec8     07 05 02 F6 | 	mov	_var03, _var08
2fecc     02 04 66 F0 | 	shl	_var03, #2
2fed0     07 05 02 F1 | 	add	_var03, _var08
2fed4     01 04 66 F0 | 	shl	_var03, #1
2fed8     00 09 C2 FA | 	rdbyte	_var05, _var01
2fedc     30 08 86 F1 | 	sub	_var05, #48
2fee0     04 05 02 F1 | 	add	_var03, _var05
2fee4     02 0F 02 F6 | 	mov	_var08, _var03
2fee8     01 00 06 F1 | 	add	_var01, #1
2feec     B0 FF 9F FD | 	jmp	#LR__4963
2fef0                 | LR__4964
2fef0                 | LR__4965
2fef0     07 00 00 FF 
2fef4     10 0E 06 FD | 	qmul	_var08, ##3600
2fef8     00 05 C2 FA | 	rdbyte	_var03, _var01
2fefc     3A 04 0E F2 | 	cmp	_var03, #58 wz
2ff00     18 10 62 FD | 	getqx	_var09
2ff04     70 00 90 5D |  if_ne	jmp	#LR__4969
2ff08     00 0E 06 F6 | 	mov	_var08, #0
2ff0c     01 00 06 F1 | 	add	_var01, #1
2ff10     97 28 48 FB | 	callpa	#(@LR__4967-@LR__4966)>>2,fcache_load_ptr_
2ff14                 | '                 x = 0;
2ff14                 | '                 s++;
2ff14                 | '                 while (isdigit(*s)) {
2ff14                 | LR__4966
2ff14     00 13 C2 FA | 	rdbyte	arg01, _var01
2ff18                 | ' {
2ff18                 | '   return  (__ctype_get(c) & 0x02 ) ;
2ff18     80 12 36 F3 | 	fle	arg01, #128 wc
2ff1c                 | '     return __ctype[c];
2ff1c     02 00 00 FF 
2ff20     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2ff24     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ff28     09 FB C1 FA | 	rdbyte	result1, arg01
2ff2c     02 00 00 FF 
2ff30     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ff34     02 FA CD F7 | 	test	result1, #2 wz
2ff38     28 00 90 AD |  if_e	jmp	#LR__4968
2ff3c     07 05 02 F6 | 	mov	_var03, _var08
2ff40     02 04 66 F0 | 	shl	_var03, #2
2ff44     07 05 02 F1 | 	add	_var03, _var08
2ff48     01 04 66 F0 | 	shl	_var03, #1
2ff4c     00 09 C2 FA | 	rdbyte	_var05, _var01
2ff50     30 08 86 F1 | 	sub	_var05, #48
2ff54     04 05 02 F1 | 	add	_var03, _var05
2ff58     02 0F 02 F6 | 	mov	_var08, _var03
2ff5c     01 00 06 F1 | 	add	_var01, #1
2ff60     B0 FF 9F FD | 	jmp	#LR__4966
2ff64                 | LR__4967
2ff64                 | LR__4968
2ff64     07 0D 02 F6 | 	mov	_var07, _var08
2ff68     04 0C 66 F0 | 	shl	_var07, #4
2ff6c     07 0D 82 F1 | 	sub	_var07, _var08
2ff70     02 0C 66 F0 | 	shl	_var07, #2
2ff74     06 11 02 F1 | 	add	_var09, _var07
2ff78                 | LR__4969
2ff78     02 00 00 FF 
2ff7c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ff80     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2ff84     00 13 C2 FA | 	rdbyte	arg01, _var01
2ff88                 | ' {
2ff88                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2ff88     80 12 36 F3 | 	fle	arg01, #128 wc
2ff8c                 | '     return __ctype[c];
2ff8c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2ff90     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ff94     09 FB C1 FA | 	rdbyte	result1, arg01
2ff98     02 00 00 FF 
2ff9c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ffa0     0C FA CD F7 | 	test	result1, #12 wz
2ffa4     50 00 90 AD |  if_e	jmp	#LR__4972
2ffa8     0A 03 68 FC | 	wrlong	#1, arg02
2ffac                 | '                 *hasdst = 1;
2ffac                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2ffac                 | LR__4970
2ffac     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2ffb0     44 00 90 AD |  if_e	jmp	#LR__4971
2ffb4     00 13 C2 FA | 	rdbyte	arg01, _var01
2ffb8                 | ' {
2ffb8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2ffb8     80 12 36 F3 | 	fle	arg01, #128 wc
2ffbc                 | '     return __ctype[c];
2ffbc     02 00 00 FF 
2ffc0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2ffc4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ffc8     09 FB C1 FA | 	rdbyte	result1, arg01
2ffcc     02 00 00 FF 
2ffd0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ffd4     0C FA CD F7 | 	test	result1, #12 wz
2ffd8     1C 00 90 AD |  if_e	jmp	#LR__4971
2ffdc     00 0B 02 F6 | 	mov	_var06, _var01
2ffe0     01 0A 06 F1 | 	add	_var06, #1
2ffe4     00 0D C2 FA | 	rdbyte	_var07, _var01
2ffe8     05 01 02 F6 | 	mov	_var01, _var06
2ffec     03 0D 42 FC | 	wrbyte	_var07, _var04
2fff0     01 06 06 F1 | 	add	_var04, #1
2fff4     B4 FF 9F FD | 	jmp	#LR__4970
2fff8                 | LR__4971
2fff8                 | LR__4972
2fff8     03 01 48 FC | 	wrbyte	#0, _var04
2fffc     02 00 00 FF 
30000     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30004     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30008     02 00 00 FF 
3000c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30010     20 00 90 AD |  if_e	jmp	#LR__4973
30014     02 00 00 FF 
30018     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3001c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30020     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
30024     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30028     02 00 00 FF 
3002c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30030     1C 00 90 FD | 	jmp	#LR__4974
30034                 | LR__4973
30034     02 00 00 FF 
30038     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
3003c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30040     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
30044     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30048     02 00 00 FF 
3004c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30050                 | LR__4974
30050     02 00 00 FF 
30054     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30058     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
3005c     02 00 00 FF 
30060     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
30064     20 00 90 AD |  if_e	jmp	#LR__4975
30068     02 00 00 FF 
3006c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30070     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30074     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
30078     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3007c     02 00 00 FF 
30080     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30084     1C 00 90 FD | 	jmp	#LR__4976
30088                 | LR__4975
30088     02 00 00 FF 
3008c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30090     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30094     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
30098     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3009c     02 00 00 FF 
300a0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
300a4                 | LR__4976
300a4     08 03 02 FD | 	qmul	_var02, _var09
300a8                 | ' 		_tzname[1] = stdname;
300a8                 | ' 
300a8                 | '         return sgn * off;
300a8     18 FA 61 FD | 	getqx	result1
300ac                 | LR__4977
300ac                 | _fatfs_cc___tzoffset_ret
300ac     2D 00 64 FD | 	ret
300b0                 | 
300b0                 | _fatfs_cc___indst
300b0     10 12 06 F1 | 	add	arg01, #16
300b4     09 01 02 FB | 	rdlong	_var01, arg01
300b8     10 12 86 F1 | 	sub	arg01, #16
300bc     02 00 0E F2 | 	cmp	_var01, #2 wz
300c0     30 00 90 5D |  if_ne	jmp	#LR__4980
300c4     07 00 06 F6 | 	mov	_var01, #7
300c8     18 12 06 F1 | 	add	arg01, #24
300cc     09 03 02 FB | 	rdlong	_var02, arg01
300d0     01 01 02 F1 | 	add	_var01, _var02
300d4     0C 12 86 F1 | 	sub	arg01, #12
300d8     09 05 02 FB | 	rdlong	_var03, arg01
300dc     02 01 82 F1 | 	sub	_var01, _var03
300e0     00 00 56 F2 | 	cmps	_var01, #0 wc
300e4                 | '                         return 1;
300e4     01 FA 05 C6 |  if_b	mov	result1, #1
300e8     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
300ec                 | '                 return 0;
300ec     00 FA 05 F6 | 	mov	result1, #0
300f0     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
300f4                 | LR__4980
300f4     10 12 06 F1 | 	add	arg01, #16
300f8     09 01 02 FB | 	rdlong	_var01, arg01
300fc     10 12 86 F1 | 	sub	arg01, #16
30100     0A 00 0E F2 | 	cmp	_var01, #10 wz
30104     28 00 90 5D |  if_ne	jmp	#LR__4981
30108     18 12 06 F1 | 	add	arg01, #24
3010c     09 01 02 FB | 	rdlong	_var01, arg01
30110     0C 12 86 F1 | 	sub	arg01, #12
30114     09 07 02 FB | 	rdlong	_var04, arg01
30118     03 01 82 F1 | 	sub	_var01, _var04
3011c     00 00 56 F2 | 	cmps	_var01, #0 wc
30120                 | '                         return 0;
30120     00 FA 05 C6 |  if_b	mov	result1, #0
30124     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30128                 | '                 return 1;
30128     01 FA 05 F6 | 	mov	result1, #1
3012c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30130                 | LR__4981
30130                 | '         }
30130                 | ' 
30130                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
30130     00 00 06 F6 | 	mov	_var01, #0
30134     10 12 06 F1 | 	add	arg01, #16
30138     09 03 02 FB | 	rdlong	_var02, arg01
3013c     10 12 86 F1 | 	sub	arg01, #16
30140     03 02 56 F2 | 	cmps	_var02, #3 wc
30144     10 00 90 CD |  if_b	jmp	#LR__4982
30148     10 12 06 F1 | 	add	arg01, #16
3014c     09 05 02 FB | 	rdlong	_var03, arg01
30150     0A 04 56 F2 | 	cmps	_var03, #10 wc
30154     01 00 06 C6 |  if_b	mov	_var01, #1
30158                 | LR__4982
30158     00 FB 01 F6 | 	mov	result1, _var01
3015c                 | _fatfs_cc___indst_ret
3015c     2D 00 64 FD | 	ret
30160                 | 
30160                 | ' 	
30160                 | ' 	FUNCTION pfunc(c as integer) as integer
30160                 | ___strs_cl_pfunc
30160                 | ' 		if (i < 16) then
30160     04 E4 05 F1 | 	add	objptr, #4
30164     F2 FA 01 FB | 	rdlong	result1, objptr
30168     04 E4 85 F1 | 	sub	objptr, #4
3016c     10 FA 55 F2 | 	cmps	result1, #16 wc
30170     2C 00 90 3D |  if_ae	jmp	#LR__4990
30174     F2 FA 01 FB | 	rdlong	result1, objptr
30178     04 E4 05 F1 | 	add	objptr, #4
3017c     F2 00 02 FB | 	rdlong	_var01, objptr
30180     FD 00 02 F1 | 	add	_var01, result1
30184     00 13 42 FC | 	wrbyte	arg01, _var01
30188     F2 FA 01 FB | 	rdlong	result1, objptr
3018c     01 FA 05 F1 | 	add	result1, #1
30190     F2 FA 61 FC | 	wrlong	result1, objptr
30194     04 E4 85 F1 | 	sub	objptr, #4
30198                 | ' 			p(i) = c
30198                 | ' 			i = i+1
30198                 | ' 			return 1
30198     01 FA 05 F6 | 	mov	result1, #1
3019c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
301a0                 | LR__4990
301a0                 | ' 			return -1
301a0     01 FA 65 F6 | 	neg	result1, #1
301a4                 | ___strs_cl_pfunc_ret
301a4     2D 00 64 FD | 	ret
301a8                 | 
301a8                 | __struct__s_vfs_file_t_putchar
301a8     04 4A 05 F6 | 	mov	COUNT_, #4
301ac     A8 00 A0 FD | 	call	#pushregs_
301b0     1C E4 05 F1 | 	add	objptr, #28
301b4     F2 1E 0A FB | 	rdlong	local01, objptr wz
301b8     1C E4 85 F1 | 	sub	objptr, #28
301bc     00 FA 05 A6 |  if_e	mov	result1, #0
301c0     48 00 90 AD |  if_e	jmp	#LR__5000
301c4     1C E4 05 F1 | 	add	objptr, #28
301c8     F2 20 02 FB | 	rdlong	local02, objptr
301cc     10 23 02 F6 | 	mov	local03, local02
301d0     1C E4 85 F1 | 	sub	objptr, #28
301d4     13 22 46 F7 | 	zerox	local03, #19
301d8     14 20 46 F0 | 	shr	local02, #20
301dc     02 20 66 F0 | 	shl	local02, #2
301e0     ED 20 02 F1 | 	add	local02, __methods__
301e4     10 21 02 FB | 	rdlong	local02, local02
301e8     F2 14 02 F6 | 	mov	arg02, objptr
301ec     F2 24 02 F6 | 	mov	local04, objptr
301f0     11 E5 01 F6 | 	mov	objptr, local03
301f4     2D 20 62 FD | 	call	local02
301f8     12 E5 01 F6 | 	mov	objptr, local04
301fc                 | '     return (i < 0) ? 0 : 1;
301fc     00 FA 55 F2 | 	cmps	result1, #0 wc
30200     00 1E 06 C6 |  if_b	mov	local01, #0
30204     01 1E 06 36 |  if_ae	mov	local01, #1
30208     0F FB 01 F6 | 	mov	result1, local01
3020c                 | LR__5000
3020c     A7 F0 03 F6 | 	mov	ptra, fp
30210     B2 00 A0 FD | 	call	#popregs_
30214                 | __struct__s_vfs_file_t_putchar_ret
30214     2D 00 64 FD | 	ret
30218                 | 
30218                 | __struct__s_vfs_file_t_getchar
30218     03 4A 05 F6 | 	mov	COUNT_, #3
3021c     A8 00 A0 FD | 	call	#pushregs_
30220     20 E4 05 F1 | 	add	objptr, #32
30224     F2 12 0A FB | 	rdlong	arg01, objptr wz
30228     20 E4 85 F1 | 	sub	objptr, #32
3022c     01 FA 65 A6 |  if_e	neg	result1, #1
30230     38 00 90 AD |  if_e	jmp	#LR__5010
30234                 | '     return getcf(__this);
30234     20 E4 05 F1 | 	add	objptr, #32
30238     F2 1E 02 FB | 	rdlong	local01, objptr
3023c     0F 21 02 F6 | 	mov	local02, local01
30240     20 E4 85 F1 | 	sub	objptr, #32
30244     13 20 46 F7 | 	zerox	local02, #19
30248     14 1E 46 F0 | 	shr	local01, #20
3024c     02 1E 66 F0 | 	shl	local01, #2
30250     ED 1E 02 F1 | 	add	local01, __methods__
30254     0F 1F 02 FB | 	rdlong	local01, local01
30258     F2 12 02 F6 | 	mov	arg01, objptr
3025c     F2 22 02 F6 | 	mov	local03, objptr
30260     10 E5 01 F6 | 	mov	objptr, local02
30264     2D 1E 62 FD | 	call	local01
30268     11 E5 01 F6 | 	mov	objptr, local03
3026c                 | LR__5010
3026c     A7 F0 03 F6 | 	mov	ptra, fp
30270     B2 00 A0 FD | 	call	#popregs_
30274                 | __struct__s_vfs_file_t_getchar_ret
30274     2D 00 64 FD | 	ret
30278                 | 
30278                 | __struct___bas_wrap_sender_tx
30278     03 4A 05 F6 | 	mov	COUNT_, #3
3027c     A8 00 A0 FD | 	call	#pushregs_
30280     F2 1E 02 FB | 	rdlong	local01, objptr
30284     0F 21 02 F6 | 	mov	local02, local01
30288     13 1E 46 F7 | 	zerox	local01, #19
3028c     14 20 46 F0 | 	shr	local02, #20
30290     02 20 66 F0 | 	shl	local02, #2
30294     ED 20 02 F1 | 	add	local02, __methods__
30298     10 21 02 FB | 	rdlong	local02, local02
3029c     F2 22 02 F6 | 	mov	local03, objptr
302a0     0F E5 01 F6 | 	mov	objptr, local01
302a4     2D 20 62 FD | 	call	local02
302a8     11 E5 01 F6 | 	mov	objptr, local03
302ac     01 FA 05 F6 | 	mov	result1, #1
302b0     A7 F0 03 F6 | 	mov	ptra, fp
302b4     B2 00 A0 FD | 	call	#popregs_
302b8                 | __struct___bas_wrap_sender_tx_ret
302b8     2D 00 64 FD | 	ret
302bc                 | 
302bc                 | __struct___bas_wrap_sender_rx
302bc     03 4A 05 F6 | 	mov	COUNT_, #3
302c0     A8 00 A0 FD | 	call	#pushregs_
302c4     04 E4 05 F1 | 	add	objptr, #4
302c8     F2 1E 02 FB | 	rdlong	local01, objptr
302cc     0F 21 02 F6 | 	mov	local02, local01
302d0     04 E4 85 F1 | 	sub	objptr, #4
302d4     13 20 46 F7 | 	zerox	local02, #19
302d8     14 1E 46 F0 | 	shr	local01, #20
302dc     02 1E 66 F0 | 	shl	local01, #2
302e0     ED 1E 02 F1 | 	add	local01, __methods__
302e4     0F 1F 02 FB | 	rdlong	local01, local01
302e8     F2 22 02 F6 | 	mov	local03, objptr
302ec     10 E5 01 F6 | 	mov	objptr, local02
302f0     2D 1E 62 FD | 	call	local01
302f4     11 E5 01 F6 | 	mov	objptr, local03
302f8     A7 F0 03 F6 | 	mov	ptra, fp
302fc     B2 00 A0 FD | 	call	#popregs_
30300                 | __struct___bas_wrap_sender_rx_ret
30300     2D 00 64 FD | 	ret
30304                 | 
30304                 | __struct___bas_wrap_sender_close
30304     03 4A 05 F6 | 	mov	COUNT_, #3
30308     A8 00 A0 FD | 	call	#pushregs_
3030c     08 E4 05 F1 | 	add	objptr, #8
30310     F2 1E 02 FB | 	rdlong	local01, objptr
30314     0F 21 02 F6 | 	mov	local02, local01
30318     08 E4 85 F1 | 	sub	objptr, #8
3031c     13 20 46 F7 | 	zerox	local02, #19
30320     14 1E 46 F0 | 	shr	local01, #20
30324     02 1E 66 F0 | 	shl	local01, #2
30328     ED 1E 02 F1 | 	add	local01, __methods__
3032c     0F 1F 02 FB | 	rdlong	local01, local01
30330     F2 22 02 F6 | 	mov	local03, objptr
30334     10 E5 01 F6 | 	mov	objptr, local02
30338     2D 1E 62 FD | 	call	local01
3033c     11 E5 01 F6 | 	mov	objptr, local03
30340     A7 F0 03 F6 | 	mov	ptra, fp
30344     B2 00 A0 FD | 	call	#popregs_
30348                 | __struct___bas_wrap_sender_close_ret
30348     2D 00 64 FD | 	ret
3034c                 | 
3034c                 | LR__5020
3034c     2F          | 	byte	"/"
3034d     00          | 	byte	0
3034e                 | LR__5021
3034e     69 6E 66    | 	byte	"inf"
30351     00          | 	byte	0
30352                 | LR__5022
30352     6E 61 6E    | 	byte	"nan"
30355     00          | 	byte	0
30356                 | LR__5023
30356                 | 	byte	
30356     00          | 	byte	0
30357                 | LR__5024
30357                 | 	byte	
30357     00          | 	byte	0
30358                 | LR__5025
30358                 | 	byte	
30358     00          | 	byte	0
30359                 | LR__5026
30359                 | 	byte	
30359     00          | 	byte	0
3035a                 | LR__5027
3035a                 | 	byte	
3035a     00          | 	byte	0
3035b                 | LR__5028
3035b                 | 	byte	
3035b     00          | 	byte	0
3035c                 | LR__5029
3035c                 | 	byte	
3035c     00          | 	byte	0
3035d                 | LR__5030
3035d                 | 	byte	
3035d     00          | 	byte	0
3035e                 | LR__5031
3035e     00          | 	byte	0
3035f     00          | 	byte	0
30360                 | LR__5032
30360     00          | 	byte	0
30361     00          | 	byte	0
30362                 | LR__5033
30362     00          | 	byte	0
30363     00          | 	byte	0
30364                 | LR__5034
30364     20 21 21 21 
30368     20 63 6F 72 
3036c     72 75 70 74 
30370     65 64 20 68 
30374     65 61 70 3F 
30378     3F 3F 20 21 
3037c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3037f     00          | 	byte	0
30380                 | LR__5035
30380     20 21 21 21 
30384     20 6F 75 74 
30388     20 6F 66 20 
3038c     68 65 61 70 
30390     20 6D 65 6D 
30394     6F 72 79 20 
30398     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
3039c     00          | 	byte	0
3039d                 | LR__5036
3039d     20 21 21 21 
303a1     20 63 6F 72 
303a5     72 75 70 74 
303a9     65 64 20 68 
303ad     65 61 70 20 
303b1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
303b5     00          | 	byte	0
303b6                 | LR__5037
303b6     00          | 	byte	0
303b7     00          | 	byte	0
303b8                 | LR__5038
303b8     2E          | 	byte	"."
303b9     00          | 	byte	0
303ba                 | LR__5039
303ba     00          | 	byte	0
303bb     00          | 	byte	0
303bc                 | LR__5040
303bc     00          | 	byte	0
303bd     00          | 	byte	0
303be                 | LR__5041
303be     00          | 	byte	0
303bf     00          | 	byte	0
303c0                 | LR__5042
303c0     2A 3A 3C 3E 
303c4     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
303c8     00          | 	byte	0
303c9                 | LR__5043
303c9     2B 2C 3B 3D 
303cd     5B 5D       | 	byte	"+,;=[]"
303cf     00          | 	byte	0
303d0                 | LR__5044
303d0     46 41 54 33 
303d4     32 20 20 20 | 	byte	"FAT32   "
303d8     00          | 	byte	0
303d9                 | LR__5045
303d9     54 5A       | 	byte	"TZ"
303db     00          | 	byte	0
303dc                 | LR__5046
303dc     00          | 	byte	0
303dd     00          | 	byte	0
303de                 | LR__5047
303de                 | 	byte	
303de     00          | 	byte	0
303df                 | LR__5048
303df                 | 	byte	
303df     00          | 	byte	0
303e0                 | LR__5049
303e0                 | 	byte	
303e0     00          | 	byte	0
303e1                 | LR__5050
303e1                 | 	byte	
303e1     00          | 	byte	0
303e2                 | LR__5051
303e2     22          | 	byte	34
303e3     00          | 	byte	0
303e4                 | LR__5052
303e4     22          | 	byte	34
303e5     00          | 	byte	0
303e6                 | LR__5053
303e6     3A          | 	byte	":"
303e7     00          | 	byte	0
303e8                 | LR__5054
303e8                 | 	byte	
303e8     00          | 	byte	0
303e9                 | LR__5055
303e9                 | 	byte	
303e9     00          | 	byte	0
303ea                 | LR__5056
303ea                 | 	byte	
303ea     00          | 	byte	0
303eb                 | LR__5057
303eb                 | 	byte	
303eb     00          | 	byte	0
303ec                 | LR__5058
303ec                 | 	byte	
303ec     00          | 	byte	0
303ed                 | LR__5059
303ed                 | 	byte	
303ed     00          | 	byte	0
303ee                 | LR__5060
303ee                 | 	byte	
303ee     00          | 	byte	0
303ef                 | LR__5061
303ef     30          | 	byte	"0"
303f0     00          | 	byte	0
303f1                 | LR__5062
303f1     22          | 	byte	34
303f2     00          | 	byte	0
303f3                 | LR__5063
303f3     22          | 	byte	34
303f4     00          | 	byte	0
303f5                 | LR__5064
303f5     22          | 	byte	34
303f6     00          | 	byte	0
303f7                 | LR__5065
303f7     22          | 	byte	34
303f8     00          | 	byte	0
303f9                 | LR__5066
303f9     22          | 	byte	34
303fa     00          | 	byte	0
303fb                 | LR__5067
303fb     3E          | 	byte	">"
303fc     00          | 	byte	0
303fd                 | LR__5068
303fd     3C          | 	byte	"<"
303fe     00          | 	byte	0
303ff                 | LR__5069
303ff     2B          | 	byte	"+"
30400     00          | 	byte	0
30401                 | LR__5070
30401     2D          | 	byte	"-"
30402     00          | 	byte	0
30403                 | LR__5071
30403     2A          | 	byte	"*"
30404     00          | 	byte	0
30405                 | LR__5072
30405     2F          | 	byte	"/"
30406     00          | 	byte	0
30407                 | LR__5073
30407     5E          | 	byte	"^"
30408     00          | 	byte	0
30409                 | LR__5074
30409     3D          | 	byte	"="
3040a     00          | 	byte	0
3040b                 | LR__5075
3040b     2B          | 	byte	"+"
3040c     00          | 	byte	0
3040d                 | LR__5076
3040d     2B          | 	byte	"+"
3040e     00          | 	byte	0
3040f                 | LR__5077
3040f     2D          | 	byte	"-"
30410     00          | 	byte	0
30411                 | LR__5078
30411     2D          | 	byte	"-"
30412     00          | 	byte	0
30413                 | LR__5079
30413     3C          | 	byte	"<"
30414     00          | 	byte	0
30415                 | LR__5080
30415     3E          | 	byte	">"
30416     00          | 	byte	0
30417                 | LR__5081
30417     22          | 	byte	34
30418     00          | 	byte	0
30419                 | LR__5082
30419     22          | 	byte	34
3041a     00          | 	byte	0
3041b                 | LR__5083
3041b     65 6C 73 65 | 	byte	"else"
3041f     00          | 	byte	0
30420                 | LR__5084
30420     74 68 65 6E | 	byte	"then"
30424     00          | 	byte	0
30425                 | LR__5085
30425     2E          | 	byte	"."
30426     00          | 	byte	0
30427                 | LR__5086
30427     3F          | 	byte	"?"
30428     00          | 	byte	0
30429                 | LR__5087
30429     3F          | 	byte	"?"
3042a     00          | 	byte	0
3042b                 | LR__5088
3042b     6D 6F 75 73 
3042f     65          | 	byte	"mouse"
30430     00          | 	byte	0
30431                 | LR__5089
30431     63 75 72 73 
30435     6F 72       | 	byte	"cursor"
30437     00          | 	byte	0
30438                 | LR__5090
30438     63 6C 69 63 
3043c     6B          | 	byte	"click"
3043d     00          | 	byte	0
3043e                 | LR__5091
3043e     6F 6E       | 	byte	"on"
30440     00          | 	byte	0
30441                 | LR__5092
30441     31          | 	byte	"1"
30442     00          | 	byte	0
30443                 | LR__5093
30443     6F 66 66    | 	byte	"off"
30446     00          | 	byte	0
30447                 | LR__5094
30447     30          | 	byte	"0"
30448     00          | 	byte	0
30449                 | LR__5095
30449     6D 6F 64 65 | 	byte	"mode"
3044d     00          | 	byte	0
3044e                 | LR__5096
3044e     6D 2E       | 	byte	"m."
30450     00          | 	byte	0
30451                 | LR__5097
30451     61 74 61 72 
30455     69          | 	byte	"atari"
30456     00          | 	byte	0
30457                 | LR__5098
30457     30          | 	byte	"0"
30458     00          | 	byte	0
30459                 | LR__5099
30459     70 63 5F 61 
3045d     6D 62 65 72 | 	byte	"pc_amber"
30461     00          | 	byte	0
30462                 | LR__5100
30462     31          | 	byte	"1"
30463     00          | 	byte	0
30464                 | LR__5101
30464     70 63 5F 67 
30468     72 65 65 6E | 	byte	"pc_green"
3046c     00          | 	byte	0
3046d                 | LR__5102
3046d     32          | 	byte	"2"
3046e     00          | 	byte	0
3046f                 | LR__5103
3046f     70 63 5F 77 
30473     68 69 74 65 | 	byte	"pc_white"
30477     00          | 	byte	0
30478                 | LR__5104
30478     33          | 	byte	"3"
30479     00          | 	byte	0
3047a                 | LR__5105
3047a     73 74       | 	byte	"st"
3047c     00          | 	byte	0
3047d                 | LR__5106
3047d     34          | 	byte	"4"
3047e     00          | 	byte	0
3047f                 | LR__5107
3047f                 | 	byte	
3047f     00          | 	byte	0
30480                 | LR__5108
30480     6C 6F 61 64 | 	byte	"load"
30484     00          | 	byte	0
30485                 | LR__5109
30485     73 61 76 65 | 	byte	"save"
30489     00          | 	byte	0
3048a                 | LR__5110
3048a     62 72 75 6E | 	byte	"brun"
3048e     00          | 	byte	0
3048f                 | LR__5111
3048f     72 75 6E    | 	byte	"run"
30492     00          | 	byte	0
30493                 | LR__5112
30493     6C 6F 2E    | 	byte	"lo."
30496     00          | 	byte	0
30497                 | LR__5113
30497     73 2E       | 	byte	"s."
30499     00          | 	byte	0
3049a                 | LR__5114
3049a     62 72 2E    | 	byte	"br."
3049d     00          | 	byte	0
3049e                 | LR__5115
3049e     65 6E 74 65 
304a2     72          | 	byte	"enter"
304a3     00          | 	byte	0
304a4                 | LR__5116
304a4     65 2E       | 	byte	"e."
304a6     00          | 	byte	0
304a7                 | LR__5117
304a7                 | 	byte	
304a7     00          | 	byte	0
304a8                 | LR__5118
304a8                 | 	byte	
304a8     00          | 	byte	0
304a9                 | LR__5119
304a9                 | 	byte	
304a9     00          | 	byte	0
304aa                 | LR__5120
304aa                 | 	byte	
304aa     00          | 	byte	0
304ab                 | LR__5121
304ab                 | 	byte	
304ab     00          | 	byte	0
304ac                 | LR__5122
304ac     52 65 61 64 
304b0     79          | 	byte	"Ready"
304b1     00          | 	byte	0
304b2                 | LR__5123
304b2     2B          | 	byte	"+"
304b3     00          | 	byte	0
304b4                 | LR__5124
304b4     2D          | 	byte	"-"
304b5     00          | 	byte	0
304b6                 | LR__5125
304b6     6F 72       | 	byte	"or"
304b8     00          | 	byte	0
304b9                 | LR__5126
304b9     78 6F 72    | 	byte	"xor"
304bc     00          | 	byte	0
304bd                 | LR__5127
304bd     2A          | 	byte	"*"
304be     00          | 	byte	0
304bf                 | LR__5128
304bf     2F          | 	byte	"/"
304c0     00          | 	byte	0
304c1                 | LR__5129
304c1     61 6E 64    | 	byte	"and"
304c4     00          | 	byte	0
304c5                 | LR__5130
304c5     64 69 76    | 	byte	"div"
304c8     00          | 	byte	0
304c9                 | LR__5131
304c9     6D 6F 64    | 	byte	"mod"
304cc     00          | 	byte	0
304cd                 | LR__5132
304cd     73 68 6C    | 	byte	"shl"
304d0     00          | 	byte	0
304d1                 | LR__5133
304d1     73 68 72    | 	byte	"shr"
304d4     00          | 	byte	0
304d5                 | LR__5134
304d5     5E          | 	byte	"^"
304d6     00          | 	byte	0
304d7                 | LR__5135
304d7     6E 6F 74    | 	byte	"not"
304da     00          | 	byte	0
304db                 | LR__5136
304db     40          | 	byte	"@"
304dc     00          | 	byte	0
304dd                 | LR__5137
304dd     3D          | 	byte	"="
304de     00          | 	byte	0
304df                 | LR__5138
304df     3E 3D       | 	byte	">="
304e1     00          | 	byte	0
304e2                 | LR__5139
304e2     3C 3D       | 	byte	"<="
304e4     00          | 	byte	0
304e5                 | LR__5140
304e5     3C          | 	byte	"<"
304e6     00          | 	byte	0
304e7                 | LR__5141
304e7     3E          | 	byte	">"
304e8     00          | 	byte	0
304e9                 | LR__5142
304e9     3C 3E       | 	byte	"<>"
304eb     00          | 	byte	0
304ec                 | LR__5143
304ec     2B 2B       | 	byte	"++"
304ee     00          | 	byte	0
304ef                 | LR__5144
304ef     2D 2D       | 	byte	"--"
304f1     00          | 	byte	0
304f2                 | LR__5145
304f2     23          | 	byte	"#"
304f3     00          | 	byte	0
304f4                 | LR__5146
304f4     30          | 	byte	"0"
304f5     00          | 	byte	0
304f6                 | LR__5147
304f6     39          | 	byte	"9"
304f7     00          | 	byte	0
304f8                 | LR__5148
304f8     23 72 65 61 
304fc     64          | 	byte	"#read"
304fd     00          | 	byte	0
304fe                 | LR__5149
304fe     23 77 72 69 
30502     74 65       | 	byte	"#write"
30504     00          | 	byte	0
30505                 | LR__5150
30505     23 61 70 70 
30509     65 6E 64    | 	byte	"#append"
3050c     00          | 	byte	0
3050d                 | LR__5151
3050d     23          | 	byte	"#"
3050e     00          | 	byte	0
3050f                 | LR__5152
3050f     23          | 	byte	"#"
30510     00          | 	byte	0
30511                 | LR__5153
30511     2D          | 	byte	"-"
30512     00          | 	byte	0
30513                 | LR__5154
30513     30          | 	byte	"0"
30514     00          | 	byte	0
30515                 | LR__5155
30515     63          | 	byte	"c"
30516     00          | 	byte	0
30517                 | LR__5156
30517     63 23       | 	byte	"c#"
30519     00          | 	byte	0
3051a                 | LR__5157
3051a     64          | 	byte	"d"
3051b     00          | 	byte	0
3051c                 | LR__5158
3051c     64 23       | 	byte	"d#"
3051e     00          | 	byte	0
3051f                 | LR__5159
3051f     65          | 	byte	"e"
30520     00          | 	byte	0
30521                 | LR__5160
30521     66          | 	byte	"f"
30522     00          | 	byte	0
30523                 | LR__5161
30523     66 23       | 	byte	"f#"
30525     00          | 	byte	0
30526                 | LR__5162
30526     67          | 	byte	"g"
30527     00          | 	byte	0
30528                 | LR__5163
30528     67 23       | 	byte	"g#"
3052a     00          | 	byte	0
3052b                 | LR__5164
3052b     61          | 	byte	"a"
3052c     00          | 	byte	0
3052d                 | LR__5165
3052d     61 23       | 	byte	"a#"
3052f     00          | 	byte	0
30530                 | LR__5166
30530     68          | 	byte	"h"
30531     00          | 	byte	0
30532                 | LR__5167
30532     62          | 	byte	"b"
30533     00          | 	byte	0
30534                 | LR__5168
30534     2B          | 	byte	"+"
30535     00          | 	byte	0
30536                 | LR__5169
30536     2D          | 	byte	"-"
30537     00          | 	byte	0
30538                 | LR__5170
30538     3D          | 	byte	"="
30539     00          | 	byte	0
3053a                 | LR__5171
3053a     2C          | 	byte	","
3053b     00          | 	byte	0
3053c                 | LR__5172
3053c     2A          | 	byte	"*"
3053d     00          | 	byte	0
3053e                 | LR__5173
3053e     2F          | 	byte	"/"
3053f     00          | 	byte	0
30540                 | LR__5174
30540     3B          | 	byte	";"
30541     00          | 	byte	0
30542                 | LR__5175
30542     22          | 	byte	34
30543     00          | 	byte	0
30544                 | LR__5176
30544     5E          | 	byte	"^"
30545     00          | 	byte	0
30546                 | LR__5177
30546     29          | 	byte	")"
30547     00          | 	byte	0
30548                 | LR__5178
30548     28          | 	byte	"("
30549     00          | 	byte	0
3054a                 | LR__5179
3054a     3A          | 	byte	":"
3054b     00          | 	byte	0
3054c                 | LR__5180
3054c     20          | 	byte	" "
3054d     00          | 	byte	0
3054e                 | LR__5181
3054e     3E          | 	byte	">"
3054f     00          | 	byte	0
30550                 | LR__5182
30550     3C          | 	byte	"<"
30551     00          | 	byte	0
30552                 | LR__5183
30552     3D          | 	byte	"="
30553     00          | 	byte	0
30554                 | LR__5184
30554     62 65 65 70 | 	byte	"beep"
30558     00          | 	byte	0
30559                 | LR__5185
30559     62 2E       | 	byte	"b."
3055b     00          | 	byte	0
3055c                 | LR__5186
3055c     62 6F 78    | 	byte	"box"
3055f     00          | 	byte	0
30560                 | LR__5187
30560     62 72 75 6E | 	byte	"brun"
30564     00          | 	byte	0
30565                 | LR__5188
30565     62 72 2E    | 	byte	"br."
30568     00          | 	byte	0
30569                 | LR__5189
30569     63 68 61 6E 
3056d     67 65 66 72 
30571     65 71       | 	byte	"changefreq"
30573     00          | 	byte	0
30574                 | LR__5190
30574     63 66 2E    | 	byte	"cf."
30577     00          | 	byte	0
30578                 | LR__5191
30578     63 68 61 6E 
3057c     67 65 70 61 
30580     6E          | 	byte	"changepan"
30581     00          | 	byte	0
30582                 | LR__5192
30582     63 70 2E    | 	byte	"cp."
30585     00          | 	byte	0
30586                 | LR__5193
30586     63 68 61 6E 
3058a     67 65 76 6F 
3058e     6C          | 	byte	"changevol"
3058f     00          | 	byte	0
30590                 | LR__5194
30590     63 76 2E    | 	byte	"cv."
30593     00          | 	byte	0
30594                 | LR__5195
30594     63 68 61 6E 
30598     67 65 77 61 
3059c     76 65       | 	byte	"changewave"
3059e     00          | 	byte	0
3059f                 | LR__5196
3059f     63 77 2E    | 	byte	"cw."
305a2     00          | 	byte	0
305a3                 | LR__5197
305a3     63 69 72 63 
305a7     6C 65       | 	byte	"circle"
305a9     00          | 	byte	0
305aa                 | LR__5198
305aa     63 69 2E    | 	byte	"ci."
305ad     00          | 	byte	0
305ae                 | LR__5199
305ae     63 6C 69 63 
305b2     6B          | 	byte	"click"
305b3     00          | 	byte	0
305b4                 | LR__5200
305b4     63 6C 6F 73 
305b8     65          | 	byte	"close"
305b9     00          | 	byte	0
305ba                 | LR__5201
305ba     63 6C 73    | 	byte	"cls"
305bd     00          | 	byte	0
305be                 | LR__5202
305be     63 6F 6C 6F 
305c2     72          | 	byte	"color"
305c3     00          | 	byte	0
305c4                 | LR__5203
305c4     63 2E       | 	byte	"c."
305c6     00          | 	byte	0
305c7                 | LR__5204
305c7     63 73 61 76 
305cb     65          | 	byte	"csave"
305cc     00          | 	byte	0
305cd                 | LR__5205
305cd     63 73 2E    | 	byte	"cs."
305d0     00          | 	byte	0
305d1                 | LR__5206
305d1     63 75 72 73 
305d5     6F 72       | 	byte	"cursor"
305d7     00          | 	byte	0
305d8                 | LR__5207
305d8     64 65 66 73 
305dc     6E 64       | 	byte	"defsnd"
305de     00          | 	byte	0
305df                 | LR__5208
305df     64 65 66 65 
305e3     6E 76       | 	byte	"defenv"
305e5     00          | 	byte	0
305e6                 | LR__5209
305e6     64 65 66 73 
305ea     70 72 69 74 
305ee     65          | 	byte	"defsprite"
305ef     00          | 	byte	0
305f0                 | LR__5210
305f0     64 73 2E    | 	byte	"ds."
305f3     00          | 	byte	0
305f4                 | LR__5211
305f4     64 65 67    | 	byte	"deg"
305f7     00          | 	byte	0
305f8                 | LR__5212
305f8     64 69 6D    | 	byte	"dim"
305fb     00          | 	byte	0
305fc                 | LR__5213
305fc     64 69 72    | 	byte	"dir"
305ff     00          | 	byte	0
30600                 | LR__5214
30600     64 70 6F 6B 
30604     65          | 	byte	"dpoke"
30605     00          | 	byte	0
30606                 | LR__5215
30606     64 72 61 77 | 	byte	"draw"
3060a     00          | 	byte	0
3060b                 | LR__5216
3060b     64 72 2E    | 	byte	"dr."
3060e     00          | 	byte	0
3060f                 | LR__5217
3060f     65 6C 73 65 | 	byte	"else"
30613     00          | 	byte	0
30614                 | LR__5218
30614     65 6E 64    | 	byte	"end"
30617     00          | 	byte	0
30618                 | LR__5219
30618     65 6E 74 65 
3061c     72          | 	byte	"enter"
3061d     00          | 	byte	0
3061e                 | LR__5220
3061e     65 2E       | 	byte	"e."
30620     00          | 	byte	0
30621                 | LR__5221
30621     66 63 69 72 
30625     63 6C 65    | 	byte	"fcircle"
30628     00          | 	byte	0
30629                 | LR__5222
30629     66 63 2E    | 	byte	"fc."
3062c     00          | 	byte	0
3062d                 | LR__5223
3062d     66 69 6C 6C | 	byte	"fill"
30631     00          | 	byte	0
30632                 | LR__5224
30632     66 69 2E    | 	byte	"fi."
30635     00          | 	byte	0
30636                 | LR__5225
30636     66 6F 6E 74 | 	byte	"font"
3063a     00          | 	byte	0
3063b                 | LR__5226
3063b     66 6F 72    | 	byte	"for"
3063e     00          | 	byte	0
3063f                 | LR__5227
3063f     66 2E       | 	byte	"f."
30641     00          | 	byte	0
30642                 | LR__5228
30642     66 72 61 6D 
30646     65          | 	byte	"frame"
30647     00          | 	byte	0
30648                 | LR__5229
30648     66 72 2E    | 	byte	"fr."
3064b     00          | 	byte	0
3064c                 | LR__5230
3064c     67 65 74    | 	byte	"get"
3064f     00          | 	byte	0
30650                 | LR__5231
30650     67 6F 73 75 
30654     62          | 	byte	"gosub"
30655     00          | 	byte	0
30656                 | LR__5232
30656     67 6F 74 6F | 	byte	"goto"
3065a     00          | 	byte	0
3065b                 | LR__5233
3065b     67 2E       | 	byte	"g."
3065d     00          | 	byte	0
3065e                 | LR__5234
3065e     69 66       | 	byte	"if"
30660     00          | 	byte	0
30661                 | LR__5235
30661     69 6E 6B    | 	byte	"ink"
30664     00          | 	byte	0
30665                 | LR__5236
30665     69 2E       | 	byte	"i."
30667     00          | 	byte	0
30668                 | LR__5237
30668     6C 69 73 74 | 	byte	"list"
3066c     00          | 	byte	0
3066d                 | LR__5238
3066d     6C 2E       | 	byte	"l."
3066f     00          | 	byte	0
30670                 | LR__5239
30670     6C 6F 61 64 | 	byte	"load"
30674     00          | 	byte	0
30675                 | LR__5240
30675     6C 6F 2E    | 	byte	"lo."
30678     00          | 	byte	0
30679                 | LR__5241
30679     6C 70 6F 6B 
3067d     65          | 	byte	"lpoke"
3067e     00          | 	byte	0
3067f                 | LR__5242
3067f     6D 6F 64 65 | 	byte	"mode"
30683     00          | 	byte	0
30684                 | LR__5243
30684     6D 2E       | 	byte	"m."
30686     00          | 	byte	0
30687                 | LR__5244
30687     6D 6F 75 73 
3068b     65          | 	byte	"mouse"
3068c     00          | 	byte	0
3068d                 | LR__5245
3068d     6E 65 77    | 	byte	"new"
30690     00          | 	byte	0
30691                 | LR__5246
30691     6E 65 78 74 | 	byte	"next"
30695     00          | 	byte	0
30696                 | LR__5247
30696     6E 2E       | 	byte	"n."
30698     00          | 	byte	0
30699                 | LR__5248
30699     6F 70 65 6E | 	byte	"open"
3069d     00          | 	byte	0
3069e                 | LR__5249
3069e     70 61 70 65 
306a2     72          | 	byte	"paper"
306a3     00          | 	byte	0
306a4                 | LR__5250
306a4     70 61 2E    | 	byte	"pa."
306a7     00          | 	byte	0
306a8                 | LR__5251
306a8     70 69 6E 66 
306ac     6C 6F 61 74 | 	byte	"pinfloat"
306b0     00          | 	byte	0
306b1                 | LR__5252
306b1     70 69 6E 68 
306b5     69          | 	byte	"pinhi"
306b6     00          | 	byte	0
306b7                 | LR__5253
306b7     70 69 6E 6C 
306bb     6F          | 	byte	"pinlo"
306bc     00          | 	byte	0
306bd                 | LR__5254
306bd     70 69 6E 73 
306c1     74 61 72 74 | 	byte	"pinstart"
306c5     00          | 	byte	0
306c6                 | LR__5255
306c6     70 69 6E 74 
306ca     6F 67 67 6C 
306ce     65          | 	byte	"pintoggle"
306cf     00          | 	byte	0
306d0                 | LR__5256
306d0     70 69 6E 77 
306d4     72 69 74 65 | 	byte	"pinwrite"
306d8     00          | 	byte	0
306d9                 | LR__5257
306d9     70 6C 61 79 | 	byte	"play"
306dd     00          | 	byte	0
306de                 | LR__5258
306de     70 2E       | 	byte	"p."
306e0     00          | 	byte	0
306e1                 | LR__5259
306e1     70 6C 6F 74 | 	byte	"plot"
306e5     00          | 	byte	0
306e6                 | LR__5260
306e6     70 6C 2E    | 	byte	"pl."
306e9     00          | 	byte	0
306ea                 | LR__5261
306ea     70 6F 6B 65 | 	byte	"poke"
306ee     00          | 	byte	0
306ef                 | LR__5262
306ef     70 6F 70    | 	byte	"pop"
306f2     00          | 	byte	0
306f3                 | LR__5263
306f3     70 6F 73 69 
306f7     74 69 6F 6E | 	byte	"position"
306fb     00          | 	byte	0
306fc                 | LR__5264
306fc     70 6F 73 2E | 	byte	"pos."
30700     00          | 	byte	0
30701                 | LR__5265
30701     70 72 69 6E 
30705     74          | 	byte	"print"
30706     00          | 	byte	0
30707                 | LR__5266
30707     3F          | 	byte	"?"
30708     00          | 	byte	0
30709                 | LR__5267
30709     70 75 74    | 	byte	"put"
3070c     00          | 	byte	0
3070d                 | LR__5268
3070d     72 61 64    | 	byte	"rad"
30710     00          | 	byte	0
30711                 | LR__5269
30711     72 65 6C 65 
30715     61 73 65    | 	byte	"release"
30718     00          | 	byte	0
30719                 | LR__5270
30719     72 65 6D    | 	byte	"rem"
3071c     00          | 	byte	0
3071d                 | LR__5271
3071d     27          | 	byte	"'"
3071e     00          | 	byte	0
3071f                 | LR__5272
3071f     72 65 74 75 
30723     72 6E       | 	byte	"return"
30725     00          | 	byte	0
30726                 | LR__5273
30726     72 75 6E    | 	byte	"run"
30729     00          | 	byte	0
3072a                 | LR__5274
3072a     73 61 76 65 | 	byte	"save"
3072e     00          | 	byte	0
3072f                 | LR__5275
3072f     73 2E       | 	byte	"s."
30731     00          | 	byte	0
30732                 | LR__5276
30732     73 65 74 64 
30736     65 6C 61 79 | 	byte	"setdelay"
3073a     00          | 	byte	0
3073b                 | LR__5277
3073b     73 64 2E    | 	byte	"sd."
3073e     00          | 	byte	0
3073f                 | LR__5278
3073f     73 65 74 65 
30743     6E 76       | 	byte	"setenv"
30745     00          | 	byte	0
30746                 | LR__5279
30746     73 65 2E    | 	byte	"se."
30749     00          | 	byte	0
3074a                 | LR__5280
3074a     73 65 74 6C 
3074e     65 6E       | 	byte	"setlen"
30750     00          | 	byte	0
30751                 | LR__5281
30751     73 6C 2E    | 	byte	"sl."
30754     00          | 	byte	0
30755                 | LR__5282
30755     73 65 74 70 
30759     61 6E       | 	byte	"setpan"
3075b     00          | 	byte	0
3075c                 | LR__5283
3075c     73 70       | 	byte	"sp"
3075e     00          | 	byte	0
3075f                 | LR__5284
3075f     73 65 74 73 
30763     75 73 74 61 
30767     69 6E       | 	byte	"setsustain"
30769     00          | 	byte	0
3076a                 | LR__5285
3076a     73 73 2E    | 	byte	"ss."
3076d     00          | 	byte	0
3076e                 | LR__5286
3076e     73 65 74 76 
30772     6F 6C       | 	byte	"setvol"
30774     00          | 	byte	0
30775                 | LR__5287
30775     73 76 2E    | 	byte	"sv."
30778     00          | 	byte	0
30779                 | LR__5288
30779     73 65 74 77 
3077d     61 76 65    | 	byte	"setwave"
30780     00          | 	byte	0
30781                 | LR__5289
30781     73 77 2E    | 	byte	"sw."
30784     00          | 	byte	0
30785                 | LR__5290
30785     73 65 74 77 
30789     61 76       | 	byte	"setwav"
3078b     00          | 	byte	0
3078c                 | LR__5291
3078c     73 68 75 74 
30790     75 70       | 	byte	"shutup"
30792     00          | 	byte	0
30793                 | LR__5292
30793     73 68 2E    | 	byte	"sh."
30796     00          | 	byte	0
30797                 | LR__5293
30797     73 6F 75 6E 
3079b     64          | 	byte	"sound"
3079c     00          | 	byte	0
3079d                 | LR__5294
3079d     73 6F 2E    | 	byte	"so."
307a0     00          | 	byte	0
307a1                 | LR__5295
307a1     73 70 72 69 
307a5     74 65       | 	byte	"sprite"
307a7     00          | 	byte	0
307a8                 | LR__5296
307a8     73 70 72 2E | 	byte	"spr."
307ac     00          | 	byte	0
307ad                 | LR__5297
307ad     74 68 65 6E | 	byte	"then"
307b1     00          | 	byte	0
307b2                 | LR__5298
307b2     77 61 69 74 
307b6     6D 73       | 	byte	"waitms"
307b8     00          | 	byte	0
307b9                 | LR__5299
307b9     77 61 69 74 
307bd     63 6C 6F 63 
307c1     6B          | 	byte	"waitclock"
307c2     00          | 	byte	0
307c3                 | LR__5300
307c3     77 63 2E    | 	byte	"wc."
307c6     00          | 	byte	0
307c7                 | LR__5301
307c7     77 61 69 74 
307cb     76 62 6C    | 	byte	"waitvbl"
307ce     00          | 	byte	0
307cf                 | LR__5302
307cf     77 76 2E    | 	byte	"wv."
307d2     00          | 	byte	0
307d3                 | LR__5303
307d3     77 78 70 69 
307d7     6E          | 	byte	"wxpin"
307d8     00          | 	byte	0
307d9                 | LR__5304
307d9     77 79 70 69 
307dd     6E          | 	byte	"wypin"
307de     00          | 	byte	0
307df                 | LR__5305
307df     61 62 73    | 	byte	"abs"
307e2     00          | 	byte	0
307e3                 | LR__5306
307e3     61 63 6F 73 | 	byte	"acos"
307e7     00          | 	byte	0
307e8                 | LR__5307
307e8     61 64 72    | 	byte	"adr"
307eb     00          | 	byte	0
307ec                 | LR__5308
307ec     61 64 64 72 | 	byte	"addr"
307f0     00          | 	byte	0
307f1                 | LR__5309
307f1     61 73 63    | 	byte	"asc"
307f4     00          | 	byte	0
307f5                 | LR__5310
307f5     61 73 69 6E | 	byte	"asin"
307f9     00          | 	byte	0
307fa                 | LR__5311
307fa     61 74 6E    | 	byte	"atn"
307fd     00          | 	byte	0
307fe                 | LR__5312
307fe     62 69 6E 24 | 	byte	"bin$"
30802     00          | 	byte	0
30803                 | LR__5313
30803     63 68 72 24 | 	byte	"chr$"
30807     00          | 	byte	0
30808                 | LR__5314
30808     63 6F 73    | 	byte	"cos"
3080b     00          | 	byte	0
3080c                 | LR__5315
3080c     64 70 65 65 
30810     6B          | 	byte	"dpeek"
30811     00          | 	byte	0
30812                 | LR__5316
30812     66 72 65    | 	byte	"fre"
30815     00          | 	byte	0
30816                 | LR__5317
30816     67 65 74 70 
3081a     69 78 65 6C | 	byte	"getpixel"
3081e     00          | 	byte	0
3081f                 | LR__5318
3081f     67 65 2E    | 	byte	"ge."
30822     00          | 	byte	0
30823                 | LR__5319
30823     67 65 74 65 
30827     6E 76 73 75 
3082b     73 74 61 69 
3082f     6E          | 	byte	"getenvsustain"
30830     00          | 	byte	0
30831                 | LR__5320
30831     67 65 74 6E 
30835     6F 74 65 76 
30839     61 6C 75 65 | 	byte	"getnotevalue"
3083d     00          | 	byte	0
3083e                 | LR__5321
3083e     67 65 74 74 
30842     69 6D 65    | 	byte	"gettime"
30845     00          | 	byte	0
30846                 | LR__5322
30846     68 65 78 24 | 	byte	"hex$"
3084a     00          | 	byte	0
3084b                 | LR__5323
3084b     69 6E 6B 65 
3084f     79 24       | 	byte	"inkey$"
30851     00          | 	byte	0
30852                 | LR__5324
30852     69 6E 74    | 	byte	"int"
30855     00          | 	byte	0
30856                 | LR__5325
30856     6C 65 66 74 
3085a     24          | 	byte	"left$"
3085b     00          | 	byte	0
3085c                 | LR__5326
3085c     6C 65 6E    | 	byte	"len"
3085f     00          | 	byte	0
30860                 | LR__5327
30860     6C 6F 67    | 	byte	"log"
30863     00          | 	byte	0
30864                 | LR__5328
30864     6C 70 65 65 
30868     6B          | 	byte	"lpeek"
30869     00          | 	byte	0
3086a                 | LR__5329
3086a     6D 69 64 24 | 	byte	"mid$"
3086e     00          | 	byte	0
3086f                 | LR__5330
3086f     6D 6F 75 73 
30873     65 6B       | 	byte	"mousek"
30875     00          | 	byte	0
30876                 | LR__5331
30876     6D 6F 75 73 
3087a     65 77       | 	byte	"mousew"
3087c     00          | 	byte	0
3087d                 | LR__5332
3087d     6D 6F 75 73 
30881     65 78       | 	byte	"mousex"
30883     00          | 	byte	0
30884                 | LR__5333
30884     6D 6F 75 73 
30888     65 79       | 	byte	"mousey"
3088a     00          | 	byte	0
3088b                 | LR__5334
3088b     70 65 65 6B | 	byte	"peek"
3088f     00          | 	byte	0
30890                 | LR__5335
30890     70 69 6E 72 
30894     65 61 64    | 	byte	"pinread"
30897     00          | 	byte	0
30898                 | LR__5336
30898     72 64 70 69 
3089c     6E          | 	byte	"rdpin"
3089d     00          | 	byte	0
3089e                 | LR__5337
3089e     72 69 67 68 
308a2     74 24       | 	byte	"right$"
308a4     00          | 	byte	0
308a5                 | LR__5338
308a5     72 71 70 69 
308a9     6E          | 	byte	"rqpin"
308aa     00          | 	byte	0
308ab                 | LR__5339
308ab     72 6F 75 6E 
308af     64          | 	byte	"round"
308b0     00          | 	byte	0
308b1                 | LR__5340
308b1     72 6E 64    | 	byte	"rnd"
308b4     00          | 	byte	0
308b5                 | LR__5341
308b5     73 69 6E    | 	byte	"sin"
308b8     00          | 	byte	0
308b9                 | LR__5342
308b9     73 71 72    | 	byte	"sqr"
308bc     00          | 	byte	0
308bd                 | LR__5343
308bd     73 74 69 63 
308c1     6B          | 	byte	"stick"
308c2     00          | 	byte	0
308c3                 | LR__5344
308c3     73 74 72 69 
308c7     67          | 	byte	"strig"
308c8     00          | 	byte	0
308c9                 | LR__5345
308c9     73 74 72 24 | 	byte	"str$"
308cd     00          | 	byte	0
308ce                 | LR__5346
308ce     74 61 6E    | 	byte	"tan"
308d1     00          | 	byte	0
308d2                 | LR__5347
308d2     76 61 6C    | 	byte	"val"
308d5     00          | 	byte	0
308d6                 | LR__5348
308d6     76 61 72 70 
308da     74 72       | 	byte	"varptr"
308dc     00          | 	byte	0
308dd                 | LR__5349
308dd     61          | 	byte	"a"
308de     00          | 	byte	0
308df                 | LR__5350
308df     7A          | 	byte	"z"
308e0     00          | 	byte	0
308e1                 | LR__5351
308e1     5F          | 	byte	"_"
308e2     00          | 	byte	0
308e3                 | LR__5352
308e3     61          | 	byte	"a"
308e4     00          | 	byte	0
308e5                 | LR__5353
308e5     7A          | 	byte	"z"
308e6     00          | 	byte	0
308e7                 | LR__5354
308e7     30          | 	byte	"0"
308e8     00          | 	byte	0
308e9                 | LR__5355
308e9     39          | 	byte	"9"
308ea     00          | 	byte	0
308eb                 | LR__5356
308eb     5F          | 	byte	"_"
308ec     00          | 	byte	0
308ed                 | LR__5357
308ed     2E          | 	byte	"."
308ee     00          | 	byte	0
308ef                 | LR__5358
308ef     61          | 	byte	"a"
308f0     00          | 	byte	0
308f1                 | LR__5359
308f1     7A          | 	byte	"z"
308f2     00          | 	byte	0
308f3                 | LR__5360
308f3     30          | 	byte	"0"
308f4     00          | 	byte	0
308f5                 | LR__5361
308f5     39          | 	byte	"9"
308f6     00          | 	byte	0
308f7                 | LR__5362
308f7     5F          | 	byte	"_"
308f8     00          | 	byte	0
308f9                 | LR__5363
308f9     24          | 	byte	"$"
308fa     00          | 	byte	0
308fb                 | LR__5364
308fb     25          | 	byte	"%"
308fc     00          | 	byte	0
308fd                 | LR__5365
308fd     21          | 	byte	"!"
308fe     00          | 	byte	0
308ff                 | LR__5366
308ff     30          | 	byte	"0"
30900     00          | 	byte	0
30901                 | LR__5367
30901     39          | 	byte	"9"
30902     00          | 	byte	0
30903                 | LR__5368
30903     2E          | 	byte	"."
30904     00          | 	byte	0
30905                 | LR__5369
30905     24          | 	byte	"$"
30906     00          | 	byte	0
30907                 | LR__5370
30907     25          | 	byte	"%"
30908     00          | 	byte	0
30909                 | LR__5371
30909     2D          | 	byte	"-"
3090a     00          | 	byte	0
3090b                 | LR__5372
3090b     2E          | 	byte	"."
3090c     00          | 	byte	0
3090d                 | LR__5373
3090d     24          | 	byte	"$"
3090e     00          | 	byte	0
3090f                 | LR__5374
3090f     25          | 	byte	"%"
30910     00          | 	byte	0
30911                 | LR__5375
30911     30          | 	byte	"0"
30912     00          | 	byte	0
30913                 | LR__5376
30913     39          | 	byte	"9"
30914     00          | 	byte	0
30915                 | LR__5377
30915     5F          | 	byte	"_"
30916     00          | 	byte	0
30917                 | LR__5378
30917     2E          | 	byte	"."
30918     00          | 	byte	0
30919                 | LR__5379
30919     45          | 	byte	"E"
3091a     00          | 	byte	0
3091b                 | LR__5380
3091b     65          | 	byte	"e"
3091c     00          | 	byte	0
3091d                 | LR__5381
3091d     2D          | 	byte	"-"
3091e     00          | 	byte	0
3091f                 | LR__5382
3091f     61          | 	byte	"a"
30920     00          | 	byte	0
30921                 | LR__5383
30921     66          | 	byte	"f"
30922     00          | 	byte	0
30923                 | LR__5384
30923     30          | 	byte	"0"
30924     00          | 	byte	0
30925                 | LR__5385
30925     31          | 	byte	"1"
30926     00          | 	byte	0
30927                 | LR__5386
30927     5F          | 	byte	"_"
30928     00          | 	byte	0
30929                 | LR__5387
30929     2D          | 	byte	"-"
3092a     00          | 	byte	0
3092b                 | LR__5388
3092b     65          | 	byte	"e"
3092c     00          | 	byte	0
3092d                 | LR__5389
3092d     2E          | 	byte	"."
3092e     00          | 	byte	0
3092f                 | LR__5390
3092f     45          | 	byte	"E"
30930     00          | 	byte	0
30931                 | LR__5391
30931     65          | 	byte	"e"
30932     00          | 	byte	0
30933                 | LR__5392
30933     30          | 	byte	"0"
30934     00          | 	byte	0
30935                 | LR__5393
30935     39          | 	byte	"9"
30936     00          | 	byte	0
30937                 | LR__5394
30937     24          | 	byte	"$"
30938     00          | 	byte	0
30939                 | LR__5395
30939     25          | 	byte	"%"
3093a     00          | 	byte	0
3093b                 | LR__5396
3093b     2D          | 	byte	"-"
3093c     00          | 	byte	0
3093d                 | LR__5397
3093d     24          | 	byte	"$"
3093e     00          | 	byte	0
3093f                 | LR__5398
3093f     25          | 	byte	"%"
30940     00          | 	byte	0
30941                 | LR__5399
30941     30          | 	byte	"0"
30942     00          | 	byte	0
30943                 | LR__5400
30943     39          | 	byte	"9"
30944     00          | 	byte	0
30945                 | LR__5401
30945     5F          | 	byte	"_"
30946     00          | 	byte	0
30947                 | LR__5402
30947     30          | 	byte	"0"
30948     00          | 	byte	0
30949                 | LR__5403
30949     39          | 	byte	"9"
3094a     00          | 	byte	0
3094b                 | LR__5404
3094b     61          | 	byte	"a"
3094c     00          | 	byte	0
3094d                 | LR__5405
3094d     66          | 	byte	"f"
3094e     00          | 	byte	0
3094f                 | LR__5406
3094f     5F          | 	byte	"_"
30950     00          | 	byte	0
30951                 | LR__5407
30951     30          | 	byte	"0"
30952     00          | 	byte	0
30953                 | LR__5408
30953     31          | 	byte	"1"
30954     00          | 	byte	0
30955                 | LR__5409
30955     5F          | 	byte	"_"
30956     00          | 	byte	0
30957                 | LR__5410
30957     30          | 	byte	"0"
30958     00          | 	byte	0
30959                 | LR__5411
30959     39          | 	byte	"9"
3095a     00          | 	byte	0
3095b                 | LR__5412
3095b     5F          | 	byte	"_"
3095c     00          | 	byte	0
3095d                 | LR__5413
3095d     22          | 	byte	34
3095e     00          | 	byte	0
3095f                 | LR__5414
3095f     22          | 	byte	34
30960     00          | 	byte	0
30961                 | LR__5415
30961     44 69 6D 3A 
30965     20 61 74 20 
30969     6C 69 6E 65 
3096d     20          | 	byte	"Dim: at line "
3096e     00          | 	byte	0
3096f                 | LR__5416
3096f     3A 20 77 61 
30973     72 6E 69 6E 
30977     67 3A 20 74 
3097b     68 65 20 76 
3097f     61 72 69 61 
30983     62 6C 65 20 
30987     65 78 69 73 
3098b     74 65 64 2E | 	byte	": warning: the variable existed."
3098f     00          | 	byte	0
30990                 | LR__5417
30990     28          | 	byte	"("
30991     00          | 	byte	0
30992                 | LR__5418
30992     61 73       | 	byte	"as"
30994     00          | 	byte	0
30995                 | LR__5419
30995     61 73       | 	byte	"as"
30997     00          | 	byte	0
30998                 | LR__5420
30998     2C          | 	byte	","
30999     00          | 	byte	0
3099a                 | LR__5421
3099a     29          | 	byte	")"
3099b     00          | 	byte	0
3099c                 | LR__5422
3099c     29          | 	byte	")"
3099d     00          | 	byte	0
3099e                 | LR__5423
3099e     61 73       | 	byte	"as"
309a0     00          | 	byte	0
309a1                 | LR__5424
309a1     62 79 74 65 | 	byte	"byte"
309a5     00          | 	byte	0
309a6                 | LR__5425
309a6     75 62 79 74 
309aa     65          | 	byte	"ubyte"
309ab     00          | 	byte	0
309ac                 | LR__5426
309ac     73 68 6F 72 
309b0     74          | 	byte	"short"
309b1     00          | 	byte	0
309b2                 | LR__5427
309b2     75 73 68 6F 
309b6     72 74       | 	byte	"ushort"
309b8     00          | 	byte	0
309b9                 | LR__5428
309b9     6C 6F 6E 67 | 	byte	"long"
309bd     00          | 	byte	0
309be                 | LR__5429
309be     69 6E 74 65 
309c2     67 65 72    | 	byte	"integer"
309c5     00          | 	byte	0
309c6                 | LR__5430
309c6     75 6C 6F 6E 
309ca     67          | 	byte	"ulong"
309cb     00          | 	byte	0
309cc                 | LR__5431
309cc     69 6E 74 36 
309d0     34          | 	byte	"int64"
309d1     00          | 	byte	0
309d2                 | LR__5432
309d2     75 69 6E 74 
309d6     36 34       | 	byte	"uint64"
309d8     00          | 	byte	0
309d9                 | LR__5433
309d9     73 69 6E 67 
309dd     6C 65       | 	byte	"single"
309df     00          | 	byte	0
309e0                 | LR__5434
309e0     64 6F 75 62 
309e4     6C 65       | 	byte	"double"
309e6     00          | 	byte	0
309e7                 | LR__5435
309e7     73 74 72 69 
309eb     6E 67       | 	byte	"string"
309ed     00          | 	byte	0
309ee                 | LR__5436
309ee     74 6F       | 	byte	"to"
309f0     00          | 	byte	0
309f1                 | LR__5437
309f1     73 74 65 70 | 	byte	"step"
309f5     00          | 	byte	0
309f6                 | LR__5438
309f6     73 2E       | 	byte	"s."
309f8     00          | 	byte	0
309f9                 | LR__5439
309f9     24          | 	byte	"$"
309fa     00          | 	byte	0
309fb                 | LR__5440
309fb     26 68       | 	byte	"&h"
309fd     00          | 	byte	0
309fe                 | LR__5441
309fe     25          | 	byte	"%"
309ff     00          | 	byte	0
30a00                 | LR__5442
30a00     26 62       | 	byte	"&b"
30a02     00          | 	byte	0
30a03                 | LR__5443
30a03                 | 	byte	
30a03     00          | 	byte	0
30a04                 | LR__5444
30a04     2F          | 	byte	"/"
30a05     00          | 	byte	0
30a06                 | LR__5445
30a06                 | 	byte	
30a06     00          | 	byte	0
30a07                 | LR__5446
30a07     53 61 76 65 
30a0b     64 20 61 73 
30a0f     20          | 	byte	"Saved as "
30a10     00          | 	byte	0
30a11                 | LR__5447
30a11     2F          | 	byte	"/"
30a12     00          | 	byte	0
30a13                 | LR__5448
30a13                 | 	byte	
30a13     00          | 	byte	0
30a14                 | LR__5449
30a14     2F          | 	byte	"/"
30a15     00          | 	byte	0
30a16                 | LR__5450
30a16     2F          | 	byte	"/"
30a17     00          | 	byte	0
30a18                 | LR__5451
30a18     2E 62 61 73 | 	byte	".bas"
30a1c     00          | 	byte	0
30a1d                 | LR__5452
30a1d     53 79 73 74 
30a21     65 6D 20 65 
30a25     72 72 6F 72 
30a29     20          | 	byte	"System error "
30a2a     00          | 	byte	0
30a2b                 | LR__5453
30a2b     3A 20       | 	byte	": "
30a2d     00          | 	byte	0
30a2e                 | LR__5454
30a2e     2E 62 61 73 | 	byte	".bas"
30a32     00          | 	byte	0
30a33                 | LR__5455
30a33     2F          | 	byte	"/"
30a34     00          | 	byte	0
30a35                 | LR__5456
30a35                 | 	byte	
30a35     00          | 	byte	0
30a36                 | LR__5457
30a36     4C 6F 61 64 
30a3a     65 64 20    | 	byte	"Loaded "
30a3d     00          | 	byte	0
30a3e                 | LR__5458
30a3e     2F          | 	byte	"/"
30a3f     00          | 	byte	0
30a40                 | LR__5459
30a40     53 74 6F 70 
30a44     70 65 64 20 
30a48     61 74 20 6C 
30a4c     69 6E 65 20 | 	byte	"Stopped at line "
30a50     00          | 	byte	0
30a51                 | LR__5460
30a51                 | 	byte	
30a51     00          | 	byte	0
30a52                 | LR__5461
30a52                 | 	byte	
30a52     00          | 	byte	0
30a53                 | LR__5462
30a53     2F 73 64 2F 
30a57     6D 65 64 69 
30a5b     61 2F 68 2F | 	byte	"/sd/media/h/"
30a5f     00          | 	byte	0
30a60                 | LR__5463
30a60     53 79 73 74 
30a64     65 6D 20 65 
30a68     72 72 6F 72 
30a6c     20          | 	byte	"System error "
30a6d     00          | 	byte	0
30a6e                 | LR__5464
30a6e     3A 20       | 	byte	": "
30a70     00          | 	byte	0
30a71                 | LR__5465
30a71                 | 	byte	
30a71     00          | 	byte	0
30a72                 | LR__5466
30a72                 | 	byte	
30a72     00          | 	byte	0
30a73                 | LR__5467
30a73     2F 73 64 2F 
30a77     6D 65 64 69 
30a7b     61 2F 73 2F | 	byte	"/sd/media/s/"
30a7f     00          | 	byte	0
30a80                 | LR__5468
30a80     53 79 73 74 
30a84     65 6D 20 65 
30a88     72 72 6F 72 
30a8c     20          | 	byte	"System error "
30a8d     00          | 	byte	0
30a8e                 | LR__5469
30a8e     3A 20       | 	byte	": "
30a90     00          | 	byte	0
30a91                 | LR__5470
30a91                 | 	byte	
30a91     00          | 	byte	0
30a92                 | LR__5471
30a92     6E 6F 6E 61 
30a96     6D 65 2E 62 
30a9a     61 73       | 	byte	"noname.bas"
30a9c     00          | 	byte	0
30a9d                 | LR__5472
30a9d     66 69 6C 65 
30aa1     6E 61 6D 65 
30aa5     20 65 78 70 
30aa9     65 63 74 65 
30aad     64          | 	byte	"filename expected"
30aae     00          | 	byte	0
30aaf                 | LR__5473
30aaf     72 65 61 64 | 	byte	"read"
30ab3     00          | 	byte	0
30ab4                 | LR__5474
30ab4     77 72 69 74 
30ab8     65          | 	byte	"write"
30ab9     00          | 	byte	0
30aba                 | LR__5475
30aba     61 70 70 65 
30abe     6E 64       | 	byte	"append"
30ac0     00          | 	byte	0
30ac1                 | LR__5476
30ac1     63 68 61 6E 
30ac5     6E 65 6C 23 
30ac9     20 65 78 70 
30acd     65 63 74 65 
30ad1     64          | 	byte	"channel# expected"
30ad2     00          | 	byte	0
30ad3                 | LR__5477
30ad3     4F 70 65 6E 
30ad7     3A 20 69 6E 
30adb     76 61 6C 69 
30adf     64 20 6D 6F 
30ae3     64 65       | 	byte	"Open: invalid mode"
30ae5     00          | 	byte	0
30ae6                 | LR__5478
30ae6     63 68 61 6E 
30aea     6E 65 6C 23 
30aee     20 65 78 70 
30af2     65 63 74 65 
30af6     64          | 	byte	"channel# expected"
30af7     00          | 	byte	0
30af8                 | LR__5479
30af8     45 72 72 6F 
30afc     72 20       | 	byte	"Error "
30afe     00          | 	byte	0
30aff                 | LR__5480
30aff     3A 20       | 	byte	": "
30b01     00          | 	byte	0
30b02                 | LR__5481
30b02                 | 	byte	
30b02     00          | 	byte	0
30b03                 | LR__5482
30b03                 | 	byte	
30b03     00          | 	byte	0
30b04                 | LR__5483
30b04     72 6E 64 3A 
30b08     20          | 	byte	"rnd: "
30b09     00          | 	byte	0
30b0a                 | LR__5484
30b0a     72 6E 64 3A 
30b0e     20          | 	byte	"rnd: "
30b0f     00          | 	byte	0
30b10                 | LR__5485
30b10     67 65 74 65 
30b14     6E 76 73 75 
30b18     73 74 61 69 
30b1c     6E 3A 20    | 	byte	"getenvsustain: "
30b1f     00          | 	byte	0
30b20                 | LR__5486
30b20     73 69 6E 3A 
30b24     20          | 	byte	"sin: "
30b25     00          | 	byte	0
30b26                 | LR__5487
30b26     6D 69 64 24 
30b2a     3A 20       | 	byte	"mid$: "
30b2c     00          | 	byte	0
30b2d                 | LR__5488
30b2d     6D 69 64 24 
30b31     3A 20       | 	byte	"mid$: "
30b33     00          | 	byte	0
30b34                 | LR__5489
30b34     72 69 67 68 
30b38     74 24 3A 20 | 	byte	"right$: "
30b3c     00          | 	byte	0
30b3d                 | LR__5490
30b3d     72 69 67 68 
30b41     74 24 3A 20 | 	byte	"right$: "
30b45     00          | 	byte	0
30b46                 | LR__5491
30b46     6C 65 66 74 
30b4a     24 3A 20    | 	byte	"left$: "
30b4d     00          | 	byte	0
30b4e                 | LR__5492
30b4e     6C 65 66 74 
30b52     24 3A 20    | 	byte	"left$: "
30b55     00          | 	byte	0
30b56                 | LR__5493
30b56     61 73 63 3A 
30b5a     20          | 	byte	"asc: "
30b5b     00          | 	byte	0
30b5c                 | LR__5494
30b5c     61 73 63 3A 
30b60     20          | 	byte	"asc: "
30b61     00          | 	byte	0
30b62                 | LR__5495
30b62     6C 65 6E 3A 
30b66     20          | 	byte	"len: "
30b67     00          | 	byte	0
30b68                 | LR__5496
30b68     6C 65 6E 3A 
30b6c     20          | 	byte	"len: "
30b6d     00          | 	byte	0
30b6e                 | LR__5497
30b6e     63 68 72 24 
30b72     3A 20       | 	byte	"chr$: "
30b74     00          | 	byte	0
30b75                 | LR__5498
30b75     76 61 6C 3A 
30b79     20          | 	byte	"val: "
30b7a     00          | 	byte	0
30b7b                 | LR__5499
30b7b     76 61 6C 3A 
30b7f     20          | 	byte	"val: "
30b80     00          | 	byte	0
30b81                 | LR__5500
30b81     24          | 	byte	"$"
30b82     00          | 	byte	0
30b83                 | LR__5501
30b83     26 68       | 	byte	"&h"
30b85     00          | 	byte	0
30b86                 | LR__5502
30b86     25          | 	byte	"%"
30b87     00          | 	byte	0
30b88                 | LR__5503
30b88     26 62       | 	byte	"&b"
30b8a     00          | 	byte	0
30b8b                 | LR__5504
30b8b     68 65 78 24 
30b8f     3A 20       | 	byte	"hex$: "
30b91     00          | 	byte	0
30b92                 | LR__5505
30b92     62 69 6E 24 
30b96     3A 20       | 	byte	"bin$: "
30b98     00          | 	byte	0
30b99                 | LR__5506
30b99     63 6F 73 3A 
30b9d     20          | 	byte	"cos: "
30b9e     00          | 	byte	0
30b9f                 | LR__5507
30b9f     74 61 6E 3A 
30ba3     20          | 	byte	"tan: "
30ba4     00          | 	byte	0
30ba5                 | LR__5508
30ba5     61 73 69 6E 
30ba9     3A 20       | 	byte	"asin: "
30bab     00          | 	byte	0
30bac                 | LR__5509
30bac     61 63 6F 73 
30bb0     3A 20       | 	byte	"acos: "
30bb2     00          | 	byte	0
30bb3                 | LR__5510
30bb3     61 74 6E 3A 
30bb7     20          | 	byte	"atn: "
30bb8     00          | 	byte	0
30bb9                 | LR__5511
30bb9     73 71 72 3A 
30bbd     20          | 	byte	"sqr: "
30bbe     00          | 	byte	0
30bbf                 | LR__5512
30bbf     73 74 69 63 
30bc3     6B 3A 20    | 	byte	"stick: "
30bc6     00          | 	byte	0
30bc7                 | LR__5513
30bc7     73 74 72 69 
30bcb     67 3A 20    | 	byte	"strig: "
30bce     00          | 	byte	0
30bcf                 | LR__5514
30bcf     67 65 74 70 
30bd3     69 78 65 6C 
30bd7     3A 20       | 	byte	"getpixel: "
30bd9     00          | 	byte	0
30bda                 | LR__5515
30bda     6C 6F 67 3A 
30bde     20          | 	byte	"log: "
30bdf     00          | 	byte	0
30be0                 | LR__5516
30be0     50 72 69 6E 
30be4     74 20 74 6F 
30be8     20 63 68 61 
30bec     6E 6E 65 6C 
30bf0     20          | 	byte	"Print to channel "
30bf1     00          | 	byte	0
30bf2                 | LR__5517
30bf2     20 42 41 53 
30bf6     49 43 20 62 
30bfa     79 74 65 73 
30bfe     20 66 72 65 
30c02     65          | 	byte	" BASIC bytes free"
30c03     00          | 	byte	0
30c04                 | LR__5518
30c04                 | 	byte	
30c04     00          | 	byte	0
30c05                 | LR__5519
30c05     2F 73 64 2F 
30c09     62 61 73    | 	byte	"/sd/bas"
30c0c     00          | 	byte	0
30c0d                 | LR__5520
30c0d     57 6F 72 6B 
30c11     69 6E 67 20 
30c15     64 69 72 65 
30c19     63 74 6F 72 
30c1d     79 3A 20    | 	byte	"Working directory: "
30c20     00          | 	byte	0
30c21                 | LR__5521
30c21                 | 	byte	
30c21     00          | 	byte	0
30c22                 | LR__5522
30c22     2A          | 	byte	"*"
30c23     00          | 	byte	0
30c24                 | LR__5523
30c24                 | 	byte	
30c24     00          | 	byte	0
30c25                 | LR__5524
30c25     5B 64 69 72 
30c29     5D 20       | 	byte	"[dir] "
30c2b     00          | 	byte	0
30c2c                 | LR__5525
30c2c     4D 6F 72 65 
30c30     20 74 68 61 
30c34     6E 20 31 32 
30c38     38 20 65 6E 
30c3c     74 72 69 65 
30c40     73 20 66 6F 
30c44     75 6E 64 3A 
30c48     20 63 6C 65 
30c4c     61 6E 20 79 
30c50     6F 75 72 20 
30c54     64 69 72 65 
30c58     63 74 6F 72 
30c5c     79          | 	byte	"More than 128 entries found: clean your directory"
30c5d     00          | 	byte	0
30c5e                 | LR__5526
30c5e     2A          | 	byte	"*"
30c5f     00          | 	byte	0
30c60                 | LR__5527
30c60                 | 	byte	
30c60     00          | 	byte	0
30c61                 | LR__5528
30c61     4D 6F 72 65 
30c65     20 74 68 61 
30c69     6E 20 31 32 
30c6d     38 20 65 6E 
30c71     74 72 69 65 
30c75     73 20 66 6F 
30c79     75 6E 64 3A 
30c7d     20 63 6C 65 
30c81     61 6E 20 79 
30c85     6F 75 72 20 
30c89     64 69 72 65 
30c8d     63 74 6F 72 
30c91     79          | 	byte	"More than 128 entries found: clean your directory"
30c92     00          | 	byte	0
30c93                 | LR__5529
30c93     2F          | 	byte	"/"
30c94     00          | 	byte	0
30c95                 | LR__5530
30c95     2F 73 64 2F 
30c99     62 69 6E 2F | 	byte	"/sd/bin/"
30c9d     00          | 	byte	0
30c9e                 | LR__5531
30c9e     53 79 73 74 
30ca2     65 6D 20 65 
30ca6     72 72 6F 72 
30caa     20          | 	byte	"System error "
30cab     00          | 	byte	0
30cac                 | LR__5532
30cac     3A 20       | 	byte	": "
30cae     00          | 	byte	0
30caf                 | LR__5533
30caf                 | 	byte	
30caf     00          | 	byte	0
30cb0                 | LR__5534
30cb0     45 78 70 65 
30cb4     63 74 65 64 
30cb8     20 6E 75 6D 
30cbc     62 65 72 2C 
30cc0     20 67 6F 74 
30cc4     20 73 6F 6D 
30cc8     65 74 68 69 
30ccc     6E 67 20 65 
30cd0     6C 73 65 2E | 	byte	"Expected number, got something else."
30cd4     00          | 	byte	0
30cd5                 | LR__5535
30cd5     43 61 6E 6E 
30cd9     6F 74 20 61 
30cdd     64 64 20 61 
30ce1     20 6E 75 6D 
30ce5     62 65 72 20 
30ce9     74 6F 20 61 
30ced     20 73 74 72 
30cf1     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30cf5     00          | 	byte	0
30cf6                 | LR__5536
30cf6     43 61 6E 6E 
30cfa     6F 74 20 73 
30cfe     75 62 73 74 
30d02     72 61 63 74 
30d06     20 73 74 72 
30d0a     69 6E 67 73 
30d0e     2E          | 	byte	"Cannot substract strings."
30d0f     00          | 	byte	0
30d10                 | LR__5537
30d10     55 6E 6B 6E 
30d14     6F 77 6E 20 
30d18     65 72 72 6F 
30d1c     72 20 77 68 
30d20     69 6C 65 20 
30d24     61 64 64 69 
30d28     6E 67 2E    | 	byte	"Unknown error while adding."
30d2b     00          | 	byte	0
30d2c                 | LR__5538
30d2c     55 6E 6B 6E 
30d30     6F 77 6E 20 
30d34     65 72 72 6F 
30d38     72 20 77 68 
30d3c     69 6C 65 20 
30d40     73 75 62 73 
30d44     74 72 61 63 
30d48     74 69 6E 67 
30d4c     2E          | 	byte	"Unknown error while substracting."
30d4d     00          | 	byte	0
30d4e                 | LR__5539
30d4e     43 61 6E 6E 
30d52     6F 74 20 64 
30d56     6F 20 6C 6F 
30d5a     67 69 63 20 
30d5e     6F 70 65 72 
30d62     61 74 69 6F 
30d66     6E 20 6F 6E 
30d6a     20 73 74 72 
30d6e     69 6E 67 20 
30d72     6F 72 20 66 
30d76     6C 6F 61 74 
30d7a     2E          | 	byte	"Cannot do logic operation on string or float."
30d7b     00          | 	byte	0
30d7c                 | LR__5540
30d7c     55 6E 6B 6E 
30d80     6F 77 6E 20 
30d84     65 72 72 6F 
30d88     72 20 77 68 
30d8c     69 6C 65 20 
30d90     64 6F 69 6E 
30d94     67 20 6C 6F 
30d98     67 69 63 20 
30d9c     6F 70 65 72 
30da0     61 74 69 6F 
30da4     6E 2E       | 	byte	"Unknown error while doing logic operation."
30da6     00          | 	byte	0
30da7                 | LR__5541
30da7     43 61 6E 6E 
30dab     6F 74 20 6D 
30daf     75 6C 74 69 
30db3     70 6C 79 20 
30db7     73 74 72 69 
30dbb     6E 67 73 2E | 	byte	"Cannot multiply strings."
30dbf     00          | 	byte	0
30dc0                 | LR__5542
30dc0     55 6E 6B 6E 
30dc4     6F 77 6E 20 
30dc8     65 72 72 6F 
30dcc     72 20 77 68 
30dd0     69 6C 65 20 
30dd4     6D 75 6C 74 
30dd8     69 70 6C 79 
30ddc     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30de0     00          | 	byte	0
30de1                 | LR__5543
30de1     43 61 6E 6E 
30de5     6F 74 20 64 
30de9     69 76 69 64 
30ded     65 20 73 74 
30df1     72 69 6E 67 
30df5     73 2E       | 	byte	"Cannot divide strings."
30df7     00          | 	byte	0
30df8                 | LR__5544
30df8     55 6E 6B 6E 
30dfc     6F 77 6E 20 
30e00     65 72 72 6F 
30e04     72 20 77 68 
30e08     69 6C 65 20 
30e0c     64 69 76 69 
30e10     64 69 6E 67 
30e14     2E          | 	byte	"Unknown error while dividing."
30e15     00          | 	byte	0
30e16                 | LR__5545
30e16     43 61 6E 6E 
30e1a     6F 74 20 63 
30e1e     6F 6D 70 75 
30e22     74 65 20 61 
30e26     20 70 6F 77 
30e2a     65 72 20 6F 
30e2e     66 20 61 20 
30e32     73 74 72 69 
30e36     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30e39     00          | 	byte	0
30e3a                 | LR__5546
30e3a     55 6E 6B 6E 
30e3e     6F 77 6E 20 
30e42     65 72 72 6F 
30e46     72 20 77 68 
30e4a     69 6C 65 20 
30e4e     63 6F 6D 70 
30e52     75 74 69 6E 
30e56     67 20 61 20 
30e5a     70 6F 77 65 
30e5e     72 2E       | 	byte	"Unknown error while computing a power."
30e60     00          | 	byte	0
30e61                 | LR__5547
30e61     52 69 67 68 
30e65     74 20 70 61 
30e69     72 65 6E 74 
30e6d     68 65 73 69 
30e71     73 20 65 78 
30e75     70 65 63 74 
30e79     65 64 2E    | 	byte	"Right parenthesis expected."
30e7c     00          | 	byte	0
30e7d                 | LR__5548
30e7d     45 78 70 65 
30e81     63 74 65 64 
30e85     20 73 74 72 
30e89     69 6E 67 2E | 	byte	"Expected string."
30e8d     00          | 	byte	0
30e8e                 | LR__5549
30e8e     45 78 70 65 
30e92     63 74 65 64 
30e96     20 66 6C 6F 
30e9a     61 74 2E    | 	byte	"Expected float."
30e9d     00          | 	byte	0
30e9e                 | LR__5550
30e9e     45 78 70 65 
30ea2     63 74 65 64 
30ea6     20 75 6E 73 
30eaa     69 67 6E 65 
30eae     64 20 69 6E 
30eb2     74 65 67 65 
30eb6     72 2E       | 	byte	"Expected unsigned integer."
30eb8     00          | 	byte	0
30eb9                 | LR__5551
30eb9     45 78 70 65 
30ebd     63 74 65 64 
30ec1     20 69 6E 74 
30ec5     65 67 65 72 
30ec9     2E          | 	byte	"Expected integer."
30eca     00          | 	byte	0
30ecb                 | LR__5552
30ecb     4E 6F 20 6D 
30ecf     6F 72 65 20 
30ed3     76 61 72 69 
30ed7     61 62 6C 65 
30edb     20 73 6C 6F 
30edf     74 73 2E    | 	byte	"No more variable slots."
30ee2     00          | 	byte	0
30ee3                 | LR__5553
30ee3     56 61 72 69 
30ee7     61 62 6C 65 
30eeb     20 6E 6F 74 
30eef     20 66 6F 75 
30ef3     6E 64 2E    | 	byte	"Variable not found."
30ef6     00          | 	byte	0
30ef7                 | LR__5554
30ef7     43 6F 6D 6D 
30efb     61 20 65 78 
30eff     70 65 63 74 
30f03     65 64 2E    | 	byte	"Comma expected."
30f06     00          | 	byte	0
30f07                 | LR__5555
30f07     43 6F 6D 6D 
30f0b     61 20 6F 72 
30f0f     20 73 65 6D 
30f13     69 63 6F 6C 
30f17     6F 6E 20 65 
30f1b     78 70 65 63 
30f1f     74 65 64 2E | 	byte	"Comma or semicolon expected."
30f23     00          | 	byte	0
30f24                 | LR__5556
30f24     55 6E 6B 6E 
30f28     6F 77 6E 20 
30f2c     63 6F 6D 6D 
30f30     61 6E 64 2E | 	byte	"Unknown command."
30f34     00          | 	byte	0
30f35                 | LR__5557
30f35     53 74 61 63 
30f39     6B 20 75 6E 
30f3d     64 65 72 66 
30f41     6C 6F 77 2E | 	byte	"Stack underflow."
30f45     00          | 	byte	0
30f46                 | LR__5558
30f46     43 61 6E 6E 
30f4a     6F 74 20 65 
30f4e     78 65 63 75 
30f52     74 65 20 67 
30f56     6F 74 6F 20 
30f5a     6F 72 20 67 
30f5e     6F 73 75 62 
30f62     20 69 6E 20 
30f66     74 68 65 20 
30f6a     69 6D 6D 65 
30f6e     64 69 61 74 
30f72     65 20 6D 6F 
30f76     64 65 2E    | 	byte	"Cannot execute goto or gosub in the immediate mode."
30f79     00          | 	byte	0
30f7a                 | LR__5559
30f7a     43 61 6E 6E 
30f7e     6F 74 20 6C 
30f82     6F 61 64 20 
30f86     66 72 6F 6D 
30f8a     20 74 68 69 
30f8e     73 20 66 69 
30f92     6C 65 2E    | 	byte	"Cannot load from this file."
30f95     00          | 	byte	0
30f96                 | LR__5560
30f96     54 68 65 20 
30f9a     70 72 6F 67 
30f9e     72 61 6D 20 
30fa2     69 73 20 65 
30fa6     6D 70 74 79 
30faa     2E          | 	byte	"The program is empty."
30fab     00          | 	byte	0
30fac                 | LR__5561
30fac     49 66 20 61 
30fb0     66 74 65 72 
30fb4     20 69 66 2E | 	byte	"If after if."
30fb8     00          | 	byte	0
30fb9                 | LR__5562
30fb9     45 6D 70 74 
30fbd     79 20 65 78 
30fc1     70 72 65 73 
30fc5     73 69 6F 6E 
30fc9     2E          | 	byte	"Empty expression."
30fca     00          | 	byte	0
30fcb                 | LR__5563
30fcb     53 74 72 69 
30fcf     6E 67 20 65 
30fd3     78 70 65 63 
30fd7     74 65 64 2E | 	byte	"String expected."
30fdb     00          | 	byte	0
30fdc                 | LR__5564
30fdc     49 6E 74 65 
30fe0     72 70 72 65 
30fe4     74 65 72 20 
30fe8     69 6E 74 65 
30fec     72 6E 61 6C 
30ff0     20 65 72 72 
30ff4     6F 72 2E    | 	byte	"Interpreter internal error."
30ff7     00          | 	byte	0
30ff8                 | LR__5565
30ff8     45 78 70 65 
30ffc     63 74 65 64 
31000     20 61 73 73 
31004     69 67 6E 2E | 	byte	"Expected assign."
31008     00          | 	byte	0
31009                 | LR__5566
31009     45 78 70 65 
3100d     63 74 65 64 
31011     20 27 74 6F 
31015     27 2E       | 	byte	"Expected 'to'."
31017     00          | 	byte	0
31018                 | LR__5567
31018     45 78 70 65 
3101c     63 74 65 64 
31020     20 69 6E 74 
31024     65 67 65 72 
31028     20 76 61 72 
3102c     69 61 62 6C 
31030     65 2E       | 	byte	"Expected integer variable."
31032     00          | 	byte	0
31033                 | LR__5568
31033     55 6E 69 6E 
31037     69 74 69 61 
3103b     6C 69 7A 65 
3103f     64 20 76 61 
31043     72 69 61 62 
31047     6C 65 20 69 
3104b     6E 20 27 6E 
3104f     65 78 74 27 
31053     2C 20 75 73 
31057     65 20 27 66 
3105b     6F 72 27 20 
3105f     62 65 66 6F 
31063     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
31066     00          | 	byte	0
31067                 | LR__5569
31067     4E 6F 20 6D 
3106b     6F 72 65 20 
3106f     73 6C 6F 74 
31073     73 20 66 6F 
31077     72 20 27 66 
3107b     6F 72 27 2E | 	byte	"No more slots for 'for'."
3107f     00          | 	byte	0
31080                 | LR__5570
31080     27 4E 65 78 
31084     74 27 20 64 
31088     6F 65 73 6E 
3108c     27 74 20 6D 
31090     61 74 63 68 
31094     20 27 66 6F 
31098     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
3109b     00          | 	byte	0
3109c                 | LR__5571
3109c     27 47 6F 74 
310a0     6F 27 20 74 
310a4     61 72 67 65 
310a8     74 20 6C 69 
310ac     6E 65 20 6E 
310b0     6F 74 20 66 
310b4     6F 75 6E 64 
310b8     2E          | 	byte	"'Goto' target line not found."
310b9     00          | 	byte	0
310ba                 | LR__5572
310ba     42 61 64 20 
310be     6E 75 6D 62 
310c2     65 72 20 6F 
310c6     66 20 70 61 
310ca     72 61 6D 65 
310ce     74 65 72 73 | 	byte	"Bad number of parameters"
310d2     00          | 	byte	0
310d3                 | LR__5573
310d3     46 75 6E 63 
310d7     74 69 6F 6E 
310db     20 75 6E 64 
310df     65 66 69 6E 
310e3     65 64 20 66 
310e7     6F 72 20 73 
310eb     74 72 69 6E 
310ef     67 73       | 	byte	"Function undefined for strings"
310f1     00          | 	byte	0
310f2                 | LR__5574
310f2     42 61 64 20 
310f6     70 61 72 61 
310fa     6D 65 74 65 
310fe     72 2E       | 	byte	"Bad parameter."
31100     00          | 	byte	0
31101                 | LR__5575
31101     43 61 6E 6E 
31105     6F 74 20 64 
31109     65 63 6C 61 
3110d     72 65 20 61 
31111     6E 20 61 72 
31115     72 61 79 3A 
31119     20 74 68 65 
3111d     20 76 61 72 
31121     69 61 62 6C 
31125     65 20 65 78 
31129     69 73 74 73 
3112d     2E          | 	byte	"Cannot declare an array: the variable exists."
3112e     00          | 	byte	0
3112f                 | LR__5576
3112f     45 78 70 65 
31133     63 74 65 64 
31137     20 27 28 27 
3113b     2E          | 	byte	"Expected '('."
3113c     00          | 	byte	0
3113d                 | LR__5577
3113d     45 78 70 65 
31141     63 74 65 64 
31145     20 27 29 27 
31149     20 6F 72 20 
3114d     27 2C 27 2E | 	byte	"Expected ')' or ','."
31151     00          | 	byte	0
31152                 | LR__5578
31152     4E 6F 20 6D 
31156     6F 72 65 20 
3115a     74 68 61 6E 
3115e     20 33 20 64 
31162     69 6D 65 6E 
31166     73 69 6F 6E 
3116a     73 20 73 75 
3116e     70 70 6F 72 
31172     74 65 64    | 	byte	"No more than 3 dimensions supported"
31175     00          | 	byte	0
31176                 | LR__5579
31176     56 61 72 69 
3117a     61 62 6C 65 
3117e     20 6E 61 6D 
31182     65 20 65 78 
31186     70 65 63 74 
3118a     65 64       | 	byte	"Variable name expected"
3118c     00          | 	byte	0
3118d                 | LR__5580
3118d     54 79 70 65 
31191     20 6E 61 6D 
31195     65 20 65 78 
31199     70 65 63 74 
3119d     65 64       | 	byte	"Type name expected"
3119f     00          | 	byte	0
311a0                 | LR__5581
311a0     54 79 70 65 
311a4     20 6E 6F 74 
311a8     20 73 75 70 
311ac     70 6F 72 74 
311b0     65 64 20 79 
311b4     65 74       | 	byte	"Type not supported yet"
311b6     00          | 	byte	0
311b7                 | LR__5582
311b7     41 72 72 61 
311bb     79 20 69 6E 
311bf     64 65 78 20 
311c3     6F 75 74 20 
311c7     6F 66 20 72 
311cb     61 6E 67 65 | 	byte	"Array index out of range"
311cf     00          | 	byte	0
311d0                 | LR__5583
311d0     42 61 64 20 
311d4     74 79 70 65 
311d8     20 77 68 69 
311dc     6C 65 20 61 
311e0     73 73 69 67 
311e4     6E 69 6E 67 
311e8     20 74 6F 20 
311ec     61 72 72 61 
311f0     79          | 	byte	"Bad type while assigning to array"
311f1     00          | 	byte	0
311f2                 | LR__5584
311f2     54 6F 6F 20 
311f6     6D 61 6E 79 
311fa     20 76 61 72 
311fe     69 61 62 6C 
31202     65 73       | 	byte	"Too many variables"
31204     00          | 	byte	0
31205                 | LR__5585
31205     27 54 68 65 
31209     6E 27 20 65 
3120d     78 70 65 63 
31211     74 65 64    | 	byte	"'Then' expected"
31214     00          | 	byte	0
31215                 | LR__5586
31215     45 72 72 6F 
31219     72 20       | 	byte	"Error "
3121b     00          | 	byte	0
3121c                 | LR__5587
3121c     3A 20       | 	byte	": "
3121e     00          | 	byte	0
3121f                 | LR__5588
3121f     2F 73 64    | 	byte	"/sd"
31222     00          | 	byte	0
31223                 | LR__5589
31223     2F 73 64 2F 
31227     62 61 73    | 	byte	"/sd/bas"
3122a     00          | 	byte	0
3122b                 | LR__5590
3122b     2F 73 64 2F 
3122f     62 61 73    | 	byte	"/sd/bas"
31232     00          | 	byte	0
31233                 | LR__5591
31233     20 42 41 53 
31237     49 43 20 62 
3123b     79 74 65 73 
3123f     20 66 72 65 
31243     65          | 	byte	" BASIC bytes free"
31244     00          | 	byte	0
31245                 | LR__5592
31245     52 65 61 64 
31249     79          | 	byte	"Ready"
3124a     00          | 	byte	0
3124b                 | LR__5593
3124b     6E 6F 6E 61 
3124f     6D 65 2E 62 
31253     61 73       | 	byte	"noname.bas"
31255     00          | 	byte	0
31256                 | LR__5594
31256                 | 	byte	
31256     00          | 	byte	0
31257     00          | 	alignl
31258                 | _dat_
31258     00 00 00 00 
3125c     00 00 00 00 
31260     00 00 00 00 
31264     00 00 00 00 | 	byte	$00[16]
31268     61 41 17 0E 
3126c     62 42 00 00 
31270     63 43 19 10 
31274     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
31278     65 45 18 0F 
3127c     66 46 00 00 
31280     67 47 00 00 
31284     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
31288     69 49 00 00 
3128c     6A 4A 00 00 
31290     6B 4B 00 00 
31294     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
31298     6D 4D 00 00 
3129c     6E 4E 1A 11 
312a0     6F 4F 1E 15 
312a4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
312a8     71 51 00 00 
312ac     72 52 00 00 
312b0     73 53 1B 12 
312b4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
312b8     75 55 00 00 
312bc     76 56 00 00 
312c0     77 57 00 00 
312c4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
312c8     79 59 00 00 
312cc     7A 5A 1D 14 
312d0     31 21 04 00 
312d4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
312d8     33 23 06 00 
312dc     34 24 07 00 
312e0     35 25 08 00 
312e4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
312e8     37 26 0A 00 
312ec     38 2A 0B 00 
312f0     39 28 0C 00 
312f4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
312f8     8D 8D 00 00 
312fc     9B 9B 00 00 
31300     88 88 00 00 
31304     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
31308     20 20 00 00 
3130c     2D 5F 00 00 
31310     3D 2B 00 00 
31314     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
31318     5D 7D 00 00 
3131c     5C 7C 00 00 
31320     23 7E 00 00 
31324     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
31328     27 22 00 00 
3132c     60 7E 03 00 
31330     2C 3C 00 00 
31334     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
31338     2F 3F 00 00 
3133c     B9 B9 00 00 
31340     BA 00 00 00 
31344     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
31348     BC 00 00 00 
3134c     BD 00 00 00 
31350     BE 00 00 00 
31354     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
31358     C0 00 00 00 
3135c     C1 00 00 00 
31360     C2 00 00 00 
31364     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
31368     C4 00 00 00 
3136c     C5 00 00 00 
31370     C6 00 00 00 
31374     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
31378     C8 00 00 00 
3137c     C9 00 00 00 
31380     CA 00 00 00 
31384     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
31388     7F 7F 00 00 
3138c     CC 00 00 00 
31390     CD 00 00 00 
31394     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
31398     CF 00 00 00 
3139c     D0 00 00 00 
313a0     D1 00 00 00 
313a4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
313a8     2F 2F 00 00 
313ac     2A 2A 00 00 
313b0     2D 2D 00 00 
313b4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
313b8     8D 8D 00 00 
313bc     31 31 00 00 
313c0     32 32 00 00 
313c4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
313c8     34 34 00 00 
313cc     35 35 00 00 
313d0     36 36 00 00 
313d4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
313d8     38 38 00 00 
313dc     39 39 00 00 
313e0     30 30 00 00 
313e4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
313e8     5C 7C 00 00 
313ec     00 00 00 00 
313f0     00 00 00 00 
313f4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
313f8     00 00 00 00 
      ...             
31450     00 00 00 00 
31454     00 00 00 00 | 	byte	$00[96]
31458     2B 00 A6 F2 
3145c     24 A7 09 80 
31460     5B 88 4D 89 
31464     80 88 A5 88 | atari_spl file "atari.spl"
31468     6D 88 B8 88 
3146c     80 88 CB 88 
31470     92 88 A5 88 
31474     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
31478     A5 88 CA 88 
3147c     A6 88 DD 88 
31480     B8 88 AB 89 
31484     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
31488     C8 AD C6 F1 
3148c     91 06 B6 FF 
31490     13 00 4A 00 
31494     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
31498     5D 00 5E 00 
3149c     5D 00 5E 00 
314a0     5E 00 5D 00 
314a4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
314a8     38 00 83 00 
314ac     25 00 83 00 
314b0     C3 FE D1 04 
314b4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
314b8     48 88 38 85 
314bc     41 8A CB 88 
314c0     28 89 B8 88 
314c4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
314c8     15 89 03 89 
314cc     02 89 15 89 
314d0     16 89 15 89 
314d4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
314d8     15 89 3A 89 
314dc     72 89 E3 89 
314e0     52 83 AD 97 
314e4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
314e8     0C 02 B6 FF 
314ec     E1 00 A8 00 
314f0     F3 00 A8 00 
314f4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
314f8     CE 00 CD 00 
314fc     CD 00 BA 00 
31500     E1 00 BB 00 
31504     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
31508     DF 00 C9 FF 
3150c     E6 01 B6 06 
31510     EE DD 8D 98 
31514     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
31518     97 89 73 89 
3151c     3B 89 60 89 
31520     60 89 60 89 
31524     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
31528     73 89 72 89 
3152c     85 89 73 89 
31530     AA 89 60 89 
31534     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
31538     E8 8A 18 86 
3153c     92 88 A5 C2 
31540     E0 00 C3 05 
31544     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
31548     F2 00 64 01 
3154c     06 01 3E 01 
31550     2B 01 2B 01 
31554     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
31558     2B 01 2A 01 
3155c     2B 01 2B 01 
31560     2B 01 18 01 
31564     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
31568     39 07 61 F3 
3156c     C0 AF 37 85 
31570     0F 88 8B 8A 
31574     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
31578     AB 89 D0 89 
3157c     AB 89 D0 89 
31580     D0 89 CF 89 
31584     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
31588     D0 89 F5 89 
3158c     BD 89 08 8A 
31590     CF 89 E8 8A 
31594     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
31598     53 B3 0D F8 
3159c     F4 07 38 00 
315a0     63 01 63 01 
315a4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
315a8     88 01 88 01 
315ac     76 01 88 01 
315b0     88 01 89 01 
315b4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
315b8     75 01 AE 01 
315bc     76 01 88 01 
315c0     4A 00 46 06 
315c4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
315c8     08 8A 9A 86 
315cc     33 8B 08 8A 
315d0     2D 8A F5 89 
315d4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
315d8     2D 8A 2D 8A 
315dc     2E 8A 1B 8A 
315e0     40 8A 2D 8A 
315e4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
315e8     2E 8A 79 8A 
315ec     66 8A C8 8B 
315f0     72 82 2B 97 
315f4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
315f8     1D 02 05 01 
315fc     F8 01 C0 01 
31600     0B 02 C0 01 
31604     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
31608     F9 01 D3 01 
3160c     F8 01 D3 01 
31610     F8 01 D2 01 
31614     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
31618     E6 01 2B 01 
3161c     8E 02 5F 07 
31620     F7 E2 ED 9C 
31624     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
31628     E8 8A 78 8A 
3162c     78 8A 65 8A 
31630     8B 8A 78 8A 
31634     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
31638     8B 8A 9D 8A 
3163c     9D 8A 8B 8A 
31640     C2 8A 78 8A 
31644     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
31648     70 8C 18 86 
3164c     8B 8A 23 C9 
31650     CB 03 C4 05 
31654     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
31658     0B 02 7B 02 
3165c     1E 02 55 02 
31660     30 02 43 02 
31664     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
31668     43 02 44 02 
3166c     43 02 30 02 
31670     68 02 31 02 
31674     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
31678     07 08 3F F7 
3167c     73 B2 13 85 
31680     15 89 ED 8B 
31684     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
31688     B0 8A FB 8A 
3168c     D5 8A FA 8A 
31690     E8 8A FB 8A 
31694     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
31698     E8 8A 21 8B 
3169c     E7 8A 33 8B 
316a0     E8 8A 26 8C 
316a4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
316a8     8D B0 27 F6 
316ac     9C 08 AD 01 
316b0     7B 02 8D 02 
316b4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
316b8     A1 02 A0 02 
316bc     A1 02 A0 02 
316c0     A0 02 A0 02 
316c4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
316c8     7B 02 D8 02 
316cc     7B 02 C6 02 
316d0     3E 01 C3 05 
316d4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
316d8     00 8C 2A 86 
316dc     E0 8C FA 8A 
316e0     6A 8B FB 8A 
316e4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
316e8     45 8B 45 8B 
316ec     45 8B 6B 8B 
316f0     46 8B 59 8B 
316f4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
316f8     6B 8B 6B 8B 
316fc     6B 8B 6B 8B 
31700     7D 8B 7D 8B 
31704     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
31708     90 8B 91 8B 
3170c     90 8B 90 8B 
31710     A3 8B A3 8B 
31714     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
31718     B5 8B B6 8B 
3171c     B5 8B B5 8B 
31720     B6 8B C8 8B 
31724     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
31728     C8 8B DA 8B 
3172c     DB 8B DB 8B 
31730     DB 8B DC 8B 
31734     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
31738     EE 8B EE 8B 
3173c     00 8C 01 8C 
31740     00 8C 01 8C 
31744     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
31748     12 8C 13 8C 
3174c     13 8C 26 8C 
31750     26 8C 26 8C 
31754     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
31758     38 8C 38 8C 
3175c     38 8C 38 8C 
31760     4B 8C 4B 8C 
31764     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
31768     5E 8C 5E 8C 
3176c     5E 8C 5E 8C 
31770     70 8C 70 8C 
31774     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
31778     70 8C 83 8C 
3177c     83 8C 83 8C 
31780     83 8C 96 8C 
31784     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
31788     95 8C A9 8C 
3178c     A9 8C A8 8C 
31790     A8 8C A8 8C 
31794     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
31798     BB 8C BB 8C 
3179c     BB 8C CE 8C 
317a0     CE 8C CE 8C 
317a4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
317a8     E0 8C E1 8C 
317ac     E1 8C E0 8C 
317b0     F4 8C F2 8C 
317b4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
317b8     05 8D 05 8D 
317bc     06 8D 06 8D 
317c0     19 8D 19 8D 
317c4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
317c8     18 8D 2B 8D 
317cc     2B 8D 2B 8D 
317d0     2A 8D 3E 8D 
317d4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
317d8     3E 8D 51 8D 
317dc     50 8D 50 8D 
317e0     50 8D 51 8D 
317e4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
317e8     63 8D 64 8D 
317ec     76 8D 75 8D 
317f0     75 8D 76 8D 
317f4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
317f8     88 8D 88 8D 
317fc     89 8D 9B 8D 
31800     9A 8D 9B 8D 
31804     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
31808     AD 8D AE 8D 
3180c     AD 8D AE 8D 
31810     C1 8D C1 8D 
31814     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
31818     D3 8D D3 8D 
3181c     D3 8D D3 8D 
31820     D3 8D E6 8D 
31824     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
31828     E6 8D E6 8D 
3182c     F9 8D F9 8D 
31830     F9 8D F8 8D 
31834     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
31838     0B 8E 0B 8E 
3183c     1D 8E 1D 8E 
31840     1E 8E 1E 8E 
31844     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
31848     31 8E 31 8E 
3184c     31 8E 42 8E 
31850     43 8E 43 8E 
31854     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
31858     56 8E 56 8E 
3185c     55 8E 56 8E 
31860     68 8E 69 8E 
31864     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
31868     69 8E 7B 8E 
3186c     7C 8E 7B 8E 
31870     7B 8E 8D 8E 
31874     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
31878     8D 8E A1 8E 
3187c     A0 8E A1 8E 
31880     A1 8E A0 8E 
31884     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
31888     B3 8E B3 8E 
3188c     C6 8E C5 8E 
31890     C6 8E C6 8E 
31894     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
31898     D8 8E D9 8E 
3189c     D8 8E EC 8E 
318a0     EB 8E EC 8E 
318a4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
318a8     FE 8E FE 8E 
318ac     FE 8E FE 8E 
318b0     10 8F 10 8F 
318b4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
318b8     11 8F 23 8F 
318bc     24 8F 23 8F 
318c0     24 8F 37 8F 
318c4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
318c8     36 8F 36 8F 
318cc     48 8F 49 8F 
318d0     49 8F 49 8F 
318d4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
318d8     5B 8F 5C 8F 
318dc     5B 8F 6E 8F 
318e0     6E 8F 6E 8F 
318e4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
318e8     81 8F 81 8F 
318ec     81 8F 81 8F 
318f0     93 8F 93 8F 
318f4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
318f8     93 8F A6 8F 
318fc     A6 8F A6 8F 
31900     A6 8F B9 8F 
31904     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
31908     B9 8F B9 8F 
3190c     CC 8F CB 8F 
31910     CB 8F CC 8F 
31914     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
31918     DF 8F DE 8F 
3191c     DE 8F F1 8F 
31920     F1 8F F1 8F 
31924     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
31928     03 90 04 90 
3192c     04 90 04 90 
31930     16 90 17 90 
31934     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
31938     29 90 28 90 
3193c     29 90 28 90 
31940     29 90 3C 90 
31944     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
31948     3C 90 4F 90 
3194c     4E 90 4E 90 
31950     4E 90 4E 90 
31954     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
31958     61 90 61 90 
3195c     73 90 74 90 
31960     74 90 74 90 
31964     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
31968     87 90 86 90 
3196c     87 90 86 90 
31970     99 90 99 90 
31974     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
31978     AB 90 AB 90 
3197c     AC 90 AB 90 
31980     AB 90 BF 90 
31984     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
31988     BE 90 D1 90 
3198c     D0 90 D1 90 
31990     D1 90 D1 90 
31994     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
31998     E3 90 E4 90 
3199c     F6 90 F6 90 
319a0     F6 90 F6 90 
319a4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
319a8     09 91 0A 91 
319ac     0A 91 1C 91 
319b0     1C 91 1C 91 
319b4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
319b8     2F 91 2E 91 
319bc     2F 91 2F 91 
319c0     2E 91 41 91 
319c4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
319c8     41 91 53 91 
319cc     54 91 54 91 
319d0     53 91 54 91 
319d4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
319d8     67 91 67 91 
319dc     79 91 7A 91 
319e0     79 91 78 91 
319e4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
319e8     8C 91 8B 91 
319ec     8C 91 8C 91 
319f0     9E 91 9E 91 
319f4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
319f8     B1 91 B1 91 
319fc     B2 91 B1 91 
31a00     B1 91 C4 91 
31a04     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
31a08     C4 91 D6 91 
31a0c     D7 91 D7 91 
31a10     D7 91 D6 91 
31a14     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
31a18     EA 91 EA 91 
31a1c     EA 91 FC 91 
31a20     FC 91 FB 91 
31a24     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
31a28     0E 92 0F 92 
31a2c     0F 92 0E 92 
31a30     21 92 21 92 
31a34     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
31a38     21 92 34 92 
31a3c     33 92 34 92 
31a40     34 92 47 92 
31a44     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
31a48     46 92 47 92 
31a4c     59 92 59 92 
31a50     59 92 59 92 
31a54     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
31a58     6C 92 6C 92 
31a5c     6B 92 7E 92 
31a60     7E 92 7E 92 
31a64     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
31a68     92 92 91 92 
31a6c     91 92 90 92 
31a70     91 92 A4 92 
31a74     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
31a78     A3 92 B6 92 
31a7c     B6 92 B7 92 
31a80     B7 92 B6 92 
31a84     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
31a88     CA 92 C9 92 
31a8c     CA 92 DC 92 
31a90     DC 92 DC 92 
31a94     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
31a98     EF 92 EF 92 
31a9c     EF 92 EF 92 
31aa0     01 93 01 93 
31aa4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
31aa8     15 93 14 93 
31aac     14 93 14 93 
31ab0     14 93 27 93 
31ab4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
31ab8     27 93 39 93 
31abc     3A 93 39 93 
31ac0     39 93 39 93 
31ac4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
31ac8     4B 93 4C 93 
31acc     5F 93 5F 93 
31ad0     5F 93 5E 93 
31ad4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
31ad8     5F 93 84 93 
31adc     4C 93 96 93 
31ae0     5F 93 AE 94 
31ae4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
31ae8     7B C1 00 00 
31aec     00 00 00 00 
31af0     00 00 00 00 
31af4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31af8     00 00 00 00 | 	byte	$00, $00, $00, $00
31afc     00 00 00 00 | zero long 0
31b00     7A D7 00 80 
31b04     87 8A 48 8F 
31b08     EC 8C 76 8D 
31b0c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31b10     3C 8D 82 8D 
31b14     42 8D 88 8D 
31b18     8C 8D 8E 8D 
31b1c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31b20     97 8D DE 8D 
31b24     E1 8D F1 8E 
31b28     D8 8C A3 83 
31b2c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
31b30     65 71 C9 65 
31b34     FC 64 C4 65 
31b38     C1 65 BF 65 
31b3c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31b40     B6 65 B4 65 
31b44     B2 65 AE 65 
31b48     AC 65 ED 65 
31b4c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31b50     5E 65 25 66 
31b54     FA 62 23 6B 
31b58     B5 6C 61 0A 
31b5c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
31b60     5D 90 BE 8D 
31b64     47 8E C3 8D 
31b68     09 8E C9 8D 
31b6c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
31b70     15 8E 19 8E 
31b74     1B 8E 62 8E 
31b78     64 8E 68 8E 
31b7c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
31b80     B5 8E 4C 90 
31b84     FA 84 3C 9D 
31b88     98 13 79 6D 
31b8c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31b90     D9 66 50 66 
31b94     D4 66 4B 66 
31b98     8C 66 46 66 
31b9c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31ba0     81 66 3A 66 
31ba4     7C 66 36 66 
31ba8     76 66 30 66 
31bac     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31bb0     6B 66 88 72 
31bb4     BF 37 E7 B7 
31bb8     75 83 8B 8E 
31bbc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31bc0     94 8E 96 8E 
31bc4     DD 8E 9C 8E 
31bc8     E2 8E A2 8E 
31bcc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31bd0     EE 8E AE 8E 
31bd4     38 8F B5 8E 
31bd8     3F 8F FD 8E 
31bdc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31be0     A5 87 1E E3 
31be4     6D 5D FA 71 
31be8     41 64 25 67 
31bec     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31bf0     D9 66 1A 67 
31bf4     18 67 15 67 
31bf8     12 67 0F 67 
31bfc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31c00     07 67 C0 66 
31c04     01 67 BC 66 
31c08     B8 66 DE 64 
31c0c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31c10     43 E5 1F 8B 
31c14     14 8A F1 90 
31c18     1C 8F 63 8F 
31c1c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31c20     29 8F 6E 8F 
31c24     72 8F 75 8F 
31c28     34 8F BE 8F 
31c2c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31c30     84 8F 87 8F 
31c34     CC 8F 56 90 
31c38     67 91 49 80 
31c3c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31c40     46 77 A6 66 
31c44     E8 66 B0 67 
31c48     AD 67 ED 67 
31c4c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31c50     A2 67 E3 67 
31c54     9D 67 9A 67 
31c58     98 67 94 67 
31c5c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31c60     49 67 CD 67 
31c64     28 65 5F 6E 
31c68     82 67 3A 01 
31c6c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31c70     C2 91 A9 8F 
31c74     EF 8F AE 8F 
31c78     F4 8F B5 8F 
31c7c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31c80     01 90 03 90 
31c84     07 90 09 90 
31c88     0C 90 53 90 
31c8c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31c90     18 90 44 93 
31c94     85 84 D6 9D 
31c98     87 1F 2F 75 
31c9c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31ca0     C4 68 F6 67 
31ca4     BE 68 F1 67 
31ca8     76 68 2E 68 
31cac     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31cb0     27 68 24 68 
31cb4     64 68 1E 68 
31cb8     5F 68 19 68 
31cbc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31cc0     DC 68 56 72 
31cc4     7E 36 C2 B8 
31cc8     D7 84 73 90 
31ccc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31cd0     7B 90 7F 90 
31cd4     82 90 84 90 
31cd8     CB 90 8B 90 
31cdc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31ce0     D7 90 96 90 
31ce4     20 91 59 90 
31ce8     25 91 A2 90 
31cec     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31cf0     D0 89 40 EE 
31cf4     12 64 C4 71 
31cf8     29 66 0C 69 
31cfc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31d00     C0 68 02 69 
31d04     FE 68 FB 68 
31d08     F9 68 F6 68 
31d0c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31d10     EE 68 A8 68 
31d14     2C 69 5F 68 
31d18     E2 68 81 66 
31d1c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31d20     1E EB A6 8A 
31d24     73 8B 5E 93 
31d28     7B 90 48 91 
31d2c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31d30     0D 91 11 91 
31d34     14 91 16 91 
31d38     5C 91 1C 91 
31d3c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31d40     68 91 AF 91 
31d44     2A 91 B5 91 
31d48     75 91 1A 94 
31d4c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31d50     70 0E CB 6C 
31d54     5D 6E C4 67 
31d58     99 69 54 69 
31d5c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31d60     D2 69 49 69 
31d64     89 69 86 69 
31d68     40 69 C4 69 
31d6c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31d70     35 69 76 69 
31d74     58 67 EB 6D 
31d78     E9 6D 89 0F 
31d7c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31d80     33 94 94 91 
31d84     D9 91 56 91 
31d88     E0 91 9F 91 
31d8c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31d90     EC 91 EE 91 
31d94     F1 91 F4 91 
31d98     F7 91 3D 92 
31d9c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31da0     46 92 21 94 
31da4     11 89 A4 9D 
31da8     FD 0E 8F 6C 
31dac     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31db0     28 6A E1 69 
31db4     65 6A 1F 6A 
31db8     5F 6A 1A 6A 
31dbc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31dc0     54 6A 0F 6A 
31dc4     4F 6A 09 6A 
31dc8     06 6A 03 6A 
31dcc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31dd0     23 68 69 77 
31dd4     3A 4D 38 CA 
31dd8     38 86 4E 91 
31ddc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31de0     64 92 24 92 
31de4     6A 92 2A 92 
31de8     70 92 30 92 
31dec     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31df0     7B 92 7E 92 
31df4     C5 92 84 92 
31df8     CB 92 8A 92 
31dfc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31e00     4D 8D F9 E2 
31e04     97 59 FE 74 
31e08     DB 68 6D 6A 
31e0c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31e10     A8 6A A5 6A 
31e14     A3 6A 9F 6A 
31e18     9D 6A 9B 6A 
31e1c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31e20     D6 6A 8F 6A 
31e24     CF 6A 46 6A 
31e28     CA 6A E1 67 
31e2c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31e30     D3 F7 15 92 
31e34     90 8C BF 94 
31e38     A6 92 EB 92 
31e3c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31e40     B1 92 F7 92 
31e44     FA 92 FD 92 
31e48     00 93 02 93 
31e4c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31e50     4F 93 52 93 
31e54     54 93 22 94 
31e58     5A 93 8F 88 
31e5c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31e60     1C 77 07 6C 
31e64     E8 69 7A 6B 
31e68     34 6B 75 6B 
31e6c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31e70     29 6B 26 6B 
31e74     24 6B 21 6B 
31e78     1D 6B 5E 6B 
31e7c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31e80     12 6B 52 6B 
31e84     34 69 34 6E 
31e88     BA 73 A4 24 
31e8c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31e90     7A 94 B3 93 
31e94     72 93 31 93 
31e98     78 93 7A 93 
31e9c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31ea0     83 93 86 93 
31ea4     89 93 D0 93 
31ea8     D2 93 D5 93 
31eac     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31eb0     DD 93 40 96 
31eb4     30 8B 99 9C 
31eb8     52 10 94 71 
31ebc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31ec0     46 6C 79 6B 
31ec4     40 6C B7 6B 
31ec8     F7 6B B1 6B 
31ecc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31ed0     EC 6B A5 6B 
31ed4     A2 6B 9F 6B 
31ed8     9D 6B 9A 6B 
31edc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31ee0     C8 6A E4 76 
31ee4     20 4B F9 CE 
31ee8     2E 8A 1A 92 
31eec     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31ef0     FB 93 BA 93 
31ef4     01 94 03 94 
31ef8     4A 94 09 94 
31efc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31f00     55 94 14 94 
31f04     9E 94 1A 94 
31f08     61 94 20 94 
31f0c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31f10     3E 87 E5 CD 
31f14     5F 50 6C 78 
31f18     B5 6A 04 6C 
31f1c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31f20     83 6C 7F 6C 
31f24     7C 6C 36 6C 
31f28     76 6C 74 6C 
31f2c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31f30     6B 6C 25 6C 
31f34     66 6C 1F 6C 
31f38     1D 6C 41 6A 
31f3c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31f40     BA FA FC 94 
31f44     5B 8D 97 96 
31f48     3B 94 C5 94 
31f4c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31f50     89 94 8C 94 
31f54     8F 94 92 94 
31f58     94 94 DB 94 
31f5c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31f60     E4 94 E7 94 
31f64     2D 95 74 95 
31f68     C8 96 15 89 
31f6c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31f70     CB 75 31 6F 
31f74     7E 6B 10 6D 
31f78     C9 6C 0A 6D 
31f7c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31f80     BD 6C FF 6C 
31f84     FB 6C F9 6C 
31f88     B2 6C F3 6C 
31f8c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31f90     A7 6C E8 6C 
31f94     0D 6B 85 6F 
31f98     C7 74 10 28 
31f9c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31fa0     96 96 47 95 
31fa4     06 95 0A 95 
31fa8     0C 95 0F 95 
31fac     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31fb0     17 95 5E 95 
31fb4     61 95 63 95 
31fb8     22 95 AC 95 
31fbc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31fc0     72 95 17 98 
31fc4     59 8E 01 96 
31fc8     CF FC 5A 68 
31fcc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31fd0     96 6D 50 6D 
31fd4     D5 6D 4A 6D 
31fd8     8C 6D 89 6D 
31fdc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31fe0     80 6D 3A 6D 
31fe4     7A 6D 77 6D 
31fe8     75 6D 71 6D 
31fec     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31ff0     18 6C BC 78 
31ff4     9A 4F 7E CF 
31ff8     1F 89 F1 93 
31ffc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
32000     D2 95 4E 95 
32004     D7 95 53 95 
32008     DD 95 E0 95 
3200c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
32010     A5 95 EB 95 
32014     EE 95 F0 95 
32018     37 96 B3 95 
3201c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
32020     1A 98 D5 8D 
32024     C5 9F CD 0F 
32028     0F 71 F3 73 
3202c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
32030     D9 6D 5E 6E 
32034     D3 6D 58 6E 
32038     12 6E 0F 6E 
3203c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
32040     49 6E BF 6D 
32044     87 6E 76 6D 
32048     81 6E 11 6B 
3204c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
32050     3F 09 44 95 
32054     E5 8D 3F 99 
32058     D4 95 A2 96 
3205c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
32060     23 96 69 96 
32064     6B 96 6E 96 
32068     71 96 74 96 
3206c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
32070     BF 96 3C 96 
32074     C6 96 C8 96 
32078     A3 98 51 8D 
3207c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
32080     CF 75 29 73 
32084     90 6C EC 6E 
32088     62 6E E7 6E 
3208c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
32090     9A 6E 98 6E 
32094     95 6E 91 6E 
32098     8E 6E CF 6E 
3209c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
320a0     40 6E C3 6E 
320a4     E8 6C 45 6F 
320a8     A5 7B C9 35 
320ac     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
320b0     2D 98 23 97 
320b4     E1 96 A0 96 
320b8     A4 96 EA 96 
320bc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
320c0     AF 96 F4 96 
320c4     F8 96 3E 97 
320c8     FD 96 43 97 
320cc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
320d0     08 97 6B 99 
320d4     D6 92 88 91 
320d8     D8 EE 84 66 
320dc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
320e0     2E 6F E7 6E 
320e4     6C 6F 24 6F 
320e8     21 6F 1F 6F 
320ec     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
320f0     17 6F 13 6F 
320f4     54 6F 0E 6F 
320f8     0B 6F 4B 6F 
320fc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
32100     27 6D 1C 7B 
32104     19 59 9F DB 
32108     66 8E BC 94 
3210c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
32110     67 97 26 97 
32114     6D 97 2B 97 
32118     72 97 32 97 
3211c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
32120     C1 97 7F 97 
32124     C6 97 85 97 
32128     CB 97 CE 97 
3212c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
32130     EC 8A C4 C6 
32134     68 4C F4 7D 
32138     63 6E E8 6E 
3213c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
32140     ED 6F A7 6F 
32144     E7 6F A0 6F 
32148     E1 6F 9B 6F 
3214c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
32150     D5 6F 8F 6F 
32154     CE 6F 45 6F 
32158     86 6F 68 6D 
3215c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
32160     C0 13 AD A2 
32164     A7 8E 79 99 
32168     E6 97 E8 97 
3216c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
32170     F1 97 F3 97 
32174     F6 97 F9 97 
32178     FB 97 FE 97 
3217c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
32180     4A 98 0A 98 
32184     93 98 0F 98 
32188     7F 9B BF 8C 
3218c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
32190     91 7B 62 73 
32194     1A 6E B9 70 
32198     EB 6F B3 70 
3219c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
321a0     25 70 20 70 
321a4     1E 70 1B 70 
321a8     18 70 15 70 
321ac     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
321b0     0D 70 09 70 
321b4     07 70 03 70 
321b8     01 70 FD 6F 
321bc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
321c0     F6 6F F2 6F 
321c4     EF 6F EC 6F 
321c8     2C 70 E6 6F 
321cc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
321d0     DD 6F 97 6F 
321d4     D7 6F 84 6E 
321d8     8F 6F 3F 7D 
321dc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
321de     00 00 00 00 | zero1 long 0
321e2     FF FF FF FF 
321e6     FF FF       | atarist_spl file "atarist.spl" '512
321e8     00 00 00 00 
321ec     00 00 00 00 
321f0     00 00       | 	byte	$00[10]
321f2     17 7F F2 7F 
321f6     B2 7F 72 7F 
321fa     33 7F F4 7E 
321fe     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
32202     36 7E F5 7D 
32206     E9 51 F2 0D 
3220a     8E 00 F3 FD 
3220e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
32212     57 FD 58 FD 
32216     5B FD 5C FD 
3221a     5C FD 60 7D 
3221e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
32222     D6 7C 98 7C 
32226     59 7C 1A 7C 
3222a     DC 7B 9E 7B 
3222e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
32232     F3 05 00 FD 
32236     41 FB EA FA 
3223a     D9 FA DB FA 
3223e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
32242     E4 FA 9B 36 
32246     F8 7A C0 7A 
3224a     84 7A 45 7A 
3224e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
32252     8E 79 51 79 
32256     15 79 D7 78 
3225a     3C 1F EB FF 
3225e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
32262     6D F8 65 F8 
32266     68 F8 6D F8 
3226a     70 F8 74 F8 
3226e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
32272     AB 60 79 60 
32276     4B 60 1A 60 
3227a     E9 5F B9 5F 
3227e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
32282     FB 59 B2 0B 
32286     92 FA 3A F7 
3228a     96 F6 79 F6 
3228e     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
32292     82 F6 86 F6 
32296     8C F6 DB 5D 
3229a     F1 5E C1 5E 
3229e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
322a2     34 5E 04 5E 
322a6     D6 5D A6 5D 
322aa     78 5D D4 3E 
322ae     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
322b2     27 F5 BA F4 
322b6     AB F4 AD F4 
322ba     B2 F4 B8 F4 
322be     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
322c2     26 5D 2B 5D 
322c6     FC 5C CD 5C 
322ca     9F 5C 70 5C 
322ce     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
322d2     E5 5B B8 5B 
322d6     DB 24 A7 FC 
322da     D1 F4 4D F3 
322de     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
322e2     04 F3 0B F3 
322e6     11 F3 16 F3 
322ea     DE 18 98 5B 
322ee     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
322f2     4E 4A 29 48 
322f6     A0 47 6A 47 
322fa     43 47 20 47 
322fe     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
32302     E2 F6 98 F2 
32306     C5 F1 A3 F1 
3230a     A3 F1 A8 F1 
3230e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
32312     BF F1 00 3D 
32316     EF 46 CD 46 
3231a     AA 46 86 46 
3231e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
32322     1C 46 F9 45 
32326     D7 45 EE 43 
3232a     DE 02 E8 F3 
3232e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
32332     61 F0 65 F0 
32336     6D F0 74 F0 
3233a     7C F0 84 F0 
3233e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
32342     8E 45 6D 45 
32346     49 45 27 45 
3234a     05 45 E1 44 
3234e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
32352     F1 2F A9 FB 
32356     8B F1 9B EF 
3235a     40 EF 36 EF 
3235e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
32362     4D EF 56 EF 
32366     5E EF 7B 44 
3236a     8C 44 69 44 
3236e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
32372     03 44 E1 43 
32376     C0 43 F5 37 
3237a     69 33 0F 11 
3237e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
32382     66 EE 37 EE 
32386     38 EE 40 EE 
3238a     48 EE 51 EE 
3238e     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
32392     7D 32 6A 32 
32396     51 32 37 32 
3239a     1F 32 05 32 
3239e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
323a2     B9 31 A1 31 
323a6     F1 04 F4 F1 
323aa     50 EE A0 ED 
323ae     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
323b2     93 ED 9A ED 
323b6     A4 ED AD ED 
323ba     F4 27 C1 31 
323be     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
323c2     78 31 5F 31 
323c6     46 31 2E 31 
323ca     15 31 FC 30 
323ce     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
323d2     C4 EF 4A ED 
323d6     DC EC CB EC 
323da     D2 EC DA EC 
323de     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
323e2     F9 EC 64 2F 
323e6     0A 31 F1 30 
323ea     D9 30 C0 30 
323ee     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
323f2     78 30 5F 30 
323f6     46 30 38 23 
323fa     A6 F6 19 EE 
323fe     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
32402     20 EC 28 EC 
32406     32 EC 3C EC 
3240a     47 EC 51 EC 
3240e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
32412     A3 22 93 22 
32416     7F 22 6E 22 
3241a     5D 22 4C 22 
3241e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
32422     77 09 76 F1 
32426     CC EC F0 EB 
3242a     CD EB CE EB 
3242e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
32432     ED EB F5 EB 
32436     3E F6 6B 22 
3243a     5F 22 4E 22 
3243e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
32442     1B 22 0B 22 
32446     FA 21 E9 21 
3244a     D8 21 4D FF 
3244e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
32452     92 EB 7B EB 
32456     82 EB 8C EB 
3245a     97 EB A1 EB 
3245e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
32462     15 22 04 22 
32466     F3 21 E3 21 
3246a     D2 21 C0 21 
3246e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
32472     8E 21 7D 21 
32476     9A F8 A4 ED 
3247a     8E EB 2F EB 
3247e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
32482     37 EB 42 EB 
32486     4C EB 57 EB 
3248a     B2 17 22 19 
3248e     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
32492     FD 18 EF 18 
32496     E3 18 D6 18 
3249a     CA 18 BD 18 
3249e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
324a2     60 EC 35 EB 
324a6     01 EB 01 EB 
324aa     0C EB 16 EB 
324ae     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
324b2     34 EB D0 18 
324b6     00 19 F4 18 
324ba     E8 18 DA 18 
324be     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
324c2     B6 18 A9 18 
324c6     9D 18 91 05 
324ca     F0 EF CA EB 
324ce     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
324d2     E8 EA F2 EA 
324d6     FE EA 07 EB 
324da     12 EB C2 EF 
324de     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
324e2     D9 18 CD 18 
324e6     C0 18 B3 18 
324ea     A7 18 9B 18 
324ee     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
324f2     B8 FC 30 EE 
324f6     61 EB DC EA 
324fa     CD EA D2 EA 
324fe     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
32502     F3 EA FE EA 
32506     D2 09 D1 18 
3250a     C3 18 17 18 
3250e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
32512     66 11 52 11 
32516     49 11 41 11 
3251a     38 11 E0 F4 
3251e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
32522     C9 EA C5 EA 
32526     CF EA DB EA 
3252a     E6 EA EF EA 
3252e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
32532     89 11 80 11 
32536     78 11 6E 11 
3253a     67 11 5D 11 
3253e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
32542     43 11 32 0D 
32546     9C F1 07 EC 
3254a     F8 EA CD EA 
3254e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
32552     E4 EA ED EA 
32556     F8 EA 02 EB 
3255a     55 11 91 11 
3255e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
32562     75 11 6E 11 
32566     64 11 5E 11 
3256a     54 11 4A 11 
3256e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
32572     A8 EB F1 EA 
32576     D9 EA DC EA 
3257a     E8 EA F1 EA 
3257e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
32582     A6 EB 9E 11 
32586     A0 11 96 11 
3258a     8D 11 85 11 
3258e     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
32592     6A 11 CA 0D 
32596     36 0B 57 F8 
3259a     6C ED 57 EB 
3259e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
325a2     F4 EA FF EA 
325a6     09 EB 15 EB 
325aa     1E EB 1A FD 
325ae     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
325b2     ED 0A E8 0A 
325b6     E2 0A DC 0A 
325ba     D6 0A D1 0A 
325be     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
325c2     F8 F3 BC EC 
325c6     57 EB 1E EB 
325ca     18 EB 24 EB 
325ce     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
325d2     42 EB 4D EB 
325d6     08 09 20 0B 
325da     1A 0B 14 0B 
325de     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
325e2     04 0B FE 0A 
325e6     F9 0A F2 0A 
325ea     84 08 3A F1 
325ee     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
325f2     42 EB 42 EB 
325f6     4E EB 57 EB 
325fa     62 EB 6B EB 
325fe     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
32602     48 0B 43 0B 
32606     3C 0B 36 0B 
3260a     31 0B 2C 0B 
3260e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
32612     1B 0B 5C 00 
32616     6A EF 1B EC 
3261a     81 EB 6A EB 
3261e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
32622     85 EB 8E EB 
32626     99 EB A3 EB 
3262a     DD 05 E5 05 
3262e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
32632     DB 05 D8 05 
32636     D5 05 D1 05 
3263a     D0 05 CB 05 
3263e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
32642     0C EC BB EB 
32646     B3 EB BB EB 
3264a     C5 EB D0 EB 
3264e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
32652     E4 F7 2C 06 
32656     28 06 24 06 
3265a     22 06 1F 06 
3265e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
32662     16 06 14 06 
32666     0F 06 D0 F3 
3266a     65 ED 2D EC 
3266e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
32672     01 EC 0A EC 
32676     14 EC 1E EC 
3267a     29 EC FB 03 
3267e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
32682     63 06 60 06 
32686     5E 06 59 06 
3268a     58 06 54 06 
3268e     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
32692     69 F1 21 ED 
32696     55 EC 33 EC 
3269a     36 EC 40 EC 
3269e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
326a2     5C EC 68 EC 
326a6     92 02 D9 02 
326aa     D7 02 D7 02 
326ae     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
326b2     D1 02 D1 02 
326b6     CE 02 CD 02 
326ba     5D FC 80 EF 
326be     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
326c2     83 EC 8A EC 
326c6     93 EC 9C EC 
326ca     A5 EC B1 EC 
326ce     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
326d2     2B 03 2A 03 
326d6     29 03 26 03 
326da     25 03 24 03 
326de     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
326e2     1F 03 70 F7 
326e6     D0 EE 27 ED 
326ea     DB EC D4 EC 
326ee     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
326f2     F0 EC FA EC 
326f6     02 ED F9 F4 
326fa     7B 03 7C 03 
326fe     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
32702     75 03 73 03 
32706     72 03 70 03 
3270a     6D 03 6C 03 
3270e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
32712     54 ED 22 ED 
32716     22 ED 2C ED 
3271a     35 ED 3F ED 
3271e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
32722     14 01 C3 03 
32726     C1 03 C0 03 
3272a     5F 01 A5 00 
3272e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
32732     7B 00 7C 00 
32736     20 00 85 F1 
3273a     2A EE 89 ED 
3273e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
32742     80 ED 87 ED 
32746     90 ED 9A ED 
3274a     A3 ED 73 00 
3274e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
32752     D0 00 D0 00 
32756     D0 00 D0 00 
3275a     D0 00 CF 00 
3275e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
32762     80 F0 3D EE 
32766     D5 ED C7 ED 
3276a     CD ED D6 ED 
3276e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
32772     F2 ED FA ED 
32776     1D 01 29 01 
3277a     27 01 27 01 
3277e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
32782     25 01 26 01 
32786     26 01 23 01 
3278a     D0 F7 EC EF 
3278e     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
32792     1C EE 24 EE 
32796     2D EE 37 EE 
3279a     40 EE 47 EE 
3279e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
327a2     7D 01 7B 01 
327a6     7A 01 7A 01 
327aa     79 01 78 01 
327ae     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
327b2     84 FE DE F3 
327b6     6C EF 93 EE 
327ba     72 EE 72 EE 
327be     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
327c2     8B EE 95 EE 
327c6     9E EE 15 FC 
327ca     67 FE 67 FE 
327ce     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
327d2     6B FE 6B FE 
327d6     6D FE 6D FE 
327da     6D FE 6F FE 
327de     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
327e2     DF EE CC EE 
327e6     CF EE D9 EE 
327ea     E1 EE EA EE 
327ee     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
327f2     5A FE C4 FE 
327f6     C3 FE C5 FE 
327fa     C6 FE C6 FE 
327fe     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
32802     C8 FE C7 FE 
32806     DA FB 85 F1 
3280a     8D EF 31 EF 
3280e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
32812     34 EF 3E EF 
32816     46 EF 4F EF 
3281a     57 EF 0D FF 
3281e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
32822     1F FF 1F FF 
32826     21 FF 21 FF 
3282a     21 FF 21 FF 
3282e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
32832     15 F1 BE EF 
32836     84 EF 7E EF 
3283a     88 EF 8F EF 
3283e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
32842     A9 EF 06 F2 
32846     A6 FC AB FC 
3284a     AD FC AE FC 
3284e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
32852     B2 FC B4 FC 
32856     B6 FC B7 FC 
3285a     8B F4 BD F0 
3285e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
32862     E4 EF EE EF 
32866     F6 EF FD EF 
3286a     04 F0 0E F0 
3286e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
32872     0B FD 0D FD 
32876     0F FD 11 FD 
3287a     11 FD 13 FD 
3287e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
32882     17 FD 64 F3 
32886     CD F0 52 F0 
3288a     41 F0 45 F0 
3288e     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
32892     5B F0 64 F0 
32896     6D F0 FB FC 
3289a     65 FD 68 FD 
3289e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
328a2     6C FD 6D FD 
328a6     6F FD 70 FD 
328aa     72 FD B3 FB 
328ae     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
328b2     A4 F0 99 F0 
328b6     A0 F0 A8 F0 
328ba     AE F0 B9 F0 
328be     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
328c2     CB FB DD FB 
328c6     DE FB E0 FB 
328ca     E3 FB E3 FB 
328ce     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
328d2     E9 FB EC FB 
328d6     62 F7 27 F2 
328da     2A F1 FF F0 
328de     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
328e2     0C F1 13 F1 
328e6     1B F1 23 F1 
328ea     33 F2 3C FC 
328ee     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
328f2     42 FC 45 FC 
328f6     47 FC 48 FC 
328fa     4A FC 4C FC 
328fe     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
32902     20 F2 77 F1 
32906     5C F1 5F F1 
3290a     64 F1 6C F1 
3290e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
32912     83 F1 DC F8 
32916     9A FC 9A FC 
3291a     9B FC 9E FC 
3291e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
32922     A3 FC A4 FC 
32926     A6 FC A9 FC 
3292a     90 F4 33 F2 
3292e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
32932     BA F1 BF F1 
32936     C7 F1 CE F1 
3293a     D6 F1 DC F1 
3293e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
32942     F3 FC F5 FC 
32946     FE FB 79 FB 
3294a     62 FB 5F FB 
3294e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
32952     6F FA AF F3 
32956     53 F2 12 F2 
3295a     0F F2 15 F2 
3295e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
32962     2A F2 32 F2 
32966     38 F2 9A FB 
3296a     AF FB B1 FB 
3296e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32972     B7 FB B8 FB 
32976     BA FB BC FB 
3297a     C1 FB 3B F8 
3297e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
32982     6E F2 6C F2 
32986     74 F2 7A F2 
3298a     81 F2 87 F2 
3298e     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
32992     06 FC 09 FC 
32996     0C FC 0E FC 
3299a     0F FC 12 FC 
3299e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
329a2     17 FC 1A FC 
329a6     B2 F6 7B F3 
329aa     DD F2 C5 F2 
329ae     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
329b2     D4 F2 DB F2 
329b6     E0 F2 E8 F2 
329ba     28 F8 60 FC 
329be     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
329c2     64 FC 66 FC 
329c6     68 FC 6A FC 
329ca     6D FC 52 FC 
329ce     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
329d2     78 F3 24 F3 
329d6     1A F3 1E F3 
329da     24 F3 2A F3 
329de     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
329e2     3D F3 80 FA 
329e6     0C FB 0F FB 
329ea     10 FB 14 FB 
329ee     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
329f2     1B FB 1D FB 
329f6     1F FB 92 FA 
329fa     DE F4 AE F3 
329fe     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
32a02     79 F3 7E F3 
32a06     84 F3 8C F3 
32a0a     92 F3 97 F3 
32a0e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
32a12     67 FB 69 FB 
32a16     6B FB 6F FB 
32a1a     71 FB 72 FB 
32a1e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
32a22     E3 F8 BA F4 
32a26     EE F3 CC F3 
32a2a     CA F3 CF F3 
32a2e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
32a32     E2 F3 E8 F3 
32a36     ED F3 B7 FB 
32a3a     BC FB BE FB 
32a3e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
32a42     C4 FB C6 FB 
32a46     C8 FB C9 FB 
32a4a     CC FB 8F F7 
32a4e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
32a52     1E F4 1E F4 
32a56     24 F4 2A F4 
32a5a     30 F4 38 F4 
32a5e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
32a62     AD FA B1 FA 
32a66     B4 FA B6 FA 
32a6a     BA FA BB FA 
32a6e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
32a72     C2 FA C6 FA 
32a76     55 F6 C6 F4 
32a7a     7D F4 72 F4 
32a7e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
32a82     83 F4 89 F4 
32a86     8F F4 94 F4 
32a8a     66 FA 03 FB 
32a8e     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
32a92     0A FB 0E FB 
32a96     10 FB 11 FB 
32a9a     16 FB 18 FB 
32a9e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
32aa2     F9 F4 CA F4 
32aa6     C5 F4 CB F4 
32aaa     D1 F4 D7 F4 
32aae     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
32ab2     E8 F4 3F FB 
32ab6     56 FB 58 FB 
32aba     5A FB 5E FB 
32abe     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
32ac2     64 FB 64 FB 
32ac6     69 FB 99 F9 
32aca     E9 F5 33 F5 
32ace     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
32ad2     1D F5 22 F5 
32ad6     27 F5 2E F5 
32ada     32 F5 37 F5 
32ade     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
32ae2     BC FA BC FA 
32ae6     C1 FA C2 FA 
32aea     C4 FA C8 FA 
32aee     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
32af2     F9 F7 DB F5 
32af6     78 F5 69 F5 
32afa     6A F5 70 F5 
32afe     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
32b02     7F F5 85 F5 
32b06     6E F7 06 FB 
32b0a     0A FB 0B FB 
32b0e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
32b12     14 FB 15 FB 
32b16     18 FB 1B FB 
32b1a     1D FB 70 F7 
32b1e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
32b22     B6 F5 BB F5 
32b26     C0 F5 C6 F5 
32b2a     CA F5 CF F5 
32b2e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
32b32     54 FB 56 FB 
32b36     5A FB 5B FB 
32b3a     5E FB 5F FB 
32b3e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
32b42     67 FB 52 FB 
32b46     29 F7 33 F6 
32b4a     06 F6 02 F6 
32b4e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
32b52     10 F6 16 F6 
32b56     1A F6 1F F6 
32b5a     81 FB 9F FB 
32b5e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
32b62     51 FB F2 FA 
32b66     E3 FA E3 FA 
32b6a     E5 FA E9 FA 
32b6e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
32b72     64 F6 4D F6 
32b76     4D F6 53 F6 
32b7a     57 F6 5C F6 
32b7e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
32b82     6A F6 19 FB 
32b86     1E FB 22 FB 
32b8a     23 FB 24 FB 
32b8e     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32b92     2C FB 2E FB 
32b96     32 FB F0 F8 
32b9a     01 F7 A5 F6 
32b9e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32ba2     9F F6 A3 F6 
32ba6     A6 F6 AC F6 
32baa     B0 F6 EB F7 
32bae     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32bb2     68 FB 6C FB 
32bb6     6E FB 71 FB 
32bba     72 FB 74 FB 
32bbe     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32bc2     71 F8 21 F7 
32bc6     E5 F6 DD F6 
32bca     E1 F6 E6 F6 
32bce     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32bd2     F5 F6 F7 F6 
32bd6     F7 FA AB FB 
32bda     AD FB AF FB 
32bde     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32be2     B6 FB B9 FB 
32be6     BB FB BC FB 
32bea     21 FB 07 F8 
32bee     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32bf2     22 F7 26 F7 
32bf6     2B F7 2E F7 
32bfa     34 F7 38 F7 
32bfe     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32c02     13 FB 16 FB 
32c06     17 FB 1B FB 
32c0a     1E FB 20 FB 
32c0e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
32c12     26 FB 77 FA 
32c16     F3 F7 7C F7 
32c1a     67 F7 6A F7 
32c1e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
32c22     74 F7 7A F7 
32c26     7E F7 82 F7 
32c2a     53 FB 5A FB 
32c2e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
32c32     5F FB 63 FB 
32c36     65 FB 67 FB 
32c3a     69 FB 6A FB 
32c3e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32c42     B5 F7 A9 F7 
32c46     AD F7 B0 F7 
32c4a     B5 F7 B8 F7 
32c4e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32c52     6E F8 99 FB 
32c56     9C FB 9D FB 
32c5a     9F FB A4 FB 
32c5e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32c62     A9 FB AB FB 
32c66     AD FB 46 F9 
32c6a     26 F8 F0 F7 
32c6e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32c72     F4 F7 F8 F7 
32c76     FB F7 FF F7 
32c7a     03 F8 65 FA 
32c7e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32c82     2B FB 2F FB 
32c86     30 FB 32 FB 
32c8a     34 FB 38 FB 
32c8e     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32c92     E9 F8 4A F8 
32c96     2E F8 2C F8 
32c9a     2F F8 36 F8 
32c9e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32ca2     41 F8 44 F8 
32ca6     4A FB 67 FB 
32caa     68 FB 6B FB 
32cae     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32cb2     73 FB 74 FB 
32cb6     78 FB 7A FB 
32cba     14 FB E7 F8 
32cbe     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32cc2     6D F8 70 F8 
32cc6     73 F8 78 F8 
32cca     7C F8 80 F8 
32cce     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32cd2     A6 FB A7 FB 
32cd6     A9 FB AC FB 
32cda     AF FB B1 FB 
32cde     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32ce2     B7 FB 73 FA 
32ce6     F8 F8 B4 F8 
32cea     A9 F8 AB F8 
32cee     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32cf2     B4 F8 B8 F8 
32cf6     BB F8 FA F8 
32cfa     64 FB 65 FB 
32cfe     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32d02     6D FB 6F FB 
32d06     70 FB 74 FB 
32d0a     77 FB 77 FB 
32d0e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32d12     E9 F8 E4 F8 
32d16     E8 F8 EB F8 
32d1a     EE F8 F2 F8 
32d1e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32d22     B5 FA 9F FB 
32d26     A1 FB A4 FB 
32d2a     A5 FB A9 FB 
32d2e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32d32     AE FB B1 FB 
32d36     B2 FB C7 F9 
32d3a     39 F9 22 F9 
32d3e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32d42     26 F9 2A F9 
32d46     2E F9 32 F9 
32d4a     33 F9 BA FB 
32d4e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32d52     DE FB E1 FB 
32d56     E2 FB E4 FB 
32d5a     E5 FB E7 FB 
32d5e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32d62     C5 F9 67 F9 
32d66     57 F9 56 F9 
32d6a     5B F9 5F F9 
32d6e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32d72     68 F9 6C F9 
32d76     0B FC 11 FC 
32d7a     14 FC 15 FC 
32d7e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32d82     B5 FB B5 FB 
32d86     B6 FB B8 FB 
32d8a     E9 FA C8 F9 
32d8e     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32d92     90 F9 94 F9 
32d96     95 F9 99 F9 
32d9a     9D F9 9F F9 
32d9e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32da2     DE FB DF FB 
32da6     E2 FB E4 FB 
32daa     E6 FB E8 FB 
32dae     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32db2     EF FB AC FA 
32db6     E9 F9 C7 F9 
32dba     C3 F9 C8 F9 
32dbe     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32dc2     D0 F9 D4 F9 
32dc6     D6 F9 0E FB 
32dca     11 FC 13 FC 
32dce     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32dd2     19 FC 1B FC 
32dd6     1D FC 1E FC 
32dda     21 FC 22 FC 
32dde     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32de2     F7 F9 F7 F9 
32de6     FB F9 FE F9 
32dea     00 FA 03 FA 
32dee     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32df2     1B FC 45 FC 
32df6     46 FC 48 FC 
32dfa     4A FC 4B FC 
32dfe     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32e02     52 FC 54 FC 
32e06     F3 FB 82 FA 
32e0a     35 FA 28 FA 
32e0e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32e12     31 FA 32 FA 
32e16     37 FA 37 FA 
32e1a     3C FA 00 FC 
32e1e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32e22     09 FC 0B FC 
32e26     0F FC 12 FC 
32e2a     12 FC 15 FC 
32e2e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32e32     8D FA 60 FA 
32e36     5B FA 5C FA 
32e3a     60 FA 61 FA 
32e3e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32e42     6C FA 6D FA 
32e46     37 FC 3A FC 
32e4a     3B FC 3D FC 
32e4e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32e52     43 FC 44 FC 
32e56     45 FC 47 FC 
32e5a     51 FB AB FA 
32e5e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32e62     8E FA 91 FA 
32e66     93 FA 95 FA 
32e6a     98 FA 9B FA 
32e6e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32e72     68 FC 6A FC 
32e76     6C FC 6E FC 
32e7a     70 FC 72 FC 
32e7e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32e82     76 FC 3B FB 
32e86     D0 FA BB FA 
32e8a     B9 FA BD FA 
32e8e     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32e92     C4 FA C6 FA 
32e96     CA FA 13 FC 
32e9a     3A FC 3A FC 
32e9e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32ea2     41 FC 43 FC 
32ea6     44 FC 47 FC 
32eaa     48 FC 3C FC 
32eae     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32eb2     E6 FA E8 FA 
32eb6     EB FA EE FA 
32eba     F0 FA F2 FA 
32ebe     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32ec2     61 FC 66 FC 
32ec6     68 FC 6B FC 
32eca     6C FC 6E FC 
32ece     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32ed2     73 FC 75 FC 
32ed6     13 FC 3F FB 
32eda     17 FB 12 FB 
32ede     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32ee2     1A FB 1D FB 
32ee6     1F FB 20 FB 
32eea     23 FB 92 FC 
32eee     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32ef2     96 FC 97 FC 
32ef6     9A FC 9C FC 
32efa     9E FC 9F FC 
32efe     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32f02     5A FB 41 FB 
32f06     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32f0a     00 00 00 00 | zero2 long 0
32f0e     01 00 00 00 
32f12     00 00 00 00 
32f16     00 00 00 00 
32f1a     00 00 00 00 | mouse  file "mouse2.def"
32f1e     00 00 00 00 
32f22     00 00 00 00 
32f26     00 00 00 00 
32f2a     00 00 00 00 | 	byte	$00[16]
32f2e     01 01 00 00 
32f32     00 00 00 00 
32f36     00 00 00 00 
32f3a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f3e     00 00 00 00 
32f42     00 00 00 00 
32f46     00 00 00 00 
32f4a     00 00 00 00 | 	byte	$00[16]
32f4e     01 0D 01 00 
32f52     00 00 00 00 
32f56     00 00 00 00 
32f5a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f5e     00 00 00 00 
32f62     00 00 00 00 
32f66     00 00 00 00 
32f6a     00 00 00 00 | 	byte	$00[16]
32f6e     01 0D 0D 01 
32f72     00 00 00 00 
32f76     00 00 00 00 
32f7a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f7e     00 00 00 00 
32f82     00 00 00 00 
32f86     00 00 00 00 
32f8a     00 00 00 00 | 	byte	$00[16]
32f8e     01 0D 0D 0D 
32f92     01 00 00 00 
32f96     00 00 00 00 
32f9a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f9e     00 00 00 00 
32fa2     00 00 00 00 
32fa6     00 00 00 00 
32faa     00 00 00 00 | 	byte	$00[16]
32fae     01 0D 0D 0D 
32fb2     0D 01 00 00 
32fb6     00 00 00 00 
32fba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fbe     00 00 00 00 
32fc2     00 00 00 00 
32fc6     00 00 00 00 
32fca     00 00 00 00 | 	byte	$00[16]
32fce     01 0D 0D 0D 
32fd2     0D 0D 01 00 
32fd6     00 00 00 00 
32fda     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fde     00 00 00 00 
32fe2     00 00 00 00 
32fe6     00 00 00 00 
32fea     00 00 00 00 | 	byte	$00[16]
32fee     01 0D 0D 0D 
32ff2     0D 0D 0D 01 
32ff6     00 00 00 00 
32ffa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32ffe     00 00 00 00 
33002     00 00 00 00 
33006     00 00 00 00 
3300a     00 00 00 00 | 	byte	$00[16]
3300e     01 0D 0D 0D 
33012     0D 0D 0D 0C 
33016     01 00 00 00 
3301a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3301e     00 00 00 00 
33022     00 00 00 00 
33026     00 00 00 00 
3302a     00 00 00 00 | 	byte	$00[16]
3302e     01 0D 0D 0D 
33032     0D 0D 0D 0D 
33036     0C 01 00 00 
3303a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3303e     00 00 00 00 
33042     00 00 00 00 
33046     00 00 00 00 
3304a     00 00 00 00 | 	byte	$00[16]
3304e     01 0D 0D 0D 
33052     0D 0D 0D 0D 
33056     0D 0C 01 00 
3305a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3305e     00 00 00 00 
33062     00 00 00 00 
33066     00 00 00 00 
3306a     00 00 00 00 | 	byte	$00[16]
3306e     01 0D 0D 0D 
33072     0D 0D 0D 0D 
33076     0D 0D 0B 01 
3307a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3307e     00 00 00 00 
33082     00 00 00 00 
33086     00 00 00 00 
3308a     00 00 00 00 | 	byte	$00[16]
3308e     01 0D 0D 0D 
33092     0C 0D 0D 03 
33096     01 01 01 01 
3309a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3309e     00 00 00 00 
330a2     00 00 00 00 
330a6     00 00 00 00 
330aa     00 00 00 00 | 	byte	$00[16]
330ae     01 0D 0D 0C 
330b2     01 09 0D 03 
330b6     00 00 00 00 
330ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
330be     00 00 00 00 
330c2     00 00 00 00 
330c6     00 00 00 00 
330ca     00 00 00 00 | 	byte	$00[16]
330ce     01 0D 0C 01 
330d2     00 01 0D 0B 
330d6     01 00 00 00 
330da     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
330de     00 00 00 00 
330e2     00 00 00 00 
330e6     00 00 00 00 
330ea     00 00 00 00 | 	byte	$00[16]
330ee     01 0C 01 00 
330f2     00 01 0A 0D 
330f6     01 00 00 00 
330fa     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
330fe     00 00 00 00 
33102     00 00 00 00 
33106     00 00 00 00 
3310a     00 00 00 00 | 	byte	$00[16]
3310e     01 01 00 00 
33112     00 00 01 0D 
33116     0B 01 00 00 
3311a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3311e     00 00 00 00 
33122     00 00 00 00 
33126     00 00 00 00 
3312a     00 00 00 00 
3312e     00 00 00 00 
33132     00 00       | 	byte	$00[22]
33134     01 0B 0D 01 
33138     00 00 00 00 
3313c     00 00 00 00 
33140     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33144     00 00 00 00 
33148     00 00 00 00 
3314c     00 00 00 00 
33150     00 00 00 00 
33154     00          | 	byte	$00[17]
33155     01 01 00 00 
33159     00 00 00 00 
3315d     00 00 00 00 
33161     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33165     00 00 00 00 
      ...             
33309     00 00 00 00 
3330d     00          | 	byte	$00[425]
3330e     73 32 00 04 
33312     00 00 10 00 
33316     00 00 00 00 
3331a     00 00 00 00 | atari2 file "atari2.s2"
3331e     43 87 43 87 
33322     43 87 44 87 
33326     43 87 44 87 
3332a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3332e     43 87 43 87 
33332     43 87 44 87 
33336     43 87 43 87 
3333a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3333e     44 87 43 87 
33342     44 87 43 87 
33346     43 87 43 87 
3334a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3334e     43 87 43 87 
33352     44 87 43 87 
33356     44 87 44 87 
3335a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3335e     43 87 43 87 
33362     44 87 43 87 
33366     43 87 42 87 
3336a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3336e     43 87 43 87 
33372     43 87 43 87 
33376     44 87 43 87 
3337a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3337e     44 87 44 87 
33382     43 87 44 87 
33386     43 87 44 87 
3338a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3338e     44 87 43 87 
33392     44 87 44 87 
33396     43 87 43 87 
3339a     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3339e     43 87 44 87 
333a2     44 87 43 87 
333a6     43 87 44 87 
333aa     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
333ae     43 87 43 87 
333b2     43 87 43 87 
333b6     43 87 43 87 
333ba     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
333be     42 87 43 87 
333c2     44 87 42 87 
333c6     43 87 43 87 
333ca     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
333ce     43 87 44 87 
333d2     44 87 43 87 
333d6     43 87 43 87 
333da     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
333de     43 87 5C 87 
333e2     EE 86 AC 87 
333e6     4C 7C A3 78 
333ea     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
333ee     BC 78 BB 78 
333f2     BD 78 BC 78 
333f6     BB 78 BD 78 
333fa     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
333fe     BB 78 BB 78 
33402     BC 78 BC 78 
33406     BC 78 BB 78 
3340a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3340e     BC 78 BC 78 
33412     BC 78 BC 78 
33416     BC 78 BC 78 
3341a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3341e     BB 78 BC 78 
33422     A0 78 4C 7C 
33426     11 7A 29 89 
3342a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3342e     44 87 43 87 
33432     44 87 43 87 
33436     43 87 42 87 
3343a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3343e     43 87 43 87 
33442     44 87 ED 85 
33446     71 85 52 79 
3344a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3344e     BC 78 BC 78 
33452     BC 78 BC 78 
33456     BC 78 BC 78 
3345a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3345e     BC 78 BC 78 
33462     BC 78 A0 78 
33466     CF 7A B9 81 
3346a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3346e     44 87 43 87 
33472     43 87 44 87 
33476     43 87 44 87 
3347a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3347e     43 87 43 87 
33482     43 87 43 87 
33486     44 87 43 87 
3348a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3348e     43 87 43 87 
33492     44 87 43 87 
33496     44 87 43 87 
3349a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3349e     44 87 43 87 
334a2     43 87 43 87 
334a6     5A 87 39 81 
334aa     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
334ae     A5 78 BC 78 
334b2     BB 78 BC 78 
334b6     BB 78 BC 78 
334ba     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
334be     BC 78 BC 78 
334c2     BC 78 BC 78 
334c6     BC 78 8F 79 
334ca     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
334ce     09 85 47 87 
334d2     43 87 43 87 
334d6     42 87 42 87 
334da     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
334de     43 87 43 87 
334e2     43 87 43 87 
334e6     43 87 44 87 
334ea     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
334ee     43 87 43 87 
334f2     44 87 43 87 
334f6     42 87 43 87 
334fa     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
334fe     44 87 43 87 
33502     43 87 43 87 
33506     44 87 44 87 
3350a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3350e     94 78 55 7A 
33512     B9 78 BC 78 
33516     BC 78 BC 78 
3351a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3351e     BC 78 BB 78 
33522     BC 78 BC 78 
33526     BC 78 BC 78 
3352a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3352e     BB 78 BC 78 
33532     BC 78 BC 78 
33536     BB 78 BC 78 
3353a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3353e     BC 78 BC 78 
33542     BD 78 BC 78 
33546     BC 78 BB 78 
3354a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3354e     94 78 B3 84 
33552     36 84 4A 87 
33556     43 87 43 87 
3355a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3355e     43 87 44 87 
33562     43 87 43 87 
33566     43 87 43 87 
3356a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3356e     43 87 44 87 
33572     43 87 44 87 
33576     43 87 43 87 
3357a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3357e     43 87 43 87 
33582     43 87 45 87 
33586     43 87 43 87 
3358a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3358e     43 87 44 87 
33592     44 87 44 87 
33596     43 87 43 87 
3359a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3359e     43 87 42 87 
335a2     43 87 43 87 
335a6     44 87 43 87 
335aa     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
335ae     54 87 3C 82 
335b2     36 83 52 79 
335b6     C6 78 BC 78 
335ba     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
335be     BB 78 BB 78 
335c2     BC 78 BC 78 
335c6     BC 78 BC 78 
335ca     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
335ce     BD 78 ED 78 
335d2     1B 79 F4 83 
335d6     4D 83 4E 87 
335da     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
335de     44 87 43 87 
335e2     42 87 44 87 
335e6     43 87 42 87 
335ea     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
335ee     43 87 54 87 
335f2     26 82 B3 84 
335f6     D6 77 BB 78 
335fa     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
335fe     BC 78 BB 78 
33602     BB 78 BB 78 
33606     BB 78 BB 78 
3360a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3360e     BC 78 BC 78 
33612     26 79 18 75 
33616     36 83 1F 84 
3361a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3361e     43 87 43 87 
33622     43 87 43 87 
33626     43 87 44 87 
3362a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3362e     43 87 44 87 
33632     44 87 43 87 
33636     43 87 43 87 
3363a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3363e     43 87 43 87 
33642     43 87 43 87 
33646     44 87 44 87 
3364a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3364e     44 87 43 87 
33652     43 87 43 87 
33656     43 87 44 87 
3365a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3365e     44 87 44 87 
33662     44 87 43 87 
33666     44 87 43 87 
3366a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3366e     43 87 43 87 
33672     43 87 44 87 
33676     44 87 43 87 
3367a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3367e     43 87 43 87 
33682     43 87 43 87 
33686     43 87 44 87 
3368a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3368e     43 87 44 87 
33692     43 87 44 87 
33696     19 87 7D 86 
3369a     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3369e     B1 78 BC 78 
336a2     BC 78 BC 78 
336a6     BC 78 BC 78 
336aa     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
336ae     BC 78 BC 78 
336b2     BD 78 BC 78 
336b6     B7 78 3B 7B 
336ba     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
336be     96 86 44 87 
336c2     43 87 43 87 
336c6     43 87 43 87 
336ca     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
336ce     44 87 44 87 
336d2     43 87 44 87 
336d6     43 87 44 87 
336da     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
336de     43 87 44 87 
336e2     43 87 44 87 
336e6     43 87 44 87 
336ea     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
336ee     43 87 44 87 
336f2     43 87 43 87 
336f6     44 87 43 87 
336fa     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
336fe     44 87 44 87 
33702     43 87 43 87 
33706     43 87 44 87 
3370a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3370e     43 87 43 87 
33712     43 87 43 87 
33716     44 87 44 87 
3371a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3371e     36 83 CF 7A 
33722     AB 78 BB 78 
33726     BC 78 BC 78 
3372a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3372e     BB 78 BC 78 
33732     BC 78 BC 78 
33736     BC 78 BC 78 
3373a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3373e     BC 78 BC 78 
33742     BC 78 BB 78 
33746     BC 78 BC 78 
3374a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3374e     BB 78 BC 78 
33752     BB 78 BC 78 
33756     BC 78 BD 78 
3375a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3375e     BC 78 BC 78 
33762     BC 78 BC 78 
33766     BC 78 BD 78 
3376a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3376e     BC 78 BB 78 
33772     BC 78 BB 78 
33776     BB 78 BC 78 
3377a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3377e     BC 78 BC 78 
33782     BC 78 BC 78 
33786     BC 78 BB 78 
3378a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3378e     BC 78 BC 78 
33792     BC 78 BD 78 
33796     BB 78 BC 78 
3379a     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3379e     BC 78 BC 78 
337a2     BC 78 BB 78 
337a6     BC 78 BB 78 
337aa     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
337ae     BB 78 BC 78 
337b2     BC 78 BC 78 
337b6     BC 78 BB 78 
337ba     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
337be     BC 78 BC 78 
337c2     BC 78 BB 78 
337c6     BC 78 BB 78 
337ca     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
337ce     BC 78 BC 78 
337d2     BC 78 BC 78 
337d6     BB 78 BC 78 
337da     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
337de     BC 78 9F 78 
337e2     52 79 B3 84 
337e6     2F 86 60 87 
337ea     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
337ee     44 87 43 87 
337f2     43 87 43 87 
337f6     43 87 43 87 
337fa     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
337fe     43 87 43 87 
33802     43 87 44 87 
33806     43 87 43 87 
3380a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3380e     43 87 43 87 
33812     43 87 43 87 
33816     43 87 44 87 
3381a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3381e     44 87 44 87 
33822     5E 87 BC 80 
33826     FB 80 94 78 
3382a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3382e     BD 78 BC 78 
33832     BB 78 BC 78 
33836     BB 78 BB 78 
3383a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3383e     BC 78 BB 78 
33842     BB 78 6B 79 
33846     D6 77 AC 87 
3384a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3384e     43 87 44 87 
33852     43 87 43 87 
33856     44 87 43 87 
3385a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3385e     43 87 44 87 
33862     43 87 5C 87 
33866     E7 80 00 80 
3386a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3386e     BC 78 BD 78 
33872     BC 78 BC 78 
33876     BC 78 BB 78 
3387a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3387e     BC 78 BC 78 
33882     BB 78 BC 78 
33886     BB 78 BC 78 
3388a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3388e     BB 78 BC 78 
33892     BC 78 BC 78 
33896     BC 78 BC 78 
3389a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3389e     BC 78 BC 78 
338a2     BC 78 BC 78 
338a6     A0 78 8D 7B 
338aa     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
338ae     60 87 43 87 
338b2     44 87 44 87 
338b6     43 87 43 87 
338ba     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
338be     44 87 43 87 
338c2     43 87 43 87 
338c6     44 87 73 86 
338ca     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
338ce     51 7B B6 78 
338d2     BC 78 BD 78 
338d6     BC 78 BC 78 
338da     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
338de     BB 78 BC 78 
338e2     BD 78 BB 78 
338e6     BC 78 BB 78 
338ea     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
338ee     BC 78 BC 78 
338f2     BC 78 BC 78 
338f6     BB 78 BC 78 
338fa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
338fe     BC 78 BB 78 
33902     BB 78 BC 78 
33906     BC 78 BB 78 
3390a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3390e     22 8C AF 84 
33912     48 87 43 87 
33916     44 87 43 87 
3391a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3391e     43 87 42 87 
33922     43 87 43 87 
33926     44 87 43 87 
3392a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3392e     43 87 43 87 
33932     44 87 44 87 
33936     43 87 43 87 
3393a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3393e     43 87 43 87 
33942     43 87 43 87 
33946     44 87 43 87 
3394a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3394e     9F 8B D6 77 
33952     16 7C B3 78 
33956     BC 78 BB 78 
3395a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3395e     BB 78 BC 78 
33962     BB 78 BC 78 
33966     BC 78 BC 78 
3396a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3396e     BC 78 BB 78 
33972     BB 78 BC 78 
33976     BB 78 BC 78 
3397a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3397e     BB 78 BB 78 
33982     BC 78 BC 78 
33986     BC 78 BB 78 
3398a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3398e     BC 78 BC 78 
33992     BC 78 BD 78 
33996     BB 78 BC 78 
3399a     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3399e     BC 78 BC 78 
339a2     BC 78 BB 78 
339a6     BC 78 BC 78 
339aa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
339ae     A8 78 54 7E 
339b2     F4 83 17 82 
339b6     50 87 43 87 
339ba     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
339be     44 87 43 87 
339c2     44 87 43 87 
339c6     43 87 44 87 
339ca     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
339ce     43 87 28 87 
339d2     20 85 CF 7A 
339d6     70 7D AD 78 
339da     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
339de     BB 78 BC 78 
339e2     BC 78 BC 78 
339e6     BB 78 BB 78 
339ea     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
339ee     BB 78 B2 78 
339f2     9A 7C CF 7A 
339f6     4A 87 0D 87 
339fa     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
339fe     43 87 44 87 
33a02     43 87 44 87 
33a06     43 87 43 87 
33a0a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33a0e     44 87 43 87 
33a12     28 87 51 85 
33a16     11 7A 1E 7D 
33a1a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33a1e     BC 78 BB 78 
33a22     BC 78 BC 78 
33a26     BC 78 BC 78 
33a2a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33a2e     BB 78 BC 78 
33a32     BB 78 BC 78 
33a36     BC 78 BC 78 
33a3a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33a3e     BB 78 BC 78 
33a42     BC 78 BC 78 
33a46     BD 78 BB 78 
33a4a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33a4e     BC 78 BB 78 
33a52     BC 78 BC 78 
33a56     BC 78 BB 78 
33a5a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a5e     BC 78 BC 78 
33a62     BC 78 BC 78 
33a66     BB 78 BC 78 
33a6a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33a6e     BC 78 BD 78 
33a72     BC 78 BC 78 
33a76     BC 78 BB 78 
33a7a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a7e     BC 78 BB 78 
33a82     BB 78 BC 78 
33a86     BC 78 BB 78 
33a8a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a8e     BB 78 BB 78 
33a92     BB 78 BC 78 
33a96     B6 78 48 7D 
33a9a     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
33a9e     56 87 43 87 
33aa2     42 87 44 87 
33aa6     44 87 43 87 
33aaa     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33aae     43 87 44 87 
33ab2     43 87 44 87 
33ab6     4C 87 7E 83 
33aba     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33abe     F7 78 BC 78 
33ac2     BC 78 BB 78 
33ac6     BB 78 BC 78 
33aca     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33ace     BC 78 BB 78 
33ad2     BC 78 BC 78 
33ad6     BB 78 BC 78 
33ada     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33ade     BB 78 BC 78 
33ae2     BC 78 BC 78 
33ae6     BC 78 BB 78 
33aea     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33aee     BC 78 BC 78 
33af2     BC 78 BC 78 
33af6     BC 78 BB 78 
33afa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33afe     BC 78 BB 78 
33b02     BB 78 BC 78 
33b06     BC 78 BB 78 
33b0a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33b0e     BC 78 BC 78 
33b12     BB 78 BC 78 
33b16     BC 78 BC 78 
33b1a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33b1e     73 32 00 04 
33b22     00 00 10 00 
33b26     00 00 00 00 
33b2a     00 00 00 00 | atari12 file "atari12.s2"
33b2e     00 6D 00 6D 
33b32     00 6D 00 6D 
33b36     00 6D 00 6D 
33b3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b3e     00 6D 00 6D 
33b42     00 6D 00 6D 
33b46     00 6D 00 6D 
33b4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b4e     00 6D 00 6D 
33b52     00 6D 00 6D 
33b56     00 6D 00 6D 
33b5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b5e     00 6D 00 6D 
33b62     00 6D 00 6D 
33b66     00 6D 00 6D 
33b6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b6e     00 6D 00 6D 
33b72     00 6D 00 6D 
33b76     00 6D 00 6D 
33b7a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
33b7e     00 6C 00 6C 
33b82     00 6C 00 6C 
33b86     00 6C 00 6C 
33b8a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b8e     00 6C 00 6C 
33b92     00 6C 00 6C 
33b96     00 6C 00 6C 
33b9a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b9e     00 6C 00 6C 
33ba2     00 6C 00 6C 
33ba6     00 6C 00 6C 
33baa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bae     00 6C 00 6C 
33bb2     00 6C 00 6C 
33bb6     00 6C 00 6C 
33bba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bbe     00 6C 00 6C 
33bc2     00 6C 00 6C 
33bc6     00 6C 00 6C 
33bca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bce     00 6C 00 6C 
33bd2     00 6C 00 6C 
33bd6     00 6C 00 6C 
33bda     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bde     00 6C 00 6C 
33be2     00 6C 00 6C 
33be6     00 6C 00 6C 
33bea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bee     00 6C 00 6C 
33bf2     00 6C 00 6C 
33bf6     00 6C 00 6C 
33bfa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bfe     00 6C 00 6C 
33c02     00 6C 00 6C 
33c06     00 6C 00 6C 
33c0a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33c0e     00 6C 00 6C 
33c12     00 6C 00 6C 
33c16     00 6C 00 6C 
33c1a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33c1e     00 6C 00 6C 
33c22     00 6C 00 6C 
33c26     00 6C 00 6C 
33c2a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33c2e     00 6C 00 6B 
33c32     00 6B 00 6B 
33c36     00 6B 00 6B 
33c3a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c3e     00 6B 00 6B 
33c42     00 6B 00 6B 
33c46     00 6B 00 6B 
33c4a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c4e     00 6B 00 6B 
33c52     00 6B 00 6B 
33c56     00 6B 00 6B 
33c5a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c5e     00 6B 00 6B 
33c62     00 6B 00 6B 
33c66     00 6B 00 6B 
33c6a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c6e     00 6B 00 6B 
33c72     00 6B 00 6B 
33c76     00 6B 00 6B 
33c7a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c7e     00 6B 00 6B 
33c82     00 6B 00 6B 
33c86     00 6B 00 6B 
33c8a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c8e     00 6B 00 6B 
33c92     00 6B 00 6B 
33c96     00 6B 00 6B 
33c9a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c9e     00 6B 00 6B 
33ca2     00 6B 00 6B 
33ca6     00 6B 00 6B 
33caa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33cae     00 6B 00 6B 
33cb2     00 6B 00 6B 
33cb6     00 6B 00 6B 
33cba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33cbe     00 6B 00 6B 
33cc2     00 6B 00 6B 
33cc6     00 6A 00 9D 
33cca     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33cce     00 9E 00 9E 
33cd2     00 9E 00 9E 
33cd6     00 9E 00 9E 
33cda     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33cde     00 9E 00 9E 
33ce2     00 9E 00 9E 
33ce6     00 9E 00 9E 
33cea     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33cee     00 9E 00 9E 
33cf2     00 9E 00 9E 
33cf6     00 9E 00 9E 
33cfa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33cfe     00 9E 00 9E 
33d02     00 9E 00 9E 
33d06     00 9E 00 9E 
33d0a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33d0e     00 9E 00 9E 
33d12     00 9E 00 9E 
33d16     00 9E 00 9E 
33d1a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33d1e     00 9E 00 9E 
33d22     00 9E 00 9E 
33d26     00 9E 00 9E 
33d2a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33d2e     00 9E 00 9E 
33d32     00 9E 00 9E 
33d36     00 9E 00 9E 
33d3a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33d3e     00 9E 00 9E 
33d42     00 9E 00 9E 
33d46     00 9E 00 9E 
33d4a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33d4e     00 9E 00 9E 
33d52     00 9E 00 9E 
33d56     00 9E 00 9E 
33d5a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33d5e     00 9F 00 9F 
33d62     00 9F 00 9F 
33d66     00 9F 00 9F 
33d6a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d6e     00 9F 00 9F 
33d72     00 9F 00 9F 
33d76     00 9F 00 9F 
33d7a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d7e     00 9F 00 9F 
33d82     00 9F 00 9F 
33d86     00 9F 00 9F 
33d8a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d8e     00 9F 00 9F 
33d92     00 9F 00 9F 
33d96     00 9F 00 9F 
33d9a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d9e     00 9F 00 9F 
33da2     00 9F 00 9F 
33da6     00 9F 00 9F 
33daa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33dae     00 9F 00 9F 
33db2     00 9F 00 9F 
33db6     00 9F 00 9F 
33dba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33dbe     00 9F 00 9F 
33dc2     00 9F 00 9F 
33dc6     00 9F 00 9F 
33dca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33dce     00 9F 00 9F 
33dd2     00 9F 00 9F 
33dd6     00 9F 00 9F 
33dda     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33dde     00 9F 00 9F 
33de2     00 9F 00 9F 
33de6     00 9F 00 9F 
33dea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33dee     00 9F 00 9F 
33df2     00 9F 00 9F 
33df6     00 9F 00 9F 
33dfa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33dfe     00 9F 00 9F 
33e02     00 9F 00 9F 
33e06     00 9F 00 9F 
33e0a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33e0e     00 9F 00 9F 
33e12     00 9F 00 9F 
33e16     00 9F 00 9F 
33e1a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33e1e     00 9F 00 9F 
33e22     00 9F 00 A0 
33e26     00 A0 00 A0 
33e2a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e2e     00 A0 00 A0 
33e32     00 A0 00 A0 
33e36     00 A0 00 A0 
33e3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e3e     00 A0 00 A0 
33e42     00 A0 00 A0 
33e46     00 A0 00 A0 
33e4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e4e     00 A0 00 A0 
33e52     00 A0 00 A0 
33e56     00 A0 00 A0 
33e5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e5e     00 A0 00 A0 
33e62     00 A0 00 A0 
33e66     00 A0 00 A0 
33e6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e6e     00 A0 00 A0 
33e72     00 A0 00 A0 
33e76     00 A0 00 A0 
33e7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e7e     00 A0 00 A0 
33e82     00 A0 00 A0 
33e86     00 A0 00 A0 
33e8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e8e     00 A0 00 A0 
33e92     00 A0 00 A0 
33e96     00 A0 00 A0 
33e9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e9e     00 A0 00 A0 
33ea2     00 A0 00 A0 
33ea6     00 A0 00 A0 
33eaa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33eae     00 A0 00 A0 
33eb2     00 A0 00 A0 
33eb6     00 A0 00 A0 
33eba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ebe     00 A0 00 A0 
33ec2     00 A0 00 A0 
33ec6     00 A0 00 A0 
33eca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ece     00 A0 00 A0 
33ed2     00 A0 00 A0 
33ed6     00 A0 00 A0 
33eda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ede     00 A0 00 A0 
33ee2     00 A0 00 A0 
33ee6     00 A0 00 A0 
33eea     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33eee     00 6D 00 6D 
33ef2     00 6D 00 6D 
33ef6     00 6D 00 6D 
33efa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33efe     00 6D 00 6D 
33f02     00 6D 00 6D 
33f06     00 6D 00 6D 
33f0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f0e     00 6D 00 6D 
33f12     00 6D 00 6D 
33f16     00 6D 00 6D 
33f1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f1e     00 6D 00 6D 
33f22     00 6D 00 6D 
33f26     00 6D 00 6D 
33f2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f2e     00 6D 00 6D 
33f32     00 6D 00 6D 
33f36     00 6D 00 6D 
33f3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f3e     00 6D 00 6D 
33f42     00 6D 00 6D 
33f46     00 6D 00 6D 
33f4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f4e     00 6D 00 6D 
33f52     00 6D 00 6D 
33f56     00 6D 00 6D 
33f5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f5e     00 6D 00 6D 
33f62     00 6D 00 6D 
33f66     00 6D 00 6D 
33f6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f6e     00 6D 00 6D 
33f72     00 A0 00 A0 
33f76     00 A0 00 A0 
33f7a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f7e     00 A0 00 A0 
33f82     00 A0 00 A0 
33f86     00 A0 00 A0 
33f8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f8e     00 A0 00 A0 
33f92     00 A0 00 A0 
33f96     00 A0 00 A0 
33f9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f9e     00 A0 00 A0 
33fa2     00 A0 00 A0 
33fa6     00 A0 00 A0 
33faa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fae     00 A0 00 A0 
33fb2     00 A0 00 A0 
33fb6     00 A0 00 A0 
33fba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fbe     00 A0 00 A0 
33fc2     00 A0 00 A0 
33fc6     00 A0 00 A0 
33fca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fce     00 A0 00 A0 
33fd2     00 A0 00 A0 
33fd6     00 A0 00 A0 
33fda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fde     00 A0 00 A0 
33fe2     00 A0 00 A0 
33fe6     00 A0 00 A0 
33fea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fee     00 A0 00 A0 
33ff2     00 A0 00 A0 
33ff6     00 A0 00 A0 
33ffa     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33ffe     00 6D 00 6D 
34002     00 6D 00 6D 
34006     00 6D 00 6D 
3400a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3400e     00 6D 00 6D 
34012     00 6D 00 6D 
34016     00 6D 00 6D 
3401a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3401e     00 6D 00 6D 
34022     00 6D 00 6D 
34026     00 6D 00 6D 
3402a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3402e     00 6D 00 6D 
34032     00 6D 00 6D 
34036     00 6D 00 6D 
3403a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3403e     00 6D 00 6D 
34042     00 6D 00 6D 
34046     00 6D 00 6D 
3404a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3404e     00 6D 00 6D 
34052     00 6D 00 6D 
34056     00 6D 00 6D 
3405a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3405e     00 6D 00 6D 
34062     00 6D 00 6D 
34066     00 6D 00 6D 
3406a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3406e     00 6D 00 6D 
34072     00 6D 00 6D 
34076     00 6D 00 6D 
3407a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3407e     00 6D 00 6D 
34082     00 6C 00 A0 
34086     00 9F 00 A0 
3408a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3408e     00 A0 00 A0 
34092     00 A0 00 A0 
34096     00 A0 00 A0 
3409a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3409e     00 A0 00 A0 
340a2     00 A0 00 A0 
340a6     00 A0 00 A0 
340aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340ae     00 A0 00 A0 
340b2     00 A0 00 A0 
340b6     00 A0 00 A0 
340ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340be     00 A0 00 A0 
340c2     00 A0 00 A0 
340c6     00 A0 00 A0 
340ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340ce     00 A0 00 A0 
340d2     00 A0 00 A0 
340d6     00 A0 00 A0 
340da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340de     00 A0 00 A0 
340e2     00 A0 00 A0 
340e6     00 A0 00 A0 
340ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340ee     00 A0 00 A0 
340f2     00 A0 00 A0 
340f6     00 A0 00 A0 
340fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340fe     00 A0 00 A0 
34102     00 A0 00 A0 
34106     00 A0 00 A0 
3410a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3410e     00 A0 00 A0 
34112     00 A0 00 A0 
34116     00 A0 00 A0 
3411a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3411e     00 A0 00 A0 
34122     00 A0 00 A0 
34126     00 A0 00 A0 
3412a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3412e     00 A0 00 A0 
34132     00 A0 00 A0 
34136     00 A0 00 A0 
3413a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3413e     00 A1 00 A1 
34142     00 A1 00 A1 
34146     00 A1 00 A1 
3414a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3414e     00 A1 00 A1 
34152     00 A1 00 A1 
34156     00 A1 00 A1 
3415a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3415e     00 A1 00 A1 
34162     00 A1 00 A1 
34166     00 A1 00 A1 
3416a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3416e     00 A1 00 A1 
34172     00 A1 00 A1 
34176     00 A1 00 A1 
3417a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3417e     00 A1 00 A1 
34182     00 A1 00 A1 
34186     00 A1 00 A1 
3418a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3418e     00 A1 00 A1 
34192     00 A1 00 A1 
34196     00 6E 00 6E 
3419a     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3419e     00 6E 00 6E 
341a2     00 6E 00 6E 
341a6     00 6E 00 6E 
341aa     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
341ae     00 6E 00 6E 
341b2     00 6E 00 6E 
341b6     00 6E 00 6E 
341ba     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
341be     00 6E 00 6E 
341c2     00 6E 00 6E 
341c6     00 6E 00 6E 
341ca     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
341ce     00 6E 00 6D 
341d2     00 6D 00 6D 
341d6     00 6D 00 6D 
341da     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341de     00 6D 00 6D 
341e2     00 6D 00 6D 
341e6     00 6D 00 6D 
341ea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341ee     00 6D 00 6D 
341f2     00 6D 00 6D 
341f6     00 6D 00 6D 
341fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341fe     00 6D 00 6D 
34202     00 6D 00 6D 
34206     00 6D 00 6D 
3420a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3420e     00 6D 00 6D 
34212     00 6D 00 6D 
34216     00 6D 00 6D 
3421a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3421e     00 6D 00 6D 
34222     00 6D 00 6D 
34226     00 6D 00 6D 
3422a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3422e     00 6D 00 6D 
34232     00 6D 00 6D 
34236     00 6D 00 6D 
3423a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3423e     00 6D 00 6D 
34242     00 6D 00 6D 
34246     00 6D 00 6D 
3424a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3424e     00 6D 00 6D 
34252     00 6D 00 6D 
34256     00 6D 00 6D 
3425a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3425e     00 6D 00 6D 
34262     00 6D 00 6D 
34266     00 6D 00 6D 
3426a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3426e     00 6D 00 6D 
34272     00 6D 00 6D 
34276     00 6D 00 6D 
3427a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3427e     00 6D 00 6D 
34282     00 6C 00 6C 
34286     00 6C 00 6C 
3428a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3428e     00 6C 00 6C 
34292     00 6C 00 6C 
34296     00 6C 00 6C 
3429a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3429e     00 6C 00 6C 
342a2     00 6C 00 6C 
342a6     00 9D 00 9F 
342aa     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
342ae     00 9F 00 9F 
342b2     00 9F 00 9F 
342b6     00 A0 00 A0 
342ba     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342be     00 A0 00 A0 
342c2     00 A0 00 A0 
342c6     00 A0 00 A0 
342ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342ce     00 A0 00 A0 
342d2     00 A0 00 A0 
342d6     00 A0 00 A0 
342da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342de     00 A0 00 A0 
342e2     00 A0 00 A0 
342e6     00 A0 00 A0 
342ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342ee     00 A0 00 A0 
342f2     00 A0 00 A0 
342f6     00 A0 00 A0 
342fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342fe     00 A0 00 A0 
34302     00 A0 00 A0 
34306     00 A0 00 A0 
3430a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3430e     00 A0 00 A0 
34312     00 A0 00 A0 
34316     00 A0 00 A0 
3431a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3431e     00 A0 00 A0 
34322     00 A0 00 A0 
34326     00 A0 00 A0 
3432a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3432e                 | 
3432e     00 00       |              	org
34330 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
34334 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
34338 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3433c 003             | 
3433c 003 00 30 04 F6 |                 mov     psramaddr,#0
34340 004             | 
34340 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
34344 005 20 00 00 FF 
34348 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3434c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
34350 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
34354 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
34358 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3435c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
34360 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
34364 00d             | 
34364 00d 20 00 00 FF 
34368 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3436c 00f E0 03 00 FF 
34370 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
34374 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
34378 012             | 
34378 012             |                 
34378 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3437c 013             |     
3437c 013 01 2C 60 FD |                 cogid 	t11				' get id
34380 014 00 00 EC FC |                 coginit #0,#0				' start the new program
34384 015 03 2C 60 FD |                 cogstop t11				' stop the loader
34388 016             | 
34388 016 00 00 00 00 | t11 		long 	0
3438c 017 00 FF 07 00 | mailbox 	long 	$7FF00
34390 018 00 00 00 00 | psramaddr 	long 	0
34394 019 00 00 00 00 | pslockval	long 	0
34398 01a 00 00 00 00 | cmd             long    0
3439c 01b 00 00 00 00 | buf1            long    0
343a0 01c 00 40 00 00 | buf2            long    16384
343a4 01d A8 43 03 00 | 	long	@@@_dat_ + 12624
343a8 01e 50 32 20 52 
343ac 01f 65 74 72 6F 
343b0 020 6D 61 63 68 
343b4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
343b8 022 42 41 53 49 
343bc 023 43 20 76 65 
343c0 024 72 73 69 6F 
343c4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
343c8 026 33 31 00 00 | 	byte	$33, $31, $00, $00
343cc 027             | 	alignl
343cc 027             | _hg010b_spin2_dat_
343cc 027             | 
343cc 027 00 00 00 00 
343d0 028 00 00 00 00 
343d4 029 00 00 00 00 
343d8 02a 00 00 00 00 
343dc 02b 00 00 00    | vga_font       file "vgafont.def"
343df 02b 7E 81 A5 81 
343e3 02c 81 BD 99 81 
343e7 02d 81 7E 00 00 
343eb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
343ef 02f 7E FF DB FF 
343f3 030 FF C3 E7 FF 
343f7 031 FF 7E 00 00 
343fb 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
343ff 033 00 36 7F 7F 
34403 034 7F 7F 3E 1C 
34407 035 08 00 00 00 
3440b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3440f 037 00 08 1C 3E 
34413 038 7F 3E 1C 08 
34417 039 00 00 00 00 
3441b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3441f 03b 18 3C 3C E7 
34423 03c E7 E7 18 18 
34427 03d 3C 00 00 00 
3442b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3442f 03f 18 3C 7E FF 
34433 040 FF 7E 18 18 
34437 041 3C 00 00 00 
3443b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3443f 043 00 00 00 18 
34443 044 3C 3C 18 00 
34447 045 00 00 00 00 
3444b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3444f 047 FF FF FF E7 
34453 048 C3 C3 E7 FF 
34457 049 FF FF FF FF 
3445b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3445f 04b 00 00 3C 66 
34463 04c 42 42 66 3C 
34467 04d 00 00 00 00 
3446b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3446f 04f FF FF C3 99 
34473 050 BD BD 99 C3 
34477 051 FF FF FF FF 
3447b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3447f 053 78 70 58 4C 
34483 054 1E 33 33 33 
34487 055 33 1E 00 00 
3448b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3448f 057 3C 66 66 66 
34493 058 66 3C 18 7E 
34497 059 18 18 00 00 
3449b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3449f 05b FC CC FC 0C 
344a3 05c 0C 0C 0C 0E 
344a7 05d 0F 07 00 00 
344ab 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
344af 05f FE C6 FE C6 
344b3 060 C6 C6 C6 E6 
344b7 061 E7 67 03 00 
344bb 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
344bf 063 18 18 DB 3C 
344c3 064 E7 3C DB 18 
344c7 065 18 00 00 00 
344cb 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
344cf 067 03 07 0F 1F 
344d3 068 7F 1F 0F 07 
344d7 069 03 01 00 00 
344db 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
344df 06b 60 70 78 7C 
344e3 06c 7F 7C 78 70 
344e7 06d 60 40 00 00 
344eb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
344ef 06f 18 3C 7E 18 
344f3 070 18 18 7E 3C 
344f7 071 18 00 00 00 
344fb 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
344ff 073 66 66 66 66 
34503 074 66 66 66    | 	byte	$66[7]
34506 075 00 66 66 00 
3450a 076 00 00 00 00 
3450e 077 00 FE DB DB 
34512 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
34516 079 D8 D8 D8 00 
3451a 07a 00 00 00 3E 
3451e 07b 63 06 1C 36 
34522 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
34526 07d 30 63 3E 00 
3452a 07e 00 00 00 00 
3452e 07f 00 00 00 00 
34532 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34536 081 7F 7F 7F 00 
3453a 082 00 00 00 00 
3453e 083 00 18 3C 7E 
34542 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
34546 085 3C 18 7E 00 
3454a 086 00 00 00 00 
3454e 087 00 18 3C 7E 
34552 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
34556 089 18 18 18 00 
3455a 08a 00 00 00 00 
3455e 08b 00 18 18 18 
34562 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
34566 08d 7E 3C 18 00 
3456a 08e 00 00 00 00 
3456e 08f 00 00 00 18 
34572 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
34576 091 00 00 00 00 
3457a 092 00 00 00 00 
3457e 093 00 00 00    | 	byte	$00[11]
34581 094 0C 06 7F 06 
34585 095 0C 00 00 00 
34589 096 00 00 00 00 
3458d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34591 098 00 03 03 03 
34595 099 7F 00 00 00 
34599 09a 00 00 00 00 
3459d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
345a1 09c 14 36 7F 36 
345a5 09d 14 00 00 00 
345a9 09e 00 00 00 00 
345ad 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
345b1 0a0 1C 1C 3E 3E 
345b5 0a1 7F 7F 00 00 
345b9 0a2 00 00 00 00 
345bd 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
345c1 0a4 7F 3E 3E 1C 
345c5 0a5 1C 08 00 00 
345c9 0a6 00 00 00 00 
345cd 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
345d1 0a8 00 00 00 00 
345d5 0a9 00 00 00 00 
345d9 0aa 00 00 00 00 
345dd 0ab 00 00       | 	byte	$00[14]
345df 0ab 18 3C 3C 3C 
345e3 0ac 18 18 18 00 
345e7 0ad 18 18 00 00 
345eb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
345ef 0af 66 24 00 00 
345f3 0b0 00 00 00 00 
345f7 0b1 00 00 00 00 
345fb 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
345ff 0b3 00 36 36 7F 
34603 0b4 36 36 36 7F 
34607 0b5 36 36 00 00 
3460b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3460f 0b7 3E 63 43 03 
34613 0b8 3E 60 60 61 
34617 0b9 63 3E 18 18 
3461b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3461f 0bb 00 00 43 63 
34623 0bc 30 18 0C 06 
34627 0bd 63 61 00 00 
3462b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3462f 0bf 1C 36 36 1C 
34633 0c0 6E 3B 33 33 
34637 0c1 33 6E 00 00 
3463b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3463f 0c3 0C 0C 0C 06 
34643 0c4 00 00 00 00 
34647 0c5 00 00 00 00 
3464b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3464f 0c7 30 18 0C 0C 
34653 0c8 0C 0C 0C 0C 
34657 0c9 18 30 00 00 
3465b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3465f 0cb 0C 18 30 30 
34663 0cc 30 30 30 30 
34667 0cd 18 0C 00 00 
3466b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3466f 0cf 00 00 00 66 
34673 0d0 3C FF 3C 66 
34677 0d1 00 00 00 00 
3467b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3467f 0d3 00 00 00 18 
34683 0d4 18 7E 18 18 
34687 0d5 00 00 00 00 
3468b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3468f 0d7 00 00 00 00 
34693 0d8 00 00 00 00 | 	byte	$00[8]
34697 0d9 18 18 18 0C 
3469b 0da 00 00 00 00 
3469f 0db 00 00 00 00 
346a3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
346a7 0dd 00 00 00 00 
346ab 0de 00 00 00 00 
346af 0df 00 00 00 00 
346b3 0e0 00 00 00 00 | 	byte	$00[16]
346b7 0e1 18 18 00 00 
346bb 0e2 00 00 00 00 
346bf 0e3 00 00 40 60 
346c3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
346c7 0e5 03 01 00 00 
346cb 0e6 00 00 00 00 
346cf 0e7 1C 36 63 63 
346d3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
346d7 0e9 36 1C 00 00 
346db 0ea 00 00 00 00 
346df 0eb 18 1C 1E 18 
346e3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
346e7 0ed 18 7E 00 00 
346eb 0ee 00 00 00 00 
346ef 0ef 3E 63 60 30 
346f3 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
346f7 0f1 63 7F 00 00 
346fb 0f2 00 00 00 00 
346ff 0f3 3E 63 60 60 
34703 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
34707 0f5 63 3E 00 00 
3470b 0f6 00 00 00 00 
3470f 0f7 30 38 3C 36 
34713 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
34717 0f9 30 78 00 00 
3471b 0fa 00 00 00 00 
3471f 0fb 7F 03 03 03 
34723 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
34727 0fd 63 3E 00 00 
3472b 0fe 00 00 00 00 
3472f 0ff 1C 06 03 03 
34733 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
34737 101 63 3E 00 00 
3473b 102 00 00 00 00 
3473f 103 7F 63 60 60 
34743 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
34747 105 0C 0C 00 00 
3474b 106 00 00 00 00 
3474f 107 3E 63 63 63 
34753 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
34757 109 63 3E 00 00 
3475b 10a 00 00 00 00 
3475f 10b 3E 63 63 63 
34763 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
34767 10d 30 1E 00 00 
3476b 10e 00 00 00 00 
3476f 10f 00 00 00 18 
34773 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
34777 111 18 18 00 00 
3477b 112 00 00 00 00 
3477f 113 00 00 00 18 
34783 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
34787 115 18 18 0C 00 
3478b 116 00 00 00 00 
3478f 117 00 60 30 18 
34793 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
34797 119 30 60 00 00 
3479b 11a 00 00 00 00 
3479f 11b 00 00 00 7E 
347a3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
347a7 11d 00 00 00 00 
347ab 11e 00 00 00 00 
347af 11f 00          | 	byte	$00[9]
347b0 120 06 0C 18 30 
347b4 121 60 30 18 0C 
347b8 122 06 00 00 00 
347bc 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
347c0 124 63 63 30 18 
347c4 125 18 18 00 18 
347c8 126 18 00 00 00 
347cc 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
347d0 128 3E 63 63 7B 
347d4 129 7B 7B 3B 03 
347d8 12a 3E 00 00 00 
347dc 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
347e0 12c 1C 36 63 63 
347e4 12d 7F 63 63 63 
347e8 12e 63 00 00 00 
347ec 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
347f0 130 66 66 66 3E 
347f4 131 66 66 66 66 
347f8 132 3F 00 00 00 
347fc 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34800 134 66 43 03 03 
34804 135 03 03 43 66 
34808 136 3C 00 00 00 
3480c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
34810 138 36 66 66 66 
34814 139 66 66 66 36 
34818 13a 1F 00 00 00 
3481c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
34820 13c 66 46 16 1E 
34824 13d 16 06 46 66 
34828 13e 7F 00 00 00 
3482c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
34830 140 66 46 16 1E 
34834 141 16 06 06 06 
34838 142 0F 00 00 00 
3483c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34840 144 66 43 03 03 
34844 145 7B 63 63 66 
34848 146 5C 00 00 00 
3484c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
34850 148 63 63 63 7F 
34854 149 63 63 63 63 
34858 14a 63 00 00 00 
3485c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
34860 14c 18 18 18 18 
34864 14d 18 18 18 18 | 	byte	$18[8]
34868 14e 3C 00 00 00 
3486c 14f 00 00 00 78 
34870 150 30 30 30 30 
34874 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
34878 152 1E 00 00 00 
3487c 153 00 00 00 67 
34880 154 66 66 36 1E 
34884 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
34888 156 67 00 00 00 
3488c 157 00 00 00 0F 
34890 158 06 06 06 06 
34894 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34898 15a 7F 00 00 00 
3489c 15b 00 00 00 63 
348a0 15c 77 7F 7F 6B 
348a4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
348a8 15e 63 00 00 00 
348ac 15f 00 00 00 63 
348b0 160 67 6F 7F 7B 
348b4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
348b8 162 63 00 00 00 
348bc 163 00 00 00 3E 
348c0 164 63 63 63 63 
348c4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
348c8 166 3E 00 00 00 
348cc 167 00 00 00 3F 
348d0 168 66 66 66 3E 
348d4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
348d8 16a 0F 00 00 00 
348dc 16b 00 00 00 3E 
348e0 16c 63 63 63 63 
348e4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
348e8 16e 3E 30 70 00 
348ec 16f 00 00 00 3F 
348f0 170 66 66 66 3E 
348f4 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
348f8 172 67 00 00 00 
348fc 173 00 00 00 3E 
34900 174 63 63 06 1C 
34904 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34908 176 3E 00 00 00 
3490c 177 00 00 00 7E 
34910 178 7E 5A 18 18 
34914 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34918 17a 3C 00 00 00 
3491c 17b 00 00 00 63 
34920 17c 63 63 63 63 
34924 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34928 17e 3E 00 00 00 
3492c 17f 00 00 00 63 
34930 180 63 63 63 63 
34934 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
34938 182 08 00 00 00 
3493c 183 00 00 00 63 
34940 184 63 63 63 6B 
34944 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
34948 186 36 00 00 00 
3494c 187 00 00 00 63 
34950 188 63 36 3E 1C 
34954 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
34958 18a 63 00 00 00 
3495c 18b 00 00 00 66 
34960 18c 66 66 66 3C 
34964 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
34968 18e 3C 00 00 00 
3496c 18f 00 00 00 7F 
34970 190 63 61 30 18 
34974 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34978 192 7F 00 00 00 
3497c 193 00 00 00 3C 
34980 194 0C 0C 0C 0C 
34984 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
34988 196 3C 00 00 00 
3498c 197 00 00 00 00 
34990 198 01 03 07 0E 
34994 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
34998 19a 40 00 00 00 
3499c 19b 00 00 00 3C 
349a0 19c 30 30 30 30 
349a4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
349a8 19e 3C 00 00 00 
349ac 19f 1C 36 00 00 
349b0 1a0 00 00 00 00 
349b4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
349b8 1a2 00 00 00 00 
349bc 1a3 00 00 00 00 
349c0 1a4 00 00 00 00 
349c4 1a5 00 00 00 00 
349c8 1a6 00          | 	byte	$00[17]
349c9 1a6 FF 00 00 0C 
349cd 1a7 18 00 00 00 
349d1 1a8 00 00 00 00 
349d5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
349d9 1aa 00 00 00 00 
349dd 1ab 00 00 00 00 
349e1 1ac 00          | 	byte	$00[9]
349e2 1ac 1E 30 3E 33 
349e6 1ad 33 33 6E 00 
349ea 1ae 00 00 00 00 
349ee 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
349f2 1b0 1E 36 66 66 
349f6 1b1 66 66 3E 00 
349fa 1b2 00 00 00 00 
349fe 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34a02 1b4 3E 63 03 03 
34a06 1b5 03 63 3E 00 
34a0a 1b6 00 00 00 00 
34a0e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
34a12 1b8 3C 36 33 33 
34a16 1b9 33 33 6E 00 
34a1a 1ba 00 00 00 00 
34a1e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34a22 1bc 3E 63 7F 03 
34a26 1bd 03 63 3E 00 
34a2a 1be 00 00 00 00 
34a2e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
34a32 1c0 0C 1E 0C 0C 
34a36 1c1 0C 0C 1E 00 
34a3a 1c2 00 00 00 00 
34a3e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34a42 1c4 6E 33 33 33 
34a46 1c5 33 33 3E 30 
34a4a 1c6 33 1E 00 00 
34a4e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
34a52 1c8 36 6E 66 66 
34a56 1c9 66 66 67 00 
34a5a 1ca 00 00 00 00 
34a5e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
34a62 1cc 1C 18 18 18 
34a66 1cd 18 18 3C 00 
34a6a 1ce 00 00 00 00 
34a6e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
34a72 1d0 70 60 60 60 
34a76 1d1 60 60 60 66 
34a7a 1d2 66 3C 00 00 
34a7e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
34a82 1d4 66 36 1E 1E 
34a86 1d5 36 66 67 00 
34a8a 1d6 00 00 00 00 
34a8e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
34a92 1d8 18 18 18 18 
34a96 1d9 18 18       | 	byte	$18[6]
34a98 1da 3C 00 00 00 
34a9c 1db 00 00 00 00 
34aa0 1dc 00 00 37 7F 
34aa4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
34aa8 1de 63 00 00 00 
34aac 1df 00 00 00 00 
34ab0 1e0 00 00 3B 66 
34ab4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34ab8 1e2 66 00 00 00 
34abc 1e3 00 00 00 00 
34ac0 1e4 00 00 3E 63 
34ac4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34ac8 1e6 3E 00 00 00 
34acc 1e7 00 00 00 00 
34ad0 1e8 00 00 3B 66 
34ad4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34ad8 1ea 3E 06 06 0F 
34adc 1eb 00 00 00 00 
34ae0 1ec 00 00 6E 33 
34ae4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
34ae8 1ee 3E 30 30 78 
34aec 1ef 00 00 00 00 
34af0 1f0 00 00 3B 6E 
34af4 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
34af8 1f2 0F 00 00 00 
34afc 1f3 00 00 00 00 
34b00 1f4 00 00 3E 63 
34b04 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
34b08 1f6 3E 00 00 00 
34b0c 1f7 00 00 00 08 
34b10 1f8 0C 0C 3F 0C 
34b14 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34b18 1fa 38 00 00 00 
34b1c 1fb 00 00 00 00 
34b20 1fc 00 00 33 33 
34b24 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
34b28 1fe 6E 00 00 00 
34b2c 1ff 00 00 00 00 
34b30 200 00 00 63 63 
34b34 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34b38 202 1C 00 00 00 
34b3c 203 00 00 00 00 
34b40 204 00 00 63 63 
34b44 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34b48 206 36 00 00 00 
34b4c 207 00 00 00 00 
34b50 208 00 00 63 36 
34b54 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
34b58 20a 63 00 00 00 
34b5c 20b 00 00 00 00 
34b60 20c 00 00 63 63 
34b64 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
34b68 20e 7E 60 30 1F 
34b6c 20f 00 00 00 00 
34b70 210 00 00 7F 33 
34b74 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
34b78 212 7F 00 00 00 
34b7c 213 00 00 00 70 
34b80 214 18 18 18 0E 
34b84 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
34b88 216 70 00 00 00 
34b8c 217 00 00 00 18 
34b90 218 18 18 18 18 
34b94 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
34b98 21a 18 00 00 00 
34b9c 21b 00 00 00 0E 
34ba0 21c 18 18 18 70 
34ba4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
34ba8 21e 0E 00 00 00 
34bac 21f 6E 3B 00 00 
34bb0 220 00 00 00 00 
34bb4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34bb8 222 00 00 00 00 
34bbc 223 00 00 00 00 
34bc0 224 00 00       | 	byte	$00[10]
34bc2 224 08 1C 36 63 
34bc6 225 63 63 7F 00 
34bca 226 00 00 00 00 
34bce 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34bd2 228 03 03 03 03 
34bd6 229 43 66 3C 18 
34bda 22a 30 1E 00 00 
34bde 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34be2 22c 33 33 33 33 
34be6 22d 33 33       | 	byte	$33[6]
34be8 22e 6E 00 00 00 
34bec 22f 00 00 60 30 
34bf0 230 18 00 3E 63 
34bf4 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34bf8 232 3E 00 00 00 
34bfc 233 00 00 08 1C 
34c00 234 36 00 1E 30 
34c04 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34c08 236 6E 00 00 00 
34c0c 237 00 00 00 00 
34c10 238 33 00 1E 30 
34c14 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34c18 23a 6E 00 00 00 
34c1c 23b 00 00 1C 36 
34c20 23c 1C 00 33 33 
34c24 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34c28 23e 6E 00 00 00 
34c2c 23f 00 00 60 30 
34c30 240 18 00 3E 63 
34c34 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34c38 242 3E 00 00 00 
34c3c 243 00 00 00 00 
34c40 244 00 00 3E 63 
34c44 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34c48 246 3E 18 30 1E 
34c4c 247 00 00 00 1C 
34c50 248 58 78 38 18 
34c54 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34c58 24a 3C 00 00 00 
34c5c 24b 00 00 00 00 
34c60 24c 63 00 3E 63 
34c64 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
34c68 24e 3E 00 00 00 
34c6c 24f 66 33 00 3E 
34c70 250 63 63 63 63 
34c74 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34c78 252 3E 00 00 00 
34c7c 253 00 00 CC 66 
34c80 254 33 00 3E 63 
34c84 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34c88 256 3E 00 00 00 
34c8c 257 00 00 18 3C 
34c90 258 66 00 1C 18 
34c94 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34c98 25a 3C 00 00 00 
34c9c 25b 30 18 00 7F 
34ca0 25c 63 61 30 18 
34ca4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34ca8 25e 7F 00 00 00 
34cac 25f 00 63 00 08 
34cb0 260 1C 36 63 63 
34cb4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34cb8 262 63 00 00 00 
34cbc 263 30 18 00 3C 
34cc0 264 66 43 03 03 
34cc4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34cc8 266 3C 00 00 00 
34ccc 267 30 18 00 7F 
34cd0 268 66 46 16 1E 
34cd4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34cd8 26a 7F 00 00 00 
34cdc 26b 0C 06 00 0F 
34ce0 26c 06 06 06 06 
34ce4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34ce8 26e 7F 00 00 00 
34cec 26f 30 18 00 1C 
34cf0 270 18 18 18 18 
34cf4 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34cf8 272 3C 00 00 00 
34cfc 273 00 00 08 1C 
34d00 274 36 00 3E 63 
34d04 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34d08 276 3E 00 00 00 
34d0c 277 00 00 00 00 
34d10 278 63 00 3E 63 
34d14 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34d18 27a 3E 00 00 00 
34d1c 27b 00 00 00 6F 
34d20 27c 46 26 06 06 
34d24 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34d28 27e 7F 00 00 00 
34d2c 27f 00 00 00 6E 
34d30 280 4C 2C 0C 0C 
34d34 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34d38 282 1E 00 00 00 
34d3c 283 30 18 00 3E 
34d40 284 63 63 06 1C 
34d44 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34d48 286 3E 00 00 00 
34d4c 287 00 00 60 30 
34d50 288 18 00 3E 63 
34d54 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34d58 28a 3E 00 00 00 
34d5c 28b 00 63 00 3E 
34d60 28c 63 63 63 63 
34d64 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34d68 28e 3E 00 00 00 
34d6c 28f 00 63 00 63 
34d70 290 63 63 63 63 
34d74 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34d78 292 3E 00 00 00 
34d7c 293 6C 38 00 7E 
34d80 294 7E 5A 18 18 
34d84 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34d88 296 3C 00 00 00 
34d8c 297 00 00 60 48 
34d90 298 2C 0C 3F 0C 
34d94 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34d98 29a 38 00 00 00 
34d9c 29b 00 00 00 0F 
34da0 29c 26 36 1E 0E 
34da4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34da8 29e 7F 00 00 00 
34dac 29f 00 00 00 00 
34db0 2a0 00 63 36 1C 
34db4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34db8 2a2 00 00 00 00 
34dbc 2a3 00 00       | 	byte	$00[6]
34dbe 2a3 36 1C 08 00 
34dc2 2a4 3E 63 03 03 
34dc6 2a5 03 63 3E 00 
34dca 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34dce 2a7 30 18 0C 00 
34dd2 2a8 1E 30 3E 33 
34dd6 2a9 33 33 6E 00 
34dda 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34dde 2ab 60 30 18 00 
34de2 2ac 1C 18 18 18 
34de6 2ad 18 18 3C 00 
34dea 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34dee 2af 60 30 18 00 
34df2 2b0 3E 63 63 63 
34df6 2b1 63 63 3E 00 
34dfa 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34dfe 2b3 30 18 0C 00 
34e02 2b4 33 33 33 33 
34e06 2b5 33 33 6E 00 
34e0a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34e0e 2b7 00 08 1C 36 
34e12 2b8 63 63 7F 63 
34e16 2b9 63 63 63 18 
34e1a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34e1e 2bb 00 00 00 00 
34e22 2bc 1E 30 3E 33 
34e26 2bd 33 33 6E 18 
34e2a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34e2e 2bf 00 7F 63 61 
34e32 2c0 30 18 0C 06 
34e36 2c1 43 63 7F 00 
34e3a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34e3e 2c3 36 1C 08 00 
34e42 2c4 7F 33 18 0C 
34e46 2c5 06 63 7F 00 
34e4a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34e4e 2c7 00 7F 66 46 
34e52 2c8 16 1E 16 06 
34e56 2c9 46 66 7F 18 
34e5a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34e5e 2cb 00 00 00 00 
34e62 2cc 3E 63 7F 03 
34e66 2cd 03 63 3E 18 
34e6a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34e6e 2cf 00 3C 66 03 
34e72 2d0 1F 03 0F 03 
34e76 2d1 03 66 3C 00 
34e7a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34e7e 2d3 60 30 18 00 
34e82 2d4 7F 33 18 0C 
34e86 2d5 06 63 7F 00 
34e8a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34e8e 2d7 00 3C 66 43 
34e92 2d8 03 03 03 03 
34e96 2d9 43 66 3C 00 
34e9a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34e9e 2db 00 00 00 00 
34ea2 2dc 3E 63 06 1C 
34ea6 2dd 30 63 3E 18 
34eaa 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34eae 2df 00 00 00 00 
34eb2 2e0 00 00       | 	byte	$00[6]
34eb4 2e1 6C 36 1B 36 
34eb8 2e2 6C 00 00 00 
34ebc 2e3 00 00 00 00 
34ec0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ec4 2e5 1B 36 6C 36 
34ec8 2e6 1B 00 00 00 
34ecc 2e7 88 22 88 22 
34ed0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34ed4 2e9 88 22 88 22 
34ed8 2ea 88 22 88 22 
34edc 2eb AA 55 AA 55 
34ee0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34ee4 2ed AA 55 AA 55 
34ee8 2ee AA 55 AA 55 
34eec 2ef BB EE BB EE 
34ef0 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34ef4 2f1 BB EE BB EE 
34ef8 2f2 BB EE BB EE 
34efc 2f3 18 18 18 18 
34f00 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34f04 2f5 18 18 18 18 
34f08 2f6 18 18 18 18 
34f0c 2f7 18 18 18 18 
34f10 2f8 18 18 18    | 	byte	$18[15]
34f13 2f8 1F 18 18 18 
34f17 2f9 18 18 18 18 
34f1b 2fa 18 30 18 00 
34f1f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34f23 2fc 63 7F 63 63 
34f27 2fd 63 63 00 00 
34f2b 2fe 00 1C 36 00 
34f2f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34f33 300 63 7F 63 63 
34f37 301 63 63 00 00 
34f3b 302 00 36 1C 00 
34f3f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34f43 304 1E 16 06 46 
34f47 305 66 7F 00 00 
34f4b 306 00 00 00 00 
34f4f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34f53 308 1C 30 60 63 
34f57 309 63 3E 18 30 
34f5b 30a 1E 6C 6C 6C 
34f5f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34f63 30c 6F 6C 6C 6C 
34f67 30d 6C 6C 6C 6C 
34f6b 30e 6C 6C 6C 6C 
34f6f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34f73 310 6C 6C 6C 6C 
34f77 311 6C 6C 6C 6C 
34f7b 312 6C          | 	byte	$6c[9]
34f7c 313 00 00 00 00 
34f80 314 00          | 	byte	$00[5]
34f81 314 7F 60 6F 6C 
34f85 315 6C 6C 6C 6C 
34f89 316 6C 6C 6C 6C 
34f8d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34f91 318 6F 60 7F 00 
34f95 319 00 00 00 00 
34f99 31a 00 00 00 18 
34f9d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34fa1 31c 61 30 18 0C 
34fa5 31d 06 43 63 7F 
34fa9 31e 00 00 00 00 
34fad 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34fb1 320 00 7F 33 18 
34fb5 321 0C 06 63 7F 
34fb9 322 00 00 00 00 
34fbd 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34fc1 324 00 00 1F 18 
34fc5 325 18 18 18 18 
34fc9 326 18 18 18 18 
34fcd 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34fd1 328 18 18 F8 00 
34fd5 329 00 00 00 00 
34fd9 32a 00 00 00 18 
34fdd 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34fe1 32c 18 18 FF 00 
34fe5 32d 00 00 00 00 
34fe9 32e 00 00 00 00 
34fed 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ff1 330 00 00 FF 18 
34ff5 331 18 18 18 18 
34ff9 332 18 18 18 18 
34ffd 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35001 334 18 18 F8 18 
35005 335 18 18 18 18 
35009 336 18 18 18 00 
3500d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35011 338 00 00 FF 00 
35015 339 00 00 00 00 
35019 33a 00 00 00 18 
3501d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
35021 33c 18 18 FF 18 
35025 33d 18 18 18 18 
35029 33e 18 18 18 63 
3502d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
35031 340 36 63 63 7F 
35035 341 63 63 63 63 
35039 342 00 00 00 00 
3503d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
35041 344 00 1E 30 3E 
35045 345 33 33 33 6E 
35049 346 00 00 00 6C 
3504d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35051 348 EC 0C FC 00 
35055 349 00 00 00 00 
35059 34a 00 00 00 00 
3505d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35061 34c FC 0C EC 6C 
35065 34d 6C 6C 6C 6C 
35069 34e 6C 6C 6C 6C 
3506d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35071 350 EF 00 FF 00 
35075 351 00 00 00 00 
35079 352 00 00 00 00 
3507d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35081 354 FF 00 EF 6C 
35085 355 6C 6C 6C 6C 
35089 356 6C 6C 6C 6C 
3508d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35091 358 EC 0C EC 6C 
35095 359 6C 6C 6C 6C 
35099 35a 6C 6C 6C 00 
3509d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
350a1 35c FF 00 FF 00 
350a5 35d 00 00 00 00 
350a9 35e 00 00 00 6C 
350ad 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
350b1 360 EF 00 EF 6C 
350b5 361 6C 6C 6C 6C 
350b9 362 6C 6C 6C 00 
350bd 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
350c1 364 63 3E 63 63 
350c5 365 63 63 3E 63 
350c9 366 00 00 00 00 
350cd 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
350d1 368 30 3C 36 33 
350d5 369 33 33 33 6E 
350d9 36a 00 00 00 00 
350dd 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
350e1 36c 66 66 6F 66 
350e5 36d 66 66 36 1F 
350e9 36e 00 00 00 36 
350ed 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
350f1 370 66 66 66 66 
350f5 371 66 66       | 	byte	$66[6]
350f7 371 36 1F 00 00 
350fb 372 00 00 63 00 
350ff 373 7F 66 46 16 
35103 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
35107 375 66 7F 00 00 
3510b 376 00 6C 38 00 
3510f 377 38 30 30 3C 
35113 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
35117 379 33 6E 00 00 
3511b 37a 00 36 1C 00 
3511f 37b 63 67 6F 7F 
35123 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
35127 37d 63 63 00 00 
3512b 37e 00 30 18 00 
3512f 37f 3C 18 18 18 
35133 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35137 381 18 3C 00 00 
3513b 382 00 3C 66 00 
3513f 383 3C 18 18 18 
35143 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35147 385 18 3C 00 00 
3514b 386 00 00 00 36 
3514f 387 1C 08 00 3E 
35153 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
35157 389 63 3E 00 00 
3515b 38a 00 18 18 18 
3515f 38b 18 18 18 18 
35163 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
35167 38d 00 00 00 00 
3516b 38e 00 00 00 00 
3516f 38f 00 00 00 00 | 	byte	$00[12]
35173 390 F8 18 18 18 
35177 391 18 18 18 18 
3517b 392 18 FF FF FF 
3517f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
35183 394 FF FF FF FF 
35187 395 FF FF FF FF 
3518b 396 FF          | 	byte	$ff[9]
3518c 397 00 00 00 00 
35190 398 00 00 00    | 	byte	$00[7]
35193 398 FF FF FF FF 
35197 399 FF FF FF FF 
3519b 39a FF          | 	byte	$ff[9]
3519c 39b 00 00 00 7E 
351a0 39c 7E 5A 18 18 
351a4 39d 18 18 18 18 
351a8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
351ac 39f 1C 36 1C 63 
351b0 3a0 63 63 63 63 
351b4 3a1 63 63 63 63 
351b8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
351bc 3a3 FF FF FF FF 
351c0 3a4 FF FF FF    | 	byte	$ff[7]
351c3 3a4 00 00 00 00 
351c7 3a5 00 00 00 00 
351cb 3a6 00          | 	byte	$00[9]
351cc 3a7 30 18 00 3E 
351d0 3a8 63 63 63 63 
351d4 3a9 63 63 63 63 
351d8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
351dc 3ab 00 00 00 1E 
351e0 3ac 33 33 33 1B 
351e4 3ad 33 63 63 63 
351e8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
351ec 3af 1C 36 00 3E 
351f0 3b0 63 63 63 63 
351f4 3b1 63 63 63 63 
351f8 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
351fc 3b3 30 18 00 63 
35200 3b4 67 6F 7F 7B 
35204 3b5 73 63 63 63 
35208 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3520c 3b7 00 00 60 30 
35210 3b8 18 00 3B 66 
35214 3b9 66 66 66 66 
35218 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3521c 3bb 00 00 36 1C 
35220 3bc 08 00 3B 66 
35224 3bd 66 66 66 66 
35228 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3522c 3bf 36 1C 00 3E 
35230 3c0 63 63 06 1C 
35234 3c1 30 60 63 63 
35238 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3523c 3c3 00 00 36 1C 
35240 3c4 08 00 3E 63 
35244 3c5 06 1C 30 63 
35248 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3524c 3c7 30 18 00 3F 
35250 3c8 66 66 66 3E 
35254 3c9 36 66 66 66 
35258 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3525c 3cb 30 18 00 63 
35260 3cc 63 63 63 63 
35264 3cd 63 63 63 63 
35268 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3526c 3cf 00 00 60 30 
35270 3d0 18 00 3B 6E 
35274 3d1 66 06 06 06 
35278 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3527c 3d3 66 33 00 63 
35280 3d4 63 63 63 63 
35284 3d5 63 63 63 63 
35288 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3528c 3d7 00 00 60 30 
35290 3d8 18 00 63 63 
35294 3d9 63 63 63 63 
35298 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3529c 3db 30 18 00 66 
352a0 3dc 66 66 66 3C 
352a4 3dd 18 18 18 18 
352a8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
352ac 3df 00 00 00 08 
352b0 3e0 0C 0C 3F 0C 
352b4 3e1 0C 0C 0C 6C 
352b8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
352bc 3e3 30 18 00 00 
352c0 3e4 00 00 00 00 
352c4 3e5 00 00 00 00 
352c8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
352cc 3e7 00 00 00 00 
352d0 3e8 00 00 00 00 | 	byte	$00[8]
352d4 3e9 7F 00 00 00 
352d8 3ea 00 00 00 00 
352dc 3eb 66 33 00 00 
352e0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
352e4 3ed 00 00 00 00 
352e8 3ee 00 00 00 00 
352ec 3ef 00 00 00 00 
352f0 3f0 00 00 00 00 
352f4 3f1 00 00 00 00 
352f8 3f2 00          | 	byte	$00[21]
352f9 3f2 0C 06 3C 36 
352fd 3f3 1C 00 00 00 
35301 3f4 00 00 00 00 
35305 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35309 3f6 00 00 00 63 
3530d 3f7 3E 00 00 00 
35311 3f8 00 00 00 00 
35315 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35319 3fa 00 00 00 00 
3531d 3fb 3E 63 06 1C 
35321 3fc 36 63 63 36 
35325 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
35329 3fe 00 00 00 00 
3532d 3ff 00 00 00 00 | 	byte	$00[8]
35331 400 18 00 7E 00 
35335 401 18 00 00 00 
35339 402 00 00 00 00 
3533d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35341 404 00 00 00 00 
35345 405 00 00 00 00 | 	byte	$00[8]
35349 406 18 30 1E 00 
3534d 407 00 00 1C 36 
35351 408 36 1C 00 00 
35355 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
35359 40a 00 00 00 00 
3535d 40b 63 00 00 00 
35361 40c 00 00 00 00 
35365 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35369 40e 00 00 00 18 
3536d 40f 18 00 00 00 
35371 410 00 00 00 00 
35375 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35379 412 00 00 00 00 
3537d 413 00          | 	byte	$00[5]
3537e 413 CC 66 33 00 
35382 414 33 33 33 33 
35386 415 33 33 6E 00 
3538a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3538e 417 00 3F 66 66 
35392 418 66 3E 36 66 
35396 419 66 66 6F 00 
3539a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3539e 41b 36 1C 08 00 
353a2 41c 3B 6E 66 06 
353a6 41d 06 06 0F 00 
353aa 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
353ae 41f 00 00 00 7E 
353b2 420 7E 7E 7E 7E 
353b6 421 7E 7E 00 00 
353ba 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
353be 423 00 00 00 00 
353c2 424 00 00 00 00 
353c6 425 00 00 00 00 
353ca 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
353cc 427             | 'vga_font       file "vgafont.def"
353cc 427 00 00 00 00 
      ...             
353fc 433 00 00 00 00 
35400 434 00 00 00    | st_font        file "st4font.def"
35403 434 FF FF 00 00 
35407 435 00 00 00 00 
3540b 436 00 18 18 18 
3540f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35413 438 18 18 18 18 
35417 439 18 18 18 18 
3541b 43a 18          | 	byte	$18[9]
3541c 43b 00 00 00 00 
35420 43c 00 00 00    | 	byte	$00[7]
35423 43c FF FF 18 18 
35427 43d 18 18 18 18 
3542b 43e 18 18 18 18 
3542f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35433 440 FF FF 00 00 
35437 441 00 00 00 00 
3543b 442 00 18 18 18 
3543f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35443 444 1F 1F 18 18 
35447 445 18 18 18 18 
3544b 446 18 18 18 18 
3544f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35453 448 F8 F8 18 18 
35457 449 18 18 18 18 
3545b 44a 18 00 00 00 
3545f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35463 44c 1F 1F 18 18 
35467 44d 18 18 18 18 
3546b 44e 18 00 00 00 
3546f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35473 450 F8 F8 18 18 
35477 451 18 18 18 18 
3547b 452 18 18 18 18 
3547f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35483 454 1F 1F 00 00 
35487 455 00 00 00 00 
3548b 456 00 18 18 18 
3548f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35493 458 F8 F8 00 00 
35497 459 00 00 00 00 
3549b 45a 00 18 18 18 
3549f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
354a3 45c FF FF 18 18 
354a7 45d 18 18 18 18 
354ab 45e 18 00 00 18 
354af 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
354b3 460 66 7E 7E 66 
354b7 461 66 66 66 30 
354bb 462 18 00 00 7E 
354bf 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
354c3 464 3E 06 06 06 
354c7 465 06 7E 7E 18 
354cb 466 0C 30 18 3C 
354cf 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
354d3 468 06 06 06 66 
354d7 469 66 7E 3C 00 
354db 46a 00 30 18 66 
354df 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
354e3 46c 7E 7E 76 76 
354e7 46d 66 66 66 00 
354eb 46e 00 30 18 7C 
354ef 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
354f3 470 1C 38 70 60 
354f7 471 60 7E 3E 00 
354fb 472 00 30 18 7E 
354ff 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
35503 474 18 0C 0C 06 
35507 475 06 7E 7E 00 
3550b 476 00 18 18 00 
3550f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
35513 478 18 18 0C 0C 
35517 479 06 7E 7E 00 
3551b 47a 00 30 18 3C 
3551f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
35523 47c 66 66 66 66 
35527 47d 66          | 	byte	$66[5]
35528 47e 7E 3C 00 00 
3552c 47f 00 00 06 06 
35530 480 06 06 16 1E 
35534 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
35538 482 7E 7E 00 00 
3553c 483 00 00 00 00 
35540 484 00 3C 7C 60 
35544 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
35548 486 7E 7C 30 18 
3554c 487 00 00 00 00 
35550 488 00 3C 7E 66 
35554 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
35558 48a 7E 7C 18 0C 
3555c 48b 00 00 30 18 
35560 48c 00 3C 3E 06 
35564 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
35568 48e 7E 7C 00 00 
3556c 48f 00 00 30 18 
35570 490 00 3E 7E 66 
35574 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
35578 492 66 66 00 00 
3557c 493 00 00 30 18 
35580 494 00 7C 7E 06 
35584 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
35588 496 7E 3E 00 00 
3558c 497 00 00 30 18 
35590 498 00 7E 7E 30 
35594 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35598 49a 7E 7E 00 00 
3559c 49b 00 00 18 18 
355a0 49c 00 7E 7E 30 
355a4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
355a8 49e 7E 7E 00 00 
355ac 49f 00 00 30 18 
355b0 4a0 00 3C 7E 66 
355b4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
355b8 4a2 7E 3C 00 00 
355bc 4a3 00 00 1C 1C 
355c0 4a4 18 18 38 3C 
355c4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
355c8 4a6 3C 3C 00 00 
355cc 4a7 00 00 00 00 
355d0 4a8 00 00 00 00 
355d4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
355d8 4aa 00 00 00 00 
355dc 4ab 00 00       | 	byte	$00[6]
355de 4ab 18 18 18 18 
355e2 4ac 18 18 18 18 | 	byte	$18[8]
355e6 4ad 00 00 18 18 
355ea 4ae 00 00 00 00 
355ee 4af 66 66 66 66 
355f2 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
355f6 4b1 00 00 00 00 
355fa 4b2 00 00 00 00 
355fe 4b3 00          | 	byte	$00[9]
355ff 4b3 66 66 FF FF 
35603 4b4 66 66 FF FF 
35607 4b5 66 66 00 00 
3560b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3560f 4b7 7C 7E 06 06 
35613 4b8 3E 7C 60 60 
35617 4b9 7E 3E 18 18 
3561b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3561f 4bb 66 30 30 18 
35623 4bc 18 0C 0C 66 
35627 4bd 66 00 00 00 
3562b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3562f 4bf 66 66 3C 1C 
35633 4c0 1C FC FE 66 
35637 4c1 66 FE FC 00 
3563b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3563f 4c3 18 18 18 18 
35643 4c4 00 00 00 00 
35647 4c5 00 00 00 00 
3564b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3564f 4c7 18 1C 0C 0C 
35653 4c8 0C 0C 0C 0C 
35657 4c9 1C 18 30 00 
3565b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3565f 4cb 18 38 30 30 
35663 4cc 30 30 30 30 
35667 4cd 38 18 0C 00 
3566b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3566f 4cf 66 66 3C 3C 
35673 4d0 FF FF 3C 3C 
35677 4d1 66 66 00 00 
3567b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3567f 4d3 00 18 18 18 
35683 4d4 7E 7E 18 18 
35687 4d5 18 00 00 00 
3568b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3568f 4d7 00 00 00 00 
35693 4d8 00 00       | 	byte	$00[6]
35695 4d9 18 18 18 18 
35699 4da 18          | 	byte	$18[5]
3569a 4da 0C 04 00 00 
3569e 4db 00 00 00 00 
356a2 4dc 7E 7E 00 00 
356a6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
356aa 4de 00 00 00 00 
356ae 4df 00 00 00 00 
356b2 4e0 00 00 00 00 
356b6 4e1 00          | 	byte	$00[13]
356b7 4e1 18 18 18 00 
356bb 4e2 00 00 00 60 
356bf 4e3 60 60 30 30 
356c3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
356c7 4e5 06 06 06 00 
356cb 4e6 00 00 00 3C 
356cf 4e7 7E 66 66 66 
356d3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
356d7 4e9 66 7E 3C 00 
356db 4ea 00 00 00 18 
356df 4eb 18 1C 1C 18 
356e3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
356e7 4ed 18 7E 7E 00 
356eb 4ee 00 00 00 3C 
356ef 4ef 7E 66 66 30 
356f3 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
356f7 4f1 0C 7E 7E 00 
356fb 4f2 00 00 00 7E 
356ff 4f3 7E 30 30 18 
35703 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
35707 4f5 66 7E 3C 00 
3570b 4f6 00 00 00 30 
3570f 4f7 30 38 38 3C 
35713 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
35717 4f9 7E 30 30 00 
3571b 4fa 00 00 00 7E 
3571f 4fb 7E 06 06 3E 
35723 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
35727 4fd 66 7E 3C 00 
3572b 4fe 00 00 00 38 
3572f 4ff 3C 0E 06 06 
35733 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
35737 501 66 7E 3C 00 
3573b 502 00 00 00 7E 
3573f 503 7E 60 60 30 
35743 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
35747 505 0C 0C 0C 00 
3574b 506 00 00 00 3C 
3574f 507 7E 66 66 3C 
35753 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
35757 509 66 7E 3C 00 
3575b 50a 00 00 00 3C 
3575f 50b 7E 66 66 7E 
35763 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
35767 50d 70 3C 1C 00 
3576b 50e 00 00 00 00 
3576f 50f 00 00 18 18 
35773 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
35777 511 18 18 18 00 
3577b 512 00 00 00 00 
3577f 513 00 00 18 18 
35783 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
35787 515 18 18 18 0C 
3578b 516 04 00 00 00 
3578f 517 70 38 1C 0E 
35793 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
35797 519 70 00 00 00 
3579b 51a 00 00 00 00 
3579f 51b 00 00 7E 7E 
357a3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
357a7 51d 00 00 00 00 
357ab 51e 00 00 00 00 | 	byte	$00[8]
357af 51f 0E 1C 38 70 
357b3 520 E0 70 38 1C 
357b7 521 0E 00 00 00 
357bb 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
357bf 523 7E 66 66 30 
357c3 524 30 18 18 18 
357c7 525 00 18 18 00 
357cb 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
357cf 527 7E 66 66 66 
357d3 528 66 36 06 66 
357d7 529 66 7E 3C 00 
357db 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
357df 52b 3C 7E 66 66 
357e3 52c 66 7E 7E 66 
357e7 52d 66 66 66 00 
357eb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
357ef 52f 7E 66 66 7E 
357f3 530 3E 66 66 66 
357f7 531 66 7E 3E 00 
357fb 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
357ff 533 7E 66 66 06 
35803 534 06 06 06 66 
35807 535 66 7E 3C 00 
3580b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3580f 537 7E 66 66 66 
35813 538 66 66 66 66 
35817 539 66 7E 3E 00 
3581b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3581f 53b 7E 06 06 3E 
35823 53c 3E 06 06 06 
35827 53d 06 7E 7E 00 
3582b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3582f 53f 7E 06 06 3E 
35833 540 3E 06 06 06 
35837 541 06 06 06 00 
3583b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3583f 543 7E 06 06 76 
35843 544 76 66 66 66 
35847 545 66 7E 3C 00 
3584b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3584f 547 66 66 66 7E 
35853 548 7E 66 66 66 
35857 549 66 66 66 00 
3585b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3585f 54b 7E 18 18 18 
35863 54c 18 18 18 18 
35867 54d 18 7E 7E 00 
3586b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3586f 54f 60 60 60 60 
35873 550 60 60 60    | 	byte	$60[7]
35876 551 66 66 7E 3C 
3587a 552 00 00 00 00 
3587e 553 66 66 36 36 
35882 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
35886 555 66 66 C6 C6 
3588a 556 00 00 00 00 
3588e 557 06 06 06 06 
35892 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
35896 559 06 06 7E 7E 
3589a 55a 00 00 00 00 
3589e 55b C6 C6 EE EE 
358a2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
358a6 55d C6 C6 C6 C6 
358aa 55e 00 00 00 00 
358ae 55f 66 66 66 6E 
358b2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
358b6 561 76 66 66 66 
358ba 562 00 00 00 00 
358be 563 3C 7E 66 66 
358c2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
358c6 565 66 66 7E 3C 
358ca 566 00 00 00 00 
358ce 567 3E 7E 66 66 
358d2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
358d6 569 06 06 06 06 
358da 56a 00 00 00 00 
358de 56b 3C 7E 66 66 
358e2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
358e6 56d 66 56 3E 6C 
358ea 56e 00 00 00 00 
358ee 56f 3E 7E 66 66 
358f2 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
358f6 571 66 66 C6 C6 
358fa 572 00 00 00 00 
358fe 573 7C 7E 06 06 
35902 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
35906 575 60 60 7E 3E 
3590a 576 00 00 00 00 
3590e 577 7E 7E 18 18 
35912 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
35916 579 18 18 18 18 
3591a 57a 00 00 00 00 
3591e 57b 66 66 66 66 
35922 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
35926 57d 66 66 7E 3C 
3592a 57e 00 00 00 00 
3592e 57f 66 66 66 66 
35932 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
35936 581 3C 3C 18 18 
3593a 582 00 00 00 00 
3593e 583 C6 C6 C6 C6 
35942 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
35946 585 FE EE C6 82 
3594a 586 00 00 00 00 
3594e 587 66 66 66 3C 
35952 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
35956 589 3C 66 66 66 
3595a 58a 00 00 00 00 
3595e 58b 66 66 66 66 
35962 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
35966 58d 18 18 18 18 
3596a 58e 00 00 00 00 
3596e 58f 7E 7E 30 30 
35972 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
35976 591 06 06 7E 7E 
3597a 592 00 00 00 00 
3597e 593 3C 3C 0C 0C 
35982 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
35986 595 0C 0C 3C 3C 
3598a 596 00 00 00 00 
3598e 597 06 06 0C 0C 
35992 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
35996 599 60 60 C0 C0 
3599a 59a 00 00 00 00 
3599e 59b 3C 3C 30 30 
359a2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
359a6 59d 30 30 3C 3C 
359aa 59e 00 00 00 00 
359ae 59f 18 18 3C 3C 
359b2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
359b6 5a1 00 00 00 00 
359ba 5a2 00 00 00 00 
359be 5a3 00 00 00 00 
359c2 5a4 00 00 00 00 
359c6 5a5 00 00       | 	byte	$00[18]
359c8 5a6 FE FE 00 00 
359cc 5a7 00 00 0C 0C 
359d0 5a8 18 18 00 00 
359d4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
359d8 5aa 00 00 00 00 
359dc 5ab 00 00 00 00 
359e0 5ac 00          | 	byte	$00[9]
359e1 5ac 3C 7C 60 7C 
359e5 5ad 7E 66 66 7E 
359e9 5ae 7C 00 00 00 
359ed 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
359f1 5b0 3E 7E 66 66 
359f5 5b1 66 66 66 7E 
359f9 5b2 3E 00 00 00 
359fd 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35a01 5b4 3C 3E 06 06 
35a05 5b5 06 06 06 7E 
35a09 5b6 7C 00 00 00 
35a0d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35a11 5b8 7C 7E 66 66 
35a15 5b9 66 66 66 7E 
35a19 5ba 7C 00 00 00 
35a1d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35a21 5bc 3C 7E 66 66 
35a25 5bd 7E 06 06 7E 
35a29 5be 7C 00 00 00 
35a2d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
35a31 5c0 18 7E 7E 18 
35a35 5c1 18 18 18 18 
35a39 5c2 18 00 00 00 
35a3d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35a41 5c4 7C 7E 66 66 
35a45 5c5 66 66 7E 7C 
35a49 5c6 60 7E 3E 00 
35a4d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35a51 5c8 3E 7E 66 66 
35a55 5c9 66 66 66 66 
35a59 5ca 66 00 00 00 
35a5d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
35a61 5cc 1C 1C 18 18 
35a65 5cd 18 18 18 3C 
35a69 5ce 3C 00 00 00 
35a6d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
35a71 5d0 30 30 30 30 
35a75 5d1 30 30 30 30 
35a79 5d2 30          | 	byte	$30[9]
35a7a 5d2 3E 1E 00 00 
35a7e 5d3 06 06 06 36 
35a82 5d4 36 1E 1E 1E 
35a86 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
35a8a 5d6 00 00 00 00 
35a8e 5d7 1C 1C 18 18 
35a92 5d8 18 18 18 18 
35a96 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
35a9a 5da 00 00 00 00 
35a9e 5db 00 00 00    | 	byte	$00[7]
35aa1 5dc 6C FE FE D6 
35aa5 5dd D6 C6 C6 C6 
35aa9 5de C6 00 00 00 
35aad 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35ab1 5e0 3E 7E 66 66 
35ab5 5e1 66 66 66 66 
35ab9 5e2 66 00 00 00 
35abd 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35ac1 5e4 3C 7E 66 66 
35ac5 5e5 66 66 66 7E 
35ac9 5e6 3C 00 00 00 
35acd 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35ad1 5e8 3E 7E 66 66 
35ad5 5e9 66 66 66 7E 
35ad9 5ea 3E 06 06 00 
35add 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35ae1 5ec 7C 7E 66 66 
35ae5 5ed 66 66 66 7E 
35ae9 5ee 7C 60 60 00 
35aed 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35af1 5f0 3E 7E 66 06 
35af5 5f1 06 06 06 06 
35af9 5f2 06 00 00 00 
35afd 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35b01 5f4 7C 7E 06 0E 
35b05 5f5 3C 70 60 7E 
35b09 5f6 3E 00 00 00 
35b0d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35b11 5f8 7E 7E 18 18 
35b15 5f9 18 18 18 78 
35b19 5fa 70 00 00 00 
35b1d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35b21 5fc 66 66 66 66 
35b25 5fd 66 66 66    | 	byte	$66[7]
35b28 5fe 7E 7C 00 00 
35b2c 5ff 00 00 00 00 
35b30 600 00 66 66 66 
35b34 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35b38 602 18 18 00 00 
35b3c 603 00 00 00 00 
35b40 604 00 C6 C6 D6 
35b44 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35b48 606 C6 82 00 00 
35b4c 607 00 00 00 00 
35b50 608 00 66 66 3C 
35b54 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
35b58 60a 66 66 00 00 
35b5c 60b 00 00 00 00 
35b60 60c 00 66 66 66 
35b64 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
35b68 60e 7C 60 7E 3E 
35b6c 60f 00 00 00 00 
35b70 610 00 7E 7E 30 
35b74 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35b78 612 7E 7E 00 00 
35b7c 613 00 00 30 18 
35b80 614 18 18 18 0C 
35b84 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
35b88 616 18 30 00 00 
35b8c 617 00 00 18 18 
35b90 618 18 18 18 18 
35b94 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35b98 61a 18 18 00 00 
35b9c 61b 00 00 0C 18 
35ba0 61c 18 18 18 30 
35ba4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
35ba8 61e 18 0C 00 00 
35bac 61f 00 00 6C 7E 
35bb0 620 36 00 00 00 
35bb4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
35bb8 622 00 00 00 00 
35bbc 623 00 00 00 00 
35bc0 624 00          | 	byte	$00[9]
35bc1 624 18 18 18 18 
35bc5 625 18 18 00 00 
35bc9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35bcc 627             | 'amiga_font     file "amigafont.def"
35bcc 627 00 6C FE FE 
35bd0 628 7C 38 10 00 
35bd4 629 18 18 18 F8 
35bd8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35bdc 62b C0 C0 C0 C0 
35be0 62c C0 C0 C0 C0 | 	byte	$c0[8]
35be4 62d 18 18 18 1F 
35be8 62e 1F 00 00 00 
35bec 62f 18 18 18 1F 
35bf0 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35bf4 631 00 00 00 1F 
35bf8 632 1F 18 18 18 
35bfc 633 C0 E0 70 38 
35c00 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35c04 635 03 07 0E 1C 
35c08 636 38 70 E0 C0 
35c0c 637 80 C0 E0 F0 
35c10 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35c14 639 00 00 00 00 
35c18 63a F0 F0 F0 F0 
35c1c 63b 01 03 07 0F 
35c20 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35c24 63d F0 F0 F0 F0 
35c28 63e 00 00 00 00 
35c2c 63f 0F 0F 0F 0F 
35c30 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35c34 641 FF FF 00 00 
35c38 642 00 00 00 00 
35c3c 643 00 00 00 00 
35c40 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35c44 645 00 00 00 00 
35c48 646 0F 0F 0F 0F 
35c4c 647 00 38 38 EE 
35c50 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35c54 649 00 00 00 F8 
35c58 64a F8 18 18 18 
35c5c 64b 00 00 00 FF 
35c60 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35c64 64d 18 18 18 FF 
35c68 64e FF 18 18 18 
35c6c 64f 00 00 3C 7E 
35c70 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35c74 651 00 00 00 00 
35c78 652 FF FF FF FF 
35c7c 653 03 03 03 03 
35c80 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35c84 655 00 00 00 FF 
35c88 656 FF 18 18 18 
35c8c 657 18 18 18 FF 
35c90 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35c94 659 0F 0F 0F 0F 
35c98 65a 0F 0F 0F 0F | 	byte	$0f[8]
35c9c 65b 18 18 18 F8 
35ca0 65c F8 00 00 00 
35ca4 65d 1E 06 1E 06 
35ca8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35cac 65f 00 18 3C 7E 
35cb0 660 18 18 18 00 
35cb4 661 00 18 18 18 
35cb8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35cbc 663 00 18 0C 7E 
35cc0 664 0C 18 00 00 
35cc4 665 00 18 30 7E 
35cc8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35ccc 667 00 00 00 00 
35cd0 668 00 00 00 00 
35cd4 669 00          | 	byte	$00[9]
35cd5 669 18 18 18 18 
35cd9 66a 00 18 00 00 
35cdd 66b 66 66 66 00 
35ce1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35ce5 66d 66 FF 66 66 
35ce9 66e FF 66 00 18 
35ced 66f 7C 06 3C 60 
35cf1 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35cf5 671 66 36 18 0C 
35cf9 672 66 62 00 38 
35cfd 673 6C 38 1C F6 
35d01 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35d05 675 18 18 18 00 
35d09 676 00 00 00 00 
35d0d 677 70 38 18 18 
35d11 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35d15 679 0E 1C 18 18 
35d19 67a 1C 0E 00 00 
35d1d 67b 66 3C FF 3C 
35d21 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35d25 67d 18 18 7E 18 
35d29 67e 18 00 00 00 
35d2d 67f 00 00 00 00 
35d31 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35d35 681 00 00 7E 00 
35d39 682 00 00 00 00 
35d3d 683 00 00 00 00 
35d41 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35d45 685 60 30 18 0C 
35d49 686 06 02 00 00 
35d4d 687 3C 66 76 6E 
35d51 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35d55 689 18 1C 18 18 
35d59 68a 18 7E 00 00 
35d5d 68b 3C 66 30 18 
35d61 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35d65 68d 7E 30 18 30 
35d69 68e 66 3C 00 00 
35d6d 68f 30 38 3C 36 
35d71 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35d75 691 7E 06 3E 60 
35d79 692 66 3C 00 00 
35d7d 693 3C 06 3E 66 
35d81 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35d85 695 7E 60 30 18 
35d89 696 0C 0C 00 00 
35d8d 697 3C 66 3C 66 
35d91 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35d95 699 3C 66 7C 60 
35d99 69a 30 1C 00 00 
35d9d 69b 00 18 18 00 
35da1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35da5 69d 00 18 18 00 
35da9 69e 18 18 0C 60 
35dad 69f 30 18 0C 18 
35db1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35db5 6a1 00 7E 00 00 
35db9 6a2 7E 00 00 06 
35dbd 6a3 0C 18 30 18 
35dc1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35dc5 6a5 3C 66 30 18 
35dc9 6a6 00 18 00 00 
35dcd 6a7 3C 66 76 76 
35dd1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35dd5 6a9 18 3C 66 66 
35dd9 6aa 7E 66 00 00 
35ddd 6ab 3E 66 3E 66 
35de1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35de5 6ad 3C 66 06 06 
35de9 6ae 66 3C 00 00 
35ded 6af 1E 36 66 66 
35df1 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35df5 6b1 7E 06 3E 06 
35df9 6b2 06 7E 00 00 
35dfd 6b3 7E 06 3E 06 
35e01 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35e05 6b5 7C 06 06 76 
35e09 6b6 66 7C 00 00 
35e0d 6b7 66 66 7E 66 
35e11 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35e15 6b9 7E 18 18 18 
35e19 6ba 18 7E 00 00 
35e1d 6bb 60 60 60 60 
35e21 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35e25 6bd 66 36 1E 1E 
35e29 6be 36 66 00 00 
35e2d 6bf 06 06 06 06 
35e31 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35e35 6c1 C6 EE FE D6 
35e39 6c2 C6 C6 00 00 
35e3d 6c3 66 6E 7E 7E 
35e41 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35e45 6c5 3C 66 66 66 
35e49 6c6 66 3C 00 00 
35e4d 6c7 3E 66 66 3E 
35e51 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35e55 6c9 3C 66 66 66 
35e59 6ca 36 6C 00 00 
35e5d 6cb 3E 66 66 3E 
35e61 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35e65 6cd 3C 06 3C 60 
35e69 6ce 60 3C 00 00 
35e6d 6cf 7E 18 18 18 
35e71 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35e75 6d1 66 66 66 66 
35e79 6d2 66          | 	byte	$66[5]
35e7a 6d2 7E 00 00 66 
35e7e 6d3 66 66 66 3C 
35e82 6d4 18 00 00 C6 
35e86 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35e8a 6d6 C6 00 00 66 
35e8e 6d7 66 3C 3C 66 
35e92 6d8 66 00 00 66 
35e96 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35e9a 6da 18 00 00 7E 
35e9e 6db 30 18 0C 06 
35ea2 6dc 7E 00 00 78 
35ea6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35eaa 6de 78 00 00 02 
35eae 6df 06 0C 18 30 
35eb2 6e0 60 00 00 1E 
35eb6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35eba 6e2 1E 00 00 10 
35ebe 6e3 38 6C C6 00 
35ec2 6e4 00 00 00 00 
35ec6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35eca 6e6 FF 00 00 18 
35ece 6e7 3C 7E 7E 3C 
35ed2 6e8 18 00 00 00 
35ed6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35eda 6ea 7C 00 00 06 
35ede 6eb 06 3E 66 66 
35ee2 6ec 3E 00 00 00 
35ee6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35eea 6ee 3C 00 00 60 
35eee 6ef 60 7C 66 66 
35ef2 6f0 7C 00 00 00 
35ef6 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35efa 6f2 3C 00 00 70 
35efe 6f3 18 7C 18 18 
35f02 6f4 18 00 00 00 
35f06 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35f0a 6f6 60 3E 00 06 
35f0e 6f7 06 3E 66 66 
35f12 6f8 66 00 00 18 
35f16 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35f1a 6fa 3C 00 00 60 
35f1e 6fb 00 60 60 60 
35f22 6fc 60 3C 00 06 
35f26 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35f2a 6fe 66 00 00 1C 
35f2e 6ff 18 18 18 18 
35f32 700 3C 00 00 00 
35f36 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35f3a 702 C6 00 00 00 
35f3e 703 3E 66 66 66 
35f42 704 66 00 00 00 
35f46 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35f4a 706 3C 00 00 00 
35f4e 707 3E 66 66 3E 
35f52 708 06 06 00 00 
35f56 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35f5a 70a 60 60 00 00 
35f5e 70b 3E 66 06 06 
35f62 70c 06 00 00 00 
35f66 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35f6a 70e 3E 00 00 18 
35f6e 70f 7E 18 18 18 
35f72 710 70 00 00 00 
35f76 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35f7a 712 7C 00 00 00 
35f7e 713 66 66 66 3C 
35f82 714 18 00 00 00 
35f86 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35f8a 716 6C 00 00 00 
35f8e 717 66 3C 18 3C 
35f92 718 66 00 00 00 
35f96 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35f9a 71a 30 1E 00 00 
35f9e 71b 7E 30 18 0C 
35fa2 71c 7E 00 00 18 
35fa6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35faa 71e 3C 00 18 18 
35fae 71f 18 18 18 18 
35fb2 720 18 18 00 7E 
35fb6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35fba 722 60 00 10 18 
35fbe 723 1C 1E 1C 18 
35fc2 724 10 00 08 18 
35fc6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35fca 726 08 00       | 	byte	$08, $00
35fcc 727 00 00 00 00 
35fd0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35fd1 728 80 00 00 00 
35fd5 729 00 80 00 00 
35fd9 72a 80 80 00 00 
35fdd 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35fe1 72c 80 00 80 00 
35fe5 72d 00 40 80 00 
35fe9 72e AA AA AA 00 
35fed 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35ff1 730 FF 00 00 00 
35ff5 731 00 FF 00 00 
35ff9 732 FF FF 00 00 
35ffd 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
36001 734 FF 00 FF 00 
36005 735 00 FF FF 00 
36009 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3600c 737 00 00 00 00 
36010 738 00          | ataripalette   file "ataripalettep2.def"
36011 738 11 11 11 00 
36015 739 22 22 22 00 
36019 73a 33 33 33 00 
3601d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
36021 73c 55 55 55 00 
36025 73d 66 66 66 00 
36029 73e 77 77 77 00 
3602d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
36031 740 99 99 99 00 
36035 741 AA AA AA 00 
36039 742 BB BB BB 00 
3603d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
36041 744 DD DD DD 00 
36045 745 EE EE EE 00 
36049 746 FF FF FF 00 
3604d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
36051 748 00 14 40 00 
36055 749 00 1E 60 00 
36059 74a 00 28 80 00 
3605d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
36061 74c 00 3C BF 00 
36065 74d 00 46 DF 00 
36069 74e 00 50 FF 00 
3606d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
36071 750 39 77 FF 00 
36075 751 55 8A FF 00 
36079 752 71 9E FF 00 
3607d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
36081 754 AA C5 FF 00 
36085 755 C6 D8 FF 00 
36089 756 E3 EC FF 00 
3608d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
36091 758 00 00 40 00 
36095 759 00 00 60 00 
36099 75a 00 00 80 00 
3609d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
360a1 75c 00 00 BF 00 
360a5 75d 00 00 DF 00 
360a9 75e 00 00 FF 00 
360ad 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
360b1 760 39 39 FF 00 
360b5 761 55 55 FF 00 
360b9 762 71 71 FF 00 
360bd 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
360c1 764 AA AA FF 00 
360c5 765 C6 C6 FF 00 
360c9 766 E3 E3 FF 00 
360cd 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
360d1 768 20 00 40 00 
360d5 769 30 00 60 00 
360d9 76a 40 00 80 00 
360dd 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
360e1 76c 60 00 BF 00 
360e5 76d 70 00 DF 00 
360e9 76e 80 00 FF 00 
360ed 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
360f1 770 9C 39 FF 00 
360f5 771 AA 55 FF 00 
360f9 772 B8 71 FF 00 
360fd 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
36101 774 D5 AA FF 00 
36105 775 E3 C6 FF 00 
36109 776 F1 E3 FF 00 
3610d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
36111 778 40 00 40 00 
36115 779 60 00 60 00 
36119 77a 80 00 80 00 
3611d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
36121 77c BF 00 BF 00 
36125 77d DF 00 DF 00 
36129 77e FF 00 FF 00 
3612d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
36131 780 FF 39 FF 00 
36135 781 FF 55 FF 00 
36139 782 FF 71 FF 00 
3613d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
36141 784 FF AA FF 00 
36145 785 FF C6 FF 00 
36149 786 FF E3 FF 00 
3614d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
36151 788 40 00 20 00 
36155 789 60 00 30 00 
36159 78a 80 00 40 00 
3615d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
36161 78c BF 00 60 00 
36165 78d DF 00 70 00 
36169 78e FF 00 80 00 
3616d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
36171 790 FF 39 9C 00 
36175 791 FF 55 AA 00 
36179 792 FF 71 B8 00 
3617d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
36181 794 FF AA D5 00 
36185 795 FF C6 E3 00 
36189 796 FF E3 F1 00 
3618d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
36191 798 40 00 00 00 
36195 799 60 00 00 00 
36199 79a 80 00 00 00 
3619d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
361a1 79c BF 00 00 00 
361a5 79d DF 00 00 00 
361a9 79e FF 00 00 00 
361ad 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
361b1 7a0 FF 39 39 00 
361b5 7a1 FF 55 55 00 
361b9 7a2 FF 71 71 00 
361bd 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
361c1 7a4 FF AA AA 00 
361c5 7a5 FF C6 C6 00 
361c9 7a6 FF E3 E3 00 
361cd 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
361d1 7a8 40 10 00 00 
361d5 7a9 60 18 00 00 
361d9 7aa 80 20 00 00 
361dd 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
361e1 7ac BF 30 00 00 
361e5 7ad DF 38 00 00 
361e9 7ae FF 40 00 00 
361ed 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
361f1 7b0 FF 6A 39 00 
361f5 7b1 FF 80 55 00 
361f9 7b2 FF 95 71 00 
361fd 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
36201 7b4 FF BF AA 00 
36205 7b5 FF D5 C6 00 
36209 7b6 FF EA E3 00 
3620d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
36211 7b8 40 20 00 00 
36215 7b9 60 30 00 00 
36219 7ba 80 40 00 00 
3621d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
36221 7bc BF 60 00 00 
36225 7bd DF 70 00 00 
36229 7be FF 80 00 00 
3622d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
36231 7c0 FF 9C 39 00 
36235 7c1 FF AA 55 00 
36239 7c2 FF B8 71 00 
3623d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
36241 7c4 FF D5 AA 00 
36245 7c5 FF E3 C6 00 
36249 7c6 FF F1 E3 00 
3624d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
36251 7c8 40 30 00 00 
36255 7c9 60 48 00 00 
36259 7ca 80 60 00 00 
3625d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
36261 7cc BF 90 00 00 
36265 7cd DF A8 00 00 
36269 7ce FF C0 00 00 
3626d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
36271 7d0 FF CE 39 00 
36275 7d1 FF D5 55 00 
36279 7d2 FF DC 71 00 
3627d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
36281 7d4 FF EA AA 00 
36285 7d5 FF F1 C6 00 
36289 7d6 FF F8 E3 00 
3628d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
36291 7d8 30 40 00 00 
36295 7d9 48 60 00 00 
36299 7da 60 80 00 00 
3629d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
362a1 7dc 90 BF 00 00 
362a5 7dd A8 DF 00 00 
362a9 7de C0 FF 00 00 
362ad 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
362b1 7e0 CE FF 39 00 
362b5 7e1 D5 FF 55 00 
362b9 7e2 DC FF 71 00 
362bd 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
362c1 7e4 EA FF AA 00 
362c5 7e5 F1 FF C6 00 
362c9 7e6 F8 FF E3 00 
362cd 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
362d1 7e8 00 40 00 00 
362d5 7e9 00 60 00 00 
362d9 7ea 00 80 00 00 
362dd 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
362e1 7ec 00 BF 00 00 
362e5 7ed 00 DF 00 00 
362e9 7ee 00 FF 00 00 
362ed 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
362f1 7f0 39 FF 39 00 
362f5 7f1 55 FF 55 00 
362f9 7f2 71 FF 71 00 
362fd 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36301 7f4 AA FF AA 00 
36305 7f5 C6 FF C6 00 
36309 7f6 E3 FF E3 00 
3630d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36311 7f8 00 40 14 00 
36315 7f9 00 60 1E 00 
36319 7fa 00 80 28 00 
3631d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36321 7fc 00 BF 3C 00 
36325 7fd 00 DF 46 00 
36329 7fe 00 FF 50 00 
3632d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
36331 800 39 FF 77 00 
36335 801 55 FF 8A 00 
36339 802 71 FF 9E 00 
3633d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36341 804 AA FF C5 00 
36345 805 C6 FF D8 00 
36349 806 E3 FF EC 00 
3634d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
36351 808 00 40 28 00 
36355 809 00 60 3C 00 
36359 80a 00 80 50 00 
3635d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
36361 80c 00 BF 78 00 
36365 80d 00 DF 8C 00 
36369 80e 00 FF A0 00 
3636d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
36371 810 39 FF B5 00 
36375 811 55 FF C0 00 
36379 812 71 FF CA 00 
3637d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
36381 814 AA FF DF 00 
36385 815 C6 FF EA 00 
36389 816 E3 FF F4 00 
3638d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
36391 818 00 40 40 00 
36395 819 00 60 60 00 
36399 81a 00 80 80 00 
3639d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
363a1 81c 00 BF BF 00 
363a5 81d 00 DF DF 00 
363a9 81e 00 FF FF 00 
363ad 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
363b1 820 39 FF FF 00 
363b5 821 55 FF FF 00 
363b9 822 71 FF FF 00 
363bd 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
363c1 824 AA FF FF 00 
363c5 825 C6 FF FF 00 
363c9 826 E3 FF FF 00 
363cd 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
363d1 828 00 28 40 00 
363d5 829 00 3C 60 00 
363d9 82a 00 50 80 00 
363dd 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
363e1 82c 00 78 BF 00 
363e5 82d 00 8C DF 00 
363e9 82e 00 A0 FF 00 
363ed 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
363f1 830 39 B5 FF 00 
363f5 831 55 C0 FF 00 
363f9 832 71 CA FF 00 
363fd 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36401 834 AA DF FF 00 
36405 835 C6 EA FF 00 
36409 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3640c 837             | 
3640c 837             | '**********************************************************************************
3640c 837             | '
3640c 837             | '        Timings and colors definitions
3640c 837             | '
3640c 837             | '**********************************************************************************
3640c 837             | 
3640c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3640c 837 08 00 00 00 
36410 838 3C 00 00 00 
36414 839 08 00 00 00 
36418 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3641c 83b 07 00 00 00 
36420 83c 04 00 00 00 
36424 83d 01 00 00 00 
36428 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3642c 83f 58 02 00 00 
36430 840 20 9E 4B 14 
36434 841 FB A8 9E 01 
36438 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3643c 843 00 00 00 00 
36440 844 C0 00 00 00 
36444 845 00 00 00 00 
36448 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3644c 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3644c 847 00 75 C7 97 
36450 848 27 47 F6 0A 
36454 849 05 79 CB 9B 
36458 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3645c 84b             | 
3645c 84b             | ''--------  Initialization  ----------------------------------------------------------------
3645c 84b             | 
3645c 84b 28 0C 64 FD | hdmi            setq    #6
36460 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
36464 84d 28 10 64 FD |                 setq    #8
36468 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3646c 84f             | 
3646c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
36470 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
36474 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
36478 852 D6 C6 01 F1 |                 add     t1,hbase
3647c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
36480 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
36484 855 7B 0B 80 5F 
36488 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3648c 857 66 66 86 FF 
36490 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
36494 859             | '
36494 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
36498 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3649c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
364a0 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
364a4 85d             | 
364a4 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
364a8 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
364ac 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
364b0 860             | 
364b0 860             | ''--------  frame rendering main loop  ---------------------------------------------------
364b0 860             | 
364b0 860 28 06 64 FD | p101            setq 	#3
364b4 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
364b8 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
364bc 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
364c0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
364c4 865 00 A0 05 F6 |                 mov     dlinum, #0
364c8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
364cc 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
364d0 868             | 
364d0 868             | 
364d0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
364d4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
364d8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
364dc 86b             |                 
364dc 86b             | 
364dc 86b             | 
364dc 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
364dc 86b             |   
364dc 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
364e0 86c 29 FE 65 3D |          if_nc  setq2   #255
364e4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
364e8 86e             | 
364e8 86e             | '' -----   up porch (before the picture)
364e8 86e             | 
364e8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
364ec 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
364f0 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
364f4 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
364f8 872             |  
364f8 872             |    
364f8 872             |  
364f8 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
364fc 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36500 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
36504 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36508 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3650c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
36510 878             | 
36510 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36514 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
36518 87a 48 00 B0 FD | 		call    #dli
3651c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
36520 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
36524 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
36528 87e             |                 	
36528 87e             |                 
36528 87e             | 
36528 87e             |  
36528 87e             | '' ------- the main screen drawing starts here
36528 87e             | 
36528 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3652c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
36530 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
36534 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
36538 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3653c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36540 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
36544 885             |               
36544 885             | 
36544 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
36548 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3654c 887             | 
3654c 887             | ' ---------------- All visible lines displayed now, start vblank  
3654c 887             | 
3654c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
36550 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
36554 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
36558 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3655c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
36560 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
36564 88d             | 
36564 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
36564 88d             | 
36564 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
36564 88d             | 
36564 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
36568 88e             | 
36568 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3656c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
36570 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
36574 891             | 
36574 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
36578 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3657c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
36580 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
36584 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
36588 896             | 
36588 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3658c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
36590 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
36594 899 70 00 90 AD |     if_z        jmp     #preload
36598 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3659c 89b 94 00 90 AD |     if_z        jmp     #preload2
365a0 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
365a4 89d 0C 00 90 AD |     if_z        jmp     #p390
365a8 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
365ac 89f 28 00 90 AD |     if_z        jmp     #p391  
365b0 8a0             | 
365b0 8a0 2D 00 64 FD | p308            ret
365b4 8a1             |    
365b4 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
365b8 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
365bc 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
365c0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
365c4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
365c8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
365cc 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
365d0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
365d4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
365d8 8aa             |  
365d8 8aa             | '' --------  Reload palette. To do 
365d8 8aa             | 
365d8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
365dc 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
365e0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
365e4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
365e8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
365ec 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
365f0 8b0 70 FF 9F FD |         	jmp     #dli                
365f4 8b1             |       
365f4 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
365f4 8b1             | 
365f4 8b1             | 
365f4 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
365f4 8b1             | 
365f4 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
365f8 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
365fc 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36600 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
36604 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
36608 8b6             |         
36608 8b6             | '' -------------- Preload a line from PSRAM        
36608 8b6             |         
36608 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3660c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
36610 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
36614 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
36618 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3661c 8bb             | 
3661c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
36620 8bc 32 B7 01 F6 |                 mov     buf2,a1024
36624 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
36628 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3662c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
36630 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
36634 8c1             |  
36634 8c1             |  
36634 8c1             | preload2      '  incmod  dlinum,#3
36634 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
36638 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3663c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36640 8c4 28 02 64 FD |                 setq	#1
36644 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
36648 8c6             |                 
36648 8c6             | 
36648 8c6             | '' -------------- Draw sprites
36648 8c6             | 
36648 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3664c 8c7 10 5C 0E F5 | 		and t8,#16 wz
36650 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
36654 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
36658 8ca             | 		
36658 8ca             | 
36658 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3665c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
36660 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
36664 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
36668 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3666c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
36670 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
36674 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
36678 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3667c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
36680 8d4 01 52 86 F1 |                 sub     sprite_h,#1
36684 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
36688 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3668c 8d7             | 
3668c 8d7             | 
3668c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
36690 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
36694 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
36698 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3669c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
366a0 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
366a4 8dd 00 5E 06 F6 |                 mov 	t9,#0
366a8 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
366ac 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
366b0 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
366b4 8e1             |      
366b4 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
366b8 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
366bc 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
366c0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
366c4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
366c8 8e6             |                 
366c8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
366cc 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
366d0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
366d4 8e9             |   		
366d4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
366d8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
366dc 8eb             | 
366dc 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
366e0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
366e4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
366e8 8ee             |  
366e8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
366ec 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
366f0 8f0 10 00 90 CD |      if_c 	jmp     #p899		
366f4 8f1             | 	
366f4 8f1             | 	
366f4 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
366f8 8f2 28 CD 01 F1 | 		add	t4,sprite_w
366fc 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36700 8f4             | 
36700 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
36704 8f5             | 
36704 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
36708 8f6 01 58 86 F1 | 	 	sub     t6,#1
3670c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
36710 8f8             | 
36710 8f8 28 58 62 FD |                 setq   	t6
36714 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
36718 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3671c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
36720 8fc 24 00 90 AD |         if_z    jmp #p898
36724 8fd             |          
36724 8fd             |         
36724 8fd 70 5F 06 F6 |                 mov  t9,#368
36728 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3672c 8ff             | 
3672c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
36730 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
36734 901 FF FF 7F FF 
36738 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3673c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36740 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
36744 905 2D 01 00 F5 |                 and 0-0, t7
36748 906             |                
36748 906             | 
36748 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3674c 907 E5 E0 7A FA |                 wmlong 368,t3				
36750 908             |                 
36750 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
36754 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
36758 90a 2D 00 64 FD |                 ret
3675c 90b             | 	
3675c 90b             | 	
3675c 90b             |                
3675c 90b             |  
3675c 90b             | '' -------------- Graphics line ------------------------------------------------------------
3675c 90b             |  
3675c 90b             | 
3675c 90b             | '' consts and vars
3675c 90b             | 
3675c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
36760 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
36764 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
36768 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3676c 90f             | 
3676c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
36770 910             | 
36770 910             | '------ these longs will be set by setmode function
36770 910             | 
36770 910 00 00 00 00 | m_bs            long    0        'blanks before sync
36774 911 00 00 00 00 | m_sn            long    0        'sync
36778 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3677c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
36780 914             | 'm_border        long    0        'left/right borders
36780 914 00 00 00 00 | i_upporch       long    0        'up porch lines
36784 915 00 00 00 00 | i_vsync         long    0        'vsync lines
36788 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3678c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
36790 918 00 00 00 00 | i_totalvis      long    0
36794 919             | 
36794 919             | '-------------------------------------
36794 919             |  
36794 919 00 00 00 00 | linenum         long    0
36798 91a 00 00 00 00 | frames          long    0
3679c 91b 00 00 00 00 | dlinum long 0
367a0 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
367a4 91d             | 
367a4 91d 00 00 00 00 | vblankptr       long    0
367a8 91e 00 00 00 00 | modeptr         long    0
367ac 91f 00 00 00 00 | paletteptr      long    0
367b0 920 00 00 00 00 | dlptr           long    0
367b4 921 01 00 00 00 | hbase           long    1
367b8 922 00 00 00 00 | mailbox         long    0
367bc 923 00 00 00 00 | spriteptr          long 0
367c0 924             | 
367c0 924 00 00 00 00 | cmd             long    0
367c4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
367c8 926 00 04 00 00 | buf2            long    1024
367cc 927 01 00 00 00 | dlptr2          long    1
367d0 928 01 00 00 00 | dl              long    1
367d4 929             | 
367d4 929 00 00 00 00 | buf1c long 0
367d8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
367dc 92b 01 00 00 00 | framebuf2       long    1
367e0 92c 01 00 00 00 | hsync0          long    1
367e4 92d 01 00 00 00 | hsync1          long    1
367e8 92e             | 
367e8 92e 01 00 00 00 | t1              long    1
367ec 92f 00 00 00 00 | t2 long 0
367f0 930 00 00 00 00 | t3 long 0
367f4 931 00 00 00 00 | t4 long 0
367f8 932             | 
367f8 932 00 00 00 00 | rcnt            long    0  'dl repeat count
367fc 933 00 00 00 00 | rcnt2           long    0
36800 934 00 00 00 00 | rcnt2a          long    0
36804 935 00 00 00 00 | roffset         long    0
36808 936 00 00 00 00 | rdl             long    0  'dl repeat line
3680c 937 00 00 00 00 | dlc             long    0  'dl command
36810 938             | 
36810 938 FF FF FF FF | affffffff       long    $ffffffff
36814 939 00 00 00 00 | sprite1pointer long 0
36818 93a 00 00 00 00 | sprite1xy      long 0
3681c 93b 00 00 00 00 | sprite1wh      long 0
36820 93c 00 00 00 00 | sprite2pointer long 0
36824 93d 00 00 00 00 | sprite2xy      long 0
36828 93e 00 00 00 00 | sprite2wh      long 0
3682c 93f 00 00 00 00 | sprite3pointer long 0
36830 940 00 00 00 00 | sprite3xy      long 0
36834 941 00 00 00 00 | sprite3wh      long 0
36838 942 00 00 00 00 | sprite4pointer long 0
3683c 943 00 00 00 00 | sprite4xy      long 0
36840 944 00 00 00 00 | sprite4wh      long 0
36844 945 00 00 00 00 | sprite5pointer long 0
36848 946 00 00 00 00 | sprite5xy      long 0
3684c 947 00 00 00 00 | sprite5wh      long 0
36850 948 00 00 00 00 | sprite6pointer long 0
36854 949 00 00 00 00 | sprite6xy      long 0
36858 94a 00 00 00 00 | sprite6wh      long 0
3685c 94b 00 00 00 00 | sprite7pointer long 0
36860 94c 00 00 00 00 | sprite7xy      long 0
36864 94d 00 00 00 00 | sprite7wh      long 0
36868 94e 00 00 00 00 | sprite8pointer long 0
3686c 94f 00 00 00 00 | sprite8xy      long 0
36870 950 00 00 00 00 | sprite8wh      long 0
36874 951 00 00 00 00 | sprite9pointer long 0
36878 952 00 00 00 00 | sprite9xy      long 0
3687c 953 00 00 00 00 | sprite9wh      long 0
36880 954 00 00 00 00 | sprite10pointer long 0
36884 955 00 00 00 00 | sprite10xy      long 0
36888 956 00 00 00 00 | sprite10wh      long 0
3688c 957 00 00 00 00 | sprite11pointer long 0
36890 958 00 00 00 00 | sprite11xy      long 0
36894 959 00 00 00 00 | sprite11wh      long 0
36898 95a 00 00 00 00 | sprite12pointer long 0
3689c 95b 00 00 00 00 | sprite12xy      long 0
368a0 95c 00 00 00 00 | sprite12wh      long 0
368a4 95d 00 00 00 00 | sprite13pointer long 0
368a8 95e 00 00 00 00 | sprite13xy      long 0
368ac 95f 00 00 00 00 | sprite13wh      long 0
368b0 960 00 00 00 00 | sprite14pointer long 0
368b4 961 00 00 00 00 | sprite14xy      long 0
368b8 962 00 00 00 00 | sprite14wh      long 0
368bc 963 00 00 00 00 | sprite15pointer long 0
368c0 964 00 00 00 00 | sprite15xy      long 0
368c4 965 00 00 00 00 | sprite15wh      long 0
368c8 966 00 00 00 00 | sprite16pointer long 0
368cc 967 00 00 00 00 | sprite16xy      long 0
368d0 968 00 00 00 00 | sprite16wh      long 0
368d4 969 00 00 00 00 | sprite17pointer long 0
368d8 96a 00 00 00 00 | sprite17xy      long 0
368dc 96b 00 00 00 00 | sprite17wh      long 0
368e0 96c 00 00 00 00 | sprite18pointer long 0
368e4 96d 00 00 00 00 | sprite18xy      long 0
368e8 96e 00 00 00 00 | sprite18wh      long 0
368ec 96f 00 00 00 00 | spritenum long 0
368f0 970             | 
368f0 970 00 00 00 00 | spriteline long 0
368f4 971 84 03 00 00 | sprite_x long 900
368f8 972 00 00 00 00 | sprite_y long 0
368fc 973 10 00 00 00 | sprite_w long 16
36900 974 40 00 00 00 | sprite_h long 64
36904 975 00 00 00 00 | l2 long 0
36908 976 00 00 00 00 | t5 long 0
3690c 977 00 00 00 00 | t6 long 0
36910 978 00 00 00 00 | t7 long 0
36914 979 00 00 00 00 | t8 long 0
36918 97a 00 00 00 00 | t9 long 0
3691c 97b 00 00 00 00 | preloadaddr long 0
36920 97c 00 00 00 00 | preloadlineaddr long 0
36924 97d 00 04 00 00 | a1024 long 1024
36928 97e             | 
36928 97e E0 03 00 00 | aa long 992
3692c 97f FF 03 00 00 | a1023 long 1023
36930 980 00 10 00 00 | a4096 long 4096
36934 981             |  fit 368
36934 981             | _psram_spin2_dat_
36934 981 00 00 00 00 
      ...             
36a2c 9bf 00 00 00 00 
36a30 9c0 00 00 00 00 |     listdata long 0[8*8]
36a34 9c1             |             orgh
36a34                 | 
36a34                 | ' driver state
36a34     FF FF FF FF | drivercog   long    -1  ' COG id of driver
36a38     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36a3c                 | 
36a3c                 | ' delay profile
36a3c     07 00 00 00 
36a40     00 CF 7B 05 
36a44     80 D1 F0 08 
36a48     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36a4c     80 C4 60 0F 
36a50     80 39 7A 12 
36a54     40 2D D9 13 
36a58     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
36a5c                 | 
36a5c                 | ' data to be passed to driver when starting it
36a5c                 | startupData
36a5c     00 00 00 00 |     long    0           ' current frequency
36a60     00 00 00 00 |     long    FLAGS       ' optional flags for driver
36a64     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
36a68     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
36a6c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
36a70     7C 6A 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
36a74     FC 6A 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
36a78     1C 6B 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
36a7c                 | 
36a7c                 | ' data for memory
36a7c                 | deviceData
36a7c                 |     ' 16 bank parameters follow (16MB per bank)
36a7c     00 00 00 00 
      ...             
36ab4     00 00 00 00 
36ab8     00 00 00 00 |     long    0[16]                               ' banks 0-15
36abc                 |     ' 16 banks of pin parameters follow
36abc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36ac0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36ac4     FF FF FF FF 
      ...             
36af4     FF FF FF FF 
36af8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36afc                 | 
36afc                 | ' data for COG polling
36afc                 | qosData 
36afc     00 00 FF FF 
36b00     00 00 FF FF 
36b04     00 00 FF FF 
36b08     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36b0c     00 00 FF FF 
36b10     00 00 FF FF 
36b14     00 00 FF FF 
36b18     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36b1c                 |     
36b1c                 | ' mailbox storage
36b1c                 | 
36b1c                 | mailboxes
36b1c     00 00 00 00 
      ...             
36b74     00 00 00 00 
36b78     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
36b7c                 | 	alignl
36b7c                 | _psram16drv_spin2_dat_
36b7c                 |                             orgh
36b7c     00 00 00 00 
      ...             
36b94     00 00 00 00 
36b98     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36b9c                 | 
36b9c                 | driver_start
36b9c                 |                             org
36b9c 000             | '..................................................................................................
36b9c 000             | ' Memory layout for COG RAM once operational:
36b9c 000             | '
36b9c 000             | '  COG RAM address      Usage
36b9c 000             | '  ---------------      ----
36b9c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36b9c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36b9c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36b9c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36b9c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36b9c 000             | '  ~$198-$1F3           State and register variables
36b9c 000             | '
36b9c 000             | ' Also during driver COG startup:
36b9c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36b9c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36b9c 000             | '..................................................................................................
36b9c 000             |                             
36b9c 000             | ' Mailbox storage after vector initialization
36b9c 000             | 
36b9c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36ba0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36ba4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
36ba8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36bac 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36bb0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36bb4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
36bb8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36bbc 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36bc0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36bc4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36bc8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36bcc 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36bd0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36bd4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36bd8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36bdc 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36be0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36be4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36be8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36bec 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36bf0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36bf4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36bf8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36bfc 018             | 
36bfc 018             | ' Mailbox parameter addresses per COG once patched
36bfc 018             |                             
36bfc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36c00 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36c04 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36c08 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36c0c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36c10 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36c14 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36c18 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36c1c 020             | 
36c1c 020             | '..................................................................................................
36c1c 020             | ' Per COG request and state setup and service branching
36c1c 020             |         
36c1c 020             | cog0                 
36c1c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36c20 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36c24 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36c28 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36c2c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c30 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c34 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36c38 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36c3c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36c40 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c44 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c48 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36c4c 02c             | cog1                        
36c4c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36c50 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36c54 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36c58 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36c5c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c60 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c64 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
36c68 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36c6c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36c70 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c74 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c78 037 33 CA 63 FD |                             execf   request-0               'jump to service
36c7c 038             | cog2                         
36c7c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36c80 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36c84 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36c88 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36c8c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c90 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c94 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36c98 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36c9c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36ca0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ca4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ca8 043 33 CA 63 FD |                             execf   request-0               'jump to service
36cac 044             | cog3                        
36cac 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36cb0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36cb4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36cb8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36cbc 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36cc0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36cc4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36cc8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36ccc 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36cd0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36cd4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36cd8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36cdc 050             | cog4                        
36cdc 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36ce0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36ce4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36ce8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36cec 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36cf0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36cf4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36cf8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36cfc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36d00 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36d04 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36d08 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36d0c 05c             | cog5                        
36d0c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36d10 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36d14 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36d18 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36d1c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36d20 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36d24 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36d28 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36d2c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36d30 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36d34 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36d38 067 33 CA 63 FD |                             execf   request-0               'jump to service
36d3c 068             | cog6                        
36d3c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36d40 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36d44 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36d48 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36d4c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36d50 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36d54 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36d58 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36d5c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36d60 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36d64 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36d68 073 33 CA 63 FD |                             execf   request-0               'jump to service
36d6c 074             | cog7                        
36d6c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36d70 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36d74 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36d78 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36d7c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36d80 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36d84 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36d88 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36d8c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36d90 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36d94 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36d98 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36d9c 080             |                             fit     128
36d9c 080             | 
36d9c 080             |                             fit     128
36d9c 080             | pad                         long    0[128-$]                'align init code to $80
36d9c 080             | 
36d9c 080             | '..................................................................................................
36d9c 080             | 
36d9c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36d9c 080             | 
36d9c 080             | init                        
36d9c 080             |                             ' get driver scratch long address in hub
36d9c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36da0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36da4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36da8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36dac 084             |                     
36dac 084             |                             ' read in the additional LUT RAM code
36dac 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36db0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36db4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36db8 087             | 
36db8 087             |                             ' read the startup parameters
36db8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36dbc 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36dc0 089             | 
36dc0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36dc0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36dc4 08a             | 
36dc4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36dc8 08b 01 00 00 5F 
36dcc 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36dd0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36dd4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36dd8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36ddc 090             | 
36ddc 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36ddc 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36de0 091 01 00 00 FF 
36de4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36de8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36dec 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36df0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36df4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36df8 097 08 DE 47 F5 |                             or      a, #8
36dfc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36e00 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36e04 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36e08 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36e0c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36e10 09d 01 DE 07 F1 |                             add     a, #1
36e14 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36e18 09f             |  
36e18 09f             |                             ' setup device control pin states
36e18 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36e1c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36e20 0a1 01 00 00 FF 
36e24 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36e28 0a3             | 
36e28 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36e2c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36e30 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36e34 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36e38 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36e3c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36e40 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36e44 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36e48 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36e4c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36e50 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36e54 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36e58 0af             | pinloop
36e58 0af             |                             ' generate minimum CE high time before access
36e58 0af A1 07 00 FF 
36e5c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36e60 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36e64 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36e68 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36e6c 0b4 1F DE 63 FD |                             waitx   a                       'delay
36e70 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36e74 0b6             | 
36e74 0b6             |                             ' setup the COG mailboxes and addresses 
36e74 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36e78 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36e7c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36e80 0b9             | 
36e80 0b9 28 2E 64 FD |                             setq    #24-1
36e84 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36e88 0bb             | 
36e88 0bb             |                             ' setup the polling loop for active COGs 
36e88 0bb 01 C2 63 FD |                             cogid   id
36e8c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36e90 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36e94 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36e98 0bf 0A F0 07 F6 |                             mov     ptra, #10
36e9c 0c0 E1 F1 03 FA |                             mul     ptra, id
36ea0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36ea4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36ea8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36eac 0c4 03 C2 07 FA |                             mul     id, #3
36eb0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36eb4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36eb8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36ebc 0c8 D8 01 B0 FD |                             call    #reloadcogs
36ec0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36ec4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36ec8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36ec8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36ecc 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36ed0 0cd 08 04 DC FC |                             rep     #2, #8
36ed4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36ed8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36edc 0d0             | 
36edc 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36edc 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36edc 0d0 01 C2 63 FD |                             cogid   id
36ee0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36ee4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36ee8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36eec 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36ef0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36ef4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36ef8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36efc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36f00 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36f04 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36f08 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36f0c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36f10 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36f14 0de A5 E5 03 F1 |                             add     d, const512
36f18 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36f1c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36f20 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36f24 0e2             |                             
36f24 0e2             |                             ' setup register values for control vector loop setup after we return
36f24 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36f28 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36f2c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36f30 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36f34 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36f38 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36f3c 0e8 D0 C3 8F F9 |                             altd    id, #id0
36f40 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36f44 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36f48 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36f4c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36f50 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36f54 0ee             |  
36f54 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36f58 0ef 07 CA 07 F5 |                             and     request, #7
36f5c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36f60 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36f64 0f2             |                             fit     $100                    'ensure all init code fits this space
36f64 0f2             | 
36f64 0f2             |                             fit     $100                    'ensure all init code fits this space
36f64 0f2             | 
36f64 0f2 00 00 00 00 
      ...             
36f94 0fe 00 00 00 00 
36f98 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36f9c 100             | 
36f9c 100             | '..................................................................................................
36f9c 100             | ' Error result handling and COG notification of request completion
36f9c 100             | 
36f9c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36fa0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36fa4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36fa8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36fac 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36fb0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36fb4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36fb8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36fbc 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36fc0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36fc4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36fc8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36fcc 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36fd0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36fd4 10e             | ' Poller re-starts here after a COG is serviced
36fd4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36fd8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36fdc 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36fe0 111             | ' Main dynamic polling loop repeats until a request arrives
36fe0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36fe4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36fe8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36fec 114             | 
36fec 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36ff0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36ff4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36ff8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36ffc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
37000 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
37004 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
37008 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3700c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
37010 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
37014 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
37018 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3701c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
37020 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
37024 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
37028 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3702c 124             | 
3702c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
37030 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
37034 126             |  
37034 126             | '..................................................................................................
37034 126             | ' List handler                               
37034 126             | 
37034 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
37038 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3703c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
37040 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
37044 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
37048 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3704c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
37050 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
37054 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
37058 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3705c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
37060 131 33 00 60 FD |                             execf   0-0                     'process the request 
37064 132             | 
37064 132             | '..................................................................................................
37064 132             | ' Restoring per COG state and resuming where we left off
37064 132             | 
37064 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
37068 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3706c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
37070 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
37074 136 D8 CB FB F8 |                             getbyte request, addr1, #3
37078 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3707c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
37080 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
37084 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
37088 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3708c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
37090 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
37094 13e             |                    
37094 13e             | '..................................................................................................
37094 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
37094 13e             | 
37094 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
37098 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3709c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
370a0 141 D0 DF B7 F9 |                             setd    a, #id0
370a4 142 D8 DF BF F9 |                             sets    a, #addr1
370a8 143 FE FF FF FF 
370ac 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
370b0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
370b4 146 3F DE A7 F9 |                             alti    a, #%111_111 
370b8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
370bc 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
370c0 149 01 E2 63 FD |                             cogid   c
370c4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
370c8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
370cc 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
370d0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
370d4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
370d8 14f 00 E0 03 F6 |                             mov     b, 0-0
370dc 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
370e0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
370e4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
370e8 153 0C 00 90 AD |             if_z            jmp     #excluded               
370ec 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
370f0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
370f4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
370f8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
370fc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
37100 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
37104 15a             | 
37104 15a             | 'determine priority cogs and build instructions for the polling sequence
37104 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
37108 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3710c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
37110 15d             | 
37110 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
37114 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
37118 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3711c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
37120 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
37124 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
37128 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3712c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
37130 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
37134 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
37138 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3713c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
37140 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
37144 16a             | endprioloop
37144 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
37148 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3714c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
37150 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
37154 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
37158 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3715c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
37160 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
37164 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
37168 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3716c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
37170 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
37174 176             | 
37174 176             | ' populate the round robin COG polling instructions
37174 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
37178 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3717c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
37180 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
37184 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
37188 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3718c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
37190 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
37194 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
37198 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3719c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
371a0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
371a4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
371a8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
371ac 184             | '..................................................................................................
371ac 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
371ac 184             | 
371ac 184             | set_latency                                                 '            (a) set latency
371ac 184             | get_latency                                                 '            (b) get latency
371ac 184             | set_burst                                                   '            (c) set burst size of bank
371ac 184             | get_burst                                                   '            (d) get burst size of bank
371ac 184             |                                                             '            (e) dump state
371ac 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
371b0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
371b4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
371b8 187             |                                                             ' | | | | e  account for following AUGS
371b8 187 04 00 00 FF 
371bc 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
371c0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
371c4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
371c8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
371cc 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
371d0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
371d4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
371d8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
371dc 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
371e0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
371e4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
371e8 193             | 
371e8 193             | '..................................................................................................
371e8 193             | ' Misc EXECF code
371e8 193             | 
371e8 193 33 72 63 FD | start_read_exec             execf   newburstr
371ec 194 33 7C 63 FD | start_write_exec            execf   resumewrites
371f0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
371f4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
371f8 197             | 
371f8 197             | '..................................................................................................
371f8 197             | ' Variables
371f8 197             | 
371f8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
371fc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
37200 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
37204 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
37208 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3720c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
37210 19d             | 
37210 19d 00 00 00 80 | xfreq1          long    $80000000
37214 19e 00 00 00 40 | xfreq2          long    $40000000
37218 19f 03 00 00 00 | delay           long    3
3721c 1a0             | 
3721c 1a0             | lutcodeaddr                 
3721c 1a0             | startupparams
3721c 1a0             | excludedcogs                                    'careful: shared register use!
3721c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
37220 1a1 00 00 00 00 | flags           long    0
37224 1a2             | mask                                            'careful: shared register use!
37224 1a2 00 00 00 00 | resetmaskA      long    0
37228 1a3             | limit                                           'careful: shared register use!
37228 1a3 00 00 00 00 | resetmaskB      long    0
3722c 1a4 00 00 00 00 | datapins        long    0
37230 1a5             | const512                                        'careful: shared register use!
37230 1a5 00 00 00 00 | devicelist      long    0
37234 1a6 00 00 00 00 | coglist         long    0
37238 1a7 00 00 00 00 | mbox            long    0 
3723c 1a8             | 
3723c 1a8             | clkpin                                          'shared with code patched during init
3723c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
37240 1a9             | cspin                                           'shared with code patched during init
37240 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
37244 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
37248 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3724c 1ac 01 00 00 00 | clkdelay        long    1
37250 1ad 00 00 00 00 | regdatabus      long    0
37254 1ae             | 
37254 1ae 10 00 00 00 | deviceaddr      long    $10
37258 1af             | rrcounter
37258 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3725c 1b0             | 
3725c 1b0             | ' jump addresses for the per COG handlers
3725c 1b0 20 00 00 00 | cog0_handler    long    cog0
37260 1b1 2C 00 00 00 | cog1_handler    long    cog1
37264 1b2 38 00 00 00 | cog2_handler    long    cog2
37268 1b3 44 00 00 00 | cog3_handler    long    cog3
3726c 1b4 50 00 00 00 | cog4_handler    long    cog4
37270 1b5 5C 00 00 00 | cog5_handler    long    cog5
37274 1b6 68 00 00 00 | cog6_handler    long    cog6
37278 1b7 74 00 00 00 | cog7_handler    long    cog7
3727c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
37280 1b9             | 
37280 1b9             | ' EXECF sequences
37280 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
37284 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
37288 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3728c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
37290 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
37294 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
37298 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3729c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3729c 1c0             | 
3729c 1c0             | 
3729c 1c0             | ' SKIPF sequences
3729c 1c0             | skiptable
3729c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
372a0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
372a4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
372a8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
372ac 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
372b0 1c5 00 00 00 00 | pattern2        long    0
372b4 1c6 00 00 00 00 | pattern3        long    0
372b8 1c7 77 02 00 00 | singlelong      long    %1001110111  
372bc 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
372c0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
372c4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
372c8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
372cc 1cc             | 
372cc 1cc             | ' LUT RAM address values
372cc 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
372d0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
372d4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
372d8 1cf F6 02 00 00 | noread          long    noread_lut
372dc 1d0             | 
372dc 1d0 00 00 00 00 | id0             long    0
372e0 1d1 01 00 00 00 | id1             long    1
372e4 1d2 02 00 00 00 | id2             long    2
372e8 1d3 03 00 00 00 | id3             long    3
372ec 1d4 04 00 00 00 | id4             long    4
372f0 1d5 05 00 00 00 | id5             long    5
372f4 1d6 06 00 00 00 | id6             long    6
372f8 1d7 07 00 00 00 | id7             long    7
372fc 1d8             | 
372fc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
372fc 1d8             | 'and COG updates and need to follow immediately after id0-id7
372fc 1d8 00 00 00 00 | addr1           long    0
37300 1d9 00 00 00 00 | hubdata         long    0
37304 1da 00 00 00 00 | count           long    0
37308 1db 00 00 00 00 | addr2           long    0
3730c 1dc 00 00 00 00 | total           long    0
37310 1dd 00 00 00 00 | offset1         long    0
37314 1de 00 00 00 00 | offset2         long    0
37318 1df 00 00 00 00 | link            long    0
3731c 1e0             | 
3731c 1e0             | burstwrite                                      'note shared register use during init
3731c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37320 1e1 00 00 00 00 | id              long    0
37324 1e2             | 
37324 1e2 00 00 00 00 | header          long    0
37328 1e3 00 00 00 00 | trailer         long    0
3732c 1e4 00 00 00 00 | cmdaddr         long    0
37330 1e5 00 00 00 00 | request         long    0
37334 1e6 00 00 00 00 | rrlimit         long    0
37338 1e7 00 00 00 00 | pinconfig       long    0
3733c 1e8 00 00 00 00 | clks            long    0
37340 1e9 00 00 00 00 | resume          long    0
37344 1ea 00 00 00 00 | orighubsize     long    0
37348 1eb 00 00 00 00 | wrclks          long    0
3734c 1ec             | 
3734c 1ec 00 00 00 00 | pattern         long    0
37350 1ed 00 00 00 00 | hubscratch      long    0
37354 1ee 00 10 00 00 | val4k           long    4096
37358 1ef             | 
37358 1ef             | ' temporary general purpose regs
37358 1ef 00 00 00 00 | a               long    0
3735c 1f0 00 00 00 00 | b               long    0
37360 1f1 00 00 00 00 | c               long    0
37364 1f2 00 00 00 00 | d               long    0
37368 1f3             |                 fit     502
37368 1f3             | 
37368 1f3             |                 fit     502
37368 1f3             | 
37368 1f3             | '..................................................................................................
37368 1f3             | 
37368 1f3             |             orgh
37368                 | 
37368                 | lut_code
37368                 | 'HW init code up to 80 longs
37368                 | 
37368                 | '..................................................................................................
37368                 | ' Memory layout for LUT RAM once operational:
37368                 | '
37368                 | '  LUT RAM address      Usage
37368                 | '  ---------------      ----
37368                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
37368                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
37368                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
37368                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
37368                 | '
37368                 | ' Also during driver COG startup:
37368                 | ' $230-$24F is used for HW init setup
37368                 | ' $250-$26F is used as temporary vector storage 
37368                 | '..................................................................................................
37368                 | 
37368                 |                 org $230    
37368 230             | 
37368 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
37368 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3736c 231 24 16 60 FD |                             pollxfi
37370 232 FF AA 2A FF 
37374 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
37378 234 28 00 B0 FD |                             call    #sendqspi
3737c 235 07 F8 07 FF 
37380 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
37384 237 28 00 B0 FD |                             call    #sendspi
37388 238 F8 07 78 FF 
3738c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
37390 23a 1C 00 B0 FD |                             call    #sendspi
37394 23b 7F 78 78 FF 
37398 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3739c 23d 10 00 B0 FD |                             call    #sendspi 
373a0 23e 2D 00 64 FD |                             ret
373a4 23f             | 
373a4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
373a8 240 32 0C 64 FD |                             skipf   #%110
373ac 241 9C EF 03 F6 |                             mov     pb, xsendimm
373b0 242             | 
373b0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
373b4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
373b8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
373bc 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
373c0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
373c4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
373c8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
373cc 249 50 48 63 FD |                             fltl    datapins                'float data bus
373d0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
373d4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
373d8 24c             | 
373d8 24c 00 00 00 00 
373dc 24d 00 00 00 00 
373e0 24e 00 00 00 00 
373e4 24f 00 00 00 00 |                 long    0[$270-32-$]
373e8 250             |                 fit     $270-32  ' keep room for 32 vector longs
373e8 250             |     
373e8 250             |                 fit     $270-32  ' keep room for 32 vector longs
373e8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
373e8 250             | rw_vect ' PSRAM jump vectors
373e8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
373ec 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
373f0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
373f4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
373f8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
373fc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37400 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
37404 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
37408 258             | ro_vect ' R/O PSRAM jump vectors
37408 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3740c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37410 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37414 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37418 25c 00 01 00 00 |                 long    unsupported
3741c 25d 00 01 00 00 |                 long    unsupported
37420 25e 00 01 00 00 |                 long    unsupported
37424 25f 00 01 00 00 |                 long    unsupported
37428 260             | ctrl_vect ' Control jump vectors
37428 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3742c 261 00 01 00 00 |                 long    unsupported
37430 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
37434 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
37438 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3743c 265 00 01 00 00 |                 long    unsupported
37440 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
37444 267 3E 01 00 00 |                 long    reconfig 
37448 268             | no_vect ' Invalid bank jump vectors
37448 268 01 01 00 00 |                 long    invalidbank
3744c 269 01 01 00 00 |                 long    invalidbank
37450 26a 01 01 00 00 |                 long    invalidbank
37454 26b 01 01 00 00 |                 long    invalidbank
37458 26c 01 01 00 00 |                 long    invalidbank
3745c 26d 01 01 00 00 |                 long    invalidbank
37460 26e 01 01 00 00 |                 long    invalidbank
37464 26f 01 01 00 00 |                 long    invalidbank
37468 270             |                 fit     $270
37468 270             | 
37468 270             |                 fit     $270
37468 270             | '..................................................................................................
37468 270             | ' PSRAM READS
37468 270             |                                                             ' a b c d e f
37468 270             |                                                             ' B W L B R L  (a) byte read
37468 270             |                                                             ' Y O O U E O  (b) word read
37468 270             |                                                             ' T R N R S C  (c) long read
37468 270             |                                                             ' E D G S U K  (d) new burst read
37468 270             |                                                             '       T M E  (e) resumed sub-burst
37468 270             |                                                             '         E D  (f) locked sub-burst
37468 270             | 
37468 270             | 
37468 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3746c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
37470 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
37474 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
37478 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3747c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
37480 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
37484 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
37488 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3748c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
37490 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
37494 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
37498 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3749c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
374a0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
374a4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
374a8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
374ac 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
374b0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
374b4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
374b8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
374bc 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
374c0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
374c4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
374c8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
374cc 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
374d0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
374d4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
374d8 28c             | 
374d8 28c             |                             ' fall through to read bursts
374d8 28c             |                         
374d8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
374d8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
374dc 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
374e0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
374e4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
374e8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
374ec 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
374f0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
374f4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
374f8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
374fc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37500 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
37504 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
37508 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3750c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
37510 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
37514 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
37518 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3751c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
37520 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
37524 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
37528 2a0 E8 D1 03 F1 |                             add     clks, clks
3752c 2a1             | readcommon
3752c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
37530 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37534 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
37538 2a4             | 
37538 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3753c 2a5 69 C8 63 FD |                             rev     cmdaddr
37540 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37544 2a7 61 C8 63 FD |                             mergeb  cmdaddr
37548 2a8             | 
37548 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3754c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
37550 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
37550 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
37554 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
37558 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3755c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
37560 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
37560 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
37564 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
37568 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3756c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
37570 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
37574 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
37578 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
37578 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3757c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
37580 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
37584 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
37588 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3758c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
37590 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
37594 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
37598 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3759c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
375a0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
375a4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
375a8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
375ac 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
375b0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
375b0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
375b4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
375b8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
375bc 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
375c0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
375c4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
375c8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
375cc 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
375d0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
375d4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
375d8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
375dc 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
375e0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
375e4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
375e8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
375ec 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
375f0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
375f4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
375f8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
375fc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37600 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
37604 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
37608 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3760c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
37610 2da 10 03 90 FD |                             jmp     #writecommon
37614 2db             | 
37614 2db             | '..................................................................................................
37614 2db             | ' Burst continuation testing
37614 2db             | 
37614 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
37618 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3761c 2dd             | continue_read_lut          
3761c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
37620 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
37624 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
37628 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3762c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
37630 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
37634 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
37638 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3763c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37640 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
37644 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
37648 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3764c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
37650 2ea             | 
37650 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
37654 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
37658 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3765c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
37660 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
37664 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
37668 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3766c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
37670 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
37674 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
37678 2f4 2A 1C 66 0D |             _ret_           push    #poller
3767c 2f5             | 
3767c 2f5             | 
3767c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
37680 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
37680 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
37684 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
37688 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3768c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
37690 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
37694 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
37698 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3769c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
376a0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
376a4 2ff             | '..................................................................................................
376a4 2ff             | ' Completion of requests
376a4 2ff             | 
376a4 2ff             | complete_rw_lut             
376a4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
376a8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
376ac 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
376b0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
376b4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
376b8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
376bc 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
376c0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
376c4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
376c8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
376cc 309 32 62 64 AD |             if_z            skipf   #%110001
376d0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
376d4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
376d8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
376dc 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
376e0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
376e4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
376e8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
376ec 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
376f0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
376f4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
376f8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
376fc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37700 316             |                                                             ' skipcase (a) gfx copy to/from hub
37700 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37700 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37700 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
37704 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
37708 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3770c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
37710 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
37714 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
37718 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3771c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
37720 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
37724 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
37728 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3772c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
37730 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
37734 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
37738 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3773c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37740 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
37744 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
37748 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3774c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
37750 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
37754 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
37758 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3775c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
37760 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
37764 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
37768 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3776c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
37770 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
37774 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
37778 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3777c 335 DF B7 03 A6 |             if_z            mov     addr2, link
37780 336 34 FF 9F AD |             if_z            jmp     #checknext
37784 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
37788 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3778c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
37790 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
37794 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
37798 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3779c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
377a0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
377a4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
377a8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
377ac 341             | 
377ac 341             | '..................................................................................................
377ac 341             | ' PSRAM WRITES
377ac 341             |                                                             '  a b c d e f g h
377ac 341             | 
377ac 341             |                                                             '  B W L F B R L L (a) byte write(s)
377ac 341             |                                                             '  Y O O I U E O O (b) word write(s)
377ac 341             |                                                             '  T R N L R S C C (c) long write(s)
377ac 341             |                                                             '  E D G L S U K K (d) resumed fill
377ac 341             |                                                             '          T M E E (e) new burst write
377ac 341             |                                                             '            E D D (f) resumed burst
377ac 341             |                                                             '              F B (g) locked fill
377ac 341             |                                                             '              I U (h) locked burst write
377ac 341             |                                                             '              L R 
377ac 341             |                                                             '              L S 
377ac 341             |                                                             '                T 
377ac 341             | 
377ac 341             | w_single                   
377ac 341             | w_fill_cont           
377ac 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
377b0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
377b4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
377b8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
377bc 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
377c0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
377c4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
377c8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
377cc 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
377d0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
377d4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
377d8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
377dc 34d             |                ' disable call to r_resume_burst for single longs when z=0
377dc 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
377e0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
377e4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
377e8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
377ec 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
377f0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
377f4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
377f8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
377fc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37800 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
37804 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
37808 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3780c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
37810 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
37814 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
37818 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3781c 35d             |         
3781c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3781c 35d             |             '
3781c 35d             |             '  At least one of these 3 optional components will be sent
3781c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3781c 35d             |             '     body - N x full longs of data
3781c 35d             |             '     trailer - last partial long of data
3781c 35d             |             '
3781c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3781c 35d             |             '
3781c 35d             |             'Case    Type                           Sends
3781c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3781c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3781c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3781c 35d             |             ' 4)     Multiple long fill             body only
3781c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3781c 35d             | 
3781c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3781c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
37820 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37824 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37828 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3782c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
37830 362 13 8C 07 F6 |                             mov     pattern3, #%10011
37834 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
37838 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3783c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37840 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
37844 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
37848 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3784c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
37850 36a             |                             
37850 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37854 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
37858 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3785c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
37860 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
37864 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
37868 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3786c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
37870 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
37874 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
37878 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3787c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
37880 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
37884 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
37888 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3788c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
37890 37a             | 
37890 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37894 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
37898 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3789c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
378a0 37e             |                  
378a0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
378a4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
378a8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
378ac 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
378b0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
378b4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
378b8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
378bc 385             | 
378bc 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
378c0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
378c4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
378c8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
378cc 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
378d0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
378d4 38b             | 
378d4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
378d4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
378d8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
378dc 38d 2A B0 63 FD |                             push    addr1                   'save address
378e0 38e             | 
378e0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
378e0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
378e4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
378e8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
378ec 391             |             
378ec 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
378f0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
378f4 393 2B B0 63 FD |                             pop     addr1                   'restore address
378f8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
378fc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37900 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
37904 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
37908 398             | 
37908 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3790c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37910 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
37914 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
37918 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3791c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37920 39e             | 
37920 39e             |                             'trailer is done
37920 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
37924 39f             | 
37924 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
37928 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3792c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
37930 3a2             | 
37930 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37934 3a3 69 C8 63 FD |                             rev     cmdaddr                 
37938 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3793c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37940 3a6             |                             
37940 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
37944 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37948 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3794c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37950 3aa             |                                                          
37950 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
37954 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
37958 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3795c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
37960 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
37964 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
37968 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3796c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
37970 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
37974 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
37978 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3797c 3b5             |  
3797c 3b5 59 52 63 FD |                             drvh    cspin
37980 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
37984 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
37988 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3798c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
37990 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
37994 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
37998 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3799c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
379a0 3be EA E5 03 F6 |                             mov     d, orighubsize
379a4 3bf EF E5 63 F0 |                             shl     d, a
379a8 3c0 F2 E3 83 F1 |                             sub     c, d
379ac 3c1 DD E3 03 F1 |                             add     c, offset1
379b0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
379b4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
379b8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
379bc 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
379c0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
379c4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
379c8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
379cc 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
379d0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
379d4 3cb BB D3 03 F6 |                             mov     resume, restorefill
379d8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
379dc 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
379e0 3ce 6C FC BF CD |             if_c            call    #yield
379e4 3cf 2D 00 64 FD |                             ret
379e8 3d0             |                            
379e8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
379e8 3d0             |                       '     rczl    pa                      'rotate left into address offset
379e8 3d0             |                       '     rczl    c wcz                   'restore count and flags
379e8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
379ec 3d1 02 EC 67 F0 |                             shl     pa, #2
379f0 3d2 28 06 64 AD |             if_z            setq    #3
379f4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
379f8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
379fc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37a00 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
37a04 3d7             | 
37a04 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
37a08 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37a0c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37a10 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
37a14 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
37a18 3dc             |                 fit 1024-32
37a18 3dc             |         
37a18 3dc             | 
37a18 3dc             | '..................................................................................................
37a18 3dc             | 
37a18 3dc             |                 fit 1024-32
37a18 3dc 00 00 00 00 
37a1c 3dd 00 00 00 00 
37a20 3de 00 00 00 00 
37a24 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
37a28 3e0             |                 org 1024-32
37a28 000             | 
37a28 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
37a28 000 00 00 00 00 |                 long $0000
37a2c 001 11 11 00 00 |                 long $1111
37a30 002 22 22 00 00 |                 long $2222
37a34 003 33 33 00 00 |                 long $3333
37a38 004 44 44 00 00 |                 long $4444
37a3c 005 55 55 00 00 |                 long $5555
37a40 006 66 66 00 00 |                 long $6666
37a44 007 77 77 00 00 |                 long $7777
37a48 008 88 88 00 00 |                 long $8888
37a4c 009 99 99 00 00 |                 long $9999
37a50 00a AA AA 00 00 |                 long $aaaa
37a54 00b BB BB 00 00 |                 long $bbbb
37a58 00c CC CC 00 00 |                 long $cccc
37a5c 00d DD DD 00 00 |                 long $dddd
37a60 00e EE EE 00 00 |                 long $eeee
37a64 00f FF FF 00 00 |                 long $ffff
37a68 010             | 
37a68 010             | 'masks
37a68 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
37a6c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
37a70 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
37a74 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
37a78 014             | 
37a78 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
37a7c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
37a80 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
37a84 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
37a88 018             | 
37a88 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
37a8c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
37a90 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
37a94 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
37a98 01c             | 
37a98 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
37a9c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
37aa0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
37aa4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
37aa8 020             |         fit 1024
37aa8 020             | 
37aa8 020             |         fit 1024
37aa8 020             | 
37aa8 020             | '--------------------------------------------------------------------------------------------------
37aa8 020             |         orgh
37aa8                 | 
37aa8                 | gfxexpansion
37aa8                 |                             'simple line drawing graphics expansion of memory driver
37aa8                 |                             'jmp     #donerepeats                'just return for now
37aa8                 | 
37aa8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37aac     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37ab0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
37ab4     DD E1 03 F6 |                             mov     b, offset1              'get error term
37ab8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37abc     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37ac0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37ac4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37ac8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37acc     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37ad0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37ad4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
37ad8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37adc     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37ae0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
37ae4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
37ae8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37aec     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37af0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
37af4     DC E5 33 F9 |                             getword d, total, #0            'get line width
37af8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37afc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37b00     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
37b04     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
37b08     C3 03 80 FD |                             jmp     #readmask               'continue filling
37b0c                 | 	alignl
37b0c                 | _usbnew_spin2_dat_
37b0c                 |                 org     $000
37b0c 000             | 
37b0c 000             | usb_host_start
37b0c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37b10 001             | 
37b10 001 03 00 00 FF 
37b14 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
37b18 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37b1c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37b20 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
37b24 006 29 70 63 FD |                 setq2   htmp
37b28 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37b2c 008             | 
37b2c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37b30 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
37b34 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37b38 00b             | 
37b38 00b             | '------------------------------------------------------------------------------
37b38 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37b38 00b             | ' special because the receiving function must not respond with either STALL or
37b38 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37b38 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37b38 00b             | ' corrupt packet, it must ignore the transaction
37b38 00b             | '------------------------------------------------------------------------------
37b38 00b             | ' On entry:
37b38 00b             | '   PTRA - start address of the SETUP data struct.
37b38 00b             | ' On exit:
37b38 00b             | '   retval - PID_ACK on success, otherwise error code.
37b38 00b             | '------------------------------------------------------------------------------
37b38 00b             | txn_setup
37b38 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37b3c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37b40 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
37b44 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37b48 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37b4c 010             | .setup
37b4c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37b50 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37b54 012 2D 00 64 AD |         if_z    ret
37b58 013 7C 0B B0 FD |                 call    #retry_wait
37b5c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37b60 015 2D 00 64 AD |         if_z    ret
37b64 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
37b68 017 E0 FF 9F FD |                 jmp     #.setup
37b6c 018             | 
37b6c 018             | '------------------------------------------------------------------------------
37b6c 018             | ' IN/INTERRUPT transaction.
37b6c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
37b6c 018             | '------------------------------------------------------------------------------
37b6c 018             | ' On entry:
37b6c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
37b6c 018             | '     CRC(b19..23).
37b6c 018             | ' On exit:
37b6c 018             | '------------------------------------------------------------------------------
37b6c 018             | txn_in
37b6c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37b70 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
37b74 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
37b78 01b             | 
37b78 01b             |                 ' Fall through to urx_packet
37b78 01b             | 
37b78 01b             | '------------------------------------------------------------------------------
37b78 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
37b78 01b             | ' received are handshakes and IN DATAx.
37b78 01b             | '------------------------------------------------------------------------------
37b78 01b             | ' On entry:
37b78 01b             | ' On exit:
37b78 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
37b78 01b             | '     returned.
37b78 01b             | '------------------------------------------------------------------------------
37b78 01b             | urx_packet
37b78 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
37b7c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b80 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
37b84 01e 1A 92 63 FD |                 getct   hct2
37b88 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37b8c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37b90 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37b94 022             | .wait_sop
37b94 022 22 A7 8A FA |                 rdpin   urx, dm
37b98 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b9c 024 08 00 90 CD |         if_c    jmp     #.get_pid
37ba0 025 FC 25 CC FB |                 jnct2   #.wait_sop
37ba4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
37ba8 027             | .get_pid
37ba8 027 28 02 B0 FD |                 call    #urx_next
37bac 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37bb0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37bb4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
37bb8 02b             | .chk_pid
37bb8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37bbc 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37bc0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37bc4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37bc8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37bcc 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37bd0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37bd4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37bd8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37bdc 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37be0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37be4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37be8 037             | .ack_resend
37be8 037 22 A7 82 FA |                 rqpin   urx, dm
37bec 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37bf0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37bf4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37bf8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37bfc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37c00 03d             | .chk_eop
37c00 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37c04 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37c08 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37c0c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37c10 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37c14 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37c18 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37c1c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37c20 045 2D 00 64 FD |                 ret
37c24 046             | .idle
37c24 046 22 A7 82 FA |                 rqpin   urx, dm
37c28 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37c2c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37c30 049 2D 00 64 FD |                 ret
37c34 04a             | 
37c34 04a             | '------------------------------------------------------------------------------
37c34 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37c34 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37c34 04a             | ' if one is required.
37c34 04a             | '------------------------------------------------------------------------------
37c34 04a             | ' On entry:
37c34 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37c34 04a             | ' On exit:
37c34 04a             | '------------------------------------------------------------------------------
37c34 04a             | utx_token
37c34 04a 22 A7 82 FA |                 rqpin   urx, dm
37c38 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37c3c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37c40 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37c44 04e 34 0D B0 CD |         if_c    call    #utx_pre
37c48 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37c4c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37c50 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37c54 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37c58 053             | .next_byte
37c58 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37c5c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37c60 055             | .wait
37c60 055 40 46 72 FD |                 testp   dp                      wc
37c64 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
37c68 057 23 03 08 FC |                 akpin   dp
37c6c 058 22 A5 22 FC |                 wypin   utx, dm
37c70 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37c74 05a             | 
37c74 05a             | '------------------------------------------------------------------------------
37c74 05a             | ' SETUP/OUT/INTERRUPT transaction.
37c74 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37c74 05a             | '------------------------------------------------------------------------------
37c74 05a             | ' On entry:
37c74 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37c74 05a             | '     CRC(b19..23).
37c74 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37c74 05a             | '   pkt_data - count of DATAx payload bytes to send.
37c74 05a             | ' On exit:
37c74 05a             | '------------------------------------------------------------------------------
37c74 05a             | txn_out
37c74 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37c78 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37c7c 05c 00 00 C0 FF 
37c80 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37c84 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37c88 05f             | 
37c88 05f             |                 ' Fall through to utx_data
37c88 05f             | 
37c88 05f             | '------------------------------------------------------------------------------
37c88 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37c88 05f             | ' calculated while the data byte is being shifted out. Since data stage
37c88 05f             | ' success/fail is not determined until the status stage of the transaction,
37c88 05f             | ' this routine is only concerned about the current DATAx packet.
37c88 05f             | '------------------------------------------------------------------------------
37c88 05f             | ' On entry:
37c88 05f             | '   PTRA - hub start address of the data to read.
37c88 05f             | '   pkt_cnt - data payload size.
37c88 05f             | ' On exit:
37c88 05f             | '------------------------------------------------------------------------------
37c88 05f             | utx_data
37c88 05f 22 A7 82 FA |                 rqpin   urx, dm
37c8c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37c90 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37c94 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37c98 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37c9c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37ca0 065 D8 0C B0 CD |         if_c    call    #utx_pre
37ca4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37ca8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37cac 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37cb0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37cb4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37cb8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37cbc 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37cc0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37cc4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37cc8 06f             | .read_byte
37cc8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37ccc 070 F0 00 B0 FD |                 call    #utx_byte
37cd0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37cd4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37cd8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37cdc 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37ce0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37ce4 076             | .send_crc
37ce4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37ce8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37cec 078 D0 00 B0 FD |                 call    #utx_byte
37cf0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37cf4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37cf8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37cfc 07c             | 
37cfc 07c             | '------------------------------------------------------------------------------
37cfc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37cfc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37cfc 07c             | ' expects that the packet includes at least the CRC word.
37cfc 07c             | '
37cfc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37cfc 07c             | ' was requested, which makes it difficult to determine where the data stops
37cfc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37cfc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37cfc 07c             | ' USB-16 expected residual value of 0xB001.
37cfc 07c             | '
37cfc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37cfc 07c             | ' so the caller can verify IN success before writing the data to its final
37cfc 07c             | ' destination.
37cfc 07c             | '------------------------------------------------------------------------------
37cfc 07c             | ' On entry:
37cfc 07c             | '   pkt_data - max byte count expected to be in the packet.
37cfc 07c             | '   newb_flg - signals new byte ready when toggled.
37cfc 07c             | ' On exit:
37cfc 07c             | '   pkt_cnt - actual number of bytes read.
37cfc 07c             | '------------------------------------------------------------------------------
37cfc 07c             | urx_data
37cfc 07c F7 75 03 F6 |                 mov     htmp2, pb
37d00 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37d04 07e 00 00 C0 FF 
37d08 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37d0c 080 BA EF 03 F6 |                 mov     pb, htmp2
37d10 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37d14 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37d18 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37d1c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37d20 085             | .wait_byte
37d20 085             | ' In-line rx for max speed
37d20 085 22 A7 82 FA |                 rqpin   urx, dm
37d24 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37d28 087 53 A5 02 F5 |                 and     utx, urx
37d2c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37d30 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37d34 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37d38 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37d3c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37d40 08d DC FF 9F FD |                 jmp     #.wait_byte
37d44 08e             | .get_byte
37d44 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37d48 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37d4c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37d50 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37d54 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37d58 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37d5c 094             | .end_crc
37d5c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37d60 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37d64 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37d68 097 2D 00 64 1D |         if_a    ret
37d6c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37d6c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37d6c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37d6c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37d6c 098 22 A7 82 FA |                 rqpin   urx, dm
37d70 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37d74 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37d78 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37d78 09b             | .chk_crc
37d78 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37d7c 09c 58 00 00 FF 
37d80 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37d84 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37d88 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37d8c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37d90 0a1 34 09 B0 FD |                 call    #poll_waitx
37d94 0a2             | 
37d94 0a2             |                 ' Fall through to utx_handshake
37d94 0a2             | 
37d94 0a2             | '------------------------------------------------------------------------------
37d94 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37d94 0a2             | ' the appropriate IP delay has been inserted.
37d94 0a2             | '------------------------------------------------------------------------------
37d94 0a2             | ' On entry:
37d94 0a2             | '   retval - handshake PID to send.
37d94 0a2             | ' On exit:
37d94 0a2             | '   retval unchanged.
37d94 0a2             | '------------------------------------------------------------------------------
37d94 0a2             | utx_handshake
37d94 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37d98 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37d9c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37da0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37da4 0a6 5F A5 02 F6 |                 mov     utx, retval
37da8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37dac 0a8             | .idle
37dac 0a8 22 A7 82 FA |                 rqpin   urx, dm
37db0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37db4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37db8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37dbc 0ac 08 09 90 FD |                 jmp     #poll_waitx
37dc0 0ad             | 
37dc0 0ad             | '------------------------------------------------------------------------------
37dc0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37dc0 0ad             | '------------------------------------------------------------------------------
37dc0 0ad             | ' On entry:
37dc0 0ad             | '   utx - byte to transmit.
37dc0 0ad             | ' On exit:
37dc0 0ad             | '------------------------------------------------------------------------------
37dc0 0ad             | utx_byte
37dc0 0ad 40 46 72 FD |                 testp   dp                      wc
37dc4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37dc8 0af 23 03 08 FC |                 akpin   dp
37dcc 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37dd0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37dd4 0b2             | 
37dd4 0b2             | '------------------------------------------------------------------------------
37dd4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37dd4 0b2             | '------------------------------------------------------------------------------
37dd4 0b2             | ' On entry:
37dd4 0b2             | ' On exit:
37dd4 0b2             | '   retval - the byte read.
37dd4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37dd4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37dd4 0b2             | '     received.
37dd4 0b2             | '------------------------------------------------------------------------------
37dd4 0b2             | urx_next
37dd4 0b2 22 A7 8A FA |                 rdpin   urx, dm
37dd8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37ddc 0b4 53 A5 02 F5 |                 and     utx, urx
37de0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37de4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37de8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37dec 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37df0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37df4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37df8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37dfc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37e00 0bd 2D 00 64 FD |                 ret
37e04 0be             | 
37e04 0be             | '------------------------------------------------------------------------------
37e04 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37e04 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37e04 0be             | ' length, and the PID is not included in the CRC calculation:
37e04 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37e04 0be             | '  CRC5  ENDP ADDRESS PID
37e04 0be             | ' %00000_1111_1111111_xxxxxxxx
37e04 0be             | '------------------------------------------------------------------------------
37e04 0be             | ' On entry:
37e04 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37e04 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37e04 0be             | ' On exit:
37e04 0be             | '   ep_addr_pid - CRC value appended to the packet.
37e04 0be             | '------------------------------------------------------------------------------
37e04 0be             | calc_crc5
37e04 0be FF 03 00 FF 
37e08 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37e0c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37e10 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37e14 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37e18 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37e1c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37e20 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37e24 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37e28 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37e2c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37e30 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37e34 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37e38 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37e3c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37e40 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37e44 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37e48 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37e4c 0d0             | 
37e4c 0d0             | '------------------------------------------------------------------------------
37e4c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37e4c 0d0             | '------------------------------------------------------------------------------
37e4c 0d0             | isr1_fsframe
37e4c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37e50 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37e54 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37e58 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37e5c 0d4             | .wait
37e5c 0d4 40 46 72 FD |                 testp   dp                      wc
37e60 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37e64 0d6 23 03 08 FC |                 akpin   dp
37e68 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37e6c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37e70 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37e74 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37e78 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37e7c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37e80 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37e84 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37e88 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37e8c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37e90 0e1 2C FF BF FD |                 call    #utx_byte
37e94 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37e98 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37e9c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37ea0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37ea4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37ea8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37eac 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37eb0 0e9 5B A5 42 F5 |                 or      utx, icrc
37eb4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37eb8 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37ebc 0ec 20 00 90 FD |                 jmp     #isr1_wait
37ec0 0ed             | isr1_lsframe
37ec0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37ec4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37ec8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37ecc 0f0             | .wait
37ecc 0f0 40 46 72 FD |                 testp   dp                      wc
37ed0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37ed4 0f2 23 03 08 FC |                 akpin   dp
37ed8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37edc 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37ee0 0f5             | isr1_wait
37ee0 0f5 22 A5 82 FA |                 rqpin   utx, dm
37ee4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37ee8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37eec 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37ef0 0f9 03 00 00 FF 
37ef4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37ef8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37efc 0fc F5 FF 3B FB |                 reti1
37f00 0fd             | 
37f00 0fd             | '------------------------------------------------------------------------------
37f00 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37f00 0fd             | ' transaction will complete before the next frame is triggered.
37f00 0fd             | '------------------------------------------------------------------------------
37f00 0fd             | ' On entry:
37f00 0fd             | ' On exit:
37f00 0fd             | '------------------------------------------------------------------------------
37f00 0fd             | wait_txn_ok
37f00 0fd 1A 74 63 FD |                 getct   htmp2
37f04 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37f08 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37f0c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37f10 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37f14 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37f18 103 2D 00 64 FD |                 ret
37f1c 104             | 
37f1c 104             | '------------------------------------------------------------------------------
37f1c 104             | ' A device connection was detected, or a bus reset was requested by the USB
37f1c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37f1c 104             | ' and perform a reset sequence prior to device enumeration.
37f1c 104             | '------------------------------------------------------------------------------
37f1c 104             | dev_reset
37f1c 104 22 A7 82 FA |                 rqpin   urx, dm
37f20 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37f24 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37f28 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37f2c 108             | reset
37f2c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37f30 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37f34 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37f38 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37f3c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37f40 10d 1A 92 62 FD |                 getct   iframe_ct_base
37f44 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37f48 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37f4c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37f50 111 24 70 07 F1 |                 add     htmp, #36
37f54 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37f58 113             | .framewait
37f58 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37f5c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37f60 115 2D 00 64 FD |                 ret
37f64 116             | 
37f64 116             | '------------------------------------------------------------------------------
37f64 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37f64 116             | '------------------------------------------------------------------------------
37f64 116             | ' On entry:
37f64 116             | '   PTRA - source address.
37f64 116             | '   PB - destination address.
37f64 116             | '   hr0 - length of copy, in bytes.
37f64 116             | ' On exit:
37f64 116             | '------------------------------------------------------------------------------
37f64 116             | hmemcpy
37f64 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37f68 117 F7 71 43 FC |                 wrbyte  htmp, pb
37f6c 118 01 EE 07 F1 |                 add     pb, #1
37f70 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37f74 11a             | 
37f74 11a             | '------------------------------------------------------------------------------
37f74 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37f74 11a             | ' loop until the errant device is disconnected.
37f74 11a             | '------------------------------------------------------------------------------
37f74 11a             | ' On entry:
37f74 11a             | ' On exit:
37f74 11a             | '------------------------------------------------------------------------------
37f74 11a             | host_error
37f74 11a             |           if ERROR_LED >= 0
37f74 11a             |           end
37f74 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37f78 11b             | 
37f78 11b             | '------------------------------------------------------------------------------
37f78 11b             | ' Get HID descriptor buffer for current port
37f78 11b             | '------------------------------------------------------------------------------
37f78 11b             | ' On entry:
37f78 11b             | ' On exit:
37f78 11b             | '   PB - HID descriptor buffer pointer
37f78 11b             | '------------------------------------------------------------------------------
37f78 11b             | get_hid_descr_buffer
37f78 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37f7c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37f80 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37f84 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37f88 11f             | 
37f88 11f             | 
37f88 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37f8c 120             | 
37f8c 120             | ' USB commands and error codes
37f8c 120 00 00 00 00 | cmd_data        long    0
37f90 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37f94 122             | 
37f94 122             | ' Parameters block assigned at cog startup
37f94 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37f98 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37f9c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37fa0 125             | if ACTIVITY_LED >= 0
37fa0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37fa0 125             | end
37fa0 125             | if ERROR_LED >= 0
37fa0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37fa0 125             | end
37fa0 125 00 00 00 00 | hid_descr_p     long    0
37fa4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37fa4 126             | 'hkbd_report_p   long    0
37fa4 126 00 00 00 00 | hub_descr_p     long    0
37fa8 127 00 00 00 00 | urx_buff_p      long    0
37fac 128 00 00 00 00 | dev_desc_buff_p long    0
37fb0 129 00 00 00 00 | con_desc_buff_p long    0
37fb4 12a 00 00 00 00 | cache_start_p   long    0
37fb8 12b 00 00 00 00 | cache_end_p     long    0
37fbc 12c             | if EMUPAD_MAX_PLAYER > 0
37fbc 12c             | emupad_out_ptr  long    0
37fbc 12c             | end
37fbc 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37fc0 12d             | 
37fc0 12d             | hdev_init_start
37fc0 12d             | hdev_port       res     1
37fc0 12d             | hdev_port       res     1
37fc0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37fc0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37fc0 12d             | kbm_next_datax  res     1
37fc0 12d             | kbm_next_datax  res     1
37fc0 12d             | hub_intf_num    res     1
37fc0 12d             | hub_intf_num    res     1
37fc0 12d             | hub_next_datax  res     1
37fc0 12d             | hub_next_datax  res     1
37fc0 12d             | hub_status_chg  res     1
37fc0 12d             | hub_status_chg  res     1
37fc0 12d             | hub_port_status res     1
37fc0 12d             | hub_port_status res     1
37fc0 12d             | if HAVE_MOUSE
37fc0 12d             | ms_intf_num     res     1
37fc0 12d             | ms_intf_num     res     1
37fc0 12d             | ms_in_max_pkt   res     1
37fc0 12d             | ms_in_max_pkt   res     1
37fc0 12d             | end
37fc0 12d             | kb_intf_num     res     1
37fc0 12d             | kb_intf_num     res     1
37fc0 12d             | kb_interval     res     1
37fc0 12d             | kb_interval     res     1
37fc0 12d             | kb_in_max_pkt   res     1
37fc0 12d             | kb_in_max_pkt   res     1
37fc0 12d             | kb_max_index    res     1
37fc0 12d             | kb_max_index    res     1
37fc0 12d             | kb_led_states   res     1
37fc0 12d             | kb_led_states   res     1
37fc0 12d             | gp_intf_num     res     1
37fc0 12d             | gp_intf_num     res     1
37fc0 12d             | gp_interval     res     1
37fc0 12d             | gp_interval     res     1
37fc0 12d             | gp_max_index    res     1
37fc0 12d             | gp_max_index    res     1
37fc0 12d             | gp_descr_len    res     1+MAX_DEVICES
37fc0 12d             | gp_descr_len    res     1+MAX_DEVICES
37fc0 12d             | hdev_init_end
37fc0 12d             | 
37fc0 12d             | ' Initialized at cog startup:
37fc0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37fc0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37fc0 12d             | iframe_ct_new   res     1
37fc0 12d             | iframe_ct_new   res     1
37fc0 12d             | iframe_ct_base  res     1
37fc0 12d             | iframe_ct_base  res     1
37fc0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37fc0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37fc0 12d             | 
37fc0 12d             | ' This register block is reset to zero when a USB device connects
37fc0 12d             | hreg_init_start
37fc0 12d             | hstatus         res     1         ' Host status flags
37fc0 12d             | hstatus         res     1         ' Host status flags
37fc0 12d             | hctwait         res     1         ' Poll-based wait clocks
37fc0 12d             | hctwait         res     1         ' Poll-based wait clocks
37fc0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37fc0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37fc0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37fc0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37fc0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37fc0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37fc0 12d             | xfer_retry      res     1         ' Control transfer retry count
37fc0 12d             | xfer_retry      res     1         ' Control transfer retry count
37fc0 12d             | retry           res     1         ' Transaction retry count
37fc0 12d             | retry           res     1         ' Transaction retry count
37fc0 12d             | utx             res     1         ' Byte to transmit on USB
37fc0 12d             | utx             res     1         ' Byte to transmit on USB
37fc0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37fc0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37fc0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37fc0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37fc0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37fc0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37fc0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37fc0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37fc0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37fc0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37fc0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37fc0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37fc0 12d             | frame           res     1         ' USB 1ms frame counter value
37fc0 12d             | frame           res     1         ' USB 1ms frame counter value
37fc0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37fc0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37fc0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37fc0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37fc0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37fc0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37fc0 12d             | crc             res     1         ' Used for CRC16 calculation
37fc0 12d             | crc             res     1         ' Used for CRC16 calculation
37fc0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37fc0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37fc0 12d             | retval          res     1         ' Global success/fail return parameter
37fc0 12d             | retval          res     1         ' Global success/fail return parameter
37fc0 12d             | context_retval  res     1         ' Operation contextual return parameter
37fc0 12d             | context_retval  res     1         ' Operation contextual return parameter
37fc0 12d             | ' Device stuff
37fc0 12d             | hdev_id         res     1+MAX_DEVICES
37fc0 12d             | hdev_id         res     1+MAX_DEVICES
37fc0 12d             | hdev_bcd        res     1
37fc0 12d             | hdev_bcd        res     1
37fc0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37fc0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37fc0 12d             | ' Keyboard/mouse stuff
37fc0 12d             | hctrl_ep_addr   res     1
37fc0 12d             | hctrl_ep_addr   res     1
37fc0 12d             | hctrl_max_pkt   res     1
37fc0 12d             | hctrl_max_pkt   res     1
37fc0 12d             | hconfig_base    res     1
37fc0 12d             | hconfig_base    res     1
37fc0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37fc0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37fc0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37fc0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37fc0 12d             | hdev_class      res     1
37fc0 12d             | hdev_class      res     1
37fc0 12d             | hdev_subclass   res     1
37fc0 12d             | hdev_subclass   res     1
37fc0 12d             | hdev_protocol   res     1
37fc0 12d             | hdev_protocol   res     1
37fc0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37fc0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37fc0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37fc0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37fc0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37fc0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37fc0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37fc0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37fc0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37fc0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37fc0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37fc0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37fc0 12d             | if HAVE_MOUSE
37fc0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37fc0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37fc0 12d             | end
37fc0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37fc0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37fc0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37fc0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37fc0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37fc0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37fc0 12d             | hdev_out_addr   res     1
37fc0 12d             | hdev_out_addr   res     1
37fc0 12d             | 
37fc0 12d             | if EMUPAD_MAX_PLAYER > 0
37fc0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37fc0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37fc0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37fc0 12d             | end
37fc0 12d             | 
37fc0 12d             | hreg_init_end
37fc0 12d             | 
37fc0 12d             | hidr_start
37fc0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37fc0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37fc0 12d             | hidr_flags      res     1
37fc0 12d             | hidr_flags      res     1
37fc0 12d             | hidr_axis       res     3
37fc0 12d             | hidr_axis       res     3
37fc0 12d             | hidr_buttons    res     1
37fc0 12d             | hidr_buttons    res     1
37fc0 12d             | hidr_hats       res     1
37fc0 12d             | hidr_hats       res     1
37fc0 12d             | '' Above are actually useful values, 6 longs
37fc0 12d             | hidr_id         res     1
37fc0 12d             | hidr_id         res     1
37fc0 12d             | hidr_state      res     1
37fc0 12d             | hidr_state      res     1
37fc0 12d             | hidr_size       res     1
37fc0 12d             | hidr_size       res     1
37fc0 12d             | hidr_count      res     1
37fc0 12d             | hidr_count      res     1
37fc0 12d             | hidr_offset     res     1
37fc0 12d             | hidr_offset     res     1
37fc0 12d             | hidr_usage_idx  res     1
37fc0 12d             | hidr_usage_idx  res     1
37fc0 12d             | hidr_lminmax    res     1
37fc0 12d             | hidr_lminmax    res     1
37fc0 12d             | hidr_pminmax    res     1
37fc0 12d             | hidr_pminmax    res     1
37fc0 12d             | hidr_type       res     1
37fc0 12d             | hidr_type       res     1
37fc0 12d             | hidr_end
37fc0 12d             | 
37fc0 12d             | ' Variables dependent on the system freqency
37fc0 12d             | _var_64_lower_  res     1
37fc0 12d             | _var_64_lower_  res     1
37fc0 12d             | _var_64_upper_  res     1
37fc0 12d             | _var_64_upper_  res     1
37fc0 12d             | _12Mbps_        res     1
37fc0 12d             | _12Mbps_        res     1
37fc0 12d             | _1_5Mbps_       res     1
37fc0 12d             | _1_5Mbps_       res     1
37fc0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37fc0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37fc0 12d             | _1us_           res     1         ' 1us
37fc0 12d             | _1us_           res     1         ' 1us
37fc0 12d             | _10us_          res     1         ' 10us
37fc0 12d             | _10us_          res     1         ' 10us
37fc0 12d             | _33us_          res     1         ' 33us
37fc0 12d             | _33us_          res     1         ' 33us
37fc0 12d             | _txn_err_       res     1         ' 250us
37fc0 12d             | _txn_err_       res     1         ' 250us
37fc0 12d             | _500us_         res     1         ' 500us
37fc0 12d             | _500us_         res     1         ' 500us
37fc0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37fc0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37fc0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37fc0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37fc0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37fc0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37fc0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37fc0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37fc0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37fc0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37fc0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37fc0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37fc0 12d             | _preamble_wait_ res     1
37fc0 12d             | _preamble_wait_ res     1
37fc0 12d             | _1ms_           res     1         ' 1ms
37fc0 12d             | _1ms_           res     1         ' 1ms
37fc0 12d             | _2ms_           res     1         ' 2ms
37fc0 12d             | _2ms_           res     1         ' 2ms
37fc0 12d             | _suspend_wait_  res     1         ' 3ms
37fc0 12d             | _suspend_wait_  res     1         ' 3ms
37fc0 12d             | _4ms_           res     1         ' 4ms
37fc0 12d             | _4ms_           res     1         ' 4ms
37fc0 12d             | _xfer_wait_     res     1         ' 5ms
37fc0 12d             | _xfer_wait_     res     1         ' 5ms
37fc0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37fc0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37fc0 12d             | _reset_hold_    res     1         ' 15ms
37fc0 12d             | _reset_hold_    res     1         ' 15ms
37fc0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37fc0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37fc0 12d             | _21ms_          res     1         ' 21ms
37fc0 12d             | _21ms_          res     1         ' 21ms
37fc0 12d             | _100ms_         res     1         ' 100ms
37fc0 12d             | _100ms_         res     1         ' 100ms
37fc0 12d             | _500ms_         res     1         ' 500ms
37fc0 12d             | _500ms_         res     1         ' 500ms
37fc0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37fc0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37fc0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37fc0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37fc0 12d             | '------------------------------------------------------------------------------
37fc0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37fc0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37fc0 12d             | _usb_d_ls_nco_  res     1
37fc0 12d             | _usb_d_ls_nco_  res     1
37fc0 12d             | _usb_h_fs_nco_  res     1
37fc0 12d             | _usb_h_fs_nco_  res     1
37fc0 12d             | _usb_d_fs_nco_  res     1
37fc0 12d             | _usb_d_fs_nco_  res     1
37fc0 12d             | '------------------------------------------------------------------------------
37fc0 12d             | ' Scratch registers
37fc0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37fc0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37fc0 12d             | htmp1           res     1
37fc0 12d             | htmp1           res     1
37fc0 12d             | htmp2           res     1
37fc0 12d             | htmp2           res     1
37fc0 12d             | htmp3           res     1
37fc0 12d             | htmp3           res     1
37fc0 12d             | hrep            res     1         ' Repeat count
37fc0 12d             | hrep            res     1         ' Repeat count
37fc0 12d             | hsave0          res     1         ' Subroutine parameter saves
37fc0 12d             | hsave0          res     1         ' Subroutine parameter saves
37fc0 12d             | hsave1          res     1
37fc0 12d             | hsave1          res     1
37fc0 12d             | hsave2          res     1
37fc0 12d             | hsave2          res     1
37fc0 12d             | isrtmp1         res     1
37fc0 12d             | isrtmp1         res     1
37fc0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37fc0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37fc0 12d             | hr0             res     1         ' Multi-purpose registers
37fc0 12d             | hr0             res     1         ' Multi-purpose registers
37fc0 12d             | hr1             res     1
37fc0 12d             | hr1             res     1
37fc0 12d             | hr2             res     1
37fc0 12d             | hr2             res     1
37fc0 12d             | hr3             res     1
37fc0 12d             | hr3             res     1
37fc0 12d             | hpar1           res     1         ' Routine entry/exit parameters
37fc0 12d             | hpar1           res     1         ' Routine entry/exit parameters
37fc0 12d             | hpar2           res     1
37fc0 12d             | hpar2           res     1
37fc0 12d             | hpar3           res     1
37fc0 12d             | hpar3           res     1
37fc0 12d             | hct2            res     1         ' Function response bus turn-around timer
37fc0 12d             | hct2            res     1         ' Function response bus turn-around timer
37fc0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37fc0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37fc0 12d             | mod_cnt         res     1         ' Used in idle loops
37fc0 12d             | mod_cnt         res     1         ' Used in idle loops
37fc0 12d             |                 fit     $1F0
37fc0 12d             |                 org     $200
37fc0 200             | hlut_start
37fc0 200             | 
37fc0 200             | '------------------------------------------------------------------------------
37fc0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37fc0 200             | ' settings to startup defaults.
37fc0 200             | '------------------------------------------------------------------------------
37fc0 200             | ' On entry:
37fc0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37fc0 200             | '------------------------------------------------------------------------------
37fc0 200             | set_speed_full
37fc0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37fc4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37fc8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37fcc 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37fd0 204             | '                ret                             wcz     ' Restore caller flags on exit
37fd0 204             | 
37fd0 204             | '------------------------------------------------------------------------------
37fd0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37fd0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37fd0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37fd0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37fd0 204             | ' putting the smart pins into reset.
37fd0 204             | '------------------------------------------------------------------------------
37fd0 204             | ' On entry:
37fd0 204             | ' On exit: CZ flags restored to caller states
37fd0 204             | '------------------------------------------------------------------------------
37fd0 204             | set_speed_low
37fd0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37fd4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37fd8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37fdc 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37fe0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37fe4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37fe8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37fec 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37ff0 20c             | 
37ff0 20c             | '------------------------------------------------------------------------------
37ff0 20c             | ' Perform configuration stuff required when a device intitially connects.
37ff0 20c             | '------------------------------------------------------------------------------
37ff0 20c             | ' On entry:
37ff0 20c             | ' On exit:
37ff0 20c             | '------------------------------------------------------------------------------
37ff0 20c             | on_connect
37ff0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37ff4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37ff8 20e             | .retry
37ff8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37ffc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
38000 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
38004 211 00 08 00 FF 
38008 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3800c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
38010 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38014 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
38018 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3801c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
38020 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38024 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
38028 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3802c 21b 4C 03 B0 FD |                 call    #poll_waitx
38030 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
38034 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
38038 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3803c 21f B8 FF 9F FD |                 jmp     #.retry
38040 220             | .get_dev_desc
38040 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
38044 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
38048 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3804c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
38050 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
38054 225 88 FB BF FD |                 call    #reset
38058 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3805c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38060 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
38064 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
38068 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3806c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38070 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
38074 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
38078 22e 04 00 00 FF 
3807c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
38080 230 34 FA BF FD |                 call    #calc_crc5
38084 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
38088 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3808c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
38090 234 F7 AD C2 FA |                 rdbyte  total_data, pb
38094 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
38098 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3809c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
380a0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
380a4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
380a8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
380ac 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
380b0 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
380b4 23d C4 02 B0 FD |                 call    #poll_waitx
380b8 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
380bc 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
380c0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
380c4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
380c8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
380cc 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
380d0 244 2D 00 64 5D |         if_nz   ret
380d4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
380d8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
380dc 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
380e0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
380e4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
380e8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
380ec 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
380f0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
380f4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
380f8 24e 2C FB 9F CD |         if_b    jmp     #host_error
380fc 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
38100 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
38104 251 2D EC 63 FD |                 call    pa
38108 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3810c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
38110 254 2C EC 63 FD |                 jmp     pa
38114 255             | 
38114 255             | '------------------------------------------------------------------------------
38114 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
38114 255             | ' Status reporting is always in the function-to-host direction.
38114 255             | '------------------------------------------------------------------------------
38114 255             | ' On entry:
38114 255             | '   PTRA - start address of the SETUP data in hub.
38114 255             | '   PB - start address of the buffer/struct to be written to during the IN data
38114 255             | '     stage.
38114 255             | '   ep_addr_pid - device address, endpoint and CRC5.
38114 255             | ' On exit:
38114 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
38114 255             | '     contains the count of data stage bytes actually received, which must
38114 255             | '     always be <= the count requested.
38114 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38114 255             | '     more specific USB operation error code.
38114 255             | '------------------------------------------------------------------------------
38114 255             | control_read
38114 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38118 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3811c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
38120 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
38124 259             | .xfer_start
38124 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38128 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3812c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38130 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
38134 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
38138 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3813c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38140 260 61 00 00 FF 
38144 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
38148 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3814c 263             | .data
3814c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
38150 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
38154 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38158 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3815c 267             | .nak_retry
3815c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
38160 268             | .in_retry
38160 268 BC F6 BF FD |                 call    #txn_in
38164 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
38168 26a 28 00 90 AD |         if_z    jmp     #.commit
3816c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38170 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38174 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38178 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3817c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
38180 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38184 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38188 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3818c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
38190 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
38194 275             | .commit
38194 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
38198 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3819c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
381a0 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
381a4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
381a8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
381ac 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
381b0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
381b4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
381b8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
381bc 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
381c0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
381c4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
381c8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
381cc 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
381d0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
381d4 285             | .pre_status
381d4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
381d8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
381dc 287 00 B0 06 F6 |                 mov     pkt_data, #0
381e0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
381e4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
381e8 28a 61 00 00 FF 
381ec 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
381f0 28c             | .out_retry
381f0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
381f4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
381f8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
381fc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38200 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38204 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38208 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3820c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38210 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38214 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
38218 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3821c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3821c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3821c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3821c 297             | .xfer_retry
3821c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
38220 298 58 01 B0 FD |                 call    #poll_waitx
38224 299 8C F9 BF FD |                 call    #wait_txn_ok
38228 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3822c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
38230 29c C8 EF 03 F6 |                 mov     pb, hpar3
38234 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
38238 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3823c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
38240 2a0             | 
38240 2a0             | '------------------------------------------------------------------------------
38240 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
38240 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
38240 2a0             | ' the SETUP data struct is filled with the required values.
38240 2a0             | '------------------------------------------------------------------------------
38240 2a0             | ' On entry:
38240 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
38240 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
38240 2a0             | '     stage.
38240 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
38240 2a0             | ' On exit:
38240 2a0             | '   retval - used to convey the success/failure of each stage.
38240 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38240 2a0             | '     more specific USB operation error code.
38240 2a0             | '------------------------------------------------------------------------------
38240 2a0             | control_write
38240 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38244 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38248 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3824c 2a3             | 
3824c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38250 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
38254 2a5 F7 91 03 F6 |                 mov     hpar3, pb
38258 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3825c 2a7             | .xfer_start
3825c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
38260 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38264 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38268 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3826c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
38270 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
38274 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38278 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3827c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
38280 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38284 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38288 2b2             | .data
38288 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3828c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
38290 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38294 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
38298 2b6             | .out_retry
38298 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3829c 2b7 88 F6 BF FD |                 call    #txn_out
382a0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
382a4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
382a8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
382ac 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
382b0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
382b4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
382b8 2be             | .commit
382b8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
382bc 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
382c0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
382c4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
382c8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
382cc 2c3             | pre_status_in
382cc 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
382d0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
382d4 2c5             | .status_retry
382d4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
382d8 2c6 44 F5 BF FD |                 call    #txn_in
382dc 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
382e0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
382e4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
382e8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
382ec 2cb 2D 00 64 AD |         if_z    ret
382f0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
382f4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
382f8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
382fc 2cf             | '               ret                                     ' Caller must handle transfer retirement
382fc 2cf             | 
382fc 2cf             | '------------------------------------------------------------------------------
382fc 2cf             | ' Execute an IN interrupt transaction.
382fc 2cf             | '------------------------------------------------------------------------------
382fc 2cf             | ' On entry:
382fc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
382fc 2cf             | '   hpar2 - Address of the IN data buffer
382fc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
382fc 2cf             | ' On exit:
382fc 2cf             | '   retval - the result of the operation.
382fc 2cf             | '   hpar3 - the count of IN data bytes actually received.
382fc 2cf             | '------------------------------------------------------------------------------
382fc 2cf             | do_int_in
382fc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38300 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38304 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38308 2d2             | 
38308 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3830c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38310 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
38314 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
38318 2d6             | .retry
38318 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3831c 2d7 00 F5 BF FD |                 call    #txn_in
38320 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
38324 2d9 1C 00 90 AD |         if_z    jmp     #.commit
38328 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3832c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
38330 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
38334 2dd 54 00 B0 FD |                 call    #retry_wait
38338 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3833c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38340 2e0 D4 FF 9F FD |                 jmp     #.retry
38344 2e1             | .commit
38344 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
38348 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3834c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
38350 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
38354 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38358 2e6             | .post_ret
38358 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3835c 2e7             | 
3835c 2e7             | 
3835c 2e7             | '------------------------------------------------------------------------------
3835c 2e7             | ' Resets the downstream hub port to FS
3835c 2e7             | '------------------------------------------------------------------------------
3835c 2e7             | dwnstream_reset
3835c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38360 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
38364 2e9             | 
38364 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
38368 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3836c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
38370 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38374 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
38378 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3837c 2ef             | 
3837c 2ef             | '------------------------------------------------------------------------------
3837c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3837c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3837c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3837c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3837c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3837c 2ef             | '------------------------------------------------------------------------------
3837c 2ef             | ' On entry:
3837c 2ef             | '   hctwait - wait interval in sysclocks.
3837c 2ef             | ' On exit:
3837c 2ef             | '------------------------------------------------------------------------------
3837c 2ef             | poll_waitx
3837c 2ef 1A 92 63 FD |                 getct   hct2
38380 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
38384 2f1             | .wait
38384 2f1 FF 25 CC FB |                 jnct2   #.wait
38388 2f2 2D 00 64 FD |                 ret
3838c 2f3             | 
3838c 2f3             | '------------------------------------------------------------------------------
3838c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3838c 2f3             | '------------------------------------------------------------------------------
3838c 2f3             | ' On entry:
3838c 2f3             | '   retval - transaction response PID or error code.
3838c 2f3             | ' On exit:
3838c 2f3             | '------------------------------------------------------------------------------
3838c 2f3             | retry_wait
3838c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38390 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
38394 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38398 2f6 14 00 90 AD |         if_z    jmp     #.nak
3839c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
383a0 2f8 D8 FF BF FD |                 call    #poll_waitx
383a4 2f9             | .dec
383a4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
383a8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
383ac 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
383b0 2fc             | .nak
383b0 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
383b4 2fd C4 FF BF FD |                 call    #poll_waitx
383b8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
383bc 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
383c0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
383c4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
383c8 302 2D 00 64 FD |                 ret
383cc 303             | 
383cc 303             | host_reset
383cc 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
383d0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
383d4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
383d4 305 BD 01 05 FF 
383d8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
383dc 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
383e0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
383e4 309             | ' Check to see if the system clock has been changed.
383e4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
383e8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
383ec 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
383f0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
383f4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
383f8 30e 40 46 62 FD |                 dirl    dp
383fc 30f             | 
383fc 30f 28 02 64 FD |                 setq    #1
38400 310 80 00 80 FF 
38404 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38408 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3840c 313             | .enable
3840c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38410 314 41 46 62 FD |                 dirh    dp
38414 315 1F 36 63 FD |                 waitx   _1us_
38418 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3841c 317             | 
3841c 317             |                 ' Handle Port protection enable and startup delay
3841c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38420 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
38424 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
38428 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3842c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
38430 31c             | 
38430 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
38434 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
38438 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3843c 31f 00 00 04 F6 |                 mov     0-0, #0
38440 320             | .regloop
38440 320             | 
38440 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38440 320             | 
38440 320             | discon_entry
38440 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
38444 321             | 
38444 321             |               
38444 321             |         if HAVE_HIDPAD
38444 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
38448 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3844c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38450 324 F7 01 68 FC |                 wrlong  #0,pb
38454 325             |         end
38454 325             |         if EMUPAD_MAX_PLAYER > 0
38454 325             |         end
38454 325             | 
38454 325             |                 ' Fall through to disconnected loop
38454 325             | 
38454 325             | '-----------------------------------------------------------------------------------------------------------------
38454 325             | ' Device connect handling (Section 7.1.7.3).
38454 325             | '-----------------------------------------------------------------------------------------------------------------
38454 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
38454 325             | ' device to connect (Section 7.1.7.3).
38454 325             | '-----------------------------------------------------------------------------------------------------------------
38454 325             | disconnected
38454 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
38458 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3845c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
38460 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
38464 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
38468 32a             |         if ACTIVITY_LED >= 0
38468 32a             |         end
38468 32a 22 A7 82 FA |                 rqpin   urx, dm
3846c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
38470 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
38474 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
38478 32e             | .se1_test
38478 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3847c 32f FC FE BF FD |                 call    #poll_waitx
38480 330 22 A7 82 FA |                 rqpin   urx, dm
38484 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38488 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3848c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
38490 334             | .se1            'SE1 is a fatal error condition
38490 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
38494 335 E4 FE BF FD |                 call    #poll_waitx
38498 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3849c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
384a0 338             | .connect_test                                           ' Test lines until stable J/K state seen
384a0 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
384a4 339 22 A7 82 FA |                 rqpin   urx, dm
384a8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
384ac 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
384b0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
384b4 33d             | connected
384b4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
384b8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
384bc 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
384c0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
384c4 341             | .set_pulse
384c4 341 1A 64 63 FD |                 getct   _pulse_time_
384c8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
384cc 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
384cc 343             | ' of 1ms and make a correction, if necessary.
384cc 343             | '                mov     htmp, _1ms_
384cc 343             | '                subs    htmp, iframe_delta
384cc 343             | '                adds    _frame1ms_clks_, htmp
384cc 343             | '                debug(udec(_frame1ms_clks_))
384cc 343             | 
384cc 343             |                 ' Fall through to idle/processing loop
384cc 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
384d0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
384d4 345             | 
384d4 345             | hidle
384d4 345 22 A7 82 FA |                 rqpin   urx, dm
384d8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
384dc 347 98 00 90 CD |         if_c    jmp     #.se0_test
384e0 348 24 06 70 FD |                 pollct3                         wc
384e4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
384e8 34a 1A 94 63 FD |                 getct   hct3
384ec 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
384f0 34c             | 
384f0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
384f4 34d 00 70 E3 F8 |                 getbyte htmp
384f8 34e             | 
384f8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
384fc 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38500 350 40 00 90 AD |         if_z    jmp     #.poll
38504 351             | 
38504 351             |         if _HAVE_GAMEPAD
38504 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
38508 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3850c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
38510 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
38514 355 2C 00 90 AD |         if_z    jmp     #.poll
38518 356             |         end
38518 356             | 
38518 356             |         if HAVE_MOUSE
38518 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3851c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
38520 358 20 00 90 AD |         if_z    jmp     #.poll
38524 359             |         end
38524 359             | 
38524 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
38528 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3852c 35b 14 00 90 AD |         if_z    jmp     #.poll
38530 35c             | 
38530 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
38534 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
38538 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3853c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38540 360             |         if HAVE_MOUSE
38540 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
38544 361             |         else
38544 361             |         end
38544 361             | 
38544 361             | .poll
38544 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
38548 362 2D EC 63 FD |                 call    pa
3854c 363             | .skip_poll
3854c 363             | 
3854c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
38550 364             | 
38550 364             | .nopoll
38550 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
38554 365 44 00 90 AD |         if_z    jmp     #hsuspend
38558 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3855c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
38560 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
38564 369 1A 84 63 FD |                 getct   hr0
38568 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3856c 36b             |         if ACTIVITY_LED >= 0
3856c 36b             |         end
3856c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
38570 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
38574 36d 5C FF 9F FD |                 jmp     #hidle
38578 36e             | ' Check for extended SE0 state on the bus
38578 36e             | .se0_test
38578 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3857c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
38580 370 22 A7 82 FA |                 rqpin   urx, dm
38584 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38588 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3858c 373 24 F6 BF FD |                 call    #wait_txn_ok
38590 374 00 00 80 FF 
38594 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
38598 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
38598 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3859c 377             | 
3859c 377             | hsuspend
3859c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
385a0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
385a4 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
385a8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
385ac 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
385b0 37c 00 96 07 F6 |                 mov     mod_cnt, #0
385b4 37d             | 
385b4 37d             |                 ' Fall through to resume wait loop
385b4 37d             | 
385b4 37d             | hwait_resume
385b4 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
385b8 37e 02 86 47 F0 |                 shr     hr1, #2
385bc 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
385c0 380             |         if ACTIVITY_LED >= 0
385c0 380             |         end
385c0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
385c4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
385c8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
385cc 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
385d0 384 18 00 90 AD |         if_z    jmp     #.resume
385d4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
385d8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
385dc 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
385e0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
385e4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
385e8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
385ec 38b             | .resume
385ec 38b 22 05 28 FC |                 wypin   #OUT_K, dm
385f0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
385f4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
385f8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
385fc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38600 390 1F 70 63 FD |                 waitx   htmp
38604 391 22 07 28 FC |                 wypin   #OUT_J, dm
38608 392 01 70 47 F0 |                 shr     htmp, #1
3860c 393 1F 70 63 FD |                 waitx   htmp
38610 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38614 395 1A 92 62 FD |                 getct   iframe_ct_base
38618 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3861c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38620 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
38624 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
38628 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3862c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
38630 39c             | 
38630 39c             | '------------------------------------------------------------------------------
38630 39c             | ' Send preamble to enable low-speed HUB ports
38630 39c             | '------------------------------------------------------------------------------
38630 39c             | ' On entry:
38630 39c             | ' On exit:
38630 39c             | '   USB baud rate set to low-speed
38630 39c             | '------------------------------------------------------------------------------
38630 39c             | utx_pre
38630 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38634 39d 40 46 62 FD |                 dirl    dp
38638 39e 28 02 64 FD |                 setq    #1
3863c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38640 3a0 58 44 62 FD |                 drvl    dm
38644 3a1 59 46 62 FD |                 drvh    dp
38648 3a2             | 
38648 3a2 1E 00 00 FF 
3864c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
38650 3a4             | 
38650 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
38654 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
38658 3a6 28 02 64 3D |         if_nc   setq    #1
3865c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
38660 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
38664 3a9             | .l1
38664 3a9             | 
38664 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38668 3aa 40 46 62 FD |                 dirl    dp
3866c 3ab 28 02 64 FD |                 setq    #1
38670 3ac 80 00 80 FF 
38674 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38678 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3867c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38680 3b0 41 46 62 FD |                 dirh    dp
38684 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38688 3b2             | 
38688 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3868c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38690 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38694 3b5             | 
38694 3b5             | hlut_end
38694 3b5             |                 fit     $400
38694 3b5             |                 orgh
38694                 | if OVERLAP_MEMORY
38694                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
38694                 | end
38694                 | '------------------------------------------------------------------------------
38694                 | ' Routines called from cog space.
38694                 | '------------------------------------------------------------------------------
38694                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
38694                 | '------------------------------------------------------------------------------
38694                 | 
38694                 | '------------------------------------------------------------------------------
38694                 | ' USB host cog initialization.
38694                 | '------------------------------------------------------------------------------
38694                 | usb_host_init
38694                 |                 ' Initialize buffer pointers
38694                 |         if OVERLAP_MEMORY
38694                 |         else
38694     40 15 B0 FE |                 loc     pb, #hid_descr
38698                 |         end
38698     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3869c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3869c                 |                 {
3869c                 |                 }
3869c                 |         
3869c                 |                 {
3869c                 |                 }
3869c                 |                 'loc     pb,#hkbd_report
3869c                 |                 'mov     hkbd_report_p,pb
3869c                 | 
3869c     08 1D B0 FE |                 loc     pb, #hub_descr
386a0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
386a4     1D 1D B0 FE |                 loc     pb, #urx_buff
386a8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
386ac     95 1D B0 FE |                 loc     pb, #dev_desc_buff
386b0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
386b4     9F 1D B0 FE |                 loc     pb, #con_desc_buff
386b8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
386bc     18 15 B0 FE |                 loc     pb, #usb_cache_start
386c0     F7 55 02 F6 |                 mov     cache_start_p, pb
386c4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
386c8     F7 57 02 F6 |                 mov     cache_end_p, pb
386cc                 | 
386cc                 |         if ERROR_LED >= 0
386cc                 |         end
386cc                 | 
386cc                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
386cc                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
386cc                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
386cc                 | ' Configure and enable the Serial Host USB port.
386cc     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
386d0                 | 
386d0                 | '------------------------------------------------------------------------------
386d0                 | ' Timing calculations happen before any interrupt(s) are enabled.
386d0                 | '------------------------------------------------------------------------------
386d0                 | ' On entry:
386d0                 | '   htmp - current CLKFREQ value.
386d0                 | '------------------------------------------------------------------------------
386d0                 | hinit_usb_timings
386d0                 | '                getct   htmp2
386d0     B8 59 02 F6 |                 mov     save_sysclk, htmp
386d4     8D 5B 80 FF 
386d8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
386dc     18 30 63 FD |                 getqx   _12Mbps_
386e0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
386e4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
386e8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
386ec     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
386f0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
386f4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
386f8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
386fc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38700     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
38704     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
38708     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3870c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
38710     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
38714     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
38718     80 00 00 FF 
3871c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
38720     18 2C 63 FD |                 getqx   _var_64_lower_
38724     19 2E 63 FD |                 getqy   _var_64_upper_
38728     28 2C 63 FD |                 setq    _var_64_lower_
3872c     65 CD 1D FF 
38730     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
38734     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
38738     01 00 00 FF 
3873c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38740     18 2C 63 FD |                 getqx   _var_64_lower_
38744     19 2E 63 FD |                 getqy   _var_64_upper_
38748     28 2C 63 FD |                 setq    _var_64_lower_
3874c     A1 07 00 FF 
38750     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
38754     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
38758     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3875c     09 36 57 F0 |                 shr     _1us_, #9               wc
38760     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
38764     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
38768     18 38 63 FD |                 getqx   _10us_
3876c     09 38 57 F0 |                 shr     _10us_, #9              wc
38770     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
38774     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
38778     18 3A 63 FD |                 getqx   _33us_
3877c     09 3A 57 F0 |                 shr     _33us_, #9              wc
38780     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
38784     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
38788     18 3C 63 FD |                 getqx   _txn_err_
3878c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
38790     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
38794     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
38798     18 3E 63 FD |                 getqx   _500us_
3879c     09 3E 57 F0 |                 shr     _500us_, #9             wc
387a0     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
387a4     01 00 00 FF 
387a8     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
387ac     18 40 63 FD |                 getqx   _txn_ok_ls_
387b0     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
387b4     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
387b8     01 00 00 FF 
387bc     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
387c0     18 42 63 FD |                 getqx   _txn_ok_fs_
387c4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
387c8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
387cc     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
387d0     05 00 00 FF 
387d4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
387d8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
387dc     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
387e0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
387e4     1C 00 00 FF 
387e8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
387ec     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
387f0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
387f4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
387f8     00 00 00 FF 
387fc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38800     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
38804     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
38808     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3880c     04 00 00 FF 
38810     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
38814     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
38818     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3881c     8D 5B 00 FF 
38820     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
38824     18 4C 63 FD |                 getqx   _preamble_wait_
38828     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3882c     01 00 00 FF 
38830     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
38834     18 2C 63 FD |                 getqx   _var_64_lower_
38838     19 2E 63 FD |                 getqy   _var_64_upper_
3883c     28 2C 63 FD |                 setq    _var_64_lower_
38840     01 00 00 FF 
38844     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
38848     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3884c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
38850     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
38854     FF FF 7F FF 
38858     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3885c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
38860     A7 51 03 F6 |                 mov     _2ms_, _1ms_
38864     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
38868     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3886c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
38870     A7 55 03 F6 |                 mov     _4ms_, _1ms_
38874     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
38878     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3887c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
38880     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
38884     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
38888     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3888c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
38890     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
38894     A7 59 03 F6 |                 mov     _8ms_, _1ms_
38898     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3889c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
388a0     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
388a4     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
388a8     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
388ac     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
388b0     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
388b4     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
388b8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
388bc     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
388c0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
388c4                 | '        _ret_   mov     _1sec_, save_sysclk
388c4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
388c4                 | '                ret
388c4                 | {
388c4                 | }
388c4                 | 
388c4                 | '------------------------------------------------------------------------------
388c4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
388c4                 | ' one. If it is, start the task progression that will configure the device for
388c4                 | ' use.
388c4                 | '------------------------------------------------------------------------------
388c4                 | ' On entry:
388c4                 | '   hconfig_base - start address of the cached config descriptor chain.
388c4                 | ' On exit:
388c4                 | '------------------------------------------------------------------------------
388c4                 | hparse_con_desc
388c4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
388c8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
388cc     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
388d0     4E 70 FF F9 |                 movbyts htmp,#%%1032
388d4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
388d8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
388d8                 | 
388d8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
388dc     6E ED 03 F1 |                 add     pa, hconfig_base
388e0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
388e4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
388e4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
388e4                 | ' that defines a keyboard and/or mouse.
388e4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
388e8                 | .next_intf
388e8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
388ec     BC 01 90 3D |         if_ae   jmp     #hset_config
388f0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
388f4     75 F3 03 F1 |                 add     ptrb, hnext_desc
388f8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
388fc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38900     0C 00 90 AD |         if_z    jmp     #.intf
38904     80 71 C7 FA |                 rdbyte  htmp, ptrb
38908     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3890c     D8 FF 9F FD |                 jmp     #.next_intf
38910                 | .intf
38910     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
38914     00 90 07 F6 |                 mov     hpar3, #0
38918     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3891c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38920     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
38924     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
38928                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
38928                 | 
38928                 | .endp
38928     80 71 C7 FA |                 rdbyte  htmp, ptrb
3892c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38930     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38934     78 00 90 3D |         if_ae   jmp     #.get_device
38938     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3893c     75 F3 03 F1 |                 add     ptrb, hnext_desc
38940     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38944     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38948     64 00 90 AD |         if_z    jmp     #.get_device
3894c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38950     04 00 90 AD |         if_z    jmp     #.get_ep
38954     D0 FF 9F FD |                 jmp     #.endp
38958                 | .get_ep
38958     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3895c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
38960     0F 86 67 F0 |                 shl     hr1, #8 + 7
38964     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
38968     3F 00 00 FF 
3896c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
38970     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
38974     00 8E 0F F2 |                 cmp     hpar2, #0               wz
38978     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3897c     00 90 0F F2 |                 cmp     hpar3, #0               wz
38980     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
38984     A0 FF 9F FD |                 jmp     #.endp
38988                 | .in_ep
38988     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3898c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
38990                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38990     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38994     C2 89 DB F8 |                 setbyte hr2, hr0, #3
38998     8C FF 9F FD |                 jmp     #.endp
3899c                 | .out_ep
3899c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
389a0     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
389a4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
389a4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
389a8     C2 8B DB F8 |                 setbyte hr3, hr0, #3
389ac     78 FF 9F FD |                 jmp     #.endp
389b0                 | 
389b0                 | .get_device
389b0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
389b4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
389b8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
389bc     68 00 90 AD |         if_z    jmp     #.gamepad
389c0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
389c4     AC 00 90 AD |         if_z    jmp     #.hub
389c8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
389cc     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
389d0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
389d4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
389d8     4C 00 90 AD |         if_z    jmp     #.gamepad
389dc     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
389e0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
389e4                 | .keyboard
389e4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
389e8                 |         if HAVE_MOUSE
389e8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
389ec                 |         else
389ec                 |         end
389ec     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
389f0     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
389f4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
389f8     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
389fc     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38a00     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
38a04                 |                 'debug(udec(kb_intf_num))
38a04                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38a04     E0 FE 9F FD |                 jmp     #.next_intf
38a08                 | if HAVE_MOUSE
38a08                 | .mouse
38a08     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38a0c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38a10     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
38a14     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
38a18     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38a1c                 |                 'getbyte ms_interval, hr2, #3
38a1c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38a20     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
38a24                 |                 'debug(udec(kb_intf_num))
38a24                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38a24     C0 FE 9F FD |                 jmp     #.next_intf
38a28                 | end
38a28                 | .gamepad
38a28     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38a2c     C7 71 63 F5 |                 xor     htmp, hpar2
38a30     3F 00 00 FF 
38a34     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38a38     AC FE 9F AD |         if_z    jmp     #.next_intf
38a3c                 |         if HAVE_MOUSE
38a3c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38a40     C7 71 63 F5 |                 xor     htmp, hpar2
38a44     3F 00 00 FF 
38a48     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38a4c     98 FE 9F AD |         if_z    jmp     #.next_intf
38a50                 |         end
38a50     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
38a54     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
38a58     8C FE 9F 5D |         if_nz   jmp     #.next_intf
38a5c                 | 
38a5c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38a60     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
38a64     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38a68     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
38a6c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
38a70                 |                 'debug(udec(gp_intf_num))
38a70                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
38a70     74 FE 9F FD |                 jmp     #.next_intf
38a74                 | .hub
38a74     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38a78     6C FE 9F 5D |         if_nz   jmp     #.next_intf
38a7c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38a80     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
38a84     60 FE 9F 5D |         if_nz   jmp     #.next_intf
38a88     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38a8c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
38a90     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
38a94     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38a98     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
38a9c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38aa0     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
38aa4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
38aa8                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
38aa8     3C FE 9F FD |                 jmp     #.next_intf
38aac                 | 
38aac                 | '------------------------------------------------------------------------------
38aac                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38aac                 | ' it according to its function, or functions. In the case of this boot protocol
38aac                 | ' keyboard/mouse class driver:
38aac                 | ' - SetConfiguration(config_num)
38aac                 | ' - SetProtocol(boot)
38aac                 | ' - SetIdle(indefinite)
38aac                 | ' - Enter the device interrupt IN polling task stage.
38aac                 | '------------------------------------------------------------------------------
38aac                 | ' On entry:
38aac                 | ' On exit:
38aac                 | '------------------------------------------------------------------------------
38aac                 | hset_config
38aac                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38aac                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38aac     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38ab0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38ab4     00 00 0C F2 |                 cmp     0-0, #0                 wz
38ab8     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38abc                 |         if HAVE_MOUSE
38abc     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38ac0                 |         end
38ac0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38ac4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38ac8                 | .set_config
38ac8     6C 0E D0 FE |                 loc     ptra, #set_config
38acc     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38ad0     6E ED 03 F1 |                 add     pa, hconfig_base
38ad4     F6 8D C3 FA |                 rdbyte  hpar1, pa
38ad8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38adc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38ae0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
38ae4     A0 02 A0 FD |                 call    #control_write
38ae8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38aec     2D 00 64 5D |         if_nz   ret
38af0                 | .kbd_config
38af0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
38af4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
38af8                 | 
38af8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38afc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38b00     3F 00 00 FF 
38b04     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38b08     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38b0c                 | 
38b0c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38b10     34 0E D0 FE |                 loc     ptra, #set_protocol
38b14     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38b18     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38b1c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38b20     A0 02 A0 FD |                 call    #control_write
38b24     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b28     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38b2c     E4 02 90 5D |         if_nz   jmp     #.notify_client
38b30     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38b34     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38b38     30 03 B0 FD |                 call    #hset_idle
38b3c                 |                 'cmp     retval, #PID_ACK        wz
38b3c                 |         'if_nz   mov     hkbd_ep_addr, #0
38b3c                 |         'if_nz   jmp     #.notify_client
38b3c     A8 99 02 F6 |                 mov     hctwait, _2ms_
38b40     EF 02 A0 FD |                 call    #poll_waitx
38b44     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38b48     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38b4c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38b50     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
38b54     2C 03 B0 FD |                 call    #hset_kbdled_report
38b58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b5c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38b60     B0 02 90 5D |         if_nz   jmp     #.notify_client
38b64     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38b68     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38b6c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38b70     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38b74     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
38b78     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38b7c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
38b80     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38b84     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
38b88     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38b8c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38b90                 |         if !!HAVE_MOUSE
38b90                 |         end
38b90                 | 
38b90                 | .mouse_config
38b90                 | if HAVE_MOUSE
38b90     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38b94     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38b98     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38b9c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38ba0     3F 00 00 FF 
38ba4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38ba8     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38bac                 | 
38bac                 |                 debug("mouse passed addr check")
38bac                 | 
38bac     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38bb0     00 00 80 FF 
38bb4     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
38bb8     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38bbc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38bc0     55 02 A0 FD |                 call    #control_read
38bc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38bc8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38bcc     44 02 90 5D |         if_nz   jmp     #.notify_client
38bd0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38bd4     56 01 00 F6 |                 mov     0-0, total_data
38bd8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38bdc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38bdc                 | 
38bdc     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38be0     64 0D D0 FE |                 loc     ptra, #set_protocol
38be4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38be8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38bec     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38bf0     A0 02 A0 FD |                 call    #control_write
38bf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38bf8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38bfc     14 02 90 5D |         if_nz   jmp     #.notify_client
38c00                 |                 debug("mouse passed SetProtocol")
38c00     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38c04     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38c08     60 02 B0 FD |                 call    #hset_idle
38c0c                 |                 'cmp     retval, #PID_ACK        wz
38c0c                 |         'if_nz   mov     hmouse_ep_addr, #0
38c0c                 |         'if_nz   jmp     #.notify_client
38c0c                 |                 debug("mouse passed SetIdle")
38c0c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38c10     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38c14     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38c18     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38c1c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38c20     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38c24     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38c28     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38c2c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38c30     3F 00 00 FF 
38c34     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38c38     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38c3c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38c40     D0 01 90 FD |                 jmp     #.notify_client
38c44                 | end
38c44                 | .gamepad_config
38c44                 | if _HAVE_GAMEPAD
38c44     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38c48     00 00 0C F2 |                 cmp     0-0, #0                 wz
38c4c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38c50     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38c54     00 70 03 F6 |                 mov     htmp, 0-0
38c58     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38c5c     3F 00 00 FF 
38c60     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38c64     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
38c68                 | 
38c68     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38c6c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38c70     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38c74     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38c78     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38c7c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38c80     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38c84     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38c88     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38c8c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38c90     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38c94     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38c98     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38c9c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38ca0                 | 
38ca0                 |                 if EMUPAD_MAX_PLAYER > 0
38ca0                 |                 
38ca0                 | .rule_loop           
38ca0                 |                 end
38ca0                 | 
38ca0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38ca4     5C 00 90 AD |         if_e    jmp     #.xinput
38ca8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38cac     00 70 03 F6 |                 mov     htmp,0-0
38cb0     01 A6 02 FF 
38cb4     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38cb8     7C 00 90 AD |         if_e    jmp     #.ps3
38cbc                 | 
38cbc     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38cc0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38cc4     00 00 80 5F 
38cc8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38ccc     03 00 80 AF 
38cd0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38cd4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38cd8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38cdc     55 02 A0 FD |                 call    #control_read
38ce0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ce4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38ce8     00 00 04 56 |         if_nz   mov     0-0, #0
38cec     24 01 90 5D |         if_nz   jmp     #.notify_client
38cf0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38cf4     56 01 00 F6 |                 mov     0-0, total_data
38cf8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38cfc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38cfc                 | 
38cfc     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38d00     10 01 90 FD |                 jmp     #.notify_client
38d04                 | .xinput
38d04     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38d08     2D EF 03 F6 |                 mov     pb,hdev_port
38d0c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38d10     03 EE 27 F3 |                 fle     pb,#3
38d14     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38d18     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38d1c                 | 
38d1c     03 B0 06 F6 |                 mov     pkt_data, #3
38d20     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38d24     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38d28     5A 00 A0 FD |                 call    #txn_out
38d2c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38d30                 | 
38d30     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38d34     DC 00 90 FD |                 jmp     #.notify_client
38d38                 | .ps3
38d38     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38d3c     2D EF 03 F6 |                 mov     pb,hdev_port
38d40     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38d44     04 EE 27 F3 |                 fle     pb,#4
38d48     F7 EF C3 F9 |                 decod   pb
38d4c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38d50                 | 
38d50     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38d54     00 0C D0 FE |                 loc     ptra, #set_report
38d58     01 00 80 FF 
38d5c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38d60     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38d64     03 61 5C FC |                 wrword  #48, ptra[wLength]
38d68     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38d6c     A0 02 A0 FD |                 call    #control_write
38d70                 | 
38d70     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38d74     E0 0B D0 FE |                 loc     ptra, #set_report
38d78     01 00 80 FF 
38d7c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38d80     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38d84     03 09 5C FC |                 wrword  #4, ptra[wLength]
38d88     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38d8c     A0 02 A0 FD |                 call    #control_write
38d90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38d94     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38d98     00 00 04 56 |         if_nz   mov     0-0, #0
38d9c     74 00 90 5D |         if_nz   jmp     #.notify_client
38da0                 | 
38da0     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38da4     6C 00 90 FD |                 jmp     #.notify_client
38da8                 | end
38da8                 | 
38da8                 | .hub_config
38da8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38dac     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38db0     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38db4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38db8     3F 00 00 FF 
38dbc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38dc0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38dc4                 | 
38dc4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38dc8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38dcc     26 EF 03 F6 |                 mov     pb, hub_descr_p
38dd0     55 02 A0 FD |                 call    #control_read
38dd4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38dd8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38ddc     34 00 90 5D |         if_nz   jmp     #.notify_client
38de0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38de0                 | 
38de0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38de4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38de8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38dec                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38dec                 | .pwr_loop
38dec     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38df0     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38df4     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38df8     A0 02 A0 FD |                 call    #control_write
38dfc     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38e00                 | 
38e00     B1 99 02 F6 |                 mov     hctwait, _500ms_
38e04     B0 99 02 F1 |                 add     hctwait, _100ms_
38e08     EF 02 A0 FD |                 call    #poll_waitx
38e0c                 | 
38e0c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38e10     00 00 90 FD |                 jmp     #.notify_client
38e14                 | 
38e14                 | .notify_client
38e14     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38e18     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38e1c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38e1c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38e1c     2D 00 64 FD |                 ret
38e20                 | 
38e20                 | '------------------------------------------------------------------------------
38e20                 | ' Initialize the keyboard/mouse data area to start-up values.
38e20                 | '------------------------------------------------------------------------------
38e20                 | ' On entry:
38e20                 | ' On exit:
38e20                 | '------------------------------------------------------------------------------
38e20                 | init_kbdm_data
38e20     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38e24     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38e28                 | 
38e28     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38e2c     2B ED 03 F6 |                 mov     pa, cache_end_p
38e30                 | .loop
38e30     61 01 4C FC |                 wrbyte  #0, ptra++
38e34     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38e38     F4 FF 9F CD |         if_b    jmp     #.loop
38e3c                 |         
38e3c                 |         if EMUPAD_MAX_PLAYER > 0
38e3c                 |         end
38e3c                 | 
38e3c                 | 
38e3c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38e40                 | .regloop
38e40     00 EC 8F F9 |                 altd    pa
38e44     00 00 04 F6 |                 mov     0-0, #0
38e48     01 EC 07 F1 |                 add     pa, #1
38e4c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38e50     EC FF 9F 5D |         if_nz   jmp     #.regloop
38e54                 | 
38e54     E1 E1 61 FF 
38e58     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38e5c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38e60     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38e64     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38e68                 | 
38e68     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38e6c                 | 
38e6c                 | '------------------------------------------------------------------------------
38e6c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38e6c                 | ' function.
38e6c                 | '------------------------------------------------------------------------------
38e6c                 | ' On entry:
38e6c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38e6c                 | '   hpar2 - index number of the target interface.
38e6c                 | ' On exit:
38e6c                 | '------------------------------------------------------------------------------
38e6c                 | hset_idle
38e6c     A8 99 02 F6 |                 mov     hctwait, _2ms_
38e70     EF 02 A0 FD |                 call    #poll_waitx
38e74     D8 0A D0 FE |                 loc     ptra, #set_idle
38e78     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38e7c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38e80     A0 02 80 FD |                 jmp     #control_write
38e84                 | 
38e84                 | '------------------------------------------------------------------------------
38e84                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38e84                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38e84                 | '------------------------------------------------------------------------------
38e84                 | ' On entry:
38e84                 | '   ep_addr_pid - device address and enpoint for the request.
38e84                 | ' On exit:
38e84                 | '   retval - transaction result.
38e84                 | '------------------------------------------------------------------------------
38e84                 | hset_kbdled_report
38e84     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38e88     CC 0A D0 FE |                 loc     ptra, #set_report
38e8c     01 00 80 FF 
38e90     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38e94     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38e98     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38e9c     27 EF 03 F6 |                 mov     pb, urx_buff_p
38ea0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38ea4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38ea8                 | 
38ea8                 | '------------------------------------------------------------------------------
38ea8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38ea8                 | '------------------------------------------------------------------------------
38ea8                 | ' On entry:
38ea8                 | ' On exit:
38ea8                 | '------------------------------------------------------------------------------
38ea8                 | hget_kbd_in_report
38ea8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38eac     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38eb0     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38eb4     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38eb8     CF 02 A0 FD |                 call    #do_int_in
38ebc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ec0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38ec4                 | 
38ec4     00 90 0F F2 |                 cmp     hpar3, #0               wz
38ec8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38ecc                 | 
38ecc     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38ed0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38ed4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38ed8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38edc                 | 
38edc     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38ee0     18 00 B0 FD |                 call    #hkbd_compare
38ee4                 |         if EMUPAD_MAX_PLAYER > 0
38ee4                 |         end
38ee4                 | 
38ee4                 | .led_check
38ee4     3B 71 03 F6 |                 mov     htmp, kb_led_states
38ee8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38eec     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38ef0     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38ef4     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38ef8     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38efc                 | 
38efc                 | '------------------------------------------------------------------------------
38efc                 | ' Compare current and previous keyboard data buffers for keypress changes.
38efc                 | '------------------------------------------------------------------------------
38efc                 | hkbd_compare
38efc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38f00     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38f04     61 73 07 FB |                 rdlong  htmp1, ptra++
38f08     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38f0c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38f10     61 73 07 FB |                 rdlong  htmp1, ptra++
38f14     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38f18     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38f1c     2D 00 64 AD |         if_z    ret
38f20                 | 
38f20     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38f24                 | 
38f24                 |                 ' Handle modifiers
38f24     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38f28     00 87 C7 FA |                 rdbyte  hr1, ptra
38f2c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38f30     63 86 63 FD |                 mergew  hr1
38f34     08 EC 07 F6 |                 mov     pa,#8
38f38                 | .modloop
38f38     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38f3c     E8 8C 07 F6 |                 mov     hpar1,#$E8
38f40     F6 8D 83 F1 |                 sub     hpar1,pa
38f44     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38f48     FB ED 6F FB |                 djnz    pa,#.modloop
38f4c                 | 
38f4c     6F E0 75 FD | .release        modc    _set    wc
38f50                 |                 'alts    hdev_port, #hid_report_p
38f50                 |                 'mov     ptra, hid_report_p
38f50     02 F0 07 F1 |                 add     ptra, #2
38f54     06 EC 07 F6 |                 mov     pa, #6
38f58     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38f5c     20 00 90 AD |         if_z    jmp     #.rl3
38f60     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38f64     02 F2 07 F1 |                 add     ptrb, #2
38f68     06 EE 07 F6 |                 mov     pb, #6
38f6c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38f70     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38f74     08 00 90 AD |         if_z    jmp     #.rl3
38f78     FC EF 6F FB |                 djnz    pb, #.rl2
38f7c     68 00 B0 FD |                 call    #hkbd_translate
38f80     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38f84                 | 
38f84     00 90 07 F6 |                 mov     hpar3, #0
38f88     1F 90 27 F4 |                 bith    hpar3, #31
38f8c                 | 
38f8c     6F 00 74 FD | .press          modc    _clr    wc
38f90     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38f94     02 F0 07 F1 |                 add     ptra, #2
38f98     06 EC 07 F6 |                 mov     pa, #6
38f9c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38fa0     20 00 90 AD |         if_z    jmp     #.pl3
38fa4     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38fa8     02 F2 07 F1 |                 add     ptrb, #2
38fac     06 EE 07 F6 |                 mov     pb, #6
38fb0     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38fb4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38fb8     08 00 90 AD |         if_z    jmp     #.pl3
38fbc     FC EF 6F FB |                 djnz    pb, #.pl2
38fc0     24 00 B0 FD |                 call    #hkbd_translate
38fc4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38fc8                 | 
38fc8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38fcc     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38fd0     28 02 64 FD |                 setq #1
38fd4     61 73 07 FB |                 rdlong  htmp1, ptra++
38fd8     28 02 64 FD |                 setq #1
38fdc     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38fe0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38fe4                 | 
38fe4     2D 00 64 FD |                 ret
38fe8                 | 
38fe8                 | '------------------------------------------------------------------------------
38fe8                 | ' Translate keyboard scancode to ASCII
38fe8                 | '------------------------------------------------------------------------------
38fe8                 | ' On entry:
38fe8                 | '   hpar1 - scancode
38fe8                 | '   hpar2 - key modifiers state
38fe8                 | '       c - pressed (0) or released (1) flag
38fe8                 | ' On exit:
38fe8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38fe8                 | '               30..17 = unused
38fe8                 | '                   18 = scroll-lock state 
38fe8                 | '                   17 = caps-lock state
38fe8                 | '                   16 = num-lock state 
38fe8                 | '                15..8 = key modifiers state
38fe8                 | '                 7..0 = scancode
38fe8                 | '------------------------------------------------------------------------------
38fe8                 | hkbd_translate
38fe8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38fec     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38ff0     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38ff4     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38ff8     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38ffc     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
39000                 | 
39000                 |         if EMUPAD_MAX_PLAYER > 0
39000                 | 
39000                 |         if EMUPAD_BT0_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT1_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT2_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT3_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT4_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT5_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT6_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT7_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT8_BIT >= 0
39000                 |         end
39000                 |         if EMUPAD_BT9_BIT >= 0
39000                 |         end
39000                 | 
39000                 |         end
39000     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
39004     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
39008     1F 8C 47 F4 |                 bitc    hpar1, #31
3900c                 |         if KEYQUEUE_SIZE > 0
3900c     C4 09 B0 FE |                 loc pb,#keyq_head
39010     F7 71 E3 FA |                 rdword htmp,pb
39014     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
39018     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3901c     B8 75 03 F6 |                 mov htmp2,htmp
39020     04 74 07 FA |                 mul htmp2,#4
39024     F7 75 03 F1 |                 add htmp2,pb
39028     02 74 07 F1 |                 add htmp2,#2
3902c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
39030     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
39034     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
39038     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3903c                 |         end
3903c     2D 00 7C FD |                 ret wcz
39040                 | 
39040                 | if HAVE_MOUSE
39040                 | '------------------------------------------------------------------------------
39040                 | ' Execute an IN interrupt transaction to poll for mouse activity.
39040                 | '------------------------------------------------------------------------------
39040                 | ' On entry:
39040                 | ' On exit:
39040                 | '------------------------------------------------------------------------------
39040                 | hget_mouse_in_report
39040     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
39044     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39048     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3904c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
39050     CF 02 A0 FD |                 call    #do_int_in
39054     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39058     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3905c                 | 
3905c     00 90 0F F2 |                 cmp     hpar3, #0               wz
39060     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39064                 | 
39064     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
39068     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3906c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
39070     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
39074                 | 
39074     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39078     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3907c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
39080     01 90 87 31 |         if_ae   sub     hpar3, #1
39084                 | 
39084     40 09 90 FE |                 loc     pa, #mouse_limits
39088     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3908c                 | 
3908c                 |                 ' load xacc,yacc,zacc
3908c     28 04 64 FD |                 setq    #3-1
39090     80 87 07 FB |                 rdlong  hr1,ptrb
39094                 |                 ' load limits and outptr
39094     28 04 64 FD |                 setq    #3-1
39098     F6 73 03 FB |                 rdlong  htmp1,pa
3909c                 | 
3909c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
390a0     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
390a4     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
390a8     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
390ac     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
390b0     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
390b4     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
390b8     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
390bc                 |               
390bc                 | 
390bc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
390c0     07 70 67 F7 |                 signx   htmp, #7
390c4     B8 87 03 F1 |                 add     hr1,htmp
390c8     00 72 0F F2 |                 cmp     htmp1,#0 wz
390cc     B9 87 63 53 |         if_ne   fles    hr1,htmp1
390d0     00 86 47 53 |         if_ne   fges    hr1,#0
390d4                 | 
390d4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
390d8     07 70 67 F7 |                 signx   htmp, #7
390dc     B8 89 03 F1 |                 add     hr2,htmp
390e0     00 74 0F F2 |                 cmp     htmp2,#0 wz
390e4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
390e8     00 88 47 53 |         if_ne   fges    hr2,#0
390ec                 |                 
390ec                 | 
390ec     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
390f0     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
390f4     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
390f8     B8 8B 03 A1 |         if_z    add     hr3,htmp
390fc                 | 
390fc     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
39100     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
39104                 | 
39104                 |                 ' write back accumulators
39104     28 04 64 FD |                 setq    #3-1
39108     80 87 67 FC |                 wrlong  hr1,ptrb
3910c                 |                 ' if outptr set, write X/Y words
3910c     00 76 0F F2 |                 cmp htmp3,#0                    wz
39110     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
39114     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
39118     2D 00 64 FD |                 ret
3911c                 | end
3911c                 | 
3911c                 | '------------------------------------------------------------------------------
3911c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3911c                 | '------------------------------------------------------------------------------
3911c                 | ' On entry:
3911c                 | ' On exit:
3911c                 | '------------------------------------------------------------------------------
3911c                 | if _HAVE_GAMEPAD
3911c                 | hget_gp_in_report
3911c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39120     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
39124                 | 
39124     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39128     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3912c     00 90 E3 F8 |                 getbyte hpar3
39130     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
39134     CF 02 A0 FD |                 call    #do_int_in
39138     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3913c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39140                 | 
39140     00 90 0F F2 |                 cmp     hpar3, #0               wz
39144     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39148                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
39148                 | 
39148     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3914c     00 70 E3 F8 |                 getbyte htmp                            ' |
39150     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39154     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
39158     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3915c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
39160     B8 01 C0 F8 |                 setbyte htmp                            ' |
39164                 | 
39164                 | ' Note: the following code compares the current and previous reports
39164                 | ' and process the data if there are changes to ease the debug output.
39164                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
39164                 | ' gpPreReport buffer.
39164                 | 
39164                 |                 ' ----- start of block to remove
39164                 |                 {
39164                 |                 }
39164                 |                 ' ----- end of block to remove
39164     F4 04 90 FE |                 loc pa,#hpad_translate
39168     2A EC 63 FD |                 push pa
3916c                 | 
3916c                 |                 ' FALL THROUGH !!!!
3916c                 | 
3916c                 | '------------------------------------------------------------------------------
3916c                 | ' Decode controller report
3916c                 | '------------------------------------------------------------------------------
3916c                 | hid_decode
3916c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3916c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
39170     00 04 00 FF 
39174     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
39178                 | 
39178     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3917c                 | 
3917c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39180     00 2A E3 F8 |                 getbyte hidr_type
39184     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
39188     34 02 90 AD |         if_z    jmp     #hpad_xinput
3918c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
39190     1C 03 90 AD |         if_z    jmp     #hpad_ps3
39194     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
39198     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3919c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
391a0                 |                 
391a0                 | 
391a0                 | '------------------------------------------------------------------------------
391a0                 | ' Handle HID controller (or mouse now
391a0                 | ' On entry:
391a0                 | '   ptrb - controller report
391a0                 | '------------------------------------------------------------------------------
391a0                 | hpad_hid
391a0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
391a4     F7 F1 03 F6 |                 mov     ptra, pb
391a8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
391ac     00 EC 03 F6 |                 mov     pa, 0-0
391b0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
391b0     19 2A 3B FF 
391b4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
391b8                 | 
391b8                 | .next
391b8     00 EC 5F F2 |                 cmps    pa, #0      wcz
391bc     2D 00 7C ED |         if_be   ret     wcz
391c0                 | 
391c0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
391c4     01 EC 87 F1 |                 sub     pa, #1
391c8     00 8E 07 F6 |                 mov     hpar2, #0
391cc                 | 
391cc     C6 71 03 F6 |                 mov     htmp, hpar1
391d0     03 70 07 F5 |                 and     htmp, #$03
391d4     01 70 0F F2 |                 cmp     htmp, #1    wz
391d8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
391dc     07 8E 67 A7 |         if_z    signx   hpar2,#7
391e0     01 EC 87 A1 |         if_z    sub     pa, #1
391e4     02 70 0F F2 |                 cmp     htmp, #2    wz
391e8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
391ec     0F 8E 67 A7 |         if_z    signx   hpar2,#15
391f0     02 EC 87 A1 |         if_z    sub     pa, #2
391f4     03 70 0F F2 |                 cmp     htmp, #3    wz
391f8     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
391fc     04 EC 87 A1 |         if_z    sub     pa, #4
39200                 | 
39200     FC 8C 07 F5 |                 and     hpar1, #$FC
39204                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
39204                 | 
39204     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
39208     0C 01 90 AD |         if_z    jmp     #.report_id
3920c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
39210     24 01 90 AD |         if_z    jmp     #.usage_page
39214     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
39218     2C 01 90 AD |         if_z    jmp     #.usage
3921c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
39220     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
39224     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
39228     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3922c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
39230     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
39234     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
39238     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3923c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
39240     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
39244     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
39248     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3924c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
39250     64 FF 9F 5D |         if_nz   jmp     #.next
39254                 | 
39254     D8 1D A7 FB |                 tjf     hidr_state,#.next
39258                 | 
39258     03 8E 07 F5 |                 and     hpar2, #$03
3925c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
39260     18 00 90 5D |         if_nz   jmp     #.skip
39264                 | 
39264     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
39268     20 00 90 AD |         if_z    jmp     #.axes
3926c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
39270     5C 00 90 AD |         if_z    jmp     #.hats
39274     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
39278     70 00 90 AD |         if_z    jmp     #.buttons
3927c                 | .skip
3927c     8F 71 03 F6 |                 mov     htmp, hidr_size
39280     90 71 03 FA |                 mul     htmp, hidr_count
39284     B8 23 03 F1 |                 add     hidr_offset, htmp
39288     2C FF 9F FD |                 jmp     #.next
3928c                 | .axes
3928c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3928c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
39290     90 87 03 F6 |                 mov     hr1, hidr_count
39294                 | .l1
39294     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39298     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3929c     04 03 B0 FD |                 call    #hpad_getbits
392a0     64 03 B0 FD |                 call    #hpad_normalize
392a4     06 84 1F F2 |                 cmp     hr0, #6         wcz
392a8     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
392ac     00 88 43 C8 |         if_b    getnib  hr2
392b0     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
392b4     5F 01 20 C9 |         if_b    setword retval
392b8     01 84 07 C1 |         if_b    add     hr0, #1
392bc     8F 23 03 F1 |                 add     hidr_offset, hidr_size
392c0     F4 87 6F FB |                 djnz    hr1, #.l1
392c4                 | 
392c4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
392c8     01 1C 07 F6 |                 mov     hidr_state, #1
392cc     E8 FE 9F FD |                 jmp     #.next
392d0                 | .hats
392d0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
392d0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
392d4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
392d8     C8 02 B0 FD |                 call    #hpad_getbits
392dc     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
392e0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
392e4     01 1C 07 F6 |                 mov     hidr_state, #1
392e8     90 FF 9F FD |                 jmp     #.skip
392ec                 | .buttons
392ec                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
392ec     91 8D 03 F6 |                 mov     hpar1, hidr_offset
392f0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
392f4     90 8F 03 FA |                 mul     hpar2, hidr_count
392f8     A8 02 B0 FD |                 call    #hpad_getbits
392fc     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39300     B8 BF 62 F0 |                 shl     retval, htmp
39304     5F 17 43 F5 |                 or      hidr_buttons, retval
39308     90 71 03 F1 |                 add     htmp, hidr_count
3930c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39310     01 1C 07 F6 |                 mov     hidr_state, #1
39314     64 FF 9F FD |                 jmp     #.skip
39318                 | .report_id
39318     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3931c     2D 00 7C 5D |         if_nz   ret     wcz
39320     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39324     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
39328     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3932c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
39330     01 F2 87 51 |         if_nz   sub     ptrb,#1
39334     80 FE 9F FD |                 jmp     #.next
39338                 | .usage_page
39338     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3933c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39340     04 1C 07 A6 |         if_z    mov     hidr_state, #4
39344     70 FE 9F FD |                 jmp     #.next
39348                 | .usage
39348     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3934c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
39350     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
39354     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39358     5C FE 9F AD |         if_z    jmp     #.next
3935c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
39360     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
39364     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39368     4C FE 9F AD |         if_z    jmp     #.next
3936c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
39370     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
39374     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
39378     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3937c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
39380     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
39384     10 00 90 AD |         if_z    jmp     #.usage_axis
39388     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3938c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
39390     03 1C 07 A6 |         if_z    mov     hidr_state, #3
39394     20 FE 9F FD |                 jmp     #.next
39398                 | .usage_axis
39398     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3939c     18 FE 9F CD |         if_b    jmp     #.next
393a0     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
393a4     C7 01 00 F8 |                 setnib  hpar2
393a8                 | 
393a8     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
393ac     C7 8F C3 F9 |                 decod   hpar2
393b0     C7 0F 43 F5 |                 or      hidr_flags, hpar2
393b4                 | 
393b4     01 24 07 F1 |                 add     hidr_usage_idx, #1
393b8     02 1C 07 F6 |                 mov     hidr_state, #2
393bc     F8 FD 9F FD |                 jmp     #.next
393c0                 | 
393c0                 | '------------------------------------------------------------------------------
393c0                 | ' Handle XInput controller
393c0                 | ' On entry:
393c0                 | '   ptrb - controller report
393c0                 | '------------------------------------------------------------------------------
393c0                 | '   Default implementation translates the report to a pseudo-defacto hid
393c0                 | '   standard and jumps to hpad_translate for actions.
393c0                 | '   Implementors may take specific actions for this kind of controller.
393c0                 | '------------------------------------------------------------------------------
393c0                 | hpad_xinput
393c0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
393c4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
393c8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
393cc     14 70 0F F2 |                 cmp     htmp, #$14      wz
393d0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
393d4                 | 
393d4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
393d4                 | 
393d4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
393d8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
393dc                 | 
393dc     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
393e0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
393e4     5F BF 22 F6 |                 not     retval
393e8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
393ec     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
393f0     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
393f4     5F BF 22 F6 |                 not     retval
393f8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
393fc                 | 
393fc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39400     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
39404     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39408     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3940c     F8 01 B0 FD |                 call    #hpad_normalize
39410     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
39414     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
39418     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3941c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39420     E4 01 B0 FD |                 call    #hpad_normalize
39424     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
39428                 | 
39428     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3942c     81 BF E6 FA |                 rdword  retval, ptrb[1]
39430     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39434     00 16 47 F4 |                 bitc    hidr_buttons, #0
39438     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3943c     01 16 47 F4 |                 bitc    hidr_buttons, #1
39440     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39444     02 16 47 F4 |                 bitc    hidr_buttons, #2
39448     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3944c     03 16 47 F4 |                 bitc    hidr_buttons, #3
39450     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
39454     04 16 47 F4 |                 bitc    hidr_buttons, #4
39458     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3945c     05 16 47 F4 |                 bitc    hidr_buttons, #5
39460     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
39464     08 16 47 F4 |                 bitc    hidr_buttons, #8
39468     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3946c     09 16 47 F4 |                 bitc    hidr_buttons, #9
39470     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
39474     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39478     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3947c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39480     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
39484     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39488                 | 
39488     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3948c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
39490     7A BB 7A FF 
39494     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
39498     F9 FF 7F FF 
3949c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
394a0     B9 71 5F F9 |                 altgn   htmp, #htmp1
394a4     00 70 43 F8 |                 getnib  htmp
394a8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
394ac                 | 
394ac     AC 01 90 FD |                 jmp     #hpad_translate
394b0                 | 
394b0                 | '------------------------------------------------------------------------------
394b0                 | ' Handle PS3 controller
394b0                 | ' On entry:
394b0                 | '   ptrb - controller report
394b0                 | '------------------------------------------------------------------------------
394b0                 | '   Default implementation translates the report to a pseudo-defacto hid
394b0                 | '   standard and jumps to hpad_translate for actions.
394b0                 | '   Implementors may take specific actions for this kind of controller.
394b0                 | '------------------------------------------------------------------------------
394b0                 | hpad_ps3
394b0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
394b4     01 70 0F F2 |                 cmp     htmp, #$01      wz
394b8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
394bc                 | 
394bc                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
394bc                 | 
394bc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
394c0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
394c4     40 01 B0 FD |                 call    #hpad_normalize
394c8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
394cc     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
394d0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
394d4     30 01 B0 FD |                 call    #hpad_normalize
394d8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
394dc     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
394e0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
394e4     20 01 B0 FD |                 call    #hpad_normalize
394e8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
394ec     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
394f0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
394f4     10 01 B0 FD |                 call    #hpad_normalize
394f8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
394fc     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39500     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
39504                 | 
39504     08 8C 07 F6 |                 mov     hpar1, #8
39508     13 8E 07 F6 |                 mov     hpar2, #19
3950c     94 00 B0 FD |                 call    #hpad_getbits
39510                 | 
39510     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39514     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39518     00 16 47 F4 |                 bitc    hidr_buttons, #0
3951c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39520     01 16 47 F4 |                 bitc    hidr_buttons, #1
39524     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39528     02 16 47 F4 |                 bitc    hidr_buttons, #2
3952c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39530     03 16 47 F4 |                 bitc    hidr_buttons, #3
39534     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
39538     04 16 47 F4 |                 bitc    hidr_buttons, #4
3953c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39540     05 16 47 F4 |                 bitc    hidr_buttons, #5
39544     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
39548     06 16 47 F4 |                 bitc    hidr_buttons, #6
3954c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
39550     07 16 47 F4 |                 bitc    hidr_buttons, #7
39554     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
39558     08 16 47 F4 |                 bitc    hidr_buttons, #8
3955c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
39560     09 16 47 F4 |                 bitc    hidr_buttons, #9
39564     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
39568     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3956c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
39570     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39574     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
39578     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3957c                 | 
3957c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39580     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
39584     09 FA 79 FF 
39588     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3958c     FF FA 7F FF 
39590     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
39594     B9 71 5F F9 |                 altgn   htmp, #htmp1
39598     00 70 43 F8 |                 getnib  htmp
3959c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
395a0                 | 
395a0     B8 00 90 FD |                 jmp     #hpad_translate
395a4                 | 
395a4                 | '------------------------------------------------------------------------------
395a4                 | ' Read bits from report data buffer
395a4                 | '------------------------------------------------------------------------------
395a4                 | ' On entry:
395a4                 | '   PTRB - report buffer
395a4                 | '   hpar1 - start bit
395a4                 | '   hpar2 - number of bits
395a4                 | ' On exit:
395a4                 | '   retval - bits
395a4                 | '------------------------------------------------------------------------------
395a4                 | hpad_getbits
395a4     C6 71 03 F6 |                 mov     htmp, hpar1
395a8     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
395ac     F9 71 03 F1 |                 add     htmp, ptrb
395b0     B8 BF 02 FB |                 rdlong  retval, htmp
395b4                 | 
395b4     C6 73 03 F6 |                 mov     htmp1, hpar1
395b8     07 72 07 F5 |                 and     htmp1, #$07     ' shift
395bc     B9 BF 42 F0 |                 shr     retval, htmp1
395c0                 | 
395c0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
395c4     10 00 90 1D |         if_a    jmp     #.l1
395c8                 | 
395c8     C7 8F C3 F9 |                 decod   hpar2
395cc     01 8E 87 F1 |                 sub     hpar2, #1
395d0     C7 BF 02 F5 |                 and     retval, hpar2
395d4     2D 00 64 FD |                 ret
395d8                 | .l1
395d8     FF 7F 00 FF 
395dc     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
395e0     03 70 07 F1 |                 add     htmp, #3
395e4     B8 75 03 FB |                 rdlong  htmp2, htmp
395e8     18 8E 87 F1 |                 sub     hpar2, #24
395ec     C7 8F C3 F9 |                 decod   hpar2
395f0     01 8E 87 F1 |                 sub     hpar2, #1
395f4     B9 75 43 F0 |                 shr     htmp2, htmp1
395f8     C7 75 03 F5 |                 and     htmp2, hpar2
395fc     18 74 67 F0 |                 shl     htmp2, #24
39600     BA BF 42 F5 |                 or      retval, htmp2
39604     2D 00 64 FD |                 ret
39608                 | 
39608                 | '------------------------------------------------------------------------------
39608                 | ' Normalize value to signed word (-32768 / 32767)
39608                 | '------------------------------------------------------------------------------
39608                 | ' On entry:
39608                 | '   retval - value to normalize
39608                 | '   hidr_lminmax - min (word 1) max (word 0) value range
39608                 | '   - or -
39608                 | '   hidr_pminmax - min (word 1) max (word 0) value range
39608                 | '   hidr_size - value bits length
39608                 | ' On exit:
39608                 | '   retval - normalized value
39608                 | '------------------------------------------------------------------------------
39608                 | hpad_normalize
39608     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3960c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
39610     2D 00 64 AD |         if_z    ret
39614     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
39618     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3961c     0F 72 77 F7 |                 signx   htmp1, #15      wc
39620     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
39624     00 BE 66 C7 |         if_c    signx   retval, #0-0
39628     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3962c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
39630     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
39634     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
39638     B8 71 53 F6 |                 abs     htmp            wc
3963c     1F BE 0E F4 |                 testb   retval, #31     wz
39640     5F BF 42 F6 |                 abs     retval
39644     B8 BF 12 FD |                 qdiv    retval, htmp
39648     18 BE 62 FD |                 getqx   retval
3964c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
39650     C0 FF 7F FF 
39654     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
39658     2D 00 64 FD |                 ret
3965c                 | 
3965c                 | '------------------------------------------------------------------------------
3965c                 | ' Perform controller actions
3965c                 | ' On entry:
3965c                 | '    hidr_id        report id
3965c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3965c                 | '                      X = hidr_axis+0, #0
3965c                 | '                      Y = hidr_axis+0, #1
3965c                 | '                      Z = hidr_axis+1, #0
3965c                 | '                     RX = hidr_axis+1, #1
3965c                 | '                     RY = hidr_axis+2, #0
3965c                 | '                     RZ = hidr_axis+2, #1
3965c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3965c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3965c                 | '
3965c                 | '                     -------3 -------2 -------1 -------0 byte
3965c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3965c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3965c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3965c                 | '                                |||||| ||||++++--------- n. axes
3965c                 | '                                |||||| ++++------------- n. hats
3965c                 | '                                ++++++------------------ valid axes
3965c                 | '------------------------------------------------------------------------------
3965c                 | hpad_translate
3965c                 | 
3965c                 | 
3965c                 |         if HAVE_HIDPAD
3965c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
39660     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
39664     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
39668     01 70 E7 F2 |                 cmpsub  htmp,#1
3966c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
39670     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
39674     2D 00 7C 3D |         if_ae   ret     wcz
39678     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3967c     B8 F3 03 F1 |                 add     ptrb,htmp
39680     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
39684     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
39688     28 0C 64 FD |                 setq    #7-1
3968c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
39690                 |         end
39690                 | 
39690                 | 
39690                 |         if EMUPAD_MAX_PLAYER > 0
39690                 | .emupad_no_hat
39690                 |         if EMUPAD_BT0_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT1_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT2_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT3_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT4_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT5_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT6_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT7_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT8_BIT >= 0
39690                 |         end
39690                 |         if EMUPAD_BT9_BIT >= 0
39690                 |         end
39690                 | .emupad_slot_over
39690                 |         end
39690                 | 
39690                 |         if 0
39690                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
39690                 | 
39690                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
39690                 | 
39690                 |         end
39690     2D 00 64 FD |                 ret
39694                 | end
39694                 | 
39694                 | if EMUPAD_MAX_PLAYER > 0
39694                 | '------------------------------------------------------------------------------
39694                 | ' Clear EmuPad state
39694                 | '------------------------------------------------------------------------------
39694                 | emupad_reset
39694                 | 
39694                 | '------------------------------------------------------------------------------
39694                 | ' Get EmuPad Player number for current device (into retval)
39694                 | ' Z flag is also set if current device is valid
39694                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
39694                 | '------------------------------------------------------------------------------
39694                 | emupad_getnum
39694                 | .loop
39694                 | '------------------------------------------------------------------------------
39694                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
39694                 | '------------------------------------------------------------------------------
39694                 | emupad_discon
39694                 | .loop         
39694                 |         
39694                 |         ' FALL THROUGH!!!
39694                 | 
39694                 | '------------------------------------------------------------------------------
39694                 | ' Update EmuPad reports (all of them...)
39694                 | '------------------------------------------------------------------------------
39694                 | emupad_write_reports
39694                 | .devloop
39694                 | 
39694                 | end
39694                 | 
39694                 | 
39694                 | '------------------------------------------------------------------------------
39694                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39694                 | '------------------------------------------------------------------------------
39694                 | ' On entry:
39694                 | ' On exit:
39694                 | '------------------------------------------------------------------------------
39694                 | hget_hub_status
39694     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
39698     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3969c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
396a0     01 90 2F F9 |                 setword hpar3, #1, #1
396a4     CF 02 A0 FD |                 call    #do_int_in
396a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
396ac     0C 00 90 AD |         if_z    jmp     #.data
396b0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
396b4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
396b8     2D 00 64 FD |                 ret
396bc                 | .data
396bc     00 90 0F F2 |                 cmp     hpar3, #0               wz
396c0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
396c4                 | 
396c4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
396c8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
396cc     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
396d0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
396d4                 |                 debug(ubin_long(hub_status_chg))
396d4                 | 
396d4     01 5A 06 F6 |                 mov     hdev_port, #1
396d8                 | .loop
396d8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
396dc     0C 00 B0 AD |         if_x1   call    #hub_port_handler
396e0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
396e4     F0 FF 9F 3D |         if_nc   jmp     #.loop
396e8     2D 00 64 FD |                 ret
396ec                 | 
396ec                 | hub_port_handler
396ec     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
396f0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
396f4     27 EF 03 F6 |                 mov     pb, urx_buff_p
396f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
396fc     55 02 A0 FD |                 call    #control_read
39700     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39704                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39704                 | 
39704     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
39708     50 01 90 5D |         if_x0   jmp     #.other
3970c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
39710     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
39714     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39718     A0 02 A0 FD |                 call    #control_write
3971c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
39720     7C 01 90 5D |         if_x0   jmp     #.disconnect
39724     B0 99 02 F6 |                 mov     hctwait, _100ms_
39728     EF 02 A0 FD |                 call    #poll_waitx
3972c                 | 
3972c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
39730     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
39734     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39738     A0 02 A0 FD |                 call    #control_write
3973c                 | 
3973c     02 76 07 F6 |                 mov     htmp3, #2
39740                 | .wait_reset
39740     AC 99 02 F6 |                 mov     hctwait, _8ms_
39744     EF 02 A0 FD |                 call    #poll_waitx
39748     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3974c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39750     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39754     55 02 A0 FD |                 call    #control_read
39758     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3975c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
39760     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
39764                 | 
39764     10 02 D0 FE |                 loc     ptra, #clr_port_feat
39768     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3976c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39770     A0 02 A0 FD |                 call    #control_write
39774                 | 
39774     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
39778                 | .wait_recover
39778     A7 99 02 F6 |                 mov     hctwait, _1ms_
3977c     EF 02 A0 FD |                 call    #poll_waitx
39780     FD 71 6F FB |                 djnz    htmp,#.wait_recover
39784                 | 
39784     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39788     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3978c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39790                 | 
39790     00 08 00 FF 
39794     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
39798     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3979c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
397a0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
397a4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
397a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
397ac     48 01 90 5D |         if_nz   jmp     #.done
397b0                 | .get_dev_desc
397b0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
397b4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
397b8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
397bc     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
397c0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
397c4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
397c8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
397cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
397d0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
397d4     AC 99 02 F6 |                 mov     hctwait, _8ms_
397d8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
397dc     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
397e0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
397e4     BE 00 A0 FD |                 call    #calc_crc5
397e8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
397ec     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
397f0     F7 AD C2 FA |                 rdbyte  total_data, pb
397f4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
397f8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
397fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39800     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39804     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
39808     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3980c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3980c     9F 99 02 F6 |                 mov     hctwait, _500us_
39810     EF 02 A0 FD |                 call    #poll_waitx
39814     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
39818     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3981c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39820     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
39824     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39828     CC 00 90 5D |         if_nz   jmp     #.done
3982c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
39830     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
39834     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
39838     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3983c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39840     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
39844     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39848     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3984c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39850     A4 00 90 CD |         if_b    jmp     #.done
39854     6C F0 BF FD |                 call    #hparse_con_desc
39858     9C 00 90 FD |                 jmp     #.done
3985c                 | 
3985c                 | .other
3985c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
39860     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
39864     28 00 90 AD |         if_x1   jmp     #.reset_feature
39868     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3986c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
39870     1C 00 90 AD |         if_x1   jmp     #.reset_feature
39874     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
39878     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3987c     10 00 90 AD |         if_x1   jmp     #.reset_feature
39880     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
39884     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
39888     04 00 90 AD |         if_x1   jmp     #.reset_feature
3988c     68 00 90 FD |                 jmp     #.done
39890                 | .reset_feature
39890     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
39894     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39898     A0 02 A0 FD |                 call    #control_write
3989c     58 00 90 FD |                 jmp     #.done
398a0                 | .disconnect
398a0                 | 
398a0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
398a4     00 70 E3 F8 |                 getbyte htmp
398a8     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
398ac     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
398b0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
398b4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
398b8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
398bc     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
398c0                 |         if EMUPAD_MAX_PLAYER > 0
398c0                 |         end
398c0                 |         if HAVE_MOUSE
398c0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
398c4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
398c8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
398cc                 |         end
398cc                 |         if HAVE_HIDPAD
398cc     14 0A F0 FE |                 loc ptrb,#hidpad_report
398d0     2D 71 03 F6 |                 mov htmp,hdev_port
398d4     01 70 E7 F2 |                 cmpsub htmp,#1
398d8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
398dc     B8 F3 03 F1 |                 add ptrb,htmp
398e0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
398e4     80 01 6C FC |                 wrlong #0,ptrb
398e8                 |         end
398e8                 | 
398e8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
398ec     00 00 C4 F8 |                 setbyte #0
398f0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
398f4     00 00 04 F6 |                 mov     0-0, #0
398f8                 | 
398f8                 | .done
398f8     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
398fc     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39900     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39904     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
39908     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3990c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39910                 | 
39910     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39914     27 EF 03 F6 |                 mov     pb, urx_buff_p
39918     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3991c     55 02 A0 FD |                 call    #control_read
39920     00 69 06 FB |                 rdlong  hub_port_status, ptra
39924                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39924     2D 00 64 FD |                 ret
39928                 | 
39928                 | '------------------------------------------------------------------------------
39928                 | ' Partially populated SETUP packets
39928                 | '------------------------------------------------------------------------------
39928     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39929     06          |                 byte    REQ_GET_DESC
3992a     00 01       |                 word    TYPE_DEVICE << 8
3992c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3992e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39930     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39931     06          |                 byte    REQ_GET_DESC
39932     00 02       |                 word    TYPE_CONFIG << 8
39934     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39936     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39938     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39939     09          |                 byte    REQ_SET_CONFIG
3993a     00 00       |                 word    0       ' Configuration value
3993c     00 00       |                 word    0       ' Zero
3993e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39940     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39941     05          |                 byte    REQ_SET_ADDR
39942     00 00       |                 word    0       ' Zero
39944     00 00       |                 word    0       ' Zero
39946     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
39948                 | '------------------------------------------------------------------------------
39948                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
39948                 | ' wValue field dictates which protocol should be used.
39948                 | '
39948                 | ' When initialized, all devices default to report protocol. However the host
39948                 | ' should not make any assumptions about the device state and should set the
39948                 | ' desired protocol whenever initializing a device.
39948                 | '------------------------------------------------------------------------------
39948     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39949     0B          |                 byte    HID_SET_PROTO
3994a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3994c                 |                                                 ' (HID 1.11 Section 7.2.6).
3994c     00 00       |                 word    0               ' Interface index number.
3994e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39950                 | '------------------------------------------------------------------------------
39950     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39951     0A          |                 byte    HID_SET_IDLE
39952     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
39954                 |                                         ' reporting until a change is detected in the report data
39954                 | 
39954                 |                                         ' (HID 1.11 Section 7.2.4).
39954     00 00       |                 word    0       ' Interface index number.
39956     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
39958     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39959     09          |                 byte    HID_SET_REPORT
3995a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3995c                 |                                         ' (HID 1.11 Section 7.2.2).
3995c     00 00       |                 word    0       ' Interface index number.
3995e     00 00       |                 word    0       ' Size of the report, in bytes.
39960     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
39961     06          |                 byte    REQ_GET_DESC
39962     00 22       |                 word    TYPE_REPORT << 8
39964     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39966     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39968                 | '------------------------------------------------------------------------------
39968     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
39969     06          |                 byte    REQ_GET_DESC
3996a     00 29       |                 word    TYPE_HUB << 8
3996c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3996e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39970     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39971     03          |                 byte    REQ_SET_FEATURE
39972     00 00       |                 word    0       ' port power
39974     01 00       |                 word    1       ' Port index number (1+)
39976     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39978     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39979     01          |                 byte    REQ_CLEAR_FEATURE
3997a     00 00       |                 word    0       ' port power
3997c     01 00       |                 word    1       ' Port index number (1+)
3997e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39980     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
39981     00          |                 byte    REQ_GET_STATUS
39982     00 00       |                 word    0
39984     01 00       |                 word    1       ' Port index number (1+)
39986     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
39988                 | '------------------------------------------------------------------------------
39988                 | if _HAVE_GAMEPAD
39988     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3998c                 | ps3_command_buff
3998c     00 00 00 00 
39990     00          |                 byte    $00, $00, $00, $00, $00
39991     00 00 00 00 
39995     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
39996     FF 27 10 00 
3999a     32          |                 byte    $FF, $27, $10, $00, $32
3999b     FF 27 10 00 
3999f     32          |                 byte    $FF, $27, $10, $00, $32
399a0     FF 27 10 00 
399a4     32          |                 byte    $FF, $27, $10, $00, $32
399a5     FF 27 10 00 
399a9     32          |                 byte    $FF, $27, $10, $00, $32
399aa     00 00 00 00 
399ae     00          |                 byte    $00, $00, $00, $00, $00
399af     00 00 00 00 
399b3     00          |                 byte    $00, $00, $00, $00, $00
399b4     00 00 00 00 
399b8     00          |                 byte    $00, $00, $00, $00, $00
399b9     00 00 00    |                 byte    $00, $00, $00
399bc                 | '------------------------------------------------------------------------------
399bc     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
399bf                 |                                         ' 0x01 All blinking
399bf                 |                                         ' 0x02 1 flashes, then on
399bf                 |                                         ' 0x03 2 flashes, then on
399bf                 |                                         ' 0x04 3 flashes, then on
399bf                 |                                         ' 0x05 4 flashes, then on
399bf                 |                                         ' 0x06 1 on
399bf                 |                                         ' 0x07 2 on
399bf                 |                                         ' 0x08 3 on
399bf                 |                                         ' 0x09 4 on
399bf                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
399bf                 |                                         ' 0x0B Blinking*
399bf                 |                                         ' 0x0C Slow blinking*
399bf                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
399bf     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
399c2     00          |                 byte    $00             ' Left rumble
399c3     00          |                 byte    $00             ' Right rumble
399c4     00 00 00    |                 byte    $00, $00, $00
399c7     00          | end
399c8                 | alignl
399c8                 | 
399c8                 | if HAVE_MOUSE
399c8     00 00 00 00 
399cc     00 00 00 00 | mouse_limits long 0[2]
399d0     00 00 00 00 | mouse_outptr long 0
399d4                 | end
399d4                 | 
399d4                 | if KEYQUEUE_SIZE > 0
399d4     00          | keyq_head byte 0
399d5     00          | keyq_tail byte 0
399d6     00 00 00 00 
      ...             
39bd2     00 00 00 00 
39bd6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39bd8                 | alignl
39bd8                 | end
39bd8                 | 
39bd8                 | if EMUPAD_MAX_PLAYER > 0
39bd8                 | emupad_rule_buffer
39bd8                 | if EMUPAD_BUILTIN_RULES
39bd8                 | file "padmap_builtin.dat"
39bd8                 | end
39bd8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39bd8                 | '' Default rule directly follows!
39bd8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39bd8                 | end
39bd8                 | 
39bd8                 | '------------------------------------------------------------------------------
39bd8                 | ' The USB data cache area gets zero-filled at every device disconnect
39bd8                 | '------------------------------------------------------------------------------
39bd8                 | usb_cache_start
39bd8                 | 
39bd8                 | ' HID descriptor and report buffers
39bd8                 | if !!OVERLAP_MEMORY
39bd8     00 00 00 00 
      ...             
3a2d0     00 00 00 00 
3a2d4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a2d8                 | end
3a2d8     00 00 00 00 
3a2dc     00 00 00 00 | hkbd_report     byte    0[8]
3a2e0     00 00 00 00 | hkbd_led_rep    byte    0
3a2e4                 | alignl
3a2e4                 | 
3a2e4                 | if HAVE_HIDPAD
3a2e4     00 00 00 00 
      ...             
3a3a0     00 00 00 00 
3a3a4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a3a8                 | end
3a3a8                 | 
3a3a8                 | ' HUB descriptor
3a3a8     00          | hub_descr       byte    0   ' bDescLength
3a3a9     00          |                 byte    0   ' bDescriptorType
3a3aa     00          |                 byte    0   ' bNbrPorts
3a3ab     00 00       |                 word    0   ' wHubCharacteristics
3a3ad     00          |                 byte    0   ' bPwrOn2PwrGood
3a3ae     00          |                 byte    0   ' bHubContrCurrent
3a3af     00          |                 byte    0   ' DeviceRemoveable
3a3b0     00          |                 byte    0   ' PortPwrCtrlMask
3a3b1                 | 
3a3b1                 | usb_cache_end
3a3b1                 | 
3a3b1                 | if HAVE_MOUSE
3a3b1     00 00 00 00 | mouse_xacc      long 0
3a3b5     00 00 00 00 | mouse_yacc      long 0
3a3b9     00 00 00 00 | mouse_zacc      long 0
3a3bd     00          | mouse_bstate    byte 0
3a3be     00          | mouse_lpending  byte 0
3a3bf     00          | mouse_rpending  byte 0
3a3c0     00          | mouse_mpending  byte 0
3a3c1     00          | mouse_lock      byte 0
3a3c2     00 00 00    |                 byte 0[3] ' padding
3a3c5                 | end
3a3c5                 | 
3a3c5     00 00 00 00 
      ...             
3a43d     00 00 00 00 
3a441     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a445     00 00 00 00 
3a449     00 00 00 00 
3a44d     00 00 00 00 
3a451     00 00 00 00 
3a455     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a457     00 00 00 00 
      ...             
3a54f     00 00 00 00 
3a553     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a557                 | 
3a557     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a558                 | 	alignl
3a558                 | _audio096_spin2_dat_
3a558                 | 
3a558                 | audio       org     0
3a558                 | 
3a558     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a55c     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a560     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a564                 |  
3a564     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a568     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a56c     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a570     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a574                 | 
3a574     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a578     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a57c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a580     0F 24 06 FC |             wrpin   dac2,#right
3a584     0F 00 1E FC |             wxpin   #256,#right    
3a588     41 9C 64 FD |             dirh    #left addpins 1
3a58c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a590     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a594     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a598                 |             
3a598                 | '---------------------------------------------------------------------------------        
3a598                 | '----------------- The main loop -------------------------------------------------
3a598                 | '---------------------------------------------------------------------------------
3a598                 | 
3a598     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a59c     10 00 90 CD |       if_c  jmp     #loop1
3a5a0                 |   
3a5a0     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a5a4     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a5a8     D5 00 80 F1 |             sub     0-0,a40000000
3a5ac     FD 01 6E FB |             djnz    cn,#p402
3a5b0                 |     
3a5b0     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a5b4     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a5b8     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a5bc     01 00 06 C6 |     if_c    mov     cn,#1
3a5c0     DA 02 3A F3 |             fle     ct,time3 wcz
3a5c4     02 00 06 C6 |     if_c    mov     cn,#2     
3a5c8     DB 02 3A F3 |             fle     ct,time4 wcz
3a5cc     03 00 06 C6 |     if_c    mov     cn,#3
3a5d0     DC 02 3A F3 |             fle     ct,time5 wcz
3a5d4     04 00 06 C6 |     if_c    mov     cn,#4
3a5d8     DD 02 3A F3 |             fle     ct,time6 wcz
3a5dc     05 00 06 C6 |     if_c    mov     cn,#5
3a5e0     DE 02 3A F3 |             fle     ct,time7 wcz
3a5e4     06 00 06 C6 |     if_c    mov     cn,#6
3a5e8     DF 02 3A F3 |             fle     ct,time8 wcz
3a5ec     07 00 06 C6 |     if_c    mov     cn,#7
3a5f0                 | 
3a5f0                 | 
3a5f0                 | '----------------------------------------------------------------------------------
3a5f0                 | '------------- Compute channel samples --------------------------------------------
3a5f0                 | '----------------------------------------------------------------------------------
3a5f0                 | 
3a5f0                 | 
3a5f0     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a5f4     06 C0 65 F0 |             shl     channeladd,#6
3a5f8     E0 F0 03 F1 |             add     ptra,channeladd
3a5fc                 | 
3a5fc     28 16 64 FD |             setq    #11                        	' read parameters
3a600     00 D7 05 FB |             rdlong  pointer0,ptra
3a604                 |     	    
3a604     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a608     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a60c     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a610     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a614     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a618     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a61c     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a620     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a624                 |             
3a624     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a628     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a62c     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a630                 | 
3a630     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a634     EC 08 3A F9 |             getword oldrs,sample0,#1
3a638     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a63c     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a640     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a644     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a648                 | 
3a648     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a64c     00 04 02 F6 |             mov     dt0,0-0    
3a650     D7 04 82 F1 |             sub     dt0,time0
3a654                 |             
3a654     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a658     FB 00 00 F1 |             add     0-0,afreq0  	
3a65c                 |             
3a65c                 | '---- envelopes
3a65c                 |             
3a65c     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a660     20 00 00 AF 
3a664     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a668     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a66c                 | 
3a66c     FB 48 02 F6 |             mov     envs1,afreq0
3a670     F5 48 02 FA |             mul     envs1,envspd0
3a674     24 E7 01 F1 |             add     envph0,envs1 
3a678                 | 
3a678     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a67c     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a680     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a684     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a688     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a68c     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a690     00 46 06 36 |     if_ge   mov     envlo,#0
3a694     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a698     16 E6 65 30 |     if_ge   shl     envph0,#22
3a69c                 | 
3a69c     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a6a0     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a6a4     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a6a8     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a6ac     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a6b0     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a6b4     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a6b8     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a6bc     23 49 02 FA |             mul     envs1,envlo
3a6c0     25 49 02 F1 |             add     envs1,envs2
3a6c4     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a6c8                 |             
3a6c8     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a6cc     1B C6 61 AD |     if_z    getrnd  spl
3a6d0     58 00 90 AD |     if_z    jmp     #p406
3a6d4                 |  
3a6d4     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a6d8     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a6dc     08 D6 45 F0 |             shr     pointer0,#8
3a6e0                 |          
3a6e0     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a6e4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a6e8     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a6ec     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a6f0                 |         
3a6f0     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a6f4     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a6f8     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a6fc                 |             
3a6fc     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a700     ED C4 01 F1 |             add     qq,sstart0            
3a704                 | 
3a704     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a708     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a70c     1C 01 B0 1D |     if_gt   call    #cache_read
3a710                 |          
3a710     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a714     08 C6 65 50 |     if_nz   shl     spl,#8
3a718     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a71c     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a720     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a724     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a728     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a72c                 | 
3a72c                 | 
3a72c     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a730     00 C6 01 F6 |             mov     spl,0-0
3a734     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a738     00 C6 01 F6 |             mov     spl,0-0
3a73c                 | 
3a73c     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a740     00 0A 02 F6 |             mov     ls0,0-0
3a744     20 00 00 FF 
3a748     00 C4 05 F6 |             mov     qq,##16384
3a74c     FE C4 81 F1 |             sub     qq,apan0
3a750     E2 C6 31 FA |             scas    spl,qq
3a754     00 0C 02 F6 |             mov     rs0, 0-0
3a758                 | 
3a758     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a75c     06 11 02 F1 |             add     rs,rs0
3a760     03 0F 82 F1 |             sub     ls,oldls
3a764     05 0F 02 F1 |             add     ls,ls0
3a768                 |    
3a768     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a76c     05 D9 21 F9 |             setword sample0,ls0,#0
3a770                 |             
3a770     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a774     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a778     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a77c                 |   '  if_z    mov     sample0,#0
3a77c     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a780     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a784     04 00 00 AF 
3a788     00 B0 05 A1 |     if_z    add     time1,##2048
3a78c     D8 B2 01 A6 |     if_z    mov     time2,time1
3a790     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a794                 | 
3a794     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a798     00 D7 65 FC |             wrlong  pointer0,ptra
3a79c     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a7a0     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a7a4                 |                       
3a7a4     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a7a8     FF C3 25 A7 |     if_z    decmod  front, #511          
3a7ac                 |          
3a7ac     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a7b0     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a7b4     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a7b8     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a7bc                 | 	    
3a7bc                 | 		    
3a7bc     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a7c0     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a7c4     04 15 02 F6 |             mov     newsample, oldrs       
3a7c8                 | 
3a7c8     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a7cc     02 AF 01 F1 |             add     time0,dt0    
3a7d0                 |                                      
3a7d0     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a7d4     D8 FD 9F AD |     if_z    jmp     #loop1
3a7d8     02 C5 01 F6 |             mov     qq,dt0
3a7dc                 | 
3a7dc                 |     
3a7dc                 |             
3a7dc     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a7e0     40 00 90 3D |     if_nc   jmp     #p399
3a7e4     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a7e8     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a7ec     F4 FF 9F AD |     if_e    jmp     #p398   
3a7f0                 | 		
3a7f0     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a7f4     20 00 90 AD |     if_z    jmp     #p302	   
3a7f8                 |   
3a7f8     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a7fc     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a800     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a804     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a808     60 1E 66 FC |             wrlong  scptr2,#$60
3a80c     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a810     01 00 00 CF 
3a814     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a818                 | 			    
3a818     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a81c     00 00 00 FF 
3a820     FF C3 05 F7 |             incmod  front, ##511
3a824     ED C5 6D FB | p399        djnz    qq,#p301
3a828                 |             
3a828     6C FD 9F FD |             jmp     #loop            'loop
3a82c                 | 
3a82c                 | '----------------------------------------------------------------------------------
3a82c                 | '------------- This is the end of the main loop -----------------------------------
3a82c                 | '----------------------------------------------------------------------------------
3a82c                 | 
3a82c                 | '----------------------------------------------------------------------------------
3a82c                 | '------------- PSRAM cache ----------- --------------------------------------------
3a82c                 | '----------------------------------------------------------------------------------
3a82c                 | 
3a82c                 | ' There are 8 cache pointers for 8 channels
3a82c                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a82c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a82c                 | 
3a82c                 | 
3a82c     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a830                 |             
3a830     E2 40 02 F6 | 	    mov     addrhi,qq		
3a834     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a838     14 01 96 F9 | 	    alts    cn,#cache1            
3a83c     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a840     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a844                 | 	
3a844     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a848     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a84c     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a850     08 38 66 F0 | 	    shl     cmd,#8
3a854     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a858     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a85c     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a860     13 3B 02 F1 |             add     hubaddr,hubptr 
3a864     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a868     28 04 64 FD |             setq    #2                          ' write 3 longs
3a86c     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a870     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a874     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a878                 |             
3a878                 | 	
3a878     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a87c     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a880     13 C5 01 F1 | 	    add     qq,hubptr
3a884     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a888     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a88c                 |           
3a88c                 | 
3a88c                 | '--------------------------------------------------------------------------
3a88c                 | '------ Interrupt service -------------------------------------------------
3a88c                 | '------ Output the sample, get the next one if exists ---------------------
3a88c                 | '--------------------------------------------------------------------------
3a88c                 | 
3a88c     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a890     0F D0 25 FC |             wypin   rsample,#right       '4
3a894     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a898     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a89c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a8a0     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a8a4     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a8a8                 |     
3a8a8     F5 FF 3B FB |             reti1                        '17/19 
3a8ac                 |           
3a8ac                 | '---------------------------------------------------------------------------
3a8ac                 | '-------- End of interrupt -------------------------------------------------
3a8ac                 | '---------------------------------------------------------------------------    
3a8ac                 | 
3a8ac                 | 
3a8ac                 | '---------------------------------------------------------------------------
3a8ac                 | '------- Variables ---------------------------------------------------------
3a8ac                 | '---------------------------------------------------------------------------
3a8ac                 | 
3a8ac                 | ' constants
3a8ac                 | 
3a8ac     00 00 00 40 | a40000000   long $40000000
3a8b0     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a8b4                 | 
3a8b4                 | ' Time variables
3a8b4                 | 
3a8b4     00 00 00 00 | time0       long 0    ' Global sample computing time
3a8b8     01 00 00 00 | time1       long 1    ' Local channels time
3a8bc     02 00 00 00 | time2       long 2
3a8c0     03 00 00 00 | time3       long 3
3a8c4     04 00 00 00 | time4       long 4
3a8c8     05 00 00 00 | time5       long 5
3a8cc     06 00 00 00 | time6       long 6
3a8d0     07 00 00 00 | time7       long 7
3a8d4     08 00 00 00 | time8       long 8
3a8d8                 | 
3a8d8     00 00 00 00 | channeladd long 0
3a8dc                 | 
3a8dc     00 00 00 00 | front       long 0
3a8e0                 | 
3a8e0                 | ' temporary variables 
3a8e0     00 00 00 00 | qq          long 0
3a8e4     00 00 00 00 | spl         long 0
3a8e8     00 00 00 00 | zero        long 0
3a8ec     00 00 00 00 | mailbox     long 0
3a8f0     00 00 00 00 | mailbox2 long 0
3a8f4                 | 
3a8f4                 | ' Interrupt ISR variables
3a8f4                 | 
3a8f4     00 00 00 00 | lsample     long 0
3a8f8     00 00 00 00 | rsample     long 0
3a8fc     00 00 00 00 | lsnext      long 0
3a900     00 00 00 00 | rsnext      long 0 
3a904                 | 
3a904                 | ' channel parameter block
3a904                 | 
3a904     00 00 00 00 | pointer0    long 0     
3a908     00 00 00 00 | sample0     long 0
3a90c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a910     00 00 00 00 | lstart0     long 0
3a914     00 00 00 00 | lend0       long 0
3a918     00 00 00 00 | volpan0     long 0
3a91c     00 00 00 00 | freqskip0   long 0
3a920     00 00 00 00 | command0    long 0
3a924     00 00 00 00 | envph0	    long 0
3a928     00 00 00 00 | envptr0	    long 0
3a92c     00 00 00 00 | envspd0	    long 0
3a930     00 00 00 00 | envlen0	    long 0
3a934     00 00 00 00 | res5	    long 0
3a938     00 00 00 00 | res6	    long 0
3a93c     00 00 00 00 | res7	    long 0
3a940     00 00 00 00 | res8	    long 0
3a944                 | 
3a944     00 00 00 00 | afreq0      long 0
3a948     00 00 00 00 | askip0      long 0
3a94c     00 00 00 00 | avol0       long 0
3a950     00 00 00 00 | apan0       long 0
3a954                 | 
3a954     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a958     00 00 00 00 | cn          long 0
3a95c     00 00 00 00 | ct          long 0
3a960     00 00 00 00 | dt0         long 0
3a964                 | 
3a964                 | ' Samples
3a964     00 00 00 00 | oldls       long 0
3a968     00 00 00 00 | oldrs       long 0
3a96c                 | 
3a96c     00 00 00 00 | ls0         long 0
3a970     00 00 00 00 | rs0         long 0
3a974                 | 
3a974     00 00 00 00 | ls          long 0    
3a978     00 00 00 00 | rs          long 0
3a97c                 | 
3a97c     00 00 00 00 | oldsample   long 0
3a980     00 00 00 00 | newsample   long 0
3a984                 | 
3a984     00 00 00 00 | nrsample    long 0
3a988     00 00 00 00 | nlsample    long 0
3a98c                 | 
3a98c     00 00 00 00 | scbase long 0
3a990     00 00 00 00 | scptr long 0
3a994     00 00 00 00 | scptr2 long 0
3a998     00 00 00 00 | scope long 0
3a99c                 | 
3a99c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a9a0     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a9a4                 | 
3a9a4     00 18 07 00 | hubptr      long $71800
3a9a8     00 00 00 00 | cache1      long 0
3a9ac     00 00 00 00 | cache2      long 0
3a9b0     00 00 00 00 | cache3      long 0
3a9b4     00 00 00 00 | cache4      long 0
3a9b8     00 00 00 00 | cache5      long 0
3a9bc     00 00 00 00 | cache6      long 0
3a9c0     00 00 00 00 | cache7      long 0
3a9c4     00 00 00 00 | cache8      long 0
3a9c8                 | 
3a9c8                 | 
3a9c8     00 00 00 00 | cmd         long 0
3a9cc     00 00 00 00 | hubaddr     long 0
3a9d0     00 01 00 00 | count       long 256
3a9d4     00 00 00 00 | addrlo long 0
3a9d8     00 00 00 00 | addrhi long 0
3a9dc     00 00 00 00 | pointer00 long 0
3a9e0     00 00 00 00 | envhi long 0
3a9e4     00 00 00 00 | envlo long 0
3a9e8     00 00 00 00 | envs1 long 0
3a9ec     00 00 00 00 | envs2 long 0
3a9f0     00 00 00 00 | noise0 long 0
3a9f4     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a9f8     00 00 00 00 
3a9fc     00 00 00 00 | null  			long 	0,0           ' for channel reset
3aa00                 | 	alignl
3aa00                 | __system__dat_
3aa00     00 00 00 00 
3aa04     00 00 00 00 | 	byte	$00[8]
3aa08     03 00 00 00 
3aa0c     00 00 00 00 
3aa10     00 00 00 00 
3aa14     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa18     00 00 00 00 
      ...             
3aca4     00 00 00 00 
3aca8     00 00 00 00 | 	byte	$00[660]
3acac     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3acb0     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3acb4     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3acb8     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3acbc     00 00 00 00 
3acc0     00 00 00 00 
3acc4     00 00 00 00 
3acc8     00 00 00 00 
3accc     00 00 00 00 
3acd0     00 00 00 00 
3acd4     00 00 00 00 | 	byte	$00[28]
3acd8     40 AD 03 00 | 	long	@@@__system__dat_ + 832
3acdc     43 AD 03 00 | 	long	@@@__system__dat_ + 835
3ace0     64 AD 03 00 | 	long	@@@__system__dat_ + 868
3ace4     7D AD 03 00 | 	long	@@@__system__dat_ + 893
3ace8     98 AD 03 00 | 	long	@@@__system__dat_ + 920
3acec     B2 AD 03 00 | 	long	@@@__system__dat_ + 946
3acf0     C2 AD 03 00 | 	long	@@@__system__dat_ + 962
3acf4     D4 AD 03 00 | 	long	@@@__system__dat_ + 980
3acf8     E6 AD 03 00 | 	long	@@@__system__dat_ + 998
3acfc     F8 AD 03 00 | 	long	@@@__system__dat_ + 1016
3ad00     04 AE 03 00 | 	long	@@@__system__dat_ + 1028
3ad04     15 AE 03 00 | 	long	@@@__system__dat_ + 1045
3ad08     29 AE 03 00 | 	long	@@@__system__dat_ + 1065
3ad0c     33 AE 03 00 | 	long	@@@__system__dat_ + 1075
3ad10     43 AE 03 00 | 	long	@@@__system__dat_ + 1091
3ad14     52 AE 03 00 | 	long	@@@__system__dat_ + 1106
3ad18     68 AE 03 00 | 	long	@@@__system__dat_ + 1128
3ad1c     81 AE 03 00 | 	long	@@@__system__dat_ + 1153
3ad20     95 AE 03 00 | 	long	@@@__system__dat_ + 1173
3ad24     A3 AE 03 00 | 	long	@@@__system__dat_ + 1187
3ad28     B7 AE 03 00 | 	long	@@@__system__dat_ + 1207
3ad2c     C3 AE 03 00 | 	long	@@@__system__dat_ + 1219
3ad30     D5 AE 03 00 | 	long	@@@__system__dat_ + 1237
3ad34     ED AE 03 00 | 	long	@@@__system__dat_ + 1261
3ad38     FF AE 03 00 | 	long	@@@__system__dat_ + 1279
3ad3c     12 AF 03 00 | 	long	@@@__system__dat_ + 1298
3ad40     4F 4B 00 4E 
3ad44     75 6D 65 72 
3ad48     69 63 61 6C 
3ad4c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ad50     75 6D 65 6E 
3ad54     74 20 6F 75 
3ad58     74 20 6F 66 
3ad5c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3ad60     61 69 6E 00 
3ad64     52 65 73 75 
3ad68     6C 74 20 6E 
3ad6c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ad70     65 70 72 65 
3ad74     73 65 6E 74 
3ad78     61 62 6C 65 
3ad7c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ad80     65 67 61 6C 
3ad84     20 6D 75 6C 
3ad88     74 69 62 79 
3ad8c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ad90     65 71 75 65 
3ad94     6E 63 65 00 
3ad98     4E 6F 20 73 
3ad9c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ada0     66 69 6C 65 
3ada4     20 6F 72 20 
3ada8     64 69 72 65 
3adac     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3adb0     79 00 42 61 
3adb4     64 20 66 69 
3adb8     6C 65 20 6E 
3adbc     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3adc0     72 00 50 65 
3adc4     72 6D 69 73 
3adc8     73 69 6F 6E 
3adcc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3add0     69 65 64 00 
3add4     4E 6F 74 20 
3add8     65 6E 6F 75 
3addc     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ade0     65 6D 6F 72 
3ade4     79 00 54 65 
3ade8     6D 70 6F 72 
3adec     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3adf0     66 61 69 6C 
3adf4     75 72 65 00 
3adf8     46 69 6C 65 
3adfc     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ae00     73 74 73 00 
3ae04     49 6E 76 61 
3ae08     6C 69 64 20 
3ae0c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ae10     6D 65 6E 74 
3ae14     00 54 6F 6F 
3ae18     20 6D 61 6E 
3ae1c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ae20     65 6E 20 66 
3ae24     69 6C 65 73 
3ae28     00 49 2F 4F 
3ae2c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ae30     6F 72 00 4E 
3ae34     6F 74 20 61 
3ae38     20 64 69 72 
3ae3c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ae40     72 79 00 49 
3ae44     73 20 61 20 
3ae48     64 69 72 65 
3ae4c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ae50     79 00 52 65 
3ae54     61 64 20 6F 
3ae58     6E 6C 79 20 
3ae5c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3ae60     20 73 79 73 
3ae64     74 65 6D 00 
3ae68     46 75 6E 63 
3ae6c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3ae70     20 6E 6F 74 
3ae74     20 69 6D 70 
3ae78     6C 65 6D 65 
3ae7c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3ae80     00 44 69 72 
3ae84     65 63 74 6F 
3ae88     72 79 20 6E 
3ae8c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3ae90     6D 70 74 79 
3ae94     00 4E 61 6D 
3ae98     65 20 74 6F 
3ae9c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3aea0     6E 67 00 44 
3aea4     65 76 69 63 
3aea8     65 20 6E 6F 
3aeac     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3aeb0     65 6B 61 62 
3aeb4     6C 65 00 42 
3aeb8     61 64 20 61 
3aebc     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3aec0     73 73 00 42 
3aec4     72 6F 6B 65 
3aec8     6E 20 63 6F 
3aecc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3aed0     74 69 6F 6E 
3aed4     00 44 65 76 
3aed8     69 63 65 20 
3aedc     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3aee0     65 73 6F 75 
3aee4     72 63 65 20 
3aee8     62 75 73 79 
3aeec     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3aef0     73 73 20 64 
3aef4     65 76 69 63 
3aef8     65 20 6C 69 
3aefc     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3af00     6F 20 73 70 
3af04     61 63 65 20 
3af08     6F 6E 20 64 
3af0c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3af10     65 00 55 6E 
3af14     6B 6E 6F 77 
3af18     6E 20 65 72 
3af1c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3af20     00 00 00 00 
3af24     00 00 00 00 | 	byte	$00[8]
3af28     05 00 00 00 
3af2c     00 00 00 00 
3af30     00 00 00 00 
3af34     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af38     00 00 00 00 | 	byte	$00, $00, $00, $00
3af3c     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3af40     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3af44     00 00 00 00 | 	byte	$00, $00, $00, $00
3af48     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3af4c     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3af50     00 00 00 00 
3af54     00 00 00 00 | 	byte	$00[8]
3af58     01 00 00 00 
3af5c     06 00 00 00 
3af60     00 00 00 00 
3af64     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af68     00 00 00 00 
3af6c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3af70     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3af74     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3af78     00 00 00 00 | 	byte	$00, $00, $00, $00
3af7c     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3af80     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3af84     00 00 00 00 
3af88     00 00 00 00 | 	byte	$00[8]
3af8c     01 00 00 00 
3af90     06 00 00 00 
3af94     00 00 00 00 
3af98     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af9c     00 00 00 00 
3afa0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3afa4     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3afa8     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3afac     00 00 00 00 | 	byte	$00, $00, $00, $00
3afb0     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3afb4     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3afb8     00 00 00 00 
      ...             
3b128     00 00 00 00 
3b12c     00 00 00 00 | 	byte	$00[376]
3b130     34 B1 03 00 | 	long	@@@__system__dat_ + 1844
3b134     00 00 00 00 
3b138     00 00 00 00 
3b13c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b140                 | 	alignl
3b140                 | _fatfs_cc_dat_
3b140     C7 00 FC 00 
3b144     E9 00 E2 00 
3b148     E4 00 E0 00 
3b14c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3b150     EA 00 EB 00 
3b154     E8 00 EF 00 
3b158     EE 00 EC 00 
3b15c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3b160     C9 00 E6 00 
3b164     C6 00 F4 00 
3b168     F6 00 F2 00 
3b16c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3b170     FF 00 D6 00 
3b174     DC 00 F8 00 
3b178     A3 00 D8 00 
3b17c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3b180     E1 00 ED 00 
3b184     F3 00 FA 00 
3b188     F1 00 D1 00 
3b18c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3b190     BF 00 AE 00 
3b194     AC 00 BD 00 
3b198     BC 00 A1 00 
3b19c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3b1a0     91 25 92 25 
3b1a4     93 25 02 25 
3b1a8     24 25 C1 00 
3b1ac     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3b1b0     A9 00 63 25 
3b1b4     51 25 57 25 
3b1b8     5D 25 A2 00 
3b1bc     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3b1c0     14 25 34 25 
3b1c4     2C 25 1C 25 
3b1c8     00 25 3C 25 
3b1cc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3b1d0     5A 25 54 25 
3b1d4     69 25 66 25 
3b1d8     60 25 50 25 
3b1dc     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3b1e0     F0 00 D0 00 
3b1e4     CA 00 CB 00 
3b1e8     C8 00 31 01 
3b1ec     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3b1f0     CF 00 18 25 
3b1f4     0C 25 88 25 
3b1f8     84 25 A6 00 
3b1fc     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3b200     D3 00 DF 00 
3b204     D4 00 D2 00 
3b208     F5 00 D5 00 
3b20c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3b210     DE 00 DA 00 
3b214     DB 00 D9 00 
3b218     FD 00 DD 00 
3b21c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3b220     AD 00 B1 00 
3b224     17 20 BE 00 
3b228     B6 00 A7 00 
3b22c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3b230     B0 00 A8 00 
3b234     B7 00 B9 00 
3b238     B3 00 B2 00 
3b23c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3b240     61 00 1A 03 
3b244     E0 00 17 03 
3b248     F8 00 07 03 
3b24c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3b250     78 01 00 01 
3b254     30 01 32 01 
3b258     06 01 39 01 
3b25c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3b260     2E 01 79 01 
3b264     06 01 80 01 
3b268     4D 00 43 02 
3b26c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b270     82 01 84 01 
3b274     84 01 86 01 
3b278     87 01 87 01 
3b27c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b280     8B 01 8B 01 
3b284     8D 01 8E 01 
3b288     8F 01 90 01 
3b28c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b290     93 01 94 01 
3b294     F6 01 96 01 
3b298     97 01 98 01 
3b29c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b2a0     9B 01 9C 01 
3b2a4     9D 01 20 02 
3b2a8     9F 01 A0 01 
3b2ac     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b2b0     A2 01 A4 01 
3b2b4     A4 01 A6 01 
3b2b8     A7 01 A7 01 
3b2bc     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b2c0     AB 01 AC 01 
3b2c4     AC 01 AE 01 
3b2c8     AF 01 AF 01 
3b2cc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b2d0     B3 01 B3 01 
3b2d4     B5 01 B5 01 
3b2d8     B7 01 B8 01 
3b2dc     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b2e0     BB 01 BC 01 
3b2e4     BC 01 BE 01 
3b2e8     F7 01 C0 01 
3b2ec     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b2f0     C3 01 C4 01 
3b2f4     C5 01 C4 01 
3b2f8     C7 01 C8 01 
3b2fc     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b300     CB 01 CA 01 
3b304     CD 01 10 01 
3b308     DD 01 01 00 
3b30c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b310     12 01 F3 01 
3b314     03 00 F1 01 
3b318     F4 01 F4 01 
3b31c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b320     22 02 12 01 
3b324     3A 02 09 00 
3b328     65 2C 3B 02 
3b32c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b330     66 2C 3F 02 
3b334     40 02 41 02 
3b338     41 02 46 02 
3b33c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b340     40 00 81 01 
3b344     86 01 55 02 
3b348     89 01 8A 01 
3b34c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b350     5A 02 90 01 
3b354     5C 02 5D 02 
3b358     5E 02 5F 02 
3b35c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b360     62 02 94 01 
3b364     64 02 65 02 
3b368     66 02 67 02 
3b36c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b370     6A 02 62 2C 
3b374     6C 02 6D 02 
3b378     6E 02 9C 01 
3b37c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b380     9D 01 73 02 
3b384     74 02 9F 01 
3b388     76 02 77 02 
3b38c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b390     7A 02 7B 02 
3b394     7C 02 64 2C 
3b398     7E 02 7F 02 
3b39c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b3a0     82 02 A9 01 
3b3a4     84 02 85 02 
3b3a8     86 02 87 02 
3b3ac     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b3b0     B1 01 B2 01 
3b3b4     45 02 8D 02 
3b3b8     8E 02 8F 02 
3b3bc     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b3c0     B7 01 7B 03 
3b3c4     03 00 FD 03 
3b3c8     FE 03 FF 03 
3b3cc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b3d0     86 03 88 03 
3b3d4     89 03 8A 03 
3b3d8     B1 03 11 03 
3b3dc     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b3e0     A3 03 A3 03 
3b3e4     C4 03 08 03 
3b3e8     CC 03 03 00 
3b3ec     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b3f0     8F 03 D8 03 
3b3f4     18 01 F2 03 
3b3f8     0A 00 F9 03 
3b3fc     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b400     F5 03 F6 03 
3b404     F7 03 F7 03 
3b408     F9 03 FA 03 
3b40c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b410     20 03 50 04 
3b414     10 07 60 04 
3b418     22 01 8A 04 
3b41c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b420     0E 01 CF 04 
3b424     01 00 C0 04 
3b428     D0 04 44 01 
3b42c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b430     00 00 7D 1D 
3b434     01 00 63 2C 
3b438     00 1E 96 01 
3b43c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b440     00 1F 08 06 
3b444     10 1F 06 06 
3b448     20 1F 08 06 
3b44c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b450     40 1F 06 06 
3b454     51 1F 07 00 
3b458     59 1F 52 1F 
3b45c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b460     5D 1F 56 1F 
3b464     5F 1F 60 1F 
3b468     08 06 70 1F 
3b46c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b470     BB 1F C8 1F 
3b474     C9 1F CA 1F 
3b478     CB 1F DA 1F 
3b47c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b480     F9 1F EA 1F 
3b484     EB 1F FA 1F 
3b488     FB 1F 80 1F 
3b48c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b490     08 06 A0 1F 
3b494     08 06 B0 1F 
3b498     04 00 B8 1F 
3b49c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b4a0     BC 1F CC 1F 
3b4a4     01 00 C3 1F 
3b4a8     D0 1F 02 06 
3b4ac     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b4b0     E5 1F 01 00 
3b4b4     EC 1F F3 1F 
3b4b8     01 00 FC 1F 
3b4bc     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b4c0     32 21 70 21 
3b4c4     10 02 84 21 
3b4c8     01 00 83 21 
3b4cc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b4d0     30 2C 2F 04 
3b4d4     60 2C 02 01 
3b4d8     67 2C 06 01 
3b4dc     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b4e0     80 2C 64 01 
3b4e4     00 2D 26 08 
3b4e8     41 FF 1A 03 
3b4ec     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b4f0     05 07 09 0E 
3b4f4     10 12 14 16 
3b4f8     18 1C 1E 43 
3b4fc     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b500     41 41 43 45 
3b504     45 45 49 49 
3b508     49 41 41 45 
3b50c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b510     4F 55 55 59 
3b514     4F 55 4F 9C 
3b518     4F 9E 9F 41 
3b51c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b520     A5 A6 A7 A8 
3b524     A9 AA AB AC 
3b528     AD AE AF B0 
3b52c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b530     41 41 41 B8 
3b534     B9 BA BB BC 
3b538     BD BE BF C0 
3b53c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b540     C5 41 41 C8 
3b544     C9 CA CB CC 
3b548     CD CE CF D1 
3b54c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b550     49 49 49 49 
3b554     D9 DA DB DC 
3b558     DD 49 DF 4F 
3b55c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b560     4F E6 E8 E8 
3b564     55 55 55 59 
3b568     59 EE EF F0 
3b56c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b570     F5 F6 F7 F8 
3b574     F9 FA FB FC 
3b578     FD FE FF 00 
3b57c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b580     00 00 00 00 | 	byte	$00, $00, $00, $00
3b584     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b588     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b58c     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b590     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b594     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b598     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b59c     00 00 00 00 
3b5a0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b5a4     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b5a8     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b5ac     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b5b0     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b5b4     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b5b8     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b5bc     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b5c0     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b5c4     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b5c8     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b5cc     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b5d0     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b5d4     FF FF FF FF 
3b5d8     1F 00 00 00 
3b5dc     1C 00 00 00 
3b5e0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b5e4     1E 00 00 00 
3b5e8     1F 00 00 00 
3b5ec     1E 00 00 00 
3b5f0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b5f4     1F 00 00 00 
3b5f8     1E 00 00 00 
3b5fc     1F 00 00 00 
3b600     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b604     1F 00 00 00 
3b608     00 00 00 00 
3b60c     1F 00 00 00 
3b610     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b614     5A 00 00 00 
3b618     78 00 00 00 
3b61c     97 00 00 00 
3b620     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b624     D4 00 00 00 
3b628     F3 00 00 00 
3b62c     11 01 00 00 
3b630     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b634     4E 01 00 00 
3b638     6D 01 00 00 
3b63c     FF FF FF FF 
3b640     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b644     00 00 00 00 
      ...             
3b65c     00 00 00 00 
3b660     00 00 00 00 | 	byte	$00[32]
3b664     82 B6 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b668     86 B6 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b66c     00 00 00 00 
3b670     00 00 00 00 
3b674     00 00 00 00 
3b678     00 00 00 00 
3b67c     00 00       | 	byte	$00[18]
3b67e     3F 3F 3F 00 
3b682     55 43 54 00 
3b686     55 43 54 00 
3b68a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b68e     00 00 00 00 
3b692     00 00 00    | 	byte	$00[7]
3b695     CA 9A 3B 00 
3b699     00 00 00 01 
3b69d     01 01 01 01 
3b6a1     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b6a5     91 11 11 11 
3b6a9     11 01 01 01 
3b6ad     01 01 01 01 
3b6b1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b6b5     01 01 01 01 
3b6b9     01 01 01    | 	byte	$01[7]
3b6bc     90 20 20 20 
3b6c0     20 20 20 20 
3b6c4     20 20 20 20 
3b6c8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b6cc     42 42 42 42 
3b6d0     42 42 42 42 
3b6d4     42 42       | 	byte	$42[10]
3b6d6     20 20 20 20 
3b6da     20 20 20    | 	byte	$20[7]
3b6dd     44 44 44 44 
3b6e1     44 44       | 	byte	$44[6]
3b6e3     04 04 04 04 
3b6e7     04 04 04 04 
3b6eb     04 04 04 04 
3b6ef     04 04 04 04 
3b6f3     04 04 04 04 | 	byte	$04[20]
3b6f7     20 20 20 20 
3b6fb     20 20       | 	byte	$20[6]
3b6fd     48 48 48 48 
3b701     48 48       | 	byte	$48[6]
3b703     08 08 08 08 
3b707     08 08 08 08 
3b70b     08 08 08 08 
3b70f     08 08 08 08 
3b713     08 08 08 08 | 	byte	$08[20]
3b717     20 20 20 20 
3b71b     01 00 00 00 
3b71f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b720                 | __methodtable__
3b720     10 B5 01 00 | 	long	@_do_no_command
3b724     B8 26 01 00 | 	long	@_do_plus
3b728     A4 2B 01 00 | 	long	@_do_minus
3b72c     6C 30 01 00 | 	long	@_do_or
3b730     84 31 01 00 | 	long	@_do_mul
3b734     10 37 01 00 | 	long	@_do_fdiv
3b738     54 2F 01 00 | 	long	@_do_and
3b73c     F0 34 01 00 | 	long	@_do_div
3b740     D8 38 01 00 | 	long	@_do_mod
3b744     F8 3A 01 00 | 	long	@_do_shl
3b748     10 3C 01 00 | 	long	@_do_shr
3b74c     28 3D 01 00 | 	long	@_do_power
3b750     38 1A 01 00 | 	long	@_do_getvar
3b754     CC BB 00 00 | 	long	@_do_push
3b758     38 14 01 00 | 	long	@_do_assign
3b75c     D4 82 01 00 | 	long	@_do_cls
3b760     CC FD 00 00 | 	long	@_do_new
3b764     4C 83 01 00 | 	long	@_do_plot
3b768     1C 84 01 00 | 	long	@_do_draw
3b76c     90 8D 01 00 | 	long	@_do_print
3b770     88 86 01 00 | 	long	@_do_circle
3b774     10 85 01 00 | 	long	@_do_fcircle
3b778     00 88 01 00 | 	long	@_do_box
3b77c     A8 8B 01 00 | 	long	@_do_frame
3b780     14 83 01 00 | 	long	@_do_color
3b784     B4 B4 00 00 | 	long	@_do_for
3b788     08 B8 00 00 | 	long	@_do_next
3b78c     30 FB 00 00 | 	long	@_do_list
3b790     40 CE 00 00 | 	long	@_do_run
3b794     F4 12 01 00 | 	long	@_do_error
3b798     EC FF 00 00 | 	long	@_do_fast_goto
3b79c     54 0F 01 00 | 	long	@_do_find_goto
3b7a0     64 11 01 00 | 	long	@_do_slow_goto
3b7a4     2C B1 01 00 | 	long	@_do_nothing
3b7a8     10 C2 00 00 | 	long	@_test_csave
3b7ac     74 C5 00 00 | 	long	@_do_save
3b7b0     80 C9 00 00 | 	long	@_do_load
3b7b4     C4 9C 01 00 | 	long	@_do_pinwrite
3b7b8     60 A7 01 00 | 	long	@_do_waitms
3b7bc     9C A8 01 00 | 	long	@_do_waitvbl
3b7c0     C4 AE 01 00 | 	long	@_do_if
3b7c4     A8 AF 01 00 | 	long	@_do_else
3b7c8     F0 3E 01 00 | 	long	@_do_eq
3b7cc     68 4D 01 00 | 	long	@_do_ge
3b7d0     40 52 01 00 | 	long	@_do_le
3b7d4     C8 43 01 00 | 	long	@_do_gt
3b7d8     A0 48 01 00 | 	long	@_do_lt
3b7dc     18 57 01 00 | 	long	@_do_ne
3b7e0     50 5D 01 00 | 	long	@_do_rnd
3b7e4     30 B1 01 00 | 	long	@_do_brun
3b7e8     FC B3 01 00 | 	long	@_do_beep
3b7ec     CC A8 01 00 | 	long	@_do_dir
3b7f0     E0 92 01 00 | 	long	@_do_paper
3b7f4     68 93 01 00 | 	long	@_do_ink
3b7f8     04 94 01 00 | 	long	@_do_font
3b7fc     80 94 01 00 | 	long	@_do_mode
3b800     68 B3 01 00 | 	long	@_do_mouse
3b804     6C 82 01 00 | 	long	@_do_gettime
3b808     9C B3 01 00 | 	long	@_do_cursor
3b80c     D0 B3 01 00 | 	long	@_do_click
3b810     F8 7F 01 00 | 	long	@_do_mousex
3b814     3C 80 01 00 | 	long	@_do_mousey
3b818     C4 80 01 00 | 	long	@_do_mousek
3b81c     80 80 01 00 | 	long	@_do_mousew
3b820     24 60 01 00 | 	long	@_do_sin
3b824     C8 75 01 00 | 	long	@_do_stick
3b828     4C 77 01 00 | 	long	@_do_strig
3b82c     0C 7F 01 00 | 	long	@_do_sprite
3b830     98 7B 01 00 | 	long	@_do_defsprite
3b834     D0 78 01 00 | 	long	@_do_getpixel
3b838     A8 A8 01 00 | 	long	@_do_waitclock
3b83c     1C B5 01 00 | 	long	@_do_negative
3b840     08 81 01 00 | 	long	@_do_rdpin
3b844     74 81 01 00 | 	long	@_do_rqpin
3b848     E8 81 01 00 | 	long	@_do_pinread
3b84c     5C 9F 01 00 | 	long	@_do_wrpin
3b850     DC 9F 01 00 | 	long	@_do_wxpin
3b854     5C A0 01 00 | 	long	@_do_wypin
3b858     4C 9D 01 00 | 	long	@_do_pinfloat
3b85c     8C 9D 01 00 | 	long	@_do_pinlo
3b860     CC 9D 01 00 | 	long	@_do_pinhi
3b864     4C 9E 01 00 | 	long	@_do_pinstart
3b868     0C 9E 01 00 | 	long	@_do_pintoggle
3b86c     DC A0 01 00 | 	long	@_do_position
3b870     80 6F 01 00 | 	long	@_do_cos
3b874     A0 70 01 00 | 	long	@_do_tan
3b878     C4 73 01 00 | 	long	@_do_atn
3b87c     AC 71 01 00 | 	long	@_do_asin
3b880     B8 72 01 00 | 	long	@_do_acos
3b884     D8 74 01 00 | 	long	@_do_sqr
3b888     E8 89 01 00 | 	long	@_do_fill
3b88c     44 F2 00 00 | 	long	@_do_defsnd
3b890     90 D1 00 00 | 	long	@_do_defenv
3b894     CC AF 01 00 | 	long	@_do_rad
3b898     F4 AF 01 00 | 	long	@_do_deg
3b89c     70 B0 01 00 | 	long	@_do_int
3b8a0     24 DE 00 00 | 	long	@_do_play
3b8a4     24 9A 01 00 | 	long	@_do_setdelay
3b8a8     7C 99 01 00 | 	long	@_do_setenv
3b8ac     CC 9A 01 00 | 	long	@_do_setlen
3b8b0     1C 9C 01 00 | 	long	@_do_setpan
3b8b4     74 9B 01 00 | 	long	@_do_setvol
3b8b8     2C 98 01 00 | 	long	@_do_setwave
3b8bc     D4 98 01 00 | 	long	@_do_setsustain
3b8c0     AC F1 00 00 | 	long	@_do_release
3b8c4     18 5F 01 00 | 	long	@_do_getenvsustain
3b8c8     64 A1 01 00 | 	long	@_do_poke
3b8cc     3C A2 01 00 | 	long	@_do_dpoke
3b8d0     14 A3 01 00 | 	long	@_do_lpoke
3b8d4     EC A3 01 00 | 	long	@_do_peek
3b8d8     9C A4 01 00 | 	long	@_do_dpeek
3b8dc     48 A5 01 00 | 	long	@_do_lpeek
3b8e0     58 A6 01 00 | 	long	@_do_adr
3b8e4     F4 A5 01 00 | 	long	@_do_fre
3b8e8     5C A6 01 00 | 	long	@_do_getnotevalue
3b8ec     F0 1F 01 00 | 	long	@_do_getaddr
3b8f0     E0 23 01 00 | 	long	@_do_inkey
3b8f4     CC B5 01 00 | 	long	@_do_abs
3b8f8     C0 6C 01 00 | 	long	@_do_hex
3b8fc     20 6E 01 00 | 	long	@_do_bin
3b900     BC 69 01 00 | 	long	@_do_val
3b904     C0 68 01 00 | 	long	@_do_chr
3b908     FC 65 01 00 | 	long	@_do_asc
3b90c     78 64 01 00 | 	long	@_do_left
3b910     F4 62 01 00 | 	long	@_do_right
3b914     30 61 01 00 | 	long	@_do_mid
3b918     54 67 01 00 | 	long	@_do_len
3b91c     9C B3 00 00 | 	long	@_do_gosub
3b920     24 B7 00 00 | 	long	@_do_return
3b924     0C CE 00 00 | 	long	@_do_end
3b928     D0 B7 00 00 | 	long	@_do_pop
3b92c     20 7A 01 00 | 	long	@_do_log
3b930     5C EA 00 00 | 	long	@_do_changevol
3b934     70 EF 00 00 | 	long	@_do_changewav
3b938     3C EB 00 00 | 	long	@_do_changepan
3b93c     4C EC 00 00 | 	long	@_do_changefreq
3b940     9C F0 00 00 | 	long	@_do_shutup
3b944     1C B0 01 00 | 	long	@_do_round
3b948     70 C9 00 00 | 	long	@_do_enter
3b94c     DC 00 01 00 | 	long	@_do_open
3b950     F4 03 01 00 | 	long	@_do_close
3b954     70 04 01 00 | 	long	@_do_get
3b958     14 0A 01 00 | 	long	@_do_put
3b95c     FC F2 01 00 | 	long	@_hg010b_spin2_putchar
3b960     78 02 03 00 | 	long	@__struct___bas_wrap_sender_tx
3b964     BC 02 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b968     04 03 03 00 | 	long	@__struct___bas_wrap_sender_close
3b96c     A8 01 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3b970     18 02 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3b974     60 01 03 00 | 	long	@___strs_cl_pfunc
3b978     F4 5E 02 00 | 	long	@__system____root_opendir
3b97c     90 5F 02 00 | 	long	@__system____root_closedir
3b980     0C 5F 02 00 | 	long	@__system____root_readdir
3b984     98 5F 02 00 | 	long	@__system____root_stat
3b988     E4 57 02 00 | 	long	@__system____default_putc
3b98c     68 57 02 00 | 	long	@__system____default_getc
3b990     8C 58 02 00 | 	long	@__system____default_flush
3b994     64 EC 02 00 | 	long	@_fatfs_cc_v_close
3b998     80 F0 02 00 | 	long	@_fatfs_cc_v_read
3b99c     94 F1 02 00 | 	long	@_fatfs_cc_v_write
3b9a0     74 F2 02 00 | 	long	@_fatfs_cc_v_lseek
3b9a4     FC F2 02 00 | 	long	@_fatfs_cc_v_ioctl
3b9a8     50 F3 02 00 | 	long	@_fatfs_cc_v_open
3b9ac     C8 EB 02 00 | 	long	@_fatfs_cc_v_creat
3b9b0     A8 EC 02 00 | 	long	@_fatfs_cc_v_opendir
3b9b4     1C ED 02 00 | 	long	@_fatfs_cc_v_closedir
3b9b8     5C ED 02 00 | 	long	@_fatfs_cc_v_readdir
3b9bc     90 EE 02 00 | 	long	@_fatfs_cc_v_stat
3b9c0     10 F3 02 00 | 	long	@_fatfs_cc_v_mkdir
3b9c4     30 F3 02 00 | 	long	@_fatfs_cc_v_rmdir
3b9c8     20 F3 02 00 | 	long	@_fatfs_cc_v_remove
3b9cc     40 F3 02 00 | 	long	@_fatfs_cc_v_rename
3b9d0     60 F4 02 00 | 	long	@_fatfs_cc_v_init
3b9d4     68 F4 02 00 | 	long	@_fatfs_cc_v_deinit
3b9d8     FC 0B 02 00 | 	long	@__system___tx
3b9dc     3C 0C 02 00 | 	long	@__system___rx
3b9e0     04 6B 02 00 | 	long	@__system___rxtxioctl_0696
3b9e4     5C 6B 02 00 | 	long	@__system____dummy_flush_0697
3b9e8     30 F4 02 00 | 	long	@_fatfs_cc_v_flush
3b9ec                 | __heap_base
3b9ec     00 00 00 00 
      ...             
6a7ec     00 00 00 00 
6a7f0     00 00 00 00 | 	long	0[48002]
6a7f4                 | objmem
6a7f4     00 00 00 00 
      ...             
74c0c     00 00 00 00 
74c10     00 00 00 00 | 	long	0[10504]
74c14                 | stackspace
74c14     00 00 00 00 | 	long	0[1]
74c18 100             | 	org	COG_BSS_START
74c18 100             | _var01
74c18 100             | 	res	1
74c18 101             | _var02
74c18 101             | 	res	1
74c18 102             | _var03
74c18 102             | 	res	1
74c18 103             | _var04
74c18 103             | 	res	1
74c18 104             | _var05
74c18 104             | 	res	1
74c18 105             | _var06
74c18 105             | 	res	1
74c18 106             | _var07
74c18 106             | 	res	1
74c18 107             | _var08
74c18 107             | 	res	1
74c18 108             | _var09
74c18 108             | 	res	1
74c18 109             | arg01
74c18 109             | 	res	1
74c18 10a             | arg02
74c18 10a             | 	res	1
74c18 10b             | arg03
74c18 10b             | 	res	1
74c18 10c             | arg04
74c18 10c             | 	res	1
74c18 10d             | arg05
74c18 10d             | 	res	1
74c18 10e             | arg06
74c18 10e             | 	res	1
74c18 10f             | local01
74c18 10f             | 	res	1
74c18 110             | local02
74c18 110             | 	res	1
74c18 111             | local03
74c18 111             | 	res	1
74c18 112             | local04
74c18 112             | 	res	1
74c18 113             | local05
74c18 113             | 	res	1
74c18 114             | local06
74c18 114             | 	res	1
74c18 115             | local07
74c18 115             | 	res	1
74c18 116             | local08
74c18 116             | 	res	1
74c18 117             | local09
74c18 117             | 	res	1
74c18 118             | local10
74c18 118             | 	res	1
74c18 119             | local11
74c18 119             | 	res	1
74c18 11a             | local12
74c18 11a             | 	res	1
74c18 11b             | local13
74c18 11b             | 	res	1
74c18 11c             | local14
74c18 11c             | 	res	1
74c18 11d             | local15
74c18 11d             | 	res	1
74c18 11e             | local16
74c18 11e             | 	res	1
74c18 11f             | local17
74c18 11f             | 	res	1
74c18 120             | local18
74c18 120             | 	res	1
74c18 121             | local19
74c18 121             | 	res	1
74c18 122             | local20
74c18 122             | 	res	1
74c18 123             | local21
74c18 123             | 	res	1
74c18 124             | local22
74c18 124             | 	res	1
74c18 125             | local23
74c18 125             | 	res	1
74c18 126             | local24
74c18 126             | 	res	1
74c18 127             | local25
74c18 127             | 	res	1
74c18 128             | local26
74c18 128             | 	res	1
74c18 129             | local27
74c18 129             | 	res	1
74c18 12a             | local28
74c18 12a             | 	res	1
74c18 12b             | local29
74c18 12b             | 	res	1
74c18 12c             | local30
74c18 12c             | 	res	1
74c18 12d             | local31
74c18 12d             | 	res	1
74c18 12e             | local32
74c18 12e             | 	res	1
74c18 12f             | local33
74c18 12f             | 	res	1
74c18 130             | local34
74c18 130             | 	res	1
74c18 131             | local35
74c18 131             | 	res	1
74c18 132             | local36
74c18 132             | 	res	1
74c18 133             | local37
74c18 133             | 	res	1
74c18 134             | local38
74c18 134             | 	res	1
74c18 135             | local39
74c18 135             | 	res	1
74c18 136             | local40
74c18 136             | 	res	1
74c18 137             | local41
74c18 137             | 	res	1
74c18 138             | local42
74c18 138             | 	res	1
74c18 139             | local43
74c18 139             | 	res	1
74c18 13a             | local44
74c18 13a             | 	res	1
74c18 13b             | local45
74c18 13b             | 	res	1
74c18 13c             | local46
74c18 13c             | 	res	1
74c18 13d             | local47
74c18 13d             | 	res	1
74c18 13e             | muldiva_
74c18 13e             | 	res	1
74c18 13f             | muldivb_
74c18 13f             | 	res	1
74c18 140             | 	fit	480
74c18 140             | 
